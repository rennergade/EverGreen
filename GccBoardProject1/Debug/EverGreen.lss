
EverGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000154c8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000250  20000000  000154c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005ac  20000250  00015718  00030250  2**2
                  ALLOC
  3 .stack        00002004  200007fc  00015cc4  00030250  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
  6 .debug_info   000807cd  00000000  00000000  00030342  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000082f1  00000000  00000000  000b0b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000088d8  00000000  00000000  000b8e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001800  00000000  00000000  000c16d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001620  00000000  00000000  000c2ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000123b1  00000000  00000000  000c44f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00023e10  00000000  00000000  000d68a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009904c  00000000  00000000  000fa6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000645c  00000000  00000000  00193708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * @temperature :  floating point temperature result, unit is ?C
 * @humidity    :  floating point humidity result, unit is RH%
 * Returns status.
 */
int hdc1080_measure(double *temperature, double *humidity)
{
       0:	00 28 00 20 5d c8 00 00 55 c9 00 00 55 c9 00 00     .(. ]...U...U...
	...
	uint8_t temp_res = HDC1080_T_RES_14;
	uint8_t humidres = HDC1080_RH_RES_14;
	uint8_t heater = 0; //heater off
	
	
	error = hdc1080_read_reg(10, HDC1080_CONFIG, &r);
      2c:	55 c9 00 00 00 00 00 00 00 00 00 00 55 c9 00 00     U...........U...
	if (error != STAT_OK) {
      3c:	55 c9 00 00 55 c9 00 00 55 c9 00 00 55 c9 00 00     U...U...U...U...
		printf("HDC Read Config Error\r\n");
		return error;
	}

	r |= temp_res<<10;
      4c:	55 c9 00 00 19 5c 00 00 55 c9 00 00 55 c9 00 00     U....\..U...U...
      5c:	55 c9 00 00 55 c9 00 00 b5 b5 00 00 cd b5 00 00     U...U...........
	r |= humidres<<8;
      6c:	e5 b5 00 00 fd b5 00 00 15 b6 00 00 2d b6 00 00     ............-...
      7c:	41 78 00 00 55 78 00 00 69 78 00 00 55 c9 00 00     Ax..Ux..ix..U...
	r |= 1<<12;     // mode = 1;
      8c:	55 c9 00 00 55 c9 00 00 00 00 00 00 00 00 00 00     U...U...........
	r |= heater<<13;
      9c:	55 c9 00 00 55 c9 00 00 55 c9 00 00 55 c9 00 00     U...U...U...U...
      ac:	55 c9 00 00 00 00 00 00                             U.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
	
	
	// write config
	error = hdc1080_write_reg(HDC1080_CONFIG, r);
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
	if (error != STAT_OK) {
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
		printf("HDC Write Config Error\r\n");
      d0:	20000250 	.word	0x20000250
      d4:	00000000 	.word	0x00000000
		return error;
      d8:	000154c8 	.word	0x000154c8

000000dc <frame_dummy>:
	}
	

	error = hdc1080_read_reg(150, HDC1080_TEMPERATURE, &r);
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
	if (error != STAT_OK) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
		printf("HDC Read Temp Error\r\n");
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
		return error;
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
	}
	tmp = (double)r;
     100:	00000000 	.word	0x00000000
     104:	20000254 	.word	0x20000254
     108:	000154c8 	.word	0x000154c8
     10c:	000154c8 	.word	0x000154c8
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     174:	b580      	push	{r7, lr}
     176:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     178:	4b04      	ldr	r3, [pc, #16]	; (18c <system_interrupt_enable_global+0x18>)
     17a:	2201      	movs	r2, #1
     17c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     17e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     182:	b662      	cpsie	i
}
     184:	46c0      	nop			; (mov r8, r8)
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	20000070 	.word	0x20000070

00000190 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     190:	b580      	push	{r7, lr}
     192:	b082      	sub	sp, #8
     194:	af00      	add	r7, sp, #0
     196:	0002      	movs	r2, r0
     198:	1dfb      	adds	r3, r7, #7
     19a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     19c:	1dfb      	adds	r3, r7, #7
     19e:	781b      	ldrb	r3, [r3, #0]
     1a0:	0018      	movs	r0, r3
     1a2:	4b03      	ldr	r3, [pc, #12]	; (1b0 <port_get_group_from_gpio_pin+0x20>)
     1a4:	4798      	blx	r3
     1a6:	0003      	movs	r3, r0
}
     1a8:	0018      	movs	r0, r3
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}
     1b0:	00000115 	.word	0x00000115

000001b4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b082      	sub	sp, #8
     1b8:	af00      	add	r7, sp, #0
     1ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2200      	movs	r2, #0
     1c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2201      	movs	r2, #1
     1c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	2200      	movs	r2, #0
     1cc:	709a      	strb	r2, [r3, #2]
}
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	46bd      	mov	sp, r7
     1d2:	b002      	add	sp, #8
     1d4:	bd80      	pop	{r7, pc}
	...

000001d8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b084      	sub	sp, #16
     1dc:	af00      	add	r7, sp, #0
     1de:	0002      	movs	r2, r0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
     1e4:	1dbb      	adds	r3, r7, #6
     1e6:	1c0a      	adds	r2, r1, #0
     1e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ea:	1dfb      	adds	r3, r7, #7
     1ec:	781b      	ldrb	r3, [r3, #0]
     1ee:	0018      	movs	r0, r3
     1f0:	4b0d      	ldr	r3, [pc, #52]	; (228 <port_pin_set_output_level+0x50>)
     1f2:	4798      	blx	r3
     1f4:	0003      	movs	r3, r0
     1f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	781b      	ldrb	r3, [r3, #0]
     1fc:	221f      	movs	r2, #31
     1fe:	4013      	ands	r3, r2
     200:	2201      	movs	r2, #1
     202:	409a      	lsls	r2, r3
     204:	0013      	movs	r3, r2
     206:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     208:	1dbb      	adds	r3, r7, #6
     20a:	781b      	ldrb	r3, [r3, #0]
     20c:	2b00      	cmp	r3, #0
     20e:	d003      	beq.n	218 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     210:	68fb      	ldr	r3, [r7, #12]
     212:	68ba      	ldr	r2, [r7, #8]
     214:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     216:	e002      	b.n	21e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     218:	68fb      	ldr	r3, [r7, #12]
     21a:	68ba      	ldr	r2, [r7, #8]
     21c:	615a      	str	r2, [r3, #20]
}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46bd      	mov	sp, r7
     222:	b004      	add	sp, #16
     224:	bd80      	pop	{r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	00000191 	.word	0x00000191

0000022c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     22c:	b580      	push	{r7, lr}
     22e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     230:	4b04      	ldr	r3, [pc, #16]	; (244 <chip_isr+0x18>)
     232:	681b      	ldr	r3, [r3, #0]
     234:	2b00      	cmp	r3, #0
     236:	d002      	beq.n	23e <chip_isr+0x12>
		gpfIsr();
     238:	4b02      	ldr	r3, [pc, #8]	; (244 <chip_isr+0x18>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	4798      	blx	r3
	}
}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46bd      	mov	sp, r7
     242:	bd80      	pop	{r7, pc}
     244:	2000026c 	.word	0x2000026c

00000248 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     24e:	1d3b      	adds	r3, r7, #4
     250:	0018      	movs	r0, r3
     252:	4b10      	ldr	r3, [pc, #64]	; (294 <init_chip_pins+0x4c>)
     254:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     256:	1d3b      	adds	r3, r7, #4
     258:	2201      	movs	r2, #1
     25a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     25c:	1d3b      	adds	r3, r7, #4
     25e:	0019      	movs	r1, r3
     260:	201b      	movs	r0, #27
     262:	4b0d      	ldr	r3, [pc, #52]	; (298 <init_chip_pins+0x50>)
     264:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     266:	1d3b      	adds	r3, r7, #4
     268:	0019      	movs	r1, r3
     26a:	201c      	movs	r0, #28
     26c:	4b0a      	ldr	r3, [pc, #40]	; (298 <init_chip_pins+0x50>)
     26e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     270:	1d3b      	adds	r3, r7, #4
     272:	0019      	movs	r1, r3
     274:	2028      	movs	r0, #40	; 0x28
     276:	4b08      	ldr	r3, [pc, #32]	; (298 <init_chip_pins+0x50>)
     278:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     27a:	2100      	movs	r1, #0
     27c:	201c      	movs	r0, #28
     27e:	4b07      	ldr	r3, [pc, #28]	; (29c <init_chip_pins+0x54>)
     280:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     282:	2100      	movs	r1, #0
     284:	201b      	movs	r0, #27
     286:	4b05      	ldr	r3, [pc, #20]	; (29c <init_chip_pins+0x54>)
     288:	4798      	blx	r3
}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	46bd      	mov	sp, r7
     28e:	b002      	add	sp, #8
     290:	bd80      	pop	{r7, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	000001b5 	.word	0x000001b5
     298:	0000b84d 	.word	0x0000b84d
     29c:	000001d9 	.word	0x000001d9

000002a0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     2a4:	4b0c      	ldr	r3, [pc, #48]	; (2d8 <nm_bsp_init+0x38>)
     2a6:	2200      	movs	r2, #0
     2a8:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     2aa:	4b0c      	ldr	r3, [pc, #48]	; (2dc <nm_bsp_init+0x3c>)
     2ac:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     2ae:	4b0c      	ldr	r3, [pc, #48]	; (2e0 <nm_bsp_init+0x40>)
     2b0:	681b      	ldr	r3, [r3, #0]
     2b2:	2201      	movs	r2, #1
     2b4:	4013      	ands	r3, r2
     2b6:	d004      	beq.n	2c2 <nm_bsp_init+0x22>
     2b8:	4b09      	ldr	r3, [pc, #36]	; (2e0 <nm_bsp_init+0x40>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	2202      	movs	r2, #2
     2be:	4013      	ands	r3, r2
     2c0:	d101      	bne.n	2c6 <nm_bsp_init+0x26>
	    delay_init();
     2c2:	4b08      	ldr	r3, [pc, #32]	; (2e4 <nm_bsp_init+0x44>)
     2c4:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <nm_bsp_init+0x48>)
     2c8:	4798      	blx	r3

	system_interrupt_enable_global();
     2ca:	4b08      	ldr	r3, [pc, #32]	; (2ec <nm_bsp_init+0x4c>)
     2cc:	4798      	blx	r3

	return M2M_SUCCESS;
     2ce:	2300      	movs	r3, #0
}
     2d0:	0018      	movs	r0, r3
     2d2:	46bd      	mov	sp, r7
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	2000026c 	.word	0x2000026c
     2dc:	00000249 	.word	0x00000249
     2e0:	e000e010 	.word	0xe000e010
     2e4:	00008831 	.word	0x00008831
     2e8:	000002f1 	.word	0x000002f1
     2ec:	00000175 	.word	0x00000175

000002f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     2f4:	2100      	movs	r1, #0
     2f6:	201c      	movs	r0, #28
     2f8:	4b0b      	ldr	r3, [pc, #44]	; (328 <nm_bsp_reset+0x38>)
     2fa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     2fc:	2100      	movs	r1, #0
     2fe:	201b      	movs	r0, #27
     300:	4b09      	ldr	r3, [pc, #36]	; (328 <nm_bsp_reset+0x38>)
     302:	4798      	blx	r3
	nm_bsp_sleep(1);
     304:	2001      	movs	r0, #1
     306:	4b09      	ldr	r3, [pc, #36]	; (32c <nm_bsp_reset+0x3c>)
     308:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     30a:	2101      	movs	r1, #1
     30c:	201c      	movs	r0, #28
     30e:	4b06      	ldr	r3, [pc, #24]	; (328 <nm_bsp_reset+0x38>)
     310:	4798      	blx	r3
	nm_bsp_sleep(10);
     312:	200a      	movs	r0, #10
     314:	4b05      	ldr	r3, [pc, #20]	; (32c <nm_bsp_reset+0x3c>)
     316:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     318:	2101      	movs	r1, #1
     31a:	201b      	movs	r0, #27
     31c:	4b02      	ldr	r3, [pc, #8]	; (328 <nm_bsp_reset+0x38>)
     31e:	4798      	blx	r3
}
     320:	46c0      	nop			; (mov r8, r8)
     322:	46bd      	mov	sp, r7
     324:	bd80      	pop	{r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	000001d9 	.word	0x000001d9
     32c:	00000331 	.word	0x00000331

00000330 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     330:	b580      	push	{r7, lr}
     332:	b082      	sub	sp, #8
     334:	af00      	add	r7, sp, #0
     336:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     338:	e002      	b.n	340 <nm_bsp_sleep+0x10>
		delay_ms(1);
     33a:	2001      	movs	r0, #1
     33c:	4b05      	ldr	r3, [pc, #20]	; (354 <nm_bsp_sleep+0x24>)
     33e:	4798      	blx	r3
	while (u32TimeMsec--) {
     340:	687b      	ldr	r3, [r7, #4]
     342:	1e5a      	subs	r2, r3, #1
     344:	607a      	str	r2, [r7, #4]
     346:	2b00      	cmp	r3, #0
     348:	d1f7      	bne.n	33a <nm_bsp_sleep+0xa>
	}
}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	46bd      	mov	sp, r7
     34e:	b002      	add	sp, #8
     350:	bd80      	pop	{r7, pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	000088b9 	.word	0x000088b9

00000358 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     358:	b580      	push	{r7, lr}
     35a:	b086      	sub	sp, #24
     35c:	af00      	add	r7, sp, #0
     35e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     360:	4b15      	ldr	r3, [pc, #84]	; (3b8 <nm_bsp_register_isr+0x60>)
     362:	687a      	ldr	r2, [r7, #4]
     364:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     366:	230c      	movs	r3, #12
     368:	18fb      	adds	r3, r7, r3
     36a:	0018      	movs	r0, r3
     36c:	4b13      	ldr	r3, [pc, #76]	; (3bc <nm_bsp_register_isr+0x64>)
     36e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     370:	230c      	movs	r3, #12
     372:	18fb      	adds	r3, r7, r3
     374:	2229      	movs	r2, #41	; 0x29
     376:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     378:	230c      	movs	r3, #12
     37a:	18fb      	adds	r3, r7, r3
     37c:	2200      	movs	r2, #0
     37e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     380:	230c      	movs	r3, #12
     382:	18fb      	adds	r3, r7, r3
     384:	2201      	movs	r2, #1
     386:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     388:	230c      	movs	r3, #12
     38a:	18fb      	adds	r3, r7, r3
     38c:	2202      	movs	r2, #2
     38e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     390:	230c      	movs	r3, #12
     392:	18fb      	adds	r3, r7, r3
     394:	0019      	movs	r1, r3
     396:	2009      	movs	r0, #9
     398:	4b09      	ldr	r3, [pc, #36]	; (3c0 <nm_bsp_register_isr+0x68>)
     39a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     39c:	4b09      	ldr	r3, [pc, #36]	; (3c4 <nm_bsp_register_isr+0x6c>)
     39e:	2200      	movs	r2, #0
     3a0:	2109      	movs	r1, #9
     3a2:	0018      	movs	r0, r3
     3a4:	4b08      	ldr	r3, [pc, #32]	; (3c8 <nm_bsp_register_isr+0x70>)
     3a6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3a8:	2100      	movs	r1, #0
     3aa:	2009      	movs	r0, #9
     3ac:	4b07      	ldr	r3, [pc, #28]	; (3cc <nm_bsp_register_isr+0x74>)
     3ae:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     3b0:	46c0      	nop			; (mov r8, r8)
     3b2:	46bd      	mov	sp, r7
     3b4:	b006      	add	sp, #24
     3b6:	bd80      	pop	{r7, pc}
     3b8:	2000026c 	.word	0x2000026c
     3bc:	00005f25 	.word	0x00005f25
     3c0:	00005f59 	.word	0x00005f59
     3c4:	0000022d 	.word	0x0000022d
     3c8:	00005b25 	.word	0x00005b25
     3cc:	00005b89 	.word	0x00005b89

000003d0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b082      	sub	sp, #8
     3d4:	af00      	add	r7, sp, #0
     3d6:	0002      	movs	r2, r0
     3d8:	1dfb      	adds	r3, r7, #7
     3da:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     3dc:	1dfb      	adds	r3, r7, #7
     3de:	781b      	ldrb	r3, [r3, #0]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d004      	beq.n	3ee <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3e4:	2100      	movs	r1, #0
     3e6:	2009      	movs	r0, #9
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <nm_bsp_interrupt_ctrl+0x30>)
     3ea:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     3ec:	e003      	b.n	3f6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     3ee:	2100      	movs	r1, #0
     3f0:	2009      	movs	r0, #9
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <nm_bsp_interrupt_ctrl+0x34>)
     3f4:	4798      	blx	r3
}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	46bd      	mov	sp, r7
     3fa:	b002      	add	sp, #8
     3fc:	bd80      	pop	{r7, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	00005b89 	.word	0x00005b89
     404:	00005bd1 	.word	0x00005bd1

00000408 <system_pinmux_get_group_from_gpio_pin>:
{
     408:	b580      	push	{r7, lr}
     40a:	b084      	sub	sp, #16
     40c:	af00      	add	r7, sp, #0
     40e:	0002      	movs	r2, r0
     410:	1dfb      	adds	r3, r7, #7
     412:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     414:	230f      	movs	r3, #15
     416:	18fb      	adds	r3, r7, r3
     418:	1dfa      	adds	r2, r7, #7
     41a:	7812      	ldrb	r2, [r2, #0]
     41c:	09d2      	lsrs	r2, r2, #7
     41e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     420:	230e      	movs	r3, #14
     422:	18fb      	adds	r3, r7, r3
     424:	1dfa      	adds	r2, r7, #7
     426:	7812      	ldrb	r2, [r2, #0]
     428:	0952      	lsrs	r2, r2, #5
     42a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     42c:	4b0d      	ldr	r3, [pc, #52]	; (464 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     42e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     430:	230f      	movs	r3, #15
     432:	18fb      	adds	r3, r7, r3
     434:	781b      	ldrb	r3, [r3, #0]
     436:	2b00      	cmp	r3, #0
     438:	d10f      	bne.n	45a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     43a:	230f      	movs	r3, #15
     43c:	18fb      	adds	r3, r7, r3
     43e:	781b      	ldrb	r3, [r3, #0]
     440:	009b      	lsls	r3, r3, #2
     442:	2210      	movs	r2, #16
     444:	4694      	mov	ip, r2
     446:	44bc      	add	ip, r7
     448:	4463      	add	r3, ip
     44a:	3b08      	subs	r3, #8
     44c:	681a      	ldr	r2, [r3, #0]
     44e:	230e      	movs	r3, #14
     450:	18fb      	adds	r3, r7, r3
     452:	781b      	ldrb	r3, [r3, #0]
     454:	01db      	lsls	r3, r3, #7
     456:	18d3      	adds	r3, r2, r3
     458:	e000      	b.n	45c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     45a:	2300      	movs	r3, #0
}
     45c:	0018      	movs	r0, r3
     45e:	46bd      	mov	sp, r7
     460:	b004      	add	sp, #16
     462:	bd80      	pop	{r7, pc}
     464:	41004400 	.word	0x41004400

00000468 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	0002      	movs	r2, r0
     470:	1dfb      	adds	r3, r7, #7
     472:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     474:	4b06      	ldr	r3, [pc, #24]	; (490 <system_interrupt_enable+0x28>)
     476:	1dfa      	adds	r2, r7, #7
     478:	7812      	ldrb	r2, [r2, #0]
     47a:	0011      	movs	r1, r2
     47c:	221f      	movs	r2, #31
     47e:	400a      	ands	r2, r1
     480:	2101      	movs	r1, #1
     482:	4091      	lsls	r1, r2
     484:	000a      	movs	r2, r1
     486:	601a      	str	r2, [r3, #0]
}
     488:	46c0      	nop			; (mov r8, r8)
     48a:	46bd      	mov	sp, r7
     48c:	b002      	add	sp, #8
     48e:	bd80      	pop	{r7, pc}
     490:	e000e100 	.word	0xe000e100

00000494 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     494:	b580      	push	{r7, lr}
     496:	b082      	sub	sp, #8
     498:	af00      	add	r7, sp, #0
     49a:	0002      	movs	r2, r0
     49c:	1dfb      	adds	r3, r7, #7
     49e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4a0:	4a07      	ldr	r2, [pc, #28]	; (4c0 <system_interrupt_disable+0x2c>)
     4a2:	1dfb      	adds	r3, r7, #7
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	0019      	movs	r1, r3
     4a8:	231f      	movs	r3, #31
     4aa:	400b      	ands	r3, r1
     4ac:	2101      	movs	r1, #1
     4ae:	4099      	lsls	r1, r3
     4b0:	000b      	movs	r3, r1
     4b2:	0019      	movs	r1, r3
     4b4:	2380      	movs	r3, #128	; 0x80
     4b6:	50d1      	str	r1, [r2, r3]
}
     4b8:	46c0      	nop			; (mov r8, r8)
     4ba:	46bd      	mov	sp, r7
     4bc:	b002      	add	sp, #8
     4be:	bd80      	pop	{r7, pc}
     4c0:	e000e100 	.word	0xe000e100

000004c4 <port_get_group_from_gpio_pin>:
{
     4c4:	b580      	push	{r7, lr}
     4c6:	b082      	sub	sp, #8
     4c8:	af00      	add	r7, sp, #0
     4ca:	0002      	movs	r2, r0
     4cc:	1dfb      	adds	r3, r7, #7
     4ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     4d0:	1dfb      	adds	r3, r7, #7
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	0018      	movs	r0, r3
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <port_get_group_from_gpio_pin+0x20>)
     4d8:	4798      	blx	r3
     4da:	0003      	movs	r3, r0
}
     4dc:	0018      	movs	r0, r3
     4de:	46bd      	mov	sp, r7
     4e0:	b002      	add	sp, #8
     4e2:	bd80      	pop	{r7, pc}
     4e4:	00000409 	.word	0x00000409

000004e8 <port_get_config_defaults>:
{
     4e8:	b580      	push	{r7, lr}
     4ea:	b082      	sub	sp, #8
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	2200      	movs	r2, #0
     4f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	2201      	movs	r2, #1
     4fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	2200      	movs	r2, #0
     500:	709a      	strb	r2, [r3, #2]
}
     502:	46c0      	nop			; (mov r8, r8)
     504:	46bd      	mov	sp, r7
     506:	b002      	add	sp, #8
     508:	bd80      	pop	{r7, pc}
	...

0000050c <port_pin_set_output_level>:
{
     50c:	b580      	push	{r7, lr}
     50e:	b084      	sub	sp, #16
     510:	af00      	add	r7, sp, #0
     512:	0002      	movs	r2, r0
     514:	1dfb      	adds	r3, r7, #7
     516:	701a      	strb	r2, [r3, #0]
     518:	1dbb      	adds	r3, r7, #6
     51a:	1c0a      	adds	r2, r1, #0
     51c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     51e:	1dfb      	adds	r3, r7, #7
     520:	781b      	ldrb	r3, [r3, #0]
     522:	0018      	movs	r0, r3
     524:	4b0d      	ldr	r3, [pc, #52]	; (55c <port_pin_set_output_level+0x50>)
     526:	4798      	blx	r3
     528:	0003      	movs	r3, r0
     52a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     52c:	1dfb      	adds	r3, r7, #7
     52e:	781b      	ldrb	r3, [r3, #0]
     530:	221f      	movs	r2, #31
     532:	4013      	ands	r3, r2
     534:	2201      	movs	r2, #1
     536:	409a      	lsls	r2, r3
     538:	0013      	movs	r3, r2
     53a:	60bb      	str	r3, [r7, #8]
	if (level) {
     53c:	1dbb      	adds	r3, r7, #6
     53e:	781b      	ldrb	r3, [r3, #0]
     540:	2b00      	cmp	r3, #0
     542:	d003      	beq.n	54c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     544:	68fb      	ldr	r3, [r7, #12]
     546:	68ba      	ldr	r2, [r7, #8]
     548:	619a      	str	r2, [r3, #24]
}
     54a:	e002      	b.n	552 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     54c:	68fb      	ldr	r3, [r7, #12]
     54e:	68ba      	ldr	r2, [r7, #8]
     550:	615a      	str	r2, [r3, #20]
}
     552:	46c0      	nop			; (mov r8, r8)
     554:	46bd      	mov	sp, r7
     556:	b004      	add	sp, #16
     558:	bd80      	pop	{r7, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	000004c5 	.word	0x000004c5

00000560 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     560:	b580      	push	{r7, lr}
     562:	b084      	sub	sp, #16
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     568:	687b      	ldr	r3, [r7, #4]
     56a:	681b      	ldr	r3, [r3, #0]
     56c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	69db      	ldr	r3, [r3, #28]
     572:	1e5a      	subs	r2, r3, #1
     574:	4193      	sbcs	r3, r2
     576:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     578:	0018      	movs	r0, r3
     57a:	46bd      	mov	sp, r7
     57c:	b004      	add	sp, #16
     57e:	bd80      	pop	{r7, pc}

00000580 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     580:	b580      	push	{r7, lr}
     582:	b082      	sub	sp, #8
     584:	af00      	add	r7, sp, #0
     586:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     588:	687b      	ldr	r3, [r7, #4]
     58a:	2201      	movs	r2, #1
     58c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     58e:	687b      	ldr	r3, [r7, #4]
     590:	2200      	movs	r2, #0
     592:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     594:	687b      	ldr	r3, [r7, #4]
     596:	2200      	movs	r2, #0
     598:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	22c0      	movs	r2, #192	; 0xc0
     59e:	0392      	lsls	r2, r2, #14
     5a0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	2200      	movs	r2, #0
     5a6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	2200      	movs	r2, #0
     5ac:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	2201      	movs	r2, #1
     5b2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     5b4:	687b      	ldr	r3, [r7, #4]
     5b6:	2201      	movs	r2, #1
     5b8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	2200      	movs	r2, #0
     5be:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	2224      	movs	r2, #36	; 0x24
     5c4:	2100      	movs	r1, #0
     5c6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	3318      	adds	r3, #24
     5cc:	220c      	movs	r2, #12
     5ce:	2100      	movs	r1, #0
     5d0:	0018      	movs	r0, r3
     5d2:	4b0a      	ldr	r3, [pc, #40]	; (5fc <spi_get_config_defaults+0x7c>)
     5d4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	4a09      	ldr	r2, [pc, #36]	; (600 <spi_get_config_defaults+0x80>)
     5da:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	2200      	movs	r2, #0
     5e0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	2200      	movs	r2, #0
     5e6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     5e8:	687b      	ldr	r3, [r7, #4]
     5ea:	2200      	movs	r2, #0
     5ec:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	2200      	movs	r2, #0
     5f2:	635a      	str	r2, [r3, #52]	; 0x34

};
     5f4:	46c0      	nop			; (mov r8, r8)
     5f6:	46bd      	mov	sp, r7
     5f8:	b002      	add	sp, #8
     5fa:	bd80      	pop	{r7, pc}
     5fc:	0000e66b 	.word	0x0000e66b
     600:	000186a0 	.word	0x000186a0

00000604 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     604:	b580      	push	{r7, lr}
     606:	b082      	sub	sp, #8
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     60c:	687b      	ldr	r3, [r7, #4]
     60e:	220a      	movs	r2, #10
     610:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     612:	687b      	ldr	r3, [r7, #4]
     614:	2200      	movs	r2, #0
     616:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     618:	687b      	ldr	r3, [r7, #4]
     61a:	2200      	movs	r2, #0
     61c:	709a      	strb	r2, [r3, #2]
}
     61e:	46c0      	nop			; (mov r8, r8)
     620:	46bd      	mov	sp, r7
     622:	b002      	add	sp, #8
     624:	bd80      	pop	{r7, pc}
	...

00000628 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     628:	b580      	push	{r7, lr}
     62a:	b084      	sub	sp, #16
     62c:	af00      	add	r7, sp, #0
     62e:	6078      	str	r0, [r7, #4]
     630:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     632:	683b      	ldr	r3, [r7, #0]
     634:	781a      	ldrb	r2, [r3, #0]
     636:	687b      	ldr	r3, [r7, #4]
     638:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	785a      	ldrb	r2, [r3, #1]
     63e:	687b      	ldr	r3, [r7, #4]
     640:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     642:	683b      	ldr	r3, [r7, #0]
     644:	789a      	ldrb	r2, [r3, #2]
     646:	687b      	ldr	r3, [r7, #4]
     648:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     64a:	230c      	movs	r3, #12
     64c:	18fb      	adds	r3, r7, r3
     64e:	0018      	movs	r0, r3
     650:	4b0b      	ldr	r3, [pc, #44]	; (680 <spi_attach_slave+0x58>)
     652:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     654:	230c      	movs	r3, #12
     656:	18fb      	adds	r3, r7, r3
     658:	2201      	movs	r2, #1
     65a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	781b      	ldrb	r3, [r3, #0]
     660:	220c      	movs	r2, #12
     662:	18ba      	adds	r2, r7, r2
     664:	0011      	movs	r1, r2
     666:	0018      	movs	r0, r3
     668:	4b06      	ldr	r3, [pc, #24]	; (684 <spi_attach_slave+0x5c>)
     66a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	781b      	ldrb	r3, [r3, #0]
     670:	2101      	movs	r1, #1
     672:	0018      	movs	r0, r3
     674:	4b04      	ldr	r3, [pc, #16]	; (688 <spi_attach_slave+0x60>)
     676:	4798      	blx	r3
}
     678:	46c0      	nop			; (mov r8, r8)
     67a:	46bd      	mov	sp, r7
     67c:	b004      	add	sp, #16
     67e:	bd80      	pop	{r7, pc}
     680:	000004e9 	.word	0x000004e9
     684:	0000b84d 	.word	0x0000b84d
     688:	0000050d 	.word	0x0000050d

0000068c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     68c:	b580      	push	{r7, lr}
     68e:	b084      	sub	sp, #16
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     694:	687b      	ldr	r3, [r7, #4]
     696:	681b      	ldr	r3, [r3, #0]
     698:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	681b      	ldr	r3, [r3, #0]
     69e:	0018      	movs	r0, r3
     6a0:	4b0b      	ldr	r3, [pc, #44]	; (6d0 <spi_enable+0x44>)
     6a2:	4798      	blx	r3
     6a4:	0003      	movs	r3, r0
     6a6:	0018      	movs	r0, r3
     6a8:	4b0a      	ldr	r3, [pc, #40]	; (6d4 <spi_enable+0x48>)
     6aa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     6ac:	46c0      	nop			; (mov r8, r8)
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	0018      	movs	r0, r3
     6b2:	4b09      	ldr	r3, [pc, #36]	; (6d8 <spi_enable+0x4c>)
     6b4:	4798      	blx	r3
     6b6:	1e03      	subs	r3, r0, #0
     6b8:	d1f9      	bne.n	6ae <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	681b      	ldr	r3, [r3, #0]
     6be:	2202      	movs	r2, #2
     6c0:	431a      	orrs	r2, r3
     6c2:	68fb      	ldr	r3, [r7, #12]
     6c4:	601a      	str	r2, [r3, #0]
}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	46bd      	mov	sp, r7
     6ca:	b004      	add	sp, #16
     6cc:	bd80      	pop	{r7, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	0000b571 	.word	0x0000b571
     6d4:	00000469 	.word	0x00000469
     6d8:	00000561 	.word	0x00000561

000006dc <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     6dc:	b580      	push	{r7, lr}
     6de:	b084      	sub	sp, #16
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	0018      	movs	r0, r3
     6f0:	4b0e      	ldr	r3, [pc, #56]	; (72c <spi_disable+0x50>)
     6f2:	4798      	blx	r3
     6f4:	0003      	movs	r3, r0
     6f6:	0018      	movs	r0, r3
     6f8:	4b0d      	ldr	r3, [pc, #52]	; (730 <spi_disable+0x54>)
     6fa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     6fc:	46c0      	nop			; (mov r8, r8)
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	0018      	movs	r0, r3
     702:	4b0c      	ldr	r3, [pc, #48]	; (734 <spi_disable+0x58>)
     704:	4798      	blx	r3
     706:	1e03      	subs	r3, r0, #0
     708:	d1f9      	bne.n	6fe <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     70a:	68fb      	ldr	r3, [r7, #12]
     70c:	228f      	movs	r2, #143	; 0x8f
     70e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     710:	68fb      	ldr	r3, [r7, #12]
     712:	228f      	movs	r2, #143	; 0x8f
     714:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     716:	68fb      	ldr	r3, [r7, #12]
     718:	681b      	ldr	r3, [r3, #0]
     71a:	2202      	movs	r2, #2
     71c:	4393      	bics	r3, r2
     71e:	001a      	movs	r2, r3
     720:	68fb      	ldr	r3, [r7, #12]
     722:	601a      	str	r2, [r3, #0]
}
     724:	46c0      	nop			; (mov r8, r8)
     726:	46bd      	mov	sp, r7
     728:	b004      	add	sp, #16
     72a:	bd80      	pop	{r7, pc}
     72c:	0000b571 	.word	0x0000b571
     730:	00000495 	.word	0x00000495
     734:	00000561 	.word	0x00000561

00000738 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     738:	b580      	push	{r7, lr}
     73a:	b084      	sub	sp, #16
     73c:	af00      	add	r7, sp, #0
     73e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     740:	687b      	ldr	r3, [r7, #4]
     742:	681b      	ldr	r3, [r3, #0]
     744:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     746:	68fb      	ldr	r3, [r7, #12]
     748:	7e1b      	ldrb	r3, [r3, #24]
     74a:	b2db      	uxtb	r3, r3
     74c:	001a      	movs	r2, r3
     74e:	2302      	movs	r3, #2
     750:	4013      	ands	r3, r2
     752:	1e5a      	subs	r2, r3, #1
     754:	4193      	sbcs	r3, r2
     756:	b2db      	uxtb	r3, r3
}
     758:	0018      	movs	r0, r3
     75a:	46bd      	mov	sp, r7
     75c:	b004      	add	sp, #16
     75e:	bd80      	pop	{r7, pc}

00000760 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     760:	b580      	push	{r7, lr}
     762:	b084      	sub	sp, #16
     764:	af00      	add	r7, sp, #0
     766:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     768:	687b      	ldr	r3, [r7, #4]
     76a:	681b      	ldr	r3, [r3, #0]
     76c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     76e:	68fb      	ldr	r3, [r7, #12]
     770:	7e1b      	ldrb	r3, [r3, #24]
     772:	b2db      	uxtb	r3, r3
     774:	001a      	movs	r2, r3
     776:	2301      	movs	r3, #1
     778:	4013      	ands	r3, r2
     77a:	1e5a      	subs	r2, r3, #1
     77c:	4193      	sbcs	r3, r2
     77e:	b2db      	uxtb	r3, r3
}
     780:	0018      	movs	r0, r3
     782:	46bd      	mov	sp, r7
     784:	b004      	add	sp, #16
     786:	bd80      	pop	{r7, pc}

00000788 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     788:	b580      	push	{r7, lr}
     78a:	b084      	sub	sp, #16
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     790:	687b      	ldr	r3, [r7, #4]
     792:	681b      	ldr	r3, [r3, #0]
     794:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     796:	68fb      	ldr	r3, [r7, #12]
     798:	7e1b      	ldrb	r3, [r3, #24]
     79a:	b2db      	uxtb	r3, r3
     79c:	001a      	movs	r2, r3
     79e:	2304      	movs	r3, #4
     7a0:	4013      	ands	r3, r2
     7a2:	1e5a      	subs	r2, r3, #1
     7a4:	4193      	sbcs	r3, r2
     7a6:	b2db      	uxtb	r3, r3
}
     7a8:	0018      	movs	r0, r3
     7aa:	46bd      	mov	sp, r7
     7ac:	b004      	add	sp, #16
     7ae:	bd80      	pop	{r7, pc}

000007b0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     7b0:	b580      	push	{r7, lr}
     7b2:	b084      	sub	sp, #16
     7b4:	af00      	add	r7, sp, #0
     7b6:	6078      	str	r0, [r7, #4]
     7b8:	000a      	movs	r2, r1
     7ba:	1cbb      	adds	r3, r7, #2
     7bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	681b      	ldr	r3, [r3, #0]
     7c2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	0018      	movs	r0, r3
     7c8:	4b0a      	ldr	r3, [pc, #40]	; (7f4 <spi_write+0x44>)
     7ca:	4798      	blx	r3
     7cc:	0003      	movs	r3, r0
     7ce:	001a      	movs	r2, r3
     7d0:	2301      	movs	r3, #1
     7d2:	4053      	eors	r3, r2
     7d4:	b2db      	uxtb	r3, r3
     7d6:	2b00      	cmp	r3, #0
     7d8:	d001      	beq.n	7de <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     7da:	2305      	movs	r3, #5
     7dc:	e006      	b.n	7ec <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     7de:	1cbb      	adds	r3, r7, #2
     7e0:	881b      	ldrh	r3, [r3, #0]
     7e2:	05db      	lsls	r3, r3, #23
     7e4:	0dda      	lsrs	r2, r3, #23
     7e6:	68fb      	ldr	r3, [r7, #12]
     7e8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     7ea:	2300      	movs	r3, #0
}
     7ec:	0018      	movs	r0, r3
     7ee:	46bd      	mov	sp, r7
     7f0:	b004      	add	sp, #16
     7f2:	bd80      	pop	{r7, pc}
     7f4:	00000761 	.word	0x00000761

000007f8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
     800:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     802:	687b      	ldr	r3, [r7, #4]
     804:	681b      	ldr	r3, [r3, #0]
     806:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     808:	687b      	ldr	r3, [r7, #4]
     80a:	0018      	movs	r0, r3
     80c:	4b1b      	ldr	r3, [pc, #108]	; (87c <spi_read+0x84>)
     80e:	4798      	blx	r3
     810:	0003      	movs	r3, r0
     812:	001a      	movs	r2, r3
     814:	2301      	movs	r3, #1
     816:	4053      	eors	r3, r2
     818:	b2db      	uxtb	r3, r3
     81a:	2b00      	cmp	r3, #0
     81c:	d001      	beq.n	822 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     81e:	2310      	movs	r3, #16
     820:	e027      	b.n	872 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     822:	230f      	movs	r3, #15
     824:	18fb      	adds	r3, r7, r3
     826:	2200      	movs	r2, #0
     828:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     82a:	68bb      	ldr	r3, [r7, #8]
     82c:	8b5b      	ldrh	r3, [r3, #26]
     82e:	b29b      	uxth	r3, r3
     830:	001a      	movs	r2, r3
     832:	2304      	movs	r3, #4
     834:	4013      	ands	r3, r2
     836:	d006      	beq.n	846 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     838:	230f      	movs	r3, #15
     83a:	18fb      	adds	r3, r7, r3
     83c:	221e      	movs	r2, #30
     83e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     840:	68bb      	ldr	r3, [r7, #8]
     842:	2204      	movs	r2, #4
     844:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     846:	687b      	ldr	r3, [r7, #4]
     848:	799b      	ldrb	r3, [r3, #6]
     84a:	2b01      	cmp	r3, #1
     84c:	d108      	bne.n	860 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     84e:	68bb      	ldr	r3, [r7, #8]
     850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     852:	b29b      	uxth	r3, r3
     854:	05db      	lsls	r3, r3, #23
     856:	0ddb      	lsrs	r3, r3, #23
     858:	b29a      	uxth	r2, r3
     85a:	683b      	ldr	r3, [r7, #0]
     85c:	801a      	strh	r2, [r3, #0]
     85e:	e005      	b.n	86c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     860:	68bb      	ldr	r3, [r7, #8]
     862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     864:	b2db      	uxtb	r3, r3
     866:	b29a      	uxth	r2, r3
     868:	683b      	ldr	r3, [r7, #0]
     86a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     86c:	230f      	movs	r3, #15
     86e:	18fb      	adds	r3, r7, r3
     870:	781b      	ldrb	r3, [r3, #0]
}
     872:	0018      	movs	r0, r3
     874:	46bd      	mov	sp, r7
     876:	b004      	add	sp, #16
     878:	bd80      	pop	{r7, pc}
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	00000789 	.word	0x00000789

00000880 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     880:	b580      	push	{r7, lr}
     882:	b086      	sub	sp, #24
     884:	af00      	add	r7, sp, #0
     886:	60f8      	str	r0, [r7, #12]
     888:	60b9      	str	r1, [r7, #8]
     88a:	1dbb      	adds	r3, r7, #6
     88c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     88e:	2313      	movs	r3, #19
     890:	18fb      	adds	r3, r7, r3
     892:	2200      	movs	r2, #0
     894:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     896:	2317      	movs	r3, #23
     898:	18fb      	adds	r3, r7, r3
     89a:	2200      	movs	r2, #0
     89c:	701a      	strb	r2, [r3, #0]
     89e:	2316      	movs	r3, #22
     8a0:	18fb      	adds	r3, r7, r3
     8a2:	2200      	movs	r2, #0
     8a4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     8a6:	2314      	movs	r3, #20
     8a8:	18fb      	adds	r3, r7, r3
     8aa:	2200      	movs	r2, #0
     8ac:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     8ae:	2310      	movs	r3, #16
     8b0:	18fb      	adds	r3, r7, r3
     8b2:	2200      	movs	r2, #0
     8b4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     8b6:	68bb      	ldr	r3, [r7, #8]
     8b8:	2b00      	cmp	r3, #0
     8ba:	d102      	bne.n	8c2 <spi_rw+0x42>
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	2b00      	cmp	r3, #0
     8c0:	d003      	beq.n	8ca <spi_rw+0x4a>
     8c2:	1dbb      	adds	r3, r7, #6
     8c4:	881b      	ldrh	r3, [r3, #0]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d102      	bne.n	8d0 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
     8ca:	230f      	movs	r3, #15
     8cc:	425b      	negs	r3, r3
     8ce:	e07e      	b.n	9ce <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	2b00      	cmp	r3, #0
     8d4:	d106      	bne.n	8e4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
     8d6:	2313      	movs	r3, #19
     8d8:	18fb      	adds	r3, r7, r3
     8da:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     8dc:	2317      	movs	r3, #23
     8de:	18fb      	adds	r3, r7, r3
     8e0:	2201      	movs	r2, #1
     8e2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
     8e4:	68bb      	ldr	r3, [r7, #8]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d106      	bne.n	8f8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
     8ea:	2313      	movs	r3, #19
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     8f0:	2316      	movs	r3, #22
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	2201      	movs	r2, #1
     8f6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
     8f8:	4937      	ldr	r1, [pc, #220]	; (9d8 <spi_rw+0x158>)
     8fa:	4b38      	ldr	r3, [pc, #224]	; (9dc <spi_rw+0x15c>)
     8fc:	2201      	movs	r2, #1
     8fe:	0018      	movs	r0, r3
     900:	4b37      	ldr	r3, [pc, #220]	; (9e0 <spi_rw+0x160>)
     902:	4798      	blx	r3

	while (u16Sz) {
     904:	e04c      	b.n	9a0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
     906:	68fb      	ldr	r3, [r7, #12]
     908:	781a      	ldrb	r2, [r3, #0]
     90a:	2314      	movs	r3, #20
     90c:	18fb      	adds	r3, r7, r3
     90e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     910:	46c0      	nop			; (mov r8, r8)
     912:	4b32      	ldr	r3, [pc, #200]	; (9dc <spi_rw+0x15c>)
     914:	0018      	movs	r0, r3
     916:	4b33      	ldr	r3, [pc, #204]	; (9e4 <spi_rw+0x164>)
     918:	4798      	blx	r3
     91a:	0003      	movs	r3, r0
     91c:	001a      	movs	r2, r3
     91e:	2301      	movs	r3, #1
     920:	4053      	eors	r3, r2
     922:	b2db      	uxtb	r3, r3
     924:	2b00      	cmp	r3, #0
     926:	d1f4      	bne.n	912 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     928:	46c0      	nop			; (mov r8, r8)
     92a:	2314      	movs	r3, #20
     92c:	18fb      	adds	r3, r7, r3
     92e:	881a      	ldrh	r2, [r3, #0]
     930:	4b2a      	ldr	r3, [pc, #168]	; (9dc <spi_rw+0x15c>)
     932:	0011      	movs	r1, r2
     934:	0018      	movs	r0, r3
     936:	4b2c      	ldr	r3, [pc, #176]	; (9e8 <spi_rw+0x168>)
     938:	4798      	blx	r3
     93a:	1e03      	subs	r3, r0, #0
     93c:	d1f5      	bne.n	92a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     93e:	46c0      	nop			; (mov r8, r8)
     940:	4b26      	ldr	r3, [pc, #152]	; (9dc <spi_rw+0x15c>)
     942:	0018      	movs	r0, r3
     944:	4b29      	ldr	r3, [pc, #164]	; (9ec <spi_rw+0x16c>)
     946:	4798      	blx	r3
     948:	0003      	movs	r3, r0
     94a:	001a      	movs	r2, r3
     94c:	2301      	movs	r3, #1
     94e:	4053      	eors	r3, r2
     950:	b2db      	uxtb	r3, r3
     952:	2b00      	cmp	r3, #0
     954:	d1f4      	bne.n	940 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     956:	46c0      	nop			; (mov r8, r8)
     958:	2310      	movs	r3, #16
     95a:	18fa      	adds	r2, r7, r3
     95c:	4b1f      	ldr	r3, [pc, #124]	; (9dc <spi_rw+0x15c>)
     95e:	0011      	movs	r1, r2
     960:	0018      	movs	r0, r3
     962:	4b23      	ldr	r3, [pc, #140]	; (9f0 <spi_rw+0x170>)
     964:	4798      	blx	r3
     966:	1e03      	subs	r3, r0, #0
     968:	d1f6      	bne.n	958 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
     96a:	2310      	movs	r3, #16
     96c:	18fb      	adds	r3, r7, r3
     96e:	881b      	ldrh	r3, [r3, #0]
     970:	b2da      	uxtb	r2, r3
     972:	68bb      	ldr	r3, [r7, #8]
     974:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
     976:	1dbb      	adds	r3, r7, #6
     978:	881a      	ldrh	r2, [r3, #0]
     97a:	1dbb      	adds	r3, r7, #6
     97c:	3a01      	subs	r2, #1
     97e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     980:	2316      	movs	r3, #22
     982:	18fb      	adds	r3, r7, r3
     984:	781b      	ldrb	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d102      	bne.n	990 <spi_rw+0x110>
			pu8Miso++;
     98a:	68bb      	ldr	r3, [r7, #8]
     98c:	3301      	adds	r3, #1
     98e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     990:	2317      	movs	r3, #23
     992:	18fb      	adds	r3, r7, r3
     994:	781b      	ldrb	r3, [r3, #0]
     996:	2b00      	cmp	r3, #0
     998:	d102      	bne.n	9a0 <spi_rw+0x120>
			pu8Mosi++;
     99a:	68fb      	ldr	r3, [r7, #12]
     99c:	3301      	adds	r3, #1
     99e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
     9a0:	1dbb      	adds	r3, r7, #6
     9a2:	881b      	ldrh	r3, [r3, #0]
     9a4:	2b00      	cmp	r3, #0
     9a6:	d1ae      	bne.n	906 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
     9a8:	46c0      	nop			; (mov r8, r8)
     9aa:	4b0c      	ldr	r3, [pc, #48]	; (9dc <spi_rw+0x15c>)
     9ac:	0018      	movs	r0, r3
     9ae:	4b11      	ldr	r3, [pc, #68]	; (9f4 <spi_rw+0x174>)
     9b0:	4798      	blx	r3
     9b2:	0003      	movs	r3, r0
     9b4:	001a      	movs	r2, r3
     9b6:	2301      	movs	r3, #1
     9b8:	4053      	eors	r3, r2
     9ba:	b2db      	uxtb	r3, r3
     9bc:	2b00      	cmp	r3, #0
     9be:	d1f4      	bne.n	9aa <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <spi_rw+0x158>)
     9c2:	4b06      	ldr	r3, [pc, #24]	; (9dc <spi_rw+0x15c>)
     9c4:	2200      	movs	r2, #0
     9c6:	0018      	movs	r0, r3
     9c8:	4b05      	ldr	r3, [pc, #20]	; (9e0 <spi_rw+0x160>)
     9ca:	4798      	blx	r3

	return M2M_SUCCESS;
     9cc:	2300      	movs	r3, #0
}
     9ce:	0018      	movs	r0, r3
     9d0:	46bd      	mov	sp, r7
     9d2:	b006      	add	sp, #24
     9d4:	bd80      	pop	{r7, pc}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	2000046c 	.word	0x2000046c
     9dc:	20000470 	.word	0x20000470
     9e0:	000066fd 	.word	0x000066fd
     9e4:	00000761 	.word	0x00000761
     9e8:	000007b1 	.word	0x000007b1
     9ec:	00000789 	.word	0x00000789
     9f0:	000007f9 	.word	0x000007f9
     9f4:	00000739 	.word	0x00000739

000009f8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	b092      	sub	sp, #72	; 0x48
     9fc:	af00      	add	r7, sp, #0
     9fe:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     a00:	2347      	movs	r3, #71	; 0x47
     a02:	18fb      	adds	r3, r7, r3
     a04:	2200      	movs	r2, #0
     a06:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     a08:	2308      	movs	r3, #8
     a0a:	18fb      	adds	r3, r7, r3
     a0c:	0018      	movs	r0, r3
     a0e:	4b26      	ldr	r3, [pc, #152]	; (aa8 <nm_bus_init+0xb0>)
     a10:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     a12:	2308      	movs	r3, #8
     a14:	18fb      	adds	r3, r7, r3
     a16:	220e      	movs	r2, #14
     a18:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     a1a:	2308      	movs	r3, #8
     a1c:	18fa      	adds	r2, r7, r3
     a1e:	4b23      	ldr	r3, [pc, #140]	; (aac <nm_bus_init+0xb4>)
     a20:	0011      	movs	r1, r2
     a22:	0018      	movs	r0, r3
     a24:	4b22      	ldr	r3, [pc, #136]	; (ab0 <nm_bus_init+0xb8>)
     a26:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     a28:	230c      	movs	r3, #12
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	0018      	movs	r0, r3
     a2e:	4b21      	ldr	r3, [pc, #132]	; (ab4 <nm_bus_init+0xbc>)
     a30:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     a32:	230c      	movs	r3, #12
     a34:	18fb      	adds	r3, r7, r3
     a36:	22c0      	movs	r2, #192	; 0xc0
     a38:	0392      	lsls	r2, r2, #14
     a3a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     a3c:	230c      	movs	r3, #12
     a3e:	18fb      	adds	r3, r7, r3
     a40:	4a1d      	ldr	r2, [pc, #116]	; (ab8 <nm_bus_init+0xc0>)
     a42:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     a44:	230c      	movs	r3, #12
     a46:	18fb      	adds	r3, r7, r3
     a48:	4a1c      	ldr	r2, [pc, #112]	; (abc <nm_bus_init+0xc4>)
     a4a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     a4c:	230c      	movs	r3, #12
     a4e:	18fb      	adds	r3, r7, r3
     a50:	2201      	movs	r2, #1
     a52:	4252      	negs	r2, r2
     a54:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     a56:	230c      	movs	r3, #12
     a58:	18fb      	adds	r3, r7, r3
     a5a:	4a19      	ldr	r2, [pc, #100]	; (ac0 <nm_bus_init+0xc8>)
     a5c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     a5e:	230c      	movs	r3, #12
     a60:	18fb      	adds	r3, r7, r3
     a62:	2200      	movs	r2, #0
     a64:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     a66:	230c      	movs	r3, #12
     a68:	18fb      	adds	r3, r7, r3
     a6a:	4a16      	ldr	r2, [pc, #88]	; (ac4 <nm_bus_init+0xcc>)
     a6c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     a6e:	230c      	movs	r3, #12
     a70:	18fa      	adds	r2, r7, r3
     a72:	4915      	ldr	r1, [pc, #84]	; (ac8 <nm_bus_init+0xd0>)
     a74:	4b15      	ldr	r3, [pc, #84]	; (acc <nm_bus_init+0xd4>)
     a76:	0018      	movs	r0, r3
     a78:	4b15      	ldr	r3, [pc, #84]	; (ad0 <nm_bus_init+0xd8>)
     a7a:	4798      	blx	r3
     a7c:	1e03      	subs	r3, r0, #0
     a7e:	d002      	beq.n	a86 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
     a80:	2306      	movs	r3, #6
     a82:	425b      	negs	r3, r3
     a84:	e00c      	b.n	aa0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
     a86:	4b11      	ldr	r3, [pc, #68]	; (acc <nm_bus_init+0xd4>)
     a88:	0018      	movs	r0, r3
     a8a:	4b12      	ldr	r3, [pc, #72]	; (ad4 <nm_bus_init+0xdc>)
     a8c:	4798      	blx	r3

	nm_bsp_reset();
     a8e:	4b12      	ldr	r3, [pc, #72]	; (ad8 <nm_bus_init+0xe0>)
     a90:	4798      	blx	r3
	nm_bsp_sleep(1);
     a92:	2001      	movs	r0, #1
     a94:	4b11      	ldr	r3, [pc, #68]	; (adc <nm_bus_init+0xe4>)
     a96:	4798      	blx	r3
#endif
	return result;
     a98:	2347      	movs	r3, #71	; 0x47
     a9a:	18fb      	adds	r3, r7, r3
     a9c:	781b      	ldrb	r3, [r3, #0]
     a9e:	b25b      	sxtb	r3, r3
}
     aa0:	0018      	movs	r0, r3
     aa2:	46bd      	mov	sp, r7
     aa4:	b012      	add	sp, #72	; 0x48
     aa6:	bd80      	pop	{r7, pc}
     aa8:	00000605 	.word	0x00000605
     aac:	2000046c 	.word	0x2000046c
     ab0:	00000629 	.word	0x00000629
     ab4:	00000581 	.word	0x00000581
     ab8:	000c0002 	.word	0x000c0002
     abc:	000d0002 	.word	0x000d0002
     ac0:	000f0002 	.word	0x000f0002
     ac4:	00b71b00 	.word	0x00b71b00
     ac8:	42001000 	.word	0x42001000
     acc:	20000470 	.word	0x20000470
     ad0:	00006559 	.word	0x00006559
     ad4:	0000068d 	.word	0x0000068d
     ad8:	000002f1 	.word	0x000002f1
     adc:	00000331 	.word	0x00000331

00000ae0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     ae0:	b590      	push	{r4, r7, lr}
     ae2:	b085      	sub	sp, #20
     ae4:	af00      	add	r7, sp, #0
     ae6:	0002      	movs	r2, r0
     ae8:	6039      	str	r1, [r7, #0]
     aea:	1dfb      	adds	r3, r7, #7
     aec:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     aee:	230f      	movs	r3, #15
     af0:	18fb      	adds	r3, r7, r3
     af2:	2200      	movs	r2, #0
     af4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     af6:	1dfb      	adds	r3, r7, #7
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	2b03      	cmp	r3, #3
     afc:	d10f      	bne.n	b1e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     afe:	683b      	ldr	r3, [r7, #0]
     b00:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     b02:	68bb      	ldr	r3, [r7, #8]
     b04:	6818      	ldr	r0, [r3, #0]
     b06:	68bb      	ldr	r3, [r7, #8]
     b08:	6859      	ldr	r1, [r3, #4]
     b0a:	68bb      	ldr	r3, [r7, #8]
     b0c:	891b      	ldrh	r3, [r3, #8]
     b0e:	220f      	movs	r2, #15
     b10:	18bc      	adds	r4, r7, r2
     b12:	001a      	movs	r2, r3
     b14:	4b10      	ldr	r3, [pc, #64]	; (b58 <nm_bus_ioctl+0x78>)
     b16:	4798      	blx	r3
     b18:	0003      	movs	r3, r0
     b1a:	7023      	strb	r3, [r4, #0]
		}
		break;
     b1c:	e013      	b.n	b46 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
     b1e:	230f      	movs	r3, #15
     b20:	18fb      	adds	r3, r7, r3
     b22:	22ff      	movs	r2, #255	; 0xff
     b24:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     b26:	230e      	movs	r3, #14
     b28:	33ff      	adds	r3, #255	; 0xff
     b2a:	001a      	movs	r2, r3
     b2c:	490b      	ldr	r1, [pc, #44]	; (b5c <nm_bus_ioctl+0x7c>)
     b2e:	4b0c      	ldr	r3, [pc, #48]	; (b60 <nm_bus_ioctl+0x80>)
     b30:	0018      	movs	r0, r3
     b32:	4b0c      	ldr	r3, [pc, #48]	; (b64 <nm_bus_ioctl+0x84>)
     b34:	4798      	blx	r3
     b36:	4b0c      	ldr	r3, [pc, #48]	; (b68 <nm_bus_ioctl+0x88>)
     b38:	0018      	movs	r0, r3
     b3a:	4b0c      	ldr	r3, [pc, #48]	; (b6c <nm_bus_ioctl+0x8c>)
     b3c:	4798      	blx	r3
     b3e:	200d      	movs	r0, #13
     b40:	4b0b      	ldr	r3, [pc, #44]	; (b70 <nm_bus_ioctl+0x90>)
     b42:	4798      	blx	r3
			break;
     b44:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     b46:	230f      	movs	r3, #15
     b48:	18fb      	adds	r3, r7, r3
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	b25b      	sxtb	r3, r3
}
     b4e:	0018      	movs	r0, r3
     b50:	46bd      	mov	sp, r7
     b52:	b005      	add	sp, #20
     b54:	bd90      	pop	{r4, r7, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	00000881 	.word	0x00000881
     b5c:	000139c4 	.word	0x000139c4
     b60:	0001399c 	.word	0x0001399c
     b64:	0000f0ad 	.word	0x0000f0ad
     b68:	000139b0 	.word	0x000139b0
     b6c:	0000f1c9 	.word	0x0000f1c9
     b70:	0000f0e1 	.word	0x0000f0e1

00000b74 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     b74:	b580      	push	{r7, lr}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     b7a:	1dfb      	adds	r3, r7, #7
     b7c:	2200      	movs	r2, #0
     b7e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     b80:	1d3b      	adds	r3, r7, #4
     b82:	0018      	movs	r0, r3
     b84:	4b13      	ldr	r3, [pc, #76]	; (bd4 <nm_bus_deinit+0x60>)
     b86:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     b88:	1d3b      	adds	r3, r7, #4
     b8a:	2200      	movs	r2, #0
     b8c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     b8e:	1d3b      	adds	r3, r7, #4
     b90:	2200      	movs	r2, #0
     b92:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
     b94:	4b10      	ldr	r3, [pc, #64]	; (bd8 <nm_bus_deinit+0x64>)
     b96:	0018      	movs	r0, r3
     b98:	4b10      	ldr	r3, [pc, #64]	; (bdc <nm_bus_deinit+0x68>)
     b9a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     b9c:	1d3b      	adds	r3, r7, #4
     b9e:	0019      	movs	r1, r3
     ba0:	200c      	movs	r0, #12
     ba2:	4b0f      	ldr	r3, [pc, #60]	; (be0 <nm_bus_deinit+0x6c>)
     ba4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     ba6:	1d3b      	adds	r3, r7, #4
     ba8:	0019      	movs	r1, r3
     baa:	200f      	movs	r0, #15
     bac:	4b0c      	ldr	r3, [pc, #48]	; (be0 <nm_bus_deinit+0x6c>)
     bae:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     bb0:	1d3b      	adds	r3, r7, #4
     bb2:	0019      	movs	r1, r3
     bb4:	200d      	movs	r0, #13
     bb6:	4b0a      	ldr	r3, [pc, #40]	; (be0 <nm_bus_deinit+0x6c>)
     bb8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     bba:	1d3b      	adds	r3, r7, #4
     bbc:	0019      	movs	r1, r3
     bbe:	200e      	movs	r0, #14
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <nm_bus_deinit+0x6c>)
     bc2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
     bc4:	1dfb      	adds	r3, r7, #7
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	b25b      	sxtb	r3, r3
}
     bca:	0018      	movs	r0, r3
     bcc:	46bd      	mov	sp, r7
     bce:	b002      	add	sp, #8
     bd0:	bd80      	pop	{r7, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	000004e9 	.word	0x000004e9
     bd8:	20000470 	.word	0x20000470
     bdc:	000006dd 	.word	0x000006dd
     be0:	0000b84d 	.word	0x0000b84d

00000be4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     be4:	b580      	push	{r7, lr}
     be6:	b084      	sub	sp, #16
     be8:	af00      	add	r7, sp, #0
     bea:	60f8      	str	r0, [r7, #12]
     bec:	60b9      	str	r1, [r7, #8]
     bee:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     bf0:	687b      	ldr	r3, [r7, #4]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d010      	beq.n	c18 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     bf6:	68bb      	ldr	r3, [r7, #8]
     bf8:	781a      	ldrb	r2, [r3, #0]
     bfa:	68fb      	ldr	r3, [r7, #12]
     bfc:	701a      	strb	r2, [r3, #0]
		pDst++;
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	3301      	adds	r3, #1
     c02:	60fb      	str	r3, [r7, #12]
		pSrc++;
     c04:	68bb      	ldr	r3, [r7, #8]
     c06:	3301      	adds	r3, #1
     c08:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     c0a:	687b      	ldr	r3, [r7, #4]
     c0c:	3b01      	subs	r3, #1
     c0e:	607b      	str	r3, [r7, #4]
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	2b00      	cmp	r3, #0
     c14:	d1ef      	bne.n	bf6 <m2m_memcpy+0x12>
     c16:	e000      	b.n	c1a <m2m_memcpy+0x36>
	if(sz == 0) return;
     c18:	46c0      	nop			; (mov r8, r8)
}
     c1a:	46bd      	mov	sp, r7
     c1c:	b004      	add	sp, #16
     c1e:	bd80      	pop	{r7, pc}

00000c20 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     c20:	b580      	push	{r7, lr}
     c22:	b084      	sub	sp, #16
     c24:	af00      	add	r7, sp, #0
     c26:	60f8      	str	r0, [r7, #12]
     c28:	607a      	str	r2, [r7, #4]
     c2a:	230b      	movs	r3, #11
     c2c:	18fb      	adds	r3, r7, r3
     c2e:	1c0a      	adds	r2, r1, #0
     c30:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	2b00      	cmp	r3, #0
     c36:	d00e      	beq.n	c56 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     c38:	68fb      	ldr	r3, [r7, #12]
     c3a:	220b      	movs	r2, #11
     c3c:	18ba      	adds	r2, r7, r2
     c3e:	7812      	ldrb	r2, [r2, #0]
     c40:	701a      	strb	r2, [r3, #0]
		pBuf++;
     c42:	68fb      	ldr	r3, [r7, #12]
     c44:	3301      	adds	r3, #1
     c46:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	3b01      	subs	r3, #1
     c4c:	607b      	str	r3, [r7, #4]
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	2b00      	cmp	r3, #0
     c52:	d1f1      	bne.n	c38 <m2m_memset+0x18>
     c54:	e000      	b.n	c58 <m2m_memset+0x38>
	if(sz == 0) return;
     c56:	46c0      	nop			; (mov r8, r8)
}
     c58:	46bd      	mov	sp, r7
     c5a:	b004      	add	sp, #16
     c5c:	bd80      	pop	{r7, pc}

00000c5e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     c5e:	b580      	push	{r7, lr}
     c60:	b084      	sub	sp, #16
     c62:	af00      	add	r7, sp, #0
     c64:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     c66:	230e      	movs	r3, #14
     c68:	18fb      	adds	r3, r7, r3
     c6a:	2200      	movs	r2, #0
     c6c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     c6e:	e009      	b.n	c84 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     c70:	230e      	movs	r3, #14
     c72:	18fb      	adds	r3, r7, r3
     c74:	881a      	ldrh	r2, [r3, #0]
     c76:	230e      	movs	r3, #14
     c78:	18fb      	adds	r3, r7, r3
     c7a:	3201      	adds	r2, #1
     c7c:	801a      	strh	r2, [r3, #0]
		pcStr++;
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	3301      	adds	r3, #1
     c82:	607b      	str	r3, [r7, #4]
	while(*pcStr)
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	2b00      	cmp	r3, #0
     c8a:	d1f1      	bne.n	c70 <m2m_strlen+0x12>
	}
	return u16StrLen;
     c8c:	230e      	movs	r3, #14
     c8e:	18fb      	adds	r3, r7, r3
     c90:	881b      	ldrh	r3, [r3, #0]
}
     c92:	0018      	movs	r0, r3
     c94:	46bd      	mov	sp, r7
     c96:	b004      	add	sp, #16
     c98:	bd80      	pop	{r7, pc}
	...

00000c9c <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
     c9c:	b580      	push	{r7, lr}
     c9e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
     ca0:	4b04      	ldr	r3, [pc, #16]	; (cb4 <isr+0x18>)
     ca2:	78db      	ldrb	r3, [r3, #3]
     ca4:	b2db      	uxtb	r3, r3
     ca6:	3301      	adds	r3, #1
     ca8:	b2da      	uxtb	r2, r3
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <isr+0x18>)
     cac:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	46bd      	mov	sp, r7
     cb2:	bd80      	pop	{r7, pc}
     cb4:	200004ac 	.word	0x200004ac

00000cb8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     cb8:	b590      	push	{r4, r7, lr}
     cba:	b083      	sub	sp, #12
     cbc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     cbe:	1dfb      	adds	r3, r7, #7
     cc0:	2200      	movs	r2, #0
     cc2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
     cc4:	4b14      	ldr	r3, [pc, #80]	; (d18 <hif_set_rx_done+0x60>)
     cc6:	2200      	movs	r2, #0
     cc8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     cca:	2001      	movs	r0, #1
     ccc:	4b13      	ldr	r3, [pc, #76]	; (d1c <hif_set_rx_done+0x64>)
     cce:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     cd0:	1dfc      	adds	r4, r7, #7
     cd2:	003b      	movs	r3, r7
     cd4:	4a12      	ldr	r2, [pc, #72]	; (d20 <hif_set_rx_done+0x68>)
     cd6:	0019      	movs	r1, r3
     cd8:	0010      	movs	r0, r2
     cda:	4b12      	ldr	r3, [pc, #72]	; (d24 <hif_set_rx_done+0x6c>)
     cdc:	4798      	blx	r3
     cde:	0003      	movs	r3, r0
     ce0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     ce2:	1dfb      	adds	r3, r7, #7
     ce4:	781b      	ldrb	r3, [r3, #0]
     ce6:	b25b      	sxtb	r3, r3
     ce8:	2b00      	cmp	r3, #0
     cea:	d10d      	bne.n	d08 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
     cec:	683b      	ldr	r3, [r7, #0]
     cee:	2202      	movs	r2, #2
     cf0:	4313      	orrs	r3, r2
     cf2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     cf4:	683b      	ldr	r3, [r7, #0]
     cf6:	1dfc      	adds	r4, r7, #7
     cf8:	4a09      	ldr	r2, [pc, #36]	; (d20 <hif_set_rx_done+0x68>)
     cfa:	0019      	movs	r1, r3
     cfc:	0010      	movs	r0, r2
     cfe:	4b0a      	ldr	r3, [pc, #40]	; (d28 <hif_set_rx_done+0x70>)
     d00:	4798      	blx	r3
     d02:	0003      	movs	r3, r0
     d04:	7023      	strb	r3, [r4, #0]
     d06:	e000      	b.n	d0a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
     d08:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     d0a:	1dfb      	adds	r3, r7, #7
     d0c:	781b      	ldrb	r3, [r3, #0]
     d0e:	b25b      	sxtb	r3, r3

}
     d10:	0018      	movs	r0, r3
     d12:	46bd      	mov	sp, r7
     d14:	b003      	add	sp, #12
     d16:	bd90      	pop	{r4, r7, pc}
     d18:	200004ac 	.word	0x200004ac
     d1c:	000003d1 	.word	0x000003d1
     d20:	00001070 	.word	0x00001070
     d24:	00002c5d 	.word	0x00002c5d
     d28:	00002c81 	.word	0x00002c81

00000d2c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     d2c:	b580      	push	{r7, lr}
     d2e:	b082      	sub	sp, #8
     d30:	af00      	add	r7, sp, #0
     d32:	603a      	str	r2, [r7, #0]
     d34:	1dfb      	adds	r3, r7, #7
     d36:	1c02      	adds	r2, r0, #0
     d38:	701a      	strb	r2, [r3, #0]
     d3a:	1d3b      	adds	r3, r7, #4
     d3c:	1c0a      	adds	r2, r1, #0
     d3e:	801a      	strh	r2, [r3, #0]


}
     d40:	46c0      	nop			; (mov r8, r8)
     d42:	46bd      	mov	sp, r7
     d44:	b002      	add	sp, #8
     d46:	bd80      	pop	{r7, pc}

00000d48 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     d48:	b590      	push	{r4, r7, lr}
     d4a:	b083      	sub	sp, #12
     d4c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     d4e:	1dfb      	adds	r3, r7, #7
     d50:	2200      	movs	r2, #0
     d52:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
     d54:	4b16      	ldr	r3, [pc, #88]	; (db0 <hif_chip_wake+0x68>)
     d56:	789b      	ldrb	r3, [r3, #2]
     d58:	b2db      	uxtb	r3, r3
     d5a:	2b00      	cmp	r3, #0
     d5c:	d003      	beq.n	d66 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     d5e:	1dfb      	adds	r3, r7, #7
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	b25b      	sxtb	r3, r3
     d64:	e01f      	b.n	da6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     d66:	4b12      	ldr	r3, [pc, #72]	; (db0 <hif_chip_wake+0x68>)
     d68:	785b      	ldrb	r3, [r3, #1]
     d6a:	b2db      	uxtb	r3, r3
     d6c:	2b00      	cmp	r3, #0
     d6e:	d10e      	bne.n	d8e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     d70:	4b0f      	ldr	r3, [pc, #60]	; (db0 <hif_chip_wake+0x68>)
     d72:	781b      	ldrb	r3, [r3, #0]
     d74:	b2db      	uxtb	r3, r3
     d76:	2b00      	cmp	r3, #0
     d78:	d009      	beq.n	d8e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
     d7a:	1dfc      	adds	r4, r7, #7
     d7c:	4b0d      	ldr	r3, [pc, #52]	; (db4 <hif_chip_wake+0x6c>)
     d7e:	4798      	blx	r3
     d80:	0003      	movs	r3, r0
     d82:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     d84:	1dfb      	adds	r3, r7, #7
     d86:	781b      	ldrb	r3, [r3, #0]
     d88:	b25b      	sxtb	r3, r3
     d8a:	2b00      	cmp	r3, #0
     d8c:	d107      	bne.n	d9e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     d8e:	4b08      	ldr	r3, [pc, #32]	; (db0 <hif_chip_wake+0x68>)
     d90:	785b      	ldrb	r3, [r3, #1]
     d92:	b2db      	uxtb	r3, r3
     d94:	3301      	adds	r3, #1
     d96:	b2da      	uxtb	r2, r3
     d98:	4b05      	ldr	r3, [pc, #20]	; (db0 <hif_chip_wake+0x68>)
     d9a:	705a      	strb	r2, [r3, #1]
     d9c:	e000      	b.n	da0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
     d9e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
     da0:	1dfb      	adds	r3, r7, #7
     da2:	781b      	ldrb	r3, [r3, #0]
     da4:	b25b      	sxtb	r3, r3
}
     da6:	0018      	movs	r0, r3
     da8:	46bd      	mov	sp, r7
     daa:	b003      	add	sp, #12
     dac:	bd90      	pop	{r4, r7, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	200004ac 	.word	0x200004ac
     db4:	00002731 	.word	0x00002731

00000db8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
     db8:	b580      	push	{r7, lr}
     dba:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
     dbc:	4b07      	ldr	r3, [pc, #28]	; (ddc <hif_chip_sleep_sc+0x24>)
     dbe:	785b      	ldrb	r3, [r3, #1]
     dc0:	b2db      	uxtb	r3, r3
     dc2:	2b00      	cmp	r3, #0
     dc4:	d006      	beq.n	dd4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
     dc6:	4b05      	ldr	r3, [pc, #20]	; (ddc <hif_chip_sleep_sc+0x24>)
     dc8:	785b      	ldrb	r3, [r3, #1]
     dca:	b2db      	uxtb	r3, r3
     dcc:	3b01      	subs	r3, #1
     dce:	b2da      	uxtb	r2, r3
     dd0:	4b02      	ldr	r3, [pc, #8]	; (ddc <hif_chip_sleep_sc+0x24>)
     dd2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
     dd4:	2300      	movs	r3, #0
}
     dd6:	0018      	movs	r0, r3
     dd8:	46bd      	mov	sp, r7
     dda:	bd80      	pop	{r7, pc}
     ddc:	200004ac 	.word	0x200004ac

00000de0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     de0:	b590      	push	{r4, r7, lr}
     de2:	b083      	sub	sp, #12
     de4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     de6:	1dfb      	adds	r3, r7, #7
     de8:	2200      	movs	r2, #0
     dea:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
     dec:	4b10      	ldr	r3, [pc, #64]	; (e30 <hif_chip_sleep+0x50>)
     dee:	785b      	ldrb	r3, [r3, #1]
     df0:	b2db      	uxtb	r3, r3
     df2:	2b00      	cmp	r3, #0
     df4:	d006      	beq.n	e04 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
     df6:	4b0e      	ldr	r3, [pc, #56]	; (e30 <hif_chip_sleep+0x50>)
     df8:	785b      	ldrb	r3, [r3, #1]
     dfa:	b2db      	uxtb	r3, r3
     dfc:	3b01      	subs	r3, #1
     dfe:	b2da      	uxtb	r2, r3
     e00:	4b0b      	ldr	r3, [pc, #44]	; (e30 <hif_chip_sleep+0x50>)
     e02:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     e04:	4b0a      	ldr	r3, [pc, #40]	; (e30 <hif_chip_sleep+0x50>)
     e06:	785b      	ldrb	r3, [r3, #1]
     e08:	b2db      	uxtb	r3, r3
     e0a:	2b00      	cmp	r3, #0
     e0c:	d109      	bne.n	e22 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     e0e:	4b08      	ldr	r3, [pc, #32]	; (e30 <hif_chip_sleep+0x50>)
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	b2db      	uxtb	r3, r3
     e14:	2b00      	cmp	r3, #0
     e16:	d004      	beq.n	e22 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
     e18:	1dfc      	adds	r4, r7, #7
     e1a:	4b06      	ldr	r3, [pc, #24]	; (e34 <hif_chip_sleep+0x54>)
     e1c:	4798      	blx	r3
     e1e:	0003      	movs	r3, r0
     e20:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
     e22:	1dfb      	adds	r3, r7, #7
     e24:	781b      	ldrb	r3, [r3, #0]
     e26:	b25b      	sxtb	r3, r3
}
     e28:	0018      	movs	r0, r3
     e2a:	46bd      	mov	sp, r7
     e2c:	b003      	add	sp, #12
     e2e:	bd90      	pop	{r4, r7, pc}
     e30:	200004ac 	.word	0x200004ac
     e34:	00002659 	.word	0x00002659

00000e38 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     e38:	b580      	push	{r7, lr}
     e3a:	b082      	sub	sp, #8
     e3c:	af00      	add	r7, sp, #0
     e3e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     e40:	4b09      	ldr	r3, [pc, #36]	; (e68 <hif_init+0x30>)
     e42:	2228      	movs	r2, #40	; 0x28
     e44:	2100      	movs	r1, #0
     e46:	0018      	movs	r0, r3
     e48:	4b08      	ldr	r3, [pc, #32]	; (e6c <hif_init+0x34>)
     e4a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     e4c:	4b08      	ldr	r3, [pc, #32]	; (e70 <hif_init+0x38>)
     e4e:	0018      	movs	r0, r3
     e50:	4b08      	ldr	r3, [pc, #32]	; (e74 <hif_init+0x3c>)
     e52:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     e54:	4b08      	ldr	r3, [pc, #32]	; (e78 <hif_init+0x40>)
     e56:	0019      	movs	r1, r3
     e58:	2003      	movs	r0, #3
     e5a:	4b08      	ldr	r3, [pc, #32]	; (e7c <hif_init+0x44>)
     e5c:	4798      	blx	r3
	return M2M_SUCCESS;
     e5e:	2300      	movs	r3, #0
}
     e60:	0018      	movs	r0, r3
     e62:	46bd      	mov	sp, r7
     e64:	b002      	add	sp, #8
     e66:	bd80      	pop	{r7, pc}
     e68:	200004ac 	.word	0x200004ac
     e6c:	00000c21 	.word	0x00000c21
     e70:	00000c9d 	.word	0x00000c9d
     e74:	00000359 	.word	0x00000359
     e78:	00000d2d 	.word	0x00000d2d
     e7c:	000018f5 	.word	0x000018f5

00000e80 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     e80:	b590      	push	{r4, r7, lr}
     e82:	b089      	sub	sp, #36	; 0x24
     e84:	af00      	add	r7, sp, #0
     e86:	0004      	movs	r4, r0
     e88:	0008      	movs	r0, r1
     e8a:	603a      	str	r2, [r7, #0]
     e8c:	0019      	movs	r1, r3
     e8e:	1dfb      	adds	r3, r7, #7
     e90:	1c22      	adds	r2, r4, #0
     e92:	701a      	strb	r2, [r3, #0]
     e94:	1dbb      	adds	r3, r7, #6
     e96:	1c02      	adds	r2, r0, #0
     e98:	701a      	strb	r2, [r3, #0]
     e9a:	1d3b      	adds	r3, r7, #4
     e9c:	1c0a      	adds	r2, r1, #0
     e9e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     ea0:	231f      	movs	r3, #31
     ea2:	18fb      	adds	r3, r7, r3
     ea4:	22ff      	movs	r2, #255	; 0xff
     ea6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     ea8:	1dbb      	adds	r3, r7, #6
     eaa:	781b      	ldrb	r3, [r3, #0]
     eac:	227f      	movs	r2, #127	; 0x7f
     eae:	4013      	ands	r3, r2
     eb0:	b2da      	uxtb	r2, r3
     eb2:	2318      	movs	r3, #24
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     eb8:	2318      	movs	r3, #24
     eba:	18fb      	adds	r3, r7, r3
     ebc:	1dfa      	adds	r2, r7, #7
     ebe:	7812      	ldrb	r2, [r2, #0]
     ec0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     ec2:	2318      	movs	r3, #24
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	2208      	movs	r2, #8
     ec8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ecc:	2b00      	cmp	r3, #0
     ece:	d011      	beq.n	ef4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     ed0:	2318      	movs	r3, #24
     ed2:	18fb      	adds	r3, r7, r3
     ed4:	885b      	ldrh	r3, [r3, #2]
     ed6:	b29a      	uxth	r2, r3
     ed8:	2338      	movs	r3, #56	; 0x38
     eda:	18f9      	adds	r1, r7, r3
     edc:	2334      	movs	r3, #52	; 0x34
     ede:	18fb      	adds	r3, r7, r3
     ee0:	8809      	ldrh	r1, [r1, #0]
     ee2:	881b      	ldrh	r3, [r3, #0]
     ee4:	18cb      	adds	r3, r1, r3
     ee6:	b29b      	uxth	r3, r3
     ee8:	18d3      	adds	r3, r2, r3
     eea:	b29a      	uxth	r2, r3
     eec:	2318      	movs	r3, #24
     eee:	18fb      	adds	r3, r7, r3
     ef0:	805a      	strh	r2, [r3, #2]
     ef2:	e00a      	b.n	f0a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     ef4:	2318      	movs	r3, #24
     ef6:	18fb      	adds	r3, r7, r3
     ef8:	885b      	ldrh	r3, [r3, #2]
     efa:	b29a      	uxth	r2, r3
     efc:	1d3b      	adds	r3, r7, #4
     efe:	881b      	ldrh	r3, [r3, #0]
     f00:	18d3      	adds	r3, r2, r3
     f02:	b29a      	uxth	r2, r3
     f04:	2318      	movs	r3, #24
     f06:	18fb      	adds	r3, r7, r3
     f08:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     f0a:	231f      	movs	r3, #31
     f0c:	18fc      	adds	r4, r7, r3
     f0e:	4bb0      	ldr	r3, [pc, #704]	; (11d0 <hif_send+0x350>)
     f10:	4798      	blx	r3
     f12:	0003      	movs	r3, r0
     f14:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     f16:	231f      	movs	r3, #31
     f18:	18fb      	adds	r3, r7, r3
     f1a:	781b      	ldrb	r3, [r3, #0]
     f1c:	b25b      	sxtb	r3, r3
     f1e:	2b00      	cmp	r3, #0
     f20:	d000      	beq.n	f24 <hif_send+0xa4>
     f22:	e127      	b.n	1174 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
     f24:	2300      	movs	r3, #0
     f26:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     f28:	230e      	movs	r3, #14
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	2200      	movs	r2, #0
     f2e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     f30:	2300      	movs	r3, #0
     f32:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     f34:	1dfb      	adds	r3, r7, #7
     f36:	781a      	ldrb	r2, [r3, #0]
     f38:	697b      	ldr	r3, [r7, #20]
     f3a:	4313      	orrs	r3, r2
     f3c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     f3e:	1dbb      	adds	r3, r7, #6
     f40:	781b      	ldrb	r3, [r3, #0]
     f42:	021a      	lsls	r2, r3, #8
     f44:	697b      	ldr	r3, [r7, #20]
     f46:	4313      	orrs	r3, r2
     f48:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
     f4a:	2318      	movs	r3, #24
     f4c:	18fb      	adds	r3, r7, r3
     f4e:	885b      	ldrh	r3, [r3, #2]
     f50:	b29b      	uxth	r3, r3
     f52:	041a      	lsls	r2, r3, #16
     f54:	697b      	ldr	r3, [r7, #20]
     f56:	4313      	orrs	r3, r2
     f58:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     f5a:	697b      	ldr	r3, [r7, #20]
     f5c:	221f      	movs	r2, #31
     f5e:	18bc      	adds	r4, r7, r2
     f60:	4a9c      	ldr	r2, [pc, #624]	; (11d4 <hif_send+0x354>)
     f62:	0019      	movs	r1, r3
     f64:	0010      	movs	r0, r2
     f66:	4b9c      	ldr	r3, [pc, #624]	; (11d8 <hif_send+0x358>)
     f68:	4798      	blx	r3
     f6a:	0003      	movs	r3, r0
     f6c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     f6e:	231f      	movs	r3, #31
     f70:	18fb      	adds	r3, r7, r3
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	b25b      	sxtb	r3, r3
     f76:	2b00      	cmp	r3, #0
     f78:	d000      	beq.n	f7c <hif_send+0xfc>
     f7a:	e115      	b.n	11a8 <hif_send+0x328>

		reg = 0UL;
     f7c:	2300      	movs	r3, #0
     f7e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
     f80:	697b      	ldr	r3, [r7, #20]
     f82:	2202      	movs	r2, #2
     f84:	4313      	orrs	r3, r2
     f86:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     f88:	697b      	ldr	r3, [r7, #20]
     f8a:	221f      	movs	r2, #31
     f8c:	18bc      	adds	r4, r7, r2
     f8e:	4a93      	ldr	r2, [pc, #588]	; (11dc <hif_send+0x35c>)
     f90:	0019      	movs	r1, r3
     f92:	0010      	movs	r0, r2
     f94:	4b90      	ldr	r3, [pc, #576]	; (11d8 <hif_send+0x358>)
     f96:	4798      	blx	r3
     f98:	0003      	movs	r3, r0
     f9a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     f9c:	231f      	movs	r3, #31
     f9e:	18fb      	adds	r3, r7, r3
     fa0:	781b      	ldrb	r3, [r3, #0]
     fa2:	b25b      	sxtb	r3, r3
     fa4:	2b00      	cmp	r3, #0
     fa6:	d000      	beq.n	faa <hif_send+0x12a>
     fa8:	e100      	b.n	11ac <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     faa:	2300      	movs	r3, #0
     fac:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     fae:	230e      	movs	r3, #14
     fb0:	18fb      	adds	r3, r7, r3
     fb2:	2200      	movs	r2, #0
     fb4:	801a      	strh	r2, [r3, #0]
     fb6:	e04f      	b.n	1058 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     fb8:	231f      	movs	r3, #31
     fba:	18fc      	adds	r4, r7, r3
     fbc:	2314      	movs	r3, #20
     fbe:	18fb      	adds	r3, r7, r3
     fc0:	4a86      	ldr	r2, [pc, #536]	; (11dc <hif_send+0x35c>)
     fc2:	0019      	movs	r1, r3
     fc4:	0010      	movs	r0, r2
     fc6:	4b86      	ldr	r3, [pc, #536]	; (11e0 <hif_send+0x360>)
     fc8:	4798      	blx	r3
     fca:	0003      	movs	r3, r0
     fcc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
     fce:	231f      	movs	r3, #31
     fd0:	18fb      	adds	r3, r7, r3
     fd2:	781b      	ldrb	r3, [r3, #0]
     fd4:	b25b      	sxtb	r3, r3
     fd6:	2b00      	cmp	r3, #0
     fd8:	d146      	bne.n	1068 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
     fda:	230e      	movs	r3, #14
     fdc:	18fb      	adds	r3, r7, r3
     fde:	881b      	ldrh	r3, [r3, #0]
     fe0:	b29a      	uxth	r2, r3
     fe2:	23f4      	movs	r3, #244	; 0xf4
     fe4:	33ff      	adds	r3, #255	; 0xff
     fe6:	429a      	cmp	r2, r3
     fe8:	d915      	bls.n	1016 <hif_send+0x196>
				if(cnt < 501) {
     fea:	230e      	movs	r3, #14
     fec:	18fb      	adds	r3, r7, r3
     fee:	881b      	ldrh	r3, [r3, #0]
     ff0:	b29a      	uxth	r2, r3
     ff2:	23fa      	movs	r3, #250	; 0xfa
     ff4:	005b      	lsls	r3, r3, #1
     ff6:	429a      	cmp	r2, r3
     ff8:	d80a      	bhi.n	1010 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
     ffa:	4b7a      	ldr	r3, [pc, #488]	; (11e4 <hif_send+0x364>)
     ffc:	0018      	movs	r0, r3
     ffe:	4b7a      	ldr	r3, [pc, #488]	; (11e8 <hif_send+0x368>)
    1000:	4798      	blx	r3
    1002:	4b7a      	ldr	r3, [pc, #488]	; (11ec <hif_send+0x36c>)
    1004:	0018      	movs	r0, r3
    1006:	4b7a      	ldr	r3, [pc, #488]	; (11f0 <hif_send+0x370>)
    1008:	4798      	blx	r3
    100a:	200d      	movs	r0, #13
    100c:	4b79      	ldr	r3, [pc, #484]	; (11f4 <hif_send+0x374>)
    100e:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    1010:	2001      	movs	r0, #1
    1012:	4b79      	ldr	r3, [pc, #484]	; (11f8 <hif_send+0x378>)
    1014:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    1016:	697b      	ldr	r3, [r7, #20]
    1018:	2202      	movs	r2, #2
    101a:	4013      	ands	r3, r2
    101c:	d113      	bne.n	1046 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    101e:	231f      	movs	r3, #31
    1020:	18fc      	adds	r4, r7, r3
    1022:	2310      	movs	r3, #16
    1024:	18fb      	adds	r3, r7, r3
    1026:	4a75      	ldr	r2, [pc, #468]	; (11fc <hif_send+0x37c>)
    1028:	0019      	movs	r1, r3
    102a:	0010      	movs	r0, r2
    102c:	4b6c      	ldr	r3, [pc, #432]	; (11e0 <hif_send+0x360>)
    102e:	4798      	blx	r3
    1030:	0003      	movs	r3, r0
    1032:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    1034:	231f      	movs	r3, #31
    1036:	18fb      	adds	r3, r7, r3
    1038:	781b      	ldrb	r3, [r3, #0]
    103a:	b25b      	sxtb	r3, r3
    103c:	2b00      	cmp	r3, #0
    103e:	d015      	beq.n	106c <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1040:	2300      	movs	r3, #0
    1042:	613b      	str	r3, [r7, #16]
					goto ERR1;
    1044:	e0b9      	b.n	11ba <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    1046:	230e      	movs	r3, #14
    1048:	18fb      	adds	r3, r7, r3
    104a:	881b      	ldrh	r3, [r3, #0]
    104c:	b29b      	uxth	r3, r3
    104e:	3301      	adds	r3, #1
    1050:	b29a      	uxth	r2, r3
    1052:	230e      	movs	r3, #14
    1054:	18fb      	adds	r3, r7, r3
    1056:	801a      	strh	r2, [r3, #0]
    1058:	230e      	movs	r3, #14
    105a:	18fb      	adds	r3, r7, r3
    105c:	881b      	ldrh	r3, [r3, #0]
    105e:	b29b      	uxth	r3, r3
    1060:	4a67      	ldr	r2, [pc, #412]	; (1200 <hif_send+0x380>)
    1062:	4293      	cmp	r3, r2
    1064:	d9a8      	bls.n	fb8 <hif_send+0x138>
    1066:	e002      	b.n	106e <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    1068:	46c0      	nop			; (mov r8, r8)
    106a:	e000      	b.n	106e <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    106c:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    106e:	693b      	ldr	r3, [r7, #16]
    1070:	2b00      	cmp	r3, #0
    1072:	d100      	bne.n	1076 <hif_send+0x1f6>
    1074:	e073      	b.n	115e <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    1076:	693b      	ldr	r3, [r7, #16]
    1078:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    107a:	2318      	movs	r3, #24
    107c:	18fb      	adds	r3, r7, r3
    107e:	885b      	ldrh	r3, [r3, #2]
    1080:	b29a      	uxth	r2, r3
    1082:	2318      	movs	r3, #24
    1084:	18fb      	adds	r3, r7, r3
    1086:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1088:	68bb      	ldr	r3, [r7, #8]
    108a:	221f      	movs	r2, #31
    108c:	18bc      	adds	r4, r7, r2
    108e:	2218      	movs	r2, #24
    1090:	18b9      	adds	r1, r7, r2
    1092:	2208      	movs	r2, #8
    1094:	0018      	movs	r0, r3
    1096:	4b5b      	ldr	r3, [pc, #364]	; (1204 <hif_send+0x384>)
    1098:	4798      	blx	r3
    109a:	0003      	movs	r3, r0
    109c:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    109e:	231f      	movs	r3, #31
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	781b      	ldrb	r3, [r3, #0]
    10a4:	b25b      	sxtb	r3, r3
    10a6:	2b00      	cmp	r3, #0
    10a8:	d000      	beq.n	10ac <hif_send+0x22c>
    10aa:	e081      	b.n	11b0 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    10ac:	68bb      	ldr	r3, [r7, #8]
    10ae:	3308      	adds	r3, #8
    10b0:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    10b2:	683b      	ldr	r3, [r7, #0]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d015      	beq.n	10e4 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    10b8:	68b8      	ldr	r0, [r7, #8]
    10ba:	1d3b      	adds	r3, r7, #4
    10bc:	881a      	ldrh	r2, [r3, #0]
    10be:	231f      	movs	r3, #31
    10c0:	18fc      	adds	r4, r7, r3
    10c2:	683b      	ldr	r3, [r7, #0]
    10c4:	0019      	movs	r1, r3
    10c6:	4b4f      	ldr	r3, [pc, #316]	; (1204 <hif_send+0x384>)
    10c8:	4798      	blx	r3
    10ca:	0003      	movs	r3, r0
    10cc:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    10ce:	231f      	movs	r3, #31
    10d0:	18fb      	adds	r3, r7, r3
    10d2:	781b      	ldrb	r3, [r3, #0]
    10d4:	b25b      	sxtb	r3, r3
    10d6:	2b00      	cmp	r3, #0
    10d8:	d16c      	bne.n	11b4 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    10da:	1d3b      	adds	r3, r7, #4
    10dc:	881a      	ldrh	r2, [r3, #0]
    10de:	68bb      	ldr	r3, [r7, #8]
    10e0:	18d3      	adds	r3, r2, r3
    10e2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    10e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10e6:	2b00      	cmp	r3, #0
    10e8:	d021      	beq.n	112e <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    10ea:	2338      	movs	r3, #56	; 0x38
    10ec:	18fb      	adds	r3, r7, r3
    10ee:	881a      	ldrh	r2, [r3, #0]
    10f0:	1d3b      	adds	r3, r7, #4
    10f2:	881b      	ldrh	r3, [r3, #0]
    10f4:	1ad3      	subs	r3, r2, r3
    10f6:	001a      	movs	r2, r3
    10f8:	68bb      	ldr	r3, [r7, #8]
    10fa:	18d3      	adds	r3, r2, r3
    10fc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    10fe:	68b8      	ldr	r0, [r7, #8]
    1100:	2334      	movs	r3, #52	; 0x34
    1102:	18fb      	adds	r3, r7, r3
    1104:	881a      	ldrh	r2, [r3, #0]
    1106:	231f      	movs	r3, #31
    1108:	18fc      	adds	r4, r7, r3
    110a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    110c:	0019      	movs	r1, r3
    110e:	4b3d      	ldr	r3, [pc, #244]	; (1204 <hif_send+0x384>)
    1110:	4798      	blx	r3
    1112:	0003      	movs	r3, r0
    1114:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    1116:	231f      	movs	r3, #31
    1118:	18fb      	adds	r3, r7, r3
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	b25b      	sxtb	r3, r3
    111e:	2b00      	cmp	r3, #0
    1120:	d14a      	bne.n	11b8 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    1122:	2334      	movs	r3, #52	; 0x34
    1124:	18fb      	adds	r3, r7, r3
    1126:	881a      	ldrh	r2, [r3, #0]
    1128:	68bb      	ldr	r3, [r7, #8]
    112a:	18d3      	adds	r3, r2, r3
    112c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    112e:	693b      	ldr	r3, [r7, #16]
    1130:	009b      	lsls	r3, r3, #2
    1132:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    1134:	697b      	ldr	r3, [r7, #20]
    1136:	2202      	movs	r2, #2
    1138:	4313      	orrs	r3, r2
    113a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    113c:	697b      	ldr	r3, [r7, #20]
    113e:	221f      	movs	r2, #31
    1140:	18bc      	adds	r4, r7, r2
    1142:	4a31      	ldr	r2, [pc, #196]	; (1208 <hif_send+0x388>)
    1144:	0019      	movs	r1, r3
    1146:	0010      	movs	r0, r2
    1148:	4b23      	ldr	r3, [pc, #140]	; (11d8 <hif_send+0x358>)
    114a:	4798      	blx	r3
    114c:	0003      	movs	r3, r0
    114e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1150:	231f      	movs	r3, #31
    1152:	18fb      	adds	r3, r7, r3
    1154:	781b      	ldrb	r3, [r3, #0]
    1156:	b25b      	sxtb	r3, r3
    1158:	2b00      	cmp	r3, #0
    115a:	d01a      	beq.n	1192 <hif_send+0x312>
    115c:	e02d      	b.n	11ba <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    115e:	231f      	movs	r3, #31
    1160:	18fc      	adds	r4, r7, r3
    1162:	4b2a      	ldr	r3, [pc, #168]	; (120c <hif_send+0x38c>)
    1164:	4798      	blx	r3
    1166:	0003      	movs	r3, r0
    1168:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    116a:	231f      	movs	r3, #31
    116c:	18fb      	adds	r3, r7, r3
    116e:	22fd      	movs	r2, #253	; 0xfd
    1170:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    1172:	e024      	b.n	11be <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1174:	23cb      	movs	r3, #203	; 0xcb
    1176:	005a      	lsls	r2, r3, #1
    1178:	4925      	ldr	r1, [pc, #148]	; (1210 <hif_send+0x390>)
    117a:	4b26      	ldr	r3, [pc, #152]	; (1214 <hif_send+0x394>)
    117c:	0018      	movs	r0, r3
    117e:	4b1a      	ldr	r3, [pc, #104]	; (11e8 <hif_send+0x368>)
    1180:	4798      	blx	r3
    1182:	4b25      	ldr	r3, [pc, #148]	; (1218 <hif_send+0x398>)
    1184:	0018      	movs	r0, r3
    1186:	4b1a      	ldr	r3, [pc, #104]	; (11f0 <hif_send+0x370>)
    1188:	4798      	blx	r3
    118a:	200d      	movs	r0, #13
    118c:	4b19      	ldr	r3, [pc, #100]	; (11f4 <hif_send+0x374>)
    118e:	4798      	blx	r3
		goto ERR2;
    1190:	e015      	b.n	11be <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    1192:	231f      	movs	r3, #31
    1194:	18fc      	adds	r4, r7, r3
    1196:	4b1d      	ldr	r3, [pc, #116]	; (120c <hif_send+0x38c>)
    1198:	4798      	blx	r3
    119a:	0003      	movs	r3, r0
    119c:	7023      	strb	r3, [r4, #0]
	return ret;
    119e:	231f      	movs	r3, #31
    11a0:	18fb      	adds	r3, r7, r3
    11a2:	781b      	ldrb	r3, [r3, #0]
    11a4:	b25b      	sxtb	r3, r3
    11a6:	e00e      	b.n	11c6 <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    11a8:	46c0      	nop			; (mov r8, r8)
    11aa:	e006      	b.n	11ba <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    11ac:	46c0      	nop			; (mov r8, r8)
    11ae:	e004      	b.n	11ba <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    11b0:	46c0      	nop			; (mov r8, r8)
    11b2:	e002      	b.n	11ba <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    11b4:	46c0      	nop			; (mov r8, r8)
    11b6:	e000      	b.n	11ba <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    11b8:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    11ba:	4b18      	ldr	r3, [pc, #96]	; (121c <hif_send+0x39c>)
    11bc:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    11be:	231f      	movs	r3, #31
    11c0:	18fb      	adds	r3, r7, r3
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	b25b      	sxtb	r3, r3
}
    11c6:	0018      	movs	r0, r3
    11c8:	46bd      	mov	sp, r7
    11ca:	b009      	add	sp, #36	; 0x24
    11cc:	bd90      	pop	{r4, r7, pc}
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	00000d49 	.word	0x00000d49
    11d4:	0000108c 	.word	0x0000108c
    11d8:	00002c81 	.word	0x00002c81
    11dc:	00001078 	.word	0x00001078
    11e0:	00002c5d 	.word	0x00002c5d
    11e4:	000139d4 	.word	0x000139d4
    11e8:	0000f0ad 	.word	0x0000f0ad
    11ec:	000139e0 	.word	0x000139e0
    11f0:	0000f1c9 	.word	0x0000f1c9
    11f4:	0000f0e1 	.word	0x0000f0e1
    11f8:	00000331 	.word	0x00000331
    11fc:	00150400 	.word	0x00150400
    1200:	000003e7 	.word	0x000003e7
    1204:	00002dc9 	.word	0x00002dc9
    1208:	0000106c 	.word	0x0000106c
    120c:	00000de1 	.word	0x00000de1
    1210:	00013ce8 	.word	0x00013ce8
    1214:	000139f0 	.word	0x000139f0
    1218:	00013a04 	.word	0x00013a04
    121c:	00000db9 	.word	0x00000db9

00001220 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1220:	b590      	push	{r4, r7, lr}
    1222:	b087      	sub	sp, #28
    1224:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    1226:	230f      	movs	r3, #15
    1228:	18fb      	adds	r3, r7, r3
    122a:	2200      	movs	r2, #0
    122c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    122e:	230f      	movs	r3, #15
    1230:	18fc      	adds	r4, r7, r3
    1232:	2308      	movs	r3, #8
    1234:	18fb      	adds	r3, r7, r3
    1236:	4ad6      	ldr	r2, [pc, #856]	; (1590 <hif_isr+0x370>)
    1238:	0019      	movs	r1, r3
    123a:	0010      	movs	r0, r2
    123c:	4bd5      	ldr	r3, [pc, #852]	; (1594 <hif_isr+0x374>)
    123e:	4798      	blx	r3
    1240:	0003      	movs	r3, r0
    1242:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1244:	230f      	movs	r3, #15
    1246:	18fb      	adds	r3, r7, r3
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	b25b      	sxtb	r3, r3
    124c:	2b00      	cmp	r3, #0
    124e:	d000      	beq.n	1252 <hif_isr+0x32>
    1250:	e217      	b.n	1682 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    1252:	68bb      	ldr	r3, [r7, #8]
    1254:	2201      	movs	r2, #1
    1256:	4013      	ands	r3, r2
    1258:	d100      	bne.n	125c <hif_isr+0x3c>
    125a:	e1fd      	b.n	1658 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    125c:	2000      	movs	r0, #0
    125e:	4bce      	ldr	r3, [pc, #824]	; (1598 <hif_isr+0x378>)
    1260:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    1262:	68bb      	ldr	r3, [r7, #8]
    1264:	2201      	movs	r2, #1
    1266:	4393      	bics	r3, r2
    1268:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    126a:	68bb      	ldr	r3, [r7, #8]
    126c:	220f      	movs	r2, #15
    126e:	18bc      	adds	r4, r7, r2
    1270:	4ac7      	ldr	r2, [pc, #796]	; (1590 <hif_isr+0x370>)
    1272:	0019      	movs	r1, r3
    1274:	0010      	movs	r0, r2
    1276:	4bc9      	ldr	r3, [pc, #804]	; (159c <hif_isr+0x37c>)
    1278:	4798      	blx	r3
    127a:	0003      	movs	r3, r0
    127c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    127e:	230f      	movs	r3, #15
    1280:	18fb      	adds	r3, r7, r3
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	b25b      	sxtb	r3, r3
    1286:	2b00      	cmp	r3, #0
    1288:	d000      	beq.n	128c <hif_isr+0x6c>
    128a:	e208      	b.n	169e <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    128c:	4bc4      	ldr	r3, [pc, #784]	; (15a0 <hif_isr+0x380>)
    128e:	2201      	movs	r2, #1
    1290:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1292:	68bb      	ldr	r3, [r7, #8]
    1294:	089b      	lsrs	r3, r3, #2
    1296:	b29a      	uxth	r2, r3
    1298:	230c      	movs	r3, #12
    129a:	18fb      	adds	r3, r7, r3
    129c:	0512      	lsls	r2, r2, #20
    129e:	0d12      	lsrs	r2, r2, #20
    12a0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    12a2:	230c      	movs	r3, #12
    12a4:	18fb      	adds	r3, r7, r3
    12a6:	881b      	ldrh	r3, [r3, #0]
    12a8:	2b00      	cmp	r3, #0
    12aa:	d100      	bne.n	12ae <hif_isr+0x8e>
    12ac:	e1c1      	b.n	1632 <hif_isr+0x412>
				uint32 address = 0;
    12ae:	2300      	movs	r3, #0
    12b0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    12b2:	230f      	movs	r3, #15
    12b4:	18fc      	adds	r4, r7, r3
    12b6:	003b      	movs	r3, r7
    12b8:	4aba      	ldr	r2, [pc, #744]	; (15a4 <hif_isr+0x384>)
    12ba:	0019      	movs	r1, r3
    12bc:	0010      	movs	r0, r2
    12be:	4bb5      	ldr	r3, [pc, #724]	; (1594 <hif_isr+0x374>)
    12c0:	4798      	blx	r3
    12c2:	0003      	movs	r3, r0
    12c4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    12c6:	230f      	movs	r3, #15
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	b25b      	sxtb	r3, r3
    12ce:	2b00      	cmp	r3, #0
    12d0:	d012      	beq.n	12f8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    12d2:	23c8      	movs	r3, #200	; 0xc8
    12d4:	33ff      	adds	r3, #255	; 0xff
    12d6:	001a      	movs	r2, r3
    12d8:	49b3      	ldr	r1, [pc, #716]	; (15a8 <hif_isr+0x388>)
    12da:	4bb4      	ldr	r3, [pc, #720]	; (15ac <hif_isr+0x38c>)
    12dc:	0018      	movs	r0, r3
    12de:	4bb4      	ldr	r3, [pc, #720]	; (15b0 <hif_isr+0x390>)
    12e0:	4798      	blx	r3
    12e2:	4bb4      	ldr	r3, [pc, #720]	; (15b4 <hif_isr+0x394>)
    12e4:	0018      	movs	r0, r3
    12e6:	4bb4      	ldr	r3, [pc, #720]	; (15b8 <hif_isr+0x398>)
    12e8:	4798      	blx	r3
    12ea:	200d      	movs	r0, #13
    12ec:	4bb3      	ldr	r3, [pc, #716]	; (15bc <hif_isr+0x39c>)
    12ee:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    12f0:	2001      	movs	r0, #1
    12f2:	4ba9      	ldr	r3, [pc, #676]	; (1598 <hif_isr+0x378>)
    12f4:	4798      	blx	r3
					goto ERR1;
    12f6:	e1d3      	b.n	16a0 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    12f8:	683a      	ldr	r2, [r7, #0]
    12fa:	4ba9      	ldr	r3, [pc, #676]	; (15a0 <hif_isr+0x380>)
    12fc:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    12fe:	230c      	movs	r3, #12
    1300:	18fb      	adds	r3, r7, r3
    1302:	881a      	ldrh	r2, [r3, #0]
    1304:	4ba6      	ldr	r3, [pc, #664]	; (15a0 <hif_isr+0x380>)
    1306:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1308:	683b      	ldr	r3, [r7, #0]
    130a:	220f      	movs	r2, #15
    130c:	18bc      	adds	r4, r7, r2
    130e:	1d39      	adds	r1, r7, #4
    1310:	2204      	movs	r2, #4
    1312:	0018      	movs	r0, r3
    1314:	4baa      	ldr	r3, [pc, #680]	; (15c0 <hif_isr+0x3a0>)
    1316:	4798      	blx	r3
    1318:	0003      	movs	r3, r0
    131a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    131c:	1d3b      	adds	r3, r7, #4
    131e:	885b      	ldrh	r3, [r3, #2]
    1320:	b29a      	uxth	r2, r3
    1322:	1d3b      	adds	r3, r7, #4
    1324:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    1326:	230f      	movs	r3, #15
    1328:	18fb      	adds	r3, r7, r3
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	b25b      	sxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	d012      	beq.n	1358 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    1332:	23d2      	movs	r3, #210	; 0xd2
    1334:	33ff      	adds	r3, #255	; 0xff
    1336:	001a      	movs	r2, r3
    1338:	499b      	ldr	r1, [pc, #620]	; (15a8 <hif_isr+0x388>)
    133a:	4b9c      	ldr	r3, [pc, #624]	; (15ac <hif_isr+0x38c>)
    133c:	0018      	movs	r0, r3
    133e:	4b9c      	ldr	r3, [pc, #624]	; (15b0 <hif_isr+0x390>)
    1340:	4798      	blx	r3
    1342:	4ba0      	ldr	r3, [pc, #640]	; (15c4 <hif_isr+0x3a4>)
    1344:	0018      	movs	r0, r3
    1346:	4b9c      	ldr	r3, [pc, #624]	; (15b8 <hif_isr+0x398>)
    1348:	4798      	blx	r3
    134a:	200d      	movs	r0, #13
    134c:	4b9b      	ldr	r3, [pc, #620]	; (15bc <hif_isr+0x39c>)
    134e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1350:	2001      	movs	r0, #1
    1352:	4b91      	ldr	r3, [pc, #580]	; (1598 <hif_isr+0x378>)
    1354:	4798      	blx	r3
					goto ERR1;
    1356:	e1a3      	b.n	16a0 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    1358:	1d3b      	adds	r3, r7, #4
    135a:	885b      	ldrh	r3, [r3, #2]
    135c:	b29b      	uxth	r3, r3
    135e:	220c      	movs	r2, #12
    1360:	18ba      	adds	r2, r7, r2
    1362:	8812      	ldrh	r2, [r2, #0]
    1364:	429a      	cmp	r2, r3
    1366:	d02d      	beq.n	13c4 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    1368:	230c      	movs	r3, #12
    136a:	18fb      	adds	r3, r7, r3
    136c:	881b      	ldrh	r3, [r3, #0]
    136e:	1d3a      	adds	r2, r7, #4
    1370:	8852      	ldrh	r2, [r2, #2]
    1372:	b292      	uxth	r2, r2
    1374:	1a9b      	subs	r3, r3, r2
    1376:	2b04      	cmp	r3, #4
    1378:	dd24      	ble.n	13c4 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    137a:	23ed      	movs	r3, #237	; 0xed
    137c:	005a      	lsls	r2, r3, #1
    137e:	498a      	ldr	r1, [pc, #552]	; (15a8 <hif_isr+0x388>)
    1380:	4b8a      	ldr	r3, [pc, #552]	; (15ac <hif_isr+0x38c>)
    1382:	0018      	movs	r0, r3
    1384:	4b8a      	ldr	r3, [pc, #552]	; (15b0 <hif_isr+0x390>)
    1386:	4798      	blx	r3
    1388:	230c      	movs	r3, #12
    138a:	18fb      	adds	r3, r7, r3
    138c:	8819      	ldrh	r1, [r3, #0]
    138e:	1d3b      	adds	r3, r7, #4
    1390:	885b      	ldrh	r3, [r3, #2]
    1392:	b29b      	uxth	r3, r3
    1394:	001a      	movs	r2, r3
    1396:	1d3b      	adds	r3, r7, #4
    1398:	781b      	ldrb	r3, [r3, #0]
    139a:	b2db      	uxtb	r3, r3
    139c:	001c      	movs	r4, r3
    139e:	1d3b      	adds	r3, r7, #4
    13a0:	785b      	ldrb	r3, [r3, #1]
    13a2:	b2db      	uxtb	r3, r3
    13a4:	4888      	ldr	r0, [pc, #544]	; (15c8 <hif_isr+0x3a8>)
    13a6:	9300      	str	r3, [sp, #0]
    13a8:	0023      	movs	r3, r4
    13aa:	4c81      	ldr	r4, [pc, #516]	; (15b0 <hif_isr+0x390>)
    13ac:	47a0      	blx	r4
    13ae:	200d      	movs	r0, #13
    13b0:	4b82      	ldr	r3, [pc, #520]	; (15bc <hif_isr+0x39c>)
    13b2:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    13b4:	2001      	movs	r0, #1
    13b6:	4b78      	ldr	r3, [pc, #480]	; (1598 <hif_isr+0x378>)
    13b8:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    13ba:	230f      	movs	r3, #15
    13bc:	18fb      	adds	r3, r7, r3
    13be:	22fa      	movs	r2, #250	; 0xfa
    13c0:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    13c2:	e16d      	b.n	16a0 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    13c4:	1d3b      	adds	r3, r7, #4
    13c6:	781b      	ldrb	r3, [r3, #0]
    13c8:	b2db      	uxtb	r3, r3
    13ca:	2b01      	cmp	r3, #1
    13cc:	d120      	bne.n	1410 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    13ce:	4b74      	ldr	r3, [pc, #464]	; (15a0 <hif_isr+0x380>)
    13d0:	68db      	ldr	r3, [r3, #12]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d00d      	beq.n	13f2 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    13d6:	4b72      	ldr	r3, [pc, #456]	; (15a0 <hif_isr+0x380>)
    13d8:	68db      	ldr	r3, [r3, #12]
    13da:	1d3a      	adds	r2, r7, #4
    13dc:	7852      	ldrb	r2, [r2, #1]
    13de:	b2d0      	uxtb	r0, r2
    13e0:	1d3a      	adds	r2, r7, #4
    13e2:	8852      	ldrh	r2, [r2, #2]
    13e4:	b292      	uxth	r2, r2
    13e6:	3a08      	subs	r2, #8
    13e8:	b291      	uxth	r1, r2
    13ea:	683a      	ldr	r2, [r7, #0]
    13ec:	3208      	adds	r2, #8
    13ee:	4798      	blx	r3
    13f0:	e0fe      	b.n	15f0 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    13f2:	23f3      	movs	r3, #243	; 0xf3
    13f4:	005a      	lsls	r2, r3, #1
    13f6:	496c      	ldr	r1, [pc, #432]	; (15a8 <hif_isr+0x388>)
    13f8:	4b6c      	ldr	r3, [pc, #432]	; (15ac <hif_isr+0x38c>)
    13fa:	0018      	movs	r0, r3
    13fc:	4b6c      	ldr	r3, [pc, #432]	; (15b0 <hif_isr+0x390>)
    13fe:	4798      	blx	r3
    1400:	4b72      	ldr	r3, [pc, #456]	; (15cc <hif_isr+0x3ac>)
    1402:	0018      	movs	r0, r3
    1404:	4b6c      	ldr	r3, [pc, #432]	; (15b8 <hif_isr+0x398>)
    1406:	4798      	blx	r3
    1408:	200d      	movs	r0, #13
    140a:	4b6c      	ldr	r3, [pc, #432]	; (15bc <hif_isr+0x39c>)
    140c:	4798      	blx	r3
    140e:	e0ef      	b.n	15f0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1410:	1d3b      	adds	r3, r7, #4
    1412:	781b      	ldrb	r3, [r3, #0]
    1414:	b2db      	uxtb	r3, r3
    1416:	2b02      	cmp	r3, #2
    1418:	d120      	bne.n	145c <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    141a:	4b61      	ldr	r3, [pc, #388]	; (15a0 <hif_isr+0x380>)
    141c:	691b      	ldr	r3, [r3, #16]
    141e:	2b00      	cmp	r3, #0
    1420:	d00d      	beq.n	143e <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1422:	4b5f      	ldr	r3, [pc, #380]	; (15a0 <hif_isr+0x380>)
    1424:	691b      	ldr	r3, [r3, #16]
    1426:	1d3a      	adds	r2, r7, #4
    1428:	7852      	ldrb	r2, [r2, #1]
    142a:	b2d0      	uxtb	r0, r2
    142c:	1d3a      	adds	r2, r7, #4
    142e:	8852      	ldrh	r2, [r2, #2]
    1430:	b292      	uxth	r2, r2
    1432:	3a08      	subs	r2, #8
    1434:	b291      	uxth	r1, r2
    1436:	683a      	ldr	r2, [r7, #0]
    1438:	3208      	adds	r2, #8
    143a:	4798      	blx	r3
    143c:	e0d8      	b.n	15f0 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    143e:	23f7      	movs	r3, #247	; 0xf7
    1440:	005a      	lsls	r2, r3, #1
    1442:	4959      	ldr	r1, [pc, #356]	; (15a8 <hif_isr+0x388>)
    1444:	4b59      	ldr	r3, [pc, #356]	; (15ac <hif_isr+0x38c>)
    1446:	0018      	movs	r0, r3
    1448:	4b59      	ldr	r3, [pc, #356]	; (15b0 <hif_isr+0x390>)
    144a:	4798      	blx	r3
    144c:	4b60      	ldr	r3, [pc, #384]	; (15d0 <hif_isr+0x3b0>)
    144e:	0018      	movs	r0, r3
    1450:	4b59      	ldr	r3, [pc, #356]	; (15b8 <hif_isr+0x398>)
    1452:	4798      	blx	r3
    1454:	200d      	movs	r0, #13
    1456:	4b59      	ldr	r3, [pc, #356]	; (15bc <hif_isr+0x39c>)
    1458:	4798      	blx	r3
    145a:	e0c9      	b.n	15f0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    145c:	1d3b      	adds	r3, r7, #4
    145e:	781b      	ldrb	r3, [r3, #0]
    1460:	b2db      	uxtb	r3, r3
    1462:	2b04      	cmp	r3, #4
    1464:	d120      	bne.n	14a8 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    1466:	4b4e      	ldr	r3, [pc, #312]	; (15a0 <hif_isr+0x380>)
    1468:	695b      	ldr	r3, [r3, #20]
    146a:	2b00      	cmp	r3, #0
    146c:	d00d      	beq.n	148a <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    146e:	4b4c      	ldr	r3, [pc, #304]	; (15a0 <hif_isr+0x380>)
    1470:	695b      	ldr	r3, [r3, #20]
    1472:	1d3a      	adds	r2, r7, #4
    1474:	7852      	ldrb	r2, [r2, #1]
    1476:	b2d0      	uxtb	r0, r2
    1478:	1d3a      	adds	r2, r7, #4
    147a:	8852      	ldrh	r2, [r2, #2]
    147c:	b292      	uxth	r2, r2
    147e:	3a08      	subs	r2, #8
    1480:	b291      	uxth	r1, r2
    1482:	683a      	ldr	r2, [r7, #0]
    1484:	3208      	adds	r2, #8
    1486:	4798      	blx	r3
    1488:	e0b2      	b.n	15f0 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    148a:	23fb      	movs	r3, #251	; 0xfb
    148c:	005a      	lsls	r2, r3, #1
    148e:	4946      	ldr	r1, [pc, #280]	; (15a8 <hif_isr+0x388>)
    1490:	4b46      	ldr	r3, [pc, #280]	; (15ac <hif_isr+0x38c>)
    1492:	0018      	movs	r0, r3
    1494:	4b46      	ldr	r3, [pc, #280]	; (15b0 <hif_isr+0x390>)
    1496:	4798      	blx	r3
    1498:	4b4e      	ldr	r3, [pc, #312]	; (15d4 <hif_isr+0x3b4>)
    149a:	0018      	movs	r0, r3
    149c:	4b46      	ldr	r3, [pc, #280]	; (15b8 <hif_isr+0x398>)
    149e:	4798      	blx	r3
    14a0:	200d      	movs	r0, #13
    14a2:	4b46      	ldr	r3, [pc, #280]	; (15bc <hif_isr+0x39c>)
    14a4:	4798      	blx	r3
    14a6:	e0a3      	b.n	15f0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    14a8:	1d3b      	adds	r3, r7, #4
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	b2db      	uxtb	r3, r3
    14ae:	2b06      	cmp	r3, #6
    14b0:	d11f      	bne.n	14f2 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    14b2:	4b3b      	ldr	r3, [pc, #236]	; (15a0 <hif_isr+0x380>)
    14b4:	6a1b      	ldr	r3, [r3, #32]
    14b6:	2b00      	cmp	r3, #0
    14b8:	d00d      	beq.n	14d6 <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    14ba:	4b39      	ldr	r3, [pc, #228]	; (15a0 <hif_isr+0x380>)
    14bc:	6a1b      	ldr	r3, [r3, #32]
    14be:	1d3a      	adds	r2, r7, #4
    14c0:	7852      	ldrb	r2, [r2, #1]
    14c2:	b2d0      	uxtb	r0, r2
    14c4:	1d3a      	adds	r2, r7, #4
    14c6:	8852      	ldrh	r2, [r2, #2]
    14c8:	b292      	uxth	r2, r2
    14ca:	3a08      	subs	r2, #8
    14cc:	b291      	uxth	r1, r2
    14ce:	683a      	ldr	r2, [r7, #0]
    14d0:	3208      	adds	r2, #8
    14d2:	4798      	blx	r3
    14d4:	e08c      	b.n	15f0 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    14d6:	4a40      	ldr	r2, [pc, #256]	; (15d8 <hif_isr+0x3b8>)
    14d8:	4933      	ldr	r1, [pc, #204]	; (15a8 <hif_isr+0x388>)
    14da:	4b34      	ldr	r3, [pc, #208]	; (15ac <hif_isr+0x38c>)
    14dc:	0018      	movs	r0, r3
    14de:	4b34      	ldr	r3, [pc, #208]	; (15b0 <hif_isr+0x390>)
    14e0:	4798      	blx	r3
    14e2:	4b3e      	ldr	r3, [pc, #248]	; (15dc <hif_isr+0x3bc>)
    14e4:	0018      	movs	r0, r3
    14e6:	4b34      	ldr	r3, [pc, #208]	; (15b8 <hif_isr+0x398>)
    14e8:	4798      	blx	r3
    14ea:	200d      	movs	r0, #13
    14ec:	4b33      	ldr	r3, [pc, #204]	; (15bc <hif_isr+0x39c>)
    14ee:	4798      	blx	r3
    14f0:	e07e      	b.n	15f0 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    14f2:	1d3b      	adds	r3, r7, #4
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	b2db      	uxtb	r3, r3
    14f8:	2b07      	cmp	r3, #7
    14fa:	d11f      	bne.n	153c <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    14fc:	4b28      	ldr	r3, [pc, #160]	; (15a0 <hif_isr+0x380>)
    14fe:	699b      	ldr	r3, [r3, #24]
    1500:	2b00      	cmp	r3, #0
    1502:	d00d      	beq.n	1520 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1504:	4b26      	ldr	r3, [pc, #152]	; (15a0 <hif_isr+0x380>)
    1506:	699b      	ldr	r3, [r3, #24]
    1508:	1d3a      	adds	r2, r7, #4
    150a:	7852      	ldrb	r2, [r2, #1]
    150c:	b2d0      	uxtb	r0, r2
    150e:	1d3a      	adds	r2, r7, #4
    1510:	8852      	ldrh	r2, [r2, #2]
    1512:	b292      	uxth	r2, r2
    1514:	3a08      	subs	r2, #8
    1516:	b291      	uxth	r1, r2
    1518:	683a      	ldr	r2, [r7, #0]
    151a:	3208      	adds	r2, #8
    151c:	4798      	blx	r3
    151e:	e067      	b.n	15f0 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    1520:	4a2f      	ldr	r2, [pc, #188]	; (15e0 <hif_isr+0x3c0>)
    1522:	4921      	ldr	r1, [pc, #132]	; (15a8 <hif_isr+0x388>)
    1524:	4b21      	ldr	r3, [pc, #132]	; (15ac <hif_isr+0x38c>)
    1526:	0018      	movs	r0, r3
    1528:	4b21      	ldr	r3, [pc, #132]	; (15b0 <hif_isr+0x390>)
    152a:	4798      	blx	r3
    152c:	4b2d      	ldr	r3, [pc, #180]	; (15e4 <hif_isr+0x3c4>)
    152e:	0018      	movs	r0, r3
    1530:	4b21      	ldr	r3, [pc, #132]	; (15b8 <hif_isr+0x398>)
    1532:	4798      	blx	r3
    1534:	200d      	movs	r0, #13
    1536:	4b21      	ldr	r3, [pc, #132]	; (15bc <hif_isr+0x39c>)
    1538:	4798      	blx	r3
    153a:	e059      	b.n	15f0 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    153c:	1d3b      	adds	r3, r7, #4
    153e:	781b      	ldrb	r3, [r3, #0]
    1540:	b2db      	uxtb	r3, r3
    1542:	2b05      	cmp	r3, #5
    1544:	d111      	bne.n	156a <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    1546:	4b16      	ldr	r3, [pc, #88]	; (15a0 <hif_isr+0x380>)
    1548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    154a:	2b00      	cmp	r3, #0
    154c:	d050      	beq.n	15f0 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    154e:	4b14      	ldr	r3, [pc, #80]	; (15a0 <hif_isr+0x380>)
    1550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1552:	1d3a      	adds	r2, r7, #4
    1554:	7852      	ldrb	r2, [r2, #1]
    1556:	b2d0      	uxtb	r0, r2
    1558:	1d3a      	adds	r2, r7, #4
    155a:	8852      	ldrh	r2, [r2, #2]
    155c:	b292      	uxth	r2, r2
    155e:	3a08      	subs	r2, #8
    1560:	b291      	uxth	r1, r2
    1562:	683a      	ldr	r2, [r7, #0]
    1564:	3208      	adds	r2, #8
    1566:	4798      	blx	r3
    1568:	e042      	b.n	15f0 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    156a:	4a1f      	ldr	r2, [pc, #124]	; (15e8 <hif_isr+0x3c8>)
    156c:	490e      	ldr	r1, [pc, #56]	; (15a8 <hif_isr+0x388>)
    156e:	4b0f      	ldr	r3, [pc, #60]	; (15ac <hif_isr+0x38c>)
    1570:	0018      	movs	r0, r3
    1572:	4b0f      	ldr	r3, [pc, #60]	; (15b0 <hif_isr+0x390>)
    1574:	4798      	blx	r3
    1576:	4b1d      	ldr	r3, [pc, #116]	; (15ec <hif_isr+0x3cc>)
    1578:	0018      	movs	r0, r3
    157a:	4b0f      	ldr	r3, [pc, #60]	; (15b8 <hif_isr+0x398>)
    157c:	4798      	blx	r3
    157e:	200d      	movs	r0, #13
    1580:	4b0e      	ldr	r3, [pc, #56]	; (15bc <hif_isr+0x39c>)
    1582:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1584:	230f      	movs	r3, #15
    1586:	18fb      	adds	r3, r7, r3
    1588:	22fa      	movs	r2, #250	; 0xfa
    158a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    158c:	e088      	b.n	16a0 <hif_isr+0x480>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	00001070 	.word	0x00001070
    1594:	00002c5d 	.word	0x00002c5d
    1598:	000003d1 	.word	0x000003d1
    159c:	00002c81 	.word	0x00002c81
    15a0:	200004ac 	.word	0x200004ac
    15a4:	00001084 	.word	0x00001084
    15a8:	00013cf4 	.word	0x00013cf4
    15ac:	000139f0 	.word	0x000139f0
    15b0:	0000f0ad 	.word	0x0000f0ad
    15b4:	00013a20 	.word	0x00013a20
    15b8:	0000f1c9 	.word	0x0000f1c9
    15bc:	0000f0e1 	.word	0x0000f0e1
    15c0:	00002cd1 	.word	0x00002cd1
    15c4:	00013a44 	.word	0x00013a44
    15c8:	00013a5c 	.word	0x00013a5c
    15cc:	00013a9c 	.word	0x00013a9c
    15d0:	00013abc 	.word	0x00013abc
    15d4:	00013ae0 	.word	0x00013ae0
    15d8:	000001ff 	.word	0x000001ff
    15dc:	00013b00 	.word	0x00013b00
    15e0:	00000206 	.word	0x00000206
    15e4:	00013b24 	.word	0x00013b24
    15e8:	0000020f 	.word	0x0000020f
    15ec:	00013b48 	.word	0x00013b48
				}
				if(gstrHifCxt.u8HifRXDone)
    15f0:	4b2f      	ldr	r3, [pc, #188]	; (16b0 <hif_isr+0x490>)
    15f2:	789b      	ldrb	r3, [r3, #2]
    15f4:	b2db      	uxtb	r3, r3
    15f6:	2b00      	cmp	r3, #0
    15f8:	d052      	beq.n	16a0 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    15fa:	4a2e      	ldr	r2, [pc, #184]	; (16b4 <hif_isr+0x494>)
    15fc:	492e      	ldr	r1, [pc, #184]	; (16b8 <hif_isr+0x498>)
    15fe:	4b2f      	ldr	r3, [pc, #188]	; (16bc <hif_isr+0x49c>)
    1600:	0018      	movs	r0, r3
    1602:	4b2f      	ldr	r3, [pc, #188]	; (16c0 <hif_isr+0x4a0>)
    1604:	4798      	blx	r3
    1606:	1d3b      	adds	r3, r7, #4
    1608:	781b      	ldrb	r3, [r3, #0]
    160a:	b2db      	uxtb	r3, r3
    160c:	0019      	movs	r1, r3
    160e:	1d3b      	adds	r3, r7, #4
    1610:	785b      	ldrb	r3, [r3, #1]
    1612:	b2db      	uxtb	r3, r3
    1614:	001a      	movs	r2, r3
    1616:	4b2b      	ldr	r3, [pc, #172]	; (16c4 <hif_isr+0x4a4>)
    1618:	0018      	movs	r0, r3
    161a:	4b29      	ldr	r3, [pc, #164]	; (16c0 <hif_isr+0x4a0>)
    161c:	4798      	blx	r3
    161e:	200d      	movs	r0, #13
    1620:	4b29      	ldr	r3, [pc, #164]	; (16c8 <hif_isr+0x4a8>)
    1622:	4798      	blx	r3
					ret = hif_set_rx_done();
    1624:	230f      	movs	r3, #15
    1626:	18fc      	adds	r4, r7, r3
    1628:	4b28      	ldr	r3, [pc, #160]	; (16cc <hif_isr+0x4ac>)
    162a:	4798      	blx	r3
    162c:	0003      	movs	r3, r0
    162e:	7023      	strb	r3, [r4, #0]
    1630:	e036      	b.n	16a0 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    1632:	2387      	movs	r3, #135	; 0x87
    1634:	009a      	lsls	r2, r3, #2
    1636:	4920      	ldr	r1, [pc, #128]	; (16b8 <hif_isr+0x498>)
    1638:	4b20      	ldr	r3, [pc, #128]	; (16bc <hif_isr+0x49c>)
    163a:	0018      	movs	r0, r3
    163c:	4b20      	ldr	r3, [pc, #128]	; (16c0 <hif_isr+0x4a0>)
    163e:	4798      	blx	r3
    1640:	4b23      	ldr	r3, [pc, #140]	; (16d0 <hif_isr+0x4b0>)
    1642:	0018      	movs	r0, r3
    1644:	4b23      	ldr	r3, [pc, #140]	; (16d4 <hif_isr+0x4b4>)
    1646:	4798      	blx	r3
    1648:	200d      	movs	r0, #13
    164a:	4b1f      	ldr	r3, [pc, #124]	; (16c8 <hif_isr+0x4a8>)
    164c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    164e:	230f      	movs	r3, #15
    1650:	18fb      	adds	r3, r7, r3
    1652:	22fe      	movs	r2, #254	; 0xfe
    1654:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    1656:	e023      	b.n	16a0 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    1658:	2389      	movs	r3, #137	; 0x89
    165a:	009a      	lsls	r2, r3, #2
    165c:	4916      	ldr	r1, [pc, #88]	; (16b8 <hif_isr+0x498>)
    165e:	4b17      	ldr	r3, [pc, #92]	; (16bc <hif_isr+0x49c>)
    1660:	0018      	movs	r0, r3
    1662:	4b17      	ldr	r3, [pc, #92]	; (16c0 <hif_isr+0x4a0>)
    1664:	4798      	blx	r3
    1666:	68ba      	ldr	r2, [r7, #8]
    1668:	4b1b      	ldr	r3, [pc, #108]	; (16d8 <hif_isr+0x4b8>)
    166a:	0011      	movs	r1, r2
    166c:	0018      	movs	r0, r3
    166e:	4b14      	ldr	r3, [pc, #80]	; (16c0 <hif_isr+0x4a0>)
    1670:	4798      	blx	r3
    1672:	200d      	movs	r0, #13
    1674:	4b14      	ldr	r3, [pc, #80]	; (16c8 <hif_isr+0x4a8>)
    1676:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1678:	230f      	movs	r3, #15
    167a:	18fb      	adds	r3, r7, r3
    167c:	22f4      	movs	r2, #244	; 0xf4
    167e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1680:	e00e      	b.n	16a0 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1682:	4a16      	ldr	r2, [pc, #88]	; (16dc <hif_isr+0x4bc>)
    1684:	490c      	ldr	r1, [pc, #48]	; (16b8 <hif_isr+0x498>)
    1686:	4b0d      	ldr	r3, [pc, #52]	; (16bc <hif_isr+0x49c>)
    1688:	0018      	movs	r0, r3
    168a:	4b0d      	ldr	r3, [pc, #52]	; (16c0 <hif_isr+0x4a0>)
    168c:	4798      	blx	r3
    168e:	4b14      	ldr	r3, [pc, #80]	; (16e0 <hif_isr+0x4c0>)
    1690:	0018      	movs	r0, r3
    1692:	4b10      	ldr	r3, [pc, #64]	; (16d4 <hif_isr+0x4b4>)
    1694:	4798      	blx	r3
    1696:	200d      	movs	r0, #13
    1698:	4b0b      	ldr	r3, [pc, #44]	; (16c8 <hif_isr+0x4a8>)
    169a:	4798      	blx	r3
		goto ERR1;
    169c:	e000      	b.n	16a0 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    169e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    16a0:	230f      	movs	r3, #15
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	b25b      	sxtb	r3, r3
}
    16a8:	0018      	movs	r0, r3
    16aa:	46bd      	mov	sp, r7
    16ac:	b005      	add	sp, #20
    16ae:	bd90      	pop	{r4, r7, pc}
    16b0:	200004ac 	.word	0x200004ac
    16b4:	00000215 	.word	0x00000215
    16b8:	00013cf4 	.word	0x00013cf4
    16bc:	000139f0 	.word	0x000139f0
    16c0:	0000f0ad 	.word	0x0000f0ad
    16c4:	00013b60 	.word	0x00013b60
    16c8:	0000f0e1 	.word	0x0000f0e1
    16cc:	00000cb9 	.word	0x00000cb9
    16d0:	00013b8c 	.word	0x00013b8c
    16d4:	0000f1c9 	.word	0x0000f1c9
    16d8:	00013ba0 	.word	0x00013ba0
    16dc:	0000022d 	.word	0x0000022d
    16e0:	00013bbc 	.word	0x00013bbc

000016e4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    16e4:	b590      	push	{r4, r7, lr}
    16e6:	b083      	sub	sp, #12
    16e8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    16ea:	1dfb      	adds	r3, r7, #7
    16ec:	2200      	movs	r2, #0
    16ee:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    16f0:	e023      	b.n	173a <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    16f2:	4b18      	ldr	r3, [pc, #96]	; (1754 <hif_handle_isr+0x70>)
    16f4:	78db      	ldrb	r3, [r3, #3]
    16f6:	b2db      	uxtb	r3, r3
    16f8:	3b01      	subs	r3, #1
    16fa:	b2da      	uxtb	r2, r3
    16fc:	4b15      	ldr	r3, [pc, #84]	; (1754 <hif_handle_isr+0x70>)
    16fe:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    1700:	1dfc      	adds	r4, r7, #7
    1702:	4b15      	ldr	r3, [pc, #84]	; (1758 <hif_handle_isr+0x74>)
    1704:	4798      	blx	r3
    1706:	0003      	movs	r3, r0
    1708:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    170a:	1dfb      	adds	r3, r7, #7
    170c:	781b      	ldrb	r3, [r3, #0]
    170e:	b25b      	sxtb	r3, r3
    1710:	2b00      	cmp	r3, #0
    1712:	d100      	bne.n	1716 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    1714:	e011      	b.n	173a <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1716:	4a11      	ldr	r2, [pc, #68]	; (175c <hif_handle_isr+0x78>)
    1718:	4911      	ldr	r1, [pc, #68]	; (1760 <hif_handle_isr+0x7c>)
    171a:	4b12      	ldr	r3, [pc, #72]	; (1764 <hif_handle_isr+0x80>)
    171c:	0018      	movs	r0, r3
    171e:	4b12      	ldr	r3, [pc, #72]	; (1768 <hif_handle_isr+0x84>)
    1720:	4798      	blx	r3
    1722:	1dfb      	adds	r3, r7, #7
    1724:	2200      	movs	r2, #0
    1726:	569a      	ldrsb	r2, [r3, r2]
    1728:	4b10      	ldr	r3, [pc, #64]	; (176c <hif_handle_isr+0x88>)
    172a:	0011      	movs	r1, r2
    172c:	0018      	movs	r0, r3
    172e:	4b0e      	ldr	r3, [pc, #56]	; (1768 <hif_handle_isr+0x84>)
    1730:	4798      	blx	r3
    1732:	200d      	movs	r0, #13
    1734:	4b0e      	ldr	r3, [pc, #56]	; (1770 <hif_handle_isr+0x8c>)
    1736:	4798      	blx	r3
			ret = hif_isr();
    1738:	e7e2      	b.n	1700 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    173a:	4b06      	ldr	r3, [pc, #24]	; (1754 <hif_handle_isr+0x70>)
    173c:	78db      	ldrb	r3, [r3, #3]
    173e:	b2db      	uxtb	r3, r3
    1740:	2b00      	cmp	r3, #0
    1742:	d1d6      	bne.n	16f2 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    1744:	1dfb      	adds	r3, r7, #7
    1746:	781b      	ldrb	r3, [r3, #0]
    1748:	b25b      	sxtb	r3, r3
}
    174a:	0018      	movs	r0, r3
    174c:	46bd      	mov	sp, r7
    174e:	b003      	add	sp, #12
    1750:	bd90      	pop	{r4, r7, pc}
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	200004ac 	.word	0x200004ac
    1758:	00001221 	.word	0x00001221
    175c:	0000024a 	.word	0x0000024a
    1760:	00013cfc 	.word	0x00013cfc
    1764:	000139f0 	.word	0x000139f0
    1768:	0000f0ad 	.word	0x0000f0ad
    176c:	00013be0 	.word	0x00013be0
    1770:	0000f0e1 	.word	0x0000f0e1

00001774 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1774:	b590      	push	{r4, r7, lr}
    1776:	b087      	sub	sp, #28
    1778:	af00      	add	r7, sp, #0
    177a:	60f8      	str	r0, [r7, #12]
    177c:	60b9      	str	r1, [r7, #8]
    177e:	0019      	movs	r1, r3
    1780:	1dbb      	adds	r3, r7, #6
    1782:	801a      	strh	r2, [r3, #0]
    1784:	1d7b      	adds	r3, r7, #5
    1786:	1c0a      	adds	r2, r1, #0
    1788:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    178a:	2317      	movs	r3, #23
    178c:	18fb      	adds	r3, r7, r3
    178e:	2200      	movs	r2, #0
    1790:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1792:	68fb      	ldr	r3, [r7, #12]
    1794:	2b00      	cmp	r3, #0
    1796:	d006      	beq.n	17a6 <hif_receive+0x32>
    1798:	68bb      	ldr	r3, [r7, #8]
    179a:	2b00      	cmp	r3, #0
    179c:	d003      	beq.n	17a6 <hif_receive+0x32>
    179e:	1dbb      	adds	r3, r7, #6
    17a0:	881b      	ldrh	r3, [r3, #0]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d11c      	bne.n	17e0 <hif_receive+0x6c>
	{
		if(isDone)
    17a6:	1d7b      	adds	r3, r7, #5
    17a8:	781b      	ldrb	r3, [r3, #0]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d006      	beq.n	17bc <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    17ae:	2317      	movs	r3, #23
    17b0:	18fc      	adds	r4, r7, r3
    17b2:	4b42      	ldr	r3, [pc, #264]	; (18bc <hif_receive+0x148>)
    17b4:	4798      	blx	r3
    17b6:	0003      	movs	r3, r0
    17b8:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    17ba:	e077      	b.n	18ac <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    17bc:	2317      	movs	r3, #23
    17be:	18fb      	adds	r3, r7, r3
    17c0:	22f4      	movs	r2, #244	; 0xf4
    17c2:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    17c4:	4a3e      	ldr	r2, [pc, #248]	; (18c0 <hif_receive+0x14c>)
    17c6:	493f      	ldr	r1, [pc, #252]	; (18c4 <hif_receive+0x150>)
    17c8:	4b3f      	ldr	r3, [pc, #252]	; (18c8 <hif_receive+0x154>)
    17ca:	0018      	movs	r0, r3
    17cc:	4b3f      	ldr	r3, [pc, #252]	; (18cc <hif_receive+0x158>)
    17ce:	4798      	blx	r3
    17d0:	4b3f      	ldr	r3, [pc, #252]	; (18d0 <hif_receive+0x15c>)
    17d2:	0018      	movs	r0, r3
    17d4:	4b3f      	ldr	r3, [pc, #252]	; (18d4 <hif_receive+0x160>)
    17d6:	4798      	blx	r3
    17d8:	200d      	movs	r0, #13
    17da:	4b3f      	ldr	r3, [pc, #252]	; (18d8 <hif_receive+0x164>)
    17dc:	4798      	blx	r3
		goto ERR1;
    17de:	e065      	b.n	18ac <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    17e0:	1dbb      	adds	r3, r7, #6
    17e2:	881a      	ldrh	r2, [r3, #0]
    17e4:	4b3d      	ldr	r3, [pc, #244]	; (18dc <hif_receive+0x168>)
    17e6:	689b      	ldr	r3, [r3, #8]
    17e8:	429a      	cmp	r2, r3
    17ea:	d915      	bls.n	1818 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    17ec:	2317      	movs	r3, #23
    17ee:	18fb      	adds	r3, r7, r3
    17f0:	22f4      	movs	r2, #244	; 0xf4
    17f2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    17f4:	4a3a      	ldr	r2, [pc, #232]	; (18e0 <hif_receive+0x16c>)
    17f6:	4933      	ldr	r1, [pc, #204]	; (18c4 <hif_receive+0x150>)
    17f8:	4b33      	ldr	r3, [pc, #204]	; (18c8 <hif_receive+0x154>)
    17fa:	0018      	movs	r0, r3
    17fc:	4b33      	ldr	r3, [pc, #204]	; (18cc <hif_receive+0x158>)
    17fe:	4798      	blx	r3
    1800:	1dbb      	adds	r3, r7, #6
    1802:	8819      	ldrh	r1, [r3, #0]
    1804:	4b35      	ldr	r3, [pc, #212]	; (18dc <hif_receive+0x168>)
    1806:	689a      	ldr	r2, [r3, #8]
    1808:	4b36      	ldr	r3, [pc, #216]	; (18e4 <hif_receive+0x170>)
    180a:	0018      	movs	r0, r3
    180c:	4b2f      	ldr	r3, [pc, #188]	; (18cc <hif_receive+0x158>)
    180e:	4798      	blx	r3
    1810:	200d      	movs	r0, #13
    1812:	4b31      	ldr	r3, [pc, #196]	; (18d8 <hif_receive+0x164>)
    1814:	4798      	blx	r3
		goto ERR1;
    1816:	e049      	b.n	18ac <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1818:	4b30      	ldr	r3, [pc, #192]	; (18dc <hif_receive+0x168>)
    181a:	685a      	ldr	r2, [r3, #4]
    181c:	68fb      	ldr	r3, [r7, #12]
    181e:	429a      	cmp	r2, r3
    1820:	d80a      	bhi.n	1838 <hif_receive+0xc4>
    1822:	1dbb      	adds	r3, r7, #6
    1824:	881a      	ldrh	r2, [r3, #0]
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	18d2      	adds	r2, r2, r3
    182a:	4b2c      	ldr	r3, [pc, #176]	; (18dc <hif_receive+0x168>)
    182c:	6859      	ldr	r1, [r3, #4]
    182e:	4b2b      	ldr	r3, [pc, #172]	; (18dc <hif_receive+0x168>)
    1830:	689b      	ldr	r3, [r3, #8]
    1832:	18cb      	adds	r3, r1, r3
    1834:	429a      	cmp	r2, r3
    1836:	d911      	bls.n	185c <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    1838:	2317      	movs	r3, #23
    183a:	18fb      	adds	r3, r7, r3
    183c:	22f4      	movs	r2, #244	; 0xf4
    183e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1840:	4a29      	ldr	r2, [pc, #164]	; (18e8 <hif_receive+0x174>)
    1842:	4920      	ldr	r1, [pc, #128]	; (18c4 <hif_receive+0x150>)
    1844:	4b20      	ldr	r3, [pc, #128]	; (18c8 <hif_receive+0x154>)
    1846:	0018      	movs	r0, r3
    1848:	4b20      	ldr	r3, [pc, #128]	; (18cc <hif_receive+0x158>)
    184a:	4798      	blx	r3
    184c:	4b27      	ldr	r3, [pc, #156]	; (18ec <hif_receive+0x178>)
    184e:	0018      	movs	r0, r3
    1850:	4b20      	ldr	r3, [pc, #128]	; (18d4 <hif_receive+0x160>)
    1852:	4798      	blx	r3
    1854:	200d      	movs	r0, #13
    1856:	4b20      	ldr	r3, [pc, #128]	; (18d8 <hif_receive+0x164>)
    1858:	4798      	blx	r3
		goto ERR1;
    185a:	e027      	b.n	18ac <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    185c:	1dbb      	adds	r3, r7, #6
    185e:	881a      	ldrh	r2, [r3, #0]
    1860:	2317      	movs	r3, #23
    1862:	18fc      	adds	r4, r7, r3
    1864:	68b9      	ldr	r1, [r7, #8]
    1866:	68fb      	ldr	r3, [r7, #12]
    1868:	0018      	movs	r0, r3
    186a:	4b21      	ldr	r3, [pc, #132]	; (18f0 <hif_receive+0x17c>)
    186c:	4798      	blx	r3
    186e:	0003      	movs	r3, r0
    1870:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1872:	2317      	movs	r3, #23
    1874:	18fb      	adds	r3, r7, r3
    1876:	781b      	ldrb	r3, [r3, #0]
    1878:	b25b      	sxtb	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	d115      	bne.n	18aa <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    187e:	4b17      	ldr	r3, [pc, #92]	; (18dc <hif_receive+0x168>)
    1880:	685a      	ldr	r2, [r3, #4]
    1882:	4b16      	ldr	r3, [pc, #88]	; (18dc <hif_receive+0x168>)
    1884:	689b      	ldr	r3, [r3, #8]
    1886:	18d2      	adds	r2, r2, r3
    1888:	1dbb      	adds	r3, r7, #6
    188a:	8819      	ldrh	r1, [r3, #0]
    188c:	68fb      	ldr	r3, [r7, #12]
    188e:	18cb      	adds	r3, r1, r3
    1890:	429a      	cmp	r2, r3
    1892:	d003      	beq.n	189c <hif_receive+0x128>
    1894:	1d7b      	adds	r3, r7, #5
    1896:	781b      	ldrb	r3, [r3, #0]
    1898:	2b00      	cmp	r3, #0
    189a:	d007      	beq.n	18ac <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    189c:	2317      	movs	r3, #23
    189e:	18fc      	adds	r4, r7, r3
    18a0:	4b06      	ldr	r3, [pc, #24]	; (18bc <hif_receive+0x148>)
    18a2:	4798      	blx	r3
    18a4:	0003      	movs	r3, r0
    18a6:	7023      	strb	r3, [r4, #0]
    18a8:	e000      	b.n	18ac <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    18aa:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    18ac:	2317      	movs	r3, #23
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	781b      	ldrb	r3, [r3, #0]
    18b2:	b25b      	sxtb	r3, r3
}
    18b4:	0018      	movs	r0, r3
    18b6:	46bd      	mov	sp, r7
    18b8:	b007      	add	sp, #28
    18ba:	bd90      	pop	{r4, r7, pc}
    18bc:	00000cb9 	.word	0x00000cb9
    18c0:	0000026b 	.word	0x0000026b
    18c4:	00013d0c 	.word	0x00013d0c
    18c8:	000139f0 	.word	0x000139f0
    18cc:	0000f0ad 	.word	0x0000f0ad
    18d0:	00013c10 	.word	0x00013c10
    18d4:	0000f1c9 	.word	0x0000f1c9
    18d8:	0000f0e1 	.word	0x0000f0e1
    18dc:	200004ac 	.word	0x200004ac
    18e0:	00000273 	.word	0x00000273
    18e4:	00013c30 	.word	0x00013c30
    18e8:	00000279 	.word	0x00000279
    18ec:	00013c78 	.word	0x00013c78
    18f0:	00002cd1 	.word	0x00002cd1

000018f4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    18f4:	b580      	push	{r7, lr}
    18f6:	b084      	sub	sp, #16
    18f8:	af00      	add	r7, sp, #0
    18fa:	0002      	movs	r2, r0
    18fc:	6039      	str	r1, [r7, #0]
    18fe:	1dfb      	adds	r3, r7, #7
    1900:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    1902:	230f      	movs	r3, #15
    1904:	18fb      	adds	r3, r7, r3
    1906:	2200      	movs	r2, #0
    1908:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    190a:	1dfb      	adds	r3, r7, #7
    190c:	781b      	ldrb	r3, [r3, #0]
    190e:	2b07      	cmp	r3, #7
    1910:	d820      	bhi.n	1954 <hif_register_cb+0x60>
    1912:	009a      	lsls	r2, r3, #2
    1914:	4b1e      	ldr	r3, [pc, #120]	; (1990 <hif_register_cb+0x9c>)
    1916:	18d3      	adds	r3, r2, r3
    1918:	681b      	ldr	r3, [r3, #0]
    191a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    191c:	4b1d      	ldr	r3, [pc, #116]	; (1994 <hif_register_cb+0xa0>)
    191e:	683a      	ldr	r2, [r7, #0]
    1920:	611a      	str	r2, [r3, #16]
			break;
    1922:	e02c      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    1924:	4b1b      	ldr	r3, [pc, #108]	; (1994 <hif_register_cb+0xa0>)
    1926:	683a      	ldr	r2, [r7, #0]
    1928:	60da      	str	r2, [r3, #12]
			break;
    192a:	e028      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    192c:	4b19      	ldr	r3, [pc, #100]	; (1994 <hif_register_cb+0xa0>)
    192e:	683a      	ldr	r2, [r7, #0]
    1930:	615a      	str	r2, [r3, #20]
			break;
    1932:	e024      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    1934:	4b17      	ldr	r3, [pc, #92]	; (1994 <hif_register_cb+0xa0>)
    1936:	683a      	ldr	r2, [r7, #0]
    1938:	61da      	str	r2, [r3, #28]
			break;
    193a:	e020      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    193c:	4b15      	ldr	r3, [pc, #84]	; (1994 <hif_register_cb+0xa0>)
    193e:	683a      	ldr	r2, [r7, #0]
    1940:	621a      	str	r2, [r3, #32]
			break;
    1942:	e01c      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    1944:	4b13      	ldr	r3, [pc, #76]	; (1994 <hif_register_cb+0xa0>)
    1946:	683a      	ldr	r2, [r7, #0]
    1948:	619a      	str	r2, [r3, #24]
			break;
    194a:	e018      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    194c:	4b11      	ldr	r3, [pc, #68]	; (1994 <hif_register_cb+0xa0>)
    194e:	683a      	ldr	r2, [r7, #0]
    1950:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1952:	e014      	b.n	197e <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1954:	4a10      	ldr	r2, [pc, #64]	; (1998 <hif_register_cb+0xa4>)
    1956:	4911      	ldr	r1, [pc, #68]	; (199c <hif_register_cb+0xa8>)
    1958:	4b11      	ldr	r3, [pc, #68]	; (19a0 <hif_register_cb+0xac>)
    195a:	0018      	movs	r0, r3
    195c:	4b11      	ldr	r3, [pc, #68]	; (19a4 <hif_register_cb+0xb0>)
    195e:	4798      	blx	r3
    1960:	1dfb      	adds	r3, r7, #7
    1962:	781a      	ldrb	r2, [r3, #0]
    1964:	4b10      	ldr	r3, [pc, #64]	; (19a8 <hif_register_cb+0xb4>)
    1966:	0011      	movs	r1, r2
    1968:	0018      	movs	r0, r3
    196a:	4b0e      	ldr	r3, [pc, #56]	; (19a4 <hif_register_cb+0xb0>)
    196c:	4798      	blx	r3
    196e:	200d      	movs	r0, #13
    1970:	4b0e      	ldr	r3, [pc, #56]	; (19ac <hif_register_cb+0xb8>)
    1972:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1974:	230f      	movs	r3, #15
    1976:	18fb      	adds	r3, r7, r3
    1978:	22f4      	movs	r2, #244	; 0xf4
    197a:	701a      	strb	r2, [r3, #0]
			break;
    197c:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    197e:	230f      	movs	r3, #15
    1980:	18fb      	adds	r3, r7, r3
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	b25b      	sxtb	r3, r3
}
    1986:	0018      	movs	r0, r3
    1988:	46bd      	mov	sp, r7
    198a:	b004      	add	sp, #16
    198c:	bd80      	pop	{r7, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	00013cc8 	.word	0x00013cc8
    1994:	200004ac 	.word	0x200004ac
    1998:	000002b1 	.word	0x000002b1
    199c:	00013d18 	.word	0x00013d18
    19a0:	000139f0 	.word	0x000139f0
    19a4:	0000f0ad 	.word	0x0000f0ad
    19a8:	00013cbc 	.word	0x00013cbc
    19ac:	0000f0e1 	.word	0x0000f0e1

000019b0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    19b0:	b590      	push	{r4, r7, lr}
    19b2:	b0ad      	sub	sp, #180	; 0xb4
    19b4:	af02      	add	r7, sp, #8
    19b6:	603a      	str	r2, [r7, #0]
    19b8:	1dfb      	adds	r3, r7, #7
    19ba:	1c02      	adds	r2, r0, #0
    19bc:	701a      	strb	r2, [r3, #0]
    19be:	1d3b      	adds	r3, r7, #4
    19c0:	1c0a      	adds	r2, r1, #0
    19c2:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    19c4:	1dfb      	adds	r3, r7, #7
    19c6:	781b      	ldrb	r3, [r3, #0]
    19c8:	2b2c      	cmp	r3, #44	; 0x2c
    19ca:	d116      	bne.n	19fa <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    19cc:	239c      	movs	r3, #156	; 0x9c
    19ce:	18f9      	adds	r1, r7, r3
    19d0:	6838      	ldr	r0, [r7, #0]
    19d2:	2300      	movs	r3, #0
    19d4:	2204      	movs	r2, #4
    19d6:	4cc6      	ldr	r4, [pc, #792]	; (1cf0 <m2m_wifi_cb+0x340>)
    19d8:	47a0      	blx	r4
    19da:	1e03      	subs	r3, r0, #0
    19dc:	d000      	beq.n	19e0 <m2m_wifi_cb+0x30>
    19de:	e1aa      	b.n	1d36 <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    19e0:	4bc4      	ldr	r3, [pc, #784]	; (1cf4 <m2m_wifi_cb+0x344>)
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	2b00      	cmp	r3, #0
    19e6:	d100      	bne.n	19ea <m2m_wifi_cb+0x3a>
    19e8:	e1a5      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    19ea:	4bc2      	ldr	r3, [pc, #776]	; (1cf4 <m2m_wifi_cb+0x344>)
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	229c      	movs	r2, #156	; 0x9c
    19f0:	18ba      	adds	r2, r7, r2
    19f2:	0011      	movs	r1, r2
    19f4:	202c      	movs	r0, #44	; 0x2c
    19f6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    19f8:	e19d      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    19fa:	1dfb      	adds	r3, r7, #7
    19fc:	781b      	ldrb	r3, [r3, #0]
    19fe:	2b1b      	cmp	r3, #27
    1a00:	d116      	bne.n	1a30 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1a02:	2394      	movs	r3, #148	; 0x94
    1a04:	18f9      	adds	r1, r7, r3
    1a06:	6838      	ldr	r0, [r7, #0]
    1a08:	2300      	movs	r3, #0
    1a0a:	2208      	movs	r2, #8
    1a0c:	4cb8      	ldr	r4, [pc, #736]	; (1cf0 <m2m_wifi_cb+0x340>)
    1a0e:	47a0      	blx	r4
    1a10:	1e03      	subs	r3, r0, #0
    1a12:	d000      	beq.n	1a16 <m2m_wifi_cb+0x66>
    1a14:	e18f      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1a16:	4bb7      	ldr	r3, [pc, #732]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a18:	681b      	ldr	r3, [r3, #0]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d100      	bne.n	1a20 <m2m_wifi_cb+0x70>
    1a1e:	e18a      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1a20:	4bb4      	ldr	r3, [pc, #720]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	2294      	movs	r2, #148	; 0x94
    1a26:	18ba      	adds	r2, r7, r2
    1a28:	0011      	movs	r1, r2
    1a2a:	201b      	movs	r0, #27
    1a2c:	4798      	blx	r3
}
    1a2e:	e182      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1a30:	1dfb      	adds	r3, r7, #7
    1a32:	781b      	ldrb	r3, [r3, #0]
    1a34:	2b06      	cmp	r3, #6
    1a36:	d116      	bne.n	1a66 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1a38:	2308      	movs	r3, #8
    1a3a:	18f9      	adds	r1, r7, r3
    1a3c:	6838      	ldr	r0, [r7, #0]
    1a3e:	2301      	movs	r3, #1
    1a40:	2230      	movs	r2, #48	; 0x30
    1a42:	4cab      	ldr	r4, [pc, #684]	; (1cf0 <m2m_wifi_cb+0x340>)
    1a44:	47a0      	blx	r4
    1a46:	1e03      	subs	r3, r0, #0
    1a48:	d000      	beq.n	1a4c <m2m_wifi_cb+0x9c>
    1a4a:	e174      	b.n	1d36 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1a4c:	4ba9      	ldr	r3, [pc, #676]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	2b00      	cmp	r3, #0
    1a52:	d100      	bne.n	1a56 <m2m_wifi_cb+0xa6>
    1a54:	e16f      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1a56:	4ba7      	ldr	r3, [pc, #668]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a58:	681b      	ldr	r3, [r3, #0]
    1a5a:	2208      	movs	r2, #8
    1a5c:	18ba      	adds	r2, r7, r2
    1a5e:	0011      	movs	r1, r2
    1a60:	2006      	movs	r0, #6
    1a62:	4798      	blx	r3
}
    1a64:	e167      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1a66:	1dfb      	adds	r3, r7, #7
    1a68:	781b      	ldrb	r3, [r3, #0]
    1a6a:	2b0e      	cmp	r3, #14
    1a6c:	d100      	bne.n	1a70 <m2m_wifi_cb+0xc0>
    1a6e:	e162      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	2b32      	cmp	r3, #50	; 0x32
    1a76:	d116      	bne.n	1aa6 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1a78:	2380      	movs	r3, #128	; 0x80
    1a7a:	18f9      	adds	r1, r7, r3
    1a7c:	6838      	ldr	r0, [r7, #0]
    1a7e:	2300      	movs	r3, #0
    1a80:	2214      	movs	r2, #20
    1a82:	4c9b      	ldr	r4, [pc, #620]	; (1cf0 <m2m_wifi_cb+0x340>)
    1a84:	47a0      	blx	r4
    1a86:	1e03      	subs	r3, r0, #0
    1a88:	d000      	beq.n	1a8c <m2m_wifi_cb+0xdc>
    1a8a:	e154      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1a8c:	4b99      	ldr	r3, [pc, #612]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d100      	bne.n	1a96 <m2m_wifi_cb+0xe6>
    1a94:	e14f      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1a96:	4b97      	ldr	r3, [pc, #604]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	2280      	movs	r2, #128	; 0x80
    1a9c:	18ba      	adds	r2, r7, r2
    1a9e:	0011      	movs	r1, r2
    1aa0:	2032      	movs	r0, #50	; 0x32
    1aa2:	4798      	blx	r3
}
    1aa4:	e147      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1aa6:	1dfb      	adds	r3, r7, #7
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	2b2f      	cmp	r3, #47	; 0x2f
    1aac:	d11d      	bne.n	1aea <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1aae:	2308      	movs	r3, #8
    1ab0:	18fb      	adds	r3, r7, r3
    1ab2:	2264      	movs	r2, #100	; 0x64
    1ab4:	2100      	movs	r1, #0
    1ab6:	0018      	movs	r0, r3
    1ab8:	4b8f      	ldr	r3, [pc, #572]	; (1cf8 <m2m_wifi_cb+0x348>)
    1aba:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1abc:	2308      	movs	r3, #8
    1abe:	18f9      	adds	r1, r7, r3
    1ac0:	6838      	ldr	r0, [r7, #0]
    1ac2:	2300      	movs	r3, #0
    1ac4:	2264      	movs	r2, #100	; 0x64
    1ac6:	4c8a      	ldr	r4, [pc, #552]	; (1cf0 <m2m_wifi_cb+0x340>)
    1ac8:	47a0      	blx	r4
    1aca:	1e03      	subs	r3, r0, #0
    1acc:	d000      	beq.n	1ad0 <m2m_wifi_cb+0x120>
    1ace:	e132      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1ad0:	4b88      	ldr	r3, [pc, #544]	; (1cf4 <m2m_wifi_cb+0x344>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d100      	bne.n	1ada <m2m_wifi_cb+0x12a>
    1ad8:	e12d      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1ada:	4b86      	ldr	r3, [pc, #536]	; (1cf4 <m2m_wifi_cb+0x344>)
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	2208      	movs	r2, #8
    1ae0:	18ba      	adds	r2, r7, r2
    1ae2:	0011      	movs	r1, r2
    1ae4:	202f      	movs	r0, #47	; 0x2f
    1ae6:	4798      	blx	r3
}
    1ae8:	e125      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1aea:	1dfb      	adds	r3, r7, #7
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	2b34      	cmp	r3, #52	; 0x34
    1af0:	d12e      	bne.n	1b50 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1af2:	237c      	movs	r3, #124	; 0x7c
    1af4:	18f9      	adds	r1, r7, r3
    1af6:	6838      	ldr	r0, [r7, #0]
    1af8:	2300      	movs	r3, #0
    1afa:	2204      	movs	r2, #4
    1afc:	4c7c      	ldr	r4, [pc, #496]	; (1cf0 <m2m_wifi_cb+0x340>)
    1afe:	47a0      	blx	r4
    1b00:	1e03      	subs	r3, r0, #0
    1b02:	d000      	beq.n	1b06 <m2m_wifi_cb+0x156>
    1b04:	e117      	b.n	1d36 <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1b06:	4b7d      	ldr	r3, [pc, #500]	; (1cfc <m2m_wifi_cb+0x34c>)
    1b08:	0018      	movs	r0, r3
    1b0a:	4b7d      	ldr	r3, [pc, #500]	; (1d00 <m2m_wifi_cb+0x350>)
    1b0c:	4798      	blx	r3
    1b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b10:	0e1b      	lsrs	r3, r3, #24
    1b12:	b2db      	uxtb	r3, r3
    1b14:	0019      	movs	r1, r3
    1b16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b18:	0c1b      	lsrs	r3, r3, #16
    1b1a:	b2db      	uxtb	r3, r3
    1b1c:	001a      	movs	r2, r3
    1b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b20:	0a1b      	lsrs	r3, r3, #8
    1b22:	b2db      	uxtb	r3, r3
    1b24:	001c      	movs	r4, r3
    1b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b28:	b2db      	uxtb	r3, r3
    1b2a:	4876      	ldr	r0, [pc, #472]	; (1d04 <m2m_wifi_cb+0x354>)
    1b2c:	9300      	str	r3, [sp, #0]
    1b2e:	0023      	movs	r3, r4
    1b30:	4c73      	ldr	r4, [pc, #460]	; (1d00 <m2m_wifi_cb+0x350>)
    1b32:	47a0      	blx	r4
    1b34:	200d      	movs	r0, #13
    1b36:	4b74      	ldr	r3, [pc, #464]	; (1d08 <m2m_wifi_cb+0x358>)
    1b38:	4798      	blx	r3
			if (gpfAppWifiCb)
    1b3a:	4b6e      	ldr	r3, [pc, #440]	; (1cf4 <m2m_wifi_cb+0x344>)
    1b3c:	681b      	ldr	r3, [r3, #0]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d100      	bne.n	1b44 <m2m_wifi_cb+0x194>
    1b42:	e0f8      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1b44:	4b6b      	ldr	r3, [pc, #428]	; (1cf4 <m2m_wifi_cb+0x344>)
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	2100      	movs	r1, #0
    1b4a:	2034      	movs	r0, #52	; 0x34
    1b4c:	4798      	blx	r3
}
    1b4e:	e0f2      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1b50:	1dfb      	adds	r3, r7, #7
    1b52:	781b      	ldrb	r3, [r3, #0]
    1b54:	2b11      	cmp	r3, #17
    1b56:	d11e      	bne.n	1b96 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    1b58:	4b6c      	ldr	r3, [pc, #432]	; (1d0c <m2m_wifi_cb+0x35c>)
    1b5a:	2200      	movs	r2, #0
    1b5c:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1b5e:	2378      	movs	r3, #120	; 0x78
    1b60:	18f9      	adds	r1, r7, r3
    1b62:	6838      	ldr	r0, [r7, #0]
    1b64:	2300      	movs	r3, #0
    1b66:	2204      	movs	r2, #4
    1b68:	4c61      	ldr	r4, [pc, #388]	; (1cf0 <m2m_wifi_cb+0x340>)
    1b6a:	47a0      	blx	r4
    1b6c:	1e03      	subs	r3, r0, #0
    1b6e:	d000      	beq.n	1b72 <m2m_wifi_cb+0x1c2>
    1b70:	e0e1      	b.n	1d36 <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    1b72:	2378      	movs	r3, #120	; 0x78
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	781a      	ldrb	r2, [r3, #0]
    1b78:	4b65      	ldr	r3, [pc, #404]	; (1d10 <m2m_wifi_cb+0x360>)
    1b7a:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1b7c:	4b5d      	ldr	r3, [pc, #372]	; (1cf4 <m2m_wifi_cb+0x344>)
    1b7e:	681b      	ldr	r3, [r3, #0]
    1b80:	2b00      	cmp	r3, #0
    1b82:	d100      	bne.n	1b86 <m2m_wifi_cb+0x1d6>
    1b84:	e0d7      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1b86:	4b5b      	ldr	r3, [pc, #364]	; (1cf4 <m2m_wifi_cb+0x344>)
    1b88:	681b      	ldr	r3, [r3, #0]
    1b8a:	2278      	movs	r2, #120	; 0x78
    1b8c:	18ba      	adds	r2, r7, r2
    1b8e:	0011      	movs	r1, r2
    1b90:	2011      	movs	r0, #17
    1b92:	4798      	blx	r3
}
    1b94:	e0cf      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1b96:	1dfb      	adds	r3, r7, #7
    1b98:	781b      	ldrb	r3, [r3, #0]
    1b9a:	2b13      	cmp	r3, #19
    1b9c:	d116      	bne.n	1bcc <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1b9e:	2308      	movs	r3, #8
    1ba0:	18f9      	adds	r1, r7, r3
    1ba2:	6838      	ldr	r0, [r7, #0]
    1ba4:	2300      	movs	r3, #0
    1ba6:	222c      	movs	r2, #44	; 0x2c
    1ba8:	4c51      	ldr	r4, [pc, #324]	; (1cf0 <m2m_wifi_cb+0x340>)
    1baa:	47a0      	blx	r4
    1bac:	1e03      	subs	r3, r0, #0
    1bae:	d000      	beq.n	1bb2 <m2m_wifi_cb+0x202>
    1bb0:	e0c1      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1bb2:	4b50      	ldr	r3, [pc, #320]	; (1cf4 <m2m_wifi_cb+0x344>)
    1bb4:	681b      	ldr	r3, [r3, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d100      	bne.n	1bbc <m2m_wifi_cb+0x20c>
    1bba:	e0bc      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1bbc:	4b4d      	ldr	r3, [pc, #308]	; (1cf4 <m2m_wifi_cb+0x344>)
    1bbe:	681b      	ldr	r3, [r3, #0]
    1bc0:	2208      	movs	r2, #8
    1bc2:	18ba      	adds	r2, r7, r2
    1bc4:	0011      	movs	r1, r2
    1bc6:	2013      	movs	r0, #19
    1bc8:	4798      	blx	r3
}
    1bca:	e0b4      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1bcc:	1dfb      	adds	r3, r7, #7
    1bce:	781b      	ldrb	r3, [r3, #0]
    1bd0:	2b04      	cmp	r3, #4
    1bd2:	d116      	bne.n	1c02 <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1bd4:	23a0      	movs	r3, #160	; 0xa0
    1bd6:	18f9      	adds	r1, r7, r3
    1bd8:	6838      	ldr	r0, [r7, #0]
    1bda:	2300      	movs	r3, #0
    1bdc:	2204      	movs	r2, #4
    1bde:	4c44      	ldr	r4, [pc, #272]	; (1cf0 <m2m_wifi_cb+0x340>)
    1be0:	47a0      	blx	r4
    1be2:	1e03      	subs	r3, r0, #0
    1be4:	d000      	beq.n	1be8 <m2m_wifi_cb+0x238>
    1be6:	e0a6      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1be8:	4b42      	ldr	r3, [pc, #264]	; (1cf4 <m2m_wifi_cb+0x344>)
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	2b00      	cmp	r3, #0
    1bee:	d100      	bne.n	1bf2 <m2m_wifi_cb+0x242>
    1bf0:	e0a1      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1bf2:	4b40      	ldr	r3, [pc, #256]	; (1cf4 <m2m_wifi_cb+0x344>)
    1bf4:	681b      	ldr	r3, [r3, #0]
    1bf6:	22a0      	movs	r2, #160	; 0xa0
    1bf8:	18ba      	adds	r2, r7, r2
    1bfa:	0011      	movs	r1, r2
    1bfc:	2004      	movs	r0, #4
    1bfe:	4798      	blx	r3
}
    1c00:	e099      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1c02:	1dfb      	adds	r3, r7, #7
    1c04:	781b      	ldrb	r3, [r3, #0]
    1c06:	2b65      	cmp	r3, #101	; 0x65
    1c08:	d116      	bne.n	1c38 <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c0a:	23a0      	movs	r3, #160	; 0xa0
    1c0c:	18f9      	adds	r1, r7, r3
    1c0e:	6838      	ldr	r0, [r7, #0]
    1c10:	2300      	movs	r3, #0
    1c12:	2204      	movs	r2, #4
    1c14:	4c36      	ldr	r4, [pc, #216]	; (1cf0 <m2m_wifi_cb+0x340>)
    1c16:	47a0      	blx	r4
    1c18:	1e03      	subs	r3, r0, #0
    1c1a:	d000      	beq.n	1c1e <m2m_wifi_cb+0x26e>
    1c1c:	e08b      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1c1e:	4b35      	ldr	r3, [pc, #212]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c20:	681b      	ldr	r3, [r3, #0]
    1c22:	2b00      	cmp	r3, #0
    1c24:	d100      	bne.n	1c28 <m2m_wifi_cb+0x278>
    1c26:	e086      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1c28:	4b32      	ldr	r3, [pc, #200]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	22a0      	movs	r2, #160	; 0xa0
    1c2e:	18ba      	adds	r2, r7, r2
    1c30:	0011      	movs	r1, r2
    1c32:	2065      	movs	r0, #101	; 0x65
    1c34:	4798      	blx	r3
}
    1c36:	e07e      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1c38:	1dfb      	adds	r3, r7, #7
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	2b09      	cmp	r3, #9
    1c3e:	d116      	bne.n	1c6e <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1c40:	2308      	movs	r3, #8
    1c42:	18f9      	adds	r1, r7, r3
    1c44:	6838      	ldr	r0, [r7, #0]
    1c46:	2301      	movs	r3, #1
    1c48:	2264      	movs	r2, #100	; 0x64
    1c4a:	4c29      	ldr	r4, [pc, #164]	; (1cf0 <m2m_wifi_cb+0x340>)
    1c4c:	47a0      	blx	r4
    1c4e:	1e03      	subs	r3, r0, #0
    1c50:	d000      	beq.n	1c54 <m2m_wifi_cb+0x2a4>
    1c52:	e070      	b.n	1d36 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1c54:	4b27      	ldr	r3, [pc, #156]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d100      	bne.n	1c5e <m2m_wifi_cb+0x2ae>
    1c5c:	e06b      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1c5e:	4b25      	ldr	r3, [pc, #148]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c60:	681b      	ldr	r3, [r3, #0]
    1c62:	2208      	movs	r2, #8
    1c64:	18ba      	adds	r2, r7, r2
    1c66:	0011      	movs	r1, r2
    1c68:	2009      	movs	r0, #9
    1c6a:	4798      	blx	r3
}
    1c6c:	e063      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1c6e:	1dfb      	adds	r3, r7, #7
    1c70:	781b      	ldrb	r3, [r3, #0]
    1c72:	2b2a      	cmp	r3, #42	; 0x2a
    1c74:	d114      	bne.n	1ca0 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1c76:	2374      	movs	r3, #116	; 0x74
    1c78:	18f9      	adds	r1, r7, r3
    1c7a:	6838      	ldr	r0, [r7, #0]
    1c7c:	2301      	movs	r3, #1
    1c7e:	2204      	movs	r2, #4
    1c80:	4c1b      	ldr	r4, [pc, #108]	; (1cf0 <m2m_wifi_cb+0x340>)
    1c82:	47a0      	blx	r4
    1c84:	1e03      	subs	r3, r0, #0
    1c86:	d156      	bne.n	1d36 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1c88:	4b1a      	ldr	r3, [pc, #104]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d052      	beq.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1c90:	4b18      	ldr	r3, [pc, #96]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	2274      	movs	r2, #116	; 0x74
    1c96:	18ba      	adds	r2, r7, r2
    1c98:	0011      	movs	r1, r2
    1c9a:	202a      	movs	r0, #42	; 0x2a
    1c9c:	4798      	blx	r3
}
    1c9e:	e04a      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1ca0:	1dfb      	adds	r3, r7, #7
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	2b20      	cmp	r3, #32
    1ca6:	d135      	bne.n	1d14 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1ca8:	236c      	movs	r3, #108	; 0x6c
    1caa:	18f9      	adds	r1, r7, r3
    1cac:	6838      	ldr	r0, [r7, #0]
    1cae:	2300      	movs	r3, #0
    1cb0:	2208      	movs	r2, #8
    1cb2:	4c0f      	ldr	r4, [pc, #60]	; (1cf0 <m2m_wifi_cb+0x340>)
    1cb4:	47a0      	blx	r4
    1cb6:	1e03      	subs	r3, r0, #0
    1cb8:	d13d      	bne.n	1d36 <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1cba:	683b      	ldr	r3, [r7, #0]
    1cbc:	3308      	adds	r3, #8
    1cbe:	0018      	movs	r0, r3
    1cc0:	236c      	movs	r3, #108	; 0x6c
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	6819      	ldr	r1, [r3, #0]
    1cc6:	236c      	movs	r3, #108	; 0x6c
    1cc8:	18fb      	adds	r3, r7, r3
    1cca:	889a      	ldrh	r2, [r3, #4]
    1ccc:	2301      	movs	r3, #1
    1cce:	4c08      	ldr	r4, [pc, #32]	; (1cf0 <m2m_wifi_cb+0x340>)
    1cd0:	47a0      	blx	r4
    1cd2:	1e03      	subs	r3, r0, #0
    1cd4:	d12f      	bne.n	1d36 <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    1cd6:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <m2m_wifi_cb+0x344>)
    1cd8:	681b      	ldr	r3, [r3, #0]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d02b      	beq.n	1d36 <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1cde:	4b05      	ldr	r3, [pc, #20]	; (1cf4 <m2m_wifi_cb+0x344>)
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	226c      	movs	r2, #108	; 0x6c
    1ce4:	18ba      	adds	r2, r7, r2
    1ce6:	0011      	movs	r1, r2
    1ce8:	2020      	movs	r0, #32
    1cea:	4798      	blx	r3
}
    1cec:	e023      	b.n	1d36 <m2m_wifi_cb+0x386>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	00001775 	.word	0x00001775
    1cf4:	20000274 	.word	0x20000274
    1cf8:	00000c21 	.word	0x00000c21
    1cfc:	00013d28 	.word	0x00013d28
    1d00:	0000f0ad 	.word	0x0000f0ad
    1d04:	00013d34 	.word	0x00013d34
    1d08:	0000f0e1 	.word	0x0000f0e1
    1d0c:	20000271 	.word	0x20000271
    1d10:	20000270 	.word	0x20000270
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1d14:	2395      	movs	r3, #149	; 0x95
    1d16:	005a      	lsls	r2, r3, #1
    1d18:	4909      	ldr	r1, [pc, #36]	; (1d40 <m2m_wifi_cb+0x390>)
    1d1a:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <m2m_wifi_cb+0x394>)
    1d1c:	0018      	movs	r0, r3
    1d1e:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <m2m_wifi_cb+0x398>)
    1d20:	4798      	blx	r3
    1d22:	1dfb      	adds	r3, r7, #7
    1d24:	781a      	ldrb	r2, [r3, #0]
    1d26:	4b09      	ldr	r3, [pc, #36]	; (1d4c <m2m_wifi_cb+0x39c>)
    1d28:	0011      	movs	r1, r2
    1d2a:	0018      	movs	r0, r3
    1d2c:	4b06      	ldr	r3, [pc, #24]	; (1d48 <m2m_wifi_cb+0x398>)
    1d2e:	4798      	blx	r3
    1d30:	200d      	movs	r0, #13
    1d32:	4b07      	ldr	r3, [pc, #28]	; (1d50 <m2m_wifi_cb+0x3a0>)
    1d34:	4798      	blx	r3
}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	46bd      	mov	sp, r7
    1d3a:	b02b      	add	sp, #172	; 0xac
    1d3c:	bd90      	pop	{r4, r7, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	000140dc 	.word	0x000140dc
    1d44:	00013d54 	.word	0x00013d54
    1d48:	0000f0ad 	.word	0x0000f0ad
    1d4c:	00013d68 	.word	0x00013d68
    1d50:	0000f0e1 	.word	0x0000f0e1

00001d54 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1d54:	b590      	push	{r4, r7, lr}
    1d56:	b091      	sub	sp, #68	; 0x44
    1d58:	af02      	add	r7, sp, #8
    1d5a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    1d5c:	2337      	movs	r3, #55	; 0x37
    1d5e:	18fb      	adds	r3, r7, r3
    1d60:	2200      	movs	r2, #0
    1d62:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1d64:	230b      	movs	r3, #11
    1d66:	18fb      	adds	r3, r7, r3
    1d68:	2201      	movs	r2, #1
    1d6a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d104      	bne.n	1d7c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1d72:	2337      	movs	r3, #55	; 0x37
    1d74:	18fb      	adds	r3, r7, r3
    1d76:	22f4      	movs	r2, #244	; 0xf4
    1d78:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    1d7a:	e0ad      	b.n	1ed8 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	681a      	ldr	r2, [r3, #0]
    1d80:	4b59      	ldr	r3, [pc, #356]	; (1ee8 <m2m_wifi_init+0x194>)
    1d82:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1d84:	4b59      	ldr	r3, [pc, #356]	; (1eec <m2m_wifi_init+0x198>)
    1d86:	2200      	movs	r2, #0
    1d88:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1d8a:	2337      	movs	r3, #55	; 0x37
    1d8c:	18fc      	adds	r4, r7, r3
    1d8e:	230b      	movs	r3, #11
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	0018      	movs	r0, r3
    1d94:	4b56      	ldr	r3, [pc, #344]	; (1ef0 <m2m_wifi_init+0x19c>)
    1d96:	4798      	blx	r3
    1d98:	0003      	movs	r3, r0
    1d9a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1d9c:	2337      	movs	r3, #55	; 0x37
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	b25b      	sxtb	r3, r3
    1da4:	2b00      	cmp	r3, #0
    1da6:	d000      	beq.n	1daa <m2m_wifi_init+0x56>
    1da8:	e093      	b.n	1ed2 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1daa:	2337      	movs	r3, #55	; 0x37
    1dac:	18fc      	adds	r4, r7, r3
    1dae:	2000      	movs	r0, #0
    1db0:	4b50      	ldr	r3, [pc, #320]	; (1ef4 <m2m_wifi_init+0x1a0>)
    1db2:	4798      	blx	r3
    1db4:	0003      	movs	r3, r0
    1db6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1db8:	2337      	movs	r3, #55	; 0x37
    1dba:	18fb      	adds	r3, r7, r3
    1dbc:	781b      	ldrb	r3, [r3, #0]
    1dbe:	b25b      	sxtb	r3, r3
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d000      	beq.n	1dc6 <m2m_wifi_init+0x72>
    1dc4:	e080      	b.n	1ec8 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1dc6:	4b4c      	ldr	r3, [pc, #304]	; (1ef8 <m2m_wifi_init+0x1a4>)
    1dc8:	0019      	movs	r1, r3
    1dca:	2001      	movs	r0, #1
    1dcc:	4b4b      	ldr	r3, [pc, #300]	; (1efc <m2m_wifi_init+0x1a8>)
    1dce:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    1dd0:	2337      	movs	r3, #55	; 0x37
    1dd2:	18fc      	adds	r4, r7, r3
    1dd4:	230c      	movs	r3, #12
    1dd6:	18fb      	adds	r3, r7, r3
    1dd8:	0018      	movs	r0, r3
    1dda:	4b49      	ldr	r3, [pc, #292]	; (1f00 <m2m_wifi_init+0x1ac>)
    1ddc:	4798      	blx	r3
    1dde:	0003      	movs	r3, r0
    1de0:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1de2:	4b48      	ldr	r3, [pc, #288]	; (1f04 <m2m_wifi_init+0x1b0>)
    1de4:	0018      	movs	r0, r3
    1de6:	4b48      	ldr	r3, [pc, #288]	; (1f08 <m2m_wifi_init+0x1b4>)
    1de8:	4798      	blx	r3
    1dea:	230c      	movs	r3, #12
    1dec:	18fb      	adds	r3, r7, r3
    1dee:	791b      	ldrb	r3, [r3, #4]
    1df0:	0019      	movs	r1, r3
    1df2:	230c      	movs	r3, #12
    1df4:	18fb      	adds	r3, r7, r3
    1df6:	795b      	ldrb	r3, [r3, #5]
    1df8:	001a      	movs	r2, r3
    1dfa:	230c      	movs	r3, #12
    1dfc:	18fb      	adds	r3, r7, r3
    1dfe:	799b      	ldrb	r3, [r3, #6]
    1e00:	001c      	movs	r4, r3
    1e02:	230c      	movs	r3, #12
    1e04:	18fb      	adds	r3, r7, r3
    1e06:	8c1b      	ldrh	r3, [r3, #32]
    1e08:	4840      	ldr	r0, [pc, #256]	; (1f0c <m2m_wifi_init+0x1b8>)
    1e0a:	9300      	str	r3, [sp, #0]
    1e0c:	0023      	movs	r3, r4
    1e0e:	4c3e      	ldr	r4, [pc, #248]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e10:	47a0      	blx	r4
    1e12:	200d      	movs	r0, #13
    1e14:	4b3e      	ldr	r3, [pc, #248]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e16:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1e18:	4b3a      	ldr	r3, [pc, #232]	; (1f04 <m2m_wifi_init+0x1b0>)
    1e1a:	0018      	movs	r0, r3
    1e1c:	4b3a      	ldr	r3, [pc, #232]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e1e:	4798      	blx	r3
    1e20:	230c      	movs	r3, #12
    1e22:	18fb      	adds	r3, r7, r3
    1e24:	3316      	adds	r3, #22
    1e26:	001a      	movs	r2, r3
    1e28:	230c      	movs	r3, #12
    1e2a:	18fb      	adds	r3, r7, r3
    1e2c:	330a      	adds	r3, #10
    1e2e:	0019      	movs	r1, r3
    1e30:	4b38      	ldr	r3, [pc, #224]	; (1f14 <m2m_wifi_init+0x1c0>)
    1e32:	0018      	movs	r0, r3
    1e34:	4b34      	ldr	r3, [pc, #208]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e36:	4798      	blx	r3
    1e38:	200d      	movs	r0, #13
    1e3a:	4b35      	ldr	r3, [pc, #212]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e3c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1e3e:	4b31      	ldr	r3, [pc, #196]	; (1f04 <m2m_wifi_init+0x1b0>)
    1e40:	0018      	movs	r0, r3
    1e42:	4b31      	ldr	r3, [pc, #196]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e44:	4798      	blx	r3
    1e46:	230c      	movs	r3, #12
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	79db      	ldrb	r3, [r3, #7]
    1e4c:	0019      	movs	r1, r3
    1e4e:	230c      	movs	r3, #12
    1e50:	18fb      	adds	r3, r7, r3
    1e52:	7a1b      	ldrb	r3, [r3, #8]
    1e54:	001a      	movs	r2, r3
    1e56:	230c      	movs	r3, #12
    1e58:	18fb      	adds	r3, r7, r3
    1e5a:	7a5b      	ldrb	r3, [r3, #9]
    1e5c:	482e      	ldr	r0, [pc, #184]	; (1f18 <m2m_wifi_init+0x1c4>)
    1e5e:	4c2a      	ldr	r4, [pc, #168]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e60:	47a0      	blx	r4
    1e62:	200d      	movs	r0, #13
    1e64:	4b2a      	ldr	r3, [pc, #168]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e66:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1e68:	4b26      	ldr	r3, [pc, #152]	; (1f04 <m2m_wifi_init+0x1b0>)
    1e6a:	0018      	movs	r0, r3
    1e6c:	4b26      	ldr	r3, [pc, #152]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e6e:	4798      	blx	r3
    1e70:	482a      	ldr	r0, [pc, #168]	; (1f1c <m2m_wifi_init+0x1c8>)
    1e72:	2302      	movs	r3, #2
    1e74:	2205      	movs	r2, #5
    1e76:	2113      	movs	r1, #19
    1e78:	4c23      	ldr	r4, [pc, #140]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e7a:	47a0      	blx	r4
    1e7c:	200d      	movs	r0, #13
    1e7e:	4b24      	ldr	r3, [pc, #144]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e80:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1e82:	4b20      	ldr	r3, [pc, #128]	; (1f04 <m2m_wifi_init+0x1b0>)
    1e84:	0018      	movs	r0, r3
    1e86:	4b20      	ldr	r3, [pc, #128]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e88:	4798      	blx	r3
    1e8a:	4a25      	ldr	r2, [pc, #148]	; (1f20 <m2m_wifi_init+0x1cc>)
    1e8c:	4925      	ldr	r1, [pc, #148]	; (1f24 <m2m_wifi_init+0x1d0>)
    1e8e:	4b26      	ldr	r3, [pc, #152]	; (1f28 <m2m_wifi_init+0x1d4>)
    1e90:	0018      	movs	r0, r3
    1e92:	4b1d      	ldr	r3, [pc, #116]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e94:	4798      	blx	r3
    1e96:	200d      	movs	r0, #13
    1e98:	4b1d      	ldr	r3, [pc, #116]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e9a:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1e9c:	2337      	movs	r3, #55	; 0x37
    1e9e:	18fb      	adds	r3, r7, r3
    1ea0:	781b      	ldrb	r3, [r3, #0]
    1ea2:	b25b      	sxtb	r3, r3
    1ea4:	330d      	adds	r3, #13
    1ea6:	d116      	bne.n	1ed6 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    1ea8:	23ee      	movs	r3, #238	; 0xee
    1eaa:	33ff      	adds	r3, #255	; 0xff
    1eac:	001a      	movs	r2, r3
    1eae:	491f      	ldr	r1, [pc, #124]	; (1f2c <m2m_wifi_init+0x1d8>)
    1eb0:	4b1f      	ldr	r3, [pc, #124]	; (1f30 <m2m_wifi_init+0x1dc>)
    1eb2:	0018      	movs	r0, r3
    1eb4:	4b14      	ldr	r3, [pc, #80]	; (1f08 <m2m_wifi_init+0x1b4>)
    1eb6:	4798      	blx	r3
    1eb8:	4b1e      	ldr	r3, [pc, #120]	; (1f34 <m2m_wifi_init+0x1e0>)
    1eba:	0018      	movs	r0, r3
    1ebc:	4b1e      	ldr	r3, [pc, #120]	; (1f38 <m2m_wifi_init+0x1e4>)
    1ebe:	4798      	blx	r3
    1ec0:	200d      	movs	r0, #13
    1ec2:	4b13      	ldr	r3, [pc, #76]	; (1f10 <m2m_wifi_init+0x1bc>)
    1ec4:	4798      	blx	r3
	}

	goto _EXIT0;
    1ec6:	e006      	b.n	1ed6 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1ec8:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    1eca:	2000      	movs	r0, #0
    1ecc:	4b1b      	ldr	r3, [pc, #108]	; (1f3c <m2m_wifi_init+0x1e8>)
    1ece:	4798      	blx	r3
    1ed0:	e002      	b.n	1ed8 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	e000      	b.n	1ed8 <m2m_wifi_init+0x184>
	goto _EXIT0;
    1ed6:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    1ed8:	2337      	movs	r3, #55	; 0x37
    1eda:	18fb      	adds	r3, r7, r3
    1edc:	781b      	ldrb	r3, [r3, #0]
    1ede:	b25b      	sxtb	r3, r3
}
    1ee0:	0018      	movs	r0, r3
    1ee2:	46bd      	mov	sp, r7
    1ee4:	b00f      	add	sp, #60	; 0x3c
    1ee6:	bd90      	pop	{r4, r7, pc}
    1ee8:	20000274 	.word	0x20000274
    1eec:	20000271 	.word	0x20000271
    1ef0:	00003061 	.word	0x00003061
    1ef4:	00000e39 	.word	0x00000e39
    1ef8:	000019b1 	.word	0x000019b1
    1efc:	000018f5 	.word	0x000018f5
    1f00:	00002e95 	.word	0x00002e95
    1f04:	00013d28 	.word	0x00013d28
    1f08:	0000f0ad 	.word	0x0000f0ad
    1f0c:	00013ebc 	.word	0x00013ebc
    1f10:	0000f0e1 	.word	0x0000f0e1
    1f14:	00013ee4 	.word	0x00013ee4
    1f18:	00013f00 	.word	0x00013f00
    1f1c:	00013f24 	.word	0x00013f24
    1f20:	00013f3c 	.word	0x00013f3c
    1f24:	00013f48 	.word	0x00013f48
    1f28:	00013f54 	.word	0x00013f54
    1f2c:	000140e8 	.word	0x000140e8
    1f30:	00013d54 	.word	0x00013d54
    1f34:	00013f6c 	.word	0x00013f6c
    1f38:	0000f1c9 	.word	0x0000f1c9
    1f3c:	000031f5 	.word	0x000031f5

00001f40 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1f40:	b580      	push	{r7, lr}
    1f42:	b082      	sub	sp, #8
    1f44:	af00      	add	r7, sp, #0
    1f46:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    1f48:	4b03      	ldr	r3, [pc, #12]	; (1f58 <m2m_wifi_handle_events+0x18>)
    1f4a:	4798      	blx	r3
    1f4c:	0003      	movs	r3, r0
}
    1f4e:	0018      	movs	r0, r3
    1f50:	46bd      	mov	sp, r7
    1f52:	b002      	add	sp, #8
    1f54:	bd80      	pop	{r7, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	000016e5 	.word	0x000016e5

00001f5c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    1f5c:	b590      	push	{r4, r7, lr}
    1f5e:	b087      	sub	sp, #28
    1f60:	af02      	add	r7, sp, #8
    1f62:	60f8      	str	r0, [r7, #12]
    1f64:	0008      	movs	r0, r1
    1f66:	0011      	movs	r1, r2
    1f68:	607b      	str	r3, [r7, #4]
    1f6a:	230b      	movs	r3, #11
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	1c02      	adds	r2, r0, #0
    1f70:	701a      	strb	r2, [r3, #0]
    1f72:	230a      	movs	r3, #10
    1f74:	18fb      	adds	r3, r7, r3
    1f76:	1c0a      	adds	r2, r1, #0
    1f78:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1f7a:	687c      	ldr	r4, [r7, #4]
    1f7c:	230a      	movs	r3, #10
    1f7e:	18fb      	adds	r3, r7, r3
    1f80:	781a      	ldrb	r2, [r3, #0]
    1f82:	230b      	movs	r3, #11
    1f84:	18fb      	adds	r3, r7, r3
    1f86:	7819      	ldrb	r1, [r3, #0]
    1f88:	68f8      	ldr	r0, [r7, #12]
    1f8a:	2300      	movs	r3, #0
    1f8c:	9301      	str	r3, [sp, #4]
    1f8e:	2320      	movs	r3, #32
    1f90:	18fb      	adds	r3, r7, r3
    1f92:	881b      	ldrh	r3, [r3, #0]
    1f94:	9300      	str	r3, [sp, #0]
    1f96:	0023      	movs	r3, r4
    1f98:	4c03      	ldr	r4, [pc, #12]	; (1fa8 <m2m_wifi_connect+0x4c>)
    1f9a:	47a0      	blx	r4
    1f9c:	0003      	movs	r3, r0
}
    1f9e:	0018      	movs	r0, r3
    1fa0:	46bd      	mov	sp, r7
    1fa2:	b005      	add	sp, #20
    1fa4:	bd90      	pop	{r4, r7, pc}
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	00001fad 	.word	0x00001fad

00001fac <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1fac:	b5b0      	push	{r4, r5, r7, lr}
    1fae:	b0aa      	sub	sp, #168	; 0xa8
    1fb0:	af04      	add	r7, sp, #16
    1fb2:	60f8      	str	r0, [r7, #12]
    1fb4:	0008      	movs	r0, r1
    1fb6:	0011      	movs	r1, r2
    1fb8:	607b      	str	r3, [r7, #4]
    1fba:	230b      	movs	r3, #11
    1fbc:	18fb      	adds	r3, r7, r3
    1fbe:	1c02      	adds	r2, r0, #0
    1fc0:	701a      	strb	r2, [r3, #0]
    1fc2:	230a      	movs	r3, #10
    1fc4:	18fb      	adds	r3, r7, r3
    1fc6:	1c0a      	adds	r2, r1, #0
    1fc8:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    1fca:	2397      	movs	r3, #151	; 0x97
    1fcc:	18fb      	adds	r3, r7, r3
    1fce:	2200      	movs	r2, #0
    1fd0:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1fd2:	230a      	movs	r3, #10
    1fd4:	18fb      	adds	r3, r7, r3
    1fd6:	781b      	ldrb	r3, [r3, #0]
    1fd8:	2b01      	cmp	r3, #1
    1fda:	d100      	bne.n	1fde <m2m_wifi_connect_sc+0x32>
    1fdc:	e083      	b.n	20e6 <STACK_SIZE+0xe6>
	{
		if(pvAuthInfo == NULL)
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d111      	bne.n	2008 <STACK_SIZE+0x8>
		{
			M2M_ERR("Key is not valid\n");
    1fe4:	4adb      	ldr	r2, [pc, #876]	; (2354 <STACK_SIZE+0x354>)
    1fe6:	49dc      	ldr	r1, [pc, #880]	; (2358 <STACK_SIZE+0x358>)
    1fe8:	4bdc      	ldr	r3, [pc, #880]	; (235c <STACK_SIZE+0x35c>)
    1fea:	0018      	movs	r0, r3
    1fec:	4bdc      	ldr	r3, [pc, #880]	; (2360 <STACK_SIZE+0x360>)
    1fee:	4798      	blx	r3
    1ff0:	4bdc      	ldr	r3, [pc, #880]	; (2364 <STACK_SIZE+0x364>)
    1ff2:	0018      	movs	r0, r3
    1ff4:	4bdc      	ldr	r3, [pc, #880]	; (2368 <STACK_SIZE+0x368>)
    1ff6:	4798      	blx	r3
    1ff8:	200d      	movs	r0, #13
    1ffa:	4bdc      	ldr	r3, [pc, #880]	; (236c <STACK_SIZE+0x36c>)
    1ffc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ffe:	2397      	movs	r3, #151	; 0x97
    2000:	18fb      	adds	r3, r7, r3
    2002:	22f4      	movs	r2, #244	; 0xf4
    2004:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2006:	e1f5      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2008:	230a      	movs	r3, #10
    200a:	18fb      	adds	r3, r7, r3
    200c:	781b      	ldrb	r3, [r3, #0]
    200e:	2b02      	cmp	r3, #2
    2010:	d169      	bne.n	20e6 <STACK_SIZE+0xe6>
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	0018      	movs	r0, r3
    2016:	4bd6      	ldr	r3, [pc, #856]	; (2370 <STACK_SIZE+0x370>)
    2018:	4798      	blx	r3
    201a:	0003      	movs	r3, r0
    201c:	2b40      	cmp	r3, #64	; 0x40
    201e:	d162      	bne.n	20e6 <STACK_SIZE+0xe6>
		{
			uint8 i = 0;
    2020:	2396      	movs	r3, #150	; 0x96
    2022:	18fb      	adds	r3, r7, r3
    2024:	2200      	movs	r2, #0
    2026:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	2290      	movs	r2, #144	; 0x90
    202c:	18ba      	adds	r2, r7, r2
    202e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    2030:	e054      	b.n	20dc <STACK_SIZE+0xdc>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    2032:	2396      	movs	r3, #150	; 0x96
    2034:	18fb      	adds	r3, r7, r3
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	2290      	movs	r2, #144	; 0x90
    203a:	18ba      	adds	r2, r7, r2
    203c:	6812      	ldr	r2, [r2, #0]
    203e:	18d3      	adds	r3, r2, r3
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	2b2f      	cmp	r3, #47	; 0x2f
    2044:	d931      	bls.n	20aa <STACK_SIZE+0xaa>
    2046:	2396      	movs	r3, #150	; 0x96
    2048:	18fb      	adds	r3, r7, r3
    204a:	781b      	ldrb	r3, [r3, #0]
    204c:	2290      	movs	r2, #144	; 0x90
    204e:	18ba      	adds	r2, r7, r2
    2050:	6812      	ldr	r2, [r2, #0]
    2052:	18d3      	adds	r3, r2, r3
    2054:	781b      	ldrb	r3, [r3, #0]
    2056:	2b39      	cmp	r3, #57	; 0x39
    2058:	d909      	bls.n	206e <STACK_SIZE+0x6e>
    205a:	2396      	movs	r3, #150	; 0x96
    205c:	18fb      	adds	r3, r7, r3
    205e:	781b      	ldrb	r3, [r3, #0]
    2060:	2290      	movs	r2, #144	; 0x90
    2062:	18ba      	adds	r2, r7, r2
    2064:	6812      	ldr	r2, [r2, #0]
    2066:	18d3      	adds	r3, r2, r3
    2068:	781b      	ldrb	r3, [r3, #0]
    206a:	2b40      	cmp	r3, #64	; 0x40
    206c:	d91d      	bls.n	20aa <STACK_SIZE+0xaa>
    206e:	2396      	movs	r3, #150	; 0x96
    2070:	18fb      	adds	r3, r7, r3
    2072:	781b      	ldrb	r3, [r3, #0]
    2074:	2290      	movs	r2, #144	; 0x90
    2076:	18ba      	adds	r2, r7, r2
    2078:	6812      	ldr	r2, [r2, #0]
    207a:	18d3      	adds	r3, r2, r3
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	2b46      	cmp	r3, #70	; 0x46
    2080:	d909      	bls.n	2096 <STACK_SIZE+0x96>
    2082:	2396      	movs	r3, #150	; 0x96
    2084:	18fb      	adds	r3, r7, r3
    2086:	781b      	ldrb	r3, [r3, #0]
    2088:	2290      	movs	r2, #144	; 0x90
    208a:	18ba      	adds	r2, r7, r2
    208c:	6812      	ldr	r2, [r2, #0]
    208e:	18d3      	adds	r3, r2, r3
    2090:	781b      	ldrb	r3, [r3, #0]
    2092:	2b60      	cmp	r3, #96	; 0x60
    2094:	d909      	bls.n	20aa <STACK_SIZE+0xaa>
    2096:	2396      	movs	r3, #150	; 0x96
    2098:	18fb      	adds	r3, r7, r3
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	2290      	movs	r2, #144	; 0x90
    209e:	18ba      	adds	r2, r7, r2
    20a0:	6812      	ldr	r2, [r2, #0]
    20a2:	18d3      	adds	r3, r2, r3
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	2b66      	cmp	r3, #102	; 0x66
    20a8:	d911      	bls.n	20ce <STACK_SIZE+0xce>
				{
					M2M_ERR("Invalid Key\n");
    20aa:	4ab2      	ldr	r2, [pc, #712]	; (2374 <STACK_SIZE+0x374>)
    20ac:	49aa      	ldr	r1, [pc, #680]	; (2358 <STACK_SIZE+0x358>)
    20ae:	4bab      	ldr	r3, [pc, #684]	; (235c <STACK_SIZE+0x35c>)
    20b0:	0018      	movs	r0, r3
    20b2:	4bab      	ldr	r3, [pc, #684]	; (2360 <STACK_SIZE+0x360>)
    20b4:	4798      	blx	r3
    20b6:	4bb0      	ldr	r3, [pc, #704]	; (2378 <STACK_SIZE+0x378>)
    20b8:	0018      	movs	r0, r3
    20ba:	4bab      	ldr	r3, [pc, #684]	; (2368 <STACK_SIZE+0x368>)
    20bc:	4798      	blx	r3
    20be:	200d      	movs	r0, #13
    20c0:	4baa      	ldr	r3, [pc, #680]	; (236c <STACK_SIZE+0x36c>)
    20c2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    20c4:	2397      	movs	r3, #151	; 0x97
    20c6:	18fb      	adds	r3, r7, r3
    20c8:	22f4      	movs	r2, #244	; 0xf4
    20ca:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    20cc:	e192      	b.n	23f4 <STACK_SIZE+0x3f4>
				}
				i++;
    20ce:	2396      	movs	r3, #150	; 0x96
    20d0:	18fb      	adds	r3, r7, r3
    20d2:	781a      	ldrb	r2, [r3, #0]
    20d4:	2396      	movs	r3, #150	; 0x96
    20d6:	18fb      	adds	r3, r7, r3
    20d8:	3201      	adds	r2, #1
    20da:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    20dc:	2396      	movs	r3, #150	; 0x96
    20de:	18fb      	adds	r3, r7, r3
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	2b3f      	cmp	r3, #63	; 0x3f
    20e4:	d9a5      	bls.n	2032 <STACK_SIZE+0x32>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    20e6:	230b      	movs	r3, #11
    20e8:	18fb      	adds	r3, r7, r3
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d004      	beq.n	20fa <STACK_SIZE+0xfa>
    20f0:	230b      	movs	r3, #11
    20f2:	18fb      	adds	r3, r7, r3
    20f4:	781b      	ldrb	r3, [r3, #0]
    20f6:	2b20      	cmp	r3, #32
    20f8:	d911      	bls.n	211e <STACK_SIZE+0x11e>
	{
		M2M_ERR("SSID LEN INVALID\n");
    20fa:	4aa0      	ldr	r2, [pc, #640]	; (237c <STACK_SIZE+0x37c>)
    20fc:	4996      	ldr	r1, [pc, #600]	; (2358 <STACK_SIZE+0x358>)
    20fe:	4b97      	ldr	r3, [pc, #604]	; (235c <STACK_SIZE+0x35c>)
    2100:	0018      	movs	r0, r3
    2102:	4b97      	ldr	r3, [pc, #604]	; (2360 <STACK_SIZE+0x360>)
    2104:	4798      	blx	r3
    2106:	4b9e      	ldr	r3, [pc, #632]	; (2380 <STACK_SIZE+0x380>)
    2108:	0018      	movs	r0, r3
    210a:	4b97      	ldr	r3, [pc, #604]	; (2368 <STACK_SIZE+0x368>)
    210c:	4798      	blx	r3
    210e:	200d      	movs	r0, #13
    2110:	4b96      	ldr	r3, [pc, #600]	; (236c <STACK_SIZE+0x36c>)
    2112:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2114:	2397      	movs	r3, #151	; 0x97
    2116:	18fb      	adds	r3, r7, r3
    2118:	22f4      	movs	r2, #244	; 0xf4
    211a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    211c:	e16a      	b.n	23f4 <STACK_SIZE+0x3f4>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    211e:	23a8      	movs	r3, #168	; 0xa8
    2120:	18fb      	adds	r3, r7, r3
    2122:	881b      	ldrh	r3, [r3, #0]
    2124:	2b00      	cmp	r3, #0
    2126:	d004      	beq.n	2132 <STACK_SIZE+0x132>
    2128:	23a8      	movs	r3, #168	; 0xa8
    212a:	18fb      	adds	r3, r7, r3
    212c:	881b      	ldrh	r3, [r3, #0]
    212e:	2b0e      	cmp	r3, #14
    2130:	d916      	bls.n	2160 <STACK_SIZE+0x160>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2132:	23a8      	movs	r3, #168	; 0xa8
    2134:	18fb      	adds	r3, r7, r3
    2136:	881b      	ldrh	r3, [r3, #0]
    2138:	2bff      	cmp	r3, #255	; 0xff
    213a:	d011      	beq.n	2160 <STACK_SIZE+0x160>
		{
			M2M_ERR("CH INVALID\n");
    213c:	4a91      	ldr	r2, [pc, #580]	; (2384 <STACK_SIZE+0x384>)
    213e:	4986      	ldr	r1, [pc, #536]	; (2358 <STACK_SIZE+0x358>)
    2140:	4b86      	ldr	r3, [pc, #536]	; (235c <STACK_SIZE+0x35c>)
    2142:	0018      	movs	r0, r3
    2144:	4b86      	ldr	r3, [pc, #536]	; (2360 <STACK_SIZE+0x360>)
    2146:	4798      	blx	r3
    2148:	4b8f      	ldr	r3, [pc, #572]	; (2388 <STACK_SIZE+0x388>)
    214a:	0018      	movs	r0, r3
    214c:	4b86      	ldr	r3, [pc, #536]	; (2368 <STACK_SIZE+0x368>)
    214e:	4798      	blx	r3
    2150:	200d      	movs	r0, #13
    2152:	4b86      	ldr	r3, [pc, #536]	; (236c <STACK_SIZE+0x36c>)
    2154:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2156:	2397      	movs	r3, #151	; 0x97
    2158:	18fb      	adds	r3, r7, r3
    215a:	22f4      	movs	r2, #244	; 0xf4
    215c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    215e:	e149      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2160:	230b      	movs	r3, #11
    2162:	18fb      	adds	r3, r7, r3
    2164:	781a      	ldrb	r2, [r3, #0]
    2166:	68f9      	ldr	r1, [r7, #12]
    2168:	2314      	movs	r3, #20
    216a:	18fb      	adds	r3, r7, r3
    216c:	3346      	adds	r3, #70	; 0x46
    216e:	0018      	movs	r0, r3
    2170:	4b86      	ldr	r3, [pc, #536]	; (238c <STACK_SIZE+0x38c>)
    2172:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2174:	230b      	movs	r3, #11
    2176:	18fb      	adds	r3, r7, r3
    2178:	781b      	ldrb	r3, [r3, #0]
    217a:	2214      	movs	r2, #20
    217c:	18ba      	adds	r2, r7, r2
    217e:	2146      	movs	r1, #70	; 0x46
    2180:	18d3      	adds	r3, r2, r3
    2182:	185b      	adds	r3, r3, r1
    2184:	2200      	movs	r2, #0
    2186:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    2188:	2314      	movs	r3, #20
    218a:	18fb      	adds	r3, r7, r3
    218c:	22a8      	movs	r2, #168	; 0xa8
    218e:	18ba      	adds	r2, r7, r2
    2190:	2144      	movs	r1, #68	; 0x44
    2192:	8812      	ldrh	r2, [r2, #0]
    2194:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2196:	23ac      	movs	r3, #172	; 0xac
    2198:	18fb      	adds	r3, r7, r3
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	1e5a      	subs	r2, r3, #1
    219e:	4193      	sbcs	r3, r2
    21a0:	b2db      	uxtb	r3, r3
    21a2:	0019      	movs	r1, r3
    21a4:	2314      	movs	r3, #20
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	2267      	movs	r2, #103	; 0x67
    21aa:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    21ac:	2314      	movs	r3, #20
    21ae:	18fb      	adds	r3, r7, r3
    21b0:	228c      	movs	r2, #140	; 0x8c
    21b2:	18ba      	adds	r2, r7, r2
    21b4:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    21b6:	238c      	movs	r3, #140	; 0x8c
    21b8:	18fb      	adds	r3, r7, r3
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	220a      	movs	r2, #10
    21be:	18ba      	adds	r2, r7, r2
    21c0:	2141      	movs	r1, #65	; 0x41
    21c2:	7812      	ldrb	r2, [r2, #0]
    21c4:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    21c6:	230a      	movs	r3, #10
    21c8:	18fb      	adds	r3, r7, r3
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	2b03      	cmp	r3, #3
    21ce:	d000      	beq.n	21d2 <STACK_SIZE+0x1d2>
    21d0:	e07b      	b.n	22ca <STACK_SIZE+0x2ca>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	2288      	movs	r2, #136	; 0x88
    21d6:	18ba      	adds	r2, r7, r2
    21d8:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    21da:	238c      	movs	r3, #140	; 0x8c
    21dc:	18fb      	adds	r3, r7, r3
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	2284      	movs	r2, #132	; 0x84
    21e2:	18ba      	adds	r2, r7, r2
    21e4:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    21e6:	2388      	movs	r3, #136	; 0x88
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	681b      	ldr	r3, [r3, #0]
    21ec:	781b      	ldrb	r3, [r3, #0]
    21ee:	3b01      	subs	r3, #1
    21f0:	b2da      	uxtb	r2, r3
    21f2:	2384      	movs	r3, #132	; 0x84
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	681b      	ldr	r3, [r3, #0]
    21f8:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    21fa:	2384      	movs	r3, #132	; 0x84
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	681b      	ldr	r3, [r3, #0]
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	2b03      	cmp	r3, #3
    2204:	d917      	bls.n	2236 <STACK_SIZE+0x236>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    2206:	4a62      	ldr	r2, [pc, #392]	; (2390 <STACK_SIZE+0x390>)
    2208:	4953      	ldr	r1, [pc, #332]	; (2358 <STACK_SIZE+0x358>)
    220a:	4b54      	ldr	r3, [pc, #336]	; (235c <STACK_SIZE+0x35c>)
    220c:	0018      	movs	r0, r3
    220e:	4b54      	ldr	r3, [pc, #336]	; (2360 <STACK_SIZE+0x360>)
    2210:	4798      	blx	r3
    2212:	2384      	movs	r3, #132	; 0x84
    2214:	18fb      	adds	r3, r7, r3
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	001a      	movs	r2, r3
    221c:	4b5d      	ldr	r3, [pc, #372]	; (2394 <STACK_SIZE+0x394>)
    221e:	0011      	movs	r1, r2
    2220:	0018      	movs	r0, r3
    2222:	4b4f      	ldr	r3, [pc, #316]	; (2360 <STACK_SIZE+0x360>)
    2224:	4798      	blx	r3
    2226:	200d      	movs	r0, #13
    2228:	4b50      	ldr	r3, [pc, #320]	; (236c <STACK_SIZE+0x36c>)
    222a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    222c:	2397      	movs	r3, #151	; 0x97
    222e:	18fb      	adds	r3, r7, r3
    2230:	22f4      	movs	r2, #244	; 0xf4
    2232:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2234:	e0de      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2236:	2388      	movs	r3, #136	; 0x88
    2238:	18fb      	adds	r3, r7, r3
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	785b      	ldrb	r3, [r3, #1]
    223e:	3b01      	subs	r3, #1
    2240:	b2da      	uxtb	r2, r3
    2242:	2384      	movs	r3, #132	; 0x84
    2244:	18fb      	adds	r3, r7, r3
    2246:	681b      	ldr	r3, [r3, #0]
    2248:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    224a:	2384      	movs	r3, #132	; 0x84
    224c:	18fb      	adds	r3, r7, r3
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	785b      	ldrb	r3, [r3, #1]
    2252:	2b0a      	cmp	r3, #10
    2254:	d01e      	beq.n	2294 <STACK_SIZE+0x294>
    2256:	2384      	movs	r3, #132	; 0x84
    2258:	18fb      	adds	r3, r7, r3
    225a:	681b      	ldr	r3, [r3, #0]
    225c:	785b      	ldrb	r3, [r3, #1]
    225e:	2b1a      	cmp	r3, #26
    2260:	d018      	beq.n	2294 <STACK_SIZE+0x294>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2262:	2396      	movs	r3, #150	; 0x96
    2264:	009a      	lsls	r2, r3, #2
    2266:	493c      	ldr	r1, [pc, #240]	; (2358 <STACK_SIZE+0x358>)
    2268:	4b3c      	ldr	r3, [pc, #240]	; (235c <STACK_SIZE+0x35c>)
    226a:	0018      	movs	r0, r3
    226c:	4b3c      	ldr	r3, [pc, #240]	; (2360 <STACK_SIZE+0x360>)
    226e:	4798      	blx	r3
    2270:	2384      	movs	r3, #132	; 0x84
    2272:	18fb      	adds	r3, r7, r3
    2274:	681b      	ldr	r3, [r3, #0]
    2276:	785b      	ldrb	r3, [r3, #1]
    2278:	001a      	movs	r2, r3
    227a:	4b47      	ldr	r3, [pc, #284]	; (2398 <STACK_SIZE+0x398>)
    227c:	0011      	movs	r1, r2
    227e:	0018      	movs	r0, r3
    2280:	4b37      	ldr	r3, [pc, #220]	; (2360 <STACK_SIZE+0x360>)
    2282:	4798      	blx	r3
    2284:	200d      	movs	r0, #13
    2286:	4b39      	ldr	r3, [pc, #228]	; (236c <STACK_SIZE+0x36c>)
    2288:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    228a:	2397      	movs	r3, #151	; 0x97
    228c:	18fb      	adds	r3, r7, r3
    228e:	22f4      	movs	r2, #244	; 0xf4
    2290:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2292:	e0af      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    2294:	2384      	movs	r3, #132	; 0x84
    2296:	18fb      	adds	r3, r7, r3
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	1c98      	adds	r0, r3, #2
    229c:	2388      	movs	r3, #136	; 0x88
    229e:	18fb      	adds	r3, r7, r3
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	1c99      	adds	r1, r3, #2
    22a4:	2388      	movs	r3, #136	; 0x88
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	785b      	ldrb	r3, [r3, #1]
    22ac:	001a      	movs	r2, r3
    22ae:	4b37      	ldr	r3, [pc, #220]	; (238c <STACK_SIZE+0x38c>)
    22b0:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    22b2:	2388      	movs	r3, #136	; 0x88
    22b4:	18fb      	adds	r3, r7, r3
    22b6:	681b      	ldr	r3, [r3, #0]
    22b8:	785b      	ldrb	r3, [r3, #1]
    22ba:	001a      	movs	r2, r3
    22bc:	2384      	movs	r3, #132	; 0x84
    22be:	18fb      	adds	r3, r7, r3
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	189b      	adds	r3, r3, r2
    22c4:	2200      	movs	r2, #0
    22c6:	709a      	strb	r2, [r3, #2]
    22c8:	e083      	b.n	23d2 <STACK_SIZE+0x3d2>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    22ca:	230a      	movs	r3, #10
    22cc:	18fb      	adds	r3, r7, r3
    22ce:	781b      	ldrb	r3, [r3, #0]
    22d0:	2b02      	cmp	r3, #2
    22d2:	d130      	bne.n	2336 <STACK_SIZE+0x336>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    22d4:	2382      	movs	r3, #130	; 0x82
    22d6:	18fc      	adds	r4, r7, r3
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	0018      	movs	r0, r3
    22dc:	4b24      	ldr	r3, [pc, #144]	; (2370 <STACK_SIZE+0x370>)
    22de:	4798      	blx	r3
    22e0:	0003      	movs	r3, r0
    22e2:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    22e4:	2382      	movs	r3, #130	; 0x82
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	881b      	ldrh	r3, [r3, #0]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d004      	beq.n	22f8 <STACK_SIZE+0x2f8>
    22ee:	2382      	movs	r3, #130	; 0x82
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	881b      	ldrh	r3, [r3, #0]
    22f4:	2b40      	cmp	r3, #64	; 0x40
    22f6:	d911      	bls.n	231c <STACK_SIZE+0x31c>
		{
			M2M_ERR("Incorrect PSK key length\n");
    22f8:	4a28      	ldr	r2, [pc, #160]	; (239c <STACK_SIZE+0x39c>)
    22fa:	4917      	ldr	r1, [pc, #92]	; (2358 <STACK_SIZE+0x358>)
    22fc:	4b17      	ldr	r3, [pc, #92]	; (235c <STACK_SIZE+0x35c>)
    22fe:	0018      	movs	r0, r3
    2300:	4b17      	ldr	r3, [pc, #92]	; (2360 <STACK_SIZE+0x360>)
    2302:	4798      	blx	r3
    2304:	4b26      	ldr	r3, [pc, #152]	; (23a0 <STACK_SIZE+0x3a0>)
    2306:	0018      	movs	r0, r3
    2308:	4b17      	ldr	r3, [pc, #92]	; (2368 <STACK_SIZE+0x368>)
    230a:	4798      	blx	r3
    230c:	200d      	movs	r0, #13
    230e:	4b17      	ldr	r3, [pc, #92]	; (236c <STACK_SIZE+0x36c>)
    2310:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2312:	2397      	movs	r3, #151	; 0x97
    2314:	18fb      	adds	r3, r7, r3
    2316:	22f4      	movs	r2, #244	; 0xf4
    2318:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    231a:	e06b      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    231c:	238c      	movs	r3, #140	; 0x8c
    231e:	18fb      	adds	r3, r7, r3
    2320:	6818      	ldr	r0, [r3, #0]
    2322:	2382      	movs	r3, #130	; 0x82
    2324:	18fb      	adds	r3, r7, r3
    2326:	881b      	ldrh	r3, [r3, #0]
    2328:	3301      	adds	r3, #1
    232a:	001a      	movs	r2, r3
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	0019      	movs	r1, r3
    2330:	4b16      	ldr	r3, [pc, #88]	; (238c <STACK_SIZE+0x38c>)
    2332:	4798      	blx	r3
    2334:	e04d      	b.n	23d2 <STACK_SIZE+0x3d2>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    2336:	230a      	movs	r3, #10
    2338:	18fb      	adds	r3, r7, r3
    233a:	781b      	ldrb	r3, [r3, #0]
    233c:	2b04      	cmp	r3, #4
    233e:	d131      	bne.n	23a4 <STACK_SIZE+0x3a4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2340:	238c      	movs	r3, #140	; 0x8c
    2342:	18fb      	adds	r3, r7, r3
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	6879      	ldr	r1, [r7, #4]
    2348:	223e      	movs	r2, #62	; 0x3e
    234a:	0018      	movs	r0, r3
    234c:	4b0f      	ldr	r3, [pc, #60]	; (238c <STACK_SIZE+0x38c>)
    234e:	4798      	blx	r3
    2350:	e03f      	b.n	23d2 <STACK_SIZE+0x3d2>
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	0000021b 	.word	0x0000021b
    2358:	000140f8 	.word	0x000140f8
    235c:	00013d54 	.word	0x00013d54
    2360:	0000f0ad 	.word	0x0000f0ad
    2364:	00013f88 	.word	0x00013f88
    2368:	0000f1c9 	.word	0x0000f1c9
    236c:	0000f0e1 	.word	0x0000f0e1
    2370:	00000c5f 	.word	0x00000c5f
    2374:	00000227 	.word	0x00000227
    2378:	00013f9c 	.word	0x00013f9c
    237c:	00000231 	.word	0x00000231
    2380:	00013fa8 	.word	0x00013fa8
    2384:	0000023a 	.word	0x0000023a
    2388:	00013fbc 	.word	0x00013fbc
    238c:	00000be5 	.word	0x00000be5
    2390:	00000251 	.word	0x00000251
    2394:	00013fc8 	.word	0x00013fc8
    2398:	00013fe4 	.word	0x00013fe4
    239c:	00000267 	.word	0x00000267
    23a0:	00014000 	.word	0x00014000
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    23a4:	230a      	movs	r3, #10
    23a6:	18fb      	adds	r3, r7, r3
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	2b01      	cmp	r3, #1
    23ac:	d011      	beq.n	23d2 <STACK_SIZE+0x3d2>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    23ae:	4a15      	ldr	r2, [pc, #84]	; (2404 <STACK_SIZE+0x404>)
    23b0:	4915      	ldr	r1, [pc, #84]	; (2408 <STACK_SIZE+0x408>)
    23b2:	4b16      	ldr	r3, [pc, #88]	; (240c <STACK_SIZE+0x40c>)
    23b4:	0018      	movs	r0, r3
    23b6:	4b16      	ldr	r3, [pc, #88]	; (2410 <STACK_SIZE+0x410>)
    23b8:	4798      	blx	r3
    23ba:	4b16      	ldr	r3, [pc, #88]	; (2414 <STACK_SIZE+0x414>)
    23bc:	0018      	movs	r0, r3
    23be:	4b16      	ldr	r3, [pc, #88]	; (2418 <STACK_SIZE+0x418>)
    23c0:	4798      	blx	r3
    23c2:	200d      	movs	r0, #13
    23c4:	4b15      	ldr	r3, [pc, #84]	; (241c <STACK_SIZE+0x41c>)
    23c6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    23c8:	2397      	movs	r3, #151	; 0x97
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	22f4      	movs	r2, #244	; 0xf4
    23ce:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    23d0:	e010      	b.n	23f4 <STACK_SIZE+0x3f4>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    23d2:	2397      	movs	r3, #151	; 0x97
    23d4:	18fc      	adds	r4, r7, r3
    23d6:	2314      	movs	r3, #20
    23d8:	18fa      	adds	r2, r7, r3
    23da:	2300      	movs	r3, #0
    23dc:	9302      	str	r3, [sp, #8]
    23de:	2300      	movs	r3, #0
    23e0:	9301      	str	r3, [sp, #4]
    23e2:	2300      	movs	r3, #0
    23e4:	9300      	str	r3, [sp, #0]
    23e6:	236c      	movs	r3, #108	; 0x6c
    23e8:	2128      	movs	r1, #40	; 0x28
    23ea:	2001      	movs	r0, #1
    23ec:	4d0c      	ldr	r5, [pc, #48]	; (2420 <STACK_SIZE+0x420>)
    23ee:	47a8      	blx	r5
    23f0:	0003      	movs	r3, r0
    23f2:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    23f4:	2397      	movs	r3, #151	; 0x97
    23f6:	18fb      	adds	r3, r7, r3
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	b25b      	sxtb	r3, r3
}
    23fc:	0018      	movs	r0, r3
    23fe:	46bd      	mov	sp, r7
    2400:	b026      	add	sp, #152	; 0x98
    2402:	bdb0      	pop	{r4, r5, r7, pc}
    2404:	00000277 	.word	0x00000277
    2408:	000140f8 	.word	0x000140f8
    240c:	00013d54 	.word	0x00013d54
    2410:	0000f0ad 	.word	0x0000f0ad
    2414:	0001401c 	.word	0x0001401c
    2418:	0000f1c9 	.word	0x0000f1c9
    241c:	0000f0e1 	.word	0x0000f0e1
    2420:	00000e81 	.word	0x00000e81

00002424 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    2424:	b580      	push	{r7, lr}
    2426:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    2428:	2300      	movs	r3, #0
}
    242a:	0018      	movs	r0, r3
    242c:	46bd      	mov	sp, r7
    242e:	bd80      	pop	{r7, pc}

00002430 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2430:	b590      	push	{r4, r7, lr}
    2432:	b087      	sub	sp, #28
    2434:	af00      	add	r7, sp, #0
    2436:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2438:	2317      	movs	r3, #23
    243a:	18fb      	adds	r3, r7, r3
    243c:	2200      	movs	r2, #0
    243e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2440:	687b      	ldr	r3, [r7, #4]
    2442:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2444:	693b      	ldr	r3, [r7, #16]
    2446:	2280      	movs	r2, #128	; 0x80
    2448:	0052      	lsls	r2, r2, #1
    244a:	4313      	orrs	r3, r2
    244c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    244e:	693a      	ldr	r2, [r7, #16]
    2450:	23a5      	movs	r3, #165	; 0xa5
    2452:	015b      	lsls	r3, r3, #5
    2454:	0011      	movs	r1, r2
    2456:	0018      	movs	r0, r3
    2458:	4b12      	ldr	r3, [pc, #72]	; (24a4 <chip_apply_conf+0x74>)
    245a:	4798      	blx	r3
		if(val32 != 0) {		
    245c:	693b      	ldr	r3, [r7, #16]
    245e:	2b00      	cmp	r3, #0
    2460:	d018      	beq.n	2494 <chip_apply_conf+0x64>
			uint32 reg = 0;
    2462:	2300      	movs	r3, #0
    2464:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2466:	2317      	movs	r3, #23
    2468:	18fc      	adds	r4, r7, r3
    246a:	230c      	movs	r3, #12
    246c:	18fa      	adds	r2, r7, r3
    246e:	23a5      	movs	r3, #165	; 0xa5
    2470:	015b      	lsls	r3, r3, #5
    2472:	0011      	movs	r1, r2
    2474:	0018      	movs	r0, r3
    2476:	4b0c      	ldr	r3, [pc, #48]	; (24a8 <chip_apply_conf+0x78>)
    2478:	4798      	blx	r3
    247a:	0003      	movs	r3, r0
    247c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    247e:	2317      	movs	r3, #23
    2480:	18fb      	adds	r3, r7, r3
    2482:	781b      	ldrb	r3, [r3, #0]
    2484:	b25b      	sxtb	r3, r3
    2486:	2b00      	cmp	r3, #0
    2488:	d1e1      	bne.n	244e <chip_apply_conf+0x1e>
				if(reg == val32)
    248a:	68fa      	ldr	r2, [r7, #12]
    248c:	693b      	ldr	r3, [r7, #16]
    248e:	429a      	cmp	r2, r3
    2490:	d002      	beq.n	2498 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    2492:	e7dc      	b.n	244e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    2494:	46c0      	nop			; (mov r8, r8)
    2496:	e000      	b.n	249a <chip_apply_conf+0x6a>
					break;
    2498:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    249a:	2300      	movs	r3, #0
}
    249c:	0018      	movs	r0, r3
    249e:	46bd      	mov	sp, r7
    24a0:	b007      	add	sp, #28
    24a2:	bd90      	pop	{r4, r7, pc}
    24a4:	00002c81 	.word	0x00002c81
    24a8:	00002c5d 	.word	0x00002c5d

000024ac <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    24ac:	b590      	push	{r4, r7, lr}
    24ae:	b083      	sub	sp, #12
    24b0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    24b2:	2300      	movs	r3, #0
    24b4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    24b6:	1dfb      	adds	r3, r7, #7
    24b8:	2200      	movs	r2, #0
    24ba:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    24bc:	1dfc      	adds	r4, r7, #7
    24be:	003b      	movs	r3, r7
    24c0:	4a24      	ldr	r2, [pc, #144]	; (2554 <enable_interrupts+0xa8>)
    24c2:	0019      	movs	r1, r3
    24c4:	0010      	movs	r0, r2
    24c6:	4b24      	ldr	r3, [pc, #144]	; (2558 <enable_interrupts+0xac>)
    24c8:	4798      	blx	r3
    24ca:	0003      	movs	r3, r0
    24cc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    24ce:	1dfb      	adds	r3, r7, #7
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	b25b      	sxtb	r3, r3
    24d4:	2b00      	cmp	r3, #0
    24d6:	d131      	bne.n	253c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    24d8:	683b      	ldr	r3, [r7, #0]
    24da:	2280      	movs	r2, #128	; 0x80
    24dc:	0052      	lsls	r2, r2, #1
    24de:	4313      	orrs	r3, r2
    24e0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    24e2:	683b      	ldr	r3, [r7, #0]
    24e4:	1dfc      	adds	r4, r7, #7
    24e6:	4a1b      	ldr	r2, [pc, #108]	; (2554 <enable_interrupts+0xa8>)
    24e8:	0019      	movs	r1, r3
    24ea:	0010      	movs	r0, r2
    24ec:	4b1b      	ldr	r3, [pc, #108]	; (255c <enable_interrupts+0xb0>)
    24ee:	4798      	blx	r3
    24f0:	0003      	movs	r3, r0
    24f2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    24f4:	1dfb      	adds	r3, r7, #7
    24f6:	781b      	ldrb	r3, [r3, #0]
    24f8:	b25b      	sxtb	r3, r3
    24fa:	2b00      	cmp	r3, #0
    24fc:	d120      	bne.n	2540 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    24fe:	1dfc      	adds	r4, r7, #7
    2500:	003a      	movs	r2, r7
    2502:	23d0      	movs	r3, #208	; 0xd0
    2504:	015b      	lsls	r3, r3, #5
    2506:	0011      	movs	r1, r2
    2508:	0018      	movs	r0, r3
    250a:	4b13      	ldr	r3, [pc, #76]	; (2558 <enable_interrupts+0xac>)
    250c:	4798      	blx	r3
    250e:	0003      	movs	r3, r0
    2510:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2512:	1dfb      	adds	r3, r7, #7
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	b25b      	sxtb	r3, r3
    2518:	2b00      	cmp	r3, #0
    251a:	d113      	bne.n	2544 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    251c:	683b      	ldr	r3, [r7, #0]
    251e:	2280      	movs	r2, #128	; 0x80
    2520:	0252      	lsls	r2, r2, #9
    2522:	4313      	orrs	r3, r2
    2524:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2526:	683a      	ldr	r2, [r7, #0]
    2528:	1dfc      	adds	r4, r7, #7
    252a:	23d0      	movs	r3, #208	; 0xd0
    252c:	015b      	lsls	r3, r3, #5
    252e:	0011      	movs	r1, r2
    2530:	0018      	movs	r0, r3
    2532:	4b0a      	ldr	r3, [pc, #40]	; (255c <enable_interrupts+0xb0>)
    2534:	4798      	blx	r3
    2536:	0003      	movs	r3, r0
    2538:	7023      	strb	r3, [r4, #0]
    253a:	e004      	b.n	2546 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    253c:	46c0      	nop			; (mov r8, r8)
    253e:	e002      	b.n	2546 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2540:	46c0      	nop			; (mov r8, r8)
    2542:	e000      	b.n	2546 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2544:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    2546:	1dfb      	adds	r3, r7, #7
    2548:	781b      	ldrb	r3, [r3, #0]
    254a:	b25b      	sxtb	r3, r3
}
    254c:	0018      	movs	r0, r3
    254e:	46bd      	mov	sp, r7
    2550:	b003      	add	sp, #12
    2552:	bd90      	pop	{r4, r7, pc}
    2554:	00001408 	.word	0x00001408
    2558:	00002c5d 	.word	0x00002c5d
    255c:	00002c81 	.word	0x00002c81

00002560 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2560:	b580      	push	{r7, lr}
    2562:	b082      	sub	sp, #8
    2564:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    2566:	4b32      	ldr	r3, [pc, #200]	; (2630 <nmi_get_chipid+0xd0>)
    2568:	681b      	ldr	r3, [r3, #0]
    256a:	2b00      	cmp	r3, #0
    256c:	d159      	bne.n	2622 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    256e:	4a30      	ldr	r2, [pc, #192]	; (2630 <nmi_get_chipid+0xd0>)
    2570:	2380      	movs	r3, #128	; 0x80
    2572:	015b      	lsls	r3, r3, #5
    2574:	0011      	movs	r1, r2
    2576:	0018      	movs	r0, r3
    2578:	4b2e      	ldr	r3, [pc, #184]	; (2634 <nmi_get_chipid+0xd4>)
    257a:	4798      	blx	r3
    257c:	1e03      	subs	r3, r0, #0
    257e:	d004      	beq.n	258a <nmi_get_chipid+0x2a>
			chipid = 0;
    2580:	4b2b      	ldr	r3, [pc, #172]	; (2630 <nmi_get_chipid+0xd0>)
    2582:	2200      	movs	r2, #0
    2584:	601a      	str	r2, [r3, #0]
			return 0;
    2586:	2300      	movs	r3, #0
    2588:	e04d      	b.n	2626 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    258a:	1d3b      	adds	r3, r7, #4
    258c:	4a2a      	ldr	r2, [pc, #168]	; (2638 <nmi_get_chipid+0xd8>)
    258e:	0019      	movs	r1, r3
    2590:	0010      	movs	r0, r2
    2592:	4b28      	ldr	r3, [pc, #160]	; (2634 <nmi_get_chipid+0xd4>)
    2594:	4798      	blx	r3
    2596:	1e03      	subs	r3, r0, #0
    2598:	d004      	beq.n	25a4 <nmi_get_chipid+0x44>
			chipid = 0;
    259a:	4b25      	ldr	r3, [pc, #148]	; (2630 <nmi_get_chipid+0xd0>)
    259c:	2200      	movs	r2, #0
    259e:	601a      	str	r2, [r3, #0]
			return 0;
    25a0:	2300      	movs	r3, #0
    25a2:	e040      	b.n	2626 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    25a4:	4b22      	ldr	r3, [pc, #136]	; (2630 <nmi_get_chipid+0xd0>)
    25a6:	681b      	ldr	r3, [r3, #0]
    25a8:	4a24      	ldr	r2, [pc, #144]	; (263c <nmi_get_chipid+0xdc>)
    25aa:	4293      	cmp	r3, r2
    25ac:	d106      	bne.n	25bc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    25ae:	687b      	ldr	r3, [r7, #4]
    25b0:	2b01      	cmp	r3, #1
    25b2:	d029      	beq.n	2608 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    25b4:	4b1e      	ldr	r3, [pc, #120]	; (2630 <nmi_get_chipid+0xd0>)
    25b6:	4a22      	ldr	r2, [pc, #136]	; (2640 <nmi_get_chipid+0xe0>)
    25b8:	601a      	str	r2, [r3, #0]
    25ba:	e025      	b.n	2608 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    25bc:	4b1c      	ldr	r3, [pc, #112]	; (2630 <nmi_get_chipid+0xd0>)
    25be:	681b      	ldr	r3, [r3, #0]
    25c0:	4a20      	ldr	r2, [pc, #128]	; (2644 <nmi_get_chipid+0xe4>)
    25c2:	4293      	cmp	r3, r2
    25c4:	d10d      	bne.n	25e2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	2b03      	cmp	r3, #3
    25ca:	d01d      	beq.n	2608 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	2b04      	cmp	r3, #4
    25d0:	d103      	bne.n	25da <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    25d2:	4b17      	ldr	r3, [pc, #92]	; (2630 <nmi_get_chipid+0xd0>)
    25d4:	4a1c      	ldr	r2, [pc, #112]	; (2648 <nmi_get_chipid+0xe8>)
    25d6:	601a      	str	r2, [r3, #0]
    25d8:	e016      	b.n	2608 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    25da:	4b15      	ldr	r3, [pc, #84]	; (2630 <nmi_get_chipid+0xd0>)
    25dc:	4a1b      	ldr	r2, [pc, #108]	; (264c <nmi_get_chipid+0xec>)
    25de:	601a      	str	r2, [r3, #0]
    25e0:	e012      	b.n	2608 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    25e2:	4b13      	ldr	r3, [pc, #76]	; (2630 <nmi_get_chipid+0xd0>)
    25e4:	681b      	ldr	r3, [r3, #0]
    25e6:	4a1a      	ldr	r2, [pc, #104]	; (2650 <nmi_get_chipid+0xf0>)
    25e8:	4293      	cmp	r3, r2
    25ea:	d10d      	bne.n	2608 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    25ec:	4a10      	ldr	r2, [pc, #64]	; (2630 <nmi_get_chipid+0xd0>)
    25ee:	23ec      	movs	r3, #236	; 0xec
    25f0:	039b      	lsls	r3, r3, #14
    25f2:	0011      	movs	r1, r2
    25f4:	0018      	movs	r0, r3
    25f6:	4b0f      	ldr	r3, [pc, #60]	; (2634 <nmi_get_chipid+0xd4>)
    25f8:	4798      	blx	r3
    25fa:	1e03      	subs	r3, r0, #0
    25fc:	d004      	beq.n	2608 <nmi_get_chipid+0xa8>
			chipid = 0;
    25fe:	4b0c      	ldr	r3, [pc, #48]	; (2630 <nmi_get_chipid+0xd0>)
    2600:	2200      	movs	r2, #0
    2602:	601a      	str	r2, [r3, #0]
			return 0;
    2604:	2300      	movs	r3, #0
    2606:	e00e      	b.n	2626 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    2608:	4b09      	ldr	r3, [pc, #36]	; (2630 <nmi_get_chipid+0xd0>)
    260a:	681b      	ldr	r3, [r3, #0]
    260c:	4a11      	ldr	r2, [pc, #68]	; (2654 <nmi_get_chipid+0xf4>)
    260e:	401a      	ands	r2, r3
    2610:	4b07      	ldr	r3, [pc, #28]	; (2630 <nmi_get_chipid+0xd0>)
    2612:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    2614:	4b06      	ldr	r3, [pc, #24]	; (2630 <nmi_get_chipid+0xd0>)
    2616:	681b      	ldr	r3, [r3, #0]
    2618:	22a0      	movs	r2, #160	; 0xa0
    261a:	02d2      	lsls	r2, r2, #11
    261c:	431a      	orrs	r2, r3
    261e:	4b04      	ldr	r3, [pc, #16]	; (2630 <nmi_get_chipid+0xd0>)
    2620:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    2622:	4b03      	ldr	r3, [pc, #12]	; (2630 <nmi_get_chipid+0xd0>)
    2624:	681b      	ldr	r3, [r3, #0]
}
    2626:	0018      	movs	r0, r3
    2628:	46bd      	mov	sp, r7
    262a:	b002      	add	sp, #8
    262c:	bd80      	pop	{r7, pc}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	20000278 	.word	0x20000278
    2634:	00002c5d 	.word	0x00002c5d
    2638:	000013f4 	.word	0x000013f4
    263c:	001002a0 	.word	0x001002a0
    2640:	001002a1 	.word	0x001002a1
    2644:	001002b0 	.word	0x001002b0
    2648:	001002b1 	.word	0x001002b1
    264c:	001002b2 	.word	0x001002b2
    2650:	001000f0 	.word	0x001000f0
    2654:	fff0ffff 	.word	0xfff0ffff

00002658 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2658:	b590      	push	{r4, r7, lr}
    265a:	b083      	sub	sp, #12
    265c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    265e:	1dfb      	adds	r3, r7, #7
    2660:	2200      	movs	r2, #0
    2662:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2664:	1dfc      	adds	r4, r7, #7
    2666:	003b      	movs	r3, r7
    2668:	0019      	movs	r1, r3
    266a:	2010      	movs	r0, #16
    266c:	4b2e      	ldr	r3, [pc, #184]	; (2728 <chip_sleep+0xd0>)
    266e:	4798      	blx	r3
    2670:	0003      	movs	r3, r0
    2672:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    2674:	1dfb      	adds	r3, r7, #7
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	b25b      	sxtb	r3, r3
    267a:	2b00      	cmp	r3, #0
    267c:	d145      	bne.n	270a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    267e:	683b      	ldr	r3, [r7, #0]
    2680:	2201      	movs	r2, #1
    2682:	4013      	ands	r3, r2
    2684:	d000      	beq.n	2688 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2686:	e7ed      	b.n	2664 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    2688:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    268a:	1dfc      	adds	r4, r7, #7
    268c:	003b      	movs	r3, r7
    268e:	0019      	movs	r1, r3
    2690:	2001      	movs	r0, #1
    2692:	4b25      	ldr	r3, [pc, #148]	; (2728 <chip_sleep+0xd0>)
    2694:	4798      	blx	r3
    2696:	0003      	movs	r3, r0
    2698:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    269a:	1dfb      	adds	r3, r7, #7
    269c:	781b      	ldrb	r3, [r3, #0]
    269e:	b25b      	sxtb	r3, r3
    26a0:	2b00      	cmp	r3, #0
    26a2:	d134      	bne.n	270e <chip_sleep+0xb6>
	if(reg & NBIT1)
    26a4:	683b      	ldr	r3, [r7, #0]
    26a6:	2202      	movs	r2, #2
    26a8:	4013      	ands	r3, r2
    26aa:	d010      	beq.n	26ce <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    26ac:	683b      	ldr	r3, [r7, #0]
    26ae:	2202      	movs	r2, #2
    26b0:	4393      	bics	r3, r2
    26b2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    26b4:	683b      	ldr	r3, [r7, #0]
    26b6:	1dfc      	adds	r4, r7, #7
    26b8:	0019      	movs	r1, r3
    26ba:	2001      	movs	r0, #1
    26bc:	4b1b      	ldr	r3, [pc, #108]	; (272c <chip_sleep+0xd4>)
    26be:	4798      	blx	r3
    26c0:	0003      	movs	r3, r0
    26c2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    26c4:	1dfb      	adds	r3, r7, #7
    26c6:	781b      	ldrb	r3, [r3, #0]
    26c8:	b25b      	sxtb	r3, r3
    26ca:	2b00      	cmp	r3, #0
    26cc:	d121      	bne.n	2712 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    26ce:	1dfc      	adds	r4, r7, #7
    26d0:	003b      	movs	r3, r7
    26d2:	0019      	movs	r1, r3
    26d4:	200b      	movs	r0, #11
    26d6:	4b14      	ldr	r3, [pc, #80]	; (2728 <chip_sleep+0xd0>)
    26d8:	4798      	blx	r3
    26da:	0003      	movs	r3, r0
    26dc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    26de:	1dfb      	adds	r3, r7, #7
    26e0:	781b      	ldrb	r3, [r3, #0]
    26e2:	b25b      	sxtb	r3, r3
    26e4:	2b00      	cmp	r3, #0
    26e6:	d116      	bne.n	2716 <chip_sleep+0xbe>
	if(reg & NBIT0)
    26e8:	683b      	ldr	r3, [r7, #0]
    26ea:	2201      	movs	r2, #1
    26ec:	4013      	ands	r3, r2
    26ee:	d013      	beq.n	2718 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	2201      	movs	r2, #1
    26f4:	4393      	bics	r3, r2
    26f6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    26f8:	683b      	ldr	r3, [r7, #0]
    26fa:	1dfc      	adds	r4, r7, #7
    26fc:	0019      	movs	r1, r3
    26fe:	200b      	movs	r0, #11
    2700:	4b0a      	ldr	r3, [pc, #40]	; (272c <chip_sleep+0xd4>)
    2702:	4798      	blx	r3
    2704:	0003      	movs	r3, r0
    2706:	7023      	strb	r3, [r4, #0]
    2708:	e006      	b.n	2718 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	e004      	b.n	2718 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	e002      	b.n	2718 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	e000      	b.n	2718 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2716:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    2718:	1dfb      	adds	r3, r7, #7
    271a:	781b      	ldrb	r3, [r3, #0]
    271c:	b25b      	sxtb	r3, r3
}
    271e:	0018      	movs	r0, r3
    2720:	46bd      	mov	sp, r7
    2722:	b003      	add	sp, #12
    2724:	bd90      	pop	{r4, r7, pc}
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	00002c5d 	.word	0x00002c5d
    272c:	00002c81 	.word	0x00002c81

00002730 <chip_wake>:
sint8 chip_wake(void)
{
    2730:	b590      	push	{r4, r7, lr}
    2732:	b085      	sub	sp, #20
    2734:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2736:	230f      	movs	r3, #15
    2738:	18fb      	adds	r3, r7, r3
    273a:	2200      	movs	r2, #0
    273c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    273e:	2300      	movs	r3, #0
    2740:	607b      	str	r3, [r7, #4]
    2742:	2300      	movs	r3, #0
    2744:	603b      	str	r3, [r7, #0]
    2746:	2300      	movs	r3, #0
    2748:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    274a:	230f      	movs	r3, #15
    274c:	18fc      	adds	r4, r7, r3
    274e:	1d3b      	adds	r3, r7, #4
    2750:	0019      	movs	r1, r3
    2752:	200b      	movs	r0, #11
    2754:	4b4c      	ldr	r3, [pc, #304]	; (2888 <chip_wake+0x158>)
    2756:	4798      	blx	r3
    2758:	0003      	movs	r3, r0
    275a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    275c:	230f      	movs	r3, #15
    275e:	18fb      	adds	r3, r7, r3
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	b25b      	sxtb	r3, r3
    2764:	2b00      	cmp	r3, #0
    2766:	d000      	beq.n	276a <chip_wake+0x3a>
    2768:	e07f      	b.n	286a <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	2201      	movs	r2, #1
    276e:	4013      	ands	r3, r2
    2770:	d110      	bne.n	2794 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	2201      	movs	r2, #1
    2776:	4313      	orrs	r3, r2
    2778:	220f      	movs	r2, #15
    277a:	18bc      	adds	r4, r7, r2
    277c:	0019      	movs	r1, r3
    277e:	200b      	movs	r0, #11
    2780:	4b42      	ldr	r3, [pc, #264]	; (288c <chip_wake+0x15c>)
    2782:	4798      	blx	r3
    2784:	0003      	movs	r3, r0
    2786:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2788:	230f      	movs	r3, #15
    278a:	18fb      	adds	r3, r7, r3
    278c:	781b      	ldrb	r3, [r3, #0]
    278e:	b25b      	sxtb	r3, r3
    2790:	2b00      	cmp	r3, #0
    2792:	d16c      	bne.n	286e <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2794:	230f      	movs	r3, #15
    2796:	18fc      	adds	r4, r7, r3
    2798:	1d3b      	adds	r3, r7, #4
    279a:	0019      	movs	r1, r3
    279c:	2001      	movs	r0, #1
    279e:	4b3a      	ldr	r3, [pc, #232]	; (2888 <chip_wake+0x158>)
    27a0:	4798      	blx	r3
    27a2:	0003      	movs	r3, r0
    27a4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27a6:	230f      	movs	r3, #15
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	781b      	ldrb	r3, [r3, #0]
    27ac:	b25b      	sxtb	r3, r3
    27ae:	2b00      	cmp	r3, #0
    27b0:	d15f      	bne.n	2872 <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	2202      	movs	r2, #2
    27b6:	4013      	ands	r3, r2
    27b8:	d110      	bne.n	27dc <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	2202      	movs	r2, #2
    27be:	4313      	orrs	r3, r2
    27c0:	220f      	movs	r2, #15
    27c2:	18bc      	adds	r4, r7, r2
    27c4:	0019      	movs	r1, r3
    27c6:	2001      	movs	r0, #1
    27c8:	4b30      	ldr	r3, [pc, #192]	; (288c <chip_wake+0x15c>)
    27ca:	4798      	blx	r3
    27cc:	0003      	movs	r3, r0
    27ce:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    27d0:	230f      	movs	r3, #15
    27d2:	18fb      	adds	r3, r7, r3
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	b25b      	sxtb	r3, r3
    27d8:	2b00      	cmp	r3, #0
    27da:	d14c      	bne.n	2876 <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    27dc:	230f      	movs	r3, #15
    27de:	18fc      	adds	r4, r7, r3
    27e0:	003b      	movs	r3, r7
    27e2:	0019      	movs	r1, r3
    27e4:	200f      	movs	r0, #15
    27e6:	4b28      	ldr	r3, [pc, #160]	; (2888 <chip_wake+0x158>)
    27e8:	4798      	blx	r3
    27ea:	0003      	movs	r3, r0
    27ec:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    27ee:	230f      	movs	r3, #15
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	b25b      	sxtb	r3, r3
    27f6:	2b00      	cmp	r3, #0
    27f8:	d013      	beq.n	2822 <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    27fa:	23aa      	movs	r3, #170	; 0xaa
    27fc:	005a      	lsls	r2, r3, #1
    27fe:	4924      	ldr	r1, [pc, #144]	; (2890 <chip_wake+0x160>)
    2800:	4b24      	ldr	r3, [pc, #144]	; (2894 <chip_wake+0x164>)
    2802:	0018      	movs	r0, r3
    2804:	4b24      	ldr	r3, [pc, #144]	; (2898 <chip_wake+0x168>)
    2806:	4798      	blx	r3
    2808:	230f      	movs	r3, #15
    280a:	18fb      	adds	r3, r7, r3
    280c:	2100      	movs	r1, #0
    280e:	5659      	ldrsb	r1, [r3, r1]
    2810:	683a      	ldr	r2, [r7, #0]
    2812:	4b22      	ldr	r3, [pc, #136]	; (289c <chip_wake+0x16c>)
    2814:	0018      	movs	r0, r3
    2816:	4b20      	ldr	r3, [pc, #128]	; (2898 <chip_wake+0x168>)
    2818:	4798      	blx	r3
    281a:	200d      	movs	r0, #13
    281c:	4b20      	ldr	r3, [pc, #128]	; (28a0 <chip_wake+0x170>)
    281e:	4798      	blx	r3
			goto _WAKE_EXIT;
    2820:	e02a      	b.n	2878 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    2822:	683b      	ldr	r3, [r7, #0]
    2824:	2204      	movs	r2, #4
    2826:	4013      	ands	r3, r2
    2828:	d11b      	bne.n	2862 <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    282a:	2002      	movs	r0, #2
    282c:	4b1d      	ldr	r3, [pc, #116]	; (28a4 <chip_wake+0x174>)
    282e:	4798      	blx	r3
		trials++;
    2830:	68bb      	ldr	r3, [r7, #8]
    2832:	3301      	adds	r3, #1
    2834:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2836:	68bb      	ldr	r3, [r7, #8]
    2838:	2b04      	cmp	r3, #4
    283a:	d9cf      	bls.n	27dc <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    283c:	23af      	movs	r3, #175	; 0xaf
    283e:	005a      	lsls	r2, r3, #1
    2840:	4913      	ldr	r1, [pc, #76]	; (2890 <chip_wake+0x160>)
    2842:	4b14      	ldr	r3, [pc, #80]	; (2894 <chip_wake+0x164>)
    2844:	0018      	movs	r0, r3
    2846:	4b14      	ldr	r3, [pc, #80]	; (2898 <chip_wake+0x168>)
    2848:	4798      	blx	r3
    284a:	4b17      	ldr	r3, [pc, #92]	; (28a8 <chip_wake+0x178>)
    284c:	0018      	movs	r0, r3
    284e:	4b17      	ldr	r3, [pc, #92]	; (28ac <chip_wake+0x17c>)
    2850:	4798      	blx	r3
    2852:	200d      	movs	r0, #13
    2854:	4b12      	ldr	r3, [pc, #72]	; (28a0 <chip_wake+0x170>)
    2856:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2858:	230f      	movs	r3, #15
    285a:	18fb      	adds	r3, r7, r3
    285c:	22fc      	movs	r2, #252	; 0xfc
    285e:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    2860:	e00a      	b.n	2878 <chip_wake+0x148>
			break;
    2862:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    2864:	4b12      	ldr	r3, [pc, #72]	; (28b0 <chip_wake+0x180>)
    2866:	4798      	blx	r3
    2868:	e006      	b.n	2878 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	e004      	b.n	2878 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	e002      	b.n	2878 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	e000      	b.n	2878 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2876:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    2878:	230f      	movs	r3, #15
    287a:	18fb      	adds	r3, r7, r3
    287c:	781b      	ldrb	r3, [r3, #0]
    287e:	b25b      	sxtb	r3, r3
}
    2880:	0018      	movs	r0, r3
    2882:	46bd      	mov	sp, r7
    2884:	b005      	add	sp, #20
    2886:	bd90      	pop	{r4, r7, pc}
    2888:	00002c5d 	.word	0x00002c5d
    288c:	00002c81 	.word	0x00002c81
    2890:	00014190 	.word	0x00014190
    2894:	0001410c 	.word	0x0001410c
    2898:	0000f0ad 	.word	0x0000f0ad
    289c:	00014120 	.word	0x00014120
    28a0:	0000f0e1 	.word	0x0000f0e1
    28a4:	00000331 	.word	0x00000331
    28a8:	00014138 	.word	0x00014138
    28ac:	0000f1c9 	.word	0x0000f1c9
    28b0:	00002c1d 	.word	0x00002c1d

000028b4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b088      	sub	sp, #32
    28b8:	af00      	add	r7, sp, #0
    28ba:	0002      	movs	r2, r0
    28bc:	1dfb      	adds	r3, r7, #7
    28be:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    28c0:	2313      	movs	r3, #19
    28c2:	18fb      	adds	r3, r7, r3
    28c4:	2200      	movs	r2, #0
    28c6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    28c8:	2300      	movs	r3, #0
    28ca:	61fb      	str	r3, [r7, #28]
    28cc:	2300      	movs	r3, #0
    28ce:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    28d0:	2300      	movs	r3, #0
    28d2:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    28d4:	4b4a      	ldr	r3, [pc, #296]	; (2a00 <wait_for_bootrom+0x14c>)
    28d6:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    28d8:	2300      	movs	r3, #0
    28da:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28dc:	4b49      	ldr	r3, [pc, #292]	; (2a04 <wait_for_bootrom+0x150>)
    28de:	0018      	movs	r0, r3
    28e0:	4b49      	ldr	r3, [pc, #292]	; (2a08 <wait_for_bootrom+0x154>)
    28e2:	4798      	blx	r3
    28e4:	0003      	movs	r3, r0
    28e6:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    28e8:	69fb      	ldr	r3, [r7, #28]
    28ea:	2b00      	cmp	r3, #0
    28ec:	db03      	blt.n	28f6 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    28ee:	2001      	movs	r0, #1
    28f0:	4b46      	ldr	r3, [pc, #280]	; (2a0c <wait_for_bootrom+0x158>)
    28f2:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28f4:	e7f2      	b.n	28dc <wait_for_bootrom+0x28>
			break;
    28f6:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    28f8:	4b45      	ldr	r3, [pc, #276]	; (2a10 <wait_for_bootrom+0x15c>)
    28fa:	0018      	movs	r0, r3
    28fc:	4b42      	ldr	r3, [pc, #264]	; (2a08 <wait_for_bootrom+0x154>)
    28fe:	4798      	blx	r3
    2900:	0003      	movs	r3, r0
    2902:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    2904:	69fb      	ldr	r3, [r7, #28]
    2906:	2201      	movs	r2, #1
    2908:	4013      	ands	r3, r2
    290a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    290c:	69fb      	ldr	r3, [r7, #28]
    290e:	2b00      	cmp	r3, #0
    2910:	d112      	bne.n	2938 <wait_for_bootrom+0x84>
	{
		reg = 0;
    2912:	2300      	movs	r3, #0
    2914:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    2916:	e00b      	b.n	2930 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    2918:	2001      	movs	r0, #1
    291a:	4b3c      	ldr	r3, [pc, #240]	; (2a0c <wait_for_bootrom+0x158>)
    291c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    291e:	4b3d      	ldr	r3, [pc, #244]	; (2a14 <wait_for_bootrom+0x160>)
    2920:	0018      	movs	r0, r3
    2922:	4b39      	ldr	r3, [pc, #228]	; (2a08 <wait_for_bootrom+0x154>)
    2924:	4798      	blx	r3
    2926:	0003      	movs	r3, r0
    2928:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    292a:	69bb      	ldr	r3, [r7, #24]
    292c:	3301      	adds	r3, #1
    292e:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    2930:	69fb      	ldr	r3, [r7, #28]
    2932:	4a39      	ldr	r2, [pc, #228]	; (2a18 <wait_for_bootrom+0x164>)
    2934:	4293      	cmp	r3, r2
    2936:	d1ef      	bne.n	2918 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2938:	1dfb      	adds	r3, r7, #7
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	2b02      	cmp	r3, #2
    293e:	d10d      	bne.n	295c <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2940:	4a36      	ldr	r2, [pc, #216]	; (2a1c <wait_for_bootrom+0x168>)
    2942:	4b37      	ldr	r3, [pc, #220]	; (2a20 <wait_for_bootrom+0x16c>)
    2944:	0011      	movs	r1, r2
    2946:	0018      	movs	r0, r3
    2948:	4b36      	ldr	r3, [pc, #216]	; (2a24 <wait_for_bootrom+0x170>)
    294a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    294c:	2380      	movs	r3, #128	; 0x80
    294e:	035b      	lsls	r3, r3, #13
    2950:	4a35      	ldr	r2, [pc, #212]	; (2a28 <wait_for_bootrom+0x174>)
    2952:	0019      	movs	r1, r3
    2954:	0010      	movs	r0, r2
    2956:	4b33      	ldr	r3, [pc, #204]	; (2a24 <wait_for_bootrom+0x170>)
    2958:	4798      	blx	r3
    295a:	e022      	b.n	29a2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    295c:	1dfb      	adds	r3, r7, #7
    295e:	781b      	ldrb	r3, [r3, #0]
    2960:	2b03      	cmp	r3, #3
    2962:	d10b      	bne.n	297c <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2964:	4a2d      	ldr	r2, [pc, #180]	; (2a1c <wait_for_bootrom+0x168>)
    2966:	4b2e      	ldr	r3, [pc, #184]	; (2a20 <wait_for_bootrom+0x16c>)
    2968:	0011      	movs	r1, r2
    296a:	0018      	movs	r0, r3
    296c:	4b2d      	ldr	r3, [pc, #180]	; (2a24 <wait_for_bootrom+0x170>)
    296e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2970:	4b2d      	ldr	r3, [pc, #180]	; (2a28 <wait_for_bootrom+0x174>)
    2972:	2100      	movs	r1, #0
    2974:	0018      	movs	r0, r3
    2976:	4b2b      	ldr	r3, [pc, #172]	; (2a24 <wait_for_bootrom+0x170>)
    2978:	4798      	blx	r3
    297a:	e012      	b.n	29a2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    297c:	1dfb      	adds	r3, r7, #7
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	2b04      	cmp	r3, #4
    2982:	d108      	bne.n	2996 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2984:	2380      	movs	r3, #128	; 0x80
    2986:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	4a27      	ldr	r2, [pc, #156]	; (2a28 <wait_for_bootrom+0x174>)
    298c:	0019      	movs	r1, r3
    298e:	0010      	movs	r0, r2
    2990:	4b24      	ldr	r3, [pc, #144]	; (2a24 <wait_for_bootrom+0x170>)
    2992:	4798      	blx	r3
    2994:	e005      	b.n	29a2 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2996:	68fb      	ldr	r3, [r7, #12]
    2998:	4a23      	ldr	r2, [pc, #140]	; (2a28 <wait_for_bootrom+0x174>)
    299a:	0019      	movs	r1, r3
    299c:	0010      	movs	r0, r2
    299e:	4b21      	ldr	r3, [pc, #132]	; (2a24 <wait_for_bootrom+0x170>)
    29a0:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    29a2:	4b22      	ldr	r3, [pc, #136]	; (2a2c <wait_for_bootrom+0x178>)
    29a4:	4798      	blx	r3
    29a6:	0003      	movs	r3, r0
    29a8:	051b      	lsls	r3, r3, #20
    29aa:	0d1b      	lsrs	r3, r3, #20
    29ac:	4a20      	ldr	r2, [pc, #128]	; (2a30 <wait_for_bootrom+0x17c>)
    29ae:	4293      	cmp	r3, r2
    29b0:	d906      	bls.n	29c0 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    29b2:	697b      	ldr	r3, [r7, #20]
    29b4:	2202      	movs	r2, #2
    29b6:	4313      	orrs	r3, r2
    29b8:	0018      	movs	r0, r3
    29ba:	4b1e      	ldr	r3, [pc, #120]	; (2a34 <wait_for_bootrom+0x180>)
    29bc:	4798      	blx	r3
    29be:	e003      	b.n	29c8 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    29c0:	697b      	ldr	r3, [r7, #20]
    29c2:	0018      	movs	r0, r3
    29c4:	4b1b      	ldr	r3, [pc, #108]	; (2a34 <wait_for_bootrom+0x180>)
    29c6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    29c8:	4b1b      	ldr	r3, [pc, #108]	; (2a38 <wait_for_bootrom+0x184>)
    29ca:	0018      	movs	r0, r3
    29cc:	4b1b      	ldr	r3, [pc, #108]	; (2a3c <wait_for_bootrom+0x188>)
    29ce:	4798      	blx	r3
    29d0:	68fa      	ldr	r2, [r7, #12]
    29d2:	4b1b      	ldr	r3, [pc, #108]	; (2a40 <wait_for_bootrom+0x18c>)
    29d4:	0011      	movs	r1, r2
    29d6:	0018      	movs	r0, r3
    29d8:	4b18      	ldr	r3, [pc, #96]	; (2a3c <wait_for_bootrom+0x188>)
    29da:	4798      	blx	r3
    29dc:	200d      	movs	r0, #13
    29de:	4b19      	ldr	r3, [pc, #100]	; (2a44 <wait_for_bootrom+0x190>)
    29e0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    29e2:	4a19      	ldr	r2, [pc, #100]	; (2a48 <wait_for_bootrom+0x194>)
    29e4:	4b0b      	ldr	r3, [pc, #44]	; (2a14 <wait_for_bootrom+0x160>)
    29e6:	0011      	movs	r1, r2
    29e8:	0018      	movs	r0, r3
    29ea:	4b0e      	ldr	r3, [pc, #56]	; (2a24 <wait_for_bootrom+0x170>)
    29ec:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    29ee:	2313      	movs	r3, #19
    29f0:	18fb      	adds	r3, r7, r3
    29f2:	781b      	ldrb	r3, [r3, #0]
    29f4:	b25b      	sxtb	r3, r3
}
    29f6:	0018      	movs	r0, r3
    29f8:	46bd      	mov	sp, r7
    29fa:	b008      	add	sp, #32
    29fc:	bd80      	pop	{r7, pc}
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	13521352 	.word	0x13521352
    2a04:	00001014 	.word	0x00001014
    2a08:	00002c3d 	.word	0x00002c3d
    2a0c:	00000331 	.word	0x00000331
    2a10:	000207bc 	.word	0x000207bc
    2a14:	000c000c 	.word	0x000c000c
    2a18:	10add09e 	.word	0x10add09e
    2a1c:	3c1cd57d 	.word	0x3c1cd57d
    2a20:	000207ac 	.word	0x000207ac
    2a24:	00002c81 	.word	0x00002c81
    2a28:	0000108c 	.word	0x0000108c
    2a2c:	00002561 	.word	0x00002561
    2a30:	0000039f 	.word	0x0000039f
    2a34:	00002431 	.word	0x00002431
    2a38:	00014154 	.word	0x00014154
    2a3c:	0000f0ad 	.word	0x0000f0ad
    2a40:	00014160 	.word	0x00014160
    2a44:	0000f0e1 	.word	0x0000f0e1
    2a48:	ef522f61 	.word	0xef522f61

00002a4c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b088      	sub	sp, #32
    2a50:	af00      	add	r7, sp, #0
    2a52:	0002      	movs	r2, r0
    2a54:	1dfb      	adds	r3, r7, #7
    2a56:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2a58:	231f      	movs	r3, #31
    2a5a:	18fb      	adds	r3, r7, r3
    2a5c:	2200      	movs	r2, #0
    2a5e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2a60:	2300      	movs	r3, #0
    2a62:	61bb      	str	r3, [r7, #24]
    2a64:	2300      	movs	r3, #0
    2a66:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    2a68:	2301      	movs	r3, #1
    2a6a:	425b      	negs	r3, r3
    2a6c:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    2a6e:	4b1d      	ldr	r3, [pc, #116]	; (2ae4 <wait_for_firmware_start+0x98>)
    2a70:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2a72:	4b1d      	ldr	r3, [pc, #116]	; (2ae8 <wait_for_firmware_start+0x9c>)
    2a74:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2a76:	1dfb      	adds	r3, r7, #7
    2a78:	781b      	ldrb	r3, [r3, #0]
    2a7a:	2b02      	cmp	r3, #2
    2a7c:	d003      	beq.n	2a86 <wait_for_firmware_start+0x3a>
    2a7e:	1dfb      	adds	r3, r7, #7
    2a80:	781b      	ldrb	r3, [r3, #0]
    2a82:	2b03      	cmp	r3, #3
    2a84:	d119      	bne.n	2aba <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    2a86:	4b19      	ldr	r3, [pc, #100]	; (2aec <wait_for_firmware_start+0xa0>)
    2a88:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2a8a:	4b19      	ldr	r3, [pc, #100]	; (2af0 <wait_for_firmware_start+0xa4>)
    2a8c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2a8e:	e014      	b.n	2aba <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2a90:	2002      	movs	r0, #2
    2a92:	4b18      	ldr	r3, [pc, #96]	; (2af4 <wait_for_firmware_start+0xa8>)
    2a94:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2a96:	68fb      	ldr	r3, [r7, #12]
    2a98:	0018      	movs	r0, r3
    2a9a:	4b17      	ldr	r3, [pc, #92]	; (2af8 <wait_for_firmware_start+0xac>)
    2a9c:	4798      	blx	r3
    2a9e:	0003      	movs	r3, r0
    2aa0:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    2aa2:	697b      	ldr	r3, [r7, #20]
    2aa4:	3301      	adds	r3, #1
    2aa6:	617b      	str	r3, [r7, #20]
    2aa8:	697a      	ldr	r2, [r7, #20]
    2aaa:	693b      	ldr	r3, [r7, #16]
    2aac:	429a      	cmp	r2, r3
    2aae:	d304      	bcc.n	2aba <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2ab0:	231f      	movs	r3, #31
    2ab2:	18fb      	adds	r3, r7, r3
    2ab4:	22fb      	movs	r2, #251	; 0xfb
    2ab6:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2ab8:	e00c      	b.n	2ad4 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    2aba:	68ba      	ldr	r2, [r7, #8]
    2abc:	69bb      	ldr	r3, [r7, #24]
    2abe:	429a      	cmp	r2, r3
    2ac0:	d1e6      	bne.n	2a90 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2ac2:	68bb      	ldr	r3, [r7, #8]
    2ac4:	4a08      	ldr	r2, [pc, #32]	; (2ae8 <wait_for_firmware_start+0x9c>)
    2ac6:	4293      	cmp	r3, r2
    2ac8:	d104      	bne.n	2ad4 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2aca:	4b06      	ldr	r3, [pc, #24]	; (2ae4 <wait_for_firmware_start+0x98>)
    2acc:	2100      	movs	r1, #0
    2ace:	0018      	movs	r0, r3
    2ad0:	4b0a      	ldr	r3, [pc, #40]	; (2afc <wait_for_firmware_start+0xb0>)
    2ad2:	4798      	blx	r3
	}
ERR:
	return ret;
    2ad4:	231f      	movs	r3, #31
    2ad6:	18fb      	adds	r3, r7, r3
    2ad8:	781b      	ldrb	r3, [r3, #0]
    2ada:	b25b      	sxtb	r3, r3
}
    2adc:	0018      	movs	r0, r3
    2ade:	46bd      	mov	sp, r7
    2ae0:	b008      	add	sp, #32
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	0000108c 	.word	0x0000108c
    2ae8:	02532636 	.word	0x02532636
    2aec:	000207ac 	.word	0x000207ac
    2af0:	d75dc1c3 	.word	0xd75dc1c3
    2af4:	00000331 	.word	0x00000331
    2af8:	00002c3d 	.word	0x00002c3d
    2afc:	00002c81 	.word	0x00002c81

00002b00 <chip_deinit>:

sint8 chip_deinit(void)
{
    2b00:	b590      	push	{r4, r7, lr}
    2b02:	b083      	sub	sp, #12
    2b04:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2b06:	2300      	movs	r3, #0
    2b08:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2b0a:	1dfc      	adds	r4, r7, #7
    2b0c:	003a      	movs	r2, r7
    2b0e:	23a0      	movs	r3, #160	; 0xa0
    2b10:	015b      	lsls	r3, r3, #5
    2b12:	0011      	movs	r1, r2
    2b14:	0018      	movs	r0, r3
    2b16:	4b1f      	ldr	r3, [pc, #124]	; (2b94 <chip_deinit+0x94>)
    2b18:	4798      	blx	r3
    2b1a:	0003      	movs	r3, r0
    2b1c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2b1e:	1dfb      	adds	r3, r7, #7
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	b25b      	sxtb	r3, r3
    2b24:	2b00      	cmp	r3, #0
    2b26:	d00d      	beq.n	2b44 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    2b28:	4a1b      	ldr	r2, [pc, #108]	; (2b98 <chip_deinit+0x98>)
    2b2a:	491c      	ldr	r1, [pc, #112]	; (2b9c <chip_deinit+0x9c>)
    2b2c:	4b1c      	ldr	r3, [pc, #112]	; (2ba0 <chip_deinit+0xa0>)
    2b2e:	0018      	movs	r0, r3
    2b30:	4b1c      	ldr	r3, [pc, #112]	; (2ba4 <chip_deinit+0xa4>)
    2b32:	4798      	blx	r3
    2b34:	4b1c      	ldr	r3, [pc, #112]	; (2ba8 <chip_deinit+0xa8>)
    2b36:	0018      	movs	r0, r3
    2b38:	4b1c      	ldr	r3, [pc, #112]	; (2bac <chip_deinit+0xac>)
    2b3a:	4798      	blx	r3
    2b3c:	200d      	movs	r0, #13
    2b3e:	4b1c      	ldr	r3, [pc, #112]	; (2bb0 <chip_deinit+0xb0>)
    2b40:	4798      	blx	r3
		goto ERR1;
    2b42:	e020      	b.n	2b86 <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    2b44:	683b      	ldr	r3, [r7, #0]
    2b46:	4a1b      	ldr	r2, [pc, #108]	; (2bb4 <chip_deinit+0xb4>)
    2b48:	4013      	ands	r3, r2
    2b4a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2b4c:	683a      	ldr	r2, [r7, #0]
    2b4e:	1dfc      	adds	r4, r7, #7
    2b50:	23a0      	movs	r3, #160	; 0xa0
    2b52:	015b      	lsls	r3, r3, #5
    2b54:	0011      	movs	r1, r2
    2b56:	0018      	movs	r0, r3
    2b58:	4b17      	ldr	r3, [pc, #92]	; (2bb8 <chip_deinit+0xb8>)
    2b5a:	4798      	blx	r3
    2b5c:	0003      	movs	r3, r0
    2b5e:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2b60:	1dfb      	adds	r3, r7, #7
    2b62:	781b      	ldrb	r3, [r3, #0]
    2b64:	b25b      	sxtb	r3, r3
    2b66:	2b00      	cmp	r3, #0
    2b68:	d00d      	beq.n	2b86 <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    2b6a:	4a14      	ldr	r2, [pc, #80]	; (2bbc <chip_deinit+0xbc>)
    2b6c:	490b      	ldr	r1, [pc, #44]	; (2b9c <chip_deinit+0x9c>)
    2b6e:	4b0c      	ldr	r3, [pc, #48]	; (2ba0 <chip_deinit+0xa0>)
    2b70:	0018      	movs	r0, r3
    2b72:	4b0c      	ldr	r3, [pc, #48]	; (2ba4 <chip_deinit+0xa4>)
    2b74:	4798      	blx	r3
    2b76:	4b0c      	ldr	r3, [pc, #48]	; (2ba8 <chip_deinit+0xa8>)
    2b78:	0018      	movs	r0, r3
    2b7a:	4b0c      	ldr	r3, [pc, #48]	; (2bac <chip_deinit+0xac>)
    2b7c:	4798      	blx	r3
    2b7e:	200d      	movs	r0, #13
    2b80:	4b0b      	ldr	r3, [pc, #44]	; (2bb0 <chip_deinit+0xb0>)
    2b82:	4798      	blx	r3
		goto ERR1;
    2b84:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    2b86:	1dfb      	adds	r3, r7, #7
    2b88:	781b      	ldrb	r3, [r3, #0]
    2b8a:	b25b      	sxtb	r3, r3
}
    2b8c:	0018      	movs	r0, r3
    2b8e:	46bd      	mov	sp, r7
    2b90:	b003      	add	sp, #12
    2b92:	bd90      	pop	{r4, r7, pc}
    2b94:	00002c5d 	.word	0x00002c5d
    2b98:	00000205 	.word	0x00000205
    2b9c:	0001419c 	.word	0x0001419c
    2ba0:	0001410c 	.word	0x0001410c
    2ba4:	0000f0ad 	.word	0x0000f0ad
    2ba8:	00014178 	.word	0x00014178
    2bac:	0000f1c9 	.word	0x0000f1c9
    2bb0:	0000f0e1 	.word	0x0000f0e1
    2bb4:	fffffbff 	.word	0xfffffbff
    2bb8:	00002c81 	.word	0x00002c81
    2bbc:	0000020b 	.word	0x0000020b

00002bc0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2bc0:	b590      	push	{r4, r7, lr}
    2bc2:	b085      	sub	sp, #20
    2bc4:	af00      	add	r7, sp, #0
    2bc6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2bc8:	230f      	movs	r3, #15
    2bca:	18fb      	adds	r3, r7, r3
    2bcc:	2200      	movs	r2, #0
    2bce:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    2bd0:	230f      	movs	r3, #15
    2bd2:	18fc      	adds	r4, r7, r3
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	0018      	movs	r0, r3
    2bd8:	4b05      	ldr	r3, [pc, #20]	; (2bf0 <nm_bus_iface_init+0x30>)
    2bda:	4798      	blx	r3
    2bdc:	0003      	movs	r3, r0
    2bde:	7023      	strb	r3, [r4, #0]
	return ret;
    2be0:	230f      	movs	r3, #15
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	781b      	ldrb	r3, [r3, #0]
    2be6:	b25b      	sxtb	r3, r3
}
    2be8:	0018      	movs	r0, r3
    2bea:	46bd      	mov	sp, r7
    2bec:	b005      	add	sp, #20
    2bee:	bd90      	pop	{r4, r7, pc}
    2bf0:	000009f9 	.word	0x000009f9

00002bf4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2bf4:	b590      	push	{r4, r7, lr}
    2bf6:	b083      	sub	sp, #12
    2bf8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2bfa:	1dfb      	adds	r3, r7, #7
    2bfc:	2200      	movs	r2, #0
    2bfe:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    2c00:	1dfc      	adds	r4, r7, #7
    2c02:	4b05      	ldr	r3, [pc, #20]	; (2c18 <nm_bus_iface_deinit+0x24>)
    2c04:	4798      	blx	r3
    2c06:	0003      	movs	r3, r0
    2c08:	7023      	strb	r3, [r4, #0]

	return ret;
    2c0a:	1dfb      	adds	r3, r7, #7
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	b25b      	sxtb	r3, r3
}
    2c10:	0018      	movs	r0, r3
    2c12:	46bd      	mov	sp, r7
    2c14:	b003      	add	sp, #12
    2c16:	bd90      	pop	{r4, r7, pc}
    2c18:	00000b75 	.word	0x00000b75

00002c1c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2c1c:	b580      	push	{r7, lr}
    2c1e:	b082      	sub	sp, #8
    2c20:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2c22:	1dfb      	adds	r3, r7, #7
    2c24:	2200      	movs	r2, #0
    2c26:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2c28:	4b03      	ldr	r3, [pc, #12]	; (2c38 <nm_bus_reset+0x1c>)
    2c2a:	4798      	blx	r3
    2c2c:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2c2e:	0018      	movs	r0, r3
    2c30:	46bd      	mov	sp, r7
    2c32:	b002      	add	sp, #8
    2c34:	bd80      	pop	{r7, pc}
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	00004505 	.word	0x00004505

00002c3c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b082      	sub	sp, #8
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	0018      	movs	r0, r3
    2c48:	4b03      	ldr	r3, [pc, #12]	; (2c58 <nm_read_reg+0x1c>)
    2c4a:	4798      	blx	r3
    2c4c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2c4e:	0018      	movs	r0, r3
    2c50:	46bd      	mov	sp, r7
    2c52:	b002      	add	sp, #8
    2c54:	bd80      	pop	{r7, pc}
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	00004699 	.word	0x00004699

00002c5c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b082      	sub	sp, #8
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
    2c64:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2c66:	683a      	ldr	r2, [r7, #0]
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	0011      	movs	r1, r2
    2c6c:	0018      	movs	r0, r3
    2c6e:	4b03      	ldr	r3, [pc, #12]	; (2c7c <nm_read_reg_with_ret+0x20>)
    2c70:	4798      	blx	r3
    2c72:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2c74:	0018      	movs	r0, r3
    2c76:	46bd      	mov	sp, r7
    2c78:	b002      	add	sp, #8
    2c7a:	bd80      	pop	{r7, pc}
    2c7c:	000046bd 	.word	0x000046bd

00002c80 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b082      	sub	sp, #8
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2c8a:	683a      	ldr	r2, [r7, #0]
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	0011      	movs	r1, r2
    2c90:	0018      	movs	r0, r3
    2c92:	4b03      	ldr	r3, [pc, #12]	; (2ca0 <nm_write_reg+0x20>)
    2c94:	4798      	blx	r3
    2c96:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2c98:	0018      	movs	r0, r3
    2c9a:	46bd      	mov	sp, r7
    2c9c:	b002      	add	sp, #8
    2c9e:	bd80      	pop	{r7, pc}
    2ca0:	0000470d 	.word	0x0000470d

00002ca4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2ca4:	b580      	push	{r7, lr}
    2ca6:	b084      	sub	sp, #16
    2ca8:	af00      	add	r7, sp, #0
    2caa:	60f8      	str	r0, [r7, #12]
    2cac:	60b9      	str	r1, [r7, #8]
    2cae:	1dbb      	adds	r3, r7, #6
    2cb0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2cb2:	1dbb      	adds	r3, r7, #6
    2cb4:	881a      	ldrh	r2, [r3, #0]
    2cb6:	68b9      	ldr	r1, [r7, #8]
    2cb8:	68fb      	ldr	r3, [r7, #12]
    2cba:	0018      	movs	r0, r3
    2cbc:	4b03      	ldr	r3, [pc, #12]	; (2ccc <p_nm_read_block+0x28>)
    2cbe:	4798      	blx	r3
    2cc0:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2cc2:	0018      	movs	r0, r3
    2cc4:	46bd      	mov	sp, r7
    2cc6:	b004      	add	sp, #16
    2cc8:	bd80      	pop	{r7, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	0000475d 	.word	0x0000475d

00002cd0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2cd0:	b580      	push	{r7, lr}
    2cd2:	b086      	sub	sp, #24
    2cd4:	af00      	add	r7, sp, #0
    2cd6:	60f8      	str	r0, [r7, #12]
    2cd8:	60b9      	str	r1, [r7, #8]
    2cda:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2cdc:	4b2d      	ldr	r3, [pc, #180]	; (2d94 <nm_read_block+0xc4>)
    2cde:	881a      	ldrh	r2, [r3, #0]
    2ce0:	2310      	movs	r3, #16
    2ce2:	18fb      	adds	r3, r7, r3
    2ce4:	3a08      	subs	r2, #8
    2ce6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2ce8:	2300      	movs	r3, #0
    2cea:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2cec:	2313      	movs	r3, #19
    2cee:	18fb      	adds	r3, r7, r3
    2cf0:	2200      	movs	r2, #0
    2cf2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2cf4:	2310      	movs	r3, #16
    2cf6:	18fb      	adds	r3, r7, r3
    2cf8:	881a      	ldrh	r2, [r3, #0]
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	429a      	cmp	r2, r3
    2cfe:	d313      	bcc.n	2d28 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2d00:	68ba      	ldr	r2, [r7, #8]
    2d02:	697b      	ldr	r3, [r7, #20]
    2d04:	18d1      	adds	r1, r2, r3
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	b29a      	uxth	r2, r3
    2d0a:	68fb      	ldr	r3, [r7, #12]
    2d0c:	0018      	movs	r0, r3
    2d0e:	4b22      	ldr	r3, [pc, #136]	; (2d98 <nm_read_block+0xc8>)
    2d10:	4798      	blx	r3
    2d12:	0003      	movs	r3, r0
    2d14:	b2da      	uxtb	r2, r3
    2d16:	2313      	movs	r3, #19
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	781b      	ldrb	r3, [r3, #0]
    2d1c:	18d3      	adds	r3, r2, r3
    2d1e:	b2da      	uxtb	r2, r3
    2d20:	2313      	movs	r3, #19
    2d22:	18fb      	adds	r3, r7, r3
    2d24:	701a      	strb	r2, [r3, #0]
			break;
    2d26:	e02d      	b.n	2d84 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2d28:	68ba      	ldr	r2, [r7, #8]
    2d2a:	697b      	ldr	r3, [r7, #20]
    2d2c:	18d1      	adds	r1, r2, r3
    2d2e:	2310      	movs	r3, #16
    2d30:	18fb      	adds	r3, r7, r3
    2d32:	881a      	ldrh	r2, [r3, #0]
    2d34:	68fb      	ldr	r3, [r7, #12]
    2d36:	0018      	movs	r0, r3
    2d38:	4b17      	ldr	r3, [pc, #92]	; (2d98 <nm_read_block+0xc8>)
    2d3a:	4798      	blx	r3
    2d3c:	0003      	movs	r3, r0
    2d3e:	b2da      	uxtb	r2, r3
    2d40:	2313      	movs	r3, #19
    2d42:	18fb      	adds	r3, r7, r3
    2d44:	781b      	ldrb	r3, [r3, #0]
    2d46:	18d3      	adds	r3, r2, r3
    2d48:	b2da      	uxtb	r2, r3
    2d4a:	2313      	movs	r3, #19
    2d4c:	18fb      	adds	r3, r7, r3
    2d4e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2d50:	2313      	movs	r3, #19
    2d52:	18fb      	adds	r3, r7, r3
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	b25b      	sxtb	r3, r3
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d112      	bne.n	2d82 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2d5c:	2310      	movs	r3, #16
    2d5e:	18fb      	adds	r3, r7, r3
    2d60:	881b      	ldrh	r3, [r3, #0]
    2d62:	687a      	ldr	r2, [r7, #4]
    2d64:	1ad3      	subs	r3, r2, r3
    2d66:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2d68:	2310      	movs	r3, #16
    2d6a:	18fb      	adds	r3, r7, r3
    2d6c:	881b      	ldrh	r3, [r3, #0]
    2d6e:	697a      	ldr	r2, [r7, #20]
    2d70:	18d3      	adds	r3, r2, r3
    2d72:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2d74:	2310      	movs	r3, #16
    2d76:	18fb      	adds	r3, r7, r3
    2d78:	881b      	ldrh	r3, [r3, #0]
    2d7a:	68fa      	ldr	r2, [r7, #12]
    2d7c:	18d3      	adds	r3, r2, r3
    2d7e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2d80:	e7b8      	b.n	2cf4 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2d82:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2d84:	2313      	movs	r3, #19
    2d86:	18fb      	adds	r3, r7, r3
    2d88:	781b      	ldrb	r3, [r3, #0]
    2d8a:	b25b      	sxtb	r3, r3
}
    2d8c:	0018      	movs	r0, r3
    2d8e:	46bd      	mov	sp, r7
    2d90:	b006      	add	sp, #24
    2d92:	bd80      	pop	{r7, pc}
    2d94:	20000000 	.word	0x20000000
    2d98:	00002ca5 	.word	0x00002ca5

00002d9c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b084      	sub	sp, #16
    2da0:	af00      	add	r7, sp, #0
    2da2:	60f8      	str	r0, [r7, #12]
    2da4:	60b9      	str	r1, [r7, #8]
    2da6:	1dbb      	adds	r3, r7, #6
    2da8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2daa:	1dbb      	adds	r3, r7, #6
    2dac:	881a      	ldrh	r2, [r3, #0]
    2dae:	68b9      	ldr	r1, [r7, #8]
    2db0:	68fb      	ldr	r3, [r7, #12]
    2db2:	0018      	movs	r0, r3
    2db4:	4b03      	ldr	r3, [pc, #12]	; (2dc4 <p_nm_write_block+0x28>)
    2db6:	4798      	blx	r3
    2db8:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2dba:	0018      	movs	r0, r3
    2dbc:	46bd      	mov	sp, r7
    2dbe:	b004      	add	sp, #16
    2dc0:	bd80      	pop	{r7, pc}
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	000047b5 	.word	0x000047b5

00002dc8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2dc8:	b580      	push	{r7, lr}
    2dca:	b086      	sub	sp, #24
    2dcc:	af00      	add	r7, sp, #0
    2dce:	60f8      	str	r0, [r7, #12]
    2dd0:	60b9      	str	r1, [r7, #8]
    2dd2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2dd4:	4b2d      	ldr	r3, [pc, #180]	; (2e8c <nm_write_block+0xc4>)
    2dd6:	881a      	ldrh	r2, [r3, #0]
    2dd8:	2310      	movs	r3, #16
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	3a08      	subs	r2, #8
    2dde:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2de0:	2300      	movs	r3, #0
    2de2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2de4:	2313      	movs	r3, #19
    2de6:	18fb      	adds	r3, r7, r3
    2de8:	2200      	movs	r2, #0
    2dea:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2dec:	2310      	movs	r3, #16
    2dee:	18fb      	adds	r3, r7, r3
    2df0:	881a      	ldrh	r2, [r3, #0]
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	429a      	cmp	r2, r3
    2df6:	d313      	bcc.n	2e20 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2df8:	68ba      	ldr	r2, [r7, #8]
    2dfa:	697b      	ldr	r3, [r7, #20]
    2dfc:	18d1      	adds	r1, r2, r3
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	b29a      	uxth	r2, r3
    2e02:	68fb      	ldr	r3, [r7, #12]
    2e04:	0018      	movs	r0, r3
    2e06:	4b22      	ldr	r3, [pc, #136]	; (2e90 <nm_write_block+0xc8>)
    2e08:	4798      	blx	r3
    2e0a:	0003      	movs	r3, r0
    2e0c:	b2da      	uxtb	r2, r3
    2e0e:	2313      	movs	r3, #19
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	18d3      	adds	r3, r2, r3
    2e16:	b2da      	uxtb	r2, r3
    2e18:	2313      	movs	r3, #19
    2e1a:	18fb      	adds	r3, r7, r3
    2e1c:	701a      	strb	r2, [r3, #0]
			break;
    2e1e:	e02d      	b.n	2e7c <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2e20:	68ba      	ldr	r2, [r7, #8]
    2e22:	697b      	ldr	r3, [r7, #20]
    2e24:	18d1      	adds	r1, r2, r3
    2e26:	2310      	movs	r3, #16
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	881a      	ldrh	r2, [r3, #0]
    2e2c:	68fb      	ldr	r3, [r7, #12]
    2e2e:	0018      	movs	r0, r3
    2e30:	4b17      	ldr	r3, [pc, #92]	; (2e90 <nm_write_block+0xc8>)
    2e32:	4798      	blx	r3
    2e34:	0003      	movs	r3, r0
    2e36:	b2da      	uxtb	r2, r3
    2e38:	2313      	movs	r3, #19
    2e3a:	18fb      	adds	r3, r7, r3
    2e3c:	781b      	ldrb	r3, [r3, #0]
    2e3e:	18d3      	adds	r3, r2, r3
    2e40:	b2da      	uxtb	r2, r3
    2e42:	2313      	movs	r3, #19
    2e44:	18fb      	adds	r3, r7, r3
    2e46:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2e48:	2313      	movs	r3, #19
    2e4a:	18fb      	adds	r3, r7, r3
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	b25b      	sxtb	r3, r3
    2e50:	2b00      	cmp	r3, #0
    2e52:	d112      	bne.n	2e7a <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2e54:	2310      	movs	r3, #16
    2e56:	18fb      	adds	r3, r7, r3
    2e58:	881b      	ldrh	r3, [r3, #0]
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	1ad3      	subs	r3, r2, r3
    2e5e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2e60:	2310      	movs	r3, #16
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	881b      	ldrh	r3, [r3, #0]
    2e66:	697a      	ldr	r2, [r7, #20]
    2e68:	18d3      	adds	r3, r2, r3
    2e6a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2e6c:	2310      	movs	r3, #16
    2e6e:	18fb      	adds	r3, r7, r3
    2e70:	881b      	ldrh	r3, [r3, #0]
    2e72:	68fa      	ldr	r2, [r7, #12]
    2e74:	18d3      	adds	r3, r2, r3
    2e76:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2e78:	e7b8      	b.n	2dec <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2e7a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2e7c:	2313      	movs	r3, #19
    2e7e:	18fb      	adds	r3, r7, r3
    2e80:	781b      	ldrb	r3, [r3, #0]
    2e82:	b25b      	sxtb	r3, r3
}
    2e84:	0018      	movs	r0, r3
    2e86:	46bd      	mov	sp, r7
    2e88:	b006      	add	sp, #24
    2e8a:	bd80      	pop	{r7, pc}
    2e8c:	20000000 	.word	0x20000000
    2e90:	00002d9d 	.word	0x00002d9d

00002e94 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2e94:	b590      	push	{r4, r7, lr}
    2e96:	b089      	sub	sp, #36	; 0x24
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2e9c:	2300      	movs	r3, #0
    2e9e:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    2ea0:	231f      	movs	r3, #31
    2ea2:	18fb      	adds	r3, r7, r3
    2ea4:	2200      	movs	r2, #0
    2ea6:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    2ea8:	230c      	movs	r3, #12
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	0018      	movs	r0, r3
    2eae:	2308      	movs	r3, #8
    2eb0:	001a      	movs	r2, r3
    2eb2:	2100      	movs	r1, #0
    2eb4:	4b64      	ldr	r3, [pc, #400]	; (3048 <nm_get_firmware_full_info+0x1b4>)
    2eb6:	4798      	blx	r3
	if (pstrRev != NULL)
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d100      	bne.n	2ec0 <nm_get_firmware_full_info+0x2c>
    2ebe:	e0ba      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	2228      	movs	r2, #40	; 0x28
    2ec4:	2100      	movs	r1, #0
    2ec6:	0018      	movs	r0, r3
    2ec8:	4b60      	ldr	r3, [pc, #384]	; (304c <nm_get_firmware_full_info+0x1b8>)
    2eca:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2ecc:	231f      	movs	r3, #31
    2ece:	18fc      	adds	r4, r7, r3
    2ed0:	2314      	movs	r3, #20
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	4a5e      	ldr	r2, [pc, #376]	; (3050 <nm_get_firmware_full_info+0x1bc>)
    2ed6:	0019      	movs	r1, r3
    2ed8:	0010      	movs	r0, r2
    2eda:	4b5e      	ldr	r3, [pc, #376]	; (3054 <nm_get_firmware_full_info+0x1c0>)
    2edc:	4798      	blx	r3
    2ede:	0003      	movs	r3, r0
    2ee0:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    2ee2:	231f      	movs	r3, #31
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	b25b      	sxtb	r3, r3
    2eea:	2b00      	cmp	r3, #0
    2eec:	d000      	beq.n	2ef0 <nm_get_firmware_full_info+0x5c>
    2eee:	e0a2      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    2ef0:	697b      	ldr	r3, [r7, #20]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d100      	bne.n	2ef8 <nm_get_firmware_full_info+0x64>
    2ef6:	e09a      	b.n	302e <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2ef8:	697b      	ldr	r3, [r7, #20]
    2efa:	22c0      	movs	r2, #192	; 0xc0
    2efc:	0292      	lsls	r2, r2, #10
    2efe:	4313      	orrs	r3, r2
    2f00:	221f      	movs	r2, #31
    2f02:	18bc      	adds	r4, r7, r2
    2f04:	220c      	movs	r2, #12
    2f06:	18b9      	adds	r1, r7, r2
    2f08:	2208      	movs	r2, #8
    2f0a:	0018      	movs	r0, r3
    2f0c:	4b52      	ldr	r3, [pc, #328]	; (3058 <nm_get_firmware_full_info+0x1c4>)
    2f0e:	4798      	blx	r3
    2f10:	0003      	movs	r3, r0
    2f12:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    2f14:	231f      	movs	r3, #31
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	781b      	ldrb	r3, [r3, #0]
    2f1a:	b25b      	sxtb	r3, r3
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d000      	beq.n	2f22 <nm_get_firmware_full_info+0x8e>
    2f20:	e089      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    2f22:	230c      	movs	r3, #12
    2f24:	18fb      	adds	r3, r7, r3
    2f26:	685b      	ldr	r3, [r3, #4]
    2f28:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    2f2a:	697b      	ldr	r3, [r7, #20]
    2f2c:	041b      	lsls	r3, r3, #16
    2f2e:	0c1b      	lsrs	r3, r3, #16
    2f30:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    2f32:	697b      	ldr	r3, [r7, #20]
    2f34:	2b00      	cmp	r3, #0
    2f36:	d100      	bne.n	2f3a <nm_get_firmware_full_info+0xa6>
    2f38:	e074      	b.n	3024 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2f3a:	697b      	ldr	r3, [r7, #20]
    2f3c:	22c0      	movs	r2, #192	; 0xc0
    2f3e:	0292      	lsls	r2, r2, #10
    2f40:	4313      	orrs	r3, r2
    2f42:	221f      	movs	r2, #31
    2f44:	18bc      	adds	r4, r7, r2
    2f46:	6879      	ldr	r1, [r7, #4]
    2f48:	2228      	movs	r2, #40	; 0x28
    2f4a:	0018      	movs	r0, r3
    2f4c:	4b42      	ldr	r3, [pc, #264]	; (3058 <nm_get_firmware_full_info+0x1c4>)
    2f4e:	4798      	blx	r3
    2f50:	0003      	movs	r3, r0
    2f52:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    2f54:	231f      	movs	r3, #31
    2f56:	18fb      	adds	r3, r7, r3
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	b25b      	sxtb	r3, r3
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d16a      	bne.n	3036 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	791b      	ldrb	r3, [r3, #4]
    2f64:	021b      	lsls	r3, r3, #8
    2f66:	b21a      	sxth	r2, r3
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	795b      	ldrb	r3, [r3, #5]
    2f6c:	011b      	lsls	r3, r3, #4
    2f6e:	b21b      	sxth	r3, r3
    2f70:	21ff      	movs	r1, #255	; 0xff
    2f72:	400b      	ands	r3, r1
    2f74:	b21b      	sxth	r3, r3
    2f76:	4313      	orrs	r3, r2
    2f78:	b21a      	sxth	r2, r3
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	799b      	ldrb	r3, [r3, #6]
    2f7e:	b21b      	sxth	r3, r3
    2f80:	210f      	movs	r1, #15
    2f82:	400b      	ands	r3, r1
    2f84:	b21b      	sxth	r3, r3
    2f86:	4313      	orrs	r3, r2
    2f88:	b21a      	sxth	r2, r3
    2f8a:	231c      	movs	r3, #28
    2f8c:	18fb      	adds	r3, r7, r3
    2f8e:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    2f90:	231a      	movs	r3, #26
    2f92:	18fb      	adds	r3, r7, r3
    2f94:	4a31      	ldr	r2, [pc, #196]	; (305c <nm_get_firmware_full_info+0x1c8>)
    2f96:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	79db      	ldrb	r3, [r3, #7]
    2f9c:	021b      	lsls	r3, r3, #8
    2f9e:	b21a      	sxth	r2, r3
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	7a1b      	ldrb	r3, [r3, #8]
    2fa4:	011b      	lsls	r3, r3, #4
    2fa6:	b21b      	sxth	r3, r3
    2fa8:	21ff      	movs	r1, #255	; 0xff
    2faa:	400b      	ands	r3, r1
    2fac:	b21b      	sxth	r3, r3
    2fae:	4313      	orrs	r3, r2
    2fb0:	b21a      	sxth	r2, r3
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	7a5b      	ldrb	r3, [r3, #9]
    2fb6:	b21b      	sxth	r3, r3
    2fb8:	210f      	movs	r1, #15
    2fba:	400b      	ands	r3, r1
    2fbc:	b21b      	sxth	r3, r3
    2fbe:	4313      	orrs	r3, r2
    2fc0:	b21a      	sxth	r2, r3
    2fc2:	2318      	movs	r3, #24
    2fc4:	18fb      	adds	r3, r7, r3
    2fc6:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2fc8:	231c      	movs	r3, #28
    2fca:	18fb      	adds	r3, r7, r3
    2fcc:	881b      	ldrh	r3, [r3, #0]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d009      	beq.n	2fe6 <nm_get_firmware_full_info+0x152>
    2fd2:	2318      	movs	r3, #24
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	881b      	ldrh	r3, [r3, #0]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d004      	beq.n	2fe6 <nm_get_firmware_full_info+0x152>
    2fdc:	2318      	movs	r3, #24
    2fde:	18fb      	adds	r3, r7, r3
    2fe0:	881b      	ldrh	r3, [r3, #0]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d104      	bne.n	2ff0 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    2fe6:	231f      	movs	r3, #31
    2fe8:	18fb      	adds	r3, r7, r3
    2fea:	22f4      	movs	r2, #244	; 0xf4
    2fec:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    2fee:	e022      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2ff0:	231a      	movs	r3, #26
    2ff2:	18fa      	adds	r2, r7, r3
    2ff4:	2318      	movs	r3, #24
    2ff6:	18fb      	adds	r3, r7, r3
    2ff8:	8812      	ldrh	r2, [r2, #0]
    2ffa:	881b      	ldrh	r3, [r3, #0]
    2ffc:	429a      	cmp	r2, r3
    2ffe:	d204      	bcs.n	300a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    3000:	231f      	movs	r3, #31
    3002:	18fb      	adds	r3, r7, r3
    3004:	22f3      	movs	r2, #243	; 0xf3
    3006:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3008:	e015      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    300a:	231a      	movs	r3, #26
    300c:	18fa      	adds	r2, r7, r3
    300e:	231c      	movs	r3, #28
    3010:	18fb      	adds	r3, r7, r3
    3012:	8812      	ldrh	r2, [r2, #0]
    3014:	881b      	ldrh	r3, [r3, #0]
    3016:	429a      	cmp	r2, r3
    3018:	d90d      	bls.n	3036 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    301a:	231f      	movs	r3, #31
    301c:	18fb      	adds	r3, r7, r3
    301e:	22f3      	movs	r2, #243	; 0xf3
    3020:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3022:	e008      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    3024:	231f      	movs	r3, #31
    3026:	18fb      	adds	r3, r7, r3
    3028:	22f4      	movs	r2, #244	; 0xf4
    302a:	701a      	strb	r2, [r3, #0]
    302c:	e003      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    302e:	231f      	movs	r3, #31
    3030:	18fb      	adds	r3, r7, r3
    3032:	22f4      	movs	r2, #244	; 0xf4
    3034:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    3036:	231f      	movs	r3, #31
    3038:	18fb      	adds	r3, r7, r3
    303a:	781b      	ldrb	r3, [r3, #0]
    303c:	b25b      	sxtb	r3, r3
}
    303e:	0018      	movs	r0, r3
    3040:	46bd      	mov	sp, r7
    3042:	b009      	add	sp, #36	; 0x24
    3044:	bd90      	pop	{r4, r7, pc}
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	0000e66b 	.word	0x0000e66b
    304c:	00000c21 	.word	0x00000c21
    3050:	000c0008 	.word	0x000c0008
    3054:	00002c5d 	.word	0x00002c5d
    3058:	00002cd1 	.word	0x00002cd1
    305c:	00001352 	.word	0x00001352

00003060 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3060:	b590      	push	{r4, r7, lr}
    3062:	b085      	sub	sp, #20
    3064:	af00      	add	r7, sp, #0
    3066:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3068:	230f      	movs	r3, #15
    306a:	18fb      	adds	r3, r7, r3
    306c:	2200      	movs	r2, #0
    306e:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    3070:	687b      	ldr	r3, [r7, #4]
    3072:	2b00      	cmp	r3, #0
    3074:	d013      	beq.n	309e <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    3076:	230e      	movs	r3, #14
    3078:	18fb      	adds	r3, r7, r3
    307a:	687a      	ldr	r2, [r7, #4]
    307c:	7812      	ldrb	r2, [r2, #0]
    307e:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3080:	230e      	movs	r3, #14
    3082:	18fb      	adds	r3, r7, r3
    3084:	781b      	ldrb	r3, [r3, #0]
    3086:	2b00      	cmp	r3, #0
    3088:	d004      	beq.n	3094 <nm_drv_init+0x34>
    308a:	230e      	movs	r3, #14
    308c:	18fb      	adds	r3, r7, r3
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	2b04      	cmp	r3, #4
    3092:	d908      	bls.n	30a6 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    3094:	230e      	movs	r3, #14
    3096:	18fb      	adds	r3, r7, r3
    3098:	2201      	movs	r2, #1
    309a:	701a      	strb	r2, [r3, #0]
    309c:	e003      	b.n	30a6 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    309e:	230e      	movs	r3, #14
    30a0:	18fb      	adds	r3, r7, r3
    30a2:	2201      	movs	r2, #1
    30a4:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    30a6:	230f      	movs	r3, #15
    30a8:	18fc      	adds	r4, r7, r3
    30aa:	2000      	movs	r0, #0
    30ac:	4b41      	ldr	r3, [pc, #260]	; (31b4 <nm_drv_init+0x154>)
    30ae:	4798      	blx	r3
    30b0:	0003      	movs	r3, r0
    30b2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    30b4:	230f      	movs	r3, #15
    30b6:	18fb      	adds	r3, r7, r3
    30b8:	781b      	ldrb	r3, [r3, #0]
    30ba:	b25b      	sxtb	r3, r3
    30bc:	2b00      	cmp	r3, #0
    30be:	d00f      	beq.n	30e0 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    30c0:	2328      	movs	r3, #40	; 0x28
    30c2:	33ff      	adds	r3, #255	; 0xff
    30c4:	001a      	movs	r2, r3
    30c6:	493c      	ldr	r1, [pc, #240]	; (31b8 <nm_drv_init+0x158>)
    30c8:	4b3c      	ldr	r3, [pc, #240]	; (31bc <nm_drv_init+0x15c>)
    30ca:	0018      	movs	r0, r3
    30cc:	4b3c      	ldr	r3, [pc, #240]	; (31c0 <nm_drv_init+0x160>)
    30ce:	4798      	blx	r3
    30d0:	4b3c      	ldr	r3, [pc, #240]	; (31c4 <nm_drv_init+0x164>)
    30d2:	0018      	movs	r0, r3
    30d4:	4b3c      	ldr	r3, [pc, #240]	; (31c8 <nm_drv_init+0x168>)
    30d6:	4798      	blx	r3
    30d8:	200d      	movs	r0, #13
    30da:	4b3c      	ldr	r3, [pc, #240]	; (31cc <nm_drv_init+0x16c>)
    30dc:	4798      	blx	r3
		goto ERR1;
    30de:	e060      	b.n	31a2 <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    30e0:	4b3b      	ldr	r3, [pc, #236]	; (31d0 <nm_drv_init+0x170>)
    30e2:	0018      	movs	r0, r3
    30e4:	4b36      	ldr	r3, [pc, #216]	; (31c0 <nm_drv_init+0x160>)
    30e6:	4798      	blx	r3
    30e8:	4b3a      	ldr	r3, [pc, #232]	; (31d4 <nm_drv_init+0x174>)
    30ea:	4798      	blx	r3
    30ec:	0002      	movs	r2, r0
    30ee:	4b3a      	ldr	r3, [pc, #232]	; (31d8 <nm_drv_init+0x178>)
    30f0:	0011      	movs	r1, r2
    30f2:	0018      	movs	r0, r3
    30f4:	4b32      	ldr	r3, [pc, #200]	; (31c0 <nm_drv_init+0x160>)
    30f6:	4798      	blx	r3
    30f8:	200d      	movs	r0, #13
    30fa:	4b34      	ldr	r3, [pc, #208]	; (31cc <nm_drv_init+0x16c>)
    30fc:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    30fe:	4b37      	ldr	r3, [pc, #220]	; (31dc <nm_drv_init+0x17c>)
    3100:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    3102:	230f      	movs	r3, #15
    3104:	18fc      	adds	r4, r7, r3
    3106:	230e      	movs	r3, #14
    3108:	18fb      	adds	r3, r7, r3
    310a:	781b      	ldrb	r3, [r3, #0]
    310c:	0018      	movs	r0, r3
    310e:	4b34      	ldr	r3, [pc, #208]	; (31e0 <nm_drv_init+0x180>)
    3110:	4798      	blx	r3
    3112:	0003      	movs	r3, r0
    3114:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3116:	230f      	movs	r3, #15
    3118:	18fb      	adds	r3, r7, r3
    311a:	781b      	ldrb	r3, [r3, #0]
    311c:	b25b      	sxtb	r3, r3
    311e:	2b00      	cmp	r3, #0
    3120:	d13a      	bne.n	3198 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    3122:	230f      	movs	r3, #15
    3124:	18fc      	adds	r4, r7, r3
    3126:	230e      	movs	r3, #14
    3128:	18fb      	adds	r3, r7, r3
    312a:	781b      	ldrb	r3, [r3, #0]
    312c:	0018      	movs	r0, r3
    312e:	4b2d      	ldr	r3, [pc, #180]	; (31e4 <nm_drv_init+0x184>)
    3130:	4798      	blx	r3
    3132:	0003      	movs	r3, r0
    3134:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3136:	230f      	movs	r3, #15
    3138:	18fb      	adds	r3, r7, r3
    313a:	781b      	ldrb	r3, [r3, #0]
    313c:	b25b      	sxtb	r3, r3
    313e:	2b00      	cmp	r3, #0
    3140:	d12c      	bne.n	319c <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    3142:	230e      	movs	r3, #14
    3144:	18fb      	adds	r3, r7, r3
    3146:	781b      	ldrb	r3, [r3, #0]
    3148:	2b02      	cmp	r3, #2
    314a:	d02a      	beq.n	31a2 <nm_drv_init+0x142>
    314c:	230e      	movs	r3, #14
    314e:	18fb      	adds	r3, r7, r3
    3150:	781b      	ldrb	r3, [r3, #0]
    3152:	2b03      	cmp	r3, #3
    3154:	d025      	beq.n	31a2 <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    3156:	230f      	movs	r3, #15
    3158:	18fc      	adds	r4, r7, r3
    315a:	4b23      	ldr	r3, [pc, #140]	; (31e8 <nm_drv_init+0x188>)
    315c:	4798      	blx	r3
    315e:	0003      	movs	r3, r0
    3160:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3162:	230f      	movs	r3, #15
    3164:	18fb      	adds	r3, r7, r3
    3166:	781b      	ldrb	r3, [r3, #0]
    3168:	b25b      	sxtb	r3, r3
    316a:	2b00      	cmp	r3, #0
    316c:	d00f      	beq.n	318e <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    316e:	2356      	movs	r3, #86	; 0x56
    3170:	33ff      	adds	r3, #255	; 0xff
    3172:	001a      	movs	r2, r3
    3174:	4910      	ldr	r1, [pc, #64]	; (31b8 <nm_drv_init+0x158>)
    3176:	4b11      	ldr	r3, [pc, #68]	; (31bc <nm_drv_init+0x15c>)
    3178:	0018      	movs	r0, r3
    317a:	4b11      	ldr	r3, [pc, #68]	; (31c0 <nm_drv_init+0x160>)
    317c:	4798      	blx	r3
    317e:	4b1b      	ldr	r3, [pc, #108]	; (31ec <nm_drv_init+0x18c>)
    3180:	0018      	movs	r0, r3
    3182:	4b11      	ldr	r3, [pc, #68]	; (31c8 <nm_drv_init+0x168>)
    3184:	4798      	blx	r3
    3186:	200d      	movs	r0, #13
    3188:	4b10      	ldr	r3, [pc, #64]	; (31cc <nm_drv_init+0x16c>)
    318a:	4798      	blx	r3
		goto ERR2;
    318c:	e007      	b.n	319e <nm_drv_init+0x13e>
	}
	return ret;
    318e:	230f      	movs	r3, #15
    3190:	18fb      	adds	r3, r7, r3
    3192:	781b      	ldrb	r3, [r3, #0]
    3194:	b25b      	sxtb	r3, r3
    3196:	e008      	b.n	31aa <nm_drv_init+0x14a>
		goto ERR2;
    3198:	46c0      	nop			; (mov r8, r8)
    319a:	e000      	b.n	319e <nm_drv_init+0x13e>
		goto ERR2;
    319c:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    319e:	4b14      	ldr	r3, [pc, #80]	; (31f0 <nm_drv_init+0x190>)
    31a0:	4798      	blx	r3
ERR1:
	return ret;
    31a2:	230f      	movs	r3, #15
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	b25b      	sxtb	r3, r3
}
    31aa:	0018      	movs	r0, r3
    31ac:	46bd      	mov	sp, r7
    31ae:	b005      	add	sp, #20
    31b0:	bd90      	pop	{r4, r7, pc}
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	00002bc1 	.word	0x00002bc1
    31b8:	00014274 	.word	0x00014274
    31bc:	000141a8 	.word	0x000141a8
    31c0:	0000f0ad 	.word	0x0000f0ad
    31c4:	000141bc 	.word	0x000141bc
    31c8:	0000f1c9 	.word	0x0000f1c9
    31cc:	0000f0e1 	.word	0x0000f0e1
    31d0:	000141d8 	.word	0x000141d8
    31d4:	00002561 	.word	0x00002561
    31d8:	000141e4 	.word	0x000141e4
    31dc:	00004535 	.word	0x00004535
    31e0:	000028b5 	.word	0x000028b5
    31e4:	00002a4d 	.word	0x00002a4d
    31e8:	000024ad 	.word	0x000024ad
    31ec:	000141f4 	.word	0x000141f4
    31f0:	00002bf5 	.word	0x00002bf5

000031f4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    31f4:	b590      	push	{r4, r7, lr}
    31f6:	b085      	sub	sp, #20
    31f8:	af00      	add	r7, sp, #0
    31fa:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    31fc:	230f      	movs	r3, #15
    31fe:	18fc      	adds	r4, r7, r3
    3200:	4b2d      	ldr	r3, [pc, #180]	; (32b8 <nm_drv_deinit+0xc4>)
    3202:	4798      	blx	r3
    3204:	0003      	movs	r3, r0
    3206:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3208:	230f      	movs	r3, #15
    320a:	18fb      	adds	r3, r7, r3
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	b25b      	sxtb	r3, r3
    3210:	2b00      	cmp	r3, #0
    3212:	d00e      	beq.n	3232 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    3214:	23b6      	movs	r3, #182	; 0xb6
    3216:	005a      	lsls	r2, r3, #1
    3218:	4928      	ldr	r1, [pc, #160]	; (32bc <nm_drv_deinit+0xc8>)
    321a:	4b29      	ldr	r3, [pc, #164]	; (32c0 <nm_drv_deinit+0xcc>)
    321c:	0018      	movs	r0, r3
    321e:	4b29      	ldr	r3, [pc, #164]	; (32c4 <nm_drv_deinit+0xd0>)
    3220:	4798      	blx	r3
    3222:	4b29      	ldr	r3, [pc, #164]	; (32c8 <nm_drv_deinit+0xd4>)
    3224:	0018      	movs	r0, r3
    3226:	4b29      	ldr	r3, [pc, #164]	; (32cc <nm_drv_deinit+0xd8>)
    3228:	4798      	blx	r3
    322a:	200d      	movs	r0, #13
    322c:	4b28      	ldr	r3, [pc, #160]	; (32d0 <nm_drv_deinit+0xdc>)
    322e:	4798      	blx	r3
		goto ERR1;
    3230:	e03a      	b.n	32a8 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    3232:	230f      	movs	r3, #15
    3234:	18fc      	adds	r4, r7, r3
    3236:	2000      	movs	r0, #0
    3238:	4b26      	ldr	r3, [pc, #152]	; (32d4 <nm_drv_deinit+0xe0>)
    323a:	4798      	blx	r3
    323c:	0003      	movs	r3, r0
    323e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3240:	230f      	movs	r3, #15
    3242:	18fb      	adds	r3, r7, r3
    3244:	781b      	ldrb	r3, [r3, #0]
    3246:	b25b      	sxtb	r3, r3
    3248:	2b00      	cmp	r3, #0
    324a:	d00f      	beq.n	326c <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    324c:	2374      	movs	r3, #116	; 0x74
    324e:	33ff      	adds	r3, #255	; 0xff
    3250:	001a      	movs	r2, r3
    3252:	491a      	ldr	r1, [pc, #104]	; (32bc <nm_drv_deinit+0xc8>)
    3254:	4b1a      	ldr	r3, [pc, #104]	; (32c0 <nm_drv_deinit+0xcc>)
    3256:	0018      	movs	r0, r3
    3258:	4b1a      	ldr	r3, [pc, #104]	; (32c4 <nm_drv_deinit+0xd0>)
    325a:	4798      	blx	r3
    325c:	4b1e      	ldr	r3, [pc, #120]	; (32d8 <nm_drv_deinit+0xe4>)
    325e:	0018      	movs	r0, r3
    3260:	4b1a      	ldr	r3, [pc, #104]	; (32cc <nm_drv_deinit+0xd8>)
    3262:	4798      	blx	r3
    3264:	200d      	movs	r0, #13
    3266:	4b1a      	ldr	r3, [pc, #104]	; (32d0 <nm_drv_deinit+0xdc>)
    3268:	4798      	blx	r3
		goto ERR1;
    326a:	e01d      	b.n	32a8 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    326c:	230f      	movs	r3, #15
    326e:	18fc      	adds	r4, r7, r3
    3270:	4b1a      	ldr	r3, [pc, #104]	; (32dc <nm_drv_deinit+0xe8>)
    3272:	4798      	blx	r3
    3274:	0003      	movs	r3, r0
    3276:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3278:	230f      	movs	r3, #15
    327a:	18fb      	adds	r3, r7, r3
    327c:	781b      	ldrb	r3, [r3, #0]
    327e:	b25b      	sxtb	r3, r3
    3280:	2b00      	cmp	r3, #0
    3282:	d00f      	beq.n	32a4 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3284:	237a      	movs	r3, #122	; 0x7a
    3286:	33ff      	adds	r3, #255	; 0xff
    3288:	001a      	movs	r2, r3
    328a:	490c      	ldr	r1, [pc, #48]	; (32bc <nm_drv_deinit+0xc8>)
    328c:	4b0c      	ldr	r3, [pc, #48]	; (32c0 <nm_drv_deinit+0xcc>)
    328e:	0018      	movs	r0, r3
    3290:	4b0c      	ldr	r3, [pc, #48]	; (32c4 <nm_drv_deinit+0xd0>)
    3292:	4798      	blx	r3
    3294:	4b12      	ldr	r3, [pc, #72]	; (32e0 <nm_drv_deinit+0xec>)
    3296:	0018      	movs	r0, r3
    3298:	4b0c      	ldr	r3, [pc, #48]	; (32cc <nm_drv_deinit+0xd8>)
    329a:	4798      	blx	r3
    329c:	200d      	movs	r0, #13
    329e:	4b0c      	ldr	r3, [pc, #48]	; (32d0 <nm_drv_deinit+0xdc>)
    32a0:	4798      	blx	r3
		goto ERR1;
    32a2:	e001      	b.n	32a8 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    32a4:	4b0f      	ldr	r3, [pc, #60]	; (32e4 <nm_drv_deinit+0xf0>)
    32a6:	4798      	blx	r3
#endif

ERR1:
	return ret;
    32a8:	230f      	movs	r3, #15
    32aa:	18fb      	adds	r3, r7, r3
    32ac:	781b      	ldrb	r3, [r3, #0]
    32ae:	b25b      	sxtb	r3, r3
}
    32b0:	0018      	movs	r0, r3
    32b2:	46bd      	mov	sp, r7
    32b4:	b005      	add	sp, #20
    32b6:	bd90      	pop	{r4, r7, pc}
    32b8:	00002b01 	.word	0x00002b01
    32bc:	00014280 	.word	0x00014280
    32c0:	000141a8 	.word	0x000141a8
    32c4:	0000f0ad 	.word	0x0000f0ad
    32c8:	00014214 	.word	0x00014214
    32cc:	0000f1c9 	.word	0x0000f1c9
    32d0:	0000f0e1 	.word	0x0000f0e1
    32d4:	0000598d 	.word	0x0000598d
    32d8:	00014234 	.word	0x00014234
    32dc:	00002bf5 	.word	0x00002bf5
    32e0:	00014258 	.word	0x00014258
    32e4:	00004681 	.word	0x00004681

000032e8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b086      	sub	sp, #24
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
    32f0:	000a      	movs	r2, r1
    32f2:	1cbb      	adds	r3, r7, #2
    32f4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    32f6:	230c      	movs	r3, #12
    32f8:	18fb      	adds	r3, r7, r3
    32fa:	2200      	movs	r2, #0
    32fc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    32fe:	230c      	movs	r3, #12
    3300:	18fb      	adds	r3, r7, r3
    3302:	687a      	ldr	r2, [r7, #4]
    3304:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3306:	230c      	movs	r3, #12
    3308:	18fb      	adds	r3, r7, r3
    330a:	1cba      	adds	r2, r7, #2
    330c:	8812      	ldrh	r2, [r2, #0]
    330e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3310:	230c      	movs	r3, #12
    3312:	18fb      	adds	r3, r7, r3
    3314:	0019      	movs	r1, r3
    3316:	2003      	movs	r0, #3
    3318:	4b03      	ldr	r3, [pc, #12]	; (3328 <nmi_spi_read+0x40>)
    331a:	4798      	blx	r3
    331c:	0003      	movs	r3, r0
}
    331e:	0018      	movs	r0, r3
    3320:	46bd      	mov	sp, r7
    3322:	b006      	add	sp, #24
    3324:	bd80      	pop	{r7, pc}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	00000ae1 	.word	0x00000ae1

0000332c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    332c:	b580      	push	{r7, lr}
    332e:	b086      	sub	sp, #24
    3330:	af00      	add	r7, sp, #0
    3332:	6078      	str	r0, [r7, #4]
    3334:	000a      	movs	r2, r1
    3336:	1cbb      	adds	r3, r7, #2
    3338:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    333a:	230c      	movs	r3, #12
    333c:	18fb      	adds	r3, r7, r3
    333e:	687a      	ldr	r2, [r7, #4]
    3340:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    3342:	230c      	movs	r3, #12
    3344:	18fb      	adds	r3, r7, r3
    3346:	2200      	movs	r2, #0
    3348:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    334a:	230c      	movs	r3, #12
    334c:	18fb      	adds	r3, r7, r3
    334e:	1cba      	adds	r2, r7, #2
    3350:	8812      	ldrh	r2, [r2, #0]
    3352:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3354:	230c      	movs	r3, #12
    3356:	18fb      	adds	r3, r7, r3
    3358:	0019      	movs	r1, r3
    335a:	2003      	movs	r0, #3
    335c:	4b03      	ldr	r3, [pc, #12]	; (336c <nmi_spi_write+0x40>)
    335e:	4798      	blx	r3
    3360:	0003      	movs	r3, r0
}
    3362:	0018      	movs	r0, r3
    3364:	46bd      	mov	sp, r7
    3366:	b006      	add	sp, #24
    3368:	bd80      	pop	{r7, pc}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	00000ae1 	.word	0x00000ae1

00003370 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    3370:	b580      	push	{r7, lr}
    3372:	b082      	sub	sp, #8
    3374:	af00      	add	r7, sp, #0
    3376:	0002      	movs	r2, r0
    3378:	1dfb      	adds	r3, r7, #7
    337a:	701a      	strb	r2, [r3, #0]
    337c:	1dbb      	adds	r3, r7, #6
    337e:	1c0a      	adds	r2, r1, #0
    3380:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    3382:	1dfb      	adds	r3, r7, #7
    3384:	781b      	ldrb	r3, [r3, #0]
    3386:	005a      	lsls	r2, r3, #1
    3388:	1dbb      	adds	r3, r7, #6
    338a:	781b      	ldrb	r3, [r3, #0]
    338c:	4053      	eors	r3, r2
    338e:	4a03      	ldr	r2, [pc, #12]	; (339c <crc7_byte+0x2c>)
    3390:	5cd3      	ldrb	r3, [r2, r3]
}
    3392:	0018      	movs	r0, r3
    3394:	46bd      	mov	sp, r7
    3396:	b002      	add	sp, #8
    3398:	bd80      	pop	{r7, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	00014290 	.word	0x00014290

000033a0 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    33a0:	b590      	push	{r4, r7, lr}
    33a2:	b085      	sub	sp, #20
    33a4:	af00      	add	r7, sp, #0
    33a6:	60b9      	str	r1, [r7, #8]
    33a8:	607a      	str	r2, [r7, #4]
    33aa:	230f      	movs	r3, #15
    33ac:	18fb      	adds	r3, r7, r3
    33ae:	1c02      	adds	r2, r0, #0
    33b0:	701a      	strb	r2, [r3, #0]
	while (len--)
    33b2:	e00e      	b.n	33d2 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    33b4:	68bb      	ldr	r3, [r7, #8]
    33b6:	1c5a      	adds	r2, r3, #1
    33b8:	60ba      	str	r2, [r7, #8]
    33ba:	781a      	ldrb	r2, [r3, #0]
    33bc:	230f      	movs	r3, #15
    33be:	18fc      	adds	r4, r7, r3
    33c0:	230f      	movs	r3, #15
    33c2:	18fb      	adds	r3, r7, r3
    33c4:	781b      	ldrb	r3, [r3, #0]
    33c6:	0011      	movs	r1, r2
    33c8:	0018      	movs	r0, r3
    33ca:	4b08      	ldr	r3, [pc, #32]	; (33ec <crc7+0x4c>)
    33cc:	4798      	blx	r3
    33ce:	0003      	movs	r3, r0
    33d0:	7023      	strb	r3, [r4, #0]
	while (len--)
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	1e5a      	subs	r2, r3, #1
    33d6:	607a      	str	r2, [r7, #4]
    33d8:	2b00      	cmp	r3, #0
    33da:	d1eb      	bne.n	33b4 <crc7+0x14>
	return crc;
    33dc:	230f      	movs	r3, #15
    33de:	18fb      	adds	r3, r7, r3
    33e0:	781b      	ldrb	r3, [r3, #0]
}
    33e2:	0018      	movs	r0, r3
    33e4:	46bd      	mov	sp, r7
    33e6:	b005      	add	sp, #20
    33e8:	bd90      	pop	{r4, r7, pc}
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	00003371 	.word	0x00003371

000033f0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    33f0:	b590      	push	{r4, r7, lr}
    33f2:	b089      	sub	sp, #36	; 0x24
    33f4:	af00      	add	r7, sp, #0
    33f6:	60b9      	str	r1, [r7, #8]
    33f8:	607a      	str	r2, [r7, #4]
    33fa:	603b      	str	r3, [r7, #0]
    33fc:	230f      	movs	r3, #15
    33fe:	18fb      	adds	r3, r7, r3
    3400:	1c02      	adds	r2, r0, #0
    3402:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    3404:	231f      	movs	r3, #31
    3406:	18fb      	adds	r3, r7, r3
    3408:	2205      	movs	r2, #5
    340a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    340c:	231e      	movs	r3, #30
    340e:	18fb      	adds	r3, r7, r3
    3410:	2201      	movs	r2, #1
    3412:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    3414:	2314      	movs	r3, #20
    3416:	18fb      	adds	r3, r7, r3
    3418:	220f      	movs	r2, #15
    341a:	18ba      	adds	r2, r7, r2
    341c:	7812      	ldrb	r2, [r2, #0]
    341e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    3420:	230f      	movs	r3, #15
    3422:	18fb      	adds	r3, r7, r3
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	3bc1      	subs	r3, #193	; 0xc1
    3428:	2b0e      	cmp	r3, #14
    342a:	d900      	bls.n	342e <spi_cmd+0x3e>
    342c:	e11b      	b.n	3666 <spi_cmd+0x276>
    342e:	009a      	lsls	r2, r3, #2
    3430:	4bb6      	ldr	r3, [pc, #728]	; (370c <spi_cmd+0x31c>)
    3432:	18d3      	adds	r3, r2, r3
    3434:	681b      	ldr	r3, [r3, #0]
    3436:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    3438:	68bb      	ldr	r3, [r7, #8]
    343a:	0c1b      	lsrs	r3, r3, #16
    343c:	b2da      	uxtb	r2, r3
    343e:	2314      	movs	r3, #20
    3440:	18fb      	adds	r3, r7, r3
    3442:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3444:	68bb      	ldr	r3, [r7, #8]
    3446:	0a1b      	lsrs	r3, r3, #8
    3448:	b2da      	uxtb	r2, r3
    344a:	2314      	movs	r3, #20
    344c:	18fb      	adds	r3, r7, r3
    344e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3450:	68bb      	ldr	r3, [r7, #8]
    3452:	b2da      	uxtb	r2, r3
    3454:	2314      	movs	r3, #20
    3456:	18fb      	adds	r3, r7, r3
    3458:	70da      	strb	r2, [r3, #3]
		len = 5;
    345a:	231f      	movs	r3, #31
    345c:	18fb      	adds	r3, r7, r3
    345e:	2205      	movs	r2, #5
    3460:	701a      	strb	r2, [r3, #0]
		break;
    3462:	e105      	b.n	3670 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    3464:	68bb      	ldr	r3, [r7, #8]
    3466:	0a1b      	lsrs	r3, r3, #8
    3468:	b2da      	uxtb	r2, r3
    346a:	2314      	movs	r3, #20
    346c:	18fb      	adds	r3, r7, r3
    346e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3470:	2330      	movs	r3, #48	; 0x30
    3472:	18fb      	adds	r3, r7, r3
    3474:	781b      	ldrb	r3, [r3, #0]
    3476:	2b00      	cmp	r3, #0
    3478:	d009      	beq.n	348e <spi_cmd+0x9e>
    347a:	2314      	movs	r3, #20
    347c:	18fb      	adds	r3, r7, r3
    347e:	785b      	ldrb	r3, [r3, #1]
    3480:	2280      	movs	r2, #128	; 0x80
    3482:	4252      	negs	r2, r2
    3484:	4313      	orrs	r3, r2
    3486:	b2da      	uxtb	r2, r3
    3488:	2314      	movs	r3, #20
    348a:	18fb      	adds	r3, r7, r3
    348c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    348e:	68bb      	ldr	r3, [r7, #8]
    3490:	b2da      	uxtb	r2, r3
    3492:	2314      	movs	r3, #20
    3494:	18fb      	adds	r3, r7, r3
    3496:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3498:	2314      	movs	r3, #20
    349a:	18fb      	adds	r3, r7, r3
    349c:	2200      	movs	r2, #0
    349e:	70da      	strb	r2, [r3, #3]
		len = 5;
    34a0:	231f      	movs	r3, #31
    34a2:	18fb      	adds	r3, r7, r3
    34a4:	2205      	movs	r2, #5
    34a6:	701a      	strb	r2, [r3, #0]
		break;
    34a8:	e0e2      	b.n	3670 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    34aa:	2314      	movs	r3, #20
    34ac:	18fb      	adds	r3, r7, r3
    34ae:	2200      	movs	r2, #0
    34b0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    34b2:	2314      	movs	r3, #20
    34b4:	18fb      	adds	r3, r7, r3
    34b6:	2200      	movs	r2, #0
    34b8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    34ba:	2314      	movs	r3, #20
    34bc:	18fb      	adds	r3, r7, r3
    34be:	2200      	movs	r2, #0
    34c0:	70da      	strb	r2, [r3, #3]
		len = 5;
    34c2:	231f      	movs	r3, #31
    34c4:	18fb      	adds	r3, r7, r3
    34c6:	2205      	movs	r2, #5
    34c8:	701a      	strb	r2, [r3, #0]
		break;
    34ca:	e0d1      	b.n	3670 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    34cc:	2314      	movs	r3, #20
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	2200      	movs	r2, #0
    34d2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    34d4:	2314      	movs	r3, #20
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	2200      	movs	r2, #0
    34da:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    34dc:	2314      	movs	r3, #20
    34de:	18fb      	adds	r3, r7, r3
    34e0:	2200      	movs	r2, #0
    34e2:	70da      	strb	r2, [r3, #3]
		len = 5;
    34e4:	231f      	movs	r3, #31
    34e6:	18fb      	adds	r3, r7, r3
    34e8:	2205      	movs	r2, #5
    34ea:	701a      	strb	r2, [r3, #0]
		break;
    34ec:	e0c0      	b.n	3670 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    34ee:	2314      	movs	r3, #20
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	22ff      	movs	r2, #255	; 0xff
    34f4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    34f6:	2314      	movs	r3, #20
    34f8:	18fb      	adds	r3, r7, r3
    34fa:	22ff      	movs	r2, #255	; 0xff
    34fc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    34fe:	2314      	movs	r3, #20
    3500:	18fb      	adds	r3, r7, r3
    3502:	22ff      	movs	r2, #255	; 0xff
    3504:	70da      	strb	r2, [r3, #3]
		len = 5;
    3506:	231f      	movs	r3, #31
    3508:	18fb      	adds	r3, r7, r3
    350a:	2205      	movs	r2, #5
    350c:	701a      	strb	r2, [r3, #0]
		break;
    350e:	e0af      	b.n	3670 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3510:	68bb      	ldr	r3, [r7, #8]
    3512:	0c1b      	lsrs	r3, r3, #16
    3514:	b2da      	uxtb	r2, r3
    3516:	2314      	movs	r3, #20
    3518:	18fb      	adds	r3, r7, r3
    351a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    351c:	68bb      	ldr	r3, [r7, #8]
    351e:	0a1b      	lsrs	r3, r3, #8
    3520:	b2da      	uxtb	r2, r3
    3522:	2314      	movs	r3, #20
    3524:	18fb      	adds	r3, r7, r3
    3526:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3528:	68bb      	ldr	r3, [r7, #8]
    352a:	b2da      	uxtb	r2, r3
    352c:	2314      	movs	r3, #20
    352e:	18fb      	adds	r3, r7, r3
    3530:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    3532:	683b      	ldr	r3, [r7, #0]
    3534:	0a1b      	lsrs	r3, r3, #8
    3536:	b2da      	uxtb	r2, r3
    3538:	2314      	movs	r3, #20
    353a:	18fb      	adds	r3, r7, r3
    353c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    353e:	683b      	ldr	r3, [r7, #0]
    3540:	b2da      	uxtb	r2, r3
    3542:	2314      	movs	r3, #20
    3544:	18fb      	adds	r3, r7, r3
    3546:	715a      	strb	r2, [r3, #5]
		len = 7;
    3548:	231f      	movs	r3, #31
    354a:	18fb      	adds	r3, r7, r3
    354c:	2207      	movs	r2, #7
    354e:	701a      	strb	r2, [r3, #0]
		break;
    3550:	e08e      	b.n	3670 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    3552:	68bb      	ldr	r3, [r7, #8]
    3554:	0c1b      	lsrs	r3, r3, #16
    3556:	b2da      	uxtb	r2, r3
    3558:	2314      	movs	r3, #20
    355a:	18fb      	adds	r3, r7, r3
    355c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    355e:	68bb      	ldr	r3, [r7, #8]
    3560:	0a1b      	lsrs	r3, r3, #8
    3562:	b2da      	uxtb	r2, r3
    3564:	2314      	movs	r3, #20
    3566:	18fb      	adds	r3, r7, r3
    3568:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    356a:	68bb      	ldr	r3, [r7, #8]
    356c:	b2da      	uxtb	r2, r3
    356e:	2314      	movs	r3, #20
    3570:	18fb      	adds	r3, r7, r3
    3572:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    3574:	683b      	ldr	r3, [r7, #0]
    3576:	0c1b      	lsrs	r3, r3, #16
    3578:	b2da      	uxtb	r2, r3
    357a:	2314      	movs	r3, #20
    357c:	18fb      	adds	r3, r7, r3
    357e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    3580:	683b      	ldr	r3, [r7, #0]
    3582:	0a1b      	lsrs	r3, r3, #8
    3584:	b2da      	uxtb	r2, r3
    3586:	2314      	movs	r3, #20
    3588:	18fb      	adds	r3, r7, r3
    358a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    358c:	683b      	ldr	r3, [r7, #0]
    358e:	b2da      	uxtb	r2, r3
    3590:	2314      	movs	r3, #20
    3592:	18fb      	adds	r3, r7, r3
    3594:	719a      	strb	r2, [r3, #6]
		len = 8;
    3596:	231f      	movs	r3, #31
    3598:	18fb      	adds	r3, r7, r3
    359a:	2208      	movs	r2, #8
    359c:	701a      	strb	r2, [r3, #0]
		break;
    359e:	e067      	b.n	3670 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    35a0:	68bb      	ldr	r3, [r7, #8]
    35a2:	0a1b      	lsrs	r3, r3, #8
    35a4:	b2da      	uxtb	r2, r3
    35a6:	2314      	movs	r3, #20
    35a8:	18fb      	adds	r3, r7, r3
    35aa:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    35ac:	2330      	movs	r3, #48	; 0x30
    35ae:	18fb      	adds	r3, r7, r3
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	2b00      	cmp	r3, #0
    35b4:	d009      	beq.n	35ca <spi_cmd+0x1da>
    35b6:	2314      	movs	r3, #20
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	785b      	ldrb	r3, [r3, #1]
    35bc:	2280      	movs	r2, #128	; 0x80
    35be:	4252      	negs	r2, r2
    35c0:	4313      	orrs	r3, r2
    35c2:	b2da      	uxtb	r2, r3
    35c4:	2314      	movs	r3, #20
    35c6:	18fb      	adds	r3, r7, r3
    35c8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    35ca:	68bb      	ldr	r3, [r7, #8]
    35cc:	b2da      	uxtb	r2, r3
    35ce:	2314      	movs	r3, #20
    35d0:	18fb      	adds	r3, r7, r3
    35d2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	0e1b      	lsrs	r3, r3, #24
    35d8:	b2da      	uxtb	r2, r3
    35da:	2314      	movs	r3, #20
    35dc:	18fb      	adds	r3, r7, r3
    35de:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	0c1b      	lsrs	r3, r3, #16
    35e4:	b2da      	uxtb	r2, r3
    35e6:	2314      	movs	r3, #20
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	0a1b      	lsrs	r3, r3, #8
    35f0:	b2da      	uxtb	r2, r3
    35f2:	2314      	movs	r3, #20
    35f4:	18fb      	adds	r3, r7, r3
    35f6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	b2da      	uxtb	r2, r3
    35fc:	2314      	movs	r3, #20
    35fe:	18fb      	adds	r3, r7, r3
    3600:	719a      	strb	r2, [r3, #6]
		len = 8;
    3602:	231f      	movs	r3, #31
    3604:	18fb      	adds	r3, r7, r3
    3606:	2208      	movs	r2, #8
    3608:	701a      	strb	r2, [r3, #0]
		break;
    360a:	e031      	b.n	3670 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    360c:	68bb      	ldr	r3, [r7, #8]
    360e:	0c1b      	lsrs	r3, r3, #16
    3610:	b2da      	uxtb	r2, r3
    3612:	2314      	movs	r3, #20
    3614:	18fb      	adds	r3, r7, r3
    3616:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3618:	68bb      	ldr	r3, [r7, #8]
    361a:	0a1b      	lsrs	r3, r3, #8
    361c:	b2da      	uxtb	r2, r3
    361e:	2314      	movs	r3, #20
    3620:	18fb      	adds	r3, r7, r3
    3622:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    3624:	68bb      	ldr	r3, [r7, #8]
    3626:	b2da      	uxtb	r2, r3
    3628:	2314      	movs	r3, #20
    362a:	18fb      	adds	r3, r7, r3
    362c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	0e1b      	lsrs	r3, r3, #24
    3632:	b2da      	uxtb	r2, r3
    3634:	2314      	movs	r3, #20
    3636:	18fb      	adds	r3, r7, r3
    3638:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	0c1b      	lsrs	r3, r3, #16
    363e:	b2da      	uxtb	r2, r3
    3640:	2314      	movs	r3, #20
    3642:	18fb      	adds	r3, r7, r3
    3644:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	0a1b      	lsrs	r3, r3, #8
    364a:	b2da      	uxtb	r2, r3
    364c:	2314      	movs	r3, #20
    364e:	18fb      	adds	r3, r7, r3
    3650:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	b2da      	uxtb	r2, r3
    3656:	2314      	movs	r3, #20
    3658:	18fb      	adds	r3, r7, r3
    365a:	71da      	strb	r2, [r3, #7]
		len = 9;
    365c:	231f      	movs	r3, #31
    365e:	18fb      	adds	r3, r7, r3
    3660:	2209      	movs	r2, #9
    3662:	701a      	strb	r2, [r3, #0]
		break;
    3664:	e004      	b.n	3670 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    3666:	231e      	movs	r3, #30
    3668:	18fb      	adds	r3, r7, r3
    366a:	2200      	movs	r2, #0
    366c:	701a      	strb	r2, [r3, #0]
		break;
    366e:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3670:	231e      	movs	r3, #30
    3672:	18fb      	adds	r3, r7, r3
    3674:	781b      	ldrb	r3, [r3, #0]
    3676:	b25b      	sxtb	r3, r3
    3678:	2b00      	cmp	r3, #0
    367a:	d03f      	beq.n	36fc <spi_cmd+0x30c>
		if (!gu8Crc_off)
    367c:	4b24      	ldr	r3, [pc, #144]	; (3710 <spi_cmd+0x320>)
    367e:	781b      	ldrb	r3, [r3, #0]
    3680:	2b00      	cmp	r3, #0
    3682:	d115      	bne.n	36b0 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3684:	231f      	movs	r3, #31
    3686:	18fb      	adds	r3, r7, r3
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	1e5c      	subs	r4, r3, #1
    368c:	231f      	movs	r3, #31
    368e:	18fb      	adds	r3, r7, r3
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	3b01      	subs	r3, #1
    3694:	001a      	movs	r2, r3
    3696:	2314      	movs	r3, #20
    3698:	18fb      	adds	r3, r7, r3
    369a:	0019      	movs	r1, r3
    369c:	207f      	movs	r0, #127	; 0x7f
    369e:	4b1d      	ldr	r3, [pc, #116]	; (3714 <spi_cmd+0x324>)
    36a0:	4798      	blx	r3
    36a2:	0003      	movs	r3, r0
    36a4:	18db      	adds	r3, r3, r3
    36a6:	b2da      	uxtb	r2, r3
    36a8:	2314      	movs	r3, #20
    36aa:	18fb      	adds	r3, r7, r3
    36ac:	551a      	strb	r2, [r3, r4]
    36ae:	e006      	b.n	36be <spi_cmd+0x2ce>
		else
			len-=1;
    36b0:	231f      	movs	r3, #31
    36b2:	18fb      	adds	r3, r7, r3
    36b4:	221f      	movs	r2, #31
    36b6:	18ba      	adds	r2, r7, r2
    36b8:	7812      	ldrb	r2, [r2, #0]
    36ba:	3a01      	subs	r2, #1
    36bc:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    36be:	231f      	movs	r3, #31
    36c0:	18fb      	adds	r3, r7, r3
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	b29a      	uxth	r2, r3
    36c6:	2314      	movs	r3, #20
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	0011      	movs	r1, r2
    36cc:	0018      	movs	r0, r3
    36ce:	4b12      	ldr	r3, [pc, #72]	; (3718 <spi_cmd+0x328>)
    36d0:	4798      	blx	r3
    36d2:	1e03      	subs	r3, r0, #0
    36d4:	d012      	beq.n	36fc <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    36d6:	2328      	movs	r3, #40	; 0x28
    36d8:	33ff      	adds	r3, #255	; 0xff
    36da:	001a      	movs	r2, r3
    36dc:	490f      	ldr	r1, [pc, #60]	; (371c <spi_cmd+0x32c>)
    36de:	4b10      	ldr	r3, [pc, #64]	; (3720 <spi_cmd+0x330>)
    36e0:	0018      	movs	r0, r3
    36e2:	4b10      	ldr	r3, [pc, #64]	; (3724 <spi_cmd+0x334>)
    36e4:	4798      	blx	r3
    36e6:	4b10      	ldr	r3, [pc, #64]	; (3728 <spi_cmd+0x338>)
    36e8:	0018      	movs	r0, r3
    36ea:	4b10      	ldr	r3, [pc, #64]	; (372c <spi_cmd+0x33c>)
    36ec:	4798      	blx	r3
    36ee:	200d      	movs	r0, #13
    36f0:	4b0f      	ldr	r3, [pc, #60]	; (3730 <spi_cmd+0x340>)
    36f2:	4798      	blx	r3
			result = N_FAIL;
    36f4:	231e      	movs	r3, #30
    36f6:	18fb      	adds	r3, r7, r3
    36f8:	2200      	movs	r2, #0
    36fa:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    36fc:	231e      	movs	r3, #30
    36fe:	18fb      	adds	r3, r7, r3
    3700:	781b      	ldrb	r3, [r3, #0]
    3702:	b25b      	sxtb	r3, r3
}
    3704:	0018      	movs	r0, r3
    3706:	46bd      	mov	sp, r7
    3708:	b009      	add	sp, #36	; 0x24
    370a:	bd90      	pop	{r4, r7, pc}
    370c:	000148e8 	.word	0x000148e8
    3710:	2000027c 	.word	0x2000027c
    3714:	000033a1 	.word	0x000033a1
    3718:	0000332d 	.word	0x0000332d
    371c:	00014924 	.word	0x00014924
    3720:	00014390 	.word	0x00014390
    3724:	0000f0ad 	.word	0x0000f0ad
    3728:	000143a4 	.word	0x000143a4
    372c:	0000f1c9 	.word	0x0000f1c9
    3730:	0000f0e1 	.word	0x0000f0e1

00003734 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    3734:	b590      	push	{r4, r7, lr}
    3736:	b085      	sub	sp, #20
    3738:	af00      	add	r7, sp, #0
    373a:	0002      	movs	r2, r0
    373c:	1dfb      	adds	r3, r7, #7
    373e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    3740:	230e      	movs	r3, #14
    3742:	18fb      	adds	r3, r7, r3
    3744:	2201      	movs	r2, #1
    3746:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    3748:	4b31      	ldr	r3, [pc, #196]	; (3810 <spi_data_rsp+0xdc>)
    374a:	781b      	ldrb	r3, [r3, #0]
    374c:	2b00      	cmp	r3, #0
    374e:	d104      	bne.n	375a <spi_data_rsp+0x26>
		len = 2;
    3750:	230f      	movs	r3, #15
    3752:	18fb      	adds	r3, r7, r3
    3754:	2202      	movs	r2, #2
    3756:	701a      	strb	r2, [r3, #0]
    3758:	e003      	b.n	3762 <spi_data_rsp+0x2e>
	else
		len = 3;
    375a:	230f      	movs	r3, #15
    375c:	18fb      	adds	r3, r7, r3
    375e:	2203      	movs	r2, #3
    3760:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3762:	230f      	movs	r3, #15
    3764:	18fb      	adds	r3, r7, r3
    3766:	781b      	ldrb	r3, [r3, #0]
    3768:	b29a      	uxth	r2, r3
    376a:	2308      	movs	r3, #8
    376c:	18fb      	adds	r3, r7, r3
    376e:	0011      	movs	r1, r2
    3770:	0018      	movs	r0, r3
    3772:	4b28      	ldr	r3, [pc, #160]	; (3814 <spi_data_rsp+0xe0>)
    3774:	4798      	blx	r3
    3776:	1e03      	subs	r3, r0, #0
    3778:	d013      	beq.n	37a2 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    377a:	233c      	movs	r3, #60	; 0x3c
    377c:	33ff      	adds	r3, #255	; 0xff
    377e:	001a      	movs	r2, r3
    3780:	4925      	ldr	r1, [pc, #148]	; (3818 <spi_data_rsp+0xe4>)
    3782:	4b26      	ldr	r3, [pc, #152]	; (381c <spi_data_rsp+0xe8>)
    3784:	0018      	movs	r0, r3
    3786:	4b26      	ldr	r3, [pc, #152]	; (3820 <spi_data_rsp+0xec>)
    3788:	4798      	blx	r3
    378a:	4b26      	ldr	r3, [pc, #152]	; (3824 <spi_data_rsp+0xf0>)
    378c:	0018      	movs	r0, r3
    378e:	4b26      	ldr	r3, [pc, #152]	; (3828 <spi_data_rsp+0xf4>)
    3790:	4798      	blx	r3
    3792:	200d      	movs	r0, #13
    3794:	4b25      	ldr	r3, [pc, #148]	; (382c <spi_data_rsp+0xf8>)
    3796:	4798      	blx	r3
		result = N_FAIL;
    3798:	230e      	movs	r3, #14
    379a:	18fb      	adds	r3, r7, r3
    379c:	2200      	movs	r2, #0
    379e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    37a0:	e02e      	b.n	3800 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    37a2:	230f      	movs	r3, #15
    37a4:	18fb      	adds	r3, r7, r3
    37a6:	781b      	ldrb	r3, [r3, #0]
    37a8:	3b01      	subs	r3, #1
    37aa:	2208      	movs	r2, #8
    37ac:	18ba      	adds	r2, r7, r2
    37ae:	5cd3      	ldrb	r3, [r2, r3]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d108      	bne.n	37c6 <spi_data_rsp+0x92>
    37b4:	230f      	movs	r3, #15
    37b6:	18fb      	adds	r3, r7, r3
    37b8:	781b      	ldrb	r3, [r3, #0]
    37ba:	3b02      	subs	r3, #2
    37bc:	2208      	movs	r2, #8
    37be:	18ba      	adds	r2, r7, r2
    37c0:	5cd3      	ldrb	r3, [r2, r3]
    37c2:	2bc3      	cmp	r3, #195	; 0xc3
    37c4:	d01c      	beq.n	3800 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    37c6:	23a1      	movs	r3, #161	; 0xa1
    37c8:	005a      	lsls	r2, r3, #1
    37ca:	4913      	ldr	r1, [pc, #76]	; (3818 <spi_data_rsp+0xe4>)
    37cc:	4b13      	ldr	r3, [pc, #76]	; (381c <spi_data_rsp+0xe8>)
    37ce:	0018      	movs	r0, r3
    37d0:	4b13      	ldr	r3, [pc, #76]	; (3820 <spi_data_rsp+0xec>)
    37d2:	4798      	blx	r3
    37d4:	2308      	movs	r3, #8
    37d6:	18fb      	adds	r3, r7, r3
    37d8:	781b      	ldrb	r3, [r3, #0]
    37da:	0019      	movs	r1, r3
    37dc:	2308      	movs	r3, #8
    37de:	18fb      	adds	r3, r7, r3
    37e0:	785b      	ldrb	r3, [r3, #1]
    37e2:	001a      	movs	r2, r3
    37e4:	2308      	movs	r3, #8
    37e6:	18fb      	adds	r3, r7, r3
    37e8:	789b      	ldrb	r3, [r3, #2]
    37ea:	4811      	ldr	r0, [pc, #68]	; (3830 <spi_data_rsp+0xfc>)
    37ec:	4c0c      	ldr	r4, [pc, #48]	; (3820 <spi_data_rsp+0xec>)
    37ee:	47a0      	blx	r4
    37f0:	200d      	movs	r0, #13
    37f2:	4b0e      	ldr	r3, [pc, #56]	; (382c <spi_data_rsp+0xf8>)
    37f4:	4798      	blx	r3
		result = N_FAIL;
    37f6:	230e      	movs	r3, #14
    37f8:	18fb      	adds	r3, r7, r3
    37fa:	2200      	movs	r2, #0
    37fc:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    37fe:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    3800:	230e      	movs	r3, #14
    3802:	18fb      	adds	r3, r7, r3
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	b25b      	sxtb	r3, r3
}
    3808:	0018      	movs	r0, r3
    380a:	46bd      	mov	sp, r7
    380c:	b005      	add	sp, #20
    380e:	bd90      	pop	{r4, r7, pc}
    3810:	2000027c 	.word	0x2000027c
    3814:	000032e9 	.word	0x000032e9
    3818:	0001492c 	.word	0x0001492c
    381c:	00014390 	.word	0x00014390
    3820:	0000f0ad 	.word	0x0000f0ad
    3824:	000143d0 	.word	0x000143d0
    3828:	0000f1c9 	.word	0x0000f1c9
    382c:	0000f0e1 	.word	0x0000f0e1
    3830:	000143f0 	.word	0x000143f0

00003834 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	0002      	movs	r2, r0
    383c:	1dfb      	adds	r3, r7, #7
    383e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    3840:	230f      	movs	r3, #15
    3842:	18fb      	adds	r3, r7, r3
    3844:	2201      	movs	r2, #1
    3846:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3848:	1dfb      	adds	r3, r7, #7
    384a:	781b      	ldrb	r3, [r3, #0]
    384c:	2bcf      	cmp	r3, #207	; 0xcf
    384e:	d007      	beq.n	3860 <spi_cmd_rsp+0x2c>
    3850:	1dfb      	adds	r3, r7, #7
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	2bc5      	cmp	r3, #197	; 0xc5
    3856:	d003      	beq.n	3860 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    3858:	1dfb      	adds	r3, r7, #7
    385a:	781b      	ldrb	r3, [r3, #0]
    385c:	2bc6      	cmp	r3, #198	; 0xc6
    385e:	d10c      	bne.n	387a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3860:	230d      	movs	r3, #13
    3862:	18fb      	adds	r3, r7, r3
    3864:	2101      	movs	r1, #1
    3866:	0018      	movs	r0, r3
    3868:	4b39      	ldr	r3, [pc, #228]	; (3950 <spi_cmd_rsp+0x11c>)
    386a:	4798      	blx	r3
    386c:	1e03      	subs	r3, r0, #0
    386e:	d004      	beq.n	387a <spi_cmd_rsp+0x46>
			result = N_FAIL;
    3870:	230f      	movs	r3, #15
    3872:	18fb      	adds	r3, r7, r3
    3874:	2200      	movs	r2, #0
    3876:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3878:	e061      	b.n	393e <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    387a:	230e      	movs	r3, #14
    387c:	18fb      	adds	r3, r7, r3
    387e:	220a      	movs	r2, #10
    3880:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3882:	230d      	movs	r3, #13
    3884:	18fb      	adds	r3, r7, r3
    3886:	2101      	movs	r1, #1
    3888:	0018      	movs	r0, r3
    388a:	4b31      	ldr	r3, [pc, #196]	; (3950 <spi_cmd_rsp+0x11c>)
    388c:	4798      	blx	r3
    388e:	1e03      	subs	r3, r0, #0
    3890:	d012      	beq.n	38b8 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3892:	23b1      	movs	r3, #177	; 0xb1
    3894:	005a      	lsls	r2, r3, #1
    3896:	492f      	ldr	r1, [pc, #188]	; (3954 <spi_cmd_rsp+0x120>)
    3898:	4b2f      	ldr	r3, [pc, #188]	; (3958 <spi_cmd_rsp+0x124>)
    389a:	0018      	movs	r0, r3
    389c:	4b2f      	ldr	r3, [pc, #188]	; (395c <spi_cmd_rsp+0x128>)
    389e:	4798      	blx	r3
    38a0:	4b2f      	ldr	r3, [pc, #188]	; (3960 <spi_cmd_rsp+0x12c>)
    38a2:	0018      	movs	r0, r3
    38a4:	4b2f      	ldr	r3, [pc, #188]	; (3964 <spi_cmd_rsp+0x130>)
    38a6:	4798      	blx	r3
    38a8:	200d      	movs	r0, #13
    38aa:	4b2f      	ldr	r3, [pc, #188]	; (3968 <spi_cmd_rsp+0x134>)
    38ac:	4798      	blx	r3
			result = N_FAIL;
    38ae:	230f      	movs	r3, #15
    38b0:	18fb      	adds	r3, r7, r3
    38b2:	2200      	movs	r2, #0
    38b4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    38b6:	e042      	b.n	393e <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    38b8:	230d      	movs	r3, #13
    38ba:	18fb      	adds	r3, r7, r3
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	1dfa      	adds	r2, r7, #7
    38c0:	7812      	ldrb	r2, [r2, #0]
    38c2:	429a      	cmp	r2, r3
    38c4:	d00b      	beq.n	38de <spi_cmd_rsp+0xaa>
    38c6:	230e      	movs	r3, #14
    38c8:	18fb      	adds	r3, r7, r3
    38ca:	781b      	ldrb	r3, [r3, #0]
    38cc:	b25b      	sxtb	r3, r3
    38ce:	b2da      	uxtb	r2, r3
    38d0:	3a01      	subs	r2, #1
    38d2:	b2d1      	uxtb	r1, r2
    38d4:	220e      	movs	r2, #14
    38d6:	18ba      	adds	r2, r7, r2
    38d8:	7011      	strb	r1, [r2, #0]
    38da:	2b00      	cmp	r3, #0
    38dc:	dcd1      	bgt.n	3882 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    38de:	230e      	movs	r3, #14
    38e0:	18fb      	adds	r3, r7, r3
    38e2:	220a      	movs	r2, #10
    38e4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    38e6:	230d      	movs	r3, #13
    38e8:	18fb      	adds	r3, r7, r3
    38ea:	2101      	movs	r1, #1
    38ec:	0018      	movs	r0, r3
    38ee:	4b18      	ldr	r3, [pc, #96]	; (3950 <spi_cmd_rsp+0x11c>)
    38f0:	4798      	blx	r3
    38f2:	1e03      	subs	r3, r0, #0
    38f4:	d012      	beq.n	391c <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    38f6:	23b8      	movs	r3, #184	; 0xb8
    38f8:	005a      	lsls	r2, r3, #1
    38fa:	4916      	ldr	r1, [pc, #88]	; (3954 <spi_cmd_rsp+0x120>)
    38fc:	4b16      	ldr	r3, [pc, #88]	; (3958 <spi_cmd_rsp+0x124>)
    38fe:	0018      	movs	r0, r3
    3900:	4b16      	ldr	r3, [pc, #88]	; (395c <spi_cmd_rsp+0x128>)
    3902:	4798      	blx	r3
    3904:	4b16      	ldr	r3, [pc, #88]	; (3960 <spi_cmd_rsp+0x12c>)
    3906:	0018      	movs	r0, r3
    3908:	4b16      	ldr	r3, [pc, #88]	; (3964 <spi_cmd_rsp+0x130>)
    390a:	4798      	blx	r3
    390c:	200d      	movs	r0, #13
    390e:	4b16      	ldr	r3, [pc, #88]	; (3968 <spi_cmd_rsp+0x134>)
    3910:	4798      	blx	r3
			result = N_FAIL;
    3912:	230f      	movs	r3, #15
    3914:	18fb      	adds	r3, r7, r3
    3916:	2200      	movs	r2, #0
    3918:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    391a:	e010      	b.n	393e <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    391c:	230d      	movs	r3, #13
    391e:	18fb      	adds	r3, r7, r3
    3920:	781b      	ldrb	r3, [r3, #0]
    3922:	2b00      	cmp	r3, #0
    3924:	d00b      	beq.n	393e <spi_cmd_rsp+0x10a>
    3926:	230e      	movs	r3, #14
    3928:	18fb      	adds	r3, r7, r3
    392a:	781b      	ldrb	r3, [r3, #0]
    392c:	b25b      	sxtb	r3, r3
    392e:	b2da      	uxtb	r2, r3
    3930:	3a01      	subs	r2, #1
    3932:	b2d1      	uxtb	r1, r2
    3934:	220e      	movs	r2, #14
    3936:	18ba      	adds	r2, r7, r2
    3938:	7011      	strb	r1, [r2, #0]
    393a:	2b00      	cmp	r3, #0
    393c:	dcd3      	bgt.n	38e6 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    393e:	230f      	movs	r3, #15
    3940:	18fb      	adds	r3, r7, r3
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	b25b      	sxtb	r3, r3
}
    3946:	0018      	movs	r0, r3
    3948:	46bd      	mov	sp, r7
    394a:	b004      	add	sp, #16
    394c:	bd80      	pop	{r7, pc}
    394e:	46c0      	nop			; (mov r8, r8)
    3950:	000032e9 	.word	0x000032e9
    3954:	0001493c 	.word	0x0001493c
    3958:	00014390 	.word	0x00014390
    395c:	0000f0ad 	.word	0x0000f0ad
    3960:	00014420 	.word	0x00014420
    3964:	0000f1c9 	.word	0x0000f1c9
    3968:	0000f0e1 	.word	0x0000f0e1

0000396c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    396c:	b580      	push	{r7, lr}
    396e:	b086      	sub	sp, #24
    3970:	af00      	add	r7, sp, #0
    3972:	6078      	str	r0, [r7, #4]
    3974:	0008      	movs	r0, r1
    3976:	0011      	movs	r1, r2
    3978:	1cbb      	adds	r3, r7, #2
    397a:	1c02      	adds	r2, r0, #0
    397c:	801a      	strh	r2, [r3, #0]
    397e:	1c7b      	adds	r3, r7, #1
    3980:	1c0a      	adds	r2, r1, #0
    3982:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    3984:	2311      	movs	r3, #17
    3986:	18fb      	adds	r3, r7, r3
    3988:	2201      	movs	r2, #1
    398a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    398c:	2314      	movs	r3, #20
    398e:	18fb      	adds	r3, r7, r3
    3990:	2200      	movs	r2, #0
    3992:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3994:	1cbb      	adds	r3, r7, #2
    3996:	881a      	ldrh	r2, [r3, #0]
    3998:	2380      	movs	r3, #128	; 0x80
    399a:	019b      	lsls	r3, r3, #6
    399c:	429a      	cmp	r2, r3
    399e:	d805      	bhi.n	39ac <spi_data_read+0x40>
			nbytes = sz;
    39a0:	2312      	movs	r3, #18
    39a2:	18fb      	adds	r3, r7, r3
    39a4:	1cba      	adds	r2, r7, #2
    39a6:	8812      	ldrh	r2, [r2, #0]
    39a8:	801a      	strh	r2, [r3, #0]
    39aa:	e004      	b.n	39b6 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    39ac:	2312      	movs	r3, #18
    39ae:	18fb      	adds	r3, r7, r3
    39b0:	2280      	movs	r2, #128	; 0x80
    39b2:	0192      	lsls	r2, r2, #6
    39b4:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    39b6:	2316      	movs	r3, #22
    39b8:	18fb      	adds	r3, r7, r3
    39ba:	220a      	movs	r2, #10
    39bc:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    39be:	230b      	movs	r3, #11
    39c0:	18fb      	adds	r3, r7, r3
    39c2:	2101      	movs	r1, #1
    39c4:	0018      	movs	r0, r3
    39c6:	4b5c      	ldr	r3, [pc, #368]	; (3b38 <spi_data_read+0x1cc>)
    39c8:	4798      	blx	r3
    39ca:	1e03      	subs	r3, r0, #0
    39cc:	d011      	beq.n	39f2 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    39ce:	4a5b      	ldr	r2, [pc, #364]	; (3b3c <spi_data_read+0x1d0>)
    39d0:	495b      	ldr	r1, [pc, #364]	; (3b40 <spi_data_read+0x1d4>)
    39d2:	4b5c      	ldr	r3, [pc, #368]	; (3b44 <spi_data_read+0x1d8>)
    39d4:	0018      	movs	r0, r3
    39d6:	4b5c      	ldr	r3, [pc, #368]	; (3b48 <spi_data_read+0x1dc>)
    39d8:	4798      	blx	r3
    39da:	4b5c      	ldr	r3, [pc, #368]	; (3b4c <spi_data_read+0x1e0>)
    39dc:	0018      	movs	r0, r3
    39de:	4b5c      	ldr	r3, [pc, #368]	; (3b50 <spi_data_read+0x1e4>)
    39e0:	4798      	blx	r3
    39e2:	200d      	movs	r0, #13
    39e4:	4b5b      	ldr	r3, [pc, #364]	; (3b54 <spi_data_read+0x1e8>)
    39e6:	4798      	blx	r3
				result = N_FAIL;
    39e8:	2311      	movs	r3, #17
    39ea:	18fb      	adds	r3, r7, r3
    39ec:	2200      	movs	r2, #0
    39ee:	701a      	strb	r2, [r3, #0]
				break;
    39f0:	e017      	b.n	3a22 <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    39f2:	230b      	movs	r3, #11
    39f4:	18fb      	adds	r3, r7, r3
    39f6:	781b      	ldrb	r3, [r3, #0]
    39f8:	091b      	lsrs	r3, r3, #4
    39fa:	b2db      	uxtb	r3, r3
    39fc:	001a      	movs	r2, r3
    39fe:	230f      	movs	r3, #15
    3a00:	4013      	ands	r3, r2
    3a02:	2b0f      	cmp	r3, #15
    3a04:	d00c      	beq.n	3a20 <spi_data_read+0xb4>
				break;
		} while (retry--);
    3a06:	2316      	movs	r3, #22
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	2200      	movs	r2, #0
    3a0c:	5e9b      	ldrsh	r3, [r3, r2]
    3a0e:	b29a      	uxth	r2, r3
    3a10:	3a01      	subs	r2, #1
    3a12:	b291      	uxth	r1, r2
    3a14:	2216      	movs	r2, #22
    3a16:	18ba      	adds	r2, r7, r2
    3a18:	8011      	strh	r1, [r2, #0]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	d1cf      	bne.n	39be <spi_data_read+0x52>
    3a1e:	e000      	b.n	3a22 <spi_data_read+0xb6>
				break;
    3a20:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    3a22:	2311      	movs	r3, #17
    3a24:	18fb      	adds	r3, r7, r3
    3a26:	781b      	ldrb	r3, [r3, #0]
    3a28:	b25b      	sxtb	r3, r3
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d100      	bne.n	3a30 <spi_data_read+0xc4>
    3a2e:	e079      	b.n	3b24 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    3a30:	2316      	movs	r3, #22
    3a32:	18fb      	adds	r3, r7, r3
    3a34:	2200      	movs	r2, #0
    3a36:	5e9b      	ldrsh	r3, [r3, r2]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	dc16      	bgt.n	3a6a <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3a3c:	4a46      	ldr	r2, [pc, #280]	; (3b58 <spi_data_read+0x1ec>)
    3a3e:	4940      	ldr	r1, [pc, #256]	; (3b40 <spi_data_read+0x1d4>)
    3a40:	4b40      	ldr	r3, [pc, #256]	; (3b44 <spi_data_read+0x1d8>)
    3a42:	0018      	movs	r0, r3
    3a44:	4b40      	ldr	r3, [pc, #256]	; (3b48 <spi_data_read+0x1dc>)
    3a46:	4798      	blx	r3
    3a48:	230b      	movs	r3, #11
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	781b      	ldrb	r3, [r3, #0]
    3a4e:	001a      	movs	r2, r3
    3a50:	4b42      	ldr	r3, [pc, #264]	; (3b5c <spi_data_read+0x1f0>)
    3a52:	0011      	movs	r1, r2
    3a54:	0018      	movs	r0, r3
    3a56:	4b3c      	ldr	r3, [pc, #240]	; (3b48 <spi_data_read+0x1dc>)
    3a58:	4798      	blx	r3
    3a5a:	200d      	movs	r0, #13
    3a5c:	4b3d      	ldr	r3, [pc, #244]	; (3b54 <spi_data_read+0x1e8>)
    3a5e:	4798      	blx	r3
			result = N_FAIL;
    3a60:	2311      	movs	r3, #17
    3a62:	18fb      	adds	r3, r7, r3
    3a64:	2200      	movs	r2, #0
    3a66:	701a      	strb	r2, [r3, #0]
			break;
    3a68:	e05d      	b.n	3b26 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3a6a:	2314      	movs	r3, #20
    3a6c:	18fb      	adds	r3, r7, r3
    3a6e:	2200      	movs	r2, #0
    3a70:	5e9b      	ldrsh	r3, [r3, r2]
    3a72:	687a      	ldr	r2, [r7, #4]
    3a74:	18d2      	adds	r2, r2, r3
    3a76:	2312      	movs	r3, #18
    3a78:	18fb      	adds	r3, r7, r3
    3a7a:	881b      	ldrh	r3, [r3, #0]
    3a7c:	0019      	movs	r1, r3
    3a7e:	0010      	movs	r0, r2
    3a80:	4b2d      	ldr	r3, [pc, #180]	; (3b38 <spi_data_read+0x1cc>)
    3a82:	4798      	blx	r3
    3a84:	1e03      	subs	r3, r0, #0
    3a86:	d012      	beq.n	3aae <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3a88:	23c5      	movs	r3, #197	; 0xc5
    3a8a:	009a      	lsls	r2, r3, #2
    3a8c:	492c      	ldr	r1, [pc, #176]	; (3b40 <spi_data_read+0x1d4>)
    3a8e:	4b2d      	ldr	r3, [pc, #180]	; (3b44 <spi_data_read+0x1d8>)
    3a90:	0018      	movs	r0, r3
    3a92:	4b2d      	ldr	r3, [pc, #180]	; (3b48 <spi_data_read+0x1dc>)
    3a94:	4798      	blx	r3
    3a96:	4b32      	ldr	r3, [pc, #200]	; (3b60 <spi_data_read+0x1f4>)
    3a98:	0018      	movs	r0, r3
    3a9a:	4b2d      	ldr	r3, [pc, #180]	; (3b50 <spi_data_read+0x1e4>)
    3a9c:	4798      	blx	r3
    3a9e:	200d      	movs	r0, #13
    3aa0:	4b2c      	ldr	r3, [pc, #176]	; (3b54 <spi_data_read+0x1e8>)
    3aa2:	4798      	blx	r3
			result = N_FAIL;
    3aa4:	2311      	movs	r3, #17
    3aa6:	18fb      	adds	r3, r7, r3
    3aa8:	2200      	movs	r2, #0
    3aaa:	701a      	strb	r2, [r3, #0]
			break;
    3aac:	e03b      	b.n	3b26 <spi_data_read+0x1ba>
		}
		if(!clockless)
    3aae:	1c7b      	adds	r3, r7, #1
    3ab0:	781b      	ldrb	r3, [r3, #0]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d11d      	bne.n	3af2 <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3ab6:	4b2b      	ldr	r3, [pc, #172]	; (3b64 <spi_data_read+0x1f8>)
    3ab8:	781b      	ldrb	r3, [r3, #0]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d119      	bne.n	3af2 <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3abe:	230c      	movs	r3, #12
    3ac0:	18fb      	adds	r3, r7, r3
    3ac2:	2102      	movs	r1, #2
    3ac4:	0018      	movs	r0, r3
    3ac6:	4b1c      	ldr	r3, [pc, #112]	; (3b38 <spi_data_read+0x1cc>)
    3ac8:	4798      	blx	r3
    3aca:	1e03      	subs	r3, r0, #0
    3acc:	d011      	beq.n	3af2 <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3ace:	4a26      	ldr	r2, [pc, #152]	; (3b68 <spi_data_read+0x1fc>)
    3ad0:	491b      	ldr	r1, [pc, #108]	; (3b40 <spi_data_read+0x1d4>)
    3ad2:	4b1c      	ldr	r3, [pc, #112]	; (3b44 <spi_data_read+0x1d8>)
    3ad4:	0018      	movs	r0, r3
    3ad6:	4b1c      	ldr	r3, [pc, #112]	; (3b48 <spi_data_read+0x1dc>)
    3ad8:	4798      	blx	r3
    3ada:	4b24      	ldr	r3, [pc, #144]	; (3b6c <spi_data_read+0x200>)
    3adc:	0018      	movs	r0, r3
    3ade:	4b1c      	ldr	r3, [pc, #112]	; (3b50 <spi_data_read+0x1e4>)
    3ae0:	4798      	blx	r3
    3ae2:	200d      	movs	r0, #13
    3ae4:	4b1b      	ldr	r3, [pc, #108]	; (3b54 <spi_data_read+0x1e8>)
    3ae6:	4798      	blx	r3
					result = N_FAIL;
    3ae8:	2311      	movs	r3, #17
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	2200      	movs	r2, #0
    3aee:	701a      	strb	r2, [r3, #0]
					break;
    3af0:	e019      	b.n	3b26 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    3af2:	2314      	movs	r3, #20
    3af4:	18fb      	adds	r3, r7, r3
    3af6:	881a      	ldrh	r2, [r3, #0]
    3af8:	2312      	movs	r3, #18
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	881b      	ldrh	r3, [r3, #0]
    3afe:	18d3      	adds	r3, r2, r3
    3b00:	b29a      	uxth	r2, r3
    3b02:	2314      	movs	r3, #20
    3b04:	18fb      	adds	r3, r7, r3
    3b06:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3b08:	2312      	movs	r3, #18
    3b0a:	18fb      	adds	r3, r7, r3
    3b0c:	881a      	ldrh	r2, [r3, #0]
    3b0e:	1cbb      	adds	r3, r7, #2
    3b10:	1cb9      	adds	r1, r7, #2
    3b12:	8809      	ldrh	r1, [r1, #0]
    3b14:	1a8a      	subs	r2, r1, r2
    3b16:	801a      	strh	r2, [r3, #0]

	} while (sz);
    3b18:	1cbb      	adds	r3, r7, #2
    3b1a:	881b      	ldrh	r3, [r3, #0]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d000      	beq.n	3b22 <spi_data_read+0x1b6>
    3b20:	e738      	b.n	3994 <spi_data_read+0x28>
    3b22:	e000      	b.n	3b26 <spi_data_read+0x1ba>
			break;
    3b24:	46c0      	nop			; (mov r8, r8)

	return result;
    3b26:	2311      	movs	r3, #17
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	781b      	ldrb	r3, [r3, #0]
    3b2c:	b25b      	sxtb	r3, r3
}
    3b2e:	0018      	movs	r0, r3
    3b30:	46bd      	mov	sp, r7
    3b32:	b006      	add	sp, #24
    3b34:	bd80      	pop	{r7, pc}
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	000032e9 	.word	0x000032e9
    3b3c:	000002ff 	.word	0x000002ff
    3b40:	00014948 	.word	0x00014948
    3b44:	00014390 	.word	0x00014390
    3b48:	0000f0ad 	.word	0x0000f0ad
    3b4c:	00014454 	.word	0x00014454
    3b50:	0000f1c9 	.word	0x0000f1c9
    3b54:	0000f0e1 	.word	0x0000f0e1
    3b58:	0000030b 	.word	0x0000030b
    3b5c:	00014488 	.word	0x00014488
    3b60:	000144b8 	.word	0x000144b8
    3b64:	2000027c 	.word	0x2000027c
    3b68:	0000031f 	.word	0x0000031f
    3b6c:	000144e8 	.word	0x000144e8

00003b70 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3b70:	b580      	push	{r7, lr}
    3b72:	b086      	sub	sp, #24
    3b74:	af00      	add	r7, sp, #0
    3b76:	6078      	str	r0, [r7, #4]
    3b78:	000a      	movs	r2, r1
    3b7a:	1cbb      	adds	r3, r7, #2
    3b7c:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3b7e:	2313      	movs	r3, #19
    3b80:	18fb      	adds	r3, r7, r3
    3b82:	2201      	movs	r2, #1
    3b84:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    3b86:	230c      	movs	r3, #12
    3b88:	18fb      	adds	r3, r7, r3
    3b8a:	2200      	movs	r2, #0
    3b8c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3b8e:	2316      	movs	r3, #22
    3b90:	18fb      	adds	r3, r7, r3
    3b92:	2200      	movs	r2, #0
    3b94:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3b96:	1cbb      	adds	r3, r7, #2
    3b98:	881a      	ldrh	r2, [r3, #0]
    3b9a:	2380      	movs	r3, #128	; 0x80
    3b9c:	019b      	lsls	r3, r3, #6
    3b9e:	429a      	cmp	r2, r3
    3ba0:	d805      	bhi.n	3bae <spi_data_write+0x3e>
			nbytes = sz;
    3ba2:	2314      	movs	r3, #20
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	1cba      	adds	r2, r7, #2
    3ba8:	8812      	ldrh	r2, [r2, #0]
    3baa:	801a      	strh	r2, [r3, #0]
    3bac:	e004      	b.n	3bb8 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3bae:	2314      	movs	r3, #20
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	2280      	movs	r2, #128	; 0x80
    3bb4:	0192      	lsls	r2, r2, #6
    3bb6:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3bb8:	2311      	movs	r3, #17
    3bba:	18fb      	adds	r3, r7, r3
    3bbc:	22f0      	movs	r2, #240	; 0xf0
    3bbe:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3bc0:	2316      	movs	r3, #22
    3bc2:	18fb      	adds	r3, r7, r3
    3bc4:	2200      	movs	r2, #0
    3bc6:	5e9b      	ldrsh	r3, [r3, r2]
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d10f      	bne.n	3bec <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    3bcc:	1cbb      	adds	r3, r7, #2
    3bce:	881a      	ldrh	r2, [r3, #0]
    3bd0:	2380      	movs	r3, #128	; 0x80
    3bd2:	019b      	lsls	r3, r3, #6
    3bd4:	429a      	cmp	r2, r3
    3bd6:	d804      	bhi.n	3be2 <spi_data_write+0x72>
				order = 0x3;
    3bd8:	2312      	movs	r3, #18
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	2203      	movs	r2, #3
    3bde:	701a      	strb	r2, [r3, #0]
    3be0:	e013      	b.n	3c0a <spi_data_write+0x9a>
			else
				order = 0x1;
    3be2:	2312      	movs	r3, #18
    3be4:	18fb      	adds	r3, r7, r3
    3be6:	2201      	movs	r2, #1
    3be8:	701a      	strb	r2, [r3, #0]
    3bea:	e00e      	b.n	3c0a <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    3bec:	1cbb      	adds	r3, r7, #2
    3bee:	881a      	ldrh	r2, [r3, #0]
    3bf0:	2380      	movs	r3, #128	; 0x80
    3bf2:	019b      	lsls	r3, r3, #6
    3bf4:	429a      	cmp	r2, r3
    3bf6:	d804      	bhi.n	3c02 <spi_data_write+0x92>
				order = 0x3;
    3bf8:	2312      	movs	r3, #18
    3bfa:	18fb      	adds	r3, r7, r3
    3bfc:	2203      	movs	r2, #3
    3bfe:	701a      	strb	r2, [r3, #0]
    3c00:	e003      	b.n	3c0a <spi_data_write+0x9a>
			else
				order = 0x2;
    3c02:	2312      	movs	r3, #18
    3c04:	18fb      	adds	r3, r7, r3
    3c06:	2202      	movs	r2, #2
    3c08:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    3c0a:	2311      	movs	r3, #17
    3c0c:	18fb      	adds	r3, r7, r3
    3c0e:	781a      	ldrb	r2, [r3, #0]
    3c10:	2312      	movs	r3, #18
    3c12:	18fb      	adds	r3, r7, r3
    3c14:	781b      	ldrb	r3, [r3, #0]
    3c16:	4313      	orrs	r3, r2
    3c18:	b2da      	uxtb	r2, r3
    3c1a:	2311      	movs	r3, #17
    3c1c:	18fb      	adds	r3, r7, r3
    3c1e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3c20:	2311      	movs	r3, #17
    3c22:	18fb      	adds	r3, r7, r3
    3c24:	2101      	movs	r1, #1
    3c26:	0018      	movs	r0, r3
    3c28:	4b3a      	ldr	r3, [pc, #232]	; (3d14 <spi_data_write+0x1a4>)
    3c2a:	4798      	blx	r3
    3c2c:	1e03      	subs	r3, r0, #0
    3c2e:	d012      	beq.n	3c56 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3c30:	23d4      	movs	r3, #212	; 0xd4
    3c32:	009a      	lsls	r2, r3, #2
    3c34:	4938      	ldr	r1, [pc, #224]	; (3d18 <spi_data_write+0x1a8>)
    3c36:	4b39      	ldr	r3, [pc, #228]	; (3d1c <spi_data_write+0x1ac>)
    3c38:	0018      	movs	r0, r3
    3c3a:	4b39      	ldr	r3, [pc, #228]	; (3d20 <spi_data_write+0x1b0>)
    3c3c:	4798      	blx	r3
    3c3e:	4b39      	ldr	r3, [pc, #228]	; (3d24 <spi_data_write+0x1b4>)
    3c40:	0018      	movs	r0, r3
    3c42:	4b39      	ldr	r3, [pc, #228]	; (3d28 <spi_data_write+0x1b8>)
    3c44:	4798      	blx	r3
    3c46:	200d      	movs	r0, #13
    3c48:	4b38      	ldr	r3, [pc, #224]	; (3d2c <spi_data_write+0x1bc>)
    3c4a:	4798      	blx	r3
			result = N_FAIL;
    3c4c:	2313      	movs	r3, #19
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	2200      	movs	r2, #0
    3c52:	701a      	strb	r2, [r3, #0]
			break;
    3c54:	e056      	b.n	3d04 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3c56:	2316      	movs	r3, #22
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	2200      	movs	r2, #0
    3c5c:	5e9b      	ldrsh	r3, [r3, r2]
    3c5e:	687a      	ldr	r2, [r7, #4]
    3c60:	18d2      	adds	r2, r2, r3
    3c62:	2314      	movs	r3, #20
    3c64:	18fb      	adds	r3, r7, r3
    3c66:	881b      	ldrh	r3, [r3, #0]
    3c68:	0019      	movs	r1, r3
    3c6a:	0010      	movs	r0, r2
    3c6c:	4b29      	ldr	r3, [pc, #164]	; (3d14 <spi_data_write+0x1a4>)
    3c6e:	4798      	blx	r3
    3c70:	1e03      	subs	r3, r0, #0
    3c72:	d011      	beq.n	3c98 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3c74:	4a2e      	ldr	r2, [pc, #184]	; (3d30 <spi_data_write+0x1c0>)
    3c76:	4928      	ldr	r1, [pc, #160]	; (3d18 <spi_data_write+0x1a8>)
    3c78:	4b28      	ldr	r3, [pc, #160]	; (3d1c <spi_data_write+0x1ac>)
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b28      	ldr	r3, [pc, #160]	; (3d20 <spi_data_write+0x1b0>)
    3c7e:	4798      	blx	r3
    3c80:	4b2c      	ldr	r3, [pc, #176]	; (3d34 <spi_data_write+0x1c4>)
    3c82:	0018      	movs	r0, r3
    3c84:	4b28      	ldr	r3, [pc, #160]	; (3d28 <spi_data_write+0x1b8>)
    3c86:	4798      	blx	r3
    3c88:	200d      	movs	r0, #13
    3c8a:	4b28      	ldr	r3, [pc, #160]	; (3d2c <spi_data_write+0x1bc>)
    3c8c:	4798      	blx	r3
			result = N_FAIL;
    3c8e:	2313      	movs	r3, #19
    3c90:	18fb      	adds	r3, r7, r3
    3c92:	2200      	movs	r2, #0
    3c94:	701a      	strb	r2, [r3, #0]
			break;
    3c96:	e035      	b.n	3d04 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    3c98:	4b27      	ldr	r3, [pc, #156]	; (3d38 <spi_data_write+0x1c8>)
    3c9a:	781b      	ldrb	r3, [r3, #0]
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d119      	bne.n	3cd4 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3ca0:	230c      	movs	r3, #12
    3ca2:	18fb      	adds	r3, r7, r3
    3ca4:	2102      	movs	r1, #2
    3ca6:	0018      	movs	r0, r3
    3ca8:	4b1a      	ldr	r3, [pc, #104]	; (3d14 <spi_data_write+0x1a4>)
    3caa:	4798      	blx	r3
    3cac:	1e03      	subs	r3, r0, #0
    3cae:	d011      	beq.n	3cd4 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3cb0:	4a22      	ldr	r2, [pc, #136]	; (3d3c <spi_data_write+0x1cc>)
    3cb2:	4919      	ldr	r1, [pc, #100]	; (3d18 <spi_data_write+0x1a8>)
    3cb4:	4b19      	ldr	r3, [pc, #100]	; (3d1c <spi_data_write+0x1ac>)
    3cb6:	0018      	movs	r0, r3
    3cb8:	4b19      	ldr	r3, [pc, #100]	; (3d20 <spi_data_write+0x1b0>)
    3cba:	4798      	blx	r3
    3cbc:	4b20      	ldr	r3, [pc, #128]	; (3d40 <spi_data_write+0x1d0>)
    3cbe:	0018      	movs	r0, r3
    3cc0:	4b19      	ldr	r3, [pc, #100]	; (3d28 <spi_data_write+0x1b8>)
    3cc2:	4798      	blx	r3
    3cc4:	200d      	movs	r0, #13
    3cc6:	4b19      	ldr	r3, [pc, #100]	; (3d2c <spi_data_write+0x1bc>)
    3cc8:	4798      	blx	r3
				result = N_FAIL;
    3cca:	2313      	movs	r3, #19
    3ccc:	18fb      	adds	r3, r7, r3
    3cce:	2200      	movs	r2, #0
    3cd0:	701a      	strb	r2, [r3, #0]
				break;
    3cd2:	e017      	b.n	3d04 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    3cd4:	2316      	movs	r3, #22
    3cd6:	18fb      	adds	r3, r7, r3
    3cd8:	881a      	ldrh	r2, [r3, #0]
    3cda:	2314      	movs	r3, #20
    3cdc:	18fb      	adds	r3, r7, r3
    3cde:	881b      	ldrh	r3, [r3, #0]
    3ce0:	18d3      	adds	r3, r2, r3
    3ce2:	b29a      	uxth	r2, r3
    3ce4:	2316      	movs	r3, #22
    3ce6:	18fb      	adds	r3, r7, r3
    3ce8:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3cea:	1cbb      	adds	r3, r7, #2
    3cec:	1cb9      	adds	r1, r7, #2
    3cee:	2214      	movs	r2, #20
    3cf0:	18ba      	adds	r2, r7, r2
    3cf2:	8809      	ldrh	r1, [r1, #0]
    3cf4:	8812      	ldrh	r2, [r2, #0]
    3cf6:	1a8a      	subs	r2, r1, r2
    3cf8:	801a      	strh	r2, [r3, #0]
	} while (sz);
    3cfa:	1cbb      	adds	r3, r7, #2
    3cfc:	881b      	ldrh	r3, [r3, #0]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d000      	beq.n	3d04 <spi_data_write+0x194>
    3d02:	e748      	b.n	3b96 <spi_data_write+0x26>


	return result;
    3d04:	2313      	movs	r3, #19
    3d06:	18fb      	adds	r3, r7, r3
    3d08:	781b      	ldrb	r3, [r3, #0]
    3d0a:	b25b      	sxtb	r3, r3
}
    3d0c:	0018      	movs	r0, r3
    3d0e:	46bd      	mov	sp, r7
    3d10:	b006      	add	sp, #24
    3d12:	bd80      	pop	{r7, pc}
    3d14:	0000332d 	.word	0x0000332d
    3d18:	00014958 	.word	0x00014958
    3d1c:	00014390 	.word	0x00014390
    3d20:	0000f0ad 	.word	0x0000f0ad
    3d24:	0001451c 	.word	0x0001451c
    3d28:	0000f1c9 	.word	0x0000f1c9
    3d2c:	0000f0e1 	.word	0x0000f0e1
    3d30:	00000359 	.word	0x00000359
    3d34:	00014554 	.word	0x00014554
    3d38:	2000027c 	.word	0x2000027c
    3d3c:	00000363 	.word	0x00000363
    3d40:	00014588 	.word	0x00014588

00003d44 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3d44:	b5b0      	push	{r4, r5, r7, lr}
    3d46:	b086      	sub	sp, #24
    3d48:	af02      	add	r7, sp, #8
    3d4a:	6078      	str	r0, [r7, #4]
    3d4c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    3d4e:	230f      	movs	r3, #15
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	220a      	movs	r2, #10
    3d54:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3d56:	230e      	movs	r3, #14
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	2201      	movs	r2, #1
    3d5c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    3d5e:	230d      	movs	r3, #13
    3d60:	18fb      	adds	r3, r7, r3
    3d62:	22c9      	movs	r2, #201	; 0xc9
    3d64:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    3d66:	230c      	movs	r3, #12
    3d68:	18fb      	adds	r3, r7, r3
    3d6a:	2200      	movs	r2, #0
    3d6c:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	2b30      	cmp	r3, #48	; 0x30
    3d72:	d808      	bhi.n	3d86 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    3d74:	230d      	movs	r3, #13
    3d76:	18fb      	adds	r3, r7, r3
    3d78:	22c3      	movs	r2, #195	; 0xc3
    3d7a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    3d7c:	230c      	movs	r3, #12
    3d7e:	18fb      	adds	r3, r7, r3
    3d80:	2201      	movs	r2, #1
    3d82:	701a      	strb	r2, [r3, #0]
    3d84:	e007      	b.n	3d96 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    3d86:	230d      	movs	r3, #13
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	22c9      	movs	r2, #201	; 0xc9
    3d8c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    3d8e:	230c      	movs	r3, #12
    3d90:	18fb      	adds	r3, r7, r3
    3d92:	2200      	movs	r2, #0
    3d94:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3d96:	230e      	movs	r3, #14
    3d98:	18fc      	adds	r4, r7, r3
    3d9a:	683a      	ldr	r2, [r7, #0]
    3d9c:	6879      	ldr	r1, [r7, #4]
    3d9e:	230d      	movs	r3, #13
    3da0:	18fb      	adds	r3, r7, r3
    3da2:	7818      	ldrb	r0, [r3, #0]
    3da4:	230c      	movs	r3, #12
    3da6:	18fb      	adds	r3, r7, r3
    3da8:	781b      	ldrb	r3, [r3, #0]
    3daa:	9300      	str	r3, [sp, #0]
    3dac:	2304      	movs	r3, #4
    3dae:	4d3c      	ldr	r5, [pc, #240]	; (3ea0 <spi_write_reg+0x15c>)
    3db0:	47a8      	blx	r5
    3db2:	0003      	movs	r3, r0
    3db4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3db6:	230e      	movs	r3, #14
    3db8:	18fb      	adds	r3, r7, r3
    3dba:	781b      	ldrb	r3, [r3, #0]
    3dbc:	b25b      	sxtb	r3, r3
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	d00f      	beq.n	3de2 <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3dc2:	4a38      	ldr	r2, [pc, #224]	; (3ea4 <spi_write_reg+0x160>)
    3dc4:	4938      	ldr	r1, [pc, #224]	; (3ea8 <spi_write_reg+0x164>)
    3dc6:	4b39      	ldr	r3, [pc, #228]	; (3eac <spi_write_reg+0x168>)
    3dc8:	0018      	movs	r0, r3
    3dca:	4b39      	ldr	r3, [pc, #228]	; (3eb0 <spi_write_reg+0x16c>)
    3dcc:	4798      	blx	r3
    3dce:	687a      	ldr	r2, [r7, #4]
    3dd0:	4b38      	ldr	r3, [pc, #224]	; (3eb4 <spi_write_reg+0x170>)
    3dd2:	0011      	movs	r1, r2
    3dd4:	0018      	movs	r0, r3
    3dd6:	4b36      	ldr	r3, [pc, #216]	; (3eb0 <spi_write_reg+0x16c>)
    3dd8:	4798      	blx	r3
    3dda:	200d      	movs	r0, #13
    3ddc:	4b36      	ldr	r3, [pc, #216]	; (3eb8 <spi_write_reg+0x174>)
    3dde:	4798      	blx	r3
		goto _FAIL_;
    3de0:	e020      	b.n	3e24 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    3de2:	230e      	movs	r3, #14
    3de4:	18fc      	adds	r4, r7, r3
    3de6:	230d      	movs	r3, #13
    3de8:	18fb      	adds	r3, r7, r3
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	0018      	movs	r0, r3
    3dee:	4b33      	ldr	r3, [pc, #204]	; (3ebc <spi_write_reg+0x178>)
    3df0:	4798      	blx	r3
    3df2:	0003      	movs	r3, r0
    3df4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3df6:	230e      	movs	r3, #14
    3df8:	18fb      	adds	r3, r7, r3
    3dfa:	781b      	ldrb	r3, [r3, #0]
    3dfc:	b25b      	sxtb	r3, r3
    3dfe:	2b01      	cmp	r3, #1
    3e00:	d010      	beq.n	3e24 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3e02:	23e7      	movs	r3, #231	; 0xe7
    3e04:	009a      	lsls	r2, r3, #2
    3e06:	4928      	ldr	r1, [pc, #160]	; (3ea8 <spi_write_reg+0x164>)
    3e08:	4b28      	ldr	r3, [pc, #160]	; (3eac <spi_write_reg+0x168>)
    3e0a:	0018      	movs	r0, r3
    3e0c:	4b28      	ldr	r3, [pc, #160]	; (3eb0 <spi_write_reg+0x16c>)
    3e0e:	4798      	blx	r3
    3e10:	687a      	ldr	r2, [r7, #4]
    3e12:	4b2b      	ldr	r3, [pc, #172]	; (3ec0 <spi_write_reg+0x17c>)
    3e14:	0011      	movs	r1, r2
    3e16:	0018      	movs	r0, r3
    3e18:	4b25      	ldr	r3, [pc, #148]	; (3eb0 <spi_write_reg+0x16c>)
    3e1a:	4798      	blx	r3
    3e1c:	200d      	movs	r0, #13
    3e1e:	4b26      	ldr	r3, [pc, #152]	; (3eb8 <spi_write_reg+0x174>)
    3e20:	4798      	blx	r3
		goto _FAIL_;
    3e22:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    3e24:	230e      	movs	r3, #14
    3e26:	18fb      	adds	r3, r7, r3
    3e28:	781b      	ldrb	r3, [r3, #0]
    3e2a:	b25b      	sxtb	r3, r3
    3e2c:	2b01      	cmp	r3, #1
    3e2e:	d02e      	beq.n	3e8e <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    3e30:	2001      	movs	r0, #1
    3e32:	4b24      	ldr	r3, [pc, #144]	; (3ec4 <spi_write_reg+0x180>)
    3e34:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3e36:	2300      	movs	r3, #0
    3e38:	9300      	str	r3, [sp, #0]
    3e3a:	2300      	movs	r3, #0
    3e3c:	2200      	movs	r2, #0
    3e3e:	2100      	movs	r1, #0
    3e40:	20cf      	movs	r0, #207	; 0xcf
    3e42:	4c17      	ldr	r4, [pc, #92]	; (3ea0 <spi_write_reg+0x15c>)
    3e44:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    3e46:	20cf      	movs	r0, #207	; 0xcf
    3e48:	4b1c      	ldr	r3, [pc, #112]	; (3ebc <spi_write_reg+0x178>)
    3e4a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3e4c:	4a1e      	ldr	r2, [pc, #120]	; (3ec8 <spi_write_reg+0x184>)
    3e4e:	4916      	ldr	r1, [pc, #88]	; (3ea8 <spi_write_reg+0x164>)
    3e50:	4b16      	ldr	r3, [pc, #88]	; (3eac <spi_write_reg+0x168>)
    3e52:	0018      	movs	r0, r3
    3e54:	4b16      	ldr	r3, [pc, #88]	; (3eb0 <spi_write_reg+0x16c>)
    3e56:	4798      	blx	r3
    3e58:	230f      	movs	r3, #15
    3e5a:	18fb      	adds	r3, r7, r3
    3e5c:	7819      	ldrb	r1, [r3, #0]
    3e5e:	683b      	ldr	r3, [r7, #0]
    3e60:	687a      	ldr	r2, [r7, #4]
    3e62:	481a      	ldr	r0, [pc, #104]	; (3ecc <spi_write_reg+0x188>)
    3e64:	4c12      	ldr	r4, [pc, #72]	; (3eb0 <spi_write_reg+0x16c>)
    3e66:	47a0      	blx	r4
    3e68:	200d      	movs	r0, #13
    3e6a:	4b13      	ldr	r3, [pc, #76]	; (3eb8 <spi_write_reg+0x174>)
    3e6c:	4798      	blx	r3
		nm_bsp_sleep(1);
    3e6e:	2001      	movs	r0, #1
    3e70:	4b14      	ldr	r3, [pc, #80]	; (3ec4 <spi_write_reg+0x180>)
    3e72:	4798      	blx	r3
		retry--;
    3e74:	230f      	movs	r3, #15
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	781a      	ldrb	r2, [r3, #0]
    3e7a:	230f      	movs	r3, #15
    3e7c:	18fb      	adds	r3, r7, r3
    3e7e:	3a01      	subs	r2, #1
    3e80:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    3e82:	230f      	movs	r3, #15
    3e84:	18fb      	adds	r3, r7, r3
    3e86:	781b      	ldrb	r3, [r3, #0]
    3e88:	2b00      	cmp	r3, #0
    3e8a:	d000      	beq.n	3e8e <spi_write_reg+0x14a>
    3e8c:	e76f      	b.n	3d6e <spi_write_reg+0x2a>
	}

	return result;
    3e8e:	230e      	movs	r3, #14
    3e90:	18fb      	adds	r3, r7, r3
    3e92:	781b      	ldrb	r3, [r3, #0]
    3e94:	b25b      	sxtb	r3, r3
}
    3e96:	0018      	movs	r0, r3
    3e98:	46bd      	mov	sp, r7
    3e9a:	b004      	add	sp, #16
    3e9c:	bdb0      	pop	{r4, r5, r7, pc}
    3e9e:	46c0      	nop			; (mov r8, r8)
    3ea0:	000033f1 	.word	0x000033f1
    3ea4:	00000396 	.word	0x00000396
    3ea8:	00014968 	.word	0x00014968
    3eac:	00014390 	.word	0x00014390
    3eb0:	0000f0ad 	.word	0x0000f0ad
    3eb4:	000145c0 	.word	0x000145c0
    3eb8:	0000f0e1 	.word	0x0000f0e1
    3ebc:	00003835 	.word	0x00003835
    3ec0:	000145ec 	.word	0x000145ec
    3ec4:	00000331 	.word	0x00000331
    3ec8:	000003af 	.word	0x000003af
    3ecc:	00014624 	.word	0x00014624

00003ed0 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    3ed0:	b5b0      	push	{r4, r5, r7, lr}
    3ed2:	b088      	sub	sp, #32
    3ed4:	af02      	add	r7, sp, #8
    3ed6:	60f8      	str	r0, [r7, #12]
    3ed8:	60b9      	str	r1, [r7, #8]
    3eda:	1dbb      	adds	r3, r7, #6
    3edc:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    3ede:	2316      	movs	r3, #22
    3ee0:	18fb      	adds	r3, r7, r3
    3ee2:	220a      	movs	r2, #10
    3ee4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    3ee6:	2315      	movs	r3, #21
    3ee8:	18fb      	adds	r3, r7, r3
    3eea:	22c7      	movs	r2, #199	; 0xc7
    3eec:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    3eee:	1dbb      	adds	r3, r7, #6
    3ef0:	881b      	ldrh	r3, [r3, #0]
    3ef2:	2b01      	cmp	r3, #1
    3ef4:	d102      	bne.n	3efc <nm_spi_write+0x2c>
		size = 2;
    3ef6:	1dbb      	adds	r3, r7, #6
    3ef8:	2202      	movs	r2, #2
    3efa:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    3efc:	1dbb      	adds	r3, r7, #6
    3efe:	881a      	ldrh	r2, [r3, #0]
    3f00:	2317      	movs	r3, #23
    3f02:	18fc      	adds	r4, r7, r3
    3f04:	68f9      	ldr	r1, [r7, #12]
    3f06:	2315      	movs	r3, #21
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	7818      	ldrb	r0, [r3, #0]
    3f0c:	2300      	movs	r3, #0
    3f0e:	9300      	str	r3, [sp, #0]
    3f10:	0013      	movs	r3, r2
    3f12:	2200      	movs	r2, #0
    3f14:	4d5b      	ldr	r5, [pc, #364]	; (4084 <nm_spi_write+0x1b4>)
    3f16:	47a8      	blx	r5
    3f18:	0003      	movs	r3, r0
    3f1a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3f1c:	2317      	movs	r3, #23
    3f1e:	18fb      	adds	r3, r7, r3
    3f20:	781b      	ldrb	r3, [r3, #0]
    3f22:	b25b      	sxtb	r3, r3
    3f24:	2b01      	cmp	r3, #1
    3f26:	d00f      	beq.n	3f48 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3f28:	4a57      	ldr	r2, [pc, #348]	; (4088 <nm_spi_write+0x1b8>)
    3f2a:	4958      	ldr	r1, [pc, #352]	; (408c <nm_spi_write+0x1bc>)
    3f2c:	4b58      	ldr	r3, [pc, #352]	; (4090 <nm_spi_write+0x1c0>)
    3f2e:	0018      	movs	r0, r3
    3f30:	4b58      	ldr	r3, [pc, #352]	; (4094 <nm_spi_write+0x1c4>)
    3f32:	4798      	blx	r3
    3f34:	68fa      	ldr	r2, [r7, #12]
    3f36:	4b58      	ldr	r3, [pc, #352]	; (4098 <nm_spi_write+0x1c8>)
    3f38:	0011      	movs	r1, r2
    3f3a:	0018      	movs	r0, r3
    3f3c:	4b55      	ldr	r3, [pc, #340]	; (4094 <nm_spi_write+0x1c4>)
    3f3e:	4798      	blx	r3
    3f40:	200d      	movs	r0, #13
    3f42:	4b56      	ldr	r3, [pc, #344]	; (409c <nm_spi_write+0x1cc>)
    3f44:	4798      	blx	r3
		goto _FAIL_;
    3f46:	e05f      	b.n	4008 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    3f48:	2317      	movs	r3, #23
    3f4a:	18fc      	adds	r4, r7, r3
    3f4c:	2315      	movs	r3, #21
    3f4e:	18fb      	adds	r3, r7, r3
    3f50:	781b      	ldrb	r3, [r3, #0]
    3f52:	0018      	movs	r0, r3
    3f54:	4b52      	ldr	r3, [pc, #328]	; (40a0 <nm_spi_write+0x1d0>)
    3f56:	4798      	blx	r3
    3f58:	0003      	movs	r3, r0
    3f5a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3f5c:	2317      	movs	r3, #23
    3f5e:	18fb      	adds	r3, r7, r3
    3f60:	781b      	ldrb	r3, [r3, #0]
    3f62:	b25b      	sxtb	r3, r3
    3f64:	2b01      	cmp	r3, #1
    3f66:	d010      	beq.n	3f8a <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    3f68:	23f4      	movs	r3, #244	; 0xf4
    3f6a:	009a      	lsls	r2, r3, #2
    3f6c:	4947      	ldr	r1, [pc, #284]	; (408c <nm_spi_write+0x1bc>)
    3f6e:	4b48      	ldr	r3, [pc, #288]	; (4090 <nm_spi_write+0x1c0>)
    3f70:	0018      	movs	r0, r3
    3f72:	4b48      	ldr	r3, [pc, #288]	; (4094 <nm_spi_write+0x1c4>)
    3f74:	4798      	blx	r3
    3f76:	68fa      	ldr	r2, [r7, #12]
    3f78:	4b4a      	ldr	r3, [pc, #296]	; (40a4 <nm_spi_write+0x1d4>)
    3f7a:	0011      	movs	r1, r2
    3f7c:	0018      	movs	r0, r3
    3f7e:	4b45      	ldr	r3, [pc, #276]	; (4094 <nm_spi_write+0x1c4>)
    3f80:	4798      	blx	r3
    3f82:	200d      	movs	r0, #13
    3f84:	4b45      	ldr	r3, [pc, #276]	; (409c <nm_spi_write+0x1cc>)
    3f86:	4798      	blx	r3
		goto _FAIL_;
    3f88:	e03e      	b.n	4008 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    3f8a:	2317      	movs	r3, #23
    3f8c:	18fc      	adds	r4, r7, r3
    3f8e:	1dbb      	adds	r3, r7, #6
    3f90:	881a      	ldrh	r2, [r3, #0]
    3f92:	68bb      	ldr	r3, [r7, #8]
    3f94:	0011      	movs	r1, r2
    3f96:	0018      	movs	r0, r3
    3f98:	4b43      	ldr	r3, [pc, #268]	; (40a8 <nm_spi_write+0x1d8>)
    3f9a:	4798      	blx	r3
    3f9c:	0003      	movs	r3, r0
    3f9e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fa0:	2317      	movs	r3, #23
    3fa2:	18fb      	adds	r3, r7, r3
    3fa4:	781b      	ldrb	r3, [r3, #0]
    3fa6:	b25b      	sxtb	r3, r3
    3fa8:	2b01      	cmp	r3, #1
    3faa:	d00e      	beq.n	3fca <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3fac:	23f8      	movs	r3, #248	; 0xf8
    3fae:	009a      	lsls	r2, r3, #2
    3fb0:	4936      	ldr	r1, [pc, #216]	; (408c <nm_spi_write+0x1bc>)
    3fb2:	4b37      	ldr	r3, [pc, #220]	; (4090 <nm_spi_write+0x1c0>)
    3fb4:	0018      	movs	r0, r3
    3fb6:	4b37      	ldr	r3, [pc, #220]	; (4094 <nm_spi_write+0x1c4>)
    3fb8:	4798      	blx	r3
    3fba:	4b3c      	ldr	r3, [pc, #240]	; (40ac <nm_spi_write+0x1dc>)
    3fbc:	0018      	movs	r0, r3
    3fbe:	4b3c      	ldr	r3, [pc, #240]	; (40b0 <nm_spi_write+0x1e0>)
    3fc0:	4798      	blx	r3
    3fc2:	200d      	movs	r0, #13
    3fc4:	4b35      	ldr	r3, [pc, #212]	; (409c <nm_spi_write+0x1cc>)
    3fc6:	4798      	blx	r3
		goto _FAIL_;
    3fc8:	e01e      	b.n	4008 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    3fca:	2317      	movs	r3, #23
    3fcc:	18fc      	adds	r4, r7, r3
    3fce:	2315      	movs	r3, #21
    3fd0:	18fb      	adds	r3, r7, r3
    3fd2:	781b      	ldrb	r3, [r3, #0]
    3fd4:	0018      	movs	r0, r3
    3fd6:	4b37      	ldr	r3, [pc, #220]	; (40b4 <nm_spi_write+0x1e4>)
    3fd8:	4798      	blx	r3
    3fda:	0003      	movs	r3, r0
    3fdc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fde:	2317      	movs	r3, #23
    3fe0:	18fb      	adds	r3, r7, r3
    3fe2:	781b      	ldrb	r3, [r3, #0]
    3fe4:	b25b      	sxtb	r3, r3
    3fe6:	2b01      	cmp	r3, #1
    3fe8:	d00e      	beq.n	4008 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3fea:	23fa      	movs	r3, #250	; 0xfa
    3fec:	009a      	lsls	r2, r3, #2
    3fee:	4927      	ldr	r1, [pc, #156]	; (408c <nm_spi_write+0x1bc>)
    3ff0:	4b27      	ldr	r3, [pc, #156]	; (4090 <nm_spi_write+0x1c0>)
    3ff2:	0018      	movs	r0, r3
    3ff4:	4b27      	ldr	r3, [pc, #156]	; (4094 <nm_spi_write+0x1c4>)
    3ff6:	4798      	blx	r3
    3ff8:	4b2c      	ldr	r3, [pc, #176]	; (40ac <nm_spi_write+0x1dc>)
    3ffa:	0018      	movs	r0, r3
    3ffc:	4b2c      	ldr	r3, [pc, #176]	; (40b0 <nm_spi_write+0x1e0>)
    3ffe:	4798      	blx	r3
    4000:	200d      	movs	r0, #13
    4002:	4b26      	ldr	r3, [pc, #152]	; (409c <nm_spi_write+0x1cc>)
    4004:	4798      	blx	r3
		goto _FAIL_;
    4006:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    4008:	2317      	movs	r3, #23
    400a:	18fb      	adds	r3, r7, r3
    400c:	781b      	ldrb	r3, [r3, #0]
    400e:	b25b      	sxtb	r3, r3
    4010:	2b01      	cmp	r3, #1
    4012:	d02f      	beq.n	4074 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    4014:	2001      	movs	r0, #1
    4016:	4b28      	ldr	r3, [pc, #160]	; (40b8 <nm_spi_write+0x1e8>)
    4018:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    401a:	2300      	movs	r3, #0
    401c:	9300      	str	r3, [sp, #0]
    401e:	2300      	movs	r3, #0
    4020:	2200      	movs	r2, #0
    4022:	2100      	movs	r1, #0
    4024:	20cf      	movs	r0, #207	; 0xcf
    4026:	4c17      	ldr	r4, [pc, #92]	; (4084 <nm_spi_write+0x1b4>)
    4028:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    402a:	20cf      	movs	r0, #207	; 0xcf
    402c:	4b1c      	ldr	r3, [pc, #112]	; (40a0 <nm_spi_write+0x1d0>)
    402e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4030:	4a22      	ldr	r2, [pc, #136]	; (40bc <nm_spi_write+0x1ec>)
    4032:	4916      	ldr	r1, [pc, #88]	; (408c <nm_spi_write+0x1bc>)
    4034:	4b16      	ldr	r3, [pc, #88]	; (4090 <nm_spi_write+0x1c0>)
    4036:	0018      	movs	r0, r3
    4038:	4b16      	ldr	r3, [pc, #88]	; (4094 <nm_spi_write+0x1c4>)
    403a:	4798      	blx	r3
    403c:	2316      	movs	r3, #22
    403e:	18fb      	adds	r3, r7, r3
    4040:	7819      	ldrb	r1, [r3, #0]
    4042:	1dbb      	adds	r3, r7, #6
    4044:	881b      	ldrh	r3, [r3, #0]
    4046:	68fa      	ldr	r2, [r7, #12]
    4048:	481d      	ldr	r0, [pc, #116]	; (40c0 <nm_spi_write+0x1f0>)
    404a:	4c12      	ldr	r4, [pc, #72]	; (4094 <nm_spi_write+0x1c4>)
    404c:	47a0      	blx	r4
    404e:	200d      	movs	r0, #13
    4050:	4b12      	ldr	r3, [pc, #72]	; (409c <nm_spi_write+0x1cc>)
    4052:	4798      	blx	r3
		nm_bsp_sleep(1);
    4054:	2001      	movs	r0, #1
    4056:	4b18      	ldr	r3, [pc, #96]	; (40b8 <nm_spi_write+0x1e8>)
    4058:	4798      	blx	r3
		retry--;
    405a:	2316      	movs	r3, #22
    405c:	18fb      	adds	r3, r7, r3
    405e:	781a      	ldrb	r2, [r3, #0]
    4060:	2316      	movs	r3, #22
    4062:	18fb      	adds	r3, r7, r3
    4064:	3a01      	subs	r2, #1
    4066:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4068:	2316      	movs	r3, #22
    406a:	18fb      	adds	r3, r7, r3
    406c:	781b      	ldrb	r3, [r3, #0]
    406e:	2b00      	cmp	r3, #0
    4070:	d000      	beq.n	4074 <nm_spi_write+0x1a4>
    4072:	e73c      	b.n	3eee <nm_spi_write+0x1e>
	}


	return result;
    4074:	2317      	movs	r3, #23
    4076:	18fb      	adds	r3, r7, r3
    4078:	781b      	ldrb	r3, [r3, #0]
    407a:	b25b      	sxtb	r3, r3
}
    407c:	0018      	movs	r0, r3
    407e:	46bd      	mov	sp, r7
    4080:	b006      	add	sp, #24
    4082:	bdb0      	pop	{r4, r5, r7, pc}
    4084:	000033f1 	.word	0x000033f1
    4088:	000003ca 	.word	0x000003ca
    408c:	00014978 	.word	0x00014978
    4090:	00014390 	.word	0x00014390
    4094:	0000f0ad 	.word	0x0000f0ad
    4098:	00014640 	.word	0x00014640
    409c:	0000f0e1 	.word	0x0000f0e1
    40a0:	00003835 	.word	0x00003835
    40a4:	00014670 	.word	0x00014670
    40a8:	00003b71 	.word	0x00003b71
    40ac:	000146a8 	.word	0x000146a8
    40b0:	0000f1c9 	.word	0x0000f1c9
    40b4:	00003735 	.word	0x00003735
    40b8:	00000331 	.word	0x00000331
    40bc:	000003f2 	.word	0x000003f2
    40c0:	000146d0 	.word	0x000146d0

000040c4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    40c4:	b5b0      	push	{r4, r5, r7, lr}
    40c6:	b086      	sub	sp, #24
    40c8:	af02      	add	r7, sp, #8
    40ca:	6078      	str	r0, [r7, #4]
    40cc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    40ce:	230f      	movs	r3, #15
    40d0:	18fb      	adds	r3, r7, r3
    40d2:	220a      	movs	r2, #10
    40d4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    40d6:	230e      	movs	r3, #14
    40d8:	18fb      	adds	r3, r7, r3
    40da:	2201      	movs	r2, #1
    40dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    40de:	230d      	movs	r3, #13
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	22ca      	movs	r2, #202	; 0xca
    40e4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    40e6:	230c      	movs	r3, #12
    40e8:	18fb      	adds	r3, r7, r3
    40ea:	2200      	movs	r2, #0
    40ec:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	2bff      	cmp	r3, #255	; 0xff
    40f2:	d808      	bhi.n	4106 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    40f4:	230d      	movs	r3, #13
    40f6:	18fb      	adds	r3, r7, r3
    40f8:	22c4      	movs	r2, #196	; 0xc4
    40fa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    40fc:	230c      	movs	r3, #12
    40fe:	18fb      	adds	r3, r7, r3
    4100:	2201      	movs	r2, #1
    4102:	701a      	strb	r2, [r3, #0]
    4104:	e007      	b.n	4116 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    4106:	230d      	movs	r3, #13
    4108:	18fb      	adds	r3, r7, r3
    410a:	22ca      	movs	r2, #202	; 0xca
    410c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    410e:	230c      	movs	r3, #12
    4110:	18fb      	adds	r3, r7, r3
    4112:	2200      	movs	r2, #0
    4114:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    4116:	230e      	movs	r3, #14
    4118:	18fc      	adds	r4, r7, r3
    411a:	6879      	ldr	r1, [r7, #4]
    411c:	230d      	movs	r3, #13
    411e:	18fb      	adds	r3, r7, r3
    4120:	7818      	ldrb	r0, [r3, #0]
    4122:	230c      	movs	r3, #12
    4124:	18fb      	adds	r3, r7, r3
    4126:	781b      	ldrb	r3, [r3, #0]
    4128:	9300      	str	r3, [sp, #0]
    412a:	2304      	movs	r3, #4
    412c:	2200      	movs	r2, #0
    412e:	4d56      	ldr	r5, [pc, #344]	; (4288 <spi_read_reg+0x1c4>)
    4130:	47a8      	blx	r5
    4132:	0003      	movs	r3, r0
    4134:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4136:	230e      	movs	r3, #14
    4138:	18fb      	adds	r3, r7, r3
    413a:	781b      	ldrb	r3, [r3, #0]
    413c:	b25b      	sxtb	r3, r3
    413e:	2b01      	cmp	r3, #1
    4140:	d00f      	beq.n	4162 <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    4142:	4a52      	ldr	r2, [pc, #328]	; (428c <spi_read_reg+0x1c8>)
    4144:	4952      	ldr	r1, [pc, #328]	; (4290 <spi_read_reg+0x1cc>)
    4146:	4b53      	ldr	r3, [pc, #332]	; (4294 <spi_read_reg+0x1d0>)
    4148:	0018      	movs	r0, r3
    414a:	4b53      	ldr	r3, [pc, #332]	; (4298 <spi_read_reg+0x1d4>)
    414c:	4798      	blx	r3
    414e:	687a      	ldr	r2, [r7, #4]
    4150:	4b52      	ldr	r3, [pc, #328]	; (429c <spi_read_reg+0x1d8>)
    4152:	0011      	movs	r1, r2
    4154:	0018      	movs	r0, r3
    4156:	4b50      	ldr	r3, [pc, #320]	; (4298 <spi_read_reg+0x1d4>)
    4158:	4798      	blx	r3
    415a:	200d      	movs	r0, #13
    415c:	4b50      	ldr	r3, [pc, #320]	; (42a0 <spi_read_reg+0x1dc>)
    415e:	4798      	blx	r3
		goto _FAIL_;
    4160:	e055      	b.n	420e <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    4162:	230e      	movs	r3, #14
    4164:	18fc      	adds	r4, r7, r3
    4166:	230d      	movs	r3, #13
    4168:	18fb      	adds	r3, r7, r3
    416a:	781b      	ldrb	r3, [r3, #0]
    416c:	0018      	movs	r0, r3
    416e:	4b4d      	ldr	r3, [pc, #308]	; (42a4 <spi_read_reg+0x1e0>)
    4170:	4798      	blx	r3
    4172:	0003      	movs	r3, r0
    4174:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4176:	230e      	movs	r3, #14
    4178:	18fb      	adds	r3, r7, r3
    417a:	781b      	ldrb	r3, [r3, #0]
    417c:	b25b      	sxtb	r3, r3
    417e:	2b01      	cmp	r3, #1
    4180:	d00f      	beq.n	41a2 <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    4182:	4a49      	ldr	r2, [pc, #292]	; (42a8 <spi_read_reg+0x1e4>)
    4184:	4942      	ldr	r1, [pc, #264]	; (4290 <spi_read_reg+0x1cc>)
    4186:	4b43      	ldr	r3, [pc, #268]	; (4294 <spi_read_reg+0x1d0>)
    4188:	0018      	movs	r0, r3
    418a:	4b43      	ldr	r3, [pc, #268]	; (4298 <spi_read_reg+0x1d4>)
    418c:	4798      	blx	r3
    418e:	687a      	ldr	r2, [r7, #4]
    4190:	4b46      	ldr	r3, [pc, #280]	; (42ac <spi_read_reg+0x1e8>)
    4192:	0011      	movs	r1, r2
    4194:	0018      	movs	r0, r3
    4196:	4b40      	ldr	r3, [pc, #256]	; (4298 <spi_read_reg+0x1d4>)
    4198:	4798      	blx	r3
    419a:	200d      	movs	r0, #13
    419c:	4b40      	ldr	r3, [pc, #256]	; (42a0 <spi_read_reg+0x1dc>)
    419e:	4798      	blx	r3
		goto _FAIL_;
    41a0:	e035      	b.n	420e <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    41a2:	230e      	movs	r3, #14
    41a4:	18fc      	adds	r4, r7, r3
    41a6:	230c      	movs	r3, #12
    41a8:	18fb      	adds	r3, r7, r3
    41aa:	781a      	ldrb	r2, [r3, #0]
    41ac:	2308      	movs	r3, #8
    41ae:	18fb      	adds	r3, r7, r3
    41b0:	2104      	movs	r1, #4
    41b2:	0018      	movs	r0, r3
    41b4:	4b3e      	ldr	r3, [pc, #248]	; (42b0 <spi_read_reg+0x1ec>)
    41b6:	4798      	blx	r3
    41b8:	0003      	movs	r3, r0
    41ba:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    41bc:	230e      	movs	r3, #14
    41be:	18fb      	adds	r3, r7, r3
    41c0:	781b      	ldrb	r3, [r3, #0]
    41c2:	b25b      	sxtb	r3, r3
    41c4:	2b01      	cmp	r3, #1
    41c6:	d00d      	beq.n	41e4 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    41c8:	4a3a      	ldr	r2, [pc, #232]	; (42b4 <spi_read_reg+0x1f0>)
    41ca:	4931      	ldr	r1, [pc, #196]	; (4290 <spi_read_reg+0x1cc>)
    41cc:	4b31      	ldr	r3, [pc, #196]	; (4294 <spi_read_reg+0x1d0>)
    41ce:	0018      	movs	r0, r3
    41d0:	4b31      	ldr	r3, [pc, #196]	; (4298 <spi_read_reg+0x1d4>)
    41d2:	4798      	blx	r3
    41d4:	4b38      	ldr	r3, [pc, #224]	; (42b8 <spi_read_reg+0x1f4>)
    41d6:	0018      	movs	r0, r3
    41d8:	4b38      	ldr	r3, [pc, #224]	; (42bc <spi_read_reg+0x1f8>)
    41da:	4798      	blx	r3
    41dc:	200d      	movs	r0, #13
    41de:	4b30      	ldr	r3, [pc, #192]	; (42a0 <spi_read_reg+0x1dc>)
    41e0:	4798      	blx	r3
		goto _FAIL_;
    41e2:	e014      	b.n	420e <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    41e4:	2308      	movs	r3, #8
    41e6:	18fb      	adds	r3, r7, r3
    41e8:	781b      	ldrb	r3, [r3, #0]
    41ea:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    41ec:	2308      	movs	r3, #8
    41ee:	18fb      	adds	r3, r7, r3
    41f0:	785b      	ldrb	r3, [r3, #1]
    41f2:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    41f4:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    41f6:	2308      	movs	r3, #8
    41f8:	18fb      	adds	r3, r7, r3
    41fa:	789b      	ldrb	r3, [r3, #2]
    41fc:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    41fe:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    4200:	2308      	movs	r3, #8
    4202:	18fb      	adds	r3, r7, r3
    4204:	78db      	ldrb	r3, [r3, #3]
    4206:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    4208:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    420a:	683b      	ldr	r3, [r7, #0]
    420c:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    420e:	230e      	movs	r3, #14
    4210:	18fb      	adds	r3, r7, r3
    4212:	781b      	ldrb	r3, [r3, #0]
    4214:	b25b      	sxtb	r3, r3
    4216:	2b01      	cmp	r3, #1
    4218:	d02e      	beq.n	4278 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    421a:	2001      	movs	r0, #1
    421c:	4b28      	ldr	r3, [pc, #160]	; (42c0 <spi_read_reg+0x1fc>)
    421e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4220:	2300      	movs	r3, #0
    4222:	9300      	str	r3, [sp, #0]
    4224:	2300      	movs	r3, #0
    4226:	2200      	movs	r2, #0
    4228:	2100      	movs	r1, #0
    422a:	20cf      	movs	r0, #207	; 0xcf
    422c:	4c16      	ldr	r4, [pc, #88]	; (4288 <spi_read_reg+0x1c4>)
    422e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4230:	20cf      	movs	r0, #207	; 0xcf
    4232:	4b1c      	ldr	r3, [pc, #112]	; (42a4 <spi_read_reg+0x1e0>)
    4234:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    4236:	4a23      	ldr	r2, [pc, #140]	; (42c4 <spi_read_reg+0x200>)
    4238:	4915      	ldr	r1, [pc, #84]	; (4290 <spi_read_reg+0x1cc>)
    423a:	4b16      	ldr	r3, [pc, #88]	; (4294 <spi_read_reg+0x1d0>)
    423c:	0018      	movs	r0, r3
    423e:	4b16      	ldr	r3, [pc, #88]	; (4298 <spi_read_reg+0x1d4>)
    4240:	4798      	blx	r3
    4242:	230f      	movs	r3, #15
    4244:	18fb      	adds	r3, r7, r3
    4246:	7819      	ldrb	r1, [r3, #0]
    4248:	687a      	ldr	r2, [r7, #4]
    424a:	4b1f      	ldr	r3, [pc, #124]	; (42c8 <spi_read_reg+0x204>)
    424c:	0018      	movs	r0, r3
    424e:	4b12      	ldr	r3, [pc, #72]	; (4298 <spi_read_reg+0x1d4>)
    4250:	4798      	blx	r3
    4252:	200d      	movs	r0, #13
    4254:	4b12      	ldr	r3, [pc, #72]	; (42a0 <spi_read_reg+0x1dc>)
    4256:	4798      	blx	r3
		nm_bsp_sleep(1);
    4258:	2001      	movs	r0, #1
    425a:	4b19      	ldr	r3, [pc, #100]	; (42c0 <spi_read_reg+0x1fc>)
    425c:	4798      	blx	r3
		retry--;
    425e:	230f      	movs	r3, #15
    4260:	18fb      	adds	r3, r7, r3
    4262:	781a      	ldrb	r2, [r3, #0]
    4264:	230f      	movs	r3, #15
    4266:	18fb      	adds	r3, r7, r3
    4268:	3a01      	subs	r2, #1
    426a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    426c:	230f      	movs	r3, #15
    426e:	18fb      	adds	r3, r7, r3
    4270:	781b      	ldrb	r3, [r3, #0]
    4272:	2b00      	cmp	r3, #0
    4274:	d000      	beq.n	4278 <spi_read_reg+0x1b4>
    4276:	e73a      	b.n	40ee <spi_read_reg+0x2a>
	}
		
	return result;
    4278:	230e      	movs	r3, #14
    427a:	18fb      	adds	r3, r7, r3
    427c:	781b      	ldrb	r3, [r3, #0]
    427e:	b25b      	sxtb	r3, r3
}
    4280:	0018      	movs	r0, r3
    4282:	46bd      	mov	sp, r7
    4284:	b004      	add	sp, #16
    4286:	bdb0      	pop	{r4, r5, r7, pc}
    4288:	000033f1 	.word	0x000033f1
    428c:	00000417 	.word	0x00000417
    4290:	00014988 	.word	0x00014988
    4294:	00014390 	.word	0x00014390
    4298:	0000f0ad 	.word	0x0000f0ad
    429c:	000146ec 	.word	0x000146ec
    42a0:	0000f0e1 	.word	0x0000f0e1
    42a4:	00003835 	.word	0x00003835
    42a8:	0000041d 	.word	0x0000041d
    42ac:	00014718 	.word	0x00014718
    42b0:	0000396d 	.word	0x0000396d
    42b4:	00000424 	.word	0x00000424
    42b8:	0001474c 	.word	0x0001474c
    42bc:	0000f1c9 	.word	0x0000f1c9
    42c0:	00000331 	.word	0x00000331
    42c4:	0000043c 	.word	0x0000043c
    42c8:	0001476c 	.word	0x0001476c

000042cc <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    42cc:	b5b0      	push	{r4, r5, r7, lr}
    42ce:	b088      	sub	sp, #32
    42d0:	af02      	add	r7, sp, #8
    42d2:	60f8      	str	r0, [r7, #12]
    42d4:	60b9      	str	r1, [r7, #8]
    42d6:	1dbb      	adds	r3, r7, #6
    42d8:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    42da:	2314      	movs	r3, #20
    42dc:	18fb      	adds	r3, r7, r3
    42de:	22c8      	movs	r2, #200	; 0xc8
    42e0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    42e2:	2316      	movs	r3, #22
    42e4:	18fb      	adds	r3, r7, r3
    42e6:	220a      	movs	r2, #10
    42e8:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    42ea:	2315      	movs	r3, #21
    42ec:	18fb      	adds	r3, r7, r3
    42ee:	2200      	movs	r2, #0
    42f0:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    42f2:	1dbb      	adds	r3, r7, #6
    42f4:	881b      	ldrh	r3, [r3, #0]
    42f6:	2b01      	cmp	r3, #1
    42f8:	d106      	bne.n	4308 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    42fa:	1dbb      	adds	r3, r7, #6
    42fc:	2202      	movs	r2, #2
    42fe:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    4300:	2315      	movs	r3, #21
    4302:	18fb      	adds	r3, r7, r3
    4304:	2201      	movs	r2, #1
    4306:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    4308:	1dbb      	adds	r3, r7, #6
    430a:	881a      	ldrh	r2, [r3, #0]
    430c:	2317      	movs	r3, #23
    430e:	18fc      	adds	r4, r7, r3
    4310:	68f9      	ldr	r1, [r7, #12]
    4312:	2314      	movs	r3, #20
    4314:	18fb      	adds	r3, r7, r3
    4316:	7818      	ldrb	r0, [r3, #0]
    4318:	2300      	movs	r3, #0
    431a:	9300      	str	r3, [sp, #0]
    431c:	0013      	movs	r3, r2
    431e:	2200      	movs	r2, #0
    4320:	4d56      	ldr	r5, [pc, #344]	; (447c <nm_spi_read+0x1b0>)
    4322:	47a8      	blx	r5
    4324:	0003      	movs	r3, r0
    4326:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4328:	2317      	movs	r3, #23
    432a:	18fb      	adds	r3, r7, r3
    432c:	781b      	ldrb	r3, [r3, #0]
    432e:	b25b      	sxtb	r3, r3
    4330:	2b01      	cmp	r3, #1
    4332:	d00f      	beq.n	4354 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    4334:	4a52      	ldr	r2, [pc, #328]	; (4480 <nm_spi_read+0x1b4>)
    4336:	4953      	ldr	r1, [pc, #332]	; (4484 <nm_spi_read+0x1b8>)
    4338:	4b53      	ldr	r3, [pc, #332]	; (4488 <nm_spi_read+0x1bc>)
    433a:	0018      	movs	r0, r3
    433c:	4b53      	ldr	r3, [pc, #332]	; (448c <nm_spi_read+0x1c0>)
    433e:	4798      	blx	r3
    4340:	68fa      	ldr	r2, [r7, #12]
    4342:	4b53      	ldr	r3, [pc, #332]	; (4490 <nm_spi_read+0x1c4>)
    4344:	0011      	movs	r1, r2
    4346:	0018      	movs	r0, r3
    4348:	4b50      	ldr	r3, [pc, #320]	; (448c <nm_spi_read+0x1c0>)
    434a:	4798      	blx	r3
    434c:	200d      	movs	r0, #13
    434e:	4b51      	ldr	r3, [pc, #324]	; (4494 <nm_spi_read+0x1c8>)
    4350:	4798      	blx	r3
		goto _FAIL_;
    4352:	e055      	b.n	4400 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    4354:	2317      	movs	r3, #23
    4356:	18fc      	adds	r4, r7, r3
    4358:	2314      	movs	r3, #20
    435a:	18fb      	adds	r3, r7, r3
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	0018      	movs	r0, r3
    4360:	4b4d      	ldr	r3, [pc, #308]	; (4498 <nm_spi_read+0x1cc>)
    4362:	4798      	blx	r3
    4364:	0003      	movs	r3, r0
    4366:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4368:	2317      	movs	r3, #23
    436a:	18fb      	adds	r3, r7, r3
    436c:	781b      	ldrb	r3, [r3, #0]
    436e:	b25b      	sxtb	r3, r3
    4370:	2b01      	cmp	r3, #1
    4372:	d00f      	beq.n	4394 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    4374:	4a49      	ldr	r2, [pc, #292]	; (449c <nm_spi_read+0x1d0>)
    4376:	4943      	ldr	r1, [pc, #268]	; (4484 <nm_spi_read+0x1b8>)
    4378:	4b43      	ldr	r3, [pc, #268]	; (4488 <nm_spi_read+0x1bc>)
    437a:	0018      	movs	r0, r3
    437c:	4b43      	ldr	r3, [pc, #268]	; (448c <nm_spi_read+0x1c0>)
    437e:	4798      	blx	r3
    4380:	68fa      	ldr	r2, [r7, #12]
    4382:	4b47      	ldr	r3, [pc, #284]	; (44a0 <nm_spi_read+0x1d4>)
    4384:	0011      	movs	r1, r2
    4386:	0018      	movs	r0, r3
    4388:	4b40      	ldr	r3, [pc, #256]	; (448c <nm_spi_read+0x1c0>)
    438a:	4798      	blx	r3
    438c:	200d      	movs	r0, #13
    438e:	4b41      	ldr	r3, [pc, #260]	; (4494 <nm_spi_read+0x1c8>)
    4390:	4798      	blx	r3
		goto _FAIL_;
    4392:	e035      	b.n	4400 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    4394:	2315      	movs	r3, #21
    4396:	18fb      	adds	r3, r7, r3
    4398:	781b      	ldrb	r3, [r3, #0]
    439a:	2b00      	cmp	r3, #0
    439c:	d011      	beq.n	43c2 <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    439e:	2317      	movs	r3, #23
    43a0:	18fc      	adds	r4, r7, r3
    43a2:	1dbb      	adds	r3, r7, #6
    43a4:	8819      	ldrh	r1, [r3, #0]
    43a6:	2310      	movs	r3, #16
    43a8:	18fb      	adds	r3, r7, r3
    43aa:	2200      	movs	r2, #0
    43ac:	0018      	movs	r0, r3
    43ae:	4b3d      	ldr	r3, [pc, #244]	; (44a4 <nm_spi_read+0x1d8>)
    43b0:	4798      	blx	r3
    43b2:	0003      	movs	r3, r0
    43b4:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    43b6:	2310      	movs	r3, #16
    43b8:	18fb      	adds	r3, r7, r3
    43ba:	781a      	ldrb	r2, [r3, #0]
    43bc:	68bb      	ldr	r3, [r7, #8]
    43be:	701a      	strb	r2, [r3, #0]
    43c0:	e00a      	b.n	43d8 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    43c2:	2317      	movs	r3, #23
    43c4:	18fc      	adds	r4, r7, r3
    43c6:	1dbb      	adds	r3, r7, #6
    43c8:	8819      	ldrh	r1, [r3, #0]
    43ca:	68bb      	ldr	r3, [r7, #8]
    43cc:	2200      	movs	r2, #0
    43ce:	0018      	movs	r0, r3
    43d0:	4b34      	ldr	r3, [pc, #208]	; (44a4 <nm_spi_read+0x1d8>)
    43d2:	4798      	blx	r3
    43d4:	0003      	movs	r3, r0
    43d6:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    43d8:	2317      	movs	r3, #23
    43da:	18fb      	adds	r3, r7, r3
    43dc:	781b      	ldrb	r3, [r3, #0]
    43de:	b25b      	sxtb	r3, r3
    43e0:	2b01      	cmp	r3, #1
    43e2:	d00d      	beq.n	4400 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    43e4:	4a30      	ldr	r2, [pc, #192]	; (44a8 <nm_spi_read+0x1dc>)
    43e6:	4927      	ldr	r1, [pc, #156]	; (4484 <nm_spi_read+0x1b8>)
    43e8:	4b27      	ldr	r3, [pc, #156]	; (4488 <nm_spi_read+0x1bc>)
    43ea:	0018      	movs	r0, r3
    43ec:	4b27      	ldr	r3, [pc, #156]	; (448c <nm_spi_read+0x1c0>)
    43ee:	4798      	blx	r3
    43f0:	4b2e      	ldr	r3, [pc, #184]	; (44ac <nm_spi_read+0x1e0>)
    43f2:	0018      	movs	r0, r3
    43f4:	4b2e      	ldr	r3, [pc, #184]	; (44b0 <nm_spi_read+0x1e4>)
    43f6:	4798      	blx	r3
    43f8:	200d      	movs	r0, #13
    43fa:	4b26      	ldr	r3, [pc, #152]	; (4494 <nm_spi_read+0x1c8>)
    43fc:	4798      	blx	r3
		goto _FAIL_;
    43fe:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    4400:	2317      	movs	r3, #23
    4402:	18fb      	adds	r3, r7, r3
    4404:	781b      	ldrb	r3, [r3, #0]
    4406:	b25b      	sxtb	r3, r3
    4408:	2b01      	cmp	r3, #1
    440a:	d02f      	beq.n	446c <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    440c:	2001      	movs	r0, #1
    440e:	4b29      	ldr	r3, [pc, #164]	; (44b4 <nm_spi_read+0x1e8>)
    4410:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4412:	2300      	movs	r3, #0
    4414:	9300      	str	r3, [sp, #0]
    4416:	2300      	movs	r3, #0
    4418:	2200      	movs	r2, #0
    441a:	2100      	movs	r1, #0
    441c:	20cf      	movs	r0, #207	; 0xcf
    441e:	4c17      	ldr	r4, [pc, #92]	; (447c <nm_spi_read+0x1b0>)
    4420:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4422:	20cf      	movs	r0, #207	; 0xcf
    4424:	4b1c      	ldr	r3, [pc, #112]	; (4498 <nm_spi_read+0x1cc>)
    4426:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4428:	4a23      	ldr	r2, [pc, #140]	; (44b8 <nm_spi_read+0x1ec>)
    442a:	4916      	ldr	r1, [pc, #88]	; (4484 <nm_spi_read+0x1b8>)
    442c:	4b16      	ldr	r3, [pc, #88]	; (4488 <nm_spi_read+0x1bc>)
    442e:	0018      	movs	r0, r3
    4430:	4b16      	ldr	r3, [pc, #88]	; (448c <nm_spi_read+0x1c0>)
    4432:	4798      	blx	r3
    4434:	2316      	movs	r3, #22
    4436:	18fb      	adds	r3, r7, r3
    4438:	7819      	ldrb	r1, [r3, #0]
    443a:	1dbb      	adds	r3, r7, #6
    443c:	881b      	ldrh	r3, [r3, #0]
    443e:	68fa      	ldr	r2, [r7, #12]
    4440:	481e      	ldr	r0, [pc, #120]	; (44bc <nm_spi_read+0x1f0>)
    4442:	4c12      	ldr	r4, [pc, #72]	; (448c <nm_spi_read+0x1c0>)
    4444:	47a0      	blx	r4
    4446:	200d      	movs	r0, #13
    4448:	4b12      	ldr	r3, [pc, #72]	; (4494 <nm_spi_read+0x1c8>)
    444a:	4798      	blx	r3
		nm_bsp_sleep(1);
    444c:	2001      	movs	r0, #1
    444e:	4b19      	ldr	r3, [pc, #100]	; (44b4 <nm_spi_read+0x1e8>)
    4450:	4798      	blx	r3
		retry--;
    4452:	2316      	movs	r3, #22
    4454:	18fb      	adds	r3, r7, r3
    4456:	781a      	ldrb	r2, [r3, #0]
    4458:	2316      	movs	r3, #22
    445a:	18fb      	adds	r3, r7, r3
    445c:	3a01      	subs	r2, #1
    445e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4460:	2316      	movs	r3, #22
    4462:	18fb      	adds	r3, r7, r3
    4464:	781b      	ldrb	r3, [r3, #0]
    4466:	2b00      	cmp	r3, #0
    4468:	d000      	beq.n	446c <nm_spi_read+0x1a0>
    446a:	e742      	b.n	42f2 <nm_spi_read+0x26>
	}

	return result;
    446c:	2317      	movs	r3, #23
    446e:	18fb      	adds	r3, r7, r3
    4470:	781b      	ldrb	r3, [r3, #0]
    4472:	b25b      	sxtb	r3, r3
}
    4474:	0018      	movs	r0, r3
    4476:	46bd      	mov	sp, r7
    4478:	b006      	add	sp, #24
    447a:	bdb0      	pop	{r4, r5, r7, pc}
    447c:	000033f1 	.word	0x000033f1
    4480:	0000045d 	.word	0x0000045d
    4484:	00014998 	.word	0x00014998
    4488:	00014390 	.word	0x00014390
    448c:	0000f0ad 	.word	0x0000f0ad
    4490:	00014784 	.word	0x00014784
    4494:	0000f0e1 	.word	0x0000f0e1
    4498:	00003835 	.word	0x00003835
    449c:	00000463 	.word	0x00000463
    44a0:	000147b4 	.word	0x000147b4
    44a4:	0000396d 	.word	0x0000396d
    44a8:	00000473 	.word	0x00000473
    44ac:	000147ec 	.word	0x000147ec
    44b0:	0000f1c9 	.word	0x0000f1c9
    44b4:	00000331 	.word	0x00000331
    44b8:	00000484 	.word	0x00000484
    44bc:	000146d0 	.word	0x000146d0

000044c0 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b082      	sub	sp, #8
    44c4:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    44c6:	4b0c      	ldr	r3, [pc, #48]	; (44f8 <spi_init_pkt_sz+0x38>)
    44c8:	0018      	movs	r0, r3
    44ca:	4b0c      	ldr	r3, [pc, #48]	; (44fc <spi_init_pkt_sz+0x3c>)
    44cc:	4798      	blx	r3
    44ce:	0003      	movs	r3, r0
    44d0:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	2270      	movs	r2, #112	; 0x70
    44d6:	4393      	bics	r3, r2
    44d8:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	2250      	movs	r2, #80	; 0x50
    44de:	4313      	orrs	r3, r2
    44e0:	607b      	str	r3, [r7, #4]
    44e2:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    44e4:	687b      	ldr	r3, [r7, #4]
    44e6:	4a04      	ldr	r2, [pc, #16]	; (44f8 <spi_init_pkt_sz+0x38>)
    44e8:	0019      	movs	r1, r3
    44ea:	0010      	movs	r0, r2
    44ec:	4b04      	ldr	r3, [pc, #16]	; (4500 <spi_init_pkt_sz+0x40>)
    44ee:	4798      	blx	r3
}
    44f0:	46c0      	nop			; (mov r8, r8)
    44f2:	46bd      	mov	sp, r7
    44f4:	b002      	add	sp, #8
    44f6:	bd80      	pop	{r7, pc}
    44f8:	0000e824 	.word	0x0000e824
    44fc:	00004699 	.word	0x00004699
    4500:	0000470d 	.word	0x0000470d

00004504 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    4504:	b590      	push	{r4, r7, lr}
    4506:	b083      	sub	sp, #12
    4508:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    450a:	2300      	movs	r3, #0
    450c:	9300      	str	r3, [sp, #0]
    450e:	2300      	movs	r3, #0
    4510:	2200      	movs	r2, #0
    4512:	2100      	movs	r1, #0
    4514:	20cf      	movs	r0, #207	; 0xcf
    4516:	4c05      	ldr	r4, [pc, #20]	; (452c <nm_spi_reset+0x28>)
    4518:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    451a:	20cf      	movs	r0, #207	; 0xcf
    451c:	4b04      	ldr	r3, [pc, #16]	; (4530 <nm_spi_reset+0x2c>)
    451e:	4798      	blx	r3
	return M2M_SUCCESS;
    4520:	2300      	movs	r3, #0
}
    4522:	0018      	movs	r0, r3
    4524:	46bd      	mov	sp, r7
    4526:	b001      	add	sp, #4
    4528:	bd90      	pop	{r4, r7, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	000033f1 	.word	0x000033f1
    4530:	00003835 	.word	0x00003835

00004534 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    4534:	b580      	push	{r7, lr}
    4536:	b082      	sub	sp, #8
    4538:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    453a:	2300      	movs	r3, #0
    453c:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    453e:	4b3e      	ldr	r3, [pc, #248]	; (4638 <nm_spi_init+0x104>)
    4540:	2200      	movs	r2, #0
    4542:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4544:	003b      	movs	r3, r7
    4546:	4a3d      	ldr	r2, [pc, #244]	; (463c <nm_spi_init+0x108>)
    4548:	0019      	movs	r1, r3
    454a:	0010      	movs	r0, r2
    454c:	4b3c      	ldr	r3, [pc, #240]	; (4640 <nm_spi_init+0x10c>)
    454e:	4798      	blx	r3
    4550:	1e03      	subs	r3, r0, #0
    4552:	d126      	bne.n	45a2 <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    4554:	4b38      	ldr	r3, [pc, #224]	; (4638 <nm_spi_init+0x104>)
    4556:	2201      	movs	r2, #1
    4558:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    455a:	4a3a      	ldr	r2, [pc, #232]	; (4644 <nm_spi_init+0x110>)
    455c:	493a      	ldr	r1, [pc, #232]	; (4648 <nm_spi_init+0x114>)
    455e:	4b3b      	ldr	r3, [pc, #236]	; (464c <nm_spi_init+0x118>)
    4560:	0018      	movs	r0, r3
    4562:	4b3b      	ldr	r3, [pc, #236]	; (4650 <nm_spi_init+0x11c>)
    4564:	4798      	blx	r3
    4566:	4b3b      	ldr	r3, [pc, #236]	; (4654 <nm_spi_init+0x120>)
    4568:	0018      	movs	r0, r3
    456a:	4b3b      	ldr	r3, [pc, #236]	; (4658 <nm_spi_init+0x124>)
    456c:	4798      	blx	r3
    456e:	200d      	movs	r0, #13
    4570:	4b3a      	ldr	r3, [pc, #232]	; (465c <nm_spi_init+0x128>)
    4572:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    4574:	003b      	movs	r3, r7
    4576:	4a31      	ldr	r2, [pc, #196]	; (463c <nm_spi_init+0x108>)
    4578:	0019      	movs	r1, r3
    457a:	0010      	movs	r0, r2
    457c:	4b30      	ldr	r3, [pc, #192]	; (4640 <nm_spi_init+0x10c>)
    457e:	4798      	blx	r3
    4580:	1e03      	subs	r3, r0, #0
    4582:	d10e      	bne.n	45a2 <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    4584:	4a36      	ldr	r2, [pc, #216]	; (4660 <nm_spi_init+0x12c>)
    4586:	4930      	ldr	r1, [pc, #192]	; (4648 <nm_spi_init+0x114>)
    4588:	4b30      	ldr	r3, [pc, #192]	; (464c <nm_spi_init+0x118>)
    458a:	0018      	movs	r0, r3
    458c:	4b30      	ldr	r3, [pc, #192]	; (4650 <nm_spi_init+0x11c>)
    458e:	4798      	blx	r3
    4590:	4b34      	ldr	r3, [pc, #208]	; (4664 <nm_spi_init+0x130>)
    4592:	0018      	movs	r0, r3
    4594:	4b30      	ldr	r3, [pc, #192]	; (4658 <nm_spi_init+0x124>)
    4596:	4798      	blx	r3
    4598:	200d      	movs	r0, #13
    459a:	4b30      	ldr	r3, [pc, #192]	; (465c <nm_spi_init+0x128>)
    459c:	4798      	blx	r3
			return 0;
    459e:	2300      	movs	r3, #0
    45a0:	e045      	b.n	462e <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    45a2:	4b25      	ldr	r3, [pc, #148]	; (4638 <nm_spi_init+0x104>)
    45a4:	781b      	ldrb	r3, [r3, #0]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d125      	bne.n	45f6 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    45aa:	683b      	ldr	r3, [r7, #0]
    45ac:	220c      	movs	r2, #12
    45ae:	4393      	bics	r3, r2
    45b0:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    45b2:	683b      	ldr	r3, [r7, #0]
    45b4:	2270      	movs	r2, #112	; 0x70
    45b6:	4393      	bics	r3, r2
    45b8:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    45ba:	683b      	ldr	r3, [r7, #0]
    45bc:	2250      	movs	r2, #80	; 0x50
    45be:	4313      	orrs	r3, r2
    45c0:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    45c2:	683b      	ldr	r3, [r7, #0]
    45c4:	4a1d      	ldr	r2, [pc, #116]	; (463c <nm_spi_init+0x108>)
    45c6:	0019      	movs	r1, r3
    45c8:	0010      	movs	r0, r2
    45ca:	4b27      	ldr	r3, [pc, #156]	; (4668 <nm_spi_init+0x134>)
    45cc:	4798      	blx	r3
    45ce:	1e03      	subs	r3, r0, #0
    45d0:	d10e      	bne.n	45f0 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    45d2:	4a26      	ldr	r2, [pc, #152]	; (466c <nm_spi_init+0x138>)
    45d4:	491c      	ldr	r1, [pc, #112]	; (4648 <nm_spi_init+0x114>)
    45d6:	4b1d      	ldr	r3, [pc, #116]	; (464c <nm_spi_init+0x118>)
    45d8:	0018      	movs	r0, r3
    45da:	4b1d      	ldr	r3, [pc, #116]	; (4650 <nm_spi_init+0x11c>)
    45dc:	4798      	blx	r3
    45de:	4b24      	ldr	r3, [pc, #144]	; (4670 <nm_spi_init+0x13c>)
    45e0:	0018      	movs	r0, r3
    45e2:	4b1d      	ldr	r3, [pc, #116]	; (4658 <nm_spi_init+0x124>)
    45e4:	4798      	blx	r3
    45e6:	200d      	movs	r0, #13
    45e8:	4b1c      	ldr	r3, [pc, #112]	; (465c <nm_spi_init+0x128>)
    45ea:	4798      	blx	r3
			return 0;
    45ec:	2300      	movs	r3, #0
    45ee:	e01e      	b.n	462e <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    45f0:	4b11      	ldr	r3, [pc, #68]	; (4638 <nm_spi_init+0x104>)
    45f2:	2201      	movs	r2, #1
    45f4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    45f6:	1d3a      	adds	r2, r7, #4
    45f8:	2380      	movs	r3, #128	; 0x80
    45fa:	015b      	lsls	r3, r3, #5
    45fc:	0011      	movs	r1, r2
    45fe:	0018      	movs	r0, r3
    4600:	4b0f      	ldr	r3, [pc, #60]	; (4640 <nm_spi_init+0x10c>)
    4602:	4798      	blx	r3
    4604:	1e03      	subs	r3, r0, #0
    4606:	d10f      	bne.n	4628 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    4608:	4a1a      	ldr	r2, [pc, #104]	; (4674 <nm_spi_init+0x140>)
    460a:	490f      	ldr	r1, [pc, #60]	; (4648 <nm_spi_init+0x114>)
    460c:	4b0f      	ldr	r3, [pc, #60]	; (464c <nm_spi_init+0x118>)
    460e:	0018      	movs	r0, r3
    4610:	4b0f      	ldr	r3, [pc, #60]	; (4650 <nm_spi_init+0x11c>)
    4612:	4798      	blx	r3
    4614:	4b18      	ldr	r3, [pc, #96]	; (4678 <nm_spi_init+0x144>)
    4616:	0018      	movs	r0, r3
    4618:	4b0f      	ldr	r3, [pc, #60]	; (4658 <nm_spi_init+0x124>)
    461a:	4798      	blx	r3
    461c:	200d      	movs	r0, #13
    461e:	4b0f      	ldr	r3, [pc, #60]	; (465c <nm_spi_init+0x128>)
    4620:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    4622:	2306      	movs	r3, #6
    4624:	425b      	negs	r3, r3
    4626:	e002      	b.n	462e <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    4628:	4b14      	ldr	r3, [pc, #80]	; (467c <nm_spi_init+0x148>)
    462a:	4798      	blx	r3


	return M2M_SUCCESS;
    462c:	2300      	movs	r3, #0
}
    462e:	0018      	movs	r0, r3
    4630:	46bd      	mov	sp, r7
    4632:	b002      	add	sp, #8
    4634:	bd80      	pop	{r7, pc}
    4636:	46c0      	nop			; (mov r8, r8)
    4638:	2000027c 	.word	0x2000027c
    463c:	0000e824 	.word	0x0000e824
    4640:	000040c5 	.word	0x000040c5
    4644:	000004c7 	.word	0x000004c7
    4648:	000149a4 	.word	0x000149a4
    464c:	00014390 	.word	0x00014390
    4650:	0000f0ad 	.word	0x0000f0ad
    4654:	00014814 	.word	0x00014814
    4658:	0000f1c9 	.word	0x0000f1c9
    465c:	0000f0e1 	.word	0x0000f0e1
    4660:	000004ca 	.word	0x000004ca
    4664:	00014864 	.word	0x00014864
    4668:	00003d45 	.word	0x00003d45
    466c:	000004d4 	.word	0x000004d4
    4670:	00014890 	.word	0x00014890
    4674:	000004de 	.word	0x000004de
    4678:	000148c4 	.word	0x000148c4
    467c:	000044c1 	.word	0x000044c1

00004680 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    4680:	b580      	push	{r7, lr}
    4682:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4684:	4b03      	ldr	r3, [pc, #12]	; (4694 <nm_spi_deinit+0x14>)
    4686:	2200      	movs	r2, #0
    4688:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    468a:	2300      	movs	r3, #0
}
    468c:	0018      	movs	r0, r3
    468e:	46bd      	mov	sp, r7
    4690:	bd80      	pop	{r7, pc}
    4692:	46c0      	nop			; (mov r8, r8)
    4694:	2000027c 	.word	0x2000027c

00004698 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4698:	b580      	push	{r7, lr}
    469a:	b084      	sub	sp, #16
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    46a0:	230c      	movs	r3, #12
    46a2:	18fa      	adds	r2, r7, r3
    46a4:	687b      	ldr	r3, [r7, #4]
    46a6:	0011      	movs	r1, r2
    46a8:	0018      	movs	r0, r3
    46aa:	4b03      	ldr	r3, [pc, #12]	; (46b8 <nm_spi_read_reg+0x20>)
    46ac:	4798      	blx	r3

	return u32Val;
    46ae:	68fb      	ldr	r3, [r7, #12]
}
    46b0:	0018      	movs	r0, r3
    46b2:	46bd      	mov	sp, r7
    46b4:	b004      	add	sp, #16
    46b6:	bd80      	pop	{r7, pc}
    46b8:	000040c5 	.word	0x000040c5

000046bc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    46bc:	b590      	push	{r4, r7, lr}
    46be:	b085      	sub	sp, #20
    46c0:	af00      	add	r7, sp, #0
    46c2:	6078      	str	r0, [r7, #4]
    46c4:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    46c6:	230f      	movs	r3, #15
    46c8:	18fc      	adds	r4, r7, r3
    46ca:	683a      	ldr	r2, [r7, #0]
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	0011      	movs	r1, r2
    46d0:	0018      	movs	r0, r3
    46d2:	4b0d      	ldr	r3, [pc, #52]	; (4708 <nm_spi_read_reg_with_ret+0x4c>)
    46d4:	4798      	blx	r3
    46d6:	0003      	movs	r3, r0
    46d8:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    46da:	230f      	movs	r3, #15
    46dc:	18fb      	adds	r3, r7, r3
    46de:	781b      	ldrb	r3, [r3, #0]
    46e0:	b25b      	sxtb	r3, r3
    46e2:	2b01      	cmp	r3, #1
    46e4:	d104      	bne.n	46f0 <nm_spi_read_reg_with_ret+0x34>
    46e6:	230f      	movs	r3, #15
    46e8:	18fb      	adds	r3, r7, r3
    46ea:	2200      	movs	r2, #0
    46ec:	701a      	strb	r2, [r3, #0]
    46ee:	e003      	b.n	46f8 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    46f0:	230f      	movs	r3, #15
    46f2:	18fb      	adds	r3, r7, r3
    46f4:	22fa      	movs	r2, #250	; 0xfa
    46f6:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    46f8:	230f      	movs	r3, #15
    46fa:	18fb      	adds	r3, r7, r3
    46fc:	781b      	ldrb	r3, [r3, #0]
    46fe:	b25b      	sxtb	r3, r3
}
    4700:	0018      	movs	r0, r3
    4702:	46bd      	mov	sp, r7
    4704:	b005      	add	sp, #20
    4706:	bd90      	pop	{r4, r7, pc}
    4708:	000040c5 	.word	0x000040c5

0000470c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    470c:	b590      	push	{r4, r7, lr}
    470e:	b085      	sub	sp, #20
    4710:	af00      	add	r7, sp, #0
    4712:	6078      	str	r0, [r7, #4]
    4714:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    4716:	230f      	movs	r3, #15
    4718:	18fc      	adds	r4, r7, r3
    471a:	683a      	ldr	r2, [r7, #0]
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	0011      	movs	r1, r2
    4720:	0018      	movs	r0, r3
    4722:	4b0d      	ldr	r3, [pc, #52]	; (4758 <nm_spi_write_reg+0x4c>)
    4724:	4798      	blx	r3
    4726:	0003      	movs	r3, r0
    4728:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    472a:	230f      	movs	r3, #15
    472c:	18fb      	adds	r3, r7, r3
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	b25b      	sxtb	r3, r3
    4732:	2b01      	cmp	r3, #1
    4734:	d104      	bne.n	4740 <nm_spi_write_reg+0x34>
    4736:	230f      	movs	r3, #15
    4738:	18fb      	adds	r3, r7, r3
    473a:	2200      	movs	r2, #0
    473c:	701a      	strb	r2, [r3, #0]
    473e:	e003      	b.n	4748 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4740:	230f      	movs	r3, #15
    4742:	18fb      	adds	r3, r7, r3
    4744:	22fa      	movs	r2, #250	; 0xfa
    4746:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4748:	230f      	movs	r3, #15
    474a:	18fb      	adds	r3, r7, r3
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	b25b      	sxtb	r3, r3
}
    4750:	0018      	movs	r0, r3
    4752:	46bd      	mov	sp, r7
    4754:	b005      	add	sp, #20
    4756:	bd90      	pop	{r4, r7, pc}
    4758:	00003d45 	.word	0x00003d45

0000475c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    475c:	b590      	push	{r4, r7, lr}
    475e:	b087      	sub	sp, #28
    4760:	af00      	add	r7, sp, #0
    4762:	60f8      	str	r0, [r7, #12]
    4764:	60b9      	str	r1, [r7, #8]
    4766:	1dbb      	adds	r3, r7, #6
    4768:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    476a:	2317      	movs	r3, #23
    476c:	18fc      	adds	r4, r7, r3
    476e:	1dbb      	adds	r3, r7, #6
    4770:	881a      	ldrh	r2, [r3, #0]
    4772:	68b9      	ldr	r1, [r7, #8]
    4774:	68fb      	ldr	r3, [r7, #12]
    4776:	0018      	movs	r0, r3
    4778:	4b0d      	ldr	r3, [pc, #52]	; (47b0 <nm_spi_read_block+0x54>)
    477a:	4798      	blx	r3
    477c:	0003      	movs	r3, r0
    477e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4780:	2317      	movs	r3, #23
    4782:	18fb      	adds	r3, r7, r3
    4784:	781b      	ldrb	r3, [r3, #0]
    4786:	b25b      	sxtb	r3, r3
    4788:	2b01      	cmp	r3, #1
    478a:	d104      	bne.n	4796 <nm_spi_read_block+0x3a>
    478c:	2317      	movs	r3, #23
    478e:	18fb      	adds	r3, r7, r3
    4790:	2200      	movs	r2, #0
    4792:	701a      	strb	r2, [r3, #0]
    4794:	e003      	b.n	479e <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4796:	2317      	movs	r3, #23
    4798:	18fb      	adds	r3, r7, r3
    479a:	22fa      	movs	r2, #250	; 0xfa
    479c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    479e:	2317      	movs	r3, #23
    47a0:	18fb      	adds	r3, r7, r3
    47a2:	781b      	ldrb	r3, [r3, #0]
    47a4:	b25b      	sxtb	r3, r3
}
    47a6:	0018      	movs	r0, r3
    47a8:	46bd      	mov	sp, r7
    47aa:	b007      	add	sp, #28
    47ac:	bd90      	pop	{r4, r7, pc}
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	000042cd 	.word	0x000042cd

000047b4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    47b4:	b590      	push	{r4, r7, lr}
    47b6:	b087      	sub	sp, #28
    47b8:	af00      	add	r7, sp, #0
    47ba:	60f8      	str	r0, [r7, #12]
    47bc:	60b9      	str	r1, [r7, #8]
    47be:	1dbb      	adds	r3, r7, #6
    47c0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    47c2:	2317      	movs	r3, #23
    47c4:	18fc      	adds	r4, r7, r3
    47c6:	1dbb      	adds	r3, r7, #6
    47c8:	881a      	ldrh	r2, [r3, #0]
    47ca:	68b9      	ldr	r1, [r7, #8]
    47cc:	68fb      	ldr	r3, [r7, #12]
    47ce:	0018      	movs	r0, r3
    47d0:	4b0d      	ldr	r3, [pc, #52]	; (4808 <nm_spi_write_block+0x54>)
    47d2:	4798      	blx	r3
    47d4:	0003      	movs	r3, r0
    47d6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    47d8:	2317      	movs	r3, #23
    47da:	18fb      	adds	r3, r7, r3
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	b25b      	sxtb	r3, r3
    47e0:	2b01      	cmp	r3, #1
    47e2:	d104      	bne.n	47ee <nm_spi_write_block+0x3a>
    47e4:	2317      	movs	r3, #23
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	2200      	movs	r2, #0
    47ea:	701a      	strb	r2, [r3, #0]
    47ec:	e003      	b.n	47f6 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    47ee:	2317      	movs	r3, #23
    47f0:	18fb      	adds	r3, r7, r3
    47f2:	22fa      	movs	r2, #250	; 0xfa
    47f4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    47f6:	2317      	movs	r3, #23
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	b25b      	sxtb	r3, r3
}
    47fe:	0018      	movs	r0, r3
    4800:	46bd      	mov	sp, r7
    4802:	b007      	add	sp, #28
    4804:	bd90      	pop	{r4, r7, pc}
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	00003ed1 	.word	0x00003ed1

0000480c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    480c:	b590      	push	{r4, r7, lr}
    480e:	b089      	sub	sp, #36	; 0x24
    4810:	af00      	add	r7, sp, #0
    4812:	60b9      	str	r1, [r7, #8]
    4814:	0011      	movs	r1, r2
    4816:	607b      	str	r3, [r7, #4]
    4818:	230f      	movs	r3, #15
    481a:	18fb      	adds	r3, r7, r3
    481c:	1c02      	adds	r2, r0, #0
    481e:	701a      	strb	r2, [r3, #0]
    4820:	230e      	movs	r3, #14
    4822:	18fb      	adds	r3, r7, r3
    4824:	1c0a      	adds	r2, r1, #0
    4826:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    4828:	2330      	movs	r3, #48	; 0x30
    482a:	18fb      	adds	r3, r7, r3
    482c:	881b      	ldrh	r3, [r3, #0]
    482e:	2b00      	cmp	r3, #0
    4830:	d100      	bne.n	4834 <Socket_ReadSocketData+0x28>
    4832:	e0d6      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
    4834:	230f      	movs	r3, #15
    4836:	18fb      	adds	r3, r7, r3
    4838:	2200      	movs	r2, #0
    483a:	569a      	ldrsb	r2, [r3, r2]
    483c:	4b6b      	ldr	r3, [pc, #428]	; (49ec <Socket_ReadSocketData+0x1e0>)
    483e:	0112      	lsls	r2, r2, #4
    4840:	58d3      	ldr	r3, [r2, r3]
    4842:	2b00      	cmp	r3, #0
    4844:	d100      	bne.n	4848 <Socket_ReadSocketData+0x3c>
    4846:	e0cc      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
    4848:	230f      	movs	r3, #15
    484a:	18fb      	adds	r3, r7, r3
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	b25b      	sxtb	r3, r3
    4850:	4a66      	ldr	r2, [pc, #408]	; (49ec <Socket_ReadSocketData+0x1e0>)
    4852:	011b      	lsls	r3, r3, #4
    4854:	18d3      	adds	r3, r2, r3
    4856:	3304      	adds	r3, #4
    4858:	881b      	ldrh	r3, [r3, #0]
    485a:	b29b      	uxth	r3, r3
    485c:	2b00      	cmp	r3, #0
    485e:	d100      	bne.n	4862 <Socket_ReadSocketData+0x56>
    4860:	e0bf      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
    4862:	230f      	movs	r3, #15
    4864:	18fb      	adds	r3, r7, r3
    4866:	781b      	ldrb	r3, [r3, #0]
    4868:	b25b      	sxtb	r3, r3
    486a:	4a60      	ldr	r2, [pc, #384]	; (49ec <Socket_ReadSocketData+0x1e0>)
    486c:	011b      	lsls	r3, r3, #4
    486e:	18d3      	adds	r3, r2, r3
    4870:	330a      	adds	r3, #10
    4872:	781b      	ldrb	r3, [r3, #0]
    4874:	b2db      	uxtb	r3, r3
    4876:	2b01      	cmp	r3, #1
    4878:	d000      	beq.n	487c <Socket_ReadSocketData+0x70>
    487a:	e0b2      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    4880:	68bb      	ldr	r3, [r7, #8]
    4882:	2230      	movs	r2, #48	; 0x30
    4884:	18ba      	adds	r2, r7, r2
    4886:	8812      	ldrh	r2, [r2, #0]
    4888:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    488a:	2319      	movs	r3, #25
    488c:	18fb      	adds	r3, r7, r3
    488e:	2201      	movs	r2, #1
    4890:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    4892:	231a      	movs	r3, #26
    4894:	18fb      	adds	r3, r7, r3
    4896:	2230      	movs	r2, #48	; 0x30
    4898:	18ba      	adds	r2, r7, r2
    489a:	8812      	ldrh	r2, [r2, #0]
    489c:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    489e:	230f      	movs	r3, #15
    48a0:	18fb      	adds	r3, r7, r3
    48a2:	781b      	ldrb	r3, [r3, #0]
    48a4:	b25b      	sxtb	r3, r3
    48a6:	4a51      	ldr	r2, [pc, #324]	; (49ec <Socket_ReadSocketData+0x1e0>)
    48a8:	011b      	lsls	r3, r3, #4
    48aa:	18d3      	adds	r3, r2, r3
    48ac:	3304      	adds	r3, #4
    48ae:	881b      	ldrh	r3, [r3, #0]
    48b0:	b29b      	uxth	r3, r3
    48b2:	221a      	movs	r2, #26
    48b4:	18ba      	adds	r2, r7, r2
    48b6:	8812      	ldrh	r2, [r2, #0]
    48b8:	1ad3      	subs	r3, r2, r3
    48ba:	b29a      	uxth	r2, r3
    48bc:	2316      	movs	r3, #22
    48be:	18fb      	adds	r3, r7, r3
    48c0:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    48c2:	2316      	movs	r3, #22
    48c4:	18fb      	adds	r3, r7, r3
    48c6:	2200      	movs	r2, #0
    48c8:	5e9b      	ldrsh	r3, [r3, r2]
    48ca:	2b00      	cmp	r3, #0
    48cc:	dd0f      	ble.n	48ee <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    48ce:	2319      	movs	r3, #25
    48d0:	18fb      	adds	r3, r7, r3
    48d2:	2200      	movs	r2, #0
    48d4:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    48d6:	230f      	movs	r3, #15
    48d8:	18fb      	adds	r3, r7, r3
    48da:	2200      	movs	r2, #0
    48dc:	569a      	ldrsb	r2, [r3, r2]
    48de:	231a      	movs	r3, #26
    48e0:	18fb      	adds	r3, r7, r3
    48e2:	4942      	ldr	r1, [pc, #264]	; (49ec <Socket_ReadSocketData+0x1e0>)
    48e4:	0112      	lsls	r2, r2, #4
    48e6:	188a      	adds	r2, r1, r2
    48e8:	3204      	adds	r2, #4
    48ea:	8812      	ldrh	r2, [r2, #0]
    48ec:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    48ee:	230f      	movs	r3, #15
    48f0:	18fb      	adds	r3, r7, r3
    48f2:	2200      	movs	r2, #0
    48f4:	569a      	ldrsb	r2, [r3, r2]
    48f6:	4b3d      	ldr	r3, [pc, #244]	; (49ec <Socket_ReadSocketData+0x1e0>)
    48f8:	0112      	lsls	r2, r2, #4
    48fa:	58d1      	ldr	r1, [r2, r3]
    48fc:	2319      	movs	r3, #25
    48fe:	18fb      	adds	r3, r7, r3
    4900:	781c      	ldrb	r4, [r3, #0]
    4902:	231a      	movs	r3, #26
    4904:	18fb      	adds	r3, r7, r3
    4906:	881a      	ldrh	r2, [r3, #0]
    4908:	69f8      	ldr	r0, [r7, #28]
    490a:	0023      	movs	r3, r4
    490c:	4c38      	ldr	r4, [pc, #224]	; (49f0 <Socket_ReadSocketData+0x1e4>)
    490e:	47a0      	blx	r4
    4910:	1e03      	subs	r3, r0, #0
    4912:	d14f      	bne.n	49b4 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    4914:	230f      	movs	r3, #15
    4916:	18fb      	adds	r3, r7, r3
    4918:	2200      	movs	r2, #0
    491a:	569a      	ldrsb	r2, [r3, r2]
    491c:	4b33      	ldr	r3, [pc, #204]	; (49ec <Socket_ReadSocketData+0x1e0>)
    491e:	0112      	lsls	r2, r2, #4
    4920:	58d2      	ldr	r2, [r2, r3]
    4922:	68bb      	ldr	r3, [r7, #8]
    4924:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    4926:	231a      	movs	r3, #26
    4928:	18fb      	adds	r3, r7, r3
    492a:	2200      	movs	r2, #0
    492c:	5e9a      	ldrsh	r2, [r3, r2]
    492e:	68bb      	ldr	r3, [r7, #8]
    4930:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    4932:	68bb      	ldr	r3, [r7, #8]
    4934:	88da      	ldrh	r2, [r3, #6]
    4936:	231a      	movs	r3, #26
    4938:	18fb      	adds	r3, r7, r3
    493a:	881b      	ldrh	r3, [r3, #0]
    493c:	1ad3      	subs	r3, r2, r3
    493e:	b29a      	uxth	r2, r3
    4940:	68bb      	ldr	r3, [r7, #8]
    4942:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    4944:	4b2b      	ldr	r3, [pc, #172]	; (49f4 <Socket_ReadSocketData+0x1e8>)
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	2b00      	cmp	r3, #0
    494a:	d00b      	beq.n	4964 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    494c:	4b29      	ldr	r3, [pc, #164]	; (49f4 <Socket_ReadSocketData+0x1e8>)
    494e:	681b      	ldr	r3, [r3, #0]
    4950:	68bc      	ldr	r4, [r7, #8]
    4952:	220e      	movs	r2, #14
    4954:	18ba      	adds	r2, r7, r2
    4956:	7811      	ldrb	r1, [r2, #0]
    4958:	220f      	movs	r2, #15
    495a:	18ba      	adds	r2, r7, r2
    495c:	2000      	movs	r0, #0
    495e:	5610      	ldrsb	r0, [r2, r0]
    4960:	0022      	movs	r2, r4
    4962:	4798      	blx	r3

				u16ReadCount -= u16Read;
    4964:	2330      	movs	r3, #48	; 0x30
    4966:	18f9      	adds	r1, r7, r3
    4968:	2330      	movs	r3, #48	; 0x30
    496a:	18fa      	adds	r2, r7, r3
    496c:	231a      	movs	r3, #26
    496e:	18fb      	adds	r3, r7, r3
    4970:	8812      	ldrh	r2, [r2, #0]
    4972:	881b      	ldrh	r3, [r3, #0]
    4974:	1ad3      	subs	r3, r2, r3
    4976:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    4978:	231a      	movs	r3, #26
    497a:	18fb      	adds	r3, r7, r3
    497c:	881b      	ldrh	r3, [r3, #0]
    497e:	69fa      	ldr	r2, [r7, #28]
    4980:	18d3      	adds	r3, r2, r3
    4982:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    4984:	230f      	movs	r3, #15
    4986:	18fb      	adds	r3, r7, r3
    4988:	781b      	ldrb	r3, [r3, #0]
    498a:	b25b      	sxtb	r3, r3
    498c:	4a17      	ldr	r2, [pc, #92]	; (49ec <Socket_ReadSocketData+0x1e0>)
    498e:	011b      	lsls	r3, r3, #4
    4990:	18d3      	adds	r3, r2, r3
    4992:	330a      	adds	r3, #10
    4994:	781b      	ldrb	r3, [r3, #0]
    4996:	b2db      	uxtb	r3, r3
    4998:	2b00      	cmp	r3, #0
    499a:	d11b      	bne.n	49d4 <Socket_ReadSocketData+0x1c8>
    499c:	2330      	movs	r3, #48	; 0x30
    499e:	18fb      	adds	r3, r7, r3
    49a0:	881b      	ldrh	r3, [r3, #0]
    49a2:	2b00      	cmp	r3, #0
    49a4:	d016      	beq.n	49d4 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    49a6:	2301      	movs	r3, #1
    49a8:	2200      	movs	r2, #0
    49aa:	2100      	movs	r1, #0
    49ac:	2000      	movs	r0, #0
    49ae:	4c10      	ldr	r4, [pc, #64]	; (49f0 <Socket_ReadSocketData+0x1e4>)
    49b0:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    49b2:	e016      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    49b4:	4b10      	ldr	r3, [pc, #64]	; (49f8 <Socket_ReadSocketData+0x1ec>)
    49b6:	0018      	movs	r0, r3
    49b8:	4b10      	ldr	r3, [pc, #64]	; (49fc <Socket_ReadSocketData+0x1f0>)
    49ba:	4798      	blx	r3
    49bc:	2330      	movs	r3, #48	; 0x30
    49be:	18fb      	adds	r3, r7, r3
    49c0:	881a      	ldrh	r2, [r3, #0]
    49c2:	4b0f      	ldr	r3, [pc, #60]	; (4a00 <Socket_ReadSocketData+0x1f4>)
    49c4:	0011      	movs	r1, r2
    49c6:	0018      	movs	r0, r3
    49c8:	4b0c      	ldr	r3, [pc, #48]	; (49fc <Socket_ReadSocketData+0x1f0>)
    49ca:	4798      	blx	r3
    49cc:	200d      	movs	r0, #13
    49ce:	4b0d      	ldr	r3, [pc, #52]	; (4a04 <Socket_ReadSocketData+0x1f8>)
    49d0:	4798      	blx	r3
				break;
    49d2:	e006      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    49d4:	2330      	movs	r3, #48	; 0x30
    49d6:	18fb      	adds	r3, r7, r3
    49d8:	881b      	ldrh	r3, [r3, #0]
    49da:	2b00      	cmp	r3, #0
    49dc:	d000      	beq.n	49e0 <Socket_ReadSocketData+0x1d4>
    49de:	e754      	b.n	488a <Socket_ReadSocketData+0x7e>
	}
}
    49e0:	e7ff      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
    49e2:	46c0      	nop			; (mov r8, r8)
    49e4:	46bd      	mov	sp, r7
    49e6:	b009      	add	sp, #36	; 0x24
    49e8:	bd90      	pop	{r4, r7, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	200004d8 	.word	0x200004d8
    49f0:	00001775 	.word	0x00001775
    49f4:	20000588 	.word	0x20000588
    49f8:	000149b0 	.word	0x000149b0
    49fc:	0000f0ad 	.word	0x0000f0ad
    4a00:	000149bc 	.word	0x000149bc
    4a04:	0000f0e1 	.word	0x0000f0e1

00004a08 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    4a08:	b590      	push	{r4, r7, lr}
    4a0a:	b0bb      	sub	sp, #236	; 0xec
    4a0c:	af02      	add	r7, sp, #8
    4a0e:	603a      	str	r2, [r7, #0]
    4a10:	1dfb      	adds	r3, r7, #7
    4a12:	1c02      	adds	r2, r0, #0
    4a14:	701a      	strb	r2, [r3, #0]
    4a16:	1d3b      	adds	r3, r7, #4
    4a18:	1c0a      	adds	r2, r1, #0
    4a1a:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    4a1c:	1dfb      	adds	r3, r7, #7
    4a1e:	781b      	ldrb	r3, [r3, #0]
    4a20:	2b41      	cmp	r3, #65	; 0x41
    4a22:	d003      	beq.n	4a2c <m2m_ip_cb+0x24>
    4a24:	1dfb      	adds	r3, r7, #7
    4a26:	781b      	ldrb	r3, [r3, #0]
    4a28:	2b54      	cmp	r3, #84	; 0x54
    4a2a:	d120      	bne.n	4a6e <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    4a2c:	23cc      	movs	r3, #204	; 0xcc
    4a2e:	18f9      	adds	r1, r7, r3
    4a30:	6838      	ldr	r0, [r7, #0]
    4a32:	2300      	movs	r3, #0
    4a34:	2204      	movs	r2, #4
    4a36:	4c98      	ldr	r4, [pc, #608]	; (4c98 <m2m_ip_cb+0x290>)
    4a38:	47a0      	blx	r4
    4a3a:	1e03      	subs	r3, r0, #0
    4a3c:	d000      	beq.n	4a40 <m2m_ip_cb+0x38>
    4a3e:	e275      	b.n	4f2c <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    4a40:	23cc      	movs	r3, #204	; 0xcc
    4a42:	18fb      	adds	r3, r7, r3
    4a44:	2201      	movs	r2, #1
    4a46:	569a      	ldrsb	r2, [r3, r2]
    4a48:	23c8      	movs	r3, #200	; 0xc8
    4a4a:	18fb      	adds	r3, r7, r3
    4a4c:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4a4e:	4b93      	ldr	r3, [pc, #588]	; (4c9c <m2m_ip_cb+0x294>)
    4a50:	681b      	ldr	r3, [r3, #0]
    4a52:	2b00      	cmp	r3, #0
    4a54:	d100      	bne.n	4a58 <m2m_ip_cb+0x50>
    4a56:	e269      	b.n	4f2c <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    4a58:	4b90      	ldr	r3, [pc, #576]	; (4c9c <m2m_ip_cb+0x294>)
    4a5a:	681b      	ldr	r3, [r3, #0]
    4a5c:	22cc      	movs	r2, #204	; 0xcc
    4a5e:	18ba      	adds	r2, r7, r2
    4a60:	2000      	movs	r0, #0
    4a62:	5610      	ldrsb	r0, [r2, r0]
    4a64:	22c8      	movs	r2, #200	; 0xc8
    4a66:	18ba      	adds	r2, r7, r2
    4a68:	2101      	movs	r1, #1
    4a6a:	4798      	blx	r3
	{
    4a6c:	e25e      	b.n	4f2c <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    4a6e:	1dfb      	adds	r3, r7, #7
    4a70:	781b      	ldrb	r3, [r3, #0]
    4a72:	2b42      	cmp	r3, #66	; 0x42
    4a74:	d120      	bne.n	4ab8 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4a76:	23c4      	movs	r3, #196	; 0xc4
    4a78:	18f9      	adds	r1, r7, r3
    4a7a:	6838      	ldr	r0, [r7, #0]
    4a7c:	2300      	movs	r3, #0
    4a7e:	2204      	movs	r2, #4
    4a80:	4c85      	ldr	r4, [pc, #532]	; (4c98 <m2m_ip_cb+0x290>)
    4a82:	47a0      	blx	r4
    4a84:	1e03      	subs	r3, r0, #0
    4a86:	d000      	beq.n	4a8a <m2m_ip_cb+0x82>
    4a88:	e257      	b.n	4f3a <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    4a8a:	23c4      	movs	r3, #196	; 0xc4
    4a8c:	18fb      	adds	r3, r7, r3
    4a8e:	2201      	movs	r2, #1
    4a90:	569a      	ldrsb	r2, [r3, r2]
    4a92:	23c0      	movs	r3, #192	; 0xc0
    4a94:	18fb      	adds	r3, r7, r3
    4a96:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4a98:	4b80      	ldr	r3, [pc, #512]	; (4c9c <m2m_ip_cb+0x294>)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	2b00      	cmp	r3, #0
    4a9e:	d100      	bne.n	4aa2 <m2m_ip_cb+0x9a>
    4aa0:	e24b      	b.n	4f3a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4aa2:	4b7e      	ldr	r3, [pc, #504]	; (4c9c <m2m_ip_cb+0x294>)
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	22c4      	movs	r2, #196	; 0xc4
    4aa8:	18ba      	adds	r2, r7, r2
    4aaa:	2000      	movs	r0, #0
    4aac:	5610      	ldrsb	r0, [r2, r0]
    4aae:	22c0      	movs	r2, #192	; 0xc0
    4ab0:	18ba      	adds	r2, r7, r2
    4ab2:	2102      	movs	r1, #2
    4ab4:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4ab6:	e240      	b.n	4f3a <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4ab8:	1dfb      	adds	r3, r7, #7
    4aba:	781b      	ldrb	r3, [r3, #0]
    4abc:	2b43      	cmp	r3, #67	; 0x43
    4abe:	d000      	beq.n	4ac2 <m2m_ip_cb+0xba>
    4ac0:	e086      	b.n	4bd0 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4ac2:	23b4      	movs	r3, #180	; 0xb4
    4ac4:	18f9      	adds	r1, r7, r3
    4ac6:	6838      	ldr	r0, [r7, #0]
    4ac8:	2300      	movs	r3, #0
    4aca:	220c      	movs	r2, #12
    4acc:	4c72      	ldr	r4, [pc, #456]	; (4c98 <m2m_ip_cb+0x290>)
    4ace:	47a0      	blx	r4
    4ad0:	1e03      	subs	r3, r0, #0
    4ad2:	d000      	beq.n	4ad6 <m2m_ip_cb+0xce>
    4ad4:	e231      	b.n	4f3a <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    4ad6:	23b4      	movs	r3, #180	; 0xb4
    4ad8:	18fb      	adds	r3, r7, r3
    4ada:	7a5b      	ldrb	r3, [r3, #9]
    4adc:	b25b      	sxtb	r3, r3
    4ade:	2b00      	cmp	r3, #0
    4ae0:	db4f      	blt.n	4b82 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    4ae2:	23b4      	movs	r3, #180	; 0xb4
    4ae4:	18fb      	adds	r3, r7, r3
    4ae6:	7a5b      	ldrb	r3, [r3, #9]
    4ae8:	b25b      	sxtb	r3, r3
    4aea:	0018      	movs	r0, r3
    4aec:	23b4      	movs	r3, #180	; 0xb4
    4aee:	18fb      	adds	r3, r7, r3
    4af0:	7a1b      	ldrb	r3, [r3, #8]
    4af2:	b25b      	sxtb	r3, r3
    4af4:	4a6a      	ldr	r2, [pc, #424]	; (4ca0 <m2m_ip_cb+0x298>)
    4af6:	011b      	lsls	r3, r3, #4
    4af8:	18d3      	adds	r3, r2, r3
    4afa:	330b      	adds	r3, #11
    4afc:	781b      	ldrb	r3, [r3, #0]
    4afe:	b2d9      	uxtb	r1, r3
    4b00:	4a67      	ldr	r2, [pc, #412]	; (4ca0 <m2m_ip_cb+0x298>)
    4b02:	0103      	lsls	r3, r0, #4
    4b04:	18d3      	adds	r3, r2, r3
    4b06:	330b      	adds	r3, #11
    4b08:	1c0a      	adds	r2, r1, #0
    4b0a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    4b0c:	23b4      	movs	r3, #180	; 0xb4
    4b0e:	18fb      	adds	r3, r7, r3
    4b10:	7a5b      	ldrb	r3, [r3, #9]
    4b12:	b25b      	sxtb	r3, r3
    4b14:	4a62      	ldr	r2, [pc, #392]	; (4ca0 <m2m_ip_cb+0x298>)
    4b16:	011b      	lsls	r3, r3, #4
    4b18:	18d3      	adds	r3, r2, r3
    4b1a:	330a      	adds	r3, #10
    4b1c:	2201      	movs	r2, #1
    4b1e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4b20:	23b4      	movs	r3, #180	; 0xb4
    4b22:	18fb      	adds	r3, r7, r3
    4b24:	7a5b      	ldrb	r3, [r3, #9]
    4b26:	b25b      	sxtb	r3, r3
    4b28:	0018      	movs	r0, r3
    4b2a:	23b4      	movs	r3, #180	; 0xb4
    4b2c:	18fb      	adds	r3, r7, r3
    4b2e:	895b      	ldrh	r3, [r3, #10]
    4b30:	3b08      	subs	r3, #8
    4b32:	b299      	uxth	r1, r3
    4b34:	4a5a      	ldr	r2, [pc, #360]	; (4ca0 <m2m_ip_cb+0x298>)
    4b36:	0103      	lsls	r3, r0, #4
    4b38:	18d3      	adds	r3, r2, r3
    4b3a:	3308      	adds	r3, #8
    4b3c:	1c0a      	adds	r2, r1, #0
    4b3e:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    4b40:	4b58      	ldr	r3, [pc, #352]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b42:	881b      	ldrh	r3, [r3, #0]
    4b44:	b29b      	uxth	r3, r3
    4b46:	3301      	adds	r3, #1
    4b48:	b29a      	uxth	r2, r3
    4b4a:	4b56      	ldr	r3, [pc, #344]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b4c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    4b4e:	4b55      	ldr	r3, [pc, #340]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b50:	881b      	ldrh	r3, [r3, #0]
    4b52:	b29b      	uxth	r3, r3
    4b54:	2b00      	cmp	r3, #0
    4b56:	d106      	bne.n	4b66 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    4b58:	4b52      	ldr	r3, [pc, #328]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b5a:	881b      	ldrh	r3, [r3, #0]
    4b5c:	b29b      	uxth	r3, r3
    4b5e:	3301      	adds	r3, #1
    4b60:	b29a      	uxth	r2, r3
    4b62:	4b50      	ldr	r3, [pc, #320]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b64:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    4b66:	23b4      	movs	r3, #180	; 0xb4
    4b68:	18fb      	adds	r3, r7, r3
    4b6a:	7a5b      	ldrb	r3, [r3, #9]
    4b6c:	b25b      	sxtb	r3, r3
    4b6e:	0018      	movs	r0, r3
    4b70:	4b4c      	ldr	r3, [pc, #304]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b72:	881b      	ldrh	r3, [r3, #0]
    4b74:	b299      	uxth	r1, r3
    4b76:	4a4a      	ldr	r2, [pc, #296]	; (4ca0 <m2m_ip_cb+0x298>)
    4b78:	0103      	lsls	r3, r0, #4
    4b7a:	18d3      	adds	r3, r2, r3
    4b7c:	3306      	adds	r3, #6
    4b7e:	1c0a      	adds	r2, r1, #0
    4b80:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    4b82:	23b4      	movs	r3, #180	; 0xb4
    4b84:	18fb      	adds	r3, r7, r3
    4b86:	2209      	movs	r2, #9
    4b88:	569a      	ldrsb	r2, [r3, r2]
    4b8a:	23a0      	movs	r3, #160	; 0xa0
    4b8c:	18fb      	adds	r3, r7, r3
    4b8e:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    4b90:	23a0      	movs	r3, #160	; 0xa0
    4b92:	18fb      	adds	r3, r7, r3
    4b94:	2202      	movs	r2, #2
    4b96:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    4b98:	23b4      	movs	r3, #180	; 0xb4
    4b9a:	18fb      	adds	r3, r7, r3
    4b9c:	885a      	ldrh	r2, [r3, #2]
    4b9e:	23a0      	movs	r3, #160	; 0xa0
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    4ba4:	23b4      	movs	r3, #180	; 0xb4
    4ba6:	18fb      	adds	r3, r7, r3
    4ba8:	685a      	ldr	r2, [r3, #4]
    4baa:	23a0      	movs	r3, #160	; 0xa0
    4bac:	18fb      	adds	r3, r7, r3
    4bae:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    4bb0:	4b3a      	ldr	r3, [pc, #232]	; (4c9c <m2m_ip_cb+0x294>)
    4bb2:	681b      	ldr	r3, [r3, #0]
    4bb4:	2b00      	cmp	r3, #0
    4bb6:	d100      	bne.n	4bba <m2m_ip_cb+0x1b2>
    4bb8:	e1bf      	b.n	4f3a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4bba:	4b38      	ldr	r3, [pc, #224]	; (4c9c <m2m_ip_cb+0x294>)
    4bbc:	681b      	ldr	r3, [r3, #0]
    4bbe:	22b4      	movs	r2, #180	; 0xb4
    4bc0:	18ba      	adds	r2, r7, r2
    4bc2:	2008      	movs	r0, #8
    4bc4:	5610      	ldrsb	r0, [r2, r0]
    4bc6:	22a0      	movs	r2, #160	; 0xa0
    4bc8:	18ba      	adds	r2, r7, r2
    4bca:	2104      	movs	r1, #4
    4bcc:	4798      	blx	r3
}
    4bce:	e1b4      	b.n	4f3a <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    4bd0:	1dfb      	adds	r3, r7, #7
    4bd2:	781b      	ldrb	r3, [r3, #0]
    4bd4:	2b44      	cmp	r3, #68	; 0x44
    4bd6:	d003      	beq.n	4be0 <m2m_ip_cb+0x1d8>
    4bd8:	1dfb      	adds	r3, r7, #7
    4bda:	781b      	ldrb	r3, [r3, #0]
    4bdc:	2b4b      	cmp	r3, #75	; 0x4b
    4bde:	d13d      	bne.n	4c5c <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    4be0:	239c      	movs	r3, #156	; 0x9c
    4be2:	18f9      	adds	r1, r7, r3
    4be4:	6838      	ldr	r0, [r7, #0]
    4be6:	2300      	movs	r3, #0
    4be8:	2204      	movs	r2, #4
    4bea:	4c2b      	ldr	r4, [pc, #172]	; (4c98 <m2m_ip_cb+0x290>)
    4bec:	47a0      	blx	r4
    4bee:	1e03      	subs	r3, r0, #0
    4bf0:	d000      	beq.n	4bf4 <m2m_ip_cb+0x1ec>
    4bf2:	e19d      	b.n	4f30 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    4bf4:	239c      	movs	r3, #156	; 0x9c
    4bf6:	18fb      	adds	r3, r7, r3
    4bf8:	2200      	movs	r2, #0
    4bfa:	569a      	ldrsb	r2, [r3, r2]
    4bfc:	2398      	movs	r3, #152	; 0x98
    4bfe:	18fb      	adds	r3, r7, r3
    4c00:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    4c02:	239c      	movs	r3, #156	; 0x9c
    4c04:	18fb      	adds	r3, r7, r3
    4c06:	2201      	movs	r2, #1
    4c08:	569a      	ldrsb	r2, [r3, r2]
    4c0a:	2398      	movs	r3, #152	; 0x98
    4c0c:	18fb      	adds	r3, r7, r3
    4c0e:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4c10:	239c      	movs	r3, #156	; 0x9c
    4c12:	18fb      	adds	r3, r7, r3
    4c14:	785b      	ldrb	r3, [r3, #1]
    4c16:	b25b      	sxtb	r3, r3
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d10f      	bne.n	4c3c <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4c1c:	239c      	movs	r3, #156	; 0x9c
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	b25b      	sxtb	r3, r3
    4c24:	0018      	movs	r0, r3
    4c26:	239c      	movs	r3, #156	; 0x9c
    4c28:	18fb      	adds	r3, r7, r3
    4c2a:	885b      	ldrh	r3, [r3, #2]
    4c2c:	3b08      	subs	r3, #8
    4c2e:	b299      	uxth	r1, r3
    4c30:	4a1b      	ldr	r2, [pc, #108]	; (4ca0 <m2m_ip_cb+0x298>)
    4c32:	0103      	lsls	r3, r0, #4
    4c34:	18d3      	adds	r3, r2, r3
    4c36:	3308      	adds	r3, #8
    4c38:	1c0a      	adds	r2, r1, #0
    4c3a:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    4c3c:	4b17      	ldr	r3, [pc, #92]	; (4c9c <m2m_ip_cb+0x294>)
    4c3e:	681b      	ldr	r3, [r3, #0]
    4c40:	2b00      	cmp	r3, #0
    4c42:	d100      	bne.n	4c46 <m2m_ip_cb+0x23e>
    4c44:	e174      	b.n	4f30 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    4c46:	4b15      	ldr	r3, [pc, #84]	; (4c9c <m2m_ip_cb+0x294>)
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	229c      	movs	r2, #156	; 0x9c
    4c4c:	18ba      	adds	r2, r7, r2
    4c4e:	2000      	movs	r0, #0
    4c50:	5610      	ldrsb	r0, [r2, r0]
    4c52:	2298      	movs	r2, #152	; 0x98
    4c54:	18ba      	adds	r2, r7, r2
    4c56:	2105      	movs	r1, #5
    4c58:	4798      	blx	r3
	{
    4c5a:	e169      	b.n	4f30 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    4c5c:	1dfb      	adds	r3, r7, #7
    4c5e:	781b      	ldrb	r3, [r3, #0]
    4c60:	2b4a      	cmp	r3, #74	; 0x4a
    4c62:	d123      	bne.n	4cac <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    4c64:	230c      	movs	r3, #12
    4c66:	18f9      	adds	r1, r7, r3
    4c68:	6838      	ldr	r0, [r7, #0]
    4c6a:	2300      	movs	r3, #0
    4c6c:	2244      	movs	r2, #68	; 0x44
    4c6e:	4c0a      	ldr	r4, [pc, #40]	; (4c98 <m2m_ip_cb+0x290>)
    4c70:	47a0      	blx	r4
    4c72:	1e03      	subs	r3, r0, #0
    4c74:	d000      	beq.n	4c78 <m2m_ip_cb+0x270>
    4c76:	e160      	b.n	4f3a <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    4c78:	4b0b      	ldr	r3, [pc, #44]	; (4ca8 <m2m_ip_cb+0x2a0>)
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d100      	bne.n	4c82 <m2m_ip_cb+0x27a>
    4c80:	e15b      	b.n	4f3a <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    4c82:	4b09      	ldr	r3, [pc, #36]	; (4ca8 <m2m_ip_cb+0x2a0>)
    4c84:	681a      	ldr	r2, [r3, #0]
    4c86:	230c      	movs	r3, #12
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4c8c:	230c      	movs	r3, #12
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	0018      	movs	r0, r3
    4c92:	4790      	blx	r2
}
    4c94:	e151      	b.n	4f3a <m2m_ip_cb+0x532>
    4c96:	46c0      	nop			; (mov r8, r8)
    4c98:	00001775 	.word	0x00001775
    4c9c:	20000588 	.word	0x20000588
    4ca0:	200004d8 	.word	0x200004d8
    4ca4:	2000027e 	.word	0x2000027e
    4ca8:	20000590 	.word	0x20000590
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    4cac:	1dfb      	adds	r3, r7, #7
    4cae:	781b      	ldrb	r3, [r3, #0]
    4cb0:	2b46      	cmp	r3, #70	; 0x46
    4cb2:	d008      	beq.n	4cc6 <m2m_ip_cb+0x2be>
    4cb4:	1dfb      	adds	r3, r7, #7
    4cb6:	781b      	ldrb	r3, [r3, #0]
    4cb8:	2b48      	cmp	r3, #72	; 0x48
    4cba:	d004      	beq.n	4cc6 <m2m_ip_cb+0x2be>
    4cbc:	1dfb      	adds	r3, r7, #7
    4cbe:	781b      	ldrb	r3, [r3, #0]
    4cc0:	2b4d      	cmp	r3, #77	; 0x4d
    4cc2:	d000      	beq.n	4cc6 <m2m_ip_cb+0x2be>
    4cc4:	e0b4      	b.n	4e30 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    4cc6:	23df      	movs	r3, #223	; 0xdf
    4cc8:	18fb      	adds	r3, r7, r3
    4cca:	2206      	movs	r2, #6
    4ccc:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    4cce:	1dfb      	adds	r3, r7, #7
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	2b48      	cmp	r3, #72	; 0x48
    4cd4:	d103      	bne.n	4cde <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    4cd6:	23df      	movs	r3, #223	; 0xdf
    4cd8:	18fb      	adds	r3, r7, r3
    4cda:	2209      	movs	r2, #9
    4cdc:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    4cde:	23d8      	movs	r3, #216	; 0xd8
    4ce0:	18fb      	adds	r3, r7, r3
    4ce2:	2210      	movs	r2, #16
    4ce4:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    4ce6:	23d8      	movs	r3, #216	; 0xd8
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	881a      	ldrh	r2, [r3, #0]
    4cec:	2388      	movs	r3, #136	; 0x88
    4cee:	18f9      	adds	r1, r7, r3
    4cf0:	6838      	ldr	r0, [r7, #0]
    4cf2:	2300      	movs	r3, #0
    4cf4:	4c93      	ldr	r4, [pc, #588]	; (4f44 <m2m_ip_cb+0x53c>)
    4cf6:	47a0      	blx	r4
    4cf8:	1e03      	subs	r3, r0, #0
    4cfa:	d000      	beq.n	4cfe <m2m_ip_cb+0x2f6>
    4cfc:	e11a      	b.n	4f34 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    4cfe:	23d6      	movs	r3, #214	; 0xd6
    4d00:	18fb      	adds	r3, r7, r3
    4d02:	2200      	movs	r2, #0
    4d04:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    4d06:	23d5      	movs	r3, #213	; 0xd5
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	2288      	movs	r2, #136	; 0x88
    4d0c:	18ba      	adds	r2, r7, r2
    4d0e:	7b12      	ldrb	r2, [r2, #12]
    4d10:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    4d12:	23d6      	movs	r3, #214	; 0xd6
    4d14:	18fb      	adds	r3, r7, r3
    4d16:	2288      	movs	r2, #136	; 0x88
    4d18:	18ba      	adds	r2, r7, r2
    4d1a:	89d2      	ldrh	r2, [r2, #14]
    4d1c:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    4d1e:	23d5      	movs	r3, #213	; 0xd5
    4d20:	18fb      	adds	r3, r7, r3
    4d22:	781b      	ldrb	r3, [r3, #0]
    4d24:	b25b      	sxtb	r3, r3
    4d26:	4a88      	ldr	r2, [pc, #544]	; (4f48 <m2m_ip_cb+0x540>)
    4d28:	011b      	lsls	r3, r3, #4
    4d2a:	18d3      	adds	r3, r2, r3
    4d2c:	330c      	adds	r3, #12
    4d2e:	2200      	movs	r2, #0
    4d30:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    4d32:	23d2      	movs	r3, #210	; 0xd2
    4d34:	18fb      	adds	r3, r7, r3
    4d36:	2288      	movs	r2, #136	; 0x88
    4d38:	18ba      	adds	r2, r7, r2
    4d3a:	8912      	ldrh	r2, [r2, #8]
    4d3c:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    4d3e:	23d0      	movs	r3, #208	; 0xd0
    4d40:	18fb      	adds	r3, r7, r3
    4d42:	2288      	movs	r2, #136	; 0x88
    4d44:	18ba      	adds	r2, r7, r2
    4d46:	8952      	ldrh	r2, [r2, #10]
    4d48:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    4d4a:	2388      	movs	r3, #136	; 0x88
    4d4c:	18fb      	adds	r3, r7, r3
    4d4e:	885a      	ldrh	r2, [r3, #2]
    4d50:	2370      	movs	r3, #112	; 0x70
    4d52:	18fb      	adds	r3, r7, r3
    4d54:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    4d56:	2388      	movs	r3, #136	; 0x88
    4d58:	18fb      	adds	r3, r7, r3
    4d5a:	685a      	ldr	r2, [r3, #4]
    4d5c:	2370      	movs	r3, #112	; 0x70
    4d5e:	18fb      	adds	r3, r7, r3
    4d60:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4d62:	23d5      	movs	r3, #213	; 0xd5
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	781b      	ldrb	r3, [r3, #0]
    4d68:	b25b      	sxtb	r3, r3
    4d6a:	4a77      	ldr	r2, [pc, #476]	; (4f48 <m2m_ip_cb+0x540>)
    4d6c:	011b      	lsls	r3, r3, #4
    4d6e:	18d3      	adds	r3, r2, r3
    4d70:	3306      	adds	r3, #6
    4d72:	881b      	ldrh	r3, [r3, #0]
    4d74:	b29b      	uxth	r3, r3
    4d76:	22d6      	movs	r2, #214	; 0xd6
    4d78:	18ba      	adds	r2, r7, r2
    4d7a:	8812      	ldrh	r2, [r2, #0]
    4d7c:	429a      	cmp	r2, r3
    4d7e:	d148      	bne.n	4e12 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    4d80:	23d2      	movs	r3, #210	; 0xd2
    4d82:	18fb      	adds	r3, r7, r3
    4d84:	2200      	movs	r2, #0
    4d86:	5e9b      	ldrsh	r3, [r3, r2]
    4d88:	2b00      	cmp	r3, #0
    4d8a:	dd25      	ble.n	4dd8 <m2m_ip_cb+0x3d0>
    4d8c:	23d2      	movs	r3, #210	; 0xd2
    4d8e:	18fb      	adds	r3, r7, r3
    4d90:	2200      	movs	r2, #0
    4d92:	5e9a      	ldrsh	r2, [r3, r2]
    4d94:	1d3b      	adds	r3, r7, #4
    4d96:	881b      	ldrh	r3, [r3, #0]
    4d98:	429a      	cmp	r2, r3
    4d9a:	da1d      	bge.n	4dd8 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    4d9c:	23d0      	movs	r3, #208	; 0xd0
    4d9e:	18fb      	adds	r3, r7, r3
    4da0:	881b      	ldrh	r3, [r3, #0]
    4da2:	683a      	ldr	r2, [r7, #0]
    4da4:	18d3      	adds	r3, r2, r3
    4da6:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    4da8:	23d8      	movs	r3, #216	; 0xd8
    4daa:	18fb      	adds	r3, r7, r3
    4dac:	22d2      	movs	r2, #210	; 0xd2
    4dae:	18ba      	adds	r2, r7, r2
    4db0:	8812      	ldrh	r2, [r2, #0]
    4db2:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    4db4:	683c      	ldr	r4, [r7, #0]
    4db6:	23df      	movs	r3, #223	; 0xdf
    4db8:	18fb      	adds	r3, r7, r3
    4dba:	781a      	ldrb	r2, [r3, #0]
    4dbc:	2370      	movs	r3, #112	; 0x70
    4dbe:	18f9      	adds	r1, r7, r3
    4dc0:	23d5      	movs	r3, #213	; 0xd5
    4dc2:	18fb      	adds	r3, r7, r3
    4dc4:	2000      	movs	r0, #0
    4dc6:	5618      	ldrsb	r0, [r3, r0]
    4dc8:	23d8      	movs	r3, #216	; 0xd8
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	881b      	ldrh	r3, [r3, #0]
    4dce:	9300      	str	r3, [sp, #0]
    4dd0:	0023      	movs	r3, r4
    4dd2:	4c5e      	ldr	r4, [pc, #376]	; (4f4c <m2m_ip_cb+0x544>)
    4dd4:	47a0      	blx	r4
	{
    4dd6:	e0ad      	b.n	4f34 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    4dd8:	2370      	movs	r3, #112	; 0x70
    4dda:	18fb      	adds	r3, r7, r3
    4ddc:	22d2      	movs	r2, #210	; 0xd2
    4dde:	18ba      	adds	r2, r7, r2
    4de0:	8812      	ldrh	r2, [r2, #0]
    4de2:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    4de4:	2370      	movs	r3, #112	; 0x70
    4de6:	18fb      	adds	r3, r7, r3
    4de8:	2200      	movs	r2, #0
    4dea:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    4dec:	4b58      	ldr	r3, [pc, #352]	; (4f50 <m2m_ip_cb+0x548>)
    4dee:	681b      	ldr	r3, [r3, #0]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d100      	bne.n	4df6 <m2m_ip_cb+0x3ee>
    4df4:	e09e      	b.n	4f34 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    4df6:	4b56      	ldr	r3, [pc, #344]	; (4f50 <m2m_ip_cb+0x548>)
    4df8:	681b      	ldr	r3, [r3, #0]
    4dfa:	2270      	movs	r2, #112	; 0x70
    4dfc:	18bc      	adds	r4, r7, r2
    4dfe:	22df      	movs	r2, #223	; 0xdf
    4e00:	18ba      	adds	r2, r7, r2
    4e02:	7811      	ldrb	r1, [r2, #0]
    4e04:	22d5      	movs	r2, #213	; 0xd5
    4e06:	18ba      	adds	r2, r7, r2
    4e08:	2000      	movs	r0, #0
    4e0a:	5610      	ldrsb	r0, [r2, r0]
    4e0c:	0022      	movs	r2, r4
    4e0e:	4798      	blx	r3
	{
    4e10:	e090      	b.n	4f34 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    4e12:	23d8      	movs	r3, #216	; 0xd8
    4e14:	18fa      	adds	r2, r7, r3
    4e16:	1d3b      	adds	r3, r7, #4
    4e18:	8812      	ldrh	r2, [r2, #0]
    4e1a:	881b      	ldrh	r3, [r3, #0]
    4e1c:	429a      	cmp	r2, r3
    4e1e:	d300      	bcc.n	4e22 <m2m_ip_cb+0x41a>
    4e20:	e088      	b.n	4f34 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4e22:	2301      	movs	r3, #1
    4e24:	2200      	movs	r2, #0
    4e26:	2100      	movs	r1, #0
    4e28:	2000      	movs	r0, #0
    4e2a:	4c46      	ldr	r4, [pc, #280]	; (4f44 <m2m_ip_cb+0x53c>)
    4e2c:	47a0      	blx	r4
	{
    4e2e:	e081      	b.n	4f34 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4e30:	1dfb      	adds	r3, r7, #7
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	2b45      	cmp	r3, #69	; 0x45
    4e36:	d007      	beq.n	4e48 <m2m_ip_cb+0x440>
    4e38:	1dfb      	adds	r3, r7, #7
    4e3a:	781b      	ldrb	r3, [r3, #0]
    4e3c:	2b47      	cmp	r3, #71	; 0x47
    4e3e:	d003      	beq.n	4e48 <m2m_ip_cb+0x440>
    4e40:	1dfb      	adds	r3, r7, #7
    4e42:	781b      	ldrb	r3, [r3, #0]
    4e44:	2b4c      	cmp	r3, #76	; 0x4c
    4e46:	d14c      	bne.n	4ee2 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4e48:	23de      	movs	r3, #222	; 0xde
    4e4a:	18fb      	adds	r3, r7, r3
    4e4c:	2207      	movs	r2, #7
    4e4e:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    4e50:	1dfb      	adds	r3, r7, #7
    4e52:	781b      	ldrb	r3, [r3, #0]
    4e54:	2b47      	cmp	r3, #71	; 0x47
    4e56:	d103      	bne.n	4e60 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    4e58:	23de      	movs	r3, #222	; 0xde
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	2208      	movs	r2, #8
    4e5e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    4e60:	2364      	movs	r3, #100	; 0x64
    4e62:	18f9      	adds	r1, r7, r3
    4e64:	6838      	ldr	r0, [r7, #0]
    4e66:	2300      	movs	r3, #0
    4e68:	2208      	movs	r2, #8
    4e6a:	4c36      	ldr	r4, [pc, #216]	; (4f44 <m2m_ip_cb+0x53c>)
    4e6c:	47a0      	blx	r4
    4e6e:	1e03      	subs	r3, r0, #0
    4e70:	d162      	bne.n	4f38 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    4e72:	23dc      	movs	r3, #220	; 0xdc
    4e74:	18fb      	adds	r3, r7, r3
    4e76:	2200      	movs	r2, #0
    4e78:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    4e7a:	23db      	movs	r3, #219	; 0xdb
    4e7c:	18fb      	adds	r3, r7, r3
    4e7e:	2264      	movs	r2, #100	; 0x64
    4e80:	18ba      	adds	r2, r7, r2
    4e82:	7812      	ldrb	r2, [r2, #0]
    4e84:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    4e86:	23dc      	movs	r3, #220	; 0xdc
    4e88:	18fb      	adds	r3, r7, r3
    4e8a:	2264      	movs	r2, #100	; 0x64
    4e8c:	18ba      	adds	r2, r7, r2
    4e8e:	8892      	ldrh	r2, [r2, #4]
    4e90:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    4e92:	2364      	movs	r3, #100	; 0x64
    4e94:	18fb      	adds	r3, r7, r3
    4e96:	2202      	movs	r2, #2
    4e98:	5e9a      	ldrsh	r2, [r3, r2]
    4e9a:	236e      	movs	r3, #110	; 0x6e
    4e9c:	18fb      	adds	r3, r7, r3
    4e9e:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4ea0:	23db      	movs	r3, #219	; 0xdb
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	781b      	ldrb	r3, [r3, #0]
    4ea6:	b25b      	sxtb	r3, r3
    4ea8:	4a27      	ldr	r2, [pc, #156]	; (4f48 <m2m_ip_cb+0x540>)
    4eaa:	011b      	lsls	r3, r3, #4
    4eac:	18d3      	adds	r3, r2, r3
    4eae:	3306      	adds	r3, #6
    4eb0:	881b      	ldrh	r3, [r3, #0]
    4eb2:	b29b      	uxth	r3, r3
    4eb4:	22dc      	movs	r2, #220	; 0xdc
    4eb6:	18ba      	adds	r2, r7, r2
    4eb8:	8812      	ldrh	r2, [r2, #0]
    4eba:	429a      	cmp	r2, r3
    4ebc:	d13c      	bne.n	4f38 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    4ebe:	4b24      	ldr	r3, [pc, #144]	; (4f50 <m2m_ip_cb+0x548>)
    4ec0:	681b      	ldr	r3, [r3, #0]
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d038      	beq.n	4f38 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    4ec6:	4b22      	ldr	r3, [pc, #136]	; (4f50 <m2m_ip_cb+0x548>)
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	226e      	movs	r2, #110	; 0x6e
    4ecc:	18bc      	adds	r4, r7, r2
    4ece:	22de      	movs	r2, #222	; 0xde
    4ed0:	18ba      	adds	r2, r7, r2
    4ed2:	7811      	ldrb	r1, [r2, #0]
    4ed4:	22db      	movs	r2, #219	; 0xdb
    4ed6:	18ba      	adds	r2, r7, r2
    4ed8:	2000      	movs	r0, #0
    4eda:	5610      	ldrsb	r0, [r2, r0]
    4edc:	0022      	movs	r2, r4
    4ede:	4798      	blx	r3
	{
    4ee0:	e02a      	b.n	4f38 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    4ee2:	1dfb      	adds	r3, r7, #7
    4ee4:	781b      	ldrb	r3, [r3, #0]
    4ee6:	2b52      	cmp	r3, #82	; 0x52
    4ee8:	d127      	bne.n	4f3a <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    4eea:	2350      	movs	r3, #80	; 0x50
    4eec:	18f9      	adds	r1, r7, r3
    4eee:	6838      	ldr	r0, [r7, #0]
    4ef0:	2301      	movs	r3, #1
    4ef2:	2214      	movs	r2, #20
    4ef4:	4c13      	ldr	r4, [pc, #76]	; (4f44 <m2m_ip_cb+0x53c>)
    4ef6:	47a0      	blx	r4
    4ef8:	1e03      	subs	r3, r0, #0
    4efa:	d11e      	bne.n	4f3a <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    4efc:	2350      	movs	r3, #80	; 0x50
    4efe:	18fb      	adds	r3, r7, r3
    4f00:	685b      	ldr	r3, [r3, #4]
    4f02:	001a      	movs	r2, r3
    4f04:	4b13      	ldr	r3, [pc, #76]	; (4f54 <m2m_ip_cb+0x54c>)
    4f06:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    4f08:	4b12      	ldr	r3, [pc, #72]	; (4f54 <m2m_ip_cb+0x54c>)
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d014      	beq.n	4f3a <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    4f10:	4b10      	ldr	r3, [pc, #64]	; (4f54 <m2m_ip_cb+0x54c>)
    4f12:	681c      	ldr	r4, [r3, #0]
    4f14:	2350      	movs	r3, #80	; 0x50
    4f16:	18fb      	adds	r3, r7, r3
    4f18:	6818      	ldr	r0, [r3, #0]
    4f1a:	2350      	movs	r3, #80	; 0x50
    4f1c:	18fb      	adds	r3, r7, r3
    4f1e:	6899      	ldr	r1, [r3, #8]
    4f20:	2350      	movs	r3, #80	; 0x50
    4f22:	18fb      	adds	r3, r7, r3
    4f24:	7c1b      	ldrb	r3, [r3, #16]
    4f26:	001a      	movs	r2, r3
    4f28:	47a0      	blx	r4
}
    4f2a:	e006      	b.n	4f3a <m2m_ip_cb+0x532>
	{
    4f2c:	46c0      	nop			; (mov r8, r8)
    4f2e:	e004      	b.n	4f3a <m2m_ip_cb+0x532>
	{
    4f30:	46c0      	nop			; (mov r8, r8)
    4f32:	e002      	b.n	4f3a <m2m_ip_cb+0x532>
	{
    4f34:	46c0      	nop			; (mov r8, r8)
    4f36:	e000      	b.n	4f3a <m2m_ip_cb+0x532>
	{
    4f38:	46c0      	nop			; (mov r8, r8)
}
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	46bd      	mov	sp, r7
    4f3e:	b039      	add	sp, #228	; 0xe4
    4f40:	bd90      	pop	{r4, r7, pc}
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	00001775 	.word	0x00001775
    4f48:	200004d8 	.word	0x200004d8
    4f4c:	0000480d 	.word	0x0000480d
    4f50:	20000588 	.word	0x20000588
    4f54:	2000058c 	.word	0x2000058c

00004f58 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    4f58:	b580      	push	{r7, lr}
    4f5a:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    4f5c:	4b0c      	ldr	r3, [pc, #48]	; (4f90 <socketInit+0x38>)
    4f5e:	781b      	ldrb	r3, [r3, #0]
    4f60:	b2db      	uxtb	r3, r3
    4f62:	2b00      	cmp	r3, #0
    4f64:	d110      	bne.n	4f88 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    4f66:	4b0b      	ldr	r3, [pc, #44]	; (4f94 <socketInit+0x3c>)
    4f68:	22b0      	movs	r2, #176	; 0xb0
    4f6a:	2100      	movs	r1, #0
    4f6c:	0018      	movs	r0, r3
    4f6e:	4b0a      	ldr	r3, [pc, #40]	; (4f98 <socketInit+0x40>)
    4f70:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    4f72:	4b0a      	ldr	r3, [pc, #40]	; (4f9c <socketInit+0x44>)
    4f74:	0019      	movs	r1, r3
    4f76:	2002      	movs	r0, #2
    4f78:	4b09      	ldr	r3, [pc, #36]	; (4fa0 <socketInit+0x48>)
    4f7a:	4798      	blx	r3
		gbSocketInit	= 1;
    4f7c:	4b04      	ldr	r3, [pc, #16]	; (4f90 <socketInit+0x38>)
    4f7e:	2201      	movs	r2, #1
    4f80:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    4f82:	4b08      	ldr	r3, [pc, #32]	; (4fa4 <socketInit+0x4c>)
    4f84:	2200      	movs	r2, #0
    4f86:	801a      	strh	r2, [r3, #0]
	}
}
    4f88:	46c0      	nop			; (mov r8, r8)
    4f8a:	46bd      	mov	sp, r7
    4f8c:	bd80      	pop	{r7, pc}
    4f8e:	46c0      	nop			; (mov r8, r8)
    4f90:	20000280 	.word	0x20000280
    4f94:	200004d8 	.word	0x200004d8
    4f98:	00000c21 	.word	0x00000c21
    4f9c:	00004a09 	.word	0x00004a09
    4fa0:	000018f5 	.word	0x000018f5
    4fa4:	2000027e 	.word	0x2000027e

00004fa8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    4fa8:	b580      	push	{r7, lr}
    4faa:	b082      	sub	sp, #8
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
    4fb0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    4fb2:	4b05      	ldr	r3, [pc, #20]	; (4fc8 <registerSocketCallback+0x20>)
    4fb4:	687a      	ldr	r2, [r7, #4]
    4fb6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    4fb8:	4b04      	ldr	r3, [pc, #16]	; (4fcc <registerSocketCallback+0x24>)
    4fba:	683a      	ldr	r2, [r7, #0]
    4fbc:	601a      	str	r2, [r3, #0]
}
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	46bd      	mov	sp, r7
    4fc2:	b002      	add	sp, #8
    4fc4:	bd80      	pop	{r7, pc}
    4fc6:	46c0      	nop			; (mov r8, r8)
    4fc8:	20000588 	.word	0x20000588
    4fcc:	20000590 	.word	0x20000590

00004fd0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    4fd0:	b590      	push	{r4, r7, lr}
    4fd2:	b08d      	sub	sp, #52	; 0x34
    4fd4:	af04      	add	r7, sp, #16
    4fd6:	0004      	movs	r4, r0
    4fd8:	0008      	movs	r0, r1
    4fda:	0011      	movs	r1, r2
    4fdc:	1dbb      	adds	r3, r7, #6
    4fde:	1c22      	adds	r2, r4, #0
    4fe0:	801a      	strh	r2, [r3, #0]
    4fe2:	1d7b      	adds	r3, r7, #5
    4fe4:	1c02      	adds	r2, r0, #0
    4fe6:	701a      	strb	r2, [r3, #0]
    4fe8:	1d3b      	adds	r3, r7, #4
    4fea:	1c0a      	adds	r2, r1, #0
    4fec:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    4fee:	231f      	movs	r3, #31
    4ff0:	18fb      	adds	r3, r7, r3
    4ff2:	22ff      	movs	r2, #255	; 0xff
    4ff4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    4ff6:	1dbb      	adds	r3, r7, #6
    4ff8:	881b      	ldrh	r3, [r3, #0]
    4ffa:	2b02      	cmp	r3, #2
    4ffc:	d000      	beq.n	5000 <socket+0x30>
    4ffe:	e0cd      	b.n	519c <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    5000:	1d7b      	adds	r3, r7, #5
    5002:	781b      	ldrb	r3, [r3, #0]
    5004:	2b01      	cmp	r3, #1
    5006:	d135      	bne.n	5074 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    5008:	231e      	movs	r3, #30
    500a:	18fb      	adds	r3, r7, r3
    500c:	2200      	movs	r2, #0
    500e:	701a      	strb	r2, [r3, #0]
    5010:	e02a      	b.n	5068 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    5012:	2317      	movs	r3, #23
    5014:	18fb      	adds	r3, r7, r3
    5016:	4a65      	ldr	r2, [pc, #404]	; (51ac <socket+0x1dc>)
    5018:	7812      	ldrb	r2, [r2, #0]
    501a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    501c:	4b63      	ldr	r3, [pc, #396]	; (51ac <socket+0x1dc>)
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	b2db      	uxtb	r3, r3
    5022:	011a      	lsls	r2, r3, #4
    5024:	4b62      	ldr	r3, [pc, #392]	; (51b0 <socket+0x1e0>)
    5026:	18d3      	adds	r3, r2, r3
    5028:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    502a:	4b60      	ldr	r3, [pc, #384]	; (51ac <socket+0x1dc>)
    502c:	781b      	ldrb	r3, [r3, #0]
    502e:	b2db      	uxtb	r3, r3
    5030:	1c5a      	adds	r2, r3, #1
    5032:	4b60      	ldr	r3, [pc, #384]	; (51b4 <socket+0x1e4>)
    5034:	2107      	movs	r1, #7
    5036:	0010      	movs	r0, r2
    5038:	4798      	blx	r3
    503a:	000b      	movs	r3, r1
    503c:	b2da      	uxtb	r2, r3
    503e:	4b5b      	ldr	r3, [pc, #364]	; (51ac <socket+0x1dc>)
    5040:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    5042:	69bb      	ldr	r3, [r7, #24]
    5044:	7a9b      	ldrb	r3, [r3, #10]
    5046:	b2db      	uxtb	r3, r3
    5048:	2b00      	cmp	r3, #0
    504a:	d106      	bne.n	505a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    504c:	231f      	movs	r3, #31
    504e:	18fb      	adds	r3, r7, r3
    5050:	2217      	movs	r2, #23
    5052:	18ba      	adds	r2, r7, r2
    5054:	7812      	ldrb	r2, [r2, #0]
    5056:	701a      	strb	r2, [r3, #0]
					break;
    5058:	e04c      	b.n	50f4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    505a:	231e      	movs	r3, #30
    505c:	18fb      	adds	r3, r7, r3
    505e:	781a      	ldrb	r2, [r3, #0]
    5060:	231e      	movs	r3, #30
    5062:	18fb      	adds	r3, r7, r3
    5064:	3201      	adds	r2, #1
    5066:	701a      	strb	r2, [r3, #0]
    5068:	231e      	movs	r3, #30
    506a:	18fb      	adds	r3, r7, r3
    506c:	781b      	ldrb	r3, [r3, #0]
    506e:	2b06      	cmp	r3, #6
    5070:	d9cf      	bls.n	5012 <socket+0x42>
    5072:	e03f      	b.n	50f4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    5074:	1d7b      	adds	r3, r7, #5
    5076:	781b      	ldrb	r3, [r3, #0]
    5078:	2b02      	cmp	r3, #2
    507a:	d13b      	bne.n	50f4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    507c:	4b4e      	ldr	r3, [pc, #312]	; (51b8 <socket+0x1e8>)
    507e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    5080:	231e      	movs	r3, #30
    5082:	18fb      	adds	r3, r7, r3
    5084:	2200      	movs	r2, #0
    5086:	701a      	strb	r2, [r3, #0]
    5088:	e02f      	b.n	50ea <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    508a:	2317      	movs	r3, #23
    508c:	18fb      	adds	r3, r7, r3
    508e:	4a4b      	ldr	r2, [pc, #300]	; (51bc <socket+0x1ec>)
    5090:	7812      	ldrb	r2, [r2, #0]
    5092:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    5094:	4b49      	ldr	r3, [pc, #292]	; (51bc <socket+0x1ec>)
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	b2db      	uxtb	r3, r3
    509a:	011b      	lsls	r3, r3, #4
    509c:	693a      	ldr	r2, [r7, #16]
    509e:	18d3      	adds	r3, r2, r3
    50a0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    50a2:	4b46      	ldr	r3, [pc, #280]	; (51bc <socket+0x1ec>)
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	b2db      	uxtb	r3, r3
    50a8:	3301      	adds	r3, #1
    50aa:	4a45      	ldr	r2, [pc, #276]	; (51c0 <socket+0x1f0>)
    50ac:	4013      	ands	r3, r2
    50ae:	d504      	bpl.n	50ba <socket+0xea>
    50b0:	3b01      	subs	r3, #1
    50b2:	2204      	movs	r2, #4
    50b4:	4252      	negs	r2, r2
    50b6:	4313      	orrs	r3, r2
    50b8:	3301      	adds	r3, #1
    50ba:	b2da      	uxtb	r2, r3
    50bc:	4b3f      	ldr	r3, [pc, #252]	; (51bc <socket+0x1ec>)
    50be:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    50c0:	69bb      	ldr	r3, [r7, #24]
    50c2:	7a9b      	ldrb	r3, [r3, #10]
    50c4:	b2db      	uxtb	r3, r3
    50c6:	2b00      	cmp	r3, #0
    50c8:	d108      	bne.n	50dc <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    50ca:	2317      	movs	r3, #23
    50cc:	18fb      	adds	r3, r7, r3
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	3307      	adds	r3, #7
    50d2:	b2da      	uxtb	r2, r3
    50d4:	231f      	movs	r3, #31
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	701a      	strb	r2, [r3, #0]
					break;
    50da:	e00b      	b.n	50f4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    50dc:	231e      	movs	r3, #30
    50de:	18fb      	adds	r3, r7, r3
    50e0:	781a      	ldrb	r2, [r3, #0]
    50e2:	231e      	movs	r3, #30
    50e4:	18fb      	adds	r3, r7, r3
    50e6:	3201      	adds	r2, #1
    50e8:	701a      	strb	r2, [r3, #0]
    50ea:	231e      	movs	r3, #30
    50ec:	18fb      	adds	r3, r7, r3
    50ee:	781b      	ldrb	r3, [r3, #0]
    50f0:	2b03      	cmp	r3, #3
    50f2:	d9ca      	bls.n	508a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    50f4:	231f      	movs	r3, #31
    50f6:	18fb      	adds	r3, r7, r3
    50f8:	781b      	ldrb	r3, [r3, #0]
    50fa:	2b7f      	cmp	r3, #127	; 0x7f
    50fc:	d84e      	bhi.n	519c <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    50fe:	69bb      	ldr	r3, [r7, #24]
    5100:	2210      	movs	r2, #16
    5102:	2100      	movs	r1, #0
    5104:	0018      	movs	r0, r3
    5106:	4b2f      	ldr	r3, [pc, #188]	; (51c4 <socket+0x1f4>)
    5108:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    510a:	69bb      	ldr	r3, [r7, #24]
    510c:	2201      	movs	r2, #1
    510e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    5110:	4b2d      	ldr	r3, [pc, #180]	; (51c8 <socket+0x1f8>)
    5112:	881b      	ldrh	r3, [r3, #0]
    5114:	b29b      	uxth	r3, r3
    5116:	3301      	adds	r3, #1
    5118:	b29a      	uxth	r2, r3
    511a:	4b2b      	ldr	r3, [pc, #172]	; (51c8 <socket+0x1f8>)
    511c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    511e:	4b2a      	ldr	r3, [pc, #168]	; (51c8 <socket+0x1f8>)
    5120:	881b      	ldrh	r3, [r3, #0]
    5122:	b29b      	uxth	r3, r3
    5124:	2b00      	cmp	r3, #0
    5126:	d106      	bne.n	5136 <socket+0x166>
				++gu16SessionID;
    5128:	4b27      	ldr	r3, [pc, #156]	; (51c8 <socket+0x1f8>)
    512a:	881b      	ldrh	r3, [r3, #0]
    512c:	b29b      	uxth	r3, r3
    512e:	3301      	adds	r3, #1
    5130:	b29a      	uxth	r2, r3
    5132:	4b25      	ldr	r3, [pc, #148]	; (51c8 <socket+0x1f8>)
    5134:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    5136:	4b24      	ldr	r3, [pc, #144]	; (51c8 <socket+0x1f8>)
    5138:	881b      	ldrh	r3, [r3, #0]
    513a:	b29a      	uxth	r2, r3
    513c:	69bb      	ldr	r3, [r7, #24]
    513e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    5140:	4b22      	ldr	r3, [pc, #136]	; (51cc <socket+0x1fc>)
    5142:	0018      	movs	r0, r3
    5144:	4b22      	ldr	r3, [pc, #136]	; (51d0 <socket+0x200>)
    5146:	4798      	blx	r3
    5148:	231f      	movs	r3, #31
    514a:	18fb      	adds	r3, r7, r3
    514c:	2100      	movs	r1, #0
    514e:	5659      	ldrsb	r1, [r3, r1]
    5150:	4b1d      	ldr	r3, [pc, #116]	; (51c8 <socket+0x1f8>)
    5152:	881b      	ldrh	r3, [r3, #0]
    5154:	b29b      	uxth	r3, r3
    5156:	001a      	movs	r2, r3
    5158:	4b1e      	ldr	r3, [pc, #120]	; (51d4 <socket+0x204>)
    515a:	0018      	movs	r0, r3
    515c:	4b1c      	ldr	r3, [pc, #112]	; (51d0 <socket+0x200>)
    515e:	4798      	blx	r3
    5160:	200d      	movs	r0, #13
    5162:	4b1d      	ldr	r3, [pc, #116]	; (51d8 <socket+0x208>)
    5164:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    5166:	1d3b      	adds	r3, r7, #4
    5168:	781b      	ldrb	r3, [r3, #0]
    516a:	2201      	movs	r2, #1
    516c:	4013      	ands	r3, r2
    516e:	d015      	beq.n	519c <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    5170:	230c      	movs	r3, #12
    5172:	18fb      	adds	r3, r7, r3
    5174:	221f      	movs	r2, #31
    5176:	18ba      	adds	r2, r7, r2
    5178:	7812      	ldrb	r2, [r2, #0]
    517a:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    517c:	69bb      	ldr	r3, [r7, #24]
    517e:	2221      	movs	r2, #33	; 0x21
    5180:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    5182:	230c      	movs	r3, #12
    5184:	18fa      	adds	r2, r7, r3
    5186:	2300      	movs	r3, #0
    5188:	9302      	str	r3, [sp, #8]
    518a:	2300      	movs	r3, #0
    518c:	9301      	str	r3, [sp, #4]
    518e:	2300      	movs	r3, #0
    5190:	9300      	str	r3, [sp, #0]
    5192:	2304      	movs	r3, #4
    5194:	2150      	movs	r1, #80	; 0x50
    5196:	2002      	movs	r0, #2
    5198:	4c10      	ldr	r4, [pc, #64]	; (51dc <socket+0x20c>)
    519a:	47a0      	blx	r4
			}
		}
	}
	return sock;
    519c:	231f      	movs	r3, #31
    519e:	18fb      	adds	r3, r7, r3
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	b25b      	sxtb	r3, r3
}
    51a4:	0018      	movs	r0, r3
    51a6:	46bd      	mov	sp, r7
    51a8:	b009      	add	sp, #36	; 0x24
    51aa:	bd90      	pop	{r4, r7, pc}
    51ac:	20000281 	.word	0x20000281
    51b0:	200004d8 	.word	0x200004d8
    51b4:	00011721 	.word	0x00011721
    51b8:	20000548 	.word	0x20000548
    51bc:	20000282 	.word	0x20000282
    51c0:	80000003 	.word	0x80000003
    51c4:	00000c21 	.word	0x00000c21
    51c8:	2000027e 	.word	0x2000027e
    51cc:	000149b0 	.word	0x000149b0
    51d0:	0000f0ad 	.word	0x0000f0ad
    51d4:	000149d0 	.word	0x000149d0
    51d8:	0000f0e1 	.word	0x0000f0e1
    51dc:	00000e81 	.word	0x00000e81

000051e0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    51e0:	b5b0      	push	{r4, r5, r7, lr}
    51e2:	b08a      	sub	sp, #40	; 0x28
    51e4:	af04      	add	r7, sp, #16
    51e6:	6039      	str	r1, [r7, #0]
    51e8:	0011      	movs	r1, r2
    51ea:	1dfb      	adds	r3, r7, #7
    51ec:	1c02      	adds	r2, r0, #0
    51ee:	701a      	strb	r2, [r3, #0]
    51f0:	1dbb      	adds	r3, r7, #6
    51f2:	1c0a      	adds	r2, r1, #0
    51f4:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    51f6:	2317      	movs	r3, #23
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	22fa      	movs	r2, #250	; 0xfa
    51fc:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    51fe:	1dfb      	adds	r3, r7, #7
    5200:	781b      	ldrb	r3, [r3, #0]
    5202:	2b7f      	cmp	r3, #127	; 0x7f
    5204:	d867      	bhi.n	52d6 <connect+0xf6>
    5206:	683b      	ldr	r3, [r7, #0]
    5208:	2b00      	cmp	r3, #0
    520a:	d064      	beq.n	52d6 <connect+0xf6>
    520c:	1dfb      	adds	r3, r7, #7
    520e:	781b      	ldrb	r3, [r3, #0]
    5210:	b25b      	sxtb	r3, r3
    5212:	4a35      	ldr	r2, [pc, #212]	; (52e8 <connect+0x108>)
    5214:	011b      	lsls	r3, r3, #4
    5216:	18d3      	adds	r3, r2, r3
    5218:	330a      	adds	r3, #10
    521a:	781b      	ldrb	r3, [r3, #0]
    521c:	b2db      	uxtb	r3, r3
    521e:	2b01      	cmp	r3, #1
    5220:	d159      	bne.n	52d6 <connect+0xf6>
    5222:	1dbb      	adds	r3, r7, #6
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	2b00      	cmp	r3, #0
    5228:	d055      	beq.n	52d6 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    522a:	2316      	movs	r3, #22
    522c:	18fb      	adds	r3, r7, r3
    522e:	2244      	movs	r2, #68	; 0x44
    5230:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    5232:	1dfb      	adds	r3, r7, #7
    5234:	781b      	ldrb	r3, [r3, #0]
    5236:	b25b      	sxtb	r3, r3
    5238:	4a2b      	ldr	r2, [pc, #172]	; (52e8 <connect+0x108>)
    523a:	011b      	lsls	r3, r3, #4
    523c:	18d3      	adds	r3, r2, r3
    523e:	330b      	adds	r3, #11
    5240:	781b      	ldrb	r3, [r3, #0]
    5242:	b2db      	uxtb	r3, r3
    5244:	001a      	movs	r2, r3
    5246:	2301      	movs	r3, #1
    5248:	4013      	ands	r3, r2
    524a:	d00f      	beq.n	526c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    524c:	2316      	movs	r3, #22
    524e:	18fb      	adds	r3, r7, r3
    5250:	224b      	movs	r2, #75	; 0x4b
    5252:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    5254:	1dfb      	adds	r3, r7, #7
    5256:	781b      	ldrb	r3, [r3, #0]
    5258:	b25b      	sxtb	r3, r3
    525a:	4a23      	ldr	r2, [pc, #140]	; (52e8 <connect+0x108>)
    525c:	011b      	lsls	r3, r3, #4
    525e:	18d3      	adds	r3, r2, r3
    5260:	330b      	adds	r3, #11
    5262:	781b      	ldrb	r3, [r3, #0]
    5264:	b2da      	uxtb	r2, r3
    5266:	2308      	movs	r3, #8
    5268:	18fb      	adds	r3, r7, r3
    526a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    526c:	2308      	movs	r3, #8
    526e:	18fb      	adds	r3, r7, r3
    5270:	1dfa      	adds	r2, r7, #7
    5272:	7812      	ldrb	r2, [r2, #0]
    5274:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    5276:	6839      	ldr	r1, [r7, #0]
    5278:	2308      	movs	r3, #8
    527a:	18fb      	adds	r3, r7, r3
    527c:	2208      	movs	r2, #8
    527e:	0018      	movs	r0, r3
    5280:	4b1a      	ldr	r3, [pc, #104]	; (52ec <connect+0x10c>)
    5282:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    5284:	1dfb      	adds	r3, r7, #7
    5286:	781b      	ldrb	r3, [r3, #0]
    5288:	b25b      	sxtb	r3, r3
    528a:	4a17      	ldr	r2, [pc, #92]	; (52e8 <connect+0x108>)
    528c:	011b      	lsls	r3, r3, #4
    528e:	18d3      	adds	r3, r2, r3
    5290:	3306      	adds	r3, #6
    5292:	881b      	ldrh	r3, [r3, #0]
    5294:	b29a      	uxth	r2, r3
    5296:	2308      	movs	r3, #8
    5298:	18fb      	adds	r3, r7, r3
    529a:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    529c:	2317      	movs	r3, #23
    529e:	18fc      	adds	r4, r7, r3
    52a0:	2308      	movs	r3, #8
    52a2:	18fa      	adds	r2, r7, r3
    52a4:	2316      	movs	r3, #22
    52a6:	18fb      	adds	r3, r7, r3
    52a8:	7819      	ldrb	r1, [r3, #0]
    52aa:	2300      	movs	r3, #0
    52ac:	9302      	str	r3, [sp, #8]
    52ae:	2300      	movs	r3, #0
    52b0:	9301      	str	r3, [sp, #4]
    52b2:	2300      	movs	r3, #0
    52b4:	9300      	str	r3, [sp, #0]
    52b6:	230c      	movs	r3, #12
    52b8:	2002      	movs	r0, #2
    52ba:	4d0d      	ldr	r5, [pc, #52]	; (52f0 <connect+0x110>)
    52bc:	47a8      	blx	r5
    52be:	0003      	movs	r3, r0
    52c0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    52c2:	2317      	movs	r3, #23
    52c4:	18fb      	adds	r3, r7, r3
    52c6:	781b      	ldrb	r3, [r3, #0]
    52c8:	b25b      	sxtb	r3, r3
    52ca:	2b00      	cmp	r3, #0
    52cc:	d003      	beq.n	52d6 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    52ce:	2317      	movs	r3, #23
    52d0:	18fb      	adds	r3, r7, r3
    52d2:	22f7      	movs	r2, #247	; 0xf7
    52d4:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    52d6:	2317      	movs	r3, #23
    52d8:	18fb      	adds	r3, r7, r3
    52da:	781b      	ldrb	r3, [r3, #0]
    52dc:	b25b      	sxtb	r3, r3
}
    52de:	0018      	movs	r0, r3
    52e0:	46bd      	mov	sp, r7
    52e2:	b006      	add	sp, #24
    52e4:	bdb0      	pop	{r4, r5, r7, pc}
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	200004d8 	.word	0x200004d8
    52ec:	00000be5 	.word	0x00000be5
    52f0:	00000e81 	.word	0x00000e81

000052f4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    52f4:	b590      	push	{r4, r7, lr}
    52f6:	b08f      	sub	sp, #60	; 0x3c
    52f8:	af04      	add	r7, sp, #16
    52fa:	0004      	movs	r4, r0
    52fc:	60b9      	str	r1, [r7, #8]
    52fe:	0010      	movs	r0, r2
    5300:	0019      	movs	r1, r3
    5302:	230f      	movs	r3, #15
    5304:	18fb      	adds	r3, r7, r3
    5306:	1c22      	adds	r2, r4, #0
    5308:	701a      	strb	r2, [r3, #0]
    530a:	230c      	movs	r3, #12
    530c:	18fb      	adds	r3, r7, r3
    530e:	1c02      	adds	r2, r0, #0
    5310:	801a      	strh	r2, [r3, #0]
    5312:	1dbb      	adds	r3, r7, #6
    5314:	1c0a      	adds	r2, r1, #0
    5316:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5318:	2326      	movs	r3, #38	; 0x26
    531a:	18fb      	adds	r3, r7, r3
    531c:	2206      	movs	r2, #6
    531e:	4252      	negs	r2, r2
    5320:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    5322:	230f      	movs	r3, #15
    5324:	18fb      	adds	r3, r7, r3
    5326:	781b      	ldrb	r3, [r3, #0]
    5328:	2b7f      	cmp	r3, #127	; 0x7f
    532a:	d900      	bls.n	532e <send+0x3a>
    532c:	e087      	b.n	543e <send+0x14a>
    532e:	68bb      	ldr	r3, [r7, #8]
    5330:	2b00      	cmp	r3, #0
    5332:	d100      	bne.n	5336 <send+0x42>
    5334:	e083      	b.n	543e <send+0x14a>
    5336:	230c      	movs	r3, #12
    5338:	18fb      	adds	r3, r7, r3
    533a:	881a      	ldrh	r2, [r3, #0]
    533c:	23af      	movs	r3, #175	; 0xaf
    533e:	00db      	lsls	r3, r3, #3
    5340:	429a      	cmp	r2, r3
    5342:	d900      	bls.n	5346 <send+0x52>
    5344:	e07b      	b.n	543e <send+0x14a>
    5346:	230f      	movs	r3, #15
    5348:	18fb      	adds	r3, r7, r3
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	b25b      	sxtb	r3, r3
    534e:	4a40      	ldr	r2, [pc, #256]	; (5450 <send+0x15c>)
    5350:	011b      	lsls	r3, r3, #4
    5352:	18d3      	adds	r3, r2, r3
    5354:	330a      	adds	r3, #10
    5356:	781b      	ldrb	r3, [r3, #0]
    5358:	b2db      	uxtb	r3, r3
    535a:	2b01      	cmp	r3, #1
    535c:	d16f      	bne.n	543e <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    535e:	2323      	movs	r3, #35	; 0x23
    5360:	18fb      	adds	r3, r7, r3
    5362:	2245      	movs	r2, #69	; 0x45
    5364:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    5366:	2324      	movs	r3, #36	; 0x24
    5368:	18fb      	adds	r3, r7, r3
    536a:	2250      	movs	r2, #80	; 0x50
    536c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    536e:	2310      	movs	r3, #16
    5370:	18fb      	adds	r3, r7, r3
    5372:	220f      	movs	r2, #15
    5374:	18ba      	adds	r2, r7, r2
    5376:	7812      	ldrb	r2, [r2, #0]
    5378:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    537a:	2310      	movs	r3, #16
    537c:	18fb      	adds	r3, r7, r3
    537e:	220c      	movs	r2, #12
    5380:	18ba      	adds	r2, r7, r2
    5382:	8812      	ldrh	r2, [r2, #0]
    5384:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    5386:	230f      	movs	r3, #15
    5388:	18fb      	adds	r3, r7, r3
    538a:	781b      	ldrb	r3, [r3, #0]
    538c:	b25b      	sxtb	r3, r3
    538e:	4a30      	ldr	r2, [pc, #192]	; (5450 <send+0x15c>)
    5390:	011b      	lsls	r3, r3, #4
    5392:	18d3      	adds	r3, r2, r3
    5394:	3306      	adds	r3, #6
    5396:	881b      	ldrh	r3, [r3, #0]
    5398:	b29a      	uxth	r2, r3
    539a:	2310      	movs	r3, #16
    539c:	18fb      	adds	r3, r7, r3
    539e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    53a0:	230f      	movs	r3, #15
    53a2:	18fb      	adds	r3, r7, r3
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	b25b      	sxtb	r3, r3
    53a8:	2b06      	cmp	r3, #6
    53aa:	dd03      	ble.n	53b4 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    53ac:	2324      	movs	r3, #36	; 0x24
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	2244      	movs	r2, #68	; 0x44
    53b2:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    53b4:	230f      	movs	r3, #15
    53b6:	18fb      	adds	r3, r7, r3
    53b8:	781b      	ldrb	r3, [r3, #0]
    53ba:	b25b      	sxtb	r3, r3
    53bc:	4a24      	ldr	r2, [pc, #144]	; (5450 <send+0x15c>)
    53be:	011b      	lsls	r3, r3, #4
    53c0:	18d3      	adds	r3, r2, r3
    53c2:	330b      	adds	r3, #11
    53c4:	781b      	ldrb	r3, [r3, #0]
    53c6:	b2db      	uxtb	r3, r3
    53c8:	001a      	movs	r2, r3
    53ca:	2301      	movs	r3, #1
    53cc:	4013      	ands	r3, r2
    53ce:	d00f      	beq.n	53f0 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    53d0:	2323      	movs	r3, #35	; 0x23
    53d2:	18fb      	adds	r3, r7, r3
    53d4:	224c      	movs	r2, #76	; 0x4c
    53d6:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    53d8:	230f      	movs	r3, #15
    53da:	18fb      	adds	r3, r7, r3
    53dc:	2200      	movs	r2, #0
    53de:	569a      	ldrsb	r2, [r3, r2]
    53e0:	2324      	movs	r3, #36	; 0x24
    53e2:	18fb      	adds	r3, r7, r3
    53e4:	491a      	ldr	r1, [pc, #104]	; (5450 <send+0x15c>)
    53e6:	0112      	lsls	r2, r2, #4
    53e8:	188a      	adds	r2, r1, r2
    53ea:	3208      	adds	r2, #8
    53ec:	8812      	ldrh	r2, [r2, #0]
    53ee:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    53f0:	2323      	movs	r3, #35	; 0x23
    53f2:	18fb      	adds	r3, r7, r3
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	2280      	movs	r2, #128	; 0x80
    53f8:	4252      	negs	r2, r2
    53fa:	4313      	orrs	r3, r2
    53fc:	b2d9      	uxtb	r1, r3
    53fe:	2310      	movs	r3, #16
    5400:	18fa      	adds	r2, r7, r3
    5402:	2324      	movs	r3, #36	; 0x24
    5404:	18fb      	adds	r3, r7, r3
    5406:	881b      	ldrh	r3, [r3, #0]
    5408:	9302      	str	r3, [sp, #8]
    540a:	230c      	movs	r3, #12
    540c:	18fb      	adds	r3, r7, r3
    540e:	881b      	ldrh	r3, [r3, #0]
    5410:	9301      	str	r3, [sp, #4]
    5412:	68bb      	ldr	r3, [r7, #8]
    5414:	9300      	str	r3, [sp, #0]
    5416:	2310      	movs	r3, #16
    5418:	2002      	movs	r0, #2
    541a:	4c0e      	ldr	r4, [pc, #56]	; (5454 <send+0x160>)
    541c:	47a0      	blx	r4
    541e:	0003      	movs	r3, r0
    5420:	001a      	movs	r2, r3
    5422:	2326      	movs	r3, #38	; 0x26
    5424:	18fb      	adds	r3, r7, r3
    5426:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    5428:	2326      	movs	r3, #38	; 0x26
    542a:	18fb      	adds	r3, r7, r3
    542c:	2200      	movs	r2, #0
    542e:	5e9b      	ldrsh	r3, [r3, r2]
    5430:	2b00      	cmp	r3, #0
    5432:	d004      	beq.n	543e <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    5434:	2326      	movs	r3, #38	; 0x26
    5436:	18fb      	adds	r3, r7, r3
    5438:	220e      	movs	r2, #14
    543a:	4252      	negs	r2, r2
    543c:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    543e:	2326      	movs	r3, #38	; 0x26
    5440:	18fb      	adds	r3, r7, r3
    5442:	2200      	movs	r2, #0
    5444:	5e9b      	ldrsh	r3, [r3, r2]
}
    5446:	0018      	movs	r0, r3
    5448:	46bd      	mov	sp, r7
    544a:	b00b      	add	sp, #44	; 0x2c
    544c:	bd90      	pop	{r4, r7, pc}
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	200004d8 	.word	0x200004d8
    5454:	00000e81 	.word	0x00000e81

00005458 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    5458:	b590      	push	{r4, r7, lr}
    545a:	b08d      	sub	sp, #52	; 0x34
    545c:	af04      	add	r7, sp, #16
    545e:	60b9      	str	r1, [r7, #8]
    5460:	0011      	movs	r1, r2
    5462:	607b      	str	r3, [r7, #4]
    5464:	230f      	movs	r3, #15
    5466:	18fb      	adds	r3, r7, r3
    5468:	1c02      	adds	r2, r0, #0
    546a:	701a      	strb	r2, [r3, #0]
    546c:	230c      	movs	r3, #12
    546e:	18fb      	adds	r3, r7, r3
    5470:	1c0a      	adds	r2, r1, #0
    5472:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5474:	231e      	movs	r3, #30
    5476:	18fb      	adds	r3, r7, r3
    5478:	2206      	movs	r2, #6
    547a:	4252      	negs	r2, r2
    547c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    547e:	230f      	movs	r3, #15
    5480:	18fb      	adds	r3, r7, r3
    5482:	781b      	ldrb	r3, [r3, #0]
    5484:	2b7f      	cmp	r3, #127	; 0x7f
    5486:	d900      	bls.n	548a <recv+0x32>
    5488:	e099      	b.n	55be <recv+0x166>
    548a:	68bb      	ldr	r3, [r7, #8]
    548c:	2b00      	cmp	r3, #0
    548e:	d100      	bne.n	5492 <recv+0x3a>
    5490:	e095      	b.n	55be <recv+0x166>
    5492:	230c      	movs	r3, #12
    5494:	18fb      	adds	r3, r7, r3
    5496:	881b      	ldrh	r3, [r3, #0]
    5498:	2b00      	cmp	r3, #0
    549a:	d100      	bne.n	549e <recv+0x46>
    549c:	e08f      	b.n	55be <recv+0x166>
    549e:	230f      	movs	r3, #15
    54a0:	18fb      	adds	r3, r7, r3
    54a2:	781b      	ldrb	r3, [r3, #0]
    54a4:	b25b      	sxtb	r3, r3
    54a6:	4a4a      	ldr	r2, [pc, #296]	; (55d0 <recv+0x178>)
    54a8:	011b      	lsls	r3, r3, #4
    54aa:	18d3      	adds	r3, r2, r3
    54ac:	330a      	adds	r3, #10
    54ae:	781b      	ldrb	r3, [r3, #0]
    54b0:	b2db      	uxtb	r3, r3
    54b2:	2b01      	cmp	r3, #1
    54b4:	d000      	beq.n	54b8 <recv+0x60>
    54b6:	e082      	b.n	55be <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    54b8:	231e      	movs	r3, #30
    54ba:	18fb      	adds	r3, r7, r3
    54bc:	2200      	movs	r2, #0
    54be:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    54c0:	230f      	movs	r3, #15
    54c2:	18fb      	adds	r3, r7, r3
    54c4:	2200      	movs	r2, #0
    54c6:	569a      	ldrsb	r2, [r3, r2]
    54c8:	4b41      	ldr	r3, [pc, #260]	; (55d0 <recv+0x178>)
    54ca:	0112      	lsls	r2, r2, #4
    54cc:	68b9      	ldr	r1, [r7, #8]
    54ce:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    54d0:	230f      	movs	r3, #15
    54d2:	18fb      	adds	r3, r7, r3
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	b25b      	sxtb	r3, r3
    54d8:	4a3d      	ldr	r2, [pc, #244]	; (55d0 <recv+0x178>)
    54da:	011b      	lsls	r3, r3, #4
    54dc:	18d3      	adds	r3, r2, r3
    54de:	3304      	adds	r3, #4
    54e0:	220c      	movs	r2, #12
    54e2:	18ba      	adds	r2, r7, r2
    54e4:	8812      	ldrh	r2, [r2, #0]
    54e6:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    54e8:	230f      	movs	r3, #15
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	781b      	ldrb	r3, [r3, #0]
    54ee:	b25b      	sxtb	r3, r3
    54f0:	4a37      	ldr	r2, [pc, #220]	; (55d0 <recv+0x178>)
    54f2:	011b      	lsls	r3, r3, #4
    54f4:	18d3      	adds	r3, r2, r3
    54f6:	330c      	adds	r3, #12
    54f8:	781b      	ldrb	r3, [r3, #0]
    54fa:	b2db      	uxtb	r3, r3
    54fc:	2b00      	cmp	r3, #0
    54fe:	d15e      	bne.n	55be <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    5500:	231d      	movs	r3, #29
    5502:	18fb      	adds	r3, r7, r3
    5504:	2246      	movs	r2, #70	; 0x46
    5506:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    5508:	230f      	movs	r3, #15
    550a:	18fb      	adds	r3, r7, r3
    550c:	781b      	ldrb	r3, [r3, #0]
    550e:	b25b      	sxtb	r3, r3
    5510:	4a2f      	ldr	r2, [pc, #188]	; (55d0 <recv+0x178>)
    5512:	011b      	lsls	r3, r3, #4
    5514:	18d3      	adds	r3, r2, r3
    5516:	330c      	adds	r3, #12
    5518:	2201      	movs	r2, #1
    551a:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    551c:	230f      	movs	r3, #15
    551e:	18fb      	adds	r3, r7, r3
    5520:	781b      	ldrb	r3, [r3, #0]
    5522:	b25b      	sxtb	r3, r3
    5524:	4a2a      	ldr	r2, [pc, #168]	; (55d0 <recv+0x178>)
    5526:	011b      	lsls	r3, r3, #4
    5528:	18d3      	adds	r3, r2, r3
    552a:	330b      	adds	r3, #11
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	b2db      	uxtb	r3, r3
    5530:	001a      	movs	r2, r3
    5532:	2301      	movs	r3, #1
    5534:	4013      	ands	r3, r2
    5536:	d003      	beq.n	5540 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    5538:	231d      	movs	r3, #29
    553a:	18fb      	adds	r3, r7, r3
    553c:	224d      	movs	r2, #77	; 0x4d
    553e:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	2b00      	cmp	r3, #0
    5544:	d105      	bne.n	5552 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    5546:	2314      	movs	r3, #20
    5548:	18fb      	adds	r3, r7, r3
    554a:	2201      	movs	r2, #1
    554c:	4252      	negs	r2, r2
    554e:	601a      	str	r2, [r3, #0]
    5550:	e003      	b.n	555a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    5552:	2314      	movs	r3, #20
    5554:	18fb      	adds	r3, r7, r3
    5556:	687a      	ldr	r2, [r7, #4]
    5558:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    555a:	2314      	movs	r3, #20
    555c:	18fb      	adds	r3, r7, r3
    555e:	220f      	movs	r2, #15
    5560:	18ba      	adds	r2, r7, r2
    5562:	7812      	ldrb	r2, [r2, #0]
    5564:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    5566:	230f      	movs	r3, #15
    5568:	18fb      	adds	r3, r7, r3
    556a:	781b      	ldrb	r3, [r3, #0]
    556c:	b25b      	sxtb	r3, r3
    556e:	4a18      	ldr	r2, [pc, #96]	; (55d0 <recv+0x178>)
    5570:	011b      	lsls	r3, r3, #4
    5572:	18d3      	adds	r3, r2, r3
    5574:	3306      	adds	r3, #6
    5576:	881b      	ldrh	r3, [r3, #0]
    5578:	b29a      	uxth	r2, r3
    557a:	2314      	movs	r3, #20
    557c:	18fb      	adds	r3, r7, r3
    557e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5580:	2314      	movs	r3, #20
    5582:	18fa      	adds	r2, r7, r3
    5584:	231d      	movs	r3, #29
    5586:	18fb      	adds	r3, r7, r3
    5588:	7819      	ldrb	r1, [r3, #0]
    558a:	2300      	movs	r3, #0
    558c:	9302      	str	r3, [sp, #8]
    558e:	2300      	movs	r3, #0
    5590:	9301      	str	r3, [sp, #4]
    5592:	2300      	movs	r3, #0
    5594:	9300      	str	r3, [sp, #0]
    5596:	2308      	movs	r3, #8
    5598:	2002      	movs	r0, #2
    559a:	4c0e      	ldr	r4, [pc, #56]	; (55d4 <recv+0x17c>)
    559c:	47a0      	blx	r4
    559e:	0003      	movs	r3, r0
    55a0:	001a      	movs	r2, r3
    55a2:	231e      	movs	r3, #30
    55a4:	18fb      	adds	r3, r7, r3
    55a6:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    55a8:	231e      	movs	r3, #30
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	2200      	movs	r2, #0
    55ae:	5e9b      	ldrsh	r3, [r3, r2]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d004      	beq.n	55be <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    55b4:	231e      	movs	r3, #30
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	220e      	movs	r2, #14
    55ba:	4252      	negs	r2, r2
    55bc:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    55be:	231e      	movs	r3, #30
    55c0:	18fb      	adds	r3, r7, r3
    55c2:	2200      	movs	r2, #0
    55c4:	5e9b      	ldrsh	r3, [r3, r2]
}
    55c6:	0018      	movs	r0, r3
    55c8:	46bd      	mov	sp, r7
    55ca:	b009      	add	sp, #36	; 0x24
    55cc:	bd90      	pop	{r4, r7, pc}
    55ce:	46c0      	nop			; (mov r8, r8)
    55d0:	200004d8 	.word	0x200004d8
    55d4:	00000e81 	.word	0x00000e81

000055d8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    55d8:	b5b0      	push	{r4, r5, r7, lr}
    55da:	b088      	sub	sp, #32
    55dc:	af04      	add	r7, sp, #16
    55de:	0002      	movs	r2, r0
    55e0:	1dfb      	adds	r3, r7, #7
    55e2:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    55e4:	230f      	movs	r3, #15
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	22fa      	movs	r2, #250	; 0xfa
    55ea:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    55ec:	4b42      	ldr	r3, [pc, #264]	; (56f8 <close+0x120>)
    55ee:	0018      	movs	r0, r3
    55f0:	4b42      	ldr	r3, [pc, #264]	; (56fc <close+0x124>)
    55f2:	4798      	blx	r3
    55f4:	1dfb      	adds	r3, r7, #7
    55f6:	2200      	movs	r2, #0
    55f8:	569a      	ldrsb	r2, [r3, r2]
    55fa:	4b41      	ldr	r3, [pc, #260]	; (5700 <close+0x128>)
    55fc:	0011      	movs	r1, r2
    55fe:	0018      	movs	r0, r3
    5600:	4b3e      	ldr	r3, [pc, #248]	; (56fc <close+0x124>)
    5602:	4798      	blx	r3
    5604:	200d      	movs	r0, #13
    5606:	4b3f      	ldr	r3, [pc, #252]	; (5704 <close+0x12c>)
    5608:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    560a:	1dfb      	adds	r3, r7, #7
    560c:	781b      	ldrb	r3, [r3, #0]
    560e:	2b7f      	cmp	r3, #127	; 0x7f
    5610:	d86a      	bhi.n	56e8 <close+0x110>
    5612:	1dfb      	adds	r3, r7, #7
    5614:	781b      	ldrb	r3, [r3, #0]
    5616:	b25b      	sxtb	r3, r3
    5618:	4a3b      	ldr	r2, [pc, #236]	; (5708 <close+0x130>)
    561a:	011b      	lsls	r3, r3, #4
    561c:	18d3      	adds	r3, r2, r3
    561e:	330a      	adds	r3, #10
    5620:	781b      	ldrb	r3, [r3, #0]
    5622:	b2db      	uxtb	r3, r3
    5624:	2b01      	cmp	r3, #1
    5626:	d15f      	bne.n	56e8 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    5628:	230e      	movs	r3, #14
    562a:	18fb      	adds	r3, r7, r3
    562c:	2249      	movs	r2, #73	; 0x49
    562e:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    5630:	2308      	movs	r3, #8
    5632:	18fb      	adds	r3, r7, r3
    5634:	1dfa      	adds	r2, r7, #7
    5636:	7812      	ldrb	r2, [r2, #0]
    5638:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    563a:	1dfb      	adds	r3, r7, #7
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	b25b      	sxtb	r3, r3
    5640:	4a31      	ldr	r2, [pc, #196]	; (5708 <close+0x130>)
    5642:	011b      	lsls	r3, r3, #4
    5644:	18d3      	adds	r3, r2, r3
    5646:	3306      	adds	r3, #6
    5648:	881b      	ldrh	r3, [r3, #0]
    564a:	b29a      	uxth	r2, r3
    564c:	2308      	movs	r3, #8
    564e:	18fb      	adds	r3, r7, r3
    5650:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    5652:	1dfb      	adds	r3, r7, #7
    5654:	781b      	ldrb	r3, [r3, #0]
    5656:	b25b      	sxtb	r3, r3
    5658:	4a2b      	ldr	r2, [pc, #172]	; (5708 <close+0x130>)
    565a:	011b      	lsls	r3, r3, #4
    565c:	18d3      	adds	r3, r2, r3
    565e:	330a      	adds	r3, #10
    5660:	2200      	movs	r2, #0
    5662:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5664:	1dfb      	adds	r3, r7, #7
    5666:	781b      	ldrb	r3, [r3, #0]
    5668:	b25b      	sxtb	r3, r3
    566a:	4a27      	ldr	r2, [pc, #156]	; (5708 <close+0x130>)
    566c:	011b      	lsls	r3, r3, #4
    566e:	18d3      	adds	r3, r2, r3
    5670:	3306      	adds	r3, #6
    5672:	2200      	movs	r2, #0
    5674:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5676:	1dfb      	adds	r3, r7, #7
    5678:	781b      	ldrb	r3, [r3, #0]
    567a:	b25b      	sxtb	r3, r3
    567c:	4a22      	ldr	r2, [pc, #136]	; (5708 <close+0x130>)
    567e:	011b      	lsls	r3, r3, #4
    5680:	18d3      	adds	r3, r2, r3
    5682:	330b      	adds	r3, #11
    5684:	781b      	ldrb	r3, [r3, #0]
    5686:	b2db      	uxtb	r3, r3
    5688:	001a      	movs	r2, r3
    568a:	2301      	movs	r3, #1
    568c:	4013      	ands	r3, r2
    568e:	d003      	beq.n	5698 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5690:	230e      	movs	r3, #14
    5692:	18fb      	adds	r3, r7, r3
    5694:	224e      	movs	r2, #78	; 0x4e
    5696:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5698:	230f      	movs	r3, #15
    569a:	18fc      	adds	r4, r7, r3
    569c:	2308      	movs	r3, #8
    569e:	18fa      	adds	r2, r7, r3
    56a0:	230e      	movs	r3, #14
    56a2:	18fb      	adds	r3, r7, r3
    56a4:	7819      	ldrb	r1, [r3, #0]
    56a6:	2300      	movs	r3, #0
    56a8:	9302      	str	r3, [sp, #8]
    56aa:	2300      	movs	r3, #0
    56ac:	9301      	str	r3, [sp, #4]
    56ae:	2300      	movs	r3, #0
    56b0:	9300      	str	r3, [sp, #0]
    56b2:	2304      	movs	r3, #4
    56b4:	2002      	movs	r0, #2
    56b6:	4d15      	ldr	r5, [pc, #84]	; (570c <close+0x134>)
    56b8:	47a8      	blx	r5
    56ba:	0003      	movs	r3, r0
    56bc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    56be:	230f      	movs	r3, #15
    56c0:	18fb      	adds	r3, r7, r3
    56c2:	781b      	ldrb	r3, [r3, #0]
    56c4:	b25b      	sxtb	r3, r3
    56c6:	2b00      	cmp	r3, #0
    56c8:	d003      	beq.n	56d2 <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    56ca:	230f      	movs	r3, #15
    56cc:	18fb      	adds	r3, r7, r3
    56ce:	22f7      	movs	r2, #247	; 0xf7
    56d0:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    56d2:	1dfb      	adds	r3, r7, #7
    56d4:	781b      	ldrb	r3, [r3, #0]
    56d6:	b25b      	sxtb	r3, r3
    56d8:	011a      	lsls	r2, r3, #4
    56da:	4b0b      	ldr	r3, [pc, #44]	; (5708 <close+0x130>)
    56dc:	18d3      	adds	r3, r2, r3
    56de:	2210      	movs	r2, #16
    56e0:	2100      	movs	r1, #0
    56e2:	0018      	movs	r0, r3
    56e4:	4b0a      	ldr	r3, [pc, #40]	; (5710 <close+0x138>)
    56e6:	4798      	blx	r3
	}
	return s8Ret;
    56e8:	230f      	movs	r3, #15
    56ea:	18fb      	adds	r3, r7, r3
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	b25b      	sxtb	r3, r3
}
    56f0:	0018      	movs	r0, r3
    56f2:	46bd      	mov	sp, r7
    56f4:	b004      	add	sp, #16
    56f6:	bdb0      	pop	{r4, r5, r7, pc}
    56f8:	000149b0 	.word	0x000149b0
    56fc:	0000f0ad 	.word	0x0000f0ad
    5700:	000149ec 	.word	0x000149ec
    5704:	0000f0e1 	.word	0x0000f0e1
    5708:	200004d8 	.word	0x200004d8
    570c:	00000e81 	.word	0x00000e81
    5710:	00000c21 	.word	0x00000c21

00005714 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    5714:	b580      	push	{r7, lr}
    5716:	b086      	sub	sp, #24
    5718:	af00      	add	r7, sp, #0
    571a:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    571c:	2300      	movs	r3, #0
    571e:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    5720:	2317      	movs	r3, #23
    5722:	18fb      	adds	r3, r7, r3
    5724:	2200      	movs	r2, #0
    5726:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    5728:	2316      	movs	r3, #22
    572a:	18fb      	adds	r3, r7, r3
    572c:	2200      	movs	r2, #0
    572e:	701a      	strb	r2, [r3, #0]
    5730:	e060      	b.n	57f4 <nmi_inet_addr+0xe0>
	{
		j = 0;
    5732:	2315      	movs	r3, #21
    5734:	18fb      	adds	r3, r7, r3
    5736:	2200      	movs	r2, #0
    5738:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    573a:	2314      	movs	r3, #20
    573c:	18fb      	adds	r3, r7, r3
    573e:	687a      	ldr	r2, [r7, #4]
    5740:	7812      	ldrb	r2, [r2, #0]
    5742:	701a      	strb	r2, [r3, #0]
			++j;
    5744:	2315      	movs	r3, #21
    5746:	18fb      	adds	r3, r7, r3
    5748:	2215      	movs	r2, #21
    574a:	18ba      	adds	r2, r7, r2
    574c:	7812      	ldrb	r2, [r2, #0]
    574e:	3201      	adds	r2, #1
    5750:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    5752:	2315      	movs	r3, #21
    5754:	18fb      	adds	r3, r7, r3
    5756:	781b      	ldrb	r3, [r3, #0]
    5758:	2b04      	cmp	r3, #4
    575a:	d901      	bls.n	5760 <nmi_inet_addr+0x4c>
			{
				return 0;
    575c:	2300      	movs	r3, #0
    575e:	e057      	b.n	5810 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    5760:	2314      	movs	r3, #20
    5762:	18fb      	adds	r3, r7, r3
    5764:	781b      	ldrb	r3, [r3, #0]
    5766:	2b2e      	cmp	r3, #46	; 0x2e
    5768:	d004      	beq.n	5774 <nmi_inet_addr+0x60>
    576a:	2314      	movs	r3, #20
    576c:	18fb      	adds	r3, r7, r3
    576e:	781b      	ldrb	r3, [r3, #0]
    5770:	2b00      	cmp	r3, #0
    5772:	d10d      	bne.n	5790 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    5774:	2316      	movs	r3, #22
    5776:	18fb      	adds	r3, r7, r3
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	220c      	movs	r2, #12
    577c:	18ba      	adds	r2, r7, r2
    577e:	2117      	movs	r1, #23
    5780:	1879      	adds	r1, r7, r1
    5782:	7809      	ldrb	r1, [r1, #0]
    5784:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    5786:	2317      	movs	r3, #23
    5788:	18fb      	adds	r3, r7, r3
    578a:	2200      	movs	r2, #0
    578c:	701a      	strb	r2, [r3, #0]
    578e:	e01d      	b.n	57cc <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    5790:	2314      	movs	r3, #20
    5792:	18fb      	adds	r3, r7, r3
    5794:	781b      	ldrb	r3, [r3, #0]
    5796:	2b2f      	cmp	r3, #47	; 0x2f
    5798:	d916      	bls.n	57c8 <nmi_inet_addr+0xb4>
    579a:	2314      	movs	r3, #20
    579c:	18fb      	adds	r3, r7, r3
    579e:	781b      	ldrb	r3, [r3, #0]
    57a0:	2b39      	cmp	r3, #57	; 0x39
    57a2:	d811      	bhi.n	57c8 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    57a4:	2317      	movs	r3, #23
    57a6:	18fb      	adds	r3, r7, r3
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	1c1a      	adds	r2, r3, #0
    57ac:	0092      	lsls	r2, r2, #2
    57ae:	18d3      	adds	r3, r2, r3
    57b0:	18db      	adds	r3, r3, r3
    57b2:	b2da      	uxtb	r2, r3
    57b4:	2314      	movs	r3, #20
    57b6:	18fb      	adds	r3, r7, r3
    57b8:	781b      	ldrb	r3, [r3, #0]
    57ba:	18d3      	adds	r3, r2, r3
    57bc:	b2da      	uxtb	r2, r3
    57be:	2317      	movs	r3, #23
    57c0:	18fb      	adds	r3, r7, r3
    57c2:	3a30      	subs	r2, #48	; 0x30
    57c4:	701a      	strb	r2, [r3, #0]
    57c6:	e001      	b.n	57cc <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    57c8:	2300      	movs	r3, #0
    57ca:	e021      	b.n	5810 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	3301      	adds	r3, #1
    57d0:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    57d2:	2314      	movs	r3, #20
    57d4:	18fb      	adds	r3, r7, r3
    57d6:	781b      	ldrb	r3, [r3, #0]
    57d8:	2b2e      	cmp	r3, #46	; 0x2e
    57da:	d004      	beq.n	57e6 <nmi_inet_addr+0xd2>
    57dc:	2314      	movs	r3, #20
    57de:	18fb      	adds	r3, r7, r3
    57e0:	781b      	ldrb	r3, [r3, #0]
    57e2:	2b00      	cmp	r3, #0
    57e4:	d1a9      	bne.n	573a <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    57e6:	2316      	movs	r3, #22
    57e8:	18fb      	adds	r3, r7, r3
    57ea:	2216      	movs	r2, #22
    57ec:	18ba      	adds	r2, r7, r2
    57ee:	7812      	ldrb	r2, [r2, #0]
    57f0:	3201      	adds	r2, #1
    57f2:	701a      	strb	r2, [r3, #0]
    57f4:	2316      	movs	r3, #22
    57f6:	18fb      	adds	r3, r7, r3
    57f8:	781b      	ldrb	r3, [r3, #0]
    57fa:	2b03      	cmp	r3, #3
    57fc:	d999      	bls.n	5732 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    57fe:	230c      	movs	r3, #12
    5800:	18f9      	adds	r1, r7, r3
    5802:	2310      	movs	r3, #16
    5804:	18fb      	adds	r3, r7, r3
    5806:	2204      	movs	r2, #4
    5808:	0018      	movs	r0, r3
    580a:	4b03      	ldr	r3, [pc, #12]	; (5818 <nmi_inet_addr+0x104>)
    580c:	4798      	blx	r3
	return u32IP;
    580e:	693b      	ldr	r3, [r7, #16]
}
    5810:	0018      	movs	r0, r3
    5812:	46bd      	mov	sp, r7
    5814:	b006      	add	sp, #24
    5816:	bd80      	pop	{r7, pc}
    5818:	00000be5 	.word	0x00000be5

0000581c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    581c:	b5b0      	push	{r4, r5, r7, lr}
    581e:	b088      	sub	sp, #32
    5820:	af04      	add	r7, sp, #16
    5822:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    5824:	230f      	movs	r3, #15
    5826:	18fb      	adds	r3, r7, r3
    5828:	22fa      	movs	r2, #250	; 0xfa
    582a:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    582c:	687b      	ldr	r3, [r7, #4]
    582e:	0018      	movs	r0, r3
    5830:	4b14      	ldr	r3, [pc, #80]	; (5884 <gethostbyname+0x68>)
    5832:	4798      	blx	r3
    5834:	0003      	movs	r3, r0
    5836:	001a      	movs	r2, r3
    5838:	230e      	movs	r3, #14
    583a:	18fb      	adds	r3, r7, r3
    583c:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    583e:	230e      	movs	r3, #14
    5840:	18fb      	adds	r3, r7, r3
    5842:	781b      	ldrb	r3, [r3, #0]
    5844:	2b40      	cmp	r3, #64	; 0x40
    5846:	d815      	bhi.n	5874 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    5848:	230e      	movs	r3, #14
    584a:	18fb      	adds	r3, r7, r3
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	b29b      	uxth	r3, r3
    5850:	3301      	adds	r3, #1
    5852:	b299      	uxth	r1, r3
    5854:	230f      	movs	r3, #15
    5856:	18fc      	adds	r4, r7, r3
    5858:	687a      	ldr	r2, [r7, #4]
    585a:	2300      	movs	r3, #0
    585c:	9302      	str	r3, [sp, #8]
    585e:	2300      	movs	r3, #0
    5860:	9301      	str	r3, [sp, #4]
    5862:	2300      	movs	r3, #0
    5864:	9300      	str	r3, [sp, #0]
    5866:	000b      	movs	r3, r1
    5868:	214a      	movs	r1, #74	; 0x4a
    586a:	2002      	movs	r0, #2
    586c:	4d06      	ldr	r5, [pc, #24]	; (5888 <gethostbyname+0x6c>)
    586e:	47a8      	blx	r5
    5870:	0003      	movs	r3, r0
    5872:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    5874:	230f      	movs	r3, #15
    5876:	18fb      	adds	r3, r7, r3
    5878:	781b      	ldrb	r3, [r3, #0]
    587a:	b25b      	sxtb	r3, r3
}
    587c:	0018      	movs	r0, r3
    587e:	46bd      	mov	sp, r7
    5880:	b004      	add	sp, #16
    5882:	bdb0      	pop	{r4, r5, r7, pc}
    5884:	00000c5f 	.word	0x00000c5f
    5888:	00000e81 	.word	0x00000e81

0000588c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    588c:	b580      	push	{r7, lr}
    588e:	b082      	sub	sp, #8
    5890:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5892:	003b      	movs	r3, r7
    5894:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	22b9      	movs	r2, #185	; 0xb9
    589a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    589c:	4b13      	ldr	r3, [pc, #76]	; (58ec <spi_flash_enter_low_power_mode+0x60>)
    589e:	2100      	movs	r1, #0
    58a0:	0018      	movs	r0, r3
    58a2:	4b13      	ldr	r3, [pc, #76]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58a4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	781b      	ldrb	r3, [r3, #0]
    58aa:	001a      	movs	r2, r3
    58ac:	4b11      	ldr	r3, [pc, #68]	; (58f4 <spi_flash_enter_low_power_mode+0x68>)
    58ae:	0011      	movs	r1, r2
    58b0:	0018      	movs	r0, r3
    58b2:	4b0f      	ldr	r3, [pc, #60]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58b4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    58b6:	4b10      	ldr	r3, [pc, #64]	; (58f8 <spi_flash_enter_low_power_mode+0x6c>)
    58b8:	2101      	movs	r1, #1
    58ba:	0018      	movs	r0, r3
    58bc:	4b0c      	ldr	r3, [pc, #48]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58be:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    58c0:	4b0e      	ldr	r3, [pc, #56]	; (58fc <spi_flash_enter_low_power_mode+0x70>)
    58c2:	2100      	movs	r1, #0
    58c4:	0018      	movs	r0, r3
    58c6:	4b0a      	ldr	r3, [pc, #40]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58c8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    58ca:	4b0d      	ldr	r3, [pc, #52]	; (5900 <spi_flash_enter_low_power_mode+0x74>)
    58cc:	2181      	movs	r1, #129	; 0x81
    58ce:	0018      	movs	r0, r3
    58d0:	4b07      	ldr	r3, [pc, #28]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58d2:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    58d4:	46c0      	nop			; (mov r8, r8)
    58d6:	4b0b      	ldr	r3, [pc, #44]	; (5904 <spi_flash_enter_low_power_mode+0x78>)
    58d8:	0018      	movs	r0, r3
    58da:	4b0b      	ldr	r3, [pc, #44]	; (5908 <spi_flash_enter_low_power_mode+0x7c>)
    58dc:	4798      	blx	r3
    58de:	0003      	movs	r3, r0
    58e0:	2b01      	cmp	r3, #1
    58e2:	d1f8      	bne.n	58d6 <spi_flash_enter_low_power_mode+0x4a>
}
    58e4:	46c0      	nop			; (mov r8, r8)
    58e6:	46bd      	mov	sp, r7
    58e8:	b002      	add	sp, #8
    58ea:	bd80      	pop	{r7, pc}
    58ec:	00010208 	.word	0x00010208
    58f0:	00002c81 	.word	0x00002c81
    58f4:	0001020c 	.word	0x0001020c
    58f8:	00010214 	.word	0x00010214
    58fc:	0001021c 	.word	0x0001021c
    5900:	00010204 	.word	0x00010204
    5904:	00010218 	.word	0x00010218
    5908:	00002c3d 	.word	0x00002c3d

0000590c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    590c:	b580      	push	{r7, lr}
    590e:	b082      	sub	sp, #8
    5910:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5912:	003b      	movs	r3, r7
    5914:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    5916:	687b      	ldr	r3, [r7, #4]
    5918:	22ab      	movs	r2, #171	; 0xab
    591a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    591c:	4b13      	ldr	r3, [pc, #76]	; (596c <spi_flash_leave_low_power_mode+0x60>)
    591e:	2100      	movs	r1, #0
    5920:	0018      	movs	r0, r3
    5922:	4b13      	ldr	r3, [pc, #76]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    5924:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	001a      	movs	r2, r3
    592c:	4b11      	ldr	r3, [pc, #68]	; (5974 <spi_flash_leave_low_power_mode+0x68>)
    592e:	0011      	movs	r1, r2
    5930:	0018      	movs	r0, r3
    5932:	4b0f      	ldr	r3, [pc, #60]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    5934:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5936:	4b10      	ldr	r3, [pc, #64]	; (5978 <spi_flash_leave_low_power_mode+0x6c>)
    5938:	2101      	movs	r1, #1
    593a:	0018      	movs	r0, r3
    593c:	4b0c      	ldr	r3, [pc, #48]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    593e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5940:	4b0e      	ldr	r3, [pc, #56]	; (597c <spi_flash_leave_low_power_mode+0x70>)
    5942:	2100      	movs	r1, #0
    5944:	0018      	movs	r0, r3
    5946:	4b0a      	ldr	r3, [pc, #40]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    5948:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    594a:	4b0d      	ldr	r3, [pc, #52]	; (5980 <spi_flash_leave_low_power_mode+0x74>)
    594c:	2181      	movs	r1, #129	; 0x81
    594e:	0018      	movs	r0, r3
    5950:	4b07      	ldr	r3, [pc, #28]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    5952:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5954:	46c0      	nop			; (mov r8, r8)
    5956:	4b0b      	ldr	r3, [pc, #44]	; (5984 <spi_flash_leave_low_power_mode+0x78>)
    5958:	0018      	movs	r0, r3
    595a:	4b0b      	ldr	r3, [pc, #44]	; (5988 <spi_flash_leave_low_power_mode+0x7c>)
    595c:	4798      	blx	r3
    595e:	0003      	movs	r3, r0
    5960:	2b01      	cmp	r3, #1
    5962:	d1f8      	bne.n	5956 <spi_flash_leave_low_power_mode+0x4a>
}
    5964:	46c0      	nop			; (mov r8, r8)
    5966:	46bd      	mov	sp, r7
    5968:	b002      	add	sp, #8
    596a:	bd80      	pop	{r7, pc}
    596c:	00010208 	.word	0x00010208
    5970:	00002c81 	.word	0x00002c81
    5974:	0001020c 	.word	0x0001020c
    5978:	00010214 	.word	0x00010214
    597c:	0001021c 	.word	0x0001021c
    5980:	00010204 	.word	0x00010204
    5984:	00010218 	.word	0x00010218
    5988:	00002c3d 	.word	0x00002c3d

0000598c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    598c:	b590      	push	{r4, r7, lr}
    598e:	b085      	sub	sp, #20
    5990:	af00      	add	r7, sp, #0
    5992:	0002      	movs	r2, r0
    5994:	1dfb      	adds	r3, r7, #7
    5996:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    5998:	230f      	movs	r3, #15
    599a:	18fb      	adds	r3, r7, r3
    599c:	2200      	movs	r2, #0
    599e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    59a0:	4b24      	ldr	r3, [pc, #144]	; (5a34 <spi_flash_enable+0xa8>)
    59a2:	4798      	blx	r3
    59a4:	0003      	movs	r3, r0
    59a6:	051b      	lsls	r3, r3, #20
    59a8:	0d1b      	lsrs	r3, r3, #20
    59aa:	4a23      	ldr	r2, [pc, #140]	; (5a38 <spi_flash_enable+0xac>)
    59ac:	4293      	cmp	r3, r2
    59ae:	d938      	bls.n	5a22 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    59b0:	230f      	movs	r3, #15
    59b2:	18fc      	adds	r4, r7, r3
    59b4:	2308      	movs	r3, #8
    59b6:	18fb      	adds	r3, r7, r3
    59b8:	4a20      	ldr	r2, [pc, #128]	; (5a3c <spi_flash_enable+0xb0>)
    59ba:	0019      	movs	r1, r3
    59bc:	0010      	movs	r0, r2
    59be:	4b20      	ldr	r3, [pc, #128]	; (5a40 <spi_flash_enable+0xb4>)
    59c0:	4798      	blx	r3
    59c2:	0003      	movs	r3, r0
    59c4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    59c6:	230f      	movs	r3, #15
    59c8:	18fb      	adds	r3, r7, r3
    59ca:	781b      	ldrb	r3, [r3, #0]
    59cc:	b25b      	sxtb	r3, r3
    59ce:	2b00      	cmp	r3, #0
    59d0:	d126      	bne.n	5a20 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    59d2:	68bb      	ldr	r3, [r7, #8]
    59d4:	4a1b      	ldr	r2, [pc, #108]	; (5a44 <spi_flash_enable+0xb8>)
    59d6:	4013      	ands	r3, r2
    59d8:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    59da:	68bb      	ldr	r3, [r7, #8]
    59dc:	4a1a      	ldr	r2, [pc, #104]	; (5a48 <spi_flash_enable+0xbc>)
    59de:	4313      	orrs	r3, r2
    59e0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    59e2:	68bb      	ldr	r3, [r7, #8]
    59e4:	4a15      	ldr	r2, [pc, #84]	; (5a3c <spi_flash_enable+0xb0>)
    59e6:	0019      	movs	r1, r3
    59e8:	0010      	movs	r0, r2
    59ea:	4b18      	ldr	r3, [pc, #96]	; (5a4c <spi_flash_enable+0xc0>)
    59ec:	4798      	blx	r3
		if(enable) {
    59ee:	1dfb      	adds	r3, r7, #7
    59f0:	781b      	ldrb	r3, [r3, #0]
    59f2:	2b00      	cmp	r3, #0
    59f4:	d002      	beq.n	59fc <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    59f6:	4b16      	ldr	r3, [pc, #88]	; (5a50 <spi_flash_enable+0xc4>)
    59f8:	4798      	blx	r3
    59fa:	e001      	b.n	5a00 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    59fc:	4b15      	ldr	r3, [pc, #84]	; (5a54 <spi_flash_enable+0xc8>)
    59fe:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5a00:	68bb      	ldr	r3, [r7, #8]
    5a02:	4a10      	ldr	r2, [pc, #64]	; (5a44 <spi_flash_enable+0xb8>)
    5a04:	4013      	ands	r3, r2
    5a06:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5a08:	68bb      	ldr	r3, [r7, #8]
    5a0a:	2280      	movs	r2, #128	; 0x80
    5a0c:	0252      	lsls	r2, r2, #9
    5a0e:	4313      	orrs	r3, r2
    5a10:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5a12:	68bb      	ldr	r3, [r7, #8]
    5a14:	4a09      	ldr	r2, [pc, #36]	; (5a3c <spi_flash_enable+0xb0>)
    5a16:	0019      	movs	r1, r3
    5a18:	0010      	movs	r0, r2
    5a1a:	4b0c      	ldr	r3, [pc, #48]	; (5a4c <spi_flash_enable+0xc0>)
    5a1c:	4798      	blx	r3
    5a1e:	e000      	b.n	5a22 <spi_flash_enable+0x96>
			goto ERR1;
    5a20:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    5a22:	230f      	movs	r3, #15
    5a24:	18fb      	adds	r3, r7, r3
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	b25b      	sxtb	r3, r3
}
    5a2a:	0018      	movs	r0, r3
    5a2c:	46bd      	mov	sp, r7
    5a2e:	b005      	add	sp, #20
    5a30:	bd90      	pop	{r4, r7, pc}
    5a32:	46c0      	nop			; (mov r8, r8)
    5a34:	00002561 	.word	0x00002561
    5a38:	0000039f 	.word	0x0000039f
    5a3c:	00001410 	.word	0x00001410
    5a40:	00002c5d 	.word	0x00002c5d
    5a44:	f8888fff 	.word	0xf8888fff
    5a48:	01111000 	.word	0x01111000
    5a4c:	00002c81 	.word	0x00002c81
    5a50:	0000590d 	.word	0x0000590d
    5a54:	0000588d 	.word	0x0000588d

00005a58 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5a58:	b580      	push	{r7, lr}
    5a5a:	b084      	sub	sp, #16
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	0002      	movs	r2, r0
    5a60:	1dfb      	adds	r3, r7, #7
    5a62:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5a64:	230f      	movs	r3, #15
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	1dfa      	adds	r2, r7, #7
    5a6a:	7812      	ldrb	r2, [r2, #0]
    5a6c:	0952      	lsrs	r2, r2, #5
    5a6e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5a70:	230f      	movs	r3, #15
    5a72:	18fb      	adds	r3, r7, r3
    5a74:	781b      	ldrb	r3, [r3, #0]
    5a76:	2b00      	cmp	r3, #0
    5a78:	d10c      	bne.n	5a94 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5a7a:	4b09      	ldr	r3, [pc, #36]	; (5aa0 <_extint_get_eic_from_channel+0x48>)
    5a7c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    5a7e:	230f      	movs	r3, #15
    5a80:	18fb      	adds	r3, r7, r3
    5a82:	781b      	ldrb	r3, [r3, #0]
    5a84:	009b      	lsls	r3, r3, #2
    5a86:	2210      	movs	r2, #16
    5a88:	4694      	mov	ip, r2
    5a8a:	44bc      	add	ip, r7
    5a8c:	4463      	add	r3, ip
    5a8e:	3b08      	subs	r3, #8
    5a90:	681b      	ldr	r3, [r3, #0]
    5a92:	e000      	b.n	5a96 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    5a94:	2300      	movs	r3, #0
	}
}
    5a96:	0018      	movs	r0, r3
    5a98:	46bd      	mov	sp, r7
    5a9a:	b004      	add	sp, #16
    5a9c:	bd80      	pop	{r7, pc}
    5a9e:	46c0      	nop			; (mov r8, r8)
    5aa0:	40001800 	.word	0x40001800

00005aa4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b084      	sub	sp, #16
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	0002      	movs	r2, r0
    5aac:	1dfb      	adds	r3, r7, #7
    5aae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5ab0:	1dfb      	adds	r3, r7, #7
    5ab2:	781b      	ldrb	r3, [r3, #0]
    5ab4:	0018      	movs	r0, r3
    5ab6:	4b0b      	ldr	r3, [pc, #44]	; (5ae4 <extint_chan_is_detected+0x40>)
    5ab8:	4798      	blx	r3
    5aba:	0003      	movs	r3, r0
    5abc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5abe:	1dfb      	adds	r3, r7, #7
    5ac0:	781b      	ldrb	r3, [r3, #0]
    5ac2:	221f      	movs	r2, #31
    5ac4:	4013      	ands	r3, r2
    5ac6:	2201      	movs	r2, #1
    5ac8:	409a      	lsls	r2, r3
    5aca:	0013      	movs	r3, r2
    5acc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	691b      	ldr	r3, [r3, #16]
    5ad2:	68ba      	ldr	r2, [r7, #8]
    5ad4:	4013      	ands	r3, r2
    5ad6:	1e5a      	subs	r2, r3, #1
    5ad8:	4193      	sbcs	r3, r2
    5ada:	b2db      	uxtb	r3, r3
}
    5adc:	0018      	movs	r0, r3
    5ade:	46bd      	mov	sp, r7
    5ae0:	b004      	add	sp, #16
    5ae2:	bd80      	pop	{r7, pc}
    5ae4:	00005a59 	.word	0x00005a59

00005ae8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b084      	sub	sp, #16
    5aec:	af00      	add	r7, sp, #0
    5aee:	0002      	movs	r2, r0
    5af0:	1dfb      	adds	r3, r7, #7
    5af2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5af4:	1dfb      	adds	r3, r7, #7
    5af6:	781b      	ldrb	r3, [r3, #0]
    5af8:	0018      	movs	r0, r3
    5afa:	4b09      	ldr	r3, [pc, #36]	; (5b20 <extint_chan_clear_detected+0x38>)
    5afc:	4798      	blx	r3
    5afe:	0003      	movs	r3, r0
    5b00:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5b02:	1dfb      	adds	r3, r7, #7
    5b04:	781b      	ldrb	r3, [r3, #0]
    5b06:	221f      	movs	r2, #31
    5b08:	4013      	ands	r3, r2
    5b0a:	2201      	movs	r2, #1
    5b0c:	409a      	lsls	r2, r3
    5b0e:	0013      	movs	r3, r2
    5b10:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    5b12:	68fb      	ldr	r3, [r7, #12]
    5b14:	68ba      	ldr	r2, [r7, #8]
    5b16:	611a      	str	r2, [r3, #16]
}
    5b18:	46c0      	nop			; (mov r8, r8)
    5b1a:	46bd      	mov	sp, r7
    5b1c:	b004      	add	sp, #16
    5b1e:	bd80      	pop	{r7, pc}
    5b20:	00005a59 	.word	0x00005a59

00005b24 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	b082      	sub	sp, #8
    5b28:	af00      	add	r7, sp, #0
    5b2a:	6078      	str	r0, [r7, #4]
    5b2c:	0008      	movs	r0, r1
    5b2e:	0011      	movs	r1, r2
    5b30:	1cfb      	adds	r3, r7, #3
    5b32:	1c02      	adds	r2, r0, #0
    5b34:	701a      	strb	r2, [r3, #0]
    5b36:	1cbb      	adds	r3, r7, #2
    5b38:	1c0a      	adds	r2, r1, #0
    5b3a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    5b3c:	1cbb      	adds	r3, r7, #2
    5b3e:	781b      	ldrb	r3, [r3, #0]
    5b40:	2b00      	cmp	r3, #0
    5b42:	d001      	beq.n	5b48 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5b44:	2317      	movs	r3, #23
    5b46:	e019      	b.n	5b7c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    5b48:	1cfb      	adds	r3, r7, #3
    5b4a:	781a      	ldrb	r2, [r3, #0]
    5b4c:	4b0d      	ldr	r3, [pc, #52]	; (5b84 <extint_register_callback+0x60>)
    5b4e:	0092      	lsls	r2, r2, #2
    5b50:	58d3      	ldr	r3, [r2, r3]
    5b52:	2b00      	cmp	r3, #0
    5b54:	d107      	bne.n	5b66 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    5b56:	1cfb      	adds	r3, r7, #3
    5b58:	781a      	ldrb	r2, [r3, #0]
    5b5a:	4b0a      	ldr	r3, [pc, #40]	; (5b84 <extint_register_callback+0x60>)
    5b5c:	0092      	lsls	r2, r2, #2
    5b5e:	6879      	ldr	r1, [r7, #4]
    5b60:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    5b62:	2300      	movs	r3, #0
    5b64:	e00a      	b.n	5b7c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    5b66:	1cfb      	adds	r3, r7, #3
    5b68:	781a      	ldrb	r2, [r3, #0]
    5b6a:	4b06      	ldr	r3, [pc, #24]	; (5b84 <extint_register_callback+0x60>)
    5b6c:	0092      	lsls	r2, r2, #2
    5b6e:	58d2      	ldr	r2, [r2, r3]
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	429a      	cmp	r2, r3
    5b74:	d101      	bne.n	5b7a <extint_register_callback+0x56>
		return STATUS_OK;
    5b76:	2300      	movs	r3, #0
    5b78:	e000      	b.n	5b7c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    5b7a:	231d      	movs	r3, #29
}
    5b7c:	0018      	movs	r0, r3
    5b7e:	46bd      	mov	sp, r7
    5b80:	b002      	add	sp, #8
    5b82:	bd80      	pop	{r7, pc}
    5b84:	20000598 	.word	0x20000598

00005b88 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	b084      	sub	sp, #16
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	0002      	movs	r2, r0
    5b90:	1dfb      	adds	r3, r7, #7
    5b92:	701a      	strb	r2, [r3, #0]
    5b94:	1dbb      	adds	r3, r7, #6
    5b96:	1c0a      	adds	r2, r1, #0
    5b98:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5b9a:	1dbb      	adds	r3, r7, #6
    5b9c:	781b      	ldrb	r3, [r3, #0]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d10e      	bne.n	5bc0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5ba2:	1dfb      	adds	r3, r7, #7
    5ba4:	781b      	ldrb	r3, [r3, #0]
    5ba6:	0018      	movs	r0, r3
    5ba8:	4b08      	ldr	r3, [pc, #32]	; (5bcc <extint_chan_enable_callback+0x44>)
    5baa:	4798      	blx	r3
    5bac:	0003      	movs	r3, r0
    5bae:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    5bb0:	1dfb      	adds	r3, r7, #7
    5bb2:	781b      	ldrb	r3, [r3, #0]
    5bb4:	2201      	movs	r2, #1
    5bb6:	409a      	lsls	r2, r3
    5bb8:	68fb      	ldr	r3, [r7, #12]
    5bba:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5bbc:	2300      	movs	r3, #0
    5bbe:	e000      	b.n	5bc2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5bc0:	2317      	movs	r3, #23
}
    5bc2:	0018      	movs	r0, r3
    5bc4:	46bd      	mov	sp, r7
    5bc6:	b004      	add	sp, #16
    5bc8:	bd80      	pop	{r7, pc}
    5bca:	46c0      	nop			; (mov r8, r8)
    5bcc:	00005a59 	.word	0x00005a59

00005bd0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	b084      	sub	sp, #16
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	0002      	movs	r2, r0
    5bd8:	1dfb      	adds	r3, r7, #7
    5bda:	701a      	strb	r2, [r3, #0]
    5bdc:	1dbb      	adds	r3, r7, #6
    5bde:	1c0a      	adds	r2, r1, #0
    5be0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5be2:	1dbb      	adds	r3, r7, #6
    5be4:	781b      	ldrb	r3, [r3, #0]
    5be6:	2b00      	cmp	r3, #0
    5be8:	d10e      	bne.n	5c08 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5bea:	1dfb      	adds	r3, r7, #7
    5bec:	781b      	ldrb	r3, [r3, #0]
    5bee:	0018      	movs	r0, r3
    5bf0:	4b08      	ldr	r3, [pc, #32]	; (5c14 <extint_chan_disable_callback+0x44>)
    5bf2:	4798      	blx	r3
    5bf4:	0003      	movs	r3, r0
    5bf6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    5bf8:	1dfb      	adds	r3, r7, #7
    5bfa:	781b      	ldrb	r3, [r3, #0]
    5bfc:	2201      	movs	r2, #1
    5bfe:	409a      	lsls	r2, r3
    5c00:	68fb      	ldr	r3, [r7, #12]
    5c02:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5c04:	2300      	movs	r3, #0
    5c06:	e000      	b.n	5c0a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5c08:	2317      	movs	r3, #23
}
    5c0a:	0018      	movs	r0, r3
    5c0c:	46bd      	mov	sp, r7
    5c0e:	b004      	add	sp, #16
    5c10:	bd80      	pop	{r7, pc}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	00005a59 	.word	0x00005a59

00005c18 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5c18:	b580      	push	{r7, lr}
    5c1a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5c1c:	4b15      	ldr	r3, [pc, #84]	; (5c74 <EIC_Handler+0x5c>)
    5c1e:	2200      	movs	r2, #0
    5c20:	701a      	strb	r2, [r3, #0]
    5c22:	e020      	b.n	5c66 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    5c24:	4b13      	ldr	r3, [pc, #76]	; (5c74 <EIC_Handler+0x5c>)
    5c26:	781b      	ldrb	r3, [r3, #0]
    5c28:	0018      	movs	r0, r3
    5c2a:	4b13      	ldr	r3, [pc, #76]	; (5c78 <EIC_Handler+0x60>)
    5c2c:	4798      	blx	r3
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d013      	beq.n	5c5a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    5c32:	4b10      	ldr	r3, [pc, #64]	; (5c74 <EIC_Handler+0x5c>)
    5c34:	781b      	ldrb	r3, [r3, #0]
    5c36:	0018      	movs	r0, r3
    5c38:	4b10      	ldr	r3, [pc, #64]	; (5c7c <EIC_Handler+0x64>)
    5c3a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5c3c:	4b0d      	ldr	r3, [pc, #52]	; (5c74 <EIC_Handler+0x5c>)
    5c3e:	781b      	ldrb	r3, [r3, #0]
    5c40:	001a      	movs	r2, r3
    5c42:	4b0f      	ldr	r3, [pc, #60]	; (5c80 <EIC_Handler+0x68>)
    5c44:	0092      	lsls	r2, r2, #2
    5c46:	58d3      	ldr	r3, [r2, r3]
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d006      	beq.n	5c5a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5c4c:	4b09      	ldr	r3, [pc, #36]	; (5c74 <EIC_Handler+0x5c>)
    5c4e:	781b      	ldrb	r3, [r3, #0]
    5c50:	001a      	movs	r2, r3
    5c52:	4b0b      	ldr	r3, [pc, #44]	; (5c80 <EIC_Handler+0x68>)
    5c54:	0092      	lsls	r2, r2, #2
    5c56:	58d3      	ldr	r3, [r2, r3]
    5c58:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5c5a:	4b06      	ldr	r3, [pc, #24]	; (5c74 <EIC_Handler+0x5c>)
    5c5c:	781b      	ldrb	r3, [r3, #0]
    5c5e:	3301      	adds	r3, #1
    5c60:	b2da      	uxtb	r2, r3
    5c62:	4b04      	ldr	r3, [pc, #16]	; (5c74 <EIC_Handler+0x5c>)
    5c64:	701a      	strb	r2, [r3, #0]
    5c66:	4b03      	ldr	r3, [pc, #12]	; (5c74 <EIC_Handler+0x5c>)
    5c68:	781b      	ldrb	r3, [r3, #0]
    5c6a:	2b0f      	cmp	r3, #15
    5c6c:	d9da      	bls.n	5c24 <EIC_Handler+0xc>
			}
		}
	}
}
    5c6e:	46c0      	nop			; (mov r8, r8)
    5c70:	46bd      	mov	sp, r7
    5c72:	bd80      	pop	{r7, pc}
    5c74:	20000594 	.word	0x20000594
    5c78:	00005aa5 	.word	0x00005aa5
    5c7c:	00005ae9 	.word	0x00005ae9
    5c80:	20000598 	.word	0x20000598

00005c84 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5c84:	b580      	push	{r7, lr}
    5c86:	b082      	sub	sp, #8
    5c88:	af00      	add	r7, sp, #0
    5c8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	2200      	movs	r2, #0
    5c90:	701a      	strb	r2, [r3, #0]
}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	46bd      	mov	sp, r7
    5c96:	b002      	add	sp, #8
    5c98:	bd80      	pop	{r7, pc}
	...

00005c9c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5c9c:	b580      	push	{r7, lr}
    5c9e:	b082      	sub	sp, #8
    5ca0:	af00      	add	r7, sp, #0
    5ca2:	0002      	movs	r2, r0
    5ca4:	6039      	str	r1, [r7, #0]
    5ca6:	1dfb      	adds	r3, r7, #7
    5ca8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5caa:	1dfb      	adds	r3, r7, #7
    5cac:	781b      	ldrb	r3, [r3, #0]
    5cae:	2b01      	cmp	r3, #1
    5cb0:	d00a      	beq.n	5cc8 <system_apb_clock_set_mask+0x2c>
    5cb2:	2b02      	cmp	r3, #2
    5cb4:	d00f      	beq.n	5cd6 <system_apb_clock_set_mask+0x3a>
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d114      	bne.n	5ce4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5cba:	4b0e      	ldr	r3, [pc, #56]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cbc:	4a0d      	ldr	r2, [pc, #52]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cbe:	6991      	ldr	r1, [r2, #24]
    5cc0:	683a      	ldr	r2, [r7, #0]
    5cc2:	430a      	orrs	r2, r1
    5cc4:	619a      	str	r2, [r3, #24]
			break;
    5cc6:	e00f      	b.n	5ce8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5cc8:	4b0a      	ldr	r3, [pc, #40]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cca:	4a0a      	ldr	r2, [pc, #40]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5ccc:	69d1      	ldr	r1, [r2, #28]
    5cce:	683a      	ldr	r2, [r7, #0]
    5cd0:	430a      	orrs	r2, r1
    5cd2:	61da      	str	r2, [r3, #28]
			break;
    5cd4:	e008      	b.n	5ce8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5cd6:	4b07      	ldr	r3, [pc, #28]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cd8:	4a06      	ldr	r2, [pc, #24]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cda:	6a11      	ldr	r1, [r2, #32]
    5cdc:	683a      	ldr	r2, [r7, #0]
    5cde:	430a      	orrs	r2, r1
    5ce0:	621a      	str	r2, [r3, #32]
			break;
    5ce2:	e001      	b.n	5ce8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5ce4:	2317      	movs	r3, #23
    5ce6:	e000      	b.n	5cea <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5ce8:	2300      	movs	r3, #0
}
    5cea:	0018      	movs	r0, r3
    5cec:	46bd      	mov	sp, r7
    5cee:	b002      	add	sp, #8
    5cf0:	bd80      	pop	{r7, pc}
    5cf2:	46c0      	nop			; (mov r8, r8)
    5cf4:	40000400 	.word	0x40000400

00005cf8 <system_pinmux_get_config_defaults>:
{
    5cf8:	b580      	push	{r7, lr}
    5cfa:	b082      	sub	sp, #8
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	2280      	movs	r2, #128	; 0x80
    5d04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d06:	687b      	ldr	r3, [r7, #4]
    5d08:	2200      	movs	r2, #0
    5d0a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d0c:	687b      	ldr	r3, [r7, #4]
    5d0e:	2201      	movs	r2, #1
    5d10:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	2200      	movs	r2, #0
    5d16:	70da      	strb	r2, [r3, #3]
}
    5d18:	46c0      	nop			; (mov r8, r8)
    5d1a:	46bd      	mov	sp, r7
    5d1c:	b002      	add	sp, #8
    5d1e:	bd80      	pop	{r7, pc}

00005d20 <system_interrupt_enable>:
{
    5d20:	b580      	push	{r7, lr}
    5d22:	b082      	sub	sp, #8
    5d24:	af00      	add	r7, sp, #0
    5d26:	0002      	movs	r2, r0
    5d28:	1dfb      	adds	r3, r7, #7
    5d2a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5d2c:	4b06      	ldr	r3, [pc, #24]	; (5d48 <system_interrupt_enable+0x28>)
    5d2e:	1dfa      	adds	r2, r7, #7
    5d30:	7812      	ldrb	r2, [r2, #0]
    5d32:	0011      	movs	r1, r2
    5d34:	221f      	movs	r2, #31
    5d36:	400a      	ands	r2, r1
    5d38:	2101      	movs	r1, #1
    5d3a:	4091      	lsls	r1, r2
    5d3c:	000a      	movs	r2, r1
    5d3e:	601a      	str	r2, [r3, #0]
}
    5d40:	46c0      	nop			; (mov r8, r8)
    5d42:	46bd      	mov	sp, r7
    5d44:	b002      	add	sp, #8
    5d46:	bd80      	pop	{r7, pc}
    5d48:	e000e100 	.word	0xe000e100

00005d4c <_extint_get_eic_from_channel>:
{
    5d4c:	b580      	push	{r7, lr}
    5d4e:	b084      	sub	sp, #16
    5d50:	af00      	add	r7, sp, #0
    5d52:	0002      	movs	r2, r0
    5d54:	1dfb      	adds	r3, r7, #7
    5d56:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5d58:	230f      	movs	r3, #15
    5d5a:	18fb      	adds	r3, r7, r3
    5d5c:	1dfa      	adds	r2, r7, #7
    5d5e:	7812      	ldrb	r2, [r2, #0]
    5d60:	0952      	lsrs	r2, r2, #5
    5d62:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    5d64:	230f      	movs	r3, #15
    5d66:	18fb      	adds	r3, r7, r3
    5d68:	781b      	ldrb	r3, [r3, #0]
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d10c      	bne.n	5d88 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5d6e:	4b09      	ldr	r3, [pc, #36]	; (5d94 <_extint_get_eic_from_channel+0x48>)
    5d70:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    5d72:	230f      	movs	r3, #15
    5d74:	18fb      	adds	r3, r7, r3
    5d76:	781b      	ldrb	r3, [r3, #0]
    5d78:	009b      	lsls	r3, r3, #2
    5d7a:	2210      	movs	r2, #16
    5d7c:	4694      	mov	ip, r2
    5d7e:	44bc      	add	ip, r7
    5d80:	4463      	add	r3, ip
    5d82:	3b08      	subs	r3, #8
    5d84:	681b      	ldr	r3, [r3, #0]
    5d86:	e000      	b.n	5d8a <_extint_get_eic_from_channel+0x3e>
		return NULL;
    5d88:	2300      	movs	r3, #0
}
    5d8a:	0018      	movs	r0, r3
    5d8c:	46bd      	mov	sp, r7
    5d8e:	b004      	add	sp, #16
    5d90:	bd80      	pop	{r7, pc}
    5d92:	46c0      	nop			; (mov r8, r8)
    5d94:	40001800 	.word	0x40001800

00005d98 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b082      	sub	sp, #8
    5d9c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5d9e:	4b0f      	ldr	r3, [pc, #60]	; (5ddc <extint_is_syncing+0x44>)
    5da0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5da2:	2300      	movs	r3, #0
    5da4:	607b      	str	r3, [r7, #4]
    5da6:	e011      	b.n	5dcc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	009b      	lsls	r3, r3, #2
    5dac:	2208      	movs	r2, #8
    5dae:	4694      	mov	ip, r2
    5db0:	44bc      	add	ip, r7
    5db2:	4463      	add	r3, ip
    5db4:	3b08      	subs	r3, #8
    5db6:	681b      	ldr	r3, [r3, #0]
    5db8:	785b      	ldrb	r3, [r3, #1]
    5dba:	b2db      	uxtb	r3, r3
    5dbc:	b25b      	sxtb	r3, r3
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	da01      	bge.n	5dc6 <extint_is_syncing+0x2e>
			return true;
    5dc2:	2301      	movs	r3, #1
    5dc4:	e006      	b.n	5dd4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5dc6:	687b      	ldr	r3, [r7, #4]
    5dc8:	3301      	adds	r3, #1
    5dca:	607b      	str	r3, [r7, #4]
    5dcc:	687b      	ldr	r3, [r7, #4]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d0ea      	beq.n	5da8 <extint_is_syncing+0x10>
		}
	}
	return false;
    5dd2:	2300      	movs	r3, #0
}
    5dd4:	0018      	movs	r0, r3
    5dd6:	46bd      	mov	sp, r7
    5dd8:	b002      	add	sp, #8
    5dda:	bd80      	pop	{r7, pc}
    5ddc:	40001800 	.word	0x40001800

00005de0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5de6:	4b2d      	ldr	r3, [pc, #180]	; (5e9c <_system_extint_init+0xbc>)
    5de8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    5dea:	2140      	movs	r1, #64	; 0x40
    5dec:	2000      	movs	r0, #0
    5dee:	4b2c      	ldr	r3, [pc, #176]	; (5ea0 <_system_extint_init+0xc0>)
    5df0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5df2:	003b      	movs	r3, r7
    5df4:	0018      	movs	r0, r3
    5df6:	4b2b      	ldr	r3, [pc, #172]	; (5ea4 <_system_extint_init+0xc4>)
    5df8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    5dfa:	003b      	movs	r3, r7
    5dfc:	2200      	movs	r2, #0
    5dfe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    5e00:	003b      	movs	r3, r7
    5e02:	0019      	movs	r1, r3
    5e04:	2005      	movs	r0, #5
    5e06:	4b28      	ldr	r3, [pc, #160]	; (5ea8 <_system_extint_init+0xc8>)
    5e08:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    5e0a:	2005      	movs	r0, #5
    5e0c:	4b27      	ldr	r3, [pc, #156]	; (5eac <_system_extint_init+0xcc>)
    5e0e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5e10:	2300      	movs	r3, #0
    5e12:	60fb      	str	r3, [r7, #12]
    5e14:	e018      	b.n	5e48 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5e16:	68fb      	ldr	r3, [r7, #12]
    5e18:	009b      	lsls	r3, r3, #2
    5e1a:	2210      	movs	r2, #16
    5e1c:	4694      	mov	ip, r2
    5e1e:	44bc      	add	ip, r7
    5e20:	4463      	add	r3, ip
    5e22:	3b0c      	subs	r3, #12
    5e24:	681a      	ldr	r2, [r3, #0]
    5e26:	68fb      	ldr	r3, [r7, #12]
    5e28:	009b      	lsls	r3, r3, #2
    5e2a:	2110      	movs	r1, #16
    5e2c:	468c      	mov	ip, r1
    5e2e:	44bc      	add	ip, r7
    5e30:	4463      	add	r3, ip
    5e32:	3b0c      	subs	r3, #12
    5e34:	681b      	ldr	r3, [r3, #0]
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	b2db      	uxtb	r3, r3
    5e3a:	2101      	movs	r1, #1
    5e3c:	430b      	orrs	r3, r1
    5e3e:	b2db      	uxtb	r3, r3
    5e40:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5e42:	68fb      	ldr	r3, [r7, #12]
    5e44:	3301      	adds	r3, #1
    5e46:	60fb      	str	r3, [r7, #12]
    5e48:	68fb      	ldr	r3, [r7, #12]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d0e3      	beq.n	5e16 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    5e4e:	46c0      	nop			; (mov r8, r8)
    5e50:	4b17      	ldr	r3, [pc, #92]	; (5eb0 <_system_extint_init+0xd0>)
    5e52:	4798      	blx	r3
    5e54:	1e03      	subs	r3, r0, #0
    5e56:	d1fb      	bne.n	5e50 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5e58:	230b      	movs	r3, #11
    5e5a:	18fb      	adds	r3, r7, r3
    5e5c:	2200      	movs	r2, #0
    5e5e:	701a      	strb	r2, [r3, #0]
    5e60:	e00d      	b.n	5e7e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    5e62:	230b      	movs	r3, #11
    5e64:	18fb      	adds	r3, r7, r3
    5e66:	781a      	ldrb	r2, [r3, #0]
    5e68:	4b12      	ldr	r3, [pc, #72]	; (5eb4 <_system_extint_init+0xd4>)
    5e6a:	0092      	lsls	r2, r2, #2
    5e6c:	2100      	movs	r1, #0
    5e6e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5e70:	230b      	movs	r3, #11
    5e72:	18fb      	adds	r3, r7, r3
    5e74:	781a      	ldrb	r2, [r3, #0]
    5e76:	230b      	movs	r3, #11
    5e78:	18fb      	adds	r3, r7, r3
    5e7a:	3201      	adds	r2, #1
    5e7c:	701a      	strb	r2, [r3, #0]
    5e7e:	230b      	movs	r3, #11
    5e80:	18fb      	adds	r3, r7, r3
    5e82:	781b      	ldrb	r3, [r3, #0]
    5e84:	2b0f      	cmp	r3, #15
    5e86:	d9ec      	bls.n	5e62 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    5e88:	2004      	movs	r0, #4
    5e8a:	4b0b      	ldr	r3, [pc, #44]	; (5eb8 <_system_extint_init+0xd8>)
    5e8c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    5e8e:	4b0b      	ldr	r3, [pc, #44]	; (5ebc <_system_extint_init+0xdc>)
    5e90:	4798      	blx	r3
}
    5e92:	46c0      	nop			; (mov r8, r8)
    5e94:	46bd      	mov	sp, r7
    5e96:	b004      	add	sp, #16
    5e98:	bd80      	pop	{r7, pc}
    5e9a:	46c0      	nop			; (mov r8, r8)
    5e9c:	40001800 	.word	0x40001800
    5ea0:	00005c9d 	.word	0x00005c9d
    5ea4:	00005c85 	.word	0x00005c85
    5ea8:	0000c4e9 	.word	0x0000c4e9
    5eac:	0000c52d 	.word	0x0000c52d
    5eb0:	00005d99 	.word	0x00005d99
    5eb4:	20000598 	.word	0x20000598
    5eb8:	00005d21 	.word	0x00005d21
    5ebc:	00005ec1 	.word	0x00005ec1

00005ec0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    5ec0:	b580      	push	{r7, lr}
    5ec2:	b082      	sub	sp, #8
    5ec4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5ec6:	4b15      	ldr	r3, [pc, #84]	; (5f1c <_extint_enable+0x5c>)
    5ec8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5eca:	2300      	movs	r3, #0
    5ecc:	607b      	str	r3, [r7, #4]
    5ece:	e018      	b.n	5f02 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	009b      	lsls	r3, r3, #2
    5ed4:	2208      	movs	r2, #8
    5ed6:	4694      	mov	ip, r2
    5ed8:	44bc      	add	ip, r7
    5eda:	4463      	add	r3, ip
    5edc:	3b08      	subs	r3, #8
    5ede:	681a      	ldr	r2, [r3, #0]
    5ee0:	687b      	ldr	r3, [r7, #4]
    5ee2:	009b      	lsls	r3, r3, #2
    5ee4:	2108      	movs	r1, #8
    5ee6:	468c      	mov	ip, r1
    5ee8:	44bc      	add	ip, r7
    5eea:	4463      	add	r3, ip
    5eec:	3b08      	subs	r3, #8
    5eee:	681b      	ldr	r3, [r3, #0]
    5ef0:	781b      	ldrb	r3, [r3, #0]
    5ef2:	b2db      	uxtb	r3, r3
    5ef4:	2102      	movs	r1, #2
    5ef6:	430b      	orrs	r3, r1
    5ef8:	b2db      	uxtb	r3, r3
    5efa:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5efc:	687b      	ldr	r3, [r7, #4]
    5efe:	3301      	adds	r3, #1
    5f00:	607b      	str	r3, [r7, #4]
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	2b00      	cmp	r3, #0
    5f06:	d0e3      	beq.n	5ed0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    5f08:	46c0      	nop			; (mov r8, r8)
    5f0a:	4b05      	ldr	r3, [pc, #20]	; (5f20 <_extint_enable+0x60>)
    5f0c:	4798      	blx	r3
    5f0e:	1e03      	subs	r3, r0, #0
    5f10:	d1fb      	bne.n	5f0a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	46bd      	mov	sp, r7
    5f16:	b002      	add	sp, #8
    5f18:	bd80      	pop	{r7, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	40001800 	.word	0x40001800
    5f20:	00005d99 	.word	0x00005d99

00005f24 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    5f24:	b580      	push	{r7, lr}
    5f26:	b082      	sub	sp, #8
    5f28:	af00      	add	r7, sp, #0
    5f2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	2200      	movs	r2, #0
    5f30:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    5f32:	687b      	ldr	r3, [r7, #4]
    5f34:	2200      	movs	r2, #0
    5f36:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	2201      	movs	r2, #1
    5f3c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    5f3e:	687b      	ldr	r3, [r7, #4]
    5f40:	2201      	movs	r2, #1
    5f42:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	2200      	movs	r2, #0
    5f48:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    5f4a:	687b      	ldr	r3, [r7, #4]
    5f4c:	2202      	movs	r2, #2
    5f4e:	72da      	strb	r2, [r3, #11]
}
    5f50:	46c0      	nop			; (mov r8, r8)
    5f52:	46bd      	mov	sp, r7
    5f54:	b002      	add	sp, #8
    5f56:	bd80      	pop	{r7, pc}

00005f58 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    5f58:	b580      	push	{r7, lr}
    5f5a:	b086      	sub	sp, #24
    5f5c:	af00      	add	r7, sp, #0
    5f5e:	0002      	movs	r2, r0
    5f60:	6039      	str	r1, [r7, #0]
    5f62:	1dfb      	adds	r3, r7, #7
    5f64:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    5f66:	2308      	movs	r3, #8
    5f68:	18fb      	adds	r3, r7, r3
    5f6a:	0018      	movs	r0, r3
    5f6c:	4b36      	ldr	r3, [pc, #216]	; (6048 <extint_chan_set_config+0xf0>)
    5f6e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	685b      	ldr	r3, [r3, #4]
    5f74:	b2da      	uxtb	r2, r3
    5f76:	2308      	movs	r3, #8
    5f78:	18fb      	adds	r3, r7, r3
    5f7a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5f7c:	2308      	movs	r3, #8
    5f7e:	18fb      	adds	r3, r7, r3
    5f80:	2200      	movs	r2, #0
    5f82:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    5f84:	683b      	ldr	r3, [r7, #0]
    5f86:	7a1a      	ldrb	r2, [r3, #8]
    5f88:	2308      	movs	r3, #8
    5f8a:	18fb      	adds	r3, r7, r3
    5f8c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    5f8e:	683b      	ldr	r3, [r7, #0]
    5f90:	681b      	ldr	r3, [r3, #0]
    5f92:	b2db      	uxtb	r3, r3
    5f94:	2208      	movs	r2, #8
    5f96:	18ba      	adds	r2, r7, r2
    5f98:	0011      	movs	r1, r2
    5f9a:	0018      	movs	r0, r3
    5f9c:	4b2b      	ldr	r3, [pc, #172]	; (604c <extint_chan_set_config+0xf4>)
    5f9e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    5fa0:	1dfb      	adds	r3, r7, #7
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	0018      	movs	r0, r3
    5fa6:	4b2a      	ldr	r3, [pc, #168]	; (6050 <extint_chan_set_config+0xf8>)
    5fa8:	4798      	blx	r3
    5faa:	0003      	movs	r3, r0
    5fac:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    5fae:	1dfb      	adds	r3, r7, #7
    5fb0:	781b      	ldrb	r3, [r3, #0]
    5fb2:	2207      	movs	r2, #7
    5fb4:	4013      	ands	r3, r2
    5fb6:	009b      	lsls	r3, r3, #2
    5fb8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    5fba:	683b      	ldr	r3, [r7, #0]
    5fbc:	7adb      	ldrb	r3, [r3, #11]
    5fbe:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    5fc0:	683b      	ldr	r3, [r7, #0]
    5fc2:	7a9b      	ldrb	r3, [r3, #10]
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d003      	beq.n	5fd0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    5fc8:	697b      	ldr	r3, [r7, #20]
    5fca:	2208      	movs	r2, #8
    5fcc:	4313      	orrs	r3, r2
    5fce:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    5fd0:	1dfb      	adds	r3, r7, #7
    5fd2:	781b      	ldrb	r3, [r3, #0]
    5fd4:	08db      	lsrs	r3, r3, #3
    5fd6:	b2db      	uxtb	r3, r3
    5fd8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    5fda:	1dfb      	adds	r3, r7, #7
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	08db      	lsrs	r3, r3, #3
    5fe0:	b2db      	uxtb	r3, r3
    5fe2:	001a      	movs	r2, r3
    5fe4:	693b      	ldr	r3, [r7, #16]
    5fe6:	3206      	adds	r2, #6
    5fe8:	0092      	lsls	r2, r2, #2
    5fea:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    5fec:	210f      	movs	r1, #15
    5fee:	68fa      	ldr	r2, [r7, #12]
    5ff0:	4091      	lsls	r1, r2
    5ff2:	000a      	movs	r2, r1
    5ff4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    5ff6:	401a      	ands	r2, r3
			(new_config << config_pos);
    5ff8:	6979      	ldr	r1, [r7, #20]
    5ffa:	68fb      	ldr	r3, [r7, #12]
    5ffc:	4099      	lsls	r1, r3
    5ffe:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6000:	431a      	orrs	r2, r3
    6002:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6004:	693b      	ldr	r3, [r7, #16]
    6006:	1d82      	adds	r2, r0, #6
    6008:	0092      	lsls	r2, r2, #2
    600a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    600c:	683b      	ldr	r3, [r7, #0]
    600e:	7a5b      	ldrb	r3, [r3, #9]
    6010:	2b00      	cmp	r3, #0
    6012:	d00a      	beq.n	602a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    6014:	693b      	ldr	r3, [r7, #16]
    6016:	695a      	ldr	r2, [r3, #20]
    6018:	1dfb      	adds	r3, r7, #7
    601a:	781b      	ldrb	r3, [r3, #0]
    601c:	2101      	movs	r1, #1
    601e:	4099      	lsls	r1, r3
    6020:	000b      	movs	r3, r1
    6022:	431a      	orrs	r2, r3
    6024:	693b      	ldr	r3, [r7, #16]
    6026:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    6028:	e00a      	b.n	6040 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    602a:	693b      	ldr	r3, [r7, #16]
    602c:	695b      	ldr	r3, [r3, #20]
    602e:	1dfa      	adds	r2, r7, #7
    6030:	7812      	ldrb	r2, [r2, #0]
    6032:	2101      	movs	r1, #1
    6034:	4091      	lsls	r1, r2
    6036:	000a      	movs	r2, r1
    6038:	43d2      	mvns	r2, r2
    603a:	401a      	ands	r2, r3
    603c:	693b      	ldr	r3, [r7, #16]
    603e:	615a      	str	r2, [r3, #20]
}
    6040:	46c0      	nop			; (mov r8, r8)
    6042:	46bd      	mov	sp, r7
    6044:	b006      	add	sp, #24
    6046:	bd80      	pop	{r7, pc}
    6048:	00005cf9 	.word	0x00005cf9
    604c:	0000c7d5 	.word	0x0000c7d5
    6050:	00005d4d 	.word	0x00005d4d

00006054 <system_pinmux_get_config_defaults>:
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
    605a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    605c:	687b      	ldr	r3, [r7, #4]
    605e:	2280      	movs	r2, #128	; 0x80
    6060:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6062:	687b      	ldr	r3, [r7, #4]
    6064:	2200      	movs	r2, #0
    6066:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	2201      	movs	r2, #1
    606c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    606e:	687b      	ldr	r3, [r7, #4]
    6070:	2200      	movs	r2, #0
    6072:	70da      	strb	r2, [r3, #3]
}
    6074:	46c0      	nop			; (mov r8, r8)
    6076:	46bd      	mov	sp, r7
    6078:	b002      	add	sp, #8
    607a:	bd80      	pop	{r7, pc}

0000607c <system_pinmux_get_group_from_gpio_pin>:
{
    607c:	b580      	push	{r7, lr}
    607e:	b084      	sub	sp, #16
    6080:	af00      	add	r7, sp, #0
    6082:	0002      	movs	r2, r0
    6084:	1dfb      	adds	r3, r7, #7
    6086:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6088:	230f      	movs	r3, #15
    608a:	18fb      	adds	r3, r7, r3
    608c:	1dfa      	adds	r2, r7, #7
    608e:	7812      	ldrb	r2, [r2, #0]
    6090:	09d2      	lsrs	r2, r2, #7
    6092:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6094:	230e      	movs	r3, #14
    6096:	18fb      	adds	r3, r7, r3
    6098:	1dfa      	adds	r2, r7, #7
    609a:	7812      	ldrb	r2, [r2, #0]
    609c:	0952      	lsrs	r2, r2, #5
    609e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    60a0:	4b0d      	ldr	r3, [pc, #52]	; (60d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    60a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    60a4:	230f      	movs	r3, #15
    60a6:	18fb      	adds	r3, r7, r3
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d10f      	bne.n	60ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    60ae:	230f      	movs	r3, #15
    60b0:	18fb      	adds	r3, r7, r3
    60b2:	781b      	ldrb	r3, [r3, #0]
    60b4:	009b      	lsls	r3, r3, #2
    60b6:	2210      	movs	r2, #16
    60b8:	4694      	mov	ip, r2
    60ba:	44bc      	add	ip, r7
    60bc:	4463      	add	r3, ip
    60be:	3b08      	subs	r3, #8
    60c0:	681a      	ldr	r2, [r3, #0]
    60c2:	230e      	movs	r3, #14
    60c4:	18fb      	adds	r3, r7, r3
    60c6:	781b      	ldrb	r3, [r3, #0]
    60c8:	01db      	lsls	r3, r3, #7
    60ca:	18d3      	adds	r3, r2, r3
    60cc:	e000      	b.n	60d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    60ce:	2300      	movs	r3, #0
}
    60d0:	0018      	movs	r0, r3
    60d2:	46bd      	mov	sp, r7
    60d4:	b004      	add	sp, #16
    60d6:	bd80      	pop	{r7, pc}
    60d8:	41004400 	.word	0x41004400

000060dc <port_get_group_from_gpio_pin>:
{
    60dc:	b580      	push	{r7, lr}
    60de:	b082      	sub	sp, #8
    60e0:	af00      	add	r7, sp, #0
    60e2:	0002      	movs	r2, r0
    60e4:	1dfb      	adds	r3, r7, #7
    60e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    60e8:	1dfb      	adds	r3, r7, #7
    60ea:	781b      	ldrb	r3, [r3, #0]
    60ec:	0018      	movs	r0, r3
    60ee:	4b03      	ldr	r3, [pc, #12]	; (60fc <port_get_group_from_gpio_pin+0x20>)
    60f0:	4798      	blx	r3
    60f2:	0003      	movs	r3, r0
}
    60f4:	0018      	movs	r0, r3
    60f6:	46bd      	mov	sp, r7
    60f8:	b002      	add	sp, #8
    60fa:	bd80      	pop	{r7, pc}
    60fc:	0000607d 	.word	0x0000607d

00006100 <port_pin_set_output_level>:
{
    6100:	b580      	push	{r7, lr}
    6102:	b084      	sub	sp, #16
    6104:	af00      	add	r7, sp, #0
    6106:	0002      	movs	r2, r0
    6108:	1dfb      	adds	r3, r7, #7
    610a:	701a      	strb	r2, [r3, #0]
    610c:	1dbb      	adds	r3, r7, #6
    610e:	1c0a      	adds	r2, r1, #0
    6110:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6112:	1dfb      	adds	r3, r7, #7
    6114:	781b      	ldrb	r3, [r3, #0]
    6116:	0018      	movs	r0, r3
    6118:	4b0d      	ldr	r3, [pc, #52]	; (6150 <port_pin_set_output_level+0x50>)
    611a:	4798      	blx	r3
    611c:	0003      	movs	r3, r0
    611e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6120:	1dfb      	adds	r3, r7, #7
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	221f      	movs	r2, #31
    6126:	4013      	ands	r3, r2
    6128:	2201      	movs	r2, #1
    612a:	409a      	lsls	r2, r3
    612c:	0013      	movs	r3, r2
    612e:	60bb      	str	r3, [r7, #8]
	if (level) {
    6130:	1dbb      	adds	r3, r7, #6
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	2b00      	cmp	r3, #0
    6136:	d003      	beq.n	6140 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6138:	68fb      	ldr	r3, [r7, #12]
    613a:	68ba      	ldr	r2, [r7, #8]
    613c:	619a      	str	r2, [r3, #24]
}
    613e:	e002      	b.n	6146 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6140:	68fb      	ldr	r3, [r7, #12]
    6142:	68ba      	ldr	r2, [r7, #8]
    6144:	615a      	str	r2, [r3, #20]
}
    6146:	46c0      	nop			; (mov r8, r8)
    6148:	46bd      	mov	sp, r7
    614a:	b004      	add	sp, #16
    614c:	bd80      	pop	{r7, pc}
    614e:	46c0      	nop			; (mov r8, r8)
    6150:	000060dd 	.word	0x000060dd

00006154 <system_gclk_chan_get_config_defaults>:
{
    6154:	b580      	push	{r7, lr}
    6156:	b082      	sub	sp, #8
    6158:	af00      	add	r7, sp, #0
    615a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	2200      	movs	r2, #0
    6160:	701a      	strb	r2, [r3, #0]
}
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	46bd      	mov	sp, r7
    6166:	b002      	add	sp, #8
    6168:	bd80      	pop	{r7, pc}
	...

0000616c <system_apb_clock_set_mask>:
{
    616c:	b580      	push	{r7, lr}
    616e:	b082      	sub	sp, #8
    6170:	af00      	add	r7, sp, #0
    6172:	0002      	movs	r2, r0
    6174:	6039      	str	r1, [r7, #0]
    6176:	1dfb      	adds	r3, r7, #7
    6178:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    617a:	1dfb      	adds	r3, r7, #7
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	2b01      	cmp	r3, #1
    6180:	d00a      	beq.n	6198 <system_apb_clock_set_mask+0x2c>
    6182:	2b02      	cmp	r3, #2
    6184:	d00f      	beq.n	61a6 <system_apb_clock_set_mask+0x3a>
    6186:	2b00      	cmp	r3, #0
    6188:	d114      	bne.n	61b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    618a:	4b0e      	ldr	r3, [pc, #56]	; (61c4 <system_apb_clock_set_mask+0x58>)
    618c:	4a0d      	ldr	r2, [pc, #52]	; (61c4 <system_apb_clock_set_mask+0x58>)
    618e:	6991      	ldr	r1, [r2, #24]
    6190:	683a      	ldr	r2, [r7, #0]
    6192:	430a      	orrs	r2, r1
    6194:	619a      	str	r2, [r3, #24]
			break;
    6196:	e00f      	b.n	61b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6198:	4b0a      	ldr	r3, [pc, #40]	; (61c4 <system_apb_clock_set_mask+0x58>)
    619a:	4a0a      	ldr	r2, [pc, #40]	; (61c4 <system_apb_clock_set_mask+0x58>)
    619c:	69d1      	ldr	r1, [r2, #28]
    619e:	683a      	ldr	r2, [r7, #0]
    61a0:	430a      	orrs	r2, r1
    61a2:	61da      	str	r2, [r3, #28]
			break;
    61a4:	e008      	b.n	61b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    61a6:	4b07      	ldr	r3, [pc, #28]	; (61c4 <system_apb_clock_set_mask+0x58>)
    61a8:	4a06      	ldr	r2, [pc, #24]	; (61c4 <system_apb_clock_set_mask+0x58>)
    61aa:	6a11      	ldr	r1, [r2, #32]
    61ac:	683a      	ldr	r2, [r7, #0]
    61ae:	430a      	orrs	r2, r1
    61b0:	621a      	str	r2, [r3, #32]
			break;
    61b2:	e001      	b.n	61b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    61b4:	2317      	movs	r3, #23
    61b6:	e000      	b.n	61ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    61b8:	2300      	movs	r3, #0
}
    61ba:	0018      	movs	r0, r3
    61bc:	46bd      	mov	sp, r7
    61be:	b002      	add	sp, #8
    61c0:	bd80      	pop	{r7, pc}
    61c2:	46c0      	nop			; (mov r8, r8)
    61c4:	40000400 	.word	0x40000400

000061c8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    61c8:	b580      	push	{r7, lr}
    61ca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    61cc:	4b05      	ldr	r3, [pc, #20]	; (61e4 <system_is_debugger_present+0x1c>)
    61ce:	789b      	ldrb	r3, [r3, #2]
    61d0:	b2db      	uxtb	r3, r3
    61d2:	001a      	movs	r2, r3
    61d4:	2302      	movs	r3, #2
    61d6:	4013      	ands	r3, r2
    61d8:	1e5a      	subs	r2, r3, #1
    61da:	4193      	sbcs	r3, r2
    61dc:	b2db      	uxtb	r3, r3
}
    61de:	0018      	movs	r0, r3
    61e0:	46bd      	mov	sp, r7
    61e2:	bd80      	pop	{r7, pc}
    61e4:	41002000 	.word	0x41002000

000061e8 <spi_is_ready_to_write>:
{
    61e8:	b580      	push	{r7, lr}
    61ea:	b084      	sub	sp, #16
    61ec:	af00      	add	r7, sp, #0
    61ee:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	681b      	ldr	r3, [r3, #0]
    61f4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    61f6:	68fb      	ldr	r3, [r7, #12]
    61f8:	7e1b      	ldrb	r3, [r3, #24]
    61fa:	b2db      	uxtb	r3, r3
    61fc:	001a      	movs	r2, r3
    61fe:	2301      	movs	r3, #1
    6200:	4013      	ands	r3, r2
    6202:	1e5a      	subs	r2, r3, #1
    6204:	4193      	sbcs	r3, r2
    6206:	b2db      	uxtb	r3, r3
}
    6208:	0018      	movs	r0, r3
    620a:	46bd      	mov	sp, r7
    620c:	b004      	add	sp, #16
    620e:	bd80      	pop	{r7, pc}

00006210 <spi_is_ready_to_read>:
{
    6210:	b580      	push	{r7, lr}
    6212:	b084      	sub	sp, #16
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	681b      	ldr	r3, [r3, #0]
    621c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    621e:	68fb      	ldr	r3, [r7, #12]
    6220:	7e1b      	ldrb	r3, [r3, #24]
    6222:	b2db      	uxtb	r3, r3
    6224:	001a      	movs	r2, r3
    6226:	2304      	movs	r3, #4
    6228:	4013      	ands	r3, r2
    622a:	1e5a      	subs	r2, r3, #1
    622c:	4193      	sbcs	r3, r2
    622e:	b2db      	uxtb	r3, r3
}
    6230:	0018      	movs	r0, r3
    6232:	46bd      	mov	sp, r7
    6234:	b004      	add	sp, #16
    6236:	bd80      	pop	{r7, pc}

00006238 <spi_write>:
{
    6238:	b580      	push	{r7, lr}
    623a:	b084      	sub	sp, #16
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	000a      	movs	r2, r1
    6242:	1cbb      	adds	r3, r7, #2
    6244:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6246:	687b      	ldr	r3, [r7, #4]
    6248:	681b      	ldr	r3, [r3, #0]
    624a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	0018      	movs	r0, r3
    6250:	4b0a      	ldr	r3, [pc, #40]	; (627c <spi_write+0x44>)
    6252:	4798      	blx	r3
    6254:	0003      	movs	r3, r0
    6256:	001a      	movs	r2, r3
    6258:	2301      	movs	r3, #1
    625a:	4053      	eors	r3, r2
    625c:	b2db      	uxtb	r3, r3
    625e:	2b00      	cmp	r3, #0
    6260:	d001      	beq.n	6266 <spi_write+0x2e>
		return STATUS_BUSY;
    6262:	2305      	movs	r3, #5
    6264:	e006      	b.n	6274 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6266:	1cbb      	adds	r3, r7, #2
    6268:	881b      	ldrh	r3, [r3, #0]
    626a:	05db      	lsls	r3, r3, #23
    626c:	0dda      	lsrs	r2, r3, #23
    626e:	68fb      	ldr	r3, [r7, #12]
    6270:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    6272:	2300      	movs	r3, #0
}
    6274:	0018      	movs	r0, r3
    6276:	46bd      	mov	sp, r7
    6278:	b004      	add	sp, #16
    627a:	bd80      	pop	{r7, pc}
    627c:	000061e9 	.word	0x000061e9

00006280 <spi_read>:
{
    6280:	b580      	push	{r7, lr}
    6282:	b084      	sub	sp, #16
    6284:	af00      	add	r7, sp, #0
    6286:	6078      	str	r0, [r7, #4]
    6288:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	681b      	ldr	r3, [r3, #0]
    628e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	0018      	movs	r0, r3
    6294:	4b1b      	ldr	r3, [pc, #108]	; (6304 <spi_read+0x84>)
    6296:	4798      	blx	r3
    6298:	0003      	movs	r3, r0
    629a:	001a      	movs	r2, r3
    629c:	2301      	movs	r3, #1
    629e:	4053      	eors	r3, r2
    62a0:	b2db      	uxtb	r3, r3
    62a2:	2b00      	cmp	r3, #0
    62a4:	d001      	beq.n	62aa <spi_read+0x2a>
		return STATUS_ERR_IO;
    62a6:	2310      	movs	r3, #16
    62a8:	e027      	b.n	62fa <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    62aa:	230f      	movs	r3, #15
    62ac:	18fb      	adds	r3, r7, r3
    62ae:	2200      	movs	r2, #0
    62b0:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    62b2:	68bb      	ldr	r3, [r7, #8]
    62b4:	8b5b      	ldrh	r3, [r3, #26]
    62b6:	b29b      	uxth	r3, r3
    62b8:	001a      	movs	r2, r3
    62ba:	2304      	movs	r3, #4
    62bc:	4013      	ands	r3, r2
    62be:	d006      	beq.n	62ce <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    62c0:	230f      	movs	r3, #15
    62c2:	18fb      	adds	r3, r7, r3
    62c4:	221e      	movs	r2, #30
    62c6:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    62c8:	68bb      	ldr	r3, [r7, #8]
    62ca:	2204      	movs	r2, #4
    62cc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	799b      	ldrb	r3, [r3, #6]
    62d2:	2b01      	cmp	r3, #1
    62d4:	d108      	bne.n	62e8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    62d6:	68bb      	ldr	r3, [r7, #8]
    62d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62da:	b29b      	uxth	r3, r3
    62dc:	05db      	lsls	r3, r3, #23
    62de:	0ddb      	lsrs	r3, r3, #23
    62e0:	b29a      	uxth	r2, r3
    62e2:	683b      	ldr	r3, [r7, #0]
    62e4:	801a      	strh	r2, [r3, #0]
    62e6:	e005      	b.n	62f4 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    62e8:	68bb      	ldr	r3, [r7, #8]
    62ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62ec:	b2db      	uxtb	r3, r3
    62ee:	b29a      	uxth	r2, r3
    62f0:	683b      	ldr	r3, [r7, #0]
    62f2:	801a      	strh	r2, [r3, #0]
	return retval;
    62f4:	230f      	movs	r3, #15
    62f6:	18fb      	adds	r3, r7, r3
    62f8:	781b      	ldrb	r3, [r3, #0]
}
    62fa:	0018      	movs	r0, r3
    62fc:	46bd      	mov	sp, r7
    62fe:	b004      	add	sp, #16
    6300:	bd80      	pop	{r7, pc}
    6302:	46c0      	nop			; (mov r8, r8)
    6304:	00006211 	.word	0x00006211

00006308 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    6308:	b590      	push	{r4, r7, lr}
    630a:	b093      	sub	sp, #76	; 0x4c
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
    6310:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	681b      	ldr	r3, [r3, #0]
    6316:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    631e:	231c      	movs	r3, #28
    6320:	18fb      	adds	r3, r7, r3
    6322:	0018      	movs	r0, r3
    6324:	4b85      	ldr	r3, [pc, #532]	; (653c <_spi_set_config+0x234>)
    6326:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6328:	231c      	movs	r3, #28
    632a:	18fb      	adds	r3, r7, r3
    632c:	2200      	movs	r2, #0
    632e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    6330:	683b      	ldr	r3, [r7, #0]
    6332:	781b      	ldrb	r3, [r3, #0]
    6334:	2b00      	cmp	r3, #0
    6336:	d103      	bne.n	6340 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6338:	231c      	movs	r3, #28
    633a:	18fb      	adds	r3, r7, r3
    633c:	2200      	movs	r2, #0
    633e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6340:	683b      	ldr	r3, [r7, #0]
    6342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    6344:	230c      	movs	r3, #12
    6346:	18fb      	adds	r3, r7, r3
    6348:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    634a:	683b      	ldr	r3, [r7, #0]
    634c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    634e:	230c      	movs	r3, #12
    6350:	18fb      	adds	r3, r7, r3
    6352:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6354:	683b      	ldr	r3, [r7, #0]
    6356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    6358:	230c      	movs	r3, #12
    635a:	18fb      	adds	r3, r7, r3
    635c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    635e:	683b      	ldr	r3, [r7, #0]
    6360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6362:	230c      	movs	r3, #12
    6364:	18fb      	adds	r3, r7, r3
    6366:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6368:	2347      	movs	r3, #71	; 0x47
    636a:	18fb      	adds	r3, r7, r3
    636c:	2200      	movs	r2, #0
    636e:	701a      	strb	r2, [r3, #0]
    6370:	e02c      	b.n	63cc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6372:	2347      	movs	r3, #71	; 0x47
    6374:	18fb      	adds	r3, r7, r3
    6376:	781a      	ldrb	r2, [r3, #0]
    6378:	230c      	movs	r3, #12
    637a:	18fb      	adds	r3, r7, r3
    637c:	0092      	lsls	r2, r2, #2
    637e:	58d3      	ldr	r3, [r2, r3]
    6380:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6384:	2b00      	cmp	r3, #0
    6386:	d109      	bne.n	639c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6388:	2347      	movs	r3, #71	; 0x47
    638a:	18fb      	adds	r3, r7, r3
    638c:	781a      	ldrb	r2, [r3, #0]
    638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6390:	0011      	movs	r1, r2
    6392:	0018      	movs	r0, r3
    6394:	4b6a      	ldr	r3, [pc, #424]	; (6540 <_spi_set_config+0x238>)
    6396:	4798      	blx	r3
    6398:	0003      	movs	r3, r0
    639a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    639e:	3301      	adds	r3, #1
    63a0:	d00d      	beq.n	63be <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    63a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63a4:	b2da      	uxtb	r2, r3
    63a6:	231c      	movs	r3, #28
    63a8:	18fb      	adds	r3, r7, r3
    63aa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    63ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63ae:	0c1b      	lsrs	r3, r3, #16
    63b0:	b2db      	uxtb	r3, r3
    63b2:	221c      	movs	r2, #28
    63b4:	18ba      	adds	r2, r7, r2
    63b6:	0011      	movs	r1, r2
    63b8:	0018      	movs	r0, r3
    63ba:	4b62      	ldr	r3, [pc, #392]	; (6544 <_spi_set_config+0x23c>)
    63bc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    63be:	2347      	movs	r3, #71	; 0x47
    63c0:	18fb      	adds	r3, r7, r3
    63c2:	781a      	ldrb	r2, [r3, #0]
    63c4:	2347      	movs	r3, #71	; 0x47
    63c6:	18fb      	adds	r3, r7, r3
    63c8:	3201      	adds	r2, #1
    63ca:	701a      	strb	r2, [r3, #0]
    63cc:	2347      	movs	r3, #71	; 0x47
    63ce:	18fb      	adds	r3, r7, r3
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	2b03      	cmp	r3, #3
    63d4:	d9cd      	bls.n	6372 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    63d6:	683b      	ldr	r3, [r7, #0]
    63d8:	781a      	ldrb	r2, [r3, #0]
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    63de:	683b      	ldr	r3, [r7, #0]
    63e0:	7c1a      	ldrb	r2, [r3, #16]
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    63e6:	683b      	ldr	r3, [r7, #0]
    63e8:	7c9a      	ldrb	r2, [r3, #18]
    63ea:	687b      	ldr	r3, [r7, #4]
    63ec:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    63ee:	683b      	ldr	r3, [r7, #0]
    63f0:	7d1a      	ldrb	r2, [r3, #20]
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    63f6:	230a      	movs	r3, #10
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	2200      	movs	r2, #0
    63fc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    63fe:	2300      	movs	r3, #0
    6400:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    6402:	2300      	movs	r3, #0
    6404:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    6406:	683b      	ldr	r3, [r7, #0]
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	2b01      	cmp	r3, #1
    640c:	d129      	bne.n	6462 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	681b      	ldr	r3, [r3, #0]
    6412:	0018      	movs	r0, r3
    6414:	4b4c      	ldr	r3, [pc, #304]	; (6548 <_spi_set_config+0x240>)
    6416:	4798      	blx	r3
    6418:	0003      	movs	r3, r0
    641a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    641e:	3314      	adds	r3, #20
    6420:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6422:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6424:	b2db      	uxtb	r3, r3
    6426:	0018      	movs	r0, r3
    6428:	4b48      	ldr	r3, [pc, #288]	; (654c <_spi_set_config+0x244>)
    642a:	4798      	blx	r3
    642c:	0003      	movs	r3, r0
    642e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    6430:	683b      	ldr	r3, [r7, #0]
    6432:	699b      	ldr	r3, [r3, #24]
    6434:	2223      	movs	r2, #35	; 0x23
    6436:	18bc      	adds	r4, r7, r2
    6438:	220a      	movs	r2, #10
    643a:	18ba      	adds	r2, r7, r2
    643c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    643e:	0018      	movs	r0, r3
    6440:	4b43      	ldr	r3, [pc, #268]	; (6550 <_spi_set_config+0x248>)
    6442:	4798      	blx	r3
    6444:	0003      	movs	r3, r0
    6446:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    6448:	2323      	movs	r3, #35	; 0x23
    644a:	18fb      	adds	r3, r7, r3
    644c:	781b      	ldrb	r3, [r3, #0]
    644e:	2b00      	cmp	r3, #0
    6450:	d001      	beq.n	6456 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    6452:	2317      	movs	r3, #23
    6454:	e06d      	b.n	6532 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    6456:	230a      	movs	r3, #10
    6458:	18fb      	adds	r3, r7, r3
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	b2da      	uxtb	r2, r3
    645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6460:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    6462:	683b      	ldr	r3, [r7, #0]
    6464:	781b      	ldrb	r3, [r3, #0]
    6466:	2b00      	cmp	r3, #0
    6468:	d11a      	bne.n	64a0 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    646a:	683b      	ldr	r3, [r7, #0]
    646c:	699b      	ldr	r3, [r3, #24]
    646e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    6470:	683b      	ldr	r3, [r7, #0]
    6472:	8b9b      	ldrh	r3, [r3, #28]
    6474:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    6476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    647a:	683a      	ldr	r2, [r7, #0]
    647c:	7f92      	ldrb	r2, [r2, #30]
    647e:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    6480:	683a      	ldr	r2, [r7, #0]
    6482:	7fd2      	ldrb	r2, [r2, #31]
    6484:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    6486:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    6488:	431a      	orrs	r2, r3
    648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    648c:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    648e:	683b      	ldr	r3, [r7, #0]
    6490:	2220      	movs	r2, #32
    6492:	5c9b      	ldrb	r3, [r3, r2]
    6494:	2b00      	cmp	r3, #0
    6496:	d003      	beq.n	64a0 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    6498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    649a:	2240      	movs	r2, #64	; 0x40
    649c:	4313      	orrs	r3, r2
    649e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    64a0:	683b      	ldr	r3, [r7, #0]
    64a2:	685b      	ldr	r3, [r3, #4]
    64a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    64a6:	4313      	orrs	r3, r2
    64a8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    64aa:	683b      	ldr	r3, [r7, #0]
    64ac:	689b      	ldr	r3, [r3, #8]
    64ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    64b0:	4313      	orrs	r3, r2
    64b2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    64b4:	683b      	ldr	r3, [r7, #0]
    64b6:	68db      	ldr	r3, [r3, #12]
    64b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    64ba:	4313      	orrs	r3, r2
    64bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    64be:	683b      	ldr	r3, [r7, #0]
    64c0:	7c1b      	ldrb	r3, [r3, #16]
    64c2:	001a      	movs	r2, r3
    64c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    64c6:	4313      	orrs	r3, r2
    64c8:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    64ca:	683b      	ldr	r3, [r7, #0]
    64cc:	7c5b      	ldrb	r3, [r3, #17]
    64ce:	2b00      	cmp	r3, #0
    64d0:	d103      	bne.n	64da <_spi_set_config+0x1d2>
    64d2:	4b20      	ldr	r3, [pc, #128]	; (6554 <_spi_set_config+0x24c>)
    64d4:	4798      	blx	r3
    64d6:	1e03      	subs	r3, r0, #0
    64d8:	d003      	beq.n	64e2 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    64da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    64dc:	2280      	movs	r2, #128	; 0x80
    64de:	4313      	orrs	r3, r2
    64e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    64e2:	683b      	ldr	r3, [r7, #0]
    64e4:	7c9b      	ldrb	r3, [r3, #18]
    64e6:	2b00      	cmp	r3, #0
    64e8:	d004      	beq.n	64f4 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    64ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    64ec:	2280      	movs	r2, #128	; 0x80
    64ee:	0292      	lsls	r2, r2, #10
    64f0:	4313      	orrs	r3, r2
    64f2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    64f4:	683b      	ldr	r3, [r7, #0]
    64f6:	7cdb      	ldrb	r3, [r3, #19]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d004      	beq.n	6506 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    64fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    64fe:	2280      	movs	r2, #128	; 0x80
    6500:	0092      	lsls	r2, r2, #2
    6502:	4313      	orrs	r3, r2
    6504:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    6506:	683b      	ldr	r3, [r7, #0]
    6508:	7d1b      	ldrb	r3, [r3, #20]
    650a:	2b00      	cmp	r3, #0
    650c:	d004      	beq.n	6518 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6510:	2280      	movs	r2, #128	; 0x80
    6512:	0192      	lsls	r2, r2, #6
    6514:	4313      	orrs	r3, r2
    6516:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    6518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    651a:	681a      	ldr	r2, [r3, #0]
    651c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    651e:	431a      	orrs	r2, r3
    6520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6522:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    6524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6526:	685a      	ldr	r2, [r3, #4]
    6528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    652a:	431a      	orrs	r2, r3
    652c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    652e:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    6530:	2300      	movs	r3, #0
}
    6532:	0018      	movs	r0, r3
    6534:	46bd      	mov	sp, r7
    6536:	b013      	add	sp, #76	; 0x4c
    6538:	bd90      	pop	{r4, r7, pc}
    653a:	46c0      	nop			; (mov r8, r8)
    653c:	00006055 	.word	0x00006055
    6540:	0000a701 	.word	0x0000a701
    6544:	0000c7d5 	.word	0x0000c7d5
    6548:	0000a8bd 	.word	0x0000a8bd
    654c:	0000c60d 	.word	0x0000c60d
    6550:	0000a437 	.word	0x0000a437
    6554:	000061c9 	.word	0x000061c9

00006558 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6558:	b590      	push	{r4, r7, lr}
    655a:	b08b      	sub	sp, #44	; 0x2c
    655c:	af00      	add	r7, sp, #0
    655e:	60f8      	str	r0, [r7, #12]
    6560:	60b9      	str	r1, [r7, #8]
    6562:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6564:	68fb      	ldr	r3, [r7, #12]
    6566:	68ba      	ldr	r2, [r7, #8]
    6568:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    656a:	68fb      	ldr	r3, [r7, #12]
    656c:	681b      	ldr	r3, [r3, #0]
    656e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6570:	6a3b      	ldr	r3, [r7, #32]
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	2202      	movs	r2, #2
    6576:	4013      	ands	r3, r2
    6578:	d001      	beq.n	657e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    657a:	231c      	movs	r3, #28
    657c:	e0a6      	b.n	66cc <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    657e:	6a3b      	ldr	r3, [r7, #32]
    6580:	681b      	ldr	r3, [r3, #0]
    6582:	2201      	movs	r2, #1
    6584:	4013      	ands	r3, r2
    6586:	d001      	beq.n	658c <spi_init+0x34>
		return STATUS_BUSY;
    6588:	2305      	movs	r3, #5
    658a:	e09f      	b.n	66cc <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    658c:	68fb      	ldr	r3, [r7, #12]
    658e:	681b      	ldr	r3, [r3, #0]
    6590:	0018      	movs	r0, r3
    6592:	4b50      	ldr	r3, [pc, #320]	; (66d4 <spi_init+0x17c>)
    6594:	4798      	blx	r3
    6596:	0003      	movs	r3, r0
    6598:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    659a:	69fb      	ldr	r3, [r7, #28]
    659c:	3302      	adds	r3, #2
    659e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    65a0:	69fb      	ldr	r3, [r7, #28]
    65a2:	3314      	adds	r3, #20
    65a4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    65a6:	2201      	movs	r2, #1
    65a8:	69bb      	ldr	r3, [r7, #24]
    65aa:	409a      	lsls	r2, r3
    65ac:	0013      	movs	r3, r2
    65ae:	0019      	movs	r1, r3
    65b0:	2002      	movs	r0, #2
    65b2:	4b49      	ldr	r3, [pc, #292]	; (66d8 <spi_init+0x180>)
    65b4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    65b6:	2310      	movs	r3, #16
    65b8:	18fb      	adds	r3, r7, r3
    65ba:	0018      	movs	r0, r3
    65bc:	4b47      	ldr	r3, [pc, #284]	; (66dc <spi_init+0x184>)
    65be:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	2224      	movs	r2, #36	; 0x24
    65c4:	5c9a      	ldrb	r2, [r3, r2]
    65c6:	2310      	movs	r3, #16
    65c8:	18fb      	adds	r3, r7, r3
    65ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    65cc:	697b      	ldr	r3, [r7, #20]
    65ce:	b2db      	uxtb	r3, r3
    65d0:	2210      	movs	r2, #16
    65d2:	18ba      	adds	r2, r7, r2
    65d4:	0011      	movs	r1, r2
    65d6:	0018      	movs	r0, r3
    65d8:	4b41      	ldr	r3, [pc, #260]	; (66e0 <spi_init+0x188>)
    65da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    65dc:	697b      	ldr	r3, [r7, #20]
    65de:	b2db      	uxtb	r3, r3
    65e0:	0018      	movs	r0, r3
    65e2:	4b40      	ldr	r3, [pc, #256]	; (66e4 <spi_init+0x18c>)
    65e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	2224      	movs	r2, #36	; 0x24
    65ea:	5c9b      	ldrb	r3, [r3, r2]
    65ec:	2100      	movs	r1, #0
    65ee:	0018      	movs	r0, r3
    65f0:	4b3d      	ldr	r3, [pc, #244]	; (66e8 <spi_init+0x190>)
    65f2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    65f4:	687b      	ldr	r3, [r7, #4]
    65f6:	781b      	ldrb	r3, [r3, #0]
    65f8:	2b01      	cmp	r3, #1
    65fa:	d105      	bne.n	6608 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    65fc:	6a3b      	ldr	r3, [r7, #32]
    65fe:	681b      	ldr	r3, [r3, #0]
    6600:	220c      	movs	r2, #12
    6602:	431a      	orrs	r2, r3
    6604:	6a3b      	ldr	r3, [r7, #32]
    6606:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	781b      	ldrb	r3, [r3, #0]
    660c:	2b00      	cmp	r3, #0
    660e:	d105      	bne.n	661c <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    6610:	6a3b      	ldr	r3, [r7, #32]
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	2208      	movs	r2, #8
    6616:	431a      	orrs	r2, r3
    6618:	6a3b      	ldr	r3, [r7, #32]
    661a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    661c:	2327      	movs	r3, #39	; 0x27
    661e:	18fb      	adds	r3, r7, r3
    6620:	2200      	movs	r2, #0
    6622:	701a      	strb	r2, [r3, #0]
    6624:	e010      	b.n	6648 <spi_init+0xf0>
		module->callback[i]        = NULL;
    6626:	2327      	movs	r3, #39	; 0x27
    6628:	18fb      	adds	r3, r7, r3
    662a:	781b      	ldrb	r3, [r3, #0]
    662c:	68fa      	ldr	r2, [r7, #12]
    662e:	3302      	adds	r3, #2
    6630:	009b      	lsls	r3, r3, #2
    6632:	18d3      	adds	r3, r2, r3
    6634:	3304      	adds	r3, #4
    6636:	2200      	movs	r2, #0
    6638:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    663a:	2327      	movs	r3, #39	; 0x27
    663c:	18fb      	adds	r3, r7, r3
    663e:	781a      	ldrb	r2, [r3, #0]
    6640:	2327      	movs	r3, #39	; 0x27
    6642:	18fb      	adds	r3, r7, r3
    6644:	3201      	adds	r2, #1
    6646:	701a      	strb	r2, [r3, #0]
    6648:	2327      	movs	r3, #39	; 0x27
    664a:	18fb      	adds	r3, r7, r3
    664c:	781b      	ldrb	r3, [r3, #0]
    664e:	2b06      	cmp	r3, #6
    6650:	d9e9      	bls.n	6626 <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    6652:	68fb      	ldr	r3, [r7, #12]
    6654:	2200      	movs	r2, #0
    6656:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    6658:	68fb      	ldr	r3, [r7, #12]
    665a:	2200      	movs	r2, #0
    665c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    665e:	68fb      	ldr	r3, [r7, #12]
    6660:	2200      	movs	r2, #0
    6662:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    6664:	68fb      	ldr	r3, [r7, #12]
    6666:	2200      	movs	r2, #0
    6668:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    666a:	68fb      	ldr	r3, [r7, #12]
    666c:	2236      	movs	r2, #54	; 0x36
    666e:	2100      	movs	r1, #0
    6670:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    6672:	68fb      	ldr	r3, [r7, #12]
    6674:	2237      	movs	r2, #55	; 0x37
    6676:	2100      	movs	r1, #0
    6678:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    667a:	68fb      	ldr	r3, [r7, #12]
    667c:	2238      	movs	r2, #56	; 0x38
    667e:	2100      	movs	r1, #0
    6680:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    6682:	68fb      	ldr	r3, [r7, #12]
    6684:	2203      	movs	r2, #3
    6686:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    6688:	68fb      	ldr	r3, [r7, #12]
    668a:	2200      	movs	r2, #0
    668c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    668e:	68fb      	ldr	r3, [r7, #12]
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	2213      	movs	r2, #19
    6694:	18bc      	adds	r4, r7, r2
    6696:	0018      	movs	r0, r3
    6698:	4b0e      	ldr	r3, [pc, #56]	; (66d4 <spi_init+0x17c>)
    669a:	4798      	blx	r3
    669c:	0003      	movs	r3, r0
    669e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    66a0:	4a12      	ldr	r2, [pc, #72]	; (66ec <spi_init+0x194>)
    66a2:	2313      	movs	r3, #19
    66a4:	18fb      	adds	r3, r7, r3
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	0011      	movs	r1, r2
    66aa:	0018      	movs	r0, r3
    66ac:	4b10      	ldr	r3, [pc, #64]	; (66f0 <spi_init+0x198>)
    66ae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    66b0:	2313      	movs	r3, #19
    66b2:	18fb      	adds	r3, r7, r3
    66b4:	781a      	ldrb	r2, [r3, #0]
    66b6:	4b0f      	ldr	r3, [pc, #60]	; (66f4 <spi_init+0x19c>)
    66b8:	0092      	lsls	r2, r2, #2
    66ba:	68f9      	ldr	r1, [r7, #12]
    66bc:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    66be:	687a      	ldr	r2, [r7, #4]
    66c0:	68fb      	ldr	r3, [r7, #12]
    66c2:	0011      	movs	r1, r2
    66c4:	0018      	movs	r0, r3
    66c6:	4b0c      	ldr	r3, [pc, #48]	; (66f8 <spi_init+0x1a0>)
    66c8:	4798      	blx	r3
    66ca:	0003      	movs	r3, r0
}
    66cc:	0018      	movs	r0, r3
    66ce:	46bd      	mov	sp, r7
    66d0:	b00b      	add	sp, #44	; 0x2c
    66d2:	bd90      	pop	{r4, r7, pc}
    66d4:	0000a8bd 	.word	0x0000a8bd
    66d8:	0000616d 	.word	0x0000616d
    66dc:	00006155 	.word	0x00006155
    66e0:	0000c4e9 	.word	0x0000c4e9
    66e4:	0000c52d 	.word	0x0000c52d
    66e8:	0000a675 	.word	0x0000a675
    66ec:	00006945 	.word	0x00006945
    66f0:	0000b505 	.word	0x0000b505
    66f4:	20000764 	.word	0x20000764
    66f8:	00006309 	.word	0x00006309

000066fc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    66fc:	b580      	push	{r7, lr}
    66fe:	b086      	sub	sp, #24
    6700:	af00      	add	r7, sp, #0
    6702:	60f8      	str	r0, [r7, #12]
    6704:	60b9      	str	r1, [r7, #8]
    6706:	1dfb      	adds	r3, r7, #7
    6708:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    670a:	68fb      	ldr	r3, [r7, #12]
    670c:	795b      	ldrb	r3, [r3, #5]
    670e:	2b01      	cmp	r3, #1
    6710:	d001      	beq.n	6716 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    6712:	2315      	movs	r3, #21
    6714:	e05c      	b.n	67d0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    6716:	68fb      	ldr	r3, [r7, #12]
    6718:	7a1b      	ldrb	r3, [r3, #8]
    671a:	2201      	movs	r2, #1
    671c:	4053      	eors	r3, r2
    671e:	b2db      	uxtb	r3, r3
    6720:	2b00      	cmp	r3, #0
    6722:	d054      	beq.n	67ce <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    6724:	1dfb      	adds	r3, r7, #7
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	2b00      	cmp	r3, #0
    672a:	d04a      	beq.n	67c2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    672c:	68bb      	ldr	r3, [r7, #8]
    672e:	785b      	ldrb	r3, [r3, #1]
    6730:	2b00      	cmp	r3, #0
    6732:	d03f      	beq.n	67b4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    6734:	68fb      	ldr	r3, [r7, #12]
    6736:	0018      	movs	r0, r3
    6738:	4b27      	ldr	r3, [pc, #156]	; (67d8 <spi_select_slave+0xdc>)
    673a:	4798      	blx	r3
    673c:	0003      	movs	r3, r0
    673e:	001a      	movs	r2, r3
    6740:	2301      	movs	r3, #1
    6742:	4053      	eors	r3, r2
    6744:	b2db      	uxtb	r3, r3
    6746:	2b00      	cmp	r3, #0
    6748:	d007      	beq.n	675a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    674a:	68bb      	ldr	r3, [r7, #8]
    674c:	781b      	ldrb	r3, [r3, #0]
    674e:	2101      	movs	r1, #1
    6750:	0018      	movs	r0, r3
    6752:	4b22      	ldr	r3, [pc, #136]	; (67dc <spi_select_slave+0xe0>)
    6754:	4798      	blx	r3
					return STATUS_BUSY;
    6756:	2305      	movs	r3, #5
    6758:	e03a      	b.n	67d0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    675a:	68bb      	ldr	r3, [r7, #8]
    675c:	781b      	ldrb	r3, [r3, #0]
    675e:	2100      	movs	r1, #0
    6760:	0018      	movs	r0, r3
    6762:	4b1e      	ldr	r3, [pc, #120]	; (67dc <spi_select_slave+0xe0>)
    6764:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    6766:	68bb      	ldr	r3, [r7, #8]
    6768:	789b      	ldrb	r3, [r3, #2]
    676a:	b29a      	uxth	r2, r3
    676c:	68fb      	ldr	r3, [r7, #12]
    676e:	0011      	movs	r1, r2
    6770:	0018      	movs	r0, r3
    6772:	4b1b      	ldr	r3, [pc, #108]	; (67e0 <spi_select_slave+0xe4>)
    6774:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    6776:	68fb      	ldr	r3, [r7, #12]
    6778:	79db      	ldrb	r3, [r3, #7]
    677a:	2201      	movs	r2, #1
    677c:	4053      	eors	r3, r2
    677e:	b2db      	uxtb	r3, r3
    6780:	2b00      	cmp	r3, #0
    6782:	d024      	beq.n	67ce <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    6784:	46c0      	nop			; (mov r8, r8)
    6786:	68fb      	ldr	r3, [r7, #12]
    6788:	0018      	movs	r0, r3
    678a:	4b16      	ldr	r3, [pc, #88]	; (67e4 <spi_select_slave+0xe8>)
    678c:	4798      	blx	r3
    678e:	0003      	movs	r3, r0
    6790:	001a      	movs	r2, r3
    6792:	2301      	movs	r3, #1
    6794:	4053      	eors	r3, r2
    6796:	b2db      	uxtb	r3, r3
    6798:	2b00      	cmp	r3, #0
    679a:	d1f4      	bne.n	6786 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    679c:	2316      	movs	r3, #22
    679e:	18fb      	adds	r3, r7, r3
    67a0:	2200      	movs	r2, #0
    67a2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    67a4:	2316      	movs	r3, #22
    67a6:	18fa      	adds	r2, r7, r3
    67a8:	68fb      	ldr	r3, [r7, #12]
    67aa:	0011      	movs	r1, r2
    67ac:	0018      	movs	r0, r3
    67ae:	4b0e      	ldr	r3, [pc, #56]	; (67e8 <spi_select_slave+0xec>)
    67b0:	4798      	blx	r3
    67b2:	e00c      	b.n	67ce <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    67b4:	68bb      	ldr	r3, [r7, #8]
    67b6:	781b      	ldrb	r3, [r3, #0]
    67b8:	2100      	movs	r1, #0
    67ba:	0018      	movs	r0, r3
    67bc:	4b07      	ldr	r3, [pc, #28]	; (67dc <spi_select_slave+0xe0>)
    67be:	4798      	blx	r3
    67c0:	e005      	b.n	67ce <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    67c2:	68bb      	ldr	r3, [r7, #8]
    67c4:	781b      	ldrb	r3, [r3, #0]
    67c6:	2101      	movs	r1, #1
    67c8:	0018      	movs	r0, r3
    67ca:	4b04      	ldr	r3, [pc, #16]	; (67dc <spi_select_slave+0xe0>)
    67cc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    67ce:	2300      	movs	r3, #0
}
    67d0:	0018      	movs	r0, r3
    67d2:	46bd      	mov	sp, r7
    67d4:	b006      	add	sp, #24
    67d6:	bd80      	pop	{r7, pc}
    67d8:	000061e9 	.word	0x000061e9
    67dc:	00006101 	.word	0x00006101
    67e0:	00006239 	.word	0x00006239
    67e4:	00006211 	.word	0x00006211
    67e8:	00006281 	.word	0x00006281

000067ec <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    67ec:	b580      	push	{r7, lr}
    67ee:	b084      	sub	sp, #16
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    67f4:	687b      	ldr	r3, [r7, #4]
    67f6:	681b      	ldr	r3, [r3, #0]
    67f8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    67fa:	687b      	ldr	r3, [r7, #4]
    67fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	b2da      	uxtb	r2, r3
    6802:	230e      	movs	r3, #14
    6804:	18fb      	adds	r3, r7, r3
    6806:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    680c:	1c5a      	adds	r2, r3, #1
    680e:	687b      	ldr	r3, [r7, #4]
    6810:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6812:	687b      	ldr	r3, [r7, #4]
    6814:	799b      	ldrb	r3, [r3, #6]
    6816:	2b01      	cmp	r3, #1
    6818:	d113      	bne.n	6842 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    681e:	781b      	ldrb	r3, [r3, #0]
    6820:	b2db      	uxtb	r3, r3
    6822:	021b      	lsls	r3, r3, #8
    6824:	b21a      	sxth	r2, r3
    6826:	230e      	movs	r3, #14
    6828:	18fb      	adds	r3, r7, r3
    682a:	2100      	movs	r1, #0
    682c:	5e5b      	ldrsh	r3, [r3, r1]
    682e:	4313      	orrs	r3, r2
    6830:	b21a      	sxth	r2, r3
    6832:	230e      	movs	r3, #14
    6834:	18fb      	adds	r3, r7, r3
    6836:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    683c:	1c5a      	adds	r2, r3, #1
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    6842:	230e      	movs	r3, #14
    6844:	18fb      	adds	r3, r7, r3
    6846:	881b      	ldrh	r3, [r3, #0]
    6848:	05db      	lsls	r3, r3, #23
    684a:	0dda      	lsrs	r2, r3, #23
    684c:	68bb      	ldr	r3, [r7, #8]
    684e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    6854:	b29b      	uxth	r3, r3
    6856:	3b01      	subs	r3, #1
    6858:	b29a      	uxth	r2, r3
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    685e:	46c0      	nop			; (mov r8, r8)
    6860:	46bd      	mov	sp, r7
    6862:	b004      	add	sp, #16
    6864:	bd80      	pop	{r7, pc}
	...

00006868 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    6868:	b580      	push	{r7, lr}
    686a:	b084      	sub	sp, #16
    686c:	af00      	add	r7, sp, #0
    686e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6870:	687b      	ldr	r3, [r7, #4]
    6872:	681b      	ldr	r3, [r3, #0]
    6874:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    6876:	4b08      	ldr	r3, [pc, #32]	; (6898 <_spi_write_dummy+0x30>)
    6878:	881b      	ldrh	r3, [r3, #0]
    687a:	001a      	movs	r2, r3
    687c:	68fb      	ldr	r3, [r7, #12]
    687e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    6884:	b29b      	uxth	r3, r3
    6886:	3b01      	subs	r3, #1
    6888:	b29a      	uxth	r2, r3
    688a:	687b      	ldr	r3, [r7, #4]
    688c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    688e:	46c0      	nop			; (mov r8, r8)
    6890:	46bd      	mov	sp, r7
    6892:	b004      	add	sp, #16
    6894:	bd80      	pop	{r7, pc}
    6896:	46c0      	nop			; (mov r8, r8)
    6898:	200005d8 	.word	0x200005d8

0000689c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    689c:	b580      	push	{r7, lr}
    689e:	b084      	sub	sp, #16
    68a0:	af00      	add	r7, sp, #0
    68a2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    68a4:	687b      	ldr	r3, [r7, #4]
    68a6:	681b      	ldr	r3, [r3, #0]
    68a8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    68aa:	230a      	movs	r3, #10
    68ac:	18fb      	adds	r3, r7, r3
    68ae:	2200      	movs	r2, #0
    68b0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    68b2:	68fb      	ldr	r3, [r7, #12]
    68b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    68b6:	230a      	movs	r3, #10
    68b8:	18fb      	adds	r3, r7, r3
    68ba:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    68c0:	b29b      	uxth	r3, r3
    68c2:	3b01      	subs	r3, #1
    68c4:	b29a      	uxth	r2, r3
    68c6:	687b      	ldr	r3, [r7, #4]
    68c8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    68ca:	46c0      	nop			; (mov r8, r8)
    68cc:	46bd      	mov	sp, r7
    68ce:	b004      	add	sp, #16
    68d0:	bd80      	pop	{r7, pc}

000068d2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    68d2:	b580      	push	{r7, lr}
    68d4:	b084      	sub	sp, #16
    68d6:	af00      	add	r7, sp, #0
    68d8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    68da:	687b      	ldr	r3, [r7, #4]
    68dc:	681b      	ldr	r3, [r3, #0]
    68de:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    68e0:	68fb      	ldr	r3, [r7, #12]
    68e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68e4:	b29a      	uxth	r2, r3
    68e6:	230a      	movs	r3, #10
    68e8:	18fb      	adds	r3, r7, r3
    68ea:	05d2      	lsls	r2, r2, #23
    68ec:	0dd2      	lsrs	r2, r2, #23
    68ee:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68f4:	220a      	movs	r2, #10
    68f6:	18ba      	adds	r2, r7, r2
    68f8:	8812      	ldrh	r2, [r2, #0]
    68fa:	b2d2      	uxtb	r2, r2
    68fc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6902:	1c5a      	adds	r2, r3, #1
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	799b      	ldrb	r3, [r3, #6]
    690c:	2b01      	cmp	r3, #1
    690e:	d10d      	bne.n	692c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6914:	220a      	movs	r2, #10
    6916:	18ba      	adds	r2, r7, r2
    6918:	8812      	ldrh	r2, [r2, #0]
    691a:	0a12      	lsrs	r2, r2, #8
    691c:	b292      	uxth	r2, r2
    691e:	b2d2      	uxtb	r2, r2
    6920:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    6922:	687b      	ldr	r3, [r7, #4]
    6924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6926:	1c5a      	adds	r2, r3, #1
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    692c:	687b      	ldr	r3, [r7, #4]
    692e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    6930:	b29b      	uxth	r3, r3
    6932:	3b01      	subs	r3, #1
    6934:	b29a      	uxth	r2, r3
    6936:	687b      	ldr	r3, [r7, #4]
    6938:	861a      	strh	r2, [r3, #48]	; 0x30
}
    693a:	46c0      	nop			; (mov r8, r8)
    693c:	46bd      	mov	sp, r7
    693e:	b004      	add	sp, #16
    6940:	bd80      	pop	{r7, pc}
	...

00006944 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    6944:	b580      	push	{r7, lr}
    6946:	b086      	sub	sp, #24
    6948:	af00      	add	r7, sp, #0
    694a:	0002      	movs	r2, r0
    694c:	1dfb      	adds	r3, r7, #7
    694e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    6950:	1dfb      	adds	r3, r7, #7
    6952:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    6954:	4bb9      	ldr	r3, [pc, #740]	; (6c3c <_spi_interrupt_handler+0x2f8>)
    6956:	0092      	lsls	r2, r2, #2
    6958:	58d3      	ldr	r3, [r2, r3]
    695a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    695c:	697b      	ldr	r3, [r7, #20]
    695e:	681b      	ldr	r3, [r3, #0]
    6960:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    6962:	697b      	ldr	r3, [r7, #20]
    6964:	2237      	movs	r2, #55	; 0x37
    6966:	5c9a      	ldrb	r2, [r3, r2]
    6968:	697b      	ldr	r3, [r7, #20]
    696a:	2136      	movs	r1, #54	; 0x36
    696c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    696e:	230f      	movs	r3, #15
    6970:	18fb      	adds	r3, r7, r3
    6972:	400a      	ands	r2, r1
    6974:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    6976:	693b      	ldr	r3, [r7, #16]
    6978:	7e1b      	ldrb	r3, [r3, #24]
    697a:	b2da      	uxtb	r2, r3
    697c:	230c      	movs	r3, #12
    697e:	18fb      	adds	r3, r7, r3
    6980:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    6982:	693b      	ldr	r3, [r7, #16]
    6984:	7d9b      	ldrb	r3, [r3, #22]
    6986:	b2db      	uxtb	r3, r3
    6988:	b29a      	uxth	r2, r3
    698a:	230c      	movs	r3, #12
    698c:	18fb      	adds	r3, r7, r3
    698e:	210c      	movs	r1, #12
    6990:	1879      	adds	r1, r7, r1
    6992:	8809      	ldrh	r1, [r1, #0]
    6994:	400a      	ands	r2, r1
    6996:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    6998:	230c      	movs	r3, #12
    699a:	18fb      	adds	r3, r7, r3
    699c:	881b      	ldrh	r3, [r3, #0]
    699e:	2201      	movs	r2, #1
    69a0:	4013      	ands	r3, r2
    69a2:	d041      	beq.n	6a28 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    69a4:	697b      	ldr	r3, [r7, #20]
    69a6:	795b      	ldrb	r3, [r3, #5]
    69a8:	2b01      	cmp	r3, #1
    69aa:	d110      	bne.n	69ce <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    69ac:	697b      	ldr	r3, [r7, #20]
    69ae:	7a5b      	ldrb	r3, [r3, #9]
    69b0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    69b2:	2b00      	cmp	r3, #0
    69b4:	d10b      	bne.n	69ce <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    69b6:	697b      	ldr	r3, [r7, #20]
    69b8:	0018      	movs	r0, r3
    69ba:	4ba1      	ldr	r3, [pc, #644]	; (6c40 <_spi_interrupt_handler+0x2fc>)
    69bc:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    69be:	697b      	ldr	r3, [r7, #20]
    69c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    69c2:	b29b      	uxth	r3, r3
    69c4:	2b00      	cmp	r3, #0
    69c6:	d102      	bne.n	69ce <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    69c8:	693b      	ldr	r3, [r7, #16]
    69ca:	2201      	movs	r2, #1
    69cc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    69ce:	697b      	ldr	r3, [r7, #20]
    69d0:	795b      	ldrb	r3, [r3, #5]
		if (0
    69d2:	2b01      	cmp	r3, #1
    69d4:	d104      	bne.n	69e0 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    69d6:	697b      	ldr	r3, [r7, #20]
    69d8:	7a5b      	ldrb	r3, [r3, #9]
    69da:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    69dc:	2b00      	cmp	r3, #0
    69de:	d108      	bne.n	69f2 <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    69e0:	697b      	ldr	r3, [r7, #20]
    69e2:	795b      	ldrb	r3, [r3, #5]
    69e4:	2b00      	cmp	r3, #0
    69e6:	d11f      	bne.n	6a28 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    69e8:	697b      	ldr	r3, [r7, #20]
    69ea:	7a5b      	ldrb	r3, [r3, #9]
    69ec:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    69ee:	2b00      	cmp	r3, #0
    69f0:	d01a      	beq.n	6a28 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    69f2:	697b      	ldr	r3, [r7, #20]
    69f4:	0018      	movs	r0, r3
    69f6:	4b93      	ldr	r3, [pc, #588]	; (6c44 <_spi_interrupt_handler+0x300>)
    69f8:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    69fa:	697b      	ldr	r3, [r7, #20]
    69fc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    69fe:	b29b      	uxth	r3, r3
    6a00:	2b00      	cmp	r3, #0
    6a02:	d111      	bne.n	6a28 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    6a04:	693b      	ldr	r3, [r7, #16]
    6a06:	2201      	movs	r2, #1
    6a08:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    6a0a:	697b      	ldr	r3, [r7, #20]
    6a0c:	7a5b      	ldrb	r3, [r3, #9]
    6a0e:	b2db      	uxtb	r3, r3
    6a10:	2b01      	cmp	r3, #1
    6a12:	d109      	bne.n	6a28 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    6a14:	697b      	ldr	r3, [r7, #20]
    6a16:	79db      	ldrb	r3, [r3, #7]
    6a18:	2201      	movs	r2, #1
    6a1a:	4053      	eors	r3, r2
    6a1c:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    6a1e:	2b00      	cmp	r3, #0
    6a20:	d002      	beq.n	6a28 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6a22:	693b      	ldr	r3, [r7, #16]
    6a24:	2202      	movs	r2, #2
    6a26:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    6a28:	230c      	movs	r3, #12
    6a2a:	18fb      	adds	r3, r7, r3
    6a2c:	881b      	ldrh	r3, [r3, #0]
    6a2e:	2204      	movs	r2, #4
    6a30:	4013      	ands	r3, r2
    6a32:	d100      	bne.n	6a36 <_spi_interrupt_handler+0xf2>
    6a34:	e07e      	b.n	6b34 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6a36:	693b      	ldr	r3, [r7, #16]
    6a38:	8b5b      	ldrh	r3, [r3, #26]
    6a3a:	b29b      	uxth	r3, r3
    6a3c:	001a      	movs	r2, r3
    6a3e:	2304      	movs	r3, #4
    6a40:	4013      	ands	r3, r2
    6a42:	d022      	beq.n	6a8a <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    6a44:	697b      	ldr	r3, [r7, #20]
    6a46:	7a5b      	ldrb	r3, [r3, #9]
    6a48:	b2db      	uxtb	r3, r3
    6a4a:	2b01      	cmp	r3, #1
    6a4c:	d014      	beq.n	6a78 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    6a4e:	697b      	ldr	r3, [r7, #20]
    6a50:	2238      	movs	r2, #56	; 0x38
    6a52:	211e      	movs	r1, #30
    6a54:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    6a56:	697b      	ldr	r3, [r7, #20]
    6a58:	2203      	movs	r2, #3
    6a5a:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    6a5c:	693b      	ldr	r3, [r7, #16]
    6a5e:	2205      	movs	r2, #5
    6a60:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    6a62:	230f      	movs	r3, #15
    6a64:	18fb      	adds	r3, r7, r3
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	2208      	movs	r2, #8
    6a6a:	4013      	ands	r3, r2
    6a6c:	d004      	beq.n	6a78 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    6a6e:	697b      	ldr	r3, [r7, #20]
    6a70:	699b      	ldr	r3, [r3, #24]
    6a72:	697a      	ldr	r2, [r7, #20]
    6a74:	0010      	movs	r0, r2
    6a76:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    6a78:	693b      	ldr	r3, [r7, #16]
    6a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6a7c:	230a      	movs	r3, #10
    6a7e:	18fb      	adds	r3, r7, r3
    6a80:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6a82:	693b      	ldr	r3, [r7, #16]
    6a84:	2204      	movs	r2, #4
    6a86:	835a      	strh	r2, [r3, #26]
    6a88:	e054      	b.n	6b34 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    6a8a:	697b      	ldr	r3, [r7, #20]
    6a8c:	7a5b      	ldrb	r3, [r3, #9]
    6a8e:	b2db      	uxtb	r3, r3
    6a90:	2b01      	cmp	r3, #1
    6a92:	d11e      	bne.n	6ad2 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    6a94:	697b      	ldr	r3, [r7, #20]
    6a96:	0018      	movs	r0, r3
    6a98:	4b6b      	ldr	r3, [pc, #428]	; (6c48 <_spi_interrupt_handler+0x304>)
    6a9a:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    6a9c:	697b      	ldr	r3, [r7, #20]
    6a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    6aa0:	b29b      	uxth	r3, r3
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d146      	bne.n	6b34 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    6aa6:	693b      	ldr	r3, [r7, #16]
    6aa8:	2204      	movs	r2, #4
    6aaa:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    6aac:	697b      	ldr	r3, [r7, #20]
    6aae:	2238      	movs	r2, #56	; 0x38
    6ab0:	2100      	movs	r1, #0
    6ab2:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    6ab4:	697b      	ldr	r3, [r7, #20]
    6ab6:	2203      	movs	r2, #3
    6ab8:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    6aba:	230f      	movs	r3, #15
    6abc:	18fb      	adds	r3, r7, r3
    6abe:	781b      	ldrb	r3, [r3, #0]
    6ac0:	2201      	movs	r2, #1
    6ac2:	4013      	ands	r3, r2
    6ac4:	d036      	beq.n	6b34 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    6ac6:	697b      	ldr	r3, [r7, #20]
    6ac8:	68db      	ldr	r3, [r3, #12]
    6aca:	697a      	ldr	r2, [r7, #20]
    6acc:	0010      	movs	r0, r2
    6ace:	4798      	blx	r3
    6ad0:	e030      	b.n	6b34 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    6ad2:	697b      	ldr	r3, [r7, #20]
    6ad4:	0018      	movs	r0, r3
    6ad6:	4b5d      	ldr	r3, [pc, #372]	; (6c4c <_spi_interrupt_handler+0x308>)
    6ad8:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    6ada:	697b      	ldr	r3, [r7, #20]
    6adc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    6ade:	b29b      	uxth	r3, r3
    6ae0:	2b00      	cmp	r3, #0
    6ae2:	d127      	bne.n	6b34 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    6ae4:	697b      	ldr	r3, [r7, #20]
    6ae6:	2238      	movs	r2, #56	; 0x38
    6ae8:	2100      	movs	r1, #0
    6aea:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    6aec:	693b      	ldr	r3, [r7, #16]
    6aee:	2204      	movs	r2, #4
    6af0:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    6af2:	697b      	ldr	r3, [r7, #20]
    6af4:	7a5b      	ldrb	r3, [r3, #9]
    6af6:	b2db      	uxtb	r3, r3
    6af8:	2b02      	cmp	r3, #2
    6afa:	d10b      	bne.n	6b14 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    6afc:	230f      	movs	r3, #15
    6afe:	18fb      	adds	r3, r7, r3
    6b00:	781b      	ldrb	r3, [r3, #0]
    6b02:	2204      	movs	r2, #4
    6b04:	4013      	ands	r3, r2
    6b06:	d015      	beq.n	6b34 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    6b08:	697b      	ldr	r3, [r7, #20]
    6b0a:	695b      	ldr	r3, [r3, #20]
    6b0c:	697a      	ldr	r2, [r7, #20]
    6b0e:	0010      	movs	r0, r2
    6b10:	4798      	blx	r3
    6b12:	e00f      	b.n	6b34 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    6b14:	697b      	ldr	r3, [r7, #20]
    6b16:	7a5b      	ldrb	r3, [r3, #9]
    6b18:	b2db      	uxtb	r3, r3
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d10a      	bne.n	6b34 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    6b1e:	230f      	movs	r3, #15
    6b20:	18fb      	adds	r3, r7, r3
    6b22:	781b      	ldrb	r3, [r3, #0]
    6b24:	2202      	movs	r2, #2
    6b26:	4013      	ands	r3, r2
    6b28:	d004      	beq.n	6b34 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    6b2a:	697b      	ldr	r3, [r7, #20]
    6b2c:	691b      	ldr	r3, [r3, #16]
    6b2e:	697a      	ldr	r2, [r7, #20]
    6b30:	0010      	movs	r0, r2
    6b32:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    6b34:	230c      	movs	r3, #12
    6b36:	18fb      	adds	r3, r7, r3
    6b38:	881b      	ldrh	r3, [r3, #0]
    6b3a:	2202      	movs	r2, #2
    6b3c:	4013      	ands	r3, r2
    6b3e:	d046      	beq.n	6bce <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    6b40:	697b      	ldr	r3, [r7, #20]
    6b42:	795b      	ldrb	r3, [r3, #5]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d11d      	bne.n	6b84 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    6b48:	693b      	ldr	r3, [r7, #16]
    6b4a:	2207      	movs	r2, #7
    6b4c:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6b4e:	693b      	ldr	r3, [r7, #16]
    6b50:	2202      	movs	r2, #2
    6b52:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    6b54:	697b      	ldr	r3, [r7, #20]
    6b56:	2203      	movs	r2, #3
    6b58:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    6b5a:	697b      	ldr	r3, [r7, #20]
    6b5c:	2200      	movs	r2, #0
    6b5e:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    6b60:	697b      	ldr	r3, [r7, #20]
    6b62:	2200      	movs	r2, #0
    6b64:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    6b66:	697b      	ldr	r3, [r7, #20]
    6b68:	2238      	movs	r2, #56	; 0x38
    6b6a:	2100      	movs	r1, #0
    6b6c:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    6b6e:	230f      	movs	r3, #15
    6b70:	18fb      	adds	r3, r7, r3
    6b72:	781b      	ldrb	r3, [r3, #0]
    6b74:	2210      	movs	r2, #16
    6b76:	4013      	ands	r3, r2
    6b78:	d004      	beq.n	6b84 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    6b7a:	697b      	ldr	r3, [r7, #20]
    6b7c:	69db      	ldr	r3, [r3, #28]
    6b7e:	697a      	ldr	r2, [r7, #20]
    6b80:	0010      	movs	r0, r2
    6b82:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    6b84:	697b      	ldr	r3, [r7, #20]
    6b86:	795b      	ldrb	r3, [r3, #5]
    6b88:	2b01      	cmp	r3, #1
    6b8a:	d120      	bne.n	6bce <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    6b8c:	697b      	ldr	r3, [r7, #20]
    6b8e:	7a5b      	ldrb	r3, [r3, #9]
    6b90:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    6b92:	2b01      	cmp	r3, #1
    6b94:	d11b      	bne.n	6bce <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    6b96:	697b      	ldr	r3, [r7, #20]
    6b98:	79db      	ldrb	r3, [r3, #7]
    6b9a:	2201      	movs	r2, #1
    6b9c:	4053      	eors	r3, r2
    6b9e:	b2db      	uxtb	r3, r3
    6ba0:	2b00      	cmp	r3, #0
    6ba2:	d014      	beq.n	6bce <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6ba4:	693b      	ldr	r3, [r7, #16]
    6ba6:	2202      	movs	r2, #2
    6ba8:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    6baa:	697b      	ldr	r3, [r7, #20]
    6bac:	2203      	movs	r2, #3
    6bae:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    6bb0:	697b      	ldr	r3, [r7, #20]
    6bb2:	2238      	movs	r2, #56	; 0x38
    6bb4:	2100      	movs	r1, #0
    6bb6:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    6bb8:	230f      	movs	r3, #15
    6bba:	18fb      	adds	r3, r7, r3
    6bbc:	781b      	ldrb	r3, [r3, #0]
    6bbe:	2201      	movs	r2, #1
    6bc0:	4013      	ands	r3, r2
    6bc2:	d004      	beq.n	6bce <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    6bc4:	697b      	ldr	r3, [r7, #20]
    6bc6:	68db      	ldr	r3, [r3, #12]
    6bc8:	697a      	ldr	r2, [r7, #20]
    6bca:	0010      	movs	r0, r2
    6bcc:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    6bce:	230c      	movs	r3, #12
    6bd0:	18fb      	adds	r3, r7, r3
    6bd2:	881b      	ldrh	r3, [r3, #0]
    6bd4:	2208      	movs	r2, #8
    6bd6:	4013      	ands	r3, r2
    6bd8:	d014      	beq.n	6c04 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    6bda:	697b      	ldr	r3, [r7, #20]
    6bdc:	795b      	ldrb	r3, [r3, #5]
    6bde:	2b00      	cmp	r3, #0
    6be0:	d110      	bne.n	6c04 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    6be2:	693b      	ldr	r3, [r7, #16]
    6be4:	2208      	movs	r2, #8
    6be6:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    6be8:	693b      	ldr	r3, [r7, #16]
    6bea:	2208      	movs	r2, #8
    6bec:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    6bee:	230f      	movs	r3, #15
    6bf0:	18fb      	adds	r3, r7, r3
    6bf2:	781b      	ldrb	r3, [r3, #0]
    6bf4:	2220      	movs	r2, #32
    6bf6:	4013      	ands	r3, r2
    6bf8:	d004      	beq.n	6c04 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    6bfa:	697b      	ldr	r3, [r7, #20]
    6bfc:	6a1b      	ldr	r3, [r3, #32]
    6bfe:	697a      	ldr	r2, [r7, #20]
    6c00:	0010      	movs	r0, r2
    6c02:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    6c04:	230c      	movs	r3, #12
    6c06:	18fb      	adds	r3, r7, r3
    6c08:	881b      	ldrh	r3, [r3, #0]
    6c0a:	2280      	movs	r2, #128	; 0x80
    6c0c:	4013      	ands	r3, r2
    6c0e:	d010      	beq.n	6c32 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    6c10:	693b      	ldr	r3, [r7, #16]
    6c12:	2280      	movs	r2, #128	; 0x80
    6c14:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    6c16:	693b      	ldr	r3, [r7, #16]
    6c18:	2280      	movs	r2, #128	; 0x80
    6c1a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    6c1c:	230f      	movs	r3, #15
    6c1e:	18fb      	adds	r3, r7, r3
    6c20:	781b      	ldrb	r3, [r3, #0]
    6c22:	2240      	movs	r2, #64	; 0x40
    6c24:	4013      	ands	r3, r2
    6c26:	d004      	beq.n	6c32 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    6c28:	697b      	ldr	r3, [r7, #20]
    6c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c2c:	697a      	ldr	r2, [r7, #20]
    6c2e:	0010      	movs	r0, r2
    6c30:	4798      	blx	r3
		}
	}
#  endif
}
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	46bd      	mov	sp, r7
    6c36:	b006      	add	sp, #24
    6c38:	bd80      	pop	{r7, pc}
    6c3a:	46c0      	nop			; (mov r8, r8)
    6c3c:	20000764 	.word	0x20000764
    6c40:	00006869 	.word	0x00006869
    6c44:	000067ed 	.word	0x000067ed
    6c48:	0000689d 	.word	0x0000689d
    6c4c:	000068d3 	.word	0x000068d3

00006c50 <system_gclk_chan_get_config_defaults>:
{
    6c50:	b580      	push	{r7, lr}
    6c52:	b082      	sub	sp, #8
    6c54:	af00      	add	r7, sp, #0
    6c56:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6c58:	687b      	ldr	r3, [r7, #4]
    6c5a:	2200      	movs	r2, #0
    6c5c:	701a      	strb	r2, [r3, #0]
}
    6c5e:	46c0      	nop			; (mov r8, r8)
    6c60:	46bd      	mov	sp, r7
    6c62:	b002      	add	sp, #8
    6c64:	bd80      	pop	{r7, pc}
	...

00006c68 <system_apb_clock_set_mask>:
{
    6c68:	b580      	push	{r7, lr}
    6c6a:	b082      	sub	sp, #8
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	0002      	movs	r2, r0
    6c70:	6039      	str	r1, [r7, #0]
    6c72:	1dfb      	adds	r3, r7, #7
    6c74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6c76:	1dfb      	adds	r3, r7, #7
    6c78:	781b      	ldrb	r3, [r3, #0]
    6c7a:	2b01      	cmp	r3, #1
    6c7c:	d00a      	beq.n	6c94 <system_apb_clock_set_mask+0x2c>
    6c7e:	2b02      	cmp	r3, #2
    6c80:	d00f      	beq.n	6ca2 <system_apb_clock_set_mask+0x3a>
    6c82:	2b00      	cmp	r3, #0
    6c84:	d114      	bne.n	6cb0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6c86:	4b0e      	ldr	r3, [pc, #56]	; (6cc0 <system_apb_clock_set_mask+0x58>)
    6c88:	4a0d      	ldr	r2, [pc, #52]	; (6cc0 <system_apb_clock_set_mask+0x58>)
    6c8a:	6991      	ldr	r1, [r2, #24]
    6c8c:	683a      	ldr	r2, [r7, #0]
    6c8e:	430a      	orrs	r2, r1
    6c90:	619a      	str	r2, [r3, #24]
			break;
    6c92:	e00f      	b.n	6cb4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6c94:	4b0a      	ldr	r3, [pc, #40]	; (6cc0 <system_apb_clock_set_mask+0x58>)
    6c96:	4a0a      	ldr	r2, [pc, #40]	; (6cc0 <system_apb_clock_set_mask+0x58>)
    6c98:	69d1      	ldr	r1, [r2, #28]
    6c9a:	683a      	ldr	r2, [r7, #0]
    6c9c:	430a      	orrs	r2, r1
    6c9e:	61da      	str	r2, [r3, #28]
			break;
    6ca0:	e008      	b.n	6cb4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6ca2:	4b07      	ldr	r3, [pc, #28]	; (6cc0 <system_apb_clock_set_mask+0x58>)
    6ca4:	4a06      	ldr	r2, [pc, #24]	; (6cc0 <system_apb_clock_set_mask+0x58>)
    6ca6:	6a11      	ldr	r1, [r2, #32]
    6ca8:	683a      	ldr	r2, [r7, #0]
    6caa:	430a      	orrs	r2, r1
    6cac:	621a      	str	r2, [r3, #32]
			break;
    6cae:	e001      	b.n	6cb4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6cb0:	2317      	movs	r3, #23
    6cb2:	e000      	b.n	6cb6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6cb4:	2300      	movs	r3, #0
}
    6cb6:	0018      	movs	r0, r3
    6cb8:	46bd      	mov	sp, r7
    6cba:	b002      	add	sp, #8
    6cbc:	bd80      	pop	{r7, pc}
    6cbe:	46c0      	nop			; (mov r8, r8)
    6cc0:	40000400 	.word	0x40000400

00006cc4 <system_pinmux_get_config_defaults>:
{
    6cc4:	b580      	push	{r7, lr}
    6cc6:	b082      	sub	sp, #8
    6cc8:	af00      	add	r7, sp, #0
    6cca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	2280      	movs	r2, #128	; 0x80
    6cd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6cd2:	687b      	ldr	r3, [r7, #4]
    6cd4:	2200      	movs	r2, #0
    6cd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6cd8:	687b      	ldr	r3, [r7, #4]
    6cda:	2201      	movs	r2, #1
    6cdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6cde:	687b      	ldr	r3, [r7, #4]
    6ce0:	2200      	movs	r2, #0
    6ce2:	70da      	strb	r2, [r3, #3]
}
    6ce4:	46c0      	nop			; (mov r8, r8)
    6ce6:	46bd      	mov	sp, r7
    6ce8:	b002      	add	sp, #8
    6cea:	bd80      	pop	{r7, pc}

00006cec <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    6cec:	b580      	push	{r7, lr}
    6cee:	b084      	sub	sp, #16
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    6cf4:	2300      	movs	r3, #0
    6cf6:	60fb      	str	r3, [r7, #12]
    6cf8:	e00c      	b.n	6d14 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    6cfa:	4b0a      	ldr	r3, [pc, #40]	; (6d24 <_tcc_get_inst_index+0x38>)
    6cfc:	68fa      	ldr	r2, [r7, #12]
    6cfe:	0092      	lsls	r2, r2, #2
    6d00:	58d2      	ldr	r2, [r2, r3]
    6d02:	687b      	ldr	r3, [r7, #4]
    6d04:	429a      	cmp	r2, r3
    6d06:	d102      	bne.n	6d0e <_tcc_get_inst_index+0x22>
			return i;
    6d08:	68fb      	ldr	r3, [r7, #12]
    6d0a:	b2db      	uxtb	r3, r3
    6d0c:	e006      	b.n	6d1c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    6d0e:	68fb      	ldr	r3, [r7, #12]
    6d10:	3301      	adds	r3, #1
    6d12:	60fb      	str	r3, [r7, #12]
    6d14:	68fb      	ldr	r3, [r7, #12]
    6d16:	2b02      	cmp	r3, #2
    6d18:	d9ef      	bls.n	6cfa <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6d1a:	2300      	movs	r3, #0
}
    6d1c:	0018      	movs	r0, r3
    6d1e:	46bd      	mov	sp, r7
    6d20:	b004      	add	sp, #16
    6d22:	bd80      	pop	{r7, pc}
    6d24:	00014a60 	.word	0x00014a60

00006d28 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    6d28:	b590      	push	{r4, r7, lr}
    6d2a:	b085      	sub	sp, #20
    6d2c:	af00      	add	r7, sp, #0
    6d2e:	6078      	str	r0, [r7, #4]
    6d30:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    6d32:	230f      	movs	r3, #15
    6d34:	18fc      	adds	r4, r7, r3
    6d36:	683b      	ldr	r3, [r7, #0]
    6d38:	0018      	movs	r0, r3
    6d3a:	4bad      	ldr	r3, [pc, #692]	; (6ff0 <tcc_get_config_defaults+0x2c8>)
    6d3c:	4798      	blx	r3
    6d3e:	0003      	movs	r3, r0
    6d40:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    6d42:	687b      	ldr	r3, [r7, #4]
    6d44:	2200      	movs	r2, #0
    6d46:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    6d48:	230f      	movs	r3, #15
    6d4a:	18fb      	adds	r3, r7, r3
    6d4c:	781a      	ldrb	r2, [r3, #0]
    6d4e:	4ba9      	ldr	r3, [pc, #676]	; (6ff4 <tcc_get_config_defaults+0x2cc>)
    6d50:	0092      	lsls	r2, r2, #2
    6d52:	58d2      	ldr	r2, [r2, r3]
    6d54:	687b      	ldr	r3, [r7, #4]
    6d56:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	2200      	movs	r2, #0
    6d5c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    6d5e:	687b      	ldr	r3, [r7, #4]
    6d60:	2200      	movs	r2, #0
    6d62:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    6d64:	687b      	ldr	r3, [r7, #4]
    6d66:	2200      	movs	r2, #0
    6d68:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    6d6a:	687b      	ldr	r3, [r7, #4]
    6d6c:	2200      	movs	r2, #0
    6d6e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	2200      	movs	r2, #0
    6d74:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6d76:	687b      	ldr	r3, [r7, #4]
    6d78:	2200      	movs	r2, #0
    6d7a:	61da      	str	r2, [r3, #28]
    6d7c:	687b      	ldr	r3, [r7, #4]
    6d7e:	2200      	movs	r2, #0
    6d80:	621a      	str	r2, [r3, #32]
    6d82:	687b      	ldr	r3, [r7, #4]
    6d84:	2200      	movs	r2, #0
    6d86:	625a      	str	r2, [r3, #36]	; 0x24
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	2200      	movs	r2, #0
    6d8c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6d8e:	687b      	ldr	r3, [r7, #4]
    6d90:	2200      	movs	r2, #0
    6d92:	751a      	strb	r2, [r3, #20]
    6d94:	687b      	ldr	r3, [r7, #4]
    6d96:	2200      	movs	r2, #0
    6d98:	755a      	strb	r2, [r3, #21]
    6d9a:	687b      	ldr	r3, [r7, #4]
    6d9c:	2200      	movs	r2, #0
    6d9e:	759a      	strb	r2, [r3, #22]
    6da0:	687b      	ldr	r3, [r7, #4]
    6da2:	2200      	movs	r2, #0
    6da4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    6da6:	687b      	ldr	r3, [r7, #4]
    6da8:	2200      	movs	r2, #0
    6daa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	2200      	movs	r2, #0
    6db0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6db2:	687b      	ldr	r3, [r7, #4]
    6db4:	2200      	movs	r2, #0
    6db6:	741a      	strb	r2, [r3, #16]
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	2200      	movs	r2, #0
    6dbc:	745a      	strb	r2, [r3, #17]
    6dbe:	687b      	ldr	r3, [r7, #4]
    6dc0:	2200      	movs	r2, #0
    6dc2:	749a      	strb	r2, [r3, #18]
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	2200      	movs	r2, #0
    6dc8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	222c      	movs	r2, #44	; 0x2c
    6dce:	2100      	movs	r1, #0
    6dd0:	5499      	strb	r1, [r3, r2]
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	222d      	movs	r2, #45	; 0x2d
    6dd6:	2100      	movs	r1, #0
    6dd8:	5499      	strb	r1, [r3, r2]
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	222e      	movs	r2, #46	; 0x2e
    6dde:	2100      	movs	r1, #0
    6de0:	5499      	strb	r1, [r3, r2]
    6de2:	687b      	ldr	r3, [r7, #4]
    6de4:	222f      	movs	r2, #47	; 0x2f
    6de6:	2100      	movs	r1, #0
    6de8:	5499      	strb	r1, [r3, r2]
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	2230      	movs	r2, #48	; 0x30
    6dee:	2100      	movs	r1, #0
    6df0:	5499      	strb	r1, [r3, r2]
    6df2:	687b      	ldr	r3, [r7, #4]
    6df4:	2231      	movs	r2, #49	; 0x31
    6df6:	2100      	movs	r1, #0
    6df8:	5499      	strb	r1, [r3, r2]
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	2232      	movs	r2, #50	; 0x32
    6dfe:	2100      	movs	r1, #0
    6e00:	5499      	strb	r1, [r3, r2]
    6e02:	687b      	ldr	r3, [r7, #4]
    6e04:	2233      	movs	r2, #51	; 0x33
    6e06:	2100      	movs	r1, #0
    6e08:	5499      	strb	r1, [r3, r2]
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	2234      	movs	r2, #52	; 0x34
    6e0e:	2100      	movs	r1, #0
    6e10:	5499      	strb	r1, [r3, r2]
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	2235      	movs	r2, #53	; 0x35
    6e16:	2100      	movs	r1, #0
    6e18:	5499      	strb	r1, [r3, r2]
    6e1a:	687b      	ldr	r3, [r7, #4]
    6e1c:	2236      	movs	r2, #54	; 0x36
    6e1e:	2100      	movs	r1, #0
    6e20:	5499      	strb	r1, [r3, r2]
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	2237      	movs	r2, #55	; 0x37
    6e26:	2100      	movs	r1, #0
    6e28:	5499      	strb	r1, [r3, r2]
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	2238      	movs	r2, #56	; 0x38
    6e2e:	2100      	movs	r1, #0
    6e30:	5499      	strb	r1, [r3, r2]
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	2239      	movs	r2, #57	; 0x39
    6e36:	2100      	movs	r1, #0
    6e38:	5499      	strb	r1, [r3, r2]
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	223a      	movs	r2, #58	; 0x3a
    6e3e:	2100      	movs	r1, #0
    6e40:	5499      	strb	r1, [r3, r2]
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	223b      	movs	r2, #59	; 0x3b
    6e46:	2100      	movs	r1, #0
    6e48:	5499      	strb	r1, [r3, r2]
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	223c      	movs	r2, #60	; 0x3c
    6e4e:	2100      	movs	r1, #0
    6e50:	5499      	strb	r1, [r3, r2]
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	223d      	movs	r2, #61	; 0x3d
    6e56:	2100      	movs	r1, #0
    6e58:	5499      	strb	r1, [r3, r2]
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	223e      	movs	r2, #62	; 0x3e
    6e5e:	2100      	movs	r1, #0
    6e60:	5499      	strb	r1, [r3, r2]
    6e62:	687b      	ldr	r3, [r7, #4]
    6e64:	223f      	movs	r2, #63	; 0x3f
    6e66:	2100      	movs	r1, #0
    6e68:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    6e6a:	687b      	ldr	r3, [r7, #4]
    6e6c:	2240      	movs	r2, #64	; 0x40
    6e6e:	2100      	movs	r1, #0
    6e70:	5499      	strb	r1, [r3, r2]
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	2241      	movs	r2, #65	; 0x41
    6e76:	2100      	movs	r1, #0
    6e78:	5499      	strb	r1, [r3, r2]
    6e7a:	687b      	ldr	r3, [r7, #4]
    6e7c:	2242      	movs	r2, #66	; 0x42
    6e7e:	2100      	movs	r1, #0
    6e80:	5499      	strb	r1, [r3, r2]
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	2243      	movs	r2, #67	; 0x43
    6e86:	2100      	movs	r1, #0
    6e88:	5499      	strb	r1, [r3, r2]
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	2244      	movs	r2, #68	; 0x44
    6e8e:	2100      	movs	r1, #0
    6e90:	5499      	strb	r1, [r3, r2]
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	2245      	movs	r2, #69	; 0x45
    6e96:	2100      	movs	r1, #0
    6e98:	5499      	strb	r1, [r3, r2]
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	2246      	movs	r2, #70	; 0x46
    6e9e:	2100      	movs	r1, #0
    6ea0:	5499      	strb	r1, [r3, r2]
    6ea2:	687b      	ldr	r3, [r7, #4]
    6ea4:	2247      	movs	r2, #71	; 0x47
    6ea6:	2100      	movs	r1, #0
    6ea8:	5499      	strb	r1, [r3, r2]
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	2248      	movs	r2, #72	; 0x48
    6eae:	2100      	movs	r1, #0
    6eb0:	5499      	strb	r1, [r3, r2]
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	2249      	movs	r2, #73	; 0x49
    6eb6:	2100      	movs	r1, #0
    6eb8:	5499      	strb	r1, [r3, r2]
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	224a      	movs	r2, #74	; 0x4a
    6ebe:	2100      	movs	r1, #0
    6ec0:	5499      	strb	r1, [r3, r2]
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	224b      	movs	r2, #75	; 0x4b
    6ec6:	2100      	movs	r1, #0
    6ec8:	5499      	strb	r1, [r3, r2]
    6eca:	687b      	ldr	r3, [r7, #4]
    6ecc:	224c      	movs	r2, #76	; 0x4c
    6ece:	2100      	movs	r1, #0
    6ed0:	5499      	strb	r1, [r3, r2]
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	224d      	movs	r2, #77	; 0x4d
    6ed6:	2100      	movs	r1, #0
    6ed8:	5499      	strb	r1, [r3, r2]
    6eda:	687b      	ldr	r3, [r7, #4]
    6edc:	224e      	movs	r2, #78	; 0x4e
    6ede:	2100      	movs	r1, #0
    6ee0:	5499      	strb	r1, [r3, r2]
    6ee2:	687b      	ldr	r3, [r7, #4]
    6ee4:	224f      	movs	r2, #79	; 0x4f
    6ee6:	2100      	movs	r1, #0
    6ee8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    6eea:	687b      	ldr	r3, [r7, #4]
    6eec:	2250      	movs	r2, #80	; 0x50
    6eee:	2100      	movs	r1, #0
    6ef0:	5499      	strb	r1, [r3, r2]
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	2251      	movs	r2, #81	; 0x51
    6ef6:	2100      	movs	r1, #0
    6ef8:	5499      	strb	r1, [r3, r2]
    6efa:	687b      	ldr	r3, [r7, #4]
    6efc:	2252      	movs	r2, #82	; 0x52
    6efe:	2100      	movs	r1, #0
    6f00:	5499      	strb	r1, [r3, r2]
    6f02:	687b      	ldr	r3, [r7, #4]
    6f04:	2253      	movs	r2, #83	; 0x53
    6f06:	2100      	movs	r1, #0
    6f08:	5499      	strb	r1, [r3, r2]
    6f0a:	687b      	ldr	r3, [r7, #4]
    6f0c:	2254      	movs	r2, #84	; 0x54
    6f0e:	2100      	movs	r1, #0
    6f10:	5499      	strb	r1, [r3, r2]
    6f12:	687b      	ldr	r3, [r7, #4]
    6f14:	2255      	movs	r2, #85	; 0x55
    6f16:	2100      	movs	r1, #0
    6f18:	5499      	strb	r1, [r3, r2]
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	2256      	movs	r2, #86	; 0x56
    6f1e:	2100      	movs	r1, #0
    6f20:	5499      	strb	r1, [r3, r2]
    6f22:	687b      	ldr	r3, [r7, #4]
    6f24:	2257      	movs	r2, #87	; 0x57
    6f26:	2100      	movs	r1, #0
    6f28:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    6f2a:	687b      	ldr	r3, [r7, #4]
    6f2c:	2298      	movs	r2, #152	; 0x98
    6f2e:	2100      	movs	r1, #0
    6f30:	5499      	strb	r1, [r3, r2]
    6f32:	687b      	ldr	r3, [r7, #4]
    6f34:	2200      	movs	r2, #0
    6f36:	659a      	str	r2, [r3, #88]	; 0x58
    6f38:	687b      	ldr	r3, [r7, #4]
    6f3a:	2200      	movs	r2, #0
    6f3c:	679a      	str	r2, [r3, #120]	; 0x78
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	2299      	movs	r2, #153	; 0x99
    6f42:	2100      	movs	r1, #0
    6f44:	5499      	strb	r1, [r3, r2]
    6f46:	687b      	ldr	r3, [r7, #4]
    6f48:	2200      	movs	r2, #0
    6f4a:	65da      	str	r2, [r3, #92]	; 0x5c
    6f4c:	687b      	ldr	r3, [r7, #4]
    6f4e:	2200      	movs	r2, #0
    6f50:	67da      	str	r2, [r3, #124]	; 0x7c
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	229a      	movs	r2, #154	; 0x9a
    6f56:	2100      	movs	r1, #0
    6f58:	5499      	strb	r1, [r3, r2]
    6f5a:	687b      	ldr	r3, [r7, #4]
    6f5c:	2200      	movs	r2, #0
    6f5e:	661a      	str	r2, [r3, #96]	; 0x60
    6f60:	687b      	ldr	r3, [r7, #4]
    6f62:	2280      	movs	r2, #128	; 0x80
    6f64:	2100      	movs	r1, #0
    6f66:	5099      	str	r1, [r3, r2]
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	229b      	movs	r2, #155	; 0x9b
    6f6c:	2100      	movs	r1, #0
    6f6e:	5499      	strb	r1, [r3, r2]
    6f70:	687b      	ldr	r3, [r7, #4]
    6f72:	2200      	movs	r2, #0
    6f74:	665a      	str	r2, [r3, #100]	; 0x64
    6f76:	687b      	ldr	r3, [r7, #4]
    6f78:	2284      	movs	r2, #132	; 0x84
    6f7a:	2100      	movs	r1, #0
    6f7c:	5099      	str	r1, [r3, r2]
    6f7e:	687b      	ldr	r3, [r7, #4]
    6f80:	229c      	movs	r2, #156	; 0x9c
    6f82:	2100      	movs	r1, #0
    6f84:	5499      	strb	r1, [r3, r2]
    6f86:	687b      	ldr	r3, [r7, #4]
    6f88:	2200      	movs	r2, #0
    6f8a:	669a      	str	r2, [r3, #104]	; 0x68
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	2288      	movs	r2, #136	; 0x88
    6f90:	2100      	movs	r1, #0
    6f92:	5099      	str	r1, [r3, r2]
    6f94:	687b      	ldr	r3, [r7, #4]
    6f96:	229d      	movs	r2, #157	; 0x9d
    6f98:	2100      	movs	r1, #0
    6f9a:	5499      	strb	r1, [r3, r2]
    6f9c:	687b      	ldr	r3, [r7, #4]
    6f9e:	2200      	movs	r2, #0
    6fa0:	66da      	str	r2, [r3, #108]	; 0x6c
    6fa2:	687b      	ldr	r3, [r7, #4]
    6fa4:	228c      	movs	r2, #140	; 0x8c
    6fa6:	2100      	movs	r1, #0
    6fa8:	5099      	str	r1, [r3, r2]
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	229e      	movs	r2, #158	; 0x9e
    6fae:	2100      	movs	r1, #0
    6fb0:	5499      	strb	r1, [r3, r2]
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	2200      	movs	r2, #0
    6fb6:	671a      	str	r2, [r3, #112]	; 0x70
    6fb8:	687b      	ldr	r3, [r7, #4]
    6fba:	2290      	movs	r2, #144	; 0x90
    6fbc:	2100      	movs	r1, #0
    6fbe:	5099      	str	r1, [r3, r2]
    6fc0:	687b      	ldr	r3, [r7, #4]
    6fc2:	229f      	movs	r2, #159	; 0x9f
    6fc4:	2100      	movs	r1, #0
    6fc6:	5499      	strb	r1, [r3, r2]
    6fc8:	687b      	ldr	r3, [r7, #4]
    6fca:	2200      	movs	r2, #0
    6fcc:	675a      	str	r2, [r3, #116]	; 0x74
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	2294      	movs	r2, #148	; 0x94
    6fd2:	2100      	movs	r1, #0
    6fd4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    6fd6:	687b      	ldr	r3, [r7, #4]
    6fd8:	22a0      	movs	r2, #160	; 0xa0
    6fda:	2101      	movs	r1, #1
    6fdc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	22a1      	movs	r2, #161	; 0xa1
    6fe2:	2100      	movs	r1, #0
    6fe4:	5499      	strb	r1, [r3, r2]
}
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	46bd      	mov	sp, r7
    6fea:	b005      	add	sp, #20
    6fec:	bd90      	pop	{r4, r7, pc}
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	00006ced 	.word	0x00006ced
    6ff4:	00014a7c 	.word	0x00014a7c

00006ff8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    6ff8:	b580      	push	{r7, lr}
    6ffa:	b086      	sub	sp, #24
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	60b9      	str	r1, [r7, #8]
    7000:	607a      	str	r2, [r7, #4]
    7002:	230f      	movs	r3, #15
    7004:	18fb      	adds	r3, r7, r3
    7006:	1c02      	adds	r2, r0, #0
    7008:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    700a:	2300      	movs	r3, #0
    700c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    700e:	2300      	movs	r3, #0
    7010:	613b      	str	r3, [r7, #16]
    7012:	e01d      	b.n	7050 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    7014:	68ba      	ldr	r2, [r7, #8]
    7016:	693b      	ldr	r3, [r7, #16]
    7018:	18d3      	adds	r3, r2, r3
    701a:	3310      	adds	r3, #16
    701c:	781b      	ldrb	r3, [r3, #0]
    701e:	2b01      	cmp	r3, #1
    7020:	d113      	bne.n	704a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    7022:	230f      	movs	r3, #15
    7024:	18fb      	adds	r3, r7, r3
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	4a1b      	ldr	r2, [pc, #108]	; (7098 <_tcc_build_ctrla+0xa0>)
    702a:	5cd3      	ldrb	r3, [r2, r3]
    702c:	001a      	movs	r2, r3
    702e:	693b      	ldr	r3, [r7, #16]
    7030:	429a      	cmp	r2, r3
    7032:	da01      	bge.n	7038 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    7034:	2317      	movs	r3, #23
    7036:	e02a      	b.n	708e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    7038:	2380      	movs	r3, #128	; 0x80
    703a:	045a      	lsls	r2, r3, #17
    703c:	693b      	ldr	r3, [r7, #16]
    703e:	409a      	lsls	r2, r3
    7040:	0013      	movs	r3, r2
    7042:	001a      	movs	r2, r3
    7044:	697b      	ldr	r3, [r7, #20]
    7046:	4313      	orrs	r3, r2
    7048:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    704a:	693b      	ldr	r3, [r7, #16]
    704c:	3301      	adds	r3, #1
    704e:	613b      	str	r3, [r7, #16]
    7050:	693b      	ldr	r3, [r7, #16]
    7052:	2b03      	cmp	r3, #3
    7054:	ddde      	ble.n	7014 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    7056:	68bb      	ldr	r3, [r7, #8]
    7058:	22a1      	movs	r2, #161	; 0xa1
    705a:	5c9b      	ldrb	r3, [r3, r2]
    705c:	2b00      	cmp	r3, #0
    705e:	d004      	beq.n	706a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    7060:	697b      	ldr	r3, [r7, #20]
    7062:	2280      	movs	r2, #128	; 0x80
    7064:	0112      	lsls	r2, r2, #4
    7066:	4313      	orrs	r3, r2
    7068:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    706a:	68bb      	ldr	r3, [r7, #8]
    706c:	7b1b      	ldrb	r3, [r3, #12]
    706e:	031b      	lsls	r3, r3, #12
    7070:	001a      	movs	r2, r3
    7072:	697b      	ldr	r3, [r7, #20]
    7074:	4313      	orrs	r3, r2
    7076:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    7078:	68bb      	ldr	r3, [r7, #8]
    707a:	7adb      	ldrb	r3, [r3, #11]
    707c:	021b      	lsls	r3, r3, #8
    707e:	001a      	movs	r2, r3
    7080:	697b      	ldr	r3, [r7, #20]
    7082:	4313      	orrs	r3, r2
    7084:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    7086:	687b      	ldr	r3, [r7, #4]
    7088:	697a      	ldr	r2, [r7, #20]
    708a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    708c:	2300      	movs	r3, #0
}
    708e:	0018      	movs	r0, r3
    7090:	46bd      	mov	sp, r7
    7092:	b006      	add	sp, #24
    7094:	bd80      	pop	{r7, pc}
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	00014a88 	.word	0x00014a88

0000709c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    709c:	b580      	push	{r7, lr}
    709e:	b086      	sub	sp, #24
    70a0:	af00      	add	r7, sp, #0
    70a2:	60b9      	str	r1, [r7, #8]
    70a4:	607a      	str	r2, [r7, #4]
    70a6:	230f      	movs	r3, #15
    70a8:	18fb      	adds	r3, r7, r3
    70aa:	1c02      	adds	r2, r0, #0
    70ac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    70ae:	2317      	movs	r3, #23
    70b0:	18fb      	adds	r3, r7, r3
    70b2:	2200      	movs	r2, #0
    70b4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    70b6:	68bb      	ldr	r3, [r7, #8]
    70b8:	7a1b      	ldrb	r3, [r3, #8]
    70ba:	2b00      	cmp	r3, #0
    70bc:	d007      	beq.n	70ce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    70be:	2317      	movs	r3, #23
    70c0:	18fb      	adds	r3, r7, r3
    70c2:	2217      	movs	r2, #23
    70c4:	18ba      	adds	r2, r7, r2
    70c6:	7812      	ldrb	r2, [r2, #0]
    70c8:	2104      	movs	r1, #4
    70ca:	430a      	orrs	r2, r1
    70cc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    70ce:	68bb      	ldr	r3, [r7, #8]
    70d0:	7a5b      	ldrb	r3, [r3, #9]
    70d2:	2b01      	cmp	r3, #1
    70d4:	d107      	bne.n	70e6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    70d6:	2317      	movs	r3, #23
    70d8:	18fb      	adds	r3, r7, r3
    70da:	2217      	movs	r2, #23
    70dc:	18ba      	adds	r2, r7, r2
    70de:	7812      	ldrb	r2, [r2, #0]
    70e0:	2101      	movs	r1, #1
    70e2:	430a      	orrs	r2, r1
    70e4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	2217      	movs	r2, #23
    70ea:	18ba      	adds	r2, r7, r2
    70ec:	7812      	ldrb	r2, [r2, #0]
    70ee:	701a      	strb	r2, [r3, #0]
}
    70f0:	46c0      	nop			; (mov r8, r8)
    70f2:	46bd      	mov	sp, r7
    70f4:	b006      	add	sp, #24
    70f6:	bd80      	pop	{r7, pc}

000070f8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    70f8:	b580      	push	{r7, lr}
    70fa:	b088      	sub	sp, #32
    70fc:	af00      	add	r7, sp, #0
    70fe:	60b9      	str	r1, [r7, #8]
    7100:	607a      	str	r2, [r7, #4]
    7102:	230f      	movs	r3, #15
    7104:	18fb      	adds	r3, r7, r3
    7106:	1c02      	adds	r2, r0, #0
    7108:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    710a:	230f      	movs	r3, #15
    710c:	18fb      	adds	r3, r7, r3
    710e:	781a      	ldrb	r2, [r3, #0]
    7110:	231b      	movs	r3, #27
    7112:	18fb      	adds	r3, r7, r3
    7114:	493e      	ldr	r1, [pc, #248]	; (7210 <_tcc_build_faults+0x118>)
    7116:	5c8a      	ldrb	r2, [r1, r2]
    7118:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    711a:	2300      	movs	r3, #0
    711c:	61fb      	str	r3, [r7, #28]
    711e:	e06e      	b.n	71fe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    7120:	69fa      	ldr	r2, [r7, #28]
    7122:	0013      	movs	r3, r2
    7124:	009b      	lsls	r3, r3, #2
    7126:	189b      	adds	r3, r3, r2
    7128:	005b      	lsls	r3, r3, #1
    712a:	3328      	adds	r3, #40	; 0x28
    712c:	68ba      	ldr	r2, [r7, #8]
    712e:	18d3      	adds	r3, r2, r3
    7130:	3304      	adds	r3, #4
    7132:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    7134:	697b      	ldr	r3, [r7, #20]
    7136:	7a5b      	ldrb	r3, [r3, #9]
    7138:	221b      	movs	r2, #27
    713a:	18ba      	adds	r2, r7, r2
    713c:	7812      	ldrb	r2, [r2, #0]
    713e:	429a      	cmp	r2, r3
    7140:	d801      	bhi.n	7146 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    7142:	2317      	movs	r3, #23
    7144:	e05f      	b.n	7206 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    7146:	697b      	ldr	r3, [r7, #20]
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	2b0f      	cmp	r3, #15
    714c:	d901      	bls.n	7152 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    714e:	2317      	movs	r3, #23
    7150:	e059      	b.n	7206 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7152:	697b      	ldr	r3, [r7, #20]
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	061b      	lsls	r3, r3, #24
    7158:	001a      	movs	r2, r3
    715a:	23f0      	movs	r3, #240	; 0xf0
    715c:	051b      	lsls	r3, r3, #20
    715e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    7160:	697b      	ldr	r3, [r7, #20]
    7162:	785b      	ldrb	r3, [r3, #1]
    7164:	041b      	lsls	r3, r3, #16
    7166:	0019      	movs	r1, r3
    7168:	23ff      	movs	r3, #255	; 0xff
    716a:	041b      	lsls	r3, r3, #16
    716c:	400b      	ands	r3, r1
    716e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    7170:	697b      	ldr	r3, [r7, #20]
    7172:	789b      	ldrb	r3, [r3, #2]
    7174:	2b00      	cmp	r3, #0
    7176:	d001      	beq.n	717c <_tcc_build_faults+0x84>
    7178:	2380      	movs	r3, #128	; 0x80
    717a:	e000      	b.n	717e <_tcc_build_faults+0x86>
    717c:	2300      	movs	r3, #0
    717e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    7180:	697b      	ldr	r3, [r7, #20]
    7182:	78db      	ldrb	r3, [r3, #3]
    7184:	2b00      	cmp	r3, #0
    7186:	d001      	beq.n	718c <_tcc_build_faults+0x94>
    7188:	2308      	movs	r3, #8
    718a:	e000      	b.n	718e <_tcc_build_faults+0x96>
    718c:	2300      	movs	r3, #0
    718e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    7190:	697b      	ldr	r3, [r7, #20]
    7192:	791b      	ldrb	r3, [r3, #4]
    7194:	2b00      	cmp	r3, #0
    7196:	d001      	beq.n	719c <_tcc_build_faults+0xa4>
    7198:	2310      	movs	r3, #16
    719a:	e000      	b.n	719e <_tcc_build_faults+0xa6>
    719c:	2300      	movs	r3, #0
    719e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    71a0:	697b      	ldr	r3, [r7, #20]
    71a2:	795b      	ldrb	r3, [r3, #5]
    71a4:	0019      	movs	r1, r3
    71a6:	2303      	movs	r3, #3
    71a8:	400b      	ands	r3, r1
    71aa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    71ac:	697b      	ldr	r3, [r7, #20]
    71ae:	799b      	ldrb	r3, [r3, #6]
    71b0:	015b      	lsls	r3, r3, #5
    71b2:	0019      	movs	r1, r3
    71b4:	2360      	movs	r3, #96	; 0x60
    71b6:	400b      	ands	r3, r1
    71b8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    71ba:	697b      	ldr	r3, [r7, #20]
    71bc:	79db      	ldrb	r3, [r3, #7]
    71be:	021b      	lsls	r3, r3, #8
    71c0:	0019      	movs	r1, r3
    71c2:	23c0      	movs	r3, #192	; 0xc0
    71c4:	009b      	lsls	r3, r3, #2
    71c6:	400b      	ands	r3, r1
    71c8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    71ca:	697b      	ldr	r3, [r7, #20]
    71cc:	7a1b      	ldrb	r3, [r3, #8]
    71ce:	031b      	lsls	r3, r3, #12
    71d0:	0019      	movs	r1, r3
    71d2:	23e0      	movs	r3, #224	; 0xe0
    71d4:	01db      	lsls	r3, r3, #7
    71d6:	400b      	ands	r3, r1
    71d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    71da:	697b      	ldr	r3, [r7, #20]
    71dc:	7a5b      	ldrb	r3, [r3, #9]
    71de:	029b      	lsls	r3, r3, #10
    71e0:	0019      	movs	r1, r3
    71e2:	23c0      	movs	r3, #192	; 0xc0
    71e4:	011b      	lsls	r3, r3, #4
    71e6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    71e8:	4313      	orrs	r3, r2
    71ea:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    71ec:	69fb      	ldr	r3, [r7, #28]
    71ee:	009b      	lsls	r3, r3, #2
    71f0:	687a      	ldr	r2, [r7, #4]
    71f2:	18d3      	adds	r3, r2, r3
    71f4:	693a      	ldr	r2, [r7, #16]
    71f6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    71f8:	69fb      	ldr	r3, [r7, #28]
    71fa:	3301      	adds	r3, #1
    71fc:	61fb      	str	r3, [r7, #28]
    71fe:	69fb      	ldr	r3, [r7, #28]
    7200:	2b01      	cmp	r3, #1
    7202:	dd8d      	ble.n	7120 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    7204:	2300      	movs	r3, #0
}
    7206:	0018      	movs	r0, r3
    7208:	46bd      	mov	sp, r7
    720a:	b008      	add	sp, #32
    720c:	bd80      	pop	{r7, pc}
    720e:	46c0      	nop			; (mov r8, r8)
    7210:	00014a88 	.word	0x00014a88

00007214 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    7214:	b580      	push	{r7, lr}
    7216:	b088      	sub	sp, #32
    7218:	af00      	add	r7, sp, #0
    721a:	60b9      	str	r1, [r7, #8]
    721c:	607a      	str	r2, [r7, #4]
    721e:	230f      	movs	r3, #15
    7220:	18fb      	adds	r3, r7, r3
    7222:	1c02      	adds	r2, r0, #0
    7224:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    7226:	230f      	movs	r3, #15
    7228:	18fb      	adds	r3, r7, r3
    722a:	781a      	ldrb	r2, [r3, #0]
    722c:	2317      	movs	r3, #23
    722e:	18fb      	adds	r3, r7, r3
    7230:	492d      	ldr	r1, [pc, #180]	; (72e8 <_tcc_build_drvctrl+0xd4>)
    7232:	5c8a      	ldrb	r2, [r1, r2]
    7234:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    7236:	2300      	movs	r3, #0
    7238:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    723a:	2300      	movs	r3, #0
    723c:	61fb      	str	r3, [r7, #28]
    723e:	e048      	b.n	72d2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    7240:	68ba      	ldr	r2, [r7, #8]
    7242:	2150      	movs	r1, #80	; 0x50
    7244:	69fb      	ldr	r3, [r7, #28]
    7246:	18d3      	adds	r3, r2, r3
    7248:	185b      	adds	r3, r3, r1
    724a:	781b      	ldrb	r3, [r3, #0]
    724c:	2b00      	cmp	r3, #0
    724e:	d010      	beq.n	7272 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    7250:	2317      	movs	r3, #23
    7252:	18fb      	adds	r3, r7, r3
    7254:	781a      	ldrb	r2, [r3, #0]
    7256:	69fb      	ldr	r3, [r7, #28]
    7258:	429a      	cmp	r2, r3
    725a:	d801      	bhi.n	7260 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    725c:	2317      	movs	r3, #23
    725e:	e03f      	b.n	72e0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    7260:	2380      	movs	r3, #128	; 0x80
    7262:	025a      	lsls	r2, r3, #9
    7264:	69fb      	ldr	r3, [r7, #28]
    7266:	409a      	lsls	r2, r3
    7268:	0013      	movs	r3, r2
    726a:	001a      	movs	r2, r3
    726c:	69bb      	ldr	r3, [r7, #24]
    726e:	4313      	orrs	r3, r2
    7270:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    7272:	68ba      	ldr	r2, [r7, #8]
    7274:	69fb      	ldr	r3, [r7, #28]
    7276:	331c      	adds	r3, #28
    7278:	005b      	lsls	r3, r3, #1
    727a:	18d3      	adds	r3, r2, r3
    727c:	3309      	adds	r3, #9
    727e:	781b      	ldrb	r3, [r3, #0]
    7280:	2b00      	cmp	r3, #0
    7282:	d023      	beq.n	72cc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    7284:	2317      	movs	r3, #23
    7286:	18fb      	adds	r3, r7, r3
    7288:	781a      	ldrb	r2, [r3, #0]
    728a:	69fb      	ldr	r3, [r7, #28]
    728c:	429a      	cmp	r2, r3
    728e:	d801      	bhi.n	7294 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    7290:	2317      	movs	r3, #23
    7292:	e025      	b.n	72e0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    7294:	68ba      	ldr	r2, [r7, #8]
    7296:	69fb      	ldr	r3, [r7, #28]
    7298:	331c      	adds	r3, #28
    729a:	005b      	lsls	r3, r3, #1
    729c:	18d3      	adds	r3, r2, r3
    729e:	3309      	adds	r3, #9
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	2b02      	cmp	r3, #2
    72a4:	d10a      	bne.n	72bc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    72a6:	2302      	movs	r3, #2
    72a8:	33ff      	adds	r3, #255	; 0xff
    72aa:	001a      	movs	r2, r3
    72ac:	69fb      	ldr	r3, [r7, #28]
    72ae:	409a      	lsls	r2, r3
    72b0:	0013      	movs	r3, r2
    72b2:	001a      	movs	r2, r3
    72b4:	69bb      	ldr	r3, [r7, #24]
    72b6:	4313      	orrs	r3, r2
    72b8:	61bb      	str	r3, [r7, #24]
    72ba:	e007      	b.n	72cc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    72bc:	2201      	movs	r2, #1
    72be:	69fb      	ldr	r3, [r7, #28]
    72c0:	409a      	lsls	r2, r3
    72c2:	0013      	movs	r3, r2
    72c4:	001a      	movs	r2, r3
    72c6:	69bb      	ldr	r3, [r7, #24]
    72c8:	4313      	orrs	r3, r2
    72ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    72cc:	69fb      	ldr	r3, [r7, #28]
    72ce:	3301      	adds	r3, #1
    72d0:	61fb      	str	r3, [r7, #28]
    72d2:	69fb      	ldr	r3, [r7, #28]
    72d4:	2b07      	cmp	r3, #7
    72d6:	d9b3      	bls.n	7240 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    72d8:	687b      	ldr	r3, [r7, #4]
    72da:	69ba      	ldr	r2, [r7, #24]
    72dc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    72de:	2300      	movs	r3, #0
}
    72e0:	0018      	movs	r0, r3
    72e2:	46bd      	mov	sp, r7
    72e4:	b008      	add	sp, #32
    72e6:	bd80      	pop	{r7, pc}
    72e8:	00014a8c 	.word	0x00014a8c

000072ec <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    72ec:	b580      	push	{r7, lr}
    72ee:	b088      	sub	sp, #32
    72f0:	af00      	add	r7, sp, #0
    72f2:	60b9      	str	r1, [r7, #8]
    72f4:	607a      	str	r2, [r7, #4]
    72f6:	230f      	movs	r3, #15
    72f8:	18fb      	adds	r3, r7, r3
    72fa:	1c02      	adds	r2, r0, #0
    72fc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    72fe:	230f      	movs	r3, #15
    7300:	18fb      	adds	r3, r7, r3
    7302:	781a      	ldrb	r2, [r3, #0]
    7304:	2317      	movs	r3, #23
    7306:	18fb      	adds	r3, r7, r3
    7308:	491d      	ldr	r1, [pc, #116]	; (7380 <_tcc_build_waves+0x94>)
    730a:	5c8a      	ldrb	r2, [r1, r2]
    730c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    730e:	68bb      	ldr	r3, [r7, #8]
    7310:	3310      	adds	r3, #16
    7312:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    7314:	693b      	ldr	r3, [r7, #16]
    7316:	7a5b      	ldrb	r3, [r3, #9]
    7318:	011b      	lsls	r3, r3, #4
    731a:	001a      	movs	r2, r3
    731c:	2330      	movs	r3, #48	; 0x30
    731e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    7320:	693b      	ldr	r3, [r7, #16]
    7322:	7a1b      	ldrb	r3, [r3, #8]
    7324:	0019      	movs	r1, r3
    7326:	2307      	movs	r3, #7
    7328:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    732a:	4313      	orrs	r3, r2
    732c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    732e:	2300      	movs	r3, #0
    7330:	61fb      	str	r3, [r7, #28]
    7332:	e01a      	b.n	736a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    7334:	693a      	ldr	r2, [r7, #16]
    7336:	69fb      	ldr	r3, [r7, #28]
    7338:	18d3      	adds	r3, r2, r3
    733a:	3304      	adds	r3, #4
    733c:	781b      	ldrb	r3, [r3, #0]
    733e:	2b00      	cmp	r3, #0
    7340:	d010      	beq.n	7364 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    7342:	2317      	movs	r3, #23
    7344:	18fb      	adds	r3, r7, r3
    7346:	781a      	ldrb	r2, [r3, #0]
    7348:	69fb      	ldr	r3, [r7, #28]
    734a:	429a      	cmp	r2, r3
    734c:	dc01      	bgt.n	7352 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    734e:	2317      	movs	r3, #23
    7350:	e012      	b.n	7378 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    7352:	2380      	movs	r3, #128	; 0x80
    7354:	025a      	lsls	r2, r3, #9
    7356:	69fb      	ldr	r3, [r7, #28]
    7358:	409a      	lsls	r2, r3
    735a:	0013      	movs	r3, r2
    735c:	001a      	movs	r2, r3
    735e:	69bb      	ldr	r3, [r7, #24]
    7360:	4313      	orrs	r3, r2
    7362:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    7364:	69fb      	ldr	r3, [r7, #28]
    7366:	3301      	adds	r3, #1
    7368:	61fb      	str	r3, [r7, #28]
    736a:	69fb      	ldr	r3, [r7, #28]
    736c:	2b03      	cmp	r3, #3
    736e:	dde1      	ble.n	7334 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	69ba      	ldr	r2, [r7, #24]
    7374:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    7376:	2300      	movs	r3, #0
}
    7378:	0018      	movs	r0, r3
    737a:	46bd      	mov	sp, r7
    737c:	b008      	add	sp, #32
    737e:	bd80      	pop	{r7, pc}
    7380:	00014a88 	.word	0x00014a88

00007384 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    7384:	b590      	push	{r4, r7, lr}
    7386:	b091      	sub	sp, #68	; 0x44
    7388:	af00      	add	r7, sp, #0
    738a:	60f8      	str	r0, [r7, #12]
    738c:	60b9      	str	r1, [r7, #8]
    738e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    7390:	233b      	movs	r3, #59	; 0x3b
    7392:	18fc      	adds	r4, r7, r3
    7394:	68bb      	ldr	r3, [r7, #8]
    7396:	0018      	movs	r0, r3
    7398:	4bc4      	ldr	r3, [pc, #784]	; (76ac <tcc_init+0x328>)
    739a:	4798      	blx	r3
    739c:	0003      	movs	r3, r0
    739e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    73a0:	233b      	movs	r3, #59	; 0x3b
    73a2:	18fb      	adds	r3, r7, r3
    73a4:	781a      	ldrb	r2, [r3, #0]
    73a6:	4bc2      	ldr	r3, [pc, #776]	; (76b0 <tcc_init+0x32c>)
    73a8:	0092      	lsls	r2, r2, #2
    73aa:	58d3      	ldr	r3, [r2, r3]
    73ac:	0019      	movs	r1, r3
    73ae:	2002      	movs	r0, #2
    73b0:	4bc0      	ldr	r3, [pc, #768]	; (76b4 <tcc_init+0x330>)
    73b2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    73b4:	68bb      	ldr	r3, [r7, #8]
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	2202      	movs	r2, #2
    73ba:	4013      	ands	r3, r2
    73bc:	d001      	beq.n	73c2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    73be:	231c      	movs	r3, #28
    73c0:	e1be      	b.n	7740 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    73c2:	68bb      	ldr	r3, [r7, #8]
    73c4:	681b      	ldr	r3, [r3, #0]
    73c6:	2201      	movs	r2, #1
    73c8:	4013      	ands	r3, r2
    73ca:	d001      	beq.n	73d0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    73cc:	231c      	movs	r3, #28
    73ce:	e1b7      	b.n	7740 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    73d0:	233b      	movs	r3, #59	; 0x3b
    73d2:	18fb      	adds	r3, r7, r3
    73d4:	781a      	ldrb	r2, [r3, #0]
    73d6:	4bb8      	ldr	r3, [pc, #736]	; (76b8 <tcc_init+0x334>)
    73d8:	0092      	lsls	r2, r2, #2
    73da:	58d3      	ldr	r3, [r2, r3]
    73dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    73de:	687b      	ldr	r3, [r7, #4]
    73e0:	681a      	ldr	r2, [r3, #0]
    73e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    73e4:	429a      	cmp	r2, r3
    73e6:	d804      	bhi.n	73f2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    73e8:	687b      	ldr	r3, [r7, #4]
    73ea:	685a      	ldr	r2, [r3, #4]
    73ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    73ee:	429a      	cmp	r2, r3
    73f0:	d901      	bls.n	73f6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    73f2:	2317      	movs	r3, #23
    73f4:	e1a4      	b.n	7740 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    73f6:	2300      	movs	r3, #0
    73f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    73fa:	e00e      	b.n	741a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    73fc:	687a      	ldr	r2, [r7, #4]
    73fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7400:	3306      	adds	r3, #6
    7402:	009b      	lsls	r3, r3, #2
    7404:	18d3      	adds	r3, r2, r3
    7406:	3304      	adds	r3, #4
    7408:	681a      	ldr	r2, [r3, #0]
    740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    740c:	429a      	cmp	r2, r3
    740e:	d901      	bls.n	7414 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    7410:	2317      	movs	r3, #23
    7412:	e195      	b.n	7740 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    7414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7416:	3301      	adds	r3, #1
    7418:	63fb      	str	r3, [r7, #60]	; 0x3c
    741a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    741c:	2b03      	cmp	r3, #3
    741e:	dded      	ble.n	73fc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7420:	2300      	movs	r3, #0
    7422:	63fb      	str	r3, [r7, #60]	; 0x3c
    7424:	e019      	b.n	745a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    7426:	687a      	ldr	r2, [r7, #4]
    7428:	2198      	movs	r1, #152	; 0x98
    742a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    742c:	18d3      	adds	r3, r2, r3
    742e:	185b      	adds	r3, r3, r1
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	2201      	movs	r2, #1
    7434:	4053      	eors	r3, r2
    7436:	b2db      	uxtb	r3, r3
    7438:	2b00      	cmp	r3, #0
    743a:	d10a      	bne.n	7452 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    743c:	233b      	movs	r3, #59	; 0x3b
    743e:	18fb      	adds	r3, r7, r3
    7440:	781b      	ldrb	r3, [r3, #0]
    7442:	4a9e      	ldr	r2, [pc, #632]	; (76bc <tcc_init+0x338>)
    7444:	5cd3      	ldrb	r3, [r2, r3]
    7446:	001a      	movs	r2, r3
    7448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    744a:	429a      	cmp	r2, r3
    744c:	dc02      	bgt.n	7454 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    744e:	2317      	movs	r3, #23
    7450:	e176      	b.n	7740 <tcc_init+0x3bc>
			continue;
    7452:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7456:	3301      	adds	r3, #1
    7458:	63fb      	str	r3, [r7, #60]	; 0x3c
    745a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    745c:	2b07      	cmp	r3, #7
    745e:	dde2      	ble.n	7426 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    7460:	2300      	movs	r3, #0
    7462:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    7464:	2333      	movs	r3, #51	; 0x33
    7466:	18fc      	adds	r4, r7, r3
    7468:	232c      	movs	r3, #44	; 0x2c
    746a:	18fa      	adds	r2, r7, r3
    746c:	6879      	ldr	r1, [r7, #4]
    746e:	233b      	movs	r3, #59	; 0x3b
    7470:	18fb      	adds	r3, r7, r3
    7472:	781b      	ldrb	r3, [r3, #0]
    7474:	0018      	movs	r0, r3
    7476:	4b92      	ldr	r3, [pc, #584]	; (76c0 <tcc_init+0x33c>)
    7478:	4798      	blx	r3
    747a:	0003      	movs	r3, r0
    747c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    747e:	2333      	movs	r3, #51	; 0x33
    7480:	18fb      	adds	r3, r7, r3
    7482:	781b      	ldrb	r3, [r3, #0]
    7484:	2b00      	cmp	r3, #0
    7486:	d003      	beq.n	7490 <tcc_init+0x10c>
		return status;
    7488:	2333      	movs	r3, #51	; 0x33
    748a:	18fb      	adds	r3, r7, r3
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	e157      	b.n	7740 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    7490:	232b      	movs	r3, #43	; 0x2b
    7492:	18fa      	adds	r2, r7, r3
    7494:	6879      	ldr	r1, [r7, #4]
    7496:	233b      	movs	r3, #59	; 0x3b
    7498:	18fb      	adds	r3, r7, r3
    749a:	781b      	ldrb	r3, [r3, #0]
    749c:	0018      	movs	r0, r3
    749e:	4b89      	ldr	r3, [pc, #548]	; (76c4 <tcc_init+0x340>)
    74a0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    74a2:	2333      	movs	r3, #51	; 0x33
    74a4:	18fc      	adds	r4, r7, r3
    74a6:	2320      	movs	r3, #32
    74a8:	18fa      	adds	r2, r7, r3
    74aa:	6879      	ldr	r1, [r7, #4]
    74ac:	233b      	movs	r3, #59	; 0x3b
    74ae:	18fb      	adds	r3, r7, r3
    74b0:	781b      	ldrb	r3, [r3, #0]
    74b2:	0018      	movs	r0, r3
    74b4:	4b84      	ldr	r3, [pc, #528]	; (76c8 <tcc_init+0x344>)
    74b6:	4798      	blx	r3
    74b8:	0003      	movs	r3, r0
    74ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    74bc:	2333      	movs	r3, #51	; 0x33
    74be:	18fb      	adds	r3, r7, r3
    74c0:	781b      	ldrb	r3, [r3, #0]
    74c2:	2b00      	cmp	r3, #0
    74c4:	d003      	beq.n	74ce <tcc_init+0x14a>
		return status;
    74c6:	2333      	movs	r3, #51	; 0x33
    74c8:	18fb      	adds	r3, r7, r3
    74ca:	781b      	ldrb	r3, [r3, #0]
    74cc:	e138      	b.n	7740 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    74ce:	2300      	movs	r3, #0
    74d0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    74d2:	2333      	movs	r3, #51	; 0x33
    74d4:	18fc      	adds	r4, r7, r3
    74d6:	231c      	movs	r3, #28
    74d8:	18fa      	adds	r2, r7, r3
    74da:	6879      	ldr	r1, [r7, #4]
    74dc:	233b      	movs	r3, #59	; 0x3b
    74de:	18fb      	adds	r3, r7, r3
    74e0:	781b      	ldrb	r3, [r3, #0]
    74e2:	0018      	movs	r0, r3
    74e4:	4b79      	ldr	r3, [pc, #484]	; (76cc <tcc_init+0x348>)
    74e6:	4798      	blx	r3
    74e8:	0003      	movs	r3, r0
    74ea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    74ec:	2333      	movs	r3, #51	; 0x33
    74ee:	18fb      	adds	r3, r7, r3
    74f0:	781b      	ldrb	r3, [r3, #0]
    74f2:	2b00      	cmp	r3, #0
    74f4:	d003      	beq.n	74fe <tcc_init+0x17a>
		return status;
    74f6:	2333      	movs	r3, #51	; 0x33
    74f8:	18fb      	adds	r3, r7, r3
    74fa:	781b      	ldrb	r3, [r3, #0]
    74fc:	e120      	b.n	7740 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    74fe:	2333      	movs	r3, #51	; 0x33
    7500:	18fc      	adds	r4, r7, r3
    7502:	2318      	movs	r3, #24
    7504:	18fa      	adds	r2, r7, r3
    7506:	6879      	ldr	r1, [r7, #4]
    7508:	233b      	movs	r3, #59	; 0x3b
    750a:	18fb      	adds	r3, r7, r3
    750c:	781b      	ldrb	r3, [r3, #0]
    750e:	0018      	movs	r0, r3
    7510:	4b6f      	ldr	r3, [pc, #444]	; (76d0 <tcc_init+0x34c>)
    7512:	4798      	blx	r3
    7514:	0003      	movs	r3, r0
    7516:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    7518:	2333      	movs	r3, #51	; 0x33
    751a:	18fb      	adds	r3, r7, r3
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	2b00      	cmp	r3, #0
    7520:	d003      	beq.n	752a <tcc_init+0x1a6>
		return status;
    7522:	2333      	movs	r3, #51	; 0x33
    7524:	18fb      	adds	r3, r7, r3
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	e10a      	b.n	7740 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    752a:	2300      	movs	r3, #0
    752c:	63fb      	str	r3, [r7, #60]	; 0x3c
    752e:	e009      	b.n	7544 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    7530:	68fa      	ldr	r2, [r7, #12]
    7532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7534:	009b      	lsls	r3, r3, #2
    7536:	18d3      	adds	r3, r2, r3
    7538:	3304      	adds	r3, #4
    753a:	2200      	movs	r2, #0
    753c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7540:	3301      	adds	r3, #1
    7542:	63fb      	str	r3, [r7, #60]	; 0x3c
    7544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7546:	2b0b      	cmp	r3, #11
    7548:	ddf2      	ble.n	7530 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    754a:	68fb      	ldr	r3, [r7, #12]
    754c:	2200      	movs	r2, #0
    754e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    7550:	68fb      	ldr	r3, [r7, #12]
    7552:	2200      	movs	r2, #0
    7554:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    7556:	233b      	movs	r3, #59	; 0x3b
    7558:	18fb      	adds	r3, r7, r3
    755a:	781a      	ldrb	r2, [r3, #0]
    755c:	4b5d      	ldr	r3, [pc, #372]	; (76d4 <tcc_init+0x350>)
    755e:	0092      	lsls	r2, r2, #2
    7560:	68f9      	ldr	r1, [r7, #12]
    7562:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    7564:	68fb      	ldr	r3, [r7, #12]
    7566:	68ba      	ldr	r2, [r7, #8]
    7568:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	22a0      	movs	r2, #160	; 0xa0
    756e:	5c99      	ldrb	r1, [r3, r2]
    7570:	68fb      	ldr	r3, [r7, #12]
    7572:	223c      	movs	r2, #60	; 0x3c
    7574:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    7576:	2314      	movs	r3, #20
    7578:	18fb      	adds	r3, r7, r3
    757a:	0018      	movs	r0, r3
    757c:	4b56      	ldr	r3, [pc, #344]	; (76d8 <tcc_init+0x354>)
    757e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    7580:	687b      	ldr	r3, [r7, #4]
    7582:	7a9a      	ldrb	r2, [r3, #10]
    7584:	2314      	movs	r3, #20
    7586:	18fb      	adds	r3, r7, r3
    7588:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    758a:	233b      	movs	r3, #59	; 0x3b
    758c:	18fb      	adds	r3, r7, r3
    758e:	781b      	ldrb	r3, [r3, #0]
    7590:	4a52      	ldr	r2, [pc, #328]	; (76dc <tcc_init+0x358>)
    7592:	5cd3      	ldrb	r3, [r2, r3]
    7594:	2214      	movs	r2, #20
    7596:	18ba      	adds	r2, r7, r2
    7598:	0011      	movs	r1, r2
    759a:	0018      	movs	r0, r3
    759c:	4b50      	ldr	r3, [pc, #320]	; (76e0 <tcc_init+0x35c>)
    759e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    75a0:	233b      	movs	r3, #59	; 0x3b
    75a2:	18fb      	adds	r3, r7, r3
    75a4:	781b      	ldrb	r3, [r3, #0]
    75a6:	4a4d      	ldr	r2, [pc, #308]	; (76dc <tcc_init+0x358>)
    75a8:	5cd3      	ldrb	r3, [r2, r3]
    75aa:	0018      	movs	r0, r3
    75ac:	4b4d      	ldr	r3, [pc, #308]	; (76e4 <tcc_init+0x360>)
    75ae:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    75b0:	2300      	movs	r3, #0
    75b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    75b4:	e02d      	b.n	7612 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    75b6:	687a      	ldr	r2, [r7, #4]
    75b8:	2198      	movs	r1, #152	; 0x98
    75ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    75bc:	18d3      	adds	r3, r2, r3
    75be:	185b      	adds	r3, r3, r1
    75c0:	781b      	ldrb	r3, [r3, #0]
    75c2:	2201      	movs	r2, #1
    75c4:	4053      	eors	r3, r2
    75c6:	b2db      	uxtb	r3, r3
    75c8:	2b00      	cmp	r3, #0
    75ca:	d11e      	bne.n	760a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    75cc:	2310      	movs	r3, #16
    75ce:	18fb      	adds	r3, r7, r3
    75d0:	0018      	movs	r0, r3
    75d2:	4b45      	ldr	r3, [pc, #276]	; (76e8 <tcc_init+0x364>)
    75d4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    75d6:	687b      	ldr	r3, [r7, #4]
    75d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    75da:	321e      	adds	r2, #30
    75dc:	0092      	lsls	r2, r2, #2
    75de:	58d3      	ldr	r3, [r2, r3]
    75e0:	b2da      	uxtb	r2, r3
    75e2:	2310      	movs	r3, #16
    75e4:	18fb      	adds	r3, r7, r3
    75e6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    75e8:	2310      	movs	r3, #16
    75ea:	18fb      	adds	r3, r7, r3
    75ec:	2201      	movs	r2, #1
    75ee:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    75f0:	687b      	ldr	r3, [r7, #4]
    75f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    75f4:	3216      	adds	r2, #22
    75f6:	0092      	lsls	r2, r2, #2
    75f8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    75fa:	b2db      	uxtb	r3, r3
    75fc:	2210      	movs	r2, #16
    75fe:	18ba      	adds	r2, r7, r2
    7600:	0011      	movs	r1, r2
    7602:	0018      	movs	r0, r3
    7604:	4b39      	ldr	r3, [pc, #228]	; (76ec <tcc_init+0x368>)
    7606:	4798      	blx	r3
    7608:	e000      	b.n	760c <tcc_init+0x288>
			continue;
    760a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    760c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    760e:	3301      	adds	r3, #1
    7610:	63fb      	str	r3, [r7, #60]	; 0x3c
    7612:	233b      	movs	r3, #59	; 0x3b
    7614:	18fb      	adds	r3, r7, r3
    7616:	781b      	ldrb	r3, [r3, #0]
    7618:	4a28      	ldr	r2, [pc, #160]	; (76bc <tcc_init+0x338>)
    761a:	5cd3      	ldrb	r3, [r2, r3]
    761c:	001a      	movs	r2, r3
    761e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7620:	429a      	cmp	r2, r3
    7622:	dcc8      	bgt.n	75b6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    7624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7626:	68bb      	ldr	r3, [r7, #8]
    7628:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    762a:	46c0      	nop			; (mov r8, r8)
    762c:	68bb      	ldr	r3, [r7, #8]
    762e:	689b      	ldr	r3, [r3, #8]
    7630:	2204      	movs	r2, #4
    7632:	4013      	ands	r3, r2
    7634:	d1fa      	bne.n	762c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    7636:	68bb      	ldr	r3, [r7, #8]
    7638:	22ff      	movs	r2, #255	; 0xff
    763a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    763c:	46c0      	nop			; (mov r8, r8)
    763e:	68bb      	ldr	r3, [r7, #8]
    7640:	689b      	ldr	r3, [r3, #8]
    7642:	2204      	movs	r2, #4
    7644:	4013      	ands	r3, r2
    7646:	d1fa      	bne.n	763e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    7648:	232b      	movs	r3, #43	; 0x2b
    764a:	18fb      	adds	r3, r7, r3
    764c:	781a      	ldrb	r2, [r3, #0]
    764e:	68bb      	ldr	r3, [r7, #8]
    7650:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    7652:	2320      	movs	r3, #32
    7654:	18fb      	adds	r3, r7, r3
    7656:	681a      	ldr	r2, [r3, #0]
    7658:	68bb      	ldr	r3, [r7, #8]
    765a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    765c:	2320      	movs	r3, #32
    765e:	18fb      	adds	r3, r7, r3
    7660:	685a      	ldr	r2, [r3, #4]
    7662:	68bb      	ldr	r3, [r7, #8]
    7664:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    7666:	69fa      	ldr	r2, [r7, #28]
    7668:	68bb      	ldr	r3, [r7, #8]
    766a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    766c:	46c0      	nop			; (mov r8, r8)
    766e:	68bb      	ldr	r3, [r7, #8]
    7670:	689b      	ldr	r3, [r3, #8]
    7672:	4a1f      	ldr	r2, [pc, #124]	; (76f0 <tcc_init+0x36c>)
    7674:	4013      	ands	r3, r2
    7676:	d1fa      	bne.n	766e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    7678:	69ba      	ldr	r2, [r7, #24]
    767a:	68bb      	ldr	r3, [r7, #8]
    767c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    767e:	46c0      	nop			; (mov r8, r8)
    7680:	68bb      	ldr	r3, [r7, #8]
    7682:	689b      	ldr	r3, [r3, #8]
    7684:	2210      	movs	r2, #16
    7686:	4013      	ands	r3, r2
    7688:	d1fa      	bne.n	7680 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    768a:	687b      	ldr	r3, [r7, #4]
    768c:	681a      	ldr	r2, [r3, #0]
    768e:	68bb      	ldr	r3, [r7, #8]
    7690:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    7692:	46c0      	nop			; (mov r8, r8)
    7694:	68bb      	ldr	r3, [r7, #8]
    7696:	689b      	ldr	r3, [r3, #8]
    7698:	4a16      	ldr	r2, [pc, #88]	; (76f4 <tcc_init+0x370>)
    769a:	4013      	ands	r3, r2
    769c:	d1fa      	bne.n	7694 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    769e:	687b      	ldr	r3, [r7, #4]
    76a0:	685a      	ldr	r2, [r3, #4]
    76a2:	68bb      	ldr	r3, [r7, #8]
    76a4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    76a6:	2300      	movs	r3, #0
    76a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    76aa:	e03f      	b.n	772c <tcc_init+0x3a8>
    76ac:	00006ced 	.word	0x00006ced
    76b0:	00014a70 	.word	0x00014a70
    76b4:	00006c69 	.word	0x00006c69
    76b8:	00014a7c 	.word	0x00014a7c
    76bc:	00014a8c 	.word	0x00014a8c
    76c0:	00006ff9 	.word	0x00006ff9
    76c4:	0000709d 	.word	0x0000709d
    76c8:	000070f9 	.word	0x000070f9
    76cc:	00007215 	.word	0x00007215
    76d0:	000072ed 	.word	0x000072ed
    76d4:	200005dc 	.word	0x200005dc
    76d8:	00006c51 	.word	0x00006c51
    76dc:	00014a6c 	.word	0x00014a6c
    76e0:	0000c4e9 	.word	0x0000c4e9
    76e4:	0000c52d 	.word	0x0000c52d
    76e8:	00006cc5 	.word	0x00006cc5
    76ec:	0000c7d5 	.word	0x0000c7d5
    76f0:	00020040 	.word	0x00020040
    76f4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    76f8:	46c0      	nop			; (mov r8, r8)
    76fa:	68bb      	ldr	r3, [r7, #8]
    76fc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    76fe:	4912      	ldr	r1, [pc, #72]	; (7748 <tcc_init+0x3c4>)
    7700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7702:	4091      	lsls	r1, r2
    7704:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    7706:	4013      	ands	r3, r2
    7708:	d1f7      	bne.n	76fa <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    770a:	687a      	ldr	r2, [r7, #4]
    770c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    770e:	3306      	adds	r3, #6
    7710:	009b      	lsls	r3, r3, #2
    7712:	18d3      	adds	r3, r2, r3
    7714:	3304      	adds	r3, #4
    7716:	681a      	ldr	r2, [r3, #0]
    7718:	68b9      	ldr	r1, [r7, #8]
    771a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    771c:	3310      	adds	r3, #16
    771e:	009b      	lsls	r3, r3, #2
    7720:	18cb      	adds	r3, r1, r3
    7722:	3304      	adds	r3, #4
    7724:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    7726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7728:	3301      	adds	r3, #1
    772a:	63fb      	str	r3, [r7, #60]	; 0x3c
    772c:	233b      	movs	r3, #59	; 0x3b
    772e:	18fb      	adds	r3, r7, r3
    7730:	781b      	ldrb	r3, [r3, #0]
    7732:	4a06      	ldr	r2, [pc, #24]	; (774c <tcc_init+0x3c8>)
    7734:	5cd3      	ldrb	r3, [r2, r3]
    7736:	001a      	movs	r2, r3
    7738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    773a:	429a      	cmp	r2, r3
    773c:	dcdc      	bgt.n	76f8 <tcc_init+0x374>
	}

	return STATUS_OK;
    773e:	2300      	movs	r3, #0
}
    7740:	0018      	movs	r0, r3
    7742:	46bd      	mov	sp, r7
    7744:	b011      	add	sp, #68	; 0x44
    7746:	bd90      	pop	{r4, r7, pc}
    7748:	00080100 	.word	0x00080100
    774c:	00014a88 	.word	0x00014a88

00007750 <system_interrupt_enable>:
{
    7750:	b580      	push	{r7, lr}
    7752:	b082      	sub	sp, #8
    7754:	af00      	add	r7, sp, #0
    7756:	0002      	movs	r2, r0
    7758:	1dfb      	adds	r3, r7, #7
    775a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    775c:	4b06      	ldr	r3, [pc, #24]	; (7778 <system_interrupt_enable+0x28>)
    775e:	1dfa      	adds	r2, r7, #7
    7760:	7812      	ldrb	r2, [r2, #0]
    7762:	0011      	movs	r1, r2
    7764:	221f      	movs	r2, #31
    7766:	400a      	ands	r2, r1
    7768:	2101      	movs	r1, #1
    776a:	4091      	lsls	r1, r2
    776c:	000a      	movs	r2, r1
    776e:	601a      	str	r2, [r3, #0]
}
    7770:	46c0      	nop			; (mov r8, r8)
    7772:	46bd      	mov	sp, r7
    7774:	b002      	add	sp, #8
    7776:	bd80      	pop	{r7, pc}
    7778:	e000e100 	.word	0xe000e100

0000777c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    777c:	b580      	push	{r7, lr}
    777e:	b082      	sub	sp, #8
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    7784:	4a04      	ldr	r2, [pc, #16]	; (7798 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    7786:	687b      	ldr	r3, [r7, #4]
    7788:	18d3      	adds	r3, r2, r3
    778a:	781b      	ldrb	r3, [r3, #0]
    778c:	b25b      	sxtb	r3, r3
}
    778e:	0018      	movs	r0, r3
    7790:	46bd      	mov	sp, r7
    7792:	b002      	add	sp, #8
    7794:	bd80      	pop	{r7, pc}
    7796:	46c0      	nop			; (mov r8, r8)
    7798:	20000004 	.word	0x20000004

0000779c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    779c:	b580      	push	{r7, lr}
    779e:	b084      	sub	sp, #16
    77a0:	af00      	add	r7, sp, #0
    77a2:	60f8      	str	r0, [r7, #12]
    77a4:	60b9      	str	r1, [r7, #8]
    77a6:	1dfb      	adds	r3, r7, #7
    77a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    77aa:	1dfb      	adds	r3, r7, #7
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	68fa      	ldr	r2, [r7, #12]
    77b0:	009b      	lsls	r3, r3, #2
    77b2:	18d3      	adds	r3, r2, r3
    77b4:	3304      	adds	r3, #4
    77b6:	68ba      	ldr	r2, [r7, #8]
    77b8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    77ba:	68fb      	ldr	r3, [r7, #12]
    77bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    77be:	1dfb      	adds	r3, r7, #7
    77c0:	7819      	ldrb	r1, [r3, #0]
    77c2:	4b05      	ldr	r3, [pc, #20]	; (77d8 <tcc_register_callback+0x3c>)
    77c4:	0089      	lsls	r1, r1, #2
    77c6:	58cb      	ldr	r3, [r1, r3]
    77c8:	431a      	orrs	r2, r3
    77ca:	68fb      	ldr	r3, [r7, #12]
    77cc:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    77ce:	2300      	movs	r3, #0
}
    77d0:	0018      	movs	r0, r3
    77d2:	46bd      	mov	sp, r7
    77d4:	b004      	add	sp, #16
    77d6:	bd80      	pop	{r7, pc}
    77d8:	00014a90 	.word	0x00014a90

000077dc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    77dc:	b580      	push	{r7, lr}
    77de:	b082      	sub	sp, #8
    77e0:	af00      	add	r7, sp, #0
    77e2:	6078      	str	r0, [r7, #4]
    77e4:	000a      	movs	r2, r1
    77e6:	1cfb      	adds	r3, r7, #3
    77e8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    77ea:	687b      	ldr	r3, [r7, #4]
    77ec:	681b      	ldr	r3, [r3, #0]
    77ee:	0018      	movs	r0, r3
    77f0:	4b0f      	ldr	r3, [pc, #60]	; (7830 <tcc_enable_callback+0x54>)
    77f2:	4798      	blx	r3
    77f4:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    77f6:	0018      	movs	r0, r3
    77f8:	4b0e      	ldr	r3, [pc, #56]	; (7834 <tcc_enable_callback+0x58>)
    77fa:	4798      	blx	r3
    77fc:	0003      	movs	r3, r0
    77fe:	0018      	movs	r0, r3
    7800:	4b0d      	ldr	r3, [pc, #52]	; (7838 <tcc_enable_callback+0x5c>)
    7802:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7808:	1cfb      	adds	r3, r7, #3
    780a:	7819      	ldrb	r1, [r3, #0]
    780c:	4b0b      	ldr	r3, [pc, #44]	; (783c <tcc_enable_callback+0x60>)
    780e:	0089      	lsls	r1, r1, #2
    7810:	58cb      	ldr	r3, [r1, r3]
    7812:	431a      	orrs	r2, r3
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	681b      	ldr	r3, [r3, #0]
    781c:	1cfa      	adds	r2, r7, #3
    781e:	7811      	ldrb	r1, [r2, #0]
    7820:	4a06      	ldr	r2, [pc, #24]	; (783c <tcc_enable_callback+0x60>)
    7822:	0089      	lsls	r1, r1, #2
    7824:	588a      	ldr	r2, [r1, r2]
    7826:	629a      	str	r2, [r3, #40]	; 0x28
}
    7828:	46c0      	nop			; (mov r8, r8)
    782a:	46bd      	mov	sp, r7
    782c:	b002      	add	sp, #8
    782e:	bd80      	pop	{r7, pc}
    7830:	00006ced 	.word	0x00006ced
    7834:	0000777d 	.word	0x0000777d
    7838:	00007751 	.word	0x00007751
    783c:	00014a90 	.word	0x00014a90

00007840 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    7840:	b580      	push	{r7, lr}
    7842:	af00      	add	r7, sp, #0
    7844:	2000      	movs	r0, #0
    7846:	4b02      	ldr	r3, [pc, #8]	; (7850 <TCC0_Handler+0x10>)
    7848:	4798      	blx	r3
    784a:	46c0      	nop			; (mov r8, r8)
    784c:	46bd      	mov	sp, r7
    784e:	bd80      	pop	{r7, pc}
    7850:	0000787d 	.word	0x0000787d

00007854 <TCC1_Handler>:
    7854:	b580      	push	{r7, lr}
    7856:	af00      	add	r7, sp, #0
    7858:	2001      	movs	r0, #1
    785a:	4b02      	ldr	r3, [pc, #8]	; (7864 <TCC1_Handler+0x10>)
    785c:	4798      	blx	r3
    785e:	46c0      	nop			; (mov r8, r8)
    7860:	46bd      	mov	sp, r7
    7862:	bd80      	pop	{r7, pc}
    7864:	0000787d 	.word	0x0000787d

00007868 <TCC2_Handler>:
    7868:	b580      	push	{r7, lr}
    786a:	af00      	add	r7, sp, #0
    786c:	2002      	movs	r0, #2
    786e:	4b02      	ldr	r3, [pc, #8]	; (7878 <TCC2_Handler+0x10>)
    7870:	4798      	blx	r3
    7872:	46c0      	nop			; (mov r8, r8)
    7874:	46bd      	mov	sp, r7
    7876:	bd80      	pop	{r7, pc}
    7878:	0000787d 	.word	0x0000787d

0000787c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    787c:	b580      	push	{r7, lr}
    787e:	b086      	sub	sp, #24
    7880:	af00      	add	r7, sp, #0
    7882:	0002      	movs	r2, r0
    7884:	1dfb      	adds	r3, r7, #7
    7886:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    7888:	1dfb      	adds	r3, r7, #7
    788a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    788c:	4b18      	ldr	r3, [pc, #96]	; (78f0 <_tcc_interrupt_handler+0x74>)
    788e:	0092      	lsls	r2, r2, #2
    7890:	58d3      	ldr	r3, [r2, r3]
    7892:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    7894:	693b      	ldr	r3, [r7, #16]
    7896:	681b      	ldr	r3, [r3, #0]
    7898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    789a:	693b      	ldr	r3, [r7, #16]
    789c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    789e:	401a      	ands	r2, r3
			module->enable_callback_mask);
    78a0:	693b      	ldr	r3, [r7, #16]
    78a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    78a4:	4013      	ands	r3, r2
    78a6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    78a8:	2300      	movs	r3, #0
    78aa:	617b      	str	r3, [r7, #20]
    78ac:	e019      	b.n	78e2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    78ae:	4b11      	ldr	r3, [pc, #68]	; (78f4 <_tcc_interrupt_handler+0x78>)
    78b0:	697a      	ldr	r2, [r7, #20]
    78b2:	0092      	lsls	r2, r2, #2
    78b4:	58d3      	ldr	r3, [r2, r3]
    78b6:	68fa      	ldr	r2, [r7, #12]
    78b8:	4013      	ands	r3, r2
    78ba:	d00f      	beq.n	78dc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    78bc:	693a      	ldr	r2, [r7, #16]
    78be:	697b      	ldr	r3, [r7, #20]
    78c0:	009b      	lsls	r3, r3, #2
    78c2:	18d3      	adds	r3, r2, r3
    78c4:	3304      	adds	r3, #4
    78c6:	681b      	ldr	r3, [r3, #0]
    78c8:	693a      	ldr	r2, [r7, #16]
    78ca:	0010      	movs	r0, r2
    78cc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    78ce:	693b      	ldr	r3, [r7, #16]
    78d0:	681b      	ldr	r3, [r3, #0]
    78d2:	4a08      	ldr	r2, [pc, #32]	; (78f4 <_tcc_interrupt_handler+0x78>)
    78d4:	6979      	ldr	r1, [r7, #20]
    78d6:	0089      	lsls	r1, r1, #2
    78d8:	588a      	ldr	r2, [r1, r2]
    78da:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    78dc:	697b      	ldr	r3, [r7, #20]
    78de:	3301      	adds	r3, #1
    78e0:	617b      	str	r3, [r7, #20]
    78e2:	697b      	ldr	r3, [r7, #20]
    78e4:	2b0b      	cmp	r3, #11
    78e6:	dde2      	ble.n	78ae <_tcc_interrupt_handler+0x32>
		}
	}
}
    78e8:	46c0      	nop			; (mov r8, r8)
    78ea:	46bd      	mov	sp, r7
    78ec:	b006      	add	sp, #24
    78ee:	bd80      	pop	{r7, pc}
    78f0:	200005dc 	.word	0x200005dc
    78f4:	00014a90 	.word	0x00014a90

000078f8 <stream_writer_init>:
#include "iot/stream_writer.h"
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    78f8:	b580      	push	{r7, lr}
    78fa:	b084      	sub	sp, #16
    78fc:	af00      	add	r7, sp, #0
    78fe:	60f8      	str	r0, [r7, #12]
    7900:	60b9      	str	r1, [r7, #8]
    7902:	607a      	str	r2, [r7, #4]
    7904:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    7906:	68fb      	ldr	r3, [r7, #12]
    7908:	687a      	ldr	r2, [r7, #4]
    790a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    790c:	68fb      	ldr	r3, [r7, #12]
    790e:	68ba      	ldr	r2, [r7, #8]
    7910:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    7912:	68fb      	ldr	r3, [r7, #12]
    7914:	2200      	movs	r2, #0
    7916:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    7918:	68fb      	ldr	r3, [r7, #12]
    791a:	683a      	ldr	r2, [r7, #0]
    791c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    791e:	68fb      	ldr	r3, [r7, #12]
    7920:	69ba      	ldr	r2, [r7, #24]
    7922:	60da      	str	r2, [r3, #12]
}
    7924:	46c0      	nop			; (mov r8, r8)
    7926:	46bd      	mov	sp, r7
    7928:	b004      	add	sp, #16
    792a:	bd80      	pop	{r7, pc}

0000792c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    792c:	b580      	push	{r7, lr}
    792e:	b084      	sub	sp, #16
    7930:	af00      	add	r7, sp, #0
    7932:	6078      	str	r0, [r7, #4]
    7934:	000a      	movs	r2, r1
    7936:	1cfb      	adds	r3, r7, #3
    7938:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    793a:	687b      	ldr	r3, [r7, #4]
    793c:	681a      	ldr	r2, [r3, #0]
    793e:	687b      	ldr	r3, [r7, #4]
    7940:	685b      	ldr	r3, [r3, #4]
    7942:	1ad3      	subs	r3, r2, r3
    7944:	60fb      	str	r3, [r7, #12]

	if (remain < 1) {
    7946:	68fb      	ldr	r3, [r7, #12]
    7948:	2b00      	cmp	r3, #0
    794a:	dc03      	bgt.n	7954 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	0018      	movs	r0, r3
    7950:	4b08      	ldr	r3, [pc, #32]	; (7974 <stream_writer_send_8+0x48>)
    7952:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    7954:	687b      	ldr	r3, [r7, #4]
    7956:	6919      	ldr	r1, [r3, #16]
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	685b      	ldr	r3, [r3, #4]
    795c:	1c58      	adds	r0, r3, #1
    795e:	687a      	ldr	r2, [r7, #4]
    7960:	6050      	str	r0, [r2, #4]
    7962:	18cb      	adds	r3, r1, r3
    7964:	1cfa      	adds	r2, r7, #3
    7966:	7812      	ldrb	r2, [r2, #0]
    7968:	701a      	strb	r2, [r3, #0]
}
    796a:	46c0      	nop			; (mov r8, r8)
    796c:	46bd      	mov	sp, r7
    796e:	b004      	add	sp, #16
    7970:	bd80      	pop	{r7, pc}
    7972:	46c0      	nop			; (mov r8, r8)
    7974:	000079f5 	.word	0x000079f5

00007978 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    7978:	b580      	push	{r7, lr}
    797a:	b082      	sub	sp, #8
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
    7980:	000a      	movs	r2, r1
    7982:	1cbb      	adds	r3, r7, #2
    7984:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    7986:	1cbb      	adds	r3, r7, #2
    7988:	2200      	movs	r2, #0
    798a:	5e9b      	ldrsh	r3, [r3, r2]
    798c:	121b      	asrs	r3, r3, #8
    798e:	b21b      	sxth	r3, r3
    7990:	b25a      	sxtb	r2, r3
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	0011      	movs	r1, r2
    7996:	0018      	movs	r0, r3
    7998:	4b06      	ldr	r3, [pc, #24]	; (79b4 <stream_writer_send_16BE+0x3c>)
    799a:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
    799c:	1cbb      	adds	r3, r7, #2
    799e:	881b      	ldrh	r3, [r3, #0]
    79a0:	b25a      	sxtb	r2, r3
    79a2:	687b      	ldr	r3, [r7, #4]
    79a4:	0011      	movs	r1, r2
    79a6:	0018      	movs	r0, r3
    79a8:	4b02      	ldr	r3, [pc, #8]	; (79b4 <stream_writer_send_16BE+0x3c>)
    79aa:	4798      	blx	r3
}
    79ac:	46c0      	nop			; (mov r8, r8)
    79ae:	46bd      	mov	sp, r7
    79b0:	b002      	add	sp, #8
    79b2:	bd80      	pop	{r7, pc}
    79b4:	0000792d 	.word	0x0000792d

000079b8 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    79b8:	b580      	push	{r7, lr}
    79ba:	b084      	sub	sp, #16
    79bc:	af00      	add	r7, sp, #0
    79be:	60f8      	str	r0, [r7, #12]
    79c0:	60b9      	str	r1, [r7, #8]
    79c2:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    79c4:	e00d      	b.n	79e2 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    79c6:	68bb      	ldr	r3, [r7, #8]
    79c8:	781b      	ldrb	r3, [r3, #0]
    79ca:	b25a      	sxtb	r2, r3
    79cc:	68fb      	ldr	r3, [r7, #12]
    79ce:	0011      	movs	r1, r2
    79d0:	0018      	movs	r0, r3
    79d2:	4b07      	ldr	r3, [pc, #28]	; (79f0 <stream_writer_send_buffer+0x38>)
    79d4:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    79d6:	687b      	ldr	r3, [r7, #4]
    79d8:	3b01      	subs	r3, #1
    79da:	607b      	str	r3, [r7, #4]
    79dc:	68bb      	ldr	r3, [r7, #8]
    79de:	3301      	adds	r3, #1
    79e0:	60bb      	str	r3, [r7, #8]
    79e2:	687b      	ldr	r3, [r7, #4]
    79e4:	2b00      	cmp	r3, #0
    79e6:	d1ee      	bne.n	79c6 <stream_writer_send_buffer+0xe>
	}
}
    79e8:	46c0      	nop			; (mov r8, r8)
    79ea:	46bd      	mov	sp, r7
    79ec:	b004      	add	sp, #16
    79ee:	bd80      	pop	{r7, pc}
    79f0:	0000792d 	.word	0x0000792d

000079f4 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    79f4:	b590      	push	{r4, r7, lr}
    79f6:	b083      	sub	sp, #12
    79f8:	af00      	add	r7, sp, #0
    79fa:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    79fc:	687b      	ldr	r3, [r7, #4]
    79fe:	685b      	ldr	r3, [r3, #4]
    7a00:	2b00      	cmp	r3, #0
    7a02:	d00c      	beq.n	7a1e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	689c      	ldr	r4, [r3, #8]
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	68d8      	ldr	r0, [r3, #12]
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	6919      	ldr	r1, [r3, #16]
    7a10:	687b      	ldr	r3, [r7, #4]
    7a12:	685b      	ldr	r3, [r3, #4]
    7a14:	001a      	movs	r2, r3
    7a16:	47a0      	blx	r4
		writer->written = 0;
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	2200      	movs	r2, #0
    7a1c:	605a      	str	r2, [r3, #4]
	}
}
    7a1e:	46c0      	nop			; (mov r8, r8)
    7a20:	46bd      	mov	sp, r7
    7a22:	b003      	add	sp, #12
    7a24:	bd90      	pop	{r4, r7, pc}
	...

00007a28 <system_cpu_clock_get_hz>:
{
    7a28:	b580      	push	{r7, lr}
    7a2a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    7a2c:	2000      	movs	r0, #0
    7a2e:	4b05      	ldr	r3, [pc, #20]	; (7a44 <system_cpu_clock_get_hz+0x1c>)
    7a30:	4798      	blx	r3
    7a32:	0002      	movs	r2, r0
    7a34:	4b04      	ldr	r3, [pc, #16]	; (7a48 <system_cpu_clock_get_hz+0x20>)
    7a36:	7a1b      	ldrb	r3, [r3, #8]
    7a38:	b2db      	uxtb	r3, r3
    7a3a:	40da      	lsrs	r2, r3
    7a3c:	0013      	movs	r3, r2
}
    7a3e:	0018      	movs	r0, r3
    7a40:	46bd      	mov	sp, r7
    7a42:	bd80      	pop	{r7, pc}
    7a44:	0000c411 	.word	0x0000c411
    7a48:	40000400 	.word	0x40000400

00007a4c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    7a4c:	b580      	push	{r7, lr}
    7a4e:	b084      	sub	sp, #16
    7a50:	af00      	add	r7, sp, #0
    7a52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	681b      	ldr	r3, [r3, #0]
    7a58:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    7a5a:	46c0      	nop			; (mov r8, r8)
    7a5c:	68fb      	ldr	r3, [r7, #12]
    7a5e:	689b      	ldr	r3, [r3, #8]
    7a60:	2202      	movs	r2, #2
    7a62:	4013      	ands	r3, r2
    7a64:	d1fa      	bne.n	7a5c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7a66:	68fb      	ldr	r3, [r7, #12]
    7a68:	681b      	ldr	r3, [r3, #0]
    7a6a:	2202      	movs	r2, #2
    7a6c:	431a      	orrs	r2, r3
    7a6e:	68fb      	ldr	r3, [r7, #12]
    7a70:	601a      	str	r2, [r3, #0]
}
    7a72:	46c0      	nop			; (mov r8, r8)
    7a74:	46bd      	mov	sp, r7
    7a76:	b004      	add	sp, #16
    7a78:	bd80      	pop	{r7, pc}
	...

00007a7c <sw_timer_tcc_callback>:
 * This function performs to the increasing the tick count.
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    7a7c:	b580      	push	{r7, lr}
    7a7e:	b082      	sub	sp, #8
    7a80:	af00      	add	r7, sp, #0
    7a82:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    7a84:	4b04      	ldr	r3, [pc, #16]	; (7a98 <sw_timer_tcc_callback+0x1c>)
    7a86:	681b      	ldr	r3, [r3, #0]
    7a88:	1c5a      	adds	r2, r3, #1
    7a8a:	4b03      	ldr	r3, [pc, #12]	; (7a98 <sw_timer_tcc_callback+0x1c>)
    7a8c:	601a      	str	r2, [r3, #0]
}
    7a8e:	46c0      	nop			; (mov r8, r8)
    7a90:	46bd      	mov	sp, r7
    7a92:	b002      	add	sp, #8
    7a94:	bd80      	pop	{r7, pc}
    7a96:	46c0      	nop			; (mov r8, r8)
    7a98:	20000284 	.word	0x20000284

00007a9c <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    7a9c:	b580      	push	{r7, lr}
    7a9e:	b082      	sub	sp, #8
    7aa0:	af00      	add	r7, sp, #0
    7aa2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	2264      	movs	r2, #100	; 0x64
    7aa8:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    7aaa:	687b      	ldr	r3, [r7, #4]
    7aac:	2200      	movs	r2, #0
    7aae:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	2200      	movs	r2, #0
    7ab4:	705a      	strb	r2, [r3, #1]
}
    7ab6:	46c0      	nop			; (mov r8, r8)
    7ab8:	46bd      	mov	sp, r7
    7aba:	b002      	add	sp, #8
    7abc:	bd80      	pop	{r7, pc}
	...

00007ac0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    7ac0:	b590      	push	{r4, r7, lr}
    7ac2:	b0b1      	sub	sp, #196	; 0xc4
    7ac4:	af00      	add	r7, sp, #0
    7ac6:	6078      	str	r0, [r7, #4]
    7ac8:	6039      	str	r1, [r7, #0]
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    7aca:	230c      	movs	r3, #12
    7acc:	18fb      	adds	r3, r7, r3
    7ace:	4a2e      	ldr	r2, [pc, #184]	; (7b88 <sw_timer_init+0xc8>)
    7ad0:	ca13      	ldmia	r2!, {r0, r1, r4}
    7ad2:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    7ad4:	683b      	ldr	r3, [r7, #0]
    7ad6:	885b      	ldrh	r3, [r3, #2]
    7ad8:	001a      	movs	r2, r3
    7ada:	687b      	ldr	r3, [r7, #4]
    7adc:	655a      	str	r2, [r3, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	3314      	adds	r3, #20
    7ae2:	22bc      	movs	r2, #188	; 0xbc
    7ae4:	18ba      	adds	r2, r7, r2
    7ae6:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    7ae8:	683b      	ldr	r3, [r7, #0]
    7aea:	781b      	ldrb	r3, [r3, #0]
    7aec:	001a      	movs	r2, r3
    7aee:	230c      	movs	r3, #12
    7af0:	18fb      	adds	r3, r7, r3
    7af2:	0092      	lsls	r2, r2, #2
    7af4:	58d2      	ldr	r2, [r2, r3]
    7af6:	2318      	movs	r3, #24
    7af8:	18fb      	adds	r3, r7, r3
    7afa:	0011      	movs	r1, r2
    7afc:	0018      	movs	r0, r3
    7afe:	4b23      	ldr	r3, [pc, #140]	; (7b8c <sw_timer_init+0xcc>)
    7b00:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    7b02:	4b23      	ldr	r3, [pc, #140]	; (7b90 <sw_timer_init+0xd0>)
    7b04:	4798      	blx	r3
    7b06:	0004      	movs	r4, r0
    7b08:	683b      	ldr	r3, [r7, #0]
    7b0a:	885b      	ldrh	r3, [r3, #2]
    7b0c:	001a      	movs	r2, r3
    7b0e:	4b21      	ldr	r3, [pc, #132]	; (7b94 <sw_timer_init+0xd4>)
    7b10:	0011      	movs	r1, r2
    7b12:	22fa      	movs	r2, #250	; 0xfa
    7b14:	0210      	lsls	r0, r2, #8
    7b16:	4798      	blx	r3
    7b18:	0003      	movs	r3, r0
    7b1a:	001a      	movs	r2, r3
    7b1c:	4b1e      	ldr	r3, [pc, #120]	; (7b98 <sw_timer_init+0xd8>)
    7b1e:	0011      	movs	r1, r2
    7b20:	0020      	movs	r0, r4
    7b22:	4798      	blx	r3
    7b24:	0003      	movs	r3, r0
    7b26:	001a      	movs	r2, r3
    7b28:	2318      	movs	r3, #24
    7b2a:	18fb      	adds	r3, r7, r3
    7b2c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    7b2e:	2318      	movs	r3, #24
    7b30:	18fb      	adds	r3, r7, r3
    7b32:	2205      	movs	r2, #5
    7b34:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    7b36:	683b      	ldr	r3, [r7, #0]
    7b38:	781b      	ldrb	r3, [r3, #0]
    7b3a:	001a      	movs	r2, r3
    7b3c:	230c      	movs	r3, #12
    7b3e:	18fb      	adds	r3, r7, r3
    7b40:	0092      	lsls	r2, r2, #2
    7b42:	58d1      	ldr	r1, [r2, r3]
    7b44:	2318      	movs	r3, #24
    7b46:	18fa      	adds	r2, r7, r3
    7b48:	23bc      	movs	r3, #188	; 0xbc
    7b4a:	18fb      	adds	r3, r7, r3
    7b4c:	681b      	ldr	r3, [r3, #0]
    7b4e:	0018      	movs	r0, r3
    7b50:	4b12      	ldr	r3, [pc, #72]	; (7b9c <sw_timer_init+0xdc>)
    7b52:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    7b54:	683b      	ldr	r3, [r7, #0]
    7b56:	785b      	ldrb	r3, [r3, #1]
    7b58:	3308      	adds	r3, #8
    7b5a:	b2da      	uxtb	r2, r3
    7b5c:	4910      	ldr	r1, [pc, #64]	; (7ba0 <sw_timer_init+0xe0>)
    7b5e:	23bc      	movs	r3, #188	; 0xbc
    7b60:	18fb      	adds	r3, r7, r3
    7b62:	681b      	ldr	r3, [r3, #0]
    7b64:	0018      	movs	r0, r3
    7b66:	4b0f      	ldr	r3, [pc, #60]	; (7ba4 <sw_timer_init+0xe4>)
    7b68:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    7b6a:	683b      	ldr	r3, [r7, #0]
    7b6c:	785b      	ldrb	r3, [r3, #1]
    7b6e:	3308      	adds	r3, #8
    7b70:	b2da      	uxtb	r2, r3
    7b72:	23bc      	movs	r3, #188	; 0xbc
    7b74:	18fb      	adds	r3, r7, r3
    7b76:	681b      	ldr	r3, [r3, #0]
    7b78:	0011      	movs	r1, r2
    7b7a:	0018      	movs	r0, r3
    7b7c:	4b0a      	ldr	r3, [pc, #40]	; (7ba8 <sw_timer_init+0xe8>)
    7b7e:	4798      	blx	r3
}
    7b80:	46c0      	nop			; (mov r8, r8)
    7b82:	46bd      	mov	sp, r7
    7b84:	b031      	add	sp, #196	; 0xc4
    7b86:	bd90      	pop	{r4, r7, pc}
    7b88:	00014ac0 	.word	0x00014ac0
    7b8c:	00006d29 	.word	0x00006d29
    7b90:	00007a29 	.word	0x00007a29
    7b94:	00011555 	.word	0x00011555
    7b98:	00011441 	.word	0x00011441
    7b9c:	00007385 	.word	0x00007385
    7ba0:	00007a7d 	.word	0x00007a7d
    7ba4:	0000779d 	.word	0x0000779d
    7ba8:	000077dd 	.word	0x000077dd

00007bac <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    7bac:	b580      	push	{r7, lr}
    7bae:	b084      	sub	sp, #16
    7bb0:	af00      	add	r7, sp, #0
    7bb2:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;

	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	3314      	adds	r3, #20
    7bb8:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    7bba:	68fb      	ldr	r3, [r7, #12]
    7bbc:	0018      	movs	r0, r3
    7bbe:	4b03      	ldr	r3, [pc, #12]	; (7bcc <sw_timer_enable+0x20>)
    7bc0:	4798      	blx	r3
}
    7bc2:	46c0      	nop			; (mov r8, r8)
    7bc4:	46bd      	mov	sp, r7
    7bc6:	b004      	add	sp, #16
    7bc8:	bd80      	pop	{r7, pc}
    7bca:	46c0      	nop			; (mov r8, r8)
    7bcc:	00007a4d 	.word	0x00007a4d

00007bd0 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    7bd0:	b580      	push	{r7, lr}
    7bd2:	b086      	sub	sp, #24
    7bd4:	af00      	add	r7, sp, #0
    7bd6:	60f8      	str	r0, [r7, #12]
    7bd8:	60b9      	str	r1, [r7, #8]
    7bda:	607a      	str	r2, [r7, #4]
    7bdc:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    7bde:	2300      	movs	r3, #0
    7be0:	617b      	str	r3, [r7, #20]
    7be2:	e032      	b.n	7c4a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    7be4:	68f9      	ldr	r1, [r7, #12]
    7be6:	697a      	ldr	r2, [r7, #20]
    7be8:	0013      	movs	r3, r2
    7bea:	009b      	lsls	r3, r3, #2
    7bec:	189b      	adds	r3, r3, r2
    7bee:	009b      	lsls	r3, r3, #2
    7bf0:	5c5b      	ldrb	r3, [r3, r1]
    7bf2:	07db      	lsls	r3, r3, #31
    7bf4:	0fdb      	lsrs	r3, r3, #31
    7bf6:	b2db      	uxtb	r3, r3
    7bf8:	2b00      	cmp	r3, #0
    7bfa:	d123      	bne.n	7c44 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    7bfc:	697a      	ldr	r2, [r7, #20]
    7bfe:	0013      	movs	r3, r2
    7c00:	009b      	lsls	r3, r3, #2
    7c02:	189b      	adds	r3, r3, r2
    7c04:	009b      	lsls	r3, r3, #2
    7c06:	68fa      	ldr	r2, [r7, #12]
    7c08:	18d3      	adds	r3, r2, r3
    7c0a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    7c0c:	693b      	ldr	r3, [r7, #16]
    7c0e:	68ba      	ldr	r2, [r7, #8]
    7c10:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    7c12:	693b      	ldr	r3, [r7, #16]
    7c14:	781a      	ldrb	r2, [r3, #0]
    7c16:	2102      	movs	r1, #2
    7c18:	438a      	bics	r2, r1
    7c1a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    7c1c:	693b      	ldr	r3, [r7, #16]
    7c1e:	687a      	ldr	r2, [r7, #4]
    7c20:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    7c22:	68fb      	ldr	r3, [r7, #12]
    7c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7c26:	4b0d      	ldr	r3, [pc, #52]	; (7c5c <sw_timer_register_callback+0x8c>)
    7c28:	0011      	movs	r1, r2
    7c2a:	6838      	ldr	r0, [r7, #0]
    7c2c:	4798      	blx	r3
    7c2e:	0003      	movs	r3, r0
    7c30:	001a      	movs	r2, r3
    7c32:	693b      	ldr	r3, [r7, #16]
    7c34:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    7c36:	693b      	ldr	r3, [r7, #16]
    7c38:	781a      	ldrb	r2, [r3, #0]
    7c3a:	2101      	movs	r1, #1
    7c3c:	430a      	orrs	r2, r1
    7c3e:	701a      	strb	r2, [r3, #0]
			return index;
    7c40:	697b      	ldr	r3, [r7, #20]
    7c42:	e007      	b.n	7c54 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    7c44:	697b      	ldr	r3, [r7, #20]
    7c46:	3301      	adds	r3, #1
    7c48:	617b      	str	r3, [r7, #20]
    7c4a:	697b      	ldr	r3, [r7, #20]
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	ddc9      	ble.n	7be4 <sw_timer_register_callback+0x14>
		}
	}

	return -1;
    7c50:	2301      	movs	r3, #1
    7c52:	425b      	negs	r3, r3
}
    7c54:	0018      	movs	r0, r3
    7c56:	46bd      	mov	sp, r7
    7c58:	b006      	add	sp, #24
    7c5a:	bd80      	pop	{r7, pc}
    7c5c:	00011441 	.word	0x00011441

00007c60 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    7c60:	b580      	push	{r7, lr}
    7c62:	b086      	sub	sp, #24
    7c64:	af00      	add	r7, sp, #0
    7c66:	60f8      	str	r0, [r7, #12]
    7c68:	60b9      	str	r1, [r7, #8]
    7c6a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    7c6c:	68ba      	ldr	r2, [r7, #8]
    7c6e:	0013      	movs	r3, r2
    7c70:	009b      	lsls	r3, r3, #2
    7c72:	189b      	adds	r3, r3, r2
    7c74:	009b      	lsls	r3, r3, #2
    7c76:	68fa      	ldr	r2, [r7, #12]
    7c78:	18d3      	adds	r3, r2, r3
    7c7a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    7c7c:	697b      	ldr	r3, [r7, #20]
    7c7e:	781a      	ldrb	r2, [r3, #0]
    7c80:	2102      	movs	r1, #2
    7c82:	430a      	orrs	r2, r1
    7c84:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    7c86:	68fb      	ldr	r3, [r7, #12]
    7c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7c8a:	4b07      	ldr	r3, [pc, #28]	; (7ca8 <sw_timer_enable_callback+0x48>)
    7c8c:	0011      	movs	r1, r2
    7c8e:	6878      	ldr	r0, [r7, #4]
    7c90:	4798      	blx	r3
    7c92:	0003      	movs	r3, r0
    7c94:	001a      	movs	r2, r3
    7c96:	4b05      	ldr	r3, [pc, #20]	; (7cac <sw_timer_enable_callback+0x4c>)
    7c98:	681b      	ldr	r3, [r3, #0]
    7c9a:	18d2      	adds	r2, r2, r3
    7c9c:	697b      	ldr	r3, [r7, #20]
    7c9e:	611a      	str	r2, [r3, #16]
}
    7ca0:	46c0      	nop			; (mov r8, r8)
    7ca2:	46bd      	mov	sp, r7
    7ca4:	b006      	add	sp, #24
    7ca6:	bd80      	pop	{r7, pc}
    7ca8:	00011441 	.word	0x00011441
    7cac:	20000284 	.word	0x20000284

00007cb0 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b084      	sub	sp, #16
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    7cba:	683a      	ldr	r2, [r7, #0]
    7cbc:	0013      	movs	r3, r2
    7cbe:	009b      	lsls	r3, r3, #2
    7cc0:	189b      	adds	r3, r3, r2
    7cc2:	009b      	lsls	r3, r3, #2
    7cc4:	687a      	ldr	r2, [r7, #4]
    7cc6:	18d3      	adds	r3, r2, r3
    7cc8:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    7cca:	68fb      	ldr	r3, [r7, #12]
    7ccc:	781a      	ldrb	r2, [r3, #0]
    7cce:	2102      	movs	r1, #2
    7cd0:	438a      	bics	r2, r1
    7cd2:	701a      	strb	r2, [r3, #0]
}
    7cd4:	46c0      	nop			; (mov r8, r8)
    7cd6:	46bd      	mov	sp, r7
    7cd8:	b004      	add	sp, #16
    7cda:	bd80      	pop	{r7, pc}

00007cdc <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    7cdc:	b590      	push	{r4, r7, lr}
    7cde:	b085      	sub	sp, #20
    7ce0:	af00      	add	r7, sp, #0
    7ce2:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    7ce4:	2300      	movs	r3, #0
    7ce6:	60fb      	str	r3, [r7, #12]
    7ce8:	e053      	b.n	7d92 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    7cea:	6879      	ldr	r1, [r7, #4]
    7cec:	68fa      	ldr	r2, [r7, #12]
    7cee:	0013      	movs	r3, r2
    7cf0:	009b      	lsls	r3, r3, #2
    7cf2:	189b      	adds	r3, r3, r2
    7cf4:	009b      	lsls	r3, r3, #2
    7cf6:	5c5b      	ldrb	r3, [r3, r1]
    7cf8:	07db      	lsls	r3, r3, #31
    7cfa:	0fdb      	lsrs	r3, r3, #31
    7cfc:	b2db      	uxtb	r3, r3
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d044      	beq.n	7d8c <sw_timer_task+0xb0>
    7d02:	6879      	ldr	r1, [r7, #4]
    7d04:	68fa      	ldr	r2, [r7, #12]
    7d06:	0013      	movs	r3, r2
    7d08:	009b      	lsls	r3, r3, #2
    7d0a:	189b      	adds	r3, r3, r2
    7d0c:	009b      	lsls	r3, r3, #2
    7d0e:	5c5b      	ldrb	r3, [r3, r1]
    7d10:	079b      	lsls	r3, r3, #30
    7d12:	0fdb      	lsrs	r3, r3, #31
    7d14:	b2db      	uxtb	r3, r3
    7d16:	2b00      	cmp	r3, #0
    7d18:	d038      	beq.n	7d8c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    7d1a:	68fa      	ldr	r2, [r7, #12]
    7d1c:	0013      	movs	r3, r2
    7d1e:	009b      	lsls	r3, r3, #2
    7d20:	189b      	adds	r3, r3, r2
    7d22:	009b      	lsls	r3, r3, #2
    7d24:	687a      	ldr	r2, [r7, #4]
    7d26:	18d3      	adds	r3, r2, r3
    7d28:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    7d2a:	68bb      	ldr	r3, [r7, #8]
    7d2c:	691a      	ldr	r2, [r3, #16]
    7d2e:	4b1c      	ldr	r3, [pc, #112]	; (7da0 <sw_timer_task+0xc4>)
    7d30:	681b      	ldr	r3, [r3, #0]
    7d32:	1ad3      	subs	r3, r2, r3
    7d34:	d52a      	bpl.n	7d8c <sw_timer_task+0xb0>
    7d36:	68bb      	ldr	r3, [r7, #8]
    7d38:	781b      	ldrb	r3, [r3, #0]
    7d3a:	2204      	movs	r2, #4
    7d3c:	4013      	ands	r3, r2
    7d3e:	b2db      	uxtb	r3, r3
    7d40:	2b00      	cmp	r3, #0
    7d42:	d123      	bne.n	7d8c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    7d44:	68bb      	ldr	r3, [r7, #8]
    7d46:	781a      	ldrb	r2, [r3, #0]
    7d48:	2104      	movs	r1, #4
    7d4a:	430a      	orrs	r2, r1
    7d4c:	701a      	strb	r2, [r3, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    7d4e:	68bb      	ldr	r3, [r7, #8]
    7d50:	685c      	ldr	r4, [r3, #4]
    7d52:	68bb      	ldr	r3, [r7, #8]
    7d54:	689a      	ldr	r2, [r3, #8]
    7d56:	68bb      	ldr	r3, [r7, #8]
    7d58:	68db      	ldr	r3, [r3, #12]
    7d5a:	68f9      	ldr	r1, [r7, #12]
    7d5c:	6878      	ldr	r0, [r7, #4]
    7d5e:	47a0      	blx	r4
				/* Timer was expired. */
				if (handler->period > 0) {
    7d60:	68bb      	ldr	r3, [r7, #8]
    7d62:	68db      	ldr	r3, [r3, #12]
    7d64:	2b00      	cmp	r3, #0
    7d66:	d007      	beq.n	7d78 <sw_timer_task+0x9c>
					handler->expire_time = sw_timer_tick + handler->period;
    7d68:	68bb      	ldr	r3, [r7, #8]
    7d6a:	68da      	ldr	r2, [r3, #12]
    7d6c:	4b0c      	ldr	r3, [pc, #48]	; (7da0 <sw_timer_task+0xc4>)
    7d6e:	681b      	ldr	r3, [r3, #0]
    7d70:	18d2      	adds	r2, r2, r3
    7d72:	68bb      	ldr	r3, [r7, #8]
    7d74:	611a      	str	r2, [r3, #16]
    7d76:	e004      	b.n	7d82 <sw_timer_task+0xa6>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    7d78:	68bb      	ldr	r3, [r7, #8]
    7d7a:	781a      	ldrb	r2, [r3, #0]
    7d7c:	2102      	movs	r1, #2
    7d7e:	438a      	bics	r2, r1
    7d80:	701a      	strb	r2, [r3, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    7d82:	68bb      	ldr	r3, [r7, #8]
    7d84:	781a      	ldrb	r2, [r3, #0]
    7d86:	2104      	movs	r1, #4
    7d88:	438a      	bics	r2, r1
    7d8a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    7d8c:	68fb      	ldr	r3, [r7, #12]
    7d8e:	3301      	adds	r3, #1
    7d90:	60fb      	str	r3, [r7, #12]
    7d92:	68fb      	ldr	r3, [r7, #12]
    7d94:	2b00      	cmp	r3, #0
    7d96:	dda8      	ble.n	7cea <sw_timer_task+0xe>
			}
		}
	}

}
    7d98:	46c0      	nop			; (mov r8, r8)
    7d9a:	46bd      	mov	sp, r7
    7d9c:	b005      	add	sp, #20
    7d9e:	bd90      	pop	{r4, r7, pc}
    7da0:	20000284 	.word	0x20000284

00007da4 <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
    7da4:	b590      	push	{r4, r7, lr}
    7da6:	b087      	sub	sp, #28
    7da8:	af02      	add	r7, sp, #8
    7daa:	0002      	movs	r2, r0
    7dac:	6039      	str	r1, [r7, #0]
    7dae:	1dfb      	adds	r3, r7, #7
    7db0:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
    7db2:	1dfb      	adds	r3, r7, #7
    7db4:	781b      	ldrb	r3, [r3, #0]
    7db6:	2b2c      	cmp	r3, #44	; 0x2c
    7db8:	d002      	beq.n	7dc0 <wifi_callback+0x1c>
    7dba:	2b32      	cmp	r3, #50	; 0x32
    7dbc:	d024      	beq.n	7e08 <wifi_callback+0x64>
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
		break;

	default:
		break;
    7dbe:	e040      	b.n	7e42 <wifi_callback+0x9e>
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
    7dc0:	683b      	ldr	r3, [r7, #0]
    7dc2:	60fb      	str	r3, [r7, #12]
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    7dc4:	68fb      	ldr	r3, [r7, #12]
    7dc6:	781b      	ldrb	r3, [r3, #0]
    7dc8:	2b01      	cmp	r3, #1
    7dca:	d106      	bne.n	7dda <wifi_callback+0x36>
			printf("Wi-Fi connected\r\n");
    7dcc:	4b1f      	ldr	r3, [pc, #124]	; (7e4c <wifi_callback+0xa8>)
    7dce:	0018      	movs	r0, r3
    7dd0:	4b1f      	ldr	r3, [pc, #124]	; (7e50 <wifi_callback+0xac>)
    7dd2:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    7dd4:	4b1f      	ldr	r3, [pc, #124]	; (7e54 <wifi_callback+0xb0>)
    7dd6:	4798      	blx	r3
		break;
    7dd8:	e032      	b.n	7e40 <wifi_callback+0x9c>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    7dda:	68fb      	ldr	r3, [r7, #12]
    7ddc:	781b      	ldrb	r3, [r3, #0]
    7dde:	2b00      	cmp	r3, #0
    7de0:	d12e      	bne.n	7e40 <wifi_callback+0x9c>
			printf("Wi-Fi disconnected\r\n");
    7de2:	4b1d      	ldr	r3, [pc, #116]	; (7e58 <wifi_callback+0xb4>)
    7de4:	0018      	movs	r0, r3
    7de6:	4b1a      	ldr	r3, [pc, #104]	; (7e50 <wifi_callback+0xac>)
    7de8:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    7dea:	4a1c      	ldr	r2, [pc, #112]	; (7e5c <wifi_callback+0xb8>)
    7dec:	481c      	ldr	r0, [pc, #112]	; (7e60 <wifi_callback+0xbc>)
    7dee:	23ff      	movs	r3, #255	; 0xff
    7df0:	9300      	str	r3, [sp, #0]
    7df2:	0013      	movs	r3, r2
    7df4:	2202      	movs	r2, #2
    7df6:	2112      	movs	r1, #18
    7df8:	4c1a      	ldr	r4, [pc, #104]	; (7e64 <wifi_callback+0xc0>)
    7dfa:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    7dfc:	4b1a      	ldr	r3, [pc, #104]	; (7e68 <wifi_callback+0xc4>)
    7dfe:	2101      	movs	r1, #1
    7e00:	0018      	movs	r0, r3
    7e02:	4b1a      	ldr	r3, [pc, #104]	; (7e6c <wifi_callback+0xc8>)
    7e04:	4798      	blx	r3
		break;
    7e06:	e01b      	b.n	7e40 <wifi_callback+0x9c>
		msg_ip_addr = (uint8 *)msg_data;
    7e08:	683b      	ldr	r3, [r7, #0]
    7e0a:	60bb      	str	r3, [r7, #8]
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    7e0c:	68bb      	ldr	r3, [r7, #8]
    7e0e:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    7e10:	0019      	movs	r1, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    7e12:	68bb      	ldr	r3, [r7, #8]
    7e14:	3301      	adds	r3, #1
    7e16:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    7e18:	001a      	movs	r2, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    7e1a:	68bb      	ldr	r3, [r7, #8]
    7e1c:	3302      	adds	r3, #2
    7e1e:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    7e20:	001c      	movs	r4, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    7e22:	68bb      	ldr	r3, [r7, #8]
    7e24:	3303      	adds	r3, #3
    7e26:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    7e28:	4811      	ldr	r0, [pc, #68]	; (7e70 <wifi_callback+0xcc>)
    7e2a:	9300      	str	r3, [sp, #0]
    7e2c:	0023      	movs	r3, r4
    7e2e:	4c11      	ldr	r4, [pc, #68]	; (7e74 <wifi_callback+0xd0>)
    7e30:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    7e32:	4a11      	ldr	r2, [pc, #68]	; (7e78 <wifi_callback+0xd4>)
    7e34:	4b0c      	ldr	r3, [pc, #48]	; (7e68 <wifi_callback+0xc4>)
    7e36:	0011      	movs	r1, r2
    7e38:	0018      	movs	r0, r3
    7e3a:	4b10      	ldr	r3, [pc, #64]	; (7e7c <wifi_callback+0xd8>)
    7e3c:	4798      	blx	r3
		break;
    7e3e:	e000      	b.n	7e42 <wifi_callback+0x9e>
		break;
    7e40:	46c0      	nop			; (mov r8, r8)
	}
}
    7e42:	46c0      	nop			; (mov r8, r8)
    7e44:	46bd      	mov	sp, r7
    7e46:	b005      	add	sp, #20
    7e48:	bd90      	pop	{r4, r7, pc}
    7e4a:	46c0      	nop			; (mov r8, r8)
    7e4c:	00014ae0 	.word	0x00014ae0
    7e50:	0000f1c9 	.word	0x0000f1c9
    7e54:	00002425 	.word	0x00002425
    7e58:	00014af4 	.word	0x00014af4
    7e5c:	00014b08 	.word	0x00014b08
    7e60:	00014b18 	.word	0x00014b18
    7e64:	00001f5d 	.word	0x00001f5d
    7e68:	20000288 	.word	0x20000288
    7e6c:	0000e175 	.word	0x0000e175
    7e70:	00014b2c 	.word	0x00014b2c
    7e74:	0000f0ad 	.word	0x0000f0ad
    7e78:	00014acc 	.word	0x00014acc
    7e7c:	0000d969 	.word	0x0000d969

00007e80 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    7e80:	b580      	push	{r7, lr}
    7e82:	b082      	sub	sp, #8
    7e84:	af00      	add	r7, sp, #0
    7e86:	603a      	str	r2, [r7, #0]
    7e88:	1dfb      	adds	r3, r7, #7
    7e8a:	1c02      	adds	r2, r0, #0
    7e8c:	701a      	strb	r2, [r3, #0]
    7e8e:	1dbb      	adds	r3, r7, #6
    7e90:	1c0a      	adds	r2, r1, #0
    7e92:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    7e94:	683a      	ldr	r2, [r7, #0]
    7e96:	1dbb      	adds	r3, r7, #6
    7e98:	7819      	ldrb	r1, [r3, #0]
    7e9a:	1dfb      	adds	r3, r7, #7
    7e9c:	781b      	ldrb	r3, [r3, #0]
    7e9e:	b25b      	sxtb	r3, r3
    7ea0:	0018      	movs	r0, r3
    7ea2:	4b03      	ldr	r3, [pc, #12]	; (7eb0 <socket_event_handler+0x30>)
    7ea4:	4798      	blx	r3
}
    7ea6:	46c0      	nop			; (mov r8, r8)
    7ea8:	46bd      	mov	sp, r7
    7eaa:	b002      	add	sp, #8
    7eac:	bd80      	pop	{r7, pc}
    7eae:	46c0      	nop			; (mov r8, r8)
    7eb0:	0000e4b5 	.word	0x0000e4b5

00007eb4 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    7eb4:	b580      	push	{r7, lr}
    7eb6:	b082      	sub	sp, #8
    7eb8:	af00      	add	r7, sp, #0
    7eba:	6078      	str	r0, [r7, #4]
    7ebc:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    7ebe:	683a      	ldr	r2, [r7, #0]
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	0011      	movs	r1, r2
    7ec4:	0018      	movs	r0, r3
    7ec6:	4b03      	ldr	r3, [pc, #12]	; (7ed4 <socket_resolve_handler+0x20>)
    7ec8:	4798      	blx	r3
}
    7eca:	46c0      	nop			; (mov r8, r8)
    7ecc:	46bd      	mov	sp, r7
    7ece:	b002      	add	sp, #8
    7ed0:	bd80      	pop	{r7, pc}
    7ed2:	46c0      	nop			; (mov r8, r8)
    7ed4:	0000d915 	.word	0x0000d915

00007ed8 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    7ed8:	b590      	push	{r4, r7, lr}
    7eda:	b08d      	sub	sp, #52	; 0x34
    7edc:	af06      	add	r7, sp, #24
    7ede:	60f8      	str	r0, [r7, #12]
    7ee0:	60b9      	str	r1, [r7, #8]
    7ee2:	607a      	str	r2, [r7, #4]
	switch (type) {
    7ee4:	68bb      	ldr	r3, [r7, #8]
    7ee6:	2b01      	cmp	r3, #1
    7ee8:	d02f      	beq.n	7f4a <mqtt_callback+0x72>
    7eea:	dc02      	bgt.n	7ef2 <mqtt_callback+0x1a>
    7eec:	2b00      	cmp	r3, #0
    7eee:	d007      	beq.n	7f00 <mqtt_callback+0x28>
	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer */
		printf("MQTT disconnected\r\n");
		break;
	}
}
    7ef0:	e14d      	b.n	818e <mqtt_callback+0x2b6>
	switch (type) {
    7ef2:	2b05      	cmp	r3, #5
    7ef4:	d100      	bne.n	7ef8 <mqtt_callback+0x20>
    7ef6:	e144      	b.n	8182 <mqtt_callback+0x2aa>
    7ef8:	2b06      	cmp	r3, #6
    7efa:	d100      	bne.n	7efe <mqtt_callback+0x26>
    7efc:	e079      	b.n	7ff2 <mqtt_callback+0x11a>
}
    7efe:	e146      	b.n	818e <mqtt_callback+0x2b6>
		if (data->sock_connected.result >= 0) {
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	681b      	ldr	r3, [r3, #0]
    7f04:	2b00      	cmp	r3, #0
    7f06:	db13      	blt.n	7f30 <mqtt_callback+0x58>
			mqtt_connect_broker(module_inst, 1, BROKERNAME, BROKERPASS, mqtt_user, NULL, NULL, 0, 0, 0);
    7f08:	49a3      	ldr	r1, [pc, #652]	; (8198 <mqtt_callback+0x2c0>)
    7f0a:	4aa4      	ldr	r2, [pc, #656]	; (819c <mqtt_callback+0x2c4>)
    7f0c:	68f8      	ldr	r0, [r7, #12]
    7f0e:	2300      	movs	r3, #0
    7f10:	9305      	str	r3, [sp, #20]
    7f12:	2300      	movs	r3, #0
    7f14:	9304      	str	r3, [sp, #16]
    7f16:	2300      	movs	r3, #0
    7f18:	9303      	str	r3, [sp, #12]
    7f1a:	2300      	movs	r3, #0
    7f1c:	9302      	str	r3, [sp, #8]
    7f1e:	2300      	movs	r3, #0
    7f20:	9301      	str	r3, [sp, #4]
    7f22:	4b9f      	ldr	r3, [pc, #636]	; (81a0 <mqtt_callback+0x2c8>)
    7f24:	9300      	str	r3, [sp, #0]
    7f26:	000b      	movs	r3, r1
    7f28:	2101      	movs	r1, #1
    7f2a:	4c9e      	ldr	r4, [pc, #632]	; (81a4 <mqtt_callback+0x2cc>)
    7f2c:	47a0      	blx	r4
	break;
    7f2e:	e12e      	b.n	818e <mqtt_callback+0x2b6>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    7f30:	4a9d      	ldr	r2, [pc, #628]	; (81a8 <mqtt_callback+0x2d0>)
    7f32:	4b9e      	ldr	r3, [pc, #632]	; (81ac <mqtt_callback+0x2d4>)
    7f34:	0011      	movs	r1, r2
    7f36:	0018      	movs	r0, r3
    7f38:	4b9d      	ldr	r3, [pc, #628]	; (81b0 <mqtt_callback+0x2d8>)
    7f3a:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    7f3c:	4a9a      	ldr	r2, [pc, #616]	; (81a8 <mqtt_callback+0x2d0>)
    7f3e:	68fb      	ldr	r3, [r7, #12]
    7f40:	0011      	movs	r1, r2
    7f42:	0018      	movs	r0, r3
    7f44:	4b9b      	ldr	r3, [pc, #620]	; (81b4 <mqtt_callback+0x2dc>)
    7f46:	4798      	blx	r3
	break;
    7f48:	e121      	b.n	818e <mqtt_callback+0x2b6>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	781b      	ldrb	r3, [r3, #0]
    7f4e:	2b00      	cmp	r3, #0
    7f50:	d146      	bne.n	7fe0 <mqtt_callback+0x108>
			  module_inst->busy = 0;
    7f52:	68fb      	ldr	r3, [r7, #12]
    7f54:	2243      	movs	r2, #67	; 0x43
    7f56:	5c99      	ldrb	r1, [r3, r2]
    7f58:	2008      	movs	r0, #8
    7f5a:	4381      	bics	r1, r0
    7f5c:	5499      	strb	r1, [r3, r2]
			  mqtt_subscribe(module_inst, PUMP_TOPIC "#", 1);
    7f5e:	4996      	ldr	r1, [pc, #600]	; (81b8 <mqtt_callback+0x2e0>)
    7f60:	68fb      	ldr	r3, [r7, #12]
    7f62:	2201      	movs	r2, #1
    7f64:	0018      	movs	r0, r3
    7f66:	4b95      	ldr	r3, [pc, #596]	; (81bc <mqtt_callback+0x2e4>)
    7f68:	4798      	blx	r3
			  mqtt_subscribe(module_inst, RELAY1_TOPIC "#", 1);
    7f6a:	4995      	ldr	r1, [pc, #596]	; (81c0 <mqtt_callback+0x2e8>)
    7f6c:	68fb      	ldr	r3, [r7, #12]
    7f6e:	2201      	movs	r2, #1
    7f70:	0018      	movs	r0, r3
    7f72:	4b92      	ldr	r3, [pc, #584]	; (81bc <mqtt_callback+0x2e4>)
    7f74:	4798      	blx	r3
			  mqtt_subscribe(module_inst, RELAY2_TOPIC "#", 1);
    7f76:	4993      	ldr	r1, [pc, #588]	; (81c4 <mqtt_callback+0x2ec>)
    7f78:	68fb      	ldr	r3, [r7, #12]
    7f7a:	2201      	movs	r2, #1
    7f7c:	0018      	movs	r0, r3
    7f7e:	4b8f      	ldr	r3, [pc, #572]	; (81bc <mqtt_callback+0x2e4>)
    7f80:	4798      	blx	r3
			  mqtt_subscribe(module_inst, LED_TOPIC "#", 1);
    7f82:	4991      	ldr	r1, [pc, #580]	; (81c8 <mqtt_callback+0x2f0>)
    7f84:	68fb      	ldr	r3, [r7, #12]
    7f86:	2201      	movs	r2, #1
    7f88:	0018      	movs	r0, r3
    7f8a:	4b8c      	ldr	r3, [pc, #560]	; (81bc <mqtt_callback+0x2e4>)
    7f8c:	4798      	blx	r3
			  mqtt_subscribe(module_inst, TEMPERATURE_TOPIC "#", 1);
    7f8e:	498f      	ldr	r1, [pc, #572]	; (81cc <mqtt_callback+0x2f4>)
    7f90:	68fb      	ldr	r3, [r7, #12]
    7f92:	2201      	movs	r2, #1
    7f94:	0018      	movs	r0, r3
    7f96:	4b89      	ldr	r3, [pc, #548]	; (81bc <mqtt_callback+0x2e4>)
    7f98:	4798      	blx	r3
			  mqtt_subscribe(module_inst, HUMIDITY_TOPIC "#", 1);
    7f9a:	498d      	ldr	r1, [pc, #564]	; (81d0 <mqtt_callback+0x2f8>)
    7f9c:	68fb      	ldr	r3, [r7, #12]
    7f9e:	2201      	movs	r2, #1
    7fa0:	0018      	movs	r0, r3
    7fa2:	4b86      	ldr	r3, [pc, #536]	; (81bc <mqtt_callback+0x2e4>)
    7fa4:	4798      	blx	r3
			  mqtt_subscribe(module_inst, LUX_TOPIC "#", 1);
    7fa6:	498b      	ldr	r1, [pc, #556]	; (81d4 <mqtt_callback+0x2fc>)
    7fa8:	68fb      	ldr	r3, [r7, #12]
    7faa:	2201      	movs	r2, #1
    7fac:	0018      	movs	r0, r3
    7fae:	4b83      	ldr	r3, [pc, #524]	; (81bc <mqtt_callback+0x2e4>)
    7fb0:	4798      	blx	r3
			  mqtt_subscribe(module_inst, MOISTURE_TOPIC "#", 1);
    7fb2:	4989      	ldr	r1, [pc, #548]	; (81d8 <mqtt_callback+0x300>)
    7fb4:	68fb      	ldr	r3, [r7, #12]
    7fb6:	2201      	movs	r2, #1
    7fb8:	0018      	movs	r0, r3
    7fba:	4b80      	ldr	r3, [pc, #512]	; (81bc <mqtt_callback+0x2e4>)
    7fbc:	4798      	blx	r3
			  mqtt_subscribe(module_inst, UPGRADE_TOPIC "#", 1);
    7fbe:	4987      	ldr	r1, [pc, #540]	; (81dc <mqtt_callback+0x304>)
    7fc0:	68fb      	ldr	r3, [r7, #12]
    7fc2:	2201      	movs	r2, #1
    7fc4:	0018      	movs	r0, r3
    7fc6:	4b7d      	ldr	r3, [pc, #500]	; (81bc <mqtt_callback+0x2e4>)
    7fc8:	4798      	blx	r3
			  mqtt_subscribe(module_inst, VERSION_TOPIC "#", 1);
    7fca:	4985      	ldr	r1, [pc, #532]	; (81e0 <mqtt_callback+0x308>)
    7fcc:	68fb      	ldr	r3, [r7, #12]
    7fce:	2201      	movs	r2, #1
    7fd0:	0018      	movs	r0, r3
    7fd2:	4b7a      	ldr	r3, [pc, #488]	; (81bc <mqtt_callback+0x2e4>)
    7fd4:	4798      	blx	r3
			printf("Preparation of MQTT has been completed.\r\n");
    7fd6:	4b83      	ldr	r3, [pc, #524]	; (81e4 <mqtt_callback+0x30c>)
    7fd8:	0018      	movs	r0, r3
    7fda:	4b83      	ldr	r3, [pc, #524]	; (81e8 <mqtt_callback+0x310>)
    7fdc:	4798      	blx	r3
		break;
    7fde:	e0d6      	b.n	818e <mqtt_callback+0x2b6>
			printf("MQTT broker declined your access! error code %d\r\n", data->connected.result);
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	781b      	ldrb	r3, [r3, #0]
    7fe4:	001a      	movs	r2, r3
    7fe6:	4b81      	ldr	r3, [pc, #516]	; (81ec <mqtt_callback+0x314>)
    7fe8:	0011      	movs	r1, r2
    7fea:	0018      	movs	r0, r3
    7fec:	4b70      	ldr	r3, [pc, #448]	; (81b0 <mqtt_callback+0x2d8>)
    7fee:	4798      	blx	r3
		break;
    7ff0:	e0cd      	b.n	818e <mqtt_callback+0x2b6>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL)
    7ff2:	687b      	ldr	r3, [r7, #4]
    7ff4:	681b      	ldr	r3, [r3, #0]
    7ff6:	2b00      	cmp	r3, #0
    7ff8:	d100      	bne.n	7ffc <mqtt_callback+0x124>
    7ffa:	e0c7      	b.n	818c <mqtt_callback+0x2b4>
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	689b      	ldr	r3, [r3, #8]
    8000:	2b00      	cmp	r3, #0
    8002:	d100      	bne.n	8006 <mqtt_callback+0x12e>
    8004:	e0c2      	b.n	818c <mqtt_callback+0x2b4>
			if (strncmp(data->recv_publish.topic, PUMP_TOPIC, strlen(PUMP_TOPIC)) == 0)
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	4979      	ldr	r1, [pc, #484]	; (81f0 <mqtt_callback+0x318>)
    800c:	2208      	movs	r2, #8
    800e:	0018      	movs	r0, r3
    8010:	4b78      	ldr	r3, [pc, #480]	; (81f4 <mqtt_callback+0x31c>)
    8012:	4798      	blx	r3
    8014:	1e03      	subs	r3, r0, #0
    8016:	d10a      	bne.n	802e <mqtt_callback+0x156>
				printf("%s >> ", PUMP_TOPIC);
    8018:	4a75      	ldr	r2, [pc, #468]	; (81f0 <mqtt_callback+0x318>)
    801a:	4b77      	ldr	r3, [pc, #476]	; (81f8 <mqtt_callback+0x320>)
    801c:	0011      	movs	r1, r2
    801e:	0018      	movs	r0, r3
    8020:	4b63      	ldr	r3, [pc, #396]	; (81b0 <mqtt_callback+0x2d8>)
    8022:	4798      	blx	r3
				run_pump(10000);
    8024:	4b75      	ldr	r3, [pc, #468]	; (81fc <mqtt_callback+0x324>)
    8026:	0018      	movs	r0, r3
    8028:	4b75      	ldr	r3, [pc, #468]	; (8200 <mqtt_callback+0x328>)
    802a:	4798      	blx	r3
    802c:	e09d      	b.n	816a <mqtt_callback+0x292>
			else if (strncmp(data->recv_publish.topic, RELAY1_TOPIC, strlen(RELAY1_TOPIC)) == 0)
    802e:	687b      	ldr	r3, [r7, #4]
    8030:	681b      	ldr	r3, [r3, #0]
    8032:	4974      	ldr	r1, [pc, #464]	; (8204 <mqtt_callback+0x32c>)
    8034:	220a      	movs	r2, #10
    8036:	0018      	movs	r0, r3
    8038:	4b6e      	ldr	r3, [pc, #440]	; (81f4 <mqtt_callback+0x31c>)
    803a:	4798      	blx	r3
    803c:	1e03      	subs	r3, r0, #0
    803e:	d11e      	bne.n	807e <mqtt_callback+0x1a6>
				printf("%s >> ", RELAY1_TOPIC);
    8040:	4a70      	ldr	r2, [pc, #448]	; (8204 <mqtt_callback+0x32c>)
    8042:	4b6d      	ldr	r3, [pc, #436]	; (81f8 <mqtt_callback+0x320>)
    8044:	0011      	movs	r1, r2
    8046:	0018      	movs	r0, r3
    8048:	4b59      	ldr	r3, [pc, #356]	; (81b0 <mqtt_callback+0x2d8>)
    804a:	4798      	blx	r3
				if (!(strcmp("on", data->recv_publish.msg))) {
    804c:	687b      	ldr	r3, [r7, #4]
    804e:	689a      	ldr	r2, [r3, #8]
    8050:	4b6d      	ldr	r3, [pc, #436]	; (8208 <mqtt_callback+0x330>)
    8052:	0011      	movs	r1, r2
    8054:	0018      	movs	r0, r3
    8056:	4b6d      	ldr	r3, [pc, #436]	; (820c <mqtt_callback+0x334>)
    8058:	4798      	blx	r3
    805a:	1e03      	subs	r3, r0, #0
    805c:	d102      	bne.n	8064 <mqtt_callback+0x18c>
					relay1_enable();
    805e:	4b6c      	ldr	r3, [pc, #432]	; (8210 <mqtt_callback+0x338>)
    8060:	4798      	blx	r3
    8062:	e082      	b.n	816a <mqtt_callback+0x292>
				else if (!(strcmp("off", data->recv_publish.msg))) {
    8064:	687b      	ldr	r3, [r7, #4]
    8066:	689a      	ldr	r2, [r3, #8]
    8068:	4b6a      	ldr	r3, [pc, #424]	; (8214 <mqtt_callback+0x33c>)
    806a:	0011      	movs	r1, r2
    806c:	0018      	movs	r0, r3
    806e:	4b67      	ldr	r3, [pc, #412]	; (820c <mqtt_callback+0x334>)
    8070:	4798      	blx	r3
    8072:	1e03      	subs	r3, r0, #0
    8074:	d000      	beq.n	8078 <mqtt_callback+0x1a0>
    8076:	e078      	b.n	816a <mqtt_callback+0x292>
					relay1_disable();
    8078:	4b67      	ldr	r3, [pc, #412]	; (8218 <mqtt_callback+0x340>)
    807a:	4798      	blx	r3
    807c:	e075      	b.n	816a <mqtt_callback+0x292>
			else if (strncmp(data->recv_publish.topic, LED_TOPIC, strlen(LED_TOPIC)) == 0)
    807e:	687b      	ldr	r3, [r7, #4]
    8080:	681b      	ldr	r3, [r3, #0]
    8082:	4966      	ldr	r1, [pc, #408]	; (821c <mqtt_callback+0x344>)
    8084:	2207      	movs	r2, #7
    8086:	0018      	movs	r0, r3
    8088:	4b5a      	ldr	r3, [pc, #360]	; (81f4 <mqtt_callback+0x31c>)
    808a:	4798      	blx	r3
    808c:	1e03      	subs	r3, r0, #0
    808e:	d11d      	bne.n	80cc <mqtt_callback+0x1f4>
				printf("%s >> ", LED_TOPIC);
    8090:	4a62      	ldr	r2, [pc, #392]	; (821c <mqtt_callback+0x344>)
    8092:	4b59      	ldr	r3, [pc, #356]	; (81f8 <mqtt_callback+0x320>)
    8094:	0011      	movs	r1, r2
    8096:	0018      	movs	r0, r3
    8098:	4b45      	ldr	r3, [pc, #276]	; (81b0 <mqtt_callback+0x2d8>)
    809a:	4798      	blx	r3
				if (!(strcmp("on", data->recv_publish.msg))) {
    809c:	687b      	ldr	r3, [r7, #4]
    809e:	689a      	ldr	r2, [r3, #8]
    80a0:	4b59      	ldr	r3, [pc, #356]	; (8208 <mqtt_callback+0x330>)
    80a2:	0011      	movs	r1, r2
    80a4:	0018      	movs	r0, r3
    80a6:	4b59      	ldr	r3, [pc, #356]	; (820c <mqtt_callback+0x334>)
    80a8:	4798      	blx	r3
    80aa:	1e03      	subs	r3, r0, #0
    80ac:	d102      	bne.n	80b4 <mqtt_callback+0x1dc>
					led1_on();
    80ae:	4b5c      	ldr	r3, [pc, #368]	; (8220 <mqtt_callback+0x348>)
    80b0:	4798      	blx	r3
    80b2:	e05a      	b.n	816a <mqtt_callback+0x292>
				else if (!(strcmp("off", data->recv_publish.msg))) {
    80b4:	687b      	ldr	r3, [r7, #4]
    80b6:	689a      	ldr	r2, [r3, #8]
    80b8:	4b56      	ldr	r3, [pc, #344]	; (8214 <mqtt_callback+0x33c>)
    80ba:	0011      	movs	r1, r2
    80bc:	0018      	movs	r0, r3
    80be:	4b53      	ldr	r3, [pc, #332]	; (820c <mqtt_callback+0x334>)
    80c0:	4798      	blx	r3
    80c2:	1e03      	subs	r3, r0, #0
    80c4:	d151      	bne.n	816a <mqtt_callback+0x292>
					led1_off();
    80c6:	4b57      	ldr	r3, [pc, #348]	; (8224 <mqtt_callback+0x34c>)
    80c8:	4798      	blx	r3
    80ca:	e04e      	b.n	816a <mqtt_callback+0x292>
			else if (strncmp(data->recv_publish.topic, RELAY2_TOPIC, strlen(RELAY2_TOPIC)) == 0)
    80cc:	687b      	ldr	r3, [r7, #4]
    80ce:	681b      	ldr	r3, [r3, #0]
    80d0:	4955      	ldr	r1, [pc, #340]	; (8228 <mqtt_callback+0x350>)
    80d2:	220a      	movs	r2, #10
    80d4:	0018      	movs	r0, r3
    80d6:	4b47      	ldr	r3, [pc, #284]	; (81f4 <mqtt_callback+0x31c>)
    80d8:	4798      	blx	r3
    80da:	1e03      	subs	r3, r0, #0
    80dc:	d106      	bne.n	80ec <mqtt_callback+0x214>
				printf("%s >> ", RELAY2_TOPIC);
    80de:	4a52      	ldr	r2, [pc, #328]	; (8228 <mqtt_callback+0x350>)
    80e0:	4b45      	ldr	r3, [pc, #276]	; (81f8 <mqtt_callback+0x320>)
    80e2:	0011      	movs	r1, r2
    80e4:	0018      	movs	r0, r3
    80e6:	4b32      	ldr	r3, [pc, #200]	; (81b0 <mqtt_callback+0x2d8>)
    80e8:	4798      	blx	r3
    80ea:	e03e      	b.n	816a <mqtt_callback+0x292>
			else if (strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) == 0)
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	681b      	ldr	r3, [r3, #0]
    80f0:	494e      	ldr	r1, [pc, #312]	; (822c <mqtt_callback+0x354>)
    80f2:	220b      	movs	r2, #11
    80f4:	0018      	movs	r0, r3
    80f6:	4b3f      	ldr	r3, [pc, #252]	; (81f4 <mqtt_callback+0x31c>)
    80f8:	4798      	blx	r3
    80fa:	1e03      	subs	r3, r0, #0
    80fc:	d109      	bne.n	8112 <mqtt_callback+0x23a>
				printf("%s >> ", UPGRADE_TOPIC);
    80fe:	4a4b      	ldr	r2, [pc, #300]	; (822c <mqtt_callback+0x354>)
    8100:	4b3d      	ldr	r3, [pc, #244]	; (81f8 <mqtt_callback+0x320>)
    8102:	0011      	movs	r1, r2
    8104:	0018      	movs	r0, r3
    8106:	4b2a      	ldr	r3, [pc, #168]	; (81b0 <mqtt_callback+0x2d8>)
    8108:	4798      	blx	r3
				RcvDownloadFwCmdByMQTT = 1;
    810a:	4b49      	ldr	r3, [pc, #292]	; (8230 <mqtt_callback+0x358>)
    810c:	2201      	movs	r2, #1
    810e:	701a      	strb	r2, [r3, #0]
    8110:	e02b      	b.n	816a <mqtt_callback+0x292>
			else if (strncmp(data->recv_publish.topic, VERSION_TOPIC, strlen(VERSION_TOPIC)) == 0)
    8112:	687b      	ldr	r3, [r7, #4]
    8114:	681b      	ldr	r3, [r3, #0]
    8116:	4947      	ldr	r1, [pc, #284]	; (8234 <mqtt_callback+0x35c>)
    8118:	220b      	movs	r2, #11
    811a:	0018      	movs	r0, r3
    811c:	4b35      	ldr	r3, [pc, #212]	; (81f4 <mqtt_callback+0x31c>)
    811e:	4798      	blx	r3
    8120:	1e03      	subs	r3, r0, #0
    8122:	d109      	bne.n	8138 <mqtt_callback+0x260>
				printf("%s >> ", VERSION_TOPIC);
    8124:	4a43      	ldr	r2, [pc, #268]	; (8234 <mqtt_callback+0x35c>)
    8126:	4b34      	ldr	r3, [pc, #208]	; (81f8 <mqtt_callback+0x320>)
    8128:	0011      	movs	r1, r2
    812a:	0018      	movs	r0, r3
    812c:	4b20      	ldr	r3, [pc, #128]	; (81b0 <mqtt_callback+0x2d8>)
    812e:	4798      	blx	r3
				RequestVersionByMQTT = 1;
    8130:	4b41      	ldr	r3, [pc, #260]	; (8238 <mqtt_callback+0x360>)
    8132:	2201      	movs	r2, #1
    8134:	701a      	strb	r2, [r3, #0]
    8136:	e018      	b.n	816a <mqtt_callback+0x292>
				printf("Unknown topic: %s", data->recv_publish.topic);
    8138:	687b      	ldr	r3, [r7, #4]
    813a:	681a      	ldr	r2, [r3, #0]
    813c:	4b3f      	ldr	r3, [pc, #252]	; (823c <mqtt_callback+0x364>)
    813e:	0011      	movs	r1, r2
    8140:	0018      	movs	r0, r3
    8142:	4b1b      	ldr	r3, [pc, #108]	; (81b0 <mqtt_callback+0x2d8>)
    8144:	4798      	blx	r3
			for (uint8_t i; i < data->recv_publish.msg_size; i++)
    8146:	e010      	b.n	816a <mqtt_callback+0x292>
				printf("%c", data->recv_publish.msg[i]);
    8148:	687b      	ldr	r3, [r7, #4]
    814a:	689a      	ldr	r2, [r3, #8]
    814c:	2317      	movs	r3, #23
    814e:	18fb      	adds	r3, r7, r3
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	18d3      	adds	r3, r2, r3
    8154:	781b      	ldrb	r3, [r3, #0]
    8156:	0018      	movs	r0, r3
    8158:	4b39      	ldr	r3, [pc, #228]	; (8240 <mqtt_callback+0x368>)
    815a:	4798      	blx	r3
			for (uint8_t i; i < data->recv_publish.msg_size; i++)
    815c:	2317      	movs	r3, #23
    815e:	18fb      	adds	r3, r7, r3
    8160:	781a      	ldrb	r2, [r3, #0]
    8162:	2317      	movs	r3, #23
    8164:	18fb      	adds	r3, r7, r3
    8166:	3201      	adds	r2, #1
    8168:	701a      	strb	r2, [r3, #0]
    816a:	2317      	movs	r3, #23
    816c:	18fb      	adds	r3, r7, r3
    816e:	781a      	ldrb	r2, [r3, #0]
    8170:	687b      	ldr	r3, [r7, #4]
    8172:	68db      	ldr	r3, [r3, #12]
    8174:	429a      	cmp	r2, r3
    8176:	dbe7      	blt.n	8148 <mqtt_callback+0x270>
			printf("\r\n");
    8178:	4b32      	ldr	r3, [pc, #200]	; (8244 <mqtt_callback+0x36c>)
    817a:	0018      	movs	r0, r3
    817c:	4b1a      	ldr	r3, [pc, #104]	; (81e8 <mqtt_callback+0x310>)
    817e:	4798      	blx	r3
		break;
    8180:	e004      	b.n	818c <mqtt_callback+0x2b4>
		printf("MQTT disconnected\r\n");
    8182:	4b31      	ldr	r3, [pc, #196]	; (8248 <mqtt_callback+0x370>)
    8184:	0018      	movs	r0, r3
    8186:	4b18      	ldr	r3, [pc, #96]	; (81e8 <mqtt_callback+0x310>)
    8188:	4798      	blx	r3
		break;
    818a:	e000      	b.n	818e <mqtt_callback+0x2b6>
		break;
    818c:	46c0      	nop			; (mov r8, r8)
}
    818e:	46c0      	nop			; (mov r8, r8)
    8190:	46bd      	mov	sp, r7
    8192:	b007      	add	sp, #28
    8194:	bd90      	pop	{r4, r7, pc}
    8196:	46c0      	nop			; (mov r8, r8)
    8198:	00014b48 	.word	0x00014b48
    819c:	00014b58 	.word	0x00014b58
    81a0:	20000008 	.word	0x20000008
    81a4:	0000da7d 	.word	0x0000da7d
    81a8:	00014acc 	.word	0x00014acc
    81ac:	00014b64 	.word	0x00014b64
    81b0:	0000f0ad 	.word	0x0000f0ad
    81b4:	0000d969 	.word	0x0000d969
    81b8:	00014b9c 	.word	0x00014b9c
    81bc:	0000ded5 	.word	0x0000ded5
    81c0:	00014ba8 	.word	0x00014ba8
    81c4:	00014bb4 	.word	0x00014bb4
    81c8:	00014bc0 	.word	0x00014bc0
    81cc:	00014bcc 	.word	0x00014bcc
    81d0:	00014bd8 	.word	0x00014bd8
    81d4:	00014be4 	.word	0x00014be4
    81d8:	00014bf0 	.word	0x00014bf0
    81dc:	00014bfc 	.word	0x00014bfc
    81e0:	00014c0c 	.word	0x00014c0c
    81e4:	00014c1c 	.word	0x00014c1c
    81e8:	0000f1c9 	.word	0x0000f1c9
    81ec:	00014c48 	.word	0x00014c48
    81f0:	00014c7c 	.word	0x00014c7c
    81f4:	0000f3e3 	.word	0x0000f3e3
    81f8:	00014c88 	.word	0x00014c88
    81fc:	00002710 	.word	0x00002710
    8200:	0000d501 	.word	0x0000d501
    8204:	00014c90 	.word	0x00014c90
    8208:	00014c9c 	.word	0x00014c9c
    820c:	0000f3b1 	.word	0x0000f3b1
    8210:	0000d481 	.word	0x0000d481
    8214:	00014ca0 	.word	0x00014ca0
    8218:	0000d4a1 	.word	0x0000d4a1
    821c:	00014ca4 	.word	0x00014ca4
    8220:	0000d401 	.word	0x0000d401
    8224:	0000d421 	.word	0x0000d421
    8228:	00014cac 	.word	0x00014cac
    822c:	00014cb8 	.word	0x00014cb8
    8230:	2000037c 	.word	0x2000037c
    8234:	00014cc4 	.word	0x00014cc4
    8238:	2000037d 	.word	0x2000037d
    823c:	00014cd0 	.word	0x00014cd0
    8240:	0000f0e1 	.word	0x0000f0e1
    8244:	00014ce4 	.word	0x00014ce4
    8248:	00014ce8 	.word	0x00014ce8

0000824c <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    824c:	b580      	push	{r7, lr}
    824e:	b082      	sub	sp, #8
    8250:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    8252:	1d3b      	adds	r3, r7, #4
    8254:	0018      	movs	r0, r3
    8256:	4b0a      	ldr	r3, [pc, #40]	; (8280 <configure_timer+0x34>)
    8258:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    825a:	1d3a      	adds	r2, r7, #4
    825c:	4b09      	ldr	r3, [pc, #36]	; (8284 <configure_timer+0x38>)
    825e:	0011      	movs	r1, r2
    8260:	0018      	movs	r0, r3
    8262:	4b09      	ldr	r3, [pc, #36]	; (8288 <configure_timer+0x3c>)
    8264:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    8266:	4b07      	ldr	r3, [pc, #28]	; (8284 <configure_timer+0x38>)
    8268:	0018      	movs	r0, r3
    826a:	4b08      	ldr	r3, [pc, #32]	; (828c <configure_timer+0x40>)
    826c:	4798      	blx	r3
	printf("Timer enabled.\r\n");
    826e:	4b08      	ldr	r3, [pc, #32]	; (8290 <configure_timer+0x44>)
    8270:	0018      	movs	r0, r3
    8272:	4b08      	ldr	r3, [pc, #32]	; (8294 <configure_timer+0x48>)
    8274:	4798      	blx	r3
}
    8276:	46c0      	nop			; (mov r8, r8)
    8278:	46bd      	mov	sp, r7
    827a:	b002      	add	sp, #8
    827c:	bd80      	pop	{r7, pc}
    827e:	46c0      	nop			; (mov r8, r8)
    8280:	00007a9d 	.word	0x00007a9d
    8284:	20000700 	.word	0x20000700
    8288:	00007ac1 	.word	0x00007ac1
    828c:	00007bad 	.word	0x00007bad
    8290:	00014cfc 	.word	0x00014cfc
    8294:	0000f1c9 	.word	0x0000f1c9

00008298 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    8298:	b580      	push	{r7, lr}
    829a:	b088      	sub	sp, #32
    829c:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    829e:	003b      	movs	r3, r7
    82a0:	0018      	movs	r0, r3
    82a2:	4b1b      	ldr	r3, [pc, #108]	; (8310 <configure_mqtt+0x78>)
    82a4:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    82a6:	003b      	movs	r3, r7
    82a8:	4a1a      	ldr	r2, [pc, #104]	; (8314 <configure_mqtt+0x7c>)
    82aa:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    82ac:	003b      	movs	r3, r7
    82ae:	4a1a      	ldr	r2, [pc, #104]	; (8318 <configure_mqtt+0x80>)
    82b0:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    82b2:	003b      	movs	r3, r7
    82b4:	2280      	movs	r2, #128	; 0x80
    82b6:	611a      	str	r2, [r3, #16]
	mqtt_conf.port = 11353;
    82b8:	003b      	movs	r3, r7
    82ba:	4a18      	ldr	r2, [pc, #96]	; (831c <configure_mqtt+0x84>)
    82bc:	801a      	strh	r2, [r3, #0]

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    82be:	003a      	movs	r2, r7
    82c0:	4b17      	ldr	r3, [pc, #92]	; (8320 <configure_mqtt+0x88>)
    82c2:	0011      	movs	r1, r2
    82c4:	0018      	movs	r0, r3
    82c6:	4b17      	ldr	r3, [pc, #92]	; (8324 <configure_mqtt+0x8c>)
    82c8:	4798      	blx	r3
    82ca:	0003      	movs	r3, r0
    82cc:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    82ce:	69fb      	ldr	r3, [r7, #28]
    82d0:	2b00      	cmp	r3, #0
    82d2:	da06      	bge.n	82e2 <configure_mqtt+0x4a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    82d4:	69fa      	ldr	r2, [r7, #28]
    82d6:	4b14      	ldr	r3, [pc, #80]	; (8328 <configure_mqtt+0x90>)
    82d8:	0011      	movs	r1, r2
    82da:	0018      	movs	r0, r3
    82dc:	4b13      	ldr	r3, [pc, #76]	; (832c <configure_mqtt+0x94>)
    82de:	4798      	blx	r3
		while (1) {
    82e0:	e7fe      	b.n	82e0 <configure_mqtt+0x48>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    82e2:	4a13      	ldr	r2, [pc, #76]	; (8330 <configure_mqtt+0x98>)
    82e4:	4b0e      	ldr	r3, [pc, #56]	; (8320 <configure_mqtt+0x88>)
    82e6:	0011      	movs	r1, r2
    82e8:	0018      	movs	r0, r3
    82ea:	4b12      	ldr	r3, [pc, #72]	; (8334 <configure_mqtt+0x9c>)
    82ec:	4798      	blx	r3
    82ee:	0003      	movs	r3, r0
    82f0:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    82f2:	69fb      	ldr	r3, [r7, #28]
    82f4:	2b00      	cmp	r3, #0
    82f6:	da06      	bge.n	8306 <configure_mqtt+0x6e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    82f8:	69fa      	ldr	r2, [r7, #28]
    82fa:	4b0f      	ldr	r3, [pc, #60]	; (8338 <configure_mqtt+0xa0>)
    82fc:	0011      	movs	r1, r2
    82fe:	0018      	movs	r0, r3
    8300:	4b0a      	ldr	r3, [pc, #40]	; (832c <configure_mqtt+0x94>)
    8302:	4798      	blx	r3
		while (1) {
    8304:	e7fe      	b.n	8304 <configure_mqtt+0x6c>
		}
	}
}
    8306:	46c0      	nop			; (mov r8, r8)
    8308:	46bd      	mov	sp, r7
    830a:	b008      	add	sp, #32
    830c:	bd80      	pop	{r7, pc}
    830e:	46c0      	nop			; (mov r8, r8)
    8310:	0000d855 	.word	0x0000d855
    8314:	20000700 	.word	0x20000700
    8318:	200002fc 	.word	0x200002fc
    831c:	00002c59 	.word	0x00002c59
    8320:	20000288 	.word	0x20000288
    8324:	0000d879 	.word	0x0000d879
    8328:	00014d0c 	.word	0x00014d0c
    832c:	0000f0ad 	.word	0x0000f0ad
    8330:	00007ed9 	.word	0x00007ed9
    8334:	0000d905 	.word	0x0000d905
    8338:	00014d40 	.word	0x00014d40

0000833c <wifi_init>:

int wifi_init(void) 
{
    833c:	b590      	push	{r4, r7, lr}
    833e:	b089      	sub	sp, #36	; 0x24
    8340:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the Timer. */
	configure_timer();
    8342:	4b25      	ldr	r3, [pc, #148]	; (83d8 <wifi_init+0x9c>)
    8344:	4798      	blx	r3

	/* Initialize the MQTT service. */
	configure_mqtt();
    8346:	4b25      	ldr	r3, [pc, #148]	; (83dc <wifi_init+0xa0>)
    8348:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    834a:	4b25      	ldr	r3, [pc, #148]	; (83e0 <wifi_init+0xa4>)
    834c:	4798      	blx	r3
	
	printf("MQTT Configured.\r\n");
    834e:	4b25      	ldr	r3, [pc, #148]	; (83e4 <wifi_init+0xa8>)
    8350:	0018      	movs	r0, r3
    8352:	4b25      	ldr	r3, [pc, #148]	; (83e8 <wifi_init+0xac>)
    8354:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    8356:	1d3b      	adds	r3, r7, #4
    8358:	2218      	movs	r2, #24
    835a:	2100      	movs	r1, #0
    835c:	0018      	movs	r0, r3
    835e:	4b23      	ldr	r3, [pc, #140]	; (83ec <wifi_init+0xb0>)
    8360:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    8362:	1d3b      	adds	r3, r7, #4
    8364:	4a22      	ldr	r2, [pc, #136]	; (83f0 <wifi_init+0xb4>)
    8366:	601a      	str	r2, [r3, #0]
	printf("Initializing...\r\n");
    8368:	4b22      	ldr	r3, [pc, #136]	; (83f4 <wifi_init+0xb8>)
    836a:	0018      	movs	r0, r3
    836c:	4b1e      	ldr	r3, [pc, #120]	; (83e8 <wifi_init+0xac>)
    836e:	4798      	blx	r3
	ret = m2m_wifi_init(&param);
    8370:	231f      	movs	r3, #31
    8372:	18fc      	adds	r4, r7, r3
    8374:	1d3b      	adds	r3, r7, #4
    8376:	0018      	movs	r0, r3
    8378:	4b1f      	ldr	r3, [pc, #124]	; (83f8 <wifi_init+0xbc>)
    837a:	4798      	blx	r3
    837c:	0003      	movs	r3, r0
    837e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    8380:	231f      	movs	r3, #31
    8382:	18fb      	adds	r3, r7, r3
    8384:	781b      	ldrb	r3, [r3, #0]
    8386:	b25b      	sxtb	r3, r3
    8388:	2b00      	cmp	r3, #0
    838a:	d00a      	beq.n	83a2 <wifi_init+0x66>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    838c:	231f      	movs	r3, #31
    838e:	18fb      	adds	r3, r7, r3
    8390:	2200      	movs	r2, #0
    8392:	569a      	ldrsb	r2, [r3, r2]
    8394:	4b19      	ldr	r3, [pc, #100]	; (83fc <wifi_init+0xc0>)
    8396:	0011      	movs	r1, r2
    8398:	0018      	movs	r0, r3
    839a:	4b19      	ldr	r3, [pc, #100]	; (8400 <wifi_init+0xc4>)
    839c:	4798      	blx	r3
		return 1;
    839e:	2301      	movs	r3, #1
    83a0:	e015      	b.n	83ce <wifi_init+0x92>
	} 
		printf("main: m2m_wifi_init call success!(%d)\r\n", ret);
    83a2:	231f      	movs	r3, #31
    83a4:	18fb      	adds	r3, r7, r3
    83a6:	2200      	movs	r2, #0
    83a8:	569a      	ldrsb	r2, [r3, r2]
    83aa:	4b16      	ldr	r3, [pc, #88]	; (8404 <wifi_init+0xc8>)
    83ac:	0011      	movs	r1, r2
    83ae:	0018      	movs	r0, r3
    83b0:	4b13      	ldr	r3, [pc, #76]	; (8400 <wifi_init+0xc4>)
    83b2:	4798      	blx	r3
	
	/* Initialize socket interface. */
	socketInit();
    83b4:	4b14      	ldr	r3, [pc, #80]	; (8408 <wifi_init+0xcc>)
    83b6:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    83b8:	4a14      	ldr	r2, [pc, #80]	; (840c <wifi_init+0xd0>)
    83ba:	4b15      	ldr	r3, [pc, #84]	; (8410 <wifi_init+0xd4>)
    83bc:	0011      	movs	r1, r2
    83be:	0018      	movs	r0, r3
    83c0:	4b14      	ldr	r3, [pc, #80]	; (8414 <wifi_init+0xd8>)
    83c2:	4798      	blx	r3
	printf("Sockets initialized.\r\n");
    83c4:	4b14      	ldr	r3, [pc, #80]	; (8418 <wifi_init+0xdc>)
    83c6:	0018      	movs	r0, r3
    83c8:	4b07      	ldr	r3, [pc, #28]	; (83e8 <wifi_init+0xac>)
    83ca:	4798      	blx	r3
	
	return 0;
    83cc:	2300      	movs	r3, #0
}
    83ce:	0018      	movs	r0, r3
    83d0:	46bd      	mov	sp, r7
    83d2:	b009      	add	sp, #36	; 0x24
    83d4:	bd90      	pop	{r4, r7, pc}
    83d6:	46c0      	nop			; (mov r8, r8)
    83d8:	0000824d 	.word	0x0000824d
    83dc:	00008299 	.word	0x00008299
    83e0:	000002a1 	.word	0x000002a1
    83e4:	00014d74 	.word	0x00014d74
    83e8:	0000f1c9 	.word	0x0000f1c9
    83ec:	0000e66b 	.word	0x0000e66b
    83f0:	00007da5 	.word	0x00007da5
    83f4:	00014d88 	.word	0x00014d88
    83f8:	00001d55 	.word	0x00001d55
    83fc:	00014d9c 	.word	0x00014d9c
    8400:	0000f0ad 	.word	0x0000f0ad
    8404:	00014dc4 	.word	0x00014dc4
    8408:	00004f59 	.word	0x00004f59
    840c:	00007eb5 	.word	0x00007eb5
    8410:	00007e81 	.word	0x00007e81
    8414:	00004fa9 	.word	0x00004fa9
    8418:	00014dec 	.word	0x00014dec

0000841c <write8>:

int is_init = false;


void write8(uint8_t reg, uint8_t value)
{
    841c:	b580      	push	{r7, lr}
    841e:	b086      	sub	sp, #24
    8420:	af00      	add	r7, sp, #0
    8422:	0002      	movs	r2, r0
    8424:	1dfb      	adds	r3, r7, #7
    8426:	701a      	strb	r2, [r3, #0]
    8428:	1dbb      	adds	r3, r7, #6
    842a:	1c0a      	adds	r2, r1, #0
    842c:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    842e:	4b19      	ldr	r3, [pc, #100]	; (8494 <write8+0x78>)
    8430:	681b      	ldr	r3, [r3, #0]
    8432:	2b00      	cmp	r3, #0
    8434:	d029      	beq.n	848a <write8+0x6e>
		uint8_t write_buffer[2] = {reg, value};
    8436:	230c      	movs	r3, #12
    8438:	18fb      	adds	r3, r7, r3
    843a:	1dfa      	adds	r2, r7, #7
    843c:	7812      	ldrb	r2, [r2, #0]
    843e:	701a      	strb	r2, [r3, #0]
    8440:	230c      	movs	r3, #12
    8442:	18fb      	adds	r3, r7, r3
    8444:	1dba      	adds	r2, r7, #6
    8446:	7812      	ldrb	r2, [r2, #0]
    8448:	705a      	strb	r2, [r3, #1]
		wr_packet.address = TSL2561_ADDR_FLOAT;
    844a:	4b13      	ldr	r3, [pc, #76]	; (8498 <write8+0x7c>)
    844c:	2239      	movs	r2, #57	; 0x39
    844e:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 2;
    8450:	4b11      	ldr	r3, [pc, #68]	; (8498 <write8+0x7c>)
    8452:	2202      	movs	r2, #2
    8454:	805a      	strh	r2, [r3, #2]
		wr_packet.data = write_buffer;
    8456:	4b10      	ldr	r3, [pc, #64]	; (8498 <write8+0x7c>)
    8458:	220c      	movs	r2, #12
    845a:	18ba      	adds	r2, r7, r2
    845c:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    845e:	2300      	movs	r3, #0
    8460:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    8462:	23fa      	movs	r3, #250	; 0xfa
    8464:	009b      	lsls	r3, r3, #2
    8466:	613b      	str	r3, [r7, #16]
		
		while (i2c_master_write_packet_wait(&i2c_tsl_instance, &wr_packet) !=
    8468:	e005      	b.n	8476 <write8+0x5a>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    846a:	697b      	ldr	r3, [r7, #20]
    846c:	1c5a      	adds	r2, r3, #1
    846e:	617a      	str	r2, [r7, #20]
    8470:	693a      	ldr	r2, [r7, #16]
    8472:	4293      	cmp	r3, r2
    8474:	d008      	beq.n	8488 <write8+0x6c>
		while (i2c_master_write_packet_wait(&i2c_tsl_instance, &wr_packet) !=
    8476:	4a08      	ldr	r2, [pc, #32]	; (8498 <write8+0x7c>)
    8478:	4b08      	ldr	r3, [pc, #32]	; (849c <write8+0x80>)
    847a:	0011      	movs	r1, r2
    847c:	0018      	movs	r0, r3
    847e:	4b08      	ldr	r3, [pc, #32]	; (84a0 <write8+0x84>)
    8480:	4798      	blx	r3
    8482:	1e03      	subs	r3, r0, #0
    8484:	d1f1      	bne.n	846a <write8+0x4e>
				break;
			}
		}
		
	}
}
    8486:	e000      	b.n	848a <write8+0x6e>
				break;
    8488:	46c0      	nop			; (mov r8, r8)
}
    848a:	46c0      	nop			; (mov r8, r8)
    848c:	46bd      	mov	sp, r7
    848e:	b006      	add	sp, #24
    8490:	bd80      	pop	{r7, pc}
    8492:	46c0      	nop			; (mov r8, r8)
    8494:	20000388 	.word	0x20000388
    8498:	20000050 	.word	0x20000050
    849c:	2000061c 	.word	0x2000061c
    84a0:	00009c3d 	.word	0x00009c3d

000084a4 <enable>:

void enable(void)
{
    84a4:	b580      	push	{r7, lr}
    84a6:	af00      	add	r7, sp, #0
	/* Enable the device by setting the control bit to 0x03 */
	write8((TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL), TSL2561_CONTROL_POWERON);
    84a8:	2103      	movs	r1, #3
    84aa:	2080      	movs	r0, #128	; 0x80
    84ac:	4b02      	ldr	r3, [pc, #8]	; (84b8 <enable+0x14>)
    84ae:	4798      	blx	r3
}
    84b0:	46c0      	nop			; (mov r8, r8)
    84b2:	46bd      	mov	sp, r7
    84b4:	bd80      	pop	{r7, pc}
    84b6:	46c0      	nop			; (mov r8, r8)
    84b8:	0000841d 	.word	0x0000841d

000084bc <disable>:

void disable(void)
{
    84bc:	b580      	push	{r7, lr}
    84be:	af00      	add	r7, sp, #0
	/* Turn the device off to save power */
	write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL, TSL2561_CONTROL_POWEROFF);
    84c0:	2100      	movs	r1, #0
    84c2:	2080      	movs	r0, #128	; 0x80
    84c4:	4b02      	ldr	r3, [pc, #8]	; (84d0 <disable+0x14>)
    84c6:	4798      	blx	r3
}
    84c8:	46c0      	nop			; (mov r8, r8)
    84ca:	46bd      	mov	sp, r7
    84cc:	bd80      	pop	{r7, pc}
    84ce:	46c0      	nop			; (mov r8, r8)
    84d0:	0000841d 	.word	0x0000841d

000084d4 <read8_reg>:

uint8_t read8_reg(uint8_t reg) {
    84d4:	b580      	push	{r7, lr}
    84d6:	b086      	sub	sp, #24
    84d8:	af00      	add	r7, sp, #0
    84da:	0002      	movs	r2, r0
    84dc:	1dfb      	adds	r3, r7, #7
    84de:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    84e0:	4b1a      	ldr	r3, [pc, #104]	; (854c <read8_reg+0x78>)
    84e2:	681b      	ldr	r3, [r3, #0]
    84e4:	2b00      	cmp	r3, #0
    84e6:	d02c      	beq.n	8542 <read8_reg+0x6e>
		enable();
    84e8:	4b19      	ldr	r3, [pc, #100]	; (8550 <read8_reg+0x7c>)
    84ea:	4798      	blx	r3
		uint8_t read_buffer[2];
		read_buffer[0] = reg;
    84ec:	230c      	movs	r3, #12
    84ee:	18fb      	adds	r3, r7, r3
    84f0:	1dfa      	adds	r2, r7, #7
    84f2:	7812      	ldrb	r2, [r2, #0]
    84f4:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
    84f6:	4b17      	ldr	r3, [pc, #92]	; (8554 <read8_reg+0x80>)
    84f8:	2239      	movs	r2, #57	; 0x39
    84fa:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 2;
    84fc:	4b15      	ldr	r3, [pc, #84]	; (8554 <read8_reg+0x80>)
    84fe:	2202      	movs	r2, #2
    8500:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
    8502:	4b14      	ldr	r3, [pc, #80]	; (8554 <read8_reg+0x80>)
    8504:	220c      	movs	r2, #12
    8506:	18ba      	adds	r2, r7, r2
    8508:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    850a:	2300      	movs	r3, #0
    850c:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    850e:	23fa      	movs	r3, #250	; 0xfa
    8510:	009b      	lsls	r3, r3, #2
    8512:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    8514:	e005      	b.n	8522 <read8_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    8516:	697b      	ldr	r3, [r7, #20]
    8518:	1c5a      	adds	r2, r3, #1
    851a:	617a      	str	r2, [r7, #20]
    851c:	693a      	ldr	r2, [r7, #16]
    851e:	4293      	cmp	r3, r2
    8520:	d008      	beq.n	8534 <read8_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    8522:	4a0c      	ldr	r2, [pc, #48]	; (8554 <read8_reg+0x80>)
    8524:	4b0c      	ldr	r3, [pc, #48]	; (8558 <read8_reg+0x84>)
    8526:	0011      	movs	r1, r2
    8528:	0018      	movs	r0, r3
    852a:	4b0c      	ldr	r3, [pc, #48]	; (855c <read8_reg+0x88>)
    852c:	4798      	blx	r3
    852e:	1e03      	subs	r3, r0, #0
    8530:	d1f1      	bne.n	8516 <read8_reg+0x42>
    8532:	e000      	b.n	8536 <read8_reg+0x62>
				break;
    8534:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		disable();
    8536:	4b0a      	ldr	r3, [pc, #40]	; (8560 <read8_reg+0x8c>)
    8538:	4798      	blx	r3
		return read_buffer[1];
    853a:	230c      	movs	r3, #12
    853c:	18fb      	adds	r3, r7, r3
    853e:	785b      	ldrb	r3, [r3, #1]
    8540:	e000      	b.n	8544 <read8_reg+0x70>
	}
	return 0;
    8542:	2300      	movs	r3, #0
}
    8544:	0018      	movs	r0, r3
    8546:	46bd      	mov	sp, r7
    8548:	b006      	add	sp, #24
    854a:	bd80      	pop	{r7, pc}
    854c:	20000388 	.word	0x20000388
    8550:	000084a5 	.word	0x000084a5
    8554:	2000005c 	.word	0x2000005c
    8558:	2000061c 	.word	0x2000061c
    855c:	00009a85 	.word	0x00009a85
    8560:	000084bd 	.word	0x000084bd

00008564 <read16_reg>:

uint16_t read16_reg(uint8_t reg) {
    8564:	b580      	push	{r7, lr}
    8566:	b086      	sub	sp, #24
    8568:	af00      	add	r7, sp, #0
    856a:	0002      	movs	r2, r0
    856c:	1dfb      	adds	r3, r7, #7
    856e:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    8570:	4b28      	ldr	r3, [pc, #160]	; (8614 <read16_reg+0xb0>)
    8572:	681b      	ldr	r3, [r3, #0]
    8574:	2b00      	cmp	r3, #0
    8576:	d047      	beq.n	8608 <read16_reg+0xa4>
		enable();
    8578:	4b27      	ldr	r3, [pc, #156]	; (8618 <read16_reg+0xb4>)
    857a:	4798      	blx	r3
		uint8_t read_buffer[3];
		read_buffer[0] = reg;
    857c:	2308      	movs	r3, #8
    857e:	18fb      	adds	r3, r7, r3
    8580:	1dfa      	adds	r2, r7, #7
    8582:	7812      	ldrb	r2, [r2, #0]
    8584:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
    8586:	4b25      	ldr	r3, [pc, #148]	; (861c <read16_reg+0xb8>)
    8588:	2239      	movs	r2, #57	; 0x39
    858a:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 3;
    858c:	4b23      	ldr	r3, [pc, #140]	; (861c <read16_reg+0xb8>)
    858e:	2203      	movs	r2, #3
    8590:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
    8592:	4b22      	ldr	r3, [pc, #136]	; (861c <read16_reg+0xb8>)
    8594:	2208      	movs	r2, #8
    8596:	18ba      	adds	r2, r7, r2
    8598:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    859a:	2300      	movs	r3, #0
    859c:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    859e:	23fa      	movs	r3, #250	; 0xfa
    85a0:	009b      	lsls	r3, r3, #2
    85a2:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    85a4:	e005      	b.n	85b2 <read16_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    85a6:	697b      	ldr	r3, [r7, #20]
    85a8:	1c5a      	adds	r2, r3, #1
    85aa:	617a      	str	r2, [r7, #20]
    85ac:	693a      	ldr	r2, [r7, #16]
    85ae:	4293      	cmp	r3, r2
    85b0:	d008      	beq.n	85c4 <read16_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    85b2:	4a1a      	ldr	r2, [pc, #104]	; (861c <read16_reg+0xb8>)
    85b4:	4b1a      	ldr	r3, [pc, #104]	; (8620 <read16_reg+0xbc>)
    85b6:	0011      	movs	r1, r2
    85b8:	0018      	movs	r0, r3
    85ba:	4b1a      	ldr	r3, [pc, #104]	; (8624 <read16_reg+0xc0>)
    85bc:	4798      	blx	r3
    85be:	1e03      	subs	r3, r0, #0
    85c0:	d1f1      	bne.n	85a6 <read16_reg+0x42>
    85c2:	e000      	b.n	85c6 <read16_reg+0x62>
				break;
    85c4:	46c0      	nop			; (mov r8, r8)
			}
		}
		uint8_t t = read_buffer[1];
    85c6:	230f      	movs	r3, #15
    85c8:	18fb      	adds	r3, r7, r3
    85ca:	2208      	movs	r2, #8
    85cc:	18ba      	adds	r2, r7, r2
    85ce:	7852      	ldrb	r2, [r2, #1]
    85d0:	701a      	strb	r2, [r3, #0]
		uint8_t x = read_buffer[2];
    85d2:	230e      	movs	r3, #14
    85d4:	18fb      	adds	r3, r7, r3
    85d6:	2208      	movs	r2, #8
    85d8:	18ba      	adds	r2, r7, r2
    85da:	7892      	ldrb	r2, [r2, #2]
    85dc:	701a      	strb	r2, [r3, #0]
		x <<= 8;
    85de:	230e      	movs	r3, #14
    85e0:	18fb      	adds	r3, r7, r3
    85e2:	2200      	movs	r2, #0
    85e4:	701a      	strb	r2, [r3, #0]
		x |= t;
    85e6:	230e      	movs	r3, #14
    85e8:	18fb      	adds	r3, r7, r3
    85ea:	220e      	movs	r2, #14
    85ec:	18b9      	adds	r1, r7, r2
    85ee:	220f      	movs	r2, #15
    85f0:	18ba      	adds	r2, r7, r2
    85f2:	7809      	ldrb	r1, [r1, #0]
    85f4:	7812      	ldrb	r2, [r2, #0]
    85f6:	430a      	orrs	r2, r1
    85f8:	701a      	strb	r2, [r3, #0]
		disable();
    85fa:	4b0b      	ldr	r3, [pc, #44]	; (8628 <read16_reg+0xc4>)
    85fc:	4798      	blx	r3
		return x;
    85fe:	230e      	movs	r3, #14
    8600:	18fb      	adds	r3, r7, r3
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	b29b      	uxth	r3, r3
    8606:	e000      	b.n	860a <read16_reg+0xa6>
	}
	return 0;
    8608:	2300      	movs	r3, #0
}
    860a:	0018      	movs	r0, r3
    860c:	46bd      	mov	sp, r7
    860e:	b006      	add	sp, #24
    8610:	bd80      	pop	{r7, pc}
    8612:	46c0      	nop			; (mov r8, r8)
    8614:	20000388 	.word	0x20000388
    8618:	000084a5 	.word	0x000084a5
    861c:	2000005c 	.word	0x2000005c
    8620:	2000061c 	.word	0x2000061c
    8624:	00009a85 	.word	0x00009a85
    8628:	000084bd 	.word	0x000084bd

0000862c <tsl2561_init>:

int tsl2561_init() {
    862c:	b590      	push	{r4, r7, lr}
    862e:	b083      	sub	sp, #12
    8630:	af00      	add	r7, sp, #0
	if(is_init) {
    8632:	4b0d      	ldr	r3, [pc, #52]	; (8668 <tsl2561_init+0x3c>)
    8634:	681b      	ldr	r3, [r3, #0]
    8636:	2b00      	cmp	r3, #0
    8638:	d001      	beq.n	863e <tsl2561_init+0x12>
		return 1;
    863a:	2301      	movs	r3, #1
    863c:	e010      	b.n	8660 <tsl2561_init+0x34>
	}
	is_init = true;
    863e:	4b0a      	ldr	r3, [pc, #40]	; (8668 <tsl2561_init+0x3c>)
    8640:	2201      	movs	r2, #1
    8642:	601a      	str	r2, [r3, #0]
	  uint8_t x = read8_reg(TSL2561_REGISTER_ID);
    8644:	1dfc      	adds	r4, r7, #7
    8646:	200a      	movs	r0, #10
    8648:	4b08      	ldr	r3, [pc, #32]	; (866c <tsl2561_init+0x40>)
    864a:	4798      	blx	r3
    864c:	0003      	movs	r3, r0
    864e:	7023      	strb	r3, [r4, #0]
	  if (x & 0xF0 != 0x10) { // ID code for TSL2561
    8650:	1dfb      	adds	r3, r7, #7
    8652:	781b      	ldrb	r3, [r3, #0]
    8654:	2201      	movs	r2, #1
    8656:	4013      	ands	r3, r2
    8658:	d001      	beq.n	865e <tsl2561_init+0x32>
		  return 0;
    865a:	2300      	movs	r3, #0
    865c:	e000      	b.n	8660 <tsl2561_init+0x34>
	  }
	  return 1;
    865e:	2301      	movs	r3, #1
	
}
    8660:	0018      	movs	r0, r3
    8662:	46bd      	mov	sp, r7
    8664:	b003      	add	sp, #12
    8666:	bd90      	pop	{r4, r7, pc}
    8668:	20000388 	.word	0x20000388
    866c:	000084d5 	.word	0x000084d5

00008670 <calculateLux>:

int calculateLux(uint16_t broadband, uint16_t ir) {
    8670:	b580      	push	{r7, lr}
    8672:	b08c      	sub	sp, #48	; 0x30
    8674:	af00      	add	r7, sp, #0
    8676:	0002      	movs	r2, r0
    8678:	1dbb      	adds	r3, r7, #6
    867a:	801a      	strh	r2, [r3, #0]
    867c:	1d3b      	adds	r3, r7, #4
    867e:	1c0a      	adds	r2, r1, #0
    8680:	801a      	strh	r2, [r3, #0]

	/* Make sure the sensor isn't saturated! */
	uint16_t clipThreshold;

	/* Return 65536 lux if the sensor is saturated */
	if ((broadband > clipThreshold) || (ir > clipThreshold))
    8682:	1dba      	adds	r2, r7, #6
    8684:	2322      	movs	r3, #34	; 0x22
    8686:	18fb      	adds	r3, r7, r3
    8688:	8812      	ldrh	r2, [r2, #0]
    868a:	881b      	ldrh	r3, [r3, #0]
    868c:	429a      	cmp	r2, r3
    868e:	d806      	bhi.n	869e <calculateLux+0x2e>
    8690:	1d3a      	adds	r2, r7, #4
    8692:	2322      	movs	r3, #34	; 0x22
    8694:	18fb      	adds	r3, r7, r3
    8696:	8812      	ldrh	r2, [r2, #0]
    8698:	881b      	ldrh	r3, [r3, #0]
    869a:	429a      	cmp	r2, r3
    869c:	d902      	bls.n	86a4 <calculateLux+0x34>
	{
		return 65536;
    869e:	2380      	movs	r3, #128	; 0x80
    86a0:	025b      	lsls	r3, r3, #9
    86a2:	e07b      	b.n	879c <calculateLux+0x12c>
	}

	/* Scale the channel values */
	channel0 = (broadband * chScale) >> TSL2561_LUX_CHSCALE;
    86a4:	1dbb      	adds	r3, r7, #6
    86a6:	881b      	ldrh	r3, [r3, #0]
    86a8:	69fa      	ldr	r2, [r7, #28]
    86aa:	4353      	muls	r3, r2
    86ac:	0a9b      	lsrs	r3, r3, #10
    86ae:	61bb      	str	r3, [r7, #24]
	channel1 = (ir * chScale) >> TSL2561_LUX_CHSCALE;
    86b0:	1d3b      	adds	r3, r7, #4
    86b2:	881b      	ldrh	r3, [r3, #0]
    86b4:	69fa      	ldr	r2, [r7, #28]
    86b6:	4353      	muls	r3, r2
    86b8:	0a9b      	lsrs	r3, r3, #10
    86ba:	617b      	str	r3, [r7, #20]

	/* Find the ratio of the channel values (Channel1/Channel0) */
	unsigned long ratio1 = 0;
    86bc:	2300      	movs	r3, #0
    86be:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (channel0 != 0) ratio1 = (channel1 << (TSL2561_LUX_RATIOSCALE+1)) / channel0;
    86c0:	69bb      	ldr	r3, [r7, #24]
    86c2:	2b00      	cmp	r3, #0
    86c4:	d007      	beq.n	86d6 <calculateLux+0x66>
    86c6:	697b      	ldr	r3, [r7, #20]
    86c8:	029a      	lsls	r2, r3, #10
    86ca:	4b36      	ldr	r3, [pc, #216]	; (87a4 <calculateLux+0x134>)
    86cc:	69b9      	ldr	r1, [r7, #24]
    86ce:	0010      	movs	r0, r2
    86d0:	4798      	blx	r3
    86d2:	0003      	movs	r3, r0
    86d4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* round the ratio value */
	unsigned long ratio = (ratio1 + 1) >> 1;
    86d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86d8:	3301      	adds	r3, #1
    86da:	085b      	lsrs	r3, r3, #1
    86dc:	613b      	str	r3, [r7, #16]
	else if (ratio <= TSL2561_LUX_K7C)
	{b=TSL2561_LUX_B7C; m=TSL2561_LUX_M7C;}
	else if (ratio > TSL2561_LUX_K8C)
	{b=TSL2561_LUX_B8C; m=TSL2561_LUX_M8C;}
	#else
	if ((ratio >= 0) && (ratio <= TSL2561_LUX_K1T))
    86de:	693b      	ldr	r3, [r7, #16]
    86e0:	2b40      	cmp	r3, #64	; 0x40
    86e2:	d806      	bhi.n	86f2 <calculateLux+0x82>
	{b=TSL2561_LUX_B1T; m=TSL2561_LUX_M1T;}
    86e4:	23f9      	movs	r3, #249	; 0xf9
    86e6:	005b      	lsls	r3, r3, #1
    86e8:	62bb      	str	r3, [r7, #40]	; 0x28
    86ea:	23df      	movs	r3, #223	; 0xdf
    86ec:	005b      	lsls	r3, r3, #1
    86ee:	627b      	str	r3, [r7, #36]	; 0x24
    86f0:	e042      	b.n	8778 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K2T)
    86f2:	693b      	ldr	r3, [r7, #16]
    86f4:	2b80      	cmp	r3, #128	; 0x80
    86f6:	d805      	bhi.n	8704 <calculateLux+0x94>
	{b=TSL2561_LUX_B2T; m=TSL2561_LUX_M2T;}
    86f8:	2385      	movs	r3, #133	; 0x85
    86fa:	009b      	lsls	r3, r3, #2
    86fc:	62bb      	str	r3, [r7, #40]	; 0x28
    86fe:	4b2a      	ldr	r3, [pc, #168]	; (87a8 <calculateLux+0x138>)
    8700:	627b      	str	r3, [r7, #36]	; 0x24
    8702:	e039      	b.n	8778 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K3T)
    8704:	693b      	ldr	r3, [r7, #16]
    8706:	2bc0      	cmp	r3, #192	; 0xc0
    8708:	d804      	bhi.n	8714 <calculateLux+0xa4>
	{b=TSL2561_LUX_B3T; m=TSL2561_LUX_M3T;}
    870a:	4b28      	ldr	r3, [pc, #160]	; (87ac <calculateLux+0x13c>)
    870c:	62bb      	str	r3, [r7, #40]	; 0x28
    870e:	4b28      	ldr	r3, [pc, #160]	; (87b0 <calculateLux+0x140>)
    8710:	627b      	str	r3, [r7, #36]	; 0x24
    8712:	e031      	b.n	8778 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K4T)
    8714:	693a      	ldr	r2, [r7, #16]
    8716:	2380      	movs	r3, #128	; 0x80
    8718:	005b      	lsls	r3, r3, #1
    871a:	429a      	cmp	r2, r3
    871c:	d805      	bhi.n	872a <calculateLux+0xba>
	{b=TSL2561_LUX_B4T; m=TSL2561_LUX_M4T;}
    871e:	239c      	movs	r3, #156	; 0x9c
    8720:	009b      	lsls	r3, r3, #2
    8722:	62bb      	str	r3, [r7, #40]	; 0x28
    8724:	4b23      	ldr	r3, [pc, #140]	; (87b4 <calculateLux+0x144>)
    8726:	627b      	str	r3, [r7, #36]	; 0x24
    8728:	e026      	b.n	8778 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K5T)
    872a:	693a      	ldr	r2, [r7, #16]
    872c:	239c      	movs	r3, #156	; 0x9c
    872e:	005b      	lsls	r3, r3, #1
    8730:	429a      	cmp	r2, r3
    8732:	d806      	bhi.n	8742 <calculateLux+0xd2>
	{b=TSL2561_LUX_B5T; m=TSL2561_LUX_M5T;}
    8734:	2370      	movs	r3, #112	; 0x70
    8736:	33ff      	adds	r3, #255	; 0xff
    8738:	62bb      	str	r3, [r7, #40]	; 0x28
    873a:	23fe      	movs	r3, #254	; 0xfe
    873c:	005b      	lsls	r3, r3, #1
    873e:	627b      	str	r3, [r7, #36]	; 0x24
    8740:	e01a      	b.n	8778 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K6T)
    8742:	693a      	ldr	r2, [r7, #16]
    8744:	23cd      	movs	r3, #205	; 0xcd
    8746:	005b      	lsls	r3, r3, #1
    8748:	429a      	cmp	r2, r3
    874a:	d804      	bhi.n	8756 <calculateLux+0xe6>
	{b=TSL2561_LUX_B6T; m=TSL2561_LUX_M6T;}
    874c:	23d2      	movs	r3, #210	; 0xd2
    874e:	62bb      	str	r3, [r7, #40]	; 0x28
    8750:	23fb      	movs	r3, #251	; 0xfb
    8752:	627b      	str	r3, [r7, #36]	; 0x24
    8754:	e010      	b.n	8778 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K7T)
    8756:	693b      	ldr	r3, [r7, #16]
    8758:	4a17      	ldr	r2, [pc, #92]	; (87b8 <calculateLux+0x148>)
    875a:	4293      	cmp	r3, r2
    875c:	d804      	bhi.n	8768 <calculateLux+0xf8>
	{b=TSL2561_LUX_B7T; m=TSL2561_LUX_M7T;}
    875e:	2318      	movs	r3, #24
    8760:	62bb      	str	r3, [r7, #40]	; 0x28
    8762:	2312      	movs	r3, #18
    8764:	627b      	str	r3, [r7, #36]	; 0x24
    8766:	e007      	b.n	8778 <calculateLux+0x108>
	else if (ratio > TSL2561_LUX_K8T)
    8768:	693b      	ldr	r3, [r7, #16]
    876a:	4a13      	ldr	r2, [pc, #76]	; (87b8 <calculateLux+0x148>)
    876c:	4293      	cmp	r3, r2
    876e:	d903      	bls.n	8778 <calculateLux+0x108>
	{b=TSL2561_LUX_B8T; m=TSL2561_LUX_M8T;}
    8770:	2300      	movs	r3, #0
    8772:	62bb      	str	r3, [r7, #40]	; 0x28
    8774:	2300      	movs	r3, #0
    8776:	627b      	str	r3, [r7, #36]	; 0x24
	#endif

	unsigned long temp;
	temp = ((channel0 * b) - (channel1 * m));
    8778:	69bb      	ldr	r3, [r7, #24]
    877a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    877c:	435a      	muls	r2, r3
    877e:	697b      	ldr	r3, [r7, #20]
    8780:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8782:	434b      	muls	r3, r1
    8784:	1ad3      	subs	r3, r2, r3
    8786:	60fb      	str	r3, [r7, #12]

	/* Do not allow negative lux value */
	if (temp < 0) temp = 0;

	/* Round lsb (2^(LUX_SCALE-1)) */
	temp += (1 << (TSL2561_LUX_LUXSCALE-1));
    8788:	68fb      	ldr	r3, [r7, #12]
    878a:	2280      	movs	r2, #128	; 0x80
    878c:	0192      	lsls	r2, r2, #6
    878e:	4694      	mov	ip, r2
    8790:	4463      	add	r3, ip
    8792:	60fb      	str	r3, [r7, #12]

	/* Strip off fractional portion */
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
    8794:	68fb      	ldr	r3, [r7, #12]
    8796:	0b9b      	lsrs	r3, r3, #14
    8798:	60bb      	str	r3, [r7, #8]

	/* Signal I2C had no errors */
	return lux;
    879a:	68bb      	ldr	r3, [r7, #8]
}
    879c:	0018      	movs	r0, r3
    879e:	46bd      	mov	sp, r7
    87a0:	b00c      	add	sp, #48	; 0x30
    87a2:	bd80      	pop	{r7, pc}
    87a4:	00011441 	.word	0x00011441
    87a8:	000002d1 	.word	0x000002d1
    87ac:	0000023f 	.word	0x0000023f
    87b0:	0000037b 	.word	0x0000037b
    87b4:	000003fe 	.word	0x000003fe
    87b8:	0000029a 	.word	0x0000029a

000087bc <getLuminosity>:

int getLuminosity() {
    87bc:	b590      	push	{r4, r7, lr}
    87be:	b083      	sub	sp, #12
    87c0:	af00      	add	r7, sp, #0
	/* Reads a two byte value from channel 0 (visible + infrared) */
	uint16_t broadband = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN0_LOW));
    87c2:	1dbc      	adds	r4, r7, #6
    87c4:	20ac      	movs	r0, #172	; 0xac
    87c6:	4b0b      	ldr	r3, [pc, #44]	; (87f4 <getLuminosity+0x38>)
    87c8:	4798      	blx	r3
    87ca:	0003      	movs	r3, r0
    87cc:	8023      	strh	r3, [r4, #0]

	/* Reads a two byte value from channel 1 (infrared) */
	uint16_t ir = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW));
    87ce:	1d3c      	adds	r4, r7, #4
    87d0:	20ae      	movs	r0, #174	; 0xae
    87d2:	4b08      	ldr	r3, [pc, #32]	; (87f4 <getLuminosity+0x38>)
    87d4:	4798      	blx	r3
    87d6:	0003      	movs	r3, r0
    87d8:	8023      	strh	r3, [r4, #0]
	
	return calculateLux(broadband, ir);
    87da:	1d3b      	adds	r3, r7, #4
    87dc:	881a      	ldrh	r2, [r3, #0]
    87de:	1dbb      	adds	r3, r7, #6
    87e0:	881b      	ldrh	r3, [r3, #0]
    87e2:	0011      	movs	r1, r2
    87e4:	0018      	movs	r0, r3
    87e6:	4b04      	ldr	r3, [pc, #16]	; (87f8 <getLuminosity+0x3c>)
    87e8:	4798      	blx	r3
    87ea:	0003      	movs	r3, r0
}
    87ec:	0018      	movs	r0, r3
    87ee:	46bd      	mov	sp, r7
    87f0:	b003      	add	sp, #12
    87f2:	bd90      	pop	{r4, r7, pc}
    87f4:	00008565 	.word	0x00008565
    87f8:	00008671 	.word	0x00008671

000087fc <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b082      	sub	sp, #8
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    8804:	687b      	ldr	r3, [r7, #4]
    8806:	2b00      	cmp	r3, #0
    8808:	d00c      	beq.n	8824 <delay_cycles+0x28>
		SysTick->LOAD = n;
    880a:	4b08      	ldr	r3, [pc, #32]	; (882c <delay_cycles+0x30>)
    880c:	687a      	ldr	r2, [r7, #4]
    880e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    8810:	4b06      	ldr	r3, [pc, #24]	; (882c <delay_cycles+0x30>)
    8812:	2200      	movs	r2, #0
    8814:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8816:	46c0      	nop			; (mov r8, r8)
    8818:	4b04      	ldr	r3, [pc, #16]	; (882c <delay_cycles+0x30>)
    881a:	681a      	ldr	r2, [r3, #0]
    881c:	2380      	movs	r3, #128	; 0x80
    881e:	025b      	lsls	r3, r3, #9
    8820:	4013      	ands	r3, r2
    8822:	d0f9      	beq.n	8818 <delay_cycles+0x1c>
		};
	}
}
    8824:	46c0      	nop			; (mov r8, r8)
    8826:	46bd      	mov	sp, r7
    8828:	b002      	add	sp, #8
    882a:	bd80      	pop	{r7, pc}
    882c:	e000e010 	.word	0xe000e010

00008830 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    8830:	b580      	push	{r7, lr}
    8832:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    8834:	2000      	movs	r0, #0
    8836:	4b0f      	ldr	r3, [pc, #60]	; (8874 <delay_init+0x44>)
    8838:	4798      	blx	r3
    883a:	0002      	movs	r2, r0
    883c:	4b0e      	ldr	r3, [pc, #56]	; (8878 <delay_init+0x48>)
    883e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    8840:	4b0d      	ldr	r3, [pc, #52]	; (8878 <delay_init+0x48>)
    8842:	6818      	ldr	r0, [r3, #0]
    8844:	4b0d      	ldr	r3, [pc, #52]	; (887c <delay_init+0x4c>)
    8846:	22fa      	movs	r2, #250	; 0xfa
    8848:	0091      	lsls	r1, r2, #2
    884a:	4798      	blx	r3
    884c:	0003      	movs	r3, r0
    884e:	001a      	movs	r2, r3
    8850:	4b09      	ldr	r3, [pc, #36]	; (8878 <delay_init+0x48>)
    8852:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    8854:	4b08      	ldr	r3, [pc, #32]	; (8878 <delay_init+0x48>)
    8856:	6818      	ldr	r0, [r3, #0]
    8858:	4b08      	ldr	r3, [pc, #32]	; (887c <delay_init+0x4c>)
    885a:	22fa      	movs	r2, #250	; 0xfa
    885c:	0091      	lsls	r1, r2, #2
    885e:	4798      	blx	r3
    8860:	0003      	movs	r3, r0
    8862:	001a      	movs	r2, r3
    8864:	4b06      	ldr	r3, [pc, #24]	; (8880 <delay_init+0x50>)
    8866:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    8868:	4b06      	ldr	r3, [pc, #24]	; (8884 <delay_init+0x54>)
    886a:	2205      	movs	r2, #5
    886c:	601a      	str	r2, [r3, #0]
}
    886e:	46c0      	nop			; (mov r8, r8)
    8870:	46bd      	mov	sp, r7
    8872:	bd80      	pop	{r7, pc}
    8874:	0000c411 	.word	0x0000c411
    8878:	20000068 	.word	0x20000068
    887c:	00011441 	.word	0x00011441
    8880:	2000006c 	.word	0x2000006c
    8884:	e000e010 	.word	0xe000e010

00008888 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    8888:	b580      	push	{r7, lr}
    888a:	b082      	sub	sp, #8
    888c:	af00      	add	r7, sp, #0
    888e:	6078      	str	r0, [r7, #4]
	while (n--) {
    8890:	e004      	b.n	889c <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    8892:	4b07      	ldr	r3, [pc, #28]	; (88b0 <delay_cycles_us+0x28>)
    8894:	681b      	ldr	r3, [r3, #0]
    8896:	0018      	movs	r0, r3
    8898:	4b06      	ldr	r3, [pc, #24]	; (88b4 <delay_cycles_us+0x2c>)
    889a:	4798      	blx	r3
	while (n--) {
    889c:	687b      	ldr	r3, [r7, #4]
    889e:	1e5a      	subs	r2, r3, #1
    88a0:	607a      	str	r2, [r7, #4]
    88a2:	2b00      	cmp	r3, #0
    88a4:	d1f5      	bne.n	8892 <delay_cycles_us+0xa>
	}
}
    88a6:	46c0      	nop			; (mov r8, r8)
    88a8:	46bd      	mov	sp, r7
    88aa:	b002      	add	sp, #8
    88ac:	bd80      	pop	{r7, pc}
    88ae:	46c0      	nop			; (mov r8, r8)
    88b0:	2000006c 	.word	0x2000006c
    88b4:	000087fd 	.word	0x000087fd

000088b8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    88b8:	b580      	push	{r7, lr}
    88ba:	b082      	sub	sp, #8
    88bc:	af00      	add	r7, sp, #0
    88be:	6078      	str	r0, [r7, #4]
	while (n--) {
    88c0:	e004      	b.n	88cc <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    88c2:	4b07      	ldr	r3, [pc, #28]	; (88e0 <delay_cycles_ms+0x28>)
    88c4:	681b      	ldr	r3, [r3, #0]
    88c6:	0018      	movs	r0, r3
    88c8:	4b06      	ldr	r3, [pc, #24]	; (88e4 <delay_cycles_ms+0x2c>)
    88ca:	4798      	blx	r3
	while (n--) {
    88cc:	687b      	ldr	r3, [r7, #4]
    88ce:	1e5a      	subs	r2, r3, #1
    88d0:	607a      	str	r2, [r7, #4]
    88d2:	2b00      	cmp	r3, #0
    88d4:	d1f5      	bne.n	88c2 <delay_cycles_ms+0xa>
	}
}
    88d6:	46c0      	nop			; (mov r8, r8)
    88d8:	46bd      	mov	sp, r7
    88da:	b002      	add	sp, #8
    88dc:	bd80      	pop	{r7, pc}
    88de:	46c0      	nop			; (mov r8, r8)
    88e0:	20000068 	.word	0x20000068
    88e4:	000087fd 	.word	0x000087fd

000088e8 <system_gclk_chan_get_config_defaults>:
{
    88e8:	b580      	push	{r7, lr}
    88ea:	b082      	sub	sp, #8
    88ec:	af00      	add	r7, sp, #0
    88ee:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	2200      	movs	r2, #0
    88f4:	701a      	strb	r2, [r3, #0]
}
    88f6:	46c0      	nop			; (mov r8, r8)
    88f8:	46bd      	mov	sp, r7
    88fa:	b002      	add	sp, #8
    88fc:	bd80      	pop	{r7, pc}
	...

00008900 <system_apb_clock_set_mask>:
{
    8900:	b580      	push	{r7, lr}
    8902:	b082      	sub	sp, #8
    8904:	af00      	add	r7, sp, #0
    8906:	0002      	movs	r2, r0
    8908:	6039      	str	r1, [r7, #0]
    890a:	1dfb      	adds	r3, r7, #7
    890c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    890e:	1dfb      	adds	r3, r7, #7
    8910:	781b      	ldrb	r3, [r3, #0]
    8912:	2b01      	cmp	r3, #1
    8914:	d00a      	beq.n	892c <system_apb_clock_set_mask+0x2c>
    8916:	2b02      	cmp	r3, #2
    8918:	d00f      	beq.n	893a <system_apb_clock_set_mask+0x3a>
    891a:	2b00      	cmp	r3, #0
    891c:	d114      	bne.n	8948 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    891e:	4b0e      	ldr	r3, [pc, #56]	; (8958 <system_apb_clock_set_mask+0x58>)
    8920:	4a0d      	ldr	r2, [pc, #52]	; (8958 <system_apb_clock_set_mask+0x58>)
    8922:	6991      	ldr	r1, [r2, #24]
    8924:	683a      	ldr	r2, [r7, #0]
    8926:	430a      	orrs	r2, r1
    8928:	619a      	str	r2, [r3, #24]
			break;
    892a:	e00f      	b.n	894c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    892c:	4b0a      	ldr	r3, [pc, #40]	; (8958 <system_apb_clock_set_mask+0x58>)
    892e:	4a0a      	ldr	r2, [pc, #40]	; (8958 <system_apb_clock_set_mask+0x58>)
    8930:	69d1      	ldr	r1, [r2, #28]
    8932:	683a      	ldr	r2, [r7, #0]
    8934:	430a      	orrs	r2, r1
    8936:	61da      	str	r2, [r3, #28]
			break;
    8938:	e008      	b.n	894c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    893a:	4b07      	ldr	r3, [pc, #28]	; (8958 <system_apb_clock_set_mask+0x58>)
    893c:	4a06      	ldr	r2, [pc, #24]	; (8958 <system_apb_clock_set_mask+0x58>)
    893e:	6a11      	ldr	r1, [r2, #32]
    8940:	683a      	ldr	r2, [r7, #0]
    8942:	430a      	orrs	r2, r1
    8944:	621a      	str	r2, [r3, #32]
			break;
    8946:	e001      	b.n	894c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    8948:	2317      	movs	r3, #23
    894a:	e000      	b.n	894e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    894c:	2300      	movs	r3, #0
}
    894e:	0018      	movs	r0, r3
    8950:	46bd      	mov	sp, r7
    8952:	b002      	add	sp, #8
    8954:	bd80      	pop	{r7, pc}
    8956:	46c0      	nop			; (mov r8, r8)
    8958:	40000400 	.word	0x40000400

0000895c <system_pinmux_get_config_defaults>:
{
    895c:	b580      	push	{r7, lr}
    895e:	b082      	sub	sp, #8
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	2280      	movs	r2, #128	; 0x80
    8968:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    896a:	687b      	ldr	r3, [r7, #4]
    896c:	2200      	movs	r2, #0
    896e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8970:	687b      	ldr	r3, [r7, #4]
    8972:	2201      	movs	r2, #1
    8974:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8976:	687b      	ldr	r3, [r7, #4]
    8978:	2200      	movs	r2, #0
    897a:	70da      	strb	r2, [r3, #3]
}
    897c:	46c0      	nop			; (mov r8, r8)
    897e:	46bd      	mov	sp, r7
    8980:	b002      	add	sp, #8
    8982:	bd80      	pop	{r7, pc}

00008984 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    8984:	b580      	push	{r7, lr}
    8986:	b082      	sub	sp, #8
    8988:	af00      	add	r7, sp, #0
    898a:	0002      	movs	r2, r0
    898c:	1dfb      	adds	r3, r7, #7
    898e:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    8990:	1dfb      	adds	r3, r7, #7
    8992:	781b      	ldrb	r3, [r3, #0]
    8994:	2b00      	cmp	r3, #0
    8996:	d002      	beq.n	899e <system_voltage_reference_enable+0x1a>
    8998:	2b01      	cmp	r3, #1
    899a:	d007      	beq.n	89ac <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    899c:	e00d      	b.n	89ba <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    899e:	4b08      	ldr	r3, [pc, #32]	; (89c0 <system_voltage_reference_enable+0x3c>)
    89a0:	4a07      	ldr	r2, [pc, #28]	; (89c0 <system_voltage_reference_enable+0x3c>)
    89a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
    89a4:	2102      	movs	r1, #2
    89a6:	430a      	orrs	r2, r1
    89a8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    89aa:	e006      	b.n	89ba <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    89ac:	4b04      	ldr	r3, [pc, #16]	; (89c0 <system_voltage_reference_enable+0x3c>)
    89ae:	4a04      	ldr	r2, [pc, #16]	; (89c0 <system_voltage_reference_enable+0x3c>)
    89b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
    89b2:	2104      	movs	r1, #4
    89b4:	430a      	orrs	r2, r1
    89b6:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    89b8:	46c0      	nop			; (mov r8, r8)
	}
}
    89ba:	46bd      	mov	sp, r7
    89bc:	b002      	add	sp, #8
    89be:	bd80      	pop	{r7, pc}
    89c0:	40000800 	.word	0x40000800

000089c4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    89c4:	b580      	push	{r7, lr}
    89c6:	b084      	sub	sp, #16
    89c8:	af00      	add	r7, sp, #0
    89ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	681b      	ldr	r3, [r3, #0]
    89d0:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    89d2:	68fb      	ldr	r3, [r7, #12]
    89d4:	7e5b      	ldrb	r3, [r3, #25]
    89d6:	b2db      	uxtb	r3, r3
    89d8:	b25b      	sxtb	r3, r3
    89da:	2b00      	cmp	r3, #0
    89dc:	da01      	bge.n	89e2 <adc_is_syncing+0x1e>
		return true;
    89de:	2301      	movs	r3, #1
    89e0:	e000      	b.n	89e4 <adc_is_syncing+0x20>
	}

	return false;
    89e2:	2300      	movs	r3, #0
}
    89e4:	0018      	movs	r0, r3
    89e6:	46bd      	mov	sp, r7
    89e8:	b004      	add	sp, #16
    89ea:	bd80      	pop	{r7, pc}

000089ec <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    89ec:	b580      	push	{r7, lr}
    89ee:	b082      	sub	sp, #8
    89f0:	af00      	add	r7, sp, #0
    89f2:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    89f4:	687b      	ldr	r3, [r7, #4]
    89f6:	2200      	movs	r2, #0
    89f8:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	2200      	movs	r2, #0
    89fe:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    8a00:	687b      	ldr	r3, [r7, #4]
    8a02:	2200      	movs	r2, #0
    8a04:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    8a06:	687b      	ldr	r3, [r7, #4]
    8a08:	2200      	movs	r2, #0
    8a0a:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    8a0c:	687b      	ldr	r3, [r7, #4]
    8a0e:	2200      	movs	r2, #0
    8a10:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    8a12:	687b      	ldr	r3, [r7, #4]
    8a14:	2200      	movs	r2, #0
    8a16:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    8a18:	687b      	ldr	r3, [r7, #4]
    8a1a:	2200      	movs	r2, #0
    8a1c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	2200      	movs	r2, #0
    8a22:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    8a24:	687b      	ldr	r3, [r7, #4]
    8a26:	2200      	movs	r2, #0
    8a28:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    8a2a:	687b      	ldr	r3, [r7, #4]
    8a2c:	22c0      	movs	r2, #192	; 0xc0
    8a2e:	0152      	lsls	r2, r2, #5
    8a30:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    8a32:	687b      	ldr	r3, [r7, #4]
    8a34:	2200      	movs	r2, #0
    8a36:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    8a38:	687b      	ldr	r3, [r7, #4]
    8a3a:	2200      	movs	r2, #0
    8a3c:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    8a3e:	687b      	ldr	r3, [r7, #4]
    8a40:	2200      	movs	r2, #0
    8a42:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    8a44:	687b      	ldr	r3, [r7, #4]
    8a46:	2200      	movs	r2, #0
    8a48:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    8a4a:	687b      	ldr	r3, [r7, #4]
    8a4c:	2200      	movs	r2, #0
    8a4e:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    8a50:	687b      	ldr	r3, [r7, #4]
    8a52:	222a      	movs	r2, #42	; 0x2a
    8a54:	2100      	movs	r1, #0
    8a56:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	2200      	movs	r2, #0
    8a5c:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    8a5e:	687b      	ldr	r3, [r7, #4]
    8a60:	2200      	movs	r2, #0
    8a62:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    8a64:	687b      	ldr	r3, [r7, #4]
    8a66:	2224      	movs	r2, #36	; 0x24
    8a68:	2100      	movs	r1, #0
    8a6a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    8a6c:	687b      	ldr	r3, [r7, #4]
    8a6e:	2200      	movs	r2, #0
    8a70:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	2200      	movs	r2, #0
    8a76:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    8a78:	687b      	ldr	r3, [r7, #4]
    8a7a:	2200      	movs	r2, #0
    8a7c:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    8a7e:	687b      	ldr	r3, [r7, #4]
    8a80:	222b      	movs	r2, #43	; 0x2b
    8a82:	2100      	movs	r1, #0
    8a84:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    8a86:	687b      	ldr	r3, [r7, #4]
    8a88:	222c      	movs	r2, #44	; 0x2c
    8a8a:	2100      	movs	r1, #0
    8a8c:	5499      	strb	r1, [r3, r2]
}
    8a8e:	46c0      	nop			; (mov r8, r8)
    8a90:	46bd      	mov	sp, r7
    8a92:	b002      	add	sp, #8
    8a94:	bd80      	pop	{r7, pc}
	...

00008a98 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    8a98:	b580      	push	{r7, lr}
    8a9a:	b098      	sub	sp, #96	; 0x60
    8a9c:	af00      	add	r7, sp, #0
    8a9e:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    8aa0:	230c      	movs	r3, #12
    8aa2:	18fa      	adds	r2, r7, r3
    8aa4:	4b15      	ldr	r3, [pc, #84]	; (8afc <_adc_configure_ain_pin+0x64>)
    8aa6:	0010      	movs	r0, r2
    8aa8:	0019      	movs	r1, r3
    8aaa:	2350      	movs	r3, #80	; 0x50
    8aac:	001a      	movs	r2, r3
    8aae:	4b14      	ldr	r3, [pc, #80]	; (8b00 <_adc_configure_ain_pin+0x68>)
    8ab0:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    8ab2:	4b14      	ldr	r3, [pc, #80]	; (8b04 <_adc_configure_ain_pin+0x6c>)
    8ab4:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    8ab6:	687b      	ldr	r3, [r7, #4]
    8ab8:	2b13      	cmp	r3, #19
    8aba:	d81a      	bhi.n	8af2 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    8abc:	230c      	movs	r3, #12
    8abe:	18fb      	adds	r3, r7, r3
    8ac0:	687a      	ldr	r2, [r7, #4]
    8ac2:	0092      	lsls	r2, r2, #2
    8ac4:	58d3      	ldr	r3, [r2, r3]
    8ac6:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    8ac8:	2308      	movs	r3, #8
    8aca:	18fb      	adds	r3, r7, r3
    8acc:	0018      	movs	r0, r3
    8ace:	4b0e      	ldr	r3, [pc, #56]	; (8b08 <_adc_configure_ain_pin+0x70>)
    8ad0:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    8ad2:	2308      	movs	r3, #8
    8ad4:	18fb      	adds	r3, r7, r3
    8ad6:	2200      	movs	r2, #0
    8ad8:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    8ada:	2308      	movs	r3, #8
    8adc:	18fb      	adds	r3, r7, r3
    8ade:	2201      	movs	r2, #1
    8ae0:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    8ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8ae4:	b2db      	uxtb	r3, r3
    8ae6:	2208      	movs	r2, #8
    8ae8:	18ba      	adds	r2, r7, r2
    8aea:	0011      	movs	r1, r2
    8aec:	0018      	movs	r0, r3
    8aee:	4b07      	ldr	r3, [pc, #28]	; (8b0c <_adc_configure_ain_pin+0x74>)
    8af0:	4798      	blx	r3
	}
}
    8af2:	46c0      	nop			; (mov r8, r8)
    8af4:	46bd      	mov	sp, r7
    8af6:	b018      	add	sp, #96	; 0x60
    8af8:	bd80      	pop	{r7, pc}
    8afa:	46c0      	nop			; (mov r8, r8)
    8afc:	00014e04 	.word	0x00014e04
    8b00:	0000e635 	.word	0x0000e635
    8b04:	0000ffff 	.word	0x0000ffff
    8b08:	0000895d 	.word	0x0000895d
    8b0c:	0000c7d5 	.word	0x0000c7d5

00008b10 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    8b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b12:	b089      	sub	sp, #36	; 0x24
    8b14:	af00      	add	r7, sp, #0
    8b16:	6078      	str	r0, [r7, #4]
    8b18:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    8b1a:	231f      	movs	r3, #31
    8b1c:	18fb      	adds	r3, r7, r3
    8b1e:	2200      	movs	r2, #0
    8b20:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    8b22:	2310      	movs	r3, #16
    8b24:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    8b26:	2317      	movs	r3, #23
    8b28:	18fb      	adds	r3, r7, r3
    8b2a:	2200      	movs	r2, #0
    8b2c:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    8b2e:	687b      	ldr	r3, [r7, #4]
    8b30:	681b      	ldr	r3, [r3, #0]
    8b32:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8b34:	230c      	movs	r3, #12
    8b36:	18fb      	adds	r3, r7, r3
    8b38:	0018      	movs	r0, r3
    8b3a:	4bce      	ldr	r3, [pc, #824]	; (8e74 <_adc_set_config+0x364>)
    8b3c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    8b3e:	683b      	ldr	r3, [r7, #0]
    8b40:	781a      	ldrb	r2, [r3, #0]
    8b42:	230c      	movs	r3, #12
    8b44:	18fb      	adds	r3, r7, r3
    8b46:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    8b48:	230c      	movs	r3, #12
    8b4a:	18fb      	adds	r3, r7, r3
    8b4c:	0019      	movs	r1, r3
    8b4e:	201e      	movs	r0, #30
    8b50:	4bc9      	ldr	r3, [pc, #804]	; (8e78 <_adc_set_config+0x368>)
    8b52:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    8b54:	201e      	movs	r0, #30
    8b56:	4bc9      	ldr	r3, [pc, #804]	; (8e7c <_adc_set_config+0x36c>)
    8b58:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    8b5a:	683b      	ldr	r3, [r7, #0]
    8b5c:	222c      	movs	r2, #44	; 0x2c
    8b5e:	5c9b      	ldrb	r3, [r3, r2]
    8b60:	2b00      	cmp	r3, #0
    8b62:	d040      	beq.n	8be6 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    8b64:	2316      	movs	r3, #22
    8b66:	18fb      	adds	r3, r7, r3
    8b68:	683a      	ldr	r2, [r7, #0]
    8b6a:	212b      	movs	r1, #43	; 0x2b
    8b6c:	5c52      	ldrb	r2, [r2, r1]
    8b6e:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    8b70:	683b      	ldr	r3, [r7, #0]
    8b72:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    8b74:	2315      	movs	r3, #21
    8b76:	18fb      	adds	r3, r7, r3
    8b78:	2216      	movs	r2, #22
    8b7a:	18ba      	adds	r2, r7, r2
    8b7c:	7812      	ldrb	r2, [r2, #0]
    8b7e:	188a      	adds	r2, r1, r2
    8b80:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    8b82:	683b      	ldr	r3, [r7, #0]
    8b84:	222c      	movs	r2, #44	; 0x2c
    8b86:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    8b88:	230f      	movs	r3, #15
    8b8a:	18fb      	adds	r3, r7, r3
    8b8c:	2215      	movs	r2, #21
    8b8e:	18ba      	adds	r2, r7, r2
    8b90:	7812      	ldrb	r2, [r2, #0]
    8b92:	188a      	adds	r2, r1, r2
    8b94:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    8b96:	e018      	b.n	8bca <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    8b98:	2316      	movs	r3, #22
    8b9a:	18fb      	adds	r3, r7, r3
    8b9c:	781b      	ldrb	r3, [r3, #0]
    8b9e:	220f      	movs	r2, #15
    8ba0:	4013      	ands	r3, r2
    8ba2:	683a      	ldr	r2, [r7, #0]
    8ba4:	7b12      	ldrb	r2, [r2, #12]
    8ba6:	189b      	adds	r3, r3, r2
    8ba8:	0018      	movs	r0, r3
    8baa:	4bb5      	ldr	r3, [pc, #724]	; (8e80 <_adc_set_config+0x370>)
    8bac:	4798      	blx	r3
			start_pin++;
    8bae:	2315      	movs	r3, #21
    8bb0:	18fb      	adds	r3, r7, r3
    8bb2:	781a      	ldrb	r2, [r3, #0]
    8bb4:	2315      	movs	r3, #21
    8bb6:	18fb      	adds	r3, r7, r3
    8bb8:	3201      	adds	r2, #1
    8bba:	701a      	strb	r2, [r3, #0]
			offset++;
    8bbc:	2316      	movs	r3, #22
    8bbe:	18fb      	adds	r3, r7, r3
    8bc0:	781a      	ldrb	r2, [r3, #0]
    8bc2:	2316      	movs	r3, #22
    8bc4:	18fb      	adds	r3, r7, r3
    8bc6:	3201      	adds	r2, #1
    8bc8:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    8bca:	2315      	movs	r3, #21
    8bcc:	18fa      	adds	r2, r7, r3
    8bce:	230f      	movs	r3, #15
    8bd0:	18fb      	adds	r3, r7, r3
    8bd2:	7812      	ldrb	r2, [r2, #0]
    8bd4:	781b      	ldrb	r3, [r3, #0]
    8bd6:	429a      	cmp	r2, r3
    8bd8:	d3de      	bcc.n	8b98 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    8bda:	683b      	ldr	r3, [r7, #0]
    8bdc:	89db      	ldrh	r3, [r3, #14]
    8bde:	0018      	movs	r0, r3
    8be0:	4ba7      	ldr	r3, [pc, #668]	; (8e80 <_adc_set_config+0x370>)
    8be2:	4798      	blx	r3
    8be4:	e009      	b.n	8bfa <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    8be6:	683b      	ldr	r3, [r7, #0]
    8be8:	7b1b      	ldrb	r3, [r3, #12]
    8bea:	0018      	movs	r0, r3
    8bec:	4ba4      	ldr	r3, [pc, #656]	; (8e80 <_adc_set_config+0x370>)
    8bee:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    8bf0:	683b      	ldr	r3, [r7, #0]
    8bf2:	89db      	ldrh	r3, [r3, #14]
    8bf4:	0018      	movs	r0, r3
    8bf6:	4ba2      	ldr	r3, [pc, #648]	; (8e80 <_adc_set_config+0x370>)
    8bf8:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    8bfa:	683b      	ldr	r3, [r7, #0]
    8bfc:	7d5b      	ldrb	r3, [r3, #21]
    8bfe:	009b      	lsls	r3, r3, #2
    8c00:	b2da      	uxtb	r2, r3
    8c02:	693b      	ldr	r3, [r7, #16]
    8c04:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    8c06:	683b      	ldr	r3, [r7, #0]
    8c08:	7d9b      	ldrb	r3, [r3, #22]
    8c0a:	01db      	lsls	r3, r3, #7
    8c0c:	b25a      	sxtb	r2, r3
			(config->reference);
    8c0e:	683b      	ldr	r3, [r7, #0]
    8c10:	785b      	ldrb	r3, [r3, #1]
    8c12:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    8c14:	4313      	orrs	r3, r2
    8c16:	b25b      	sxtb	r3, r3
    8c18:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    8c1a:	693b      	ldr	r3, [r7, #16]
    8c1c:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    8c1e:	683b      	ldr	r3, [r7, #0]
    8c20:	791b      	ldrb	r3, [r3, #4]
    8c22:	2b34      	cmp	r3, #52	; 0x34
    8c24:	d846      	bhi.n	8cb4 <_adc_set_config+0x1a4>
    8c26:	009a      	lsls	r2, r3, #2
    8c28:	4b96      	ldr	r3, [pc, #600]	; (8e84 <_adc_set_config+0x374>)
    8c2a:	18d3      	adds	r3, r2, r3
    8c2c:	681b      	ldr	r3, [r3, #0]
    8c2e:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    8c30:	231f      	movs	r3, #31
    8c32:	18fb      	adds	r3, r7, r3
    8c34:	683a      	ldr	r2, [r7, #0]
    8c36:	7c52      	ldrb	r2, [r2, #17]
    8c38:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    8c3a:	2317      	movs	r3, #23
    8c3c:	18fb      	adds	r3, r7, r3
    8c3e:	683a      	ldr	r2, [r7, #0]
    8c40:	7c12      	ldrb	r2, [r2, #16]
    8c42:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8c44:	2310      	movs	r3, #16
    8c46:	61bb      	str	r3, [r7, #24]
		break;
    8c48:	e036      	b.n	8cb8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    8c4a:	231f      	movs	r3, #31
    8c4c:	18fb      	adds	r3, r7, r3
    8c4e:	2201      	movs	r2, #1
    8c50:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    8c52:	2317      	movs	r3, #23
    8c54:	18fb      	adds	r3, r7, r3
    8c56:	2202      	movs	r2, #2
    8c58:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8c5a:	2310      	movs	r3, #16
    8c5c:	61bb      	str	r3, [r7, #24]
		break;
    8c5e:	e02b      	b.n	8cb8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    8c60:	231f      	movs	r3, #31
    8c62:	18fb      	adds	r3, r7, r3
    8c64:	2202      	movs	r2, #2
    8c66:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    8c68:	2317      	movs	r3, #23
    8c6a:	18fb      	adds	r3, r7, r3
    8c6c:	2204      	movs	r2, #4
    8c6e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8c70:	2310      	movs	r3, #16
    8c72:	61bb      	str	r3, [r7, #24]
		break;
    8c74:	e020      	b.n	8cb8 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    8c76:	231f      	movs	r3, #31
    8c78:	18fb      	adds	r3, r7, r3
    8c7a:	2201      	movs	r2, #1
    8c7c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    8c7e:	2317      	movs	r3, #23
    8c80:	18fb      	adds	r3, r7, r3
    8c82:	2206      	movs	r2, #6
    8c84:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8c86:	2310      	movs	r3, #16
    8c88:	61bb      	str	r3, [r7, #24]
		break;
    8c8a:	e015      	b.n	8cb8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    8c8c:	231f      	movs	r3, #31
    8c8e:	18fb      	adds	r3, r7, r3
    8c90:	2200      	movs	r2, #0
    8c92:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    8c94:	2317      	movs	r3, #23
    8c96:	18fb      	adds	r3, r7, r3
    8c98:	2208      	movs	r2, #8
    8c9a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8c9c:	2310      	movs	r3, #16
    8c9e:	61bb      	str	r3, [r7, #24]
		break;
    8ca0:	e00a      	b.n	8cb8 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    8ca2:	2330      	movs	r3, #48	; 0x30
    8ca4:	61bb      	str	r3, [r7, #24]
		break;
    8ca6:	e007      	b.n	8cb8 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    8ca8:	2320      	movs	r3, #32
    8caa:	61bb      	str	r3, [r7, #24]
		break;
    8cac:	e004      	b.n	8cb8 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    8cae:	2300      	movs	r3, #0
    8cb0:	61bb      	str	r3, [r7, #24]
		break;
    8cb2:	e001      	b.n	8cb8 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    8cb4:	2317      	movs	r3, #23
    8cb6:	e1ae      	b.n	9016 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    8cb8:	231f      	movs	r3, #31
    8cba:	18fb      	adds	r3, r7, r3
    8cbc:	781b      	ldrb	r3, [r3, #0]
    8cbe:	011b      	lsls	r3, r3, #4
    8cc0:	b2db      	uxtb	r3, r3
    8cc2:	2270      	movs	r2, #112	; 0x70
    8cc4:	4013      	ands	r3, r2
    8cc6:	b2da      	uxtb	r2, r3
    8cc8:	2317      	movs	r3, #23
    8cca:	18fb      	adds	r3, r7, r3
    8ccc:	781b      	ldrb	r3, [r3, #0]
    8cce:	4313      	orrs	r3, r2
    8cd0:	b2da      	uxtb	r2, r3
    8cd2:	693b      	ldr	r3, [r7, #16]
    8cd4:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    8cd6:	683b      	ldr	r3, [r7, #0]
    8cd8:	7ddb      	ldrb	r3, [r3, #23]
    8cda:	2b3f      	cmp	r3, #63	; 0x3f
    8cdc:	d901      	bls.n	8ce2 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    8cde:	2317      	movs	r3, #23
    8ce0:	e199      	b.n	9016 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    8ce2:	683b      	ldr	r3, [r7, #0]
    8ce4:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    8ce6:	693b      	ldr	r3, [r7, #16]
    8ce8:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    8cea:	46c0      	nop			; (mov r8, r8)
    8cec:	687b      	ldr	r3, [r7, #4]
    8cee:	0018      	movs	r0, r3
    8cf0:	4b65      	ldr	r3, [pc, #404]	; (8e88 <_adc_set_config+0x378>)
    8cf2:	4798      	blx	r3
    8cf4:	1e03      	subs	r3, r0, #0
    8cf6:	d1f9      	bne.n	8cec <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    8cf8:	683b      	ldr	r3, [r7, #0]
    8cfa:	885a      	ldrh	r2, [r3, #2]
    8cfc:	69bb      	ldr	r3, [r7, #24]
    8cfe:	b29b      	uxth	r3, r3
    8d00:	4313      	orrs	r3, r2
    8d02:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    8d04:	683b      	ldr	r3, [r7, #0]
    8d06:	2124      	movs	r1, #36	; 0x24
    8d08:	5c5b      	ldrb	r3, [r3, r1]
    8d0a:	b29b      	uxth	r3, r3
    8d0c:	00db      	lsls	r3, r3, #3
    8d0e:	b29b      	uxth	r3, r3
			resolution |
    8d10:	4313      	orrs	r3, r2
    8d12:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    8d14:	683b      	ldr	r3, [r7, #0]
    8d16:	7d1b      	ldrb	r3, [r3, #20]
    8d18:	b29b      	uxth	r3, r3
    8d1a:	009b      	lsls	r3, r3, #2
    8d1c:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    8d1e:	4313      	orrs	r3, r2
    8d20:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    8d22:	683b      	ldr	r3, [r7, #0]
    8d24:	7c9b      	ldrb	r3, [r3, #18]
    8d26:	b29b      	uxth	r3, r3
    8d28:	18db      	adds	r3, r3, r3
    8d2a:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    8d2c:	4313      	orrs	r3, r2
    8d2e:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    8d30:	683b      	ldr	r3, [r7, #0]
    8d32:	7cdb      	ldrb	r3, [r3, #19]
    8d34:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    8d36:	4313      	orrs	r3, r2
    8d38:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    8d3a:	693b      	ldr	r3, [r7, #16]
    8d3c:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    8d3e:	683b      	ldr	r3, [r7, #0]
    8d40:	7e1b      	ldrb	r3, [r3, #24]
    8d42:	2b00      	cmp	r3, #0
    8d44:	d100      	bne.n	8d48 <_adc_set_config+0x238>
    8d46:	e0c4      	b.n	8ed2 <_adc_set_config+0x3c2>
		switch (resolution) {
    8d48:	69bb      	ldr	r3, [r7, #24]
    8d4a:	2b10      	cmp	r3, #16
    8d4c:	d100      	bne.n	8d50 <_adc_set_config+0x240>
    8d4e:	e076      	b.n	8e3e <_adc_set_config+0x32e>
    8d50:	d802      	bhi.n	8d58 <_adc_set_config+0x248>
    8d52:	2b00      	cmp	r3, #0
    8d54:	d04d      	beq.n	8df2 <_adc_set_config+0x2e2>
    8d56:	e0bc      	b.n	8ed2 <_adc_set_config+0x3c2>
    8d58:	2b20      	cmp	r3, #32
    8d5a:	d023      	beq.n	8da4 <_adc_set_config+0x294>
    8d5c:	2b30      	cmp	r3, #48	; 0x30
    8d5e:	d000      	beq.n	8d62 <_adc_set_config+0x252>
    8d60:	e0b7      	b.n	8ed2 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    8d62:	683b      	ldr	r3, [r7, #0]
    8d64:	7cdb      	ldrb	r3, [r3, #19]
    8d66:	2b00      	cmp	r3, #0
    8d68:	d011      	beq.n	8d8e <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    8d6a:	683b      	ldr	r3, [r7, #0]
    8d6c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    8d6e:	2b7f      	cmp	r3, #127	; 0x7f
    8d70:	dc0b      	bgt.n	8d8a <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    8d72:	683b      	ldr	r3, [r7, #0]
    8d74:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    8d76:	3380      	adds	r3, #128	; 0x80
    8d78:	db07      	blt.n	8d8a <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    8d7a:	683b      	ldr	r3, [r7, #0]
    8d7c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    8d7e:	2b7f      	cmp	r3, #127	; 0x7f
    8d80:	dc03      	bgt.n	8d8a <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    8d82:	683b      	ldr	r3, [r7, #0]
    8d84:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    8d86:	3380      	adds	r3, #128	; 0x80
    8d88:	da01      	bge.n	8d8e <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8d8a:	2317      	movs	r3, #23
    8d8c:	e143      	b.n	9016 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    8d8e:	683b      	ldr	r3, [r7, #0]
    8d90:	69db      	ldr	r3, [r3, #28]
    8d92:	2bff      	cmp	r3, #255	; 0xff
    8d94:	dc04      	bgt.n	8da0 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    8d96:	683b      	ldr	r3, [r7, #0]
    8d98:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    8d9a:	2bff      	cmp	r3, #255	; 0xff
    8d9c:	dc00      	bgt.n	8da0 <_adc_set_config+0x290>
    8d9e:	e091      	b.n	8ec4 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8da0:	2317      	movs	r3, #23
    8da2:	e138      	b.n	9016 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    8da4:	683b      	ldr	r3, [r7, #0]
    8da6:	7cdb      	ldrb	r3, [r3, #19]
    8da8:	2b00      	cmp	r3, #0
    8daa:	d015      	beq.n	8dd8 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    8dac:	683b      	ldr	r3, [r7, #0]
    8dae:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    8db0:	4a36      	ldr	r2, [pc, #216]	; (8e8c <_adc_set_config+0x37c>)
    8db2:	4293      	cmp	r3, r2
    8db4:	dc0e      	bgt.n	8dd4 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    8db6:	683b      	ldr	r3, [r7, #0]
    8db8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    8dba:	4a35      	ldr	r2, [pc, #212]	; (8e90 <_adc_set_config+0x380>)
    8dbc:	4293      	cmp	r3, r2
    8dbe:	db09      	blt.n	8dd4 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    8dc0:	683b      	ldr	r3, [r7, #0]
    8dc2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    8dc4:	4a31      	ldr	r2, [pc, #196]	; (8e8c <_adc_set_config+0x37c>)
    8dc6:	4293      	cmp	r3, r2
    8dc8:	dc04      	bgt.n	8dd4 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    8dca:	683b      	ldr	r3, [r7, #0]
    8dcc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    8dce:	4a30      	ldr	r2, [pc, #192]	; (8e90 <_adc_set_config+0x380>)
    8dd0:	4293      	cmp	r3, r2
    8dd2:	da01      	bge.n	8dd8 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8dd4:	2317      	movs	r3, #23
    8dd6:	e11e      	b.n	9016 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    8dd8:	683b      	ldr	r3, [r7, #0]
    8dda:	69db      	ldr	r3, [r3, #28]
    8ddc:	4a2d      	ldr	r2, [pc, #180]	; (8e94 <_adc_set_config+0x384>)
    8dde:	4293      	cmp	r3, r2
    8de0:	dc05      	bgt.n	8dee <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    8de2:	683b      	ldr	r3, [r7, #0]
    8de4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    8de6:	4a2b      	ldr	r2, [pc, #172]	; (8e94 <_adc_set_config+0x384>)
    8de8:	4293      	cmp	r3, r2
    8dea:	dc00      	bgt.n	8dee <_adc_set_config+0x2de>
    8dec:	e06c      	b.n	8ec8 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8dee:	2317      	movs	r3, #23
    8df0:	e111      	b.n	9016 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    8df2:	683b      	ldr	r3, [r7, #0]
    8df4:	7cdb      	ldrb	r3, [r3, #19]
    8df6:	2b00      	cmp	r3, #0
    8df8:	d015      	beq.n	8e26 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    8dfa:	683b      	ldr	r3, [r7, #0]
    8dfc:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    8dfe:	4a26      	ldr	r2, [pc, #152]	; (8e98 <_adc_set_config+0x388>)
    8e00:	4293      	cmp	r3, r2
    8e02:	dc0e      	bgt.n	8e22 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    8e04:	683b      	ldr	r3, [r7, #0]
    8e06:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    8e08:	4a24      	ldr	r2, [pc, #144]	; (8e9c <_adc_set_config+0x38c>)
    8e0a:	4293      	cmp	r3, r2
    8e0c:	db09      	blt.n	8e22 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    8e0e:	683b      	ldr	r3, [r7, #0]
    8e10:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    8e12:	4a21      	ldr	r2, [pc, #132]	; (8e98 <_adc_set_config+0x388>)
    8e14:	4293      	cmp	r3, r2
    8e16:	dc04      	bgt.n	8e22 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    8e18:	683b      	ldr	r3, [r7, #0]
    8e1a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    8e1c:	4a1f      	ldr	r2, [pc, #124]	; (8e9c <_adc_set_config+0x38c>)
    8e1e:	4293      	cmp	r3, r2
    8e20:	da01      	bge.n	8e26 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8e22:	2317      	movs	r3, #23
    8e24:	e0f7      	b.n	9016 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    8e26:	683b      	ldr	r3, [r7, #0]
    8e28:	69db      	ldr	r3, [r3, #28]
    8e2a:	4a1d      	ldr	r2, [pc, #116]	; (8ea0 <_adc_set_config+0x390>)
    8e2c:	4293      	cmp	r3, r2
    8e2e:	dc04      	bgt.n	8e3a <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    8e30:	683b      	ldr	r3, [r7, #0]
    8e32:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    8e34:	4a1a      	ldr	r2, [pc, #104]	; (8ea0 <_adc_set_config+0x390>)
    8e36:	4293      	cmp	r3, r2
    8e38:	dd48      	ble.n	8ecc <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8e3a:	2317      	movs	r3, #23
    8e3c:	e0eb      	b.n	9016 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    8e3e:	683b      	ldr	r3, [r7, #0]
    8e40:	7cdb      	ldrb	r3, [r3, #19]
    8e42:	2b00      	cmp	r3, #0
    8e44:	d032      	beq.n	8eac <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    8e46:	683b      	ldr	r3, [r7, #0]
    8e48:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    8e4a:	4a16      	ldr	r2, [pc, #88]	; (8ea4 <_adc_set_config+0x394>)
    8e4c:	4293      	cmp	r3, r2
    8e4e:	dc0e      	bgt.n	8e6e <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    8e50:	683b      	ldr	r3, [r7, #0]
    8e52:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    8e54:	4a14      	ldr	r2, [pc, #80]	; (8ea8 <_adc_set_config+0x398>)
    8e56:	4293      	cmp	r3, r2
    8e58:	db09      	blt.n	8e6e <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    8e5a:	683b      	ldr	r3, [r7, #0]
    8e5c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    8e5e:	4a11      	ldr	r2, [pc, #68]	; (8ea4 <_adc_set_config+0x394>)
    8e60:	4293      	cmp	r3, r2
    8e62:	dc04      	bgt.n	8e6e <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    8e64:	683b      	ldr	r3, [r7, #0]
    8e66:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    8e68:	4a0f      	ldr	r2, [pc, #60]	; (8ea8 <_adc_set_config+0x398>)
    8e6a:	4293      	cmp	r3, r2
    8e6c:	da1e      	bge.n	8eac <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8e6e:	2317      	movs	r3, #23
    8e70:	e0d1      	b.n	9016 <_adc_set_config+0x506>
    8e72:	46c0      	nop			; (mov r8, r8)
    8e74:	000088e9 	.word	0x000088e9
    8e78:	0000c4e9 	.word	0x0000c4e9
    8e7c:	0000c52d 	.word	0x0000c52d
    8e80:	00008a99 	.word	0x00008a99
    8e84:	00014e54 	.word	0x00014e54
    8e88:	000089c5 	.word	0x000089c5
    8e8c:	000001ff 	.word	0x000001ff
    8e90:	fffffe00 	.word	0xfffffe00
    8e94:	000003ff 	.word	0x000003ff
    8e98:	000007ff 	.word	0x000007ff
    8e9c:	fffff800 	.word	0xfffff800
    8ea0:	00000fff 	.word	0x00000fff
    8ea4:	00007fff 	.word	0x00007fff
    8ea8:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    8eac:	683b      	ldr	r3, [r7, #0]
    8eae:	69db      	ldr	r3, [r3, #28]
    8eb0:	4a5b      	ldr	r2, [pc, #364]	; (9020 <_adc_set_config+0x510>)
    8eb2:	4293      	cmp	r3, r2
    8eb4:	dc04      	bgt.n	8ec0 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    8eb6:	683b      	ldr	r3, [r7, #0]
    8eb8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    8eba:	4a59      	ldr	r2, [pc, #356]	; (9020 <_adc_set_config+0x510>)
    8ebc:	4293      	cmp	r3, r2
    8ebe:	dd07      	ble.n	8ed0 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8ec0:	2317      	movs	r3, #23
    8ec2:	e0a8      	b.n	9016 <_adc_set_config+0x506>
			break;
    8ec4:	46c0      	nop			; (mov r8, r8)
    8ec6:	e004      	b.n	8ed2 <_adc_set_config+0x3c2>
			break;
    8ec8:	46c0      	nop			; (mov r8, r8)
    8eca:	e002      	b.n	8ed2 <_adc_set_config+0x3c2>
			break;
    8ecc:	46c0      	nop			; (mov r8, r8)
    8ece:	e000      	b.n	8ed2 <_adc_set_config+0x3c2>
			}
			break;
    8ed0:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    8ed2:	46c0      	nop			; (mov r8, r8)
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	0018      	movs	r0, r3
    8ed8:	4b52      	ldr	r3, [pc, #328]	; (9024 <_adc_set_config+0x514>)
    8eda:	4798      	blx	r3
    8edc:	1e03      	subs	r3, r0, #0
    8ede:	d1f9      	bne.n	8ed4 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    8ee0:	683b      	ldr	r3, [r7, #0]
    8ee2:	7e1a      	ldrb	r2, [r3, #24]
    8ee4:	693b      	ldr	r3, [r7, #16]
    8ee6:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    8ee8:	46c0      	nop			; (mov r8, r8)
    8eea:	687b      	ldr	r3, [r7, #4]
    8eec:	0018      	movs	r0, r3
    8eee:	4b4d      	ldr	r3, [pc, #308]	; (9024 <_adc_set_config+0x514>)
    8ef0:	4798      	blx	r3
    8ef2:	1e03      	subs	r3, r0, #0
    8ef4:	d1f9      	bne.n	8eea <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    8ef6:	683b      	ldr	r3, [r7, #0]
    8ef8:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    8efa:	b29a      	uxth	r2, r3
    8efc:	693b      	ldr	r3, [r7, #16]
    8efe:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    8f00:	46c0      	nop			; (mov r8, r8)
    8f02:	687b      	ldr	r3, [r7, #4]
    8f04:	0018      	movs	r0, r3
    8f06:	4b47      	ldr	r3, [pc, #284]	; (9024 <_adc_set_config+0x514>)
    8f08:	4798      	blx	r3
    8f0a:	1e03      	subs	r3, r0, #0
    8f0c:	d1f9      	bne.n	8f02 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    8f0e:	683b      	ldr	r3, [r7, #0]
    8f10:	6a1b      	ldr	r3, [r3, #32]
    8f12:	b29a      	uxth	r2, r3
    8f14:	693b      	ldr	r3, [r7, #16]
    8f16:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    8f18:	2314      	movs	r3, #20
    8f1a:	18fb      	adds	r3, r7, r3
    8f1c:	683a      	ldr	r2, [r7, #0]
    8f1e:	212c      	movs	r1, #44	; 0x2c
    8f20:	5c52      	ldrb	r2, [r2, r1]
    8f22:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    8f24:	2314      	movs	r3, #20
    8f26:	18fb      	adds	r3, r7, r3
    8f28:	781b      	ldrb	r3, [r3, #0]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d006      	beq.n	8f3c <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    8f2e:	2314      	movs	r3, #20
    8f30:	18fb      	adds	r3, r7, r3
    8f32:	781a      	ldrb	r2, [r3, #0]
    8f34:	2314      	movs	r3, #20
    8f36:	18fb      	adds	r3, r7, r3
    8f38:	3a01      	subs	r2, #1
    8f3a:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    8f3c:	2314      	movs	r3, #20
    8f3e:	18fb      	adds	r3, r7, r3
    8f40:	781b      	ldrb	r3, [r3, #0]
    8f42:	2b0f      	cmp	r3, #15
    8f44:	d804      	bhi.n	8f50 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    8f46:	683b      	ldr	r3, [r7, #0]
    8f48:	222b      	movs	r2, #43	; 0x2b
    8f4a:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    8f4c:	2b0f      	cmp	r3, #15
    8f4e:	d901      	bls.n	8f54 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    8f50:	2317      	movs	r3, #23
    8f52:	e060      	b.n	9016 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    8f54:	46c0      	nop			; (mov r8, r8)
    8f56:	687b      	ldr	r3, [r7, #4]
    8f58:	0018      	movs	r0, r3
    8f5a:	4b32      	ldr	r3, [pc, #200]	; (9024 <_adc_set_config+0x514>)
    8f5c:	4798      	blx	r3
    8f5e:	1e03      	subs	r3, r0, #0
    8f60:	d1f9      	bne.n	8f56 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    8f62:	683b      	ldr	r3, [r7, #0]
    8f64:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    8f66:	683a      	ldr	r2, [r7, #0]
    8f68:	212b      	movs	r1, #43	; 0x2b
    8f6a:	5c52      	ldrb	r2, [r2, r1]
    8f6c:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    8f6e:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    8f70:	2214      	movs	r2, #20
    8f72:	18ba      	adds	r2, r7, r2
    8f74:	7812      	ldrb	r2, [r2, #0]
    8f76:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    8f78:	4313      	orrs	r3, r2
			config->negative_input |
    8f7a:	683a      	ldr	r2, [r7, #0]
    8f7c:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    8f7e:	4313      	orrs	r3, r2
			config->positive_input;
    8f80:	683a      	ldr	r2, [r7, #0]
    8f82:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    8f84:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    8f86:	693b      	ldr	r3, [r7, #16]
    8f88:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    8f8a:	683b      	ldr	r3, [r7, #0]
    8f8c:	222a      	movs	r2, #42	; 0x2a
    8f8e:	5c9a      	ldrb	r2, [r3, r2]
    8f90:	693b      	ldr	r3, [r7, #16]
    8f92:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    8f94:	693b      	ldr	r3, [r7, #16]
    8f96:	220f      	movs	r2, #15
    8f98:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    8f9a:	683b      	ldr	r3, [r7, #0]
    8f9c:	2224      	movs	r2, #36	; 0x24
    8f9e:	5c9b      	ldrb	r3, [r3, r2]
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d01e      	beq.n	8fe2 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    8fa4:	683b      	ldr	r3, [r7, #0]
    8fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    8fa8:	4a1f      	ldr	r2, [pc, #124]	; (9028 <_adc_set_config+0x518>)
    8faa:	4293      	cmp	r3, r2
    8fac:	d901      	bls.n	8fb2 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    8fae:	2317      	movs	r3, #23
    8fb0:	e031      	b.n	9016 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    8fb2:	683b      	ldr	r3, [r7, #0]
    8fb4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    8fb6:	693b      	ldr	r3, [r7, #16]
    8fb8:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    8fba:	683b      	ldr	r3, [r7, #0]
    8fbc:	2228      	movs	r2, #40	; 0x28
    8fbe:	5e9b      	ldrsh	r3, [r3, r2]
    8fc0:	4a1a      	ldr	r2, [pc, #104]	; (902c <_adc_set_config+0x51c>)
    8fc2:	4293      	cmp	r3, r2
    8fc4:	dc05      	bgt.n	8fd2 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    8fc6:	683b      	ldr	r3, [r7, #0]
    8fc8:	2228      	movs	r2, #40	; 0x28
    8fca:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    8fcc:	4a18      	ldr	r2, [pc, #96]	; (9030 <_adc_set_config+0x520>)
    8fce:	4293      	cmp	r3, r2
    8fd0:	da01      	bge.n	8fd6 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    8fd2:	2317      	movs	r3, #23
    8fd4:	e01f      	b.n	9016 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    8fd6:	683b      	ldr	r3, [r7, #0]
    8fd8:	2228      	movs	r2, #40	; 0x28
    8fda:	5e9b      	ldrsh	r3, [r3, r2]
    8fdc:	b29a      	uxth	r2, r3
    8fde:	693b      	ldr	r3, [r7, #16]
    8fe0:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    8fe2:	4b14      	ldr	r3, [pc, #80]	; (9034 <_adc_set_config+0x524>)
    8fe4:	681b      	ldr	r3, [r3, #0]
    8fe6:	08db      	lsrs	r3, r3, #3
    8fe8:	b29b      	uxth	r3, r3
    8fea:	021b      	lsls	r3, r3, #8
    8fec:	b29a      	uxth	r2, r3
    8fee:	23e0      	movs	r3, #224	; 0xe0
    8ff0:	00db      	lsls	r3, r3, #3
    8ff2:	4013      	ands	r3, r2
    8ff4:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    8ff6:	4b10      	ldr	r3, [pc, #64]	; (9038 <_adc_set_config+0x528>)
    8ff8:	685c      	ldr	r4, [r3, #4]
    8ffa:	681b      	ldr	r3, [r3, #0]
    8ffc:	0161      	lsls	r1, r4, #5
    8ffe:	0edd      	lsrs	r5, r3, #27
    9000:	430d      	orrs	r5, r1
    9002:	0ee6      	lsrs	r6, r4, #27
    9004:	b2ab      	uxth	r3, r5
    9006:	21ff      	movs	r1, #255	; 0xff
    9008:	400b      	ands	r3, r1
    900a:	b29b      	uxth	r3, r3
			) |
    900c:	4313      	orrs	r3, r2
    900e:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    9010:	693b      	ldr	r3, [r7, #16]
    9012:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    9014:	2300      	movs	r3, #0
}
    9016:	0018      	movs	r0, r3
    9018:	46bd      	mov	sp, r7
    901a:	b009      	add	sp, #36	; 0x24
    901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    901e:	46c0      	nop			; (mov r8, r8)
    9020:	0000ffff 	.word	0x0000ffff
    9024:	000089c5 	.word	0x000089c5
    9028:	00000fff 	.word	0x00000fff
    902c:	000007ff 	.word	0x000007ff
    9030:	fffff800 	.word	0xfffff800
    9034:	00806024 	.word	0x00806024
    9038:	00806020 	.word	0x00806020

0000903c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    903c:	b580      	push	{r7, lr}
    903e:	b084      	sub	sp, #16
    9040:	af00      	add	r7, sp, #0
    9042:	60f8      	str	r0, [r7, #12]
    9044:	60b9      	str	r1, [r7, #8]
    9046:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    9048:	68fb      	ldr	r3, [r7, #12]
    904a:	68ba      	ldr	r2, [r7, #8]
    904c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    904e:	2380      	movs	r3, #128	; 0x80
    9050:	025b      	lsls	r3, r3, #9
    9052:	0019      	movs	r1, r3
    9054:	2002      	movs	r0, #2
    9056:	4b15      	ldr	r3, [pc, #84]	; (90ac <adc_init+0x70>)
    9058:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    905a:	68bb      	ldr	r3, [r7, #8]
    905c:	781b      	ldrb	r3, [r3, #0]
    905e:	b2db      	uxtb	r3, r3
    9060:	001a      	movs	r2, r3
    9062:	2301      	movs	r3, #1
    9064:	4013      	ands	r3, r2
    9066:	d001      	beq.n	906c <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    9068:	2305      	movs	r3, #5
    906a:	e01a      	b.n	90a2 <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    906c:	68bb      	ldr	r3, [r7, #8]
    906e:	781b      	ldrb	r3, [r3, #0]
    9070:	b2db      	uxtb	r3, r3
    9072:	001a      	movs	r2, r3
    9074:	2302      	movs	r3, #2
    9076:	4013      	ands	r3, r2
    9078:	d001      	beq.n	907e <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    907a:	231c      	movs	r3, #28
    907c:	e011      	b.n	90a2 <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    907e:	687b      	ldr	r3, [r7, #4]
    9080:	785a      	ldrb	r2, [r3, #1]
    9082:	68fb      	ldr	r3, [r7, #12]
    9084:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    9086:	68fb      	ldr	r3, [r7, #12]
    9088:	791b      	ldrb	r3, [r3, #4]
    908a:	2b00      	cmp	r3, #0
    908c:	d102      	bne.n	9094 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    908e:	2001      	movs	r0, #1
    9090:	4b07      	ldr	r3, [pc, #28]	; (90b0 <adc_init+0x74>)
    9092:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    9094:	687a      	ldr	r2, [r7, #4]
    9096:	68fb      	ldr	r3, [r7, #12]
    9098:	0011      	movs	r1, r2
    909a:	0018      	movs	r0, r3
    909c:	4b05      	ldr	r3, [pc, #20]	; (90b4 <adc_init+0x78>)
    909e:	4798      	blx	r3
    90a0:	0003      	movs	r3, r0
}
    90a2:	0018      	movs	r0, r3
    90a4:	46bd      	mov	sp, r7
    90a6:	b004      	add	sp, #16
    90a8:	bd80      	pop	{r7, pc}
    90aa:	46c0      	nop			; (mov r8, r8)
    90ac:	00008901 	.word	0x00008901
    90b0:	00008985 	.word	0x00008985
    90b4:	00008b11 	.word	0x00008b11

000090b8 <system_gclk_chan_get_config_defaults>:
{
    90b8:	b580      	push	{r7, lr}
    90ba:	b082      	sub	sp, #8
    90bc:	af00      	add	r7, sp, #0
    90be:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    90c0:	687b      	ldr	r3, [r7, #4]
    90c2:	2200      	movs	r2, #0
    90c4:	701a      	strb	r2, [r3, #0]
}
    90c6:	46c0      	nop			; (mov r8, r8)
    90c8:	46bd      	mov	sp, r7
    90ca:	b002      	add	sp, #8
    90cc:	bd80      	pop	{r7, pc}
	...

000090d0 <system_apb_clock_set_mask>:
{
    90d0:	b580      	push	{r7, lr}
    90d2:	b082      	sub	sp, #8
    90d4:	af00      	add	r7, sp, #0
    90d6:	0002      	movs	r2, r0
    90d8:	6039      	str	r1, [r7, #0]
    90da:	1dfb      	adds	r3, r7, #7
    90dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    90de:	1dfb      	adds	r3, r7, #7
    90e0:	781b      	ldrb	r3, [r3, #0]
    90e2:	2b01      	cmp	r3, #1
    90e4:	d00a      	beq.n	90fc <system_apb_clock_set_mask+0x2c>
    90e6:	2b02      	cmp	r3, #2
    90e8:	d00f      	beq.n	910a <system_apb_clock_set_mask+0x3a>
    90ea:	2b00      	cmp	r3, #0
    90ec:	d114      	bne.n	9118 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    90ee:	4b0e      	ldr	r3, [pc, #56]	; (9128 <system_apb_clock_set_mask+0x58>)
    90f0:	4a0d      	ldr	r2, [pc, #52]	; (9128 <system_apb_clock_set_mask+0x58>)
    90f2:	6991      	ldr	r1, [r2, #24]
    90f4:	683a      	ldr	r2, [r7, #0]
    90f6:	430a      	orrs	r2, r1
    90f8:	619a      	str	r2, [r3, #24]
			break;
    90fa:	e00f      	b.n	911c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    90fc:	4b0a      	ldr	r3, [pc, #40]	; (9128 <system_apb_clock_set_mask+0x58>)
    90fe:	4a0a      	ldr	r2, [pc, #40]	; (9128 <system_apb_clock_set_mask+0x58>)
    9100:	69d1      	ldr	r1, [r2, #28]
    9102:	683a      	ldr	r2, [r7, #0]
    9104:	430a      	orrs	r2, r1
    9106:	61da      	str	r2, [r3, #28]
			break;
    9108:	e008      	b.n	911c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    910a:	4b07      	ldr	r3, [pc, #28]	; (9128 <system_apb_clock_set_mask+0x58>)
    910c:	4a06      	ldr	r2, [pc, #24]	; (9128 <system_apb_clock_set_mask+0x58>)
    910e:	6a11      	ldr	r1, [r2, #32]
    9110:	683a      	ldr	r2, [r7, #0]
    9112:	430a      	orrs	r2, r1
    9114:	621a      	str	r2, [r3, #32]
			break;
    9116:	e001      	b.n	911c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    9118:	2317      	movs	r3, #23
    911a:	e000      	b.n	911e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    911c:	2300      	movs	r3, #0
}
    911e:	0018      	movs	r0, r3
    9120:	46bd      	mov	sp, r7
    9122:	b002      	add	sp, #8
    9124:	bd80      	pop	{r7, pc}
    9126:	46c0      	nop			; (mov r8, r8)
    9128:	40000400 	.word	0x40000400

0000912c <system_pinmux_get_config_defaults>:
{
    912c:	b580      	push	{r7, lr}
    912e:	b082      	sub	sp, #8
    9130:	af00      	add	r7, sp, #0
    9132:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9134:	687b      	ldr	r3, [r7, #4]
    9136:	2280      	movs	r2, #128	; 0x80
    9138:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	2200      	movs	r2, #0
    913e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9140:	687b      	ldr	r3, [r7, #4]
    9142:	2201      	movs	r2, #1
    9144:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9146:	687b      	ldr	r3, [r7, #4]
    9148:	2200      	movs	r2, #0
    914a:	70da      	strb	r2, [r3, #3]
}
    914c:	46c0      	nop			; (mov r8, r8)
    914e:	46bd      	mov	sp, r7
    9150:	b002      	add	sp, #8
    9152:	bd80      	pop	{r7, pc}

00009154 <system_is_debugger_present>:
{
    9154:	b580      	push	{r7, lr}
    9156:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    9158:	4b05      	ldr	r3, [pc, #20]	; (9170 <system_is_debugger_present+0x1c>)
    915a:	789b      	ldrb	r3, [r3, #2]
    915c:	b2db      	uxtb	r3, r3
    915e:	001a      	movs	r2, r3
    9160:	2302      	movs	r3, #2
    9162:	4013      	ands	r3, r2
    9164:	1e5a      	subs	r2, r3, #1
    9166:	4193      	sbcs	r3, r2
    9168:	b2db      	uxtb	r3, r3
}
    916a:	0018      	movs	r0, r3
    916c:	46bd      	mov	sp, r7
    916e:	bd80      	pop	{r7, pc}
    9170:	41002000 	.word	0x41002000

00009174 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    9174:	b580      	push	{r7, lr}
    9176:	b084      	sub	sp, #16
    9178:	af00      	add	r7, sp, #0
    917a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	681b      	ldr	r3, [r3, #0]
    9180:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    9182:	68fb      	ldr	r3, [r7, #12]
    9184:	69db      	ldr	r3, [r3, #28]
    9186:	2207      	movs	r2, #7
    9188:	4013      	ands	r3, r2
    918a:	1e5a      	subs	r2, r3, #1
    918c:	4193      	sbcs	r3, r2
    918e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    9190:	0018      	movs	r0, r3
    9192:	46bd      	mov	sp, r7
    9194:	b004      	add	sp, #16
    9196:	bd80      	pop	{r7, pc}

00009198 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    9198:	b580      	push	{r7, lr}
    919a:	b082      	sub	sp, #8
    919c:	af00      	add	r7, sp, #0
    919e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    91a0:	46c0      	nop			; (mov r8, r8)
    91a2:	687b      	ldr	r3, [r7, #4]
    91a4:	0018      	movs	r0, r3
    91a6:	4b04      	ldr	r3, [pc, #16]	; (91b8 <_i2c_master_wait_for_sync+0x20>)
    91a8:	4798      	blx	r3
    91aa:	1e03      	subs	r3, r0, #0
    91ac:	d1f9      	bne.n	91a2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	46bd      	mov	sp, r7
    91b2:	b002      	add	sp, #8
    91b4:	bd80      	pop	{r7, pc}
    91b6:	46c0      	nop			; (mov r8, r8)
    91b8:	00009175 	.word	0x00009175

000091bc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    91bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    91be:	b097      	sub	sp, #92	; 0x5c
    91c0:	af00      	add	r7, sp, #0
    91c2:	6178      	str	r0, [r7, #20]
    91c4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    91c6:	2300      	movs	r3, #0
    91c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    91ca:	2300      	movs	r3, #0
    91cc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    91ce:	2300      	movs	r3, #0
    91d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    91d2:	233b      	movs	r3, #59	; 0x3b
    91d4:	2210      	movs	r2, #16
    91d6:	4694      	mov	ip, r2
    91d8:	44bc      	add	ip, r7
    91da:	4463      	add	r3, ip
    91dc:	2200      	movs	r2, #0
    91de:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    91e0:	697b      	ldr	r3, [r7, #20]
    91e2:	681b      	ldr	r3, [r3, #0]
    91e4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    91e6:	697b      	ldr	r3, [r7, #20]
    91e8:	681b      	ldr	r3, [r3, #0]
    91ea:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    91ec:	2323      	movs	r3, #35	; 0x23
    91ee:	2210      	movs	r2, #16
    91f0:	18ba      	adds	r2, r7, r2
    91f2:	18d4      	adds	r4, r2, r3
    91f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    91f6:	0018      	movs	r0, r3
    91f8:	4bc0      	ldr	r3, [pc, #768]	; (94fc <_i2c_master_set_config+0x340>)
    91fa:	4798      	blx	r3
    91fc:	0003      	movs	r3, r0
    91fe:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    9200:	230c      	movs	r3, #12
    9202:	2210      	movs	r2, #16
    9204:	4694      	mov	ip, r2
    9206:	44bc      	add	ip, r7
    9208:	4463      	add	r3, ip
    920a:	0018      	movs	r0, r3
    920c:	4bbc      	ldr	r3, [pc, #752]	; (9500 <_i2c_master_set_config+0x344>)
    920e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    9210:	693b      	ldr	r3, [r7, #16]
    9212:	69db      	ldr	r3, [r3, #28]
    9214:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    9216:	693b      	ldr	r3, [r7, #16]
    9218:	6a1b      	ldr	r3, [r3, #32]
    921a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    921c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    921e:	2b00      	cmp	r3, #0
    9220:	d106      	bne.n	9230 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    9222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9224:	2100      	movs	r1, #0
    9226:	0018      	movs	r0, r3
    9228:	4bb6      	ldr	r3, [pc, #728]	; (9504 <_i2c_master_set_config+0x348>)
    922a:	4798      	blx	r3
    922c:	0003      	movs	r3, r0
    922e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    9230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9232:	b2da      	uxtb	r2, r3
    9234:	230c      	movs	r3, #12
    9236:	2110      	movs	r1, #16
    9238:	468c      	mov	ip, r1
    923a:	44bc      	add	ip, r7
    923c:	4463      	add	r3, ip
    923e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    9240:	230c      	movs	r3, #12
    9242:	2210      	movs	r2, #16
    9244:	4694      	mov	ip, r2
    9246:	44bc      	add	ip, r7
    9248:	4463      	add	r3, ip
    924a:	2202      	movs	r2, #2
    924c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    924e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9250:	0c1b      	lsrs	r3, r3, #16
    9252:	b2db      	uxtb	r3, r3
    9254:	220c      	movs	r2, #12
    9256:	2110      	movs	r1, #16
    9258:	468c      	mov	ip, r1
    925a:	44bc      	add	ip, r7
    925c:	4462      	add	r2, ip
    925e:	0011      	movs	r1, r2
    9260:	0018      	movs	r0, r3
    9262:	4ba9      	ldr	r3, [pc, #676]	; (9508 <_i2c_master_set_config+0x34c>)
    9264:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    9266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9268:	2b00      	cmp	r3, #0
    926a:	d106      	bne.n	927a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    926c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    926e:	2101      	movs	r1, #1
    9270:	0018      	movs	r0, r3
    9272:	4ba4      	ldr	r3, [pc, #656]	; (9504 <_i2c_master_set_config+0x348>)
    9274:	4798      	blx	r3
    9276:	0003      	movs	r3, r0
    9278:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    927a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    927c:	b2da      	uxtb	r2, r3
    927e:	230c      	movs	r3, #12
    9280:	2110      	movs	r1, #16
    9282:	468c      	mov	ip, r1
    9284:	44bc      	add	ip, r7
    9286:	4463      	add	r3, ip
    9288:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    928a:	230c      	movs	r3, #12
    928c:	2210      	movs	r2, #16
    928e:	4694      	mov	ip, r2
    9290:	44bc      	add	ip, r7
    9292:	4463      	add	r3, ip
    9294:	2202      	movs	r2, #2
    9296:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    9298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    929a:	0c1b      	lsrs	r3, r3, #16
    929c:	b2db      	uxtb	r3, r3
    929e:	220c      	movs	r2, #12
    92a0:	2110      	movs	r1, #16
    92a2:	468c      	mov	ip, r1
    92a4:	44bc      	add	ip, r7
    92a6:	4462      	add	r2, ip
    92a8:	0011      	movs	r1, r2
    92aa:	0018      	movs	r0, r3
    92ac:	4b96      	ldr	r3, [pc, #600]	; (9508 <_i2c_master_set_config+0x34c>)
    92ae:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    92b0:	693b      	ldr	r3, [r7, #16]
    92b2:	8a9a      	ldrh	r2, [r3, #20]
    92b4:	697b      	ldr	r3, [r7, #20]
    92b6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    92b8:	693b      	ldr	r3, [r7, #16]
    92ba:	8ada      	ldrh	r2, [r3, #22]
    92bc:	697b      	ldr	r3, [r7, #20]
    92be:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    92c0:	693b      	ldr	r3, [r7, #16]
    92c2:	7e1b      	ldrb	r3, [r3, #24]
    92c4:	2b00      	cmp	r3, #0
    92c6:	d103      	bne.n	92d0 <_i2c_master_set_config+0x114>
    92c8:	4b90      	ldr	r3, [pc, #576]	; (950c <_i2c_master_set_config+0x350>)
    92ca:	4798      	blx	r3
    92cc:	1e03      	subs	r3, r0, #0
    92ce:	d002      	beq.n	92d6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    92d0:	2380      	movs	r3, #128	; 0x80
    92d2:	657b      	str	r3, [r7, #84]	; 0x54
    92d4:	e001      	b.n	92da <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    92d6:	2300      	movs	r3, #0
    92d8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    92da:	693b      	ldr	r3, [r7, #16]
    92dc:	691b      	ldr	r3, [r3, #16]
    92de:	2b00      	cmp	r3, #0
    92e0:	d004      	beq.n	92ec <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    92e2:	693b      	ldr	r3, [r7, #16]
    92e4:	691b      	ldr	r3, [r3, #16]
    92e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    92e8:	4313      	orrs	r3, r2
    92ea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    92ec:	693b      	ldr	r3, [r7, #16]
    92ee:	689b      	ldr	r3, [r3, #8]
    92f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    92f2:	4313      	orrs	r3, r2
    92f4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    92f6:	693b      	ldr	r3, [r7, #16]
    92f8:	2224      	movs	r2, #36	; 0x24
    92fa:	5c9b      	ldrb	r3, [r3, r2]
    92fc:	2b00      	cmp	r3, #0
    92fe:	d004      	beq.n	930a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    9300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9302:	2280      	movs	r2, #128	; 0x80
    9304:	05d2      	lsls	r2, r2, #23
    9306:	4313      	orrs	r3, r2
    9308:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    930a:	693b      	ldr	r3, [r7, #16]
    930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    930e:	2b00      	cmp	r3, #0
    9310:	d004      	beq.n	931c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    9312:	693b      	ldr	r3, [r7, #16]
    9314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9316:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9318:	4313      	orrs	r3, r2
    931a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    931c:	693b      	ldr	r3, [r7, #16]
    931e:	222c      	movs	r2, #44	; 0x2c
    9320:	5c9b      	ldrb	r3, [r3, r2]
    9322:	2b00      	cmp	r3, #0
    9324:	d105      	bne.n	9332 <_i2c_master_set_config+0x176>
    9326:	693b      	ldr	r3, [r7, #16]
    9328:	689a      	ldr	r2, [r3, #8]
    932a:	2380      	movs	r3, #128	; 0x80
    932c:	049b      	lsls	r3, r3, #18
    932e:	429a      	cmp	r2, r3
    9330:	d104      	bne.n	933c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    9332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9334:	2280      	movs	r2, #128	; 0x80
    9336:	0512      	lsls	r2, r2, #20
    9338:	4313      	orrs	r3, r2
    933a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    933c:	693b      	ldr	r3, [r7, #16]
    933e:	222d      	movs	r2, #45	; 0x2d
    9340:	5c9b      	ldrb	r3, [r3, r2]
    9342:	2b00      	cmp	r3, #0
    9344:	d004      	beq.n	9350 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    9346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9348:	2280      	movs	r2, #128	; 0x80
    934a:	0412      	lsls	r2, r2, #16
    934c:	4313      	orrs	r3, r2
    934e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    9350:	693b      	ldr	r3, [r7, #16]
    9352:	222e      	movs	r2, #46	; 0x2e
    9354:	5c9b      	ldrb	r3, [r3, r2]
    9356:	2b00      	cmp	r3, #0
    9358:	d004      	beq.n	9364 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    935a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    935c:	2280      	movs	r2, #128	; 0x80
    935e:	03d2      	lsls	r2, r2, #15
    9360:	4313      	orrs	r3, r2
    9362:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    9364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9366:	681a      	ldr	r2, [r3, #0]
    9368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    936a:	431a      	orrs	r2, r3
    936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    936e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    9370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9372:	2280      	movs	r2, #128	; 0x80
    9374:	0052      	lsls	r2, r2, #1
    9376:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    9378:	2323      	movs	r3, #35	; 0x23
    937a:	2210      	movs	r2, #16
    937c:	4694      	mov	ip, r2
    937e:	44bc      	add	ip, r7
    9380:	4463      	add	r3, ip
    9382:	781b      	ldrb	r3, [r3, #0]
    9384:	3314      	adds	r3, #20
    9386:	b2db      	uxtb	r3, r3
    9388:	0018      	movs	r0, r3
    938a:	4b61      	ldr	r3, [pc, #388]	; (9510 <_i2c_master_set_config+0x354>)
    938c:	4798      	blx	r3
    938e:	0003      	movs	r3, r0
    9390:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    9392:	693b      	ldr	r3, [r7, #16]
    9394:	681b      	ldr	r3, [r3, #0]
    9396:	22fa      	movs	r2, #250	; 0xfa
    9398:	0092      	lsls	r2, r2, #2
    939a:	4353      	muls	r3, r2
    939c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    939e:	693b      	ldr	r3, [r7, #16]
    93a0:	685b      	ldr	r3, [r3, #4]
    93a2:	22fa      	movs	r2, #250	; 0xfa
    93a4:	0092      	lsls	r2, r2, #2
    93a6:	4353      	muls	r3, r2
    93a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    93aa:	693b      	ldr	r3, [r7, #16]
    93ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    93ae:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    93b0:	4b58      	ldr	r3, [pc, #352]	; (9514 <_i2c_master_set_config+0x358>)
    93b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    93b4:	4798      	blx	r3
    93b6:	0005      	movs	r5, r0
    93b8:	000e      	movs	r6, r1
    93ba:	4b56      	ldr	r3, [pc, #344]	; (9514 <_i2c_master_set_config+0x358>)
    93bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    93be:	4798      	blx	r3
    93c0:	60b8      	str	r0, [r7, #8]
    93c2:	60f9      	str	r1, [r7, #12]
    93c4:	4b53      	ldr	r3, [pc, #332]	; (9514 <_i2c_master_set_config+0x358>)
    93c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    93c8:	4798      	blx	r3
    93ca:	4c53      	ldr	r4, [pc, #332]	; (9518 <_i2c_master_set_config+0x35c>)
    93cc:	4a53      	ldr	r2, [pc, #332]	; (951c <_i2c_master_set_config+0x360>)
    93ce:	4b54      	ldr	r3, [pc, #336]	; (9520 <_i2c_master_set_config+0x364>)
    93d0:	47a0      	blx	r4
    93d2:	0003      	movs	r3, r0
    93d4:	000c      	movs	r4, r1
    93d6:	603b      	str	r3, [r7, #0]
    93d8:	607c      	str	r4, [r7, #4]
    93da:	4b4e      	ldr	r3, [pc, #312]	; (9514 <_i2c_master_set_config+0x358>)
    93dc:	6a38      	ldr	r0, [r7, #32]
    93de:	4798      	blx	r3
    93e0:	0002      	movs	r2, r0
    93e2:	000b      	movs	r3, r1
    93e4:	4c4c      	ldr	r4, [pc, #304]	; (9518 <_i2c_master_set_config+0x35c>)
    93e6:	6838      	ldr	r0, [r7, #0]
    93e8:	6879      	ldr	r1, [r7, #4]
    93ea:	47a0      	blx	r4
    93ec:	0003      	movs	r3, r0
    93ee:	000c      	movs	r4, r1
    93f0:	0018      	movs	r0, r3
    93f2:	0021      	movs	r1, r4
    93f4:	4c4b      	ldr	r4, [pc, #300]	; (9524 <_i2c_master_set_config+0x368>)
    93f6:	2200      	movs	r2, #0
    93f8:	4b4b      	ldr	r3, [pc, #300]	; (9528 <_i2c_master_set_config+0x36c>)
    93fa:	47a0      	blx	r4
    93fc:	0003      	movs	r3, r0
    93fe:	000c      	movs	r4, r1
    9400:	001a      	movs	r2, r3
    9402:	0023      	movs	r3, r4
    9404:	4c44      	ldr	r4, [pc, #272]	; (9518 <_i2c_master_set_config+0x35c>)
    9406:	68b8      	ldr	r0, [r7, #8]
    9408:	68f9      	ldr	r1, [r7, #12]
    940a:	47a0      	blx	r4
    940c:	0003      	movs	r3, r0
    940e:	000c      	movs	r4, r1
    9410:	001a      	movs	r2, r3
    9412:	0023      	movs	r3, r4
    9414:	4c45      	ldr	r4, [pc, #276]	; (952c <_i2c_master_set_config+0x370>)
    9416:	0028      	movs	r0, r5
    9418:	0031      	movs	r1, r6
    941a:	47a0      	blx	r4
    941c:	0003      	movs	r3, r0
    941e:	000c      	movs	r4, r1
    9420:	001d      	movs	r5, r3
    9422:	0026      	movs	r6, r4
    9424:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9426:	005a      	lsls	r2, r3, #1
    9428:	4b3a      	ldr	r3, [pc, #232]	; (9514 <_i2c_master_set_config+0x358>)
    942a:	0010      	movs	r0, r2
    942c:	4798      	blx	r3
    942e:	0002      	movs	r2, r0
    9430:	000b      	movs	r3, r1
    9432:	4c3c      	ldr	r4, [pc, #240]	; (9524 <_i2c_master_set_config+0x368>)
    9434:	0028      	movs	r0, r5
    9436:	0031      	movs	r1, r6
    9438:	47a0      	blx	r4
    943a:	0003      	movs	r3, r0
    943c:	000c      	movs	r4, r1
    943e:	0018      	movs	r0, r3
    9440:	0021      	movs	r1, r4
    9442:	4c3a      	ldr	r4, [pc, #232]	; (952c <_i2c_master_set_config+0x370>)
    9444:	2200      	movs	r2, #0
    9446:	4b3a      	ldr	r3, [pc, #232]	; (9530 <_i2c_master_set_config+0x374>)
    9448:	47a0      	blx	r4
    944a:	0003      	movs	r3, r0
    944c:	000c      	movs	r4, r1
    944e:	001d      	movs	r5, r3
    9450:	0026      	movs	r6, r4
    9452:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9454:	005a      	lsls	r2, r3, #1
    9456:	4b2f      	ldr	r3, [pc, #188]	; (9514 <_i2c_master_set_config+0x358>)
    9458:	0010      	movs	r0, r2
    945a:	4798      	blx	r3
    945c:	0002      	movs	r2, r0
    945e:	000b      	movs	r3, r1
    9460:	4c34      	ldr	r4, [pc, #208]	; (9534 <_i2c_master_set_config+0x378>)
    9462:	0028      	movs	r0, r5
    9464:	0031      	movs	r1, r6
    9466:	47a0      	blx	r4
    9468:	0003      	movs	r3, r0
    946a:	000c      	movs	r4, r1
    946c:	0019      	movs	r1, r3
    946e:	0022      	movs	r2, r4
    9470:	4b31      	ldr	r3, [pc, #196]	; (9538 <_i2c_master_set_config+0x37c>)
    9472:	0008      	movs	r0, r1
    9474:	0011      	movs	r1, r2
    9476:	4798      	blx	r3
    9478:	0003      	movs	r3, r0
    947a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    947c:	693b      	ldr	r3, [r7, #16]
    947e:	689a      	ldr	r2, [r3, #8]
    9480:	2380      	movs	r3, #128	; 0x80
    9482:	049b      	lsls	r3, r3, #18
    9484:	429a      	cmp	r2, r3
    9486:	d16a      	bne.n	955e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    9488:	4b22      	ldr	r3, [pc, #136]	; (9514 <_i2c_master_set_config+0x358>)
    948a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    948c:	4798      	blx	r3
    948e:	4c25      	ldr	r4, [pc, #148]	; (9524 <_i2c_master_set_config+0x368>)
    9490:	0002      	movs	r2, r0
    9492:	000b      	movs	r3, r1
    9494:	47a0      	blx	r4
    9496:	0003      	movs	r3, r0
    9498:	000c      	movs	r4, r1
    949a:	001d      	movs	r5, r3
    949c:	0026      	movs	r6, r4
    949e:	4b1d      	ldr	r3, [pc, #116]	; (9514 <_i2c_master_set_config+0x358>)
    94a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    94a2:	4798      	blx	r3
    94a4:	4c1c      	ldr	r4, [pc, #112]	; (9518 <_i2c_master_set_config+0x35c>)
    94a6:	2200      	movs	r2, #0
    94a8:	4b24      	ldr	r3, [pc, #144]	; (953c <_i2c_master_set_config+0x380>)
    94aa:	47a0      	blx	r4
    94ac:	0003      	movs	r3, r0
    94ae:	000c      	movs	r4, r1
    94b0:	001a      	movs	r2, r3
    94b2:	0023      	movs	r3, r4
    94b4:	4c1f      	ldr	r4, [pc, #124]	; (9534 <_i2c_master_set_config+0x378>)
    94b6:	0028      	movs	r0, r5
    94b8:	0031      	movs	r1, r6
    94ba:	47a0      	blx	r4
    94bc:	0003      	movs	r3, r0
    94be:	000c      	movs	r4, r1
    94c0:	0018      	movs	r0, r3
    94c2:	0021      	movs	r1, r4
    94c4:	4c19      	ldr	r4, [pc, #100]	; (952c <_i2c_master_set_config+0x370>)
    94c6:	2200      	movs	r2, #0
    94c8:	4b19      	ldr	r3, [pc, #100]	; (9530 <_i2c_master_set_config+0x374>)
    94ca:	47a0      	blx	r4
    94cc:	0003      	movs	r3, r0
    94ce:	000c      	movs	r4, r1
    94d0:	0019      	movs	r1, r3
    94d2:	0022      	movs	r2, r4
    94d4:	4b18      	ldr	r3, [pc, #96]	; (9538 <_i2c_master_set_config+0x37c>)
    94d6:	0008      	movs	r0, r1
    94d8:	0011      	movs	r1, r2
    94da:	4798      	blx	r3
    94dc:	0003      	movs	r3, r0
    94de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    94e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    94e2:	2b00      	cmp	r3, #0
    94e4:	d02e      	beq.n	9544 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    94e6:	4b16      	ldr	r3, [pc, #88]	; (9540 <_i2c_master_set_config+0x384>)
    94e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    94ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    94ec:	4798      	blx	r3
    94ee:	0003      	movs	r3, r0
    94f0:	1e9a      	subs	r2, r3, #2
    94f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    94f4:	1ad3      	subs	r3, r2, r3
    94f6:	653b      	str	r3, [r7, #80]	; 0x50
    94f8:	e031      	b.n	955e <_i2c_master_set_config+0x3a2>
    94fa:	46c0      	nop			; (mov r8, r8)
    94fc:	0000a8bd 	.word	0x0000a8bd
    9500:	0000912d 	.word	0x0000912d
    9504:	0000a701 	.word	0x0000a701
    9508:	0000c7d5 	.word	0x0000c7d5
    950c:	00009155 	.word	0x00009155
    9510:	0000c60d 	.word	0x0000c60d
    9514:	0001384d 	.word	0x0001384d
    9518:	00012bf5 	.word	0x00012bf5
    951c:	e826d695 	.word	0xe826d695
    9520:	3e112e0b 	.word	0x3e112e0b
    9524:	00011d6d 	.word	0x00011d6d
    9528:	40240000 	.word	0x40240000
    952c:	000130f5 	.word	0x000130f5
    9530:	3ff00000 	.word	0x3ff00000
    9534:	0001238d 	.word	0x0001238d
    9538:	00013761 	.word	0x00013761
    953c:	40080000 	.word	0x40080000
    9540:	00011441 	.word	0x00011441
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    9544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9546:	005a      	lsls	r2, r3, #1
    9548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    954a:	18d3      	adds	r3, r2, r3
    954c:	1e5a      	subs	r2, r3, #1
    954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9550:	0059      	lsls	r1, r3, #1
    9552:	4b1d      	ldr	r3, [pc, #116]	; (95c8 <_i2c_master_set_config+0x40c>)
    9554:	0010      	movs	r0, r2
    9556:	4798      	blx	r3
    9558:	0003      	movs	r3, r0
    955a:	3b01      	subs	r3, #1
    955c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    955e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9560:	2bff      	cmp	r3, #255	; 0xff
    9562:	dc08      	bgt.n	9576 <_i2c_master_set_config+0x3ba>
    9564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9566:	2b00      	cmp	r3, #0
    9568:	db05      	blt.n	9576 <_i2c_master_set_config+0x3ba>
    956a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    956c:	2bff      	cmp	r3, #255	; 0xff
    956e:	dc02      	bgt.n	9576 <_i2c_master_set_config+0x3ba>
    9570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9572:	2b00      	cmp	r3, #0
    9574:	da06      	bge.n	9584 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9576:	233b      	movs	r3, #59	; 0x3b
    9578:	2210      	movs	r2, #16
    957a:	4694      	mov	ip, r2
    957c:	44bc      	add	ip, r7
    957e:	4463      	add	r3, ip
    9580:	2240      	movs	r2, #64	; 0x40
    9582:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    9584:	233b      	movs	r3, #59	; 0x3b
    9586:	2210      	movs	r2, #16
    9588:	4694      	mov	ip, r2
    958a:	44bc      	add	ip, r7
    958c:	4463      	add	r3, ip
    958e:	781b      	ldrb	r3, [r3, #0]
    9590:	2b40      	cmp	r3, #64	; 0x40
    9592:	d00e      	beq.n	95b2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    9594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9596:	22ff      	movs	r2, #255	; 0xff
    9598:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    959a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    959c:	041b      	lsls	r3, r3, #16
    959e:	0019      	movs	r1, r3
    95a0:	23ff      	movs	r3, #255	; 0xff
    95a2:	041b      	lsls	r3, r3, #16
    95a4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    95a6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    95a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    95aa:	0612      	lsls	r2, r2, #24
    95ac:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    95ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    95b0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    95b2:	233b      	movs	r3, #59	; 0x3b
    95b4:	2210      	movs	r2, #16
    95b6:	4694      	mov	ip, r2
    95b8:	44bc      	add	ip, r7
    95ba:	4463      	add	r3, ip
    95bc:	781b      	ldrb	r3, [r3, #0]
}
    95be:	0018      	movs	r0, r3
    95c0:	46bd      	mov	sp, r7
    95c2:	b017      	add	sp, #92	; 0x5c
    95c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	00011441 	.word	0x00011441

000095cc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    95cc:	b590      	push	{r4, r7, lr}
    95ce:	b08b      	sub	sp, #44	; 0x2c
    95d0:	af00      	add	r7, sp, #0
    95d2:	60f8      	str	r0, [r7, #12]
    95d4:	60b9      	str	r1, [r7, #8]
    95d6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    95d8:	68fb      	ldr	r3, [r7, #12]
    95da:	68ba      	ldr	r2, [r7, #8]
    95dc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    95de:	68fb      	ldr	r3, [r7, #12]
    95e0:	681b      	ldr	r3, [r3, #0]
    95e2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    95e4:	68fb      	ldr	r3, [r7, #12]
    95e6:	681b      	ldr	r3, [r3, #0]
    95e8:	0018      	movs	r0, r3
    95ea:	4b3b      	ldr	r3, [pc, #236]	; (96d8 <i2c_master_init+0x10c>)
    95ec:	4798      	blx	r3
    95ee:	0003      	movs	r3, r0
    95f0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    95f2:	6a3b      	ldr	r3, [r7, #32]
    95f4:	3302      	adds	r3, #2
    95f6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    95f8:	6a3b      	ldr	r3, [r7, #32]
    95fa:	3314      	adds	r3, #20
    95fc:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    95fe:	2201      	movs	r2, #1
    9600:	69fb      	ldr	r3, [r7, #28]
    9602:	409a      	lsls	r2, r3
    9604:	0013      	movs	r3, r2
    9606:	0019      	movs	r1, r3
    9608:	2002      	movs	r0, #2
    960a:	4b34      	ldr	r3, [pc, #208]	; (96dc <i2c_master_init+0x110>)
    960c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    960e:	2314      	movs	r3, #20
    9610:	18fb      	adds	r3, r7, r3
    9612:	0018      	movs	r0, r3
    9614:	4b32      	ldr	r3, [pc, #200]	; (96e0 <i2c_master_init+0x114>)
    9616:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    9618:	687b      	ldr	r3, [r7, #4]
    961a:	7b1a      	ldrb	r2, [r3, #12]
    961c:	2314      	movs	r3, #20
    961e:	18fb      	adds	r3, r7, r3
    9620:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    9622:	69bb      	ldr	r3, [r7, #24]
    9624:	b2db      	uxtb	r3, r3
    9626:	2214      	movs	r2, #20
    9628:	18ba      	adds	r2, r7, r2
    962a:	0011      	movs	r1, r2
    962c:	0018      	movs	r0, r3
    962e:	4b2d      	ldr	r3, [pc, #180]	; (96e4 <i2c_master_init+0x118>)
    9630:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9632:	69bb      	ldr	r3, [r7, #24]
    9634:	b2db      	uxtb	r3, r3
    9636:	0018      	movs	r0, r3
    9638:	4b2b      	ldr	r3, [pc, #172]	; (96e8 <i2c_master_init+0x11c>)
    963a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    963c:	687b      	ldr	r3, [r7, #4]
    963e:	7b1b      	ldrb	r3, [r3, #12]
    9640:	2100      	movs	r1, #0
    9642:	0018      	movs	r0, r3
    9644:	4b29      	ldr	r3, [pc, #164]	; (96ec <i2c_master_init+0x120>)
    9646:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    9648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    964a:	681b      	ldr	r3, [r3, #0]
    964c:	2202      	movs	r2, #2
    964e:	4013      	ands	r3, r2
    9650:	d001      	beq.n	9656 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    9652:	231c      	movs	r3, #28
    9654:	e03b      	b.n	96ce <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    9656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9658:	681b      	ldr	r3, [r3, #0]
    965a:	2201      	movs	r2, #1
    965c:	4013      	ands	r3, r2
    965e:	d001      	beq.n	9664 <i2c_master_init+0x98>
		return STATUS_BUSY;
    9660:	2305      	movs	r3, #5
    9662:	e034      	b.n	96ce <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    9664:	68fb      	ldr	r3, [r7, #12]
    9666:	681b      	ldr	r3, [r3, #0]
    9668:	2217      	movs	r2, #23
    966a:	18bc      	adds	r4, r7, r2
    966c:	0018      	movs	r0, r3
    966e:	4b1a      	ldr	r3, [pc, #104]	; (96d8 <i2c_master_init+0x10c>)
    9670:	4798      	blx	r3
    9672:	0003      	movs	r3, r0
    9674:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    9676:	4a1e      	ldr	r2, [pc, #120]	; (96f0 <i2c_master_init+0x124>)
    9678:	2317      	movs	r3, #23
    967a:	18fb      	adds	r3, r7, r3
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	0011      	movs	r1, r2
    9680:	0018      	movs	r0, r3
    9682:	4b1c      	ldr	r3, [pc, #112]	; (96f4 <i2c_master_init+0x128>)
    9684:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    9686:	2317      	movs	r3, #23
    9688:	18fb      	adds	r3, r7, r3
    968a:	781a      	ldrb	r2, [r3, #0]
    968c:	4b1a      	ldr	r3, [pc, #104]	; (96f8 <i2c_master_init+0x12c>)
    968e:	0092      	lsls	r2, r2, #2
    9690:	68f9      	ldr	r1, [r7, #12]
    9692:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    9694:	68fb      	ldr	r3, [r7, #12]
    9696:	2200      	movs	r2, #0
    9698:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    969a:	68fb      	ldr	r3, [r7, #12]
    969c:	2200      	movs	r2, #0
    969e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    96a0:	68fb      	ldr	r3, [r7, #12]
    96a2:	2200      	movs	r2, #0
    96a4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    96a6:	68fb      	ldr	r3, [r7, #12]
    96a8:	2200      	movs	r2, #0
    96aa:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    96ac:	68fb      	ldr	r3, [r7, #12]
    96ae:	2225      	movs	r2, #37	; 0x25
    96b0:	2100      	movs	r1, #0
    96b2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    96b4:	68fb      	ldr	r3, [r7, #12]
    96b6:	2200      	movs	r2, #0
    96b8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    96ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    96bc:	2214      	movs	r2, #20
    96be:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    96c0:	687a      	ldr	r2, [r7, #4]
    96c2:	68fb      	ldr	r3, [r7, #12]
    96c4:	0011      	movs	r1, r2
    96c6:	0018      	movs	r0, r3
    96c8:	4b0c      	ldr	r3, [pc, #48]	; (96fc <i2c_master_init+0x130>)
    96ca:	4798      	blx	r3
    96cc:	0003      	movs	r3, r0
}
    96ce:	0018      	movs	r0, r3
    96d0:	46bd      	mov	sp, r7
    96d2:	b00b      	add	sp, #44	; 0x2c
    96d4:	bd90      	pop	{r4, r7, pc}
    96d6:	46c0      	nop			; (mov r8, r8)
    96d8:	0000a8bd 	.word	0x0000a8bd
    96dc:	000090d1 	.word	0x000090d1
    96e0:	000090b9 	.word	0x000090b9
    96e4:	0000c4e9 	.word	0x0000c4e9
    96e8:	0000c52d 	.word	0x0000c52d
    96ec:	0000a675 	.word	0x0000a675
    96f0:	0000a0cd 	.word	0x0000a0cd
    96f4:	0000b505 	.word	0x0000b505
    96f8:	20000764 	.word	0x20000764
    96fc:	000091bd 	.word	0x000091bd

00009700 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    9700:	b580      	push	{r7, lr}
    9702:	b084      	sub	sp, #16
    9704:	af00      	add	r7, sp, #0
    9706:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9708:	687b      	ldr	r3, [r7, #4]
    970a:	681b      	ldr	r3, [r3, #0]
    970c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    970e:	68fb      	ldr	r3, [r7, #12]
    9710:	7e1b      	ldrb	r3, [r3, #24]
    9712:	b2db      	uxtb	r3, r3
    9714:	001a      	movs	r2, r3
    9716:	2302      	movs	r3, #2
    9718:	4013      	ands	r3, r2
    971a:	d00b      	beq.n	9734 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    971c:	68fb      	ldr	r3, [r7, #12]
    971e:	2202      	movs	r2, #2
    9720:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    9722:	68fb      	ldr	r3, [r7, #12]
    9724:	8b5b      	ldrh	r3, [r3, #26]
    9726:	b29b      	uxth	r3, r3
    9728:	001a      	movs	r2, r3
    972a:	2302      	movs	r3, #2
    972c:	4013      	ands	r3, r2
    972e:	d011      	beq.n	9754 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    9730:	2341      	movs	r3, #65	; 0x41
    9732:	e010      	b.n	9756 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    9734:	68fb      	ldr	r3, [r7, #12]
    9736:	8b5b      	ldrh	r3, [r3, #26]
    9738:	b29b      	uxth	r3, r3
    973a:	001a      	movs	r2, r3
    973c:	2304      	movs	r3, #4
    973e:	4013      	ands	r3, r2
    9740:	d008      	beq.n	9754 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9742:	68fb      	ldr	r3, [r7, #12]
    9744:	685b      	ldr	r3, [r3, #4]
    9746:	22c0      	movs	r2, #192	; 0xc0
    9748:	0292      	lsls	r2, r2, #10
    974a:	431a      	orrs	r2, r3
    974c:	68fb      	ldr	r3, [r7, #12]
    974e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    9750:	2318      	movs	r3, #24
    9752:	e000      	b.n	9756 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    9754:	2300      	movs	r3, #0
}
    9756:	0018      	movs	r0, r3
    9758:	46bd      	mov	sp, r7
    975a:	b004      	add	sp, #16
    975c:	bd80      	pop	{r7, pc}

0000975e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    975e:	b580      	push	{r7, lr}
    9760:	b084      	sub	sp, #16
    9762:	af00      	add	r7, sp, #0
    9764:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9766:	687b      	ldr	r3, [r7, #4]
    9768:	681b      	ldr	r3, [r3, #0]
    976a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    976c:	230e      	movs	r3, #14
    976e:	18fb      	adds	r3, r7, r3
    9770:	2200      	movs	r2, #0
    9772:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    9774:	e00f      	b.n	9796 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    9776:	230e      	movs	r3, #14
    9778:	18fb      	adds	r3, r7, r3
    977a:	220e      	movs	r2, #14
    977c:	18ba      	adds	r2, r7, r2
    977e:	8812      	ldrh	r2, [r2, #0]
    9780:	3201      	adds	r2, #1
    9782:	801a      	strh	r2, [r3, #0]
    9784:	687b      	ldr	r3, [r7, #4]
    9786:	891b      	ldrh	r3, [r3, #8]
    9788:	220e      	movs	r2, #14
    978a:	18ba      	adds	r2, r7, r2
    978c:	8812      	ldrh	r2, [r2, #0]
    978e:	429a      	cmp	r2, r3
    9790:	d301      	bcc.n	9796 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    9792:	2312      	movs	r3, #18
    9794:	e00e      	b.n	97b4 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    9796:	68bb      	ldr	r3, [r7, #8]
    9798:	7e1b      	ldrb	r3, [r3, #24]
    979a:	b2db      	uxtb	r3, r3
    979c:	001a      	movs	r2, r3
    979e:	2301      	movs	r3, #1
    97a0:	4013      	ands	r3, r2
    97a2:	d106      	bne.n	97b2 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    97a4:	68bb      	ldr	r3, [r7, #8]
    97a6:	7e1b      	ldrb	r3, [r3, #24]
    97a8:	b2db      	uxtb	r3, r3
    97aa:	001a      	movs	r2, r3
    97ac:	2302      	movs	r3, #2
    97ae:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    97b0:	d0e1      	beq.n	9776 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    97b2:	2300      	movs	r3, #0
}
    97b4:	0018      	movs	r0, r3
    97b6:	46bd      	mov	sp, r7
    97b8:	b004      	add	sp, #16
    97ba:	bd80      	pop	{r7, pc}

000097bc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    97bc:	b590      	push	{r4, r7, lr}
    97be:	b085      	sub	sp, #20
    97c0:	af00      	add	r7, sp, #0
    97c2:	6078      	str	r0, [r7, #4]
    97c4:	000a      	movs	r2, r1
    97c6:	1cfb      	adds	r3, r7, #3
    97c8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    97ca:	687b      	ldr	r3, [r7, #4]
    97cc:	681b      	ldr	r3, [r3, #0]
    97ce:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    97d0:	68fb      	ldr	r3, [r7, #12]
    97d2:	685b      	ldr	r3, [r3, #4]
    97d4:	2280      	movs	r2, #128	; 0x80
    97d6:	02d2      	lsls	r2, r2, #11
    97d8:	431a      	orrs	r2, r3
    97da:	68fb      	ldr	r3, [r7, #12]
    97dc:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    97de:	1cfb      	adds	r3, r7, #3
    97e0:	781a      	ldrb	r2, [r3, #0]
    97e2:	68fb      	ldr	r3, [r7, #12]
    97e4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    97e6:	230b      	movs	r3, #11
    97e8:	18fc      	adds	r4, r7, r3
    97ea:	687b      	ldr	r3, [r7, #4]
    97ec:	0018      	movs	r0, r3
    97ee:	4b07      	ldr	r3, [pc, #28]	; (980c <_i2c_master_send_hs_master_code+0x50>)
    97f0:	4798      	blx	r3
    97f2:	0003      	movs	r3, r0
    97f4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    97f6:	68fb      	ldr	r3, [r7, #12]
    97f8:	2201      	movs	r2, #1
    97fa:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    97fc:	230b      	movs	r3, #11
    97fe:	18fb      	adds	r3, r7, r3
    9800:	781b      	ldrb	r3, [r3, #0]
}
    9802:	0018      	movs	r0, r3
    9804:	46bd      	mov	sp, r7
    9806:	b005      	add	sp, #20
    9808:	bd90      	pop	{r4, r7, pc}
    980a:	46c0      	nop			; (mov r8, r8)
    980c:	0000975f 	.word	0x0000975f

00009810 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9810:	b590      	push	{r4, r7, lr}
    9812:	b087      	sub	sp, #28
    9814:	af00      	add	r7, sp, #0
    9816:	6078      	str	r0, [r7, #4]
    9818:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    981a:	687b      	ldr	r3, [r7, #4]
    981c:	681b      	ldr	r3, [r3, #0]
    981e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    9820:	2314      	movs	r3, #20
    9822:	18fb      	adds	r3, r7, r3
    9824:	683a      	ldr	r2, [r7, #0]
    9826:	8852      	ldrh	r2, [r2, #2]
    9828:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    982a:	2312      	movs	r3, #18
    982c:	18fb      	adds	r3, r7, r3
    982e:	2200      	movs	r2, #0
    9830:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    9832:	68fb      	ldr	r3, [r7, #12]
    9834:	681b      	ldr	r3, [r3, #0]
    9836:	011b      	lsls	r3, r3, #4
    9838:	0fdb      	lsrs	r3, r3, #31
    983a:	b2db      	uxtb	r3, r3
    983c:	001a      	movs	r2, r3
    983e:	230b      	movs	r3, #11
    9840:	18fb      	adds	r3, r7, r3
    9842:	1e51      	subs	r1, r2, #1
    9844:	418a      	sbcs	r2, r1
    9846:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    9848:	683b      	ldr	r3, [r7, #0]
    984a:	7a5b      	ldrb	r3, [r3, #9]
    984c:	2b00      	cmp	r3, #0
    984e:	d006      	beq.n	985e <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    9850:	683b      	ldr	r3, [r7, #0]
    9852:	7a9a      	ldrb	r2, [r3, #10]
    9854:	687b      	ldr	r3, [r7, #4]
    9856:	0011      	movs	r1, r2
    9858:	0018      	movs	r0, r3
    985a:	4b85      	ldr	r3, [pc, #532]	; (9a70 <_i2c_master_read_packet+0x260>)
    985c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    985e:	68fb      	ldr	r3, [r7, #12]
    9860:	685b      	ldr	r3, [r3, #4]
    9862:	4a84      	ldr	r2, [pc, #528]	; (9a74 <_i2c_master_read_packet+0x264>)
    9864:	401a      	ands	r2, r3
    9866:	68fb      	ldr	r3, [r7, #12]
    9868:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    986a:	683b      	ldr	r3, [r7, #0]
    986c:	7a1b      	ldrb	r3, [r3, #8]
    986e:	2b00      	cmp	r3, #0
    9870:	d042      	beq.n	98f8 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    9872:	683b      	ldr	r3, [r7, #0]
    9874:	881b      	ldrh	r3, [r3, #0]
    9876:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9878:	683b      	ldr	r3, [r7, #0]
    987a:	7a5b      	ldrb	r3, [r3, #9]
    987c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    987e:	4313      	orrs	r3, r2
    9880:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9882:	2380      	movs	r3, #128	; 0x80
    9884:	021b      	lsls	r3, r3, #8
    9886:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    9888:	68fb      	ldr	r3, [r7, #12]
    988a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    988c:	2317      	movs	r3, #23
    988e:	18fc      	adds	r4, r7, r3
    9890:	687b      	ldr	r3, [r7, #4]
    9892:	0018      	movs	r0, r3
    9894:	4b78      	ldr	r3, [pc, #480]	; (9a78 <_i2c_master_read_packet+0x268>)
    9896:	4798      	blx	r3
    9898:	0003      	movs	r3, r0
    989a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    989c:	68fb      	ldr	r3, [r7, #12]
    989e:	685b      	ldr	r3, [r3, #4]
    98a0:	4a74      	ldr	r2, [pc, #464]	; (9a74 <_i2c_master_read_packet+0x264>)
    98a2:	401a      	ands	r2, r3
    98a4:	68fb      	ldr	r3, [r7, #12]
    98a6:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    98a8:	2317      	movs	r3, #23
    98aa:	18fb      	adds	r3, r7, r3
    98ac:	781b      	ldrb	r3, [r3, #0]
    98ae:	2b00      	cmp	r3, #0
    98b0:	d107      	bne.n	98c2 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    98b2:	2317      	movs	r3, #23
    98b4:	18fc      	adds	r4, r7, r3
    98b6:	687b      	ldr	r3, [r7, #4]
    98b8:	0018      	movs	r0, r3
    98ba:	4b70      	ldr	r3, [pc, #448]	; (9a7c <_i2c_master_read_packet+0x26c>)
    98bc:	4798      	blx	r3
    98be:	0003      	movs	r3, r0
    98c0:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    98c2:	2317      	movs	r3, #23
    98c4:	18fb      	adds	r3, r7, r3
    98c6:	781b      	ldrb	r3, [r3, #0]
    98c8:	2b00      	cmp	r3, #0
    98ca:	d111      	bne.n	98f0 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    98cc:	683b      	ldr	r3, [r7, #0]
    98ce:	881b      	ldrh	r3, [r3, #0]
    98d0:	0a1b      	lsrs	r3, r3, #8
    98d2:	b29b      	uxth	r3, r3
    98d4:	2278      	movs	r2, #120	; 0x78
    98d6:	4313      	orrs	r3, r2
    98d8:	b29b      	uxth	r3, r3
    98da:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    98dc:	683b      	ldr	r3, [r7, #0]
    98de:	7a5b      	ldrb	r3, [r3, #9]
    98e0:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    98e2:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    98e4:	2201      	movs	r2, #1
    98e6:	4313      	orrs	r3, r2
    98e8:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    98ea:	68fb      	ldr	r3, [r7, #12]
    98ec:	625a      	str	r2, [r3, #36]	; 0x24
    98ee:	e00f      	b.n	9910 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    98f0:	2317      	movs	r3, #23
    98f2:	18fb      	adds	r3, r7, r3
    98f4:	781b      	ldrb	r3, [r3, #0]
    98f6:	e0b6      	b.n	9a66 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    98f8:	683b      	ldr	r3, [r7, #0]
    98fa:	881b      	ldrh	r3, [r3, #0]
    98fc:	005b      	lsls	r3, r3, #1
    98fe:	2201      	movs	r2, #1
    9900:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    9902:	683b      	ldr	r3, [r7, #0]
    9904:	7a5b      	ldrb	r3, [r3, #9]
    9906:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    9908:	4313      	orrs	r3, r2
    990a:	001a      	movs	r2, r3
    990c:	68fb      	ldr	r3, [r7, #12]
    990e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    9910:	2317      	movs	r3, #23
    9912:	18fc      	adds	r4, r7, r3
    9914:	687b      	ldr	r3, [r7, #4]
    9916:	0018      	movs	r0, r3
    9918:	4b57      	ldr	r3, [pc, #348]	; (9a78 <_i2c_master_read_packet+0x268>)
    991a:	4798      	blx	r3
    991c:	0003      	movs	r3, r0
    991e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    9920:	230b      	movs	r3, #11
    9922:	18fb      	adds	r3, r7, r3
    9924:	781b      	ldrb	r3, [r3, #0]
    9926:	2b00      	cmp	r3, #0
    9928:	d00b      	beq.n	9942 <_i2c_master_read_packet+0x132>
    992a:	683b      	ldr	r3, [r7, #0]
    992c:	885b      	ldrh	r3, [r3, #2]
    992e:	2b01      	cmp	r3, #1
    9930:	d107      	bne.n	9942 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9932:	68fb      	ldr	r3, [r7, #12]
    9934:	685b      	ldr	r3, [r3, #4]
    9936:	2280      	movs	r2, #128	; 0x80
    9938:	02d2      	lsls	r2, r2, #11
    993a:	431a      	orrs	r2, r3
    993c:	68fb      	ldr	r3, [r7, #12]
    993e:	605a      	str	r2, [r3, #4]
    9940:	e005      	b.n	994e <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    9942:	68fb      	ldr	r3, [r7, #12]
    9944:	685b      	ldr	r3, [r3, #4]
    9946:	4a4b      	ldr	r2, [pc, #300]	; (9a74 <_i2c_master_read_packet+0x264>)
    9948:	401a      	ands	r2, r3
    994a:	68fb      	ldr	r3, [r7, #12]
    994c:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    994e:	2317      	movs	r3, #23
    9950:	18fb      	adds	r3, r7, r3
    9952:	781b      	ldrb	r3, [r3, #0]
    9954:	2b00      	cmp	r3, #0
    9956:	d107      	bne.n	9968 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    9958:	2317      	movs	r3, #23
    995a:	18fc      	adds	r4, r7, r3
    995c:	687b      	ldr	r3, [r7, #4]
    995e:	0018      	movs	r0, r3
    9960:	4b46      	ldr	r3, [pc, #280]	; (9a7c <_i2c_master_read_packet+0x26c>)
    9962:	4798      	blx	r3
    9964:	0003      	movs	r3, r0
    9966:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    9968:	2317      	movs	r3, #23
    996a:	18fb      	adds	r3, r7, r3
    996c:	781b      	ldrb	r3, [r3, #0]
    996e:	2b00      	cmp	r3, #0
    9970:	d000      	beq.n	9974 <_i2c_master_read_packet+0x164>
    9972:	e075      	b.n	9a60 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    9974:	e04b      	b.n	9a0e <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    9976:	68fb      	ldr	r3, [r7, #12]
    9978:	8b5b      	ldrh	r3, [r3, #26]
    997a:	b29b      	uxth	r3, r3
    997c:	001a      	movs	r2, r3
    997e:	2320      	movs	r3, #32
    9980:	4013      	ands	r3, r2
    9982:	d101      	bne.n	9988 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    9984:	2341      	movs	r3, #65	; 0x41
    9986:	e06e      	b.n	9a66 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    9988:	687b      	ldr	r3, [r7, #4]
    998a:	7adb      	ldrb	r3, [r3, #11]
    998c:	2b00      	cmp	r3, #0
    998e:	d01e      	beq.n	99ce <_i2c_master_read_packet+0x1be>
    9990:	230b      	movs	r3, #11
    9992:	18fb      	adds	r3, r7, r3
    9994:	781b      	ldrb	r3, [r3, #0]
    9996:	2201      	movs	r2, #1
    9998:	4053      	eors	r3, r2
    999a:	b2db      	uxtb	r3, r3
    999c:	2b00      	cmp	r3, #0
    999e:	d004      	beq.n	99aa <_i2c_master_read_packet+0x19a>
    99a0:	2314      	movs	r3, #20
    99a2:	18fb      	adds	r3, r7, r3
    99a4:	881b      	ldrh	r3, [r3, #0]
    99a6:	2b00      	cmp	r3, #0
    99a8:	d009      	beq.n	99be <_i2c_master_read_packet+0x1ae>
    99aa:	230b      	movs	r3, #11
    99ac:	18fb      	adds	r3, r7, r3
    99ae:	781b      	ldrb	r3, [r3, #0]
    99b0:	2b00      	cmp	r3, #0
    99b2:	d00c      	beq.n	99ce <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    99b4:	2314      	movs	r3, #20
    99b6:	18fb      	adds	r3, r7, r3
    99b8:	881b      	ldrh	r3, [r3, #0]
    99ba:	2b01      	cmp	r3, #1
    99bc:	d107      	bne.n	99ce <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    99be:	68fb      	ldr	r3, [r7, #12]
    99c0:	685b      	ldr	r3, [r3, #4]
    99c2:	2280      	movs	r2, #128	; 0x80
    99c4:	02d2      	lsls	r2, r2, #11
    99c6:	431a      	orrs	r2, r3
    99c8:	68fb      	ldr	r3, [r7, #12]
    99ca:	605a      	str	r2, [r3, #4]
    99cc:	e01a      	b.n	9a04 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    99ce:	687b      	ldr	r3, [r7, #4]
    99d0:	0018      	movs	r0, r3
    99d2:	4b2b      	ldr	r3, [pc, #172]	; (9a80 <_i2c_master_read_packet+0x270>)
    99d4:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    99d6:	683b      	ldr	r3, [r7, #0]
    99d8:	685a      	ldr	r2, [r3, #4]
    99da:	2312      	movs	r3, #18
    99dc:	18fb      	adds	r3, r7, r3
    99de:	881b      	ldrh	r3, [r3, #0]
    99e0:	2112      	movs	r1, #18
    99e2:	1879      	adds	r1, r7, r1
    99e4:	1c58      	adds	r0, r3, #1
    99e6:	8008      	strh	r0, [r1, #0]
    99e8:	18d3      	adds	r3, r2, r3
    99ea:	68fa      	ldr	r2, [r7, #12]
    99ec:	2128      	movs	r1, #40	; 0x28
    99ee:	5c52      	ldrb	r2, [r2, r1]
    99f0:	b2d2      	uxtb	r2, r2
    99f2:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    99f4:	2317      	movs	r3, #23
    99f6:	18fc      	adds	r4, r7, r3
    99f8:	687b      	ldr	r3, [r7, #4]
    99fa:	0018      	movs	r0, r3
    99fc:	4b1e      	ldr	r3, [pc, #120]	; (9a78 <_i2c_master_read_packet+0x268>)
    99fe:	4798      	blx	r3
    9a00:	0003      	movs	r3, r0
    9a02:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    9a04:	2317      	movs	r3, #23
    9a06:	18fb      	adds	r3, r7, r3
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	2b00      	cmp	r3, #0
    9a0c:	d109      	bne.n	9a22 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    9a0e:	2314      	movs	r3, #20
    9a10:	18fb      	adds	r3, r7, r3
    9a12:	881b      	ldrh	r3, [r3, #0]
    9a14:	2214      	movs	r2, #20
    9a16:	18ba      	adds	r2, r7, r2
    9a18:	1e59      	subs	r1, r3, #1
    9a1a:	8011      	strh	r1, [r2, #0]
    9a1c:	2b00      	cmp	r3, #0
    9a1e:	d1aa      	bne.n	9976 <_i2c_master_read_packet+0x166>
    9a20:	e000      	b.n	9a24 <_i2c_master_read_packet+0x214>
				break;
    9a22:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    9a24:	687b      	ldr	r3, [r7, #4]
    9a26:	7a9b      	ldrb	r3, [r3, #10]
    9a28:	2b00      	cmp	r3, #0
    9a2a:	d00a      	beq.n	9a42 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    9a2c:	687b      	ldr	r3, [r7, #4]
    9a2e:	0018      	movs	r0, r3
    9a30:	4b13      	ldr	r3, [pc, #76]	; (9a80 <_i2c_master_read_packet+0x270>)
    9a32:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9a34:	68fb      	ldr	r3, [r7, #12]
    9a36:	685b      	ldr	r3, [r3, #4]
    9a38:	22c0      	movs	r2, #192	; 0xc0
    9a3a:	0292      	lsls	r2, r2, #10
    9a3c:	431a      	orrs	r2, r3
    9a3e:	68fb      	ldr	r3, [r7, #12]
    9a40:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    9a42:	687b      	ldr	r3, [r7, #4]
    9a44:	0018      	movs	r0, r3
    9a46:	4b0e      	ldr	r3, [pc, #56]	; (9a80 <_i2c_master_read_packet+0x270>)
    9a48:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    9a4a:	683b      	ldr	r3, [r7, #0]
    9a4c:	685a      	ldr	r2, [r3, #4]
    9a4e:	2312      	movs	r3, #18
    9a50:	18fb      	adds	r3, r7, r3
    9a52:	881b      	ldrh	r3, [r3, #0]
    9a54:	18d3      	adds	r3, r2, r3
    9a56:	68fa      	ldr	r2, [r7, #12]
    9a58:	2128      	movs	r1, #40	; 0x28
    9a5a:	5c52      	ldrb	r2, [r2, r1]
    9a5c:	b2d2      	uxtb	r2, r2
    9a5e:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    9a60:	2317      	movs	r3, #23
    9a62:	18fb      	adds	r3, r7, r3
    9a64:	781b      	ldrb	r3, [r3, #0]
}
    9a66:	0018      	movs	r0, r3
    9a68:	46bd      	mov	sp, r7
    9a6a:	b007      	add	sp, #28
    9a6c:	bd90      	pop	{r4, r7, pc}
    9a6e:	46c0      	nop			; (mov r8, r8)
    9a70:	000097bd 	.word	0x000097bd
    9a74:	fffbffff 	.word	0xfffbffff
    9a78:	0000975f 	.word	0x0000975f
    9a7c:	00009701 	.word	0x00009701
    9a80:	00009199 	.word	0x00009199

00009a84 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9a84:	b580      	push	{r7, lr}
    9a86:	b082      	sub	sp, #8
    9a88:	af00      	add	r7, sp, #0
    9a8a:	6078      	str	r0, [r7, #4]
    9a8c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    9a8e:	687b      	ldr	r3, [r7, #4]
    9a90:	8b9b      	ldrh	r3, [r3, #28]
    9a92:	b29b      	uxth	r3, r3
    9a94:	2b00      	cmp	r3, #0
    9a96:	d001      	beq.n	9a9c <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    9a98:	2305      	movs	r3, #5
    9a9a:	e00c      	b.n	9ab6 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	2201      	movs	r2, #1
    9aa0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    9aa2:	687b      	ldr	r3, [r7, #4]
    9aa4:	2201      	movs	r2, #1
    9aa6:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    9aa8:	683a      	ldr	r2, [r7, #0]
    9aaa:	687b      	ldr	r3, [r7, #4]
    9aac:	0011      	movs	r1, r2
    9aae:	0018      	movs	r0, r3
    9ab0:	4b03      	ldr	r3, [pc, #12]	; (9ac0 <i2c_master_read_packet_wait+0x3c>)
    9ab2:	4798      	blx	r3
    9ab4:	0003      	movs	r3, r0
}
    9ab6:	0018      	movs	r0, r3
    9ab8:	46bd      	mov	sp, r7
    9aba:	b002      	add	sp, #8
    9abc:	bd80      	pop	{r7, pc}
    9abe:	46c0      	nop			; (mov r8, r8)
    9ac0:	00009811 	.word	0x00009811

00009ac4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9ac4:	b590      	push	{r4, r7, lr}
    9ac6:	b087      	sub	sp, #28
    9ac8:	af00      	add	r7, sp, #0
    9aca:	6078      	str	r0, [r7, #4]
    9acc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9ace:	687b      	ldr	r3, [r7, #4]
    9ad0:	681b      	ldr	r3, [r3, #0]
    9ad2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    9ad4:	2314      	movs	r3, #20
    9ad6:	18fb      	adds	r3, r7, r3
    9ad8:	683a      	ldr	r2, [r7, #0]
    9ada:	8852      	ldrh	r2, [r2, #2]
    9adc:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    9ade:	687b      	ldr	r3, [r7, #4]
    9ae0:	0018      	movs	r0, r3
    9ae2:	4b51      	ldr	r3, [pc, #324]	; (9c28 <_i2c_master_write_packet+0x164>)
    9ae4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    9ae6:	683b      	ldr	r3, [r7, #0]
    9ae8:	7a5b      	ldrb	r3, [r3, #9]
    9aea:	2b00      	cmp	r3, #0
    9aec:	d006      	beq.n	9afc <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    9aee:	683b      	ldr	r3, [r7, #0]
    9af0:	7a9a      	ldrb	r2, [r3, #10]
    9af2:	687b      	ldr	r3, [r7, #4]
    9af4:	0011      	movs	r1, r2
    9af6:	0018      	movs	r0, r3
    9af8:	4b4c      	ldr	r3, [pc, #304]	; (9c2c <_i2c_master_write_packet+0x168>)
    9afa:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9afc:	68fb      	ldr	r3, [r7, #12]
    9afe:	685b      	ldr	r3, [r3, #4]
    9b00:	4a4b      	ldr	r2, [pc, #300]	; (9c30 <_i2c_master_write_packet+0x16c>)
    9b02:	401a      	ands	r2, r3
    9b04:	68fb      	ldr	r3, [r7, #12]
    9b06:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    9b08:	683b      	ldr	r3, [r7, #0]
    9b0a:	7a1b      	ldrb	r3, [r3, #8]
    9b0c:	2b00      	cmp	r3, #0
    9b0e:	d00d      	beq.n	9b2c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9b10:	683b      	ldr	r3, [r7, #0]
    9b12:	881b      	ldrh	r3, [r3, #0]
    9b14:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9b16:	683b      	ldr	r3, [r7, #0]
    9b18:	7a5b      	ldrb	r3, [r3, #9]
    9b1a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9b1c:	4313      	orrs	r3, r2
    9b1e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9b20:	2380      	movs	r3, #128	; 0x80
    9b22:	021b      	lsls	r3, r3, #8
    9b24:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9b26:	68fb      	ldr	r3, [r7, #12]
    9b28:	625a      	str	r2, [r3, #36]	; 0x24
    9b2a:	e009      	b.n	9b40 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9b2c:	683b      	ldr	r3, [r7, #0]
    9b2e:	881b      	ldrh	r3, [r3, #0]
    9b30:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    9b32:	683b      	ldr	r3, [r7, #0]
    9b34:	7a5b      	ldrb	r3, [r3, #9]
    9b36:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9b38:	4313      	orrs	r3, r2
    9b3a:	001a      	movs	r2, r3
    9b3c:	68fb      	ldr	r3, [r7, #12]
    9b3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    9b40:	2317      	movs	r3, #23
    9b42:	18fc      	adds	r4, r7, r3
    9b44:	687b      	ldr	r3, [r7, #4]
    9b46:	0018      	movs	r0, r3
    9b48:	4b3a      	ldr	r3, [pc, #232]	; (9c34 <_i2c_master_write_packet+0x170>)
    9b4a:	4798      	blx	r3
    9b4c:	0003      	movs	r3, r0
    9b4e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    9b50:	2317      	movs	r3, #23
    9b52:	18fb      	adds	r3, r7, r3
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	2b00      	cmp	r3, #0
    9b58:	d107      	bne.n	9b6a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    9b5a:	2317      	movs	r3, #23
    9b5c:	18fc      	adds	r4, r7, r3
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	0018      	movs	r0, r3
    9b62:	4b35      	ldr	r3, [pc, #212]	; (9c38 <_i2c_master_write_packet+0x174>)
    9b64:	4798      	blx	r3
    9b66:	0003      	movs	r3, r0
    9b68:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    9b6a:	2317      	movs	r3, #23
    9b6c:	18fb      	adds	r3, r7, r3
    9b6e:	781b      	ldrb	r3, [r3, #0]
    9b70:	2b00      	cmp	r3, #0
    9b72:	d152      	bne.n	9c1a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    9b74:	2312      	movs	r3, #18
    9b76:	18fb      	adds	r3, r7, r3
    9b78:	2200      	movs	r2, #0
    9b7a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    9b7c:	e033      	b.n	9be6 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    9b7e:	68fb      	ldr	r3, [r7, #12]
    9b80:	8b5b      	ldrh	r3, [r3, #26]
    9b82:	b29b      	uxth	r3, r3
    9b84:	001a      	movs	r2, r3
    9b86:	2320      	movs	r3, #32
    9b88:	4013      	ands	r3, r2
    9b8a:	d101      	bne.n	9b90 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    9b8c:	2341      	movs	r3, #65	; 0x41
    9b8e:	e047      	b.n	9c20 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	0018      	movs	r0, r3
    9b94:	4b24      	ldr	r3, [pc, #144]	; (9c28 <_i2c_master_write_packet+0x164>)
    9b96:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    9b98:	683b      	ldr	r3, [r7, #0]
    9b9a:	685a      	ldr	r2, [r3, #4]
    9b9c:	2312      	movs	r3, #18
    9b9e:	18fb      	adds	r3, r7, r3
    9ba0:	881b      	ldrh	r3, [r3, #0]
    9ba2:	2112      	movs	r1, #18
    9ba4:	1879      	adds	r1, r7, r1
    9ba6:	1c58      	adds	r0, r3, #1
    9ba8:	8008      	strh	r0, [r1, #0]
    9baa:	18d3      	adds	r3, r2, r3
    9bac:	7819      	ldrb	r1, [r3, #0]
    9bae:	68fb      	ldr	r3, [r7, #12]
    9bb0:	2228      	movs	r2, #40	; 0x28
    9bb2:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    9bb4:	2317      	movs	r3, #23
    9bb6:	18fc      	adds	r4, r7, r3
    9bb8:	687b      	ldr	r3, [r7, #4]
    9bba:	0018      	movs	r0, r3
    9bbc:	4b1d      	ldr	r3, [pc, #116]	; (9c34 <_i2c_master_write_packet+0x170>)
    9bbe:	4798      	blx	r3
    9bc0:	0003      	movs	r3, r0
    9bc2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    9bc4:	2317      	movs	r3, #23
    9bc6:	18fb      	adds	r3, r7, r3
    9bc8:	781b      	ldrb	r3, [r3, #0]
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d115      	bne.n	9bfa <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    9bce:	68fb      	ldr	r3, [r7, #12]
    9bd0:	8b5b      	ldrh	r3, [r3, #26]
    9bd2:	b29b      	uxth	r3, r3
    9bd4:	001a      	movs	r2, r3
    9bd6:	2304      	movs	r3, #4
    9bd8:	4013      	ands	r3, r2
    9bda:	d004      	beq.n	9be6 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    9bdc:	2317      	movs	r3, #23
    9bde:	18fb      	adds	r3, r7, r3
    9be0:	221e      	movs	r2, #30
    9be2:	701a      	strb	r2, [r3, #0]
				break;
    9be4:	e00a      	b.n	9bfc <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    9be6:	2314      	movs	r3, #20
    9be8:	18fb      	adds	r3, r7, r3
    9bea:	881b      	ldrh	r3, [r3, #0]
    9bec:	2214      	movs	r2, #20
    9bee:	18ba      	adds	r2, r7, r2
    9bf0:	1e59      	subs	r1, r3, #1
    9bf2:	8011      	strh	r1, [r2, #0]
    9bf4:	2b00      	cmp	r3, #0
    9bf6:	d1c2      	bne.n	9b7e <_i2c_master_write_packet+0xba>
    9bf8:	e000      	b.n	9bfc <_i2c_master_write_packet+0x138>
				break;
    9bfa:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    9bfc:	687b      	ldr	r3, [r7, #4]
    9bfe:	7a9b      	ldrb	r3, [r3, #10]
    9c00:	2b00      	cmp	r3, #0
    9c02:	d00a      	beq.n	9c1a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    9c04:	687b      	ldr	r3, [r7, #4]
    9c06:	0018      	movs	r0, r3
    9c08:	4b07      	ldr	r3, [pc, #28]	; (9c28 <_i2c_master_write_packet+0x164>)
    9c0a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9c0c:	68fb      	ldr	r3, [r7, #12]
    9c0e:	685b      	ldr	r3, [r3, #4]
    9c10:	22c0      	movs	r2, #192	; 0xc0
    9c12:	0292      	lsls	r2, r2, #10
    9c14:	431a      	orrs	r2, r3
    9c16:	68fb      	ldr	r3, [r7, #12]
    9c18:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    9c1a:	2317      	movs	r3, #23
    9c1c:	18fb      	adds	r3, r7, r3
    9c1e:	781b      	ldrb	r3, [r3, #0]
}
    9c20:	0018      	movs	r0, r3
    9c22:	46bd      	mov	sp, r7
    9c24:	b007      	add	sp, #28
    9c26:	bd90      	pop	{r4, r7, pc}
    9c28:	00009199 	.word	0x00009199
    9c2c:	000097bd 	.word	0x000097bd
    9c30:	fffbffff 	.word	0xfffbffff
    9c34:	0000975f 	.word	0x0000975f
    9c38:	00009701 	.word	0x00009701

00009c3c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9c3c:	b580      	push	{r7, lr}
    9c3e:	b082      	sub	sp, #8
    9c40:	af00      	add	r7, sp, #0
    9c42:	6078      	str	r0, [r7, #4]
    9c44:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    9c46:	687b      	ldr	r3, [r7, #4]
    9c48:	8b9b      	ldrh	r3, [r3, #28]
    9c4a:	b29b      	uxth	r3, r3
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d001      	beq.n	9c54 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    9c50:	2305      	movs	r3, #5
    9c52:	e00c      	b.n	9c6e <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    9c54:	687b      	ldr	r3, [r7, #4]
    9c56:	2201      	movs	r2, #1
    9c58:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    9c5a:	687b      	ldr	r3, [r7, #4]
    9c5c:	2201      	movs	r2, #1
    9c5e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    9c60:	683a      	ldr	r2, [r7, #0]
    9c62:	687b      	ldr	r3, [r7, #4]
    9c64:	0011      	movs	r1, r2
    9c66:	0018      	movs	r0, r3
    9c68:	4b03      	ldr	r3, [pc, #12]	; (9c78 <i2c_master_write_packet_wait+0x3c>)
    9c6a:	4798      	blx	r3
    9c6c:	0003      	movs	r3, r0
}
    9c6e:	0018      	movs	r0, r3
    9c70:	46bd      	mov	sp, r7
    9c72:	b002      	add	sp, #8
    9c74:	bd80      	pop	{r7, pc}
    9c76:	46c0      	nop			; (mov r8, r8)
    9c78:	00009ac5 	.word	0x00009ac5

00009c7c <i2c_master_is_syncing>:
{
    9c7c:	b580      	push	{r7, lr}
    9c7e:	b084      	sub	sp, #16
    9c80:	af00      	add	r7, sp, #0
    9c82:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    9c84:	687b      	ldr	r3, [r7, #4]
    9c86:	681b      	ldr	r3, [r3, #0]
    9c88:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    9c8a:	68fb      	ldr	r3, [r7, #12]
    9c8c:	69db      	ldr	r3, [r3, #28]
    9c8e:	2207      	movs	r2, #7
    9c90:	4013      	ands	r3, r2
    9c92:	1e5a      	subs	r2, r3, #1
    9c94:	4193      	sbcs	r3, r2
    9c96:	b2db      	uxtb	r3, r3
}
    9c98:	0018      	movs	r0, r3
    9c9a:	46bd      	mov	sp, r7
    9c9c:	b004      	add	sp, #16
    9c9e:	bd80      	pop	{r7, pc}

00009ca0 <_i2c_master_wait_for_sync>:
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b082      	sub	sp, #8
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    9ca8:	46c0      	nop			; (mov r8, r8)
    9caa:	687b      	ldr	r3, [r7, #4]
    9cac:	0018      	movs	r0, r3
    9cae:	4b04      	ldr	r3, [pc, #16]	; (9cc0 <_i2c_master_wait_for_sync+0x20>)
    9cb0:	4798      	blx	r3
    9cb2:	1e03      	subs	r3, r0, #0
    9cb4:	d1f9      	bne.n	9caa <_i2c_master_wait_for_sync+0xa>
}
    9cb6:	46c0      	nop			; (mov r8, r8)
    9cb8:	46bd      	mov	sp, r7
    9cba:	b002      	add	sp, #8
    9cbc:	bd80      	pop	{r7, pc}
    9cbe:	46c0      	nop			; (mov r8, r8)
    9cc0:	00009c7d 	.word	0x00009c7d

00009cc4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    9cc4:	b580      	push	{r7, lr}
    9cc6:	b084      	sub	sp, #16
    9cc8:	af00      	add	r7, sp, #0
    9cca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9ccc:	687b      	ldr	r3, [r7, #4]
    9cce:	681b      	ldr	r3, [r3, #0]
    9cd0:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    9cd2:	68fb      	ldr	r3, [r7, #12]
    9cd4:	681b      	ldr	r3, [r3, #0]
    9cd6:	011b      	lsls	r3, r3, #4
    9cd8:	0fdb      	lsrs	r3, r3, #31
    9cda:	b2db      	uxtb	r3, r3
    9cdc:	001a      	movs	r2, r3
    9cde:	230b      	movs	r3, #11
    9ce0:	18fb      	adds	r3, r7, r3
    9ce2:	1e51      	subs	r1, r2, #1
    9ce4:	418a      	sbcs	r2, r1
    9ce6:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    9ce8:	2308      	movs	r3, #8
    9cea:	18fb      	adds	r3, r7, r3
    9cec:	687a      	ldr	r2, [r7, #4]
    9cee:	8b52      	ldrh	r2, [r2, #26]
    9cf0:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    9cf2:	687b      	ldr	r3, [r7, #4]
    9cf4:	8b9b      	ldrh	r3, [r3, #28]
    9cf6:	b29a      	uxth	r2, r3
    9cf8:	2308      	movs	r3, #8
    9cfa:	18fb      	adds	r3, r7, r3
    9cfc:	2108      	movs	r1, #8
    9cfe:	1879      	adds	r1, r7, r1
    9d00:	8809      	ldrh	r1, [r1, #0]
    9d02:	1a8a      	subs	r2, r1, r2
    9d04:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    9d06:	687b      	ldr	r3, [r7, #4]
    9d08:	8b9b      	ldrh	r3, [r3, #28]
    9d0a:	b29b      	uxth	r3, r3
    9d0c:	3b01      	subs	r3, #1
    9d0e:	b29a      	uxth	r2, r3
    9d10:	687b      	ldr	r3, [r7, #4]
    9d12:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    9d14:	230b      	movs	r3, #11
    9d16:	18fb      	adds	r3, r7, r3
    9d18:	781b      	ldrb	r3, [r3, #0]
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d010      	beq.n	9d40 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    9d1e:	687b      	ldr	r3, [r7, #4]
    9d20:	7adb      	ldrb	r3, [r3, #11]
    9d22:	2b00      	cmp	r3, #0
    9d24:	d01c      	beq.n	9d60 <_i2c_master_read+0x9c>
    9d26:	687b      	ldr	r3, [r7, #4]
    9d28:	8b9b      	ldrh	r3, [r3, #28]
    9d2a:	b29b      	uxth	r3, r3
    9d2c:	2b01      	cmp	r3, #1
    9d2e:	d117      	bne.n	9d60 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9d30:	68fb      	ldr	r3, [r7, #12]
    9d32:	685b      	ldr	r3, [r3, #4]
    9d34:	2280      	movs	r2, #128	; 0x80
    9d36:	02d2      	lsls	r2, r2, #11
    9d38:	431a      	orrs	r2, r3
    9d3a:	68fb      	ldr	r3, [r7, #12]
    9d3c:	605a      	str	r2, [r3, #4]
    9d3e:	e00f      	b.n	9d60 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    9d40:	687b      	ldr	r3, [r7, #4]
    9d42:	7adb      	ldrb	r3, [r3, #11]
    9d44:	2b00      	cmp	r3, #0
    9d46:	d00b      	beq.n	9d60 <_i2c_master_read+0x9c>
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	8b9b      	ldrh	r3, [r3, #28]
    9d4c:	b29b      	uxth	r3, r3
    9d4e:	2b00      	cmp	r3, #0
    9d50:	d106      	bne.n	9d60 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9d52:	68fb      	ldr	r3, [r7, #12]
    9d54:	685b      	ldr	r3, [r3, #4]
    9d56:	2280      	movs	r2, #128	; 0x80
    9d58:	02d2      	lsls	r2, r2, #11
    9d5a:	431a      	orrs	r2, r3
    9d5c:	68fb      	ldr	r3, [r7, #12]
    9d5e:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    9d60:	687b      	ldr	r3, [r7, #4]
    9d62:	8b9b      	ldrh	r3, [r3, #28]
    9d64:	b29b      	uxth	r3, r3
    9d66:	2b00      	cmp	r3, #0
    9d68:	d10e      	bne.n	9d88 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    9d6a:	687b      	ldr	r3, [r7, #4]
    9d6c:	7a9b      	ldrb	r3, [r3, #10]
    9d6e:	2b00      	cmp	r3, #0
    9d70:	d00a      	beq.n	9d88 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    9d72:	687b      	ldr	r3, [r7, #4]
    9d74:	0018      	movs	r0, r3
    9d76:	4b0e      	ldr	r3, [pc, #56]	; (9db0 <_i2c_master_read+0xec>)
    9d78:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9d7a:	68fb      	ldr	r3, [r7, #12]
    9d7c:	685b      	ldr	r3, [r3, #4]
    9d7e:	22c0      	movs	r2, #192	; 0xc0
    9d80:	0292      	lsls	r2, r2, #10
    9d82:	431a      	orrs	r2, r3
    9d84:	68fb      	ldr	r3, [r7, #12]
    9d86:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    9d88:	687b      	ldr	r3, [r7, #4]
    9d8a:	0018      	movs	r0, r3
    9d8c:	4b08      	ldr	r3, [pc, #32]	; (9db0 <_i2c_master_read+0xec>)
    9d8e:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	6a1a      	ldr	r2, [r3, #32]
    9d94:	2308      	movs	r3, #8
    9d96:	18fb      	adds	r3, r7, r3
    9d98:	881b      	ldrh	r3, [r3, #0]
    9d9a:	18d3      	adds	r3, r2, r3
    9d9c:	68fa      	ldr	r2, [r7, #12]
    9d9e:	2128      	movs	r1, #40	; 0x28
    9da0:	5c52      	ldrb	r2, [r2, r1]
    9da2:	b2d2      	uxtb	r2, r2
    9da4:	701a      	strb	r2, [r3, #0]
}
    9da6:	46c0      	nop			; (mov r8, r8)
    9da8:	46bd      	mov	sp, r7
    9daa:	b004      	add	sp, #16
    9dac:	bd80      	pop	{r7, pc}
    9dae:	46c0      	nop			; (mov r8, r8)
    9db0:	00009ca1 	.word	0x00009ca1

00009db4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    9db4:	b580      	push	{r7, lr}
    9db6:	b084      	sub	sp, #16
    9db8:	af00      	add	r7, sp, #0
    9dba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9dbc:	687b      	ldr	r3, [r7, #4]
    9dbe:	681b      	ldr	r3, [r3, #0]
    9dc0:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    9dc2:	68fb      	ldr	r3, [r7, #12]
    9dc4:	8b5b      	ldrh	r3, [r3, #26]
    9dc6:	b29b      	uxth	r3, r3
    9dc8:	001a      	movs	r2, r3
    9dca:	2304      	movs	r3, #4
    9dcc:	4013      	ands	r3, r2
    9dce:	d004      	beq.n	9dda <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    9dd0:	687b      	ldr	r3, [r7, #4]
    9dd2:	2225      	movs	r2, #37	; 0x25
    9dd4:	211e      	movs	r1, #30
    9dd6:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    9dd8:	e024      	b.n	9e24 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    9dda:	230a      	movs	r3, #10
    9ddc:	18fb      	adds	r3, r7, r3
    9dde:	687a      	ldr	r2, [r7, #4]
    9de0:	8b52      	ldrh	r2, [r2, #26]
    9de2:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    9de4:	687b      	ldr	r3, [r7, #4]
    9de6:	8b9b      	ldrh	r3, [r3, #28]
    9de8:	b29a      	uxth	r2, r3
    9dea:	230a      	movs	r3, #10
    9dec:	18fb      	adds	r3, r7, r3
    9dee:	210a      	movs	r1, #10
    9df0:	1879      	adds	r1, r7, r1
    9df2:	8809      	ldrh	r1, [r1, #0]
    9df4:	1a8a      	subs	r2, r1, r2
    9df6:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    9df8:	687b      	ldr	r3, [r7, #4]
    9dfa:	8b9b      	ldrh	r3, [r3, #28]
    9dfc:	b29b      	uxth	r3, r3
    9dfe:	3b01      	subs	r3, #1
    9e00:	b29a      	uxth	r2, r3
    9e02:	687b      	ldr	r3, [r7, #4]
    9e04:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    9e06:	687b      	ldr	r3, [r7, #4]
    9e08:	0018      	movs	r0, r3
    9e0a:	4b08      	ldr	r3, [pc, #32]	; (9e2c <_i2c_master_write+0x78>)
    9e0c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    9e0e:	687b      	ldr	r3, [r7, #4]
    9e10:	6a1a      	ldr	r2, [r3, #32]
    9e12:	230a      	movs	r3, #10
    9e14:	18fb      	adds	r3, r7, r3
    9e16:	881b      	ldrh	r3, [r3, #0]
    9e18:	18d3      	adds	r3, r2, r3
    9e1a:	781b      	ldrb	r3, [r3, #0]
    9e1c:	b2d9      	uxtb	r1, r3
    9e1e:	68fb      	ldr	r3, [r7, #12]
    9e20:	2228      	movs	r2, #40	; 0x28
    9e22:	5499      	strb	r1, [r3, r2]
}
    9e24:	46bd      	mov	sp, r7
    9e26:	b004      	add	sp, #16
    9e28:	bd80      	pop	{r7, pc}
    9e2a:	46c0      	nop			; (mov r8, r8)
    9e2c:	00009ca1 	.word	0x00009ca1

00009e30 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    9e30:	b580      	push	{r7, lr}
    9e32:	b084      	sub	sp, #16
    9e34:	af00      	add	r7, sp, #0
    9e36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	681b      	ldr	r3, [r3, #0]
    9e3c:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    9e3e:	68fb      	ldr	r3, [r7, #12]
    9e40:	7e1b      	ldrb	r3, [r3, #24]
    9e42:	b2db      	uxtb	r3, r3
    9e44:	001a      	movs	r2, r3
    9e46:	2301      	movs	r3, #1
    9e48:	4013      	ands	r3, r2
    9e4a:	d02b      	beq.n	9ea4 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    9e4c:	68fb      	ldr	r3, [r7, #12]
    9e4e:	2201      	movs	r2, #1
    9e50:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    9e52:	68fb      	ldr	r3, [r7, #12]
    9e54:	8b5b      	ldrh	r3, [r3, #26]
    9e56:	b29b      	uxth	r3, r3
    9e58:	001a      	movs	r2, r3
    9e5a:	2302      	movs	r3, #2
    9e5c:	4013      	ands	r3, r2
    9e5e:	d004      	beq.n	9e6a <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	2225      	movs	r2, #37	; 0x25
    9e64:	2141      	movs	r1, #65	; 0x41
    9e66:	5499      	strb	r1, [r3, r2]
    9e68:	e01c      	b.n	9ea4 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    9e6a:	68fb      	ldr	r3, [r7, #12]
    9e6c:	8b5b      	ldrh	r3, [r3, #26]
    9e6e:	b29b      	uxth	r3, r3
    9e70:	001a      	movs	r2, r3
    9e72:	2304      	movs	r3, #4
    9e74:	4013      	ands	r3, r2
    9e76:	d015      	beq.n	9ea4 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	2225      	movs	r2, #37	; 0x25
    9e7c:	2118      	movs	r1, #24
    9e7e:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	2200      	movs	r2, #0
    9e84:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    9e86:	687b      	ldr	r3, [r7, #4]
    9e88:	7a9b      	ldrb	r3, [r3, #10]
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	d00a      	beq.n	9ea4 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    9e8e:	687b      	ldr	r3, [r7, #4]
    9e90:	0018      	movs	r0, r3
    9e92:	4b13      	ldr	r3, [pc, #76]	; (9ee0 <_i2c_master_async_address_response+0xb0>)
    9e94:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9e96:	68fb      	ldr	r3, [r7, #12]
    9e98:	685b      	ldr	r3, [r3, #4]
    9e9a:	22c0      	movs	r2, #192	; 0xc0
    9e9c:	0292      	lsls	r2, r2, #10
    9e9e:	431a      	orrs	r2, r3
    9ea0:	68fb      	ldr	r3, [r7, #12]
    9ea2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    9ea4:	687b      	ldr	r3, [r7, #4]
    9ea6:	8b9b      	ldrh	r3, [r3, #28]
    9ea8:	b29a      	uxth	r2, r3
    9eaa:	687b      	ldr	r3, [r7, #4]
    9eac:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    9eae:	687b      	ldr	r3, [r7, #4]
    9eb0:	2225      	movs	r2, #37	; 0x25
    9eb2:	5c9b      	ldrb	r3, [r3, r2]
    9eb4:	b2db      	uxtb	r3, r3
    9eb6:	2b05      	cmp	r3, #5
    9eb8:	d10e      	bne.n	9ed8 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    9eba:	687b      	ldr	r3, [r7, #4]
    9ebc:	2224      	movs	r2, #36	; 0x24
    9ebe:	5c9b      	ldrb	r3, [r3, r2]
    9ec0:	b2db      	uxtb	r3, r3
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d104      	bne.n	9ed0 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    9ec6:	687b      	ldr	r3, [r7, #4]
    9ec8:	0018      	movs	r0, r3
    9eca:	4b06      	ldr	r3, [pc, #24]	; (9ee4 <_i2c_master_async_address_response+0xb4>)
    9ecc:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    9ece:	e003      	b.n	9ed8 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    9ed0:	687b      	ldr	r3, [r7, #4]
    9ed2:	0018      	movs	r0, r3
    9ed4:	4b04      	ldr	r3, [pc, #16]	; (9ee8 <_i2c_master_async_address_response+0xb8>)
    9ed6:	4798      	blx	r3
}
    9ed8:	46c0      	nop			; (mov r8, r8)
    9eda:	46bd      	mov	sp, r7
    9edc:	b004      	add	sp, #16
    9ede:	bd80      	pop	{r7, pc}
    9ee0:	00009ca1 	.word	0x00009ca1
    9ee4:	00009db5 	.word	0x00009db5
    9ee8:	00009cc5 	.word	0x00009cc5

00009eec <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    9eec:	b580      	push	{r7, lr}
    9eee:	b084      	sub	sp, #16
    9ef0:	af00      	add	r7, sp, #0
    9ef2:	60f8      	str	r0, [r7, #12]
    9ef4:	60b9      	str	r1, [r7, #8]
    9ef6:	1dfb      	adds	r3, r7, #7
    9ef8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    9efa:	1dfb      	adds	r3, r7, #7
    9efc:	781b      	ldrb	r3, [r3, #0]
    9efe:	68fa      	ldr	r2, [r7, #12]
    9f00:	3302      	adds	r3, #2
    9f02:	009b      	lsls	r3, r3, #2
    9f04:	18d3      	adds	r3, r2, r3
    9f06:	3304      	adds	r3, #4
    9f08:	68ba      	ldr	r2, [r7, #8]
    9f0a:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    9f0c:	68fb      	ldr	r3, [r7, #12]
    9f0e:	7e1b      	ldrb	r3, [r3, #24]
    9f10:	b2db      	uxtb	r3, r3
    9f12:	b25a      	sxtb	r2, r3
    9f14:	1dfb      	adds	r3, r7, #7
    9f16:	781b      	ldrb	r3, [r3, #0]
    9f18:	2101      	movs	r1, #1
    9f1a:	4099      	lsls	r1, r3
    9f1c:	000b      	movs	r3, r1
    9f1e:	b25b      	sxtb	r3, r3
    9f20:	4313      	orrs	r3, r2
    9f22:	b25b      	sxtb	r3, r3
    9f24:	b2da      	uxtb	r2, r3
    9f26:	68fb      	ldr	r3, [r7, #12]
    9f28:	761a      	strb	r2, [r3, #24]
}
    9f2a:	46c0      	nop			; (mov r8, r8)
    9f2c:	46bd      	mov	sp, r7
    9f2e:	b004      	add	sp, #16
    9f30:	bd80      	pop	{r7, pc}
	...

00009f34 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9f34:	b590      	push	{r4, r7, lr}
    9f36:	b087      	sub	sp, #28
    9f38:	af00      	add	r7, sp, #0
    9f3a:	6078      	str	r0, [r7, #4]
    9f3c:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9f3e:	687b      	ldr	r3, [r7, #4]
    9f40:	681b      	ldr	r3, [r3, #0]
    9f42:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    9f44:	683b      	ldr	r3, [r7, #0]
    9f46:	685a      	ldr	r2, [r3, #4]
    9f48:	687b      	ldr	r3, [r7, #4]
    9f4a:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    9f4c:	683b      	ldr	r3, [r7, #0]
    9f4e:	885a      	ldrh	r2, [r3, #2]
    9f50:	687b      	ldr	r3, [r7, #4]
    9f52:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	2224      	movs	r2, #36	; 0x24
    9f58:	2101      	movs	r1, #1
    9f5a:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    9f5c:	687b      	ldr	r3, [r7, #4]
    9f5e:	2225      	movs	r2, #37	; 0x25
    9f60:	2105      	movs	r1, #5
    9f62:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    9f64:	693b      	ldr	r3, [r7, #16]
    9f66:	681b      	ldr	r3, [r3, #0]
    9f68:	011b      	lsls	r3, r3, #4
    9f6a:	0fdb      	lsrs	r3, r3, #31
    9f6c:	b2db      	uxtb	r3, r3
    9f6e:	001a      	movs	r2, r3
    9f70:	230f      	movs	r3, #15
    9f72:	18fb      	adds	r3, r7, r3
    9f74:	1e51      	subs	r1, r2, #1
    9f76:	418a      	sbcs	r2, r1
    9f78:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    9f7a:	683b      	ldr	r3, [r7, #0]
    9f7c:	7a5b      	ldrb	r3, [r3, #9]
    9f7e:	2b00      	cmp	r3, #0
    9f80:	d006      	beq.n	9f90 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    9f82:	683b      	ldr	r3, [r7, #0]
    9f84:	7a9a      	ldrb	r2, [r3, #10]
    9f86:	687b      	ldr	r3, [r7, #4]
    9f88:	0011      	movs	r1, r2
    9f8a:	0018      	movs	r0, r3
    9f8c:	4b3b      	ldr	r3, [pc, #236]	; (a07c <_i2c_master_read_packet+0x148>)
    9f8e:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    9f90:	230f      	movs	r3, #15
    9f92:	18fb      	adds	r3, r7, r3
    9f94:	781b      	ldrb	r3, [r3, #0]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d00b      	beq.n	9fb2 <_i2c_master_read_packet+0x7e>
    9f9a:	683b      	ldr	r3, [r7, #0]
    9f9c:	885b      	ldrh	r3, [r3, #2]
    9f9e:	2b01      	cmp	r3, #1
    9fa0:	d107      	bne.n	9fb2 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9fa2:	693b      	ldr	r3, [r7, #16]
    9fa4:	685b      	ldr	r3, [r3, #4]
    9fa6:	2280      	movs	r2, #128	; 0x80
    9fa8:	02d2      	lsls	r2, r2, #11
    9faa:	431a      	orrs	r2, r3
    9fac:	693b      	ldr	r3, [r7, #16]
    9fae:	605a      	str	r2, [r3, #4]
    9fb0:	e005      	b.n	9fbe <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9fb2:	693b      	ldr	r3, [r7, #16]
    9fb4:	685b      	ldr	r3, [r3, #4]
    9fb6:	4a32      	ldr	r2, [pc, #200]	; (a080 <_i2c_master_read_packet+0x14c>)
    9fb8:	401a      	ands	r2, r3
    9fba:	693b      	ldr	r3, [r7, #16]
    9fbc:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    9fbe:	683b      	ldr	r3, [r7, #0]
    9fc0:	7a1b      	ldrb	r3, [r3, #8]
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d045      	beq.n	a052 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    9fc6:	683b      	ldr	r3, [r7, #0]
    9fc8:	881b      	ldrh	r3, [r3, #0]
    9fca:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9fcc:	683b      	ldr	r3, [r7, #0]
    9fce:	7a5b      	ldrb	r3, [r3, #9]
    9fd0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    9fd2:	4313      	orrs	r3, r2
    9fd4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9fd6:	2380      	movs	r3, #128	; 0x80
    9fd8:	021b      	lsls	r3, r3, #8
    9fda:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    9fdc:	693b      	ldr	r3, [r7, #16]
    9fde:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    9fe0:	2317      	movs	r3, #23
    9fe2:	18fc      	adds	r4, r7, r3
    9fe4:	687b      	ldr	r3, [r7, #4]
    9fe6:	0018      	movs	r0, r3
    9fe8:	4b26      	ldr	r3, [pc, #152]	; (a084 <_i2c_master_read_packet+0x150>)
    9fea:	4798      	blx	r3
    9fec:	0003      	movs	r3, r0
    9fee:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9ff0:	693b      	ldr	r3, [r7, #16]
    9ff2:	685b      	ldr	r3, [r3, #4]
    9ff4:	4a22      	ldr	r2, [pc, #136]	; (a080 <_i2c_master_read_packet+0x14c>)
    9ff6:	401a      	ands	r2, r3
    9ff8:	693b      	ldr	r3, [r7, #16]
    9ffa:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    9ffc:	2317      	movs	r3, #23
    9ffe:	18fb      	adds	r3, r7, r3
    a000:	781b      	ldrb	r3, [r3, #0]
    a002:	2b00      	cmp	r3, #0
    a004:	d107      	bne.n	a016 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    a006:	2317      	movs	r3, #23
    a008:	18fc      	adds	r4, r7, r3
    a00a:	687b      	ldr	r3, [r7, #4]
    a00c:	0018      	movs	r0, r3
    a00e:	4b1e      	ldr	r3, [pc, #120]	; (a088 <_i2c_master_read_packet+0x154>)
    a010:	4798      	blx	r3
    a012:	0003      	movs	r3, r0
    a014:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    a016:	2317      	movs	r3, #23
    a018:	18fb      	adds	r3, r7, r3
    a01a:	781b      	ldrb	r3, [r3, #0]
    a01c:	2b00      	cmp	r3, #0
    a01e:	d114      	bne.n	a04a <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    a020:	693b      	ldr	r3, [r7, #16]
    a022:	2203      	movs	r2, #3
    a024:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    a026:	683b      	ldr	r3, [r7, #0]
    a028:	881b      	ldrh	r3, [r3, #0]
    a02a:	0a1b      	lsrs	r3, r3, #8
    a02c:	b29b      	uxth	r3, r3
    a02e:	2278      	movs	r2, #120	; 0x78
    a030:	4313      	orrs	r3, r2
    a032:	b29b      	uxth	r3, r3
    a034:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    a036:	683b      	ldr	r3, [r7, #0]
    a038:	7a5b      	ldrb	r3, [r3, #9]
    a03a:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    a03c:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    a03e:	2201      	movs	r2, #1
    a040:	4313      	orrs	r3, r2
    a042:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    a044:	693b      	ldr	r3, [r7, #16]
    a046:	625a      	str	r2, [r3, #36]	; 0x24
    a048:	e012      	b.n	a070 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    a04a:	2317      	movs	r3, #23
    a04c:	18fb      	adds	r3, r7, r3
    a04e:	781b      	ldrb	r3, [r3, #0]
    a050:	e00f      	b.n	a072 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    a052:	693b      	ldr	r3, [r7, #16]
    a054:	2203      	movs	r2, #3
    a056:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    a058:	683b      	ldr	r3, [r7, #0]
    a05a:	881b      	ldrh	r3, [r3, #0]
    a05c:	005b      	lsls	r3, r3, #1
    a05e:	2201      	movs	r2, #1
    a060:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    a062:	683b      	ldr	r3, [r7, #0]
    a064:	7a5b      	ldrb	r3, [r3, #9]
    a066:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    a068:	4313      	orrs	r3, r2
    a06a:	001a      	movs	r2, r3
    a06c:	693b      	ldr	r3, [r7, #16]
    a06e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    a070:	2300      	movs	r3, #0
}
    a072:	0018      	movs	r0, r3
    a074:	46bd      	mov	sp, r7
    a076:	b007      	add	sp, #28
    a078:	bd90      	pop	{r4, r7, pc}
    a07a:	46c0      	nop			; (mov r8, r8)
    a07c:	000097bd 	.word	0x000097bd
    a080:	fffbffff 	.word	0xfffbffff
    a084:	0000975f 	.word	0x0000975f
    a088:	00009701 	.word	0x00009701

0000a08c <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    a08c:	b580      	push	{r7, lr}
    a08e:	b082      	sub	sp, #8
    a090:	af00      	add	r7, sp, #0
    a092:	6078      	str	r0, [r7, #4]
    a094:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	8b9b      	ldrh	r3, [r3, #28]
    a09a:	b29b      	uxth	r3, r3
    a09c:	2b00      	cmp	r3, #0
    a09e:	d001      	beq.n	a0a4 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    a0a0:	2305      	movs	r3, #5
    a0a2:	e00c      	b.n	a0be <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    a0a4:	687b      	ldr	r3, [r7, #4]
    a0a6:	2201      	movs	r2, #1
    a0a8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    a0aa:	687b      	ldr	r3, [r7, #4]
    a0ac:	2201      	movs	r2, #1
    a0ae:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    a0b0:	683a      	ldr	r2, [r7, #0]
    a0b2:	687b      	ldr	r3, [r7, #4]
    a0b4:	0011      	movs	r1, r2
    a0b6:	0018      	movs	r0, r3
    a0b8:	4b03      	ldr	r3, [pc, #12]	; (a0c8 <i2c_master_read_packet_job+0x3c>)
    a0ba:	4798      	blx	r3
    a0bc:	0003      	movs	r3, r0
}
    a0be:	0018      	movs	r0, r3
    a0c0:	46bd      	mov	sp, r7
    a0c2:	b002      	add	sp, #8
    a0c4:	bd80      	pop	{r7, pc}
    a0c6:	46c0      	nop			; (mov r8, r8)
    a0c8:	00009f35 	.word	0x00009f35

0000a0cc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    a0cc:	b580      	push	{r7, lr}
    a0ce:	b086      	sub	sp, #24
    a0d0:	af00      	add	r7, sp, #0
    a0d2:	0002      	movs	r2, r0
    a0d4:	1dfb      	adds	r3, r7, #7
    a0d6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    a0d8:	1dfb      	adds	r3, r7, #7
    a0da:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    a0dc:	4b93      	ldr	r3, [pc, #588]	; (a32c <_i2c_master_interrupt_handler+0x260>)
    a0de:	0092      	lsls	r2, r2, #2
    a0e0:	58d3      	ldr	r3, [r2, r3]
    a0e2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a0e4:	697b      	ldr	r3, [r7, #20]
    a0e6:	681b      	ldr	r3, [r3, #0]
    a0e8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    a0ea:	693b      	ldr	r3, [r7, #16]
    a0ec:	681b      	ldr	r3, [r3, #0]
    a0ee:	011b      	lsls	r3, r3, #4
    a0f0:	0fdb      	lsrs	r3, r3, #31
    a0f2:	b2db      	uxtb	r3, r3
    a0f4:	001a      	movs	r2, r3
    a0f6:	230f      	movs	r3, #15
    a0f8:	18fb      	adds	r3, r7, r3
    a0fa:	1e51      	subs	r1, r2, #1
    a0fc:	418a      	sbcs	r2, r1
    a0fe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    a100:	230e      	movs	r3, #14
    a102:	18fb      	adds	r3, r7, r3
    a104:	697a      	ldr	r2, [r7, #20]
    a106:	7e52      	ldrb	r2, [r2, #25]
    a108:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    a10a:	697b      	ldr	r3, [r7, #20]
    a10c:	7e1b      	ldrb	r3, [r3, #24]
    a10e:	b2da      	uxtb	r2, r3
    a110:	230e      	movs	r3, #14
    a112:	18fb      	adds	r3, r7, r3
    a114:	210e      	movs	r1, #14
    a116:	1879      	adds	r1, r7, r1
    a118:	7809      	ldrb	r1, [r1, #0]
    a11a:	400a      	ands	r2, r1
    a11c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    a11e:	697b      	ldr	r3, [r7, #20]
    a120:	8b5b      	ldrh	r3, [r3, #26]
    a122:	b29b      	uxth	r3, r3
    a124:	2b00      	cmp	r3, #0
    a126:	d109      	bne.n	a13c <_i2c_master_interrupt_handler+0x70>
    a128:	697b      	ldr	r3, [r7, #20]
    a12a:	8b9b      	ldrh	r3, [r3, #28]
    a12c:	b29b      	uxth	r3, r3
    a12e:	2b00      	cmp	r3, #0
    a130:	d004      	beq.n	a13c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    a132:	697b      	ldr	r3, [r7, #20]
    a134:	0018      	movs	r0, r3
    a136:	4b7e      	ldr	r3, [pc, #504]	; (a330 <_i2c_master_interrupt_handler+0x264>)
    a138:	4798      	blx	r3
    a13a:	e070      	b.n	a21e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a13c:	697b      	ldr	r3, [r7, #20]
    a13e:	8b5b      	ldrh	r3, [r3, #26]
    a140:	b29b      	uxth	r3, r3
    a142:	2b00      	cmp	r3, #0
    a144:	d039      	beq.n	a1ba <_i2c_master_interrupt_handler+0xee>
    a146:	697b      	ldr	r3, [r7, #20]
    a148:	8b9b      	ldrh	r3, [r3, #28]
    a14a:	b29b      	uxth	r3, r3
    a14c:	2b00      	cmp	r3, #0
    a14e:	d134      	bne.n	a1ba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    a150:	697b      	ldr	r3, [r7, #20]
    a152:	2225      	movs	r2, #37	; 0x25
    a154:	5c9b      	ldrb	r3, [r3, r2]
    a156:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a158:	2b05      	cmp	r3, #5
    a15a:	d12e      	bne.n	a1ba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    a15c:	697b      	ldr	r3, [r7, #20]
    a15e:	2224      	movs	r2, #36	; 0x24
    a160:	5c9b      	ldrb	r3, [r3, r2]
    a162:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    a164:	2b00      	cmp	r3, #0
    a166:	d128      	bne.n	a1ba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    a168:	693b      	ldr	r3, [r7, #16]
    a16a:	2203      	movs	r2, #3
    a16c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    a16e:	697b      	ldr	r3, [r7, #20]
    a170:	2200      	movs	r2, #0
    a172:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    a174:	697b      	ldr	r3, [r7, #20]
    a176:	2225      	movs	r2, #37	; 0x25
    a178:	2100      	movs	r1, #0
    a17a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    a17c:	697b      	ldr	r3, [r7, #20]
    a17e:	7a9b      	ldrb	r3, [r3, #10]
    a180:	2b00      	cmp	r3, #0
    a182:	d00b      	beq.n	a19c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    a184:	697b      	ldr	r3, [r7, #20]
    a186:	0018      	movs	r0, r3
    a188:	4b6a      	ldr	r3, [pc, #424]	; (a334 <_i2c_master_interrupt_handler+0x268>)
    a18a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a18c:	693b      	ldr	r3, [r7, #16]
    a18e:	685b      	ldr	r3, [r3, #4]
    a190:	22c0      	movs	r2, #192	; 0xc0
    a192:	0292      	lsls	r2, r2, #10
    a194:	431a      	orrs	r2, r3
    a196:	693b      	ldr	r3, [r7, #16]
    a198:	605a      	str	r2, [r3, #4]
    a19a:	e002      	b.n	a1a2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    a19c:	693b      	ldr	r3, [r7, #16]
    a19e:	2201      	movs	r2, #1
    a1a0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    a1a2:	230e      	movs	r3, #14
    a1a4:	18fb      	adds	r3, r7, r3
    a1a6:	781b      	ldrb	r3, [r3, #0]
    a1a8:	2201      	movs	r2, #1
    a1aa:	4013      	ands	r3, r2
    a1ac:	d037      	beq.n	a21e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    a1ae:	697b      	ldr	r3, [r7, #20]
    a1b0:	68db      	ldr	r3, [r3, #12]
    a1b2:	697a      	ldr	r2, [r7, #20]
    a1b4:	0010      	movs	r0, r2
    a1b6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    a1b8:	e031      	b.n	a21e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    a1ba:	697b      	ldr	r3, [r7, #20]
    a1bc:	8b5b      	ldrh	r3, [r3, #26]
    a1be:	b29b      	uxth	r3, r3
    a1c0:	2b00      	cmp	r3, #0
    a1c2:	d02c      	beq.n	a21e <_i2c_master_interrupt_handler+0x152>
    a1c4:	697b      	ldr	r3, [r7, #20]
    a1c6:	8b9b      	ldrh	r3, [r3, #28]
    a1c8:	b29b      	uxth	r3, r3
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d027      	beq.n	a21e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    a1ce:	693b      	ldr	r3, [r7, #16]
    a1d0:	8b5b      	ldrh	r3, [r3, #26]
    a1d2:	b29b      	uxth	r3, r3
    a1d4:	001a      	movs	r2, r3
    a1d6:	2320      	movs	r3, #32
    a1d8:	4013      	ands	r3, r2
    a1da:	d111      	bne.n	a200 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    a1dc:	230f      	movs	r3, #15
    a1de:	18fb      	adds	r3, r7, r3
    a1e0:	781b      	ldrb	r3, [r3, #0]
    a1e2:	2201      	movs	r2, #1
    a1e4:	4053      	eors	r3, r2
    a1e6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d104      	bne.n	a1f6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    a1ec:	697b      	ldr	r3, [r7, #20]
    a1ee:	8b9b      	ldrh	r3, [r3, #28]
    a1f0:	b29b      	uxth	r3, r3
    a1f2:	2b01      	cmp	r3, #1
    a1f4:	d004      	beq.n	a200 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    a1f6:	697b      	ldr	r3, [r7, #20]
    a1f8:	2225      	movs	r2, #37	; 0x25
    a1fa:	2141      	movs	r1, #65	; 0x41
    a1fc:	5499      	strb	r1, [r3, r2]
    a1fe:	e00e      	b.n	a21e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    a200:	697b      	ldr	r3, [r7, #20]
    a202:	2224      	movs	r2, #36	; 0x24
    a204:	5c9b      	ldrb	r3, [r3, r2]
    a206:	b2db      	uxtb	r3, r3
    a208:	2b00      	cmp	r3, #0
    a20a:	d104      	bne.n	a216 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    a20c:	697b      	ldr	r3, [r7, #20]
    a20e:	0018      	movs	r0, r3
    a210:	4b49      	ldr	r3, [pc, #292]	; (a338 <_i2c_master_interrupt_handler+0x26c>)
    a212:	4798      	blx	r3
    a214:	e003      	b.n	a21e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    a216:	697b      	ldr	r3, [r7, #20]
    a218:	0018      	movs	r0, r3
    a21a:	4b48      	ldr	r3, [pc, #288]	; (a33c <_i2c_master_interrupt_handler+0x270>)
    a21c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a21e:	697b      	ldr	r3, [r7, #20]
    a220:	8b5b      	ldrh	r3, [r3, #26]
    a222:	b29b      	uxth	r3, r3
    a224:	2b00      	cmp	r3, #0
    a226:	d047      	beq.n	a2b8 <_i2c_master_interrupt_handler+0x1ec>
    a228:	697b      	ldr	r3, [r7, #20]
    a22a:	8b9b      	ldrh	r3, [r3, #28]
    a22c:	b29b      	uxth	r3, r3
    a22e:	2b00      	cmp	r3, #0
    a230:	d142      	bne.n	a2b8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    a232:	697b      	ldr	r3, [r7, #20]
    a234:	2225      	movs	r2, #37	; 0x25
    a236:	5c9b      	ldrb	r3, [r3, r2]
    a238:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a23a:	2b05      	cmp	r3, #5
    a23c:	d13c      	bne.n	a2b8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    a23e:	697b      	ldr	r3, [r7, #20]
    a240:	2224      	movs	r2, #36	; 0x24
    a242:	5c9b      	ldrb	r3, [r3, r2]
    a244:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    a246:	2b01      	cmp	r3, #1
    a248:	d136      	bne.n	a2b8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    a24a:	693b      	ldr	r3, [r7, #16]
    a24c:	7e1b      	ldrb	r3, [r3, #24]
    a24e:	b2db      	uxtb	r3, r3
    a250:	001a      	movs	r2, r3
    a252:	2302      	movs	r3, #2
    a254:	4013      	ands	r3, r2
    a256:	d002      	beq.n	a25e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a258:	693b      	ldr	r3, [r7, #16]
    a25a:	2202      	movs	r2, #2
    a25c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    a25e:	693b      	ldr	r3, [r7, #16]
    a260:	2203      	movs	r2, #3
    a262:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    a264:	697b      	ldr	r3, [r7, #20]
    a266:	2200      	movs	r2, #0
    a268:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    a26a:	697b      	ldr	r3, [r7, #20]
    a26c:	2225      	movs	r2, #37	; 0x25
    a26e:	2100      	movs	r1, #0
    a270:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    a272:	230e      	movs	r3, #14
    a274:	18fb      	adds	r3, r7, r3
    a276:	781b      	ldrb	r3, [r3, #0]
    a278:	2202      	movs	r2, #2
    a27a:	4013      	ands	r3, r2
    a27c:	d00b      	beq.n	a296 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    a27e:	697b      	ldr	r3, [r7, #20]
    a280:	2224      	movs	r2, #36	; 0x24
    a282:	5c9b      	ldrb	r3, [r3, r2]
    a284:	b2db      	uxtb	r3, r3
    a286:	2b01      	cmp	r3, #1
    a288:	d105      	bne.n	a296 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    a28a:	697b      	ldr	r3, [r7, #20]
    a28c:	691b      	ldr	r3, [r3, #16]
    a28e:	697a      	ldr	r2, [r7, #20]
    a290:	0010      	movs	r0, r2
    a292:	4798      	blx	r3
    a294:	e010      	b.n	a2b8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    a296:	230e      	movs	r3, #14
    a298:	18fb      	adds	r3, r7, r3
    a29a:	781b      	ldrb	r3, [r3, #0]
    a29c:	2201      	movs	r2, #1
    a29e:	4013      	ands	r3, r2
    a2a0:	d00a      	beq.n	a2b8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    a2a2:	697b      	ldr	r3, [r7, #20]
    a2a4:	2224      	movs	r2, #36	; 0x24
    a2a6:	5c9b      	ldrb	r3, [r3, r2]
    a2a8:	b2db      	uxtb	r3, r3
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d104      	bne.n	a2b8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    a2ae:	697b      	ldr	r3, [r7, #20]
    a2b0:	68db      	ldr	r3, [r3, #12]
    a2b2:	697a      	ldr	r2, [r7, #20]
    a2b4:	0010      	movs	r0, r2
    a2b6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    a2b8:	697b      	ldr	r3, [r7, #20]
    a2ba:	2225      	movs	r2, #37	; 0x25
    a2bc:	5c9b      	ldrb	r3, [r3, r2]
    a2be:	b2db      	uxtb	r3, r3
    a2c0:	2b05      	cmp	r3, #5
    a2c2:	d02e      	beq.n	a322 <_i2c_master_interrupt_handler+0x256>
    a2c4:	697b      	ldr	r3, [r7, #20]
    a2c6:	2225      	movs	r2, #37	; 0x25
    a2c8:	5c9b      	ldrb	r3, [r3, r2]
    a2ca:	b2db      	uxtb	r3, r3
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d028      	beq.n	a322 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    a2d0:	693b      	ldr	r3, [r7, #16]
    a2d2:	2203      	movs	r2, #3
    a2d4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    a2d6:	697b      	ldr	r3, [r7, #20]
    a2d8:	2200      	movs	r2, #0
    a2da:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    a2dc:	697b      	ldr	r3, [r7, #20]
    a2de:	2200      	movs	r2, #0
    a2e0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    a2e2:	697b      	ldr	r3, [r7, #20]
    a2e4:	2225      	movs	r2, #37	; 0x25
    a2e6:	5c9b      	ldrb	r3, [r3, r2]
    a2e8:	b2db      	uxtb	r3, r3
    a2ea:	2b41      	cmp	r3, #65	; 0x41
    a2ec:	d00e      	beq.n	a30c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    a2ee:	697b      	ldr	r3, [r7, #20]
    a2f0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	d00a      	beq.n	a30c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    a2f6:	697b      	ldr	r3, [r7, #20]
    a2f8:	0018      	movs	r0, r3
    a2fa:	4b0e      	ldr	r3, [pc, #56]	; (a334 <_i2c_master_interrupt_handler+0x268>)
    a2fc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    a2fe:	693b      	ldr	r3, [r7, #16]
    a300:	685b      	ldr	r3, [r3, #4]
    a302:	22e0      	movs	r2, #224	; 0xe0
    a304:	02d2      	lsls	r2, r2, #11
    a306:	431a      	orrs	r2, r3
    a308:	693b      	ldr	r3, [r7, #16]
    a30a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    a30c:	230e      	movs	r3, #14
    a30e:	18fb      	adds	r3, r7, r3
    a310:	781b      	ldrb	r3, [r3, #0]
    a312:	2204      	movs	r2, #4
    a314:	4013      	ands	r3, r2
    a316:	d004      	beq.n	a322 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    a318:	697b      	ldr	r3, [r7, #20]
    a31a:	695b      	ldr	r3, [r3, #20]
    a31c:	697a      	ldr	r2, [r7, #20]
    a31e:	0010      	movs	r0, r2
    a320:	4798      	blx	r3
		}
	}
}
    a322:	46c0      	nop			; (mov r8, r8)
    a324:	46bd      	mov	sp, r7
    a326:	b006      	add	sp, #24
    a328:	bd80      	pop	{r7, pc}
    a32a:	46c0      	nop			; (mov r8, r8)
    a32c:	20000764 	.word	0x20000764
    a330:	00009e31 	.word	0x00009e31
    a334:	00009ca1 	.word	0x00009ca1
    a338:	00009db5 	.word	0x00009db5
    a33c:	00009cc5 	.word	0x00009cc5

0000a340 <system_gclk_chan_get_config_defaults>:
{
    a340:	b580      	push	{r7, lr}
    a342:	b082      	sub	sp, #8
    a344:	af00      	add	r7, sp, #0
    a346:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a348:	687b      	ldr	r3, [r7, #4]
    a34a:	2200      	movs	r2, #0
    a34c:	701a      	strb	r2, [r3, #0]
}
    a34e:	46c0      	nop			; (mov r8, r8)
    a350:	46bd      	mov	sp, r7
    a352:	b002      	add	sp, #8
    a354:	bd80      	pop	{r7, pc}

0000a356 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    a356:	b5f0      	push	{r4, r5, r6, r7, lr}
    a358:	b08d      	sub	sp, #52	; 0x34
    a35a:	af00      	add	r7, sp, #0
    a35c:	60b8      	str	r0, [r7, #8]
    a35e:	60f9      	str	r1, [r7, #12]
    a360:	603a      	str	r2, [r7, #0]
    a362:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    a364:	2300      	movs	r3, #0
    a366:	2400      	movs	r4, #0
    a368:	623b      	str	r3, [r7, #32]
    a36a:	627c      	str	r4, [r7, #36]	; 0x24
    a36c:	2300      	movs	r3, #0
    a36e:	2400      	movs	r4, #0
    a370:	61bb      	str	r3, [r7, #24]
    a372:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    a374:	233f      	movs	r3, #63	; 0x3f
    a376:	62fb      	str	r3, [r7, #44]	; 0x2c
    a378:	e053      	b.n	a422 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a37c:	3b20      	subs	r3, #32
    a37e:	2b00      	cmp	r3, #0
    a380:	db04      	blt.n	a38c <long_division+0x36>
    a382:	2201      	movs	r2, #1
    a384:	409a      	lsls	r2, r3
    a386:	0013      	movs	r3, r2
    a388:	617b      	str	r3, [r7, #20]
    a38a:	e00b      	b.n	a3a4 <long_division+0x4e>
    a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a38e:	2220      	movs	r2, #32
    a390:	1ad3      	subs	r3, r2, r3
    a392:	2201      	movs	r2, #1
    a394:	40da      	lsrs	r2, r3
    a396:	0013      	movs	r3, r2
    a398:	2100      	movs	r1, #0
    a39a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a39c:	4091      	lsls	r1, r2
    a39e:	000a      	movs	r2, r1
    a3a0:	4313      	orrs	r3, r2
    a3a2:	617b      	str	r3, [r7, #20]
    a3a4:	2201      	movs	r2, #1
    a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a3a8:	409a      	lsls	r2, r3
    a3aa:	0013      	movs	r3, r2
    a3ac:	613b      	str	r3, [r7, #16]

		r = r << 1;
    a3ae:	69bb      	ldr	r3, [r7, #24]
    a3b0:	69fc      	ldr	r4, [r7, #28]
    a3b2:	18db      	adds	r3, r3, r3
    a3b4:	4164      	adcs	r4, r4
    a3b6:	61bb      	str	r3, [r7, #24]
    a3b8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    a3ba:	68bb      	ldr	r3, [r7, #8]
    a3bc:	693a      	ldr	r2, [r7, #16]
    a3be:	401a      	ands	r2, r3
    a3c0:	0015      	movs	r5, r2
    a3c2:	68fb      	ldr	r3, [r7, #12]
    a3c4:	697a      	ldr	r2, [r7, #20]
    a3c6:	401a      	ands	r2, r3
    a3c8:	0016      	movs	r6, r2
    a3ca:	002b      	movs	r3, r5
    a3cc:	4333      	orrs	r3, r6
    a3ce:	d007      	beq.n	a3e0 <long_division+0x8a>
			r |= 0x01;
    a3d0:	69bb      	ldr	r3, [r7, #24]
    a3d2:	2201      	movs	r2, #1
    a3d4:	4313      	orrs	r3, r2
    a3d6:	61bb      	str	r3, [r7, #24]
    a3d8:	69fb      	ldr	r3, [r7, #28]
    a3da:	2200      	movs	r2, #0
    a3dc:	4313      	orrs	r3, r2
    a3de:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    a3e0:	687a      	ldr	r2, [r7, #4]
    a3e2:	69fb      	ldr	r3, [r7, #28]
    a3e4:	429a      	cmp	r2, r3
    a3e6:	d819      	bhi.n	a41c <long_division+0xc6>
    a3e8:	687a      	ldr	r2, [r7, #4]
    a3ea:	69fb      	ldr	r3, [r7, #28]
    a3ec:	429a      	cmp	r2, r3
    a3ee:	d103      	bne.n	a3f8 <long_division+0xa2>
    a3f0:	683a      	ldr	r2, [r7, #0]
    a3f2:	69bb      	ldr	r3, [r7, #24]
    a3f4:	429a      	cmp	r2, r3
    a3f6:	d811      	bhi.n	a41c <long_division+0xc6>
			r = r - d;
    a3f8:	69b9      	ldr	r1, [r7, #24]
    a3fa:	69fa      	ldr	r2, [r7, #28]
    a3fc:	683b      	ldr	r3, [r7, #0]
    a3fe:	687c      	ldr	r4, [r7, #4]
    a400:	1ac9      	subs	r1, r1, r3
    a402:	41a2      	sbcs	r2, r4
    a404:	000b      	movs	r3, r1
    a406:	0014      	movs	r4, r2
    a408:	61bb      	str	r3, [r7, #24]
    a40a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    a40c:	6a3a      	ldr	r2, [r7, #32]
    a40e:	693b      	ldr	r3, [r7, #16]
    a410:	4313      	orrs	r3, r2
    a412:	623b      	str	r3, [r7, #32]
    a414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a416:	697b      	ldr	r3, [r7, #20]
    a418:	4313      	orrs	r3, r2
    a41a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a41e:	3b01      	subs	r3, #1
    a420:	62fb      	str	r3, [r7, #44]	; 0x2c
    a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a424:	2b00      	cmp	r3, #0
    a426:	daa8      	bge.n	a37a <long_division+0x24>
		}
	}

	return q;
    a428:	6a3b      	ldr	r3, [r7, #32]
    a42a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    a42c:	0018      	movs	r0, r3
    a42e:	0021      	movs	r1, r4
    a430:	46bd      	mov	sp, r7
    a432:	b00d      	add	sp, #52	; 0x34
    a434:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a436 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    a436:	b580      	push	{r7, lr}
    a438:	b086      	sub	sp, #24
    a43a:	af00      	add	r7, sp, #0
    a43c:	60f8      	str	r0, [r7, #12]
    a43e:	60b9      	str	r1, [r7, #8]
    a440:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    a442:	2316      	movs	r3, #22
    a444:	18fb      	adds	r3, r7, r3
    a446:	2200      	movs	r2, #0
    a448:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    a44a:	68bb      	ldr	r3, [r7, #8]
    a44c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    a44e:	68bb      	ldr	r3, [r7, #8]
    a450:	085a      	lsrs	r2, r3, #1
    a452:	68fb      	ldr	r3, [r7, #12]
    a454:	429a      	cmp	r2, r3
    a456:	d201      	bcs.n	a45c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a458:	2340      	movs	r3, #64	; 0x40
    a45a:	e026      	b.n	a4aa <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    a45c:	68bb      	ldr	r3, [r7, #8]
    a45e:	085b      	lsrs	r3, r3, #1
    a460:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    a462:	e00a      	b.n	a47a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    a464:	693a      	ldr	r2, [r7, #16]
    a466:	68fb      	ldr	r3, [r7, #12]
    a468:	1ad3      	subs	r3, r2, r3
    a46a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    a46c:	2316      	movs	r3, #22
    a46e:	18fb      	adds	r3, r7, r3
    a470:	881a      	ldrh	r2, [r3, #0]
    a472:	2316      	movs	r3, #22
    a474:	18fb      	adds	r3, r7, r3
    a476:	3201      	adds	r2, #1
    a478:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    a47a:	693a      	ldr	r2, [r7, #16]
    a47c:	68fb      	ldr	r3, [r7, #12]
    a47e:	429a      	cmp	r2, r3
    a480:	d2f0      	bcs.n	a464 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    a482:	2316      	movs	r3, #22
    a484:	18fb      	adds	r3, r7, r3
    a486:	2216      	movs	r2, #22
    a488:	18ba      	adds	r2, r7, r2
    a48a:	8812      	ldrh	r2, [r2, #0]
    a48c:	3a01      	subs	r2, #1
    a48e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    a490:	2316      	movs	r3, #22
    a492:	18fb      	adds	r3, r7, r3
    a494:	881b      	ldrh	r3, [r3, #0]
    a496:	2bff      	cmp	r3, #255	; 0xff
    a498:	d901      	bls.n	a49e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a49a:	2340      	movs	r3, #64	; 0x40
    a49c:	e005      	b.n	a4aa <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    a49e:	687b      	ldr	r3, [r7, #4]
    a4a0:	2216      	movs	r2, #22
    a4a2:	18ba      	adds	r2, r7, r2
    a4a4:	8812      	ldrh	r2, [r2, #0]
    a4a6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    a4a8:	2300      	movs	r3, #0
	}
}
    a4aa:	0018      	movs	r0, r3
    a4ac:	46bd      	mov	sp, r7
    a4ae:	b006      	add	sp, #24
    a4b0:	bd80      	pop	{r7, pc}
	...

0000a4b4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    a4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4b6:	b0a1      	sub	sp, #132	; 0x84
    a4b8:	af00      	add	r7, sp, #0
    a4ba:	64f8      	str	r0, [r7, #76]	; 0x4c
    a4bc:	64b9      	str	r1, [r7, #72]	; 0x48
    a4be:	647a      	str	r2, [r7, #68]	; 0x44
    a4c0:	2243      	movs	r2, #67	; 0x43
    a4c2:	18ba      	adds	r2, r7, r2
    a4c4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    a4c6:	2300      	movs	r3, #0
    a4c8:	2400      	movs	r4, #0
    a4ca:	673b      	str	r3, [r7, #112]	; 0x70
    a4cc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    a4ce:	2300      	movs	r3, #0
    a4d0:	2400      	movs	r4, #0
    a4d2:	66bb      	str	r3, [r7, #104]	; 0x68
    a4d4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    a4d6:	2300      	movs	r3, #0
    a4d8:	2400      	movs	r4, #0
    a4da:	67bb      	str	r3, [r7, #120]	; 0x78
    a4dc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    a4de:	2300      	movs	r3, #0
    a4e0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    a4e2:	2358      	movs	r3, #88	; 0x58
    a4e4:	2240      	movs	r2, #64	; 0x40
    a4e6:	4694      	mov	ip, r2
    a4e8:	44bc      	add	ip, r7
    a4ea:	4463      	add	r3, ip
    a4ec:	781a      	ldrb	r2, [r3, #0]
    a4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a4f0:	435a      	muls	r2, r3
    a4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a4f4:	429a      	cmp	r2, r3
    a4f6:	d901      	bls.n	a4fc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a4f8:	2340      	movs	r3, #64	; 0x40
    a4fa:	e0b3      	b.n	a664 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    a4fc:	2343      	movs	r3, #67	; 0x43
    a4fe:	18fb      	adds	r3, r7, r3
    a500:	781b      	ldrb	r3, [r3, #0]
    a502:	2b00      	cmp	r3, #0
    a504:	d13d      	bne.n	a582 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    a506:	2358      	movs	r3, #88	; 0x58
    a508:	2240      	movs	r2, #64	; 0x40
    a50a:	4694      	mov	ip, r2
    a50c:	44bc      	add	ip, r7
    a50e:	4463      	add	r3, ip
    a510:	781b      	ldrb	r3, [r3, #0]
    a512:	b2db      	uxtb	r3, r3
    a514:	613b      	str	r3, [r7, #16]
    a516:	2300      	movs	r3, #0
    a518:	617b      	str	r3, [r7, #20]
    a51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a51c:	60bb      	str	r3, [r7, #8]
    a51e:	2300      	movs	r3, #0
    a520:	60fb      	str	r3, [r7, #12]
    a522:	4c52      	ldr	r4, [pc, #328]	; (a66c <_sercom_get_async_baud_val+0x1b8>)
    a524:	68ba      	ldr	r2, [r7, #8]
    a526:	68fb      	ldr	r3, [r7, #12]
    a528:	6938      	ldr	r0, [r7, #16]
    a52a:	6979      	ldr	r1, [r7, #20]
    a52c:	47a0      	blx	r4
    a52e:	0003      	movs	r3, r0
    a530:	000c      	movs	r4, r1
    a532:	001b      	movs	r3, r3
    a534:	65fb      	str	r3, [r7, #92]	; 0x5c
    a536:	2300      	movs	r3, #0
    a538:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    a53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a53c:	603b      	str	r3, [r7, #0]
    a53e:	2300      	movs	r3, #0
    a540:	607b      	str	r3, [r7, #4]
    a542:	6db8      	ldr	r0, [r7, #88]	; 0x58
    a544:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    a546:	683a      	ldr	r2, [r7, #0]
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	4c49      	ldr	r4, [pc, #292]	; (a670 <_sercom_get_async_baud_val+0x1bc>)
    a54c:	47a0      	blx	r4
    a54e:	0003      	movs	r3, r0
    a550:	000c      	movs	r4, r1
    a552:	673b      	str	r3, [r7, #112]	; 0x70
    a554:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    a556:	2100      	movs	r1, #0
    a558:	2201      	movs	r2, #1
    a55a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    a55c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    a55e:	1ac9      	subs	r1, r1, r3
    a560:	41a2      	sbcs	r2, r4
    a562:	000b      	movs	r3, r1
    a564:	0014      	movs	r4, r2
    a566:	66bb      	str	r3, [r7, #104]	; 0x68
    a568:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    a56a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a56c:	0c1b      	lsrs	r3, r3, #16
    a56e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    a570:	0416      	lsls	r6, r2, #16
    a572:	431e      	orrs	r6, r3
    a574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a576:	041d      	lsls	r5, r3, #16
    a578:	0033      	movs	r3, r6
    a57a:	67bb      	str	r3, [r7, #120]	; 0x78
    a57c:	2300      	movs	r3, #0
    a57e:	67fb      	str	r3, [r7, #124]	; 0x7c
    a580:	e06a      	b.n	a658 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    a582:	2343      	movs	r3, #67	; 0x43
    a584:	18fb      	adds	r3, r7, r3
    a586:	781b      	ldrb	r3, [r3, #0]
    a588:	2b01      	cmp	r3, #1
    a58a:	d165      	bne.n	a658 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    a58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a58e:	633b      	str	r3, [r7, #48]	; 0x30
    a590:	2300      	movs	r3, #0
    a592:	637b      	str	r3, [r7, #52]	; 0x34
    a594:	2358      	movs	r3, #88	; 0x58
    a596:	2240      	movs	r2, #64	; 0x40
    a598:	4694      	mov	ip, r2
    a59a:	44bc      	add	ip, r7
    a59c:	4463      	add	r3, ip
    a59e:	781b      	ldrb	r3, [r3, #0]
    a5a0:	b2db      	uxtb	r3, r3
    a5a2:	62bb      	str	r3, [r7, #40]	; 0x28
    a5a4:	2300      	movs	r3, #0
    a5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a5a8:	4c30      	ldr	r4, [pc, #192]	; (a66c <_sercom_get_async_baud_val+0x1b8>)
    a5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a5ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a5b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    a5b2:	47a0      	blx	r4
    a5b4:	0003      	movs	r3, r0
    a5b6:	000c      	movs	r4, r1
    a5b8:	65bb      	str	r3, [r7, #88]	; 0x58
    a5ba:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    a5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a5be:	623b      	str	r3, [r7, #32]
    a5c0:	2300      	movs	r3, #0
    a5c2:	627b      	str	r3, [r7, #36]	; 0x24
    a5c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a5c6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a5c8:	001a      	movs	r2, r3
    a5ca:	0023      	movs	r3, r4
    a5cc:	6a38      	ldr	r0, [r7, #32]
    a5ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a5d0:	4c27      	ldr	r4, [pc, #156]	; (a670 <_sercom_get_async_baud_val+0x1bc>)
    a5d2:	47a0      	blx	r4
    a5d4:	0003      	movs	r3, r0
    a5d6:	000c      	movs	r4, r1
    a5d8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    a5da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    a5dc:	2380      	movs	r3, #128	; 0x80
    a5de:	019b      	lsls	r3, r3, #6
    a5e0:	429a      	cmp	r2, r3
    a5e2:	d901      	bls.n	a5e8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a5e4:	2340      	movs	r3, #64	; 0x40
    a5e6:	e03d      	b.n	a664 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    a5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a5ea:	61bb      	str	r3, [r7, #24]
    a5ec:	2300      	movs	r3, #0
    a5ee:	61fb      	str	r3, [r7, #28]
    a5f0:	69b9      	ldr	r1, [r7, #24]
    a5f2:	69fa      	ldr	r2, [r7, #28]
    a5f4:	000b      	movs	r3, r1
    a5f6:	0f5b      	lsrs	r3, r3, #29
    a5f8:	0010      	movs	r0, r2
    a5fa:	00c0      	lsls	r0, r0, #3
    a5fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    a5fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    a600:	4318      	orrs	r0, r3
    a602:	63f8      	str	r0, [r7, #60]	; 0x3c
    a604:	000b      	movs	r3, r1
    a606:	00db      	lsls	r3, r3, #3
    a608:	63bb      	str	r3, [r7, #56]	; 0x38
    a60a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a60c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a60e:	001a      	movs	r2, r3
    a610:	0023      	movs	r3, r4
    a612:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    a614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    a616:	4c16      	ldr	r4, [pc, #88]	; (a670 <_sercom_get_async_baud_val+0x1bc>)
    a618:	47a0      	blx	r4
    a61a:	0003      	movs	r3, r0
    a61c:	000c      	movs	r4, r1
    a61e:	65bb      	str	r3, [r7, #88]	; 0x58
    a620:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    a622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a624:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a626:	b2d9      	uxtb	r1, r3
    a628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a62a:	b2db      	uxtb	r3, r3
    a62c:	00db      	lsls	r3, r3, #3
    a62e:	b2da      	uxtb	r2, r3
    a630:	2317      	movs	r3, #23
    a632:	2040      	movs	r0, #64	; 0x40
    a634:	4684      	mov	ip, r0
    a636:	44bc      	add	ip, r7
    a638:	4463      	add	r3, ip
    a63a:	1a8a      	subs	r2, r1, r2
    a63c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    a63e:	2317      	movs	r3, #23
    a640:	2240      	movs	r2, #64	; 0x40
    a642:	4694      	mov	ip, r2
    a644:	44bc      	add	ip, r7
    a646:	4463      	add	r3, ip
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	035b      	lsls	r3, r3, #13
    a64c:	001a      	movs	r2, r3
    a64e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a650:	4313      	orrs	r3, r2
    a652:	67bb      	str	r3, [r7, #120]	; 0x78
    a654:	2300      	movs	r3, #0
    a656:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    a658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    a65a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    a65c:	b29a      	uxth	r2, r3
    a65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a660:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    a662:	2300      	movs	r3, #0
}
    a664:	0018      	movs	r0, r3
    a666:	46bd      	mov	sp, r7
    a668:	b021      	add	sp, #132	; 0x84
    a66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a66c:	000117a9 	.word	0x000117a9
    a670:	0000a357 	.word	0x0000a357

0000a674 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    a674:	b580      	push	{r7, lr}
    a676:	b084      	sub	sp, #16
    a678:	af00      	add	r7, sp, #0
    a67a:	0002      	movs	r2, r0
    a67c:	1dfb      	adds	r3, r7, #7
    a67e:	701a      	strb	r2, [r3, #0]
    a680:	1dbb      	adds	r3, r7, #6
    a682:	1c0a      	adds	r2, r1, #0
    a684:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    a686:	4b1a      	ldr	r3, [pc, #104]	; (a6f0 <sercom_set_gclk_generator+0x7c>)
    a688:	781b      	ldrb	r3, [r3, #0]
    a68a:	2201      	movs	r2, #1
    a68c:	4053      	eors	r3, r2
    a68e:	b2db      	uxtb	r3, r3
    a690:	2b00      	cmp	r3, #0
    a692:	d103      	bne.n	a69c <sercom_set_gclk_generator+0x28>
    a694:	1dbb      	adds	r3, r7, #6
    a696:	781b      	ldrb	r3, [r3, #0]
    a698:	2b00      	cmp	r3, #0
    a69a:	d01b      	beq.n	a6d4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a69c:	230c      	movs	r3, #12
    a69e:	18fb      	adds	r3, r7, r3
    a6a0:	0018      	movs	r0, r3
    a6a2:	4b14      	ldr	r3, [pc, #80]	; (a6f4 <sercom_set_gclk_generator+0x80>)
    a6a4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    a6a6:	230c      	movs	r3, #12
    a6a8:	18fb      	adds	r3, r7, r3
    a6aa:	1dfa      	adds	r2, r7, #7
    a6ac:	7812      	ldrb	r2, [r2, #0]
    a6ae:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    a6b0:	230c      	movs	r3, #12
    a6b2:	18fb      	adds	r3, r7, r3
    a6b4:	0019      	movs	r1, r3
    a6b6:	2013      	movs	r0, #19
    a6b8:	4b0f      	ldr	r3, [pc, #60]	; (a6f8 <sercom_set_gclk_generator+0x84>)
    a6ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    a6bc:	2013      	movs	r0, #19
    a6be:	4b0f      	ldr	r3, [pc, #60]	; (a6fc <sercom_set_gclk_generator+0x88>)
    a6c0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    a6c2:	4b0b      	ldr	r3, [pc, #44]	; (a6f0 <sercom_set_gclk_generator+0x7c>)
    a6c4:	1dfa      	adds	r2, r7, #7
    a6c6:	7812      	ldrb	r2, [r2, #0]
    a6c8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    a6ca:	4b09      	ldr	r3, [pc, #36]	; (a6f0 <sercom_set_gclk_generator+0x7c>)
    a6cc:	2201      	movs	r2, #1
    a6ce:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    a6d0:	2300      	movs	r3, #0
    a6d2:	e008      	b.n	a6e6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    a6d4:	4b06      	ldr	r3, [pc, #24]	; (a6f0 <sercom_set_gclk_generator+0x7c>)
    a6d6:	785b      	ldrb	r3, [r3, #1]
    a6d8:	1dfa      	adds	r2, r7, #7
    a6da:	7812      	ldrb	r2, [r2, #0]
    a6dc:	429a      	cmp	r2, r3
    a6de:	d101      	bne.n	a6e4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    a6e0:	2300      	movs	r3, #0
    a6e2:	e000      	b.n	a6e6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    a6e4:	231d      	movs	r3, #29
}
    a6e6:	0018      	movs	r0, r3
    a6e8:	46bd      	mov	sp, r7
    a6ea:	b004      	add	sp, #16
    a6ec:	bd80      	pop	{r7, pc}
    a6ee:	46c0      	nop			; (mov r8, r8)
    a6f0:	2000038c 	.word	0x2000038c
    a6f4:	0000a341 	.word	0x0000a341
    a6f8:	0000c4e9 	.word	0x0000c4e9
    a6fc:	0000c52d 	.word	0x0000c52d

0000a700 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    a700:	b580      	push	{r7, lr}
    a702:	b082      	sub	sp, #8
    a704:	af00      	add	r7, sp, #0
    a706:	6078      	str	r0, [r7, #4]
    a708:	000a      	movs	r2, r1
    a70a:	1cfb      	adds	r3, r7, #3
    a70c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	4a4d      	ldr	r2, [pc, #308]	; (a848 <_sercom_get_default_pad+0x148>)
    a712:	4293      	cmp	r3, r2
    a714:	d03f      	beq.n	a796 <_sercom_get_default_pad+0x96>
    a716:	4a4c      	ldr	r2, [pc, #304]	; (a848 <_sercom_get_default_pad+0x148>)
    a718:	4293      	cmp	r3, r2
    a71a:	d806      	bhi.n	a72a <_sercom_get_default_pad+0x2a>
    a71c:	4a4b      	ldr	r2, [pc, #300]	; (a84c <_sercom_get_default_pad+0x14c>)
    a71e:	4293      	cmp	r3, r2
    a720:	d00f      	beq.n	a742 <_sercom_get_default_pad+0x42>
    a722:	4a4b      	ldr	r2, [pc, #300]	; (a850 <_sercom_get_default_pad+0x150>)
    a724:	4293      	cmp	r3, r2
    a726:	d021      	beq.n	a76c <_sercom_get_default_pad+0x6c>
    a728:	e089      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a72a:	4a4a      	ldr	r2, [pc, #296]	; (a854 <_sercom_get_default_pad+0x154>)
    a72c:	4293      	cmp	r3, r2
    a72e:	d100      	bne.n	a732 <_sercom_get_default_pad+0x32>
    a730:	e05b      	b.n	a7ea <_sercom_get_default_pad+0xea>
    a732:	4a49      	ldr	r2, [pc, #292]	; (a858 <_sercom_get_default_pad+0x158>)
    a734:	4293      	cmp	r3, r2
    a736:	d100      	bne.n	a73a <_sercom_get_default_pad+0x3a>
    a738:	e06c      	b.n	a814 <_sercom_get_default_pad+0x114>
    a73a:	4a48      	ldr	r2, [pc, #288]	; (a85c <_sercom_get_default_pad+0x15c>)
    a73c:	4293      	cmp	r3, r2
    a73e:	d03f      	beq.n	a7c0 <_sercom_get_default_pad+0xc0>
    a740:	e07d      	b.n	a83e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a742:	1cfb      	adds	r3, r7, #3
    a744:	781b      	ldrb	r3, [r3, #0]
    a746:	2b01      	cmp	r3, #1
    a748:	d00a      	beq.n	a760 <_sercom_get_default_pad+0x60>
    a74a:	dc02      	bgt.n	a752 <_sercom_get_default_pad+0x52>
    a74c:	2b00      	cmp	r3, #0
    a74e:	d005      	beq.n	a75c <_sercom_get_default_pad+0x5c>
    a750:	e075      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a752:	2b02      	cmp	r3, #2
    a754:	d006      	beq.n	a764 <_sercom_get_default_pad+0x64>
    a756:	2b03      	cmp	r3, #3
    a758:	d006      	beq.n	a768 <_sercom_get_default_pad+0x68>
    a75a:	e070      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a75c:	4b40      	ldr	r3, [pc, #256]	; (a860 <_sercom_get_default_pad+0x160>)
    a75e:	e06f      	b.n	a840 <_sercom_get_default_pad+0x140>
    a760:	4b40      	ldr	r3, [pc, #256]	; (a864 <_sercom_get_default_pad+0x164>)
    a762:	e06d      	b.n	a840 <_sercom_get_default_pad+0x140>
    a764:	4b40      	ldr	r3, [pc, #256]	; (a868 <_sercom_get_default_pad+0x168>)
    a766:	e06b      	b.n	a840 <_sercom_get_default_pad+0x140>
    a768:	4b40      	ldr	r3, [pc, #256]	; (a86c <_sercom_get_default_pad+0x16c>)
    a76a:	e069      	b.n	a840 <_sercom_get_default_pad+0x140>
    a76c:	1cfb      	adds	r3, r7, #3
    a76e:	781b      	ldrb	r3, [r3, #0]
    a770:	2b01      	cmp	r3, #1
    a772:	d00a      	beq.n	a78a <_sercom_get_default_pad+0x8a>
    a774:	dc02      	bgt.n	a77c <_sercom_get_default_pad+0x7c>
    a776:	2b00      	cmp	r3, #0
    a778:	d005      	beq.n	a786 <_sercom_get_default_pad+0x86>
    a77a:	e060      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a77c:	2b02      	cmp	r3, #2
    a77e:	d006      	beq.n	a78e <_sercom_get_default_pad+0x8e>
    a780:	2b03      	cmp	r3, #3
    a782:	d006      	beq.n	a792 <_sercom_get_default_pad+0x92>
    a784:	e05b      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a786:	2303      	movs	r3, #3
    a788:	e05a      	b.n	a840 <_sercom_get_default_pad+0x140>
    a78a:	4b39      	ldr	r3, [pc, #228]	; (a870 <_sercom_get_default_pad+0x170>)
    a78c:	e058      	b.n	a840 <_sercom_get_default_pad+0x140>
    a78e:	4b39      	ldr	r3, [pc, #228]	; (a874 <_sercom_get_default_pad+0x174>)
    a790:	e056      	b.n	a840 <_sercom_get_default_pad+0x140>
    a792:	4b39      	ldr	r3, [pc, #228]	; (a878 <_sercom_get_default_pad+0x178>)
    a794:	e054      	b.n	a840 <_sercom_get_default_pad+0x140>
    a796:	1cfb      	adds	r3, r7, #3
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	2b01      	cmp	r3, #1
    a79c:	d00a      	beq.n	a7b4 <_sercom_get_default_pad+0xb4>
    a79e:	dc02      	bgt.n	a7a6 <_sercom_get_default_pad+0xa6>
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d005      	beq.n	a7b0 <_sercom_get_default_pad+0xb0>
    a7a4:	e04b      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a7a6:	2b02      	cmp	r3, #2
    a7a8:	d006      	beq.n	a7b8 <_sercom_get_default_pad+0xb8>
    a7aa:	2b03      	cmp	r3, #3
    a7ac:	d006      	beq.n	a7bc <_sercom_get_default_pad+0xbc>
    a7ae:	e046      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a7b0:	4b32      	ldr	r3, [pc, #200]	; (a87c <_sercom_get_default_pad+0x17c>)
    a7b2:	e045      	b.n	a840 <_sercom_get_default_pad+0x140>
    a7b4:	4b32      	ldr	r3, [pc, #200]	; (a880 <_sercom_get_default_pad+0x180>)
    a7b6:	e043      	b.n	a840 <_sercom_get_default_pad+0x140>
    a7b8:	4b32      	ldr	r3, [pc, #200]	; (a884 <_sercom_get_default_pad+0x184>)
    a7ba:	e041      	b.n	a840 <_sercom_get_default_pad+0x140>
    a7bc:	4b32      	ldr	r3, [pc, #200]	; (a888 <_sercom_get_default_pad+0x188>)
    a7be:	e03f      	b.n	a840 <_sercom_get_default_pad+0x140>
    a7c0:	1cfb      	adds	r3, r7, #3
    a7c2:	781b      	ldrb	r3, [r3, #0]
    a7c4:	2b01      	cmp	r3, #1
    a7c6:	d00a      	beq.n	a7de <_sercom_get_default_pad+0xde>
    a7c8:	dc02      	bgt.n	a7d0 <_sercom_get_default_pad+0xd0>
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	d005      	beq.n	a7da <_sercom_get_default_pad+0xda>
    a7ce:	e036      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a7d0:	2b02      	cmp	r3, #2
    a7d2:	d006      	beq.n	a7e2 <_sercom_get_default_pad+0xe2>
    a7d4:	2b03      	cmp	r3, #3
    a7d6:	d006      	beq.n	a7e6 <_sercom_get_default_pad+0xe6>
    a7d8:	e031      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a7da:	4b2c      	ldr	r3, [pc, #176]	; (a88c <_sercom_get_default_pad+0x18c>)
    a7dc:	e030      	b.n	a840 <_sercom_get_default_pad+0x140>
    a7de:	4b2c      	ldr	r3, [pc, #176]	; (a890 <_sercom_get_default_pad+0x190>)
    a7e0:	e02e      	b.n	a840 <_sercom_get_default_pad+0x140>
    a7e2:	4b2c      	ldr	r3, [pc, #176]	; (a894 <_sercom_get_default_pad+0x194>)
    a7e4:	e02c      	b.n	a840 <_sercom_get_default_pad+0x140>
    a7e6:	4b2c      	ldr	r3, [pc, #176]	; (a898 <_sercom_get_default_pad+0x198>)
    a7e8:	e02a      	b.n	a840 <_sercom_get_default_pad+0x140>
    a7ea:	1cfb      	adds	r3, r7, #3
    a7ec:	781b      	ldrb	r3, [r3, #0]
    a7ee:	2b01      	cmp	r3, #1
    a7f0:	d00a      	beq.n	a808 <_sercom_get_default_pad+0x108>
    a7f2:	dc02      	bgt.n	a7fa <_sercom_get_default_pad+0xfa>
    a7f4:	2b00      	cmp	r3, #0
    a7f6:	d005      	beq.n	a804 <_sercom_get_default_pad+0x104>
    a7f8:	e021      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a7fa:	2b02      	cmp	r3, #2
    a7fc:	d006      	beq.n	a80c <_sercom_get_default_pad+0x10c>
    a7fe:	2b03      	cmp	r3, #3
    a800:	d006      	beq.n	a810 <_sercom_get_default_pad+0x110>
    a802:	e01c      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a804:	4b25      	ldr	r3, [pc, #148]	; (a89c <_sercom_get_default_pad+0x19c>)
    a806:	e01b      	b.n	a840 <_sercom_get_default_pad+0x140>
    a808:	4b25      	ldr	r3, [pc, #148]	; (a8a0 <_sercom_get_default_pad+0x1a0>)
    a80a:	e019      	b.n	a840 <_sercom_get_default_pad+0x140>
    a80c:	4b25      	ldr	r3, [pc, #148]	; (a8a4 <_sercom_get_default_pad+0x1a4>)
    a80e:	e017      	b.n	a840 <_sercom_get_default_pad+0x140>
    a810:	4b25      	ldr	r3, [pc, #148]	; (a8a8 <_sercom_get_default_pad+0x1a8>)
    a812:	e015      	b.n	a840 <_sercom_get_default_pad+0x140>
    a814:	1cfb      	adds	r3, r7, #3
    a816:	781b      	ldrb	r3, [r3, #0]
    a818:	2b01      	cmp	r3, #1
    a81a:	d00a      	beq.n	a832 <_sercom_get_default_pad+0x132>
    a81c:	dc02      	bgt.n	a824 <_sercom_get_default_pad+0x124>
    a81e:	2b00      	cmp	r3, #0
    a820:	d005      	beq.n	a82e <_sercom_get_default_pad+0x12e>
    a822:	e00c      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a824:	2b02      	cmp	r3, #2
    a826:	d006      	beq.n	a836 <_sercom_get_default_pad+0x136>
    a828:	2b03      	cmp	r3, #3
    a82a:	d006      	beq.n	a83a <_sercom_get_default_pad+0x13a>
    a82c:	e007      	b.n	a83e <_sercom_get_default_pad+0x13e>
    a82e:	4b1f      	ldr	r3, [pc, #124]	; (a8ac <_sercom_get_default_pad+0x1ac>)
    a830:	e006      	b.n	a840 <_sercom_get_default_pad+0x140>
    a832:	4b1f      	ldr	r3, [pc, #124]	; (a8b0 <_sercom_get_default_pad+0x1b0>)
    a834:	e004      	b.n	a840 <_sercom_get_default_pad+0x140>
    a836:	4b1f      	ldr	r3, [pc, #124]	; (a8b4 <_sercom_get_default_pad+0x1b4>)
    a838:	e002      	b.n	a840 <_sercom_get_default_pad+0x140>
    a83a:	4b1f      	ldr	r3, [pc, #124]	; (a8b8 <_sercom_get_default_pad+0x1b8>)
    a83c:	e000      	b.n	a840 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    a83e:	2300      	movs	r3, #0
}
    a840:	0018      	movs	r0, r3
    a842:	46bd      	mov	sp, r7
    a844:	b002      	add	sp, #8
    a846:	bd80      	pop	{r7, pc}
    a848:	42001000 	.word	0x42001000
    a84c:	42000800 	.word	0x42000800
    a850:	42000c00 	.word	0x42000c00
    a854:	42001800 	.word	0x42001800
    a858:	42001c00 	.word	0x42001c00
    a85c:	42001400 	.word	0x42001400
    a860:	00040003 	.word	0x00040003
    a864:	00050003 	.word	0x00050003
    a868:	00060003 	.word	0x00060003
    a86c:	00070003 	.word	0x00070003
    a870:	00010003 	.word	0x00010003
    a874:	001e0003 	.word	0x001e0003
    a878:	001f0003 	.word	0x001f0003
    a87c:	00080003 	.word	0x00080003
    a880:	00090003 	.word	0x00090003
    a884:	000a0003 	.word	0x000a0003
    a888:	000b0003 	.word	0x000b0003
    a88c:	00100003 	.word	0x00100003
    a890:	00110003 	.word	0x00110003
    a894:	00120003 	.word	0x00120003
    a898:	00130003 	.word	0x00130003
    a89c:	000c0003 	.word	0x000c0003
    a8a0:	000d0003 	.word	0x000d0003
    a8a4:	000e0003 	.word	0x000e0003
    a8a8:	000f0003 	.word	0x000f0003
    a8ac:	00160003 	.word	0x00160003
    a8b0:	00170003 	.word	0x00170003
    a8b4:	00180003 	.word	0x00180003
    a8b8:	00190003 	.word	0x00190003

0000a8bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    a8bc:	b590      	push	{r4, r7, lr}
    a8be:	b08b      	sub	sp, #44	; 0x2c
    a8c0:	af00      	add	r7, sp, #0
    a8c2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    a8c4:	230c      	movs	r3, #12
    a8c6:	18fb      	adds	r3, r7, r3
    a8c8:	4a0f      	ldr	r2, [pc, #60]	; (a908 <_sercom_get_sercom_inst_index+0x4c>)
    a8ca:	ca13      	ldmia	r2!, {r0, r1, r4}
    a8cc:	c313      	stmia	r3!, {r0, r1, r4}
    a8ce:	ca13      	ldmia	r2!, {r0, r1, r4}
    a8d0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a8d2:	2300      	movs	r3, #0
    a8d4:	627b      	str	r3, [r7, #36]	; 0x24
    a8d6:	e00e      	b.n	a8f6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    a8d8:	230c      	movs	r3, #12
    a8da:	18fb      	adds	r3, r7, r3
    a8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a8de:	0092      	lsls	r2, r2, #2
    a8e0:	58d3      	ldr	r3, [r2, r3]
    a8e2:	001a      	movs	r2, r3
    a8e4:	687b      	ldr	r3, [r7, #4]
    a8e6:	429a      	cmp	r2, r3
    a8e8:	d102      	bne.n	a8f0 <_sercom_get_sercom_inst_index+0x34>
			return i;
    a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a8ec:	b2db      	uxtb	r3, r3
    a8ee:	e006      	b.n	a8fe <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a8f2:	3301      	adds	r3, #1
    a8f4:	627b      	str	r3, [r7, #36]	; 0x24
    a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a8f8:	2b05      	cmp	r3, #5
    a8fa:	d9ed      	bls.n	a8d8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    a8fc:	2300      	movs	r3, #0
}
    a8fe:	0018      	movs	r0, r3
    a900:	46bd      	mov	sp, r7
    a902:	b00b      	add	sp, #44	; 0x2c
    a904:	bd90      	pop	{r4, r7, pc}
    a906:	46c0      	nop			; (mov r8, r8)
    a908:	00014f28 	.word	0x00014f28

0000a90c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    a90c:	b580      	push	{r7, lr}
    a90e:	b086      	sub	sp, #24
    a910:	af00      	add	r7, sp, #0
    a912:	60f8      	str	r0, [r7, #12]
    a914:	60b9      	str	r1, [r7, #8]
    a916:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    a918:	2300      	movs	r3, #0
    a91a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    a91c:	68fb      	ldr	r3, [r7, #12]
    a91e:	2b00      	cmp	r3, #0
    a920:	d012      	beq.n	a948 <_read+0x3c>
		return -1;
    a922:	2301      	movs	r3, #1
    a924:	425b      	negs	r3, r3
    a926:	e013      	b.n	a950 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    a928:	4b0b      	ldr	r3, [pc, #44]	; (a958 <_read+0x4c>)
    a92a:	681a      	ldr	r2, [r3, #0]
    a92c:	4b0b      	ldr	r3, [pc, #44]	; (a95c <_read+0x50>)
    a92e:	681b      	ldr	r3, [r3, #0]
    a930:	68b9      	ldr	r1, [r7, #8]
    a932:	0018      	movs	r0, r3
    a934:	4790      	blx	r2
		ptr++;
    a936:	68bb      	ldr	r3, [r7, #8]
    a938:	3301      	adds	r3, #1
    a93a:	60bb      	str	r3, [r7, #8]
		nChars++;
    a93c:	697b      	ldr	r3, [r7, #20]
    a93e:	3301      	adds	r3, #1
    a940:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    a942:	687b      	ldr	r3, [r7, #4]
    a944:	3b01      	subs	r3, #1
    a946:	607b      	str	r3, [r7, #4]
    a948:	687b      	ldr	r3, [r7, #4]
    a94a:	2b00      	cmp	r3, #0
    a94c:	dcec      	bgt.n	a928 <_read+0x1c>
	}
	return nChars;
    a94e:	697b      	ldr	r3, [r7, #20]
}
    a950:	0018      	movs	r0, r3
    a952:	46bd      	mov	sp, r7
    a954:	b006      	add	sp, #24
    a956:	bd80      	pop	{r7, pc}
    a958:	20000758 	.word	0x20000758
    a95c:	20000760 	.word	0x20000760

0000a960 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    a960:	b580      	push	{r7, lr}
    a962:	b086      	sub	sp, #24
    a964:	af00      	add	r7, sp, #0
    a966:	60f8      	str	r0, [r7, #12]
    a968:	60b9      	str	r1, [r7, #8]
    a96a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    a96c:	2300      	movs	r3, #0
    a96e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    a970:	68fb      	ldr	r3, [r7, #12]
    a972:	2b01      	cmp	r3, #1
    a974:	d01d      	beq.n	a9b2 <_write+0x52>
    a976:	68fb      	ldr	r3, [r7, #12]
    a978:	2b02      	cmp	r3, #2
    a97a:	d01a      	beq.n	a9b2 <_write+0x52>
    a97c:	68fb      	ldr	r3, [r7, #12]
    a97e:	2b03      	cmp	r3, #3
    a980:	d017      	beq.n	a9b2 <_write+0x52>
		return -1;
    a982:	2301      	movs	r3, #1
    a984:	425b      	negs	r3, r3
    a986:	e018      	b.n	a9ba <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    a988:	4b0e      	ldr	r3, [pc, #56]	; (a9c4 <_write+0x64>)
    a98a:	681a      	ldr	r2, [r3, #0]
    a98c:	4b0e      	ldr	r3, [pc, #56]	; (a9c8 <_write+0x68>)
    a98e:	6818      	ldr	r0, [r3, #0]
    a990:	68bb      	ldr	r3, [r7, #8]
    a992:	1c59      	adds	r1, r3, #1
    a994:	60b9      	str	r1, [r7, #8]
    a996:	781b      	ldrb	r3, [r3, #0]
    a998:	0019      	movs	r1, r3
    a99a:	4790      	blx	r2
    a99c:	1e03      	subs	r3, r0, #0
    a99e:	da02      	bge.n	a9a6 <_write+0x46>
			return -1;
    a9a0:	2301      	movs	r3, #1
    a9a2:	425b      	negs	r3, r3
    a9a4:	e009      	b.n	a9ba <_write+0x5a>
		}
		++nChars;
    a9a6:	697b      	ldr	r3, [r7, #20]
    a9a8:	3301      	adds	r3, #1
    a9aa:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    a9ac:	687b      	ldr	r3, [r7, #4]
    a9ae:	3b01      	subs	r3, #1
    a9b0:	607b      	str	r3, [r7, #4]
    a9b2:	687b      	ldr	r3, [r7, #4]
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	d1e7      	bne.n	a988 <_write+0x28>
	}
	return nChars;
    a9b8:	697b      	ldr	r3, [r7, #20]
}
    a9ba:	0018      	movs	r0, r3
    a9bc:	46bd      	mov	sp, r7
    a9be:	b006      	add	sp, #24
    a9c0:	bd80      	pop	{r7, pc}
    a9c2:	46c0      	nop			; (mov r8, r8)
    a9c4:	2000075c 	.word	0x2000075c
    a9c8:	20000760 	.word	0x20000760

0000a9cc <system_gclk_chan_get_config_defaults>:
{
    a9cc:	b580      	push	{r7, lr}
    a9ce:	b082      	sub	sp, #8
    a9d0:	af00      	add	r7, sp, #0
    a9d2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a9d4:	687b      	ldr	r3, [r7, #4]
    a9d6:	2200      	movs	r2, #0
    a9d8:	701a      	strb	r2, [r3, #0]
}
    a9da:	46c0      	nop			; (mov r8, r8)
    a9dc:	46bd      	mov	sp, r7
    a9de:	b002      	add	sp, #8
    a9e0:	bd80      	pop	{r7, pc}
	...

0000a9e4 <system_apb_clock_set_mask>:
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	b082      	sub	sp, #8
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	0002      	movs	r2, r0
    a9ec:	6039      	str	r1, [r7, #0]
    a9ee:	1dfb      	adds	r3, r7, #7
    a9f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a9f2:	1dfb      	adds	r3, r7, #7
    a9f4:	781b      	ldrb	r3, [r3, #0]
    a9f6:	2b01      	cmp	r3, #1
    a9f8:	d00a      	beq.n	aa10 <system_apb_clock_set_mask+0x2c>
    a9fa:	2b02      	cmp	r3, #2
    a9fc:	d00f      	beq.n	aa1e <system_apb_clock_set_mask+0x3a>
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d114      	bne.n	aa2c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    aa02:	4b0e      	ldr	r3, [pc, #56]	; (aa3c <system_apb_clock_set_mask+0x58>)
    aa04:	4a0d      	ldr	r2, [pc, #52]	; (aa3c <system_apb_clock_set_mask+0x58>)
    aa06:	6991      	ldr	r1, [r2, #24]
    aa08:	683a      	ldr	r2, [r7, #0]
    aa0a:	430a      	orrs	r2, r1
    aa0c:	619a      	str	r2, [r3, #24]
			break;
    aa0e:	e00f      	b.n	aa30 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    aa10:	4b0a      	ldr	r3, [pc, #40]	; (aa3c <system_apb_clock_set_mask+0x58>)
    aa12:	4a0a      	ldr	r2, [pc, #40]	; (aa3c <system_apb_clock_set_mask+0x58>)
    aa14:	69d1      	ldr	r1, [r2, #28]
    aa16:	683a      	ldr	r2, [r7, #0]
    aa18:	430a      	orrs	r2, r1
    aa1a:	61da      	str	r2, [r3, #28]
			break;
    aa1c:	e008      	b.n	aa30 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    aa1e:	4b07      	ldr	r3, [pc, #28]	; (aa3c <system_apb_clock_set_mask+0x58>)
    aa20:	4a06      	ldr	r2, [pc, #24]	; (aa3c <system_apb_clock_set_mask+0x58>)
    aa22:	6a11      	ldr	r1, [r2, #32]
    aa24:	683a      	ldr	r2, [r7, #0]
    aa26:	430a      	orrs	r2, r1
    aa28:	621a      	str	r2, [r3, #32]
			break;
    aa2a:	e001      	b.n	aa30 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    aa2c:	2317      	movs	r3, #23
    aa2e:	e000      	b.n	aa32 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    aa30:	2300      	movs	r3, #0
}
    aa32:	0018      	movs	r0, r3
    aa34:	46bd      	mov	sp, r7
    aa36:	b002      	add	sp, #8
    aa38:	bd80      	pop	{r7, pc}
    aa3a:	46c0      	nop			; (mov r8, r8)
    aa3c:	40000400 	.word	0x40000400

0000aa40 <system_pinmux_get_config_defaults>:
{
    aa40:	b580      	push	{r7, lr}
    aa42:	b082      	sub	sp, #8
    aa44:	af00      	add	r7, sp, #0
    aa46:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    aa48:	687b      	ldr	r3, [r7, #4]
    aa4a:	2280      	movs	r2, #128	; 0x80
    aa4c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    aa4e:	687b      	ldr	r3, [r7, #4]
    aa50:	2200      	movs	r2, #0
    aa52:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    aa54:	687b      	ldr	r3, [r7, #4]
    aa56:	2201      	movs	r2, #1
    aa58:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    aa5a:	687b      	ldr	r3, [r7, #4]
    aa5c:	2200      	movs	r2, #0
    aa5e:	70da      	strb	r2, [r3, #3]
}
    aa60:	46c0      	nop			; (mov r8, r8)
    aa62:	46bd      	mov	sp, r7
    aa64:	b002      	add	sp, #8
    aa66:	bd80      	pop	{r7, pc}

0000aa68 <system_is_debugger_present>:
{
    aa68:	b580      	push	{r7, lr}
    aa6a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    aa6c:	4b05      	ldr	r3, [pc, #20]	; (aa84 <system_is_debugger_present+0x1c>)
    aa6e:	789b      	ldrb	r3, [r3, #2]
    aa70:	b2db      	uxtb	r3, r3
    aa72:	001a      	movs	r2, r3
    aa74:	2302      	movs	r3, #2
    aa76:	4013      	ands	r3, r2
    aa78:	1e5a      	subs	r2, r3, #1
    aa7a:	4193      	sbcs	r3, r2
    aa7c:	b2db      	uxtb	r3, r3
}
    aa7e:	0018      	movs	r0, r3
    aa80:	46bd      	mov	sp, r7
    aa82:	bd80      	pop	{r7, pc}
    aa84:	41002000 	.word	0x41002000

0000aa88 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    aa88:	b580      	push	{r7, lr}
    aa8a:	b084      	sub	sp, #16
    aa8c:	af00      	add	r7, sp, #0
    aa8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	681b      	ldr	r3, [r3, #0]
    aa94:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    aa96:	68fb      	ldr	r3, [r7, #12]
    aa98:	69db      	ldr	r3, [r3, #28]
    aa9a:	1e5a      	subs	r2, r3, #1
    aa9c:	4193      	sbcs	r3, r2
    aa9e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    aaa0:	0018      	movs	r0, r3
    aaa2:	46bd      	mov	sp, r7
    aaa4:	b004      	add	sp, #16
    aaa6:	bd80      	pop	{r7, pc}

0000aaa8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    aaa8:	b580      	push	{r7, lr}
    aaaa:	b082      	sub	sp, #8
    aaac:	af00      	add	r7, sp, #0
    aaae:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    aab0:	46c0      	nop			; (mov r8, r8)
    aab2:	687b      	ldr	r3, [r7, #4]
    aab4:	0018      	movs	r0, r3
    aab6:	4b04      	ldr	r3, [pc, #16]	; (aac8 <_usart_wait_for_sync+0x20>)
    aab8:	4798      	blx	r3
    aaba:	1e03      	subs	r3, r0, #0
    aabc:	d1f9      	bne.n	aab2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    aabe:	46c0      	nop			; (mov r8, r8)
    aac0:	46bd      	mov	sp, r7
    aac2:	b002      	add	sp, #8
    aac4:	bd80      	pop	{r7, pc}
    aac6:	46c0      	nop			; (mov r8, r8)
    aac8:	0000aa89 	.word	0x0000aa89

0000aacc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    aacc:	b5b0      	push	{r4, r5, r7, lr}
    aace:	b08c      	sub	sp, #48	; 0x30
    aad0:	af02      	add	r7, sp, #8
    aad2:	6078      	str	r0, [r7, #4]
    aad4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    aad6:	687b      	ldr	r3, [r7, #4]
    aad8:	681b      	ldr	r3, [r3, #0]
    aada:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    aadc:	687b      	ldr	r3, [r7, #4]
    aade:	681b      	ldr	r3, [r3, #0]
    aae0:	0018      	movs	r0, r3
    aae2:	4bab      	ldr	r3, [pc, #684]	; (ad90 <_usart_set_config+0x2c4>)
    aae4:	4798      	blx	r3
    aae6:	0003      	movs	r3, r0
    aae8:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    aaea:	697b      	ldr	r3, [r7, #20]
    aaec:	3314      	adds	r3, #20
    aaee:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    aaf0:	2300      	movs	r3, #0
    aaf2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    aaf4:	2300      	movs	r3, #0
    aaf6:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    aaf8:	230a      	movs	r3, #10
    aafa:	18fb      	adds	r3, r7, r3
    aafc:	2200      	movs	r2, #0
    aafe:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    ab00:	231f      	movs	r3, #31
    ab02:	18fb      	adds	r3, r7, r3
    ab04:	2200      	movs	r2, #0
    ab06:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    ab08:	231e      	movs	r3, #30
    ab0a:	18fb      	adds	r3, r7, r3
    ab0c:	2210      	movs	r2, #16
    ab0e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    ab10:	683b      	ldr	r3, [r7, #0]
    ab12:	8a1b      	ldrh	r3, [r3, #16]
    ab14:	2280      	movs	r2, #128	; 0x80
    ab16:	01d2      	lsls	r2, r2, #7
    ab18:	4293      	cmp	r3, r2
    ab1a:	d01c      	beq.n	ab56 <_usart_set_config+0x8a>
    ab1c:	2280      	movs	r2, #128	; 0x80
    ab1e:	01d2      	lsls	r2, r2, #7
    ab20:	4293      	cmp	r3, r2
    ab22:	dc06      	bgt.n	ab32 <_usart_set_config+0x66>
    ab24:	2b00      	cmp	r3, #0
    ab26:	d00d      	beq.n	ab44 <_usart_set_config+0x78>
    ab28:	2280      	movs	r2, #128	; 0x80
    ab2a:	0192      	lsls	r2, r2, #6
    ab2c:	4293      	cmp	r3, r2
    ab2e:	d024      	beq.n	ab7a <_usart_set_config+0xae>
    ab30:	e035      	b.n	ab9e <_usart_set_config+0xd2>
    ab32:	22c0      	movs	r2, #192	; 0xc0
    ab34:	01d2      	lsls	r2, r2, #7
    ab36:	4293      	cmp	r3, r2
    ab38:	d028      	beq.n	ab8c <_usart_set_config+0xc0>
    ab3a:	2280      	movs	r2, #128	; 0x80
    ab3c:	0212      	lsls	r2, r2, #8
    ab3e:	4293      	cmp	r3, r2
    ab40:	d012      	beq.n	ab68 <_usart_set_config+0x9c>
    ab42:	e02c      	b.n	ab9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    ab44:	231f      	movs	r3, #31
    ab46:	18fb      	adds	r3, r7, r3
    ab48:	2200      	movs	r2, #0
    ab4a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    ab4c:	231e      	movs	r3, #30
    ab4e:	18fb      	adds	r3, r7, r3
    ab50:	2210      	movs	r2, #16
    ab52:	701a      	strb	r2, [r3, #0]
			break;
    ab54:	e023      	b.n	ab9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    ab56:	231f      	movs	r3, #31
    ab58:	18fb      	adds	r3, r7, r3
    ab5a:	2200      	movs	r2, #0
    ab5c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    ab5e:	231e      	movs	r3, #30
    ab60:	18fb      	adds	r3, r7, r3
    ab62:	2208      	movs	r2, #8
    ab64:	701a      	strb	r2, [r3, #0]
			break;
    ab66:	e01a      	b.n	ab9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    ab68:	231f      	movs	r3, #31
    ab6a:	18fb      	adds	r3, r7, r3
    ab6c:	2200      	movs	r2, #0
    ab6e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    ab70:	231e      	movs	r3, #30
    ab72:	18fb      	adds	r3, r7, r3
    ab74:	2203      	movs	r2, #3
    ab76:	701a      	strb	r2, [r3, #0]
			break;
    ab78:	e011      	b.n	ab9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    ab7a:	231f      	movs	r3, #31
    ab7c:	18fb      	adds	r3, r7, r3
    ab7e:	2201      	movs	r2, #1
    ab80:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    ab82:	231e      	movs	r3, #30
    ab84:	18fb      	adds	r3, r7, r3
    ab86:	2210      	movs	r2, #16
    ab88:	701a      	strb	r2, [r3, #0]
			break;
    ab8a:	e008      	b.n	ab9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    ab8c:	231f      	movs	r3, #31
    ab8e:	18fb      	adds	r3, r7, r3
    ab90:	2201      	movs	r2, #1
    ab92:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    ab94:	231e      	movs	r3, #30
    ab96:	18fb      	adds	r3, r7, r3
    ab98:	2208      	movs	r2, #8
    ab9a:	701a      	strb	r2, [r3, #0]
			break;
    ab9c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    ab9e:	683b      	ldr	r3, [r7, #0]
    aba0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    aba2:	683b      	ldr	r3, [r7, #0]
    aba4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    aba6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    aba8:	683b      	ldr	r3, [r7, #0]
    abaa:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    abac:	4313      	orrs	r3, r2
		config->sample_rate |
    abae:	683a      	ldr	r2, [r7, #0]
    abb0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    abb2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    abb4:	683a      	ldr	r2, [r7, #0]
    abb6:	7e12      	ldrb	r2, [r2, #24]
    abb8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    abba:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    abbc:	683a      	ldr	r2, [r7, #0]
    abbe:	2126      	movs	r1, #38	; 0x26
    abc0:	5c52      	ldrb	r2, [r2, r1]
    abc2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    abc4:	4313      	orrs	r3, r2
    abc6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    abc8:	231d      	movs	r3, #29
    abca:	18fb      	adds	r3, r7, r3
    abcc:	2200      	movs	r2, #0
    abce:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    abd0:	683b      	ldr	r3, [r7, #0]
    abd2:	685b      	ldr	r3, [r3, #4]
    abd4:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    abd6:	68fb      	ldr	r3, [r7, #12]
    abd8:	2b00      	cmp	r3, #0
    abda:	d01e      	beq.n	ac1a <_usart_set_config+0x14e>
    abdc:	2280      	movs	r2, #128	; 0x80
    abde:	0552      	lsls	r2, r2, #21
    abe0:	4293      	cmp	r3, r2
    abe2:	d14f      	bne.n	ac84 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    abe4:	683b      	ldr	r3, [r7, #0]
    abe6:	2227      	movs	r2, #39	; 0x27
    abe8:	5c9b      	ldrb	r3, [r3, r2]
    abea:	2201      	movs	r2, #1
    abec:	4053      	eors	r3, r2
    abee:	b2db      	uxtb	r3, r3
    abf0:	2b00      	cmp	r3, #0
    abf2:	d046      	beq.n	ac82 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    abf4:	683b      	ldr	r3, [r7, #0]
    abf6:	6a1d      	ldr	r5, [r3, #32]
    abf8:	693b      	ldr	r3, [r7, #16]
    abfa:	b2db      	uxtb	r3, r3
    abfc:	0018      	movs	r0, r3
    abfe:	4b65      	ldr	r3, [pc, #404]	; (ad94 <_usart_set_config+0x2c8>)
    ac00:	4798      	blx	r3
    ac02:	0001      	movs	r1, r0
    ac04:	231d      	movs	r3, #29
    ac06:	18fc      	adds	r4, r7, r3
    ac08:	230a      	movs	r3, #10
    ac0a:	18fb      	adds	r3, r7, r3
    ac0c:	001a      	movs	r2, r3
    ac0e:	0028      	movs	r0, r5
    ac10:	4b61      	ldr	r3, [pc, #388]	; (ad98 <_usart_set_config+0x2cc>)
    ac12:	4798      	blx	r3
    ac14:	0003      	movs	r3, r0
    ac16:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    ac18:	e033      	b.n	ac82 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    ac1a:	683b      	ldr	r3, [r7, #0]
    ac1c:	2227      	movs	r2, #39	; 0x27
    ac1e:	5c9b      	ldrb	r3, [r3, r2]
    ac20:	2b00      	cmp	r3, #0
    ac22:	d014      	beq.n	ac4e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    ac24:	683b      	ldr	r3, [r7, #0]
    ac26:	6a18      	ldr	r0, [r3, #32]
    ac28:	683b      	ldr	r3, [r7, #0]
    ac2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    ac2c:	231d      	movs	r3, #29
    ac2e:	18fc      	adds	r4, r7, r3
    ac30:	231f      	movs	r3, #31
    ac32:	18fb      	adds	r3, r7, r3
    ac34:	781d      	ldrb	r5, [r3, #0]
    ac36:	230a      	movs	r3, #10
    ac38:	18fa      	adds	r2, r7, r3
    ac3a:	231e      	movs	r3, #30
    ac3c:	18fb      	adds	r3, r7, r3
    ac3e:	781b      	ldrb	r3, [r3, #0]
    ac40:	9300      	str	r3, [sp, #0]
    ac42:	002b      	movs	r3, r5
    ac44:	4d55      	ldr	r5, [pc, #340]	; (ad9c <_usart_set_config+0x2d0>)
    ac46:	47a8      	blx	r5
    ac48:	0003      	movs	r3, r0
    ac4a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    ac4c:	e01a      	b.n	ac84 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    ac4e:	683b      	ldr	r3, [r7, #0]
    ac50:	6a1d      	ldr	r5, [r3, #32]
    ac52:	693b      	ldr	r3, [r7, #16]
    ac54:	b2db      	uxtb	r3, r3
    ac56:	0018      	movs	r0, r3
    ac58:	4b4e      	ldr	r3, [pc, #312]	; (ad94 <_usart_set_config+0x2c8>)
    ac5a:	4798      	blx	r3
				status_code =
    ac5c:	231d      	movs	r3, #29
    ac5e:	18fc      	adds	r4, r7, r3
    ac60:	231f      	movs	r3, #31
    ac62:	18fb      	adds	r3, r7, r3
    ac64:	7819      	ldrb	r1, [r3, #0]
    ac66:	230a      	movs	r3, #10
    ac68:	18fa      	adds	r2, r7, r3
    ac6a:	231e      	movs	r3, #30
    ac6c:	18fb      	adds	r3, r7, r3
    ac6e:	781b      	ldrb	r3, [r3, #0]
    ac70:	9300      	str	r3, [sp, #0]
    ac72:	000b      	movs	r3, r1
    ac74:	0001      	movs	r1, r0
    ac76:	0028      	movs	r0, r5
    ac78:	4d48      	ldr	r5, [pc, #288]	; (ad9c <_usart_set_config+0x2d0>)
    ac7a:	47a8      	blx	r5
    ac7c:	0003      	movs	r3, r0
    ac7e:	7023      	strb	r3, [r4, #0]
			break;
    ac80:	e000      	b.n	ac84 <_usart_set_config+0x1b8>
			break;
    ac82:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    ac84:	231d      	movs	r3, #29
    ac86:	18fb      	adds	r3, r7, r3
    ac88:	781b      	ldrb	r3, [r3, #0]
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d003      	beq.n	ac96 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    ac8e:	231d      	movs	r3, #29
    ac90:	18fb      	adds	r3, r7, r3
    ac92:	781b      	ldrb	r3, [r3, #0]
    ac94:	e077      	b.n	ad86 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    ac96:	683b      	ldr	r3, [r7, #0]
    ac98:	7e5b      	ldrb	r3, [r3, #25]
    ac9a:	2b00      	cmp	r3, #0
    ac9c:	d003      	beq.n	aca6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    ac9e:	683b      	ldr	r3, [r7, #0]
    aca0:	7e9a      	ldrb	r2, [r3, #26]
    aca2:	69bb      	ldr	r3, [r7, #24]
    aca4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    aca6:	687b      	ldr	r3, [r7, #4]
    aca8:	0018      	movs	r0, r3
    acaa:	4b3d      	ldr	r3, [pc, #244]	; (ada0 <_usart_set_config+0x2d4>)
    acac:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    acae:	230a      	movs	r3, #10
    acb0:	18fb      	adds	r3, r7, r3
    acb2:	881a      	ldrh	r2, [r3, #0]
    acb4:	69bb      	ldr	r3, [r7, #24]
    acb6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    acb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    acba:	68fb      	ldr	r3, [r7, #12]
    acbc:	4313      	orrs	r3, r2
    acbe:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    acc0:	683b      	ldr	r3, [r7, #0]
    acc2:	2227      	movs	r2, #39	; 0x27
    acc4:	5c9b      	ldrb	r3, [r3, r2]
    acc6:	2201      	movs	r2, #1
    acc8:	4053      	eors	r3, r2
    acca:	b2db      	uxtb	r3, r3
    accc:	2b00      	cmp	r3, #0
    acce:	d003      	beq.n	acd8 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    acd2:	2204      	movs	r2, #4
    acd4:	4313      	orrs	r3, r2
    acd6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    acd8:	683b      	ldr	r3, [r7, #0]
    acda:	7e5b      	ldrb	r3, [r3, #25]
    acdc:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    acde:	683b      	ldr	r3, [r7, #0]
    ace0:	7f1b      	ldrb	r3, [r3, #28]
    ace2:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ace4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ace6:	683b      	ldr	r3, [r7, #0]
    ace8:	7f5b      	ldrb	r3, [r3, #29]
    acea:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    acec:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    acee:	683b      	ldr	r3, [r7, #0]
    acf0:	2124      	movs	r1, #36	; 0x24
    acf2:	5c5b      	ldrb	r3, [r3, r1]
    acf4:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    acf6:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    acf8:	683b      	ldr	r3, [r7, #0]
    acfa:	2125      	movs	r1, #37	; 0x25
    acfc:	5c5b      	ldrb	r3, [r3, r1]
    acfe:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ad00:	4313      	orrs	r3, r2
	ctrlb =  
    ad02:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    ad04:	683b      	ldr	r3, [r7, #0]
    ad06:	7a9b      	ldrb	r3, [r3, #10]
    ad08:	001a      	movs	r2, r3
    ad0a:	6a3b      	ldr	r3, [r7, #32]
    ad0c:	4313      	orrs	r3, r2
    ad0e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    ad10:	683b      	ldr	r3, [r7, #0]
    ad12:	7adb      	ldrb	r3, [r3, #11]
    ad14:	001a      	movs	r2, r3
    ad16:	6a3b      	ldr	r3, [r7, #32]
    ad18:	4313      	orrs	r3, r2
    ad1a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    ad1c:	683b      	ldr	r3, [r7, #0]
    ad1e:	891b      	ldrh	r3, [r3, #8]
    ad20:	2bff      	cmp	r3, #255	; 0xff
    ad22:	d00b      	beq.n	ad3c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ad26:	2280      	movs	r2, #128	; 0x80
    ad28:	0452      	lsls	r2, r2, #17
    ad2a:	4313      	orrs	r3, r2
    ad2c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    ad2e:	683b      	ldr	r3, [r7, #0]
    ad30:	891b      	ldrh	r3, [r3, #8]
    ad32:	001a      	movs	r2, r3
    ad34:	6a3b      	ldr	r3, [r7, #32]
    ad36:	4313      	orrs	r3, r2
    ad38:	623b      	str	r3, [r7, #32]
    ad3a:	e008      	b.n	ad4e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    ad3c:	683b      	ldr	r3, [r7, #0]
    ad3e:	7edb      	ldrb	r3, [r3, #27]
    ad40:	2b00      	cmp	r3, #0
    ad42:	d004      	beq.n	ad4e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ad46:	2280      	movs	r2, #128	; 0x80
    ad48:	04d2      	lsls	r2, r2, #19
    ad4a:	4313      	orrs	r3, r2
    ad4c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    ad4e:	683b      	ldr	r3, [r7, #0]
    ad50:	222c      	movs	r2, #44	; 0x2c
    ad52:	5c9b      	ldrb	r3, [r3, r2]
    ad54:	2b00      	cmp	r3, #0
    ad56:	d103      	bne.n	ad60 <_usart_set_config+0x294>
    ad58:	4b12      	ldr	r3, [pc, #72]	; (ada4 <_usart_set_config+0x2d8>)
    ad5a:	4798      	blx	r3
    ad5c:	1e03      	subs	r3, r0, #0
    ad5e:	d003      	beq.n	ad68 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ad62:	2280      	movs	r2, #128	; 0x80
    ad64:	4313      	orrs	r3, r2
    ad66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ad68:	687b      	ldr	r3, [r7, #4]
    ad6a:	0018      	movs	r0, r3
    ad6c:	4b0c      	ldr	r3, [pc, #48]	; (ada0 <_usart_set_config+0x2d4>)
    ad6e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    ad70:	69bb      	ldr	r3, [r7, #24]
    ad72:	6a3a      	ldr	r2, [r7, #32]
    ad74:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ad76:	687b      	ldr	r3, [r7, #4]
    ad78:	0018      	movs	r0, r3
    ad7a:	4b09      	ldr	r3, [pc, #36]	; (ada0 <_usart_set_config+0x2d4>)
    ad7c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    ad7e:	69bb      	ldr	r3, [r7, #24]
    ad80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ad82:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    ad84:	2300      	movs	r3, #0
}
    ad86:	0018      	movs	r0, r3
    ad88:	46bd      	mov	sp, r7
    ad8a:	b00a      	add	sp, #40	; 0x28
    ad8c:	bdb0      	pop	{r4, r5, r7, pc}
    ad8e:	46c0      	nop			; (mov r8, r8)
    ad90:	0000a8bd 	.word	0x0000a8bd
    ad94:	0000c60d 	.word	0x0000c60d
    ad98:	0000a437 	.word	0x0000a437
    ad9c:	0000a4b5 	.word	0x0000a4b5
    ada0:	0000aaa9 	.word	0x0000aaa9
    ada4:	0000aa69 	.word	0x0000aa69

0000ada8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    ada8:	b590      	push	{r4, r7, lr}
    adaa:	b093      	sub	sp, #76	; 0x4c
    adac:	af00      	add	r7, sp, #0
    adae:	60f8      	str	r0, [r7, #12]
    adb0:	60b9      	str	r1, [r7, #8]
    adb2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    adb4:	233b      	movs	r3, #59	; 0x3b
    adb6:	18fb      	adds	r3, r7, r3
    adb8:	2200      	movs	r2, #0
    adba:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    adbc:	68fb      	ldr	r3, [r7, #12]
    adbe:	68ba      	ldr	r2, [r7, #8]
    adc0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    adc2:	68fb      	ldr	r3, [r7, #12]
    adc4:	681b      	ldr	r3, [r3, #0]
    adc6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    adc8:	68fb      	ldr	r3, [r7, #12]
    adca:	681b      	ldr	r3, [r3, #0]
    adcc:	0018      	movs	r0, r3
    adce:	4b86      	ldr	r3, [pc, #536]	; (afe8 <usart_init+0x240>)
    add0:	4798      	blx	r3
    add2:	0003      	movs	r3, r0
    add4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    add8:	3302      	adds	r3, #2
    adda:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    adde:	3314      	adds	r3, #20
    ade0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    ade2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ade4:	681b      	ldr	r3, [r3, #0]
    ade6:	2201      	movs	r2, #1
    ade8:	4013      	ands	r3, r2
    adea:	d001      	beq.n	adf0 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    adec:	2305      	movs	r3, #5
    adee:	e0f6      	b.n	afde <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    adf2:	681b      	ldr	r3, [r3, #0]
    adf4:	2202      	movs	r2, #2
    adf6:	4013      	ands	r3, r2
    adf8:	d001      	beq.n	adfe <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    adfa:	231c      	movs	r3, #28
    adfc:	e0ef      	b.n	afde <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    adfe:	2201      	movs	r2, #1
    ae00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae02:	409a      	lsls	r2, r3
    ae04:	0013      	movs	r3, r2
    ae06:	0019      	movs	r1, r3
    ae08:	2002      	movs	r0, #2
    ae0a:	4b78      	ldr	r3, [pc, #480]	; (afec <usart_init+0x244>)
    ae0c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    ae0e:	2324      	movs	r3, #36	; 0x24
    ae10:	18fb      	adds	r3, r7, r3
    ae12:	0018      	movs	r0, r3
    ae14:	4b76      	ldr	r3, [pc, #472]	; (aff0 <usart_init+0x248>)
    ae16:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    ae18:	687b      	ldr	r3, [r7, #4]
    ae1a:	222d      	movs	r2, #45	; 0x2d
    ae1c:	5c9a      	ldrb	r2, [r3, r2]
    ae1e:	2324      	movs	r3, #36	; 0x24
    ae20:	18fb      	adds	r3, r7, r3
    ae22:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ae24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ae26:	b2db      	uxtb	r3, r3
    ae28:	2224      	movs	r2, #36	; 0x24
    ae2a:	18ba      	adds	r2, r7, r2
    ae2c:	0011      	movs	r1, r2
    ae2e:	0018      	movs	r0, r3
    ae30:	4b70      	ldr	r3, [pc, #448]	; (aff4 <usart_init+0x24c>)
    ae32:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ae36:	b2db      	uxtb	r3, r3
    ae38:	0018      	movs	r0, r3
    ae3a:	4b6f      	ldr	r3, [pc, #444]	; (aff8 <usart_init+0x250>)
    ae3c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    ae3e:	687b      	ldr	r3, [r7, #4]
    ae40:	222d      	movs	r2, #45	; 0x2d
    ae42:	5c9b      	ldrb	r3, [r3, r2]
    ae44:	2100      	movs	r1, #0
    ae46:	0018      	movs	r0, r3
    ae48:	4b6c      	ldr	r3, [pc, #432]	; (affc <usart_init+0x254>)
    ae4a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    ae4c:	687b      	ldr	r3, [r7, #4]
    ae4e:	7ada      	ldrb	r2, [r3, #11]
    ae50:	68fb      	ldr	r3, [r7, #12]
    ae52:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    ae54:	687b      	ldr	r3, [r7, #4]
    ae56:	2224      	movs	r2, #36	; 0x24
    ae58:	5c9a      	ldrb	r2, [r3, r2]
    ae5a:	68fb      	ldr	r3, [r7, #12]
    ae5c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    ae5e:	687b      	ldr	r3, [r7, #4]
    ae60:	2225      	movs	r2, #37	; 0x25
    ae62:	5c9a      	ldrb	r2, [r3, r2]
    ae64:	68fb      	ldr	r3, [r7, #12]
    ae66:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    ae68:	687b      	ldr	r3, [r7, #4]
    ae6a:	7eda      	ldrb	r2, [r3, #27]
    ae6c:	68fb      	ldr	r3, [r7, #12]
    ae6e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    ae70:	687b      	ldr	r3, [r7, #4]
    ae72:	7f1a      	ldrb	r2, [r3, #28]
    ae74:	68fb      	ldr	r3, [r7, #12]
    ae76:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    ae78:	233b      	movs	r3, #59	; 0x3b
    ae7a:	18fc      	adds	r4, r7, r3
    ae7c:	687a      	ldr	r2, [r7, #4]
    ae7e:	68fb      	ldr	r3, [r7, #12]
    ae80:	0011      	movs	r1, r2
    ae82:	0018      	movs	r0, r3
    ae84:	4b5e      	ldr	r3, [pc, #376]	; (b000 <usart_init+0x258>)
    ae86:	4798      	blx	r3
    ae88:	0003      	movs	r3, r0
    ae8a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    ae8c:	233b      	movs	r3, #59	; 0x3b
    ae8e:	18fb      	adds	r3, r7, r3
    ae90:	781b      	ldrb	r3, [r3, #0]
    ae92:	2b00      	cmp	r3, #0
    ae94:	d003      	beq.n	ae9e <usart_init+0xf6>
		return status_code;
    ae96:	233b      	movs	r3, #59	; 0x3b
    ae98:	18fb      	adds	r3, r7, r3
    ae9a:	781b      	ldrb	r3, [r3, #0]
    ae9c:	e09f      	b.n	afde <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    ae9e:	2320      	movs	r3, #32
    aea0:	18fb      	adds	r3, r7, r3
    aea2:	0018      	movs	r0, r3
    aea4:	4b57      	ldr	r3, [pc, #348]	; (b004 <usart_init+0x25c>)
    aea6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    aea8:	2320      	movs	r3, #32
    aeaa:	18fb      	adds	r3, r7, r3
    aeac:	2200      	movs	r2, #0
    aeae:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    aeb0:	2320      	movs	r3, #32
    aeb2:	18fb      	adds	r3, r7, r3
    aeb4:	2200      	movs	r2, #0
    aeb6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    aeb8:	687b      	ldr	r3, [r7, #4]
    aeba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    aebc:	2310      	movs	r3, #16
    aebe:	18fb      	adds	r3, r7, r3
    aec0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    aec2:	687b      	ldr	r3, [r7, #4]
    aec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    aec6:	2310      	movs	r3, #16
    aec8:	18fb      	adds	r3, r7, r3
    aeca:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    aecc:	687b      	ldr	r3, [r7, #4]
    aece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    aed0:	2310      	movs	r3, #16
    aed2:	18fb      	adds	r3, r7, r3
    aed4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    aed6:	687b      	ldr	r3, [r7, #4]
    aed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    aeda:	2310      	movs	r3, #16
    aedc:	18fb      	adds	r3, r7, r3
    aede:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    aee0:	2347      	movs	r3, #71	; 0x47
    aee2:	18fb      	adds	r3, r7, r3
    aee4:	2200      	movs	r2, #0
    aee6:	701a      	strb	r2, [r3, #0]
    aee8:	e02c      	b.n	af44 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    aeea:	2347      	movs	r3, #71	; 0x47
    aeec:	18fb      	adds	r3, r7, r3
    aeee:	781a      	ldrb	r2, [r3, #0]
    aef0:	2310      	movs	r3, #16
    aef2:	18fb      	adds	r3, r7, r3
    aef4:	0092      	lsls	r2, r2, #2
    aef6:	58d3      	ldr	r3, [r2, r3]
    aef8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    aefa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aefc:	2b00      	cmp	r3, #0
    aefe:	d109      	bne.n	af14 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    af00:	2347      	movs	r3, #71	; 0x47
    af02:	18fb      	adds	r3, r7, r3
    af04:	781a      	ldrb	r2, [r3, #0]
    af06:	68bb      	ldr	r3, [r7, #8]
    af08:	0011      	movs	r1, r2
    af0a:	0018      	movs	r0, r3
    af0c:	4b3e      	ldr	r3, [pc, #248]	; (b008 <usart_init+0x260>)
    af0e:	4798      	blx	r3
    af10:	0003      	movs	r3, r0
    af12:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    af14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af16:	3301      	adds	r3, #1
    af18:	d00d      	beq.n	af36 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    af1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af1c:	b2da      	uxtb	r2, r3
    af1e:	2320      	movs	r3, #32
    af20:	18fb      	adds	r3, r7, r3
    af22:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    af24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af26:	0c1b      	lsrs	r3, r3, #16
    af28:	b2db      	uxtb	r3, r3
    af2a:	2220      	movs	r2, #32
    af2c:	18ba      	adds	r2, r7, r2
    af2e:	0011      	movs	r1, r2
    af30:	0018      	movs	r0, r3
    af32:	4b36      	ldr	r3, [pc, #216]	; (b00c <usart_init+0x264>)
    af34:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    af36:	2347      	movs	r3, #71	; 0x47
    af38:	18fb      	adds	r3, r7, r3
    af3a:	781a      	ldrb	r2, [r3, #0]
    af3c:	2347      	movs	r3, #71	; 0x47
    af3e:	18fb      	adds	r3, r7, r3
    af40:	3201      	adds	r2, #1
    af42:	701a      	strb	r2, [r3, #0]
    af44:	2347      	movs	r3, #71	; 0x47
    af46:	18fb      	adds	r3, r7, r3
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	2b03      	cmp	r3, #3
    af4c:	d9cd      	bls.n	aeea <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    af4e:	2300      	movs	r3, #0
    af50:	63fb      	str	r3, [r7, #60]	; 0x3c
    af52:	e00a      	b.n	af6a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    af54:	68fa      	ldr	r2, [r7, #12]
    af56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af58:	3302      	adds	r3, #2
    af5a:	009b      	lsls	r3, r3, #2
    af5c:	18d3      	adds	r3, r2, r3
    af5e:	3304      	adds	r3, #4
    af60:	2200      	movs	r2, #0
    af62:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    af64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af66:	3301      	adds	r3, #1
    af68:	63fb      	str	r3, [r7, #60]	; 0x3c
    af6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af6c:	2b05      	cmp	r3, #5
    af6e:	d9f1      	bls.n	af54 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    af70:	68fb      	ldr	r3, [r7, #12]
    af72:	2200      	movs	r2, #0
    af74:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    af76:	68fb      	ldr	r3, [r7, #12]
    af78:	2200      	movs	r2, #0
    af7a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    af7c:	68fb      	ldr	r3, [r7, #12]
    af7e:	2200      	movs	r2, #0
    af80:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    af82:	68fb      	ldr	r3, [r7, #12]
    af84:	2200      	movs	r2, #0
    af86:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    af88:	68fb      	ldr	r3, [r7, #12]
    af8a:	2230      	movs	r2, #48	; 0x30
    af8c:	2100      	movs	r1, #0
    af8e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    af90:	68fb      	ldr	r3, [r7, #12]
    af92:	2231      	movs	r2, #49	; 0x31
    af94:	2100      	movs	r1, #0
    af96:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    af98:	68fb      	ldr	r3, [r7, #12]
    af9a:	2232      	movs	r2, #50	; 0x32
    af9c:	2100      	movs	r1, #0
    af9e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    afa0:	68fb      	ldr	r3, [r7, #12]
    afa2:	2233      	movs	r2, #51	; 0x33
    afa4:	2100      	movs	r1, #0
    afa6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    afa8:	68fb      	ldr	r3, [r7, #12]
    afaa:	681b      	ldr	r3, [r3, #0]
    afac:	2227      	movs	r2, #39	; 0x27
    afae:	18bc      	adds	r4, r7, r2
    afb0:	0018      	movs	r0, r3
    afb2:	4b0d      	ldr	r3, [pc, #52]	; (afe8 <usart_init+0x240>)
    afb4:	4798      	blx	r3
    afb6:	0003      	movs	r3, r0
    afb8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    afba:	4a15      	ldr	r2, [pc, #84]	; (b010 <usart_init+0x268>)
    afbc:	2327      	movs	r3, #39	; 0x27
    afbe:	18fb      	adds	r3, r7, r3
    afc0:	781b      	ldrb	r3, [r3, #0]
    afc2:	0011      	movs	r1, r2
    afc4:	0018      	movs	r0, r3
    afc6:	4b13      	ldr	r3, [pc, #76]	; (b014 <usart_init+0x26c>)
    afc8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    afca:	2327      	movs	r3, #39	; 0x27
    afcc:	18fb      	adds	r3, r7, r3
    afce:	781a      	ldrb	r2, [r3, #0]
    afd0:	4b11      	ldr	r3, [pc, #68]	; (b018 <usart_init+0x270>)
    afd2:	0092      	lsls	r2, r2, #2
    afd4:	68f9      	ldr	r1, [r7, #12]
    afd6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    afd8:	233b      	movs	r3, #59	; 0x3b
    afda:	18fb      	adds	r3, r7, r3
    afdc:	781b      	ldrb	r3, [r3, #0]
}
    afde:	0018      	movs	r0, r3
    afe0:	46bd      	mov	sp, r7
    afe2:	b013      	add	sp, #76	; 0x4c
    afe4:	bd90      	pop	{r4, r7, pc}
    afe6:	46c0      	nop			; (mov r8, r8)
    afe8:	0000a8bd 	.word	0x0000a8bd
    afec:	0000a9e5 	.word	0x0000a9e5
    aff0:	0000a9cd 	.word	0x0000a9cd
    aff4:	0000c4e9 	.word	0x0000c4e9
    aff8:	0000c52d 	.word	0x0000c52d
    affc:	0000a675 	.word	0x0000a675
    b000:	0000aacd 	.word	0x0000aacd
    b004:	0000aa41 	.word	0x0000aa41
    b008:	0000a701 	.word	0x0000a701
    b00c:	0000c7d5 	.word	0x0000c7d5
    b010:	0000b1b1 	.word	0x0000b1b1
    b014:	0000b505 	.word	0x0000b505
    b018:	20000764 	.word	0x20000764

0000b01c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    b01c:	b580      	push	{r7, lr}
    b01e:	b084      	sub	sp, #16
    b020:	af00      	add	r7, sp, #0
    b022:	6078      	str	r0, [r7, #4]
    b024:	000a      	movs	r2, r1
    b026:	1cbb      	adds	r3, r7, #2
    b028:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b02a:	687b      	ldr	r3, [r7, #4]
    b02c:	681b      	ldr	r3, [r3, #0]
    b02e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    b030:	687b      	ldr	r3, [r7, #4]
    b032:	79db      	ldrb	r3, [r3, #7]
    b034:	2201      	movs	r2, #1
    b036:	4053      	eors	r3, r2
    b038:	b2db      	uxtb	r3, r3
    b03a:	2b00      	cmp	r3, #0
    b03c:	d001      	beq.n	b042 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    b03e:	231c      	movs	r3, #28
    b040:	e017      	b.n	b072 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    b042:	687b      	ldr	r3, [r7, #4]
    b044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b046:	b29b      	uxth	r3, r3
    b048:	2b00      	cmp	r3, #0
    b04a:	d001      	beq.n	b050 <usart_write_wait+0x34>
		return STATUS_BUSY;
    b04c:	2305      	movs	r3, #5
    b04e:	e010      	b.n	b072 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b050:	687b      	ldr	r3, [r7, #4]
    b052:	0018      	movs	r0, r3
    b054:	4b09      	ldr	r3, [pc, #36]	; (b07c <usart_write_wait+0x60>)
    b056:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    b058:	68fb      	ldr	r3, [r7, #12]
    b05a:	1cba      	adds	r2, r7, #2
    b05c:	8812      	ldrh	r2, [r2, #0]
    b05e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    b060:	46c0      	nop			; (mov r8, r8)
    b062:	68fb      	ldr	r3, [r7, #12]
    b064:	7e1b      	ldrb	r3, [r3, #24]
    b066:	b2db      	uxtb	r3, r3
    b068:	001a      	movs	r2, r3
    b06a:	2302      	movs	r3, #2
    b06c:	4013      	ands	r3, r2
    b06e:	d0f8      	beq.n	b062 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    b070:	2300      	movs	r3, #0
}
    b072:	0018      	movs	r0, r3
    b074:	46bd      	mov	sp, r7
    b076:	b004      	add	sp, #16
    b078:	bd80      	pop	{r7, pc}
    b07a:	46c0      	nop			; (mov r8, r8)
    b07c:	0000aaa9 	.word	0x0000aaa9

0000b080 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    b080:	b580      	push	{r7, lr}
    b082:	b084      	sub	sp, #16
    b084:	af00      	add	r7, sp, #0
    b086:	6078      	str	r0, [r7, #4]
    b088:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b08a:	687b      	ldr	r3, [r7, #4]
    b08c:	681b      	ldr	r3, [r3, #0]
    b08e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	799b      	ldrb	r3, [r3, #6]
    b094:	2201      	movs	r2, #1
    b096:	4053      	eors	r3, r2
    b098:	b2db      	uxtb	r3, r3
    b09a:	2b00      	cmp	r3, #0
    b09c:	d001      	beq.n	b0a2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    b09e:	231c      	movs	r3, #28
    b0a0:	e05e      	b.n	b160 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    b0a2:	687b      	ldr	r3, [r7, #4]
    b0a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b0a6:	b29b      	uxth	r3, r3
    b0a8:	2b00      	cmp	r3, #0
    b0aa:	d001      	beq.n	b0b0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    b0ac:	2305      	movs	r3, #5
    b0ae:	e057      	b.n	b160 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    b0b0:	68fb      	ldr	r3, [r7, #12]
    b0b2:	7e1b      	ldrb	r3, [r3, #24]
    b0b4:	b2db      	uxtb	r3, r3
    b0b6:	001a      	movs	r2, r3
    b0b8:	2304      	movs	r3, #4
    b0ba:	4013      	ands	r3, r2
    b0bc:	d101      	bne.n	b0c2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    b0be:	2305      	movs	r3, #5
    b0c0:	e04e      	b.n	b160 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b0c2:	687b      	ldr	r3, [r7, #4]
    b0c4:	0018      	movs	r0, r3
    b0c6:	4b28      	ldr	r3, [pc, #160]	; (b168 <usart_read_wait+0xe8>)
    b0c8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    b0ca:	68fb      	ldr	r3, [r7, #12]
    b0cc:	8b5b      	ldrh	r3, [r3, #26]
    b0ce:	b29b      	uxth	r3, r3
    b0d0:	b2da      	uxtb	r2, r3
    b0d2:	230b      	movs	r3, #11
    b0d4:	18fb      	adds	r3, r7, r3
    b0d6:	213f      	movs	r1, #63	; 0x3f
    b0d8:	400a      	ands	r2, r1
    b0da:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    b0dc:	230b      	movs	r3, #11
    b0de:	18fb      	adds	r3, r7, r3
    b0e0:	781b      	ldrb	r3, [r3, #0]
    b0e2:	2b00      	cmp	r3, #0
    b0e4:	d036      	beq.n	b154 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    b0e6:	230b      	movs	r3, #11
    b0e8:	18fb      	adds	r3, r7, r3
    b0ea:	781b      	ldrb	r3, [r3, #0]
    b0ec:	2202      	movs	r2, #2
    b0ee:	4013      	ands	r3, r2
    b0f0:	d004      	beq.n	b0fc <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    b0f2:	68fb      	ldr	r3, [r7, #12]
    b0f4:	2202      	movs	r2, #2
    b0f6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    b0f8:	231a      	movs	r3, #26
    b0fa:	e031      	b.n	b160 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    b0fc:	230b      	movs	r3, #11
    b0fe:	18fb      	adds	r3, r7, r3
    b100:	781b      	ldrb	r3, [r3, #0]
    b102:	2204      	movs	r2, #4
    b104:	4013      	ands	r3, r2
    b106:	d004      	beq.n	b112 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    b108:	68fb      	ldr	r3, [r7, #12]
    b10a:	2204      	movs	r2, #4
    b10c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    b10e:	231e      	movs	r3, #30
    b110:	e026      	b.n	b160 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    b112:	230b      	movs	r3, #11
    b114:	18fb      	adds	r3, r7, r3
    b116:	781b      	ldrb	r3, [r3, #0]
    b118:	2201      	movs	r2, #1
    b11a:	4013      	ands	r3, r2
    b11c:	d004      	beq.n	b128 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    b11e:	68fb      	ldr	r3, [r7, #12]
    b120:	2201      	movs	r2, #1
    b122:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    b124:	2313      	movs	r3, #19
    b126:	e01b      	b.n	b160 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    b128:	230b      	movs	r3, #11
    b12a:	18fb      	adds	r3, r7, r3
    b12c:	781b      	ldrb	r3, [r3, #0]
    b12e:	2210      	movs	r2, #16
    b130:	4013      	ands	r3, r2
    b132:	d004      	beq.n	b13e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    b134:	68fb      	ldr	r3, [r7, #12]
    b136:	2210      	movs	r2, #16
    b138:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    b13a:	2342      	movs	r3, #66	; 0x42
    b13c:	e010      	b.n	b160 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    b13e:	230b      	movs	r3, #11
    b140:	18fb      	adds	r3, r7, r3
    b142:	781b      	ldrb	r3, [r3, #0]
    b144:	2220      	movs	r2, #32
    b146:	4013      	ands	r3, r2
    b148:	d004      	beq.n	b154 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    b14a:	68fb      	ldr	r3, [r7, #12]
    b14c:	2220      	movs	r2, #32
    b14e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    b150:	2341      	movs	r3, #65	; 0x41
    b152:	e005      	b.n	b160 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    b154:	68fb      	ldr	r3, [r7, #12]
    b156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b158:	b29a      	uxth	r2, r3
    b15a:	683b      	ldr	r3, [r7, #0]
    b15c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    b15e:	2300      	movs	r3, #0
}
    b160:	0018      	movs	r0, r3
    b162:	46bd      	mov	sp, r7
    b164:	b004      	add	sp, #16
    b166:	bd80      	pop	{r7, pc}
    b168:	0000aaa9 	.word	0x0000aaa9

0000b16c <usart_is_syncing>:
{
    b16c:	b580      	push	{r7, lr}
    b16e:	b084      	sub	sp, #16
    b170:	af00      	add	r7, sp, #0
    b172:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b174:	687b      	ldr	r3, [r7, #4]
    b176:	681b      	ldr	r3, [r3, #0]
    b178:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    b17a:	68fb      	ldr	r3, [r7, #12]
    b17c:	69db      	ldr	r3, [r3, #28]
    b17e:	1e5a      	subs	r2, r3, #1
    b180:	4193      	sbcs	r3, r2
    b182:	b2db      	uxtb	r3, r3
}
    b184:	0018      	movs	r0, r3
    b186:	46bd      	mov	sp, r7
    b188:	b004      	add	sp, #16
    b18a:	bd80      	pop	{r7, pc}

0000b18c <_usart_wait_for_sync>:
{
    b18c:	b580      	push	{r7, lr}
    b18e:	b082      	sub	sp, #8
    b190:	af00      	add	r7, sp, #0
    b192:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    b194:	46c0      	nop			; (mov r8, r8)
    b196:	687b      	ldr	r3, [r7, #4]
    b198:	0018      	movs	r0, r3
    b19a:	4b04      	ldr	r3, [pc, #16]	; (b1ac <_usart_wait_for_sync+0x20>)
    b19c:	4798      	blx	r3
    b19e:	1e03      	subs	r3, r0, #0
    b1a0:	d1f9      	bne.n	b196 <_usart_wait_for_sync+0xa>
}
    b1a2:	46c0      	nop			; (mov r8, r8)
    b1a4:	46bd      	mov	sp, r7
    b1a6:	b002      	add	sp, #8
    b1a8:	bd80      	pop	{r7, pc}
    b1aa:	46c0      	nop			; (mov r8, r8)
    b1ac:	0000b16d 	.word	0x0000b16d

0000b1b0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    b1b0:	b580      	push	{r7, lr}
    b1b2:	b088      	sub	sp, #32
    b1b4:	af00      	add	r7, sp, #0
    b1b6:	0002      	movs	r2, r0
    b1b8:	1dfb      	adds	r3, r7, #7
    b1ba:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    b1bc:	1dfb      	adds	r3, r7, #7
    b1be:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    b1c0:	4ba3      	ldr	r3, [pc, #652]	; (b450 <_usart_interrupt_handler+0x2a0>)
    b1c2:	0092      	lsls	r2, r2, #2
    b1c4:	58d3      	ldr	r3, [r2, r3]
    b1c6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    b1c8:	69bb      	ldr	r3, [r7, #24]
    b1ca:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    b1cc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    b1ce:	69bb      	ldr	r3, [r7, #24]
    b1d0:	0018      	movs	r0, r3
    b1d2:	4ba0      	ldr	r3, [pc, #640]	; (b454 <_usart_interrupt_handler+0x2a4>)
    b1d4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    b1d6:	697b      	ldr	r3, [r7, #20]
    b1d8:	7e1b      	ldrb	r3, [r3, #24]
    b1da:	b2da      	uxtb	r2, r3
    b1dc:	2312      	movs	r3, #18
    b1de:	18fb      	adds	r3, r7, r3
    b1e0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    b1e2:	697b      	ldr	r3, [r7, #20]
    b1e4:	7d9b      	ldrb	r3, [r3, #22]
    b1e6:	b2db      	uxtb	r3, r3
    b1e8:	b29a      	uxth	r2, r3
    b1ea:	2312      	movs	r3, #18
    b1ec:	18fb      	adds	r3, r7, r3
    b1ee:	2112      	movs	r1, #18
    b1f0:	1879      	adds	r1, r7, r1
    b1f2:	8809      	ldrh	r1, [r1, #0]
    b1f4:	400a      	ands	r2, r1
    b1f6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    b1f8:	69bb      	ldr	r3, [r7, #24]
    b1fa:	2230      	movs	r2, #48	; 0x30
    b1fc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    b1fe:	69ba      	ldr	r2, [r7, #24]
    b200:	2131      	movs	r1, #49	; 0x31
    b202:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    b204:	4013      	ands	r3, r2
    b206:	b2da      	uxtb	r2, r3
    b208:	2310      	movs	r3, #16
    b20a:	18fb      	adds	r3, r7, r3
    b20c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    b20e:	2312      	movs	r3, #18
    b210:	18fb      	adds	r3, r7, r3
    b212:	881b      	ldrh	r3, [r3, #0]
    b214:	2201      	movs	r2, #1
    b216:	4013      	ands	r3, r2
    b218:	d044      	beq.n	b2a4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    b21a:	69bb      	ldr	r3, [r7, #24]
    b21c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b21e:	b29b      	uxth	r3, r3
    b220:	2b00      	cmp	r3, #0
    b222:	d03c      	beq.n	b29e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    b224:	69bb      	ldr	r3, [r7, #24]
    b226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b228:	781b      	ldrb	r3, [r3, #0]
    b22a:	b2da      	uxtb	r2, r3
    b22c:	231c      	movs	r3, #28
    b22e:	18fb      	adds	r3, r7, r3
    b230:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    b232:	69bb      	ldr	r3, [r7, #24]
    b234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b236:	1c5a      	adds	r2, r3, #1
    b238:	69bb      	ldr	r3, [r7, #24]
    b23a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    b23c:	69bb      	ldr	r3, [r7, #24]
    b23e:	795b      	ldrb	r3, [r3, #5]
    b240:	2b01      	cmp	r3, #1
    b242:	d113      	bne.n	b26c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    b244:	69bb      	ldr	r3, [r7, #24]
    b246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	b2db      	uxtb	r3, r3
    b24c:	021b      	lsls	r3, r3, #8
    b24e:	b21a      	sxth	r2, r3
    b250:	231c      	movs	r3, #28
    b252:	18fb      	adds	r3, r7, r3
    b254:	2100      	movs	r1, #0
    b256:	5e5b      	ldrsh	r3, [r3, r1]
    b258:	4313      	orrs	r3, r2
    b25a:	b21a      	sxth	r2, r3
    b25c:	231c      	movs	r3, #28
    b25e:	18fb      	adds	r3, r7, r3
    b260:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    b262:	69bb      	ldr	r3, [r7, #24]
    b264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b266:	1c5a      	adds	r2, r3, #1
    b268:	69bb      	ldr	r3, [r7, #24]
    b26a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    b26c:	231c      	movs	r3, #28
    b26e:	18fb      	adds	r3, r7, r3
    b270:	881b      	ldrh	r3, [r3, #0]
    b272:	05db      	lsls	r3, r3, #23
    b274:	0ddb      	lsrs	r3, r3, #23
    b276:	b29a      	uxth	r2, r3
    b278:	697b      	ldr	r3, [r7, #20]
    b27a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    b27c:	69bb      	ldr	r3, [r7, #24]
    b27e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b280:	b29b      	uxth	r3, r3
    b282:	3b01      	subs	r3, #1
    b284:	b29b      	uxth	r3, r3
    b286:	69ba      	ldr	r2, [r7, #24]
    b288:	1c19      	adds	r1, r3, #0
    b28a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    b28c:	2b00      	cmp	r3, #0
    b28e:	d109      	bne.n	b2a4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b290:	697b      	ldr	r3, [r7, #20]
    b292:	2201      	movs	r2, #1
    b294:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    b296:	697b      	ldr	r3, [r7, #20]
    b298:	2202      	movs	r2, #2
    b29a:	759a      	strb	r2, [r3, #22]
    b29c:	e002      	b.n	b2a4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b29e:	697b      	ldr	r3, [r7, #20]
    b2a0:	2201      	movs	r2, #1
    b2a2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    b2a4:	2312      	movs	r3, #18
    b2a6:	18fb      	adds	r3, r7, r3
    b2a8:	881b      	ldrh	r3, [r3, #0]
    b2aa:	2202      	movs	r2, #2
    b2ac:	4013      	ands	r3, r2
    b2ae:	d011      	beq.n	b2d4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    b2b0:	697b      	ldr	r3, [r7, #20]
    b2b2:	2202      	movs	r2, #2
    b2b4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    b2b6:	69bb      	ldr	r3, [r7, #24]
    b2b8:	2233      	movs	r2, #51	; 0x33
    b2ba:	2100      	movs	r1, #0
    b2bc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    b2be:	2310      	movs	r3, #16
    b2c0:	18fb      	adds	r3, r7, r3
    b2c2:	881b      	ldrh	r3, [r3, #0]
    b2c4:	2201      	movs	r2, #1
    b2c6:	4013      	ands	r3, r2
    b2c8:	d004      	beq.n	b2d4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    b2ca:	69bb      	ldr	r3, [r7, #24]
    b2cc:	68db      	ldr	r3, [r3, #12]
    b2ce:	69ba      	ldr	r2, [r7, #24]
    b2d0:	0010      	movs	r0, r2
    b2d2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    b2d4:	2312      	movs	r3, #18
    b2d6:	18fb      	adds	r3, r7, r3
    b2d8:	881b      	ldrh	r3, [r3, #0]
    b2da:	2204      	movs	r2, #4
    b2dc:	4013      	ands	r3, r2
    b2de:	d100      	bne.n	b2e2 <_usart_interrupt_handler+0x132>
    b2e0:	e0bd      	b.n	b45e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    b2e2:	69bb      	ldr	r3, [r7, #24]
    b2e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b2e6:	b29b      	uxth	r3, r3
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d100      	bne.n	b2ee <_usart_interrupt_handler+0x13e>
    b2ec:	e0b4      	b.n	b458 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    b2ee:	697b      	ldr	r3, [r7, #20]
    b2f0:	8b5b      	ldrh	r3, [r3, #26]
    b2f2:	b29b      	uxth	r3, r3
    b2f4:	b2da      	uxtb	r2, r3
    b2f6:	231f      	movs	r3, #31
    b2f8:	18fb      	adds	r3, r7, r3
    b2fa:	213f      	movs	r1, #63	; 0x3f
    b2fc:	400a      	ands	r2, r1
    b2fe:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    b300:	231f      	movs	r3, #31
    b302:	18fb      	adds	r3, r7, r3
    b304:	781b      	ldrb	r3, [r3, #0]
    b306:	2208      	movs	r2, #8
    b308:	4013      	ands	r3, r2
    b30a:	d007      	beq.n	b31c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    b30c:	231f      	movs	r3, #31
    b30e:	18fb      	adds	r3, r7, r3
    b310:	221f      	movs	r2, #31
    b312:	18ba      	adds	r2, r7, r2
    b314:	7812      	ldrb	r2, [r2, #0]
    b316:	2108      	movs	r1, #8
    b318:	438a      	bics	r2, r1
    b31a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    b31c:	231f      	movs	r3, #31
    b31e:	18fb      	adds	r3, r7, r3
    b320:	781b      	ldrb	r3, [r3, #0]
    b322:	2b00      	cmp	r3, #0
    b324:	d050      	beq.n	b3c8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    b326:	231f      	movs	r3, #31
    b328:	18fb      	adds	r3, r7, r3
    b32a:	781b      	ldrb	r3, [r3, #0]
    b32c:	2202      	movs	r2, #2
    b32e:	4013      	ands	r3, r2
    b330:	d007      	beq.n	b342 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    b332:	69bb      	ldr	r3, [r7, #24]
    b334:	2232      	movs	r2, #50	; 0x32
    b336:	211a      	movs	r1, #26
    b338:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    b33a:	697b      	ldr	r3, [r7, #20]
    b33c:	2202      	movs	r2, #2
    b33e:	835a      	strh	r2, [r3, #26]
    b340:	e036      	b.n	b3b0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    b342:	231f      	movs	r3, #31
    b344:	18fb      	adds	r3, r7, r3
    b346:	781b      	ldrb	r3, [r3, #0]
    b348:	2204      	movs	r2, #4
    b34a:	4013      	ands	r3, r2
    b34c:	d007      	beq.n	b35e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    b34e:	69bb      	ldr	r3, [r7, #24]
    b350:	2232      	movs	r2, #50	; 0x32
    b352:	211e      	movs	r1, #30
    b354:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    b356:	697b      	ldr	r3, [r7, #20]
    b358:	2204      	movs	r2, #4
    b35a:	835a      	strh	r2, [r3, #26]
    b35c:	e028      	b.n	b3b0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    b35e:	231f      	movs	r3, #31
    b360:	18fb      	adds	r3, r7, r3
    b362:	781b      	ldrb	r3, [r3, #0]
    b364:	2201      	movs	r2, #1
    b366:	4013      	ands	r3, r2
    b368:	d007      	beq.n	b37a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    b36a:	69bb      	ldr	r3, [r7, #24]
    b36c:	2232      	movs	r2, #50	; 0x32
    b36e:	2113      	movs	r1, #19
    b370:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    b372:	697b      	ldr	r3, [r7, #20]
    b374:	2201      	movs	r2, #1
    b376:	835a      	strh	r2, [r3, #26]
    b378:	e01a      	b.n	b3b0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    b37a:	231f      	movs	r3, #31
    b37c:	18fb      	adds	r3, r7, r3
    b37e:	781b      	ldrb	r3, [r3, #0]
    b380:	2210      	movs	r2, #16
    b382:	4013      	ands	r3, r2
    b384:	d007      	beq.n	b396 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    b386:	69bb      	ldr	r3, [r7, #24]
    b388:	2232      	movs	r2, #50	; 0x32
    b38a:	2142      	movs	r1, #66	; 0x42
    b38c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    b38e:	697b      	ldr	r3, [r7, #20]
    b390:	2210      	movs	r2, #16
    b392:	835a      	strh	r2, [r3, #26]
    b394:	e00c      	b.n	b3b0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    b396:	231f      	movs	r3, #31
    b398:	18fb      	adds	r3, r7, r3
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	2220      	movs	r2, #32
    b39e:	4013      	ands	r3, r2
    b3a0:	d006      	beq.n	b3b0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    b3a2:	69bb      	ldr	r3, [r7, #24]
    b3a4:	2232      	movs	r2, #50	; 0x32
    b3a6:	2141      	movs	r1, #65	; 0x41
    b3a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    b3aa:	697b      	ldr	r3, [r7, #20]
    b3ac:	2220      	movs	r2, #32
    b3ae:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    b3b0:	2310      	movs	r3, #16
    b3b2:	18fb      	adds	r3, r7, r3
    b3b4:	881b      	ldrh	r3, [r3, #0]
    b3b6:	2204      	movs	r2, #4
    b3b8:	4013      	ands	r3, r2
				if (callback_status
    b3ba:	d050      	beq.n	b45e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    b3bc:	69bb      	ldr	r3, [r7, #24]
    b3be:	695b      	ldr	r3, [r3, #20]
    b3c0:	69ba      	ldr	r2, [r7, #24]
    b3c2:	0010      	movs	r0, r2
    b3c4:	4798      	blx	r3
    b3c6:	e04a      	b.n	b45e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    b3c8:	697b      	ldr	r3, [r7, #20]
    b3ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b3cc:	b29a      	uxth	r2, r3
    b3ce:	230e      	movs	r3, #14
    b3d0:	18fb      	adds	r3, r7, r3
    b3d2:	05d2      	lsls	r2, r2, #23
    b3d4:	0dd2      	lsrs	r2, r2, #23
    b3d6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    b3d8:	69bb      	ldr	r3, [r7, #24]
    b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b3dc:	220e      	movs	r2, #14
    b3de:	18ba      	adds	r2, r7, r2
    b3e0:	8812      	ldrh	r2, [r2, #0]
    b3e2:	b2d2      	uxtb	r2, r2
    b3e4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    b3e6:	69bb      	ldr	r3, [r7, #24]
    b3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b3ea:	1c5a      	adds	r2, r3, #1
    b3ec:	69bb      	ldr	r3, [r7, #24]
    b3ee:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    b3f0:	69bb      	ldr	r3, [r7, #24]
    b3f2:	795b      	ldrb	r3, [r3, #5]
    b3f4:	2b01      	cmp	r3, #1
    b3f6:	d10d      	bne.n	b414 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    b3f8:	69bb      	ldr	r3, [r7, #24]
    b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b3fc:	220e      	movs	r2, #14
    b3fe:	18ba      	adds	r2, r7, r2
    b400:	8812      	ldrh	r2, [r2, #0]
    b402:	0a12      	lsrs	r2, r2, #8
    b404:	b292      	uxth	r2, r2
    b406:	b2d2      	uxtb	r2, r2
    b408:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    b40a:	69bb      	ldr	r3, [r7, #24]
    b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b40e:	1c5a      	adds	r2, r3, #1
    b410:	69bb      	ldr	r3, [r7, #24]
    b412:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    b414:	69bb      	ldr	r3, [r7, #24]
    b416:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b418:	b29b      	uxth	r3, r3
    b41a:	3b01      	subs	r3, #1
    b41c:	b29b      	uxth	r3, r3
    b41e:	69ba      	ldr	r2, [r7, #24]
    b420:	1c19      	adds	r1, r3, #0
    b422:	8591      	strh	r1, [r2, #44]	; 0x2c
    b424:	2b00      	cmp	r3, #0
    b426:	d11a      	bne.n	b45e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    b428:	697b      	ldr	r3, [r7, #20]
    b42a:	2204      	movs	r2, #4
    b42c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    b42e:	69bb      	ldr	r3, [r7, #24]
    b430:	2232      	movs	r2, #50	; 0x32
    b432:	2100      	movs	r1, #0
    b434:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    b436:	2310      	movs	r3, #16
    b438:	18fb      	adds	r3, r7, r3
    b43a:	881b      	ldrh	r3, [r3, #0]
    b43c:	2202      	movs	r2, #2
    b43e:	4013      	ands	r3, r2
					if (callback_status
    b440:	d00d      	beq.n	b45e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    b442:	69bb      	ldr	r3, [r7, #24]
    b444:	691b      	ldr	r3, [r3, #16]
    b446:	69ba      	ldr	r2, [r7, #24]
    b448:	0010      	movs	r0, r2
    b44a:	4798      	blx	r3
    b44c:	e007      	b.n	b45e <_usart_interrupt_handler+0x2ae>
    b44e:	46c0      	nop			; (mov r8, r8)
    b450:	20000764 	.word	0x20000764
    b454:	0000b18d 	.word	0x0000b18d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    b458:	697b      	ldr	r3, [r7, #20]
    b45a:	2204      	movs	r2, #4
    b45c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    b45e:	2312      	movs	r3, #18
    b460:	18fb      	adds	r3, r7, r3
    b462:	881b      	ldrh	r3, [r3, #0]
    b464:	2210      	movs	r2, #16
    b466:	4013      	ands	r3, r2
    b468:	d010      	beq.n	b48c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    b46a:	697b      	ldr	r3, [r7, #20]
    b46c:	2210      	movs	r2, #16
    b46e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    b470:	697b      	ldr	r3, [r7, #20]
    b472:	2210      	movs	r2, #16
    b474:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    b476:	2310      	movs	r3, #16
    b478:	18fb      	adds	r3, r7, r3
    b47a:	881b      	ldrh	r3, [r3, #0]
    b47c:	2210      	movs	r2, #16
    b47e:	4013      	ands	r3, r2
    b480:	d004      	beq.n	b48c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    b482:	69bb      	ldr	r3, [r7, #24]
    b484:	69db      	ldr	r3, [r3, #28]
    b486:	69ba      	ldr	r2, [r7, #24]
    b488:	0010      	movs	r0, r2
    b48a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    b48c:	2312      	movs	r3, #18
    b48e:	18fb      	adds	r3, r7, r3
    b490:	881b      	ldrh	r3, [r3, #0]
    b492:	2220      	movs	r2, #32
    b494:	4013      	ands	r3, r2
    b496:	d010      	beq.n	b4ba <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    b498:	697b      	ldr	r3, [r7, #20]
    b49a:	2220      	movs	r2, #32
    b49c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    b49e:	697b      	ldr	r3, [r7, #20]
    b4a0:	2220      	movs	r2, #32
    b4a2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    b4a4:	2310      	movs	r3, #16
    b4a6:	18fb      	adds	r3, r7, r3
    b4a8:	881b      	ldrh	r3, [r3, #0]
    b4aa:	2208      	movs	r2, #8
    b4ac:	4013      	ands	r3, r2
    b4ae:	d004      	beq.n	b4ba <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    b4b0:	69bb      	ldr	r3, [r7, #24]
    b4b2:	699b      	ldr	r3, [r3, #24]
    b4b4:	69ba      	ldr	r2, [r7, #24]
    b4b6:	0010      	movs	r0, r2
    b4b8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    b4ba:	2312      	movs	r3, #18
    b4bc:	18fb      	adds	r3, r7, r3
    b4be:	881b      	ldrh	r3, [r3, #0]
    b4c0:	2208      	movs	r2, #8
    b4c2:	4013      	ands	r3, r2
    b4c4:	d010      	beq.n	b4e8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    b4c6:	697b      	ldr	r3, [r7, #20]
    b4c8:	2208      	movs	r2, #8
    b4ca:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    b4cc:	697b      	ldr	r3, [r7, #20]
    b4ce:	2208      	movs	r2, #8
    b4d0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    b4d2:	2310      	movs	r3, #16
    b4d4:	18fb      	adds	r3, r7, r3
    b4d6:	881b      	ldrh	r3, [r3, #0]
    b4d8:	2220      	movs	r2, #32
    b4da:	4013      	ands	r3, r2
    b4dc:	d004      	beq.n	b4e8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    b4de:	69bb      	ldr	r3, [r7, #24]
    b4e0:	6a1b      	ldr	r3, [r3, #32]
    b4e2:	69ba      	ldr	r2, [r7, #24]
    b4e4:	0010      	movs	r0, r2
    b4e6:	4798      	blx	r3
		}
	}
#endif
}
    b4e8:	46c0      	nop			; (mov r8, r8)
    b4ea:	46bd      	mov	sp, r7
    b4ec:	b008      	add	sp, #32
    b4ee:	bd80      	pop	{r7, pc}

0000b4f0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    b4f0:	b580      	push	{r7, lr}
    b4f2:	b082      	sub	sp, #8
    b4f4:	af00      	add	r7, sp, #0
    b4f6:	0002      	movs	r2, r0
    b4f8:	1dfb      	adds	r3, r7, #7
    b4fa:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    b4fc:	46c0      	nop			; (mov r8, r8)
    b4fe:	46bd      	mov	sp, r7
    b500:	b002      	add	sp, #8
    b502:	bd80      	pop	{r7, pc}

0000b504 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    b504:	b580      	push	{r7, lr}
    b506:	b084      	sub	sp, #16
    b508:	af00      	add	r7, sp, #0
    b50a:	0002      	movs	r2, r0
    b50c:	6039      	str	r1, [r7, #0]
    b50e:	1dfb      	adds	r3, r7, #7
    b510:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    b512:	4b13      	ldr	r3, [pc, #76]	; (b560 <_sercom_set_handler+0x5c>)
    b514:	781b      	ldrb	r3, [r3, #0]
    b516:	2201      	movs	r2, #1
    b518:	4053      	eors	r3, r2
    b51a:	b2db      	uxtb	r3, r3
    b51c:	2b00      	cmp	r3, #0
    b51e:	d015      	beq.n	b54c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b520:	2300      	movs	r3, #0
    b522:	60fb      	str	r3, [r7, #12]
    b524:	e00c      	b.n	b540 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    b526:	4b0f      	ldr	r3, [pc, #60]	; (b564 <_sercom_set_handler+0x60>)
    b528:	68fa      	ldr	r2, [r7, #12]
    b52a:	0092      	lsls	r2, r2, #2
    b52c:	490e      	ldr	r1, [pc, #56]	; (b568 <_sercom_set_handler+0x64>)
    b52e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    b530:	4b0e      	ldr	r3, [pc, #56]	; (b56c <_sercom_set_handler+0x68>)
    b532:	68fa      	ldr	r2, [r7, #12]
    b534:	0092      	lsls	r2, r2, #2
    b536:	2100      	movs	r1, #0
    b538:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b53a:	68fb      	ldr	r3, [r7, #12]
    b53c:	3301      	adds	r3, #1
    b53e:	60fb      	str	r3, [r7, #12]
    b540:	68fb      	ldr	r3, [r7, #12]
    b542:	2b05      	cmp	r3, #5
    b544:	d9ef      	bls.n	b526 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    b546:	4b06      	ldr	r3, [pc, #24]	; (b560 <_sercom_set_handler+0x5c>)
    b548:	2201      	movs	r2, #1
    b54a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    b54c:	1dfb      	adds	r3, r7, #7
    b54e:	781a      	ldrb	r2, [r3, #0]
    b550:	4b04      	ldr	r3, [pc, #16]	; (b564 <_sercom_set_handler+0x60>)
    b552:	0092      	lsls	r2, r2, #2
    b554:	6839      	ldr	r1, [r7, #0]
    b556:	50d1      	str	r1, [r2, r3]
}
    b558:	46c0      	nop			; (mov r8, r8)
    b55a:	46bd      	mov	sp, r7
    b55c:	b004      	add	sp, #16
    b55e:	bd80      	pop	{r7, pc}
    b560:	2000038e 	.word	0x2000038e
    b564:	20000390 	.word	0x20000390
    b568:	0000b4f1 	.word	0x0000b4f1
    b56c:	20000764 	.word	0x20000764

0000b570 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    b570:	b590      	push	{r4, r7, lr}
    b572:	b085      	sub	sp, #20
    b574:	af00      	add	r7, sp, #0
    b576:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    b578:	2308      	movs	r3, #8
    b57a:	18fb      	adds	r3, r7, r3
    b57c:	4a0b      	ldr	r2, [pc, #44]	; (b5ac <_sercom_get_interrupt_vector+0x3c>)
    b57e:	6811      	ldr	r1, [r2, #0]
    b580:	6019      	str	r1, [r3, #0]
    b582:	8892      	ldrh	r2, [r2, #4]
    b584:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    b586:	230f      	movs	r3, #15
    b588:	18fc      	adds	r4, r7, r3
    b58a:	687b      	ldr	r3, [r7, #4]
    b58c:	0018      	movs	r0, r3
    b58e:	4b08      	ldr	r3, [pc, #32]	; (b5b0 <_sercom_get_interrupt_vector+0x40>)
    b590:	4798      	blx	r3
    b592:	0003      	movs	r3, r0
    b594:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    b596:	230f      	movs	r3, #15
    b598:	18fb      	adds	r3, r7, r3
    b59a:	781b      	ldrb	r3, [r3, #0]
    b59c:	2208      	movs	r2, #8
    b59e:	18ba      	adds	r2, r7, r2
    b5a0:	5cd3      	ldrb	r3, [r2, r3]
    b5a2:	b25b      	sxtb	r3, r3
}
    b5a4:	0018      	movs	r0, r3
    b5a6:	46bd      	mov	sp, r7
    b5a8:	b005      	add	sp, #20
    b5aa:	bd90      	pop	{r4, r7, pc}
    b5ac:	00014f40 	.word	0x00014f40
    b5b0:	0000a8bd 	.word	0x0000a8bd

0000b5b4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    b5b4:	b580      	push	{r7, lr}
    b5b6:	af00      	add	r7, sp, #0
    b5b8:	4b03      	ldr	r3, [pc, #12]	; (b5c8 <SERCOM0_Handler+0x14>)
    b5ba:	681b      	ldr	r3, [r3, #0]
    b5bc:	2000      	movs	r0, #0
    b5be:	4798      	blx	r3
    b5c0:	46c0      	nop			; (mov r8, r8)
    b5c2:	46bd      	mov	sp, r7
    b5c4:	bd80      	pop	{r7, pc}
    b5c6:	46c0      	nop			; (mov r8, r8)
    b5c8:	20000390 	.word	0x20000390

0000b5cc <SERCOM1_Handler>:
    b5cc:	b580      	push	{r7, lr}
    b5ce:	af00      	add	r7, sp, #0
    b5d0:	4b03      	ldr	r3, [pc, #12]	; (b5e0 <SERCOM1_Handler+0x14>)
    b5d2:	685b      	ldr	r3, [r3, #4]
    b5d4:	2001      	movs	r0, #1
    b5d6:	4798      	blx	r3
    b5d8:	46c0      	nop			; (mov r8, r8)
    b5da:	46bd      	mov	sp, r7
    b5dc:	bd80      	pop	{r7, pc}
    b5de:	46c0      	nop			; (mov r8, r8)
    b5e0:	20000390 	.word	0x20000390

0000b5e4 <SERCOM2_Handler>:
    b5e4:	b580      	push	{r7, lr}
    b5e6:	af00      	add	r7, sp, #0
    b5e8:	4b03      	ldr	r3, [pc, #12]	; (b5f8 <SERCOM2_Handler+0x14>)
    b5ea:	689b      	ldr	r3, [r3, #8]
    b5ec:	2002      	movs	r0, #2
    b5ee:	4798      	blx	r3
    b5f0:	46c0      	nop			; (mov r8, r8)
    b5f2:	46bd      	mov	sp, r7
    b5f4:	bd80      	pop	{r7, pc}
    b5f6:	46c0      	nop			; (mov r8, r8)
    b5f8:	20000390 	.word	0x20000390

0000b5fc <SERCOM3_Handler>:
    b5fc:	b580      	push	{r7, lr}
    b5fe:	af00      	add	r7, sp, #0
    b600:	4b03      	ldr	r3, [pc, #12]	; (b610 <SERCOM3_Handler+0x14>)
    b602:	68db      	ldr	r3, [r3, #12]
    b604:	2003      	movs	r0, #3
    b606:	4798      	blx	r3
    b608:	46c0      	nop			; (mov r8, r8)
    b60a:	46bd      	mov	sp, r7
    b60c:	bd80      	pop	{r7, pc}
    b60e:	46c0      	nop			; (mov r8, r8)
    b610:	20000390 	.word	0x20000390

0000b614 <SERCOM4_Handler>:
    b614:	b580      	push	{r7, lr}
    b616:	af00      	add	r7, sp, #0
    b618:	4b03      	ldr	r3, [pc, #12]	; (b628 <SERCOM4_Handler+0x14>)
    b61a:	691b      	ldr	r3, [r3, #16]
    b61c:	2004      	movs	r0, #4
    b61e:	4798      	blx	r3
    b620:	46c0      	nop			; (mov r8, r8)
    b622:	46bd      	mov	sp, r7
    b624:	bd80      	pop	{r7, pc}
    b626:	46c0      	nop			; (mov r8, r8)
    b628:	20000390 	.word	0x20000390

0000b62c <SERCOM5_Handler>:
    b62c:	b580      	push	{r7, lr}
    b62e:	af00      	add	r7, sp, #0
    b630:	4b03      	ldr	r3, [pc, #12]	; (b640 <SERCOM5_Handler+0x14>)
    b632:	695b      	ldr	r3, [r3, #20]
    b634:	2005      	movs	r0, #5
    b636:	4798      	blx	r3
    b638:	46c0      	nop			; (mov r8, r8)
    b63a:	46bd      	mov	sp, r7
    b63c:	bd80      	pop	{r7, pc}
    b63e:	46c0      	nop			; (mov r8, r8)
    b640:	20000390 	.word	0x20000390

0000b644 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    b644:	b580      	push	{r7, lr}
    b646:	b082      	sub	sp, #8
    b648:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    b64a:	4b10      	ldr	r3, [pc, #64]	; (b68c <cpu_irq_enter_critical+0x48>)
    b64c:	681b      	ldr	r3, [r3, #0]
    b64e:	2b00      	cmp	r3, #0
    b650:	d112      	bne.n	b678 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b652:	f3ef 8310 	mrs	r3, PRIMASK
    b656:	607b      	str	r3, [r7, #4]
  return(result);
    b658:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    b65a:	2b00      	cmp	r3, #0
    b65c:	d109      	bne.n	b672 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    b65e:	b672      	cpsid	i
    b660:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    b664:	4b0a      	ldr	r3, [pc, #40]	; (b690 <cpu_irq_enter_critical+0x4c>)
    b666:	2200      	movs	r2, #0
    b668:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    b66a:	4b0a      	ldr	r3, [pc, #40]	; (b694 <cpu_irq_enter_critical+0x50>)
    b66c:	2201      	movs	r2, #1
    b66e:	701a      	strb	r2, [r3, #0]
    b670:	e002      	b.n	b678 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    b672:	4b08      	ldr	r3, [pc, #32]	; (b694 <cpu_irq_enter_critical+0x50>)
    b674:	2200      	movs	r2, #0
    b676:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    b678:	4b04      	ldr	r3, [pc, #16]	; (b68c <cpu_irq_enter_critical+0x48>)
    b67a:	681b      	ldr	r3, [r3, #0]
    b67c:	1c5a      	adds	r2, r3, #1
    b67e:	4b03      	ldr	r3, [pc, #12]	; (b68c <cpu_irq_enter_critical+0x48>)
    b680:	601a      	str	r2, [r3, #0]
}
    b682:	46c0      	nop			; (mov r8, r8)
    b684:	46bd      	mov	sp, r7
    b686:	b002      	add	sp, #8
    b688:	bd80      	pop	{r7, pc}
    b68a:	46c0      	nop			; (mov r8, r8)
    b68c:	200003a8 	.word	0x200003a8
    b690:	20000070 	.word	0x20000070
    b694:	200003ac 	.word	0x200003ac

0000b698 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    b698:	b580      	push	{r7, lr}
    b69a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    b69c:	4b0b      	ldr	r3, [pc, #44]	; (b6cc <cpu_irq_leave_critical+0x34>)
    b69e:	681b      	ldr	r3, [r3, #0]
    b6a0:	1e5a      	subs	r2, r3, #1
    b6a2:	4b0a      	ldr	r3, [pc, #40]	; (b6cc <cpu_irq_leave_critical+0x34>)
    b6a4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    b6a6:	4b09      	ldr	r3, [pc, #36]	; (b6cc <cpu_irq_leave_critical+0x34>)
    b6a8:	681b      	ldr	r3, [r3, #0]
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d10a      	bne.n	b6c4 <cpu_irq_leave_critical+0x2c>
    b6ae:	4b08      	ldr	r3, [pc, #32]	; (b6d0 <cpu_irq_leave_critical+0x38>)
    b6b0:	781b      	ldrb	r3, [r3, #0]
    b6b2:	b2db      	uxtb	r3, r3
    b6b4:	2b00      	cmp	r3, #0
    b6b6:	d005      	beq.n	b6c4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    b6b8:	4b06      	ldr	r3, [pc, #24]	; (b6d4 <cpu_irq_leave_critical+0x3c>)
    b6ba:	2201      	movs	r2, #1
    b6bc:	701a      	strb	r2, [r3, #0]
    b6be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b6c2:	b662      	cpsie	i
	}
}
    b6c4:	46c0      	nop			; (mov r8, r8)
    b6c6:	46bd      	mov	sp, r7
    b6c8:	bd80      	pop	{r7, pc}
    b6ca:	46c0      	nop			; (mov r8, r8)
    b6cc:	200003a8 	.word	0x200003a8
    b6d0:	200003ac 	.word	0x200003ac
    b6d4:	20000070 	.word	0x20000070

0000b6d8 <system_pinmux_get_group_from_gpio_pin>:
{
    b6d8:	b580      	push	{r7, lr}
    b6da:	b084      	sub	sp, #16
    b6dc:	af00      	add	r7, sp, #0
    b6de:	0002      	movs	r2, r0
    b6e0:	1dfb      	adds	r3, r7, #7
    b6e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b6e4:	230f      	movs	r3, #15
    b6e6:	18fb      	adds	r3, r7, r3
    b6e8:	1dfa      	adds	r2, r7, #7
    b6ea:	7812      	ldrb	r2, [r2, #0]
    b6ec:	09d2      	lsrs	r2, r2, #7
    b6ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b6f0:	230e      	movs	r3, #14
    b6f2:	18fb      	adds	r3, r7, r3
    b6f4:	1dfa      	adds	r2, r7, #7
    b6f6:	7812      	ldrb	r2, [r2, #0]
    b6f8:	0952      	lsrs	r2, r2, #5
    b6fa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b6fc:	4b0d      	ldr	r3, [pc, #52]	; (b734 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b6fe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    b700:	230f      	movs	r3, #15
    b702:	18fb      	adds	r3, r7, r3
    b704:	781b      	ldrb	r3, [r3, #0]
    b706:	2b00      	cmp	r3, #0
    b708:	d10f      	bne.n	b72a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b70a:	230f      	movs	r3, #15
    b70c:	18fb      	adds	r3, r7, r3
    b70e:	781b      	ldrb	r3, [r3, #0]
    b710:	009b      	lsls	r3, r3, #2
    b712:	2210      	movs	r2, #16
    b714:	4694      	mov	ip, r2
    b716:	44bc      	add	ip, r7
    b718:	4463      	add	r3, ip
    b71a:	3b08      	subs	r3, #8
    b71c:	681a      	ldr	r2, [r3, #0]
    b71e:	230e      	movs	r3, #14
    b720:	18fb      	adds	r3, r7, r3
    b722:	781b      	ldrb	r3, [r3, #0]
    b724:	01db      	lsls	r3, r3, #7
    b726:	18d3      	adds	r3, r2, r3
    b728:	e000      	b.n	b72c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    b72a:	2300      	movs	r3, #0
}
    b72c:	0018      	movs	r0, r3
    b72e:	46bd      	mov	sp, r7
    b730:	b004      	add	sp, #16
    b732:	bd80      	pop	{r7, pc}
    b734:	41004400 	.word	0x41004400

0000b738 <port_get_group_from_gpio_pin>:
{
    b738:	b580      	push	{r7, lr}
    b73a:	b082      	sub	sp, #8
    b73c:	af00      	add	r7, sp, #0
    b73e:	0002      	movs	r2, r0
    b740:	1dfb      	adds	r3, r7, #7
    b742:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b744:	1dfb      	adds	r3, r7, #7
    b746:	781b      	ldrb	r3, [r3, #0]
    b748:	0018      	movs	r0, r3
    b74a:	4b03      	ldr	r3, [pc, #12]	; (b758 <port_get_group_from_gpio_pin+0x20>)
    b74c:	4798      	blx	r3
    b74e:	0003      	movs	r3, r0
}
    b750:	0018      	movs	r0, r3
    b752:	46bd      	mov	sp, r7
    b754:	b002      	add	sp, #8
    b756:	bd80      	pop	{r7, pc}
    b758:	0000b6d9 	.word	0x0000b6d9

0000b75c <port_get_config_defaults>:
{
    b75c:	b580      	push	{r7, lr}
    b75e:	b082      	sub	sp, #8
    b760:	af00      	add	r7, sp, #0
    b762:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    b764:	687b      	ldr	r3, [r7, #4]
    b766:	2200      	movs	r2, #0
    b768:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b76a:	687b      	ldr	r3, [r7, #4]
    b76c:	2201      	movs	r2, #1
    b76e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    b770:	687b      	ldr	r3, [r7, #4]
    b772:	2200      	movs	r2, #0
    b774:	709a      	strb	r2, [r3, #2]
}
    b776:	46c0      	nop			; (mov r8, r8)
    b778:	46bd      	mov	sp, r7
    b77a:	b002      	add	sp, #8
    b77c:	bd80      	pop	{r7, pc}
	...

0000b780 <port_pin_set_output_level>:
{
    b780:	b580      	push	{r7, lr}
    b782:	b084      	sub	sp, #16
    b784:	af00      	add	r7, sp, #0
    b786:	0002      	movs	r2, r0
    b788:	1dfb      	adds	r3, r7, #7
    b78a:	701a      	strb	r2, [r3, #0]
    b78c:	1dbb      	adds	r3, r7, #6
    b78e:	1c0a      	adds	r2, r1, #0
    b790:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    b792:	1dfb      	adds	r3, r7, #7
    b794:	781b      	ldrb	r3, [r3, #0]
    b796:	0018      	movs	r0, r3
    b798:	4b0d      	ldr	r3, [pc, #52]	; (b7d0 <port_pin_set_output_level+0x50>)
    b79a:	4798      	blx	r3
    b79c:	0003      	movs	r3, r0
    b79e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b7a0:	1dfb      	adds	r3, r7, #7
    b7a2:	781b      	ldrb	r3, [r3, #0]
    b7a4:	221f      	movs	r2, #31
    b7a6:	4013      	ands	r3, r2
    b7a8:	2201      	movs	r2, #1
    b7aa:	409a      	lsls	r2, r3
    b7ac:	0013      	movs	r3, r2
    b7ae:	60bb      	str	r3, [r7, #8]
	if (level) {
    b7b0:	1dbb      	adds	r3, r7, #6
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	2b00      	cmp	r3, #0
    b7b6:	d003      	beq.n	b7c0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    b7b8:	68fb      	ldr	r3, [r7, #12]
    b7ba:	68ba      	ldr	r2, [r7, #8]
    b7bc:	619a      	str	r2, [r3, #24]
}
    b7be:	e002      	b.n	b7c6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    b7c0:	68fb      	ldr	r3, [r7, #12]
    b7c2:	68ba      	ldr	r2, [r7, #8]
    b7c4:	615a      	str	r2, [r3, #20]
}
    b7c6:	46c0      	nop			; (mov r8, r8)
    b7c8:	46bd      	mov	sp, r7
    b7ca:	b004      	add	sp, #16
    b7cc:	bd80      	pop	{r7, pc}
    b7ce:	46c0      	nop			; (mov r8, r8)
    b7d0:	0000b739 	.word	0x0000b739

0000b7d4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    b7d4:	b580      	push	{r7, lr}
    b7d6:	b082      	sub	sp, #8
    b7d8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    b7da:	1d3b      	adds	r3, r7, #4
    b7dc:	0018      	movs	r0, r3
    b7de:	4b0e      	ldr	r3, [pc, #56]	; (b818 <system_board_init+0x44>)
    b7e0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b7e2:	1d3b      	adds	r3, r7, #4
    b7e4:	2201      	movs	r2, #1
    b7e6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    b7e8:	1d3b      	adds	r3, r7, #4
    b7ea:	0019      	movs	r1, r3
    b7ec:	2017      	movs	r0, #23
    b7ee:	4b0b      	ldr	r3, [pc, #44]	; (b81c <system_board_init+0x48>)
    b7f0:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    b7f2:	2101      	movs	r1, #1
    b7f4:	2017      	movs	r0, #23
    b7f6:	4b0a      	ldr	r3, [pc, #40]	; (b820 <system_board_init+0x4c>)
    b7f8:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    b7fa:	1d3b      	adds	r3, r7, #4
    b7fc:	2200      	movs	r2, #0
    b7fe:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    b800:	1d3b      	adds	r3, r7, #4
    b802:	2201      	movs	r2, #1
    b804:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    b806:	1d3b      	adds	r3, r7, #4
    b808:	0019      	movs	r1, r3
    b80a:	2037      	movs	r0, #55	; 0x37
    b80c:	4b03      	ldr	r3, [pc, #12]	; (b81c <system_board_init+0x48>)
    b80e:	4798      	blx	r3
}
    b810:	46c0      	nop			; (mov r8, r8)
    b812:	46bd      	mov	sp, r7
    b814:	b002      	add	sp, #8
    b816:	bd80      	pop	{r7, pc}
    b818:	0000b75d 	.word	0x0000b75d
    b81c:	0000b84d 	.word	0x0000b84d
    b820:	0000b781 	.word	0x0000b781

0000b824 <system_pinmux_get_config_defaults>:
{
    b824:	b580      	push	{r7, lr}
    b826:	b082      	sub	sp, #8
    b828:	af00      	add	r7, sp, #0
    b82a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b82c:	687b      	ldr	r3, [r7, #4]
    b82e:	2280      	movs	r2, #128	; 0x80
    b830:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b832:	687b      	ldr	r3, [r7, #4]
    b834:	2200      	movs	r2, #0
    b836:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b838:	687b      	ldr	r3, [r7, #4]
    b83a:	2201      	movs	r2, #1
    b83c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b83e:	687b      	ldr	r3, [r7, #4]
    b840:	2200      	movs	r2, #0
    b842:	70da      	strb	r2, [r3, #3]
}
    b844:	46c0      	nop			; (mov r8, r8)
    b846:	46bd      	mov	sp, r7
    b848:	b002      	add	sp, #8
    b84a:	bd80      	pop	{r7, pc}

0000b84c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    b84c:	b580      	push	{r7, lr}
    b84e:	b084      	sub	sp, #16
    b850:	af00      	add	r7, sp, #0
    b852:	0002      	movs	r2, r0
    b854:	6039      	str	r1, [r7, #0]
    b856:	1dfb      	adds	r3, r7, #7
    b858:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    b85a:	230c      	movs	r3, #12
    b85c:	18fb      	adds	r3, r7, r3
    b85e:	0018      	movs	r0, r3
    b860:	4b10      	ldr	r3, [pc, #64]	; (b8a4 <port_pin_set_config+0x58>)
    b862:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    b864:	230c      	movs	r3, #12
    b866:	18fb      	adds	r3, r7, r3
    b868:	2280      	movs	r2, #128	; 0x80
    b86a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    b86c:	683b      	ldr	r3, [r7, #0]
    b86e:	781a      	ldrb	r2, [r3, #0]
    b870:	230c      	movs	r3, #12
    b872:	18fb      	adds	r3, r7, r3
    b874:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    b876:	683b      	ldr	r3, [r7, #0]
    b878:	785a      	ldrb	r2, [r3, #1]
    b87a:	230c      	movs	r3, #12
    b87c:	18fb      	adds	r3, r7, r3
    b87e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    b880:	683b      	ldr	r3, [r7, #0]
    b882:	789a      	ldrb	r2, [r3, #2]
    b884:	230c      	movs	r3, #12
    b886:	18fb      	adds	r3, r7, r3
    b888:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    b88a:	230c      	movs	r3, #12
    b88c:	18fa      	adds	r2, r7, r3
    b88e:	1dfb      	adds	r3, r7, #7
    b890:	781b      	ldrb	r3, [r3, #0]
    b892:	0011      	movs	r1, r2
    b894:	0018      	movs	r0, r3
    b896:	4b04      	ldr	r3, [pc, #16]	; (b8a8 <port_pin_set_config+0x5c>)
    b898:	4798      	blx	r3
}
    b89a:	46c0      	nop			; (mov r8, r8)
    b89c:	46bd      	mov	sp, r7
    b89e:	b004      	add	sp, #16
    b8a0:	bd80      	pop	{r7, pc}
    b8a2:	46c0      	nop			; (mov r8, r8)
    b8a4:	0000b825 	.word	0x0000b825
    b8a8:	0000c7d5 	.word	0x0000c7d5

0000b8ac <system_gclk_gen_get_config_defaults>:
{
    b8ac:	b580      	push	{r7, lr}
    b8ae:	b082      	sub	sp, #8
    b8b0:	af00      	add	r7, sp, #0
    b8b2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    b8b4:	687b      	ldr	r3, [r7, #4]
    b8b6:	2201      	movs	r2, #1
    b8b8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    b8ba:	687b      	ldr	r3, [r7, #4]
    b8bc:	2200      	movs	r2, #0
    b8be:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    b8c0:	687b      	ldr	r3, [r7, #4]
    b8c2:	2206      	movs	r2, #6
    b8c4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    b8c6:	687b      	ldr	r3, [r7, #4]
    b8c8:	2200      	movs	r2, #0
    b8ca:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    b8cc:	687b      	ldr	r3, [r7, #4]
    b8ce:	2200      	movs	r2, #0
    b8d0:	725a      	strb	r2, [r3, #9]
}
    b8d2:	46c0      	nop			; (mov r8, r8)
    b8d4:	46bd      	mov	sp, r7
    b8d6:	b002      	add	sp, #8
    b8d8:	bd80      	pop	{r7, pc}

0000b8da <system_gclk_chan_get_config_defaults>:
{
    b8da:	b580      	push	{r7, lr}
    b8dc:	b082      	sub	sp, #8
    b8de:	af00      	add	r7, sp, #0
    b8e0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    b8e2:	687b      	ldr	r3, [r7, #4]
    b8e4:	2200      	movs	r2, #0
    b8e6:	701a      	strb	r2, [r3, #0]
}
    b8e8:	46c0      	nop			; (mov r8, r8)
    b8ea:	46bd      	mov	sp, r7
    b8ec:	b002      	add	sp, #8
    b8ee:	bd80      	pop	{r7, pc}

0000b8f0 <system_clock_source_xosc32k_get_config_defaults>:
{
    b8f0:	b580      	push	{r7, lr}
    b8f2:	b082      	sub	sp, #8
    b8f4:	af00      	add	r7, sp, #0
    b8f6:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    b8f8:	687b      	ldr	r3, [r7, #4]
    b8fa:	2200      	movs	r2, #0
    b8fc:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    b8fe:	687b      	ldr	r3, [r7, #4]
    b900:	2204      	movs	r2, #4
    b902:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    b904:	687b      	ldr	r3, [r7, #4]
    b906:	2200      	movs	r2, #0
    b908:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    b90a:	687b      	ldr	r3, [r7, #4]
    b90c:	2280      	movs	r2, #128	; 0x80
    b90e:	0212      	lsls	r2, r2, #8
    b910:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    b912:	687b      	ldr	r3, [r7, #4]
    b914:	2200      	movs	r2, #0
    b916:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    b918:	687b      	ldr	r3, [r7, #4]
    b91a:	2201      	movs	r2, #1
    b91c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    b91e:	687b      	ldr	r3, [r7, #4]
    b920:	2200      	movs	r2, #0
    b922:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    b924:	687b      	ldr	r3, [r7, #4]
    b926:	2201      	movs	r2, #1
    b928:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    b92a:	687b      	ldr	r3, [r7, #4]
    b92c:	2200      	movs	r2, #0
    b92e:	739a      	strb	r2, [r3, #14]
}
    b930:	46c0      	nop			; (mov r8, r8)
    b932:	46bd      	mov	sp, r7
    b934:	b002      	add	sp, #8
    b936:	bd80      	pop	{r7, pc}

0000b938 <system_clock_source_osc8m_get_config_defaults>:
{
    b938:	b580      	push	{r7, lr}
    b93a:	b082      	sub	sp, #8
    b93c:	af00      	add	r7, sp, #0
    b93e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    b940:	687b      	ldr	r3, [r7, #4]
    b942:	2203      	movs	r2, #3
    b944:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    b946:	687b      	ldr	r3, [r7, #4]
    b948:	2200      	movs	r2, #0
    b94a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    b94c:	687b      	ldr	r3, [r7, #4]
    b94e:	2201      	movs	r2, #1
    b950:	709a      	strb	r2, [r3, #2]
}
    b952:	46c0      	nop			; (mov r8, r8)
    b954:	46bd      	mov	sp, r7
    b956:	b002      	add	sp, #8
    b958:	bd80      	pop	{r7, pc}

0000b95a <system_clock_source_dfll_get_config_defaults>:
{
    b95a:	b580      	push	{r7, lr}
    b95c:	b082      	sub	sp, #8
    b95e:	af00      	add	r7, sp, #0
    b960:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    b962:	687b      	ldr	r3, [r7, #4]
    b964:	2200      	movs	r2, #0
    b966:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    b968:	687b      	ldr	r3, [r7, #4]
    b96a:	2200      	movs	r2, #0
    b96c:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    b96e:	687b      	ldr	r3, [r7, #4]
    b970:	2200      	movs	r2, #0
    b972:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    b974:	687b      	ldr	r3, [r7, #4]
    b976:	2200      	movs	r2, #0
    b978:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    b97a:	687b      	ldr	r3, [r7, #4]
    b97c:	2200      	movs	r2, #0
    b97e:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    b980:	687b      	ldr	r3, [r7, #4]
    b982:	2201      	movs	r2, #1
    b984:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    b986:	687b      	ldr	r3, [r7, #4]
    b988:	2207      	movs	r2, #7
    b98a:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    b98c:	687b      	ldr	r3, [r7, #4]
    b98e:	223f      	movs	r2, #63	; 0x3f
    b990:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    b992:	687b      	ldr	r3, [r7, #4]
    b994:	2201      	movs	r2, #1
    b996:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    b998:	687b      	ldr	r3, [r7, #4]
    b99a:	2201      	movs	r2, #1
    b99c:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    b99e:	687b      	ldr	r3, [r7, #4]
    b9a0:	2206      	movs	r2, #6
    b9a2:	821a      	strh	r2, [r3, #16]
}
    b9a4:	46c0      	nop			; (mov r8, r8)
    b9a6:	46bd      	mov	sp, r7
    b9a8:	b002      	add	sp, #8
    b9aa:	bd80      	pop	{r7, pc}

0000b9ac <system_cpu_clock_set_divider>:
{
    b9ac:	b580      	push	{r7, lr}
    b9ae:	b082      	sub	sp, #8
    b9b0:	af00      	add	r7, sp, #0
    b9b2:	0002      	movs	r2, r0
    b9b4:	1dfb      	adds	r3, r7, #7
    b9b6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    b9b8:	4a03      	ldr	r2, [pc, #12]	; (b9c8 <system_cpu_clock_set_divider+0x1c>)
    b9ba:	1dfb      	adds	r3, r7, #7
    b9bc:	781b      	ldrb	r3, [r3, #0]
    b9be:	7213      	strb	r3, [r2, #8]
}
    b9c0:	46c0      	nop			; (mov r8, r8)
    b9c2:	46bd      	mov	sp, r7
    b9c4:	b002      	add	sp, #8
    b9c6:	bd80      	pop	{r7, pc}
    b9c8:	40000400 	.word	0x40000400

0000b9cc <system_apb_clock_set_divider>:
{
    b9cc:	b580      	push	{r7, lr}
    b9ce:	b082      	sub	sp, #8
    b9d0:	af00      	add	r7, sp, #0
    b9d2:	0002      	movs	r2, r0
    b9d4:	1dfb      	adds	r3, r7, #7
    b9d6:	701a      	strb	r2, [r3, #0]
    b9d8:	1dbb      	adds	r3, r7, #6
    b9da:	1c0a      	adds	r2, r1, #0
    b9dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b9de:	1dfb      	adds	r3, r7, #7
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	2b01      	cmp	r3, #1
    b9e4:	d008      	beq.n	b9f8 <system_apb_clock_set_divider+0x2c>
    b9e6:	2b02      	cmp	r3, #2
    b9e8:	d00b      	beq.n	ba02 <system_apb_clock_set_divider+0x36>
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d10e      	bne.n	ba0c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    b9ee:	4a0b      	ldr	r2, [pc, #44]	; (ba1c <system_apb_clock_set_divider+0x50>)
    b9f0:	1dbb      	adds	r3, r7, #6
    b9f2:	781b      	ldrb	r3, [r3, #0]
    b9f4:	7253      	strb	r3, [r2, #9]
			break;
    b9f6:	e00b      	b.n	ba10 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    b9f8:	4a08      	ldr	r2, [pc, #32]	; (ba1c <system_apb_clock_set_divider+0x50>)
    b9fa:	1dbb      	adds	r3, r7, #6
    b9fc:	781b      	ldrb	r3, [r3, #0]
    b9fe:	7293      	strb	r3, [r2, #10]
			break;
    ba00:	e006      	b.n	ba10 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    ba02:	4a06      	ldr	r2, [pc, #24]	; (ba1c <system_apb_clock_set_divider+0x50>)
    ba04:	1dbb      	adds	r3, r7, #6
    ba06:	781b      	ldrb	r3, [r3, #0]
    ba08:	72d3      	strb	r3, [r2, #11]
			break;
    ba0a:	e001      	b.n	ba10 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    ba0c:	2317      	movs	r3, #23
    ba0e:	e000      	b.n	ba12 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    ba10:	2300      	movs	r3, #0
}
    ba12:	0018      	movs	r0, r3
    ba14:	46bd      	mov	sp, r7
    ba16:	b002      	add	sp, #8
    ba18:	bd80      	pop	{r7, pc}
    ba1a:	46c0      	nop			; (mov r8, r8)
    ba1c:	40000400 	.word	0x40000400

0000ba20 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    ba20:	b580      	push	{r7, lr}
    ba22:	b082      	sub	sp, #8
    ba24:	af00      	add	r7, sp, #0
    ba26:	0002      	movs	r2, r0
    ba28:	1dfb      	adds	r3, r7, #7
    ba2a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    ba2c:	4a08      	ldr	r2, [pc, #32]	; (ba50 <system_flash_set_waitstates+0x30>)
    ba2e:	1dfb      	adds	r3, r7, #7
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	210f      	movs	r1, #15
    ba34:	400b      	ands	r3, r1
    ba36:	b2d9      	uxtb	r1, r3
    ba38:	6853      	ldr	r3, [r2, #4]
    ba3a:	200f      	movs	r0, #15
    ba3c:	4001      	ands	r1, r0
    ba3e:	0049      	lsls	r1, r1, #1
    ba40:	201e      	movs	r0, #30
    ba42:	4383      	bics	r3, r0
    ba44:	430b      	orrs	r3, r1
    ba46:	6053      	str	r3, [r2, #4]
}
    ba48:	46c0      	nop			; (mov r8, r8)
    ba4a:	46bd      	mov	sp, r7
    ba4c:	b002      	add	sp, #8
    ba4e:	bd80      	pop	{r7, pc}
    ba50:	41004000 	.word	0x41004000

0000ba54 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    ba54:	b580      	push	{r7, lr}
    ba56:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    ba58:	46c0      	nop			; (mov r8, r8)
    ba5a:	4b04      	ldr	r3, [pc, #16]	; (ba6c <_system_dfll_wait_for_sync+0x18>)
    ba5c:	68db      	ldr	r3, [r3, #12]
    ba5e:	2210      	movs	r2, #16
    ba60:	4013      	ands	r3, r2
    ba62:	d0fa      	beq.n	ba5a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    ba64:	46c0      	nop			; (mov r8, r8)
    ba66:	46bd      	mov	sp, r7
    ba68:	bd80      	pop	{r7, pc}
    ba6a:	46c0      	nop			; (mov r8, r8)
    ba6c:	40000800 	.word	0x40000800

0000ba70 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    ba70:	b580      	push	{r7, lr}
    ba72:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    ba74:	4b0c      	ldr	r3, [pc, #48]	; (baa8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    ba76:	2202      	movs	r2, #2
    ba78:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    ba7a:	4b0c      	ldr	r3, [pc, #48]	; (baac <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    ba7c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    ba7e:	4a0a      	ldr	r2, [pc, #40]	; (baa8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    ba80:	4b0b      	ldr	r3, [pc, #44]	; (bab0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    ba82:	689b      	ldr	r3, [r3, #8]
    ba84:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    ba86:	4a08      	ldr	r2, [pc, #32]	; (baa8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    ba88:	4b09      	ldr	r3, [pc, #36]	; (bab0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    ba8a:	685b      	ldr	r3, [r3, #4]
    ba8c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    ba8e:	4b06      	ldr	r3, [pc, #24]	; (baa8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    ba90:	2200      	movs	r2, #0
    ba92:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    ba94:	4b05      	ldr	r3, [pc, #20]	; (baac <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    ba96:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    ba98:	4a03      	ldr	r2, [pc, #12]	; (baa8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    ba9a:	4b05      	ldr	r3, [pc, #20]	; (bab0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    ba9c:	681b      	ldr	r3, [r3, #0]
    ba9e:	b29b      	uxth	r3, r3
    baa0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    baa2:	46c0      	nop			; (mov r8, r8)
    baa4:	46bd      	mov	sp, r7
    baa6:	bd80      	pop	{r7, pc}
    baa8:	40000800 	.word	0x40000800
    baac:	0000ba55 	.word	0x0000ba55
    bab0:	200003b0 	.word	0x200003b0

0000bab4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    bab4:	b580      	push	{r7, lr}
    bab6:	b082      	sub	sp, #8
    bab8:	af00      	add	r7, sp, #0
    baba:	0002      	movs	r2, r0
    babc:	1dfb      	adds	r3, r7, #7
    babe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    bac0:	1dfb      	adds	r3, r7, #7
    bac2:	781b      	ldrb	r3, [r3, #0]
    bac4:	2b08      	cmp	r3, #8
    bac6:	d840      	bhi.n	bb4a <system_clock_source_get_hz+0x96>
    bac8:	009a      	lsls	r2, r3, #2
    baca:	4b22      	ldr	r3, [pc, #136]	; (bb54 <system_clock_source_get_hz+0xa0>)
    bacc:	18d3      	adds	r3, r2, r3
    bace:	681b      	ldr	r3, [r3, #0]
    bad0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    bad2:	4b21      	ldr	r3, [pc, #132]	; (bb58 <system_clock_source_get_hz+0xa4>)
    bad4:	691b      	ldr	r3, [r3, #16]
    bad6:	e039      	b.n	bb4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    bad8:	4b20      	ldr	r3, [pc, #128]	; (bb5c <system_clock_source_get_hz+0xa8>)
    bada:	6a1b      	ldr	r3, [r3, #32]
    badc:	059b      	lsls	r3, r3, #22
    bade:	0f9b      	lsrs	r3, r3, #30
    bae0:	b2db      	uxtb	r3, r3
    bae2:	001a      	movs	r2, r3
    bae4:	4b1e      	ldr	r3, [pc, #120]	; (bb60 <system_clock_source_get_hz+0xac>)
    bae6:	40d3      	lsrs	r3, r2
    bae8:	e030      	b.n	bb4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    baea:	2380      	movs	r3, #128	; 0x80
    baec:	021b      	lsls	r3, r3, #8
    baee:	e02d      	b.n	bb4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    baf0:	2380      	movs	r3, #128	; 0x80
    baf2:	021b      	lsls	r3, r3, #8
    baf4:	e02a      	b.n	bb4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    baf6:	4b18      	ldr	r3, [pc, #96]	; (bb58 <system_clock_source_get_hz+0xa4>)
    baf8:	695b      	ldr	r3, [r3, #20]
    bafa:	e027      	b.n	bb4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    bafc:	4b16      	ldr	r3, [pc, #88]	; (bb58 <system_clock_source_get_hz+0xa4>)
    bafe:	681b      	ldr	r3, [r3, #0]
    bb00:	2202      	movs	r2, #2
    bb02:	4013      	ands	r3, r2
    bb04:	d101      	bne.n	bb0a <system_clock_source_get_hz+0x56>
			return 0;
    bb06:	2300      	movs	r3, #0
    bb08:	e020      	b.n	bb4c <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    bb0a:	4b16      	ldr	r3, [pc, #88]	; (bb64 <system_clock_source_get_hz+0xb0>)
    bb0c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    bb0e:	4b12      	ldr	r3, [pc, #72]	; (bb58 <system_clock_source_get_hz+0xa4>)
    bb10:	681b      	ldr	r3, [r3, #0]
    bb12:	2204      	movs	r2, #4
    bb14:	4013      	ands	r3, r2
    bb16:	d009      	beq.n	bb2c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    bb18:	2000      	movs	r0, #0
    bb1a:	4b13      	ldr	r3, [pc, #76]	; (bb68 <system_clock_source_get_hz+0xb4>)
    bb1c:	4798      	blx	r3
    bb1e:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    bb20:	4b0d      	ldr	r3, [pc, #52]	; (bb58 <system_clock_source_get_hz+0xa4>)
    bb22:	689b      	ldr	r3, [r3, #8]
    bb24:	041b      	lsls	r3, r3, #16
    bb26:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    bb28:	4353      	muls	r3, r2
    bb2a:	e00f      	b.n	bb4c <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    bb2c:	4b0f      	ldr	r3, [pc, #60]	; (bb6c <system_clock_source_get_hz+0xb8>)
    bb2e:	e00d      	b.n	bb4c <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    bb30:	4a0a      	ldr	r2, [pc, #40]	; (bb5c <system_clock_source_get_hz+0xa8>)
    bb32:	2350      	movs	r3, #80	; 0x50
    bb34:	5cd3      	ldrb	r3, [r2, r3]
    bb36:	b2db      	uxtb	r3, r3
    bb38:	001a      	movs	r2, r3
    bb3a:	2304      	movs	r3, #4
    bb3c:	4013      	ands	r3, r2
    bb3e:	d101      	bne.n	bb44 <system_clock_source_get_hz+0x90>
			return 0;
    bb40:	2300      	movs	r3, #0
    bb42:	e003      	b.n	bb4c <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    bb44:	4b04      	ldr	r3, [pc, #16]	; (bb58 <system_clock_source_get_hz+0xa4>)
    bb46:	68db      	ldr	r3, [r3, #12]
    bb48:	e000      	b.n	bb4c <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    bb4a:	2300      	movs	r3, #0
	}
}
    bb4c:	0018      	movs	r0, r3
    bb4e:	46bd      	mov	sp, r7
    bb50:	b002      	add	sp, #8
    bb52:	bd80      	pop	{r7, pc}
    bb54:	00014f48 	.word	0x00014f48
    bb58:	200003b0 	.word	0x200003b0
    bb5c:	40000800 	.word	0x40000800
    bb60:	007a1200 	.word	0x007a1200
    bb64:	0000ba55 	.word	0x0000ba55
    bb68:	0000c60d 	.word	0x0000c60d
    bb6c:	02dc6c00 	.word	0x02dc6c00

0000bb70 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    bb70:	b580      	push	{r7, lr}
    bb72:	b084      	sub	sp, #16
    bb74:	af00      	add	r7, sp, #0
    bb76:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    bb78:	4b1a      	ldr	r3, [pc, #104]	; (bbe4 <system_clock_source_osc8m_set_config+0x74>)
    bb7a:	6a1b      	ldr	r3, [r3, #32]
    bb7c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    bb7e:	687b      	ldr	r3, [r7, #4]
    bb80:	781b      	ldrb	r3, [r3, #0]
    bb82:	1c1a      	adds	r2, r3, #0
    bb84:	2303      	movs	r3, #3
    bb86:	4013      	ands	r3, r2
    bb88:	b2da      	uxtb	r2, r3
    bb8a:	230d      	movs	r3, #13
    bb8c:	18fb      	adds	r3, r7, r3
    bb8e:	2103      	movs	r1, #3
    bb90:	400a      	ands	r2, r1
    bb92:	0010      	movs	r0, r2
    bb94:	781a      	ldrb	r2, [r3, #0]
    bb96:	2103      	movs	r1, #3
    bb98:	438a      	bics	r2, r1
    bb9a:	1c11      	adds	r1, r2, #0
    bb9c:	1c02      	adds	r2, r0, #0
    bb9e:	430a      	orrs	r2, r1
    bba0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    bba2:	687b      	ldr	r3, [r7, #4]
    bba4:	789a      	ldrb	r2, [r3, #2]
    bba6:	230c      	movs	r3, #12
    bba8:	18fb      	adds	r3, r7, r3
    bbaa:	01d0      	lsls	r0, r2, #7
    bbac:	781a      	ldrb	r2, [r3, #0]
    bbae:	217f      	movs	r1, #127	; 0x7f
    bbb0:	400a      	ands	r2, r1
    bbb2:	1c11      	adds	r1, r2, #0
    bbb4:	1c02      	adds	r2, r0, #0
    bbb6:	430a      	orrs	r2, r1
    bbb8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    bbba:	687b      	ldr	r3, [r7, #4]
    bbbc:	785a      	ldrb	r2, [r3, #1]
    bbbe:	230c      	movs	r3, #12
    bbc0:	18fb      	adds	r3, r7, r3
    bbc2:	2101      	movs	r1, #1
    bbc4:	400a      	ands	r2, r1
    bbc6:	0190      	lsls	r0, r2, #6
    bbc8:	781a      	ldrb	r2, [r3, #0]
    bbca:	2140      	movs	r1, #64	; 0x40
    bbcc:	438a      	bics	r2, r1
    bbce:	1c11      	adds	r1, r2, #0
    bbd0:	1c02      	adds	r2, r0, #0
    bbd2:	430a      	orrs	r2, r1
    bbd4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    bbd6:	4b03      	ldr	r3, [pc, #12]	; (bbe4 <system_clock_source_osc8m_set_config+0x74>)
    bbd8:	68fa      	ldr	r2, [r7, #12]
    bbda:	621a      	str	r2, [r3, #32]
}
    bbdc:	46c0      	nop			; (mov r8, r8)
    bbde:	46bd      	mov	sp, r7
    bbe0:	b004      	add	sp, #16
    bbe2:	bd80      	pop	{r7, pc}
    bbe4:	40000800 	.word	0x40000800

0000bbe8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    bbe8:	b580      	push	{r7, lr}
    bbea:	b084      	sub	sp, #16
    bbec:	af00      	add	r7, sp, #0
    bbee:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    bbf0:	4a43      	ldr	r2, [pc, #268]	; (bd00 <system_clock_source_xosc32k_set_config+0x118>)
    bbf2:	230c      	movs	r3, #12
    bbf4:	18fb      	adds	r3, r7, r3
    bbf6:	8a92      	ldrh	r2, [r2, #20]
    bbf8:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    bbfa:	687b      	ldr	r3, [r7, #4]
    bbfc:	785b      	ldrb	r3, [r3, #1]
    bbfe:	1c1a      	adds	r2, r3, #0
    bc00:	2307      	movs	r3, #7
    bc02:	4013      	ands	r3, r2
    bc04:	b2da      	uxtb	r2, r3
    bc06:	230c      	movs	r3, #12
    bc08:	18fb      	adds	r3, r7, r3
    bc0a:	2107      	movs	r1, #7
    bc0c:	400a      	ands	r2, r1
    bc0e:	0010      	movs	r0, r2
    bc10:	785a      	ldrb	r2, [r3, #1]
    bc12:	2107      	movs	r1, #7
    bc14:	438a      	bics	r2, r1
    bc16:	1c11      	adds	r1, r2, #0
    bc18:	1c02      	adds	r2, r0, #0
    bc1a:	430a      	orrs	r2, r1
    bc1c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    bc1e:	687b      	ldr	r3, [r7, #4]
    bc20:	781b      	ldrb	r3, [r3, #0]
    bc22:	2b00      	cmp	r3, #0
    bc24:	d106      	bne.n	bc34 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    bc26:	230c      	movs	r3, #12
    bc28:	18fb      	adds	r3, r7, r3
    bc2a:	781a      	ldrb	r2, [r3, #0]
    bc2c:	2104      	movs	r1, #4
    bc2e:	430a      	orrs	r2, r1
    bc30:	701a      	strb	r2, [r3, #0]
    bc32:	e005      	b.n	bc40 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    bc34:	230c      	movs	r3, #12
    bc36:	18fb      	adds	r3, r7, r3
    bc38:	781a      	ldrb	r2, [r3, #0]
    bc3a:	2104      	movs	r1, #4
    bc3c:	438a      	bics	r2, r1
    bc3e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    bc40:	687b      	ldr	r3, [r7, #4]
    bc42:	789a      	ldrb	r2, [r3, #2]
    bc44:	230c      	movs	r3, #12
    bc46:	18fb      	adds	r3, r7, r3
    bc48:	2101      	movs	r1, #1
    bc4a:	400a      	ands	r2, r1
    bc4c:	0150      	lsls	r0, r2, #5
    bc4e:	781a      	ldrb	r2, [r3, #0]
    bc50:	2120      	movs	r1, #32
    bc52:	438a      	bics	r2, r1
    bc54:	1c11      	adds	r1, r2, #0
    bc56:	1c02      	adds	r2, r0, #0
    bc58:	430a      	orrs	r2, r1
    bc5a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    bc5c:	687b      	ldr	r3, [r7, #4]
    bc5e:	78da      	ldrb	r2, [r3, #3]
    bc60:	230c      	movs	r3, #12
    bc62:	18fb      	adds	r3, r7, r3
    bc64:	2101      	movs	r1, #1
    bc66:	400a      	ands	r2, r1
    bc68:	0110      	lsls	r0, r2, #4
    bc6a:	781a      	ldrb	r2, [r3, #0]
    bc6c:	2110      	movs	r1, #16
    bc6e:	438a      	bics	r2, r1
    bc70:	1c11      	adds	r1, r2, #0
    bc72:	1c02      	adds	r2, r0, #0
    bc74:	430a      	orrs	r2, r1
    bc76:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    bc78:	687b      	ldr	r3, [r7, #4]
    bc7a:	791a      	ldrb	r2, [r3, #4]
    bc7c:	230c      	movs	r3, #12
    bc7e:	18fb      	adds	r3, r7, r3
    bc80:	2101      	movs	r1, #1
    bc82:	400a      	ands	r2, r1
    bc84:	00d0      	lsls	r0, r2, #3
    bc86:	781a      	ldrb	r2, [r3, #0]
    bc88:	2108      	movs	r1, #8
    bc8a:	438a      	bics	r2, r1
    bc8c:	1c11      	adds	r1, r2, #0
    bc8e:	1c02      	adds	r2, r0, #0
    bc90:	430a      	orrs	r2, r1
    bc92:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    bc94:	687b      	ldr	r3, [r7, #4]
    bc96:	7b5a      	ldrb	r2, [r3, #13]
    bc98:	230c      	movs	r3, #12
    bc9a:	18fb      	adds	r3, r7, r3
    bc9c:	01d0      	lsls	r0, r2, #7
    bc9e:	781a      	ldrb	r2, [r3, #0]
    bca0:	217f      	movs	r1, #127	; 0x7f
    bca2:	400a      	ands	r2, r1
    bca4:	1c11      	adds	r1, r2, #0
    bca6:	1c02      	adds	r2, r0, #0
    bca8:	430a      	orrs	r2, r1
    bcaa:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    bcac:	687b      	ldr	r3, [r7, #4]
    bcae:	7b1a      	ldrb	r2, [r3, #12]
    bcb0:	230c      	movs	r3, #12
    bcb2:	18fb      	adds	r3, r7, r3
    bcb4:	2101      	movs	r1, #1
    bcb6:	400a      	ands	r2, r1
    bcb8:	0190      	lsls	r0, r2, #6
    bcba:	781a      	ldrb	r2, [r3, #0]
    bcbc:	2140      	movs	r1, #64	; 0x40
    bcbe:	438a      	bics	r2, r1
    bcc0:	1c11      	adds	r1, r2, #0
    bcc2:	1c02      	adds	r2, r0, #0
    bcc4:	430a      	orrs	r2, r1
    bcc6:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    bcc8:	687b      	ldr	r3, [r7, #4]
    bcca:	7b9a      	ldrb	r2, [r3, #14]
    bccc:	230c      	movs	r3, #12
    bcce:	18fb      	adds	r3, r7, r3
    bcd0:	2101      	movs	r1, #1
    bcd2:	400a      	ands	r2, r1
    bcd4:	0110      	lsls	r0, r2, #4
    bcd6:	785a      	ldrb	r2, [r3, #1]
    bcd8:	2110      	movs	r1, #16
    bcda:	438a      	bics	r2, r1
    bcdc:	1c11      	adds	r1, r2, #0
    bcde:	1c02      	adds	r2, r0, #0
    bce0:	430a      	orrs	r2, r1
    bce2:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    bce4:	687b      	ldr	r3, [r7, #4]
    bce6:	689a      	ldr	r2, [r3, #8]
    bce8:	4b06      	ldr	r3, [pc, #24]	; (bd04 <system_clock_source_xosc32k_set_config+0x11c>)
    bcea:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    bcec:	4a04      	ldr	r2, [pc, #16]	; (bd00 <system_clock_source_xosc32k_set_config+0x118>)
    bcee:	230c      	movs	r3, #12
    bcf0:	18fb      	adds	r3, r7, r3
    bcf2:	881b      	ldrh	r3, [r3, #0]
    bcf4:	8293      	strh	r3, [r2, #20]
}
    bcf6:	46c0      	nop			; (mov r8, r8)
    bcf8:	46bd      	mov	sp, r7
    bcfa:	b004      	add	sp, #16
    bcfc:	bd80      	pop	{r7, pc}
    bcfe:	46c0      	nop			; (mov r8, r8)
    bd00:	40000800 	.word	0x40000800
    bd04:	200003b0 	.word	0x200003b0

0000bd08 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    bd08:	b580      	push	{r7, lr}
    bd0a:	b082      	sub	sp, #8
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    bd10:	687b      	ldr	r3, [r7, #4]
    bd12:	7a1b      	ldrb	r3, [r3, #8]
    bd14:	029b      	lsls	r3, r3, #10
    bd16:	041b      	lsls	r3, r3, #16
    bd18:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    bd1a:	687b      	ldr	r3, [r7, #4]
    bd1c:	895b      	ldrh	r3, [r3, #10]
    bd1e:	059b      	lsls	r3, r3, #22
    bd20:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    bd22:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    bd24:	4b2a      	ldr	r3, [pc, #168]	; (bdd0 <system_clock_source_dfll_set_config+0xc8>)
    bd26:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    bd28:	687b      	ldr	r3, [r7, #4]
    bd2a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    bd2c:	687b      	ldr	r3, [r7, #4]
    bd2e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    bd30:	4313      	orrs	r3, r2
    bd32:	b2db      	uxtb	r3, r3
    bd34:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    bd36:	687b      	ldr	r3, [r7, #4]
    bd38:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    bd3a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    bd3c:	687a      	ldr	r2, [r7, #4]
    bd3e:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    bd40:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    bd42:	687b      	ldr	r3, [r7, #4]
    bd44:	785b      	ldrb	r3, [r3, #1]
    bd46:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    bd48:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    bd4a:	4b21      	ldr	r3, [pc, #132]	; (bdd0 <system_clock_source_dfll_set_config+0xc8>)
    bd4c:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    bd4e:	687b      	ldr	r3, [r7, #4]
    bd50:	781b      	ldrb	r3, [r3, #0]
    bd52:	2b04      	cmp	r3, #4
    bd54:	d116      	bne.n	bd84 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bd56:	687b      	ldr	r3, [r7, #4]
    bd58:	7b1b      	ldrb	r3, [r3, #12]
    bd5a:	069b      	lsls	r3, r3, #26
    bd5c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bd5e:	687b      	ldr	r3, [r7, #4]
    bd60:	89db      	ldrh	r3, [r3, #14]
    bd62:	041b      	lsls	r3, r3, #16
    bd64:	0019      	movs	r1, r3
    bd66:	4b1b      	ldr	r3, [pc, #108]	; (bdd4 <system_clock_source_dfll_set_config+0xcc>)
    bd68:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bd6a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    bd6c:	687a      	ldr	r2, [r7, #4]
    bd6e:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bd70:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    bd72:	4b17      	ldr	r3, [pc, #92]	; (bdd0 <system_clock_source_dfll_set_config+0xc8>)
    bd74:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    bd76:	4b16      	ldr	r3, [pc, #88]	; (bdd0 <system_clock_source_dfll_set_config+0xc8>)
    bd78:	681b      	ldr	r3, [r3, #0]
    bd7a:	687a      	ldr	r2, [r7, #4]
    bd7c:	7812      	ldrb	r2, [r2, #0]
    bd7e:	431a      	orrs	r2, r3
    bd80:	4b13      	ldr	r3, [pc, #76]	; (bdd0 <system_clock_source_dfll_set_config+0xc8>)
    bd82:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    bd84:	687b      	ldr	r3, [r7, #4]
    bd86:	781b      	ldrb	r3, [r3, #0]
    bd88:	2b20      	cmp	r3, #32
    bd8a:	d11c      	bne.n	bdc6 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bd8c:	687b      	ldr	r3, [r7, #4]
    bd8e:	7b1b      	ldrb	r3, [r3, #12]
    bd90:	069b      	lsls	r3, r3, #26
    bd92:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bd94:	687b      	ldr	r3, [r7, #4]
    bd96:	89db      	ldrh	r3, [r3, #14]
    bd98:	041b      	lsls	r3, r3, #16
    bd9a:	0019      	movs	r1, r3
    bd9c:	4b0d      	ldr	r3, [pc, #52]	; (bdd4 <system_clock_source_dfll_set_config+0xcc>)
    bd9e:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bda0:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    bda2:	687a      	ldr	r2, [r7, #4]
    bda4:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bda6:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    bda8:	4b09      	ldr	r3, [pc, #36]	; (bdd0 <system_clock_source_dfll_set_config+0xc8>)
    bdaa:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    bdac:	4b08      	ldr	r3, [pc, #32]	; (bdd0 <system_clock_source_dfll_set_config+0xc8>)
    bdae:	681b      	ldr	r3, [r3, #0]
    bdb0:	687a      	ldr	r2, [r7, #4]
    bdb2:	7812      	ldrb	r2, [r2, #0]
    bdb4:	2104      	movs	r1, #4
    bdb6:	430a      	orrs	r2, r1
    bdb8:	b2d2      	uxtb	r2, r2
    bdba:	4313      	orrs	r3, r2
    bdbc:	2280      	movs	r2, #128	; 0x80
    bdbe:	00d2      	lsls	r2, r2, #3
    bdc0:	431a      	orrs	r2, r3
    bdc2:	4b03      	ldr	r3, [pc, #12]	; (bdd0 <system_clock_source_dfll_set_config+0xc8>)
    bdc4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    bdc6:	46c0      	nop			; (mov r8, r8)
    bdc8:	46bd      	mov	sp, r7
    bdca:	b002      	add	sp, #8
    bdcc:	bd80      	pop	{r7, pc}
    bdce:	46c0      	nop			; (mov r8, r8)
    bdd0:	200003b0 	.word	0x200003b0
    bdd4:	03ff0000 	.word	0x03ff0000

0000bdd8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    bdd8:	b580      	push	{r7, lr}
    bdda:	b082      	sub	sp, #8
    bddc:	af00      	add	r7, sp, #0
    bdde:	0002      	movs	r2, r0
    bde0:	1dfb      	adds	r3, r7, #7
    bde2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    bde4:	1dfb      	adds	r3, r7, #7
    bde6:	781b      	ldrb	r3, [r3, #0]
    bde8:	2b08      	cmp	r3, #8
    bdea:	d83b      	bhi.n	be64 <system_clock_source_enable+0x8c>
    bdec:	009a      	lsls	r2, r3, #2
    bdee:	4b21      	ldr	r3, [pc, #132]	; (be74 <system_clock_source_enable+0x9c>)
    bdf0:	18d3      	adds	r3, r2, r3
    bdf2:	681b      	ldr	r3, [r3, #0]
    bdf4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    bdf6:	4b20      	ldr	r3, [pc, #128]	; (be78 <system_clock_source_enable+0xa0>)
    bdf8:	4a1f      	ldr	r2, [pc, #124]	; (be78 <system_clock_source_enable+0xa0>)
    bdfa:	6a12      	ldr	r2, [r2, #32]
    bdfc:	2102      	movs	r1, #2
    bdfe:	430a      	orrs	r2, r1
    be00:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    be02:	2300      	movs	r3, #0
    be04:	e031      	b.n	be6a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    be06:	4b1c      	ldr	r3, [pc, #112]	; (be78 <system_clock_source_enable+0xa0>)
    be08:	4a1b      	ldr	r2, [pc, #108]	; (be78 <system_clock_source_enable+0xa0>)
    be0a:	6992      	ldr	r2, [r2, #24]
    be0c:	2102      	movs	r1, #2
    be0e:	430a      	orrs	r2, r1
    be10:	619a      	str	r2, [r3, #24]
		break;
    be12:	e029      	b.n	be68 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    be14:	4a18      	ldr	r2, [pc, #96]	; (be78 <system_clock_source_enable+0xa0>)
    be16:	4b18      	ldr	r3, [pc, #96]	; (be78 <system_clock_source_enable+0xa0>)
    be18:	8a1b      	ldrh	r3, [r3, #16]
    be1a:	b29b      	uxth	r3, r3
    be1c:	2102      	movs	r1, #2
    be1e:	430b      	orrs	r3, r1
    be20:	b29b      	uxth	r3, r3
    be22:	8213      	strh	r3, [r2, #16]
		break;
    be24:	e020      	b.n	be68 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    be26:	4a14      	ldr	r2, [pc, #80]	; (be78 <system_clock_source_enable+0xa0>)
    be28:	4b13      	ldr	r3, [pc, #76]	; (be78 <system_clock_source_enable+0xa0>)
    be2a:	8a9b      	ldrh	r3, [r3, #20]
    be2c:	b29b      	uxth	r3, r3
    be2e:	2102      	movs	r1, #2
    be30:	430b      	orrs	r3, r1
    be32:	b29b      	uxth	r3, r3
    be34:	8293      	strh	r3, [r2, #20]
		break;
    be36:	e017      	b.n	be68 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    be38:	4b10      	ldr	r3, [pc, #64]	; (be7c <system_clock_source_enable+0xa4>)
    be3a:	681b      	ldr	r3, [r3, #0]
    be3c:	2202      	movs	r2, #2
    be3e:	431a      	orrs	r2, r3
    be40:	4b0e      	ldr	r3, [pc, #56]	; (be7c <system_clock_source_enable+0xa4>)
    be42:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    be44:	4b0e      	ldr	r3, [pc, #56]	; (be80 <system_clock_source_enable+0xa8>)
    be46:	4798      	blx	r3
		break;
    be48:	e00e      	b.n	be68 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    be4a:	4a0b      	ldr	r2, [pc, #44]	; (be78 <system_clock_source_enable+0xa0>)
    be4c:	490a      	ldr	r1, [pc, #40]	; (be78 <system_clock_source_enable+0xa0>)
    be4e:	2344      	movs	r3, #68	; 0x44
    be50:	5ccb      	ldrb	r3, [r1, r3]
    be52:	b2db      	uxtb	r3, r3
    be54:	2102      	movs	r1, #2
    be56:	430b      	orrs	r3, r1
    be58:	b2d9      	uxtb	r1, r3
    be5a:	2344      	movs	r3, #68	; 0x44
    be5c:	54d1      	strb	r1, [r2, r3]
		break;
    be5e:	e003      	b.n	be68 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    be60:	2300      	movs	r3, #0
    be62:	e002      	b.n	be6a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    be64:	2317      	movs	r3, #23
    be66:	e000      	b.n	be6a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    be68:	2300      	movs	r3, #0
}
    be6a:	0018      	movs	r0, r3
    be6c:	46bd      	mov	sp, r7
    be6e:	b002      	add	sp, #8
    be70:	bd80      	pop	{r7, pc}
    be72:	46c0      	nop			; (mov r8, r8)
    be74:	00014f6c 	.word	0x00014f6c
    be78:	40000800 	.word	0x40000800
    be7c:	200003b0 	.word	0x200003b0
    be80:	0000ba71 	.word	0x0000ba71

0000be84 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    be84:	b580      	push	{r7, lr}
    be86:	b084      	sub	sp, #16
    be88:	af00      	add	r7, sp, #0
    be8a:	0002      	movs	r2, r0
    be8c:	1dfb      	adds	r3, r7, #7
    be8e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    be90:	2300      	movs	r3, #0
    be92:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    be94:	1dfb      	adds	r3, r7, #7
    be96:	781b      	ldrb	r3, [r3, #0]
    be98:	2b08      	cmp	r3, #8
    be9a:	d821      	bhi.n	bee0 <system_clock_source_is_ready+0x5c>
    be9c:	009a      	lsls	r2, r3, #2
    be9e:	4b18      	ldr	r3, [pc, #96]	; (bf00 <system_clock_source_is_ready+0x7c>)
    bea0:	18d3      	adds	r3, r2, r3
    bea2:	681b      	ldr	r3, [r3, #0]
    bea4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    bea6:	2308      	movs	r3, #8
    bea8:	60fb      	str	r3, [r7, #12]
		break;
    beaa:	e01b      	b.n	bee4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    beac:	2304      	movs	r3, #4
    beae:	60fb      	str	r3, [r7, #12]
		break;
    beb0:	e018      	b.n	bee4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    beb2:	2301      	movs	r3, #1
    beb4:	60fb      	str	r3, [r7, #12]
		break;
    beb6:	e015      	b.n	bee4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    beb8:	2302      	movs	r3, #2
    beba:	60fb      	str	r3, [r7, #12]
		break;
    bebc:	e012      	b.n	bee4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    bebe:	23d0      	movs	r3, #208	; 0xd0
    bec0:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    bec2:	e00f      	b.n	bee4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    bec4:	4a0f      	ldr	r2, [pc, #60]	; (bf04 <system_clock_source_is_ready+0x80>)
    bec6:	2350      	movs	r3, #80	; 0x50
    bec8:	5cd3      	ldrb	r3, [r2, r3]
    beca:	b2db      	uxtb	r3, r3
    becc:	001a      	movs	r2, r3
    bece:	2303      	movs	r3, #3
    bed0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    bed2:	3b03      	subs	r3, #3
    bed4:	425a      	negs	r2, r3
    bed6:	4153      	adcs	r3, r2
    bed8:	b2db      	uxtb	r3, r3
    beda:	e00c      	b.n	bef6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    bedc:	2301      	movs	r3, #1
    bede:	e00a      	b.n	bef6 <system_clock_source_is_ready+0x72>

	default:
		return false;
    bee0:	2300      	movs	r3, #0
    bee2:	e008      	b.n	bef6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    bee4:	4b07      	ldr	r3, [pc, #28]	; (bf04 <system_clock_source_is_ready+0x80>)
    bee6:	68db      	ldr	r3, [r3, #12]
    bee8:	68fa      	ldr	r2, [r7, #12]
    beea:	401a      	ands	r2, r3
    beec:	68fb      	ldr	r3, [r7, #12]
    beee:	1ad3      	subs	r3, r2, r3
    bef0:	425a      	negs	r2, r3
    bef2:	4153      	adcs	r3, r2
    bef4:	b2db      	uxtb	r3, r3
}
    bef6:	0018      	movs	r0, r3
    bef8:	46bd      	mov	sp, r7
    befa:	b004      	add	sp, #16
    befc:	bd80      	pop	{r7, pc}
    befe:	46c0      	nop			; (mov r8, r8)
    bf00:	00014f90 	.word	0x00014f90
    bf04:	40000800 	.word	0x40000800

0000bf08 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    bf08:	b580      	push	{r7, lr}
    bf0a:	b082      	sub	sp, #8
    bf0c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    bf0e:	003b      	movs	r3, r7
    bf10:	2202      	movs	r2, #2
    bf12:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    bf14:	2300      	movs	r3, #0
    bf16:	607b      	str	r3, [r7, #4]
    bf18:	e009      	b.n	bf2e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    bf1a:	687b      	ldr	r3, [r7, #4]
    bf1c:	b2db      	uxtb	r3, r3
    bf1e:	003a      	movs	r2, r7
    bf20:	0011      	movs	r1, r2
    bf22:	0018      	movs	r0, r3
    bf24:	4b05      	ldr	r3, [pc, #20]	; (bf3c <_switch_peripheral_gclk+0x34>)
    bf26:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    bf28:	687b      	ldr	r3, [r7, #4]
    bf2a:	3301      	adds	r3, #1
    bf2c:	607b      	str	r3, [r7, #4]
    bf2e:	687b      	ldr	r3, [r7, #4]
    bf30:	2b24      	cmp	r3, #36	; 0x24
    bf32:	d9f2      	bls.n	bf1a <_switch_peripheral_gclk+0x12>
	}
}
    bf34:	46c0      	nop			; (mov r8, r8)
    bf36:	46bd      	mov	sp, r7
    bf38:	b002      	add	sp, #8
    bf3a:	bd80      	pop	{r7, pc}
    bf3c:	0000c4e9 	.word	0x0000c4e9

0000bf40 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    bf40:	b580      	push	{r7, lr}
    bf42:	b0aa      	sub	sp, #168	; 0xa8
    bf44:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    bf46:	4b87      	ldr	r3, [pc, #540]	; (c164 <system_clock_init+0x224>)
    bf48:	22c2      	movs	r2, #194	; 0xc2
    bf4a:	00d2      	lsls	r2, r2, #3
    bf4c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    bf4e:	2002      	movs	r0, #2
    bf50:	4b85      	ldr	r3, [pc, #532]	; (c168 <system_clock_init+0x228>)
    bf52:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    bf54:	4b85      	ldr	r3, [pc, #532]	; (c16c <system_clock_init+0x22c>)
    bf56:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    bf58:	2394      	movs	r3, #148	; 0x94
    bf5a:	18fb      	adds	r3, r7, r3
    bf5c:	0018      	movs	r0, r3
    bf5e:	4b84      	ldr	r3, [pc, #528]	; (c170 <system_clock_init+0x230>)
    bf60:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    bf62:	2394      	movs	r3, #148	; 0x94
    bf64:	18fb      	adds	r3, r7, r3
    bf66:	2280      	movs	r2, #128	; 0x80
    bf68:	0212      	lsls	r2, r2, #8
    bf6a:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    bf6c:	2394      	movs	r3, #148	; 0x94
    bf6e:	18fb      	adds	r3, r7, r3
    bf70:	2200      	movs	r2, #0
    bf72:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    bf74:	2394      	movs	r3, #148	; 0x94
    bf76:	18fb      	adds	r3, r7, r3
    bf78:	2203      	movs	r2, #3
    bf7a:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    bf7c:	2394      	movs	r3, #148	; 0x94
    bf7e:	18fb      	adds	r3, r7, r3
    bf80:	2200      	movs	r2, #0
    bf82:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    bf84:	2394      	movs	r3, #148	; 0x94
    bf86:	18fb      	adds	r3, r7, r3
    bf88:	2200      	movs	r2, #0
    bf8a:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    bf8c:	2394      	movs	r3, #148	; 0x94
    bf8e:	18fb      	adds	r3, r7, r3
    bf90:	2201      	movs	r2, #1
    bf92:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    bf94:	2394      	movs	r3, #148	; 0x94
    bf96:	18fb      	adds	r3, r7, r3
    bf98:	2200      	movs	r2, #0
    bf9a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    bf9c:	2394      	movs	r3, #148	; 0x94
    bf9e:	18fb      	adds	r3, r7, r3
    bfa0:	2200      	movs	r2, #0
    bfa2:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    bfa4:	2394      	movs	r3, #148	; 0x94
    bfa6:	18fb      	adds	r3, r7, r3
    bfa8:	0018      	movs	r0, r3
    bfaa:	4b72      	ldr	r3, [pc, #456]	; (c174 <system_clock_init+0x234>)
    bfac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    bfae:	2005      	movs	r0, #5
    bfb0:	4b71      	ldr	r3, [pc, #452]	; (c178 <system_clock_init+0x238>)
    bfb2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    bfb4:	46c0      	nop			; (mov r8, r8)
    bfb6:	2005      	movs	r0, #5
    bfb8:	4b70      	ldr	r3, [pc, #448]	; (c17c <system_clock_init+0x23c>)
    bfba:	4798      	blx	r3
    bfbc:	0003      	movs	r3, r0
    bfbe:	001a      	movs	r2, r3
    bfc0:	2301      	movs	r3, #1
    bfc2:	4053      	eors	r3, r2
    bfc4:	b2db      	uxtb	r3, r3
    bfc6:	2b00      	cmp	r3, #0
    bfc8:	d1f5      	bne.n	bfb6 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    bfca:	4a66      	ldr	r2, [pc, #408]	; (c164 <system_clock_init+0x224>)
    bfcc:	8a93      	ldrh	r3, [r2, #20]
    bfce:	2180      	movs	r1, #128	; 0x80
    bfd0:	430b      	orrs	r3, r1
    bfd2:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    bfd4:	2380      	movs	r3, #128	; 0x80
    bfd6:	18fb      	adds	r3, r7, r3
    bfd8:	0018      	movs	r0, r3
    bfda:	4b69      	ldr	r3, [pc, #420]	; (c180 <system_clock_init+0x240>)
    bfdc:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    bfde:	2380      	movs	r3, #128	; 0x80
    bfe0:	18fb      	adds	r3, r7, r3
    bfe2:	2204      	movs	r2, #4
    bfe4:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    bfe6:	2380      	movs	r3, #128	; 0x80
    bfe8:	18fb      	adds	r3, r7, r3
    bfea:	2200      	movs	r2, #0
    bfec:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    bfee:	4b65      	ldr	r3, [pc, #404]	; (c184 <system_clock_init+0x244>)
    bff0:	681b      	ldr	r3, [r3, #0]
    bff2:	0e9b      	lsrs	r3, r3, #26
    bff4:	22a4      	movs	r2, #164	; 0xa4
    bff6:	18ba      	adds	r2, r7, r2
    bff8:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    bffa:	23a4      	movs	r3, #164	; 0xa4
    bffc:	18fb      	adds	r3, r7, r3
    bffe:	681b      	ldr	r3, [r3, #0]
    c000:	2b3f      	cmp	r3, #63	; 0x3f
    c002:	d103      	bne.n	c00c <system_clock_init+0xcc>
		coarse = 0x1f;
    c004:	231f      	movs	r3, #31
    c006:	22a4      	movs	r2, #164	; 0xa4
    c008:	18ba      	adds	r2, r7, r2
    c00a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    c00c:	23a4      	movs	r3, #164	; 0xa4
    c00e:	18fb      	adds	r3, r7, r3
    c010:	681b      	ldr	r3, [r3, #0]
    c012:	b2da      	uxtb	r2, r3
    c014:	2380      	movs	r3, #128	; 0x80
    c016:	18fb      	adds	r3, r7, r3
    c018:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    c01a:	2380      	movs	r3, #128	; 0x80
    c01c:	18fb      	adds	r3, r7, r3
    c01e:	2200      	movs	r2, #0
    c020:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    c022:	2380      	movs	r3, #128	; 0x80
    c024:	18fb      	adds	r3, r7, r3
    c026:	2200      	movs	r2, #0
    c028:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    c02a:	2380      	movs	r3, #128	; 0x80
    c02c:	18fb      	adds	r3, r7, r3
    c02e:	2200      	movs	r2, #0
    c030:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    c032:	2380      	movs	r3, #128	; 0x80
    c034:	18fb      	adds	r3, r7, r3
    c036:	2200      	movs	r2, #0
    c038:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    c03a:	2380      	movs	r3, #128	; 0x80
    c03c:	18fb      	adds	r3, r7, r3
    c03e:	4a52      	ldr	r2, [pc, #328]	; (c188 <system_clock_init+0x248>)
    c040:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    c042:	2380      	movs	r3, #128	; 0x80
    c044:	18fb      	adds	r3, r7, r3
    c046:	2207      	movs	r2, #7
    c048:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    c04a:	2380      	movs	r3, #128	; 0x80
    c04c:	18fb      	adds	r3, r7, r3
    c04e:	223f      	movs	r2, #63	; 0x3f
    c050:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    c052:	2380      	movs	r3, #128	; 0x80
    c054:	18fb      	adds	r3, r7, r3
    c056:	0018      	movs	r0, r3
    c058:	4b4c      	ldr	r3, [pc, #304]	; (c18c <system_clock_init+0x24c>)
    c05a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    c05c:	237c      	movs	r3, #124	; 0x7c
    c05e:	18fb      	adds	r3, r7, r3
    c060:	0018      	movs	r0, r3
    c062:	4b4b      	ldr	r3, [pc, #300]	; (c190 <system_clock_init+0x250>)
    c064:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    c066:	237c      	movs	r3, #124	; 0x7c
    c068:	18fb      	adds	r3, r7, r3
    c06a:	2200      	movs	r2, #0
    c06c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    c06e:	237c      	movs	r3, #124	; 0x7c
    c070:	18fb      	adds	r3, r7, r3
    c072:	2201      	movs	r2, #1
    c074:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    c076:	237c      	movs	r3, #124	; 0x7c
    c078:	18fb      	adds	r3, r7, r3
    c07a:	2200      	movs	r2, #0
    c07c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    c07e:	237c      	movs	r3, #124	; 0x7c
    c080:	18fb      	adds	r3, r7, r3
    c082:	0018      	movs	r0, r3
    c084:	4b43      	ldr	r3, [pc, #268]	; (c194 <system_clock_init+0x254>)
    c086:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    c088:	2006      	movs	r0, #6
    c08a:	4b3b      	ldr	r3, [pc, #236]	; (c178 <system_clock_init+0x238>)
    c08c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    c08e:	4b42      	ldr	r3, [pc, #264]	; (c198 <system_clock_init+0x258>)
    c090:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    c092:	2364      	movs	r3, #100	; 0x64
    c094:	18fb      	adds	r3, r7, r3
    c096:	0018      	movs	r0, r3
    c098:	4b40      	ldr	r3, [pc, #256]	; (c19c <system_clock_init+0x25c>)
    c09a:	4798      	blx	r3
    c09c:	2364      	movs	r3, #100	; 0x64
    c09e:	18fb      	adds	r3, r7, r3
    c0a0:	2205      	movs	r2, #5
    c0a2:	701a      	strb	r2, [r3, #0]
    c0a4:	2364      	movs	r3, #100	; 0x64
    c0a6:	18fb      	adds	r3, r7, r3
    c0a8:	2201      	movs	r2, #1
    c0aa:	605a      	str	r2, [r3, #4]
    c0ac:	2364      	movs	r3, #100	; 0x64
    c0ae:	18fb      	adds	r3, r7, r3
    c0b0:	2200      	movs	r2, #0
    c0b2:	721a      	strb	r2, [r3, #8]
    c0b4:	2364      	movs	r3, #100	; 0x64
    c0b6:	18fb      	adds	r3, r7, r3
    c0b8:	2200      	movs	r2, #0
    c0ba:	725a      	strb	r2, [r3, #9]
    c0bc:	2364      	movs	r3, #100	; 0x64
    c0be:	18fb      	adds	r3, r7, r3
    c0c0:	0019      	movs	r1, r3
    c0c2:	2001      	movs	r0, #1
    c0c4:	4b36      	ldr	r3, [pc, #216]	; (c1a0 <system_clock_init+0x260>)
    c0c6:	4798      	blx	r3
    c0c8:	2001      	movs	r0, #1
    c0ca:	4b36      	ldr	r3, [pc, #216]	; (c1a4 <system_clock_init+0x264>)
    c0cc:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    c0ce:	230c      	movs	r3, #12
    c0d0:	18fb      	adds	r3, r7, r3
    c0d2:	0018      	movs	r0, r3
    c0d4:	4b34      	ldr	r3, [pc, #208]	; (c1a8 <system_clock_init+0x268>)
    c0d6:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    c0d8:	230c      	movs	r3, #12
    c0da:	18fb      	adds	r3, r7, r3
    c0dc:	2201      	movs	r2, #1
    c0de:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    c0e0:	230c      	movs	r3, #12
    c0e2:	18fb      	adds	r3, r7, r3
    c0e4:	0019      	movs	r1, r3
    c0e6:	2000      	movs	r0, #0
    c0e8:	4b30      	ldr	r3, [pc, #192]	; (c1ac <system_clock_init+0x26c>)
    c0ea:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    c0ec:	2000      	movs	r0, #0
    c0ee:	4b30      	ldr	r3, [pc, #192]	; (c1b0 <system_clock_init+0x270>)
    c0f0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    c0f2:	2007      	movs	r0, #7
    c0f4:	4b20      	ldr	r3, [pc, #128]	; (c178 <system_clock_init+0x238>)
    c0f6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    c0f8:	46c0      	nop			; (mov r8, r8)
    c0fa:	2007      	movs	r0, #7
    c0fc:	4b1f      	ldr	r3, [pc, #124]	; (c17c <system_clock_init+0x23c>)
    c0fe:	4798      	blx	r3
    c100:	0003      	movs	r3, r0
    c102:	001a      	movs	r2, r3
    c104:	2301      	movs	r3, #1
    c106:	4053      	eors	r3, r2
    c108:	b2db      	uxtb	r3, r3
    c10a:	2b00      	cmp	r3, #0
    c10c:	d1f5      	bne.n	c0fa <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    c10e:	2000      	movs	r0, #0
    c110:	4b28      	ldr	r3, [pc, #160]	; (c1b4 <system_clock_init+0x274>)
    c112:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    c114:	2100      	movs	r1, #0
    c116:	2000      	movs	r0, #0
    c118:	4b27      	ldr	r3, [pc, #156]	; (c1b8 <system_clock_init+0x278>)
    c11a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    c11c:	2100      	movs	r1, #0
    c11e:	2001      	movs	r0, #1
    c120:	4b25      	ldr	r3, [pc, #148]	; (c1b8 <system_clock_init+0x278>)
    c122:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    c124:	2100      	movs	r1, #0
    c126:	2002      	movs	r0, #2
    c128:	4b23      	ldr	r3, [pc, #140]	; (c1b8 <system_clock_init+0x278>)
    c12a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    c12c:	003b      	movs	r3, r7
    c12e:	0018      	movs	r0, r3
    c130:	4b1a      	ldr	r3, [pc, #104]	; (c19c <system_clock_init+0x25c>)
    c132:	4798      	blx	r3
    c134:	003b      	movs	r3, r7
    c136:	2207      	movs	r2, #7
    c138:	701a      	strb	r2, [r3, #0]
    c13a:	003b      	movs	r3, r7
    c13c:	2201      	movs	r2, #1
    c13e:	605a      	str	r2, [r3, #4]
    c140:	003b      	movs	r3, r7
    c142:	2200      	movs	r2, #0
    c144:	721a      	strb	r2, [r3, #8]
    c146:	003b      	movs	r3, r7
    c148:	2200      	movs	r2, #0
    c14a:	725a      	strb	r2, [r3, #9]
    c14c:	003b      	movs	r3, r7
    c14e:	0019      	movs	r1, r3
    c150:	2000      	movs	r0, #0
    c152:	4b13      	ldr	r3, [pc, #76]	; (c1a0 <system_clock_init+0x260>)
    c154:	4798      	blx	r3
    c156:	2000      	movs	r0, #0
    c158:	4b12      	ldr	r3, [pc, #72]	; (c1a4 <system_clock_init+0x264>)
    c15a:	4798      	blx	r3
#endif
}
    c15c:	46c0      	nop			; (mov r8, r8)
    c15e:	46bd      	mov	sp, r7
    c160:	b02a      	add	sp, #168	; 0xa8
    c162:	bd80      	pop	{r7, pc}
    c164:	40000800 	.word	0x40000800
    c168:	0000ba21 	.word	0x0000ba21
    c16c:	0000bf09 	.word	0x0000bf09
    c170:	0000b8f1 	.word	0x0000b8f1
    c174:	0000bbe9 	.word	0x0000bbe9
    c178:	0000bdd9 	.word	0x0000bdd9
    c17c:	0000be85 	.word	0x0000be85
    c180:	0000b95b 	.word	0x0000b95b
    c184:	00806024 	.word	0x00806024
    c188:	000005b9 	.word	0x000005b9
    c18c:	0000bd09 	.word	0x0000bd09
    c190:	0000b939 	.word	0x0000b939
    c194:	0000bb71 	.word	0x0000bb71
    c198:	0000c261 	.word	0x0000c261
    c19c:	0000b8ad 	.word	0x0000b8ad
    c1a0:	0000c291 	.word	0x0000c291
    c1a4:	0000c3b5 	.word	0x0000c3b5
    c1a8:	0000b8db 	.word	0x0000b8db
    c1ac:	0000c4e9 	.word	0x0000c4e9
    c1b0:	0000c52d 	.word	0x0000c52d
    c1b4:	0000b9ad 	.word	0x0000b9ad
    c1b8:	0000b9cd 	.word	0x0000b9cd

0000c1bc <system_apb_clock_set_mask>:
{
    c1bc:	b580      	push	{r7, lr}
    c1be:	b082      	sub	sp, #8
    c1c0:	af00      	add	r7, sp, #0
    c1c2:	0002      	movs	r2, r0
    c1c4:	6039      	str	r1, [r7, #0]
    c1c6:	1dfb      	adds	r3, r7, #7
    c1c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c1ca:	1dfb      	adds	r3, r7, #7
    c1cc:	781b      	ldrb	r3, [r3, #0]
    c1ce:	2b01      	cmp	r3, #1
    c1d0:	d00a      	beq.n	c1e8 <system_apb_clock_set_mask+0x2c>
    c1d2:	2b02      	cmp	r3, #2
    c1d4:	d00f      	beq.n	c1f6 <system_apb_clock_set_mask+0x3a>
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	d114      	bne.n	c204 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c1da:	4b0e      	ldr	r3, [pc, #56]	; (c214 <system_apb_clock_set_mask+0x58>)
    c1dc:	4a0d      	ldr	r2, [pc, #52]	; (c214 <system_apb_clock_set_mask+0x58>)
    c1de:	6991      	ldr	r1, [r2, #24]
    c1e0:	683a      	ldr	r2, [r7, #0]
    c1e2:	430a      	orrs	r2, r1
    c1e4:	619a      	str	r2, [r3, #24]
			break;
    c1e6:	e00f      	b.n	c208 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c1e8:	4b0a      	ldr	r3, [pc, #40]	; (c214 <system_apb_clock_set_mask+0x58>)
    c1ea:	4a0a      	ldr	r2, [pc, #40]	; (c214 <system_apb_clock_set_mask+0x58>)
    c1ec:	69d1      	ldr	r1, [r2, #28]
    c1ee:	683a      	ldr	r2, [r7, #0]
    c1f0:	430a      	orrs	r2, r1
    c1f2:	61da      	str	r2, [r3, #28]
			break;
    c1f4:	e008      	b.n	c208 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c1f6:	4b07      	ldr	r3, [pc, #28]	; (c214 <system_apb_clock_set_mask+0x58>)
    c1f8:	4a06      	ldr	r2, [pc, #24]	; (c214 <system_apb_clock_set_mask+0x58>)
    c1fa:	6a11      	ldr	r1, [r2, #32]
    c1fc:	683a      	ldr	r2, [r7, #0]
    c1fe:	430a      	orrs	r2, r1
    c200:	621a      	str	r2, [r3, #32]
			break;
    c202:	e001      	b.n	c208 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c204:	2317      	movs	r3, #23
    c206:	e000      	b.n	c20a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c208:	2300      	movs	r3, #0
}
    c20a:	0018      	movs	r0, r3
    c20c:	46bd      	mov	sp, r7
    c20e:	b002      	add	sp, #8
    c210:	bd80      	pop	{r7, pc}
    c212:	46c0      	nop			; (mov r8, r8)
    c214:	40000400 	.word	0x40000400

0000c218 <system_interrupt_enter_critical_section>:
{
    c218:	b580      	push	{r7, lr}
    c21a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    c21c:	4b02      	ldr	r3, [pc, #8]	; (c228 <system_interrupt_enter_critical_section+0x10>)
    c21e:	4798      	blx	r3
}
    c220:	46c0      	nop			; (mov r8, r8)
    c222:	46bd      	mov	sp, r7
    c224:	bd80      	pop	{r7, pc}
    c226:	46c0      	nop			; (mov r8, r8)
    c228:	0000b645 	.word	0x0000b645

0000c22c <system_interrupt_leave_critical_section>:
{
    c22c:	b580      	push	{r7, lr}
    c22e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    c230:	4b02      	ldr	r3, [pc, #8]	; (c23c <system_interrupt_leave_critical_section+0x10>)
    c232:	4798      	blx	r3
}
    c234:	46c0      	nop			; (mov r8, r8)
    c236:	46bd      	mov	sp, r7
    c238:	bd80      	pop	{r7, pc}
    c23a:	46c0      	nop			; (mov r8, r8)
    c23c:	0000b699 	.word	0x0000b699

0000c240 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    c240:	b580      	push	{r7, lr}
    c242:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c244:	4b05      	ldr	r3, [pc, #20]	; (c25c <system_gclk_is_syncing+0x1c>)
    c246:	785b      	ldrb	r3, [r3, #1]
    c248:	b2db      	uxtb	r3, r3
    c24a:	b25b      	sxtb	r3, r3
    c24c:	2b00      	cmp	r3, #0
    c24e:	da01      	bge.n	c254 <system_gclk_is_syncing+0x14>
		return true;
    c250:	2301      	movs	r3, #1
    c252:	e000      	b.n	c256 <system_gclk_is_syncing+0x16>
	}

	return false;
    c254:	2300      	movs	r3, #0
}
    c256:	0018      	movs	r0, r3
    c258:	46bd      	mov	sp, r7
    c25a:	bd80      	pop	{r7, pc}
    c25c:	40000c00 	.word	0x40000c00

0000c260 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    c260:	b580      	push	{r7, lr}
    c262:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    c264:	2108      	movs	r1, #8
    c266:	2000      	movs	r0, #0
    c268:	4b07      	ldr	r3, [pc, #28]	; (c288 <system_gclk_init+0x28>)
    c26a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    c26c:	4b07      	ldr	r3, [pc, #28]	; (c28c <system_gclk_init+0x2c>)
    c26e:	2201      	movs	r2, #1
    c270:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    c272:	46c0      	nop			; (mov r8, r8)
    c274:	4b05      	ldr	r3, [pc, #20]	; (c28c <system_gclk_init+0x2c>)
    c276:	781b      	ldrb	r3, [r3, #0]
    c278:	b2db      	uxtb	r3, r3
    c27a:	001a      	movs	r2, r3
    c27c:	2301      	movs	r3, #1
    c27e:	4013      	ands	r3, r2
    c280:	d1f8      	bne.n	c274 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    c282:	46c0      	nop			; (mov r8, r8)
    c284:	46bd      	mov	sp, r7
    c286:	bd80      	pop	{r7, pc}
    c288:	0000c1bd 	.word	0x0000c1bd
    c28c:	40000c00 	.word	0x40000c00

0000c290 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    c290:	b580      	push	{r7, lr}
    c292:	b086      	sub	sp, #24
    c294:	af00      	add	r7, sp, #0
    c296:	0002      	movs	r2, r0
    c298:	6039      	str	r1, [r7, #0]
    c29a:	1dfb      	adds	r3, r7, #7
    c29c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    c29e:	1dfb      	adds	r3, r7, #7
    c2a0:	781b      	ldrb	r3, [r3, #0]
    c2a2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    c2a4:	1dfb      	adds	r3, r7, #7
    c2a6:	781b      	ldrb	r3, [r3, #0]
    c2a8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    c2aa:	683b      	ldr	r3, [r7, #0]
    c2ac:	781b      	ldrb	r3, [r3, #0]
    c2ae:	021b      	lsls	r3, r3, #8
    c2b0:	001a      	movs	r2, r3
    c2b2:	697b      	ldr	r3, [r7, #20]
    c2b4:	4313      	orrs	r3, r2
    c2b6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    c2b8:	683b      	ldr	r3, [r7, #0]
    c2ba:	785b      	ldrb	r3, [r3, #1]
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d004      	beq.n	c2ca <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    c2c0:	697b      	ldr	r3, [r7, #20]
    c2c2:	2280      	movs	r2, #128	; 0x80
    c2c4:	02d2      	lsls	r2, r2, #11
    c2c6:	4313      	orrs	r3, r2
    c2c8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    c2ca:	683b      	ldr	r3, [r7, #0]
    c2cc:	7a5b      	ldrb	r3, [r3, #9]
    c2ce:	2b00      	cmp	r3, #0
    c2d0:	d004      	beq.n	c2dc <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    c2d2:	697b      	ldr	r3, [r7, #20]
    c2d4:	2280      	movs	r2, #128	; 0x80
    c2d6:	0312      	lsls	r2, r2, #12
    c2d8:	4313      	orrs	r3, r2
    c2da:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    c2dc:	683b      	ldr	r3, [r7, #0]
    c2de:	685b      	ldr	r3, [r3, #4]
    c2e0:	2b01      	cmp	r3, #1
    c2e2:	d92c      	bls.n	c33e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    c2e4:	683b      	ldr	r3, [r7, #0]
    c2e6:	685a      	ldr	r2, [r3, #4]
    c2e8:	683b      	ldr	r3, [r7, #0]
    c2ea:	685b      	ldr	r3, [r3, #4]
    c2ec:	3b01      	subs	r3, #1
    c2ee:	4013      	ands	r3, r2
    c2f0:	d11a      	bne.n	c328 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    c2f2:	2300      	movs	r3, #0
    c2f4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    c2f6:	2302      	movs	r3, #2
    c2f8:	60bb      	str	r3, [r7, #8]
    c2fa:	e005      	b.n	c308 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    c2fc:	68fb      	ldr	r3, [r7, #12]
    c2fe:	3301      	adds	r3, #1
    c300:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    c302:	68bb      	ldr	r3, [r7, #8]
    c304:	005b      	lsls	r3, r3, #1
    c306:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    c308:	683b      	ldr	r3, [r7, #0]
    c30a:	685a      	ldr	r2, [r3, #4]
    c30c:	68bb      	ldr	r3, [r7, #8]
    c30e:	429a      	cmp	r2, r3
    c310:	d8f4      	bhi.n	c2fc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    c312:	68fb      	ldr	r3, [r7, #12]
    c314:	021b      	lsls	r3, r3, #8
    c316:	693a      	ldr	r2, [r7, #16]
    c318:	4313      	orrs	r3, r2
    c31a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    c31c:	697b      	ldr	r3, [r7, #20]
    c31e:	2280      	movs	r2, #128	; 0x80
    c320:	0352      	lsls	r2, r2, #13
    c322:	4313      	orrs	r3, r2
    c324:	617b      	str	r3, [r7, #20]
    c326:	e00a      	b.n	c33e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    c328:	683b      	ldr	r3, [r7, #0]
    c32a:	685b      	ldr	r3, [r3, #4]
    c32c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    c32e:	693a      	ldr	r2, [r7, #16]
    c330:	4313      	orrs	r3, r2
    c332:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    c334:	697b      	ldr	r3, [r7, #20]
    c336:	2280      	movs	r2, #128	; 0x80
    c338:	0292      	lsls	r2, r2, #10
    c33a:	4313      	orrs	r3, r2
    c33c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    c33e:	683b      	ldr	r3, [r7, #0]
    c340:	7a1b      	ldrb	r3, [r3, #8]
    c342:	2b00      	cmp	r3, #0
    c344:	d004      	beq.n	c350 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    c346:	697b      	ldr	r3, [r7, #20]
    c348:	2280      	movs	r2, #128	; 0x80
    c34a:	0392      	lsls	r2, r2, #14
    c34c:	4313      	orrs	r3, r2
    c34e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    c350:	46c0      	nop			; (mov r8, r8)
    c352:	4b13      	ldr	r3, [pc, #76]	; (c3a0 <system_gclk_gen_set_config+0x110>)
    c354:	4798      	blx	r3
    c356:	1e03      	subs	r3, r0, #0
    c358:	d1fb      	bne.n	c352 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c35a:	4b12      	ldr	r3, [pc, #72]	; (c3a4 <system_gclk_gen_set_config+0x114>)
    c35c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c35e:	4a12      	ldr	r2, [pc, #72]	; (c3a8 <system_gclk_gen_set_config+0x118>)
    c360:	1dfb      	adds	r3, r7, #7
    c362:	781b      	ldrb	r3, [r3, #0]
    c364:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    c366:	46c0      	nop			; (mov r8, r8)
    c368:	4b0d      	ldr	r3, [pc, #52]	; (c3a0 <system_gclk_gen_set_config+0x110>)
    c36a:	4798      	blx	r3
    c36c:	1e03      	subs	r3, r0, #0
    c36e:	d1fb      	bne.n	c368 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    c370:	4b0e      	ldr	r3, [pc, #56]	; (c3ac <system_gclk_gen_set_config+0x11c>)
    c372:	693a      	ldr	r2, [r7, #16]
    c374:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    c376:	46c0      	nop			; (mov r8, r8)
    c378:	4b09      	ldr	r3, [pc, #36]	; (c3a0 <system_gclk_gen_set_config+0x110>)
    c37a:	4798      	blx	r3
    c37c:	1e03      	subs	r3, r0, #0
    c37e:	d1fb      	bne.n	c378 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    c380:	4b0a      	ldr	r3, [pc, #40]	; (c3ac <system_gclk_gen_set_config+0x11c>)
    c382:	4a0a      	ldr	r2, [pc, #40]	; (c3ac <system_gclk_gen_set_config+0x11c>)
    c384:	6851      	ldr	r1, [r2, #4]
    c386:	2280      	movs	r2, #128	; 0x80
    c388:	0252      	lsls	r2, r2, #9
    c38a:	4011      	ands	r1, r2
    c38c:	697a      	ldr	r2, [r7, #20]
    c38e:	430a      	orrs	r2, r1
    c390:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c392:	4b07      	ldr	r3, [pc, #28]	; (c3b0 <system_gclk_gen_set_config+0x120>)
    c394:	4798      	blx	r3
}
    c396:	46c0      	nop			; (mov r8, r8)
    c398:	46bd      	mov	sp, r7
    c39a:	b006      	add	sp, #24
    c39c:	bd80      	pop	{r7, pc}
    c39e:	46c0      	nop			; (mov r8, r8)
    c3a0:	0000c241 	.word	0x0000c241
    c3a4:	0000c219 	.word	0x0000c219
    c3a8:	40000c08 	.word	0x40000c08
    c3ac:	40000c00 	.word	0x40000c00
    c3b0:	0000c22d 	.word	0x0000c22d

0000c3b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    c3b4:	b580      	push	{r7, lr}
    c3b6:	b082      	sub	sp, #8
    c3b8:	af00      	add	r7, sp, #0
    c3ba:	0002      	movs	r2, r0
    c3bc:	1dfb      	adds	r3, r7, #7
    c3be:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c3c0:	46c0      	nop			; (mov r8, r8)
    c3c2:	4b0e      	ldr	r3, [pc, #56]	; (c3fc <system_gclk_gen_enable+0x48>)
    c3c4:	4798      	blx	r3
    c3c6:	1e03      	subs	r3, r0, #0
    c3c8:	d1fb      	bne.n	c3c2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c3ca:	4b0d      	ldr	r3, [pc, #52]	; (c400 <system_gclk_gen_enable+0x4c>)
    c3cc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c3ce:	4a0d      	ldr	r2, [pc, #52]	; (c404 <system_gclk_gen_enable+0x50>)
    c3d0:	1dfb      	adds	r3, r7, #7
    c3d2:	781b      	ldrb	r3, [r3, #0]
    c3d4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c3d6:	46c0      	nop			; (mov r8, r8)
    c3d8:	4b08      	ldr	r3, [pc, #32]	; (c3fc <system_gclk_gen_enable+0x48>)
    c3da:	4798      	blx	r3
    c3dc:	1e03      	subs	r3, r0, #0
    c3de:	d1fb      	bne.n	c3d8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    c3e0:	4b09      	ldr	r3, [pc, #36]	; (c408 <system_gclk_gen_enable+0x54>)
    c3e2:	4a09      	ldr	r2, [pc, #36]	; (c408 <system_gclk_gen_enable+0x54>)
    c3e4:	6852      	ldr	r2, [r2, #4]
    c3e6:	2180      	movs	r1, #128	; 0x80
    c3e8:	0249      	lsls	r1, r1, #9
    c3ea:	430a      	orrs	r2, r1
    c3ec:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c3ee:	4b07      	ldr	r3, [pc, #28]	; (c40c <system_gclk_gen_enable+0x58>)
    c3f0:	4798      	blx	r3
}
    c3f2:	46c0      	nop			; (mov r8, r8)
    c3f4:	46bd      	mov	sp, r7
    c3f6:	b002      	add	sp, #8
    c3f8:	bd80      	pop	{r7, pc}
    c3fa:	46c0      	nop			; (mov r8, r8)
    c3fc:	0000c241 	.word	0x0000c241
    c400:	0000c219 	.word	0x0000c219
    c404:	40000c04 	.word	0x40000c04
    c408:	40000c00 	.word	0x40000c00
    c40c:	0000c22d 	.word	0x0000c22d

0000c410 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    c410:	b580      	push	{r7, lr}
    c412:	b086      	sub	sp, #24
    c414:	af00      	add	r7, sp, #0
    c416:	0002      	movs	r2, r0
    c418:	1dfb      	adds	r3, r7, #7
    c41a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c41c:	46c0      	nop			; (mov r8, r8)
    c41e:	4b2a      	ldr	r3, [pc, #168]	; (c4c8 <system_gclk_gen_get_hz+0xb8>)
    c420:	4798      	blx	r3
    c422:	1e03      	subs	r3, r0, #0
    c424:	d1fb      	bne.n	c41e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c426:	4b29      	ldr	r3, [pc, #164]	; (c4cc <system_gclk_gen_get_hz+0xbc>)
    c428:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c42a:	4a29      	ldr	r2, [pc, #164]	; (c4d0 <system_gclk_gen_get_hz+0xc0>)
    c42c:	1dfb      	adds	r3, r7, #7
    c42e:	781b      	ldrb	r3, [r3, #0]
    c430:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c432:	46c0      	nop			; (mov r8, r8)
    c434:	4b24      	ldr	r3, [pc, #144]	; (c4c8 <system_gclk_gen_get_hz+0xb8>)
    c436:	4798      	blx	r3
    c438:	1e03      	subs	r3, r0, #0
    c43a:	d1fb      	bne.n	c434 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    c43c:	4b25      	ldr	r3, [pc, #148]	; (c4d4 <system_gclk_gen_get_hz+0xc4>)
    c43e:	685b      	ldr	r3, [r3, #4]
    c440:	04db      	lsls	r3, r3, #19
    c442:	0edb      	lsrs	r3, r3, #27
    c444:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    c446:	0018      	movs	r0, r3
    c448:	4b23      	ldr	r3, [pc, #140]	; (c4d8 <system_gclk_gen_get_hz+0xc8>)
    c44a:	4798      	blx	r3
    c44c:	0003      	movs	r3, r0
    c44e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c450:	4a1f      	ldr	r2, [pc, #124]	; (c4d0 <system_gclk_gen_get_hz+0xc0>)
    c452:	1dfb      	adds	r3, r7, #7
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    c458:	4b1e      	ldr	r3, [pc, #120]	; (c4d4 <system_gclk_gen_get_hz+0xc4>)
    c45a:	685b      	ldr	r3, [r3, #4]
    c45c:	02db      	lsls	r3, r3, #11
    c45e:	0fdb      	lsrs	r3, r3, #31
    c460:	b2da      	uxtb	r2, r3
    c462:	2313      	movs	r3, #19
    c464:	18fb      	adds	r3, r7, r3
    c466:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c468:	4a1c      	ldr	r2, [pc, #112]	; (c4dc <system_gclk_gen_get_hz+0xcc>)
    c46a:	1dfb      	adds	r3, r7, #7
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c470:	46c0      	nop			; (mov r8, r8)
    c472:	4b15      	ldr	r3, [pc, #84]	; (c4c8 <system_gclk_gen_get_hz+0xb8>)
    c474:	4798      	blx	r3
    c476:	1e03      	subs	r3, r0, #0
    c478:	d1fb      	bne.n	c472 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    c47a:	4b16      	ldr	r3, [pc, #88]	; (c4d4 <system_gclk_gen_get_hz+0xc4>)
    c47c:	689b      	ldr	r3, [r3, #8]
    c47e:	021b      	lsls	r3, r3, #8
    c480:	0c1b      	lsrs	r3, r3, #16
    c482:	b29b      	uxth	r3, r3
    c484:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    c486:	4b16      	ldr	r3, [pc, #88]	; (c4e0 <system_gclk_gen_get_hz+0xd0>)
    c488:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    c48a:	2313      	movs	r3, #19
    c48c:	18fb      	adds	r3, r7, r3
    c48e:	781b      	ldrb	r3, [r3, #0]
    c490:	2b00      	cmp	r3, #0
    c492:	d109      	bne.n	c4a8 <system_gclk_gen_get_hz+0x98>
    c494:	68fb      	ldr	r3, [r7, #12]
    c496:	2b01      	cmp	r3, #1
    c498:	d906      	bls.n	c4a8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    c49a:	4b12      	ldr	r3, [pc, #72]	; (c4e4 <system_gclk_gen_get_hz+0xd4>)
    c49c:	68f9      	ldr	r1, [r7, #12]
    c49e:	6978      	ldr	r0, [r7, #20]
    c4a0:	4798      	blx	r3
    c4a2:	0003      	movs	r3, r0
    c4a4:	617b      	str	r3, [r7, #20]
    c4a6:	e00a      	b.n	c4be <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    c4a8:	2313      	movs	r3, #19
    c4aa:	18fb      	adds	r3, r7, r3
    c4ac:	781b      	ldrb	r3, [r3, #0]
    c4ae:	2b00      	cmp	r3, #0
    c4b0:	d005      	beq.n	c4be <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    c4b2:	68fb      	ldr	r3, [r7, #12]
    c4b4:	3301      	adds	r3, #1
    c4b6:	697a      	ldr	r2, [r7, #20]
    c4b8:	40da      	lsrs	r2, r3
    c4ba:	0013      	movs	r3, r2
    c4bc:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    c4be:	697b      	ldr	r3, [r7, #20]
}
    c4c0:	0018      	movs	r0, r3
    c4c2:	46bd      	mov	sp, r7
    c4c4:	b006      	add	sp, #24
    c4c6:	bd80      	pop	{r7, pc}
    c4c8:	0000c241 	.word	0x0000c241
    c4cc:	0000c219 	.word	0x0000c219
    c4d0:	40000c04 	.word	0x40000c04
    c4d4:	40000c00 	.word	0x40000c00
    c4d8:	0000bab5 	.word	0x0000bab5
    c4dc:	40000c08 	.word	0x40000c08
    c4e0:	0000c22d 	.word	0x0000c22d
    c4e4:	00011441 	.word	0x00011441

0000c4e8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    c4e8:	b580      	push	{r7, lr}
    c4ea:	b084      	sub	sp, #16
    c4ec:	af00      	add	r7, sp, #0
    c4ee:	0002      	movs	r2, r0
    c4f0:	6039      	str	r1, [r7, #0]
    c4f2:	1dfb      	adds	r3, r7, #7
    c4f4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    c4f6:	1dfb      	adds	r3, r7, #7
    c4f8:	781b      	ldrb	r3, [r3, #0]
    c4fa:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    c4fc:	683b      	ldr	r3, [r7, #0]
    c4fe:	781b      	ldrb	r3, [r3, #0]
    c500:	021b      	lsls	r3, r3, #8
    c502:	001a      	movs	r2, r3
    c504:	68fb      	ldr	r3, [r7, #12]
    c506:	4313      	orrs	r3, r2
    c508:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    c50a:	1dfb      	adds	r3, r7, #7
    c50c:	781b      	ldrb	r3, [r3, #0]
    c50e:	0018      	movs	r0, r3
    c510:	4b04      	ldr	r3, [pc, #16]	; (c524 <system_gclk_chan_set_config+0x3c>)
    c512:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    c514:	4b04      	ldr	r3, [pc, #16]	; (c528 <system_gclk_chan_set_config+0x40>)
    c516:	68fa      	ldr	r2, [r7, #12]
    c518:	b292      	uxth	r2, r2
    c51a:	805a      	strh	r2, [r3, #2]
}
    c51c:	46c0      	nop			; (mov r8, r8)
    c51e:	46bd      	mov	sp, r7
    c520:	b004      	add	sp, #16
    c522:	bd80      	pop	{r7, pc}
    c524:	0000c575 	.word	0x0000c575
    c528:	40000c00 	.word	0x40000c00

0000c52c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    c52c:	b580      	push	{r7, lr}
    c52e:	b082      	sub	sp, #8
    c530:	af00      	add	r7, sp, #0
    c532:	0002      	movs	r2, r0
    c534:	1dfb      	adds	r3, r7, #7
    c536:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c538:	4b0a      	ldr	r3, [pc, #40]	; (c564 <system_gclk_chan_enable+0x38>)
    c53a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c53c:	4a0a      	ldr	r2, [pc, #40]	; (c568 <system_gclk_chan_enable+0x3c>)
    c53e:	1dfb      	adds	r3, r7, #7
    c540:	781b      	ldrb	r3, [r3, #0]
    c542:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    c544:	4909      	ldr	r1, [pc, #36]	; (c56c <system_gclk_chan_enable+0x40>)
    c546:	4b09      	ldr	r3, [pc, #36]	; (c56c <system_gclk_chan_enable+0x40>)
    c548:	885b      	ldrh	r3, [r3, #2]
    c54a:	b29b      	uxth	r3, r3
    c54c:	2280      	movs	r2, #128	; 0x80
    c54e:	01d2      	lsls	r2, r2, #7
    c550:	4313      	orrs	r3, r2
    c552:	b29b      	uxth	r3, r3
    c554:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    c556:	4b06      	ldr	r3, [pc, #24]	; (c570 <system_gclk_chan_enable+0x44>)
    c558:	4798      	blx	r3
}
    c55a:	46c0      	nop			; (mov r8, r8)
    c55c:	46bd      	mov	sp, r7
    c55e:	b002      	add	sp, #8
    c560:	bd80      	pop	{r7, pc}
    c562:	46c0      	nop			; (mov r8, r8)
    c564:	0000c219 	.word	0x0000c219
    c568:	40000c02 	.word	0x40000c02
    c56c:	40000c00 	.word	0x40000c00
    c570:	0000c22d 	.word	0x0000c22d

0000c574 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    c574:	b580      	push	{r7, lr}
    c576:	b084      	sub	sp, #16
    c578:	af00      	add	r7, sp, #0
    c57a:	0002      	movs	r2, r0
    c57c:	1dfb      	adds	r3, r7, #7
    c57e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c580:	4b1c      	ldr	r3, [pc, #112]	; (c5f4 <system_gclk_chan_disable+0x80>)
    c582:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c584:	4a1c      	ldr	r2, [pc, #112]	; (c5f8 <system_gclk_chan_disable+0x84>)
    c586:	1dfb      	adds	r3, r7, #7
    c588:	781b      	ldrb	r3, [r3, #0]
    c58a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    c58c:	4b1b      	ldr	r3, [pc, #108]	; (c5fc <system_gclk_chan_disable+0x88>)
    c58e:	885b      	ldrh	r3, [r3, #2]
    c590:	051b      	lsls	r3, r3, #20
    c592:	0f1b      	lsrs	r3, r3, #28
    c594:	b2db      	uxtb	r3, r3
    c596:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    c598:	4a18      	ldr	r2, [pc, #96]	; (c5fc <system_gclk_chan_disable+0x88>)
    c59a:	8853      	ldrh	r3, [r2, #2]
    c59c:	4918      	ldr	r1, [pc, #96]	; (c600 <system_gclk_chan_disable+0x8c>)
    c59e:	400b      	ands	r3, r1
    c5a0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    c5a2:	4a16      	ldr	r2, [pc, #88]	; (c5fc <system_gclk_chan_disable+0x88>)
    c5a4:	4b15      	ldr	r3, [pc, #84]	; (c5fc <system_gclk_chan_disable+0x88>)
    c5a6:	885b      	ldrh	r3, [r3, #2]
    c5a8:	b29b      	uxth	r3, r3
    c5aa:	4916      	ldr	r1, [pc, #88]	; (c604 <system_gclk_chan_disable+0x90>)
    c5ac:	400b      	ands	r3, r1
    c5ae:	b29b      	uxth	r3, r3
    c5b0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    c5b2:	46c0      	nop			; (mov r8, r8)
    c5b4:	4b11      	ldr	r3, [pc, #68]	; (c5fc <system_gclk_chan_disable+0x88>)
    c5b6:	885b      	ldrh	r3, [r3, #2]
    c5b8:	b29b      	uxth	r3, r3
    c5ba:	001a      	movs	r2, r3
    c5bc:	2380      	movs	r3, #128	; 0x80
    c5be:	01db      	lsls	r3, r3, #7
    c5c0:	4013      	ands	r3, r2
    c5c2:	d1f7      	bne.n	c5b4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    c5c4:	4a0d      	ldr	r2, [pc, #52]	; (c5fc <system_gclk_chan_disable+0x88>)
    c5c6:	68fb      	ldr	r3, [r7, #12]
    c5c8:	b2db      	uxtb	r3, r3
    c5ca:	1c19      	adds	r1, r3, #0
    c5cc:	230f      	movs	r3, #15
    c5ce:	400b      	ands	r3, r1
    c5d0:	b2d9      	uxtb	r1, r3
    c5d2:	8853      	ldrh	r3, [r2, #2]
    c5d4:	1c08      	adds	r0, r1, #0
    c5d6:	210f      	movs	r1, #15
    c5d8:	4001      	ands	r1, r0
    c5da:	0208      	lsls	r0, r1, #8
    c5dc:	4908      	ldr	r1, [pc, #32]	; (c600 <system_gclk_chan_disable+0x8c>)
    c5de:	400b      	ands	r3, r1
    c5e0:	1c19      	adds	r1, r3, #0
    c5e2:	1c03      	adds	r3, r0, #0
    c5e4:	430b      	orrs	r3, r1
    c5e6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    c5e8:	4b07      	ldr	r3, [pc, #28]	; (c608 <system_gclk_chan_disable+0x94>)
    c5ea:	4798      	blx	r3
}
    c5ec:	46c0      	nop			; (mov r8, r8)
    c5ee:	46bd      	mov	sp, r7
    c5f0:	b004      	add	sp, #16
    c5f2:	bd80      	pop	{r7, pc}
    c5f4:	0000c219 	.word	0x0000c219
    c5f8:	40000c02 	.word	0x40000c02
    c5fc:	40000c00 	.word	0x40000c00
    c600:	fffff0ff 	.word	0xfffff0ff
    c604:	ffffbfff 	.word	0xffffbfff
    c608:	0000c22d 	.word	0x0000c22d

0000c60c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    c60c:	b580      	push	{r7, lr}
    c60e:	b084      	sub	sp, #16
    c610:	af00      	add	r7, sp, #0
    c612:	0002      	movs	r2, r0
    c614:	1dfb      	adds	r3, r7, #7
    c616:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    c618:	4b0d      	ldr	r3, [pc, #52]	; (c650 <system_gclk_chan_get_hz+0x44>)
    c61a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c61c:	4a0d      	ldr	r2, [pc, #52]	; (c654 <system_gclk_chan_get_hz+0x48>)
    c61e:	1dfb      	adds	r3, r7, #7
    c620:	781b      	ldrb	r3, [r3, #0]
    c622:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    c624:	4b0c      	ldr	r3, [pc, #48]	; (c658 <system_gclk_chan_get_hz+0x4c>)
    c626:	885b      	ldrh	r3, [r3, #2]
    c628:	051b      	lsls	r3, r3, #20
    c62a:	0f1b      	lsrs	r3, r3, #28
    c62c:	b2da      	uxtb	r2, r3
    c62e:	230f      	movs	r3, #15
    c630:	18fb      	adds	r3, r7, r3
    c632:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    c634:	4b09      	ldr	r3, [pc, #36]	; (c65c <system_gclk_chan_get_hz+0x50>)
    c636:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    c638:	230f      	movs	r3, #15
    c63a:	18fb      	adds	r3, r7, r3
    c63c:	781b      	ldrb	r3, [r3, #0]
    c63e:	0018      	movs	r0, r3
    c640:	4b07      	ldr	r3, [pc, #28]	; (c660 <system_gclk_chan_get_hz+0x54>)
    c642:	4798      	blx	r3
    c644:	0003      	movs	r3, r0
}
    c646:	0018      	movs	r0, r3
    c648:	46bd      	mov	sp, r7
    c64a:	b004      	add	sp, #16
    c64c:	bd80      	pop	{r7, pc}
    c64e:	46c0      	nop			; (mov r8, r8)
    c650:	0000c219 	.word	0x0000c219
    c654:	40000c02 	.word	0x40000c02
    c658:	40000c00 	.word	0x40000c00
    c65c:	0000c22d 	.word	0x0000c22d
    c660:	0000c411 	.word	0x0000c411

0000c664 <system_pinmux_get_group_from_gpio_pin>:
{
    c664:	b580      	push	{r7, lr}
    c666:	b084      	sub	sp, #16
    c668:	af00      	add	r7, sp, #0
    c66a:	0002      	movs	r2, r0
    c66c:	1dfb      	adds	r3, r7, #7
    c66e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c670:	230f      	movs	r3, #15
    c672:	18fb      	adds	r3, r7, r3
    c674:	1dfa      	adds	r2, r7, #7
    c676:	7812      	ldrb	r2, [r2, #0]
    c678:	09d2      	lsrs	r2, r2, #7
    c67a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c67c:	230e      	movs	r3, #14
    c67e:	18fb      	adds	r3, r7, r3
    c680:	1dfa      	adds	r2, r7, #7
    c682:	7812      	ldrb	r2, [r2, #0]
    c684:	0952      	lsrs	r2, r2, #5
    c686:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c688:	4b0d      	ldr	r3, [pc, #52]	; (c6c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c68a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c68c:	230f      	movs	r3, #15
    c68e:	18fb      	adds	r3, r7, r3
    c690:	781b      	ldrb	r3, [r3, #0]
    c692:	2b00      	cmp	r3, #0
    c694:	d10f      	bne.n	c6b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c696:	230f      	movs	r3, #15
    c698:	18fb      	adds	r3, r7, r3
    c69a:	781b      	ldrb	r3, [r3, #0]
    c69c:	009b      	lsls	r3, r3, #2
    c69e:	2210      	movs	r2, #16
    c6a0:	4694      	mov	ip, r2
    c6a2:	44bc      	add	ip, r7
    c6a4:	4463      	add	r3, ip
    c6a6:	3b08      	subs	r3, #8
    c6a8:	681a      	ldr	r2, [r3, #0]
    c6aa:	230e      	movs	r3, #14
    c6ac:	18fb      	adds	r3, r7, r3
    c6ae:	781b      	ldrb	r3, [r3, #0]
    c6b0:	01db      	lsls	r3, r3, #7
    c6b2:	18d3      	adds	r3, r2, r3
    c6b4:	e000      	b.n	c6b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c6b6:	2300      	movs	r3, #0
}
    c6b8:	0018      	movs	r0, r3
    c6ba:	46bd      	mov	sp, r7
    c6bc:	b004      	add	sp, #16
    c6be:	bd80      	pop	{r7, pc}
    c6c0:	41004400 	.word	0x41004400

0000c6c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    c6c4:	b580      	push	{r7, lr}
    c6c6:	b088      	sub	sp, #32
    c6c8:	af00      	add	r7, sp, #0
    c6ca:	60f8      	str	r0, [r7, #12]
    c6cc:	60b9      	str	r1, [r7, #8]
    c6ce:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    c6d0:	2300      	movs	r3, #0
    c6d2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	78db      	ldrb	r3, [r3, #3]
    c6d8:	2201      	movs	r2, #1
    c6da:	4053      	eors	r3, r2
    c6dc:	b2db      	uxtb	r3, r3
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d035      	beq.n	c74e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    c6e2:	687b      	ldr	r3, [r7, #4]
    c6e4:	781b      	ldrb	r3, [r3, #0]
    c6e6:	2b80      	cmp	r3, #128	; 0x80
    c6e8:	d00b      	beq.n	c702 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    c6ea:	69fb      	ldr	r3, [r7, #28]
    c6ec:	2280      	movs	r2, #128	; 0x80
    c6ee:	0252      	lsls	r2, r2, #9
    c6f0:	4313      	orrs	r3, r2
    c6f2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    c6f4:	687b      	ldr	r3, [r7, #4]
    c6f6:	781b      	ldrb	r3, [r3, #0]
    c6f8:	061b      	lsls	r3, r3, #24
    c6fa:	001a      	movs	r2, r3
    c6fc:	69fb      	ldr	r3, [r7, #28]
    c6fe:	4313      	orrs	r3, r2
    c700:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c702:	687b      	ldr	r3, [r7, #4]
    c704:	785b      	ldrb	r3, [r3, #1]
    c706:	2b00      	cmp	r3, #0
    c708:	d003      	beq.n	c712 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c70a:	687b      	ldr	r3, [r7, #4]
    c70c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c70e:	2b02      	cmp	r3, #2
    c710:	d110      	bne.n	c734 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    c712:	69fb      	ldr	r3, [r7, #28]
    c714:	2280      	movs	r2, #128	; 0x80
    c716:	0292      	lsls	r2, r2, #10
    c718:	4313      	orrs	r3, r2
    c71a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    c71c:	687b      	ldr	r3, [r7, #4]
    c71e:	789b      	ldrb	r3, [r3, #2]
    c720:	2b00      	cmp	r3, #0
    c722:	d004      	beq.n	c72e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    c724:	69fb      	ldr	r3, [r7, #28]
    c726:	2280      	movs	r2, #128	; 0x80
    c728:	02d2      	lsls	r2, r2, #11
    c72a:	4313      	orrs	r3, r2
    c72c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    c72e:	68fb      	ldr	r3, [r7, #12]
    c730:	68ba      	ldr	r2, [r7, #8]
    c732:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c734:	687b      	ldr	r3, [r7, #4]
    c736:	785b      	ldrb	r3, [r3, #1]
    c738:	2b01      	cmp	r3, #1
    c73a:	d003      	beq.n	c744 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c73c:	687b      	ldr	r3, [r7, #4]
    c73e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c740:	2b02      	cmp	r3, #2
    c742:	d107      	bne.n	c754 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    c744:	69fb      	ldr	r3, [r7, #28]
    c746:	4a22      	ldr	r2, [pc, #136]	; (c7d0 <_system_pinmux_config+0x10c>)
    c748:	4013      	ands	r3, r2
    c74a:	61fb      	str	r3, [r7, #28]
    c74c:	e002      	b.n	c754 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    c74e:	68fb      	ldr	r3, [r7, #12]
    c750:	68ba      	ldr	r2, [r7, #8]
    c752:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    c754:	68bb      	ldr	r3, [r7, #8]
    c756:	041b      	lsls	r3, r3, #16
    c758:	0c1b      	lsrs	r3, r3, #16
    c75a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    c75c:	68bb      	ldr	r3, [r7, #8]
    c75e:	0c1b      	lsrs	r3, r3, #16
    c760:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c762:	69ba      	ldr	r2, [r7, #24]
    c764:	69fb      	ldr	r3, [r7, #28]
    c766:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    c768:	22a0      	movs	r2, #160	; 0xa0
    c76a:	05d2      	lsls	r2, r2, #23
    c76c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c76e:	68fb      	ldr	r3, [r7, #12]
    c770:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c772:	697a      	ldr	r2, [r7, #20]
    c774:	69fb      	ldr	r3, [r7, #28]
    c776:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    c778:	22d0      	movs	r2, #208	; 0xd0
    c77a:	0612      	lsls	r2, r2, #24
    c77c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c77e:	68fb      	ldr	r3, [r7, #12]
    c780:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    c782:	687b      	ldr	r3, [r7, #4]
    c784:	78db      	ldrb	r3, [r3, #3]
    c786:	2201      	movs	r2, #1
    c788:	4053      	eors	r3, r2
    c78a:	b2db      	uxtb	r3, r3
    c78c:	2b00      	cmp	r3, #0
    c78e:	d01a      	beq.n	c7c6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    c790:	69fa      	ldr	r2, [r7, #28]
    c792:	2380      	movs	r3, #128	; 0x80
    c794:	02db      	lsls	r3, r3, #11
    c796:	4013      	ands	r3, r2
    c798:	d00a      	beq.n	c7b0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    c79a:	687b      	ldr	r3, [r7, #4]
    c79c:	789b      	ldrb	r3, [r3, #2]
    c79e:	2b01      	cmp	r3, #1
    c7a0:	d103      	bne.n	c7aa <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    c7a2:	68fb      	ldr	r3, [r7, #12]
    c7a4:	68ba      	ldr	r2, [r7, #8]
    c7a6:	619a      	str	r2, [r3, #24]
    c7a8:	e002      	b.n	c7b0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    c7aa:	68fb      	ldr	r3, [r7, #12]
    c7ac:	68ba      	ldr	r2, [r7, #8]
    c7ae:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c7b0:	687b      	ldr	r3, [r7, #4]
    c7b2:	785b      	ldrb	r3, [r3, #1]
    c7b4:	2b01      	cmp	r3, #1
    c7b6:	d003      	beq.n	c7c0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c7b8:	687b      	ldr	r3, [r7, #4]
    c7ba:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c7bc:	2b02      	cmp	r3, #2
    c7be:	d102      	bne.n	c7c6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    c7c0:	68fb      	ldr	r3, [r7, #12]
    c7c2:	68ba      	ldr	r2, [r7, #8]
    c7c4:	609a      	str	r2, [r3, #8]
		}
	}
}
    c7c6:	46c0      	nop			; (mov r8, r8)
    c7c8:	46bd      	mov	sp, r7
    c7ca:	b008      	add	sp, #32
    c7cc:	bd80      	pop	{r7, pc}
    c7ce:	46c0      	nop			; (mov r8, r8)
    c7d0:	fffbffff 	.word	0xfffbffff

0000c7d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    c7d4:	b580      	push	{r7, lr}
    c7d6:	b084      	sub	sp, #16
    c7d8:	af00      	add	r7, sp, #0
    c7da:	0002      	movs	r2, r0
    c7dc:	6039      	str	r1, [r7, #0]
    c7de:	1dfb      	adds	r3, r7, #7
    c7e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c7e2:	1dfb      	adds	r3, r7, #7
    c7e4:	781b      	ldrb	r3, [r3, #0]
    c7e6:	0018      	movs	r0, r3
    c7e8:	4b0a      	ldr	r3, [pc, #40]	; (c814 <system_pinmux_pin_set_config+0x40>)
    c7ea:	4798      	blx	r3
    c7ec:	0003      	movs	r3, r0
    c7ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    c7f0:	1dfb      	adds	r3, r7, #7
    c7f2:	781b      	ldrb	r3, [r3, #0]
    c7f4:	221f      	movs	r2, #31
    c7f6:	4013      	ands	r3, r2
    c7f8:	2201      	movs	r2, #1
    c7fa:	409a      	lsls	r2, r3
    c7fc:	0013      	movs	r3, r2
    c7fe:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    c800:	683a      	ldr	r2, [r7, #0]
    c802:	68b9      	ldr	r1, [r7, #8]
    c804:	68fb      	ldr	r3, [r7, #12]
    c806:	0018      	movs	r0, r3
    c808:	4b03      	ldr	r3, [pc, #12]	; (c818 <system_pinmux_pin_set_config+0x44>)
    c80a:	4798      	blx	r3
}
    c80c:	46c0      	nop			; (mov r8, r8)
    c80e:	46bd      	mov	sp, r7
    c810:	b004      	add	sp, #16
    c812:	bd80      	pop	{r7, pc}
    c814:	0000c665 	.word	0x0000c665
    c818:	0000c6c5 	.word	0x0000c6c5

0000c81c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    c81c:	b580      	push	{r7, lr}
    c81e:	af00      	add	r7, sp, #0
	return;
    c820:	46c0      	nop			; (mov r8, r8)
}
    c822:	46bd      	mov	sp, r7
    c824:	bd80      	pop	{r7, pc}
	...

0000c828 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    c828:	b580      	push	{r7, lr}
    c82a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    c82c:	4b06      	ldr	r3, [pc, #24]	; (c848 <system_init+0x20>)
    c82e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    c830:	4b06      	ldr	r3, [pc, #24]	; (c84c <system_init+0x24>)
    c832:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    c834:	4b06      	ldr	r3, [pc, #24]	; (c850 <system_init+0x28>)
    c836:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    c838:	4b06      	ldr	r3, [pc, #24]	; (c854 <system_init+0x2c>)
    c83a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    c83c:	4b06      	ldr	r3, [pc, #24]	; (c858 <system_init+0x30>)
    c83e:	4798      	blx	r3
}
    c840:	46c0      	nop			; (mov r8, r8)
    c842:	46bd      	mov	sp, r7
    c844:	bd80      	pop	{r7, pc}
    c846:	46c0      	nop			; (mov r8, r8)
    c848:	0000bf41 	.word	0x0000bf41
    c84c:	0000b7d5 	.word	0x0000b7d5
    c850:	0000c81d 	.word	0x0000c81d
    c854:	00005de1 	.word	0x00005de1
    c858:	0000c81d 	.word	0x0000c81d

0000c85c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    c85c:	b580      	push	{r7, lr}
    c85e:	b082      	sub	sp, #8
    c860:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    c862:	4b2f      	ldr	r3, [pc, #188]	; (c920 <Reset_Handler+0xc4>)
    c864:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    c866:	4b2f      	ldr	r3, [pc, #188]	; (c924 <Reset_Handler+0xc8>)
    c868:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    c86a:	687a      	ldr	r2, [r7, #4]
    c86c:	683b      	ldr	r3, [r7, #0]
    c86e:	429a      	cmp	r2, r3
    c870:	d00c      	beq.n	c88c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    c872:	e007      	b.n	c884 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    c874:	683b      	ldr	r3, [r7, #0]
    c876:	1d1a      	adds	r2, r3, #4
    c878:	603a      	str	r2, [r7, #0]
    c87a:	687a      	ldr	r2, [r7, #4]
    c87c:	1d11      	adds	r1, r2, #4
    c87e:	6079      	str	r1, [r7, #4]
    c880:	6812      	ldr	r2, [r2, #0]
    c882:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    c884:	683a      	ldr	r2, [r7, #0]
    c886:	4b28      	ldr	r3, [pc, #160]	; (c928 <Reset_Handler+0xcc>)
    c888:	429a      	cmp	r2, r3
    c88a:	d3f3      	bcc.n	c874 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    c88c:	4b27      	ldr	r3, [pc, #156]	; (c92c <Reset_Handler+0xd0>)
    c88e:	603b      	str	r3, [r7, #0]
    c890:	e004      	b.n	c89c <Reset_Handler+0x40>
                *pDest++ = 0;
    c892:	683b      	ldr	r3, [r7, #0]
    c894:	1d1a      	adds	r2, r3, #4
    c896:	603a      	str	r2, [r7, #0]
    c898:	2200      	movs	r2, #0
    c89a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    c89c:	683a      	ldr	r2, [r7, #0]
    c89e:	4b24      	ldr	r3, [pc, #144]	; (c930 <Reset_Handler+0xd4>)
    c8a0:	429a      	cmp	r2, r3
    c8a2:	d3f6      	bcc.n	c892 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    c8a4:	4b23      	ldr	r3, [pc, #140]	; (c934 <Reset_Handler+0xd8>)
    c8a6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    c8a8:	4b23      	ldr	r3, [pc, #140]	; (c938 <Reset_Handler+0xdc>)
    c8aa:	687a      	ldr	r2, [r7, #4]
    c8ac:	21ff      	movs	r1, #255	; 0xff
    c8ae:	438a      	bics	r2, r1
    c8b0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    c8b2:	4a22      	ldr	r2, [pc, #136]	; (c93c <Reset_Handler+0xe0>)
    c8b4:	2390      	movs	r3, #144	; 0x90
    c8b6:	005b      	lsls	r3, r3, #1
    c8b8:	2102      	movs	r1, #2
    c8ba:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    c8bc:	4a20      	ldr	r2, [pc, #128]	; (c940 <Reset_Handler+0xe4>)
    c8be:	78d3      	ldrb	r3, [r2, #3]
    c8c0:	2103      	movs	r1, #3
    c8c2:	438b      	bics	r3, r1
    c8c4:	1c19      	adds	r1, r3, #0
    c8c6:	2302      	movs	r3, #2
    c8c8:	430b      	orrs	r3, r1
    c8ca:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    c8cc:	4a1c      	ldr	r2, [pc, #112]	; (c940 <Reset_Handler+0xe4>)
    c8ce:	78d3      	ldrb	r3, [r2, #3]
    c8d0:	210c      	movs	r1, #12
    c8d2:	438b      	bics	r3, r1
    c8d4:	1c19      	adds	r1, r3, #0
    c8d6:	2308      	movs	r3, #8
    c8d8:	430b      	orrs	r3, r1
    c8da:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    c8dc:	4a19      	ldr	r2, [pc, #100]	; (c944 <Reset_Handler+0xe8>)
    c8de:	7b93      	ldrb	r3, [r2, #14]
    c8e0:	2130      	movs	r1, #48	; 0x30
    c8e2:	438b      	bics	r3, r1
    c8e4:	1c19      	adds	r1, r3, #0
    c8e6:	2320      	movs	r3, #32
    c8e8:	430b      	orrs	r3, r1
    c8ea:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    c8ec:	4a15      	ldr	r2, [pc, #84]	; (c944 <Reset_Handler+0xe8>)
    c8ee:	7b93      	ldrb	r3, [r2, #14]
    c8f0:	210c      	movs	r1, #12
    c8f2:	438b      	bics	r3, r1
    c8f4:	1c19      	adds	r1, r3, #0
    c8f6:	2308      	movs	r3, #8
    c8f8:	430b      	orrs	r3, r1
    c8fa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    c8fc:	4a11      	ldr	r2, [pc, #68]	; (c944 <Reset_Handler+0xe8>)
    c8fe:	7b93      	ldrb	r3, [r2, #14]
    c900:	2103      	movs	r1, #3
    c902:	438b      	bics	r3, r1
    c904:	1c19      	adds	r1, r3, #0
    c906:	2302      	movs	r3, #2
    c908:	430b      	orrs	r3, r1
    c90a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    c90c:	4a0e      	ldr	r2, [pc, #56]	; (c948 <Reset_Handler+0xec>)
    c90e:	6853      	ldr	r3, [r2, #4]
    c910:	2180      	movs	r1, #128	; 0x80
    c912:	430b      	orrs	r3, r1
    c914:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    c916:	4b0d      	ldr	r3, [pc, #52]	; (c94c <Reset_Handler+0xf0>)
    c918:	4798      	blx	r3

        /* Branch to main function */
        main();
    c91a:	4b0d      	ldr	r3, [pc, #52]	; (c950 <Reset_Handler+0xf4>)
    c91c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    c91e:	e7fe      	b.n	c91e <Reset_Handler+0xc2>
    c920:	000154c8 	.word	0x000154c8
    c924:	20000000 	.word	0x20000000
    c928:	20000250 	.word	0x20000250
    c92c:	20000250 	.word	0x20000250
    c930:	200007fc 	.word	0x200007fc
    c934:	00000000 	.word	0x00000000
    c938:	e000ed00 	.word	0xe000ed00
    c93c:	41007000 	.word	0x41007000
    c940:	41005000 	.word	0x41005000
    c944:	41004800 	.word	0x41004800
    c948:	41004000 	.word	0x41004000
    c94c:	0000e5b5 	.word	0x0000e5b5
    c950:	0000d56d 	.word	0x0000d56d

0000c954 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    c954:	b580      	push	{r7, lr}
    c956:	af00      	add	r7, sp, #0
        while (1) {
    c958:	e7fe      	b.n	c958 <Dummy_Handler+0x4>
	...

0000c95c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    c95c:	b580      	push	{r7, lr}
    c95e:	b084      	sub	sp, #16
    c960:	af00      	add	r7, sp, #0
    c962:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    c964:	4b0a      	ldr	r3, [pc, #40]	; (c990 <_sbrk+0x34>)
    c966:	681b      	ldr	r3, [r3, #0]
    c968:	2b00      	cmp	r3, #0
    c96a:	d102      	bne.n	c972 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    c96c:	4b08      	ldr	r3, [pc, #32]	; (c990 <_sbrk+0x34>)
    c96e:	4a09      	ldr	r2, [pc, #36]	; (c994 <_sbrk+0x38>)
    c970:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    c972:	4b07      	ldr	r3, [pc, #28]	; (c990 <_sbrk+0x34>)
    c974:	681b      	ldr	r3, [r3, #0]
    c976:	60fb      	str	r3, [r7, #12]

	heap += incr;
    c978:	4b05      	ldr	r3, [pc, #20]	; (c990 <_sbrk+0x34>)
    c97a:	681a      	ldr	r2, [r3, #0]
    c97c:	687b      	ldr	r3, [r7, #4]
    c97e:	18d2      	adds	r2, r2, r3
    c980:	4b03      	ldr	r3, [pc, #12]	; (c990 <_sbrk+0x34>)
    c982:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    c984:	68fb      	ldr	r3, [r7, #12]
}
    c986:	0018      	movs	r0, r3
    c988:	46bd      	mov	sp, r7
    c98a:	b004      	add	sp, #16
    c98c:	bd80      	pop	{r7, pc}
    c98e:	46c0      	nop			; (mov r8, r8)
    c990:	200003c8 	.word	0x200003c8
    c994:	20002800 	.word	0x20002800

0000c998 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    c998:	b580      	push	{r7, lr}
    c99a:	b082      	sub	sp, #8
    c99c:	af00      	add	r7, sp, #0
    c99e:	6078      	str	r0, [r7, #4]
	return -1;
    c9a0:	2301      	movs	r3, #1
    c9a2:	425b      	negs	r3, r3
}
    c9a4:	0018      	movs	r0, r3
    c9a6:	46bd      	mov	sp, r7
    c9a8:	b002      	add	sp, #8
    c9aa:	bd80      	pop	{r7, pc}

0000c9ac <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    c9ac:	b580      	push	{r7, lr}
    c9ae:	b082      	sub	sp, #8
    c9b0:	af00      	add	r7, sp, #0
    c9b2:	6078      	str	r0, [r7, #4]
    c9b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    c9b6:	683b      	ldr	r3, [r7, #0]
    c9b8:	2280      	movs	r2, #128	; 0x80
    c9ba:	0192      	lsls	r2, r2, #6
    c9bc:	605a      	str	r2, [r3, #4]

	return 0;
    c9be:	2300      	movs	r3, #0
}
    c9c0:	0018      	movs	r0, r3
    c9c2:	46bd      	mov	sp, r7
    c9c4:	b002      	add	sp, #8
    c9c6:	bd80      	pop	{r7, pc}

0000c9c8 <_isatty>:

extern int _isatty(int file)
{
    c9c8:	b580      	push	{r7, lr}
    c9ca:	b082      	sub	sp, #8
    c9cc:	af00      	add	r7, sp, #0
    c9ce:	6078      	str	r0, [r7, #4]
	return 1;
    c9d0:	2301      	movs	r3, #1
}
    c9d2:	0018      	movs	r0, r3
    c9d4:	46bd      	mov	sp, r7
    c9d6:	b002      	add	sp, #8
    c9d8:	bd80      	pop	{r7, pc}

0000c9da <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    c9da:	b580      	push	{r7, lr}
    c9dc:	b084      	sub	sp, #16
    c9de:	af00      	add	r7, sp, #0
    c9e0:	60f8      	str	r0, [r7, #12]
    c9e2:	60b9      	str	r1, [r7, #8]
    c9e4:	607a      	str	r2, [r7, #4]
	return 0;
    c9e6:	2300      	movs	r3, #0
}
    c9e8:	0018      	movs	r0, r3
    c9ea:	46bd      	mov	sp, r7
    c9ec:	b004      	add	sp, #16
    c9ee:	bd80      	pop	{r7, pc}

0000c9f0 <system_pinmux_get_group_from_gpio_pin>:
{
    c9f0:	b580      	push	{r7, lr}
    c9f2:	b084      	sub	sp, #16
    c9f4:	af00      	add	r7, sp, #0
    c9f6:	0002      	movs	r2, r0
    c9f8:	1dfb      	adds	r3, r7, #7
    c9fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c9fc:	230f      	movs	r3, #15
    c9fe:	18fb      	adds	r3, r7, r3
    ca00:	1dfa      	adds	r2, r7, #7
    ca02:	7812      	ldrb	r2, [r2, #0]
    ca04:	09d2      	lsrs	r2, r2, #7
    ca06:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ca08:	230e      	movs	r3, #14
    ca0a:	18fb      	adds	r3, r7, r3
    ca0c:	1dfa      	adds	r2, r7, #7
    ca0e:	7812      	ldrb	r2, [r2, #0]
    ca10:	0952      	lsrs	r2, r2, #5
    ca12:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ca14:	4b0d      	ldr	r3, [pc, #52]	; (ca4c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    ca16:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    ca18:	230f      	movs	r3, #15
    ca1a:	18fb      	adds	r3, r7, r3
    ca1c:	781b      	ldrb	r3, [r3, #0]
    ca1e:	2b00      	cmp	r3, #0
    ca20:	d10f      	bne.n	ca42 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    ca22:	230f      	movs	r3, #15
    ca24:	18fb      	adds	r3, r7, r3
    ca26:	781b      	ldrb	r3, [r3, #0]
    ca28:	009b      	lsls	r3, r3, #2
    ca2a:	2210      	movs	r2, #16
    ca2c:	4694      	mov	ip, r2
    ca2e:	44bc      	add	ip, r7
    ca30:	4463      	add	r3, ip
    ca32:	3b08      	subs	r3, #8
    ca34:	681a      	ldr	r2, [r3, #0]
    ca36:	230e      	movs	r3, #14
    ca38:	18fb      	adds	r3, r7, r3
    ca3a:	781b      	ldrb	r3, [r3, #0]
    ca3c:	01db      	lsls	r3, r3, #7
    ca3e:	18d3      	adds	r3, r2, r3
    ca40:	e000      	b.n	ca44 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    ca42:	2300      	movs	r3, #0
}
    ca44:	0018      	movs	r0, r3
    ca46:	46bd      	mov	sp, r7
    ca48:	b004      	add	sp, #16
    ca4a:	bd80      	pop	{r7, pc}
    ca4c:	41004400 	.word	0x41004400

0000ca50 <adc_is_syncing>:
{
    ca50:	b580      	push	{r7, lr}
    ca52:	b084      	sub	sp, #16
    ca54:	af00      	add	r7, sp, #0
    ca56:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	681b      	ldr	r3, [r3, #0]
    ca5c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    ca5e:	68fb      	ldr	r3, [r7, #12]
    ca60:	7e5b      	ldrb	r3, [r3, #25]
    ca62:	b2db      	uxtb	r3, r3
    ca64:	b25b      	sxtb	r3, r3
    ca66:	2b00      	cmp	r3, #0
    ca68:	da01      	bge.n	ca6e <adc_is_syncing+0x1e>
		return true;
    ca6a:	2301      	movs	r3, #1
    ca6c:	e000      	b.n	ca70 <adc_is_syncing+0x20>
	return false;
    ca6e:	2300      	movs	r3, #0
}
    ca70:	0018      	movs	r0, r3
    ca72:	46bd      	mov	sp, r7
    ca74:	b004      	add	sp, #16
    ca76:	bd80      	pop	{r7, pc}

0000ca78 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    ca78:	b580      	push	{r7, lr}
    ca7a:	b086      	sub	sp, #24
    ca7c:	af00      	add	r7, sp, #0
    ca7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    ca80:	687b      	ldr	r3, [r7, #4]
    ca82:	681b      	ldr	r3, [r3, #0]
    ca84:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    ca86:	693b      	ldr	r3, [r7, #16]
    ca88:	7e1b      	ldrb	r3, [r3, #24]
    ca8a:	b2db      	uxtb	r3, r3
    ca8c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    ca8e:	2300      	movs	r3, #0
    ca90:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    ca92:	68fb      	ldr	r3, [r7, #12]
    ca94:	2201      	movs	r2, #1
    ca96:	4013      	ands	r3, r2
    ca98:	d003      	beq.n	caa2 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    ca9a:	697b      	ldr	r3, [r7, #20]
    ca9c:	2201      	movs	r2, #1
    ca9e:	4313      	orrs	r3, r2
    caa0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    caa2:	68fb      	ldr	r3, [r7, #12]
    caa4:	2204      	movs	r2, #4
    caa6:	4013      	ands	r3, r2
    caa8:	d003      	beq.n	cab2 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    caaa:	697b      	ldr	r3, [r7, #20]
    caac:	2202      	movs	r2, #2
    caae:	4313      	orrs	r3, r2
    cab0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    cab2:	68fb      	ldr	r3, [r7, #12]
    cab4:	2202      	movs	r2, #2
    cab6:	4013      	ands	r3, r2
    cab8:	d003      	beq.n	cac2 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    caba:	697b      	ldr	r3, [r7, #20]
    cabc:	2204      	movs	r2, #4
    cabe:	4313      	orrs	r3, r2
    cac0:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    cac2:	697b      	ldr	r3, [r7, #20]
}
    cac4:	0018      	movs	r0, r3
    cac6:	46bd      	mov	sp, r7
    cac8:	b006      	add	sp, #24
    caca:	bd80      	pop	{r7, pc}

0000cacc <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    cacc:	b580      	push	{r7, lr}
    cace:	b084      	sub	sp, #16
    cad0:	af00      	add	r7, sp, #0
    cad2:	6078      	str	r0, [r7, #4]
    cad4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    cad6:	687b      	ldr	r3, [r7, #4]
    cad8:	681b      	ldr	r3, [r3, #0]
    cada:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    cadc:	2300      	movs	r3, #0
    cade:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    cae0:	683b      	ldr	r3, [r7, #0]
    cae2:	2201      	movs	r2, #1
    cae4:	4013      	ands	r3, r2
    cae6:	d003      	beq.n	caf0 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    cae8:	68fb      	ldr	r3, [r7, #12]
    caea:	2201      	movs	r2, #1
    caec:	4313      	orrs	r3, r2
    caee:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    caf0:	683b      	ldr	r3, [r7, #0]
    caf2:	2202      	movs	r2, #2
    caf4:	4013      	ands	r3, r2
    caf6:	d003      	beq.n	cb00 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    caf8:	68fb      	ldr	r3, [r7, #12]
    cafa:	2204      	movs	r2, #4
    cafc:	4313      	orrs	r3, r2
    cafe:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    cb00:	683b      	ldr	r3, [r7, #0]
    cb02:	2204      	movs	r2, #4
    cb04:	4013      	ands	r3, r2
    cb06:	d003      	beq.n	cb10 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    cb08:	68fb      	ldr	r3, [r7, #12]
    cb0a:	2202      	movs	r2, #2
    cb0c:	4313      	orrs	r3, r2
    cb0e:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    cb10:	68fb      	ldr	r3, [r7, #12]
    cb12:	b2da      	uxtb	r2, r3
    cb14:	68bb      	ldr	r3, [r7, #8]
    cb16:	761a      	strb	r2, [r3, #24]
}
    cb18:	46c0      	nop			; (mov r8, r8)
    cb1a:	46bd      	mov	sp, r7
    cb1c:	b004      	add	sp, #16
    cb1e:	bd80      	pop	{r7, pc}

0000cb20 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    cb20:	b580      	push	{r7, lr}
    cb22:	b084      	sub	sp, #16
    cb24:	af00      	add	r7, sp, #0
    cb26:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    cb28:	687b      	ldr	r3, [r7, #4]
    cb2a:	681b      	ldr	r3, [r3, #0]
    cb2c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    cb2e:	46c0      	nop			; (mov r8, r8)
    cb30:	687b      	ldr	r3, [r7, #4]
    cb32:	0018      	movs	r0, r3
    cb34:	4b0e      	ldr	r3, [pc, #56]	; (cb70 <adc_enable+0x50>)
    cb36:	4798      	blx	r3
    cb38:	1e03      	subs	r3, r0, #0
    cb3a:	d1f9      	bne.n	cb30 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    cb3c:	68fb      	ldr	r3, [r7, #12]
    cb3e:	220f      	movs	r2, #15
    cb40:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    cb42:	68fb      	ldr	r3, [r7, #12]
    cb44:	220f      	movs	r2, #15
    cb46:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    cb48:	68fb      	ldr	r3, [r7, #12]
    cb4a:	781b      	ldrb	r3, [r3, #0]
    cb4c:	b2db      	uxtb	r3, r3
    cb4e:	2202      	movs	r2, #2
    cb50:	4313      	orrs	r3, r2
    cb52:	b2da      	uxtb	r2, r3
    cb54:	68fb      	ldr	r3, [r7, #12]
    cb56:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    cb58:	46c0      	nop			; (mov r8, r8)
    cb5a:	687b      	ldr	r3, [r7, #4]
    cb5c:	0018      	movs	r0, r3
    cb5e:	4b04      	ldr	r3, [pc, #16]	; (cb70 <adc_enable+0x50>)
    cb60:	4798      	blx	r3
    cb62:	1e03      	subs	r3, r0, #0
    cb64:	d1f9      	bne.n	cb5a <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    cb66:	2300      	movs	r3, #0
}
    cb68:	0018      	movs	r0, r3
    cb6a:	46bd      	mov	sp, r7
    cb6c:	b004      	add	sp, #16
    cb6e:	bd80      	pop	{r7, pc}
    cb70:	0000ca51 	.word	0x0000ca51

0000cb74 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    cb74:	b580      	push	{r7, lr}
    cb76:	b084      	sub	sp, #16
    cb78:	af00      	add	r7, sp, #0
    cb7a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    cb7c:	687b      	ldr	r3, [r7, #4]
    cb7e:	681b      	ldr	r3, [r3, #0]
    cb80:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    cb82:	46c0      	nop			; (mov r8, r8)
    cb84:	687b      	ldr	r3, [r7, #4]
    cb86:	0018      	movs	r0, r3
    cb88:	4b0b      	ldr	r3, [pc, #44]	; (cbb8 <adc_start_conversion+0x44>)
    cb8a:	4798      	blx	r3
    cb8c:	1e03      	subs	r3, r0, #0
    cb8e:	d1f9      	bne.n	cb84 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    cb90:	68fb      	ldr	r3, [r7, #12]
    cb92:	7b1b      	ldrb	r3, [r3, #12]
    cb94:	b2db      	uxtb	r3, r3
    cb96:	2202      	movs	r2, #2
    cb98:	4313      	orrs	r3, r2
    cb9a:	b2da      	uxtb	r2, r3
    cb9c:	68fb      	ldr	r3, [r7, #12]
    cb9e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    cba0:	46c0      	nop			; (mov r8, r8)
    cba2:	687b      	ldr	r3, [r7, #4]
    cba4:	0018      	movs	r0, r3
    cba6:	4b04      	ldr	r3, [pc, #16]	; (cbb8 <adc_start_conversion+0x44>)
    cba8:	4798      	blx	r3
    cbaa:	1e03      	subs	r3, r0, #0
    cbac:	d1f9      	bne.n	cba2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    cbae:	46c0      	nop			; (mov r8, r8)
    cbb0:	46bd      	mov	sp, r7
    cbb2:	b004      	add	sp, #16
    cbb4:	bd80      	pop	{r7, pc}
    cbb6:	46c0      	nop			; (mov r8, r8)
    cbb8:	0000ca51 	.word	0x0000ca51

0000cbbc <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    cbbc:	b580      	push	{r7, lr}
    cbbe:	b084      	sub	sp, #16
    cbc0:	af00      	add	r7, sp, #0
    cbc2:	6078      	str	r0, [r7, #4]
    cbc4:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    cbc6:	687b      	ldr	r3, [r7, #4]
    cbc8:	0018      	movs	r0, r3
    cbca:	4b18      	ldr	r3, [pc, #96]	; (cc2c <adc_read+0x70>)
    cbcc:	4798      	blx	r3
    cbce:	0002      	movs	r2, r0
    cbd0:	2301      	movs	r3, #1
    cbd2:	4013      	ands	r3, r2
    cbd4:	d101      	bne.n	cbda <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    cbd6:	2305      	movs	r3, #5
    cbd8:	e023      	b.n	cc22 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    cbda:	687b      	ldr	r3, [r7, #4]
    cbdc:	681b      	ldr	r3, [r3, #0]
    cbde:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    cbe0:	46c0      	nop			; (mov r8, r8)
    cbe2:	687b      	ldr	r3, [r7, #4]
    cbe4:	0018      	movs	r0, r3
    cbe6:	4b12      	ldr	r3, [pc, #72]	; (cc30 <adc_read+0x74>)
    cbe8:	4798      	blx	r3
    cbea:	1e03      	subs	r3, r0, #0
    cbec:	d1f9      	bne.n	cbe2 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    cbee:	68fb      	ldr	r3, [r7, #12]
    cbf0:	8b5b      	ldrh	r3, [r3, #26]
    cbf2:	b29a      	uxth	r2, r3
    cbf4:	683b      	ldr	r3, [r7, #0]
    cbf6:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    cbf8:	687b      	ldr	r3, [r7, #4]
    cbfa:	2101      	movs	r1, #1
    cbfc:	0018      	movs	r0, r3
    cbfe:	4b0d      	ldr	r3, [pc, #52]	; (cc34 <adc_read+0x78>)
    cc00:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    cc02:	687b      	ldr	r3, [r7, #4]
    cc04:	0018      	movs	r0, r3
    cc06:	4b09      	ldr	r3, [pc, #36]	; (cc2c <adc_read+0x70>)
    cc08:	4798      	blx	r3
    cc0a:	0002      	movs	r2, r0
    cc0c:	2304      	movs	r3, #4
    cc0e:	4013      	ands	r3, r2
    cc10:	d006      	beq.n	cc20 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    cc12:	687b      	ldr	r3, [r7, #4]
    cc14:	2104      	movs	r1, #4
    cc16:	0018      	movs	r0, r3
    cc18:	4b06      	ldr	r3, [pc, #24]	; (cc34 <adc_read+0x78>)
    cc1a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    cc1c:	231e      	movs	r3, #30
    cc1e:	e000      	b.n	cc22 <adc_read+0x66>
	}

	return STATUS_OK;
    cc20:	2300      	movs	r3, #0
}
    cc22:	0018      	movs	r0, r3
    cc24:	46bd      	mov	sp, r7
    cc26:	b004      	add	sp, #16
    cc28:	bd80      	pop	{r7, pc}
    cc2a:	46c0      	nop			; (mov r8, r8)
    cc2c:	0000ca79 	.word	0x0000ca79
    cc30:	0000ca51 	.word	0x0000ca51
    cc34:	0000cacd 	.word	0x0000cacd

0000cc38 <system_interrupt_enable>:
{
    cc38:	b580      	push	{r7, lr}
    cc3a:	b082      	sub	sp, #8
    cc3c:	af00      	add	r7, sp, #0
    cc3e:	0002      	movs	r2, r0
    cc40:	1dfb      	adds	r3, r7, #7
    cc42:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cc44:	4b06      	ldr	r3, [pc, #24]	; (cc60 <system_interrupt_enable+0x28>)
    cc46:	1dfa      	adds	r2, r7, #7
    cc48:	7812      	ldrb	r2, [r2, #0]
    cc4a:	0011      	movs	r1, r2
    cc4c:	221f      	movs	r2, #31
    cc4e:	400a      	ands	r2, r1
    cc50:	2101      	movs	r1, #1
    cc52:	4091      	lsls	r1, r2
    cc54:	000a      	movs	r2, r1
    cc56:	601a      	str	r2, [r3, #0]
}
    cc58:	46c0      	nop			; (mov r8, r8)
    cc5a:	46bd      	mov	sp, r7
    cc5c:	b002      	add	sp, #8
    cc5e:	bd80      	pop	{r7, pc}
    cc60:	e000e100 	.word	0xe000e100

0000cc64 <i2c_master_is_syncing>:
{
    cc64:	b580      	push	{r7, lr}
    cc66:	b084      	sub	sp, #16
    cc68:	af00      	add	r7, sp, #0
    cc6a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    cc6c:	687b      	ldr	r3, [r7, #4]
    cc6e:	681b      	ldr	r3, [r3, #0]
    cc70:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    cc72:	68fb      	ldr	r3, [r7, #12]
    cc74:	69db      	ldr	r3, [r3, #28]
    cc76:	2207      	movs	r2, #7
    cc78:	4013      	ands	r3, r2
    cc7a:	1e5a      	subs	r2, r3, #1
    cc7c:	4193      	sbcs	r3, r2
    cc7e:	b2db      	uxtb	r3, r3
}
    cc80:	0018      	movs	r0, r3
    cc82:	46bd      	mov	sp, r7
    cc84:	b004      	add	sp, #16
    cc86:	bd80      	pop	{r7, pc}

0000cc88 <_i2c_master_wait_for_sync>:
{
    cc88:	b580      	push	{r7, lr}
    cc8a:	b082      	sub	sp, #8
    cc8c:	af00      	add	r7, sp, #0
    cc8e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    cc90:	46c0      	nop			; (mov r8, r8)
    cc92:	687b      	ldr	r3, [r7, #4]
    cc94:	0018      	movs	r0, r3
    cc96:	4b04      	ldr	r3, [pc, #16]	; (cca8 <_i2c_master_wait_for_sync+0x20>)
    cc98:	4798      	blx	r3
    cc9a:	1e03      	subs	r3, r0, #0
    cc9c:	d1f9      	bne.n	cc92 <_i2c_master_wait_for_sync+0xa>
}
    cc9e:	46c0      	nop			; (mov r8, r8)
    cca0:	46bd      	mov	sp, r7
    cca2:	b002      	add	sp, #8
    cca4:	bd80      	pop	{r7, pc}
    cca6:	46c0      	nop			; (mov r8, r8)
    cca8:	0000cc65 	.word	0x0000cc65

0000ccac <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    ccac:	b580      	push	{r7, lr}
    ccae:	b082      	sub	sp, #8
    ccb0:	af00      	add	r7, sp, #0
    ccb2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    ccb4:	687b      	ldr	r3, [r7, #4]
    ccb6:	2264      	movs	r2, #100	; 0x64
    ccb8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	4a1b      	ldr	r2, [pc, #108]	; (cd2c <i2c_master_get_config_defaults+0x80>)
    ccbe:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    ccc0:	687b      	ldr	r3, [r7, #4]
    ccc2:	2200      	movs	r2, #0
    ccc4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    ccc6:	687b      	ldr	r3, [r7, #4]
    ccc8:	2200      	movs	r2, #0
    ccca:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    cccc:	687b      	ldr	r3, [r7, #4]
    ccce:	2200      	movs	r2, #0
    ccd0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    ccd2:	687b      	ldr	r3, [r7, #4]
    ccd4:	2280      	movs	r2, #128	; 0x80
    ccd6:	0392      	lsls	r2, r2, #14
    ccd8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    ccda:	687b      	ldr	r3, [r7, #4]
    ccdc:	2201      	movs	r2, #1
    ccde:	4252      	negs	r2, r2
    cce0:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    cce2:	687b      	ldr	r3, [r7, #4]
    cce4:	2201      	movs	r2, #1
    cce6:	4252      	negs	r2, r2
    cce8:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    ccea:	687b      	ldr	r3, [r7, #4]
    ccec:	2200      	movs	r2, #0
    ccee:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    ccf0:	687b      	ldr	r3, [r7, #4]
    ccf2:	2200      	movs	r2, #0
    ccf4:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    ccf6:	687b      	ldr	r3, [r7, #4]
    ccf8:	2224      	movs	r2, #36	; 0x24
    ccfa:	2100      	movs	r1, #0
    ccfc:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    ccfe:	687b      	ldr	r3, [r7, #4]
    cd00:	2200      	movs	r2, #0
    cd02:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    cd04:	687b      	ldr	r3, [r7, #4]
    cd06:	222c      	movs	r2, #44	; 0x2c
    cd08:	2100      	movs	r1, #0
    cd0a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    cd0c:	687b      	ldr	r3, [r7, #4]
    cd0e:	222d      	movs	r2, #45	; 0x2d
    cd10:	2100      	movs	r1, #0
    cd12:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    cd14:	687b      	ldr	r3, [r7, #4]
    cd16:	222e      	movs	r2, #46	; 0x2e
    cd18:	2100      	movs	r1, #0
    cd1a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    cd1c:	687b      	ldr	r3, [r7, #4]
    cd1e:	22d7      	movs	r2, #215	; 0xd7
    cd20:	861a      	strh	r2, [r3, #48]	; 0x30
}
    cd22:	46c0      	nop			; (mov r8, r8)
    cd24:	46bd      	mov	sp, r7
    cd26:	b002      	add	sp, #8
    cd28:	bd80      	pop	{r7, pc}
    cd2a:	46c0      	nop			; (mov r8, r8)
    cd2c:	00000d48 	.word	0x00000d48

0000cd30 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    cd30:	b580      	push	{r7, lr}
    cd32:	b084      	sub	sp, #16
    cd34:	af00      	add	r7, sp, #0
    cd36:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    cd38:	687b      	ldr	r3, [r7, #4]
    cd3a:	681b      	ldr	r3, [r3, #0]
    cd3c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    cd3e:	2300      	movs	r3, #0
    cd40:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    cd42:	687b      	ldr	r3, [r7, #4]
    cd44:	0018      	movs	r0, r3
    cd46:	4b14      	ldr	r3, [pc, #80]	; (cd98 <i2c_master_enable+0x68>)
    cd48:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    cd4a:	68bb      	ldr	r3, [r7, #8]
    cd4c:	681b      	ldr	r3, [r3, #0]
    cd4e:	2202      	movs	r2, #2
    cd50:	431a      	orrs	r2, r3
    cd52:	68bb      	ldr	r3, [r7, #8]
    cd54:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cd56:	687b      	ldr	r3, [r7, #4]
    cd58:	681b      	ldr	r3, [r3, #0]
    cd5a:	0018      	movs	r0, r3
    cd5c:	4b0f      	ldr	r3, [pc, #60]	; (cd9c <i2c_master_enable+0x6c>)
    cd5e:	4798      	blx	r3
    cd60:	0003      	movs	r3, r0
    cd62:	0018      	movs	r0, r3
    cd64:	4b0e      	ldr	r3, [pc, #56]	; (cda0 <i2c_master_enable+0x70>)
    cd66:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    cd68:	e00c      	b.n	cd84 <i2c_master_enable+0x54>
		timeout_counter++;
    cd6a:	68fb      	ldr	r3, [r7, #12]
    cd6c:	3301      	adds	r3, #1
    cd6e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    cd70:	687b      	ldr	r3, [r7, #4]
    cd72:	88db      	ldrh	r3, [r3, #6]
    cd74:	001a      	movs	r2, r3
    cd76:	68fb      	ldr	r3, [r7, #12]
    cd78:	429a      	cmp	r2, r3
    cd7a:	d803      	bhi.n	cd84 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    cd7c:	68bb      	ldr	r3, [r7, #8]
    cd7e:	2210      	movs	r2, #16
    cd80:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    cd82:	e006      	b.n	cd92 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    cd84:	68bb      	ldr	r3, [r7, #8]
    cd86:	8b5b      	ldrh	r3, [r3, #26]
    cd88:	b29b      	uxth	r3, r3
    cd8a:	001a      	movs	r2, r3
    cd8c:	2310      	movs	r3, #16
    cd8e:	4013      	ands	r3, r2
    cd90:	d0eb      	beq.n	cd6a <i2c_master_enable+0x3a>
		}
	}
}
    cd92:	46bd      	mov	sp, r7
    cd94:	b004      	add	sp, #16
    cd96:	bd80      	pop	{r7, pc}
    cd98:	0000cc89 	.word	0x0000cc89
    cd9c:	0000b571 	.word	0x0000b571
    cda0:	0000cc39 	.word	0x0000cc39

0000cda4 <port_get_group_from_gpio_pin>:
{
    cda4:	b580      	push	{r7, lr}
    cda6:	b082      	sub	sp, #8
    cda8:	af00      	add	r7, sp, #0
    cdaa:	0002      	movs	r2, r0
    cdac:	1dfb      	adds	r3, r7, #7
    cdae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cdb0:	1dfb      	adds	r3, r7, #7
    cdb2:	781b      	ldrb	r3, [r3, #0]
    cdb4:	0018      	movs	r0, r3
    cdb6:	4b03      	ldr	r3, [pc, #12]	; (cdc4 <port_get_group_from_gpio_pin+0x20>)
    cdb8:	4798      	blx	r3
    cdba:	0003      	movs	r3, r0
}
    cdbc:	0018      	movs	r0, r3
    cdbe:	46bd      	mov	sp, r7
    cdc0:	b002      	add	sp, #8
    cdc2:	bd80      	pop	{r7, pc}
    cdc4:	0000c9f1 	.word	0x0000c9f1

0000cdc8 <port_get_config_defaults>:
{
    cdc8:	b580      	push	{r7, lr}
    cdca:	b082      	sub	sp, #8
    cdcc:	af00      	add	r7, sp, #0
    cdce:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    cdd0:	687b      	ldr	r3, [r7, #4]
    cdd2:	2200      	movs	r2, #0
    cdd4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    cdd6:	687b      	ldr	r3, [r7, #4]
    cdd8:	2201      	movs	r2, #1
    cdda:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    cddc:	687b      	ldr	r3, [r7, #4]
    cdde:	2200      	movs	r2, #0
    cde0:	709a      	strb	r2, [r3, #2]
}
    cde2:	46c0      	nop			; (mov r8, r8)
    cde4:	46bd      	mov	sp, r7
    cde6:	b002      	add	sp, #8
    cde8:	bd80      	pop	{r7, pc}
	...

0000cdec <port_pin_set_output_level>:
{
    cdec:	b580      	push	{r7, lr}
    cdee:	b084      	sub	sp, #16
    cdf0:	af00      	add	r7, sp, #0
    cdf2:	0002      	movs	r2, r0
    cdf4:	1dfb      	adds	r3, r7, #7
    cdf6:	701a      	strb	r2, [r3, #0]
    cdf8:	1dbb      	adds	r3, r7, #6
    cdfa:	1c0a      	adds	r2, r1, #0
    cdfc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    cdfe:	1dfb      	adds	r3, r7, #7
    ce00:	781b      	ldrb	r3, [r3, #0]
    ce02:	0018      	movs	r0, r3
    ce04:	4b0d      	ldr	r3, [pc, #52]	; (ce3c <port_pin_set_output_level+0x50>)
    ce06:	4798      	blx	r3
    ce08:	0003      	movs	r3, r0
    ce0a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ce0c:	1dfb      	adds	r3, r7, #7
    ce0e:	781b      	ldrb	r3, [r3, #0]
    ce10:	221f      	movs	r2, #31
    ce12:	4013      	ands	r3, r2
    ce14:	2201      	movs	r2, #1
    ce16:	409a      	lsls	r2, r3
    ce18:	0013      	movs	r3, r2
    ce1a:	60bb      	str	r3, [r7, #8]
	if (level) {
    ce1c:	1dbb      	adds	r3, r7, #6
    ce1e:	781b      	ldrb	r3, [r3, #0]
    ce20:	2b00      	cmp	r3, #0
    ce22:	d003      	beq.n	ce2c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    ce24:	68fb      	ldr	r3, [r7, #12]
    ce26:	68ba      	ldr	r2, [r7, #8]
    ce28:	619a      	str	r2, [r3, #24]
}
    ce2a:	e002      	b.n	ce32 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    ce2c:	68fb      	ldr	r3, [r7, #12]
    ce2e:	68ba      	ldr	r2, [r7, #8]
    ce30:	615a      	str	r2, [r3, #20]
}
    ce32:	46c0      	nop			; (mov r8, r8)
    ce34:	46bd      	mov	sp, r7
    ce36:	b004      	add	sp, #16
    ce38:	bd80      	pop	{r7, pc}
    ce3a:	46c0      	nop			; (mov r8, r8)
    ce3c:	0000cda5 	.word	0x0000cda5

0000ce40 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    ce40:	b580      	push	{r7, lr}
    ce42:	b082      	sub	sp, #8
    ce44:	af00      	add	r7, sp, #0
    ce46:	6078      	str	r0, [r7, #4]
    ce48:	000a      	movs	r2, r1
    ce4a:	1cfb      	adds	r3, r7, #3
    ce4c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    ce4e:	687b      	ldr	r3, [r7, #4]
    ce50:	7e5b      	ldrb	r3, [r3, #25]
    ce52:	b2db      	uxtb	r3, r3
    ce54:	b25a      	sxtb	r2, r3
    ce56:	1cfb      	adds	r3, r7, #3
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	2101      	movs	r1, #1
    ce5c:	4099      	lsls	r1, r3
    ce5e:	000b      	movs	r3, r1
    ce60:	b25b      	sxtb	r3, r3
    ce62:	4313      	orrs	r3, r2
    ce64:	b25b      	sxtb	r3, r3
    ce66:	b2da      	uxtb	r2, r3
    ce68:	687b      	ldr	r3, [r7, #4]
    ce6a:	765a      	strb	r2, [r3, #25]
}
    ce6c:	46c0      	nop			; (mov r8, r8)
    ce6e:	46bd      	mov	sp, r7
    ce70:	b002      	add	sp, #8
    ce72:	bd80      	pop	{r7, pc}

0000ce74 <usart_is_syncing>:
{
    ce74:	b580      	push	{r7, lr}
    ce76:	b084      	sub	sp, #16
    ce78:	af00      	add	r7, sp, #0
    ce7a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    ce7c:	687b      	ldr	r3, [r7, #4]
    ce7e:	681b      	ldr	r3, [r3, #0]
    ce80:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    ce82:	68fb      	ldr	r3, [r7, #12]
    ce84:	69db      	ldr	r3, [r3, #28]
    ce86:	1e5a      	subs	r2, r3, #1
    ce88:	4193      	sbcs	r3, r2
    ce8a:	b2db      	uxtb	r3, r3
}
    ce8c:	0018      	movs	r0, r3
    ce8e:	46bd      	mov	sp, r7
    ce90:	b004      	add	sp, #16
    ce92:	bd80      	pop	{r7, pc}

0000ce94 <_usart_wait_for_sync>:
{
    ce94:	b580      	push	{r7, lr}
    ce96:	b082      	sub	sp, #8
    ce98:	af00      	add	r7, sp, #0
    ce9a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    ce9c:	46c0      	nop			; (mov r8, r8)
    ce9e:	687b      	ldr	r3, [r7, #4]
    cea0:	0018      	movs	r0, r3
    cea2:	4b04      	ldr	r3, [pc, #16]	; (ceb4 <_usart_wait_for_sync+0x20>)
    cea4:	4798      	blx	r3
    cea6:	1e03      	subs	r3, r0, #0
    cea8:	d1f9      	bne.n	ce9e <_usart_wait_for_sync+0xa>
}
    ceaa:	46c0      	nop			; (mov r8, r8)
    ceac:	46bd      	mov	sp, r7
    ceae:	b002      	add	sp, #8
    ceb0:	bd80      	pop	{r7, pc}
    ceb2:	46c0      	nop			; (mov r8, r8)
    ceb4:	0000ce75 	.word	0x0000ce75

0000ceb8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    ceb8:	b580      	push	{r7, lr}
    ceba:	b082      	sub	sp, #8
    cebc:	af00      	add	r7, sp, #0
    cebe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    cec0:	687b      	ldr	r3, [r7, #4]
    cec2:	2280      	movs	r2, #128	; 0x80
    cec4:	05d2      	lsls	r2, r2, #23
    cec6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    cec8:	687b      	ldr	r3, [r7, #4]
    ceca:	2200      	movs	r2, #0
    cecc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    cece:	687b      	ldr	r3, [r7, #4]
    ced0:	22ff      	movs	r2, #255	; 0xff
    ced2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    ced4:	687b      	ldr	r3, [r7, #4]
    ced6:	2200      	movs	r2, #0
    ced8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ceda:	687b      	ldr	r3, [r7, #4]
    cedc:	2200      	movs	r2, #0
    cede:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    cee0:	687b      	ldr	r3, [r7, #4]
    cee2:	2296      	movs	r2, #150	; 0x96
    cee4:	0192      	lsls	r2, r2, #6
    cee6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    cee8:	687b      	ldr	r3, [r7, #4]
    ceea:	2224      	movs	r2, #36	; 0x24
    ceec:	2101      	movs	r1, #1
    ceee:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    cef0:	687b      	ldr	r3, [r7, #4]
    cef2:	2225      	movs	r2, #37	; 0x25
    cef4:	2101      	movs	r1, #1
    cef6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    cef8:	687b      	ldr	r3, [r7, #4]
    cefa:	2226      	movs	r2, #38	; 0x26
    cefc:	2100      	movs	r1, #0
    cefe:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    cf00:	687b      	ldr	r3, [r7, #4]
    cf02:	2227      	movs	r2, #39	; 0x27
    cf04:	2100      	movs	r1, #0
    cf06:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    cf08:	687b      	ldr	r3, [r7, #4]
    cf0a:	2200      	movs	r2, #0
    cf0c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    cf0e:	687b      	ldr	r3, [r7, #4]
    cf10:	2288      	movs	r2, #136	; 0x88
    cf12:	0352      	lsls	r2, r2, #13
    cf14:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    cf16:	687b      	ldr	r3, [r7, #4]
    cf18:	222c      	movs	r2, #44	; 0x2c
    cf1a:	2100      	movs	r1, #0
    cf1c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    cf1e:	687b      	ldr	r3, [r7, #4]
    cf20:	222d      	movs	r2, #45	; 0x2d
    cf22:	2100      	movs	r1, #0
    cf24:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    cf26:	687b      	ldr	r3, [r7, #4]
    cf28:	2200      	movs	r2, #0
    cf2a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    cf2c:	687b      	ldr	r3, [r7, #4]
    cf2e:	2200      	movs	r2, #0
    cf30:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    cf32:	687b      	ldr	r3, [r7, #4]
    cf34:	2200      	movs	r2, #0
    cf36:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    cf38:	687b      	ldr	r3, [r7, #4]
    cf3a:	2200      	movs	r2, #0
    cf3c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    cf3e:	687b      	ldr	r3, [r7, #4]
    cf40:	2200      	movs	r2, #0
    cf42:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    cf44:	687b      	ldr	r3, [r7, #4]
    cf46:	2200      	movs	r2, #0
    cf48:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    cf4a:	687b      	ldr	r3, [r7, #4]
    cf4c:	2200      	movs	r2, #0
    cf4e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    cf50:	687b      	ldr	r3, [r7, #4]
    cf52:	2200      	movs	r2, #0
    cf54:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    cf56:	687b      	ldr	r3, [r7, #4]
    cf58:	2200      	movs	r2, #0
    cf5a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    cf5c:	687b      	ldr	r3, [r7, #4]
    cf5e:	2200      	movs	r2, #0
    cf60:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    cf62:	687b      	ldr	r3, [r7, #4]
    cf64:	2213      	movs	r2, #19
    cf66:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    cf68:	687b      	ldr	r3, [r7, #4]
    cf6a:	2200      	movs	r2, #0
    cf6c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    cf6e:	46c0      	nop			; (mov r8, r8)
    cf70:	46bd      	mov	sp, r7
    cf72:	b002      	add	sp, #8
    cf74:	bd80      	pop	{r7, pc}
	...

0000cf78 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    cf78:	b580      	push	{r7, lr}
    cf7a:	b084      	sub	sp, #16
    cf7c:	af00      	add	r7, sp, #0
    cf7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    cf80:	687b      	ldr	r3, [r7, #4]
    cf82:	681b      	ldr	r3, [r3, #0]
    cf84:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cf86:	687b      	ldr	r3, [r7, #4]
    cf88:	681b      	ldr	r3, [r3, #0]
    cf8a:	0018      	movs	r0, r3
    cf8c:	4b09      	ldr	r3, [pc, #36]	; (cfb4 <usart_enable+0x3c>)
    cf8e:	4798      	blx	r3
    cf90:	0003      	movs	r3, r0
    cf92:	0018      	movs	r0, r3
    cf94:	4b08      	ldr	r3, [pc, #32]	; (cfb8 <usart_enable+0x40>)
    cf96:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    cf98:	687b      	ldr	r3, [r7, #4]
    cf9a:	0018      	movs	r0, r3
    cf9c:	4b07      	ldr	r3, [pc, #28]	; (cfbc <usart_enable+0x44>)
    cf9e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    cfa0:	68fb      	ldr	r3, [r7, #12]
    cfa2:	681b      	ldr	r3, [r3, #0]
    cfa4:	2202      	movs	r2, #2
    cfa6:	431a      	orrs	r2, r3
    cfa8:	68fb      	ldr	r3, [r7, #12]
    cfaa:	601a      	str	r2, [r3, #0]
}
    cfac:	46c0      	nop			; (mov r8, r8)
    cfae:	46bd      	mov	sp, r7
    cfb0:	b004      	add	sp, #16
    cfb2:	bd80      	pop	{r7, pc}
    cfb4:	0000b571 	.word	0x0000b571
    cfb8:	0000cc39 	.word	0x0000cc39
    cfbc:	0000ce95 	.word	0x0000ce95

0000cfc0 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    cfc0:	b580      	push	{r7, lr}
    cfc2:	b084      	sub	sp, #16
    cfc4:	af00      	add	r7, sp, #0
    cfc6:	60f8      	str	r0, [r7, #12]
    cfc8:	60b9      	str	r1, [r7, #8]
    cfca:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    cfcc:	687a      	ldr	r2, [r7, #4]
    cfce:	68b9      	ldr	r1, [r7, #8]
    cfd0:	68fb      	ldr	r3, [r7, #12]
    cfd2:	0018      	movs	r0, r3
    cfd4:	4b05      	ldr	r3, [pc, #20]	; (cfec <usart_serial_init+0x2c>)
    cfd6:	4798      	blx	r3
    cfd8:	1e03      	subs	r3, r0, #0
    cfda:	d101      	bne.n	cfe0 <usart_serial_init+0x20>
		return true;
    cfdc:	2301      	movs	r3, #1
    cfde:	e000      	b.n	cfe2 <usart_serial_init+0x22>
	}
	else {
		return false;
    cfe0:	2300      	movs	r3, #0
	}
}
    cfe2:	0018      	movs	r0, r3
    cfe4:	46bd      	mov	sp, r7
    cfe6:	b004      	add	sp, #16
    cfe8:	bd80      	pop	{r7, pc}
    cfea:	46c0      	nop			; (mov r8, r8)
    cfec:	0000ada9 	.word	0x0000ada9

0000cff0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    cff0:	b580      	push	{r7, lr}
    cff2:	b082      	sub	sp, #8
    cff4:	af00      	add	r7, sp, #0
    cff6:	6078      	str	r0, [r7, #4]
    cff8:	000a      	movs	r2, r1
    cffa:	1cfb      	adds	r3, r7, #3
    cffc:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    cffe:	46c0      	nop			; (mov r8, r8)
    d000:	1cfb      	adds	r3, r7, #3
    d002:	781b      	ldrb	r3, [r3, #0]
    d004:	b29a      	uxth	r2, r3
    d006:	687b      	ldr	r3, [r7, #4]
    d008:	0011      	movs	r1, r2
    d00a:	0018      	movs	r0, r3
    d00c:	4b04      	ldr	r3, [pc, #16]	; (d020 <usart_serial_putchar+0x30>)
    d00e:	4798      	blx	r3
    d010:	1e03      	subs	r3, r0, #0
    d012:	d1f5      	bne.n	d000 <usart_serial_putchar+0x10>

	return STATUS_OK;
    d014:	2300      	movs	r3, #0
}
    d016:	0018      	movs	r0, r3
    d018:	46bd      	mov	sp, r7
    d01a:	b002      	add	sp, #8
    d01c:	bd80      	pop	{r7, pc}
    d01e:	46c0      	nop			; (mov r8, r8)
    d020:	0000b01d 	.word	0x0000b01d

0000d024 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    d024:	b580      	push	{r7, lr}
    d026:	b084      	sub	sp, #16
    d028:	af00      	add	r7, sp, #0
    d02a:	6078      	str	r0, [r7, #4]
    d02c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    d02e:	230e      	movs	r3, #14
    d030:	18fb      	adds	r3, r7, r3
    d032:	2200      	movs	r2, #0
    d034:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    d036:	46c0      	nop			; (mov r8, r8)
    d038:	230e      	movs	r3, #14
    d03a:	18fa      	adds	r2, r7, r3
    d03c:	687b      	ldr	r3, [r7, #4]
    d03e:	0011      	movs	r1, r2
    d040:	0018      	movs	r0, r3
    d042:	4b07      	ldr	r3, [pc, #28]	; (d060 <usart_serial_getchar+0x3c>)
    d044:	4798      	blx	r3
    d046:	1e03      	subs	r3, r0, #0
    d048:	d1f6      	bne.n	d038 <usart_serial_getchar+0x14>

	*c = temp;
    d04a:	230e      	movs	r3, #14
    d04c:	18fb      	adds	r3, r7, r3
    d04e:	881b      	ldrh	r3, [r3, #0]
    d050:	b2da      	uxtb	r2, r3
    d052:	683b      	ldr	r3, [r7, #0]
    d054:	701a      	strb	r2, [r3, #0]
}
    d056:	46c0      	nop			; (mov r8, r8)
    d058:	46bd      	mov	sp, r7
    d05a:	b004      	add	sp, #16
    d05c:	bd80      	pop	{r7, pc}
    d05e:	46c0      	nop			; (mov r8, r8)
    d060:	0000b081 	.word	0x0000b081

0000d064 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    d064:	b580      	push	{r7, lr}
    d066:	b084      	sub	sp, #16
    d068:	af00      	add	r7, sp, #0
    d06a:	60f8      	str	r0, [r7, #12]
    d06c:	60b9      	str	r1, [r7, #8]
    d06e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    d070:	4b10      	ldr	r3, [pc, #64]	; (d0b4 <stdio_serial_init+0x50>)
    d072:	68fa      	ldr	r2, [r7, #12]
    d074:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    d076:	4b10      	ldr	r3, [pc, #64]	; (d0b8 <stdio_serial_init+0x54>)
    d078:	4a10      	ldr	r2, [pc, #64]	; (d0bc <stdio_serial_init+0x58>)
    d07a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    d07c:	4b10      	ldr	r3, [pc, #64]	; (d0c0 <stdio_serial_init+0x5c>)
    d07e:	4a11      	ldr	r2, [pc, #68]	; (d0c4 <stdio_serial_init+0x60>)
    d080:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    d082:	687a      	ldr	r2, [r7, #4]
    d084:	68b9      	ldr	r1, [r7, #8]
    d086:	68fb      	ldr	r3, [r7, #12]
    d088:	0018      	movs	r0, r3
    d08a:	4b0f      	ldr	r3, [pc, #60]	; (d0c8 <stdio_serial_init+0x64>)
    d08c:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    d08e:	4b0f      	ldr	r3, [pc, #60]	; (d0cc <stdio_serial_init+0x68>)
    d090:	681b      	ldr	r3, [r3, #0]
    d092:	689b      	ldr	r3, [r3, #8]
    d094:	2100      	movs	r1, #0
    d096:	0018      	movs	r0, r3
    d098:	4b0d      	ldr	r3, [pc, #52]	; (d0d0 <stdio_serial_init+0x6c>)
    d09a:	4798      	blx	r3
	setbuf(stdin, NULL);
    d09c:	4b0b      	ldr	r3, [pc, #44]	; (d0cc <stdio_serial_init+0x68>)
    d09e:	681b      	ldr	r3, [r3, #0]
    d0a0:	685b      	ldr	r3, [r3, #4]
    d0a2:	2100      	movs	r1, #0
    d0a4:	0018      	movs	r0, r3
    d0a6:	4b0a      	ldr	r3, [pc, #40]	; (d0d0 <stdio_serial_init+0x6c>)
    d0a8:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    d0aa:	46c0      	nop			; (mov r8, r8)
    d0ac:	46bd      	mov	sp, r7
    d0ae:	b004      	add	sp, #16
    d0b0:	bd80      	pop	{r7, pc}
    d0b2:	46c0      	nop			; (mov r8, r8)
    d0b4:	20000760 	.word	0x20000760
    d0b8:	2000075c 	.word	0x2000075c
    d0bc:	0000cff1 	.word	0x0000cff1
    d0c0:	20000758 	.word	0x20000758
    d0c4:	0000d025 	.word	0x0000d025
    d0c8:	0000cfc1 	.word	0x0000cfc1
    d0cc:	20000080 	.word	0x20000080
    d0d0:	0000f201 	.word	0x0000f201

0000d0d4 <get_moisture>:
/* Gets the moisture value from SEN13322
*
*/
//TODO Set reference value
float get_moisture(void)
{
    d0d4:	b580      	push	{r7, lr}
    d0d6:	b082      	sub	sp, #8
    d0d8:	af00      	add	r7, sp, #0
	// turn on sensor
	configure_port_pins_set(PIN_PA17);
    d0da:	2011      	movs	r0, #17
    d0dc:	4b19      	ldr	r3, [pc, #100]	; (d144 <get_moisture+0x70>)
    d0de:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA17, true);
    d0e0:	2101      	movs	r1, #1
    d0e2:	2011      	movs	r0, #17
    d0e4:	4b18      	ldr	r3, [pc, #96]	; (d148 <get_moisture+0x74>)
    d0e6:	4798      	blx	r3
	
	delay_ms(500);
    d0e8:	23fa      	movs	r3, #250	; 0xfa
    d0ea:	005b      	lsls	r3, r3, #1
    d0ec:	0018      	movs	r0, r3
    d0ee:	4b17      	ldr	r3, [pc, #92]	; (d14c <get_moisture+0x78>)
    d0f0:	4798      	blx	r3
	
	// read ADC
	uint16_t adc_result;
	adc_start_conversion(&adc_instance);
    d0f2:	4b17      	ldr	r3, [pc, #92]	; (d150 <get_moisture+0x7c>)
    d0f4:	0018      	movs	r0, r3
    d0f6:	4b17      	ldr	r3, [pc, #92]	; (d154 <get_moisture+0x80>)
    d0f8:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    d0fa:	1cba      	adds	r2, r7, #2
    d0fc:	4b14      	ldr	r3, [pc, #80]	; (d150 <get_moisture+0x7c>)
    d0fe:	0011      	movs	r1, r2
    d100:	0018      	movs	r0, r3
    d102:	4b15      	ldr	r3, [pc, #84]	; (d158 <get_moisture+0x84>)
    d104:	4798      	blx	r3
    d106:	0003      	movs	r3, r0
    d108:	2b05      	cmp	r3, #5
    d10a:	d0f6      	beq.n	d0fa <get_moisture+0x26>
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
    d10c:	1cbb      	adds	r3, r7, #2
    d10e:	881b      	ldrh	r3, [r3, #0]
    d110:	001a      	movs	r2, r3
    d112:	4b12      	ldr	r3, [pc, #72]	; (d15c <get_moisture+0x88>)
    d114:	0010      	movs	r0, r2
    d116:	4798      	blx	r3
    d118:	1c02      	adds	r2, r0, #0
    d11a:	4b11      	ldr	r3, [pc, #68]	; (d160 <get_moisture+0x8c>)
    d11c:	4911      	ldr	r1, [pc, #68]	; (d164 <get_moisture+0x90>)
    d11e:	1c10      	adds	r0, r2, #0
    d120:	4798      	blx	r3
    d122:	1c03      	adds	r3, r0, #0
    d124:	1c1a      	adds	r2, r3, #0
    d126:	4b10      	ldr	r3, [pc, #64]	; (d168 <get_moisture+0x94>)
    d128:	4910      	ldr	r1, [pc, #64]	; (d16c <get_moisture+0x98>)
    d12a:	1c10      	adds	r0, r2, #0
    d12c:	4798      	blx	r3
    d12e:	1c03      	adds	r3, r0, #0
    d130:	607b      	str	r3, [r7, #4]
	
	//turn off sensor
	port_pin_set_output_level(PIN_PA17, false);
    d132:	2100      	movs	r1, #0
    d134:	2011      	movs	r0, #17
    d136:	4b04      	ldr	r3, [pc, #16]	; (d148 <get_moisture+0x74>)
    d138:	4798      	blx	r3
	

	return moisture;
    d13a:	687b      	ldr	r3, [r7, #4]

	
}
    d13c:	1c18      	adds	r0, r3, #0
    d13e:	46bd      	mov	sp, r7
    d140:	b002      	add	sp, #8
    d142:	bd80      	pop	{r7, pc}
    d144:	0000d3c5 	.word	0x0000d3c5
    d148:	0000cded 	.word	0x0000cded
    d14c:	000088b9 	.word	0x000088b9
    d150:	200006f8 	.word	0x200006f8
    d154:	0000cb75 	.word	0x0000cb75
    d158:	0000cbbd 	.word	0x0000cbbd
    d15c:	00011ccd 	.word	0x00011ccd
    d160:	000117fd 	.word	0x000117fd
    d164:	457ff000 	.word	0x457ff000
    d168:	00011a8d 	.word	0x00011a8d
    d16c:	42c80000 	.word	0x42c80000

0000d170 <configure_i2c_temp>:
 *      @li Pin SDA: PA08 //TODO: CONFIRM
 *      @li Pin SCL: PA09 //TODO: CONFIRM
 *      @li Clock Generator: @ref GCLK_GENERATOR_0
 */
void configure_i2c_temp(void)
{
    d170:	b580      	push	{r7, lr}
    d172:	b08e      	sub	sp, #56	; 0x38
    d174:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    d176:	1d3b      	adds	r3, r7, #4
    d178:	0018      	movs	r0, r3
    d17a:	4b10      	ldr	r3, [pc, #64]	; (d1bc <configure_i2c_temp+0x4c>)
    d17c:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    d17e:	1d3b      	adds	r3, r7, #4
    d180:	2201      	movs	r2, #1
    d182:	4252      	negs	r2, r2
    d184:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    d186:	1d3b      	adds	r3, r7, #4
    d188:	4a0d      	ldr	r2, [pc, #52]	; (d1c0 <configure_i2c_temp+0x50>)
    d18a:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    d18c:	1d3b      	adds	r3, r7, #4
    d18e:	4a0d      	ldr	r2, [pc, #52]	; (d1c4 <configure_i2c_temp+0x54>)
    d190:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    d192:	1d3b      	adds	r3, r7, #4
    d194:	2200      	movs	r2, #0
    d196:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_hdc_instance, CONF_I2C_MASTER_MODULE_TEMP, &config_i2c_master) != STATUS_OK);
    d198:	46c0      	nop			; (mov r8, r8)
    d19a:	1d3a      	adds	r2, r7, #4
    d19c:	490a      	ldr	r1, [pc, #40]	; (d1c8 <configure_i2c_temp+0x58>)
    d19e:	4b0b      	ldr	r3, [pc, #44]	; (d1cc <configure_i2c_temp+0x5c>)
    d1a0:	0018      	movs	r0, r3
    d1a2:	4b0b      	ldr	r3, [pc, #44]	; (d1d0 <configure_i2c_temp+0x60>)
    d1a4:	4798      	blx	r3
    d1a6:	1e03      	subs	r3, r0, #0
    d1a8:	d1f7      	bne.n	d19a <configure_i2c_temp+0x2a>
	i2c_master_enable(&i2c_hdc_instance);
    d1aa:	4b08      	ldr	r3, [pc, #32]	; (d1cc <configure_i2c_temp+0x5c>)
    d1ac:	0018      	movs	r0, r3
    d1ae:	4b09      	ldr	r3, [pc, #36]	; (d1d4 <configure_i2c_temp+0x64>)
    d1b0:	4798      	blx	r3
}
    d1b2:	46c0      	nop			; (mov r8, r8)
    d1b4:	46bd      	mov	sp, r7
    d1b6:	b00e      	add	sp, #56	; 0x38
    d1b8:	bd80      	pop	{r7, pc}
    d1ba:	46c0      	nop			; (mov r8, r8)
    d1bc:	0000ccad 	.word	0x0000ccad
    d1c0:	00160002 	.word	0x00160002
    d1c4:	00170002 	.word	0x00170002
    d1c8:	42001400 	.word	0x42001400
    d1cc:	20000690 	.word	0x20000690
    d1d0:	000095cd 	.word	0x000095cd
    d1d4:	0000cd31 	.word	0x0000cd31

0000d1d8 <configure_i2c_lux>:

void configure_i2c_lux(void)
{
    d1d8:	b580      	push	{r7, lr}
    d1da:	b08e      	sub	sp, #56	; 0x38
    d1dc:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    d1de:	1d3b      	adds	r3, r7, #4
    d1e0:	0018      	movs	r0, r3
    d1e2:	4b10      	ldr	r3, [pc, #64]	; (d224 <configure_i2c_lux+0x4c>)
    d1e4:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    d1e6:	1d3b      	adds	r3, r7, #4
    d1e8:	2201      	movs	r2, #1
    d1ea:	4252      	negs	r2, r2
    d1ec:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    d1ee:	1d3b      	adds	r3, r7, #4
    d1f0:	4a0d      	ldr	r2, [pc, #52]	; (d228 <configure_i2c_lux+0x50>)
    d1f2:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    d1f4:	1d3b      	adds	r3, r7, #4
    d1f6:	4a0d      	ldr	r2, [pc, #52]	; (d22c <configure_i2c_lux+0x54>)
    d1f8:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    d1fa:	1d3b      	adds	r3, r7, #4
    d1fc:	2200      	movs	r2, #0
    d1fe:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_tsl_instance, CONF_I2C_MASTER_MODULE_LUX, &config_i2c_master) != STATUS_OK);
    d200:	46c0      	nop			; (mov r8, r8)
    d202:	1d3a      	adds	r2, r7, #4
    d204:	490a      	ldr	r1, [pc, #40]	; (d230 <configure_i2c_lux+0x58>)
    d206:	4b0b      	ldr	r3, [pc, #44]	; (d234 <configure_i2c_lux+0x5c>)
    d208:	0018      	movs	r0, r3
    d20a:	4b0b      	ldr	r3, [pc, #44]	; (d238 <configure_i2c_lux+0x60>)
    d20c:	4798      	blx	r3
    d20e:	1e03      	subs	r3, r0, #0
    d210:	d1f7      	bne.n	d202 <configure_i2c_lux+0x2a>
	i2c_master_enable(&i2c_tsl_instance);
    d212:	4b08      	ldr	r3, [pc, #32]	; (d234 <configure_i2c_lux+0x5c>)
    d214:	0018      	movs	r0, r3
    d216:	4b09      	ldr	r3, [pc, #36]	; (d23c <configure_i2c_lux+0x64>)
    d218:	4798      	blx	r3
}
    d21a:	46c0      	nop			; (mov r8, r8)
    d21c:	46bd      	mov	sp, r7
    d21e:	b00e      	add	sp, #56	; 0x38
    d220:	bd80      	pop	{r7, pc}
    d222:	46c0      	nop			; (mov r8, r8)
    d224:	0000ccad 	.word	0x0000ccad
    d228:	00080002 	.word	0x00080002
    d22c:	00090002 	.word	0x00090002
    d230:	42000800 	.word	0x42000800
    d234:	2000061c 	.word	0x2000061c
    d238:	000095cd 	.word	0x000095cd
    d23c:	0000cd31 	.word	0x0000cd31

0000d240 <i2c_write_complete_callback_hdc>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback_hdc(struct i2c_master_module *const module)
{
    d240:	b580      	push	{r7, lr}
    d242:	b082      	sub	sp, #8
    d244:	af00      	add	r7, sp, #0
    d246:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_hdc_instance, &rd_packet);
    d248:	4a04      	ldr	r2, [pc, #16]	; (d25c <i2c_write_complete_callback_hdc+0x1c>)
    d24a:	4b05      	ldr	r3, [pc, #20]	; (d260 <i2c_write_complete_callback_hdc+0x20>)
    d24c:	0011      	movs	r1, r2
    d24e:	0018      	movs	r0, r3
    d250:	4b04      	ldr	r3, [pc, #16]	; (d264 <i2c_write_complete_callback_hdc+0x24>)
    d252:	4798      	blx	r3
}
    d254:	46c0      	nop			; (mov r8, r8)
    d256:	46bd      	mov	sp, r7
    d258:	b002      	add	sp, #8
    d25a:	bd80      	pop	{r7, pc}
    d25c:	20000074 	.word	0x20000074
    d260:	20000690 	.word	0x20000690
    d264:	0000a08d 	.word	0x0000a08d

0000d268 <i2c_write_complete_callback_tsl>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback_tsl(struct i2c_master_module *const module)
{
    d268:	b580      	push	{r7, lr}
    d26a:	b082      	sub	sp, #8
    d26c:	af00      	add	r7, sp, #0
    d26e:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_tsl_instance, &rd_packet);
    d270:	4a04      	ldr	r2, [pc, #16]	; (d284 <i2c_write_complete_callback_tsl+0x1c>)
    d272:	4b05      	ldr	r3, [pc, #20]	; (d288 <i2c_write_complete_callback_tsl+0x20>)
    d274:	0011      	movs	r1, r2
    d276:	0018      	movs	r0, r3
    d278:	4b04      	ldr	r3, [pc, #16]	; (d28c <i2c_write_complete_callback_tsl+0x24>)
    d27a:	4798      	blx	r3
}
    d27c:	46c0      	nop			; (mov r8, r8)
    d27e:	46bd      	mov	sp, r7
    d280:	b002      	add	sp, #8
    d282:	bd80      	pop	{r7, pc}
    d284:	20000074 	.word	0x20000074
    d288:	2000061c 	.word	0x2000061c
    d28c:	0000a08d 	.word	0x0000a08d

0000d290 <configure_i2c_callbacks_hdc>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks_hdc(void)
{
    d290:	b580      	push	{r7, lr}
    d292:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_hdc_instance, i2c_write_complete_callback_hdc,
    d294:	4906      	ldr	r1, [pc, #24]	; (d2b0 <configure_i2c_callbacks_hdc+0x20>)
    d296:	4b07      	ldr	r3, [pc, #28]	; (d2b4 <configure_i2c_callbacks_hdc+0x24>)
    d298:	2200      	movs	r2, #0
    d29a:	0018      	movs	r0, r3
    d29c:	4b06      	ldr	r3, [pc, #24]	; (d2b8 <configure_i2c_callbacks_hdc+0x28>)
    d29e:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_hdc_instance,
    d2a0:	4b04      	ldr	r3, [pc, #16]	; (d2b4 <configure_i2c_callbacks_hdc+0x24>)
    d2a2:	2100      	movs	r1, #0
    d2a4:	0018      	movs	r0, r3
    d2a6:	4b05      	ldr	r3, [pc, #20]	; (d2bc <configure_i2c_callbacks_hdc+0x2c>)
    d2a8:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    d2aa:	46c0      	nop			; (mov r8, r8)
    d2ac:	46bd      	mov	sp, r7
    d2ae:	bd80      	pop	{r7, pc}
    d2b0:	0000d241 	.word	0x0000d241
    d2b4:	20000690 	.word	0x20000690
    d2b8:	00009eed 	.word	0x00009eed
    d2bc:	0000ce41 	.word	0x0000ce41

0000d2c0 <configure_i2c_callbacks_tsl>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks_tsl(void)
{
    d2c0:	b580      	push	{r7, lr}
    d2c2:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_tsl_instance, i2c_write_complete_callback_tsl,
    d2c4:	4906      	ldr	r1, [pc, #24]	; (d2e0 <configure_i2c_callbacks_tsl+0x20>)
    d2c6:	4b07      	ldr	r3, [pc, #28]	; (d2e4 <configure_i2c_callbacks_tsl+0x24>)
    d2c8:	2200      	movs	r2, #0
    d2ca:	0018      	movs	r0, r3
    d2cc:	4b06      	ldr	r3, [pc, #24]	; (d2e8 <configure_i2c_callbacks_tsl+0x28>)
    d2ce:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_tsl_instance,
    d2d0:	4b04      	ldr	r3, [pc, #16]	; (d2e4 <configure_i2c_callbacks_tsl+0x24>)
    d2d2:	2100      	movs	r1, #0
    d2d4:	0018      	movs	r0, r3
    d2d6:	4b05      	ldr	r3, [pc, #20]	; (d2ec <configure_i2c_callbacks_tsl+0x2c>)
    d2d8:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    d2da:	46c0      	nop			; (mov r8, r8)
    d2dc:	46bd      	mov	sp, r7
    d2de:	bd80      	pop	{r7, pc}
    d2e0:	0000d269 	.word	0x0000d269
    d2e4:	2000061c 	.word	0x2000061c
    d2e8:	00009eed 	.word	0x00009eed
    d2ec:	0000ce41 	.word	0x0000ce41

0000d2f0 <configure_usart>:
 *      @li RX Pin: PA20
 *      @li TX Pin: PA21
 *      @li SERCOM: SERCOM3
 */
void configure_usart(void)
{
    d2f0:	b580      	push	{r7, lr}
    d2f2:	b090      	sub	sp, #64	; 0x40
    d2f4:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
    d2f6:	003b      	movs	r3, r7
    d2f8:	0018      	movs	r0, r3
    d2fa:	4b13      	ldr	r3, [pc, #76]	; (d348 <configure_usart+0x58>)
    d2fc:	4798      	blx	r3
	config_usart.baudrate = 9600;
    d2fe:	003b      	movs	r3, r7
    d300:	2296      	movs	r2, #150	; 0x96
    d302:	0192      	lsls	r2, r2, #6
    d304:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    d306:	003b      	movs	r3, r7
    d308:	22c4      	movs	r2, #196	; 0xc4
    d30a:	0392      	lsls	r2, r2, #14
    d30c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    d30e:	003b      	movs	r3, r7
    d310:	2201      	movs	r2, #1
    d312:	4252      	negs	r2, r2
    d314:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    d316:	003b      	movs	r3, r7
    d318:	2201      	movs	r2, #1
    d31a:	4252      	negs	r2, r2
    d31c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    d31e:	003b      	movs	r3, r7
    d320:	4a0a      	ldr	r2, [pc, #40]	; (d34c <configure_usart+0x5c>)
    d322:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    d324:	003b      	movs	r3, r7
    d326:	4a0a      	ldr	r2, [pc, #40]	; (d350 <configure_usart+0x60>)
    d328:	63da      	str	r2, [r3, #60]	; 0x3c
	//config_usart.pinmux_pad0 = PINMUX_UNUSED;
	//config_usart.pinmux_pad1 = PINMUX_UNUSED;
	//config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
	//config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    d32a:	003a      	movs	r2, r7
    d32c:	4909      	ldr	r1, [pc, #36]	; (d354 <configure_usart+0x64>)
    d32e:	4b0a      	ldr	r3, [pc, #40]	; (d358 <configure_usart+0x68>)
    d330:	0018      	movs	r0, r3
    d332:	4b0a      	ldr	r3, [pc, #40]	; (d35c <configure_usart+0x6c>)
    d334:	4798      	blx	r3

	usart_enable(&usart_instance);
    d336:	4b08      	ldr	r3, [pc, #32]	; (d358 <configure_usart+0x68>)
    d338:	0018      	movs	r0, r3
    d33a:	4b09      	ldr	r3, [pc, #36]	; (d360 <configure_usart+0x70>)
    d33c:	4798      	blx	r3
}
    d33e:	46c0      	nop			; (mov r8, r8)
    d340:	46bd      	mov	sp, r7
    d342:	b010      	add	sp, #64	; 0x40
    d344:	bd80      	pop	{r7, pc}
    d346:	46c0      	nop			; (mov r8, r8)
    d348:	0000ceb9 	.word	0x0000ceb9
    d34c:	002a0003 	.word	0x002a0003
    d350:	002b0003 	.word	0x002b0003
    d354:	42001800 	.word	0x42001800
    d358:	200005e8 	.word	0x200005e8
    d35c:	0000d065 	.word	0x0000d065
    d360:	0000cf79 	.word	0x0000cf79

0000d364 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    d364:	b580      	push	{r7, lr}
    d366:	b08e      	sub	sp, #56	; 0x38
    d368:	af00      	add	r7, sp, #0
    d36a:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    d36c:	2308      	movs	r3, #8
    d36e:	18fb      	adds	r3, r7, r3
    d370:	0018      	movs	r0, r3
    d372:	4b0f      	ldr	r3, [pc, #60]	; (d3b0 <configure_adc+0x4c>)
    d374:	4798      	blx	r3
	config_adc.positive_input = pin;
    d376:	687b      	ldr	r3, [r7, #4]
    d378:	b2da      	uxtb	r2, r3
    d37a:	2308      	movs	r3, #8
    d37c:	18fb      	adds	r3, r7, r3
    d37e:	731a      	strb	r2, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    d380:	2308      	movs	r3, #8
    d382:	18fb      	adds	r3, r7, r3
    d384:	2201      	movs	r2, #1
    d386:	705a      	strb	r2, [r3, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    d388:	2308      	movs	r3, #8
    d38a:	18fb      	adds	r3, r7, r3
    d38c:	2280      	movs	r2, #128	; 0x80
    d38e:	0092      	lsls	r2, r2, #2
    d390:	805a      	strh	r2, [r3, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    d392:	2308      	movs	r3, #8
    d394:	18fa      	adds	r2, r7, r3
    d396:	4907      	ldr	r1, [pc, #28]	; (d3b4 <configure_adc+0x50>)
    d398:	4b07      	ldr	r3, [pc, #28]	; (d3b8 <configure_adc+0x54>)
    d39a:	0018      	movs	r0, r3
    d39c:	4b07      	ldr	r3, [pc, #28]	; (d3bc <configure_adc+0x58>)
    d39e:	4798      	blx	r3
	adc_enable(&adc_instance);
    d3a0:	4b05      	ldr	r3, [pc, #20]	; (d3b8 <configure_adc+0x54>)
    d3a2:	0018      	movs	r0, r3
    d3a4:	4b06      	ldr	r3, [pc, #24]	; (d3c0 <configure_adc+0x5c>)
    d3a6:	4798      	blx	r3
}
    d3a8:	46c0      	nop			; (mov r8, r8)
    d3aa:	46bd      	mov	sp, r7
    d3ac:	b00e      	add	sp, #56	; 0x38
    d3ae:	bd80      	pop	{r7, pc}
    d3b0:	000089ed 	.word	0x000089ed
    d3b4:	42004000 	.word	0x42004000
    d3b8:	200006f8 	.word	0x200006f8
    d3bc:	0000903d 	.word	0x0000903d
    d3c0:	0000cb21 	.word	0x0000cb21

0000d3c4 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    d3c4:	b580      	push	{r7, lr}
    d3c6:	b084      	sub	sp, #16
    d3c8:	af00      	add	r7, sp, #0
    d3ca:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    d3cc:	230c      	movs	r3, #12
    d3ce:	18fb      	adds	r3, r7, r3
    d3d0:	0018      	movs	r0, r3
    d3d2:	4b09      	ldr	r3, [pc, #36]	; (d3f8 <configure_port_pins_set+0x34>)
    d3d4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    d3d6:	230c      	movs	r3, #12
    d3d8:	18fb      	adds	r3, r7, r3
    d3da:	2201      	movs	r2, #1
    d3dc:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(pin, &config_port_pin);
    d3de:	687b      	ldr	r3, [r7, #4]
    d3e0:	b2db      	uxtb	r3, r3
    d3e2:	220c      	movs	r2, #12
    d3e4:	18ba      	adds	r2, r7, r2
    d3e6:	0011      	movs	r1, r2
    d3e8:	0018      	movs	r0, r3
    d3ea:	4b04      	ldr	r3, [pc, #16]	; (d3fc <configure_port_pins_set+0x38>)
    d3ec:	4798      	blx	r3
}
    d3ee:	46c0      	nop			; (mov r8, r8)
    d3f0:	46bd      	mov	sp, r7
    d3f2:	b004      	add	sp, #16
    d3f4:	bd80      	pop	{r7, pc}
    d3f6:	46c0      	nop			; (mov r8, r8)
    d3f8:	0000cdc9 	.word	0x0000cdc9
    d3fc:	0000b84d 	.word	0x0000b84d

0000d400 <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
    d400:	b580      	push	{r7, lr}
    d402:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
    d404:	2015      	movs	r0, #21
    d406:	4b04      	ldr	r3, [pc, #16]	; (d418 <led1_on+0x18>)
    d408:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, true);	
    d40a:	2101      	movs	r1, #1
    d40c:	2015      	movs	r0, #21
    d40e:	4b03      	ldr	r3, [pc, #12]	; (d41c <led1_on+0x1c>)
    d410:	4798      	blx	r3
}
    d412:	46c0      	nop			; (mov r8, r8)
    d414:	46bd      	mov	sp, r7
    d416:	bd80      	pop	{r7, pc}
    d418:	0000d3c5 	.word	0x0000d3c5
    d41c:	0000cded 	.word	0x0000cded

0000d420 <led1_off>:

void led1_off(void)
{
    d420:	b580      	push	{r7, lr}
    d422:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
    d424:	2015      	movs	r0, #21
    d426:	4b04      	ldr	r3, [pc, #16]	; (d438 <led1_off+0x18>)
    d428:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, false);
    d42a:	2100      	movs	r1, #0
    d42c:	2015      	movs	r0, #21
    d42e:	4b03      	ldr	r3, [pc, #12]	; (d43c <led1_off+0x1c>)
    d430:	4798      	blx	r3
}
    d432:	46c0      	nop			; (mov r8, r8)
    d434:	46bd      	mov	sp, r7
    d436:	bd80      	pop	{r7, pc}
    d438:	0000d3c5 	.word	0x0000d3c5
    d43c:	0000cded 	.word	0x0000cded

0000d440 <boost_enable>:
	configure_port_pins_set(PIN_PA03);
	port_pin_set_output_level(PIN_PA03, false);
}

void boost_enable(void)
{
    d440:	b580      	push	{r7, lr}
    d442:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA20);
    d444:	2014      	movs	r0, #20
    d446:	4b04      	ldr	r3, [pc, #16]	; (d458 <boost_enable+0x18>)
    d448:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20, true);
    d44a:	2101      	movs	r1, #1
    d44c:	2014      	movs	r0, #20
    d44e:	4b03      	ldr	r3, [pc, #12]	; (d45c <boost_enable+0x1c>)
    d450:	4798      	blx	r3
}
    d452:	46c0      	nop			; (mov r8, r8)
    d454:	46bd      	mov	sp, r7
    d456:	bd80      	pop	{r7, pc}
    d458:	0000d3c5 	.word	0x0000d3c5
    d45c:	0000cded 	.word	0x0000cded

0000d460 <boost_disable>:

void boost_disable(void)
{
    d460:	b580      	push	{r7, lr}
    d462:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA20);
    d464:	2014      	movs	r0, #20
    d466:	4b04      	ldr	r3, [pc, #16]	; (d478 <boost_disable+0x18>)
    d468:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20, false);
    d46a:	2100      	movs	r1, #0
    d46c:	2014      	movs	r0, #20
    d46e:	4b03      	ldr	r3, [pc, #12]	; (d47c <boost_disable+0x1c>)
    d470:	4798      	blx	r3
}
    d472:	46c0      	nop			; (mov r8, r8)
    d474:	46bd      	mov	sp, r7
    d476:	bd80      	pop	{r7, pc}
    d478:	0000d3c5 	.word	0x0000d3c5
    d47c:	0000cded 	.word	0x0000cded

0000d480 <relay1_enable>:

void relay1_enable(void)
{
    d480:	b580      	push	{r7, lr}
    d482:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
    d484:	2022      	movs	r0, #34	; 0x22
    d486:	4b04      	ldr	r3, [pc, #16]	; (d498 <relay1_enable+0x18>)
    d488:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, true);
    d48a:	2101      	movs	r1, #1
    d48c:	2022      	movs	r0, #34	; 0x22
    d48e:	4b03      	ldr	r3, [pc, #12]	; (d49c <relay1_enable+0x1c>)
    d490:	4798      	blx	r3
}
    d492:	46c0      	nop			; (mov r8, r8)
    d494:	46bd      	mov	sp, r7
    d496:	bd80      	pop	{r7, pc}
    d498:	0000d3c5 	.word	0x0000d3c5
    d49c:	0000cded 	.word	0x0000cded

0000d4a0 <relay1_disable>:

void relay1_disable(void)
{
    d4a0:	b580      	push	{r7, lr}
    d4a2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
    d4a4:	2022      	movs	r0, #34	; 0x22
    d4a6:	4b04      	ldr	r3, [pc, #16]	; (d4b8 <relay1_disable+0x18>)
    d4a8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, false);
    d4aa:	2100      	movs	r1, #0
    d4ac:	2022      	movs	r0, #34	; 0x22
    d4ae:	4b03      	ldr	r3, [pc, #12]	; (d4bc <relay1_disable+0x1c>)
    d4b0:	4798      	blx	r3
}
    d4b2:	46c0      	nop			; (mov r8, r8)
    d4b4:	46bd      	mov	sp, r7
    d4b6:	bd80      	pop	{r7, pc}
    d4b8:	0000d3c5 	.word	0x0000d3c5
    d4bc:	0000cded 	.word	0x0000cded

0000d4c0 <gpio5_enable>:
	configure_port_pins_set(PIN_PB03);
	port_pin_set_output_level(PIN_PB03, false);
}

void gpio5_enable(void)
{
    d4c0:	b580      	push	{r7, lr}
    d4c2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
    d4c4:	2037      	movs	r0, #55	; 0x37
    d4c6:	4b04      	ldr	r3, [pc, #16]	; (d4d8 <gpio5_enable+0x18>)
    d4c8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, true);
    d4ca:	2101      	movs	r1, #1
    d4cc:	2037      	movs	r0, #55	; 0x37
    d4ce:	4b03      	ldr	r3, [pc, #12]	; (d4dc <gpio5_enable+0x1c>)
    d4d0:	4798      	blx	r3
}
    d4d2:	46c0      	nop			; (mov r8, r8)
    d4d4:	46bd      	mov	sp, r7
    d4d6:	bd80      	pop	{r7, pc}
    d4d8:	0000d3c5 	.word	0x0000d3c5
    d4dc:	0000cded 	.word	0x0000cded

0000d4e0 <gpio5_disable>:

void gpio5_disable(void)
{
    d4e0:	b580      	push	{r7, lr}
    d4e2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
    d4e4:	2037      	movs	r0, #55	; 0x37
    d4e6:	4b04      	ldr	r3, [pc, #16]	; (d4f8 <gpio5_disable+0x18>)
    d4e8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, false);
    d4ea:	2100      	movs	r1, #0
    d4ec:	2037      	movs	r0, #55	; 0x37
    d4ee:	4b03      	ldr	r3, [pc, #12]	; (d4fc <gpio5_disable+0x1c>)
    d4f0:	4798      	blx	r3
}
    d4f2:	46c0      	nop			; (mov r8, r8)
    d4f4:	46bd      	mov	sp, r7
    d4f6:	bd80      	pop	{r7, pc}
    d4f8:	0000d3c5 	.word	0x0000d3c5
    d4fc:	0000cded 	.word	0x0000cded

0000d500 <run_pump>:

	tcc_init(&tcc_instance_pwm, CONF_PWM_MODULE, &config_tcc);
	tcc_enable(&tcc_instance_pwm);
}

void run_pump(int duration) {
    d500:	b580      	push	{r7, lr}
    d502:	b082      	sub	sp, #8
    d504:	af00      	add	r7, sp, #0
    d506:	6078      	str	r0, [r7, #4]
	
	boost_enable();
    d508:	4b0b      	ldr	r3, [pc, #44]	; (d538 <run_pump+0x38>)
    d50a:	4798      	blx	r3
	gpio5_enable();
    d50c:	4b0b      	ldr	r3, [pc, #44]	; (d53c <run_pump+0x3c>)
    d50e:	4798      	blx	r3
// 		{
// 			ramp_tcc_pwm(0xFFFF*i);
// 			delay_ms(2000);
// 		}
		
	delay_ms(duration); //duration of pump
    d510:	687b      	ldr	r3, [r7, #4]
    d512:	2b00      	cmp	r3, #0
    d514:	d004      	beq.n	d520 <run_pump+0x20>
    d516:	687b      	ldr	r3, [r7, #4]
    d518:	0018      	movs	r0, r3
    d51a:	4b09      	ldr	r3, [pc, #36]	; (d540 <run_pump+0x40>)
    d51c:	4798      	blx	r3
    d51e:	e002      	b.n	d526 <run_pump+0x26>
    d520:	2001      	movs	r0, #1
    d522:	4b08      	ldr	r3, [pc, #32]	; (d544 <run_pump+0x44>)
    d524:	4798      	blx	r3
	
	//tcc_disable(&tcc_instance_pwm);
	gpio5_disable();
    d526:	4b08      	ldr	r3, [pc, #32]	; (d548 <run_pump+0x48>)
    d528:	4798      	blx	r3
	boost_disable();
    d52a:	4b08      	ldr	r3, [pc, #32]	; (d54c <run_pump+0x4c>)
    d52c:	4798      	blx	r3
	
    d52e:	46c0      	nop			; (mov r8, r8)
    d530:	46bd      	mov	sp, r7
    d532:	b002      	add	sp, #8
    d534:	bd80      	pop	{r7, pc}
    d536:	46c0      	nop			; (mov r8, r8)
    d538:	0000d441 	.word	0x0000d441
    d53c:	0000d4c1 	.word	0x0000d4c1
    d540:	000088b9 	.word	0x000088b9
    d544:	00008889 	.word	0x00008889
    d548:	0000d4e1 	.word	0x0000d4e1
    d54c:	0000d461 	.word	0x0000d461

0000d550 <system_interrupt_enable_global>:
{
    d550:	b580      	push	{r7, lr}
    d552:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    d554:	4b04      	ldr	r3, [pc, #16]	; (d568 <system_interrupt_enable_global+0x18>)
    d556:	2201      	movs	r2, #1
    d558:	701a      	strb	r2, [r3, #0]
    d55a:	f3bf 8f5f 	dmb	sy
    d55e:	b662      	cpsie	i
}
    d560:	46c0      	nop			; (mov r8, r8)
    d562:	46bd      	mov	sp, r7
    d564:	bd80      	pop	{r7, pc}
    d566:	46c0      	nop			; (mov r8, r8)
    d568:	20000070 	.word	0x20000070

0000d56c <main>:
	}
}


int main(void)
{
    d56c:	b590      	push	{r4, r7, lr}
    d56e:	b0a9      	sub	sp, #164	; 0xa4
    d570:	af02      	add	r7, sp, #8
	uint32_t MQTTCounter = 0;
    d572:	2300      	movs	r3, #0
    d574:	2294      	movs	r2, #148	; 0x94
    d576:	18ba      	adds	r2, r7, r2
    d578:	6013      	str	r3, [r2, #0]
	
	int wifi_result = SUCCESS;
    d57a:	2300      	movs	r3, #0
    d57c:	228c      	movs	r2, #140	; 0x8c
    d57e:	18ba      	adds	r2, r7, r2
    d580:	6013      	str	r3, [r2, #0]
	    
	uint8_t mqtt_send_buffer[MAIN_MQTT_BUFFER_SIZE];


	system_init();
    d582:	4b60      	ldr	r3, [pc, #384]	; (d704 <main+0x198>)
    d584:	4798      	blx	r3
	system_interrupt_enable_global();
    d586:	4b60      	ldr	r3, [pc, #384]	; (d708 <main+0x19c>)
    d588:	4798      	blx	r3
	delay_init();
    d58a:	4b60      	ldr	r3, [pc, #384]	; (d70c <main+0x1a0>)
    d58c:	4798      	blx	r3
	configure_usart();
    d58e:	4b60      	ldr	r3, [pc, #384]	; (d710 <main+0x1a4>)
    d590:	4798      	blx	r3
	
	wifi_result = wifi_init();
    d592:	4b60      	ldr	r3, [pc, #384]	; (d714 <main+0x1a8>)
    d594:	4798      	blx	r3
    d596:	0003      	movs	r3, r0
    d598:	228c      	movs	r2, #140	; 0x8c
    d59a:	18ba      	adds	r2, r7, r2
    d59c:	6013      	str	r3, [r2, #0]
	
	if (SUCCESS != wifi_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
    d59e:	238c      	movs	r3, #140	; 0x8c
    d5a0:	18fb      	adds	r3, r7, r3
    d5a2:	681b      	ldr	r3, [r3, #0]
    d5a4:	2b00      	cmp	r3, #0
    d5a6:	d003      	beq.n	d5b0 <main+0x44>
    d5a8:	4b5b      	ldr	r3, [pc, #364]	; (d718 <main+0x1ac>)
    d5aa:	0018      	movs	r0, r3
    d5ac:	4b5b      	ldr	r3, [pc, #364]	; (d71c <main+0x1b0>)
    d5ae:	4798      	blx	r3
	
	printf("Board initialized.\r\n");
    d5b0:	4b5b      	ldr	r3, [pc, #364]	; (d720 <main+0x1b4>)
    d5b2:	0018      	movs	r0, r3
    d5b4:	4b59      	ldr	r3, [pc, #356]	; (d71c <main+0x1b0>)
    d5b6:	4798      	blx	r3

	

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    d5b8:	4a5a      	ldr	r2, [pc, #360]	; (d724 <main+0x1b8>)
    d5ba:	485b      	ldr	r0, [pc, #364]	; (d728 <main+0x1bc>)
    d5bc:	23ff      	movs	r3, #255	; 0xff
    d5be:	9300      	str	r3, [sp, #0]
    d5c0:	0013      	movs	r3, r2
    d5c2:	2202      	movs	r2, #2
    d5c4:	2112      	movs	r1, #18
    d5c6:	4c59      	ldr	r4, [pc, #356]	; (d72c <main+0x1c0>)
    d5c8:	47a0      	blx	r4
	MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	
	configure_adc(MOISTURE_ANA_PIN); //configure moisture sensor analog
    d5ca:	2000      	movs	r0, #0
    d5cc:	4b58      	ldr	r3, [pc, #352]	; (d730 <main+0x1c4>)
    d5ce:	4798      	blx	r3
	configure_i2c_temp(); //config i2c
    d5d0:	4b58      	ldr	r3, [pc, #352]	; (d734 <main+0x1c8>)
    d5d2:	4798      	blx	r3
	configure_i2c_lux();
    d5d4:	4b58      	ldr	r3, [pc, #352]	; (d738 <main+0x1cc>)
    d5d6:	4798      	blx	r3
	configure_i2c_callbacks_hdc();
    d5d8:	4b58      	ldr	r3, [pc, #352]	; (d73c <main+0x1d0>)
    d5da:	4798      	blx	r3
	configure_i2c_callbacks_tsl();
    d5dc:	4b58      	ldr	r3, [pc, #352]	; (d740 <main+0x1d4>)
    d5de:	4798      	blx	r3

	
	for (int i = 0; i < MAX_ARGS; i++)
    d5e0:	2300      	movs	r3, #0
    d5e2:	2290      	movs	r2, #144	; 0x90
    d5e4:	18ba      	adds	r2, r7, r2
    d5e6:	6013      	str	r3, [r2, #0]
    d5e8:	e011      	b.n	d60e <main+0xa2>
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    d5ea:	2019      	movs	r0, #25
    d5ec:	4b55      	ldr	r3, [pc, #340]	; (d744 <main+0x1d8>)
    d5ee:	4798      	blx	r3
    d5f0:	0003      	movs	r3, r0
    d5f2:	0019      	movs	r1, r3
    d5f4:	4b54      	ldr	r3, [pc, #336]	; (d748 <main+0x1dc>)
    d5f6:	2290      	movs	r2, #144	; 0x90
    d5f8:	18ba      	adds	r2, r7, r2
    d5fa:	6812      	ldr	r2, [r2, #0]
    d5fc:	0092      	lsls	r2, r2, #2
    d5fe:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < MAX_ARGS; i++)
    d600:	2390      	movs	r3, #144	; 0x90
    d602:	18fb      	adds	r3, r7, r3
    d604:	681b      	ldr	r3, [r3, #0]
    d606:	3301      	adds	r3, #1
    d608:	2290      	movs	r2, #144	; 0x90
    d60a:	18ba      	adds	r2, r7, r2
    d60c:	6013      	str	r3, [r2, #0]
    d60e:	2390      	movs	r3, #144	; 0x90
    d610:	18fb      	adds	r3, r7, r3
    d612:	681b      	ldr	r3, [r3, #0]
    d614:	2b03      	cmp	r3, #3
    d616:	dde8      	ble.n	d5ea <main+0x7e>

	//TODO: print version information
	printf("Welcome to the Evergreen CLI.\r\n");
    d618:	4b4c      	ldr	r3, [pc, #304]	; (d74c <main+0x1e0>)
    d61a:	0018      	movs	r0, r3
    d61c:	4b3f      	ldr	r3, [pc, #252]	; (d71c <main+0x1b0>)
    d61e:	4798      	blx	r3
	printf("> ");
    d620:	4b4b      	ldr	r3, [pc, #300]	; (d750 <main+0x1e4>)
    d622:	0018      	movs	r0, r3
    d624:	4b4b      	ldr	r3, [pc, #300]	; (d754 <main+0x1e8>)
    d626:	4798      	blx	r3
	while (1) {
	
	    /* Handle pending events from network controller. */
	    m2m_wifi_handle_events(NULL);
    d628:	2000      	movs	r0, #0
    d62a:	4b4b      	ldr	r3, [pc, #300]	; (d758 <main+0x1ec>)
    d62c:	4798      	blx	r3
	    /* Checks the timer timeout. */
	    sw_timer_task(&swt_module_inst);
    d62e:	4b4b      	ldr	r3, [pc, #300]	; (d75c <main+0x1f0>)
    d630:	0018      	movs	r0, r3
    d632:	4b4b      	ldr	r3, [pc, #300]	; (d760 <main+0x1f4>)
    d634:	4798      	blx	r3
// 		{
// // 			FetchFirmwareFromServer();
// 			RcvDownloadFwCmdByMQTT = 0;
		//} TODO? IMPLEMENT FIRMWARE OVER MQTT
		
		if (MQTTCounter >= 20000)
    d636:	2394      	movs	r3, #148	; 0x94
    d638:	18fb      	adds	r3, r7, r3
    d63a:	681b      	ldr	r3, [r3, #0]
    d63c:	4a49      	ldr	r2, [pc, #292]	; (d764 <main+0x1f8>)
    d63e:	4293      	cmp	r3, r2
    d640:	d958      	bls.n	d6f4 <main+0x188>
		{
			delay_ms(1000);
    d642:	23fa      	movs	r3, #250	; 0xfa
    d644:	009b      	lsls	r3, r3, #2
    d646:	0018      	movs	r0, r3
    d648:	4b47      	ldr	r3, [pc, #284]	; (d768 <main+0x1fc>)
    d64a:	4798      	blx	r3
			MQTTCounter = 0; //reset sensor counter
    d64c:	2300      	movs	r3, #0
    d64e:	2294      	movs	r2, #148	; 0x94
    d650:	18ba      	adds	r2, r7, r2
    d652:	6013      	str	r3, [r2, #0]

			printf("Sending sensor values to Cloud.\r\n");
    d654:	4b45      	ldr	r3, [pc, #276]	; (d76c <main+0x200>)
    d656:	0018      	movs	r0, r3
    d658:	4b30      	ldr	r3, [pc, #192]	; (d71c <main+0x1b0>)
    d65a:	4798      	blx	r3
// 			mqtt_publish(&mqtt_inst, HUMIDITY_TOPIC, mqtt_send_buffer, sizeof(humidity), 1, 0);
			
			
			//lux
			
			tsl2561_init();
    d65c:	4b44      	ldr	r3, [pc, #272]	; (d770 <main+0x204>)
    d65e:	4798      	blx	r3
			uint32_t lux_value = getLuminosity();			
    d660:	4b44      	ldr	r3, [pc, #272]	; (d774 <main+0x208>)
    d662:	4798      	blx	r3
    d664:	0003      	movs	r3, r0
    d666:	2288      	movs	r2, #136	; 0x88
    d668:	18ba      	adds	r2, r7, r2
    d66a:	6013      	str	r3, [r2, #0]
			
			printf("Lux: %d\r\n", lux_value);
    d66c:	2388      	movs	r3, #136	; 0x88
    d66e:	18fb      	adds	r3, r7, r3
    d670:	681a      	ldr	r2, [r3, #0]
    d672:	4b41      	ldr	r3, [pc, #260]	; (d778 <main+0x20c>)
    d674:	0011      	movs	r1, r2
    d676:	0018      	movs	r0, r3
    d678:	4b36      	ldr	r3, [pc, #216]	; (d754 <main+0x1e8>)
    d67a:	4798      	blx	r3
			
			sprintf(mqtt_send_buffer, "%d", lux_value);
    d67c:	2388      	movs	r3, #136	; 0x88
    d67e:	18fb      	adds	r3, r7, r3
    d680:	681a      	ldr	r2, [r3, #0]
    d682:	493e      	ldr	r1, [pc, #248]	; (d77c <main+0x210>)
    d684:	1d3b      	adds	r3, r7, #4
    d686:	0018      	movs	r0, r3
    d688:	4b3d      	ldr	r3, [pc, #244]	; (d780 <main+0x214>)
    d68a:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, LUX_TOPIC, mqtt_send_buffer, sizeof(lux_value), 1, 0);
    d68c:	1d3a      	adds	r2, r7, #4
    d68e:	493d      	ldr	r1, [pc, #244]	; (d784 <main+0x218>)
    d690:	483d      	ldr	r0, [pc, #244]	; (d788 <main+0x21c>)
    d692:	2300      	movs	r3, #0
    d694:	9301      	str	r3, [sp, #4]
    d696:	2301      	movs	r3, #1
    d698:	9300      	str	r3, [sp, #0]
    d69a:	2304      	movs	r3, #4
    d69c:	4c3b      	ldr	r4, [pc, #236]	; (d78c <main+0x220>)
    d69e:	47a0      	blx	r4
				
			
			//moisture
			float m_value = get_moisture();		
    d6a0:	4b3b      	ldr	r3, [pc, #236]	; (d790 <main+0x224>)
    d6a2:	4798      	blx	r3
    d6a4:	1c03      	adds	r3, r0, #0
    d6a6:	2284      	movs	r2, #132	; 0x84
    d6a8:	18ba      	adds	r2, r7, r2
    d6aa:	6013      	str	r3, [r2, #0]
			
			printf("Moisture: %.02f\r\n", m_value);	
    d6ac:	4b39      	ldr	r3, [pc, #228]	; (d794 <main+0x228>)
    d6ae:	2284      	movs	r2, #132	; 0x84
    d6b0:	18ba      	adds	r2, r7, r2
    d6b2:	6810      	ldr	r0, [r2, #0]
    d6b4:	4798      	blx	r3
    d6b6:	0003      	movs	r3, r0
    d6b8:	000c      	movs	r4, r1
    d6ba:	4937      	ldr	r1, [pc, #220]	; (d798 <main+0x22c>)
    d6bc:	001a      	movs	r2, r3
    d6be:	0023      	movs	r3, r4
    d6c0:	0008      	movs	r0, r1
    d6c2:	4924      	ldr	r1, [pc, #144]	; (d754 <main+0x1e8>)
    d6c4:	4788      	blx	r1
			
			sprintf(mqtt_send_buffer, "%.02f", m_value);
    d6c6:	4b33      	ldr	r3, [pc, #204]	; (d794 <main+0x228>)
    d6c8:	2284      	movs	r2, #132	; 0x84
    d6ca:	18ba      	adds	r2, r7, r2
    d6cc:	6810      	ldr	r0, [r2, #0]
    d6ce:	4798      	blx	r3
    d6d0:	0003      	movs	r3, r0
    d6d2:	000c      	movs	r4, r1
    d6d4:	4931      	ldr	r1, [pc, #196]	; (d79c <main+0x230>)
    d6d6:	1d38      	adds	r0, r7, #4
    d6d8:	001a      	movs	r2, r3
    d6da:	0023      	movs	r3, r4
    d6dc:	4c28      	ldr	r4, [pc, #160]	; (d780 <main+0x214>)
    d6de:	47a0      	blx	r4
			mqtt_publish(&mqtt_inst, MOISTURE_TOPIC, mqtt_send_buffer, sizeof(m_value), 1, 0);
    d6e0:	1d3a      	adds	r2, r7, #4
    d6e2:	492f      	ldr	r1, [pc, #188]	; (d7a0 <main+0x234>)
    d6e4:	4828      	ldr	r0, [pc, #160]	; (d788 <main+0x21c>)
    d6e6:	2300      	movs	r3, #0
    d6e8:	9301      	str	r3, [sp, #4]
    d6ea:	2301      	movs	r3, #1
    d6ec:	9300      	str	r3, [sp, #0]
    d6ee:	2304      	movs	r3, #4
    d6f0:	4c26      	ldr	r4, [pc, #152]	; (d78c <main+0x220>)
    d6f2:	47a0      	blx	r4
// 				argc = 0;
// 				printf("> ");
// 			}
// 		}
		//printf("%ul\r\n", MQTTCounter);
		++MQTTCounter;
    d6f4:	2394      	movs	r3, #148	; 0x94
    d6f6:	18fb      	adds	r3, r7, r3
    d6f8:	681b      	ldr	r3, [r3, #0]
    d6fa:	3301      	adds	r3, #1
    d6fc:	2294      	movs	r2, #148	; 0x94
    d6fe:	18ba      	adds	r2, r7, r2
    d700:	6013      	str	r3, [r2, #0]
	    m2m_wifi_handle_events(NULL);
    d702:	e791      	b.n	d628 <main+0xbc>
    d704:	0000c829 	.word	0x0000c829
    d708:	0000d551 	.word	0x0000d551
    d70c:	00008831 	.word	0x00008831
    d710:	0000d2f1 	.word	0x0000d2f1
    d714:	0000833d 	.word	0x0000833d
    d718:	00014fb8 	.word	0x00014fb8
    d71c:	0000f1c9 	.word	0x0000f1c9
    d720:	00014fdc 	.word	0x00014fdc
    d724:	00014ff0 	.word	0x00014ff0
    d728:	00015000 	.word	0x00015000
    d72c:	00001f5d 	.word	0x00001f5d
    d730:	0000d365 	.word	0x0000d365
    d734:	0000d171 	.word	0x0000d171
    d738:	0000d1d9 	.word	0x0000d1d9
    d73c:	0000d291 	.word	0x0000d291
    d740:	0000d2c1 	.word	0x0000d2c1
    d744:	0000e5fd 	.word	0x0000e5fd
    d748:	2000077c 	.word	0x2000077c
    d74c:	00015014 	.word	0x00015014
    d750:	00015034 	.word	0x00015034
    d754:	0000f0ad 	.word	0x0000f0ad
    d758:	00001f41 	.word	0x00001f41
    d75c:	20000700 	.word	0x20000700
    d760:	00007cdd 	.word	0x00007cdd
    d764:	00004e1f 	.word	0x00004e1f
    d768:	000088b9 	.word	0x000088b9
    d76c:	00015038 	.word	0x00015038
    d770:	0000862d 	.word	0x0000862d
    d774:	000087bd 	.word	0x000087bd
    d778:	0001505c 	.word	0x0001505c
    d77c:	00015068 	.word	0x00015068
    d780:	0000f36d 	.word	0x0000f36d
    d784:	0001506c 	.word	0x0001506c
    d788:	200003d4 	.word	0x200003d4
    d78c:	0000dd2d 	.word	0x0000dd2d
    d790:	0000d0d5 	.word	0x0000d0d5
    d794:	000138bd 	.word	0x000138bd
    d798:	00015074 	.word	0x00015074
    d79c:	00015088 	.word	0x00015088
    d7a0:	00015090 	.word	0x00015090

0000d7a4 <_hwerr_to_stderr>:
    d7a4:	1c03      	adds	r3, r0, #0
    d7a6:	300e      	adds	r0, #14
    d7a8:	b500      	push	{lr}
    d7aa:	280e      	cmp	r0, #14
    d7ac:	d819      	bhi.n	d7e2 <_hwerr_to_stderr+0x3e>
    d7ae:	f003 fe3d 	bl	1142c <__gnu_thumb1_case_uqi>
    d7b2:	1416      	.short	0x1416
    d7b4:	1b181012 	.word	0x1b181012
    d7b8:	180c0e18 	.word	0x180c0e18
    d7bc:	1d0a0e0e 	.word	0x1d0a0e0e
    d7c0:	08          	.byte	0x08
    d7c1:	00          	.byte	0x00
    d7c2:	2000      	movs	r0, #0
    d7c4:	e014      	b.n	d7f0 <_hwerr_to_stderr+0x4c>
    d7c6:	2070      	movs	r0, #112	; 0x70
    d7c8:	e011      	b.n	d7ee <_hwerr_to_stderr+0x4a>
    d7ca:	2016      	movs	r0, #22
    d7cc:	e00f      	b.n	d7ee <_hwerr_to_stderr+0x4a>
    d7ce:	200c      	movs	r0, #12
    d7d0:	e00d      	b.n	d7ee <_hwerr_to_stderr+0x4a>
    d7d2:	2079      	movs	r0, #121	; 0x79
    d7d4:	e00b      	b.n	d7ee <_hwerr_to_stderr+0x4a>
    d7d6:	2068      	movs	r0, #104	; 0x68
    d7d8:	e009      	b.n	d7ee <_hwerr_to_stderr+0x4a>
    d7da:	200b      	movs	r0, #11
    d7dc:	e007      	b.n	d7ee <_hwerr_to_stderr+0x4a>
    d7de:	2010      	movs	r0, #16
    d7e0:	e005      	b.n	d7ee <_hwerr_to_stderr+0x4a>
    d7e2:	2000      	movs	r0, #0
    d7e4:	4283      	cmp	r3, r0
    d7e6:	da03      	bge.n	d7f0 <_hwerr_to_stderr+0x4c>
    d7e8:	2005      	movs	r0, #5
    d7ea:	e000      	b.n	d7ee <_hwerr_to_stderr+0x4a>
    d7ec:	2002      	movs	r0, #2
    d7ee:	4240      	negs	r0, r0
    d7f0:	bd00      	pop	{pc}
	...

0000d7f4 <_mqtt_send_wait>:
    d7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d7f6:	1c04      	adds	r4, r0, #0
    d7f8:	3443      	adds	r4, #67	; 0x43
    d7fa:	7823      	ldrb	r3, [r4, #0]
    d7fc:	1c05      	adds	r5, r0, #0
    d7fe:	07d8      	lsls	r0, r3, #31
    d800:	d51c      	bpl.n	d83c <_mqtt_send_wait+0x48>
    d802:	2604      	movs	r6, #4
    d804:	4333      	orrs	r3, r6
    d806:	7023      	strb	r3, [r4, #0]
    d808:	2002      	movs	r0, #2
    d80a:	5628      	ldrsb	r0, [r5, r0]
    d80c:	b292      	uxth	r2, r2
    d80e:	2300      	movs	r3, #0
    d810:	4f0c      	ldr	r7, [pc, #48]	; (d844 <_mqtt_send_wait+0x50>)
    d812:	47b8      	blx	r7
    d814:	2800      	cmp	r0, #0
    d816:	da05      	bge.n	d824 <_mqtt_send_wait+0x30>
    d818:	7823      	ldrb	r3, [r4, #0]
    d81a:	43b3      	bics	r3, r6
    d81c:	7023      	strb	r3, [r4, #0]
    d81e:	4b0a      	ldr	r3, [pc, #40]	; (d848 <_mqtt_send_wait+0x54>)
    d820:	4798      	blx	r3
    d822:	e00d      	b.n	d840 <_mqtt_send_wait+0x4c>
    d824:	7822      	ldrb	r2, [r4, #0]
    d826:	2314      	movs	r3, #20
    d828:	4013      	ands	r3, r2
    d82a:	2000      	movs	r0, #0
    d82c:	2b04      	cmp	r3, #4
    d82e:	d107      	bne.n	d840 <_mqtt_send_wait+0x4c>
    d830:	4b06      	ldr	r3, [pc, #24]	; (d84c <_mqtt_send_wait+0x58>)
    d832:	4798      	blx	r3
    d834:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    d836:	4b06      	ldr	r3, [pc, #24]	; (d850 <_mqtt_send_wait+0x5c>)
    d838:	4798      	blx	r3
    d83a:	e7f3      	b.n	d824 <_mqtt_send_wait+0x30>
    d83c:	2001      	movs	r0, #1
    d83e:	4240      	negs	r0, r0
    d840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d842:	46c0      	nop			; (mov r8, r8)
    d844:	000052f5 	.word	0x000052f5
    d848:	0000d7a5 	.word	0x0000d7a5
    d84c:	00001f41 	.word	0x00001f41
    d850:	00007cdd 	.word	0x00007cdd

0000d854 <mqtt_get_config_defaults>:
    d854:	4b07      	ldr	r3, [pc, #28]	; (d874 <mqtt_get_config_defaults+0x20>)
    d856:	2240      	movs	r2, #64	; 0x40
    d858:	8003      	strh	r3, [r0, #0]
    d85a:	2396      	movs	r3, #150	; 0x96
    d85c:	009b      	lsls	r3, r3, #2
    d85e:	8103      	strh	r3, [r0, #8]
    d860:	6102      	str	r2, [r0, #16]
    d862:	2300      	movs	r3, #0
    d864:	2220      	movs	r2, #32
    d866:	7083      	strb	r3, [r0, #2]
    d868:	6043      	str	r3, [r0, #4]
    d86a:	60c3      	str	r3, [r0, #12]
    d86c:	6142      	str	r2, [r0, #20]
    d86e:	7603      	strb	r3, [r0, #24]
    d870:	4770      	bx	lr
    d872:	46c0      	nop			; (mov r8, r8)
    d874:	0000075b 	.word	0x0000075b

0000d878 <mqtt_init>:
    d878:	b538      	push	{r3, r4, r5, lr}
    d87a:	1c04      	adds	r4, r0, #0
    d87c:	1c0d      	adds	r5, r1, #0
    d87e:	2800      	cmp	r0, #0
    d880:	d030      	beq.n	d8e4 <mqtt_init+0x6c>
    d882:	2900      	cmp	r1, #0
    d884:	d02e      	beq.n	d8e4 <mqtt_init+0x6c>
    d886:	690b      	ldr	r3, [r1, #16]
    d888:	2b00      	cmp	r3, #0
    d88a:	d02b      	beq.n	d8e4 <mqtt_init+0x6c>
    d88c:	684b      	ldr	r3, [r1, #4]
    d88e:	2b00      	cmp	r3, #0
    d890:	d028      	beq.n	d8e4 <mqtt_init+0x6c>
    d892:	2100      	movs	r1, #0
    d894:	2274      	movs	r2, #116	; 0x74
    d896:	4b16      	ldr	r3, [pc, #88]	; (d8f0 <mqtt_init+0x78>)
    d898:	4798      	blx	r3
    d89a:	1c20      	adds	r0, r4, #0
    d89c:	4b15      	ldr	r3, [pc, #84]	; (d8f4 <mqtt_init+0x7c>)
    d89e:	3058      	adds	r0, #88	; 0x58
    d8a0:	1c29      	adds	r1, r5, #0
    d8a2:	221c      	movs	r2, #28
    d8a4:	4798      	blx	r3
    d8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d8a8:	2b00      	cmp	r3, #0
    d8aa:	d10b      	bne.n	d8c4 <mqtt_init+0x4c>
    d8ac:	6928      	ldr	r0, [r5, #16]
    d8ae:	4b12      	ldr	r3, [pc, #72]	; (d8f8 <mqtt_init+0x80>)
    d8b0:	4798      	blx	r3
    d8b2:	6660      	str	r0, [r4, #100]	; 0x64
    d8b4:	2800      	cmp	r0, #0
    d8b6:	d017      	beq.n	d8e8 <mqtt_init+0x70>
    d8b8:	1c23      	adds	r3, r4, #0
    d8ba:	3343      	adds	r3, #67	; 0x43
    d8bc:	781a      	ldrb	r2, [r3, #0]
    d8be:	2120      	movs	r1, #32
    d8c0:	430a      	orrs	r2, r1
    d8c2:	701a      	strb	r2, [r3, #0]
    d8c4:	892a      	ldrh	r2, [r5, #8]
    d8c6:	23fa      	movs	r3, #250	; 0xfa
    d8c8:	005b      	lsls	r3, r3, #1
    d8ca:	4353      	muls	r3, r2
    d8cc:	6868      	ldr	r0, [r5, #4]
    d8ce:	490b      	ldr	r1, [pc, #44]	; (d8fc <mqtt_init+0x84>)
    d8d0:	1c22      	adds	r2, r4, #0
    d8d2:	4d0b      	ldr	r5, [pc, #44]	; (d900 <mqtt_init+0x88>)
    d8d4:	47a8      	blx	r5
    d8d6:	1c03      	adds	r3, r0, #0
    d8d8:	6520      	str	r0, [r4, #80]	; 0x50
    d8da:	2000      	movs	r0, #0
    d8dc:	4283      	cmp	r3, r0
    d8de:	da05      	bge.n	d8ec <mqtt_init+0x74>
    d8e0:	201c      	movs	r0, #28
    d8e2:	e002      	b.n	d8ea <mqtt_init+0x72>
    d8e4:	2016      	movs	r0, #22
    d8e6:	e000      	b.n	d8ea <mqtt_init+0x72>
    d8e8:	200c      	movs	r0, #12
    d8ea:	4240      	negs	r0, r0
    d8ec:	bd38      	pop	{r3, r4, r5, pc}
    d8ee:	46c0      	nop			; (mov r8, r8)
    d8f0:	0000e66b 	.word	0x0000e66b
    d8f4:	0000e635 	.word	0x0000e635
    d8f8:	0000e5fd 	.word	0x0000e5fd
    d8fc:	0000e081 	.word	0x0000e081
    d900:	00007bd1 	.word	0x00007bd1

0000d904 <mqtt_register_callback>:
    d904:	2800      	cmp	r0, #0
    d906:	d002      	beq.n	d90e <mqtt_register_callback+0xa>
    d908:	6541      	str	r1, [r0, #84]	; 0x54
    d90a:	2000      	movs	r0, #0
    d90c:	e001      	b.n	d912 <mqtt_register_callback+0xe>
    d90e:	2016      	movs	r0, #22
    d910:	4240      	negs	r0, r0
    d912:	4770      	bx	lr

0000d914 <mqtt_socket_resolve_handler>:
    d914:	b5f0      	push	{r4, r5, r6, r7, lr}
    d916:	1c06      	adds	r6, r0, #0
    d918:	b085      	sub	sp, #20
    d91a:	1c0f      	adds	r7, r1, #0
    d91c:	2400      	movs	r4, #0
    d91e:	4b0f      	ldr	r3, [pc, #60]	; (d95c <mqtt_socket_resolve_handler+0x48>)
    d920:	58e5      	ldr	r5, [r4, r3]
    d922:	2d00      	cmp	r5, #0
    d924:	d015      	beq.n	d952 <mqtt_socket_resolve_handler+0x3e>
    d926:	1ce9      	adds	r1, r5, #3
    d928:	1c30      	adds	r0, r6, #0
    d92a:	4b0d      	ldr	r3, [pc, #52]	; (d960 <mqtt_socket_resolve_handler+0x4c>)
    d92c:	4798      	blx	r3
    d92e:	2800      	cmp	r0, #0
    d930:	d10f      	bne.n	d952 <mqtt_socket_resolve_handler+0x3e>
    d932:	466a      	mov	r2, sp
    d934:	2302      	movs	r3, #2
    d936:	8013      	strh	r3, [r2, #0]
    d938:	1c2b      	adds	r3, r5, #0
    d93a:	3358      	adds	r3, #88	; 0x58
    d93c:	881b      	ldrh	r3, [r3, #0]
    d93e:	9701      	str	r7, [sp, #4]
    d940:	ba5b      	rev16	r3, r3
    d942:	8053      	strh	r3, [r2, #2]
    d944:	2002      	movs	r0, #2
    d946:	5628      	ldrsb	r0, [r5, r0]
    d948:	4669      	mov	r1, sp
    d94a:	2210      	movs	r2, #16
    d94c:	4b05      	ldr	r3, [pc, #20]	; (d964 <mqtt_socket_resolve_handler+0x50>)
    d94e:	4798      	blx	r3
    d950:	e002      	b.n	d958 <mqtt_socket_resolve_handler+0x44>
    d952:	3404      	adds	r4, #4
    d954:	2c1c      	cmp	r4, #28
    d956:	d1e2      	bne.n	d91e <mqtt_socket_resolve_handler+0xa>
    d958:	b005      	add	sp, #20
    d95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d95c:	20000448 	.word	0x20000448
    d960:	0000f3b1 	.word	0x0000f3b1
    d964:	000051e1 	.word	0x000051e1

0000d968 <mqtt_connect>:
    d968:	b5f0      	push	{r4, r5, r6, r7, lr}
    d96a:	1c04      	adds	r4, r0, #0
    d96c:	b089      	sub	sp, #36	; 0x24
    d96e:	1c0d      	adds	r5, r1, #0
    d970:	2800      	cmp	r0, #0
    d972:	d051      	beq.n	da18 <mqtt_connect+0xb0>
    d974:	2900      	cmp	r1, #0
    d976:	d04f      	beq.n	da18 <mqtt_connect+0xb0>
    d978:	1c08      	adds	r0, r1, #0
    d97a:	4b39      	ldr	r3, [pc, #228]	; (da60 <mqtt_connect+0xf8>)
    d97c:	4798      	blx	r3
    d97e:	2840      	cmp	r0, #64	; 0x40
    d980:	d84c      	bhi.n	da1c <mqtt_connect+0xb4>
    d982:	1c21      	adds	r1, r4, #0
    d984:	3143      	adds	r1, #67	; 0x43
    d986:	780b      	ldrb	r3, [r1, #0]
    d988:	9101      	str	r1, [sp, #4]
    d98a:	07db      	lsls	r3, r3, #31
    d98c:	0fd9      	lsrs	r1, r3, #31
    d98e:	466a      	mov	r2, sp
    d990:	b2ce      	uxtb	r6, r1
    d992:	1ce0      	adds	r0, r4, #3
    d994:	7211      	strb	r1, [r2, #8]
    d996:	2e00      	cmp	r6, #0
    d998:	d142      	bne.n	da20 <mqtt_connect+0xb8>
    d99a:	2701      	movs	r7, #1
    d99c:	1c29      	adds	r1, r5, #0
    d99e:	4b31      	ldr	r3, [pc, #196]	; (da64 <mqtt_connect+0xfc>)
    d9a0:	8027      	strh	r7, [r4, #0]
    d9a2:	4798      	blx	r3
    d9a4:	9a01      	ldr	r2, [sp, #4]
    d9a6:	2002      	movs	r0, #2
    d9a8:	7813      	ldrb	r3, [r2, #0]
    d9aa:	9901      	ldr	r1, [sp, #4]
    d9ac:	43bb      	bics	r3, r7
    d9ae:	4383      	bics	r3, r0
    d9b0:	22e3      	movs	r2, #227	; 0xe3
    d9b2:	4013      	ands	r3, r2
    d9b4:	466a      	mov	r2, sp
    d9b6:	700b      	strb	r3, [r1, #0]
    d9b8:	7a12      	ldrb	r2, [r2, #8]
    d9ba:	1c23      	adds	r3, r4, #0
    d9bc:	3348      	adds	r3, #72	; 0x48
    d9be:	6466      	str	r6, [r4, #68]	; 0x44
    d9c0:	701a      	strb	r2, [r3, #0]
    d9c2:	7c9a      	ldrb	r2, [r3, #18]
    d9c4:	805e      	strh	r6, [r3, #2]
    d9c6:	1e53      	subs	r3, r2, #1
    d9c8:	419a      	sbcs	r2, r3
    d9ca:	b2d2      	uxtb	r2, r2
    d9cc:	1c39      	adds	r1, r7, #0
    d9ce:	4b26      	ldr	r3, [pc, #152]	; (da68 <mqtt_connect+0x100>)
    d9d0:	4798      	blx	r3
    d9d2:	70a0      	strb	r0, [r4, #2]
    d9d4:	2800      	cmp	r0, #0
    d9d6:	db25      	blt.n	da24 <mqtt_connect+0xbc>
    d9d8:	4b24      	ldr	r3, [pc, #144]	; (da6c <mqtt_connect+0x104>)
    d9da:	0080      	lsls	r0, r0, #2
    d9dc:	50c4      	str	r4, [r0, r3]
    d9de:	1c2b      	adds	r3, r5, #0
    d9e0:	781f      	ldrb	r7, [r3, #0]
    d9e2:	2f00      	cmp	r7, #0
    d9e4:	d026      	beq.n	da34 <mqtt_connect+0xcc>
    d9e6:	2220      	movs	r2, #32
    d9e8:	1c39      	adds	r1, r7, #0
    d9ea:	4391      	bics	r1, r2
    d9ec:	1c0a      	adds	r2, r1, #0
    d9ee:	3a41      	subs	r2, #65	; 0x41
    d9f0:	b2d2      	uxtb	r2, r2
    d9f2:	3301      	adds	r3, #1
    d9f4:	2a05      	cmp	r2, #5
    d9f6:	d90d      	bls.n	da14 <mqtt_connect+0xac>
    d9f8:	2f3a      	cmp	r7, #58	; 0x3a
    d9fa:	d00b      	beq.n	da14 <mqtt_connect+0xac>
    d9fc:	2f2f      	cmp	r7, #47	; 0x2f
    d9fe:	d009      	beq.n	da14 <mqtt_connect+0xac>
    da00:	2f2e      	cmp	r7, #46	; 0x2e
    da02:	d102      	bne.n	da0a <mqtt_connect+0xa2>
    da04:	2e00      	cmp	r6, #0
    da06:	d0eb      	beq.n	d9e0 <mqtt_connect+0x78>
    da08:	e00f      	b.n	da2a <mqtt_connect+0xc2>
    da0a:	2230      	movs	r2, #48	; 0x30
    da0c:	4017      	ands	r7, r2
    da0e:	4297      	cmp	r7, r2
    da10:	d0e6      	beq.n	d9e0 <mqtt_connect+0x78>
    da12:	e00a      	b.n	da2a <mqtt_connect+0xc2>
    da14:	2601      	movs	r6, #1
    da16:	e7e3      	b.n	d9e0 <mqtt_connect+0x78>
    da18:	2016      	movs	r0, #22
    da1a:	e004      	b.n	da26 <mqtt_connect+0xbe>
    da1c:	205b      	movs	r0, #91	; 0x5b
    da1e:	e002      	b.n	da26 <mqtt_connect+0xbe>
    da20:	2078      	movs	r0, #120	; 0x78
    da22:	e000      	b.n	da26 <mqtt_connect+0xbe>
    da24:	201c      	movs	r0, #28
    da26:	4240      	negs	r0, r0
    da28:	e017      	b.n	da5a <mqtt_connect+0xf2>
    da2a:	1c28      	adds	r0, r5, #0
    da2c:	4b10      	ldr	r3, [pc, #64]	; (da70 <mqtt_connect+0x108>)
    da2e:	4798      	blx	r3
    da30:	2000      	movs	r0, #0
    da32:	e012      	b.n	da5a <mqtt_connect+0xf2>
    da34:	466a      	mov	r2, sp
    da36:	2302      	movs	r3, #2
    da38:	8213      	strh	r3, [r2, #16]
    da3a:	1c23      	adds	r3, r4, #0
    da3c:	3358      	adds	r3, #88	; 0x58
    da3e:	881b      	ldrh	r3, [r3, #0]
    da40:	1c28      	adds	r0, r5, #0
    da42:	ba5b      	rev16	r3, r3
    da44:	8253      	strh	r3, [r2, #18]
    da46:	4b0b      	ldr	r3, [pc, #44]	; (da74 <mqtt_connect+0x10c>)
    da48:	4798      	blx	r3
    da4a:	9005      	str	r0, [sp, #20]
    da4c:	2002      	movs	r0, #2
    da4e:	5620      	ldrsb	r0, [r4, r0]
    da50:	a904      	add	r1, sp, #16
    da52:	2210      	movs	r2, #16
    da54:	4b08      	ldr	r3, [pc, #32]	; (da78 <mqtt_connect+0x110>)
    da56:	4798      	blx	r3
    da58:	1c38      	adds	r0, r7, #0
    da5a:	b009      	add	sp, #36	; 0x24
    da5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da5e:	46c0      	nop			; (mov r8, r8)
    da60:	0000f3d5 	.word	0x0000f3d5
    da64:	0000f3c5 	.word	0x0000f3c5
    da68:	00004fd1 	.word	0x00004fd1
    da6c:	20000448 	.word	0x20000448
    da70:	0000581d 	.word	0x0000581d
    da74:	00005715 	.word	0x00005715
    da78:	000051e1 	.word	0x000051e1

0000da7c <mqtt_connect_broker>:
    da7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da7e:	b095      	sub	sp, #84	; 0x54
    da80:	af02      	add	r7, sp, #8
    da82:	617b      	str	r3, [r7, #20]
    da84:	1c3b      	adds	r3, r7, #0
    da86:	3370      	adds	r3, #112	; 0x70
    da88:	781b      	ldrb	r3, [r3, #0]
    da8a:	1c05      	adds	r5, r0, #0
    da8c:	60fb      	str	r3, [r7, #12]
    da8e:	1c3b      	adds	r3, r7, #0
    da90:	3374      	adds	r3, #116	; 0x74
    da92:	781b      	ldrb	r3, [r3, #0]
    da94:	6139      	str	r1, [r7, #16]
    da96:	61fa      	str	r2, [r7, #28]
    da98:	60bb      	str	r3, [r7, #8]
    da9a:	2800      	cmp	r0, #0
    da9c:	d101      	bne.n	daa2 <mqtt_connect_broker+0x26>
    da9e:	2016      	movs	r0, #22
    daa0:	e129      	b.n	dcf6 <mqtt_connect_broker+0x27a>
    daa2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    daa4:	4668      	mov	r0, sp
    daa6:	3307      	adds	r3, #7
    daa8:	08db      	lsrs	r3, r3, #3
    daaa:	00db      	lsls	r3, r3, #3
    daac:	1ac0      	subs	r0, r0, r3
    daae:	4685      	mov	sp, r0
    dab0:	ac02      	add	r4, sp, #8
    dab2:	607c      	str	r4, [r7, #4]
    dab4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    dab6:	2c00      	cmp	r4, #0
    dab8:	d0f1      	beq.n	da9e <mqtt_connect_broker+0x22>
    daba:	1c2b      	adds	r3, r5, #0
    dabc:	3343      	adds	r3, #67	; 0x43
    dabe:	781b      	ldrb	r3, [r3, #0]
    dac0:	07d8      	lsls	r0, r3, #31
    dac2:	d400      	bmi.n	dac6 <mqtt_connect_broker+0x4a>
    dac4:	e112      	b.n	dcec <mqtt_connect_broker+0x270>
    dac6:	079a      	lsls	r2, r3, #30
    dac8:	d500      	bpl.n	dacc <mqtt_connect_broker+0x50>
    daca:	e111      	b.n	dcf0 <mqtt_connect_broker+0x274>
    dacc:	071c      	lsls	r4, r3, #28
    dace:	d40b      	bmi.n	dae8 <mqtt_connect_broker+0x6c>
    dad0:	4e8b      	ldr	r6, [pc, #556]	; (dd00 <mqtt_connect_broker+0x284>)
    dad2:	6e38      	ldr	r0, [r7, #96]	; 0x60
    dad4:	47b0      	blx	r6
    dad6:	1c03      	adds	r3, r0, #0
    dad8:	61b8      	str	r0, [r7, #24]
    dada:	69f8      	ldr	r0, [r7, #28]
    dadc:	330e      	adds	r3, #14
    dade:	1c34      	adds	r4, r6, #0
    dae0:	2800      	cmp	r0, #0
    dae2:	d113      	bne.n	db0c <mqtt_connect_broker+0x90>
    dae4:	1c1e      	adds	r6, r3, #0
    dae6:	e01d      	b.n	db24 <mqtt_connect_broker+0xa8>
    dae8:	1c2b      	adds	r3, r5, #0
    daea:	3370      	adds	r3, #112	; 0x70
    daec:	781b      	ldrb	r3, [r3, #0]
    daee:	2b00      	cmp	r3, #0
    daf0:	d000      	beq.n	daf4 <mqtt_connect_broker+0x78>
    daf2:	e0ff      	b.n	dcf4 <mqtt_connect_broker+0x278>
    daf4:	1c2b      	adds	r3, r5, #0
    daf6:	3343      	adds	r3, #67	; 0x43
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	071a      	lsls	r2, r3, #28
    dafc:	d5e8      	bpl.n	dad0 <mqtt_connect_broker+0x54>
    dafe:	4b81      	ldr	r3, [pc, #516]	; (dd04 <mqtt_connect_broker+0x288>)
    db00:	2000      	movs	r0, #0
    db02:	4798      	blx	r3
    db04:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    db06:	4b80      	ldr	r3, [pc, #512]	; (dd08 <mqtt_connect_broker+0x28c>)
    db08:	4798      	blx	r3
    db0a:	e7f3      	b.n	daf4 <mqtt_connect_broker+0x78>
    db0c:	69f8      	ldr	r0, [r7, #28]
    db0e:	47b0      	blx	r6
    db10:	69be      	ldr	r6, [r7, #24]
    db12:	697b      	ldr	r3, [r7, #20]
    db14:	3610      	adds	r6, #16
    db16:	1836      	adds	r6, r6, r0
    db18:	2b00      	cmp	r3, #0
    db1a:	d003      	beq.n	db24 <mqtt_connect_broker+0xa8>
    db1c:	1c18      	adds	r0, r3, #0
    db1e:	47a0      	blx	r4
    db20:	3602      	adds	r6, #2
    db22:	1836      	adds	r6, r6, r0
    db24:	6e78      	ldr	r0, [r7, #100]	; 0x64
    db26:	2800      	cmp	r0, #0
    db28:	d007      	beq.n	db3a <mqtt_connect_broker+0xbe>
    db2a:	47a0      	blx	r4
    db2c:	3602      	adds	r6, #2
    db2e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    db30:	1830      	adds	r0, r6, r0
    db32:	1906      	adds	r6, r0, r4
    db34:	2c00      	cmp	r4, #0
    db36:	d100      	bne.n	db3a <mqtt_connect_broker+0xbe>
    db38:	1c06      	adds	r6, r0, #0
    db3a:	69fc      	ldr	r4, [r7, #28]
    db3c:	2c00      	cmp	r4, #0
    db3e:	d006      	beq.n	db4e <mqtt_connect_broker+0xd2>
    db40:	24c0      	movs	r4, #192	; 0xc0
    db42:	61bc      	str	r4, [r7, #24]
    db44:	697c      	ldr	r4, [r7, #20]
    db46:	2c00      	cmp	r4, #0
    db48:	d103      	bne.n	db52 <mqtt_connect_broker+0xd6>
    db4a:	2480      	movs	r4, #128	; 0x80
    db4c:	e000      	b.n	db50 <mqtt_connect_broker+0xd4>
    db4e:	69fc      	ldr	r4, [r7, #28]
    db50:	61bc      	str	r4, [r7, #24]
    db52:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    db54:	2c00      	cmp	r4, #0
    db56:	d00f      	beq.n	db78 <mqtt_connect_broker+0xfc>
    db58:	68bc      	ldr	r4, [r7, #8]
    db5a:	2c00      	cmp	r4, #0
    db5c:	d003      	beq.n	db66 <mqtt_connect_broker+0xea>
    db5e:	69bc      	ldr	r4, [r7, #24]
    db60:	2320      	movs	r3, #32
    db62:	431c      	orrs	r4, r3
    db64:	61bc      	str	r4, [r7, #24]
    db66:	68fc      	ldr	r4, [r7, #12]
    db68:	2303      	movs	r3, #3
    db6a:	4023      	ands	r3, r4
    db6c:	00db      	lsls	r3, r3, #3
    db6e:	69bc      	ldr	r4, [r7, #24]
    db70:	2204      	movs	r2, #4
    db72:	4313      	orrs	r3, r2
    db74:	431c      	orrs	r4, r3
    db76:	61bc      	str	r4, [r7, #24]
    db78:	693c      	ldr	r4, [r7, #16]
    db7a:	2c00      	cmp	r4, #0
    db7c:	d003      	beq.n	db86 <mqtt_connect_broker+0x10a>
    db7e:	69bc      	ldr	r4, [r7, #24]
    db80:	2302      	movs	r3, #2
    db82:	431c      	orrs	r4, r3
    db84:	61bc      	str	r4, [r7, #24]
    db86:	1c2b      	adds	r3, r5, #0
    db88:	3343      	adds	r3, #67	; 0x43
    db8a:	781a      	ldrb	r2, [r3, #0]
    db8c:	2108      	movs	r1, #8
    db8e:	430a      	orrs	r2, r1
    db90:	701a      	strb	r2, [r3, #0]
    db92:	1c38      	adds	r0, r7, #0
    db94:	9500      	str	r5, [sp, #0]
    db96:	3020      	adds	r0, #32
    db98:	6879      	ldr	r1, [r7, #4]
    db9a:	4b5c      	ldr	r3, [pc, #368]	; (dd0c <mqtt_connect_broker+0x290>)
    db9c:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    db9e:	4c5c      	ldr	r4, [pc, #368]	; (dd10 <mqtt_connect_broker+0x294>)
    dba0:	47a0      	blx	r4
    dba2:	1c38      	adds	r0, r7, #0
    dba4:	3020      	adds	r0, #32
    dba6:	2110      	movs	r1, #16
    dba8:	4b5a      	ldr	r3, [pc, #360]	; (dd14 <mqtt_connect_broker+0x298>)
    dbaa:	4798      	blx	r3
    dbac:	2e80      	cmp	r6, #128	; 0x80
    dbae:	dd09      	ble.n	dbc4 <mqtt_connect_broker+0x148>
    dbb0:	2180      	movs	r1, #128	; 0x80
    dbb2:	4249      	negs	r1, r1
    dbb4:	4331      	orrs	r1, r6
    dbb6:	1c38      	adds	r0, r7, #0
    dbb8:	b249      	sxtb	r1, r1
    dbba:	3020      	adds	r0, #32
    dbbc:	4c55      	ldr	r4, [pc, #340]	; (dd14 <mqtt_connect_broker+0x298>)
    dbbe:	47a0      	blx	r4
    dbc0:	11f6      	asrs	r6, r6, #7
    dbc2:	e7f3      	b.n	dbac <mqtt_connect_broker+0x130>
    dbc4:	4b54      	ldr	r3, [pc, #336]	; (dd18 <mqtt_connect_broker+0x29c>)
    dbc6:	401e      	ands	r6, r3
    dbc8:	d504      	bpl.n	dbd4 <mqtt_connect_broker+0x158>
    dbca:	2380      	movs	r3, #128	; 0x80
    dbcc:	3e01      	subs	r6, #1
    dbce:	425b      	negs	r3, r3
    dbd0:	431e      	orrs	r6, r3
    dbd2:	3601      	adds	r6, #1
    dbd4:	1c38      	adds	r0, r7, #0
    dbd6:	b271      	sxtb	r1, r6
    dbd8:	3020      	adds	r0, #32
    dbda:	4c4e      	ldr	r4, [pc, #312]	; (dd14 <mqtt_connect_broker+0x298>)
    dbdc:	47a0      	blx	r4
    dbde:	1c38      	adds	r0, r7, #0
    dbe0:	4c4e      	ldr	r4, [pc, #312]	; (dd1c <mqtt_connect_broker+0x2a0>)
    dbe2:	3020      	adds	r0, #32
    dbe4:	2106      	movs	r1, #6
    dbe6:	47a0      	blx	r4
    dbe8:	1c38      	adds	r0, r7, #0
    dbea:	4b4d      	ldr	r3, [pc, #308]	; (dd20 <mqtt_connect_broker+0x2a4>)
    dbec:	3020      	adds	r0, #32
    dbee:	494d      	ldr	r1, [pc, #308]	; (dd24 <mqtt_connect_broker+0x2a8>)
    dbf0:	2206      	movs	r2, #6
    dbf2:	4798      	blx	r3
    dbf4:	1c38      	adds	r0, r7, #0
    dbf6:	3020      	adds	r0, #32
    dbf8:	2103      	movs	r1, #3
    dbfa:	4a46      	ldr	r2, [pc, #280]	; (dd14 <mqtt_connect_broker+0x298>)
    dbfc:	4790      	blx	r2
    dbfe:	69bb      	ldr	r3, [r7, #24]
    dc00:	1c38      	adds	r0, r7, #0
    dc02:	4a44      	ldr	r2, [pc, #272]	; (dd14 <mqtt_connect_broker+0x298>)
    dc04:	b259      	sxtb	r1, r3
    dc06:	3020      	adds	r0, #32
    dc08:	4790      	blx	r2
    dc0a:	1c2b      	adds	r3, r5, #0
    dc0c:	3360      	adds	r3, #96	; 0x60
    dc0e:	2000      	movs	r0, #0
    dc10:	5e19      	ldrsh	r1, [r3, r0]
    dc12:	1c38      	adds	r0, r7, #0
    dc14:	3020      	adds	r0, #32
    dc16:	47a0      	blx	r4
    dc18:	4e39      	ldr	r6, [pc, #228]	; (dd00 <mqtt_connect_broker+0x284>)
    dc1a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    dc1c:	47b0      	blx	r6
    dc1e:	b201      	sxth	r1, r0
    dc20:	1c38      	adds	r0, r7, #0
    dc22:	3020      	adds	r0, #32
    dc24:	47a0      	blx	r4
    dc26:	6e38      	ldr	r0, [r7, #96]	; 0x60
    dc28:	47b0      	blx	r6
    dc2a:	1c02      	adds	r2, r0, #0
    dc2c:	1c38      	adds	r0, r7, #0
    dc2e:	3020      	adds	r0, #32
    dc30:	6e39      	ldr	r1, [r7, #96]	; 0x60
    dc32:	4b3b      	ldr	r3, [pc, #236]	; (dd20 <mqtt_connect_broker+0x2a4>)
    dc34:	4798      	blx	r3
    dc36:	6e78      	ldr	r0, [r7, #100]	; 0x64
    dc38:	2800      	cmp	r0, #0
    dc3a:	d015      	beq.n	dc68 <mqtt_connect_broker+0x1ec>
    dc3c:	47b0      	blx	r6
    dc3e:	b201      	sxth	r1, r0
    dc40:	1c38      	adds	r0, r7, #0
    dc42:	3020      	adds	r0, #32
    dc44:	47a0      	blx	r4
    dc46:	6e78      	ldr	r0, [r7, #100]	; 0x64
    dc48:	47b0      	blx	r6
    dc4a:	1c02      	adds	r2, r0, #0
    dc4c:	1c38      	adds	r0, r7, #0
    dc4e:	4c34      	ldr	r4, [pc, #208]	; (dd20 <mqtt_connect_broker+0x2a4>)
    dc50:	3020      	adds	r0, #32
    dc52:	6e79      	ldr	r1, [r7, #100]	; 0x64
    dc54:	47a0      	blx	r4
    dc56:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    dc58:	2c00      	cmp	r4, #0
    dc5a:	d005      	beq.n	dc68 <mqtt_connect_broker+0x1ec>
    dc5c:	1c38      	adds	r0, r7, #0
    dc5e:	1c21      	adds	r1, r4, #0
    dc60:	3020      	adds	r0, #32
    dc62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    dc64:	4c2e      	ldr	r4, [pc, #184]	; (dd20 <mqtt_connect_broker+0x2a4>)
    dc66:	47a0      	blx	r4
    dc68:	69fc      	ldr	r4, [r7, #28]
    dc6a:	2c00      	cmp	r4, #0
    dc6c:	d01f      	beq.n	dcae <mqtt_connect_broker+0x232>
    dc6e:	4e24      	ldr	r6, [pc, #144]	; (dd00 <mqtt_connect_broker+0x284>)
    dc70:	1c20      	adds	r0, r4, #0
    dc72:	47b0      	blx	r6
    dc74:	b201      	sxth	r1, r0
    dc76:	1c38      	adds	r0, r7, #0
    dc78:	3020      	adds	r0, #32
    dc7a:	4c28      	ldr	r4, [pc, #160]	; (dd1c <mqtt_connect_broker+0x2a0>)
    dc7c:	47a0      	blx	r4
    dc7e:	69f8      	ldr	r0, [r7, #28]
    dc80:	47b0      	blx	r6
    dc82:	1c02      	adds	r2, r0, #0
    dc84:	1c38      	adds	r0, r7, #0
    dc86:	3020      	adds	r0, #32
    dc88:	69f9      	ldr	r1, [r7, #28]
    dc8a:	4c25      	ldr	r4, [pc, #148]	; (dd20 <mqtt_connect_broker+0x2a4>)
    dc8c:	47a0      	blx	r4
    dc8e:	6978      	ldr	r0, [r7, #20]
    dc90:	2800      	cmp	r0, #0
    dc92:	d00c      	beq.n	dcae <mqtt_connect_broker+0x232>
    dc94:	47b0      	blx	r6
    dc96:	b201      	sxth	r1, r0
    dc98:	1c38      	adds	r0, r7, #0
    dc9a:	4a20      	ldr	r2, [pc, #128]	; (dd1c <mqtt_connect_broker+0x2a0>)
    dc9c:	3020      	adds	r0, #32
    dc9e:	4790      	blx	r2
    dca0:	6978      	ldr	r0, [r7, #20]
    dca2:	47b0      	blx	r6
    dca4:	1c02      	adds	r2, r0, #0
    dca6:	1c38      	adds	r0, r7, #0
    dca8:	3020      	adds	r0, #32
    dcaa:	6979      	ldr	r1, [r7, #20]
    dcac:	47a0      	blx	r4
    dcae:	1c38      	adds	r0, r7, #0
    dcb0:	1c2c      	adds	r4, r5, #0
    dcb2:	3020      	adds	r0, #32
    dcb4:	4b1c      	ldr	r3, [pc, #112]	; (dd28 <mqtt_connect_broker+0x2ac>)
    dcb6:	3443      	adds	r4, #67	; 0x43
    dcb8:	4798      	blx	r3
    dcba:	7821      	ldrb	r1, [r4, #0]
    dcbc:	0789      	lsls	r1, r1, #30
    dcbe:	0fc9      	lsrs	r1, r1, #31
    dcc0:	2901      	cmp	r1, #1
    dcc2:	d10b      	bne.n	dcdc <mqtt_connect_broker+0x260>
    dcc4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    dcc6:	2a00      	cmp	r2, #0
    dcc8:	d108      	bne.n	dcdc <mqtt_connect_broker+0x260>
    dcca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    dccc:	2b00      	cmp	r3, #0
    dcce:	d005      	beq.n	dcdc <mqtt_connect_broker+0x260>
    dcd0:	2034      	movs	r0, #52	; 0x34
    dcd2:	55c2      	strb	r2, [r0, r7]
    dcd4:	1c3a      	adds	r2, r7, #0
    dcd6:	1c28      	adds	r0, r5, #0
    dcd8:	3234      	adds	r2, #52	; 0x34
    dcda:	4798      	blx	r3
    dcdc:	7823      	ldrb	r3, [r4, #0]
    dcde:	2202      	movs	r2, #2
    dce0:	4313      	orrs	r3, r2
    dce2:	2208      	movs	r2, #8
    dce4:	4393      	bics	r3, r2
    dce6:	7023      	strb	r3, [r4, #0]
    dce8:	2000      	movs	r0, #0
    dcea:	e005      	b.n	dcf8 <mqtt_connect_broker+0x27c>
    dcec:	2080      	movs	r0, #128	; 0x80
    dcee:	e002      	b.n	dcf6 <mqtt_connect_broker+0x27a>
    dcf0:	2078      	movs	r0, #120	; 0x78
    dcf2:	e000      	b.n	dcf6 <mqtt_connect_broker+0x27a>
    dcf4:	200b      	movs	r0, #11
    dcf6:	4240      	negs	r0, r0
    dcf8:	46bd      	mov	sp, r7
    dcfa:	b013      	add	sp, #76	; 0x4c
    dcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcfe:	46c0      	nop			; (mov r8, r8)
    dd00:	0000f3d5 	.word	0x0000f3d5
    dd04:	00001f41 	.word	0x00001f41
    dd08:	00007cdd 	.word	0x00007cdd
    dd0c:	0000d7f5 	.word	0x0000d7f5
    dd10:	000078f9 	.word	0x000078f9
    dd14:	0000792d 	.word	0x0000792d
    dd18:	8000007f 	.word	0x8000007f
    dd1c:	00007979 	.word	0x00007979
    dd20:	000079b9 	.word	0x000079b9
    dd24:	0001509a 	.word	0x0001509a
    dd28:	000079f5 	.word	0x000079f5

0000dd2c <mqtt_publish>:
    dd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd2e:	b093      	sub	sp, #76	; 0x4c
    dd30:	af02      	add	r7, sp, #8
    dd32:	60fb      	str	r3, [r7, #12]
    dd34:	1c3b      	adds	r3, r7, #0
    dd36:	3358      	adds	r3, #88	; 0x58
    dd38:	781b      	ldrb	r3, [r3, #0]
    dd3a:	1c04      	adds	r4, r0, #0
    dd3c:	613b      	str	r3, [r7, #16]
    dd3e:	1c3b      	adds	r3, r7, #0
    dd40:	335c      	adds	r3, #92	; 0x5c
    dd42:	781b      	ldrb	r3, [r3, #0]
    dd44:	6179      	str	r1, [r7, #20]
    dd46:	60ba      	str	r2, [r7, #8]
    dd48:	607b      	str	r3, [r7, #4]
    dd4a:	2800      	cmp	r0, #0
    dd4c:	d101      	bne.n	dd52 <mqtt_publish+0x26>
    dd4e:	2516      	movs	r5, #22
    dd50:	e0a7      	b.n	dea2 <mqtt_publish+0x176>
    dd52:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    dd54:	466a      	mov	r2, sp
    dd56:	3307      	adds	r3, #7
    dd58:	08db      	lsrs	r3, r3, #3
    dd5a:	00db      	lsls	r3, r3, #3
    dd5c:	1ad2      	subs	r2, r2, r3
    dd5e:	697b      	ldr	r3, [r7, #20]
    dd60:	4695      	mov	sp, r2
    dd62:	ae02      	add	r6, sp, #8
    dd64:	2b00      	cmp	r3, #0
    dd66:	d0f2      	beq.n	dd4e <mqtt_publish+0x22>
    dd68:	693a      	ldr	r2, [r7, #16]
    dd6a:	2a02      	cmp	r2, #2
    dd6c:	d8ef      	bhi.n	dd4e <mqtt_publish+0x22>
    dd6e:	1c05      	adds	r5, r0, #0
    dd70:	3543      	adds	r5, #67	; 0x43
    dd72:	782b      	ldrb	r3, [r5, #0]
    dd74:	079a      	lsls	r2, r3, #30
    dd76:	d400      	bmi.n	dd7a <mqtt_publish+0x4e>
    dd78:	e090      	b.n	de9c <mqtt_publish+0x170>
    dd7a:	071a      	lsls	r2, r3, #28
    dd7c:	d40a      	bmi.n	dd94 <mqtt_publish+0x68>
    dd7e:	4b4b      	ldr	r3, [pc, #300]	; (deac <mqtt_publish+0x180>)
    dd80:	6978      	ldr	r0, [r7, #20]
    dd82:	4798      	blx	r3
    dd84:	68fd      	ldr	r5, [r7, #12]
    dd86:	693b      	ldr	r3, [r7, #16]
    dd88:	3502      	adds	r5, #2
    dd8a:	182d      	adds	r5, r5, r0
    dd8c:	2b00      	cmp	r3, #0
    dd8e:	d011      	beq.n	ddb4 <mqtt_publish+0x88>
    dd90:	3502      	adds	r5, #2
    dd92:	e00f      	b.n	ddb4 <mqtt_publish+0x88>
    dd94:	1c03      	adds	r3, r0, #0
    dd96:	3370      	adds	r3, #112	; 0x70
    dd98:	781b      	ldrb	r3, [r3, #0]
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d000      	beq.n	dda0 <mqtt_publish+0x74>
    dd9e:	e07f      	b.n	dea0 <mqtt_publish+0x174>
    dda0:	782b      	ldrb	r3, [r5, #0]
    dda2:	071a      	lsls	r2, r3, #28
    dda4:	d5eb      	bpl.n	dd7e <mqtt_publish+0x52>
    dda6:	4b42      	ldr	r3, [pc, #264]	; (deb0 <mqtt_publish+0x184>)
    dda8:	2000      	movs	r0, #0
    ddaa:	4798      	blx	r3
    ddac:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    ddae:	4b41      	ldr	r3, [pc, #260]	; (deb4 <mqtt_publish+0x188>)
    ddb0:	4798      	blx	r3
    ddb2:	e7f5      	b.n	dda0 <mqtt_publish+0x74>
    ddb4:	1c23      	adds	r3, r4, #0
    ddb6:	3343      	adds	r3, #67	; 0x43
    ddb8:	781a      	ldrb	r2, [r3, #0]
    ddba:	2108      	movs	r1, #8
    ddbc:	430a      	orrs	r2, r1
    ddbe:	701a      	strb	r2, [r3, #0]
    ddc0:	1c38      	adds	r0, r7, #0
    ddc2:	9400      	str	r4, [sp, #0]
    ddc4:	1c31      	adds	r1, r6, #0
    ddc6:	302c      	adds	r0, #44	; 0x2c
    ddc8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    ddca:	4b3b      	ldr	r3, [pc, #236]	; (deb8 <mqtt_publish+0x18c>)
    ddcc:	4e3b      	ldr	r6, [pc, #236]	; (debc <mqtt_publish+0x190>)
    ddce:	47b0      	blx	r6
    ddd0:	687b      	ldr	r3, [r7, #4]
    ddd2:	2101      	movs	r1, #1
    ddd4:	4019      	ands	r1, r3
    ddd6:	2330      	movs	r3, #48	; 0x30
    ddd8:	4319      	orrs	r1, r3
    ddda:	693b      	ldr	r3, [r7, #16]
    dddc:	1c38      	adds	r0, r7, #0
    ddde:	005a      	lsls	r2, r3, #1
    dde0:	2306      	movs	r3, #6
    dde2:	4013      	ands	r3, r2
    dde4:	4319      	orrs	r1, r3
    dde6:	302c      	adds	r0, #44	; 0x2c
    dde8:	4b35      	ldr	r3, [pc, #212]	; (dec0 <mqtt_publish+0x194>)
    ddea:	4798      	blx	r3
    ddec:	4b34      	ldr	r3, [pc, #208]	; (dec0 <mqtt_publish+0x194>)
    ddee:	2d80      	cmp	r5, #128	; 0x80
    ddf0:	dd08      	ble.n	de04 <mqtt_publish+0xd8>
    ddf2:	2180      	movs	r1, #128	; 0x80
    ddf4:	4249      	negs	r1, r1
    ddf6:	4329      	orrs	r1, r5
    ddf8:	1c38      	adds	r0, r7, #0
    ddfa:	b249      	sxtb	r1, r1
    ddfc:	302c      	adds	r0, #44	; 0x2c
    ddfe:	4798      	blx	r3
    de00:	11ed      	asrs	r5, r5, #7
    de02:	e7f3      	b.n	ddec <mqtt_publish+0xc0>
    de04:	4a2f      	ldr	r2, [pc, #188]	; (dec4 <mqtt_publish+0x198>)
    de06:	4015      	ands	r5, r2
    de08:	d504      	bpl.n	de14 <mqtt_publish+0xe8>
    de0a:	2280      	movs	r2, #128	; 0x80
    de0c:	3d01      	subs	r5, #1
    de0e:	4252      	negs	r2, r2
    de10:	4315      	orrs	r5, r2
    de12:	3501      	adds	r5, #1
    de14:	1c38      	adds	r0, r7, #0
    de16:	b269      	sxtb	r1, r5
    de18:	302c      	adds	r0, #44	; 0x2c
    de1a:	4798      	blx	r3
    de1c:	4e23      	ldr	r6, [pc, #140]	; (deac <mqtt_publish+0x180>)
    de1e:	6978      	ldr	r0, [r7, #20]
    de20:	47b0      	blx	r6
    de22:	b201      	sxth	r1, r0
    de24:	1c38      	adds	r0, r7, #0
    de26:	302c      	adds	r0, #44	; 0x2c
    de28:	4d27      	ldr	r5, [pc, #156]	; (dec8 <mqtt_publish+0x19c>)
    de2a:	47a8      	blx	r5
    de2c:	6978      	ldr	r0, [r7, #20]
    de2e:	47b0      	blx	r6
    de30:	1c02      	adds	r2, r0, #0
    de32:	1c38      	adds	r0, r7, #0
    de34:	302c      	adds	r0, #44	; 0x2c
    de36:	6979      	ldr	r1, [r7, #20]
    de38:	4e24      	ldr	r6, [pc, #144]	; (decc <mqtt_publish+0x1a0>)
    de3a:	47b0      	blx	r6
    de3c:	693a      	ldr	r2, [r7, #16]
    de3e:	2a00      	cmp	r2, #0
    de40:	d006      	beq.n	de50 <mqtt_publish+0x124>
    de42:	8821      	ldrh	r1, [r4, #0]
    de44:	1c38      	adds	r0, r7, #0
    de46:	1c4b      	adds	r3, r1, #1
    de48:	8023      	strh	r3, [r4, #0]
    de4a:	b209      	sxth	r1, r1
    de4c:	302c      	adds	r0, #44	; 0x2c
    de4e:	47a8      	blx	r5
    de50:	8823      	ldrh	r3, [r4, #0]
    de52:	2b00      	cmp	r3, #0
    de54:	d101      	bne.n	de5a <mqtt_publish+0x12e>
    de56:	2301      	movs	r3, #1
    de58:	8023      	strh	r3, [r4, #0]
    de5a:	68bb      	ldr	r3, [r7, #8]
    de5c:	2b00      	cmp	r3, #0
    de5e:	d006      	beq.n	de6e <mqtt_publish+0x142>
    de60:	68fa      	ldr	r2, [r7, #12]
    de62:	2a00      	cmp	r2, #0
    de64:	d003      	beq.n	de6e <mqtt_publish+0x142>
    de66:	1c38      	adds	r0, r7, #0
    de68:	302c      	adds	r0, #44	; 0x2c
    de6a:	1c19      	adds	r1, r3, #0
    de6c:	47b0      	blx	r6
    de6e:	1c38      	adds	r0, r7, #0
    de70:	4b17      	ldr	r3, [pc, #92]	; (ded0 <mqtt_publish+0x1a4>)
    de72:	302c      	adds	r0, #44	; 0x2c
    de74:	4798      	blx	r3
    de76:	1c23      	adds	r3, r4, #0
    de78:	3343      	adds	r3, #67	; 0x43
    de7a:	781a      	ldrb	r2, [r3, #0]
    de7c:	2108      	movs	r1, #8
    de7e:	438a      	bics	r2, r1
    de80:	701a      	strb	r2, [r3, #0]
    de82:	693b      	ldr	r3, [r7, #16]
    de84:	2500      	movs	r5, #0
    de86:	42ab      	cmp	r3, r5
    de88:	d10c      	bne.n	dea4 <mqtt_publish+0x178>
    de8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    de8c:	42ab      	cmp	r3, r5
    de8e:	d009      	beq.n	dea4 <mqtt_publish+0x178>
    de90:	1c3a      	adds	r2, r7, #0
    de92:	1c20      	adds	r0, r4, #0
    de94:	2102      	movs	r1, #2
    de96:	3218      	adds	r2, #24
    de98:	4798      	blx	r3
    de9a:	e003      	b.n	dea4 <mqtt_publish+0x178>
    de9c:	2580      	movs	r5, #128	; 0x80
    de9e:	e000      	b.n	dea2 <mqtt_publish+0x176>
    dea0:	250b      	movs	r5, #11
    dea2:	426d      	negs	r5, r5
    dea4:	1c28      	adds	r0, r5, #0
    dea6:	46bd      	mov	sp, r7
    dea8:	b011      	add	sp, #68	; 0x44
    deaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    deac:	0000f3d5 	.word	0x0000f3d5
    deb0:	00001f41 	.word	0x00001f41
    deb4:	00007cdd 	.word	0x00007cdd
    deb8:	0000d7f5 	.word	0x0000d7f5
    debc:	000078f9 	.word	0x000078f9
    dec0:	0000792d 	.word	0x0000792d
    dec4:	8000007f 	.word	0x8000007f
    dec8:	00007979 	.word	0x00007979
    decc:	000079b9 	.word	0x000079b9
    ded0:	000079f5 	.word	0x000079f5

0000ded4 <mqtt_subscribe>:
    ded4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ded6:	b08d      	sub	sp, #52	; 0x34
    ded8:	af02      	add	r7, sp, #8
    deda:	1c04      	adds	r4, r0, #0
    dedc:	60b9      	str	r1, [r7, #8]
    dede:	607a      	str	r2, [r7, #4]
    dee0:	d101      	bne.n	dee6 <mqtt_subscribe+0x12>
    dee2:	2016      	movs	r0, #22
    dee4:	e086      	b.n	dff4 <mqtt_subscribe+0x120>
    dee6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    dee8:	466a      	mov	r2, sp
    deea:	3307      	adds	r3, #7
    deec:	08db      	lsrs	r3, r3, #3
    deee:	00db      	lsls	r3, r3, #3
    def0:	1ad2      	subs	r2, r2, r3
    def2:	4695      	mov	sp, r2
    def4:	ad02      	add	r5, sp, #8
    def6:	603d      	str	r5, [r7, #0]
    def8:	68bd      	ldr	r5, [r7, #8]
    defa:	2d00      	cmp	r5, #0
    defc:	d0f1      	beq.n	dee2 <mqtt_subscribe+0xe>
    defe:	687d      	ldr	r5, [r7, #4]
    df00:	2d02      	cmp	r5, #2
    df02:	d8ee      	bhi.n	dee2 <mqtt_subscribe+0xe>
    df04:	1c05      	adds	r5, r0, #0
    df06:	3543      	adds	r5, #67	; 0x43
    df08:	782b      	ldrb	r3, [r5, #0]
    df0a:	079a      	lsls	r2, r3, #30
    df0c:	d56f      	bpl.n	dfee <mqtt_subscribe+0x11a>
    df0e:	071a      	lsls	r2, r3, #28
    df10:	d41a      	bmi.n	df48 <mqtt_subscribe+0x74>
    df12:	68b8      	ldr	r0, [r7, #8]
    df14:	4d39      	ldr	r5, [pc, #228]	; (dffc <mqtt_subscribe+0x128>)
    df16:	47a8      	blx	r5
    df18:	1c25      	adds	r5, r4, #0
    df1a:	3543      	adds	r5, #67	; 0x43
    df1c:	782b      	ldrb	r3, [r5, #0]
    df1e:	2208      	movs	r2, #8
    df20:	4313      	orrs	r3, r2
    df22:	702b      	strb	r3, [r5, #0]
    df24:	60fd      	str	r5, [r7, #12]
    df26:	1d46      	adds	r6, r0, #5
    df28:	9400      	str	r4, [sp, #0]
    df2a:	1c38      	adds	r0, r7, #0
    df2c:	3014      	adds	r0, #20
    df2e:	6839      	ldr	r1, [r7, #0]
    df30:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    df32:	4b33      	ldr	r3, [pc, #204]	; (e000 <mqtt_subscribe+0x12c>)
    df34:	4d33      	ldr	r5, [pc, #204]	; (e004 <mqtt_subscribe+0x130>)
    df36:	47a8      	blx	r5
    df38:	1c38      	adds	r0, r7, #0
    df3a:	217e      	movs	r1, #126	; 0x7e
    df3c:	3014      	adds	r0, #20
    df3e:	4249      	negs	r1, r1
    df40:	4b31      	ldr	r3, [pc, #196]	; (e008 <mqtt_subscribe+0x134>)
    df42:	4798      	blx	r3
    df44:	4d2d      	ldr	r5, [pc, #180]	; (dffc <mqtt_subscribe+0x128>)
    df46:	e00e      	b.n	df66 <mqtt_subscribe+0x92>
    df48:	1c03      	adds	r3, r0, #0
    df4a:	3370      	adds	r3, #112	; 0x70
    df4c:	781b      	ldrb	r3, [r3, #0]
    df4e:	2b00      	cmp	r3, #0
    df50:	d14f      	bne.n	dff2 <mqtt_subscribe+0x11e>
    df52:	782b      	ldrb	r3, [r5, #0]
    df54:	071a      	lsls	r2, r3, #28
    df56:	d5dc      	bpl.n	df12 <mqtt_subscribe+0x3e>
    df58:	4b2c      	ldr	r3, [pc, #176]	; (e00c <mqtt_subscribe+0x138>)
    df5a:	2000      	movs	r0, #0
    df5c:	4798      	blx	r3
    df5e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    df60:	4b2b      	ldr	r3, [pc, #172]	; (e010 <mqtt_subscribe+0x13c>)
    df62:	4798      	blx	r3
    df64:	e7f5      	b.n	df52 <mqtt_subscribe+0x7e>
    df66:	4b28      	ldr	r3, [pc, #160]	; (e008 <mqtt_subscribe+0x134>)
    df68:	2e80      	cmp	r6, #128	; 0x80
    df6a:	dd08      	ble.n	df7e <mqtt_subscribe+0xaa>
    df6c:	2180      	movs	r1, #128	; 0x80
    df6e:	4249      	negs	r1, r1
    df70:	4331      	orrs	r1, r6
    df72:	1c38      	adds	r0, r7, #0
    df74:	b249      	sxtb	r1, r1
    df76:	3014      	adds	r0, #20
    df78:	4798      	blx	r3
    df7a:	11f6      	asrs	r6, r6, #7
    df7c:	e7f3      	b.n	df66 <mqtt_subscribe+0x92>
    df7e:	4925      	ldr	r1, [pc, #148]	; (e014 <mqtt_subscribe+0x140>)
    df80:	4031      	ands	r1, r6
    df82:	d504      	bpl.n	df8e <mqtt_subscribe+0xba>
    df84:	2280      	movs	r2, #128	; 0x80
    df86:	3901      	subs	r1, #1
    df88:	4252      	negs	r2, r2
    df8a:	4311      	orrs	r1, r2
    df8c:	3101      	adds	r1, #1
    df8e:	1c38      	adds	r0, r7, #0
    df90:	b249      	sxtb	r1, r1
    df92:	3014      	adds	r0, #20
    df94:	4798      	blx	r3
    df96:	8821      	ldrh	r1, [r4, #0]
    df98:	1c38      	adds	r0, r7, #0
    df9a:	1c4b      	adds	r3, r1, #1
    df9c:	8023      	strh	r3, [r4, #0]
    df9e:	b209      	sxth	r1, r1
    dfa0:	3014      	adds	r0, #20
    dfa2:	4e1d      	ldr	r6, [pc, #116]	; (e018 <mqtt_subscribe+0x144>)
    dfa4:	47b0      	blx	r6
    dfa6:	8823      	ldrh	r3, [r4, #0]
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	d101      	bne.n	dfb0 <mqtt_subscribe+0xdc>
    dfac:	2301      	movs	r3, #1
    dfae:	8023      	strh	r3, [r4, #0]
    dfb0:	68b8      	ldr	r0, [r7, #8]
    dfb2:	47a8      	blx	r5
    dfb4:	b201      	sxth	r1, r0
    dfb6:	1c38      	adds	r0, r7, #0
    dfb8:	3014      	adds	r0, #20
    dfba:	47b0      	blx	r6
    dfbc:	68b8      	ldr	r0, [r7, #8]
    dfbe:	47a8      	blx	r5
    dfc0:	1c02      	adds	r2, r0, #0
    dfc2:	1c38      	adds	r0, r7, #0
    dfc4:	3014      	adds	r0, #20
    dfc6:	68b9      	ldr	r1, [r7, #8]
    dfc8:	4b14      	ldr	r3, [pc, #80]	; (e01c <mqtt_subscribe+0x148>)
    dfca:	4798      	blx	r3
    dfcc:	687d      	ldr	r5, [r7, #4]
    dfce:	1c38      	adds	r0, r7, #0
    dfd0:	b269      	sxtb	r1, r5
    dfd2:	3014      	adds	r0, #20
    dfd4:	4b0c      	ldr	r3, [pc, #48]	; (e008 <mqtt_subscribe+0x134>)
    dfd6:	4798      	blx	r3
    dfd8:	1c38      	adds	r0, r7, #0
    dfda:	3014      	adds	r0, #20
    dfdc:	4b10      	ldr	r3, [pc, #64]	; (e020 <mqtt_subscribe+0x14c>)
    dfde:	4798      	blx	r3
    dfe0:	68fd      	ldr	r5, [r7, #12]
    dfe2:	2208      	movs	r2, #8
    dfe4:	782b      	ldrb	r3, [r5, #0]
    dfe6:	2000      	movs	r0, #0
    dfe8:	4393      	bics	r3, r2
    dfea:	702b      	strb	r3, [r5, #0]
    dfec:	e003      	b.n	dff6 <mqtt_subscribe+0x122>
    dfee:	2080      	movs	r0, #128	; 0x80
    dff0:	e000      	b.n	dff4 <mqtt_subscribe+0x120>
    dff2:	200b      	movs	r0, #11
    dff4:	4240      	negs	r0, r0
    dff6:	46bd      	mov	sp, r7
    dff8:	b00b      	add	sp, #44	; 0x2c
    dffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dffc:	0000f3d5 	.word	0x0000f3d5
    e000:	0000d7f5 	.word	0x0000d7f5
    e004:	000078f9 	.word	0x000078f9
    e008:	0000792d 	.word	0x0000792d
    e00c:	00001f41 	.word	0x00001f41
    e010:	00007cdd 	.word	0x00007cdd
    e014:	8000007f 	.word	0x8000007f
    e018:	00007979 	.word	0x00007979
    e01c:	000079b9 	.word	0x000079b9
    e020:	000079f5 	.word	0x000079f5

0000e024 <_mqtt_ping>:
    e024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e026:	23c0      	movs	r3, #192	; 0xc0
    e028:	a901      	add	r1, sp, #4
    e02a:	2500      	movs	r5, #0
    e02c:	700b      	strb	r3, [r1, #0]
    e02e:	704d      	strb	r5, [r1, #1]
    e030:	42a8      	cmp	r0, r5
    e032:	d019      	beq.n	e068 <_mqtt_ping+0x44>
    e034:	1c04      	adds	r4, r0, #0
    e036:	3443      	adds	r4, #67	; 0x43
    e038:	7823      	ldrb	r3, [r4, #0]
    e03a:	079a      	lsls	r2, r3, #30
    e03c:	d516      	bpl.n	e06c <_mqtt_ping+0x48>
    e03e:	071a      	lsls	r2, r3, #28
    e040:	d416      	bmi.n	e070 <_mqtt_ping+0x4c>
    e042:	2608      	movs	r6, #8
    e044:	4333      	orrs	r3, r6
    e046:	7023      	strb	r3, [r4, #0]
    e048:	7880      	ldrb	r0, [r0, #2]
    e04a:	1c2b      	adds	r3, r5, #0
    e04c:	b240      	sxtb	r0, r0
    e04e:	2202      	movs	r2, #2
    e050:	4f09      	ldr	r7, [pc, #36]	; (e078 <_mqtt_ping+0x54>)
    e052:	47b8      	blx	r7
    e054:	1c2b      	adds	r3, r5, #0
    e056:	42a8      	cmp	r0, r5
    e058:	da0c      	bge.n	e074 <_mqtt_ping+0x50>
    e05a:	7823      	ldrb	r3, [r4, #0]
    e05c:	43b3      	bics	r3, r6
    e05e:	7023      	strb	r3, [r4, #0]
    e060:	4b06      	ldr	r3, [pc, #24]	; (e07c <_mqtt_ping+0x58>)
    e062:	4798      	blx	r3
    e064:	1c03      	adds	r3, r0, #0
    e066:	e005      	b.n	e074 <_mqtt_ping+0x50>
    e068:	2316      	movs	r3, #22
    e06a:	e002      	b.n	e072 <_mqtt_ping+0x4e>
    e06c:	2380      	movs	r3, #128	; 0x80
    e06e:	e000      	b.n	e072 <_mqtt_ping+0x4e>
    e070:	230b      	movs	r3, #11
    e072:	425b      	negs	r3, r3
    e074:	1c18      	adds	r0, r3, #0
    e076:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e078:	000052f5 	.word	0x000052f5
    e07c:	0000d7a5 	.word	0x0000d7a5

0000e080 <mqtt_timer_callback>:
    e080:	b570      	push	{r4, r5, r6, lr}
    e082:	1c05      	adds	r5, r0, #0
    e084:	b086      	sub	sp, #24
    e086:	1c0e      	adds	r6, r1, #0
    e088:	1c14      	adds	r4, r2, #0
    e08a:	2800      	cmp	r0, #0
    e08c:	d012      	beq.n	e0b4 <mqtt_timer_callback+0x34>
    e08e:	2a00      	cmp	r2, #0
    e090:	d010      	beq.n	e0b4 <mqtt_timer_callback+0x34>
    e092:	1c10      	adds	r0, r2, #0
    e094:	4b08      	ldr	r3, [pc, #32]	; (e0b8 <mqtt_timer_callback+0x38>)
    e096:	4798      	blx	r3
    e098:	2800      	cmp	r0, #0
    e09a:	da04      	bge.n	e0a6 <mqtt_timer_callback+0x26>
    e09c:	1c28      	adds	r0, r5, #0
    e09e:	1c31      	adds	r1, r6, #0
    e0a0:	2200      	movs	r2, #0
    e0a2:	4b06      	ldr	r3, [pc, #24]	; (e0bc <mqtt_timer_callback+0x3c>)
    e0a4:	e005      	b.n	e0b2 <mqtt_timer_callback+0x32>
    e0a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d003      	beq.n	e0b4 <mqtt_timer_callback+0x34>
    e0ac:	1c20      	adds	r0, r4, #0
    e0ae:	2107      	movs	r1, #7
    e0b0:	aa01      	add	r2, sp, #4
    e0b2:	4798      	blx	r3
    e0b4:	b006      	add	sp, #24
    e0b6:	bd70      	pop	{r4, r5, r6, pc}
    e0b8:	0000e025 	.word	0x0000e025
    e0bc:	00007c61 	.word	0x00007c61

0000e0c0 <_mqtt_puback>:
    e0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e0c2:	2302      	movs	r3, #2
    e0c4:	ac01      	add	r4, sp, #4
    e0c6:	2700      	movs	r7, #0
    e0c8:	7063      	strb	r3, [r4, #1]
    e0ca:	42b8      	cmp	r0, r7
    e0cc:	d01e      	beq.n	e10c <_mqtt_puback+0x4c>
    e0ce:	1c05      	adds	r5, r0, #0
    e0d0:	3543      	adds	r5, #67	; 0x43
    e0d2:	782b      	ldrb	r3, [r5, #0]
    e0d4:	079e      	lsls	r6, r3, #30
    e0d6:	d51b      	bpl.n	e110 <_mqtt_puback+0x50>
    e0d8:	071e      	lsls	r6, r3, #28
    e0da:	d41b      	bmi.n	e114 <_mqtt_puback+0x54>
    e0dc:	2608      	movs	r6, #8
    e0de:	4333      	orrs	r3, r6
    e0e0:	702b      	strb	r3, [r5, #0]
    e0e2:	7880      	ldrb	r0, [r0, #2]
    e0e4:	7021      	strb	r1, [r4, #0]
    e0e6:	0a11      	lsrs	r1, r2, #8
    e0e8:	70a1      	strb	r1, [r4, #2]
    e0ea:	70e2      	strb	r2, [r4, #3]
    e0ec:	1c21      	adds	r1, r4, #0
    e0ee:	1c3b      	adds	r3, r7, #0
    e0f0:	b240      	sxtb	r0, r0
    e0f2:	2204      	movs	r2, #4
    e0f4:	4c09      	ldr	r4, [pc, #36]	; (e11c <_mqtt_puback+0x5c>)
    e0f6:	47a0      	blx	r4
    e0f8:	1c3b      	adds	r3, r7, #0
    e0fa:	42b8      	cmp	r0, r7
    e0fc:	da0c      	bge.n	e118 <_mqtt_puback+0x58>
    e0fe:	782b      	ldrb	r3, [r5, #0]
    e100:	43b3      	bics	r3, r6
    e102:	702b      	strb	r3, [r5, #0]
    e104:	4b06      	ldr	r3, [pc, #24]	; (e120 <_mqtt_puback+0x60>)
    e106:	4798      	blx	r3
    e108:	1c03      	adds	r3, r0, #0
    e10a:	e005      	b.n	e118 <_mqtt_puback+0x58>
    e10c:	2316      	movs	r3, #22
    e10e:	e002      	b.n	e116 <_mqtt_puback+0x56>
    e110:	2380      	movs	r3, #128	; 0x80
    e112:	e000      	b.n	e116 <_mqtt_puback+0x56>
    e114:	230b      	movs	r3, #11
    e116:	425b      	negs	r3, r3
    e118:	1c18      	adds	r0, r3, #0
    e11a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e11c:	000052f5 	.word	0x000052f5
    e120:	0000d7a5 	.word	0x0000d7a5

0000e124 <mqtt_clear_conn>:
    e124:	b530      	push	{r4, r5, lr}
    e126:	1c04      	adds	r4, r0, #0
    e128:	b087      	sub	sp, #28
    e12a:	2800      	cmp	r0, #0
    e12c:	d01c      	beq.n	e168 <mqtt_clear_conn+0x44>
    e12e:	2002      	movs	r0, #2
    e130:	4b0e      	ldr	r3, [pc, #56]	; (e16c <mqtt_clear_conn+0x48>)
    e132:	5620      	ldrsb	r0, [r4, r0]
    e134:	4798      	blx	r3
    e136:	1c23      	adds	r3, r4, #0
    e138:	3343      	adds	r3, #67	; 0x43
    e13a:	781a      	ldrb	r2, [r3, #0]
    e13c:	21fc      	movs	r1, #252	; 0xfc
    e13e:	0795      	lsls	r5, r2, #30
    e140:	400a      	ands	r2, r1
    e142:	701a      	strb	r2, [r3, #0]
    e144:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e146:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    e148:	9301      	str	r3, [sp, #4]
    e14a:	2300      	movs	r3, #0
    e14c:	64e3      	str	r3, [r4, #76]	; 0x4c
    e14e:	6d21      	ldr	r1, [r4, #80]	; 0x50
    e150:	4b07      	ldr	r3, [pc, #28]	; (e170 <mqtt_clear_conn+0x4c>)
    e152:	4798      	blx	r3
    e154:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e156:	0fed      	lsrs	r5, r5, #31
    e158:	2b00      	cmp	r3, #0
    e15a:	d005      	beq.n	e168 <mqtt_clear_conn+0x44>
    e15c:	2d00      	cmp	r5, #0
    e15e:	d003      	beq.n	e168 <mqtt_clear_conn+0x44>
    e160:	1c20      	adds	r0, r4, #0
    e162:	2105      	movs	r1, #5
    e164:	aa01      	add	r2, sp, #4
    e166:	4798      	blx	r3
    e168:	b007      	add	sp, #28
    e16a:	bd30      	pop	{r4, r5, pc}
    e16c:	000055d9 	.word	0x000055d9
    e170:	00007cb1 	.word	0x00007cb1

0000e174 <mqtt_disconnect>:
    e174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e176:	23e0      	movs	r3, #224	; 0xe0
    e178:	ae01      	add	r6, sp, #4
    e17a:	2700      	movs	r7, #0
    e17c:	1c05      	adds	r5, r0, #0
    e17e:	7033      	strb	r3, [r6, #0]
    e180:	7077      	strb	r7, [r6, #1]
    e182:	42b8      	cmp	r0, r7
    e184:	d036      	beq.n	e1f4 <mqtt_disconnect+0x80>
    e186:	1c04      	adds	r4, r0, #0
    e188:	3443      	adds	r4, #67	; 0x43
    e18a:	7823      	ldrb	r3, [r4, #0]
    e18c:	079a      	lsls	r2, r3, #30
    e18e:	d533      	bpl.n	e1f8 <mqtt_disconnect+0x84>
    e190:	42b9      	cmp	r1, r7
    e192:	d12b      	bne.n	e1ec <mqtt_disconnect+0x78>
    e194:	071a      	lsls	r2, r3, #28
    e196:	d414      	bmi.n	e1c2 <mqtt_disconnect+0x4e>
    e198:	7823      	ldrb	r3, [r4, #0]
    e19a:	2210      	movs	r2, #16
    e19c:	4313      	orrs	r3, r2
    e19e:	2708      	movs	r7, #8
    e1a0:	433b      	orrs	r3, r7
    e1a2:	7023      	strb	r3, [r4, #0]
    e1a4:	2002      	movs	r0, #2
    e1a6:	5628      	ldrsb	r0, [r5, r0]
    e1a8:	1c31      	adds	r1, r6, #0
    e1aa:	2202      	movs	r2, #2
    e1ac:	2300      	movs	r3, #0
    e1ae:	4d15      	ldr	r5, [pc, #84]	; (e204 <mqtt_disconnect+0x90>)
    e1b0:	47a8      	blx	r5
    e1b2:	2800      	cmp	r0, #0
    e1b4:	da14      	bge.n	e1e0 <mqtt_disconnect+0x6c>
    e1b6:	7823      	ldrb	r3, [r4, #0]
    e1b8:	43bb      	bics	r3, r7
    e1ba:	7023      	strb	r3, [r4, #0]
    e1bc:	4b12      	ldr	r3, [pc, #72]	; (e208 <mqtt_disconnect+0x94>)
    e1be:	4798      	blx	r3
    e1c0:	e01e      	b.n	e200 <mqtt_disconnect+0x8c>
    e1c2:	1c03      	adds	r3, r0, #0
    e1c4:	3370      	adds	r3, #112	; 0x70
    e1c6:	781b      	ldrb	r3, [r3, #0]
    e1c8:	2b00      	cmp	r3, #0
    e1ca:	d117      	bne.n	e1fc <mqtt_disconnect+0x88>
    e1cc:	7823      	ldrb	r3, [r4, #0]
    e1ce:	071a      	lsls	r2, r3, #28
    e1d0:	d5e2      	bpl.n	e198 <mqtt_disconnect+0x24>
    e1d2:	4b0e      	ldr	r3, [pc, #56]	; (e20c <mqtt_disconnect+0x98>)
    e1d4:	2000      	movs	r0, #0
    e1d6:	4798      	blx	r3
    e1d8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    e1da:	4b0d      	ldr	r3, [pc, #52]	; (e210 <mqtt_disconnect+0x9c>)
    e1dc:	4798      	blx	r3
    e1de:	e7f5      	b.n	e1cc <mqtt_disconnect+0x58>
    e1e0:	7823      	ldrb	r3, [r4, #0]
    e1e2:	2202      	movs	r2, #2
    e1e4:	4393      	bics	r3, r2
    e1e6:	7023      	strb	r3, [r4, #0]
    e1e8:	2000      	movs	r0, #0
    e1ea:	e009      	b.n	e200 <mqtt_disconnect+0x8c>
    e1ec:	4b09      	ldr	r3, [pc, #36]	; (e214 <mqtt_disconnect+0xa0>)
    e1ee:	4798      	blx	r3
    e1f0:	1c38      	adds	r0, r7, #0
    e1f2:	e005      	b.n	e200 <mqtt_disconnect+0x8c>
    e1f4:	2016      	movs	r0, #22
    e1f6:	e002      	b.n	e1fe <mqtt_disconnect+0x8a>
    e1f8:	2080      	movs	r0, #128	; 0x80
    e1fa:	e000      	b.n	e1fe <mqtt_disconnect+0x8a>
    e1fc:	200b      	movs	r0, #11
    e1fe:	4240      	negs	r0, r0
    e200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e202:	46c0      	nop			; (mov r8, r8)
    e204:	000052f5 	.word	0x000052f5
    e208:	0000d7a5 	.word	0x0000d7a5
    e20c:	00001f41 	.word	0x00001f41
    e210:	00007cdd 	.word	0x00007cdd
    e214:	0000e125 	.word	0x0000e125

0000e218 <_mqtt_recv_handler>:
    e218:	b5f0      	push	{r4, r5, r6, r7, lr}
    e21a:	1c04      	adds	r4, r0, #0
    e21c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    e21e:	230f      	movs	r3, #15
    e220:	7802      	ldrb	r2, [r0, #0]
    e222:	b087      	sub	sp, #28
    e224:	1c15      	adds	r5, r2, #0
    e226:	439d      	bics	r5, r3
    e228:	2d50      	cmp	r5, #80	; 0x50
    e22a:	d100      	bne.n	e22e <_mqtt_recv_handler+0x16>
    e22c:	e098      	b.n	e360 <_mqtt_recv_handler+0x148>
    e22e:	d808      	bhi.n	e242 <_mqtt_recv_handler+0x2a>
    e230:	2d30      	cmp	r5, #48	; 0x30
    e232:	d03f      	beq.n	e2b4 <_mqtt_recv_handler+0x9c>
    e234:	2d40      	cmp	r5, #64	; 0x40
    e236:	d100      	bne.n	e23a <_mqtt_recv_handler+0x22>
    e238:	e0b3      	b.n	e3a2 <_mqtt_recv_handler+0x18a>
    e23a:	2d20      	cmp	r5, #32
    e23c:	d000      	beq.n	e240 <_mqtt_recv_handler+0x28>
    e23e:	e0c3      	b.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e240:	e00e      	b.n	e260 <_mqtt_recv_handler+0x48>
    e242:	2d70      	cmp	r5, #112	; 0x70
    e244:	d100      	bne.n	e248 <_mqtt_recv_handler+0x30>
    e246:	e0ac      	b.n	e3a2 <_mqtt_recv_handler+0x18a>
    e248:	d803      	bhi.n	e252 <_mqtt_recv_handler+0x3a>
    e24a:	2d60      	cmp	r5, #96	; 0x60
    e24c:	d100      	bne.n	e250 <_mqtt_recv_handler+0x38>
    e24e:	e096      	b.n	e37e <_mqtt_recv_handler+0x166>
    e250:	e0ba      	b.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e252:	2d90      	cmp	r5, #144	; 0x90
    e254:	d100      	bne.n	e258 <_mqtt_recv_handler+0x40>
    e256:	e0aa      	b.n	e3ae <_mqtt_recv_handler+0x196>
    e258:	2db0      	cmp	r5, #176	; 0xb0
    e25a:	d100      	bne.n	e25e <_mqtt_recv_handler+0x46>
    e25c:	e0ad      	b.n	e3ba <_mqtt_recv_handler+0x1a2>
    e25e:	e0b3      	b.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e260:	aa01      	add	r2, sp, #4
    e262:	2303      	movs	r3, #3
    e264:	2901      	cmp	r1, #1
    e266:	d900      	bls.n	e26a <_mqtt_recv_handler+0x52>
    e268:	78c3      	ldrb	r3, [r0, #3]
    e26a:	7013      	strb	r3, [r2, #0]
    e26c:	7813      	ldrb	r3, [r2, #0]
    e26e:	2b00      	cmp	r3, #0
    e270:	d00d      	beq.n	e28e <_mqtt_recv_handler+0x76>
    e272:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e274:	2b00      	cmp	r3, #0
    e276:	d002      	beq.n	e27e <_mqtt_recv_handler+0x66>
    e278:	1c20      	adds	r0, r4, #0
    e27a:	2101      	movs	r1, #1
    e27c:	4798      	blx	r3
    e27e:	236f      	movs	r3, #111	; 0x6f
    e280:	425b      	negs	r3, r3
    e282:	64e3      	str	r3, [r4, #76]	; 0x4c
    e284:	1c20      	adds	r0, r4, #0
    e286:	2100      	movs	r1, #0
    e288:	4b50      	ldr	r3, [pc, #320]	; (e3cc <_mqtt_recv_handler+0x1b4>)
    e28a:	4798      	blx	r3
    e28c:	e09c      	b.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e28e:	1c23      	adds	r3, r4, #0
    e290:	3343      	adds	r3, #67	; 0x43
    e292:	7819      	ldrb	r1, [r3, #0]
    e294:	0789      	lsls	r1, r1, #30
    e296:	0fc9      	lsrs	r1, r1, #31
    e298:	d105      	bne.n	e2a6 <_mqtt_recv_handler+0x8e>
    e29a:	781a      	ldrb	r2, [r3, #0]
    e29c:	64e1      	str	r1, [r4, #76]	; 0x4c
    e29e:	2102      	movs	r1, #2
    e2a0:	430a      	orrs	r2, r1
    e2a2:	701a      	strb	r2, [r3, #0]
    e2a4:	e090      	b.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e2a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	d100      	bne.n	e2ae <_mqtt_recv_handler+0x96>
    e2ac:	e08c      	b.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e2ae:	1c20      	adds	r0, r4, #0
    e2b0:	2101      	movs	r1, #1
    e2b2:	e088      	b.n	e3c6 <_mqtt_recv_handler+0x1ae>
    e2b4:	ad01      	add	r5, sp, #4
    e2b6:	0713      	lsls	r3, r2, #28
    e2b8:	7c2a      	ldrb	r2, [r5, #16]
    e2ba:	0fdb      	lsrs	r3, r3, #31
    e2bc:	2604      	movs	r6, #4
    e2be:	009b      	lsls	r3, r3, #2
    e2c0:	43b2      	bics	r2, r6
    e2c2:	431a      	orrs	r2, r3
    e2c4:	742a      	strb	r2, [r5, #16]
    e2c6:	7807      	ldrb	r7, [r0, #0]
    e2c8:	2303      	movs	r3, #3
    e2ca:	b2d2      	uxtb	r2, r2
    e2cc:	087f      	lsrs	r7, r7, #1
    e2ce:	439a      	bics	r2, r3
    e2d0:	401f      	ands	r7, r3
    e2d2:	1c13      	adds	r3, r2, #0
    e2d4:	433b      	orrs	r3, r7
    e2d6:	742b      	strb	r3, [r5, #16]
    e2d8:	1c43      	adds	r3, r0, #1
    e2da:	7818      	ldrb	r0, [r3, #0]
    e2dc:	1c5a      	adds	r2, r3, #1
    e2de:	287f      	cmp	r0, #127	; 0x7f
    e2e0:	d901      	bls.n	e2e6 <_mqtt_recv_handler+0xce>
    e2e2:	1c13      	adds	r3, r2, #0
    e2e4:	e7f9      	b.n	e2da <_mqtt_recv_handler+0xc2>
    e2e6:	7858      	ldrb	r0, [r3, #1]
    e2e8:	789e      	ldrb	r6, [r3, #2]
    e2ea:	0200      	lsls	r0, r0, #8
    e2ec:	4330      	orrs	r0, r6
    e2ee:	3303      	adds	r3, #3
    e2f0:	2600      	movs	r6, #0
    e2f2:	6068      	str	r0, [r5, #4]
    e2f4:	9301      	str	r3, [sp, #4]
    e2f6:	1818      	adds	r0, r3, r0
    e2f8:	42b7      	cmp	r7, r6
    e2fa:	d004      	beq.n	e306 <_mqtt_recv_handler+0xee>
    e2fc:	7806      	ldrb	r6, [r0, #0]
    e2fe:	7843      	ldrb	r3, [r0, #1]
    e300:	0236      	lsls	r6, r6, #8
    e302:	431e      	orrs	r6, r3
    e304:	3002      	adds	r0, #2
    e306:	1851      	adds	r1, r2, r1
    e308:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e30a:	60a8      	str	r0, [r5, #8]
    e30c:	1a08      	subs	r0, r1, r0
    e30e:	60e8      	str	r0, [r5, #12]
    e310:	2b00      	cmp	r3, #0
    e312:	d003      	beq.n	e31c <_mqtt_recv_handler+0x104>
    e314:	1c20      	adds	r0, r4, #0
    e316:	2106      	movs	r1, #6
    e318:	1c2a      	adds	r2, r5, #0
    e31a:	4798      	blx	r3
    e31c:	7c2b      	ldrb	r3, [r5, #16]
    e31e:	079b      	lsls	r3, r3, #30
    e320:	0f9b      	lsrs	r3, r3, #30
    e322:	2b01      	cmp	r3, #1
    e324:	d10b      	bne.n	e33e <_mqtt_recv_handler+0x126>
    e326:	b2b6      	uxth	r6, r6
    e328:	1c20      	adds	r0, r4, #0
    e32a:	2140      	movs	r1, #64	; 0x40
    e32c:	1c32      	adds	r2, r6, #0
    e32e:	4b28      	ldr	r3, [pc, #160]	; (e3d0 <_mqtt_recv_handler+0x1b8>)
    e330:	4798      	blx	r3
    e332:	2800      	cmp	r0, #0
    e334:	d048      	beq.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e336:	1c23      	adds	r3, r4, #0
    e338:	3348      	adds	r3, #72	; 0x48
    e33a:	2240      	movs	r2, #64	; 0x40
    e33c:	e00c      	b.n	e358 <_mqtt_recv_handler+0x140>
    e33e:	2b02      	cmp	r3, #2
    e340:	d142      	bne.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e342:	b2b6      	uxth	r6, r6
    e344:	1c20      	adds	r0, r4, #0
    e346:	2150      	movs	r1, #80	; 0x50
    e348:	1c32      	adds	r2, r6, #0
    e34a:	4b21      	ldr	r3, [pc, #132]	; (e3d0 <_mqtt_recv_handler+0x1b8>)
    e34c:	4798      	blx	r3
    e34e:	2800      	cmp	r0, #0
    e350:	d03a      	beq.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e352:	1c23      	adds	r3, r4, #0
    e354:	3348      	adds	r3, #72	; 0x48
    e356:	2250      	movs	r2, #80	; 0x50
    e358:	344a      	adds	r4, #74	; 0x4a
    e35a:	701a      	strb	r2, [r3, #0]
    e35c:	8026      	strh	r6, [r4, #0]
    e35e:	e033      	b.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e360:	7885      	ldrb	r5, [r0, #2]
    e362:	78c3      	ldrb	r3, [r0, #3]
    e364:	022d      	lsls	r5, r5, #8
    e366:	431d      	orrs	r5, r3
    e368:	1c20      	adds	r0, r4, #0
    e36a:	2162      	movs	r1, #98	; 0x62
    e36c:	1c2a      	adds	r2, r5, #0
    e36e:	4b18      	ldr	r3, [pc, #96]	; (e3d0 <_mqtt_recv_handler+0x1b8>)
    e370:	4798      	blx	r3
    e372:	2800      	cmp	r0, #0
    e374:	d028      	beq.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e376:	1c23      	adds	r3, r4, #0
    e378:	3348      	adds	r3, #72	; 0x48
    e37a:	2260      	movs	r2, #96	; 0x60
    e37c:	e00d      	b.n	e39a <_mqtt_recv_handler+0x182>
    e37e:	7885      	ldrb	r5, [r0, #2]
    e380:	78c3      	ldrb	r3, [r0, #3]
    e382:	022d      	lsls	r5, r5, #8
    e384:	431d      	orrs	r5, r3
    e386:	1c20      	adds	r0, r4, #0
    e388:	2170      	movs	r1, #112	; 0x70
    e38a:	1c2a      	adds	r2, r5, #0
    e38c:	4b10      	ldr	r3, [pc, #64]	; (e3d0 <_mqtt_recv_handler+0x1b8>)
    e38e:	4798      	blx	r3
    e390:	2800      	cmp	r0, #0
    e392:	d019      	beq.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e394:	1c23      	adds	r3, r4, #0
    e396:	3348      	adds	r3, #72	; 0x48
    e398:	2270      	movs	r2, #112	; 0x70
    e39a:	344a      	adds	r4, #74	; 0x4a
    e39c:	701a      	strb	r2, [r3, #0]
    e39e:	8025      	strh	r5, [r4, #0]
    e3a0:	e012      	b.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e3a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d00f      	beq.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e3a8:	1c20      	adds	r0, r4, #0
    e3aa:	2102      	movs	r1, #2
    e3ac:	e00a      	b.n	e3c4 <_mqtt_recv_handler+0x1ac>
    e3ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e3b0:	2b00      	cmp	r3, #0
    e3b2:	d009      	beq.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e3b4:	1c20      	adds	r0, r4, #0
    e3b6:	2103      	movs	r1, #3
    e3b8:	e004      	b.n	e3c4 <_mqtt_recv_handler+0x1ac>
    e3ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e3bc:	2b00      	cmp	r3, #0
    e3be:	d003      	beq.n	e3c8 <_mqtt_recv_handler+0x1b0>
    e3c0:	1c20      	adds	r0, r4, #0
    e3c2:	2104      	movs	r1, #4
    e3c4:	aa01      	add	r2, sp, #4
    e3c6:	4798      	blx	r3
    e3c8:	b007      	add	sp, #28
    e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3cc:	0000e175 	.word	0x0000e175
    e3d0:	0000e0c1 	.word	0x0000e0c1

0000e3d4 <mqtt_recv_packet>:
    e3d4:	b538      	push	{r3, r4, r5, lr}
    e3d6:	1e04      	subs	r4, r0, #0
    e3d8:	d017      	beq.n	e40a <mqtt_recv_packet+0x36>
    e3da:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e3dc:	6e83      	ldr	r3, [r0, #104]	; 0x68
    e3de:	429a      	cmp	r2, r3
    e3e0:	d906      	bls.n	e3f0 <mqtt_recv_packet+0x1c>
    e3e2:	238b      	movs	r3, #139	; 0x8b
    e3e4:	425b      	negs	r3, r3
    e3e6:	64c3      	str	r3, [r0, #76]	; 0x4c
    e3e8:	2100      	movs	r1, #0
    e3ea:	4b08      	ldr	r3, [pc, #32]	; (e40c <mqtt_recv_packet+0x38>)
    e3ec:	4798      	blx	r3
    e3ee:	e00c      	b.n	e40a <mqtt_recv_packet+0x36>
    e3f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e3f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e3f4:	2002      	movs	r0, #2
    e3f6:	1899      	adds	r1, r3, r2
    e3f8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e3fa:	5620      	ldrsb	r0, [r4, r0]
    e3fc:	1a9a      	subs	r2, r3, r2
    e3fe:	b292      	uxth	r2, r2
    e400:	2300      	movs	r3, #0
    e402:	4d03      	ldr	r5, [pc, #12]	; (e410 <mqtt_recv_packet+0x3c>)
    e404:	47a8      	blx	r5
    e406:	2800      	cmp	r0, #0
    e408:	d1f2      	bne.n	e3f0 <mqtt_recv_packet+0x1c>
    e40a:	bd38      	pop	{r3, r4, r5, pc}
    e40c:	0000e175 	.word	0x0000e175
    e410:	00005459 	.word	0x00005459

0000e414 <mqtt_recved_packet>:
    e414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e416:	1e04      	subs	r4, r0, #0
    e418:	d042      	beq.n	e4a0 <mqtt_recved_packet+0x8c>
    e41a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e41c:	6e67      	ldr	r7, [r4, #100]	; 0x64
    e41e:	18ca      	adds	r2, r1, r3
    e420:	2301      	movs	r3, #1
    e422:	9701      	str	r7, [sp, #4]
    e424:	6462      	str	r2, [r4, #68]	; 0x44
    e426:	2600      	movs	r6, #0
    e428:	1c1d      	adds	r5, r3, #0
    e42a:	42a9      	cmp	r1, r5
    e42c:	dc03      	bgt.n	e436 <mqtt_recved_packet+0x22>
    e42e:	1c20      	adds	r0, r4, #0
    e430:	4b1c      	ldr	r3, [pc, #112]	; (e4a4 <mqtt_recved_packet+0x90>)
    e432:	4798      	blx	r3
    e434:	e034      	b.n	e4a0 <mqtt_recved_packet+0x8c>
    e436:	9f01      	ldr	r7, [sp, #4]
    e438:	5d78      	ldrb	r0, [r7, r5]
    e43a:	01df      	lsls	r7, r3, #7
    e43c:	46bc      	mov	ip, r7
    e43e:	2d03      	cmp	r5, #3
    e440:	d101      	bne.n	e446 <mqtt_recved_packet+0x32>
    e442:	234d      	movs	r3, #77	; 0x4d
    e444:	e00e      	b.n	e464 <mqtt_recved_packet+0x50>
    e446:	277f      	movs	r7, #127	; 0x7f
    e448:	4007      	ands	r7, r0
    e44a:	437b      	muls	r3, r7
    e44c:	b240      	sxtb	r0, r0
    e44e:	3501      	adds	r5, #1
    e450:	18f6      	adds	r6, r6, r3
    e452:	2800      	cmp	r0, #0
    e454:	da01      	bge.n	e45a <mqtt_recved_packet+0x46>
    e456:	4663      	mov	r3, ip
    e458:	e7e7      	b.n	e42a <mqtt_recved_packet+0x16>
    e45a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e45c:	19af      	adds	r7, r5, r6
    e45e:	429f      	cmp	r7, r3
    e460:	d907      	bls.n	e472 <mqtt_recved_packet+0x5e>
    e462:	238b      	movs	r3, #139	; 0x8b
    e464:	425b      	negs	r3, r3
    e466:	64e3      	str	r3, [r4, #76]	; 0x4c
    e468:	1c20      	adds	r0, r4, #0
    e46a:	2100      	movs	r1, #0
    e46c:	4b0e      	ldr	r3, [pc, #56]	; (e4a8 <mqtt_recved_packet+0x94>)
    e46e:	4798      	blx	r3
    e470:	e016      	b.n	e4a0 <mqtt_recved_packet+0x8c>
    e472:	42ba      	cmp	r2, r7
    e474:	d314      	bcc.n	e4a0 <mqtt_recved_packet+0x8c>
    e476:	4b0d      	ldr	r3, [pc, #52]	; (e4ac <mqtt_recved_packet+0x98>)
    e478:	1c20      	adds	r0, r4, #0
    e47a:	1c31      	adds	r1, r6, #0
    e47c:	4798      	blx	r3
    e47e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e480:	42bb      	cmp	r3, r7
    e482:	d102      	bne.n	e48a <mqtt_recved_packet+0x76>
    e484:	2300      	movs	r3, #0
    e486:	6463      	str	r3, [r4, #68]	; 0x44
    e488:	e00a      	b.n	e4a0 <mqtt_recved_packet+0x8c>
    e48a:	1b9e      	subs	r6, r3, r6
    e48c:	9b01      	ldr	r3, [sp, #4]
    e48e:	1b75      	subs	r5, r6, r5
    e490:	19d9      	adds	r1, r3, r7
    e492:	1c18      	adds	r0, r3, #0
    e494:	1c2a      	adds	r2, r5, #0
    e496:	4b06      	ldr	r3, [pc, #24]	; (e4b0 <mqtt_recved_packet+0x9c>)
    e498:	4798      	blx	r3
    e49a:	6465      	str	r5, [r4, #68]	; 0x44
    e49c:	2100      	movs	r1, #0
    e49e:	e7bc      	b.n	e41a <mqtt_recved_packet+0x6>
    e4a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e4a2:	46c0      	nop			; (mov r8, r8)
    e4a4:	0000e3d5 	.word	0x0000e3d5
    e4a8:	0000e175 	.word	0x0000e175
    e4ac:	0000e219 	.word	0x0000e219
    e4b0:	0000e647 	.word	0x0000e647

0000e4b4 <mqtt_socket_event_handler>:
    e4b4:	b570      	push	{r4, r5, r6, lr}
    e4b6:	4d37      	ldr	r5, [pc, #220]	; (e594 <mqtt_socket_event_handler+0xe0>)
    e4b8:	0086      	lsls	r6, r0, #2
    e4ba:	5974      	ldr	r4, [r6, r5]
    e4bc:	b086      	sub	sp, #24
    e4be:	2c00      	cmp	r4, #0
    e4c0:	d066      	beq.n	e590 <mqtt_socket_event_handler+0xdc>
    e4c2:	2906      	cmp	r1, #6
    e4c4:	d02b      	beq.n	e51e <mqtt_socket_event_handler+0x6a>
    e4c6:	2907      	cmp	r1, #7
    e4c8:	d039      	beq.n	e53e <mqtt_socket_event_handler+0x8a>
    e4ca:	2905      	cmp	r1, #5
    e4cc:	d160      	bne.n	e590 <mqtt_socket_event_handler+0xdc>
    e4ce:	2001      	movs	r0, #1
    e4d0:	5610      	ldrsb	r0, [r2, r0]
    e4d2:	4b31      	ldr	r3, [pc, #196]	; (e598 <mqtt_socket_event_handler+0xe4>)
    e4d4:	4798      	blx	r3
    e4d6:	9001      	str	r0, [sp, #4]
    e4d8:	2800      	cmp	r0, #0
    e4da:	da06      	bge.n	e4ea <mqtt_socket_event_handler+0x36>
    e4dc:	2002      	movs	r0, #2
    e4de:	4b2f      	ldr	r3, [pc, #188]	; (e59c <mqtt_socket_event_handler+0xe8>)
    e4e0:	5620      	ldrsb	r0, [r4, r0]
    e4e2:	4798      	blx	r3
    e4e4:	2300      	movs	r3, #0
    e4e6:	5173      	str	r3, [r6, r5]
    e4e8:	e011      	b.n	e50e <mqtt_socket_event_handler+0x5a>
    e4ea:	1c23      	adds	r3, r4, #0
    e4ec:	3343      	adds	r3, #67	; 0x43
    e4ee:	781a      	ldrb	r2, [r3, #0]
    e4f0:	2101      	movs	r1, #1
    e4f2:	430a      	orrs	r2, r1
    e4f4:	701a      	strb	r2, [r3, #0]
    e4f6:	331d      	adds	r3, #29
    e4f8:	881b      	ldrh	r3, [r3, #0]
    e4fa:	2b00      	cmp	r3, #0
    e4fc:	d004      	beq.n	e508 <mqtt_socket_event_handler+0x54>
    e4fe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    e500:	6d21      	ldr	r1, [r4, #80]	; 0x50
    e502:	2200      	movs	r2, #0
    e504:	4b26      	ldr	r3, [pc, #152]	; (e5a0 <mqtt_socket_event_handler+0xec>)
    e506:	4798      	blx	r3
    e508:	1c20      	adds	r0, r4, #0
    e50a:	4b26      	ldr	r3, [pc, #152]	; (e5a4 <mqtt_socket_event_handler+0xf0>)
    e50c:	4798      	blx	r3
    e50e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e510:	2b00      	cmp	r3, #0
    e512:	d03d      	beq.n	e590 <mqtt_socket_event_handler+0xdc>
    e514:	1c20      	adds	r0, r4, #0
    e516:	2100      	movs	r1, #0
    e518:	aa01      	add	r2, sp, #4
    e51a:	4798      	blx	r3
    e51c:	e038      	b.n	e590 <mqtt_socket_event_handler+0xdc>
    e51e:	2304      	movs	r3, #4
    e520:	5ed1      	ldrsh	r1, [r2, r3]
    e522:	2900      	cmp	r1, #0
    e524:	dd03      	ble.n	e52e <mqtt_socket_event_handler+0x7a>
    e526:	1c20      	adds	r0, r4, #0
    e528:	4b1f      	ldr	r3, [pc, #124]	; (e5a8 <mqtt_socket_event_handler+0xf4>)
    e52a:	4798      	blx	r3
    e52c:	e003      	b.n	e536 <mqtt_socket_event_handler+0x82>
    e52e:	1c0b      	adds	r3, r1, #0
    e530:	1c08      	adds	r0, r1, #0
    e532:	330d      	adds	r3, #13
    e534:	d11a      	bne.n	e56c <mqtt_socket_event_handler+0xb8>
    e536:	4b1b      	ldr	r3, [pc, #108]	; (e5a4 <mqtt_socket_event_handler+0xf0>)
    e538:	1c20      	adds	r0, r4, #0
    e53a:	4798      	blx	r3
    e53c:	e028      	b.n	e590 <mqtt_socket_event_handler+0xdc>
    e53e:	1c23      	adds	r3, r4, #0
    e540:	3343      	adds	r3, #67	; 0x43
    e542:	8810      	ldrh	r0, [r2, #0]
    e544:	781a      	ldrb	r2, [r3, #0]
    e546:	0751      	lsls	r1, r2, #29
    e548:	d402      	bmi.n	e550 <mqtt_socket_event_handler+0x9c>
    e54a:	2108      	movs	r1, #8
    e54c:	438a      	bics	r2, r1
    e54e:	701a      	strb	r2, [r3, #0]
    e550:	781a      	ldrb	r2, [r3, #0]
    e552:	2104      	movs	r1, #4
    e554:	438a      	bics	r2, r1
    e556:	701a      	strb	r2, [r3, #0]
    e558:	06d3      	lsls	r3, r2, #27
    e55a:	0fde      	lsrs	r6, r3, #31
    e55c:	b200      	sxth	r0, r0
    e55e:	2b00      	cmp	r3, #0
    e560:	db02      	blt.n	e568 <mqtt_socket_event_handler+0xb4>
    e562:	2800      	cmp	r0, #0
    e564:	da08      	bge.n	e578 <mqtt_socket_event_handler+0xc4>
    e566:	e001      	b.n	e56c <mqtt_socket_event_handler+0xb8>
    e568:	2800      	cmp	r0, #0
    e56a:	da02      	bge.n	e572 <mqtt_socket_event_handler+0xbe>
    e56c:	4b0a      	ldr	r3, [pc, #40]	; (e598 <mqtt_socket_event_handler+0xe4>)
    e56e:	4798      	blx	r3
    e570:	64e0      	str	r0, [r4, #76]	; 0x4c
    e572:	1c20      	adds	r0, r4, #0
    e574:	4b0d      	ldr	r3, [pc, #52]	; (e5ac <mqtt_socket_event_handler+0xf8>)
    e576:	e7e0      	b.n	e53a <mqtt_socket_event_handler+0x86>
    e578:	1c25      	adds	r5, r4, #0
    e57a:	3548      	adds	r5, #72	; 0x48
    e57c:	7829      	ldrb	r1, [r5, #0]
    e57e:	2900      	cmp	r1, #0
    e580:	d006      	beq.n	e590 <mqtt_socket_event_handler+0xdc>
    e582:	1c23      	adds	r3, r4, #0
    e584:	334a      	adds	r3, #74	; 0x4a
    e586:	881a      	ldrh	r2, [r3, #0]
    e588:	1c20      	adds	r0, r4, #0
    e58a:	4b09      	ldr	r3, [pc, #36]	; (e5b0 <mqtt_socket_event_handler+0xfc>)
    e58c:	4798      	blx	r3
    e58e:	702e      	strb	r6, [r5, #0]
    e590:	b006      	add	sp, #24
    e592:	bd70      	pop	{r4, r5, r6, pc}
    e594:	20000448 	.word	0x20000448
    e598:	0000d7a5 	.word	0x0000d7a5
    e59c:	000055d9 	.word	0x000055d9
    e5a0:	00007c61 	.word	0x00007c61
    e5a4:	0000e3d5 	.word	0x0000e3d5
    e5a8:	0000e415 	.word	0x0000e415
    e5ac:	0000e125 	.word	0x0000e125
    e5b0:	0000e0c1 	.word	0x0000e0c1

0000e5b4 <__libc_init_array>:
    e5b4:	b570      	push	{r4, r5, r6, lr}
    e5b6:	2600      	movs	r6, #0
    e5b8:	4d0c      	ldr	r5, [pc, #48]	; (e5ec <__libc_init_array+0x38>)
    e5ba:	4c0d      	ldr	r4, [pc, #52]	; (e5f0 <__libc_init_array+0x3c>)
    e5bc:	1b64      	subs	r4, r4, r5
    e5be:	10a4      	asrs	r4, r4, #2
    e5c0:	42a6      	cmp	r6, r4
    e5c2:	d109      	bne.n	e5d8 <__libc_init_array+0x24>
    e5c4:	2600      	movs	r6, #0
    e5c6:	f006 ff6f 	bl	154a8 <_init>
    e5ca:	4d0a      	ldr	r5, [pc, #40]	; (e5f4 <__libc_init_array+0x40>)
    e5cc:	4c0a      	ldr	r4, [pc, #40]	; (e5f8 <__libc_init_array+0x44>)
    e5ce:	1b64      	subs	r4, r4, r5
    e5d0:	10a4      	asrs	r4, r4, #2
    e5d2:	42a6      	cmp	r6, r4
    e5d4:	d105      	bne.n	e5e2 <__libc_init_array+0x2e>
    e5d6:	bd70      	pop	{r4, r5, r6, pc}
    e5d8:	00b3      	lsls	r3, r6, #2
    e5da:	58eb      	ldr	r3, [r5, r3]
    e5dc:	4798      	blx	r3
    e5de:	3601      	adds	r6, #1
    e5e0:	e7ee      	b.n	e5c0 <__libc_init_array+0xc>
    e5e2:	00b3      	lsls	r3, r6, #2
    e5e4:	58eb      	ldr	r3, [r5, r3]
    e5e6:	4798      	blx	r3
    e5e8:	3601      	adds	r6, #1
    e5ea:	e7f2      	b.n	e5d2 <__libc_init_array+0x1e>
    e5ec:	000154b4 	.word	0x000154b4
    e5f0:	000154b4 	.word	0x000154b4
    e5f4:	000154b4 	.word	0x000154b4
    e5f8:	000154b8 	.word	0x000154b8

0000e5fc <malloc>:
    e5fc:	b510      	push	{r4, lr}
    e5fe:	4b03      	ldr	r3, [pc, #12]	; (e60c <malloc+0x10>)
    e600:	0001      	movs	r1, r0
    e602:	6818      	ldr	r0, [r3, #0]
    e604:	f000 f884 	bl	e710 <_malloc_r>
    e608:	bd10      	pop	{r4, pc}
    e60a:	46c0      	nop			; (mov r8, r8)
    e60c:	20000080 	.word	0x20000080

0000e610 <__ascii_mbtowc>:
    e610:	b082      	sub	sp, #8
    e612:	2900      	cmp	r1, #0
    e614:	d100      	bne.n	e618 <__ascii_mbtowc+0x8>
    e616:	a901      	add	r1, sp, #4
    e618:	1e10      	subs	r0, r2, #0
    e61a:	d006      	beq.n	e62a <__ascii_mbtowc+0x1a>
    e61c:	2b00      	cmp	r3, #0
    e61e:	d006      	beq.n	e62e <__ascii_mbtowc+0x1e>
    e620:	7813      	ldrb	r3, [r2, #0]
    e622:	600b      	str	r3, [r1, #0]
    e624:	7810      	ldrb	r0, [r2, #0]
    e626:	1e43      	subs	r3, r0, #1
    e628:	4198      	sbcs	r0, r3
    e62a:	b002      	add	sp, #8
    e62c:	4770      	bx	lr
    e62e:	2002      	movs	r0, #2
    e630:	4240      	negs	r0, r0
    e632:	e7fa      	b.n	e62a <__ascii_mbtowc+0x1a>

0000e634 <memcpy>:
    e634:	2300      	movs	r3, #0
    e636:	b510      	push	{r4, lr}
    e638:	429a      	cmp	r2, r3
    e63a:	d100      	bne.n	e63e <memcpy+0xa>
    e63c:	bd10      	pop	{r4, pc}
    e63e:	5ccc      	ldrb	r4, [r1, r3]
    e640:	54c4      	strb	r4, [r0, r3]
    e642:	3301      	adds	r3, #1
    e644:	e7f8      	b.n	e638 <memcpy+0x4>

0000e646 <memmove>:
    e646:	b510      	push	{r4, lr}
    e648:	4288      	cmp	r0, r1
    e64a:	d902      	bls.n	e652 <memmove+0xc>
    e64c:	188b      	adds	r3, r1, r2
    e64e:	4298      	cmp	r0, r3
    e650:	d308      	bcc.n	e664 <memmove+0x1e>
    e652:	2300      	movs	r3, #0
    e654:	429a      	cmp	r2, r3
    e656:	d007      	beq.n	e668 <memmove+0x22>
    e658:	5ccc      	ldrb	r4, [r1, r3]
    e65a:	54c4      	strb	r4, [r0, r3]
    e65c:	3301      	adds	r3, #1
    e65e:	e7f9      	b.n	e654 <memmove+0xe>
    e660:	5c8b      	ldrb	r3, [r1, r2]
    e662:	5483      	strb	r3, [r0, r2]
    e664:	3a01      	subs	r2, #1
    e666:	d2fb      	bcs.n	e660 <memmove+0x1a>
    e668:	bd10      	pop	{r4, pc}

0000e66a <memset>:
    e66a:	0003      	movs	r3, r0
    e66c:	1882      	adds	r2, r0, r2
    e66e:	4293      	cmp	r3, r2
    e670:	d100      	bne.n	e674 <memset+0xa>
    e672:	4770      	bx	lr
    e674:	7019      	strb	r1, [r3, #0]
    e676:	3301      	adds	r3, #1
    e678:	e7f9      	b.n	e66e <memset+0x4>
	...

0000e67c <_free_r>:
    e67c:	b570      	push	{r4, r5, r6, lr}
    e67e:	0005      	movs	r5, r0
    e680:	2900      	cmp	r1, #0
    e682:	d010      	beq.n	e6a6 <_free_r+0x2a>
    e684:	1f0c      	subs	r4, r1, #4
    e686:	6823      	ldr	r3, [r4, #0]
    e688:	2b00      	cmp	r3, #0
    e68a:	da00      	bge.n	e68e <_free_r+0x12>
    e68c:	18e4      	adds	r4, r4, r3
    e68e:	0028      	movs	r0, r5
    e690:	f002 f80d 	bl	106ae <__malloc_lock>
    e694:	4a1d      	ldr	r2, [pc, #116]	; (e70c <_free_r+0x90>)
    e696:	6813      	ldr	r3, [r2, #0]
    e698:	2b00      	cmp	r3, #0
    e69a:	d105      	bne.n	e6a8 <_free_r+0x2c>
    e69c:	6063      	str	r3, [r4, #4]
    e69e:	6014      	str	r4, [r2, #0]
    e6a0:	0028      	movs	r0, r5
    e6a2:	f002 f805 	bl	106b0 <__malloc_unlock>
    e6a6:	bd70      	pop	{r4, r5, r6, pc}
    e6a8:	42a3      	cmp	r3, r4
    e6aa:	d909      	bls.n	e6c0 <_free_r+0x44>
    e6ac:	6821      	ldr	r1, [r4, #0]
    e6ae:	1860      	adds	r0, r4, r1
    e6b0:	4283      	cmp	r3, r0
    e6b2:	d1f3      	bne.n	e69c <_free_r+0x20>
    e6b4:	6818      	ldr	r0, [r3, #0]
    e6b6:	685b      	ldr	r3, [r3, #4]
    e6b8:	1841      	adds	r1, r0, r1
    e6ba:	6021      	str	r1, [r4, #0]
    e6bc:	e7ee      	b.n	e69c <_free_r+0x20>
    e6be:	0013      	movs	r3, r2
    e6c0:	685a      	ldr	r2, [r3, #4]
    e6c2:	2a00      	cmp	r2, #0
    e6c4:	d001      	beq.n	e6ca <_free_r+0x4e>
    e6c6:	42a2      	cmp	r2, r4
    e6c8:	d9f9      	bls.n	e6be <_free_r+0x42>
    e6ca:	6819      	ldr	r1, [r3, #0]
    e6cc:	1858      	adds	r0, r3, r1
    e6ce:	42a0      	cmp	r0, r4
    e6d0:	d10b      	bne.n	e6ea <_free_r+0x6e>
    e6d2:	6820      	ldr	r0, [r4, #0]
    e6d4:	1809      	adds	r1, r1, r0
    e6d6:	1858      	adds	r0, r3, r1
    e6d8:	6019      	str	r1, [r3, #0]
    e6da:	4282      	cmp	r2, r0
    e6dc:	d1e0      	bne.n	e6a0 <_free_r+0x24>
    e6de:	6810      	ldr	r0, [r2, #0]
    e6e0:	6852      	ldr	r2, [r2, #4]
    e6e2:	1841      	adds	r1, r0, r1
    e6e4:	6019      	str	r1, [r3, #0]
    e6e6:	605a      	str	r2, [r3, #4]
    e6e8:	e7da      	b.n	e6a0 <_free_r+0x24>
    e6ea:	42a0      	cmp	r0, r4
    e6ec:	d902      	bls.n	e6f4 <_free_r+0x78>
    e6ee:	230c      	movs	r3, #12
    e6f0:	602b      	str	r3, [r5, #0]
    e6f2:	e7d5      	b.n	e6a0 <_free_r+0x24>
    e6f4:	6821      	ldr	r1, [r4, #0]
    e6f6:	1860      	adds	r0, r4, r1
    e6f8:	4282      	cmp	r2, r0
    e6fa:	d103      	bne.n	e704 <_free_r+0x88>
    e6fc:	6810      	ldr	r0, [r2, #0]
    e6fe:	6852      	ldr	r2, [r2, #4]
    e700:	1841      	adds	r1, r0, r1
    e702:	6021      	str	r1, [r4, #0]
    e704:	6062      	str	r2, [r4, #4]
    e706:	605c      	str	r4, [r3, #4]
    e708:	e7ca      	b.n	e6a0 <_free_r+0x24>
    e70a:	46c0      	nop			; (mov r8, r8)
    e70c:	20000464 	.word	0x20000464

0000e710 <_malloc_r>:
    e710:	2303      	movs	r3, #3
    e712:	b570      	push	{r4, r5, r6, lr}
    e714:	1ccd      	adds	r5, r1, #3
    e716:	439d      	bics	r5, r3
    e718:	3508      	adds	r5, #8
    e71a:	0006      	movs	r6, r0
    e71c:	2d0c      	cmp	r5, #12
    e71e:	d21e      	bcs.n	e75e <_malloc_r+0x4e>
    e720:	250c      	movs	r5, #12
    e722:	42a9      	cmp	r1, r5
    e724:	d81d      	bhi.n	e762 <_malloc_r+0x52>
    e726:	0030      	movs	r0, r6
    e728:	f001 ffc1 	bl	106ae <__malloc_lock>
    e72c:	4a25      	ldr	r2, [pc, #148]	; (e7c4 <_malloc_r+0xb4>)
    e72e:	6814      	ldr	r4, [r2, #0]
    e730:	0021      	movs	r1, r4
    e732:	2900      	cmp	r1, #0
    e734:	d119      	bne.n	e76a <_malloc_r+0x5a>
    e736:	4c24      	ldr	r4, [pc, #144]	; (e7c8 <_malloc_r+0xb8>)
    e738:	6823      	ldr	r3, [r4, #0]
    e73a:	2b00      	cmp	r3, #0
    e73c:	d103      	bne.n	e746 <_malloc_r+0x36>
    e73e:	0030      	movs	r0, r6
    e740:	f000 fd4c 	bl	f1dc <_sbrk_r>
    e744:	6020      	str	r0, [r4, #0]
    e746:	0029      	movs	r1, r5
    e748:	0030      	movs	r0, r6
    e74a:	f000 fd47 	bl	f1dc <_sbrk_r>
    e74e:	1c43      	adds	r3, r0, #1
    e750:	d12c      	bne.n	e7ac <_malloc_r+0x9c>
    e752:	230c      	movs	r3, #12
    e754:	0030      	movs	r0, r6
    e756:	6033      	str	r3, [r6, #0]
    e758:	f001 ffaa 	bl	106b0 <__malloc_unlock>
    e75c:	e003      	b.n	e766 <_malloc_r+0x56>
    e75e:	2d00      	cmp	r5, #0
    e760:	dadf      	bge.n	e722 <_malloc_r+0x12>
    e762:	230c      	movs	r3, #12
    e764:	6033      	str	r3, [r6, #0]
    e766:	2000      	movs	r0, #0
    e768:	bd70      	pop	{r4, r5, r6, pc}
    e76a:	680b      	ldr	r3, [r1, #0]
    e76c:	1b5b      	subs	r3, r3, r5
    e76e:	d41a      	bmi.n	e7a6 <_malloc_r+0x96>
    e770:	2b0b      	cmp	r3, #11
    e772:	d903      	bls.n	e77c <_malloc_r+0x6c>
    e774:	600b      	str	r3, [r1, #0]
    e776:	18cc      	adds	r4, r1, r3
    e778:	6025      	str	r5, [r4, #0]
    e77a:	e003      	b.n	e784 <_malloc_r+0x74>
    e77c:	428c      	cmp	r4, r1
    e77e:	d10e      	bne.n	e79e <_malloc_r+0x8e>
    e780:	6863      	ldr	r3, [r4, #4]
    e782:	6013      	str	r3, [r2, #0]
    e784:	0030      	movs	r0, r6
    e786:	f001 ff93 	bl	106b0 <__malloc_unlock>
    e78a:	0020      	movs	r0, r4
    e78c:	2207      	movs	r2, #7
    e78e:	300b      	adds	r0, #11
    e790:	1d23      	adds	r3, r4, #4
    e792:	4390      	bics	r0, r2
    e794:	1ac3      	subs	r3, r0, r3
    e796:	d0e7      	beq.n	e768 <_malloc_r+0x58>
    e798:	425a      	negs	r2, r3
    e79a:	50e2      	str	r2, [r4, r3]
    e79c:	e7e4      	b.n	e768 <_malloc_r+0x58>
    e79e:	684b      	ldr	r3, [r1, #4]
    e7a0:	6063      	str	r3, [r4, #4]
    e7a2:	000c      	movs	r4, r1
    e7a4:	e7ee      	b.n	e784 <_malloc_r+0x74>
    e7a6:	000c      	movs	r4, r1
    e7a8:	6849      	ldr	r1, [r1, #4]
    e7aa:	e7c2      	b.n	e732 <_malloc_r+0x22>
    e7ac:	2303      	movs	r3, #3
    e7ae:	1cc4      	adds	r4, r0, #3
    e7b0:	439c      	bics	r4, r3
    e7b2:	42a0      	cmp	r0, r4
    e7b4:	d0e0      	beq.n	e778 <_malloc_r+0x68>
    e7b6:	1a21      	subs	r1, r4, r0
    e7b8:	0030      	movs	r0, r6
    e7ba:	f000 fd0f 	bl	f1dc <_sbrk_r>
    e7be:	1c43      	adds	r3, r0, #1
    e7c0:	d1da      	bne.n	e778 <_malloc_r+0x68>
    e7c2:	e7c6      	b.n	e752 <_malloc_r+0x42>
    e7c4:	20000464 	.word	0x20000464
    e7c8:	20000468 	.word	0x20000468

0000e7cc <__cvt>:
    e7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7ce:	b08b      	sub	sp, #44	; 0x2c
    e7d0:	0014      	movs	r4, r2
    e7d2:	1e1d      	subs	r5, r3, #0
    e7d4:	9912      	ldr	r1, [sp, #72]	; 0x48
    e7d6:	da53      	bge.n	e880 <__cvt+0xb4>
    e7d8:	2480      	movs	r4, #128	; 0x80
    e7da:	0624      	lsls	r4, r4, #24
    e7dc:	191b      	adds	r3, r3, r4
    e7de:	001d      	movs	r5, r3
    e7e0:	0014      	movs	r4, r2
    e7e2:	232d      	movs	r3, #45	; 0x2d
    e7e4:	700b      	strb	r3, [r1, #0]
    e7e6:	2320      	movs	r3, #32
    e7e8:	9e14      	ldr	r6, [sp, #80]	; 0x50
    e7ea:	2203      	movs	r2, #3
    e7ec:	439e      	bics	r6, r3
    e7ee:	2e46      	cmp	r6, #70	; 0x46
    e7f0:	d007      	beq.n	e802 <__cvt+0x36>
    e7f2:	0033      	movs	r3, r6
    e7f4:	3b45      	subs	r3, #69	; 0x45
    e7f6:	4259      	negs	r1, r3
    e7f8:	414b      	adcs	r3, r1
    e7fa:	9910      	ldr	r1, [sp, #64]	; 0x40
    e7fc:	3a01      	subs	r2, #1
    e7fe:	18cb      	adds	r3, r1, r3
    e800:	9310      	str	r3, [sp, #64]	; 0x40
    e802:	ab09      	add	r3, sp, #36	; 0x24
    e804:	9304      	str	r3, [sp, #16]
    e806:	ab08      	add	r3, sp, #32
    e808:	9303      	str	r3, [sp, #12]
    e80a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e80c:	9200      	str	r2, [sp, #0]
    e80e:	9302      	str	r3, [sp, #8]
    e810:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e812:	0022      	movs	r2, r4
    e814:	9301      	str	r3, [sp, #4]
    e816:	002b      	movs	r3, r5
    e818:	f000 ff50 	bl	f6bc <_dtoa_r>
    e81c:	0007      	movs	r7, r0
    e81e:	2e47      	cmp	r6, #71	; 0x47
    e820:	d102      	bne.n	e828 <__cvt+0x5c>
    e822:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e824:	07db      	lsls	r3, r3, #31
    e826:	d524      	bpl.n	e872 <__cvt+0xa6>
    e828:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e82a:	18fb      	adds	r3, r7, r3
    e82c:	9307      	str	r3, [sp, #28]
    e82e:	2e46      	cmp	r6, #70	; 0x46
    e830:	d114      	bne.n	e85c <__cvt+0x90>
    e832:	783b      	ldrb	r3, [r7, #0]
    e834:	2b30      	cmp	r3, #48	; 0x30
    e836:	d10c      	bne.n	e852 <__cvt+0x86>
    e838:	2200      	movs	r2, #0
    e83a:	2300      	movs	r3, #0
    e83c:	0020      	movs	r0, r4
    e83e:	0029      	movs	r1, r5
    e840:	f002 ff84 	bl	1174c <__aeabi_dcmpeq>
    e844:	2800      	cmp	r0, #0
    e846:	d104      	bne.n	e852 <__cvt+0x86>
    e848:	2301      	movs	r3, #1
    e84a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e84c:	1a9b      	subs	r3, r3, r2
    e84e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e850:	6013      	str	r3, [r2, #0]
    e852:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e854:	9a07      	ldr	r2, [sp, #28]
    e856:	681b      	ldr	r3, [r3, #0]
    e858:	18d3      	adds	r3, r2, r3
    e85a:	9307      	str	r3, [sp, #28]
    e85c:	2200      	movs	r2, #0
    e85e:	2300      	movs	r3, #0
    e860:	0020      	movs	r0, r4
    e862:	0029      	movs	r1, r5
    e864:	f002 ff72 	bl	1174c <__aeabi_dcmpeq>
    e868:	2230      	movs	r2, #48	; 0x30
    e86a:	2800      	cmp	r0, #0
    e86c:	d00d      	beq.n	e88a <__cvt+0xbe>
    e86e:	9b07      	ldr	r3, [sp, #28]
    e870:	9309      	str	r3, [sp, #36]	; 0x24
    e872:	0038      	movs	r0, r7
    e874:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e876:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e878:	1bdb      	subs	r3, r3, r7
    e87a:	6013      	str	r3, [r2, #0]
    e87c:	b00b      	add	sp, #44	; 0x2c
    e87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e880:	2300      	movs	r3, #0
    e882:	e7af      	b.n	e7e4 <__cvt+0x18>
    e884:	1c59      	adds	r1, r3, #1
    e886:	9109      	str	r1, [sp, #36]	; 0x24
    e888:	701a      	strb	r2, [r3, #0]
    e88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e88c:	9907      	ldr	r1, [sp, #28]
    e88e:	4299      	cmp	r1, r3
    e890:	d8f8      	bhi.n	e884 <__cvt+0xb8>
    e892:	e7ee      	b.n	e872 <__cvt+0xa6>

0000e894 <__exponent>:
    e894:	b5f0      	push	{r4, r5, r6, r7, lr}
    e896:	232b      	movs	r3, #43	; 0x2b
    e898:	b085      	sub	sp, #20
    e89a:	0007      	movs	r7, r0
    e89c:	000c      	movs	r4, r1
    e89e:	7002      	strb	r2, [r0, #0]
    e8a0:	1c86      	adds	r6, r0, #2
    e8a2:	2900      	cmp	r1, #0
    e8a4:	da01      	bge.n	e8aa <__exponent+0x16>
    e8a6:	232d      	movs	r3, #45	; 0x2d
    e8a8:	424c      	negs	r4, r1
    e8aa:	707b      	strb	r3, [r7, #1]
    e8ac:	2c09      	cmp	r4, #9
    e8ae:	dd23      	ble.n	e8f8 <__exponent+0x64>
    e8b0:	ab02      	add	r3, sp, #8
    e8b2:	1ddd      	adds	r5, r3, #7
    e8b4:	1e6b      	subs	r3, r5, #1
    e8b6:	0020      	movs	r0, r4
    e8b8:	210a      	movs	r1, #10
    e8ba:	9301      	str	r3, [sp, #4]
    e8bc:	f002 ff30 	bl	11720 <__aeabi_idivmod>
    e8c0:	1e6b      	subs	r3, r5, #1
    e8c2:	3130      	adds	r1, #48	; 0x30
    e8c4:	7019      	strb	r1, [r3, #0]
    e8c6:	0020      	movs	r0, r4
    e8c8:	210a      	movs	r1, #10
    e8ca:	f002 fe43 	bl	11554 <__divsi3>
    e8ce:	0004      	movs	r4, r0
    e8d0:	2809      	cmp	r0, #9
    e8d2:	dc0a      	bgt.n	e8ea <__exponent+0x56>
    e8d4:	3d02      	subs	r5, #2
    e8d6:	3430      	adds	r4, #48	; 0x30
    e8d8:	702c      	strb	r4, [r5, #0]
    e8da:	ab02      	add	r3, sp, #8
    e8dc:	3307      	adds	r3, #7
    e8de:	0030      	movs	r0, r6
    e8e0:	42ab      	cmp	r3, r5
    e8e2:	d804      	bhi.n	e8ee <__exponent+0x5a>
    e8e4:	1bc0      	subs	r0, r0, r7
    e8e6:	b005      	add	sp, #20
    e8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8ea:	9d01      	ldr	r5, [sp, #4]
    e8ec:	e7e2      	b.n	e8b4 <__exponent+0x20>
    e8ee:	782b      	ldrb	r3, [r5, #0]
    e8f0:	3501      	adds	r5, #1
    e8f2:	7033      	strb	r3, [r6, #0]
    e8f4:	3601      	adds	r6, #1
    e8f6:	e7f0      	b.n	e8da <__exponent+0x46>
    e8f8:	2330      	movs	r3, #48	; 0x30
    e8fa:	18e4      	adds	r4, r4, r3
    e8fc:	7033      	strb	r3, [r6, #0]
    e8fe:	1cb0      	adds	r0, r6, #2
    e900:	7074      	strb	r4, [r6, #1]
    e902:	e7ef      	b.n	e8e4 <__exponent+0x50>

0000e904 <_printf_float>:
    e904:	b5f0      	push	{r4, r5, r6, r7, lr}
    e906:	b095      	sub	sp, #84	; 0x54
    e908:	000c      	movs	r4, r1
    e90a:	920a      	str	r2, [sp, #40]	; 0x28
    e90c:	930b      	str	r3, [sp, #44]	; 0x2c
    e90e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    e910:	9009      	str	r0, [sp, #36]	; 0x24
    e912:	f001 fe49 	bl	105a8 <_localeconv_r>
    e916:	6803      	ldr	r3, [r0, #0]
    e918:	0018      	movs	r0, r3
    e91a:	930d      	str	r3, [sp, #52]	; 0x34
    e91c:	f000 fd5a 	bl	f3d4 <strlen>
    e920:	2300      	movs	r3, #0
    e922:	9312      	str	r3, [sp, #72]	; 0x48
    e924:	6823      	ldr	r3, [r4, #0]
    e926:	900e      	str	r0, [sp, #56]	; 0x38
    e928:	930c      	str	r3, [sp, #48]	; 0x30
    e92a:	990c      	ldr	r1, [sp, #48]	; 0x30
    e92c:	7e27      	ldrb	r7, [r4, #24]
    e92e:	682b      	ldr	r3, [r5, #0]
    e930:	2207      	movs	r2, #7
    e932:	05c9      	lsls	r1, r1, #23
    e934:	d547      	bpl.n	e9c6 <_printf_float+0xc2>
    e936:	189b      	adds	r3, r3, r2
    e938:	4393      	bics	r3, r2
    e93a:	001a      	movs	r2, r3
    e93c:	3208      	adds	r2, #8
    e93e:	602a      	str	r2, [r5, #0]
    e940:	681a      	ldr	r2, [r3, #0]
    e942:	685b      	ldr	r3, [r3, #4]
    e944:	64a2      	str	r2, [r4, #72]	; 0x48
    e946:	64e3      	str	r3, [r4, #76]	; 0x4c
    e948:	2201      	movs	r2, #1
    e94a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    e94c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    e94e:	006b      	lsls	r3, r5, #1
    e950:	085b      	lsrs	r3, r3, #1
    e952:	930f      	str	r3, [sp, #60]	; 0x3c
    e954:	4252      	negs	r2, r2
    e956:	4ba7      	ldr	r3, [pc, #668]	; (ebf4 <_printf_float+0x2f0>)
    e958:	0030      	movs	r0, r6
    e95a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e95c:	f004 fee0 	bl	13720 <__aeabi_dcmpun>
    e960:	2800      	cmp	r0, #0
    e962:	d000      	beq.n	e966 <_printf_float+0x62>
    e964:	e206      	b.n	ed74 <_printf_float+0x470>
    e966:	2201      	movs	r2, #1
    e968:	4ba2      	ldr	r3, [pc, #648]	; (ebf4 <_printf_float+0x2f0>)
    e96a:	4252      	negs	r2, r2
    e96c:	0030      	movs	r0, r6
    e96e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e970:	f002 fefc 	bl	1176c <__aeabi_dcmple>
    e974:	2800      	cmp	r0, #0
    e976:	d000      	beq.n	e97a <_printf_float+0x76>
    e978:	e1fc      	b.n	ed74 <_printf_float+0x470>
    e97a:	2200      	movs	r2, #0
    e97c:	2300      	movs	r3, #0
    e97e:	0030      	movs	r0, r6
    e980:	0029      	movs	r1, r5
    e982:	f002 fee9 	bl	11758 <__aeabi_dcmplt>
    e986:	2800      	cmp	r0, #0
    e988:	d003      	beq.n	e992 <_printf_float+0x8e>
    e98a:	0023      	movs	r3, r4
    e98c:	222d      	movs	r2, #45	; 0x2d
    e98e:	3343      	adds	r3, #67	; 0x43
    e990:	701a      	strb	r2, [r3, #0]
    e992:	4d99      	ldr	r5, [pc, #612]	; (ebf8 <_printf_float+0x2f4>)
    e994:	2f47      	cmp	r7, #71	; 0x47
    e996:	d800      	bhi.n	e99a <_printf_float+0x96>
    e998:	4d98      	ldr	r5, [pc, #608]	; (ebfc <_printf_float+0x2f8>)
    e99a:	2303      	movs	r3, #3
    e99c:	2600      	movs	r6, #0
    e99e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e9a0:	6123      	str	r3, [r4, #16]
    e9a2:	3301      	adds	r3, #1
    e9a4:	439a      	bics	r2, r3
    e9a6:	6022      	str	r2, [r4, #0]
    e9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9aa:	aa13      	add	r2, sp, #76	; 0x4c
    e9ac:	9300      	str	r3, [sp, #0]
    e9ae:	0021      	movs	r1, r4
    e9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    e9b4:	f000 f9f2 	bl	ed9c <_printf_common>
    e9b8:	1c43      	adds	r3, r0, #1
    e9ba:	d000      	beq.n	e9be <_printf_float+0xba>
    e9bc:	e09c      	b.n	eaf8 <_printf_float+0x1f4>
    e9be:	2001      	movs	r0, #1
    e9c0:	4240      	negs	r0, r0
    e9c2:	b015      	add	sp, #84	; 0x54
    e9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9c6:	3307      	adds	r3, #7
    e9c8:	e7b6      	b.n	e938 <_printf_float+0x34>
    e9ca:	2380      	movs	r3, #128	; 0x80
    e9cc:	6862      	ldr	r2, [r4, #4]
    e9ce:	00db      	lsls	r3, r3, #3
    e9d0:	1c51      	adds	r1, r2, #1
    e9d2:	d145      	bne.n	ea60 <_printf_float+0x15c>
    e9d4:	3207      	adds	r2, #7
    e9d6:	6062      	str	r2, [r4, #4]
    e9d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e9da:	2100      	movs	r1, #0
    e9dc:	4313      	orrs	r3, r2
    e9de:	aa12      	add	r2, sp, #72	; 0x48
    e9e0:	9205      	str	r2, [sp, #20]
    e9e2:	aa11      	add	r2, sp, #68	; 0x44
    e9e4:	9203      	str	r2, [sp, #12]
    e9e6:	2223      	movs	r2, #35	; 0x23
    e9e8:	6023      	str	r3, [r4, #0]
    e9ea:	9106      	str	r1, [sp, #24]
    e9ec:	9301      	str	r3, [sp, #4]
    e9ee:	a908      	add	r1, sp, #32
    e9f0:	6863      	ldr	r3, [r4, #4]
    e9f2:	1852      	adds	r2, r2, r1
    e9f4:	9202      	str	r2, [sp, #8]
    e9f6:	9300      	str	r3, [sp, #0]
    e9f8:	0032      	movs	r2, r6
    e9fa:	002b      	movs	r3, r5
    e9fc:	9704      	str	r7, [sp, #16]
    e9fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    ea00:	f7ff fee4 	bl	e7cc <__cvt>
    ea04:	2320      	movs	r3, #32
    ea06:	003a      	movs	r2, r7
    ea08:	0005      	movs	r5, r0
    ea0a:	439a      	bics	r2, r3
    ea0c:	2a47      	cmp	r2, #71	; 0x47
    ea0e:	d107      	bne.n	ea20 <_printf_float+0x11c>
    ea10:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ea12:	1cda      	adds	r2, r3, #3
    ea14:	db02      	blt.n	ea1c <_printf_float+0x118>
    ea16:	6862      	ldr	r2, [r4, #4]
    ea18:	4293      	cmp	r3, r2
    ea1a:	dd5b      	ble.n	ead4 <_printf_float+0x1d0>
    ea1c:	3f02      	subs	r7, #2
    ea1e:	b2ff      	uxtb	r7, r7
    ea20:	9911      	ldr	r1, [sp, #68]	; 0x44
    ea22:	2f65      	cmp	r7, #101	; 0x65
    ea24:	d83b      	bhi.n	ea9e <_printf_float+0x19a>
    ea26:	0020      	movs	r0, r4
    ea28:	3901      	subs	r1, #1
    ea2a:	003a      	movs	r2, r7
    ea2c:	3050      	adds	r0, #80	; 0x50
    ea2e:	9111      	str	r1, [sp, #68]	; 0x44
    ea30:	f7ff ff30 	bl	e894 <__exponent>
    ea34:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ea36:	0006      	movs	r6, r0
    ea38:	1883      	adds	r3, r0, r2
    ea3a:	6123      	str	r3, [r4, #16]
    ea3c:	2a01      	cmp	r2, #1
    ea3e:	dc02      	bgt.n	ea46 <_printf_float+0x142>
    ea40:	6822      	ldr	r2, [r4, #0]
    ea42:	07d2      	lsls	r2, r2, #31
    ea44:	d501      	bpl.n	ea4a <_printf_float+0x146>
    ea46:	3301      	adds	r3, #1
    ea48:	6123      	str	r3, [r4, #16]
    ea4a:	2323      	movs	r3, #35	; 0x23
    ea4c:	aa08      	add	r2, sp, #32
    ea4e:	189b      	adds	r3, r3, r2
    ea50:	781b      	ldrb	r3, [r3, #0]
    ea52:	2b00      	cmp	r3, #0
    ea54:	d0a8      	beq.n	e9a8 <_printf_float+0xa4>
    ea56:	0023      	movs	r3, r4
    ea58:	222d      	movs	r2, #45	; 0x2d
    ea5a:	3343      	adds	r3, #67	; 0x43
    ea5c:	701a      	strb	r2, [r3, #0]
    ea5e:	e7a3      	b.n	e9a8 <_printf_float+0xa4>
    ea60:	2f67      	cmp	r7, #103	; 0x67
    ea62:	d001      	beq.n	ea68 <_printf_float+0x164>
    ea64:	2f47      	cmp	r7, #71	; 0x47
    ea66:	d1b7      	bne.n	e9d8 <_printf_float+0xd4>
    ea68:	2a00      	cmp	r2, #0
    ea6a:	d016      	beq.n	ea9a <_printf_float+0x196>
    ea6c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea6e:	a808      	add	r0, sp, #32
    ea70:	430b      	orrs	r3, r1
    ea72:	2100      	movs	r1, #0
    ea74:	9106      	str	r1, [sp, #24]
    ea76:	a912      	add	r1, sp, #72	; 0x48
    ea78:	9105      	str	r1, [sp, #20]
    ea7a:	a911      	add	r1, sp, #68	; 0x44
    ea7c:	9103      	str	r1, [sp, #12]
    ea7e:	2123      	movs	r1, #35	; 0x23
    ea80:	1809      	adds	r1, r1, r0
    ea82:	6023      	str	r3, [r4, #0]
    ea84:	9301      	str	r3, [sp, #4]
    ea86:	9200      	str	r2, [sp, #0]
    ea88:	002b      	movs	r3, r5
    ea8a:	9704      	str	r7, [sp, #16]
    ea8c:	9102      	str	r1, [sp, #8]
    ea8e:	0032      	movs	r2, r6
    ea90:	9809      	ldr	r0, [sp, #36]	; 0x24
    ea92:	f7ff fe9b 	bl	e7cc <__cvt>
    ea96:	0005      	movs	r5, r0
    ea98:	e7ba      	b.n	ea10 <_printf_float+0x10c>
    ea9a:	2201      	movs	r2, #1
    ea9c:	e79b      	b.n	e9d6 <_printf_float+0xd2>
    ea9e:	2f66      	cmp	r7, #102	; 0x66
    eaa0:	d119      	bne.n	ead6 <_printf_float+0x1d2>
    eaa2:	6863      	ldr	r3, [r4, #4]
    eaa4:	2900      	cmp	r1, #0
    eaa6:	dd0c      	ble.n	eac2 <_printf_float+0x1be>
    eaa8:	6121      	str	r1, [r4, #16]
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d102      	bne.n	eab4 <_printf_float+0x1b0>
    eaae:	6822      	ldr	r2, [r4, #0]
    eab0:	07d2      	lsls	r2, r2, #31
    eab2:	d502      	bpl.n	eaba <_printf_float+0x1b6>
    eab4:	3301      	adds	r3, #1
    eab6:	185b      	adds	r3, r3, r1
    eab8:	6123      	str	r3, [r4, #16]
    eaba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eabc:	2600      	movs	r6, #0
    eabe:	65a3      	str	r3, [r4, #88]	; 0x58
    eac0:	e7c3      	b.n	ea4a <_printf_float+0x146>
    eac2:	2b00      	cmp	r3, #0
    eac4:	d103      	bne.n	eace <_printf_float+0x1ca>
    eac6:	2201      	movs	r2, #1
    eac8:	6821      	ldr	r1, [r4, #0]
    eaca:	4211      	tst	r1, r2
    eacc:	d000      	beq.n	ead0 <_printf_float+0x1cc>
    eace:	1c9a      	adds	r2, r3, #2
    ead0:	6122      	str	r2, [r4, #16]
    ead2:	e7f2      	b.n	eaba <_printf_float+0x1b6>
    ead4:	2767      	movs	r7, #103	; 0x67
    ead6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ead8:	9812      	ldr	r0, [sp, #72]	; 0x48
    eada:	4283      	cmp	r3, r0
    eadc:	db05      	blt.n	eaea <_printf_float+0x1e6>
    eade:	6822      	ldr	r2, [r4, #0]
    eae0:	6123      	str	r3, [r4, #16]
    eae2:	07d2      	lsls	r2, r2, #31
    eae4:	d5e9      	bpl.n	eaba <_printf_float+0x1b6>
    eae6:	3301      	adds	r3, #1
    eae8:	e7e6      	b.n	eab8 <_printf_float+0x1b4>
    eaea:	2201      	movs	r2, #1
    eaec:	2b00      	cmp	r3, #0
    eaee:	dc01      	bgt.n	eaf4 <_printf_float+0x1f0>
    eaf0:	1892      	adds	r2, r2, r2
    eaf2:	1ad2      	subs	r2, r2, r3
    eaf4:	1812      	adds	r2, r2, r0
    eaf6:	e7eb      	b.n	ead0 <_printf_float+0x1cc>
    eaf8:	6822      	ldr	r2, [r4, #0]
    eafa:	0553      	lsls	r3, r2, #21
    eafc:	d408      	bmi.n	eb10 <_printf_float+0x20c>
    eafe:	6923      	ldr	r3, [r4, #16]
    eb00:	002a      	movs	r2, r5
    eb02:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb04:	9809      	ldr	r0, [sp, #36]	; 0x24
    eb06:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    eb08:	47a8      	blx	r5
    eb0a:	1c43      	adds	r3, r0, #1
    eb0c:	d129      	bne.n	eb62 <_printf_float+0x25e>
    eb0e:	e756      	b.n	e9be <_printf_float+0xba>
    eb10:	2f65      	cmp	r7, #101	; 0x65
    eb12:	d800      	bhi.n	eb16 <_printf_float+0x212>
    eb14:	e0dc      	b.n	ecd0 <_printf_float+0x3cc>
    eb16:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    eb18:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    eb1a:	2200      	movs	r2, #0
    eb1c:	2300      	movs	r3, #0
    eb1e:	f002 fe15 	bl	1174c <__aeabi_dcmpeq>
    eb22:	2800      	cmp	r0, #0
    eb24:	d035      	beq.n	eb92 <_printf_float+0x28e>
    eb26:	2301      	movs	r3, #1
    eb28:	4a35      	ldr	r2, [pc, #212]	; (ec00 <_printf_float+0x2fc>)
    eb2a:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb2c:	9809      	ldr	r0, [sp, #36]	; 0x24
    eb2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    eb30:	47a8      	blx	r5
    eb32:	1c43      	adds	r3, r0, #1
    eb34:	d100      	bne.n	eb38 <_printf_float+0x234>
    eb36:	e742      	b.n	e9be <_printf_float+0xba>
    eb38:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eb3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    eb3c:	4293      	cmp	r3, r2
    eb3e:	db02      	blt.n	eb46 <_printf_float+0x242>
    eb40:	6823      	ldr	r3, [r4, #0]
    eb42:	07db      	lsls	r3, r3, #31
    eb44:	d50d      	bpl.n	eb62 <_printf_float+0x25e>
    eb46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    eb48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eb4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    eb4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb4e:	9809      	ldr	r0, [sp, #36]	; 0x24
    eb50:	47a8      	blx	r5
    eb52:	2500      	movs	r5, #0
    eb54:	1c43      	adds	r3, r0, #1
    eb56:	d100      	bne.n	eb5a <_printf_float+0x256>
    eb58:	e731      	b.n	e9be <_printf_float+0xba>
    eb5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb5c:	3b01      	subs	r3, #1
    eb5e:	429d      	cmp	r5, r3
    eb60:	db0b      	blt.n	eb7a <_printf_float+0x276>
    eb62:	6823      	ldr	r3, [r4, #0]
    eb64:	2500      	movs	r5, #0
    eb66:	079b      	lsls	r3, r3, #30
    eb68:	d500      	bpl.n	eb6c <_printf_float+0x268>
    eb6a:	e0fd      	b.n	ed68 <_printf_float+0x464>
    eb6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eb6e:	68e0      	ldr	r0, [r4, #12]
    eb70:	4298      	cmp	r0, r3
    eb72:	db00      	blt.n	eb76 <_printf_float+0x272>
    eb74:	e725      	b.n	e9c2 <_printf_float+0xbe>
    eb76:	0018      	movs	r0, r3
    eb78:	e723      	b.n	e9c2 <_printf_float+0xbe>
    eb7a:	0022      	movs	r2, r4
    eb7c:	2301      	movs	r3, #1
    eb7e:	321a      	adds	r2, #26
    eb80:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb82:	9809      	ldr	r0, [sp, #36]	; 0x24
    eb84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    eb86:	47b0      	blx	r6
    eb88:	1c43      	adds	r3, r0, #1
    eb8a:	d100      	bne.n	eb8e <_printf_float+0x28a>
    eb8c:	e717      	b.n	e9be <_printf_float+0xba>
    eb8e:	3501      	adds	r5, #1
    eb90:	e7e3      	b.n	eb5a <_printf_float+0x256>
    eb92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eb94:	2b00      	cmp	r3, #0
    eb96:	dc35      	bgt.n	ec04 <_printf_float+0x300>
    eb98:	2301      	movs	r3, #1
    eb9a:	4a19      	ldr	r2, [pc, #100]	; (ec00 <_printf_float+0x2fc>)
    eb9c:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    eba0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    eba2:	47b0      	blx	r6
    eba4:	1c43      	adds	r3, r0, #1
    eba6:	d100      	bne.n	ebaa <_printf_float+0x2a6>
    eba8:	e709      	b.n	e9be <_printf_float+0xba>
    ebaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ebac:	2b00      	cmp	r3, #0
    ebae:	d105      	bne.n	ebbc <_printf_float+0x2b8>
    ebb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d102      	bne.n	ebbc <_printf_float+0x2b8>
    ebb6:	6823      	ldr	r3, [r4, #0]
    ebb8:	07db      	lsls	r3, r3, #31
    ebba:	d5d2      	bpl.n	eb62 <_printf_float+0x25e>
    ebbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ebbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ebc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ebc2:	990a      	ldr	r1, [sp, #40]	; 0x28
    ebc4:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebc6:	47b0      	blx	r6
    ebc8:	2600      	movs	r6, #0
    ebca:	1c43      	adds	r3, r0, #1
    ebcc:	d100      	bne.n	ebd0 <_printf_float+0x2cc>
    ebce:	e6f6      	b.n	e9be <_printf_float+0xba>
    ebd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ebd2:	425b      	negs	r3, r3
    ebd4:	429e      	cmp	r6, r3
    ebd6:	db01      	blt.n	ebdc <_printf_float+0x2d8>
    ebd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ebda:	e791      	b.n	eb00 <_printf_float+0x1fc>
    ebdc:	0022      	movs	r2, r4
    ebde:	2301      	movs	r3, #1
    ebe0:	321a      	adds	r2, #26
    ebe2:	990a      	ldr	r1, [sp, #40]	; 0x28
    ebe4:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebe6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ebe8:	47b8      	blx	r7
    ebea:	1c43      	adds	r3, r0, #1
    ebec:	d100      	bne.n	ebf0 <_printf_float+0x2ec>
    ebee:	e6e6      	b.n	e9be <_printf_float+0xba>
    ebf0:	3601      	adds	r6, #1
    ebf2:	e7ed      	b.n	ebd0 <_printf_float+0x2cc>
    ebf4:	7fefffff 	.word	0x7fefffff
    ebf8:	000150b6 	.word	0x000150b6
    ebfc:	000150b2 	.word	0x000150b2
    ec00:	000150c2 	.word	0x000150c2
    ec04:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ec06:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ec08:	429e      	cmp	r6, r3
    ec0a:	dd00      	ble.n	ec0e <_printf_float+0x30a>
    ec0c:	001e      	movs	r6, r3
    ec0e:	2e00      	cmp	r6, #0
    ec10:	dc35      	bgt.n	ec7e <_printf_float+0x37a>
    ec12:	2300      	movs	r3, #0
    ec14:	930c      	str	r3, [sp, #48]	; 0x30
    ec16:	43f3      	mvns	r3, r6
    ec18:	17db      	asrs	r3, r3, #31
    ec1a:	930f      	str	r3, [sp, #60]	; 0x3c
    ec1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ec1e:	6da7      	ldr	r7, [r4, #88]	; 0x58
    ec20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec22:	4033      	ands	r3, r6
    ec24:	1afb      	subs	r3, r7, r3
    ec26:	429a      	cmp	r2, r3
    ec28:	db32      	blt.n	ec90 <_printf_float+0x38c>
    ec2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ec2e:	4293      	cmp	r3, r2
    ec30:	db3c      	blt.n	ecac <_printf_float+0x3a8>
    ec32:	6823      	ldr	r3, [r4, #0]
    ec34:	07db      	lsls	r3, r3, #31
    ec36:	d439      	bmi.n	ecac <_printf_float+0x3a8>
    ec38:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ec3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ec3c:	1bf3      	subs	r3, r6, r7
    ec3e:	1ab6      	subs	r6, r6, r2
    ec40:	429e      	cmp	r6, r3
    ec42:	dd00      	ble.n	ec46 <_printf_float+0x342>
    ec44:	001e      	movs	r6, r3
    ec46:	2e00      	cmp	r6, #0
    ec48:	dc39      	bgt.n	ecbe <_printf_float+0x3ba>
    ec4a:	43f7      	mvns	r7, r6
    ec4c:	2500      	movs	r5, #0
    ec4e:	17fb      	asrs	r3, r7, #31
    ec50:	930c      	str	r3, [sp, #48]	; 0x30
    ec52:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ec54:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ec56:	990c      	ldr	r1, [sp, #48]	; 0x30
    ec58:	1a9b      	subs	r3, r3, r2
    ec5a:	0032      	movs	r2, r6
    ec5c:	400a      	ands	r2, r1
    ec5e:	1a9b      	subs	r3, r3, r2
    ec60:	429d      	cmp	r5, r3
    ec62:	db00      	blt.n	ec66 <_printf_float+0x362>
    ec64:	e77d      	b.n	eb62 <_printf_float+0x25e>
    ec66:	0022      	movs	r2, r4
    ec68:	2301      	movs	r3, #1
    ec6a:	321a      	adds	r2, #26
    ec6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ec6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ec72:	47b8      	blx	r7
    ec74:	1c43      	adds	r3, r0, #1
    ec76:	d100      	bne.n	ec7a <_printf_float+0x376>
    ec78:	e6a1      	b.n	e9be <_printf_float+0xba>
    ec7a:	3501      	adds	r5, #1
    ec7c:	e7e9      	b.n	ec52 <_printf_float+0x34e>
    ec7e:	0033      	movs	r3, r6
    ec80:	002a      	movs	r2, r5
    ec82:	990a      	ldr	r1, [sp, #40]	; 0x28
    ec84:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec86:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ec88:	47b8      	blx	r7
    ec8a:	1c43      	adds	r3, r0, #1
    ec8c:	d1c1      	bne.n	ec12 <_printf_float+0x30e>
    ec8e:	e696      	b.n	e9be <_printf_float+0xba>
    ec90:	0022      	movs	r2, r4
    ec92:	2301      	movs	r3, #1
    ec94:	321a      	adds	r2, #26
    ec96:	990a      	ldr	r1, [sp, #40]	; 0x28
    ec98:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec9a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ec9c:	47b8      	blx	r7
    ec9e:	1c43      	adds	r3, r0, #1
    eca0:	d100      	bne.n	eca4 <_printf_float+0x3a0>
    eca2:	e68c      	b.n	e9be <_printf_float+0xba>
    eca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eca6:	3301      	adds	r3, #1
    eca8:	930c      	str	r3, [sp, #48]	; 0x30
    ecaa:	e7b7      	b.n	ec1c <_printf_float+0x318>
    ecac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ecae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ecb0:	990a      	ldr	r1, [sp, #40]	; 0x28
    ecb2:	9809      	ldr	r0, [sp, #36]	; 0x24
    ecb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ecb6:	47b0      	blx	r6
    ecb8:	1c43      	adds	r3, r0, #1
    ecba:	d1bd      	bne.n	ec38 <_printf_float+0x334>
    ecbc:	e67f      	b.n	e9be <_printf_float+0xba>
    ecbe:	19ea      	adds	r2, r5, r7
    ecc0:	0033      	movs	r3, r6
    ecc2:	990a      	ldr	r1, [sp, #40]	; 0x28
    ecc4:	9809      	ldr	r0, [sp, #36]	; 0x24
    ecc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ecc8:	47a8      	blx	r5
    ecca:	1c43      	adds	r3, r0, #1
    eccc:	d1bd      	bne.n	ec4a <_printf_float+0x346>
    ecce:	e676      	b.n	e9be <_printf_float+0xba>
    ecd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ecd2:	2b01      	cmp	r3, #1
    ecd4:	dc02      	bgt.n	ecdc <_printf_float+0x3d8>
    ecd6:	2301      	movs	r3, #1
    ecd8:	421a      	tst	r2, r3
    ecda:	d038      	beq.n	ed4e <_printf_float+0x44a>
    ecdc:	2301      	movs	r3, #1
    ecde:	002a      	movs	r2, r5
    ece0:	990a      	ldr	r1, [sp, #40]	; 0x28
    ece2:	9809      	ldr	r0, [sp, #36]	; 0x24
    ece4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ece6:	47b8      	blx	r7
    ece8:	1c43      	adds	r3, r0, #1
    ecea:	d100      	bne.n	ecee <_printf_float+0x3ea>
    ecec:	e667      	b.n	e9be <_printf_float+0xba>
    ecee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ecf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ecf2:	990a      	ldr	r1, [sp, #40]	; 0x28
    ecf4:	9809      	ldr	r0, [sp, #36]	; 0x24
    ecf6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ecf8:	47b8      	blx	r7
    ecfa:	1c43      	adds	r3, r0, #1
    ecfc:	d100      	bne.n	ed00 <_printf_float+0x3fc>
    ecfe:	e65e      	b.n	e9be <_printf_float+0xba>
    ed00:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ed02:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ed04:	2200      	movs	r2, #0
    ed06:	2300      	movs	r3, #0
    ed08:	f002 fd20 	bl	1174c <__aeabi_dcmpeq>
    ed0c:	2800      	cmp	r0, #0
    ed0e:	d008      	beq.n	ed22 <_printf_float+0x41e>
    ed10:	2500      	movs	r5, #0
    ed12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ed14:	3b01      	subs	r3, #1
    ed16:	429d      	cmp	r5, r3
    ed18:	db0d      	blt.n	ed36 <_printf_float+0x432>
    ed1a:	0022      	movs	r2, r4
    ed1c:	0033      	movs	r3, r6
    ed1e:	3250      	adds	r2, #80	; 0x50
    ed20:	e6ef      	b.n	eb02 <_printf_float+0x1fe>
    ed22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ed24:	1c6a      	adds	r2, r5, #1
    ed26:	3b01      	subs	r3, #1
    ed28:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ed2e:	47a8      	blx	r5
    ed30:	1c43      	adds	r3, r0, #1
    ed32:	d1f2      	bne.n	ed1a <_printf_float+0x416>
    ed34:	e643      	b.n	e9be <_printf_float+0xba>
    ed36:	0022      	movs	r2, r4
    ed38:	2301      	movs	r3, #1
    ed3a:	321a      	adds	r2, #26
    ed3c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ed42:	47b8      	blx	r7
    ed44:	1c43      	adds	r3, r0, #1
    ed46:	d100      	bne.n	ed4a <_printf_float+0x446>
    ed48:	e639      	b.n	e9be <_printf_float+0xba>
    ed4a:	3501      	adds	r5, #1
    ed4c:	e7e1      	b.n	ed12 <_printf_float+0x40e>
    ed4e:	002a      	movs	r2, r5
    ed50:	e7ea      	b.n	ed28 <_printf_float+0x424>
    ed52:	0022      	movs	r2, r4
    ed54:	2301      	movs	r3, #1
    ed56:	3219      	adds	r2, #25
    ed58:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ed5e:	47b0      	blx	r6
    ed60:	1c43      	adds	r3, r0, #1
    ed62:	d100      	bne.n	ed66 <_printf_float+0x462>
    ed64:	e62b      	b.n	e9be <_printf_float+0xba>
    ed66:	3501      	adds	r5, #1
    ed68:	68e3      	ldr	r3, [r4, #12]
    ed6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ed6c:	1a9b      	subs	r3, r3, r2
    ed6e:	429d      	cmp	r5, r3
    ed70:	dbef      	blt.n	ed52 <_printf_float+0x44e>
    ed72:	e6fb      	b.n	eb6c <_printf_float+0x268>
    ed74:	0032      	movs	r2, r6
    ed76:	002b      	movs	r3, r5
    ed78:	0030      	movs	r0, r6
    ed7a:	0029      	movs	r1, r5
    ed7c:	f004 fcd0 	bl	13720 <__aeabi_dcmpun>
    ed80:	2800      	cmp	r0, #0
    ed82:	d100      	bne.n	ed86 <_printf_float+0x482>
    ed84:	e621      	b.n	e9ca <_printf_float+0xc6>
    ed86:	4d03      	ldr	r5, [pc, #12]	; (ed94 <_printf_float+0x490>)
    ed88:	2f47      	cmp	r7, #71	; 0x47
    ed8a:	d900      	bls.n	ed8e <_printf_float+0x48a>
    ed8c:	e605      	b.n	e99a <_printf_float+0x96>
    ed8e:	4d02      	ldr	r5, [pc, #8]	; (ed98 <_printf_float+0x494>)
    ed90:	e603      	b.n	e99a <_printf_float+0x96>
    ed92:	46c0      	nop			; (mov r8, r8)
    ed94:	000150be 	.word	0x000150be
    ed98:	000150ba 	.word	0x000150ba

0000ed9c <_printf_common>:
    ed9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ed9e:	0015      	movs	r5, r2
    eda0:	9301      	str	r3, [sp, #4]
    eda2:	688a      	ldr	r2, [r1, #8]
    eda4:	690b      	ldr	r3, [r1, #16]
    eda6:	9000      	str	r0, [sp, #0]
    eda8:	000c      	movs	r4, r1
    edaa:	4293      	cmp	r3, r2
    edac:	da00      	bge.n	edb0 <_printf_common+0x14>
    edae:	0013      	movs	r3, r2
    edb0:	0022      	movs	r2, r4
    edb2:	602b      	str	r3, [r5, #0]
    edb4:	3243      	adds	r2, #67	; 0x43
    edb6:	7812      	ldrb	r2, [r2, #0]
    edb8:	2a00      	cmp	r2, #0
    edba:	d001      	beq.n	edc0 <_printf_common+0x24>
    edbc:	3301      	adds	r3, #1
    edbe:	602b      	str	r3, [r5, #0]
    edc0:	6823      	ldr	r3, [r4, #0]
    edc2:	069b      	lsls	r3, r3, #26
    edc4:	d502      	bpl.n	edcc <_printf_common+0x30>
    edc6:	682b      	ldr	r3, [r5, #0]
    edc8:	3302      	adds	r3, #2
    edca:	602b      	str	r3, [r5, #0]
    edcc:	2706      	movs	r7, #6
    edce:	6823      	ldr	r3, [r4, #0]
    edd0:	401f      	ands	r7, r3
    edd2:	d027      	beq.n	ee24 <_printf_common+0x88>
    edd4:	0023      	movs	r3, r4
    edd6:	3343      	adds	r3, #67	; 0x43
    edd8:	781b      	ldrb	r3, [r3, #0]
    edda:	1e5a      	subs	r2, r3, #1
    eddc:	4193      	sbcs	r3, r2
    edde:	6822      	ldr	r2, [r4, #0]
    ede0:	0692      	lsls	r2, r2, #26
    ede2:	d430      	bmi.n	ee46 <_printf_common+0xaa>
    ede4:	0022      	movs	r2, r4
    ede6:	9901      	ldr	r1, [sp, #4]
    ede8:	3243      	adds	r2, #67	; 0x43
    edea:	9800      	ldr	r0, [sp, #0]
    edec:	9e08      	ldr	r6, [sp, #32]
    edee:	47b0      	blx	r6
    edf0:	1c43      	adds	r3, r0, #1
    edf2:	d025      	beq.n	ee40 <_printf_common+0xa4>
    edf4:	2306      	movs	r3, #6
    edf6:	6820      	ldr	r0, [r4, #0]
    edf8:	682a      	ldr	r2, [r5, #0]
    edfa:	68e1      	ldr	r1, [r4, #12]
    edfc:	4003      	ands	r3, r0
    edfe:	2500      	movs	r5, #0
    ee00:	2b04      	cmp	r3, #4
    ee02:	d103      	bne.n	ee0c <_printf_common+0x70>
    ee04:	1a8d      	subs	r5, r1, r2
    ee06:	43eb      	mvns	r3, r5
    ee08:	17db      	asrs	r3, r3, #31
    ee0a:	401d      	ands	r5, r3
    ee0c:	68a3      	ldr	r3, [r4, #8]
    ee0e:	6922      	ldr	r2, [r4, #16]
    ee10:	4293      	cmp	r3, r2
    ee12:	dd01      	ble.n	ee18 <_printf_common+0x7c>
    ee14:	1a9b      	subs	r3, r3, r2
    ee16:	18ed      	adds	r5, r5, r3
    ee18:	2700      	movs	r7, #0
    ee1a:	42bd      	cmp	r5, r7
    ee1c:	d120      	bne.n	ee60 <_printf_common+0xc4>
    ee1e:	2000      	movs	r0, #0
    ee20:	e010      	b.n	ee44 <_printf_common+0xa8>
    ee22:	3701      	adds	r7, #1
    ee24:	68e3      	ldr	r3, [r4, #12]
    ee26:	682a      	ldr	r2, [r5, #0]
    ee28:	1a9b      	subs	r3, r3, r2
    ee2a:	429f      	cmp	r7, r3
    ee2c:	dad2      	bge.n	edd4 <_printf_common+0x38>
    ee2e:	0022      	movs	r2, r4
    ee30:	2301      	movs	r3, #1
    ee32:	3219      	adds	r2, #25
    ee34:	9901      	ldr	r1, [sp, #4]
    ee36:	9800      	ldr	r0, [sp, #0]
    ee38:	9e08      	ldr	r6, [sp, #32]
    ee3a:	47b0      	blx	r6
    ee3c:	1c43      	adds	r3, r0, #1
    ee3e:	d1f0      	bne.n	ee22 <_printf_common+0x86>
    ee40:	2001      	movs	r0, #1
    ee42:	4240      	negs	r0, r0
    ee44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ee46:	2030      	movs	r0, #48	; 0x30
    ee48:	18e1      	adds	r1, r4, r3
    ee4a:	3143      	adds	r1, #67	; 0x43
    ee4c:	7008      	strb	r0, [r1, #0]
    ee4e:	0021      	movs	r1, r4
    ee50:	1c5a      	adds	r2, r3, #1
    ee52:	3145      	adds	r1, #69	; 0x45
    ee54:	7809      	ldrb	r1, [r1, #0]
    ee56:	18a2      	adds	r2, r4, r2
    ee58:	3243      	adds	r2, #67	; 0x43
    ee5a:	3302      	adds	r3, #2
    ee5c:	7011      	strb	r1, [r2, #0]
    ee5e:	e7c1      	b.n	ede4 <_printf_common+0x48>
    ee60:	0022      	movs	r2, r4
    ee62:	2301      	movs	r3, #1
    ee64:	321a      	adds	r2, #26
    ee66:	9901      	ldr	r1, [sp, #4]
    ee68:	9800      	ldr	r0, [sp, #0]
    ee6a:	9e08      	ldr	r6, [sp, #32]
    ee6c:	47b0      	blx	r6
    ee6e:	1c43      	adds	r3, r0, #1
    ee70:	d0e6      	beq.n	ee40 <_printf_common+0xa4>
    ee72:	3701      	adds	r7, #1
    ee74:	e7d1      	b.n	ee1a <_printf_common+0x7e>
	...

0000ee78 <_printf_i>:
    ee78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee7a:	b08b      	sub	sp, #44	; 0x2c
    ee7c:	9206      	str	r2, [sp, #24]
    ee7e:	000a      	movs	r2, r1
    ee80:	3243      	adds	r2, #67	; 0x43
    ee82:	9307      	str	r3, [sp, #28]
    ee84:	9005      	str	r0, [sp, #20]
    ee86:	9204      	str	r2, [sp, #16]
    ee88:	7e0a      	ldrb	r2, [r1, #24]
    ee8a:	000c      	movs	r4, r1
    ee8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ee8e:	2a6e      	cmp	r2, #110	; 0x6e
    ee90:	d100      	bne.n	ee94 <_printf_i+0x1c>
    ee92:	e08f      	b.n	efb4 <_printf_i+0x13c>
    ee94:	d817      	bhi.n	eec6 <_printf_i+0x4e>
    ee96:	2a63      	cmp	r2, #99	; 0x63
    ee98:	d02c      	beq.n	eef4 <_printf_i+0x7c>
    ee9a:	d808      	bhi.n	eeae <_printf_i+0x36>
    ee9c:	2a00      	cmp	r2, #0
    ee9e:	d100      	bne.n	eea2 <_printf_i+0x2a>
    eea0:	e099      	b.n	efd6 <_printf_i+0x15e>
    eea2:	2a58      	cmp	r2, #88	; 0x58
    eea4:	d054      	beq.n	ef50 <_printf_i+0xd8>
    eea6:	0026      	movs	r6, r4
    eea8:	3642      	adds	r6, #66	; 0x42
    eeaa:	7032      	strb	r2, [r6, #0]
    eeac:	e029      	b.n	ef02 <_printf_i+0x8a>
    eeae:	2a64      	cmp	r2, #100	; 0x64
    eeb0:	d001      	beq.n	eeb6 <_printf_i+0x3e>
    eeb2:	2a69      	cmp	r2, #105	; 0x69
    eeb4:	d1f7      	bne.n	eea6 <_printf_i+0x2e>
    eeb6:	6821      	ldr	r1, [r4, #0]
    eeb8:	681a      	ldr	r2, [r3, #0]
    eeba:	0608      	lsls	r0, r1, #24
    eebc:	d523      	bpl.n	ef06 <_printf_i+0x8e>
    eebe:	1d11      	adds	r1, r2, #4
    eec0:	6019      	str	r1, [r3, #0]
    eec2:	6815      	ldr	r5, [r2, #0]
    eec4:	e025      	b.n	ef12 <_printf_i+0x9a>
    eec6:	2a73      	cmp	r2, #115	; 0x73
    eec8:	d100      	bne.n	eecc <_printf_i+0x54>
    eeca:	e088      	b.n	efde <_printf_i+0x166>
    eecc:	d808      	bhi.n	eee0 <_printf_i+0x68>
    eece:	2a6f      	cmp	r2, #111	; 0x6f
    eed0:	d029      	beq.n	ef26 <_printf_i+0xae>
    eed2:	2a70      	cmp	r2, #112	; 0x70
    eed4:	d1e7      	bne.n	eea6 <_printf_i+0x2e>
    eed6:	2220      	movs	r2, #32
    eed8:	6809      	ldr	r1, [r1, #0]
    eeda:	430a      	orrs	r2, r1
    eedc:	6022      	str	r2, [r4, #0]
    eede:	e003      	b.n	eee8 <_printf_i+0x70>
    eee0:	2a75      	cmp	r2, #117	; 0x75
    eee2:	d020      	beq.n	ef26 <_printf_i+0xae>
    eee4:	2a78      	cmp	r2, #120	; 0x78
    eee6:	d1de      	bne.n	eea6 <_printf_i+0x2e>
    eee8:	0022      	movs	r2, r4
    eeea:	2178      	movs	r1, #120	; 0x78
    eeec:	3245      	adds	r2, #69	; 0x45
    eeee:	7011      	strb	r1, [r2, #0]
    eef0:	4a6c      	ldr	r2, [pc, #432]	; (f0a4 <_printf_i+0x22c>)
    eef2:	e030      	b.n	ef56 <_printf_i+0xde>
    eef4:	000e      	movs	r6, r1
    eef6:	681a      	ldr	r2, [r3, #0]
    eef8:	3642      	adds	r6, #66	; 0x42
    eefa:	1d11      	adds	r1, r2, #4
    eefc:	6019      	str	r1, [r3, #0]
    eefe:	6813      	ldr	r3, [r2, #0]
    ef00:	7033      	strb	r3, [r6, #0]
    ef02:	2301      	movs	r3, #1
    ef04:	e079      	b.n	effa <_printf_i+0x182>
    ef06:	0649      	lsls	r1, r1, #25
    ef08:	d5d9      	bpl.n	eebe <_printf_i+0x46>
    ef0a:	1d11      	adds	r1, r2, #4
    ef0c:	6019      	str	r1, [r3, #0]
    ef0e:	2300      	movs	r3, #0
    ef10:	5ed5      	ldrsh	r5, [r2, r3]
    ef12:	2d00      	cmp	r5, #0
    ef14:	da03      	bge.n	ef1e <_printf_i+0xa6>
    ef16:	232d      	movs	r3, #45	; 0x2d
    ef18:	9a04      	ldr	r2, [sp, #16]
    ef1a:	426d      	negs	r5, r5
    ef1c:	7013      	strb	r3, [r2, #0]
    ef1e:	4b62      	ldr	r3, [pc, #392]	; (f0a8 <_printf_i+0x230>)
    ef20:	270a      	movs	r7, #10
    ef22:	9303      	str	r3, [sp, #12]
    ef24:	e02f      	b.n	ef86 <_printf_i+0x10e>
    ef26:	6820      	ldr	r0, [r4, #0]
    ef28:	6819      	ldr	r1, [r3, #0]
    ef2a:	0605      	lsls	r5, r0, #24
    ef2c:	d503      	bpl.n	ef36 <_printf_i+0xbe>
    ef2e:	1d08      	adds	r0, r1, #4
    ef30:	6018      	str	r0, [r3, #0]
    ef32:	680d      	ldr	r5, [r1, #0]
    ef34:	e005      	b.n	ef42 <_printf_i+0xca>
    ef36:	0640      	lsls	r0, r0, #25
    ef38:	d5f9      	bpl.n	ef2e <_printf_i+0xb6>
    ef3a:	680d      	ldr	r5, [r1, #0]
    ef3c:	1d08      	adds	r0, r1, #4
    ef3e:	6018      	str	r0, [r3, #0]
    ef40:	b2ad      	uxth	r5, r5
    ef42:	4b59      	ldr	r3, [pc, #356]	; (f0a8 <_printf_i+0x230>)
    ef44:	2708      	movs	r7, #8
    ef46:	9303      	str	r3, [sp, #12]
    ef48:	2a6f      	cmp	r2, #111	; 0x6f
    ef4a:	d018      	beq.n	ef7e <_printf_i+0x106>
    ef4c:	270a      	movs	r7, #10
    ef4e:	e016      	b.n	ef7e <_printf_i+0x106>
    ef50:	3145      	adds	r1, #69	; 0x45
    ef52:	700a      	strb	r2, [r1, #0]
    ef54:	4a54      	ldr	r2, [pc, #336]	; (f0a8 <_printf_i+0x230>)
    ef56:	9203      	str	r2, [sp, #12]
    ef58:	681a      	ldr	r2, [r3, #0]
    ef5a:	6821      	ldr	r1, [r4, #0]
    ef5c:	1d10      	adds	r0, r2, #4
    ef5e:	6018      	str	r0, [r3, #0]
    ef60:	6815      	ldr	r5, [r2, #0]
    ef62:	0608      	lsls	r0, r1, #24
    ef64:	d522      	bpl.n	efac <_printf_i+0x134>
    ef66:	07cb      	lsls	r3, r1, #31
    ef68:	d502      	bpl.n	ef70 <_printf_i+0xf8>
    ef6a:	2320      	movs	r3, #32
    ef6c:	4319      	orrs	r1, r3
    ef6e:	6021      	str	r1, [r4, #0]
    ef70:	2710      	movs	r7, #16
    ef72:	2d00      	cmp	r5, #0
    ef74:	d103      	bne.n	ef7e <_printf_i+0x106>
    ef76:	2320      	movs	r3, #32
    ef78:	6822      	ldr	r2, [r4, #0]
    ef7a:	439a      	bics	r2, r3
    ef7c:	6022      	str	r2, [r4, #0]
    ef7e:	0023      	movs	r3, r4
    ef80:	2200      	movs	r2, #0
    ef82:	3343      	adds	r3, #67	; 0x43
    ef84:	701a      	strb	r2, [r3, #0]
    ef86:	6863      	ldr	r3, [r4, #4]
    ef88:	60a3      	str	r3, [r4, #8]
    ef8a:	2b00      	cmp	r3, #0
    ef8c:	db5c      	blt.n	f048 <_printf_i+0x1d0>
    ef8e:	2204      	movs	r2, #4
    ef90:	6821      	ldr	r1, [r4, #0]
    ef92:	4391      	bics	r1, r2
    ef94:	6021      	str	r1, [r4, #0]
    ef96:	2d00      	cmp	r5, #0
    ef98:	d158      	bne.n	f04c <_printf_i+0x1d4>
    ef9a:	9e04      	ldr	r6, [sp, #16]
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d064      	beq.n	f06a <_printf_i+0x1f2>
    efa0:	0026      	movs	r6, r4
    efa2:	9b03      	ldr	r3, [sp, #12]
    efa4:	3642      	adds	r6, #66	; 0x42
    efa6:	781b      	ldrb	r3, [r3, #0]
    efa8:	7033      	strb	r3, [r6, #0]
    efaa:	e05e      	b.n	f06a <_printf_i+0x1f2>
    efac:	0648      	lsls	r0, r1, #25
    efae:	d5da      	bpl.n	ef66 <_printf_i+0xee>
    efb0:	b2ad      	uxth	r5, r5
    efb2:	e7d8      	b.n	ef66 <_printf_i+0xee>
    efb4:	6809      	ldr	r1, [r1, #0]
    efb6:	681a      	ldr	r2, [r3, #0]
    efb8:	0608      	lsls	r0, r1, #24
    efba:	d505      	bpl.n	efc8 <_printf_i+0x150>
    efbc:	1d11      	adds	r1, r2, #4
    efbe:	6019      	str	r1, [r3, #0]
    efc0:	6813      	ldr	r3, [r2, #0]
    efc2:	6962      	ldr	r2, [r4, #20]
    efc4:	601a      	str	r2, [r3, #0]
    efc6:	e006      	b.n	efd6 <_printf_i+0x15e>
    efc8:	0649      	lsls	r1, r1, #25
    efca:	d5f7      	bpl.n	efbc <_printf_i+0x144>
    efcc:	1d11      	adds	r1, r2, #4
    efce:	6019      	str	r1, [r3, #0]
    efd0:	6813      	ldr	r3, [r2, #0]
    efd2:	8aa2      	ldrh	r2, [r4, #20]
    efd4:	801a      	strh	r2, [r3, #0]
    efd6:	2300      	movs	r3, #0
    efd8:	9e04      	ldr	r6, [sp, #16]
    efda:	6123      	str	r3, [r4, #16]
    efdc:	e054      	b.n	f088 <_printf_i+0x210>
    efde:	681a      	ldr	r2, [r3, #0]
    efe0:	1d11      	adds	r1, r2, #4
    efe2:	6019      	str	r1, [r3, #0]
    efe4:	6816      	ldr	r6, [r2, #0]
    efe6:	2100      	movs	r1, #0
    efe8:	6862      	ldr	r2, [r4, #4]
    efea:	0030      	movs	r0, r6
    efec:	f001 fb54 	bl	10698 <memchr>
    eff0:	2800      	cmp	r0, #0
    eff2:	d001      	beq.n	eff8 <_printf_i+0x180>
    eff4:	1b80      	subs	r0, r0, r6
    eff6:	6060      	str	r0, [r4, #4]
    eff8:	6863      	ldr	r3, [r4, #4]
    effa:	6123      	str	r3, [r4, #16]
    effc:	2300      	movs	r3, #0
    effe:	9a04      	ldr	r2, [sp, #16]
    f000:	7013      	strb	r3, [r2, #0]
    f002:	e041      	b.n	f088 <_printf_i+0x210>
    f004:	6923      	ldr	r3, [r4, #16]
    f006:	0032      	movs	r2, r6
    f008:	9906      	ldr	r1, [sp, #24]
    f00a:	9805      	ldr	r0, [sp, #20]
    f00c:	9d07      	ldr	r5, [sp, #28]
    f00e:	47a8      	blx	r5
    f010:	1c43      	adds	r3, r0, #1
    f012:	d043      	beq.n	f09c <_printf_i+0x224>
    f014:	6823      	ldr	r3, [r4, #0]
    f016:	2500      	movs	r5, #0
    f018:	079b      	lsls	r3, r3, #30
    f01a:	d40f      	bmi.n	f03c <_printf_i+0x1c4>
    f01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f01e:	68e0      	ldr	r0, [r4, #12]
    f020:	4298      	cmp	r0, r3
    f022:	da3d      	bge.n	f0a0 <_printf_i+0x228>
    f024:	0018      	movs	r0, r3
    f026:	e03b      	b.n	f0a0 <_printf_i+0x228>
    f028:	0022      	movs	r2, r4
    f02a:	2301      	movs	r3, #1
    f02c:	3219      	adds	r2, #25
    f02e:	9906      	ldr	r1, [sp, #24]
    f030:	9805      	ldr	r0, [sp, #20]
    f032:	9e07      	ldr	r6, [sp, #28]
    f034:	47b0      	blx	r6
    f036:	1c43      	adds	r3, r0, #1
    f038:	d030      	beq.n	f09c <_printf_i+0x224>
    f03a:	3501      	adds	r5, #1
    f03c:	68e3      	ldr	r3, [r4, #12]
    f03e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f040:	1a9b      	subs	r3, r3, r2
    f042:	429d      	cmp	r5, r3
    f044:	dbf0      	blt.n	f028 <_printf_i+0x1b0>
    f046:	e7e9      	b.n	f01c <_printf_i+0x1a4>
    f048:	2d00      	cmp	r5, #0
    f04a:	d0a9      	beq.n	efa0 <_printf_i+0x128>
    f04c:	9e04      	ldr	r6, [sp, #16]
    f04e:	0028      	movs	r0, r5
    f050:	0039      	movs	r1, r7
    f052:	f002 fa7b 	bl	1154c <__aeabi_uidivmod>
    f056:	9b03      	ldr	r3, [sp, #12]
    f058:	3e01      	subs	r6, #1
    f05a:	5c5b      	ldrb	r3, [r3, r1]
    f05c:	0028      	movs	r0, r5
    f05e:	7033      	strb	r3, [r6, #0]
    f060:	0039      	movs	r1, r7
    f062:	f002 f9ed 	bl	11440 <__udivsi3>
    f066:	1e05      	subs	r5, r0, #0
    f068:	d1f1      	bne.n	f04e <_printf_i+0x1d6>
    f06a:	2f08      	cmp	r7, #8
    f06c:	d109      	bne.n	f082 <_printf_i+0x20a>
    f06e:	6823      	ldr	r3, [r4, #0]
    f070:	07db      	lsls	r3, r3, #31
    f072:	d506      	bpl.n	f082 <_printf_i+0x20a>
    f074:	6863      	ldr	r3, [r4, #4]
    f076:	6922      	ldr	r2, [r4, #16]
    f078:	4293      	cmp	r3, r2
    f07a:	dc02      	bgt.n	f082 <_printf_i+0x20a>
    f07c:	2330      	movs	r3, #48	; 0x30
    f07e:	3e01      	subs	r6, #1
    f080:	7033      	strb	r3, [r6, #0]
    f082:	9b04      	ldr	r3, [sp, #16]
    f084:	1b9b      	subs	r3, r3, r6
    f086:	6123      	str	r3, [r4, #16]
    f088:	9b07      	ldr	r3, [sp, #28]
    f08a:	aa09      	add	r2, sp, #36	; 0x24
    f08c:	9300      	str	r3, [sp, #0]
    f08e:	0021      	movs	r1, r4
    f090:	9b06      	ldr	r3, [sp, #24]
    f092:	9805      	ldr	r0, [sp, #20]
    f094:	f7ff fe82 	bl	ed9c <_printf_common>
    f098:	1c43      	adds	r3, r0, #1
    f09a:	d1b3      	bne.n	f004 <_printf_i+0x18c>
    f09c:	2001      	movs	r0, #1
    f09e:	4240      	negs	r0, r0
    f0a0:	b00b      	add	sp, #44	; 0x2c
    f0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0a4:	000150d5 	.word	0x000150d5
    f0a8:	000150c4 	.word	0x000150c4

0000f0ac <iprintf>:
    f0ac:	b40f      	push	{r0, r1, r2, r3}
    f0ae:	4b0b      	ldr	r3, [pc, #44]	; (f0dc <iprintf+0x30>)
    f0b0:	b513      	push	{r0, r1, r4, lr}
    f0b2:	681c      	ldr	r4, [r3, #0]
    f0b4:	2c00      	cmp	r4, #0
    f0b6:	d005      	beq.n	f0c4 <iprintf+0x18>
    f0b8:	69a3      	ldr	r3, [r4, #24]
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d102      	bne.n	f0c4 <iprintf+0x18>
    f0be:	0020      	movs	r0, r4
    f0c0:	f001 f9dc 	bl	1047c <__sinit>
    f0c4:	ab05      	add	r3, sp, #20
    f0c6:	9a04      	ldr	r2, [sp, #16]
    f0c8:	68a1      	ldr	r1, [r4, #8]
    f0ca:	0020      	movs	r0, r4
    f0cc:	9301      	str	r3, [sp, #4]
    f0ce:	f001 ff6f 	bl	10fb0 <_vfiprintf_r>
    f0d2:	bc16      	pop	{r1, r2, r4}
    f0d4:	bc08      	pop	{r3}
    f0d6:	b004      	add	sp, #16
    f0d8:	4718      	bx	r3
    f0da:	46c0      	nop			; (mov r8, r8)
    f0dc:	20000080 	.word	0x20000080

0000f0e0 <putchar>:
    f0e0:	4b08      	ldr	r3, [pc, #32]	; (f104 <putchar+0x24>)
    f0e2:	b570      	push	{r4, r5, r6, lr}
    f0e4:	681c      	ldr	r4, [r3, #0]
    f0e6:	0005      	movs	r5, r0
    f0e8:	2c00      	cmp	r4, #0
    f0ea:	d005      	beq.n	f0f8 <putchar+0x18>
    f0ec:	69a3      	ldr	r3, [r4, #24]
    f0ee:	2b00      	cmp	r3, #0
    f0f0:	d102      	bne.n	f0f8 <putchar+0x18>
    f0f2:	0020      	movs	r0, r4
    f0f4:	f001 f9c2 	bl	1047c <__sinit>
    f0f8:	0029      	movs	r1, r5
    f0fa:	68a2      	ldr	r2, [r4, #8]
    f0fc:	0020      	movs	r0, r4
    f0fe:	f002 f873 	bl	111e8 <_putc_r>
    f102:	bd70      	pop	{r4, r5, r6, pc}
    f104:	20000080 	.word	0x20000080

0000f108 <_puts_r>:
    f108:	b570      	push	{r4, r5, r6, lr}
    f10a:	0005      	movs	r5, r0
    f10c:	000e      	movs	r6, r1
    f10e:	2800      	cmp	r0, #0
    f110:	d004      	beq.n	f11c <_puts_r+0x14>
    f112:	6983      	ldr	r3, [r0, #24]
    f114:	2b00      	cmp	r3, #0
    f116:	d101      	bne.n	f11c <_puts_r+0x14>
    f118:	f001 f9b0 	bl	1047c <__sinit>
    f11c:	69ab      	ldr	r3, [r5, #24]
    f11e:	68ac      	ldr	r4, [r5, #8]
    f120:	2b00      	cmp	r3, #0
    f122:	d102      	bne.n	f12a <_puts_r+0x22>
    f124:	0028      	movs	r0, r5
    f126:	f001 f9a9 	bl	1047c <__sinit>
    f12a:	4b24      	ldr	r3, [pc, #144]	; (f1bc <_puts_r+0xb4>)
    f12c:	429c      	cmp	r4, r3
    f12e:	d10f      	bne.n	f150 <_puts_r+0x48>
    f130:	686c      	ldr	r4, [r5, #4]
    f132:	89a3      	ldrh	r3, [r4, #12]
    f134:	071b      	lsls	r3, r3, #28
    f136:	d502      	bpl.n	f13e <_puts_r+0x36>
    f138:	6923      	ldr	r3, [r4, #16]
    f13a:	2b00      	cmp	r3, #0
    f13c:	d120      	bne.n	f180 <_puts_r+0x78>
    f13e:	0021      	movs	r1, r4
    f140:	0028      	movs	r0, r5
    f142:	f000 f9c1 	bl	f4c8 <__swsetup_r>
    f146:	2800      	cmp	r0, #0
    f148:	d01a      	beq.n	f180 <_puts_r+0x78>
    f14a:	2001      	movs	r0, #1
    f14c:	4240      	negs	r0, r0
    f14e:	bd70      	pop	{r4, r5, r6, pc}
    f150:	4b1b      	ldr	r3, [pc, #108]	; (f1c0 <_puts_r+0xb8>)
    f152:	429c      	cmp	r4, r3
    f154:	d101      	bne.n	f15a <_puts_r+0x52>
    f156:	68ac      	ldr	r4, [r5, #8]
    f158:	e7eb      	b.n	f132 <_puts_r+0x2a>
    f15a:	4b1a      	ldr	r3, [pc, #104]	; (f1c4 <_puts_r+0xbc>)
    f15c:	429c      	cmp	r4, r3
    f15e:	d1e8      	bne.n	f132 <_puts_r+0x2a>
    f160:	68ec      	ldr	r4, [r5, #12]
    f162:	e7e6      	b.n	f132 <_puts_r+0x2a>
    f164:	3b01      	subs	r3, #1
    f166:	3601      	adds	r6, #1
    f168:	60a3      	str	r3, [r4, #8]
    f16a:	2b00      	cmp	r3, #0
    f16c:	da04      	bge.n	f178 <_puts_r+0x70>
    f16e:	69a2      	ldr	r2, [r4, #24]
    f170:	4293      	cmp	r3, r2
    f172:	db16      	blt.n	f1a2 <_puts_r+0x9a>
    f174:	290a      	cmp	r1, #10
    f176:	d014      	beq.n	f1a2 <_puts_r+0x9a>
    f178:	6823      	ldr	r3, [r4, #0]
    f17a:	1c5a      	adds	r2, r3, #1
    f17c:	6022      	str	r2, [r4, #0]
    f17e:	7019      	strb	r1, [r3, #0]
    f180:	7831      	ldrb	r1, [r6, #0]
    f182:	68a3      	ldr	r3, [r4, #8]
    f184:	2900      	cmp	r1, #0
    f186:	d1ed      	bne.n	f164 <_puts_r+0x5c>
    f188:	3b01      	subs	r3, #1
    f18a:	60a3      	str	r3, [r4, #8]
    f18c:	2b00      	cmp	r3, #0
    f18e:	da0f      	bge.n	f1b0 <_puts_r+0xa8>
    f190:	0022      	movs	r2, r4
    f192:	310a      	adds	r1, #10
    f194:	0028      	movs	r0, r5
    f196:	f000 f935 	bl	f404 <__swbuf_r>
    f19a:	1c43      	adds	r3, r0, #1
    f19c:	d0d5      	beq.n	f14a <_puts_r+0x42>
    f19e:	200a      	movs	r0, #10
    f1a0:	e7d5      	b.n	f14e <_puts_r+0x46>
    f1a2:	0022      	movs	r2, r4
    f1a4:	0028      	movs	r0, r5
    f1a6:	f000 f92d 	bl	f404 <__swbuf_r>
    f1aa:	1c43      	adds	r3, r0, #1
    f1ac:	d1e8      	bne.n	f180 <_puts_r+0x78>
    f1ae:	e7cc      	b.n	f14a <_puts_r+0x42>
    f1b0:	200a      	movs	r0, #10
    f1b2:	6823      	ldr	r3, [r4, #0]
    f1b4:	1c5a      	adds	r2, r3, #1
    f1b6:	6022      	str	r2, [r4, #0]
    f1b8:	7018      	strb	r0, [r3, #0]
    f1ba:	e7c8      	b.n	f14e <_puts_r+0x46>
    f1bc:	00015214 	.word	0x00015214
    f1c0:	00015234 	.word	0x00015234
    f1c4:	000151f4 	.word	0x000151f4

0000f1c8 <puts>:
    f1c8:	b510      	push	{r4, lr}
    f1ca:	4b03      	ldr	r3, [pc, #12]	; (f1d8 <puts+0x10>)
    f1cc:	0001      	movs	r1, r0
    f1ce:	6818      	ldr	r0, [r3, #0]
    f1d0:	f7ff ff9a 	bl	f108 <_puts_r>
    f1d4:	bd10      	pop	{r4, pc}
    f1d6:	46c0      	nop			; (mov r8, r8)
    f1d8:	20000080 	.word	0x20000080

0000f1dc <_sbrk_r>:
    f1dc:	2300      	movs	r3, #0
    f1de:	b570      	push	{r4, r5, r6, lr}
    f1e0:	4c06      	ldr	r4, [pc, #24]	; (f1fc <_sbrk_r+0x20>)
    f1e2:	0005      	movs	r5, r0
    f1e4:	0008      	movs	r0, r1
    f1e6:	6023      	str	r3, [r4, #0]
    f1e8:	f7fd fbb8 	bl	c95c <_sbrk>
    f1ec:	1c43      	adds	r3, r0, #1
    f1ee:	d103      	bne.n	f1f8 <_sbrk_r+0x1c>
    f1f0:	6823      	ldr	r3, [r4, #0]
    f1f2:	2b00      	cmp	r3, #0
    f1f4:	d000      	beq.n	f1f8 <_sbrk_r+0x1c>
    f1f6:	602b      	str	r3, [r5, #0]
    f1f8:	bd70      	pop	{r4, r5, r6, pc}
    f1fa:	46c0      	nop			; (mov r8, r8)
    f1fc:	200007f8 	.word	0x200007f8

0000f200 <setbuf>:
    f200:	424a      	negs	r2, r1
    f202:	414a      	adcs	r2, r1
    f204:	2380      	movs	r3, #128	; 0x80
    f206:	b510      	push	{r4, lr}
    f208:	0052      	lsls	r2, r2, #1
    f20a:	00db      	lsls	r3, r3, #3
    f20c:	f000 f802 	bl	f214 <setvbuf>
    f210:	bd10      	pop	{r4, pc}
	...

0000f214 <setvbuf>:
    f214:	b5f0      	push	{r4, r5, r6, r7, lr}
    f216:	001d      	movs	r5, r3
    f218:	4b4f      	ldr	r3, [pc, #316]	; (f358 <setvbuf+0x144>)
    f21a:	b085      	sub	sp, #20
    f21c:	681e      	ldr	r6, [r3, #0]
    f21e:	0004      	movs	r4, r0
    f220:	000f      	movs	r7, r1
    f222:	9200      	str	r2, [sp, #0]
    f224:	2e00      	cmp	r6, #0
    f226:	d005      	beq.n	f234 <setvbuf+0x20>
    f228:	69b3      	ldr	r3, [r6, #24]
    f22a:	2b00      	cmp	r3, #0
    f22c:	d102      	bne.n	f234 <setvbuf+0x20>
    f22e:	0030      	movs	r0, r6
    f230:	f001 f924 	bl	1047c <__sinit>
    f234:	4b49      	ldr	r3, [pc, #292]	; (f35c <setvbuf+0x148>)
    f236:	429c      	cmp	r4, r3
    f238:	d150      	bne.n	f2dc <setvbuf+0xc8>
    f23a:	6874      	ldr	r4, [r6, #4]
    f23c:	9b00      	ldr	r3, [sp, #0]
    f23e:	2b02      	cmp	r3, #2
    f240:	d005      	beq.n	f24e <setvbuf+0x3a>
    f242:	2b01      	cmp	r3, #1
    f244:	d900      	bls.n	f248 <setvbuf+0x34>
    f246:	e084      	b.n	f352 <setvbuf+0x13e>
    f248:	2d00      	cmp	r5, #0
    f24a:	da00      	bge.n	f24e <setvbuf+0x3a>
    f24c:	e081      	b.n	f352 <setvbuf+0x13e>
    f24e:	0021      	movs	r1, r4
    f250:	0030      	movs	r0, r6
    f252:	f001 f8a5 	bl	103a0 <_fflush_r>
    f256:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f258:	2900      	cmp	r1, #0
    f25a:	d008      	beq.n	f26e <setvbuf+0x5a>
    f25c:	0023      	movs	r3, r4
    f25e:	3344      	adds	r3, #68	; 0x44
    f260:	4299      	cmp	r1, r3
    f262:	d002      	beq.n	f26a <setvbuf+0x56>
    f264:	0030      	movs	r0, r6
    f266:	f7ff fa09 	bl	e67c <_free_r>
    f26a:	2300      	movs	r3, #0
    f26c:	6363      	str	r3, [r4, #52]	; 0x34
    f26e:	2300      	movs	r3, #0
    f270:	61a3      	str	r3, [r4, #24]
    f272:	6063      	str	r3, [r4, #4]
    f274:	89a3      	ldrh	r3, [r4, #12]
    f276:	061b      	lsls	r3, r3, #24
    f278:	d503      	bpl.n	f282 <setvbuf+0x6e>
    f27a:	6921      	ldr	r1, [r4, #16]
    f27c:	0030      	movs	r0, r6
    f27e:	f7ff f9fd 	bl	e67c <_free_r>
    f282:	89a3      	ldrh	r3, [r4, #12]
    f284:	4a36      	ldr	r2, [pc, #216]	; (f360 <setvbuf+0x14c>)
    f286:	4013      	ands	r3, r2
    f288:	81a3      	strh	r3, [r4, #12]
    f28a:	9b00      	ldr	r3, [sp, #0]
    f28c:	2b02      	cmp	r3, #2
    f28e:	d05a      	beq.n	f346 <setvbuf+0x132>
    f290:	ab03      	add	r3, sp, #12
    f292:	aa02      	add	r2, sp, #8
    f294:	0021      	movs	r1, r4
    f296:	0030      	movs	r0, r6
    f298:	f001 f992 	bl	105c0 <__swhatbuf_r>
    f29c:	89a3      	ldrh	r3, [r4, #12]
    f29e:	4318      	orrs	r0, r3
    f2a0:	81a0      	strh	r0, [r4, #12]
    f2a2:	2d00      	cmp	r5, #0
    f2a4:	d124      	bne.n	f2f0 <setvbuf+0xdc>
    f2a6:	9d02      	ldr	r5, [sp, #8]
    f2a8:	0028      	movs	r0, r5
    f2aa:	f7ff f9a7 	bl	e5fc <malloc>
    f2ae:	9501      	str	r5, [sp, #4]
    f2b0:	1e07      	subs	r7, r0, #0
    f2b2:	d142      	bne.n	f33a <setvbuf+0x126>
    f2b4:	9b02      	ldr	r3, [sp, #8]
    f2b6:	9301      	str	r3, [sp, #4]
    f2b8:	42ab      	cmp	r3, r5
    f2ba:	d139      	bne.n	f330 <setvbuf+0x11c>
    f2bc:	2001      	movs	r0, #1
    f2be:	4240      	negs	r0, r0
    f2c0:	2302      	movs	r3, #2
    f2c2:	89a2      	ldrh	r2, [r4, #12]
    f2c4:	4313      	orrs	r3, r2
    f2c6:	81a3      	strh	r3, [r4, #12]
    f2c8:	2300      	movs	r3, #0
    f2ca:	60a3      	str	r3, [r4, #8]
    f2cc:	0023      	movs	r3, r4
    f2ce:	3347      	adds	r3, #71	; 0x47
    f2d0:	6023      	str	r3, [r4, #0]
    f2d2:	6123      	str	r3, [r4, #16]
    f2d4:	2301      	movs	r3, #1
    f2d6:	6163      	str	r3, [r4, #20]
    f2d8:	b005      	add	sp, #20
    f2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2dc:	4b21      	ldr	r3, [pc, #132]	; (f364 <setvbuf+0x150>)
    f2de:	429c      	cmp	r4, r3
    f2e0:	d101      	bne.n	f2e6 <setvbuf+0xd2>
    f2e2:	68b4      	ldr	r4, [r6, #8]
    f2e4:	e7aa      	b.n	f23c <setvbuf+0x28>
    f2e6:	4b20      	ldr	r3, [pc, #128]	; (f368 <setvbuf+0x154>)
    f2e8:	429c      	cmp	r4, r3
    f2ea:	d1a7      	bne.n	f23c <setvbuf+0x28>
    f2ec:	68f4      	ldr	r4, [r6, #12]
    f2ee:	e7a5      	b.n	f23c <setvbuf+0x28>
    f2f0:	2f00      	cmp	r7, #0
    f2f2:	d0d9      	beq.n	f2a8 <setvbuf+0x94>
    f2f4:	69b3      	ldr	r3, [r6, #24]
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d102      	bne.n	f300 <setvbuf+0xec>
    f2fa:	0030      	movs	r0, r6
    f2fc:	f001 f8be 	bl	1047c <__sinit>
    f300:	9b00      	ldr	r3, [sp, #0]
    f302:	2b01      	cmp	r3, #1
    f304:	d103      	bne.n	f30e <setvbuf+0xfa>
    f306:	89a3      	ldrh	r3, [r4, #12]
    f308:	9a00      	ldr	r2, [sp, #0]
    f30a:	431a      	orrs	r2, r3
    f30c:	81a2      	strh	r2, [r4, #12]
    f30e:	2008      	movs	r0, #8
    f310:	89a3      	ldrh	r3, [r4, #12]
    f312:	6027      	str	r7, [r4, #0]
    f314:	6127      	str	r7, [r4, #16]
    f316:	6165      	str	r5, [r4, #20]
    f318:	4018      	ands	r0, r3
    f31a:	d018      	beq.n	f34e <setvbuf+0x13a>
    f31c:	2001      	movs	r0, #1
    f31e:	4018      	ands	r0, r3
    f320:	2300      	movs	r3, #0
    f322:	4298      	cmp	r0, r3
    f324:	d011      	beq.n	f34a <setvbuf+0x136>
    f326:	426d      	negs	r5, r5
    f328:	60a3      	str	r3, [r4, #8]
    f32a:	61a5      	str	r5, [r4, #24]
    f32c:	0018      	movs	r0, r3
    f32e:	e7d3      	b.n	f2d8 <setvbuf+0xc4>
    f330:	9801      	ldr	r0, [sp, #4]
    f332:	f7ff f963 	bl	e5fc <malloc>
    f336:	1e07      	subs	r7, r0, #0
    f338:	d0c0      	beq.n	f2bc <setvbuf+0xa8>
    f33a:	2380      	movs	r3, #128	; 0x80
    f33c:	89a2      	ldrh	r2, [r4, #12]
    f33e:	9d01      	ldr	r5, [sp, #4]
    f340:	4313      	orrs	r3, r2
    f342:	81a3      	strh	r3, [r4, #12]
    f344:	e7d6      	b.n	f2f4 <setvbuf+0xe0>
    f346:	2000      	movs	r0, #0
    f348:	e7ba      	b.n	f2c0 <setvbuf+0xac>
    f34a:	60a5      	str	r5, [r4, #8]
    f34c:	e7c4      	b.n	f2d8 <setvbuf+0xc4>
    f34e:	60a0      	str	r0, [r4, #8]
    f350:	e7c2      	b.n	f2d8 <setvbuf+0xc4>
    f352:	2001      	movs	r0, #1
    f354:	4240      	negs	r0, r0
    f356:	e7bf      	b.n	f2d8 <setvbuf+0xc4>
    f358:	20000080 	.word	0x20000080
    f35c:	00015214 	.word	0x00015214
    f360:	fffff35c 	.word	0xfffff35c
    f364:	00015234 	.word	0x00015234
    f368:	000151f4 	.word	0x000151f4

0000f36c <siprintf>:
    f36c:	b40e      	push	{r1, r2, r3}
    f36e:	b510      	push	{r4, lr}
    f370:	b09d      	sub	sp, #116	; 0x74
    f372:	a902      	add	r1, sp, #8
    f374:	9002      	str	r0, [sp, #8]
    f376:	6108      	str	r0, [r1, #16]
    f378:	480b      	ldr	r0, [pc, #44]	; (f3a8 <siprintf+0x3c>)
    f37a:	2482      	movs	r4, #130	; 0x82
    f37c:	6088      	str	r0, [r1, #8]
    f37e:	6148      	str	r0, [r1, #20]
    f380:	2001      	movs	r0, #1
    f382:	4240      	negs	r0, r0
    f384:	ab1f      	add	r3, sp, #124	; 0x7c
    f386:	81c8      	strh	r0, [r1, #14]
    f388:	4808      	ldr	r0, [pc, #32]	; (f3ac <siprintf+0x40>)
    f38a:	cb04      	ldmia	r3!, {r2}
    f38c:	00a4      	lsls	r4, r4, #2
    f38e:	6800      	ldr	r0, [r0, #0]
    f390:	9301      	str	r3, [sp, #4]
    f392:	818c      	strh	r4, [r1, #12]
    f394:	f001 fce0 	bl	10d58 <_svfiprintf_r>
    f398:	2300      	movs	r3, #0
    f39a:	9a02      	ldr	r2, [sp, #8]
    f39c:	7013      	strb	r3, [r2, #0]
    f39e:	b01d      	add	sp, #116	; 0x74
    f3a0:	bc10      	pop	{r4}
    f3a2:	bc08      	pop	{r3}
    f3a4:	b003      	add	sp, #12
    f3a6:	4718      	bx	r3
    f3a8:	7fffffff 	.word	0x7fffffff
    f3ac:	20000080 	.word	0x20000080

0000f3b0 <strcmp>:
    f3b0:	7802      	ldrb	r2, [r0, #0]
    f3b2:	780b      	ldrb	r3, [r1, #0]
    f3b4:	2a00      	cmp	r2, #0
    f3b6:	d003      	beq.n	f3c0 <strcmp+0x10>
    f3b8:	3001      	adds	r0, #1
    f3ba:	3101      	adds	r1, #1
    f3bc:	429a      	cmp	r2, r3
    f3be:	d0f7      	beq.n	f3b0 <strcmp>
    f3c0:	1ad0      	subs	r0, r2, r3
    f3c2:	4770      	bx	lr

0000f3c4 <strcpy>:
    f3c4:	1c03      	adds	r3, r0, #0
    f3c6:	780a      	ldrb	r2, [r1, #0]
    f3c8:	3101      	adds	r1, #1
    f3ca:	701a      	strb	r2, [r3, #0]
    f3cc:	3301      	adds	r3, #1
    f3ce:	2a00      	cmp	r2, #0
    f3d0:	d1f9      	bne.n	f3c6 <strcpy+0x2>
    f3d2:	4770      	bx	lr

0000f3d4 <strlen>:
    f3d4:	2300      	movs	r3, #0
    f3d6:	5cc2      	ldrb	r2, [r0, r3]
    f3d8:	3301      	adds	r3, #1
    f3da:	2a00      	cmp	r2, #0
    f3dc:	d1fb      	bne.n	f3d6 <strlen+0x2>
    f3de:	1e58      	subs	r0, r3, #1
    f3e0:	4770      	bx	lr

0000f3e2 <strncmp>:
    f3e2:	2300      	movs	r3, #0
    f3e4:	b530      	push	{r4, r5, lr}
    f3e6:	429a      	cmp	r2, r3
    f3e8:	d00a      	beq.n	f400 <strncmp+0x1e>
    f3ea:	3a01      	subs	r2, #1
    f3ec:	5cc4      	ldrb	r4, [r0, r3]
    f3ee:	5ccd      	ldrb	r5, [r1, r3]
    f3f0:	42ac      	cmp	r4, r5
    f3f2:	d104      	bne.n	f3fe <strncmp+0x1c>
    f3f4:	429a      	cmp	r2, r3
    f3f6:	d002      	beq.n	f3fe <strncmp+0x1c>
    f3f8:	3301      	adds	r3, #1
    f3fa:	2c00      	cmp	r4, #0
    f3fc:	d1f6      	bne.n	f3ec <strncmp+0xa>
    f3fe:	1b63      	subs	r3, r4, r5
    f400:	0018      	movs	r0, r3
    f402:	bd30      	pop	{r4, r5, pc}

0000f404 <__swbuf_r>:
    f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f406:	0005      	movs	r5, r0
    f408:	000e      	movs	r6, r1
    f40a:	0014      	movs	r4, r2
    f40c:	2800      	cmp	r0, #0
    f40e:	d004      	beq.n	f41a <__swbuf_r+0x16>
    f410:	6983      	ldr	r3, [r0, #24]
    f412:	2b00      	cmp	r3, #0
    f414:	d101      	bne.n	f41a <__swbuf_r+0x16>
    f416:	f001 f831 	bl	1047c <__sinit>
    f41a:	4b22      	ldr	r3, [pc, #136]	; (f4a4 <__swbuf_r+0xa0>)
    f41c:	429c      	cmp	r4, r3
    f41e:	d12d      	bne.n	f47c <__swbuf_r+0x78>
    f420:	686c      	ldr	r4, [r5, #4]
    f422:	69a3      	ldr	r3, [r4, #24]
    f424:	60a3      	str	r3, [r4, #8]
    f426:	89a3      	ldrh	r3, [r4, #12]
    f428:	071b      	lsls	r3, r3, #28
    f42a:	d531      	bpl.n	f490 <__swbuf_r+0x8c>
    f42c:	6923      	ldr	r3, [r4, #16]
    f42e:	2b00      	cmp	r3, #0
    f430:	d02e      	beq.n	f490 <__swbuf_r+0x8c>
    f432:	6823      	ldr	r3, [r4, #0]
    f434:	6922      	ldr	r2, [r4, #16]
    f436:	b2f7      	uxtb	r7, r6
    f438:	1a98      	subs	r0, r3, r2
    f43a:	6963      	ldr	r3, [r4, #20]
    f43c:	b2f6      	uxtb	r6, r6
    f43e:	4298      	cmp	r0, r3
    f440:	db05      	blt.n	f44e <__swbuf_r+0x4a>
    f442:	0021      	movs	r1, r4
    f444:	0028      	movs	r0, r5
    f446:	f000 ffab 	bl	103a0 <_fflush_r>
    f44a:	2800      	cmp	r0, #0
    f44c:	d126      	bne.n	f49c <__swbuf_r+0x98>
    f44e:	68a3      	ldr	r3, [r4, #8]
    f450:	3001      	adds	r0, #1
    f452:	3b01      	subs	r3, #1
    f454:	60a3      	str	r3, [r4, #8]
    f456:	6823      	ldr	r3, [r4, #0]
    f458:	1c5a      	adds	r2, r3, #1
    f45a:	6022      	str	r2, [r4, #0]
    f45c:	701f      	strb	r7, [r3, #0]
    f45e:	6963      	ldr	r3, [r4, #20]
    f460:	4298      	cmp	r0, r3
    f462:	d004      	beq.n	f46e <__swbuf_r+0x6a>
    f464:	89a3      	ldrh	r3, [r4, #12]
    f466:	07db      	lsls	r3, r3, #31
    f468:	d51a      	bpl.n	f4a0 <__swbuf_r+0x9c>
    f46a:	2e0a      	cmp	r6, #10
    f46c:	d118      	bne.n	f4a0 <__swbuf_r+0x9c>
    f46e:	0021      	movs	r1, r4
    f470:	0028      	movs	r0, r5
    f472:	f000 ff95 	bl	103a0 <_fflush_r>
    f476:	2800      	cmp	r0, #0
    f478:	d012      	beq.n	f4a0 <__swbuf_r+0x9c>
    f47a:	e00f      	b.n	f49c <__swbuf_r+0x98>
    f47c:	4b0a      	ldr	r3, [pc, #40]	; (f4a8 <__swbuf_r+0xa4>)
    f47e:	429c      	cmp	r4, r3
    f480:	d101      	bne.n	f486 <__swbuf_r+0x82>
    f482:	68ac      	ldr	r4, [r5, #8]
    f484:	e7cd      	b.n	f422 <__swbuf_r+0x1e>
    f486:	4b09      	ldr	r3, [pc, #36]	; (f4ac <__swbuf_r+0xa8>)
    f488:	429c      	cmp	r4, r3
    f48a:	d1ca      	bne.n	f422 <__swbuf_r+0x1e>
    f48c:	68ec      	ldr	r4, [r5, #12]
    f48e:	e7c8      	b.n	f422 <__swbuf_r+0x1e>
    f490:	0021      	movs	r1, r4
    f492:	0028      	movs	r0, r5
    f494:	f000 f818 	bl	f4c8 <__swsetup_r>
    f498:	2800      	cmp	r0, #0
    f49a:	d0ca      	beq.n	f432 <__swbuf_r+0x2e>
    f49c:	2601      	movs	r6, #1
    f49e:	4276      	negs	r6, r6
    f4a0:	0030      	movs	r0, r6
    f4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f4a4:	00015214 	.word	0x00015214
    f4a8:	00015234 	.word	0x00015234
    f4ac:	000151f4 	.word	0x000151f4

0000f4b0 <__ascii_wctomb>:
    f4b0:	1e0b      	subs	r3, r1, #0
    f4b2:	d004      	beq.n	f4be <__ascii_wctomb+0xe>
    f4b4:	2aff      	cmp	r2, #255	; 0xff
    f4b6:	d904      	bls.n	f4c2 <__ascii_wctomb+0x12>
    f4b8:	238a      	movs	r3, #138	; 0x8a
    f4ba:	6003      	str	r3, [r0, #0]
    f4bc:	3b8b      	subs	r3, #139	; 0x8b
    f4be:	0018      	movs	r0, r3
    f4c0:	4770      	bx	lr
    f4c2:	700a      	strb	r2, [r1, #0]
    f4c4:	2301      	movs	r3, #1
    f4c6:	e7fa      	b.n	f4be <__ascii_wctomb+0xe>

0000f4c8 <__swsetup_r>:
    f4c8:	4b36      	ldr	r3, [pc, #216]	; (f5a4 <__swsetup_r+0xdc>)
    f4ca:	b570      	push	{r4, r5, r6, lr}
    f4cc:	681d      	ldr	r5, [r3, #0]
    f4ce:	0006      	movs	r6, r0
    f4d0:	000c      	movs	r4, r1
    f4d2:	2d00      	cmp	r5, #0
    f4d4:	d005      	beq.n	f4e2 <__swsetup_r+0x1a>
    f4d6:	69ab      	ldr	r3, [r5, #24]
    f4d8:	2b00      	cmp	r3, #0
    f4da:	d102      	bne.n	f4e2 <__swsetup_r+0x1a>
    f4dc:	0028      	movs	r0, r5
    f4de:	f000 ffcd 	bl	1047c <__sinit>
    f4e2:	4b31      	ldr	r3, [pc, #196]	; (f5a8 <__swsetup_r+0xe0>)
    f4e4:	429c      	cmp	r4, r3
    f4e6:	d10f      	bne.n	f508 <__swsetup_r+0x40>
    f4e8:	686c      	ldr	r4, [r5, #4]
    f4ea:	230c      	movs	r3, #12
    f4ec:	5ee2      	ldrsh	r2, [r4, r3]
    f4ee:	b293      	uxth	r3, r2
    f4f0:	0719      	lsls	r1, r3, #28
    f4f2:	d42d      	bmi.n	f550 <__swsetup_r+0x88>
    f4f4:	06d9      	lsls	r1, r3, #27
    f4f6:	d411      	bmi.n	f51c <__swsetup_r+0x54>
    f4f8:	2309      	movs	r3, #9
    f4fa:	2001      	movs	r0, #1
    f4fc:	6033      	str	r3, [r6, #0]
    f4fe:	3337      	adds	r3, #55	; 0x37
    f500:	4313      	orrs	r3, r2
    f502:	81a3      	strh	r3, [r4, #12]
    f504:	4240      	negs	r0, r0
    f506:	bd70      	pop	{r4, r5, r6, pc}
    f508:	4b28      	ldr	r3, [pc, #160]	; (f5ac <__swsetup_r+0xe4>)
    f50a:	429c      	cmp	r4, r3
    f50c:	d101      	bne.n	f512 <__swsetup_r+0x4a>
    f50e:	68ac      	ldr	r4, [r5, #8]
    f510:	e7eb      	b.n	f4ea <__swsetup_r+0x22>
    f512:	4b27      	ldr	r3, [pc, #156]	; (f5b0 <__swsetup_r+0xe8>)
    f514:	429c      	cmp	r4, r3
    f516:	d1e8      	bne.n	f4ea <__swsetup_r+0x22>
    f518:	68ec      	ldr	r4, [r5, #12]
    f51a:	e7e6      	b.n	f4ea <__swsetup_r+0x22>
    f51c:	075b      	lsls	r3, r3, #29
    f51e:	d513      	bpl.n	f548 <__swsetup_r+0x80>
    f520:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f522:	2900      	cmp	r1, #0
    f524:	d008      	beq.n	f538 <__swsetup_r+0x70>
    f526:	0023      	movs	r3, r4
    f528:	3344      	adds	r3, #68	; 0x44
    f52a:	4299      	cmp	r1, r3
    f52c:	d002      	beq.n	f534 <__swsetup_r+0x6c>
    f52e:	0030      	movs	r0, r6
    f530:	f7ff f8a4 	bl	e67c <_free_r>
    f534:	2300      	movs	r3, #0
    f536:	6363      	str	r3, [r4, #52]	; 0x34
    f538:	2224      	movs	r2, #36	; 0x24
    f53a:	89a3      	ldrh	r3, [r4, #12]
    f53c:	4393      	bics	r3, r2
    f53e:	81a3      	strh	r3, [r4, #12]
    f540:	2300      	movs	r3, #0
    f542:	6063      	str	r3, [r4, #4]
    f544:	6923      	ldr	r3, [r4, #16]
    f546:	6023      	str	r3, [r4, #0]
    f548:	2308      	movs	r3, #8
    f54a:	89a2      	ldrh	r2, [r4, #12]
    f54c:	4313      	orrs	r3, r2
    f54e:	81a3      	strh	r3, [r4, #12]
    f550:	6923      	ldr	r3, [r4, #16]
    f552:	2b00      	cmp	r3, #0
    f554:	d10b      	bne.n	f56e <__swsetup_r+0xa6>
    f556:	21a0      	movs	r1, #160	; 0xa0
    f558:	2280      	movs	r2, #128	; 0x80
    f55a:	89a3      	ldrh	r3, [r4, #12]
    f55c:	0089      	lsls	r1, r1, #2
    f55e:	0092      	lsls	r2, r2, #2
    f560:	400b      	ands	r3, r1
    f562:	4293      	cmp	r3, r2
    f564:	d003      	beq.n	f56e <__swsetup_r+0xa6>
    f566:	0021      	movs	r1, r4
    f568:	0030      	movs	r0, r6
    f56a:	f001 f851 	bl	10610 <__smakebuf_r>
    f56e:	2301      	movs	r3, #1
    f570:	89a2      	ldrh	r2, [r4, #12]
    f572:	4013      	ands	r3, r2
    f574:	d011      	beq.n	f59a <__swsetup_r+0xd2>
    f576:	2300      	movs	r3, #0
    f578:	60a3      	str	r3, [r4, #8]
    f57a:	6963      	ldr	r3, [r4, #20]
    f57c:	425b      	negs	r3, r3
    f57e:	61a3      	str	r3, [r4, #24]
    f580:	2000      	movs	r0, #0
    f582:	6923      	ldr	r3, [r4, #16]
    f584:	4283      	cmp	r3, r0
    f586:	d1be      	bne.n	f506 <__swsetup_r+0x3e>
    f588:	230c      	movs	r3, #12
    f58a:	5ee2      	ldrsh	r2, [r4, r3]
    f58c:	0613      	lsls	r3, r2, #24
    f58e:	d5ba      	bpl.n	f506 <__swsetup_r+0x3e>
    f590:	2340      	movs	r3, #64	; 0x40
    f592:	4313      	orrs	r3, r2
    f594:	81a3      	strh	r3, [r4, #12]
    f596:	3801      	subs	r0, #1
    f598:	e7b5      	b.n	f506 <__swsetup_r+0x3e>
    f59a:	0792      	lsls	r2, r2, #30
    f59c:	d400      	bmi.n	f5a0 <__swsetup_r+0xd8>
    f59e:	6963      	ldr	r3, [r4, #20]
    f5a0:	60a3      	str	r3, [r4, #8]
    f5a2:	e7ed      	b.n	f580 <__swsetup_r+0xb8>
    f5a4:	20000080 	.word	0x20000080
    f5a8:	00015214 	.word	0x00015214
    f5ac:	00015234 	.word	0x00015234
    f5b0:	000151f4 	.word	0x000151f4

0000f5b4 <quorem>:
    f5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5b6:	6903      	ldr	r3, [r0, #16]
    f5b8:	690c      	ldr	r4, [r1, #16]
    f5ba:	b089      	sub	sp, #36	; 0x24
    f5bc:	0007      	movs	r7, r0
    f5be:	9105      	str	r1, [sp, #20]
    f5c0:	2600      	movs	r6, #0
    f5c2:	429c      	cmp	r4, r3
    f5c4:	dc6d      	bgt.n	f6a2 <quorem+0xee>
    f5c6:	000b      	movs	r3, r1
    f5c8:	3c01      	subs	r4, #1
    f5ca:	3314      	adds	r3, #20
    f5cc:	00a5      	lsls	r5, r4, #2
    f5ce:	9303      	str	r3, [sp, #12]
    f5d0:	195b      	adds	r3, r3, r5
    f5d2:	9304      	str	r3, [sp, #16]
    f5d4:	0003      	movs	r3, r0
    f5d6:	3314      	adds	r3, #20
    f5d8:	9302      	str	r3, [sp, #8]
    f5da:	195d      	adds	r5, r3, r5
    f5dc:	9b04      	ldr	r3, [sp, #16]
    f5de:	6828      	ldr	r0, [r5, #0]
    f5e0:	681b      	ldr	r3, [r3, #0]
    f5e2:	1c59      	adds	r1, r3, #1
    f5e4:	9301      	str	r3, [sp, #4]
    f5e6:	f001 ff2b 	bl	11440 <__udivsi3>
    f5ea:	9001      	str	r0, [sp, #4]
    f5ec:	42b0      	cmp	r0, r6
    f5ee:	d02d      	beq.n	f64c <quorem+0x98>
    f5f0:	9b03      	ldr	r3, [sp, #12]
    f5f2:	9802      	ldr	r0, [sp, #8]
    f5f4:	469c      	mov	ip, r3
    f5f6:	9606      	str	r6, [sp, #24]
    f5f8:	4662      	mov	r2, ip
    f5fa:	ca08      	ldmia	r2!, {r3}
    f5fc:	4694      	mov	ip, r2
    f5fe:	9a01      	ldr	r2, [sp, #4]
    f600:	b299      	uxth	r1, r3
    f602:	4351      	muls	r1, r2
    f604:	0c1b      	lsrs	r3, r3, #16
    f606:	4353      	muls	r3, r2
    f608:	1989      	adds	r1, r1, r6
    f60a:	0c0a      	lsrs	r2, r1, #16
    f60c:	189b      	adds	r3, r3, r2
    f60e:	9307      	str	r3, [sp, #28]
    f610:	8802      	ldrh	r2, [r0, #0]
    f612:	0c1e      	lsrs	r6, r3, #16
    f614:	9b06      	ldr	r3, [sp, #24]
    f616:	b289      	uxth	r1, r1
    f618:	18d2      	adds	r2, r2, r3
    f61a:	6803      	ldr	r3, [r0, #0]
    f61c:	1a52      	subs	r2, r2, r1
    f61e:	0c19      	lsrs	r1, r3, #16
    f620:	466b      	mov	r3, sp
    f622:	8b9b      	ldrh	r3, [r3, #28]
    f624:	1acb      	subs	r3, r1, r3
    f626:	1411      	asrs	r1, r2, #16
    f628:	185b      	adds	r3, r3, r1
    f62a:	1419      	asrs	r1, r3, #16
    f62c:	b292      	uxth	r2, r2
    f62e:	041b      	lsls	r3, r3, #16
    f630:	431a      	orrs	r2, r3
    f632:	9b04      	ldr	r3, [sp, #16]
    f634:	9106      	str	r1, [sp, #24]
    f636:	c004      	stmia	r0!, {r2}
    f638:	4563      	cmp	r3, ip
    f63a:	d2dd      	bcs.n	f5f8 <quorem+0x44>
    f63c:	682b      	ldr	r3, [r5, #0]
    f63e:	2b00      	cmp	r3, #0
    f640:	d104      	bne.n	f64c <quorem+0x98>
    f642:	9b02      	ldr	r3, [sp, #8]
    f644:	3d04      	subs	r5, #4
    f646:	42ab      	cmp	r3, r5
    f648:	d32e      	bcc.n	f6a8 <quorem+0xf4>
    f64a:	613c      	str	r4, [r7, #16]
    f64c:	9905      	ldr	r1, [sp, #20]
    f64e:	0038      	movs	r0, r7
    f650:	f001 fa41 	bl	10ad6 <__mcmp>
    f654:	2800      	cmp	r0, #0
    f656:	db23      	blt.n	f6a0 <quorem+0xec>
    f658:	2500      	movs	r5, #0
    f65a:	9b01      	ldr	r3, [sp, #4]
    f65c:	9802      	ldr	r0, [sp, #8]
    f65e:	3301      	adds	r3, #1
    f660:	9903      	ldr	r1, [sp, #12]
    f662:	9301      	str	r3, [sp, #4]
    f664:	c908      	ldmia	r1!, {r3}
    f666:	8802      	ldrh	r2, [r0, #0]
    f668:	1955      	adds	r5, r2, r5
    f66a:	b29a      	uxth	r2, r3
    f66c:	1aaa      	subs	r2, r5, r2
    f66e:	6805      	ldr	r5, [r0, #0]
    f670:	0c1b      	lsrs	r3, r3, #16
    f672:	0c2d      	lsrs	r5, r5, #16
    f674:	1aeb      	subs	r3, r5, r3
    f676:	1415      	asrs	r5, r2, #16
    f678:	195b      	adds	r3, r3, r5
    f67a:	141d      	asrs	r5, r3, #16
    f67c:	b292      	uxth	r2, r2
    f67e:	041b      	lsls	r3, r3, #16
    f680:	4313      	orrs	r3, r2
    f682:	c008      	stmia	r0!, {r3}
    f684:	9b04      	ldr	r3, [sp, #16]
    f686:	428b      	cmp	r3, r1
    f688:	d2ec      	bcs.n	f664 <quorem+0xb0>
    f68a:	9a02      	ldr	r2, [sp, #8]
    f68c:	00a3      	lsls	r3, r4, #2
    f68e:	18d3      	adds	r3, r2, r3
    f690:	681a      	ldr	r2, [r3, #0]
    f692:	2a00      	cmp	r2, #0
    f694:	d104      	bne.n	f6a0 <quorem+0xec>
    f696:	9a02      	ldr	r2, [sp, #8]
    f698:	3b04      	subs	r3, #4
    f69a:	429a      	cmp	r2, r3
    f69c:	d309      	bcc.n	f6b2 <quorem+0xfe>
    f69e:	613c      	str	r4, [r7, #16]
    f6a0:	9e01      	ldr	r6, [sp, #4]
    f6a2:	0030      	movs	r0, r6
    f6a4:	b009      	add	sp, #36	; 0x24
    f6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f6a8:	682b      	ldr	r3, [r5, #0]
    f6aa:	2b00      	cmp	r3, #0
    f6ac:	d1cd      	bne.n	f64a <quorem+0x96>
    f6ae:	3c01      	subs	r4, #1
    f6b0:	e7c7      	b.n	f642 <quorem+0x8e>
    f6b2:	681a      	ldr	r2, [r3, #0]
    f6b4:	2a00      	cmp	r2, #0
    f6b6:	d1f2      	bne.n	f69e <quorem+0xea>
    f6b8:	3c01      	subs	r4, #1
    f6ba:	e7ec      	b.n	f696 <quorem+0xe2>

0000f6bc <_dtoa_r>:
    f6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6be:	0016      	movs	r6, r2
    f6c0:	001f      	movs	r7, r3
    f6c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    f6c4:	b09d      	sub	sp, #116	; 0x74
    f6c6:	9004      	str	r0, [sp, #16]
    f6c8:	9d25      	ldr	r5, [sp, #148]	; 0x94
    f6ca:	9606      	str	r6, [sp, #24]
    f6cc:	9707      	str	r7, [sp, #28]
    f6ce:	2c00      	cmp	r4, #0
    f6d0:	d108      	bne.n	f6e4 <_dtoa_r+0x28>
    f6d2:	2010      	movs	r0, #16
    f6d4:	f7fe ff92 	bl	e5fc <malloc>
    f6d8:	9b04      	ldr	r3, [sp, #16]
    f6da:	6258      	str	r0, [r3, #36]	; 0x24
    f6dc:	6044      	str	r4, [r0, #4]
    f6de:	6084      	str	r4, [r0, #8]
    f6e0:	6004      	str	r4, [r0, #0]
    f6e2:	60c4      	str	r4, [r0, #12]
    f6e4:	9b04      	ldr	r3, [sp, #16]
    f6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f6e8:	6819      	ldr	r1, [r3, #0]
    f6ea:	2900      	cmp	r1, #0
    f6ec:	d00b      	beq.n	f706 <_dtoa_r+0x4a>
    f6ee:	685a      	ldr	r2, [r3, #4]
    f6f0:	2301      	movs	r3, #1
    f6f2:	4093      	lsls	r3, r2
    f6f4:	604a      	str	r2, [r1, #4]
    f6f6:	608b      	str	r3, [r1, #8]
    f6f8:	9804      	ldr	r0, [sp, #16]
    f6fa:	f001 f812 	bl	10722 <_Bfree>
    f6fe:	2200      	movs	r2, #0
    f700:	9b04      	ldr	r3, [sp, #16]
    f702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f704:	601a      	str	r2, [r3, #0]
    f706:	9b07      	ldr	r3, [sp, #28]
    f708:	2b00      	cmp	r3, #0
    f70a:	da1f      	bge.n	f74c <_dtoa_r+0x90>
    f70c:	2301      	movs	r3, #1
    f70e:	602b      	str	r3, [r5, #0]
    f710:	007b      	lsls	r3, r7, #1
    f712:	085b      	lsrs	r3, r3, #1
    f714:	9307      	str	r3, [sp, #28]
    f716:	9c07      	ldr	r4, [sp, #28]
    f718:	4bb7      	ldr	r3, [pc, #732]	; (f9f8 <_dtoa_r+0x33c>)
    f71a:	0022      	movs	r2, r4
    f71c:	9319      	str	r3, [sp, #100]	; 0x64
    f71e:	401a      	ands	r2, r3
    f720:	429a      	cmp	r2, r3
    f722:	d116      	bne.n	f752 <_dtoa_r+0x96>
    f724:	4bb5      	ldr	r3, [pc, #724]	; (f9fc <_dtoa_r+0x340>)
    f726:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f728:	6013      	str	r3, [r2, #0]
    f72a:	9b06      	ldr	r3, [sp, #24]
    f72c:	2b00      	cmp	r3, #0
    f72e:	d103      	bne.n	f738 <_dtoa_r+0x7c>
    f730:	0324      	lsls	r4, r4, #12
    f732:	d101      	bne.n	f738 <_dtoa_r+0x7c>
    f734:	f000 fd91 	bl	1025a <_dtoa_r+0xb9e>
    f738:	4bb1      	ldr	r3, [pc, #708]	; (fa00 <_dtoa_r+0x344>)
    f73a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f73c:	930a      	str	r3, [sp, #40]	; 0x28
    f73e:	4bb1      	ldr	r3, [pc, #708]	; (fa04 <_dtoa_r+0x348>)
    f740:	2a00      	cmp	r2, #0
    f742:	d001      	beq.n	f748 <_dtoa_r+0x8c>
    f744:	f000 fd8f 	bl	10266 <_dtoa_r+0xbaa>
    f748:	f000 fd8f 	bl	1026a <_dtoa_r+0xbae>
    f74c:	2300      	movs	r3, #0
    f74e:	602b      	str	r3, [r5, #0]
    f750:	e7e1      	b.n	f716 <_dtoa_r+0x5a>
    f752:	9e06      	ldr	r6, [sp, #24]
    f754:	9f07      	ldr	r7, [sp, #28]
    f756:	2200      	movs	r2, #0
    f758:	2300      	movs	r3, #0
    f75a:	0030      	movs	r0, r6
    f75c:	0039      	movs	r1, r7
    f75e:	f001 fff5 	bl	1174c <__aeabi_dcmpeq>
    f762:	1e05      	subs	r5, r0, #0
    f764:	d00e      	beq.n	f784 <_dtoa_r+0xc8>
    f766:	2301      	movs	r3, #1
    f768:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f76a:	6013      	str	r3, [r2, #0]
    f76c:	4ba6      	ldr	r3, [pc, #664]	; (fa08 <_dtoa_r+0x34c>)
    f76e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f770:	930a      	str	r3, [sp, #40]	; 0x28
    f772:	2a00      	cmp	r2, #0
    f774:	d101      	bne.n	f77a <_dtoa_r+0xbe>
    f776:	f000 fd78 	bl	1026a <_dtoa_r+0xbae>
    f77a:	4aa4      	ldr	r2, [pc, #656]	; (fa0c <_dtoa_r+0x350>)
    f77c:	9926      	ldr	r1, [sp, #152]	; 0x98
    f77e:	600a      	str	r2, [r1, #0]
    f780:	f000 fd73 	bl	1026a <_dtoa_r+0xbae>
    f784:	ab1a      	add	r3, sp, #104	; 0x68
    f786:	9301      	str	r3, [sp, #4]
    f788:	ab1b      	add	r3, sp, #108	; 0x6c
    f78a:	9300      	str	r3, [sp, #0]
    f78c:	0032      	movs	r2, r6
    f78e:	003b      	movs	r3, r7
    f790:	9804      	ldr	r0, [sp, #16]
    f792:	f001 fa1d 	bl	10bd0 <__d2b>
    f796:	0063      	lsls	r3, r4, #1
    f798:	9005      	str	r0, [sp, #20]
    f79a:	0d5b      	lsrs	r3, r3, #21
    f79c:	d100      	bne.n	f7a0 <_dtoa_r+0xe4>
    f79e:	e07f      	b.n	f8a0 <_dtoa_r+0x1e4>
    f7a0:	033a      	lsls	r2, r7, #12
    f7a2:	4c9b      	ldr	r4, [pc, #620]	; (fa10 <_dtoa_r+0x354>)
    f7a4:	0b12      	lsrs	r2, r2, #12
    f7a6:	4314      	orrs	r4, r2
    f7a8:	0021      	movs	r1, r4
    f7aa:	4a9a      	ldr	r2, [pc, #616]	; (fa14 <_dtoa_r+0x358>)
    f7ac:	0030      	movs	r0, r6
    f7ae:	9518      	str	r5, [sp, #96]	; 0x60
    f7b0:	189e      	adds	r6, r3, r2
    f7b2:	2200      	movs	r2, #0
    f7b4:	4b98      	ldr	r3, [pc, #608]	; (fa18 <_dtoa_r+0x35c>)
    f7b6:	f003 fc9d 	bl	130f4 <__aeabi_dsub>
    f7ba:	4a98      	ldr	r2, [pc, #608]	; (fa1c <_dtoa_r+0x360>)
    f7bc:	4b98      	ldr	r3, [pc, #608]	; (fa20 <_dtoa_r+0x364>)
    f7be:	f003 fa19 	bl	12bf4 <__aeabi_dmul>
    f7c2:	4a98      	ldr	r2, [pc, #608]	; (fa24 <_dtoa_r+0x368>)
    f7c4:	4b98      	ldr	r3, [pc, #608]	; (fa28 <_dtoa_r+0x36c>)
    f7c6:	f002 fad1 	bl	11d6c <__aeabi_dadd>
    f7ca:	0004      	movs	r4, r0
    f7cc:	0030      	movs	r0, r6
    f7ce:	000d      	movs	r5, r1
    f7d0:	f003 fffa 	bl	137c8 <__aeabi_i2d>
    f7d4:	4a95      	ldr	r2, [pc, #596]	; (fa2c <_dtoa_r+0x370>)
    f7d6:	4b96      	ldr	r3, [pc, #600]	; (fa30 <_dtoa_r+0x374>)
    f7d8:	f003 fa0c 	bl	12bf4 <__aeabi_dmul>
    f7dc:	0002      	movs	r2, r0
    f7de:	000b      	movs	r3, r1
    f7e0:	0020      	movs	r0, r4
    f7e2:	0029      	movs	r1, r5
    f7e4:	f002 fac2 	bl	11d6c <__aeabi_dadd>
    f7e8:	0004      	movs	r4, r0
    f7ea:	000d      	movs	r5, r1
    f7ec:	f003 ffb8 	bl	13760 <__aeabi_d2iz>
    f7f0:	2200      	movs	r2, #0
    f7f2:	9003      	str	r0, [sp, #12]
    f7f4:	2300      	movs	r3, #0
    f7f6:	0020      	movs	r0, r4
    f7f8:	0029      	movs	r1, r5
    f7fa:	f001 ffad 	bl	11758 <__aeabi_dcmplt>
    f7fe:	2800      	cmp	r0, #0
    f800:	d00e      	beq.n	f820 <_dtoa_r+0x164>
    f802:	9803      	ldr	r0, [sp, #12]
    f804:	f003 ffe0 	bl	137c8 <__aeabi_i2d>
    f808:	000b      	movs	r3, r1
    f80a:	0002      	movs	r2, r0
    f80c:	0029      	movs	r1, r5
    f80e:	0020      	movs	r0, r4
    f810:	f001 ff9c 	bl	1174c <__aeabi_dcmpeq>
    f814:	0003      	movs	r3, r0
    f816:	4258      	negs	r0, r3
    f818:	4158      	adcs	r0, r3
    f81a:	9b03      	ldr	r3, [sp, #12]
    f81c:	1a1b      	subs	r3, r3, r0
    f81e:	9303      	str	r3, [sp, #12]
    f820:	2301      	movs	r3, #1
    f822:	9316      	str	r3, [sp, #88]	; 0x58
    f824:	9b03      	ldr	r3, [sp, #12]
    f826:	2b16      	cmp	r3, #22
    f828:	d80f      	bhi.n	f84a <_dtoa_r+0x18e>
    f82a:	4982      	ldr	r1, [pc, #520]	; (fa34 <_dtoa_r+0x378>)
    f82c:	00db      	lsls	r3, r3, #3
    f82e:	18c9      	adds	r1, r1, r3
    f830:	6808      	ldr	r0, [r1, #0]
    f832:	6849      	ldr	r1, [r1, #4]
    f834:	9a06      	ldr	r2, [sp, #24]
    f836:	9b07      	ldr	r3, [sp, #28]
    f838:	f001 ffa2 	bl	11780 <__aeabi_dcmpgt>
    f83c:	2800      	cmp	r0, #0
    f83e:	d04b      	beq.n	f8d8 <_dtoa_r+0x21c>
    f840:	9b03      	ldr	r3, [sp, #12]
    f842:	3b01      	subs	r3, #1
    f844:	9303      	str	r3, [sp, #12]
    f846:	2300      	movs	r3, #0
    f848:	9316      	str	r3, [sp, #88]	; 0x58
    f84a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f84c:	1b9e      	subs	r6, r3, r6
    f84e:	2300      	movs	r3, #0
    f850:	930b      	str	r3, [sp, #44]	; 0x2c
    f852:	0033      	movs	r3, r6
    f854:	3b01      	subs	r3, #1
    f856:	930c      	str	r3, [sp, #48]	; 0x30
    f858:	d504      	bpl.n	f864 <_dtoa_r+0x1a8>
    f85a:	2301      	movs	r3, #1
    f85c:	1b9b      	subs	r3, r3, r6
    f85e:	930b      	str	r3, [sp, #44]	; 0x2c
    f860:	2300      	movs	r3, #0
    f862:	930c      	str	r3, [sp, #48]	; 0x30
    f864:	9b03      	ldr	r3, [sp, #12]
    f866:	2b00      	cmp	r3, #0
    f868:	db38      	blt.n	f8dc <_dtoa_r+0x220>
    f86a:	9a03      	ldr	r2, [sp, #12]
    f86c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f86e:	4694      	mov	ip, r2
    f870:	4463      	add	r3, ip
    f872:	930c      	str	r3, [sp, #48]	; 0x30
    f874:	2300      	movs	r3, #0
    f876:	920f      	str	r2, [sp, #60]	; 0x3c
    f878:	9308      	str	r3, [sp, #32]
    f87a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f87c:	2501      	movs	r5, #1
    f87e:	2b09      	cmp	r3, #9
    f880:	d900      	bls.n	f884 <_dtoa_r+0x1c8>
    f882:	e091      	b.n	f9a8 <_dtoa_r+0x2ec>
    f884:	2b05      	cmp	r3, #5
    f886:	dd02      	ble.n	f88e <_dtoa_r+0x1d2>
    f888:	2500      	movs	r5, #0
    f88a:	3b04      	subs	r3, #4
    f88c:	9322      	str	r3, [sp, #136]	; 0x88
    f88e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f890:	1e98      	subs	r0, r3, #2
    f892:	2803      	cmp	r0, #3
    f894:	d900      	bls.n	f898 <_dtoa_r+0x1dc>
    f896:	e091      	b.n	f9bc <_dtoa_r+0x300>
    f898:	f001 fdc8 	bl	1142c <__gnu_thumb1_case_uqi>
    f89c:	76298482 	.word	0x76298482
    f8a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f8a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f8a4:	189e      	adds	r6, r3, r2
    f8a6:	4b64      	ldr	r3, [pc, #400]	; (fa38 <_dtoa_r+0x37c>)
    f8a8:	18f2      	adds	r2, r6, r3
    f8aa:	2a20      	cmp	r2, #32
    f8ac:	dd0f      	ble.n	f8ce <_dtoa_r+0x212>
    f8ae:	4b63      	ldr	r3, [pc, #396]	; (fa3c <_dtoa_r+0x380>)
    f8b0:	9806      	ldr	r0, [sp, #24]
    f8b2:	18f3      	adds	r3, r6, r3
    f8b4:	40d8      	lsrs	r0, r3
    f8b6:	2340      	movs	r3, #64	; 0x40
    f8b8:	1a9b      	subs	r3, r3, r2
    f8ba:	409c      	lsls	r4, r3
    f8bc:	4320      	orrs	r0, r4
    f8be:	f003 ffc5 	bl	1384c <__aeabi_ui2d>
    f8c2:	2301      	movs	r3, #1
    f8c4:	4c5e      	ldr	r4, [pc, #376]	; (fa40 <_dtoa_r+0x384>)
    f8c6:	3e01      	subs	r6, #1
    f8c8:	1909      	adds	r1, r1, r4
    f8ca:	9318      	str	r3, [sp, #96]	; 0x60
    f8cc:	e771      	b.n	f7b2 <_dtoa_r+0xf6>
    f8ce:	2320      	movs	r3, #32
    f8d0:	9806      	ldr	r0, [sp, #24]
    f8d2:	1a9b      	subs	r3, r3, r2
    f8d4:	4098      	lsls	r0, r3
    f8d6:	e7f2      	b.n	f8be <_dtoa_r+0x202>
    f8d8:	9016      	str	r0, [sp, #88]	; 0x58
    f8da:	e7b6      	b.n	f84a <_dtoa_r+0x18e>
    f8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8de:	9a03      	ldr	r2, [sp, #12]
    f8e0:	1a9b      	subs	r3, r3, r2
    f8e2:	930b      	str	r3, [sp, #44]	; 0x2c
    f8e4:	4253      	negs	r3, r2
    f8e6:	9308      	str	r3, [sp, #32]
    f8e8:	2300      	movs	r3, #0
    f8ea:	930f      	str	r3, [sp, #60]	; 0x3c
    f8ec:	e7c5      	b.n	f87a <_dtoa_r+0x1be>
    f8ee:	2301      	movs	r3, #1
    f8f0:	930e      	str	r3, [sp, #56]	; 0x38
    f8f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f8f4:	2b00      	cmp	r3, #0
    f8f6:	dd65      	ble.n	f9c4 <_dtoa_r+0x308>
    f8f8:	001f      	movs	r7, r3
    f8fa:	930d      	str	r3, [sp, #52]	; 0x34
    f8fc:	9a04      	ldr	r2, [sp, #16]
    f8fe:	6a54      	ldr	r4, [r2, #36]	; 0x24
    f900:	2200      	movs	r2, #0
    f902:	6062      	str	r2, [r4, #4]
    f904:	3204      	adds	r2, #4
    f906:	0011      	movs	r1, r2
    f908:	3114      	adds	r1, #20
    f90a:	4299      	cmp	r1, r3
    f90c:	d95f      	bls.n	f9ce <_dtoa_r+0x312>
    f90e:	6861      	ldr	r1, [r4, #4]
    f910:	9804      	ldr	r0, [sp, #16]
    f912:	f000 fece 	bl	106b2 <_Balloc>
    f916:	9b04      	ldr	r3, [sp, #16]
    f918:	6020      	str	r0, [r4, #0]
    f91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f91c:	681b      	ldr	r3, [r3, #0]
    f91e:	930a      	str	r3, [sp, #40]	; 0x28
    f920:	2f0e      	cmp	r7, #14
    f922:	d900      	bls.n	f926 <_dtoa_r+0x26a>
    f924:	e105      	b.n	fb32 <_dtoa_r+0x476>
    f926:	2d00      	cmp	r5, #0
    f928:	d100      	bne.n	f92c <_dtoa_r+0x270>
    f92a:	e102      	b.n	fb32 <_dtoa_r+0x476>
    f92c:	9b06      	ldr	r3, [sp, #24]
    f92e:	9c07      	ldr	r4, [sp, #28]
    f930:	9314      	str	r3, [sp, #80]	; 0x50
    f932:	9415      	str	r4, [sp, #84]	; 0x54
    f934:	9b03      	ldr	r3, [sp, #12]
    f936:	2b00      	cmp	r3, #0
    f938:	dc00      	bgt.n	f93c <_dtoa_r+0x280>
    f93a:	e085      	b.n	fa48 <_dtoa_r+0x38c>
    f93c:	001a      	movs	r2, r3
    f93e:	210f      	movs	r1, #15
    f940:	4b3c      	ldr	r3, [pc, #240]	; (fa34 <_dtoa_r+0x378>)
    f942:	400a      	ands	r2, r1
    f944:	00d2      	lsls	r2, r2, #3
    f946:	189b      	adds	r3, r3, r2
    f948:	685c      	ldr	r4, [r3, #4]
    f94a:	681b      	ldr	r3, [r3, #0]
    f94c:	9310      	str	r3, [sp, #64]	; 0x40
    f94e:	9411      	str	r4, [sp, #68]	; 0x44
    f950:	9b03      	ldr	r3, [sp, #12]
    f952:	2402      	movs	r4, #2
    f954:	111d      	asrs	r5, r3, #4
    f956:	06eb      	lsls	r3, r5, #27
    f958:	d50a      	bpl.n	f970 <_dtoa_r+0x2b4>
    f95a:	4b3a      	ldr	r3, [pc, #232]	; (fa44 <_dtoa_r+0x388>)
    f95c:	400d      	ands	r5, r1
    f95e:	6a1a      	ldr	r2, [r3, #32]
    f960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f962:	9814      	ldr	r0, [sp, #80]	; 0x50
    f964:	9915      	ldr	r1, [sp, #84]	; 0x54
    f966:	f002 fd11 	bl	1238c <__aeabi_ddiv>
    f96a:	9006      	str	r0, [sp, #24]
    f96c:	9107      	str	r1, [sp, #28]
    f96e:	3401      	adds	r4, #1
    f970:	4e34      	ldr	r6, [pc, #208]	; (fa44 <_dtoa_r+0x388>)
    f972:	2d00      	cmp	r5, #0
    f974:	d130      	bne.n	f9d8 <_dtoa_r+0x31c>
    f976:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f978:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f97a:	9806      	ldr	r0, [sp, #24]
    f97c:	9907      	ldr	r1, [sp, #28]
    f97e:	f002 fd05 	bl	1238c <__aeabi_ddiv>
    f982:	9006      	str	r0, [sp, #24]
    f984:	9107      	str	r1, [sp, #28]
    f986:	e07a      	b.n	fa7e <_dtoa_r+0x3c2>
    f988:	2301      	movs	r3, #1
    f98a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    f98c:	930e      	str	r3, [sp, #56]	; 0x38
    f98e:	4694      	mov	ip, r2
    f990:	9b03      	ldr	r3, [sp, #12]
    f992:	4463      	add	r3, ip
    f994:	1c5f      	adds	r7, r3, #1
    f996:	930d      	str	r3, [sp, #52]	; 0x34
    f998:	1e3b      	subs	r3, r7, #0
    f99a:	dcaf      	bgt.n	f8fc <_dtoa_r+0x240>
    f99c:	2301      	movs	r3, #1
    f99e:	e7ad      	b.n	f8fc <_dtoa_r+0x240>
    f9a0:	2300      	movs	r3, #0
    f9a2:	e7a5      	b.n	f8f0 <_dtoa_r+0x234>
    f9a4:	2300      	movs	r3, #0
    f9a6:	e7f0      	b.n	f98a <_dtoa_r+0x2ce>
    f9a8:	2300      	movs	r3, #0
    f9aa:	950e      	str	r5, [sp, #56]	; 0x38
    f9ac:	9322      	str	r3, [sp, #136]	; 0x88
    f9ae:	3b01      	subs	r3, #1
    f9b0:	2200      	movs	r2, #0
    f9b2:	930d      	str	r3, [sp, #52]	; 0x34
    f9b4:	001f      	movs	r7, r3
    f9b6:	3313      	adds	r3, #19
    f9b8:	9223      	str	r2, [sp, #140]	; 0x8c
    f9ba:	e79f      	b.n	f8fc <_dtoa_r+0x240>
    f9bc:	2301      	movs	r3, #1
    f9be:	930e      	str	r3, [sp, #56]	; 0x38
    f9c0:	3b02      	subs	r3, #2
    f9c2:	e7f5      	b.n	f9b0 <_dtoa_r+0x2f4>
    f9c4:	2301      	movs	r3, #1
    f9c6:	930d      	str	r3, [sp, #52]	; 0x34
    f9c8:	001f      	movs	r7, r3
    f9ca:	001a      	movs	r2, r3
    f9cc:	e7f4      	b.n	f9b8 <_dtoa_r+0x2fc>
    f9ce:	6861      	ldr	r1, [r4, #4]
    f9d0:	0052      	lsls	r2, r2, #1
    f9d2:	3101      	adds	r1, #1
    f9d4:	6061      	str	r1, [r4, #4]
    f9d6:	e796      	b.n	f906 <_dtoa_r+0x24a>
    f9d8:	2301      	movs	r3, #1
    f9da:	421d      	tst	r5, r3
    f9dc:	d008      	beq.n	f9f0 <_dtoa_r+0x334>
    f9de:	9810      	ldr	r0, [sp, #64]	; 0x40
    f9e0:	9911      	ldr	r1, [sp, #68]	; 0x44
    f9e2:	18e4      	adds	r4, r4, r3
    f9e4:	6832      	ldr	r2, [r6, #0]
    f9e6:	6873      	ldr	r3, [r6, #4]
    f9e8:	f003 f904 	bl	12bf4 <__aeabi_dmul>
    f9ec:	9010      	str	r0, [sp, #64]	; 0x40
    f9ee:	9111      	str	r1, [sp, #68]	; 0x44
    f9f0:	106d      	asrs	r5, r5, #1
    f9f2:	3608      	adds	r6, #8
    f9f4:	e7bd      	b.n	f972 <_dtoa_r+0x2b6>
    f9f6:	46c0      	nop			; (mov r8, r8)
    f9f8:	7ff00000 	.word	0x7ff00000
    f9fc:	0000270f 	.word	0x0000270f
    fa00:	000151f0 	.word	0x000151f0
    fa04:	000151f3 	.word	0x000151f3
    fa08:	000150c2 	.word	0x000150c2
    fa0c:	000150c3 	.word	0x000150c3
    fa10:	3ff00000 	.word	0x3ff00000
    fa14:	fffffc01 	.word	0xfffffc01
    fa18:	3ff80000 	.word	0x3ff80000
    fa1c:	636f4361 	.word	0x636f4361
    fa20:	3fd287a7 	.word	0x3fd287a7
    fa24:	8b60c8b3 	.word	0x8b60c8b3
    fa28:	3fc68a28 	.word	0x3fc68a28
    fa2c:	509f79fb 	.word	0x509f79fb
    fa30:	3fd34413 	.word	0x3fd34413
    fa34:	00015280 	.word	0x00015280
    fa38:	00000432 	.word	0x00000432
    fa3c:	00000412 	.word	0x00000412
    fa40:	fe100000 	.word	0xfe100000
    fa44:	00015258 	.word	0x00015258
    fa48:	9b03      	ldr	r3, [sp, #12]
    fa4a:	2402      	movs	r4, #2
    fa4c:	2b00      	cmp	r3, #0
    fa4e:	d016      	beq.n	fa7e <_dtoa_r+0x3c2>
    fa50:	9814      	ldr	r0, [sp, #80]	; 0x50
    fa52:	9915      	ldr	r1, [sp, #84]	; 0x54
    fa54:	425d      	negs	r5, r3
    fa56:	230f      	movs	r3, #15
    fa58:	4aca      	ldr	r2, [pc, #808]	; (fd84 <_dtoa_r+0x6c8>)
    fa5a:	402b      	ands	r3, r5
    fa5c:	00db      	lsls	r3, r3, #3
    fa5e:	18d3      	adds	r3, r2, r3
    fa60:	681a      	ldr	r2, [r3, #0]
    fa62:	685b      	ldr	r3, [r3, #4]
    fa64:	f003 f8c6 	bl	12bf4 <__aeabi_dmul>
    fa68:	2300      	movs	r3, #0
    fa6a:	9006      	str	r0, [sp, #24]
    fa6c:	9107      	str	r1, [sp, #28]
    fa6e:	4ec6      	ldr	r6, [pc, #792]	; (fd88 <_dtoa_r+0x6cc>)
    fa70:	112d      	asrs	r5, r5, #4
    fa72:	2d00      	cmp	r5, #0
    fa74:	d000      	beq.n	fa78 <_dtoa_r+0x3bc>
    fa76:	e08c      	b.n	fb92 <_dtoa_r+0x4d6>
    fa78:	2b00      	cmp	r3, #0
    fa7a:	d000      	beq.n	fa7e <_dtoa_r+0x3c2>
    fa7c:	e781      	b.n	f982 <_dtoa_r+0x2c6>
    fa7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fa80:	2b00      	cmp	r3, #0
    fa82:	d100      	bne.n	fa86 <_dtoa_r+0x3ca>
    fa84:	e091      	b.n	fbaa <_dtoa_r+0x4ee>
    fa86:	9a06      	ldr	r2, [sp, #24]
    fa88:	9b07      	ldr	r3, [sp, #28]
    fa8a:	9210      	str	r2, [sp, #64]	; 0x40
    fa8c:	9311      	str	r3, [sp, #68]	; 0x44
    fa8e:	9810      	ldr	r0, [sp, #64]	; 0x40
    fa90:	9911      	ldr	r1, [sp, #68]	; 0x44
    fa92:	2200      	movs	r2, #0
    fa94:	4bbd      	ldr	r3, [pc, #756]	; (fd8c <_dtoa_r+0x6d0>)
    fa96:	f001 fe5f 	bl	11758 <__aeabi_dcmplt>
    fa9a:	2800      	cmp	r0, #0
    fa9c:	d100      	bne.n	faa0 <_dtoa_r+0x3e4>
    fa9e:	e084      	b.n	fbaa <_dtoa_r+0x4ee>
    faa0:	2f00      	cmp	r7, #0
    faa2:	d100      	bne.n	faa6 <_dtoa_r+0x3ea>
    faa4:	e081      	b.n	fbaa <_dtoa_r+0x4ee>
    faa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    faa8:	2b00      	cmp	r3, #0
    faaa:	dd3e      	ble.n	fb2a <_dtoa_r+0x46e>
    faac:	9810      	ldr	r0, [sp, #64]	; 0x40
    faae:	9911      	ldr	r1, [sp, #68]	; 0x44
    fab0:	9b03      	ldr	r3, [sp, #12]
    fab2:	2200      	movs	r2, #0
    fab4:	1e5e      	subs	r6, r3, #1
    fab6:	4bb6      	ldr	r3, [pc, #728]	; (fd90 <_dtoa_r+0x6d4>)
    fab8:	f003 f89c 	bl	12bf4 <__aeabi_dmul>
    fabc:	9006      	str	r0, [sp, #24]
    fabe:	9107      	str	r1, [sp, #28]
    fac0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    fac2:	3401      	adds	r4, #1
    fac4:	0020      	movs	r0, r4
    fac6:	f003 fe7f 	bl	137c8 <__aeabi_i2d>
    faca:	9a06      	ldr	r2, [sp, #24]
    facc:	9b07      	ldr	r3, [sp, #28]
    face:	f003 f891 	bl	12bf4 <__aeabi_dmul>
    fad2:	2200      	movs	r2, #0
    fad4:	4baf      	ldr	r3, [pc, #700]	; (fd94 <_dtoa_r+0x6d8>)
    fad6:	f002 f949 	bl	11d6c <__aeabi_dadd>
    fada:	9012      	str	r0, [sp, #72]	; 0x48
    fadc:	9113      	str	r1, [sp, #76]	; 0x4c
    fade:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fae0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    fae2:	4aad      	ldr	r2, [pc, #692]	; (fd98 <_dtoa_r+0x6dc>)
    fae4:	9310      	str	r3, [sp, #64]	; 0x40
    fae6:	9411      	str	r4, [sp, #68]	; 0x44
    fae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    faea:	189c      	adds	r4, r3, r2
    faec:	9411      	str	r4, [sp, #68]	; 0x44
    faee:	2d00      	cmp	r5, #0
    faf0:	d15e      	bne.n	fbb0 <_dtoa_r+0x4f4>
    faf2:	9806      	ldr	r0, [sp, #24]
    faf4:	9907      	ldr	r1, [sp, #28]
    faf6:	2200      	movs	r2, #0
    faf8:	4ba8      	ldr	r3, [pc, #672]	; (fd9c <_dtoa_r+0x6e0>)
    fafa:	f003 fafb 	bl	130f4 <__aeabi_dsub>
    fafe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb00:	0023      	movs	r3, r4
    fb02:	9006      	str	r0, [sp, #24]
    fb04:	9107      	str	r1, [sp, #28]
    fb06:	f001 fe3b 	bl	11780 <__aeabi_dcmpgt>
    fb0a:	2800      	cmp	r0, #0
    fb0c:	d000      	beq.n	fb10 <_dtoa_r+0x454>
    fb0e:	e301      	b.n	10114 <_dtoa_r+0xa58>
    fb10:	48a3      	ldr	r0, [pc, #652]	; (fda0 <_dtoa_r+0x6e4>)
    fb12:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fb14:	4684      	mov	ip, r0
    fb16:	4461      	add	r1, ip
    fb18:	000b      	movs	r3, r1
    fb1a:	9806      	ldr	r0, [sp, #24]
    fb1c:	9907      	ldr	r1, [sp, #28]
    fb1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb20:	f001 fe1a 	bl	11758 <__aeabi_dcmplt>
    fb24:	2800      	cmp	r0, #0
    fb26:	d000      	beq.n	fb2a <_dtoa_r+0x46e>
    fb28:	e2e8      	b.n	100fc <_dtoa_r+0xa40>
    fb2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fb2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
    fb2e:	9306      	str	r3, [sp, #24]
    fb30:	9407      	str	r4, [sp, #28]
    fb32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fb34:	2b00      	cmp	r3, #0
    fb36:	da00      	bge.n	fb3a <_dtoa_r+0x47e>
    fb38:	e157      	b.n	fdea <_dtoa_r+0x72e>
    fb3a:	9a03      	ldr	r2, [sp, #12]
    fb3c:	2a0e      	cmp	r2, #14
    fb3e:	dd00      	ble.n	fb42 <_dtoa_r+0x486>
    fb40:	e153      	b.n	fdea <_dtoa_r+0x72e>
    fb42:	4b90      	ldr	r3, [pc, #576]	; (fd84 <_dtoa_r+0x6c8>)
    fb44:	00d2      	lsls	r2, r2, #3
    fb46:	189b      	adds	r3, r3, r2
    fb48:	685c      	ldr	r4, [r3, #4]
    fb4a:	681b      	ldr	r3, [r3, #0]
    fb4c:	9308      	str	r3, [sp, #32]
    fb4e:	9409      	str	r4, [sp, #36]	; 0x24
    fb50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fb52:	2b00      	cmp	r3, #0
    fb54:	db00      	blt.n	fb58 <_dtoa_r+0x49c>
    fb56:	e0ce      	b.n	fcf6 <_dtoa_r+0x63a>
    fb58:	2f00      	cmp	r7, #0
    fb5a:	dd00      	ble.n	fb5e <_dtoa_r+0x4a2>
    fb5c:	e0cb      	b.n	fcf6 <_dtoa_r+0x63a>
    fb5e:	d000      	beq.n	fb62 <_dtoa_r+0x4a6>
    fb60:	e2cf      	b.n	10102 <_dtoa_r+0xa46>
    fb62:	9808      	ldr	r0, [sp, #32]
    fb64:	9909      	ldr	r1, [sp, #36]	; 0x24
    fb66:	2200      	movs	r2, #0
    fb68:	4b8c      	ldr	r3, [pc, #560]	; (fd9c <_dtoa_r+0x6e0>)
    fb6a:	f003 f843 	bl	12bf4 <__aeabi_dmul>
    fb6e:	9a06      	ldr	r2, [sp, #24]
    fb70:	9b07      	ldr	r3, [sp, #28]
    fb72:	f001 fe0f 	bl	11794 <__aeabi_dcmpge>
    fb76:	003e      	movs	r6, r7
    fb78:	9708      	str	r7, [sp, #32]
    fb7a:	2800      	cmp	r0, #0
    fb7c:	d000      	beq.n	fb80 <_dtoa_r+0x4c4>
    fb7e:	e2a4      	b.n	100ca <_dtoa_r+0xa0e>
    fb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fb82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fb84:	1c5d      	adds	r5, r3, #1
    fb86:	2331      	movs	r3, #49	; 0x31
    fb88:	7013      	strb	r3, [r2, #0]
    fb8a:	9b03      	ldr	r3, [sp, #12]
    fb8c:	3301      	adds	r3, #1
    fb8e:	9303      	str	r3, [sp, #12]
    fb90:	e29f      	b.n	100d2 <_dtoa_r+0xa16>
    fb92:	2201      	movs	r2, #1
    fb94:	4215      	tst	r5, r2
    fb96:	d005      	beq.n	fba4 <_dtoa_r+0x4e8>
    fb98:	18a4      	adds	r4, r4, r2
    fb9a:	6832      	ldr	r2, [r6, #0]
    fb9c:	6873      	ldr	r3, [r6, #4]
    fb9e:	f003 f829 	bl	12bf4 <__aeabi_dmul>
    fba2:	2301      	movs	r3, #1
    fba4:	106d      	asrs	r5, r5, #1
    fba6:	3608      	adds	r6, #8
    fba8:	e763      	b.n	fa72 <_dtoa_r+0x3b6>
    fbaa:	9e03      	ldr	r6, [sp, #12]
    fbac:	003d      	movs	r5, r7
    fbae:	e789      	b.n	fac4 <_dtoa_r+0x408>
    fbb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fbb2:	1e69      	subs	r1, r5, #1
    fbb4:	1952      	adds	r2, r2, r5
    fbb6:	9217      	str	r2, [sp, #92]	; 0x5c
    fbb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fbba:	4b72      	ldr	r3, [pc, #456]	; (fd84 <_dtoa_r+0x6c8>)
    fbbc:	00c9      	lsls	r1, r1, #3
    fbbe:	2a00      	cmp	r2, #0
    fbc0:	d04a      	beq.n	fc58 <_dtoa_r+0x59c>
    fbc2:	185b      	adds	r3, r3, r1
    fbc4:	681a      	ldr	r2, [r3, #0]
    fbc6:	685b      	ldr	r3, [r3, #4]
    fbc8:	2000      	movs	r0, #0
    fbca:	4976      	ldr	r1, [pc, #472]	; (fda4 <_dtoa_r+0x6e8>)
    fbcc:	f002 fbde 	bl	1238c <__aeabi_ddiv>
    fbd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fbd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fbd4:	f003 fa8e 	bl	130f4 <__aeabi_dsub>
    fbd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fbda:	9010      	str	r0, [sp, #64]	; 0x40
    fbdc:	9111      	str	r1, [sp, #68]	; 0x44
    fbde:	9312      	str	r3, [sp, #72]	; 0x48
    fbe0:	9806      	ldr	r0, [sp, #24]
    fbe2:	9907      	ldr	r1, [sp, #28]
    fbe4:	f003 fdbc 	bl	13760 <__aeabi_d2iz>
    fbe8:	0004      	movs	r4, r0
    fbea:	f003 fded 	bl	137c8 <__aeabi_i2d>
    fbee:	0002      	movs	r2, r0
    fbf0:	000b      	movs	r3, r1
    fbf2:	9806      	ldr	r0, [sp, #24]
    fbf4:	9907      	ldr	r1, [sp, #28]
    fbf6:	f003 fa7d 	bl	130f4 <__aeabi_dsub>
    fbfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fbfc:	3430      	adds	r4, #48	; 0x30
    fbfe:	1c5d      	adds	r5, r3, #1
    fc00:	701c      	strb	r4, [r3, #0]
    fc02:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fc04:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fc06:	9006      	str	r0, [sp, #24]
    fc08:	9107      	str	r1, [sp, #28]
    fc0a:	f001 fda5 	bl	11758 <__aeabi_dcmplt>
    fc0e:	2800      	cmp	r0, #0
    fc10:	d165      	bne.n	fcde <_dtoa_r+0x622>
    fc12:	9a06      	ldr	r2, [sp, #24]
    fc14:	9b07      	ldr	r3, [sp, #28]
    fc16:	2000      	movs	r0, #0
    fc18:	495c      	ldr	r1, [pc, #368]	; (fd8c <_dtoa_r+0x6d0>)
    fc1a:	f003 fa6b 	bl	130f4 <__aeabi_dsub>
    fc1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fc20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fc22:	f001 fd99 	bl	11758 <__aeabi_dcmplt>
    fc26:	2800      	cmp	r0, #0
    fc28:	d000      	beq.n	fc2c <_dtoa_r+0x570>
    fc2a:	e0be      	b.n	fdaa <_dtoa_r+0x6ee>
    fc2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fc2e:	429d      	cmp	r5, r3
    fc30:	d100      	bne.n	fc34 <_dtoa_r+0x578>
    fc32:	e77a      	b.n	fb2a <_dtoa_r+0x46e>
    fc34:	9810      	ldr	r0, [sp, #64]	; 0x40
    fc36:	9911      	ldr	r1, [sp, #68]	; 0x44
    fc38:	2200      	movs	r2, #0
    fc3a:	4b55      	ldr	r3, [pc, #340]	; (fd90 <_dtoa_r+0x6d4>)
    fc3c:	f002 ffda 	bl	12bf4 <__aeabi_dmul>
    fc40:	2200      	movs	r2, #0
    fc42:	9010      	str	r0, [sp, #64]	; 0x40
    fc44:	9111      	str	r1, [sp, #68]	; 0x44
    fc46:	9806      	ldr	r0, [sp, #24]
    fc48:	9907      	ldr	r1, [sp, #28]
    fc4a:	4b51      	ldr	r3, [pc, #324]	; (fd90 <_dtoa_r+0x6d4>)
    fc4c:	f002 ffd2 	bl	12bf4 <__aeabi_dmul>
    fc50:	9512      	str	r5, [sp, #72]	; 0x48
    fc52:	9006      	str	r0, [sp, #24]
    fc54:	9107      	str	r1, [sp, #28]
    fc56:	e7c3      	b.n	fbe0 <_dtoa_r+0x524>
    fc58:	1859      	adds	r1, r3, r1
    fc5a:	6808      	ldr	r0, [r1, #0]
    fc5c:	6849      	ldr	r1, [r1, #4]
    fc5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fc60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fc62:	f002 ffc7 	bl	12bf4 <__aeabi_dmul>
    fc66:	9010      	str	r0, [sp, #64]	; 0x40
    fc68:	9111      	str	r1, [sp, #68]	; 0x44
    fc6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fc6c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    fc6e:	9806      	ldr	r0, [sp, #24]
    fc70:	9907      	ldr	r1, [sp, #28]
    fc72:	f003 fd75 	bl	13760 <__aeabi_d2iz>
    fc76:	9012      	str	r0, [sp, #72]	; 0x48
    fc78:	f003 fda6 	bl	137c8 <__aeabi_i2d>
    fc7c:	0002      	movs	r2, r0
    fc7e:	000b      	movs	r3, r1
    fc80:	9806      	ldr	r0, [sp, #24]
    fc82:	9907      	ldr	r1, [sp, #28]
    fc84:	f003 fa36 	bl	130f4 <__aeabi_dsub>
    fc88:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fc8a:	9006      	str	r0, [sp, #24]
    fc8c:	9107      	str	r1, [sp, #28]
    fc8e:	3330      	adds	r3, #48	; 0x30
    fc90:	7023      	strb	r3, [r4, #0]
    fc92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fc94:	3401      	adds	r4, #1
    fc96:	2200      	movs	r2, #0
    fc98:	42a3      	cmp	r3, r4
    fc9a:	d124      	bne.n	fce6 <_dtoa_r+0x62a>
    fc9c:	4b41      	ldr	r3, [pc, #260]	; (fda4 <_dtoa_r+0x6e8>)
    fc9e:	9810      	ldr	r0, [sp, #64]	; 0x40
    fca0:	9911      	ldr	r1, [sp, #68]	; 0x44
    fca2:	f002 f863 	bl	11d6c <__aeabi_dadd>
    fca6:	0002      	movs	r2, r0
    fca8:	000b      	movs	r3, r1
    fcaa:	9806      	ldr	r0, [sp, #24]
    fcac:	9907      	ldr	r1, [sp, #28]
    fcae:	f001 fd67 	bl	11780 <__aeabi_dcmpgt>
    fcb2:	2800      	cmp	r0, #0
    fcb4:	d000      	beq.n	fcb8 <_dtoa_r+0x5fc>
    fcb6:	e078      	b.n	fdaa <_dtoa_r+0x6ee>
    fcb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fcba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fcbc:	2000      	movs	r0, #0
    fcbe:	4939      	ldr	r1, [pc, #228]	; (fda4 <_dtoa_r+0x6e8>)
    fcc0:	f003 fa18 	bl	130f4 <__aeabi_dsub>
    fcc4:	0002      	movs	r2, r0
    fcc6:	000b      	movs	r3, r1
    fcc8:	9806      	ldr	r0, [sp, #24]
    fcca:	9907      	ldr	r1, [sp, #28]
    fccc:	f001 fd44 	bl	11758 <__aeabi_dcmplt>
    fcd0:	2800      	cmp	r0, #0
    fcd2:	d100      	bne.n	fcd6 <_dtoa_r+0x61a>
    fcd4:	e729      	b.n	fb2a <_dtoa_r+0x46e>
    fcd6:	1e6b      	subs	r3, r5, #1
    fcd8:	781a      	ldrb	r2, [r3, #0]
    fcda:	2a30      	cmp	r2, #48	; 0x30
    fcdc:	d001      	beq.n	fce2 <_dtoa_r+0x626>
    fcde:	9603      	str	r6, [sp, #12]
    fce0:	e03f      	b.n	fd62 <_dtoa_r+0x6a6>
    fce2:	001d      	movs	r5, r3
    fce4:	e7f7      	b.n	fcd6 <_dtoa_r+0x61a>
    fce6:	9806      	ldr	r0, [sp, #24]
    fce8:	9907      	ldr	r1, [sp, #28]
    fcea:	4b29      	ldr	r3, [pc, #164]	; (fd90 <_dtoa_r+0x6d4>)
    fcec:	f002 ff82 	bl	12bf4 <__aeabi_dmul>
    fcf0:	9006      	str	r0, [sp, #24]
    fcf2:	9107      	str	r1, [sp, #28]
    fcf4:	e7bb      	b.n	fc6e <_dtoa_r+0x5b2>
    fcf6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    fcf8:	9a08      	ldr	r2, [sp, #32]
    fcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fcfc:	9806      	ldr	r0, [sp, #24]
    fcfe:	9907      	ldr	r1, [sp, #28]
    fd00:	f002 fb44 	bl	1238c <__aeabi_ddiv>
    fd04:	f003 fd2c 	bl	13760 <__aeabi_d2iz>
    fd08:	0004      	movs	r4, r0
    fd0a:	f003 fd5d 	bl	137c8 <__aeabi_i2d>
    fd0e:	9a08      	ldr	r2, [sp, #32]
    fd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd12:	f002 ff6f 	bl	12bf4 <__aeabi_dmul>
    fd16:	000b      	movs	r3, r1
    fd18:	0002      	movs	r2, r0
    fd1a:	9806      	ldr	r0, [sp, #24]
    fd1c:	9907      	ldr	r1, [sp, #28]
    fd1e:	f003 f9e9 	bl	130f4 <__aeabi_dsub>
    fd22:	0023      	movs	r3, r4
    fd24:	3330      	adds	r3, #48	; 0x30
    fd26:	7033      	strb	r3, [r6, #0]
    fd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd2a:	1c75      	adds	r5, r6, #1
    fd2c:	1aeb      	subs	r3, r5, r3
    fd2e:	429f      	cmp	r7, r3
    fd30:	d14c      	bne.n	fdcc <_dtoa_r+0x710>
    fd32:	0002      	movs	r2, r0
    fd34:	000b      	movs	r3, r1
    fd36:	f002 f819 	bl	11d6c <__aeabi_dadd>
    fd3a:	0006      	movs	r6, r0
    fd3c:	000f      	movs	r7, r1
    fd3e:	0002      	movs	r2, r0
    fd40:	000b      	movs	r3, r1
    fd42:	9808      	ldr	r0, [sp, #32]
    fd44:	9909      	ldr	r1, [sp, #36]	; 0x24
    fd46:	f001 fd07 	bl	11758 <__aeabi_dcmplt>
    fd4a:	2800      	cmp	r0, #0
    fd4c:	d12c      	bne.n	fda8 <_dtoa_r+0x6ec>
    fd4e:	9808      	ldr	r0, [sp, #32]
    fd50:	9909      	ldr	r1, [sp, #36]	; 0x24
    fd52:	0032      	movs	r2, r6
    fd54:	003b      	movs	r3, r7
    fd56:	f001 fcf9 	bl	1174c <__aeabi_dcmpeq>
    fd5a:	2800      	cmp	r0, #0
    fd5c:	d001      	beq.n	fd62 <_dtoa_r+0x6a6>
    fd5e:	07e3      	lsls	r3, r4, #31
    fd60:	d422      	bmi.n	fda8 <_dtoa_r+0x6ec>
    fd62:	9905      	ldr	r1, [sp, #20]
    fd64:	9804      	ldr	r0, [sp, #16]
    fd66:	f000 fcdc 	bl	10722 <_Bfree>
    fd6a:	2300      	movs	r3, #0
    fd6c:	702b      	strb	r3, [r5, #0]
    fd6e:	9b03      	ldr	r3, [sp, #12]
    fd70:	9a24      	ldr	r2, [sp, #144]	; 0x90
    fd72:	3301      	adds	r3, #1
    fd74:	6013      	str	r3, [r2, #0]
    fd76:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d100      	bne.n	fd7e <_dtoa_r+0x6c2>
    fd7c:	e275      	b.n	1026a <_dtoa_r+0xbae>
    fd7e:	601d      	str	r5, [r3, #0]
    fd80:	e273      	b.n	1026a <_dtoa_r+0xbae>
    fd82:	46c0      	nop			; (mov r8, r8)
    fd84:	00015280 	.word	0x00015280
    fd88:	00015258 	.word	0x00015258
    fd8c:	3ff00000 	.word	0x3ff00000
    fd90:	40240000 	.word	0x40240000
    fd94:	401c0000 	.word	0x401c0000
    fd98:	fcc00000 	.word	0xfcc00000
    fd9c:	40140000 	.word	0x40140000
    fda0:	7cc00000 	.word	0x7cc00000
    fda4:	3fe00000 	.word	0x3fe00000
    fda8:	9e03      	ldr	r6, [sp, #12]
    fdaa:	1e6b      	subs	r3, r5, #1
    fdac:	781a      	ldrb	r2, [r3, #0]
    fdae:	2a39      	cmp	r2, #57	; 0x39
    fdb0:	d106      	bne.n	fdc0 <_dtoa_r+0x704>
    fdb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fdb4:	429a      	cmp	r2, r3
    fdb6:	d107      	bne.n	fdc8 <_dtoa_r+0x70c>
    fdb8:	2330      	movs	r3, #48	; 0x30
    fdba:	7013      	strb	r3, [r2, #0]
    fdbc:	0013      	movs	r3, r2
    fdbe:	3601      	adds	r6, #1
    fdc0:	781a      	ldrb	r2, [r3, #0]
    fdc2:	3201      	adds	r2, #1
    fdc4:	701a      	strb	r2, [r3, #0]
    fdc6:	e78a      	b.n	fcde <_dtoa_r+0x622>
    fdc8:	001d      	movs	r5, r3
    fdca:	e7ee      	b.n	fdaa <_dtoa_r+0x6ee>
    fdcc:	2200      	movs	r2, #0
    fdce:	4bcf      	ldr	r3, [pc, #828]	; (1010c <_dtoa_r+0xa50>)
    fdd0:	f002 ff10 	bl	12bf4 <__aeabi_dmul>
    fdd4:	2200      	movs	r2, #0
    fdd6:	2300      	movs	r3, #0
    fdd8:	9006      	str	r0, [sp, #24]
    fdda:	9107      	str	r1, [sp, #28]
    fddc:	002e      	movs	r6, r5
    fdde:	f001 fcb5 	bl	1174c <__aeabi_dcmpeq>
    fde2:	2800      	cmp	r0, #0
    fde4:	d100      	bne.n	fde8 <_dtoa_r+0x72c>
    fde6:	e787      	b.n	fcf8 <_dtoa_r+0x63c>
    fde8:	e7bb      	b.n	fd62 <_dtoa_r+0x6a6>
    fdea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fdec:	2a00      	cmp	r2, #0
    fdee:	d100      	bne.n	fdf2 <_dtoa_r+0x736>
    fdf0:	e087      	b.n	ff02 <_dtoa_r+0x846>
    fdf2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    fdf4:	2a01      	cmp	r2, #1
    fdf6:	dc6e      	bgt.n	fed6 <_dtoa_r+0x81a>
    fdf8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    fdfa:	2a00      	cmp	r2, #0
    fdfc:	d067      	beq.n	fece <_dtoa_r+0x812>
    fdfe:	4ac4      	ldr	r2, [pc, #784]	; (10110 <_dtoa_r+0xa54>)
    fe00:	189b      	adds	r3, r3, r2
    fe02:	9d08      	ldr	r5, [sp, #32]
    fe04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    fe06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fe08:	2101      	movs	r1, #1
    fe0a:	18d2      	adds	r2, r2, r3
    fe0c:	920b      	str	r2, [sp, #44]	; 0x2c
    fe0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fe10:	9804      	ldr	r0, [sp, #16]
    fe12:	18d3      	adds	r3, r2, r3
    fe14:	930c      	str	r3, [sp, #48]	; 0x30
    fe16:	f000 fd22 	bl	1085e <__i2b>
    fe1a:	0006      	movs	r6, r0
    fe1c:	2c00      	cmp	r4, #0
    fe1e:	dd0e      	ble.n	fe3e <_dtoa_r+0x782>
    fe20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe22:	2b00      	cmp	r3, #0
    fe24:	dd0b      	ble.n	fe3e <_dtoa_r+0x782>
    fe26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fe28:	0023      	movs	r3, r4
    fe2a:	4294      	cmp	r4, r2
    fe2c:	dd00      	ble.n	fe30 <_dtoa_r+0x774>
    fe2e:	0013      	movs	r3, r2
    fe30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fe32:	1ae4      	subs	r4, r4, r3
    fe34:	1ad2      	subs	r2, r2, r3
    fe36:	920b      	str	r2, [sp, #44]	; 0x2c
    fe38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fe3a:	1ad3      	subs	r3, r2, r3
    fe3c:	930c      	str	r3, [sp, #48]	; 0x30
    fe3e:	9b08      	ldr	r3, [sp, #32]
    fe40:	2b00      	cmp	r3, #0
    fe42:	d01e      	beq.n	fe82 <_dtoa_r+0x7c6>
    fe44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe46:	2b00      	cmp	r3, #0
    fe48:	d05f      	beq.n	ff0a <_dtoa_r+0x84e>
    fe4a:	2d00      	cmp	r5, #0
    fe4c:	dd11      	ble.n	fe72 <_dtoa_r+0x7b6>
    fe4e:	0031      	movs	r1, r6
    fe50:	002a      	movs	r2, r5
    fe52:	9804      	ldr	r0, [sp, #16]
    fe54:	f000 fd9c 	bl	10990 <__pow5mult>
    fe58:	9a05      	ldr	r2, [sp, #20]
    fe5a:	0001      	movs	r1, r0
    fe5c:	0006      	movs	r6, r0
    fe5e:	9804      	ldr	r0, [sp, #16]
    fe60:	f000 fd06 	bl	10870 <__multiply>
    fe64:	9905      	ldr	r1, [sp, #20]
    fe66:	9010      	str	r0, [sp, #64]	; 0x40
    fe68:	9804      	ldr	r0, [sp, #16]
    fe6a:	f000 fc5a 	bl	10722 <_Bfree>
    fe6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fe70:	9305      	str	r3, [sp, #20]
    fe72:	9b08      	ldr	r3, [sp, #32]
    fe74:	1b5a      	subs	r2, r3, r5
    fe76:	d004      	beq.n	fe82 <_dtoa_r+0x7c6>
    fe78:	9905      	ldr	r1, [sp, #20]
    fe7a:	9804      	ldr	r0, [sp, #16]
    fe7c:	f000 fd88 	bl	10990 <__pow5mult>
    fe80:	9005      	str	r0, [sp, #20]
    fe82:	2101      	movs	r1, #1
    fe84:	9804      	ldr	r0, [sp, #16]
    fe86:	f000 fcea 	bl	1085e <__i2b>
    fe8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fe8c:	9008      	str	r0, [sp, #32]
    fe8e:	2b00      	cmp	r3, #0
    fe90:	dd3d      	ble.n	ff0e <_dtoa_r+0x852>
    fe92:	001a      	movs	r2, r3
    fe94:	0001      	movs	r1, r0
    fe96:	9804      	ldr	r0, [sp, #16]
    fe98:	f000 fd7a 	bl	10990 <__pow5mult>
    fe9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fe9e:	9008      	str	r0, [sp, #32]
    fea0:	2500      	movs	r5, #0
    fea2:	2b01      	cmp	r3, #1
    fea4:	dc3b      	bgt.n	ff1e <_dtoa_r+0x862>
    fea6:	2500      	movs	r5, #0
    fea8:	9b06      	ldr	r3, [sp, #24]
    feaa:	42ab      	cmp	r3, r5
    feac:	d133      	bne.n	ff16 <_dtoa_r+0x85a>
    feae:	9b07      	ldr	r3, [sp, #28]
    feb0:	031b      	lsls	r3, r3, #12
    feb2:	42ab      	cmp	r3, r5
    feb4:	d12f      	bne.n	ff16 <_dtoa_r+0x85a>
    feb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    feb8:	9a07      	ldr	r2, [sp, #28]
    feba:	4213      	tst	r3, r2
    febc:	d02b      	beq.n	ff16 <_dtoa_r+0x85a>
    febe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fec0:	3501      	adds	r5, #1
    fec2:	3301      	adds	r3, #1
    fec4:	930b      	str	r3, [sp, #44]	; 0x2c
    fec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fec8:	3301      	adds	r3, #1
    feca:	930c      	str	r3, [sp, #48]	; 0x30
    fecc:	e023      	b.n	ff16 <_dtoa_r+0x85a>
    fece:	2336      	movs	r3, #54	; 0x36
    fed0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fed2:	1a9b      	subs	r3, r3, r2
    fed4:	e795      	b.n	fe02 <_dtoa_r+0x746>
    fed6:	9b08      	ldr	r3, [sp, #32]
    fed8:	1e7d      	subs	r5, r7, #1
    feda:	42ab      	cmp	r3, r5
    fedc:	db06      	blt.n	feec <_dtoa_r+0x830>
    fede:	1b5d      	subs	r5, r3, r5
    fee0:	2f00      	cmp	r7, #0
    fee2:	da0b      	bge.n	fefc <_dtoa_r+0x840>
    fee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fee6:	1bdc      	subs	r4, r3, r7
    fee8:	2300      	movs	r3, #0
    feea:	e78c      	b.n	fe06 <_dtoa_r+0x74a>
    feec:	9b08      	ldr	r3, [sp, #32]
    feee:	9508      	str	r5, [sp, #32]
    fef0:	1aea      	subs	r2, r5, r3
    fef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fef4:	2500      	movs	r5, #0
    fef6:	189b      	adds	r3, r3, r2
    fef8:	930f      	str	r3, [sp, #60]	; 0x3c
    fefa:	e7f1      	b.n	fee0 <_dtoa_r+0x824>
    fefc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    fefe:	003b      	movs	r3, r7
    ff00:	e781      	b.n	fe06 <_dtoa_r+0x74a>
    ff02:	9d08      	ldr	r5, [sp, #32]
    ff04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ff06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    ff08:	e788      	b.n	fe1c <_dtoa_r+0x760>
    ff0a:	9a08      	ldr	r2, [sp, #32]
    ff0c:	e7b4      	b.n	fe78 <_dtoa_r+0x7bc>
    ff0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ff10:	2500      	movs	r5, #0
    ff12:	2b01      	cmp	r3, #1
    ff14:	ddc7      	ble.n	fea6 <_dtoa_r+0x7ea>
    ff16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ff18:	2001      	movs	r0, #1
    ff1a:	2b00      	cmp	r3, #0
    ff1c:	d00b      	beq.n	ff36 <_dtoa_r+0x87a>
    ff1e:	9b08      	ldr	r3, [sp, #32]
    ff20:	9a08      	ldr	r2, [sp, #32]
    ff22:	691b      	ldr	r3, [r3, #16]
    ff24:	930f      	str	r3, [sp, #60]	; 0x3c
    ff26:	3303      	adds	r3, #3
    ff28:	009b      	lsls	r3, r3, #2
    ff2a:	18d3      	adds	r3, r2, r3
    ff2c:	6858      	ldr	r0, [r3, #4]
    ff2e:	f000 fc4d 	bl	107cc <__hi0bits>
    ff32:	2320      	movs	r3, #32
    ff34:	1a18      	subs	r0, r3, r0
    ff36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ff38:	18c0      	adds	r0, r0, r3
    ff3a:	231f      	movs	r3, #31
    ff3c:	4018      	ands	r0, r3
    ff3e:	d100      	bne.n	ff42 <_dtoa_r+0x886>
    ff40:	e0ab      	b.n	1009a <_dtoa_r+0x9de>
    ff42:	3301      	adds	r3, #1
    ff44:	1a1b      	subs	r3, r3, r0
    ff46:	2b04      	cmp	r3, #4
    ff48:	dc00      	bgt.n	ff4c <_dtoa_r+0x890>
    ff4a:	e09b      	b.n	10084 <_dtoa_r+0x9c8>
    ff4c:	231c      	movs	r3, #28
    ff4e:	1a18      	subs	r0, r3, r0
    ff50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ff52:	1824      	adds	r4, r4, r0
    ff54:	181b      	adds	r3, r3, r0
    ff56:	930b      	str	r3, [sp, #44]	; 0x2c
    ff58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ff5a:	181b      	adds	r3, r3, r0
    ff5c:	930c      	str	r3, [sp, #48]	; 0x30
    ff5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ff60:	2b00      	cmp	r3, #0
    ff62:	dd05      	ble.n	ff70 <_dtoa_r+0x8b4>
    ff64:	001a      	movs	r2, r3
    ff66:	9905      	ldr	r1, [sp, #20]
    ff68:	9804      	ldr	r0, [sp, #16]
    ff6a:	f000 fd63 	bl	10a34 <__lshift>
    ff6e:	9005      	str	r0, [sp, #20]
    ff70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ff72:	2b00      	cmp	r3, #0
    ff74:	dd05      	ble.n	ff82 <_dtoa_r+0x8c6>
    ff76:	001a      	movs	r2, r3
    ff78:	9908      	ldr	r1, [sp, #32]
    ff7a:	9804      	ldr	r0, [sp, #16]
    ff7c:	f000 fd5a 	bl	10a34 <__lshift>
    ff80:	9008      	str	r0, [sp, #32]
    ff82:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ff84:	2b00      	cmp	r3, #0
    ff86:	d100      	bne.n	ff8a <_dtoa_r+0x8ce>
    ff88:	e089      	b.n	1009e <_dtoa_r+0x9e2>
    ff8a:	9908      	ldr	r1, [sp, #32]
    ff8c:	9805      	ldr	r0, [sp, #20]
    ff8e:	f000 fda2 	bl	10ad6 <__mcmp>
    ff92:	2800      	cmp	r0, #0
    ff94:	db00      	blt.n	ff98 <_dtoa_r+0x8dc>
    ff96:	e082      	b.n	1009e <_dtoa_r+0x9e2>
    ff98:	9b03      	ldr	r3, [sp, #12]
    ff9a:	220a      	movs	r2, #10
    ff9c:	3b01      	subs	r3, #1
    ff9e:	9303      	str	r3, [sp, #12]
    ffa0:	9905      	ldr	r1, [sp, #20]
    ffa2:	2300      	movs	r3, #0
    ffa4:	9804      	ldr	r0, [sp, #16]
    ffa6:	f000 fbd5 	bl	10754 <__multadd>
    ffaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ffac:	9005      	str	r0, [sp, #20]
    ffae:	2b00      	cmp	r3, #0
    ffb0:	d100      	bne.n	ffb4 <_dtoa_r+0x8f8>
    ffb2:	e15d      	b.n	10270 <_dtoa_r+0xbb4>
    ffb4:	2300      	movs	r3, #0
    ffb6:	0031      	movs	r1, r6
    ffb8:	220a      	movs	r2, #10
    ffba:	9804      	ldr	r0, [sp, #16]
    ffbc:	f000 fbca 	bl	10754 <__multadd>
    ffc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ffc2:	0006      	movs	r6, r0
    ffc4:	2b00      	cmp	r3, #0
    ffc6:	dc02      	bgt.n	ffce <_dtoa_r+0x912>
    ffc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffca:	2b02      	cmp	r3, #2
    ffcc:	dc6d      	bgt.n	100aa <_dtoa_r+0x9ee>
    ffce:	2c00      	cmp	r4, #0
    ffd0:	dd05      	ble.n	ffde <_dtoa_r+0x922>
    ffd2:	0031      	movs	r1, r6
    ffd4:	0022      	movs	r2, r4
    ffd6:	9804      	ldr	r0, [sp, #16]
    ffd8:	f000 fd2c 	bl	10a34 <__lshift>
    ffdc:	0006      	movs	r6, r0
    ffde:	0030      	movs	r0, r6
    ffe0:	2d00      	cmp	r5, #0
    ffe2:	d011      	beq.n	10008 <_dtoa_r+0x94c>
    ffe4:	6871      	ldr	r1, [r6, #4]
    ffe6:	9804      	ldr	r0, [sp, #16]
    ffe8:	f000 fb63 	bl	106b2 <_Balloc>
    ffec:	0031      	movs	r1, r6
    ffee:	0004      	movs	r4, r0
    fff0:	6933      	ldr	r3, [r6, #16]
    fff2:	310c      	adds	r1, #12
    fff4:	1c9a      	adds	r2, r3, #2
    fff6:	0092      	lsls	r2, r2, #2
    fff8:	300c      	adds	r0, #12
    fffa:	f7fe fb1b 	bl	e634 <memcpy>
    fffe:	2201      	movs	r2, #1
   10000:	0021      	movs	r1, r4
   10002:	9804      	ldr	r0, [sp, #16]
   10004:	f000 fd16 	bl	10a34 <__lshift>
   10008:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1000a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1000c:	3f01      	subs	r7, #1
   1000e:	930b      	str	r3, [sp, #44]	; 0x2c
   10010:	19db      	adds	r3, r3, r7
   10012:	0037      	movs	r7, r6
   10014:	0006      	movs	r6, r0
   10016:	930f      	str	r3, [sp, #60]	; 0x3c
   10018:	9908      	ldr	r1, [sp, #32]
   1001a:	9805      	ldr	r0, [sp, #20]
   1001c:	f7ff faca 	bl	f5b4 <quorem>
   10020:	0039      	movs	r1, r7
   10022:	900d      	str	r0, [sp, #52]	; 0x34
   10024:	0004      	movs	r4, r0
   10026:	9805      	ldr	r0, [sp, #20]
   10028:	f000 fd55 	bl	10ad6 <__mcmp>
   1002c:	0032      	movs	r2, r6
   1002e:	900e      	str	r0, [sp, #56]	; 0x38
   10030:	9908      	ldr	r1, [sp, #32]
   10032:	9804      	ldr	r0, [sp, #16]
   10034:	f000 fd68 	bl	10b08 <__mdiff>
   10038:	2301      	movs	r3, #1
   1003a:	930c      	str	r3, [sp, #48]	; 0x30
   1003c:	68c3      	ldr	r3, [r0, #12]
   1003e:	3430      	adds	r4, #48	; 0x30
   10040:	0005      	movs	r5, r0
   10042:	2b00      	cmp	r3, #0
   10044:	d104      	bne.n	10050 <_dtoa_r+0x994>
   10046:	0001      	movs	r1, r0
   10048:	9805      	ldr	r0, [sp, #20]
   1004a:	f000 fd44 	bl	10ad6 <__mcmp>
   1004e:	900c      	str	r0, [sp, #48]	; 0x30
   10050:	0029      	movs	r1, r5
   10052:	9804      	ldr	r0, [sp, #16]
   10054:	f000 fb65 	bl	10722 <_Bfree>
   10058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1005a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1005c:	4313      	orrs	r3, r2
   1005e:	d000      	beq.n	10062 <_dtoa_r+0x9a6>
   10060:	e089      	b.n	10176 <_dtoa_r+0xaba>
   10062:	9a06      	ldr	r2, [sp, #24]
   10064:	3301      	adds	r3, #1
   10066:	4213      	tst	r3, r2
   10068:	d000      	beq.n	1006c <_dtoa_r+0x9b0>
   1006a:	e084      	b.n	10176 <_dtoa_r+0xaba>
   1006c:	2c39      	cmp	r4, #57	; 0x39
   1006e:	d100      	bne.n	10072 <_dtoa_r+0x9b6>
   10070:	e0a3      	b.n	101ba <_dtoa_r+0xafe>
   10072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10074:	2b00      	cmp	r3, #0
   10076:	dd01      	ble.n	1007c <_dtoa_r+0x9c0>
   10078:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1007a:	3431      	adds	r4, #49	; 0x31
   1007c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1007e:	1c5d      	adds	r5, r3, #1
   10080:	701c      	strb	r4, [r3, #0]
   10082:	e027      	b.n	100d4 <_dtoa_r+0xa18>
   10084:	2b04      	cmp	r3, #4
   10086:	d100      	bne.n	1008a <_dtoa_r+0x9ce>
   10088:	e769      	b.n	ff5e <_dtoa_r+0x8a2>
   1008a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1008c:	331c      	adds	r3, #28
   1008e:	18d2      	adds	r2, r2, r3
   10090:	920b      	str	r2, [sp, #44]	; 0x2c
   10092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10094:	18e4      	adds	r4, r4, r3
   10096:	18d3      	adds	r3, r2, r3
   10098:	e760      	b.n	ff5c <_dtoa_r+0x8a0>
   1009a:	0003      	movs	r3, r0
   1009c:	e7f5      	b.n	1008a <_dtoa_r+0x9ce>
   1009e:	2f00      	cmp	r7, #0
   100a0:	dc3c      	bgt.n	1011c <_dtoa_r+0xa60>
   100a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   100a4:	2b02      	cmp	r3, #2
   100a6:	dd39      	ble.n	1011c <_dtoa_r+0xa60>
   100a8:	970d      	str	r7, [sp, #52]	; 0x34
   100aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   100ac:	2b00      	cmp	r3, #0
   100ae:	d10c      	bne.n	100ca <_dtoa_r+0xa0e>
   100b0:	9908      	ldr	r1, [sp, #32]
   100b2:	2205      	movs	r2, #5
   100b4:	9804      	ldr	r0, [sp, #16]
   100b6:	f000 fb4d 	bl	10754 <__multadd>
   100ba:	9008      	str	r0, [sp, #32]
   100bc:	0001      	movs	r1, r0
   100be:	9805      	ldr	r0, [sp, #20]
   100c0:	f000 fd09 	bl	10ad6 <__mcmp>
   100c4:	2800      	cmp	r0, #0
   100c6:	dd00      	ble.n	100ca <_dtoa_r+0xa0e>
   100c8:	e55a      	b.n	fb80 <_dtoa_r+0x4c4>
   100ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   100cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   100ce:	43db      	mvns	r3, r3
   100d0:	9303      	str	r3, [sp, #12]
   100d2:	2700      	movs	r7, #0
   100d4:	9908      	ldr	r1, [sp, #32]
   100d6:	9804      	ldr	r0, [sp, #16]
   100d8:	f000 fb23 	bl	10722 <_Bfree>
   100dc:	2e00      	cmp	r6, #0
   100de:	d100      	bne.n	100e2 <_dtoa_r+0xa26>
   100e0:	e63f      	b.n	fd62 <_dtoa_r+0x6a6>
   100e2:	2f00      	cmp	r7, #0
   100e4:	d005      	beq.n	100f2 <_dtoa_r+0xa36>
   100e6:	42b7      	cmp	r7, r6
   100e8:	d003      	beq.n	100f2 <_dtoa_r+0xa36>
   100ea:	0039      	movs	r1, r7
   100ec:	9804      	ldr	r0, [sp, #16]
   100ee:	f000 fb18 	bl	10722 <_Bfree>
   100f2:	0031      	movs	r1, r6
   100f4:	9804      	ldr	r0, [sp, #16]
   100f6:	f000 fb14 	bl	10722 <_Bfree>
   100fa:	e632      	b.n	fd62 <_dtoa_r+0x6a6>
   100fc:	9508      	str	r5, [sp, #32]
   100fe:	002e      	movs	r6, r5
   10100:	e7e3      	b.n	100ca <_dtoa_r+0xa0e>
   10102:	2300      	movs	r3, #0
   10104:	9308      	str	r3, [sp, #32]
   10106:	001e      	movs	r6, r3
   10108:	e7df      	b.n	100ca <_dtoa_r+0xa0e>
   1010a:	46c0      	nop			; (mov r8, r8)
   1010c:	40240000 	.word	0x40240000
   10110:	00000433 	.word	0x00000433
   10114:	9603      	str	r6, [sp, #12]
   10116:	9508      	str	r5, [sp, #32]
   10118:	002e      	movs	r6, r5
   1011a:	e531      	b.n	fb80 <_dtoa_r+0x4c4>
   1011c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1011e:	970d      	str	r7, [sp, #52]	; 0x34
   10120:	2b00      	cmp	r3, #0
   10122:	d000      	beq.n	10126 <_dtoa_r+0xa6a>
   10124:	e753      	b.n	ffce <_dtoa_r+0x912>
   10126:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10128:	9908      	ldr	r1, [sp, #32]
   1012a:	9805      	ldr	r0, [sp, #20]
   1012c:	f7ff fa42 	bl	f5b4 <quorem>
   10130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10132:	3030      	adds	r0, #48	; 0x30
   10134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10136:	7028      	strb	r0, [r5, #0]
   10138:	3501      	adds	r5, #1
   1013a:	0004      	movs	r4, r0
   1013c:	1aeb      	subs	r3, r5, r3
   1013e:	429a      	cmp	r2, r3
   10140:	dc78      	bgt.n	10234 <_dtoa_r+0xb78>
   10142:	1e15      	subs	r5, r2, #0
   10144:	dc00      	bgt.n	10148 <_dtoa_r+0xa8c>
   10146:	2501      	movs	r5, #1
   10148:	2700      	movs	r7, #0
   1014a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1014c:	195d      	adds	r5, r3, r5
   1014e:	9905      	ldr	r1, [sp, #20]
   10150:	2201      	movs	r2, #1
   10152:	9804      	ldr	r0, [sp, #16]
   10154:	f000 fc6e 	bl	10a34 <__lshift>
   10158:	9908      	ldr	r1, [sp, #32]
   1015a:	9005      	str	r0, [sp, #20]
   1015c:	f000 fcbb 	bl	10ad6 <__mcmp>
   10160:	2800      	cmp	r0, #0
   10162:	dc2f      	bgt.n	101c4 <_dtoa_r+0xb08>
   10164:	d101      	bne.n	1016a <_dtoa_r+0xaae>
   10166:	07e3      	lsls	r3, r4, #31
   10168:	d42c      	bmi.n	101c4 <_dtoa_r+0xb08>
   1016a:	1e6b      	subs	r3, r5, #1
   1016c:	781a      	ldrb	r2, [r3, #0]
   1016e:	2a30      	cmp	r2, #48	; 0x30
   10170:	d1b0      	bne.n	100d4 <_dtoa_r+0xa18>
   10172:	001d      	movs	r5, r3
   10174:	e7f9      	b.n	1016a <_dtoa_r+0xaae>
   10176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10178:	2b00      	cmp	r3, #0
   1017a:	db07      	blt.n	1018c <_dtoa_r+0xad0>
   1017c:	001d      	movs	r5, r3
   1017e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10180:	431d      	orrs	r5, r3
   10182:	d126      	bne.n	101d2 <_dtoa_r+0xb16>
   10184:	2301      	movs	r3, #1
   10186:	9a06      	ldr	r2, [sp, #24]
   10188:	4213      	tst	r3, r2
   1018a:	d122      	bne.n	101d2 <_dtoa_r+0xb16>
   1018c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1018e:	2b00      	cmp	r3, #0
   10190:	dc00      	bgt.n	10194 <_dtoa_r+0xad8>
   10192:	e773      	b.n	1007c <_dtoa_r+0x9c0>
   10194:	9905      	ldr	r1, [sp, #20]
   10196:	2201      	movs	r2, #1
   10198:	9804      	ldr	r0, [sp, #16]
   1019a:	f000 fc4b 	bl	10a34 <__lshift>
   1019e:	9908      	ldr	r1, [sp, #32]
   101a0:	9005      	str	r0, [sp, #20]
   101a2:	f000 fc98 	bl	10ad6 <__mcmp>
   101a6:	2800      	cmp	r0, #0
   101a8:	dc04      	bgt.n	101b4 <_dtoa_r+0xaf8>
   101aa:	d000      	beq.n	101ae <_dtoa_r+0xaf2>
   101ac:	e766      	b.n	1007c <_dtoa_r+0x9c0>
   101ae:	07e3      	lsls	r3, r4, #31
   101b0:	d400      	bmi.n	101b4 <_dtoa_r+0xaf8>
   101b2:	e763      	b.n	1007c <_dtoa_r+0x9c0>
   101b4:	2c39      	cmp	r4, #57	; 0x39
   101b6:	d000      	beq.n	101ba <_dtoa_r+0xafe>
   101b8:	e75e      	b.n	10078 <_dtoa_r+0x9bc>
   101ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   101be:	1c5d      	adds	r5, r3, #1
   101c0:	2339      	movs	r3, #57	; 0x39
   101c2:	7013      	strb	r3, [r2, #0]
   101c4:	1e6b      	subs	r3, r5, #1
   101c6:	781a      	ldrb	r2, [r3, #0]
   101c8:	2a39      	cmp	r2, #57	; 0x39
   101ca:	d03b      	beq.n	10244 <_dtoa_r+0xb88>
   101cc:	3201      	adds	r2, #1
   101ce:	701a      	strb	r2, [r3, #0]
   101d0:	e780      	b.n	100d4 <_dtoa_r+0xa18>
   101d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101d4:	3301      	adds	r3, #1
   101d6:	930d      	str	r3, [sp, #52]	; 0x34
   101d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   101da:	2b00      	cmp	r3, #0
   101dc:	dd05      	ble.n	101ea <_dtoa_r+0xb2e>
   101de:	2c39      	cmp	r4, #57	; 0x39
   101e0:	d0eb      	beq.n	101ba <_dtoa_r+0xafe>
   101e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   101e4:	3401      	adds	r4, #1
   101e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101e8:	e74a      	b.n	10080 <_dtoa_r+0x9c4>
   101ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   101ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   101f0:	701c      	strb	r4, [r3, #0]
   101f2:	4293      	cmp	r3, r2
   101f4:	d0ab      	beq.n	1014e <_dtoa_r+0xa92>
   101f6:	2300      	movs	r3, #0
   101f8:	220a      	movs	r2, #10
   101fa:	9905      	ldr	r1, [sp, #20]
   101fc:	9804      	ldr	r0, [sp, #16]
   101fe:	f000 faa9 	bl	10754 <__multadd>
   10202:	2300      	movs	r3, #0
   10204:	9005      	str	r0, [sp, #20]
   10206:	220a      	movs	r2, #10
   10208:	0039      	movs	r1, r7
   1020a:	9804      	ldr	r0, [sp, #16]
   1020c:	42b7      	cmp	r7, r6
   1020e:	d106      	bne.n	1021e <_dtoa_r+0xb62>
   10210:	f000 faa0 	bl	10754 <__multadd>
   10214:	0007      	movs	r7, r0
   10216:	0006      	movs	r6, r0
   10218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1021a:	930b      	str	r3, [sp, #44]	; 0x2c
   1021c:	e6fc      	b.n	10018 <_dtoa_r+0x95c>
   1021e:	f000 fa99 	bl	10754 <__multadd>
   10222:	0031      	movs	r1, r6
   10224:	0007      	movs	r7, r0
   10226:	2300      	movs	r3, #0
   10228:	220a      	movs	r2, #10
   1022a:	9804      	ldr	r0, [sp, #16]
   1022c:	f000 fa92 	bl	10754 <__multadd>
   10230:	0006      	movs	r6, r0
   10232:	e7f1      	b.n	10218 <_dtoa_r+0xb5c>
   10234:	2300      	movs	r3, #0
   10236:	220a      	movs	r2, #10
   10238:	9905      	ldr	r1, [sp, #20]
   1023a:	9804      	ldr	r0, [sp, #16]
   1023c:	f000 fa8a 	bl	10754 <__multadd>
   10240:	9005      	str	r0, [sp, #20]
   10242:	e771      	b.n	10128 <_dtoa_r+0xa6c>
   10244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10246:	429a      	cmp	r2, r3
   10248:	d105      	bne.n	10256 <_dtoa_r+0xb9a>
   1024a:	9b03      	ldr	r3, [sp, #12]
   1024c:	3301      	adds	r3, #1
   1024e:	9303      	str	r3, [sp, #12]
   10250:	2331      	movs	r3, #49	; 0x31
   10252:	7013      	strb	r3, [r2, #0]
   10254:	e73e      	b.n	100d4 <_dtoa_r+0xa18>
   10256:	001d      	movs	r5, r3
   10258:	e7b4      	b.n	101c4 <_dtoa_r+0xb08>
   1025a:	4b0a      	ldr	r3, [pc, #40]	; (10284 <_dtoa_r+0xbc8>)
   1025c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1025e:	930a      	str	r3, [sp, #40]	; 0x28
   10260:	4b09      	ldr	r3, [pc, #36]	; (10288 <_dtoa_r+0xbcc>)
   10262:	2a00      	cmp	r2, #0
   10264:	d001      	beq.n	1026a <_dtoa_r+0xbae>
   10266:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10268:	6013      	str	r3, [r2, #0]
   1026a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1026c:	b01d      	add	sp, #116	; 0x74
   1026e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10272:	2b00      	cmp	r3, #0
   10274:	dd00      	ble.n	10278 <_dtoa_r+0xbbc>
   10276:	e756      	b.n	10126 <_dtoa_r+0xa6a>
   10278:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1027a:	2b02      	cmp	r3, #2
   1027c:	dc00      	bgt.n	10280 <_dtoa_r+0xbc4>
   1027e:	e752      	b.n	10126 <_dtoa_r+0xa6a>
   10280:	e713      	b.n	100aa <_dtoa_r+0x9ee>
   10282:	46c0      	nop			; (mov r8, r8)
   10284:	000151e7 	.word	0x000151e7
   10288:	000151ef 	.word	0x000151ef

0001028c <__sflush_r>:
   1028c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1028e:	898a      	ldrh	r2, [r1, #12]
   10290:	0005      	movs	r5, r0
   10292:	000c      	movs	r4, r1
   10294:	0713      	lsls	r3, r2, #28
   10296:	d460      	bmi.n	1035a <__sflush_r+0xce>
   10298:	684b      	ldr	r3, [r1, #4]
   1029a:	2b00      	cmp	r3, #0
   1029c:	dc04      	bgt.n	102a8 <__sflush_r+0x1c>
   1029e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   102a0:	2b00      	cmp	r3, #0
   102a2:	dc01      	bgt.n	102a8 <__sflush_r+0x1c>
   102a4:	2000      	movs	r0, #0
   102a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   102a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   102aa:	2f00      	cmp	r7, #0
   102ac:	d0fa      	beq.n	102a4 <__sflush_r+0x18>
   102ae:	2300      	movs	r3, #0
   102b0:	682e      	ldr	r6, [r5, #0]
   102b2:	602b      	str	r3, [r5, #0]
   102b4:	2380      	movs	r3, #128	; 0x80
   102b6:	015b      	lsls	r3, r3, #5
   102b8:	401a      	ands	r2, r3
   102ba:	d034      	beq.n	10326 <__sflush_r+0x9a>
   102bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
   102be:	89a3      	ldrh	r3, [r4, #12]
   102c0:	075b      	lsls	r3, r3, #29
   102c2:	d506      	bpl.n	102d2 <__sflush_r+0x46>
   102c4:	6863      	ldr	r3, [r4, #4]
   102c6:	1ac0      	subs	r0, r0, r3
   102c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   102ca:	2b00      	cmp	r3, #0
   102cc:	d001      	beq.n	102d2 <__sflush_r+0x46>
   102ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
   102d0:	1ac0      	subs	r0, r0, r3
   102d2:	0002      	movs	r2, r0
   102d4:	6a21      	ldr	r1, [r4, #32]
   102d6:	2300      	movs	r3, #0
   102d8:	0028      	movs	r0, r5
   102da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   102dc:	47b8      	blx	r7
   102de:	89a1      	ldrh	r1, [r4, #12]
   102e0:	1c43      	adds	r3, r0, #1
   102e2:	d106      	bne.n	102f2 <__sflush_r+0x66>
   102e4:	682b      	ldr	r3, [r5, #0]
   102e6:	2b1d      	cmp	r3, #29
   102e8:	d831      	bhi.n	1034e <__sflush_r+0xc2>
   102ea:	4a2c      	ldr	r2, [pc, #176]	; (1039c <__sflush_r+0x110>)
   102ec:	40da      	lsrs	r2, r3
   102ee:	07d3      	lsls	r3, r2, #31
   102f0:	d52d      	bpl.n	1034e <__sflush_r+0xc2>
   102f2:	2300      	movs	r3, #0
   102f4:	6063      	str	r3, [r4, #4]
   102f6:	6923      	ldr	r3, [r4, #16]
   102f8:	6023      	str	r3, [r4, #0]
   102fa:	04cb      	lsls	r3, r1, #19
   102fc:	d505      	bpl.n	1030a <__sflush_r+0x7e>
   102fe:	1c43      	adds	r3, r0, #1
   10300:	d102      	bne.n	10308 <__sflush_r+0x7c>
   10302:	682b      	ldr	r3, [r5, #0]
   10304:	2b00      	cmp	r3, #0
   10306:	d100      	bne.n	1030a <__sflush_r+0x7e>
   10308:	6560      	str	r0, [r4, #84]	; 0x54
   1030a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1030c:	602e      	str	r6, [r5, #0]
   1030e:	2900      	cmp	r1, #0
   10310:	d0c8      	beq.n	102a4 <__sflush_r+0x18>
   10312:	0023      	movs	r3, r4
   10314:	3344      	adds	r3, #68	; 0x44
   10316:	4299      	cmp	r1, r3
   10318:	d002      	beq.n	10320 <__sflush_r+0x94>
   1031a:	0028      	movs	r0, r5
   1031c:	f7fe f9ae 	bl	e67c <_free_r>
   10320:	2000      	movs	r0, #0
   10322:	6360      	str	r0, [r4, #52]	; 0x34
   10324:	e7bf      	b.n	102a6 <__sflush_r+0x1a>
   10326:	2301      	movs	r3, #1
   10328:	6a21      	ldr	r1, [r4, #32]
   1032a:	0028      	movs	r0, r5
   1032c:	47b8      	blx	r7
   1032e:	1c43      	adds	r3, r0, #1
   10330:	d1c5      	bne.n	102be <__sflush_r+0x32>
   10332:	682b      	ldr	r3, [r5, #0]
   10334:	2b00      	cmp	r3, #0
   10336:	d0c2      	beq.n	102be <__sflush_r+0x32>
   10338:	2b1d      	cmp	r3, #29
   1033a:	d001      	beq.n	10340 <__sflush_r+0xb4>
   1033c:	2b16      	cmp	r3, #22
   1033e:	d101      	bne.n	10344 <__sflush_r+0xb8>
   10340:	602e      	str	r6, [r5, #0]
   10342:	e7af      	b.n	102a4 <__sflush_r+0x18>
   10344:	2340      	movs	r3, #64	; 0x40
   10346:	89a2      	ldrh	r2, [r4, #12]
   10348:	4313      	orrs	r3, r2
   1034a:	81a3      	strh	r3, [r4, #12]
   1034c:	e7ab      	b.n	102a6 <__sflush_r+0x1a>
   1034e:	2340      	movs	r3, #64	; 0x40
   10350:	430b      	orrs	r3, r1
   10352:	2001      	movs	r0, #1
   10354:	81a3      	strh	r3, [r4, #12]
   10356:	4240      	negs	r0, r0
   10358:	e7a5      	b.n	102a6 <__sflush_r+0x1a>
   1035a:	690f      	ldr	r7, [r1, #16]
   1035c:	2f00      	cmp	r7, #0
   1035e:	d0a1      	beq.n	102a4 <__sflush_r+0x18>
   10360:	680b      	ldr	r3, [r1, #0]
   10362:	600f      	str	r7, [r1, #0]
   10364:	1bdb      	subs	r3, r3, r7
   10366:	9301      	str	r3, [sp, #4]
   10368:	2300      	movs	r3, #0
   1036a:	0792      	lsls	r2, r2, #30
   1036c:	d100      	bne.n	10370 <__sflush_r+0xe4>
   1036e:	694b      	ldr	r3, [r1, #20]
   10370:	60a3      	str	r3, [r4, #8]
   10372:	9b01      	ldr	r3, [sp, #4]
   10374:	2b00      	cmp	r3, #0
   10376:	dc00      	bgt.n	1037a <__sflush_r+0xee>
   10378:	e794      	b.n	102a4 <__sflush_r+0x18>
   1037a:	9b01      	ldr	r3, [sp, #4]
   1037c:	003a      	movs	r2, r7
   1037e:	6a21      	ldr	r1, [r4, #32]
   10380:	0028      	movs	r0, r5
   10382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10384:	47b0      	blx	r6
   10386:	2800      	cmp	r0, #0
   10388:	dc03      	bgt.n	10392 <__sflush_r+0x106>
   1038a:	2340      	movs	r3, #64	; 0x40
   1038c:	89a2      	ldrh	r2, [r4, #12]
   1038e:	4313      	orrs	r3, r2
   10390:	e7df      	b.n	10352 <__sflush_r+0xc6>
   10392:	9b01      	ldr	r3, [sp, #4]
   10394:	183f      	adds	r7, r7, r0
   10396:	1a1b      	subs	r3, r3, r0
   10398:	9301      	str	r3, [sp, #4]
   1039a:	e7ea      	b.n	10372 <__sflush_r+0xe6>
   1039c:	20400001 	.word	0x20400001

000103a0 <_fflush_r>:
   103a0:	690b      	ldr	r3, [r1, #16]
   103a2:	b570      	push	{r4, r5, r6, lr}
   103a4:	0005      	movs	r5, r0
   103a6:	000c      	movs	r4, r1
   103a8:	2b00      	cmp	r3, #0
   103aa:	d101      	bne.n	103b0 <_fflush_r+0x10>
   103ac:	2000      	movs	r0, #0
   103ae:	bd70      	pop	{r4, r5, r6, pc}
   103b0:	2800      	cmp	r0, #0
   103b2:	d004      	beq.n	103be <_fflush_r+0x1e>
   103b4:	6983      	ldr	r3, [r0, #24]
   103b6:	2b00      	cmp	r3, #0
   103b8:	d101      	bne.n	103be <_fflush_r+0x1e>
   103ba:	f000 f85f 	bl	1047c <__sinit>
   103be:	4b0b      	ldr	r3, [pc, #44]	; (103ec <_fflush_r+0x4c>)
   103c0:	429c      	cmp	r4, r3
   103c2:	d109      	bne.n	103d8 <_fflush_r+0x38>
   103c4:	686c      	ldr	r4, [r5, #4]
   103c6:	220c      	movs	r2, #12
   103c8:	5ea3      	ldrsh	r3, [r4, r2]
   103ca:	2b00      	cmp	r3, #0
   103cc:	d0ee      	beq.n	103ac <_fflush_r+0xc>
   103ce:	0021      	movs	r1, r4
   103d0:	0028      	movs	r0, r5
   103d2:	f7ff ff5b 	bl	1028c <__sflush_r>
   103d6:	e7ea      	b.n	103ae <_fflush_r+0xe>
   103d8:	4b05      	ldr	r3, [pc, #20]	; (103f0 <_fflush_r+0x50>)
   103da:	429c      	cmp	r4, r3
   103dc:	d101      	bne.n	103e2 <_fflush_r+0x42>
   103de:	68ac      	ldr	r4, [r5, #8]
   103e0:	e7f1      	b.n	103c6 <_fflush_r+0x26>
   103e2:	4b04      	ldr	r3, [pc, #16]	; (103f4 <_fflush_r+0x54>)
   103e4:	429c      	cmp	r4, r3
   103e6:	d1ee      	bne.n	103c6 <_fflush_r+0x26>
   103e8:	68ec      	ldr	r4, [r5, #12]
   103ea:	e7ec      	b.n	103c6 <_fflush_r+0x26>
   103ec:	00015214 	.word	0x00015214
   103f0:	00015234 	.word	0x00015234
   103f4:	000151f4 	.word	0x000151f4

000103f8 <_cleanup_r>:
   103f8:	b510      	push	{r4, lr}
   103fa:	4902      	ldr	r1, [pc, #8]	; (10404 <_cleanup_r+0xc>)
   103fc:	f000 f8b2 	bl	10564 <_fwalk_reent>
   10400:	bd10      	pop	{r4, pc}
   10402:	46c0      	nop			; (mov r8, r8)
   10404:	000103a1 	.word	0x000103a1

00010408 <std.isra.0>:
   10408:	2300      	movs	r3, #0
   1040a:	b510      	push	{r4, lr}
   1040c:	0004      	movs	r4, r0
   1040e:	6003      	str	r3, [r0, #0]
   10410:	6043      	str	r3, [r0, #4]
   10412:	6083      	str	r3, [r0, #8]
   10414:	8181      	strh	r1, [r0, #12]
   10416:	6643      	str	r3, [r0, #100]	; 0x64
   10418:	81c2      	strh	r2, [r0, #14]
   1041a:	6103      	str	r3, [r0, #16]
   1041c:	6143      	str	r3, [r0, #20]
   1041e:	6183      	str	r3, [r0, #24]
   10420:	0019      	movs	r1, r3
   10422:	2208      	movs	r2, #8
   10424:	305c      	adds	r0, #92	; 0x5c
   10426:	f7fe f920 	bl	e66a <memset>
   1042a:	4b05      	ldr	r3, [pc, #20]	; (10440 <std.isra.0+0x38>)
   1042c:	6224      	str	r4, [r4, #32]
   1042e:	6263      	str	r3, [r4, #36]	; 0x24
   10430:	4b04      	ldr	r3, [pc, #16]	; (10444 <std.isra.0+0x3c>)
   10432:	62a3      	str	r3, [r4, #40]	; 0x28
   10434:	4b04      	ldr	r3, [pc, #16]	; (10448 <std.isra.0+0x40>)
   10436:	62e3      	str	r3, [r4, #44]	; 0x2c
   10438:	4b04      	ldr	r3, [pc, #16]	; (1044c <std.isra.0+0x44>)
   1043a:	6323      	str	r3, [r4, #48]	; 0x30
   1043c:	bd10      	pop	{r4, pc}
   1043e:	46c0      	nop			; (mov r8, r8)
   10440:	00011255 	.word	0x00011255
   10444:	0001127d 	.word	0x0001127d
   10448:	000112b5 	.word	0x000112b5
   1044c:	000112e1 	.word	0x000112e1

00010450 <__sfmoreglue>:
   10450:	b570      	push	{r4, r5, r6, lr}
   10452:	2568      	movs	r5, #104	; 0x68
   10454:	1e4a      	subs	r2, r1, #1
   10456:	4355      	muls	r5, r2
   10458:	000e      	movs	r6, r1
   1045a:	0029      	movs	r1, r5
   1045c:	3174      	adds	r1, #116	; 0x74
   1045e:	f7fe f957 	bl	e710 <_malloc_r>
   10462:	1e04      	subs	r4, r0, #0
   10464:	d008      	beq.n	10478 <__sfmoreglue+0x28>
   10466:	2100      	movs	r1, #0
   10468:	002a      	movs	r2, r5
   1046a:	6001      	str	r1, [r0, #0]
   1046c:	6046      	str	r6, [r0, #4]
   1046e:	300c      	adds	r0, #12
   10470:	60a0      	str	r0, [r4, #8]
   10472:	3268      	adds	r2, #104	; 0x68
   10474:	f7fe f8f9 	bl	e66a <memset>
   10478:	0020      	movs	r0, r4
   1047a:	bd70      	pop	{r4, r5, r6, pc}

0001047c <__sinit>:
   1047c:	6983      	ldr	r3, [r0, #24]
   1047e:	b513      	push	{r0, r1, r4, lr}
   10480:	0004      	movs	r4, r0
   10482:	2b00      	cmp	r3, #0
   10484:	d128      	bne.n	104d8 <__sinit+0x5c>
   10486:	6483      	str	r3, [r0, #72]	; 0x48
   10488:	64c3      	str	r3, [r0, #76]	; 0x4c
   1048a:	6503      	str	r3, [r0, #80]	; 0x50
   1048c:	4b13      	ldr	r3, [pc, #76]	; (104dc <__sinit+0x60>)
   1048e:	4a14      	ldr	r2, [pc, #80]	; (104e0 <__sinit+0x64>)
   10490:	681b      	ldr	r3, [r3, #0]
   10492:	6282      	str	r2, [r0, #40]	; 0x28
   10494:	9301      	str	r3, [sp, #4]
   10496:	4298      	cmp	r0, r3
   10498:	d101      	bne.n	1049e <__sinit+0x22>
   1049a:	2301      	movs	r3, #1
   1049c:	6183      	str	r3, [r0, #24]
   1049e:	0020      	movs	r0, r4
   104a0:	f000 f820 	bl	104e4 <__sfp>
   104a4:	6060      	str	r0, [r4, #4]
   104a6:	0020      	movs	r0, r4
   104a8:	f000 f81c 	bl	104e4 <__sfp>
   104ac:	60a0      	str	r0, [r4, #8]
   104ae:	0020      	movs	r0, r4
   104b0:	f000 f818 	bl	104e4 <__sfp>
   104b4:	2200      	movs	r2, #0
   104b6:	60e0      	str	r0, [r4, #12]
   104b8:	2104      	movs	r1, #4
   104ba:	6860      	ldr	r0, [r4, #4]
   104bc:	f7ff ffa4 	bl	10408 <std.isra.0>
   104c0:	2201      	movs	r2, #1
   104c2:	2109      	movs	r1, #9
   104c4:	68a0      	ldr	r0, [r4, #8]
   104c6:	f7ff ff9f 	bl	10408 <std.isra.0>
   104ca:	2202      	movs	r2, #2
   104cc:	2112      	movs	r1, #18
   104ce:	68e0      	ldr	r0, [r4, #12]
   104d0:	f7ff ff9a 	bl	10408 <std.isra.0>
   104d4:	2301      	movs	r3, #1
   104d6:	61a3      	str	r3, [r4, #24]
   104d8:	bd13      	pop	{r0, r1, r4, pc}
   104da:	46c0      	nop			; (mov r8, r8)
   104dc:	000150a4 	.word	0x000150a4
   104e0:	000103f9 	.word	0x000103f9

000104e4 <__sfp>:
   104e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   104e6:	4b1e      	ldr	r3, [pc, #120]	; (10560 <__sfp+0x7c>)
   104e8:	0007      	movs	r7, r0
   104ea:	681e      	ldr	r6, [r3, #0]
   104ec:	69b3      	ldr	r3, [r6, #24]
   104ee:	2b00      	cmp	r3, #0
   104f0:	d102      	bne.n	104f8 <__sfp+0x14>
   104f2:	0030      	movs	r0, r6
   104f4:	f7ff ffc2 	bl	1047c <__sinit>
   104f8:	3648      	adds	r6, #72	; 0x48
   104fa:	68b4      	ldr	r4, [r6, #8]
   104fc:	6873      	ldr	r3, [r6, #4]
   104fe:	3b01      	subs	r3, #1
   10500:	d504      	bpl.n	1050c <__sfp+0x28>
   10502:	6833      	ldr	r3, [r6, #0]
   10504:	2b00      	cmp	r3, #0
   10506:	d007      	beq.n	10518 <__sfp+0x34>
   10508:	6836      	ldr	r6, [r6, #0]
   1050a:	e7f6      	b.n	104fa <__sfp+0x16>
   1050c:	220c      	movs	r2, #12
   1050e:	5ea5      	ldrsh	r5, [r4, r2]
   10510:	2d00      	cmp	r5, #0
   10512:	d00d      	beq.n	10530 <__sfp+0x4c>
   10514:	3468      	adds	r4, #104	; 0x68
   10516:	e7f2      	b.n	104fe <__sfp+0x1a>
   10518:	2104      	movs	r1, #4
   1051a:	0038      	movs	r0, r7
   1051c:	f7ff ff98 	bl	10450 <__sfmoreglue>
   10520:	6030      	str	r0, [r6, #0]
   10522:	2800      	cmp	r0, #0
   10524:	d1f0      	bne.n	10508 <__sfp+0x24>
   10526:	230c      	movs	r3, #12
   10528:	0004      	movs	r4, r0
   1052a:	603b      	str	r3, [r7, #0]
   1052c:	0020      	movs	r0, r4
   1052e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10530:	2301      	movs	r3, #1
   10532:	0020      	movs	r0, r4
   10534:	425b      	negs	r3, r3
   10536:	81e3      	strh	r3, [r4, #14]
   10538:	3302      	adds	r3, #2
   1053a:	81a3      	strh	r3, [r4, #12]
   1053c:	6665      	str	r5, [r4, #100]	; 0x64
   1053e:	6025      	str	r5, [r4, #0]
   10540:	60a5      	str	r5, [r4, #8]
   10542:	6065      	str	r5, [r4, #4]
   10544:	6125      	str	r5, [r4, #16]
   10546:	6165      	str	r5, [r4, #20]
   10548:	61a5      	str	r5, [r4, #24]
   1054a:	2208      	movs	r2, #8
   1054c:	0029      	movs	r1, r5
   1054e:	305c      	adds	r0, #92	; 0x5c
   10550:	f7fe f88b 	bl	e66a <memset>
   10554:	6365      	str	r5, [r4, #52]	; 0x34
   10556:	63a5      	str	r5, [r4, #56]	; 0x38
   10558:	64a5      	str	r5, [r4, #72]	; 0x48
   1055a:	64e5      	str	r5, [r4, #76]	; 0x4c
   1055c:	e7e6      	b.n	1052c <__sfp+0x48>
   1055e:	46c0      	nop			; (mov r8, r8)
   10560:	000150a4 	.word	0x000150a4

00010564 <_fwalk_reent>:
   10564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10566:	0004      	movs	r4, r0
   10568:	0007      	movs	r7, r0
   1056a:	2600      	movs	r6, #0
   1056c:	9101      	str	r1, [sp, #4]
   1056e:	3448      	adds	r4, #72	; 0x48
   10570:	2c00      	cmp	r4, #0
   10572:	d101      	bne.n	10578 <_fwalk_reent+0x14>
   10574:	0030      	movs	r0, r6
   10576:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10578:	6863      	ldr	r3, [r4, #4]
   1057a:	68a5      	ldr	r5, [r4, #8]
   1057c:	9300      	str	r3, [sp, #0]
   1057e:	9b00      	ldr	r3, [sp, #0]
   10580:	3b01      	subs	r3, #1
   10582:	9300      	str	r3, [sp, #0]
   10584:	d501      	bpl.n	1058a <_fwalk_reent+0x26>
   10586:	6824      	ldr	r4, [r4, #0]
   10588:	e7f2      	b.n	10570 <_fwalk_reent+0xc>
   1058a:	89ab      	ldrh	r3, [r5, #12]
   1058c:	2b01      	cmp	r3, #1
   1058e:	d908      	bls.n	105a2 <_fwalk_reent+0x3e>
   10590:	220e      	movs	r2, #14
   10592:	5eab      	ldrsh	r3, [r5, r2]
   10594:	3301      	adds	r3, #1
   10596:	d004      	beq.n	105a2 <_fwalk_reent+0x3e>
   10598:	0029      	movs	r1, r5
   1059a:	0038      	movs	r0, r7
   1059c:	9b01      	ldr	r3, [sp, #4]
   1059e:	4798      	blx	r3
   105a0:	4306      	orrs	r6, r0
   105a2:	3568      	adds	r5, #104	; 0x68
   105a4:	e7eb      	b.n	1057e <_fwalk_reent+0x1a>
	...

000105a8 <_localeconv_r>:
   105a8:	4b03      	ldr	r3, [pc, #12]	; (105b8 <_localeconv_r+0x10>)
   105aa:	681b      	ldr	r3, [r3, #0]
   105ac:	6a18      	ldr	r0, [r3, #32]
   105ae:	2800      	cmp	r0, #0
   105b0:	d100      	bne.n	105b4 <_localeconv_r+0xc>
   105b2:	4802      	ldr	r0, [pc, #8]	; (105bc <_localeconv_r+0x14>)
   105b4:	30f0      	adds	r0, #240	; 0xf0
   105b6:	4770      	bx	lr
   105b8:	20000080 	.word	0x20000080
   105bc:	200000e4 	.word	0x200000e4

000105c0 <__swhatbuf_r>:
   105c0:	b570      	push	{r4, r5, r6, lr}
   105c2:	000e      	movs	r6, r1
   105c4:	001d      	movs	r5, r3
   105c6:	230e      	movs	r3, #14
   105c8:	5ec9      	ldrsh	r1, [r1, r3]
   105ca:	b090      	sub	sp, #64	; 0x40
   105cc:	0014      	movs	r4, r2
   105ce:	2900      	cmp	r1, #0
   105d0:	da07      	bge.n	105e2 <__swhatbuf_r+0x22>
   105d2:	2300      	movs	r3, #0
   105d4:	602b      	str	r3, [r5, #0]
   105d6:	89b3      	ldrh	r3, [r6, #12]
   105d8:	061b      	lsls	r3, r3, #24
   105da:	d411      	bmi.n	10600 <__swhatbuf_r+0x40>
   105dc:	2380      	movs	r3, #128	; 0x80
   105de:	00db      	lsls	r3, r3, #3
   105e0:	e00f      	b.n	10602 <__swhatbuf_r+0x42>
   105e2:	aa01      	add	r2, sp, #4
   105e4:	f000 fea8 	bl	11338 <_fstat_r>
   105e8:	2800      	cmp	r0, #0
   105ea:	dbf2      	blt.n	105d2 <__swhatbuf_r+0x12>
   105ec:	22f0      	movs	r2, #240	; 0xf0
   105ee:	9b02      	ldr	r3, [sp, #8]
   105f0:	0212      	lsls	r2, r2, #8
   105f2:	4013      	ands	r3, r2
   105f4:	4a05      	ldr	r2, [pc, #20]	; (1060c <__swhatbuf_r+0x4c>)
   105f6:	189b      	adds	r3, r3, r2
   105f8:	425a      	negs	r2, r3
   105fa:	4153      	adcs	r3, r2
   105fc:	602b      	str	r3, [r5, #0]
   105fe:	e7ed      	b.n	105dc <__swhatbuf_r+0x1c>
   10600:	2340      	movs	r3, #64	; 0x40
   10602:	2000      	movs	r0, #0
   10604:	6023      	str	r3, [r4, #0]
   10606:	b010      	add	sp, #64	; 0x40
   10608:	bd70      	pop	{r4, r5, r6, pc}
   1060a:	46c0      	nop			; (mov r8, r8)
   1060c:	ffffe000 	.word	0xffffe000

00010610 <__smakebuf_r>:
   10610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10612:	2602      	movs	r6, #2
   10614:	898b      	ldrh	r3, [r1, #12]
   10616:	0005      	movs	r5, r0
   10618:	000c      	movs	r4, r1
   1061a:	4233      	tst	r3, r6
   1061c:	d006      	beq.n	1062c <__smakebuf_r+0x1c>
   1061e:	0023      	movs	r3, r4
   10620:	3347      	adds	r3, #71	; 0x47
   10622:	6023      	str	r3, [r4, #0]
   10624:	6123      	str	r3, [r4, #16]
   10626:	2301      	movs	r3, #1
   10628:	6163      	str	r3, [r4, #20]
   1062a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1062c:	ab01      	add	r3, sp, #4
   1062e:	466a      	mov	r2, sp
   10630:	f7ff ffc6 	bl	105c0 <__swhatbuf_r>
   10634:	9900      	ldr	r1, [sp, #0]
   10636:	0007      	movs	r7, r0
   10638:	0028      	movs	r0, r5
   1063a:	f7fe f869 	bl	e710 <_malloc_r>
   1063e:	2800      	cmp	r0, #0
   10640:	d108      	bne.n	10654 <__smakebuf_r+0x44>
   10642:	220c      	movs	r2, #12
   10644:	5ea3      	ldrsh	r3, [r4, r2]
   10646:	059a      	lsls	r2, r3, #22
   10648:	d4ef      	bmi.n	1062a <__smakebuf_r+0x1a>
   1064a:	2203      	movs	r2, #3
   1064c:	4393      	bics	r3, r2
   1064e:	431e      	orrs	r6, r3
   10650:	81a6      	strh	r6, [r4, #12]
   10652:	e7e4      	b.n	1061e <__smakebuf_r+0xe>
   10654:	4b0f      	ldr	r3, [pc, #60]	; (10694 <__smakebuf_r+0x84>)
   10656:	62ab      	str	r3, [r5, #40]	; 0x28
   10658:	2380      	movs	r3, #128	; 0x80
   1065a:	89a2      	ldrh	r2, [r4, #12]
   1065c:	6020      	str	r0, [r4, #0]
   1065e:	4313      	orrs	r3, r2
   10660:	81a3      	strh	r3, [r4, #12]
   10662:	9b00      	ldr	r3, [sp, #0]
   10664:	6120      	str	r0, [r4, #16]
   10666:	6163      	str	r3, [r4, #20]
   10668:	9b01      	ldr	r3, [sp, #4]
   1066a:	2b00      	cmp	r3, #0
   1066c:	d00d      	beq.n	1068a <__smakebuf_r+0x7a>
   1066e:	230e      	movs	r3, #14
   10670:	5ee1      	ldrsh	r1, [r4, r3]
   10672:	0028      	movs	r0, r5
   10674:	f000 fe72 	bl	1135c <_isatty_r>
   10678:	2800      	cmp	r0, #0
   1067a:	d006      	beq.n	1068a <__smakebuf_r+0x7a>
   1067c:	2203      	movs	r2, #3
   1067e:	89a3      	ldrh	r3, [r4, #12]
   10680:	4393      	bics	r3, r2
   10682:	001a      	movs	r2, r3
   10684:	2301      	movs	r3, #1
   10686:	4313      	orrs	r3, r2
   10688:	81a3      	strh	r3, [r4, #12]
   1068a:	89a0      	ldrh	r0, [r4, #12]
   1068c:	4338      	orrs	r0, r7
   1068e:	81a0      	strh	r0, [r4, #12]
   10690:	e7cb      	b.n	1062a <__smakebuf_r+0x1a>
   10692:	46c0      	nop			; (mov r8, r8)
   10694:	000103f9 	.word	0x000103f9

00010698 <memchr>:
   10698:	b2c9      	uxtb	r1, r1
   1069a:	1882      	adds	r2, r0, r2
   1069c:	4290      	cmp	r0, r2
   1069e:	d101      	bne.n	106a4 <memchr+0xc>
   106a0:	2000      	movs	r0, #0
   106a2:	4770      	bx	lr
   106a4:	7803      	ldrb	r3, [r0, #0]
   106a6:	428b      	cmp	r3, r1
   106a8:	d0fb      	beq.n	106a2 <memchr+0xa>
   106aa:	3001      	adds	r0, #1
   106ac:	e7f6      	b.n	1069c <memchr+0x4>

000106ae <__malloc_lock>:
   106ae:	4770      	bx	lr

000106b0 <__malloc_unlock>:
   106b0:	4770      	bx	lr

000106b2 <_Balloc>:
   106b2:	b570      	push	{r4, r5, r6, lr}
   106b4:	6a46      	ldr	r6, [r0, #36]	; 0x24
   106b6:	0004      	movs	r4, r0
   106b8:	000d      	movs	r5, r1
   106ba:	2e00      	cmp	r6, #0
   106bc:	d107      	bne.n	106ce <_Balloc+0x1c>
   106be:	2010      	movs	r0, #16
   106c0:	f7fd ff9c 	bl	e5fc <malloc>
   106c4:	6260      	str	r0, [r4, #36]	; 0x24
   106c6:	6046      	str	r6, [r0, #4]
   106c8:	6086      	str	r6, [r0, #8]
   106ca:	6006      	str	r6, [r0, #0]
   106cc:	60c6      	str	r6, [r0, #12]
   106ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
   106d0:	68f3      	ldr	r3, [r6, #12]
   106d2:	2b00      	cmp	r3, #0
   106d4:	d013      	beq.n	106fe <_Balloc+0x4c>
   106d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   106d8:	00aa      	lsls	r2, r5, #2
   106da:	68db      	ldr	r3, [r3, #12]
   106dc:	189b      	adds	r3, r3, r2
   106de:	6818      	ldr	r0, [r3, #0]
   106e0:	2800      	cmp	r0, #0
   106e2:	d118      	bne.n	10716 <_Balloc+0x64>
   106e4:	2101      	movs	r1, #1
   106e6:	000e      	movs	r6, r1
   106e8:	40ae      	lsls	r6, r5
   106ea:	1d72      	adds	r2, r6, #5
   106ec:	0092      	lsls	r2, r2, #2
   106ee:	0020      	movs	r0, r4
   106f0:	f000 fac2 	bl	10c78 <_calloc_r>
   106f4:	2800      	cmp	r0, #0
   106f6:	d00c      	beq.n	10712 <_Balloc+0x60>
   106f8:	6045      	str	r5, [r0, #4]
   106fa:	6086      	str	r6, [r0, #8]
   106fc:	e00d      	b.n	1071a <_Balloc+0x68>
   106fe:	2221      	movs	r2, #33	; 0x21
   10700:	2104      	movs	r1, #4
   10702:	0020      	movs	r0, r4
   10704:	f000 fab8 	bl	10c78 <_calloc_r>
   10708:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1070a:	60f0      	str	r0, [r6, #12]
   1070c:	68db      	ldr	r3, [r3, #12]
   1070e:	2b00      	cmp	r3, #0
   10710:	d1e1      	bne.n	106d6 <_Balloc+0x24>
   10712:	2000      	movs	r0, #0
   10714:	bd70      	pop	{r4, r5, r6, pc}
   10716:	6802      	ldr	r2, [r0, #0]
   10718:	601a      	str	r2, [r3, #0]
   1071a:	2300      	movs	r3, #0
   1071c:	6103      	str	r3, [r0, #16]
   1071e:	60c3      	str	r3, [r0, #12]
   10720:	e7f8      	b.n	10714 <_Balloc+0x62>

00010722 <_Bfree>:
   10722:	b570      	push	{r4, r5, r6, lr}
   10724:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10726:	0006      	movs	r6, r0
   10728:	000d      	movs	r5, r1
   1072a:	2c00      	cmp	r4, #0
   1072c:	d107      	bne.n	1073e <_Bfree+0x1c>
   1072e:	2010      	movs	r0, #16
   10730:	f7fd ff64 	bl	e5fc <malloc>
   10734:	6270      	str	r0, [r6, #36]	; 0x24
   10736:	6044      	str	r4, [r0, #4]
   10738:	6084      	str	r4, [r0, #8]
   1073a:	6004      	str	r4, [r0, #0]
   1073c:	60c4      	str	r4, [r0, #12]
   1073e:	2d00      	cmp	r5, #0
   10740:	d007      	beq.n	10752 <_Bfree+0x30>
   10742:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10744:	686a      	ldr	r2, [r5, #4]
   10746:	68db      	ldr	r3, [r3, #12]
   10748:	0092      	lsls	r2, r2, #2
   1074a:	189b      	adds	r3, r3, r2
   1074c:	681a      	ldr	r2, [r3, #0]
   1074e:	602a      	str	r2, [r5, #0]
   10750:	601d      	str	r5, [r3, #0]
   10752:	bd70      	pop	{r4, r5, r6, pc}

00010754 <__multadd>:
   10754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10756:	001e      	movs	r6, r3
   10758:	2314      	movs	r3, #20
   1075a:	469c      	mov	ip, r3
   1075c:	0007      	movs	r7, r0
   1075e:	000c      	movs	r4, r1
   10760:	2000      	movs	r0, #0
   10762:	690d      	ldr	r5, [r1, #16]
   10764:	448c      	add	ip, r1
   10766:	4663      	mov	r3, ip
   10768:	8819      	ldrh	r1, [r3, #0]
   1076a:	681b      	ldr	r3, [r3, #0]
   1076c:	4351      	muls	r1, r2
   1076e:	0c1b      	lsrs	r3, r3, #16
   10770:	4353      	muls	r3, r2
   10772:	1989      	adds	r1, r1, r6
   10774:	0c0e      	lsrs	r6, r1, #16
   10776:	199b      	adds	r3, r3, r6
   10778:	b289      	uxth	r1, r1
   1077a:	0c1e      	lsrs	r6, r3, #16
   1077c:	041b      	lsls	r3, r3, #16
   1077e:	185b      	adds	r3, r3, r1
   10780:	4661      	mov	r1, ip
   10782:	3001      	adds	r0, #1
   10784:	c108      	stmia	r1!, {r3}
   10786:	468c      	mov	ip, r1
   10788:	4285      	cmp	r5, r0
   1078a:	dcec      	bgt.n	10766 <__multadd+0x12>
   1078c:	2e00      	cmp	r6, #0
   1078e:	d01b      	beq.n	107c8 <__multadd+0x74>
   10790:	68a3      	ldr	r3, [r4, #8]
   10792:	429d      	cmp	r5, r3
   10794:	db12      	blt.n	107bc <__multadd+0x68>
   10796:	6863      	ldr	r3, [r4, #4]
   10798:	0038      	movs	r0, r7
   1079a:	1c59      	adds	r1, r3, #1
   1079c:	f7ff ff89 	bl	106b2 <_Balloc>
   107a0:	0021      	movs	r1, r4
   107a2:	6923      	ldr	r3, [r4, #16]
   107a4:	9001      	str	r0, [sp, #4]
   107a6:	1c9a      	adds	r2, r3, #2
   107a8:	0092      	lsls	r2, r2, #2
   107aa:	310c      	adds	r1, #12
   107ac:	300c      	adds	r0, #12
   107ae:	f7fd ff41 	bl	e634 <memcpy>
   107b2:	0021      	movs	r1, r4
   107b4:	0038      	movs	r0, r7
   107b6:	f7ff ffb4 	bl	10722 <_Bfree>
   107ba:	9c01      	ldr	r4, [sp, #4]
   107bc:	1d2b      	adds	r3, r5, #4
   107be:	009b      	lsls	r3, r3, #2
   107c0:	18e3      	adds	r3, r4, r3
   107c2:	3501      	adds	r5, #1
   107c4:	605e      	str	r6, [r3, #4]
   107c6:	6125      	str	r5, [r4, #16]
   107c8:	0020      	movs	r0, r4
   107ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000107cc <__hi0bits>:
   107cc:	0003      	movs	r3, r0
   107ce:	0c02      	lsrs	r2, r0, #16
   107d0:	2000      	movs	r0, #0
   107d2:	4282      	cmp	r2, r0
   107d4:	d101      	bne.n	107da <__hi0bits+0xe>
   107d6:	041b      	lsls	r3, r3, #16
   107d8:	3010      	adds	r0, #16
   107da:	0e1a      	lsrs	r2, r3, #24
   107dc:	d101      	bne.n	107e2 <__hi0bits+0x16>
   107de:	3008      	adds	r0, #8
   107e0:	021b      	lsls	r3, r3, #8
   107e2:	0f1a      	lsrs	r2, r3, #28
   107e4:	d101      	bne.n	107ea <__hi0bits+0x1e>
   107e6:	3004      	adds	r0, #4
   107e8:	011b      	lsls	r3, r3, #4
   107ea:	0f9a      	lsrs	r2, r3, #30
   107ec:	d101      	bne.n	107f2 <__hi0bits+0x26>
   107ee:	3002      	adds	r0, #2
   107f0:	009b      	lsls	r3, r3, #2
   107f2:	2b00      	cmp	r3, #0
   107f4:	db03      	blt.n	107fe <__hi0bits+0x32>
   107f6:	3001      	adds	r0, #1
   107f8:	005b      	lsls	r3, r3, #1
   107fa:	d400      	bmi.n	107fe <__hi0bits+0x32>
   107fc:	2020      	movs	r0, #32
   107fe:	4770      	bx	lr

00010800 <__lo0bits>:
   10800:	2207      	movs	r2, #7
   10802:	6803      	ldr	r3, [r0, #0]
   10804:	b510      	push	{r4, lr}
   10806:	0001      	movs	r1, r0
   10808:	401a      	ands	r2, r3
   1080a:	d00d      	beq.n	10828 <__lo0bits+0x28>
   1080c:	2401      	movs	r4, #1
   1080e:	2000      	movs	r0, #0
   10810:	4223      	tst	r3, r4
   10812:	d105      	bne.n	10820 <__lo0bits+0x20>
   10814:	3002      	adds	r0, #2
   10816:	4203      	tst	r3, r0
   10818:	d003      	beq.n	10822 <__lo0bits+0x22>
   1081a:	40e3      	lsrs	r3, r4
   1081c:	0020      	movs	r0, r4
   1081e:	600b      	str	r3, [r1, #0]
   10820:	bd10      	pop	{r4, pc}
   10822:	089b      	lsrs	r3, r3, #2
   10824:	600b      	str	r3, [r1, #0]
   10826:	e7fb      	b.n	10820 <__lo0bits+0x20>
   10828:	b29c      	uxth	r4, r3
   1082a:	0010      	movs	r0, r2
   1082c:	2c00      	cmp	r4, #0
   1082e:	d101      	bne.n	10834 <__lo0bits+0x34>
   10830:	2010      	movs	r0, #16
   10832:	0c1b      	lsrs	r3, r3, #16
   10834:	b2da      	uxtb	r2, r3
   10836:	2a00      	cmp	r2, #0
   10838:	d101      	bne.n	1083e <__lo0bits+0x3e>
   1083a:	3008      	adds	r0, #8
   1083c:	0a1b      	lsrs	r3, r3, #8
   1083e:	071a      	lsls	r2, r3, #28
   10840:	d101      	bne.n	10846 <__lo0bits+0x46>
   10842:	3004      	adds	r0, #4
   10844:	091b      	lsrs	r3, r3, #4
   10846:	079a      	lsls	r2, r3, #30
   10848:	d101      	bne.n	1084e <__lo0bits+0x4e>
   1084a:	3002      	adds	r0, #2
   1084c:	089b      	lsrs	r3, r3, #2
   1084e:	07da      	lsls	r2, r3, #31
   10850:	d4e8      	bmi.n	10824 <__lo0bits+0x24>
   10852:	085b      	lsrs	r3, r3, #1
   10854:	d001      	beq.n	1085a <__lo0bits+0x5a>
   10856:	3001      	adds	r0, #1
   10858:	e7e4      	b.n	10824 <__lo0bits+0x24>
   1085a:	2020      	movs	r0, #32
   1085c:	e7e0      	b.n	10820 <__lo0bits+0x20>

0001085e <__i2b>:
   1085e:	b510      	push	{r4, lr}
   10860:	000c      	movs	r4, r1
   10862:	2101      	movs	r1, #1
   10864:	f7ff ff25 	bl	106b2 <_Balloc>
   10868:	2301      	movs	r3, #1
   1086a:	6144      	str	r4, [r0, #20]
   1086c:	6103      	str	r3, [r0, #16]
   1086e:	bd10      	pop	{r4, pc}

00010870 <__multiply>:
   10870:	b5f0      	push	{r4, r5, r6, r7, lr}
   10872:	690b      	ldr	r3, [r1, #16]
   10874:	0015      	movs	r5, r2
   10876:	6912      	ldr	r2, [r2, #16]
   10878:	b089      	sub	sp, #36	; 0x24
   1087a:	000c      	movs	r4, r1
   1087c:	4293      	cmp	r3, r2
   1087e:	da01      	bge.n	10884 <__multiply+0x14>
   10880:	002c      	movs	r4, r5
   10882:	000d      	movs	r5, r1
   10884:	6927      	ldr	r7, [r4, #16]
   10886:	692e      	ldr	r6, [r5, #16]
   10888:	68a2      	ldr	r2, [r4, #8]
   1088a:	19bb      	adds	r3, r7, r6
   1088c:	6861      	ldr	r1, [r4, #4]
   1088e:	9301      	str	r3, [sp, #4]
   10890:	4293      	cmp	r3, r2
   10892:	dd00      	ble.n	10896 <__multiply+0x26>
   10894:	3101      	adds	r1, #1
   10896:	f7ff ff0c 	bl	106b2 <_Balloc>
   1089a:	0003      	movs	r3, r0
   1089c:	3314      	adds	r3, #20
   1089e:	9300      	str	r3, [sp, #0]
   108a0:	9a00      	ldr	r2, [sp, #0]
   108a2:	19bb      	adds	r3, r7, r6
   108a4:	4694      	mov	ip, r2
   108a6:	009b      	lsls	r3, r3, #2
   108a8:	449c      	add	ip, r3
   108aa:	0013      	movs	r3, r2
   108ac:	2200      	movs	r2, #0
   108ae:	9004      	str	r0, [sp, #16]
   108b0:	4563      	cmp	r3, ip
   108b2:	d31c      	bcc.n	108ee <__multiply+0x7e>
   108b4:	002a      	movs	r2, r5
   108b6:	3414      	adds	r4, #20
   108b8:	00bf      	lsls	r7, r7, #2
   108ba:	19e3      	adds	r3, r4, r7
   108bc:	3214      	adds	r2, #20
   108be:	00b6      	lsls	r6, r6, #2
   108c0:	9305      	str	r3, [sp, #20]
   108c2:	1993      	adds	r3, r2, r6
   108c4:	9402      	str	r4, [sp, #8]
   108c6:	9306      	str	r3, [sp, #24]
   108c8:	9b06      	ldr	r3, [sp, #24]
   108ca:	429a      	cmp	r2, r3
   108cc:	d311      	bcc.n	108f2 <__multiply+0x82>
   108ce:	9b01      	ldr	r3, [sp, #4]
   108d0:	2b00      	cmp	r3, #0
   108d2:	dd06      	ble.n	108e2 <__multiply+0x72>
   108d4:	2304      	movs	r3, #4
   108d6:	425b      	negs	r3, r3
   108d8:	449c      	add	ip, r3
   108da:	4663      	mov	r3, ip
   108dc:	681b      	ldr	r3, [r3, #0]
   108de:	2b00      	cmp	r3, #0
   108e0:	d051      	beq.n	10986 <__multiply+0x116>
   108e2:	9b04      	ldr	r3, [sp, #16]
   108e4:	9a01      	ldr	r2, [sp, #4]
   108e6:	0018      	movs	r0, r3
   108e8:	611a      	str	r2, [r3, #16]
   108ea:	b009      	add	sp, #36	; 0x24
   108ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108ee:	c304      	stmia	r3!, {r2}
   108f0:	e7de      	b.n	108b0 <__multiply+0x40>
   108f2:	8814      	ldrh	r4, [r2, #0]
   108f4:	2c00      	cmp	r4, #0
   108f6:	d01e      	beq.n	10936 <__multiply+0xc6>
   108f8:	2600      	movs	r6, #0
   108fa:	9d00      	ldr	r5, [sp, #0]
   108fc:	9f02      	ldr	r7, [sp, #8]
   108fe:	cf01      	ldmia	r7!, {r0}
   10900:	9507      	str	r5, [sp, #28]
   10902:	cd08      	ldmia	r5!, {r3}
   10904:	9303      	str	r3, [sp, #12]
   10906:	b283      	uxth	r3, r0
   10908:	4363      	muls	r3, r4
   1090a:	0019      	movs	r1, r3
   1090c:	466b      	mov	r3, sp
   1090e:	0c00      	lsrs	r0, r0, #16
   10910:	899b      	ldrh	r3, [r3, #12]
   10912:	4360      	muls	r0, r4
   10914:	18cb      	adds	r3, r1, r3
   10916:	9903      	ldr	r1, [sp, #12]
   10918:	199b      	adds	r3, r3, r6
   1091a:	0c09      	lsrs	r1, r1, #16
   1091c:	1841      	adds	r1, r0, r1
   1091e:	0c18      	lsrs	r0, r3, #16
   10920:	1809      	adds	r1, r1, r0
   10922:	0c0e      	lsrs	r6, r1, #16
   10924:	b29b      	uxth	r3, r3
   10926:	0409      	lsls	r1, r1, #16
   10928:	430b      	orrs	r3, r1
   1092a:	9907      	ldr	r1, [sp, #28]
   1092c:	600b      	str	r3, [r1, #0]
   1092e:	9b05      	ldr	r3, [sp, #20]
   10930:	42bb      	cmp	r3, r7
   10932:	d8e4      	bhi.n	108fe <__multiply+0x8e>
   10934:	602e      	str	r6, [r5, #0]
   10936:	6813      	ldr	r3, [r2, #0]
   10938:	0c1b      	lsrs	r3, r3, #16
   1093a:	9303      	str	r3, [sp, #12]
   1093c:	d01e      	beq.n	1097c <__multiply+0x10c>
   1093e:	2600      	movs	r6, #0
   10940:	9b00      	ldr	r3, [sp, #0]
   10942:	9c02      	ldr	r4, [sp, #8]
   10944:	681b      	ldr	r3, [r3, #0]
   10946:	9800      	ldr	r0, [sp, #0]
   10948:	0007      	movs	r7, r0
   1094a:	8821      	ldrh	r1, [r4, #0]
   1094c:	9d03      	ldr	r5, [sp, #12]
   1094e:	b29b      	uxth	r3, r3
   10950:	4369      	muls	r1, r5
   10952:	c820      	ldmia	r0!, {r5}
   10954:	0c2d      	lsrs	r5, r5, #16
   10956:	1949      	adds	r1, r1, r5
   10958:	198e      	adds	r6, r1, r6
   1095a:	0431      	lsls	r1, r6, #16
   1095c:	430b      	orrs	r3, r1
   1095e:	603b      	str	r3, [r7, #0]
   10960:	cc08      	ldmia	r4!, {r3}
   10962:	9903      	ldr	r1, [sp, #12]
   10964:	0c1b      	lsrs	r3, r3, #16
   10966:	434b      	muls	r3, r1
   10968:	6879      	ldr	r1, [r7, #4]
   1096a:	0c36      	lsrs	r6, r6, #16
   1096c:	b289      	uxth	r1, r1
   1096e:	185b      	adds	r3, r3, r1
   10970:	9905      	ldr	r1, [sp, #20]
   10972:	199b      	adds	r3, r3, r6
   10974:	0c1e      	lsrs	r6, r3, #16
   10976:	42a1      	cmp	r1, r4
   10978:	d8e6      	bhi.n	10948 <__multiply+0xd8>
   1097a:	6003      	str	r3, [r0, #0]
   1097c:	9b00      	ldr	r3, [sp, #0]
   1097e:	3204      	adds	r2, #4
   10980:	3304      	adds	r3, #4
   10982:	9300      	str	r3, [sp, #0]
   10984:	e7a0      	b.n	108c8 <__multiply+0x58>
   10986:	9b01      	ldr	r3, [sp, #4]
   10988:	3b01      	subs	r3, #1
   1098a:	9301      	str	r3, [sp, #4]
   1098c:	e79f      	b.n	108ce <__multiply+0x5e>
	...

00010990 <__pow5mult>:
   10990:	2303      	movs	r3, #3
   10992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10994:	4013      	ands	r3, r2
   10996:	0005      	movs	r5, r0
   10998:	000e      	movs	r6, r1
   1099a:	0014      	movs	r4, r2
   1099c:	2b00      	cmp	r3, #0
   1099e:	d008      	beq.n	109b2 <__pow5mult+0x22>
   109a0:	4922      	ldr	r1, [pc, #136]	; (10a2c <__pow5mult+0x9c>)
   109a2:	3b01      	subs	r3, #1
   109a4:	009a      	lsls	r2, r3, #2
   109a6:	5852      	ldr	r2, [r2, r1]
   109a8:	2300      	movs	r3, #0
   109aa:	0031      	movs	r1, r6
   109ac:	f7ff fed2 	bl	10754 <__multadd>
   109b0:	0006      	movs	r6, r0
   109b2:	10a3      	asrs	r3, r4, #2
   109b4:	9301      	str	r3, [sp, #4]
   109b6:	d036      	beq.n	10a26 <__pow5mult+0x96>
   109b8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   109ba:	2c00      	cmp	r4, #0
   109bc:	d107      	bne.n	109ce <__pow5mult+0x3e>
   109be:	2010      	movs	r0, #16
   109c0:	f7fd fe1c 	bl	e5fc <malloc>
   109c4:	6268      	str	r0, [r5, #36]	; 0x24
   109c6:	6044      	str	r4, [r0, #4]
   109c8:	6084      	str	r4, [r0, #8]
   109ca:	6004      	str	r4, [r0, #0]
   109cc:	60c4      	str	r4, [r0, #12]
   109ce:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   109d0:	68bc      	ldr	r4, [r7, #8]
   109d2:	2c00      	cmp	r4, #0
   109d4:	d107      	bne.n	109e6 <__pow5mult+0x56>
   109d6:	4916      	ldr	r1, [pc, #88]	; (10a30 <__pow5mult+0xa0>)
   109d8:	0028      	movs	r0, r5
   109da:	f7ff ff40 	bl	1085e <__i2b>
   109de:	2300      	movs	r3, #0
   109e0:	0004      	movs	r4, r0
   109e2:	60b8      	str	r0, [r7, #8]
   109e4:	6003      	str	r3, [r0, #0]
   109e6:	2201      	movs	r2, #1
   109e8:	9b01      	ldr	r3, [sp, #4]
   109ea:	4213      	tst	r3, r2
   109ec:	d00a      	beq.n	10a04 <__pow5mult+0x74>
   109ee:	0031      	movs	r1, r6
   109f0:	0022      	movs	r2, r4
   109f2:	0028      	movs	r0, r5
   109f4:	f7ff ff3c 	bl	10870 <__multiply>
   109f8:	0007      	movs	r7, r0
   109fa:	0031      	movs	r1, r6
   109fc:	0028      	movs	r0, r5
   109fe:	f7ff fe90 	bl	10722 <_Bfree>
   10a02:	003e      	movs	r6, r7
   10a04:	9b01      	ldr	r3, [sp, #4]
   10a06:	105b      	asrs	r3, r3, #1
   10a08:	9301      	str	r3, [sp, #4]
   10a0a:	d00c      	beq.n	10a26 <__pow5mult+0x96>
   10a0c:	6820      	ldr	r0, [r4, #0]
   10a0e:	2800      	cmp	r0, #0
   10a10:	d107      	bne.n	10a22 <__pow5mult+0x92>
   10a12:	0022      	movs	r2, r4
   10a14:	0021      	movs	r1, r4
   10a16:	0028      	movs	r0, r5
   10a18:	f7ff ff2a 	bl	10870 <__multiply>
   10a1c:	2300      	movs	r3, #0
   10a1e:	6020      	str	r0, [r4, #0]
   10a20:	6003      	str	r3, [r0, #0]
   10a22:	0004      	movs	r4, r0
   10a24:	e7df      	b.n	109e6 <__pow5mult+0x56>
   10a26:	0030      	movs	r0, r6
   10a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10a2a:	46c0      	nop			; (mov r8, r8)
   10a2c:	00015348 	.word	0x00015348
   10a30:	00000271 	.word	0x00000271

00010a34 <__lshift>:
   10a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a36:	000d      	movs	r5, r1
   10a38:	0017      	movs	r7, r2
   10a3a:	692b      	ldr	r3, [r5, #16]
   10a3c:	1154      	asrs	r4, r2, #5
   10a3e:	b085      	sub	sp, #20
   10a40:	18e3      	adds	r3, r4, r3
   10a42:	9302      	str	r3, [sp, #8]
   10a44:	3301      	adds	r3, #1
   10a46:	9301      	str	r3, [sp, #4]
   10a48:	6849      	ldr	r1, [r1, #4]
   10a4a:	68ab      	ldr	r3, [r5, #8]
   10a4c:	9003      	str	r0, [sp, #12]
   10a4e:	9a01      	ldr	r2, [sp, #4]
   10a50:	4293      	cmp	r3, r2
   10a52:	db34      	blt.n	10abe <__lshift+0x8a>
   10a54:	9803      	ldr	r0, [sp, #12]
   10a56:	f7ff fe2c 	bl	106b2 <_Balloc>
   10a5a:	2300      	movs	r3, #0
   10a5c:	0002      	movs	r2, r0
   10a5e:	0006      	movs	r6, r0
   10a60:	0019      	movs	r1, r3
   10a62:	3214      	adds	r2, #20
   10a64:	42a3      	cmp	r3, r4
   10a66:	db2d      	blt.n	10ac4 <__lshift+0x90>
   10a68:	43e3      	mvns	r3, r4
   10a6a:	17db      	asrs	r3, r3, #31
   10a6c:	401c      	ands	r4, r3
   10a6e:	002b      	movs	r3, r5
   10a70:	211f      	movs	r1, #31
   10a72:	00a4      	lsls	r4, r4, #2
   10a74:	1914      	adds	r4, r2, r4
   10a76:	692a      	ldr	r2, [r5, #16]
   10a78:	3314      	adds	r3, #20
   10a7a:	0092      	lsls	r2, r2, #2
   10a7c:	189a      	adds	r2, r3, r2
   10a7e:	400f      	ands	r7, r1
   10a80:	d024      	beq.n	10acc <__lshift+0x98>
   10a82:	3101      	adds	r1, #1
   10a84:	1bc9      	subs	r1, r1, r7
   10a86:	468c      	mov	ip, r1
   10a88:	2100      	movs	r1, #0
   10a8a:	6818      	ldr	r0, [r3, #0]
   10a8c:	40b8      	lsls	r0, r7
   10a8e:	4301      	orrs	r1, r0
   10a90:	4660      	mov	r0, ip
   10a92:	6021      	str	r1, [r4, #0]
   10a94:	cb02      	ldmia	r3!, {r1}
   10a96:	3404      	adds	r4, #4
   10a98:	40c1      	lsrs	r1, r0
   10a9a:	429a      	cmp	r2, r3
   10a9c:	d8f5      	bhi.n	10a8a <__lshift+0x56>
   10a9e:	6021      	str	r1, [r4, #0]
   10aa0:	2900      	cmp	r1, #0
   10aa2:	d002      	beq.n	10aaa <__lshift+0x76>
   10aa4:	9b02      	ldr	r3, [sp, #8]
   10aa6:	3302      	adds	r3, #2
   10aa8:	9301      	str	r3, [sp, #4]
   10aaa:	9b01      	ldr	r3, [sp, #4]
   10aac:	9803      	ldr	r0, [sp, #12]
   10aae:	3b01      	subs	r3, #1
   10ab0:	6133      	str	r3, [r6, #16]
   10ab2:	0029      	movs	r1, r5
   10ab4:	f7ff fe35 	bl	10722 <_Bfree>
   10ab8:	0030      	movs	r0, r6
   10aba:	b005      	add	sp, #20
   10abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10abe:	3101      	adds	r1, #1
   10ac0:	005b      	lsls	r3, r3, #1
   10ac2:	e7c4      	b.n	10a4e <__lshift+0x1a>
   10ac4:	0098      	lsls	r0, r3, #2
   10ac6:	5011      	str	r1, [r2, r0]
   10ac8:	3301      	adds	r3, #1
   10aca:	e7cb      	b.n	10a64 <__lshift+0x30>
   10acc:	cb02      	ldmia	r3!, {r1}
   10ace:	c402      	stmia	r4!, {r1}
   10ad0:	429a      	cmp	r2, r3
   10ad2:	d8fb      	bhi.n	10acc <__lshift+0x98>
   10ad4:	e7e9      	b.n	10aaa <__lshift+0x76>

00010ad6 <__mcmp>:
   10ad6:	690a      	ldr	r2, [r1, #16]
   10ad8:	6903      	ldr	r3, [r0, #16]
   10ada:	b530      	push	{r4, r5, lr}
   10adc:	1a9b      	subs	r3, r3, r2
   10ade:	d10e      	bne.n	10afe <__mcmp+0x28>
   10ae0:	0092      	lsls	r2, r2, #2
   10ae2:	3014      	adds	r0, #20
   10ae4:	3114      	adds	r1, #20
   10ae6:	1884      	adds	r4, r0, r2
   10ae8:	1889      	adds	r1, r1, r2
   10aea:	3c04      	subs	r4, #4
   10aec:	3904      	subs	r1, #4
   10aee:	6822      	ldr	r2, [r4, #0]
   10af0:	680d      	ldr	r5, [r1, #0]
   10af2:	42aa      	cmp	r2, r5
   10af4:	d005      	beq.n	10b02 <__mcmp+0x2c>
   10af6:	42aa      	cmp	r2, r5
   10af8:	4192      	sbcs	r2, r2
   10afa:	2301      	movs	r3, #1
   10afc:	4313      	orrs	r3, r2
   10afe:	0018      	movs	r0, r3
   10b00:	bd30      	pop	{r4, r5, pc}
   10b02:	42a0      	cmp	r0, r4
   10b04:	d3f1      	bcc.n	10aea <__mcmp+0x14>
   10b06:	e7fa      	b.n	10afe <__mcmp+0x28>

00010b08 <__mdiff>:
   10b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b0a:	000d      	movs	r5, r1
   10b0c:	b085      	sub	sp, #20
   10b0e:	0007      	movs	r7, r0
   10b10:	0011      	movs	r1, r2
   10b12:	0028      	movs	r0, r5
   10b14:	0014      	movs	r4, r2
   10b16:	f7ff ffde 	bl	10ad6 <__mcmp>
   10b1a:	1e06      	subs	r6, r0, #0
   10b1c:	d108      	bne.n	10b30 <__mdiff+0x28>
   10b1e:	0001      	movs	r1, r0
   10b20:	0038      	movs	r0, r7
   10b22:	f7ff fdc6 	bl	106b2 <_Balloc>
   10b26:	2301      	movs	r3, #1
   10b28:	6146      	str	r6, [r0, #20]
   10b2a:	6103      	str	r3, [r0, #16]
   10b2c:	b005      	add	sp, #20
   10b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b30:	2301      	movs	r3, #1
   10b32:	9301      	str	r3, [sp, #4]
   10b34:	2800      	cmp	r0, #0
   10b36:	db04      	blt.n	10b42 <__mdiff+0x3a>
   10b38:	0023      	movs	r3, r4
   10b3a:	002c      	movs	r4, r5
   10b3c:	001d      	movs	r5, r3
   10b3e:	2300      	movs	r3, #0
   10b40:	9301      	str	r3, [sp, #4]
   10b42:	6861      	ldr	r1, [r4, #4]
   10b44:	0038      	movs	r0, r7
   10b46:	f7ff fdb4 	bl	106b2 <_Balloc>
   10b4a:	002f      	movs	r7, r5
   10b4c:	2200      	movs	r2, #0
   10b4e:	9b01      	ldr	r3, [sp, #4]
   10b50:	6926      	ldr	r6, [r4, #16]
   10b52:	60c3      	str	r3, [r0, #12]
   10b54:	3414      	adds	r4, #20
   10b56:	00b3      	lsls	r3, r6, #2
   10b58:	18e3      	adds	r3, r4, r3
   10b5a:	9302      	str	r3, [sp, #8]
   10b5c:	692b      	ldr	r3, [r5, #16]
   10b5e:	3714      	adds	r7, #20
   10b60:	009b      	lsls	r3, r3, #2
   10b62:	18fb      	adds	r3, r7, r3
   10b64:	9303      	str	r3, [sp, #12]
   10b66:	0003      	movs	r3, r0
   10b68:	4694      	mov	ip, r2
   10b6a:	3314      	adds	r3, #20
   10b6c:	cc20      	ldmia	r4!, {r5}
   10b6e:	cf04      	ldmia	r7!, {r2}
   10b70:	9201      	str	r2, [sp, #4]
   10b72:	b2aa      	uxth	r2, r5
   10b74:	4494      	add	ip, r2
   10b76:	466a      	mov	r2, sp
   10b78:	4661      	mov	r1, ip
   10b7a:	8892      	ldrh	r2, [r2, #4]
   10b7c:	0c2d      	lsrs	r5, r5, #16
   10b7e:	1a8a      	subs	r2, r1, r2
   10b80:	9901      	ldr	r1, [sp, #4]
   10b82:	0c09      	lsrs	r1, r1, #16
   10b84:	1a69      	subs	r1, r5, r1
   10b86:	1415      	asrs	r5, r2, #16
   10b88:	1949      	adds	r1, r1, r5
   10b8a:	140d      	asrs	r5, r1, #16
   10b8c:	b292      	uxth	r2, r2
   10b8e:	0409      	lsls	r1, r1, #16
   10b90:	430a      	orrs	r2, r1
   10b92:	601a      	str	r2, [r3, #0]
   10b94:	9a03      	ldr	r2, [sp, #12]
   10b96:	46ac      	mov	ip, r5
   10b98:	3304      	adds	r3, #4
   10b9a:	42ba      	cmp	r2, r7
   10b9c:	d8e6      	bhi.n	10b6c <__mdiff+0x64>
   10b9e:	9902      	ldr	r1, [sp, #8]
   10ba0:	001a      	movs	r2, r3
   10ba2:	428c      	cmp	r4, r1
   10ba4:	d305      	bcc.n	10bb2 <__mdiff+0xaa>
   10ba6:	3a04      	subs	r2, #4
   10ba8:	6813      	ldr	r3, [r2, #0]
   10baa:	2b00      	cmp	r3, #0
   10bac:	d00e      	beq.n	10bcc <__mdiff+0xc4>
   10bae:	6106      	str	r6, [r0, #16]
   10bb0:	e7bc      	b.n	10b2c <__mdiff+0x24>
   10bb2:	cc04      	ldmia	r4!, {r2}
   10bb4:	b291      	uxth	r1, r2
   10bb6:	4461      	add	r1, ip
   10bb8:	140d      	asrs	r5, r1, #16
   10bba:	0c12      	lsrs	r2, r2, #16
   10bbc:	1952      	adds	r2, r2, r5
   10bbe:	1415      	asrs	r5, r2, #16
   10bc0:	b289      	uxth	r1, r1
   10bc2:	0412      	lsls	r2, r2, #16
   10bc4:	430a      	orrs	r2, r1
   10bc6:	46ac      	mov	ip, r5
   10bc8:	c304      	stmia	r3!, {r2}
   10bca:	e7e8      	b.n	10b9e <__mdiff+0x96>
   10bcc:	3e01      	subs	r6, #1
   10bce:	e7ea      	b.n	10ba6 <__mdiff+0x9e>

00010bd0 <__d2b>:
   10bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bd2:	001d      	movs	r5, r3
   10bd4:	2101      	movs	r1, #1
   10bd6:	9f08      	ldr	r7, [sp, #32]
   10bd8:	0014      	movs	r4, r2
   10bda:	f7ff fd6a 	bl	106b2 <_Balloc>
   10bde:	032b      	lsls	r3, r5, #12
   10be0:	006d      	lsls	r5, r5, #1
   10be2:	0006      	movs	r6, r0
   10be4:	0b1b      	lsrs	r3, r3, #12
   10be6:	0d6d      	lsrs	r5, r5, #21
   10be8:	d124      	bne.n	10c34 <__d2b+0x64>
   10bea:	9301      	str	r3, [sp, #4]
   10bec:	2c00      	cmp	r4, #0
   10bee:	d027      	beq.n	10c40 <__d2b+0x70>
   10bf0:	4668      	mov	r0, sp
   10bf2:	9400      	str	r4, [sp, #0]
   10bf4:	f7ff fe04 	bl	10800 <__lo0bits>
   10bf8:	9c00      	ldr	r4, [sp, #0]
   10bfa:	2800      	cmp	r0, #0
   10bfc:	d01e      	beq.n	10c3c <__d2b+0x6c>
   10bfe:	9b01      	ldr	r3, [sp, #4]
   10c00:	2120      	movs	r1, #32
   10c02:	001a      	movs	r2, r3
   10c04:	1a09      	subs	r1, r1, r0
   10c06:	408a      	lsls	r2, r1
   10c08:	40c3      	lsrs	r3, r0
   10c0a:	4322      	orrs	r2, r4
   10c0c:	6172      	str	r2, [r6, #20]
   10c0e:	9301      	str	r3, [sp, #4]
   10c10:	9c01      	ldr	r4, [sp, #4]
   10c12:	61b4      	str	r4, [r6, #24]
   10c14:	1e63      	subs	r3, r4, #1
   10c16:	419c      	sbcs	r4, r3
   10c18:	3401      	adds	r4, #1
   10c1a:	6134      	str	r4, [r6, #16]
   10c1c:	2d00      	cmp	r5, #0
   10c1e:	d018      	beq.n	10c52 <__d2b+0x82>
   10c20:	4b12      	ldr	r3, [pc, #72]	; (10c6c <__d2b+0x9c>)
   10c22:	18ed      	adds	r5, r5, r3
   10c24:	2335      	movs	r3, #53	; 0x35
   10c26:	182d      	adds	r5, r5, r0
   10c28:	603d      	str	r5, [r7, #0]
   10c2a:	1a18      	subs	r0, r3, r0
   10c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c2e:	6018      	str	r0, [r3, #0]
   10c30:	0030      	movs	r0, r6
   10c32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10c34:	2280      	movs	r2, #128	; 0x80
   10c36:	0352      	lsls	r2, r2, #13
   10c38:	4313      	orrs	r3, r2
   10c3a:	e7d6      	b.n	10bea <__d2b+0x1a>
   10c3c:	6174      	str	r4, [r6, #20]
   10c3e:	e7e7      	b.n	10c10 <__d2b+0x40>
   10c40:	a801      	add	r0, sp, #4
   10c42:	f7ff fddd 	bl	10800 <__lo0bits>
   10c46:	2401      	movs	r4, #1
   10c48:	9b01      	ldr	r3, [sp, #4]
   10c4a:	6134      	str	r4, [r6, #16]
   10c4c:	6173      	str	r3, [r6, #20]
   10c4e:	3020      	adds	r0, #32
   10c50:	e7e4      	b.n	10c1c <__d2b+0x4c>
   10c52:	4b07      	ldr	r3, [pc, #28]	; (10c70 <__d2b+0xa0>)
   10c54:	18c0      	adds	r0, r0, r3
   10c56:	4b07      	ldr	r3, [pc, #28]	; (10c74 <__d2b+0xa4>)
   10c58:	6038      	str	r0, [r7, #0]
   10c5a:	18e3      	adds	r3, r4, r3
   10c5c:	009b      	lsls	r3, r3, #2
   10c5e:	18f3      	adds	r3, r6, r3
   10c60:	6958      	ldr	r0, [r3, #20]
   10c62:	f7ff fdb3 	bl	107cc <__hi0bits>
   10c66:	0164      	lsls	r4, r4, #5
   10c68:	1a20      	subs	r0, r4, r0
   10c6a:	e7df      	b.n	10c2c <__d2b+0x5c>
   10c6c:	fffffbcd 	.word	0xfffffbcd
   10c70:	fffffbce 	.word	0xfffffbce
   10c74:	3fffffff 	.word	0x3fffffff

00010c78 <_calloc_r>:
   10c78:	434a      	muls	r2, r1
   10c7a:	b570      	push	{r4, r5, r6, lr}
   10c7c:	0011      	movs	r1, r2
   10c7e:	0014      	movs	r4, r2
   10c80:	f7fd fd46 	bl	e710 <_malloc_r>
   10c84:	1e05      	subs	r5, r0, #0
   10c86:	d003      	beq.n	10c90 <_calloc_r+0x18>
   10c88:	0022      	movs	r2, r4
   10c8a:	2100      	movs	r1, #0
   10c8c:	f7fd fced 	bl	e66a <memset>
   10c90:	0028      	movs	r0, r5
   10c92:	bd70      	pop	{r4, r5, r6, pc}

00010c94 <__ssputs_r>:
   10c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c96:	688e      	ldr	r6, [r1, #8]
   10c98:	b085      	sub	sp, #20
   10c9a:	0007      	movs	r7, r0
   10c9c:	000c      	movs	r4, r1
   10c9e:	9203      	str	r2, [sp, #12]
   10ca0:	9301      	str	r3, [sp, #4]
   10ca2:	429e      	cmp	r6, r3
   10ca4:	d839      	bhi.n	10d1a <__ssputs_r+0x86>
   10ca6:	2390      	movs	r3, #144	; 0x90
   10ca8:	898a      	ldrh	r2, [r1, #12]
   10caa:	00db      	lsls	r3, r3, #3
   10cac:	421a      	tst	r2, r3
   10cae:	d034      	beq.n	10d1a <__ssputs_r+0x86>
   10cb0:	2503      	movs	r5, #3
   10cb2:	6909      	ldr	r1, [r1, #16]
   10cb4:	6823      	ldr	r3, [r4, #0]
   10cb6:	1a5b      	subs	r3, r3, r1
   10cb8:	9302      	str	r3, [sp, #8]
   10cba:	6963      	ldr	r3, [r4, #20]
   10cbc:	9802      	ldr	r0, [sp, #8]
   10cbe:	435d      	muls	r5, r3
   10cc0:	0feb      	lsrs	r3, r5, #31
   10cc2:	195d      	adds	r5, r3, r5
   10cc4:	9b01      	ldr	r3, [sp, #4]
   10cc6:	106d      	asrs	r5, r5, #1
   10cc8:	3301      	adds	r3, #1
   10cca:	181b      	adds	r3, r3, r0
   10ccc:	42ab      	cmp	r3, r5
   10cce:	d900      	bls.n	10cd2 <__ssputs_r+0x3e>
   10cd0:	001d      	movs	r5, r3
   10cd2:	0553      	lsls	r3, r2, #21
   10cd4:	d532      	bpl.n	10d3c <__ssputs_r+0xa8>
   10cd6:	0029      	movs	r1, r5
   10cd8:	0038      	movs	r0, r7
   10cda:	f7fd fd19 	bl	e710 <_malloc_r>
   10cde:	1e06      	subs	r6, r0, #0
   10ce0:	d109      	bne.n	10cf6 <__ssputs_r+0x62>
   10ce2:	230c      	movs	r3, #12
   10ce4:	603b      	str	r3, [r7, #0]
   10ce6:	2340      	movs	r3, #64	; 0x40
   10ce8:	2001      	movs	r0, #1
   10cea:	89a2      	ldrh	r2, [r4, #12]
   10cec:	4240      	negs	r0, r0
   10cee:	4313      	orrs	r3, r2
   10cf0:	81a3      	strh	r3, [r4, #12]
   10cf2:	b005      	add	sp, #20
   10cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cf6:	9a02      	ldr	r2, [sp, #8]
   10cf8:	6921      	ldr	r1, [r4, #16]
   10cfa:	f7fd fc9b 	bl	e634 <memcpy>
   10cfe:	89a3      	ldrh	r3, [r4, #12]
   10d00:	4a14      	ldr	r2, [pc, #80]	; (10d54 <__ssputs_r+0xc0>)
   10d02:	401a      	ands	r2, r3
   10d04:	2380      	movs	r3, #128	; 0x80
   10d06:	4313      	orrs	r3, r2
   10d08:	81a3      	strh	r3, [r4, #12]
   10d0a:	9b02      	ldr	r3, [sp, #8]
   10d0c:	6126      	str	r6, [r4, #16]
   10d0e:	18f6      	adds	r6, r6, r3
   10d10:	6026      	str	r6, [r4, #0]
   10d12:	6165      	str	r5, [r4, #20]
   10d14:	9e01      	ldr	r6, [sp, #4]
   10d16:	1aed      	subs	r5, r5, r3
   10d18:	60a5      	str	r5, [r4, #8]
   10d1a:	9b01      	ldr	r3, [sp, #4]
   10d1c:	42b3      	cmp	r3, r6
   10d1e:	d200      	bcs.n	10d22 <__ssputs_r+0x8e>
   10d20:	001e      	movs	r6, r3
   10d22:	0032      	movs	r2, r6
   10d24:	9903      	ldr	r1, [sp, #12]
   10d26:	6820      	ldr	r0, [r4, #0]
   10d28:	f7fd fc8d 	bl	e646 <memmove>
   10d2c:	68a3      	ldr	r3, [r4, #8]
   10d2e:	2000      	movs	r0, #0
   10d30:	1b9b      	subs	r3, r3, r6
   10d32:	60a3      	str	r3, [r4, #8]
   10d34:	6823      	ldr	r3, [r4, #0]
   10d36:	199e      	adds	r6, r3, r6
   10d38:	6026      	str	r6, [r4, #0]
   10d3a:	e7da      	b.n	10cf2 <__ssputs_r+0x5e>
   10d3c:	002a      	movs	r2, r5
   10d3e:	0038      	movs	r0, r7
   10d40:	f000 fb32 	bl	113a8 <_realloc_r>
   10d44:	1e06      	subs	r6, r0, #0
   10d46:	d1e0      	bne.n	10d0a <__ssputs_r+0x76>
   10d48:	6921      	ldr	r1, [r4, #16]
   10d4a:	0038      	movs	r0, r7
   10d4c:	f7fd fc96 	bl	e67c <_free_r>
   10d50:	e7c7      	b.n	10ce2 <__ssputs_r+0x4e>
   10d52:	46c0      	nop			; (mov r8, r8)
   10d54:	fffffb7f 	.word	0xfffffb7f

00010d58 <_svfiprintf_r>:
   10d58:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d5a:	b09f      	sub	sp, #124	; 0x7c
   10d5c:	9002      	str	r0, [sp, #8]
   10d5e:	9305      	str	r3, [sp, #20]
   10d60:	898b      	ldrh	r3, [r1, #12]
   10d62:	000f      	movs	r7, r1
   10d64:	0016      	movs	r6, r2
   10d66:	061b      	lsls	r3, r3, #24
   10d68:	d511      	bpl.n	10d8e <_svfiprintf_r+0x36>
   10d6a:	690b      	ldr	r3, [r1, #16]
   10d6c:	2b00      	cmp	r3, #0
   10d6e:	d10e      	bne.n	10d8e <_svfiprintf_r+0x36>
   10d70:	2140      	movs	r1, #64	; 0x40
   10d72:	f7fd fccd 	bl	e710 <_malloc_r>
   10d76:	6038      	str	r0, [r7, #0]
   10d78:	6138      	str	r0, [r7, #16]
   10d7a:	2800      	cmp	r0, #0
   10d7c:	d105      	bne.n	10d8a <_svfiprintf_r+0x32>
   10d7e:	230c      	movs	r3, #12
   10d80:	9a02      	ldr	r2, [sp, #8]
   10d82:	3801      	subs	r0, #1
   10d84:	6013      	str	r3, [r2, #0]
   10d86:	b01f      	add	sp, #124	; 0x7c
   10d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d8a:	2340      	movs	r3, #64	; 0x40
   10d8c:	617b      	str	r3, [r7, #20]
   10d8e:	2300      	movs	r3, #0
   10d90:	ad06      	add	r5, sp, #24
   10d92:	616b      	str	r3, [r5, #20]
   10d94:	3320      	adds	r3, #32
   10d96:	766b      	strb	r3, [r5, #25]
   10d98:	3310      	adds	r3, #16
   10d9a:	76ab      	strb	r3, [r5, #26]
   10d9c:	0034      	movs	r4, r6
   10d9e:	7823      	ldrb	r3, [r4, #0]
   10da0:	2b00      	cmp	r3, #0
   10da2:	d147      	bne.n	10e34 <_svfiprintf_r+0xdc>
   10da4:	1ba3      	subs	r3, r4, r6
   10da6:	9304      	str	r3, [sp, #16]
   10da8:	d00d      	beq.n	10dc6 <_svfiprintf_r+0x6e>
   10daa:	1ba3      	subs	r3, r4, r6
   10dac:	0032      	movs	r2, r6
   10dae:	0039      	movs	r1, r7
   10db0:	9802      	ldr	r0, [sp, #8]
   10db2:	f7ff ff6f 	bl	10c94 <__ssputs_r>
   10db6:	1c43      	adds	r3, r0, #1
   10db8:	d100      	bne.n	10dbc <_svfiprintf_r+0x64>
   10dba:	e0b5      	b.n	10f28 <_svfiprintf_r+0x1d0>
   10dbc:	696a      	ldr	r2, [r5, #20]
   10dbe:	9b04      	ldr	r3, [sp, #16]
   10dc0:	4694      	mov	ip, r2
   10dc2:	4463      	add	r3, ip
   10dc4:	616b      	str	r3, [r5, #20]
   10dc6:	7823      	ldrb	r3, [r4, #0]
   10dc8:	2b00      	cmp	r3, #0
   10dca:	d100      	bne.n	10dce <_svfiprintf_r+0x76>
   10dcc:	e0ac      	b.n	10f28 <_svfiprintf_r+0x1d0>
   10dce:	2201      	movs	r2, #1
   10dd0:	2300      	movs	r3, #0
   10dd2:	4252      	negs	r2, r2
   10dd4:	606a      	str	r2, [r5, #4]
   10dd6:	a902      	add	r1, sp, #8
   10dd8:	3254      	adds	r2, #84	; 0x54
   10dda:	1852      	adds	r2, r2, r1
   10ddc:	3401      	adds	r4, #1
   10dde:	602b      	str	r3, [r5, #0]
   10de0:	60eb      	str	r3, [r5, #12]
   10de2:	60ab      	str	r3, [r5, #8]
   10de4:	7013      	strb	r3, [r2, #0]
   10de6:	65ab      	str	r3, [r5, #88]	; 0x58
   10de8:	4e58      	ldr	r6, [pc, #352]	; (10f4c <_svfiprintf_r+0x1f4>)
   10dea:	2205      	movs	r2, #5
   10dec:	7821      	ldrb	r1, [r4, #0]
   10dee:	0030      	movs	r0, r6
   10df0:	f7ff fc52 	bl	10698 <memchr>
   10df4:	1c62      	adds	r2, r4, #1
   10df6:	2800      	cmp	r0, #0
   10df8:	d120      	bne.n	10e3c <_svfiprintf_r+0xe4>
   10dfa:	6829      	ldr	r1, [r5, #0]
   10dfc:	06cb      	lsls	r3, r1, #27
   10dfe:	d504      	bpl.n	10e0a <_svfiprintf_r+0xb2>
   10e00:	2353      	movs	r3, #83	; 0x53
   10e02:	ae02      	add	r6, sp, #8
   10e04:	3020      	adds	r0, #32
   10e06:	199b      	adds	r3, r3, r6
   10e08:	7018      	strb	r0, [r3, #0]
   10e0a:	070b      	lsls	r3, r1, #28
   10e0c:	d504      	bpl.n	10e18 <_svfiprintf_r+0xc0>
   10e0e:	2353      	movs	r3, #83	; 0x53
   10e10:	202b      	movs	r0, #43	; 0x2b
   10e12:	ae02      	add	r6, sp, #8
   10e14:	199b      	adds	r3, r3, r6
   10e16:	7018      	strb	r0, [r3, #0]
   10e18:	7823      	ldrb	r3, [r4, #0]
   10e1a:	2b2a      	cmp	r3, #42	; 0x2a
   10e1c:	d016      	beq.n	10e4c <_svfiprintf_r+0xf4>
   10e1e:	2000      	movs	r0, #0
   10e20:	210a      	movs	r1, #10
   10e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e24:	7822      	ldrb	r2, [r4, #0]
   10e26:	3a30      	subs	r2, #48	; 0x30
   10e28:	2a09      	cmp	r2, #9
   10e2a:	d955      	bls.n	10ed8 <_svfiprintf_r+0x180>
   10e2c:	2800      	cmp	r0, #0
   10e2e:	d015      	beq.n	10e5c <_svfiprintf_r+0x104>
   10e30:	9309      	str	r3, [sp, #36]	; 0x24
   10e32:	e013      	b.n	10e5c <_svfiprintf_r+0x104>
   10e34:	2b25      	cmp	r3, #37	; 0x25
   10e36:	d0b5      	beq.n	10da4 <_svfiprintf_r+0x4c>
   10e38:	3401      	adds	r4, #1
   10e3a:	e7b0      	b.n	10d9e <_svfiprintf_r+0x46>
   10e3c:	2301      	movs	r3, #1
   10e3e:	1b80      	subs	r0, r0, r6
   10e40:	4083      	lsls	r3, r0
   10e42:	6829      	ldr	r1, [r5, #0]
   10e44:	0014      	movs	r4, r2
   10e46:	430b      	orrs	r3, r1
   10e48:	602b      	str	r3, [r5, #0]
   10e4a:	e7cd      	b.n	10de8 <_svfiprintf_r+0x90>
   10e4c:	9b05      	ldr	r3, [sp, #20]
   10e4e:	1d18      	adds	r0, r3, #4
   10e50:	681b      	ldr	r3, [r3, #0]
   10e52:	9005      	str	r0, [sp, #20]
   10e54:	2b00      	cmp	r3, #0
   10e56:	db39      	blt.n	10ecc <_svfiprintf_r+0x174>
   10e58:	9309      	str	r3, [sp, #36]	; 0x24
   10e5a:	0014      	movs	r4, r2
   10e5c:	7823      	ldrb	r3, [r4, #0]
   10e5e:	2b2e      	cmp	r3, #46	; 0x2e
   10e60:	d10b      	bne.n	10e7a <_svfiprintf_r+0x122>
   10e62:	7863      	ldrb	r3, [r4, #1]
   10e64:	1c62      	adds	r2, r4, #1
   10e66:	2b2a      	cmp	r3, #42	; 0x2a
   10e68:	d13e      	bne.n	10ee8 <_svfiprintf_r+0x190>
   10e6a:	9b05      	ldr	r3, [sp, #20]
   10e6c:	3402      	adds	r4, #2
   10e6e:	1d1a      	adds	r2, r3, #4
   10e70:	681b      	ldr	r3, [r3, #0]
   10e72:	9205      	str	r2, [sp, #20]
   10e74:	2b00      	cmp	r3, #0
   10e76:	db34      	blt.n	10ee2 <_svfiprintf_r+0x18a>
   10e78:	9307      	str	r3, [sp, #28]
   10e7a:	4e35      	ldr	r6, [pc, #212]	; (10f50 <_svfiprintf_r+0x1f8>)
   10e7c:	7821      	ldrb	r1, [r4, #0]
   10e7e:	2203      	movs	r2, #3
   10e80:	0030      	movs	r0, r6
   10e82:	f7ff fc09 	bl	10698 <memchr>
   10e86:	2800      	cmp	r0, #0
   10e88:	d006      	beq.n	10e98 <_svfiprintf_r+0x140>
   10e8a:	2340      	movs	r3, #64	; 0x40
   10e8c:	1b80      	subs	r0, r0, r6
   10e8e:	4083      	lsls	r3, r0
   10e90:	682a      	ldr	r2, [r5, #0]
   10e92:	3401      	adds	r4, #1
   10e94:	4313      	orrs	r3, r2
   10e96:	602b      	str	r3, [r5, #0]
   10e98:	7821      	ldrb	r1, [r4, #0]
   10e9a:	2206      	movs	r2, #6
   10e9c:	482d      	ldr	r0, [pc, #180]	; (10f54 <_svfiprintf_r+0x1fc>)
   10e9e:	1c66      	adds	r6, r4, #1
   10ea0:	7629      	strb	r1, [r5, #24]
   10ea2:	f7ff fbf9 	bl	10698 <memchr>
   10ea6:	2800      	cmp	r0, #0
   10ea8:	d046      	beq.n	10f38 <_svfiprintf_r+0x1e0>
   10eaa:	4b2b      	ldr	r3, [pc, #172]	; (10f58 <_svfiprintf_r+0x200>)
   10eac:	2b00      	cmp	r3, #0
   10eae:	d12f      	bne.n	10f10 <_svfiprintf_r+0x1b8>
   10eb0:	6829      	ldr	r1, [r5, #0]
   10eb2:	9b05      	ldr	r3, [sp, #20]
   10eb4:	2207      	movs	r2, #7
   10eb6:	05c9      	lsls	r1, r1, #23
   10eb8:	d528      	bpl.n	10f0c <_svfiprintf_r+0x1b4>
   10eba:	189b      	adds	r3, r3, r2
   10ebc:	4393      	bics	r3, r2
   10ebe:	3308      	adds	r3, #8
   10ec0:	9305      	str	r3, [sp, #20]
   10ec2:	696b      	ldr	r3, [r5, #20]
   10ec4:	9a03      	ldr	r2, [sp, #12]
   10ec6:	189b      	adds	r3, r3, r2
   10ec8:	616b      	str	r3, [r5, #20]
   10eca:	e767      	b.n	10d9c <_svfiprintf_r+0x44>
   10ecc:	425b      	negs	r3, r3
   10ece:	60eb      	str	r3, [r5, #12]
   10ed0:	2302      	movs	r3, #2
   10ed2:	430b      	orrs	r3, r1
   10ed4:	602b      	str	r3, [r5, #0]
   10ed6:	e7c0      	b.n	10e5a <_svfiprintf_r+0x102>
   10ed8:	434b      	muls	r3, r1
   10eda:	3401      	adds	r4, #1
   10edc:	189b      	adds	r3, r3, r2
   10ede:	2001      	movs	r0, #1
   10ee0:	e7a0      	b.n	10e24 <_svfiprintf_r+0xcc>
   10ee2:	2301      	movs	r3, #1
   10ee4:	425b      	negs	r3, r3
   10ee6:	e7c7      	b.n	10e78 <_svfiprintf_r+0x120>
   10ee8:	2300      	movs	r3, #0
   10eea:	0014      	movs	r4, r2
   10eec:	200a      	movs	r0, #10
   10eee:	001a      	movs	r2, r3
   10ef0:	606b      	str	r3, [r5, #4]
   10ef2:	7821      	ldrb	r1, [r4, #0]
   10ef4:	3930      	subs	r1, #48	; 0x30
   10ef6:	2909      	cmp	r1, #9
   10ef8:	d903      	bls.n	10f02 <_svfiprintf_r+0x1aa>
   10efa:	2b00      	cmp	r3, #0
   10efc:	d0bd      	beq.n	10e7a <_svfiprintf_r+0x122>
   10efe:	9207      	str	r2, [sp, #28]
   10f00:	e7bb      	b.n	10e7a <_svfiprintf_r+0x122>
   10f02:	4342      	muls	r2, r0
   10f04:	3401      	adds	r4, #1
   10f06:	1852      	adds	r2, r2, r1
   10f08:	2301      	movs	r3, #1
   10f0a:	e7f2      	b.n	10ef2 <_svfiprintf_r+0x19a>
   10f0c:	3307      	adds	r3, #7
   10f0e:	e7d5      	b.n	10ebc <_svfiprintf_r+0x164>
   10f10:	ab05      	add	r3, sp, #20
   10f12:	9300      	str	r3, [sp, #0]
   10f14:	003a      	movs	r2, r7
   10f16:	4b11      	ldr	r3, [pc, #68]	; (10f5c <_svfiprintf_r+0x204>)
   10f18:	0029      	movs	r1, r5
   10f1a:	9802      	ldr	r0, [sp, #8]
   10f1c:	f7fd fcf2 	bl	e904 <_printf_float>
   10f20:	9003      	str	r0, [sp, #12]
   10f22:	9b03      	ldr	r3, [sp, #12]
   10f24:	3301      	adds	r3, #1
   10f26:	d1cc      	bne.n	10ec2 <_svfiprintf_r+0x16a>
   10f28:	89bb      	ldrh	r3, [r7, #12]
   10f2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f2c:	065b      	lsls	r3, r3, #25
   10f2e:	d400      	bmi.n	10f32 <_svfiprintf_r+0x1da>
   10f30:	e729      	b.n	10d86 <_svfiprintf_r+0x2e>
   10f32:	2001      	movs	r0, #1
   10f34:	4240      	negs	r0, r0
   10f36:	e726      	b.n	10d86 <_svfiprintf_r+0x2e>
   10f38:	ab05      	add	r3, sp, #20
   10f3a:	9300      	str	r3, [sp, #0]
   10f3c:	003a      	movs	r2, r7
   10f3e:	4b07      	ldr	r3, [pc, #28]	; (10f5c <_svfiprintf_r+0x204>)
   10f40:	0029      	movs	r1, r5
   10f42:	9802      	ldr	r0, [sp, #8]
   10f44:	f7fd ff98 	bl	ee78 <_printf_i>
   10f48:	e7ea      	b.n	10f20 <_svfiprintf_r+0x1c8>
   10f4a:	46c0      	nop			; (mov r8, r8)
   10f4c:	00015354 	.word	0x00015354
   10f50:	0001535a 	.word	0x0001535a
   10f54:	0001535e 	.word	0x0001535e
   10f58:	0000e905 	.word	0x0000e905
   10f5c:	00010c95 	.word	0x00010c95

00010f60 <__sfputc_r>:
   10f60:	6893      	ldr	r3, [r2, #8]
   10f62:	b510      	push	{r4, lr}
   10f64:	3b01      	subs	r3, #1
   10f66:	6093      	str	r3, [r2, #8]
   10f68:	2b00      	cmp	r3, #0
   10f6a:	da05      	bge.n	10f78 <__sfputc_r+0x18>
   10f6c:	6994      	ldr	r4, [r2, #24]
   10f6e:	42a3      	cmp	r3, r4
   10f70:	db08      	blt.n	10f84 <__sfputc_r+0x24>
   10f72:	b2cb      	uxtb	r3, r1
   10f74:	2b0a      	cmp	r3, #10
   10f76:	d005      	beq.n	10f84 <__sfputc_r+0x24>
   10f78:	6813      	ldr	r3, [r2, #0]
   10f7a:	1c58      	adds	r0, r3, #1
   10f7c:	6010      	str	r0, [r2, #0]
   10f7e:	7019      	strb	r1, [r3, #0]
   10f80:	b2c8      	uxtb	r0, r1
   10f82:	bd10      	pop	{r4, pc}
   10f84:	f7fe fa3e 	bl	f404 <__swbuf_r>
   10f88:	e7fb      	b.n	10f82 <__sfputc_r+0x22>

00010f8a <__sfputs_r>:
   10f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f8c:	0006      	movs	r6, r0
   10f8e:	000f      	movs	r7, r1
   10f90:	0014      	movs	r4, r2
   10f92:	18d5      	adds	r5, r2, r3
   10f94:	42ac      	cmp	r4, r5
   10f96:	d101      	bne.n	10f9c <__sfputs_r+0x12>
   10f98:	2000      	movs	r0, #0
   10f9a:	e007      	b.n	10fac <__sfputs_r+0x22>
   10f9c:	7821      	ldrb	r1, [r4, #0]
   10f9e:	003a      	movs	r2, r7
   10fa0:	0030      	movs	r0, r6
   10fa2:	f7ff ffdd 	bl	10f60 <__sfputc_r>
   10fa6:	3401      	adds	r4, #1
   10fa8:	1c43      	adds	r3, r0, #1
   10faa:	d1f3      	bne.n	10f94 <__sfputs_r+0xa>
   10fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00010fb0 <_vfiprintf_r>:
   10fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fb2:	b09f      	sub	sp, #124	; 0x7c
   10fb4:	0006      	movs	r6, r0
   10fb6:	000f      	movs	r7, r1
   10fb8:	0014      	movs	r4, r2
   10fba:	9305      	str	r3, [sp, #20]
   10fbc:	2800      	cmp	r0, #0
   10fbe:	d004      	beq.n	10fca <_vfiprintf_r+0x1a>
   10fc0:	6983      	ldr	r3, [r0, #24]
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	d101      	bne.n	10fca <_vfiprintf_r+0x1a>
   10fc6:	f7ff fa59 	bl	1047c <__sinit>
   10fca:	4b7f      	ldr	r3, [pc, #508]	; (111c8 <_vfiprintf_r+0x218>)
   10fcc:	429f      	cmp	r7, r3
   10fce:	d15c      	bne.n	1108a <_vfiprintf_r+0xda>
   10fd0:	6877      	ldr	r7, [r6, #4]
   10fd2:	89bb      	ldrh	r3, [r7, #12]
   10fd4:	071b      	lsls	r3, r3, #28
   10fd6:	d562      	bpl.n	1109e <_vfiprintf_r+0xee>
   10fd8:	693b      	ldr	r3, [r7, #16]
   10fda:	2b00      	cmp	r3, #0
   10fdc:	d05f      	beq.n	1109e <_vfiprintf_r+0xee>
   10fde:	2300      	movs	r3, #0
   10fe0:	ad06      	add	r5, sp, #24
   10fe2:	616b      	str	r3, [r5, #20]
   10fe4:	3320      	adds	r3, #32
   10fe6:	766b      	strb	r3, [r5, #25]
   10fe8:	3310      	adds	r3, #16
   10fea:	76ab      	strb	r3, [r5, #26]
   10fec:	9402      	str	r4, [sp, #8]
   10fee:	9c02      	ldr	r4, [sp, #8]
   10ff0:	7823      	ldrb	r3, [r4, #0]
   10ff2:	2b00      	cmp	r3, #0
   10ff4:	d15d      	bne.n	110b2 <_vfiprintf_r+0x102>
   10ff6:	9b02      	ldr	r3, [sp, #8]
   10ff8:	1ae3      	subs	r3, r4, r3
   10ffa:	9304      	str	r3, [sp, #16]
   10ffc:	d00d      	beq.n	1101a <_vfiprintf_r+0x6a>
   10ffe:	9b04      	ldr	r3, [sp, #16]
   11000:	9a02      	ldr	r2, [sp, #8]
   11002:	0039      	movs	r1, r7
   11004:	0030      	movs	r0, r6
   11006:	f7ff ffc0 	bl	10f8a <__sfputs_r>
   1100a:	1c43      	adds	r3, r0, #1
   1100c:	d100      	bne.n	11010 <_vfiprintf_r+0x60>
   1100e:	e0cc      	b.n	111aa <_vfiprintf_r+0x1fa>
   11010:	696a      	ldr	r2, [r5, #20]
   11012:	9b04      	ldr	r3, [sp, #16]
   11014:	4694      	mov	ip, r2
   11016:	4463      	add	r3, ip
   11018:	616b      	str	r3, [r5, #20]
   1101a:	7823      	ldrb	r3, [r4, #0]
   1101c:	2b00      	cmp	r3, #0
   1101e:	d100      	bne.n	11022 <_vfiprintf_r+0x72>
   11020:	e0c3      	b.n	111aa <_vfiprintf_r+0x1fa>
   11022:	2201      	movs	r2, #1
   11024:	2300      	movs	r3, #0
   11026:	4252      	negs	r2, r2
   11028:	606a      	str	r2, [r5, #4]
   1102a:	a902      	add	r1, sp, #8
   1102c:	3254      	adds	r2, #84	; 0x54
   1102e:	1852      	adds	r2, r2, r1
   11030:	3401      	adds	r4, #1
   11032:	602b      	str	r3, [r5, #0]
   11034:	60eb      	str	r3, [r5, #12]
   11036:	60ab      	str	r3, [r5, #8]
   11038:	7013      	strb	r3, [r2, #0]
   1103a:	65ab      	str	r3, [r5, #88]	; 0x58
   1103c:	7821      	ldrb	r1, [r4, #0]
   1103e:	2205      	movs	r2, #5
   11040:	4862      	ldr	r0, [pc, #392]	; (111cc <_vfiprintf_r+0x21c>)
   11042:	f7ff fb29 	bl	10698 <memchr>
   11046:	1c63      	adds	r3, r4, #1
   11048:	469c      	mov	ip, r3
   1104a:	2800      	cmp	r0, #0
   1104c:	d135      	bne.n	110ba <_vfiprintf_r+0x10a>
   1104e:	6829      	ldr	r1, [r5, #0]
   11050:	06cb      	lsls	r3, r1, #27
   11052:	d504      	bpl.n	1105e <_vfiprintf_r+0xae>
   11054:	2353      	movs	r3, #83	; 0x53
   11056:	aa02      	add	r2, sp, #8
   11058:	3020      	adds	r0, #32
   1105a:	189b      	adds	r3, r3, r2
   1105c:	7018      	strb	r0, [r3, #0]
   1105e:	070b      	lsls	r3, r1, #28
   11060:	d504      	bpl.n	1106c <_vfiprintf_r+0xbc>
   11062:	2353      	movs	r3, #83	; 0x53
   11064:	202b      	movs	r0, #43	; 0x2b
   11066:	aa02      	add	r2, sp, #8
   11068:	189b      	adds	r3, r3, r2
   1106a:	7018      	strb	r0, [r3, #0]
   1106c:	7823      	ldrb	r3, [r4, #0]
   1106e:	2b2a      	cmp	r3, #42	; 0x2a
   11070:	d02c      	beq.n	110cc <_vfiprintf_r+0x11c>
   11072:	2000      	movs	r0, #0
   11074:	210a      	movs	r1, #10
   11076:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11078:	7822      	ldrb	r2, [r4, #0]
   1107a:	3a30      	subs	r2, #48	; 0x30
   1107c:	2a09      	cmp	r2, #9
   1107e:	d800      	bhi.n	11082 <_vfiprintf_r+0xd2>
   11080:	e06b      	b.n	1115a <_vfiprintf_r+0x1aa>
   11082:	2800      	cmp	r0, #0
   11084:	d02a      	beq.n	110dc <_vfiprintf_r+0x12c>
   11086:	9309      	str	r3, [sp, #36]	; 0x24
   11088:	e028      	b.n	110dc <_vfiprintf_r+0x12c>
   1108a:	4b51      	ldr	r3, [pc, #324]	; (111d0 <_vfiprintf_r+0x220>)
   1108c:	429f      	cmp	r7, r3
   1108e:	d101      	bne.n	11094 <_vfiprintf_r+0xe4>
   11090:	68b7      	ldr	r7, [r6, #8]
   11092:	e79e      	b.n	10fd2 <_vfiprintf_r+0x22>
   11094:	4b4f      	ldr	r3, [pc, #316]	; (111d4 <_vfiprintf_r+0x224>)
   11096:	429f      	cmp	r7, r3
   11098:	d19b      	bne.n	10fd2 <_vfiprintf_r+0x22>
   1109a:	68f7      	ldr	r7, [r6, #12]
   1109c:	e799      	b.n	10fd2 <_vfiprintf_r+0x22>
   1109e:	0039      	movs	r1, r7
   110a0:	0030      	movs	r0, r6
   110a2:	f7fe fa11 	bl	f4c8 <__swsetup_r>
   110a6:	2800      	cmp	r0, #0
   110a8:	d099      	beq.n	10fde <_vfiprintf_r+0x2e>
   110aa:	2001      	movs	r0, #1
   110ac:	4240      	negs	r0, r0
   110ae:	b01f      	add	sp, #124	; 0x7c
   110b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110b2:	2b25      	cmp	r3, #37	; 0x25
   110b4:	d09f      	beq.n	10ff6 <_vfiprintf_r+0x46>
   110b6:	3401      	adds	r4, #1
   110b8:	e79a      	b.n	10ff0 <_vfiprintf_r+0x40>
   110ba:	4b44      	ldr	r3, [pc, #272]	; (111cc <_vfiprintf_r+0x21c>)
   110bc:	6829      	ldr	r1, [r5, #0]
   110be:	1ac0      	subs	r0, r0, r3
   110c0:	2301      	movs	r3, #1
   110c2:	4083      	lsls	r3, r0
   110c4:	430b      	orrs	r3, r1
   110c6:	602b      	str	r3, [r5, #0]
   110c8:	4664      	mov	r4, ip
   110ca:	e7b7      	b.n	1103c <_vfiprintf_r+0x8c>
   110cc:	9b05      	ldr	r3, [sp, #20]
   110ce:	1d18      	adds	r0, r3, #4
   110d0:	681b      	ldr	r3, [r3, #0]
   110d2:	9005      	str	r0, [sp, #20]
   110d4:	2b00      	cmp	r3, #0
   110d6:	db3a      	blt.n	1114e <_vfiprintf_r+0x19e>
   110d8:	9309      	str	r3, [sp, #36]	; 0x24
   110da:	4664      	mov	r4, ip
   110dc:	7823      	ldrb	r3, [r4, #0]
   110de:	2b2e      	cmp	r3, #46	; 0x2e
   110e0:	d10b      	bne.n	110fa <_vfiprintf_r+0x14a>
   110e2:	7863      	ldrb	r3, [r4, #1]
   110e4:	1c62      	adds	r2, r4, #1
   110e6:	2b2a      	cmp	r3, #42	; 0x2a
   110e8:	d13f      	bne.n	1116a <_vfiprintf_r+0x1ba>
   110ea:	9b05      	ldr	r3, [sp, #20]
   110ec:	3402      	adds	r4, #2
   110ee:	1d1a      	adds	r2, r3, #4
   110f0:	681b      	ldr	r3, [r3, #0]
   110f2:	9205      	str	r2, [sp, #20]
   110f4:	2b00      	cmp	r3, #0
   110f6:	db35      	blt.n	11164 <_vfiprintf_r+0x1b4>
   110f8:	9307      	str	r3, [sp, #28]
   110fa:	7821      	ldrb	r1, [r4, #0]
   110fc:	2203      	movs	r2, #3
   110fe:	4836      	ldr	r0, [pc, #216]	; (111d8 <_vfiprintf_r+0x228>)
   11100:	f7ff faca 	bl	10698 <memchr>
   11104:	2800      	cmp	r0, #0
   11106:	d007      	beq.n	11118 <_vfiprintf_r+0x168>
   11108:	4b33      	ldr	r3, [pc, #204]	; (111d8 <_vfiprintf_r+0x228>)
   1110a:	682a      	ldr	r2, [r5, #0]
   1110c:	1ac0      	subs	r0, r0, r3
   1110e:	2340      	movs	r3, #64	; 0x40
   11110:	4083      	lsls	r3, r0
   11112:	4313      	orrs	r3, r2
   11114:	602b      	str	r3, [r5, #0]
   11116:	3401      	adds	r4, #1
   11118:	7821      	ldrb	r1, [r4, #0]
   1111a:	1c63      	adds	r3, r4, #1
   1111c:	2206      	movs	r2, #6
   1111e:	482f      	ldr	r0, [pc, #188]	; (111dc <_vfiprintf_r+0x22c>)
   11120:	9302      	str	r3, [sp, #8]
   11122:	7629      	strb	r1, [r5, #24]
   11124:	f7ff fab8 	bl	10698 <memchr>
   11128:	2800      	cmp	r0, #0
   1112a:	d044      	beq.n	111b6 <_vfiprintf_r+0x206>
   1112c:	4b2c      	ldr	r3, [pc, #176]	; (111e0 <_vfiprintf_r+0x230>)
   1112e:	2b00      	cmp	r3, #0
   11130:	d12f      	bne.n	11192 <_vfiprintf_r+0x1e2>
   11132:	6829      	ldr	r1, [r5, #0]
   11134:	9b05      	ldr	r3, [sp, #20]
   11136:	2207      	movs	r2, #7
   11138:	05c9      	lsls	r1, r1, #23
   1113a:	d528      	bpl.n	1118e <_vfiprintf_r+0x1de>
   1113c:	189b      	adds	r3, r3, r2
   1113e:	4393      	bics	r3, r2
   11140:	3308      	adds	r3, #8
   11142:	9305      	str	r3, [sp, #20]
   11144:	696b      	ldr	r3, [r5, #20]
   11146:	9a03      	ldr	r2, [sp, #12]
   11148:	189b      	adds	r3, r3, r2
   1114a:	616b      	str	r3, [r5, #20]
   1114c:	e74f      	b.n	10fee <_vfiprintf_r+0x3e>
   1114e:	425b      	negs	r3, r3
   11150:	60eb      	str	r3, [r5, #12]
   11152:	2302      	movs	r3, #2
   11154:	430b      	orrs	r3, r1
   11156:	602b      	str	r3, [r5, #0]
   11158:	e7bf      	b.n	110da <_vfiprintf_r+0x12a>
   1115a:	434b      	muls	r3, r1
   1115c:	3401      	adds	r4, #1
   1115e:	189b      	adds	r3, r3, r2
   11160:	2001      	movs	r0, #1
   11162:	e789      	b.n	11078 <_vfiprintf_r+0xc8>
   11164:	2301      	movs	r3, #1
   11166:	425b      	negs	r3, r3
   11168:	e7c6      	b.n	110f8 <_vfiprintf_r+0x148>
   1116a:	2300      	movs	r3, #0
   1116c:	0014      	movs	r4, r2
   1116e:	200a      	movs	r0, #10
   11170:	001a      	movs	r2, r3
   11172:	606b      	str	r3, [r5, #4]
   11174:	7821      	ldrb	r1, [r4, #0]
   11176:	3930      	subs	r1, #48	; 0x30
   11178:	2909      	cmp	r1, #9
   1117a:	d903      	bls.n	11184 <_vfiprintf_r+0x1d4>
   1117c:	2b00      	cmp	r3, #0
   1117e:	d0bc      	beq.n	110fa <_vfiprintf_r+0x14a>
   11180:	9207      	str	r2, [sp, #28]
   11182:	e7ba      	b.n	110fa <_vfiprintf_r+0x14a>
   11184:	4342      	muls	r2, r0
   11186:	3401      	adds	r4, #1
   11188:	1852      	adds	r2, r2, r1
   1118a:	2301      	movs	r3, #1
   1118c:	e7f2      	b.n	11174 <_vfiprintf_r+0x1c4>
   1118e:	3307      	adds	r3, #7
   11190:	e7d5      	b.n	1113e <_vfiprintf_r+0x18e>
   11192:	ab05      	add	r3, sp, #20
   11194:	9300      	str	r3, [sp, #0]
   11196:	003a      	movs	r2, r7
   11198:	4b12      	ldr	r3, [pc, #72]	; (111e4 <_vfiprintf_r+0x234>)
   1119a:	0029      	movs	r1, r5
   1119c:	0030      	movs	r0, r6
   1119e:	f7fd fbb1 	bl	e904 <_printf_float>
   111a2:	9003      	str	r0, [sp, #12]
   111a4:	9b03      	ldr	r3, [sp, #12]
   111a6:	3301      	adds	r3, #1
   111a8:	d1cc      	bne.n	11144 <_vfiprintf_r+0x194>
   111aa:	89bb      	ldrh	r3, [r7, #12]
   111ac:	065b      	lsls	r3, r3, #25
   111ae:	d500      	bpl.n	111b2 <_vfiprintf_r+0x202>
   111b0:	e77b      	b.n	110aa <_vfiprintf_r+0xfa>
   111b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   111b4:	e77b      	b.n	110ae <_vfiprintf_r+0xfe>
   111b6:	ab05      	add	r3, sp, #20
   111b8:	9300      	str	r3, [sp, #0]
   111ba:	003a      	movs	r2, r7
   111bc:	4b09      	ldr	r3, [pc, #36]	; (111e4 <_vfiprintf_r+0x234>)
   111be:	0029      	movs	r1, r5
   111c0:	0030      	movs	r0, r6
   111c2:	f7fd fe59 	bl	ee78 <_printf_i>
   111c6:	e7ec      	b.n	111a2 <_vfiprintf_r+0x1f2>
   111c8:	00015214 	.word	0x00015214
   111cc:	00015354 	.word	0x00015354
   111d0:	00015234 	.word	0x00015234
   111d4:	000151f4 	.word	0x000151f4
   111d8:	0001535a 	.word	0x0001535a
   111dc:	0001535e 	.word	0x0001535e
   111e0:	0000e905 	.word	0x0000e905
   111e4:	00010f8b 	.word	0x00010f8b

000111e8 <_putc_r>:
   111e8:	b570      	push	{r4, r5, r6, lr}
   111ea:	0006      	movs	r6, r0
   111ec:	000d      	movs	r5, r1
   111ee:	0014      	movs	r4, r2
   111f0:	2800      	cmp	r0, #0
   111f2:	d004      	beq.n	111fe <_putc_r+0x16>
   111f4:	6983      	ldr	r3, [r0, #24]
   111f6:	2b00      	cmp	r3, #0
   111f8:	d101      	bne.n	111fe <_putc_r+0x16>
   111fa:	f7ff f93f 	bl	1047c <__sinit>
   111fe:	4b12      	ldr	r3, [pc, #72]	; (11248 <_putc_r+0x60>)
   11200:	429c      	cmp	r4, r3
   11202:	d111      	bne.n	11228 <_putc_r+0x40>
   11204:	6874      	ldr	r4, [r6, #4]
   11206:	68a3      	ldr	r3, [r4, #8]
   11208:	3b01      	subs	r3, #1
   1120a:	60a3      	str	r3, [r4, #8]
   1120c:	2b00      	cmp	r3, #0
   1120e:	da05      	bge.n	1121c <_putc_r+0x34>
   11210:	69a2      	ldr	r2, [r4, #24]
   11212:	4293      	cmp	r3, r2
   11214:	db12      	blt.n	1123c <_putc_r+0x54>
   11216:	b2eb      	uxtb	r3, r5
   11218:	2b0a      	cmp	r3, #10
   1121a:	d00f      	beq.n	1123c <_putc_r+0x54>
   1121c:	6823      	ldr	r3, [r4, #0]
   1121e:	b2e8      	uxtb	r0, r5
   11220:	1c5a      	adds	r2, r3, #1
   11222:	6022      	str	r2, [r4, #0]
   11224:	701d      	strb	r5, [r3, #0]
   11226:	bd70      	pop	{r4, r5, r6, pc}
   11228:	4b08      	ldr	r3, [pc, #32]	; (1124c <_putc_r+0x64>)
   1122a:	429c      	cmp	r4, r3
   1122c:	d101      	bne.n	11232 <_putc_r+0x4a>
   1122e:	68b4      	ldr	r4, [r6, #8]
   11230:	e7e9      	b.n	11206 <_putc_r+0x1e>
   11232:	4b07      	ldr	r3, [pc, #28]	; (11250 <_putc_r+0x68>)
   11234:	429c      	cmp	r4, r3
   11236:	d1e6      	bne.n	11206 <_putc_r+0x1e>
   11238:	68f4      	ldr	r4, [r6, #12]
   1123a:	e7e4      	b.n	11206 <_putc_r+0x1e>
   1123c:	0022      	movs	r2, r4
   1123e:	0029      	movs	r1, r5
   11240:	0030      	movs	r0, r6
   11242:	f7fe f8df 	bl	f404 <__swbuf_r>
   11246:	e7ee      	b.n	11226 <_putc_r+0x3e>
   11248:	00015214 	.word	0x00015214
   1124c:	00015234 	.word	0x00015234
   11250:	000151f4 	.word	0x000151f4

00011254 <__sread>:
   11254:	b570      	push	{r4, r5, r6, lr}
   11256:	000c      	movs	r4, r1
   11258:	250e      	movs	r5, #14
   1125a:	5f49      	ldrsh	r1, [r1, r5]
   1125c:	f000 f8ca 	bl	113f4 <_read_r>
   11260:	2800      	cmp	r0, #0
   11262:	db03      	blt.n	1126c <__sread+0x18>
   11264:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11266:	181b      	adds	r3, r3, r0
   11268:	6563      	str	r3, [r4, #84]	; 0x54
   1126a:	bd70      	pop	{r4, r5, r6, pc}
   1126c:	89a3      	ldrh	r3, [r4, #12]
   1126e:	4a02      	ldr	r2, [pc, #8]	; (11278 <__sread+0x24>)
   11270:	4013      	ands	r3, r2
   11272:	81a3      	strh	r3, [r4, #12]
   11274:	e7f9      	b.n	1126a <__sread+0x16>
   11276:	46c0      	nop			; (mov r8, r8)
   11278:	ffffefff 	.word	0xffffefff

0001127c <__swrite>:
   1127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1127e:	001f      	movs	r7, r3
   11280:	898b      	ldrh	r3, [r1, #12]
   11282:	0005      	movs	r5, r0
   11284:	000c      	movs	r4, r1
   11286:	0016      	movs	r6, r2
   11288:	05db      	lsls	r3, r3, #23
   1128a:	d505      	bpl.n	11298 <__swrite+0x1c>
   1128c:	230e      	movs	r3, #14
   1128e:	5ec9      	ldrsh	r1, [r1, r3]
   11290:	2200      	movs	r2, #0
   11292:	2302      	movs	r3, #2
   11294:	f000 f874 	bl	11380 <_lseek_r>
   11298:	89a3      	ldrh	r3, [r4, #12]
   1129a:	4a05      	ldr	r2, [pc, #20]	; (112b0 <__swrite+0x34>)
   1129c:	0028      	movs	r0, r5
   1129e:	4013      	ands	r3, r2
   112a0:	81a3      	strh	r3, [r4, #12]
   112a2:	0032      	movs	r2, r6
   112a4:	230e      	movs	r3, #14
   112a6:	5ee1      	ldrsh	r1, [r4, r3]
   112a8:	003b      	movs	r3, r7
   112aa:	f000 f81f 	bl	112ec <_write_r>
   112ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112b0:	ffffefff 	.word	0xffffefff

000112b4 <__sseek>:
   112b4:	b570      	push	{r4, r5, r6, lr}
   112b6:	000c      	movs	r4, r1
   112b8:	250e      	movs	r5, #14
   112ba:	5f49      	ldrsh	r1, [r1, r5]
   112bc:	f000 f860 	bl	11380 <_lseek_r>
   112c0:	89a3      	ldrh	r3, [r4, #12]
   112c2:	1c42      	adds	r2, r0, #1
   112c4:	d103      	bne.n	112ce <__sseek+0x1a>
   112c6:	4a05      	ldr	r2, [pc, #20]	; (112dc <__sseek+0x28>)
   112c8:	4013      	ands	r3, r2
   112ca:	81a3      	strh	r3, [r4, #12]
   112cc:	bd70      	pop	{r4, r5, r6, pc}
   112ce:	2280      	movs	r2, #128	; 0x80
   112d0:	0152      	lsls	r2, r2, #5
   112d2:	4313      	orrs	r3, r2
   112d4:	81a3      	strh	r3, [r4, #12]
   112d6:	6560      	str	r0, [r4, #84]	; 0x54
   112d8:	e7f8      	b.n	112cc <__sseek+0x18>
   112da:	46c0      	nop			; (mov r8, r8)
   112dc:	ffffefff 	.word	0xffffefff

000112e0 <__sclose>:
   112e0:	b510      	push	{r4, lr}
   112e2:	230e      	movs	r3, #14
   112e4:	5ec9      	ldrsh	r1, [r1, r3]
   112e6:	f000 f815 	bl	11314 <_close_r>
   112ea:	bd10      	pop	{r4, pc}

000112ec <_write_r>:
   112ec:	b570      	push	{r4, r5, r6, lr}
   112ee:	0005      	movs	r5, r0
   112f0:	0008      	movs	r0, r1
   112f2:	0011      	movs	r1, r2
   112f4:	2200      	movs	r2, #0
   112f6:	4c06      	ldr	r4, [pc, #24]	; (11310 <_write_r+0x24>)
   112f8:	6022      	str	r2, [r4, #0]
   112fa:	001a      	movs	r2, r3
   112fc:	f7f9 fb30 	bl	a960 <_write>
   11300:	1c43      	adds	r3, r0, #1
   11302:	d103      	bne.n	1130c <_write_r+0x20>
   11304:	6823      	ldr	r3, [r4, #0]
   11306:	2b00      	cmp	r3, #0
   11308:	d000      	beq.n	1130c <_write_r+0x20>
   1130a:	602b      	str	r3, [r5, #0]
   1130c:	bd70      	pop	{r4, r5, r6, pc}
   1130e:	46c0      	nop			; (mov r8, r8)
   11310:	200007f8 	.word	0x200007f8

00011314 <_close_r>:
   11314:	2300      	movs	r3, #0
   11316:	b570      	push	{r4, r5, r6, lr}
   11318:	4c06      	ldr	r4, [pc, #24]	; (11334 <_close_r+0x20>)
   1131a:	0005      	movs	r5, r0
   1131c:	0008      	movs	r0, r1
   1131e:	6023      	str	r3, [r4, #0]
   11320:	f7fb fb3a 	bl	c998 <_close>
   11324:	1c43      	adds	r3, r0, #1
   11326:	d103      	bne.n	11330 <_close_r+0x1c>
   11328:	6823      	ldr	r3, [r4, #0]
   1132a:	2b00      	cmp	r3, #0
   1132c:	d000      	beq.n	11330 <_close_r+0x1c>
   1132e:	602b      	str	r3, [r5, #0]
   11330:	bd70      	pop	{r4, r5, r6, pc}
   11332:	46c0      	nop			; (mov r8, r8)
   11334:	200007f8 	.word	0x200007f8

00011338 <_fstat_r>:
   11338:	2300      	movs	r3, #0
   1133a:	b570      	push	{r4, r5, r6, lr}
   1133c:	4c06      	ldr	r4, [pc, #24]	; (11358 <_fstat_r+0x20>)
   1133e:	0005      	movs	r5, r0
   11340:	0008      	movs	r0, r1
   11342:	0011      	movs	r1, r2
   11344:	6023      	str	r3, [r4, #0]
   11346:	f7fb fb31 	bl	c9ac <_fstat>
   1134a:	1c43      	adds	r3, r0, #1
   1134c:	d103      	bne.n	11356 <_fstat_r+0x1e>
   1134e:	6823      	ldr	r3, [r4, #0]
   11350:	2b00      	cmp	r3, #0
   11352:	d000      	beq.n	11356 <_fstat_r+0x1e>
   11354:	602b      	str	r3, [r5, #0]
   11356:	bd70      	pop	{r4, r5, r6, pc}
   11358:	200007f8 	.word	0x200007f8

0001135c <_isatty_r>:
   1135c:	2300      	movs	r3, #0
   1135e:	b570      	push	{r4, r5, r6, lr}
   11360:	4c06      	ldr	r4, [pc, #24]	; (1137c <_isatty_r+0x20>)
   11362:	0005      	movs	r5, r0
   11364:	0008      	movs	r0, r1
   11366:	6023      	str	r3, [r4, #0]
   11368:	f7fb fb2e 	bl	c9c8 <_isatty>
   1136c:	1c43      	adds	r3, r0, #1
   1136e:	d103      	bne.n	11378 <_isatty_r+0x1c>
   11370:	6823      	ldr	r3, [r4, #0]
   11372:	2b00      	cmp	r3, #0
   11374:	d000      	beq.n	11378 <_isatty_r+0x1c>
   11376:	602b      	str	r3, [r5, #0]
   11378:	bd70      	pop	{r4, r5, r6, pc}
   1137a:	46c0      	nop			; (mov r8, r8)
   1137c:	200007f8 	.word	0x200007f8

00011380 <_lseek_r>:
   11380:	b570      	push	{r4, r5, r6, lr}
   11382:	0005      	movs	r5, r0
   11384:	0008      	movs	r0, r1
   11386:	0011      	movs	r1, r2
   11388:	2200      	movs	r2, #0
   1138a:	4c06      	ldr	r4, [pc, #24]	; (113a4 <_lseek_r+0x24>)
   1138c:	6022      	str	r2, [r4, #0]
   1138e:	001a      	movs	r2, r3
   11390:	f7fb fb23 	bl	c9da <_lseek>
   11394:	1c43      	adds	r3, r0, #1
   11396:	d103      	bne.n	113a0 <_lseek_r+0x20>
   11398:	6823      	ldr	r3, [r4, #0]
   1139a:	2b00      	cmp	r3, #0
   1139c:	d000      	beq.n	113a0 <_lseek_r+0x20>
   1139e:	602b      	str	r3, [r5, #0]
   113a0:	bd70      	pop	{r4, r5, r6, pc}
   113a2:	46c0      	nop			; (mov r8, r8)
   113a4:	200007f8 	.word	0x200007f8

000113a8 <_realloc_r>:
   113a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113aa:	0007      	movs	r7, r0
   113ac:	000d      	movs	r5, r1
   113ae:	0016      	movs	r6, r2
   113b0:	2900      	cmp	r1, #0
   113b2:	d105      	bne.n	113c0 <_realloc_r+0x18>
   113b4:	0011      	movs	r1, r2
   113b6:	f7fd f9ab 	bl	e710 <_malloc_r>
   113ba:	0004      	movs	r4, r0
   113bc:	0020      	movs	r0, r4
   113be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113c0:	2a00      	cmp	r2, #0
   113c2:	d103      	bne.n	113cc <_realloc_r+0x24>
   113c4:	f7fd f95a 	bl	e67c <_free_r>
   113c8:	0034      	movs	r4, r6
   113ca:	e7f7      	b.n	113bc <_realloc_r+0x14>
   113cc:	f000 f826 	bl	1141c <_malloc_usable_size_r>
   113d0:	002c      	movs	r4, r5
   113d2:	4286      	cmp	r6, r0
   113d4:	d9f2      	bls.n	113bc <_realloc_r+0x14>
   113d6:	0031      	movs	r1, r6
   113d8:	0038      	movs	r0, r7
   113da:	f7fd f999 	bl	e710 <_malloc_r>
   113de:	1e04      	subs	r4, r0, #0
   113e0:	d0ec      	beq.n	113bc <_realloc_r+0x14>
   113e2:	0029      	movs	r1, r5
   113e4:	0032      	movs	r2, r6
   113e6:	f7fd f925 	bl	e634 <memcpy>
   113ea:	0029      	movs	r1, r5
   113ec:	0038      	movs	r0, r7
   113ee:	f7fd f945 	bl	e67c <_free_r>
   113f2:	e7e3      	b.n	113bc <_realloc_r+0x14>

000113f4 <_read_r>:
   113f4:	b570      	push	{r4, r5, r6, lr}
   113f6:	0005      	movs	r5, r0
   113f8:	0008      	movs	r0, r1
   113fa:	0011      	movs	r1, r2
   113fc:	2200      	movs	r2, #0
   113fe:	4c06      	ldr	r4, [pc, #24]	; (11418 <_read_r+0x24>)
   11400:	6022      	str	r2, [r4, #0]
   11402:	001a      	movs	r2, r3
   11404:	f7f9 fa82 	bl	a90c <_read>
   11408:	1c43      	adds	r3, r0, #1
   1140a:	d103      	bne.n	11414 <_read_r+0x20>
   1140c:	6823      	ldr	r3, [r4, #0]
   1140e:	2b00      	cmp	r3, #0
   11410:	d000      	beq.n	11414 <_read_r+0x20>
   11412:	602b      	str	r3, [r5, #0]
   11414:	bd70      	pop	{r4, r5, r6, pc}
   11416:	46c0      	nop			; (mov r8, r8)
   11418:	200007f8 	.word	0x200007f8

0001141c <_malloc_usable_size_r>:
   1141c:	1f0b      	subs	r3, r1, #4
   1141e:	681b      	ldr	r3, [r3, #0]
   11420:	1f18      	subs	r0, r3, #4
   11422:	2b00      	cmp	r3, #0
   11424:	da01      	bge.n	1142a <_malloc_usable_size_r+0xe>
   11426:	580b      	ldr	r3, [r1, r0]
   11428:	18c0      	adds	r0, r0, r3
   1142a:	4770      	bx	lr

0001142c <__gnu_thumb1_case_uqi>:
   1142c:	b402      	push	{r1}
   1142e:	4671      	mov	r1, lr
   11430:	0849      	lsrs	r1, r1, #1
   11432:	0049      	lsls	r1, r1, #1
   11434:	5c09      	ldrb	r1, [r1, r0]
   11436:	0049      	lsls	r1, r1, #1
   11438:	448e      	add	lr, r1
   1143a:	bc02      	pop	{r1}
   1143c:	4770      	bx	lr
   1143e:	46c0      	nop			; (mov r8, r8)

00011440 <__udivsi3>:
   11440:	2200      	movs	r2, #0
   11442:	0843      	lsrs	r3, r0, #1
   11444:	428b      	cmp	r3, r1
   11446:	d374      	bcc.n	11532 <__udivsi3+0xf2>
   11448:	0903      	lsrs	r3, r0, #4
   1144a:	428b      	cmp	r3, r1
   1144c:	d35f      	bcc.n	1150e <__udivsi3+0xce>
   1144e:	0a03      	lsrs	r3, r0, #8
   11450:	428b      	cmp	r3, r1
   11452:	d344      	bcc.n	114de <__udivsi3+0x9e>
   11454:	0b03      	lsrs	r3, r0, #12
   11456:	428b      	cmp	r3, r1
   11458:	d328      	bcc.n	114ac <__udivsi3+0x6c>
   1145a:	0c03      	lsrs	r3, r0, #16
   1145c:	428b      	cmp	r3, r1
   1145e:	d30d      	bcc.n	1147c <__udivsi3+0x3c>
   11460:	22ff      	movs	r2, #255	; 0xff
   11462:	0209      	lsls	r1, r1, #8
   11464:	ba12      	rev	r2, r2
   11466:	0c03      	lsrs	r3, r0, #16
   11468:	428b      	cmp	r3, r1
   1146a:	d302      	bcc.n	11472 <__udivsi3+0x32>
   1146c:	1212      	asrs	r2, r2, #8
   1146e:	0209      	lsls	r1, r1, #8
   11470:	d065      	beq.n	1153e <__udivsi3+0xfe>
   11472:	0b03      	lsrs	r3, r0, #12
   11474:	428b      	cmp	r3, r1
   11476:	d319      	bcc.n	114ac <__udivsi3+0x6c>
   11478:	e000      	b.n	1147c <__udivsi3+0x3c>
   1147a:	0a09      	lsrs	r1, r1, #8
   1147c:	0bc3      	lsrs	r3, r0, #15
   1147e:	428b      	cmp	r3, r1
   11480:	d301      	bcc.n	11486 <__udivsi3+0x46>
   11482:	03cb      	lsls	r3, r1, #15
   11484:	1ac0      	subs	r0, r0, r3
   11486:	4152      	adcs	r2, r2
   11488:	0b83      	lsrs	r3, r0, #14
   1148a:	428b      	cmp	r3, r1
   1148c:	d301      	bcc.n	11492 <__udivsi3+0x52>
   1148e:	038b      	lsls	r3, r1, #14
   11490:	1ac0      	subs	r0, r0, r3
   11492:	4152      	adcs	r2, r2
   11494:	0b43      	lsrs	r3, r0, #13
   11496:	428b      	cmp	r3, r1
   11498:	d301      	bcc.n	1149e <__udivsi3+0x5e>
   1149a:	034b      	lsls	r3, r1, #13
   1149c:	1ac0      	subs	r0, r0, r3
   1149e:	4152      	adcs	r2, r2
   114a0:	0b03      	lsrs	r3, r0, #12
   114a2:	428b      	cmp	r3, r1
   114a4:	d301      	bcc.n	114aa <__udivsi3+0x6a>
   114a6:	030b      	lsls	r3, r1, #12
   114a8:	1ac0      	subs	r0, r0, r3
   114aa:	4152      	adcs	r2, r2
   114ac:	0ac3      	lsrs	r3, r0, #11
   114ae:	428b      	cmp	r3, r1
   114b0:	d301      	bcc.n	114b6 <__udivsi3+0x76>
   114b2:	02cb      	lsls	r3, r1, #11
   114b4:	1ac0      	subs	r0, r0, r3
   114b6:	4152      	adcs	r2, r2
   114b8:	0a83      	lsrs	r3, r0, #10
   114ba:	428b      	cmp	r3, r1
   114bc:	d301      	bcc.n	114c2 <__udivsi3+0x82>
   114be:	028b      	lsls	r3, r1, #10
   114c0:	1ac0      	subs	r0, r0, r3
   114c2:	4152      	adcs	r2, r2
   114c4:	0a43      	lsrs	r3, r0, #9
   114c6:	428b      	cmp	r3, r1
   114c8:	d301      	bcc.n	114ce <__udivsi3+0x8e>
   114ca:	024b      	lsls	r3, r1, #9
   114cc:	1ac0      	subs	r0, r0, r3
   114ce:	4152      	adcs	r2, r2
   114d0:	0a03      	lsrs	r3, r0, #8
   114d2:	428b      	cmp	r3, r1
   114d4:	d301      	bcc.n	114da <__udivsi3+0x9a>
   114d6:	020b      	lsls	r3, r1, #8
   114d8:	1ac0      	subs	r0, r0, r3
   114da:	4152      	adcs	r2, r2
   114dc:	d2cd      	bcs.n	1147a <__udivsi3+0x3a>
   114de:	09c3      	lsrs	r3, r0, #7
   114e0:	428b      	cmp	r3, r1
   114e2:	d301      	bcc.n	114e8 <__udivsi3+0xa8>
   114e4:	01cb      	lsls	r3, r1, #7
   114e6:	1ac0      	subs	r0, r0, r3
   114e8:	4152      	adcs	r2, r2
   114ea:	0983      	lsrs	r3, r0, #6
   114ec:	428b      	cmp	r3, r1
   114ee:	d301      	bcc.n	114f4 <__udivsi3+0xb4>
   114f0:	018b      	lsls	r3, r1, #6
   114f2:	1ac0      	subs	r0, r0, r3
   114f4:	4152      	adcs	r2, r2
   114f6:	0943      	lsrs	r3, r0, #5
   114f8:	428b      	cmp	r3, r1
   114fa:	d301      	bcc.n	11500 <__udivsi3+0xc0>
   114fc:	014b      	lsls	r3, r1, #5
   114fe:	1ac0      	subs	r0, r0, r3
   11500:	4152      	adcs	r2, r2
   11502:	0903      	lsrs	r3, r0, #4
   11504:	428b      	cmp	r3, r1
   11506:	d301      	bcc.n	1150c <__udivsi3+0xcc>
   11508:	010b      	lsls	r3, r1, #4
   1150a:	1ac0      	subs	r0, r0, r3
   1150c:	4152      	adcs	r2, r2
   1150e:	08c3      	lsrs	r3, r0, #3
   11510:	428b      	cmp	r3, r1
   11512:	d301      	bcc.n	11518 <__udivsi3+0xd8>
   11514:	00cb      	lsls	r3, r1, #3
   11516:	1ac0      	subs	r0, r0, r3
   11518:	4152      	adcs	r2, r2
   1151a:	0883      	lsrs	r3, r0, #2
   1151c:	428b      	cmp	r3, r1
   1151e:	d301      	bcc.n	11524 <__udivsi3+0xe4>
   11520:	008b      	lsls	r3, r1, #2
   11522:	1ac0      	subs	r0, r0, r3
   11524:	4152      	adcs	r2, r2
   11526:	0843      	lsrs	r3, r0, #1
   11528:	428b      	cmp	r3, r1
   1152a:	d301      	bcc.n	11530 <__udivsi3+0xf0>
   1152c:	004b      	lsls	r3, r1, #1
   1152e:	1ac0      	subs	r0, r0, r3
   11530:	4152      	adcs	r2, r2
   11532:	1a41      	subs	r1, r0, r1
   11534:	d200      	bcs.n	11538 <__udivsi3+0xf8>
   11536:	4601      	mov	r1, r0
   11538:	4152      	adcs	r2, r2
   1153a:	4610      	mov	r0, r2
   1153c:	4770      	bx	lr
   1153e:	e7ff      	b.n	11540 <__udivsi3+0x100>
   11540:	b501      	push	{r0, lr}
   11542:	2000      	movs	r0, #0
   11544:	f000 f8f0 	bl	11728 <__aeabi_idiv0>
   11548:	bd02      	pop	{r1, pc}
   1154a:	46c0      	nop			; (mov r8, r8)

0001154c <__aeabi_uidivmod>:
   1154c:	2900      	cmp	r1, #0
   1154e:	d0f7      	beq.n	11540 <__udivsi3+0x100>
   11550:	e776      	b.n	11440 <__udivsi3>
   11552:	4770      	bx	lr

00011554 <__divsi3>:
   11554:	4603      	mov	r3, r0
   11556:	430b      	orrs	r3, r1
   11558:	d47f      	bmi.n	1165a <__divsi3+0x106>
   1155a:	2200      	movs	r2, #0
   1155c:	0843      	lsrs	r3, r0, #1
   1155e:	428b      	cmp	r3, r1
   11560:	d374      	bcc.n	1164c <__divsi3+0xf8>
   11562:	0903      	lsrs	r3, r0, #4
   11564:	428b      	cmp	r3, r1
   11566:	d35f      	bcc.n	11628 <__divsi3+0xd4>
   11568:	0a03      	lsrs	r3, r0, #8
   1156a:	428b      	cmp	r3, r1
   1156c:	d344      	bcc.n	115f8 <__divsi3+0xa4>
   1156e:	0b03      	lsrs	r3, r0, #12
   11570:	428b      	cmp	r3, r1
   11572:	d328      	bcc.n	115c6 <__divsi3+0x72>
   11574:	0c03      	lsrs	r3, r0, #16
   11576:	428b      	cmp	r3, r1
   11578:	d30d      	bcc.n	11596 <__divsi3+0x42>
   1157a:	22ff      	movs	r2, #255	; 0xff
   1157c:	0209      	lsls	r1, r1, #8
   1157e:	ba12      	rev	r2, r2
   11580:	0c03      	lsrs	r3, r0, #16
   11582:	428b      	cmp	r3, r1
   11584:	d302      	bcc.n	1158c <__divsi3+0x38>
   11586:	1212      	asrs	r2, r2, #8
   11588:	0209      	lsls	r1, r1, #8
   1158a:	d065      	beq.n	11658 <__divsi3+0x104>
   1158c:	0b03      	lsrs	r3, r0, #12
   1158e:	428b      	cmp	r3, r1
   11590:	d319      	bcc.n	115c6 <__divsi3+0x72>
   11592:	e000      	b.n	11596 <__divsi3+0x42>
   11594:	0a09      	lsrs	r1, r1, #8
   11596:	0bc3      	lsrs	r3, r0, #15
   11598:	428b      	cmp	r3, r1
   1159a:	d301      	bcc.n	115a0 <__divsi3+0x4c>
   1159c:	03cb      	lsls	r3, r1, #15
   1159e:	1ac0      	subs	r0, r0, r3
   115a0:	4152      	adcs	r2, r2
   115a2:	0b83      	lsrs	r3, r0, #14
   115a4:	428b      	cmp	r3, r1
   115a6:	d301      	bcc.n	115ac <__divsi3+0x58>
   115a8:	038b      	lsls	r3, r1, #14
   115aa:	1ac0      	subs	r0, r0, r3
   115ac:	4152      	adcs	r2, r2
   115ae:	0b43      	lsrs	r3, r0, #13
   115b0:	428b      	cmp	r3, r1
   115b2:	d301      	bcc.n	115b8 <__divsi3+0x64>
   115b4:	034b      	lsls	r3, r1, #13
   115b6:	1ac0      	subs	r0, r0, r3
   115b8:	4152      	adcs	r2, r2
   115ba:	0b03      	lsrs	r3, r0, #12
   115bc:	428b      	cmp	r3, r1
   115be:	d301      	bcc.n	115c4 <__divsi3+0x70>
   115c0:	030b      	lsls	r3, r1, #12
   115c2:	1ac0      	subs	r0, r0, r3
   115c4:	4152      	adcs	r2, r2
   115c6:	0ac3      	lsrs	r3, r0, #11
   115c8:	428b      	cmp	r3, r1
   115ca:	d301      	bcc.n	115d0 <__divsi3+0x7c>
   115cc:	02cb      	lsls	r3, r1, #11
   115ce:	1ac0      	subs	r0, r0, r3
   115d0:	4152      	adcs	r2, r2
   115d2:	0a83      	lsrs	r3, r0, #10
   115d4:	428b      	cmp	r3, r1
   115d6:	d301      	bcc.n	115dc <__divsi3+0x88>
   115d8:	028b      	lsls	r3, r1, #10
   115da:	1ac0      	subs	r0, r0, r3
   115dc:	4152      	adcs	r2, r2
   115de:	0a43      	lsrs	r3, r0, #9
   115e0:	428b      	cmp	r3, r1
   115e2:	d301      	bcc.n	115e8 <__divsi3+0x94>
   115e4:	024b      	lsls	r3, r1, #9
   115e6:	1ac0      	subs	r0, r0, r3
   115e8:	4152      	adcs	r2, r2
   115ea:	0a03      	lsrs	r3, r0, #8
   115ec:	428b      	cmp	r3, r1
   115ee:	d301      	bcc.n	115f4 <__divsi3+0xa0>
   115f0:	020b      	lsls	r3, r1, #8
   115f2:	1ac0      	subs	r0, r0, r3
   115f4:	4152      	adcs	r2, r2
   115f6:	d2cd      	bcs.n	11594 <__divsi3+0x40>
   115f8:	09c3      	lsrs	r3, r0, #7
   115fa:	428b      	cmp	r3, r1
   115fc:	d301      	bcc.n	11602 <__divsi3+0xae>
   115fe:	01cb      	lsls	r3, r1, #7
   11600:	1ac0      	subs	r0, r0, r3
   11602:	4152      	adcs	r2, r2
   11604:	0983      	lsrs	r3, r0, #6
   11606:	428b      	cmp	r3, r1
   11608:	d301      	bcc.n	1160e <__divsi3+0xba>
   1160a:	018b      	lsls	r3, r1, #6
   1160c:	1ac0      	subs	r0, r0, r3
   1160e:	4152      	adcs	r2, r2
   11610:	0943      	lsrs	r3, r0, #5
   11612:	428b      	cmp	r3, r1
   11614:	d301      	bcc.n	1161a <__divsi3+0xc6>
   11616:	014b      	lsls	r3, r1, #5
   11618:	1ac0      	subs	r0, r0, r3
   1161a:	4152      	adcs	r2, r2
   1161c:	0903      	lsrs	r3, r0, #4
   1161e:	428b      	cmp	r3, r1
   11620:	d301      	bcc.n	11626 <__divsi3+0xd2>
   11622:	010b      	lsls	r3, r1, #4
   11624:	1ac0      	subs	r0, r0, r3
   11626:	4152      	adcs	r2, r2
   11628:	08c3      	lsrs	r3, r0, #3
   1162a:	428b      	cmp	r3, r1
   1162c:	d301      	bcc.n	11632 <__divsi3+0xde>
   1162e:	00cb      	lsls	r3, r1, #3
   11630:	1ac0      	subs	r0, r0, r3
   11632:	4152      	adcs	r2, r2
   11634:	0883      	lsrs	r3, r0, #2
   11636:	428b      	cmp	r3, r1
   11638:	d301      	bcc.n	1163e <__divsi3+0xea>
   1163a:	008b      	lsls	r3, r1, #2
   1163c:	1ac0      	subs	r0, r0, r3
   1163e:	4152      	adcs	r2, r2
   11640:	0843      	lsrs	r3, r0, #1
   11642:	428b      	cmp	r3, r1
   11644:	d301      	bcc.n	1164a <__divsi3+0xf6>
   11646:	004b      	lsls	r3, r1, #1
   11648:	1ac0      	subs	r0, r0, r3
   1164a:	4152      	adcs	r2, r2
   1164c:	1a41      	subs	r1, r0, r1
   1164e:	d200      	bcs.n	11652 <__divsi3+0xfe>
   11650:	4601      	mov	r1, r0
   11652:	4152      	adcs	r2, r2
   11654:	4610      	mov	r0, r2
   11656:	4770      	bx	lr
   11658:	e05d      	b.n	11716 <__divsi3+0x1c2>
   1165a:	0fca      	lsrs	r2, r1, #31
   1165c:	d000      	beq.n	11660 <__divsi3+0x10c>
   1165e:	4249      	negs	r1, r1
   11660:	1003      	asrs	r3, r0, #32
   11662:	d300      	bcc.n	11666 <__divsi3+0x112>
   11664:	4240      	negs	r0, r0
   11666:	4053      	eors	r3, r2
   11668:	2200      	movs	r2, #0
   1166a:	469c      	mov	ip, r3
   1166c:	0903      	lsrs	r3, r0, #4
   1166e:	428b      	cmp	r3, r1
   11670:	d32d      	bcc.n	116ce <__divsi3+0x17a>
   11672:	0a03      	lsrs	r3, r0, #8
   11674:	428b      	cmp	r3, r1
   11676:	d312      	bcc.n	1169e <__divsi3+0x14a>
   11678:	22fc      	movs	r2, #252	; 0xfc
   1167a:	0189      	lsls	r1, r1, #6
   1167c:	ba12      	rev	r2, r2
   1167e:	0a03      	lsrs	r3, r0, #8
   11680:	428b      	cmp	r3, r1
   11682:	d30c      	bcc.n	1169e <__divsi3+0x14a>
   11684:	0189      	lsls	r1, r1, #6
   11686:	1192      	asrs	r2, r2, #6
   11688:	428b      	cmp	r3, r1
   1168a:	d308      	bcc.n	1169e <__divsi3+0x14a>
   1168c:	0189      	lsls	r1, r1, #6
   1168e:	1192      	asrs	r2, r2, #6
   11690:	428b      	cmp	r3, r1
   11692:	d304      	bcc.n	1169e <__divsi3+0x14a>
   11694:	0189      	lsls	r1, r1, #6
   11696:	d03a      	beq.n	1170e <__divsi3+0x1ba>
   11698:	1192      	asrs	r2, r2, #6
   1169a:	e000      	b.n	1169e <__divsi3+0x14a>
   1169c:	0989      	lsrs	r1, r1, #6
   1169e:	09c3      	lsrs	r3, r0, #7
   116a0:	428b      	cmp	r3, r1
   116a2:	d301      	bcc.n	116a8 <__divsi3+0x154>
   116a4:	01cb      	lsls	r3, r1, #7
   116a6:	1ac0      	subs	r0, r0, r3
   116a8:	4152      	adcs	r2, r2
   116aa:	0983      	lsrs	r3, r0, #6
   116ac:	428b      	cmp	r3, r1
   116ae:	d301      	bcc.n	116b4 <__divsi3+0x160>
   116b0:	018b      	lsls	r3, r1, #6
   116b2:	1ac0      	subs	r0, r0, r3
   116b4:	4152      	adcs	r2, r2
   116b6:	0943      	lsrs	r3, r0, #5
   116b8:	428b      	cmp	r3, r1
   116ba:	d301      	bcc.n	116c0 <__divsi3+0x16c>
   116bc:	014b      	lsls	r3, r1, #5
   116be:	1ac0      	subs	r0, r0, r3
   116c0:	4152      	adcs	r2, r2
   116c2:	0903      	lsrs	r3, r0, #4
   116c4:	428b      	cmp	r3, r1
   116c6:	d301      	bcc.n	116cc <__divsi3+0x178>
   116c8:	010b      	lsls	r3, r1, #4
   116ca:	1ac0      	subs	r0, r0, r3
   116cc:	4152      	adcs	r2, r2
   116ce:	08c3      	lsrs	r3, r0, #3
   116d0:	428b      	cmp	r3, r1
   116d2:	d301      	bcc.n	116d8 <__divsi3+0x184>
   116d4:	00cb      	lsls	r3, r1, #3
   116d6:	1ac0      	subs	r0, r0, r3
   116d8:	4152      	adcs	r2, r2
   116da:	0883      	lsrs	r3, r0, #2
   116dc:	428b      	cmp	r3, r1
   116de:	d301      	bcc.n	116e4 <__divsi3+0x190>
   116e0:	008b      	lsls	r3, r1, #2
   116e2:	1ac0      	subs	r0, r0, r3
   116e4:	4152      	adcs	r2, r2
   116e6:	d2d9      	bcs.n	1169c <__divsi3+0x148>
   116e8:	0843      	lsrs	r3, r0, #1
   116ea:	428b      	cmp	r3, r1
   116ec:	d301      	bcc.n	116f2 <__divsi3+0x19e>
   116ee:	004b      	lsls	r3, r1, #1
   116f0:	1ac0      	subs	r0, r0, r3
   116f2:	4152      	adcs	r2, r2
   116f4:	1a41      	subs	r1, r0, r1
   116f6:	d200      	bcs.n	116fa <__divsi3+0x1a6>
   116f8:	4601      	mov	r1, r0
   116fa:	4663      	mov	r3, ip
   116fc:	4152      	adcs	r2, r2
   116fe:	105b      	asrs	r3, r3, #1
   11700:	4610      	mov	r0, r2
   11702:	d301      	bcc.n	11708 <__divsi3+0x1b4>
   11704:	4240      	negs	r0, r0
   11706:	2b00      	cmp	r3, #0
   11708:	d500      	bpl.n	1170c <__divsi3+0x1b8>
   1170a:	4249      	negs	r1, r1
   1170c:	4770      	bx	lr
   1170e:	4663      	mov	r3, ip
   11710:	105b      	asrs	r3, r3, #1
   11712:	d300      	bcc.n	11716 <__divsi3+0x1c2>
   11714:	4240      	negs	r0, r0
   11716:	b501      	push	{r0, lr}
   11718:	2000      	movs	r0, #0
   1171a:	f000 f805 	bl	11728 <__aeabi_idiv0>
   1171e:	bd02      	pop	{r1, pc}

00011720 <__aeabi_idivmod>:
   11720:	2900      	cmp	r1, #0
   11722:	d0f8      	beq.n	11716 <__divsi3+0x1c2>
   11724:	e716      	b.n	11554 <__divsi3>
   11726:	4770      	bx	lr

00011728 <__aeabi_idiv0>:
   11728:	4770      	bx	lr
   1172a:	46c0      	nop			; (mov r8, r8)

0001172c <__aeabi_cdrcmple>:
   1172c:	4684      	mov	ip, r0
   1172e:	1c10      	adds	r0, r2, #0
   11730:	4662      	mov	r2, ip
   11732:	468c      	mov	ip, r1
   11734:	1c19      	adds	r1, r3, #0
   11736:	4663      	mov	r3, ip
   11738:	e000      	b.n	1173c <__aeabi_cdcmpeq>
   1173a:	46c0      	nop			; (mov r8, r8)

0001173c <__aeabi_cdcmpeq>:
   1173c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1173e:	f001 f9f7 	bl	12b30 <__ledf2>
   11742:	2800      	cmp	r0, #0
   11744:	d401      	bmi.n	1174a <__aeabi_cdcmpeq+0xe>
   11746:	2100      	movs	r1, #0
   11748:	42c8      	cmn	r0, r1
   1174a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001174c <__aeabi_dcmpeq>:
   1174c:	b510      	push	{r4, lr}
   1174e:	f001 f951 	bl	129f4 <__eqdf2>
   11752:	4240      	negs	r0, r0
   11754:	3001      	adds	r0, #1
   11756:	bd10      	pop	{r4, pc}

00011758 <__aeabi_dcmplt>:
   11758:	b510      	push	{r4, lr}
   1175a:	f001 f9e9 	bl	12b30 <__ledf2>
   1175e:	2800      	cmp	r0, #0
   11760:	db01      	blt.n	11766 <__aeabi_dcmplt+0xe>
   11762:	2000      	movs	r0, #0
   11764:	bd10      	pop	{r4, pc}
   11766:	2001      	movs	r0, #1
   11768:	bd10      	pop	{r4, pc}
   1176a:	46c0      	nop			; (mov r8, r8)

0001176c <__aeabi_dcmple>:
   1176c:	b510      	push	{r4, lr}
   1176e:	f001 f9df 	bl	12b30 <__ledf2>
   11772:	2800      	cmp	r0, #0
   11774:	dd01      	ble.n	1177a <__aeabi_dcmple+0xe>
   11776:	2000      	movs	r0, #0
   11778:	bd10      	pop	{r4, pc}
   1177a:	2001      	movs	r0, #1
   1177c:	bd10      	pop	{r4, pc}
   1177e:	46c0      	nop			; (mov r8, r8)

00011780 <__aeabi_dcmpgt>:
   11780:	b510      	push	{r4, lr}
   11782:	f001 f971 	bl	12a68 <__gedf2>
   11786:	2800      	cmp	r0, #0
   11788:	dc01      	bgt.n	1178e <__aeabi_dcmpgt+0xe>
   1178a:	2000      	movs	r0, #0
   1178c:	bd10      	pop	{r4, pc}
   1178e:	2001      	movs	r0, #1
   11790:	bd10      	pop	{r4, pc}
   11792:	46c0      	nop			; (mov r8, r8)

00011794 <__aeabi_dcmpge>:
   11794:	b510      	push	{r4, lr}
   11796:	f001 f967 	bl	12a68 <__gedf2>
   1179a:	2800      	cmp	r0, #0
   1179c:	da01      	bge.n	117a2 <__aeabi_dcmpge+0xe>
   1179e:	2000      	movs	r0, #0
   117a0:	bd10      	pop	{r4, pc}
   117a2:	2001      	movs	r0, #1
   117a4:	bd10      	pop	{r4, pc}
   117a6:	46c0      	nop			; (mov r8, r8)

000117a8 <__aeabi_lmul>:
   117a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   117aa:	46ce      	mov	lr, r9
   117ac:	4647      	mov	r7, r8
   117ae:	0415      	lsls	r5, r2, #16
   117b0:	0c2d      	lsrs	r5, r5, #16
   117b2:	002e      	movs	r6, r5
   117b4:	b580      	push	{r7, lr}
   117b6:	0407      	lsls	r7, r0, #16
   117b8:	0c14      	lsrs	r4, r2, #16
   117ba:	0c3f      	lsrs	r7, r7, #16
   117bc:	4699      	mov	r9, r3
   117be:	0c03      	lsrs	r3, r0, #16
   117c0:	437e      	muls	r6, r7
   117c2:	435d      	muls	r5, r3
   117c4:	4367      	muls	r7, r4
   117c6:	4363      	muls	r3, r4
   117c8:	197f      	adds	r7, r7, r5
   117ca:	0c34      	lsrs	r4, r6, #16
   117cc:	19e4      	adds	r4, r4, r7
   117ce:	469c      	mov	ip, r3
   117d0:	42a5      	cmp	r5, r4
   117d2:	d903      	bls.n	117dc <__aeabi_lmul+0x34>
   117d4:	2380      	movs	r3, #128	; 0x80
   117d6:	025b      	lsls	r3, r3, #9
   117d8:	4698      	mov	r8, r3
   117da:	44c4      	add	ip, r8
   117dc:	464b      	mov	r3, r9
   117de:	4351      	muls	r1, r2
   117e0:	4343      	muls	r3, r0
   117e2:	0436      	lsls	r6, r6, #16
   117e4:	0c36      	lsrs	r6, r6, #16
   117e6:	0c25      	lsrs	r5, r4, #16
   117e8:	0424      	lsls	r4, r4, #16
   117ea:	4465      	add	r5, ip
   117ec:	19a4      	adds	r4, r4, r6
   117ee:	1859      	adds	r1, r3, r1
   117f0:	1949      	adds	r1, r1, r5
   117f2:	0020      	movs	r0, r4
   117f4:	bc0c      	pop	{r2, r3}
   117f6:	4690      	mov	r8, r2
   117f8:	4699      	mov	r9, r3
   117fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000117fc <__aeabi_fdiv>:
   117fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117fe:	4657      	mov	r7, sl
   11800:	464e      	mov	r6, r9
   11802:	46de      	mov	lr, fp
   11804:	4645      	mov	r5, r8
   11806:	b5e0      	push	{r5, r6, r7, lr}
   11808:	0244      	lsls	r4, r0, #9
   1180a:	0043      	lsls	r3, r0, #1
   1180c:	0fc6      	lsrs	r6, r0, #31
   1180e:	b083      	sub	sp, #12
   11810:	1c0f      	adds	r7, r1, #0
   11812:	0a64      	lsrs	r4, r4, #9
   11814:	0e1b      	lsrs	r3, r3, #24
   11816:	46b2      	mov	sl, r6
   11818:	d053      	beq.n	118c2 <__aeabi_fdiv+0xc6>
   1181a:	2bff      	cmp	r3, #255	; 0xff
   1181c:	d027      	beq.n	1186e <__aeabi_fdiv+0x72>
   1181e:	2280      	movs	r2, #128	; 0x80
   11820:	00e4      	lsls	r4, r4, #3
   11822:	04d2      	lsls	r2, r2, #19
   11824:	4314      	orrs	r4, r2
   11826:	227f      	movs	r2, #127	; 0x7f
   11828:	4252      	negs	r2, r2
   1182a:	4690      	mov	r8, r2
   1182c:	4498      	add	r8, r3
   1182e:	2300      	movs	r3, #0
   11830:	4699      	mov	r9, r3
   11832:	469b      	mov	fp, r3
   11834:	027d      	lsls	r5, r7, #9
   11836:	0078      	lsls	r0, r7, #1
   11838:	0ffb      	lsrs	r3, r7, #31
   1183a:	0a6d      	lsrs	r5, r5, #9
   1183c:	0e00      	lsrs	r0, r0, #24
   1183e:	9300      	str	r3, [sp, #0]
   11840:	d024      	beq.n	1188c <__aeabi_fdiv+0x90>
   11842:	28ff      	cmp	r0, #255	; 0xff
   11844:	d046      	beq.n	118d4 <__aeabi_fdiv+0xd8>
   11846:	2380      	movs	r3, #128	; 0x80
   11848:	2100      	movs	r1, #0
   1184a:	00ed      	lsls	r5, r5, #3
   1184c:	04db      	lsls	r3, r3, #19
   1184e:	431d      	orrs	r5, r3
   11850:	387f      	subs	r0, #127	; 0x7f
   11852:	4647      	mov	r7, r8
   11854:	1a38      	subs	r0, r7, r0
   11856:	464f      	mov	r7, r9
   11858:	430f      	orrs	r7, r1
   1185a:	00bf      	lsls	r7, r7, #2
   1185c:	46b9      	mov	r9, r7
   1185e:	0033      	movs	r3, r6
   11860:	9a00      	ldr	r2, [sp, #0]
   11862:	4f87      	ldr	r7, [pc, #540]	; (11a80 <__aeabi_fdiv+0x284>)
   11864:	4053      	eors	r3, r2
   11866:	464a      	mov	r2, r9
   11868:	58ba      	ldr	r2, [r7, r2]
   1186a:	9301      	str	r3, [sp, #4]
   1186c:	4697      	mov	pc, r2
   1186e:	2c00      	cmp	r4, #0
   11870:	d14e      	bne.n	11910 <__aeabi_fdiv+0x114>
   11872:	2308      	movs	r3, #8
   11874:	4699      	mov	r9, r3
   11876:	33f7      	adds	r3, #247	; 0xf7
   11878:	4698      	mov	r8, r3
   1187a:	3bfd      	subs	r3, #253	; 0xfd
   1187c:	469b      	mov	fp, r3
   1187e:	027d      	lsls	r5, r7, #9
   11880:	0078      	lsls	r0, r7, #1
   11882:	0ffb      	lsrs	r3, r7, #31
   11884:	0a6d      	lsrs	r5, r5, #9
   11886:	0e00      	lsrs	r0, r0, #24
   11888:	9300      	str	r3, [sp, #0]
   1188a:	d1da      	bne.n	11842 <__aeabi_fdiv+0x46>
   1188c:	2d00      	cmp	r5, #0
   1188e:	d126      	bne.n	118de <__aeabi_fdiv+0xe2>
   11890:	2000      	movs	r0, #0
   11892:	2101      	movs	r1, #1
   11894:	0033      	movs	r3, r6
   11896:	9a00      	ldr	r2, [sp, #0]
   11898:	4f7a      	ldr	r7, [pc, #488]	; (11a84 <__aeabi_fdiv+0x288>)
   1189a:	4053      	eors	r3, r2
   1189c:	4642      	mov	r2, r8
   1189e:	1a10      	subs	r0, r2, r0
   118a0:	464a      	mov	r2, r9
   118a2:	430a      	orrs	r2, r1
   118a4:	0092      	lsls	r2, r2, #2
   118a6:	58ba      	ldr	r2, [r7, r2]
   118a8:	001d      	movs	r5, r3
   118aa:	4697      	mov	pc, r2
   118ac:	9b00      	ldr	r3, [sp, #0]
   118ae:	002c      	movs	r4, r5
   118b0:	469a      	mov	sl, r3
   118b2:	468b      	mov	fp, r1
   118b4:	465b      	mov	r3, fp
   118b6:	2b02      	cmp	r3, #2
   118b8:	d131      	bne.n	1191e <__aeabi_fdiv+0x122>
   118ba:	4653      	mov	r3, sl
   118bc:	21ff      	movs	r1, #255	; 0xff
   118be:	2400      	movs	r4, #0
   118c0:	e038      	b.n	11934 <__aeabi_fdiv+0x138>
   118c2:	2c00      	cmp	r4, #0
   118c4:	d117      	bne.n	118f6 <__aeabi_fdiv+0xfa>
   118c6:	2304      	movs	r3, #4
   118c8:	4699      	mov	r9, r3
   118ca:	2300      	movs	r3, #0
   118cc:	4698      	mov	r8, r3
   118ce:	3301      	adds	r3, #1
   118d0:	469b      	mov	fp, r3
   118d2:	e7af      	b.n	11834 <__aeabi_fdiv+0x38>
   118d4:	20ff      	movs	r0, #255	; 0xff
   118d6:	2d00      	cmp	r5, #0
   118d8:	d10b      	bne.n	118f2 <__aeabi_fdiv+0xf6>
   118da:	2102      	movs	r1, #2
   118dc:	e7da      	b.n	11894 <__aeabi_fdiv+0x98>
   118de:	0028      	movs	r0, r5
   118e0:	f002 f83e 	bl	13960 <__clzsi2>
   118e4:	1f43      	subs	r3, r0, #5
   118e6:	409d      	lsls	r5, r3
   118e8:	2376      	movs	r3, #118	; 0x76
   118ea:	425b      	negs	r3, r3
   118ec:	1a18      	subs	r0, r3, r0
   118ee:	2100      	movs	r1, #0
   118f0:	e7af      	b.n	11852 <__aeabi_fdiv+0x56>
   118f2:	2103      	movs	r1, #3
   118f4:	e7ad      	b.n	11852 <__aeabi_fdiv+0x56>
   118f6:	0020      	movs	r0, r4
   118f8:	f002 f832 	bl	13960 <__clzsi2>
   118fc:	1f43      	subs	r3, r0, #5
   118fe:	409c      	lsls	r4, r3
   11900:	2376      	movs	r3, #118	; 0x76
   11902:	425b      	negs	r3, r3
   11904:	1a1b      	subs	r3, r3, r0
   11906:	4698      	mov	r8, r3
   11908:	2300      	movs	r3, #0
   1190a:	4699      	mov	r9, r3
   1190c:	469b      	mov	fp, r3
   1190e:	e791      	b.n	11834 <__aeabi_fdiv+0x38>
   11910:	230c      	movs	r3, #12
   11912:	4699      	mov	r9, r3
   11914:	33f3      	adds	r3, #243	; 0xf3
   11916:	4698      	mov	r8, r3
   11918:	3bfc      	subs	r3, #252	; 0xfc
   1191a:	469b      	mov	fp, r3
   1191c:	e78a      	b.n	11834 <__aeabi_fdiv+0x38>
   1191e:	2b03      	cmp	r3, #3
   11920:	d100      	bne.n	11924 <__aeabi_fdiv+0x128>
   11922:	e0a5      	b.n	11a70 <__aeabi_fdiv+0x274>
   11924:	4655      	mov	r5, sl
   11926:	2b01      	cmp	r3, #1
   11928:	d000      	beq.n	1192c <__aeabi_fdiv+0x130>
   1192a:	e081      	b.n	11a30 <__aeabi_fdiv+0x234>
   1192c:	2301      	movs	r3, #1
   1192e:	2100      	movs	r1, #0
   11930:	2400      	movs	r4, #0
   11932:	402b      	ands	r3, r5
   11934:	0264      	lsls	r4, r4, #9
   11936:	05c9      	lsls	r1, r1, #23
   11938:	0a60      	lsrs	r0, r4, #9
   1193a:	07db      	lsls	r3, r3, #31
   1193c:	4308      	orrs	r0, r1
   1193e:	4318      	orrs	r0, r3
   11940:	b003      	add	sp, #12
   11942:	bc3c      	pop	{r2, r3, r4, r5}
   11944:	4690      	mov	r8, r2
   11946:	4699      	mov	r9, r3
   11948:	46a2      	mov	sl, r4
   1194a:	46ab      	mov	fp, r5
   1194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1194e:	2480      	movs	r4, #128	; 0x80
   11950:	2300      	movs	r3, #0
   11952:	03e4      	lsls	r4, r4, #15
   11954:	21ff      	movs	r1, #255	; 0xff
   11956:	e7ed      	b.n	11934 <__aeabi_fdiv+0x138>
   11958:	21ff      	movs	r1, #255	; 0xff
   1195a:	2400      	movs	r4, #0
   1195c:	e7ea      	b.n	11934 <__aeabi_fdiv+0x138>
   1195e:	2301      	movs	r3, #1
   11960:	1a59      	subs	r1, r3, r1
   11962:	291b      	cmp	r1, #27
   11964:	dd66      	ble.n	11a34 <__aeabi_fdiv+0x238>
   11966:	9a01      	ldr	r2, [sp, #4]
   11968:	4013      	ands	r3, r2
   1196a:	2100      	movs	r1, #0
   1196c:	2400      	movs	r4, #0
   1196e:	e7e1      	b.n	11934 <__aeabi_fdiv+0x138>
   11970:	2380      	movs	r3, #128	; 0x80
   11972:	03db      	lsls	r3, r3, #15
   11974:	421c      	tst	r4, r3
   11976:	d038      	beq.n	119ea <__aeabi_fdiv+0x1ee>
   11978:	421d      	tst	r5, r3
   1197a:	d051      	beq.n	11a20 <__aeabi_fdiv+0x224>
   1197c:	431c      	orrs	r4, r3
   1197e:	0264      	lsls	r4, r4, #9
   11980:	0a64      	lsrs	r4, r4, #9
   11982:	0033      	movs	r3, r6
   11984:	21ff      	movs	r1, #255	; 0xff
   11986:	e7d5      	b.n	11934 <__aeabi_fdiv+0x138>
   11988:	0163      	lsls	r3, r4, #5
   1198a:	016c      	lsls	r4, r5, #5
   1198c:	42a3      	cmp	r3, r4
   1198e:	d23b      	bcs.n	11a08 <__aeabi_fdiv+0x20c>
   11990:	261b      	movs	r6, #27
   11992:	2100      	movs	r1, #0
   11994:	3801      	subs	r0, #1
   11996:	2501      	movs	r5, #1
   11998:	001f      	movs	r7, r3
   1199a:	0049      	lsls	r1, r1, #1
   1199c:	005b      	lsls	r3, r3, #1
   1199e:	2f00      	cmp	r7, #0
   119a0:	db01      	blt.n	119a6 <__aeabi_fdiv+0x1aa>
   119a2:	429c      	cmp	r4, r3
   119a4:	d801      	bhi.n	119aa <__aeabi_fdiv+0x1ae>
   119a6:	1b1b      	subs	r3, r3, r4
   119a8:	4329      	orrs	r1, r5
   119aa:	3e01      	subs	r6, #1
   119ac:	2e00      	cmp	r6, #0
   119ae:	d1f3      	bne.n	11998 <__aeabi_fdiv+0x19c>
   119b0:	001c      	movs	r4, r3
   119b2:	1e63      	subs	r3, r4, #1
   119b4:	419c      	sbcs	r4, r3
   119b6:	430c      	orrs	r4, r1
   119b8:	0001      	movs	r1, r0
   119ba:	317f      	adds	r1, #127	; 0x7f
   119bc:	2900      	cmp	r1, #0
   119be:	ddce      	ble.n	1195e <__aeabi_fdiv+0x162>
   119c0:	0763      	lsls	r3, r4, #29
   119c2:	d004      	beq.n	119ce <__aeabi_fdiv+0x1d2>
   119c4:	230f      	movs	r3, #15
   119c6:	4023      	ands	r3, r4
   119c8:	2b04      	cmp	r3, #4
   119ca:	d000      	beq.n	119ce <__aeabi_fdiv+0x1d2>
   119cc:	3404      	adds	r4, #4
   119ce:	0123      	lsls	r3, r4, #4
   119d0:	d503      	bpl.n	119da <__aeabi_fdiv+0x1de>
   119d2:	0001      	movs	r1, r0
   119d4:	4b2c      	ldr	r3, [pc, #176]	; (11a88 <__aeabi_fdiv+0x28c>)
   119d6:	3180      	adds	r1, #128	; 0x80
   119d8:	401c      	ands	r4, r3
   119da:	29fe      	cmp	r1, #254	; 0xfe
   119dc:	dd0d      	ble.n	119fa <__aeabi_fdiv+0x1fe>
   119de:	2301      	movs	r3, #1
   119e0:	9a01      	ldr	r2, [sp, #4]
   119e2:	21ff      	movs	r1, #255	; 0xff
   119e4:	4013      	ands	r3, r2
   119e6:	2400      	movs	r4, #0
   119e8:	e7a4      	b.n	11934 <__aeabi_fdiv+0x138>
   119ea:	2380      	movs	r3, #128	; 0x80
   119ec:	03db      	lsls	r3, r3, #15
   119ee:	431c      	orrs	r4, r3
   119f0:	0264      	lsls	r4, r4, #9
   119f2:	0a64      	lsrs	r4, r4, #9
   119f4:	0033      	movs	r3, r6
   119f6:	21ff      	movs	r1, #255	; 0xff
   119f8:	e79c      	b.n	11934 <__aeabi_fdiv+0x138>
   119fa:	2301      	movs	r3, #1
   119fc:	9a01      	ldr	r2, [sp, #4]
   119fe:	01a4      	lsls	r4, r4, #6
   11a00:	0a64      	lsrs	r4, r4, #9
   11a02:	b2c9      	uxtb	r1, r1
   11a04:	4013      	ands	r3, r2
   11a06:	e795      	b.n	11934 <__aeabi_fdiv+0x138>
   11a08:	1b1b      	subs	r3, r3, r4
   11a0a:	261a      	movs	r6, #26
   11a0c:	2101      	movs	r1, #1
   11a0e:	e7c2      	b.n	11996 <__aeabi_fdiv+0x19a>
   11a10:	9b00      	ldr	r3, [sp, #0]
   11a12:	468b      	mov	fp, r1
   11a14:	469a      	mov	sl, r3
   11a16:	2400      	movs	r4, #0
   11a18:	e74c      	b.n	118b4 <__aeabi_fdiv+0xb8>
   11a1a:	0263      	lsls	r3, r4, #9
   11a1c:	d5e5      	bpl.n	119ea <__aeabi_fdiv+0x1ee>
   11a1e:	2500      	movs	r5, #0
   11a20:	2480      	movs	r4, #128	; 0x80
   11a22:	03e4      	lsls	r4, r4, #15
   11a24:	432c      	orrs	r4, r5
   11a26:	0264      	lsls	r4, r4, #9
   11a28:	0a64      	lsrs	r4, r4, #9
   11a2a:	9b00      	ldr	r3, [sp, #0]
   11a2c:	21ff      	movs	r1, #255	; 0xff
   11a2e:	e781      	b.n	11934 <__aeabi_fdiv+0x138>
   11a30:	9501      	str	r5, [sp, #4]
   11a32:	e7c1      	b.n	119b8 <__aeabi_fdiv+0x1bc>
   11a34:	0023      	movs	r3, r4
   11a36:	2020      	movs	r0, #32
   11a38:	40cb      	lsrs	r3, r1
   11a3a:	1a41      	subs	r1, r0, r1
   11a3c:	408c      	lsls	r4, r1
   11a3e:	1e61      	subs	r1, r4, #1
   11a40:	418c      	sbcs	r4, r1
   11a42:	431c      	orrs	r4, r3
   11a44:	0763      	lsls	r3, r4, #29
   11a46:	d004      	beq.n	11a52 <__aeabi_fdiv+0x256>
   11a48:	230f      	movs	r3, #15
   11a4a:	4023      	ands	r3, r4
   11a4c:	2b04      	cmp	r3, #4
   11a4e:	d000      	beq.n	11a52 <__aeabi_fdiv+0x256>
   11a50:	3404      	adds	r4, #4
   11a52:	0163      	lsls	r3, r4, #5
   11a54:	d505      	bpl.n	11a62 <__aeabi_fdiv+0x266>
   11a56:	2301      	movs	r3, #1
   11a58:	9a01      	ldr	r2, [sp, #4]
   11a5a:	2101      	movs	r1, #1
   11a5c:	4013      	ands	r3, r2
   11a5e:	2400      	movs	r4, #0
   11a60:	e768      	b.n	11934 <__aeabi_fdiv+0x138>
   11a62:	2301      	movs	r3, #1
   11a64:	9a01      	ldr	r2, [sp, #4]
   11a66:	01a4      	lsls	r4, r4, #6
   11a68:	0a64      	lsrs	r4, r4, #9
   11a6a:	4013      	ands	r3, r2
   11a6c:	2100      	movs	r1, #0
   11a6e:	e761      	b.n	11934 <__aeabi_fdiv+0x138>
   11a70:	2380      	movs	r3, #128	; 0x80
   11a72:	03db      	lsls	r3, r3, #15
   11a74:	431c      	orrs	r4, r3
   11a76:	0264      	lsls	r4, r4, #9
   11a78:	0a64      	lsrs	r4, r4, #9
   11a7a:	4653      	mov	r3, sl
   11a7c:	21ff      	movs	r1, #255	; 0xff
   11a7e:	e759      	b.n	11934 <__aeabi_fdiv+0x138>
   11a80:	00015368 	.word	0x00015368
   11a84:	000153a8 	.word	0x000153a8
   11a88:	f7ffffff 	.word	0xf7ffffff

00011a8c <__aeabi_fmul>:
   11a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a8e:	4657      	mov	r7, sl
   11a90:	464e      	mov	r6, r9
   11a92:	4645      	mov	r5, r8
   11a94:	46de      	mov	lr, fp
   11a96:	b5e0      	push	{r5, r6, r7, lr}
   11a98:	0247      	lsls	r7, r0, #9
   11a9a:	0046      	lsls	r6, r0, #1
   11a9c:	4688      	mov	r8, r1
   11a9e:	0a7f      	lsrs	r7, r7, #9
   11aa0:	0e36      	lsrs	r6, r6, #24
   11aa2:	0fc4      	lsrs	r4, r0, #31
   11aa4:	2e00      	cmp	r6, #0
   11aa6:	d047      	beq.n	11b38 <__aeabi_fmul+0xac>
   11aa8:	2eff      	cmp	r6, #255	; 0xff
   11aaa:	d024      	beq.n	11af6 <__aeabi_fmul+0x6a>
   11aac:	00fb      	lsls	r3, r7, #3
   11aae:	2780      	movs	r7, #128	; 0x80
   11ab0:	04ff      	lsls	r7, r7, #19
   11ab2:	431f      	orrs	r7, r3
   11ab4:	2300      	movs	r3, #0
   11ab6:	4699      	mov	r9, r3
   11ab8:	469a      	mov	sl, r3
   11aba:	3e7f      	subs	r6, #127	; 0x7f
   11abc:	4643      	mov	r3, r8
   11abe:	025d      	lsls	r5, r3, #9
   11ac0:	0058      	lsls	r0, r3, #1
   11ac2:	0fdb      	lsrs	r3, r3, #31
   11ac4:	0a6d      	lsrs	r5, r5, #9
   11ac6:	0e00      	lsrs	r0, r0, #24
   11ac8:	4698      	mov	r8, r3
   11aca:	d043      	beq.n	11b54 <__aeabi_fmul+0xc8>
   11acc:	28ff      	cmp	r0, #255	; 0xff
   11ace:	d03b      	beq.n	11b48 <__aeabi_fmul+0xbc>
   11ad0:	00eb      	lsls	r3, r5, #3
   11ad2:	2580      	movs	r5, #128	; 0x80
   11ad4:	2200      	movs	r2, #0
   11ad6:	04ed      	lsls	r5, r5, #19
   11ad8:	431d      	orrs	r5, r3
   11ada:	387f      	subs	r0, #127	; 0x7f
   11adc:	1836      	adds	r6, r6, r0
   11ade:	1c73      	adds	r3, r6, #1
   11ae0:	4641      	mov	r1, r8
   11ae2:	469b      	mov	fp, r3
   11ae4:	464b      	mov	r3, r9
   11ae6:	4061      	eors	r1, r4
   11ae8:	4313      	orrs	r3, r2
   11aea:	2b0f      	cmp	r3, #15
   11aec:	d864      	bhi.n	11bb8 <__aeabi_fmul+0x12c>
   11aee:	4875      	ldr	r0, [pc, #468]	; (11cc4 <__aeabi_fmul+0x238>)
   11af0:	009b      	lsls	r3, r3, #2
   11af2:	58c3      	ldr	r3, [r0, r3]
   11af4:	469f      	mov	pc, r3
   11af6:	2f00      	cmp	r7, #0
   11af8:	d142      	bne.n	11b80 <__aeabi_fmul+0xf4>
   11afa:	2308      	movs	r3, #8
   11afc:	4699      	mov	r9, r3
   11afe:	3b06      	subs	r3, #6
   11b00:	26ff      	movs	r6, #255	; 0xff
   11b02:	469a      	mov	sl, r3
   11b04:	e7da      	b.n	11abc <__aeabi_fmul+0x30>
   11b06:	4641      	mov	r1, r8
   11b08:	2a02      	cmp	r2, #2
   11b0a:	d028      	beq.n	11b5e <__aeabi_fmul+0xd2>
   11b0c:	2a03      	cmp	r2, #3
   11b0e:	d100      	bne.n	11b12 <__aeabi_fmul+0x86>
   11b10:	e0ce      	b.n	11cb0 <__aeabi_fmul+0x224>
   11b12:	2a01      	cmp	r2, #1
   11b14:	d000      	beq.n	11b18 <__aeabi_fmul+0x8c>
   11b16:	e0ac      	b.n	11c72 <__aeabi_fmul+0x1e6>
   11b18:	4011      	ands	r1, r2
   11b1a:	2000      	movs	r0, #0
   11b1c:	2200      	movs	r2, #0
   11b1e:	b2cc      	uxtb	r4, r1
   11b20:	0240      	lsls	r0, r0, #9
   11b22:	05d2      	lsls	r2, r2, #23
   11b24:	0a40      	lsrs	r0, r0, #9
   11b26:	07e4      	lsls	r4, r4, #31
   11b28:	4310      	orrs	r0, r2
   11b2a:	4320      	orrs	r0, r4
   11b2c:	bc3c      	pop	{r2, r3, r4, r5}
   11b2e:	4690      	mov	r8, r2
   11b30:	4699      	mov	r9, r3
   11b32:	46a2      	mov	sl, r4
   11b34:	46ab      	mov	fp, r5
   11b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b38:	2f00      	cmp	r7, #0
   11b3a:	d115      	bne.n	11b68 <__aeabi_fmul+0xdc>
   11b3c:	2304      	movs	r3, #4
   11b3e:	4699      	mov	r9, r3
   11b40:	3b03      	subs	r3, #3
   11b42:	2600      	movs	r6, #0
   11b44:	469a      	mov	sl, r3
   11b46:	e7b9      	b.n	11abc <__aeabi_fmul+0x30>
   11b48:	20ff      	movs	r0, #255	; 0xff
   11b4a:	2202      	movs	r2, #2
   11b4c:	2d00      	cmp	r5, #0
   11b4e:	d0c5      	beq.n	11adc <__aeabi_fmul+0x50>
   11b50:	2203      	movs	r2, #3
   11b52:	e7c3      	b.n	11adc <__aeabi_fmul+0x50>
   11b54:	2d00      	cmp	r5, #0
   11b56:	d119      	bne.n	11b8c <__aeabi_fmul+0x100>
   11b58:	2000      	movs	r0, #0
   11b5a:	2201      	movs	r2, #1
   11b5c:	e7be      	b.n	11adc <__aeabi_fmul+0x50>
   11b5e:	2401      	movs	r4, #1
   11b60:	22ff      	movs	r2, #255	; 0xff
   11b62:	400c      	ands	r4, r1
   11b64:	2000      	movs	r0, #0
   11b66:	e7db      	b.n	11b20 <__aeabi_fmul+0x94>
   11b68:	0038      	movs	r0, r7
   11b6a:	f001 fef9 	bl	13960 <__clzsi2>
   11b6e:	2676      	movs	r6, #118	; 0x76
   11b70:	1f43      	subs	r3, r0, #5
   11b72:	409f      	lsls	r7, r3
   11b74:	2300      	movs	r3, #0
   11b76:	4276      	negs	r6, r6
   11b78:	1a36      	subs	r6, r6, r0
   11b7a:	4699      	mov	r9, r3
   11b7c:	469a      	mov	sl, r3
   11b7e:	e79d      	b.n	11abc <__aeabi_fmul+0x30>
   11b80:	230c      	movs	r3, #12
   11b82:	4699      	mov	r9, r3
   11b84:	3b09      	subs	r3, #9
   11b86:	26ff      	movs	r6, #255	; 0xff
   11b88:	469a      	mov	sl, r3
   11b8a:	e797      	b.n	11abc <__aeabi_fmul+0x30>
   11b8c:	0028      	movs	r0, r5
   11b8e:	f001 fee7 	bl	13960 <__clzsi2>
   11b92:	1f43      	subs	r3, r0, #5
   11b94:	409d      	lsls	r5, r3
   11b96:	2376      	movs	r3, #118	; 0x76
   11b98:	425b      	negs	r3, r3
   11b9a:	1a18      	subs	r0, r3, r0
   11b9c:	2200      	movs	r2, #0
   11b9e:	e79d      	b.n	11adc <__aeabi_fmul+0x50>
   11ba0:	2080      	movs	r0, #128	; 0x80
   11ba2:	2400      	movs	r4, #0
   11ba4:	03c0      	lsls	r0, r0, #15
   11ba6:	22ff      	movs	r2, #255	; 0xff
   11ba8:	e7ba      	b.n	11b20 <__aeabi_fmul+0x94>
   11baa:	003d      	movs	r5, r7
   11bac:	4652      	mov	r2, sl
   11bae:	e7ab      	b.n	11b08 <__aeabi_fmul+0x7c>
   11bb0:	003d      	movs	r5, r7
   11bb2:	0021      	movs	r1, r4
   11bb4:	4652      	mov	r2, sl
   11bb6:	e7a7      	b.n	11b08 <__aeabi_fmul+0x7c>
   11bb8:	0c3b      	lsrs	r3, r7, #16
   11bba:	469c      	mov	ip, r3
   11bbc:	042a      	lsls	r2, r5, #16
   11bbe:	0c12      	lsrs	r2, r2, #16
   11bc0:	0c2b      	lsrs	r3, r5, #16
   11bc2:	0014      	movs	r4, r2
   11bc4:	4660      	mov	r0, ip
   11bc6:	4665      	mov	r5, ip
   11bc8:	043f      	lsls	r7, r7, #16
   11bca:	0c3f      	lsrs	r7, r7, #16
   11bcc:	437c      	muls	r4, r7
   11bce:	4342      	muls	r2, r0
   11bd0:	435d      	muls	r5, r3
   11bd2:	437b      	muls	r3, r7
   11bd4:	0c27      	lsrs	r7, r4, #16
   11bd6:	189b      	adds	r3, r3, r2
   11bd8:	18ff      	adds	r7, r7, r3
   11bda:	42ba      	cmp	r2, r7
   11bdc:	d903      	bls.n	11be6 <__aeabi_fmul+0x15a>
   11bde:	2380      	movs	r3, #128	; 0x80
   11be0:	025b      	lsls	r3, r3, #9
   11be2:	469c      	mov	ip, r3
   11be4:	4465      	add	r5, ip
   11be6:	0424      	lsls	r4, r4, #16
   11be8:	043a      	lsls	r2, r7, #16
   11bea:	0c24      	lsrs	r4, r4, #16
   11bec:	1912      	adds	r2, r2, r4
   11bee:	0193      	lsls	r3, r2, #6
   11bf0:	1e5c      	subs	r4, r3, #1
   11bf2:	41a3      	sbcs	r3, r4
   11bf4:	0c3f      	lsrs	r7, r7, #16
   11bf6:	0e92      	lsrs	r2, r2, #26
   11bf8:	197d      	adds	r5, r7, r5
   11bfa:	431a      	orrs	r2, r3
   11bfc:	01ad      	lsls	r5, r5, #6
   11bfe:	4315      	orrs	r5, r2
   11c00:	012b      	lsls	r3, r5, #4
   11c02:	d504      	bpl.n	11c0e <__aeabi_fmul+0x182>
   11c04:	2301      	movs	r3, #1
   11c06:	465e      	mov	r6, fp
   11c08:	086a      	lsrs	r2, r5, #1
   11c0a:	401d      	ands	r5, r3
   11c0c:	4315      	orrs	r5, r2
   11c0e:	0032      	movs	r2, r6
   11c10:	327f      	adds	r2, #127	; 0x7f
   11c12:	2a00      	cmp	r2, #0
   11c14:	dd25      	ble.n	11c62 <__aeabi_fmul+0x1d6>
   11c16:	076b      	lsls	r3, r5, #29
   11c18:	d004      	beq.n	11c24 <__aeabi_fmul+0x198>
   11c1a:	230f      	movs	r3, #15
   11c1c:	402b      	ands	r3, r5
   11c1e:	2b04      	cmp	r3, #4
   11c20:	d000      	beq.n	11c24 <__aeabi_fmul+0x198>
   11c22:	3504      	adds	r5, #4
   11c24:	012b      	lsls	r3, r5, #4
   11c26:	d503      	bpl.n	11c30 <__aeabi_fmul+0x1a4>
   11c28:	0032      	movs	r2, r6
   11c2a:	4b27      	ldr	r3, [pc, #156]	; (11cc8 <__aeabi_fmul+0x23c>)
   11c2c:	3280      	adds	r2, #128	; 0x80
   11c2e:	401d      	ands	r5, r3
   11c30:	2afe      	cmp	r2, #254	; 0xfe
   11c32:	dc94      	bgt.n	11b5e <__aeabi_fmul+0xd2>
   11c34:	2401      	movs	r4, #1
   11c36:	01a8      	lsls	r0, r5, #6
   11c38:	0a40      	lsrs	r0, r0, #9
   11c3a:	b2d2      	uxtb	r2, r2
   11c3c:	400c      	ands	r4, r1
   11c3e:	e76f      	b.n	11b20 <__aeabi_fmul+0x94>
   11c40:	2080      	movs	r0, #128	; 0x80
   11c42:	03c0      	lsls	r0, r0, #15
   11c44:	4207      	tst	r7, r0
   11c46:	d007      	beq.n	11c58 <__aeabi_fmul+0x1cc>
   11c48:	4205      	tst	r5, r0
   11c4a:	d105      	bne.n	11c58 <__aeabi_fmul+0x1cc>
   11c4c:	4328      	orrs	r0, r5
   11c4e:	0240      	lsls	r0, r0, #9
   11c50:	0a40      	lsrs	r0, r0, #9
   11c52:	4644      	mov	r4, r8
   11c54:	22ff      	movs	r2, #255	; 0xff
   11c56:	e763      	b.n	11b20 <__aeabi_fmul+0x94>
   11c58:	4338      	orrs	r0, r7
   11c5a:	0240      	lsls	r0, r0, #9
   11c5c:	0a40      	lsrs	r0, r0, #9
   11c5e:	22ff      	movs	r2, #255	; 0xff
   11c60:	e75e      	b.n	11b20 <__aeabi_fmul+0x94>
   11c62:	2401      	movs	r4, #1
   11c64:	1aa3      	subs	r3, r4, r2
   11c66:	2b1b      	cmp	r3, #27
   11c68:	dd05      	ble.n	11c76 <__aeabi_fmul+0x1ea>
   11c6a:	400c      	ands	r4, r1
   11c6c:	2200      	movs	r2, #0
   11c6e:	2000      	movs	r0, #0
   11c70:	e756      	b.n	11b20 <__aeabi_fmul+0x94>
   11c72:	465e      	mov	r6, fp
   11c74:	e7cb      	b.n	11c0e <__aeabi_fmul+0x182>
   11c76:	002a      	movs	r2, r5
   11c78:	2020      	movs	r0, #32
   11c7a:	40da      	lsrs	r2, r3
   11c7c:	1ac3      	subs	r3, r0, r3
   11c7e:	409d      	lsls	r5, r3
   11c80:	002b      	movs	r3, r5
   11c82:	1e5d      	subs	r5, r3, #1
   11c84:	41ab      	sbcs	r3, r5
   11c86:	4313      	orrs	r3, r2
   11c88:	075a      	lsls	r2, r3, #29
   11c8a:	d004      	beq.n	11c96 <__aeabi_fmul+0x20a>
   11c8c:	220f      	movs	r2, #15
   11c8e:	401a      	ands	r2, r3
   11c90:	2a04      	cmp	r2, #4
   11c92:	d000      	beq.n	11c96 <__aeabi_fmul+0x20a>
   11c94:	3304      	adds	r3, #4
   11c96:	015a      	lsls	r2, r3, #5
   11c98:	d504      	bpl.n	11ca4 <__aeabi_fmul+0x218>
   11c9a:	2401      	movs	r4, #1
   11c9c:	2201      	movs	r2, #1
   11c9e:	400c      	ands	r4, r1
   11ca0:	2000      	movs	r0, #0
   11ca2:	e73d      	b.n	11b20 <__aeabi_fmul+0x94>
   11ca4:	2401      	movs	r4, #1
   11ca6:	019b      	lsls	r3, r3, #6
   11ca8:	0a58      	lsrs	r0, r3, #9
   11caa:	400c      	ands	r4, r1
   11cac:	2200      	movs	r2, #0
   11cae:	e737      	b.n	11b20 <__aeabi_fmul+0x94>
   11cb0:	2080      	movs	r0, #128	; 0x80
   11cb2:	2401      	movs	r4, #1
   11cb4:	03c0      	lsls	r0, r0, #15
   11cb6:	4328      	orrs	r0, r5
   11cb8:	0240      	lsls	r0, r0, #9
   11cba:	0a40      	lsrs	r0, r0, #9
   11cbc:	400c      	ands	r4, r1
   11cbe:	22ff      	movs	r2, #255	; 0xff
   11cc0:	e72e      	b.n	11b20 <__aeabi_fmul+0x94>
   11cc2:	46c0      	nop			; (mov r8, r8)
   11cc4:	000153e8 	.word	0x000153e8
   11cc8:	f7ffffff 	.word	0xf7ffffff

00011ccc <__aeabi_i2f>:
   11ccc:	b570      	push	{r4, r5, r6, lr}
   11cce:	2800      	cmp	r0, #0
   11cd0:	d030      	beq.n	11d34 <__aeabi_i2f+0x68>
   11cd2:	17c3      	asrs	r3, r0, #31
   11cd4:	18c4      	adds	r4, r0, r3
   11cd6:	405c      	eors	r4, r3
   11cd8:	0fc5      	lsrs	r5, r0, #31
   11cda:	0020      	movs	r0, r4
   11cdc:	f001 fe40 	bl	13960 <__clzsi2>
   11ce0:	239e      	movs	r3, #158	; 0x9e
   11ce2:	1a1b      	subs	r3, r3, r0
   11ce4:	2b96      	cmp	r3, #150	; 0x96
   11ce6:	dc0d      	bgt.n	11d04 <__aeabi_i2f+0x38>
   11ce8:	2296      	movs	r2, #150	; 0x96
   11cea:	1ad2      	subs	r2, r2, r3
   11cec:	4094      	lsls	r4, r2
   11cee:	002a      	movs	r2, r5
   11cf0:	0264      	lsls	r4, r4, #9
   11cf2:	0a64      	lsrs	r4, r4, #9
   11cf4:	b2db      	uxtb	r3, r3
   11cf6:	0264      	lsls	r4, r4, #9
   11cf8:	05db      	lsls	r3, r3, #23
   11cfa:	0a60      	lsrs	r0, r4, #9
   11cfc:	07d2      	lsls	r2, r2, #31
   11cfe:	4318      	orrs	r0, r3
   11d00:	4310      	orrs	r0, r2
   11d02:	bd70      	pop	{r4, r5, r6, pc}
   11d04:	2b99      	cmp	r3, #153	; 0x99
   11d06:	dc19      	bgt.n	11d3c <__aeabi_i2f+0x70>
   11d08:	2299      	movs	r2, #153	; 0x99
   11d0a:	1ad2      	subs	r2, r2, r3
   11d0c:	2a00      	cmp	r2, #0
   11d0e:	dd29      	ble.n	11d64 <__aeabi_i2f+0x98>
   11d10:	4094      	lsls	r4, r2
   11d12:	0022      	movs	r2, r4
   11d14:	4c14      	ldr	r4, [pc, #80]	; (11d68 <__aeabi_i2f+0x9c>)
   11d16:	4014      	ands	r4, r2
   11d18:	0751      	lsls	r1, r2, #29
   11d1a:	d004      	beq.n	11d26 <__aeabi_i2f+0x5a>
   11d1c:	210f      	movs	r1, #15
   11d1e:	400a      	ands	r2, r1
   11d20:	2a04      	cmp	r2, #4
   11d22:	d000      	beq.n	11d26 <__aeabi_i2f+0x5a>
   11d24:	3404      	adds	r4, #4
   11d26:	0162      	lsls	r2, r4, #5
   11d28:	d413      	bmi.n	11d52 <__aeabi_i2f+0x86>
   11d2a:	01a4      	lsls	r4, r4, #6
   11d2c:	0a64      	lsrs	r4, r4, #9
   11d2e:	b2db      	uxtb	r3, r3
   11d30:	002a      	movs	r2, r5
   11d32:	e7e0      	b.n	11cf6 <__aeabi_i2f+0x2a>
   11d34:	2200      	movs	r2, #0
   11d36:	2300      	movs	r3, #0
   11d38:	2400      	movs	r4, #0
   11d3a:	e7dc      	b.n	11cf6 <__aeabi_i2f+0x2a>
   11d3c:	2205      	movs	r2, #5
   11d3e:	0021      	movs	r1, r4
   11d40:	1a12      	subs	r2, r2, r0
   11d42:	40d1      	lsrs	r1, r2
   11d44:	22b9      	movs	r2, #185	; 0xb9
   11d46:	1ad2      	subs	r2, r2, r3
   11d48:	4094      	lsls	r4, r2
   11d4a:	1e62      	subs	r2, r4, #1
   11d4c:	4194      	sbcs	r4, r2
   11d4e:	430c      	orrs	r4, r1
   11d50:	e7da      	b.n	11d08 <__aeabi_i2f+0x3c>
   11d52:	4b05      	ldr	r3, [pc, #20]	; (11d68 <__aeabi_i2f+0x9c>)
   11d54:	002a      	movs	r2, r5
   11d56:	401c      	ands	r4, r3
   11d58:	239f      	movs	r3, #159	; 0x9f
   11d5a:	01a4      	lsls	r4, r4, #6
   11d5c:	1a1b      	subs	r3, r3, r0
   11d5e:	0a64      	lsrs	r4, r4, #9
   11d60:	b2db      	uxtb	r3, r3
   11d62:	e7c8      	b.n	11cf6 <__aeabi_i2f+0x2a>
   11d64:	0022      	movs	r2, r4
   11d66:	e7d5      	b.n	11d14 <__aeabi_i2f+0x48>
   11d68:	fbffffff 	.word	0xfbffffff

00011d6c <__aeabi_dadd>:
   11d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d6e:	4645      	mov	r5, r8
   11d70:	46de      	mov	lr, fp
   11d72:	4657      	mov	r7, sl
   11d74:	464e      	mov	r6, r9
   11d76:	030c      	lsls	r4, r1, #12
   11d78:	b5e0      	push	{r5, r6, r7, lr}
   11d7a:	004e      	lsls	r6, r1, #1
   11d7c:	0fc9      	lsrs	r1, r1, #31
   11d7e:	4688      	mov	r8, r1
   11d80:	000d      	movs	r5, r1
   11d82:	0a61      	lsrs	r1, r4, #9
   11d84:	0f44      	lsrs	r4, r0, #29
   11d86:	430c      	orrs	r4, r1
   11d88:	00c7      	lsls	r7, r0, #3
   11d8a:	0319      	lsls	r1, r3, #12
   11d8c:	0058      	lsls	r0, r3, #1
   11d8e:	0fdb      	lsrs	r3, r3, #31
   11d90:	469b      	mov	fp, r3
   11d92:	0a4b      	lsrs	r3, r1, #9
   11d94:	0f51      	lsrs	r1, r2, #29
   11d96:	430b      	orrs	r3, r1
   11d98:	0d76      	lsrs	r6, r6, #21
   11d9a:	0d40      	lsrs	r0, r0, #21
   11d9c:	0019      	movs	r1, r3
   11d9e:	00d2      	lsls	r2, r2, #3
   11da0:	45d8      	cmp	r8, fp
   11da2:	d100      	bne.n	11da6 <__aeabi_dadd+0x3a>
   11da4:	e0ae      	b.n	11f04 <__aeabi_dadd+0x198>
   11da6:	1a35      	subs	r5, r6, r0
   11da8:	2d00      	cmp	r5, #0
   11daa:	dc00      	bgt.n	11dae <__aeabi_dadd+0x42>
   11dac:	e0f6      	b.n	11f9c <__aeabi_dadd+0x230>
   11dae:	2800      	cmp	r0, #0
   11db0:	d10f      	bne.n	11dd2 <__aeabi_dadd+0x66>
   11db2:	4313      	orrs	r3, r2
   11db4:	d100      	bne.n	11db8 <__aeabi_dadd+0x4c>
   11db6:	e0db      	b.n	11f70 <__aeabi_dadd+0x204>
   11db8:	1e6b      	subs	r3, r5, #1
   11dba:	2b00      	cmp	r3, #0
   11dbc:	d000      	beq.n	11dc0 <__aeabi_dadd+0x54>
   11dbe:	e137      	b.n	12030 <__aeabi_dadd+0x2c4>
   11dc0:	1aba      	subs	r2, r7, r2
   11dc2:	4297      	cmp	r7, r2
   11dc4:	41bf      	sbcs	r7, r7
   11dc6:	1a64      	subs	r4, r4, r1
   11dc8:	427f      	negs	r7, r7
   11dca:	1be4      	subs	r4, r4, r7
   11dcc:	2601      	movs	r6, #1
   11dce:	0017      	movs	r7, r2
   11dd0:	e024      	b.n	11e1c <__aeabi_dadd+0xb0>
   11dd2:	4bc6      	ldr	r3, [pc, #792]	; (120ec <__aeabi_dadd+0x380>)
   11dd4:	429e      	cmp	r6, r3
   11dd6:	d04d      	beq.n	11e74 <__aeabi_dadd+0x108>
   11dd8:	2380      	movs	r3, #128	; 0x80
   11dda:	041b      	lsls	r3, r3, #16
   11ddc:	4319      	orrs	r1, r3
   11dde:	2d38      	cmp	r5, #56	; 0x38
   11de0:	dd00      	ble.n	11de4 <__aeabi_dadd+0x78>
   11de2:	e107      	b.n	11ff4 <__aeabi_dadd+0x288>
   11de4:	2d1f      	cmp	r5, #31
   11de6:	dd00      	ble.n	11dea <__aeabi_dadd+0x7e>
   11de8:	e138      	b.n	1205c <__aeabi_dadd+0x2f0>
   11dea:	2020      	movs	r0, #32
   11dec:	1b43      	subs	r3, r0, r5
   11dee:	469a      	mov	sl, r3
   11df0:	000b      	movs	r3, r1
   11df2:	4650      	mov	r0, sl
   11df4:	4083      	lsls	r3, r0
   11df6:	4699      	mov	r9, r3
   11df8:	0013      	movs	r3, r2
   11dfa:	4648      	mov	r0, r9
   11dfc:	40eb      	lsrs	r3, r5
   11dfe:	4318      	orrs	r0, r3
   11e00:	0003      	movs	r3, r0
   11e02:	4650      	mov	r0, sl
   11e04:	4082      	lsls	r2, r0
   11e06:	1e50      	subs	r0, r2, #1
   11e08:	4182      	sbcs	r2, r0
   11e0a:	40e9      	lsrs	r1, r5
   11e0c:	431a      	orrs	r2, r3
   11e0e:	1aba      	subs	r2, r7, r2
   11e10:	1a61      	subs	r1, r4, r1
   11e12:	4297      	cmp	r7, r2
   11e14:	41a4      	sbcs	r4, r4
   11e16:	0017      	movs	r7, r2
   11e18:	4264      	negs	r4, r4
   11e1a:	1b0c      	subs	r4, r1, r4
   11e1c:	0223      	lsls	r3, r4, #8
   11e1e:	d562      	bpl.n	11ee6 <__aeabi_dadd+0x17a>
   11e20:	0264      	lsls	r4, r4, #9
   11e22:	0a65      	lsrs	r5, r4, #9
   11e24:	2d00      	cmp	r5, #0
   11e26:	d100      	bne.n	11e2a <__aeabi_dadd+0xbe>
   11e28:	e0df      	b.n	11fea <__aeabi_dadd+0x27e>
   11e2a:	0028      	movs	r0, r5
   11e2c:	f001 fd98 	bl	13960 <__clzsi2>
   11e30:	0003      	movs	r3, r0
   11e32:	3b08      	subs	r3, #8
   11e34:	2b1f      	cmp	r3, #31
   11e36:	dd00      	ble.n	11e3a <__aeabi_dadd+0xce>
   11e38:	e0d2      	b.n	11fe0 <__aeabi_dadd+0x274>
   11e3a:	2220      	movs	r2, #32
   11e3c:	003c      	movs	r4, r7
   11e3e:	1ad2      	subs	r2, r2, r3
   11e40:	409d      	lsls	r5, r3
   11e42:	40d4      	lsrs	r4, r2
   11e44:	409f      	lsls	r7, r3
   11e46:	4325      	orrs	r5, r4
   11e48:	429e      	cmp	r6, r3
   11e4a:	dd00      	ble.n	11e4e <__aeabi_dadd+0xe2>
   11e4c:	e0c4      	b.n	11fd8 <__aeabi_dadd+0x26c>
   11e4e:	1b9e      	subs	r6, r3, r6
   11e50:	1c73      	adds	r3, r6, #1
   11e52:	2b1f      	cmp	r3, #31
   11e54:	dd00      	ble.n	11e58 <__aeabi_dadd+0xec>
   11e56:	e0f1      	b.n	1203c <__aeabi_dadd+0x2d0>
   11e58:	2220      	movs	r2, #32
   11e5a:	0038      	movs	r0, r7
   11e5c:	0029      	movs	r1, r5
   11e5e:	1ad2      	subs	r2, r2, r3
   11e60:	40d8      	lsrs	r0, r3
   11e62:	4091      	lsls	r1, r2
   11e64:	4097      	lsls	r7, r2
   11e66:	002c      	movs	r4, r5
   11e68:	4301      	orrs	r1, r0
   11e6a:	1e78      	subs	r0, r7, #1
   11e6c:	4187      	sbcs	r7, r0
   11e6e:	40dc      	lsrs	r4, r3
   11e70:	2600      	movs	r6, #0
   11e72:	430f      	orrs	r7, r1
   11e74:	077b      	lsls	r3, r7, #29
   11e76:	d009      	beq.n	11e8c <__aeabi_dadd+0x120>
   11e78:	230f      	movs	r3, #15
   11e7a:	403b      	ands	r3, r7
   11e7c:	2b04      	cmp	r3, #4
   11e7e:	d005      	beq.n	11e8c <__aeabi_dadd+0x120>
   11e80:	1d3b      	adds	r3, r7, #4
   11e82:	42bb      	cmp	r3, r7
   11e84:	41bf      	sbcs	r7, r7
   11e86:	427f      	negs	r7, r7
   11e88:	19e4      	adds	r4, r4, r7
   11e8a:	001f      	movs	r7, r3
   11e8c:	0223      	lsls	r3, r4, #8
   11e8e:	d52c      	bpl.n	11eea <__aeabi_dadd+0x17e>
   11e90:	4b96      	ldr	r3, [pc, #600]	; (120ec <__aeabi_dadd+0x380>)
   11e92:	3601      	adds	r6, #1
   11e94:	429e      	cmp	r6, r3
   11e96:	d100      	bne.n	11e9a <__aeabi_dadd+0x12e>
   11e98:	e09a      	b.n	11fd0 <__aeabi_dadd+0x264>
   11e9a:	4645      	mov	r5, r8
   11e9c:	4b94      	ldr	r3, [pc, #592]	; (120f0 <__aeabi_dadd+0x384>)
   11e9e:	08ff      	lsrs	r7, r7, #3
   11ea0:	401c      	ands	r4, r3
   11ea2:	0760      	lsls	r0, r4, #29
   11ea4:	0576      	lsls	r6, r6, #21
   11ea6:	0264      	lsls	r4, r4, #9
   11ea8:	4307      	orrs	r7, r0
   11eaa:	0b24      	lsrs	r4, r4, #12
   11eac:	0d76      	lsrs	r6, r6, #21
   11eae:	2100      	movs	r1, #0
   11eb0:	0324      	lsls	r4, r4, #12
   11eb2:	0b23      	lsrs	r3, r4, #12
   11eb4:	0d0c      	lsrs	r4, r1, #20
   11eb6:	4a8f      	ldr	r2, [pc, #572]	; (120f4 <__aeabi_dadd+0x388>)
   11eb8:	0524      	lsls	r4, r4, #20
   11eba:	431c      	orrs	r4, r3
   11ebc:	4014      	ands	r4, r2
   11ebe:	0533      	lsls	r3, r6, #20
   11ec0:	4323      	orrs	r3, r4
   11ec2:	005b      	lsls	r3, r3, #1
   11ec4:	07ed      	lsls	r5, r5, #31
   11ec6:	085b      	lsrs	r3, r3, #1
   11ec8:	432b      	orrs	r3, r5
   11eca:	0038      	movs	r0, r7
   11ecc:	0019      	movs	r1, r3
   11ece:	bc3c      	pop	{r2, r3, r4, r5}
   11ed0:	4690      	mov	r8, r2
   11ed2:	4699      	mov	r9, r3
   11ed4:	46a2      	mov	sl, r4
   11ed6:	46ab      	mov	fp, r5
   11ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11eda:	4664      	mov	r4, ip
   11edc:	4304      	orrs	r4, r0
   11ede:	d100      	bne.n	11ee2 <__aeabi_dadd+0x176>
   11ee0:	e211      	b.n	12306 <__aeabi_dadd+0x59a>
   11ee2:	0004      	movs	r4, r0
   11ee4:	4667      	mov	r7, ip
   11ee6:	077b      	lsls	r3, r7, #29
   11ee8:	d1c6      	bne.n	11e78 <__aeabi_dadd+0x10c>
   11eea:	4645      	mov	r5, r8
   11eec:	0760      	lsls	r0, r4, #29
   11eee:	08ff      	lsrs	r7, r7, #3
   11ef0:	4307      	orrs	r7, r0
   11ef2:	08e4      	lsrs	r4, r4, #3
   11ef4:	4b7d      	ldr	r3, [pc, #500]	; (120ec <__aeabi_dadd+0x380>)
   11ef6:	429e      	cmp	r6, r3
   11ef8:	d030      	beq.n	11f5c <__aeabi_dadd+0x1f0>
   11efa:	0324      	lsls	r4, r4, #12
   11efc:	0576      	lsls	r6, r6, #21
   11efe:	0b24      	lsrs	r4, r4, #12
   11f00:	0d76      	lsrs	r6, r6, #21
   11f02:	e7d4      	b.n	11eae <__aeabi_dadd+0x142>
   11f04:	1a33      	subs	r3, r6, r0
   11f06:	469a      	mov	sl, r3
   11f08:	2b00      	cmp	r3, #0
   11f0a:	dd78      	ble.n	11ffe <__aeabi_dadd+0x292>
   11f0c:	2800      	cmp	r0, #0
   11f0e:	d031      	beq.n	11f74 <__aeabi_dadd+0x208>
   11f10:	4876      	ldr	r0, [pc, #472]	; (120ec <__aeabi_dadd+0x380>)
   11f12:	4286      	cmp	r6, r0
   11f14:	d0ae      	beq.n	11e74 <__aeabi_dadd+0x108>
   11f16:	2080      	movs	r0, #128	; 0x80
   11f18:	0400      	lsls	r0, r0, #16
   11f1a:	4301      	orrs	r1, r0
   11f1c:	4653      	mov	r3, sl
   11f1e:	2b38      	cmp	r3, #56	; 0x38
   11f20:	dc00      	bgt.n	11f24 <__aeabi_dadd+0x1b8>
   11f22:	e0e9      	b.n	120f8 <__aeabi_dadd+0x38c>
   11f24:	430a      	orrs	r2, r1
   11f26:	1e51      	subs	r1, r2, #1
   11f28:	418a      	sbcs	r2, r1
   11f2a:	2100      	movs	r1, #0
   11f2c:	19d2      	adds	r2, r2, r7
   11f2e:	42ba      	cmp	r2, r7
   11f30:	41bf      	sbcs	r7, r7
   11f32:	1909      	adds	r1, r1, r4
   11f34:	427c      	negs	r4, r7
   11f36:	0017      	movs	r7, r2
   11f38:	190c      	adds	r4, r1, r4
   11f3a:	0223      	lsls	r3, r4, #8
   11f3c:	d5d3      	bpl.n	11ee6 <__aeabi_dadd+0x17a>
   11f3e:	4b6b      	ldr	r3, [pc, #428]	; (120ec <__aeabi_dadd+0x380>)
   11f40:	3601      	adds	r6, #1
   11f42:	429e      	cmp	r6, r3
   11f44:	d100      	bne.n	11f48 <__aeabi_dadd+0x1dc>
   11f46:	e13a      	b.n	121be <__aeabi_dadd+0x452>
   11f48:	2001      	movs	r0, #1
   11f4a:	4b69      	ldr	r3, [pc, #420]	; (120f0 <__aeabi_dadd+0x384>)
   11f4c:	401c      	ands	r4, r3
   11f4e:	087b      	lsrs	r3, r7, #1
   11f50:	4007      	ands	r7, r0
   11f52:	431f      	orrs	r7, r3
   11f54:	07e0      	lsls	r0, r4, #31
   11f56:	4307      	orrs	r7, r0
   11f58:	0864      	lsrs	r4, r4, #1
   11f5a:	e78b      	b.n	11e74 <__aeabi_dadd+0x108>
   11f5c:	0023      	movs	r3, r4
   11f5e:	433b      	orrs	r3, r7
   11f60:	d100      	bne.n	11f64 <__aeabi_dadd+0x1f8>
   11f62:	e1cb      	b.n	122fc <__aeabi_dadd+0x590>
   11f64:	2280      	movs	r2, #128	; 0x80
   11f66:	0312      	lsls	r2, r2, #12
   11f68:	4314      	orrs	r4, r2
   11f6a:	0324      	lsls	r4, r4, #12
   11f6c:	0b24      	lsrs	r4, r4, #12
   11f6e:	e79e      	b.n	11eae <__aeabi_dadd+0x142>
   11f70:	002e      	movs	r6, r5
   11f72:	e77f      	b.n	11e74 <__aeabi_dadd+0x108>
   11f74:	0008      	movs	r0, r1
   11f76:	4310      	orrs	r0, r2
   11f78:	d100      	bne.n	11f7c <__aeabi_dadd+0x210>
   11f7a:	e0b4      	b.n	120e6 <__aeabi_dadd+0x37a>
   11f7c:	1e58      	subs	r0, r3, #1
   11f7e:	2800      	cmp	r0, #0
   11f80:	d000      	beq.n	11f84 <__aeabi_dadd+0x218>
   11f82:	e0de      	b.n	12142 <__aeabi_dadd+0x3d6>
   11f84:	18ba      	adds	r2, r7, r2
   11f86:	42ba      	cmp	r2, r7
   11f88:	419b      	sbcs	r3, r3
   11f8a:	1864      	adds	r4, r4, r1
   11f8c:	425b      	negs	r3, r3
   11f8e:	18e4      	adds	r4, r4, r3
   11f90:	0017      	movs	r7, r2
   11f92:	2601      	movs	r6, #1
   11f94:	0223      	lsls	r3, r4, #8
   11f96:	d5a6      	bpl.n	11ee6 <__aeabi_dadd+0x17a>
   11f98:	2602      	movs	r6, #2
   11f9a:	e7d5      	b.n	11f48 <__aeabi_dadd+0x1dc>
   11f9c:	2d00      	cmp	r5, #0
   11f9e:	d16e      	bne.n	1207e <__aeabi_dadd+0x312>
   11fa0:	1c70      	adds	r0, r6, #1
   11fa2:	0540      	lsls	r0, r0, #21
   11fa4:	0d40      	lsrs	r0, r0, #21
   11fa6:	2801      	cmp	r0, #1
   11fa8:	dc00      	bgt.n	11fac <__aeabi_dadd+0x240>
   11faa:	e0f9      	b.n	121a0 <__aeabi_dadd+0x434>
   11fac:	1ab8      	subs	r0, r7, r2
   11fae:	4684      	mov	ip, r0
   11fb0:	4287      	cmp	r7, r0
   11fb2:	4180      	sbcs	r0, r0
   11fb4:	1ae5      	subs	r5, r4, r3
   11fb6:	4240      	negs	r0, r0
   11fb8:	1a2d      	subs	r5, r5, r0
   11fba:	0228      	lsls	r0, r5, #8
   11fbc:	d400      	bmi.n	11fc0 <__aeabi_dadd+0x254>
   11fbe:	e089      	b.n	120d4 <__aeabi_dadd+0x368>
   11fc0:	1bd7      	subs	r7, r2, r7
   11fc2:	42ba      	cmp	r2, r7
   11fc4:	4192      	sbcs	r2, r2
   11fc6:	1b1c      	subs	r4, r3, r4
   11fc8:	4252      	negs	r2, r2
   11fca:	1aa5      	subs	r5, r4, r2
   11fcc:	46d8      	mov	r8, fp
   11fce:	e729      	b.n	11e24 <__aeabi_dadd+0xb8>
   11fd0:	4645      	mov	r5, r8
   11fd2:	2400      	movs	r4, #0
   11fd4:	2700      	movs	r7, #0
   11fd6:	e76a      	b.n	11eae <__aeabi_dadd+0x142>
   11fd8:	4c45      	ldr	r4, [pc, #276]	; (120f0 <__aeabi_dadd+0x384>)
   11fda:	1af6      	subs	r6, r6, r3
   11fdc:	402c      	ands	r4, r5
   11fde:	e749      	b.n	11e74 <__aeabi_dadd+0x108>
   11fe0:	003d      	movs	r5, r7
   11fe2:	3828      	subs	r0, #40	; 0x28
   11fe4:	4085      	lsls	r5, r0
   11fe6:	2700      	movs	r7, #0
   11fe8:	e72e      	b.n	11e48 <__aeabi_dadd+0xdc>
   11fea:	0038      	movs	r0, r7
   11fec:	f001 fcb8 	bl	13960 <__clzsi2>
   11ff0:	3020      	adds	r0, #32
   11ff2:	e71d      	b.n	11e30 <__aeabi_dadd+0xc4>
   11ff4:	430a      	orrs	r2, r1
   11ff6:	1e51      	subs	r1, r2, #1
   11ff8:	418a      	sbcs	r2, r1
   11ffa:	2100      	movs	r1, #0
   11ffc:	e707      	b.n	11e0e <__aeabi_dadd+0xa2>
   11ffe:	2b00      	cmp	r3, #0
   12000:	d000      	beq.n	12004 <__aeabi_dadd+0x298>
   12002:	e0f3      	b.n	121ec <__aeabi_dadd+0x480>
   12004:	1c70      	adds	r0, r6, #1
   12006:	0543      	lsls	r3, r0, #21
   12008:	0d5b      	lsrs	r3, r3, #21
   1200a:	2b01      	cmp	r3, #1
   1200c:	dc00      	bgt.n	12010 <__aeabi_dadd+0x2a4>
   1200e:	e0ad      	b.n	1216c <__aeabi_dadd+0x400>
   12010:	4b36      	ldr	r3, [pc, #216]	; (120ec <__aeabi_dadd+0x380>)
   12012:	4298      	cmp	r0, r3
   12014:	d100      	bne.n	12018 <__aeabi_dadd+0x2ac>
   12016:	e0d1      	b.n	121bc <__aeabi_dadd+0x450>
   12018:	18ba      	adds	r2, r7, r2
   1201a:	42ba      	cmp	r2, r7
   1201c:	41bf      	sbcs	r7, r7
   1201e:	1864      	adds	r4, r4, r1
   12020:	427f      	negs	r7, r7
   12022:	19e4      	adds	r4, r4, r7
   12024:	07e7      	lsls	r7, r4, #31
   12026:	0852      	lsrs	r2, r2, #1
   12028:	4317      	orrs	r7, r2
   1202a:	0864      	lsrs	r4, r4, #1
   1202c:	0006      	movs	r6, r0
   1202e:	e721      	b.n	11e74 <__aeabi_dadd+0x108>
   12030:	482e      	ldr	r0, [pc, #184]	; (120ec <__aeabi_dadd+0x380>)
   12032:	4285      	cmp	r5, r0
   12034:	d100      	bne.n	12038 <__aeabi_dadd+0x2cc>
   12036:	e093      	b.n	12160 <__aeabi_dadd+0x3f4>
   12038:	001d      	movs	r5, r3
   1203a:	e6d0      	b.n	11dde <__aeabi_dadd+0x72>
   1203c:	0029      	movs	r1, r5
   1203e:	3e1f      	subs	r6, #31
   12040:	40f1      	lsrs	r1, r6
   12042:	2b20      	cmp	r3, #32
   12044:	d100      	bne.n	12048 <__aeabi_dadd+0x2dc>
   12046:	e08d      	b.n	12164 <__aeabi_dadd+0x3f8>
   12048:	2240      	movs	r2, #64	; 0x40
   1204a:	1ad3      	subs	r3, r2, r3
   1204c:	409d      	lsls	r5, r3
   1204e:	432f      	orrs	r7, r5
   12050:	1e7d      	subs	r5, r7, #1
   12052:	41af      	sbcs	r7, r5
   12054:	2400      	movs	r4, #0
   12056:	430f      	orrs	r7, r1
   12058:	2600      	movs	r6, #0
   1205a:	e744      	b.n	11ee6 <__aeabi_dadd+0x17a>
   1205c:	002b      	movs	r3, r5
   1205e:	0008      	movs	r0, r1
   12060:	3b20      	subs	r3, #32
   12062:	40d8      	lsrs	r0, r3
   12064:	0003      	movs	r3, r0
   12066:	2d20      	cmp	r5, #32
   12068:	d100      	bne.n	1206c <__aeabi_dadd+0x300>
   1206a:	e07d      	b.n	12168 <__aeabi_dadd+0x3fc>
   1206c:	2040      	movs	r0, #64	; 0x40
   1206e:	1b45      	subs	r5, r0, r5
   12070:	40a9      	lsls	r1, r5
   12072:	430a      	orrs	r2, r1
   12074:	1e51      	subs	r1, r2, #1
   12076:	418a      	sbcs	r2, r1
   12078:	2100      	movs	r1, #0
   1207a:	431a      	orrs	r2, r3
   1207c:	e6c7      	b.n	11e0e <__aeabi_dadd+0xa2>
   1207e:	2e00      	cmp	r6, #0
   12080:	d050      	beq.n	12124 <__aeabi_dadd+0x3b8>
   12082:	4e1a      	ldr	r6, [pc, #104]	; (120ec <__aeabi_dadd+0x380>)
   12084:	42b0      	cmp	r0, r6
   12086:	d057      	beq.n	12138 <__aeabi_dadd+0x3cc>
   12088:	2680      	movs	r6, #128	; 0x80
   1208a:	426b      	negs	r3, r5
   1208c:	4699      	mov	r9, r3
   1208e:	0436      	lsls	r6, r6, #16
   12090:	4334      	orrs	r4, r6
   12092:	464b      	mov	r3, r9
   12094:	2b38      	cmp	r3, #56	; 0x38
   12096:	dd00      	ble.n	1209a <__aeabi_dadd+0x32e>
   12098:	e0d6      	b.n	12248 <__aeabi_dadd+0x4dc>
   1209a:	2b1f      	cmp	r3, #31
   1209c:	dd00      	ble.n	120a0 <__aeabi_dadd+0x334>
   1209e:	e135      	b.n	1230c <__aeabi_dadd+0x5a0>
   120a0:	2620      	movs	r6, #32
   120a2:	1af5      	subs	r5, r6, r3
   120a4:	0026      	movs	r6, r4
   120a6:	40ae      	lsls	r6, r5
   120a8:	46b2      	mov	sl, r6
   120aa:	003e      	movs	r6, r7
   120ac:	40de      	lsrs	r6, r3
   120ae:	46ac      	mov	ip, r5
   120b0:	0035      	movs	r5, r6
   120b2:	4656      	mov	r6, sl
   120b4:	432e      	orrs	r6, r5
   120b6:	4665      	mov	r5, ip
   120b8:	40af      	lsls	r7, r5
   120ba:	1e7d      	subs	r5, r7, #1
   120bc:	41af      	sbcs	r7, r5
   120be:	40dc      	lsrs	r4, r3
   120c0:	4337      	orrs	r7, r6
   120c2:	1bd7      	subs	r7, r2, r7
   120c4:	42ba      	cmp	r2, r7
   120c6:	4192      	sbcs	r2, r2
   120c8:	1b0c      	subs	r4, r1, r4
   120ca:	4252      	negs	r2, r2
   120cc:	1aa4      	subs	r4, r4, r2
   120ce:	0006      	movs	r6, r0
   120d0:	46d8      	mov	r8, fp
   120d2:	e6a3      	b.n	11e1c <__aeabi_dadd+0xb0>
   120d4:	4664      	mov	r4, ip
   120d6:	4667      	mov	r7, ip
   120d8:	432c      	orrs	r4, r5
   120da:	d000      	beq.n	120de <__aeabi_dadd+0x372>
   120dc:	e6a2      	b.n	11e24 <__aeabi_dadd+0xb8>
   120de:	2500      	movs	r5, #0
   120e0:	2600      	movs	r6, #0
   120e2:	2700      	movs	r7, #0
   120e4:	e706      	b.n	11ef4 <__aeabi_dadd+0x188>
   120e6:	001e      	movs	r6, r3
   120e8:	e6c4      	b.n	11e74 <__aeabi_dadd+0x108>
   120ea:	46c0      	nop			; (mov r8, r8)
   120ec:	000007ff 	.word	0x000007ff
   120f0:	ff7fffff 	.word	0xff7fffff
   120f4:	800fffff 	.word	0x800fffff
   120f8:	2b1f      	cmp	r3, #31
   120fa:	dc63      	bgt.n	121c4 <__aeabi_dadd+0x458>
   120fc:	2020      	movs	r0, #32
   120fe:	1ac3      	subs	r3, r0, r3
   12100:	0008      	movs	r0, r1
   12102:	4098      	lsls	r0, r3
   12104:	469c      	mov	ip, r3
   12106:	4683      	mov	fp, r0
   12108:	4653      	mov	r3, sl
   1210a:	0010      	movs	r0, r2
   1210c:	40d8      	lsrs	r0, r3
   1210e:	0003      	movs	r3, r0
   12110:	4658      	mov	r0, fp
   12112:	4318      	orrs	r0, r3
   12114:	4663      	mov	r3, ip
   12116:	409a      	lsls	r2, r3
   12118:	1e53      	subs	r3, r2, #1
   1211a:	419a      	sbcs	r2, r3
   1211c:	4653      	mov	r3, sl
   1211e:	4302      	orrs	r2, r0
   12120:	40d9      	lsrs	r1, r3
   12122:	e703      	b.n	11f2c <__aeabi_dadd+0x1c0>
   12124:	0026      	movs	r6, r4
   12126:	433e      	orrs	r6, r7
   12128:	d006      	beq.n	12138 <__aeabi_dadd+0x3cc>
   1212a:	43eb      	mvns	r3, r5
   1212c:	4699      	mov	r9, r3
   1212e:	2b00      	cmp	r3, #0
   12130:	d0c7      	beq.n	120c2 <__aeabi_dadd+0x356>
   12132:	4e94      	ldr	r6, [pc, #592]	; (12384 <__aeabi_dadd+0x618>)
   12134:	42b0      	cmp	r0, r6
   12136:	d1ac      	bne.n	12092 <__aeabi_dadd+0x326>
   12138:	000c      	movs	r4, r1
   1213a:	0017      	movs	r7, r2
   1213c:	0006      	movs	r6, r0
   1213e:	46d8      	mov	r8, fp
   12140:	e698      	b.n	11e74 <__aeabi_dadd+0x108>
   12142:	4b90      	ldr	r3, [pc, #576]	; (12384 <__aeabi_dadd+0x618>)
   12144:	459a      	cmp	sl, r3
   12146:	d00b      	beq.n	12160 <__aeabi_dadd+0x3f4>
   12148:	4682      	mov	sl, r0
   1214a:	e6e7      	b.n	11f1c <__aeabi_dadd+0x1b0>
   1214c:	2800      	cmp	r0, #0
   1214e:	d000      	beq.n	12152 <__aeabi_dadd+0x3e6>
   12150:	e09e      	b.n	12290 <__aeabi_dadd+0x524>
   12152:	0018      	movs	r0, r3
   12154:	4310      	orrs	r0, r2
   12156:	d100      	bne.n	1215a <__aeabi_dadd+0x3ee>
   12158:	e0e9      	b.n	1232e <__aeabi_dadd+0x5c2>
   1215a:	001c      	movs	r4, r3
   1215c:	0017      	movs	r7, r2
   1215e:	46d8      	mov	r8, fp
   12160:	4e88      	ldr	r6, [pc, #544]	; (12384 <__aeabi_dadd+0x618>)
   12162:	e687      	b.n	11e74 <__aeabi_dadd+0x108>
   12164:	2500      	movs	r5, #0
   12166:	e772      	b.n	1204e <__aeabi_dadd+0x2e2>
   12168:	2100      	movs	r1, #0
   1216a:	e782      	b.n	12072 <__aeabi_dadd+0x306>
   1216c:	0023      	movs	r3, r4
   1216e:	433b      	orrs	r3, r7
   12170:	2e00      	cmp	r6, #0
   12172:	d000      	beq.n	12176 <__aeabi_dadd+0x40a>
   12174:	e0ab      	b.n	122ce <__aeabi_dadd+0x562>
   12176:	2b00      	cmp	r3, #0
   12178:	d100      	bne.n	1217c <__aeabi_dadd+0x410>
   1217a:	e0e7      	b.n	1234c <__aeabi_dadd+0x5e0>
   1217c:	000b      	movs	r3, r1
   1217e:	4313      	orrs	r3, r2
   12180:	d100      	bne.n	12184 <__aeabi_dadd+0x418>
   12182:	e677      	b.n	11e74 <__aeabi_dadd+0x108>
   12184:	18ba      	adds	r2, r7, r2
   12186:	42ba      	cmp	r2, r7
   12188:	41bf      	sbcs	r7, r7
   1218a:	1864      	adds	r4, r4, r1
   1218c:	427f      	negs	r7, r7
   1218e:	19e4      	adds	r4, r4, r7
   12190:	0223      	lsls	r3, r4, #8
   12192:	d400      	bmi.n	12196 <__aeabi_dadd+0x42a>
   12194:	e0f2      	b.n	1237c <__aeabi_dadd+0x610>
   12196:	4b7c      	ldr	r3, [pc, #496]	; (12388 <__aeabi_dadd+0x61c>)
   12198:	0017      	movs	r7, r2
   1219a:	401c      	ands	r4, r3
   1219c:	0006      	movs	r6, r0
   1219e:	e669      	b.n	11e74 <__aeabi_dadd+0x108>
   121a0:	0020      	movs	r0, r4
   121a2:	4338      	orrs	r0, r7
   121a4:	2e00      	cmp	r6, #0
   121a6:	d1d1      	bne.n	1214c <__aeabi_dadd+0x3e0>
   121a8:	2800      	cmp	r0, #0
   121aa:	d15b      	bne.n	12264 <__aeabi_dadd+0x4f8>
   121ac:	001c      	movs	r4, r3
   121ae:	4314      	orrs	r4, r2
   121b0:	d100      	bne.n	121b4 <__aeabi_dadd+0x448>
   121b2:	e0a8      	b.n	12306 <__aeabi_dadd+0x59a>
   121b4:	001c      	movs	r4, r3
   121b6:	0017      	movs	r7, r2
   121b8:	46d8      	mov	r8, fp
   121ba:	e65b      	b.n	11e74 <__aeabi_dadd+0x108>
   121bc:	0006      	movs	r6, r0
   121be:	2400      	movs	r4, #0
   121c0:	2700      	movs	r7, #0
   121c2:	e697      	b.n	11ef4 <__aeabi_dadd+0x188>
   121c4:	4650      	mov	r0, sl
   121c6:	000b      	movs	r3, r1
   121c8:	3820      	subs	r0, #32
   121ca:	40c3      	lsrs	r3, r0
   121cc:	4699      	mov	r9, r3
   121ce:	4653      	mov	r3, sl
   121d0:	2b20      	cmp	r3, #32
   121d2:	d100      	bne.n	121d6 <__aeabi_dadd+0x46a>
   121d4:	e095      	b.n	12302 <__aeabi_dadd+0x596>
   121d6:	2340      	movs	r3, #64	; 0x40
   121d8:	4650      	mov	r0, sl
   121da:	1a1b      	subs	r3, r3, r0
   121dc:	4099      	lsls	r1, r3
   121de:	430a      	orrs	r2, r1
   121e0:	1e51      	subs	r1, r2, #1
   121e2:	418a      	sbcs	r2, r1
   121e4:	464b      	mov	r3, r9
   121e6:	2100      	movs	r1, #0
   121e8:	431a      	orrs	r2, r3
   121ea:	e69f      	b.n	11f2c <__aeabi_dadd+0x1c0>
   121ec:	2e00      	cmp	r6, #0
   121ee:	d130      	bne.n	12252 <__aeabi_dadd+0x4e6>
   121f0:	0026      	movs	r6, r4
   121f2:	433e      	orrs	r6, r7
   121f4:	d067      	beq.n	122c6 <__aeabi_dadd+0x55a>
   121f6:	43db      	mvns	r3, r3
   121f8:	469a      	mov	sl, r3
   121fa:	2b00      	cmp	r3, #0
   121fc:	d01c      	beq.n	12238 <__aeabi_dadd+0x4cc>
   121fe:	4e61      	ldr	r6, [pc, #388]	; (12384 <__aeabi_dadd+0x618>)
   12200:	42b0      	cmp	r0, r6
   12202:	d060      	beq.n	122c6 <__aeabi_dadd+0x55a>
   12204:	4653      	mov	r3, sl
   12206:	2b38      	cmp	r3, #56	; 0x38
   12208:	dd00      	ble.n	1220c <__aeabi_dadd+0x4a0>
   1220a:	e096      	b.n	1233a <__aeabi_dadd+0x5ce>
   1220c:	2b1f      	cmp	r3, #31
   1220e:	dd00      	ble.n	12212 <__aeabi_dadd+0x4a6>
   12210:	e09f      	b.n	12352 <__aeabi_dadd+0x5e6>
   12212:	2620      	movs	r6, #32
   12214:	1af3      	subs	r3, r6, r3
   12216:	0026      	movs	r6, r4
   12218:	409e      	lsls	r6, r3
   1221a:	469c      	mov	ip, r3
   1221c:	46b3      	mov	fp, r6
   1221e:	4653      	mov	r3, sl
   12220:	003e      	movs	r6, r7
   12222:	40de      	lsrs	r6, r3
   12224:	0033      	movs	r3, r6
   12226:	465e      	mov	r6, fp
   12228:	431e      	orrs	r6, r3
   1222a:	4663      	mov	r3, ip
   1222c:	409f      	lsls	r7, r3
   1222e:	1e7b      	subs	r3, r7, #1
   12230:	419f      	sbcs	r7, r3
   12232:	4653      	mov	r3, sl
   12234:	40dc      	lsrs	r4, r3
   12236:	4337      	orrs	r7, r6
   12238:	18bf      	adds	r7, r7, r2
   1223a:	4297      	cmp	r7, r2
   1223c:	4192      	sbcs	r2, r2
   1223e:	1864      	adds	r4, r4, r1
   12240:	4252      	negs	r2, r2
   12242:	18a4      	adds	r4, r4, r2
   12244:	0006      	movs	r6, r0
   12246:	e678      	b.n	11f3a <__aeabi_dadd+0x1ce>
   12248:	4327      	orrs	r7, r4
   1224a:	1e7c      	subs	r4, r7, #1
   1224c:	41a7      	sbcs	r7, r4
   1224e:	2400      	movs	r4, #0
   12250:	e737      	b.n	120c2 <__aeabi_dadd+0x356>
   12252:	4e4c      	ldr	r6, [pc, #304]	; (12384 <__aeabi_dadd+0x618>)
   12254:	42b0      	cmp	r0, r6
   12256:	d036      	beq.n	122c6 <__aeabi_dadd+0x55a>
   12258:	2680      	movs	r6, #128	; 0x80
   1225a:	425b      	negs	r3, r3
   1225c:	0436      	lsls	r6, r6, #16
   1225e:	469a      	mov	sl, r3
   12260:	4334      	orrs	r4, r6
   12262:	e7cf      	b.n	12204 <__aeabi_dadd+0x498>
   12264:	0018      	movs	r0, r3
   12266:	4310      	orrs	r0, r2
   12268:	d100      	bne.n	1226c <__aeabi_dadd+0x500>
   1226a:	e603      	b.n	11e74 <__aeabi_dadd+0x108>
   1226c:	1ab8      	subs	r0, r7, r2
   1226e:	4684      	mov	ip, r0
   12270:	4567      	cmp	r7, ip
   12272:	41ad      	sbcs	r5, r5
   12274:	1ae0      	subs	r0, r4, r3
   12276:	426d      	negs	r5, r5
   12278:	1b40      	subs	r0, r0, r5
   1227a:	0205      	lsls	r5, r0, #8
   1227c:	d400      	bmi.n	12280 <__aeabi_dadd+0x514>
   1227e:	e62c      	b.n	11eda <__aeabi_dadd+0x16e>
   12280:	1bd7      	subs	r7, r2, r7
   12282:	42ba      	cmp	r2, r7
   12284:	4192      	sbcs	r2, r2
   12286:	1b1c      	subs	r4, r3, r4
   12288:	4252      	negs	r2, r2
   1228a:	1aa4      	subs	r4, r4, r2
   1228c:	46d8      	mov	r8, fp
   1228e:	e5f1      	b.n	11e74 <__aeabi_dadd+0x108>
   12290:	0018      	movs	r0, r3
   12292:	4310      	orrs	r0, r2
   12294:	d100      	bne.n	12298 <__aeabi_dadd+0x52c>
   12296:	e763      	b.n	12160 <__aeabi_dadd+0x3f4>
   12298:	08f8      	lsrs	r0, r7, #3
   1229a:	0767      	lsls	r7, r4, #29
   1229c:	4307      	orrs	r7, r0
   1229e:	2080      	movs	r0, #128	; 0x80
   122a0:	08e4      	lsrs	r4, r4, #3
   122a2:	0300      	lsls	r0, r0, #12
   122a4:	4204      	tst	r4, r0
   122a6:	d008      	beq.n	122ba <__aeabi_dadd+0x54e>
   122a8:	08dd      	lsrs	r5, r3, #3
   122aa:	4205      	tst	r5, r0
   122ac:	d105      	bne.n	122ba <__aeabi_dadd+0x54e>
   122ae:	08d2      	lsrs	r2, r2, #3
   122b0:	0759      	lsls	r1, r3, #29
   122b2:	4311      	orrs	r1, r2
   122b4:	000f      	movs	r7, r1
   122b6:	002c      	movs	r4, r5
   122b8:	46d8      	mov	r8, fp
   122ba:	0f7b      	lsrs	r3, r7, #29
   122bc:	00e4      	lsls	r4, r4, #3
   122be:	431c      	orrs	r4, r3
   122c0:	00ff      	lsls	r7, r7, #3
   122c2:	4e30      	ldr	r6, [pc, #192]	; (12384 <__aeabi_dadd+0x618>)
   122c4:	e5d6      	b.n	11e74 <__aeabi_dadd+0x108>
   122c6:	000c      	movs	r4, r1
   122c8:	0017      	movs	r7, r2
   122ca:	0006      	movs	r6, r0
   122cc:	e5d2      	b.n	11e74 <__aeabi_dadd+0x108>
   122ce:	2b00      	cmp	r3, #0
   122d0:	d038      	beq.n	12344 <__aeabi_dadd+0x5d8>
   122d2:	000b      	movs	r3, r1
   122d4:	4313      	orrs	r3, r2
   122d6:	d100      	bne.n	122da <__aeabi_dadd+0x56e>
   122d8:	e742      	b.n	12160 <__aeabi_dadd+0x3f4>
   122da:	08f8      	lsrs	r0, r7, #3
   122dc:	0767      	lsls	r7, r4, #29
   122de:	4307      	orrs	r7, r0
   122e0:	2080      	movs	r0, #128	; 0x80
   122e2:	08e4      	lsrs	r4, r4, #3
   122e4:	0300      	lsls	r0, r0, #12
   122e6:	4204      	tst	r4, r0
   122e8:	d0e7      	beq.n	122ba <__aeabi_dadd+0x54e>
   122ea:	08cb      	lsrs	r3, r1, #3
   122ec:	4203      	tst	r3, r0
   122ee:	d1e4      	bne.n	122ba <__aeabi_dadd+0x54e>
   122f0:	08d2      	lsrs	r2, r2, #3
   122f2:	0749      	lsls	r1, r1, #29
   122f4:	4311      	orrs	r1, r2
   122f6:	000f      	movs	r7, r1
   122f8:	001c      	movs	r4, r3
   122fa:	e7de      	b.n	122ba <__aeabi_dadd+0x54e>
   122fc:	2700      	movs	r7, #0
   122fe:	2400      	movs	r4, #0
   12300:	e5d5      	b.n	11eae <__aeabi_dadd+0x142>
   12302:	2100      	movs	r1, #0
   12304:	e76b      	b.n	121de <__aeabi_dadd+0x472>
   12306:	2500      	movs	r5, #0
   12308:	2700      	movs	r7, #0
   1230a:	e5f3      	b.n	11ef4 <__aeabi_dadd+0x188>
   1230c:	464e      	mov	r6, r9
   1230e:	0025      	movs	r5, r4
   12310:	3e20      	subs	r6, #32
   12312:	40f5      	lsrs	r5, r6
   12314:	464b      	mov	r3, r9
   12316:	002e      	movs	r6, r5
   12318:	2b20      	cmp	r3, #32
   1231a:	d02d      	beq.n	12378 <__aeabi_dadd+0x60c>
   1231c:	2540      	movs	r5, #64	; 0x40
   1231e:	1aed      	subs	r5, r5, r3
   12320:	40ac      	lsls	r4, r5
   12322:	4327      	orrs	r7, r4
   12324:	1e7c      	subs	r4, r7, #1
   12326:	41a7      	sbcs	r7, r4
   12328:	2400      	movs	r4, #0
   1232a:	4337      	orrs	r7, r6
   1232c:	e6c9      	b.n	120c2 <__aeabi_dadd+0x356>
   1232e:	2480      	movs	r4, #128	; 0x80
   12330:	2500      	movs	r5, #0
   12332:	0324      	lsls	r4, r4, #12
   12334:	4e13      	ldr	r6, [pc, #76]	; (12384 <__aeabi_dadd+0x618>)
   12336:	2700      	movs	r7, #0
   12338:	e5dc      	b.n	11ef4 <__aeabi_dadd+0x188>
   1233a:	4327      	orrs	r7, r4
   1233c:	1e7c      	subs	r4, r7, #1
   1233e:	41a7      	sbcs	r7, r4
   12340:	2400      	movs	r4, #0
   12342:	e779      	b.n	12238 <__aeabi_dadd+0x4cc>
   12344:	000c      	movs	r4, r1
   12346:	0017      	movs	r7, r2
   12348:	4e0e      	ldr	r6, [pc, #56]	; (12384 <__aeabi_dadd+0x618>)
   1234a:	e593      	b.n	11e74 <__aeabi_dadd+0x108>
   1234c:	000c      	movs	r4, r1
   1234e:	0017      	movs	r7, r2
   12350:	e590      	b.n	11e74 <__aeabi_dadd+0x108>
   12352:	4656      	mov	r6, sl
   12354:	0023      	movs	r3, r4
   12356:	3e20      	subs	r6, #32
   12358:	40f3      	lsrs	r3, r6
   1235a:	4699      	mov	r9, r3
   1235c:	4653      	mov	r3, sl
   1235e:	2b20      	cmp	r3, #32
   12360:	d00e      	beq.n	12380 <__aeabi_dadd+0x614>
   12362:	2340      	movs	r3, #64	; 0x40
   12364:	4656      	mov	r6, sl
   12366:	1b9b      	subs	r3, r3, r6
   12368:	409c      	lsls	r4, r3
   1236a:	4327      	orrs	r7, r4
   1236c:	1e7c      	subs	r4, r7, #1
   1236e:	41a7      	sbcs	r7, r4
   12370:	464b      	mov	r3, r9
   12372:	2400      	movs	r4, #0
   12374:	431f      	orrs	r7, r3
   12376:	e75f      	b.n	12238 <__aeabi_dadd+0x4cc>
   12378:	2400      	movs	r4, #0
   1237a:	e7d2      	b.n	12322 <__aeabi_dadd+0x5b6>
   1237c:	0017      	movs	r7, r2
   1237e:	e5b2      	b.n	11ee6 <__aeabi_dadd+0x17a>
   12380:	2400      	movs	r4, #0
   12382:	e7f2      	b.n	1236a <__aeabi_dadd+0x5fe>
   12384:	000007ff 	.word	0x000007ff
   12388:	ff7fffff 	.word	0xff7fffff

0001238c <__aeabi_ddiv>:
   1238c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1238e:	4657      	mov	r7, sl
   12390:	4645      	mov	r5, r8
   12392:	46de      	mov	lr, fp
   12394:	464e      	mov	r6, r9
   12396:	b5e0      	push	{r5, r6, r7, lr}
   12398:	004c      	lsls	r4, r1, #1
   1239a:	030e      	lsls	r6, r1, #12
   1239c:	b087      	sub	sp, #28
   1239e:	4683      	mov	fp, r0
   123a0:	4692      	mov	sl, r2
   123a2:	001d      	movs	r5, r3
   123a4:	4680      	mov	r8, r0
   123a6:	0b36      	lsrs	r6, r6, #12
   123a8:	0d64      	lsrs	r4, r4, #21
   123aa:	0fcf      	lsrs	r7, r1, #31
   123ac:	2c00      	cmp	r4, #0
   123ae:	d04f      	beq.n	12450 <__aeabi_ddiv+0xc4>
   123b0:	4b6f      	ldr	r3, [pc, #444]	; (12570 <__aeabi_ddiv+0x1e4>)
   123b2:	429c      	cmp	r4, r3
   123b4:	d035      	beq.n	12422 <__aeabi_ddiv+0x96>
   123b6:	2380      	movs	r3, #128	; 0x80
   123b8:	0f42      	lsrs	r2, r0, #29
   123ba:	041b      	lsls	r3, r3, #16
   123bc:	00f6      	lsls	r6, r6, #3
   123be:	4313      	orrs	r3, r2
   123c0:	4333      	orrs	r3, r6
   123c2:	4699      	mov	r9, r3
   123c4:	00c3      	lsls	r3, r0, #3
   123c6:	4698      	mov	r8, r3
   123c8:	4b6a      	ldr	r3, [pc, #424]	; (12574 <__aeabi_ddiv+0x1e8>)
   123ca:	2600      	movs	r6, #0
   123cc:	469c      	mov	ip, r3
   123ce:	2300      	movs	r3, #0
   123d0:	4464      	add	r4, ip
   123d2:	9303      	str	r3, [sp, #12]
   123d4:	032b      	lsls	r3, r5, #12
   123d6:	0b1b      	lsrs	r3, r3, #12
   123d8:	469b      	mov	fp, r3
   123da:	006b      	lsls	r3, r5, #1
   123dc:	0fed      	lsrs	r5, r5, #31
   123de:	4650      	mov	r0, sl
   123e0:	0d5b      	lsrs	r3, r3, #21
   123e2:	9501      	str	r5, [sp, #4]
   123e4:	d05e      	beq.n	124a4 <__aeabi_ddiv+0x118>
   123e6:	4a62      	ldr	r2, [pc, #392]	; (12570 <__aeabi_ddiv+0x1e4>)
   123e8:	4293      	cmp	r3, r2
   123ea:	d053      	beq.n	12494 <__aeabi_ddiv+0x108>
   123ec:	465a      	mov	r2, fp
   123ee:	00d1      	lsls	r1, r2, #3
   123f0:	2280      	movs	r2, #128	; 0x80
   123f2:	0f40      	lsrs	r0, r0, #29
   123f4:	0412      	lsls	r2, r2, #16
   123f6:	4302      	orrs	r2, r0
   123f8:	430a      	orrs	r2, r1
   123fa:	4693      	mov	fp, r2
   123fc:	4652      	mov	r2, sl
   123fe:	00d1      	lsls	r1, r2, #3
   12400:	4a5c      	ldr	r2, [pc, #368]	; (12574 <__aeabi_ddiv+0x1e8>)
   12402:	4694      	mov	ip, r2
   12404:	2200      	movs	r2, #0
   12406:	4463      	add	r3, ip
   12408:	0038      	movs	r0, r7
   1240a:	4068      	eors	r0, r5
   1240c:	4684      	mov	ip, r0
   1240e:	9002      	str	r0, [sp, #8]
   12410:	1ae4      	subs	r4, r4, r3
   12412:	4316      	orrs	r6, r2
   12414:	2e0f      	cmp	r6, #15
   12416:	d900      	bls.n	1241a <__aeabi_ddiv+0x8e>
   12418:	e0b4      	b.n	12584 <__aeabi_ddiv+0x1f8>
   1241a:	4b57      	ldr	r3, [pc, #348]	; (12578 <__aeabi_ddiv+0x1ec>)
   1241c:	00b6      	lsls	r6, r6, #2
   1241e:	599b      	ldr	r3, [r3, r6]
   12420:	469f      	mov	pc, r3
   12422:	0003      	movs	r3, r0
   12424:	4333      	orrs	r3, r6
   12426:	4699      	mov	r9, r3
   12428:	d16c      	bne.n	12504 <__aeabi_ddiv+0x178>
   1242a:	2300      	movs	r3, #0
   1242c:	4698      	mov	r8, r3
   1242e:	3302      	adds	r3, #2
   12430:	2608      	movs	r6, #8
   12432:	9303      	str	r3, [sp, #12]
   12434:	e7ce      	b.n	123d4 <__aeabi_ddiv+0x48>
   12436:	46cb      	mov	fp, r9
   12438:	4641      	mov	r1, r8
   1243a:	9a03      	ldr	r2, [sp, #12]
   1243c:	9701      	str	r7, [sp, #4]
   1243e:	2a02      	cmp	r2, #2
   12440:	d165      	bne.n	1250e <__aeabi_ddiv+0x182>
   12442:	9b01      	ldr	r3, [sp, #4]
   12444:	4c4a      	ldr	r4, [pc, #296]	; (12570 <__aeabi_ddiv+0x1e4>)
   12446:	469c      	mov	ip, r3
   12448:	2300      	movs	r3, #0
   1244a:	2200      	movs	r2, #0
   1244c:	4698      	mov	r8, r3
   1244e:	e06b      	b.n	12528 <__aeabi_ddiv+0x19c>
   12450:	0003      	movs	r3, r0
   12452:	4333      	orrs	r3, r6
   12454:	4699      	mov	r9, r3
   12456:	d04e      	beq.n	124f6 <__aeabi_ddiv+0x16a>
   12458:	2e00      	cmp	r6, #0
   1245a:	d100      	bne.n	1245e <__aeabi_ddiv+0xd2>
   1245c:	e1bc      	b.n	127d8 <__aeabi_ddiv+0x44c>
   1245e:	0030      	movs	r0, r6
   12460:	f001 fa7e 	bl	13960 <__clzsi2>
   12464:	0003      	movs	r3, r0
   12466:	3b0b      	subs	r3, #11
   12468:	2b1c      	cmp	r3, #28
   1246a:	dd00      	ble.n	1246e <__aeabi_ddiv+0xe2>
   1246c:	e1ac      	b.n	127c8 <__aeabi_ddiv+0x43c>
   1246e:	221d      	movs	r2, #29
   12470:	1ad3      	subs	r3, r2, r3
   12472:	465a      	mov	r2, fp
   12474:	0001      	movs	r1, r0
   12476:	40da      	lsrs	r2, r3
   12478:	3908      	subs	r1, #8
   1247a:	408e      	lsls	r6, r1
   1247c:	0013      	movs	r3, r2
   1247e:	4333      	orrs	r3, r6
   12480:	4699      	mov	r9, r3
   12482:	465b      	mov	r3, fp
   12484:	408b      	lsls	r3, r1
   12486:	4698      	mov	r8, r3
   12488:	2300      	movs	r3, #0
   1248a:	4c3c      	ldr	r4, [pc, #240]	; (1257c <__aeabi_ddiv+0x1f0>)
   1248c:	2600      	movs	r6, #0
   1248e:	1a24      	subs	r4, r4, r0
   12490:	9303      	str	r3, [sp, #12]
   12492:	e79f      	b.n	123d4 <__aeabi_ddiv+0x48>
   12494:	4651      	mov	r1, sl
   12496:	465a      	mov	r2, fp
   12498:	4311      	orrs	r1, r2
   1249a:	d129      	bne.n	124f0 <__aeabi_ddiv+0x164>
   1249c:	2200      	movs	r2, #0
   1249e:	4693      	mov	fp, r2
   124a0:	3202      	adds	r2, #2
   124a2:	e7b1      	b.n	12408 <__aeabi_ddiv+0x7c>
   124a4:	4659      	mov	r1, fp
   124a6:	4301      	orrs	r1, r0
   124a8:	d01e      	beq.n	124e8 <__aeabi_ddiv+0x15c>
   124aa:	465b      	mov	r3, fp
   124ac:	2b00      	cmp	r3, #0
   124ae:	d100      	bne.n	124b2 <__aeabi_ddiv+0x126>
   124b0:	e19e      	b.n	127f0 <__aeabi_ddiv+0x464>
   124b2:	4658      	mov	r0, fp
   124b4:	f001 fa54 	bl	13960 <__clzsi2>
   124b8:	0003      	movs	r3, r0
   124ba:	3b0b      	subs	r3, #11
   124bc:	2b1c      	cmp	r3, #28
   124be:	dd00      	ble.n	124c2 <__aeabi_ddiv+0x136>
   124c0:	e18f      	b.n	127e2 <__aeabi_ddiv+0x456>
   124c2:	0002      	movs	r2, r0
   124c4:	4659      	mov	r1, fp
   124c6:	3a08      	subs	r2, #8
   124c8:	4091      	lsls	r1, r2
   124ca:	468b      	mov	fp, r1
   124cc:	211d      	movs	r1, #29
   124ce:	1acb      	subs	r3, r1, r3
   124d0:	4651      	mov	r1, sl
   124d2:	40d9      	lsrs	r1, r3
   124d4:	000b      	movs	r3, r1
   124d6:	4659      	mov	r1, fp
   124d8:	430b      	orrs	r3, r1
   124da:	4651      	mov	r1, sl
   124dc:	469b      	mov	fp, r3
   124de:	4091      	lsls	r1, r2
   124e0:	4b26      	ldr	r3, [pc, #152]	; (1257c <__aeabi_ddiv+0x1f0>)
   124e2:	2200      	movs	r2, #0
   124e4:	1a1b      	subs	r3, r3, r0
   124e6:	e78f      	b.n	12408 <__aeabi_ddiv+0x7c>
   124e8:	2300      	movs	r3, #0
   124ea:	2201      	movs	r2, #1
   124ec:	469b      	mov	fp, r3
   124ee:	e78b      	b.n	12408 <__aeabi_ddiv+0x7c>
   124f0:	4651      	mov	r1, sl
   124f2:	2203      	movs	r2, #3
   124f4:	e788      	b.n	12408 <__aeabi_ddiv+0x7c>
   124f6:	2300      	movs	r3, #0
   124f8:	4698      	mov	r8, r3
   124fa:	3301      	adds	r3, #1
   124fc:	2604      	movs	r6, #4
   124fe:	2400      	movs	r4, #0
   12500:	9303      	str	r3, [sp, #12]
   12502:	e767      	b.n	123d4 <__aeabi_ddiv+0x48>
   12504:	2303      	movs	r3, #3
   12506:	46b1      	mov	r9, r6
   12508:	9303      	str	r3, [sp, #12]
   1250a:	260c      	movs	r6, #12
   1250c:	e762      	b.n	123d4 <__aeabi_ddiv+0x48>
   1250e:	2a03      	cmp	r2, #3
   12510:	d100      	bne.n	12514 <__aeabi_ddiv+0x188>
   12512:	e25c      	b.n	129ce <__aeabi_ddiv+0x642>
   12514:	9b01      	ldr	r3, [sp, #4]
   12516:	2a01      	cmp	r2, #1
   12518:	d000      	beq.n	1251c <__aeabi_ddiv+0x190>
   1251a:	e1e4      	b.n	128e6 <__aeabi_ddiv+0x55a>
   1251c:	4013      	ands	r3, r2
   1251e:	469c      	mov	ip, r3
   12520:	2300      	movs	r3, #0
   12522:	2400      	movs	r4, #0
   12524:	2200      	movs	r2, #0
   12526:	4698      	mov	r8, r3
   12528:	2100      	movs	r1, #0
   1252a:	0312      	lsls	r2, r2, #12
   1252c:	0b13      	lsrs	r3, r2, #12
   1252e:	0d0a      	lsrs	r2, r1, #20
   12530:	0512      	lsls	r2, r2, #20
   12532:	431a      	orrs	r2, r3
   12534:	0523      	lsls	r3, r4, #20
   12536:	4c12      	ldr	r4, [pc, #72]	; (12580 <__aeabi_ddiv+0x1f4>)
   12538:	4640      	mov	r0, r8
   1253a:	4022      	ands	r2, r4
   1253c:	4313      	orrs	r3, r2
   1253e:	4662      	mov	r2, ip
   12540:	005b      	lsls	r3, r3, #1
   12542:	07d2      	lsls	r2, r2, #31
   12544:	085b      	lsrs	r3, r3, #1
   12546:	4313      	orrs	r3, r2
   12548:	0019      	movs	r1, r3
   1254a:	b007      	add	sp, #28
   1254c:	bc3c      	pop	{r2, r3, r4, r5}
   1254e:	4690      	mov	r8, r2
   12550:	4699      	mov	r9, r3
   12552:	46a2      	mov	sl, r4
   12554:	46ab      	mov	fp, r5
   12556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12558:	2300      	movs	r3, #0
   1255a:	2280      	movs	r2, #128	; 0x80
   1255c:	469c      	mov	ip, r3
   1255e:	0312      	lsls	r2, r2, #12
   12560:	4698      	mov	r8, r3
   12562:	4c03      	ldr	r4, [pc, #12]	; (12570 <__aeabi_ddiv+0x1e4>)
   12564:	e7e0      	b.n	12528 <__aeabi_ddiv+0x19c>
   12566:	2300      	movs	r3, #0
   12568:	4c01      	ldr	r4, [pc, #4]	; (12570 <__aeabi_ddiv+0x1e4>)
   1256a:	2200      	movs	r2, #0
   1256c:	4698      	mov	r8, r3
   1256e:	e7db      	b.n	12528 <__aeabi_ddiv+0x19c>
   12570:	000007ff 	.word	0x000007ff
   12574:	fffffc01 	.word	0xfffffc01
   12578:	00015428 	.word	0x00015428
   1257c:	fffffc0d 	.word	0xfffffc0d
   12580:	800fffff 	.word	0x800fffff
   12584:	45d9      	cmp	r9, fp
   12586:	d900      	bls.n	1258a <__aeabi_ddiv+0x1fe>
   12588:	e139      	b.n	127fe <__aeabi_ddiv+0x472>
   1258a:	d100      	bne.n	1258e <__aeabi_ddiv+0x202>
   1258c:	e134      	b.n	127f8 <__aeabi_ddiv+0x46c>
   1258e:	2300      	movs	r3, #0
   12590:	4646      	mov	r6, r8
   12592:	464d      	mov	r5, r9
   12594:	469a      	mov	sl, r3
   12596:	3c01      	subs	r4, #1
   12598:	465b      	mov	r3, fp
   1259a:	0e0a      	lsrs	r2, r1, #24
   1259c:	021b      	lsls	r3, r3, #8
   1259e:	431a      	orrs	r2, r3
   125a0:	020b      	lsls	r3, r1, #8
   125a2:	0c17      	lsrs	r7, r2, #16
   125a4:	9303      	str	r3, [sp, #12]
   125a6:	0413      	lsls	r3, r2, #16
   125a8:	0c1b      	lsrs	r3, r3, #16
   125aa:	0039      	movs	r1, r7
   125ac:	0028      	movs	r0, r5
   125ae:	4690      	mov	r8, r2
   125b0:	9301      	str	r3, [sp, #4]
   125b2:	f7fe ff45 	bl	11440 <__udivsi3>
   125b6:	0002      	movs	r2, r0
   125b8:	9b01      	ldr	r3, [sp, #4]
   125ba:	4683      	mov	fp, r0
   125bc:	435a      	muls	r2, r3
   125be:	0028      	movs	r0, r5
   125c0:	0039      	movs	r1, r7
   125c2:	4691      	mov	r9, r2
   125c4:	f7fe ffc2 	bl	1154c <__aeabi_uidivmod>
   125c8:	0c35      	lsrs	r5, r6, #16
   125ca:	0409      	lsls	r1, r1, #16
   125cc:	430d      	orrs	r5, r1
   125ce:	45a9      	cmp	r9, r5
   125d0:	d90d      	bls.n	125ee <__aeabi_ddiv+0x262>
   125d2:	465b      	mov	r3, fp
   125d4:	4445      	add	r5, r8
   125d6:	3b01      	subs	r3, #1
   125d8:	45a8      	cmp	r8, r5
   125da:	d900      	bls.n	125de <__aeabi_ddiv+0x252>
   125dc:	e13a      	b.n	12854 <__aeabi_ddiv+0x4c8>
   125de:	45a9      	cmp	r9, r5
   125e0:	d800      	bhi.n	125e4 <__aeabi_ddiv+0x258>
   125e2:	e137      	b.n	12854 <__aeabi_ddiv+0x4c8>
   125e4:	2302      	movs	r3, #2
   125e6:	425b      	negs	r3, r3
   125e8:	469c      	mov	ip, r3
   125ea:	4445      	add	r5, r8
   125ec:	44e3      	add	fp, ip
   125ee:	464b      	mov	r3, r9
   125f0:	1aeb      	subs	r3, r5, r3
   125f2:	0039      	movs	r1, r7
   125f4:	0018      	movs	r0, r3
   125f6:	9304      	str	r3, [sp, #16]
   125f8:	f7fe ff22 	bl	11440 <__udivsi3>
   125fc:	9b01      	ldr	r3, [sp, #4]
   125fe:	0005      	movs	r5, r0
   12600:	4343      	muls	r3, r0
   12602:	0039      	movs	r1, r7
   12604:	9804      	ldr	r0, [sp, #16]
   12606:	4699      	mov	r9, r3
   12608:	f7fe ffa0 	bl	1154c <__aeabi_uidivmod>
   1260c:	0433      	lsls	r3, r6, #16
   1260e:	0409      	lsls	r1, r1, #16
   12610:	0c1b      	lsrs	r3, r3, #16
   12612:	430b      	orrs	r3, r1
   12614:	4599      	cmp	r9, r3
   12616:	d909      	bls.n	1262c <__aeabi_ddiv+0x2a0>
   12618:	4443      	add	r3, r8
   1261a:	1e6a      	subs	r2, r5, #1
   1261c:	4598      	cmp	r8, r3
   1261e:	d900      	bls.n	12622 <__aeabi_ddiv+0x296>
   12620:	e11a      	b.n	12858 <__aeabi_ddiv+0x4cc>
   12622:	4599      	cmp	r9, r3
   12624:	d800      	bhi.n	12628 <__aeabi_ddiv+0x29c>
   12626:	e117      	b.n	12858 <__aeabi_ddiv+0x4cc>
   12628:	3d02      	subs	r5, #2
   1262a:	4443      	add	r3, r8
   1262c:	464a      	mov	r2, r9
   1262e:	1a9b      	subs	r3, r3, r2
   12630:	465a      	mov	r2, fp
   12632:	0412      	lsls	r2, r2, #16
   12634:	432a      	orrs	r2, r5
   12636:	9903      	ldr	r1, [sp, #12]
   12638:	4693      	mov	fp, r2
   1263a:	0c10      	lsrs	r0, r2, #16
   1263c:	0c0a      	lsrs	r2, r1, #16
   1263e:	4691      	mov	r9, r2
   12640:	0409      	lsls	r1, r1, #16
   12642:	465a      	mov	r2, fp
   12644:	0c09      	lsrs	r1, r1, #16
   12646:	464e      	mov	r6, r9
   12648:	000d      	movs	r5, r1
   1264a:	0412      	lsls	r2, r2, #16
   1264c:	0c12      	lsrs	r2, r2, #16
   1264e:	4345      	muls	r5, r0
   12650:	9105      	str	r1, [sp, #20]
   12652:	4351      	muls	r1, r2
   12654:	4372      	muls	r2, r6
   12656:	4370      	muls	r0, r6
   12658:	1952      	adds	r2, r2, r5
   1265a:	0c0e      	lsrs	r6, r1, #16
   1265c:	18b2      	adds	r2, r6, r2
   1265e:	4295      	cmp	r5, r2
   12660:	d903      	bls.n	1266a <__aeabi_ddiv+0x2de>
   12662:	2580      	movs	r5, #128	; 0x80
   12664:	026d      	lsls	r5, r5, #9
   12666:	46ac      	mov	ip, r5
   12668:	4460      	add	r0, ip
   1266a:	0c15      	lsrs	r5, r2, #16
   1266c:	0409      	lsls	r1, r1, #16
   1266e:	0412      	lsls	r2, r2, #16
   12670:	0c09      	lsrs	r1, r1, #16
   12672:	1828      	adds	r0, r5, r0
   12674:	1852      	adds	r2, r2, r1
   12676:	4283      	cmp	r3, r0
   12678:	d200      	bcs.n	1267c <__aeabi_ddiv+0x2f0>
   1267a:	e0ce      	b.n	1281a <__aeabi_ddiv+0x48e>
   1267c:	d100      	bne.n	12680 <__aeabi_ddiv+0x2f4>
   1267e:	e0c8      	b.n	12812 <__aeabi_ddiv+0x486>
   12680:	1a1d      	subs	r5, r3, r0
   12682:	4653      	mov	r3, sl
   12684:	1a9e      	subs	r6, r3, r2
   12686:	45b2      	cmp	sl, r6
   12688:	4192      	sbcs	r2, r2
   1268a:	4252      	negs	r2, r2
   1268c:	1aab      	subs	r3, r5, r2
   1268e:	469a      	mov	sl, r3
   12690:	4598      	cmp	r8, r3
   12692:	d100      	bne.n	12696 <__aeabi_ddiv+0x30a>
   12694:	e117      	b.n	128c6 <__aeabi_ddiv+0x53a>
   12696:	0039      	movs	r1, r7
   12698:	0018      	movs	r0, r3
   1269a:	f7fe fed1 	bl	11440 <__udivsi3>
   1269e:	9b01      	ldr	r3, [sp, #4]
   126a0:	0005      	movs	r5, r0
   126a2:	4343      	muls	r3, r0
   126a4:	0039      	movs	r1, r7
   126a6:	4650      	mov	r0, sl
   126a8:	9304      	str	r3, [sp, #16]
   126aa:	f7fe ff4f 	bl	1154c <__aeabi_uidivmod>
   126ae:	9804      	ldr	r0, [sp, #16]
   126b0:	040b      	lsls	r3, r1, #16
   126b2:	0c31      	lsrs	r1, r6, #16
   126b4:	4319      	orrs	r1, r3
   126b6:	4288      	cmp	r0, r1
   126b8:	d909      	bls.n	126ce <__aeabi_ddiv+0x342>
   126ba:	4441      	add	r1, r8
   126bc:	1e6b      	subs	r3, r5, #1
   126be:	4588      	cmp	r8, r1
   126c0:	d900      	bls.n	126c4 <__aeabi_ddiv+0x338>
   126c2:	e107      	b.n	128d4 <__aeabi_ddiv+0x548>
   126c4:	4288      	cmp	r0, r1
   126c6:	d800      	bhi.n	126ca <__aeabi_ddiv+0x33e>
   126c8:	e104      	b.n	128d4 <__aeabi_ddiv+0x548>
   126ca:	3d02      	subs	r5, #2
   126cc:	4441      	add	r1, r8
   126ce:	9b04      	ldr	r3, [sp, #16]
   126d0:	1acb      	subs	r3, r1, r3
   126d2:	0018      	movs	r0, r3
   126d4:	0039      	movs	r1, r7
   126d6:	9304      	str	r3, [sp, #16]
   126d8:	f7fe feb2 	bl	11440 <__udivsi3>
   126dc:	9b01      	ldr	r3, [sp, #4]
   126de:	4682      	mov	sl, r0
   126e0:	4343      	muls	r3, r0
   126e2:	0039      	movs	r1, r7
   126e4:	9804      	ldr	r0, [sp, #16]
   126e6:	9301      	str	r3, [sp, #4]
   126e8:	f7fe ff30 	bl	1154c <__aeabi_uidivmod>
   126ec:	9801      	ldr	r0, [sp, #4]
   126ee:	040b      	lsls	r3, r1, #16
   126f0:	0431      	lsls	r1, r6, #16
   126f2:	0c09      	lsrs	r1, r1, #16
   126f4:	4319      	orrs	r1, r3
   126f6:	4288      	cmp	r0, r1
   126f8:	d90d      	bls.n	12716 <__aeabi_ddiv+0x38a>
   126fa:	4653      	mov	r3, sl
   126fc:	4441      	add	r1, r8
   126fe:	3b01      	subs	r3, #1
   12700:	4588      	cmp	r8, r1
   12702:	d900      	bls.n	12706 <__aeabi_ddiv+0x37a>
   12704:	e0e8      	b.n	128d8 <__aeabi_ddiv+0x54c>
   12706:	4288      	cmp	r0, r1
   12708:	d800      	bhi.n	1270c <__aeabi_ddiv+0x380>
   1270a:	e0e5      	b.n	128d8 <__aeabi_ddiv+0x54c>
   1270c:	2302      	movs	r3, #2
   1270e:	425b      	negs	r3, r3
   12710:	469c      	mov	ip, r3
   12712:	4441      	add	r1, r8
   12714:	44e2      	add	sl, ip
   12716:	9b01      	ldr	r3, [sp, #4]
   12718:	042d      	lsls	r5, r5, #16
   1271a:	1ace      	subs	r6, r1, r3
   1271c:	4651      	mov	r1, sl
   1271e:	4329      	orrs	r1, r5
   12720:	9d05      	ldr	r5, [sp, #20]
   12722:	464f      	mov	r7, r9
   12724:	002a      	movs	r2, r5
   12726:	040b      	lsls	r3, r1, #16
   12728:	0c08      	lsrs	r0, r1, #16
   1272a:	0c1b      	lsrs	r3, r3, #16
   1272c:	435a      	muls	r2, r3
   1272e:	4345      	muls	r5, r0
   12730:	437b      	muls	r3, r7
   12732:	4378      	muls	r0, r7
   12734:	195b      	adds	r3, r3, r5
   12736:	0c17      	lsrs	r7, r2, #16
   12738:	18fb      	adds	r3, r7, r3
   1273a:	429d      	cmp	r5, r3
   1273c:	d903      	bls.n	12746 <__aeabi_ddiv+0x3ba>
   1273e:	2580      	movs	r5, #128	; 0x80
   12740:	026d      	lsls	r5, r5, #9
   12742:	46ac      	mov	ip, r5
   12744:	4460      	add	r0, ip
   12746:	0c1d      	lsrs	r5, r3, #16
   12748:	0412      	lsls	r2, r2, #16
   1274a:	041b      	lsls	r3, r3, #16
   1274c:	0c12      	lsrs	r2, r2, #16
   1274e:	1828      	adds	r0, r5, r0
   12750:	189b      	adds	r3, r3, r2
   12752:	4286      	cmp	r6, r0
   12754:	d200      	bcs.n	12758 <__aeabi_ddiv+0x3cc>
   12756:	e093      	b.n	12880 <__aeabi_ddiv+0x4f4>
   12758:	d100      	bne.n	1275c <__aeabi_ddiv+0x3d0>
   1275a:	e08e      	b.n	1287a <__aeabi_ddiv+0x4ee>
   1275c:	2301      	movs	r3, #1
   1275e:	4319      	orrs	r1, r3
   12760:	4ba0      	ldr	r3, [pc, #640]	; (129e4 <__aeabi_ddiv+0x658>)
   12762:	18e3      	adds	r3, r4, r3
   12764:	2b00      	cmp	r3, #0
   12766:	dc00      	bgt.n	1276a <__aeabi_ddiv+0x3de>
   12768:	e099      	b.n	1289e <__aeabi_ddiv+0x512>
   1276a:	074a      	lsls	r2, r1, #29
   1276c:	d000      	beq.n	12770 <__aeabi_ddiv+0x3e4>
   1276e:	e09e      	b.n	128ae <__aeabi_ddiv+0x522>
   12770:	465a      	mov	r2, fp
   12772:	01d2      	lsls	r2, r2, #7
   12774:	d506      	bpl.n	12784 <__aeabi_ddiv+0x3f8>
   12776:	465a      	mov	r2, fp
   12778:	4b9b      	ldr	r3, [pc, #620]	; (129e8 <__aeabi_ddiv+0x65c>)
   1277a:	401a      	ands	r2, r3
   1277c:	2380      	movs	r3, #128	; 0x80
   1277e:	4693      	mov	fp, r2
   12780:	00db      	lsls	r3, r3, #3
   12782:	18e3      	adds	r3, r4, r3
   12784:	4a99      	ldr	r2, [pc, #612]	; (129ec <__aeabi_ddiv+0x660>)
   12786:	4293      	cmp	r3, r2
   12788:	dd68      	ble.n	1285c <__aeabi_ddiv+0x4d0>
   1278a:	2301      	movs	r3, #1
   1278c:	9a02      	ldr	r2, [sp, #8]
   1278e:	4c98      	ldr	r4, [pc, #608]	; (129f0 <__aeabi_ddiv+0x664>)
   12790:	401a      	ands	r2, r3
   12792:	2300      	movs	r3, #0
   12794:	4694      	mov	ip, r2
   12796:	4698      	mov	r8, r3
   12798:	2200      	movs	r2, #0
   1279a:	e6c5      	b.n	12528 <__aeabi_ddiv+0x19c>
   1279c:	2280      	movs	r2, #128	; 0x80
   1279e:	464b      	mov	r3, r9
   127a0:	0312      	lsls	r2, r2, #12
   127a2:	4213      	tst	r3, r2
   127a4:	d00a      	beq.n	127bc <__aeabi_ddiv+0x430>
   127a6:	465b      	mov	r3, fp
   127a8:	4213      	tst	r3, r2
   127aa:	d106      	bne.n	127ba <__aeabi_ddiv+0x42e>
   127ac:	431a      	orrs	r2, r3
   127ae:	0312      	lsls	r2, r2, #12
   127b0:	0b12      	lsrs	r2, r2, #12
   127b2:	46ac      	mov	ip, r5
   127b4:	4688      	mov	r8, r1
   127b6:	4c8e      	ldr	r4, [pc, #568]	; (129f0 <__aeabi_ddiv+0x664>)
   127b8:	e6b6      	b.n	12528 <__aeabi_ddiv+0x19c>
   127ba:	464b      	mov	r3, r9
   127bc:	431a      	orrs	r2, r3
   127be:	0312      	lsls	r2, r2, #12
   127c0:	0b12      	lsrs	r2, r2, #12
   127c2:	46bc      	mov	ip, r7
   127c4:	4c8a      	ldr	r4, [pc, #552]	; (129f0 <__aeabi_ddiv+0x664>)
   127c6:	e6af      	b.n	12528 <__aeabi_ddiv+0x19c>
   127c8:	0003      	movs	r3, r0
   127ca:	465a      	mov	r2, fp
   127cc:	3b28      	subs	r3, #40	; 0x28
   127ce:	409a      	lsls	r2, r3
   127d0:	2300      	movs	r3, #0
   127d2:	4691      	mov	r9, r2
   127d4:	4698      	mov	r8, r3
   127d6:	e657      	b.n	12488 <__aeabi_ddiv+0xfc>
   127d8:	4658      	mov	r0, fp
   127da:	f001 f8c1 	bl	13960 <__clzsi2>
   127de:	3020      	adds	r0, #32
   127e0:	e640      	b.n	12464 <__aeabi_ddiv+0xd8>
   127e2:	0003      	movs	r3, r0
   127e4:	4652      	mov	r2, sl
   127e6:	3b28      	subs	r3, #40	; 0x28
   127e8:	409a      	lsls	r2, r3
   127ea:	2100      	movs	r1, #0
   127ec:	4693      	mov	fp, r2
   127ee:	e677      	b.n	124e0 <__aeabi_ddiv+0x154>
   127f0:	f001 f8b6 	bl	13960 <__clzsi2>
   127f4:	3020      	adds	r0, #32
   127f6:	e65f      	b.n	124b8 <__aeabi_ddiv+0x12c>
   127f8:	4588      	cmp	r8, r1
   127fa:	d200      	bcs.n	127fe <__aeabi_ddiv+0x472>
   127fc:	e6c7      	b.n	1258e <__aeabi_ddiv+0x202>
   127fe:	464b      	mov	r3, r9
   12800:	07de      	lsls	r6, r3, #31
   12802:	085d      	lsrs	r5, r3, #1
   12804:	4643      	mov	r3, r8
   12806:	085b      	lsrs	r3, r3, #1
   12808:	431e      	orrs	r6, r3
   1280a:	4643      	mov	r3, r8
   1280c:	07db      	lsls	r3, r3, #31
   1280e:	469a      	mov	sl, r3
   12810:	e6c2      	b.n	12598 <__aeabi_ddiv+0x20c>
   12812:	2500      	movs	r5, #0
   12814:	4592      	cmp	sl, r2
   12816:	d300      	bcc.n	1281a <__aeabi_ddiv+0x48e>
   12818:	e733      	b.n	12682 <__aeabi_ddiv+0x2f6>
   1281a:	9e03      	ldr	r6, [sp, #12]
   1281c:	4659      	mov	r1, fp
   1281e:	46b4      	mov	ip, r6
   12820:	44e2      	add	sl, ip
   12822:	45b2      	cmp	sl, r6
   12824:	41ad      	sbcs	r5, r5
   12826:	426d      	negs	r5, r5
   12828:	4445      	add	r5, r8
   1282a:	18eb      	adds	r3, r5, r3
   1282c:	3901      	subs	r1, #1
   1282e:	4598      	cmp	r8, r3
   12830:	d207      	bcs.n	12842 <__aeabi_ddiv+0x4b6>
   12832:	4298      	cmp	r0, r3
   12834:	d900      	bls.n	12838 <__aeabi_ddiv+0x4ac>
   12836:	e07f      	b.n	12938 <__aeabi_ddiv+0x5ac>
   12838:	d100      	bne.n	1283c <__aeabi_ddiv+0x4b0>
   1283a:	e0bc      	b.n	129b6 <__aeabi_ddiv+0x62a>
   1283c:	1a1d      	subs	r5, r3, r0
   1283e:	468b      	mov	fp, r1
   12840:	e71f      	b.n	12682 <__aeabi_ddiv+0x2f6>
   12842:	4598      	cmp	r8, r3
   12844:	d1fa      	bne.n	1283c <__aeabi_ddiv+0x4b0>
   12846:	9d03      	ldr	r5, [sp, #12]
   12848:	4555      	cmp	r5, sl
   1284a:	d9f2      	bls.n	12832 <__aeabi_ddiv+0x4a6>
   1284c:	4643      	mov	r3, r8
   1284e:	468b      	mov	fp, r1
   12850:	1a1d      	subs	r5, r3, r0
   12852:	e716      	b.n	12682 <__aeabi_ddiv+0x2f6>
   12854:	469b      	mov	fp, r3
   12856:	e6ca      	b.n	125ee <__aeabi_ddiv+0x262>
   12858:	0015      	movs	r5, r2
   1285a:	e6e7      	b.n	1262c <__aeabi_ddiv+0x2a0>
   1285c:	465a      	mov	r2, fp
   1285e:	08c9      	lsrs	r1, r1, #3
   12860:	0752      	lsls	r2, r2, #29
   12862:	430a      	orrs	r2, r1
   12864:	055b      	lsls	r3, r3, #21
   12866:	4690      	mov	r8, r2
   12868:	0d5c      	lsrs	r4, r3, #21
   1286a:	465a      	mov	r2, fp
   1286c:	2301      	movs	r3, #1
   1286e:	9902      	ldr	r1, [sp, #8]
   12870:	0252      	lsls	r2, r2, #9
   12872:	4019      	ands	r1, r3
   12874:	0b12      	lsrs	r2, r2, #12
   12876:	468c      	mov	ip, r1
   12878:	e656      	b.n	12528 <__aeabi_ddiv+0x19c>
   1287a:	2b00      	cmp	r3, #0
   1287c:	d100      	bne.n	12880 <__aeabi_ddiv+0x4f4>
   1287e:	e76f      	b.n	12760 <__aeabi_ddiv+0x3d4>
   12880:	4446      	add	r6, r8
   12882:	1e4a      	subs	r2, r1, #1
   12884:	45b0      	cmp	r8, r6
   12886:	d929      	bls.n	128dc <__aeabi_ddiv+0x550>
   12888:	0011      	movs	r1, r2
   1288a:	4286      	cmp	r6, r0
   1288c:	d000      	beq.n	12890 <__aeabi_ddiv+0x504>
   1288e:	e765      	b.n	1275c <__aeabi_ddiv+0x3d0>
   12890:	9a03      	ldr	r2, [sp, #12]
   12892:	4293      	cmp	r3, r2
   12894:	d000      	beq.n	12898 <__aeabi_ddiv+0x50c>
   12896:	e761      	b.n	1275c <__aeabi_ddiv+0x3d0>
   12898:	e762      	b.n	12760 <__aeabi_ddiv+0x3d4>
   1289a:	2101      	movs	r1, #1
   1289c:	4249      	negs	r1, r1
   1289e:	2001      	movs	r0, #1
   128a0:	1ac2      	subs	r2, r0, r3
   128a2:	2a38      	cmp	r2, #56	; 0x38
   128a4:	dd21      	ble.n	128ea <__aeabi_ddiv+0x55e>
   128a6:	9b02      	ldr	r3, [sp, #8]
   128a8:	4003      	ands	r3, r0
   128aa:	469c      	mov	ip, r3
   128ac:	e638      	b.n	12520 <__aeabi_ddiv+0x194>
   128ae:	220f      	movs	r2, #15
   128b0:	400a      	ands	r2, r1
   128b2:	2a04      	cmp	r2, #4
   128b4:	d100      	bne.n	128b8 <__aeabi_ddiv+0x52c>
   128b6:	e75b      	b.n	12770 <__aeabi_ddiv+0x3e4>
   128b8:	000a      	movs	r2, r1
   128ba:	1d11      	adds	r1, r2, #4
   128bc:	4291      	cmp	r1, r2
   128be:	4192      	sbcs	r2, r2
   128c0:	4252      	negs	r2, r2
   128c2:	4493      	add	fp, r2
   128c4:	e754      	b.n	12770 <__aeabi_ddiv+0x3e4>
   128c6:	4b47      	ldr	r3, [pc, #284]	; (129e4 <__aeabi_ddiv+0x658>)
   128c8:	18e3      	adds	r3, r4, r3
   128ca:	2b00      	cmp	r3, #0
   128cc:	dde5      	ble.n	1289a <__aeabi_ddiv+0x50e>
   128ce:	2201      	movs	r2, #1
   128d0:	4252      	negs	r2, r2
   128d2:	e7f2      	b.n	128ba <__aeabi_ddiv+0x52e>
   128d4:	001d      	movs	r5, r3
   128d6:	e6fa      	b.n	126ce <__aeabi_ddiv+0x342>
   128d8:	469a      	mov	sl, r3
   128da:	e71c      	b.n	12716 <__aeabi_ddiv+0x38a>
   128dc:	42b0      	cmp	r0, r6
   128de:	d839      	bhi.n	12954 <__aeabi_ddiv+0x5c8>
   128e0:	d06e      	beq.n	129c0 <__aeabi_ddiv+0x634>
   128e2:	0011      	movs	r1, r2
   128e4:	e73a      	b.n	1275c <__aeabi_ddiv+0x3d0>
   128e6:	9302      	str	r3, [sp, #8]
   128e8:	e73a      	b.n	12760 <__aeabi_ddiv+0x3d4>
   128ea:	2a1f      	cmp	r2, #31
   128ec:	dc3c      	bgt.n	12968 <__aeabi_ddiv+0x5dc>
   128ee:	2320      	movs	r3, #32
   128f0:	1a9b      	subs	r3, r3, r2
   128f2:	000c      	movs	r4, r1
   128f4:	4658      	mov	r0, fp
   128f6:	4099      	lsls	r1, r3
   128f8:	4098      	lsls	r0, r3
   128fa:	1e4b      	subs	r3, r1, #1
   128fc:	4199      	sbcs	r1, r3
   128fe:	465b      	mov	r3, fp
   12900:	40d4      	lsrs	r4, r2
   12902:	40d3      	lsrs	r3, r2
   12904:	4320      	orrs	r0, r4
   12906:	4308      	orrs	r0, r1
   12908:	001a      	movs	r2, r3
   1290a:	0743      	lsls	r3, r0, #29
   1290c:	d009      	beq.n	12922 <__aeabi_ddiv+0x596>
   1290e:	230f      	movs	r3, #15
   12910:	4003      	ands	r3, r0
   12912:	2b04      	cmp	r3, #4
   12914:	d005      	beq.n	12922 <__aeabi_ddiv+0x596>
   12916:	0001      	movs	r1, r0
   12918:	1d08      	adds	r0, r1, #4
   1291a:	4288      	cmp	r0, r1
   1291c:	419b      	sbcs	r3, r3
   1291e:	425b      	negs	r3, r3
   12920:	18d2      	adds	r2, r2, r3
   12922:	0213      	lsls	r3, r2, #8
   12924:	d53a      	bpl.n	1299c <__aeabi_ddiv+0x610>
   12926:	2301      	movs	r3, #1
   12928:	9a02      	ldr	r2, [sp, #8]
   1292a:	2401      	movs	r4, #1
   1292c:	401a      	ands	r2, r3
   1292e:	2300      	movs	r3, #0
   12930:	4694      	mov	ip, r2
   12932:	4698      	mov	r8, r3
   12934:	2200      	movs	r2, #0
   12936:	e5f7      	b.n	12528 <__aeabi_ddiv+0x19c>
   12938:	2102      	movs	r1, #2
   1293a:	4249      	negs	r1, r1
   1293c:	468c      	mov	ip, r1
   1293e:	9d03      	ldr	r5, [sp, #12]
   12940:	44e3      	add	fp, ip
   12942:	46ac      	mov	ip, r5
   12944:	44e2      	add	sl, ip
   12946:	45aa      	cmp	sl, r5
   12948:	41ad      	sbcs	r5, r5
   1294a:	426d      	negs	r5, r5
   1294c:	4445      	add	r5, r8
   1294e:	18ed      	adds	r5, r5, r3
   12950:	1a2d      	subs	r5, r5, r0
   12952:	e696      	b.n	12682 <__aeabi_ddiv+0x2f6>
   12954:	1e8a      	subs	r2, r1, #2
   12956:	9903      	ldr	r1, [sp, #12]
   12958:	004d      	lsls	r5, r1, #1
   1295a:	428d      	cmp	r5, r1
   1295c:	4189      	sbcs	r1, r1
   1295e:	4249      	negs	r1, r1
   12960:	4441      	add	r1, r8
   12962:	1876      	adds	r6, r6, r1
   12964:	9503      	str	r5, [sp, #12]
   12966:	e78f      	b.n	12888 <__aeabi_ddiv+0x4fc>
   12968:	201f      	movs	r0, #31
   1296a:	4240      	negs	r0, r0
   1296c:	1ac3      	subs	r3, r0, r3
   1296e:	4658      	mov	r0, fp
   12970:	40d8      	lsrs	r0, r3
   12972:	0003      	movs	r3, r0
   12974:	2a20      	cmp	r2, #32
   12976:	d028      	beq.n	129ca <__aeabi_ddiv+0x63e>
   12978:	2040      	movs	r0, #64	; 0x40
   1297a:	465d      	mov	r5, fp
   1297c:	1a82      	subs	r2, r0, r2
   1297e:	4095      	lsls	r5, r2
   12980:	4329      	orrs	r1, r5
   12982:	1e4a      	subs	r2, r1, #1
   12984:	4191      	sbcs	r1, r2
   12986:	4319      	orrs	r1, r3
   12988:	2307      	movs	r3, #7
   1298a:	2200      	movs	r2, #0
   1298c:	400b      	ands	r3, r1
   1298e:	d009      	beq.n	129a4 <__aeabi_ddiv+0x618>
   12990:	230f      	movs	r3, #15
   12992:	2200      	movs	r2, #0
   12994:	400b      	ands	r3, r1
   12996:	0008      	movs	r0, r1
   12998:	2b04      	cmp	r3, #4
   1299a:	d1bd      	bne.n	12918 <__aeabi_ddiv+0x58c>
   1299c:	0001      	movs	r1, r0
   1299e:	0753      	lsls	r3, r2, #29
   129a0:	0252      	lsls	r2, r2, #9
   129a2:	0b12      	lsrs	r2, r2, #12
   129a4:	08c9      	lsrs	r1, r1, #3
   129a6:	4319      	orrs	r1, r3
   129a8:	2301      	movs	r3, #1
   129aa:	4688      	mov	r8, r1
   129ac:	9902      	ldr	r1, [sp, #8]
   129ae:	2400      	movs	r4, #0
   129b0:	4019      	ands	r1, r3
   129b2:	468c      	mov	ip, r1
   129b4:	e5b8      	b.n	12528 <__aeabi_ddiv+0x19c>
   129b6:	4552      	cmp	r2, sl
   129b8:	d8be      	bhi.n	12938 <__aeabi_ddiv+0x5ac>
   129ba:	468b      	mov	fp, r1
   129bc:	2500      	movs	r5, #0
   129be:	e660      	b.n	12682 <__aeabi_ddiv+0x2f6>
   129c0:	9d03      	ldr	r5, [sp, #12]
   129c2:	429d      	cmp	r5, r3
   129c4:	d3c6      	bcc.n	12954 <__aeabi_ddiv+0x5c8>
   129c6:	0011      	movs	r1, r2
   129c8:	e762      	b.n	12890 <__aeabi_ddiv+0x504>
   129ca:	2500      	movs	r5, #0
   129cc:	e7d8      	b.n	12980 <__aeabi_ddiv+0x5f4>
   129ce:	2280      	movs	r2, #128	; 0x80
   129d0:	465b      	mov	r3, fp
   129d2:	0312      	lsls	r2, r2, #12
   129d4:	431a      	orrs	r2, r3
   129d6:	9b01      	ldr	r3, [sp, #4]
   129d8:	0312      	lsls	r2, r2, #12
   129da:	0b12      	lsrs	r2, r2, #12
   129dc:	469c      	mov	ip, r3
   129de:	4688      	mov	r8, r1
   129e0:	4c03      	ldr	r4, [pc, #12]	; (129f0 <__aeabi_ddiv+0x664>)
   129e2:	e5a1      	b.n	12528 <__aeabi_ddiv+0x19c>
   129e4:	000003ff 	.word	0x000003ff
   129e8:	feffffff 	.word	0xfeffffff
   129ec:	000007fe 	.word	0x000007fe
   129f0:	000007ff 	.word	0x000007ff

000129f4 <__eqdf2>:
   129f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   129f6:	464f      	mov	r7, r9
   129f8:	4646      	mov	r6, r8
   129fa:	46d6      	mov	lr, sl
   129fc:	005c      	lsls	r4, r3, #1
   129fe:	b5c0      	push	{r6, r7, lr}
   12a00:	031f      	lsls	r7, r3, #12
   12a02:	0fdb      	lsrs	r3, r3, #31
   12a04:	469a      	mov	sl, r3
   12a06:	4b17      	ldr	r3, [pc, #92]	; (12a64 <__eqdf2+0x70>)
   12a08:	030e      	lsls	r6, r1, #12
   12a0a:	004d      	lsls	r5, r1, #1
   12a0c:	4684      	mov	ip, r0
   12a0e:	4680      	mov	r8, r0
   12a10:	0b36      	lsrs	r6, r6, #12
   12a12:	0d6d      	lsrs	r5, r5, #21
   12a14:	0fc9      	lsrs	r1, r1, #31
   12a16:	4691      	mov	r9, r2
   12a18:	0b3f      	lsrs	r7, r7, #12
   12a1a:	0d64      	lsrs	r4, r4, #21
   12a1c:	2001      	movs	r0, #1
   12a1e:	429d      	cmp	r5, r3
   12a20:	d008      	beq.n	12a34 <__eqdf2+0x40>
   12a22:	429c      	cmp	r4, r3
   12a24:	d001      	beq.n	12a2a <__eqdf2+0x36>
   12a26:	42a5      	cmp	r5, r4
   12a28:	d00b      	beq.n	12a42 <__eqdf2+0x4e>
   12a2a:	bc1c      	pop	{r2, r3, r4}
   12a2c:	4690      	mov	r8, r2
   12a2e:	4699      	mov	r9, r3
   12a30:	46a2      	mov	sl, r4
   12a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a34:	4663      	mov	r3, ip
   12a36:	4333      	orrs	r3, r6
   12a38:	d1f7      	bne.n	12a2a <__eqdf2+0x36>
   12a3a:	42ac      	cmp	r4, r5
   12a3c:	d1f5      	bne.n	12a2a <__eqdf2+0x36>
   12a3e:	433a      	orrs	r2, r7
   12a40:	d1f3      	bne.n	12a2a <__eqdf2+0x36>
   12a42:	2001      	movs	r0, #1
   12a44:	42be      	cmp	r6, r7
   12a46:	d1f0      	bne.n	12a2a <__eqdf2+0x36>
   12a48:	45c8      	cmp	r8, r9
   12a4a:	d1ee      	bne.n	12a2a <__eqdf2+0x36>
   12a4c:	4551      	cmp	r1, sl
   12a4e:	d007      	beq.n	12a60 <__eqdf2+0x6c>
   12a50:	2d00      	cmp	r5, #0
   12a52:	d1ea      	bne.n	12a2a <__eqdf2+0x36>
   12a54:	4663      	mov	r3, ip
   12a56:	431e      	orrs	r6, r3
   12a58:	0030      	movs	r0, r6
   12a5a:	1e46      	subs	r6, r0, #1
   12a5c:	41b0      	sbcs	r0, r6
   12a5e:	e7e4      	b.n	12a2a <__eqdf2+0x36>
   12a60:	2000      	movs	r0, #0
   12a62:	e7e2      	b.n	12a2a <__eqdf2+0x36>
   12a64:	000007ff 	.word	0x000007ff

00012a68 <__gedf2>:
   12a68:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a6a:	4645      	mov	r5, r8
   12a6c:	46de      	mov	lr, fp
   12a6e:	4657      	mov	r7, sl
   12a70:	464e      	mov	r6, r9
   12a72:	b5e0      	push	{r5, r6, r7, lr}
   12a74:	031f      	lsls	r7, r3, #12
   12a76:	0b3d      	lsrs	r5, r7, #12
   12a78:	4f2c      	ldr	r7, [pc, #176]	; (12b2c <__gedf2+0xc4>)
   12a7a:	030e      	lsls	r6, r1, #12
   12a7c:	004c      	lsls	r4, r1, #1
   12a7e:	46ab      	mov	fp, r5
   12a80:	005d      	lsls	r5, r3, #1
   12a82:	4684      	mov	ip, r0
   12a84:	0b36      	lsrs	r6, r6, #12
   12a86:	0d64      	lsrs	r4, r4, #21
   12a88:	0fc9      	lsrs	r1, r1, #31
   12a8a:	4690      	mov	r8, r2
   12a8c:	0d6d      	lsrs	r5, r5, #21
   12a8e:	0fdb      	lsrs	r3, r3, #31
   12a90:	42bc      	cmp	r4, r7
   12a92:	d02a      	beq.n	12aea <__gedf2+0x82>
   12a94:	4f25      	ldr	r7, [pc, #148]	; (12b2c <__gedf2+0xc4>)
   12a96:	42bd      	cmp	r5, r7
   12a98:	d02d      	beq.n	12af6 <__gedf2+0x8e>
   12a9a:	2c00      	cmp	r4, #0
   12a9c:	d10f      	bne.n	12abe <__gedf2+0x56>
   12a9e:	4330      	orrs	r0, r6
   12aa0:	0007      	movs	r7, r0
   12aa2:	4681      	mov	r9, r0
   12aa4:	4278      	negs	r0, r7
   12aa6:	4178      	adcs	r0, r7
   12aa8:	b2c0      	uxtb	r0, r0
   12aaa:	2d00      	cmp	r5, #0
   12aac:	d117      	bne.n	12ade <__gedf2+0x76>
   12aae:	465f      	mov	r7, fp
   12ab0:	433a      	orrs	r2, r7
   12ab2:	d114      	bne.n	12ade <__gedf2+0x76>
   12ab4:	464b      	mov	r3, r9
   12ab6:	2000      	movs	r0, #0
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d00a      	beq.n	12ad2 <__gedf2+0x6a>
   12abc:	e006      	b.n	12acc <__gedf2+0x64>
   12abe:	2d00      	cmp	r5, #0
   12ac0:	d102      	bne.n	12ac8 <__gedf2+0x60>
   12ac2:	4658      	mov	r0, fp
   12ac4:	4302      	orrs	r2, r0
   12ac6:	d001      	beq.n	12acc <__gedf2+0x64>
   12ac8:	4299      	cmp	r1, r3
   12aca:	d018      	beq.n	12afe <__gedf2+0x96>
   12acc:	4248      	negs	r0, r1
   12ace:	2101      	movs	r1, #1
   12ad0:	4308      	orrs	r0, r1
   12ad2:	bc3c      	pop	{r2, r3, r4, r5}
   12ad4:	4690      	mov	r8, r2
   12ad6:	4699      	mov	r9, r3
   12ad8:	46a2      	mov	sl, r4
   12ada:	46ab      	mov	fp, r5
   12adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ade:	2800      	cmp	r0, #0
   12ae0:	d0f2      	beq.n	12ac8 <__gedf2+0x60>
   12ae2:	2001      	movs	r0, #1
   12ae4:	3b01      	subs	r3, #1
   12ae6:	4318      	orrs	r0, r3
   12ae8:	e7f3      	b.n	12ad2 <__gedf2+0x6a>
   12aea:	0037      	movs	r7, r6
   12aec:	4307      	orrs	r7, r0
   12aee:	d0d1      	beq.n	12a94 <__gedf2+0x2c>
   12af0:	2002      	movs	r0, #2
   12af2:	4240      	negs	r0, r0
   12af4:	e7ed      	b.n	12ad2 <__gedf2+0x6a>
   12af6:	465f      	mov	r7, fp
   12af8:	4317      	orrs	r7, r2
   12afa:	d0ce      	beq.n	12a9a <__gedf2+0x32>
   12afc:	e7f8      	b.n	12af0 <__gedf2+0x88>
   12afe:	42ac      	cmp	r4, r5
   12b00:	dce4      	bgt.n	12acc <__gedf2+0x64>
   12b02:	da03      	bge.n	12b0c <__gedf2+0xa4>
   12b04:	1e48      	subs	r0, r1, #1
   12b06:	2101      	movs	r1, #1
   12b08:	4308      	orrs	r0, r1
   12b0a:	e7e2      	b.n	12ad2 <__gedf2+0x6a>
   12b0c:	455e      	cmp	r6, fp
   12b0e:	d8dd      	bhi.n	12acc <__gedf2+0x64>
   12b10:	d006      	beq.n	12b20 <__gedf2+0xb8>
   12b12:	2000      	movs	r0, #0
   12b14:	455e      	cmp	r6, fp
   12b16:	d2dc      	bcs.n	12ad2 <__gedf2+0x6a>
   12b18:	2301      	movs	r3, #1
   12b1a:	1e48      	subs	r0, r1, #1
   12b1c:	4318      	orrs	r0, r3
   12b1e:	e7d8      	b.n	12ad2 <__gedf2+0x6a>
   12b20:	45c4      	cmp	ip, r8
   12b22:	d8d3      	bhi.n	12acc <__gedf2+0x64>
   12b24:	2000      	movs	r0, #0
   12b26:	45c4      	cmp	ip, r8
   12b28:	d3f6      	bcc.n	12b18 <__gedf2+0xb0>
   12b2a:	e7d2      	b.n	12ad2 <__gedf2+0x6a>
   12b2c:	000007ff 	.word	0x000007ff

00012b30 <__ledf2>:
   12b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b32:	464e      	mov	r6, r9
   12b34:	4645      	mov	r5, r8
   12b36:	46de      	mov	lr, fp
   12b38:	4657      	mov	r7, sl
   12b3a:	005c      	lsls	r4, r3, #1
   12b3c:	b5e0      	push	{r5, r6, r7, lr}
   12b3e:	031f      	lsls	r7, r3, #12
   12b40:	0fdb      	lsrs	r3, r3, #31
   12b42:	4699      	mov	r9, r3
   12b44:	4b2a      	ldr	r3, [pc, #168]	; (12bf0 <__ledf2+0xc0>)
   12b46:	030e      	lsls	r6, r1, #12
   12b48:	004d      	lsls	r5, r1, #1
   12b4a:	0fc9      	lsrs	r1, r1, #31
   12b4c:	4684      	mov	ip, r0
   12b4e:	0b36      	lsrs	r6, r6, #12
   12b50:	0d6d      	lsrs	r5, r5, #21
   12b52:	468b      	mov	fp, r1
   12b54:	4690      	mov	r8, r2
   12b56:	0b3f      	lsrs	r7, r7, #12
   12b58:	0d64      	lsrs	r4, r4, #21
   12b5a:	429d      	cmp	r5, r3
   12b5c:	d020      	beq.n	12ba0 <__ledf2+0x70>
   12b5e:	4b24      	ldr	r3, [pc, #144]	; (12bf0 <__ledf2+0xc0>)
   12b60:	429c      	cmp	r4, r3
   12b62:	d022      	beq.n	12baa <__ledf2+0x7a>
   12b64:	2d00      	cmp	r5, #0
   12b66:	d112      	bne.n	12b8e <__ledf2+0x5e>
   12b68:	4330      	orrs	r0, r6
   12b6a:	4243      	negs	r3, r0
   12b6c:	4143      	adcs	r3, r0
   12b6e:	b2db      	uxtb	r3, r3
   12b70:	2c00      	cmp	r4, #0
   12b72:	d01f      	beq.n	12bb4 <__ledf2+0x84>
   12b74:	2b00      	cmp	r3, #0
   12b76:	d00c      	beq.n	12b92 <__ledf2+0x62>
   12b78:	464b      	mov	r3, r9
   12b7a:	2001      	movs	r0, #1
   12b7c:	3b01      	subs	r3, #1
   12b7e:	4303      	orrs	r3, r0
   12b80:	0018      	movs	r0, r3
   12b82:	bc3c      	pop	{r2, r3, r4, r5}
   12b84:	4690      	mov	r8, r2
   12b86:	4699      	mov	r9, r3
   12b88:	46a2      	mov	sl, r4
   12b8a:	46ab      	mov	fp, r5
   12b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b8e:	2c00      	cmp	r4, #0
   12b90:	d016      	beq.n	12bc0 <__ledf2+0x90>
   12b92:	45cb      	cmp	fp, r9
   12b94:	d017      	beq.n	12bc6 <__ledf2+0x96>
   12b96:	465b      	mov	r3, fp
   12b98:	4259      	negs	r1, r3
   12b9a:	2301      	movs	r3, #1
   12b9c:	430b      	orrs	r3, r1
   12b9e:	e7ef      	b.n	12b80 <__ledf2+0x50>
   12ba0:	0031      	movs	r1, r6
   12ba2:	2302      	movs	r3, #2
   12ba4:	4301      	orrs	r1, r0
   12ba6:	d1eb      	bne.n	12b80 <__ledf2+0x50>
   12ba8:	e7d9      	b.n	12b5e <__ledf2+0x2e>
   12baa:	0039      	movs	r1, r7
   12bac:	2302      	movs	r3, #2
   12bae:	4311      	orrs	r1, r2
   12bb0:	d1e6      	bne.n	12b80 <__ledf2+0x50>
   12bb2:	e7d7      	b.n	12b64 <__ledf2+0x34>
   12bb4:	433a      	orrs	r2, r7
   12bb6:	d1dd      	bne.n	12b74 <__ledf2+0x44>
   12bb8:	2300      	movs	r3, #0
   12bba:	2800      	cmp	r0, #0
   12bbc:	d0e0      	beq.n	12b80 <__ledf2+0x50>
   12bbe:	e7ea      	b.n	12b96 <__ledf2+0x66>
   12bc0:	433a      	orrs	r2, r7
   12bc2:	d1e6      	bne.n	12b92 <__ledf2+0x62>
   12bc4:	e7e7      	b.n	12b96 <__ledf2+0x66>
   12bc6:	42a5      	cmp	r5, r4
   12bc8:	dce5      	bgt.n	12b96 <__ledf2+0x66>
   12bca:	db05      	blt.n	12bd8 <__ledf2+0xa8>
   12bcc:	42be      	cmp	r6, r7
   12bce:	d8e2      	bhi.n	12b96 <__ledf2+0x66>
   12bd0:	d007      	beq.n	12be2 <__ledf2+0xb2>
   12bd2:	2300      	movs	r3, #0
   12bd4:	42be      	cmp	r6, r7
   12bd6:	d2d3      	bcs.n	12b80 <__ledf2+0x50>
   12bd8:	4659      	mov	r1, fp
   12bda:	2301      	movs	r3, #1
   12bdc:	3901      	subs	r1, #1
   12bde:	430b      	orrs	r3, r1
   12be0:	e7ce      	b.n	12b80 <__ledf2+0x50>
   12be2:	45c4      	cmp	ip, r8
   12be4:	d8d7      	bhi.n	12b96 <__ledf2+0x66>
   12be6:	2300      	movs	r3, #0
   12be8:	45c4      	cmp	ip, r8
   12bea:	d3f5      	bcc.n	12bd8 <__ledf2+0xa8>
   12bec:	e7c8      	b.n	12b80 <__ledf2+0x50>
   12bee:	46c0      	nop			; (mov r8, r8)
   12bf0:	000007ff 	.word	0x000007ff

00012bf4 <__aeabi_dmul>:
   12bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bf6:	4657      	mov	r7, sl
   12bf8:	4645      	mov	r5, r8
   12bfa:	46de      	mov	lr, fp
   12bfc:	464e      	mov	r6, r9
   12bfe:	b5e0      	push	{r5, r6, r7, lr}
   12c00:	030c      	lsls	r4, r1, #12
   12c02:	4698      	mov	r8, r3
   12c04:	004e      	lsls	r6, r1, #1
   12c06:	0b23      	lsrs	r3, r4, #12
   12c08:	b087      	sub	sp, #28
   12c0a:	0007      	movs	r7, r0
   12c0c:	4692      	mov	sl, r2
   12c0e:	469b      	mov	fp, r3
   12c10:	0d76      	lsrs	r6, r6, #21
   12c12:	0fcd      	lsrs	r5, r1, #31
   12c14:	2e00      	cmp	r6, #0
   12c16:	d06b      	beq.n	12cf0 <__aeabi_dmul+0xfc>
   12c18:	4b6d      	ldr	r3, [pc, #436]	; (12dd0 <__aeabi_dmul+0x1dc>)
   12c1a:	429e      	cmp	r6, r3
   12c1c:	d035      	beq.n	12c8a <__aeabi_dmul+0x96>
   12c1e:	2480      	movs	r4, #128	; 0x80
   12c20:	465b      	mov	r3, fp
   12c22:	0f42      	lsrs	r2, r0, #29
   12c24:	0424      	lsls	r4, r4, #16
   12c26:	00db      	lsls	r3, r3, #3
   12c28:	4314      	orrs	r4, r2
   12c2a:	431c      	orrs	r4, r3
   12c2c:	00c3      	lsls	r3, r0, #3
   12c2e:	4699      	mov	r9, r3
   12c30:	4b68      	ldr	r3, [pc, #416]	; (12dd4 <__aeabi_dmul+0x1e0>)
   12c32:	46a3      	mov	fp, r4
   12c34:	469c      	mov	ip, r3
   12c36:	2300      	movs	r3, #0
   12c38:	2700      	movs	r7, #0
   12c3a:	4466      	add	r6, ip
   12c3c:	9302      	str	r3, [sp, #8]
   12c3e:	4643      	mov	r3, r8
   12c40:	031c      	lsls	r4, r3, #12
   12c42:	005a      	lsls	r2, r3, #1
   12c44:	0fdb      	lsrs	r3, r3, #31
   12c46:	4650      	mov	r0, sl
   12c48:	0b24      	lsrs	r4, r4, #12
   12c4a:	0d52      	lsrs	r2, r2, #21
   12c4c:	4698      	mov	r8, r3
   12c4e:	d100      	bne.n	12c52 <__aeabi_dmul+0x5e>
   12c50:	e076      	b.n	12d40 <__aeabi_dmul+0x14c>
   12c52:	4b5f      	ldr	r3, [pc, #380]	; (12dd0 <__aeabi_dmul+0x1dc>)
   12c54:	429a      	cmp	r2, r3
   12c56:	d06d      	beq.n	12d34 <__aeabi_dmul+0x140>
   12c58:	2380      	movs	r3, #128	; 0x80
   12c5a:	0f41      	lsrs	r1, r0, #29
   12c5c:	041b      	lsls	r3, r3, #16
   12c5e:	430b      	orrs	r3, r1
   12c60:	495c      	ldr	r1, [pc, #368]	; (12dd4 <__aeabi_dmul+0x1e0>)
   12c62:	00e4      	lsls	r4, r4, #3
   12c64:	468c      	mov	ip, r1
   12c66:	431c      	orrs	r4, r3
   12c68:	00c3      	lsls	r3, r0, #3
   12c6a:	2000      	movs	r0, #0
   12c6c:	4462      	add	r2, ip
   12c6e:	4641      	mov	r1, r8
   12c70:	18b6      	adds	r6, r6, r2
   12c72:	4069      	eors	r1, r5
   12c74:	1c72      	adds	r2, r6, #1
   12c76:	9101      	str	r1, [sp, #4]
   12c78:	4694      	mov	ip, r2
   12c7a:	4307      	orrs	r7, r0
   12c7c:	2f0f      	cmp	r7, #15
   12c7e:	d900      	bls.n	12c82 <__aeabi_dmul+0x8e>
   12c80:	e0b0      	b.n	12de4 <__aeabi_dmul+0x1f0>
   12c82:	4a55      	ldr	r2, [pc, #340]	; (12dd8 <__aeabi_dmul+0x1e4>)
   12c84:	00bf      	lsls	r7, r7, #2
   12c86:	59d2      	ldr	r2, [r2, r7]
   12c88:	4697      	mov	pc, r2
   12c8a:	465b      	mov	r3, fp
   12c8c:	4303      	orrs	r3, r0
   12c8e:	4699      	mov	r9, r3
   12c90:	d000      	beq.n	12c94 <__aeabi_dmul+0xa0>
   12c92:	e087      	b.n	12da4 <__aeabi_dmul+0x1b0>
   12c94:	2300      	movs	r3, #0
   12c96:	469b      	mov	fp, r3
   12c98:	3302      	adds	r3, #2
   12c9a:	2708      	movs	r7, #8
   12c9c:	9302      	str	r3, [sp, #8]
   12c9e:	e7ce      	b.n	12c3e <__aeabi_dmul+0x4a>
   12ca0:	4642      	mov	r2, r8
   12ca2:	9201      	str	r2, [sp, #4]
   12ca4:	2802      	cmp	r0, #2
   12ca6:	d067      	beq.n	12d78 <__aeabi_dmul+0x184>
   12ca8:	2803      	cmp	r0, #3
   12caa:	d100      	bne.n	12cae <__aeabi_dmul+0xba>
   12cac:	e20e      	b.n	130cc <__aeabi_dmul+0x4d8>
   12cae:	2801      	cmp	r0, #1
   12cb0:	d000      	beq.n	12cb4 <__aeabi_dmul+0xc0>
   12cb2:	e162      	b.n	12f7a <__aeabi_dmul+0x386>
   12cb4:	2300      	movs	r3, #0
   12cb6:	2400      	movs	r4, #0
   12cb8:	2200      	movs	r2, #0
   12cba:	4699      	mov	r9, r3
   12cbc:	9901      	ldr	r1, [sp, #4]
   12cbe:	4001      	ands	r1, r0
   12cc0:	b2cd      	uxtb	r5, r1
   12cc2:	2100      	movs	r1, #0
   12cc4:	0312      	lsls	r2, r2, #12
   12cc6:	0d0b      	lsrs	r3, r1, #20
   12cc8:	0b12      	lsrs	r2, r2, #12
   12cca:	051b      	lsls	r3, r3, #20
   12ccc:	4313      	orrs	r3, r2
   12cce:	4a43      	ldr	r2, [pc, #268]	; (12ddc <__aeabi_dmul+0x1e8>)
   12cd0:	0524      	lsls	r4, r4, #20
   12cd2:	4013      	ands	r3, r2
   12cd4:	431c      	orrs	r4, r3
   12cd6:	0064      	lsls	r4, r4, #1
   12cd8:	07ed      	lsls	r5, r5, #31
   12cda:	0864      	lsrs	r4, r4, #1
   12cdc:	432c      	orrs	r4, r5
   12cde:	4648      	mov	r0, r9
   12ce0:	0021      	movs	r1, r4
   12ce2:	b007      	add	sp, #28
   12ce4:	bc3c      	pop	{r2, r3, r4, r5}
   12ce6:	4690      	mov	r8, r2
   12ce8:	4699      	mov	r9, r3
   12cea:	46a2      	mov	sl, r4
   12cec:	46ab      	mov	fp, r5
   12cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cf0:	4303      	orrs	r3, r0
   12cf2:	4699      	mov	r9, r3
   12cf4:	d04f      	beq.n	12d96 <__aeabi_dmul+0x1a2>
   12cf6:	465b      	mov	r3, fp
   12cf8:	2b00      	cmp	r3, #0
   12cfa:	d100      	bne.n	12cfe <__aeabi_dmul+0x10a>
   12cfc:	e189      	b.n	13012 <__aeabi_dmul+0x41e>
   12cfe:	4658      	mov	r0, fp
   12d00:	f000 fe2e 	bl	13960 <__clzsi2>
   12d04:	0003      	movs	r3, r0
   12d06:	3b0b      	subs	r3, #11
   12d08:	2b1c      	cmp	r3, #28
   12d0a:	dd00      	ble.n	12d0e <__aeabi_dmul+0x11a>
   12d0c:	e17a      	b.n	13004 <__aeabi_dmul+0x410>
   12d0e:	221d      	movs	r2, #29
   12d10:	1ad3      	subs	r3, r2, r3
   12d12:	003a      	movs	r2, r7
   12d14:	0001      	movs	r1, r0
   12d16:	465c      	mov	r4, fp
   12d18:	40da      	lsrs	r2, r3
   12d1a:	3908      	subs	r1, #8
   12d1c:	408c      	lsls	r4, r1
   12d1e:	0013      	movs	r3, r2
   12d20:	408f      	lsls	r7, r1
   12d22:	4323      	orrs	r3, r4
   12d24:	469b      	mov	fp, r3
   12d26:	46b9      	mov	r9, r7
   12d28:	2300      	movs	r3, #0
   12d2a:	4e2d      	ldr	r6, [pc, #180]	; (12de0 <__aeabi_dmul+0x1ec>)
   12d2c:	2700      	movs	r7, #0
   12d2e:	1a36      	subs	r6, r6, r0
   12d30:	9302      	str	r3, [sp, #8]
   12d32:	e784      	b.n	12c3e <__aeabi_dmul+0x4a>
   12d34:	4653      	mov	r3, sl
   12d36:	4323      	orrs	r3, r4
   12d38:	d12a      	bne.n	12d90 <__aeabi_dmul+0x19c>
   12d3a:	2400      	movs	r4, #0
   12d3c:	2002      	movs	r0, #2
   12d3e:	e796      	b.n	12c6e <__aeabi_dmul+0x7a>
   12d40:	4653      	mov	r3, sl
   12d42:	4323      	orrs	r3, r4
   12d44:	d020      	beq.n	12d88 <__aeabi_dmul+0x194>
   12d46:	2c00      	cmp	r4, #0
   12d48:	d100      	bne.n	12d4c <__aeabi_dmul+0x158>
   12d4a:	e157      	b.n	12ffc <__aeabi_dmul+0x408>
   12d4c:	0020      	movs	r0, r4
   12d4e:	f000 fe07 	bl	13960 <__clzsi2>
   12d52:	0003      	movs	r3, r0
   12d54:	3b0b      	subs	r3, #11
   12d56:	2b1c      	cmp	r3, #28
   12d58:	dd00      	ble.n	12d5c <__aeabi_dmul+0x168>
   12d5a:	e149      	b.n	12ff0 <__aeabi_dmul+0x3fc>
   12d5c:	211d      	movs	r1, #29
   12d5e:	1acb      	subs	r3, r1, r3
   12d60:	4651      	mov	r1, sl
   12d62:	0002      	movs	r2, r0
   12d64:	40d9      	lsrs	r1, r3
   12d66:	4653      	mov	r3, sl
   12d68:	3a08      	subs	r2, #8
   12d6a:	4094      	lsls	r4, r2
   12d6c:	4093      	lsls	r3, r2
   12d6e:	430c      	orrs	r4, r1
   12d70:	4a1b      	ldr	r2, [pc, #108]	; (12de0 <__aeabi_dmul+0x1ec>)
   12d72:	1a12      	subs	r2, r2, r0
   12d74:	2000      	movs	r0, #0
   12d76:	e77a      	b.n	12c6e <__aeabi_dmul+0x7a>
   12d78:	2501      	movs	r5, #1
   12d7a:	9b01      	ldr	r3, [sp, #4]
   12d7c:	4c14      	ldr	r4, [pc, #80]	; (12dd0 <__aeabi_dmul+0x1dc>)
   12d7e:	401d      	ands	r5, r3
   12d80:	2300      	movs	r3, #0
   12d82:	2200      	movs	r2, #0
   12d84:	4699      	mov	r9, r3
   12d86:	e79c      	b.n	12cc2 <__aeabi_dmul+0xce>
   12d88:	2400      	movs	r4, #0
   12d8a:	2200      	movs	r2, #0
   12d8c:	2001      	movs	r0, #1
   12d8e:	e76e      	b.n	12c6e <__aeabi_dmul+0x7a>
   12d90:	4653      	mov	r3, sl
   12d92:	2003      	movs	r0, #3
   12d94:	e76b      	b.n	12c6e <__aeabi_dmul+0x7a>
   12d96:	2300      	movs	r3, #0
   12d98:	469b      	mov	fp, r3
   12d9a:	3301      	adds	r3, #1
   12d9c:	2704      	movs	r7, #4
   12d9e:	2600      	movs	r6, #0
   12da0:	9302      	str	r3, [sp, #8]
   12da2:	e74c      	b.n	12c3e <__aeabi_dmul+0x4a>
   12da4:	2303      	movs	r3, #3
   12da6:	4681      	mov	r9, r0
   12da8:	270c      	movs	r7, #12
   12daa:	9302      	str	r3, [sp, #8]
   12dac:	e747      	b.n	12c3e <__aeabi_dmul+0x4a>
   12dae:	2280      	movs	r2, #128	; 0x80
   12db0:	2300      	movs	r3, #0
   12db2:	2500      	movs	r5, #0
   12db4:	0312      	lsls	r2, r2, #12
   12db6:	4699      	mov	r9, r3
   12db8:	4c05      	ldr	r4, [pc, #20]	; (12dd0 <__aeabi_dmul+0x1dc>)
   12dba:	e782      	b.n	12cc2 <__aeabi_dmul+0xce>
   12dbc:	465c      	mov	r4, fp
   12dbe:	464b      	mov	r3, r9
   12dc0:	9802      	ldr	r0, [sp, #8]
   12dc2:	e76f      	b.n	12ca4 <__aeabi_dmul+0xb0>
   12dc4:	465c      	mov	r4, fp
   12dc6:	464b      	mov	r3, r9
   12dc8:	9501      	str	r5, [sp, #4]
   12dca:	9802      	ldr	r0, [sp, #8]
   12dcc:	e76a      	b.n	12ca4 <__aeabi_dmul+0xb0>
   12dce:	46c0      	nop			; (mov r8, r8)
   12dd0:	000007ff 	.word	0x000007ff
   12dd4:	fffffc01 	.word	0xfffffc01
   12dd8:	00015468 	.word	0x00015468
   12ddc:	800fffff 	.word	0x800fffff
   12de0:	fffffc0d 	.word	0xfffffc0d
   12de4:	464a      	mov	r2, r9
   12de6:	4649      	mov	r1, r9
   12de8:	0c17      	lsrs	r7, r2, #16
   12dea:	0c1a      	lsrs	r2, r3, #16
   12dec:	041b      	lsls	r3, r3, #16
   12dee:	0c1b      	lsrs	r3, r3, #16
   12df0:	0408      	lsls	r0, r1, #16
   12df2:	0019      	movs	r1, r3
   12df4:	0c00      	lsrs	r0, r0, #16
   12df6:	4341      	muls	r1, r0
   12df8:	0015      	movs	r5, r2
   12dfa:	4688      	mov	r8, r1
   12dfc:	0019      	movs	r1, r3
   12dfe:	437d      	muls	r5, r7
   12e00:	4379      	muls	r1, r7
   12e02:	9503      	str	r5, [sp, #12]
   12e04:	4689      	mov	r9, r1
   12e06:	0029      	movs	r1, r5
   12e08:	0015      	movs	r5, r2
   12e0a:	4345      	muls	r5, r0
   12e0c:	444d      	add	r5, r9
   12e0e:	9502      	str	r5, [sp, #8]
   12e10:	4645      	mov	r5, r8
   12e12:	0c2d      	lsrs	r5, r5, #16
   12e14:	46aa      	mov	sl, r5
   12e16:	9d02      	ldr	r5, [sp, #8]
   12e18:	4455      	add	r5, sl
   12e1a:	45a9      	cmp	r9, r5
   12e1c:	d906      	bls.n	12e2c <__aeabi_dmul+0x238>
   12e1e:	468a      	mov	sl, r1
   12e20:	2180      	movs	r1, #128	; 0x80
   12e22:	0249      	lsls	r1, r1, #9
   12e24:	4689      	mov	r9, r1
   12e26:	44ca      	add	sl, r9
   12e28:	4651      	mov	r1, sl
   12e2a:	9103      	str	r1, [sp, #12]
   12e2c:	0c29      	lsrs	r1, r5, #16
   12e2e:	9104      	str	r1, [sp, #16]
   12e30:	4641      	mov	r1, r8
   12e32:	0409      	lsls	r1, r1, #16
   12e34:	042d      	lsls	r5, r5, #16
   12e36:	0c09      	lsrs	r1, r1, #16
   12e38:	4688      	mov	r8, r1
   12e3a:	0029      	movs	r1, r5
   12e3c:	0c25      	lsrs	r5, r4, #16
   12e3e:	0424      	lsls	r4, r4, #16
   12e40:	4441      	add	r1, r8
   12e42:	0c24      	lsrs	r4, r4, #16
   12e44:	9105      	str	r1, [sp, #20]
   12e46:	0021      	movs	r1, r4
   12e48:	4341      	muls	r1, r0
   12e4a:	4688      	mov	r8, r1
   12e4c:	0021      	movs	r1, r4
   12e4e:	4379      	muls	r1, r7
   12e50:	468a      	mov	sl, r1
   12e52:	4368      	muls	r0, r5
   12e54:	4641      	mov	r1, r8
   12e56:	4450      	add	r0, sl
   12e58:	4681      	mov	r9, r0
   12e5a:	0c08      	lsrs	r0, r1, #16
   12e5c:	4448      	add	r0, r9
   12e5e:	436f      	muls	r7, r5
   12e60:	4582      	cmp	sl, r0
   12e62:	d903      	bls.n	12e6c <__aeabi_dmul+0x278>
   12e64:	2180      	movs	r1, #128	; 0x80
   12e66:	0249      	lsls	r1, r1, #9
   12e68:	4689      	mov	r9, r1
   12e6a:	444f      	add	r7, r9
   12e6c:	0c01      	lsrs	r1, r0, #16
   12e6e:	4689      	mov	r9, r1
   12e70:	0039      	movs	r1, r7
   12e72:	4449      	add	r1, r9
   12e74:	9102      	str	r1, [sp, #8]
   12e76:	4641      	mov	r1, r8
   12e78:	040f      	lsls	r7, r1, #16
   12e7a:	9904      	ldr	r1, [sp, #16]
   12e7c:	0c3f      	lsrs	r7, r7, #16
   12e7e:	4688      	mov	r8, r1
   12e80:	0400      	lsls	r0, r0, #16
   12e82:	19c0      	adds	r0, r0, r7
   12e84:	4480      	add	r8, r0
   12e86:	4641      	mov	r1, r8
   12e88:	9104      	str	r1, [sp, #16]
   12e8a:	4659      	mov	r1, fp
   12e8c:	0c0f      	lsrs	r7, r1, #16
   12e8e:	0409      	lsls	r1, r1, #16
   12e90:	0c09      	lsrs	r1, r1, #16
   12e92:	4688      	mov	r8, r1
   12e94:	4359      	muls	r1, r3
   12e96:	468a      	mov	sl, r1
   12e98:	0039      	movs	r1, r7
   12e9a:	4351      	muls	r1, r2
   12e9c:	4689      	mov	r9, r1
   12e9e:	4641      	mov	r1, r8
   12ea0:	434a      	muls	r2, r1
   12ea2:	4651      	mov	r1, sl
   12ea4:	0c09      	lsrs	r1, r1, #16
   12ea6:	468b      	mov	fp, r1
   12ea8:	437b      	muls	r3, r7
   12eaa:	18d2      	adds	r2, r2, r3
   12eac:	445a      	add	r2, fp
   12eae:	4293      	cmp	r3, r2
   12eb0:	d903      	bls.n	12eba <__aeabi_dmul+0x2c6>
   12eb2:	2380      	movs	r3, #128	; 0x80
   12eb4:	025b      	lsls	r3, r3, #9
   12eb6:	469b      	mov	fp, r3
   12eb8:	44d9      	add	r9, fp
   12eba:	4651      	mov	r1, sl
   12ebc:	0409      	lsls	r1, r1, #16
   12ebe:	0c09      	lsrs	r1, r1, #16
   12ec0:	468a      	mov	sl, r1
   12ec2:	4641      	mov	r1, r8
   12ec4:	4361      	muls	r1, r4
   12ec6:	437c      	muls	r4, r7
   12ec8:	0c13      	lsrs	r3, r2, #16
   12eca:	0412      	lsls	r2, r2, #16
   12ecc:	444b      	add	r3, r9
   12ece:	4452      	add	r2, sl
   12ed0:	46a1      	mov	r9, r4
   12ed2:	468a      	mov	sl, r1
   12ed4:	003c      	movs	r4, r7
   12ed6:	4641      	mov	r1, r8
   12ed8:	436c      	muls	r4, r5
   12eda:	434d      	muls	r5, r1
   12edc:	4651      	mov	r1, sl
   12ede:	444d      	add	r5, r9
   12ee0:	0c0f      	lsrs	r7, r1, #16
   12ee2:	197d      	adds	r5, r7, r5
   12ee4:	45a9      	cmp	r9, r5
   12ee6:	d903      	bls.n	12ef0 <__aeabi_dmul+0x2fc>
   12ee8:	2180      	movs	r1, #128	; 0x80
   12eea:	0249      	lsls	r1, r1, #9
   12eec:	4688      	mov	r8, r1
   12eee:	4444      	add	r4, r8
   12ef0:	9f04      	ldr	r7, [sp, #16]
   12ef2:	9903      	ldr	r1, [sp, #12]
   12ef4:	46b8      	mov	r8, r7
   12ef6:	4441      	add	r1, r8
   12ef8:	468b      	mov	fp, r1
   12efa:	4583      	cmp	fp, r0
   12efc:	4180      	sbcs	r0, r0
   12efe:	4241      	negs	r1, r0
   12f00:	4688      	mov	r8, r1
   12f02:	4651      	mov	r1, sl
   12f04:	0408      	lsls	r0, r1, #16
   12f06:	042f      	lsls	r7, r5, #16
   12f08:	0c00      	lsrs	r0, r0, #16
   12f0a:	183f      	adds	r7, r7, r0
   12f0c:	4658      	mov	r0, fp
   12f0e:	9902      	ldr	r1, [sp, #8]
   12f10:	1810      	adds	r0, r2, r0
   12f12:	4689      	mov	r9, r1
   12f14:	4290      	cmp	r0, r2
   12f16:	4192      	sbcs	r2, r2
   12f18:	444f      	add	r7, r9
   12f1a:	46ba      	mov	sl, r7
   12f1c:	4252      	negs	r2, r2
   12f1e:	4699      	mov	r9, r3
   12f20:	4693      	mov	fp, r2
   12f22:	44c2      	add	sl, r8
   12f24:	44d1      	add	r9, sl
   12f26:	44cb      	add	fp, r9
   12f28:	428f      	cmp	r7, r1
   12f2a:	41bf      	sbcs	r7, r7
   12f2c:	45c2      	cmp	sl, r8
   12f2e:	4189      	sbcs	r1, r1
   12f30:	4599      	cmp	r9, r3
   12f32:	419b      	sbcs	r3, r3
   12f34:	4593      	cmp	fp, r2
   12f36:	4192      	sbcs	r2, r2
   12f38:	427f      	negs	r7, r7
   12f3a:	4249      	negs	r1, r1
   12f3c:	0c2d      	lsrs	r5, r5, #16
   12f3e:	4252      	negs	r2, r2
   12f40:	430f      	orrs	r7, r1
   12f42:	425b      	negs	r3, r3
   12f44:	4313      	orrs	r3, r2
   12f46:	197f      	adds	r7, r7, r5
   12f48:	18ff      	adds	r7, r7, r3
   12f4a:	465b      	mov	r3, fp
   12f4c:	193c      	adds	r4, r7, r4
   12f4e:	0ddb      	lsrs	r3, r3, #23
   12f50:	9a05      	ldr	r2, [sp, #20]
   12f52:	0264      	lsls	r4, r4, #9
   12f54:	431c      	orrs	r4, r3
   12f56:	0243      	lsls	r3, r0, #9
   12f58:	4313      	orrs	r3, r2
   12f5a:	1e5d      	subs	r5, r3, #1
   12f5c:	41ab      	sbcs	r3, r5
   12f5e:	465a      	mov	r2, fp
   12f60:	0dc0      	lsrs	r0, r0, #23
   12f62:	4303      	orrs	r3, r0
   12f64:	0252      	lsls	r2, r2, #9
   12f66:	4313      	orrs	r3, r2
   12f68:	01e2      	lsls	r2, r4, #7
   12f6a:	d556      	bpl.n	1301a <__aeabi_dmul+0x426>
   12f6c:	2001      	movs	r0, #1
   12f6e:	085a      	lsrs	r2, r3, #1
   12f70:	4003      	ands	r3, r0
   12f72:	4313      	orrs	r3, r2
   12f74:	07e2      	lsls	r2, r4, #31
   12f76:	4313      	orrs	r3, r2
   12f78:	0864      	lsrs	r4, r4, #1
   12f7a:	485a      	ldr	r0, [pc, #360]	; (130e4 <__aeabi_dmul+0x4f0>)
   12f7c:	4460      	add	r0, ip
   12f7e:	2800      	cmp	r0, #0
   12f80:	dd4d      	ble.n	1301e <__aeabi_dmul+0x42a>
   12f82:	075a      	lsls	r2, r3, #29
   12f84:	d009      	beq.n	12f9a <__aeabi_dmul+0x3a6>
   12f86:	220f      	movs	r2, #15
   12f88:	401a      	ands	r2, r3
   12f8a:	2a04      	cmp	r2, #4
   12f8c:	d005      	beq.n	12f9a <__aeabi_dmul+0x3a6>
   12f8e:	1d1a      	adds	r2, r3, #4
   12f90:	429a      	cmp	r2, r3
   12f92:	419b      	sbcs	r3, r3
   12f94:	425b      	negs	r3, r3
   12f96:	18e4      	adds	r4, r4, r3
   12f98:	0013      	movs	r3, r2
   12f9a:	01e2      	lsls	r2, r4, #7
   12f9c:	d504      	bpl.n	12fa8 <__aeabi_dmul+0x3b4>
   12f9e:	2080      	movs	r0, #128	; 0x80
   12fa0:	4a51      	ldr	r2, [pc, #324]	; (130e8 <__aeabi_dmul+0x4f4>)
   12fa2:	00c0      	lsls	r0, r0, #3
   12fa4:	4014      	ands	r4, r2
   12fa6:	4460      	add	r0, ip
   12fa8:	4a50      	ldr	r2, [pc, #320]	; (130ec <__aeabi_dmul+0x4f8>)
   12faa:	4290      	cmp	r0, r2
   12fac:	dd00      	ble.n	12fb0 <__aeabi_dmul+0x3bc>
   12fae:	e6e3      	b.n	12d78 <__aeabi_dmul+0x184>
   12fb0:	2501      	movs	r5, #1
   12fb2:	08db      	lsrs	r3, r3, #3
   12fb4:	0762      	lsls	r2, r4, #29
   12fb6:	431a      	orrs	r2, r3
   12fb8:	0264      	lsls	r4, r4, #9
   12fba:	9b01      	ldr	r3, [sp, #4]
   12fbc:	4691      	mov	r9, r2
   12fbe:	0b22      	lsrs	r2, r4, #12
   12fc0:	0544      	lsls	r4, r0, #21
   12fc2:	0d64      	lsrs	r4, r4, #21
   12fc4:	401d      	ands	r5, r3
   12fc6:	e67c      	b.n	12cc2 <__aeabi_dmul+0xce>
   12fc8:	2280      	movs	r2, #128	; 0x80
   12fca:	4659      	mov	r1, fp
   12fcc:	0312      	lsls	r2, r2, #12
   12fce:	4211      	tst	r1, r2
   12fd0:	d008      	beq.n	12fe4 <__aeabi_dmul+0x3f0>
   12fd2:	4214      	tst	r4, r2
   12fd4:	d106      	bne.n	12fe4 <__aeabi_dmul+0x3f0>
   12fd6:	4322      	orrs	r2, r4
   12fd8:	0312      	lsls	r2, r2, #12
   12fda:	0b12      	lsrs	r2, r2, #12
   12fdc:	4645      	mov	r5, r8
   12fde:	4699      	mov	r9, r3
   12fe0:	4c43      	ldr	r4, [pc, #268]	; (130f0 <__aeabi_dmul+0x4fc>)
   12fe2:	e66e      	b.n	12cc2 <__aeabi_dmul+0xce>
   12fe4:	465b      	mov	r3, fp
   12fe6:	431a      	orrs	r2, r3
   12fe8:	0312      	lsls	r2, r2, #12
   12fea:	0b12      	lsrs	r2, r2, #12
   12fec:	4c40      	ldr	r4, [pc, #256]	; (130f0 <__aeabi_dmul+0x4fc>)
   12fee:	e668      	b.n	12cc2 <__aeabi_dmul+0xce>
   12ff0:	0003      	movs	r3, r0
   12ff2:	4654      	mov	r4, sl
   12ff4:	3b28      	subs	r3, #40	; 0x28
   12ff6:	409c      	lsls	r4, r3
   12ff8:	2300      	movs	r3, #0
   12ffa:	e6b9      	b.n	12d70 <__aeabi_dmul+0x17c>
   12ffc:	f000 fcb0 	bl	13960 <__clzsi2>
   13000:	3020      	adds	r0, #32
   13002:	e6a6      	b.n	12d52 <__aeabi_dmul+0x15e>
   13004:	0003      	movs	r3, r0
   13006:	3b28      	subs	r3, #40	; 0x28
   13008:	409f      	lsls	r7, r3
   1300a:	2300      	movs	r3, #0
   1300c:	46bb      	mov	fp, r7
   1300e:	4699      	mov	r9, r3
   13010:	e68a      	b.n	12d28 <__aeabi_dmul+0x134>
   13012:	f000 fca5 	bl	13960 <__clzsi2>
   13016:	3020      	adds	r0, #32
   13018:	e674      	b.n	12d04 <__aeabi_dmul+0x110>
   1301a:	46b4      	mov	ip, r6
   1301c:	e7ad      	b.n	12f7a <__aeabi_dmul+0x386>
   1301e:	2501      	movs	r5, #1
   13020:	1a2a      	subs	r2, r5, r0
   13022:	2a38      	cmp	r2, #56	; 0x38
   13024:	dd06      	ble.n	13034 <__aeabi_dmul+0x440>
   13026:	9b01      	ldr	r3, [sp, #4]
   13028:	2400      	movs	r4, #0
   1302a:	401d      	ands	r5, r3
   1302c:	2300      	movs	r3, #0
   1302e:	2200      	movs	r2, #0
   13030:	4699      	mov	r9, r3
   13032:	e646      	b.n	12cc2 <__aeabi_dmul+0xce>
   13034:	2a1f      	cmp	r2, #31
   13036:	dc21      	bgt.n	1307c <__aeabi_dmul+0x488>
   13038:	2520      	movs	r5, #32
   1303a:	0020      	movs	r0, r4
   1303c:	1aad      	subs	r5, r5, r2
   1303e:	001e      	movs	r6, r3
   13040:	40ab      	lsls	r3, r5
   13042:	40a8      	lsls	r0, r5
   13044:	40d6      	lsrs	r6, r2
   13046:	1e5d      	subs	r5, r3, #1
   13048:	41ab      	sbcs	r3, r5
   1304a:	4330      	orrs	r0, r6
   1304c:	4318      	orrs	r0, r3
   1304e:	40d4      	lsrs	r4, r2
   13050:	0743      	lsls	r3, r0, #29
   13052:	d009      	beq.n	13068 <__aeabi_dmul+0x474>
   13054:	230f      	movs	r3, #15
   13056:	4003      	ands	r3, r0
   13058:	2b04      	cmp	r3, #4
   1305a:	d005      	beq.n	13068 <__aeabi_dmul+0x474>
   1305c:	0003      	movs	r3, r0
   1305e:	1d18      	adds	r0, r3, #4
   13060:	4298      	cmp	r0, r3
   13062:	419b      	sbcs	r3, r3
   13064:	425b      	negs	r3, r3
   13066:	18e4      	adds	r4, r4, r3
   13068:	0223      	lsls	r3, r4, #8
   1306a:	d521      	bpl.n	130b0 <__aeabi_dmul+0x4bc>
   1306c:	2501      	movs	r5, #1
   1306e:	9b01      	ldr	r3, [sp, #4]
   13070:	2401      	movs	r4, #1
   13072:	401d      	ands	r5, r3
   13074:	2300      	movs	r3, #0
   13076:	2200      	movs	r2, #0
   13078:	4699      	mov	r9, r3
   1307a:	e622      	b.n	12cc2 <__aeabi_dmul+0xce>
   1307c:	251f      	movs	r5, #31
   1307e:	0021      	movs	r1, r4
   13080:	426d      	negs	r5, r5
   13082:	1a28      	subs	r0, r5, r0
   13084:	40c1      	lsrs	r1, r0
   13086:	0008      	movs	r0, r1
   13088:	2a20      	cmp	r2, #32
   1308a:	d01d      	beq.n	130c8 <__aeabi_dmul+0x4d4>
   1308c:	355f      	adds	r5, #95	; 0x5f
   1308e:	1aaa      	subs	r2, r5, r2
   13090:	4094      	lsls	r4, r2
   13092:	4323      	orrs	r3, r4
   13094:	1e5c      	subs	r4, r3, #1
   13096:	41a3      	sbcs	r3, r4
   13098:	2507      	movs	r5, #7
   1309a:	4303      	orrs	r3, r0
   1309c:	401d      	ands	r5, r3
   1309e:	2200      	movs	r2, #0
   130a0:	2d00      	cmp	r5, #0
   130a2:	d009      	beq.n	130b8 <__aeabi_dmul+0x4c4>
   130a4:	220f      	movs	r2, #15
   130a6:	2400      	movs	r4, #0
   130a8:	401a      	ands	r2, r3
   130aa:	0018      	movs	r0, r3
   130ac:	2a04      	cmp	r2, #4
   130ae:	d1d6      	bne.n	1305e <__aeabi_dmul+0x46a>
   130b0:	0003      	movs	r3, r0
   130b2:	0765      	lsls	r5, r4, #29
   130b4:	0264      	lsls	r4, r4, #9
   130b6:	0b22      	lsrs	r2, r4, #12
   130b8:	08db      	lsrs	r3, r3, #3
   130ba:	432b      	orrs	r3, r5
   130bc:	2501      	movs	r5, #1
   130be:	4699      	mov	r9, r3
   130c0:	9b01      	ldr	r3, [sp, #4]
   130c2:	2400      	movs	r4, #0
   130c4:	401d      	ands	r5, r3
   130c6:	e5fc      	b.n	12cc2 <__aeabi_dmul+0xce>
   130c8:	2400      	movs	r4, #0
   130ca:	e7e2      	b.n	13092 <__aeabi_dmul+0x49e>
   130cc:	2280      	movs	r2, #128	; 0x80
   130ce:	2501      	movs	r5, #1
   130d0:	0312      	lsls	r2, r2, #12
   130d2:	4322      	orrs	r2, r4
   130d4:	9901      	ldr	r1, [sp, #4]
   130d6:	0312      	lsls	r2, r2, #12
   130d8:	0b12      	lsrs	r2, r2, #12
   130da:	400d      	ands	r5, r1
   130dc:	4699      	mov	r9, r3
   130de:	4c04      	ldr	r4, [pc, #16]	; (130f0 <__aeabi_dmul+0x4fc>)
   130e0:	e5ef      	b.n	12cc2 <__aeabi_dmul+0xce>
   130e2:	46c0      	nop			; (mov r8, r8)
   130e4:	000003ff 	.word	0x000003ff
   130e8:	feffffff 	.word	0xfeffffff
   130ec:	000007fe 	.word	0x000007fe
   130f0:	000007ff 	.word	0x000007ff

000130f4 <__aeabi_dsub>:
   130f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   130f6:	4646      	mov	r6, r8
   130f8:	46d6      	mov	lr, sl
   130fa:	464f      	mov	r7, r9
   130fc:	030c      	lsls	r4, r1, #12
   130fe:	b5c0      	push	{r6, r7, lr}
   13100:	0fcd      	lsrs	r5, r1, #31
   13102:	004e      	lsls	r6, r1, #1
   13104:	0a61      	lsrs	r1, r4, #9
   13106:	0f44      	lsrs	r4, r0, #29
   13108:	430c      	orrs	r4, r1
   1310a:	00c1      	lsls	r1, r0, #3
   1310c:	0058      	lsls	r0, r3, #1
   1310e:	0d40      	lsrs	r0, r0, #21
   13110:	4684      	mov	ip, r0
   13112:	468a      	mov	sl, r1
   13114:	000f      	movs	r7, r1
   13116:	0319      	lsls	r1, r3, #12
   13118:	0f50      	lsrs	r0, r2, #29
   1311a:	0a49      	lsrs	r1, r1, #9
   1311c:	4301      	orrs	r1, r0
   1311e:	48c6      	ldr	r0, [pc, #792]	; (13438 <__aeabi_dsub+0x344>)
   13120:	0d76      	lsrs	r6, r6, #21
   13122:	46a8      	mov	r8, r5
   13124:	0fdb      	lsrs	r3, r3, #31
   13126:	00d2      	lsls	r2, r2, #3
   13128:	4584      	cmp	ip, r0
   1312a:	d100      	bne.n	1312e <__aeabi_dsub+0x3a>
   1312c:	e0d8      	b.n	132e0 <__aeabi_dsub+0x1ec>
   1312e:	2001      	movs	r0, #1
   13130:	4043      	eors	r3, r0
   13132:	42ab      	cmp	r3, r5
   13134:	d100      	bne.n	13138 <__aeabi_dsub+0x44>
   13136:	e0a6      	b.n	13286 <__aeabi_dsub+0x192>
   13138:	4660      	mov	r0, ip
   1313a:	1a35      	subs	r5, r6, r0
   1313c:	2d00      	cmp	r5, #0
   1313e:	dc00      	bgt.n	13142 <__aeabi_dsub+0x4e>
   13140:	e105      	b.n	1334e <__aeabi_dsub+0x25a>
   13142:	2800      	cmp	r0, #0
   13144:	d110      	bne.n	13168 <__aeabi_dsub+0x74>
   13146:	000b      	movs	r3, r1
   13148:	4313      	orrs	r3, r2
   1314a:	d100      	bne.n	1314e <__aeabi_dsub+0x5a>
   1314c:	e0d7      	b.n	132fe <__aeabi_dsub+0x20a>
   1314e:	1e6b      	subs	r3, r5, #1
   13150:	2b00      	cmp	r3, #0
   13152:	d000      	beq.n	13156 <__aeabi_dsub+0x62>
   13154:	e14b      	b.n	133ee <__aeabi_dsub+0x2fa>
   13156:	4653      	mov	r3, sl
   13158:	1a9f      	subs	r7, r3, r2
   1315a:	45ba      	cmp	sl, r7
   1315c:	4180      	sbcs	r0, r0
   1315e:	1a64      	subs	r4, r4, r1
   13160:	4240      	negs	r0, r0
   13162:	1a24      	subs	r4, r4, r0
   13164:	2601      	movs	r6, #1
   13166:	e01e      	b.n	131a6 <__aeabi_dsub+0xb2>
   13168:	4bb3      	ldr	r3, [pc, #716]	; (13438 <__aeabi_dsub+0x344>)
   1316a:	429e      	cmp	r6, r3
   1316c:	d048      	beq.n	13200 <__aeabi_dsub+0x10c>
   1316e:	2380      	movs	r3, #128	; 0x80
   13170:	041b      	lsls	r3, r3, #16
   13172:	4319      	orrs	r1, r3
   13174:	2d38      	cmp	r5, #56	; 0x38
   13176:	dd00      	ble.n	1317a <__aeabi_dsub+0x86>
   13178:	e119      	b.n	133ae <__aeabi_dsub+0x2ba>
   1317a:	2d1f      	cmp	r5, #31
   1317c:	dd00      	ble.n	13180 <__aeabi_dsub+0x8c>
   1317e:	e14c      	b.n	1341a <__aeabi_dsub+0x326>
   13180:	2320      	movs	r3, #32
   13182:	000f      	movs	r7, r1
   13184:	1b5b      	subs	r3, r3, r5
   13186:	0010      	movs	r0, r2
   13188:	409a      	lsls	r2, r3
   1318a:	409f      	lsls	r7, r3
   1318c:	40e8      	lsrs	r0, r5
   1318e:	1e53      	subs	r3, r2, #1
   13190:	419a      	sbcs	r2, r3
   13192:	40e9      	lsrs	r1, r5
   13194:	4307      	orrs	r7, r0
   13196:	4317      	orrs	r7, r2
   13198:	4653      	mov	r3, sl
   1319a:	1bdf      	subs	r7, r3, r7
   1319c:	1a61      	subs	r1, r4, r1
   1319e:	45ba      	cmp	sl, r7
   131a0:	41a4      	sbcs	r4, r4
   131a2:	4264      	negs	r4, r4
   131a4:	1b0c      	subs	r4, r1, r4
   131a6:	0223      	lsls	r3, r4, #8
   131a8:	d400      	bmi.n	131ac <__aeabi_dsub+0xb8>
   131aa:	e0c5      	b.n	13338 <__aeabi_dsub+0x244>
   131ac:	0264      	lsls	r4, r4, #9
   131ae:	0a65      	lsrs	r5, r4, #9
   131b0:	2d00      	cmp	r5, #0
   131b2:	d100      	bne.n	131b6 <__aeabi_dsub+0xc2>
   131b4:	e0f6      	b.n	133a4 <__aeabi_dsub+0x2b0>
   131b6:	0028      	movs	r0, r5
   131b8:	f000 fbd2 	bl	13960 <__clzsi2>
   131bc:	0003      	movs	r3, r0
   131be:	3b08      	subs	r3, #8
   131c0:	2b1f      	cmp	r3, #31
   131c2:	dd00      	ble.n	131c6 <__aeabi_dsub+0xd2>
   131c4:	e0e9      	b.n	1339a <__aeabi_dsub+0x2a6>
   131c6:	2220      	movs	r2, #32
   131c8:	003c      	movs	r4, r7
   131ca:	1ad2      	subs	r2, r2, r3
   131cc:	409d      	lsls	r5, r3
   131ce:	40d4      	lsrs	r4, r2
   131d0:	409f      	lsls	r7, r3
   131d2:	4325      	orrs	r5, r4
   131d4:	429e      	cmp	r6, r3
   131d6:	dd00      	ble.n	131da <__aeabi_dsub+0xe6>
   131d8:	e0db      	b.n	13392 <__aeabi_dsub+0x29e>
   131da:	1b9e      	subs	r6, r3, r6
   131dc:	1c73      	adds	r3, r6, #1
   131de:	2b1f      	cmp	r3, #31
   131e0:	dd00      	ble.n	131e4 <__aeabi_dsub+0xf0>
   131e2:	e10a      	b.n	133fa <__aeabi_dsub+0x306>
   131e4:	2220      	movs	r2, #32
   131e6:	0038      	movs	r0, r7
   131e8:	1ad2      	subs	r2, r2, r3
   131ea:	0029      	movs	r1, r5
   131ec:	4097      	lsls	r7, r2
   131ee:	002c      	movs	r4, r5
   131f0:	4091      	lsls	r1, r2
   131f2:	40d8      	lsrs	r0, r3
   131f4:	1e7a      	subs	r2, r7, #1
   131f6:	4197      	sbcs	r7, r2
   131f8:	40dc      	lsrs	r4, r3
   131fa:	2600      	movs	r6, #0
   131fc:	4301      	orrs	r1, r0
   131fe:	430f      	orrs	r7, r1
   13200:	077b      	lsls	r3, r7, #29
   13202:	d009      	beq.n	13218 <__aeabi_dsub+0x124>
   13204:	230f      	movs	r3, #15
   13206:	403b      	ands	r3, r7
   13208:	2b04      	cmp	r3, #4
   1320a:	d005      	beq.n	13218 <__aeabi_dsub+0x124>
   1320c:	1d3b      	adds	r3, r7, #4
   1320e:	42bb      	cmp	r3, r7
   13210:	41bf      	sbcs	r7, r7
   13212:	427f      	negs	r7, r7
   13214:	19e4      	adds	r4, r4, r7
   13216:	001f      	movs	r7, r3
   13218:	0223      	lsls	r3, r4, #8
   1321a:	d525      	bpl.n	13268 <__aeabi_dsub+0x174>
   1321c:	4b86      	ldr	r3, [pc, #536]	; (13438 <__aeabi_dsub+0x344>)
   1321e:	3601      	adds	r6, #1
   13220:	429e      	cmp	r6, r3
   13222:	d100      	bne.n	13226 <__aeabi_dsub+0x132>
   13224:	e0af      	b.n	13386 <__aeabi_dsub+0x292>
   13226:	4b85      	ldr	r3, [pc, #532]	; (1343c <__aeabi_dsub+0x348>)
   13228:	2501      	movs	r5, #1
   1322a:	401c      	ands	r4, r3
   1322c:	4643      	mov	r3, r8
   1322e:	0762      	lsls	r2, r4, #29
   13230:	08ff      	lsrs	r7, r7, #3
   13232:	0264      	lsls	r4, r4, #9
   13234:	0576      	lsls	r6, r6, #21
   13236:	4317      	orrs	r7, r2
   13238:	0b24      	lsrs	r4, r4, #12
   1323a:	0d76      	lsrs	r6, r6, #21
   1323c:	401d      	ands	r5, r3
   1323e:	2100      	movs	r1, #0
   13240:	0324      	lsls	r4, r4, #12
   13242:	0b23      	lsrs	r3, r4, #12
   13244:	0d0c      	lsrs	r4, r1, #20
   13246:	4a7e      	ldr	r2, [pc, #504]	; (13440 <__aeabi_dsub+0x34c>)
   13248:	0524      	lsls	r4, r4, #20
   1324a:	431c      	orrs	r4, r3
   1324c:	4014      	ands	r4, r2
   1324e:	0533      	lsls	r3, r6, #20
   13250:	4323      	orrs	r3, r4
   13252:	005b      	lsls	r3, r3, #1
   13254:	07ed      	lsls	r5, r5, #31
   13256:	085b      	lsrs	r3, r3, #1
   13258:	432b      	orrs	r3, r5
   1325a:	0038      	movs	r0, r7
   1325c:	0019      	movs	r1, r3
   1325e:	bc1c      	pop	{r2, r3, r4}
   13260:	4690      	mov	r8, r2
   13262:	4699      	mov	r9, r3
   13264:	46a2      	mov	sl, r4
   13266:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13268:	2501      	movs	r5, #1
   1326a:	4643      	mov	r3, r8
   1326c:	0762      	lsls	r2, r4, #29
   1326e:	08ff      	lsrs	r7, r7, #3
   13270:	4317      	orrs	r7, r2
   13272:	08e4      	lsrs	r4, r4, #3
   13274:	401d      	ands	r5, r3
   13276:	4b70      	ldr	r3, [pc, #448]	; (13438 <__aeabi_dsub+0x344>)
   13278:	429e      	cmp	r6, r3
   1327a:	d036      	beq.n	132ea <__aeabi_dsub+0x1f6>
   1327c:	0324      	lsls	r4, r4, #12
   1327e:	0576      	lsls	r6, r6, #21
   13280:	0b24      	lsrs	r4, r4, #12
   13282:	0d76      	lsrs	r6, r6, #21
   13284:	e7db      	b.n	1323e <__aeabi_dsub+0x14a>
   13286:	4663      	mov	r3, ip
   13288:	1af3      	subs	r3, r6, r3
   1328a:	2b00      	cmp	r3, #0
   1328c:	dc00      	bgt.n	13290 <__aeabi_dsub+0x19c>
   1328e:	e094      	b.n	133ba <__aeabi_dsub+0x2c6>
   13290:	4660      	mov	r0, ip
   13292:	2800      	cmp	r0, #0
   13294:	d035      	beq.n	13302 <__aeabi_dsub+0x20e>
   13296:	4868      	ldr	r0, [pc, #416]	; (13438 <__aeabi_dsub+0x344>)
   13298:	4286      	cmp	r6, r0
   1329a:	d0b1      	beq.n	13200 <__aeabi_dsub+0x10c>
   1329c:	2780      	movs	r7, #128	; 0x80
   1329e:	043f      	lsls	r7, r7, #16
   132a0:	4339      	orrs	r1, r7
   132a2:	2b38      	cmp	r3, #56	; 0x38
   132a4:	dc00      	bgt.n	132a8 <__aeabi_dsub+0x1b4>
   132a6:	e0fd      	b.n	134a4 <__aeabi_dsub+0x3b0>
   132a8:	430a      	orrs	r2, r1
   132aa:	0017      	movs	r7, r2
   132ac:	2100      	movs	r1, #0
   132ae:	1e7a      	subs	r2, r7, #1
   132b0:	4197      	sbcs	r7, r2
   132b2:	4457      	add	r7, sl
   132b4:	4557      	cmp	r7, sl
   132b6:	4180      	sbcs	r0, r0
   132b8:	1909      	adds	r1, r1, r4
   132ba:	4244      	negs	r4, r0
   132bc:	190c      	adds	r4, r1, r4
   132be:	0223      	lsls	r3, r4, #8
   132c0:	d53a      	bpl.n	13338 <__aeabi_dsub+0x244>
   132c2:	4b5d      	ldr	r3, [pc, #372]	; (13438 <__aeabi_dsub+0x344>)
   132c4:	3601      	adds	r6, #1
   132c6:	429e      	cmp	r6, r3
   132c8:	d100      	bne.n	132cc <__aeabi_dsub+0x1d8>
   132ca:	e14b      	b.n	13564 <__aeabi_dsub+0x470>
   132cc:	2201      	movs	r2, #1
   132ce:	4b5b      	ldr	r3, [pc, #364]	; (1343c <__aeabi_dsub+0x348>)
   132d0:	401c      	ands	r4, r3
   132d2:	087b      	lsrs	r3, r7, #1
   132d4:	4017      	ands	r7, r2
   132d6:	431f      	orrs	r7, r3
   132d8:	07e2      	lsls	r2, r4, #31
   132da:	4317      	orrs	r7, r2
   132dc:	0864      	lsrs	r4, r4, #1
   132de:	e78f      	b.n	13200 <__aeabi_dsub+0x10c>
   132e0:	0008      	movs	r0, r1
   132e2:	4310      	orrs	r0, r2
   132e4:	d000      	beq.n	132e8 <__aeabi_dsub+0x1f4>
   132e6:	e724      	b.n	13132 <__aeabi_dsub+0x3e>
   132e8:	e721      	b.n	1312e <__aeabi_dsub+0x3a>
   132ea:	0023      	movs	r3, r4
   132ec:	433b      	orrs	r3, r7
   132ee:	d100      	bne.n	132f2 <__aeabi_dsub+0x1fe>
   132f0:	e1b9      	b.n	13666 <__aeabi_dsub+0x572>
   132f2:	2280      	movs	r2, #128	; 0x80
   132f4:	0312      	lsls	r2, r2, #12
   132f6:	4314      	orrs	r4, r2
   132f8:	0324      	lsls	r4, r4, #12
   132fa:	0b24      	lsrs	r4, r4, #12
   132fc:	e79f      	b.n	1323e <__aeabi_dsub+0x14a>
   132fe:	002e      	movs	r6, r5
   13300:	e77e      	b.n	13200 <__aeabi_dsub+0x10c>
   13302:	0008      	movs	r0, r1
   13304:	4310      	orrs	r0, r2
   13306:	d100      	bne.n	1330a <__aeabi_dsub+0x216>
   13308:	e0ca      	b.n	134a0 <__aeabi_dsub+0x3ac>
   1330a:	1e58      	subs	r0, r3, #1
   1330c:	4684      	mov	ip, r0
   1330e:	2800      	cmp	r0, #0
   13310:	d000      	beq.n	13314 <__aeabi_dsub+0x220>
   13312:	e0e7      	b.n	134e4 <__aeabi_dsub+0x3f0>
   13314:	4452      	add	r2, sl
   13316:	4552      	cmp	r2, sl
   13318:	4180      	sbcs	r0, r0
   1331a:	1864      	adds	r4, r4, r1
   1331c:	4240      	negs	r0, r0
   1331e:	1824      	adds	r4, r4, r0
   13320:	0017      	movs	r7, r2
   13322:	2601      	movs	r6, #1
   13324:	0223      	lsls	r3, r4, #8
   13326:	d507      	bpl.n	13338 <__aeabi_dsub+0x244>
   13328:	2602      	movs	r6, #2
   1332a:	e7cf      	b.n	132cc <__aeabi_dsub+0x1d8>
   1332c:	4664      	mov	r4, ip
   1332e:	432c      	orrs	r4, r5
   13330:	d100      	bne.n	13334 <__aeabi_dsub+0x240>
   13332:	e1b3      	b.n	1369c <__aeabi_dsub+0x5a8>
   13334:	002c      	movs	r4, r5
   13336:	4667      	mov	r7, ip
   13338:	077b      	lsls	r3, r7, #29
   1333a:	d000      	beq.n	1333e <__aeabi_dsub+0x24a>
   1333c:	e762      	b.n	13204 <__aeabi_dsub+0x110>
   1333e:	0763      	lsls	r3, r4, #29
   13340:	08ff      	lsrs	r7, r7, #3
   13342:	431f      	orrs	r7, r3
   13344:	2501      	movs	r5, #1
   13346:	4643      	mov	r3, r8
   13348:	08e4      	lsrs	r4, r4, #3
   1334a:	401d      	ands	r5, r3
   1334c:	e793      	b.n	13276 <__aeabi_dsub+0x182>
   1334e:	2d00      	cmp	r5, #0
   13350:	d178      	bne.n	13444 <__aeabi_dsub+0x350>
   13352:	1c75      	adds	r5, r6, #1
   13354:	056d      	lsls	r5, r5, #21
   13356:	0d6d      	lsrs	r5, r5, #21
   13358:	2d01      	cmp	r5, #1
   1335a:	dc00      	bgt.n	1335e <__aeabi_dsub+0x26a>
   1335c:	e0f2      	b.n	13544 <__aeabi_dsub+0x450>
   1335e:	4650      	mov	r0, sl
   13360:	1a80      	subs	r0, r0, r2
   13362:	4582      	cmp	sl, r0
   13364:	41bf      	sbcs	r7, r7
   13366:	1a65      	subs	r5, r4, r1
   13368:	427f      	negs	r7, r7
   1336a:	1bed      	subs	r5, r5, r7
   1336c:	4684      	mov	ip, r0
   1336e:	0228      	lsls	r0, r5, #8
   13370:	d400      	bmi.n	13374 <__aeabi_dsub+0x280>
   13372:	e08c      	b.n	1348e <__aeabi_dsub+0x39a>
   13374:	4650      	mov	r0, sl
   13376:	1a17      	subs	r7, r2, r0
   13378:	42ba      	cmp	r2, r7
   1337a:	4192      	sbcs	r2, r2
   1337c:	1b0c      	subs	r4, r1, r4
   1337e:	4255      	negs	r5, r2
   13380:	1b65      	subs	r5, r4, r5
   13382:	4698      	mov	r8, r3
   13384:	e714      	b.n	131b0 <__aeabi_dsub+0xbc>
   13386:	2501      	movs	r5, #1
   13388:	4643      	mov	r3, r8
   1338a:	2400      	movs	r4, #0
   1338c:	401d      	ands	r5, r3
   1338e:	2700      	movs	r7, #0
   13390:	e755      	b.n	1323e <__aeabi_dsub+0x14a>
   13392:	4c2a      	ldr	r4, [pc, #168]	; (1343c <__aeabi_dsub+0x348>)
   13394:	1af6      	subs	r6, r6, r3
   13396:	402c      	ands	r4, r5
   13398:	e732      	b.n	13200 <__aeabi_dsub+0x10c>
   1339a:	003d      	movs	r5, r7
   1339c:	3828      	subs	r0, #40	; 0x28
   1339e:	4085      	lsls	r5, r0
   133a0:	2700      	movs	r7, #0
   133a2:	e717      	b.n	131d4 <__aeabi_dsub+0xe0>
   133a4:	0038      	movs	r0, r7
   133a6:	f000 fadb 	bl	13960 <__clzsi2>
   133aa:	3020      	adds	r0, #32
   133ac:	e706      	b.n	131bc <__aeabi_dsub+0xc8>
   133ae:	430a      	orrs	r2, r1
   133b0:	0017      	movs	r7, r2
   133b2:	2100      	movs	r1, #0
   133b4:	1e7a      	subs	r2, r7, #1
   133b6:	4197      	sbcs	r7, r2
   133b8:	e6ee      	b.n	13198 <__aeabi_dsub+0xa4>
   133ba:	2b00      	cmp	r3, #0
   133bc:	d000      	beq.n	133c0 <__aeabi_dsub+0x2cc>
   133be:	e0e5      	b.n	1358c <__aeabi_dsub+0x498>
   133c0:	1c73      	adds	r3, r6, #1
   133c2:	469c      	mov	ip, r3
   133c4:	055b      	lsls	r3, r3, #21
   133c6:	0d5b      	lsrs	r3, r3, #21
   133c8:	2b01      	cmp	r3, #1
   133ca:	dc00      	bgt.n	133ce <__aeabi_dsub+0x2da>
   133cc:	e09f      	b.n	1350e <__aeabi_dsub+0x41a>
   133ce:	4b1a      	ldr	r3, [pc, #104]	; (13438 <__aeabi_dsub+0x344>)
   133d0:	459c      	cmp	ip, r3
   133d2:	d100      	bne.n	133d6 <__aeabi_dsub+0x2e2>
   133d4:	e0c5      	b.n	13562 <__aeabi_dsub+0x46e>
   133d6:	4452      	add	r2, sl
   133d8:	4552      	cmp	r2, sl
   133da:	4180      	sbcs	r0, r0
   133dc:	1864      	adds	r4, r4, r1
   133de:	4240      	negs	r0, r0
   133e0:	1824      	adds	r4, r4, r0
   133e2:	07e7      	lsls	r7, r4, #31
   133e4:	0852      	lsrs	r2, r2, #1
   133e6:	4317      	orrs	r7, r2
   133e8:	0864      	lsrs	r4, r4, #1
   133ea:	4666      	mov	r6, ip
   133ec:	e708      	b.n	13200 <__aeabi_dsub+0x10c>
   133ee:	4812      	ldr	r0, [pc, #72]	; (13438 <__aeabi_dsub+0x344>)
   133f0:	4285      	cmp	r5, r0
   133f2:	d100      	bne.n	133f6 <__aeabi_dsub+0x302>
   133f4:	e085      	b.n	13502 <__aeabi_dsub+0x40e>
   133f6:	001d      	movs	r5, r3
   133f8:	e6bc      	b.n	13174 <__aeabi_dsub+0x80>
   133fa:	0029      	movs	r1, r5
   133fc:	3e1f      	subs	r6, #31
   133fe:	40f1      	lsrs	r1, r6
   13400:	2b20      	cmp	r3, #32
   13402:	d100      	bne.n	13406 <__aeabi_dsub+0x312>
   13404:	e07f      	b.n	13506 <__aeabi_dsub+0x412>
   13406:	2240      	movs	r2, #64	; 0x40
   13408:	1ad3      	subs	r3, r2, r3
   1340a:	409d      	lsls	r5, r3
   1340c:	432f      	orrs	r7, r5
   1340e:	1e7d      	subs	r5, r7, #1
   13410:	41af      	sbcs	r7, r5
   13412:	2400      	movs	r4, #0
   13414:	430f      	orrs	r7, r1
   13416:	2600      	movs	r6, #0
   13418:	e78e      	b.n	13338 <__aeabi_dsub+0x244>
   1341a:	002b      	movs	r3, r5
   1341c:	000f      	movs	r7, r1
   1341e:	3b20      	subs	r3, #32
   13420:	40df      	lsrs	r7, r3
   13422:	2d20      	cmp	r5, #32
   13424:	d071      	beq.n	1350a <__aeabi_dsub+0x416>
   13426:	2340      	movs	r3, #64	; 0x40
   13428:	1b5d      	subs	r5, r3, r5
   1342a:	40a9      	lsls	r1, r5
   1342c:	430a      	orrs	r2, r1
   1342e:	1e51      	subs	r1, r2, #1
   13430:	418a      	sbcs	r2, r1
   13432:	2100      	movs	r1, #0
   13434:	4317      	orrs	r7, r2
   13436:	e6af      	b.n	13198 <__aeabi_dsub+0xa4>
   13438:	000007ff 	.word	0x000007ff
   1343c:	ff7fffff 	.word	0xff7fffff
   13440:	800fffff 	.word	0x800fffff
   13444:	2e00      	cmp	r6, #0
   13446:	d03e      	beq.n	134c6 <__aeabi_dsub+0x3d2>
   13448:	4eb3      	ldr	r6, [pc, #716]	; (13718 <__aeabi_dsub+0x624>)
   1344a:	45b4      	cmp	ip, r6
   1344c:	d045      	beq.n	134da <__aeabi_dsub+0x3e6>
   1344e:	2680      	movs	r6, #128	; 0x80
   13450:	0436      	lsls	r6, r6, #16
   13452:	426d      	negs	r5, r5
   13454:	4334      	orrs	r4, r6
   13456:	2d38      	cmp	r5, #56	; 0x38
   13458:	dd00      	ble.n	1345c <__aeabi_dsub+0x368>
   1345a:	e0a8      	b.n	135ae <__aeabi_dsub+0x4ba>
   1345c:	2d1f      	cmp	r5, #31
   1345e:	dd00      	ble.n	13462 <__aeabi_dsub+0x36e>
   13460:	e11f      	b.n	136a2 <__aeabi_dsub+0x5ae>
   13462:	2620      	movs	r6, #32
   13464:	0027      	movs	r7, r4
   13466:	4650      	mov	r0, sl
   13468:	1b76      	subs	r6, r6, r5
   1346a:	40b7      	lsls	r7, r6
   1346c:	40e8      	lsrs	r0, r5
   1346e:	4307      	orrs	r7, r0
   13470:	4650      	mov	r0, sl
   13472:	40b0      	lsls	r0, r6
   13474:	1e46      	subs	r6, r0, #1
   13476:	41b0      	sbcs	r0, r6
   13478:	40ec      	lsrs	r4, r5
   1347a:	4338      	orrs	r0, r7
   1347c:	1a17      	subs	r7, r2, r0
   1347e:	42ba      	cmp	r2, r7
   13480:	4192      	sbcs	r2, r2
   13482:	1b0c      	subs	r4, r1, r4
   13484:	4252      	negs	r2, r2
   13486:	1aa4      	subs	r4, r4, r2
   13488:	4666      	mov	r6, ip
   1348a:	4698      	mov	r8, r3
   1348c:	e68b      	b.n	131a6 <__aeabi_dsub+0xb2>
   1348e:	4664      	mov	r4, ip
   13490:	4667      	mov	r7, ip
   13492:	432c      	orrs	r4, r5
   13494:	d000      	beq.n	13498 <__aeabi_dsub+0x3a4>
   13496:	e68b      	b.n	131b0 <__aeabi_dsub+0xbc>
   13498:	2500      	movs	r5, #0
   1349a:	2600      	movs	r6, #0
   1349c:	2700      	movs	r7, #0
   1349e:	e6ea      	b.n	13276 <__aeabi_dsub+0x182>
   134a0:	001e      	movs	r6, r3
   134a2:	e6ad      	b.n	13200 <__aeabi_dsub+0x10c>
   134a4:	2b1f      	cmp	r3, #31
   134a6:	dc60      	bgt.n	1356a <__aeabi_dsub+0x476>
   134a8:	2720      	movs	r7, #32
   134aa:	1af8      	subs	r0, r7, r3
   134ac:	000f      	movs	r7, r1
   134ae:	4684      	mov	ip, r0
   134b0:	4087      	lsls	r7, r0
   134b2:	0010      	movs	r0, r2
   134b4:	40d8      	lsrs	r0, r3
   134b6:	4307      	orrs	r7, r0
   134b8:	4660      	mov	r0, ip
   134ba:	4082      	lsls	r2, r0
   134bc:	1e50      	subs	r0, r2, #1
   134be:	4182      	sbcs	r2, r0
   134c0:	40d9      	lsrs	r1, r3
   134c2:	4317      	orrs	r7, r2
   134c4:	e6f5      	b.n	132b2 <__aeabi_dsub+0x1be>
   134c6:	0026      	movs	r6, r4
   134c8:	4650      	mov	r0, sl
   134ca:	4306      	orrs	r6, r0
   134cc:	d005      	beq.n	134da <__aeabi_dsub+0x3e6>
   134ce:	43ed      	mvns	r5, r5
   134d0:	2d00      	cmp	r5, #0
   134d2:	d0d3      	beq.n	1347c <__aeabi_dsub+0x388>
   134d4:	4e90      	ldr	r6, [pc, #576]	; (13718 <__aeabi_dsub+0x624>)
   134d6:	45b4      	cmp	ip, r6
   134d8:	d1bd      	bne.n	13456 <__aeabi_dsub+0x362>
   134da:	000c      	movs	r4, r1
   134dc:	0017      	movs	r7, r2
   134de:	4666      	mov	r6, ip
   134e0:	4698      	mov	r8, r3
   134e2:	e68d      	b.n	13200 <__aeabi_dsub+0x10c>
   134e4:	488c      	ldr	r0, [pc, #560]	; (13718 <__aeabi_dsub+0x624>)
   134e6:	4283      	cmp	r3, r0
   134e8:	d00b      	beq.n	13502 <__aeabi_dsub+0x40e>
   134ea:	4663      	mov	r3, ip
   134ec:	e6d9      	b.n	132a2 <__aeabi_dsub+0x1ae>
   134ee:	2d00      	cmp	r5, #0
   134f0:	d000      	beq.n	134f4 <__aeabi_dsub+0x400>
   134f2:	e096      	b.n	13622 <__aeabi_dsub+0x52e>
   134f4:	0008      	movs	r0, r1
   134f6:	4310      	orrs	r0, r2
   134f8:	d100      	bne.n	134fc <__aeabi_dsub+0x408>
   134fa:	e0e2      	b.n	136c2 <__aeabi_dsub+0x5ce>
   134fc:	000c      	movs	r4, r1
   134fe:	0017      	movs	r7, r2
   13500:	4698      	mov	r8, r3
   13502:	4e85      	ldr	r6, [pc, #532]	; (13718 <__aeabi_dsub+0x624>)
   13504:	e67c      	b.n	13200 <__aeabi_dsub+0x10c>
   13506:	2500      	movs	r5, #0
   13508:	e780      	b.n	1340c <__aeabi_dsub+0x318>
   1350a:	2100      	movs	r1, #0
   1350c:	e78e      	b.n	1342c <__aeabi_dsub+0x338>
   1350e:	0023      	movs	r3, r4
   13510:	4650      	mov	r0, sl
   13512:	4303      	orrs	r3, r0
   13514:	2e00      	cmp	r6, #0
   13516:	d000      	beq.n	1351a <__aeabi_dsub+0x426>
   13518:	e0a8      	b.n	1366c <__aeabi_dsub+0x578>
   1351a:	2b00      	cmp	r3, #0
   1351c:	d100      	bne.n	13520 <__aeabi_dsub+0x42c>
   1351e:	e0de      	b.n	136de <__aeabi_dsub+0x5ea>
   13520:	000b      	movs	r3, r1
   13522:	4313      	orrs	r3, r2
   13524:	d100      	bne.n	13528 <__aeabi_dsub+0x434>
   13526:	e66b      	b.n	13200 <__aeabi_dsub+0x10c>
   13528:	4452      	add	r2, sl
   1352a:	4552      	cmp	r2, sl
   1352c:	4180      	sbcs	r0, r0
   1352e:	1864      	adds	r4, r4, r1
   13530:	4240      	negs	r0, r0
   13532:	1824      	adds	r4, r4, r0
   13534:	0017      	movs	r7, r2
   13536:	0223      	lsls	r3, r4, #8
   13538:	d400      	bmi.n	1353c <__aeabi_dsub+0x448>
   1353a:	e6fd      	b.n	13338 <__aeabi_dsub+0x244>
   1353c:	4b77      	ldr	r3, [pc, #476]	; (1371c <__aeabi_dsub+0x628>)
   1353e:	4666      	mov	r6, ip
   13540:	401c      	ands	r4, r3
   13542:	e65d      	b.n	13200 <__aeabi_dsub+0x10c>
   13544:	0025      	movs	r5, r4
   13546:	4650      	mov	r0, sl
   13548:	4305      	orrs	r5, r0
   1354a:	2e00      	cmp	r6, #0
   1354c:	d1cf      	bne.n	134ee <__aeabi_dsub+0x3fa>
   1354e:	2d00      	cmp	r5, #0
   13550:	d14f      	bne.n	135f2 <__aeabi_dsub+0x4fe>
   13552:	000c      	movs	r4, r1
   13554:	4314      	orrs	r4, r2
   13556:	d100      	bne.n	1355a <__aeabi_dsub+0x466>
   13558:	e0a0      	b.n	1369c <__aeabi_dsub+0x5a8>
   1355a:	000c      	movs	r4, r1
   1355c:	0017      	movs	r7, r2
   1355e:	4698      	mov	r8, r3
   13560:	e64e      	b.n	13200 <__aeabi_dsub+0x10c>
   13562:	4666      	mov	r6, ip
   13564:	2400      	movs	r4, #0
   13566:	2700      	movs	r7, #0
   13568:	e685      	b.n	13276 <__aeabi_dsub+0x182>
   1356a:	001f      	movs	r7, r3
   1356c:	0008      	movs	r0, r1
   1356e:	3f20      	subs	r7, #32
   13570:	40f8      	lsrs	r0, r7
   13572:	0007      	movs	r7, r0
   13574:	2b20      	cmp	r3, #32
   13576:	d100      	bne.n	1357a <__aeabi_dsub+0x486>
   13578:	e08e      	b.n	13698 <__aeabi_dsub+0x5a4>
   1357a:	2040      	movs	r0, #64	; 0x40
   1357c:	1ac3      	subs	r3, r0, r3
   1357e:	4099      	lsls	r1, r3
   13580:	430a      	orrs	r2, r1
   13582:	1e51      	subs	r1, r2, #1
   13584:	418a      	sbcs	r2, r1
   13586:	2100      	movs	r1, #0
   13588:	4317      	orrs	r7, r2
   1358a:	e692      	b.n	132b2 <__aeabi_dsub+0x1be>
   1358c:	2e00      	cmp	r6, #0
   1358e:	d114      	bne.n	135ba <__aeabi_dsub+0x4c6>
   13590:	0026      	movs	r6, r4
   13592:	4650      	mov	r0, sl
   13594:	4306      	orrs	r6, r0
   13596:	d062      	beq.n	1365e <__aeabi_dsub+0x56a>
   13598:	43db      	mvns	r3, r3
   1359a:	2b00      	cmp	r3, #0
   1359c:	d15c      	bne.n	13658 <__aeabi_dsub+0x564>
   1359e:	1887      	adds	r7, r0, r2
   135a0:	4297      	cmp	r7, r2
   135a2:	4192      	sbcs	r2, r2
   135a4:	1864      	adds	r4, r4, r1
   135a6:	4252      	negs	r2, r2
   135a8:	18a4      	adds	r4, r4, r2
   135aa:	4666      	mov	r6, ip
   135ac:	e687      	b.n	132be <__aeabi_dsub+0x1ca>
   135ae:	4650      	mov	r0, sl
   135b0:	4320      	orrs	r0, r4
   135b2:	1e44      	subs	r4, r0, #1
   135b4:	41a0      	sbcs	r0, r4
   135b6:	2400      	movs	r4, #0
   135b8:	e760      	b.n	1347c <__aeabi_dsub+0x388>
   135ba:	4e57      	ldr	r6, [pc, #348]	; (13718 <__aeabi_dsub+0x624>)
   135bc:	45b4      	cmp	ip, r6
   135be:	d04e      	beq.n	1365e <__aeabi_dsub+0x56a>
   135c0:	2680      	movs	r6, #128	; 0x80
   135c2:	0436      	lsls	r6, r6, #16
   135c4:	425b      	negs	r3, r3
   135c6:	4334      	orrs	r4, r6
   135c8:	2b38      	cmp	r3, #56	; 0x38
   135ca:	dd00      	ble.n	135ce <__aeabi_dsub+0x4da>
   135cc:	e07f      	b.n	136ce <__aeabi_dsub+0x5da>
   135ce:	2b1f      	cmp	r3, #31
   135d0:	dd00      	ble.n	135d4 <__aeabi_dsub+0x4e0>
   135d2:	e08b      	b.n	136ec <__aeabi_dsub+0x5f8>
   135d4:	2620      	movs	r6, #32
   135d6:	0027      	movs	r7, r4
   135d8:	4650      	mov	r0, sl
   135da:	1af6      	subs	r6, r6, r3
   135dc:	40b7      	lsls	r7, r6
   135de:	40d8      	lsrs	r0, r3
   135e0:	4307      	orrs	r7, r0
   135e2:	4650      	mov	r0, sl
   135e4:	40b0      	lsls	r0, r6
   135e6:	1e46      	subs	r6, r0, #1
   135e8:	41b0      	sbcs	r0, r6
   135ea:	4307      	orrs	r7, r0
   135ec:	40dc      	lsrs	r4, r3
   135ee:	18bf      	adds	r7, r7, r2
   135f0:	e7d6      	b.n	135a0 <__aeabi_dsub+0x4ac>
   135f2:	000d      	movs	r5, r1
   135f4:	4315      	orrs	r5, r2
   135f6:	d100      	bne.n	135fa <__aeabi_dsub+0x506>
   135f8:	e602      	b.n	13200 <__aeabi_dsub+0x10c>
   135fa:	4650      	mov	r0, sl
   135fc:	1a80      	subs	r0, r0, r2
   135fe:	4582      	cmp	sl, r0
   13600:	41bf      	sbcs	r7, r7
   13602:	1a65      	subs	r5, r4, r1
   13604:	427f      	negs	r7, r7
   13606:	1bed      	subs	r5, r5, r7
   13608:	4684      	mov	ip, r0
   1360a:	0228      	lsls	r0, r5, #8
   1360c:	d400      	bmi.n	13610 <__aeabi_dsub+0x51c>
   1360e:	e68d      	b.n	1332c <__aeabi_dsub+0x238>
   13610:	4650      	mov	r0, sl
   13612:	1a17      	subs	r7, r2, r0
   13614:	42ba      	cmp	r2, r7
   13616:	4192      	sbcs	r2, r2
   13618:	1b0c      	subs	r4, r1, r4
   1361a:	4252      	negs	r2, r2
   1361c:	1aa4      	subs	r4, r4, r2
   1361e:	4698      	mov	r8, r3
   13620:	e5ee      	b.n	13200 <__aeabi_dsub+0x10c>
   13622:	000d      	movs	r5, r1
   13624:	4315      	orrs	r5, r2
   13626:	d100      	bne.n	1362a <__aeabi_dsub+0x536>
   13628:	e76b      	b.n	13502 <__aeabi_dsub+0x40e>
   1362a:	4650      	mov	r0, sl
   1362c:	0767      	lsls	r7, r4, #29
   1362e:	08c0      	lsrs	r0, r0, #3
   13630:	4307      	orrs	r7, r0
   13632:	2080      	movs	r0, #128	; 0x80
   13634:	08e4      	lsrs	r4, r4, #3
   13636:	0300      	lsls	r0, r0, #12
   13638:	4204      	tst	r4, r0
   1363a:	d007      	beq.n	1364c <__aeabi_dsub+0x558>
   1363c:	08cd      	lsrs	r5, r1, #3
   1363e:	4205      	tst	r5, r0
   13640:	d104      	bne.n	1364c <__aeabi_dsub+0x558>
   13642:	002c      	movs	r4, r5
   13644:	4698      	mov	r8, r3
   13646:	08d7      	lsrs	r7, r2, #3
   13648:	0749      	lsls	r1, r1, #29
   1364a:	430f      	orrs	r7, r1
   1364c:	0f7b      	lsrs	r3, r7, #29
   1364e:	00e4      	lsls	r4, r4, #3
   13650:	431c      	orrs	r4, r3
   13652:	00ff      	lsls	r7, r7, #3
   13654:	4e30      	ldr	r6, [pc, #192]	; (13718 <__aeabi_dsub+0x624>)
   13656:	e5d3      	b.n	13200 <__aeabi_dsub+0x10c>
   13658:	4e2f      	ldr	r6, [pc, #188]	; (13718 <__aeabi_dsub+0x624>)
   1365a:	45b4      	cmp	ip, r6
   1365c:	d1b4      	bne.n	135c8 <__aeabi_dsub+0x4d4>
   1365e:	000c      	movs	r4, r1
   13660:	0017      	movs	r7, r2
   13662:	4666      	mov	r6, ip
   13664:	e5cc      	b.n	13200 <__aeabi_dsub+0x10c>
   13666:	2700      	movs	r7, #0
   13668:	2400      	movs	r4, #0
   1366a:	e5e8      	b.n	1323e <__aeabi_dsub+0x14a>
   1366c:	2b00      	cmp	r3, #0
   1366e:	d039      	beq.n	136e4 <__aeabi_dsub+0x5f0>
   13670:	000b      	movs	r3, r1
   13672:	4313      	orrs	r3, r2
   13674:	d100      	bne.n	13678 <__aeabi_dsub+0x584>
   13676:	e744      	b.n	13502 <__aeabi_dsub+0x40e>
   13678:	08c0      	lsrs	r0, r0, #3
   1367a:	0767      	lsls	r7, r4, #29
   1367c:	4307      	orrs	r7, r0
   1367e:	2080      	movs	r0, #128	; 0x80
   13680:	08e4      	lsrs	r4, r4, #3
   13682:	0300      	lsls	r0, r0, #12
   13684:	4204      	tst	r4, r0
   13686:	d0e1      	beq.n	1364c <__aeabi_dsub+0x558>
   13688:	08cb      	lsrs	r3, r1, #3
   1368a:	4203      	tst	r3, r0
   1368c:	d1de      	bne.n	1364c <__aeabi_dsub+0x558>
   1368e:	08d7      	lsrs	r7, r2, #3
   13690:	0749      	lsls	r1, r1, #29
   13692:	430f      	orrs	r7, r1
   13694:	001c      	movs	r4, r3
   13696:	e7d9      	b.n	1364c <__aeabi_dsub+0x558>
   13698:	2100      	movs	r1, #0
   1369a:	e771      	b.n	13580 <__aeabi_dsub+0x48c>
   1369c:	2500      	movs	r5, #0
   1369e:	2700      	movs	r7, #0
   136a0:	e5e9      	b.n	13276 <__aeabi_dsub+0x182>
   136a2:	002e      	movs	r6, r5
   136a4:	0027      	movs	r7, r4
   136a6:	3e20      	subs	r6, #32
   136a8:	40f7      	lsrs	r7, r6
   136aa:	2d20      	cmp	r5, #32
   136ac:	d02f      	beq.n	1370e <__aeabi_dsub+0x61a>
   136ae:	2640      	movs	r6, #64	; 0x40
   136b0:	1b75      	subs	r5, r6, r5
   136b2:	40ac      	lsls	r4, r5
   136b4:	4650      	mov	r0, sl
   136b6:	4320      	orrs	r0, r4
   136b8:	1e44      	subs	r4, r0, #1
   136ba:	41a0      	sbcs	r0, r4
   136bc:	2400      	movs	r4, #0
   136be:	4338      	orrs	r0, r7
   136c0:	e6dc      	b.n	1347c <__aeabi_dsub+0x388>
   136c2:	2480      	movs	r4, #128	; 0x80
   136c4:	2500      	movs	r5, #0
   136c6:	0324      	lsls	r4, r4, #12
   136c8:	4e13      	ldr	r6, [pc, #76]	; (13718 <__aeabi_dsub+0x624>)
   136ca:	2700      	movs	r7, #0
   136cc:	e5d3      	b.n	13276 <__aeabi_dsub+0x182>
   136ce:	4650      	mov	r0, sl
   136d0:	4320      	orrs	r0, r4
   136d2:	0007      	movs	r7, r0
   136d4:	1e78      	subs	r0, r7, #1
   136d6:	4187      	sbcs	r7, r0
   136d8:	2400      	movs	r4, #0
   136da:	18bf      	adds	r7, r7, r2
   136dc:	e760      	b.n	135a0 <__aeabi_dsub+0x4ac>
   136de:	000c      	movs	r4, r1
   136e0:	0017      	movs	r7, r2
   136e2:	e58d      	b.n	13200 <__aeabi_dsub+0x10c>
   136e4:	000c      	movs	r4, r1
   136e6:	0017      	movs	r7, r2
   136e8:	4e0b      	ldr	r6, [pc, #44]	; (13718 <__aeabi_dsub+0x624>)
   136ea:	e589      	b.n	13200 <__aeabi_dsub+0x10c>
   136ec:	001e      	movs	r6, r3
   136ee:	0027      	movs	r7, r4
   136f0:	3e20      	subs	r6, #32
   136f2:	40f7      	lsrs	r7, r6
   136f4:	2b20      	cmp	r3, #32
   136f6:	d00c      	beq.n	13712 <__aeabi_dsub+0x61e>
   136f8:	2640      	movs	r6, #64	; 0x40
   136fa:	1af3      	subs	r3, r6, r3
   136fc:	409c      	lsls	r4, r3
   136fe:	4650      	mov	r0, sl
   13700:	4320      	orrs	r0, r4
   13702:	1e44      	subs	r4, r0, #1
   13704:	41a0      	sbcs	r0, r4
   13706:	4307      	orrs	r7, r0
   13708:	2400      	movs	r4, #0
   1370a:	18bf      	adds	r7, r7, r2
   1370c:	e748      	b.n	135a0 <__aeabi_dsub+0x4ac>
   1370e:	2400      	movs	r4, #0
   13710:	e7d0      	b.n	136b4 <__aeabi_dsub+0x5c0>
   13712:	2400      	movs	r4, #0
   13714:	e7f3      	b.n	136fe <__aeabi_dsub+0x60a>
   13716:	46c0      	nop			; (mov r8, r8)
   13718:	000007ff 	.word	0x000007ff
   1371c:	ff7fffff 	.word	0xff7fffff

00013720 <__aeabi_dcmpun>:
   13720:	b570      	push	{r4, r5, r6, lr}
   13722:	4e0e      	ldr	r6, [pc, #56]	; (1375c <__aeabi_dcmpun+0x3c>)
   13724:	030d      	lsls	r5, r1, #12
   13726:	031c      	lsls	r4, r3, #12
   13728:	0049      	lsls	r1, r1, #1
   1372a:	005b      	lsls	r3, r3, #1
   1372c:	0b2d      	lsrs	r5, r5, #12
   1372e:	0d49      	lsrs	r1, r1, #21
   13730:	0b24      	lsrs	r4, r4, #12
   13732:	0d5b      	lsrs	r3, r3, #21
   13734:	42b1      	cmp	r1, r6
   13736:	d004      	beq.n	13742 <__aeabi_dcmpun+0x22>
   13738:	4908      	ldr	r1, [pc, #32]	; (1375c <__aeabi_dcmpun+0x3c>)
   1373a:	2000      	movs	r0, #0
   1373c:	428b      	cmp	r3, r1
   1373e:	d008      	beq.n	13752 <__aeabi_dcmpun+0x32>
   13740:	bd70      	pop	{r4, r5, r6, pc}
   13742:	4305      	orrs	r5, r0
   13744:	2001      	movs	r0, #1
   13746:	2d00      	cmp	r5, #0
   13748:	d1fa      	bne.n	13740 <__aeabi_dcmpun+0x20>
   1374a:	4904      	ldr	r1, [pc, #16]	; (1375c <__aeabi_dcmpun+0x3c>)
   1374c:	2000      	movs	r0, #0
   1374e:	428b      	cmp	r3, r1
   13750:	d1f6      	bne.n	13740 <__aeabi_dcmpun+0x20>
   13752:	4314      	orrs	r4, r2
   13754:	0020      	movs	r0, r4
   13756:	1e44      	subs	r4, r0, #1
   13758:	41a0      	sbcs	r0, r4
   1375a:	e7f1      	b.n	13740 <__aeabi_dcmpun+0x20>
   1375c:	000007ff 	.word	0x000007ff

00013760 <__aeabi_d2iz>:
   13760:	b530      	push	{r4, r5, lr}
   13762:	4d13      	ldr	r5, [pc, #76]	; (137b0 <__aeabi_d2iz+0x50>)
   13764:	030a      	lsls	r2, r1, #12
   13766:	004b      	lsls	r3, r1, #1
   13768:	0b12      	lsrs	r2, r2, #12
   1376a:	0d5b      	lsrs	r3, r3, #21
   1376c:	0fc9      	lsrs	r1, r1, #31
   1376e:	2400      	movs	r4, #0
   13770:	42ab      	cmp	r3, r5
   13772:	dd10      	ble.n	13796 <__aeabi_d2iz+0x36>
   13774:	4c0f      	ldr	r4, [pc, #60]	; (137b4 <__aeabi_d2iz+0x54>)
   13776:	42a3      	cmp	r3, r4
   13778:	dc0f      	bgt.n	1379a <__aeabi_d2iz+0x3a>
   1377a:	2480      	movs	r4, #128	; 0x80
   1377c:	4d0e      	ldr	r5, [pc, #56]	; (137b8 <__aeabi_d2iz+0x58>)
   1377e:	0364      	lsls	r4, r4, #13
   13780:	4322      	orrs	r2, r4
   13782:	1aed      	subs	r5, r5, r3
   13784:	2d1f      	cmp	r5, #31
   13786:	dd0b      	ble.n	137a0 <__aeabi_d2iz+0x40>
   13788:	480c      	ldr	r0, [pc, #48]	; (137bc <__aeabi_d2iz+0x5c>)
   1378a:	1ac3      	subs	r3, r0, r3
   1378c:	40da      	lsrs	r2, r3
   1378e:	4254      	negs	r4, r2
   13790:	2900      	cmp	r1, #0
   13792:	d100      	bne.n	13796 <__aeabi_d2iz+0x36>
   13794:	0014      	movs	r4, r2
   13796:	0020      	movs	r0, r4
   13798:	bd30      	pop	{r4, r5, pc}
   1379a:	4b09      	ldr	r3, [pc, #36]	; (137c0 <__aeabi_d2iz+0x60>)
   1379c:	18cc      	adds	r4, r1, r3
   1379e:	e7fa      	b.n	13796 <__aeabi_d2iz+0x36>
   137a0:	4c08      	ldr	r4, [pc, #32]	; (137c4 <__aeabi_d2iz+0x64>)
   137a2:	40e8      	lsrs	r0, r5
   137a4:	46a4      	mov	ip, r4
   137a6:	4463      	add	r3, ip
   137a8:	409a      	lsls	r2, r3
   137aa:	4302      	orrs	r2, r0
   137ac:	e7ef      	b.n	1378e <__aeabi_d2iz+0x2e>
   137ae:	46c0      	nop			; (mov r8, r8)
   137b0:	000003fe 	.word	0x000003fe
   137b4:	0000041d 	.word	0x0000041d
   137b8:	00000433 	.word	0x00000433
   137bc:	00000413 	.word	0x00000413
   137c0:	7fffffff 	.word	0x7fffffff
   137c4:	fffffbed 	.word	0xfffffbed

000137c8 <__aeabi_i2d>:
   137c8:	b570      	push	{r4, r5, r6, lr}
   137ca:	2800      	cmp	r0, #0
   137cc:	d030      	beq.n	13830 <__aeabi_i2d+0x68>
   137ce:	17c3      	asrs	r3, r0, #31
   137d0:	18c4      	adds	r4, r0, r3
   137d2:	405c      	eors	r4, r3
   137d4:	0fc5      	lsrs	r5, r0, #31
   137d6:	0020      	movs	r0, r4
   137d8:	f000 f8c2 	bl	13960 <__clzsi2>
   137dc:	4b17      	ldr	r3, [pc, #92]	; (1383c <__aeabi_i2d+0x74>)
   137de:	4a18      	ldr	r2, [pc, #96]	; (13840 <__aeabi_i2d+0x78>)
   137e0:	1a1b      	subs	r3, r3, r0
   137e2:	1ad2      	subs	r2, r2, r3
   137e4:	2a1f      	cmp	r2, #31
   137e6:	dd18      	ble.n	1381a <__aeabi_i2d+0x52>
   137e8:	4a16      	ldr	r2, [pc, #88]	; (13844 <__aeabi_i2d+0x7c>)
   137ea:	1ad2      	subs	r2, r2, r3
   137ec:	4094      	lsls	r4, r2
   137ee:	2200      	movs	r2, #0
   137f0:	0324      	lsls	r4, r4, #12
   137f2:	055b      	lsls	r3, r3, #21
   137f4:	0b24      	lsrs	r4, r4, #12
   137f6:	0d5b      	lsrs	r3, r3, #21
   137f8:	2100      	movs	r1, #0
   137fa:	0010      	movs	r0, r2
   137fc:	0324      	lsls	r4, r4, #12
   137fe:	0d0a      	lsrs	r2, r1, #20
   13800:	0b24      	lsrs	r4, r4, #12
   13802:	0512      	lsls	r2, r2, #20
   13804:	4322      	orrs	r2, r4
   13806:	4c10      	ldr	r4, [pc, #64]	; (13848 <__aeabi_i2d+0x80>)
   13808:	051b      	lsls	r3, r3, #20
   1380a:	4022      	ands	r2, r4
   1380c:	4313      	orrs	r3, r2
   1380e:	005b      	lsls	r3, r3, #1
   13810:	07ed      	lsls	r5, r5, #31
   13812:	085b      	lsrs	r3, r3, #1
   13814:	432b      	orrs	r3, r5
   13816:	0019      	movs	r1, r3
   13818:	bd70      	pop	{r4, r5, r6, pc}
   1381a:	0021      	movs	r1, r4
   1381c:	4091      	lsls	r1, r2
   1381e:	000a      	movs	r2, r1
   13820:	210b      	movs	r1, #11
   13822:	1a08      	subs	r0, r1, r0
   13824:	40c4      	lsrs	r4, r0
   13826:	055b      	lsls	r3, r3, #21
   13828:	0324      	lsls	r4, r4, #12
   1382a:	0b24      	lsrs	r4, r4, #12
   1382c:	0d5b      	lsrs	r3, r3, #21
   1382e:	e7e3      	b.n	137f8 <__aeabi_i2d+0x30>
   13830:	2500      	movs	r5, #0
   13832:	2300      	movs	r3, #0
   13834:	2400      	movs	r4, #0
   13836:	2200      	movs	r2, #0
   13838:	e7de      	b.n	137f8 <__aeabi_i2d+0x30>
   1383a:	46c0      	nop			; (mov r8, r8)
   1383c:	0000041e 	.word	0x0000041e
   13840:	00000433 	.word	0x00000433
   13844:	00000413 	.word	0x00000413
   13848:	800fffff 	.word	0x800fffff

0001384c <__aeabi_ui2d>:
   1384c:	b510      	push	{r4, lr}
   1384e:	1e04      	subs	r4, r0, #0
   13850:	d028      	beq.n	138a4 <__aeabi_ui2d+0x58>
   13852:	f000 f885 	bl	13960 <__clzsi2>
   13856:	4b15      	ldr	r3, [pc, #84]	; (138ac <__aeabi_ui2d+0x60>)
   13858:	4a15      	ldr	r2, [pc, #84]	; (138b0 <__aeabi_ui2d+0x64>)
   1385a:	1a1b      	subs	r3, r3, r0
   1385c:	1ad2      	subs	r2, r2, r3
   1385e:	2a1f      	cmp	r2, #31
   13860:	dd15      	ble.n	1388e <__aeabi_ui2d+0x42>
   13862:	4a14      	ldr	r2, [pc, #80]	; (138b4 <__aeabi_ui2d+0x68>)
   13864:	1ad2      	subs	r2, r2, r3
   13866:	4094      	lsls	r4, r2
   13868:	2200      	movs	r2, #0
   1386a:	0324      	lsls	r4, r4, #12
   1386c:	055b      	lsls	r3, r3, #21
   1386e:	0b24      	lsrs	r4, r4, #12
   13870:	0d5b      	lsrs	r3, r3, #21
   13872:	2100      	movs	r1, #0
   13874:	0010      	movs	r0, r2
   13876:	0324      	lsls	r4, r4, #12
   13878:	0d0a      	lsrs	r2, r1, #20
   1387a:	0b24      	lsrs	r4, r4, #12
   1387c:	0512      	lsls	r2, r2, #20
   1387e:	4322      	orrs	r2, r4
   13880:	4c0d      	ldr	r4, [pc, #52]	; (138b8 <__aeabi_ui2d+0x6c>)
   13882:	051b      	lsls	r3, r3, #20
   13884:	4022      	ands	r2, r4
   13886:	4313      	orrs	r3, r2
   13888:	005b      	lsls	r3, r3, #1
   1388a:	0859      	lsrs	r1, r3, #1
   1388c:	bd10      	pop	{r4, pc}
   1388e:	0021      	movs	r1, r4
   13890:	4091      	lsls	r1, r2
   13892:	000a      	movs	r2, r1
   13894:	210b      	movs	r1, #11
   13896:	1a08      	subs	r0, r1, r0
   13898:	40c4      	lsrs	r4, r0
   1389a:	055b      	lsls	r3, r3, #21
   1389c:	0324      	lsls	r4, r4, #12
   1389e:	0b24      	lsrs	r4, r4, #12
   138a0:	0d5b      	lsrs	r3, r3, #21
   138a2:	e7e6      	b.n	13872 <__aeabi_ui2d+0x26>
   138a4:	2300      	movs	r3, #0
   138a6:	2400      	movs	r4, #0
   138a8:	2200      	movs	r2, #0
   138aa:	e7e2      	b.n	13872 <__aeabi_ui2d+0x26>
   138ac:	0000041e 	.word	0x0000041e
   138b0:	00000433 	.word	0x00000433
   138b4:	00000413 	.word	0x00000413
   138b8:	800fffff 	.word	0x800fffff

000138bc <__aeabi_f2d>:
   138bc:	0041      	lsls	r1, r0, #1
   138be:	0e09      	lsrs	r1, r1, #24
   138c0:	1c4b      	adds	r3, r1, #1
   138c2:	b570      	push	{r4, r5, r6, lr}
   138c4:	b2db      	uxtb	r3, r3
   138c6:	0246      	lsls	r6, r0, #9
   138c8:	0a75      	lsrs	r5, r6, #9
   138ca:	0fc4      	lsrs	r4, r0, #31
   138cc:	2b01      	cmp	r3, #1
   138ce:	dd14      	ble.n	138fa <__aeabi_f2d+0x3e>
   138d0:	23e0      	movs	r3, #224	; 0xe0
   138d2:	009b      	lsls	r3, r3, #2
   138d4:	076d      	lsls	r5, r5, #29
   138d6:	0b36      	lsrs	r6, r6, #12
   138d8:	18cb      	adds	r3, r1, r3
   138da:	2100      	movs	r1, #0
   138dc:	0d0a      	lsrs	r2, r1, #20
   138de:	0028      	movs	r0, r5
   138e0:	0512      	lsls	r2, r2, #20
   138e2:	4d1c      	ldr	r5, [pc, #112]	; (13954 <__aeabi_f2d+0x98>)
   138e4:	4332      	orrs	r2, r6
   138e6:	055b      	lsls	r3, r3, #21
   138e8:	402a      	ands	r2, r5
   138ea:	085b      	lsrs	r3, r3, #1
   138ec:	4313      	orrs	r3, r2
   138ee:	005b      	lsls	r3, r3, #1
   138f0:	07e4      	lsls	r4, r4, #31
   138f2:	085b      	lsrs	r3, r3, #1
   138f4:	4323      	orrs	r3, r4
   138f6:	0019      	movs	r1, r3
   138f8:	bd70      	pop	{r4, r5, r6, pc}
   138fa:	2900      	cmp	r1, #0
   138fc:	d114      	bne.n	13928 <__aeabi_f2d+0x6c>
   138fe:	2d00      	cmp	r5, #0
   13900:	d01e      	beq.n	13940 <__aeabi_f2d+0x84>
   13902:	0028      	movs	r0, r5
   13904:	f000 f82c 	bl	13960 <__clzsi2>
   13908:	280a      	cmp	r0, #10
   1390a:	dc1c      	bgt.n	13946 <__aeabi_f2d+0x8a>
   1390c:	230b      	movs	r3, #11
   1390e:	002a      	movs	r2, r5
   13910:	1a1b      	subs	r3, r3, r0
   13912:	40da      	lsrs	r2, r3
   13914:	0003      	movs	r3, r0
   13916:	3315      	adds	r3, #21
   13918:	409d      	lsls	r5, r3
   1391a:	4b0f      	ldr	r3, [pc, #60]	; (13958 <__aeabi_f2d+0x9c>)
   1391c:	0312      	lsls	r2, r2, #12
   1391e:	1a1b      	subs	r3, r3, r0
   13920:	055b      	lsls	r3, r3, #21
   13922:	0b16      	lsrs	r6, r2, #12
   13924:	0d5b      	lsrs	r3, r3, #21
   13926:	e7d8      	b.n	138da <__aeabi_f2d+0x1e>
   13928:	2d00      	cmp	r5, #0
   1392a:	d006      	beq.n	1393a <__aeabi_f2d+0x7e>
   1392c:	0b32      	lsrs	r2, r6, #12
   1392e:	2680      	movs	r6, #128	; 0x80
   13930:	0336      	lsls	r6, r6, #12
   13932:	076d      	lsls	r5, r5, #29
   13934:	4316      	orrs	r6, r2
   13936:	4b09      	ldr	r3, [pc, #36]	; (1395c <__aeabi_f2d+0xa0>)
   13938:	e7cf      	b.n	138da <__aeabi_f2d+0x1e>
   1393a:	4b08      	ldr	r3, [pc, #32]	; (1395c <__aeabi_f2d+0xa0>)
   1393c:	2600      	movs	r6, #0
   1393e:	e7cc      	b.n	138da <__aeabi_f2d+0x1e>
   13940:	2300      	movs	r3, #0
   13942:	2600      	movs	r6, #0
   13944:	e7c9      	b.n	138da <__aeabi_f2d+0x1e>
   13946:	0003      	movs	r3, r0
   13948:	002a      	movs	r2, r5
   1394a:	3b0b      	subs	r3, #11
   1394c:	409a      	lsls	r2, r3
   1394e:	2500      	movs	r5, #0
   13950:	e7e3      	b.n	1391a <__aeabi_f2d+0x5e>
   13952:	46c0      	nop			; (mov r8, r8)
   13954:	800fffff 	.word	0x800fffff
   13958:	00000389 	.word	0x00000389
   1395c:	000007ff 	.word	0x000007ff

00013960 <__clzsi2>:
   13960:	211c      	movs	r1, #28
   13962:	2301      	movs	r3, #1
   13964:	041b      	lsls	r3, r3, #16
   13966:	4298      	cmp	r0, r3
   13968:	d301      	bcc.n	1396e <__clzsi2+0xe>
   1396a:	0c00      	lsrs	r0, r0, #16
   1396c:	3910      	subs	r1, #16
   1396e:	0a1b      	lsrs	r3, r3, #8
   13970:	4298      	cmp	r0, r3
   13972:	d301      	bcc.n	13978 <__clzsi2+0x18>
   13974:	0a00      	lsrs	r0, r0, #8
   13976:	3908      	subs	r1, #8
   13978:	091b      	lsrs	r3, r3, #4
   1397a:	4298      	cmp	r0, r3
   1397c:	d301      	bcc.n	13982 <__clzsi2+0x22>
   1397e:	0900      	lsrs	r0, r0, #4
   13980:	3904      	subs	r1, #4
   13982:	a202      	add	r2, pc, #8	; (adr r2, 1398c <__clzsi2+0x2c>)
   13984:	5c10      	ldrb	r0, [r2, r0]
   13986:	1840      	adds	r0, r0, r1
   13988:	4770      	bx	lr
   1398a:	46c0      	nop			; (mov r8, r8)
   1398c:	02020304 	.word	0x02020304
   13990:	01010101 	.word	0x01010101
	...
   1399c:	50504128 	.word	0x50504128
   139a0:	52452829 	.word	0x52452829
   139a4:	255b2952 	.word	0x255b2952
   139a8:	255b5d73 	.word	0x255b5d73
   139ac:	00005d64 	.word	0x00005d64
   139b0:	61766e69 	.word	0x61766e69
   139b4:	6564696c 	.word	0x6564696c
   139b8:	636f6920 	.word	0x636f6920
   139bc:	6320746c 	.word	0x6320746c
   139c0:	0000646d 	.word	0x0000646d

000139c4 <__FUNCTION__.14945>:
   139c4:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   139d4:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   139e4:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   139f4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13a04:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   13a14:	74207075 63206568 00706968 66696828     up the chip.(hif
   13a24:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   13a34:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   13a44:	66696828 64612029 73657264 75622073     (hif) address bu
   13a54:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   13a64:	70757272 20646574 6b636170 53207465     rrupted packet S
   13a74:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   13a84:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   13a94:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   13aa4:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   13ab4:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   13ac4:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   13ad4:	73696765 65726574 00000064 2061744f     egistered...Ota 
   13ae4:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   13af4:	69676572 72657473 00006465 70797243     registered..Cryp
   13b04:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   13b14:	7220746f 73696765 65726574 00000064     ot registered...
   13b24:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   13b34:	6f6e2073 65722074 74736967 64657265     s not registered
   13b44:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   13b54:	72672064 2070756f 00004449 66696828     d group ID..(hif
   13b64:	6f682029 61207473 64207070 276e6469     ) host app didn'
   13b74:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   13b84:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   13b94:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   13ba4:	61462029 2065736c 65746e69 70757272     ) False interrup
   13bb4:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   13bc4:	74206c69 6552206f 69206461 7265746e     il to Read inter
   13bd4:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   13be4:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   13bf4:	746e6920 75727265 25207470 72742064      interrupt %d tr
   13c04:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   13c14:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   13c24:	72612064 656d7567 0000746e 20505041     d argument..APP 
   13c34:	75716552 65747365 69532064 6920657a     Requested Size i
   13c44:	616c2073 72656772 61687420 6874206e     s larger than th
   13c54:	65722065 65766963 75622064 72656666     e recived buffer
   13c64:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   13c74:	00000000 20505041 75716552 65747365     ....APP Requeste
   13c84:	64412064 73657264 65622073 646e6f79     d Address beyond
   13c94:	65687420 63657220 64657669 66756220      the recived buf
   13ca4:	20726566 72646461 20737365 20646e61     fer address and 
   13cb4:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   13cc4:	0000000a 00001954 00001924 0000191c     ....T...$.......
   13cd4:	00001934 0000192c 0000194c 0000193c     4...,...L...<...
   13ce4:	00001944                                D...

00013ce8 <__FUNCTION__.13073>:
   13ce8:	5f666968 646e6573 00000000              hif_send....

00013cf4 <__FUNCTION__.13083>:
   13cf4:	5f666968 00727369                       hif_isr.

00013cfc <__FUNCTION__.13089>:
   13cfc:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00013d0c <__FUNCTION__.13101>:
   13d0c:	5f666968 65636572 00657669              hif_receive.

00013d18 <__FUNCTION__.13117>:
   13d18:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   13d28:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   13d38:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   13d48:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   13d58:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13d68:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   13d78:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   13d88:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   13d98:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   13da8:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   13db8:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   13dc8:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   13dd8:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   13de8:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   13df8:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   13e08:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   13e18:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   13e28:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   13e38:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   13e48:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   13e58:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   13e68:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   13e78:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   13e88:	73747365 72657020 61637320 6c73206e     ests per scan sl
   13e98:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   13ea8:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   13eb8:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   13ec8:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   13ed8:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   13ee8:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   13ef8:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   13f08:	6e694d20 69726420 20726576 20726576      Min driver ver 
   13f18:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   13f28:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   13f38:	0000000a 333a3931 35333a31 00000000     ....19:31:35....
   13f48:	20727041 32203132 00383130 76697244     Apr 21 2018.Driv
   13f58:	62207265 746c6975 20746120 25097325     er built at %s.%
   13f68:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   13f78:	7277616d 65562065 6f697372 0000006e     mawre Version...
   13f88:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   13f98:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   13fa8:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   13fb8:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   13fc8:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   13fd8:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   13fe8:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   13ff8:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   14008:	53502074 656b204b 656c2079 6874676e     t PSK key length
   14018:	00000000 65646e75 656e6966 65732064     ....undefined se
   14028:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   14038:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   14048:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   14058:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   14068:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   14078:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   14088:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   14098:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   140a8:	66754220 20726566 65637865 64656465      Buffer exceeded
   140b8:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   140c8:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   140d8:	00000000                                ....

000140dc <__FUNCTION__.13052>:
   140dc:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000140e8 <__FUNCTION__.13081>:
   140e8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000140f8 <__FUNCTION__.13109>:
   140f8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   14108:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   14118:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   14128:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   14138:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   14148:	20656874 70696863 00000000 50504128     the chip....(APP
   14158:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   14168:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   14178:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   14188:	6c616974 00657a69                       tialize.

00014190 <__FUNCTION__.12915>:
   14190:	70696863 6b61775f 00000065              chip_wake...

0001419c <__FUNCTION__.12964>:
   1419c:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   141ac:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   141bc:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   141cc:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   141dc:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   141ec:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   141fc:	6e65206f 656c6261 746e6920 75727265     o enable interru
   1420c:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   1421c:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   1422c:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   1423c:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   1424c:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   1425c:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   1426c:	75622074 00000073                       t bus...

00014274 <__FUNCTION__.12962>:
   14274:	645f6d6e 695f7672 0074696e              nm_drv_init.

00014280 <__FUNCTION__.12969>:
   14280:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00014290 <crc7_syndrome_table>:
   14290:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   142a0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   142b0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   142c0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   142d0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   142e0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   142f0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   14300:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   14310:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   14320:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   14330:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   14340:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   14350:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   14360:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   14370:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   14380:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   14390:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   143a0:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   143b0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   143c0:	73756220 72726520 2e2e726f 0000002e      bus error......
   143d0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   143e0:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   143f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   14400:	61642064 72206174 6f707365 2065736e     d data response 
   14410:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   14420:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   14430:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   14440:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   14450:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14460:	656c6961 61642064 72206174 6f707365     ailed data respo
   14470:	2065736e 64616572 7562202c 72652073     nse read, bus er
   14480:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   14490:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   144a0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   144b0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   144c0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   144d0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   144e0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   144f0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   14500:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   14510:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   14520:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   14530:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   14540:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   14550:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14560:	656c6961 61642064 62206174 6b636f6c     ailed data block
   14570:	69727720 202c6574 20737562 6f727265      write, bus erro
   14580:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   14590:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   145a0:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   145b0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   145c0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   145d0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   145e0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   145f0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   14600:	65722064 6e6f7073 202c6573 74697277     d response, writ
   14610:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   14620:	00000000 65736552 6e612074 65722064     ....Reset and re
   14630:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   14640:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   14650:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   14660:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   14670:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   14680:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   14690:	69727720 62206574 6b636f6c 30252820      write block (%0
   146a0:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   146b0:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   146c0:	61746164 69727720 2e2e6574 0000002e     data write......
   146d0:	65736552 6e612074 65722064 20797274     Reset and retry 
   146e0:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   146f0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   14700:	72202c64 20646165 20676572 38302528     d, read reg (%08
   14710:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   14720:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   14730:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   14740:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   14750:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   14760:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   14770:	6e612074 65722064 20797274 25206425     t and retry %d %
   14780:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   14790:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   147a0:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   147b0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   147c0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   147d0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   147e0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   147f0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   14800:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   14810:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14820:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   14830:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   14840:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   14850:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   14860:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14870:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   14880:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   14890:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   148a0:	6e692064 6e726574 77206c61 65746972     d internal write
   148b0:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   148c0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   148d0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   148e0:	64692070 002e2e2e 00003510 00003510     p id.....5...5..
   148f0:	000035a0 00003464 000034aa 000034cc     .5..d4...4...4..
   14900:	00003552 00003552 0000360c 00003438     R5..R5...6..84..
   14910:	00003666 00003666 00003666 00003666     f6..f6..f6..f6..
   14920:	000034ee                                .4..

00014924 <__FUNCTION__.12268>:
   14924:	5f697073 00646d63                       spi_cmd.

0001492c <__FUNCTION__.12275>:
   1492c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001493c <__FUNCTION__.12284>:
   1493c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00014948 <__FUNCTION__.12300>:
   14948:	5f697073 61746164 6165725f 00000064     spi_data_read...

00014958 <__FUNCTION__.12315>:
   14958:	5f697073 61746164 6972775f 00006574     spi_data_write..

00014968 <__FUNCTION__.12327>:
   14968:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00014978 <__FUNCTION__.12338>:
   14978:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00014988 <__FUNCTION__.12350>:
   14988:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00014998 <__FUNCTION__.12363>:
   14998:	735f6d6e 725f6970 00646165              nm_spi_read.

000149a4 <__FUNCTION__.12384>:
   149a4:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   149b4:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   149c4:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   149d4:	25207465 65732064 6f697373 4449206e     et %d session ID
   149e4:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   149f4:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   14a04:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   14a14:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   14a24:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   14a34:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   14a44:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   14a54:	204c5353 6b636f53 00007465              SSL Socket..

00014a60 <tcc_modules>:
   14a60:	42002000 42002400 42002800              . .B.$.B.(.B

00014a6c <_tcc_gclk_ids>:
   14a6c:	001b1a1a                                ....

00014a70 <_tcc_apbcmasks>:
   14a70:	00000100 00000200 00000400              ............

00014a7c <_tcc_maxs>:
   14a7c:	00ffffff 00ffffff 0000ffff              ............

00014a88 <_tcc_cc_nums>:
   14a88:	00020204                                ....

00014a8c <_tcc_ow_nums>:
   14a8c:	00020408                                ....

00014a90 <_tcc_intflag>:
   14a90:	00000001 00000002 00000004 00000008     ................
   14aa0:	00001000 00002000 00004000 00008000     ..... ...@......
   14ab0:	00010000 00020000 00040000 00080000     ................
   14ac0:	42002000 42002400 42002800              . .B.$.B.(.B

00014acc <main_mqtt_broker>:
   14acc:	2e30316d 756f6c63 74716d64 6f632e74     m10.cloudmqtt.co
   14adc:	0000006d 462d6957 6f632069 63656e6e     m...Wi-Fi connec
   14aec:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
   14afc:	6e6f6373 7463656e 000d6465 6e6e6570     sconnected..penn
   14b0c:	30343731 69666977 00000000 50726941     1740wifi....AirP
   14b1c:	4e6e6e65 442d7465 63697665 00000065     ennNet-Device...
   14b2c:	462d6957 50492069 20736920 252e7525     Wi-Fi IP is %u.%
   14b3c:	75252e75 0d75252e 0000000a 50355749     u.%u.%u.....IW5P
   14b4c:	43427458 6e6d396e 00000000 696d6a77     XtBCn9mn....wjmi
   14b5c:	7a756e69 00000000 6e6e6f43 20746365     inuz....Connect 
   14b6c:	6c696166 206f7420 76726573 25287265     fail to server(%
   14b7c:	20212973 72746572 74692079 74756120     s)! retry it aut
   14b8c:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   14b9c:	702f3067 2f706d75 00000023 722f3067     g0/pump/#...g0/r
   14bac:	79616c65 00232f31 722f3067 79616c65     elay1/#.g0/relay
   14bbc:	00232f32 6c2f3067 232f6465 00000000     2/#.g0/led/#....
   14bcc:	742f3067 2f706d65 00000023 682f3067     g0/temp/#...g0/h
   14bdc:	232f6d75 00000000 6c2f3067 232f7875     um/#....g0/lux/#
   14bec:	00000000 6d2f3067 7473696f 0000232f     ....g0/moist/#..
   14bfc:	752f3067 61726770 232f6564 00000000     g0/upgrade/#....
   14c0c:	762f3067 69737265 232f6e6f 00000000     g0/version/#....
   14c1c:	70657250 74617261 206e6f69 4d20666f     Preparation of M
   14c2c:	20545451 20736168 6e656562 6d6f6320     QTT has been com
   14c3c:	74656c70 0d2e6465 00000000 5454514d     pleted......MQTT
   14c4c:	6f726220 2072656b 6c636564 64656e69      broker declined
   14c5c:	756f7920 63612072 73736563 72652021      your access! er
   14c6c:	20726f72 65646f63 0d642520 0000000a     ror code %d.....
   14c7c:	702f3067 2f706d75 00000000 3e207325     g0/pump/....%s >
   14c8c:	0000203e 722f3067 79616c65 00002f31     > ..g0/relay1/..
   14c9c:	00006e6f 0066666f 6c2f3067 002f6465     on..off.g0/led/.
   14cac:	722f3067 79616c65 00002f32 752f3067     g0/relay2/..g0/u
   14cbc:	61726770 002f6564 762f3067 69737265     pgrade/.g0/versi
   14ccc:	002f6e6f 6e6b6e55 206e776f 69706f74     on/.Unknown topi
   14cdc:	25203a63 00000073 0000000d 5454514d     c: %s.......MQTT
   14cec:	73696420 6e6e6f63 65746365 00000d64      disconnected...
   14cfc:	656d6954 6e652072 656c6261 000d2e64     Timer enabled...
   14d0c:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   14d1c:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   14d2c:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   14d3c:	00000000 5454514d 67657220 65747369     ....MQTT registe
   14d4c:	61632072 61626c6c 66206b63 656c6961     r callback faile
   14d5c:	45202e64 726f7272 646f6320 73692065     d. Error code is
   14d6c:	64252820 000a0d29 5454514d 6e6f4320      (%d)...MQTT Con
   14d7c:	75676966 2e646572 0000000d 74696e49     figured.....Init
   14d8c:	696c6169 676e697a 0d2e2e2e 00000000     ializing........
   14d9c:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   14dac:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
   14dbc:	0d296425 0000000a 6e69616d 326d203a     %d).....main: m2
   14dcc:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
   14ddc:	63757320 73736563 64252821 000a0d29      success!(%d)...
   14dec:	6b636f53 20737465 74696e69 696c6169     Sockets initiali
   14dfc:	2e64657a 0000000d 00000002 00000003     zed.............
   14e0c:	00000028 00000029 00000004 00000005     (...)...........
   14e1c:	00000006 00000007 0000ffff 0000ffff     ................
   14e2c:	00000022 00000023 0000ffff 0000ffff     "...#...........
   14e3c:	0000ffff 0000ffff 00000008 00000009     ................
   14e4c:	0000000a 0000000b 00008cae 00008cb4     ................
   14e5c:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14e6c:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14e7c:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14e8c:	00008cb4 00008cb4 00008c8c 00008cb4     ................
   14e9c:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14eac:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14ebc:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14ecc:	00008cb4 00008cb4 00008ca8 00008cb4     ................
   14edc:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14eec:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14efc:	00008cb4 00008cb4 00008cb4 00008cb4     ................
   14f0c:	00008cb4 00008cb4 00008ca2 00008c4a     ............J...
   14f1c:	00008c60 00008c76 00008c30 42000800     `...v...0......B
   14f2c:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   14f3c:	42001c00 0c0b0a09 00000e0d 0000bad2     ...B............
   14f4c:	0000bb4a 0000bb4a 0000baf0 0000baea     J...J...........
   14f5c:	0000baf6 0000bad8 0000bafc 0000bb30     ............0...
   14f6c:	0000be14 0000be64 0000be64 0000be60     ....d...d...`...
   14f7c:	0000be06 0000be26 0000bdf6 0000be38     ....&.......8...
   14f8c:	0000be4a 0000beb2 0000bee0 0000bee0     J...............
   14f9c:	0000bedc 0000beac 0000beb8 0000bea6     ................
   14fac:	0000bebe 0000bec4 00000020 2e2e0a0d     ........ .......
   14fbc:	2d69572e 66206946 656c6961 6f742064     .Wi-Fi failed to
   14fcc:	6e6f6320 75676966 2e2e6572 00000d2e      configure......
   14fdc:	72616f42 6e692064 61697469 657a696c     Board initialize
   14fec:	000d2e64 6e6e6570 30343731 69666977     d...penn1740wifi
   14ffc:	00000000 50726941 4e6e6e65 442d7465     ....AirPennNet-D
   1500c:	63697665 00000065 636c6557 20656d6f     evice...Welcome 
   1501c:	74206f74 45206568 67726576 6e656572     to the Evergreen
   1502c:	494c4320 00000d2e 0000203e 646e6553      CLI....> ..Send
   1503c:	20676e69 736e6573 7620726f 65756c61     ing sensor value
   1504c:	6f742073 6f6c4320 0d2e6475 00000000     s to Cloud......
   1505c:	3a78754c 0d642520 0000000a 00006425     Lux: %d.....%d..
   1506c:	6c2f3067 002f7875 73696f4d 65727574     g0/lux/.Moisture
   1507c:	2e25203a 0d663230 0000000a 32302e25     : %.02f.....%.02
   1508c:	00000066 6d2f3067 7473696f 514d002f     f...g0/moist/.MQ
   1509c:	70647349 00000000                       Isdp....

000150a4 <_global_impure_ptr>:
   150a4:	20000084 4f500043 00584953 4e49002e     ... C.POSIX...IN
   150b4:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
   150c4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   150d4:	32313000 36353433 61393837 65646362     .0123456789abcde
   150e4:	20000066                                         f.

000150e6 <_ctype_>:
   150e6:	20202000 20202020 28282020 20282828     .         ((((( 
   150f6:	20202020 20202020 20202020 20202020                     
   15106:	10108820 10101010 10101010 10101010      ...............
   15116:	04040410 04040404 10040404 10101010     ................
   15126:	41411010 41414141 01010101 01010101     ..AAAAAA........
   15136:	01010101 01010101 01010101 10101010     ................
   15146:	42421010 42424242 02020202 02020202     ..BBBBBB........
   15156:	02020202 02020202 02020202 10101010     ................
   15166:	00000020 00000000 00000000 00000000      ...............
	...
   151e6:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

000151f4 <__sf_fake_stderr>:
	...

00015214 <__sf_fake_stdin>:
	...

00015234 <__sf_fake_stdout>:
	...

00015258 <__mprec_bigtens>:
   15258:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   15268:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   15278:	7f73bf3c 75154fdd                       <.s..O.u

00015280 <__mprec_tens>:
   15280:	00000000 3ff00000 00000000 40240000     .......?......$@
   15290:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   152a0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   152b0:	00000000 412e8480 00000000 416312d0     .......A......cA
   152c0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   152d0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   152e0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   152f0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   15300:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   15310:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   15320:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   15330:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   15340:	79d99db4 44ea7843                       ...yCx.D

00015348 <p05.6047>:
   15348:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   15358:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
   15368:	00011988 00011958 0001196a 000118ac     ....X...j.......
   15378:	0001196a 0001194e 0001196a 000118ac     j...N...j.......
   15388:	00011958 00011958 0001194e 000118ac     X...X...N.......
   15398:	000118b4 000118b4 000118b4 00011970     ............p...
   153a8:	00011958 00011958 0001192c 00011a10     X...X...,.......
   153b8:	0001192c 0001194e 0001192c 00011a10     ,...N...,.......
   153c8:	00011958 00011958 0001194e 00011a10     X...X...N.......
   153d8:	000118b4 000118b4 000118b4 00011a1a     ................
   153e8:	00011bb8 00011b08 00011b08 00011b06     ................
   153f8:	00011baa 00011baa 00011ba0 00011b06     ................
   15408:	00011baa 00011ba0 00011baa 00011b06     ................
   15418:	00011bb0 00011bb0 00011bb0 00011c40     ............@...
   15428:	00012584 00012566 00012520 0001243e     .%..f%.. %..>$..
   15438:	00012520 00012558 00012520 0001243e      %..X%.. %..>$..
   15448:	00012566 00012566 00012558 0001243e     f%..f%..X%..>$..
   15458:	00012436 00012436 00012436 0001279c     6$..6$..6$...'..
   15468:	00012de4 00012ca4 00012ca4 00012ca0     .-...,...,...,..
   15478:	00012dbc 00012dbc 00012dae 00012ca0     .-...-...-...,..
   15488:	00012dbc 00012dae 00012dbc 00012ca0     .-...-...-...,..
   15498:	00012dc4 00012dc4 00012dc4 00012fc8     .-...-...-.../..

000154a8 <_init>:
   154a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154aa:	46c0      	nop			; (mov r8, r8)
   154ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   154ae:	bc08      	pop	{r3}
   154b0:	469e      	mov	lr, r3
   154b2:	4770      	bx	lr

000154b4 <__init_array_start>:
   154b4:	000000dd 	.word	0x000000dd

000154b8 <_fini>:
   154b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154ba:	46c0      	nop			; (mov r8, r8)
   154bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   154be:	bc08      	pop	{r3}
   154c0:	469e      	mov	lr, r3
   154c2:	4770      	bx	lr

000154c4 <__fini_array_start>:
   154c4:	000000b5 	.word	0x000000b5
