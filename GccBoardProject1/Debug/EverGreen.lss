
EverGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014498  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  00014498  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008e4  200001e4  0001467c  000301e4  2**2
                  ALLOC
  3 .stack        00002000  20000ac8  00014f60  000301e4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00086b54  00000000  00000000  000302d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008b3b  00000000  00000000  000b6e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000963c  00000000  00000000  000bf965  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001a28  00000000  00000000  000c8fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001828  00000000  00000000  000ca9c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00026d78  00000000  00000000  000cc1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00026422  00000000  00000000  000f2f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000997f4  00000000  00000000  0011938b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006a6c  00000000  00000000  001b2b80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
/**
 * erase given firmware in flash Memory
 * @param firmware_starter_address starting address of firmware
 */
static void erase_firmware_in_flash(uint32_t firmware_starter_address)
{
       0:	c8 2a 00 20 cd c9 00 00 c5 ca 00 00 c5 ca 00 00     .*. ............
	...
	else if (firmware_starter_address == FW2_ADDR)
		firmware_starter_address = FW2_ERASE_ADDR;
	else
		//TODO: Throw error
		return;
	printf("FW1_ERASE_ADDR: %d\r\n", firmware_starter_address);
      2c:	c5 ca 00 00 00 00 00 00 00 00 00 00 c5 ca 00 00     ................
	//Clear flash for max firmware size here
	at25dfx_chip_wake(&at25dfx_chip);

	//check if chip is there
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
      3c:	c5 ca 00 00 c5 ca 00 00 c5 ca 00 00 c5 ca 00 00     ................
		printf("store_file_packet: No flash chip.\r\n");
      4c:	c5 ca 00 00 31 64 00 00 c5 ca 00 00 c5 ca 00 00     ....1d..........
	}
	//max fw size is ~252k = 3x 64kb sectors 1x 32kb sector 7x4kb sectors
	//disable protection
	enum status_code status_val;
	//for (int i = 0; i < FW_MAX_SIZE / SIXTY_FOUR_KB; i++) {
	status_val = at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
      5c:	c5 ca 00 00 c5 ca 00 00 25 b7 00 00 3d b7 00 00     ........%...=...
	if (STATUS_OK != status_val) {
      6c:	55 b7 00 00 6d b7 00 00 85 b7 00 00 9d b7 00 00     U...m...........
		add_state(CANCELED);
		printf("store_file_packet: error clearing sector protect at address %d \r\n", SIXTY_FOUR_KB);
      7c:	79 7f 00 00 8d 7f 00 00 a1 7f 00 00 c5 ca 00 00     y...............
		return;
	}
	//}
	//erase block (sets to FF's)
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address, AT25DFX_BLOCK_SIZE_64KB);
      8c:	c5 ca 00 00 c5 ca 00 00 00 00 00 00 00 00 00 00     ................
	if (STATUS_OK != status_val) {
      9c:	c5 ca 00 00 c5 ca 00 00 c5 ca 00 00 c5 ca 00 00     ................
		add_state(CANCELED);
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address);
      ac:	c5 ca 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
		return;
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 1), AT25DFX_BLOCK_SIZE_64KB);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
	if (STATUS_OK != status_val) {
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001e4 	.word	0x200001e4
      d4:	00000000 	.word	0x00000000
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 1));
      d8:	00014498 	.word	0x00014498

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
		return;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2), AT25DFX_BLOCK_SIZE_64KB);
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
	if (STATUS_OK != status_val) {
     100:	00000000 	.word	0x00000000
     104:	200001e8 	.word	0x200001e8
     108:	00014498 	.word	0x00014498
		add_state(CANCELED);
     10c:	00014498 	.word	0x00014498
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2));
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <system_interrupt_enable+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     140:	b580      	push	{r7, lr}
     142:	b084      	sub	sp, #16
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     14e:	68fb      	ldr	r3, [r7, #12]
     150:	69db      	ldr	r3, [r3, #28]
     152:	1e5a      	subs	r2, r3, #1
     154:	4193      	sbcs	r3, r2
     156:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     158:	0018      	movs	r0, r3
     15a:	46bd      	mov	sp, r7
     15c:	b004      	add	sp, #16
     15e:	bd80      	pop	{r7, pc}

00000160 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     168:	46c0      	nop			; (mov r8, r8)
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	0018      	movs	r0, r3
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <_usart_wait_for_sync+0x20>)
     170:	4798      	blx	r3
     172:	1e03      	subs	r3, r0, #0
     174:	d1f9      	bne.n	16a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000141 	.word	0x00000141

00000184 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	2280      	movs	r2, #128	; 0x80
     190:	05d2      	lsls	r2, r2, #23
     192:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     194:	687b      	ldr	r3, [r7, #4]
     196:	2200      	movs	r2, #0
     198:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     19a:	687b      	ldr	r3, [r7, #4]
     19c:	22ff      	movs	r2, #255	; 0xff
     19e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2200      	movs	r2, #0
     1aa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2296      	movs	r2, #150	; 0x96
     1b0:	0192      	lsls	r2, r2, #6
     1b2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	2224      	movs	r2, #36	; 0x24
     1b8:	2101      	movs	r1, #1
     1ba:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2225      	movs	r2, #37	; 0x25
     1c0:	2101      	movs	r1, #1
     1c2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	2226      	movs	r2, #38	; 0x26
     1c8:	2100      	movs	r1, #0
     1ca:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	2227      	movs	r2, #39	; 0x27
     1d0:	2100      	movs	r1, #0
     1d2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	2200      	movs	r2, #0
     1d8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     1da:	687b      	ldr	r3, [r7, #4]
     1dc:	2288      	movs	r2, #136	; 0x88
     1de:	0352      	lsls	r2, r2, #13
     1e0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	222c      	movs	r2, #44	; 0x2c
     1e6:	2100      	movs	r1, #0
     1e8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	222d      	movs	r2, #45	; 0x2d
     1ee:	2100      	movs	r1, #0
     1f0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	2200      	movs	r2, #0
     1f6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	2200      	movs	r2, #0
     1fc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     1fe:	687b      	ldr	r3, [r7, #4]
     200:	2200      	movs	r2, #0
     202:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     204:	687b      	ldr	r3, [r7, #4]
     206:	2200      	movs	r2, #0
     208:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	2200      	movs	r2, #0
     20e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     210:	687b      	ldr	r3, [r7, #4]
     212:	2200      	movs	r2, #0
     214:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     216:	687b      	ldr	r3, [r7, #4]
     218:	2200      	movs	r2, #0
     21a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	2200      	movs	r2, #0
     220:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     222:	687b      	ldr	r3, [r7, #4]
     224:	2200      	movs	r2, #0
     226:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	2200      	movs	r2, #0
     22c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     22e:	687b      	ldr	r3, [r7, #4]
     230:	2213      	movs	r2, #19
     232:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2200      	movs	r2, #0
     238:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	46bd      	mov	sp, r7
     23e:	b002      	add	sp, #8
     240:	bd80      	pop	{r7, pc}
	...

00000244 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     24c:	687b      	ldr	r3, [r7, #4]
     24e:	681b      	ldr	r3, [r3, #0]
     250:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     252:	687b      	ldr	r3, [r7, #4]
     254:	681b      	ldr	r3, [r3, #0]
     256:	0018      	movs	r0, r3
     258:	4b09      	ldr	r3, [pc, #36]	; (280 <usart_enable+0x3c>)
     25a:	4798      	blx	r3
     25c:	0003      	movs	r3, r0
     25e:	0018      	movs	r0, r3
     260:	4b08      	ldr	r3, [pc, #32]	; (284 <usart_enable+0x40>)
     262:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     264:	687b      	ldr	r3, [r7, #4]
     266:	0018      	movs	r0, r3
     268:	4b07      	ldr	r3, [pc, #28]	; (288 <usart_enable+0x44>)
     26a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     26c:	68fb      	ldr	r3, [r7, #12]
     26e:	681b      	ldr	r3, [r3, #0]
     270:	2202      	movs	r2, #2
     272:	431a      	orrs	r2, r3
     274:	68fb      	ldr	r3, [r7, #12]
     276:	601a      	str	r2, [r3, #0]
}
     278:	46c0      	nop			; (mov r8, r8)
     27a:	46bd      	mov	sp, r7
     27c:	b004      	add	sp, #16
     27e:	bd80      	pop	{r7, pc}
     280:	0000b6e1 	.word	0x0000b6e1
     284:	00000115 	.word	0x00000115
     288:	00000161 	.word	0x00000161

0000028c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     28c:	b580      	push	{r7, lr}
     28e:	b084      	sub	sp, #16
     290:	af00      	add	r7, sp, #0
     292:	60f8      	str	r0, [r7, #12]
     294:	60b9      	str	r1, [r7, #8]
     296:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
     298:	687a      	ldr	r2, [r7, #4]
     29a:	68b9      	ldr	r1, [r7, #8]
     29c:	68fb      	ldr	r3, [r7, #12]
     29e:	0018      	movs	r0, r3
     2a0:	4b05      	ldr	r3, [pc, #20]	; (2b8 <usart_serial_init+0x2c>)
     2a2:	4798      	blx	r3
     2a4:	1e03      	subs	r3, r0, #0
     2a6:	d101      	bne.n	2ac <usart_serial_init+0x20>
		return true;
     2a8:	2301      	movs	r3, #1
     2aa:	e000      	b.n	2ae <usart_serial_init+0x22>
	}
	else {
		return false;
     2ac:	2300      	movs	r3, #0
	}
}
     2ae:	0018      	movs	r0, r3
     2b0:	46bd      	mov	sp, r7
     2b2:	b004      	add	sp, #16
     2b4:	bd80      	pop	{r7, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	0000af19 	.word	0x0000af19

000002bc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	6078      	str	r0, [r7, #4]
     2c4:	000a      	movs	r2, r1
     2c6:	1cfb      	adds	r3, r7, #3
     2c8:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	1cfb      	adds	r3, r7, #3
     2ce:	781b      	ldrb	r3, [r3, #0]
     2d0:	b29a      	uxth	r2, r3
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	0011      	movs	r1, r2
     2d6:	0018      	movs	r0, r3
     2d8:	4b04      	ldr	r3, [pc, #16]	; (2ec <usart_serial_putchar+0x30>)
     2da:	4798      	blx	r3
     2dc:	1e03      	subs	r3, r0, #0
     2de:	d1f5      	bne.n	2cc <usart_serial_putchar+0x10>

	return STATUS_OK;
     2e0:	2300      	movs	r3, #0
}
     2e2:	0018      	movs	r0, r3
     2e4:	46bd      	mov	sp, r7
     2e6:	b002      	add	sp, #8
     2e8:	bd80      	pop	{r7, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	0000b18d 	.word	0x0000b18d

000002f0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b084      	sub	sp, #16
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
     2f8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     2fa:	230e      	movs	r3, #14
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	2200      	movs	r2, #0
     300:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     302:	46c0      	nop			; (mov r8, r8)
     304:	230e      	movs	r3, #14
     306:	18fa      	adds	r2, r7, r3
     308:	687b      	ldr	r3, [r7, #4]
     30a:	0011      	movs	r1, r2
     30c:	0018      	movs	r0, r3
     30e:	4b07      	ldr	r3, [pc, #28]	; (32c <usart_serial_getchar+0x3c>)
     310:	4798      	blx	r3
     312:	1e03      	subs	r3, r0, #0
     314:	d1f6      	bne.n	304 <usart_serial_getchar+0x14>

	*c = temp;
     316:	230e      	movs	r3, #14
     318:	18fb      	adds	r3, r7, r3
     31a:	881b      	ldrh	r3, [r3, #0]
     31c:	b2da      	uxtb	r2, r3
     31e:	683b      	ldr	r3, [r7, #0]
     320:	701a      	strb	r2, [r3, #0]
}
     322:	46c0      	nop			; (mov r8, r8)
     324:	46bd      	mov	sp, r7
     326:	b004      	add	sp, #16
     328:	bd80      	pop	{r7, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	0000b1f1 	.word	0x0000b1f1

00000330 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     330:	b580      	push	{r7, lr}
     332:	b084      	sub	sp, #16
     334:	af00      	add	r7, sp, #0
     336:	60f8      	str	r0, [r7, #12]
     338:	60b9      	str	r1, [r7, #8]
     33a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     33c:	4b10      	ldr	r3, [pc, #64]	; (380 <stdio_serial_init+0x50>)
     33e:	68fa      	ldr	r2, [r7, #12]
     340:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     342:	4b10      	ldr	r3, [pc, #64]	; (384 <stdio_serial_init+0x54>)
     344:	4a10      	ldr	r2, [pc, #64]	; (388 <stdio_serial_init+0x58>)
     346:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     348:	4b10      	ldr	r3, [pc, #64]	; (38c <stdio_serial_init+0x5c>)
     34a:	4a11      	ldr	r2, [pc, #68]	; (390 <stdio_serial_init+0x60>)
     34c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
     34e:	687a      	ldr	r2, [r7, #4]
     350:	68b9      	ldr	r1, [r7, #8]
     352:	68fb      	ldr	r3, [r7, #12]
     354:	0018      	movs	r0, r3
     356:	4b0f      	ldr	r3, [pc, #60]	; (394 <stdio_serial_init+0x64>)
     358:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     35a:	4b0f      	ldr	r3, [pc, #60]	; (398 <stdio_serial_init+0x68>)
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	689b      	ldr	r3, [r3, #8]
     360:	2100      	movs	r1, #0
     362:	0018      	movs	r0, r3
     364:	4b0d      	ldr	r3, [pc, #52]	; (39c <stdio_serial_init+0x6c>)
     366:	4798      	blx	r3
	setbuf(stdin, NULL);
     368:	4b0b      	ldr	r3, [pc, #44]	; (398 <stdio_serial_init+0x68>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	685b      	ldr	r3, [r3, #4]
     36e:	2100      	movs	r1, #0
     370:	0018      	movs	r0, r3
     372:	4b0a      	ldr	r3, [pc, #40]	; (39c <stdio_serial_init+0x6c>)
     374:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     376:	46c0      	nop			; (mov r8, r8)
     378:	46bd      	mov	sp, r7
     37a:	b004      	add	sp, #16
     37c:	bd80      	pop	{r7, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	20000aa8 	.word	0x20000aa8
     384:	20000aa4 	.word	0x20000aa4
     388:	000002bd 	.word	0x000002bd
     38c:	20000aa0 	.word	0x20000aa0
     390:	000002f1 	.word	0x000002f1
     394:	0000028d 	.word	0x0000028d
     398:	20000014 	.word	0x20000014
     39c:	0000e939 	.word	0x0000e939

000003a0 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
     3a0:	b580      	push	{r7, lr}
     3a2:	b090      	sub	sp, #64	; 0x40
     3a4:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
     3a6:	003b      	movs	r3, r7
     3a8:	0018      	movs	r0, r3
     3aa:	4b13      	ldr	r3, [pc, #76]	; (3f8 <configure_usart+0x58>)
     3ac:	4798      	blx	r3
	config_usart.baudrate = 115200;
     3ae:	003b      	movs	r3, r7
     3b0:	22e1      	movs	r2, #225	; 0xe1
     3b2:	0252      	lsls	r2, r2, #9
     3b4:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     3b6:	003b      	movs	r3, r7
     3b8:	22c4      	movs	r2, #196	; 0xc4
     3ba:	0392      	lsls	r2, r2, #14
     3bc:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
     3be:	003b      	movs	r3, r7
     3c0:	2201      	movs	r2, #1
     3c2:	4252      	negs	r2, r2
     3c4:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
     3c6:	003b      	movs	r3, r7
     3c8:	2201      	movs	r2, #1
     3ca:	4252      	negs	r2, r2
     3cc:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     3ce:	003b      	movs	r3, r7
     3d0:	4a0a      	ldr	r2, [pc, #40]	; (3fc <configure_usart+0x5c>)
     3d2:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
     3d4:	003b      	movs	r3, r7
     3d6:	4a0a      	ldr	r2, [pc, #40]	; (400 <configure_usart+0x60>)
     3d8:	63da      	str	r2, [r3, #60]	; 0x3c

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);
     3da:	003a      	movs	r2, r7
     3dc:	4909      	ldr	r1, [pc, #36]	; (404 <configure_usart+0x64>)
     3de:	4b0a      	ldr	r3, [pc, #40]	; (408 <configure_usart+0x68>)
     3e0:	0018      	movs	r0, r3
     3e2:	4b0a      	ldr	r3, [pc, #40]	; (40c <configure_usart+0x6c>)
     3e4:	4798      	blx	r3

	usart_enable(&usart_instance);
     3e6:	4b08      	ldr	r3, [pc, #32]	; (408 <configure_usart+0x68>)
     3e8:	0018      	movs	r0, r3
     3ea:	4b09      	ldr	r3, [pc, #36]	; (410 <configure_usart+0x70>)
     3ec:	4798      	blx	r3
}
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	46bd      	mov	sp, r7
     3f2:	b010      	add	sp, #64	; 0x40
     3f4:	bd80      	pop	{r7, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00000185 	.word	0x00000185
     3fc:	002a0003 	.word	0x002a0003
     400:	002b0003 	.word	0x002b0003
     404:	42001800 	.word	0x42001800
     408:	20000774 	.word	0x20000774
     40c:	00000331 	.word	0x00000331
     410:	00000245 	.word	0x00000245

00000414 <system_interrupt_enable>:
{
     414:	b580      	push	{r7, lr}
     416:	b082      	sub	sp, #8
     418:	af00      	add	r7, sp, #0
     41a:	0002      	movs	r2, r0
     41c:	1dfb      	adds	r3, r7, #7
     41e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     420:	4b06      	ldr	r3, [pc, #24]	; (43c <system_interrupt_enable+0x28>)
     422:	1dfa      	adds	r2, r7, #7
     424:	7812      	ldrb	r2, [r2, #0]
     426:	0011      	movs	r1, r2
     428:	221f      	movs	r2, #31
     42a:	400a      	ands	r2, r1
     42c:	2101      	movs	r1, #1
     42e:	4091      	lsls	r1, r2
     430:	000a      	movs	r2, r1
     432:	601a      	str	r2, [r3, #0]
}
     434:	46c0      	nop			; (mov r8, r8)
     436:	46bd      	mov	sp, r7
     438:	b002      	add	sp, #8
     43a:	bd80      	pop	{r7, pc}
     43c:	e000e100 	.word	0xe000e100

00000440 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     440:	b580      	push	{r7, lr}
     442:	b084      	sub	sp, #16
     444:	af00      	add	r7, sp, #0
     446:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     448:	687b      	ldr	r3, [r7, #4]
     44a:	681b      	ldr	r3, [r3, #0]
     44c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     44e:	68fb      	ldr	r3, [r7, #12]
     450:	69db      	ldr	r3, [r3, #28]
     452:	2207      	movs	r2, #7
     454:	4013      	ands	r3, r2
     456:	1e5a      	subs	r2, r3, #1
     458:	4193      	sbcs	r3, r2
     45a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     45c:	0018      	movs	r0, r3
     45e:	46bd      	mov	sp, r7
     460:	b004      	add	sp, #16
     462:	bd80      	pop	{r7, pc}

00000464 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     464:	b580      	push	{r7, lr}
     466:	b082      	sub	sp, #8
     468:	af00      	add	r7, sp, #0
     46a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     46c:	46c0      	nop			; (mov r8, r8)
     46e:	687b      	ldr	r3, [r7, #4]
     470:	0018      	movs	r0, r3
     472:	4b04      	ldr	r3, [pc, #16]	; (484 <_i2c_master_wait_for_sync+0x20>)
     474:	4798      	blx	r3
     476:	1e03      	subs	r3, r0, #0
     478:	d1f9      	bne.n	46e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	46bd      	mov	sp, r7
     47e:	b002      	add	sp, #8
     480:	bd80      	pop	{r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	00000441 	.word	0x00000441

00000488 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     490:	687b      	ldr	r3, [r7, #4]
     492:	2264      	movs	r2, #100	; 0x64
     494:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     496:	687b      	ldr	r3, [r7, #4]
     498:	4a1b      	ldr	r2, [pc, #108]	; (508 <i2c_master_get_config_defaults+0x80>)
     49a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	2200      	movs	r2, #0
     4a0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	2200      	movs	r2, #0
     4a6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	2200      	movs	r2, #0
     4ac:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	2280      	movs	r2, #128	; 0x80
     4b2:	0392      	lsls	r2, r2, #14
     4b4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	2201      	movs	r2, #1
     4ba:	4252      	negs	r2, r2
     4bc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	2201      	movs	r2, #1
     4c2:	4252      	negs	r2, r2
     4c4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	2200      	movs	r2, #0
     4ca:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	2200      	movs	r2, #0
     4d0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	2224      	movs	r2, #36	; 0x24
     4d6:	2100      	movs	r1, #0
     4d8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	2200      	movs	r2, #0
     4de:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	222c      	movs	r2, #44	; 0x2c
     4e4:	2100      	movs	r1, #0
     4e6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	222d      	movs	r2, #45	; 0x2d
     4ec:	2100      	movs	r1, #0
     4ee:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	222e      	movs	r2, #46	; 0x2e
     4f4:	2100      	movs	r1, #0
     4f6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	22d7      	movs	r2, #215	; 0xd7
     4fc:	861a      	strh	r2, [r3, #48]	; 0x30
}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	46bd      	mov	sp, r7
     502:	b002      	add	sp, #8
     504:	bd80      	pop	{r7, pc}
     506:	46c0      	nop			; (mov r8, r8)
     508:	00000d48 	.word	0x00000d48

0000050c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
     50c:	b580      	push	{r7, lr}
     50e:	b084      	sub	sp, #16
     510:	af00      	add	r7, sp, #0
     512:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     514:	687b      	ldr	r3, [r7, #4]
     516:	681b      	ldr	r3, [r3, #0]
     518:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     51a:	2300      	movs	r3, #0
     51c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     51e:	687b      	ldr	r3, [r7, #4]
     520:	0018      	movs	r0, r3
     522:	4b14      	ldr	r3, [pc, #80]	; (574 <i2c_master_enable+0x68>)
     524:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     526:	68bb      	ldr	r3, [r7, #8]
     528:	681b      	ldr	r3, [r3, #0]
     52a:	2202      	movs	r2, #2
     52c:	431a      	orrs	r2, r3
     52e:	68bb      	ldr	r3, [r7, #8]
     530:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     532:	687b      	ldr	r3, [r7, #4]
     534:	681b      	ldr	r3, [r3, #0]
     536:	0018      	movs	r0, r3
     538:	4b0f      	ldr	r3, [pc, #60]	; (578 <i2c_master_enable+0x6c>)
     53a:	4798      	blx	r3
     53c:	0003      	movs	r3, r0
     53e:	0018      	movs	r0, r3
     540:	4b0e      	ldr	r3, [pc, #56]	; (57c <i2c_master_enable+0x70>)
     542:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     544:	e00c      	b.n	560 <i2c_master_enable+0x54>
		timeout_counter++;
     546:	68fb      	ldr	r3, [r7, #12]
     548:	3301      	adds	r3, #1
     54a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	88db      	ldrh	r3, [r3, #6]
     550:	001a      	movs	r2, r3
     552:	68fb      	ldr	r3, [r7, #12]
     554:	429a      	cmp	r2, r3
     556:	d803      	bhi.n	560 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     558:	68bb      	ldr	r3, [r7, #8]
     55a:	2210      	movs	r2, #16
     55c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
     55e:	e006      	b.n	56e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     560:	68bb      	ldr	r3, [r7, #8]
     562:	8b5b      	ldrh	r3, [r3, #26]
     564:	b29b      	uxth	r3, r3
     566:	001a      	movs	r2, r3
     568:	2310      	movs	r3, #16
     56a:	4013      	ands	r3, r2
     56c:	d0eb      	beq.n	546 <i2c_master_enable+0x3a>
		}
	}
}
     56e:	46bd      	mov	sp, r7
     570:	b004      	add	sp, #16
     572:	bd80      	pop	{r7, pc}
     574:	00000465 	.word	0x00000465
     578:	0000b6e1 	.word	0x0000b6e1
     57c:	00000415 	.word	0x00000415

00000580 <configure_i2c_hdc>:
 **/

#include "hdc_1080.h"

void configure_i2c_hdc()
{
     580:	b590      	push	{r4, r7, lr}
     582:	b08f      	sub	sp, #60	; 0x3c
     584:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
     586:	003b      	movs	r3, r7
     588:	0018      	movs	r0, r3
     58a:	4b15      	ldr	r3, [pc, #84]	; (5e0 <configure_i2c_hdc+0x60>)
     58c:	4798      	blx	r3
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
     58e:	003b      	movs	r3, r7
     590:	2201      	movs	r2, #1
     592:	4252      	negs	r2, r2
     594:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     596:	003b      	movs	r3, r7
     598:	4a12      	ldr	r2, [pc, #72]	; (5e4 <configure_i2c_hdc+0x64>)
     59a:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     59c:	003b      	movs	r3, r7
     59e:	4a12      	ldr	r2, [pc, #72]	; (5e8 <configure_i2c_hdc+0x68>)
     5a0:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
     5a2:	003b      	movs	r3, r7
     5a4:	2200      	movs	r2, #0
     5a6:	731a      	strb	r2, [r3, #12]
	enum status_code init_status = i2c_master_init(&i2c_hdc, SERCOM3, &config_i2c_master);
     5a8:	2337      	movs	r3, #55	; 0x37
     5aa:	18fc      	adds	r4, r7, r3
     5ac:	003a      	movs	r2, r7
     5ae:	490f      	ldr	r1, [pc, #60]	; (5ec <configure_i2c_hdc+0x6c>)
     5b0:	4b0f      	ldr	r3, [pc, #60]	; (5f0 <configure_i2c_hdc+0x70>)
     5b2:	0018      	movs	r0, r3
     5b4:	4b0f      	ldr	r3, [pc, #60]	; (5f4 <configure_i2c_hdc+0x74>)
     5b6:	4798      	blx	r3
     5b8:	0003      	movs	r3, r0
     5ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != init_status) {
     5bc:	2337      	movs	r3, #55	; 0x37
     5be:	18fb      	adds	r3, r7, r3
     5c0:	781b      	ldrb	r3, [r3, #0]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d004      	beq.n	5d0 <configure_i2c_hdc+0x50>
		printf("failed to initialize HDC1080 driver.\r\n");
     5c6:	4b0c      	ldr	r3, [pc, #48]	; (5f8 <configure_i2c_hdc+0x78>)
     5c8:	0018      	movs	r0, r3
     5ca:	4b0c      	ldr	r3, [pc, #48]	; (5fc <configure_i2c_hdc+0x7c>)
     5cc:	4798      	blx	r3
     5ce:	e003      	b.n	5d8 <configure_i2c_hdc+0x58>
		return;
	}
	i2c_master_enable(&i2c_hdc);
     5d0:	4b07      	ldr	r3, [pc, #28]	; (5f0 <configure_i2c_hdc+0x70>)
     5d2:	0018      	movs	r0, r3
     5d4:	4b0a      	ldr	r3, [pc, #40]	; (600 <configure_i2c_hdc+0x80>)
     5d6:	4798      	blx	r3
}
     5d8:	46bd      	mov	sp, r7
     5da:	b00f      	add	sp, #60	; 0x3c
     5dc:	bd90      	pop	{r4, r7, pc}
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	00000489 	.word	0x00000489
     5e4:	00160002 	.word	0x00160002
     5e8:	00170002 	.word	0x00170002
     5ec:	42001400 	.word	0x42001400
     5f0:	20000290 	.word	0x20000290
     5f4:	0000991d 	.word	0x0000991d
     5f8:	00012754 	.word	0x00012754
     5fc:	0000e901 	.word	0x0000e901
     600:	0000050d 	.word	0x0000050d

00000604 <request_data>:

	return;
}

uint16_t request_data(hdc_request command)
{
     604:	b590      	push	{r4, r7, lr}
     606:	b089      	sub	sp, #36	; 0x24
     608:	af00      	add	r7, sp, #0
     60a:	0002      	movs	r2, r0
     60c:	1dfb      	adds	r3, r7, #7
     60e:	701a      	strb	r2, [r3, #0]
	uint8_t received_data[2];
	uint8_t write_buffer = command;
     610:	231b      	movs	r3, #27
     612:	18fb      	adds	r3, r7, r3
     614:	1dfa      	adds	r2, r7, #7
     616:	7812      	ldrb	r2, [r2, #0]
     618:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
     61a:	230c      	movs	r3, #12
     61c:	18fb      	adds	r3, r7, r3
     61e:	2240      	movs	r2, #64	; 0x40
     620:	801a      	strh	r2, [r3, #0]
     622:	230c      	movs	r3, #12
     624:	18fb      	adds	r3, r7, r3
     626:	2201      	movs	r2, #1
     628:	805a      	strh	r2, [r3, #2]
     62a:	230c      	movs	r3, #12
     62c:	18fb      	adds	r3, r7, r3
     62e:	221b      	movs	r2, #27
     630:	18ba      	adds	r2, r7, r2
     632:	605a      	str	r2, [r3, #4]
     634:	230c      	movs	r3, #12
     636:	18fb      	adds	r3, r7, r3
     638:	2200      	movs	r2, #0
     63a:	721a      	strb	r2, [r3, #8]
     63c:	230c      	movs	r3, #12
     63e:	18fb      	adds	r3, r7, r3
     640:	2200      	movs	r2, #0
     642:	725a      	strb	r2, [r3, #9]
     644:	230c      	movs	r3, #12
     646:	18fb      	adds	r3, r7, r3
     648:	2200      	movs	r2, #0
     64a:	729a      	strb	r2, [r3, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &packet);
     64c:	231f      	movs	r3, #31
     64e:	18fc      	adds	r4, r7, r3
     650:	230c      	movs	r3, #12
     652:	18fa      	adds	r2, r7, r3
     654:	4b24      	ldr	r3, [pc, #144]	; (6e8 <request_data+0xe4>)
     656:	0011      	movs	r1, r2
     658:	0018      	movs	r0, r3
     65a:	4b24      	ldr	r3, [pc, #144]	; (6ec <request_data+0xe8>)
     65c:	4798      	blx	r3
     65e:	0003      	movs	r3, r0
     660:	7023      	strb	r3, [r4, #0]

	if (STATUS_OK != i2c_code) {
     662:	231f      	movs	r3, #31
     664:	18fb      	adds	r3, r7, r3
     666:	781b      	ldrb	r3, [r3, #0]
     668:	2b00      	cmp	r3, #0
     66a:	d008      	beq.n	67e <request_data+0x7a>
		printf("failed to s	end register request for command 0x%02x!\r\n", command);
     66c:	1dfb      	adds	r3, r7, #7
     66e:	781a      	ldrb	r2, [r3, #0]
     670:	4b1f      	ldr	r3, [pc, #124]	; (6f0 <request_data+0xec>)
     672:	0011      	movs	r1, r2
     674:	0018      	movs	r0, r3
     676:	4b1f      	ldr	r3, [pc, #124]	; (6f4 <request_data+0xf0>)
     678:	4798      	blx	r3
		return -1;
     67a:	4b1f      	ldr	r3, [pc, #124]	; (6f8 <request_data+0xf4>)
     67c:	e030      	b.n	6e0 <request_data+0xdc>
	}
	packet.data = received_data;
     67e:	230c      	movs	r3, #12
     680:	18fb      	adds	r3, r7, r3
     682:	221c      	movs	r2, #28
     684:	18ba      	adds	r2, r7, r2
     686:	605a      	str	r2, [r3, #4]
	packet.data_length = 2;
     688:	230c      	movs	r3, #12
     68a:	18fb      	adds	r3, r7, r3
     68c:	2202      	movs	r2, #2
     68e:	805a      	strh	r2, [r3, #2]
	delay_ms(15);
     690:	200f      	movs	r0, #15
     692:	4b1a      	ldr	r3, [pc, #104]	; (6fc <request_data+0xf8>)
     694:	4798      	blx	r3
	i2c_code = i2c_master_read_packet_wait(&i2c_hdc, &packet);
     696:	231f      	movs	r3, #31
     698:	18fc      	adds	r4, r7, r3
     69a:	230c      	movs	r3, #12
     69c:	18fa      	adds	r2, r7, r3
     69e:	4b12      	ldr	r3, [pc, #72]	; (6e8 <request_data+0xe4>)
     6a0:	0011      	movs	r1, r2
     6a2:	0018      	movs	r0, r3
     6a4:	4b16      	ldr	r3, [pc, #88]	; (700 <request_data+0xfc>)
     6a6:	4798      	blx	r3
     6a8:	0003      	movs	r3, r0
     6aa:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != i2c_code) {
     6ac:	231f      	movs	r3, #31
     6ae:	18fb      	adds	r3, r7, r3
     6b0:	781b      	ldrb	r3, [r3, #0]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d008      	beq.n	6c8 <request_data+0xc4>
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
     6b6:	1dfb      	adds	r3, r7, #7
     6b8:	781a      	ldrb	r2, [r3, #0]
     6ba:	4b12      	ldr	r3, [pc, #72]	; (704 <request_data+0x100>)
     6bc:	0011      	movs	r1, r2
     6be:	0018      	movs	r0, r3
     6c0:	4b0c      	ldr	r3, [pc, #48]	; (6f4 <request_data+0xf0>)
     6c2:	4798      	blx	r3
		return -1;
     6c4:	4b0c      	ldr	r3, [pc, #48]	; (6f8 <request_data+0xf4>)
     6c6:	e00b      	b.n	6e0 <request_data+0xdc>
	}
	return (received_data[0] << 8) | received_data[1];
     6c8:	231c      	movs	r3, #28
     6ca:	18fb      	adds	r3, r7, r3
     6cc:	781b      	ldrb	r3, [r3, #0]
     6ce:	021b      	lsls	r3, r3, #8
     6d0:	b21a      	sxth	r2, r3
     6d2:	231c      	movs	r3, #28
     6d4:	18fb      	adds	r3, r7, r3
     6d6:	785b      	ldrb	r3, [r3, #1]
     6d8:	b21b      	sxth	r3, r3
     6da:	4313      	orrs	r3, r2
     6dc:	b21b      	sxth	r3, r3
     6de:	b29b      	uxth	r3, r3
}
     6e0:	0018      	movs	r0, r3
     6e2:	46bd      	mov	sp, r7
     6e4:	b009      	add	sp, #36	; 0x24
     6e6:	bd90      	pop	{r4, r7, pc}
     6e8:	20000290 	.word	0x20000290
     6ec:	00009f8d 	.word	0x00009f8d
     6f0:	000127c4 	.word	0x000127c4
     6f4:	0000e7e5 	.word	0x0000e7e5
     6f8:	0000ffff 	.word	0x0000ffff
     6fc:	00008c09 	.word	0x00008c09
     700:	00009dd5 	.word	0x00009dd5
     704:	000127fc 	.word	0x000127fc

00000708 <get_hdc_device_id>:
uint16_t get_hdc_manufacturer_id()
{
	return request_data(HDC_MANUFACTURER_ID);
}
uint16_t get_hdc_device_id()
{
     708:	b580      	push	{r7, lr}
     70a:	af00      	add	r7, sp, #0
	return request_data(HDC_DEVICE_ID);
     70c:	20ff      	movs	r0, #255	; 0xff
     70e:	4b03      	ldr	r3, [pc, #12]	; (71c <get_hdc_device_id+0x14>)
     710:	4798      	blx	r3
     712:	0003      	movs	r3, r0
}
     714:	0018      	movs	r0, r3
     716:	46bd      	mov	sp, r7
     718:	bd80      	pop	{r7, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	00000605 	.word	0x00000605

00000720 <system_interrupt_enable>:
{
     720:	b580      	push	{r7, lr}
     722:	b082      	sub	sp, #8
     724:	af00      	add	r7, sp, #0
     726:	0002      	movs	r2, r0
     728:	1dfb      	adds	r3, r7, #7
     72a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     72c:	4b06      	ldr	r3, [pc, #24]	; (748 <system_interrupt_enable+0x28>)
     72e:	1dfa      	adds	r2, r7, #7
     730:	7812      	ldrb	r2, [r2, #0]
     732:	0011      	movs	r1, r2
     734:	221f      	movs	r2, #31
     736:	400a      	ands	r2, r1
     738:	2101      	movs	r1, #1
     73a:	4091      	lsls	r1, r2
     73c:	000a      	movs	r2, r1
     73e:	601a      	str	r2, [r3, #0]
}
     740:	46c0      	nop			; (mov r8, r8)
     742:	46bd      	mov	sp, r7
     744:	b002      	add	sp, #8
     746:	bd80      	pop	{r7, pc}
     748:	e000e100 	.word	0xe000e100

0000074c <i2c_master_is_syncing>:
{
     74c:	b580      	push	{r7, lr}
     74e:	b084      	sub	sp, #16
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     754:	687b      	ldr	r3, [r7, #4]
     756:	681b      	ldr	r3, [r3, #0]
     758:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     75a:	68fb      	ldr	r3, [r7, #12]
     75c:	69db      	ldr	r3, [r3, #28]
     75e:	2207      	movs	r2, #7
     760:	4013      	ands	r3, r2
     762:	1e5a      	subs	r2, r3, #1
     764:	4193      	sbcs	r3, r2
     766:	b2db      	uxtb	r3, r3
}
     768:	0018      	movs	r0, r3
     76a:	46bd      	mov	sp, r7
     76c:	b004      	add	sp, #16
     76e:	bd80      	pop	{r7, pc}

00000770 <_i2c_master_wait_for_sync>:
{
     770:	b580      	push	{r7, lr}
     772:	b082      	sub	sp, #8
     774:	af00      	add	r7, sp, #0
     776:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
     778:	46c0      	nop			; (mov r8, r8)
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	0018      	movs	r0, r3
     77e:	4b04      	ldr	r3, [pc, #16]	; (790 <_i2c_master_wait_for_sync+0x20>)
     780:	4798      	blx	r3
     782:	1e03      	subs	r3, r0, #0
     784:	d1f9      	bne.n	77a <_i2c_master_wait_for_sync+0xa>
}
     786:	46c0      	nop			; (mov r8, r8)
     788:	46bd      	mov	sp, r7
     78a:	b002      	add	sp, #8
     78c:	bd80      	pop	{r7, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	0000074d 	.word	0x0000074d

00000794 <i2c_master_get_config_defaults>:
{
     794:	b580      	push	{r7, lr}
     796:	b082      	sub	sp, #8
     798:	af00      	add	r7, sp, #0
     79a:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     79c:	687b      	ldr	r3, [r7, #4]
     79e:	2264      	movs	r2, #100	; 0x64
     7a0:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	4a1b      	ldr	r2, [pc, #108]	; (814 <i2c_master_get_config_defaults+0x80>)
     7a6:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	2200      	movs	r2, #0
     7ac:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	2200      	movs	r2, #0
     7b2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	2200      	movs	r2, #0
     7b8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	2280      	movs	r2, #128	; 0x80
     7be:	0392      	lsls	r2, r2, #14
     7c0:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	2201      	movs	r2, #1
     7c6:	4252      	negs	r2, r2
     7c8:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	2201      	movs	r2, #1
     7ce:	4252      	negs	r2, r2
     7d0:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	2200      	movs	r2, #0
     7d6:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	2200      	movs	r2, #0
     7dc:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	2224      	movs	r2, #36	; 0x24
     7e2:	2100      	movs	r1, #0
     7e4:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	2200      	movs	r2, #0
     7ea:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	222c      	movs	r2, #44	; 0x2c
     7f0:	2100      	movs	r1, #0
     7f2:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
     7f4:	687b      	ldr	r3, [r7, #4]
     7f6:	222d      	movs	r2, #45	; 0x2d
     7f8:	2100      	movs	r1, #0
     7fa:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	222e      	movs	r2, #46	; 0x2e
     800:	2100      	movs	r1, #0
     802:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
     804:	687b      	ldr	r3, [r7, #4]
     806:	22d7      	movs	r2, #215	; 0xd7
     808:	861a      	strh	r2, [r3, #48]	; 0x30
}
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	46bd      	mov	sp, r7
     80e:	b002      	add	sp, #8
     810:	bd80      	pop	{r7, pc}
     812:	46c0      	nop			; (mov r8, r8)
     814:	00000d48 	.word	0x00000d48

00000818 <i2c_master_enable>:
{
     818:	b580      	push	{r7, lr}
     81a:	b084      	sub	sp, #16
     81c:	af00      	add	r7, sp, #0
     81e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     820:	687b      	ldr	r3, [r7, #4]
     822:	681b      	ldr	r3, [r3, #0]
     824:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
     826:	2300      	movs	r3, #0
     828:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	0018      	movs	r0, r3
     82e:	4b14      	ldr	r3, [pc, #80]	; (880 <i2c_master_enable+0x68>)
     830:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     832:	68bb      	ldr	r3, [r7, #8]
     834:	681b      	ldr	r3, [r3, #0]
     836:	2202      	movs	r2, #2
     838:	431a      	orrs	r2, r3
     83a:	68bb      	ldr	r3, [r7, #8]
     83c:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     83e:	687b      	ldr	r3, [r7, #4]
     840:	681b      	ldr	r3, [r3, #0]
     842:	0018      	movs	r0, r3
     844:	4b0f      	ldr	r3, [pc, #60]	; (884 <i2c_master_enable+0x6c>)
     846:	4798      	blx	r3
     848:	0003      	movs	r3, r0
     84a:	0018      	movs	r0, r3
     84c:	4b0e      	ldr	r3, [pc, #56]	; (888 <i2c_master_enable+0x70>)
     84e:	4798      	blx	r3
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     850:	e00c      	b.n	86c <i2c_master_enable+0x54>
		timeout_counter++;
     852:	68fb      	ldr	r3, [r7, #12]
     854:	3301      	adds	r3, #1
     856:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     858:	687b      	ldr	r3, [r7, #4]
     85a:	88db      	ldrh	r3, [r3, #6]
     85c:	001a      	movs	r2, r3
     85e:	68fb      	ldr	r3, [r7, #12]
     860:	429a      	cmp	r2, r3
     862:	d803      	bhi.n	86c <i2c_master_enable+0x54>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     864:	68bb      	ldr	r3, [r7, #8]
     866:	2210      	movs	r2, #16
     868:	835a      	strh	r2, [r3, #26]
			return;
     86a:	e006      	b.n	87a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     86c:	68bb      	ldr	r3, [r7, #8]
     86e:	8b5b      	ldrh	r3, [r3, #26]
     870:	b29b      	uxth	r3, r3
     872:	001a      	movs	r2, r3
     874:	2310      	movs	r3, #16
     876:	4013      	ands	r3, r2
     878:	d0eb      	beq.n	852 <i2c_master_enable+0x3a>
}
     87a:	46bd      	mov	sp, r7
     87c:	b004      	add	sp, #16
     87e:	bd80      	pop	{r7, pc}
     880:	00000771 	.word	0x00000771
     884:	0000b6e1 	.word	0x0000b6e1
     888:	00000721 	.word	0x00000721

0000088c <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
     88c:	b590      	push	{r4, r7, lr}
     88e:	b091      	sub	sp, #68	; 0x44
     890:	af00      	add	r7, sp, #0
     892:	0002      	movs	r2, r0
     894:	1dfb      	adds	r3, r7, #7
     896:	701a      	strb	r2, [r3, #0]
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
     898:	2308      	movs	r3, #8
     89a:	18fb      	adds	r3, r7, r3
     89c:	0018      	movs	r0, r3
     89e:	4b19      	ldr	r3, [pc, #100]	; (904 <configure_i2c_tsl2561+0x78>)
     8a0:	4798      	blx	r3
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
     8a2:	2308      	movs	r3, #8
     8a4:	18fb      	adds	r3, r7, r3
     8a6:	2201      	movs	r2, #1
     8a8:	4252      	negs	r2, r2
     8aa:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
     8ac:	2308      	movs	r3, #8
     8ae:	18fb      	adds	r3, r7, r3
     8b0:	4a15      	ldr	r2, [pc, #84]	; (908 <configure_i2c_tsl2561+0x7c>)
     8b2:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     8b4:	2308      	movs	r3, #8
     8b6:	18fb      	adds	r3, r7, r3
     8b8:	4a14      	ldr	r2, [pc, #80]	; (90c <configure_i2c_tsl2561+0x80>)
     8ba:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
     8bc:	2308      	movs	r3, #8
     8be:	18fb      	adds	r3, r7, r3
     8c0:	2200      	movs	r2, #0
     8c2:	731a      	strb	r2, [r3, #12]
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
     8c4:	233f      	movs	r3, #63	; 0x3f
     8c6:	18fc      	adds	r4, r7, r3
     8c8:	2308      	movs	r3, #8
     8ca:	18fa      	adds	r2, r7, r3
     8cc:	4910      	ldr	r1, [pc, #64]	; (910 <configure_i2c_tsl2561+0x84>)
     8ce:	4b11      	ldr	r3, [pc, #68]	; (914 <configure_i2c_tsl2561+0x88>)
     8d0:	0018      	movs	r0, r3
     8d2:	4b11      	ldr	r3, [pc, #68]	; (918 <configure_i2c_tsl2561+0x8c>)
     8d4:	4798      	blx	r3
     8d6:	0003      	movs	r3, r0
     8d8:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != init_status) {
     8da:	233f      	movs	r3, #63	; 0x3f
     8dc:	18fb      	adds	r3, r7, r3
     8de:	781b      	ldrb	r3, [r3, #0]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d004      	beq.n	8ee <configure_i2c_tsl2561+0x62>
		printf("failed to initialize TSL2561 driver.\r\n");
     8e4:	4b0d      	ldr	r3, [pc, #52]	; (91c <configure_i2c_tsl2561+0x90>)
     8e6:	0018      	movs	r0, r3
     8e8:	4b0d      	ldr	r3, [pc, #52]	; (920 <configure_i2c_tsl2561+0x94>)
     8ea:	4798      	blx	r3
     8ec:	e007      	b.n	8fe <configure_i2c_tsl2561+0x72>
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
     8ee:	4b09      	ldr	r3, [pc, #36]	; (914 <configure_i2c_tsl2561+0x88>)
     8f0:	0018      	movs	r0, r3
     8f2:	4b0c      	ldr	r3, [pc, #48]	; (924 <configure_i2c_tsl2561+0x98>)
     8f4:	4798      	blx	r3
	tsl2561_addr = addr;
     8f6:	4b0c      	ldr	r3, [pc, #48]	; (928 <configure_i2c_tsl2561+0x9c>)
     8f8:	1dfa      	adds	r2, r7, #7
     8fa:	7812      	ldrb	r2, [r2, #0]
     8fc:	701a      	strb	r2, [r3, #0]
}
     8fe:	46bd      	mov	sp, r7
     900:	b011      	add	sp, #68	; 0x44
     902:	bd90      	pop	{r4, r7, pc}
     904:	00000795 	.word	0x00000795
     908:	00080002 	.word	0x00080002
     90c:	00090002 	.word	0x00090002
     910:	42000800 	.word	0x42000800
     914:	200002b8 	.word	0x200002b8
     918:	0000991d 	.word	0x0000991d
     91c:	0001282c 	.word	0x0001282c
     920:	0000e901 	.word	0x0000e901
     924:	00000819 	.word	0x00000819
     928:	20000200 	.word	0x20000200

0000092c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     92c:	b580      	push	{r7, lr}
     92e:	b084      	sub	sp, #16
     930:	af00      	add	r7, sp, #0
     932:	0002      	movs	r2, r0
     934:	1dfb      	adds	r3, r7, #7
     936:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     938:	230f      	movs	r3, #15
     93a:	18fb      	adds	r3, r7, r3
     93c:	1dfa      	adds	r2, r7, #7
     93e:	7812      	ldrb	r2, [r2, #0]
     940:	09d2      	lsrs	r2, r2, #7
     942:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     944:	230e      	movs	r3, #14
     946:	18fb      	adds	r3, r7, r3
     948:	1dfa      	adds	r2, r7, #7
     94a:	7812      	ldrb	r2, [r2, #0]
     94c:	0952      	lsrs	r2, r2, #5
     94e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     950:	4b0d      	ldr	r3, [pc, #52]	; (988 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     952:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     954:	230f      	movs	r3, #15
     956:	18fb      	adds	r3, r7, r3
     958:	781b      	ldrb	r3, [r3, #0]
     95a:	2b00      	cmp	r3, #0
     95c:	d10f      	bne.n	97e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     95e:	230f      	movs	r3, #15
     960:	18fb      	adds	r3, r7, r3
     962:	781b      	ldrb	r3, [r3, #0]
     964:	009b      	lsls	r3, r3, #2
     966:	2210      	movs	r2, #16
     968:	4694      	mov	ip, r2
     96a:	44bc      	add	ip, r7
     96c:	4463      	add	r3, ip
     96e:	3b08      	subs	r3, #8
     970:	681a      	ldr	r2, [r3, #0]
     972:	230e      	movs	r3, #14
     974:	18fb      	adds	r3, r7, r3
     976:	781b      	ldrb	r3, [r3, #0]
     978:	01db      	lsls	r3, r3, #7
     97a:	18d3      	adds	r3, r2, r3
     97c:	e000      	b.n	980 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     97e:	2300      	movs	r3, #0
	}
}
     980:	0018      	movs	r0, r3
     982:	46bd      	mov	sp, r7
     984:	b004      	add	sp, #16
     986:	bd80      	pop	{r7, pc}
     988:	41004400 	.word	0x41004400

0000098c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     98c:	b580      	push	{r7, lr}
     98e:	b082      	sub	sp, #8
     990:	af00      	add	r7, sp, #0
     992:	0002      	movs	r2, r0
     994:	1dfb      	adds	r3, r7, #7
     996:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     998:	1dfb      	adds	r3, r7, #7
     99a:	781b      	ldrb	r3, [r3, #0]
     99c:	0018      	movs	r0, r3
     99e:	4b03      	ldr	r3, [pc, #12]	; (9ac <port_get_group_from_gpio_pin+0x20>)
     9a0:	4798      	blx	r3
     9a2:	0003      	movs	r3, r0
}
     9a4:	0018      	movs	r0, r3
     9a6:	46bd      	mov	sp, r7
     9a8:	b002      	add	sp, #8
     9aa:	bd80      	pop	{r7, pc}
     9ac:	0000092d 	.word	0x0000092d

000009b0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     9b0:	b580      	push	{r7, lr}
     9b2:	b082      	sub	sp, #8
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     9b8:	687b      	ldr	r3, [r7, #4]
     9ba:	2200      	movs	r2, #0
     9bc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     9be:	687b      	ldr	r3, [r7, #4]
     9c0:	2201      	movs	r2, #1
     9c2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	2200      	movs	r2, #0
     9c8:	709a      	strb	r2, [r3, #2]
}
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	46bd      	mov	sp, r7
     9ce:	b002      	add	sp, #8
     9d0:	bd80      	pop	{r7, pc}
	...

000009d4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     9d4:	b580      	push	{r7, lr}
     9d6:	b084      	sub	sp, #16
     9d8:	af00      	add	r7, sp, #0
     9da:	0002      	movs	r2, r0
     9dc:	1dfb      	adds	r3, r7, #7
     9de:	701a      	strb	r2, [r3, #0]
     9e0:	1dbb      	adds	r3, r7, #6
     9e2:	1c0a      	adds	r2, r1, #0
     9e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     9e6:	1dfb      	adds	r3, r7, #7
     9e8:	781b      	ldrb	r3, [r3, #0]
     9ea:	0018      	movs	r0, r3
     9ec:	4b0d      	ldr	r3, [pc, #52]	; (a24 <port_pin_set_output_level+0x50>)
     9ee:	4798      	blx	r3
     9f0:	0003      	movs	r3, r0
     9f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9f4:	1dfb      	adds	r3, r7, #7
     9f6:	781b      	ldrb	r3, [r3, #0]
     9f8:	221f      	movs	r2, #31
     9fa:	4013      	ands	r3, r2
     9fc:	2201      	movs	r2, #1
     9fe:	409a      	lsls	r2, r3
     a00:	0013      	movs	r3, r2
     a02:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     a04:	1dbb      	adds	r3, r7, #6
     a06:	781b      	ldrb	r3, [r3, #0]
     a08:	2b00      	cmp	r3, #0
     a0a:	d003      	beq.n	a14 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     a0c:	68fb      	ldr	r3, [r7, #12]
     a0e:	68ba      	ldr	r2, [r7, #8]
     a10:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     a12:	e002      	b.n	a1a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	68ba      	ldr	r2, [r7, #8]
     a18:	615a      	str	r2, [r3, #20]
}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	46bd      	mov	sp, r7
     a1e:	b004      	add	sp, #16
     a20:	bd80      	pop	{r7, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	0000098d 	.word	0x0000098d

00000a28 <system_interrupt_enable_global>:
{
     a28:	b580      	push	{r7, lr}
     a2a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     a2c:	4b04      	ldr	r3, [pc, #16]	; (a40 <system_interrupt_enable_global+0x18>)
     a2e:	2201      	movs	r2, #1
     a30:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     a32:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     a36:	b662      	cpsie	i
}
     a38:	46c0      	nop			; (mov r8, r8)
     a3a:	46bd      	mov	sp, r7
     a3c:	bd80      	pop	{r7, pc}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	20000010 	.word	0x20000010

00000a44 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     a44:	b580      	push	{r7, lr}
     a46:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     a48:	4b04      	ldr	r3, [pc, #16]	; (a5c <chip_isr+0x18>)
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d002      	beq.n	a56 <chip_isr+0x12>
		gpfIsr();
     a50:	4b02      	ldr	r3, [pc, #8]	; (a5c <chip_isr+0x18>)
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	4798      	blx	r3
	}
}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	46bd      	mov	sp, r7
     a5a:	bd80      	pop	{r7, pc}
     a5c:	20000204 	.word	0x20000204

00000a60 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     a60:	b580      	push	{r7, lr}
     a62:	b082      	sub	sp, #8
     a64:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     a66:	1d3b      	adds	r3, r7, #4
     a68:	0018      	movs	r0, r3
     a6a:	4b10      	ldr	r3, [pc, #64]	; (aac <init_chip_pins+0x4c>)
     a6c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a6e:	1d3b      	adds	r3, r7, #4
     a70:	2201      	movs	r2, #1
     a72:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     a74:	1d3b      	adds	r3, r7, #4
     a76:	0019      	movs	r1, r3
     a78:	201b      	movs	r0, #27
     a7a:	4b0d      	ldr	r3, [pc, #52]	; (ab0 <init_chip_pins+0x50>)
     a7c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     a7e:	1d3b      	adds	r3, r7, #4
     a80:	0019      	movs	r1, r3
     a82:	201c      	movs	r0, #28
     a84:	4b0a      	ldr	r3, [pc, #40]	; (ab0 <init_chip_pins+0x50>)
     a86:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     a88:	1d3b      	adds	r3, r7, #4
     a8a:	0019      	movs	r1, r3
     a8c:	2028      	movs	r0, #40	; 0x28
     a8e:	4b08      	ldr	r3, [pc, #32]	; (ab0 <init_chip_pins+0x50>)
     a90:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     a92:	2100      	movs	r1, #0
     a94:	201c      	movs	r0, #28
     a96:	4b07      	ldr	r3, [pc, #28]	; (ab4 <init_chip_pins+0x54>)
     a98:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     a9a:	2100      	movs	r1, #0
     a9c:	201b      	movs	r0, #27
     a9e:	4b05      	ldr	r3, [pc, #20]	; (ab4 <init_chip_pins+0x54>)
     aa0:	4798      	blx	r3
}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	46bd      	mov	sp, r7
     aa6:	b002      	add	sp, #8
     aa8:	bd80      	pop	{r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	000009b1 	.word	0x000009b1
     ab0:	0000b9bd 	.word	0x0000b9bd
     ab4:	000009d5 	.word	0x000009d5

00000ab8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     ab8:	b580      	push	{r7, lr}
     aba:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     abc:	4b0c      	ldr	r3, [pc, #48]	; (af0 <nm_bsp_init+0x38>)
     abe:	2200      	movs	r2, #0
     ac0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     ac2:	4b0c      	ldr	r3, [pc, #48]	; (af4 <nm_bsp_init+0x3c>)
     ac4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     ac6:	4b0c      	ldr	r3, [pc, #48]	; (af8 <nm_bsp_init+0x40>)
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	2201      	movs	r2, #1
     acc:	4013      	ands	r3, r2
     ace:	d004      	beq.n	ada <nm_bsp_init+0x22>
     ad0:	4b09      	ldr	r3, [pc, #36]	; (af8 <nm_bsp_init+0x40>)
     ad2:	681b      	ldr	r3, [r3, #0]
     ad4:	2202      	movs	r2, #2
     ad6:	4013      	ands	r3, r2
     ad8:	d101      	bne.n	ade <nm_bsp_init+0x26>
	    delay_init();
     ada:	4b08      	ldr	r3, [pc, #32]	; (afc <nm_bsp_init+0x44>)
     adc:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     ade:	4b08      	ldr	r3, [pc, #32]	; (b00 <nm_bsp_init+0x48>)
     ae0:	4798      	blx	r3

	system_interrupt_enable_global();
     ae2:	4b08      	ldr	r3, [pc, #32]	; (b04 <nm_bsp_init+0x4c>)
     ae4:	4798      	blx	r3

	return M2M_SUCCESS;
     ae6:	2300      	movs	r3, #0
}
     ae8:	0018      	movs	r0, r3
     aea:	46bd      	mov	sp, r7
     aec:	bd80      	pop	{r7, pc}
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	20000204 	.word	0x20000204
     af4:	00000a61 	.word	0x00000a61
     af8:	e000e010 	.word	0xe000e010
     afc:	00008bb1 	.word	0x00008bb1
     b00:	00000b09 	.word	0x00000b09
     b04:	00000a29 	.word	0x00000a29

00000b08 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     b08:	b580      	push	{r7, lr}
     b0a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     b0c:	2100      	movs	r1, #0
     b0e:	201c      	movs	r0, #28
     b10:	4b0b      	ldr	r3, [pc, #44]	; (b40 <nm_bsp_reset+0x38>)
     b12:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     b14:	2100      	movs	r1, #0
     b16:	201b      	movs	r0, #27
     b18:	4b09      	ldr	r3, [pc, #36]	; (b40 <nm_bsp_reset+0x38>)
     b1a:	4798      	blx	r3
	nm_bsp_sleep(1);
     b1c:	2001      	movs	r0, #1
     b1e:	4b09      	ldr	r3, [pc, #36]	; (b44 <nm_bsp_reset+0x3c>)
     b20:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     b22:	2101      	movs	r1, #1
     b24:	201c      	movs	r0, #28
     b26:	4b06      	ldr	r3, [pc, #24]	; (b40 <nm_bsp_reset+0x38>)
     b28:	4798      	blx	r3
	nm_bsp_sleep(10);
     b2a:	200a      	movs	r0, #10
     b2c:	4b05      	ldr	r3, [pc, #20]	; (b44 <nm_bsp_reset+0x3c>)
     b2e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     b30:	2101      	movs	r1, #1
     b32:	201b      	movs	r0, #27
     b34:	4b02      	ldr	r3, [pc, #8]	; (b40 <nm_bsp_reset+0x38>)
     b36:	4798      	blx	r3
}
     b38:	46c0      	nop			; (mov r8, r8)
     b3a:	46bd      	mov	sp, r7
     b3c:	bd80      	pop	{r7, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	000009d5 	.word	0x000009d5
     b44:	00000b49 	.word	0x00000b49

00000b48 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     b48:	b580      	push	{r7, lr}
     b4a:	b082      	sub	sp, #8
     b4c:	af00      	add	r7, sp, #0
     b4e:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     b50:	e002      	b.n	b58 <nm_bsp_sleep+0x10>
		delay_ms(1);
     b52:	2001      	movs	r0, #1
     b54:	4b05      	ldr	r3, [pc, #20]	; (b6c <nm_bsp_sleep+0x24>)
     b56:	4798      	blx	r3
	while (u32TimeMsec--) {
     b58:	687b      	ldr	r3, [r7, #4]
     b5a:	1e5a      	subs	r2, r3, #1
     b5c:	607a      	str	r2, [r7, #4]
     b5e:	2b00      	cmp	r3, #0
     b60:	d1f7      	bne.n	b52 <nm_bsp_sleep+0xa>
	}
}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	46bd      	mov	sp, r7
     b66:	b002      	add	sp, #8
     b68:	bd80      	pop	{r7, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	00008c09 	.word	0x00008c09

00000b70 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     b70:	b580      	push	{r7, lr}
     b72:	b086      	sub	sp, #24
     b74:	af00      	add	r7, sp, #0
     b76:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     b78:	4b15      	ldr	r3, [pc, #84]	; (bd0 <nm_bsp_register_isr+0x60>)
     b7a:	687a      	ldr	r2, [r7, #4]
     b7c:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     b7e:	230c      	movs	r3, #12
     b80:	18fb      	adds	r3, r7, r3
     b82:	0018      	movs	r0, r3
     b84:	4b13      	ldr	r3, [pc, #76]	; (bd4 <nm_bsp_register_isr+0x64>)
     b86:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     b88:	230c      	movs	r3, #12
     b8a:	18fb      	adds	r3, r7, r3
     b8c:	2229      	movs	r2, #41	; 0x29
     b8e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     b90:	230c      	movs	r3, #12
     b92:	18fb      	adds	r3, r7, r3
     b94:	2200      	movs	r2, #0
     b96:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     b98:	230c      	movs	r3, #12
     b9a:	18fb      	adds	r3, r7, r3
     b9c:	2201      	movs	r2, #1
     b9e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     ba0:	230c      	movs	r3, #12
     ba2:	18fb      	adds	r3, r7, r3
     ba4:	2202      	movs	r2, #2
     ba6:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     ba8:	230c      	movs	r3, #12
     baa:	18fb      	adds	r3, r7, r3
     bac:	0019      	movs	r1, r3
     bae:	2009      	movs	r0, #9
     bb0:	4b09      	ldr	r3, [pc, #36]	; (bd8 <nm_bsp_register_isr+0x68>)
     bb2:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     bb4:	4b09      	ldr	r3, [pc, #36]	; (bdc <nm_bsp_register_isr+0x6c>)
     bb6:	2200      	movs	r2, #0
     bb8:	2109      	movs	r1, #9
     bba:	0018      	movs	r0, r3
     bbc:	4b08      	ldr	r3, [pc, #32]	; (be0 <nm_bsp_register_isr+0x70>)
     bbe:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     bc0:	2100      	movs	r1, #0
     bc2:	2009      	movs	r0, #9
     bc4:	4b07      	ldr	r3, [pc, #28]	; (be4 <nm_bsp_register_isr+0x74>)
     bc6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     bc8:	46c0      	nop			; (mov r8, r8)
     bca:	46bd      	mov	sp, r7
     bcc:	b006      	add	sp, #24
     bce:	bd80      	pop	{r7, pc}
     bd0:	20000204 	.word	0x20000204
     bd4:	0000673d 	.word	0x0000673d
     bd8:	00006771 	.word	0x00006771
     bdc:	00000a45 	.word	0x00000a45
     be0:	0000633d 	.word	0x0000633d
     be4:	000063a1 	.word	0x000063a1

00000be8 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     be8:	b580      	push	{r7, lr}
     bea:	b082      	sub	sp, #8
     bec:	af00      	add	r7, sp, #0
     bee:	0002      	movs	r2, r0
     bf0:	1dfb      	adds	r3, r7, #7
     bf2:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     bf4:	1dfb      	adds	r3, r7, #7
     bf6:	781b      	ldrb	r3, [r3, #0]
     bf8:	2b00      	cmp	r3, #0
     bfa:	d004      	beq.n	c06 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     bfc:	2100      	movs	r1, #0
     bfe:	2009      	movs	r0, #9
     c00:	4b05      	ldr	r3, [pc, #20]	; (c18 <nm_bsp_interrupt_ctrl+0x30>)
     c02:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     c04:	e003      	b.n	c0e <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     c06:	2100      	movs	r1, #0
     c08:	2009      	movs	r0, #9
     c0a:	4b04      	ldr	r3, [pc, #16]	; (c1c <nm_bsp_interrupt_ctrl+0x34>)
     c0c:	4798      	blx	r3
}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	46bd      	mov	sp, r7
     c12:	b002      	add	sp, #8
     c14:	bd80      	pop	{r7, pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	000063a1 	.word	0x000063a1
     c1c:	000063e9 	.word	0x000063e9

00000c20 <system_pinmux_get_group_from_gpio_pin>:
{
     c20:	b580      	push	{r7, lr}
     c22:	b084      	sub	sp, #16
     c24:	af00      	add	r7, sp, #0
     c26:	0002      	movs	r2, r0
     c28:	1dfb      	adds	r3, r7, #7
     c2a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     c2c:	230f      	movs	r3, #15
     c2e:	18fb      	adds	r3, r7, r3
     c30:	1dfa      	adds	r2, r7, #7
     c32:	7812      	ldrb	r2, [r2, #0]
     c34:	09d2      	lsrs	r2, r2, #7
     c36:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     c38:	230e      	movs	r3, #14
     c3a:	18fb      	adds	r3, r7, r3
     c3c:	1dfa      	adds	r2, r7, #7
     c3e:	7812      	ldrb	r2, [r2, #0]
     c40:	0952      	lsrs	r2, r2, #5
     c42:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     c44:	4b0d      	ldr	r3, [pc, #52]	; (c7c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     c46:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     c48:	230f      	movs	r3, #15
     c4a:	18fb      	adds	r3, r7, r3
     c4c:	781b      	ldrb	r3, [r3, #0]
     c4e:	2b00      	cmp	r3, #0
     c50:	d10f      	bne.n	c72 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     c52:	230f      	movs	r3, #15
     c54:	18fb      	adds	r3, r7, r3
     c56:	781b      	ldrb	r3, [r3, #0]
     c58:	009b      	lsls	r3, r3, #2
     c5a:	2210      	movs	r2, #16
     c5c:	4694      	mov	ip, r2
     c5e:	44bc      	add	ip, r7
     c60:	4463      	add	r3, ip
     c62:	3b08      	subs	r3, #8
     c64:	681a      	ldr	r2, [r3, #0]
     c66:	230e      	movs	r3, #14
     c68:	18fb      	adds	r3, r7, r3
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	01db      	lsls	r3, r3, #7
     c6e:	18d3      	adds	r3, r2, r3
     c70:	e000      	b.n	c74 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     c72:	2300      	movs	r3, #0
}
     c74:	0018      	movs	r0, r3
     c76:	46bd      	mov	sp, r7
     c78:	b004      	add	sp, #16
     c7a:	bd80      	pop	{r7, pc}
     c7c:	41004400 	.word	0x41004400

00000c80 <port_get_group_from_gpio_pin>:
{
     c80:	b580      	push	{r7, lr}
     c82:	b082      	sub	sp, #8
     c84:	af00      	add	r7, sp, #0
     c86:	0002      	movs	r2, r0
     c88:	1dfb      	adds	r3, r7, #7
     c8a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     c8c:	1dfb      	adds	r3, r7, #7
     c8e:	781b      	ldrb	r3, [r3, #0]
     c90:	0018      	movs	r0, r3
     c92:	4b03      	ldr	r3, [pc, #12]	; (ca0 <port_get_group_from_gpio_pin+0x20>)
     c94:	4798      	blx	r3
     c96:	0003      	movs	r3, r0
}
     c98:	0018      	movs	r0, r3
     c9a:	46bd      	mov	sp, r7
     c9c:	b002      	add	sp, #8
     c9e:	bd80      	pop	{r7, pc}
     ca0:	00000c21 	.word	0x00000c21

00000ca4 <port_get_config_defaults>:
{
     ca4:	b580      	push	{r7, lr}
     ca6:	b082      	sub	sp, #8
     ca8:	af00      	add	r7, sp, #0
     caa:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     cac:	687b      	ldr	r3, [r7, #4]
     cae:	2200      	movs	r2, #0
     cb0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	2201      	movs	r2, #1
     cb6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	2200      	movs	r2, #0
     cbc:	709a      	strb	r2, [r3, #2]
}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	46bd      	mov	sp, r7
     cc2:	b002      	add	sp, #8
     cc4:	bd80      	pop	{r7, pc}
	...

00000cc8 <port_pin_set_output_level>:
{
     cc8:	b580      	push	{r7, lr}
     cca:	b084      	sub	sp, #16
     ccc:	af00      	add	r7, sp, #0
     cce:	0002      	movs	r2, r0
     cd0:	1dfb      	adds	r3, r7, #7
     cd2:	701a      	strb	r2, [r3, #0]
     cd4:	1dbb      	adds	r3, r7, #6
     cd6:	1c0a      	adds	r2, r1, #0
     cd8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     cda:	1dfb      	adds	r3, r7, #7
     cdc:	781b      	ldrb	r3, [r3, #0]
     cde:	0018      	movs	r0, r3
     ce0:	4b0d      	ldr	r3, [pc, #52]	; (d18 <port_pin_set_output_level+0x50>)
     ce2:	4798      	blx	r3
     ce4:	0003      	movs	r3, r0
     ce6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ce8:	1dfb      	adds	r3, r7, #7
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	221f      	movs	r2, #31
     cee:	4013      	ands	r3, r2
     cf0:	2201      	movs	r2, #1
     cf2:	409a      	lsls	r2, r3
     cf4:	0013      	movs	r3, r2
     cf6:	60bb      	str	r3, [r7, #8]
	if (level) {
     cf8:	1dbb      	adds	r3, r7, #6
     cfa:	781b      	ldrb	r3, [r3, #0]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d003      	beq.n	d08 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     d00:	68fb      	ldr	r3, [r7, #12]
     d02:	68ba      	ldr	r2, [r7, #8]
     d04:	619a      	str	r2, [r3, #24]
}
     d06:	e002      	b.n	d0e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     d08:	68fb      	ldr	r3, [r7, #12]
     d0a:	68ba      	ldr	r2, [r7, #8]
     d0c:	615a      	str	r2, [r3, #20]
}
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	46bd      	mov	sp, r7
     d12:	b004      	add	sp, #16
     d14:	bd80      	pop	{r7, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	00000c81 	.word	0x00000c81

00000d1c <system_interrupt_enable>:
{
     d1c:	b580      	push	{r7, lr}
     d1e:	b082      	sub	sp, #8
     d20:	af00      	add	r7, sp, #0
     d22:	0002      	movs	r2, r0
     d24:	1dfb      	adds	r3, r7, #7
     d26:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d28:	4b06      	ldr	r3, [pc, #24]	; (d44 <system_interrupt_enable+0x28>)
     d2a:	1dfa      	adds	r2, r7, #7
     d2c:	7812      	ldrb	r2, [r2, #0]
     d2e:	0011      	movs	r1, r2
     d30:	221f      	movs	r2, #31
     d32:	400a      	ands	r2, r1
     d34:	2101      	movs	r1, #1
     d36:	4091      	lsls	r1, r2
     d38:	000a      	movs	r2, r1
     d3a:	601a      	str	r2, [r3, #0]
}
     d3c:	46c0      	nop			; (mov r8, r8)
     d3e:	46bd      	mov	sp, r7
     d40:	b002      	add	sp, #8
     d42:	bd80      	pop	{r7, pc}
     d44:	e000e100 	.word	0xe000e100

00000d48 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	0002      	movs	r2, r0
     d50:	1dfb      	adds	r3, r7, #7
     d52:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d54:	4a07      	ldr	r2, [pc, #28]	; (d74 <system_interrupt_disable+0x2c>)
     d56:	1dfb      	adds	r3, r7, #7
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	0019      	movs	r1, r3
     d5c:	231f      	movs	r3, #31
     d5e:	400b      	ands	r3, r1
     d60:	2101      	movs	r1, #1
     d62:	4099      	lsls	r1, r3
     d64:	000b      	movs	r3, r1
     d66:	0019      	movs	r1, r3
     d68:	2380      	movs	r3, #128	; 0x80
     d6a:	50d1      	str	r1, [r2, r3]
}
     d6c:	46c0      	nop			; (mov r8, r8)
     d6e:	46bd      	mov	sp, r7
     d70:	b002      	add	sp, #8
     d72:	bd80      	pop	{r7, pc}
     d74:	e000e100 	.word	0xe000e100

00000d78 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     d78:	b580      	push	{r7, lr}
     d7a:	b084      	sub	sp, #16
     d7c:	af00      	add	r7, sp, #0
     d7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	681b      	ldr	r3, [r3, #0]
     d84:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     d86:	68fb      	ldr	r3, [r7, #12]
     d88:	69db      	ldr	r3, [r3, #28]
     d8a:	1e5a      	subs	r2, r3, #1
     d8c:	4193      	sbcs	r3, r2
     d8e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     d90:	0018      	movs	r0, r3
     d92:	46bd      	mov	sp, r7
     d94:	b004      	add	sp, #16
     d96:	bd80      	pop	{r7, pc}

00000d98 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     d98:	b580      	push	{r7, lr}
     d9a:	b082      	sub	sp, #8
     d9c:	af00      	add	r7, sp, #0
     d9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	2201      	movs	r2, #1
     da4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	2200      	movs	r2, #0
     daa:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	2200      	movs	r2, #0
     db0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	22c0      	movs	r2, #192	; 0xc0
     db6:	0392      	lsls	r2, r2, #14
     db8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	2200      	movs	r2, #0
     dbe:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     dc0:	687b      	ldr	r3, [r7, #4]
     dc2:	2200      	movs	r2, #0
     dc4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	2201      	movs	r2, #1
     dca:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	2201      	movs	r2, #1
     dd0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	2200      	movs	r2, #0
     dd6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	2224      	movs	r2, #36	; 0x24
     ddc:	2100      	movs	r1, #0
     dde:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	3318      	adds	r3, #24
     de4:	220c      	movs	r2, #12
     de6:	2100      	movs	r1, #0
     de8:	0018      	movs	r0, r3
     dea:	4b0a      	ldr	r3, [pc, #40]	; (e14 <spi_get_config_defaults+0x7c>)
     dec:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	4a09      	ldr	r2, [pc, #36]	; (e18 <spi_get_config_defaults+0x80>)
     df2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	2200      	movs	r2, #0
     df8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	2200      	movs	r2, #0
     dfe:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     e00:	687b      	ldr	r3, [r7, #4]
     e02:	2200      	movs	r2, #0
     e04:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	2200      	movs	r2, #0
     e0a:	635a      	str	r2, [r3, #52]	; 0x34

};
     e0c:	46c0      	nop			; (mov r8, r8)
     e0e:	46bd      	mov	sp, r7
     e10:	b002      	add	sp, #8
     e12:	bd80      	pop	{r7, pc}
     e14:	0000dda3 	.word	0x0000dda3
     e18:	000186a0 	.word	0x000186a0

00000e1c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     e1c:	b580      	push	{r7, lr}
     e1e:	b082      	sub	sp, #8
     e20:	af00      	add	r7, sp, #0
     e22:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	220a      	movs	r2, #10
     e28:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	2200      	movs	r2, #0
     e2e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	2200      	movs	r2, #0
     e34:	709a      	strb	r2, [r3, #2]
}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	46bd      	mov	sp, r7
     e3a:	b002      	add	sp, #8
     e3c:	bd80      	pop	{r7, pc}
	...

00000e40 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     e40:	b580      	push	{r7, lr}
     e42:	b084      	sub	sp, #16
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
     e48:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     e4a:	683b      	ldr	r3, [r7, #0]
     e4c:	781a      	ldrb	r2, [r3, #0]
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     e52:	683b      	ldr	r3, [r7, #0]
     e54:	785a      	ldrb	r2, [r3, #1]
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     e5a:	683b      	ldr	r3, [r7, #0]
     e5c:	789a      	ldrb	r2, [r3, #2]
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     e62:	230c      	movs	r3, #12
     e64:	18fb      	adds	r3, r7, r3
     e66:	0018      	movs	r0, r3
     e68:	4b0b      	ldr	r3, [pc, #44]	; (e98 <spi_attach_slave+0x58>)
     e6a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     e6c:	230c      	movs	r3, #12
     e6e:	18fb      	adds	r3, r7, r3
     e70:	2201      	movs	r2, #1
     e72:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	220c      	movs	r2, #12
     e7a:	18ba      	adds	r2, r7, r2
     e7c:	0011      	movs	r1, r2
     e7e:	0018      	movs	r0, r3
     e80:	4b06      	ldr	r3, [pc, #24]	; (e9c <spi_attach_slave+0x5c>)
     e82:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	781b      	ldrb	r3, [r3, #0]
     e88:	2101      	movs	r1, #1
     e8a:	0018      	movs	r0, r3
     e8c:	4b04      	ldr	r3, [pc, #16]	; (ea0 <spi_attach_slave+0x60>)
     e8e:	4798      	blx	r3
}
     e90:	46c0      	nop			; (mov r8, r8)
     e92:	46bd      	mov	sp, r7
     e94:	b004      	add	sp, #16
     e96:	bd80      	pop	{r7, pc}
     e98:	00000ca5 	.word	0x00000ca5
     e9c:	0000b9bd 	.word	0x0000b9bd
     ea0:	00000cc9 	.word	0x00000cc9

00000ea4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b084      	sub	sp, #16
     ea8:	af00      	add	r7, sp, #0
     eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     eac:	687b      	ldr	r3, [r7, #4]
     eae:	681b      	ldr	r3, [r3, #0]
     eb0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	681b      	ldr	r3, [r3, #0]
     eb6:	0018      	movs	r0, r3
     eb8:	4b0b      	ldr	r3, [pc, #44]	; (ee8 <spi_enable+0x44>)
     eba:	4798      	blx	r3
     ebc:	0003      	movs	r3, r0
     ebe:	0018      	movs	r0, r3
     ec0:	4b0a      	ldr	r3, [pc, #40]	; (eec <spi_enable+0x48>)
     ec2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     ec4:	46c0      	nop			; (mov r8, r8)
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	0018      	movs	r0, r3
     eca:	4b09      	ldr	r3, [pc, #36]	; (ef0 <spi_enable+0x4c>)
     ecc:	4798      	blx	r3
     ece:	1e03      	subs	r3, r0, #0
     ed0:	d1f9      	bne.n	ec6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	2202      	movs	r2, #2
     ed8:	431a      	orrs	r2, r3
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	601a      	str	r2, [r3, #0]
}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	46bd      	mov	sp, r7
     ee2:	b004      	add	sp, #16
     ee4:	bd80      	pop	{r7, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	0000b6e1 	.word	0x0000b6e1
     eec:	00000d1d 	.word	0x00000d1d
     ef0:	00000d79 	.word	0x00000d79

00000ef4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     ef4:	b580      	push	{r7, lr}
     ef6:	b084      	sub	sp, #16
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	681b      	ldr	r3, [r3, #0]
     f06:	0018      	movs	r0, r3
     f08:	4b0e      	ldr	r3, [pc, #56]	; (f44 <spi_disable+0x50>)
     f0a:	4798      	blx	r3
     f0c:	0003      	movs	r3, r0
     f0e:	0018      	movs	r0, r3
     f10:	4b0d      	ldr	r3, [pc, #52]	; (f48 <spi_disable+0x54>)
     f12:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     f14:	46c0      	nop			; (mov r8, r8)
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	0018      	movs	r0, r3
     f1a:	4b0c      	ldr	r3, [pc, #48]	; (f4c <spi_disable+0x58>)
     f1c:	4798      	blx	r3
     f1e:	1e03      	subs	r3, r0, #0
     f20:	d1f9      	bne.n	f16 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     f22:	68fb      	ldr	r3, [r7, #12]
     f24:	228f      	movs	r2, #143	; 0x8f
     f26:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     f28:	68fb      	ldr	r3, [r7, #12]
     f2a:	228f      	movs	r2, #143	; 0x8f
     f2c:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     f2e:	68fb      	ldr	r3, [r7, #12]
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	2202      	movs	r2, #2
     f34:	4393      	bics	r3, r2
     f36:	001a      	movs	r2, r3
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	601a      	str	r2, [r3, #0]
}
     f3c:	46c0      	nop			; (mov r8, r8)
     f3e:	46bd      	mov	sp, r7
     f40:	b004      	add	sp, #16
     f42:	bd80      	pop	{r7, pc}
     f44:	0000b6e1 	.word	0x0000b6e1
     f48:	00000d49 	.word	0x00000d49
     f4c:	00000d79 	.word	0x00000d79

00000f50 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     f50:	b580      	push	{r7, lr}
     f52:	b084      	sub	sp, #16
     f54:	af00      	add	r7, sp, #0
     f56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	681b      	ldr	r3, [r3, #0]
     f5c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	7e1b      	ldrb	r3, [r3, #24]
     f62:	b2db      	uxtb	r3, r3
     f64:	001a      	movs	r2, r3
     f66:	2302      	movs	r3, #2
     f68:	4013      	ands	r3, r2
     f6a:	1e5a      	subs	r2, r3, #1
     f6c:	4193      	sbcs	r3, r2
     f6e:	b2db      	uxtb	r3, r3
}
     f70:	0018      	movs	r0, r3
     f72:	46bd      	mov	sp, r7
     f74:	b004      	add	sp, #16
     f76:	bd80      	pop	{r7, pc}

00000f78 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     f78:	b580      	push	{r7, lr}
     f7a:	b084      	sub	sp, #16
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	681b      	ldr	r3, [r3, #0]
     f84:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f86:	68fb      	ldr	r3, [r7, #12]
     f88:	7e1b      	ldrb	r3, [r3, #24]
     f8a:	b2db      	uxtb	r3, r3
     f8c:	001a      	movs	r2, r3
     f8e:	2301      	movs	r3, #1
     f90:	4013      	ands	r3, r2
     f92:	1e5a      	subs	r2, r3, #1
     f94:	4193      	sbcs	r3, r2
     f96:	b2db      	uxtb	r3, r3
}
     f98:	0018      	movs	r0, r3
     f9a:	46bd      	mov	sp, r7
     f9c:	b004      	add	sp, #16
     f9e:	bd80      	pop	{r7, pc}

00000fa0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     fa0:	b580      	push	{r7, lr}
     fa2:	b084      	sub	sp, #16
     fa4:	af00      	add	r7, sp, #0
     fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     fa8:	687b      	ldr	r3, [r7, #4]
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fae:	68fb      	ldr	r3, [r7, #12]
     fb0:	7e1b      	ldrb	r3, [r3, #24]
     fb2:	b2db      	uxtb	r3, r3
     fb4:	001a      	movs	r2, r3
     fb6:	2304      	movs	r3, #4
     fb8:	4013      	ands	r3, r2
     fba:	1e5a      	subs	r2, r3, #1
     fbc:	4193      	sbcs	r3, r2
     fbe:	b2db      	uxtb	r3, r3
}
     fc0:	0018      	movs	r0, r3
     fc2:	46bd      	mov	sp, r7
     fc4:	b004      	add	sp, #16
     fc6:	bd80      	pop	{r7, pc}

00000fc8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b084      	sub	sp, #16
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
     fd0:	000a      	movs	r2, r1
     fd2:	1cbb      	adds	r3, r7, #2
     fd4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	0018      	movs	r0, r3
     fe0:	4b0a      	ldr	r3, [pc, #40]	; (100c <spi_write+0x44>)
     fe2:	4798      	blx	r3
     fe4:	0003      	movs	r3, r0
     fe6:	001a      	movs	r2, r3
     fe8:	2301      	movs	r3, #1
     fea:	4053      	eors	r3, r2
     fec:	b2db      	uxtb	r3, r3
     fee:	2b00      	cmp	r3, #0
     ff0:	d001      	beq.n	ff6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     ff2:	2305      	movs	r3, #5
     ff4:	e006      	b.n	1004 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ff6:	1cbb      	adds	r3, r7, #2
     ff8:	881b      	ldrh	r3, [r3, #0]
     ffa:	05db      	lsls	r3, r3, #23
     ffc:	0dda      	lsrs	r2, r3, #23
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    1002:	2300      	movs	r3, #0
}
    1004:	0018      	movs	r0, r3
    1006:	46bd      	mov	sp, r7
    1008:	b004      	add	sp, #16
    100a:	bd80      	pop	{r7, pc}
    100c:	00000f79 	.word	0x00000f79

00001010 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1010:	b580      	push	{r7, lr}
    1012:	b084      	sub	sp, #16
    1014:	af00      	add	r7, sp, #0
    1016:	6078      	str	r0, [r7, #4]
    1018:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1020:	687b      	ldr	r3, [r7, #4]
    1022:	0018      	movs	r0, r3
    1024:	4b1b      	ldr	r3, [pc, #108]	; (1094 <spi_read+0x84>)
    1026:	4798      	blx	r3
    1028:	0003      	movs	r3, r0
    102a:	001a      	movs	r2, r3
    102c:	2301      	movs	r3, #1
    102e:	4053      	eors	r3, r2
    1030:	b2db      	uxtb	r3, r3
    1032:	2b00      	cmp	r3, #0
    1034:	d001      	beq.n	103a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1036:	2310      	movs	r3, #16
    1038:	e027      	b.n	108a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    103a:	230f      	movs	r3, #15
    103c:	18fb      	adds	r3, r7, r3
    103e:	2200      	movs	r2, #0
    1040:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1042:	68bb      	ldr	r3, [r7, #8]
    1044:	8b5b      	ldrh	r3, [r3, #26]
    1046:	b29b      	uxth	r3, r3
    1048:	001a      	movs	r2, r3
    104a:	2304      	movs	r3, #4
    104c:	4013      	ands	r3, r2
    104e:	d006      	beq.n	105e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1050:	230f      	movs	r3, #15
    1052:	18fb      	adds	r3, r7, r3
    1054:	221e      	movs	r2, #30
    1056:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1058:	68bb      	ldr	r3, [r7, #8]
    105a:	2204      	movs	r2, #4
    105c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	799b      	ldrb	r3, [r3, #6]
    1062:	2b01      	cmp	r3, #1
    1064:	d108      	bne.n	1078 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1066:	68bb      	ldr	r3, [r7, #8]
    1068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    106a:	b29b      	uxth	r3, r3
    106c:	05db      	lsls	r3, r3, #23
    106e:	0ddb      	lsrs	r3, r3, #23
    1070:	b29a      	uxth	r2, r3
    1072:	683b      	ldr	r3, [r7, #0]
    1074:	801a      	strh	r2, [r3, #0]
    1076:	e005      	b.n	1084 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1078:	68bb      	ldr	r3, [r7, #8]
    107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    107c:	b2db      	uxtb	r3, r3
    107e:	b29a      	uxth	r2, r3
    1080:	683b      	ldr	r3, [r7, #0]
    1082:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1084:	230f      	movs	r3, #15
    1086:	18fb      	adds	r3, r7, r3
    1088:	781b      	ldrb	r3, [r3, #0]
}
    108a:	0018      	movs	r0, r3
    108c:	46bd      	mov	sp, r7
    108e:	b004      	add	sp, #16
    1090:	bd80      	pop	{r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	00000fa1 	.word	0x00000fa1

00001098 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    1098:	b580      	push	{r7, lr}
    109a:	b086      	sub	sp, #24
    109c:	af00      	add	r7, sp, #0
    109e:	60f8      	str	r0, [r7, #12]
    10a0:	60b9      	str	r1, [r7, #8]
    10a2:	1dbb      	adds	r3, r7, #6
    10a4:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    10a6:	2313      	movs	r3, #19
    10a8:	18fb      	adds	r3, r7, r3
    10aa:	2200      	movs	r2, #0
    10ac:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    10ae:	2317      	movs	r3, #23
    10b0:	18fb      	adds	r3, r7, r3
    10b2:	2200      	movs	r2, #0
    10b4:	701a      	strb	r2, [r3, #0]
    10b6:	2316      	movs	r3, #22
    10b8:	18fb      	adds	r3, r7, r3
    10ba:	2200      	movs	r2, #0
    10bc:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    10be:	2314      	movs	r3, #20
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	2200      	movs	r2, #0
    10c4:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    10c6:	2310      	movs	r3, #16
    10c8:	18fb      	adds	r3, r7, r3
    10ca:	2200      	movs	r2, #0
    10cc:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    10ce:	68bb      	ldr	r3, [r7, #8]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d102      	bne.n	10da <spi_rw+0x42>
    10d4:	68fb      	ldr	r3, [r7, #12]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d003      	beq.n	10e2 <spi_rw+0x4a>
    10da:	1dbb      	adds	r3, r7, #6
    10dc:	881b      	ldrh	r3, [r3, #0]
    10de:	2b00      	cmp	r3, #0
    10e0:	d102      	bne.n	10e8 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    10e2:	230f      	movs	r3, #15
    10e4:	425b      	negs	r3, r3
    10e6:	e07e      	b.n	11e6 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    10e8:	68fb      	ldr	r3, [r7, #12]
    10ea:	2b00      	cmp	r3, #0
    10ec:	d106      	bne.n	10fc <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    10ee:	2313      	movs	r3, #19
    10f0:	18fb      	adds	r3, r7, r3
    10f2:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    10f4:	2317      	movs	r3, #23
    10f6:	18fb      	adds	r3, r7, r3
    10f8:	2201      	movs	r2, #1
    10fa:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    10fc:	68bb      	ldr	r3, [r7, #8]
    10fe:	2b00      	cmp	r3, #0
    1100:	d106      	bne.n	1110 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    1102:	2313      	movs	r3, #19
    1104:	18fb      	adds	r3, r7, r3
    1106:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    1108:	2316      	movs	r3, #22
    110a:	18fb      	adds	r3, r7, r3
    110c:	2201      	movs	r2, #1
    110e:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    1110:	4937      	ldr	r1, [pc, #220]	; (11f0 <spi_rw+0x158>)
    1112:	4b38      	ldr	r3, [pc, #224]	; (11f4 <spi_rw+0x15c>)
    1114:	2201      	movs	r2, #1
    1116:	0018      	movs	r0, r3
    1118:	4b37      	ldr	r3, [pc, #220]	; (11f8 <spi_rw+0x160>)
    111a:	4798      	blx	r3

	while (u16Sz) {
    111c:	e04c      	b.n	11b8 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    111e:	68fb      	ldr	r3, [r7, #12]
    1120:	781a      	ldrb	r2, [r3, #0]
    1122:	2314      	movs	r3, #20
    1124:	18fb      	adds	r3, r7, r3
    1126:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    1128:	46c0      	nop			; (mov r8, r8)
    112a:	4b32      	ldr	r3, [pc, #200]	; (11f4 <spi_rw+0x15c>)
    112c:	0018      	movs	r0, r3
    112e:	4b33      	ldr	r3, [pc, #204]	; (11fc <spi_rw+0x164>)
    1130:	4798      	blx	r3
    1132:	0003      	movs	r3, r0
    1134:	001a      	movs	r2, r3
    1136:	2301      	movs	r3, #1
    1138:	4053      	eors	r3, r2
    113a:	b2db      	uxtb	r3, r3
    113c:	2b00      	cmp	r3, #0
    113e:	d1f4      	bne.n	112a <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    1140:	46c0      	nop			; (mov r8, r8)
    1142:	2314      	movs	r3, #20
    1144:	18fb      	adds	r3, r7, r3
    1146:	881a      	ldrh	r2, [r3, #0]
    1148:	4b2a      	ldr	r3, [pc, #168]	; (11f4 <spi_rw+0x15c>)
    114a:	0011      	movs	r1, r2
    114c:	0018      	movs	r0, r3
    114e:	4b2c      	ldr	r3, [pc, #176]	; (1200 <spi_rw+0x168>)
    1150:	4798      	blx	r3
    1152:	1e03      	subs	r3, r0, #0
    1154:	d1f5      	bne.n	1142 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	4b26      	ldr	r3, [pc, #152]	; (11f4 <spi_rw+0x15c>)
    115a:	0018      	movs	r0, r3
    115c:	4b29      	ldr	r3, [pc, #164]	; (1204 <spi_rw+0x16c>)
    115e:	4798      	blx	r3
    1160:	0003      	movs	r3, r0
    1162:	001a      	movs	r2, r3
    1164:	2301      	movs	r3, #1
    1166:	4053      	eors	r3, r2
    1168:	b2db      	uxtb	r3, r3
    116a:	2b00      	cmp	r3, #0
    116c:	d1f4      	bne.n	1158 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	2310      	movs	r3, #16
    1172:	18fa      	adds	r2, r7, r3
    1174:	4b1f      	ldr	r3, [pc, #124]	; (11f4 <spi_rw+0x15c>)
    1176:	0011      	movs	r1, r2
    1178:	0018      	movs	r0, r3
    117a:	4b23      	ldr	r3, [pc, #140]	; (1208 <spi_rw+0x170>)
    117c:	4798      	blx	r3
    117e:	1e03      	subs	r3, r0, #0
    1180:	d1f6      	bne.n	1170 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    1182:	2310      	movs	r3, #16
    1184:	18fb      	adds	r3, r7, r3
    1186:	881b      	ldrh	r3, [r3, #0]
    1188:	b2da      	uxtb	r2, r3
    118a:	68bb      	ldr	r3, [r7, #8]
    118c:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    118e:	1dbb      	adds	r3, r7, #6
    1190:	881a      	ldrh	r2, [r3, #0]
    1192:	1dbb      	adds	r3, r7, #6
    1194:	3a01      	subs	r2, #1
    1196:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    1198:	2316      	movs	r3, #22
    119a:	18fb      	adds	r3, r7, r3
    119c:	781b      	ldrb	r3, [r3, #0]
    119e:	2b00      	cmp	r3, #0
    11a0:	d102      	bne.n	11a8 <spi_rw+0x110>
			pu8Miso++;
    11a2:	68bb      	ldr	r3, [r7, #8]
    11a4:	3301      	adds	r3, #1
    11a6:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    11a8:	2317      	movs	r3, #23
    11aa:	18fb      	adds	r3, r7, r3
    11ac:	781b      	ldrb	r3, [r3, #0]
    11ae:	2b00      	cmp	r3, #0
    11b0:	d102      	bne.n	11b8 <spi_rw+0x120>
			pu8Mosi++;
    11b2:	68fb      	ldr	r3, [r7, #12]
    11b4:	3301      	adds	r3, #1
    11b6:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    11b8:	1dbb      	adds	r3, r7, #6
    11ba:	881b      	ldrh	r3, [r3, #0]
    11bc:	2b00      	cmp	r3, #0
    11be:	d1ae      	bne.n	111e <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    11c0:	46c0      	nop			; (mov r8, r8)
    11c2:	4b0c      	ldr	r3, [pc, #48]	; (11f4 <spi_rw+0x15c>)
    11c4:	0018      	movs	r0, r3
    11c6:	4b11      	ldr	r3, [pc, #68]	; (120c <spi_rw+0x174>)
    11c8:	4798      	blx	r3
    11ca:	0003      	movs	r3, r0
    11cc:	001a      	movs	r2, r3
    11ce:	2301      	movs	r3, #1
    11d0:	4053      	eors	r3, r2
    11d2:	b2db      	uxtb	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	d1f4      	bne.n	11c2 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    11d8:	4905      	ldr	r1, [pc, #20]	; (11f0 <spi_rw+0x158>)
    11da:	4b06      	ldr	r3, [pc, #24]	; (11f4 <spi_rw+0x15c>)
    11dc:	2200      	movs	r2, #0
    11de:	0018      	movs	r0, r3
    11e0:	4b05      	ldr	r3, [pc, #20]	; (11f8 <spi_rw+0x160>)
    11e2:	4798      	blx	r3

	return M2M_SUCCESS;
    11e4:	2300      	movs	r3, #0
}
    11e6:	0018      	movs	r0, r3
    11e8:	46bd      	mov	sp, r7
    11ea:	b006      	add	sp, #24
    11ec:	bd80      	pop	{r7, pc}
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	20000578 	.word	0x20000578
    11f4:	2000057c 	.word	0x2000057c
    11f8:	00006ec1 	.word	0x00006ec1
    11fc:	00000f79 	.word	0x00000f79
    1200:	00000fc9 	.word	0x00000fc9
    1204:	00000fa1 	.word	0x00000fa1
    1208:	00001011 	.word	0x00001011
    120c:	00000f51 	.word	0x00000f51

00001210 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    1210:	b580      	push	{r7, lr}
    1212:	b092      	sub	sp, #72	; 0x48
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    1218:	2347      	movs	r3, #71	; 0x47
    121a:	18fb      	adds	r3, r7, r3
    121c:	2200      	movs	r2, #0
    121e:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    1220:	2308      	movs	r3, #8
    1222:	18fb      	adds	r3, r7, r3
    1224:	0018      	movs	r0, r3
    1226:	4b26      	ldr	r3, [pc, #152]	; (12c0 <nm_bus_init+0xb0>)
    1228:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    122a:	2308      	movs	r3, #8
    122c:	18fb      	adds	r3, r7, r3
    122e:	220e      	movs	r2, #14
    1230:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    1232:	2308      	movs	r3, #8
    1234:	18fa      	adds	r2, r7, r3
    1236:	4b23      	ldr	r3, [pc, #140]	; (12c4 <nm_bus_init+0xb4>)
    1238:	0011      	movs	r1, r2
    123a:	0018      	movs	r0, r3
    123c:	4b22      	ldr	r3, [pc, #136]	; (12c8 <nm_bus_init+0xb8>)
    123e:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    1240:	230c      	movs	r3, #12
    1242:	18fb      	adds	r3, r7, r3
    1244:	0018      	movs	r0, r3
    1246:	4b21      	ldr	r3, [pc, #132]	; (12cc <nm_bus_init+0xbc>)
    1248:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    124a:	230c      	movs	r3, #12
    124c:	18fb      	adds	r3, r7, r3
    124e:	22c0      	movs	r2, #192	; 0xc0
    1250:	0392      	lsls	r2, r2, #14
    1252:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    1254:	230c      	movs	r3, #12
    1256:	18fb      	adds	r3, r7, r3
    1258:	4a1d      	ldr	r2, [pc, #116]	; (12d0 <nm_bus_init+0xc0>)
    125a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    125c:	230c      	movs	r3, #12
    125e:	18fb      	adds	r3, r7, r3
    1260:	4a1c      	ldr	r2, [pc, #112]	; (12d4 <nm_bus_init+0xc4>)
    1262:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    1264:	230c      	movs	r3, #12
    1266:	18fb      	adds	r3, r7, r3
    1268:	2201      	movs	r2, #1
    126a:	4252      	negs	r2, r2
    126c:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    126e:	230c      	movs	r3, #12
    1270:	18fb      	adds	r3, r7, r3
    1272:	4a19      	ldr	r2, [pc, #100]	; (12d8 <nm_bus_init+0xc8>)
    1274:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    1276:	230c      	movs	r3, #12
    1278:	18fb      	adds	r3, r7, r3
    127a:	2200      	movs	r2, #0
    127c:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    127e:	230c      	movs	r3, #12
    1280:	18fb      	adds	r3, r7, r3
    1282:	4a16      	ldr	r2, [pc, #88]	; (12dc <nm_bus_init+0xcc>)
    1284:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    1286:	230c      	movs	r3, #12
    1288:	18fa      	adds	r2, r7, r3
    128a:	4915      	ldr	r1, [pc, #84]	; (12e0 <nm_bus_init+0xd0>)
    128c:	4b15      	ldr	r3, [pc, #84]	; (12e4 <nm_bus_init+0xd4>)
    128e:	0018      	movs	r0, r3
    1290:	4b15      	ldr	r3, [pc, #84]	; (12e8 <nm_bus_init+0xd8>)
    1292:	4798      	blx	r3
    1294:	1e03      	subs	r3, r0, #0
    1296:	d002      	beq.n	129e <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    1298:	2306      	movs	r3, #6
    129a:	425b      	negs	r3, r3
    129c:	e00c      	b.n	12b8 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    129e:	4b11      	ldr	r3, [pc, #68]	; (12e4 <nm_bus_init+0xd4>)
    12a0:	0018      	movs	r0, r3
    12a2:	4b12      	ldr	r3, [pc, #72]	; (12ec <nm_bus_init+0xdc>)
    12a4:	4798      	blx	r3

	nm_bsp_reset();
    12a6:	4b12      	ldr	r3, [pc, #72]	; (12f0 <nm_bus_init+0xe0>)
    12a8:	4798      	blx	r3
	nm_bsp_sleep(1);
    12aa:	2001      	movs	r0, #1
    12ac:	4b11      	ldr	r3, [pc, #68]	; (12f4 <nm_bus_init+0xe4>)
    12ae:	4798      	blx	r3
#endif
	return result;
    12b0:	2347      	movs	r3, #71	; 0x47
    12b2:	18fb      	adds	r3, r7, r3
    12b4:	781b      	ldrb	r3, [r3, #0]
    12b6:	b25b      	sxtb	r3, r3
}
    12b8:	0018      	movs	r0, r3
    12ba:	46bd      	mov	sp, r7
    12bc:	b012      	add	sp, #72	; 0x48
    12be:	bd80      	pop	{r7, pc}
    12c0:	00000e1d 	.word	0x00000e1d
    12c4:	20000578 	.word	0x20000578
    12c8:	00000e41 	.word	0x00000e41
    12cc:	00000d99 	.word	0x00000d99
    12d0:	000c0002 	.word	0x000c0002
    12d4:	000d0002 	.word	0x000d0002
    12d8:	000f0002 	.word	0x000f0002
    12dc:	00b71b00 	.word	0x00b71b00
    12e0:	42001000 	.word	0x42001000
    12e4:	2000057c 	.word	0x2000057c
    12e8:	00006d31 	.word	0x00006d31
    12ec:	00000ea5 	.word	0x00000ea5
    12f0:	00000b09 	.word	0x00000b09
    12f4:	00000b49 	.word	0x00000b49

000012f8 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    12f8:	b590      	push	{r4, r7, lr}
    12fa:	b085      	sub	sp, #20
    12fc:	af00      	add	r7, sp, #0
    12fe:	0002      	movs	r2, r0
    1300:	6039      	str	r1, [r7, #0]
    1302:	1dfb      	adds	r3, r7, #7
    1304:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    1306:	230f      	movs	r3, #15
    1308:	18fb      	adds	r3, r7, r3
    130a:	2200      	movs	r2, #0
    130c:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    130e:	1dfb      	adds	r3, r7, #7
    1310:	781b      	ldrb	r3, [r3, #0]
    1312:	2b03      	cmp	r3, #3
    1314:	d10f      	bne.n	1336 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    1316:	683b      	ldr	r3, [r7, #0]
    1318:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    131a:	68bb      	ldr	r3, [r7, #8]
    131c:	6818      	ldr	r0, [r3, #0]
    131e:	68bb      	ldr	r3, [r7, #8]
    1320:	6859      	ldr	r1, [r3, #4]
    1322:	68bb      	ldr	r3, [r7, #8]
    1324:	891b      	ldrh	r3, [r3, #8]
    1326:	220f      	movs	r2, #15
    1328:	18bc      	adds	r4, r7, r2
    132a:	001a      	movs	r2, r3
    132c:	4b10      	ldr	r3, [pc, #64]	; (1370 <nm_bus_ioctl+0x78>)
    132e:	4798      	blx	r3
    1330:	0003      	movs	r3, r0
    1332:	7023      	strb	r3, [r4, #0]
		}
		break;
    1334:	e013      	b.n	135e <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    1336:	230f      	movs	r3, #15
    1338:	18fb      	adds	r3, r7, r3
    133a:	22ff      	movs	r2, #255	; 0xff
    133c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    133e:	230e      	movs	r3, #14
    1340:	33ff      	adds	r3, #255	; 0xff
    1342:	001a      	movs	r2, r3
    1344:	490b      	ldr	r1, [pc, #44]	; (1374 <nm_bus_ioctl+0x7c>)
    1346:	4b0c      	ldr	r3, [pc, #48]	; (1378 <nm_bus_ioctl+0x80>)
    1348:	0018      	movs	r0, r3
    134a:	4b0c      	ldr	r3, [pc, #48]	; (137c <nm_bus_ioctl+0x84>)
    134c:	4798      	blx	r3
    134e:	4b0c      	ldr	r3, [pc, #48]	; (1380 <nm_bus_ioctl+0x88>)
    1350:	0018      	movs	r0, r3
    1352:	4b0c      	ldr	r3, [pc, #48]	; (1384 <nm_bus_ioctl+0x8c>)
    1354:	4798      	blx	r3
    1356:	200d      	movs	r0, #13
    1358:	4b0b      	ldr	r3, [pc, #44]	; (1388 <nm_bus_ioctl+0x90>)
    135a:	4798      	blx	r3
			break;
    135c:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    135e:	230f      	movs	r3, #15
    1360:	18fb      	adds	r3, r7, r3
    1362:	781b      	ldrb	r3, [r3, #0]
    1364:	b25b      	sxtb	r3, r3
}
    1366:	0018      	movs	r0, r3
    1368:	46bd      	mov	sp, r7
    136a:	b005      	add	sp, #20
    136c:	bd90      	pop	{r4, r7, pc}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	00001099 	.word	0x00001099
    1374:	00012908 	.word	0x00012908
    1378:	000128e0 	.word	0x000128e0
    137c:	0000e7e5 	.word	0x0000e7e5
    1380:	000128f4 	.word	0x000128f4
    1384:	0000e901 	.word	0x0000e901
    1388:	0000e819 	.word	0x0000e819

0000138c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    1392:	1dfb      	adds	r3, r7, #7
    1394:	2200      	movs	r2, #0
    1396:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    1398:	1d3b      	adds	r3, r7, #4
    139a:	0018      	movs	r0, r3
    139c:	4b13      	ldr	r3, [pc, #76]	; (13ec <nm_bus_deinit+0x60>)
    139e:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    13a0:	1d3b      	adds	r3, r7, #4
    13a2:	2200      	movs	r2, #0
    13a4:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    13a6:	1d3b      	adds	r3, r7, #4
    13a8:	2200      	movs	r2, #0
    13aa:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    13ac:	4b10      	ldr	r3, [pc, #64]	; (13f0 <nm_bus_deinit+0x64>)
    13ae:	0018      	movs	r0, r3
    13b0:	4b10      	ldr	r3, [pc, #64]	; (13f4 <nm_bus_deinit+0x68>)
    13b2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    13b4:	1d3b      	adds	r3, r7, #4
    13b6:	0019      	movs	r1, r3
    13b8:	200c      	movs	r0, #12
    13ba:	4b0f      	ldr	r3, [pc, #60]	; (13f8 <nm_bus_deinit+0x6c>)
    13bc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    13be:	1d3b      	adds	r3, r7, #4
    13c0:	0019      	movs	r1, r3
    13c2:	200f      	movs	r0, #15
    13c4:	4b0c      	ldr	r3, [pc, #48]	; (13f8 <nm_bus_deinit+0x6c>)
    13c6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    13c8:	1d3b      	adds	r3, r7, #4
    13ca:	0019      	movs	r1, r3
    13cc:	200d      	movs	r0, #13
    13ce:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <nm_bus_deinit+0x6c>)
    13d0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    13d2:	1d3b      	adds	r3, r7, #4
    13d4:	0019      	movs	r1, r3
    13d6:	200e      	movs	r0, #14
    13d8:	4b07      	ldr	r3, [pc, #28]	; (13f8 <nm_bus_deinit+0x6c>)
    13da:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    13dc:	1dfb      	adds	r3, r7, #7
    13de:	781b      	ldrb	r3, [r3, #0]
    13e0:	b25b      	sxtb	r3, r3
}
    13e2:	0018      	movs	r0, r3
    13e4:	46bd      	mov	sp, r7
    13e6:	b002      	add	sp, #8
    13e8:	bd80      	pop	{r7, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	00000ca5 	.word	0x00000ca5
    13f0:	2000057c 	.word	0x2000057c
    13f4:	00000ef5 	.word	0x00000ef5
    13f8:	0000b9bd 	.word	0x0000b9bd

000013fc <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    13fc:	b580      	push	{r7, lr}
    13fe:	b084      	sub	sp, #16
    1400:	af00      	add	r7, sp, #0
    1402:	60f8      	str	r0, [r7, #12]
    1404:	60b9      	str	r1, [r7, #8]
    1406:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	2b00      	cmp	r3, #0
    140c:	d010      	beq.n	1430 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    140e:	68bb      	ldr	r3, [r7, #8]
    1410:	781a      	ldrb	r2, [r3, #0]
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	701a      	strb	r2, [r3, #0]
		pDst++;
    1416:	68fb      	ldr	r3, [r7, #12]
    1418:	3301      	adds	r3, #1
    141a:	60fb      	str	r3, [r7, #12]
		pSrc++;
    141c:	68bb      	ldr	r3, [r7, #8]
    141e:	3301      	adds	r3, #1
    1420:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	3b01      	subs	r3, #1
    1426:	607b      	str	r3, [r7, #4]
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	2b00      	cmp	r3, #0
    142c:	d1ef      	bne.n	140e <m2m_memcpy+0x12>
    142e:	e000      	b.n	1432 <m2m_memcpy+0x36>
	if(sz == 0) return;
    1430:	46c0      	nop			; (mov r8, r8)
}
    1432:	46bd      	mov	sp, r7
    1434:	b004      	add	sp, #16
    1436:	bd80      	pop	{r7, pc}

00001438 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    1438:	b580      	push	{r7, lr}
    143a:	b084      	sub	sp, #16
    143c:	af00      	add	r7, sp, #0
    143e:	60f8      	str	r0, [r7, #12]
    1440:	607a      	str	r2, [r7, #4]
    1442:	230b      	movs	r3, #11
    1444:	18fb      	adds	r3, r7, r3
    1446:	1c0a      	adds	r2, r1, #0
    1448:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    144a:	687b      	ldr	r3, [r7, #4]
    144c:	2b00      	cmp	r3, #0
    144e:	d00e      	beq.n	146e <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    1450:	68fb      	ldr	r3, [r7, #12]
    1452:	220b      	movs	r2, #11
    1454:	18ba      	adds	r2, r7, r2
    1456:	7812      	ldrb	r2, [r2, #0]
    1458:	701a      	strb	r2, [r3, #0]
		pBuf++;
    145a:	68fb      	ldr	r3, [r7, #12]
    145c:	3301      	adds	r3, #1
    145e:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	3b01      	subs	r3, #1
    1464:	607b      	str	r3, [r7, #4]
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	2b00      	cmp	r3, #0
    146a:	d1f1      	bne.n	1450 <m2m_memset+0x18>
    146c:	e000      	b.n	1470 <m2m_memset+0x38>
	if(sz == 0) return;
    146e:	46c0      	nop			; (mov r8, r8)
}
    1470:	46bd      	mov	sp, r7
    1472:	b004      	add	sp, #16
    1474:	bd80      	pop	{r7, pc}

00001476 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1476:	b580      	push	{r7, lr}
    1478:	b084      	sub	sp, #16
    147a:	af00      	add	r7, sp, #0
    147c:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    147e:	230e      	movs	r3, #14
    1480:	18fb      	adds	r3, r7, r3
    1482:	2200      	movs	r2, #0
    1484:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    1486:	e009      	b.n	149c <m2m_strlen+0x26>
	{
		u16StrLen ++;
    1488:	230e      	movs	r3, #14
    148a:	18fb      	adds	r3, r7, r3
    148c:	881a      	ldrh	r2, [r3, #0]
    148e:	230e      	movs	r3, #14
    1490:	18fb      	adds	r3, r7, r3
    1492:	3201      	adds	r2, #1
    1494:	801a      	strh	r2, [r3, #0]
		pcStr++;
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	3301      	adds	r3, #1
    149a:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    149c:	687b      	ldr	r3, [r7, #4]
    149e:	781b      	ldrb	r3, [r3, #0]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d1f1      	bne.n	1488 <m2m_strlen+0x12>
	}
	return u16StrLen;
    14a4:	230e      	movs	r3, #14
    14a6:	18fb      	adds	r3, r7, r3
    14a8:	881b      	ldrh	r3, [r3, #0]
}
    14aa:	0018      	movs	r0, r3
    14ac:	46bd      	mov	sp, r7
    14ae:	b004      	add	sp, #16
    14b0:	bd80      	pop	{r7, pc}
	...

000014b4 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    14b8:	4b04      	ldr	r3, [pc, #16]	; (14cc <isr+0x18>)
    14ba:	78db      	ldrb	r3, [r3, #3]
    14bc:	b2db      	uxtb	r3, r3
    14be:	3301      	adds	r3, #1
    14c0:	b2da      	uxtb	r2, r3
    14c2:	4b02      	ldr	r3, [pc, #8]	; (14cc <isr+0x18>)
    14c4:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	46bd      	mov	sp, r7
    14ca:	bd80      	pop	{r7, pc}
    14cc:	200005b8 	.word	0x200005b8

000014d0 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    14d0:	b590      	push	{r4, r7, lr}
    14d2:	b083      	sub	sp, #12
    14d4:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    14d6:	1dfb      	adds	r3, r7, #7
    14d8:	2200      	movs	r2, #0
    14da:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    14dc:	4b14      	ldr	r3, [pc, #80]	; (1530 <hif_set_rx_done+0x60>)
    14de:	2200      	movs	r2, #0
    14e0:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    14e2:	2001      	movs	r0, #1
    14e4:	4b13      	ldr	r3, [pc, #76]	; (1534 <hif_set_rx_done+0x64>)
    14e6:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    14e8:	1dfc      	adds	r4, r7, #7
    14ea:	003b      	movs	r3, r7
    14ec:	4a12      	ldr	r2, [pc, #72]	; (1538 <hif_set_rx_done+0x68>)
    14ee:	0019      	movs	r1, r3
    14f0:	0010      	movs	r0, r2
    14f2:	4b12      	ldr	r3, [pc, #72]	; (153c <hif_set_rx_done+0x6c>)
    14f4:	4798      	blx	r3
    14f6:	0003      	movs	r3, r0
    14f8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    14fa:	1dfb      	adds	r3, r7, #7
    14fc:	781b      	ldrb	r3, [r3, #0]
    14fe:	b25b      	sxtb	r3, r3
    1500:	2b00      	cmp	r3, #0
    1502:	d10d      	bne.n	1520 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    1504:	683b      	ldr	r3, [r7, #0]
    1506:	2202      	movs	r2, #2
    1508:	4313      	orrs	r3, r2
    150a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    150c:	683b      	ldr	r3, [r7, #0]
    150e:	1dfc      	adds	r4, r7, #7
    1510:	4a09      	ldr	r2, [pc, #36]	; (1538 <hif_set_rx_done+0x68>)
    1512:	0019      	movs	r1, r3
    1514:	0010      	movs	r0, r2
    1516:	4b0a      	ldr	r3, [pc, #40]	; (1540 <hif_set_rx_done+0x70>)
    1518:	4798      	blx	r3
    151a:	0003      	movs	r3, r0
    151c:	7023      	strb	r3, [r4, #0]
    151e:	e000      	b.n	1522 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    1520:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    1522:	1dfb      	adds	r3, r7, #7
    1524:	781b      	ldrb	r3, [r3, #0]
    1526:	b25b      	sxtb	r3, r3

}
    1528:	0018      	movs	r0, r3
    152a:	46bd      	mov	sp, r7
    152c:	b003      	add	sp, #12
    152e:	bd90      	pop	{r4, r7, pc}
    1530:	200005b8 	.word	0x200005b8
    1534:	00000be9 	.word	0x00000be9
    1538:	00001070 	.word	0x00001070
    153c:	00003475 	.word	0x00003475
    1540:	00003499 	.word	0x00003499

00001544 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1544:	b580      	push	{r7, lr}
    1546:	b082      	sub	sp, #8
    1548:	af00      	add	r7, sp, #0
    154a:	603a      	str	r2, [r7, #0]
    154c:	1dfb      	adds	r3, r7, #7
    154e:	1c02      	adds	r2, r0, #0
    1550:	701a      	strb	r2, [r3, #0]
    1552:	1d3b      	adds	r3, r7, #4
    1554:	1c0a      	adds	r2, r1, #0
    1556:	801a      	strh	r2, [r3, #0]


}
    1558:	46c0      	nop			; (mov r8, r8)
    155a:	46bd      	mov	sp, r7
    155c:	b002      	add	sp, #8
    155e:	bd80      	pop	{r7, pc}

00001560 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    1560:	b590      	push	{r4, r7, lr}
    1562:	b083      	sub	sp, #12
    1564:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1566:	1dfb      	adds	r3, r7, #7
    1568:	2200      	movs	r2, #0
    156a:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    156c:	4b16      	ldr	r3, [pc, #88]	; (15c8 <hif_chip_wake+0x68>)
    156e:	789b      	ldrb	r3, [r3, #2]
    1570:	b2db      	uxtb	r3, r3
    1572:	2b00      	cmp	r3, #0
    1574:	d003      	beq.n	157e <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    1576:	1dfb      	adds	r3, r7, #7
    1578:	781b      	ldrb	r3, [r3, #0]
    157a:	b25b      	sxtb	r3, r3
    157c:	e01f      	b.n	15be <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    157e:	4b12      	ldr	r3, [pc, #72]	; (15c8 <hif_chip_wake+0x68>)
    1580:	785b      	ldrb	r3, [r3, #1]
    1582:	b2db      	uxtb	r3, r3
    1584:	2b00      	cmp	r3, #0
    1586:	d10e      	bne.n	15a6 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1588:	4b0f      	ldr	r3, [pc, #60]	; (15c8 <hif_chip_wake+0x68>)
    158a:	781b      	ldrb	r3, [r3, #0]
    158c:	b2db      	uxtb	r3, r3
    158e:	2b00      	cmp	r3, #0
    1590:	d009      	beq.n	15a6 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    1592:	1dfc      	adds	r4, r7, #7
    1594:	4b0d      	ldr	r3, [pc, #52]	; (15cc <hif_chip_wake+0x6c>)
    1596:	4798      	blx	r3
    1598:	0003      	movs	r3, r0
    159a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    159c:	1dfb      	adds	r3, r7, #7
    159e:	781b      	ldrb	r3, [r3, #0]
    15a0:	b25b      	sxtb	r3, r3
    15a2:	2b00      	cmp	r3, #0
    15a4:	d107      	bne.n	15b6 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    15a6:	4b08      	ldr	r3, [pc, #32]	; (15c8 <hif_chip_wake+0x68>)
    15a8:	785b      	ldrb	r3, [r3, #1]
    15aa:	b2db      	uxtb	r3, r3
    15ac:	3301      	adds	r3, #1
    15ae:	b2da      	uxtb	r2, r3
    15b0:	4b05      	ldr	r3, [pc, #20]	; (15c8 <hif_chip_wake+0x68>)
    15b2:	705a      	strb	r2, [r3, #1]
    15b4:	e000      	b.n	15b8 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    15b6:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    15b8:	1dfb      	adds	r3, r7, #7
    15ba:	781b      	ldrb	r3, [r3, #0]
    15bc:	b25b      	sxtb	r3, r3
}
    15be:	0018      	movs	r0, r3
    15c0:	46bd      	mov	sp, r7
    15c2:	b003      	add	sp, #12
    15c4:	bd90      	pop	{r4, r7, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	200005b8 	.word	0x200005b8
    15cc:	00002f49 	.word	0x00002f49

000015d0 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    15d4:	4b07      	ldr	r3, [pc, #28]	; (15f4 <hif_chip_sleep_sc+0x24>)
    15d6:	785b      	ldrb	r3, [r3, #1]
    15d8:	b2db      	uxtb	r3, r3
    15da:	2b00      	cmp	r3, #0
    15dc:	d006      	beq.n	15ec <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <hif_chip_sleep_sc+0x24>)
    15e0:	785b      	ldrb	r3, [r3, #1]
    15e2:	b2db      	uxtb	r3, r3
    15e4:	3b01      	subs	r3, #1
    15e6:	b2da      	uxtb	r2, r3
    15e8:	4b02      	ldr	r3, [pc, #8]	; (15f4 <hif_chip_sleep_sc+0x24>)
    15ea:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    15ec:	2300      	movs	r3, #0
}
    15ee:	0018      	movs	r0, r3
    15f0:	46bd      	mov	sp, r7
    15f2:	bd80      	pop	{r7, pc}
    15f4:	200005b8 	.word	0x200005b8

000015f8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    15f8:	b590      	push	{r4, r7, lr}
    15fa:	b083      	sub	sp, #12
    15fc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    15fe:	1dfb      	adds	r3, r7, #7
    1600:	2200      	movs	r2, #0
    1602:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    1604:	4b10      	ldr	r3, [pc, #64]	; (1648 <hif_chip_sleep+0x50>)
    1606:	785b      	ldrb	r3, [r3, #1]
    1608:	b2db      	uxtb	r3, r3
    160a:	2b00      	cmp	r3, #0
    160c:	d006      	beq.n	161c <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    160e:	4b0e      	ldr	r3, [pc, #56]	; (1648 <hif_chip_sleep+0x50>)
    1610:	785b      	ldrb	r3, [r3, #1]
    1612:	b2db      	uxtb	r3, r3
    1614:	3b01      	subs	r3, #1
    1616:	b2da      	uxtb	r2, r3
    1618:	4b0b      	ldr	r3, [pc, #44]	; (1648 <hif_chip_sleep+0x50>)
    161a:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    161c:	4b0a      	ldr	r3, [pc, #40]	; (1648 <hif_chip_sleep+0x50>)
    161e:	785b      	ldrb	r3, [r3, #1]
    1620:	b2db      	uxtb	r3, r3
    1622:	2b00      	cmp	r3, #0
    1624:	d109      	bne.n	163a <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1626:	4b08      	ldr	r3, [pc, #32]	; (1648 <hif_chip_sleep+0x50>)
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	b2db      	uxtb	r3, r3
    162c:	2b00      	cmp	r3, #0
    162e:	d004      	beq.n	163a <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    1630:	1dfc      	adds	r4, r7, #7
    1632:	4b06      	ldr	r3, [pc, #24]	; (164c <hif_chip_sleep+0x54>)
    1634:	4798      	blx	r3
    1636:	0003      	movs	r3, r0
    1638:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    163a:	1dfb      	adds	r3, r7, #7
    163c:	781b      	ldrb	r3, [r3, #0]
    163e:	b25b      	sxtb	r3, r3
}
    1640:	0018      	movs	r0, r3
    1642:	46bd      	mov	sp, r7
    1644:	b003      	add	sp, #12
    1646:	bd90      	pop	{r4, r7, pc}
    1648:	200005b8 	.word	0x200005b8
    164c:	00002e71 	.word	0x00002e71

00001650 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    1650:	b580      	push	{r7, lr}
    1652:	b082      	sub	sp, #8
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1658:	4b09      	ldr	r3, [pc, #36]	; (1680 <hif_init+0x30>)
    165a:	2228      	movs	r2, #40	; 0x28
    165c:	2100      	movs	r1, #0
    165e:	0018      	movs	r0, r3
    1660:	4b08      	ldr	r3, [pc, #32]	; (1684 <hif_init+0x34>)
    1662:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1664:	4b08      	ldr	r3, [pc, #32]	; (1688 <hif_init+0x38>)
    1666:	0018      	movs	r0, r3
    1668:	4b08      	ldr	r3, [pc, #32]	; (168c <hif_init+0x3c>)
    166a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    166c:	4b08      	ldr	r3, [pc, #32]	; (1690 <hif_init+0x40>)
    166e:	0019      	movs	r1, r3
    1670:	2003      	movs	r0, #3
    1672:	4b08      	ldr	r3, [pc, #32]	; (1694 <hif_init+0x44>)
    1674:	4798      	blx	r3
	return M2M_SUCCESS;
    1676:	2300      	movs	r3, #0
}
    1678:	0018      	movs	r0, r3
    167a:	46bd      	mov	sp, r7
    167c:	b002      	add	sp, #8
    167e:	bd80      	pop	{r7, pc}
    1680:	200005b8 	.word	0x200005b8
    1684:	00001439 	.word	0x00001439
    1688:	000014b5 	.word	0x000014b5
    168c:	00000b71 	.word	0x00000b71
    1690:	00001545 	.word	0x00001545
    1694:	0000210d 	.word	0x0000210d

00001698 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1698:	b590      	push	{r4, r7, lr}
    169a:	b089      	sub	sp, #36	; 0x24
    169c:	af00      	add	r7, sp, #0
    169e:	0004      	movs	r4, r0
    16a0:	0008      	movs	r0, r1
    16a2:	603a      	str	r2, [r7, #0]
    16a4:	0019      	movs	r1, r3
    16a6:	1dfb      	adds	r3, r7, #7
    16a8:	1c22      	adds	r2, r4, #0
    16aa:	701a      	strb	r2, [r3, #0]
    16ac:	1dbb      	adds	r3, r7, #6
    16ae:	1c02      	adds	r2, r0, #0
    16b0:	701a      	strb	r2, [r3, #0]
    16b2:	1d3b      	adds	r3, r7, #4
    16b4:	1c0a      	adds	r2, r1, #0
    16b6:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    16b8:	231f      	movs	r3, #31
    16ba:	18fb      	adds	r3, r7, r3
    16bc:	22ff      	movs	r2, #255	; 0xff
    16be:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    16c0:	1dbb      	adds	r3, r7, #6
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	227f      	movs	r2, #127	; 0x7f
    16c6:	4013      	ands	r3, r2
    16c8:	b2da      	uxtb	r2, r3
    16ca:	2318      	movs	r3, #24
    16cc:	18fb      	adds	r3, r7, r3
    16ce:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    16d0:	2318      	movs	r3, #24
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	1dfa      	adds	r2, r7, #7
    16d6:	7812      	ldrb	r2, [r2, #0]
    16d8:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    16da:	2318      	movs	r3, #24
    16dc:	18fb      	adds	r3, r7, r3
    16de:	2208      	movs	r2, #8
    16e0:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    16e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16e4:	2b00      	cmp	r3, #0
    16e6:	d011      	beq.n	170c <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    16e8:	2318      	movs	r3, #24
    16ea:	18fb      	adds	r3, r7, r3
    16ec:	885b      	ldrh	r3, [r3, #2]
    16ee:	b29a      	uxth	r2, r3
    16f0:	2338      	movs	r3, #56	; 0x38
    16f2:	18f9      	adds	r1, r7, r3
    16f4:	2334      	movs	r3, #52	; 0x34
    16f6:	18fb      	adds	r3, r7, r3
    16f8:	8809      	ldrh	r1, [r1, #0]
    16fa:	881b      	ldrh	r3, [r3, #0]
    16fc:	18cb      	adds	r3, r1, r3
    16fe:	b29b      	uxth	r3, r3
    1700:	18d3      	adds	r3, r2, r3
    1702:	b29a      	uxth	r2, r3
    1704:	2318      	movs	r3, #24
    1706:	18fb      	adds	r3, r7, r3
    1708:	805a      	strh	r2, [r3, #2]
    170a:	e00a      	b.n	1722 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    170c:	2318      	movs	r3, #24
    170e:	18fb      	adds	r3, r7, r3
    1710:	885b      	ldrh	r3, [r3, #2]
    1712:	b29a      	uxth	r2, r3
    1714:	1d3b      	adds	r3, r7, #4
    1716:	881b      	ldrh	r3, [r3, #0]
    1718:	18d3      	adds	r3, r2, r3
    171a:	b29a      	uxth	r2, r3
    171c:	2318      	movs	r3, #24
    171e:	18fb      	adds	r3, r7, r3
    1720:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    1722:	231f      	movs	r3, #31
    1724:	18fc      	adds	r4, r7, r3
    1726:	4bb0      	ldr	r3, [pc, #704]	; (19e8 <hif_send+0x350>)
    1728:	4798      	blx	r3
    172a:	0003      	movs	r3, r0
    172c:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    172e:	231f      	movs	r3, #31
    1730:	18fb      	adds	r3, r7, r3
    1732:	781b      	ldrb	r3, [r3, #0]
    1734:	b25b      	sxtb	r3, r3
    1736:	2b00      	cmp	r3, #0
    1738:	d000      	beq.n	173c <hif_send+0xa4>
    173a:	e127      	b.n	198c <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
    173c:	2300      	movs	r3, #0
    173e:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    1740:	230e      	movs	r3, #14
    1742:	18fb      	adds	r3, r7, r3
    1744:	2200      	movs	r2, #0
    1746:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    1748:	2300      	movs	r3, #0
    174a:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    174c:	1dfb      	adds	r3, r7, #7
    174e:	781a      	ldrb	r2, [r3, #0]
    1750:	697b      	ldr	r3, [r7, #20]
    1752:	4313      	orrs	r3, r2
    1754:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    1756:	1dbb      	adds	r3, r7, #6
    1758:	781b      	ldrb	r3, [r3, #0]
    175a:	021a      	lsls	r2, r3, #8
    175c:	697b      	ldr	r3, [r7, #20]
    175e:	4313      	orrs	r3, r2
    1760:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    1762:	2318      	movs	r3, #24
    1764:	18fb      	adds	r3, r7, r3
    1766:	885b      	ldrh	r3, [r3, #2]
    1768:	b29b      	uxth	r3, r3
    176a:	041a      	lsls	r2, r3, #16
    176c:	697b      	ldr	r3, [r7, #20]
    176e:	4313      	orrs	r3, r2
    1770:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1772:	697b      	ldr	r3, [r7, #20]
    1774:	221f      	movs	r2, #31
    1776:	18bc      	adds	r4, r7, r2
    1778:	4a9c      	ldr	r2, [pc, #624]	; (19ec <hif_send+0x354>)
    177a:	0019      	movs	r1, r3
    177c:	0010      	movs	r0, r2
    177e:	4b9c      	ldr	r3, [pc, #624]	; (19f0 <hif_send+0x358>)
    1780:	4798      	blx	r3
    1782:	0003      	movs	r3, r0
    1784:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1786:	231f      	movs	r3, #31
    1788:	18fb      	adds	r3, r7, r3
    178a:	781b      	ldrb	r3, [r3, #0]
    178c:	b25b      	sxtb	r3, r3
    178e:	2b00      	cmp	r3, #0
    1790:	d000      	beq.n	1794 <hif_send+0xfc>
    1792:	e115      	b.n	19c0 <hif_send+0x328>

		reg = 0UL;
    1794:	2300      	movs	r3, #0
    1796:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    1798:	697b      	ldr	r3, [r7, #20]
    179a:	2202      	movs	r2, #2
    179c:	4313      	orrs	r3, r2
    179e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    17a0:	697b      	ldr	r3, [r7, #20]
    17a2:	221f      	movs	r2, #31
    17a4:	18bc      	adds	r4, r7, r2
    17a6:	4a93      	ldr	r2, [pc, #588]	; (19f4 <hif_send+0x35c>)
    17a8:	0019      	movs	r1, r3
    17aa:	0010      	movs	r0, r2
    17ac:	4b90      	ldr	r3, [pc, #576]	; (19f0 <hif_send+0x358>)
    17ae:	4798      	blx	r3
    17b0:	0003      	movs	r3, r0
    17b2:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    17b4:	231f      	movs	r3, #31
    17b6:	18fb      	adds	r3, r7, r3
    17b8:	781b      	ldrb	r3, [r3, #0]
    17ba:	b25b      	sxtb	r3, r3
    17bc:	2b00      	cmp	r3, #0
    17be:	d000      	beq.n	17c2 <hif_send+0x12a>
    17c0:	e100      	b.n	19c4 <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    17c2:	2300      	movs	r3, #0
    17c4:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    17c6:	230e      	movs	r3, #14
    17c8:	18fb      	adds	r3, r7, r3
    17ca:	2200      	movs	r2, #0
    17cc:	801a      	strh	r2, [r3, #0]
    17ce:	e04f      	b.n	1870 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    17d0:	231f      	movs	r3, #31
    17d2:	18fc      	adds	r4, r7, r3
    17d4:	2314      	movs	r3, #20
    17d6:	18fb      	adds	r3, r7, r3
    17d8:	4a86      	ldr	r2, [pc, #536]	; (19f4 <hif_send+0x35c>)
    17da:	0019      	movs	r1, r3
    17dc:	0010      	movs	r0, r2
    17de:	4b86      	ldr	r3, [pc, #536]	; (19f8 <hif_send+0x360>)
    17e0:	4798      	blx	r3
    17e2:	0003      	movs	r3, r0
    17e4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    17e6:	231f      	movs	r3, #31
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	781b      	ldrb	r3, [r3, #0]
    17ec:	b25b      	sxtb	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d146      	bne.n	1880 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    17f2:	230e      	movs	r3, #14
    17f4:	18fb      	adds	r3, r7, r3
    17f6:	881b      	ldrh	r3, [r3, #0]
    17f8:	b29a      	uxth	r2, r3
    17fa:	23f4      	movs	r3, #244	; 0xf4
    17fc:	33ff      	adds	r3, #255	; 0xff
    17fe:	429a      	cmp	r2, r3
    1800:	d915      	bls.n	182e <hif_send+0x196>
				if(cnt < 501) {
    1802:	230e      	movs	r3, #14
    1804:	18fb      	adds	r3, r7, r3
    1806:	881b      	ldrh	r3, [r3, #0]
    1808:	b29a      	uxth	r2, r3
    180a:	23fa      	movs	r3, #250	; 0xfa
    180c:	005b      	lsls	r3, r3, #1
    180e:	429a      	cmp	r2, r3
    1810:	d80a      	bhi.n	1828 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    1812:	4b7a      	ldr	r3, [pc, #488]	; (19fc <hif_send+0x364>)
    1814:	0018      	movs	r0, r3
    1816:	4b7a      	ldr	r3, [pc, #488]	; (1a00 <hif_send+0x368>)
    1818:	4798      	blx	r3
    181a:	4b7a      	ldr	r3, [pc, #488]	; (1a04 <hif_send+0x36c>)
    181c:	0018      	movs	r0, r3
    181e:	4b7a      	ldr	r3, [pc, #488]	; (1a08 <hif_send+0x370>)
    1820:	4798      	blx	r3
    1822:	200d      	movs	r0, #13
    1824:	4b79      	ldr	r3, [pc, #484]	; (1a0c <hif_send+0x374>)
    1826:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    1828:	2001      	movs	r0, #1
    182a:	4b79      	ldr	r3, [pc, #484]	; (1a10 <hif_send+0x378>)
    182c:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    182e:	697b      	ldr	r3, [r7, #20]
    1830:	2202      	movs	r2, #2
    1832:	4013      	ands	r3, r2
    1834:	d113      	bne.n	185e <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    1836:	231f      	movs	r3, #31
    1838:	18fc      	adds	r4, r7, r3
    183a:	2310      	movs	r3, #16
    183c:	18fb      	adds	r3, r7, r3
    183e:	4a75      	ldr	r2, [pc, #468]	; (1a14 <hif_send+0x37c>)
    1840:	0019      	movs	r1, r3
    1842:	0010      	movs	r0, r2
    1844:	4b6c      	ldr	r3, [pc, #432]	; (19f8 <hif_send+0x360>)
    1846:	4798      	blx	r3
    1848:	0003      	movs	r3, r0
    184a:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    184c:	231f      	movs	r3, #31
    184e:	18fb      	adds	r3, r7, r3
    1850:	781b      	ldrb	r3, [r3, #0]
    1852:	b25b      	sxtb	r3, r3
    1854:	2b00      	cmp	r3, #0
    1856:	d015      	beq.n	1884 <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1858:	2300      	movs	r3, #0
    185a:	613b      	str	r3, [r7, #16]
					goto ERR1;
    185c:	e0b9      	b.n	19d2 <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    185e:	230e      	movs	r3, #14
    1860:	18fb      	adds	r3, r7, r3
    1862:	881b      	ldrh	r3, [r3, #0]
    1864:	b29b      	uxth	r3, r3
    1866:	3301      	adds	r3, #1
    1868:	b29a      	uxth	r2, r3
    186a:	230e      	movs	r3, #14
    186c:	18fb      	adds	r3, r7, r3
    186e:	801a      	strh	r2, [r3, #0]
    1870:	230e      	movs	r3, #14
    1872:	18fb      	adds	r3, r7, r3
    1874:	881b      	ldrh	r3, [r3, #0]
    1876:	b29b      	uxth	r3, r3
    1878:	4a67      	ldr	r2, [pc, #412]	; (1a18 <hif_send+0x380>)
    187a:	4293      	cmp	r3, r2
    187c:	d9a8      	bls.n	17d0 <hif_send+0x138>
    187e:	e002      	b.n	1886 <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    1880:	46c0      	nop			; (mov r8, r8)
    1882:	e000      	b.n	1886 <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    1884:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    1886:	693b      	ldr	r3, [r7, #16]
    1888:	2b00      	cmp	r3, #0
    188a:	d100      	bne.n	188e <hif_send+0x1f6>
    188c:	e073      	b.n	1976 <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    188e:	693b      	ldr	r3, [r7, #16]
    1890:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1892:	2318      	movs	r3, #24
    1894:	18fb      	adds	r3, r7, r3
    1896:	885b      	ldrh	r3, [r3, #2]
    1898:	b29a      	uxth	r2, r3
    189a:	2318      	movs	r3, #24
    189c:	18fb      	adds	r3, r7, r3
    189e:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    18a0:	68bb      	ldr	r3, [r7, #8]
    18a2:	221f      	movs	r2, #31
    18a4:	18bc      	adds	r4, r7, r2
    18a6:	2218      	movs	r2, #24
    18a8:	18b9      	adds	r1, r7, r2
    18aa:	2208      	movs	r2, #8
    18ac:	0018      	movs	r0, r3
    18ae:	4b5b      	ldr	r3, [pc, #364]	; (1a1c <hif_send+0x384>)
    18b0:	4798      	blx	r3
    18b2:	0003      	movs	r3, r0
    18b4:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    18b6:	231f      	movs	r3, #31
    18b8:	18fb      	adds	r3, r7, r3
    18ba:	781b      	ldrb	r3, [r3, #0]
    18bc:	b25b      	sxtb	r3, r3
    18be:	2b00      	cmp	r3, #0
    18c0:	d000      	beq.n	18c4 <hif_send+0x22c>
    18c2:	e081      	b.n	19c8 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    18c4:	68bb      	ldr	r3, [r7, #8]
    18c6:	3308      	adds	r3, #8
    18c8:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    18ca:	683b      	ldr	r3, [r7, #0]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d015      	beq.n	18fc <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    18d0:	68b8      	ldr	r0, [r7, #8]
    18d2:	1d3b      	adds	r3, r7, #4
    18d4:	881a      	ldrh	r2, [r3, #0]
    18d6:	231f      	movs	r3, #31
    18d8:	18fc      	adds	r4, r7, r3
    18da:	683b      	ldr	r3, [r7, #0]
    18dc:	0019      	movs	r1, r3
    18de:	4b4f      	ldr	r3, [pc, #316]	; (1a1c <hif_send+0x384>)
    18e0:	4798      	blx	r3
    18e2:	0003      	movs	r3, r0
    18e4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    18e6:	231f      	movs	r3, #31
    18e8:	18fb      	adds	r3, r7, r3
    18ea:	781b      	ldrb	r3, [r3, #0]
    18ec:	b25b      	sxtb	r3, r3
    18ee:	2b00      	cmp	r3, #0
    18f0:	d16c      	bne.n	19cc <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    18f2:	1d3b      	adds	r3, r7, #4
    18f4:	881a      	ldrh	r2, [r3, #0]
    18f6:	68bb      	ldr	r3, [r7, #8]
    18f8:	18d3      	adds	r3, r2, r3
    18fa:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    18fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    18fe:	2b00      	cmp	r3, #0
    1900:	d021      	beq.n	1946 <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    1902:	2338      	movs	r3, #56	; 0x38
    1904:	18fb      	adds	r3, r7, r3
    1906:	881a      	ldrh	r2, [r3, #0]
    1908:	1d3b      	adds	r3, r7, #4
    190a:	881b      	ldrh	r3, [r3, #0]
    190c:	1ad3      	subs	r3, r2, r3
    190e:	001a      	movs	r2, r3
    1910:	68bb      	ldr	r3, [r7, #8]
    1912:	18d3      	adds	r3, r2, r3
    1914:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1916:	68b8      	ldr	r0, [r7, #8]
    1918:	2334      	movs	r3, #52	; 0x34
    191a:	18fb      	adds	r3, r7, r3
    191c:	881a      	ldrh	r2, [r3, #0]
    191e:	231f      	movs	r3, #31
    1920:	18fc      	adds	r4, r7, r3
    1922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1924:	0019      	movs	r1, r3
    1926:	4b3d      	ldr	r3, [pc, #244]	; (1a1c <hif_send+0x384>)
    1928:	4798      	blx	r3
    192a:	0003      	movs	r3, r0
    192c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    192e:	231f      	movs	r3, #31
    1930:	18fb      	adds	r3, r7, r3
    1932:	781b      	ldrb	r3, [r3, #0]
    1934:	b25b      	sxtb	r3, r3
    1936:	2b00      	cmp	r3, #0
    1938:	d14a      	bne.n	19d0 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    193a:	2334      	movs	r3, #52	; 0x34
    193c:	18fb      	adds	r3, r7, r3
    193e:	881a      	ldrh	r2, [r3, #0]
    1940:	68bb      	ldr	r3, [r7, #8]
    1942:	18d3      	adds	r3, r2, r3
    1944:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    1946:	693b      	ldr	r3, [r7, #16]
    1948:	009b      	lsls	r3, r3, #2
    194a:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    194c:	697b      	ldr	r3, [r7, #20]
    194e:	2202      	movs	r2, #2
    1950:	4313      	orrs	r3, r2
    1952:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1954:	697b      	ldr	r3, [r7, #20]
    1956:	221f      	movs	r2, #31
    1958:	18bc      	adds	r4, r7, r2
    195a:	4a31      	ldr	r2, [pc, #196]	; (1a20 <hif_send+0x388>)
    195c:	0019      	movs	r1, r3
    195e:	0010      	movs	r0, r2
    1960:	4b23      	ldr	r3, [pc, #140]	; (19f0 <hif_send+0x358>)
    1962:	4798      	blx	r3
    1964:	0003      	movs	r3, r0
    1966:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1968:	231f      	movs	r3, #31
    196a:	18fb      	adds	r3, r7, r3
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	b25b      	sxtb	r3, r3
    1970:	2b00      	cmp	r3, #0
    1972:	d01a      	beq.n	19aa <hif_send+0x312>
    1974:	e02d      	b.n	19d2 <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    1976:	231f      	movs	r3, #31
    1978:	18fc      	adds	r4, r7, r3
    197a:	4b2a      	ldr	r3, [pc, #168]	; (1a24 <hif_send+0x38c>)
    197c:	4798      	blx	r3
    197e:	0003      	movs	r3, r0
    1980:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    1982:	231f      	movs	r3, #31
    1984:	18fb      	adds	r3, r7, r3
    1986:	22fd      	movs	r2, #253	; 0xfd
    1988:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    198a:	e024      	b.n	19d6 <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    198c:	23cb      	movs	r3, #203	; 0xcb
    198e:	005a      	lsls	r2, r3, #1
    1990:	4925      	ldr	r1, [pc, #148]	; (1a28 <hif_send+0x390>)
    1992:	4b26      	ldr	r3, [pc, #152]	; (1a2c <hif_send+0x394>)
    1994:	0018      	movs	r0, r3
    1996:	4b1a      	ldr	r3, [pc, #104]	; (1a00 <hif_send+0x368>)
    1998:	4798      	blx	r3
    199a:	4b25      	ldr	r3, [pc, #148]	; (1a30 <hif_send+0x398>)
    199c:	0018      	movs	r0, r3
    199e:	4b1a      	ldr	r3, [pc, #104]	; (1a08 <hif_send+0x370>)
    19a0:	4798      	blx	r3
    19a2:	200d      	movs	r0, #13
    19a4:	4b19      	ldr	r3, [pc, #100]	; (1a0c <hif_send+0x374>)
    19a6:	4798      	blx	r3
		goto ERR2;
    19a8:	e015      	b.n	19d6 <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    19aa:	231f      	movs	r3, #31
    19ac:	18fc      	adds	r4, r7, r3
    19ae:	4b1d      	ldr	r3, [pc, #116]	; (1a24 <hif_send+0x38c>)
    19b0:	4798      	blx	r3
    19b2:	0003      	movs	r3, r0
    19b4:	7023      	strb	r3, [r4, #0]
	return ret;
    19b6:	231f      	movs	r3, #31
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	781b      	ldrb	r3, [r3, #0]
    19bc:	b25b      	sxtb	r3, r3
    19be:	e00e      	b.n	19de <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    19c0:	46c0      	nop			; (mov r8, r8)
    19c2:	e006      	b.n	19d2 <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    19c4:	46c0      	nop			; (mov r8, r8)
    19c6:	e004      	b.n	19d2 <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    19c8:	46c0      	nop			; (mov r8, r8)
    19ca:	e002      	b.n	19d2 <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    19cc:	46c0      	nop			; (mov r8, r8)
    19ce:	e000      	b.n	19d2 <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    19d0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    19d2:	4b18      	ldr	r3, [pc, #96]	; (1a34 <hif_send+0x39c>)
    19d4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    19d6:	231f      	movs	r3, #31
    19d8:	18fb      	adds	r3, r7, r3
    19da:	781b      	ldrb	r3, [r3, #0]
    19dc:	b25b      	sxtb	r3, r3
}
    19de:	0018      	movs	r0, r3
    19e0:	46bd      	mov	sp, r7
    19e2:	b009      	add	sp, #36	; 0x24
    19e4:	bd90      	pop	{r4, r7, pc}
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	00001561 	.word	0x00001561
    19ec:	0000108c 	.word	0x0000108c
    19f0:	00003499 	.word	0x00003499
    19f4:	00001078 	.word	0x00001078
    19f8:	00003475 	.word	0x00003475
    19fc:	00012918 	.word	0x00012918
    1a00:	0000e7e5 	.word	0x0000e7e5
    1a04:	00012924 	.word	0x00012924
    1a08:	0000e901 	.word	0x0000e901
    1a0c:	0000e819 	.word	0x0000e819
    1a10:	00000b49 	.word	0x00000b49
    1a14:	00150400 	.word	0x00150400
    1a18:	000003e7 	.word	0x000003e7
    1a1c:	000035e1 	.word	0x000035e1
    1a20:	0000106c 	.word	0x0000106c
    1a24:	000015f9 	.word	0x000015f9
    1a28:	00012c2c 	.word	0x00012c2c
    1a2c:	00012934 	.word	0x00012934
    1a30:	00012948 	.word	0x00012948
    1a34:	000015d1 	.word	0x000015d1

00001a38 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1a38:	b590      	push	{r4, r7, lr}
    1a3a:	b087      	sub	sp, #28
    1a3c:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    1a3e:	230f      	movs	r3, #15
    1a40:	18fb      	adds	r3, r7, r3
    1a42:	2200      	movs	r2, #0
    1a44:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1a46:	230f      	movs	r3, #15
    1a48:	18fc      	adds	r4, r7, r3
    1a4a:	2308      	movs	r3, #8
    1a4c:	18fb      	adds	r3, r7, r3
    1a4e:	4ad6      	ldr	r2, [pc, #856]	; (1da8 <hif_isr+0x370>)
    1a50:	0019      	movs	r1, r3
    1a52:	0010      	movs	r0, r2
    1a54:	4bd5      	ldr	r3, [pc, #852]	; (1dac <hif_isr+0x374>)
    1a56:	4798      	blx	r3
    1a58:	0003      	movs	r3, r0
    1a5a:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1a5c:	230f      	movs	r3, #15
    1a5e:	18fb      	adds	r3, r7, r3
    1a60:	781b      	ldrb	r3, [r3, #0]
    1a62:	b25b      	sxtb	r3, r3
    1a64:	2b00      	cmp	r3, #0
    1a66:	d000      	beq.n	1a6a <hif_isr+0x32>
    1a68:	e217      	b.n	1e9a <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    1a6a:	68bb      	ldr	r3, [r7, #8]
    1a6c:	2201      	movs	r2, #1
    1a6e:	4013      	ands	r3, r2
    1a70:	d100      	bne.n	1a74 <hif_isr+0x3c>
    1a72:	e1fd      	b.n	1e70 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    1a74:	2000      	movs	r0, #0
    1a76:	4bce      	ldr	r3, [pc, #824]	; (1db0 <hif_isr+0x378>)
    1a78:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    1a7a:	68bb      	ldr	r3, [r7, #8]
    1a7c:	2201      	movs	r2, #1
    1a7e:	4393      	bics	r3, r2
    1a80:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1a82:	68bb      	ldr	r3, [r7, #8]
    1a84:	220f      	movs	r2, #15
    1a86:	18bc      	adds	r4, r7, r2
    1a88:	4ac7      	ldr	r2, [pc, #796]	; (1da8 <hif_isr+0x370>)
    1a8a:	0019      	movs	r1, r3
    1a8c:	0010      	movs	r0, r2
    1a8e:	4bc9      	ldr	r3, [pc, #804]	; (1db4 <hif_isr+0x37c>)
    1a90:	4798      	blx	r3
    1a92:	0003      	movs	r3, r0
    1a94:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1a96:	230f      	movs	r3, #15
    1a98:	18fb      	adds	r3, r7, r3
    1a9a:	781b      	ldrb	r3, [r3, #0]
    1a9c:	b25b      	sxtb	r3, r3
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d000      	beq.n	1aa4 <hif_isr+0x6c>
    1aa2:	e208      	b.n	1eb6 <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    1aa4:	4bc4      	ldr	r3, [pc, #784]	; (1db8 <hif_isr+0x380>)
    1aa6:	2201      	movs	r2, #1
    1aa8:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1aaa:	68bb      	ldr	r3, [r7, #8]
    1aac:	089b      	lsrs	r3, r3, #2
    1aae:	b29a      	uxth	r2, r3
    1ab0:	230c      	movs	r3, #12
    1ab2:	18fb      	adds	r3, r7, r3
    1ab4:	0512      	lsls	r2, r2, #20
    1ab6:	0d12      	lsrs	r2, r2, #20
    1ab8:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    1aba:	230c      	movs	r3, #12
    1abc:	18fb      	adds	r3, r7, r3
    1abe:	881b      	ldrh	r3, [r3, #0]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d100      	bne.n	1ac6 <hif_isr+0x8e>
    1ac4:	e1c1      	b.n	1e4a <hif_isr+0x412>
				uint32 address = 0;
    1ac6:	2300      	movs	r3, #0
    1ac8:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1aca:	230f      	movs	r3, #15
    1acc:	18fc      	adds	r4, r7, r3
    1ace:	003b      	movs	r3, r7
    1ad0:	4aba      	ldr	r2, [pc, #744]	; (1dbc <hif_isr+0x384>)
    1ad2:	0019      	movs	r1, r3
    1ad4:	0010      	movs	r0, r2
    1ad6:	4bb5      	ldr	r3, [pc, #724]	; (1dac <hif_isr+0x374>)
    1ad8:	4798      	blx	r3
    1ada:	0003      	movs	r3, r0
    1adc:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    1ade:	230f      	movs	r3, #15
    1ae0:	18fb      	adds	r3, r7, r3
    1ae2:	781b      	ldrb	r3, [r3, #0]
    1ae4:	b25b      	sxtb	r3, r3
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d012      	beq.n	1b10 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1aea:	23c8      	movs	r3, #200	; 0xc8
    1aec:	33ff      	adds	r3, #255	; 0xff
    1aee:	001a      	movs	r2, r3
    1af0:	49b3      	ldr	r1, [pc, #716]	; (1dc0 <hif_isr+0x388>)
    1af2:	4bb4      	ldr	r3, [pc, #720]	; (1dc4 <hif_isr+0x38c>)
    1af4:	0018      	movs	r0, r3
    1af6:	4bb4      	ldr	r3, [pc, #720]	; (1dc8 <hif_isr+0x390>)
    1af8:	4798      	blx	r3
    1afa:	4bb4      	ldr	r3, [pc, #720]	; (1dcc <hif_isr+0x394>)
    1afc:	0018      	movs	r0, r3
    1afe:	4bb4      	ldr	r3, [pc, #720]	; (1dd0 <hif_isr+0x398>)
    1b00:	4798      	blx	r3
    1b02:	200d      	movs	r0, #13
    1b04:	4bb3      	ldr	r3, [pc, #716]	; (1dd4 <hif_isr+0x39c>)
    1b06:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1b08:	2001      	movs	r0, #1
    1b0a:	4ba9      	ldr	r3, [pc, #676]	; (1db0 <hif_isr+0x378>)
    1b0c:	4798      	blx	r3
					goto ERR1;
    1b0e:	e1d3      	b.n	1eb8 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    1b10:	683a      	ldr	r2, [r7, #0]
    1b12:	4ba9      	ldr	r3, [pc, #676]	; (1db8 <hif_isr+0x380>)
    1b14:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    1b16:	230c      	movs	r3, #12
    1b18:	18fb      	adds	r3, r7, r3
    1b1a:	881a      	ldrh	r2, [r3, #0]
    1b1c:	4ba6      	ldr	r3, [pc, #664]	; (1db8 <hif_isr+0x380>)
    1b1e:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1b20:	683b      	ldr	r3, [r7, #0]
    1b22:	220f      	movs	r2, #15
    1b24:	18bc      	adds	r4, r7, r2
    1b26:	1d39      	adds	r1, r7, #4
    1b28:	2204      	movs	r2, #4
    1b2a:	0018      	movs	r0, r3
    1b2c:	4baa      	ldr	r3, [pc, #680]	; (1dd8 <hif_isr+0x3a0>)
    1b2e:	4798      	blx	r3
    1b30:	0003      	movs	r3, r0
    1b32:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1b34:	1d3b      	adds	r3, r7, #4
    1b36:	885b      	ldrh	r3, [r3, #2]
    1b38:	b29a      	uxth	r2, r3
    1b3a:	1d3b      	adds	r3, r7, #4
    1b3c:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    1b3e:	230f      	movs	r3, #15
    1b40:	18fb      	adds	r3, r7, r3
    1b42:	781b      	ldrb	r3, [r3, #0]
    1b44:	b25b      	sxtb	r3, r3
    1b46:	2b00      	cmp	r3, #0
    1b48:	d012      	beq.n	1b70 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    1b4a:	23d2      	movs	r3, #210	; 0xd2
    1b4c:	33ff      	adds	r3, #255	; 0xff
    1b4e:	001a      	movs	r2, r3
    1b50:	499b      	ldr	r1, [pc, #620]	; (1dc0 <hif_isr+0x388>)
    1b52:	4b9c      	ldr	r3, [pc, #624]	; (1dc4 <hif_isr+0x38c>)
    1b54:	0018      	movs	r0, r3
    1b56:	4b9c      	ldr	r3, [pc, #624]	; (1dc8 <hif_isr+0x390>)
    1b58:	4798      	blx	r3
    1b5a:	4ba0      	ldr	r3, [pc, #640]	; (1ddc <hif_isr+0x3a4>)
    1b5c:	0018      	movs	r0, r3
    1b5e:	4b9c      	ldr	r3, [pc, #624]	; (1dd0 <hif_isr+0x398>)
    1b60:	4798      	blx	r3
    1b62:	200d      	movs	r0, #13
    1b64:	4b9b      	ldr	r3, [pc, #620]	; (1dd4 <hif_isr+0x39c>)
    1b66:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1b68:	2001      	movs	r0, #1
    1b6a:	4b91      	ldr	r3, [pc, #580]	; (1db0 <hif_isr+0x378>)
    1b6c:	4798      	blx	r3
					goto ERR1;
    1b6e:	e1a3      	b.n	1eb8 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    1b70:	1d3b      	adds	r3, r7, #4
    1b72:	885b      	ldrh	r3, [r3, #2]
    1b74:	b29b      	uxth	r3, r3
    1b76:	220c      	movs	r2, #12
    1b78:	18ba      	adds	r2, r7, r2
    1b7a:	8812      	ldrh	r2, [r2, #0]
    1b7c:	429a      	cmp	r2, r3
    1b7e:	d02d      	beq.n	1bdc <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    1b80:	230c      	movs	r3, #12
    1b82:	18fb      	adds	r3, r7, r3
    1b84:	881b      	ldrh	r3, [r3, #0]
    1b86:	1d3a      	adds	r2, r7, #4
    1b88:	8852      	ldrh	r2, [r2, #2]
    1b8a:	b292      	uxth	r2, r2
    1b8c:	1a9b      	subs	r3, r3, r2
    1b8e:	2b04      	cmp	r3, #4
    1b90:	dd24      	ble.n	1bdc <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1b92:	23ed      	movs	r3, #237	; 0xed
    1b94:	005a      	lsls	r2, r3, #1
    1b96:	498a      	ldr	r1, [pc, #552]	; (1dc0 <hif_isr+0x388>)
    1b98:	4b8a      	ldr	r3, [pc, #552]	; (1dc4 <hif_isr+0x38c>)
    1b9a:	0018      	movs	r0, r3
    1b9c:	4b8a      	ldr	r3, [pc, #552]	; (1dc8 <hif_isr+0x390>)
    1b9e:	4798      	blx	r3
    1ba0:	230c      	movs	r3, #12
    1ba2:	18fb      	adds	r3, r7, r3
    1ba4:	8819      	ldrh	r1, [r3, #0]
    1ba6:	1d3b      	adds	r3, r7, #4
    1ba8:	885b      	ldrh	r3, [r3, #2]
    1baa:	b29b      	uxth	r3, r3
    1bac:	001a      	movs	r2, r3
    1bae:	1d3b      	adds	r3, r7, #4
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	b2db      	uxtb	r3, r3
    1bb4:	001c      	movs	r4, r3
    1bb6:	1d3b      	adds	r3, r7, #4
    1bb8:	785b      	ldrb	r3, [r3, #1]
    1bba:	b2db      	uxtb	r3, r3
    1bbc:	4888      	ldr	r0, [pc, #544]	; (1de0 <hif_isr+0x3a8>)
    1bbe:	9300      	str	r3, [sp, #0]
    1bc0:	0023      	movs	r3, r4
    1bc2:	4c81      	ldr	r4, [pc, #516]	; (1dc8 <hif_isr+0x390>)
    1bc4:	47a0      	blx	r4
    1bc6:	200d      	movs	r0, #13
    1bc8:	4b82      	ldr	r3, [pc, #520]	; (1dd4 <hif_isr+0x39c>)
    1bca:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    1bcc:	2001      	movs	r0, #1
    1bce:	4b78      	ldr	r3, [pc, #480]	; (1db0 <hif_isr+0x378>)
    1bd0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1bd2:	230f      	movs	r3, #15
    1bd4:	18fb      	adds	r3, r7, r3
    1bd6:	22fa      	movs	r2, #250	; 0xfa
    1bd8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    1bda:	e16d      	b.n	1eb8 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1bdc:	1d3b      	adds	r3, r7, #4
    1bde:	781b      	ldrb	r3, [r3, #0]
    1be0:	b2db      	uxtb	r3, r3
    1be2:	2b01      	cmp	r3, #1
    1be4:	d120      	bne.n	1c28 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    1be6:	4b74      	ldr	r3, [pc, #464]	; (1db8 <hif_isr+0x380>)
    1be8:	68db      	ldr	r3, [r3, #12]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d00d      	beq.n	1c0a <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1bee:	4b72      	ldr	r3, [pc, #456]	; (1db8 <hif_isr+0x380>)
    1bf0:	68db      	ldr	r3, [r3, #12]
    1bf2:	1d3a      	adds	r2, r7, #4
    1bf4:	7852      	ldrb	r2, [r2, #1]
    1bf6:	b2d0      	uxtb	r0, r2
    1bf8:	1d3a      	adds	r2, r7, #4
    1bfa:	8852      	ldrh	r2, [r2, #2]
    1bfc:	b292      	uxth	r2, r2
    1bfe:	3a08      	subs	r2, #8
    1c00:	b291      	uxth	r1, r2
    1c02:	683a      	ldr	r2, [r7, #0]
    1c04:	3208      	adds	r2, #8
    1c06:	4798      	blx	r3
    1c08:	e0fe      	b.n	1e08 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    1c0a:	23f3      	movs	r3, #243	; 0xf3
    1c0c:	005a      	lsls	r2, r3, #1
    1c0e:	496c      	ldr	r1, [pc, #432]	; (1dc0 <hif_isr+0x388>)
    1c10:	4b6c      	ldr	r3, [pc, #432]	; (1dc4 <hif_isr+0x38c>)
    1c12:	0018      	movs	r0, r3
    1c14:	4b6c      	ldr	r3, [pc, #432]	; (1dc8 <hif_isr+0x390>)
    1c16:	4798      	blx	r3
    1c18:	4b72      	ldr	r3, [pc, #456]	; (1de4 <hif_isr+0x3ac>)
    1c1a:	0018      	movs	r0, r3
    1c1c:	4b6c      	ldr	r3, [pc, #432]	; (1dd0 <hif_isr+0x398>)
    1c1e:	4798      	blx	r3
    1c20:	200d      	movs	r0, #13
    1c22:	4b6c      	ldr	r3, [pc, #432]	; (1dd4 <hif_isr+0x39c>)
    1c24:	4798      	blx	r3
    1c26:	e0ef      	b.n	1e08 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1c28:	1d3b      	adds	r3, r7, #4
    1c2a:	781b      	ldrb	r3, [r3, #0]
    1c2c:	b2db      	uxtb	r3, r3
    1c2e:	2b02      	cmp	r3, #2
    1c30:	d120      	bne.n	1c74 <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    1c32:	4b61      	ldr	r3, [pc, #388]	; (1db8 <hif_isr+0x380>)
    1c34:	691b      	ldr	r3, [r3, #16]
    1c36:	2b00      	cmp	r3, #0
    1c38:	d00d      	beq.n	1c56 <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1c3a:	4b5f      	ldr	r3, [pc, #380]	; (1db8 <hif_isr+0x380>)
    1c3c:	691b      	ldr	r3, [r3, #16]
    1c3e:	1d3a      	adds	r2, r7, #4
    1c40:	7852      	ldrb	r2, [r2, #1]
    1c42:	b2d0      	uxtb	r0, r2
    1c44:	1d3a      	adds	r2, r7, #4
    1c46:	8852      	ldrh	r2, [r2, #2]
    1c48:	b292      	uxth	r2, r2
    1c4a:	3a08      	subs	r2, #8
    1c4c:	b291      	uxth	r1, r2
    1c4e:	683a      	ldr	r2, [r7, #0]
    1c50:	3208      	adds	r2, #8
    1c52:	4798      	blx	r3
    1c54:	e0d8      	b.n	1e08 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    1c56:	23f7      	movs	r3, #247	; 0xf7
    1c58:	005a      	lsls	r2, r3, #1
    1c5a:	4959      	ldr	r1, [pc, #356]	; (1dc0 <hif_isr+0x388>)
    1c5c:	4b59      	ldr	r3, [pc, #356]	; (1dc4 <hif_isr+0x38c>)
    1c5e:	0018      	movs	r0, r3
    1c60:	4b59      	ldr	r3, [pc, #356]	; (1dc8 <hif_isr+0x390>)
    1c62:	4798      	blx	r3
    1c64:	4b60      	ldr	r3, [pc, #384]	; (1de8 <hif_isr+0x3b0>)
    1c66:	0018      	movs	r0, r3
    1c68:	4b59      	ldr	r3, [pc, #356]	; (1dd0 <hif_isr+0x398>)
    1c6a:	4798      	blx	r3
    1c6c:	200d      	movs	r0, #13
    1c6e:	4b59      	ldr	r3, [pc, #356]	; (1dd4 <hif_isr+0x39c>)
    1c70:	4798      	blx	r3
    1c72:	e0c9      	b.n	1e08 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1c74:	1d3b      	adds	r3, r7, #4
    1c76:	781b      	ldrb	r3, [r3, #0]
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	2b04      	cmp	r3, #4
    1c7c:	d120      	bne.n	1cc0 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    1c7e:	4b4e      	ldr	r3, [pc, #312]	; (1db8 <hif_isr+0x380>)
    1c80:	695b      	ldr	r3, [r3, #20]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d00d      	beq.n	1ca2 <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1c86:	4b4c      	ldr	r3, [pc, #304]	; (1db8 <hif_isr+0x380>)
    1c88:	695b      	ldr	r3, [r3, #20]
    1c8a:	1d3a      	adds	r2, r7, #4
    1c8c:	7852      	ldrb	r2, [r2, #1]
    1c8e:	b2d0      	uxtb	r0, r2
    1c90:	1d3a      	adds	r2, r7, #4
    1c92:	8852      	ldrh	r2, [r2, #2]
    1c94:	b292      	uxth	r2, r2
    1c96:	3a08      	subs	r2, #8
    1c98:	b291      	uxth	r1, r2
    1c9a:	683a      	ldr	r2, [r7, #0]
    1c9c:	3208      	adds	r2, #8
    1c9e:	4798      	blx	r3
    1ca0:	e0b2      	b.n	1e08 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    1ca2:	23fb      	movs	r3, #251	; 0xfb
    1ca4:	005a      	lsls	r2, r3, #1
    1ca6:	4946      	ldr	r1, [pc, #280]	; (1dc0 <hif_isr+0x388>)
    1ca8:	4b46      	ldr	r3, [pc, #280]	; (1dc4 <hif_isr+0x38c>)
    1caa:	0018      	movs	r0, r3
    1cac:	4b46      	ldr	r3, [pc, #280]	; (1dc8 <hif_isr+0x390>)
    1cae:	4798      	blx	r3
    1cb0:	4b4e      	ldr	r3, [pc, #312]	; (1dec <hif_isr+0x3b4>)
    1cb2:	0018      	movs	r0, r3
    1cb4:	4b46      	ldr	r3, [pc, #280]	; (1dd0 <hif_isr+0x398>)
    1cb6:	4798      	blx	r3
    1cb8:	200d      	movs	r0, #13
    1cba:	4b46      	ldr	r3, [pc, #280]	; (1dd4 <hif_isr+0x39c>)
    1cbc:	4798      	blx	r3
    1cbe:	e0a3      	b.n	1e08 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1cc0:	1d3b      	adds	r3, r7, #4
    1cc2:	781b      	ldrb	r3, [r3, #0]
    1cc4:	b2db      	uxtb	r3, r3
    1cc6:	2b06      	cmp	r3, #6
    1cc8:	d11f      	bne.n	1d0a <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    1cca:	4b3b      	ldr	r3, [pc, #236]	; (1db8 <hif_isr+0x380>)
    1ccc:	6a1b      	ldr	r3, [r3, #32]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d00d      	beq.n	1cee <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1cd2:	4b39      	ldr	r3, [pc, #228]	; (1db8 <hif_isr+0x380>)
    1cd4:	6a1b      	ldr	r3, [r3, #32]
    1cd6:	1d3a      	adds	r2, r7, #4
    1cd8:	7852      	ldrb	r2, [r2, #1]
    1cda:	b2d0      	uxtb	r0, r2
    1cdc:	1d3a      	adds	r2, r7, #4
    1cde:	8852      	ldrh	r2, [r2, #2]
    1ce0:	b292      	uxth	r2, r2
    1ce2:	3a08      	subs	r2, #8
    1ce4:	b291      	uxth	r1, r2
    1ce6:	683a      	ldr	r2, [r7, #0]
    1ce8:	3208      	adds	r2, #8
    1cea:	4798      	blx	r3
    1cec:	e08c      	b.n	1e08 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    1cee:	4a40      	ldr	r2, [pc, #256]	; (1df0 <hif_isr+0x3b8>)
    1cf0:	4933      	ldr	r1, [pc, #204]	; (1dc0 <hif_isr+0x388>)
    1cf2:	4b34      	ldr	r3, [pc, #208]	; (1dc4 <hif_isr+0x38c>)
    1cf4:	0018      	movs	r0, r3
    1cf6:	4b34      	ldr	r3, [pc, #208]	; (1dc8 <hif_isr+0x390>)
    1cf8:	4798      	blx	r3
    1cfa:	4b3e      	ldr	r3, [pc, #248]	; (1df4 <hif_isr+0x3bc>)
    1cfc:	0018      	movs	r0, r3
    1cfe:	4b34      	ldr	r3, [pc, #208]	; (1dd0 <hif_isr+0x398>)
    1d00:	4798      	blx	r3
    1d02:	200d      	movs	r0, #13
    1d04:	4b33      	ldr	r3, [pc, #204]	; (1dd4 <hif_isr+0x39c>)
    1d06:	4798      	blx	r3
    1d08:	e07e      	b.n	1e08 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1d0a:	1d3b      	adds	r3, r7, #4
    1d0c:	781b      	ldrb	r3, [r3, #0]
    1d0e:	b2db      	uxtb	r3, r3
    1d10:	2b07      	cmp	r3, #7
    1d12:	d11f      	bne.n	1d54 <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    1d14:	4b28      	ldr	r3, [pc, #160]	; (1db8 <hif_isr+0x380>)
    1d16:	699b      	ldr	r3, [r3, #24]
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d00d      	beq.n	1d38 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1d1c:	4b26      	ldr	r3, [pc, #152]	; (1db8 <hif_isr+0x380>)
    1d1e:	699b      	ldr	r3, [r3, #24]
    1d20:	1d3a      	adds	r2, r7, #4
    1d22:	7852      	ldrb	r2, [r2, #1]
    1d24:	b2d0      	uxtb	r0, r2
    1d26:	1d3a      	adds	r2, r7, #4
    1d28:	8852      	ldrh	r2, [r2, #2]
    1d2a:	b292      	uxth	r2, r2
    1d2c:	3a08      	subs	r2, #8
    1d2e:	b291      	uxth	r1, r2
    1d30:	683a      	ldr	r2, [r7, #0]
    1d32:	3208      	adds	r2, #8
    1d34:	4798      	blx	r3
    1d36:	e067      	b.n	1e08 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    1d38:	4a2f      	ldr	r2, [pc, #188]	; (1df8 <hif_isr+0x3c0>)
    1d3a:	4921      	ldr	r1, [pc, #132]	; (1dc0 <hif_isr+0x388>)
    1d3c:	4b21      	ldr	r3, [pc, #132]	; (1dc4 <hif_isr+0x38c>)
    1d3e:	0018      	movs	r0, r3
    1d40:	4b21      	ldr	r3, [pc, #132]	; (1dc8 <hif_isr+0x390>)
    1d42:	4798      	blx	r3
    1d44:	4b2d      	ldr	r3, [pc, #180]	; (1dfc <hif_isr+0x3c4>)
    1d46:	0018      	movs	r0, r3
    1d48:	4b21      	ldr	r3, [pc, #132]	; (1dd0 <hif_isr+0x398>)
    1d4a:	4798      	blx	r3
    1d4c:	200d      	movs	r0, #13
    1d4e:	4b21      	ldr	r3, [pc, #132]	; (1dd4 <hif_isr+0x39c>)
    1d50:	4798      	blx	r3
    1d52:	e059      	b.n	1e08 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1d54:	1d3b      	adds	r3, r7, #4
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	b2db      	uxtb	r3, r3
    1d5a:	2b05      	cmp	r3, #5
    1d5c:	d111      	bne.n	1d82 <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    1d5e:	4b16      	ldr	r3, [pc, #88]	; (1db8 <hif_isr+0x380>)
    1d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d62:	2b00      	cmp	r3, #0
    1d64:	d050      	beq.n	1e08 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1d66:	4b14      	ldr	r3, [pc, #80]	; (1db8 <hif_isr+0x380>)
    1d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d6a:	1d3a      	adds	r2, r7, #4
    1d6c:	7852      	ldrb	r2, [r2, #1]
    1d6e:	b2d0      	uxtb	r0, r2
    1d70:	1d3a      	adds	r2, r7, #4
    1d72:	8852      	ldrh	r2, [r2, #2]
    1d74:	b292      	uxth	r2, r2
    1d76:	3a08      	subs	r2, #8
    1d78:	b291      	uxth	r1, r2
    1d7a:	683a      	ldr	r2, [r7, #0]
    1d7c:	3208      	adds	r2, #8
    1d7e:	4798      	blx	r3
    1d80:	e042      	b.n	1e08 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    1d82:	4a1f      	ldr	r2, [pc, #124]	; (1e00 <hif_isr+0x3c8>)
    1d84:	490e      	ldr	r1, [pc, #56]	; (1dc0 <hif_isr+0x388>)
    1d86:	4b0f      	ldr	r3, [pc, #60]	; (1dc4 <hif_isr+0x38c>)
    1d88:	0018      	movs	r0, r3
    1d8a:	4b0f      	ldr	r3, [pc, #60]	; (1dc8 <hif_isr+0x390>)
    1d8c:	4798      	blx	r3
    1d8e:	4b1d      	ldr	r3, [pc, #116]	; (1e04 <hif_isr+0x3cc>)
    1d90:	0018      	movs	r0, r3
    1d92:	4b0f      	ldr	r3, [pc, #60]	; (1dd0 <hif_isr+0x398>)
    1d94:	4798      	blx	r3
    1d96:	200d      	movs	r0, #13
    1d98:	4b0e      	ldr	r3, [pc, #56]	; (1dd4 <hif_isr+0x39c>)
    1d9a:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1d9c:	230f      	movs	r3, #15
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	22fa      	movs	r2, #250	; 0xfa
    1da2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    1da4:	e088      	b.n	1eb8 <hif_isr+0x480>
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	00001070 	.word	0x00001070
    1dac:	00003475 	.word	0x00003475
    1db0:	00000be9 	.word	0x00000be9
    1db4:	00003499 	.word	0x00003499
    1db8:	200005b8 	.word	0x200005b8
    1dbc:	00001084 	.word	0x00001084
    1dc0:	00012c38 	.word	0x00012c38
    1dc4:	00012934 	.word	0x00012934
    1dc8:	0000e7e5 	.word	0x0000e7e5
    1dcc:	00012964 	.word	0x00012964
    1dd0:	0000e901 	.word	0x0000e901
    1dd4:	0000e819 	.word	0x0000e819
    1dd8:	000034e9 	.word	0x000034e9
    1ddc:	00012988 	.word	0x00012988
    1de0:	000129a0 	.word	0x000129a0
    1de4:	000129e0 	.word	0x000129e0
    1de8:	00012a00 	.word	0x00012a00
    1dec:	00012a24 	.word	0x00012a24
    1df0:	000001ff 	.word	0x000001ff
    1df4:	00012a44 	.word	0x00012a44
    1df8:	00000206 	.word	0x00000206
    1dfc:	00012a68 	.word	0x00012a68
    1e00:	0000020f 	.word	0x0000020f
    1e04:	00012a8c 	.word	0x00012a8c
				}
				if(gstrHifCxt.u8HifRXDone)
    1e08:	4b2f      	ldr	r3, [pc, #188]	; (1ec8 <hif_isr+0x490>)
    1e0a:	789b      	ldrb	r3, [r3, #2]
    1e0c:	b2db      	uxtb	r3, r3
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d052      	beq.n	1eb8 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1e12:	4a2e      	ldr	r2, [pc, #184]	; (1ecc <hif_isr+0x494>)
    1e14:	492e      	ldr	r1, [pc, #184]	; (1ed0 <hif_isr+0x498>)
    1e16:	4b2f      	ldr	r3, [pc, #188]	; (1ed4 <hif_isr+0x49c>)
    1e18:	0018      	movs	r0, r3
    1e1a:	4b2f      	ldr	r3, [pc, #188]	; (1ed8 <hif_isr+0x4a0>)
    1e1c:	4798      	blx	r3
    1e1e:	1d3b      	adds	r3, r7, #4
    1e20:	781b      	ldrb	r3, [r3, #0]
    1e22:	b2db      	uxtb	r3, r3
    1e24:	0019      	movs	r1, r3
    1e26:	1d3b      	adds	r3, r7, #4
    1e28:	785b      	ldrb	r3, [r3, #1]
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	001a      	movs	r2, r3
    1e2e:	4b2b      	ldr	r3, [pc, #172]	; (1edc <hif_isr+0x4a4>)
    1e30:	0018      	movs	r0, r3
    1e32:	4b29      	ldr	r3, [pc, #164]	; (1ed8 <hif_isr+0x4a0>)
    1e34:	4798      	blx	r3
    1e36:	200d      	movs	r0, #13
    1e38:	4b29      	ldr	r3, [pc, #164]	; (1ee0 <hif_isr+0x4a8>)
    1e3a:	4798      	blx	r3
					ret = hif_set_rx_done();
    1e3c:	230f      	movs	r3, #15
    1e3e:	18fc      	adds	r4, r7, r3
    1e40:	4b28      	ldr	r3, [pc, #160]	; (1ee4 <hif_isr+0x4ac>)
    1e42:	4798      	blx	r3
    1e44:	0003      	movs	r3, r0
    1e46:	7023      	strb	r3, [r4, #0]
    1e48:	e036      	b.n	1eb8 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    1e4a:	2387      	movs	r3, #135	; 0x87
    1e4c:	009a      	lsls	r2, r3, #2
    1e4e:	4920      	ldr	r1, [pc, #128]	; (1ed0 <hif_isr+0x498>)
    1e50:	4b20      	ldr	r3, [pc, #128]	; (1ed4 <hif_isr+0x49c>)
    1e52:	0018      	movs	r0, r3
    1e54:	4b20      	ldr	r3, [pc, #128]	; (1ed8 <hif_isr+0x4a0>)
    1e56:	4798      	blx	r3
    1e58:	4b23      	ldr	r3, [pc, #140]	; (1ee8 <hif_isr+0x4b0>)
    1e5a:	0018      	movs	r0, r3
    1e5c:	4b23      	ldr	r3, [pc, #140]	; (1eec <hif_isr+0x4b4>)
    1e5e:	4798      	blx	r3
    1e60:	200d      	movs	r0, #13
    1e62:	4b1f      	ldr	r3, [pc, #124]	; (1ee0 <hif_isr+0x4a8>)
    1e64:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1e66:	230f      	movs	r3, #15
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	22fe      	movs	r2, #254	; 0xfe
    1e6c:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    1e6e:	e023      	b.n	1eb8 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    1e70:	2389      	movs	r3, #137	; 0x89
    1e72:	009a      	lsls	r2, r3, #2
    1e74:	4916      	ldr	r1, [pc, #88]	; (1ed0 <hif_isr+0x498>)
    1e76:	4b17      	ldr	r3, [pc, #92]	; (1ed4 <hif_isr+0x49c>)
    1e78:	0018      	movs	r0, r3
    1e7a:	4b17      	ldr	r3, [pc, #92]	; (1ed8 <hif_isr+0x4a0>)
    1e7c:	4798      	blx	r3
    1e7e:	68ba      	ldr	r2, [r7, #8]
    1e80:	4b1b      	ldr	r3, [pc, #108]	; (1ef0 <hif_isr+0x4b8>)
    1e82:	0011      	movs	r1, r2
    1e84:	0018      	movs	r0, r3
    1e86:	4b14      	ldr	r3, [pc, #80]	; (1ed8 <hif_isr+0x4a0>)
    1e88:	4798      	blx	r3
    1e8a:	200d      	movs	r0, #13
    1e8c:	4b14      	ldr	r3, [pc, #80]	; (1ee0 <hif_isr+0x4a8>)
    1e8e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1e90:	230f      	movs	r3, #15
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	22f4      	movs	r2, #244	; 0xf4
    1e96:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1e98:	e00e      	b.n	1eb8 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1e9a:	4a16      	ldr	r2, [pc, #88]	; (1ef4 <hif_isr+0x4bc>)
    1e9c:	490c      	ldr	r1, [pc, #48]	; (1ed0 <hif_isr+0x498>)
    1e9e:	4b0d      	ldr	r3, [pc, #52]	; (1ed4 <hif_isr+0x49c>)
    1ea0:	0018      	movs	r0, r3
    1ea2:	4b0d      	ldr	r3, [pc, #52]	; (1ed8 <hif_isr+0x4a0>)
    1ea4:	4798      	blx	r3
    1ea6:	4b14      	ldr	r3, [pc, #80]	; (1ef8 <hif_isr+0x4c0>)
    1ea8:	0018      	movs	r0, r3
    1eaa:	4b10      	ldr	r3, [pc, #64]	; (1eec <hif_isr+0x4b4>)
    1eac:	4798      	blx	r3
    1eae:	200d      	movs	r0, #13
    1eb0:	4b0b      	ldr	r3, [pc, #44]	; (1ee0 <hif_isr+0x4a8>)
    1eb2:	4798      	blx	r3
		goto ERR1;
    1eb4:	e000      	b.n	1eb8 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    1eb6:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    1eb8:	230f      	movs	r3, #15
    1eba:	18fb      	adds	r3, r7, r3
    1ebc:	781b      	ldrb	r3, [r3, #0]
    1ebe:	b25b      	sxtb	r3, r3
}
    1ec0:	0018      	movs	r0, r3
    1ec2:	46bd      	mov	sp, r7
    1ec4:	b005      	add	sp, #20
    1ec6:	bd90      	pop	{r4, r7, pc}
    1ec8:	200005b8 	.word	0x200005b8
    1ecc:	00000215 	.word	0x00000215
    1ed0:	00012c38 	.word	0x00012c38
    1ed4:	00012934 	.word	0x00012934
    1ed8:	0000e7e5 	.word	0x0000e7e5
    1edc:	00012aa4 	.word	0x00012aa4
    1ee0:	0000e819 	.word	0x0000e819
    1ee4:	000014d1 	.word	0x000014d1
    1ee8:	00012ad0 	.word	0x00012ad0
    1eec:	0000e901 	.word	0x0000e901
    1ef0:	00012ae4 	.word	0x00012ae4
    1ef4:	0000022d 	.word	0x0000022d
    1ef8:	00012b00 	.word	0x00012b00

00001efc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1efc:	b590      	push	{r4, r7, lr}
    1efe:	b083      	sub	sp, #12
    1f00:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    1f02:	1dfb      	adds	r3, r7, #7
    1f04:	2200      	movs	r2, #0
    1f06:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    1f08:	e023      	b.n	1f52 <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1f0a:	4b18      	ldr	r3, [pc, #96]	; (1f6c <hif_handle_isr+0x70>)
    1f0c:	78db      	ldrb	r3, [r3, #3]
    1f0e:	b2db      	uxtb	r3, r3
    1f10:	3b01      	subs	r3, #1
    1f12:	b2da      	uxtb	r2, r3
    1f14:	4b15      	ldr	r3, [pc, #84]	; (1f6c <hif_handle_isr+0x70>)
    1f16:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    1f18:	1dfc      	adds	r4, r7, #7
    1f1a:	4b15      	ldr	r3, [pc, #84]	; (1f70 <hif_handle_isr+0x74>)
    1f1c:	4798      	blx	r3
    1f1e:	0003      	movs	r3, r0
    1f20:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    1f22:	1dfb      	adds	r3, r7, #7
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	b25b      	sxtb	r3, r3
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d100      	bne.n	1f2e <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    1f2c:	e011      	b.n	1f52 <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1f2e:	4a11      	ldr	r2, [pc, #68]	; (1f74 <hif_handle_isr+0x78>)
    1f30:	4911      	ldr	r1, [pc, #68]	; (1f78 <hif_handle_isr+0x7c>)
    1f32:	4b12      	ldr	r3, [pc, #72]	; (1f7c <hif_handle_isr+0x80>)
    1f34:	0018      	movs	r0, r3
    1f36:	4b12      	ldr	r3, [pc, #72]	; (1f80 <hif_handle_isr+0x84>)
    1f38:	4798      	blx	r3
    1f3a:	1dfb      	adds	r3, r7, #7
    1f3c:	2200      	movs	r2, #0
    1f3e:	569a      	ldrsb	r2, [r3, r2]
    1f40:	4b10      	ldr	r3, [pc, #64]	; (1f84 <hif_handle_isr+0x88>)
    1f42:	0011      	movs	r1, r2
    1f44:	0018      	movs	r0, r3
    1f46:	4b0e      	ldr	r3, [pc, #56]	; (1f80 <hif_handle_isr+0x84>)
    1f48:	4798      	blx	r3
    1f4a:	200d      	movs	r0, #13
    1f4c:	4b0e      	ldr	r3, [pc, #56]	; (1f88 <hif_handle_isr+0x8c>)
    1f4e:	4798      	blx	r3
			ret = hif_isr();
    1f50:	e7e2      	b.n	1f18 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    1f52:	4b06      	ldr	r3, [pc, #24]	; (1f6c <hif_handle_isr+0x70>)
    1f54:	78db      	ldrb	r3, [r3, #3]
    1f56:	b2db      	uxtb	r3, r3
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d1d6      	bne.n	1f0a <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    1f5c:	1dfb      	adds	r3, r7, #7
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	b25b      	sxtb	r3, r3
}
    1f62:	0018      	movs	r0, r3
    1f64:	46bd      	mov	sp, r7
    1f66:	b003      	add	sp, #12
    1f68:	bd90      	pop	{r4, r7, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	200005b8 	.word	0x200005b8
    1f70:	00001a39 	.word	0x00001a39
    1f74:	0000024a 	.word	0x0000024a
    1f78:	00012c40 	.word	0x00012c40
    1f7c:	00012934 	.word	0x00012934
    1f80:	0000e7e5 	.word	0x0000e7e5
    1f84:	00012b24 	.word	0x00012b24
    1f88:	0000e819 	.word	0x0000e819

00001f8c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1f8c:	b590      	push	{r4, r7, lr}
    1f8e:	b087      	sub	sp, #28
    1f90:	af00      	add	r7, sp, #0
    1f92:	60f8      	str	r0, [r7, #12]
    1f94:	60b9      	str	r1, [r7, #8]
    1f96:	0019      	movs	r1, r3
    1f98:	1dbb      	adds	r3, r7, #6
    1f9a:	801a      	strh	r2, [r3, #0]
    1f9c:	1d7b      	adds	r3, r7, #5
    1f9e:	1c0a      	adds	r2, r1, #0
    1fa0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    1fa2:	2317      	movs	r3, #23
    1fa4:	18fb      	adds	r3, r7, r3
    1fa6:	2200      	movs	r2, #0
    1fa8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1faa:	68fb      	ldr	r3, [r7, #12]
    1fac:	2b00      	cmp	r3, #0
    1fae:	d006      	beq.n	1fbe <hif_receive+0x32>
    1fb0:	68bb      	ldr	r3, [r7, #8]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d003      	beq.n	1fbe <hif_receive+0x32>
    1fb6:	1dbb      	adds	r3, r7, #6
    1fb8:	881b      	ldrh	r3, [r3, #0]
    1fba:	2b00      	cmp	r3, #0
    1fbc:	d11c      	bne.n	1ff8 <hif_receive+0x6c>
	{
		if(isDone)
    1fbe:	1d7b      	adds	r3, r7, #5
    1fc0:	781b      	ldrb	r3, [r3, #0]
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d006      	beq.n	1fd4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1fc6:	2317      	movs	r3, #23
    1fc8:	18fc      	adds	r4, r7, r3
    1fca:	4b42      	ldr	r3, [pc, #264]	; (20d4 <STACK_SIZE+0xd4>)
    1fcc:	4798      	blx	r3
    1fce:	0003      	movs	r3, r0
    1fd0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    1fd2:	e077      	b.n	20c4 <STACK_SIZE+0xc4>
			ret = M2M_ERR_FAIL;
    1fd4:	2317      	movs	r3, #23
    1fd6:	18fb      	adds	r3, r7, r3
    1fd8:	22f4      	movs	r2, #244	; 0xf4
    1fda:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    1fdc:	4a3e      	ldr	r2, [pc, #248]	; (20d8 <STACK_SIZE+0xd8>)
    1fde:	493f      	ldr	r1, [pc, #252]	; (20dc <STACK_SIZE+0xdc>)
    1fe0:	4b3f      	ldr	r3, [pc, #252]	; (20e0 <STACK_SIZE+0xe0>)
    1fe2:	0018      	movs	r0, r3
    1fe4:	4b3f      	ldr	r3, [pc, #252]	; (20e4 <STACK_SIZE+0xe4>)
    1fe6:	4798      	blx	r3
    1fe8:	4b3f      	ldr	r3, [pc, #252]	; (20e8 <STACK_SIZE+0xe8>)
    1fea:	0018      	movs	r0, r3
    1fec:	4b3f      	ldr	r3, [pc, #252]	; (20ec <STACK_SIZE+0xec>)
    1fee:	4798      	blx	r3
    1ff0:	200d      	movs	r0, #13
    1ff2:	4b3f      	ldr	r3, [pc, #252]	; (20f0 <STACK_SIZE+0xf0>)
    1ff4:	4798      	blx	r3
		goto ERR1;
    1ff6:	e065      	b.n	20c4 <STACK_SIZE+0xc4>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    1ff8:	1dbb      	adds	r3, r7, #6
    1ffa:	881a      	ldrh	r2, [r3, #0]
    1ffc:	4b3d      	ldr	r3, [pc, #244]	; (20f4 <STACK_SIZE+0xf4>)
    1ffe:	689b      	ldr	r3, [r3, #8]
    2000:	429a      	cmp	r2, r3
    2002:	d915      	bls.n	2030 <STACK_SIZE+0x30>
	{
		ret = M2M_ERR_FAIL;
    2004:	2317      	movs	r3, #23
    2006:	18fb      	adds	r3, r7, r3
    2008:	22f4      	movs	r2, #244	; 0xf4
    200a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    200c:	4a3a      	ldr	r2, [pc, #232]	; (20f8 <STACK_SIZE+0xf8>)
    200e:	4933      	ldr	r1, [pc, #204]	; (20dc <STACK_SIZE+0xdc>)
    2010:	4b33      	ldr	r3, [pc, #204]	; (20e0 <STACK_SIZE+0xe0>)
    2012:	0018      	movs	r0, r3
    2014:	4b33      	ldr	r3, [pc, #204]	; (20e4 <STACK_SIZE+0xe4>)
    2016:	4798      	blx	r3
    2018:	1dbb      	adds	r3, r7, #6
    201a:	8819      	ldrh	r1, [r3, #0]
    201c:	4b35      	ldr	r3, [pc, #212]	; (20f4 <STACK_SIZE+0xf4>)
    201e:	689a      	ldr	r2, [r3, #8]
    2020:	4b36      	ldr	r3, [pc, #216]	; (20fc <STACK_SIZE+0xfc>)
    2022:	0018      	movs	r0, r3
    2024:	4b2f      	ldr	r3, [pc, #188]	; (20e4 <STACK_SIZE+0xe4>)
    2026:	4798      	blx	r3
    2028:	200d      	movs	r0, #13
    202a:	4b31      	ldr	r3, [pc, #196]	; (20f0 <STACK_SIZE+0xf0>)
    202c:	4798      	blx	r3
		goto ERR1;
    202e:	e049      	b.n	20c4 <STACK_SIZE+0xc4>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    2030:	4b30      	ldr	r3, [pc, #192]	; (20f4 <STACK_SIZE+0xf4>)
    2032:	685a      	ldr	r2, [r3, #4]
    2034:	68fb      	ldr	r3, [r7, #12]
    2036:	429a      	cmp	r2, r3
    2038:	d80a      	bhi.n	2050 <STACK_SIZE+0x50>
    203a:	1dbb      	adds	r3, r7, #6
    203c:	881a      	ldrh	r2, [r3, #0]
    203e:	68fb      	ldr	r3, [r7, #12]
    2040:	18d2      	adds	r2, r2, r3
    2042:	4b2c      	ldr	r3, [pc, #176]	; (20f4 <STACK_SIZE+0xf4>)
    2044:	6859      	ldr	r1, [r3, #4]
    2046:	4b2b      	ldr	r3, [pc, #172]	; (20f4 <STACK_SIZE+0xf4>)
    2048:	689b      	ldr	r3, [r3, #8]
    204a:	18cb      	adds	r3, r1, r3
    204c:	429a      	cmp	r2, r3
    204e:	d911      	bls.n	2074 <STACK_SIZE+0x74>
	{
		ret = M2M_ERR_FAIL;
    2050:	2317      	movs	r3, #23
    2052:	18fb      	adds	r3, r7, r3
    2054:	22f4      	movs	r2, #244	; 0xf4
    2056:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    2058:	4a29      	ldr	r2, [pc, #164]	; (2100 <STACK_SIZE+0x100>)
    205a:	4920      	ldr	r1, [pc, #128]	; (20dc <STACK_SIZE+0xdc>)
    205c:	4b20      	ldr	r3, [pc, #128]	; (20e0 <STACK_SIZE+0xe0>)
    205e:	0018      	movs	r0, r3
    2060:	4b20      	ldr	r3, [pc, #128]	; (20e4 <STACK_SIZE+0xe4>)
    2062:	4798      	blx	r3
    2064:	4b27      	ldr	r3, [pc, #156]	; (2104 <STACK_SIZE+0x104>)
    2066:	0018      	movs	r0, r3
    2068:	4b20      	ldr	r3, [pc, #128]	; (20ec <STACK_SIZE+0xec>)
    206a:	4798      	blx	r3
    206c:	200d      	movs	r0, #13
    206e:	4b20      	ldr	r3, [pc, #128]	; (20f0 <STACK_SIZE+0xf0>)
    2070:	4798      	blx	r3
		goto ERR1;
    2072:	e027      	b.n	20c4 <STACK_SIZE+0xc4>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    2074:	1dbb      	adds	r3, r7, #6
    2076:	881a      	ldrh	r2, [r3, #0]
    2078:	2317      	movs	r3, #23
    207a:	18fc      	adds	r4, r7, r3
    207c:	68b9      	ldr	r1, [r7, #8]
    207e:	68fb      	ldr	r3, [r7, #12]
    2080:	0018      	movs	r0, r3
    2082:	4b21      	ldr	r3, [pc, #132]	; (2108 <STACK_SIZE+0x108>)
    2084:	4798      	blx	r3
    2086:	0003      	movs	r3, r0
    2088:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    208a:	2317      	movs	r3, #23
    208c:	18fb      	adds	r3, r7, r3
    208e:	781b      	ldrb	r3, [r3, #0]
    2090:	b25b      	sxtb	r3, r3
    2092:	2b00      	cmp	r3, #0
    2094:	d115      	bne.n	20c2 <STACK_SIZE+0xc2>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    2096:	4b17      	ldr	r3, [pc, #92]	; (20f4 <STACK_SIZE+0xf4>)
    2098:	685a      	ldr	r2, [r3, #4]
    209a:	4b16      	ldr	r3, [pc, #88]	; (20f4 <STACK_SIZE+0xf4>)
    209c:	689b      	ldr	r3, [r3, #8]
    209e:	18d2      	adds	r2, r2, r3
    20a0:	1dbb      	adds	r3, r7, #6
    20a2:	8819      	ldrh	r1, [r3, #0]
    20a4:	68fb      	ldr	r3, [r7, #12]
    20a6:	18cb      	adds	r3, r1, r3
    20a8:	429a      	cmp	r2, r3
    20aa:	d003      	beq.n	20b4 <STACK_SIZE+0xb4>
    20ac:	1d7b      	adds	r3, r7, #5
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d007      	beq.n	20c4 <STACK_SIZE+0xc4>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    20b4:	2317      	movs	r3, #23
    20b6:	18fc      	adds	r4, r7, r3
    20b8:	4b06      	ldr	r3, [pc, #24]	; (20d4 <STACK_SIZE+0xd4>)
    20ba:	4798      	blx	r3
    20bc:	0003      	movs	r3, r0
    20be:	7023      	strb	r3, [r4, #0]
    20c0:	e000      	b.n	20c4 <STACK_SIZE+0xc4>
	if(ret != M2M_SUCCESS)goto ERR1;
    20c2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    20c4:	2317      	movs	r3, #23
    20c6:	18fb      	adds	r3, r7, r3
    20c8:	781b      	ldrb	r3, [r3, #0]
    20ca:	b25b      	sxtb	r3, r3
}
    20cc:	0018      	movs	r0, r3
    20ce:	46bd      	mov	sp, r7
    20d0:	b007      	add	sp, #28
    20d2:	bd90      	pop	{r4, r7, pc}
    20d4:	000014d1 	.word	0x000014d1
    20d8:	0000026b 	.word	0x0000026b
    20dc:	00012c50 	.word	0x00012c50
    20e0:	00012934 	.word	0x00012934
    20e4:	0000e7e5 	.word	0x0000e7e5
    20e8:	00012b54 	.word	0x00012b54
    20ec:	0000e901 	.word	0x0000e901
    20f0:	0000e819 	.word	0x0000e819
    20f4:	200005b8 	.word	0x200005b8
    20f8:	00000273 	.word	0x00000273
    20fc:	00012b74 	.word	0x00012b74
    2100:	00000279 	.word	0x00000279
    2104:	00012bbc 	.word	0x00012bbc
    2108:	000034e9 	.word	0x000034e9

0000210c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    210c:	b580      	push	{r7, lr}
    210e:	b084      	sub	sp, #16
    2110:	af00      	add	r7, sp, #0
    2112:	0002      	movs	r2, r0
    2114:	6039      	str	r1, [r7, #0]
    2116:	1dfb      	adds	r3, r7, #7
    2118:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    211a:	230f      	movs	r3, #15
    211c:	18fb      	adds	r3, r7, r3
    211e:	2200      	movs	r2, #0
    2120:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    2122:	1dfb      	adds	r3, r7, #7
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	2b07      	cmp	r3, #7
    2128:	d820      	bhi.n	216c <hif_register_cb+0x60>
    212a:	009a      	lsls	r2, r3, #2
    212c:	4b1e      	ldr	r3, [pc, #120]	; (21a8 <hif_register_cb+0x9c>)
    212e:	18d3      	adds	r3, r2, r3
    2130:	681b      	ldr	r3, [r3, #0]
    2132:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    2134:	4b1d      	ldr	r3, [pc, #116]	; (21ac <hif_register_cb+0xa0>)
    2136:	683a      	ldr	r2, [r7, #0]
    2138:	611a      	str	r2, [r3, #16]
			break;
    213a:	e02c      	b.n	2196 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    213c:	4b1b      	ldr	r3, [pc, #108]	; (21ac <hif_register_cb+0xa0>)
    213e:	683a      	ldr	r2, [r7, #0]
    2140:	60da      	str	r2, [r3, #12]
			break;
    2142:	e028      	b.n	2196 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    2144:	4b19      	ldr	r3, [pc, #100]	; (21ac <hif_register_cb+0xa0>)
    2146:	683a      	ldr	r2, [r7, #0]
    2148:	615a      	str	r2, [r3, #20]
			break;
    214a:	e024      	b.n	2196 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    214c:	4b17      	ldr	r3, [pc, #92]	; (21ac <hif_register_cb+0xa0>)
    214e:	683a      	ldr	r2, [r7, #0]
    2150:	61da      	str	r2, [r3, #28]
			break;
    2152:	e020      	b.n	2196 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    2154:	4b15      	ldr	r3, [pc, #84]	; (21ac <hif_register_cb+0xa0>)
    2156:	683a      	ldr	r2, [r7, #0]
    2158:	621a      	str	r2, [r3, #32]
			break;
    215a:	e01c      	b.n	2196 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    215c:	4b13      	ldr	r3, [pc, #76]	; (21ac <hif_register_cb+0xa0>)
    215e:	683a      	ldr	r2, [r7, #0]
    2160:	619a      	str	r2, [r3, #24]
			break;
    2162:	e018      	b.n	2196 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    2164:	4b11      	ldr	r3, [pc, #68]	; (21ac <hif_register_cb+0xa0>)
    2166:	683a      	ldr	r2, [r7, #0]
    2168:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    216a:	e014      	b.n	2196 <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    216c:	4a10      	ldr	r2, [pc, #64]	; (21b0 <hif_register_cb+0xa4>)
    216e:	4911      	ldr	r1, [pc, #68]	; (21b4 <hif_register_cb+0xa8>)
    2170:	4b11      	ldr	r3, [pc, #68]	; (21b8 <hif_register_cb+0xac>)
    2172:	0018      	movs	r0, r3
    2174:	4b11      	ldr	r3, [pc, #68]	; (21bc <hif_register_cb+0xb0>)
    2176:	4798      	blx	r3
    2178:	1dfb      	adds	r3, r7, #7
    217a:	781a      	ldrb	r2, [r3, #0]
    217c:	4b10      	ldr	r3, [pc, #64]	; (21c0 <hif_register_cb+0xb4>)
    217e:	0011      	movs	r1, r2
    2180:	0018      	movs	r0, r3
    2182:	4b0e      	ldr	r3, [pc, #56]	; (21bc <hif_register_cb+0xb0>)
    2184:	4798      	blx	r3
    2186:	200d      	movs	r0, #13
    2188:	4b0e      	ldr	r3, [pc, #56]	; (21c4 <hif_register_cb+0xb8>)
    218a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    218c:	230f      	movs	r3, #15
    218e:	18fb      	adds	r3, r7, r3
    2190:	22f4      	movs	r2, #244	; 0xf4
    2192:	701a      	strb	r2, [r3, #0]
			break;
    2194:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    2196:	230f      	movs	r3, #15
    2198:	18fb      	adds	r3, r7, r3
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	b25b      	sxtb	r3, r3
}
    219e:	0018      	movs	r0, r3
    21a0:	46bd      	mov	sp, r7
    21a2:	b004      	add	sp, #16
    21a4:	bd80      	pop	{r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00012c0c 	.word	0x00012c0c
    21ac:	200005b8 	.word	0x200005b8
    21b0:	000002b1 	.word	0x000002b1
    21b4:	00012c5c 	.word	0x00012c5c
    21b8:	00012934 	.word	0x00012934
    21bc:	0000e7e5 	.word	0x0000e7e5
    21c0:	00012c00 	.word	0x00012c00
    21c4:	0000e819 	.word	0x0000e819

000021c8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    21c8:	b590      	push	{r4, r7, lr}
    21ca:	b0ad      	sub	sp, #180	; 0xb4
    21cc:	af02      	add	r7, sp, #8
    21ce:	603a      	str	r2, [r7, #0]
    21d0:	1dfb      	adds	r3, r7, #7
    21d2:	1c02      	adds	r2, r0, #0
    21d4:	701a      	strb	r2, [r3, #0]
    21d6:	1d3b      	adds	r3, r7, #4
    21d8:	1c0a      	adds	r2, r1, #0
    21da:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    21dc:	1dfb      	adds	r3, r7, #7
    21de:	781b      	ldrb	r3, [r3, #0]
    21e0:	2b2c      	cmp	r3, #44	; 0x2c
    21e2:	d116      	bne.n	2212 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    21e4:	239c      	movs	r3, #156	; 0x9c
    21e6:	18f9      	adds	r1, r7, r3
    21e8:	6838      	ldr	r0, [r7, #0]
    21ea:	2300      	movs	r3, #0
    21ec:	2204      	movs	r2, #4
    21ee:	4cc6      	ldr	r4, [pc, #792]	; (2508 <m2m_wifi_cb+0x340>)
    21f0:	47a0      	blx	r4
    21f2:	1e03      	subs	r3, r0, #0
    21f4:	d000      	beq.n	21f8 <m2m_wifi_cb+0x30>
    21f6:	e1aa      	b.n	254e <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    21f8:	4bc4      	ldr	r3, [pc, #784]	; (250c <m2m_wifi_cb+0x344>)
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d100      	bne.n	2202 <m2m_wifi_cb+0x3a>
    2200:	e1a5      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    2202:	4bc2      	ldr	r3, [pc, #776]	; (250c <m2m_wifi_cb+0x344>)
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	229c      	movs	r2, #156	; 0x9c
    2208:	18ba      	adds	r2, r7, r2
    220a:	0011      	movs	r1, r2
    220c:	202c      	movs	r0, #44	; 0x2c
    220e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    2210:	e19d      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    2212:	1dfb      	adds	r3, r7, #7
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	2b1b      	cmp	r3, #27
    2218:	d116      	bne.n	2248 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    221a:	2394      	movs	r3, #148	; 0x94
    221c:	18f9      	adds	r1, r7, r3
    221e:	6838      	ldr	r0, [r7, #0]
    2220:	2300      	movs	r3, #0
    2222:	2208      	movs	r2, #8
    2224:	4cb8      	ldr	r4, [pc, #736]	; (2508 <m2m_wifi_cb+0x340>)
    2226:	47a0      	blx	r4
    2228:	1e03      	subs	r3, r0, #0
    222a:	d000      	beq.n	222e <m2m_wifi_cb+0x66>
    222c:	e18f      	b.n	254e <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    222e:	4bb7      	ldr	r3, [pc, #732]	; (250c <m2m_wifi_cb+0x344>)
    2230:	681b      	ldr	r3, [r3, #0]
    2232:	2b00      	cmp	r3, #0
    2234:	d100      	bne.n	2238 <m2m_wifi_cb+0x70>
    2236:	e18a      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    2238:	4bb4      	ldr	r3, [pc, #720]	; (250c <m2m_wifi_cb+0x344>)
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	2294      	movs	r2, #148	; 0x94
    223e:	18ba      	adds	r2, r7, r2
    2240:	0011      	movs	r1, r2
    2242:	201b      	movs	r0, #27
    2244:	4798      	blx	r3
}
    2246:	e182      	b.n	254e <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    2248:	1dfb      	adds	r3, r7, #7
    224a:	781b      	ldrb	r3, [r3, #0]
    224c:	2b06      	cmp	r3, #6
    224e:	d116      	bne.n	227e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    2250:	2308      	movs	r3, #8
    2252:	18f9      	adds	r1, r7, r3
    2254:	6838      	ldr	r0, [r7, #0]
    2256:	2301      	movs	r3, #1
    2258:	2230      	movs	r2, #48	; 0x30
    225a:	4cab      	ldr	r4, [pc, #684]	; (2508 <m2m_wifi_cb+0x340>)
    225c:	47a0      	blx	r4
    225e:	1e03      	subs	r3, r0, #0
    2260:	d000      	beq.n	2264 <m2m_wifi_cb+0x9c>
    2262:	e174      	b.n	254e <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    2264:	4ba9      	ldr	r3, [pc, #676]	; (250c <m2m_wifi_cb+0x344>)
    2266:	681b      	ldr	r3, [r3, #0]
    2268:	2b00      	cmp	r3, #0
    226a:	d100      	bne.n	226e <m2m_wifi_cb+0xa6>
    226c:	e16f      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    226e:	4ba7      	ldr	r3, [pc, #668]	; (250c <m2m_wifi_cb+0x344>)
    2270:	681b      	ldr	r3, [r3, #0]
    2272:	2208      	movs	r2, #8
    2274:	18ba      	adds	r2, r7, r2
    2276:	0011      	movs	r1, r2
    2278:	2006      	movs	r0, #6
    227a:	4798      	blx	r3
}
    227c:	e167      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    227e:	1dfb      	adds	r3, r7, #7
    2280:	781b      	ldrb	r3, [r3, #0]
    2282:	2b0e      	cmp	r3, #14
    2284:	d100      	bne.n	2288 <m2m_wifi_cb+0xc0>
    2286:	e162      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    2288:	1dfb      	adds	r3, r7, #7
    228a:	781b      	ldrb	r3, [r3, #0]
    228c:	2b32      	cmp	r3, #50	; 0x32
    228e:	d116      	bne.n	22be <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    2290:	2380      	movs	r3, #128	; 0x80
    2292:	18f9      	adds	r1, r7, r3
    2294:	6838      	ldr	r0, [r7, #0]
    2296:	2300      	movs	r3, #0
    2298:	2214      	movs	r2, #20
    229a:	4c9b      	ldr	r4, [pc, #620]	; (2508 <m2m_wifi_cb+0x340>)
    229c:	47a0      	blx	r4
    229e:	1e03      	subs	r3, r0, #0
    22a0:	d000      	beq.n	22a4 <m2m_wifi_cb+0xdc>
    22a2:	e154      	b.n	254e <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    22a4:	4b99      	ldr	r3, [pc, #612]	; (250c <m2m_wifi_cb+0x344>)
    22a6:	681b      	ldr	r3, [r3, #0]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d100      	bne.n	22ae <m2m_wifi_cb+0xe6>
    22ac:	e14f      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    22ae:	4b97      	ldr	r3, [pc, #604]	; (250c <m2m_wifi_cb+0x344>)
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	2280      	movs	r2, #128	; 0x80
    22b4:	18ba      	adds	r2, r7, r2
    22b6:	0011      	movs	r1, r2
    22b8:	2032      	movs	r0, #50	; 0x32
    22ba:	4798      	blx	r3
}
    22bc:	e147      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    22be:	1dfb      	adds	r3, r7, #7
    22c0:	781b      	ldrb	r3, [r3, #0]
    22c2:	2b2f      	cmp	r3, #47	; 0x2f
    22c4:	d11d      	bne.n	2302 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    22c6:	2308      	movs	r3, #8
    22c8:	18fb      	adds	r3, r7, r3
    22ca:	2264      	movs	r2, #100	; 0x64
    22cc:	2100      	movs	r1, #0
    22ce:	0018      	movs	r0, r3
    22d0:	4b8f      	ldr	r3, [pc, #572]	; (2510 <m2m_wifi_cb+0x348>)
    22d2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    22d4:	2308      	movs	r3, #8
    22d6:	18f9      	adds	r1, r7, r3
    22d8:	6838      	ldr	r0, [r7, #0]
    22da:	2300      	movs	r3, #0
    22dc:	2264      	movs	r2, #100	; 0x64
    22de:	4c8a      	ldr	r4, [pc, #552]	; (2508 <m2m_wifi_cb+0x340>)
    22e0:	47a0      	blx	r4
    22e2:	1e03      	subs	r3, r0, #0
    22e4:	d000      	beq.n	22e8 <m2m_wifi_cb+0x120>
    22e6:	e132      	b.n	254e <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    22e8:	4b88      	ldr	r3, [pc, #544]	; (250c <m2m_wifi_cb+0x344>)
    22ea:	681b      	ldr	r3, [r3, #0]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d100      	bne.n	22f2 <m2m_wifi_cb+0x12a>
    22f0:	e12d      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    22f2:	4b86      	ldr	r3, [pc, #536]	; (250c <m2m_wifi_cb+0x344>)
    22f4:	681b      	ldr	r3, [r3, #0]
    22f6:	2208      	movs	r2, #8
    22f8:	18ba      	adds	r2, r7, r2
    22fa:	0011      	movs	r1, r2
    22fc:	202f      	movs	r0, #47	; 0x2f
    22fe:	4798      	blx	r3
}
    2300:	e125      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    2302:	1dfb      	adds	r3, r7, #7
    2304:	781b      	ldrb	r3, [r3, #0]
    2306:	2b34      	cmp	r3, #52	; 0x34
    2308:	d12e      	bne.n	2368 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    230a:	237c      	movs	r3, #124	; 0x7c
    230c:	18f9      	adds	r1, r7, r3
    230e:	6838      	ldr	r0, [r7, #0]
    2310:	2300      	movs	r3, #0
    2312:	2204      	movs	r2, #4
    2314:	4c7c      	ldr	r4, [pc, #496]	; (2508 <m2m_wifi_cb+0x340>)
    2316:	47a0      	blx	r4
    2318:	1e03      	subs	r3, r0, #0
    231a:	d000      	beq.n	231e <m2m_wifi_cb+0x156>
    231c:	e117      	b.n	254e <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    231e:	4b7d      	ldr	r3, [pc, #500]	; (2514 <m2m_wifi_cb+0x34c>)
    2320:	0018      	movs	r0, r3
    2322:	4b7d      	ldr	r3, [pc, #500]	; (2518 <m2m_wifi_cb+0x350>)
    2324:	4798      	blx	r3
    2326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2328:	0e1b      	lsrs	r3, r3, #24
    232a:	b2db      	uxtb	r3, r3
    232c:	0019      	movs	r1, r3
    232e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2330:	0c1b      	lsrs	r3, r3, #16
    2332:	b2db      	uxtb	r3, r3
    2334:	001a      	movs	r2, r3
    2336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2338:	0a1b      	lsrs	r3, r3, #8
    233a:	b2db      	uxtb	r3, r3
    233c:	001c      	movs	r4, r3
    233e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2340:	b2db      	uxtb	r3, r3
    2342:	4876      	ldr	r0, [pc, #472]	; (251c <m2m_wifi_cb+0x354>)
    2344:	9300      	str	r3, [sp, #0]
    2346:	0023      	movs	r3, r4
    2348:	4c73      	ldr	r4, [pc, #460]	; (2518 <m2m_wifi_cb+0x350>)
    234a:	47a0      	blx	r4
    234c:	200d      	movs	r0, #13
    234e:	4b74      	ldr	r3, [pc, #464]	; (2520 <m2m_wifi_cb+0x358>)
    2350:	4798      	blx	r3
			if (gpfAppWifiCb)
    2352:	4b6e      	ldr	r3, [pc, #440]	; (250c <m2m_wifi_cb+0x344>)
    2354:	681b      	ldr	r3, [r3, #0]
    2356:	2b00      	cmp	r3, #0
    2358:	d100      	bne.n	235c <m2m_wifi_cb+0x194>
    235a:	e0f8      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    235c:	4b6b      	ldr	r3, [pc, #428]	; (250c <m2m_wifi_cb+0x344>)
    235e:	681b      	ldr	r3, [r3, #0]
    2360:	2100      	movs	r1, #0
    2362:	2034      	movs	r0, #52	; 0x34
    2364:	4798      	blx	r3
}
    2366:	e0f2      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    2368:	1dfb      	adds	r3, r7, #7
    236a:	781b      	ldrb	r3, [r3, #0]
    236c:	2b11      	cmp	r3, #17
    236e:	d11e      	bne.n	23ae <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    2370:	4b6c      	ldr	r3, [pc, #432]	; (2524 <m2m_wifi_cb+0x35c>)
    2372:	2200      	movs	r2, #0
    2374:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    2376:	2378      	movs	r3, #120	; 0x78
    2378:	18f9      	adds	r1, r7, r3
    237a:	6838      	ldr	r0, [r7, #0]
    237c:	2300      	movs	r3, #0
    237e:	2204      	movs	r2, #4
    2380:	4c61      	ldr	r4, [pc, #388]	; (2508 <m2m_wifi_cb+0x340>)
    2382:	47a0      	blx	r4
    2384:	1e03      	subs	r3, r0, #0
    2386:	d000      	beq.n	238a <m2m_wifi_cb+0x1c2>
    2388:	e0e1      	b.n	254e <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    238a:	2378      	movs	r3, #120	; 0x78
    238c:	18fb      	adds	r3, r7, r3
    238e:	781a      	ldrb	r2, [r3, #0]
    2390:	4b65      	ldr	r3, [pc, #404]	; (2528 <m2m_wifi_cb+0x360>)
    2392:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    2394:	4b5d      	ldr	r3, [pc, #372]	; (250c <m2m_wifi_cb+0x344>)
    2396:	681b      	ldr	r3, [r3, #0]
    2398:	2b00      	cmp	r3, #0
    239a:	d100      	bne.n	239e <m2m_wifi_cb+0x1d6>
    239c:	e0d7      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    239e:	4b5b      	ldr	r3, [pc, #364]	; (250c <m2m_wifi_cb+0x344>)
    23a0:	681b      	ldr	r3, [r3, #0]
    23a2:	2278      	movs	r2, #120	; 0x78
    23a4:	18ba      	adds	r2, r7, r2
    23a6:	0011      	movs	r1, r2
    23a8:	2011      	movs	r0, #17
    23aa:	4798      	blx	r3
}
    23ac:	e0cf      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    23ae:	1dfb      	adds	r3, r7, #7
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	2b13      	cmp	r3, #19
    23b4:	d116      	bne.n	23e4 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    23b6:	2308      	movs	r3, #8
    23b8:	18f9      	adds	r1, r7, r3
    23ba:	6838      	ldr	r0, [r7, #0]
    23bc:	2300      	movs	r3, #0
    23be:	222c      	movs	r2, #44	; 0x2c
    23c0:	4c51      	ldr	r4, [pc, #324]	; (2508 <m2m_wifi_cb+0x340>)
    23c2:	47a0      	blx	r4
    23c4:	1e03      	subs	r3, r0, #0
    23c6:	d000      	beq.n	23ca <m2m_wifi_cb+0x202>
    23c8:	e0c1      	b.n	254e <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    23ca:	4b50      	ldr	r3, [pc, #320]	; (250c <m2m_wifi_cb+0x344>)
    23cc:	681b      	ldr	r3, [r3, #0]
    23ce:	2b00      	cmp	r3, #0
    23d0:	d100      	bne.n	23d4 <m2m_wifi_cb+0x20c>
    23d2:	e0bc      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    23d4:	4b4d      	ldr	r3, [pc, #308]	; (250c <m2m_wifi_cb+0x344>)
    23d6:	681b      	ldr	r3, [r3, #0]
    23d8:	2208      	movs	r2, #8
    23da:	18ba      	adds	r2, r7, r2
    23dc:	0011      	movs	r1, r2
    23de:	2013      	movs	r0, #19
    23e0:	4798      	blx	r3
}
    23e2:	e0b4      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    23e4:	1dfb      	adds	r3, r7, #7
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	2b04      	cmp	r3, #4
    23ea:	d116      	bne.n	241a <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    23ec:	23a0      	movs	r3, #160	; 0xa0
    23ee:	18f9      	adds	r1, r7, r3
    23f0:	6838      	ldr	r0, [r7, #0]
    23f2:	2300      	movs	r3, #0
    23f4:	2204      	movs	r2, #4
    23f6:	4c44      	ldr	r4, [pc, #272]	; (2508 <m2m_wifi_cb+0x340>)
    23f8:	47a0      	blx	r4
    23fa:	1e03      	subs	r3, r0, #0
    23fc:	d000      	beq.n	2400 <m2m_wifi_cb+0x238>
    23fe:	e0a6      	b.n	254e <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    2400:	4b42      	ldr	r3, [pc, #264]	; (250c <m2m_wifi_cb+0x344>)
    2402:	681b      	ldr	r3, [r3, #0]
    2404:	2b00      	cmp	r3, #0
    2406:	d100      	bne.n	240a <m2m_wifi_cb+0x242>
    2408:	e0a1      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    240a:	4b40      	ldr	r3, [pc, #256]	; (250c <m2m_wifi_cb+0x344>)
    240c:	681b      	ldr	r3, [r3, #0]
    240e:	22a0      	movs	r2, #160	; 0xa0
    2410:	18ba      	adds	r2, r7, r2
    2412:	0011      	movs	r1, r2
    2414:	2004      	movs	r0, #4
    2416:	4798      	blx	r3
}
    2418:	e099      	b.n	254e <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    241a:	1dfb      	adds	r3, r7, #7
    241c:	781b      	ldrb	r3, [r3, #0]
    241e:	2b65      	cmp	r3, #101	; 0x65
    2420:	d116      	bne.n	2450 <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2422:	23a0      	movs	r3, #160	; 0xa0
    2424:	18f9      	adds	r1, r7, r3
    2426:	6838      	ldr	r0, [r7, #0]
    2428:	2300      	movs	r3, #0
    242a:	2204      	movs	r2, #4
    242c:	4c36      	ldr	r4, [pc, #216]	; (2508 <m2m_wifi_cb+0x340>)
    242e:	47a0      	blx	r4
    2430:	1e03      	subs	r3, r0, #0
    2432:	d000      	beq.n	2436 <m2m_wifi_cb+0x26e>
    2434:	e08b      	b.n	254e <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    2436:	4b35      	ldr	r3, [pc, #212]	; (250c <m2m_wifi_cb+0x344>)
    2438:	681b      	ldr	r3, [r3, #0]
    243a:	2b00      	cmp	r3, #0
    243c:	d100      	bne.n	2440 <m2m_wifi_cb+0x278>
    243e:	e086      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2440:	4b32      	ldr	r3, [pc, #200]	; (250c <m2m_wifi_cb+0x344>)
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	22a0      	movs	r2, #160	; 0xa0
    2446:	18ba      	adds	r2, r7, r2
    2448:	0011      	movs	r1, r2
    244a:	2065      	movs	r0, #101	; 0x65
    244c:	4798      	blx	r3
}
    244e:	e07e      	b.n	254e <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    2450:	1dfb      	adds	r3, r7, #7
    2452:	781b      	ldrb	r3, [r3, #0]
    2454:	2b09      	cmp	r3, #9
    2456:	d116      	bne.n	2486 <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    2458:	2308      	movs	r3, #8
    245a:	18f9      	adds	r1, r7, r3
    245c:	6838      	ldr	r0, [r7, #0]
    245e:	2301      	movs	r3, #1
    2460:	2264      	movs	r2, #100	; 0x64
    2462:	4c29      	ldr	r4, [pc, #164]	; (2508 <m2m_wifi_cb+0x340>)
    2464:	47a0      	blx	r4
    2466:	1e03      	subs	r3, r0, #0
    2468:	d000      	beq.n	246c <m2m_wifi_cb+0x2a4>
    246a:	e070      	b.n	254e <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    246c:	4b27      	ldr	r3, [pc, #156]	; (250c <m2m_wifi_cb+0x344>)
    246e:	681b      	ldr	r3, [r3, #0]
    2470:	2b00      	cmp	r3, #0
    2472:	d100      	bne.n	2476 <m2m_wifi_cb+0x2ae>
    2474:	e06b      	b.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    2476:	4b25      	ldr	r3, [pc, #148]	; (250c <m2m_wifi_cb+0x344>)
    2478:	681b      	ldr	r3, [r3, #0]
    247a:	2208      	movs	r2, #8
    247c:	18ba      	adds	r2, r7, r2
    247e:	0011      	movs	r1, r2
    2480:	2009      	movs	r0, #9
    2482:	4798      	blx	r3
}
    2484:	e063      	b.n	254e <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    2486:	1dfb      	adds	r3, r7, #7
    2488:	781b      	ldrb	r3, [r3, #0]
    248a:	2b2a      	cmp	r3, #42	; 0x2a
    248c:	d114      	bne.n	24b8 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    248e:	2374      	movs	r3, #116	; 0x74
    2490:	18f9      	adds	r1, r7, r3
    2492:	6838      	ldr	r0, [r7, #0]
    2494:	2301      	movs	r3, #1
    2496:	2204      	movs	r2, #4
    2498:	4c1b      	ldr	r4, [pc, #108]	; (2508 <m2m_wifi_cb+0x340>)
    249a:	47a0      	blx	r4
    249c:	1e03      	subs	r3, r0, #0
    249e:	d156      	bne.n	254e <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    24a0:	4b1a      	ldr	r3, [pc, #104]	; (250c <m2m_wifi_cb+0x344>)
    24a2:	681b      	ldr	r3, [r3, #0]
    24a4:	2b00      	cmp	r3, #0
    24a6:	d052      	beq.n	254e <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    24a8:	4b18      	ldr	r3, [pc, #96]	; (250c <m2m_wifi_cb+0x344>)
    24aa:	681b      	ldr	r3, [r3, #0]
    24ac:	2274      	movs	r2, #116	; 0x74
    24ae:	18ba      	adds	r2, r7, r2
    24b0:	0011      	movs	r1, r2
    24b2:	202a      	movs	r0, #42	; 0x2a
    24b4:	4798      	blx	r3
}
    24b6:	e04a      	b.n	254e <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    24b8:	1dfb      	adds	r3, r7, #7
    24ba:	781b      	ldrb	r3, [r3, #0]
    24bc:	2b20      	cmp	r3, #32
    24be:	d135      	bne.n	252c <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    24c0:	236c      	movs	r3, #108	; 0x6c
    24c2:	18f9      	adds	r1, r7, r3
    24c4:	6838      	ldr	r0, [r7, #0]
    24c6:	2300      	movs	r3, #0
    24c8:	2208      	movs	r2, #8
    24ca:	4c0f      	ldr	r4, [pc, #60]	; (2508 <m2m_wifi_cb+0x340>)
    24cc:	47a0      	blx	r4
    24ce:	1e03      	subs	r3, r0, #0
    24d0:	d13d      	bne.n	254e <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    24d2:	683b      	ldr	r3, [r7, #0]
    24d4:	3308      	adds	r3, #8
    24d6:	0018      	movs	r0, r3
    24d8:	236c      	movs	r3, #108	; 0x6c
    24da:	18fb      	adds	r3, r7, r3
    24dc:	6819      	ldr	r1, [r3, #0]
    24de:	236c      	movs	r3, #108	; 0x6c
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	889a      	ldrh	r2, [r3, #4]
    24e4:	2301      	movs	r3, #1
    24e6:	4c08      	ldr	r4, [pc, #32]	; (2508 <m2m_wifi_cb+0x340>)
    24e8:	47a0      	blx	r4
    24ea:	1e03      	subs	r3, r0, #0
    24ec:	d12f      	bne.n	254e <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    24ee:	4b07      	ldr	r3, [pc, #28]	; (250c <m2m_wifi_cb+0x344>)
    24f0:	681b      	ldr	r3, [r3, #0]
    24f2:	2b00      	cmp	r3, #0
    24f4:	d02b      	beq.n	254e <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    24f6:	4b05      	ldr	r3, [pc, #20]	; (250c <m2m_wifi_cb+0x344>)
    24f8:	681b      	ldr	r3, [r3, #0]
    24fa:	226c      	movs	r2, #108	; 0x6c
    24fc:	18ba      	adds	r2, r7, r2
    24fe:	0011      	movs	r1, r2
    2500:	2020      	movs	r0, #32
    2502:	4798      	blx	r3
}
    2504:	e023      	b.n	254e <m2m_wifi_cb+0x386>
    2506:	46c0      	nop			; (mov r8, r8)
    2508:	00001f8d 	.word	0x00001f8d
    250c:	2000020c 	.word	0x2000020c
    2510:	00001439 	.word	0x00001439
    2514:	00012c6c 	.word	0x00012c6c
    2518:	0000e7e5 	.word	0x0000e7e5
    251c:	00012c78 	.word	0x00012c78
    2520:	0000e819 	.word	0x0000e819
    2524:	20000209 	.word	0x20000209
    2528:	20000208 	.word	0x20000208
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    252c:	2395      	movs	r3, #149	; 0x95
    252e:	005a      	lsls	r2, r3, #1
    2530:	4909      	ldr	r1, [pc, #36]	; (2558 <m2m_wifi_cb+0x390>)
    2532:	4b0a      	ldr	r3, [pc, #40]	; (255c <m2m_wifi_cb+0x394>)
    2534:	0018      	movs	r0, r3
    2536:	4b0a      	ldr	r3, [pc, #40]	; (2560 <m2m_wifi_cb+0x398>)
    2538:	4798      	blx	r3
    253a:	1dfb      	adds	r3, r7, #7
    253c:	781a      	ldrb	r2, [r3, #0]
    253e:	4b09      	ldr	r3, [pc, #36]	; (2564 <m2m_wifi_cb+0x39c>)
    2540:	0011      	movs	r1, r2
    2542:	0018      	movs	r0, r3
    2544:	4b06      	ldr	r3, [pc, #24]	; (2560 <m2m_wifi_cb+0x398>)
    2546:	4798      	blx	r3
    2548:	200d      	movs	r0, #13
    254a:	4b07      	ldr	r3, [pc, #28]	; (2568 <m2m_wifi_cb+0x3a0>)
    254c:	4798      	blx	r3
}
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	46bd      	mov	sp, r7
    2552:	b02b      	add	sp, #172	; 0xac
    2554:	bd90      	pop	{r4, r7, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	00013020 	.word	0x00013020
    255c:	00012c98 	.word	0x00012c98
    2560:	0000e7e5 	.word	0x0000e7e5
    2564:	00012cac 	.word	0x00012cac
    2568:	0000e819 	.word	0x0000e819

0000256c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    256c:	b590      	push	{r4, r7, lr}
    256e:	b091      	sub	sp, #68	; 0x44
    2570:	af02      	add	r7, sp, #8
    2572:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    2574:	2337      	movs	r3, #55	; 0x37
    2576:	18fb      	adds	r3, r7, r3
    2578:	2200      	movs	r2, #0
    257a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    257c:	230b      	movs	r3, #11
    257e:	18fb      	adds	r3, r7, r3
    2580:	2201      	movs	r2, #1
    2582:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	2b00      	cmp	r3, #0
    2588:	d104      	bne.n	2594 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    258a:	2337      	movs	r3, #55	; 0x37
    258c:	18fb      	adds	r3, r7, r3
    258e:	22f4      	movs	r2, #244	; 0xf4
    2590:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    2592:	e0ad      	b.n	26f0 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	681a      	ldr	r2, [r3, #0]
    2598:	4b59      	ldr	r3, [pc, #356]	; (2700 <m2m_wifi_init+0x194>)
    259a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    259c:	4b59      	ldr	r3, [pc, #356]	; (2704 <m2m_wifi_init+0x198>)
    259e:	2200      	movs	r2, #0
    25a0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    25a2:	2337      	movs	r3, #55	; 0x37
    25a4:	18fc      	adds	r4, r7, r3
    25a6:	230b      	movs	r3, #11
    25a8:	18fb      	adds	r3, r7, r3
    25aa:	0018      	movs	r0, r3
    25ac:	4b56      	ldr	r3, [pc, #344]	; (2708 <m2m_wifi_init+0x19c>)
    25ae:	4798      	blx	r3
    25b0:	0003      	movs	r3, r0
    25b2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    25b4:	2337      	movs	r3, #55	; 0x37
    25b6:	18fb      	adds	r3, r7, r3
    25b8:	781b      	ldrb	r3, [r3, #0]
    25ba:	b25b      	sxtb	r3, r3
    25bc:	2b00      	cmp	r3, #0
    25be:	d000      	beq.n	25c2 <m2m_wifi_init+0x56>
    25c0:	e093      	b.n	26ea <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    25c2:	2337      	movs	r3, #55	; 0x37
    25c4:	18fc      	adds	r4, r7, r3
    25c6:	2000      	movs	r0, #0
    25c8:	4b50      	ldr	r3, [pc, #320]	; (270c <m2m_wifi_init+0x1a0>)
    25ca:	4798      	blx	r3
    25cc:	0003      	movs	r3, r0
    25ce:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    25d0:	2337      	movs	r3, #55	; 0x37
    25d2:	18fb      	adds	r3, r7, r3
    25d4:	781b      	ldrb	r3, [r3, #0]
    25d6:	b25b      	sxtb	r3, r3
    25d8:	2b00      	cmp	r3, #0
    25da:	d000      	beq.n	25de <m2m_wifi_init+0x72>
    25dc:	e080      	b.n	26e0 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    25de:	4b4c      	ldr	r3, [pc, #304]	; (2710 <m2m_wifi_init+0x1a4>)
    25e0:	0019      	movs	r1, r3
    25e2:	2001      	movs	r0, #1
    25e4:	4b4b      	ldr	r3, [pc, #300]	; (2714 <m2m_wifi_init+0x1a8>)
    25e6:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    25e8:	2337      	movs	r3, #55	; 0x37
    25ea:	18fc      	adds	r4, r7, r3
    25ec:	230c      	movs	r3, #12
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	0018      	movs	r0, r3
    25f2:	4b49      	ldr	r3, [pc, #292]	; (2718 <m2m_wifi_init+0x1ac>)
    25f4:	4798      	blx	r3
    25f6:	0003      	movs	r3, r0
    25f8:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    25fa:	4b48      	ldr	r3, [pc, #288]	; (271c <m2m_wifi_init+0x1b0>)
    25fc:	0018      	movs	r0, r3
    25fe:	4b48      	ldr	r3, [pc, #288]	; (2720 <m2m_wifi_init+0x1b4>)
    2600:	4798      	blx	r3
    2602:	230c      	movs	r3, #12
    2604:	18fb      	adds	r3, r7, r3
    2606:	791b      	ldrb	r3, [r3, #4]
    2608:	0019      	movs	r1, r3
    260a:	230c      	movs	r3, #12
    260c:	18fb      	adds	r3, r7, r3
    260e:	795b      	ldrb	r3, [r3, #5]
    2610:	001a      	movs	r2, r3
    2612:	230c      	movs	r3, #12
    2614:	18fb      	adds	r3, r7, r3
    2616:	799b      	ldrb	r3, [r3, #6]
    2618:	001c      	movs	r4, r3
    261a:	230c      	movs	r3, #12
    261c:	18fb      	adds	r3, r7, r3
    261e:	8c1b      	ldrh	r3, [r3, #32]
    2620:	4840      	ldr	r0, [pc, #256]	; (2724 <m2m_wifi_init+0x1b8>)
    2622:	9300      	str	r3, [sp, #0]
    2624:	0023      	movs	r3, r4
    2626:	4c3e      	ldr	r4, [pc, #248]	; (2720 <m2m_wifi_init+0x1b4>)
    2628:	47a0      	blx	r4
    262a:	200d      	movs	r0, #13
    262c:	4b3e      	ldr	r3, [pc, #248]	; (2728 <m2m_wifi_init+0x1bc>)
    262e:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2630:	4b3a      	ldr	r3, [pc, #232]	; (271c <m2m_wifi_init+0x1b0>)
    2632:	0018      	movs	r0, r3
    2634:	4b3a      	ldr	r3, [pc, #232]	; (2720 <m2m_wifi_init+0x1b4>)
    2636:	4798      	blx	r3
    2638:	230c      	movs	r3, #12
    263a:	18fb      	adds	r3, r7, r3
    263c:	3316      	adds	r3, #22
    263e:	001a      	movs	r2, r3
    2640:	230c      	movs	r3, #12
    2642:	18fb      	adds	r3, r7, r3
    2644:	330a      	adds	r3, #10
    2646:	0019      	movs	r1, r3
    2648:	4b38      	ldr	r3, [pc, #224]	; (272c <m2m_wifi_init+0x1c0>)
    264a:	0018      	movs	r0, r3
    264c:	4b34      	ldr	r3, [pc, #208]	; (2720 <m2m_wifi_init+0x1b4>)
    264e:	4798      	blx	r3
    2650:	200d      	movs	r0, #13
    2652:	4b35      	ldr	r3, [pc, #212]	; (2728 <m2m_wifi_init+0x1bc>)
    2654:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2656:	4b31      	ldr	r3, [pc, #196]	; (271c <m2m_wifi_init+0x1b0>)
    2658:	0018      	movs	r0, r3
    265a:	4b31      	ldr	r3, [pc, #196]	; (2720 <m2m_wifi_init+0x1b4>)
    265c:	4798      	blx	r3
    265e:	230c      	movs	r3, #12
    2660:	18fb      	adds	r3, r7, r3
    2662:	79db      	ldrb	r3, [r3, #7]
    2664:	0019      	movs	r1, r3
    2666:	230c      	movs	r3, #12
    2668:	18fb      	adds	r3, r7, r3
    266a:	7a1b      	ldrb	r3, [r3, #8]
    266c:	001a      	movs	r2, r3
    266e:	230c      	movs	r3, #12
    2670:	18fb      	adds	r3, r7, r3
    2672:	7a5b      	ldrb	r3, [r3, #9]
    2674:	482e      	ldr	r0, [pc, #184]	; (2730 <m2m_wifi_init+0x1c4>)
    2676:	4c2a      	ldr	r4, [pc, #168]	; (2720 <m2m_wifi_init+0x1b4>)
    2678:	47a0      	blx	r4
    267a:	200d      	movs	r0, #13
    267c:	4b2a      	ldr	r3, [pc, #168]	; (2728 <m2m_wifi_init+0x1bc>)
    267e:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    2680:	4b26      	ldr	r3, [pc, #152]	; (271c <m2m_wifi_init+0x1b0>)
    2682:	0018      	movs	r0, r3
    2684:	4b26      	ldr	r3, [pc, #152]	; (2720 <m2m_wifi_init+0x1b4>)
    2686:	4798      	blx	r3
    2688:	482a      	ldr	r0, [pc, #168]	; (2734 <m2m_wifi_init+0x1c8>)
    268a:	2302      	movs	r3, #2
    268c:	2205      	movs	r2, #5
    268e:	2113      	movs	r1, #19
    2690:	4c23      	ldr	r4, [pc, #140]	; (2720 <m2m_wifi_init+0x1b4>)
    2692:	47a0      	blx	r4
    2694:	200d      	movs	r0, #13
    2696:	4b24      	ldr	r3, [pc, #144]	; (2728 <m2m_wifi_init+0x1bc>)
    2698:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    269a:	4b20      	ldr	r3, [pc, #128]	; (271c <m2m_wifi_init+0x1b0>)
    269c:	0018      	movs	r0, r3
    269e:	4b20      	ldr	r3, [pc, #128]	; (2720 <m2m_wifi_init+0x1b4>)
    26a0:	4798      	blx	r3
    26a2:	4a25      	ldr	r2, [pc, #148]	; (2738 <m2m_wifi_init+0x1cc>)
    26a4:	4925      	ldr	r1, [pc, #148]	; (273c <m2m_wifi_init+0x1d0>)
    26a6:	4b26      	ldr	r3, [pc, #152]	; (2740 <m2m_wifi_init+0x1d4>)
    26a8:	0018      	movs	r0, r3
    26aa:	4b1d      	ldr	r3, [pc, #116]	; (2720 <m2m_wifi_init+0x1b4>)
    26ac:	4798      	blx	r3
    26ae:	200d      	movs	r0, #13
    26b0:	4b1d      	ldr	r3, [pc, #116]	; (2728 <m2m_wifi_init+0x1bc>)
    26b2:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    26b4:	2337      	movs	r3, #55	; 0x37
    26b6:	18fb      	adds	r3, r7, r3
    26b8:	781b      	ldrb	r3, [r3, #0]
    26ba:	b25b      	sxtb	r3, r3
    26bc:	330d      	adds	r3, #13
    26be:	d116      	bne.n	26ee <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    26c0:	23ee      	movs	r3, #238	; 0xee
    26c2:	33ff      	adds	r3, #255	; 0xff
    26c4:	001a      	movs	r2, r3
    26c6:	491f      	ldr	r1, [pc, #124]	; (2744 <m2m_wifi_init+0x1d8>)
    26c8:	4b1f      	ldr	r3, [pc, #124]	; (2748 <m2m_wifi_init+0x1dc>)
    26ca:	0018      	movs	r0, r3
    26cc:	4b14      	ldr	r3, [pc, #80]	; (2720 <m2m_wifi_init+0x1b4>)
    26ce:	4798      	blx	r3
    26d0:	4b1e      	ldr	r3, [pc, #120]	; (274c <m2m_wifi_init+0x1e0>)
    26d2:	0018      	movs	r0, r3
    26d4:	4b1e      	ldr	r3, [pc, #120]	; (2750 <m2m_wifi_init+0x1e4>)
    26d6:	4798      	blx	r3
    26d8:	200d      	movs	r0, #13
    26da:	4b13      	ldr	r3, [pc, #76]	; (2728 <m2m_wifi_init+0x1bc>)
    26dc:	4798      	blx	r3
	}

	goto _EXIT0;
    26de:	e006      	b.n	26ee <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    26e0:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    26e2:	2000      	movs	r0, #0
    26e4:	4b1b      	ldr	r3, [pc, #108]	; (2754 <m2m_wifi_init+0x1e8>)
    26e6:	4798      	blx	r3
    26e8:	e002      	b.n	26f0 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	e000      	b.n	26f0 <m2m_wifi_init+0x184>
	goto _EXIT0;
    26ee:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    26f0:	2337      	movs	r3, #55	; 0x37
    26f2:	18fb      	adds	r3, r7, r3
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	b25b      	sxtb	r3, r3
}
    26f8:	0018      	movs	r0, r3
    26fa:	46bd      	mov	sp, r7
    26fc:	b00f      	add	sp, #60	; 0x3c
    26fe:	bd90      	pop	{r4, r7, pc}
    2700:	2000020c 	.word	0x2000020c
    2704:	20000209 	.word	0x20000209
    2708:	00003879 	.word	0x00003879
    270c:	00001651 	.word	0x00001651
    2710:	000021c9 	.word	0x000021c9
    2714:	0000210d 	.word	0x0000210d
    2718:	000036ad 	.word	0x000036ad
    271c:	00012c6c 	.word	0x00012c6c
    2720:	0000e7e5 	.word	0x0000e7e5
    2724:	00012e00 	.word	0x00012e00
    2728:	0000e819 	.word	0x0000e819
    272c:	00012e28 	.word	0x00012e28
    2730:	00012e44 	.word	0x00012e44
    2734:	00012e68 	.word	0x00012e68
    2738:	00012e80 	.word	0x00012e80
    273c:	00012e8c 	.word	0x00012e8c
    2740:	00012e98 	.word	0x00012e98
    2744:	0001302c 	.word	0x0001302c
    2748:	00012c98 	.word	0x00012c98
    274c:	00012eb0 	.word	0x00012eb0
    2750:	0000e901 	.word	0x0000e901
    2754:	00003a0d 	.word	0x00003a0d

00002758 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    2758:	b580      	push	{r7, lr}
    275a:	b082      	sub	sp, #8
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    2760:	4b03      	ldr	r3, [pc, #12]	; (2770 <m2m_wifi_handle_events+0x18>)
    2762:	4798      	blx	r3
    2764:	0003      	movs	r3, r0
}
    2766:	0018      	movs	r0, r3
    2768:	46bd      	mov	sp, r7
    276a:	b002      	add	sp, #8
    276c:	bd80      	pop	{r7, pc}
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	00001efd 	.word	0x00001efd

00002774 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    2774:	b590      	push	{r4, r7, lr}
    2776:	b087      	sub	sp, #28
    2778:	af02      	add	r7, sp, #8
    277a:	60f8      	str	r0, [r7, #12]
    277c:	0008      	movs	r0, r1
    277e:	0011      	movs	r1, r2
    2780:	607b      	str	r3, [r7, #4]
    2782:	230b      	movs	r3, #11
    2784:	18fb      	adds	r3, r7, r3
    2786:	1c02      	adds	r2, r0, #0
    2788:	701a      	strb	r2, [r3, #0]
    278a:	230a      	movs	r3, #10
    278c:	18fb      	adds	r3, r7, r3
    278e:	1c0a      	adds	r2, r1, #0
    2790:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2792:	687c      	ldr	r4, [r7, #4]
    2794:	230a      	movs	r3, #10
    2796:	18fb      	adds	r3, r7, r3
    2798:	781a      	ldrb	r2, [r3, #0]
    279a:	230b      	movs	r3, #11
    279c:	18fb      	adds	r3, r7, r3
    279e:	7819      	ldrb	r1, [r3, #0]
    27a0:	68f8      	ldr	r0, [r7, #12]
    27a2:	2300      	movs	r3, #0
    27a4:	9301      	str	r3, [sp, #4]
    27a6:	2320      	movs	r3, #32
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	881b      	ldrh	r3, [r3, #0]
    27ac:	9300      	str	r3, [sp, #0]
    27ae:	0023      	movs	r3, r4
    27b0:	4c03      	ldr	r4, [pc, #12]	; (27c0 <m2m_wifi_connect+0x4c>)
    27b2:	47a0      	blx	r4
    27b4:	0003      	movs	r3, r0
}
    27b6:	0018      	movs	r0, r3
    27b8:	46bd      	mov	sp, r7
    27ba:	b005      	add	sp, #20
    27bc:	bd90      	pop	{r4, r7, pc}
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	000027c5 	.word	0x000027c5

000027c4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    27c4:	b5b0      	push	{r4, r5, r7, lr}
    27c6:	b0aa      	sub	sp, #168	; 0xa8
    27c8:	af04      	add	r7, sp, #16
    27ca:	60f8      	str	r0, [r7, #12]
    27cc:	0008      	movs	r0, r1
    27ce:	0011      	movs	r1, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	230b      	movs	r3, #11
    27d4:	18fb      	adds	r3, r7, r3
    27d6:	1c02      	adds	r2, r0, #0
    27d8:	701a      	strb	r2, [r3, #0]
    27da:	230a      	movs	r3, #10
    27dc:	18fb      	adds	r3, r7, r3
    27de:	1c0a      	adds	r2, r1, #0
    27e0:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    27e2:	2397      	movs	r3, #151	; 0x97
    27e4:	18fb      	adds	r3, r7, r3
    27e6:	2200      	movs	r2, #0
    27e8:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    27ea:	230a      	movs	r3, #10
    27ec:	18fb      	adds	r3, r7, r3
    27ee:	781b      	ldrb	r3, [r3, #0]
    27f0:	2b01      	cmp	r3, #1
    27f2:	d100      	bne.n	27f6 <m2m_wifi_connect_sc+0x32>
    27f4:	e083      	b.n	28fe <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d111      	bne.n	2820 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    27fc:	4adb      	ldr	r2, [pc, #876]	; (2b6c <m2m_wifi_connect_sc+0x3a8>)
    27fe:	49dc      	ldr	r1, [pc, #880]	; (2b70 <m2m_wifi_connect_sc+0x3ac>)
    2800:	4bdc      	ldr	r3, [pc, #880]	; (2b74 <m2m_wifi_connect_sc+0x3b0>)
    2802:	0018      	movs	r0, r3
    2804:	4bdc      	ldr	r3, [pc, #880]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    2806:	4798      	blx	r3
    2808:	4bdc      	ldr	r3, [pc, #880]	; (2b7c <m2m_wifi_connect_sc+0x3b8>)
    280a:	0018      	movs	r0, r3
    280c:	4bdc      	ldr	r3, [pc, #880]	; (2b80 <m2m_wifi_connect_sc+0x3bc>)
    280e:	4798      	blx	r3
    2810:	200d      	movs	r0, #13
    2812:	4bdc      	ldr	r3, [pc, #880]	; (2b84 <m2m_wifi_connect_sc+0x3c0>)
    2814:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2816:	2397      	movs	r3, #151	; 0x97
    2818:	18fb      	adds	r3, r7, r3
    281a:	22f4      	movs	r2, #244	; 0xf4
    281c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    281e:	e1f5      	b.n	2c0c <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2820:	230a      	movs	r3, #10
    2822:	18fb      	adds	r3, r7, r3
    2824:	781b      	ldrb	r3, [r3, #0]
    2826:	2b02      	cmp	r3, #2
    2828:	d169      	bne.n	28fe <m2m_wifi_connect_sc+0x13a>
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	0018      	movs	r0, r3
    282e:	4bd6      	ldr	r3, [pc, #856]	; (2b88 <m2m_wifi_connect_sc+0x3c4>)
    2830:	4798      	blx	r3
    2832:	0003      	movs	r3, r0
    2834:	2b40      	cmp	r3, #64	; 0x40
    2836:	d162      	bne.n	28fe <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    2838:	2396      	movs	r3, #150	; 0x96
    283a:	18fb      	adds	r3, r7, r3
    283c:	2200      	movs	r2, #0
    283e:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	2290      	movs	r2, #144	; 0x90
    2844:	18ba      	adds	r2, r7, r2
    2846:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    2848:	e054      	b.n	28f4 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    284a:	2396      	movs	r3, #150	; 0x96
    284c:	18fb      	adds	r3, r7, r3
    284e:	781b      	ldrb	r3, [r3, #0]
    2850:	2290      	movs	r2, #144	; 0x90
    2852:	18ba      	adds	r2, r7, r2
    2854:	6812      	ldr	r2, [r2, #0]
    2856:	18d3      	adds	r3, r2, r3
    2858:	781b      	ldrb	r3, [r3, #0]
    285a:	2b2f      	cmp	r3, #47	; 0x2f
    285c:	d931      	bls.n	28c2 <m2m_wifi_connect_sc+0xfe>
    285e:	2396      	movs	r3, #150	; 0x96
    2860:	18fb      	adds	r3, r7, r3
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	2290      	movs	r2, #144	; 0x90
    2866:	18ba      	adds	r2, r7, r2
    2868:	6812      	ldr	r2, [r2, #0]
    286a:	18d3      	adds	r3, r2, r3
    286c:	781b      	ldrb	r3, [r3, #0]
    286e:	2b39      	cmp	r3, #57	; 0x39
    2870:	d909      	bls.n	2886 <m2m_wifi_connect_sc+0xc2>
    2872:	2396      	movs	r3, #150	; 0x96
    2874:	18fb      	adds	r3, r7, r3
    2876:	781b      	ldrb	r3, [r3, #0]
    2878:	2290      	movs	r2, #144	; 0x90
    287a:	18ba      	adds	r2, r7, r2
    287c:	6812      	ldr	r2, [r2, #0]
    287e:	18d3      	adds	r3, r2, r3
    2880:	781b      	ldrb	r3, [r3, #0]
    2882:	2b40      	cmp	r3, #64	; 0x40
    2884:	d91d      	bls.n	28c2 <m2m_wifi_connect_sc+0xfe>
    2886:	2396      	movs	r3, #150	; 0x96
    2888:	18fb      	adds	r3, r7, r3
    288a:	781b      	ldrb	r3, [r3, #0]
    288c:	2290      	movs	r2, #144	; 0x90
    288e:	18ba      	adds	r2, r7, r2
    2890:	6812      	ldr	r2, [r2, #0]
    2892:	18d3      	adds	r3, r2, r3
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	2b46      	cmp	r3, #70	; 0x46
    2898:	d909      	bls.n	28ae <m2m_wifi_connect_sc+0xea>
    289a:	2396      	movs	r3, #150	; 0x96
    289c:	18fb      	adds	r3, r7, r3
    289e:	781b      	ldrb	r3, [r3, #0]
    28a0:	2290      	movs	r2, #144	; 0x90
    28a2:	18ba      	adds	r2, r7, r2
    28a4:	6812      	ldr	r2, [r2, #0]
    28a6:	18d3      	adds	r3, r2, r3
    28a8:	781b      	ldrb	r3, [r3, #0]
    28aa:	2b60      	cmp	r3, #96	; 0x60
    28ac:	d909      	bls.n	28c2 <m2m_wifi_connect_sc+0xfe>
    28ae:	2396      	movs	r3, #150	; 0x96
    28b0:	18fb      	adds	r3, r7, r3
    28b2:	781b      	ldrb	r3, [r3, #0]
    28b4:	2290      	movs	r2, #144	; 0x90
    28b6:	18ba      	adds	r2, r7, r2
    28b8:	6812      	ldr	r2, [r2, #0]
    28ba:	18d3      	adds	r3, r2, r3
    28bc:	781b      	ldrb	r3, [r3, #0]
    28be:	2b66      	cmp	r3, #102	; 0x66
    28c0:	d911      	bls.n	28e6 <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    28c2:	4ab2      	ldr	r2, [pc, #712]	; (2b8c <m2m_wifi_connect_sc+0x3c8>)
    28c4:	49aa      	ldr	r1, [pc, #680]	; (2b70 <m2m_wifi_connect_sc+0x3ac>)
    28c6:	4bab      	ldr	r3, [pc, #684]	; (2b74 <m2m_wifi_connect_sc+0x3b0>)
    28c8:	0018      	movs	r0, r3
    28ca:	4bab      	ldr	r3, [pc, #684]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    28cc:	4798      	blx	r3
    28ce:	4bb0      	ldr	r3, [pc, #704]	; (2b90 <m2m_wifi_connect_sc+0x3cc>)
    28d0:	0018      	movs	r0, r3
    28d2:	4bab      	ldr	r3, [pc, #684]	; (2b80 <m2m_wifi_connect_sc+0x3bc>)
    28d4:	4798      	blx	r3
    28d6:	200d      	movs	r0, #13
    28d8:	4baa      	ldr	r3, [pc, #680]	; (2b84 <m2m_wifi_connect_sc+0x3c0>)
    28da:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    28dc:	2397      	movs	r3, #151	; 0x97
    28de:	18fb      	adds	r3, r7, r3
    28e0:	22f4      	movs	r2, #244	; 0xf4
    28e2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    28e4:	e192      	b.n	2c0c <m2m_wifi_connect_sc+0x448>
				}
				i++;
    28e6:	2396      	movs	r3, #150	; 0x96
    28e8:	18fb      	adds	r3, r7, r3
    28ea:	781a      	ldrb	r2, [r3, #0]
    28ec:	2396      	movs	r3, #150	; 0x96
    28ee:	18fb      	adds	r3, r7, r3
    28f0:	3201      	adds	r2, #1
    28f2:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    28f4:	2396      	movs	r3, #150	; 0x96
    28f6:	18fb      	adds	r3, r7, r3
    28f8:	781b      	ldrb	r3, [r3, #0]
    28fa:	2b3f      	cmp	r3, #63	; 0x3f
    28fc:	d9a5      	bls.n	284a <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    28fe:	230b      	movs	r3, #11
    2900:	18fb      	adds	r3, r7, r3
    2902:	781b      	ldrb	r3, [r3, #0]
    2904:	2b00      	cmp	r3, #0
    2906:	d004      	beq.n	2912 <m2m_wifi_connect_sc+0x14e>
    2908:	230b      	movs	r3, #11
    290a:	18fb      	adds	r3, r7, r3
    290c:	781b      	ldrb	r3, [r3, #0]
    290e:	2b20      	cmp	r3, #32
    2910:	d911      	bls.n	2936 <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    2912:	4aa0      	ldr	r2, [pc, #640]	; (2b94 <m2m_wifi_connect_sc+0x3d0>)
    2914:	4996      	ldr	r1, [pc, #600]	; (2b70 <m2m_wifi_connect_sc+0x3ac>)
    2916:	4b97      	ldr	r3, [pc, #604]	; (2b74 <m2m_wifi_connect_sc+0x3b0>)
    2918:	0018      	movs	r0, r3
    291a:	4b97      	ldr	r3, [pc, #604]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    291c:	4798      	blx	r3
    291e:	4b9e      	ldr	r3, [pc, #632]	; (2b98 <m2m_wifi_connect_sc+0x3d4>)
    2920:	0018      	movs	r0, r3
    2922:	4b97      	ldr	r3, [pc, #604]	; (2b80 <m2m_wifi_connect_sc+0x3bc>)
    2924:	4798      	blx	r3
    2926:	200d      	movs	r0, #13
    2928:	4b96      	ldr	r3, [pc, #600]	; (2b84 <m2m_wifi_connect_sc+0x3c0>)
    292a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    292c:	2397      	movs	r3, #151	; 0x97
    292e:	18fb      	adds	r3, r7, r3
    2930:	22f4      	movs	r2, #244	; 0xf4
    2932:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2934:	e16a      	b.n	2c0c <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    2936:	23a8      	movs	r3, #168	; 0xa8
    2938:	18fb      	adds	r3, r7, r3
    293a:	881b      	ldrh	r3, [r3, #0]
    293c:	2b00      	cmp	r3, #0
    293e:	d004      	beq.n	294a <m2m_wifi_connect_sc+0x186>
    2940:	23a8      	movs	r3, #168	; 0xa8
    2942:	18fb      	adds	r3, r7, r3
    2944:	881b      	ldrh	r3, [r3, #0]
    2946:	2b0e      	cmp	r3, #14
    2948:	d916      	bls.n	2978 <m2m_wifi_connect_sc+0x1b4>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    294a:	23a8      	movs	r3, #168	; 0xa8
    294c:	18fb      	adds	r3, r7, r3
    294e:	881b      	ldrh	r3, [r3, #0]
    2950:	2bff      	cmp	r3, #255	; 0xff
    2952:	d011      	beq.n	2978 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("CH INVALID\n");
    2954:	4a91      	ldr	r2, [pc, #580]	; (2b9c <m2m_wifi_connect_sc+0x3d8>)
    2956:	4986      	ldr	r1, [pc, #536]	; (2b70 <m2m_wifi_connect_sc+0x3ac>)
    2958:	4b86      	ldr	r3, [pc, #536]	; (2b74 <m2m_wifi_connect_sc+0x3b0>)
    295a:	0018      	movs	r0, r3
    295c:	4b86      	ldr	r3, [pc, #536]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    295e:	4798      	blx	r3
    2960:	4b8f      	ldr	r3, [pc, #572]	; (2ba0 <m2m_wifi_connect_sc+0x3dc>)
    2962:	0018      	movs	r0, r3
    2964:	4b86      	ldr	r3, [pc, #536]	; (2b80 <m2m_wifi_connect_sc+0x3bc>)
    2966:	4798      	blx	r3
    2968:	200d      	movs	r0, #13
    296a:	4b86      	ldr	r3, [pc, #536]	; (2b84 <m2m_wifi_connect_sc+0x3c0>)
    296c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    296e:	2397      	movs	r3, #151	; 0x97
    2970:	18fb      	adds	r3, r7, r3
    2972:	22f4      	movs	r2, #244	; 0xf4
    2974:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2976:	e149      	b.n	2c0c <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2978:	230b      	movs	r3, #11
    297a:	18fb      	adds	r3, r7, r3
    297c:	781a      	ldrb	r2, [r3, #0]
    297e:	68f9      	ldr	r1, [r7, #12]
    2980:	2314      	movs	r3, #20
    2982:	18fb      	adds	r3, r7, r3
    2984:	3346      	adds	r3, #70	; 0x46
    2986:	0018      	movs	r0, r3
    2988:	4b86      	ldr	r3, [pc, #536]	; (2ba4 <m2m_wifi_connect_sc+0x3e0>)
    298a:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    298c:	230b      	movs	r3, #11
    298e:	18fb      	adds	r3, r7, r3
    2990:	781b      	ldrb	r3, [r3, #0]
    2992:	2214      	movs	r2, #20
    2994:	18ba      	adds	r2, r7, r2
    2996:	2146      	movs	r1, #70	; 0x46
    2998:	18d3      	adds	r3, r2, r3
    299a:	185b      	adds	r3, r3, r1
    299c:	2200      	movs	r2, #0
    299e:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    29a0:	2314      	movs	r3, #20
    29a2:	18fb      	adds	r3, r7, r3
    29a4:	22a8      	movs	r2, #168	; 0xa8
    29a6:	18ba      	adds	r2, r7, r2
    29a8:	2144      	movs	r1, #68	; 0x44
    29aa:	8812      	ldrh	r2, [r2, #0]
    29ac:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    29ae:	23ac      	movs	r3, #172	; 0xac
    29b0:	18fb      	adds	r3, r7, r3
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	1e5a      	subs	r2, r3, #1
    29b6:	4193      	sbcs	r3, r2
    29b8:	b2db      	uxtb	r3, r3
    29ba:	0019      	movs	r1, r3
    29bc:	2314      	movs	r3, #20
    29be:	18fb      	adds	r3, r7, r3
    29c0:	2267      	movs	r2, #103	; 0x67
    29c2:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    29c4:	2314      	movs	r3, #20
    29c6:	18fb      	adds	r3, r7, r3
    29c8:	228c      	movs	r2, #140	; 0x8c
    29ca:	18ba      	adds	r2, r7, r2
    29cc:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    29ce:	238c      	movs	r3, #140	; 0x8c
    29d0:	18fb      	adds	r3, r7, r3
    29d2:	681b      	ldr	r3, [r3, #0]
    29d4:	220a      	movs	r2, #10
    29d6:	18ba      	adds	r2, r7, r2
    29d8:	2141      	movs	r1, #65	; 0x41
    29da:	7812      	ldrb	r2, [r2, #0]
    29dc:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    29de:	230a      	movs	r3, #10
    29e0:	18fb      	adds	r3, r7, r3
    29e2:	781b      	ldrb	r3, [r3, #0]
    29e4:	2b03      	cmp	r3, #3
    29e6:	d000      	beq.n	29ea <m2m_wifi_connect_sc+0x226>
    29e8:	e07b      	b.n	2ae2 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	2288      	movs	r2, #136	; 0x88
    29ee:	18ba      	adds	r2, r7, r2
    29f0:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    29f2:	238c      	movs	r3, #140	; 0x8c
    29f4:	18fb      	adds	r3, r7, r3
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	2284      	movs	r2, #132	; 0x84
    29fa:	18ba      	adds	r2, r7, r2
    29fc:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    29fe:	2388      	movs	r3, #136	; 0x88
    2a00:	18fb      	adds	r3, r7, r3
    2a02:	681b      	ldr	r3, [r3, #0]
    2a04:	781b      	ldrb	r3, [r3, #0]
    2a06:	3b01      	subs	r3, #1
    2a08:	b2da      	uxtb	r2, r3
    2a0a:	2384      	movs	r3, #132	; 0x84
    2a0c:	18fb      	adds	r3, r7, r3
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2a12:	2384      	movs	r3, #132	; 0x84
    2a14:	18fb      	adds	r3, r7, r3
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	781b      	ldrb	r3, [r3, #0]
    2a1a:	2b03      	cmp	r3, #3
    2a1c:	d917      	bls.n	2a4e <m2m_wifi_connect_sc+0x28a>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    2a1e:	4a62      	ldr	r2, [pc, #392]	; (2ba8 <m2m_wifi_connect_sc+0x3e4>)
    2a20:	4953      	ldr	r1, [pc, #332]	; (2b70 <m2m_wifi_connect_sc+0x3ac>)
    2a22:	4b54      	ldr	r3, [pc, #336]	; (2b74 <m2m_wifi_connect_sc+0x3b0>)
    2a24:	0018      	movs	r0, r3
    2a26:	4b54      	ldr	r3, [pc, #336]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    2a28:	4798      	blx	r3
    2a2a:	2384      	movs	r3, #132	; 0x84
    2a2c:	18fb      	adds	r3, r7, r3
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	781b      	ldrb	r3, [r3, #0]
    2a32:	001a      	movs	r2, r3
    2a34:	4b5d      	ldr	r3, [pc, #372]	; (2bac <m2m_wifi_connect_sc+0x3e8>)
    2a36:	0011      	movs	r1, r2
    2a38:	0018      	movs	r0, r3
    2a3a:	4b4f      	ldr	r3, [pc, #316]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    2a3c:	4798      	blx	r3
    2a3e:	200d      	movs	r0, #13
    2a40:	4b50      	ldr	r3, [pc, #320]	; (2b84 <m2m_wifi_connect_sc+0x3c0>)
    2a42:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2a44:	2397      	movs	r3, #151	; 0x97
    2a46:	18fb      	adds	r3, r7, r3
    2a48:	22f4      	movs	r2, #244	; 0xf4
    2a4a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2a4c:	e0de      	b.n	2c0c <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2a4e:	2388      	movs	r3, #136	; 0x88
    2a50:	18fb      	adds	r3, r7, r3
    2a52:	681b      	ldr	r3, [r3, #0]
    2a54:	785b      	ldrb	r3, [r3, #1]
    2a56:	3b01      	subs	r3, #1
    2a58:	b2da      	uxtb	r2, r3
    2a5a:	2384      	movs	r3, #132	; 0x84
    2a5c:	18fb      	adds	r3, r7, r3
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2a62:	2384      	movs	r3, #132	; 0x84
    2a64:	18fb      	adds	r3, r7, r3
    2a66:	681b      	ldr	r3, [r3, #0]
    2a68:	785b      	ldrb	r3, [r3, #1]
    2a6a:	2b0a      	cmp	r3, #10
    2a6c:	d01e      	beq.n	2aac <m2m_wifi_connect_sc+0x2e8>
    2a6e:	2384      	movs	r3, #132	; 0x84
    2a70:	18fb      	adds	r3, r7, r3
    2a72:	681b      	ldr	r3, [r3, #0]
    2a74:	785b      	ldrb	r3, [r3, #1]
    2a76:	2b1a      	cmp	r3, #26
    2a78:	d018      	beq.n	2aac <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2a7a:	2396      	movs	r3, #150	; 0x96
    2a7c:	009a      	lsls	r2, r3, #2
    2a7e:	493c      	ldr	r1, [pc, #240]	; (2b70 <m2m_wifi_connect_sc+0x3ac>)
    2a80:	4b3c      	ldr	r3, [pc, #240]	; (2b74 <m2m_wifi_connect_sc+0x3b0>)
    2a82:	0018      	movs	r0, r3
    2a84:	4b3c      	ldr	r3, [pc, #240]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    2a86:	4798      	blx	r3
    2a88:	2384      	movs	r3, #132	; 0x84
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	681b      	ldr	r3, [r3, #0]
    2a8e:	785b      	ldrb	r3, [r3, #1]
    2a90:	001a      	movs	r2, r3
    2a92:	4b47      	ldr	r3, [pc, #284]	; (2bb0 <m2m_wifi_connect_sc+0x3ec>)
    2a94:	0011      	movs	r1, r2
    2a96:	0018      	movs	r0, r3
    2a98:	4b37      	ldr	r3, [pc, #220]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    2a9a:	4798      	blx	r3
    2a9c:	200d      	movs	r0, #13
    2a9e:	4b39      	ldr	r3, [pc, #228]	; (2b84 <m2m_wifi_connect_sc+0x3c0>)
    2aa0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2aa2:	2397      	movs	r3, #151	; 0x97
    2aa4:	18fb      	adds	r3, r7, r3
    2aa6:	22f4      	movs	r2, #244	; 0xf4
    2aa8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2aaa:	e0af      	b.n	2c0c <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    2aac:	2384      	movs	r3, #132	; 0x84
    2aae:	18fb      	adds	r3, r7, r3
    2ab0:	681b      	ldr	r3, [r3, #0]
    2ab2:	1c98      	adds	r0, r3, #2
    2ab4:	2388      	movs	r3, #136	; 0x88
    2ab6:	18fb      	adds	r3, r7, r3
    2ab8:	681b      	ldr	r3, [r3, #0]
    2aba:	1c99      	adds	r1, r3, #2
    2abc:	2388      	movs	r3, #136	; 0x88
    2abe:	18fb      	adds	r3, r7, r3
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	785b      	ldrb	r3, [r3, #1]
    2ac4:	001a      	movs	r2, r3
    2ac6:	4b37      	ldr	r3, [pc, #220]	; (2ba4 <m2m_wifi_connect_sc+0x3e0>)
    2ac8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    2aca:	2388      	movs	r3, #136	; 0x88
    2acc:	18fb      	adds	r3, r7, r3
    2ace:	681b      	ldr	r3, [r3, #0]
    2ad0:	785b      	ldrb	r3, [r3, #1]
    2ad2:	001a      	movs	r2, r3
    2ad4:	2384      	movs	r3, #132	; 0x84
    2ad6:	18fb      	adds	r3, r7, r3
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	189b      	adds	r3, r3, r2
    2adc:	2200      	movs	r2, #0
    2ade:	709a      	strb	r2, [r3, #2]
    2ae0:	e083      	b.n	2bea <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2ae2:	230a      	movs	r3, #10
    2ae4:	18fb      	adds	r3, r7, r3
    2ae6:	781b      	ldrb	r3, [r3, #0]
    2ae8:	2b02      	cmp	r3, #2
    2aea:	d130      	bne.n	2b4e <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    2aec:	2382      	movs	r3, #130	; 0x82
    2aee:	18fc      	adds	r4, r7, r3
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	0018      	movs	r0, r3
    2af4:	4b24      	ldr	r3, [pc, #144]	; (2b88 <m2m_wifi_connect_sc+0x3c4>)
    2af6:	4798      	blx	r3
    2af8:	0003      	movs	r3, r0
    2afa:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    2afc:	2382      	movs	r3, #130	; 0x82
    2afe:	18fb      	adds	r3, r7, r3
    2b00:	881b      	ldrh	r3, [r3, #0]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d004      	beq.n	2b10 <m2m_wifi_connect_sc+0x34c>
    2b06:	2382      	movs	r3, #130	; 0x82
    2b08:	18fb      	adds	r3, r7, r3
    2b0a:	881b      	ldrh	r3, [r3, #0]
    2b0c:	2b40      	cmp	r3, #64	; 0x40
    2b0e:	d911      	bls.n	2b34 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    2b10:	4a28      	ldr	r2, [pc, #160]	; (2bb4 <m2m_wifi_connect_sc+0x3f0>)
    2b12:	4917      	ldr	r1, [pc, #92]	; (2b70 <m2m_wifi_connect_sc+0x3ac>)
    2b14:	4b17      	ldr	r3, [pc, #92]	; (2b74 <m2m_wifi_connect_sc+0x3b0>)
    2b16:	0018      	movs	r0, r3
    2b18:	4b17      	ldr	r3, [pc, #92]	; (2b78 <m2m_wifi_connect_sc+0x3b4>)
    2b1a:	4798      	blx	r3
    2b1c:	4b26      	ldr	r3, [pc, #152]	; (2bb8 <m2m_wifi_connect_sc+0x3f4>)
    2b1e:	0018      	movs	r0, r3
    2b20:	4b17      	ldr	r3, [pc, #92]	; (2b80 <m2m_wifi_connect_sc+0x3bc>)
    2b22:	4798      	blx	r3
    2b24:	200d      	movs	r0, #13
    2b26:	4b17      	ldr	r3, [pc, #92]	; (2b84 <m2m_wifi_connect_sc+0x3c0>)
    2b28:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2b2a:	2397      	movs	r3, #151	; 0x97
    2b2c:	18fb      	adds	r3, r7, r3
    2b2e:	22f4      	movs	r2, #244	; 0xf4
    2b30:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2b32:	e06b      	b.n	2c0c <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2b34:	238c      	movs	r3, #140	; 0x8c
    2b36:	18fb      	adds	r3, r7, r3
    2b38:	6818      	ldr	r0, [r3, #0]
    2b3a:	2382      	movs	r3, #130	; 0x82
    2b3c:	18fb      	adds	r3, r7, r3
    2b3e:	881b      	ldrh	r3, [r3, #0]
    2b40:	3301      	adds	r3, #1
    2b42:	001a      	movs	r2, r3
    2b44:	687b      	ldr	r3, [r7, #4]
    2b46:	0019      	movs	r1, r3
    2b48:	4b16      	ldr	r3, [pc, #88]	; (2ba4 <m2m_wifi_connect_sc+0x3e0>)
    2b4a:	4798      	blx	r3
    2b4c:	e04d      	b.n	2bea <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    2b4e:	230a      	movs	r3, #10
    2b50:	18fb      	adds	r3, r7, r3
    2b52:	781b      	ldrb	r3, [r3, #0]
    2b54:	2b04      	cmp	r3, #4
    2b56:	d131      	bne.n	2bbc <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2b58:	238c      	movs	r3, #140	; 0x8c
    2b5a:	18fb      	adds	r3, r7, r3
    2b5c:	681b      	ldr	r3, [r3, #0]
    2b5e:	6879      	ldr	r1, [r7, #4]
    2b60:	223e      	movs	r2, #62	; 0x3e
    2b62:	0018      	movs	r0, r3
    2b64:	4b0f      	ldr	r3, [pc, #60]	; (2ba4 <m2m_wifi_connect_sc+0x3e0>)
    2b66:	4798      	blx	r3
    2b68:	e03f      	b.n	2bea <m2m_wifi_connect_sc+0x426>
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	0000021b 	.word	0x0000021b
    2b70:	0001303c 	.word	0x0001303c
    2b74:	00012c98 	.word	0x00012c98
    2b78:	0000e7e5 	.word	0x0000e7e5
    2b7c:	00012ecc 	.word	0x00012ecc
    2b80:	0000e901 	.word	0x0000e901
    2b84:	0000e819 	.word	0x0000e819
    2b88:	00001477 	.word	0x00001477
    2b8c:	00000227 	.word	0x00000227
    2b90:	00012ee0 	.word	0x00012ee0
    2b94:	00000231 	.word	0x00000231
    2b98:	00012eec 	.word	0x00012eec
    2b9c:	0000023a 	.word	0x0000023a
    2ba0:	00012f00 	.word	0x00012f00
    2ba4:	000013fd 	.word	0x000013fd
    2ba8:	00000251 	.word	0x00000251
    2bac:	00012f0c 	.word	0x00012f0c
    2bb0:	00012f28 	.word	0x00012f28
    2bb4:	00000267 	.word	0x00000267
    2bb8:	00012f44 	.word	0x00012f44
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2bbc:	230a      	movs	r3, #10
    2bbe:	18fb      	adds	r3, r7, r3
    2bc0:	781b      	ldrb	r3, [r3, #0]
    2bc2:	2b01      	cmp	r3, #1
    2bc4:	d011      	beq.n	2bea <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    2bc6:	4a15      	ldr	r2, [pc, #84]	; (2c1c <m2m_wifi_connect_sc+0x458>)
    2bc8:	4915      	ldr	r1, [pc, #84]	; (2c20 <m2m_wifi_connect_sc+0x45c>)
    2bca:	4b16      	ldr	r3, [pc, #88]	; (2c24 <m2m_wifi_connect_sc+0x460>)
    2bcc:	0018      	movs	r0, r3
    2bce:	4b16      	ldr	r3, [pc, #88]	; (2c28 <m2m_wifi_connect_sc+0x464>)
    2bd0:	4798      	blx	r3
    2bd2:	4b16      	ldr	r3, [pc, #88]	; (2c2c <m2m_wifi_connect_sc+0x468>)
    2bd4:	0018      	movs	r0, r3
    2bd6:	4b16      	ldr	r3, [pc, #88]	; (2c30 <m2m_wifi_connect_sc+0x46c>)
    2bd8:	4798      	blx	r3
    2bda:	200d      	movs	r0, #13
    2bdc:	4b15      	ldr	r3, [pc, #84]	; (2c34 <m2m_wifi_connect_sc+0x470>)
    2bde:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2be0:	2397      	movs	r3, #151	; 0x97
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	22f4      	movs	r2, #244	; 0xf4
    2be6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2be8:	e010      	b.n	2c0c <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    2bea:	2397      	movs	r3, #151	; 0x97
    2bec:	18fc      	adds	r4, r7, r3
    2bee:	2314      	movs	r3, #20
    2bf0:	18fa      	adds	r2, r7, r3
    2bf2:	2300      	movs	r3, #0
    2bf4:	9302      	str	r3, [sp, #8]
    2bf6:	2300      	movs	r3, #0
    2bf8:	9301      	str	r3, [sp, #4]
    2bfa:	2300      	movs	r3, #0
    2bfc:	9300      	str	r3, [sp, #0]
    2bfe:	236c      	movs	r3, #108	; 0x6c
    2c00:	2128      	movs	r1, #40	; 0x28
    2c02:	2001      	movs	r0, #1
    2c04:	4d0c      	ldr	r5, [pc, #48]	; (2c38 <m2m_wifi_connect_sc+0x474>)
    2c06:	47a8      	blx	r5
    2c08:	0003      	movs	r3, r0
    2c0a:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    2c0c:	2397      	movs	r3, #151	; 0x97
    2c0e:	18fb      	adds	r3, r7, r3
    2c10:	781b      	ldrb	r3, [r3, #0]
    2c12:	b25b      	sxtb	r3, r3
}
    2c14:	0018      	movs	r0, r3
    2c16:	46bd      	mov	sp, r7
    2c18:	b026      	add	sp, #152	; 0x98
    2c1a:	bdb0      	pop	{r4, r5, r7, pc}
    2c1c:	00000277 	.word	0x00000277
    2c20:	0001303c 	.word	0x0001303c
    2c24:	00012c98 	.word	0x00012c98
    2c28:	0000e7e5 	.word	0x0000e7e5
    2c2c:	00012f60 	.word	0x00012f60
    2c30:	0000e901 	.word	0x0000e901
    2c34:	0000e819 	.word	0x0000e819
    2c38:	00001699 	.word	0x00001699

00002c3c <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    2c40:	2300      	movs	r3, #0
}
    2c42:	0018      	movs	r0, r3
    2c44:	46bd      	mov	sp, r7
    2c46:	bd80      	pop	{r7, pc}

00002c48 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2c48:	b590      	push	{r4, r7, lr}
    2c4a:	b087      	sub	sp, #28
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2c50:	2317      	movs	r3, #23
    2c52:	18fb      	adds	r3, r7, r3
    2c54:	2200      	movs	r2, #0
    2c56:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2c5c:	693b      	ldr	r3, [r7, #16]
    2c5e:	2280      	movs	r2, #128	; 0x80
    2c60:	0052      	lsls	r2, r2, #1
    2c62:	4313      	orrs	r3, r2
    2c64:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2c66:	693a      	ldr	r2, [r7, #16]
    2c68:	23a5      	movs	r3, #165	; 0xa5
    2c6a:	015b      	lsls	r3, r3, #5
    2c6c:	0011      	movs	r1, r2
    2c6e:	0018      	movs	r0, r3
    2c70:	4b12      	ldr	r3, [pc, #72]	; (2cbc <chip_apply_conf+0x74>)
    2c72:	4798      	blx	r3
		if(val32 != 0) {		
    2c74:	693b      	ldr	r3, [r7, #16]
    2c76:	2b00      	cmp	r3, #0
    2c78:	d018      	beq.n	2cac <chip_apply_conf+0x64>
			uint32 reg = 0;
    2c7a:	2300      	movs	r3, #0
    2c7c:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2c7e:	2317      	movs	r3, #23
    2c80:	18fc      	adds	r4, r7, r3
    2c82:	230c      	movs	r3, #12
    2c84:	18fa      	adds	r2, r7, r3
    2c86:	23a5      	movs	r3, #165	; 0xa5
    2c88:	015b      	lsls	r3, r3, #5
    2c8a:	0011      	movs	r1, r2
    2c8c:	0018      	movs	r0, r3
    2c8e:	4b0c      	ldr	r3, [pc, #48]	; (2cc0 <chip_apply_conf+0x78>)
    2c90:	4798      	blx	r3
    2c92:	0003      	movs	r3, r0
    2c94:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    2c96:	2317      	movs	r3, #23
    2c98:	18fb      	adds	r3, r7, r3
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	b25b      	sxtb	r3, r3
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d1e1      	bne.n	2c66 <chip_apply_conf+0x1e>
				if(reg == val32)
    2ca2:	68fa      	ldr	r2, [r7, #12]
    2ca4:	693b      	ldr	r3, [r7, #16]
    2ca6:	429a      	cmp	r2, r3
    2ca8:	d002      	beq.n	2cb0 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    2caa:	e7dc      	b.n	2c66 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    2cac:	46c0      	nop			; (mov r8, r8)
    2cae:	e000      	b.n	2cb2 <chip_apply_conf+0x6a>
					break;
    2cb0:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    2cb2:	2300      	movs	r3, #0
}
    2cb4:	0018      	movs	r0, r3
    2cb6:	46bd      	mov	sp, r7
    2cb8:	b007      	add	sp, #28
    2cba:	bd90      	pop	{r4, r7, pc}
    2cbc:	00003499 	.word	0x00003499
    2cc0:	00003475 	.word	0x00003475

00002cc4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2cc4:	b590      	push	{r4, r7, lr}
    2cc6:	b083      	sub	sp, #12
    2cc8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2cca:	2300      	movs	r3, #0
    2ccc:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    2cce:	1dfb      	adds	r3, r7, #7
    2cd0:	2200      	movs	r2, #0
    2cd2:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2cd4:	1dfc      	adds	r4, r7, #7
    2cd6:	003b      	movs	r3, r7
    2cd8:	4a24      	ldr	r2, [pc, #144]	; (2d6c <enable_interrupts+0xa8>)
    2cda:	0019      	movs	r1, r3
    2cdc:	0010      	movs	r0, r2
    2cde:	4b24      	ldr	r3, [pc, #144]	; (2d70 <enable_interrupts+0xac>)
    2ce0:	4798      	blx	r3
    2ce2:	0003      	movs	r3, r0
    2ce4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2ce6:	1dfb      	adds	r3, r7, #7
    2ce8:	781b      	ldrb	r3, [r3, #0]
    2cea:	b25b      	sxtb	r3, r3
    2cec:	2b00      	cmp	r3, #0
    2cee:	d131      	bne.n	2d54 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    2cf0:	683b      	ldr	r3, [r7, #0]
    2cf2:	2280      	movs	r2, #128	; 0x80
    2cf4:	0052      	lsls	r2, r2, #1
    2cf6:	4313      	orrs	r3, r2
    2cf8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    2cfa:	683b      	ldr	r3, [r7, #0]
    2cfc:	1dfc      	adds	r4, r7, #7
    2cfe:	4a1b      	ldr	r2, [pc, #108]	; (2d6c <enable_interrupts+0xa8>)
    2d00:	0019      	movs	r1, r3
    2d02:	0010      	movs	r0, r2
    2d04:	4b1b      	ldr	r3, [pc, #108]	; (2d74 <enable_interrupts+0xb0>)
    2d06:	4798      	blx	r3
    2d08:	0003      	movs	r3, r0
    2d0a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2d0c:	1dfb      	adds	r3, r7, #7
    2d0e:	781b      	ldrb	r3, [r3, #0]
    2d10:	b25b      	sxtb	r3, r3
    2d12:	2b00      	cmp	r3, #0
    2d14:	d120      	bne.n	2d58 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2d16:	1dfc      	adds	r4, r7, #7
    2d18:	003a      	movs	r2, r7
    2d1a:	23d0      	movs	r3, #208	; 0xd0
    2d1c:	015b      	lsls	r3, r3, #5
    2d1e:	0011      	movs	r1, r2
    2d20:	0018      	movs	r0, r3
    2d22:	4b13      	ldr	r3, [pc, #76]	; (2d70 <enable_interrupts+0xac>)
    2d24:	4798      	blx	r3
    2d26:	0003      	movs	r3, r0
    2d28:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2d2a:	1dfb      	adds	r3, r7, #7
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	b25b      	sxtb	r3, r3
    2d30:	2b00      	cmp	r3, #0
    2d32:	d113      	bne.n	2d5c <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    2d34:	683b      	ldr	r3, [r7, #0]
    2d36:	2280      	movs	r2, #128	; 0x80
    2d38:	0252      	lsls	r2, r2, #9
    2d3a:	4313      	orrs	r3, r2
    2d3c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2d3e:	683a      	ldr	r2, [r7, #0]
    2d40:	1dfc      	adds	r4, r7, #7
    2d42:	23d0      	movs	r3, #208	; 0xd0
    2d44:	015b      	lsls	r3, r3, #5
    2d46:	0011      	movs	r1, r2
    2d48:	0018      	movs	r0, r3
    2d4a:	4b0a      	ldr	r3, [pc, #40]	; (2d74 <enable_interrupts+0xb0>)
    2d4c:	4798      	blx	r3
    2d4e:	0003      	movs	r3, r0
    2d50:	7023      	strb	r3, [r4, #0]
    2d52:	e004      	b.n	2d5e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2d54:	46c0      	nop			; (mov r8, r8)
    2d56:	e002      	b.n	2d5e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2d58:	46c0      	nop			; (mov r8, r8)
    2d5a:	e000      	b.n	2d5e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2d5c:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    2d5e:	1dfb      	adds	r3, r7, #7
    2d60:	781b      	ldrb	r3, [r3, #0]
    2d62:	b25b      	sxtb	r3, r3
}
    2d64:	0018      	movs	r0, r3
    2d66:	46bd      	mov	sp, r7
    2d68:	b003      	add	sp, #12
    2d6a:	bd90      	pop	{r4, r7, pc}
    2d6c:	00001408 	.word	0x00001408
    2d70:	00003475 	.word	0x00003475
    2d74:	00003499 	.word	0x00003499

00002d78 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2d78:	b580      	push	{r7, lr}
    2d7a:	b082      	sub	sp, #8
    2d7c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    2d7e:	4b32      	ldr	r3, [pc, #200]	; (2e48 <nmi_get_chipid+0xd0>)
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	2b00      	cmp	r3, #0
    2d84:	d159      	bne.n	2e3a <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2d86:	4a30      	ldr	r2, [pc, #192]	; (2e48 <nmi_get_chipid+0xd0>)
    2d88:	2380      	movs	r3, #128	; 0x80
    2d8a:	015b      	lsls	r3, r3, #5
    2d8c:	0011      	movs	r1, r2
    2d8e:	0018      	movs	r0, r3
    2d90:	4b2e      	ldr	r3, [pc, #184]	; (2e4c <nmi_get_chipid+0xd4>)
    2d92:	4798      	blx	r3
    2d94:	1e03      	subs	r3, r0, #0
    2d96:	d004      	beq.n	2da2 <nmi_get_chipid+0x2a>
			chipid = 0;
    2d98:	4b2b      	ldr	r3, [pc, #172]	; (2e48 <nmi_get_chipid+0xd0>)
    2d9a:	2200      	movs	r2, #0
    2d9c:	601a      	str	r2, [r3, #0]
			return 0;
    2d9e:	2300      	movs	r3, #0
    2da0:	e04d      	b.n	2e3e <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2da2:	1d3b      	adds	r3, r7, #4
    2da4:	4a2a      	ldr	r2, [pc, #168]	; (2e50 <nmi_get_chipid+0xd8>)
    2da6:	0019      	movs	r1, r3
    2da8:	0010      	movs	r0, r2
    2daa:	4b28      	ldr	r3, [pc, #160]	; (2e4c <nmi_get_chipid+0xd4>)
    2dac:	4798      	blx	r3
    2dae:	1e03      	subs	r3, r0, #0
    2db0:	d004      	beq.n	2dbc <nmi_get_chipid+0x44>
			chipid = 0;
    2db2:	4b25      	ldr	r3, [pc, #148]	; (2e48 <nmi_get_chipid+0xd0>)
    2db4:	2200      	movs	r2, #0
    2db6:	601a      	str	r2, [r3, #0]
			return 0;
    2db8:	2300      	movs	r3, #0
    2dba:	e040      	b.n	2e3e <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    2dbc:	4b22      	ldr	r3, [pc, #136]	; (2e48 <nmi_get_chipid+0xd0>)
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	4a24      	ldr	r2, [pc, #144]	; (2e54 <nmi_get_chipid+0xdc>)
    2dc2:	4293      	cmp	r3, r2
    2dc4:	d106      	bne.n	2dd4 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	2b01      	cmp	r3, #1
    2dca:	d029      	beq.n	2e20 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    2dcc:	4b1e      	ldr	r3, [pc, #120]	; (2e48 <nmi_get_chipid+0xd0>)
    2dce:	4a22      	ldr	r2, [pc, #136]	; (2e58 <nmi_get_chipid+0xe0>)
    2dd0:	601a      	str	r2, [r3, #0]
    2dd2:	e025      	b.n	2e20 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    2dd4:	4b1c      	ldr	r3, [pc, #112]	; (2e48 <nmi_get_chipid+0xd0>)
    2dd6:	681b      	ldr	r3, [r3, #0]
    2dd8:	4a20      	ldr	r2, [pc, #128]	; (2e5c <nmi_get_chipid+0xe4>)
    2dda:	4293      	cmp	r3, r2
    2ddc:	d10d      	bne.n	2dfa <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    2dde:	687b      	ldr	r3, [r7, #4]
    2de0:	2b03      	cmp	r3, #3
    2de2:	d01d      	beq.n	2e20 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	2b04      	cmp	r3, #4
    2de8:	d103      	bne.n	2df2 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    2dea:	4b17      	ldr	r3, [pc, #92]	; (2e48 <nmi_get_chipid+0xd0>)
    2dec:	4a1c      	ldr	r2, [pc, #112]	; (2e60 <nmi_get_chipid+0xe8>)
    2dee:	601a      	str	r2, [r3, #0]
    2df0:	e016      	b.n	2e20 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    2df2:	4b15      	ldr	r3, [pc, #84]	; (2e48 <nmi_get_chipid+0xd0>)
    2df4:	4a1b      	ldr	r2, [pc, #108]	; (2e64 <nmi_get_chipid+0xec>)
    2df6:	601a      	str	r2, [r3, #0]
    2df8:	e012      	b.n	2e20 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    2dfa:	4b13      	ldr	r3, [pc, #76]	; (2e48 <nmi_get_chipid+0xd0>)
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	4a1a      	ldr	r2, [pc, #104]	; (2e68 <nmi_get_chipid+0xf0>)
    2e00:	4293      	cmp	r3, r2
    2e02:	d10d      	bne.n	2e20 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    2e04:	4a10      	ldr	r2, [pc, #64]	; (2e48 <nmi_get_chipid+0xd0>)
    2e06:	23ec      	movs	r3, #236	; 0xec
    2e08:	039b      	lsls	r3, r3, #14
    2e0a:	0011      	movs	r1, r2
    2e0c:	0018      	movs	r0, r3
    2e0e:	4b0f      	ldr	r3, [pc, #60]	; (2e4c <nmi_get_chipid+0xd4>)
    2e10:	4798      	blx	r3
    2e12:	1e03      	subs	r3, r0, #0
    2e14:	d004      	beq.n	2e20 <nmi_get_chipid+0xa8>
			chipid = 0;
    2e16:	4b0c      	ldr	r3, [pc, #48]	; (2e48 <nmi_get_chipid+0xd0>)
    2e18:	2200      	movs	r2, #0
    2e1a:	601a      	str	r2, [r3, #0]
			return 0;
    2e1c:	2300      	movs	r3, #0
    2e1e:	e00e      	b.n	2e3e <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    2e20:	4b09      	ldr	r3, [pc, #36]	; (2e48 <nmi_get_chipid+0xd0>)
    2e22:	681b      	ldr	r3, [r3, #0]
    2e24:	4a11      	ldr	r2, [pc, #68]	; (2e6c <nmi_get_chipid+0xf4>)
    2e26:	401a      	ands	r2, r3
    2e28:	4b07      	ldr	r3, [pc, #28]	; (2e48 <nmi_get_chipid+0xd0>)
    2e2a:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    2e2c:	4b06      	ldr	r3, [pc, #24]	; (2e48 <nmi_get_chipid+0xd0>)
    2e2e:	681b      	ldr	r3, [r3, #0]
    2e30:	22a0      	movs	r2, #160	; 0xa0
    2e32:	02d2      	lsls	r2, r2, #11
    2e34:	431a      	orrs	r2, r3
    2e36:	4b04      	ldr	r3, [pc, #16]	; (2e48 <nmi_get_chipid+0xd0>)
    2e38:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    2e3a:	4b03      	ldr	r3, [pc, #12]	; (2e48 <nmi_get_chipid+0xd0>)
    2e3c:	681b      	ldr	r3, [r3, #0]
}
    2e3e:	0018      	movs	r0, r3
    2e40:	46bd      	mov	sp, r7
    2e42:	b002      	add	sp, #8
    2e44:	bd80      	pop	{r7, pc}
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	20000210 	.word	0x20000210
    2e4c:	00003475 	.word	0x00003475
    2e50:	000013f4 	.word	0x000013f4
    2e54:	001002a0 	.word	0x001002a0
    2e58:	001002a1 	.word	0x001002a1
    2e5c:	001002b0 	.word	0x001002b0
    2e60:	001002b1 	.word	0x001002b1
    2e64:	001002b2 	.word	0x001002b2
    2e68:	001000f0 	.word	0x001000f0
    2e6c:	fff0ffff 	.word	0xfff0ffff

00002e70 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2e70:	b590      	push	{r4, r7, lr}
    2e72:	b083      	sub	sp, #12
    2e74:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    2e76:	1dfb      	adds	r3, r7, #7
    2e78:	2200      	movs	r2, #0
    2e7a:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2e7c:	1dfc      	adds	r4, r7, #7
    2e7e:	003b      	movs	r3, r7
    2e80:	0019      	movs	r1, r3
    2e82:	2010      	movs	r0, #16
    2e84:	4b2e      	ldr	r3, [pc, #184]	; (2f40 <chip_sleep+0xd0>)
    2e86:	4798      	blx	r3
    2e88:	0003      	movs	r3, r0
    2e8a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    2e8c:	1dfb      	adds	r3, r7, #7
    2e8e:	781b      	ldrb	r3, [r3, #0]
    2e90:	b25b      	sxtb	r3, r3
    2e92:	2b00      	cmp	r3, #0
    2e94:	d145      	bne.n	2f22 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    2e96:	683b      	ldr	r3, [r7, #0]
    2e98:	2201      	movs	r2, #1
    2e9a:	4013      	ands	r3, r2
    2e9c:	d000      	beq.n	2ea0 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2e9e:	e7ed      	b.n	2e7c <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    2ea0:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2ea2:	1dfc      	adds	r4, r7, #7
    2ea4:	003b      	movs	r3, r7
    2ea6:	0019      	movs	r1, r3
    2ea8:	2001      	movs	r0, #1
    2eaa:	4b25      	ldr	r3, [pc, #148]	; (2f40 <chip_sleep+0xd0>)
    2eac:	4798      	blx	r3
    2eae:	0003      	movs	r3, r0
    2eb0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2eb2:	1dfb      	adds	r3, r7, #7
    2eb4:	781b      	ldrb	r3, [r3, #0]
    2eb6:	b25b      	sxtb	r3, r3
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d134      	bne.n	2f26 <chip_sleep+0xb6>
	if(reg & NBIT1)
    2ebc:	683b      	ldr	r3, [r7, #0]
    2ebe:	2202      	movs	r2, #2
    2ec0:	4013      	ands	r3, r2
    2ec2:	d010      	beq.n	2ee6 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    2ec4:	683b      	ldr	r3, [r7, #0]
    2ec6:	2202      	movs	r2, #2
    2ec8:	4393      	bics	r3, r2
    2eca:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	1dfc      	adds	r4, r7, #7
    2ed0:	0019      	movs	r1, r3
    2ed2:	2001      	movs	r0, #1
    2ed4:	4b1b      	ldr	r3, [pc, #108]	; (2f44 <chip_sleep+0xd4>)
    2ed6:	4798      	blx	r3
    2ed8:	0003      	movs	r3, r0
    2eda:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    2edc:	1dfb      	adds	r3, r7, #7
    2ede:	781b      	ldrb	r3, [r3, #0]
    2ee0:	b25b      	sxtb	r3, r3
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d121      	bne.n	2f2a <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2ee6:	1dfc      	adds	r4, r7, #7
    2ee8:	003b      	movs	r3, r7
    2eea:	0019      	movs	r1, r3
    2eec:	200b      	movs	r0, #11
    2eee:	4b14      	ldr	r3, [pc, #80]	; (2f40 <chip_sleep+0xd0>)
    2ef0:	4798      	blx	r3
    2ef2:	0003      	movs	r3, r0
    2ef4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2ef6:	1dfb      	adds	r3, r7, #7
    2ef8:	781b      	ldrb	r3, [r3, #0]
    2efa:	b25b      	sxtb	r3, r3
    2efc:	2b00      	cmp	r3, #0
    2efe:	d116      	bne.n	2f2e <chip_sleep+0xbe>
	if(reg & NBIT0)
    2f00:	683b      	ldr	r3, [r7, #0]
    2f02:	2201      	movs	r2, #1
    2f04:	4013      	ands	r3, r2
    2f06:	d013      	beq.n	2f30 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    2f08:	683b      	ldr	r3, [r7, #0]
    2f0a:	2201      	movs	r2, #1
    2f0c:	4393      	bics	r3, r2
    2f0e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    2f10:	683b      	ldr	r3, [r7, #0]
    2f12:	1dfc      	adds	r4, r7, #7
    2f14:	0019      	movs	r1, r3
    2f16:	200b      	movs	r0, #11
    2f18:	4b0a      	ldr	r3, [pc, #40]	; (2f44 <chip_sleep+0xd4>)
    2f1a:	4798      	blx	r3
    2f1c:	0003      	movs	r3, r0
    2f1e:	7023      	strb	r3, [r4, #0]
    2f20:	e006      	b.n	2f30 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	e004      	b.n	2f30 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	e002      	b.n	2f30 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	e000      	b.n	2f30 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2f2e:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    2f30:	1dfb      	adds	r3, r7, #7
    2f32:	781b      	ldrb	r3, [r3, #0]
    2f34:	b25b      	sxtb	r3, r3
}
    2f36:	0018      	movs	r0, r3
    2f38:	46bd      	mov	sp, r7
    2f3a:	b003      	add	sp, #12
    2f3c:	bd90      	pop	{r4, r7, pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	00003475 	.word	0x00003475
    2f44:	00003499 	.word	0x00003499

00002f48 <chip_wake>:
sint8 chip_wake(void)
{
    2f48:	b590      	push	{r4, r7, lr}
    2f4a:	b085      	sub	sp, #20
    2f4c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2f4e:	230f      	movs	r3, #15
    2f50:	18fb      	adds	r3, r7, r3
    2f52:	2200      	movs	r2, #0
    2f54:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2f56:	2300      	movs	r3, #0
    2f58:	607b      	str	r3, [r7, #4]
    2f5a:	2300      	movs	r3, #0
    2f5c:	603b      	str	r3, [r7, #0]
    2f5e:	2300      	movs	r3, #0
    2f60:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2f62:	230f      	movs	r3, #15
    2f64:	18fc      	adds	r4, r7, r3
    2f66:	1d3b      	adds	r3, r7, #4
    2f68:	0019      	movs	r1, r3
    2f6a:	200b      	movs	r0, #11
    2f6c:	4b4c      	ldr	r3, [pc, #304]	; (30a0 <chip_wake+0x158>)
    2f6e:	4798      	blx	r3
    2f70:	0003      	movs	r3, r0
    2f72:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2f74:	230f      	movs	r3, #15
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	781b      	ldrb	r3, [r3, #0]
    2f7a:	b25b      	sxtb	r3, r3
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	d000      	beq.n	2f82 <chip_wake+0x3a>
    2f80:	e07f      	b.n	3082 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	2201      	movs	r2, #1
    2f86:	4013      	ands	r3, r2
    2f88:	d110      	bne.n	2fac <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2f8a:	687b      	ldr	r3, [r7, #4]
    2f8c:	2201      	movs	r2, #1
    2f8e:	4313      	orrs	r3, r2
    2f90:	220f      	movs	r2, #15
    2f92:	18bc      	adds	r4, r7, r2
    2f94:	0019      	movs	r1, r3
    2f96:	200b      	movs	r0, #11
    2f98:	4b42      	ldr	r3, [pc, #264]	; (30a4 <chip_wake+0x15c>)
    2f9a:	4798      	blx	r3
    2f9c:	0003      	movs	r3, r0
    2f9e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2fa0:	230f      	movs	r3, #15
    2fa2:	18fb      	adds	r3, r7, r3
    2fa4:	781b      	ldrb	r3, [r3, #0]
    2fa6:	b25b      	sxtb	r3, r3
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d16c      	bne.n	3086 <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2fac:	230f      	movs	r3, #15
    2fae:	18fc      	adds	r4, r7, r3
    2fb0:	1d3b      	adds	r3, r7, #4
    2fb2:	0019      	movs	r1, r3
    2fb4:	2001      	movs	r0, #1
    2fb6:	4b3a      	ldr	r3, [pc, #232]	; (30a0 <chip_wake+0x158>)
    2fb8:	4798      	blx	r3
    2fba:	0003      	movs	r3, r0
    2fbc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2fbe:	230f      	movs	r3, #15
    2fc0:	18fb      	adds	r3, r7, r3
    2fc2:	781b      	ldrb	r3, [r3, #0]
    2fc4:	b25b      	sxtb	r3, r3
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d15f      	bne.n	308a <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	2202      	movs	r2, #2
    2fce:	4013      	ands	r3, r2
    2fd0:	d110      	bne.n	2ff4 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	2202      	movs	r2, #2
    2fd6:	4313      	orrs	r3, r2
    2fd8:	220f      	movs	r2, #15
    2fda:	18bc      	adds	r4, r7, r2
    2fdc:	0019      	movs	r1, r3
    2fde:	2001      	movs	r0, #1
    2fe0:	4b30      	ldr	r3, [pc, #192]	; (30a4 <chip_wake+0x15c>)
    2fe2:	4798      	blx	r3
    2fe4:	0003      	movs	r3, r0
    2fe6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2fe8:	230f      	movs	r3, #15
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	781b      	ldrb	r3, [r3, #0]
    2fee:	b25b      	sxtb	r3, r3
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d14c      	bne.n	308e <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    2ff4:	230f      	movs	r3, #15
    2ff6:	18fc      	adds	r4, r7, r3
    2ff8:	003b      	movs	r3, r7
    2ffa:	0019      	movs	r1, r3
    2ffc:	200f      	movs	r0, #15
    2ffe:	4b28      	ldr	r3, [pc, #160]	; (30a0 <chip_wake+0x158>)
    3000:	4798      	blx	r3
    3002:	0003      	movs	r3, r0
    3004:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    3006:	230f      	movs	r3, #15
    3008:	18fb      	adds	r3, r7, r3
    300a:	781b      	ldrb	r3, [r3, #0]
    300c:	b25b      	sxtb	r3, r3
    300e:	2b00      	cmp	r3, #0
    3010:	d013      	beq.n	303a <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    3012:	23aa      	movs	r3, #170	; 0xaa
    3014:	005a      	lsls	r2, r3, #1
    3016:	4924      	ldr	r1, [pc, #144]	; (30a8 <chip_wake+0x160>)
    3018:	4b24      	ldr	r3, [pc, #144]	; (30ac <chip_wake+0x164>)
    301a:	0018      	movs	r0, r3
    301c:	4b24      	ldr	r3, [pc, #144]	; (30b0 <chip_wake+0x168>)
    301e:	4798      	blx	r3
    3020:	230f      	movs	r3, #15
    3022:	18fb      	adds	r3, r7, r3
    3024:	2100      	movs	r1, #0
    3026:	5659      	ldrsb	r1, [r3, r1]
    3028:	683a      	ldr	r2, [r7, #0]
    302a:	4b22      	ldr	r3, [pc, #136]	; (30b4 <chip_wake+0x16c>)
    302c:	0018      	movs	r0, r3
    302e:	4b20      	ldr	r3, [pc, #128]	; (30b0 <chip_wake+0x168>)
    3030:	4798      	blx	r3
    3032:	200d      	movs	r0, #13
    3034:	4b20      	ldr	r3, [pc, #128]	; (30b8 <chip_wake+0x170>)
    3036:	4798      	blx	r3
			goto _WAKE_EXIT;
    3038:	e02a      	b.n	3090 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    303a:	683b      	ldr	r3, [r7, #0]
    303c:	2204      	movs	r2, #4
    303e:	4013      	ands	r3, r2
    3040:	d11b      	bne.n	307a <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    3042:	2002      	movs	r0, #2
    3044:	4b1d      	ldr	r3, [pc, #116]	; (30bc <chip_wake+0x174>)
    3046:	4798      	blx	r3
		trials++;
    3048:	68bb      	ldr	r3, [r7, #8]
    304a:	3301      	adds	r3, #1
    304c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    304e:	68bb      	ldr	r3, [r7, #8]
    3050:	2b04      	cmp	r3, #4
    3052:	d9cf      	bls.n	2ff4 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    3054:	23af      	movs	r3, #175	; 0xaf
    3056:	005a      	lsls	r2, r3, #1
    3058:	4913      	ldr	r1, [pc, #76]	; (30a8 <chip_wake+0x160>)
    305a:	4b14      	ldr	r3, [pc, #80]	; (30ac <chip_wake+0x164>)
    305c:	0018      	movs	r0, r3
    305e:	4b14      	ldr	r3, [pc, #80]	; (30b0 <chip_wake+0x168>)
    3060:	4798      	blx	r3
    3062:	4b17      	ldr	r3, [pc, #92]	; (30c0 <chip_wake+0x178>)
    3064:	0018      	movs	r0, r3
    3066:	4b17      	ldr	r3, [pc, #92]	; (30c4 <chip_wake+0x17c>)
    3068:	4798      	blx	r3
    306a:	200d      	movs	r0, #13
    306c:	4b12      	ldr	r3, [pc, #72]	; (30b8 <chip_wake+0x170>)
    306e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    3070:	230f      	movs	r3, #15
    3072:	18fb      	adds	r3, r7, r3
    3074:	22fc      	movs	r2, #252	; 0xfc
    3076:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    3078:	e00a      	b.n	3090 <chip_wake+0x148>
			break;
    307a:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    307c:	4b12      	ldr	r3, [pc, #72]	; (30c8 <chip_wake+0x180>)
    307e:	4798      	blx	r3
    3080:	e006      	b.n	3090 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	e004      	b.n	3090 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	e002      	b.n	3090 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	e000      	b.n	3090 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    308e:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    3090:	230f      	movs	r3, #15
    3092:	18fb      	adds	r3, r7, r3
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	b25b      	sxtb	r3, r3
}
    3098:	0018      	movs	r0, r3
    309a:	46bd      	mov	sp, r7
    309c:	b005      	add	sp, #20
    309e:	bd90      	pop	{r4, r7, pc}
    30a0:	00003475 	.word	0x00003475
    30a4:	00003499 	.word	0x00003499
    30a8:	000130d4 	.word	0x000130d4
    30ac:	00013050 	.word	0x00013050
    30b0:	0000e7e5 	.word	0x0000e7e5
    30b4:	00013064 	.word	0x00013064
    30b8:	0000e819 	.word	0x0000e819
    30bc:	00000b49 	.word	0x00000b49
    30c0:	0001307c 	.word	0x0001307c
    30c4:	0000e901 	.word	0x0000e901
    30c8:	00003435 	.word	0x00003435

000030cc <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b088      	sub	sp, #32
    30d0:	af00      	add	r7, sp, #0
    30d2:	0002      	movs	r2, r0
    30d4:	1dfb      	adds	r3, r7, #7
    30d6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    30d8:	2313      	movs	r3, #19
    30da:	18fb      	adds	r3, r7, r3
    30dc:	2200      	movs	r2, #0
    30de:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    30e0:	2300      	movs	r3, #0
    30e2:	61fb      	str	r3, [r7, #28]
    30e4:	2300      	movs	r3, #0
    30e6:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    30e8:	2300      	movs	r3, #0
    30ea:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    30ec:	4b4a      	ldr	r3, [pc, #296]	; (3218 <wait_for_bootrom+0x14c>)
    30ee:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    30f0:	2300      	movs	r3, #0
    30f2:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    30f4:	4b49      	ldr	r3, [pc, #292]	; (321c <wait_for_bootrom+0x150>)
    30f6:	0018      	movs	r0, r3
    30f8:	4b49      	ldr	r3, [pc, #292]	; (3220 <wait_for_bootrom+0x154>)
    30fa:	4798      	blx	r3
    30fc:	0003      	movs	r3, r0
    30fe:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    3100:	69fb      	ldr	r3, [r7, #28]
    3102:	2b00      	cmp	r3, #0
    3104:	db03      	blt.n	310e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    3106:	2001      	movs	r0, #1
    3108:	4b46      	ldr	r3, [pc, #280]	; (3224 <wait_for_bootrom+0x158>)
    310a:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    310c:	e7f2      	b.n	30f4 <wait_for_bootrom+0x28>
			break;
    310e:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    3110:	4b45      	ldr	r3, [pc, #276]	; (3228 <wait_for_bootrom+0x15c>)
    3112:	0018      	movs	r0, r3
    3114:	4b42      	ldr	r3, [pc, #264]	; (3220 <wait_for_bootrom+0x154>)
    3116:	4798      	blx	r3
    3118:	0003      	movs	r3, r0
    311a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    311c:	69fb      	ldr	r3, [r7, #28]
    311e:	2201      	movs	r2, #1
    3120:	4013      	ands	r3, r2
    3122:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    3124:	69fb      	ldr	r3, [r7, #28]
    3126:	2b00      	cmp	r3, #0
    3128:	d112      	bne.n	3150 <wait_for_bootrom+0x84>
	{
		reg = 0;
    312a:	2300      	movs	r3, #0
    312c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    312e:	e00b      	b.n	3148 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    3130:	2001      	movs	r0, #1
    3132:	4b3c      	ldr	r3, [pc, #240]	; (3224 <wait_for_bootrom+0x158>)
    3134:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    3136:	4b3d      	ldr	r3, [pc, #244]	; (322c <wait_for_bootrom+0x160>)
    3138:	0018      	movs	r0, r3
    313a:	4b39      	ldr	r3, [pc, #228]	; (3220 <wait_for_bootrom+0x154>)
    313c:	4798      	blx	r3
    313e:	0003      	movs	r3, r0
    3140:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    3142:	69bb      	ldr	r3, [r7, #24]
    3144:	3301      	adds	r3, #1
    3146:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    3148:	69fb      	ldr	r3, [r7, #28]
    314a:	4a39      	ldr	r2, [pc, #228]	; (3230 <wait_for_bootrom+0x164>)
    314c:	4293      	cmp	r3, r2
    314e:	d1ef      	bne.n	3130 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    3150:	1dfb      	adds	r3, r7, #7
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	2b02      	cmp	r3, #2
    3156:	d10d      	bne.n	3174 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    3158:	4a36      	ldr	r2, [pc, #216]	; (3234 <wait_for_bootrom+0x168>)
    315a:	4b37      	ldr	r3, [pc, #220]	; (3238 <wait_for_bootrom+0x16c>)
    315c:	0011      	movs	r1, r2
    315e:	0018      	movs	r0, r3
    3160:	4b36      	ldr	r3, [pc, #216]	; (323c <wait_for_bootrom+0x170>)
    3162:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    3164:	2380      	movs	r3, #128	; 0x80
    3166:	035b      	lsls	r3, r3, #13
    3168:	4a35      	ldr	r2, [pc, #212]	; (3240 <wait_for_bootrom+0x174>)
    316a:	0019      	movs	r1, r3
    316c:	0010      	movs	r0, r2
    316e:	4b33      	ldr	r3, [pc, #204]	; (323c <wait_for_bootrom+0x170>)
    3170:	4798      	blx	r3
    3172:	e022      	b.n	31ba <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    3174:	1dfb      	adds	r3, r7, #7
    3176:	781b      	ldrb	r3, [r3, #0]
    3178:	2b03      	cmp	r3, #3
    317a:	d10b      	bne.n	3194 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    317c:	4a2d      	ldr	r2, [pc, #180]	; (3234 <wait_for_bootrom+0x168>)
    317e:	4b2e      	ldr	r3, [pc, #184]	; (3238 <wait_for_bootrom+0x16c>)
    3180:	0011      	movs	r1, r2
    3182:	0018      	movs	r0, r3
    3184:	4b2d      	ldr	r3, [pc, #180]	; (323c <wait_for_bootrom+0x170>)
    3186:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    3188:	4b2d      	ldr	r3, [pc, #180]	; (3240 <wait_for_bootrom+0x174>)
    318a:	2100      	movs	r1, #0
    318c:	0018      	movs	r0, r3
    318e:	4b2b      	ldr	r3, [pc, #172]	; (323c <wait_for_bootrom+0x170>)
    3190:	4798      	blx	r3
    3192:	e012      	b.n	31ba <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    3194:	1dfb      	adds	r3, r7, #7
    3196:	781b      	ldrb	r3, [r3, #0]
    3198:	2b04      	cmp	r3, #4
    319a:	d108      	bne.n	31ae <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    319c:	2380      	movs	r3, #128	; 0x80
    319e:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    31a0:	68fb      	ldr	r3, [r7, #12]
    31a2:	4a27      	ldr	r2, [pc, #156]	; (3240 <wait_for_bootrom+0x174>)
    31a4:	0019      	movs	r1, r3
    31a6:	0010      	movs	r0, r2
    31a8:	4b24      	ldr	r3, [pc, #144]	; (323c <wait_for_bootrom+0x170>)
    31aa:	4798      	blx	r3
    31ac:	e005      	b.n	31ba <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	4a23      	ldr	r2, [pc, #140]	; (3240 <wait_for_bootrom+0x174>)
    31b2:	0019      	movs	r1, r3
    31b4:	0010      	movs	r0, r2
    31b6:	4b21      	ldr	r3, [pc, #132]	; (323c <wait_for_bootrom+0x170>)
    31b8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    31ba:	4b22      	ldr	r3, [pc, #136]	; (3244 <wait_for_bootrom+0x178>)
    31bc:	4798      	blx	r3
    31be:	0003      	movs	r3, r0
    31c0:	051b      	lsls	r3, r3, #20
    31c2:	0d1b      	lsrs	r3, r3, #20
    31c4:	4a20      	ldr	r2, [pc, #128]	; (3248 <wait_for_bootrom+0x17c>)
    31c6:	4293      	cmp	r3, r2
    31c8:	d906      	bls.n	31d8 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    31ca:	697b      	ldr	r3, [r7, #20]
    31cc:	2202      	movs	r2, #2
    31ce:	4313      	orrs	r3, r2
    31d0:	0018      	movs	r0, r3
    31d2:	4b1e      	ldr	r3, [pc, #120]	; (324c <wait_for_bootrom+0x180>)
    31d4:	4798      	blx	r3
    31d6:	e003      	b.n	31e0 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    31d8:	697b      	ldr	r3, [r7, #20]
    31da:	0018      	movs	r0, r3
    31dc:	4b1b      	ldr	r3, [pc, #108]	; (324c <wait_for_bootrom+0x180>)
    31de:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    31e0:	4b1b      	ldr	r3, [pc, #108]	; (3250 <wait_for_bootrom+0x184>)
    31e2:	0018      	movs	r0, r3
    31e4:	4b1b      	ldr	r3, [pc, #108]	; (3254 <wait_for_bootrom+0x188>)
    31e6:	4798      	blx	r3
    31e8:	68fa      	ldr	r2, [r7, #12]
    31ea:	4b1b      	ldr	r3, [pc, #108]	; (3258 <wait_for_bootrom+0x18c>)
    31ec:	0011      	movs	r1, r2
    31ee:	0018      	movs	r0, r3
    31f0:	4b18      	ldr	r3, [pc, #96]	; (3254 <wait_for_bootrom+0x188>)
    31f2:	4798      	blx	r3
    31f4:	200d      	movs	r0, #13
    31f6:	4b19      	ldr	r3, [pc, #100]	; (325c <wait_for_bootrom+0x190>)
    31f8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    31fa:	4a19      	ldr	r2, [pc, #100]	; (3260 <wait_for_bootrom+0x194>)
    31fc:	4b0b      	ldr	r3, [pc, #44]	; (322c <wait_for_bootrom+0x160>)
    31fe:	0011      	movs	r1, r2
    3200:	0018      	movs	r0, r3
    3202:	4b0e      	ldr	r3, [pc, #56]	; (323c <wait_for_bootrom+0x170>)
    3204:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    3206:	2313      	movs	r3, #19
    3208:	18fb      	adds	r3, r7, r3
    320a:	781b      	ldrb	r3, [r3, #0]
    320c:	b25b      	sxtb	r3, r3
}
    320e:	0018      	movs	r0, r3
    3210:	46bd      	mov	sp, r7
    3212:	b008      	add	sp, #32
    3214:	bd80      	pop	{r7, pc}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	13521352 	.word	0x13521352
    321c:	00001014 	.word	0x00001014
    3220:	00003455 	.word	0x00003455
    3224:	00000b49 	.word	0x00000b49
    3228:	000207bc 	.word	0x000207bc
    322c:	000c000c 	.word	0x000c000c
    3230:	10add09e 	.word	0x10add09e
    3234:	3c1cd57d 	.word	0x3c1cd57d
    3238:	000207ac 	.word	0x000207ac
    323c:	00003499 	.word	0x00003499
    3240:	0000108c 	.word	0x0000108c
    3244:	00002d79 	.word	0x00002d79
    3248:	0000039f 	.word	0x0000039f
    324c:	00002c49 	.word	0x00002c49
    3250:	00013098 	.word	0x00013098
    3254:	0000e7e5 	.word	0x0000e7e5
    3258:	000130a4 	.word	0x000130a4
    325c:	0000e819 	.word	0x0000e819
    3260:	ef522f61 	.word	0xef522f61

00003264 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    3264:	b580      	push	{r7, lr}
    3266:	b088      	sub	sp, #32
    3268:	af00      	add	r7, sp, #0
    326a:	0002      	movs	r2, r0
    326c:	1dfb      	adds	r3, r7, #7
    326e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    3270:	231f      	movs	r3, #31
    3272:	18fb      	adds	r3, r7, r3
    3274:	2200      	movs	r2, #0
    3276:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    3278:	2300      	movs	r3, #0
    327a:	61bb      	str	r3, [r7, #24]
    327c:	2300      	movs	r3, #0
    327e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    3280:	2301      	movs	r3, #1
    3282:	425b      	negs	r3, r3
    3284:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    3286:	4b1d      	ldr	r3, [pc, #116]	; (32fc <wait_for_firmware_start+0x98>)
    3288:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    328a:	4b1d      	ldr	r3, [pc, #116]	; (3300 <wait_for_firmware_start+0x9c>)
    328c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    328e:	1dfb      	adds	r3, r7, #7
    3290:	781b      	ldrb	r3, [r3, #0]
    3292:	2b02      	cmp	r3, #2
    3294:	d003      	beq.n	329e <wait_for_firmware_start+0x3a>
    3296:	1dfb      	adds	r3, r7, #7
    3298:	781b      	ldrb	r3, [r3, #0]
    329a:	2b03      	cmp	r3, #3
    329c:	d119      	bne.n	32d2 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    329e:	4b19      	ldr	r3, [pc, #100]	; (3304 <wait_for_firmware_start+0xa0>)
    32a0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    32a2:	4b19      	ldr	r3, [pc, #100]	; (3308 <wait_for_firmware_start+0xa4>)
    32a4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    32a6:	e014      	b.n	32d2 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    32a8:	2002      	movs	r0, #2
    32aa:	4b18      	ldr	r3, [pc, #96]	; (330c <wait_for_firmware_start+0xa8>)
    32ac:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    32ae:	68fb      	ldr	r3, [r7, #12]
    32b0:	0018      	movs	r0, r3
    32b2:	4b17      	ldr	r3, [pc, #92]	; (3310 <wait_for_firmware_start+0xac>)
    32b4:	4798      	blx	r3
    32b6:	0003      	movs	r3, r0
    32b8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    32ba:	697b      	ldr	r3, [r7, #20]
    32bc:	3301      	adds	r3, #1
    32be:	617b      	str	r3, [r7, #20]
    32c0:	697a      	ldr	r2, [r7, #20]
    32c2:	693b      	ldr	r3, [r7, #16]
    32c4:	429a      	cmp	r2, r3
    32c6:	d304      	bcc.n	32d2 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    32c8:	231f      	movs	r3, #31
    32ca:	18fb      	adds	r3, r7, r3
    32cc:	22fb      	movs	r2, #251	; 0xfb
    32ce:	701a      	strb	r2, [r3, #0]
			goto ERR;
    32d0:	e00c      	b.n	32ec <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    32d2:	68ba      	ldr	r2, [r7, #8]
    32d4:	69bb      	ldr	r3, [r7, #24]
    32d6:	429a      	cmp	r2, r3
    32d8:	d1e6      	bne.n	32a8 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    32da:	68bb      	ldr	r3, [r7, #8]
    32dc:	4a08      	ldr	r2, [pc, #32]	; (3300 <wait_for_firmware_start+0x9c>)
    32de:	4293      	cmp	r3, r2
    32e0:	d104      	bne.n	32ec <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    32e2:	4b06      	ldr	r3, [pc, #24]	; (32fc <wait_for_firmware_start+0x98>)
    32e4:	2100      	movs	r1, #0
    32e6:	0018      	movs	r0, r3
    32e8:	4b0a      	ldr	r3, [pc, #40]	; (3314 <wait_for_firmware_start+0xb0>)
    32ea:	4798      	blx	r3
	}
ERR:
	return ret;
    32ec:	231f      	movs	r3, #31
    32ee:	18fb      	adds	r3, r7, r3
    32f0:	781b      	ldrb	r3, [r3, #0]
    32f2:	b25b      	sxtb	r3, r3
}
    32f4:	0018      	movs	r0, r3
    32f6:	46bd      	mov	sp, r7
    32f8:	b008      	add	sp, #32
    32fa:	bd80      	pop	{r7, pc}
    32fc:	0000108c 	.word	0x0000108c
    3300:	02532636 	.word	0x02532636
    3304:	000207ac 	.word	0x000207ac
    3308:	d75dc1c3 	.word	0xd75dc1c3
    330c:	00000b49 	.word	0x00000b49
    3310:	00003455 	.word	0x00003455
    3314:	00003499 	.word	0x00003499

00003318 <chip_deinit>:

sint8 chip_deinit(void)
{
    3318:	b590      	push	{r4, r7, lr}
    331a:	b083      	sub	sp, #12
    331c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    331e:	2300      	movs	r3, #0
    3320:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    3322:	1dfc      	adds	r4, r7, #7
    3324:	003a      	movs	r2, r7
    3326:	23a0      	movs	r3, #160	; 0xa0
    3328:	015b      	lsls	r3, r3, #5
    332a:	0011      	movs	r1, r2
    332c:	0018      	movs	r0, r3
    332e:	4b1f      	ldr	r3, [pc, #124]	; (33ac <chip_deinit+0x94>)
    3330:	4798      	blx	r3
    3332:	0003      	movs	r3, r0
    3334:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    3336:	1dfb      	adds	r3, r7, #7
    3338:	781b      	ldrb	r3, [r3, #0]
    333a:	b25b      	sxtb	r3, r3
    333c:	2b00      	cmp	r3, #0
    333e:	d00d      	beq.n	335c <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    3340:	4a1b      	ldr	r2, [pc, #108]	; (33b0 <chip_deinit+0x98>)
    3342:	491c      	ldr	r1, [pc, #112]	; (33b4 <chip_deinit+0x9c>)
    3344:	4b1c      	ldr	r3, [pc, #112]	; (33b8 <chip_deinit+0xa0>)
    3346:	0018      	movs	r0, r3
    3348:	4b1c      	ldr	r3, [pc, #112]	; (33bc <chip_deinit+0xa4>)
    334a:	4798      	blx	r3
    334c:	4b1c      	ldr	r3, [pc, #112]	; (33c0 <chip_deinit+0xa8>)
    334e:	0018      	movs	r0, r3
    3350:	4b1c      	ldr	r3, [pc, #112]	; (33c4 <chip_deinit+0xac>)
    3352:	4798      	blx	r3
    3354:	200d      	movs	r0, #13
    3356:	4b1c      	ldr	r3, [pc, #112]	; (33c8 <chip_deinit+0xb0>)
    3358:	4798      	blx	r3
		goto ERR1;
    335a:	e020      	b.n	339e <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    335c:	683b      	ldr	r3, [r7, #0]
    335e:	4a1b      	ldr	r2, [pc, #108]	; (33cc <chip_deinit+0xb4>)
    3360:	4013      	ands	r3, r2
    3362:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    3364:	683a      	ldr	r2, [r7, #0]
    3366:	1dfc      	adds	r4, r7, #7
    3368:	23a0      	movs	r3, #160	; 0xa0
    336a:	015b      	lsls	r3, r3, #5
    336c:	0011      	movs	r1, r2
    336e:	0018      	movs	r0, r3
    3370:	4b17      	ldr	r3, [pc, #92]	; (33d0 <chip_deinit+0xb8>)
    3372:	4798      	blx	r3
    3374:	0003      	movs	r3, r0
    3376:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    3378:	1dfb      	adds	r3, r7, #7
    337a:	781b      	ldrb	r3, [r3, #0]
    337c:	b25b      	sxtb	r3, r3
    337e:	2b00      	cmp	r3, #0
    3380:	d00d      	beq.n	339e <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    3382:	4a14      	ldr	r2, [pc, #80]	; (33d4 <chip_deinit+0xbc>)
    3384:	490b      	ldr	r1, [pc, #44]	; (33b4 <chip_deinit+0x9c>)
    3386:	4b0c      	ldr	r3, [pc, #48]	; (33b8 <chip_deinit+0xa0>)
    3388:	0018      	movs	r0, r3
    338a:	4b0c      	ldr	r3, [pc, #48]	; (33bc <chip_deinit+0xa4>)
    338c:	4798      	blx	r3
    338e:	4b0c      	ldr	r3, [pc, #48]	; (33c0 <chip_deinit+0xa8>)
    3390:	0018      	movs	r0, r3
    3392:	4b0c      	ldr	r3, [pc, #48]	; (33c4 <chip_deinit+0xac>)
    3394:	4798      	blx	r3
    3396:	200d      	movs	r0, #13
    3398:	4b0b      	ldr	r3, [pc, #44]	; (33c8 <chip_deinit+0xb0>)
    339a:	4798      	blx	r3
		goto ERR1;
    339c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    339e:	1dfb      	adds	r3, r7, #7
    33a0:	781b      	ldrb	r3, [r3, #0]
    33a2:	b25b      	sxtb	r3, r3
}
    33a4:	0018      	movs	r0, r3
    33a6:	46bd      	mov	sp, r7
    33a8:	b003      	add	sp, #12
    33aa:	bd90      	pop	{r4, r7, pc}
    33ac:	00003475 	.word	0x00003475
    33b0:	00000205 	.word	0x00000205
    33b4:	000130e0 	.word	0x000130e0
    33b8:	00013050 	.word	0x00013050
    33bc:	0000e7e5 	.word	0x0000e7e5
    33c0:	000130bc 	.word	0x000130bc
    33c4:	0000e901 	.word	0x0000e901
    33c8:	0000e819 	.word	0x0000e819
    33cc:	fffffbff 	.word	0xfffffbff
    33d0:	00003499 	.word	0x00003499
    33d4:	0000020b 	.word	0x0000020b

000033d8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    33d8:	b590      	push	{r4, r7, lr}
    33da:	b085      	sub	sp, #20
    33dc:	af00      	add	r7, sp, #0
    33de:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    33e0:	230f      	movs	r3, #15
    33e2:	18fb      	adds	r3, r7, r3
    33e4:	2200      	movs	r2, #0
    33e6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    33e8:	230f      	movs	r3, #15
    33ea:	18fc      	adds	r4, r7, r3
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	0018      	movs	r0, r3
    33f0:	4b05      	ldr	r3, [pc, #20]	; (3408 <nm_bus_iface_init+0x30>)
    33f2:	4798      	blx	r3
    33f4:	0003      	movs	r3, r0
    33f6:	7023      	strb	r3, [r4, #0]
	return ret;
    33f8:	230f      	movs	r3, #15
    33fa:	18fb      	adds	r3, r7, r3
    33fc:	781b      	ldrb	r3, [r3, #0]
    33fe:	b25b      	sxtb	r3, r3
}
    3400:	0018      	movs	r0, r3
    3402:	46bd      	mov	sp, r7
    3404:	b005      	add	sp, #20
    3406:	bd90      	pop	{r4, r7, pc}
    3408:	00001211 	.word	0x00001211

0000340c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    340c:	b590      	push	{r4, r7, lr}
    340e:	b083      	sub	sp, #12
    3410:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3412:	1dfb      	adds	r3, r7, #7
    3414:	2200      	movs	r2, #0
    3416:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    3418:	1dfc      	adds	r4, r7, #7
    341a:	4b05      	ldr	r3, [pc, #20]	; (3430 <nm_bus_iface_deinit+0x24>)
    341c:	4798      	blx	r3
    341e:	0003      	movs	r3, r0
    3420:	7023      	strb	r3, [r4, #0]

	return ret;
    3422:	1dfb      	adds	r3, r7, #7
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	b25b      	sxtb	r3, r3
}
    3428:	0018      	movs	r0, r3
    342a:	46bd      	mov	sp, r7
    342c:	b003      	add	sp, #12
    342e:	bd90      	pop	{r4, r7, pc}
    3430:	0000138d 	.word	0x0000138d

00003434 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    3434:	b580      	push	{r7, lr}
    3436:	b082      	sub	sp, #8
    3438:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    343a:	1dfb      	adds	r3, r7, #7
    343c:	2200      	movs	r2, #0
    343e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    3440:	4b03      	ldr	r3, [pc, #12]	; (3450 <nm_bus_reset+0x1c>)
    3442:	4798      	blx	r3
    3444:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    3446:	0018      	movs	r0, r3
    3448:	46bd      	mov	sp, r7
    344a:	b002      	add	sp, #8
    344c:	bd80      	pop	{r7, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	00004d1d 	.word	0x00004d1d

00003454 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    3454:	b580      	push	{r7, lr}
    3456:	b082      	sub	sp, #8
    3458:	af00      	add	r7, sp, #0
    345a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	0018      	movs	r0, r3
    3460:	4b03      	ldr	r3, [pc, #12]	; (3470 <nm_read_reg+0x1c>)
    3462:	4798      	blx	r3
    3464:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    3466:	0018      	movs	r0, r3
    3468:	46bd      	mov	sp, r7
    346a:	b002      	add	sp, #8
    346c:	bd80      	pop	{r7, pc}
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	00004eb1 	.word	0x00004eb1

00003474 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3474:	b580      	push	{r7, lr}
    3476:	b082      	sub	sp, #8
    3478:	af00      	add	r7, sp, #0
    347a:	6078      	str	r0, [r7, #4]
    347c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    347e:	683a      	ldr	r2, [r7, #0]
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	0011      	movs	r1, r2
    3484:	0018      	movs	r0, r3
    3486:	4b03      	ldr	r3, [pc, #12]	; (3494 <nm_read_reg_with_ret+0x20>)
    3488:	4798      	blx	r3
    348a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    348c:	0018      	movs	r0, r3
    348e:	46bd      	mov	sp, r7
    3490:	b002      	add	sp, #8
    3492:	bd80      	pop	{r7, pc}
    3494:	00004ed5 	.word	0x00004ed5

00003498 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    3498:	b580      	push	{r7, lr}
    349a:	b082      	sub	sp, #8
    349c:	af00      	add	r7, sp, #0
    349e:	6078      	str	r0, [r7, #4]
    34a0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    34a2:	683a      	ldr	r2, [r7, #0]
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	0011      	movs	r1, r2
    34a8:	0018      	movs	r0, r3
    34aa:	4b03      	ldr	r3, [pc, #12]	; (34b8 <nm_write_reg+0x20>)
    34ac:	4798      	blx	r3
    34ae:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    34b0:	0018      	movs	r0, r3
    34b2:	46bd      	mov	sp, r7
    34b4:	b002      	add	sp, #8
    34b6:	bd80      	pop	{r7, pc}
    34b8:	00004f25 	.word	0x00004f25

000034bc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    34bc:	b580      	push	{r7, lr}
    34be:	b084      	sub	sp, #16
    34c0:	af00      	add	r7, sp, #0
    34c2:	60f8      	str	r0, [r7, #12]
    34c4:	60b9      	str	r1, [r7, #8]
    34c6:	1dbb      	adds	r3, r7, #6
    34c8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    34ca:	1dbb      	adds	r3, r7, #6
    34cc:	881a      	ldrh	r2, [r3, #0]
    34ce:	68b9      	ldr	r1, [r7, #8]
    34d0:	68fb      	ldr	r3, [r7, #12]
    34d2:	0018      	movs	r0, r3
    34d4:	4b03      	ldr	r3, [pc, #12]	; (34e4 <p_nm_read_block+0x28>)
    34d6:	4798      	blx	r3
    34d8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    34da:	0018      	movs	r0, r3
    34dc:	46bd      	mov	sp, r7
    34de:	b004      	add	sp, #16
    34e0:	bd80      	pop	{r7, pc}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	00004f75 	.word	0x00004f75

000034e8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    34e8:	b580      	push	{r7, lr}
    34ea:	b086      	sub	sp, #24
    34ec:	af00      	add	r7, sp, #0
    34ee:	60f8      	str	r0, [r7, #12]
    34f0:	60b9      	str	r1, [r7, #8]
    34f2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    34f4:	4b2d      	ldr	r3, [pc, #180]	; (35ac <nm_read_block+0xc4>)
    34f6:	881a      	ldrh	r2, [r3, #0]
    34f8:	2310      	movs	r3, #16
    34fa:	18fb      	adds	r3, r7, r3
    34fc:	3a08      	subs	r2, #8
    34fe:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    3500:	2300      	movs	r3, #0
    3502:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    3504:	2313      	movs	r3, #19
    3506:	18fb      	adds	r3, r7, r3
    3508:	2200      	movs	r2, #0
    350a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    350c:	2310      	movs	r3, #16
    350e:	18fb      	adds	r3, r7, r3
    3510:	881a      	ldrh	r2, [r3, #0]
    3512:	687b      	ldr	r3, [r7, #4]
    3514:	429a      	cmp	r2, r3
    3516:	d313      	bcc.n	3540 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    3518:	68ba      	ldr	r2, [r7, #8]
    351a:	697b      	ldr	r3, [r7, #20]
    351c:	18d1      	adds	r1, r2, r3
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	b29a      	uxth	r2, r3
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	0018      	movs	r0, r3
    3526:	4b22      	ldr	r3, [pc, #136]	; (35b0 <nm_read_block+0xc8>)
    3528:	4798      	blx	r3
    352a:	0003      	movs	r3, r0
    352c:	b2da      	uxtb	r2, r3
    352e:	2313      	movs	r3, #19
    3530:	18fb      	adds	r3, r7, r3
    3532:	781b      	ldrb	r3, [r3, #0]
    3534:	18d3      	adds	r3, r2, r3
    3536:	b2da      	uxtb	r2, r3
    3538:	2313      	movs	r3, #19
    353a:	18fb      	adds	r3, r7, r3
    353c:	701a      	strb	r2, [r3, #0]
			break;
    353e:	e02d      	b.n	359c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    3540:	68ba      	ldr	r2, [r7, #8]
    3542:	697b      	ldr	r3, [r7, #20]
    3544:	18d1      	adds	r1, r2, r3
    3546:	2310      	movs	r3, #16
    3548:	18fb      	adds	r3, r7, r3
    354a:	881a      	ldrh	r2, [r3, #0]
    354c:	68fb      	ldr	r3, [r7, #12]
    354e:	0018      	movs	r0, r3
    3550:	4b17      	ldr	r3, [pc, #92]	; (35b0 <nm_read_block+0xc8>)
    3552:	4798      	blx	r3
    3554:	0003      	movs	r3, r0
    3556:	b2da      	uxtb	r2, r3
    3558:	2313      	movs	r3, #19
    355a:	18fb      	adds	r3, r7, r3
    355c:	781b      	ldrb	r3, [r3, #0]
    355e:	18d3      	adds	r3, r2, r3
    3560:	b2da      	uxtb	r2, r3
    3562:	2313      	movs	r3, #19
    3564:	18fb      	adds	r3, r7, r3
    3566:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    3568:	2313      	movs	r3, #19
    356a:	18fb      	adds	r3, r7, r3
    356c:	781b      	ldrb	r3, [r3, #0]
    356e:	b25b      	sxtb	r3, r3
    3570:	2b00      	cmp	r3, #0
    3572:	d112      	bne.n	359a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    3574:	2310      	movs	r3, #16
    3576:	18fb      	adds	r3, r7, r3
    3578:	881b      	ldrh	r3, [r3, #0]
    357a:	687a      	ldr	r2, [r7, #4]
    357c:	1ad3      	subs	r3, r2, r3
    357e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    3580:	2310      	movs	r3, #16
    3582:	18fb      	adds	r3, r7, r3
    3584:	881b      	ldrh	r3, [r3, #0]
    3586:	697a      	ldr	r2, [r7, #20]
    3588:	18d3      	adds	r3, r2, r3
    358a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    358c:	2310      	movs	r3, #16
    358e:	18fb      	adds	r3, r7, r3
    3590:	881b      	ldrh	r3, [r3, #0]
    3592:	68fa      	ldr	r2, [r7, #12]
    3594:	18d3      	adds	r3, r2, r3
    3596:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    3598:	e7b8      	b.n	350c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    359a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    359c:	2313      	movs	r3, #19
    359e:	18fb      	adds	r3, r7, r3
    35a0:	781b      	ldrb	r3, [r3, #0]
    35a2:	b25b      	sxtb	r3, r3
}
    35a4:	0018      	movs	r0, r3
    35a6:	46bd      	mov	sp, r7
    35a8:	b006      	add	sp, #24
    35aa:	bd80      	pop	{r7, pc}
    35ac:	20000000 	.word	0x20000000
    35b0:	000034bd 	.word	0x000034bd

000035b4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b084      	sub	sp, #16
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	60b9      	str	r1, [r7, #8]
    35be:	1dbb      	adds	r3, r7, #6
    35c0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    35c2:	1dbb      	adds	r3, r7, #6
    35c4:	881a      	ldrh	r2, [r3, #0]
    35c6:	68b9      	ldr	r1, [r7, #8]
    35c8:	68fb      	ldr	r3, [r7, #12]
    35ca:	0018      	movs	r0, r3
    35cc:	4b03      	ldr	r3, [pc, #12]	; (35dc <p_nm_write_block+0x28>)
    35ce:	4798      	blx	r3
    35d0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    35d2:	0018      	movs	r0, r3
    35d4:	46bd      	mov	sp, r7
    35d6:	b004      	add	sp, #16
    35d8:	bd80      	pop	{r7, pc}
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	00004fcd 	.word	0x00004fcd

000035e0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    35e0:	b580      	push	{r7, lr}
    35e2:	b086      	sub	sp, #24
    35e4:	af00      	add	r7, sp, #0
    35e6:	60f8      	str	r0, [r7, #12]
    35e8:	60b9      	str	r1, [r7, #8]
    35ea:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    35ec:	4b2d      	ldr	r3, [pc, #180]	; (36a4 <nm_write_block+0xc4>)
    35ee:	881a      	ldrh	r2, [r3, #0]
    35f0:	2310      	movs	r3, #16
    35f2:	18fb      	adds	r3, r7, r3
    35f4:	3a08      	subs	r2, #8
    35f6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    35f8:	2300      	movs	r3, #0
    35fa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    35fc:	2313      	movs	r3, #19
    35fe:	18fb      	adds	r3, r7, r3
    3600:	2200      	movs	r2, #0
    3602:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    3604:	2310      	movs	r3, #16
    3606:	18fb      	adds	r3, r7, r3
    3608:	881a      	ldrh	r2, [r3, #0]
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	429a      	cmp	r2, r3
    360e:	d313      	bcc.n	3638 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    3610:	68ba      	ldr	r2, [r7, #8]
    3612:	697b      	ldr	r3, [r7, #20]
    3614:	18d1      	adds	r1, r2, r3
    3616:	687b      	ldr	r3, [r7, #4]
    3618:	b29a      	uxth	r2, r3
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	0018      	movs	r0, r3
    361e:	4b22      	ldr	r3, [pc, #136]	; (36a8 <nm_write_block+0xc8>)
    3620:	4798      	blx	r3
    3622:	0003      	movs	r3, r0
    3624:	b2da      	uxtb	r2, r3
    3626:	2313      	movs	r3, #19
    3628:	18fb      	adds	r3, r7, r3
    362a:	781b      	ldrb	r3, [r3, #0]
    362c:	18d3      	adds	r3, r2, r3
    362e:	b2da      	uxtb	r2, r3
    3630:	2313      	movs	r3, #19
    3632:	18fb      	adds	r3, r7, r3
    3634:	701a      	strb	r2, [r3, #0]
			break;
    3636:	e02d      	b.n	3694 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    3638:	68ba      	ldr	r2, [r7, #8]
    363a:	697b      	ldr	r3, [r7, #20]
    363c:	18d1      	adds	r1, r2, r3
    363e:	2310      	movs	r3, #16
    3640:	18fb      	adds	r3, r7, r3
    3642:	881a      	ldrh	r2, [r3, #0]
    3644:	68fb      	ldr	r3, [r7, #12]
    3646:	0018      	movs	r0, r3
    3648:	4b17      	ldr	r3, [pc, #92]	; (36a8 <nm_write_block+0xc8>)
    364a:	4798      	blx	r3
    364c:	0003      	movs	r3, r0
    364e:	b2da      	uxtb	r2, r3
    3650:	2313      	movs	r3, #19
    3652:	18fb      	adds	r3, r7, r3
    3654:	781b      	ldrb	r3, [r3, #0]
    3656:	18d3      	adds	r3, r2, r3
    3658:	b2da      	uxtb	r2, r3
    365a:	2313      	movs	r3, #19
    365c:	18fb      	adds	r3, r7, r3
    365e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    3660:	2313      	movs	r3, #19
    3662:	18fb      	adds	r3, r7, r3
    3664:	781b      	ldrb	r3, [r3, #0]
    3666:	b25b      	sxtb	r3, r3
    3668:	2b00      	cmp	r3, #0
    366a:	d112      	bne.n	3692 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    366c:	2310      	movs	r3, #16
    366e:	18fb      	adds	r3, r7, r3
    3670:	881b      	ldrh	r3, [r3, #0]
    3672:	687a      	ldr	r2, [r7, #4]
    3674:	1ad3      	subs	r3, r2, r3
    3676:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    3678:	2310      	movs	r3, #16
    367a:	18fb      	adds	r3, r7, r3
    367c:	881b      	ldrh	r3, [r3, #0]
    367e:	697a      	ldr	r2, [r7, #20]
    3680:	18d3      	adds	r3, r2, r3
    3682:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    3684:	2310      	movs	r3, #16
    3686:	18fb      	adds	r3, r7, r3
    3688:	881b      	ldrh	r3, [r3, #0]
    368a:	68fa      	ldr	r2, [r7, #12]
    368c:	18d3      	adds	r3, r2, r3
    368e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    3690:	e7b8      	b.n	3604 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    3692:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    3694:	2313      	movs	r3, #19
    3696:	18fb      	adds	r3, r7, r3
    3698:	781b      	ldrb	r3, [r3, #0]
    369a:	b25b      	sxtb	r3, r3
}
    369c:	0018      	movs	r0, r3
    369e:	46bd      	mov	sp, r7
    36a0:	b006      	add	sp, #24
    36a2:	bd80      	pop	{r7, pc}
    36a4:	20000000 	.word	0x20000000
    36a8:	000035b5 	.word	0x000035b5

000036ac <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    36ac:	b590      	push	{r4, r7, lr}
    36ae:	b089      	sub	sp, #36	; 0x24
    36b0:	af00      	add	r7, sp, #0
    36b2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    36b4:	2300      	movs	r3, #0
    36b6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    36b8:	231f      	movs	r3, #31
    36ba:	18fb      	adds	r3, r7, r3
    36bc:	2200      	movs	r2, #0
    36be:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    36c0:	230c      	movs	r3, #12
    36c2:	18fb      	adds	r3, r7, r3
    36c4:	0018      	movs	r0, r3
    36c6:	2308      	movs	r3, #8
    36c8:	001a      	movs	r2, r3
    36ca:	2100      	movs	r1, #0
    36cc:	4b64      	ldr	r3, [pc, #400]	; (3860 <nm_get_firmware_full_info+0x1b4>)
    36ce:	4798      	blx	r3
	if (pstrRev != NULL)
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d100      	bne.n	36d8 <nm_get_firmware_full_info+0x2c>
    36d6:	e0ba      	b.n	384e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	2228      	movs	r2, #40	; 0x28
    36dc:	2100      	movs	r1, #0
    36de:	0018      	movs	r0, r3
    36e0:	4b60      	ldr	r3, [pc, #384]	; (3864 <nm_get_firmware_full_info+0x1b8>)
    36e2:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    36e4:	231f      	movs	r3, #31
    36e6:	18fc      	adds	r4, r7, r3
    36e8:	2314      	movs	r3, #20
    36ea:	18fb      	adds	r3, r7, r3
    36ec:	4a5e      	ldr	r2, [pc, #376]	; (3868 <nm_get_firmware_full_info+0x1bc>)
    36ee:	0019      	movs	r1, r3
    36f0:	0010      	movs	r0, r2
    36f2:	4b5e      	ldr	r3, [pc, #376]	; (386c <nm_get_firmware_full_info+0x1c0>)
    36f4:	4798      	blx	r3
    36f6:	0003      	movs	r3, r0
    36f8:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    36fa:	231f      	movs	r3, #31
    36fc:	18fb      	adds	r3, r7, r3
    36fe:	781b      	ldrb	r3, [r3, #0]
    3700:	b25b      	sxtb	r3, r3
    3702:	2b00      	cmp	r3, #0
    3704:	d000      	beq.n	3708 <nm_get_firmware_full_info+0x5c>
    3706:	e0a2      	b.n	384e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    3708:	697b      	ldr	r3, [r7, #20]
    370a:	2b00      	cmp	r3, #0
    370c:	d100      	bne.n	3710 <nm_get_firmware_full_info+0x64>
    370e:	e09a      	b.n	3846 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    3710:	697b      	ldr	r3, [r7, #20]
    3712:	22c0      	movs	r2, #192	; 0xc0
    3714:	0292      	lsls	r2, r2, #10
    3716:	4313      	orrs	r3, r2
    3718:	221f      	movs	r2, #31
    371a:	18bc      	adds	r4, r7, r2
    371c:	220c      	movs	r2, #12
    371e:	18b9      	adds	r1, r7, r2
    3720:	2208      	movs	r2, #8
    3722:	0018      	movs	r0, r3
    3724:	4b52      	ldr	r3, [pc, #328]	; (3870 <nm_get_firmware_full_info+0x1c4>)
    3726:	4798      	blx	r3
    3728:	0003      	movs	r3, r0
    372a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    372c:	231f      	movs	r3, #31
    372e:	18fb      	adds	r3, r7, r3
    3730:	781b      	ldrb	r3, [r3, #0]
    3732:	b25b      	sxtb	r3, r3
    3734:	2b00      	cmp	r3, #0
    3736:	d000      	beq.n	373a <nm_get_firmware_full_info+0x8e>
    3738:	e089      	b.n	384e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    373a:	230c      	movs	r3, #12
    373c:	18fb      	adds	r3, r7, r3
    373e:	685b      	ldr	r3, [r3, #4]
    3740:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    3742:	697b      	ldr	r3, [r7, #20]
    3744:	041b      	lsls	r3, r3, #16
    3746:	0c1b      	lsrs	r3, r3, #16
    3748:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    374a:	697b      	ldr	r3, [r7, #20]
    374c:	2b00      	cmp	r3, #0
    374e:	d100      	bne.n	3752 <nm_get_firmware_full_info+0xa6>
    3750:	e074      	b.n	383c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    3752:	697b      	ldr	r3, [r7, #20]
    3754:	22c0      	movs	r2, #192	; 0xc0
    3756:	0292      	lsls	r2, r2, #10
    3758:	4313      	orrs	r3, r2
    375a:	221f      	movs	r2, #31
    375c:	18bc      	adds	r4, r7, r2
    375e:	6879      	ldr	r1, [r7, #4]
    3760:	2228      	movs	r2, #40	; 0x28
    3762:	0018      	movs	r0, r3
    3764:	4b42      	ldr	r3, [pc, #264]	; (3870 <nm_get_firmware_full_info+0x1c4>)
    3766:	4798      	blx	r3
    3768:	0003      	movs	r3, r0
    376a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    376c:	231f      	movs	r3, #31
    376e:	18fb      	adds	r3, r7, r3
    3770:	781b      	ldrb	r3, [r3, #0]
    3772:	b25b      	sxtb	r3, r3
    3774:	2b00      	cmp	r3, #0
    3776:	d16a      	bne.n	384e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	791b      	ldrb	r3, [r3, #4]
    377c:	021b      	lsls	r3, r3, #8
    377e:	b21a      	sxth	r2, r3
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	795b      	ldrb	r3, [r3, #5]
    3784:	011b      	lsls	r3, r3, #4
    3786:	b21b      	sxth	r3, r3
    3788:	21ff      	movs	r1, #255	; 0xff
    378a:	400b      	ands	r3, r1
    378c:	b21b      	sxth	r3, r3
    378e:	4313      	orrs	r3, r2
    3790:	b21a      	sxth	r2, r3
    3792:	687b      	ldr	r3, [r7, #4]
    3794:	799b      	ldrb	r3, [r3, #6]
    3796:	b21b      	sxth	r3, r3
    3798:	210f      	movs	r1, #15
    379a:	400b      	ands	r3, r1
    379c:	b21b      	sxth	r3, r3
    379e:	4313      	orrs	r3, r2
    37a0:	b21a      	sxth	r2, r3
    37a2:	231c      	movs	r3, #28
    37a4:	18fb      	adds	r3, r7, r3
    37a6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    37a8:	231a      	movs	r3, #26
    37aa:	18fb      	adds	r3, r7, r3
    37ac:	4a31      	ldr	r2, [pc, #196]	; (3874 <nm_get_firmware_full_info+0x1c8>)
    37ae:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	79db      	ldrb	r3, [r3, #7]
    37b4:	021b      	lsls	r3, r3, #8
    37b6:	b21a      	sxth	r2, r3
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	7a1b      	ldrb	r3, [r3, #8]
    37bc:	011b      	lsls	r3, r3, #4
    37be:	b21b      	sxth	r3, r3
    37c0:	21ff      	movs	r1, #255	; 0xff
    37c2:	400b      	ands	r3, r1
    37c4:	b21b      	sxth	r3, r3
    37c6:	4313      	orrs	r3, r2
    37c8:	b21a      	sxth	r2, r3
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	7a5b      	ldrb	r3, [r3, #9]
    37ce:	b21b      	sxth	r3, r3
    37d0:	210f      	movs	r1, #15
    37d2:	400b      	ands	r3, r1
    37d4:	b21b      	sxth	r3, r3
    37d6:	4313      	orrs	r3, r2
    37d8:	b21a      	sxth	r2, r3
    37da:	2318      	movs	r3, #24
    37dc:	18fb      	adds	r3, r7, r3
    37de:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    37e0:	231c      	movs	r3, #28
    37e2:	18fb      	adds	r3, r7, r3
    37e4:	881b      	ldrh	r3, [r3, #0]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d009      	beq.n	37fe <nm_get_firmware_full_info+0x152>
    37ea:	2318      	movs	r3, #24
    37ec:	18fb      	adds	r3, r7, r3
    37ee:	881b      	ldrh	r3, [r3, #0]
    37f0:	2b00      	cmp	r3, #0
    37f2:	d004      	beq.n	37fe <nm_get_firmware_full_info+0x152>
    37f4:	2318      	movs	r3, #24
    37f6:	18fb      	adds	r3, r7, r3
    37f8:	881b      	ldrh	r3, [r3, #0]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d104      	bne.n	3808 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    37fe:	231f      	movs	r3, #31
    3800:	18fb      	adds	r3, r7, r3
    3802:	22f4      	movs	r2, #244	; 0xf4
    3804:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3806:	e022      	b.n	384e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    3808:	231a      	movs	r3, #26
    380a:	18fa      	adds	r2, r7, r3
    380c:	2318      	movs	r3, #24
    380e:	18fb      	adds	r3, r7, r3
    3810:	8812      	ldrh	r2, [r2, #0]
    3812:	881b      	ldrh	r3, [r3, #0]
    3814:	429a      	cmp	r2, r3
    3816:	d204      	bcs.n	3822 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    3818:	231f      	movs	r3, #31
    381a:	18fb      	adds	r3, r7, r3
    381c:	22f3      	movs	r2, #243	; 0xf3
    381e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3820:	e015      	b.n	384e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    3822:	231a      	movs	r3, #26
    3824:	18fa      	adds	r2, r7, r3
    3826:	231c      	movs	r3, #28
    3828:	18fb      	adds	r3, r7, r3
    382a:	8812      	ldrh	r2, [r2, #0]
    382c:	881b      	ldrh	r3, [r3, #0]
    382e:	429a      	cmp	r2, r3
    3830:	d90d      	bls.n	384e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    3832:	231f      	movs	r3, #31
    3834:	18fb      	adds	r3, r7, r3
    3836:	22f3      	movs	r2, #243	; 0xf3
    3838:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    383a:	e008      	b.n	384e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    383c:	231f      	movs	r3, #31
    383e:	18fb      	adds	r3, r7, r3
    3840:	22f4      	movs	r2, #244	; 0xf4
    3842:	701a      	strb	r2, [r3, #0]
    3844:	e003      	b.n	384e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    3846:	231f      	movs	r3, #31
    3848:	18fb      	adds	r3, r7, r3
    384a:	22f4      	movs	r2, #244	; 0xf4
    384c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    384e:	231f      	movs	r3, #31
    3850:	18fb      	adds	r3, r7, r3
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	b25b      	sxtb	r3, r3
}
    3856:	0018      	movs	r0, r3
    3858:	46bd      	mov	sp, r7
    385a:	b009      	add	sp, #36	; 0x24
    385c:	bd90      	pop	{r4, r7, pc}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	0000dda3 	.word	0x0000dda3
    3864:	00001439 	.word	0x00001439
    3868:	000c0008 	.word	0x000c0008
    386c:	00003475 	.word	0x00003475
    3870:	000034e9 	.word	0x000034e9
    3874:	00001352 	.word	0x00001352

00003878 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3878:	b590      	push	{r4, r7, lr}
    387a:	b085      	sub	sp, #20
    387c:	af00      	add	r7, sp, #0
    387e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3880:	230f      	movs	r3, #15
    3882:	18fb      	adds	r3, r7, r3
    3884:	2200      	movs	r2, #0
    3886:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	2b00      	cmp	r3, #0
    388c:	d013      	beq.n	38b6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    388e:	230e      	movs	r3, #14
    3890:	18fb      	adds	r3, r7, r3
    3892:	687a      	ldr	r2, [r7, #4]
    3894:	7812      	ldrb	r2, [r2, #0]
    3896:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3898:	230e      	movs	r3, #14
    389a:	18fb      	adds	r3, r7, r3
    389c:	781b      	ldrb	r3, [r3, #0]
    389e:	2b00      	cmp	r3, #0
    38a0:	d004      	beq.n	38ac <nm_drv_init+0x34>
    38a2:	230e      	movs	r3, #14
    38a4:	18fb      	adds	r3, r7, r3
    38a6:	781b      	ldrb	r3, [r3, #0]
    38a8:	2b04      	cmp	r3, #4
    38aa:	d908      	bls.n	38be <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    38ac:	230e      	movs	r3, #14
    38ae:	18fb      	adds	r3, r7, r3
    38b0:	2201      	movs	r2, #1
    38b2:	701a      	strb	r2, [r3, #0]
    38b4:	e003      	b.n	38be <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    38b6:	230e      	movs	r3, #14
    38b8:	18fb      	adds	r3, r7, r3
    38ba:	2201      	movs	r2, #1
    38bc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    38be:	230f      	movs	r3, #15
    38c0:	18fc      	adds	r4, r7, r3
    38c2:	2000      	movs	r0, #0
    38c4:	4b41      	ldr	r3, [pc, #260]	; (39cc <nm_drv_init+0x154>)
    38c6:	4798      	blx	r3
    38c8:	0003      	movs	r3, r0
    38ca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    38cc:	230f      	movs	r3, #15
    38ce:	18fb      	adds	r3, r7, r3
    38d0:	781b      	ldrb	r3, [r3, #0]
    38d2:	b25b      	sxtb	r3, r3
    38d4:	2b00      	cmp	r3, #0
    38d6:	d00f      	beq.n	38f8 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    38d8:	2328      	movs	r3, #40	; 0x28
    38da:	33ff      	adds	r3, #255	; 0xff
    38dc:	001a      	movs	r2, r3
    38de:	493c      	ldr	r1, [pc, #240]	; (39d0 <nm_drv_init+0x158>)
    38e0:	4b3c      	ldr	r3, [pc, #240]	; (39d4 <nm_drv_init+0x15c>)
    38e2:	0018      	movs	r0, r3
    38e4:	4b3c      	ldr	r3, [pc, #240]	; (39d8 <nm_drv_init+0x160>)
    38e6:	4798      	blx	r3
    38e8:	4b3c      	ldr	r3, [pc, #240]	; (39dc <nm_drv_init+0x164>)
    38ea:	0018      	movs	r0, r3
    38ec:	4b3c      	ldr	r3, [pc, #240]	; (39e0 <nm_drv_init+0x168>)
    38ee:	4798      	blx	r3
    38f0:	200d      	movs	r0, #13
    38f2:	4b3c      	ldr	r3, [pc, #240]	; (39e4 <nm_drv_init+0x16c>)
    38f4:	4798      	blx	r3
		goto ERR1;
    38f6:	e060      	b.n	39ba <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    38f8:	4b3b      	ldr	r3, [pc, #236]	; (39e8 <nm_drv_init+0x170>)
    38fa:	0018      	movs	r0, r3
    38fc:	4b36      	ldr	r3, [pc, #216]	; (39d8 <nm_drv_init+0x160>)
    38fe:	4798      	blx	r3
    3900:	4b3a      	ldr	r3, [pc, #232]	; (39ec <nm_drv_init+0x174>)
    3902:	4798      	blx	r3
    3904:	0002      	movs	r2, r0
    3906:	4b3a      	ldr	r3, [pc, #232]	; (39f0 <nm_drv_init+0x178>)
    3908:	0011      	movs	r1, r2
    390a:	0018      	movs	r0, r3
    390c:	4b32      	ldr	r3, [pc, #200]	; (39d8 <nm_drv_init+0x160>)
    390e:	4798      	blx	r3
    3910:	200d      	movs	r0, #13
    3912:	4b34      	ldr	r3, [pc, #208]	; (39e4 <nm_drv_init+0x16c>)
    3914:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    3916:	4b37      	ldr	r3, [pc, #220]	; (39f4 <nm_drv_init+0x17c>)
    3918:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    391a:	230f      	movs	r3, #15
    391c:	18fc      	adds	r4, r7, r3
    391e:	230e      	movs	r3, #14
    3920:	18fb      	adds	r3, r7, r3
    3922:	781b      	ldrb	r3, [r3, #0]
    3924:	0018      	movs	r0, r3
    3926:	4b34      	ldr	r3, [pc, #208]	; (39f8 <nm_drv_init+0x180>)
    3928:	4798      	blx	r3
    392a:	0003      	movs	r3, r0
    392c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    392e:	230f      	movs	r3, #15
    3930:	18fb      	adds	r3, r7, r3
    3932:	781b      	ldrb	r3, [r3, #0]
    3934:	b25b      	sxtb	r3, r3
    3936:	2b00      	cmp	r3, #0
    3938:	d13a      	bne.n	39b0 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    393a:	230f      	movs	r3, #15
    393c:	18fc      	adds	r4, r7, r3
    393e:	230e      	movs	r3, #14
    3940:	18fb      	adds	r3, r7, r3
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	0018      	movs	r0, r3
    3946:	4b2d      	ldr	r3, [pc, #180]	; (39fc <nm_drv_init+0x184>)
    3948:	4798      	blx	r3
    394a:	0003      	movs	r3, r0
    394c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    394e:	230f      	movs	r3, #15
    3950:	18fb      	adds	r3, r7, r3
    3952:	781b      	ldrb	r3, [r3, #0]
    3954:	b25b      	sxtb	r3, r3
    3956:	2b00      	cmp	r3, #0
    3958:	d12c      	bne.n	39b4 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    395a:	230e      	movs	r3, #14
    395c:	18fb      	adds	r3, r7, r3
    395e:	781b      	ldrb	r3, [r3, #0]
    3960:	2b02      	cmp	r3, #2
    3962:	d02a      	beq.n	39ba <nm_drv_init+0x142>
    3964:	230e      	movs	r3, #14
    3966:	18fb      	adds	r3, r7, r3
    3968:	781b      	ldrb	r3, [r3, #0]
    396a:	2b03      	cmp	r3, #3
    396c:	d025      	beq.n	39ba <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    396e:	230f      	movs	r3, #15
    3970:	18fc      	adds	r4, r7, r3
    3972:	4b23      	ldr	r3, [pc, #140]	; (3a00 <nm_drv_init+0x188>)
    3974:	4798      	blx	r3
    3976:	0003      	movs	r3, r0
    3978:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    397a:	230f      	movs	r3, #15
    397c:	18fb      	adds	r3, r7, r3
    397e:	781b      	ldrb	r3, [r3, #0]
    3980:	b25b      	sxtb	r3, r3
    3982:	2b00      	cmp	r3, #0
    3984:	d00f      	beq.n	39a6 <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    3986:	2356      	movs	r3, #86	; 0x56
    3988:	33ff      	adds	r3, #255	; 0xff
    398a:	001a      	movs	r2, r3
    398c:	4910      	ldr	r1, [pc, #64]	; (39d0 <nm_drv_init+0x158>)
    398e:	4b11      	ldr	r3, [pc, #68]	; (39d4 <nm_drv_init+0x15c>)
    3990:	0018      	movs	r0, r3
    3992:	4b11      	ldr	r3, [pc, #68]	; (39d8 <nm_drv_init+0x160>)
    3994:	4798      	blx	r3
    3996:	4b1b      	ldr	r3, [pc, #108]	; (3a04 <nm_drv_init+0x18c>)
    3998:	0018      	movs	r0, r3
    399a:	4b11      	ldr	r3, [pc, #68]	; (39e0 <nm_drv_init+0x168>)
    399c:	4798      	blx	r3
    399e:	200d      	movs	r0, #13
    39a0:	4b10      	ldr	r3, [pc, #64]	; (39e4 <nm_drv_init+0x16c>)
    39a2:	4798      	blx	r3
		goto ERR2;
    39a4:	e007      	b.n	39b6 <nm_drv_init+0x13e>
	}
	return ret;
    39a6:	230f      	movs	r3, #15
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	b25b      	sxtb	r3, r3
    39ae:	e008      	b.n	39c2 <nm_drv_init+0x14a>
		goto ERR2;
    39b0:	46c0      	nop			; (mov r8, r8)
    39b2:	e000      	b.n	39b6 <nm_drv_init+0x13e>
		goto ERR2;
    39b4:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    39b6:	4b14      	ldr	r3, [pc, #80]	; (3a08 <nm_drv_init+0x190>)
    39b8:	4798      	blx	r3
ERR1:
	return ret;
    39ba:	230f      	movs	r3, #15
    39bc:	18fb      	adds	r3, r7, r3
    39be:	781b      	ldrb	r3, [r3, #0]
    39c0:	b25b      	sxtb	r3, r3
}
    39c2:	0018      	movs	r0, r3
    39c4:	46bd      	mov	sp, r7
    39c6:	b005      	add	sp, #20
    39c8:	bd90      	pop	{r4, r7, pc}
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	000033d9 	.word	0x000033d9
    39d0:	000131b8 	.word	0x000131b8
    39d4:	000130ec 	.word	0x000130ec
    39d8:	0000e7e5 	.word	0x0000e7e5
    39dc:	00013100 	.word	0x00013100
    39e0:	0000e901 	.word	0x0000e901
    39e4:	0000e819 	.word	0x0000e819
    39e8:	0001311c 	.word	0x0001311c
    39ec:	00002d79 	.word	0x00002d79
    39f0:	00013128 	.word	0x00013128
    39f4:	00004d4d 	.word	0x00004d4d
    39f8:	000030cd 	.word	0x000030cd
    39fc:	00003265 	.word	0x00003265
    3a00:	00002cc5 	.word	0x00002cc5
    3a04:	00013138 	.word	0x00013138
    3a08:	0000340d 	.word	0x0000340d

00003a0c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    3a0c:	b590      	push	{r4, r7, lr}
    3a0e:	b085      	sub	sp, #20
    3a10:	af00      	add	r7, sp, #0
    3a12:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    3a14:	230f      	movs	r3, #15
    3a16:	18fc      	adds	r4, r7, r3
    3a18:	4b2d      	ldr	r3, [pc, #180]	; (3ad0 <nm_drv_deinit+0xc4>)
    3a1a:	4798      	blx	r3
    3a1c:	0003      	movs	r3, r0
    3a1e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3a20:	230f      	movs	r3, #15
    3a22:	18fb      	adds	r3, r7, r3
    3a24:	781b      	ldrb	r3, [r3, #0]
    3a26:	b25b      	sxtb	r3, r3
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d00e      	beq.n	3a4a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    3a2c:	23b6      	movs	r3, #182	; 0xb6
    3a2e:	005a      	lsls	r2, r3, #1
    3a30:	4928      	ldr	r1, [pc, #160]	; (3ad4 <nm_drv_deinit+0xc8>)
    3a32:	4b29      	ldr	r3, [pc, #164]	; (3ad8 <nm_drv_deinit+0xcc>)
    3a34:	0018      	movs	r0, r3
    3a36:	4b29      	ldr	r3, [pc, #164]	; (3adc <nm_drv_deinit+0xd0>)
    3a38:	4798      	blx	r3
    3a3a:	4b29      	ldr	r3, [pc, #164]	; (3ae0 <nm_drv_deinit+0xd4>)
    3a3c:	0018      	movs	r0, r3
    3a3e:	4b29      	ldr	r3, [pc, #164]	; (3ae4 <nm_drv_deinit+0xd8>)
    3a40:	4798      	blx	r3
    3a42:	200d      	movs	r0, #13
    3a44:	4b28      	ldr	r3, [pc, #160]	; (3ae8 <nm_drv_deinit+0xdc>)
    3a46:	4798      	blx	r3
		goto ERR1;
    3a48:	e03a      	b.n	3ac0 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    3a4a:	230f      	movs	r3, #15
    3a4c:	18fc      	adds	r4, r7, r3
    3a4e:	2000      	movs	r0, #0
    3a50:	4b26      	ldr	r3, [pc, #152]	; (3aec <nm_drv_deinit+0xe0>)
    3a52:	4798      	blx	r3
    3a54:	0003      	movs	r3, r0
    3a56:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3a58:	230f      	movs	r3, #15
    3a5a:	18fb      	adds	r3, r7, r3
    3a5c:	781b      	ldrb	r3, [r3, #0]
    3a5e:	b25b      	sxtb	r3, r3
    3a60:	2b00      	cmp	r3, #0
    3a62:	d00f      	beq.n	3a84 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3a64:	2374      	movs	r3, #116	; 0x74
    3a66:	33ff      	adds	r3, #255	; 0xff
    3a68:	001a      	movs	r2, r3
    3a6a:	491a      	ldr	r1, [pc, #104]	; (3ad4 <nm_drv_deinit+0xc8>)
    3a6c:	4b1a      	ldr	r3, [pc, #104]	; (3ad8 <nm_drv_deinit+0xcc>)
    3a6e:	0018      	movs	r0, r3
    3a70:	4b1a      	ldr	r3, [pc, #104]	; (3adc <nm_drv_deinit+0xd0>)
    3a72:	4798      	blx	r3
    3a74:	4b1e      	ldr	r3, [pc, #120]	; (3af0 <nm_drv_deinit+0xe4>)
    3a76:	0018      	movs	r0, r3
    3a78:	4b1a      	ldr	r3, [pc, #104]	; (3ae4 <nm_drv_deinit+0xd8>)
    3a7a:	4798      	blx	r3
    3a7c:	200d      	movs	r0, #13
    3a7e:	4b1a      	ldr	r3, [pc, #104]	; (3ae8 <nm_drv_deinit+0xdc>)
    3a80:	4798      	blx	r3
		goto ERR1;
    3a82:	e01d      	b.n	3ac0 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    3a84:	230f      	movs	r3, #15
    3a86:	18fc      	adds	r4, r7, r3
    3a88:	4b1a      	ldr	r3, [pc, #104]	; (3af4 <nm_drv_deinit+0xe8>)
    3a8a:	4798      	blx	r3
    3a8c:	0003      	movs	r3, r0
    3a8e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3a90:	230f      	movs	r3, #15
    3a92:	18fb      	adds	r3, r7, r3
    3a94:	781b      	ldrb	r3, [r3, #0]
    3a96:	b25b      	sxtb	r3, r3
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d00f      	beq.n	3abc <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3a9c:	237a      	movs	r3, #122	; 0x7a
    3a9e:	33ff      	adds	r3, #255	; 0xff
    3aa0:	001a      	movs	r2, r3
    3aa2:	490c      	ldr	r1, [pc, #48]	; (3ad4 <nm_drv_deinit+0xc8>)
    3aa4:	4b0c      	ldr	r3, [pc, #48]	; (3ad8 <nm_drv_deinit+0xcc>)
    3aa6:	0018      	movs	r0, r3
    3aa8:	4b0c      	ldr	r3, [pc, #48]	; (3adc <nm_drv_deinit+0xd0>)
    3aaa:	4798      	blx	r3
    3aac:	4b12      	ldr	r3, [pc, #72]	; (3af8 <nm_drv_deinit+0xec>)
    3aae:	0018      	movs	r0, r3
    3ab0:	4b0c      	ldr	r3, [pc, #48]	; (3ae4 <nm_drv_deinit+0xd8>)
    3ab2:	4798      	blx	r3
    3ab4:	200d      	movs	r0, #13
    3ab6:	4b0c      	ldr	r3, [pc, #48]	; (3ae8 <nm_drv_deinit+0xdc>)
    3ab8:	4798      	blx	r3
		goto ERR1;
    3aba:	e001      	b.n	3ac0 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    3abc:	4b0f      	ldr	r3, [pc, #60]	; (3afc <nm_drv_deinit+0xf0>)
    3abe:	4798      	blx	r3
#endif

ERR1:
	return ret;
    3ac0:	230f      	movs	r3, #15
    3ac2:	18fb      	adds	r3, r7, r3
    3ac4:	781b      	ldrb	r3, [r3, #0]
    3ac6:	b25b      	sxtb	r3, r3
}
    3ac8:	0018      	movs	r0, r3
    3aca:	46bd      	mov	sp, r7
    3acc:	b005      	add	sp, #20
    3ace:	bd90      	pop	{r4, r7, pc}
    3ad0:	00003319 	.word	0x00003319
    3ad4:	000131c4 	.word	0x000131c4
    3ad8:	000130ec 	.word	0x000130ec
    3adc:	0000e7e5 	.word	0x0000e7e5
    3ae0:	00013158 	.word	0x00013158
    3ae4:	0000e901 	.word	0x0000e901
    3ae8:	0000e819 	.word	0x0000e819
    3aec:	000061a5 	.word	0x000061a5
    3af0:	00013178 	.word	0x00013178
    3af4:	0000340d 	.word	0x0000340d
    3af8:	0001319c 	.word	0x0001319c
    3afc:	00004e99 	.word	0x00004e99

00003b00 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b086      	sub	sp, #24
    3b04:	af00      	add	r7, sp, #0
    3b06:	6078      	str	r0, [r7, #4]
    3b08:	000a      	movs	r2, r1
    3b0a:	1cbb      	adds	r3, r7, #2
    3b0c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    3b0e:	230c      	movs	r3, #12
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	2200      	movs	r2, #0
    3b14:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    3b16:	230c      	movs	r3, #12
    3b18:	18fb      	adds	r3, r7, r3
    3b1a:	687a      	ldr	r2, [r7, #4]
    3b1c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3b1e:	230c      	movs	r3, #12
    3b20:	18fb      	adds	r3, r7, r3
    3b22:	1cba      	adds	r2, r7, #2
    3b24:	8812      	ldrh	r2, [r2, #0]
    3b26:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3b28:	230c      	movs	r3, #12
    3b2a:	18fb      	adds	r3, r7, r3
    3b2c:	0019      	movs	r1, r3
    3b2e:	2003      	movs	r0, #3
    3b30:	4b03      	ldr	r3, [pc, #12]	; (3b40 <nmi_spi_read+0x40>)
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
}
    3b36:	0018      	movs	r0, r3
    3b38:	46bd      	mov	sp, r7
    3b3a:	b006      	add	sp, #24
    3b3c:	bd80      	pop	{r7, pc}
    3b3e:	46c0      	nop			; (mov r8, r8)
    3b40:	000012f9 	.word	0x000012f9

00003b44 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b086      	sub	sp, #24
    3b48:	af00      	add	r7, sp, #0
    3b4a:	6078      	str	r0, [r7, #4]
    3b4c:	000a      	movs	r2, r1
    3b4e:	1cbb      	adds	r3, r7, #2
    3b50:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    3b52:	230c      	movs	r3, #12
    3b54:	18fb      	adds	r3, r7, r3
    3b56:	687a      	ldr	r2, [r7, #4]
    3b58:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    3b5a:	230c      	movs	r3, #12
    3b5c:	18fb      	adds	r3, r7, r3
    3b5e:	2200      	movs	r2, #0
    3b60:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3b62:	230c      	movs	r3, #12
    3b64:	18fb      	adds	r3, r7, r3
    3b66:	1cba      	adds	r2, r7, #2
    3b68:	8812      	ldrh	r2, [r2, #0]
    3b6a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3b6c:	230c      	movs	r3, #12
    3b6e:	18fb      	adds	r3, r7, r3
    3b70:	0019      	movs	r1, r3
    3b72:	2003      	movs	r0, #3
    3b74:	4b03      	ldr	r3, [pc, #12]	; (3b84 <nmi_spi_write+0x40>)
    3b76:	4798      	blx	r3
    3b78:	0003      	movs	r3, r0
}
    3b7a:	0018      	movs	r0, r3
    3b7c:	46bd      	mov	sp, r7
    3b7e:	b006      	add	sp, #24
    3b80:	bd80      	pop	{r7, pc}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	000012f9 	.word	0x000012f9

00003b88 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    3b88:	b580      	push	{r7, lr}
    3b8a:	b082      	sub	sp, #8
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	0002      	movs	r2, r0
    3b90:	1dfb      	adds	r3, r7, #7
    3b92:	701a      	strb	r2, [r3, #0]
    3b94:	1dbb      	adds	r3, r7, #6
    3b96:	1c0a      	adds	r2, r1, #0
    3b98:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    3b9a:	1dfb      	adds	r3, r7, #7
    3b9c:	781b      	ldrb	r3, [r3, #0]
    3b9e:	005a      	lsls	r2, r3, #1
    3ba0:	1dbb      	adds	r3, r7, #6
    3ba2:	781b      	ldrb	r3, [r3, #0]
    3ba4:	4053      	eors	r3, r2
    3ba6:	4a03      	ldr	r2, [pc, #12]	; (3bb4 <crc7_byte+0x2c>)
    3ba8:	5cd3      	ldrb	r3, [r2, r3]
}
    3baa:	0018      	movs	r0, r3
    3bac:	46bd      	mov	sp, r7
    3bae:	b002      	add	sp, #8
    3bb0:	bd80      	pop	{r7, pc}
    3bb2:	46c0      	nop			; (mov r8, r8)
    3bb4:	000131d4 	.word	0x000131d4

00003bb8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    3bb8:	b590      	push	{r4, r7, lr}
    3bba:	b085      	sub	sp, #20
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	60b9      	str	r1, [r7, #8]
    3bc0:	607a      	str	r2, [r7, #4]
    3bc2:	230f      	movs	r3, #15
    3bc4:	18fb      	adds	r3, r7, r3
    3bc6:	1c02      	adds	r2, r0, #0
    3bc8:	701a      	strb	r2, [r3, #0]
	while (len--)
    3bca:	e00e      	b.n	3bea <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    3bcc:	68bb      	ldr	r3, [r7, #8]
    3bce:	1c5a      	adds	r2, r3, #1
    3bd0:	60ba      	str	r2, [r7, #8]
    3bd2:	781a      	ldrb	r2, [r3, #0]
    3bd4:	230f      	movs	r3, #15
    3bd6:	18fc      	adds	r4, r7, r3
    3bd8:	230f      	movs	r3, #15
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	781b      	ldrb	r3, [r3, #0]
    3bde:	0011      	movs	r1, r2
    3be0:	0018      	movs	r0, r3
    3be2:	4b08      	ldr	r3, [pc, #32]	; (3c04 <crc7+0x4c>)
    3be4:	4798      	blx	r3
    3be6:	0003      	movs	r3, r0
    3be8:	7023      	strb	r3, [r4, #0]
	while (len--)
    3bea:	687b      	ldr	r3, [r7, #4]
    3bec:	1e5a      	subs	r2, r3, #1
    3bee:	607a      	str	r2, [r7, #4]
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d1eb      	bne.n	3bcc <crc7+0x14>
	return crc;
    3bf4:	230f      	movs	r3, #15
    3bf6:	18fb      	adds	r3, r7, r3
    3bf8:	781b      	ldrb	r3, [r3, #0]
}
    3bfa:	0018      	movs	r0, r3
    3bfc:	46bd      	mov	sp, r7
    3bfe:	b005      	add	sp, #20
    3c00:	bd90      	pop	{r4, r7, pc}
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	00003b89 	.word	0x00003b89

00003c08 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    3c08:	b590      	push	{r4, r7, lr}
    3c0a:	b089      	sub	sp, #36	; 0x24
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	60b9      	str	r1, [r7, #8]
    3c10:	607a      	str	r2, [r7, #4]
    3c12:	603b      	str	r3, [r7, #0]
    3c14:	230f      	movs	r3, #15
    3c16:	18fb      	adds	r3, r7, r3
    3c18:	1c02      	adds	r2, r0, #0
    3c1a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    3c1c:	231f      	movs	r3, #31
    3c1e:	18fb      	adds	r3, r7, r3
    3c20:	2205      	movs	r2, #5
    3c22:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3c24:	231e      	movs	r3, #30
    3c26:	18fb      	adds	r3, r7, r3
    3c28:	2201      	movs	r2, #1
    3c2a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    3c2c:	2314      	movs	r3, #20
    3c2e:	18fb      	adds	r3, r7, r3
    3c30:	220f      	movs	r2, #15
    3c32:	18ba      	adds	r2, r7, r2
    3c34:	7812      	ldrb	r2, [r2, #0]
    3c36:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    3c38:	230f      	movs	r3, #15
    3c3a:	18fb      	adds	r3, r7, r3
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	3bc1      	subs	r3, #193	; 0xc1
    3c40:	2b0e      	cmp	r3, #14
    3c42:	d900      	bls.n	3c46 <spi_cmd+0x3e>
    3c44:	e11b      	b.n	3e7e <spi_cmd+0x276>
    3c46:	009a      	lsls	r2, r3, #2
    3c48:	4bb6      	ldr	r3, [pc, #728]	; (3f24 <spi_cmd+0x31c>)
    3c4a:	18d3      	adds	r3, r2, r3
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    3c50:	68bb      	ldr	r3, [r7, #8]
    3c52:	0c1b      	lsrs	r3, r3, #16
    3c54:	b2da      	uxtb	r2, r3
    3c56:	2314      	movs	r3, #20
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3c5c:	68bb      	ldr	r3, [r7, #8]
    3c5e:	0a1b      	lsrs	r3, r3, #8
    3c60:	b2da      	uxtb	r2, r3
    3c62:	2314      	movs	r3, #20
    3c64:	18fb      	adds	r3, r7, r3
    3c66:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3c68:	68bb      	ldr	r3, [r7, #8]
    3c6a:	b2da      	uxtb	r2, r3
    3c6c:	2314      	movs	r3, #20
    3c6e:	18fb      	adds	r3, r7, r3
    3c70:	70da      	strb	r2, [r3, #3]
		len = 5;
    3c72:	231f      	movs	r3, #31
    3c74:	18fb      	adds	r3, r7, r3
    3c76:	2205      	movs	r2, #5
    3c78:	701a      	strb	r2, [r3, #0]
		break;
    3c7a:	e105      	b.n	3e88 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    3c7c:	68bb      	ldr	r3, [r7, #8]
    3c7e:	0a1b      	lsrs	r3, r3, #8
    3c80:	b2da      	uxtb	r2, r3
    3c82:	2314      	movs	r3, #20
    3c84:	18fb      	adds	r3, r7, r3
    3c86:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3c88:	2330      	movs	r3, #48	; 0x30
    3c8a:	18fb      	adds	r3, r7, r3
    3c8c:	781b      	ldrb	r3, [r3, #0]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d009      	beq.n	3ca6 <spi_cmd+0x9e>
    3c92:	2314      	movs	r3, #20
    3c94:	18fb      	adds	r3, r7, r3
    3c96:	785b      	ldrb	r3, [r3, #1]
    3c98:	2280      	movs	r2, #128	; 0x80
    3c9a:	4252      	negs	r2, r2
    3c9c:	4313      	orrs	r3, r2
    3c9e:	b2da      	uxtb	r2, r3
    3ca0:	2314      	movs	r3, #20
    3ca2:	18fb      	adds	r3, r7, r3
    3ca4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    3ca6:	68bb      	ldr	r3, [r7, #8]
    3ca8:	b2da      	uxtb	r2, r3
    3caa:	2314      	movs	r3, #20
    3cac:	18fb      	adds	r3, r7, r3
    3cae:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3cb0:	2314      	movs	r3, #20
    3cb2:	18fb      	adds	r3, r7, r3
    3cb4:	2200      	movs	r2, #0
    3cb6:	70da      	strb	r2, [r3, #3]
		len = 5;
    3cb8:	231f      	movs	r3, #31
    3cba:	18fb      	adds	r3, r7, r3
    3cbc:	2205      	movs	r2, #5
    3cbe:	701a      	strb	r2, [r3, #0]
		break;
    3cc0:	e0e2      	b.n	3e88 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    3cc2:	2314      	movs	r3, #20
    3cc4:	18fb      	adds	r3, r7, r3
    3cc6:	2200      	movs	r2, #0
    3cc8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3cca:	2314      	movs	r3, #20
    3ccc:	18fb      	adds	r3, r7, r3
    3cce:	2200      	movs	r2, #0
    3cd0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3cd2:	2314      	movs	r3, #20
    3cd4:	18fb      	adds	r3, r7, r3
    3cd6:	2200      	movs	r2, #0
    3cd8:	70da      	strb	r2, [r3, #3]
		len = 5;
    3cda:	231f      	movs	r3, #31
    3cdc:	18fb      	adds	r3, r7, r3
    3cde:	2205      	movs	r2, #5
    3ce0:	701a      	strb	r2, [r3, #0]
		break;
    3ce2:	e0d1      	b.n	3e88 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    3ce4:	2314      	movs	r3, #20
    3ce6:	18fb      	adds	r3, r7, r3
    3ce8:	2200      	movs	r2, #0
    3cea:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3cec:	2314      	movs	r3, #20
    3cee:	18fb      	adds	r3, r7, r3
    3cf0:	2200      	movs	r2, #0
    3cf2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3cf4:	2314      	movs	r3, #20
    3cf6:	18fb      	adds	r3, r7, r3
    3cf8:	2200      	movs	r2, #0
    3cfa:	70da      	strb	r2, [r3, #3]
		len = 5;
    3cfc:	231f      	movs	r3, #31
    3cfe:	18fb      	adds	r3, r7, r3
    3d00:	2205      	movs	r2, #5
    3d02:	701a      	strb	r2, [r3, #0]
		break;
    3d04:	e0c0      	b.n	3e88 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    3d06:	2314      	movs	r3, #20
    3d08:	18fb      	adds	r3, r7, r3
    3d0a:	22ff      	movs	r2, #255	; 0xff
    3d0c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    3d0e:	2314      	movs	r3, #20
    3d10:	18fb      	adds	r3, r7, r3
    3d12:	22ff      	movs	r2, #255	; 0xff
    3d14:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    3d16:	2314      	movs	r3, #20
    3d18:	18fb      	adds	r3, r7, r3
    3d1a:	22ff      	movs	r2, #255	; 0xff
    3d1c:	70da      	strb	r2, [r3, #3]
		len = 5;
    3d1e:	231f      	movs	r3, #31
    3d20:	18fb      	adds	r3, r7, r3
    3d22:	2205      	movs	r2, #5
    3d24:	701a      	strb	r2, [r3, #0]
		break;
    3d26:	e0af      	b.n	3e88 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3d28:	68bb      	ldr	r3, [r7, #8]
    3d2a:	0c1b      	lsrs	r3, r3, #16
    3d2c:	b2da      	uxtb	r2, r3
    3d2e:	2314      	movs	r3, #20
    3d30:	18fb      	adds	r3, r7, r3
    3d32:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3d34:	68bb      	ldr	r3, [r7, #8]
    3d36:	0a1b      	lsrs	r3, r3, #8
    3d38:	b2da      	uxtb	r2, r3
    3d3a:	2314      	movs	r3, #20
    3d3c:	18fb      	adds	r3, r7, r3
    3d3e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3d40:	68bb      	ldr	r3, [r7, #8]
    3d42:	b2da      	uxtb	r2, r3
    3d44:	2314      	movs	r3, #20
    3d46:	18fb      	adds	r3, r7, r3
    3d48:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    3d4a:	683b      	ldr	r3, [r7, #0]
    3d4c:	0a1b      	lsrs	r3, r3, #8
    3d4e:	b2da      	uxtb	r2, r3
    3d50:	2314      	movs	r3, #20
    3d52:	18fb      	adds	r3, r7, r3
    3d54:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    3d56:	683b      	ldr	r3, [r7, #0]
    3d58:	b2da      	uxtb	r2, r3
    3d5a:	2314      	movs	r3, #20
    3d5c:	18fb      	adds	r3, r7, r3
    3d5e:	715a      	strb	r2, [r3, #5]
		len = 7;
    3d60:	231f      	movs	r3, #31
    3d62:	18fb      	adds	r3, r7, r3
    3d64:	2207      	movs	r2, #7
    3d66:	701a      	strb	r2, [r3, #0]
		break;
    3d68:	e08e      	b.n	3e88 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    3d6a:	68bb      	ldr	r3, [r7, #8]
    3d6c:	0c1b      	lsrs	r3, r3, #16
    3d6e:	b2da      	uxtb	r2, r3
    3d70:	2314      	movs	r3, #20
    3d72:	18fb      	adds	r3, r7, r3
    3d74:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3d76:	68bb      	ldr	r3, [r7, #8]
    3d78:	0a1b      	lsrs	r3, r3, #8
    3d7a:	b2da      	uxtb	r2, r3
    3d7c:	2314      	movs	r3, #20
    3d7e:	18fb      	adds	r3, r7, r3
    3d80:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3d82:	68bb      	ldr	r3, [r7, #8]
    3d84:	b2da      	uxtb	r2, r3
    3d86:	2314      	movs	r3, #20
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    3d8c:	683b      	ldr	r3, [r7, #0]
    3d8e:	0c1b      	lsrs	r3, r3, #16
    3d90:	b2da      	uxtb	r2, r3
    3d92:	2314      	movs	r3, #20
    3d94:	18fb      	adds	r3, r7, r3
    3d96:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    3d98:	683b      	ldr	r3, [r7, #0]
    3d9a:	0a1b      	lsrs	r3, r3, #8
    3d9c:	b2da      	uxtb	r2, r3
    3d9e:	2314      	movs	r3, #20
    3da0:	18fb      	adds	r3, r7, r3
    3da2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    3da4:	683b      	ldr	r3, [r7, #0]
    3da6:	b2da      	uxtb	r2, r3
    3da8:	2314      	movs	r3, #20
    3daa:	18fb      	adds	r3, r7, r3
    3dac:	719a      	strb	r2, [r3, #6]
		len = 8;
    3dae:	231f      	movs	r3, #31
    3db0:	18fb      	adds	r3, r7, r3
    3db2:	2208      	movs	r2, #8
    3db4:	701a      	strb	r2, [r3, #0]
		break;
    3db6:	e067      	b.n	3e88 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    3db8:	68bb      	ldr	r3, [r7, #8]
    3dba:	0a1b      	lsrs	r3, r3, #8
    3dbc:	b2da      	uxtb	r2, r3
    3dbe:	2314      	movs	r3, #20
    3dc0:	18fb      	adds	r3, r7, r3
    3dc2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3dc4:	2330      	movs	r3, #48	; 0x30
    3dc6:	18fb      	adds	r3, r7, r3
    3dc8:	781b      	ldrb	r3, [r3, #0]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d009      	beq.n	3de2 <spi_cmd+0x1da>
    3dce:	2314      	movs	r3, #20
    3dd0:	18fb      	adds	r3, r7, r3
    3dd2:	785b      	ldrb	r3, [r3, #1]
    3dd4:	2280      	movs	r2, #128	; 0x80
    3dd6:	4252      	negs	r2, r2
    3dd8:	4313      	orrs	r3, r2
    3dda:	b2da      	uxtb	r2, r3
    3ddc:	2314      	movs	r3, #20
    3dde:	18fb      	adds	r3, r7, r3
    3de0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    3de2:	68bb      	ldr	r3, [r7, #8]
    3de4:	b2da      	uxtb	r2, r3
    3de6:	2314      	movs	r3, #20
    3de8:	18fb      	adds	r3, r7, r3
    3dea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	0e1b      	lsrs	r3, r3, #24
    3df0:	b2da      	uxtb	r2, r3
    3df2:	2314      	movs	r3, #20
    3df4:	18fb      	adds	r3, r7, r3
    3df6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	0c1b      	lsrs	r3, r3, #16
    3dfc:	b2da      	uxtb	r2, r3
    3dfe:	2314      	movs	r3, #20
    3e00:	18fb      	adds	r3, r7, r3
    3e02:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	0a1b      	lsrs	r3, r3, #8
    3e08:	b2da      	uxtb	r2, r3
    3e0a:	2314      	movs	r3, #20
    3e0c:	18fb      	adds	r3, r7, r3
    3e0e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	b2da      	uxtb	r2, r3
    3e14:	2314      	movs	r3, #20
    3e16:	18fb      	adds	r3, r7, r3
    3e18:	719a      	strb	r2, [r3, #6]
		len = 8;
    3e1a:	231f      	movs	r3, #31
    3e1c:	18fb      	adds	r3, r7, r3
    3e1e:	2208      	movs	r2, #8
    3e20:	701a      	strb	r2, [r3, #0]
		break;
    3e22:	e031      	b.n	3e88 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    3e24:	68bb      	ldr	r3, [r7, #8]
    3e26:	0c1b      	lsrs	r3, r3, #16
    3e28:	b2da      	uxtb	r2, r3
    3e2a:	2314      	movs	r3, #20
    3e2c:	18fb      	adds	r3, r7, r3
    3e2e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3e30:	68bb      	ldr	r3, [r7, #8]
    3e32:	0a1b      	lsrs	r3, r3, #8
    3e34:	b2da      	uxtb	r2, r3
    3e36:	2314      	movs	r3, #20
    3e38:	18fb      	adds	r3, r7, r3
    3e3a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    3e3c:	68bb      	ldr	r3, [r7, #8]
    3e3e:	b2da      	uxtb	r2, r3
    3e40:	2314      	movs	r3, #20
    3e42:	18fb      	adds	r3, r7, r3
    3e44:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	0e1b      	lsrs	r3, r3, #24
    3e4a:	b2da      	uxtb	r2, r3
    3e4c:	2314      	movs	r3, #20
    3e4e:	18fb      	adds	r3, r7, r3
    3e50:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	0c1b      	lsrs	r3, r3, #16
    3e56:	b2da      	uxtb	r2, r3
    3e58:	2314      	movs	r3, #20
    3e5a:	18fb      	adds	r3, r7, r3
    3e5c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	0a1b      	lsrs	r3, r3, #8
    3e62:	b2da      	uxtb	r2, r3
    3e64:	2314      	movs	r3, #20
    3e66:	18fb      	adds	r3, r7, r3
    3e68:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	b2da      	uxtb	r2, r3
    3e6e:	2314      	movs	r3, #20
    3e70:	18fb      	adds	r3, r7, r3
    3e72:	71da      	strb	r2, [r3, #7]
		len = 9;
    3e74:	231f      	movs	r3, #31
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	2209      	movs	r2, #9
    3e7a:	701a      	strb	r2, [r3, #0]
		break;
    3e7c:	e004      	b.n	3e88 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    3e7e:	231e      	movs	r3, #30
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	2200      	movs	r2, #0
    3e84:	701a      	strb	r2, [r3, #0]
		break;
    3e86:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3e88:	231e      	movs	r3, #30
    3e8a:	18fb      	adds	r3, r7, r3
    3e8c:	781b      	ldrb	r3, [r3, #0]
    3e8e:	b25b      	sxtb	r3, r3
    3e90:	2b00      	cmp	r3, #0
    3e92:	d03f      	beq.n	3f14 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    3e94:	4b24      	ldr	r3, [pc, #144]	; (3f28 <spi_cmd+0x320>)
    3e96:	781b      	ldrb	r3, [r3, #0]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d115      	bne.n	3ec8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3e9c:	231f      	movs	r3, #31
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	781b      	ldrb	r3, [r3, #0]
    3ea2:	1e5c      	subs	r4, r3, #1
    3ea4:	231f      	movs	r3, #31
    3ea6:	18fb      	adds	r3, r7, r3
    3ea8:	781b      	ldrb	r3, [r3, #0]
    3eaa:	3b01      	subs	r3, #1
    3eac:	001a      	movs	r2, r3
    3eae:	2314      	movs	r3, #20
    3eb0:	18fb      	adds	r3, r7, r3
    3eb2:	0019      	movs	r1, r3
    3eb4:	207f      	movs	r0, #127	; 0x7f
    3eb6:	4b1d      	ldr	r3, [pc, #116]	; (3f2c <spi_cmd+0x324>)
    3eb8:	4798      	blx	r3
    3eba:	0003      	movs	r3, r0
    3ebc:	18db      	adds	r3, r3, r3
    3ebe:	b2da      	uxtb	r2, r3
    3ec0:	2314      	movs	r3, #20
    3ec2:	18fb      	adds	r3, r7, r3
    3ec4:	551a      	strb	r2, [r3, r4]
    3ec6:	e006      	b.n	3ed6 <spi_cmd+0x2ce>
		else
			len-=1;
    3ec8:	231f      	movs	r3, #31
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	221f      	movs	r2, #31
    3ece:	18ba      	adds	r2, r7, r2
    3ed0:	7812      	ldrb	r2, [r2, #0]
    3ed2:	3a01      	subs	r2, #1
    3ed4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    3ed6:	231f      	movs	r3, #31
    3ed8:	18fb      	adds	r3, r7, r3
    3eda:	781b      	ldrb	r3, [r3, #0]
    3edc:	b29a      	uxth	r2, r3
    3ede:	2314      	movs	r3, #20
    3ee0:	18fb      	adds	r3, r7, r3
    3ee2:	0011      	movs	r1, r2
    3ee4:	0018      	movs	r0, r3
    3ee6:	4b12      	ldr	r3, [pc, #72]	; (3f30 <spi_cmd+0x328>)
    3ee8:	4798      	blx	r3
    3eea:	1e03      	subs	r3, r0, #0
    3eec:	d012      	beq.n	3f14 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    3eee:	2328      	movs	r3, #40	; 0x28
    3ef0:	33ff      	adds	r3, #255	; 0xff
    3ef2:	001a      	movs	r2, r3
    3ef4:	490f      	ldr	r1, [pc, #60]	; (3f34 <spi_cmd+0x32c>)
    3ef6:	4b10      	ldr	r3, [pc, #64]	; (3f38 <spi_cmd+0x330>)
    3ef8:	0018      	movs	r0, r3
    3efa:	4b10      	ldr	r3, [pc, #64]	; (3f3c <spi_cmd+0x334>)
    3efc:	4798      	blx	r3
    3efe:	4b10      	ldr	r3, [pc, #64]	; (3f40 <spi_cmd+0x338>)
    3f00:	0018      	movs	r0, r3
    3f02:	4b10      	ldr	r3, [pc, #64]	; (3f44 <spi_cmd+0x33c>)
    3f04:	4798      	blx	r3
    3f06:	200d      	movs	r0, #13
    3f08:	4b0f      	ldr	r3, [pc, #60]	; (3f48 <spi_cmd+0x340>)
    3f0a:	4798      	blx	r3
			result = N_FAIL;
    3f0c:	231e      	movs	r3, #30
    3f0e:	18fb      	adds	r3, r7, r3
    3f10:	2200      	movs	r2, #0
    3f12:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    3f14:	231e      	movs	r3, #30
    3f16:	18fb      	adds	r3, r7, r3
    3f18:	781b      	ldrb	r3, [r3, #0]
    3f1a:	b25b      	sxtb	r3, r3
}
    3f1c:	0018      	movs	r0, r3
    3f1e:	46bd      	mov	sp, r7
    3f20:	b009      	add	sp, #36	; 0x24
    3f22:	bd90      	pop	{r4, r7, pc}
    3f24:	0001382c 	.word	0x0001382c
    3f28:	20000214 	.word	0x20000214
    3f2c:	00003bb9 	.word	0x00003bb9
    3f30:	00003b45 	.word	0x00003b45
    3f34:	00013868 	.word	0x00013868
    3f38:	000132d4 	.word	0x000132d4
    3f3c:	0000e7e5 	.word	0x0000e7e5
    3f40:	000132e8 	.word	0x000132e8
    3f44:	0000e901 	.word	0x0000e901
    3f48:	0000e819 	.word	0x0000e819

00003f4c <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    3f4c:	b590      	push	{r4, r7, lr}
    3f4e:	b085      	sub	sp, #20
    3f50:	af00      	add	r7, sp, #0
    3f52:	0002      	movs	r2, r0
    3f54:	1dfb      	adds	r3, r7, #7
    3f56:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    3f58:	230e      	movs	r3, #14
    3f5a:	18fb      	adds	r3, r7, r3
    3f5c:	2201      	movs	r2, #1
    3f5e:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    3f60:	4b31      	ldr	r3, [pc, #196]	; (4028 <spi_data_rsp+0xdc>)
    3f62:	781b      	ldrb	r3, [r3, #0]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d104      	bne.n	3f72 <spi_data_rsp+0x26>
		len = 2;
    3f68:	230f      	movs	r3, #15
    3f6a:	18fb      	adds	r3, r7, r3
    3f6c:	2202      	movs	r2, #2
    3f6e:	701a      	strb	r2, [r3, #0]
    3f70:	e003      	b.n	3f7a <spi_data_rsp+0x2e>
	else
		len = 3;
    3f72:	230f      	movs	r3, #15
    3f74:	18fb      	adds	r3, r7, r3
    3f76:	2203      	movs	r2, #3
    3f78:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3f7a:	230f      	movs	r3, #15
    3f7c:	18fb      	adds	r3, r7, r3
    3f7e:	781b      	ldrb	r3, [r3, #0]
    3f80:	b29a      	uxth	r2, r3
    3f82:	2308      	movs	r3, #8
    3f84:	18fb      	adds	r3, r7, r3
    3f86:	0011      	movs	r1, r2
    3f88:	0018      	movs	r0, r3
    3f8a:	4b28      	ldr	r3, [pc, #160]	; (402c <spi_data_rsp+0xe0>)
    3f8c:	4798      	blx	r3
    3f8e:	1e03      	subs	r3, r0, #0
    3f90:	d013      	beq.n	3fba <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    3f92:	233c      	movs	r3, #60	; 0x3c
    3f94:	33ff      	adds	r3, #255	; 0xff
    3f96:	001a      	movs	r2, r3
    3f98:	4925      	ldr	r1, [pc, #148]	; (4030 <spi_data_rsp+0xe4>)
    3f9a:	4b26      	ldr	r3, [pc, #152]	; (4034 <spi_data_rsp+0xe8>)
    3f9c:	0018      	movs	r0, r3
    3f9e:	4b26      	ldr	r3, [pc, #152]	; (4038 <spi_data_rsp+0xec>)
    3fa0:	4798      	blx	r3
    3fa2:	4b26      	ldr	r3, [pc, #152]	; (403c <spi_data_rsp+0xf0>)
    3fa4:	0018      	movs	r0, r3
    3fa6:	4b26      	ldr	r3, [pc, #152]	; (4040 <spi_data_rsp+0xf4>)
    3fa8:	4798      	blx	r3
    3faa:	200d      	movs	r0, #13
    3fac:	4b25      	ldr	r3, [pc, #148]	; (4044 <spi_data_rsp+0xf8>)
    3fae:	4798      	blx	r3
		result = N_FAIL;
    3fb0:	230e      	movs	r3, #14
    3fb2:	18fb      	adds	r3, r7, r3
    3fb4:	2200      	movs	r2, #0
    3fb6:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    3fb8:	e02e      	b.n	4018 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3fba:	230f      	movs	r3, #15
    3fbc:	18fb      	adds	r3, r7, r3
    3fbe:	781b      	ldrb	r3, [r3, #0]
    3fc0:	3b01      	subs	r3, #1
    3fc2:	2208      	movs	r2, #8
    3fc4:	18ba      	adds	r2, r7, r2
    3fc6:	5cd3      	ldrb	r3, [r2, r3]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d108      	bne.n	3fde <spi_data_rsp+0x92>
    3fcc:	230f      	movs	r3, #15
    3fce:	18fb      	adds	r3, r7, r3
    3fd0:	781b      	ldrb	r3, [r3, #0]
    3fd2:	3b02      	subs	r3, #2
    3fd4:	2208      	movs	r2, #8
    3fd6:	18ba      	adds	r2, r7, r2
    3fd8:	5cd3      	ldrb	r3, [r2, r3]
    3fda:	2bc3      	cmp	r3, #195	; 0xc3
    3fdc:	d01c      	beq.n	4018 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    3fde:	23a1      	movs	r3, #161	; 0xa1
    3fe0:	005a      	lsls	r2, r3, #1
    3fe2:	4913      	ldr	r1, [pc, #76]	; (4030 <spi_data_rsp+0xe4>)
    3fe4:	4b13      	ldr	r3, [pc, #76]	; (4034 <spi_data_rsp+0xe8>)
    3fe6:	0018      	movs	r0, r3
    3fe8:	4b13      	ldr	r3, [pc, #76]	; (4038 <spi_data_rsp+0xec>)
    3fea:	4798      	blx	r3
    3fec:	2308      	movs	r3, #8
    3fee:	18fb      	adds	r3, r7, r3
    3ff0:	781b      	ldrb	r3, [r3, #0]
    3ff2:	0019      	movs	r1, r3
    3ff4:	2308      	movs	r3, #8
    3ff6:	18fb      	adds	r3, r7, r3
    3ff8:	785b      	ldrb	r3, [r3, #1]
    3ffa:	001a      	movs	r2, r3
    3ffc:	2308      	movs	r3, #8
    3ffe:	18fb      	adds	r3, r7, r3
    4000:	789b      	ldrb	r3, [r3, #2]
    4002:	4811      	ldr	r0, [pc, #68]	; (4048 <spi_data_rsp+0xfc>)
    4004:	4c0c      	ldr	r4, [pc, #48]	; (4038 <spi_data_rsp+0xec>)
    4006:	47a0      	blx	r4
    4008:	200d      	movs	r0, #13
    400a:	4b0e      	ldr	r3, [pc, #56]	; (4044 <spi_data_rsp+0xf8>)
    400c:	4798      	blx	r3
		result = N_FAIL;
    400e:	230e      	movs	r3, #14
    4010:	18fb      	adds	r3, r7, r3
    4012:	2200      	movs	r2, #0
    4014:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    4016:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    4018:	230e      	movs	r3, #14
    401a:	18fb      	adds	r3, r7, r3
    401c:	781b      	ldrb	r3, [r3, #0]
    401e:	b25b      	sxtb	r3, r3
}
    4020:	0018      	movs	r0, r3
    4022:	46bd      	mov	sp, r7
    4024:	b005      	add	sp, #20
    4026:	bd90      	pop	{r4, r7, pc}
    4028:	20000214 	.word	0x20000214
    402c:	00003b01 	.word	0x00003b01
    4030:	00013870 	.word	0x00013870
    4034:	000132d4 	.word	0x000132d4
    4038:	0000e7e5 	.word	0x0000e7e5
    403c:	00013314 	.word	0x00013314
    4040:	0000e901 	.word	0x0000e901
    4044:	0000e819 	.word	0x0000e819
    4048:	00013334 	.word	0x00013334

0000404c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    404c:	b580      	push	{r7, lr}
    404e:	b084      	sub	sp, #16
    4050:	af00      	add	r7, sp, #0
    4052:	0002      	movs	r2, r0
    4054:	1dfb      	adds	r3, r7, #7
    4056:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    4058:	230f      	movs	r3, #15
    405a:	18fb      	adds	r3, r7, r3
    405c:	2201      	movs	r2, #1
    405e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    4060:	1dfb      	adds	r3, r7, #7
    4062:	781b      	ldrb	r3, [r3, #0]
    4064:	2bcf      	cmp	r3, #207	; 0xcf
    4066:	d007      	beq.n	4078 <spi_cmd_rsp+0x2c>
    4068:	1dfb      	adds	r3, r7, #7
    406a:	781b      	ldrb	r3, [r3, #0]
    406c:	2bc5      	cmp	r3, #197	; 0xc5
    406e:	d003      	beq.n	4078 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    4070:	1dfb      	adds	r3, r7, #7
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	2bc6      	cmp	r3, #198	; 0xc6
    4076:	d10c      	bne.n	4092 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4078:	230d      	movs	r3, #13
    407a:	18fb      	adds	r3, r7, r3
    407c:	2101      	movs	r1, #1
    407e:	0018      	movs	r0, r3
    4080:	4b39      	ldr	r3, [pc, #228]	; (4168 <spi_cmd_rsp+0x11c>)
    4082:	4798      	blx	r3
    4084:	1e03      	subs	r3, r0, #0
    4086:	d004      	beq.n	4092 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    4088:	230f      	movs	r3, #15
    408a:	18fb      	adds	r3, r7, r3
    408c:	2200      	movs	r2, #0
    408e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    4090:	e061      	b.n	4156 <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    4092:	230e      	movs	r3, #14
    4094:	18fb      	adds	r3, r7, r3
    4096:	220a      	movs	r2, #10
    4098:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    409a:	230d      	movs	r3, #13
    409c:	18fb      	adds	r3, r7, r3
    409e:	2101      	movs	r1, #1
    40a0:	0018      	movs	r0, r3
    40a2:	4b31      	ldr	r3, [pc, #196]	; (4168 <spi_cmd_rsp+0x11c>)
    40a4:	4798      	blx	r3
    40a6:	1e03      	subs	r3, r0, #0
    40a8:	d012      	beq.n	40d0 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    40aa:	23b1      	movs	r3, #177	; 0xb1
    40ac:	005a      	lsls	r2, r3, #1
    40ae:	492f      	ldr	r1, [pc, #188]	; (416c <spi_cmd_rsp+0x120>)
    40b0:	4b2f      	ldr	r3, [pc, #188]	; (4170 <spi_cmd_rsp+0x124>)
    40b2:	0018      	movs	r0, r3
    40b4:	4b2f      	ldr	r3, [pc, #188]	; (4174 <spi_cmd_rsp+0x128>)
    40b6:	4798      	blx	r3
    40b8:	4b2f      	ldr	r3, [pc, #188]	; (4178 <spi_cmd_rsp+0x12c>)
    40ba:	0018      	movs	r0, r3
    40bc:	4b2f      	ldr	r3, [pc, #188]	; (417c <spi_cmd_rsp+0x130>)
    40be:	4798      	blx	r3
    40c0:	200d      	movs	r0, #13
    40c2:	4b2f      	ldr	r3, [pc, #188]	; (4180 <spi_cmd_rsp+0x134>)
    40c4:	4798      	blx	r3
			result = N_FAIL;
    40c6:	230f      	movs	r3, #15
    40c8:	18fb      	adds	r3, r7, r3
    40ca:	2200      	movs	r2, #0
    40cc:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    40ce:	e042      	b.n	4156 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    40d0:	230d      	movs	r3, #13
    40d2:	18fb      	adds	r3, r7, r3
    40d4:	781b      	ldrb	r3, [r3, #0]
    40d6:	1dfa      	adds	r2, r7, #7
    40d8:	7812      	ldrb	r2, [r2, #0]
    40da:	429a      	cmp	r2, r3
    40dc:	d00b      	beq.n	40f6 <spi_cmd_rsp+0xaa>
    40de:	230e      	movs	r3, #14
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	781b      	ldrb	r3, [r3, #0]
    40e4:	b25b      	sxtb	r3, r3
    40e6:	b2da      	uxtb	r2, r3
    40e8:	3a01      	subs	r2, #1
    40ea:	b2d1      	uxtb	r1, r2
    40ec:	220e      	movs	r2, #14
    40ee:	18ba      	adds	r2, r7, r2
    40f0:	7011      	strb	r1, [r2, #0]
    40f2:	2b00      	cmp	r3, #0
    40f4:	dcd1      	bgt.n	409a <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    40f6:	230e      	movs	r3, #14
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	220a      	movs	r2, #10
    40fc:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    40fe:	230d      	movs	r3, #13
    4100:	18fb      	adds	r3, r7, r3
    4102:	2101      	movs	r1, #1
    4104:	0018      	movs	r0, r3
    4106:	4b18      	ldr	r3, [pc, #96]	; (4168 <spi_cmd_rsp+0x11c>)
    4108:	4798      	blx	r3
    410a:	1e03      	subs	r3, r0, #0
    410c:	d012      	beq.n	4134 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    410e:	23b8      	movs	r3, #184	; 0xb8
    4110:	005a      	lsls	r2, r3, #1
    4112:	4916      	ldr	r1, [pc, #88]	; (416c <spi_cmd_rsp+0x120>)
    4114:	4b16      	ldr	r3, [pc, #88]	; (4170 <spi_cmd_rsp+0x124>)
    4116:	0018      	movs	r0, r3
    4118:	4b16      	ldr	r3, [pc, #88]	; (4174 <spi_cmd_rsp+0x128>)
    411a:	4798      	blx	r3
    411c:	4b16      	ldr	r3, [pc, #88]	; (4178 <spi_cmd_rsp+0x12c>)
    411e:	0018      	movs	r0, r3
    4120:	4b16      	ldr	r3, [pc, #88]	; (417c <spi_cmd_rsp+0x130>)
    4122:	4798      	blx	r3
    4124:	200d      	movs	r0, #13
    4126:	4b16      	ldr	r3, [pc, #88]	; (4180 <spi_cmd_rsp+0x134>)
    4128:	4798      	blx	r3
			result = N_FAIL;
    412a:	230f      	movs	r3, #15
    412c:	18fb      	adds	r3, r7, r3
    412e:	2200      	movs	r2, #0
    4130:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    4132:	e010      	b.n	4156 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    4134:	230d      	movs	r3, #13
    4136:	18fb      	adds	r3, r7, r3
    4138:	781b      	ldrb	r3, [r3, #0]
    413a:	2b00      	cmp	r3, #0
    413c:	d00b      	beq.n	4156 <spi_cmd_rsp+0x10a>
    413e:	230e      	movs	r3, #14
    4140:	18fb      	adds	r3, r7, r3
    4142:	781b      	ldrb	r3, [r3, #0]
    4144:	b25b      	sxtb	r3, r3
    4146:	b2da      	uxtb	r2, r3
    4148:	3a01      	subs	r2, #1
    414a:	b2d1      	uxtb	r1, r2
    414c:	220e      	movs	r2, #14
    414e:	18ba      	adds	r2, r7, r2
    4150:	7011      	strb	r1, [r2, #0]
    4152:	2b00      	cmp	r3, #0
    4154:	dcd3      	bgt.n	40fe <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    4156:	230f      	movs	r3, #15
    4158:	18fb      	adds	r3, r7, r3
    415a:	781b      	ldrb	r3, [r3, #0]
    415c:	b25b      	sxtb	r3, r3
}
    415e:	0018      	movs	r0, r3
    4160:	46bd      	mov	sp, r7
    4162:	b004      	add	sp, #16
    4164:	bd80      	pop	{r7, pc}
    4166:	46c0      	nop			; (mov r8, r8)
    4168:	00003b01 	.word	0x00003b01
    416c:	00013880 	.word	0x00013880
    4170:	000132d4 	.word	0x000132d4
    4174:	0000e7e5 	.word	0x0000e7e5
    4178:	00013364 	.word	0x00013364
    417c:	0000e901 	.word	0x0000e901
    4180:	0000e819 	.word	0x0000e819

00004184 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    4184:	b580      	push	{r7, lr}
    4186:	b086      	sub	sp, #24
    4188:	af00      	add	r7, sp, #0
    418a:	6078      	str	r0, [r7, #4]
    418c:	0008      	movs	r0, r1
    418e:	0011      	movs	r1, r2
    4190:	1cbb      	adds	r3, r7, #2
    4192:	1c02      	adds	r2, r0, #0
    4194:	801a      	strh	r2, [r3, #0]
    4196:	1c7b      	adds	r3, r7, #1
    4198:	1c0a      	adds	r2, r1, #0
    419a:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    419c:	2311      	movs	r3, #17
    419e:	18fb      	adds	r3, r7, r3
    41a0:	2201      	movs	r2, #1
    41a2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    41a4:	2314      	movs	r3, #20
    41a6:	18fb      	adds	r3, r7, r3
    41a8:	2200      	movs	r2, #0
    41aa:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    41ac:	1cbb      	adds	r3, r7, #2
    41ae:	881a      	ldrh	r2, [r3, #0]
    41b0:	2380      	movs	r3, #128	; 0x80
    41b2:	019b      	lsls	r3, r3, #6
    41b4:	429a      	cmp	r2, r3
    41b6:	d805      	bhi.n	41c4 <spi_data_read+0x40>
			nbytes = sz;
    41b8:	2312      	movs	r3, #18
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	1cba      	adds	r2, r7, #2
    41be:	8812      	ldrh	r2, [r2, #0]
    41c0:	801a      	strh	r2, [r3, #0]
    41c2:	e004      	b.n	41ce <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    41c4:	2312      	movs	r3, #18
    41c6:	18fb      	adds	r3, r7, r3
    41c8:	2280      	movs	r2, #128	; 0x80
    41ca:	0192      	lsls	r2, r2, #6
    41cc:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    41ce:	2316      	movs	r3, #22
    41d0:	18fb      	adds	r3, r7, r3
    41d2:	220a      	movs	r2, #10
    41d4:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    41d6:	230b      	movs	r3, #11
    41d8:	18fb      	adds	r3, r7, r3
    41da:	2101      	movs	r1, #1
    41dc:	0018      	movs	r0, r3
    41de:	4b5c      	ldr	r3, [pc, #368]	; (4350 <spi_data_read+0x1cc>)
    41e0:	4798      	blx	r3
    41e2:	1e03      	subs	r3, r0, #0
    41e4:	d011      	beq.n	420a <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    41e6:	4a5b      	ldr	r2, [pc, #364]	; (4354 <spi_data_read+0x1d0>)
    41e8:	495b      	ldr	r1, [pc, #364]	; (4358 <spi_data_read+0x1d4>)
    41ea:	4b5c      	ldr	r3, [pc, #368]	; (435c <spi_data_read+0x1d8>)
    41ec:	0018      	movs	r0, r3
    41ee:	4b5c      	ldr	r3, [pc, #368]	; (4360 <spi_data_read+0x1dc>)
    41f0:	4798      	blx	r3
    41f2:	4b5c      	ldr	r3, [pc, #368]	; (4364 <spi_data_read+0x1e0>)
    41f4:	0018      	movs	r0, r3
    41f6:	4b5c      	ldr	r3, [pc, #368]	; (4368 <spi_data_read+0x1e4>)
    41f8:	4798      	blx	r3
    41fa:	200d      	movs	r0, #13
    41fc:	4b5b      	ldr	r3, [pc, #364]	; (436c <spi_data_read+0x1e8>)
    41fe:	4798      	blx	r3
				result = N_FAIL;
    4200:	2311      	movs	r3, #17
    4202:	18fb      	adds	r3, r7, r3
    4204:	2200      	movs	r2, #0
    4206:	701a      	strb	r2, [r3, #0]
				break;
    4208:	e017      	b.n	423a <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    420a:	230b      	movs	r3, #11
    420c:	18fb      	adds	r3, r7, r3
    420e:	781b      	ldrb	r3, [r3, #0]
    4210:	091b      	lsrs	r3, r3, #4
    4212:	b2db      	uxtb	r3, r3
    4214:	001a      	movs	r2, r3
    4216:	230f      	movs	r3, #15
    4218:	4013      	ands	r3, r2
    421a:	2b0f      	cmp	r3, #15
    421c:	d00c      	beq.n	4238 <spi_data_read+0xb4>
				break;
		} while (retry--);
    421e:	2316      	movs	r3, #22
    4220:	18fb      	adds	r3, r7, r3
    4222:	2200      	movs	r2, #0
    4224:	5e9b      	ldrsh	r3, [r3, r2]
    4226:	b29a      	uxth	r2, r3
    4228:	3a01      	subs	r2, #1
    422a:	b291      	uxth	r1, r2
    422c:	2216      	movs	r2, #22
    422e:	18ba      	adds	r2, r7, r2
    4230:	8011      	strh	r1, [r2, #0]
    4232:	2b00      	cmp	r3, #0
    4234:	d1cf      	bne.n	41d6 <spi_data_read+0x52>
    4236:	e000      	b.n	423a <spi_data_read+0xb6>
				break;
    4238:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    423a:	2311      	movs	r3, #17
    423c:	18fb      	adds	r3, r7, r3
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	b25b      	sxtb	r3, r3
    4242:	2b00      	cmp	r3, #0
    4244:	d100      	bne.n	4248 <spi_data_read+0xc4>
    4246:	e079      	b.n	433c <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    4248:	2316      	movs	r3, #22
    424a:	18fb      	adds	r3, r7, r3
    424c:	2200      	movs	r2, #0
    424e:	5e9b      	ldrsh	r3, [r3, r2]
    4250:	2b00      	cmp	r3, #0
    4252:	dc16      	bgt.n	4282 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    4254:	4a46      	ldr	r2, [pc, #280]	; (4370 <spi_data_read+0x1ec>)
    4256:	4940      	ldr	r1, [pc, #256]	; (4358 <spi_data_read+0x1d4>)
    4258:	4b40      	ldr	r3, [pc, #256]	; (435c <spi_data_read+0x1d8>)
    425a:	0018      	movs	r0, r3
    425c:	4b40      	ldr	r3, [pc, #256]	; (4360 <spi_data_read+0x1dc>)
    425e:	4798      	blx	r3
    4260:	230b      	movs	r3, #11
    4262:	18fb      	adds	r3, r7, r3
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	001a      	movs	r2, r3
    4268:	4b42      	ldr	r3, [pc, #264]	; (4374 <spi_data_read+0x1f0>)
    426a:	0011      	movs	r1, r2
    426c:	0018      	movs	r0, r3
    426e:	4b3c      	ldr	r3, [pc, #240]	; (4360 <spi_data_read+0x1dc>)
    4270:	4798      	blx	r3
    4272:	200d      	movs	r0, #13
    4274:	4b3d      	ldr	r3, [pc, #244]	; (436c <spi_data_read+0x1e8>)
    4276:	4798      	blx	r3
			result = N_FAIL;
    4278:	2311      	movs	r3, #17
    427a:	18fb      	adds	r3, r7, r3
    427c:	2200      	movs	r2, #0
    427e:	701a      	strb	r2, [r3, #0]
			break;
    4280:	e05d      	b.n	433e <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    4282:	2314      	movs	r3, #20
    4284:	18fb      	adds	r3, r7, r3
    4286:	2200      	movs	r2, #0
    4288:	5e9b      	ldrsh	r3, [r3, r2]
    428a:	687a      	ldr	r2, [r7, #4]
    428c:	18d2      	adds	r2, r2, r3
    428e:	2312      	movs	r3, #18
    4290:	18fb      	adds	r3, r7, r3
    4292:	881b      	ldrh	r3, [r3, #0]
    4294:	0019      	movs	r1, r3
    4296:	0010      	movs	r0, r2
    4298:	4b2d      	ldr	r3, [pc, #180]	; (4350 <spi_data_read+0x1cc>)
    429a:	4798      	blx	r3
    429c:	1e03      	subs	r3, r0, #0
    429e:	d012      	beq.n	42c6 <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    42a0:	23c5      	movs	r3, #197	; 0xc5
    42a2:	009a      	lsls	r2, r3, #2
    42a4:	492c      	ldr	r1, [pc, #176]	; (4358 <spi_data_read+0x1d4>)
    42a6:	4b2d      	ldr	r3, [pc, #180]	; (435c <spi_data_read+0x1d8>)
    42a8:	0018      	movs	r0, r3
    42aa:	4b2d      	ldr	r3, [pc, #180]	; (4360 <spi_data_read+0x1dc>)
    42ac:	4798      	blx	r3
    42ae:	4b32      	ldr	r3, [pc, #200]	; (4378 <spi_data_read+0x1f4>)
    42b0:	0018      	movs	r0, r3
    42b2:	4b2d      	ldr	r3, [pc, #180]	; (4368 <spi_data_read+0x1e4>)
    42b4:	4798      	blx	r3
    42b6:	200d      	movs	r0, #13
    42b8:	4b2c      	ldr	r3, [pc, #176]	; (436c <spi_data_read+0x1e8>)
    42ba:	4798      	blx	r3
			result = N_FAIL;
    42bc:	2311      	movs	r3, #17
    42be:	18fb      	adds	r3, r7, r3
    42c0:	2200      	movs	r2, #0
    42c2:	701a      	strb	r2, [r3, #0]
			break;
    42c4:	e03b      	b.n	433e <spi_data_read+0x1ba>
		}
		if(!clockless)
    42c6:	1c7b      	adds	r3, r7, #1
    42c8:	781b      	ldrb	r3, [r3, #0]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d11d      	bne.n	430a <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    42ce:	4b2b      	ldr	r3, [pc, #172]	; (437c <spi_data_read+0x1f8>)
    42d0:	781b      	ldrb	r3, [r3, #0]
    42d2:	2b00      	cmp	r3, #0
    42d4:	d119      	bne.n	430a <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    42d6:	230c      	movs	r3, #12
    42d8:	18fb      	adds	r3, r7, r3
    42da:	2102      	movs	r1, #2
    42dc:	0018      	movs	r0, r3
    42de:	4b1c      	ldr	r3, [pc, #112]	; (4350 <spi_data_read+0x1cc>)
    42e0:	4798      	blx	r3
    42e2:	1e03      	subs	r3, r0, #0
    42e4:	d011      	beq.n	430a <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    42e6:	4a26      	ldr	r2, [pc, #152]	; (4380 <spi_data_read+0x1fc>)
    42e8:	491b      	ldr	r1, [pc, #108]	; (4358 <spi_data_read+0x1d4>)
    42ea:	4b1c      	ldr	r3, [pc, #112]	; (435c <spi_data_read+0x1d8>)
    42ec:	0018      	movs	r0, r3
    42ee:	4b1c      	ldr	r3, [pc, #112]	; (4360 <spi_data_read+0x1dc>)
    42f0:	4798      	blx	r3
    42f2:	4b24      	ldr	r3, [pc, #144]	; (4384 <spi_data_read+0x200>)
    42f4:	0018      	movs	r0, r3
    42f6:	4b1c      	ldr	r3, [pc, #112]	; (4368 <spi_data_read+0x1e4>)
    42f8:	4798      	blx	r3
    42fa:	200d      	movs	r0, #13
    42fc:	4b1b      	ldr	r3, [pc, #108]	; (436c <spi_data_read+0x1e8>)
    42fe:	4798      	blx	r3
					result = N_FAIL;
    4300:	2311      	movs	r3, #17
    4302:	18fb      	adds	r3, r7, r3
    4304:	2200      	movs	r2, #0
    4306:	701a      	strb	r2, [r3, #0]
					break;
    4308:	e019      	b.n	433e <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    430a:	2314      	movs	r3, #20
    430c:	18fb      	adds	r3, r7, r3
    430e:	881a      	ldrh	r2, [r3, #0]
    4310:	2312      	movs	r3, #18
    4312:	18fb      	adds	r3, r7, r3
    4314:	881b      	ldrh	r3, [r3, #0]
    4316:	18d3      	adds	r3, r2, r3
    4318:	b29a      	uxth	r2, r3
    431a:	2314      	movs	r3, #20
    431c:	18fb      	adds	r3, r7, r3
    431e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    4320:	2312      	movs	r3, #18
    4322:	18fb      	adds	r3, r7, r3
    4324:	881a      	ldrh	r2, [r3, #0]
    4326:	1cbb      	adds	r3, r7, #2
    4328:	1cb9      	adds	r1, r7, #2
    432a:	8809      	ldrh	r1, [r1, #0]
    432c:	1a8a      	subs	r2, r1, r2
    432e:	801a      	strh	r2, [r3, #0]

	} while (sz);
    4330:	1cbb      	adds	r3, r7, #2
    4332:	881b      	ldrh	r3, [r3, #0]
    4334:	2b00      	cmp	r3, #0
    4336:	d000      	beq.n	433a <spi_data_read+0x1b6>
    4338:	e738      	b.n	41ac <spi_data_read+0x28>
    433a:	e000      	b.n	433e <spi_data_read+0x1ba>
			break;
    433c:	46c0      	nop			; (mov r8, r8)

	return result;
    433e:	2311      	movs	r3, #17
    4340:	18fb      	adds	r3, r7, r3
    4342:	781b      	ldrb	r3, [r3, #0]
    4344:	b25b      	sxtb	r3, r3
}
    4346:	0018      	movs	r0, r3
    4348:	46bd      	mov	sp, r7
    434a:	b006      	add	sp, #24
    434c:	bd80      	pop	{r7, pc}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	00003b01 	.word	0x00003b01
    4354:	000002ff 	.word	0x000002ff
    4358:	0001388c 	.word	0x0001388c
    435c:	000132d4 	.word	0x000132d4
    4360:	0000e7e5 	.word	0x0000e7e5
    4364:	00013398 	.word	0x00013398
    4368:	0000e901 	.word	0x0000e901
    436c:	0000e819 	.word	0x0000e819
    4370:	0000030b 	.word	0x0000030b
    4374:	000133cc 	.word	0x000133cc
    4378:	000133fc 	.word	0x000133fc
    437c:	20000214 	.word	0x20000214
    4380:	0000031f 	.word	0x0000031f
    4384:	0001342c 	.word	0x0001342c

00004388 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    4388:	b580      	push	{r7, lr}
    438a:	b086      	sub	sp, #24
    438c:	af00      	add	r7, sp, #0
    438e:	6078      	str	r0, [r7, #4]
    4390:	000a      	movs	r2, r1
    4392:	1cbb      	adds	r3, r7, #2
    4394:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    4396:	2313      	movs	r3, #19
    4398:	18fb      	adds	r3, r7, r3
    439a:	2201      	movs	r2, #1
    439c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    439e:	230c      	movs	r3, #12
    43a0:	18fb      	adds	r3, r7, r3
    43a2:	2200      	movs	r2, #0
    43a4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    43a6:	2316      	movs	r3, #22
    43a8:	18fb      	adds	r3, r7, r3
    43aa:	2200      	movs	r2, #0
    43ac:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    43ae:	1cbb      	adds	r3, r7, #2
    43b0:	881a      	ldrh	r2, [r3, #0]
    43b2:	2380      	movs	r3, #128	; 0x80
    43b4:	019b      	lsls	r3, r3, #6
    43b6:	429a      	cmp	r2, r3
    43b8:	d805      	bhi.n	43c6 <spi_data_write+0x3e>
			nbytes = sz;
    43ba:	2314      	movs	r3, #20
    43bc:	18fb      	adds	r3, r7, r3
    43be:	1cba      	adds	r2, r7, #2
    43c0:	8812      	ldrh	r2, [r2, #0]
    43c2:	801a      	strh	r2, [r3, #0]
    43c4:	e004      	b.n	43d0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    43c6:	2314      	movs	r3, #20
    43c8:	18fb      	adds	r3, r7, r3
    43ca:	2280      	movs	r2, #128	; 0x80
    43cc:	0192      	lsls	r2, r2, #6
    43ce:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    43d0:	2311      	movs	r3, #17
    43d2:	18fb      	adds	r3, r7, r3
    43d4:	22f0      	movs	r2, #240	; 0xf0
    43d6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    43d8:	2316      	movs	r3, #22
    43da:	18fb      	adds	r3, r7, r3
    43dc:	2200      	movs	r2, #0
    43de:	5e9b      	ldrsh	r3, [r3, r2]
    43e0:	2b00      	cmp	r3, #0
    43e2:	d10f      	bne.n	4404 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    43e4:	1cbb      	adds	r3, r7, #2
    43e6:	881a      	ldrh	r2, [r3, #0]
    43e8:	2380      	movs	r3, #128	; 0x80
    43ea:	019b      	lsls	r3, r3, #6
    43ec:	429a      	cmp	r2, r3
    43ee:	d804      	bhi.n	43fa <spi_data_write+0x72>
				order = 0x3;
    43f0:	2312      	movs	r3, #18
    43f2:	18fb      	adds	r3, r7, r3
    43f4:	2203      	movs	r2, #3
    43f6:	701a      	strb	r2, [r3, #0]
    43f8:	e013      	b.n	4422 <spi_data_write+0x9a>
			else
				order = 0x1;
    43fa:	2312      	movs	r3, #18
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	2201      	movs	r2, #1
    4400:	701a      	strb	r2, [r3, #0]
    4402:	e00e      	b.n	4422 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    4404:	1cbb      	adds	r3, r7, #2
    4406:	881a      	ldrh	r2, [r3, #0]
    4408:	2380      	movs	r3, #128	; 0x80
    440a:	019b      	lsls	r3, r3, #6
    440c:	429a      	cmp	r2, r3
    440e:	d804      	bhi.n	441a <spi_data_write+0x92>
				order = 0x3;
    4410:	2312      	movs	r3, #18
    4412:	18fb      	adds	r3, r7, r3
    4414:	2203      	movs	r2, #3
    4416:	701a      	strb	r2, [r3, #0]
    4418:	e003      	b.n	4422 <spi_data_write+0x9a>
			else
				order = 0x2;
    441a:	2312      	movs	r3, #18
    441c:	18fb      	adds	r3, r7, r3
    441e:	2202      	movs	r2, #2
    4420:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    4422:	2311      	movs	r3, #17
    4424:	18fb      	adds	r3, r7, r3
    4426:	781a      	ldrb	r2, [r3, #0]
    4428:	2312      	movs	r3, #18
    442a:	18fb      	adds	r3, r7, r3
    442c:	781b      	ldrb	r3, [r3, #0]
    442e:	4313      	orrs	r3, r2
    4430:	b2da      	uxtb	r2, r3
    4432:	2311      	movs	r3, #17
    4434:	18fb      	adds	r3, r7, r3
    4436:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    4438:	2311      	movs	r3, #17
    443a:	18fb      	adds	r3, r7, r3
    443c:	2101      	movs	r1, #1
    443e:	0018      	movs	r0, r3
    4440:	4b3a      	ldr	r3, [pc, #232]	; (452c <spi_data_write+0x1a4>)
    4442:	4798      	blx	r3
    4444:	1e03      	subs	r3, r0, #0
    4446:	d012      	beq.n	446e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    4448:	23d4      	movs	r3, #212	; 0xd4
    444a:	009a      	lsls	r2, r3, #2
    444c:	4938      	ldr	r1, [pc, #224]	; (4530 <spi_data_write+0x1a8>)
    444e:	4b39      	ldr	r3, [pc, #228]	; (4534 <spi_data_write+0x1ac>)
    4450:	0018      	movs	r0, r3
    4452:	4b39      	ldr	r3, [pc, #228]	; (4538 <spi_data_write+0x1b0>)
    4454:	4798      	blx	r3
    4456:	4b39      	ldr	r3, [pc, #228]	; (453c <spi_data_write+0x1b4>)
    4458:	0018      	movs	r0, r3
    445a:	4b39      	ldr	r3, [pc, #228]	; (4540 <spi_data_write+0x1b8>)
    445c:	4798      	blx	r3
    445e:	200d      	movs	r0, #13
    4460:	4b38      	ldr	r3, [pc, #224]	; (4544 <spi_data_write+0x1bc>)
    4462:	4798      	blx	r3
			result = N_FAIL;
    4464:	2313      	movs	r3, #19
    4466:	18fb      	adds	r3, r7, r3
    4468:	2200      	movs	r2, #0
    446a:	701a      	strb	r2, [r3, #0]
			break;
    446c:	e056      	b.n	451c <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    446e:	2316      	movs	r3, #22
    4470:	18fb      	adds	r3, r7, r3
    4472:	2200      	movs	r2, #0
    4474:	5e9b      	ldrsh	r3, [r3, r2]
    4476:	687a      	ldr	r2, [r7, #4]
    4478:	18d2      	adds	r2, r2, r3
    447a:	2314      	movs	r3, #20
    447c:	18fb      	adds	r3, r7, r3
    447e:	881b      	ldrh	r3, [r3, #0]
    4480:	0019      	movs	r1, r3
    4482:	0010      	movs	r0, r2
    4484:	4b29      	ldr	r3, [pc, #164]	; (452c <spi_data_write+0x1a4>)
    4486:	4798      	blx	r3
    4488:	1e03      	subs	r3, r0, #0
    448a:	d011      	beq.n	44b0 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    448c:	4a2e      	ldr	r2, [pc, #184]	; (4548 <spi_data_write+0x1c0>)
    448e:	4928      	ldr	r1, [pc, #160]	; (4530 <spi_data_write+0x1a8>)
    4490:	4b28      	ldr	r3, [pc, #160]	; (4534 <spi_data_write+0x1ac>)
    4492:	0018      	movs	r0, r3
    4494:	4b28      	ldr	r3, [pc, #160]	; (4538 <spi_data_write+0x1b0>)
    4496:	4798      	blx	r3
    4498:	4b2c      	ldr	r3, [pc, #176]	; (454c <spi_data_write+0x1c4>)
    449a:	0018      	movs	r0, r3
    449c:	4b28      	ldr	r3, [pc, #160]	; (4540 <spi_data_write+0x1b8>)
    449e:	4798      	blx	r3
    44a0:	200d      	movs	r0, #13
    44a2:	4b28      	ldr	r3, [pc, #160]	; (4544 <spi_data_write+0x1bc>)
    44a4:	4798      	blx	r3
			result = N_FAIL;
    44a6:	2313      	movs	r3, #19
    44a8:	18fb      	adds	r3, r7, r3
    44aa:	2200      	movs	r2, #0
    44ac:	701a      	strb	r2, [r3, #0]
			break;
    44ae:	e035      	b.n	451c <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    44b0:	4b27      	ldr	r3, [pc, #156]	; (4550 <spi_data_write+0x1c8>)
    44b2:	781b      	ldrb	r3, [r3, #0]
    44b4:	2b00      	cmp	r3, #0
    44b6:	d119      	bne.n	44ec <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    44b8:	230c      	movs	r3, #12
    44ba:	18fb      	adds	r3, r7, r3
    44bc:	2102      	movs	r1, #2
    44be:	0018      	movs	r0, r3
    44c0:	4b1a      	ldr	r3, [pc, #104]	; (452c <spi_data_write+0x1a4>)
    44c2:	4798      	blx	r3
    44c4:	1e03      	subs	r3, r0, #0
    44c6:	d011      	beq.n	44ec <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    44c8:	4a22      	ldr	r2, [pc, #136]	; (4554 <spi_data_write+0x1cc>)
    44ca:	4919      	ldr	r1, [pc, #100]	; (4530 <spi_data_write+0x1a8>)
    44cc:	4b19      	ldr	r3, [pc, #100]	; (4534 <spi_data_write+0x1ac>)
    44ce:	0018      	movs	r0, r3
    44d0:	4b19      	ldr	r3, [pc, #100]	; (4538 <spi_data_write+0x1b0>)
    44d2:	4798      	blx	r3
    44d4:	4b20      	ldr	r3, [pc, #128]	; (4558 <spi_data_write+0x1d0>)
    44d6:	0018      	movs	r0, r3
    44d8:	4b19      	ldr	r3, [pc, #100]	; (4540 <spi_data_write+0x1b8>)
    44da:	4798      	blx	r3
    44dc:	200d      	movs	r0, #13
    44de:	4b19      	ldr	r3, [pc, #100]	; (4544 <spi_data_write+0x1bc>)
    44e0:	4798      	blx	r3
				result = N_FAIL;
    44e2:	2313      	movs	r3, #19
    44e4:	18fb      	adds	r3, r7, r3
    44e6:	2200      	movs	r2, #0
    44e8:	701a      	strb	r2, [r3, #0]
				break;
    44ea:	e017      	b.n	451c <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    44ec:	2316      	movs	r3, #22
    44ee:	18fb      	adds	r3, r7, r3
    44f0:	881a      	ldrh	r2, [r3, #0]
    44f2:	2314      	movs	r3, #20
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	881b      	ldrh	r3, [r3, #0]
    44f8:	18d3      	adds	r3, r2, r3
    44fa:	b29a      	uxth	r2, r3
    44fc:	2316      	movs	r3, #22
    44fe:	18fb      	adds	r3, r7, r3
    4500:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    4502:	1cbb      	adds	r3, r7, #2
    4504:	1cb9      	adds	r1, r7, #2
    4506:	2214      	movs	r2, #20
    4508:	18ba      	adds	r2, r7, r2
    450a:	8809      	ldrh	r1, [r1, #0]
    450c:	8812      	ldrh	r2, [r2, #0]
    450e:	1a8a      	subs	r2, r1, r2
    4510:	801a      	strh	r2, [r3, #0]
	} while (sz);
    4512:	1cbb      	adds	r3, r7, #2
    4514:	881b      	ldrh	r3, [r3, #0]
    4516:	2b00      	cmp	r3, #0
    4518:	d000      	beq.n	451c <spi_data_write+0x194>
    451a:	e748      	b.n	43ae <spi_data_write+0x26>


	return result;
    451c:	2313      	movs	r3, #19
    451e:	18fb      	adds	r3, r7, r3
    4520:	781b      	ldrb	r3, [r3, #0]
    4522:	b25b      	sxtb	r3, r3
}
    4524:	0018      	movs	r0, r3
    4526:	46bd      	mov	sp, r7
    4528:	b006      	add	sp, #24
    452a:	bd80      	pop	{r7, pc}
    452c:	00003b45 	.word	0x00003b45
    4530:	0001389c 	.word	0x0001389c
    4534:	000132d4 	.word	0x000132d4
    4538:	0000e7e5 	.word	0x0000e7e5
    453c:	00013460 	.word	0x00013460
    4540:	0000e901 	.word	0x0000e901
    4544:	0000e819 	.word	0x0000e819
    4548:	00000359 	.word	0x00000359
    454c:	00013498 	.word	0x00013498
    4550:	20000214 	.word	0x20000214
    4554:	00000363 	.word	0x00000363
    4558:	000134cc 	.word	0x000134cc

0000455c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    455c:	b5b0      	push	{r4, r5, r7, lr}
    455e:	b086      	sub	sp, #24
    4560:	af02      	add	r7, sp, #8
    4562:	6078      	str	r0, [r7, #4]
    4564:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    4566:	230f      	movs	r3, #15
    4568:	18fb      	adds	r3, r7, r3
    456a:	220a      	movs	r2, #10
    456c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    456e:	230e      	movs	r3, #14
    4570:	18fb      	adds	r3, r7, r3
    4572:	2201      	movs	r2, #1
    4574:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    4576:	230d      	movs	r3, #13
    4578:	18fb      	adds	r3, r7, r3
    457a:	22c9      	movs	r2, #201	; 0xc9
    457c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    457e:	230c      	movs	r3, #12
    4580:	18fb      	adds	r3, r7, r3
    4582:	2200      	movs	r2, #0
    4584:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	2b30      	cmp	r3, #48	; 0x30
    458a:	d808      	bhi.n	459e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    458c:	230d      	movs	r3, #13
    458e:	18fb      	adds	r3, r7, r3
    4590:	22c3      	movs	r2, #195	; 0xc3
    4592:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    4594:	230c      	movs	r3, #12
    4596:	18fb      	adds	r3, r7, r3
    4598:	2201      	movs	r2, #1
    459a:	701a      	strb	r2, [r3, #0]
    459c:	e007      	b.n	45ae <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    459e:	230d      	movs	r3, #13
    45a0:	18fb      	adds	r3, r7, r3
    45a2:	22c9      	movs	r2, #201	; 0xc9
    45a4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    45a6:	230c      	movs	r3, #12
    45a8:	18fb      	adds	r3, r7, r3
    45aa:	2200      	movs	r2, #0
    45ac:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    45ae:	230e      	movs	r3, #14
    45b0:	18fc      	adds	r4, r7, r3
    45b2:	683a      	ldr	r2, [r7, #0]
    45b4:	6879      	ldr	r1, [r7, #4]
    45b6:	230d      	movs	r3, #13
    45b8:	18fb      	adds	r3, r7, r3
    45ba:	7818      	ldrb	r0, [r3, #0]
    45bc:	230c      	movs	r3, #12
    45be:	18fb      	adds	r3, r7, r3
    45c0:	781b      	ldrb	r3, [r3, #0]
    45c2:	9300      	str	r3, [sp, #0]
    45c4:	2304      	movs	r3, #4
    45c6:	4d3c      	ldr	r5, [pc, #240]	; (46b8 <spi_write_reg+0x15c>)
    45c8:	47a8      	blx	r5
    45ca:	0003      	movs	r3, r0
    45cc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    45ce:	230e      	movs	r3, #14
    45d0:	18fb      	adds	r3, r7, r3
    45d2:	781b      	ldrb	r3, [r3, #0]
    45d4:	b25b      	sxtb	r3, r3
    45d6:	2b01      	cmp	r3, #1
    45d8:	d00f      	beq.n	45fa <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    45da:	4a38      	ldr	r2, [pc, #224]	; (46bc <spi_write_reg+0x160>)
    45dc:	4938      	ldr	r1, [pc, #224]	; (46c0 <spi_write_reg+0x164>)
    45de:	4b39      	ldr	r3, [pc, #228]	; (46c4 <spi_write_reg+0x168>)
    45e0:	0018      	movs	r0, r3
    45e2:	4b39      	ldr	r3, [pc, #228]	; (46c8 <spi_write_reg+0x16c>)
    45e4:	4798      	blx	r3
    45e6:	687a      	ldr	r2, [r7, #4]
    45e8:	4b38      	ldr	r3, [pc, #224]	; (46cc <spi_write_reg+0x170>)
    45ea:	0011      	movs	r1, r2
    45ec:	0018      	movs	r0, r3
    45ee:	4b36      	ldr	r3, [pc, #216]	; (46c8 <spi_write_reg+0x16c>)
    45f0:	4798      	blx	r3
    45f2:	200d      	movs	r0, #13
    45f4:	4b36      	ldr	r3, [pc, #216]	; (46d0 <spi_write_reg+0x174>)
    45f6:	4798      	blx	r3
		goto _FAIL_;
    45f8:	e020      	b.n	463c <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    45fa:	230e      	movs	r3, #14
    45fc:	18fc      	adds	r4, r7, r3
    45fe:	230d      	movs	r3, #13
    4600:	18fb      	adds	r3, r7, r3
    4602:	781b      	ldrb	r3, [r3, #0]
    4604:	0018      	movs	r0, r3
    4606:	4b33      	ldr	r3, [pc, #204]	; (46d4 <spi_write_reg+0x178>)
    4608:	4798      	blx	r3
    460a:	0003      	movs	r3, r0
    460c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    460e:	230e      	movs	r3, #14
    4610:	18fb      	adds	r3, r7, r3
    4612:	781b      	ldrb	r3, [r3, #0]
    4614:	b25b      	sxtb	r3, r3
    4616:	2b01      	cmp	r3, #1
    4618:	d010      	beq.n	463c <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    461a:	23e7      	movs	r3, #231	; 0xe7
    461c:	009a      	lsls	r2, r3, #2
    461e:	4928      	ldr	r1, [pc, #160]	; (46c0 <spi_write_reg+0x164>)
    4620:	4b28      	ldr	r3, [pc, #160]	; (46c4 <spi_write_reg+0x168>)
    4622:	0018      	movs	r0, r3
    4624:	4b28      	ldr	r3, [pc, #160]	; (46c8 <spi_write_reg+0x16c>)
    4626:	4798      	blx	r3
    4628:	687a      	ldr	r2, [r7, #4]
    462a:	4b2b      	ldr	r3, [pc, #172]	; (46d8 <spi_write_reg+0x17c>)
    462c:	0011      	movs	r1, r2
    462e:	0018      	movs	r0, r3
    4630:	4b25      	ldr	r3, [pc, #148]	; (46c8 <spi_write_reg+0x16c>)
    4632:	4798      	blx	r3
    4634:	200d      	movs	r0, #13
    4636:	4b26      	ldr	r3, [pc, #152]	; (46d0 <spi_write_reg+0x174>)
    4638:	4798      	blx	r3
		goto _FAIL_;
    463a:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    463c:	230e      	movs	r3, #14
    463e:	18fb      	adds	r3, r7, r3
    4640:	781b      	ldrb	r3, [r3, #0]
    4642:	b25b      	sxtb	r3, r3
    4644:	2b01      	cmp	r3, #1
    4646:	d02e      	beq.n	46a6 <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    4648:	2001      	movs	r0, #1
    464a:	4b24      	ldr	r3, [pc, #144]	; (46dc <spi_write_reg+0x180>)
    464c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    464e:	2300      	movs	r3, #0
    4650:	9300      	str	r3, [sp, #0]
    4652:	2300      	movs	r3, #0
    4654:	2200      	movs	r2, #0
    4656:	2100      	movs	r1, #0
    4658:	20cf      	movs	r0, #207	; 0xcf
    465a:	4c17      	ldr	r4, [pc, #92]	; (46b8 <spi_write_reg+0x15c>)
    465c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    465e:	20cf      	movs	r0, #207	; 0xcf
    4660:	4b1c      	ldr	r3, [pc, #112]	; (46d4 <spi_write_reg+0x178>)
    4662:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    4664:	4a1e      	ldr	r2, [pc, #120]	; (46e0 <spi_write_reg+0x184>)
    4666:	4916      	ldr	r1, [pc, #88]	; (46c0 <spi_write_reg+0x164>)
    4668:	4b16      	ldr	r3, [pc, #88]	; (46c4 <spi_write_reg+0x168>)
    466a:	0018      	movs	r0, r3
    466c:	4b16      	ldr	r3, [pc, #88]	; (46c8 <spi_write_reg+0x16c>)
    466e:	4798      	blx	r3
    4670:	230f      	movs	r3, #15
    4672:	18fb      	adds	r3, r7, r3
    4674:	7819      	ldrb	r1, [r3, #0]
    4676:	683b      	ldr	r3, [r7, #0]
    4678:	687a      	ldr	r2, [r7, #4]
    467a:	481a      	ldr	r0, [pc, #104]	; (46e4 <spi_write_reg+0x188>)
    467c:	4c12      	ldr	r4, [pc, #72]	; (46c8 <spi_write_reg+0x16c>)
    467e:	47a0      	blx	r4
    4680:	200d      	movs	r0, #13
    4682:	4b13      	ldr	r3, [pc, #76]	; (46d0 <spi_write_reg+0x174>)
    4684:	4798      	blx	r3
		nm_bsp_sleep(1);
    4686:	2001      	movs	r0, #1
    4688:	4b14      	ldr	r3, [pc, #80]	; (46dc <spi_write_reg+0x180>)
    468a:	4798      	blx	r3
		retry--;
    468c:	230f      	movs	r3, #15
    468e:	18fb      	adds	r3, r7, r3
    4690:	781a      	ldrb	r2, [r3, #0]
    4692:	230f      	movs	r3, #15
    4694:	18fb      	adds	r3, r7, r3
    4696:	3a01      	subs	r2, #1
    4698:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    469a:	230f      	movs	r3, #15
    469c:	18fb      	adds	r3, r7, r3
    469e:	781b      	ldrb	r3, [r3, #0]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d000      	beq.n	46a6 <spi_write_reg+0x14a>
    46a4:	e76f      	b.n	4586 <spi_write_reg+0x2a>
	}

	return result;
    46a6:	230e      	movs	r3, #14
    46a8:	18fb      	adds	r3, r7, r3
    46aa:	781b      	ldrb	r3, [r3, #0]
    46ac:	b25b      	sxtb	r3, r3
}
    46ae:	0018      	movs	r0, r3
    46b0:	46bd      	mov	sp, r7
    46b2:	b004      	add	sp, #16
    46b4:	bdb0      	pop	{r4, r5, r7, pc}
    46b6:	46c0      	nop			; (mov r8, r8)
    46b8:	00003c09 	.word	0x00003c09
    46bc:	00000396 	.word	0x00000396
    46c0:	000138ac 	.word	0x000138ac
    46c4:	000132d4 	.word	0x000132d4
    46c8:	0000e7e5 	.word	0x0000e7e5
    46cc:	00013504 	.word	0x00013504
    46d0:	0000e819 	.word	0x0000e819
    46d4:	0000404d 	.word	0x0000404d
    46d8:	00013530 	.word	0x00013530
    46dc:	00000b49 	.word	0x00000b49
    46e0:	000003af 	.word	0x000003af
    46e4:	00013568 	.word	0x00013568

000046e8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    46e8:	b5b0      	push	{r4, r5, r7, lr}
    46ea:	b088      	sub	sp, #32
    46ec:	af02      	add	r7, sp, #8
    46ee:	60f8      	str	r0, [r7, #12]
    46f0:	60b9      	str	r1, [r7, #8]
    46f2:	1dbb      	adds	r3, r7, #6
    46f4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    46f6:	2316      	movs	r3, #22
    46f8:	18fb      	adds	r3, r7, r3
    46fa:	220a      	movs	r2, #10
    46fc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    46fe:	2315      	movs	r3, #21
    4700:	18fb      	adds	r3, r7, r3
    4702:	22c7      	movs	r2, #199	; 0xc7
    4704:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    4706:	1dbb      	adds	r3, r7, #6
    4708:	881b      	ldrh	r3, [r3, #0]
    470a:	2b01      	cmp	r3, #1
    470c:	d102      	bne.n	4714 <nm_spi_write+0x2c>
		size = 2;
    470e:	1dbb      	adds	r3, r7, #6
    4710:	2202      	movs	r2, #2
    4712:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    4714:	1dbb      	adds	r3, r7, #6
    4716:	881a      	ldrh	r2, [r3, #0]
    4718:	2317      	movs	r3, #23
    471a:	18fc      	adds	r4, r7, r3
    471c:	68f9      	ldr	r1, [r7, #12]
    471e:	2315      	movs	r3, #21
    4720:	18fb      	adds	r3, r7, r3
    4722:	7818      	ldrb	r0, [r3, #0]
    4724:	2300      	movs	r3, #0
    4726:	9300      	str	r3, [sp, #0]
    4728:	0013      	movs	r3, r2
    472a:	2200      	movs	r2, #0
    472c:	4d5b      	ldr	r5, [pc, #364]	; (489c <nm_spi_write+0x1b4>)
    472e:	47a8      	blx	r5
    4730:	0003      	movs	r3, r0
    4732:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4734:	2317      	movs	r3, #23
    4736:	18fb      	adds	r3, r7, r3
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	b25b      	sxtb	r3, r3
    473c:	2b01      	cmp	r3, #1
    473e:	d00f      	beq.n	4760 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    4740:	4a57      	ldr	r2, [pc, #348]	; (48a0 <nm_spi_write+0x1b8>)
    4742:	4958      	ldr	r1, [pc, #352]	; (48a4 <nm_spi_write+0x1bc>)
    4744:	4b58      	ldr	r3, [pc, #352]	; (48a8 <nm_spi_write+0x1c0>)
    4746:	0018      	movs	r0, r3
    4748:	4b58      	ldr	r3, [pc, #352]	; (48ac <nm_spi_write+0x1c4>)
    474a:	4798      	blx	r3
    474c:	68fa      	ldr	r2, [r7, #12]
    474e:	4b58      	ldr	r3, [pc, #352]	; (48b0 <nm_spi_write+0x1c8>)
    4750:	0011      	movs	r1, r2
    4752:	0018      	movs	r0, r3
    4754:	4b55      	ldr	r3, [pc, #340]	; (48ac <nm_spi_write+0x1c4>)
    4756:	4798      	blx	r3
    4758:	200d      	movs	r0, #13
    475a:	4b56      	ldr	r3, [pc, #344]	; (48b4 <nm_spi_write+0x1cc>)
    475c:	4798      	blx	r3
		goto _FAIL_;
    475e:	e05f      	b.n	4820 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    4760:	2317      	movs	r3, #23
    4762:	18fc      	adds	r4, r7, r3
    4764:	2315      	movs	r3, #21
    4766:	18fb      	adds	r3, r7, r3
    4768:	781b      	ldrb	r3, [r3, #0]
    476a:	0018      	movs	r0, r3
    476c:	4b52      	ldr	r3, [pc, #328]	; (48b8 <nm_spi_write+0x1d0>)
    476e:	4798      	blx	r3
    4770:	0003      	movs	r3, r0
    4772:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4774:	2317      	movs	r3, #23
    4776:	18fb      	adds	r3, r7, r3
    4778:	781b      	ldrb	r3, [r3, #0]
    477a:	b25b      	sxtb	r3, r3
    477c:	2b01      	cmp	r3, #1
    477e:	d010      	beq.n	47a2 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    4780:	23f4      	movs	r3, #244	; 0xf4
    4782:	009a      	lsls	r2, r3, #2
    4784:	4947      	ldr	r1, [pc, #284]	; (48a4 <nm_spi_write+0x1bc>)
    4786:	4b48      	ldr	r3, [pc, #288]	; (48a8 <nm_spi_write+0x1c0>)
    4788:	0018      	movs	r0, r3
    478a:	4b48      	ldr	r3, [pc, #288]	; (48ac <nm_spi_write+0x1c4>)
    478c:	4798      	blx	r3
    478e:	68fa      	ldr	r2, [r7, #12]
    4790:	4b4a      	ldr	r3, [pc, #296]	; (48bc <nm_spi_write+0x1d4>)
    4792:	0011      	movs	r1, r2
    4794:	0018      	movs	r0, r3
    4796:	4b45      	ldr	r3, [pc, #276]	; (48ac <nm_spi_write+0x1c4>)
    4798:	4798      	blx	r3
    479a:	200d      	movs	r0, #13
    479c:	4b45      	ldr	r3, [pc, #276]	; (48b4 <nm_spi_write+0x1cc>)
    479e:	4798      	blx	r3
		goto _FAIL_;
    47a0:	e03e      	b.n	4820 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    47a2:	2317      	movs	r3, #23
    47a4:	18fc      	adds	r4, r7, r3
    47a6:	1dbb      	adds	r3, r7, #6
    47a8:	881a      	ldrh	r2, [r3, #0]
    47aa:	68bb      	ldr	r3, [r7, #8]
    47ac:	0011      	movs	r1, r2
    47ae:	0018      	movs	r0, r3
    47b0:	4b43      	ldr	r3, [pc, #268]	; (48c0 <nm_spi_write+0x1d8>)
    47b2:	4798      	blx	r3
    47b4:	0003      	movs	r3, r0
    47b6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    47b8:	2317      	movs	r3, #23
    47ba:	18fb      	adds	r3, r7, r3
    47bc:	781b      	ldrb	r3, [r3, #0]
    47be:	b25b      	sxtb	r3, r3
    47c0:	2b01      	cmp	r3, #1
    47c2:	d00e      	beq.n	47e2 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    47c4:	23f8      	movs	r3, #248	; 0xf8
    47c6:	009a      	lsls	r2, r3, #2
    47c8:	4936      	ldr	r1, [pc, #216]	; (48a4 <nm_spi_write+0x1bc>)
    47ca:	4b37      	ldr	r3, [pc, #220]	; (48a8 <nm_spi_write+0x1c0>)
    47cc:	0018      	movs	r0, r3
    47ce:	4b37      	ldr	r3, [pc, #220]	; (48ac <nm_spi_write+0x1c4>)
    47d0:	4798      	blx	r3
    47d2:	4b3c      	ldr	r3, [pc, #240]	; (48c4 <nm_spi_write+0x1dc>)
    47d4:	0018      	movs	r0, r3
    47d6:	4b3c      	ldr	r3, [pc, #240]	; (48c8 <nm_spi_write+0x1e0>)
    47d8:	4798      	blx	r3
    47da:	200d      	movs	r0, #13
    47dc:	4b35      	ldr	r3, [pc, #212]	; (48b4 <nm_spi_write+0x1cc>)
    47de:	4798      	blx	r3
		goto _FAIL_;
    47e0:	e01e      	b.n	4820 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    47e2:	2317      	movs	r3, #23
    47e4:	18fc      	adds	r4, r7, r3
    47e6:	2315      	movs	r3, #21
    47e8:	18fb      	adds	r3, r7, r3
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	0018      	movs	r0, r3
    47ee:	4b37      	ldr	r3, [pc, #220]	; (48cc <nm_spi_write+0x1e4>)
    47f0:	4798      	blx	r3
    47f2:	0003      	movs	r3, r0
    47f4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    47f6:	2317      	movs	r3, #23
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	b25b      	sxtb	r3, r3
    47fe:	2b01      	cmp	r3, #1
    4800:	d00e      	beq.n	4820 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    4802:	23fa      	movs	r3, #250	; 0xfa
    4804:	009a      	lsls	r2, r3, #2
    4806:	4927      	ldr	r1, [pc, #156]	; (48a4 <nm_spi_write+0x1bc>)
    4808:	4b27      	ldr	r3, [pc, #156]	; (48a8 <nm_spi_write+0x1c0>)
    480a:	0018      	movs	r0, r3
    480c:	4b27      	ldr	r3, [pc, #156]	; (48ac <nm_spi_write+0x1c4>)
    480e:	4798      	blx	r3
    4810:	4b2c      	ldr	r3, [pc, #176]	; (48c4 <nm_spi_write+0x1dc>)
    4812:	0018      	movs	r0, r3
    4814:	4b2c      	ldr	r3, [pc, #176]	; (48c8 <nm_spi_write+0x1e0>)
    4816:	4798      	blx	r3
    4818:	200d      	movs	r0, #13
    481a:	4b26      	ldr	r3, [pc, #152]	; (48b4 <nm_spi_write+0x1cc>)
    481c:	4798      	blx	r3
		goto _FAIL_;
    481e:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    4820:	2317      	movs	r3, #23
    4822:	18fb      	adds	r3, r7, r3
    4824:	781b      	ldrb	r3, [r3, #0]
    4826:	b25b      	sxtb	r3, r3
    4828:	2b01      	cmp	r3, #1
    482a:	d02f      	beq.n	488c <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    482c:	2001      	movs	r0, #1
    482e:	4b28      	ldr	r3, [pc, #160]	; (48d0 <nm_spi_write+0x1e8>)
    4830:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4832:	2300      	movs	r3, #0
    4834:	9300      	str	r3, [sp, #0]
    4836:	2300      	movs	r3, #0
    4838:	2200      	movs	r2, #0
    483a:	2100      	movs	r1, #0
    483c:	20cf      	movs	r0, #207	; 0xcf
    483e:	4c17      	ldr	r4, [pc, #92]	; (489c <nm_spi_write+0x1b4>)
    4840:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4842:	20cf      	movs	r0, #207	; 0xcf
    4844:	4b1c      	ldr	r3, [pc, #112]	; (48b8 <nm_spi_write+0x1d0>)
    4846:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4848:	4a22      	ldr	r2, [pc, #136]	; (48d4 <nm_spi_write+0x1ec>)
    484a:	4916      	ldr	r1, [pc, #88]	; (48a4 <nm_spi_write+0x1bc>)
    484c:	4b16      	ldr	r3, [pc, #88]	; (48a8 <nm_spi_write+0x1c0>)
    484e:	0018      	movs	r0, r3
    4850:	4b16      	ldr	r3, [pc, #88]	; (48ac <nm_spi_write+0x1c4>)
    4852:	4798      	blx	r3
    4854:	2316      	movs	r3, #22
    4856:	18fb      	adds	r3, r7, r3
    4858:	7819      	ldrb	r1, [r3, #0]
    485a:	1dbb      	adds	r3, r7, #6
    485c:	881b      	ldrh	r3, [r3, #0]
    485e:	68fa      	ldr	r2, [r7, #12]
    4860:	481d      	ldr	r0, [pc, #116]	; (48d8 <nm_spi_write+0x1f0>)
    4862:	4c12      	ldr	r4, [pc, #72]	; (48ac <nm_spi_write+0x1c4>)
    4864:	47a0      	blx	r4
    4866:	200d      	movs	r0, #13
    4868:	4b12      	ldr	r3, [pc, #72]	; (48b4 <nm_spi_write+0x1cc>)
    486a:	4798      	blx	r3
		nm_bsp_sleep(1);
    486c:	2001      	movs	r0, #1
    486e:	4b18      	ldr	r3, [pc, #96]	; (48d0 <nm_spi_write+0x1e8>)
    4870:	4798      	blx	r3
		retry--;
    4872:	2316      	movs	r3, #22
    4874:	18fb      	adds	r3, r7, r3
    4876:	781a      	ldrb	r2, [r3, #0]
    4878:	2316      	movs	r3, #22
    487a:	18fb      	adds	r3, r7, r3
    487c:	3a01      	subs	r2, #1
    487e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4880:	2316      	movs	r3, #22
    4882:	18fb      	adds	r3, r7, r3
    4884:	781b      	ldrb	r3, [r3, #0]
    4886:	2b00      	cmp	r3, #0
    4888:	d000      	beq.n	488c <nm_spi_write+0x1a4>
    488a:	e73c      	b.n	4706 <nm_spi_write+0x1e>
	}


	return result;
    488c:	2317      	movs	r3, #23
    488e:	18fb      	adds	r3, r7, r3
    4890:	781b      	ldrb	r3, [r3, #0]
    4892:	b25b      	sxtb	r3, r3
}
    4894:	0018      	movs	r0, r3
    4896:	46bd      	mov	sp, r7
    4898:	b006      	add	sp, #24
    489a:	bdb0      	pop	{r4, r5, r7, pc}
    489c:	00003c09 	.word	0x00003c09
    48a0:	000003ca 	.word	0x000003ca
    48a4:	000138bc 	.word	0x000138bc
    48a8:	000132d4 	.word	0x000132d4
    48ac:	0000e7e5 	.word	0x0000e7e5
    48b0:	00013584 	.word	0x00013584
    48b4:	0000e819 	.word	0x0000e819
    48b8:	0000404d 	.word	0x0000404d
    48bc:	000135b4 	.word	0x000135b4
    48c0:	00004389 	.word	0x00004389
    48c4:	000135ec 	.word	0x000135ec
    48c8:	0000e901 	.word	0x0000e901
    48cc:	00003f4d 	.word	0x00003f4d
    48d0:	00000b49 	.word	0x00000b49
    48d4:	000003f2 	.word	0x000003f2
    48d8:	00013614 	.word	0x00013614

000048dc <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    48dc:	b5b0      	push	{r4, r5, r7, lr}
    48de:	b086      	sub	sp, #24
    48e0:	af02      	add	r7, sp, #8
    48e2:	6078      	str	r0, [r7, #4]
    48e4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    48e6:	230f      	movs	r3, #15
    48e8:	18fb      	adds	r3, r7, r3
    48ea:	220a      	movs	r2, #10
    48ec:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    48ee:	230e      	movs	r3, #14
    48f0:	18fb      	adds	r3, r7, r3
    48f2:	2201      	movs	r2, #1
    48f4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    48f6:	230d      	movs	r3, #13
    48f8:	18fb      	adds	r3, r7, r3
    48fa:	22ca      	movs	r2, #202	; 0xca
    48fc:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    48fe:	230c      	movs	r3, #12
    4900:	18fb      	adds	r3, r7, r3
    4902:	2200      	movs	r2, #0
    4904:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    4906:	687b      	ldr	r3, [r7, #4]
    4908:	2bff      	cmp	r3, #255	; 0xff
    490a:	d808      	bhi.n	491e <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    490c:	230d      	movs	r3, #13
    490e:	18fb      	adds	r3, r7, r3
    4910:	22c4      	movs	r2, #196	; 0xc4
    4912:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    4914:	230c      	movs	r3, #12
    4916:	18fb      	adds	r3, r7, r3
    4918:	2201      	movs	r2, #1
    491a:	701a      	strb	r2, [r3, #0]
    491c:	e007      	b.n	492e <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    491e:	230d      	movs	r3, #13
    4920:	18fb      	adds	r3, r7, r3
    4922:	22ca      	movs	r2, #202	; 0xca
    4924:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    4926:	230c      	movs	r3, #12
    4928:	18fb      	adds	r3, r7, r3
    492a:	2200      	movs	r2, #0
    492c:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    492e:	230e      	movs	r3, #14
    4930:	18fc      	adds	r4, r7, r3
    4932:	6879      	ldr	r1, [r7, #4]
    4934:	230d      	movs	r3, #13
    4936:	18fb      	adds	r3, r7, r3
    4938:	7818      	ldrb	r0, [r3, #0]
    493a:	230c      	movs	r3, #12
    493c:	18fb      	adds	r3, r7, r3
    493e:	781b      	ldrb	r3, [r3, #0]
    4940:	9300      	str	r3, [sp, #0]
    4942:	2304      	movs	r3, #4
    4944:	2200      	movs	r2, #0
    4946:	4d56      	ldr	r5, [pc, #344]	; (4aa0 <spi_read_reg+0x1c4>)
    4948:	47a8      	blx	r5
    494a:	0003      	movs	r3, r0
    494c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    494e:	230e      	movs	r3, #14
    4950:	18fb      	adds	r3, r7, r3
    4952:	781b      	ldrb	r3, [r3, #0]
    4954:	b25b      	sxtb	r3, r3
    4956:	2b01      	cmp	r3, #1
    4958:	d00f      	beq.n	497a <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    495a:	4a52      	ldr	r2, [pc, #328]	; (4aa4 <spi_read_reg+0x1c8>)
    495c:	4952      	ldr	r1, [pc, #328]	; (4aa8 <spi_read_reg+0x1cc>)
    495e:	4b53      	ldr	r3, [pc, #332]	; (4aac <spi_read_reg+0x1d0>)
    4960:	0018      	movs	r0, r3
    4962:	4b53      	ldr	r3, [pc, #332]	; (4ab0 <spi_read_reg+0x1d4>)
    4964:	4798      	blx	r3
    4966:	687a      	ldr	r2, [r7, #4]
    4968:	4b52      	ldr	r3, [pc, #328]	; (4ab4 <spi_read_reg+0x1d8>)
    496a:	0011      	movs	r1, r2
    496c:	0018      	movs	r0, r3
    496e:	4b50      	ldr	r3, [pc, #320]	; (4ab0 <spi_read_reg+0x1d4>)
    4970:	4798      	blx	r3
    4972:	200d      	movs	r0, #13
    4974:	4b50      	ldr	r3, [pc, #320]	; (4ab8 <spi_read_reg+0x1dc>)
    4976:	4798      	blx	r3
		goto _FAIL_;
    4978:	e055      	b.n	4a26 <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    497a:	230e      	movs	r3, #14
    497c:	18fc      	adds	r4, r7, r3
    497e:	230d      	movs	r3, #13
    4980:	18fb      	adds	r3, r7, r3
    4982:	781b      	ldrb	r3, [r3, #0]
    4984:	0018      	movs	r0, r3
    4986:	4b4d      	ldr	r3, [pc, #308]	; (4abc <spi_read_reg+0x1e0>)
    4988:	4798      	blx	r3
    498a:	0003      	movs	r3, r0
    498c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    498e:	230e      	movs	r3, #14
    4990:	18fb      	adds	r3, r7, r3
    4992:	781b      	ldrb	r3, [r3, #0]
    4994:	b25b      	sxtb	r3, r3
    4996:	2b01      	cmp	r3, #1
    4998:	d00f      	beq.n	49ba <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    499a:	4a49      	ldr	r2, [pc, #292]	; (4ac0 <spi_read_reg+0x1e4>)
    499c:	4942      	ldr	r1, [pc, #264]	; (4aa8 <spi_read_reg+0x1cc>)
    499e:	4b43      	ldr	r3, [pc, #268]	; (4aac <spi_read_reg+0x1d0>)
    49a0:	0018      	movs	r0, r3
    49a2:	4b43      	ldr	r3, [pc, #268]	; (4ab0 <spi_read_reg+0x1d4>)
    49a4:	4798      	blx	r3
    49a6:	687a      	ldr	r2, [r7, #4]
    49a8:	4b46      	ldr	r3, [pc, #280]	; (4ac4 <spi_read_reg+0x1e8>)
    49aa:	0011      	movs	r1, r2
    49ac:	0018      	movs	r0, r3
    49ae:	4b40      	ldr	r3, [pc, #256]	; (4ab0 <spi_read_reg+0x1d4>)
    49b0:	4798      	blx	r3
    49b2:	200d      	movs	r0, #13
    49b4:	4b40      	ldr	r3, [pc, #256]	; (4ab8 <spi_read_reg+0x1dc>)
    49b6:	4798      	blx	r3
		goto _FAIL_;
    49b8:	e035      	b.n	4a26 <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    49ba:	230e      	movs	r3, #14
    49bc:	18fc      	adds	r4, r7, r3
    49be:	230c      	movs	r3, #12
    49c0:	18fb      	adds	r3, r7, r3
    49c2:	781a      	ldrb	r2, [r3, #0]
    49c4:	2308      	movs	r3, #8
    49c6:	18fb      	adds	r3, r7, r3
    49c8:	2104      	movs	r1, #4
    49ca:	0018      	movs	r0, r3
    49cc:	4b3e      	ldr	r3, [pc, #248]	; (4ac8 <spi_read_reg+0x1ec>)
    49ce:	4798      	blx	r3
    49d0:	0003      	movs	r3, r0
    49d2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    49d4:	230e      	movs	r3, #14
    49d6:	18fb      	adds	r3, r7, r3
    49d8:	781b      	ldrb	r3, [r3, #0]
    49da:	b25b      	sxtb	r3, r3
    49dc:	2b01      	cmp	r3, #1
    49de:	d00d      	beq.n	49fc <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    49e0:	4a3a      	ldr	r2, [pc, #232]	; (4acc <spi_read_reg+0x1f0>)
    49e2:	4931      	ldr	r1, [pc, #196]	; (4aa8 <spi_read_reg+0x1cc>)
    49e4:	4b31      	ldr	r3, [pc, #196]	; (4aac <spi_read_reg+0x1d0>)
    49e6:	0018      	movs	r0, r3
    49e8:	4b31      	ldr	r3, [pc, #196]	; (4ab0 <spi_read_reg+0x1d4>)
    49ea:	4798      	blx	r3
    49ec:	4b38      	ldr	r3, [pc, #224]	; (4ad0 <spi_read_reg+0x1f4>)
    49ee:	0018      	movs	r0, r3
    49f0:	4b38      	ldr	r3, [pc, #224]	; (4ad4 <spi_read_reg+0x1f8>)
    49f2:	4798      	blx	r3
    49f4:	200d      	movs	r0, #13
    49f6:	4b30      	ldr	r3, [pc, #192]	; (4ab8 <spi_read_reg+0x1dc>)
    49f8:	4798      	blx	r3
		goto _FAIL_;
    49fa:	e014      	b.n	4a26 <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    49fc:	2308      	movs	r3, #8
    49fe:	18fb      	adds	r3, r7, r3
    4a00:	781b      	ldrb	r3, [r3, #0]
    4a02:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    4a04:	2308      	movs	r3, #8
    4a06:	18fb      	adds	r3, r7, r3
    4a08:	785b      	ldrb	r3, [r3, #1]
    4a0a:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    4a0c:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    4a0e:	2308      	movs	r3, #8
    4a10:	18fb      	adds	r3, r7, r3
    4a12:	789b      	ldrb	r3, [r3, #2]
    4a14:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    4a16:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    4a18:	2308      	movs	r3, #8
    4a1a:	18fb      	adds	r3, r7, r3
    4a1c:	78db      	ldrb	r3, [r3, #3]
    4a1e:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    4a20:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    4a22:	683b      	ldr	r3, [r7, #0]
    4a24:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    4a26:	230e      	movs	r3, #14
    4a28:	18fb      	adds	r3, r7, r3
    4a2a:	781b      	ldrb	r3, [r3, #0]
    4a2c:	b25b      	sxtb	r3, r3
    4a2e:	2b01      	cmp	r3, #1
    4a30:	d02e      	beq.n	4a90 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    4a32:	2001      	movs	r0, #1
    4a34:	4b28      	ldr	r3, [pc, #160]	; (4ad8 <spi_read_reg+0x1fc>)
    4a36:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4a38:	2300      	movs	r3, #0
    4a3a:	9300      	str	r3, [sp, #0]
    4a3c:	2300      	movs	r3, #0
    4a3e:	2200      	movs	r2, #0
    4a40:	2100      	movs	r1, #0
    4a42:	20cf      	movs	r0, #207	; 0xcf
    4a44:	4c16      	ldr	r4, [pc, #88]	; (4aa0 <spi_read_reg+0x1c4>)
    4a46:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4a48:	20cf      	movs	r0, #207	; 0xcf
    4a4a:	4b1c      	ldr	r3, [pc, #112]	; (4abc <spi_read_reg+0x1e0>)
    4a4c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    4a4e:	4a23      	ldr	r2, [pc, #140]	; (4adc <spi_read_reg+0x200>)
    4a50:	4915      	ldr	r1, [pc, #84]	; (4aa8 <spi_read_reg+0x1cc>)
    4a52:	4b16      	ldr	r3, [pc, #88]	; (4aac <spi_read_reg+0x1d0>)
    4a54:	0018      	movs	r0, r3
    4a56:	4b16      	ldr	r3, [pc, #88]	; (4ab0 <spi_read_reg+0x1d4>)
    4a58:	4798      	blx	r3
    4a5a:	230f      	movs	r3, #15
    4a5c:	18fb      	adds	r3, r7, r3
    4a5e:	7819      	ldrb	r1, [r3, #0]
    4a60:	687a      	ldr	r2, [r7, #4]
    4a62:	4b1f      	ldr	r3, [pc, #124]	; (4ae0 <spi_read_reg+0x204>)
    4a64:	0018      	movs	r0, r3
    4a66:	4b12      	ldr	r3, [pc, #72]	; (4ab0 <spi_read_reg+0x1d4>)
    4a68:	4798      	blx	r3
    4a6a:	200d      	movs	r0, #13
    4a6c:	4b12      	ldr	r3, [pc, #72]	; (4ab8 <spi_read_reg+0x1dc>)
    4a6e:	4798      	blx	r3
		nm_bsp_sleep(1);
    4a70:	2001      	movs	r0, #1
    4a72:	4b19      	ldr	r3, [pc, #100]	; (4ad8 <spi_read_reg+0x1fc>)
    4a74:	4798      	blx	r3
		retry--;
    4a76:	230f      	movs	r3, #15
    4a78:	18fb      	adds	r3, r7, r3
    4a7a:	781a      	ldrb	r2, [r3, #0]
    4a7c:	230f      	movs	r3, #15
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	3a01      	subs	r2, #1
    4a82:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4a84:	230f      	movs	r3, #15
    4a86:	18fb      	adds	r3, r7, r3
    4a88:	781b      	ldrb	r3, [r3, #0]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d000      	beq.n	4a90 <spi_read_reg+0x1b4>
    4a8e:	e73a      	b.n	4906 <spi_read_reg+0x2a>
	}
		
	return result;
    4a90:	230e      	movs	r3, #14
    4a92:	18fb      	adds	r3, r7, r3
    4a94:	781b      	ldrb	r3, [r3, #0]
    4a96:	b25b      	sxtb	r3, r3
}
    4a98:	0018      	movs	r0, r3
    4a9a:	46bd      	mov	sp, r7
    4a9c:	b004      	add	sp, #16
    4a9e:	bdb0      	pop	{r4, r5, r7, pc}
    4aa0:	00003c09 	.word	0x00003c09
    4aa4:	00000417 	.word	0x00000417
    4aa8:	000138cc 	.word	0x000138cc
    4aac:	000132d4 	.word	0x000132d4
    4ab0:	0000e7e5 	.word	0x0000e7e5
    4ab4:	00013630 	.word	0x00013630
    4ab8:	0000e819 	.word	0x0000e819
    4abc:	0000404d 	.word	0x0000404d
    4ac0:	0000041d 	.word	0x0000041d
    4ac4:	0001365c 	.word	0x0001365c
    4ac8:	00004185 	.word	0x00004185
    4acc:	00000424 	.word	0x00000424
    4ad0:	00013690 	.word	0x00013690
    4ad4:	0000e901 	.word	0x0000e901
    4ad8:	00000b49 	.word	0x00000b49
    4adc:	0000043c 	.word	0x0000043c
    4ae0:	000136b0 	.word	0x000136b0

00004ae4 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    4ae4:	b5b0      	push	{r4, r5, r7, lr}
    4ae6:	b088      	sub	sp, #32
    4ae8:	af02      	add	r7, sp, #8
    4aea:	60f8      	str	r0, [r7, #12]
    4aec:	60b9      	str	r1, [r7, #8]
    4aee:	1dbb      	adds	r3, r7, #6
    4af0:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    4af2:	2314      	movs	r3, #20
    4af4:	18fb      	adds	r3, r7, r3
    4af6:	22c8      	movs	r2, #200	; 0xc8
    4af8:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    4afa:	2316      	movs	r3, #22
    4afc:	18fb      	adds	r3, r7, r3
    4afe:	220a      	movs	r2, #10
    4b00:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    4b02:	2315      	movs	r3, #21
    4b04:	18fb      	adds	r3, r7, r3
    4b06:	2200      	movs	r2, #0
    4b08:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    4b0a:	1dbb      	adds	r3, r7, #6
    4b0c:	881b      	ldrh	r3, [r3, #0]
    4b0e:	2b01      	cmp	r3, #1
    4b10:	d106      	bne.n	4b20 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    4b12:	1dbb      	adds	r3, r7, #6
    4b14:	2202      	movs	r2, #2
    4b16:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    4b18:	2315      	movs	r3, #21
    4b1a:	18fb      	adds	r3, r7, r3
    4b1c:	2201      	movs	r2, #1
    4b1e:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    4b20:	1dbb      	adds	r3, r7, #6
    4b22:	881a      	ldrh	r2, [r3, #0]
    4b24:	2317      	movs	r3, #23
    4b26:	18fc      	adds	r4, r7, r3
    4b28:	68f9      	ldr	r1, [r7, #12]
    4b2a:	2314      	movs	r3, #20
    4b2c:	18fb      	adds	r3, r7, r3
    4b2e:	7818      	ldrb	r0, [r3, #0]
    4b30:	2300      	movs	r3, #0
    4b32:	9300      	str	r3, [sp, #0]
    4b34:	0013      	movs	r3, r2
    4b36:	2200      	movs	r2, #0
    4b38:	4d56      	ldr	r5, [pc, #344]	; (4c94 <nm_spi_read+0x1b0>)
    4b3a:	47a8      	blx	r5
    4b3c:	0003      	movs	r3, r0
    4b3e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4b40:	2317      	movs	r3, #23
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	781b      	ldrb	r3, [r3, #0]
    4b46:	b25b      	sxtb	r3, r3
    4b48:	2b01      	cmp	r3, #1
    4b4a:	d00f      	beq.n	4b6c <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    4b4c:	4a52      	ldr	r2, [pc, #328]	; (4c98 <nm_spi_read+0x1b4>)
    4b4e:	4953      	ldr	r1, [pc, #332]	; (4c9c <nm_spi_read+0x1b8>)
    4b50:	4b53      	ldr	r3, [pc, #332]	; (4ca0 <nm_spi_read+0x1bc>)
    4b52:	0018      	movs	r0, r3
    4b54:	4b53      	ldr	r3, [pc, #332]	; (4ca4 <nm_spi_read+0x1c0>)
    4b56:	4798      	blx	r3
    4b58:	68fa      	ldr	r2, [r7, #12]
    4b5a:	4b53      	ldr	r3, [pc, #332]	; (4ca8 <nm_spi_read+0x1c4>)
    4b5c:	0011      	movs	r1, r2
    4b5e:	0018      	movs	r0, r3
    4b60:	4b50      	ldr	r3, [pc, #320]	; (4ca4 <nm_spi_read+0x1c0>)
    4b62:	4798      	blx	r3
    4b64:	200d      	movs	r0, #13
    4b66:	4b51      	ldr	r3, [pc, #324]	; (4cac <nm_spi_read+0x1c8>)
    4b68:	4798      	blx	r3
		goto _FAIL_;
    4b6a:	e055      	b.n	4c18 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    4b6c:	2317      	movs	r3, #23
    4b6e:	18fc      	adds	r4, r7, r3
    4b70:	2314      	movs	r3, #20
    4b72:	18fb      	adds	r3, r7, r3
    4b74:	781b      	ldrb	r3, [r3, #0]
    4b76:	0018      	movs	r0, r3
    4b78:	4b4d      	ldr	r3, [pc, #308]	; (4cb0 <nm_spi_read+0x1cc>)
    4b7a:	4798      	blx	r3
    4b7c:	0003      	movs	r3, r0
    4b7e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4b80:	2317      	movs	r3, #23
    4b82:	18fb      	adds	r3, r7, r3
    4b84:	781b      	ldrb	r3, [r3, #0]
    4b86:	b25b      	sxtb	r3, r3
    4b88:	2b01      	cmp	r3, #1
    4b8a:	d00f      	beq.n	4bac <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    4b8c:	4a49      	ldr	r2, [pc, #292]	; (4cb4 <nm_spi_read+0x1d0>)
    4b8e:	4943      	ldr	r1, [pc, #268]	; (4c9c <nm_spi_read+0x1b8>)
    4b90:	4b43      	ldr	r3, [pc, #268]	; (4ca0 <nm_spi_read+0x1bc>)
    4b92:	0018      	movs	r0, r3
    4b94:	4b43      	ldr	r3, [pc, #268]	; (4ca4 <nm_spi_read+0x1c0>)
    4b96:	4798      	blx	r3
    4b98:	68fa      	ldr	r2, [r7, #12]
    4b9a:	4b47      	ldr	r3, [pc, #284]	; (4cb8 <nm_spi_read+0x1d4>)
    4b9c:	0011      	movs	r1, r2
    4b9e:	0018      	movs	r0, r3
    4ba0:	4b40      	ldr	r3, [pc, #256]	; (4ca4 <nm_spi_read+0x1c0>)
    4ba2:	4798      	blx	r3
    4ba4:	200d      	movs	r0, #13
    4ba6:	4b41      	ldr	r3, [pc, #260]	; (4cac <nm_spi_read+0x1c8>)
    4ba8:	4798      	blx	r3
		goto _FAIL_;
    4baa:	e035      	b.n	4c18 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    4bac:	2315      	movs	r3, #21
    4bae:	18fb      	adds	r3, r7, r3
    4bb0:	781b      	ldrb	r3, [r3, #0]
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d011      	beq.n	4bda <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    4bb6:	2317      	movs	r3, #23
    4bb8:	18fc      	adds	r4, r7, r3
    4bba:	1dbb      	adds	r3, r7, #6
    4bbc:	8819      	ldrh	r1, [r3, #0]
    4bbe:	2310      	movs	r3, #16
    4bc0:	18fb      	adds	r3, r7, r3
    4bc2:	2200      	movs	r2, #0
    4bc4:	0018      	movs	r0, r3
    4bc6:	4b3d      	ldr	r3, [pc, #244]	; (4cbc <nm_spi_read+0x1d8>)
    4bc8:	4798      	blx	r3
    4bca:	0003      	movs	r3, r0
    4bcc:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    4bce:	2310      	movs	r3, #16
    4bd0:	18fb      	adds	r3, r7, r3
    4bd2:	781a      	ldrb	r2, [r3, #0]
    4bd4:	68bb      	ldr	r3, [r7, #8]
    4bd6:	701a      	strb	r2, [r3, #0]
    4bd8:	e00a      	b.n	4bf0 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    4bda:	2317      	movs	r3, #23
    4bdc:	18fc      	adds	r4, r7, r3
    4bde:	1dbb      	adds	r3, r7, #6
    4be0:	8819      	ldrh	r1, [r3, #0]
    4be2:	68bb      	ldr	r3, [r7, #8]
    4be4:	2200      	movs	r2, #0
    4be6:	0018      	movs	r0, r3
    4be8:	4b34      	ldr	r3, [pc, #208]	; (4cbc <nm_spi_read+0x1d8>)
    4bea:	4798      	blx	r3
    4bec:	0003      	movs	r3, r0
    4bee:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    4bf0:	2317      	movs	r3, #23
    4bf2:	18fb      	adds	r3, r7, r3
    4bf4:	781b      	ldrb	r3, [r3, #0]
    4bf6:	b25b      	sxtb	r3, r3
    4bf8:	2b01      	cmp	r3, #1
    4bfa:	d00d      	beq.n	4c18 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    4bfc:	4a30      	ldr	r2, [pc, #192]	; (4cc0 <nm_spi_read+0x1dc>)
    4bfe:	4927      	ldr	r1, [pc, #156]	; (4c9c <nm_spi_read+0x1b8>)
    4c00:	4b27      	ldr	r3, [pc, #156]	; (4ca0 <nm_spi_read+0x1bc>)
    4c02:	0018      	movs	r0, r3
    4c04:	4b27      	ldr	r3, [pc, #156]	; (4ca4 <nm_spi_read+0x1c0>)
    4c06:	4798      	blx	r3
    4c08:	4b2e      	ldr	r3, [pc, #184]	; (4cc4 <nm_spi_read+0x1e0>)
    4c0a:	0018      	movs	r0, r3
    4c0c:	4b2e      	ldr	r3, [pc, #184]	; (4cc8 <nm_spi_read+0x1e4>)
    4c0e:	4798      	blx	r3
    4c10:	200d      	movs	r0, #13
    4c12:	4b26      	ldr	r3, [pc, #152]	; (4cac <nm_spi_read+0x1c8>)
    4c14:	4798      	blx	r3
		goto _FAIL_;
    4c16:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    4c18:	2317      	movs	r3, #23
    4c1a:	18fb      	adds	r3, r7, r3
    4c1c:	781b      	ldrb	r3, [r3, #0]
    4c1e:	b25b      	sxtb	r3, r3
    4c20:	2b01      	cmp	r3, #1
    4c22:	d02f      	beq.n	4c84 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    4c24:	2001      	movs	r0, #1
    4c26:	4b29      	ldr	r3, [pc, #164]	; (4ccc <nm_spi_read+0x1e8>)
    4c28:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4c2a:	2300      	movs	r3, #0
    4c2c:	9300      	str	r3, [sp, #0]
    4c2e:	2300      	movs	r3, #0
    4c30:	2200      	movs	r2, #0
    4c32:	2100      	movs	r1, #0
    4c34:	20cf      	movs	r0, #207	; 0xcf
    4c36:	4c17      	ldr	r4, [pc, #92]	; (4c94 <nm_spi_read+0x1b0>)
    4c38:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4c3a:	20cf      	movs	r0, #207	; 0xcf
    4c3c:	4b1c      	ldr	r3, [pc, #112]	; (4cb0 <nm_spi_read+0x1cc>)
    4c3e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4c40:	4a23      	ldr	r2, [pc, #140]	; (4cd0 <nm_spi_read+0x1ec>)
    4c42:	4916      	ldr	r1, [pc, #88]	; (4c9c <nm_spi_read+0x1b8>)
    4c44:	4b16      	ldr	r3, [pc, #88]	; (4ca0 <nm_spi_read+0x1bc>)
    4c46:	0018      	movs	r0, r3
    4c48:	4b16      	ldr	r3, [pc, #88]	; (4ca4 <nm_spi_read+0x1c0>)
    4c4a:	4798      	blx	r3
    4c4c:	2316      	movs	r3, #22
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	7819      	ldrb	r1, [r3, #0]
    4c52:	1dbb      	adds	r3, r7, #6
    4c54:	881b      	ldrh	r3, [r3, #0]
    4c56:	68fa      	ldr	r2, [r7, #12]
    4c58:	481e      	ldr	r0, [pc, #120]	; (4cd4 <nm_spi_read+0x1f0>)
    4c5a:	4c12      	ldr	r4, [pc, #72]	; (4ca4 <nm_spi_read+0x1c0>)
    4c5c:	47a0      	blx	r4
    4c5e:	200d      	movs	r0, #13
    4c60:	4b12      	ldr	r3, [pc, #72]	; (4cac <nm_spi_read+0x1c8>)
    4c62:	4798      	blx	r3
		nm_bsp_sleep(1);
    4c64:	2001      	movs	r0, #1
    4c66:	4b19      	ldr	r3, [pc, #100]	; (4ccc <nm_spi_read+0x1e8>)
    4c68:	4798      	blx	r3
		retry--;
    4c6a:	2316      	movs	r3, #22
    4c6c:	18fb      	adds	r3, r7, r3
    4c6e:	781a      	ldrb	r2, [r3, #0]
    4c70:	2316      	movs	r3, #22
    4c72:	18fb      	adds	r3, r7, r3
    4c74:	3a01      	subs	r2, #1
    4c76:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4c78:	2316      	movs	r3, #22
    4c7a:	18fb      	adds	r3, r7, r3
    4c7c:	781b      	ldrb	r3, [r3, #0]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d000      	beq.n	4c84 <nm_spi_read+0x1a0>
    4c82:	e742      	b.n	4b0a <nm_spi_read+0x26>
	}

	return result;
    4c84:	2317      	movs	r3, #23
    4c86:	18fb      	adds	r3, r7, r3
    4c88:	781b      	ldrb	r3, [r3, #0]
    4c8a:	b25b      	sxtb	r3, r3
}
    4c8c:	0018      	movs	r0, r3
    4c8e:	46bd      	mov	sp, r7
    4c90:	b006      	add	sp, #24
    4c92:	bdb0      	pop	{r4, r5, r7, pc}
    4c94:	00003c09 	.word	0x00003c09
    4c98:	0000045d 	.word	0x0000045d
    4c9c:	000138dc 	.word	0x000138dc
    4ca0:	000132d4 	.word	0x000132d4
    4ca4:	0000e7e5 	.word	0x0000e7e5
    4ca8:	000136c8 	.word	0x000136c8
    4cac:	0000e819 	.word	0x0000e819
    4cb0:	0000404d 	.word	0x0000404d
    4cb4:	00000463 	.word	0x00000463
    4cb8:	000136f8 	.word	0x000136f8
    4cbc:	00004185 	.word	0x00004185
    4cc0:	00000473 	.word	0x00000473
    4cc4:	00013730 	.word	0x00013730
    4cc8:	0000e901 	.word	0x0000e901
    4ccc:	00000b49 	.word	0x00000b49
    4cd0:	00000484 	.word	0x00000484
    4cd4:	00013614 	.word	0x00013614

00004cd8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    4cd8:	b580      	push	{r7, lr}
    4cda:	b082      	sub	sp, #8
    4cdc:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    4cde:	4b0c      	ldr	r3, [pc, #48]	; (4d10 <spi_init_pkt_sz+0x38>)
    4ce0:	0018      	movs	r0, r3
    4ce2:	4b0c      	ldr	r3, [pc, #48]	; (4d14 <spi_init_pkt_sz+0x3c>)
    4ce4:	4798      	blx	r3
    4ce6:	0003      	movs	r3, r0
    4ce8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	2270      	movs	r2, #112	; 0x70
    4cee:	4393      	bics	r3, r2
    4cf0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	2250      	movs	r2, #80	; 0x50
    4cf6:	4313      	orrs	r3, r2
    4cf8:	607b      	str	r3, [r7, #4]
    4cfa:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	4a04      	ldr	r2, [pc, #16]	; (4d10 <spi_init_pkt_sz+0x38>)
    4d00:	0019      	movs	r1, r3
    4d02:	0010      	movs	r0, r2
    4d04:	4b04      	ldr	r3, [pc, #16]	; (4d18 <spi_init_pkt_sz+0x40>)
    4d06:	4798      	blx	r3
}
    4d08:	46c0      	nop			; (mov r8, r8)
    4d0a:	46bd      	mov	sp, r7
    4d0c:	b002      	add	sp, #8
    4d0e:	bd80      	pop	{r7, pc}
    4d10:	0000e824 	.word	0x0000e824
    4d14:	00004eb1 	.word	0x00004eb1
    4d18:	00004f25 	.word	0x00004f25

00004d1c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    4d1c:	b590      	push	{r4, r7, lr}
    4d1e:	b083      	sub	sp, #12
    4d20:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4d22:	2300      	movs	r3, #0
    4d24:	9300      	str	r3, [sp, #0]
    4d26:	2300      	movs	r3, #0
    4d28:	2200      	movs	r2, #0
    4d2a:	2100      	movs	r1, #0
    4d2c:	20cf      	movs	r0, #207	; 0xcf
    4d2e:	4c05      	ldr	r4, [pc, #20]	; (4d44 <nm_spi_reset+0x28>)
    4d30:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    4d32:	20cf      	movs	r0, #207	; 0xcf
    4d34:	4b04      	ldr	r3, [pc, #16]	; (4d48 <nm_spi_reset+0x2c>)
    4d36:	4798      	blx	r3
	return M2M_SUCCESS;
    4d38:	2300      	movs	r3, #0
}
    4d3a:	0018      	movs	r0, r3
    4d3c:	46bd      	mov	sp, r7
    4d3e:	b001      	add	sp, #4
    4d40:	bd90      	pop	{r4, r7, pc}
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	00003c09 	.word	0x00003c09
    4d48:	0000404d 	.word	0x0000404d

00004d4c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    4d4c:	b580      	push	{r7, lr}
    4d4e:	b082      	sub	sp, #8
    4d50:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    4d52:	2300      	movs	r3, #0
    4d54:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    4d56:	4b3e      	ldr	r3, [pc, #248]	; (4e50 <nm_spi_init+0x104>)
    4d58:	2200      	movs	r2, #0
    4d5a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4d5c:	003b      	movs	r3, r7
    4d5e:	4a3d      	ldr	r2, [pc, #244]	; (4e54 <nm_spi_init+0x108>)
    4d60:	0019      	movs	r1, r3
    4d62:	0010      	movs	r0, r2
    4d64:	4b3c      	ldr	r3, [pc, #240]	; (4e58 <nm_spi_init+0x10c>)
    4d66:	4798      	blx	r3
    4d68:	1e03      	subs	r3, r0, #0
    4d6a:	d126      	bne.n	4dba <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    4d6c:	4b38      	ldr	r3, [pc, #224]	; (4e50 <nm_spi_init+0x104>)
    4d6e:	2201      	movs	r2, #1
    4d70:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    4d72:	4a3a      	ldr	r2, [pc, #232]	; (4e5c <nm_spi_init+0x110>)
    4d74:	493a      	ldr	r1, [pc, #232]	; (4e60 <nm_spi_init+0x114>)
    4d76:	4b3b      	ldr	r3, [pc, #236]	; (4e64 <nm_spi_init+0x118>)
    4d78:	0018      	movs	r0, r3
    4d7a:	4b3b      	ldr	r3, [pc, #236]	; (4e68 <nm_spi_init+0x11c>)
    4d7c:	4798      	blx	r3
    4d7e:	4b3b      	ldr	r3, [pc, #236]	; (4e6c <nm_spi_init+0x120>)
    4d80:	0018      	movs	r0, r3
    4d82:	4b3b      	ldr	r3, [pc, #236]	; (4e70 <nm_spi_init+0x124>)
    4d84:	4798      	blx	r3
    4d86:	200d      	movs	r0, #13
    4d88:	4b3a      	ldr	r3, [pc, #232]	; (4e74 <nm_spi_init+0x128>)
    4d8a:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    4d8c:	003b      	movs	r3, r7
    4d8e:	4a31      	ldr	r2, [pc, #196]	; (4e54 <nm_spi_init+0x108>)
    4d90:	0019      	movs	r1, r3
    4d92:	0010      	movs	r0, r2
    4d94:	4b30      	ldr	r3, [pc, #192]	; (4e58 <nm_spi_init+0x10c>)
    4d96:	4798      	blx	r3
    4d98:	1e03      	subs	r3, r0, #0
    4d9a:	d10e      	bne.n	4dba <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    4d9c:	4a36      	ldr	r2, [pc, #216]	; (4e78 <nm_spi_init+0x12c>)
    4d9e:	4930      	ldr	r1, [pc, #192]	; (4e60 <nm_spi_init+0x114>)
    4da0:	4b30      	ldr	r3, [pc, #192]	; (4e64 <nm_spi_init+0x118>)
    4da2:	0018      	movs	r0, r3
    4da4:	4b30      	ldr	r3, [pc, #192]	; (4e68 <nm_spi_init+0x11c>)
    4da6:	4798      	blx	r3
    4da8:	4b34      	ldr	r3, [pc, #208]	; (4e7c <nm_spi_init+0x130>)
    4daa:	0018      	movs	r0, r3
    4dac:	4b30      	ldr	r3, [pc, #192]	; (4e70 <nm_spi_init+0x124>)
    4dae:	4798      	blx	r3
    4db0:	200d      	movs	r0, #13
    4db2:	4b30      	ldr	r3, [pc, #192]	; (4e74 <nm_spi_init+0x128>)
    4db4:	4798      	blx	r3
			return 0;
    4db6:	2300      	movs	r3, #0
    4db8:	e045      	b.n	4e46 <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    4dba:	4b25      	ldr	r3, [pc, #148]	; (4e50 <nm_spi_init+0x104>)
    4dbc:	781b      	ldrb	r3, [r3, #0]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d125      	bne.n	4e0e <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    4dc2:	683b      	ldr	r3, [r7, #0]
    4dc4:	220c      	movs	r2, #12
    4dc6:	4393      	bics	r3, r2
    4dc8:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    4dca:	683b      	ldr	r3, [r7, #0]
    4dcc:	2270      	movs	r2, #112	; 0x70
    4dce:	4393      	bics	r3, r2
    4dd0:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    4dd2:	683b      	ldr	r3, [r7, #0]
    4dd4:	2250      	movs	r2, #80	; 0x50
    4dd6:	4313      	orrs	r3, r2
    4dd8:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    4dda:	683b      	ldr	r3, [r7, #0]
    4ddc:	4a1d      	ldr	r2, [pc, #116]	; (4e54 <nm_spi_init+0x108>)
    4dde:	0019      	movs	r1, r3
    4de0:	0010      	movs	r0, r2
    4de2:	4b27      	ldr	r3, [pc, #156]	; (4e80 <nm_spi_init+0x134>)
    4de4:	4798      	blx	r3
    4de6:	1e03      	subs	r3, r0, #0
    4de8:	d10e      	bne.n	4e08 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    4dea:	4a26      	ldr	r2, [pc, #152]	; (4e84 <nm_spi_init+0x138>)
    4dec:	491c      	ldr	r1, [pc, #112]	; (4e60 <nm_spi_init+0x114>)
    4dee:	4b1d      	ldr	r3, [pc, #116]	; (4e64 <nm_spi_init+0x118>)
    4df0:	0018      	movs	r0, r3
    4df2:	4b1d      	ldr	r3, [pc, #116]	; (4e68 <nm_spi_init+0x11c>)
    4df4:	4798      	blx	r3
    4df6:	4b24      	ldr	r3, [pc, #144]	; (4e88 <nm_spi_init+0x13c>)
    4df8:	0018      	movs	r0, r3
    4dfa:	4b1d      	ldr	r3, [pc, #116]	; (4e70 <nm_spi_init+0x124>)
    4dfc:	4798      	blx	r3
    4dfe:	200d      	movs	r0, #13
    4e00:	4b1c      	ldr	r3, [pc, #112]	; (4e74 <nm_spi_init+0x128>)
    4e02:	4798      	blx	r3
			return 0;
    4e04:	2300      	movs	r3, #0
    4e06:	e01e      	b.n	4e46 <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    4e08:	4b11      	ldr	r3, [pc, #68]	; (4e50 <nm_spi_init+0x104>)
    4e0a:	2201      	movs	r2, #1
    4e0c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    4e0e:	1d3a      	adds	r2, r7, #4
    4e10:	2380      	movs	r3, #128	; 0x80
    4e12:	015b      	lsls	r3, r3, #5
    4e14:	0011      	movs	r1, r2
    4e16:	0018      	movs	r0, r3
    4e18:	4b0f      	ldr	r3, [pc, #60]	; (4e58 <nm_spi_init+0x10c>)
    4e1a:	4798      	blx	r3
    4e1c:	1e03      	subs	r3, r0, #0
    4e1e:	d10f      	bne.n	4e40 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    4e20:	4a1a      	ldr	r2, [pc, #104]	; (4e8c <nm_spi_init+0x140>)
    4e22:	490f      	ldr	r1, [pc, #60]	; (4e60 <nm_spi_init+0x114>)
    4e24:	4b0f      	ldr	r3, [pc, #60]	; (4e64 <nm_spi_init+0x118>)
    4e26:	0018      	movs	r0, r3
    4e28:	4b0f      	ldr	r3, [pc, #60]	; (4e68 <nm_spi_init+0x11c>)
    4e2a:	4798      	blx	r3
    4e2c:	4b18      	ldr	r3, [pc, #96]	; (4e90 <nm_spi_init+0x144>)
    4e2e:	0018      	movs	r0, r3
    4e30:	4b0f      	ldr	r3, [pc, #60]	; (4e70 <nm_spi_init+0x124>)
    4e32:	4798      	blx	r3
    4e34:	200d      	movs	r0, #13
    4e36:	4b0f      	ldr	r3, [pc, #60]	; (4e74 <nm_spi_init+0x128>)
    4e38:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    4e3a:	2306      	movs	r3, #6
    4e3c:	425b      	negs	r3, r3
    4e3e:	e002      	b.n	4e46 <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    4e40:	4b14      	ldr	r3, [pc, #80]	; (4e94 <nm_spi_init+0x148>)
    4e42:	4798      	blx	r3


	return M2M_SUCCESS;
    4e44:	2300      	movs	r3, #0
}
    4e46:	0018      	movs	r0, r3
    4e48:	46bd      	mov	sp, r7
    4e4a:	b002      	add	sp, #8
    4e4c:	bd80      	pop	{r7, pc}
    4e4e:	46c0      	nop			; (mov r8, r8)
    4e50:	20000214 	.word	0x20000214
    4e54:	0000e824 	.word	0x0000e824
    4e58:	000048dd 	.word	0x000048dd
    4e5c:	000004c7 	.word	0x000004c7
    4e60:	000138e8 	.word	0x000138e8
    4e64:	000132d4 	.word	0x000132d4
    4e68:	0000e7e5 	.word	0x0000e7e5
    4e6c:	00013758 	.word	0x00013758
    4e70:	0000e901 	.word	0x0000e901
    4e74:	0000e819 	.word	0x0000e819
    4e78:	000004ca 	.word	0x000004ca
    4e7c:	000137a8 	.word	0x000137a8
    4e80:	0000455d 	.word	0x0000455d
    4e84:	000004d4 	.word	0x000004d4
    4e88:	000137d4 	.word	0x000137d4
    4e8c:	000004de 	.word	0x000004de
    4e90:	00013808 	.word	0x00013808
    4e94:	00004cd9 	.word	0x00004cd9

00004e98 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    4e98:	b580      	push	{r7, lr}
    4e9a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4e9c:	4b03      	ldr	r3, [pc, #12]	; (4eac <nm_spi_deinit+0x14>)
    4e9e:	2200      	movs	r2, #0
    4ea0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    4ea2:	2300      	movs	r3, #0
}
    4ea4:	0018      	movs	r0, r3
    4ea6:	46bd      	mov	sp, r7
    4ea8:	bd80      	pop	{r7, pc}
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	20000214 	.word	0x20000214

00004eb0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4eb0:	b580      	push	{r7, lr}
    4eb2:	b084      	sub	sp, #16
    4eb4:	af00      	add	r7, sp, #0
    4eb6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    4eb8:	230c      	movs	r3, #12
    4eba:	18fa      	adds	r2, r7, r3
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	0011      	movs	r1, r2
    4ec0:	0018      	movs	r0, r3
    4ec2:	4b03      	ldr	r3, [pc, #12]	; (4ed0 <nm_spi_read_reg+0x20>)
    4ec4:	4798      	blx	r3

	return u32Val;
    4ec6:	68fb      	ldr	r3, [r7, #12]
}
    4ec8:	0018      	movs	r0, r3
    4eca:	46bd      	mov	sp, r7
    4ecc:	b004      	add	sp, #16
    4ece:	bd80      	pop	{r7, pc}
    4ed0:	000048dd 	.word	0x000048dd

00004ed4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4ed4:	b590      	push	{r4, r7, lr}
    4ed6:	b085      	sub	sp, #20
    4ed8:	af00      	add	r7, sp, #0
    4eda:	6078      	str	r0, [r7, #4]
    4edc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    4ede:	230f      	movs	r3, #15
    4ee0:	18fc      	adds	r4, r7, r3
    4ee2:	683a      	ldr	r2, [r7, #0]
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	0011      	movs	r1, r2
    4ee8:	0018      	movs	r0, r3
    4eea:	4b0d      	ldr	r3, [pc, #52]	; (4f20 <nm_spi_read_reg_with_ret+0x4c>)
    4eec:	4798      	blx	r3
    4eee:	0003      	movs	r3, r0
    4ef0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4ef2:	230f      	movs	r3, #15
    4ef4:	18fb      	adds	r3, r7, r3
    4ef6:	781b      	ldrb	r3, [r3, #0]
    4ef8:	b25b      	sxtb	r3, r3
    4efa:	2b01      	cmp	r3, #1
    4efc:	d104      	bne.n	4f08 <nm_spi_read_reg_with_ret+0x34>
    4efe:	230f      	movs	r3, #15
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	2200      	movs	r2, #0
    4f04:	701a      	strb	r2, [r3, #0]
    4f06:	e003      	b.n	4f10 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4f08:	230f      	movs	r3, #15
    4f0a:	18fb      	adds	r3, r7, r3
    4f0c:	22fa      	movs	r2, #250	; 0xfa
    4f0e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4f10:	230f      	movs	r3, #15
    4f12:	18fb      	adds	r3, r7, r3
    4f14:	781b      	ldrb	r3, [r3, #0]
    4f16:	b25b      	sxtb	r3, r3
}
    4f18:	0018      	movs	r0, r3
    4f1a:	46bd      	mov	sp, r7
    4f1c:	b005      	add	sp, #20
    4f1e:	bd90      	pop	{r4, r7, pc}
    4f20:	000048dd 	.word	0x000048dd

00004f24 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4f24:	b590      	push	{r4, r7, lr}
    4f26:	b085      	sub	sp, #20
    4f28:	af00      	add	r7, sp, #0
    4f2a:	6078      	str	r0, [r7, #4]
    4f2c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    4f2e:	230f      	movs	r3, #15
    4f30:	18fc      	adds	r4, r7, r3
    4f32:	683a      	ldr	r2, [r7, #0]
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	0011      	movs	r1, r2
    4f38:	0018      	movs	r0, r3
    4f3a:	4b0d      	ldr	r3, [pc, #52]	; (4f70 <nm_spi_write_reg+0x4c>)
    4f3c:	4798      	blx	r3
    4f3e:	0003      	movs	r3, r0
    4f40:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4f42:	230f      	movs	r3, #15
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	781b      	ldrb	r3, [r3, #0]
    4f48:	b25b      	sxtb	r3, r3
    4f4a:	2b01      	cmp	r3, #1
    4f4c:	d104      	bne.n	4f58 <nm_spi_write_reg+0x34>
    4f4e:	230f      	movs	r3, #15
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	2200      	movs	r2, #0
    4f54:	701a      	strb	r2, [r3, #0]
    4f56:	e003      	b.n	4f60 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4f58:	230f      	movs	r3, #15
    4f5a:	18fb      	adds	r3, r7, r3
    4f5c:	22fa      	movs	r2, #250	; 0xfa
    4f5e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4f60:	230f      	movs	r3, #15
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	b25b      	sxtb	r3, r3
}
    4f68:	0018      	movs	r0, r3
    4f6a:	46bd      	mov	sp, r7
    4f6c:	b005      	add	sp, #20
    4f6e:	bd90      	pop	{r4, r7, pc}
    4f70:	0000455d 	.word	0x0000455d

00004f74 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4f74:	b590      	push	{r4, r7, lr}
    4f76:	b087      	sub	sp, #28
    4f78:	af00      	add	r7, sp, #0
    4f7a:	60f8      	str	r0, [r7, #12]
    4f7c:	60b9      	str	r1, [r7, #8]
    4f7e:	1dbb      	adds	r3, r7, #6
    4f80:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    4f82:	2317      	movs	r3, #23
    4f84:	18fc      	adds	r4, r7, r3
    4f86:	1dbb      	adds	r3, r7, #6
    4f88:	881a      	ldrh	r2, [r3, #0]
    4f8a:	68b9      	ldr	r1, [r7, #8]
    4f8c:	68fb      	ldr	r3, [r7, #12]
    4f8e:	0018      	movs	r0, r3
    4f90:	4b0d      	ldr	r3, [pc, #52]	; (4fc8 <nm_spi_read_block+0x54>)
    4f92:	4798      	blx	r3
    4f94:	0003      	movs	r3, r0
    4f96:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4f98:	2317      	movs	r3, #23
    4f9a:	18fb      	adds	r3, r7, r3
    4f9c:	781b      	ldrb	r3, [r3, #0]
    4f9e:	b25b      	sxtb	r3, r3
    4fa0:	2b01      	cmp	r3, #1
    4fa2:	d104      	bne.n	4fae <nm_spi_read_block+0x3a>
    4fa4:	2317      	movs	r3, #23
    4fa6:	18fb      	adds	r3, r7, r3
    4fa8:	2200      	movs	r2, #0
    4faa:	701a      	strb	r2, [r3, #0]
    4fac:	e003      	b.n	4fb6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4fae:	2317      	movs	r3, #23
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	22fa      	movs	r2, #250	; 0xfa
    4fb4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4fb6:	2317      	movs	r3, #23
    4fb8:	18fb      	adds	r3, r7, r3
    4fba:	781b      	ldrb	r3, [r3, #0]
    4fbc:	b25b      	sxtb	r3, r3
}
    4fbe:	0018      	movs	r0, r3
    4fc0:	46bd      	mov	sp, r7
    4fc2:	b007      	add	sp, #28
    4fc4:	bd90      	pop	{r4, r7, pc}
    4fc6:	46c0      	nop			; (mov r8, r8)
    4fc8:	00004ae5 	.word	0x00004ae5

00004fcc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4fcc:	b590      	push	{r4, r7, lr}
    4fce:	b087      	sub	sp, #28
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	60f8      	str	r0, [r7, #12]
    4fd4:	60b9      	str	r1, [r7, #8]
    4fd6:	1dbb      	adds	r3, r7, #6
    4fd8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    4fda:	2317      	movs	r3, #23
    4fdc:	18fc      	adds	r4, r7, r3
    4fde:	1dbb      	adds	r3, r7, #6
    4fe0:	881a      	ldrh	r2, [r3, #0]
    4fe2:	68b9      	ldr	r1, [r7, #8]
    4fe4:	68fb      	ldr	r3, [r7, #12]
    4fe6:	0018      	movs	r0, r3
    4fe8:	4b0d      	ldr	r3, [pc, #52]	; (5020 <nm_spi_write_block+0x54>)
    4fea:	4798      	blx	r3
    4fec:	0003      	movs	r3, r0
    4fee:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4ff0:	2317      	movs	r3, #23
    4ff2:	18fb      	adds	r3, r7, r3
    4ff4:	781b      	ldrb	r3, [r3, #0]
    4ff6:	b25b      	sxtb	r3, r3
    4ff8:	2b01      	cmp	r3, #1
    4ffa:	d104      	bne.n	5006 <nm_spi_write_block+0x3a>
    4ffc:	2317      	movs	r3, #23
    4ffe:	18fb      	adds	r3, r7, r3
    5000:	2200      	movs	r2, #0
    5002:	701a      	strb	r2, [r3, #0]
    5004:	e003      	b.n	500e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5006:	2317      	movs	r3, #23
    5008:	18fb      	adds	r3, r7, r3
    500a:	22fa      	movs	r2, #250	; 0xfa
    500c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    500e:	2317      	movs	r3, #23
    5010:	18fb      	adds	r3, r7, r3
    5012:	781b      	ldrb	r3, [r3, #0]
    5014:	b25b      	sxtb	r3, r3
}
    5016:	0018      	movs	r0, r3
    5018:	46bd      	mov	sp, r7
    501a:	b007      	add	sp, #28
    501c:	bd90      	pop	{r4, r7, pc}
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	000046e9 	.word	0x000046e9

00005024 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    5024:	b590      	push	{r4, r7, lr}
    5026:	b089      	sub	sp, #36	; 0x24
    5028:	af00      	add	r7, sp, #0
    502a:	60b9      	str	r1, [r7, #8]
    502c:	0011      	movs	r1, r2
    502e:	607b      	str	r3, [r7, #4]
    5030:	230f      	movs	r3, #15
    5032:	18fb      	adds	r3, r7, r3
    5034:	1c02      	adds	r2, r0, #0
    5036:	701a      	strb	r2, [r3, #0]
    5038:	230e      	movs	r3, #14
    503a:	18fb      	adds	r3, r7, r3
    503c:	1c0a      	adds	r2, r1, #0
    503e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    5040:	2330      	movs	r3, #48	; 0x30
    5042:	18fb      	adds	r3, r7, r3
    5044:	881b      	ldrh	r3, [r3, #0]
    5046:	2b00      	cmp	r3, #0
    5048:	d100      	bne.n	504c <Socket_ReadSocketData+0x28>
    504a:	e0d6      	b.n	51fa <Socket_ReadSocketData+0x1d6>
    504c:	230f      	movs	r3, #15
    504e:	18fb      	adds	r3, r7, r3
    5050:	2200      	movs	r2, #0
    5052:	569a      	ldrsb	r2, [r3, r2]
    5054:	4b6b      	ldr	r3, [pc, #428]	; (5204 <Socket_ReadSocketData+0x1e0>)
    5056:	0112      	lsls	r2, r2, #4
    5058:	58d3      	ldr	r3, [r2, r3]
    505a:	2b00      	cmp	r3, #0
    505c:	d100      	bne.n	5060 <Socket_ReadSocketData+0x3c>
    505e:	e0cc      	b.n	51fa <Socket_ReadSocketData+0x1d6>
    5060:	230f      	movs	r3, #15
    5062:	18fb      	adds	r3, r7, r3
    5064:	781b      	ldrb	r3, [r3, #0]
    5066:	b25b      	sxtb	r3, r3
    5068:	4a66      	ldr	r2, [pc, #408]	; (5204 <Socket_ReadSocketData+0x1e0>)
    506a:	011b      	lsls	r3, r3, #4
    506c:	18d3      	adds	r3, r2, r3
    506e:	3304      	adds	r3, #4
    5070:	881b      	ldrh	r3, [r3, #0]
    5072:	b29b      	uxth	r3, r3
    5074:	2b00      	cmp	r3, #0
    5076:	d100      	bne.n	507a <Socket_ReadSocketData+0x56>
    5078:	e0bf      	b.n	51fa <Socket_ReadSocketData+0x1d6>
    507a:	230f      	movs	r3, #15
    507c:	18fb      	adds	r3, r7, r3
    507e:	781b      	ldrb	r3, [r3, #0]
    5080:	b25b      	sxtb	r3, r3
    5082:	4a60      	ldr	r2, [pc, #384]	; (5204 <Socket_ReadSocketData+0x1e0>)
    5084:	011b      	lsls	r3, r3, #4
    5086:	18d3      	adds	r3, r2, r3
    5088:	330a      	adds	r3, #10
    508a:	781b      	ldrb	r3, [r3, #0]
    508c:	b2db      	uxtb	r3, r3
    508e:	2b01      	cmp	r3, #1
    5090:	d000      	beq.n	5094 <Socket_ReadSocketData+0x70>
    5092:	e0b2      	b.n	51fa <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    5094:	687b      	ldr	r3, [r7, #4]
    5096:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    5098:	68bb      	ldr	r3, [r7, #8]
    509a:	2230      	movs	r2, #48	; 0x30
    509c:	18ba      	adds	r2, r7, r2
    509e:	8812      	ldrh	r2, [r2, #0]
    50a0:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    50a2:	2319      	movs	r3, #25
    50a4:	18fb      	adds	r3, r7, r3
    50a6:	2201      	movs	r2, #1
    50a8:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    50aa:	231a      	movs	r3, #26
    50ac:	18fb      	adds	r3, r7, r3
    50ae:	2230      	movs	r2, #48	; 0x30
    50b0:	18ba      	adds	r2, r7, r2
    50b2:	8812      	ldrh	r2, [r2, #0]
    50b4:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    50b6:	230f      	movs	r3, #15
    50b8:	18fb      	adds	r3, r7, r3
    50ba:	781b      	ldrb	r3, [r3, #0]
    50bc:	b25b      	sxtb	r3, r3
    50be:	4a51      	ldr	r2, [pc, #324]	; (5204 <Socket_ReadSocketData+0x1e0>)
    50c0:	011b      	lsls	r3, r3, #4
    50c2:	18d3      	adds	r3, r2, r3
    50c4:	3304      	adds	r3, #4
    50c6:	881b      	ldrh	r3, [r3, #0]
    50c8:	b29b      	uxth	r3, r3
    50ca:	221a      	movs	r2, #26
    50cc:	18ba      	adds	r2, r7, r2
    50ce:	8812      	ldrh	r2, [r2, #0]
    50d0:	1ad3      	subs	r3, r2, r3
    50d2:	b29a      	uxth	r2, r3
    50d4:	2316      	movs	r3, #22
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    50da:	2316      	movs	r3, #22
    50dc:	18fb      	adds	r3, r7, r3
    50de:	2200      	movs	r2, #0
    50e0:	5e9b      	ldrsh	r3, [r3, r2]
    50e2:	2b00      	cmp	r3, #0
    50e4:	dd0f      	ble.n	5106 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    50e6:	2319      	movs	r3, #25
    50e8:	18fb      	adds	r3, r7, r3
    50ea:	2200      	movs	r2, #0
    50ec:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    50ee:	230f      	movs	r3, #15
    50f0:	18fb      	adds	r3, r7, r3
    50f2:	2200      	movs	r2, #0
    50f4:	569a      	ldrsb	r2, [r3, r2]
    50f6:	231a      	movs	r3, #26
    50f8:	18fb      	adds	r3, r7, r3
    50fa:	4942      	ldr	r1, [pc, #264]	; (5204 <Socket_ReadSocketData+0x1e0>)
    50fc:	0112      	lsls	r2, r2, #4
    50fe:	188a      	adds	r2, r1, r2
    5100:	3204      	adds	r2, #4
    5102:	8812      	ldrh	r2, [r2, #0]
    5104:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    5106:	230f      	movs	r3, #15
    5108:	18fb      	adds	r3, r7, r3
    510a:	2200      	movs	r2, #0
    510c:	569a      	ldrsb	r2, [r3, r2]
    510e:	4b3d      	ldr	r3, [pc, #244]	; (5204 <Socket_ReadSocketData+0x1e0>)
    5110:	0112      	lsls	r2, r2, #4
    5112:	58d1      	ldr	r1, [r2, r3]
    5114:	2319      	movs	r3, #25
    5116:	18fb      	adds	r3, r7, r3
    5118:	781c      	ldrb	r4, [r3, #0]
    511a:	231a      	movs	r3, #26
    511c:	18fb      	adds	r3, r7, r3
    511e:	881a      	ldrh	r2, [r3, #0]
    5120:	69f8      	ldr	r0, [r7, #28]
    5122:	0023      	movs	r3, r4
    5124:	4c38      	ldr	r4, [pc, #224]	; (5208 <Socket_ReadSocketData+0x1e4>)
    5126:	47a0      	blx	r4
    5128:	1e03      	subs	r3, r0, #0
    512a:	d14f      	bne.n	51cc <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    512c:	230f      	movs	r3, #15
    512e:	18fb      	adds	r3, r7, r3
    5130:	2200      	movs	r2, #0
    5132:	569a      	ldrsb	r2, [r3, r2]
    5134:	4b33      	ldr	r3, [pc, #204]	; (5204 <Socket_ReadSocketData+0x1e0>)
    5136:	0112      	lsls	r2, r2, #4
    5138:	58d2      	ldr	r2, [r2, r3]
    513a:	68bb      	ldr	r3, [r7, #8]
    513c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    513e:	231a      	movs	r3, #26
    5140:	18fb      	adds	r3, r7, r3
    5142:	2200      	movs	r2, #0
    5144:	5e9a      	ldrsh	r2, [r3, r2]
    5146:	68bb      	ldr	r3, [r7, #8]
    5148:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    514a:	68bb      	ldr	r3, [r7, #8]
    514c:	88da      	ldrh	r2, [r3, #6]
    514e:	231a      	movs	r3, #26
    5150:	18fb      	adds	r3, r7, r3
    5152:	881b      	ldrh	r3, [r3, #0]
    5154:	1ad3      	subs	r3, r2, r3
    5156:	b29a      	uxth	r2, r3
    5158:	68bb      	ldr	r3, [r7, #8]
    515a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    515c:	4b2b      	ldr	r3, [pc, #172]	; (520c <Socket_ReadSocketData+0x1e8>)
    515e:	681b      	ldr	r3, [r3, #0]
    5160:	2b00      	cmp	r3, #0
    5162:	d00b      	beq.n	517c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    5164:	4b29      	ldr	r3, [pc, #164]	; (520c <Socket_ReadSocketData+0x1e8>)
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	68bc      	ldr	r4, [r7, #8]
    516a:	220e      	movs	r2, #14
    516c:	18ba      	adds	r2, r7, r2
    516e:	7811      	ldrb	r1, [r2, #0]
    5170:	220f      	movs	r2, #15
    5172:	18ba      	adds	r2, r7, r2
    5174:	2000      	movs	r0, #0
    5176:	5610      	ldrsb	r0, [r2, r0]
    5178:	0022      	movs	r2, r4
    517a:	4798      	blx	r3

				u16ReadCount -= u16Read;
    517c:	2330      	movs	r3, #48	; 0x30
    517e:	18f9      	adds	r1, r7, r3
    5180:	2330      	movs	r3, #48	; 0x30
    5182:	18fa      	adds	r2, r7, r3
    5184:	231a      	movs	r3, #26
    5186:	18fb      	adds	r3, r7, r3
    5188:	8812      	ldrh	r2, [r2, #0]
    518a:	881b      	ldrh	r3, [r3, #0]
    518c:	1ad3      	subs	r3, r2, r3
    518e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    5190:	231a      	movs	r3, #26
    5192:	18fb      	adds	r3, r7, r3
    5194:	881b      	ldrh	r3, [r3, #0]
    5196:	69fa      	ldr	r2, [r7, #28]
    5198:	18d3      	adds	r3, r2, r3
    519a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    519c:	230f      	movs	r3, #15
    519e:	18fb      	adds	r3, r7, r3
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	b25b      	sxtb	r3, r3
    51a4:	4a17      	ldr	r2, [pc, #92]	; (5204 <Socket_ReadSocketData+0x1e0>)
    51a6:	011b      	lsls	r3, r3, #4
    51a8:	18d3      	adds	r3, r2, r3
    51aa:	330a      	adds	r3, #10
    51ac:	781b      	ldrb	r3, [r3, #0]
    51ae:	b2db      	uxtb	r3, r3
    51b0:	2b00      	cmp	r3, #0
    51b2:	d11b      	bne.n	51ec <Socket_ReadSocketData+0x1c8>
    51b4:	2330      	movs	r3, #48	; 0x30
    51b6:	18fb      	adds	r3, r7, r3
    51b8:	881b      	ldrh	r3, [r3, #0]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d016      	beq.n	51ec <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    51be:	2301      	movs	r3, #1
    51c0:	2200      	movs	r2, #0
    51c2:	2100      	movs	r1, #0
    51c4:	2000      	movs	r0, #0
    51c6:	4c10      	ldr	r4, [pc, #64]	; (5208 <Socket_ReadSocketData+0x1e4>)
    51c8:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    51ca:	e016      	b.n	51fa <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    51cc:	4b10      	ldr	r3, [pc, #64]	; (5210 <Socket_ReadSocketData+0x1ec>)
    51ce:	0018      	movs	r0, r3
    51d0:	4b10      	ldr	r3, [pc, #64]	; (5214 <Socket_ReadSocketData+0x1f0>)
    51d2:	4798      	blx	r3
    51d4:	2330      	movs	r3, #48	; 0x30
    51d6:	18fb      	adds	r3, r7, r3
    51d8:	881a      	ldrh	r2, [r3, #0]
    51da:	4b0f      	ldr	r3, [pc, #60]	; (5218 <Socket_ReadSocketData+0x1f4>)
    51dc:	0011      	movs	r1, r2
    51de:	0018      	movs	r0, r3
    51e0:	4b0c      	ldr	r3, [pc, #48]	; (5214 <Socket_ReadSocketData+0x1f0>)
    51e2:	4798      	blx	r3
    51e4:	200d      	movs	r0, #13
    51e6:	4b0d      	ldr	r3, [pc, #52]	; (521c <Socket_ReadSocketData+0x1f8>)
    51e8:	4798      	blx	r3
				break;
    51ea:	e006      	b.n	51fa <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    51ec:	2330      	movs	r3, #48	; 0x30
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	881b      	ldrh	r3, [r3, #0]
    51f2:	2b00      	cmp	r3, #0
    51f4:	d000      	beq.n	51f8 <Socket_ReadSocketData+0x1d4>
    51f6:	e754      	b.n	50a2 <Socket_ReadSocketData+0x7e>
	}
}
    51f8:	e7ff      	b.n	51fa <Socket_ReadSocketData+0x1d6>
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	46bd      	mov	sp, r7
    51fe:	b009      	add	sp, #36	; 0x24
    5200:	bd90      	pop	{r4, r7, pc}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	200005e4 	.word	0x200005e4
    5208:	00001f8d 	.word	0x00001f8d
    520c:	20000694 	.word	0x20000694
    5210:	000138f4 	.word	0x000138f4
    5214:	0000e7e5 	.word	0x0000e7e5
    5218:	00013900 	.word	0x00013900
    521c:	0000e819 	.word	0x0000e819

00005220 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    5220:	b590      	push	{r4, r7, lr}
    5222:	b0bb      	sub	sp, #236	; 0xec
    5224:	af02      	add	r7, sp, #8
    5226:	603a      	str	r2, [r7, #0]
    5228:	1dfb      	adds	r3, r7, #7
    522a:	1c02      	adds	r2, r0, #0
    522c:	701a      	strb	r2, [r3, #0]
    522e:	1d3b      	adds	r3, r7, #4
    5230:	1c0a      	adds	r2, r1, #0
    5232:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    5234:	1dfb      	adds	r3, r7, #7
    5236:	781b      	ldrb	r3, [r3, #0]
    5238:	2b41      	cmp	r3, #65	; 0x41
    523a:	d003      	beq.n	5244 <m2m_ip_cb+0x24>
    523c:	1dfb      	adds	r3, r7, #7
    523e:	781b      	ldrb	r3, [r3, #0]
    5240:	2b54      	cmp	r3, #84	; 0x54
    5242:	d120      	bne.n	5286 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    5244:	23cc      	movs	r3, #204	; 0xcc
    5246:	18f9      	adds	r1, r7, r3
    5248:	6838      	ldr	r0, [r7, #0]
    524a:	2300      	movs	r3, #0
    524c:	2204      	movs	r2, #4
    524e:	4c98      	ldr	r4, [pc, #608]	; (54b0 <m2m_ip_cb+0x290>)
    5250:	47a0      	blx	r4
    5252:	1e03      	subs	r3, r0, #0
    5254:	d000      	beq.n	5258 <m2m_ip_cb+0x38>
    5256:	e275      	b.n	5744 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    5258:	23cc      	movs	r3, #204	; 0xcc
    525a:	18fb      	adds	r3, r7, r3
    525c:	2201      	movs	r2, #1
    525e:	569a      	ldrsb	r2, [r3, r2]
    5260:	23c8      	movs	r3, #200	; 0xc8
    5262:	18fb      	adds	r3, r7, r3
    5264:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    5266:	4b93      	ldr	r3, [pc, #588]	; (54b4 <m2m_ip_cb+0x294>)
    5268:	681b      	ldr	r3, [r3, #0]
    526a:	2b00      	cmp	r3, #0
    526c:	d100      	bne.n	5270 <m2m_ip_cb+0x50>
    526e:	e269      	b.n	5744 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    5270:	4b90      	ldr	r3, [pc, #576]	; (54b4 <m2m_ip_cb+0x294>)
    5272:	681b      	ldr	r3, [r3, #0]
    5274:	22cc      	movs	r2, #204	; 0xcc
    5276:	18ba      	adds	r2, r7, r2
    5278:	2000      	movs	r0, #0
    527a:	5610      	ldrsb	r0, [r2, r0]
    527c:	22c8      	movs	r2, #200	; 0xc8
    527e:	18ba      	adds	r2, r7, r2
    5280:	2101      	movs	r1, #1
    5282:	4798      	blx	r3
	{
    5284:	e25e      	b.n	5744 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    5286:	1dfb      	adds	r3, r7, #7
    5288:	781b      	ldrb	r3, [r3, #0]
    528a:	2b42      	cmp	r3, #66	; 0x42
    528c:	d120      	bne.n	52d0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    528e:	23c4      	movs	r3, #196	; 0xc4
    5290:	18f9      	adds	r1, r7, r3
    5292:	6838      	ldr	r0, [r7, #0]
    5294:	2300      	movs	r3, #0
    5296:	2204      	movs	r2, #4
    5298:	4c85      	ldr	r4, [pc, #532]	; (54b0 <m2m_ip_cb+0x290>)
    529a:	47a0      	blx	r4
    529c:	1e03      	subs	r3, r0, #0
    529e:	d000      	beq.n	52a2 <m2m_ip_cb+0x82>
    52a0:	e257      	b.n	5752 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    52a2:	23c4      	movs	r3, #196	; 0xc4
    52a4:	18fb      	adds	r3, r7, r3
    52a6:	2201      	movs	r2, #1
    52a8:	569a      	ldrsb	r2, [r3, r2]
    52aa:	23c0      	movs	r3, #192	; 0xc0
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    52b0:	4b80      	ldr	r3, [pc, #512]	; (54b4 <m2m_ip_cb+0x294>)
    52b2:	681b      	ldr	r3, [r3, #0]
    52b4:	2b00      	cmp	r3, #0
    52b6:	d100      	bne.n	52ba <m2m_ip_cb+0x9a>
    52b8:	e24b      	b.n	5752 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    52ba:	4b7e      	ldr	r3, [pc, #504]	; (54b4 <m2m_ip_cb+0x294>)
    52bc:	681b      	ldr	r3, [r3, #0]
    52be:	22c4      	movs	r2, #196	; 0xc4
    52c0:	18ba      	adds	r2, r7, r2
    52c2:	2000      	movs	r0, #0
    52c4:	5610      	ldrsb	r0, [r2, r0]
    52c6:	22c0      	movs	r2, #192	; 0xc0
    52c8:	18ba      	adds	r2, r7, r2
    52ca:	2102      	movs	r1, #2
    52cc:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    52ce:	e240      	b.n	5752 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    52d0:	1dfb      	adds	r3, r7, #7
    52d2:	781b      	ldrb	r3, [r3, #0]
    52d4:	2b43      	cmp	r3, #67	; 0x43
    52d6:	d000      	beq.n	52da <m2m_ip_cb+0xba>
    52d8:	e086      	b.n	53e8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    52da:	23b4      	movs	r3, #180	; 0xb4
    52dc:	18f9      	adds	r1, r7, r3
    52de:	6838      	ldr	r0, [r7, #0]
    52e0:	2300      	movs	r3, #0
    52e2:	220c      	movs	r2, #12
    52e4:	4c72      	ldr	r4, [pc, #456]	; (54b0 <m2m_ip_cb+0x290>)
    52e6:	47a0      	blx	r4
    52e8:	1e03      	subs	r3, r0, #0
    52ea:	d000      	beq.n	52ee <m2m_ip_cb+0xce>
    52ec:	e231      	b.n	5752 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    52ee:	23b4      	movs	r3, #180	; 0xb4
    52f0:	18fb      	adds	r3, r7, r3
    52f2:	7a5b      	ldrb	r3, [r3, #9]
    52f4:	b25b      	sxtb	r3, r3
    52f6:	2b00      	cmp	r3, #0
    52f8:	db4f      	blt.n	539a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    52fa:	23b4      	movs	r3, #180	; 0xb4
    52fc:	18fb      	adds	r3, r7, r3
    52fe:	7a5b      	ldrb	r3, [r3, #9]
    5300:	b25b      	sxtb	r3, r3
    5302:	0018      	movs	r0, r3
    5304:	23b4      	movs	r3, #180	; 0xb4
    5306:	18fb      	adds	r3, r7, r3
    5308:	7a1b      	ldrb	r3, [r3, #8]
    530a:	b25b      	sxtb	r3, r3
    530c:	4a6a      	ldr	r2, [pc, #424]	; (54b8 <m2m_ip_cb+0x298>)
    530e:	011b      	lsls	r3, r3, #4
    5310:	18d3      	adds	r3, r2, r3
    5312:	330b      	adds	r3, #11
    5314:	781b      	ldrb	r3, [r3, #0]
    5316:	b2d9      	uxtb	r1, r3
    5318:	4a67      	ldr	r2, [pc, #412]	; (54b8 <m2m_ip_cb+0x298>)
    531a:	0103      	lsls	r3, r0, #4
    531c:	18d3      	adds	r3, r2, r3
    531e:	330b      	adds	r3, #11
    5320:	1c0a      	adds	r2, r1, #0
    5322:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    5324:	23b4      	movs	r3, #180	; 0xb4
    5326:	18fb      	adds	r3, r7, r3
    5328:	7a5b      	ldrb	r3, [r3, #9]
    532a:	b25b      	sxtb	r3, r3
    532c:	4a62      	ldr	r2, [pc, #392]	; (54b8 <m2m_ip_cb+0x298>)
    532e:	011b      	lsls	r3, r3, #4
    5330:	18d3      	adds	r3, r2, r3
    5332:	330a      	adds	r3, #10
    5334:	2201      	movs	r2, #1
    5336:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    5338:	23b4      	movs	r3, #180	; 0xb4
    533a:	18fb      	adds	r3, r7, r3
    533c:	7a5b      	ldrb	r3, [r3, #9]
    533e:	b25b      	sxtb	r3, r3
    5340:	0018      	movs	r0, r3
    5342:	23b4      	movs	r3, #180	; 0xb4
    5344:	18fb      	adds	r3, r7, r3
    5346:	895b      	ldrh	r3, [r3, #10]
    5348:	3b08      	subs	r3, #8
    534a:	b299      	uxth	r1, r3
    534c:	4a5a      	ldr	r2, [pc, #360]	; (54b8 <m2m_ip_cb+0x298>)
    534e:	0103      	lsls	r3, r0, #4
    5350:	18d3      	adds	r3, r2, r3
    5352:	3308      	adds	r3, #8
    5354:	1c0a      	adds	r2, r1, #0
    5356:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    5358:	4b58      	ldr	r3, [pc, #352]	; (54bc <m2m_ip_cb+0x29c>)
    535a:	881b      	ldrh	r3, [r3, #0]
    535c:	b29b      	uxth	r3, r3
    535e:	3301      	adds	r3, #1
    5360:	b29a      	uxth	r2, r3
    5362:	4b56      	ldr	r3, [pc, #344]	; (54bc <m2m_ip_cb+0x29c>)
    5364:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    5366:	4b55      	ldr	r3, [pc, #340]	; (54bc <m2m_ip_cb+0x29c>)
    5368:	881b      	ldrh	r3, [r3, #0]
    536a:	b29b      	uxth	r3, r3
    536c:	2b00      	cmp	r3, #0
    536e:	d106      	bne.n	537e <m2m_ip_cb+0x15e>
					++gu16SessionID;
    5370:	4b52      	ldr	r3, [pc, #328]	; (54bc <m2m_ip_cb+0x29c>)
    5372:	881b      	ldrh	r3, [r3, #0]
    5374:	b29b      	uxth	r3, r3
    5376:	3301      	adds	r3, #1
    5378:	b29a      	uxth	r2, r3
    537a:	4b50      	ldr	r3, [pc, #320]	; (54bc <m2m_ip_cb+0x29c>)
    537c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    537e:	23b4      	movs	r3, #180	; 0xb4
    5380:	18fb      	adds	r3, r7, r3
    5382:	7a5b      	ldrb	r3, [r3, #9]
    5384:	b25b      	sxtb	r3, r3
    5386:	0018      	movs	r0, r3
    5388:	4b4c      	ldr	r3, [pc, #304]	; (54bc <m2m_ip_cb+0x29c>)
    538a:	881b      	ldrh	r3, [r3, #0]
    538c:	b299      	uxth	r1, r3
    538e:	4a4a      	ldr	r2, [pc, #296]	; (54b8 <m2m_ip_cb+0x298>)
    5390:	0103      	lsls	r3, r0, #4
    5392:	18d3      	adds	r3, r2, r3
    5394:	3306      	adds	r3, #6
    5396:	1c0a      	adds	r2, r1, #0
    5398:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    539a:	23b4      	movs	r3, #180	; 0xb4
    539c:	18fb      	adds	r3, r7, r3
    539e:	2209      	movs	r2, #9
    53a0:	569a      	ldrsb	r2, [r3, r2]
    53a2:	23a0      	movs	r3, #160	; 0xa0
    53a4:	18fb      	adds	r3, r7, r3
    53a6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    53a8:	23a0      	movs	r3, #160	; 0xa0
    53aa:	18fb      	adds	r3, r7, r3
    53ac:	2202      	movs	r2, #2
    53ae:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    53b0:	23b4      	movs	r3, #180	; 0xb4
    53b2:	18fb      	adds	r3, r7, r3
    53b4:	885a      	ldrh	r2, [r3, #2]
    53b6:	23a0      	movs	r3, #160	; 0xa0
    53b8:	18fb      	adds	r3, r7, r3
    53ba:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    53bc:	23b4      	movs	r3, #180	; 0xb4
    53be:	18fb      	adds	r3, r7, r3
    53c0:	685a      	ldr	r2, [r3, #4]
    53c2:	23a0      	movs	r3, #160	; 0xa0
    53c4:	18fb      	adds	r3, r7, r3
    53c6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    53c8:	4b3a      	ldr	r3, [pc, #232]	; (54b4 <m2m_ip_cb+0x294>)
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d100      	bne.n	53d2 <m2m_ip_cb+0x1b2>
    53d0:	e1bf      	b.n	5752 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    53d2:	4b38      	ldr	r3, [pc, #224]	; (54b4 <m2m_ip_cb+0x294>)
    53d4:	681b      	ldr	r3, [r3, #0]
    53d6:	22b4      	movs	r2, #180	; 0xb4
    53d8:	18ba      	adds	r2, r7, r2
    53da:	2008      	movs	r0, #8
    53dc:	5610      	ldrsb	r0, [r2, r0]
    53de:	22a0      	movs	r2, #160	; 0xa0
    53e0:	18ba      	adds	r2, r7, r2
    53e2:	2104      	movs	r1, #4
    53e4:	4798      	blx	r3
}
    53e6:	e1b4      	b.n	5752 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    53e8:	1dfb      	adds	r3, r7, #7
    53ea:	781b      	ldrb	r3, [r3, #0]
    53ec:	2b44      	cmp	r3, #68	; 0x44
    53ee:	d003      	beq.n	53f8 <m2m_ip_cb+0x1d8>
    53f0:	1dfb      	adds	r3, r7, #7
    53f2:	781b      	ldrb	r3, [r3, #0]
    53f4:	2b4b      	cmp	r3, #75	; 0x4b
    53f6:	d13d      	bne.n	5474 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    53f8:	239c      	movs	r3, #156	; 0x9c
    53fa:	18f9      	adds	r1, r7, r3
    53fc:	6838      	ldr	r0, [r7, #0]
    53fe:	2300      	movs	r3, #0
    5400:	2204      	movs	r2, #4
    5402:	4c2b      	ldr	r4, [pc, #172]	; (54b0 <m2m_ip_cb+0x290>)
    5404:	47a0      	blx	r4
    5406:	1e03      	subs	r3, r0, #0
    5408:	d000      	beq.n	540c <m2m_ip_cb+0x1ec>
    540a:	e19d      	b.n	5748 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    540c:	239c      	movs	r3, #156	; 0x9c
    540e:	18fb      	adds	r3, r7, r3
    5410:	2200      	movs	r2, #0
    5412:	569a      	ldrsb	r2, [r3, r2]
    5414:	2398      	movs	r3, #152	; 0x98
    5416:	18fb      	adds	r3, r7, r3
    5418:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    541a:	239c      	movs	r3, #156	; 0x9c
    541c:	18fb      	adds	r3, r7, r3
    541e:	2201      	movs	r2, #1
    5420:	569a      	ldrsb	r2, [r3, r2]
    5422:	2398      	movs	r3, #152	; 0x98
    5424:	18fb      	adds	r3, r7, r3
    5426:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    5428:	239c      	movs	r3, #156	; 0x9c
    542a:	18fb      	adds	r3, r7, r3
    542c:	785b      	ldrb	r3, [r3, #1]
    542e:	b25b      	sxtb	r3, r3
    5430:	2b00      	cmp	r3, #0
    5432:	d10f      	bne.n	5454 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    5434:	239c      	movs	r3, #156	; 0x9c
    5436:	18fb      	adds	r3, r7, r3
    5438:	781b      	ldrb	r3, [r3, #0]
    543a:	b25b      	sxtb	r3, r3
    543c:	0018      	movs	r0, r3
    543e:	239c      	movs	r3, #156	; 0x9c
    5440:	18fb      	adds	r3, r7, r3
    5442:	885b      	ldrh	r3, [r3, #2]
    5444:	3b08      	subs	r3, #8
    5446:	b299      	uxth	r1, r3
    5448:	4a1b      	ldr	r2, [pc, #108]	; (54b8 <m2m_ip_cb+0x298>)
    544a:	0103      	lsls	r3, r0, #4
    544c:	18d3      	adds	r3, r2, r3
    544e:	3308      	adds	r3, #8
    5450:	1c0a      	adds	r2, r1, #0
    5452:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    5454:	4b17      	ldr	r3, [pc, #92]	; (54b4 <m2m_ip_cb+0x294>)
    5456:	681b      	ldr	r3, [r3, #0]
    5458:	2b00      	cmp	r3, #0
    545a:	d100      	bne.n	545e <m2m_ip_cb+0x23e>
    545c:	e174      	b.n	5748 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    545e:	4b15      	ldr	r3, [pc, #84]	; (54b4 <m2m_ip_cb+0x294>)
    5460:	681b      	ldr	r3, [r3, #0]
    5462:	229c      	movs	r2, #156	; 0x9c
    5464:	18ba      	adds	r2, r7, r2
    5466:	2000      	movs	r0, #0
    5468:	5610      	ldrsb	r0, [r2, r0]
    546a:	2298      	movs	r2, #152	; 0x98
    546c:	18ba      	adds	r2, r7, r2
    546e:	2105      	movs	r1, #5
    5470:	4798      	blx	r3
	{
    5472:	e169      	b.n	5748 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    5474:	1dfb      	adds	r3, r7, #7
    5476:	781b      	ldrb	r3, [r3, #0]
    5478:	2b4a      	cmp	r3, #74	; 0x4a
    547a:	d123      	bne.n	54c4 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    547c:	230c      	movs	r3, #12
    547e:	18f9      	adds	r1, r7, r3
    5480:	6838      	ldr	r0, [r7, #0]
    5482:	2300      	movs	r3, #0
    5484:	2244      	movs	r2, #68	; 0x44
    5486:	4c0a      	ldr	r4, [pc, #40]	; (54b0 <m2m_ip_cb+0x290>)
    5488:	47a0      	blx	r4
    548a:	1e03      	subs	r3, r0, #0
    548c:	d000      	beq.n	5490 <m2m_ip_cb+0x270>
    548e:	e160      	b.n	5752 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    5490:	4b0b      	ldr	r3, [pc, #44]	; (54c0 <m2m_ip_cb+0x2a0>)
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	2b00      	cmp	r3, #0
    5496:	d100      	bne.n	549a <m2m_ip_cb+0x27a>
    5498:	e15b      	b.n	5752 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    549a:	4b09      	ldr	r3, [pc, #36]	; (54c0 <m2m_ip_cb+0x2a0>)
    549c:	681a      	ldr	r2, [r3, #0]
    549e:	230c      	movs	r3, #12
    54a0:	18fb      	adds	r3, r7, r3
    54a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    54a4:	230c      	movs	r3, #12
    54a6:	18fb      	adds	r3, r7, r3
    54a8:	0018      	movs	r0, r3
    54aa:	4790      	blx	r2
}
    54ac:	e151      	b.n	5752 <m2m_ip_cb+0x532>
    54ae:	46c0      	nop			; (mov r8, r8)
    54b0:	00001f8d 	.word	0x00001f8d
    54b4:	20000694 	.word	0x20000694
    54b8:	200005e4 	.word	0x200005e4
    54bc:	20000216 	.word	0x20000216
    54c0:	2000069c 	.word	0x2000069c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    54c4:	1dfb      	adds	r3, r7, #7
    54c6:	781b      	ldrb	r3, [r3, #0]
    54c8:	2b46      	cmp	r3, #70	; 0x46
    54ca:	d008      	beq.n	54de <m2m_ip_cb+0x2be>
    54cc:	1dfb      	adds	r3, r7, #7
    54ce:	781b      	ldrb	r3, [r3, #0]
    54d0:	2b48      	cmp	r3, #72	; 0x48
    54d2:	d004      	beq.n	54de <m2m_ip_cb+0x2be>
    54d4:	1dfb      	adds	r3, r7, #7
    54d6:	781b      	ldrb	r3, [r3, #0]
    54d8:	2b4d      	cmp	r3, #77	; 0x4d
    54da:	d000      	beq.n	54de <m2m_ip_cb+0x2be>
    54dc:	e0b4      	b.n	5648 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    54de:	23df      	movs	r3, #223	; 0xdf
    54e0:	18fb      	adds	r3, r7, r3
    54e2:	2206      	movs	r2, #6
    54e4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    54e6:	1dfb      	adds	r3, r7, #7
    54e8:	781b      	ldrb	r3, [r3, #0]
    54ea:	2b48      	cmp	r3, #72	; 0x48
    54ec:	d103      	bne.n	54f6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    54ee:	23df      	movs	r3, #223	; 0xdf
    54f0:	18fb      	adds	r3, r7, r3
    54f2:	2209      	movs	r2, #9
    54f4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    54f6:	23d8      	movs	r3, #216	; 0xd8
    54f8:	18fb      	adds	r3, r7, r3
    54fa:	2210      	movs	r2, #16
    54fc:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    54fe:	23d8      	movs	r3, #216	; 0xd8
    5500:	18fb      	adds	r3, r7, r3
    5502:	881a      	ldrh	r2, [r3, #0]
    5504:	2388      	movs	r3, #136	; 0x88
    5506:	18f9      	adds	r1, r7, r3
    5508:	6838      	ldr	r0, [r7, #0]
    550a:	2300      	movs	r3, #0
    550c:	4c93      	ldr	r4, [pc, #588]	; (575c <m2m_ip_cb+0x53c>)
    550e:	47a0      	blx	r4
    5510:	1e03      	subs	r3, r0, #0
    5512:	d000      	beq.n	5516 <m2m_ip_cb+0x2f6>
    5514:	e11a      	b.n	574c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    5516:	23d6      	movs	r3, #214	; 0xd6
    5518:	18fb      	adds	r3, r7, r3
    551a:	2200      	movs	r2, #0
    551c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    551e:	23d5      	movs	r3, #213	; 0xd5
    5520:	18fb      	adds	r3, r7, r3
    5522:	2288      	movs	r2, #136	; 0x88
    5524:	18ba      	adds	r2, r7, r2
    5526:	7b12      	ldrb	r2, [r2, #12]
    5528:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    552a:	23d6      	movs	r3, #214	; 0xd6
    552c:	18fb      	adds	r3, r7, r3
    552e:	2288      	movs	r2, #136	; 0x88
    5530:	18ba      	adds	r2, r7, r2
    5532:	89d2      	ldrh	r2, [r2, #14]
    5534:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    5536:	23d5      	movs	r3, #213	; 0xd5
    5538:	18fb      	adds	r3, r7, r3
    553a:	781b      	ldrb	r3, [r3, #0]
    553c:	b25b      	sxtb	r3, r3
    553e:	4a88      	ldr	r2, [pc, #544]	; (5760 <m2m_ip_cb+0x540>)
    5540:	011b      	lsls	r3, r3, #4
    5542:	18d3      	adds	r3, r2, r3
    5544:	330c      	adds	r3, #12
    5546:	2200      	movs	r2, #0
    5548:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    554a:	23d2      	movs	r3, #210	; 0xd2
    554c:	18fb      	adds	r3, r7, r3
    554e:	2288      	movs	r2, #136	; 0x88
    5550:	18ba      	adds	r2, r7, r2
    5552:	8912      	ldrh	r2, [r2, #8]
    5554:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    5556:	23d0      	movs	r3, #208	; 0xd0
    5558:	18fb      	adds	r3, r7, r3
    555a:	2288      	movs	r2, #136	; 0x88
    555c:	18ba      	adds	r2, r7, r2
    555e:	8952      	ldrh	r2, [r2, #10]
    5560:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    5562:	2388      	movs	r3, #136	; 0x88
    5564:	18fb      	adds	r3, r7, r3
    5566:	885a      	ldrh	r2, [r3, #2]
    5568:	2370      	movs	r3, #112	; 0x70
    556a:	18fb      	adds	r3, r7, r3
    556c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    556e:	2388      	movs	r3, #136	; 0x88
    5570:	18fb      	adds	r3, r7, r3
    5572:	685a      	ldr	r2, [r3, #4]
    5574:	2370      	movs	r3, #112	; 0x70
    5576:	18fb      	adds	r3, r7, r3
    5578:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    557a:	23d5      	movs	r3, #213	; 0xd5
    557c:	18fb      	adds	r3, r7, r3
    557e:	781b      	ldrb	r3, [r3, #0]
    5580:	b25b      	sxtb	r3, r3
    5582:	4a77      	ldr	r2, [pc, #476]	; (5760 <m2m_ip_cb+0x540>)
    5584:	011b      	lsls	r3, r3, #4
    5586:	18d3      	adds	r3, r2, r3
    5588:	3306      	adds	r3, #6
    558a:	881b      	ldrh	r3, [r3, #0]
    558c:	b29b      	uxth	r3, r3
    558e:	22d6      	movs	r2, #214	; 0xd6
    5590:	18ba      	adds	r2, r7, r2
    5592:	8812      	ldrh	r2, [r2, #0]
    5594:	429a      	cmp	r2, r3
    5596:	d148      	bne.n	562a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    5598:	23d2      	movs	r3, #210	; 0xd2
    559a:	18fb      	adds	r3, r7, r3
    559c:	2200      	movs	r2, #0
    559e:	5e9b      	ldrsh	r3, [r3, r2]
    55a0:	2b00      	cmp	r3, #0
    55a2:	dd25      	ble.n	55f0 <m2m_ip_cb+0x3d0>
    55a4:	23d2      	movs	r3, #210	; 0xd2
    55a6:	18fb      	adds	r3, r7, r3
    55a8:	2200      	movs	r2, #0
    55aa:	5e9a      	ldrsh	r2, [r3, r2]
    55ac:	1d3b      	adds	r3, r7, #4
    55ae:	881b      	ldrh	r3, [r3, #0]
    55b0:	429a      	cmp	r2, r3
    55b2:	da1d      	bge.n	55f0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    55b4:	23d0      	movs	r3, #208	; 0xd0
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	881b      	ldrh	r3, [r3, #0]
    55ba:	683a      	ldr	r2, [r7, #0]
    55bc:	18d3      	adds	r3, r2, r3
    55be:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    55c0:	23d8      	movs	r3, #216	; 0xd8
    55c2:	18fb      	adds	r3, r7, r3
    55c4:	22d2      	movs	r2, #210	; 0xd2
    55c6:	18ba      	adds	r2, r7, r2
    55c8:	8812      	ldrh	r2, [r2, #0]
    55ca:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    55cc:	683c      	ldr	r4, [r7, #0]
    55ce:	23df      	movs	r3, #223	; 0xdf
    55d0:	18fb      	adds	r3, r7, r3
    55d2:	781a      	ldrb	r2, [r3, #0]
    55d4:	2370      	movs	r3, #112	; 0x70
    55d6:	18f9      	adds	r1, r7, r3
    55d8:	23d5      	movs	r3, #213	; 0xd5
    55da:	18fb      	adds	r3, r7, r3
    55dc:	2000      	movs	r0, #0
    55de:	5618      	ldrsb	r0, [r3, r0]
    55e0:	23d8      	movs	r3, #216	; 0xd8
    55e2:	18fb      	adds	r3, r7, r3
    55e4:	881b      	ldrh	r3, [r3, #0]
    55e6:	9300      	str	r3, [sp, #0]
    55e8:	0023      	movs	r3, r4
    55ea:	4c5e      	ldr	r4, [pc, #376]	; (5764 <m2m_ip_cb+0x544>)
    55ec:	47a0      	blx	r4
	{
    55ee:	e0ad      	b.n	574c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    55f0:	2370      	movs	r3, #112	; 0x70
    55f2:	18fb      	adds	r3, r7, r3
    55f4:	22d2      	movs	r2, #210	; 0xd2
    55f6:	18ba      	adds	r2, r7, r2
    55f8:	8812      	ldrh	r2, [r2, #0]
    55fa:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    55fc:	2370      	movs	r3, #112	; 0x70
    55fe:	18fb      	adds	r3, r7, r3
    5600:	2200      	movs	r2, #0
    5602:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    5604:	4b58      	ldr	r3, [pc, #352]	; (5768 <m2m_ip_cb+0x548>)
    5606:	681b      	ldr	r3, [r3, #0]
    5608:	2b00      	cmp	r3, #0
    560a:	d100      	bne.n	560e <m2m_ip_cb+0x3ee>
    560c:	e09e      	b.n	574c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    560e:	4b56      	ldr	r3, [pc, #344]	; (5768 <m2m_ip_cb+0x548>)
    5610:	681b      	ldr	r3, [r3, #0]
    5612:	2270      	movs	r2, #112	; 0x70
    5614:	18bc      	adds	r4, r7, r2
    5616:	22df      	movs	r2, #223	; 0xdf
    5618:	18ba      	adds	r2, r7, r2
    561a:	7811      	ldrb	r1, [r2, #0]
    561c:	22d5      	movs	r2, #213	; 0xd5
    561e:	18ba      	adds	r2, r7, r2
    5620:	2000      	movs	r0, #0
    5622:	5610      	ldrsb	r0, [r2, r0]
    5624:	0022      	movs	r2, r4
    5626:	4798      	blx	r3
	{
    5628:	e090      	b.n	574c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    562a:	23d8      	movs	r3, #216	; 0xd8
    562c:	18fa      	adds	r2, r7, r3
    562e:	1d3b      	adds	r3, r7, #4
    5630:	8812      	ldrh	r2, [r2, #0]
    5632:	881b      	ldrh	r3, [r3, #0]
    5634:	429a      	cmp	r2, r3
    5636:	d300      	bcc.n	563a <m2m_ip_cb+0x41a>
    5638:	e088      	b.n	574c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    563a:	2301      	movs	r3, #1
    563c:	2200      	movs	r2, #0
    563e:	2100      	movs	r1, #0
    5640:	2000      	movs	r0, #0
    5642:	4c46      	ldr	r4, [pc, #280]	; (575c <m2m_ip_cb+0x53c>)
    5644:	47a0      	blx	r4
	{
    5646:	e081      	b.n	574c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    5648:	1dfb      	adds	r3, r7, #7
    564a:	781b      	ldrb	r3, [r3, #0]
    564c:	2b45      	cmp	r3, #69	; 0x45
    564e:	d007      	beq.n	5660 <m2m_ip_cb+0x440>
    5650:	1dfb      	adds	r3, r7, #7
    5652:	781b      	ldrb	r3, [r3, #0]
    5654:	2b47      	cmp	r3, #71	; 0x47
    5656:	d003      	beq.n	5660 <m2m_ip_cb+0x440>
    5658:	1dfb      	adds	r3, r7, #7
    565a:	781b      	ldrb	r3, [r3, #0]
    565c:	2b4c      	cmp	r3, #76	; 0x4c
    565e:	d14c      	bne.n	56fa <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    5660:	23de      	movs	r3, #222	; 0xde
    5662:	18fb      	adds	r3, r7, r3
    5664:	2207      	movs	r2, #7
    5666:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    5668:	1dfb      	adds	r3, r7, #7
    566a:	781b      	ldrb	r3, [r3, #0]
    566c:	2b47      	cmp	r3, #71	; 0x47
    566e:	d103      	bne.n	5678 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    5670:	23de      	movs	r3, #222	; 0xde
    5672:	18fb      	adds	r3, r7, r3
    5674:	2208      	movs	r2, #8
    5676:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    5678:	2364      	movs	r3, #100	; 0x64
    567a:	18f9      	adds	r1, r7, r3
    567c:	6838      	ldr	r0, [r7, #0]
    567e:	2300      	movs	r3, #0
    5680:	2208      	movs	r2, #8
    5682:	4c36      	ldr	r4, [pc, #216]	; (575c <m2m_ip_cb+0x53c>)
    5684:	47a0      	blx	r4
    5686:	1e03      	subs	r3, r0, #0
    5688:	d162      	bne.n	5750 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    568a:	23dc      	movs	r3, #220	; 0xdc
    568c:	18fb      	adds	r3, r7, r3
    568e:	2200      	movs	r2, #0
    5690:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    5692:	23db      	movs	r3, #219	; 0xdb
    5694:	18fb      	adds	r3, r7, r3
    5696:	2264      	movs	r2, #100	; 0x64
    5698:	18ba      	adds	r2, r7, r2
    569a:	7812      	ldrb	r2, [r2, #0]
    569c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    569e:	23dc      	movs	r3, #220	; 0xdc
    56a0:	18fb      	adds	r3, r7, r3
    56a2:	2264      	movs	r2, #100	; 0x64
    56a4:	18ba      	adds	r2, r7, r2
    56a6:	8892      	ldrh	r2, [r2, #4]
    56a8:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    56aa:	2364      	movs	r3, #100	; 0x64
    56ac:	18fb      	adds	r3, r7, r3
    56ae:	2202      	movs	r2, #2
    56b0:	5e9a      	ldrsh	r2, [r3, r2]
    56b2:	236e      	movs	r3, #110	; 0x6e
    56b4:	18fb      	adds	r3, r7, r3
    56b6:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    56b8:	23db      	movs	r3, #219	; 0xdb
    56ba:	18fb      	adds	r3, r7, r3
    56bc:	781b      	ldrb	r3, [r3, #0]
    56be:	b25b      	sxtb	r3, r3
    56c0:	4a27      	ldr	r2, [pc, #156]	; (5760 <m2m_ip_cb+0x540>)
    56c2:	011b      	lsls	r3, r3, #4
    56c4:	18d3      	adds	r3, r2, r3
    56c6:	3306      	adds	r3, #6
    56c8:	881b      	ldrh	r3, [r3, #0]
    56ca:	b29b      	uxth	r3, r3
    56cc:	22dc      	movs	r2, #220	; 0xdc
    56ce:	18ba      	adds	r2, r7, r2
    56d0:	8812      	ldrh	r2, [r2, #0]
    56d2:	429a      	cmp	r2, r3
    56d4:	d13c      	bne.n	5750 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    56d6:	4b24      	ldr	r3, [pc, #144]	; (5768 <m2m_ip_cb+0x548>)
    56d8:	681b      	ldr	r3, [r3, #0]
    56da:	2b00      	cmp	r3, #0
    56dc:	d038      	beq.n	5750 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    56de:	4b22      	ldr	r3, [pc, #136]	; (5768 <m2m_ip_cb+0x548>)
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	226e      	movs	r2, #110	; 0x6e
    56e4:	18bc      	adds	r4, r7, r2
    56e6:	22de      	movs	r2, #222	; 0xde
    56e8:	18ba      	adds	r2, r7, r2
    56ea:	7811      	ldrb	r1, [r2, #0]
    56ec:	22db      	movs	r2, #219	; 0xdb
    56ee:	18ba      	adds	r2, r7, r2
    56f0:	2000      	movs	r0, #0
    56f2:	5610      	ldrsb	r0, [r2, r0]
    56f4:	0022      	movs	r2, r4
    56f6:	4798      	blx	r3
	{
    56f8:	e02a      	b.n	5750 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    56fa:	1dfb      	adds	r3, r7, #7
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	2b52      	cmp	r3, #82	; 0x52
    5700:	d127      	bne.n	5752 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    5702:	2350      	movs	r3, #80	; 0x50
    5704:	18f9      	adds	r1, r7, r3
    5706:	6838      	ldr	r0, [r7, #0]
    5708:	2301      	movs	r3, #1
    570a:	2214      	movs	r2, #20
    570c:	4c13      	ldr	r4, [pc, #76]	; (575c <m2m_ip_cb+0x53c>)
    570e:	47a0      	blx	r4
    5710:	1e03      	subs	r3, r0, #0
    5712:	d11e      	bne.n	5752 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    5714:	2350      	movs	r3, #80	; 0x50
    5716:	18fb      	adds	r3, r7, r3
    5718:	685b      	ldr	r3, [r3, #4]
    571a:	001a      	movs	r2, r3
    571c:	4b13      	ldr	r3, [pc, #76]	; (576c <m2m_ip_cb+0x54c>)
    571e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    5720:	4b12      	ldr	r3, [pc, #72]	; (576c <m2m_ip_cb+0x54c>)
    5722:	681b      	ldr	r3, [r3, #0]
    5724:	2b00      	cmp	r3, #0
    5726:	d014      	beq.n	5752 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    5728:	4b10      	ldr	r3, [pc, #64]	; (576c <m2m_ip_cb+0x54c>)
    572a:	681c      	ldr	r4, [r3, #0]
    572c:	2350      	movs	r3, #80	; 0x50
    572e:	18fb      	adds	r3, r7, r3
    5730:	6818      	ldr	r0, [r3, #0]
    5732:	2350      	movs	r3, #80	; 0x50
    5734:	18fb      	adds	r3, r7, r3
    5736:	6899      	ldr	r1, [r3, #8]
    5738:	2350      	movs	r3, #80	; 0x50
    573a:	18fb      	adds	r3, r7, r3
    573c:	7c1b      	ldrb	r3, [r3, #16]
    573e:	001a      	movs	r2, r3
    5740:	47a0      	blx	r4
}
    5742:	e006      	b.n	5752 <m2m_ip_cb+0x532>
	{
    5744:	46c0      	nop			; (mov r8, r8)
    5746:	e004      	b.n	5752 <m2m_ip_cb+0x532>
	{
    5748:	46c0      	nop			; (mov r8, r8)
    574a:	e002      	b.n	5752 <m2m_ip_cb+0x532>
	{
    574c:	46c0      	nop			; (mov r8, r8)
    574e:	e000      	b.n	5752 <m2m_ip_cb+0x532>
	{
    5750:	46c0      	nop			; (mov r8, r8)
}
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	46bd      	mov	sp, r7
    5756:	b039      	add	sp, #228	; 0xe4
    5758:	bd90      	pop	{r4, r7, pc}
    575a:	46c0      	nop			; (mov r8, r8)
    575c:	00001f8d 	.word	0x00001f8d
    5760:	200005e4 	.word	0x200005e4
    5764:	00005025 	.word	0x00005025
    5768:	20000694 	.word	0x20000694
    576c:	20000698 	.word	0x20000698

00005770 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    5770:	b580      	push	{r7, lr}
    5772:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    5774:	4b0c      	ldr	r3, [pc, #48]	; (57a8 <socketInit+0x38>)
    5776:	781b      	ldrb	r3, [r3, #0]
    5778:	b2db      	uxtb	r3, r3
    577a:	2b00      	cmp	r3, #0
    577c:	d110      	bne.n	57a0 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    577e:	4b0b      	ldr	r3, [pc, #44]	; (57ac <socketInit+0x3c>)
    5780:	22b0      	movs	r2, #176	; 0xb0
    5782:	2100      	movs	r1, #0
    5784:	0018      	movs	r0, r3
    5786:	4b0a      	ldr	r3, [pc, #40]	; (57b0 <socketInit+0x40>)
    5788:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    578a:	4b0a      	ldr	r3, [pc, #40]	; (57b4 <socketInit+0x44>)
    578c:	0019      	movs	r1, r3
    578e:	2002      	movs	r0, #2
    5790:	4b09      	ldr	r3, [pc, #36]	; (57b8 <socketInit+0x48>)
    5792:	4798      	blx	r3
		gbSocketInit	= 1;
    5794:	4b04      	ldr	r3, [pc, #16]	; (57a8 <socketInit+0x38>)
    5796:	2201      	movs	r2, #1
    5798:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    579a:	4b08      	ldr	r3, [pc, #32]	; (57bc <socketInit+0x4c>)
    579c:	2200      	movs	r2, #0
    579e:	801a      	strh	r2, [r3, #0]
	}
}
    57a0:	46c0      	nop			; (mov r8, r8)
    57a2:	46bd      	mov	sp, r7
    57a4:	bd80      	pop	{r7, pc}
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	20000218 	.word	0x20000218
    57ac:	200005e4 	.word	0x200005e4
    57b0:	00001439 	.word	0x00001439
    57b4:	00005221 	.word	0x00005221
    57b8:	0000210d 	.word	0x0000210d
    57bc:	20000216 	.word	0x20000216

000057c0 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    57c0:	b580      	push	{r7, lr}
    57c2:	b082      	sub	sp, #8
    57c4:	af00      	add	r7, sp, #0
    57c6:	6078      	str	r0, [r7, #4]
    57c8:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    57ca:	4b05      	ldr	r3, [pc, #20]	; (57e0 <registerSocketCallback+0x20>)
    57cc:	687a      	ldr	r2, [r7, #4]
    57ce:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    57d0:	4b04      	ldr	r3, [pc, #16]	; (57e4 <registerSocketCallback+0x24>)
    57d2:	683a      	ldr	r2, [r7, #0]
    57d4:	601a      	str	r2, [r3, #0]
}
    57d6:	46c0      	nop			; (mov r8, r8)
    57d8:	46bd      	mov	sp, r7
    57da:	b002      	add	sp, #8
    57dc:	bd80      	pop	{r7, pc}
    57de:	46c0      	nop			; (mov r8, r8)
    57e0:	20000694 	.word	0x20000694
    57e4:	2000069c 	.word	0x2000069c

000057e8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    57e8:	b590      	push	{r4, r7, lr}
    57ea:	b08d      	sub	sp, #52	; 0x34
    57ec:	af04      	add	r7, sp, #16
    57ee:	0004      	movs	r4, r0
    57f0:	0008      	movs	r0, r1
    57f2:	0011      	movs	r1, r2
    57f4:	1dbb      	adds	r3, r7, #6
    57f6:	1c22      	adds	r2, r4, #0
    57f8:	801a      	strh	r2, [r3, #0]
    57fa:	1d7b      	adds	r3, r7, #5
    57fc:	1c02      	adds	r2, r0, #0
    57fe:	701a      	strb	r2, [r3, #0]
    5800:	1d3b      	adds	r3, r7, #4
    5802:	1c0a      	adds	r2, r1, #0
    5804:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    5806:	231f      	movs	r3, #31
    5808:	18fb      	adds	r3, r7, r3
    580a:	22ff      	movs	r2, #255	; 0xff
    580c:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    580e:	1dbb      	adds	r3, r7, #6
    5810:	881b      	ldrh	r3, [r3, #0]
    5812:	2b02      	cmp	r3, #2
    5814:	d000      	beq.n	5818 <socket+0x30>
    5816:	e0cd      	b.n	59b4 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    5818:	1d7b      	adds	r3, r7, #5
    581a:	781b      	ldrb	r3, [r3, #0]
    581c:	2b01      	cmp	r3, #1
    581e:	d135      	bne.n	588c <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    5820:	231e      	movs	r3, #30
    5822:	18fb      	adds	r3, r7, r3
    5824:	2200      	movs	r2, #0
    5826:	701a      	strb	r2, [r3, #0]
    5828:	e02a      	b.n	5880 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    582a:	2317      	movs	r3, #23
    582c:	18fb      	adds	r3, r7, r3
    582e:	4a65      	ldr	r2, [pc, #404]	; (59c4 <socket+0x1dc>)
    5830:	7812      	ldrb	r2, [r2, #0]
    5832:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    5834:	4b63      	ldr	r3, [pc, #396]	; (59c4 <socket+0x1dc>)
    5836:	781b      	ldrb	r3, [r3, #0]
    5838:	b2db      	uxtb	r3, r3
    583a:	011a      	lsls	r2, r3, #4
    583c:	4b62      	ldr	r3, [pc, #392]	; (59c8 <socket+0x1e0>)
    583e:	18d3      	adds	r3, r2, r3
    5840:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    5842:	4b60      	ldr	r3, [pc, #384]	; (59c4 <socket+0x1dc>)
    5844:	781b      	ldrb	r3, [r3, #0]
    5846:	b2db      	uxtb	r3, r3
    5848:	1c5a      	adds	r2, r3, #1
    584a:	4b60      	ldr	r3, [pc, #384]	; (59cc <socket+0x1e4>)
    584c:	2107      	movs	r1, #7
    584e:	0010      	movs	r0, r2
    5850:	4798      	blx	r3
    5852:	000b      	movs	r3, r1
    5854:	b2da      	uxtb	r2, r3
    5856:	4b5b      	ldr	r3, [pc, #364]	; (59c4 <socket+0x1dc>)
    5858:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    585a:	69bb      	ldr	r3, [r7, #24]
    585c:	7a9b      	ldrb	r3, [r3, #10]
    585e:	b2db      	uxtb	r3, r3
    5860:	2b00      	cmp	r3, #0
    5862:	d106      	bne.n	5872 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    5864:	231f      	movs	r3, #31
    5866:	18fb      	adds	r3, r7, r3
    5868:	2217      	movs	r2, #23
    586a:	18ba      	adds	r2, r7, r2
    586c:	7812      	ldrb	r2, [r2, #0]
    586e:	701a      	strb	r2, [r3, #0]
					break;
    5870:	e04c      	b.n	590c <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    5872:	231e      	movs	r3, #30
    5874:	18fb      	adds	r3, r7, r3
    5876:	781a      	ldrb	r2, [r3, #0]
    5878:	231e      	movs	r3, #30
    587a:	18fb      	adds	r3, r7, r3
    587c:	3201      	adds	r2, #1
    587e:	701a      	strb	r2, [r3, #0]
    5880:	231e      	movs	r3, #30
    5882:	18fb      	adds	r3, r7, r3
    5884:	781b      	ldrb	r3, [r3, #0]
    5886:	2b06      	cmp	r3, #6
    5888:	d9cf      	bls.n	582a <socket+0x42>
    588a:	e03f      	b.n	590c <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    588c:	1d7b      	adds	r3, r7, #5
    588e:	781b      	ldrb	r3, [r3, #0]
    5890:	2b02      	cmp	r3, #2
    5892:	d13b      	bne.n	590c <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    5894:	4b4e      	ldr	r3, [pc, #312]	; (59d0 <socket+0x1e8>)
    5896:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    5898:	231e      	movs	r3, #30
    589a:	18fb      	adds	r3, r7, r3
    589c:	2200      	movs	r2, #0
    589e:	701a      	strb	r2, [r3, #0]
    58a0:	e02f      	b.n	5902 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    58a2:	2317      	movs	r3, #23
    58a4:	18fb      	adds	r3, r7, r3
    58a6:	4a4b      	ldr	r2, [pc, #300]	; (59d4 <socket+0x1ec>)
    58a8:	7812      	ldrb	r2, [r2, #0]
    58aa:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    58ac:	4b49      	ldr	r3, [pc, #292]	; (59d4 <socket+0x1ec>)
    58ae:	781b      	ldrb	r3, [r3, #0]
    58b0:	b2db      	uxtb	r3, r3
    58b2:	011b      	lsls	r3, r3, #4
    58b4:	693a      	ldr	r2, [r7, #16]
    58b6:	18d3      	adds	r3, r2, r3
    58b8:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    58ba:	4b46      	ldr	r3, [pc, #280]	; (59d4 <socket+0x1ec>)
    58bc:	781b      	ldrb	r3, [r3, #0]
    58be:	b2db      	uxtb	r3, r3
    58c0:	3301      	adds	r3, #1
    58c2:	4a45      	ldr	r2, [pc, #276]	; (59d8 <socket+0x1f0>)
    58c4:	4013      	ands	r3, r2
    58c6:	d504      	bpl.n	58d2 <socket+0xea>
    58c8:	3b01      	subs	r3, #1
    58ca:	2204      	movs	r2, #4
    58cc:	4252      	negs	r2, r2
    58ce:	4313      	orrs	r3, r2
    58d0:	3301      	adds	r3, #1
    58d2:	b2da      	uxtb	r2, r3
    58d4:	4b3f      	ldr	r3, [pc, #252]	; (59d4 <socket+0x1ec>)
    58d6:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    58d8:	69bb      	ldr	r3, [r7, #24]
    58da:	7a9b      	ldrb	r3, [r3, #10]
    58dc:	b2db      	uxtb	r3, r3
    58de:	2b00      	cmp	r3, #0
    58e0:	d108      	bne.n	58f4 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    58e2:	2317      	movs	r3, #23
    58e4:	18fb      	adds	r3, r7, r3
    58e6:	781b      	ldrb	r3, [r3, #0]
    58e8:	3307      	adds	r3, #7
    58ea:	b2da      	uxtb	r2, r3
    58ec:	231f      	movs	r3, #31
    58ee:	18fb      	adds	r3, r7, r3
    58f0:	701a      	strb	r2, [r3, #0]
					break;
    58f2:	e00b      	b.n	590c <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    58f4:	231e      	movs	r3, #30
    58f6:	18fb      	adds	r3, r7, r3
    58f8:	781a      	ldrb	r2, [r3, #0]
    58fa:	231e      	movs	r3, #30
    58fc:	18fb      	adds	r3, r7, r3
    58fe:	3201      	adds	r2, #1
    5900:	701a      	strb	r2, [r3, #0]
    5902:	231e      	movs	r3, #30
    5904:	18fb      	adds	r3, r7, r3
    5906:	781b      	ldrb	r3, [r3, #0]
    5908:	2b03      	cmp	r3, #3
    590a:	d9ca      	bls.n	58a2 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    590c:	231f      	movs	r3, #31
    590e:	18fb      	adds	r3, r7, r3
    5910:	781b      	ldrb	r3, [r3, #0]
    5912:	2b7f      	cmp	r3, #127	; 0x7f
    5914:	d84e      	bhi.n	59b4 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    5916:	69bb      	ldr	r3, [r7, #24]
    5918:	2210      	movs	r2, #16
    591a:	2100      	movs	r1, #0
    591c:	0018      	movs	r0, r3
    591e:	4b2f      	ldr	r3, [pc, #188]	; (59dc <socket+0x1f4>)
    5920:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    5922:	69bb      	ldr	r3, [r7, #24]
    5924:	2201      	movs	r2, #1
    5926:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    5928:	4b2d      	ldr	r3, [pc, #180]	; (59e0 <socket+0x1f8>)
    592a:	881b      	ldrh	r3, [r3, #0]
    592c:	b29b      	uxth	r3, r3
    592e:	3301      	adds	r3, #1
    5930:	b29a      	uxth	r2, r3
    5932:	4b2b      	ldr	r3, [pc, #172]	; (59e0 <socket+0x1f8>)
    5934:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    5936:	4b2a      	ldr	r3, [pc, #168]	; (59e0 <socket+0x1f8>)
    5938:	881b      	ldrh	r3, [r3, #0]
    593a:	b29b      	uxth	r3, r3
    593c:	2b00      	cmp	r3, #0
    593e:	d106      	bne.n	594e <socket+0x166>
				++gu16SessionID;
    5940:	4b27      	ldr	r3, [pc, #156]	; (59e0 <socket+0x1f8>)
    5942:	881b      	ldrh	r3, [r3, #0]
    5944:	b29b      	uxth	r3, r3
    5946:	3301      	adds	r3, #1
    5948:	b29a      	uxth	r2, r3
    594a:	4b25      	ldr	r3, [pc, #148]	; (59e0 <socket+0x1f8>)
    594c:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    594e:	4b24      	ldr	r3, [pc, #144]	; (59e0 <socket+0x1f8>)
    5950:	881b      	ldrh	r3, [r3, #0]
    5952:	b29a      	uxth	r2, r3
    5954:	69bb      	ldr	r3, [r7, #24]
    5956:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    5958:	4b22      	ldr	r3, [pc, #136]	; (59e4 <socket+0x1fc>)
    595a:	0018      	movs	r0, r3
    595c:	4b22      	ldr	r3, [pc, #136]	; (59e8 <socket+0x200>)
    595e:	4798      	blx	r3
    5960:	231f      	movs	r3, #31
    5962:	18fb      	adds	r3, r7, r3
    5964:	2100      	movs	r1, #0
    5966:	5659      	ldrsb	r1, [r3, r1]
    5968:	4b1d      	ldr	r3, [pc, #116]	; (59e0 <socket+0x1f8>)
    596a:	881b      	ldrh	r3, [r3, #0]
    596c:	b29b      	uxth	r3, r3
    596e:	001a      	movs	r2, r3
    5970:	4b1e      	ldr	r3, [pc, #120]	; (59ec <socket+0x204>)
    5972:	0018      	movs	r0, r3
    5974:	4b1c      	ldr	r3, [pc, #112]	; (59e8 <socket+0x200>)
    5976:	4798      	blx	r3
    5978:	200d      	movs	r0, #13
    597a:	4b1d      	ldr	r3, [pc, #116]	; (59f0 <socket+0x208>)
    597c:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    597e:	1d3b      	adds	r3, r7, #4
    5980:	781b      	ldrb	r3, [r3, #0]
    5982:	2201      	movs	r2, #1
    5984:	4013      	ands	r3, r2
    5986:	d015      	beq.n	59b4 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    5988:	230c      	movs	r3, #12
    598a:	18fb      	adds	r3, r7, r3
    598c:	221f      	movs	r2, #31
    598e:	18ba      	adds	r2, r7, r2
    5990:	7812      	ldrb	r2, [r2, #0]
    5992:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    5994:	69bb      	ldr	r3, [r7, #24]
    5996:	2221      	movs	r2, #33	; 0x21
    5998:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    599a:	230c      	movs	r3, #12
    599c:	18fa      	adds	r2, r7, r3
    599e:	2300      	movs	r3, #0
    59a0:	9302      	str	r3, [sp, #8]
    59a2:	2300      	movs	r3, #0
    59a4:	9301      	str	r3, [sp, #4]
    59a6:	2300      	movs	r3, #0
    59a8:	9300      	str	r3, [sp, #0]
    59aa:	2304      	movs	r3, #4
    59ac:	2150      	movs	r1, #80	; 0x50
    59ae:	2002      	movs	r0, #2
    59b0:	4c10      	ldr	r4, [pc, #64]	; (59f4 <socket+0x20c>)
    59b2:	47a0      	blx	r4
			}
		}
	}
	return sock;
    59b4:	231f      	movs	r3, #31
    59b6:	18fb      	adds	r3, r7, r3
    59b8:	781b      	ldrb	r3, [r3, #0]
    59ba:	b25b      	sxtb	r3, r3
}
    59bc:	0018      	movs	r0, r3
    59be:	46bd      	mov	sp, r7
    59c0:	b009      	add	sp, #36	; 0x24
    59c2:	bd90      	pop	{r4, r7, pc}
    59c4:	20000219 	.word	0x20000219
    59c8:	200005e4 	.word	0x200005e4
    59cc:	00010aed 	.word	0x00010aed
    59d0:	20000654 	.word	0x20000654
    59d4:	2000021a 	.word	0x2000021a
    59d8:	80000003 	.word	0x80000003
    59dc:	00001439 	.word	0x00001439
    59e0:	20000216 	.word	0x20000216
    59e4:	000138f4 	.word	0x000138f4
    59e8:	0000e7e5 	.word	0x0000e7e5
    59ec:	00013914 	.word	0x00013914
    59f0:	0000e819 	.word	0x0000e819
    59f4:	00001699 	.word	0x00001699

000059f8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    59f8:	b5b0      	push	{r4, r5, r7, lr}
    59fa:	b08a      	sub	sp, #40	; 0x28
    59fc:	af04      	add	r7, sp, #16
    59fe:	6039      	str	r1, [r7, #0]
    5a00:	0011      	movs	r1, r2
    5a02:	1dfb      	adds	r3, r7, #7
    5a04:	1c02      	adds	r2, r0, #0
    5a06:	701a      	strb	r2, [r3, #0]
    5a08:	1dbb      	adds	r3, r7, #6
    5a0a:	1c0a      	adds	r2, r1, #0
    5a0c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    5a0e:	2317      	movs	r3, #23
    5a10:	18fb      	adds	r3, r7, r3
    5a12:	22fa      	movs	r2, #250	; 0xfa
    5a14:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    5a16:	1dfb      	adds	r3, r7, #7
    5a18:	781b      	ldrb	r3, [r3, #0]
    5a1a:	2b7f      	cmp	r3, #127	; 0x7f
    5a1c:	d867      	bhi.n	5aee <connect+0xf6>
    5a1e:	683b      	ldr	r3, [r7, #0]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d064      	beq.n	5aee <connect+0xf6>
    5a24:	1dfb      	adds	r3, r7, #7
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	b25b      	sxtb	r3, r3
    5a2a:	4a35      	ldr	r2, [pc, #212]	; (5b00 <connect+0x108>)
    5a2c:	011b      	lsls	r3, r3, #4
    5a2e:	18d3      	adds	r3, r2, r3
    5a30:	330a      	adds	r3, #10
    5a32:	781b      	ldrb	r3, [r3, #0]
    5a34:	b2db      	uxtb	r3, r3
    5a36:	2b01      	cmp	r3, #1
    5a38:	d159      	bne.n	5aee <connect+0xf6>
    5a3a:	1dbb      	adds	r3, r7, #6
    5a3c:	781b      	ldrb	r3, [r3, #0]
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d055      	beq.n	5aee <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    5a42:	2316      	movs	r3, #22
    5a44:	18fb      	adds	r3, r7, r3
    5a46:	2244      	movs	r2, #68	; 0x44
    5a48:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    5a4a:	1dfb      	adds	r3, r7, #7
    5a4c:	781b      	ldrb	r3, [r3, #0]
    5a4e:	b25b      	sxtb	r3, r3
    5a50:	4a2b      	ldr	r2, [pc, #172]	; (5b00 <connect+0x108>)
    5a52:	011b      	lsls	r3, r3, #4
    5a54:	18d3      	adds	r3, r2, r3
    5a56:	330b      	adds	r3, #11
    5a58:	781b      	ldrb	r3, [r3, #0]
    5a5a:	b2db      	uxtb	r3, r3
    5a5c:	001a      	movs	r2, r3
    5a5e:	2301      	movs	r3, #1
    5a60:	4013      	ands	r3, r2
    5a62:	d00f      	beq.n	5a84 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    5a64:	2316      	movs	r3, #22
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	224b      	movs	r2, #75	; 0x4b
    5a6a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    5a6c:	1dfb      	adds	r3, r7, #7
    5a6e:	781b      	ldrb	r3, [r3, #0]
    5a70:	b25b      	sxtb	r3, r3
    5a72:	4a23      	ldr	r2, [pc, #140]	; (5b00 <connect+0x108>)
    5a74:	011b      	lsls	r3, r3, #4
    5a76:	18d3      	adds	r3, r2, r3
    5a78:	330b      	adds	r3, #11
    5a7a:	781b      	ldrb	r3, [r3, #0]
    5a7c:	b2da      	uxtb	r2, r3
    5a7e:	2308      	movs	r3, #8
    5a80:	18fb      	adds	r3, r7, r3
    5a82:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    5a84:	2308      	movs	r3, #8
    5a86:	18fb      	adds	r3, r7, r3
    5a88:	1dfa      	adds	r2, r7, #7
    5a8a:	7812      	ldrb	r2, [r2, #0]
    5a8c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    5a8e:	6839      	ldr	r1, [r7, #0]
    5a90:	2308      	movs	r3, #8
    5a92:	18fb      	adds	r3, r7, r3
    5a94:	2208      	movs	r2, #8
    5a96:	0018      	movs	r0, r3
    5a98:	4b1a      	ldr	r3, [pc, #104]	; (5b04 <connect+0x10c>)
    5a9a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    5a9c:	1dfb      	adds	r3, r7, #7
    5a9e:	781b      	ldrb	r3, [r3, #0]
    5aa0:	b25b      	sxtb	r3, r3
    5aa2:	4a17      	ldr	r2, [pc, #92]	; (5b00 <connect+0x108>)
    5aa4:	011b      	lsls	r3, r3, #4
    5aa6:	18d3      	adds	r3, r2, r3
    5aa8:	3306      	adds	r3, #6
    5aaa:	881b      	ldrh	r3, [r3, #0]
    5aac:	b29a      	uxth	r2, r3
    5aae:	2308      	movs	r3, #8
    5ab0:	18fb      	adds	r3, r7, r3
    5ab2:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    5ab4:	2317      	movs	r3, #23
    5ab6:	18fc      	adds	r4, r7, r3
    5ab8:	2308      	movs	r3, #8
    5aba:	18fa      	adds	r2, r7, r3
    5abc:	2316      	movs	r3, #22
    5abe:	18fb      	adds	r3, r7, r3
    5ac0:	7819      	ldrb	r1, [r3, #0]
    5ac2:	2300      	movs	r3, #0
    5ac4:	9302      	str	r3, [sp, #8]
    5ac6:	2300      	movs	r3, #0
    5ac8:	9301      	str	r3, [sp, #4]
    5aca:	2300      	movs	r3, #0
    5acc:	9300      	str	r3, [sp, #0]
    5ace:	230c      	movs	r3, #12
    5ad0:	2002      	movs	r0, #2
    5ad2:	4d0d      	ldr	r5, [pc, #52]	; (5b08 <connect+0x110>)
    5ad4:	47a8      	blx	r5
    5ad6:	0003      	movs	r3, r0
    5ad8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    5ada:	2317      	movs	r3, #23
    5adc:	18fb      	adds	r3, r7, r3
    5ade:	781b      	ldrb	r3, [r3, #0]
    5ae0:	b25b      	sxtb	r3, r3
    5ae2:	2b00      	cmp	r3, #0
    5ae4:	d003      	beq.n	5aee <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    5ae6:	2317      	movs	r3, #23
    5ae8:	18fb      	adds	r3, r7, r3
    5aea:	22f7      	movs	r2, #247	; 0xf7
    5aec:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    5aee:	2317      	movs	r3, #23
    5af0:	18fb      	adds	r3, r7, r3
    5af2:	781b      	ldrb	r3, [r3, #0]
    5af4:	b25b      	sxtb	r3, r3
}
    5af6:	0018      	movs	r0, r3
    5af8:	46bd      	mov	sp, r7
    5afa:	b006      	add	sp, #24
    5afc:	bdb0      	pop	{r4, r5, r7, pc}
    5afe:	46c0      	nop			; (mov r8, r8)
    5b00:	200005e4 	.word	0x200005e4
    5b04:	000013fd 	.word	0x000013fd
    5b08:	00001699 	.word	0x00001699

00005b0c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    5b0c:	b590      	push	{r4, r7, lr}
    5b0e:	b08f      	sub	sp, #60	; 0x3c
    5b10:	af04      	add	r7, sp, #16
    5b12:	0004      	movs	r4, r0
    5b14:	60b9      	str	r1, [r7, #8]
    5b16:	0010      	movs	r0, r2
    5b18:	0019      	movs	r1, r3
    5b1a:	230f      	movs	r3, #15
    5b1c:	18fb      	adds	r3, r7, r3
    5b1e:	1c22      	adds	r2, r4, #0
    5b20:	701a      	strb	r2, [r3, #0]
    5b22:	230c      	movs	r3, #12
    5b24:	18fb      	adds	r3, r7, r3
    5b26:	1c02      	adds	r2, r0, #0
    5b28:	801a      	strh	r2, [r3, #0]
    5b2a:	1dbb      	adds	r3, r7, #6
    5b2c:	1c0a      	adds	r2, r1, #0
    5b2e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5b30:	2326      	movs	r3, #38	; 0x26
    5b32:	18fb      	adds	r3, r7, r3
    5b34:	2206      	movs	r2, #6
    5b36:	4252      	negs	r2, r2
    5b38:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    5b3a:	230f      	movs	r3, #15
    5b3c:	18fb      	adds	r3, r7, r3
    5b3e:	781b      	ldrb	r3, [r3, #0]
    5b40:	2b7f      	cmp	r3, #127	; 0x7f
    5b42:	d900      	bls.n	5b46 <send+0x3a>
    5b44:	e087      	b.n	5c56 <send+0x14a>
    5b46:	68bb      	ldr	r3, [r7, #8]
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d100      	bne.n	5b4e <send+0x42>
    5b4c:	e083      	b.n	5c56 <send+0x14a>
    5b4e:	230c      	movs	r3, #12
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	881a      	ldrh	r2, [r3, #0]
    5b54:	23af      	movs	r3, #175	; 0xaf
    5b56:	00db      	lsls	r3, r3, #3
    5b58:	429a      	cmp	r2, r3
    5b5a:	d900      	bls.n	5b5e <send+0x52>
    5b5c:	e07b      	b.n	5c56 <send+0x14a>
    5b5e:	230f      	movs	r3, #15
    5b60:	18fb      	adds	r3, r7, r3
    5b62:	781b      	ldrb	r3, [r3, #0]
    5b64:	b25b      	sxtb	r3, r3
    5b66:	4a40      	ldr	r2, [pc, #256]	; (5c68 <send+0x15c>)
    5b68:	011b      	lsls	r3, r3, #4
    5b6a:	18d3      	adds	r3, r2, r3
    5b6c:	330a      	adds	r3, #10
    5b6e:	781b      	ldrb	r3, [r3, #0]
    5b70:	b2db      	uxtb	r3, r3
    5b72:	2b01      	cmp	r3, #1
    5b74:	d16f      	bne.n	5c56 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    5b76:	2323      	movs	r3, #35	; 0x23
    5b78:	18fb      	adds	r3, r7, r3
    5b7a:	2245      	movs	r2, #69	; 0x45
    5b7c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    5b7e:	2324      	movs	r3, #36	; 0x24
    5b80:	18fb      	adds	r3, r7, r3
    5b82:	2250      	movs	r2, #80	; 0x50
    5b84:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    5b86:	2310      	movs	r3, #16
    5b88:	18fb      	adds	r3, r7, r3
    5b8a:	220f      	movs	r2, #15
    5b8c:	18ba      	adds	r2, r7, r2
    5b8e:	7812      	ldrb	r2, [r2, #0]
    5b90:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    5b92:	2310      	movs	r3, #16
    5b94:	18fb      	adds	r3, r7, r3
    5b96:	220c      	movs	r2, #12
    5b98:	18ba      	adds	r2, r7, r2
    5b9a:	8812      	ldrh	r2, [r2, #0]
    5b9c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    5b9e:	230f      	movs	r3, #15
    5ba0:	18fb      	adds	r3, r7, r3
    5ba2:	781b      	ldrb	r3, [r3, #0]
    5ba4:	b25b      	sxtb	r3, r3
    5ba6:	4a30      	ldr	r2, [pc, #192]	; (5c68 <send+0x15c>)
    5ba8:	011b      	lsls	r3, r3, #4
    5baa:	18d3      	adds	r3, r2, r3
    5bac:	3306      	adds	r3, #6
    5bae:	881b      	ldrh	r3, [r3, #0]
    5bb0:	b29a      	uxth	r2, r3
    5bb2:	2310      	movs	r3, #16
    5bb4:	18fb      	adds	r3, r7, r3
    5bb6:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    5bb8:	230f      	movs	r3, #15
    5bba:	18fb      	adds	r3, r7, r3
    5bbc:	781b      	ldrb	r3, [r3, #0]
    5bbe:	b25b      	sxtb	r3, r3
    5bc0:	2b06      	cmp	r3, #6
    5bc2:	dd03      	ble.n	5bcc <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    5bc4:	2324      	movs	r3, #36	; 0x24
    5bc6:	18fb      	adds	r3, r7, r3
    5bc8:	2244      	movs	r2, #68	; 0x44
    5bca:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5bcc:	230f      	movs	r3, #15
    5bce:	18fb      	adds	r3, r7, r3
    5bd0:	781b      	ldrb	r3, [r3, #0]
    5bd2:	b25b      	sxtb	r3, r3
    5bd4:	4a24      	ldr	r2, [pc, #144]	; (5c68 <send+0x15c>)
    5bd6:	011b      	lsls	r3, r3, #4
    5bd8:	18d3      	adds	r3, r2, r3
    5bda:	330b      	adds	r3, #11
    5bdc:	781b      	ldrb	r3, [r3, #0]
    5bde:	b2db      	uxtb	r3, r3
    5be0:	001a      	movs	r2, r3
    5be2:	2301      	movs	r3, #1
    5be4:	4013      	ands	r3, r2
    5be6:	d00f      	beq.n	5c08 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    5be8:	2323      	movs	r3, #35	; 0x23
    5bea:	18fb      	adds	r3, r7, r3
    5bec:	224c      	movs	r2, #76	; 0x4c
    5bee:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    5bf0:	230f      	movs	r3, #15
    5bf2:	18fb      	adds	r3, r7, r3
    5bf4:	2200      	movs	r2, #0
    5bf6:	569a      	ldrsb	r2, [r3, r2]
    5bf8:	2324      	movs	r3, #36	; 0x24
    5bfa:	18fb      	adds	r3, r7, r3
    5bfc:	491a      	ldr	r1, [pc, #104]	; (5c68 <send+0x15c>)
    5bfe:	0112      	lsls	r2, r2, #4
    5c00:	188a      	adds	r2, r1, r2
    5c02:	3208      	adds	r2, #8
    5c04:	8812      	ldrh	r2, [r2, #0]
    5c06:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    5c08:	2323      	movs	r3, #35	; 0x23
    5c0a:	18fb      	adds	r3, r7, r3
    5c0c:	781b      	ldrb	r3, [r3, #0]
    5c0e:	2280      	movs	r2, #128	; 0x80
    5c10:	4252      	negs	r2, r2
    5c12:	4313      	orrs	r3, r2
    5c14:	b2d9      	uxtb	r1, r3
    5c16:	2310      	movs	r3, #16
    5c18:	18fa      	adds	r2, r7, r3
    5c1a:	2324      	movs	r3, #36	; 0x24
    5c1c:	18fb      	adds	r3, r7, r3
    5c1e:	881b      	ldrh	r3, [r3, #0]
    5c20:	9302      	str	r3, [sp, #8]
    5c22:	230c      	movs	r3, #12
    5c24:	18fb      	adds	r3, r7, r3
    5c26:	881b      	ldrh	r3, [r3, #0]
    5c28:	9301      	str	r3, [sp, #4]
    5c2a:	68bb      	ldr	r3, [r7, #8]
    5c2c:	9300      	str	r3, [sp, #0]
    5c2e:	2310      	movs	r3, #16
    5c30:	2002      	movs	r0, #2
    5c32:	4c0e      	ldr	r4, [pc, #56]	; (5c6c <send+0x160>)
    5c34:	47a0      	blx	r4
    5c36:	0003      	movs	r3, r0
    5c38:	001a      	movs	r2, r3
    5c3a:	2326      	movs	r3, #38	; 0x26
    5c3c:	18fb      	adds	r3, r7, r3
    5c3e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    5c40:	2326      	movs	r3, #38	; 0x26
    5c42:	18fb      	adds	r3, r7, r3
    5c44:	2200      	movs	r2, #0
    5c46:	5e9b      	ldrsh	r3, [r3, r2]
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d004      	beq.n	5c56 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    5c4c:	2326      	movs	r3, #38	; 0x26
    5c4e:	18fb      	adds	r3, r7, r3
    5c50:	220e      	movs	r2, #14
    5c52:	4252      	negs	r2, r2
    5c54:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    5c56:	2326      	movs	r3, #38	; 0x26
    5c58:	18fb      	adds	r3, r7, r3
    5c5a:	2200      	movs	r2, #0
    5c5c:	5e9b      	ldrsh	r3, [r3, r2]
}
    5c5e:	0018      	movs	r0, r3
    5c60:	46bd      	mov	sp, r7
    5c62:	b00b      	add	sp, #44	; 0x2c
    5c64:	bd90      	pop	{r4, r7, pc}
    5c66:	46c0      	nop			; (mov r8, r8)
    5c68:	200005e4 	.word	0x200005e4
    5c6c:	00001699 	.word	0x00001699

00005c70 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    5c70:	b590      	push	{r4, r7, lr}
    5c72:	b08d      	sub	sp, #52	; 0x34
    5c74:	af04      	add	r7, sp, #16
    5c76:	60b9      	str	r1, [r7, #8]
    5c78:	0011      	movs	r1, r2
    5c7a:	607b      	str	r3, [r7, #4]
    5c7c:	230f      	movs	r3, #15
    5c7e:	18fb      	adds	r3, r7, r3
    5c80:	1c02      	adds	r2, r0, #0
    5c82:	701a      	strb	r2, [r3, #0]
    5c84:	230c      	movs	r3, #12
    5c86:	18fb      	adds	r3, r7, r3
    5c88:	1c0a      	adds	r2, r1, #0
    5c8a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5c8c:	231e      	movs	r3, #30
    5c8e:	18fb      	adds	r3, r7, r3
    5c90:	2206      	movs	r2, #6
    5c92:	4252      	negs	r2, r2
    5c94:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    5c96:	230f      	movs	r3, #15
    5c98:	18fb      	adds	r3, r7, r3
    5c9a:	781b      	ldrb	r3, [r3, #0]
    5c9c:	2b7f      	cmp	r3, #127	; 0x7f
    5c9e:	d900      	bls.n	5ca2 <recv+0x32>
    5ca0:	e099      	b.n	5dd6 <recv+0x166>
    5ca2:	68bb      	ldr	r3, [r7, #8]
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d100      	bne.n	5caa <recv+0x3a>
    5ca8:	e095      	b.n	5dd6 <recv+0x166>
    5caa:	230c      	movs	r3, #12
    5cac:	18fb      	adds	r3, r7, r3
    5cae:	881b      	ldrh	r3, [r3, #0]
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	d100      	bne.n	5cb6 <recv+0x46>
    5cb4:	e08f      	b.n	5dd6 <recv+0x166>
    5cb6:	230f      	movs	r3, #15
    5cb8:	18fb      	adds	r3, r7, r3
    5cba:	781b      	ldrb	r3, [r3, #0]
    5cbc:	b25b      	sxtb	r3, r3
    5cbe:	4a4a      	ldr	r2, [pc, #296]	; (5de8 <recv+0x178>)
    5cc0:	011b      	lsls	r3, r3, #4
    5cc2:	18d3      	adds	r3, r2, r3
    5cc4:	330a      	adds	r3, #10
    5cc6:	781b      	ldrb	r3, [r3, #0]
    5cc8:	b2db      	uxtb	r3, r3
    5cca:	2b01      	cmp	r3, #1
    5ccc:	d000      	beq.n	5cd0 <recv+0x60>
    5cce:	e082      	b.n	5dd6 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    5cd0:	231e      	movs	r3, #30
    5cd2:	18fb      	adds	r3, r7, r3
    5cd4:	2200      	movs	r2, #0
    5cd6:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    5cd8:	230f      	movs	r3, #15
    5cda:	18fb      	adds	r3, r7, r3
    5cdc:	2200      	movs	r2, #0
    5cde:	569a      	ldrsb	r2, [r3, r2]
    5ce0:	4b41      	ldr	r3, [pc, #260]	; (5de8 <recv+0x178>)
    5ce2:	0112      	lsls	r2, r2, #4
    5ce4:	68b9      	ldr	r1, [r7, #8]
    5ce6:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    5ce8:	230f      	movs	r3, #15
    5cea:	18fb      	adds	r3, r7, r3
    5cec:	781b      	ldrb	r3, [r3, #0]
    5cee:	b25b      	sxtb	r3, r3
    5cf0:	4a3d      	ldr	r2, [pc, #244]	; (5de8 <recv+0x178>)
    5cf2:	011b      	lsls	r3, r3, #4
    5cf4:	18d3      	adds	r3, r2, r3
    5cf6:	3304      	adds	r3, #4
    5cf8:	220c      	movs	r2, #12
    5cfa:	18ba      	adds	r2, r7, r2
    5cfc:	8812      	ldrh	r2, [r2, #0]
    5cfe:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    5d00:	230f      	movs	r3, #15
    5d02:	18fb      	adds	r3, r7, r3
    5d04:	781b      	ldrb	r3, [r3, #0]
    5d06:	b25b      	sxtb	r3, r3
    5d08:	4a37      	ldr	r2, [pc, #220]	; (5de8 <recv+0x178>)
    5d0a:	011b      	lsls	r3, r3, #4
    5d0c:	18d3      	adds	r3, r2, r3
    5d0e:	330c      	adds	r3, #12
    5d10:	781b      	ldrb	r3, [r3, #0]
    5d12:	b2db      	uxtb	r3, r3
    5d14:	2b00      	cmp	r3, #0
    5d16:	d15e      	bne.n	5dd6 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    5d18:	231d      	movs	r3, #29
    5d1a:	18fb      	adds	r3, r7, r3
    5d1c:	2246      	movs	r2, #70	; 0x46
    5d1e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    5d20:	230f      	movs	r3, #15
    5d22:	18fb      	adds	r3, r7, r3
    5d24:	781b      	ldrb	r3, [r3, #0]
    5d26:	b25b      	sxtb	r3, r3
    5d28:	4a2f      	ldr	r2, [pc, #188]	; (5de8 <recv+0x178>)
    5d2a:	011b      	lsls	r3, r3, #4
    5d2c:	18d3      	adds	r3, r2, r3
    5d2e:	330c      	adds	r3, #12
    5d30:	2201      	movs	r2, #1
    5d32:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5d34:	230f      	movs	r3, #15
    5d36:	18fb      	adds	r3, r7, r3
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	b25b      	sxtb	r3, r3
    5d3c:	4a2a      	ldr	r2, [pc, #168]	; (5de8 <recv+0x178>)
    5d3e:	011b      	lsls	r3, r3, #4
    5d40:	18d3      	adds	r3, r2, r3
    5d42:	330b      	adds	r3, #11
    5d44:	781b      	ldrb	r3, [r3, #0]
    5d46:	b2db      	uxtb	r3, r3
    5d48:	001a      	movs	r2, r3
    5d4a:	2301      	movs	r3, #1
    5d4c:	4013      	ands	r3, r2
    5d4e:	d003      	beq.n	5d58 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    5d50:	231d      	movs	r3, #29
    5d52:	18fb      	adds	r3, r7, r3
    5d54:	224d      	movs	r2, #77	; 0x4d
    5d56:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	d105      	bne.n	5d6a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    5d5e:	2314      	movs	r3, #20
    5d60:	18fb      	adds	r3, r7, r3
    5d62:	2201      	movs	r2, #1
    5d64:	4252      	negs	r2, r2
    5d66:	601a      	str	r2, [r3, #0]
    5d68:	e003      	b.n	5d72 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    5d6a:	2314      	movs	r3, #20
    5d6c:	18fb      	adds	r3, r7, r3
    5d6e:	687a      	ldr	r2, [r7, #4]
    5d70:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    5d72:	2314      	movs	r3, #20
    5d74:	18fb      	adds	r3, r7, r3
    5d76:	220f      	movs	r2, #15
    5d78:	18ba      	adds	r2, r7, r2
    5d7a:	7812      	ldrb	r2, [r2, #0]
    5d7c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    5d7e:	230f      	movs	r3, #15
    5d80:	18fb      	adds	r3, r7, r3
    5d82:	781b      	ldrb	r3, [r3, #0]
    5d84:	b25b      	sxtb	r3, r3
    5d86:	4a18      	ldr	r2, [pc, #96]	; (5de8 <recv+0x178>)
    5d88:	011b      	lsls	r3, r3, #4
    5d8a:	18d3      	adds	r3, r2, r3
    5d8c:	3306      	adds	r3, #6
    5d8e:	881b      	ldrh	r3, [r3, #0]
    5d90:	b29a      	uxth	r2, r3
    5d92:	2314      	movs	r3, #20
    5d94:	18fb      	adds	r3, r7, r3
    5d96:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5d98:	2314      	movs	r3, #20
    5d9a:	18fa      	adds	r2, r7, r3
    5d9c:	231d      	movs	r3, #29
    5d9e:	18fb      	adds	r3, r7, r3
    5da0:	7819      	ldrb	r1, [r3, #0]
    5da2:	2300      	movs	r3, #0
    5da4:	9302      	str	r3, [sp, #8]
    5da6:	2300      	movs	r3, #0
    5da8:	9301      	str	r3, [sp, #4]
    5daa:	2300      	movs	r3, #0
    5dac:	9300      	str	r3, [sp, #0]
    5dae:	2308      	movs	r3, #8
    5db0:	2002      	movs	r0, #2
    5db2:	4c0e      	ldr	r4, [pc, #56]	; (5dec <recv+0x17c>)
    5db4:	47a0      	blx	r4
    5db6:	0003      	movs	r3, r0
    5db8:	001a      	movs	r2, r3
    5dba:	231e      	movs	r3, #30
    5dbc:	18fb      	adds	r3, r7, r3
    5dbe:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    5dc0:	231e      	movs	r3, #30
    5dc2:	18fb      	adds	r3, r7, r3
    5dc4:	2200      	movs	r2, #0
    5dc6:	5e9b      	ldrsh	r3, [r3, r2]
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d004      	beq.n	5dd6 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    5dcc:	231e      	movs	r3, #30
    5dce:	18fb      	adds	r3, r7, r3
    5dd0:	220e      	movs	r2, #14
    5dd2:	4252      	negs	r2, r2
    5dd4:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    5dd6:	231e      	movs	r3, #30
    5dd8:	18fb      	adds	r3, r7, r3
    5dda:	2200      	movs	r2, #0
    5ddc:	5e9b      	ldrsh	r3, [r3, r2]
}
    5dde:	0018      	movs	r0, r3
    5de0:	46bd      	mov	sp, r7
    5de2:	b009      	add	sp, #36	; 0x24
    5de4:	bd90      	pop	{r4, r7, pc}
    5de6:	46c0      	nop			; (mov r8, r8)
    5de8:	200005e4 	.word	0x200005e4
    5dec:	00001699 	.word	0x00001699

00005df0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    5df0:	b5b0      	push	{r4, r5, r7, lr}
    5df2:	b088      	sub	sp, #32
    5df4:	af04      	add	r7, sp, #16
    5df6:	0002      	movs	r2, r0
    5df8:	1dfb      	adds	r3, r7, #7
    5dfa:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    5dfc:	230f      	movs	r3, #15
    5dfe:	18fb      	adds	r3, r7, r3
    5e00:	22fa      	movs	r2, #250	; 0xfa
    5e02:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    5e04:	4b42      	ldr	r3, [pc, #264]	; (5f10 <close+0x120>)
    5e06:	0018      	movs	r0, r3
    5e08:	4b42      	ldr	r3, [pc, #264]	; (5f14 <close+0x124>)
    5e0a:	4798      	blx	r3
    5e0c:	1dfb      	adds	r3, r7, #7
    5e0e:	2200      	movs	r2, #0
    5e10:	569a      	ldrsb	r2, [r3, r2]
    5e12:	4b41      	ldr	r3, [pc, #260]	; (5f18 <close+0x128>)
    5e14:	0011      	movs	r1, r2
    5e16:	0018      	movs	r0, r3
    5e18:	4b3e      	ldr	r3, [pc, #248]	; (5f14 <close+0x124>)
    5e1a:	4798      	blx	r3
    5e1c:	200d      	movs	r0, #13
    5e1e:	4b3f      	ldr	r3, [pc, #252]	; (5f1c <close+0x12c>)
    5e20:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    5e22:	1dfb      	adds	r3, r7, #7
    5e24:	781b      	ldrb	r3, [r3, #0]
    5e26:	2b7f      	cmp	r3, #127	; 0x7f
    5e28:	d86a      	bhi.n	5f00 <close+0x110>
    5e2a:	1dfb      	adds	r3, r7, #7
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	b25b      	sxtb	r3, r3
    5e30:	4a3b      	ldr	r2, [pc, #236]	; (5f20 <close+0x130>)
    5e32:	011b      	lsls	r3, r3, #4
    5e34:	18d3      	adds	r3, r2, r3
    5e36:	330a      	adds	r3, #10
    5e38:	781b      	ldrb	r3, [r3, #0]
    5e3a:	b2db      	uxtb	r3, r3
    5e3c:	2b01      	cmp	r3, #1
    5e3e:	d15f      	bne.n	5f00 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    5e40:	230e      	movs	r3, #14
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	2249      	movs	r2, #73	; 0x49
    5e46:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    5e48:	2308      	movs	r3, #8
    5e4a:	18fb      	adds	r3, r7, r3
    5e4c:	1dfa      	adds	r2, r7, #7
    5e4e:	7812      	ldrb	r2, [r2, #0]
    5e50:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    5e52:	1dfb      	adds	r3, r7, #7
    5e54:	781b      	ldrb	r3, [r3, #0]
    5e56:	b25b      	sxtb	r3, r3
    5e58:	4a31      	ldr	r2, [pc, #196]	; (5f20 <close+0x130>)
    5e5a:	011b      	lsls	r3, r3, #4
    5e5c:	18d3      	adds	r3, r2, r3
    5e5e:	3306      	adds	r3, #6
    5e60:	881b      	ldrh	r3, [r3, #0]
    5e62:	b29a      	uxth	r2, r3
    5e64:	2308      	movs	r3, #8
    5e66:	18fb      	adds	r3, r7, r3
    5e68:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    5e6a:	1dfb      	adds	r3, r7, #7
    5e6c:	781b      	ldrb	r3, [r3, #0]
    5e6e:	b25b      	sxtb	r3, r3
    5e70:	4a2b      	ldr	r2, [pc, #172]	; (5f20 <close+0x130>)
    5e72:	011b      	lsls	r3, r3, #4
    5e74:	18d3      	adds	r3, r2, r3
    5e76:	330a      	adds	r3, #10
    5e78:	2200      	movs	r2, #0
    5e7a:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5e7c:	1dfb      	adds	r3, r7, #7
    5e7e:	781b      	ldrb	r3, [r3, #0]
    5e80:	b25b      	sxtb	r3, r3
    5e82:	4a27      	ldr	r2, [pc, #156]	; (5f20 <close+0x130>)
    5e84:	011b      	lsls	r3, r3, #4
    5e86:	18d3      	adds	r3, r2, r3
    5e88:	3306      	adds	r3, #6
    5e8a:	2200      	movs	r2, #0
    5e8c:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5e8e:	1dfb      	adds	r3, r7, #7
    5e90:	781b      	ldrb	r3, [r3, #0]
    5e92:	b25b      	sxtb	r3, r3
    5e94:	4a22      	ldr	r2, [pc, #136]	; (5f20 <close+0x130>)
    5e96:	011b      	lsls	r3, r3, #4
    5e98:	18d3      	adds	r3, r2, r3
    5e9a:	330b      	adds	r3, #11
    5e9c:	781b      	ldrb	r3, [r3, #0]
    5e9e:	b2db      	uxtb	r3, r3
    5ea0:	001a      	movs	r2, r3
    5ea2:	2301      	movs	r3, #1
    5ea4:	4013      	ands	r3, r2
    5ea6:	d003      	beq.n	5eb0 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5ea8:	230e      	movs	r3, #14
    5eaa:	18fb      	adds	r3, r7, r3
    5eac:	224e      	movs	r2, #78	; 0x4e
    5eae:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5eb0:	230f      	movs	r3, #15
    5eb2:	18fc      	adds	r4, r7, r3
    5eb4:	2308      	movs	r3, #8
    5eb6:	18fa      	adds	r2, r7, r3
    5eb8:	230e      	movs	r3, #14
    5eba:	18fb      	adds	r3, r7, r3
    5ebc:	7819      	ldrb	r1, [r3, #0]
    5ebe:	2300      	movs	r3, #0
    5ec0:	9302      	str	r3, [sp, #8]
    5ec2:	2300      	movs	r3, #0
    5ec4:	9301      	str	r3, [sp, #4]
    5ec6:	2300      	movs	r3, #0
    5ec8:	9300      	str	r3, [sp, #0]
    5eca:	2304      	movs	r3, #4
    5ecc:	2002      	movs	r0, #2
    5ece:	4d15      	ldr	r5, [pc, #84]	; (5f24 <close+0x134>)
    5ed0:	47a8      	blx	r5
    5ed2:	0003      	movs	r3, r0
    5ed4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    5ed6:	230f      	movs	r3, #15
    5ed8:	18fb      	adds	r3, r7, r3
    5eda:	781b      	ldrb	r3, [r3, #0]
    5edc:	b25b      	sxtb	r3, r3
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d003      	beq.n	5eea <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    5ee2:	230f      	movs	r3, #15
    5ee4:	18fb      	adds	r3, r7, r3
    5ee6:	22f7      	movs	r2, #247	; 0xf7
    5ee8:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    5eea:	1dfb      	adds	r3, r7, #7
    5eec:	781b      	ldrb	r3, [r3, #0]
    5eee:	b25b      	sxtb	r3, r3
    5ef0:	011a      	lsls	r2, r3, #4
    5ef2:	4b0b      	ldr	r3, [pc, #44]	; (5f20 <close+0x130>)
    5ef4:	18d3      	adds	r3, r2, r3
    5ef6:	2210      	movs	r2, #16
    5ef8:	2100      	movs	r1, #0
    5efa:	0018      	movs	r0, r3
    5efc:	4b0a      	ldr	r3, [pc, #40]	; (5f28 <close+0x138>)
    5efe:	4798      	blx	r3
	}
	return s8Ret;
    5f00:	230f      	movs	r3, #15
    5f02:	18fb      	adds	r3, r7, r3
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	b25b      	sxtb	r3, r3
}
    5f08:	0018      	movs	r0, r3
    5f0a:	46bd      	mov	sp, r7
    5f0c:	b004      	add	sp, #16
    5f0e:	bdb0      	pop	{r4, r5, r7, pc}
    5f10:	000138f4 	.word	0x000138f4
    5f14:	0000e7e5 	.word	0x0000e7e5
    5f18:	00013930 	.word	0x00013930
    5f1c:	0000e819 	.word	0x0000e819
    5f20:	200005e4 	.word	0x200005e4
    5f24:	00001699 	.word	0x00001699
    5f28:	00001439 	.word	0x00001439

00005f2c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b086      	sub	sp, #24
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    5f34:	2300      	movs	r3, #0
    5f36:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    5f38:	2317      	movs	r3, #23
    5f3a:	18fb      	adds	r3, r7, r3
    5f3c:	2200      	movs	r2, #0
    5f3e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    5f40:	2316      	movs	r3, #22
    5f42:	18fb      	adds	r3, r7, r3
    5f44:	2200      	movs	r2, #0
    5f46:	701a      	strb	r2, [r3, #0]
    5f48:	e060      	b.n	600c <nmi_inet_addr+0xe0>
	{
		j = 0;
    5f4a:	2315      	movs	r3, #21
    5f4c:	18fb      	adds	r3, r7, r3
    5f4e:	2200      	movs	r2, #0
    5f50:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    5f52:	2314      	movs	r3, #20
    5f54:	18fb      	adds	r3, r7, r3
    5f56:	687a      	ldr	r2, [r7, #4]
    5f58:	7812      	ldrb	r2, [r2, #0]
    5f5a:	701a      	strb	r2, [r3, #0]
			++j;
    5f5c:	2315      	movs	r3, #21
    5f5e:	18fb      	adds	r3, r7, r3
    5f60:	2215      	movs	r2, #21
    5f62:	18ba      	adds	r2, r7, r2
    5f64:	7812      	ldrb	r2, [r2, #0]
    5f66:	3201      	adds	r2, #1
    5f68:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    5f6a:	2315      	movs	r3, #21
    5f6c:	18fb      	adds	r3, r7, r3
    5f6e:	781b      	ldrb	r3, [r3, #0]
    5f70:	2b04      	cmp	r3, #4
    5f72:	d901      	bls.n	5f78 <nmi_inet_addr+0x4c>
			{
				return 0;
    5f74:	2300      	movs	r3, #0
    5f76:	e057      	b.n	6028 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    5f78:	2314      	movs	r3, #20
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	781b      	ldrb	r3, [r3, #0]
    5f7e:	2b2e      	cmp	r3, #46	; 0x2e
    5f80:	d004      	beq.n	5f8c <nmi_inet_addr+0x60>
    5f82:	2314      	movs	r3, #20
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	2b00      	cmp	r3, #0
    5f8a:	d10d      	bne.n	5fa8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    5f8c:	2316      	movs	r3, #22
    5f8e:	18fb      	adds	r3, r7, r3
    5f90:	781b      	ldrb	r3, [r3, #0]
    5f92:	220c      	movs	r2, #12
    5f94:	18ba      	adds	r2, r7, r2
    5f96:	2117      	movs	r1, #23
    5f98:	1879      	adds	r1, r7, r1
    5f9a:	7809      	ldrb	r1, [r1, #0]
    5f9c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    5f9e:	2317      	movs	r3, #23
    5fa0:	18fb      	adds	r3, r7, r3
    5fa2:	2200      	movs	r2, #0
    5fa4:	701a      	strb	r2, [r3, #0]
    5fa6:	e01d      	b.n	5fe4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    5fa8:	2314      	movs	r3, #20
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	2b2f      	cmp	r3, #47	; 0x2f
    5fb0:	d916      	bls.n	5fe0 <nmi_inet_addr+0xb4>
    5fb2:	2314      	movs	r3, #20
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	2b39      	cmp	r3, #57	; 0x39
    5fba:	d811      	bhi.n	5fe0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    5fbc:	2317      	movs	r3, #23
    5fbe:	18fb      	adds	r3, r7, r3
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	1c1a      	adds	r2, r3, #0
    5fc4:	0092      	lsls	r2, r2, #2
    5fc6:	18d3      	adds	r3, r2, r3
    5fc8:	18db      	adds	r3, r3, r3
    5fca:	b2da      	uxtb	r2, r3
    5fcc:	2314      	movs	r3, #20
    5fce:	18fb      	adds	r3, r7, r3
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	18d3      	adds	r3, r2, r3
    5fd4:	b2da      	uxtb	r2, r3
    5fd6:	2317      	movs	r3, #23
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	3a30      	subs	r2, #48	; 0x30
    5fdc:	701a      	strb	r2, [r3, #0]
    5fde:	e001      	b.n	5fe4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    5fe0:	2300      	movs	r3, #0
    5fe2:	e021      	b.n	6028 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    5fe4:	687b      	ldr	r3, [r7, #4]
    5fe6:	3301      	adds	r3, #1
    5fe8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    5fea:	2314      	movs	r3, #20
    5fec:	18fb      	adds	r3, r7, r3
    5fee:	781b      	ldrb	r3, [r3, #0]
    5ff0:	2b2e      	cmp	r3, #46	; 0x2e
    5ff2:	d004      	beq.n	5ffe <nmi_inet_addr+0xd2>
    5ff4:	2314      	movs	r3, #20
    5ff6:	18fb      	adds	r3, r7, r3
    5ff8:	781b      	ldrb	r3, [r3, #0]
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d1a9      	bne.n	5f52 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    5ffe:	2316      	movs	r3, #22
    6000:	18fb      	adds	r3, r7, r3
    6002:	2216      	movs	r2, #22
    6004:	18ba      	adds	r2, r7, r2
    6006:	7812      	ldrb	r2, [r2, #0]
    6008:	3201      	adds	r2, #1
    600a:	701a      	strb	r2, [r3, #0]
    600c:	2316      	movs	r3, #22
    600e:	18fb      	adds	r3, r7, r3
    6010:	781b      	ldrb	r3, [r3, #0]
    6012:	2b03      	cmp	r3, #3
    6014:	d999      	bls.n	5f4a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    6016:	230c      	movs	r3, #12
    6018:	18f9      	adds	r1, r7, r3
    601a:	2310      	movs	r3, #16
    601c:	18fb      	adds	r3, r7, r3
    601e:	2204      	movs	r2, #4
    6020:	0018      	movs	r0, r3
    6022:	4b03      	ldr	r3, [pc, #12]	; (6030 <nmi_inet_addr+0x104>)
    6024:	4798      	blx	r3
	return u32IP;
    6026:	693b      	ldr	r3, [r7, #16]
}
    6028:	0018      	movs	r0, r3
    602a:	46bd      	mov	sp, r7
    602c:	b006      	add	sp, #24
    602e:	bd80      	pop	{r7, pc}
    6030:	000013fd 	.word	0x000013fd

00006034 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    6034:	b5b0      	push	{r4, r5, r7, lr}
    6036:	b088      	sub	sp, #32
    6038:	af04      	add	r7, sp, #16
    603a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    603c:	230f      	movs	r3, #15
    603e:	18fb      	adds	r3, r7, r3
    6040:	22fa      	movs	r2, #250	; 0xfa
    6042:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    6044:	687b      	ldr	r3, [r7, #4]
    6046:	0018      	movs	r0, r3
    6048:	4b14      	ldr	r3, [pc, #80]	; (609c <gethostbyname+0x68>)
    604a:	4798      	blx	r3
    604c:	0003      	movs	r3, r0
    604e:	001a      	movs	r2, r3
    6050:	230e      	movs	r3, #14
    6052:	18fb      	adds	r3, r7, r3
    6054:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    6056:	230e      	movs	r3, #14
    6058:	18fb      	adds	r3, r7, r3
    605a:	781b      	ldrb	r3, [r3, #0]
    605c:	2b40      	cmp	r3, #64	; 0x40
    605e:	d815      	bhi.n	608c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    6060:	230e      	movs	r3, #14
    6062:	18fb      	adds	r3, r7, r3
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	b29b      	uxth	r3, r3
    6068:	3301      	adds	r3, #1
    606a:	b299      	uxth	r1, r3
    606c:	230f      	movs	r3, #15
    606e:	18fc      	adds	r4, r7, r3
    6070:	687a      	ldr	r2, [r7, #4]
    6072:	2300      	movs	r3, #0
    6074:	9302      	str	r3, [sp, #8]
    6076:	2300      	movs	r3, #0
    6078:	9301      	str	r3, [sp, #4]
    607a:	2300      	movs	r3, #0
    607c:	9300      	str	r3, [sp, #0]
    607e:	000b      	movs	r3, r1
    6080:	214a      	movs	r1, #74	; 0x4a
    6082:	2002      	movs	r0, #2
    6084:	4d06      	ldr	r5, [pc, #24]	; (60a0 <gethostbyname+0x6c>)
    6086:	47a8      	blx	r5
    6088:	0003      	movs	r3, r0
    608a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    608c:	230f      	movs	r3, #15
    608e:	18fb      	adds	r3, r7, r3
    6090:	781b      	ldrb	r3, [r3, #0]
    6092:	b25b      	sxtb	r3, r3
}
    6094:	0018      	movs	r0, r3
    6096:	46bd      	mov	sp, r7
    6098:	b004      	add	sp, #16
    609a:	bdb0      	pop	{r4, r5, r7, pc}
    609c:	00001477 	.word	0x00001477
    60a0:	00001699 	.word	0x00001699

000060a4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    60a4:	b580      	push	{r7, lr}
    60a6:	b082      	sub	sp, #8
    60a8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    60aa:	003b      	movs	r3, r7
    60ac:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    60ae:	687b      	ldr	r3, [r7, #4]
    60b0:	22b9      	movs	r2, #185	; 0xb9
    60b2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    60b4:	4b13      	ldr	r3, [pc, #76]	; (6104 <spi_flash_enter_low_power_mode+0x60>)
    60b6:	2100      	movs	r1, #0
    60b8:	0018      	movs	r0, r3
    60ba:	4b13      	ldr	r3, [pc, #76]	; (6108 <spi_flash_enter_low_power_mode+0x64>)
    60bc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    60be:	687b      	ldr	r3, [r7, #4]
    60c0:	781b      	ldrb	r3, [r3, #0]
    60c2:	001a      	movs	r2, r3
    60c4:	4b11      	ldr	r3, [pc, #68]	; (610c <spi_flash_enter_low_power_mode+0x68>)
    60c6:	0011      	movs	r1, r2
    60c8:	0018      	movs	r0, r3
    60ca:	4b0f      	ldr	r3, [pc, #60]	; (6108 <spi_flash_enter_low_power_mode+0x64>)
    60cc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    60ce:	4b10      	ldr	r3, [pc, #64]	; (6110 <spi_flash_enter_low_power_mode+0x6c>)
    60d0:	2101      	movs	r1, #1
    60d2:	0018      	movs	r0, r3
    60d4:	4b0c      	ldr	r3, [pc, #48]	; (6108 <spi_flash_enter_low_power_mode+0x64>)
    60d6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    60d8:	4b0e      	ldr	r3, [pc, #56]	; (6114 <spi_flash_enter_low_power_mode+0x70>)
    60da:	2100      	movs	r1, #0
    60dc:	0018      	movs	r0, r3
    60de:	4b0a      	ldr	r3, [pc, #40]	; (6108 <spi_flash_enter_low_power_mode+0x64>)
    60e0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    60e2:	4b0d      	ldr	r3, [pc, #52]	; (6118 <spi_flash_enter_low_power_mode+0x74>)
    60e4:	2181      	movs	r1, #129	; 0x81
    60e6:	0018      	movs	r0, r3
    60e8:	4b07      	ldr	r3, [pc, #28]	; (6108 <spi_flash_enter_low_power_mode+0x64>)
    60ea:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    60ec:	46c0      	nop			; (mov r8, r8)
    60ee:	4b0b      	ldr	r3, [pc, #44]	; (611c <spi_flash_enter_low_power_mode+0x78>)
    60f0:	0018      	movs	r0, r3
    60f2:	4b0b      	ldr	r3, [pc, #44]	; (6120 <spi_flash_enter_low_power_mode+0x7c>)
    60f4:	4798      	blx	r3
    60f6:	0003      	movs	r3, r0
    60f8:	2b01      	cmp	r3, #1
    60fa:	d1f8      	bne.n	60ee <spi_flash_enter_low_power_mode+0x4a>
}
    60fc:	46c0      	nop			; (mov r8, r8)
    60fe:	46bd      	mov	sp, r7
    6100:	b002      	add	sp, #8
    6102:	bd80      	pop	{r7, pc}
    6104:	00010208 	.word	0x00010208
    6108:	00003499 	.word	0x00003499
    610c:	0001020c 	.word	0x0001020c
    6110:	00010214 	.word	0x00010214
    6114:	0001021c 	.word	0x0001021c
    6118:	00010204 	.word	0x00010204
    611c:	00010218 	.word	0x00010218
    6120:	00003455 	.word	0x00003455

00006124 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    6124:	b580      	push	{r7, lr}
    6126:	b082      	sub	sp, #8
    6128:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    612a:	003b      	movs	r3, r7
    612c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	22ab      	movs	r2, #171	; 0xab
    6132:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    6134:	4b13      	ldr	r3, [pc, #76]	; (6184 <spi_flash_leave_low_power_mode+0x60>)
    6136:	2100      	movs	r1, #0
    6138:	0018      	movs	r0, r3
    613a:	4b13      	ldr	r3, [pc, #76]	; (6188 <spi_flash_leave_low_power_mode+0x64>)
    613c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    613e:	687b      	ldr	r3, [r7, #4]
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	001a      	movs	r2, r3
    6144:	4b11      	ldr	r3, [pc, #68]	; (618c <spi_flash_leave_low_power_mode+0x68>)
    6146:	0011      	movs	r1, r2
    6148:	0018      	movs	r0, r3
    614a:	4b0f      	ldr	r3, [pc, #60]	; (6188 <spi_flash_leave_low_power_mode+0x64>)
    614c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    614e:	4b10      	ldr	r3, [pc, #64]	; (6190 <spi_flash_leave_low_power_mode+0x6c>)
    6150:	2101      	movs	r1, #1
    6152:	0018      	movs	r0, r3
    6154:	4b0c      	ldr	r3, [pc, #48]	; (6188 <spi_flash_leave_low_power_mode+0x64>)
    6156:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    6158:	4b0e      	ldr	r3, [pc, #56]	; (6194 <spi_flash_leave_low_power_mode+0x70>)
    615a:	2100      	movs	r1, #0
    615c:	0018      	movs	r0, r3
    615e:	4b0a      	ldr	r3, [pc, #40]	; (6188 <spi_flash_leave_low_power_mode+0x64>)
    6160:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    6162:	4b0d      	ldr	r3, [pc, #52]	; (6198 <spi_flash_leave_low_power_mode+0x74>)
    6164:	2181      	movs	r1, #129	; 0x81
    6166:	0018      	movs	r0, r3
    6168:	4b07      	ldr	r3, [pc, #28]	; (6188 <spi_flash_leave_low_power_mode+0x64>)
    616a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    616c:	46c0      	nop			; (mov r8, r8)
    616e:	4b0b      	ldr	r3, [pc, #44]	; (619c <spi_flash_leave_low_power_mode+0x78>)
    6170:	0018      	movs	r0, r3
    6172:	4b0b      	ldr	r3, [pc, #44]	; (61a0 <spi_flash_leave_low_power_mode+0x7c>)
    6174:	4798      	blx	r3
    6176:	0003      	movs	r3, r0
    6178:	2b01      	cmp	r3, #1
    617a:	d1f8      	bne.n	616e <spi_flash_leave_low_power_mode+0x4a>
}
    617c:	46c0      	nop			; (mov r8, r8)
    617e:	46bd      	mov	sp, r7
    6180:	b002      	add	sp, #8
    6182:	bd80      	pop	{r7, pc}
    6184:	00010208 	.word	0x00010208
    6188:	00003499 	.word	0x00003499
    618c:	0001020c 	.word	0x0001020c
    6190:	00010214 	.word	0x00010214
    6194:	0001021c 	.word	0x0001021c
    6198:	00010204 	.word	0x00010204
    619c:	00010218 	.word	0x00010218
    61a0:	00003455 	.word	0x00003455

000061a4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    61a4:	b590      	push	{r4, r7, lr}
    61a6:	b085      	sub	sp, #20
    61a8:	af00      	add	r7, sp, #0
    61aa:	0002      	movs	r2, r0
    61ac:	1dfb      	adds	r3, r7, #7
    61ae:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    61b0:	230f      	movs	r3, #15
    61b2:	18fb      	adds	r3, r7, r3
    61b4:	2200      	movs	r2, #0
    61b6:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    61b8:	4b24      	ldr	r3, [pc, #144]	; (624c <spi_flash_enable+0xa8>)
    61ba:	4798      	blx	r3
    61bc:	0003      	movs	r3, r0
    61be:	051b      	lsls	r3, r3, #20
    61c0:	0d1b      	lsrs	r3, r3, #20
    61c2:	4a23      	ldr	r2, [pc, #140]	; (6250 <spi_flash_enable+0xac>)
    61c4:	4293      	cmp	r3, r2
    61c6:	d938      	bls.n	623a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    61c8:	230f      	movs	r3, #15
    61ca:	18fc      	adds	r4, r7, r3
    61cc:	2308      	movs	r3, #8
    61ce:	18fb      	adds	r3, r7, r3
    61d0:	4a20      	ldr	r2, [pc, #128]	; (6254 <spi_flash_enable+0xb0>)
    61d2:	0019      	movs	r1, r3
    61d4:	0010      	movs	r0, r2
    61d6:	4b20      	ldr	r3, [pc, #128]	; (6258 <spi_flash_enable+0xb4>)
    61d8:	4798      	blx	r3
    61da:	0003      	movs	r3, r0
    61dc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    61de:	230f      	movs	r3, #15
    61e0:	18fb      	adds	r3, r7, r3
    61e2:	781b      	ldrb	r3, [r3, #0]
    61e4:	b25b      	sxtb	r3, r3
    61e6:	2b00      	cmp	r3, #0
    61e8:	d126      	bne.n	6238 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    61ea:	68bb      	ldr	r3, [r7, #8]
    61ec:	4a1b      	ldr	r2, [pc, #108]	; (625c <spi_flash_enable+0xb8>)
    61ee:	4013      	ands	r3, r2
    61f0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    61f2:	68bb      	ldr	r3, [r7, #8]
    61f4:	4a1a      	ldr	r2, [pc, #104]	; (6260 <spi_flash_enable+0xbc>)
    61f6:	4313      	orrs	r3, r2
    61f8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    61fa:	68bb      	ldr	r3, [r7, #8]
    61fc:	4a15      	ldr	r2, [pc, #84]	; (6254 <spi_flash_enable+0xb0>)
    61fe:	0019      	movs	r1, r3
    6200:	0010      	movs	r0, r2
    6202:	4b18      	ldr	r3, [pc, #96]	; (6264 <spi_flash_enable+0xc0>)
    6204:	4798      	blx	r3
		if(enable) {
    6206:	1dfb      	adds	r3, r7, #7
    6208:	781b      	ldrb	r3, [r3, #0]
    620a:	2b00      	cmp	r3, #0
    620c:	d002      	beq.n	6214 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    620e:	4b16      	ldr	r3, [pc, #88]	; (6268 <spi_flash_enable+0xc4>)
    6210:	4798      	blx	r3
    6212:	e001      	b.n	6218 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    6214:	4b15      	ldr	r3, [pc, #84]	; (626c <spi_flash_enable+0xc8>)
    6216:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    6218:	68bb      	ldr	r3, [r7, #8]
    621a:	4a10      	ldr	r2, [pc, #64]	; (625c <spi_flash_enable+0xb8>)
    621c:	4013      	ands	r3, r2
    621e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    6220:	68bb      	ldr	r3, [r7, #8]
    6222:	2280      	movs	r2, #128	; 0x80
    6224:	0252      	lsls	r2, r2, #9
    6226:	4313      	orrs	r3, r2
    6228:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    622a:	68bb      	ldr	r3, [r7, #8]
    622c:	4a09      	ldr	r2, [pc, #36]	; (6254 <spi_flash_enable+0xb0>)
    622e:	0019      	movs	r1, r3
    6230:	0010      	movs	r0, r2
    6232:	4b0c      	ldr	r3, [pc, #48]	; (6264 <spi_flash_enable+0xc0>)
    6234:	4798      	blx	r3
    6236:	e000      	b.n	623a <spi_flash_enable+0x96>
			goto ERR1;
    6238:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    623a:	230f      	movs	r3, #15
    623c:	18fb      	adds	r3, r7, r3
    623e:	781b      	ldrb	r3, [r3, #0]
    6240:	b25b      	sxtb	r3, r3
}
    6242:	0018      	movs	r0, r3
    6244:	46bd      	mov	sp, r7
    6246:	b005      	add	sp, #20
    6248:	bd90      	pop	{r4, r7, pc}
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	00002d79 	.word	0x00002d79
    6250:	0000039f 	.word	0x0000039f
    6254:	00001410 	.word	0x00001410
    6258:	00003475 	.word	0x00003475
    625c:	f8888fff 	.word	0xf8888fff
    6260:	01111000 	.word	0x01111000
    6264:	00003499 	.word	0x00003499
    6268:	00006125 	.word	0x00006125
    626c:	000060a5 	.word	0x000060a5

00006270 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    6270:	b580      	push	{r7, lr}
    6272:	b084      	sub	sp, #16
    6274:	af00      	add	r7, sp, #0
    6276:	0002      	movs	r2, r0
    6278:	1dfb      	adds	r3, r7, #7
    627a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    627c:	230f      	movs	r3, #15
    627e:	18fb      	adds	r3, r7, r3
    6280:	1dfa      	adds	r2, r7, #7
    6282:	7812      	ldrb	r2, [r2, #0]
    6284:	0952      	lsrs	r2, r2, #5
    6286:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    6288:	230f      	movs	r3, #15
    628a:	18fb      	adds	r3, r7, r3
    628c:	781b      	ldrb	r3, [r3, #0]
    628e:	2b00      	cmp	r3, #0
    6290:	d10c      	bne.n	62ac <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6292:	4b09      	ldr	r3, [pc, #36]	; (62b8 <_extint_get_eic_from_channel+0x48>)
    6294:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    6296:	230f      	movs	r3, #15
    6298:	18fb      	adds	r3, r7, r3
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	009b      	lsls	r3, r3, #2
    629e:	2210      	movs	r2, #16
    62a0:	4694      	mov	ip, r2
    62a2:	44bc      	add	ip, r7
    62a4:	4463      	add	r3, ip
    62a6:	3b08      	subs	r3, #8
    62a8:	681b      	ldr	r3, [r3, #0]
    62aa:	e000      	b.n	62ae <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    62ac:	2300      	movs	r3, #0
	}
}
    62ae:	0018      	movs	r0, r3
    62b0:	46bd      	mov	sp, r7
    62b2:	b004      	add	sp, #16
    62b4:	bd80      	pop	{r7, pc}
    62b6:	46c0      	nop			; (mov r8, r8)
    62b8:	40001800 	.word	0x40001800

000062bc <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b084      	sub	sp, #16
    62c0:	af00      	add	r7, sp, #0
    62c2:	0002      	movs	r2, r0
    62c4:	1dfb      	adds	r3, r7, #7
    62c6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    62c8:	1dfb      	adds	r3, r7, #7
    62ca:	781b      	ldrb	r3, [r3, #0]
    62cc:	0018      	movs	r0, r3
    62ce:	4b0b      	ldr	r3, [pc, #44]	; (62fc <extint_chan_is_detected+0x40>)
    62d0:	4798      	blx	r3
    62d2:	0003      	movs	r3, r0
    62d4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    62d6:	1dfb      	adds	r3, r7, #7
    62d8:	781b      	ldrb	r3, [r3, #0]
    62da:	221f      	movs	r2, #31
    62dc:	4013      	ands	r3, r2
    62de:	2201      	movs	r2, #1
    62e0:	409a      	lsls	r2, r3
    62e2:	0013      	movs	r3, r2
    62e4:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    62e6:	68fb      	ldr	r3, [r7, #12]
    62e8:	691b      	ldr	r3, [r3, #16]
    62ea:	68ba      	ldr	r2, [r7, #8]
    62ec:	4013      	ands	r3, r2
    62ee:	1e5a      	subs	r2, r3, #1
    62f0:	4193      	sbcs	r3, r2
    62f2:	b2db      	uxtb	r3, r3
}
    62f4:	0018      	movs	r0, r3
    62f6:	46bd      	mov	sp, r7
    62f8:	b004      	add	sp, #16
    62fa:	bd80      	pop	{r7, pc}
    62fc:	00006271 	.word	0x00006271

00006300 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    6300:	b580      	push	{r7, lr}
    6302:	b084      	sub	sp, #16
    6304:	af00      	add	r7, sp, #0
    6306:	0002      	movs	r2, r0
    6308:	1dfb      	adds	r3, r7, #7
    630a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    630c:	1dfb      	adds	r3, r7, #7
    630e:	781b      	ldrb	r3, [r3, #0]
    6310:	0018      	movs	r0, r3
    6312:	4b09      	ldr	r3, [pc, #36]	; (6338 <extint_chan_clear_detected+0x38>)
    6314:	4798      	blx	r3
    6316:	0003      	movs	r3, r0
    6318:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    631a:	1dfb      	adds	r3, r7, #7
    631c:	781b      	ldrb	r3, [r3, #0]
    631e:	221f      	movs	r2, #31
    6320:	4013      	ands	r3, r2
    6322:	2201      	movs	r2, #1
    6324:	409a      	lsls	r2, r3
    6326:	0013      	movs	r3, r2
    6328:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    632a:	68fb      	ldr	r3, [r7, #12]
    632c:	68ba      	ldr	r2, [r7, #8]
    632e:	611a      	str	r2, [r3, #16]
}
    6330:	46c0      	nop			; (mov r8, r8)
    6332:	46bd      	mov	sp, r7
    6334:	b004      	add	sp, #16
    6336:	bd80      	pop	{r7, pc}
    6338:	00006271 	.word	0x00006271

0000633c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    633c:	b580      	push	{r7, lr}
    633e:	b082      	sub	sp, #8
    6340:	af00      	add	r7, sp, #0
    6342:	6078      	str	r0, [r7, #4]
    6344:	0008      	movs	r0, r1
    6346:	0011      	movs	r1, r2
    6348:	1cfb      	adds	r3, r7, #3
    634a:	1c02      	adds	r2, r0, #0
    634c:	701a      	strb	r2, [r3, #0]
    634e:	1cbb      	adds	r3, r7, #2
    6350:	1c0a      	adds	r2, r1, #0
    6352:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    6354:	1cbb      	adds	r3, r7, #2
    6356:	781b      	ldrb	r3, [r3, #0]
    6358:	2b00      	cmp	r3, #0
    635a:	d001      	beq.n	6360 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    635c:	2317      	movs	r3, #23
    635e:	e019      	b.n	6394 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    6360:	1cfb      	adds	r3, r7, #3
    6362:	781a      	ldrb	r2, [r3, #0]
    6364:	4b0d      	ldr	r3, [pc, #52]	; (639c <extint_register_callback+0x60>)
    6366:	0092      	lsls	r2, r2, #2
    6368:	58d3      	ldr	r3, [r2, r3]
    636a:	2b00      	cmp	r3, #0
    636c:	d107      	bne.n	637e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    636e:	1cfb      	adds	r3, r7, #3
    6370:	781a      	ldrb	r2, [r3, #0]
    6372:	4b0a      	ldr	r3, [pc, #40]	; (639c <extint_register_callback+0x60>)
    6374:	0092      	lsls	r2, r2, #2
    6376:	6879      	ldr	r1, [r7, #4]
    6378:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    637a:	2300      	movs	r3, #0
    637c:	e00a      	b.n	6394 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    637e:	1cfb      	adds	r3, r7, #3
    6380:	781a      	ldrb	r2, [r3, #0]
    6382:	4b06      	ldr	r3, [pc, #24]	; (639c <extint_register_callback+0x60>)
    6384:	0092      	lsls	r2, r2, #2
    6386:	58d2      	ldr	r2, [r2, r3]
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	429a      	cmp	r2, r3
    638c:	d101      	bne.n	6392 <extint_register_callback+0x56>
		return STATUS_OK;
    638e:	2300      	movs	r3, #0
    6390:	e000      	b.n	6394 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    6392:	231d      	movs	r3, #29
}
    6394:	0018      	movs	r0, r3
    6396:	46bd      	mov	sp, r7
    6398:	b002      	add	sp, #8
    639a:	bd80      	pop	{r7, pc}
    639c:	200006a4 	.word	0x200006a4

000063a0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    63a0:	b580      	push	{r7, lr}
    63a2:	b084      	sub	sp, #16
    63a4:	af00      	add	r7, sp, #0
    63a6:	0002      	movs	r2, r0
    63a8:	1dfb      	adds	r3, r7, #7
    63aa:	701a      	strb	r2, [r3, #0]
    63ac:	1dbb      	adds	r3, r7, #6
    63ae:	1c0a      	adds	r2, r1, #0
    63b0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    63b2:	1dbb      	adds	r3, r7, #6
    63b4:	781b      	ldrb	r3, [r3, #0]
    63b6:	2b00      	cmp	r3, #0
    63b8:	d10e      	bne.n	63d8 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    63ba:	1dfb      	adds	r3, r7, #7
    63bc:	781b      	ldrb	r3, [r3, #0]
    63be:	0018      	movs	r0, r3
    63c0:	4b08      	ldr	r3, [pc, #32]	; (63e4 <extint_chan_enable_callback+0x44>)
    63c2:	4798      	blx	r3
    63c4:	0003      	movs	r3, r0
    63c6:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    63c8:	1dfb      	adds	r3, r7, #7
    63ca:	781b      	ldrb	r3, [r3, #0]
    63cc:	2201      	movs	r2, #1
    63ce:	409a      	lsls	r2, r3
    63d0:	68fb      	ldr	r3, [r7, #12]
    63d2:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    63d4:	2300      	movs	r3, #0
    63d6:	e000      	b.n	63da <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    63d8:	2317      	movs	r3, #23
}
    63da:	0018      	movs	r0, r3
    63dc:	46bd      	mov	sp, r7
    63de:	b004      	add	sp, #16
    63e0:	bd80      	pop	{r7, pc}
    63e2:	46c0      	nop			; (mov r8, r8)
    63e4:	00006271 	.word	0x00006271

000063e8 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    63e8:	b580      	push	{r7, lr}
    63ea:	b084      	sub	sp, #16
    63ec:	af00      	add	r7, sp, #0
    63ee:	0002      	movs	r2, r0
    63f0:	1dfb      	adds	r3, r7, #7
    63f2:	701a      	strb	r2, [r3, #0]
    63f4:	1dbb      	adds	r3, r7, #6
    63f6:	1c0a      	adds	r2, r1, #0
    63f8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    63fa:	1dbb      	adds	r3, r7, #6
    63fc:	781b      	ldrb	r3, [r3, #0]
    63fe:	2b00      	cmp	r3, #0
    6400:	d10e      	bne.n	6420 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    6402:	1dfb      	adds	r3, r7, #7
    6404:	781b      	ldrb	r3, [r3, #0]
    6406:	0018      	movs	r0, r3
    6408:	4b08      	ldr	r3, [pc, #32]	; (642c <extint_chan_disable_callback+0x44>)
    640a:	4798      	blx	r3
    640c:	0003      	movs	r3, r0
    640e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    6410:	1dfb      	adds	r3, r7, #7
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	2201      	movs	r2, #1
    6416:	409a      	lsls	r2, r3
    6418:	68fb      	ldr	r3, [r7, #12]
    641a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    641c:	2300      	movs	r3, #0
    641e:	e000      	b.n	6422 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    6420:	2317      	movs	r3, #23
}
    6422:	0018      	movs	r0, r3
    6424:	46bd      	mov	sp, r7
    6426:	b004      	add	sp, #16
    6428:	bd80      	pop	{r7, pc}
    642a:	46c0      	nop			; (mov r8, r8)
    642c:	00006271 	.word	0x00006271

00006430 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6430:	b580      	push	{r7, lr}
    6432:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6434:	4b15      	ldr	r3, [pc, #84]	; (648c <EIC_Handler+0x5c>)
    6436:	2200      	movs	r2, #0
    6438:	701a      	strb	r2, [r3, #0]
    643a:	e020      	b.n	647e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    643c:	4b13      	ldr	r3, [pc, #76]	; (648c <EIC_Handler+0x5c>)
    643e:	781b      	ldrb	r3, [r3, #0]
    6440:	0018      	movs	r0, r3
    6442:	4b13      	ldr	r3, [pc, #76]	; (6490 <EIC_Handler+0x60>)
    6444:	4798      	blx	r3
    6446:	1e03      	subs	r3, r0, #0
    6448:	d013      	beq.n	6472 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    644a:	4b10      	ldr	r3, [pc, #64]	; (648c <EIC_Handler+0x5c>)
    644c:	781b      	ldrb	r3, [r3, #0]
    644e:	0018      	movs	r0, r3
    6450:	4b10      	ldr	r3, [pc, #64]	; (6494 <EIC_Handler+0x64>)
    6452:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6454:	4b0d      	ldr	r3, [pc, #52]	; (648c <EIC_Handler+0x5c>)
    6456:	781b      	ldrb	r3, [r3, #0]
    6458:	001a      	movs	r2, r3
    645a:	4b0f      	ldr	r3, [pc, #60]	; (6498 <EIC_Handler+0x68>)
    645c:	0092      	lsls	r2, r2, #2
    645e:	58d3      	ldr	r3, [r2, r3]
    6460:	2b00      	cmp	r3, #0
    6462:	d006      	beq.n	6472 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    6464:	4b09      	ldr	r3, [pc, #36]	; (648c <EIC_Handler+0x5c>)
    6466:	781b      	ldrb	r3, [r3, #0]
    6468:	001a      	movs	r2, r3
    646a:	4b0b      	ldr	r3, [pc, #44]	; (6498 <EIC_Handler+0x68>)
    646c:	0092      	lsls	r2, r2, #2
    646e:	58d3      	ldr	r3, [r2, r3]
    6470:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6472:	4b06      	ldr	r3, [pc, #24]	; (648c <EIC_Handler+0x5c>)
    6474:	781b      	ldrb	r3, [r3, #0]
    6476:	3301      	adds	r3, #1
    6478:	b2da      	uxtb	r2, r3
    647a:	4b04      	ldr	r3, [pc, #16]	; (648c <EIC_Handler+0x5c>)
    647c:	701a      	strb	r2, [r3, #0]
    647e:	4b03      	ldr	r3, [pc, #12]	; (648c <EIC_Handler+0x5c>)
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	2b0f      	cmp	r3, #15
    6484:	d9da      	bls.n	643c <EIC_Handler+0xc>
			}
		}
	}
}
    6486:	46c0      	nop			; (mov r8, r8)
    6488:	46bd      	mov	sp, r7
    648a:	bd80      	pop	{r7, pc}
    648c:	200006a0 	.word	0x200006a0
    6490:	000062bd 	.word	0x000062bd
    6494:	00006301 	.word	0x00006301
    6498:	200006a4 	.word	0x200006a4

0000649c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    649c:	b580      	push	{r7, lr}
    649e:	b082      	sub	sp, #8
    64a0:	af00      	add	r7, sp, #0
    64a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    64a4:	687b      	ldr	r3, [r7, #4]
    64a6:	2200      	movs	r2, #0
    64a8:	701a      	strb	r2, [r3, #0]
}
    64aa:	46c0      	nop			; (mov r8, r8)
    64ac:	46bd      	mov	sp, r7
    64ae:	b002      	add	sp, #8
    64b0:	bd80      	pop	{r7, pc}
	...

000064b4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    64b4:	b580      	push	{r7, lr}
    64b6:	b082      	sub	sp, #8
    64b8:	af00      	add	r7, sp, #0
    64ba:	0002      	movs	r2, r0
    64bc:	6039      	str	r1, [r7, #0]
    64be:	1dfb      	adds	r3, r7, #7
    64c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    64c2:	1dfb      	adds	r3, r7, #7
    64c4:	781b      	ldrb	r3, [r3, #0]
    64c6:	2b01      	cmp	r3, #1
    64c8:	d00a      	beq.n	64e0 <system_apb_clock_set_mask+0x2c>
    64ca:	2b02      	cmp	r3, #2
    64cc:	d00f      	beq.n	64ee <system_apb_clock_set_mask+0x3a>
    64ce:	2b00      	cmp	r3, #0
    64d0:	d114      	bne.n	64fc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    64d2:	4b0e      	ldr	r3, [pc, #56]	; (650c <system_apb_clock_set_mask+0x58>)
    64d4:	4a0d      	ldr	r2, [pc, #52]	; (650c <system_apb_clock_set_mask+0x58>)
    64d6:	6991      	ldr	r1, [r2, #24]
    64d8:	683a      	ldr	r2, [r7, #0]
    64da:	430a      	orrs	r2, r1
    64dc:	619a      	str	r2, [r3, #24]
			break;
    64de:	e00f      	b.n	6500 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    64e0:	4b0a      	ldr	r3, [pc, #40]	; (650c <system_apb_clock_set_mask+0x58>)
    64e2:	4a0a      	ldr	r2, [pc, #40]	; (650c <system_apb_clock_set_mask+0x58>)
    64e4:	69d1      	ldr	r1, [r2, #28]
    64e6:	683a      	ldr	r2, [r7, #0]
    64e8:	430a      	orrs	r2, r1
    64ea:	61da      	str	r2, [r3, #28]
			break;
    64ec:	e008      	b.n	6500 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    64ee:	4b07      	ldr	r3, [pc, #28]	; (650c <system_apb_clock_set_mask+0x58>)
    64f0:	4a06      	ldr	r2, [pc, #24]	; (650c <system_apb_clock_set_mask+0x58>)
    64f2:	6a11      	ldr	r1, [r2, #32]
    64f4:	683a      	ldr	r2, [r7, #0]
    64f6:	430a      	orrs	r2, r1
    64f8:	621a      	str	r2, [r3, #32]
			break;
    64fa:	e001      	b.n	6500 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    64fc:	2317      	movs	r3, #23
    64fe:	e000      	b.n	6502 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6500:	2300      	movs	r3, #0
}
    6502:	0018      	movs	r0, r3
    6504:	46bd      	mov	sp, r7
    6506:	b002      	add	sp, #8
    6508:	bd80      	pop	{r7, pc}
    650a:	46c0      	nop			; (mov r8, r8)
    650c:	40000400 	.word	0x40000400

00006510 <system_pinmux_get_config_defaults>:
{
    6510:	b580      	push	{r7, lr}
    6512:	b082      	sub	sp, #8
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	2280      	movs	r2, #128	; 0x80
    651c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    651e:	687b      	ldr	r3, [r7, #4]
    6520:	2200      	movs	r2, #0
    6522:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6524:	687b      	ldr	r3, [r7, #4]
    6526:	2201      	movs	r2, #1
    6528:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	2200      	movs	r2, #0
    652e:	70da      	strb	r2, [r3, #3]
}
    6530:	46c0      	nop			; (mov r8, r8)
    6532:	46bd      	mov	sp, r7
    6534:	b002      	add	sp, #8
    6536:	bd80      	pop	{r7, pc}

00006538 <system_interrupt_enable>:
{
    6538:	b580      	push	{r7, lr}
    653a:	b082      	sub	sp, #8
    653c:	af00      	add	r7, sp, #0
    653e:	0002      	movs	r2, r0
    6540:	1dfb      	adds	r3, r7, #7
    6542:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6544:	4b06      	ldr	r3, [pc, #24]	; (6560 <system_interrupt_enable+0x28>)
    6546:	1dfa      	adds	r2, r7, #7
    6548:	7812      	ldrb	r2, [r2, #0]
    654a:	0011      	movs	r1, r2
    654c:	221f      	movs	r2, #31
    654e:	400a      	ands	r2, r1
    6550:	2101      	movs	r1, #1
    6552:	4091      	lsls	r1, r2
    6554:	000a      	movs	r2, r1
    6556:	601a      	str	r2, [r3, #0]
}
    6558:	46c0      	nop			; (mov r8, r8)
    655a:	46bd      	mov	sp, r7
    655c:	b002      	add	sp, #8
    655e:	bd80      	pop	{r7, pc}
    6560:	e000e100 	.word	0xe000e100

00006564 <_extint_get_eic_from_channel>:
{
    6564:	b580      	push	{r7, lr}
    6566:	b084      	sub	sp, #16
    6568:	af00      	add	r7, sp, #0
    656a:	0002      	movs	r2, r0
    656c:	1dfb      	adds	r3, r7, #7
    656e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6570:	230f      	movs	r3, #15
    6572:	18fb      	adds	r3, r7, r3
    6574:	1dfa      	adds	r2, r7, #7
    6576:	7812      	ldrb	r2, [r2, #0]
    6578:	0952      	lsrs	r2, r2, #5
    657a:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    657c:	230f      	movs	r3, #15
    657e:	18fb      	adds	r3, r7, r3
    6580:	781b      	ldrb	r3, [r3, #0]
    6582:	2b00      	cmp	r3, #0
    6584:	d10c      	bne.n	65a0 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6586:	4b09      	ldr	r3, [pc, #36]	; (65ac <_extint_get_eic_from_channel+0x48>)
    6588:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    658a:	230f      	movs	r3, #15
    658c:	18fb      	adds	r3, r7, r3
    658e:	781b      	ldrb	r3, [r3, #0]
    6590:	009b      	lsls	r3, r3, #2
    6592:	2210      	movs	r2, #16
    6594:	4694      	mov	ip, r2
    6596:	44bc      	add	ip, r7
    6598:	4463      	add	r3, ip
    659a:	3b08      	subs	r3, #8
    659c:	681b      	ldr	r3, [r3, #0]
    659e:	e000      	b.n	65a2 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    65a0:	2300      	movs	r3, #0
}
    65a2:	0018      	movs	r0, r3
    65a4:	46bd      	mov	sp, r7
    65a6:	b004      	add	sp, #16
    65a8:	bd80      	pop	{r7, pc}
    65aa:	46c0      	nop			; (mov r8, r8)
    65ac:	40001800 	.word	0x40001800

000065b0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    65b0:	b580      	push	{r7, lr}
    65b2:	b082      	sub	sp, #8
    65b4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    65b6:	4b0f      	ldr	r3, [pc, #60]	; (65f4 <extint_is_syncing+0x44>)
    65b8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    65ba:	2300      	movs	r3, #0
    65bc:	607b      	str	r3, [r7, #4]
    65be:	e011      	b.n	65e4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	009b      	lsls	r3, r3, #2
    65c4:	2208      	movs	r2, #8
    65c6:	4694      	mov	ip, r2
    65c8:	44bc      	add	ip, r7
    65ca:	4463      	add	r3, ip
    65cc:	3b08      	subs	r3, #8
    65ce:	681b      	ldr	r3, [r3, #0]
    65d0:	785b      	ldrb	r3, [r3, #1]
    65d2:	b2db      	uxtb	r3, r3
    65d4:	b25b      	sxtb	r3, r3
    65d6:	2b00      	cmp	r3, #0
    65d8:	da01      	bge.n	65de <extint_is_syncing+0x2e>
			return true;
    65da:	2301      	movs	r3, #1
    65dc:	e006      	b.n	65ec <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	3301      	adds	r3, #1
    65e2:	607b      	str	r3, [r7, #4]
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	2b00      	cmp	r3, #0
    65e8:	d0ea      	beq.n	65c0 <extint_is_syncing+0x10>
		}
	}
	return false;
    65ea:	2300      	movs	r3, #0
}
    65ec:	0018      	movs	r0, r3
    65ee:	46bd      	mov	sp, r7
    65f0:	b002      	add	sp, #8
    65f2:	bd80      	pop	{r7, pc}
    65f4:	40001800 	.word	0x40001800

000065f8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    65f8:	b580      	push	{r7, lr}
    65fa:	b084      	sub	sp, #16
    65fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    65fe:	4b2d      	ldr	r3, [pc, #180]	; (66b4 <_system_extint_init+0xbc>)
    6600:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    6602:	2140      	movs	r1, #64	; 0x40
    6604:	2000      	movs	r0, #0
    6606:	4b2c      	ldr	r3, [pc, #176]	; (66b8 <_system_extint_init+0xc0>)
    6608:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    660a:	003b      	movs	r3, r7
    660c:	0018      	movs	r0, r3
    660e:	4b2b      	ldr	r3, [pc, #172]	; (66bc <_system_extint_init+0xc4>)
    6610:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    6612:	003b      	movs	r3, r7
    6614:	2200      	movs	r2, #0
    6616:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    6618:	003b      	movs	r3, r7
    661a:	0019      	movs	r1, r3
    661c:	2005      	movs	r0, #5
    661e:	4b28      	ldr	r3, [pc, #160]	; (66c0 <_system_extint_init+0xc8>)
    6620:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    6622:	2005      	movs	r0, #5
    6624:	4b27      	ldr	r3, [pc, #156]	; (66c4 <_system_extint_init+0xcc>)
    6626:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6628:	2300      	movs	r3, #0
    662a:	60fb      	str	r3, [r7, #12]
    662c:	e018      	b.n	6660 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    662e:	68fb      	ldr	r3, [r7, #12]
    6630:	009b      	lsls	r3, r3, #2
    6632:	2210      	movs	r2, #16
    6634:	4694      	mov	ip, r2
    6636:	44bc      	add	ip, r7
    6638:	4463      	add	r3, ip
    663a:	3b0c      	subs	r3, #12
    663c:	681a      	ldr	r2, [r3, #0]
    663e:	68fb      	ldr	r3, [r7, #12]
    6640:	009b      	lsls	r3, r3, #2
    6642:	2110      	movs	r1, #16
    6644:	468c      	mov	ip, r1
    6646:	44bc      	add	ip, r7
    6648:	4463      	add	r3, ip
    664a:	3b0c      	subs	r3, #12
    664c:	681b      	ldr	r3, [r3, #0]
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	b2db      	uxtb	r3, r3
    6652:	2101      	movs	r1, #1
    6654:	430b      	orrs	r3, r1
    6656:	b2db      	uxtb	r3, r3
    6658:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    665a:	68fb      	ldr	r3, [r7, #12]
    665c:	3301      	adds	r3, #1
    665e:	60fb      	str	r3, [r7, #12]
    6660:	68fb      	ldr	r3, [r7, #12]
    6662:	2b00      	cmp	r3, #0
    6664:	d0e3      	beq.n	662e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    6666:	46c0      	nop			; (mov r8, r8)
    6668:	4b17      	ldr	r3, [pc, #92]	; (66c8 <_system_extint_init+0xd0>)
    666a:	4798      	blx	r3
    666c:	1e03      	subs	r3, r0, #0
    666e:	d1fb      	bne.n	6668 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6670:	230b      	movs	r3, #11
    6672:	18fb      	adds	r3, r7, r3
    6674:	2200      	movs	r2, #0
    6676:	701a      	strb	r2, [r3, #0]
    6678:	e00d      	b.n	6696 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    667a:	230b      	movs	r3, #11
    667c:	18fb      	adds	r3, r7, r3
    667e:	781a      	ldrb	r2, [r3, #0]
    6680:	4b12      	ldr	r3, [pc, #72]	; (66cc <_system_extint_init+0xd4>)
    6682:	0092      	lsls	r2, r2, #2
    6684:	2100      	movs	r1, #0
    6686:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6688:	230b      	movs	r3, #11
    668a:	18fb      	adds	r3, r7, r3
    668c:	781a      	ldrb	r2, [r3, #0]
    668e:	230b      	movs	r3, #11
    6690:	18fb      	adds	r3, r7, r3
    6692:	3201      	adds	r2, #1
    6694:	701a      	strb	r2, [r3, #0]
    6696:	230b      	movs	r3, #11
    6698:	18fb      	adds	r3, r7, r3
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	2b0f      	cmp	r3, #15
    669e:	d9ec      	bls.n	667a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    66a0:	2004      	movs	r0, #4
    66a2:	4b0b      	ldr	r3, [pc, #44]	; (66d0 <_system_extint_init+0xd8>)
    66a4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    66a6:	4b0b      	ldr	r3, [pc, #44]	; (66d4 <_system_extint_init+0xdc>)
    66a8:	4798      	blx	r3
}
    66aa:	46c0      	nop			; (mov r8, r8)
    66ac:	46bd      	mov	sp, r7
    66ae:	b004      	add	sp, #16
    66b0:	bd80      	pop	{r7, pc}
    66b2:	46c0      	nop			; (mov r8, r8)
    66b4:	40001800 	.word	0x40001800
    66b8:	000064b5 	.word	0x000064b5
    66bc:	0000649d 	.word	0x0000649d
    66c0:	0000c659 	.word	0x0000c659
    66c4:	0000c69d 	.word	0x0000c69d
    66c8:	000065b1 	.word	0x000065b1
    66cc:	200006a4 	.word	0x200006a4
    66d0:	00006539 	.word	0x00006539
    66d4:	000066d9 	.word	0x000066d9

000066d8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    66d8:	b580      	push	{r7, lr}
    66da:	b082      	sub	sp, #8
    66dc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    66de:	4b15      	ldr	r3, [pc, #84]	; (6734 <_extint_enable+0x5c>)
    66e0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    66e2:	2300      	movs	r3, #0
    66e4:	607b      	str	r3, [r7, #4]
    66e6:	e018      	b.n	671a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    66e8:	687b      	ldr	r3, [r7, #4]
    66ea:	009b      	lsls	r3, r3, #2
    66ec:	2208      	movs	r2, #8
    66ee:	4694      	mov	ip, r2
    66f0:	44bc      	add	ip, r7
    66f2:	4463      	add	r3, ip
    66f4:	3b08      	subs	r3, #8
    66f6:	681a      	ldr	r2, [r3, #0]
    66f8:	687b      	ldr	r3, [r7, #4]
    66fa:	009b      	lsls	r3, r3, #2
    66fc:	2108      	movs	r1, #8
    66fe:	468c      	mov	ip, r1
    6700:	44bc      	add	ip, r7
    6702:	4463      	add	r3, ip
    6704:	3b08      	subs	r3, #8
    6706:	681b      	ldr	r3, [r3, #0]
    6708:	781b      	ldrb	r3, [r3, #0]
    670a:	b2db      	uxtb	r3, r3
    670c:	2102      	movs	r1, #2
    670e:	430b      	orrs	r3, r1
    6710:	b2db      	uxtb	r3, r3
    6712:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6714:	687b      	ldr	r3, [r7, #4]
    6716:	3301      	adds	r3, #1
    6718:	607b      	str	r3, [r7, #4]
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	2b00      	cmp	r3, #0
    671e:	d0e3      	beq.n	66e8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    6720:	46c0      	nop			; (mov r8, r8)
    6722:	4b05      	ldr	r3, [pc, #20]	; (6738 <_extint_enable+0x60>)
    6724:	4798      	blx	r3
    6726:	1e03      	subs	r3, r0, #0
    6728:	d1fb      	bne.n	6722 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    672a:	46c0      	nop			; (mov r8, r8)
    672c:	46bd      	mov	sp, r7
    672e:	b002      	add	sp, #8
    6730:	bd80      	pop	{r7, pc}
    6732:	46c0      	nop			; (mov r8, r8)
    6734:	40001800 	.word	0x40001800
    6738:	000065b1 	.word	0x000065b1

0000673c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    673c:	b580      	push	{r7, lr}
    673e:	b082      	sub	sp, #8
    6740:	af00      	add	r7, sp, #0
    6742:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6744:	687b      	ldr	r3, [r7, #4]
    6746:	2200      	movs	r2, #0
    6748:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    674a:	687b      	ldr	r3, [r7, #4]
    674c:	2200      	movs	r2, #0
    674e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	2201      	movs	r2, #1
    6754:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    6756:	687b      	ldr	r3, [r7, #4]
    6758:	2201      	movs	r2, #1
    675a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    675c:	687b      	ldr	r3, [r7, #4]
    675e:	2200      	movs	r2, #0
    6760:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	2202      	movs	r2, #2
    6766:	72da      	strb	r2, [r3, #11]
}
    6768:	46c0      	nop			; (mov r8, r8)
    676a:	46bd      	mov	sp, r7
    676c:	b002      	add	sp, #8
    676e:	bd80      	pop	{r7, pc}

00006770 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6770:	b580      	push	{r7, lr}
    6772:	b086      	sub	sp, #24
    6774:	af00      	add	r7, sp, #0
    6776:	0002      	movs	r2, r0
    6778:	6039      	str	r1, [r7, #0]
    677a:	1dfb      	adds	r3, r7, #7
    677c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    677e:	2308      	movs	r3, #8
    6780:	18fb      	adds	r3, r7, r3
    6782:	0018      	movs	r0, r3
    6784:	4b36      	ldr	r3, [pc, #216]	; (6860 <extint_chan_set_config+0xf0>)
    6786:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    6788:	683b      	ldr	r3, [r7, #0]
    678a:	685b      	ldr	r3, [r3, #4]
    678c:	b2da      	uxtb	r2, r3
    678e:	2308      	movs	r3, #8
    6790:	18fb      	adds	r3, r7, r3
    6792:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6794:	2308      	movs	r3, #8
    6796:	18fb      	adds	r3, r7, r3
    6798:	2200      	movs	r2, #0
    679a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    679c:	683b      	ldr	r3, [r7, #0]
    679e:	7a1a      	ldrb	r2, [r3, #8]
    67a0:	2308      	movs	r3, #8
    67a2:	18fb      	adds	r3, r7, r3
    67a4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    67a6:	683b      	ldr	r3, [r7, #0]
    67a8:	681b      	ldr	r3, [r3, #0]
    67aa:	b2db      	uxtb	r3, r3
    67ac:	2208      	movs	r2, #8
    67ae:	18ba      	adds	r2, r7, r2
    67b0:	0011      	movs	r1, r2
    67b2:	0018      	movs	r0, r3
    67b4:	4b2b      	ldr	r3, [pc, #172]	; (6864 <extint_chan_set_config+0xf4>)
    67b6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    67b8:	1dfb      	adds	r3, r7, #7
    67ba:	781b      	ldrb	r3, [r3, #0]
    67bc:	0018      	movs	r0, r3
    67be:	4b2a      	ldr	r3, [pc, #168]	; (6868 <extint_chan_set_config+0xf8>)
    67c0:	4798      	blx	r3
    67c2:	0003      	movs	r3, r0
    67c4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    67c6:	1dfb      	adds	r3, r7, #7
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	2207      	movs	r2, #7
    67cc:	4013      	ands	r3, r2
    67ce:	009b      	lsls	r3, r3, #2
    67d0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    67d2:	683b      	ldr	r3, [r7, #0]
    67d4:	7adb      	ldrb	r3, [r3, #11]
    67d6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    67d8:	683b      	ldr	r3, [r7, #0]
    67da:	7a9b      	ldrb	r3, [r3, #10]
    67dc:	2b00      	cmp	r3, #0
    67de:	d003      	beq.n	67e8 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    67e0:	697b      	ldr	r3, [r7, #20]
    67e2:	2208      	movs	r2, #8
    67e4:	4313      	orrs	r3, r2
    67e6:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    67e8:	1dfb      	adds	r3, r7, #7
    67ea:	781b      	ldrb	r3, [r3, #0]
    67ec:	08db      	lsrs	r3, r3, #3
    67ee:	b2db      	uxtb	r3, r3
    67f0:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    67f2:	1dfb      	adds	r3, r7, #7
    67f4:	781b      	ldrb	r3, [r3, #0]
    67f6:	08db      	lsrs	r3, r3, #3
    67f8:	b2db      	uxtb	r3, r3
    67fa:	001a      	movs	r2, r3
    67fc:	693b      	ldr	r3, [r7, #16]
    67fe:	3206      	adds	r2, #6
    6800:	0092      	lsls	r2, r2, #2
    6802:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6804:	210f      	movs	r1, #15
    6806:	68fa      	ldr	r2, [r7, #12]
    6808:	4091      	lsls	r1, r2
    680a:	000a      	movs	r2, r1
    680c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    680e:	401a      	ands	r2, r3
			(new_config << config_pos);
    6810:	6979      	ldr	r1, [r7, #20]
    6812:	68fb      	ldr	r3, [r7, #12]
    6814:	4099      	lsls	r1, r3
    6816:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6818:	431a      	orrs	r2, r3
    681a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    681c:	693b      	ldr	r3, [r7, #16]
    681e:	1d82      	adds	r2, r0, #6
    6820:	0092      	lsls	r2, r2, #2
    6822:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    6824:	683b      	ldr	r3, [r7, #0]
    6826:	7a5b      	ldrb	r3, [r3, #9]
    6828:	2b00      	cmp	r3, #0
    682a:	d00a      	beq.n	6842 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    682c:	693b      	ldr	r3, [r7, #16]
    682e:	695a      	ldr	r2, [r3, #20]
    6830:	1dfb      	adds	r3, r7, #7
    6832:	781b      	ldrb	r3, [r3, #0]
    6834:	2101      	movs	r1, #1
    6836:	4099      	lsls	r1, r3
    6838:	000b      	movs	r3, r1
    683a:	431a      	orrs	r2, r3
    683c:	693b      	ldr	r3, [r7, #16]
    683e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    6840:	e00a      	b.n	6858 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    6842:	693b      	ldr	r3, [r7, #16]
    6844:	695b      	ldr	r3, [r3, #20]
    6846:	1dfa      	adds	r2, r7, #7
    6848:	7812      	ldrb	r2, [r2, #0]
    684a:	2101      	movs	r1, #1
    684c:	4091      	lsls	r1, r2
    684e:	000a      	movs	r2, r1
    6850:	43d2      	mvns	r2, r2
    6852:	401a      	ands	r2, r3
    6854:	693b      	ldr	r3, [r7, #16]
    6856:	615a      	str	r2, [r3, #20]
}
    6858:	46c0      	nop			; (mov r8, r8)
    685a:	46bd      	mov	sp, r7
    685c:	b006      	add	sp, #24
    685e:	bd80      	pop	{r7, pc}
    6860:	00006511 	.word	0x00006511
    6864:	0000c945 	.word	0x0000c945
    6868:	00006565 	.word	0x00006565

0000686c <system_pinmux_get_config_defaults>:
{
    686c:	b580      	push	{r7, lr}
    686e:	b082      	sub	sp, #8
    6870:	af00      	add	r7, sp, #0
    6872:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	2280      	movs	r2, #128	; 0x80
    6878:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    687a:	687b      	ldr	r3, [r7, #4]
    687c:	2200      	movs	r2, #0
    687e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	2201      	movs	r2, #1
    6884:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	2200      	movs	r2, #0
    688a:	70da      	strb	r2, [r3, #3]
}
    688c:	46c0      	nop			; (mov r8, r8)
    688e:	46bd      	mov	sp, r7
    6890:	b002      	add	sp, #8
    6892:	bd80      	pop	{r7, pc}

00006894 <system_pinmux_get_group_from_gpio_pin>:
{
    6894:	b580      	push	{r7, lr}
    6896:	b084      	sub	sp, #16
    6898:	af00      	add	r7, sp, #0
    689a:	0002      	movs	r2, r0
    689c:	1dfb      	adds	r3, r7, #7
    689e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    68a0:	230f      	movs	r3, #15
    68a2:	18fb      	adds	r3, r7, r3
    68a4:	1dfa      	adds	r2, r7, #7
    68a6:	7812      	ldrb	r2, [r2, #0]
    68a8:	09d2      	lsrs	r2, r2, #7
    68aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    68ac:	230e      	movs	r3, #14
    68ae:	18fb      	adds	r3, r7, r3
    68b0:	1dfa      	adds	r2, r7, #7
    68b2:	7812      	ldrb	r2, [r2, #0]
    68b4:	0952      	lsrs	r2, r2, #5
    68b6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    68b8:	4b0d      	ldr	r3, [pc, #52]	; (68f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    68ba:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    68bc:	230f      	movs	r3, #15
    68be:	18fb      	adds	r3, r7, r3
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d10f      	bne.n	68e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    68c6:	230f      	movs	r3, #15
    68c8:	18fb      	adds	r3, r7, r3
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	009b      	lsls	r3, r3, #2
    68ce:	2210      	movs	r2, #16
    68d0:	4694      	mov	ip, r2
    68d2:	44bc      	add	ip, r7
    68d4:	4463      	add	r3, ip
    68d6:	3b08      	subs	r3, #8
    68d8:	681a      	ldr	r2, [r3, #0]
    68da:	230e      	movs	r3, #14
    68dc:	18fb      	adds	r3, r7, r3
    68de:	781b      	ldrb	r3, [r3, #0]
    68e0:	01db      	lsls	r3, r3, #7
    68e2:	18d3      	adds	r3, r2, r3
    68e4:	e000      	b.n	68e8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    68e6:	2300      	movs	r3, #0
}
    68e8:	0018      	movs	r0, r3
    68ea:	46bd      	mov	sp, r7
    68ec:	b004      	add	sp, #16
    68ee:	bd80      	pop	{r7, pc}
    68f0:	41004400 	.word	0x41004400

000068f4 <port_get_group_from_gpio_pin>:
{
    68f4:	b580      	push	{r7, lr}
    68f6:	b082      	sub	sp, #8
    68f8:	af00      	add	r7, sp, #0
    68fa:	0002      	movs	r2, r0
    68fc:	1dfb      	adds	r3, r7, #7
    68fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6900:	1dfb      	adds	r3, r7, #7
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	0018      	movs	r0, r3
    6906:	4b03      	ldr	r3, [pc, #12]	; (6914 <port_get_group_from_gpio_pin+0x20>)
    6908:	4798      	blx	r3
    690a:	0003      	movs	r3, r0
}
    690c:	0018      	movs	r0, r3
    690e:	46bd      	mov	sp, r7
    6910:	b002      	add	sp, #8
    6912:	bd80      	pop	{r7, pc}
    6914:	00006895 	.word	0x00006895

00006918 <port_pin_set_output_level>:
{
    6918:	b580      	push	{r7, lr}
    691a:	b084      	sub	sp, #16
    691c:	af00      	add	r7, sp, #0
    691e:	0002      	movs	r2, r0
    6920:	1dfb      	adds	r3, r7, #7
    6922:	701a      	strb	r2, [r3, #0]
    6924:	1dbb      	adds	r3, r7, #6
    6926:	1c0a      	adds	r2, r1, #0
    6928:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    692a:	1dfb      	adds	r3, r7, #7
    692c:	781b      	ldrb	r3, [r3, #0]
    692e:	0018      	movs	r0, r3
    6930:	4b0d      	ldr	r3, [pc, #52]	; (6968 <port_pin_set_output_level+0x50>)
    6932:	4798      	blx	r3
    6934:	0003      	movs	r3, r0
    6936:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6938:	1dfb      	adds	r3, r7, #7
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	221f      	movs	r2, #31
    693e:	4013      	ands	r3, r2
    6940:	2201      	movs	r2, #1
    6942:	409a      	lsls	r2, r3
    6944:	0013      	movs	r3, r2
    6946:	60bb      	str	r3, [r7, #8]
	if (level) {
    6948:	1dbb      	adds	r3, r7, #6
    694a:	781b      	ldrb	r3, [r3, #0]
    694c:	2b00      	cmp	r3, #0
    694e:	d003      	beq.n	6958 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6950:	68fb      	ldr	r3, [r7, #12]
    6952:	68ba      	ldr	r2, [r7, #8]
    6954:	619a      	str	r2, [r3, #24]
}
    6956:	e002      	b.n	695e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6958:	68fb      	ldr	r3, [r7, #12]
    695a:	68ba      	ldr	r2, [r7, #8]
    695c:	615a      	str	r2, [r3, #20]
}
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	46bd      	mov	sp, r7
    6962:	b004      	add	sp, #16
    6964:	bd80      	pop	{r7, pc}
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	000068f5 	.word	0x000068f5

0000696c <system_gclk_chan_get_config_defaults>:
{
    696c:	b580      	push	{r7, lr}
    696e:	b082      	sub	sp, #8
    6970:	af00      	add	r7, sp, #0
    6972:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	2200      	movs	r2, #0
    6978:	701a      	strb	r2, [r3, #0]
}
    697a:	46c0      	nop			; (mov r8, r8)
    697c:	46bd      	mov	sp, r7
    697e:	b002      	add	sp, #8
    6980:	bd80      	pop	{r7, pc}
	...

00006984 <system_apb_clock_set_mask>:
{
    6984:	b580      	push	{r7, lr}
    6986:	b082      	sub	sp, #8
    6988:	af00      	add	r7, sp, #0
    698a:	0002      	movs	r2, r0
    698c:	6039      	str	r1, [r7, #0]
    698e:	1dfb      	adds	r3, r7, #7
    6990:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6992:	1dfb      	adds	r3, r7, #7
    6994:	781b      	ldrb	r3, [r3, #0]
    6996:	2b01      	cmp	r3, #1
    6998:	d00a      	beq.n	69b0 <system_apb_clock_set_mask+0x2c>
    699a:	2b02      	cmp	r3, #2
    699c:	d00f      	beq.n	69be <system_apb_clock_set_mask+0x3a>
    699e:	2b00      	cmp	r3, #0
    69a0:	d114      	bne.n	69cc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    69a2:	4b0e      	ldr	r3, [pc, #56]	; (69dc <system_apb_clock_set_mask+0x58>)
    69a4:	4a0d      	ldr	r2, [pc, #52]	; (69dc <system_apb_clock_set_mask+0x58>)
    69a6:	6991      	ldr	r1, [r2, #24]
    69a8:	683a      	ldr	r2, [r7, #0]
    69aa:	430a      	orrs	r2, r1
    69ac:	619a      	str	r2, [r3, #24]
			break;
    69ae:	e00f      	b.n	69d0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    69b0:	4b0a      	ldr	r3, [pc, #40]	; (69dc <system_apb_clock_set_mask+0x58>)
    69b2:	4a0a      	ldr	r2, [pc, #40]	; (69dc <system_apb_clock_set_mask+0x58>)
    69b4:	69d1      	ldr	r1, [r2, #28]
    69b6:	683a      	ldr	r2, [r7, #0]
    69b8:	430a      	orrs	r2, r1
    69ba:	61da      	str	r2, [r3, #28]
			break;
    69bc:	e008      	b.n	69d0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    69be:	4b07      	ldr	r3, [pc, #28]	; (69dc <system_apb_clock_set_mask+0x58>)
    69c0:	4a06      	ldr	r2, [pc, #24]	; (69dc <system_apb_clock_set_mask+0x58>)
    69c2:	6a11      	ldr	r1, [r2, #32]
    69c4:	683a      	ldr	r2, [r7, #0]
    69c6:	430a      	orrs	r2, r1
    69c8:	621a      	str	r2, [r3, #32]
			break;
    69ca:	e001      	b.n	69d0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    69cc:	2317      	movs	r3, #23
    69ce:	e000      	b.n	69d2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    69d0:	2300      	movs	r3, #0
}
    69d2:	0018      	movs	r0, r3
    69d4:	46bd      	mov	sp, r7
    69d6:	b002      	add	sp, #8
    69d8:	bd80      	pop	{r7, pc}
    69da:	46c0      	nop			; (mov r8, r8)
    69dc:	40000400 	.word	0x40000400

000069e0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    69e0:	b580      	push	{r7, lr}
    69e2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    69e4:	4b05      	ldr	r3, [pc, #20]	; (69fc <system_is_debugger_present+0x1c>)
    69e6:	789b      	ldrb	r3, [r3, #2]
    69e8:	b2db      	uxtb	r3, r3
    69ea:	001a      	movs	r2, r3
    69ec:	2302      	movs	r3, #2
    69ee:	4013      	ands	r3, r2
    69f0:	1e5a      	subs	r2, r3, #1
    69f2:	4193      	sbcs	r3, r2
    69f4:	b2db      	uxtb	r3, r3
}
    69f6:	0018      	movs	r0, r3
    69f8:	46bd      	mov	sp, r7
    69fa:	bd80      	pop	{r7, pc}
    69fc:	41002000 	.word	0x41002000

00006a00 <spi_is_ready_to_write>:
{
    6a00:	b580      	push	{r7, lr}
    6a02:	b084      	sub	sp, #16
    6a04:	af00      	add	r7, sp, #0
    6a06:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	681b      	ldr	r3, [r3, #0]
    6a0c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6a0e:	68fb      	ldr	r3, [r7, #12]
    6a10:	7e1b      	ldrb	r3, [r3, #24]
    6a12:	b2db      	uxtb	r3, r3
    6a14:	001a      	movs	r2, r3
    6a16:	2301      	movs	r3, #1
    6a18:	4013      	ands	r3, r2
    6a1a:	1e5a      	subs	r2, r3, #1
    6a1c:	4193      	sbcs	r3, r2
    6a1e:	b2db      	uxtb	r3, r3
}
    6a20:	0018      	movs	r0, r3
    6a22:	46bd      	mov	sp, r7
    6a24:	b004      	add	sp, #16
    6a26:	bd80      	pop	{r7, pc}

00006a28 <spi_is_ready_to_read>:
{
    6a28:	b580      	push	{r7, lr}
    6a2a:	b084      	sub	sp, #16
    6a2c:	af00      	add	r7, sp, #0
    6a2e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6a30:	687b      	ldr	r3, [r7, #4]
    6a32:	681b      	ldr	r3, [r3, #0]
    6a34:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6a36:	68fb      	ldr	r3, [r7, #12]
    6a38:	7e1b      	ldrb	r3, [r3, #24]
    6a3a:	b2db      	uxtb	r3, r3
    6a3c:	001a      	movs	r2, r3
    6a3e:	2304      	movs	r3, #4
    6a40:	4013      	ands	r3, r2
    6a42:	1e5a      	subs	r2, r3, #1
    6a44:	4193      	sbcs	r3, r2
    6a46:	b2db      	uxtb	r3, r3
}
    6a48:	0018      	movs	r0, r3
    6a4a:	46bd      	mov	sp, r7
    6a4c:	b004      	add	sp, #16
    6a4e:	bd80      	pop	{r7, pc}

00006a50 <spi_write>:
{
    6a50:	b580      	push	{r7, lr}
    6a52:	b084      	sub	sp, #16
    6a54:	af00      	add	r7, sp, #0
    6a56:	6078      	str	r0, [r7, #4]
    6a58:	000a      	movs	r2, r1
    6a5a:	1cbb      	adds	r3, r7, #2
    6a5c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6a5e:	687b      	ldr	r3, [r7, #4]
    6a60:	681b      	ldr	r3, [r3, #0]
    6a62:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    6a64:	687b      	ldr	r3, [r7, #4]
    6a66:	0018      	movs	r0, r3
    6a68:	4b0a      	ldr	r3, [pc, #40]	; (6a94 <spi_write+0x44>)
    6a6a:	4798      	blx	r3
    6a6c:	0003      	movs	r3, r0
    6a6e:	001a      	movs	r2, r3
    6a70:	2301      	movs	r3, #1
    6a72:	4053      	eors	r3, r2
    6a74:	b2db      	uxtb	r3, r3
    6a76:	2b00      	cmp	r3, #0
    6a78:	d001      	beq.n	6a7e <spi_write+0x2e>
		return STATUS_BUSY;
    6a7a:	2305      	movs	r3, #5
    6a7c:	e006      	b.n	6a8c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6a7e:	1cbb      	adds	r3, r7, #2
    6a80:	881b      	ldrh	r3, [r3, #0]
    6a82:	05db      	lsls	r3, r3, #23
    6a84:	0dda      	lsrs	r2, r3, #23
    6a86:	68fb      	ldr	r3, [r7, #12]
    6a88:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    6a8a:	2300      	movs	r3, #0
}
    6a8c:	0018      	movs	r0, r3
    6a8e:	46bd      	mov	sp, r7
    6a90:	b004      	add	sp, #16
    6a92:	bd80      	pop	{r7, pc}
    6a94:	00006a01 	.word	0x00006a01

00006a98 <spi_read>:
{
    6a98:	b580      	push	{r7, lr}
    6a9a:	b084      	sub	sp, #16
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
    6aa0:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	681b      	ldr	r3, [r3, #0]
    6aa6:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    6aa8:	687b      	ldr	r3, [r7, #4]
    6aaa:	0018      	movs	r0, r3
    6aac:	4b1b      	ldr	r3, [pc, #108]	; (6b1c <spi_read+0x84>)
    6aae:	4798      	blx	r3
    6ab0:	0003      	movs	r3, r0
    6ab2:	001a      	movs	r2, r3
    6ab4:	2301      	movs	r3, #1
    6ab6:	4053      	eors	r3, r2
    6ab8:	b2db      	uxtb	r3, r3
    6aba:	2b00      	cmp	r3, #0
    6abc:	d001      	beq.n	6ac2 <spi_read+0x2a>
		return STATUS_ERR_IO;
    6abe:	2310      	movs	r3, #16
    6ac0:	e027      	b.n	6b12 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    6ac2:	230f      	movs	r3, #15
    6ac4:	18fb      	adds	r3, r7, r3
    6ac6:	2200      	movs	r2, #0
    6ac8:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6aca:	68bb      	ldr	r3, [r7, #8]
    6acc:	8b5b      	ldrh	r3, [r3, #26]
    6ace:	b29b      	uxth	r3, r3
    6ad0:	001a      	movs	r2, r3
    6ad2:	2304      	movs	r3, #4
    6ad4:	4013      	ands	r3, r2
    6ad6:	d006      	beq.n	6ae6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    6ad8:	230f      	movs	r3, #15
    6ada:	18fb      	adds	r3, r7, r3
    6adc:	221e      	movs	r2, #30
    6ade:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6ae0:	68bb      	ldr	r3, [r7, #8]
    6ae2:	2204      	movs	r2, #4
    6ae4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	799b      	ldrb	r3, [r3, #6]
    6aea:	2b01      	cmp	r3, #1
    6aec:	d108      	bne.n	6b00 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6aee:	68bb      	ldr	r3, [r7, #8]
    6af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6af2:	b29b      	uxth	r3, r3
    6af4:	05db      	lsls	r3, r3, #23
    6af6:	0ddb      	lsrs	r3, r3, #23
    6af8:	b29a      	uxth	r2, r3
    6afa:	683b      	ldr	r3, [r7, #0]
    6afc:	801a      	strh	r2, [r3, #0]
    6afe:	e005      	b.n	6b0c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6b00:	68bb      	ldr	r3, [r7, #8]
    6b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b04:	b2db      	uxtb	r3, r3
    6b06:	b29a      	uxth	r2, r3
    6b08:	683b      	ldr	r3, [r7, #0]
    6b0a:	801a      	strh	r2, [r3, #0]
	return retval;
    6b0c:	230f      	movs	r3, #15
    6b0e:	18fb      	adds	r3, r7, r3
    6b10:	781b      	ldrb	r3, [r3, #0]
}
    6b12:	0018      	movs	r0, r3
    6b14:	46bd      	mov	sp, r7
    6b16:	b004      	add	sp, #16
    6b18:	bd80      	pop	{r7, pc}
    6b1a:	46c0      	nop			; (mov r8, r8)
    6b1c:	00006a29 	.word	0x00006a29

00006b20 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    6b20:	b590      	push	{r4, r7, lr}
    6b22:	b093      	sub	sp, #76	; 0x4c
    6b24:	af00      	add	r7, sp, #0
    6b26:	6078      	str	r0, [r7, #4]
    6b28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6b2a:	687b      	ldr	r3, [r7, #4]
    6b2c:	681b      	ldr	r3, [r3, #0]
    6b2e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    6b30:	687b      	ldr	r3, [r7, #4]
    6b32:	681b      	ldr	r3, [r3, #0]
    6b34:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6b36:	231c      	movs	r3, #28
    6b38:	18fb      	adds	r3, r7, r3
    6b3a:	0018      	movs	r0, r3
    6b3c:	4b75      	ldr	r3, [pc, #468]	; (6d14 <_spi_set_config+0x1f4>)
    6b3e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6b40:	231c      	movs	r3, #28
    6b42:	18fb      	adds	r3, r7, r3
    6b44:	2200      	movs	r2, #0
    6b46:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    6b48:	683b      	ldr	r3, [r7, #0]
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	d103      	bne.n	6b58 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6b50:	231c      	movs	r3, #28
    6b52:	18fb      	adds	r3, r7, r3
    6b54:	2200      	movs	r2, #0
    6b56:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6b58:	683b      	ldr	r3, [r7, #0]
    6b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    6b5c:	230c      	movs	r3, #12
    6b5e:	18fb      	adds	r3, r7, r3
    6b60:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    6b62:	683b      	ldr	r3, [r7, #0]
    6b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    6b66:	230c      	movs	r3, #12
    6b68:	18fb      	adds	r3, r7, r3
    6b6a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6b6c:	683b      	ldr	r3, [r7, #0]
    6b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    6b70:	230c      	movs	r3, #12
    6b72:	18fb      	adds	r3, r7, r3
    6b74:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6b76:	683b      	ldr	r3, [r7, #0]
    6b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6b7a:	230c      	movs	r3, #12
    6b7c:	18fb      	adds	r3, r7, r3
    6b7e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6b80:	2347      	movs	r3, #71	; 0x47
    6b82:	18fb      	adds	r3, r7, r3
    6b84:	2200      	movs	r2, #0
    6b86:	701a      	strb	r2, [r3, #0]
    6b88:	e02c      	b.n	6be4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6b8a:	2347      	movs	r3, #71	; 0x47
    6b8c:	18fb      	adds	r3, r7, r3
    6b8e:	781a      	ldrb	r2, [r3, #0]
    6b90:	230c      	movs	r3, #12
    6b92:	18fb      	adds	r3, r7, r3
    6b94:	0092      	lsls	r2, r2, #2
    6b96:	58d3      	ldr	r3, [r2, r3]
    6b98:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6b9c:	2b00      	cmp	r3, #0
    6b9e:	d109      	bne.n	6bb4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6ba0:	2347      	movs	r3, #71	; 0x47
    6ba2:	18fb      	adds	r3, r7, r3
    6ba4:	781a      	ldrb	r2, [r3, #0]
    6ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6ba8:	0011      	movs	r1, r2
    6baa:	0018      	movs	r0, r3
    6bac:	4b5a      	ldr	r3, [pc, #360]	; (6d18 <_spi_set_config+0x1f8>)
    6bae:	4798      	blx	r3
    6bb0:	0003      	movs	r3, r0
    6bb2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6bb6:	3301      	adds	r3, #1
    6bb8:	d00d      	beq.n	6bd6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6bbc:	b2da      	uxtb	r2, r3
    6bbe:	231c      	movs	r3, #28
    6bc0:	18fb      	adds	r3, r7, r3
    6bc2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6bc6:	0c1b      	lsrs	r3, r3, #16
    6bc8:	b2db      	uxtb	r3, r3
    6bca:	221c      	movs	r2, #28
    6bcc:	18ba      	adds	r2, r7, r2
    6bce:	0011      	movs	r1, r2
    6bd0:	0018      	movs	r0, r3
    6bd2:	4b52      	ldr	r3, [pc, #328]	; (6d1c <_spi_set_config+0x1fc>)
    6bd4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6bd6:	2347      	movs	r3, #71	; 0x47
    6bd8:	18fb      	adds	r3, r7, r3
    6bda:	781a      	ldrb	r2, [r3, #0]
    6bdc:	2347      	movs	r3, #71	; 0x47
    6bde:	18fb      	adds	r3, r7, r3
    6be0:	3201      	adds	r2, #1
    6be2:	701a      	strb	r2, [r3, #0]
    6be4:	2347      	movs	r3, #71	; 0x47
    6be6:	18fb      	adds	r3, r7, r3
    6be8:	781b      	ldrb	r3, [r3, #0]
    6bea:	2b03      	cmp	r3, #3
    6bec:	d9cd      	bls.n	6b8a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    6bee:	683b      	ldr	r3, [r7, #0]
    6bf0:	781a      	ldrb	r2, [r3, #0]
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    6bf6:	683b      	ldr	r3, [r7, #0]
    6bf8:	7c1a      	ldrb	r2, [r3, #16]
    6bfa:	687b      	ldr	r3, [r7, #4]
    6bfc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    6bfe:	683b      	ldr	r3, [r7, #0]
    6c00:	7c9a      	ldrb	r2, [r3, #18]
    6c02:	687b      	ldr	r3, [r7, #4]
    6c04:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    6c06:	683b      	ldr	r3, [r7, #0]
    6c08:	7d1a      	ldrb	r2, [r3, #20]
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    6c0e:	230a      	movs	r3, #10
    6c10:	18fb      	adds	r3, r7, r3
    6c12:	2200      	movs	r2, #0
    6c14:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    6c16:	2300      	movs	r3, #0
    6c18:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    6c1a:	2300      	movs	r3, #0
    6c1c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    6c1e:	683b      	ldr	r3, [r7, #0]
    6c20:	781b      	ldrb	r3, [r3, #0]
    6c22:	2b01      	cmp	r3, #1
    6c24:	d129      	bne.n	6c7a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	681b      	ldr	r3, [r3, #0]
    6c2a:	0018      	movs	r0, r3
    6c2c:	4b3c      	ldr	r3, [pc, #240]	; (6d20 <_spi_set_config+0x200>)
    6c2e:	4798      	blx	r3
    6c30:	0003      	movs	r3, r0
    6c32:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c36:	3314      	adds	r3, #20
    6c38:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6c3c:	b2db      	uxtb	r3, r3
    6c3e:	0018      	movs	r0, r3
    6c40:	4b38      	ldr	r3, [pc, #224]	; (6d24 <_spi_set_config+0x204>)
    6c42:	4798      	blx	r3
    6c44:	0003      	movs	r3, r0
    6c46:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    6c48:	683b      	ldr	r3, [r7, #0]
    6c4a:	699b      	ldr	r3, [r3, #24]
    6c4c:	2223      	movs	r2, #35	; 0x23
    6c4e:	18bc      	adds	r4, r7, r2
    6c50:	220a      	movs	r2, #10
    6c52:	18ba      	adds	r2, r7, r2
    6c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c56:	0018      	movs	r0, r3
    6c58:	4b33      	ldr	r3, [pc, #204]	; (6d28 <_spi_set_config+0x208>)
    6c5a:	4798      	blx	r3
    6c5c:	0003      	movs	r3, r0
    6c5e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    6c60:	2323      	movs	r3, #35	; 0x23
    6c62:	18fb      	adds	r3, r7, r3
    6c64:	781b      	ldrb	r3, [r3, #0]
    6c66:	2b00      	cmp	r3, #0
    6c68:	d001      	beq.n	6c6e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    6c6a:	2317      	movs	r3, #23
    6c6c:	e04e      	b.n	6d0c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    6c6e:	230a      	movs	r3, #10
    6c70:	18fb      	adds	r3, r7, r3
    6c72:	881b      	ldrh	r3, [r3, #0]
    6c74:	b2da      	uxtb	r2, r3
    6c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6c78:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    6c7a:	683b      	ldr	r3, [r7, #0]
    6c7c:	685b      	ldr	r3, [r3, #4]
    6c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6c80:	4313      	orrs	r3, r2
    6c82:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    6c84:	683b      	ldr	r3, [r7, #0]
    6c86:	689b      	ldr	r3, [r3, #8]
    6c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6c8a:	4313      	orrs	r3, r2
    6c8c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    6c8e:	683b      	ldr	r3, [r7, #0]
    6c90:	68db      	ldr	r3, [r3, #12]
    6c92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6c94:	4313      	orrs	r3, r2
    6c96:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    6c98:	683b      	ldr	r3, [r7, #0]
    6c9a:	7c1b      	ldrb	r3, [r3, #16]
    6c9c:	001a      	movs	r2, r3
    6c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6ca0:	4313      	orrs	r3, r2
    6ca2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6ca4:	683b      	ldr	r3, [r7, #0]
    6ca6:	7c5b      	ldrb	r3, [r3, #17]
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d103      	bne.n	6cb4 <_spi_set_config+0x194>
    6cac:	4b1f      	ldr	r3, [pc, #124]	; (6d2c <_spi_set_config+0x20c>)
    6cae:	4798      	blx	r3
    6cb0:	1e03      	subs	r3, r0, #0
    6cb2:	d003      	beq.n	6cbc <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6cb6:	2280      	movs	r2, #128	; 0x80
    6cb8:	4313      	orrs	r3, r2
    6cba:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    6cbc:	683b      	ldr	r3, [r7, #0]
    6cbe:	7c9b      	ldrb	r3, [r3, #18]
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	d004      	beq.n	6cce <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6cc6:	2280      	movs	r2, #128	; 0x80
    6cc8:	0292      	lsls	r2, r2, #10
    6cca:	4313      	orrs	r3, r2
    6ccc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    6cce:	683b      	ldr	r3, [r7, #0]
    6cd0:	7cdb      	ldrb	r3, [r3, #19]
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d004      	beq.n	6ce0 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6cd8:	2280      	movs	r2, #128	; 0x80
    6cda:	0092      	lsls	r2, r2, #2
    6cdc:	4313      	orrs	r3, r2
    6cde:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    6ce0:	683b      	ldr	r3, [r7, #0]
    6ce2:	7d1b      	ldrb	r3, [r3, #20]
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d004      	beq.n	6cf2 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6cea:	2280      	movs	r2, #128	; 0x80
    6cec:	0192      	lsls	r2, r2, #6
    6cee:	4313      	orrs	r3, r2
    6cf0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    6cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6cf4:	681a      	ldr	r2, [r3, #0]
    6cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6cf8:	431a      	orrs	r2, r3
    6cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6cfc:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    6cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d00:	685a      	ldr	r2, [r3, #4]
    6d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d04:	431a      	orrs	r2, r3
    6d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d08:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    6d0a:	2300      	movs	r3, #0
}
    6d0c:	0018      	movs	r0, r3
    6d0e:	46bd      	mov	sp, r7
    6d10:	b013      	add	sp, #76	; 0x4c
    6d12:	bd90      	pop	{r4, r7, pc}
    6d14:	0000686d 	.word	0x0000686d
    6d18:	0000a871 	.word	0x0000a871
    6d1c:	0000c945 	.word	0x0000c945
    6d20:	0000aa2d 	.word	0x0000aa2d
    6d24:	0000c77d 	.word	0x0000c77d
    6d28:	0000a5a7 	.word	0x0000a5a7
    6d2c:	000069e1 	.word	0x000069e1

00006d30 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6d30:	b590      	push	{r4, r7, lr}
    6d32:	b08b      	sub	sp, #44	; 0x2c
    6d34:	af00      	add	r7, sp, #0
    6d36:	60f8      	str	r0, [r7, #12]
    6d38:	60b9      	str	r1, [r7, #8]
    6d3a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6d3c:	68fb      	ldr	r3, [r7, #12]
    6d3e:	68ba      	ldr	r2, [r7, #8]
    6d40:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    6d42:	68fb      	ldr	r3, [r7, #12]
    6d44:	681b      	ldr	r3, [r3, #0]
    6d46:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6d48:	6a3b      	ldr	r3, [r7, #32]
    6d4a:	681b      	ldr	r3, [r3, #0]
    6d4c:	2202      	movs	r2, #2
    6d4e:	4013      	ands	r3, r2
    6d50:	d001      	beq.n	6d56 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    6d52:	231c      	movs	r3, #28
    6d54:	e09c      	b.n	6e90 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6d56:	6a3b      	ldr	r3, [r7, #32]
    6d58:	681b      	ldr	r3, [r3, #0]
    6d5a:	2201      	movs	r2, #1
    6d5c:	4013      	ands	r3, r2
    6d5e:	d001      	beq.n	6d64 <spi_init+0x34>
		return STATUS_BUSY;
    6d60:	2305      	movs	r3, #5
    6d62:	e095      	b.n	6e90 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6d64:	68fb      	ldr	r3, [r7, #12]
    6d66:	681b      	ldr	r3, [r3, #0]
    6d68:	0018      	movs	r0, r3
    6d6a:	4b4b      	ldr	r3, [pc, #300]	; (6e98 <spi_init+0x168>)
    6d6c:	4798      	blx	r3
    6d6e:	0003      	movs	r3, r0
    6d70:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6d72:	69fb      	ldr	r3, [r7, #28]
    6d74:	3302      	adds	r3, #2
    6d76:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6d78:	69fb      	ldr	r3, [r7, #28]
    6d7a:	3314      	adds	r3, #20
    6d7c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6d7e:	2201      	movs	r2, #1
    6d80:	69bb      	ldr	r3, [r7, #24]
    6d82:	409a      	lsls	r2, r3
    6d84:	0013      	movs	r3, r2
    6d86:	0019      	movs	r1, r3
    6d88:	2002      	movs	r0, #2
    6d8a:	4b44      	ldr	r3, [pc, #272]	; (6e9c <spi_init+0x16c>)
    6d8c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6d8e:	2310      	movs	r3, #16
    6d90:	18fb      	adds	r3, r7, r3
    6d92:	0018      	movs	r0, r3
    6d94:	4b42      	ldr	r3, [pc, #264]	; (6ea0 <spi_init+0x170>)
    6d96:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	2224      	movs	r2, #36	; 0x24
    6d9c:	5c9a      	ldrb	r2, [r3, r2]
    6d9e:	2310      	movs	r3, #16
    6da0:	18fb      	adds	r3, r7, r3
    6da2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6da4:	697b      	ldr	r3, [r7, #20]
    6da6:	b2db      	uxtb	r3, r3
    6da8:	2210      	movs	r2, #16
    6daa:	18ba      	adds	r2, r7, r2
    6dac:	0011      	movs	r1, r2
    6dae:	0018      	movs	r0, r3
    6db0:	4b3c      	ldr	r3, [pc, #240]	; (6ea4 <spi_init+0x174>)
    6db2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6db4:	697b      	ldr	r3, [r7, #20]
    6db6:	b2db      	uxtb	r3, r3
    6db8:	0018      	movs	r0, r3
    6dba:	4b3b      	ldr	r3, [pc, #236]	; (6ea8 <spi_init+0x178>)
    6dbc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6dbe:	687b      	ldr	r3, [r7, #4]
    6dc0:	2224      	movs	r2, #36	; 0x24
    6dc2:	5c9b      	ldrb	r3, [r3, r2]
    6dc4:	2100      	movs	r1, #0
    6dc6:	0018      	movs	r0, r3
    6dc8:	4b38      	ldr	r3, [pc, #224]	; (6eac <spi_init+0x17c>)
    6dca:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    6dcc:	687b      	ldr	r3, [r7, #4]
    6dce:	781b      	ldrb	r3, [r3, #0]
    6dd0:	2b01      	cmp	r3, #1
    6dd2:	d105      	bne.n	6de0 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    6dd4:	6a3b      	ldr	r3, [r7, #32]
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	220c      	movs	r2, #12
    6dda:	431a      	orrs	r2, r3
    6ddc:	6a3b      	ldr	r3, [r7, #32]
    6dde:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    6de0:	2327      	movs	r3, #39	; 0x27
    6de2:	18fb      	adds	r3, r7, r3
    6de4:	2200      	movs	r2, #0
    6de6:	701a      	strb	r2, [r3, #0]
    6de8:	e010      	b.n	6e0c <spi_init+0xdc>
		module->callback[i]        = NULL;
    6dea:	2327      	movs	r3, #39	; 0x27
    6dec:	18fb      	adds	r3, r7, r3
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	68fa      	ldr	r2, [r7, #12]
    6df2:	3302      	adds	r3, #2
    6df4:	009b      	lsls	r3, r3, #2
    6df6:	18d3      	adds	r3, r2, r3
    6df8:	3304      	adds	r3, #4
    6dfa:	2200      	movs	r2, #0
    6dfc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    6dfe:	2327      	movs	r3, #39	; 0x27
    6e00:	18fb      	adds	r3, r7, r3
    6e02:	781a      	ldrb	r2, [r3, #0]
    6e04:	2327      	movs	r3, #39	; 0x27
    6e06:	18fb      	adds	r3, r7, r3
    6e08:	3201      	adds	r2, #1
    6e0a:	701a      	strb	r2, [r3, #0]
    6e0c:	2327      	movs	r3, #39	; 0x27
    6e0e:	18fb      	adds	r3, r7, r3
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	2b06      	cmp	r3, #6
    6e14:	d9e9      	bls.n	6dea <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    6e16:	68fb      	ldr	r3, [r7, #12]
    6e18:	2200      	movs	r2, #0
    6e1a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    6e1c:	68fb      	ldr	r3, [r7, #12]
    6e1e:	2200      	movs	r2, #0
    6e20:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    6e22:	68fb      	ldr	r3, [r7, #12]
    6e24:	2200      	movs	r2, #0
    6e26:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    6e28:	68fb      	ldr	r3, [r7, #12]
    6e2a:	2200      	movs	r2, #0
    6e2c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    6e2e:	68fb      	ldr	r3, [r7, #12]
    6e30:	2236      	movs	r2, #54	; 0x36
    6e32:	2100      	movs	r1, #0
    6e34:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    6e36:	68fb      	ldr	r3, [r7, #12]
    6e38:	2237      	movs	r2, #55	; 0x37
    6e3a:	2100      	movs	r1, #0
    6e3c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    6e3e:	68fb      	ldr	r3, [r7, #12]
    6e40:	2238      	movs	r2, #56	; 0x38
    6e42:	2100      	movs	r1, #0
    6e44:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    6e46:	68fb      	ldr	r3, [r7, #12]
    6e48:	2203      	movs	r2, #3
    6e4a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    6e4c:	68fb      	ldr	r3, [r7, #12]
    6e4e:	2200      	movs	r2, #0
    6e50:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    6e52:	68fb      	ldr	r3, [r7, #12]
    6e54:	681b      	ldr	r3, [r3, #0]
    6e56:	2213      	movs	r2, #19
    6e58:	18bc      	adds	r4, r7, r2
    6e5a:	0018      	movs	r0, r3
    6e5c:	4b0e      	ldr	r3, [pc, #56]	; (6e98 <spi_init+0x168>)
    6e5e:	4798      	blx	r3
    6e60:	0003      	movs	r3, r0
    6e62:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    6e64:	4a12      	ldr	r2, [pc, #72]	; (6eb0 <spi_init+0x180>)
    6e66:	2313      	movs	r3, #19
    6e68:	18fb      	adds	r3, r7, r3
    6e6a:	781b      	ldrb	r3, [r3, #0]
    6e6c:	0011      	movs	r1, r2
    6e6e:	0018      	movs	r0, r3
    6e70:	4b10      	ldr	r3, [pc, #64]	; (6eb4 <spi_init+0x184>)
    6e72:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6e74:	2313      	movs	r3, #19
    6e76:	18fb      	adds	r3, r7, r3
    6e78:	781a      	ldrb	r2, [r3, #0]
    6e7a:	4b0f      	ldr	r3, [pc, #60]	; (6eb8 <spi_init+0x188>)
    6e7c:	0092      	lsls	r2, r2, #2
    6e7e:	68f9      	ldr	r1, [r7, #12]
    6e80:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    6e82:	687a      	ldr	r2, [r7, #4]
    6e84:	68fb      	ldr	r3, [r7, #12]
    6e86:	0011      	movs	r1, r2
    6e88:	0018      	movs	r0, r3
    6e8a:	4b0c      	ldr	r3, [pc, #48]	; (6ebc <spi_init+0x18c>)
    6e8c:	4798      	blx	r3
    6e8e:	0003      	movs	r3, r0
}
    6e90:	0018      	movs	r0, r3
    6e92:	46bd      	mov	sp, r7
    6e94:	b00b      	add	sp, #44	; 0x2c
    6e96:	bd90      	pop	{r4, r7, pc}
    6e98:	0000aa2d 	.word	0x0000aa2d
    6e9c:	00006985 	.word	0x00006985
    6ea0:	0000696d 	.word	0x0000696d
    6ea4:	0000c659 	.word	0x0000c659
    6ea8:	0000c69d 	.word	0x0000c69d
    6eac:	0000a7e5 	.word	0x0000a7e5
    6eb0:	00007109 	.word	0x00007109
    6eb4:	0000b675 	.word	0x0000b675
    6eb8:	20000aac 	.word	0x20000aac
    6ebc:	00006b21 	.word	0x00006b21

00006ec0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	b086      	sub	sp, #24
    6ec4:	af00      	add	r7, sp, #0
    6ec6:	60f8      	str	r0, [r7, #12]
    6ec8:	60b9      	str	r1, [r7, #8]
    6eca:	1dfb      	adds	r3, r7, #7
    6ecc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    6ece:	68fb      	ldr	r3, [r7, #12]
    6ed0:	795b      	ldrb	r3, [r3, #5]
    6ed2:	2b01      	cmp	r3, #1
    6ed4:	d001      	beq.n	6eda <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    6ed6:	2315      	movs	r3, #21
    6ed8:	e05c      	b.n	6f94 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	7a1b      	ldrb	r3, [r3, #8]
    6ede:	2201      	movs	r2, #1
    6ee0:	4053      	eors	r3, r2
    6ee2:	b2db      	uxtb	r3, r3
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d054      	beq.n	6f92 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    6ee8:	1dfb      	adds	r3, r7, #7
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	2b00      	cmp	r3, #0
    6eee:	d04a      	beq.n	6f86 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    6ef0:	68bb      	ldr	r3, [r7, #8]
    6ef2:	785b      	ldrb	r3, [r3, #1]
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d03f      	beq.n	6f78 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    6ef8:	68fb      	ldr	r3, [r7, #12]
    6efa:	0018      	movs	r0, r3
    6efc:	4b27      	ldr	r3, [pc, #156]	; (6f9c <spi_select_slave+0xdc>)
    6efe:	4798      	blx	r3
    6f00:	0003      	movs	r3, r0
    6f02:	001a      	movs	r2, r3
    6f04:	2301      	movs	r3, #1
    6f06:	4053      	eors	r3, r2
    6f08:	b2db      	uxtb	r3, r3
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d007      	beq.n	6f1e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    6f0e:	68bb      	ldr	r3, [r7, #8]
    6f10:	781b      	ldrb	r3, [r3, #0]
    6f12:	2101      	movs	r1, #1
    6f14:	0018      	movs	r0, r3
    6f16:	4b22      	ldr	r3, [pc, #136]	; (6fa0 <spi_select_slave+0xe0>)
    6f18:	4798      	blx	r3
					return STATUS_BUSY;
    6f1a:	2305      	movs	r3, #5
    6f1c:	e03a      	b.n	6f94 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    6f1e:	68bb      	ldr	r3, [r7, #8]
    6f20:	781b      	ldrb	r3, [r3, #0]
    6f22:	2100      	movs	r1, #0
    6f24:	0018      	movs	r0, r3
    6f26:	4b1e      	ldr	r3, [pc, #120]	; (6fa0 <spi_select_slave+0xe0>)
    6f28:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    6f2a:	68bb      	ldr	r3, [r7, #8]
    6f2c:	789b      	ldrb	r3, [r3, #2]
    6f2e:	b29a      	uxth	r2, r3
    6f30:	68fb      	ldr	r3, [r7, #12]
    6f32:	0011      	movs	r1, r2
    6f34:	0018      	movs	r0, r3
    6f36:	4b1b      	ldr	r3, [pc, #108]	; (6fa4 <spi_select_slave+0xe4>)
    6f38:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    6f3a:	68fb      	ldr	r3, [r7, #12]
    6f3c:	79db      	ldrb	r3, [r3, #7]
    6f3e:	2201      	movs	r2, #1
    6f40:	4053      	eors	r3, r2
    6f42:	b2db      	uxtb	r3, r3
    6f44:	2b00      	cmp	r3, #0
    6f46:	d024      	beq.n	6f92 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    6f48:	46c0      	nop			; (mov r8, r8)
    6f4a:	68fb      	ldr	r3, [r7, #12]
    6f4c:	0018      	movs	r0, r3
    6f4e:	4b16      	ldr	r3, [pc, #88]	; (6fa8 <spi_select_slave+0xe8>)
    6f50:	4798      	blx	r3
    6f52:	0003      	movs	r3, r0
    6f54:	001a      	movs	r2, r3
    6f56:	2301      	movs	r3, #1
    6f58:	4053      	eors	r3, r2
    6f5a:	b2db      	uxtb	r3, r3
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d1f4      	bne.n	6f4a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    6f60:	2316      	movs	r3, #22
    6f62:	18fb      	adds	r3, r7, r3
    6f64:	2200      	movs	r2, #0
    6f66:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    6f68:	2316      	movs	r3, #22
    6f6a:	18fa      	adds	r2, r7, r3
    6f6c:	68fb      	ldr	r3, [r7, #12]
    6f6e:	0011      	movs	r1, r2
    6f70:	0018      	movs	r0, r3
    6f72:	4b0e      	ldr	r3, [pc, #56]	; (6fac <spi_select_slave+0xec>)
    6f74:	4798      	blx	r3
    6f76:	e00c      	b.n	6f92 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    6f78:	68bb      	ldr	r3, [r7, #8]
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	2100      	movs	r1, #0
    6f7e:	0018      	movs	r0, r3
    6f80:	4b07      	ldr	r3, [pc, #28]	; (6fa0 <spi_select_slave+0xe0>)
    6f82:	4798      	blx	r3
    6f84:	e005      	b.n	6f92 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    6f86:	68bb      	ldr	r3, [r7, #8]
    6f88:	781b      	ldrb	r3, [r3, #0]
    6f8a:	2101      	movs	r1, #1
    6f8c:	0018      	movs	r0, r3
    6f8e:	4b04      	ldr	r3, [pc, #16]	; (6fa0 <spi_select_slave+0xe0>)
    6f90:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    6f92:	2300      	movs	r3, #0
}
    6f94:	0018      	movs	r0, r3
    6f96:	46bd      	mov	sp, r7
    6f98:	b006      	add	sp, #24
    6f9a:	bd80      	pop	{r7, pc}
    6f9c:	00006a01 	.word	0x00006a01
    6fa0:	00006919 	.word	0x00006919
    6fa4:	00006a51 	.word	0x00006a51
    6fa8:	00006a29 	.word	0x00006a29
    6fac:	00006a99 	.word	0x00006a99

00006fb0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	b084      	sub	sp, #16
    6fb4:	af00      	add	r7, sp, #0
    6fb6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6fb8:	687b      	ldr	r3, [r7, #4]
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    6fbe:	687b      	ldr	r3, [r7, #4]
    6fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6fc2:	781b      	ldrb	r3, [r3, #0]
    6fc4:	b2da      	uxtb	r2, r3
    6fc6:	230e      	movs	r3, #14
    6fc8:	18fb      	adds	r3, r7, r3
    6fca:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    6fcc:	687b      	ldr	r3, [r7, #4]
    6fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6fd0:	1c5a      	adds	r2, r3, #1
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6fd6:	687b      	ldr	r3, [r7, #4]
    6fd8:	799b      	ldrb	r3, [r3, #6]
    6fda:	2b01      	cmp	r3, #1
    6fdc:	d113      	bne.n	7006 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6fe2:	781b      	ldrb	r3, [r3, #0]
    6fe4:	b2db      	uxtb	r3, r3
    6fe6:	021b      	lsls	r3, r3, #8
    6fe8:	b21a      	sxth	r2, r3
    6fea:	230e      	movs	r3, #14
    6fec:	18fb      	adds	r3, r7, r3
    6fee:	2100      	movs	r1, #0
    6ff0:	5e5b      	ldrsh	r3, [r3, r1]
    6ff2:	4313      	orrs	r3, r2
    6ff4:	b21a      	sxth	r2, r3
    6ff6:	230e      	movs	r3, #14
    6ff8:	18fb      	adds	r3, r7, r3
    6ffa:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7000:	1c5a      	adds	r2, r3, #1
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    7006:	230e      	movs	r3, #14
    7008:	18fb      	adds	r3, r7, r3
    700a:	881b      	ldrh	r3, [r3, #0]
    700c:	05db      	lsls	r3, r3, #23
    700e:	0dda      	lsrs	r2, r3, #23
    7010:	68bb      	ldr	r3, [r7, #8]
    7012:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    7014:	687b      	ldr	r3, [r7, #4]
    7016:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    7018:	b29b      	uxth	r3, r3
    701a:	3b01      	subs	r3, #1
    701c:	b29a      	uxth	r2, r3
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	869a      	strh	r2, [r3, #52]	; 0x34
}
    7022:	46c0      	nop			; (mov r8, r8)
    7024:	46bd      	mov	sp, r7
    7026:	b004      	add	sp, #16
    7028:	bd80      	pop	{r7, pc}
	...

0000702c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    702c:	b580      	push	{r7, lr}
    702e:	b084      	sub	sp, #16
    7030:	af00      	add	r7, sp, #0
    7032:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7034:	687b      	ldr	r3, [r7, #4]
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    703a:	4b08      	ldr	r3, [pc, #32]	; (705c <_spi_write_dummy+0x30>)
    703c:	881b      	ldrh	r3, [r3, #0]
    703e:	001a      	movs	r2, r3
    7040:	68fb      	ldr	r3, [r7, #12]
    7042:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    7044:	687b      	ldr	r3, [r7, #4]
    7046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7048:	b29b      	uxth	r3, r3
    704a:	3b01      	subs	r3, #1
    704c:	b29a      	uxth	r2, r3
    704e:	687b      	ldr	r3, [r7, #4]
    7050:	865a      	strh	r2, [r3, #50]	; 0x32
}
    7052:	46c0      	nop			; (mov r8, r8)
    7054:	46bd      	mov	sp, r7
    7056:	b004      	add	sp, #16
    7058:	bd80      	pop	{r7, pc}
    705a:	46c0      	nop			; (mov r8, r8)
    705c:	200006e4 	.word	0x200006e4

00007060 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    7060:	b580      	push	{r7, lr}
    7062:	b084      	sub	sp, #16
    7064:	af00      	add	r7, sp, #0
    7066:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7068:	687b      	ldr	r3, [r7, #4]
    706a:	681b      	ldr	r3, [r3, #0]
    706c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    706e:	230a      	movs	r3, #10
    7070:	18fb      	adds	r3, r7, r3
    7072:	2200      	movs	r2, #0
    7074:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    7076:	68fb      	ldr	r3, [r7, #12]
    7078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    707a:	230a      	movs	r3, #10
    707c:	18fb      	adds	r3, r7, r3
    707e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7084:	b29b      	uxth	r3, r3
    7086:	3b01      	subs	r3, #1
    7088:	b29a      	uxth	r2, r3
    708a:	687b      	ldr	r3, [r7, #4]
    708c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    708e:	46c0      	nop			; (mov r8, r8)
    7090:	46bd      	mov	sp, r7
    7092:	b004      	add	sp, #16
    7094:	bd80      	pop	{r7, pc}

00007096 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    7096:	b580      	push	{r7, lr}
    7098:	b084      	sub	sp, #16
    709a:	af00      	add	r7, sp, #0
    709c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    709e:	687b      	ldr	r3, [r7, #4]
    70a0:	681b      	ldr	r3, [r3, #0]
    70a2:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    70a4:	68fb      	ldr	r3, [r7, #12]
    70a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70a8:	b29a      	uxth	r2, r3
    70aa:	230a      	movs	r3, #10
    70ac:	18fb      	adds	r3, r7, r3
    70ae:	05d2      	lsls	r2, r2, #23
    70b0:	0dd2      	lsrs	r2, r2, #23
    70b2:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    70b4:	687b      	ldr	r3, [r7, #4]
    70b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70b8:	220a      	movs	r2, #10
    70ba:	18ba      	adds	r2, r7, r2
    70bc:	8812      	ldrh	r2, [r2, #0]
    70be:	b2d2      	uxtb	r2, r2
    70c0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70c6:	1c5a      	adds	r2, r3, #1
    70c8:	687b      	ldr	r3, [r7, #4]
    70ca:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    70cc:	687b      	ldr	r3, [r7, #4]
    70ce:	799b      	ldrb	r3, [r3, #6]
    70d0:	2b01      	cmp	r3, #1
    70d2:	d10d      	bne.n	70f0 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    70d4:	687b      	ldr	r3, [r7, #4]
    70d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70d8:	220a      	movs	r2, #10
    70da:	18ba      	adds	r2, r7, r2
    70dc:	8812      	ldrh	r2, [r2, #0]
    70de:	0a12      	lsrs	r2, r2, #8
    70e0:	b292      	uxth	r2, r2
    70e2:	b2d2      	uxtb	r2, r2
    70e4:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ea:	1c5a      	adds	r2, r3, #1
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    70f4:	b29b      	uxth	r3, r3
    70f6:	3b01      	subs	r3, #1
    70f8:	b29a      	uxth	r2, r3
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	861a      	strh	r2, [r3, #48]	; 0x30
}
    70fe:	46c0      	nop			; (mov r8, r8)
    7100:	46bd      	mov	sp, r7
    7102:	b004      	add	sp, #16
    7104:	bd80      	pop	{r7, pc}
	...

00007108 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    7108:	b580      	push	{r7, lr}
    710a:	b086      	sub	sp, #24
    710c:	af00      	add	r7, sp, #0
    710e:	0002      	movs	r2, r0
    7110:	1dfb      	adds	r3, r7, #7
    7112:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    7114:	1dfb      	adds	r3, r7, #7
    7116:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    7118:	4b96      	ldr	r3, [pc, #600]	; (7374 <_spi_interrupt_handler+0x26c>)
    711a:	0092      	lsls	r2, r2, #2
    711c:	58d3      	ldr	r3, [r2, r3]
    711e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7120:	697b      	ldr	r3, [r7, #20]
    7122:	681b      	ldr	r3, [r3, #0]
    7124:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    7126:	697b      	ldr	r3, [r7, #20]
    7128:	2237      	movs	r2, #55	; 0x37
    712a:	5c9a      	ldrb	r2, [r3, r2]
    712c:	697b      	ldr	r3, [r7, #20]
    712e:	2136      	movs	r1, #54	; 0x36
    7130:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    7132:	230f      	movs	r3, #15
    7134:	18fb      	adds	r3, r7, r3
    7136:	400a      	ands	r2, r1
    7138:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    713a:	693b      	ldr	r3, [r7, #16]
    713c:	7e1b      	ldrb	r3, [r3, #24]
    713e:	b2da      	uxtb	r2, r3
    7140:	230c      	movs	r3, #12
    7142:	18fb      	adds	r3, r7, r3
    7144:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    7146:	693b      	ldr	r3, [r7, #16]
    7148:	7d9b      	ldrb	r3, [r3, #22]
    714a:	b2db      	uxtb	r3, r3
    714c:	b29a      	uxth	r2, r3
    714e:	230c      	movs	r3, #12
    7150:	18fb      	adds	r3, r7, r3
    7152:	210c      	movs	r1, #12
    7154:	1879      	adds	r1, r7, r1
    7156:	8809      	ldrh	r1, [r1, #0]
    7158:	400a      	ands	r2, r1
    715a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    715c:	230c      	movs	r3, #12
    715e:	18fb      	adds	r3, r7, r3
    7160:	881b      	ldrh	r3, [r3, #0]
    7162:	2201      	movs	r2, #1
    7164:	4013      	ands	r3, r2
    7166:	d038      	beq.n	71da <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7168:	697b      	ldr	r3, [r7, #20]
    716a:	795b      	ldrb	r3, [r3, #5]
    716c:	2b01      	cmp	r3, #1
    716e:	d110      	bne.n	7192 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    7170:	697b      	ldr	r3, [r7, #20]
    7172:	7a5b      	ldrb	r3, [r3, #9]
    7174:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    7176:	2b00      	cmp	r3, #0
    7178:	d10b      	bne.n	7192 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    717a:	697b      	ldr	r3, [r7, #20]
    717c:	0018      	movs	r0, r3
    717e:	4b7e      	ldr	r3, [pc, #504]	; (7378 <_spi_interrupt_handler+0x270>)
    7180:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    7182:	697b      	ldr	r3, [r7, #20]
    7184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7186:	b29b      	uxth	r3, r3
    7188:	2b00      	cmp	r3, #0
    718a:	d102      	bne.n	7192 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    718c:	693b      	ldr	r3, [r7, #16]
    718e:	2201      	movs	r2, #1
    7190:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    7192:	697b      	ldr	r3, [r7, #20]
    7194:	795b      	ldrb	r3, [r3, #5]
		if (0
    7196:	2b01      	cmp	r3, #1
    7198:	d11f      	bne.n	71da <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    719a:	697b      	ldr	r3, [r7, #20]
    719c:	7a5b      	ldrb	r3, [r3, #9]
    719e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    71a0:	2b00      	cmp	r3, #0
    71a2:	d01a      	beq.n	71da <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    71a4:	697b      	ldr	r3, [r7, #20]
    71a6:	0018      	movs	r0, r3
    71a8:	4b74      	ldr	r3, [pc, #464]	; (737c <_spi_interrupt_handler+0x274>)
    71aa:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    71ac:	697b      	ldr	r3, [r7, #20]
    71ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    71b0:	b29b      	uxth	r3, r3
    71b2:	2b00      	cmp	r3, #0
    71b4:	d111      	bne.n	71da <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    71b6:	693b      	ldr	r3, [r7, #16]
    71b8:	2201      	movs	r2, #1
    71ba:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    71bc:	697b      	ldr	r3, [r7, #20]
    71be:	7a5b      	ldrb	r3, [r3, #9]
    71c0:	b2db      	uxtb	r3, r3
    71c2:	2b01      	cmp	r3, #1
    71c4:	d109      	bne.n	71da <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    71c6:	697b      	ldr	r3, [r7, #20]
    71c8:	79db      	ldrb	r3, [r3, #7]
    71ca:	2201      	movs	r2, #1
    71cc:	4053      	eors	r3, r2
    71ce:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    71d0:	2b00      	cmp	r3, #0
    71d2:	d002      	beq.n	71da <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    71d4:	693b      	ldr	r3, [r7, #16]
    71d6:	2202      	movs	r2, #2
    71d8:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    71da:	230c      	movs	r3, #12
    71dc:	18fb      	adds	r3, r7, r3
    71de:	881b      	ldrh	r3, [r3, #0]
    71e0:	2204      	movs	r2, #4
    71e2:	4013      	ands	r3, r2
    71e4:	d100      	bne.n	71e8 <_spi_interrupt_handler+0xe0>
    71e6:	e07e      	b.n	72e6 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    71e8:	693b      	ldr	r3, [r7, #16]
    71ea:	8b5b      	ldrh	r3, [r3, #26]
    71ec:	b29b      	uxth	r3, r3
    71ee:	001a      	movs	r2, r3
    71f0:	2304      	movs	r3, #4
    71f2:	4013      	ands	r3, r2
    71f4:	d022      	beq.n	723c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    71f6:	697b      	ldr	r3, [r7, #20]
    71f8:	7a5b      	ldrb	r3, [r3, #9]
    71fa:	b2db      	uxtb	r3, r3
    71fc:	2b01      	cmp	r3, #1
    71fe:	d014      	beq.n	722a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    7200:	697b      	ldr	r3, [r7, #20]
    7202:	2238      	movs	r2, #56	; 0x38
    7204:	211e      	movs	r1, #30
    7206:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    7208:	697b      	ldr	r3, [r7, #20]
    720a:	2203      	movs	r2, #3
    720c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    720e:	693b      	ldr	r3, [r7, #16]
    7210:	2205      	movs	r2, #5
    7212:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    7214:	230f      	movs	r3, #15
    7216:	18fb      	adds	r3, r7, r3
    7218:	781b      	ldrb	r3, [r3, #0]
    721a:	2208      	movs	r2, #8
    721c:	4013      	ands	r3, r2
    721e:	d004      	beq.n	722a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    7220:	697b      	ldr	r3, [r7, #20]
    7222:	699b      	ldr	r3, [r3, #24]
    7224:	697a      	ldr	r2, [r7, #20]
    7226:	0010      	movs	r0, r2
    7228:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    722a:	693b      	ldr	r3, [r7, #16]
    722c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    722e:	230a      	movs	r3, #10
    7230:	18fb      	adds	r3, r7, r3
    7232:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7234:	693b      	ldr	r3, [r7, #16]
    7236:	2204      	movs	r2, #4
    7238:	835a      	strh	r2, [r3, #26]
    723a:	e054      	b.n	72e6 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    723c:	697b      	ldr	r3, [r7, #20]
    723e:	7a5b      	ldrb	r3, [r3, #9]
    7240:	b2db      	uxtb	r3, r3
    7242:	2b01      	cmp	r3, #1
    7244:	d11e      	bne.n	7284 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    7246:	697b      	ldr	r3, [r7, #20]
    7248:	0018      	movs	r0, r3
    724a:	4b4d      	ldr	r3, [pc, #308]	; (7380 <_spi_interrupt_handler+0x278>)
    724c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    724e:	697b      	ldr	r3, [r7, #20]
    7250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7252:	b29b      	uxth	r3, r3
    7254:	2b00      	cmp	r3, #0
    7256:	d146      	bne.n	72e6 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    7258:	693b      	ldr	r3, [r7, #16]
    725a:	2204      	movs	r2, #4
    725c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    725e:	697b      	ldr	r3, [r7, #20]
    7260:	2238      	movs	r2, #56	; 0x38
    7262:	2100      	movs	r1, #0
    7264:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    7266:	697b      	ldr	r3, [r7, #20]
    7268:	2203      	movs	r2, #3
    726a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    726c:	230f      	movs	r3, #15
    726e:	18fb      	adds	r3, r7, r3
    7270:	781b      	ldrb	r3, [r3, #0]
    7272:	2201      	movs	r2, #1
    7274:	4013      	ands	r3, r2
    7276:	d036      	beq.n	72e6 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    7278:	697b      	ldr	r3, [r7, #20]
    727a:	68db      	ldr	r3, [r3, #12]
    727c:	697a      	ldr	r2, [r7, #20]
    727e:	0010      	movs	r0, r2
    7280:	4798      	blx	r3
    7282:	e030      	b.n	72e6 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    7284:	697b      	ldr	r3, [r7, #20]
    7286:	0018      	movs	r0, r3
    7288:	4b3e      	ldr	r3, [pc, #248]	; (7384 <_spi_interrupt_handler+0x27c>)
    728a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    728c:	697b      	ldr	r3, [r7, #20]
    728e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    7290:	b29b      	uxth	r3, r3
    7292:	2b00      	cmp	r3, #0
    7294:	d127      	bne.n	72e6 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    7296:	697b      	ldr	r3, [r7, #20]
    7298:	2238      	movs	r2, #56	; 0x38
    729a:	2100      	movs	r1, #0
    729c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    729e:	693b      	ldr	r3, [r7, #16]
    72a0:	2204      	movs	r2, #4
    72a2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    72a4:	697b      	ldr	r3, [r7, #20]
    72a6:	7a5b      	ldrb	r3, [r3, #9]
    72a8:	b2db      	uxtb	r3, r3
    72aa:	2b02      	cmp	r3, #2
    72ac:	d10b      	bne.n	72c6 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    72ae:	230f      	movs	r3, #15
    72b0:	18fb      	adds	r3, r7, r3
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	2204      	movs	r2, #4
    72b6:	4013      	ands	r3, r2
    72b8:	d015      	beq.n	72e6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    72ba:	697b      	ldr	r3, [r7, #20]
    72bc:	695b      	ldr	r3, [r3, #20]
    72be:	697a      	ldr	r2, [r7, #20]
    72c0:	0010      	movs	r0, r2
    72c2:	4798      	blx	r3
    72c4:	e00f      	b.n	72e6 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    72c6:	697b      	ldr	r3, [r7, #20]
    72c8:	7a5b      	ldrb	r3, [r3, #9]
    72ca:	b2db      	uxtb	r3, r3
    72cc:	2b00      	cmp	r3, #0
    72ce:	d10a      	bne.n	72e6 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    72d0:	230f      	movs	r3, #15
    72d2:	18fb      	adds	r3, r7, r3
    72d4:	781b      	ldrb	r3, [r3, #0]
    72d6:	2202      	movs	r2, #2
    72d8:	4013      	ands	r3, r2
    72da:	d004      	beq.n	72e6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    72dc:	697b      	ldr	r3, [r7, #20]
    72de:	691b      	ldr	r3, [r3, #16]
    72e0:	697a      	ldr	r2, [r7, #20]
    72e2:	0010      	movs	r0, r2
    72e4:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    72e6:	230c      	movs	r3, #12
    72e8:	18fb      	adds	r3, r7, r3
    72ea:	881b      	ldrh	r3, [r3, #0]
    72ec:	2202      	movs	r2, #2
    72ee:	4013      	ands	r3, r2
    72f0:	d024      	beq.n	733c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    72f2:	697b      	ldr	r3, [r7, #20]
    72f4:	795b      	ldrb	r3, [r3, #5]
    72f6:	2b01      	cmp	r3, #1
    72f8:	d120      	bne.n	733c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    72fa:	697b      	ldr	r3, [r7, #20]
    72fc:	7a5b      	ldrb	r3, [r3, #9]
    72fe:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    7300:	2b01      	cmp	r3, #1
    7302:	d11b      	bne.n	733c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    7304:	697b      	ldr	r3, [r7, #20]
    7306:	79db      	ldrb	r3, [r3, #7]
    7308:	2201      	movs	r2, #1
    730a:	4053      	eors	r3, r2
    730c:	b2db      	uxtb	r3, r3
    730e:	2b00      	cmp	r3, #0
    7310:	d014      	beq.n	733c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7312:	693b      	ldr	r3, [r7, #16]
    7314:	2202      	movs	r2, #2
    7316:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    7318:	697b      	ldr	r3, [r7, #20]
    731a:	2203      	movs	r2, #3
    731c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    731e:	697b      	ldr	r3, [r7, #20]
    7320:	2238      	movs	r2, #56	; 0x38
    7322:	2100      	movs	r1, #0
    7324:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    7326:	230f      	movs	r3, #15
    7328:	18fb      	adds	r3, r7, r3
    732a:	781b      	ldrb	r3, [r3, #0]
    732c:	2201      	movs	r2, #1
    732e:	4013      	ands	r3, r2
    7330:	d004      	beq.n	733c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    7332:	697b      	ldr	r3, [r7, #20]
    7334:	68db      	ldr	r3, [r3, #12]
    7336:	697a      	ldr	r2, [r7, #20]
    7338:	0010      	movs	r0, r2
    733a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    733c:	230c      	movs	r3, #12
    733e:	18fb      	adds	r3, r7, r3
    7340:	881b      	ldrh	r3, [r3, #0]
    7342:	2280      	movs	r2, #128	; 0x80
    7344:	4013      	ands	r3, r2
    7346:	d010      	beq.n	736a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    7348:	693b      	ldr	r3, [r7, #16]
    734a:	2280      	movs	r2, #128	; 0x80
    734c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    734e:	693b      	ldr	r3, [r7, #16]
    7350:	2280      	movs	r2, #128	; 0x80
    7352:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    7354:	230f      	movs	r3, #15
    7356:	18fb      	adds	r3, r7, r3
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	2240      	movs	r2, #64	; 0x40
    735c:	4013      	ands	r3, r2
    735e:	d004      	beq.n	736a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    7360:	697b      	ldr	r3, [r7, #20]
    7362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7364:	697a      	ldr	r2, [r7, #20]
    7366:	0010      	movs	r0, r2
    7368:	4798      	blx	r3
		}
	}
#  endif
}
    736a:	46c0      	nop			; (mov r8, r8)
    736c:	46bd      	mov	sp, r7
    736e:	b006      	add	sp, #24
    7370:	bd80      	pop	{r7, pc}
    7372:	46c0      	nop			; (mov r8, r8)
    7374:	20000aac 	.word	0x20000aac
    7378:	0000702d 	.word	0x0000702d
    737c:	00006fb1 	.word	0x00006fb1
    7380:	00007061 	.word	0x00007061
    7384:	00007097 	.word	0x00007097

00007388 <system_gclk_chan_get_config_defaults>:
{
    7388:	b580      	push	{r7, lr}
    738a:	b082      	sub	sp, #8
    738c:	af00      	add	r7, sp, #0
    738e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7390:	687b      	ldr	r3, [r7, #4]
    7392:	2200      	movs	r2, #0
    7394:	701a      	strb	r2, [r3, #0]
}
    7396:	46c0      	nop			; (mov r8, r8)
    7398:	46bd      	mov	sp, r7
    739a:	b002      	add	sp, #8
    739c:	bd80      	pop	{r7, pc}
	...

000073a0 <system_apb_clock_set_mask>:
{
    73a0:	b580      	push	{r7, lr}
    73a2:	b082      	sub	sp, #8
    73a4:	af00      	add	r7, sp, #0
    73a6:	0002      	movs	r2, r0
    73a8:	6039      	str	r1, [r7, #0]
    73aa:	1dfb      	adds	r3, r7, #7
    73ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    73ae:	1dfb      	adds	r3, r7, #7
    73b0:	781b      	ldrb	r3, [r3, #0]
    73b2:	2b01      	cmp	r3, #1
    73b4:	d00a      	beq.n	73cc <system_apb_clock_set_mask+0x2c>
    73b6:	2b02      	cmp	r3, #2
    73b8:	d00f      	beq.n	73da <system_apb_clock_set_mask+0x3a>
    73ba:	2b00      	cmp	r3, #0
    73bc:	d114      	bne.n	73e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    73be:	4b0e      	ldr	r3, [pc, #56]	; (73f8 <system_apb_clock_set_mask+0x58>)
    73c0:	4a0d      	ldr	r2, [pc, #52]	; (73f8 <system_apb_clock_set_mask+0x58>)
    73c2:	6991      	ldr	r1, [r2, #24]
    73c4:	683a      	ldr	r2, [r7, #0]
    73c6:	430a      	orrs	r2, r1
    73c8:	619a      	str	r2, [r3, #24]
			break;
    73ca:	e00f      	b.n	73ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    73cc:	4b0a      	ldr	r3, [pc, #40]	; (73f8 <system_apb_clock_set_mask+0x58>)
    73ce:	4a0a      	ldr	r2, [pc, #40]	; (73f8 <system_apb_clock_set_mask+0x58>)
    73d0:	69d1      	ldr	r1, [r2, #28]
    73d2:	683a      	ldr	r2, [r7, #0]
    73d4:	430a      	orrs	r2, r1
    73d6:	61da      	str	r2, [r3, #28]
			break;
    73d8:	e008      	b.n	73ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    73da:	4b07      	ldr	r3, [pc, #28]	; (73f8 <system_apb_clock_set_mask+0x58>)
    73dc:	4a06      	ldr	r2, [pc, #24]	; (73f8 <system_apb_clock_set_mask+0x58>)
    73de:	6a11      	ldr	r1, [r2, #32]
    73e0:	683a      	ldr	r2, [r7, #0]
    73e2:	430a      	orrs	r2, r1
    73e4:	621a      	str	r2, [r3, #32]
			break;
    73e6:	e001      	b.n	73ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    73e8:	2317      	movs	r3, #23
    73ea:	e000      	b.n	73ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    73ec:	2300      	movs	r3, #0
}
    73ee:	0018      	movs	r0, r3
    73f0:	46bd      	mov	sp, r7
    73f2:	b002      	add	sp, #8
    73f4:	bd80      	pop	{r7, pc}
    73f6:	46c0      	nop			; (mov r8, r8)
    73f8:	40000400 	.word	0x40000400

000073fc <system_pinmux_get_config_defaults>:
{
    73fc:	b580      	push	{r7, lr}
    73fe:	b082      	sub	sp, #8
    7400:	af00      	add	r7, sp, #0
    7402:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7404:	687b      	ldr	r3, [r7, #4]
    7406:	2280      	movs	r2, #128	; 0x80
    7408:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    740a:	687b      	ldr	r3, [r7, #4]
    740c:	2200      	movs	r2, #0
    740e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7410:	687b      	ldr	r3, [r7, #4]
    7412:	2201      	movs	r2, #1
    7414:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7416:	687b      	ldr	r3, [r7, #4]
    7418:	2200      	movs	r2, #0
    741a:	70da      	strb	r2, [r3, #3]
}
    741c:	46c0      	nop			; (mov r8, r8)
    741e:	46bd      	mov	sp, r7
    7420:	b002      	add	sp, #8
    7422:	bd80      	pop	{r7, pc}

00007424 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    7424:	b580      	push	{r7, lr}
    7426:	b084      	sub	sp, #16
    7428:	af00      	add	r7, sp, #0
    742a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    742c:	2300      	movs	r3, #0
    742e:	60fb      	str	r3, [r7, #12]
    7430:	e00c      	b.n	744c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    7432:	4b0a      	ldr	r3, [pc, #40]	; (745c <_tcc_get_inst_index+0x38>)
    7434:	68fa      	ldr	r2, [r7, #12]
    7436:	0092      	lsls	r2, r2, #2
    7438:	58d2      	ldr	r2, [r2, r3]
    743a:	687b      	ldr	r3, [r7, #4]
    743c:	429a      	cmp	r2, r3
    743e:	d102      	bne.n	7446 <_tcc_get_inst_index+0x22>
			return i;
    7440:	68fb      	ldr	r3, [r7, #12]
    7442:	b2db      	uxtb	r3, r3
    7444:	e006      	b.n	7454 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    7446:	68fb      	ldr	r3, [r7, #12]
    7448:	3301      	adds	r3, #1
    744a:	60fb      	str	r3, [r7, #12]
    744c:	68fb      	ldr	r3, [r7, #12]
    744e:	2b02      	cmp	r3, #2
    7450:	d9ef      	bls.n	7432 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    7452:	2300      	movs	r3, #0
}
    7454:	0018      	movs	r0, r3
    7456:	46bd      	mov	sp, r7
    7458:	b004      	add	sp, #16
    745a:	bd80      	pop	{r7, pc}
    745c:	000139a4 	.word	0x000139a4

00007460 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    7460:	b590      	push	{r4, r7, lr}
    7462:	b085      	sub	sp, #20
    7464:	af00      	add	r7, sp, #0
    7466:	6078      	str	r0, [r7, #4]
    7468:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    746a:	230f      	movs	r3, #15
    746c:	18fc      	adds	r4, r7, r3
    746e:	683b      	ldr	r3, [r7, #0]
    7470:	0018      	movs	r0, r3
    7472:	4bad      	ldr	r3, [pc, #692]	; (7728 <tcc_get_config_defaults+0x2c8>)
    7474:	4798      	blx	r3
    7476:	0003      	movs	r3, r0
    7478:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    747a:	687b      	ldr	r3, [r7, #4]
    747c:	2200      	movs	r2, #0
    747e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    7480:	230f      	movs	r3, #15
    7482:	18fb      	adds	r3, r7, r3
    7484:	781a      	ldrb	r2, [r3, #0]
    7486:	4ba9      	ldr	r3, [pc, #676]	; (772c <tcc_get_config_defaults+0x2cc>)
    7488:	0092      	lsls	r2, r2, #2
    748a:	58d2      	ldr	r2, [r2, r3]
    748c:	687b      	ldr	r3, [r7, #4]
    748e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    7490:	687b      	ldr	r3, [r7, #4]
    7492:	2200      	movs	r2, #0
    7494:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    7496:	687b      	ldr	r3, [r7, #4]
    7498:	2200      	movs	r2, #0
    749a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    749c:	687b      	ldr	r3, [r7, #4]
    749e:	2200      	movs	r2, #0
    74a0:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    74a2:	687b      	ldr	r3, [r7, #4]
    74a4:	2200      	movs	r2, #0
    74a6:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    74a8:	687b      	ldr	r3, [r7, #4]
    74aa:	2200      	movs	r2, #0
    74ac:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    74ae:	687b      	ldr	r3, [r7, #4]
    74b0:	2200      	movs	r2, #0
    74b2:	61da      	str	r2, [r3, #28]
    74b4:	687b      	ldr	r3, [r7, #4]
    74b6:	2200      	movs	r2, #0
    74b8:	621a      	str	r2, [r3, #32]
    74ba:	687b      	ldr	r3, [r7, #4]
    74bc:	2200      	movs	r2, #0
    74be:	625a      	str	r2, [r3, #36]	; 0x24
    74c0:	687b      	ldr	r3, [r7, #4]
    74c2:	2200      	movs	r2, #0
    74c4:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    74c6:	687b      	ldr	r3, [r7, #4]
    74c8:	2200      	movs	r2, #0
    74ca:	751a      	strb	r2, [r3, #20]
    74cc:	687b      	ldr	r3, [r7, #4]
    74ce:	2200      	movs	r2, #0
    74d0:	755a      	strb	r2, [r3, #21]
    74d2:	687b      	ldr	r3, [r7, #4]
    74d4:	2200      	movs	r2, #0
    74d6:	759a      	strb	r2, [r3, #22]
    74d8:	687b      	ldr	r3, [r7, #4]
    74da:	2200      	movs	r2, #0
    74dc:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    74de:	687b      	ldr	r3, [r7, #4]
    74e0:	2200      	movs	r2, #0
    74e2:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    74e4:	687b      	ldr	r3, [r7, #4]
    74e6:	2200      	movs	r2, #0
    74e8:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    74ea:	687b      	ldr	r3, [r7, #4]
    74ec:	2200      	movs	r2, #0
    74ee:	741a      	strb	r2, [r3, #16]
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	2200      	movs	r2, #0
    74f4:	745a      	strb	r2, [r3, #17]
    74f6:	687b      	ldr	r3, [r7, #4]
    74f8:	2200      	movs	r2, #0
    74fa:	749a      	strb	r2, [r3, #18]
    74fc:	687b      	ldr	r3, [r7, #4]
    74fe:	2200      	movs	r2, #0
    7500:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    7502:	687b      	ldr	r3, [r7, #4]
    7504:	222c      	movs	r2, #44	; 0x2c
    7506:	2100      	movs	r1, #0
    7508:	5499      	strb	r1, [r3, r2]
    750a:	687b      	ldr	r3, [r7, #4]
    750c:	222d      	movs	r2, #45	; 0x2d
    750e:	2100      	movs	r1, #0
    7510:	5499      	strb	r1, [r3, r2]
    7512:	687b      	ldr	r3, [r7, #4]
    7514:	222e      	movs	r2, #46	; 0x2e
    7516:	2100      	movs	r1, #0
    7518:	5499      	strb	r1, [r3, r2]
    751a:	687b      	ldr	r3, [r7, #4]
    751c:	222f      	movs	r2, #47	; 0x2f
    751e:	2100      	movs	r1, #0
    7520:	5499      	strb	r1, [r3, r2]
    7522:	687b      	ldr	r3, [r7, #4]
    7524:	2230      	movs	r2, #48	; 0x30
    7526:	2100      	movs	r1, #0
    7528:	5499      	strb	r1, [r3, r2]
    752a:	687b      	ldr	r3, [r7, #4]
    752c:	2231      	movs	r2, #49	; 0x31
    752e:	2100      	movs	r1, #0
    7530:	5499      	strb	r1, [r3, r2]
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	2232      	movs	r2, #50	; 0x32
    7536:	2100      	movs	r1, #0
    7538:	5499      	strb	r1, [r3, r2]
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	2233      	movs	r2, #51	; 0x33
    753e:	2100      	movs	r1, #0
    7540:	5499      	strb	r1, [r3, r2]
    7542:	687b      	ldr	r3, [r7, #4]
    7544:	2234      	movs	r2, #52	; 0x34
    7546:	2100      	movs	r1, #0
    7548:	5499      	strb	r1, [r3, r2]
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	2235      	movs	r2, #53	; 0x35
    754e:	2100      	movs	r1, #0
    7550:	5499      	strb	r1, [r3, r2]
    7552:	687b      	ldr	r3, [r7, #4]
    7554:	2236      	movs	r2, #54	; 0x36
    7556:	2100      	movs	r1, #0
    7558:	5499      	strb	r1, [r3, r2]
    755a:	687b      	ldr	r3, [r7, #4]
    755c:	2237      	movs	r2, #55	; 0x37
    755e:	2100      	movs	r1, #0
    7560:	5499      	strb	r1, [r3, r2]
    7562:	687b      	ldr	r3, [r7, #4]
    7564:	2238      	movs	r2, #56	; 0x38
    7566:	2100      	movs	r1, #0
    7568:	5499      	strb	r1, [r3, r2]
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	2239      	movs	r2, #57	; 0x39
    756e:	2100      	movs	r1, #0
    7570:	5499      	strb	r1, [r3, r2]
    7572:	687b      	ldr	r3, [r7, #4]
    7574:	223a      	movs	r2, #58	; 0x3a
    7576:	2100      	movs	r1, #0
    7578:	5499      	strb	r1, [r3, r2]
    757a:	687b      	ldr	r3, [r7, #4]
    757c:	223b      	movs	r2, #59	; 0x3b
    757e:	2100      	movs	r1, #0
    7580:	5499      	strb	r1, [r3, r2]
    7582:	687b      	ldr	r3, [r7, #4]
    7584:	223c      	movs	r2, #60	; 0x3c
    7586:	2100      	movs	r1, #0
    7588:	5499      	strb	r1, [r3, r2]
    758a:	687b      	ldr	r3, [r7, #4]
    758c:	223d      	movs	r2, #61	; 0x3d
    758e:	2100      	movs	r1, #0
    7590:	5499      	strb	r1, [r3, r2]
    7592:	687b      	ldr	r3, [r7, #4]
    7594:	223e      	movs	r2, #62	; 0x3e
    7596:	2100      	movs	r1, #0
    7598:	5499      	strb	r1, [r3, r2]
    759a:	687b      	ldr	r3, [r7, #4]
    759c:	223f      	movs	r2, #63	; 0x3f
    759e:	2100      	movs	r1, #0
    75a0:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	2240      	movs	r2, #64	; 0x40
    75a6:	2100      	movs	r1, #0
    75a8:	5499      	strb	r1, [r3, r2]
    75aa:	687b      	ldr	r3, [r7, #4]
    75ac:	2241      	movs	r2, #65	; 0x41
    75ae:	2100      	movs	r1, #0
    75b0:	5499      	strb	r1, [r3, r2]
    75b2:	687b      	ldr	r3, [r7, #4]
    75b4:	2242      	movs	r2, #66	; 0x42
    75b6:	2100      	movs	r1, #0
    75b8:	5499      	strb	r1, [r3, r2]
    75ba:	687b      	ldr	r3, [r7, #4]
    75bc:	2243      	movs	r2, #67	; 0x43
    75be:	2100      	movs	r1, #0
    75c0:	5499      	strb	r1, [r3, r2]
    75c2:	687b      	ldr	r3, [r7, #4]
    75c4:	2244      	movs	r2, #68	; 0x44
    75c6:	2100      	movs	r1, #0
    75c8:	5499      	strb	r1, [r3, r2]
    75ca:	687b      	ldr	r3, [r7, #4]
    75cc:	2245      	movs	r2, #69	; 0x45
    75ce:	2100      	movs	r1, #0
    75d0:	5499      	strb	r1, [r3, r2]
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	2246      	movs	r2, #70	; 0x46
    75d6:	2100      	movs	r1, #0
    75d8:	5499      	strb	r1, [r3, r2]
    75da:	687b      	ldr	r3, [r7, #4]
    75dc:	2247      	movs	r2, #71	; 0x47
    75de:	2100      	movs	r1, #0
    75e0:	5499      	strb	r1, [r3, r2]
    75e2:	687b      	ldr	r3, [r7, #4]
    75e4:	2248      	movs	r2, #72	; 0x48
    75e6:	2100      	movs	r1, #0
    75e8:	5499      	strb	r1, [r3, r2]
    75ea:	687b      	ldr	r3, [r7, #4]
    75ec:	2249      	movs	r2, #73	; 0x49
    75ee:	2100      	movs	r1, #0
    75f0:	5499      	strb	r1, [r3, r2]
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	224a      	movs	r2, #74	; 0x4a
    75f6:	2100      	movs	r1, #0
    75f8:	5499      	strb	r1, [r3, r2]
    75fa:	687b      	ldr	r3, [r7, #4]
    75fc:	224b      	movs	r2, #75	; 0x4b
    75fe:	2100      	movs	r1, #0
    7600:	5499      	strb	r1, [r3, r2]
    7602:	687b      	ldr	r3, [r7, #4]
    7604:	224c      	movs	r2, #76	; 0x4c
    7606:	2100      	movs	r1, #0
    7608:	5499      	strb	r1, [r3, r2]
    760a:	687b      	ldr	r3, [r7, #4]
    760c:	224d      	movs	r2, #77	; 0x4d
    760e:	2100      	movs	r1, #0
    7610:	5499      	strb	r1, [r3, r2]
    7612:	687b      	ldr	r3, [r7, #4]
    7614:	224e      	movs	r2, #78	; 0x4e
    7616:	2100      	movs	r1, #0
    7618:	5499      	strb	r1, [r3, r2]
    761a:	687b      	ldr	r3, [r7, #4]
    761c:	224f      	movs	r2, #79	; 0x4f
    761e:	2100      	movs	r1, #0
    7620:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    7622:	687b      	ldr	r3, [r7, #4]
    7624:	2250      	movs	r2, #80	; 0x50
    7626:	2100      	movs	r1, #0
    7628:	5499      	strb	r1, [r3, r2]
    762a:	687b      	ldr	r3, [r7, #4]
    762c:	2251      	movs	r2, #81	; 0x51
    762e:	2100      	movs	r1, #0
    7630:	5499      	strb	r1, [r3, r2]
    7632:	687b      	ldr	r3, [r7, #4]
    7634:	2252      	movs	r2, #82	; 0x52
    7636:	2100      	movs	r1, #0
    7638:	5499      	strb	r1, [r3, r2]
    763a:	687b      	ldr	r3, [r7, #4]
    763c:	2253      	movs	r2, #83	; 0x53
    763e:	2100      	movs	r1, #0
    7640:	5499      	strb	r1, [r3, r2]
    7642:	687b      	ldr	r3, [r7, #4]
    7644:	2254      	movs	r2, #84	; 0x54
    7646:	2100      	movs	r1, #0
    7648:	5499      	strb	r1, [r3, r2]
    764a:	687b      	ldr	r3, [r7, #4]
    764c:	2255      	movs	r2, #85	; 0x55
    764e:	2100      	movs	r1, #0
    7650:	5499      	strb	r1, [r3, r2]
    7652:	687b      	ldr	r3, [r7, #4]
    7654:	2256      	movs	r2, #86	; 0x56
    7656:	2100      	movs	r1, #0
    7658:	5499      	strb	r1, [r3, r2]
    765a:	687b      	ldr	r3, [r7, #4]
    765c:	2257      	movs	r2, #87	; 0x57
    765e:	2100      	movs	r1, #0
    7660:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	2298      	movs	r2, #152	; 0x98
    7666:	2100      	movs	r1, #0
    7668:	5499      	strb	r1, [r3, r2]
    766a:	687b      	ldr	r3, [r7, #4]
    766c:	2200      	movs	r2, #0
    766e:	659a      	str	r2, [r3, #88]	; 0x58
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	2200      	movs	r2, #0
    7674:	679a      	str	r2, [r3, #120]	; 0x78
    7676:	687b      	ldr	r3, [r7, #4]
    7678:	2299      	movs	r2, #153	; 0x99
    767a:	2100      	movs	r1, #0
    767c:	5499      	strb	r1, [r3, r2]
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	2200      	movs	r2, #0
    7682:	65da      	str	r2, [r3, #92]	; 0x5c
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	2200      	movs	r2, #0
    7688:	67da      	str	r2, [r3, #124]	; 0x7c
    768a:	687b      	ldr	r3, [r7, #4]
    768c:	229a      	movs	r2, #154	; 0x9a
    768e:	2100      	movs	r1, #0
    7690:	5499      	strb	r1, [r3, r2]
    7692:	687b      	ldr	r3, [r7, #4]
    7694:	2200      	movs	r2, #0
    7696:	661a      	str	r2, [r3, #96]	; 0x60
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	2280      	movs	r2, #128	; 0x80
    769c:	2100      	movs	r1, #0
    769e:	5099      	str	r1, [r3, r2]
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	229b      	movs	r2, #155	; 0x9b
    76a4:	2100      	movs	r1, #0
    76a6:	5499      	strb	r1, [r3, r2]
    76a8:	687b      	ldr	r3, [r7, #4]
    76aa:	2200      	movs	r2, #0
    76ac:	665a      	str	r2, [r3, #100]	; 0x64
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	2284      	movs	r2, #132	; 0x84
    76b2:	2100      	movs	r1, #0
    76b4:	5099      	str	r1, [r3, r2]
    76b6:	687b      	ldr	r3, [r7, #4]
    76b8:	229c      	movs	r2, #156	; 0x9c
    76ba:	2100      	movs	r1, #0
    76bc:	5499      	strb	r1, [r3, r2]
    76be:	687b      	ldr	r3, [r7, #4]
    76c0:	2200      	movs	r2, #0
    76c2:	669a      	str	r2, [r3, #104]	; 0x68
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	2288      	movs	r2, #136	; 0x88
    76c8:	2100      	movs	r1, #0
    76ca:	5099      	str	r1, [r3, r2]
    76cc:	687b      	ldr	r3, [r7, #4]
    76ce:	229d      	movs	r2, #157	; 0x9d
    76d0:	2100      	movs	r1, #0
    76d2:	5499      	strb	r1, [r3, r2]
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	2200      	movs	r2, #0
    76d8:	66da      	str	r2, [r3, #108]	; 0x6c
    76da:	687b      	ldr	r3, [r7, #4]
    76dc:	228c      	movs	r2, #140	; 0x8c
    76de:	2100      	movs	r1, #0
    76e0:	5099      	str	r1, [r3, r2]
    76e2:	687b      	ldr	r3, [r7, #4]
    76e4:	229e      	movs	r2, #158	; 0x9e
    76e6:	2100      	movs	r1, #0
    76e8:	5499      	strb	r1, [r3, r2]
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	2200      	movs	r2, #0
    76ee:	671a      	str	r2, [r3, #112]	; 0x70
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	2290      	movs	r2, #144	; 0x90
    76f4:	2100      	movs	r1, #0
    76f6:	5099      	str	r1, [r3, r2]
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	229f      	movs	r2, #159	; 0x9f
    76fc:	2100      	movs	r1, #0
    76fe:	5499      	strb	r1, [r3, r2]
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	2200      	movs	r2, #0
    7704:	675a      	str	r2, [r3, #116]	; 0x74
    7706:	687b      	ldr	r3, [r7, #4]
    7708:	2294      	movs	r2, #148	; 0x94
    770a:	2100      	movs	r1, #0
    770c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    770e:	687b      	ldr	r3, [r7, #4]
    7710:	22a0      	movs	r2, #160	; 0xa0
    7712:	2101      	movs	r1, #1
    7714:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    7716:	687b      	ldr	r3, [r7, #4]
    7718:	22a1      	movs	r2, #161	; 0xa1
    771a:	2100      	movs	r1, #0
    771c:	5499      	strb	r1, [r3, r2]
}
    771e:	46c0      	nop			; (mov r8, r8)
    7720:	46bd      	mov	sp, r7
    7722:	b005      	add	sp, #20
    7724:	bd90      	pop	{r4, r7, pc}
    7726:	46c0      	nop			; (mov r8, r8)
    7728:	00007425 	.word	0x00007425
    772c:	000139c0 	.word	0x000139c0

00007730 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    7730:	b580      	push	{r7, lr}
    7732:	b086      	sub	sp, #24
    7734:	af00      	add	r7, sp, #0
    7736:	60b9      	str	r1, [r7, #8]
    7738:	607a      	str	r2, [r7, #4]
    773a:	230f      	movs	r3, #15
    773c:	18fb      	adds	r3, r7, r3
    773e:	1c02      	adds	r2, r0, #0
    7740:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    7742:	2300      	movs	r3, #0
    7744:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    7746:	2300      	movs	r3, #0
    7748:	613b      	str	r3, [r7, #16]
    774a:	e01d      	b.n	7788 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    774c:	68ba      	ldr	r2, [r7, #8]
    774e:	693b      	ldr	r3, [r7, #16]
    7750:	18d3      	adds	r3, r2, r3
    7752:	3310      	adds	r3, #16
    7754:	781b      	ldrb	r3, [r3, #0]
    7756:	2b01      	cmp	r3, #1
    7758:	d113      	bne.n	7782 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    775a:	230f      	movs	r3, #15
    775c:	18fb      	adds	r3, r7, r3
    775e:	781b      	ldrb	r3, [r3, #0]
    7760:	4a1b      	ldr	r2, [pc, #108]	; (77d0 <_tcc_build_ctrla+0xa0>)
    7762:	5cd3      	ldrb	r3, [r2, r3]
    7764:	001a      	movs	r2, r3
    7766:	693b      	ldr	r3, [r7, #16]
    7768:	429a      	cmp	r2, r3
    776a:	da01      	bge.n	7770 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    776c:	2317      	movs	r3, #23
    776e:	e02a      	b.n	77c6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    7770:	2380      	movs	r3, #128	; 0x80
    7772:	045a      	lsls	r2, r3, #17
    7774:	693b      	ldr	r3, [r7, #16]
    7776:	409a      	lsls	r2, r3
    7778:	0013      	movs	r3, r2
    777a:	001a      	movs	r2, r3
    777c:	697b      	ldr	r3, [r7, #20]
    777e:	4313      	orrs	r3, r2
    7780:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    7782:	693b      	ldr	r3, [r7, #16]
    7784:	3301      	adds	r3, #1
    7786:	613b      	str	r3, [r7, #16]
    7788:	693b      	ldr	r3, [r7, #16]
    778a:	2b03      	cmp	r3, #3
    778c:	ddde      	ble.n	774c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    778e:	68bb      	ldr	r3, [r7, #8]
    7790:	22a1      	movs	r2, #161	; 0xa1
    7792:	5c9b      	ldrb	r3, [r3, r2]
    7794:	2b00      	cmp	r3, #0
    7796:	d004      	beq.n	77a2 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    7798:	697b      	ldr	r3, [r7, #20]
    779a:	2280      	movs	r2, #128	; 0x80
    779c:	0112      	lsls	r2, r2, #4
    779e:	4313      	orrs	r3, r2
    77a0:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    77a2:	68bb      	ldr	r3, [r7, #8]
    77a4:	7b1b      	ldrb	r3, [r3, #12]
    77a6:	031b      	lsls	r3, r3, #12
    77a8:	001a      	movs	r2, r3
    77aa:	697b      	ldr	r3, [r7, #20]
    77ac:	4313      	orrs	r3, r2
    77ae:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    77b0:	68bb      	ldr	r3, [r7, #8]
    77b2:	7adb      	ldrb	r3, [r3, #11]
    77b4:	021b      	lsls	r3, r3, #8
    77b6:	001a      	movs	r2, r3
    77b8:	697b      	ldr	r3, [r7, #20]
    77ba:	4313      	orrs	r3, r2
    77bc:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    77be:	687b      	ldr	r3, [r7, #4]
    77c0:	697a      	ldr	r2, [r7, #20]
    77c2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    77c4:	2300      	movs	r3, #0
}
    77c6:	0018      	movs	r0, r3
    77c8:	46bd      	mov	sp, r7
    77ca:	b006      	add	sp, #24
    77cc:	bd80      	pop	{r7, pc}
    77ce:	46c0      	nop			; (mov r8, r8)
    77d0:	000139cc 	.word	0x000139cc

000077d4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    77d4:	b580      	push	{r7, lr}
    77d6:	b086      	sub	sp, #24
    77d8:	af00      	add	r7, sp, #0
    77da:	60b9      	str	r1, [r7, #8]
    77dc:	607a      	str	r2, [r7, #4]
    77de:	230f      	movs	r3, #15
    77e0:	18fb      	adds	r3, r7, r3
    77e2:	1c02      	adds	r2, r0, #0
    77e4:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    77e6:	2317      	movs	r3, #23
    77e8:	18fb      	adds	r3, r7, r3
    77ea:	2200      	movs	r2, #0
    77ec:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    77ee:	68bb      	ldr	r3, [r7, #8]
    77f0:	7a1b      	ldrb	r3, [r3, #8]
    77f2:	2b00      	cmp	r3, #0
    77f4:	d007      	beq.n	7806 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    77f6:	2317      	movs	r3, #23
    77f8:	18fb      	adds	r3, r7, r3
    77fa:	2217      	movs	r2, #23
    77fc:	18ba      	adds	r2, r7, r2
    77fe:	7812      	ldrb	r2, [r2, #0]
    7800:	2104      	movs	r1, #4
    7802:	430a      	orrs	r2, r1
    7804:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    7806:	68bb      	ldr	r3, [r7, #8]
    7808:	7a5b      	ldrb	r3, [r3, #9]
    780a:	2b01      	cmp	r3, #1
    780c:	d107      	bne.n	781e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    780e:	2317      	movs	r3, #23
    7810:	18fb      	adds	r3, r7, r3
    7812:	2217      	movs	r2, #23
    7814:	18ba      	adds	r2, r7, r2
    7816:	7812      	ldrb	r2, [r2, #0]
    7818:	2101      	movs	r1, #1
    781a:	430a      	orrs	r2, r1
    781c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    781e:	687b      	ldr	r3, [r7, #4]
    7820:	2217      	movs	r2, #23
    7822:	18ba      	adds	r2, r7, r2
    7824:	7812      	ldrb	r2, [r2, #0]
    7826:	701a      	strb	r2, [r3, #0]
}
    7828:	46c0      	nop			; (mov r8, r8)
    782a:	46bd      	mov	sp, r7
    782c:	b006      	add	sp, #24
    782e:	bd80      	pop	{r7, pc}

00007830 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    7830:	b580      	push	{r7, lr}
    7832:	b088      	sub	sp, #32
    7834:	af00      	add	r7, sp, #0
    7836:	60b9      	str	r1, [r7, #8]
    7838:	607a      	str	r2, [r7, #4]
    783a:	230f      	movs	r3, #15
    783c:	18fb      	adds	r3, r7, r3
    783e:	1c02      	adds	r2, r0, #0
    7840:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    7842:	230f      	movs	r3, #15
    7844:	18fb      	adds	r3, r7, r3
    7846:	781a      	ldrb	r2, [r3, #0]
    7848:	231b      	movs	r3, #27
    784a:	18fb      	adds	r3, r7, r3
    784c:	493e      	ldr	r1, [pc, #248]	; (7948 <_tcc_build_faults+0x118>)
    784e:	5c8a      	ldrb	r2, [r1, r2]
    7850:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    7852:	2300      	movs	r3, #0
    7854:	61fb      	str	r3, [r7, #28]
    7856:	e06e      	b.n	7936 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    7858:	69fa      	ldr	r2, [r7, #28]
    785a:	0013      	movs	r3, r2
    785c:	009b      	lsls	r3, r3, #2
    785e:	189b      	adds	r3, r3, r2
    7860:	005b      	lsls	r3, r3, #1
    7862:	3328      	adds	r3, #40	; 0x28
    7864:	68ba      	ldr	r2, [r7, #8]
    7866:	18d3      	adds	r3, r2, r3
    7868:	3304      	adds	r3, #4
    786a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    786c:	697b      	ldr	r3, [r7, #20]
    786e:	7a5b      	ldrb	r3, [r3, #9]
    7870:	221b      	movs	r2, #27
    7872:	18ba      	adds	r2, r7, r2
    7874:	7812      	ldrb	r2, [r2, #0]
    7876:	429a      	cmp	r2, r3
    7878:	d801      	bhi.n	787e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    787a:	2317      	movs	r3, #23
    787c:	e05f      	b.n	793e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    787e:	697b      	ldr	r3, [r7, #20]
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	2b0f      	cmp	r3, #15
    7884:	d901      	bls.n	788a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    7886:	2317      	movs	r3, #23
    7888:	e059      	b.n	793e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    788a:	697b      	ldr	r3, [r7, #20]
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	061b      	lsls	r3, r3, #24
    7890:	001a      	movs	r2, r3
    7892:	23f0      	movs	r3, #240	; 0xf0
    7894:	051b      	lsls	r3, r3, #20
    7896:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    7898:	697b      	ldr	r3, [r7, #20]
    789a:	785b      	ldrb	r3, [r3, #1]
    789c:	041b      	lsls	r3, r3, #16
    789e:	0019      	movs	r1, r3
    78a0:	23ff      	movs	r3, #255	; 0xff
    78a2:	041b      	lsls	r3, r3, #16
    78a4:	400b      	ands	r3, r1
    78a6:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    78a8:	697b      	ldr	r3, [r7, #20]
    78aa:	789b      	ldrb	r3, [r3, #2]
    78ac:	2b00      	cmp	r3, #0
    78ae:	d001      	beq.n	78b4 <_tcc_build_faults+0x84>
    78b0:	2380      	movs	r3, #128	; 0x80
    78b2:	e000      	b.n	78b6 <_tcc_build_faults+0x86>
    78b4:	2300      	movs	r3, #0
    78b6:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    78b8:	697b      	ldr	r3, [r7, #20]
    78ba:	78db      	ldrb	r3, [r3, #3]
    78bc:	2b00      	cmp	r3, #0
    78be:	d001      	beq.n	78c4 <_tcc_build_faults+0x94>
    78c0:	2308      	movs	r3, #8
    78c2:	e000      	b.n	78c6 <_tcc_build_faults+0x96>
    78c4:	2300      	movs	r3, #0
    78c6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    78c8:	697b      	ldr	r3, [r7, #20]
    78ca:	791b      	ldrb	r3, [r3, #4]
    78cc:	2b00      	cmp	r3, #0
    78ce:	d001      	beq.n	78d4 <_tcc_build_faults+0xa4>
    78d0:	2310      	movs	r3, #16
    78d2:	e000      	b.n	78d6 <_tcc_build_faults+0xa6>
    78d4:	2300      	movs	r3, #0
    78d6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    78d8:	697b      	ldr	r3, [r7, #20]
    78da:	795b      	ldrb	r3, [r3, #5]
    78dc:	0019      	movs	r1, r3
    78de:	2303      	movs	r3, #3
    78e0:	400b      	ands	r3, r1
    78e2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    78e4:	697b      	ldr	r3, [r7, #20]
    78e6:	799b      	ldrb	r3, [r3, #6]
    78e8:	015b      	lsls	r3, r3, #5
    78ea:	0019      	movs	r1, r3
    78ec:	2360      	movs	r3, #96	; 0x60
    78ee:	400b      	ands	r3, r1
    78f0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    78f2:	697b      	ldr	r3, [r7, #20]
    78f4:	79db      	ldrb	r3, [r3, #7]
    78f6:	021b      	lsls	r3, r3, #8
    78f8:	0019      	movs	r1, r3
    78fa:	23c0      	movs	r3, #192	; 0xc0
    78fc:	009b      	lsls	r3, r3, #2
    78fe:	400b      	ands	r3, r1
    7900:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    7902:	697b      	ldr	r3, [r7, #20]
    7904:	7a1b      	ldrb	r3, [r3, #8]
    7906:	031b      	lsls	r3, r3, #12
    7908:	0019      	movs	r1, r3
    790a:	23e0      	movs	r3, #224	; 0xe0
    790c:	01db      	lsls	r3, r3, #7
    790e:	400b      	ands	r3, r1
    7910:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    7912:	697b      	ldr	r3, [r7, #20]
    7914:	7a5b      	ldrb	r3, [r3, #9]
    7916:	029b      	lsls	r3, r3, #10
    7918:	0019      	movs	r1, r3
    791a:	23c0      	movs	r3, #192	; 0xc0
    791c:	011b      	lsls	r3, r3, #4
    791e:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7920:	4313      	orrs	r3, r2
    7922:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    7924:	69fb      	ldr	r3, [r7, #28]
    7926:	009b      	lsls	r3, r3, #2
    7928:	687a      	ldr	r2, [r7, #4]
    792a:	18d3      	adds	r3, r2, r3
    792c:	693a      	ldr	r2, [r7, #16]
    792e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    7930:	69fb      	ldr	r3, [r7, #28]
    7932:	3301      	adds	r3, #1
    7934:	61fb      	str	r3, [r7, #28]
    7936:	69fb      	ldr	r3, [r7, #28]
    7938:	2b01      	cmp	r3, #1
    793a:	dd8d      	ble.n	7858 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    793c:	2300      	movs	r3, #0
}
    793e:	0018      	movs	r0, r3
    7940:	46bd      	mov	sp, r7
    7942:	b008      	add	sp, #32
    7944:	bd80      	pop	{r7, pc}
    7946:	46c0      	nop			; (mov r8, r8)
    7948:	000139cc 	.word	0x000139cc

0000794c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    794c:	b580      	push	{r7, lr}
    794e:	b088      	sub	sp, #32
    7950:	af00      	add	r7, sp, #0
    7952:	60b9      	str	r1, [r7, #8]
    7954:	607a      	str	r2, [r7, #4]
    7956:	230f      	movs	r3, #15
    7958:	18fb      	adds	r3, r7, r3
    795a:	1c02      	adds	r2, r0, #0
    795c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    795e:	230f      	movs	r3, #15
    7960:	18fb      	adds	r3, r7, r3
    7962:	781a      	ldrb	r2, [r3, #0]
    7964:	2317      	movs	r3, #23
    7966:	18fb      	adds	r3, r7, r3
    7968:	492d      	ldr	r1, [pc, #180]	; (7a20 <_tcc_build_drvctrl+0xd4>)
    796a:	5c8a      	ldrb	r2, [r1, r2]
    796c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    796e:	2300      	movs	r3, #0
    7970:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7972:	2300      	movs	r3, #0
    7974:	61fb      	str	r3, [r7, #28]
    7976:	e048      	b.n	7a0a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    7978:	68ba      	ldr	r2, [r7, #8]
    797a:	2150      	movs	r1, #80	; 0x50
    797c:	69fb      	ldr	r3, [r7, #28]
    797e:	18d3      	adds	r3, r2, r3
    7980:	185b      	adds	r3, r3, r1
    7982:	781b      	ldrb	r3, [r3, #0]
    7984:	2b00      	cmp	r3, #0
    7986:	d010      	beq.n	79aa <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    7988:	2317      	movs	r3, #23
    798a:	18fb      	adds	r3, r7, r3
    798c:	781a      	ldrb	r2, [r3, #0]
    798e:	69fb      	ldr	r3, [r7, #28]
    7990:	429a      	cmp	r2, r3
    7992:	d801      	bhi.n	7998 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    7994:	2317      	movs	r3, #23
    7996:	e03f      	b.n	7a18 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    7998:	2380      	movs	r3, #128	; 0x80
    799a:	025a      	lsls	r2, r3, #9
    799c:	69fb      	ldr	r3, [r7, #28]
    799e:	409a      	lsls	r2, r3
    79a0:	0013      	movs	r3, r2
    79a2:	001a      	movs	r2, r3
    79a4:	69bb      	ldr	r3, [r7, #24]
    79a6:	4313      	orrs	r3, r2
    79a8:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    79aa:	68ba      	ldr	r2, [r7, #8]
    79ac:	69fb      	ldr	r3, [r7, #28]
    79ae:	331c      	adds	r3, #28
    79b0:	005b      	lsls	r3, r3, #1
    79b2:	18d3      	adds	r3, r2, r3
    79b4:	3309      	adds	r3, #9
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	2b00      	cmp	r3, #0
    79ba:	d023      	beq.n	7a04 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    79bc:	2317      	movs	r3, #23
    79be:	18fb      	adds	r3, r7, r3
    79c0:	781a      	ldrb	r2, [r3, #0]
    79c2:	69fb      	ldr	r3, [r7, #28]
    79c4:	429a      	cmp	r2, r3
    79c6:	d801      	bhi.n	79cc <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    79c8:	2317      	movs	r3, #23
    79ca:	e025      	b.n	7a18 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    79cc:	68ba      	ldr	r2, [r7, #8]
    79ce:	69fb      	ldr	r3, [r7, #28]
    79d0:	331c      	adds	r3, #28
    79d2:	005b      	lsls	r3, r3, #1
    79d4:	18d3      	adds	r3, r2, r3
    79d6:	3309      	adds	r3, #9
    79d8:	781b      	ldrb	r3, [r3, #0]
    79da:	2b02      	cmp	r3, #2
    79dc:	d10a      	bne.n	79f4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    79de:	2302      	movs	r3, #2
    79e0:	33ff      	adds	r3, #255	; 0xff
    79e2:	001a      	movs	r2, r3
    79e4:	69fb      	ldr	r3, [r7, #28]
    79e6:	409a      	lsls	r2, r3
    79e8:	0013      	movs	r3, r2
    79ea:	001a      	movs	r2, r3
    79ec:	69bb      	ldr	r3, [r7, #24]
    79ee:	4313      	orrs	r3, r2
    79f0:	61bb      	str	r3, [r7, #24]
    79f2:	e007      	b.n	7a04 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    79f4:	2201      	movs	r2, #1
    79f6:	69fb      	ldr	r3, [r7, #28]
    79f8:	409a      	lsls	r2, r3
    79fa:	0013      	movs	r3, r2
    79fc:	001a      	movs	r2, r3
    79fe:	69bb      	ldr	r3, [r7, #24]
    7a00:	4313      	orrs	r3, r2
    7a02:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7a04:	69fb      	ldr	r3, [r7, #28]
    7a06:	3301      	adds	r3, #1
    7a08:	61fb      	str	r3, [r7, #28]
    7a0a:	69fb      	ldr	r3, [r7, #28]
    7a0c:	2b07      	cmp	r3, #7
    7a0e:	d9b3      	bls.n	7978 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    7a10:	687b      	ldr	r3, [r7, #4]
    7a12:	69ba      	ldr	r2, [r7, #24]
    7a14:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    7a16:	2300      	movs	r3, #0
}
    7a18:	0018      	movs	r0, r3
    7a1a:	46bd      	mov	sp, r7
    7a1c:	b008      	add	sp, #32
    7a1e:	bd80      	pop	{r7, pc}
    7a20:	000139d0 	.word	0x000139d0

00007a24 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    7a24:	b580      	push	{r7, lr}
    7a26:	b088      	sub	sp, #32
    7a28:	af00      	add	r7, sp, #0
    7a2a:	60b9      	str	r1, [r7, #8]
    7a2c:	607a      	str	r2, [r7, #4]
    7a2e:	230f      	movs	r3, #15
    7a30:	18fb      	adds	r3, r7, r3
    7a32:	1c02      	adds	r2, r0, #0
    7a34:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    7a36:	230f      	movs	r3, #15
    7a38:	18fb      	adds	r3, r7, r3
    7a3a:	781a      	ldrb	r2, [r3, #0]
    7a3c:	2317      	movs	r3, #23
    7a3e:	18fb      	adds	r3, r7, r3
    7a40:	491d      	ldr	r1, [pc, #116]	; (7ab8 <_tcc_build_waves+0x94>)
    7a42:	5c8a      	ldrb	r2, [r1, r2]
    7a44:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    7a46:	68bb      	ldr	r3, [r7, #8]
    7a48:	3310      	adds	r3, #16
    7a4a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    7a4c:	693b      	ldr	r3, [r7, #16]
    7a4e:	7a5b      	ldrb	r3, [r3, #9]
    7a50:	011b      	lsls	r3, r3, #4
    7a52:	001a      	movs	r2, r3
    7a54:	2330      	movs	r3, #48	; 0x30
    7a56:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    7a58:	693b      	ldr	r3, [r7, #16]
    7a5a:	7a1b      	ldrb	r3, [r3, #8]
    7a5c:	0019      	movs	r1, r3
    7a5e:	2307      	movs	r3, #7
    7a60:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    7a62:	4313      	orrs	r3, r2
    7a64:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    7a66:	2300      	movs	r3, #0
    7a68:	61fb      	str	r3, [r7, #28]
    7a6a:	e01a      	b.n	7aa2 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    7a6c:	693a      	ldr	r2, [r7, #16]
    7a6e:	69fb      	ldr	r3, [r7, #28]
    7a70:	18d3      	adds	r3, r2, r3
    7a72:	3304      	adds	r3, #4
    7a74:	781b      	ldrb	r3, [r3, #0]
    7a76:	2b00      	cmp	r3, #0
    7a78:	d010      	beq.n	7a9c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    7a7a:	2317      	movs	r3, #23
    7a7c:	18fb      	adds	r3, r7, r3
    7a7e:	781a      	ldrb	r2, [r3, #0]
    7a80:	69fb      	ldr	r3, [r7, #28]
    7a82:	429a      	cmp	r2, r3
    7a84:	dc01      	bgt.n	7a8a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    7a86:	2317      	movs	r3, #23
    7a88:	e012      	b.n	7ab0 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    7a8a:	2380      	movs	r3, #128	; 0x80
    7a8c:	025a      	lsls	r2, r3, #9
    7a8e:	69fb      	ldr	r3, [r7, #28]
    7a90:	409a      	lsls	r2, r3
    7a92:	0013      	movs	r3, r2
    7a94:	001a      	movs	r2, r3
    7a96:	69bb      	ldr	r3, [r7, #24]
    7a98:	4313      	orrs	r3, r2
    7a9a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    7a9c:	69fb      	ldr	r3, [r7, #28]
    7a9e:	3301      	adds	r3, #1
    7aa0:	61fb      	str	r3, [r7, #28]
    7aa2:	69fb      	ldr	r3, [r7, #28]
    7aa4:	2b03      	cmp	r3, #3
    7aa6:	dde1      	ble.n	7a6c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	69ba      	ldr	r2, [r7, #24]
    7aac:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    7aae:	2300      	movs	r3, #0
}
    7ab0:	0018      	movs	r0, r3
    7ab2:	46bd      	mov	sp, r7
    7ab4:	b008      	add	sp, #32
    7ab6:	bd80      	pop	{r7, pc}
    7ab8:	000139cc 	.word	0x000139cc

00007abc <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    7abc:	b590      	push	{r4, r7, lr}
    7abe:	b091      	sub	sp, #68	; 0x44
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	60f8      	str	r0, [r7, #12]
    7ac4:	60b9      	str	r1, [r7, #8]
    7ac6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    7ac8:	233b      	movs	r3, #59	; 0x3b
    7aca:	18fc      	adds	r4, r7, r3
    7acc:	68bb      	ldr	r3, [r7, #8]
    7ace:	0018      	movs	r0, r3
    7ad0:	4bc4      	ldr	r3, [pc, #784]	; (7de4 <tcc_init+0x328>)
    7ad2:	4798      	blx	r3
    7ad4:	0003      	movs	r3, r0
    7ad6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    7ad8:	233b      	movs	r3, #59	; 0x3b
    7ada:	18fb      	adds	r3, r7, r3
    7adc:	781a      	ldrb	r2, [r3, #0]
    7ade:	4bc2      	ldr	r3, [pc, #776]	; (7de8 <tcc_init+0x32c>)
    7ae0:	0092      	lsls	r2, r2, #2
    7ae2:	58d3      	ldr	r3, [r2, r3]
    7ae4:	0019      	movs	r1, r3
    7ae6:	2002      	movs	r0, #2
    7ae8:	4bc0      	ldr	r3, [pc, #768]	; (7dec <tcc_init+0x330>)
    7aea:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    7aec:	68bb      	ldr	r3, [r7, #8]
    7aee:	681b      	ldr	r3, [r3, #0]
    7af0:	2202      	movs	r2, #2
    7af2:	4013      	ands	r3, r2
    7af4:	d001      	beq.n	7afa <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    7af6:	231c      	movs	r3, #28
    7af8:	e1be      	b.n	7e78 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    7afa:	68bb      	ldr	r3, [r7, #8]
    7afc:	681b      	ldr	r3, [r3, #0]
    7afe:	2201      	movs	r2, #1
    7b00:	4013      	ands	r3, r2
    7b02:	d001      	beq.n	7b08 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    7b04:	231c      	movs	r3, #28
    7b06:	e1b7      	b.n	7e78 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    7b08:	233b      	movs	r3, #59	; 0x3b
    7b0a:	18fb      	adds	r3, r7, r3
    7b0c:	781a      	ldrb	r2, [r3, #0]
    7b0e:	4bb8      	ldr	r3, [pc, #736]	; (7df0 <tcc_init+0x334>)
    7b10:	0092      	lsls	r2, r2, #2
    7b12:	58d3      	ldr	r3, [r2, r3]
    7b14:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	681a      	ldr	r2, [r3, #0]
    7b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7b1c:	429a      	cmp	r2, r3
    7b1e:	d804      	bhi.n	7b2a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    7b20:	687b      	ldr	r3, [r7, #4]
    7b22:	685a      	ldr	r2, [r3, #4]
    7b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7b26:	429a      	cmp	r2, r3
    7b28:	d901      	bls.n	7b2e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    7b2a:	2317      	movs	r3, #23
    7b2c:	e1a4      	b.n	7e78 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    7b2e:	2300      	movs	r3, #0
    7b30:	63fb      	str	r3, [r7, #60]	; 0x3c
    7b32:	e00e      	b.n	7b52 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    7b34:	687a      	ldr	r2, [r7, #4]
    7b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b38:	3306      	adds	r3, #6
    7b3a:	009b      	lsls	r3, r3, #2
    7b3c:	18d3      	adds	r3, r2, r3
    7b3e:	3304      	adds	r3, #4
    7b40:	681a      	ldr	r2, [r3, #0]
    7b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7b44:	429a      	cmp	r2, r3
    7b46:	d901      	bls.n	7b4c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    7b48:	2317      	movs	r3, #23
    7b4a:	e195      	b.n	7e78 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    7b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b4e:	3301      	adds	r3, #1
    7b50:	63fb      	str	r3, [r7, #60]	; 0x3c
    7b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b54:	2b03      	cmp	r3, #3
    7b56:	dded      	ble.n	7b34 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7b58:	2300      	movs	r3, #0
    7b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    7b5c:	e019      	b.n	7b92 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    7b5e:	687a      	ldr	r2, [r7, #4]
    7b60:	2198      	movs	r1, #152	; 0x98
    7b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b64:	18d3      	adds	r3, r2, r3
    7b66:	185b      	adds	r3, r3, r1
    7b68:	781b      	ldrb	r3, [r3, #0]
    7b6a:	2201      	movs	r2, #1
    7b6c:	4053      	eors	r3, r2
    7b6e:	b2db      	uxtb	r3, r3
    7b70:	2b00      	cmp	r3, #0
    7b72:	d10a      	bne.n	7b8a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    7b74:	233b      	movs	r3, #59	; 0x3b
    7b76:	18fb      	adds	r3, r7, r3
    7b78:	781b      	ldrb	r3, [r3, #0]
    7b7a:	4a9e      	ldr	r2, [pc, #632]	; (7df4 <tcc_init+0x338>)
    7b7c:	5cd3      	ldrb	r3, [r2, r3]
    7b7e:	001a      	movs	r2, r3
    7b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b82:	429a      	cmp	r2, r3
    7b84:	dc02      	bgt.n	7b8c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    7b86:	2317      	movs	r3, #23
    7b88:	e176      	b.n	7e78 <tcc_init+0x3bc>
			continue;
    7b8a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b8e:	3301      	adds	r3, #1
    7b90:	63fb      	str	r3, [r7, #60]	; 0x3c
    7b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b94:	2b07      	cmp	r3, #7
    7b96:	dde2      	ble.n	7b5e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    7b98:	2300      	movs	r3, #0
    7b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    7b9c:	2333      	movs	r3, #51	; 0x33
    7b9e:	18fc      	adds	r4, r7, r3
    7ba0:	232c      	movs	r3, #44	; 0x2c
    7ba2:	18fa      	adds	r2, r7, r3
    7ba4:	6879      	ldr	r1, [r7, #4]
    7ba6:	233b      	movs	r3, #59	; 0x3b
    7ba8:	18fb      	adds	r3, r7, r3
    7baa:	781b      	ldrb	r3, [r3, #0]
    7bac:	0018      	movs	r0, r3
    7bae:	4b92      	ldr	r3, [pc, #584]	; (7df8 <tcc_init+0x33c>)
    7bb0:	4798      	blx	r3
    7bb2:	0003      	movs	r3, r0
    7bb4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    7bb6:	2333      	movs	r3, #51	; 0x33
    7bb8:	18fb      	adds	r3, r7, r3
    7bba:	781b      	ldrb	r3, [r3, #0]
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	d003      	beq.n	7bc8 <tcc_init+0x10c>
		return status;
    7bc0:	2333      	movs	r3, #51	; 0x33
    7bc2:	18fb      	adds	r3, r7, r3
    7bc4:	781b      	ldrb	r3, [r3, #0]
    7bc6:	e157      	b.n	7e78 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    7bc8:	232b      	movs	r3, #43	; 0x2b
    7bca:	18fa      	adds	r2, r7, r3
    7bcc:	6879      	ldr	r1, [r7, #4]
    7bce:	233b      	movs	r3, #59	; 0x3b
    7bd0:	18fb      	adds	r3, r7, r3
    7bd2:	781b      	ldrb	r3, [r3, #0]
    7bd4:	0018      	movs	r0, r3
    7bd6:	4b89      	ldr	r3, [pc, #548]	; (7dfc <tcc_init+0x340>)
    7bd8:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    7bda:	2333      	movs	r3, #51	; 0x33
    7bdc:	18fc      	adds	r4, r7, r3
    7bde:	2320      	movs	r3, #32
    7be0:	18fa      	adds	r2, r7, r3
    7be2:	6879      	ldr	r1, [r7, #4]
    7be4:	233b      	movs	r3, #59	; 0x3b
    7be6:	18fb      	adds	r3, r7, r3
    7be8:	781b      	ldrb	r3, [r3, #0]
    7bea:	0018      	movs	r0, r3
    7bec:	4b84      	ldr	r3, [pc, #528]	; (7e00 <tcc_init+0x344>)
    7bee:	4798      	blx	r3
    7bf0:	0003      	movs	r3, r0
    7bf2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    7bf4:	2333      	movs	r3, #51	; 0x33
    7bf6:	18fb      	adds	r3, r7, r3
    7bf8:	781b      	ldrb	r3, [r3, #0]
    7bfa:	2b00      	cmp	r3, #0
    7bfc:	d003      	beq.n	7c06 <tcc_init+0x14a>
		return status;
    7bfe:	2333      	movs	r3, #51	; 0x33
    7c00:	18fb      	adds	r3, r7, r3
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	e138      	b.n	7e78 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    7c06:	2300      	movs	r3, #0
    7c08:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    7c0a:	2333      	movs	r3, #51	; 0x33
    7c0c:	18fc      	adds	r4, r7, r3
    7c0e:	231c      	movs	r3, #28
    7c10:	18fa      	adds	r2, r7, r3
    7c12:	6879      	ldr	r1, [r7, #4]
    7c14:	233b      	movs	r3, #59	; 0x3b
    7c16:	18fb      	adds	r3, r7, r3
    7c18:	781b      	ldrb	r3, [r3, #0]
    7c1a:	0018      	movs	r0, r3
    7c1c:	4b79      	ldr	r3, [pc, #484]	; (7e04 <tcc_init+0x348>)
    7c1e:	4798      	blx	r3
    7c20:	0003      	movs	r3, r0
    7c22:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    7c24:	2333      	movs	r3, #51	; 0x33
    7c26:	18fb      	adds	r3, r7, r3
    7c28:	781b      	ldrb	r3, [r3, #0]
    7c2a:	2b00      	cmp	r3, #0
    7c2c:	d003      	beq.n	7c36 <tcc_init+0x17a>
		return status;
    7c2e:	2333      	movs	r3, #51	; 0x33
    7c30:	18fb      	adds	r3, r7, r3
    7c32:	781b      	ldrb	r3, [r3, #0]
    7c34:	e120      	b.n	7e78 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    7c36:	2333      	movs	r3, #51	; 0x33
    7c38:	18fc      	adds	r4, r7, r3
    7c3a:	2318      	movs	r3, #24
    7c3c:	18fa      	adds	r2, r7, r3
    7c3e:	6879      	ldr	r1, [r7, #4]
    7c40:	233b      	movs	r3, #59	; 0x3b
    7c42:	18fb      	adds	r3, r7, r3
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	0018      	movs	r0, r3
    7c48:	4b6f      	ldr	r3, [pc, #444]	; (7e08 <tcc_init+0x34c>)
    7c4a:	4798      	blx	r3
    7c4c:	0003      	movs	r3, r0
    7c4e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    7c50:	2333      	movs	r3, #51	; 0x33
    7c52:	18fb      	adds	r3, r7, r3
    7c54:	781b      	ldrb	r3, [r3, #0]
    7c56:	2b00      	cmp	r3, #0
    7c58:	d003      	beq.n	7c62 <tcc_init+0x1a6>
		return status;
    7c5a:	2333      	movs	r3, #51	; 0x33
    7c5c:	18fb      	adds	r3, r7, r3
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	e10a      	b.n	7e78 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    7c62:	2300      	movs	r3, #0
    7c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    7c66:	e009      	b.n	7c7c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    7c68:	68fa      	ldr	r2, [r7, #12]
    7c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c6c:	009b      	lsls	r3, r3, #2
    7c6e:	18d3      	adds	r3, r2, r3
    7c70:	3304      	adds	r3, #4
    7c72:	2200      	movs	r2, #0
    7c74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    7c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c78:	3301      	adds	r3, #1
    7c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    7c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c7e:	2b0b      	cmp	r3, #11
    7c80:	ddf2      	ble.n	7c68 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    7c82:	68fb      	ldr	r3, [r7, #12]
    7c84:	2200      	movs	r2, #0
    7c86:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    7c88:	68fb      	ldr	r3, [r7, #12]
    7c8a:	2200      	movs	r2, #0
    7c8c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    7c8e:	233b      	movs	r3, #59	; 0x3b
    7c90:	18fb      	adds	r3, r7, r3
    7c92:	781a      	ldrb	r2, [r3, #0]
    7c94:	4b5d      	ldr	r3, [pc, #372]	; (7e0c <tcc_init+0x350>)
    7c96:	0092      	lsls	r2, r2, #2
    7c98:	68f9      	ldr	r1, [r7, #12]
    7c9a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    7c9c:	68fb      	ldr	r3, [r7, #12]
    7c9e:	68ba      	ldr	r2, [r7, #8]
    7ca0:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    7ca2:	687b      	ldr	r3, [r7, #4]
    7ca4:	22a0      	movs	r2, #160	; 0xa0
    7ca6:	5c99      	ldrb	r1, [r3, r2]
    7ca8:	68fb      	ldr	r3, [r7, #12]
    7caa:	223c      	movs	r2, #60	; 0x3c
    7cac:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    7cae:	2314      	movs	r3, #20
    7cb0:	18fb      	adds	r3, r7, r3
    7cb2:	0018      	movs	r0, r3
    7cb4:	4b56      	ldr	r3, [pc, #344]	; (7e10 <tcc_init+0x354>)
    7cb6:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    7cb8:	687b      	ldr	r3, [r7, #4]
    7cba:	7a9a      	ldrb	r2, [r3, #10]
    7cbc:	2314      	movs	r3, #20
    7cbe:	18fb      	adds	r3, r7, r3
    7cc0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    7cc2:	233b      	movs	r3, #59	; 0x3b
    7cc4:	18fb      	adds	r3, r7, r3
    7cc6:	781b      	ldrb	r3, [r3, #0]
    7cc8:	4a52      	ldr	r2, [pc, #328]	; (7e14 <tcc_init+0x358>)
    7cca:	5cd3      	ldrb	r3, [r2, r3]
    7ccc:	2214      	movs	r2, #20
    7cce:	18ba      	adds	r2, r7, r2
    7cd0:	0011      	movs	r1, r2
    7cd2:	0018      	movs	r0, r3
    7cd4:	4b50      	ldr	r3, [pc, #320]	; (7e18 <tcc_init+0x35c>)
    7cd6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    7cd8:	233b      	movs	r3, #59	; 0x3b
    7cda:	18fb      	adds	r3, r7, r3
    7cdc:	781b      	ldrb	r3, [r3, #0]
    7cde:	4a4d      	ldr	r2, [pc, #308]	; (7e14 <tcc_init+0x358>)
    7ce0:	5cd3      	ldrb	r3, [r2, r3]
    7ce2:	0018      	movs	r0, r3
    7ce4:	4b4d      	ldr	r3, [pc, #308]	; (7e1c <tcc_init+0x360>)
    7ce6:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    7ce8:	2300      	movs	r3, #0
    7cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    7cec:	e02d      	b.n	7d4a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    7cee:	687a      	ldr	r2, [r7, #4]
    7cf0:	2198      	movs	r1, #152	; 0x98
    7cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7cf4:	18d3      	adds	r3, r2, r3
    7cf6:	185b      	adds	r3, r3, r1
    7cf8:	781b      	ldrb	r3, [r3, #0]
    7cfa:	2201      	movs	r2, #1
    7cfc:	4053      	eors	r3, r2
    7cfe:	b2db      	uxtb	r3, r3
    7d00:	2b00      	cmp	r3, #0
    7d02:	d11e      	bne.n	7d42 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    7d04:	2310      	movs	r3, #16
    7d06:	18fb      	adds	r3, r7, r3
    7d08:	0018      	movs	r0, r3
    7d0a:	4b45      	ldr	r3, [pc, #276]	; (7e20 <tcc_init+0x364>)
    7d0c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7d12:	321e      	adds	r2, #30
    7d14:	0092      	lsls	r2, r2, #2
    7d16:	58d3      	ldr	r3, [r2, r3]
    7d18:	b2da      	uxtb	r2, r3
    7d1a:	2310      	movs	r3, #16
    7d1c:	18fb      	adds	r3, r7, r3
    7d1e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    7d20:	2310      	movs	r3, #16
    7d22:	18fb      	adds	r3, r7, r3
    7d24:	2201      	movs	r2, #1
    7d26:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    7d28:	687b      	ldr	r3, [r7, #4]
    7d2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7d2c:	3216      	adds	r2, #22
    7d2e:	0092      	lsls	r2, r2, #2
    7d30:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    7d32:	b2db      	uxtb	r3, r3
    7d34:	2210      	movs	r2, #16
    7d36:	18ba      	adds	r2, r7, r2
    7d38:	0011      	movs	r1, r2
    7d3a:	0018      	movs	r0, r3
    7d3c:	4b39      	ldr	r3, [pc, #228]	; (7e24 <tcc_init+0x368>)
    7d3e:	4798      	blx	r3
    7d40:	e000      	b.n	7d44 <tcc_init+0x288>
			continue;
    7d42:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    7d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7d46:	3301      	adds	r3, #1
    7d48:	63fb      	str	r3, [r7, #60]	; 0x3c
    7d4a:	233b      	movs	r3, #59	; 0x3b
    7d4c:	18fb      	adds	r3, r7, r3
    7d4e:	781b      	ldrb	r3, [r3, #0]
    7d50:	4a28      	ldr	r2, [pc, #160]	; (7df4 <tcc_init+0x338>)
    7d52:	5cd3      	ldrb	r3, [r2, r3]
    7d54:	001a      	movs	r2, r3
    7d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7d58:	429a      	cmp	r2, r3
    7d5a:	dcc8      	bgt.n	7cee <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    7d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7d5e:	68bb      	ldr	r3, [r7, #8]
    7d60:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    7d62:	46c0      	nop			; (mov r8, r8)
    7d64:	68bb      	ldr	r3, [r7, #8]
    7d66:	689b      	ldr	r3, [r3, #8]
    7d68:	2204      	movs	r2, #4
    7d6a:	4013      	ands	r3, r2
    7d6c:	d1fa      	bne.n	7d64 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    7d6e:	68bb      	ldr	r3, [r7, #8]
    7d70:	22ff      	movs	r2, #255	; 0xff
    7d72:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    7d74:	46c0      	nop			; (mov r8, r8)
    7d76:	68bb      	ldr	r3, [r7, #8]
    7d78:	689b      	ldr	r3, [r3, #8]
    7d7a:	2204      	movs	r2, #4
    7d7c:	4013      	ands	r3, r2
    7d7e:	d1fa      	bne.n	7d76 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    7d80:	232b      	movs	r3, #43	; 0x2b
    7d82:	18fb      	adds	r3, r7, r3
    7d84:	781a      	ldrb	r2, [r3, #0]
    7d86:	68bb      	ldr	r3, [r7, #8]
    7d88:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    7d8a:	2320      	movs	r3, #32
    7d8c:	18fb      	adds	r3, r7, r3
    7d8e:	681a      	ldr	r2, [r3, #0]
    7d90:	68bb      	ldr	r3, [r7, #8]
    7d92:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    7d94:	2320      	movs	r3, #32
    7d96:	18fb      	adds	r3, r7, r3
    7d98:	685a      	ldr	r2, [r3, #4]
    7d9a:	68bb      	ldr	r3, [r7, #8]
    7d9c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    7d9e:	69fa      	ldr	r2, [r7, #28]
    7da0:	68bb      	ldr	r3, [r7, #8]
    7da2:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    7da4:	46c0      	nop			; (mov r8, r8)
    7da6:	68bb      	ldr	r3, [r7, #8]
    7da8:	689b      	ldr	r3, [r3, #8]
    7daa:	4a1f      	ldr	r2, [pc, #124]	; (7e28 <tcc_init+0x36c>)
    7dac:	4013      	ands	r3, r2
    7dae:	d1fa      	bne.n	7da6 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    7db0:	69ba      	ldr	r2, [r7, #24]
    7db2:	68bb      	ldr	r3, [r7, #8]
    7db4:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    7db6:	46c0      	nop			; (mov r8, r8)
    7db8:	68bb      	ldr	r3, [r7, #8]
    7dba:	689b      	ldr	r3, [r3, #8]
    7dbc:	2210      	movs	r2, #16
    7dbe:	4013      	ands	r3, r2
    7dc0:	d1fa      	bne.n	7db8 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    7dc2:	687b      	ldr	r3, [r7, #4]
    7dc4:	681a      	ldr	r2, [r3, #0]
    7dc6:	68bb      	ldr	r3, [r7, #8]
    7dc8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    7dca:	46c0      	nop			; (mov r8, r8)
    7dcc:	68bb      	ldr	r3, [r7, #8]
    7dce:	689b      	ldr	r3, [r3, #8]
    7dd0:	4a16      	ldr	r2, [pc, #88]	; (7e2c <tcc_init+0x370>)
    7dd2:	4013      	ands	r3, r2
    7dd4:	d1fa      	bne.n	7dcc <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    7dd6:	687b      	ldr	r3, [r7, #4]
    7dd8:	685a      	ldr	r2, [r3, #4]
    7dda:	68bb      	ldr	r3, [r7, #8]
    7ddc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    7dde:	2300      	movs	r3, #0
    7de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    7de2:	e03f      	b.n	7e64 <tcc_init+0x3a8>
    7de4:	00007425 	.word	0x00007425
    7de8:	000139b4 	.word	0x000139b4
    7dec:	000073a1 	.word	0x000073a1
    7df0:	000139c0 	.word	0x000139c0
    7df4:	000139d0 	.word	0x000139d0
    7df8:	00007731 	.word	0x00007731
    7dfc:	000077d5 	.word	0x000077d5
    7e00:	00007831 	.word	0x00007831
    7e04:	0000794d 	.word	0x0000794d
    7e08:	00007a25 	.word	0x00007a25
    7e0c:	200006e8 	.word	0x200006e8
    7e10:	00007389 	.word	0x00007389
    7e14:	000139b0 	.word	0x000139b0
    7e18:	0000c659 	.word	0x0000c659
    7e1c:	0000c69d 	.word	0x0000c69d
    7e20:	000073fd 	.word	0x000073fd
    7e24:	0000c945 	.word	0x0000c945
    7e28:	00020040 	.word	0x00020040
    7e2c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    7e30:	46c0      	nop			; (mov r8, r8)
    7e32:	68bb      	ldr	r3, [r7, #8]
    7e34:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    7e36:	4912      	ldr	r1, [pc, #72]	; (7e80 <tcc_init+0x3c4>)
    7e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7e3a:	4091      	lsls	r1, r2
    7e3c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    7e3e:	4013      	ands	r3, r2
    7e40:	d1f7      	bne.n	7e32 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    7e42:	687a      	ldr	r2, [r7, #4]
    7e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7e46:	3306      	adds	r3, #6
    7e48:	009b      	lsls	r3, r3, #2
    7e4a:	18d3      	adds	r3, r2, r3
    7e4c:	3304      	adds	r3, #4
    7e4e:	681a      	ldr	r2, [r3, #0]
    7e50:	68b9      	ldr	r1, [r7, #8]
    7e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7e54:	3310      	adds	r3, #16
    7e56:	009b      	lsls	r3, r3, #2
    7e58:	18cb      	adds	r3, r1, r3
    7e5a:	3304      	adds	r3, #4
    7e5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    7e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7e60:	3301      	adds	r3, #1
    7e62:	63fb      	str	r3, [r7, #60]	; 0x3c
    7e64:	233b      	movs	r3, #59	; 0x3b
    7e66:	18fb      	adds	r3, r7, r3
    7e68:	781b      	ldrb	r3, [r3, #0]
    7e6a:	4a06      	ldr	r2, [pc, #24]	; (7e84 <tcc_init+0x3c8>)
    7e6c:	5cd3      	ldrb	r3, [r2, r3]
    7e6e:	001a      	movs	r2, r3
    7e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7e72:	429a      	cmp	r2, r3
    7e74:	dcdc      	bgt.n	7e30 <tcc_init+0x374>
	}

	return STATUS_OK;
    7e76:	2300      	movs	r3, #0
}
    7e78:	0018      	movs	r0, r3
    7e7a:	46bd      	mov	sp, r7
    7e7c:	b011      	add	sp, #68	; 0x44
    7e7e:	bd90      	pop	{r4, r7, pc}
    7e80:	00080100 	.word	0x00080100
    7e84:	000139cc 	.word	0x000139cc

00007e88 <system_interrupt_enable>:
{
    7e88:	b580      	push	{r7, lr}
    7e8a:	b082      	sub	sp, #8
    7e8c:	af00      	add	r7, sp, #0
    7e8e:	0002      	movs	r2, r0
    7e90:	1dfb      	adds	r3, r7, #7
    7e92:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7e94:	4b06      	ldr	r3, [pc, #24]	; (7eb0 <system_interrupt_enable+0x28>)
    7e96:	1dfa      	adds	r2, r7, #7
    7e98:	7812      	ldrb	r2, [r2, #0]
    7e9a:	0011      	movs	r1, r2
    7e9c:	221f      	movs	r2, #31
    7e9e:	400a      	ands	r2, r1
    7ea0:	2101      	movs	r1, #1
    7ea2:	4091      	lsls	r1, r2
    7ea4:	000a      	movs	r2, r1
    7ea6:	601a      	str	r2, [r3, #0]
}
    7ea8:	46c0      	nop			; (mov r8, r8)
    7eaa:	46bd      	mov	sp, r7
    7eac:	b002      	add	sp, #8
    7eae:	bd80      	pop	{r7, pc}
    7eb0:	e000e100 	.word	0xe000e100

00007eb4 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    7eb4:	b580      	push	{r7, lr}
    7eb6:	b082      	sub	sp, #8
    7eb8:	af00      	add	r7, sp, #0
    7eba:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    7ebc:	4a04      	ldr	r2, [pc, #16]	; (7ed0 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    7ebe:	687b      	ldr	r3, [r7, #4]
    7ec0:	18d3      	adds	r3, r2, r3
    7ec2:	781b      	ldrb	r3, [r3, #0]
    7ec4:	b25b      	sxtb	r3, r3
}
    7ec6:	0018      	movs	r0, r3
    7ec8:	46bd      	mov	sp, r7
    7eca:	b002      	add	sp, #8
    7ecc:	bd80      	pop	{r7, pc}
    7ece:	46c0      	nop			; (mov r8, r8)
    7ed0:	20000004 	.word	0x20000004

00007ed4 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    7ed4:	b580      	push	{r7, lr}
    7ed6:	b084      	sub	sp, #16
    7ed8:	af00      	add	r7, sp, #0
    7eda:	60f8      	str	r0, [r7, #12]
    7edc:	60b9      	str	r1, [r7, #8]
    7ede:	1dfb      	adds	r3, r7, #7
    7ee0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7ee2:	1dfb      	adds	r3, r7, #7
    7ee4:	781b      	ldrb	r3, [r3, #0]
    7ee6:	68fa      	ldr	r2, [r7, #12]
    7ee8:	009b      	lsls	r3, r3, #2
    7eea:	18d3      	adds	r3, r2, r3
    7eec:	3304      	adds	r3, #4
    7eee:	68ba      	ldr	r2, [r7, #8]
    7ef0:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    7ef2:	68fb      	ldr	r3, [r7, #12]
    7ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    7ef6:	1dfb      	adds	r3, r7, #7
    7ef8:	7819      	ldrb	r1, [r3, #0]
    7efa:	4b05      	ldr	r3, [pc, #20]	; (7f10 <tcc_register_callback+0x3c>)
    7efc:	0089      	lsls	r1, r1, #2
    7efe:	58cb      	ldr	r3, [r1, r3]
    7f00:	431a      	orrs	r2, r3
    7f02:	68fb      	ldr	r3, [r7, #12]
    7f04:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    7f06:	2300      	movs	r3, #0
}
    7f08:	0018      	movs	r0, r3
    7f0a:	46bd      	mov	sp, r7
    7f0c:	b004      	add	sp, #16
    7f0e:	bd80      	pop	{r7, pc}
    7f10:	000139d4 	.word	0x000139d4

00007f14 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	b082      	sub	sp, #8
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
    7f1c:	000a      	movs	r2, r1
    7f1e:	1cfb      	adds	r3, r7, #3
    7f20:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	681b      	ldr	r3, [r3, #0]
    7f26:	0018      	movs	r0, r3
    7f28:	4b0f      	ldr	r3, [pc, #60]	; (7f68 <tcc_enable_callback+0x54>)
    7f2a:	4798      	blx	r3
    7f2c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    7f2e:	0018      	movs	r0, r3
    7f30:	4b0e      	ldr	r3, [pc, #56]	; (7f6c <tcc_enable_callback+0x58>)
    7f32:	4798      	blx	r3
    7f34:	0003      	movs	r3, r0
    7f36:	0018      	movs	r0, r3
    7f38:	4b0d      	ldr	r3, [pc, #52]	; (7f70 <tcc_enable_callback+0x5c>)
    7f3a:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    7f3c:	687b      	ldr	r3, [r7, #4]
    7f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7f40:	1cfb      	adds	r3, r7, #3
    7f42:	7819      	ldrb	r1, [r3, #0]
    7f44:	4b0b      	ldr	r3, [pc, #44]	; (7f74 <tcc_enable_callback+0x60>)
    7f46:	0089      	lsls	r1, r1, #2
    7f48:	58cb      	ldr	r3, [r1, r3]
    7f4a:	431a      	orrs	r2, r3
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    7f50:	687b      	ldr	r3, [r7, #4]
    7f52:	681b      	ldr	r3, [r3, #0]
    7f54:	1cfa      	adds	r2, r7, #3
    7f56:	7811      	ldrb	r1, [r2, #0]
    7f58:	4a06      	ldr	r2, [pc, #24]	; (7f74 <tcc_enable_callback+0x60>)
    7f5a:	0089      	lsls	r1, r1, #2
    7f5c:	588a      	ldr	r2, [r1, r2]
    7f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
    7f60:	46c0      	nop			; (mov r8, r8)
    7f62:	46bd      	mov	sp, r7
    7f64:	b002      	add	sp, #8
    7f66:	bd80      	pop	{r7, pc}
    7f68:	00007425 	.word	0x00007425
    7f6c:	00007eb5 	.word	0x00007eb5
    7f70:	00007e89 	.word	0x00007e89
    7f74:	000139d4 	.word	0x000139d4

00007f78 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    7f78:	b580      	push	{r7, lr}
    7f7a:	af00      	add	r7, sp, #0
    7f7c:	2000      	movs	r0, #0
    7f7e:	4b02      	ldr	r3, [pc, #8]	; (7f88 <TCC0_Handler+0x10>)
    7f80:	4798      	blx	r3
    7f82:	46c0      	nop			; (mov r8, r8)
    7f84:	46bd      	mov	sp, r7
    7f86:	bd80      	pop	{r7, pc}
    7f88:	00007fb5 	.word	0x00007fb5

00007f8c <TCC1_Handler>:
    7f8c:	b580      	push	{r7, lr}
    7f8e:	af00      	add	r7, sp, #0
    7f90:	2001      	movs	r0, #1
    7f92:	4b02      	ldr	r3, [pc, #8]	; (7f9c <TCC1_Handler+0x10>)
    7f94:	4798      	blx	r3
    7f96:	46c0      	nop			; (mov r8, r8)
    7f98:	46bd      	mov	sp, r7
    7f9a:	bd80      	pop	{r7, pc}
    7f9c:	00007fb5 	.word	0x00007fb5

00007fa0 <TCC2_Handler>:
    7fa0:	b580      	push	{r7, lr}
    7fa2:	af00      	add	r7, sp, #0
    7fa4:	2002      	movs	r0, #2
    7fa6:	4b02      	ldr	r3, [pc, #8]	; (7fb0 <TCC2_Handler+0x10>)
    7fa8:	4798      	blx	r3
    7faa:	46c0      	nop			; (mov r8, r8)
    7fac:	46bd      	mov	sp, r7
    7fae:	bd80      	pop	{r7, pc}
    7fb0:	00007fb5 	.word	0x00007fb5

00007fb4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    7fb4:	b580      	push	{r7, lr}
    7fb6:	b086      	sub	sp, #24
    7fb8:	af00      	add	r7, sp, #0
    7fba:	0002      	movs	r2, r0
    7fbc:	1dfb      	adds	r3, r7, #7
    7fbe:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    7fc0:	1dfb      	adds	r3, r7, #7
    7fc2:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    7fc4:	4b18      	ldr	r3, [pc, #96]	; (8028 <_tcc_interrupt_handler+0x74>)
    7fc6:	0092      	lsls	r2, r2, #2
    7fc8:	58d3      	ldr	r3, [r2, r3]
    7fca:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    7fcc:	693b      	ldr	r3, [r7, #16]
    7fce:	681b      	ldr	r3, [r3, #0]
    7fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    7fd2:	693b      	ldr	r3, [r7, #16]
    7fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    7fd6:	401a      	ands	r2, r3
			module->enable_callback_mask);
    7fd8:	693b      	ldr	r3, [r7, #16]
    7fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    7fdc:	4013      	ands	r3, r2
    7fde:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    7fe0:	2300      	movs	r3, #0
    7fe2:	617b      	str	r3, [r7, #20]
    7fe4:	e019      	b.n	801a <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    7fe6:	4b11      	ldr	r3, [pc, #68]	; (802c <_tcc_interrupt_handler+0x78>)
    7fe8:	697a      	ldr	r2, [r7, #20]
    7fea:	0092      	lsls	r2, r2, #2
    7fec:	58d3      	ldr	r3, [r2, r3]
    7fee:	68fa      	ldr	r2, [r7, #12]
    7ff0:	4013      	ands	r3, r2
    7ff2:	d00f      	beq.n	8014 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    7ff4:	693a      	ldr	r2, [r7, #16]
    7ff6:	697b      	ldr	r3, [r7, #20]
    7ff8:	009b      	lsls	r3, r3, #2
    7ffa:	18d3      	adds	r3, r2, r3
    7ffc:	3304      	adds	r3, #4
    7ffe:	681b      	ldr	r3, [r3, #0]
    8000:	693a      	ldr	r2, [r7, #16]
    8002:	0010      	movs	r0, r2
    8004:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    8006:	693b      	ldr	r3, [r7, #16]
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	4a08      	ldr	r2, [pc, #32]	; (802c <_tcc_interrupt_handler+0x78>)
    800c:	6979      	ldr	r1, [r7, #20]
    800e:	0089      	lsls	r1, r1, #2
    8010:	588a      	ldr	r2, [r1, r2]
    8012:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    8014:	697b      	ldr	r3, [r7, #20]
    8016:	3301      	adds	r3, #1
    8018:	617b      	str	r3, [r7, #20]
    801a:	697b      	ldr	r3, [r7, #20]
    801c:	2b0b      	cmp	r3, #11
    801e:	dde2      	ble.n	7fe6 <_tcc_interrupt_handler+0x32>
		}
	}
}
    8020:	46c0      	nop			; (mov r8, r8)
    8022:	46bd      	mov	sp, r7
    8024:	b006      	add	sp, #24
    8026:	bd80      	pop	{r7, pc}
    8028:	200006e8 	.word	0x200006e8
    802c:	000139d4 	.word	0x000139d4

00008030 <stream_writer_init>:
#include "iot/stream_writer.h"
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    8030:	b580      	push	{r7, lr}
    8032:	b084      	sub	sp, #16
    8034:	af00      	add	r7, sp, #0
    8036:	60f8      	str	r0, [r7, #12]
    8038:	60b9      	str	r1, [r7, #8]
    803a:	607a      	str	r2, [r7, #4]
    803c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    803e:	68fb      	ldr	r3, [r7, #12]
    8040:	687a      	ldr	r2, [r7, #4]
    8042:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    8044:	68fb      	ldr	r3, [r7, #12]
    8046:	68ba      	ldr	r2, [r7, #8]
    8048:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    804a:	68fb      	ldr	r3, [r7, #12]
    804c:	2200      	movs	r2, #0
    804e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    8050:	68fb      	ldr	r3, [r7, #12]
    8052:	683a      	ldr	r2, [r7, #0]
    8054:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    8056:	68fb      	ldr	r3, [r7, #12]
    8058:	69ba      	ldr	r2, [r7, #24]
    805a:	60da      	str	r2, [r3, #12]
}
    805c:	46c0      	nop			; (mov r8, r8)
    805e:	46bd      	mov	sp, r7
    8060:	b004      	add	sp, #16
    8062:	bd80      	pop	{r7, pc}

00008064 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    8064:	b580      	push	{r7, lr}
    8066:	b084      	sub	sp, #16
    8068:	af00      	add	r7, sp, #0
    806a:	6078      	str	r0, [r7, #4]
    806c:	000a      	movs	r2, r1
    806e:	1cfb      	adds	r3, r7, #3
    8070:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    8072:	687b      	ldr	r3, [r7, #4]
    8074:	681a      	ldr	r2, [r3, #0]
    8076:	687b      	ldr	r3, [r7, #4]
    8078:	685b      	ldr	r3, [r3, #4]
    807a:	1ad3      	subs	r3, r2, r3
    807c:	60fb      	str	r3, [r7, #12]

	if (remain < 1) {
    807e:	68fb      	ldr	r3, [r7, #12]
    8080:	2b00      	cmp	r3, #0
    8082:	dc03      	bgt.n	808c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	0018      	movs	r0, r3
    8088:	4b08      	ldr	r3, [pc, #32]	; (80ac <stream_writer_send_8+0x48>)
    808a:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	6919      	ldr	r1, [r3, #16]
    8090:	687b      	ldr	r3, [r7, #4]
    8092:	685b      	ldr	r3, [r3, #4]
    8094:	1c58      	adds	r0, r3, #1
    8096:	687a      	ldr	r2, [r7, #4]
    8098:	6050      	str	r0, [r2, #4]
    809a:	18cb      	adds	r3, r1, r3
    809c:	1cfa      	adds	r2, r7, #3
    809e:	7812      	ldrb	r2, [r2, #0]
    80a0:	701a      	strb	r2, [r3, #0]
}
    80a2:	46c0      	nop			; (mov r8, r8)
    80a4:	46bd      	mov	sp, r7
    80a6:	b004      	add	sp, #16
    80a8:	bd80      	pop	{r7, pc}
    80aa:	46c0      	nop			; (mov r8, r8)
    80ac:	0000812d 	.word	0x0000812d

000080b0 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    80b0:	b580      	push	{r7, lr}
    80b2:	b082      	sub	sp, #8
    80b4:	af00      	add	r7, sp, #0
    80b6:	6078      	str	r0, [r7, #4]
    80b8:	000a      	movs	r2, r1
    80ba:	1cbb      	adds	r3, r7, #2
    80bc:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    80be:	1cbb      	adds	r3, r7, #2
    80c0:	2200      	movs	r2, #0
    80c2:	5e9b      	ldrsh	r3, [r3, r2]
    80c4:	121b      	asrs	r3, r3, #8
    80c6:	b21b      	sxth	r3, r3
    80c8:	b25a      	sxtb	r2, r3
    80ca:	687b      	ldr	r3, [r7, #4]
    80cc:	0011      	movs	r1, r2
    80ce:	0018      	movs	r0, r3
    80d0:	4b06      	ldr	r3, [pc, #24]	; (80ec <stream_writer_send_16BE+0x3c>)
    80d2:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
    80d4:	1cbb      	adds	r3, r7, #2
    80d6:	881b      	ldrh	r3, [r3, #0]
    80d8:	b25a      	sxtb	r2, r3
    80da:	687b      	ldr	r3, [r7, #4]
    80dc:	0011      	movs	r1, r2
    80de:	0018      	movs	r0, r3
    80e0:	4b02      	ldr	r3, [pc, #8]	; (80ec <stream_writer_send_16BE+0x3c>)
    80e2:	4798      	blx	r3
}
    80e4:	46c0      	nop			; (mov r8, r8)
    80e6:	46bd      	mov	sp, r7
    80e8:	b002      	add	sp, #8
    80ea:	bd80      	pop	{r7, pc}
    80ec:	00008065 	.word	0x00008065

000080f0 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    80f0:	b580      	push	{r7, lr}
    80f2:	b084      	sub	sp, #16
    80f4:	af00      	add	r7, sp, #0
    80f6:	60f8      	str	r0, [r7, #12]
    80f8:	60b9      	str	r1, [r7, #8]
    80fa:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    80fc:	e00d      	b.n	811a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    80fe:	68bb      	ldr	r3, [r7, #8]
    8100:	781b      	ldrb	r3, [r3, #0]
    8102:	b25a      	sxtb	r2, r3
    8104:	68fb      	ldr	r3, [r7, #12]
    8106:	0011      	movs	r1, r2
    8108:	0018      	movs	r0, r3
    810a:	4b07      	ldr	r3, [pc, #28]	; (8128 <stream_writer_send_buffer+0x38>)
    810c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	3b01      	subs	r3, #1
    8112:	607b      	str	r3, [r7, #4]
    8114:	68bb      	ldr	r3, [r7, #8]
    8116:	3301      	adds	r3, #1
    8118:	60bb      	str	r3, [r7, #8]
    811a:	687b      	ldr	r3, [r7, #4]
    811c:	2b00      	cmp	r3, #0
    811e:	d1ee      	bne.n	80fe <stream_writer_send_buffer+0xe>
	}
}
    8120:	46c0      	nop			; (mov r8, r8)
    8122:	46bd      	mov	sp, r7
    8124:	b004      	add	sp, #16
    8126:	bd80      	pop	{r7, pc}
    8128:	00008065 	.word	0x00008065

0000812c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    812c:	b590      	push	{r4, r7, lr}
    812e:	b083      	sub	sp, #12
    8130:	af00      	add	r7, sp, #0
    8132:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    8134:	687b      	ldr	r3, [r7, #4]
    8136:	685b      	ldr	r3, [r3, #4]
    8138:	2b00      	cmp	r3, #0
    813a:	d00c      	beq.n	8156 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    813c:	687b      	ldr	r3, [r7, #4]
    813e:	689c      	ldr	r4, [r3, #8]
    8140:	687b      	ldr	r3, [r7, #4]
    8142:	68d8      	ldr	r0, [r3, #12]
    8144:	687b      	ldr	r3, [r7, #4]
    8146:	6919      	ldr	r1, [r3, #16]
    8148:	687b      	ldr	r3, [r7, #4]
    814a:	685b      	ldr	r3, [r3, #4]
    814c:	001a      	movs	r2, r3
    814e:	47a0      	blx	r4
		writer->written = 0;
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	2200      	movs	r2, #0
    8154:	605a      	str	r2, [r3, #4]
	}
}
    8156:	46c0      	nop			; (mov r8, r8)
    8158:	46bd      	mov	sp, r7
    815a:	b003      	add	sp, #12
    815c:	bd90      	pop	{r4, r7, pc}
	...

00008160 <system_cpu_clock_get_hz>:
{
    8160:	b580      	push	{r7, lr}
    8162:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    8164:	2000      	movs	r0, #0
    8166:	4b05      	ldr	r3, [pc, #20]	; (817c <system_cpu_clock_get_hz+0x1c>)
    8168:	4798      	blx	r3
    816a:	0002      	movs	r2, r0
    816c:	4b04      	ldr	r3, [pc, #16]	; (8180 <system_cpu_clock_get_hz+0x20>)
    816e:	7a1b      	ldrb	r3, [r3, #8]
    8170:	b2db      	uxtb	r3, r3
    8172:	40da      	lsrs	r2, r3
    8174:	0013      	movs	r3, r2
}
    8176:	0018      	movs	r0, r3
    8178:	46bd      	mov	sp, r7
    817a:	bd80      	pop	{r7, pc}
    817c:	0000c581 	.word	0x0000c581
    8180:	40000400 	.word	0x40000400

00008184 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    8184:	b580      	push	{r7, lr}
    8186:	b084      	sub	sp, #16
    8188:	af00      	add	r7, sp, #0
    818a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    818c:	687b      	ldr	r3, [r7, #4]
    818e:	681b      	ldr	r3, [r3, #0]
    8190:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    8192:	46c0      	nop			; (mov r8, r8)
    8194:	68fb      	ldr	r3, [r7, #12]
    8196:	689b      	ldr	r3, [r3, #8]
    8198:	2202      	movs	r2, #2
    819a:	4013      	ands	r3, r2
    819c:	d1fa      	bne.n	8194 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    819e:	68fb      	ldr	r3, [r7, #12]
    81a0:	681b      	ldr	r3, [r3, #0]
    81a2:	2202      	movs	r2, #2
    81a4:	431a      	orrs	r2, r3
    81a6:	68fb      	ldr	r3, [r7, #12]
    81a8:	601a      	str	r2, [r3, #0]
}
    81aa:	46c0      	nop			; (mov r8, r8)
    81ac:	46bd      	mov	sp, r7
    81ae:	b004      	add	sp, #16
    81b0:	bd80      	pop	{r7, pc}
	...

000081b4 <sw_timer_tcc_callback>:
 * This function performs to the increasing the tick count.
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    81b4:	b580      	push	{r7, lr}
    81b6:	b082      	sub	sp, #8
    81b8:	af00      	add	r7, sp, #0
    81ba:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    81bc:	4b04      	ldr	r3, [pc, #16]	; (81d0 <sw_timer_tcc_callback+0x1c>)
    81be:	681b      	ldr	r3, [r3, #0]
    81c0:	1c5a      	adds	r2, r3, #1
    81c2:	4b03      	ldr	r3, [pc, #12]	; (81d0 <sw_timer_tcc_callback+0x1c>)
    81c4:	601a      	str	r2, [r3, #0]
}
    81c6:	46c0      	nop			; (mov r8, r8)
    81c8:	46bd      	mov	sp, r7
    81ca:	b002      	add	sp, #8
    81cc:	bd80      	pop	{r7, pc}
    81ce:	46c0      	nop			; (mov r8, r8)
    81d0:	2000021c 	.word	0x2000021c

000081d4 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    81d4:	b580      	push	{r7, lr}
    81d6:	b082      	sub	sp, #8
    81d8:	af00      	add	r7, sp, #0
    81da:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    81dc:	687b      	ldr	r3, [r7, #4]
    81de:	2264      	movs	r2, #100	; 0x64
    81e0:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	2200      	movs	r2, #0
    81e6:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    81e8:	687b      	ldr	r3, [r7, #4]
    81ea:	2200      	movs	r2, #0
    81ec:	705a      	strb	r2, [r3, #1]
}
    81ee:	46c0      	nop			; (mov r8, r8)
    81f0:	46bd      	mov	sp, r7
    81f2:	b002      	add	sp, #8
    81f4:	bd80      	pop	{r7, pc}
	...

000081f8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    81f8:	b590      	push	{r4, r7, lr}
    81fa:	b0b1      	sub	sp, #196	; 0xc4
    81fc:	af00      	add	r7, sp, #0
    81fe:	6078      	str	r0, [r7, #4]
    8200:	6039      	str	r1, [r7, #0]
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    8202:	230c      	movs	r3, #12
    8204:	18fb      	adds	r3, r7, r3
    8206:	4a2e      	ldr	r2, [pc, #184]	; (82c0 <sw_timer_init+0xc8>)
    8208:	ca13      	ldmia	r2!, {r0, r1, r4}
    820a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    820c:	683b      	ldr	r3, [r7, #0]
    820e:	885b      	ldrh	r3, [r3, #2]
    8210:	001a      	movs	r2, r3
    8212:	687b      	ldr	r3, [r7, #4]
    8214:	655a      	str	r2, [r3, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	3314      	adds	r3, #20
    821a:	22bc      	movs	r2, #188	; 0xbc
    821c:	18ba      	adds	r2, r7, r2
    821e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    8220:	683b      	ldr	r3, [r7, #0]
    8222:	781b      	ldrb	r3, [r3, #0]
    8224:	001a      	movs	r2, r3
    8226:	230c      	movs	r3, #12
    8228:	18fb      	adds	r3, r7, r3
    822a:	0092      	lsls	r2, r2, #2
    822c:	58d2      	ldr	r2, [r2, r3]
    822e:	2318      	movs	r3, #24
    8230:	18fb      	adds	r3, r7, r3
    8232:	0011      	movs	r1, r2
    8234:	0018      	movs	r0, r3
    8236:	4b23      	ldr	r3, [pc, #140]	; (82c4 <sw_timer_init+0xcc>)
    8238:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    823a:	4b23      	ldr	r3, [pc, #140]	; (82c8 <sw_timer_init+0xd0>)
    823c:	4798      	blx	r3
    823e:	0004      	movs	r4, r0
    8240:	683b      	ldr	r3, [r7, #0]
    8242:	885b      	ldrh	r3, [r3, #2]
    8244:	001a      	movs	r2, r3
    8246:	4b21      	ldr	r3, [pc, #132]	; (82cc <sw_timer_init+0xd4>)
    8248:	0011      	movs	r1, r2
    824a:	22fa      	movs	r2, #250	; 0xfa
    824c:	0210      	lsls	r0, r2, #8
    824e:	4798      	blx	r3
    8250:	0003      	movs	r3, r0
    8252:	001a      	movs	r2, r3
    8254:	4b1e      	ldr	r3, [pc, #120]	; (82d0 <sw_timer_init+0xd8>)
    8256:	0011      	movs	r1, r2
    8258:	0020      	movs	r0, r4
    825a:	4798      	blx	r3
    825c:	0003      	movs	r3, r0
    825e:	001a      	movs	r2, r3
    8260:	2318      	movs	r3, #24
    8262:	18fb      	adds	r3, r7, r3
    8264:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    8266:	2318      	movs	r3, #24
    8268:	18fb      	adds	r3, r7, r3
    826a:	2205      	movs	r2, #5
    826c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    826e:	683b      	ldr	r3, [r7, #0]
    8270:	781b      	ldrb	r3, [r3, #0]
    8272:	001a      	movs	r2, r3
    8274:	230c      	movs	r3, #12
    8276:	18fb      	adds	r3, r7, r3
    8278:	0092      	lsls	r2, r2, #2
    827a:	58d1      	ldr	r1, [r2, r3]
    827c:	2318      	movs	r3, #24
    827e:	18fa      	adds	r2, r7, r3
    8280:	23bc      	movs	r3, #188	; 0xbc
    8282:	18fb      	adds	r3, r7, r3
    8284:	681b      	ldr	r3, [r3, #0]
    8286:	0018      	movs	r0, r3
    8288:	4b12      	ldr	r3, [pc, #72]	; (82d4 <sw_timer_init+0xdc>)
    828a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    828c:	683b      	ldr	r3, [r7, #0]
    828e:	785b      	ldrb	r3, [r3, #1]
    8290:	3308      	adds	r3, #8
    8292:	b2da      	uxtb	r2, r3
    8294:	4910      	ldr	r1, [pc, #64]	; (82d8 <sw_timer_init+0xe0>)
    8296:	23bc      	movs	r3, #188	; 0xbc
    8298:	18fb      	adds	r3, r7, r3
    829a:	681b      	ldr	r3, [r3, #0]
    829c:	0018      	movs	r0, r3
    829e:	4b0f      	ldr	r3, [pc, #60]	; (82dc <sw_timer_init+0xe4>)
    82a0:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    82a2:	683b      	ldr	r3, [r7, #0]
    82a4:	785b      	ldrb	r3, [r3, #1]
    82a6:	3308      	adds	r3, #8
    82a8:	b2da      	uxtb	r2, r3
    82aa:	23bc      	movs	r3, #188	; 0xbc
    82ac:	18fb      	adds	r3, r7, r3
    82ae:	681b      	ldr	r3, [r3, #0]
    82b0:	0011      	movs	r1, r2
    82b2:	0018      	movs	r0, r3
    82b4:	4b0a      	ldr	r3, [pc, #40]	; (82e0 <sw_timer_init+0xe8>)
    82b6:	4798      	blx	r3
}
    82b8:	46c0      	nop			; (mov r8, r8)
    82ba:	46bd      	mov	sp, r7
    82bc:	b031      	add	sp, #196	; 0xc4
    82be:	bd90      	pop	{r4, r7, pc}
    82c0:	00013a04 	.word	0x00013a04
    82c4:	00007461 	.word	0x00007461
    82c8:	00008161 	.word	0x00008161
    82cc:	00010921 	.word	0x00010921
    82d0:	0001080d 	.word	0x0001080d
    82d4:	00007abd 	.word	0x00007abd
    82d8:	000081b5 	.word	0x000081b5
    82dc:	00007ed5 	.word	0x00007ed5
    82e0:	00007f15 	.word	0x00007f15

000082e4 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    82e4:	b580      	push	{r7, lr}
    82e6:	b084      	sub	sp, #16
    82e8:	af00      	add	r7, sp, #0
    82ea:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;

	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;
    82ec:	687b      	ldr	r3, [r7, #4]
    82ee:	3314      	adds	r3, #20
    82f0:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    82f2:	68fb      	ldr	r3, [r7, #12]
    82f4:	0018      	movs	r0, r3
    82f6:	4b03      	ldr	r3, [pc, #12]	; (8304 <sw_timer_enable+0x20>)
    82f8:	4798      	blx	r3
}
    82fa:	46c0      	nop			; (mov r8, r8)
    82fc:	46bd      	mov	sp, r7
    82fe:	b004      	add	sp, #16
    8300:	bd80      	pop	{r7, pc}
    8302:	46c0      	nop			; (mov r8, r8)
    8304:	00008185 	.word	0x00008185

00008308 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    8308:	b580      	push	{r7, lr}
    830a:	b086      	sub	sp, #24
    830c:	af00      	add	r7, sp, #0
    830e:	60f8      	str	r0, [r7, #12]
    8310:	60b9      	str	r1, [r7, #8]
    8312:	607a      	str	r2, [r7, #4]
    8314:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    8316:	2300      	movs	r3, #0
    8318:	617b      	str	r3, [r7, #20]
    831a:	e032      	b.n	8382 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    831c:	68f9      	ldr	r1, [r7, #12]
    831e:	697a      	ldr	r2, [r7, #20]
    8320:	0013      	movs	r3, r2
    8322:	009b      	lsls	r3, r3, #2
    8324:	189b      	adds	r3, r3, r2
    8326:	009b      	lsls	r3, r3, #2
    8328:	5c5b      	ldrb	r3, [r3, r1]
    832a:	07db      	lsls	r3, r3, #31
    832c:	0fdb      	lsrs	r3, r3, #31
    832e:	b2db      	uxtb	r3, r3
    8330:	2b00      	cmp	r3, #0
    8332:	d123      	bne.n	837c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    8334:	697a      	ldr	r2, [r7, #20]
    8336:	0013      	movs	r3, r2
    8338:	009b      	lsls	r3, r3, #2
    833a:	189b      	adds	r3, r3, r2
    833c:	009b      	lsls	r3, r3, #2
    833e:	68fa      	ldr	r2, [r7, #12]
    8340:	18d3      	adds	r3, r2, r3
    8342:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    8344:	693b      	ldr	r3, [r7, #16]
    8346:	68ba      	ldr	r2, [r7, #8]
    8348:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    834a:	693b      	ldr	r3, [r7, #16]
    834c:	781a      	ldrb	r2, [r3, #0]
    834e:	2102      	movs	r1, #2
    8350:	438a      	bics	r2, r1
    8352:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    8354:	693b      	ldr	r3, [r7, #16]
    8356:	687a      	ldr	r2, [r7, #4]
    8358:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    835a:	68fb      	ldr	r3, [r7, #12]
    835c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    835e:	4b0d      	ldr	r3, [pc, #52]	; (8394 <sw_timer_register_callback+0x8c>)
    8360:	0011      	movs	r1, r2
    8362:	6838      	ldr	r0, [r7, #0]
    8364:	4798      	blx	r3
    8366:	0003      	movs	r3, r0
    8368:	001a      	movs	r2, r3
    836a:	693b      	ldr	r3, [r7, #16]
    836c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    836e:	693b      	ldr	r3, [r7, #16]
    8370:	781a      	ldrb	r2, [r3, #0]
    8372:	2101      	movs	r1, #1
    8374:	430a      	orrs	r2, r1
    8376:	701a      	strb	r2, [r3, #0]
			return index;
    8378:	697b      	ldr	r3, [r7, #20]
    837a:	e007      	b.n	838c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    837c:	697b      	ldr	r3, [r7, #20]
    837e:	3301      	adds	r3, #1
    8380:	617b      	str	r3, [r7, #20]
    8382:	697b      	ldr	r3, [r7, #20]
    8384:	2b00      	cmp	r3, #0
    8386:	ddc9      	ble.n	831c <sw_timer_register_callback+0x14>
		}
	}

	return -1;
    8388:	2301      	movs	r3, #1
    838a:	425b      	negs	r3, r3
}
    838c:	0018      	movs	r0, r3
    838e:	46bd      	mov	sp, r7
    8390:	b006      	add	sp, #24
    8392:	bd80      	pop	{r7, pc}
    8394:	0001080d 	.word	0x0001080d

00008398 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    8398:	b580      	push	{r7, lr}
    839a:	b086      	sub	sp, #24
    839c:	af00      	add	r7, sp, #0
    839e:	60f8      	str	r0, [r7, #12]
    83a0:	60b9      	str	r1, [r7, #8]
    83a2:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    83a4:	68ba      	ldr	r2, [r7, #8]
    83a6:	0013      	movs	r3, r2
    83a8:	009b      	lsls	r3, r3, #2
    83aa:	189b      	adds	r3, r3, r2
    83ac:	009b      	lsls	r3, r3, #2
    83ae:	68fa      	ldr	r2, [r7, #12]
    83b0:	18d3      	adds	r3, r2, r3
    83b2:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    83b4:	697b      	ldr	r3, [r7, #20]
    83b6:	781a      	ldrb	r2, [r3, #0]
    83b8:	2102      	movs	r1, #2
    83ba:	430a      	orrs	r2, r1
    83bc:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    83be:	68fb      	ldr	r3, [r7, #12]
    83c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    83c2:	4b07      	ldr	r3, [pc, #28]	; (83e0 <sw_timer_enable_callback+0x48>)
    83c4:	0011      	movs	r1, r2
    83c6:	6878      	ldr	r0, [r7, #4]
    83c8:	4798      	blx	r3
    83ca:	0003      	movs	r3, r0
    83cc:	001a      	movs	r2, r3
    83ce:	4b05      	ldr	r3, [pc, #20]	; (83e4 <sw_timer_enable_callback+0x4c>)
    83d0:	681b      	ldr	r3, [r3, #0]
    83d2:	18d2      	adds	r2, r2, r3
    83d4:	697b      	ldr	r3, [r7, #20]
    83d6:	611a      	str	r2, [r3, #16]
}
    83d8:	46c0      	nop			; (mov r8, r8)
    83da:	46bd      	mov	sp, r7
    83dc:	b006      	add	sp, #24
    83de:	bd80      	pop	{r7, pc}
    83e0:	0001080d 	.word	0x0001080d
    83e4:	2000021c 	.word	0x2000021c

000083e8 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    83e8:	b580      	push	{r7, lr}
    83ea:	b084      	sub	sp, #16
    83ec:	af00      	add	r7, sp, #0
    83ee:	6078      	str	r0, [r7, #4]
    83f0:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    83f2:	683a      	ldr	r2, [r7, #0]
    83f4:	0013      	movs	r3, r2
    83f6:	009b      	lsls	r3, r3, #2
    83f8:	189b      	adds	r3, r3, r2
    83fa:	009b      	lsls	r3, r3, #2
    83fc:	687a      	ldr	r2, [r7, #4]
    83fe:	18d3      	adds	r3, r2, r3
    8400:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    8402:	68fb      	ldr	r3, [r7, #12]
    8404:	781a      	ldrb	r2, [r3, #0]
    8406:	2102      	movs	r1, #2
    8408:	438a      	bics	r2, r1
    840a:	701a      	strb	r2, [r3, #0]
}
    840c:	46c0      	nop			; (mov r8, r8)
    840e:	46bd      	mov	sp, r7
    8410:	b004      	add	sp, #16
    8412:	bd80      	pop	{r7, pc}

00008414 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    8414:	b590      	push	{r4, r7, lr}
    8416:	b085      	sub	sp, #20
    8418:	af00      	add	r7, sp, #0
    841a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    841c:	2300      	movs	r3, #0
    841e:	60fb      	str	r3, [r7, #12]
    8420:	e053      	b.n	84ca <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    8422:	6879      	ldr	r1, [r7, #4]
    8424:	68fa      	ldr	r2, [r7, #12]
    8426:	0013      	movs	r3, r2
    8428:	009b      	lsls	r3, r3, #2
    842a:	189b      	adds	r3, r3, r2
    842c:	009b      	lsls	r3, r3, #2
    842e:	5c5b      	ldrb	r3, [r3, r1]
    8430:	07db      	lsls	r3, r3, #31
    8432:	0fdb      	lsrs	r3, r3, #31
    8434:	b2db      	uxtb	r3, r3
    8436:	2b00      	cmp	r3, #0
    8438:	d044      	beq.n	84c4 <sw_timer_task+0xb0>
    843a:	6879      	ldr	r1, [r7, #4]
    843c:	68fa      	ldr	r2, [r7, #12]
    843e:	0013      	movs	r3, r2
    8440:	009b      	lsls	r3, r3, #2
    8442:	189b      	adds	r3, r3, r2
    8444:	009b      	lsls	r3, r3, #2
    8446:	5c5b      	ldrb	r3, [r3, r1]
    8448:	079b      	lsls	r3, r3, #30
    844a:	0fdb      	lsrs	r3, r3, #31
    844c:	b2db      	uxtb	r3, r3
    844e:	2b00      	cmp	r3, #0
    8450:	d038      	beq.n	84c4 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    8452:	68fa      	ldr	r2, [r7, #12]
    8454:	0013      	movs	r3, r2
    8456:	009b      	lsls	r3, r3, #2
    8458:	189b      	adds	r3, r3, r2
    845a:	009b      	lsls	r3, r3, #2
    845c:	687a      	ldr	r2, [r7, #4]
    845e:	18d3      	adds	r3, r2, r3
    8460:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    8462:	68bb      	ldr	r3, [r7, #8]
    8464:	691a      	ldr	r2, [r3, #16]
    8466:	4b1c      	ldr	r3, [pc, #112]	; (84d8 <sw_timer_task+0xc4>)
    8468:	681b      	ldr	r3, [r3, #0]
    846a:	1ad3      	subs	r3, r2, r3
    846c:	d52a      	bpl.n	84c4 <sw_timer_task+0xb0>
    846e:	68bb      	ldr	r3, [r7, #8]
    8470:	781b      	ldrb	r3, [r3, #0]
    8472:	2204      	movs	r2, #4
    8474:	4013      	ands	r3, r2
    8476:	b2db      	uxtb	r3, r3
    8478:	2b00      	cmp	r3, #0
    847a:	d123      	bne.n	84c4 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    847c:	68bb      	ldr	r3, [r7, #8]
    847e:	781a      	ldrb	r2, [r3, #0]
    8480:	2104      	movs	r1, #4
    8482:	430a      	orrs	r2, r1
    8484:	701a      	strb	r2, [r3, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    8486:	68bb      	ldr	r3, [r7, #8]
    8488:	685c      	ldr	r4, [r3, #4]
    848a:	68bb      	ldr	r3, [r7, #8]
    848c:	689a      	ldr	r2, [r3, #8]
    848e:	68bb      	ldr	r3, [r7, #8]
    8490:	68db      	ldr	r3, [r3, #12]
    8492:	68f9      	ldr	r1, [r7, #12]
    8494:	6878      	ldr	r0, [r7, #4]
    8496:	47a0      	blx	r4
				/* Timer was expired. */
				if (handler->period > 0) {
    8498:	68bb      	ldr	r3, [r7, #8]
    849a:	68db      	ldr	r3, [r3, #12]
    849c:	2b00      	cmp	r3, #0
    849e:	d007      	beq.n	84b0 <sw_timer_task+0x9c>
					handler->expire_time = sw_timer_tick + handler->period;
    84a0:	68bb      	ldr	r3, [r7, #8]
    84a2:	68da      	ldr	r2, [r3, #12]
    84a4:	4b0c      	ldr	r3, [pc, #48]	; (84d8 <sw_timer_task+0xc4>)
    84a6:	681b      	ldr	r3, [r3, #0]
    84a8:	18d2      	adds	r2, r2, r3
    84aa:	68bb      	ldr	r3, [r7, #8]
    84ac:	611a      	str	r2, [r3, #16]
    84ae:	e004      	b.n	84ba <sw_timer_task+0xa6>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    84b0:	68bb      	ldr	r3, [r7, #8]
    84b2:	781a      	ldrb	r2, [r3, #0]
    84b4:	2102      	movs	r1, #2
    84b6:	438a      	bics	r2, r1
    84b8:	701a      	strb	r2, [r3, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    84ba:	68bb      	ldr	r3, [r7, #8]
    84bc:	781a      	ldrb	r2, [r3, #0]
    84be:	2104      	movs	r1, #4
    84c0:	438a      	bics	r2, r1
    84c2:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    84c4:	68fb      	ldr	r3, [r7, #12]
    84c6:	3301      	adds	r3, #1
    84c8:	60fb      	str	r3, [r7, #12]
    84ca:	68fb      	ldr	r3, [r7, #12]
    84cc:	2b00      	cmp	r3, #0
    84ce:	dda8      	ble.n	8422 <sw_timer_task+0xe>
			}
		}
	}

}
    84d0:	46c0      	nop			; (mov r8, r8)
    84d2:	46bd      	mov	sp, r7
    84d4:	b005      	add	sp, #20
    84d6:	bd90      	pop	{r4, r7, pc}
    84d8:	2000021c 	.word	0x2000021c

000084dc <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
    84dc:	b590      	push	{r4, r7, lr}
    84de:	b087      	sub	sp, #28
    84e0:	af02      	add	r7, sp, #8
    84e2:	0002      	movs	r2, r0
    84e4:	6039      	str	r1, [r7, #0]
    84e6:	1dfb      	adds	r3, r7, #7
    84e8:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
    84ea:	1dfb      	adds	r3, r7, #7
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	2b2c      	cmp	r3, #44	; 0x2c
    84f0:	d002      	beq.n	84f8 <wifi_callback+0x1c>
    84f2:	2b32      	cmp	r3, #50	; 0x32
    84f4:	d033      	beq.n	855e <wifi_callback+0x82>
		mqtt_connect(&mqtt_inst, curr_mqtt_config->broker_server);
		wifi_connected = 1;
		break;

	default:
		break;
    84f6:	e054      	b.n	85a2 <wifi_callback+0xc6>
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
    84f8:	683b      	ldr	r3, [r7, #0]
    84fa:	60fb      	str	r3, [r7, #12]
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    84fc:	68fb      	ldr	r3, [r7, #12]
    84fe:	781b      	ldrb	r3, [r3, #0]
    8500:	2b01      	cmp	r3, #1
    8502:	d106      	bne.n	8512 <wifi_callback+0x36>
			printf("Wi-Fi connected\r\n");
    8504:	4b29      	ldr	r3, [pc, #164]	; (85ac <wifi_callback+0xd0>)
    8506:	0018      	movs	r0, r3
    8508:	4b29      	ldr	r3, [pc, #164]	; (85b0 <wifi_callback+0xd4>)
    850a:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    850c:	4b29      	ldr	r3, [pc, #164]	; (85b4 <wifi_callback+0xd8>)
    850e:	4798      	blx	r3
		break;
    8510:	e046      	b.n	85a0 <wifi_callback+0xc4>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    8512:	68fb      	ldr	r3, [r7, #12]
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	2b00      	cmp	r3, #0
    8518:	d142      	bne.n	85a0 <wifi_callback+0xc4>
			printf("Wi-Fi disconnected\r\n");
    851a:	4b27      	ldr	r3, [pc, #156]	; (85b8 <wifi_callback+0xdc>)
    851c:	0018      	movs	r0, r3
    851e:	4b24      	ldr	r3, [pc, #144]	; (85b0 <wifi_callback+0xd4>)
    8520:	4798      	blx	r3
			m2m_wifi_connect(curr_mqtt_config->ssid, strlen(curr_mqtt_config->ssid),
    8522:	4b26      	ldr	r3, [pc, #152]	; (85bc <wifi_callback+0xe0>)
    8524:	681b      	ldr	r3, [r3, #0]
    8526:	681c      	ldr	r4, [r3, #0]
    8528:	4b24      	ldr	r3, [pc, #144]	; (85bc <wifi_callback+0xe0>)
    852a:	681b      	ldr	r3, [r3, #0]
    852c:	681b      	ldr	r3, [r3, #0]
    852e:	0018      	movs	r0, r3
    8530:	4b23      	ldr	r3, [pc, #140]	; (85c0 <wifi_callback+0xe4>)
    8532:	4798      	blx	r3
    8534:	0003      	movs	r3, r0
    8536:	b2d9      	uxtb	r1, r3
					 curr_mqtt_config->auth, curr_mqtt_config->password, M2M_WIFI_CH_ALL);
    8538:	4b20      	ldr	r3, [pc, #128]	; (85bc <wifi_callback+0xe0>)
    853a:	681b      	ldr	r3, [r3, #0]
    853c:	685b      	ldr	r3, [r3, #4]
			m2m_wifi_connect(curr_mqtt_config->ssid, strlen(curr_mqtt_config->ssid),
    853e:	b2da      	uxtb	r2, r3
					 curr_mqtt_config->auth, curr_mqtt_config->password, M2M_WIFI_CH_ALL);
    8540:	4b1e      	ldr	r3, [pc, #120]	; (85bc <wifi_callback+0xe0>)
    8542:	681b      	ldr	r3, [r3, #0]
    8544:	6898      	ldr	r0, [r3, #8]
			m2m_wifi_connect(curr_mqtt_config->ssid, strlen(curr_mqtt_config->ssid),
    8546:	23ff      	movs	r3, #255	; 0xff
    8548:	9300      	str	r3, [sp, #0]
    854a:	0003      	movs	r3, r0
    854c:	0020      	movs	r0, r4
    854e:	4c1d      	ldr	r4, [pc, #116]	; (85c4 <wifi_callback+0xe8>)
    8550:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    8552:	4b1d      	ldr	r3, [pc, #116]	; (85c8 <wifi_callback+0xec>)
    8554:	2101      	movs	r1, #1
    8556:	0018      	movs	r0, r3
    8558:	4b1c      	ldr	r3, [pc, #112]	; (85cc <wifi_callback+0xf0>)
    855a:	4798      	blx	r3
		break;
    855c:	e020      	b.n	85a0 <wifi_callback+0xc4>
		msg_ip_addr = (uint8 *)msg_data;
    855e:	683b      	ldr	r3, [r7, #0]
    8560:	60bb      	str	r3, [r7, #8]
		       msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    8562:	68bb      	ldr	r3, [r7, #8]
    8564:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    8566:	0019      	movs	r1, r3
		       msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    8568:	68bb      	ldr	r3, [r7, #8]
    856a:	3301      	adds	r3, #1
    856c:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    856e:	001a      	movs	r2, r3
		       msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    8570:	68bb      	ldr	r3, [r7, #8]
    8572:	3302      	adds	r3, #2
    8574:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    8576:	001c      	movs	r4, r3
		       msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    8578:	68bb      	ldr	r3, [r7, #8]
    857a:	3303      	adds	r3, #3
    857c:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    857e:	4814      	ldr	r0, [pc, #80]	; (85d0 <wifi_callback+0xf4>)
    8580:	9300      	str	r3, [sp, #0]
    8582:	0023      	movs	r3, r4
    8584:	4c13      	ldr	r4, [pc, #76]	; (85d4 <wifi_callback+0xf8>)
    8586:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, curr_mqtt_config->broker_server);
    8588:	4b0c      	ldr	r3, [pc, #48]	; (85bc <wifi_callback+0xe0>)
    858a:	681b      	ldr	r3, [r3, #0]
    858c:	691a      	ldr	r2, [r3, #16]
    858e:	4b0e      	ldr	r3, [pc, #56]	; (85c8 <wifi_callback+0xec>)
    8590:	0011      	movs	r1, r2
    8592:	0018      	movs	r0, r3
    8594:	4b10      	ldr	r3, [pc, #64]	; (85d8 <wifi_callback+0xfc>)
    8596:	4798      	blx	r3
		wifi_connected = 1;
    8598:	4b10      	ldr	r3, [pc, #64]	; (85dc <wifi_callback+0x100>)
    859a:	2201      	movs	r2, #1
    859c:	601a      	str	r2, [r3, #0]
		break;
    859e:	e000      	b.n	85a2 <wifi_callback+0xc6>
		break;
    85a0:	46c0      	nop			; (mov r8, r8)
	}
}
    85a2:	46c0      	nop			; (mov r8, r8)
    85a4:	46bd      	mov	sp, r7
    85a6:	b005      	add	sp, #20
    85a8:	bd90      	pop	{r4, r7, pc}
    85aa:	46c0      	nop			; (mov r8, r8)
    85ac:	00013a10 	.word	0x00013a10
    85b0:	0000e901 	.word	0x0000e901
    85b4:	00002c3d 	.word	0x00002c3d
    85b8:	00013a24 	.word	0x00013a24
    85bc:	20000818 	.word	0x20000818
    85c0:	0000eac9 	.word	0x0000eac9
    85c4:	00002775 	.word	0x00002775
    85c8:	20000a20 	.word	0x20000a20
    85cc:	0000d8ad 	.word	0x0000d8ad
    85d0:	00013a38 	.word	0x00013a38
    85d4:	0000e7e5 	.word	0x0000e7e5
    85d8:	0000d249 	.word	0x0000d249
    85dc:	20000224 	.word	0x20000224

000085e0 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    85e0:	b580      	push	{r7, lr}
    85e2:	b082      	sub	sp, #8
    85e4:	af00      	add	r7, sp, #0
    85e6:	603a      	str	r2, [r7, #0]
    85e8:	1dfb      	adds	r3, r7, #7
    85ea:	1c02      	adds	r2, r0, #0
    85ec:	701a      	strb	r2, [r3, #0]
    85ee:	1dbb      	adds	r3, r7, #6
    85f0:	1c0a      	adds	r2, r1, #0
    85f2:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    85f4:	683a      	ldr	r2, [r7, #0]
    85f6:	1dbb      	adds	r3, r7, #6
    85f8:	7819      	ldrb	r1, [r3, #0]
    85fa:	1dfb      	adds	r3, r7, #7
    85fc:	781b      	ldrb	r3, [r3, #0]
    85fe:	b25b      	sxtb	r3, r3
    8600:	0018      	movs	r0, r3
    8602:	4b03      	ldr	r3, [pc, #12]	; (8610 <socket_event_handler+0x30>)
    8604:	4798      	blx	r3
}
    8606:	46c0      	nop			; (mov r8, r8)
    8608:	46bd      	mov	sp, r7
    860a:	b002      	add	sp, #8
    860c:	bd80      	pop	{r7, pc}
    860e:	46c0      	nop			; (mov r8, r8)
    8610:	0000dbed 	.word	0x0000dbed

00008614 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    8614:	b580      	push	{r7, lr}
    8616:	b082      	sub	sp, #8
    8618:	af00      	add	r7, sp, #0
    861a:	6078      	str	r0, [r7, #4]
    861c:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    861e:	683a      	ldr	r2, [r7, #0]
    8620:	687b      	ldr	r3, [r7, #4]
    8622:	0011      	movs	r1, r2
    8624:	0018      	movs	r0, r3
    8626:	4b03      	ldr	r3, [pc, #12]	; (8634 <socket_resolve_handler+0x20>)
    8628:	4798      	blx	r3
}
    862a:	46c0      	nop			; (mov r8, r8)
    862c:	46bd      	mov	sp, r7
    862e:	b002      	add	sp, #8
    8630:	bd80      	pop	{r7, pc}
    8632:	46c0      	nop			; (mov r8, r8)
    8634:	0000d1f5 	.word	0x0000d1f5

00008638 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    8638:	b590      	push	{r4, r7, lr}
    863a:	b08d      	sub	sp, #52	; 0x34
    863c:	af06      	add	r7, sp, #24
    863e:	60f8      	str	r0, [r7, #12]
    8640:	60b9      	str	r1, [r7, #8]
    8642:	607a      	str	r2, [r7, #4]
	switch (type) {
    8644:	68bb      	ldr	r3, [r7, #8]
    8646:	2b01      	cmp	r3, #1
    8648:	d034      	beq.n	86b4 <mqtt_callback+0x7c>
    864a:	dc02      	bgt.n	8652 <mqtt_callback+0x1a>
    864c:	2b00      	cmp	r3, #0
    864e:	d006      	beq.n	865e <mqtt_callback+0x26>
	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer */
		printf("MQTT disconnected\r\n");
		break;
	}
}
    8650:	e0be      	b.n	87d0 <mqtt_callback+0x198>
	switch (type) {
    8652:	2b05      	cmp	r3, #5
    8654:	d100      	bne.n	8658 <mqtt_callback+0x20>
    8656:	e0b5      	b.n	87c4 <mqtt_callback+0x18c>
    8658:	2b06      	cmp	r3, #6
    865a:	d03f      	beq.n	86dc <mqtt_callback+0xa4>
}
    865c:	e0b8      	b.n	87d0 <mqtt_callback+0x198>
		if (data->sock_connected.result >= 0) {
    865e:	687b      	ldr	r3, [r7, #4]
    8660:	681b      	ldr	r3, [r3, #0]
    8662:	2b00      	cmp	r3, #0
    8664:	db15      	blt.n	8692 <mqtt_callback+0x5a>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, MQTT_USER, NULL, NULL, 0, 0, 0);
    8666:	68f8      	ldr	r0, [r7, #12]
    8668:	2300      	movs	r3, #0
    866a:	9305      	str	r3, [sp, #20]
    866c:	2300      	movs	r3, #0
    866e:	9304      	str	r3, [sp, #16]
    8670:	2300      	movs	r3, #0
    8672:	9303      	str	r3, [sp, #12]
    8674:	2300      	movs	r3, #0
    8676:	9302      	str	r3, [sp, #8]
    8678:	2300      	movs	r3, #0
    867a:	9301      	str	r3, [sp, #4]
    867c:	4b56      	ldr	r3, [pc, #344]	; (87d8 <mqtt_callback+0x1a0>)
    867e:	9300      	str	r3, [sp, #0]
    8680:	2300      	movs	r3, #0
    8682:	2200      	movs	r2, #0
    8684:	2101      	movs	r1, #1
    8686:	4c55      	ldr	r4, [pc, #340]	; (87dc <mqtt_callback+0x1a4>)
    8688:	47a0      	blx	r4
			mqtt_connected = 1;
    868a:	4b55      	ldr	r3, [pc, #340]	; (87e0 <mqtt_callback+0x1a8>)
    868c:	2201      	movs	r2, #1
    868e:	601a      	str	r2, [r3, #0]
	break;
    8690:	e09e      	b.n	87d0 <mqtt_callback+0x198>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", curr_mqtt_config->broker_server);
    8692:	4b54      	ldr	r3, [pc, #336]	; (87e4 <mqtt_callback+0x1ac>)
    8694:	681b      	ldr	r3, [r3, #0]
    8696:	691a      	ldr	r2, [r3, #16]
    8698:	4b53      	ldr	r3, [pc, #332]	; (87e8 <mqtt_callback+0x1b0>)
    869a:	0011      	movs	r1, r2
    869c:	0018      	movs	r0, r3
    869e:	4b53      	ldr	r3, [pc, #332]	; (87ec <mqtt_callback+0x1b4>)
    86a0:	4798      	blx	r3
			mqtt_connect(module_inst, curr_mqtt_config->broker_server); /* Retry that. */
    86a2:	4b50      	ldr	r3, [pc, #320]	; (87e4 <mqtt_callback+0x1ac>)
    86a4:	681b      	ldr	r3, [r3, #0]
    86a6:	691a      	ldr	r2, [r3, #16]
    86a8:	68fb      	ldr	r3, [r7, #12]
    86aa:	0011      	movs	r1, r2
    86ac:	0018      	movs	r0, r3
    86ae:	4b50      	ldr	r3, [pc, #320]	; (87f0 <mqtt_callback+0x1b8>)
    86b0:	4798      	blx	r3
	break;
    86b2:	e08d      	b.n	87d0 <mqtt_callback+0x198>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    86b4:	687b      	ldr	r3, [r7, #4]
    86b6:	781b      	ldrb	r3, [r3, #0]
    86b8:	2b00      	cmp	r3, #0
    86ba:	d106      	bne.n	86ca <mqtt_callback+0x92>
			module_inst->busy = 0;
    86bc:	68fb      	ldr	r3, [r7, #12]
    86be:	2243      	movs	r2, #67	; 0x43
    86c0:	5c99      	ldrb	r1, [r3, r2]
    86c2:	2008      	movs	r0, #8
    86c4:	4381      	bics	r1, r0
    86c6:	5499      	strb	r1, [r3, r2]
		break;
    86c8:	e082      	b.n	87d0 <mqtt_callback+0x198>
			printf("MQTT broker declined your access! error code %d\r\n", data->connected.result);
    86ca:	687b      	ldr	r3, [r7, #4]
    86cc:	781b      	ldrb	r3, [r3, #0]
    86ce:	001a      	movs	r2, r3
    86d0:	4b48      	ldr	r3, [pc, #288]	; (87f4 <mqtt_callback+0x1bc>)
    86d2:	0011      	movs	r1, r2
    86d4:	0018      	movs	r0, r3
    86d6:	4b45      	ldr	r3, [pc, #276]	; (87ec <mqtt_callback+0x1b4>)
    86d8:	4798      	blx	r3
		break;
    86da:	e079      	b.n	87d0 <mqtt_callback+0x198>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    86dc:	687b      	ldr	r3, [r7, #4]
    86de:	681b      	ldr	r3, [r3, #0]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d074      	beq.n	87ce <mqtt_callback+0x196>
    86e4:	687b      	ldr	r3, [r7, #4]
    86e6:	689b      	ldr	r3, [r3, #8]
    86e8:	2b00      	cmp	r3, #0
    86ea:	d070      	beq.n	87ce <mqtt_callback+0x196>
			printf("data->recv_publish.topic: %s\r\n", data->recv_publish.topic);
    86ec:	687b      	ldr	r3, [r7, #4]
    86ee:	681a      	ldr	r2, [r3, #0]
    86f0:	4b41      	ldr	r3, [pc, #260]	; (87f8 <mqtt_callback+0x1c0>)
    86f2:	0011      	movs	r1, r2
    86f4:	0018      	movs	r0, r3
    86f6:	4b3d      	ldr	r3, [pc, #244]	; (87ec <mqtt_callback+0x1b4>)
    86f8:	4798      	blx	r3
			printf("topic name: %s\r\n", registered_request_topics[0].topic_name);
    86fa:	4a40      	ldr	r2, [pc, #256]	; (87fc <mqtt_callback+0x1c4>)
    86fc:	4b40      	ldr	r3, [pc, #256]	; (8800 <mqtt_callback+0x1c8>)
    86fe:	0011      	movs	r1, r2
    8700:	0018      	movs	r0, r3
    8702:	4b3a      	ldr	r3, [pc, #232]	; (87ec <mqtt_callback+0x1b4>)
    8704:	4798      	blx	r3
			printf("data->recv_publish.topic_size: %d\r\n", data->recv_publish.topic_size);
    8706:	687b      	ldr	r3, [r7, #4]
    8708:	685a      	ldr	r2, [r3, #4]
    870a:	4b3e      	ldr	r3, [pc, #248]	; (8804 <mqtt_callback+0x1cc>)
    870c:	0011      	movs	r1, r2
    870e:	0018      	movs	r0, r3
    8710:	4b36      	ldr	r3, [pc, #216]	; (87ec <mqtt_callback+0x1b4>)
    8712:	4798      	blx	r3
			printf("data size: %d\r\n", strlen(data->recv_publish.topic));
    8714:	687b      	ldr	r3, [r7, #4]
    8716:	681b      	ldr	r3, [r3, #0]
    8718:	0018      	movs	r0, r3
    871a:	4b3b      	ldr	r3, [pc, #236]	; (8808 <mqtt_callback+0x1d0>)
    871c:	4798      	blx	r3
    871e:	0002      	movs	r2, r0
    8720:	4b3a      	ldr	r3, [pc, #232]	; (880c <mqtt_callback+0x1d4>)
    8722:	0011      	movs	r1, r2
    8724:	0018      	movs	r0, r3
    8726:	4b31      	ldr	r3, [pc, #196]	; (87ec <mqtt_callback+0x1b4>)
    8728:	4798      	blx	r3
			printf("topic size: %d\r\n", strlen(registered_request_topics[0].topic_name));
    872a:	4b34      	ldr	r3, [pc, #208]	; (87fc <mqtt_callback+0x1c4>)
    872c:	0018      	movs	r0, r3
    872e:	4b36      	ldr	r3, [pc, #216]	; (8808 <mqtt_callback+0x1d0>)
    8730:	4798      	blx	r3
    8732:	0002      	movs	r2, r0
    8734:	4b36      	ldr	r3, [pc, #216]	; (8810 <mqtt_callback+0x1d8>)
    8736:	0011      	movs	r1, r2
    8738:	0018      	movs	r0, r3
    873a:	4b2c      	ldr	r3, [pc, #176]	; (87ec <mqtt_callback+0x1b4>)
    873c:	4798      	blx	r3
			for (int i = 0; i < num_registered_request_topics; i++)
    873e:	2300      	movs	r3, #0
    8740:	617b      	str	r3, [r7, #20]
    8742:	e038      	b.n	87b6 <mqtt_callback+0x17e>
				if (!strncmp(data->recv_publish.topic, registered_request_topics[i].topic_name, data->recv_publish.topic_size)) {
    8744:	687b      	ldr	r3, [r7, #4]
    8746:	6818      	ldr	r0, [r3, #0]
    8748:	697a      	ldr	r2, [r7, #20]
    874a:	0013      	movs	r3, r2
    874c:	011b      	lsls	r3, r3, #4
    874e:	189b      	adds	r3, r3, r2
    8750:	009b      	lsls	r3, r3, #2
    8752:	4a2a      	ldr	r2, [pc, #168]	; (87fc <mqtt_callback+0x1c4>)
    8754:	1899      	adds	r1, r3, r2
    8756:	687b      	ldr	r3, [r7, #4]
    8758:	685b      	ldr	r3, [r3, #4]
    875a:	001a      	movs	r2, r3
    875c:	4b2d      	ldr	r3, [pc, #180]	; (8814 <mqtt_callback+0x1dc>)
    875e:	4798      	blx	r3
    8760:	1e03      	subs	r3, r0, #0
    8762:	d125      	bne.n	87b0 <mqtt_callback+0x178>
					printf("MQTT requested: %s\r\n", data->recv_publish.topic);
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	681a      	ldr	r2, [r3, #0]
    8768:	4b2b      	ldr	r3, [pc, #172]	; (8818 <mqtt_callback+0x1e0>)
    876a:	0011      	movs	r1, r2
    876c:	0018      	movs	r0, r3
    876e:	4b1f      	ldr	r3, [pc, #124]	; (87ec <mqtt_callback+0x1b4>)
    8770:	4798      	blx	r3
					printf("registered_request_topic: %s\r\n", registered_request_topics[0].topic_name);
    8772:	4a22      	ldr	r2, [pc, #136]	; (87fc <mqtt_callback+0x1c4>)
    8774:	4b29      	ldr	r3, [pc, #164]	; (881c <mqtt_callback+0x1e4>)
    8776:	0011      	movs	r1, r2
    8778:	0018      	movs	r0, r3
    877a:	4b1c      	ldr	r3, [pc, #112]	; (87ec <mqtt_callback+0x1b4>)
    877c:	4798      	blx	r3
					printf("registered_function: %d\r\n", registered_request_topics[i].function);
    877e:	491f      	ldr	r1, [pc, #124]	; (87fc <mqtt_callback+0x1c4>)
    8780:	697a      	ldr	r2, [r7, #20]
    8782:	0013      	movs	r3, r2
    8784:	011b      	lsls	r3, r3, #4
    8786:	189b      	adds	r3, r3, r2
    8788:	009b      	lsls	r3, r3, #2
    878a:	18cb      	adds	r3, r1, r3
    878c:	3340      	adds	r3, #64	; 0x40
    878e:	681a      	ldr	r2, [r3, #0]
    8790:	4b23      	ldr	r3, [pc, #140]	; (8820 <mqtt_callback+0x1e8>)
    8792:	0011      	movs	r1, r2
    8794:	0018      	movs	r0, r3
    8796:	4b15      	ldr	r3, [pc, #84]	; (87ec <mqtt_callback+0x1b4>)
    8798:	4798      	blx	r3
					registered_request_topics[i].function(0);
    879a:	4918      	ldr	r1, [pc, #96]	; (87fc <mqtt_callback+0x1c4>)
    879c:	697a      	ldr	r2, [r7, #20]
    879e:	0013      	movs	r3, r2
    87a0:	011b      	lsls	r3, r3, #4
    87a2:	189b      	adds	r3, r3, r2
    87a4:	009b      	lsls	r3, r3, #2
    87a6:	18cb      	adds	r3, r1, r3
    87a8:	3340      	adds	r3, #64	; 0x40
    87aa:	681b      	ldr	r3, [r3, #0]
    87ac:	2000      	movs	r0, #0
    87ae:	4798      	blx	r3
			for (int i = 0; i < num_registered_request_topics; i++)
    87b0:	697b      	ldr	r3, [r7, #20]
    87b2:	3301      	adds	r3, #1
    87b4:	617b      	str	r3, [r7, #20]
    87b6:	4b1b      	ldr	r3, [pc, #108]	; (8824 <mqtt_callback+0x1ec>)
    87b8:	781b      	ldrb	r3, [r3, #0]
    87ba:	001a      	movs	r2, r3
    87bc:	697b      	ldr	r3, [r7, #20]
    87be:	429a      	cmp	r2, r3
    87c0:	dcc0      	bgt.n	8744 <mqtt_callback+0x10c>
		break;
    87c2:	e004      	b.n	87ce <mqtt_callback+0x196>
		printf("MQTT disconnected\r\n");
    87c4:	4b18      	ldr	r3, [pc, #96]	; (8828 <mqtt_callback+0x1f0>)
    87c6:	0018      	movs	r0, r3
    87c8:	4b18      	ldr	r3, [pc, #96]	; (882c <mqtt_callback+0x1f4>)
    87ca:	4798      	blx	r3
		break;
    87cc:	e000      	b.n	87d0 <mqtt_callback+0x198>
		break;
    87ce:	46c0      	nop			; (mov r8, r8)
}
    87d0:	46c0      	nop			; (mov r8, r8)
    87d2:	46bd      	mov	sp, r7
    87d4:	b007      	add	sp, #28
    87d6:	bd90      	pop	{r4, r7, pc}
    87d8:	00013a54 	.word	0x00013a54
    87dc:	0000d35d 	.word	0x0000d35d
    87e0:	20000228 	.word	0x20000228
    87e4:	20000818 	.word	0x20000818
    87e8:	00013a60 	.word	0x00013a60
    87ec:	0000e7e5 	.word	0x0000e7e5
    87f0:	0000d249 	.word	0x0000d249
    87f4:	00013a98 	.word	0x00013a98
    87f8:	00013acc 	.word	0x00013acc
    87fc:	2000081c 	.word	0x2000081c
    8800:	00013aec 	.word	0x00013aec
    8804:	00013b00 	.word	0x00013b00
    8808:	0000eac9 	.word	0x0000eac9
    880c:	00013b24 	.word	0x00013b24
    8810:	00013b34 	.word	0x00013b34
    8814:	0000ead7 	.word	0x0000ead7
    8818:	00013b48 	.word	0x00013b48
    881c:	00013b60 	.word	0x00013b60
    8820:	00013b80 	.word	0x00013b80
    8824:	20000220 	.word	0x20000220
    8828:	00013b9c 	.word	0x00013b9c
    882c:	0000e901 	.word	0x0000e901

00008830 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    8830:	b580      	push	{r7, lr}
    8832:	b082      	sub	sp, #8
    8834:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;

	sw_timer_get_config_defaults(&swt_conf);
    8836:	1d3b      	adds	r3, r7, #4
    8838:	0018      	movs	r0, r3
    883a:	4b0a      	ldr	r3, [pc, #40]	; (8864 <configure_timer+0x34>)
    883c:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    883e:	1d3a      	adds	r2, r7, #4
    8840:	4b09      	ldr	r3, [pc, #36]	; (8868 <configure_timer+0x38>)
    8842:	0011      	movs	r1, r2
    8844:	0018      	movs	r0, r3
    8846:	4b09      	ldr	r3, [pc, #36]	; (886c <configure_timer+0x3c>)
    8848:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    884a:	4b07      	ldr	r3, [pc, #28]	; (8868 <configure_timer+0x38>)
    884c:	0018      	movs	r0, r3
    884e:	4b08      	ldr	r3, [pc, #32]	; (8870 <configure_timer+0x40>)
    8850:	4798      	blx	r3
	printf("Timer enabled.\r\n");
    8852:	4b08      	ldr	r3, [pc, #32]	; (8874 <configure_timer+0x44>)
    8854:	0018      	movs	r0, r3
    8856:	4b08      	ldr	r3, [pc, #32]	; (8878 <configure_timer+0x48>)
    8858:	4798      	blx	r3
}
    885a:	46c0      	nop			; (mov r8, r8)
    885c:	46bd      	mov	sp, r7
    885e:	b002      	add	sp, #8
    8860:	bd80      	pop	{r7, pc}
    8862:	46c0      	nop			; (mov r8, r8)
    8864:	000081d5 	.word	0x000081d5
    8868:	200002f0 	.word	0x200002f0
    886c:	000081f9 	.word	0x000081f9
    8870:	000082e5 	.word	0x000082e5
    8874:	00013bb0 	.word	0x00013bb0
    8878:	0000e901 	.word	0x0000e901

0000887c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
void configure_mqtt(void)
{
    887c:	b580      	push	{r7, lr}
    887e:	b088      	sub	sp, #32
    8880:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    8882:	003b      	movs	r3, r7
    8884:	0018      	movs	r0, r3
    8886:	4b1c      	ldr	r3, [pc, #112]	; (88f8 <configure_mqtt+0x7c>)
    8888:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    888a:	003b      	movs	r3, r7
    888c:	4a1b      	ldr	r2, [pc, #108]	; (88fc <configure_mqtt+0x80>)
    888e:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    8890:	003b      	movs	r3, r7
    8892:	4a1b      	ldr	r2, [pc, #108]	; (8900 <configure_mqtt+0x84>)
    8894:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    8896:	003b      	movs	r3, r7
    8898:	2280      	movs	r2, #128	; 0x80
    889a:	611a      	str	r2, [r3, #16]
	mqtt_conf.port = curr_mqtt_config->port;
    889c:	4b19      	ldr	r3, [pc, #100]	; (8904 <configure_mqtt+0x88>)
    889e:	681b      	ldr	r3, [r3, #0]
    88a0:	899a      	ldrh	r2, [r3, #12]
    88a2:	003b      	movs	r3, r7
    88a4:	801a      	strh	r2, [r3, #0]
	//cloudmqtt port 11353

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    88a6:	003a      	movs	r2, r7
    88a8:	4b17      	ldr	r3, [pc, #92]	; (8908 <configure_mqtt+0x8c>)
    88aa:	0011      	movs	r1, r2
    88ac:	0018      	movs	r0, r3
    88ae:	4b17      	ldr	r3, [pc, #92]	; (890c <configure_mqtt+0x90>)
    88b0:	4798      	blx	r3
    88b2:	0003      	movs	r3, r0
    88b4:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    88b6:	69fb      	ldr	r3, [r7, #28]
    88b8:	2b00      	cmp	r3, #0
    88ba:	da06      	bge.n	88ca <configure_mqtt+0x4e>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    88bc:	69fa      	ldr	r2, [r7, #28]
    88be:	4b14      	ldr	r3, [pc, #80]	; (8910 <configure_mqtt+0x94>)
    88c0:	0011      	movs	r1, r2
    88c2:	0018      	movs	r0, r3
    88c4:	4b13      	ldr	r3, [pc, #76]	; (8914 <configure_mqtt+0x98>)
    88c6:	4798      	blx	r3
		while (1) {
    88c8:	e7fe      	b.n	88c8 <configure_mqtt+0x4c>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    88ca:	4a13      	ldr	r2, [pc, #76]	; (8918 <configure_mqtt+0x9c>)
    88cc:	4b0e      	ldr	r3, [pc, #56]	; (8908 <configure_mqtt+0x8c>)
    88ce:	0011      	movs	r1, r2
    88d0:	0018      	movs	r0, r3
    88d2:	4b12      	ldr	r3, [pc, #72]	; (891c <configure_mqtt+0xa0>)
    88d4:	4798      	blx	r3
    88d6:	0003      	movs	r3, r0
    88d8:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    88da:	69fb      	ldr	r3, [r7, #28]
    88dc:	2b00      	cmp	r3, #0
    88de:	da06      	bge.n	88ee <configure_mqtt+0x72>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    88e0:	69fa      	ldr	r2, [r7, #28]
    88e2:	4b0f      	ldr	r3, [pc, #60]	; (8920 <configure_mqtt+0xa4>)
    88e4:	0011      	movs	r1, r2
    88e6:	0018      	movs	r0, r3
    88e8:	4b0a      	ldr	r3, [pc, #40]	; (8914 <configure_mqtt+0x98>)
    88ea:	4798      	blx	r3
		while (1) {
    88ec:	e7fe      	b.n	88ec <configure_mqtt+0x70>
		}
	}
}
    88ee:	46c0      	nop			; (mov r8, r8)
    88f0:	46bd      	mov	sp, r7
    88f2:	b008      	add	sp, #32
    88f4:	bd80      	pop	{r7, pc}
    88f6:	46c0      	nop			; (mov r8, r8)
    88f8:	0000d135 	.word	0x0000d135
    88fc:	200002f0 	.word	0x200002f0
    8900:	200006f4 	.word	0x200006f4
    8904:	20000818 	.word	0x20000818
    8908:	20000a20 	.word	0x20000a20
    890c:	0000d159 	.word	0x0000d159
    8910:	00013bc0 	.word	0x00013bc0
    8914:	0000e7e5 	.word	0x0000e7e5
    8918:	00008639 	.word	0x00008639
    891c:	0000d1e5 	.word	0x0000d1e5
    8920:	00013bf4 	.word	0x00013bf4

00008924 <mqtt_initialize>:
}
/**
 * \brief Initialize the WiFi
 */
int mqtt_initialize(mqtt_inst_config *new_mqtt_conf)
{
    8924:	b590      	push	{r4, r7, lr}
    8926:	b08b      	sub	sp, #44	; 0x2c
    8928:	af00      	add	r7, sp, #0
    892a:	6078      	str	r0, [r7, #4]
	tstrWifiInitParam param;
	int8_t ret;
	curr_mqtt_config = new_mqtt_conf;
    892c:	4b27      	ldr	r3, [pc, #156]	; (89cc <mqtt_initialize+0xa8>)
    892e:	687a      	ldr	r2, [r7, #4]
    8930:	601a      	str	r2, [r3, #0]
	/* Initialize the Timer. */
	configure_timer();
    8932:	4b27      	ldr	r3, [pc, #156]	; (89d0 <mqtt_initialize+0xac>)
    8934:	4798      	blx	r3

	/* Initialize the MQTT service. */
	configure_mqtt();
    8936:	4b27      	ldr	r3, [pc, #156]	; (89d4 <mqtt_initialize+0xb0>)
    8938:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    893a:	4b27      	ldr	r3, [pc, #156]	; (89d8 <mqtt_initialize+0xb4>)
    893c:	4798      	blx	r3

	printf("MQTT Configured.\r\n");
    893e:	4b27      	ldr	r3, [pc, #156]	; (89dc <mqtt_initialize+0xb8>)
    8940:	0018      	movs	r0, r3
    8942:	4b27      	ldr	r3, [pc, #156]	; (89e0 <mqtt_initialize+0xbc>)
    8944:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    8946:	230c      	movs	r3, #12
    8948:	18fb      	adds	r3, r7, r3
    894a:	2218      	movs	r2, #24
    894c:	2100      	movs	r1, #0
    894e:	0018      	movs	r0, r3
    8950:	4b24      	ldr	r3, [pc, #144]	; (89e4 <mqtt_initialize+0xc0>)
    8952:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    8954:	230c      	movs	r3, #12
    8956:	18fb      	adds	r3, r7, r3
    8958:	4a23      	ldr	r2, [pc, #140]	; (89e8 <mqtt_initialize+0xc4>)
    895a:	601a      	str	r2, [r3, #0]
	printf("Initializing...\r\n");
    895c:	4b23      	ldr	r3, [pc, #140]	; (89ec <mqtt_initialize+0xc8>)
    895e:	0018      	movs	r0, r3
    8960:	4b1f      	ldr	r3, [pc, #124]	; (89e0 <mqtt_initialize+0xbc>)
    8962:	4798      	blx	r3
	ret = m2m_wifi_init(&param);
    8964:	2327      	movs	r3, #39	; 0x27
    8966:	18fc      	adds	r4, r7, r3
    8968:	230c      	movs	r3, #12
    896a:	18fb      	adds	r3, r7, r3
    896c:	0018      	movs	r0, r3
    896e:	4b20      	ldr	r3, [pc, #128]	; (89f0 <mqtt_initialize+0xcc>)
    8970:	4798      	blx	r3
    8972:	0003      	movs	r3, r0
    8974:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    8976:	2327      	movs	r3, #39	; 0x27
    8978:	18fb      	adds	r3, r7, r3
    897a:	781b      	ldrb	r3, [r3, #0]
    897c:	b25b      	sxtb	r3, r3
    897e:	2b00      	cmp	r3, #0
    8980:	d00a      	beq.n	8998 <mqtt_initialize+0x74>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    8982:	2327      	movs	r3, #39	; 0x27
    8984:	18fb      	adds	r3, r7, r3
    8986:	2200      	movs	r2, #0
    8988:	569a      	ldrsb	r2, [r3, r2]
    898a:	4b1a      	ldr	r3, [pc, #104]	; (89f4 <mqtt_initialize+0xd0>)
    898c:	0011      	movs	r1, r2
    898e:	0018      	movs	r0, r3
    8990:	4b19      	ldr	r3, [pc, #100]	; (89f8 <mqtt_initialize+0xd4>)
    8992:	4798      	blx	r3
		return 1;
    8994:	2301      	movs	r3, #1
    8996:	e015      	b.n	89c4 <mqtt_initialize+0xa0>
	}
	printf("main: m2m_wifi_init call success!(%d)\r\n", ret);
    8998:	2327      	movs	r3, #39	; 0x27
    899a:	18fb      	adds	r3, r7, r3
    899c:	2200      	movs	r2, #0
    899e:	569a      	ldrsb	r2, [r3, r2]
    89a0:	4b16      	ldr	r3, [pc, #88]	; (89fc <mqtt_initialize+0xd8>)
    89a2:	0011      	movs	r1, r2
    89a4:	0018      	movs	r0, r3
    89a6:	4b14      	ldr	r3, [pc, #80]	; (89f8 <mqtt_initialize+0xd4>)
    89a8:	4798      	blx	r3

	/* Initialize socket interface. */
	socketInit();
    89aa:	4b15      	ldr	r3, [pc, #84]	; (8a00 <mqtt_initialize+0xdc>)
    89ac:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    89ae:	4a15      	ldr	r2, [pc, #84]	; (8a04 <mqtt_initialize+0xe0>)
    89b0:	4b15      	ldr	r3, [pc, #84]	; (8a08 <mqtt_initialize+0xe4>)
    89b2:	0011      	movs	r1, r2
    89b4:	0018      	movs	r0, r3
    89b6:	4b15      	ldr	r3, [pc, #84]	; (8a0c <mqtt_initialize+0xe8>)
    89b8:	4798      	blx	r3
	printf("Sockets initialized.\r\n");
    89ba:	4b15      	ldr	r3, [pc, #84]	; (8a10 <mqtt_initialize+0xec>)
    89bc:	0018      	movs	r0, r3
    89be:	4b08      	ldr	r3, [pc, #32]	; (89e0 <mqtt_initialize+0xbc>)
    89c0:	4798      	blx	r3

	return 0;
    89c2:	2300      	movs	r3, #0
}
    89c4:	0018      	movs	r0, r3
    89c6:	46bd      	mov	sp, r7
    89c8:	b00b      	add	sp, #44	; 0x2c
    89ca:	bd90      	pop	{r4, r7, pc}
    89cc:	20000818 	.word	0x20000818
    89d0:	00008831 	.word	0x00008831
    89d4:	0000887d 	.word	0x0000887d
    89d8:	00000ab9 	.word	0x00000ab9
    89dc:	00013c28 	.word	0x00013c28
    89e0:	0000e901 	.word	0x0000e901
    89e4:	0000dda3 	.word	0x0000dda3
    89e8:	000084dd 	.word	0x000084dd
    89ec:	00013c3c 	.word	0x00013c3c
    89f0:	0000256d 	.word	0x0000256d
    89f4:	00013c50 	.word	0x00013c50
    89f8:	0000e7e5 	.word	0x0000e7e5
    89fc:	00013c78 	.word	0x00013c78
    8a00:	00005771 	.word	0x00005771
    8a04:	00008615 	.word	0x00008615
    8a08:	000085e1 	.word	0x000085e1
    8a0c:	000057c1 	.word	0x000057c1
    8a10:	00013ca0 	.word	0x00013ca0

00008a14 <register_request_topic>:

void register_request_topic(char topic_name[MQTT_SEND_BUFFER_SIZE], char wildcard, void (*function))
{
    8a14:	b580      	push	{r7, lr}
    8a16:	b0a8      	sub	sp, #160	; 0xa0
    8a18:	af00      	add	r7, sp, #0
    8a1a:	60f8      	str	r0, [r7, #12]
    8a1c:	607a      	str	r2, [r7, #4]
    8a1e:	230b      	movs	r3, #11
    8a20:	18fb      	adds	r3, r7, r3
    8a22:	1c0a      	adds	r2, r1, #0
    8a24:	701a      	strb	r2, [r3, #0]
	if (num_registered_request_topics < MAX_TOPICS) {
    8a26:	4b38      	ldr	r3, [pc, #224]	; (8b08 <register_request_topic+0xf4>)
    8a28:	781b      	ldrb	r3, [r3, #0]
    8a2a:	2b06      	cmp	r3, #6
    8a2c:	d865      	bhi.n	8afa <register_request_topic+0xe6>
		topic_struct new_topic;
		uint32_t topic_name_len = strlen(topic_name);
    8a2e:	68fb      	ldr	r3, [r7, #12]
    8a30:	0018      	movs	r0, r3
    8a32:	4b36      	ldr	r3, [pc, #216]	; (8b0c <register_request_topic+0xf8>)
    8a34:	4798      	blx	r3
    8a36:	0003      	movs	r3, r0
    8a38:	229c      	movs	r2, #156	; 0x9c
    8a3a:	18ba      	adds	r2, r7, r2
    8a3c:	6013      	str	r3, [r2, #0]
		strcpy(new_topic.topic_name, topic_name);
    8a3e:	68fa      	ldr	r2, [r7, #12]
    8a40:	2358      	movs	r3, #88	; 0x58
    8a42:	18fb      	adds	r3, r7, r3
    8a44:	0011      	movs	r1, r2
    8a46:	0018      	movs	r0, r3
    8a48:	4b31      	ldr	r3, [pc, #196]	; (8b10 <register_request_topic+0xfc>)
    8a4a:	4798      	blx	r3
		printf("new_topic.topic_name: %s\r\n", new_topic.topic_name);
    8a4c:	2358      	movs	r3, #88	; 0x58
    8a4e:	18fa      	adds	r2, r7, r3
    8a50:	4b30      	ldr	r3, [pc, #192]	; (8b14 <register_request_topic+0x100>)
    8a52:	0011      	movs	r1, r2
    8a54:	0018      	movs	r0, r3
    8a56:	4b30      	ldr	r3, [pc, #192]	; (8b18 <register_request_topic+0x104>)
    8a58:	4798      	blx	r3
		char topic_subscribe_str[MQTT_SEND_BUFFER_SIZE+1];
		strcpy(topic_subscribe_str, topic_name);
    8a5a:	68fa      	ldr	r2, [r7, #12]
    8a5c:	2314      	movs	r3, #20
    8a5e:	18fb      	adds	r3, r7, r3
    8a60:	0011      	movs	r1, r2
    8a62:	0018      	movs	r0, r3
    8a64:	4b2a      	ldr	r3, [pc, #168]	; (8b10 <register_request_topic+0xfc>)
    8a66:	4798      	blx	r3
		topic_subscribe_str[topic_name_len] = wildcard;
    8a68:	2314      	movs	r3, #20
    8a6a:	18fa      	adds	r2, r7, r3
    8a6c:	239c      	movs	r3, #156	; 0x9c
    8a6e:	18fb      	adds	r3, r7, r3
    8a70:	681b      	ldr	r3, [r3, #0]
    8a72:	18d3      	adds	r3, r2, r3
    8a74:	220b      	movs	r2, #11
    8a76:	18ba      	adds	r2, r7, r2
    8a78:	7812      	ldrb	r2, [r2, #0]
    8a7a:	701a      	strb	r2, [r3, #0]
		topic_subscribe_str[topic_name_len+1] = '\0';
    8a7c:	239c      	movs	r3, #156	; 0x9c
    8a7e:	18fb      	adds	r3, r7, r3
    8a80:	681b      	ldr	r3, [r3, #0]
    8a82:	3301      	adds	r3, #1
    8a84:	2214      	movs	r2, #20
    8a86:	18ba      	adds	r2, r7, r2
    8a88:	2100      	movs	r1, #0
    8a8a:	54d1      	strb	r1, [r2, r3]
		
		if(mqtt_subscribe(&mqtt_inst, topic_subscribe_str, 0)) {
    8a8c:	2314      	movs	r3, #20
    8a8e:	18f9      	adds	r1, r7, r3
    8a90:	4b22      	ldr	r3, [pc, #136]	; (8b1c <register_request_topic+0x108>)
    8a92:	2200      	movs	r2, #0
    8a94:	0018      	movs	r0, r3
    8a96:	4b22      	ldr	r3, [pc, #136]	; (8b20 <register_request_topic+0x10c>)
    8a98:	4798      	blx	r3
    8a9a:	1e03      	subs	r3, r0, #0
    8a9c:	d007      	beq.n	8aae <register_request_topic+0x9a>
			printf("failed to subscribe topic: %s\r\n", topic_subscribe_str);
    8a9e:	2314      	movs	r3, #20
    8aa0:	18fa      	adds	r2, r7, r3
    8aa2:	4b20      	ldr	r3, [pc, #128]	; (8b24 <register_request_topic+0x110>)
    8aa4:	0011      	movs	r1, r2
    8aa6:	0018      	movs	r0, r3
    8aa8:	4b1b      	ldr	r3, [pc, #108]	; (8b18 <register_request_topic+0x104>)
    8aaa:	4798      	blx	r3
    8aac:	e029      	b.n	8b02 <register_request_topic+0xee>
			return;	
		}
		new_topic.function = function;
    8aae:	687a      	ldr	r2, [r7, #4]
    8ab0:	2358      	movs	r3, #88	; 0x58
    8ab2:	18fb      	adds	r3, r7, r3
    8ab4:	641a      	str	r2, [r3, #64]	; 0x40
		memcpy((int) &registered_request_topics[num_registered_request_topics++], &new_topic, sizeof(topic_struct));
    8ab6:	4b14      	ldr	r3, [pc, #80]	; (8b08 <register_request_topic+0xf4>)
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	1c5a      	adds	r2, r3, #1
    8abc:	b2d1      	uxtb	r1, r2
    8abe:	4a12      	ldr	r2, [pc, #72]	; (8b08 <register_request_topic+0xf4>)
    8ac0:	7011      	strb	r1, [r2, #0]
    8ac2:	001a      	movs	r2, r3
    8ac4:	0013      	movs	r3, r2
    8ac6:	011b      	lsls	r3, r3, #4
    8ac8:	189b      	adds	r3, r3, r2
    8aca:	009b      	lsls	r3, r3, #2
    8acc:	4a16      	ldr	r2, [pc, #88]	; (8b28 <register_request_topic+0x114>)
    8ace:	189b      	adds	r3, r3, r2
    8ad0:	2258      	movs	r2, #88	; 0x58
    8ad2:	18b9      	adds	r1, r7, r2
    8ad4:	2244      	movs	r2, #68	; 0x44
    8ad6:	0018      	movs	r0, r3
    8ad8:	4b14      	ldr	r3, [pc, #80]	; (8b2c <register_request_topic+0x118>)
    8ada:	4798      	blx	r3
		printf("[register_request_topic] successfully registered request topic %s and callback!\r\n", registered_request_topics[num_registered_request_topics-1].topic_name);
    8adc:	4b0a      	ldr	r3, [pc, #40]	; (8b08 <register_request_topic+0xf4>)
    8ade:	781b      	ldrb	r3, [r3, #0]
    8ae0:	1e5a      	subs	r2, r3, #1
    8ae2:	0013      	movs	r3, r2
    8ae4:	011b      	lsls	r3, r3, #4
    8ae6:	189b      	adds	r3, r3, r2
    8ae8:	009b      	lsls	r3, r3, #2
    8aea:	4a0f      	ldr	r2, [pc, #60]	; (8b28 <register_request_topic+0x114>)
    8aec:	189a      	adds	r2, r3, r2
    8aee:	4b10      	ldr	r3, [pc, #64]	; (8b30 <register_request_topic+0x11c>)
    8af0:	0011      	movs	r1, r2
    8af2:	0018      	movs	r0, r3
    8af4:	4b08      	ldr	r3, [pc, #32]	; (8b18 <register_request_topic+0x104>)
    8af6:	4798      	blx	r3
    8af8:	e003      	b.n	8b02 <register_request_topic+0xee>
	} else {
		printf("[register_request_topic] max number of topics already registered.\r\n");
    8afa:	4b0e      	ldr	r3, [pc, #56]	; (8b34 <register_request_topic+0x120>)
    8afc:	0018      	movs	r0, r3
    8afe:	4b0e      	ldr	r3, [pc, #56]	; (8b38 <register_request_topic+0x124>)
    8b00:	4798      	blx	r3
	}
}
    8b02:	46bd      	mov	sp, r7
    8b04:	b028      	add	sp, #160	; 0xa0
    8b06:	bd80      	pop	{r7, pc}
    8b08:	20000220 	.word	0x20000220
    8b0c:	0000eac9 	.word	0x0000eac9
    8b10:	0000eab9 	.word	0x0000eab9
    8b14:	00013cb8 	.word	0x00013cb8
    8b18:	0000e7e5 	.word	0x0000e7e5
    8b1c:	20000a20 	.word	0x20000a20
    8b20:	0000d60d 	.word	0x0000d60d
    8b24:	00013cd4 	.word	0x00013cd4
    8b28:	2000081c 	.word	0x2000081c
    8b2c:	0000dd6d 	.word	0x0000dd6d
    8b30:	00013cf4 	.word	0x00013cf4
    8b34:	00013d48 	.word	0x00013d48
    8b38:	0000e901 	.word	0x0000e901

00008b3c <get_mqtt_config_defaults>:
void publish_to_topic(char topic[MAIN_MQTT_BUFFER_SIZE], uint8_t data[MQTT_SEND_BUFFER_SIZE], uint32_t data_len) {
	mqtt_publish(&mqtt_inst, topic, data, data_len, 0, 0);
}

void get_mqtt_config_defaults(mqtt_inst_config *mqtt_conf)
{
    8b3c:	b580      	push	{r7, lr}
    8b3e:	b082      	sub	sp, #8
    8b40:	af00      	add	r7, sp, #0
    8b42:	6078      	str	r0, [r7, #4]
	mqtt_conf->ssid = "AirPennNet-Device";
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	4a09      	ldr	r2, [pc, #36]	; (8b6c <get_mqtt_config_defaults+0x30>)
    8b48:	601a      	str	r2, [r3, #0]
	mqtt_conf->auth = M2M_WIFI_SEC_WPA_PSK;
    8b4a:	687b      	ldr	r3, [r7, #4]
    8b4c:	2202      	movs	r2, #2
    8b4e:	605a      	str	r2, [r3, #4]
	mqtt_conf->password = "penn1740wifi";
    8b50:	687b      	ldr	r3, [r7, #4]
    8b52:	4a07      	ldr	r2, [pc, #28]	; (8b70 <get_mqtt_config_defaults+0x34>)
    8b54:	609a      	str	r2, [r3, #8]
	mqtt_conf->port = 1883;
    8b56:	687b      	ldr	r3, [r7, #4]
    8b58:	4a06      	ldr	r2, [pc, #24]	; (8b74 <get_mqtt_config_defaults+0x38>)
    8b5a:	819a      	strh	r2, [r3, #12]
	mqtt_conf->broker_server = "deet.seas.upenn.edu";
    8b5c:	687b      	ldr	r3, [r7, #4]
    8b5e:	4a06      	ldr	r2, [pc, #24]	; (8b78 <get_mqtt_config_defaults+0x3c>)
    8b60:	611a      	str	r2, [r3, #16]
}
    8b62:	46c0      	nop			; (mov r8, r8)
    8b64:	46bd      	mov	sp, r7
    8b66:	b002      	add	sp, #8
    8b68:	bd80      	pop	{r7, pc}
    8b6a:	46c0      	nop			; (mov r8, r8)
    8b6c:	00013d8c 	.word	0x00013d8c
    8b70:	00013da0 	.word	0x00013da0
    8b74:	0000075b 	.word	0x0000075b
    8b78:	00013db0 	.word	0x00013db0

00008b7c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    8b7c:	b580      	push	{r7, lr}
    8b7e:	b082      	sub	sp, #8
    8b80:	af00      	add	r7, sp, #0
    8b82:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    8b84:	687b      	ldr	r3, [r7, #4]
    8b86:	2b00      	cmp	r3, #0
    8b88:	d00c      	beq.n	8ba4 <delay_cycles+0x28>
		SysTick->LOAD = n;
    8b8a:	4b08      	ldr	r3, [pc, #32]	; (8bac <delay_cycles+0x30>)
    8b8c:	687a      	ldr	r2, [r7, #4]
    8b8e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    8b90:	4b06      	ldr	r3, [pc, #24]	; (8bac <delay_cycles+0x30>)
    8b92:	2200      	movs	r2, #0
    8b94:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8b96:	46c0      	nop			; (mov r8, r8)
    8b98:	4b04      	ldr	r3, [pc, #16]	; (8bac <delay_cycles+0x30>)
    8b9a:	681a      	ldr	r2, [r3, #0]
    8b9c:	2380      	movs	r3, #128	; 0x80
    8b9e:	025b      	lsls	r3, r3, #9
    8ba0:	4013      	ands	r3, r2
    8ba2:	d0f9      	beq.n	8b98 <delay_cycles+0x1c>
		};
	}
}
    8ba4:	46c0      	nop			; (mov r8, r8)
    8ba6:	46bd      	mov	sp, r7
    8ba8:	b002      	add	sp, #8
    8baa:	bd80      	pop	{r7, pc}
    8bac:	e000e010 	.word	0xe000e010

00008bb0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    8bb4:	2000      	movs	r0, #0
    8bb6:	4b0f      	ldr	r3, [pc, #60]	; (8bf4 <delay_init+0x44>)
    8bb8:	4798      	blx	r3
    8bba:	0002      	movs	r2, r0
    8bbc:	4b0e      	ldr	r3, [pc, #56]	; (8bf8 <delay_init+0x48>)
    8bbe:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    8bc0:	4b0d      	ldr	r3, [pc, #52]	; (8bf8 <delay_init+0x48>)
    8bc2:	6818      	ldr	r0, [r3, #0]
    8bc4:	4b0d      	ldr	r3, [pc, #52]	; (8bfc <delay_init+0x4c>)
    8bc6:	22fa      	movs	r2, #250	; 0xfa
    8bc8:	0091      	lsls	r1, r2, #2
    8bca:	4798      	blx	r3
    8bcc:	0003      	movs	r3, r0
    8bce:	001a      	movs	r2, r3
    8bd0:	4b09      	ldr	r3, [pc, #36]	; (8bf8 <delay_init+0x48>)
    8bd2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    8bd4:	4b08      	ldr	r3, [pc, #32]	; (8bf8 <delay_init+0x48>)
    8bd6:	6818      	ldr	r0, [r3, #0]
    8bd8:	4b08      	ldr	r3, [pc, #32]	; (8bfc <delay_init+0x4c>)
    8bda:	22fa      	movs	r2, #250	; 0xfa
    8bdc:	0091      	lsls	r1, r2, #2
    8bde:	4798      	blx	r3
    8be0:	0003      	movs	r3, r0
    8be2:	001a      	movs	r2, r3
    8be4:	4b06      	ldr	r3, [pc, #24]	; (8c00 <delay_init+0x50>)
    8be6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    8be8:	4b06      	ldr	r3, [pc, #24]	; (8c04 <delay_init+0x54>)
    8bea:	2205      	movs	r2, #5
    8bec:	601a      	str	r2, [r3, #0]
}
    8bee:	46c0      	nop			; (mov r8, r8)
    8bf0:	46bd      	mov	sp, r7
    8bf2:	bd80      	pop	{r7, pc}
    8bf4:	0000c581 	.word	0x0000c581
    8bf8:	20000008 	.word	0x20000008
    8bfc:	0001080d 	.word	0x0001080d
    8c00:	2000000c 	.word	0x2000000c
    8c04:	e000e010 	.word	0xe000e010

00008c08 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    8c08:	b580      	push	{r7, lr}
    8c0a:	b082      	sub	sp, #8
    8c0c:	af00      	add	r7, sp, #0
    8c0e:	6078      	str	r0, [r7, #4]
	while (n--) {
    8c10:	e004      	b.n	8c1c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    8c12:	4b07      	ldr	r3, [pc, #28]	; (8c30 <delay_cycles_ms+0x28>)
    8c14:	681b      	ldr	r3, [r3, #0]
    8c16:	0018      	movs	r0, r3
    8c18:	4b06      	ldr	r3, [pc, #24]	; (8c34 <delay_cycles_ms+0x2c>)
    8c1a:	4798      	blx	r3
	while (n--) {
    8c1c:	687b      	ldr	r3, [r7, #4]
    8c1e:	1e5a      	subs	r2, r3, #1
    8c20:	607a      	str	r2, [r7, #4]
    8c22:	2b00      	cmp	r3, #0
    8c24:	d1f5      	bne.n	8c12 <delay_cycles_ms+0xa>
	}
}
    8c26:	46c0      	nop			; (mov r8, r8)
    8c28:	46bd      	mov	sp, r7
    8c2a:	b002      	add	sp, #8
    8c2c:	bd80      	pop	{r7, pc}
    8c2e:	46c0      	nop			; (mov r8, r8)
    8c30:	20000008 	.word	0x20000008
    8c34:	00008b7d 	.word	0x00008b7d

00008c38 <system_gclk_chan_get_config_defaults>:
{
    8c38:	b580      	push	{r7, lr}
    8c3a:	b082      	sub	sp, #8
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	2200      	movs	r2, #0
    8c44:	701a      	strb	r2, [r3, #0]
}
    8c46:	46c0      	nop			; (mov r8, r8)
    8c48:	46bd      	mov	sp, r7
    8c4a:	b002      	add	sp, #8
    8c4c:	bd80      	pop	{r7, pc}
	...

00008c50 <system_apb_clock_set_mask>:
{
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	af00      	add	r7, sp, #0
    8c56:	0002      	movs	r2, r0
    8c58:	6039      	str	r1, [r7, #0]
    8c5a:	1dfb      	adds	r3, r7, #7
    8c5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8c5e:	1dfb      	adds	r3, r7, #7
    8c60:	781b      	ldrb	r3, [r3, #0]
    8c62:	2b01      	cmp	r3, #1
    8c64:	d00a      	beq.n	8c7c <system_apb_clock_set_mask+0x2c>
    8c66:	2b02      	cmp	r3, #2
    8c68:	d00f      	beq.n	8c8a <system_apb_clock_set_mask+0x3a>
    8c6a:	2b00      	cmp	r3, #0
    8c6c:	d114      	bne.n	8c98 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    8c6e:	4b0e      	ldr	r3, [pc, #56]	; (8ca8 <system_apb_clock_set_mask+0x58>)
    8c70:	4a0d      	ldr	r2, [pc, #52]	; (8ca8 <system_apb_clock_set_mask+0x58>)
    8c72:	6991      	ldr	r1, [r2, #24]
    8c74:	683a      	ldr	r2, [r7, #0]
    8c76:	430a      	orrs	r2, r1
    8c78:	619a      	str	r2, [r3, #24]
			break;
    8c7a:	e00f      	b.n	8c9c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    8c7c:	4b0a      	ldr	r3, [pc, #40]	; (8ca8 <system_apb_clock_set_mask+0x58>)
    8c7e:	4a0a      	ldr	r2, [pc, #40]	; (8ca8 <system_apb_clock_set_mask+0x58>)
    8c80:	69d1      	ldr	r1, [r2, #28]
    8c82:	683a      	ldr	r2, [r7, #0]
    8c84:	430a      	orrs	r2, r1
    8c86:	61da      	str	r2, [r3, #28]
			break;
    8c88:	e008      	b.n	8c9c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    8c8a:	4b07      	ldr	r3, [pc, #28]	; (8ca8 <system_apb_clock_set_mask+0x58>)
    8c8c:	4a06      	ldr	r2, [pc, #24]	; (8ca8 <system_apb_clock_set_mask+0x58>)
    8c8e:	6a11      	ldr	r1, [r2, #32]
    8c90:	683a      	ldr	r2, [r7, #0]
    8c92:	430a      	orrs	r2, r1
    8c94:	621a      	str	r2, [r3, #32]
			break;
    8c96:	e001      	b.n	8c9c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    8c98:	2317      	movs	r3, #23
    8c9a:	e000      	b.n	8c9e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    8c9c:	2300      	movs	r3, #0
}
    8c9e:	0018      	movs	r0, r3
    8ca0:	46bd      	mov	sp, r7
    8ca2:	b002      	add	sp, #8
    8ca4:	bd80      	pop	{r7, pc}
    8ca6:	46c0      	nop			; (mov r8, r8)
    8ca8:	40000400 	.word	0x40000400

00008cac <system_pinmux_get_config_defaults>:
{
    8cac:	b580      	push	{r7, lr}
    8cae:	b082      	sub	sp, #8
    8cb0:	af00      	add	r7, sp, #0
    8cb2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8cb4:	687b      	ldr	r3, [r7, #4]
    8cb6:	2280      	movs	r2, #128	; 0x80
    8cb8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8cba:	687b      	ldr	r3, [r7, #4]
    8cbc:	2200      	movs	r2, #0
    8cbe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8cc0:	687b      	ldr	r3, [r7, #4]
    8cc2:	2201      	movs	r2, #1
    8cc4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8cc6:	687b      	ldr	r3, [r7, #4]
    8cc8:	2200      	movs	r2, #0
    8cca:	70da      	strb	r2, [r3, #3]
}
    8ccc:	46c0      	nop			; (mov r8, r8)
    8cce:	46bd      	mov	sp, r7
    8cd0:	b002      	add	sp, #8
    8cd2:	bd80      	pop	{r7, pc}

00008cd4 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    8cd4:	b580      	push	{r7, lr}
    8cd6:	b082      	sub	sp, #8
    8cd8:	af00      	add	r7, sp, #0
    8cda:	0002      	movs	r2, r0
    8cdc:	1dfb      	adds	r3, r7, #7
    8cde:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    8ce0:	1dfb      	adds	r3, r7, #7
    8ce2:	781b      	ldrb	r3, [r3, #0]
    8ce4:	2b00      	cmp	r3, #0
    8ce6:	d002      	beq.n	8cee <system_voltage_reference_enable+0x1a>
    8ce8:	2b01      	cmp	r3, #1
    8cea:	d007      	beq.n	8cfc <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    8cec:	e00d      	b.n	8d0a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    8cee:	4b08      	ldr	r3, [pc, #32]	; (8d10 <system_voltage_reference_enable+0x3c>)
    8cf0:	4a07      	ldr	r2, [pc, #28]	; (8d10 <system_voltage_reference_enable+0x3c>)
    8cf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
    8cf4:	2102      	movs	r1, #2
    8cf6:	430a      	orrs	r2, r1
    8cf8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    8cfa:	e006      	b.n	8d0a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    8cfc:	4b04      	ldr	r3, [pc, #16]	; (8d10 <system_voltage_reference_enable+0x3c>)
    8cfe:	4a04      	ldr	r2, [pc, #16]	; (8d10 <system_voltage_reference_enable+0x3c>)
    8d00:	6c12      	ldr	r2, [r2, #64]	; 0x40
    8d02:	2104      	movs	r1, #4
    8d04:	430a      	orrs	r2, r1
    8d06:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    8d08:	46c0      	nop			; (mov r8, r8)
	}
}
    8d0a:	46bd      	mov	sp, r7
    8d0c:	b002      	add	sp, #8
    8d0e:	bd80      	pop	{r7, pc}
    8d10:	40000800 	.word	0x40000800

00008d14 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    8d14:	b580      	push	{r7, lr}
    8d16:	b084      	sub	sp, #16
    8d18:	af00      	add	r7, sp, #0
    8d1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    8d1c:	687b      	ldr	r3, [r7, #4]
    8d1e:	681b      	ldr	r3, [r3, #0]
    8d20:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8d22:	68fb      	ldr	r3, [r7, #12]
    8d24:	7e5b      	ldrb	r3, [r3, #25]
    8d26:	b2db      	uxtb	r3, r3
    8d28:	b25b      	sxtb	r3, r3
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	da01      	bge.n	8d32 <adc_is_syncing+0x1e>
		return true;
    8d2e:	2301      	movs	r3, #1
    8d30:	e000      	b.n	8d34 <adc_is_syncing+0x20>
	}

	return false;
    8d32:	2300      	movs	r3, #0
}
    8d34:	0018      	movs	r0, r3
    8d36:	46bd      	mov	sp, r7
    8d38:	b004      	add	sp, #16
    8d3a:	bd80      	pop	{r7, pc}

00008d3c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    8d3c:	b580      	push	{r7, lr}
    8d3e:	b082      	sub	sp, #8
    8d40:	af00      	add	r7, sp, #0
    8d42:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    8d44:	687b      	ldr	r3, [r7, #4]
    8d46:	2200      	movs	r2, #0
    8d48:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    8d4a:	687b      	ldr	r3, [r7, #4]
    8d4c:	2200      	movs	r2, #0
    8d4e:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	2200      	movs	r2, #0
    8d54:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    8d56:	687b      	ldr	r3, [r7, #4]
    8d58:	2200      	movs	r2, #0
    8d5a:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    8d5c:	687b      	ldr	r3, [r7, #4]
    8d5e:	2200      	movs	r2, #0
    8d60:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    8d62:	687b      	ldr	r3, [r7, #4]
    8d64:	2200      	movs	r2, #0
    8d66:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    8d68:	687b      	ldr	r3, [r7, #4]
    8d6a:	2200      	movs	r2, #0
    8d6c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    8d6e:	687b      	ldr	r3, [r7, #4]
    8d70:	2200      	movs	r2, #0
    8d72:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    8d74:	687b      	ldr	r3, [r7, #4]
    8d76:	2200      	movs	r2, #0
    8d78:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    8d7a:	687b      	ldr	r3, [r7, #4]
    8d7c:	22c0      	movs	r2, #192	; 0xc0
    8d7e:	0152      	lsls	r2, r2, #5
    8d80:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    8d82:	687b      	ldr	r3, [r7, #4]
    8d84:	2200      	movs	r2, #0
    8d86:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    8d88:	687b      	ldr	r3, [r7, #4]
    8d8a:	2200      	movs	r2, #0
    8d8c:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    8d8e:	687b      	ldr	r3, [r7, #4]
    8d90:	2200      	movs	r2, #0
    8d92:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	2200      	movs	r2, #0
    8d98:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    8d9a:	687b      	ldr	r3, [r7, #4]
    8d9c:	2200      	movs	r2, #0
    8d9e:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    8da0:	687b      	ldr	r3, [r7, #4]
    8da2:	222a      	movs	r2, #42	; 0x2a
    8da4:	2100      	movs	r1, #0
    8da6:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    8da8:	687b      	ldr	r3, [r7, #4]
    8daa:	2200      	movs	r2, #0
    8dac:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    8dae:	687b      	ldr	r3, [r7, #4]
    8db0:	2200      	movs	r2, #0
    8db2:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    8db4:	687b      	ldr	r3, [r7, #4]
    8db6:	2224      	movs	r2, #36	; 0x24
    8db8:	2100      	movs	r1, #0
    8dba:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	2200      	movs	r2, #0
    8dc0:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	2200      	movs	r2, #0
    8dc6:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    8dc8:	687b      	ldr	r3, [r7, #4]
    8dca:	2200      	movs	r2, #0
    8dcc:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    8dce:	687b      	ldr	r3, [r7, #4]
    8dd0:	222b      	movs	r2, #43	; 0x2b
    8dd2:	2100      	movs	r1, #0
    8dd4:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    8dd6:	687b      	ldr	r3, [r7, #4]
    8dd8:	222c      	movs	r2, #44	; 0x2c
    8dda:	2100      	movs	r1, #0
    8ddc:	5499      	strb	r1, [r3, r2]
}
    8dde:	46c0      	nop			; (mov r8, r8)
    8de0:	46bd      	mov	sp, r7
    8de2:	b002      	add	sp, #8
    8de4:	bd80      	pop	{r7, pc}
	...

00008de8 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    8de8:	b580      	push	{r7, lr}
    8dea:	b098      	sub	sp, #96	; 0x60
    8dec:	af00      	add	r7, sp, #0
    8dee:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    8df0:	230c      	movs	r3, #12
    8df2:	18fa      	adds	r2, r7, r3
    8df4:	4b15      	ldr	r3, [pc, #84]	; (8e4c <_adc_configure_ain_pin+0x64>)
    8df6:	0010      	movs	r0, r2
    8df8:	0019      	movs	r1, r3
    8dfa:	2350      	movs	r3, #80	; 0x50
    8dfc:	001a      	movs	r2, r3
    8dfe:	4b14      	ldr	r3, [pc, #80]	; (8e50 <_adc_configure_ain_pin+0x68>)
    8e00:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    8e02:	4b14      	ldr	r3, [pc, #80]	; (8e54 <_adc_configure_ain_pin+0x6c>)
    8e04:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	2b13      	cmp	r3, #19
    8e0a:	d81a      	bhi.n	8e42 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    8e0c:	230c      	movs	r3, #12
    8e0e:	18fb      	adds	r3, r7, r3
    8e10:	687a      	ldr	r2, [r7, #4]
    8e12:	0092      	lsls	r2, r2, #2
    8e14:	58d3      	ldr	r3, [r2, r3]
    8e16:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    8e18:	2308      	movs	r3, #8
    8e1a:	18fb      	adds	r3, r7, r3
    8e1c:	0018      	movs	r0, r3
    8e1e:	4b0e      	ldr	r3, [pc, #56]	; (8e58 <_adc_configure_ain_pin+0x70>)
    8e20:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    8e22:	2308      	movs	r3, #8
    8e24:	18fb      	adds	r3, r7, r3
    8e26:	2200      	movs	r2, #0
    8e28:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    8e2a:	2308      	movs	r3, #8
    8e2c:	18fb      	adds	r3, r7, r3
    8e2e:	2201      	movs	r2, #1
    8e30:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    8e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8e34:	b2db      	uxtb	r3, r3
    8e36:	2208      	movs	r2, #8
    8e38:	18ba      	adds	r2, r7, r2
    8e3a:	0011      	movs	r1, r2
    8e3c:	0018      	movs	r0, r3
    8e3e:	4b07      	ldr	r3, [pc, #28]	; (8e5c <_adc_configure_ain_pin+0x74>)
    8e40:	4798      	blx	r3
	}
}
    8e42:	46c0      	nop			; (mov r8, r8)
    8e44:	46bd      	mov	sp, r7
    8e46:	b018      	add	sp, #96	; 0x60
    8e48:	bd80      	pop	{r7, pc}
    8e4a:	46c0      	nop			; (mov r8, r8)
    8e4c:	00013dc4 	.word	0x00013dc4
    8e50:	0000dd6d 	.word	0x0000dd6d
    8e54:	0000ffff 	.word	0x0000ffff
    8e58:	00008cad 	.word	0x00008cad
    8e5c:	0000c945 	.word	0x0000c945

00008e60 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    8e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e62:	b089      	sub	sp, #36	; 0x24
    8e64:	af00      	add	r7, sp, #0
    8e66:	6078      	str	r0, [r7, #4]
    8e68:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    8e6a:	231f      	movs	r3, #31
    8e6c:	18fb      	adds	r3, r7, r3
    8e6e:	2200      	movs	r2, #0
    8e70:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    8e72:	2310      	movs	r3, #16
    8e74:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    8e76:	2317      	movs	r3, #23
    8e78:	18fb      	adds	r3, r7, r3
    8e7a:	2200      	movs	r2, #0
    8e7c:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    8e7e:	687b      	ldr	r3, [r7, #4]
    8e80:	681b      	ldr	r3, [r3, #0]
    8e82:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8e84:	230c      	movs	r3, #12
    8e86:	18fb      	adds	r3, r7, r3
    8e88:	0018      	movs	r0, r3
    8e8a:	4bce      	ldr	r3, [pc, #824]	; (91c4 <_adc_set_config+0x364>)
    8e8c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    8e8e:	683b      	ldr	r3, [r7, #0]
    8e90:	781a      	ldrb	r2, [r3, #0]
    8e92:	230c      	movs	r3, #12
    8e94:	18fb      	adds	r3, r7, r3
    8e96:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    8e98:	230c      	movs	r3, #12
    8e9a:	18fb      	adds	r3, r7, r3
    8e9c:	0019      	movs	r1, r3
    8e9e:	201e      	movs	r0, #30
    8ea0:	4bc9      	ldr	r3, [pc, #804]	; (91c8 <_adc_set_config+0x368>)
    8ea2:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    8ea4:	201e      	movs	r0, #30
    8ea6:	4bc9      	ldr	r3, [pc, #804]	; (91cc <_adc_set_config+0x36c>)
    8ea8:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    8eaa:	683b      	ldr	r3, [r7, #0]
    8eac:	222c      	movs	r2, #44	; 0x2c
    8eae:	5c9b      	ldrb	r3, [r3, r2]
    8eb0:	2b00      	cmp	r3, #0
    8eb2:	d040      	beq.n	8f36 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    8eb4:	2316      	movs	r3, #22
    8eb6:	18fb      	adds	r3, r7, r3
    8eb8:	683a      	ldr	r2, [r7, #0]
    8eba:	212b      	movs	r1, #43	; 0x2b
    8ebc:	5c52      	ldrb	r2, [r2, r1]
    8ebe:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    8ec0:	683b      	ldr	r3, [r7, #0]
    8ec2:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    8ec4:	2315      	movs	r3, #21
    8ec6:	18fb      	adds	r3, r7, r3
    8ec8:	2216      	movs	r2, #22
    8eca:	18ba      	adds	r2, r7, r2
    8ecc:	7812      	ldrb	r2, [r2, #0]
    8ece:	188a      	adds	r2, r1, r2
    8ed0:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    8ed2:	683b      	ldr	r3, [r7, #0]
    8ed4:	222c      	movs	r2, #44	; 0x2c
    8ed6:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    8ed8:	230f      	movs	r3, #15
    8eda:	18fb      	adds	r3, r7, r3
    8edc:	2215      	movs	r2, #21
    8ede:	18ba      	adds	r2, r7, r2
    8ee0:	7812      	ldrb	r2, [r2, #0]
    8ee2:	188a      	adds	r2, r1, r2
    8ee4:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    8ee6:	e018      	b.n	8f1a <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    8ee8:	2316      	movs	r3, #22
    8eea:	18fb      	adds	r3, r7, r3
    8eec:	781b      	ldrb	r3, [r3, #0]
    8eee:	220f      	movs	r2, #15
    8ef0:	4013      	ands	r3, r2
    8ef2:	683a      	ldr	r2, [r7, #0]
    8ef4:	7b12      	ldrb	r2, [r2, #12]
    8ef6:	189b      	adds	r3, r3, r2
    8ef8:	0018      	movs	r0, r3
    8efa:	4bb5      	ldr	r3, [pc, #724]	; (91d0 <_adc_set_config+0x370>)
    8efc:	4798      	blx	r3
			start_pin++;
    8efe:	2315      	movs	r3, #21
    8f00:	18fb      	adds	r3, r7, r3
    8f02:	781a      	ldrb	r2, [r3, #0]
    8f04:	2315      	movs	r3, #21
    8f06:	18fb      	adds	r3, r7, r3
    8f08:	3201      	adds	r2, #1
    8f0a:	701a      	strb	r2, [r3, #0]
			offset++;
    8f0c:	2316      	movs	r3, #22
    8f0e:	18fb      	adds	r3, r7, r3
    8f10:	781a      	ldrb	r2, [r3, #0]
    8f12:	2316      	movs	r3, #22
    8f14:	18fb      	adds	r3, r7, r3
    8f16:	3201      	adds	r2, #1
    8f18:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    8f1a:	2315      	movs	r3, #21
    8f1c:	18fa      	adds	r2, r7, r3
    8f1e:	230f      	movs	r3, #15
    8f20:	18fb      	adds	r3, r7, r3
    8f22:	7812      	ldrb	r2, [r2, #0]
    8f24:	781b      	ldrb	r3, [r3, #0]
    8f26:	429a      	cmp	r2, r3
    8f28:	d3de      	bcc.n	8ee8 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    8f2a:	683b      	ldr	r3, [r7, #0]
    8f2c:	89db      	ldrh	r3, [r3, #14]
    8f2e:	0018      	movs	r0, r3
    8f30:	4ba7      	ldr	r3, [pc, #668]	; (91d0 <_adc_set_config+0x370>)
    8f32:	4798      	blx	r3
    8f34:	e009      	b.n	8f4a <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    8f36:	683b      	ldr	r3, [r7, #0]
    8f38:	7b1b      	ldrb	r3, [r3, #12]
    8f3a:	0018      	movs	r0, r3
    8f3c:	4ba4      	ldr	r3, [pc, #656]	; (91d0 <_adc_set_config+0x370>)
    8f3e:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    8f40:	683b      	ldr	r3, [r7, #0]
    8f42:	89db      	ldrh	r3, [r3, #14]
    8f44:	0018      	movs	r0, r3
    8f46:	4ba2      	ldr	r3, [pc, #648]	; (91d0 <_adc_set_config+0x370>)
    8f48:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    8f4a:	683b      	ldr	r3, [r7, #0]
    8f4c:	7d5b      	ldrb	r3, [r3, #21]
    8f4e:	009b      	lsls	r3, r3, #2
    8f50:	b2da      	uxtb	r2, r3
    8f52:	693b      	ldr	r3, [r7, #16]
    8f54:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    8f56:	683b      	ldr	r3, [r7, #0]
    8f58:	7d9b      	ldrb	r3, [r3, #22]
    8f5a:	01db      	lsls	r3, r3, #7
    8f5c:	b25a      	sxtb	r2, r3
			(config->reference);
    8f5e:	683b      	ldr	r3, [r7, #0]
    8f60:	785b      	ldrb	r3, [r3, #1]
    8f62:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    8f64:	4313      	orrs	r3, r2
    8f66:	b25b      	sxtb	r3, r3
    8f68:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    8f6a:	693b      	ldr	r3, [r7, #16]
    8f6c:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    8f6e:	683b      	ldr	r3, [r7, #0]
    8f70:	791b      	ldrb	r3, [r3, #4]
    8f72:	2b34      	cmp	r3, #52	; 0x34
    8f74:	d846      	bhi.n	9004 <_adc_set_config+0x1a4>
    8f76:	009a      	lsls	r2, r3, #2
    8f78:	4b96      	ldr	r3, [pc, #600]	; (91d4 <_adc_set_config+0x374>)
    8f7a:	18d3      	adds	r3, r2, r3
    8f7c:	681b      	ldr	r3, [r3, #0]
    8f7e:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    8f80:	231f      	movs	r3, #31
    8f82:	18fb      	adds	r3, r7, r3
    8f84:	683a      	ldr	r2, [r7, #0]
    8f86:	7c52      	ldrb	r2, [r2, #17]
    8f88:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    8f8a:	2317      	movs	r3, #23
    8f8c:	18fb      	adds	r3, r7, r3
    8f8e:	683a      	ldr	r2, [r7, #0]
    8f90:	7c12      	ldrb	r2, [r2, #16]
    8f92:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8f94:	2310      	movs	r3, #16
    8f96:	61bb      	str	r3, [r7, #24]
		break;
    8f98:	e036      	b.n	9008 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    8f9a:	231f      	movs	r3, #31
    8f9c:	18fb      	adds	r3, r7, r3
    8f9e:	2201      	movs	r2, #1
    8fa0:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    8fa2:	2317      	movs	r3, #23
    8fa4:	18fb      	adds	r3, r7, r3
    8fa6:	2202      	movs	r2, #2
    8fa8:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8faa:	2310      	movs	r3, #16
    8fac:	61bb      	str	r3, [r7, #24]
		break;
    8fae:	e02b      	b.n	9008 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    8fb0:	231f      	movs	r3, #31
    8fb2:	18fb      	adds	r3, r7, r3
    8fb4:	2202      	movs	r2, #2
    8fb6:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    8fb8:	2317      	movs	r3, #23
    8fba:	18fb      	adds	r3, r7, r3
    8fbc:	2204      	movs	r2, #4
    8fbe:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8fc0:	2310      	movs	r3, #16
    8fc2:	61bb      	str	r3, [r7, #24]
		break;
    8fc4:	e020      	b.n	9008 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    8fc6:	231f      	movs	r3, #31
    8fc8:	18fb      	adds	r3, r7, r3
    8fca:	2201      	movs	r2, #1
    8fcc:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    8fce:	2317      	movs	r3, #23
    8fd0:	18fb      	adds	r3, r7, r3
    8fd2:	2206      	movs	r2, #6
    8fd4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8fd6:	2310      	movs	r3, #16
    8fd8:	61bb      	str	r3, [r7, #24]
		break;
    8fda:	e015      	b.n	9008 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    8fdc:	231f      	movs	r3, #31
    8fde:	18fb      	adds	r3, r7, r3
    8fe0:	2200      	movs	r2, #0
    8fe2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    8fe4:	2317      	movs	r3, #23
    8fe6:	18fb      	adds	r3, r7, r3
    8fe8:	2208      	movs	r2, #8
    8fea:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8fec:	2310      	movs	r3, #16
    8fee:	61bb      	str	r3, [r7, #24]
		break;
    8ff0:	e00a      	b.n	9008 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    8ff2:	2330      	movs	r3, #48	; 0x30
    8ff4:	61bb      	str	r3, [r7, #24]
		break;
    8ff6:	e007      	b.n	9008 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    8ff8:	2320      	movs	r3, #32
    8ffa:	61bb      	str	r3, [r7, #24]
		break;
    8ffc:	e004      	b.n	9008 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    8ffe:	2300      	movs	r3, #0
    9000:	61bb      	str	r3, [r7, #24]
		break;
    9002:	e001      	b.n	9008 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    9004:	2317      	movs	r3, #23
    9006:	e1ae      	b.n	9366 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    9008:	231f      	movs	r3, #31
    900a:	18fb      	adds	r3, r7, r3
    900c:	781b      	ldrb	r3, [r3, #0]
    900e:	011b      	lsls	r3, r3, #4
    9010:	b2db      	uxtb	r3, r3
    9012:	2270      	movs	r2, #112	; 0x70
    9014:	4013      	ands	r3, r2
    9016:	b2da      	uxtb	r2, r3
    9018:	2317      	movs	r3, #23
    901a:	18fb      	adds	r3, r7, r3
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	4313      	orrs	r3, r2
    9020:	b2da      	uxtb	r2, r3
    9022:	693b      	ldr	r3, [r7, #16]
    9024:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    9026:	683b      	ldr	r3, [r7, #0]
    9028:	7ddb      	ldrb	r3, [r3, #23]
    902a:	2b3f      	cmp	r3, #63	; 0x3f
    902c:	d901      	bls.n	9032 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    902e:	2317      	movs	r3, #23
    9030:	e199      	b.n	9366 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    9032:	683b      	ldr	r3, [r7, #0]
    9034:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    9036:	693b      	ldr	r3, [r7, #16]
    9038:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    903a:	46c0      	nop			; (mov r8, r8)
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	0018      	movs	r0, r3
    9040:	4b65      	ldr	r3, [pc, #404]	; (91d8 <_adc_set_config+0x378>)
    9042:	4798      	blx	r3
    9044:	1e03      	subs	r3, r0, #0
    9046:	d1f9      	bne.n	903c <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    9048:	683b      	ldr	r3, [r7, #0]
    904a:	885a      	ldrh	r2, [r3, #2]
    904c:	69bb      	ldr	r3, [r7, #24]
    904e:	b29b      	uxth	r3, r3
    9050:	4313      	orrs	r3, r2
    9052:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    9054:	683b      	ldr	r3, [r7, #0]
    9056:	2124      	movs	r1, #36	; 0x24
    9058:	5c5b      	ldrb	r3, [r3, r1]
    905a:	b29b      	uxth	r3, r3
    905c:	00db      	lsls	r3, r3, #3
    905e:	b29b      	uxth	r3, r3
			resolution |
    9060:	4313      	orrs	r3, r2
    9062:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    9064:	683b      	ldr	r3, [r7, #0]
    9066:	7d1b      	ldrb	r3, [r3, #20]
    9068:	b29b      	uxth	r3, r3
    906a:	009b      	lsls	r3, r3, #2
    906c:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    906e:	4313      	orrs	r3, r2
    9070:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    9072:	683b      	ldr	r3, [r7, #0]
    9074:	7c9b      	ldrb	r3, [r3, #18]
    9076:	b29b      	uxth	r3, r3
    9078:	18db      	adds	r3, r3, r3
    907a:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    907c:	4313      	orrs	r3, r2
    907e:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    9080:	683b      	ldr	r3, [r7, #0]
    9082:	7cdb      	ldrb	r3, [r3, #19]
    9084:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    9086:	4313      	orrs	r3, r2
    9088:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    908a:	693b      	ldr	r3, [r7, #16]
    908c:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    908e:	683b      	ldr	r3, [r7, #0]
    9090:	7e1b      	ldrb	r3, [r3, #24]
    9092:	2b00      	cmp	r3, #0
    9094:	d100      	bne.n	9098 <_adc_set_config+0x238>
    9096:	e0c4      	b.n	9222 <_adc_set_config+0x3c2>
		switch (resolution) {
    9098:	69bb      	ldr	r3, [r7, #24]
    909a:	2b10      	cmp	r3, #16
    909c:	d100      	bne.n	90a0 <_adc_set_config+0x240>
    909e:	e076      	b.n	918e <_adc_set_config+0x32e>
    90a0:	d802      	bhi.n	90a8 <_adc_set_config+0x248>
    90a2:	2b00      	cmp	r3, #0
    90a4:	d04d      	beq.n	9142 <_adc_set_config+0x2e2>
    90a6:	e0bc      	b.n	9222 <_adc_set_config+0x3c2>
    90a8:	2b20      	cmp	r3, #32
    90aa:	d023      	beq.n	90f4 <_adc_set_config+0x294>
    90ac:	2b30      	cmp	r3, #48	; 0x30
    90ae:	d000      	beq.n	90b2 <_adc_set_config+0x252>
    90b0:	e0b7      	b.n	9222 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    90b2:	683b      	ldr	r3, [r7, #0]
    90b4:	7cdb      	ldrb	r3, [r3, #19]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d011      	beq.n	90de <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    90ba:	683b      	ldr	r3, [r7, #0]
    90bc:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    90be:	2b7f      	cmp	r3, #127	; 0x7f
    90c0:	dc0b      	bgt.n	90da <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    90c2:	683b      	ldr	r3, [r7, #0]
    90c4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    90c6:	3380      	adds	r3, #128	; 0x80
    90c8:	db07      	blt.n	90da <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    90ca:	683b      	ldr	r3, [r7, #0]
    90cc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    90ce:	2b7f      	cmp	r3, #127	; 0x7f
    90d0:	dc03      	bgt.n	90da <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    90d2:	683b      	ldr	r3, [r7, #0]
    90d4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    90d6:	3380      	adds	r3, #128	; 0x80
    90d8:	da01      	bge.n	90de <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    90da:	2317      	movs	r3, #23
    90dc:	e143      	b.n	9366 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    90de:	683b      	ldr	r3, [r7, #0]
    90e0:	69db      	ldr	r3, [r3, #28]
    90e2:	2bff      	cmp	r3, #255	; 0xff
    90e4:	dc04      	bgt.n	90f0 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    90e6:	683b      	ldr	r3, [r7, #0]
    90e8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    90ea:	2bff      	cmp	r3, #255	; 0xff
    90ec:	dc00      	bgt.n	90f0 <_adc_set_config+0x290>
    90ee:	e091      	b.n	9214 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    90f0:	2317      	movs	r3, #23
    90f2:	e138      	b.n	9366 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    90f4:	683b      	ldr	r3, [r7, #0]
    90f6:	7cdb      	ldrb	r3, [r3, #19]
    90f8:	2b00      	cmp	r3, #0
    90fa:	d015      	beq.n	9128 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    90fc:	683b      	ldr	r3, [r7, #0]
    90fe:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    9100:	4a36      	ldr	r2, [pc, #216]	; (91dc <_adc_set_config+0x37c>)
    9102:	4293      	cmp	r3, r2
    9104:	dc0e      	bgt.n	9124 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    9106:	683b      	ldr	r3, [r7, #0]
    9108:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    910a:	4a35      	ldr	r2, [pc, #212]	; (91e0 <_adc_set_config+0x380>)
    910c:	4293      	cmp	r3, r2
    910e:	db09      	blt.n	9124 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    9110:	683b      	ldr	r3, [r7, #0]
    9112:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    9114:	4a31      	ldr	r2, [pc, #196]	; (91dc <_adc_set_config+0x37c>)
    9116:	4293      	cmp	r3, r2
    9118:	dc04      	bgt.n	9124 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    911a:	683b      	ldr	r3, [r7, #0]
    911c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    911e:	4a30      	ldr	r2, [pc, #192]	; (91e0 <_adc_set_config+0x380>)
    9120:	4293      	cmp	r3, r2
    9122:	da01      	bge.n	9128 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    9124:	2317      	movs	r3, #23
    9126:	e11e      	b.n	9366 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    9128:	683b      	ldr	r3, [r7, #0]
    912a:	69db      	ldr	r3, [r3, #28]
    912c:	4a2d      	ldr	r2, [pc, #180]	; (91e4 <_adc_set_config+0x384>)
    912e:	4293      	cmp	r3, r2
    9130:	dc05      	bgt.n	913e <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    9132:	683b      	ldr	r3, [r7, #0]
    9134:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    9136:	4a2b      	ldr	r2, [pc, #172]	; (91e4 <_adc_set_config+0x384>)
    9138:	4293      	cmp	r3, r2
    913a:	dc00      	bgt.n	913e <_adc_set_config+0x2de>
    913c:	e06c      	b.n	9218 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    913e:	2317      	movs	r3, #23
    9140:	e111      	b.n	9366 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    9142:	683b      	ldr	r3, [r7, #0]
    9144:	7cdb      	ldrb	r3, [r3, #19]
    9146:	2b00      	cmp	r3, #0
    9148:	d015      	beq.n	9176 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    914a:	683b      	ldr	r3, [r7, #0]
    914c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    914e:	4a26      	ldr	r2, [pc, #152]	; (91e8 <_adc_set_config+0x388>)
    9150:	4293      	cmp	r3, r2
    9152:	dc0e      	bgt.n	9172 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    9154:	683b      	ldr	r3, [r7, #0]
    9156:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    9158:	4a24      	ldr	r2, [pc, #144]	; (91ec <_adc_set_config+0x38c>)
    915a:	4293      	cmp	r3, r2
    915c:	db09      	blt.n	9172 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    915e:	683b      	ldr	r3, [r7, #0]
    9160:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    9162:	4a21      	ldr	r2, [pc, #132]	; (91e8 <_adc_set_config+0x388>)
    9164:	4293      	cmp	r3, r2
    9166:	dc04      	bgt.n	9172 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    9168:	683b      	ldr	r3, [r7, #0]
    916a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    916c:	4a1f      	ldr	r2, [pc, #124]	; (91ec <_adc_set_config+0x38c>)
    916e:	4293      	cmp	r3, r2
    9170:	da01      	bge.n	9176 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    9172:	2317      	movs	r3, #23
    9174:	e0f7      	b.n	9366 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    9176:	683b      	ldr	r3, [r7, #0]
    9178:	69db      	ldr	r3, [r3, #28]
    917a:	4a1d      	ldr	r2, [pc, #116]	; (91f0 <_adc_set_config+0x390>)
    917c:	4293      	cmp	r3, r2
    917e:	dc04      	bgt.n	918a <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    9180:	683b      	ldr	r3, [r7, #0]
    9182:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    9184:	4a1a      	ldr	r2, [pc, #104]	; (91f0 <_adc_set_config+0x390>)
    9186:	4293      	cmp	r3, r2
    9188:	dd48      	ble.n	921c <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    918a:	2317      	movs	r3, #23
    918c:	e0eb      	b.n	9366 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    918e:	683b      	ldr	r3, [r7, #0]
    9190:	7cdb      	ldrb	r3, [r3, #19]
    9192:	2b00      	cmp	r3, #0
    9194:	d032      	beq.n	91fc <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    9196:	683b      	ldr	r3, [r7, #0]
    9198:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    919a:	4a16      	ldr	r2, [pc, #88]	; (91f4 <_adc_set_config+0x394>)
    919c:	4293      	cmp	r3, r2
    919e:	dc0e      	bgt.n	91be <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    91a0:	683b      	ldr	r3, [r7, #0]
    91a2:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    91a4:	4a14      	ldr	r2, [pc, #80]	; (91f8 <_adc_set_config+0x398>)
    91a6:	4293      	cmp	r3, r2
    91a8:	db09      	blt.n	91be <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    91aa:	683b      	ldr	r3, [r7, #0]
    91ac:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    91ae:	4a11      	ldr	r2, [pc, #68]	; (91f4 <_adc_set_config+0x394>)
    91b0:	4293      	cmp	r3, r2
    91b2:	dc04      	bgt.n	91be <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    91b4:	683b      	ldr	r3, [r7, #0]
    91b6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    91b8:	4a0f      	ldr	r2, [pc, #60]	; (91f8 <_adc_set_config+0x398>)
    91ba:	4293      	cmp	r3, r2
    91bc:	da1e      	bge.n	91fc <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    91be:	2317      	movs	r3, #23
    91c0:	e0d1      	b.n	9366 <_adc_set_config+0x506>
    91c2:	46c0      	nop			; (mov r8, r8)
    91c4:	00008c39 	.word	0x00008c39
    91c8:	0000c659 	.word	0x0000c659
    91cc:	0000c69d 	.word	0x0000c69d
    91d0:	00008de9 	.word	0x00008de9
    91d4:	00013e14 	.word	0x00013e14
    91d8:	00008d15 	.word	0x00008d15
    91dc:	000001ff 	.word	0x000001ff
    91e0:	fffffe00 	.word	0xfffffe00
    91e4:	000003ff 	.word	0x000003ff
    91e8:	000007ff 	.word	0x000007ff
    91ec:	fffff800 	.word	0xfffff800
    91f0:	00000fff 	.word	0x00000fff
    91f4:	00007fff 	.word	0x00007fff
    91f8:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    91fc:	683b      	ldr	r3, [r7, #0]
    91fe:	69db      	ldr	r3, [r3, #28]
    9200:	4a5b      	ldr	r2, [pc, #364]	; (9370 <_adc_set_config+0x510>)
    9202:	4293      	cmp	r3, r2
    9204:	dc04      	bgt.n	9210 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    9206:	683b      	ldr	r3, [r7, #0]
    9208:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    920a:	4a59      	ldr	r2, [pc, #356]	; (9370 <_adc_set_config+0x510>)
    920c:	4293      	cmp	r3, r2
    920e:	dd07      	ble.n	9220 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    9210:	2317      	movs	r3, #23
    9212:	e0a8      	b.n	9366 <_adc_set_config+0x506>
			break;
    9214:	46c0      	nop			; (mov r8, r8)
    9216:	e004      	b.n	9222 <_adc_set_config+0x3c2>
			break;
    9218:	46c0      	nop			; (mov r8, r8)
    921a:	e002      	b.n	9222 <_adc_set_config+0x3c2>
			break;
    921c:	46c0      	nop			; (mov r8, r8)
    921e:	e000      	b.n	9222 <_adc_set_config+0x3c2>
			}
			break;
    9220:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    9222:	46c0      	nop			; (mov r8, r8)
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	0018      	movs	r0, r3
    9228:	4b52      	ldr	r3, [pc, #328]	; (9374 <_adc_set_config+0x514>)
    922a:	4798      	blx	r3
    922c:	1e03      	subs	r3, r0, #0
    922e:	d1f9      	bne.n	9224 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    9230:	683b      	ldr	r3, [r7, #0]
    9232:	7e1a      	ldrb	r2, [r3, #24]
    9234:	693b      	ldr	r3, [r7, #16]
    9236:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    9238:	46c0      	nop			; (mov r8, r8)
    923a:	687b      	ldr	r3, [r7, #4]
    923c:	0018      	movs	r0, r3
    923e:	4b4d      	ldr	r3, [pc, #308]	; (9374 <_adc_set_config+0x514>)
    9240:	4798      	blx	r3
    9242:	1e03      	subs	r3, r0, #0
    9244:	d1f9      	bne.n	923a <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    9246:	683b      	ldr	r3, [r7, #0]
    9248:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    924a:	b29a      	uxth	r2, r3
    924c:	693b      	ldr	r3, [r7, #16]
    924e:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    9250:	46c0      	nop			; (mov r8, r8)
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	0018      	movs	r0, r3
    9256:	4b47      	ldr	r3, [pc, #284]	; (9374 <_adc_set_config+0x514>)
    9258:	4798      	blx	r3
    925a:	1e03      	subs	r3, r0, #0
    925c:	d1f9      	bne.n	9252 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    925e:	683b      	ldr	r3, [r7, #0]
    9260:	6a1b      	ldr	r3, [r3, #32]
    9262:	b29a      	uxth	r2, r3
    9264:	693b      	ldr	r3, [r7, #16]
    9266:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    9268:	2314      	movs	r3, #20
    926a:	18fb      	adds	r3, r7, r3
    926c:	683a      	ldr	r2, [r7, #0]
    926e:	212c      	movs	r1, #44	; 0x2c
    9270:	5c52      	ldrb	r2, [r2, r1]
    9272:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    9274:	2314      	movs	r3, #20
    9276:	18fb      	adds	r3, r7, r3
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	2b00      	cmp	r3, #0
    927c:	d006      	beq.n	928c <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    927e:	2314      	movs	r3, #20
    9280:	18fb      	adds	r3, r7, r3
    9282:	781a      	ldrb	r2, [r3, #0]
    9284:	2314      	movs	r3, #20
    9286:	18fb      	adds	r3, r7, r3
    9288:	3a01      	subs	r2, #1
    928a:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    928c:	2314      	movs	r3, #20
    928e:	18fb      	adds	r3, r7, r3
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	2b0f      	cmp	r3, #15
    9294:	d804      	bhi.n	92a0 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    9296:	683b      	ldr	r3, [r7, #0]
    9298:	222b      	movs	r2, #43	; 0x2b
    929a:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    929c:	2b0f      	cmp	r3, #15
    929e:	d901      	bls.n	92a4 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    92a0:	2317      	movs	r3, #23
    92a2:	e060      	b.n	9366 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    92a4:	46c0      	nop			; (mov r8, r8)
    92a6:	687b      	ldr	r3, [r7, #4]
    92a8:	0018      	movs	r0, r3
    92aa:	4b32      	ldr	r3, [pc, #200]	; (9374 <_adc_set_config+0x514>)
    92ac:	4798      	blx	r3
    92ae:	1e03      	subs	r3, r0, #0
    92b0:	d1f9      	bne.n	92a6 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    92b2:	683b      	ldr	r3, [r7, #0]
    92b4:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    92b6:	683a      	ldr	r2, [r7, #0]
    92b8:	212b      	movs	r1, #43	; 0x2b
    92ba:	5c52      	ldrb	r2, [r2, r1]
    92bc:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    92be:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    92c0:	2214      	movs	r2, #20
    92c2:	18ba      	adds	r2, r7, r2
    92c4:	7812      	ldrb	r2, [r2, #0]
    92c6:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    92c8:	4313      	orrs	r3, r2
			config->negative_input |
    92ca:	683a      	ldr	r2, [r7, #0]
    92cc:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    92ce:	4313      	orrs	r3, r2
			config->positive_input;
    92d0:	683a      	ldr	r2, [r7, #0]
    92d2:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    92d4:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    92d6:	693b      	ldr	r3, [r7, #16]
    92d8:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    92da:	683b      	ldr	r3, [r7, #0]
    92dc:	222a      	movs	r2, #42	; 0x2a
    92de:	5c9a      	ldrb	r2, [r3, r2]
    92e0:	693b      	ldr	r3, [r7, #16]
    92e2:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    92e4:	693b      	ldr	r3, [r7, #16]
    92e6:	220f      	movs	r2, #15
    92e8:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    92ea:	683b      	ldr	r3, [r7, #0]
    92ec:	2224      	movs	r2, #36	; 0x24
    92ee:	5c9b      	ldrb	r3, [r3, r2]
    92f0:	2b00      	cmp	r3, #0
    92f2:	d01e      	beq.n	9332 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    92f4:	683b      	ldr	r3, [r7, #0]
    92f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    92f8:	4a1f      	ldr	r2, [pc, #124]	; (9378 <_adc_set_config+0x518>)
    92fa:	4293      	cmp	r3, r2
    92fc:	d901      	bls.n	9302 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    92fe:	2317      	movs	r3, #23
    9300:	e031      	b.n	9366 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    9302:	683b      	ldr	r3, [r7, #0]
    9304:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    9306:	693b      	ldr	r3, [r7, #16]
    9308:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    930a:	683b      	ldr	r3, [r7, #0]
    930c:	2228      	movs	r2, #40	; 0x28
    930e:	5e9b      	ldrsh	r3, [r3, r2]
    9310:	4a1a      	ldr	r2, [pc, #104]	; (937c <_adc_set_config+0x51c>)
    9312:	4293      	cmp	r3, r2
    9314:	dc05      	bgt.n	9322 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    9316:	683b      	ldr	r3, [r7, #0]
    9318:	2228      	movs	r2, #40	; 0x28
    931a:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    931c:	4a18      	ldr	r2, [pc, #96]	; (9380 <_adc_set_config+0x520>)
    931e:	4293      	cmp	r3, r2
    9320:	da01      	bge.n	9326 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    9322:	2317      	movs	r3, #23
    9324:	e01f      	b.n	9366 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    9326:	683b      	ldr	r3, [r7, #0]
    9328:	2228      	movs	r2, #40	; 0x28
    932a:	5e9b      	ldrsh	r3, [r3, r2]
    932c:	b29a      	uxth	r2, r3
    932e:	693b      	ldr	r3, [r7, #16]
    9330:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    9332:	4b14      	ldr	r3, [pc, #80]	; (9384 <_adc_set_config+0x524>)
    9334:	681b      	ldr	r3, [r3, #0]
    9336:	08db      	lsrs	r3, r3, #3
    9338:	b29b      	uxth	r3, r3
    933a:	021b      	lsls	r3, r3, #8
    933c:	b29a      	uxth	r2, r3
    933e:	23e0      	movs	r3, #224	; 0xe0
    9340:	00db      	lsls	r3, r3, #3
    9342:	4013      	ands	r3, r2
    9344:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    9346:	4b10      	ldr	r3, [pc, #64]	; (9388 <_adc_set_config+0x528>)
    9348:	685c      	ldr	r4, [r3, #4]
    934a:	681b      	ldr	r3, [r3, #0]
    934c:	0161      	lsls	r1, r4, #5
    934e:	0edd      	lsrs	r5, r3, #27
    9350:	430d      	orrs	r5, r1
    9352:	0ee6      	lsrs	r6, r4, #27
    9354:	b2ab      	uxth	r3, r5
    9356:	21ff      	movs	r1, #255	; 0xff
    9358:	400b      	ands	r3, r1
    935a:	b29b      	uxth	r3, r3
			) |
    935c:	4313      	orrs	r3, r2
    935e:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    9360:	693b      	ldr	r3, [r7, #16]
    9362:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    9364:	2300      	movs	r3, #0
}
    9366:	0018      	movs	r0, r3
    9368:	46bd      	mov	sp, r7
    936a:	b009      	add	sp, #36	; 0x24
    936c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    936e:	46c0      	nop			; (mov r8, r8)
    9370:	0000ffff 	.word	0x0000ffff
    9374:	00008d15 	.word	0x00008d15
    9378:	00000fff 	.word	0x00000fff
    937c:	000007ff 	.word	0x000007ff
    9380:	fffff800 	.word	0xfffff800
    9384:	00806024 	.word	0x00806024
    9388:	00806020 	.word	0x00806020

0000938c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    938c:	b580      	push	{r7, lr}
    938e:	b084      	sub	sp, #16
    9390:	af00      	add	r7, sp, #0
    9392:	60f8      	str	r0, [r7, #12]
    9394:	60b9      	str	r1, [r7, #8]
    9396:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    9398:	68fb      	ldr	r3, [r7, #12]
    939a:	68ba      	ldr	r2, [r7, #8]
    939c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    939e:	2380      	movs	r3, #128	; 0x80
    93a0:	025b      	lsls	r3, r3, #9
    93a2:	0019      	movs	r1, r3
    93a4:	2002      	movs	r0, #2
    93a6:	4b15      	ldr	r3, [pc, #84]	; (93fc <adc_init+0x70>)
    93a8:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    93aa:	68bb      	ldr	r3, [r7, #8]
    93ac:	781b      	ldrb	r3, [r3, #0]
    93ae:	b2db      	uxtb	r3, r3
    93b0:	001a      	movs	r2, r3
    93b2:	2301      	movs	r3, #1
    93b4:	4013      	ands	r3, r2
    93b6:	d001      	beq.n	93bc <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    93b8:	2305      	movs	r3, #5
    93ba:	e01a      	b.n	93f2 <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    93bc:	68bb      	ldr	r3, [r7, #8]
    93be:	781b      	ldrb	r3, [r3, #0]
    93c0:	b2db      	uxtb	r3, r3
    93c2:	001a      	movs	r2, r3
    93c4:	2302      	movs	r3, #2
    93c6:	4013      	ands	r3, r2
    93c8:	d001      	beq.n	93ce <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    93ca:	231c      	movs	r3, #28
    93cc:	e011      	b.n	93f2 <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    93ce:	687b      	ldr	r3, [r7, #4]
    93d0:	785a      	ldrb	r2, [r3, #1]
    93d2:	68fb      	ldr	r3, [r7, #12]
    93d4:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    93d6:	68fb      	ldr	r3, [r7, #12]
    93d8:	791b      	ldrb	r3, [r3, #4]
    93da:	2b00      	cmp	r3, #0
    93dc:	d102      	bne.n	93e4 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    93de:	2001      	movs	r0, #1
    93e0:	4b07      	ldr	r3, [pc, #28]	; (9400 <adc_init+0x74>)
    93e2:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    93e4:	687a      	ldr	r2, [r7, #4]
    93e6:	68fb      	ldr	r3, [r7, #12]
    93e8:	0011      	movs	r1, r2
    93ea:	0018      	movs	r0, r3
    93ec:	4b05      	ldr	r3, [pc, #20]	; (9404 <adc_init+0x78>)
    93ee:	4798      	blx	r3
    93f0:	0003      	movs	r3, r0
}
    93f2:	0018      	movs	r0, r3
    93f4:	46bd      	mov	sp, r7
    93f6:	b004      	add	sp, #16
    93f8:	bd80      	pop	{r7, pc}
    93fa:	46c0      	nop			; (mov r8, r8)
    93fc:	00008c51 	.word	0x00008c51
    9400:	00008cd5 	.word	0x00008cd5
    9404:	00008e61 	.word	0x00008e61

00009408 <system_gclk_chan_get_config_defaults>:
{
    9408:	b580      	push	{r7, lr}
    940a:	b082      	sub	sp, #8
    940c:	af00      	add	r7, sp, #0
    940e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    9410:	687b      	ldr	r3, [r7, #4]
    9412:	2200      	movs	r2, #0
    9414:	701a      	strb	r2, [r3, #0]
}
    9416:	46c0      	nop			; (mov r8, r8)
    9418:	46bd      	mov	sp, r7
    941a:	b002      	add	sp, #8
    941c:	bd80      	pop	{r7, pc}
	...

00009420 <system_apb_clock_set_mask>:
{
    9420:	b580      	push	{r7, lr}
    9422:	b082      	sub	sp, #8
    9424:	af00      	add	r7, sp, #0
    9426:	0002      	movs	r2, r0
    9428:	6039      	str	r1, [r7, #0]
    942a:	1dfb      	adds	r3, r7, #7
    942c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    942e:	1dfb      	adds	r3, r7, #7
    9430:	781b      	ldrb	r3, [r3, #0]
    9432:	2b01      	cmp	r3, #1
    9434:	d00a      	beq.n	944c <system_apb_clock_set_mask+0x2c>
    9436:	2b02      	cmp	r3, #2
    9438:	d00f      	beq.n	945a <system_apb_clock_set_mask+0x3a>
    943a:	2b00      	cmp	r3, #0
    943c:	d114      	bne.n	9468 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    943e:	4b0e      	ldr	r3, [pc, #56]	; (9478 <system_apb_clock_set_mask+0x58>)
    9440:	4a0d      	ldr	r2, [pc, #52]	; (9478 <system_apb_clock_set_mask+0x58>)
    9442:	6991      	ldr	r1, [r2, #24]
    9444:	683a      	ldr	r2, [r7, #0]
    9446:	430a      	orrs	r2, r1
    9448:	619a      	str	r2, [r3, #24]
			break;
    944a:	e00f      	b.n	946c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    944c:	4b0a      	ldr	r3, [pc, #40]	; (9478 <system_apb_clock_set_mask+0x58>)
    944e:	4a0a      	ldr	r2, [pc, #40]	; (9478 <system_apb_clock_set_mask+0x58>)
    9450:	69d1      	ldr	r1, [r2, #28]
    9452:	683a      	ldr	r2, [r7, #0]
    9454:	430a      	orrs	r2, r1
    9456:	61da      	str	r2, [r3, #28]
			break;
    9458:	e008      	b.n	946c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    945a:	4b07      	ldr	r3, [pc, #28]	; (9478 <system_apb_clock_set_mask+0x58>)
    945c:	4a06      	ldr	r2, [pc, #24]	; (9478 <system_apb_clock_set_mask+0x58>)
    945e:	6a11      	ldr	r1, [r2, #32]
    9460:	683a      	ldr	r2, [r7, #0]
    9462:	430a      	orrs	r2, r1
    9464:	621a      	str	r2, [r3, #32]
			break;
    9466:	e001      	b.n	946c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    9468:	2317      	movs	r3, #23
    946a:	e000      	b.n	946e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    946c:	2300      	movs	r3, #0
}
    946e:	0018      	movs	r0, r3
    9470:	46bd      	mov	sp, r7
    9472:	b002      	add	sp, #8
    9474:	bd80      	pop	{r7, pc}
    9476:	46c0      	nop			; (mov r8, r8)
    9478:	40000400 	.word	0x40000400

0000947c <system_pinmux_get_config_defaults>:
{
    947c:	b580      	push	{r7, lr}
    947e:	b082      	sub	sp, #8
    9480:	af00      	add	r7, sp, #0
    9482:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9484:	687b      	ldr	r3, [r7, #4]
    9486:	2280      	movs	r2, #128	; 0x80
    9488:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    948a:	687b      	ldr	r3, [r7, #4]
    948c:	2200      	movs	r2, #0
    948e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	2201      	movs	r2, #1
    9494:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9496:	687b      	ldr	r3, [r7, #4]
    9498:	2200      	movs	r2, #0
    949a:	70da      	strb	r2, [r3, #3]
}
    949c:	46c0      	nop			; (mov r8, r8)
    949e:	46bd      	mov	sp, r7
    94a0:	b002      	add	sp, #8
    94a2:	bd80      	pop	{r7, pc}

000094a4 <system_is_debugger_present>:
{
    94a4:	b580      	push	{r7, lr}
    94a6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    94a8:	4b05      	ldr	r3, [pc, #20]	; (94c0 <system_is_debugger_present+0x1c>)
    94aa:	789b      	ldrb	r3, [r3, #2]
    94ac:	b2db      	uxtb	r3, r3
    94ae:	001a      	movs	r2, r3
    94b0:	2302      	movs	r3, #2
    94b2:	4013      	ands	r3, r2
    94b4:	1e5a      	subs	r2, r3, #1
    94b6:	4193      	sbcs	r3, r2
    94b8:	b2db      	uxtb	r3, r3
}
    94ba:	0018      	movs	r0, r3
    94bc:	46bd      	mov	sp, r7
    94be:	bd80      	pop	{r7, pc}
    94c0:	41002000 	.word	0x41002000

000094c4 <i2c_master_is_syncing>:
{
    94c4:	b580      	push	{r7, lr}
    94c6:	b084      	sub	sp, #16
    94c8:	af00      	add	r7, sp, #0
    94ca:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    94cc:	687b      	ldr	r3, [r7, #4]
    94ce:	681b      	ldr	r3, [r3, #0]
    94d0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    94d2:	68fb      	ldr	r3, [r7, #12]
    94d4:	69db      	ldr	r3, [r3, #28]
    94d6:	2207      	movs	r2, #7
    94d8:	4013      	ands	r3, r2
    94da:	1e5a      	subs	r2, r3, #1
    94dc:	4193      	sbcs	r3, r2
    94de:	b2db      	uxtb	r3, r3
}
    94e0:	0018      	movs	r0, r3
    94e2:	46bd      	mov	sp, r7
    94e4:	b004      	add	sp, #16
    94e6:	bd80      	pop	{r7, pc}

000094e8 <_i2c_master_wait_for_sync>:
{
    94e8:	b580      	push	{r7, lr}
    94ea:	b082      	sub	sp, #8
    94ec:	af00      	add	r7, sp, #0
    94ee:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    94f0:	46c0      	nop			; (mov r8, r8)
    94f2:	687b      	ldr	r3, [r7, #4]
    94f4:	0018      	movs	r0, r3
    94f6:	4b04      	ldr	r3, [pc, #16]	; (9508 <_i2c_master_wait_for_sync+0x20>)
    94f8:	4798      	blx	r3
    94fa:	1e03      	subs	r3, r0, #0
    94fc:	d1f9      	bne.n	94f2 <_i2c_master_wait_for_sync+0xa>
}
    94fe:	46c0      	nop			; (mov r8, r8)
    9500:	46bd      	mov	sp, r7
    9502:	b002      	add	sp, #8
    9504:	bd80      	pop	{r7, pc}
    9506:	46c0      	nop			; (mov r8, r8)
    9508:	000094c5 	.word	0x000094c5

0000950c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    950c:	b5f0      	push	{r4, r5, r6, r7, lr}
    950e:	b097      	sub	sp, #92	; 0x5c
    9510:	af00      	add	r7, sp, #0
    9512:	6178      	str	r0, [r7, #20]
    9514:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    9516:	2300      	movs	r3, #0
    9518:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    951a:	2300      	movs	r3, #0
    951c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    951e:	2300      	movs	r3, #0
    9520:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    9522:	233b      	movs	r3, #59	; 0x3b
    9524:	2210      	movs	r2, #16
    9526:	4694      	mov	ip, r2
    9528:	44bc      	add	ip, r7
    952a:	4463      	add	r3, ip
    952c:	2200      	movs	r2, #0
    952e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9530:	697b      	ldr	r3, [r7, #20]
    9532:	681b      	ldr	r3, [r3, #0]
    9534:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    9536:	697b      	ldr	r3, [r7, #20]
    9538:	681b      	ldr	r3, [r3, #0]
    953a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    953c:	2323      	movs	r3, #35	; 0x23
    953e:	2210      	movs	r2, #16
    9540:	18ba      	adds	r2, r7, r2
    9542:	18d4      	adds	r4, r2, r3
    9544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9546:	0018      	movs	r0, r3
    9548:	4bc0      	ldr	r3, [pc, #768]	; (984c <_i2c_master_set_config+0x340>)
    954a:	4798      	blx	r3
    954c:	0003      	movs	r3, r0
    954e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    9550:	230c      	movs	r3, #12
    9552:	2210      	movs	r2, #16
    9554:	4694      	mov	ip, r2
    9556:	44bc      	add	ip, r7
    9558:	4463      	add	r3, ip
    955a:	0018      	movs	r0, r3
    955c:	4bbc      	ldr	r3, [pc, #752]	; (9850 <_i2c_master_set_config+0x344>)
    955e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    9560:	693b      	ldr	r3, [r7, #16]
    9562:	69db      	ldr	r3, [r3, #28]
    9564:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    9566:	693b      	ldr	r3, [r7, #16]
    9568:	6a1b      	ldr	r3, [r3, #32]
    956a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    956c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    956e:	2b00      	cmp	r3, #0
    9570:	d106      	bne.n	9580 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    9572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9574:	2100      	movs	r1, #0
    9576:	0018      	movs	r0, r3
    9578:	4bb6      	ldr	r3, [pc, #728]	; (9854 <_i2c_master_set_config+0x348>)
    957a:	4798      	blx	r3
    957c:	0003      	movs	r3, r0
    957e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    9580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9582:	b2da      	uxtb	r2, r3
    9584:	230c      	movs	r3, #12
    9586:	2110      	movs	r1, #16
    9588:	468c      	mov	ip, r1
    958a:	44bc      	add	ip, r7
    958c:	4463      	add	r3, ip
    958e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    9590:	230c      	movs	r3, #12
    9592:	2210      	movs	r2, #16
    9594:	4694      	mov	ip, r2
    9596:	44bc      	add	ip, r7
    9598:	4463      	add	r3, ip
    959a:	2202      	movs	r2, #2
    959c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    959e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    95a0:	0c1b      	lsrs	r3, r3, #16
    95a2:	b2db      	uxtb	r3, r3
    95a4:	220c      	movs	r2, #12
    95a6:	2110      	movs	r1, #16
    95a8:	468c      	mov	ip, r1
    95aa:	44bc      	add	ip, r7
    95ac:	4462      	add	r2, ip
    95ae:	0011      	movs	r1, r2
    95b0:	0018      	movs	r0, r3
    95b2:	4ba9      	ldr	r3, [pc, #676]	; (9858 <_i2c_master_set_config+0x34c>)
    95b4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    95b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95b8:	2b00      	cmp	r3, #0
    95ba:	d106      	bne.n	95ca <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    95bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95be:	2101      	movs	r1, #1
    95c0:	0018      	movs	r0, r3
    95c2:	4ba4      	ldr	r3, [pc, #656]	; (9854 <_i2c_master_set_config+0x348>)
    95c4:	4798      	blx	r3
    95c6:	0003      	movs	r3, r0
    95c8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    95ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95cc:	b2da      	uxtb	r2, r3
    95ce:	230c      	movs	r3, #12
    95d0:	2110      	movs	r1, #16
    95d2:	468c      	mov	ip, r1
    95d4:	44bc      	add	ip, r7
    95d6:	4463      	add	r3, ip
    95d8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    95da:	230c      	movs	r3, #12
    95dc:	2210      	movs	r2, #16
    95de:	4694      	mov	ip, r2
    95e0:	44bc      	add	ip, r7
    95e2:	4463      	add	r3, ip
    95e4:	2202      	movs	r2, #2
    95e6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    95e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95ea:	0c1b      	lsrs	r3, r3, #16
    95ec:	b2db      	uxtb	r3, r3
    95ee:	220c      	movs	r2, #12
    95f0:	2110      	movs	r1, #16
    95f2:	468c      	mov	ip, r1
    95f4:	44bc      	add	ip, r7
    95f6:	4462      	add	r2, ip
    95f8:	0011      	movs	r1, r2
    95fa:	0018      	movs	r0, r3
    95fc:	4b96      	ldr	r3, [pc, #600]	; (9858 <_i2c_master_set_config+0x34c>)
    95fe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    9600:	693b      	ldr	r3, [r7, #16]
    9602:	8a9a      	ldrh	r2, [r3, #20]
    9604:	697b      	ldr	r3, [r7, #20]
    9606:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    9608:	693b      	ldr	r3, [r7, #16]
    960a:	8ada      	ldrh	r2, [r3, #22]
    960c:	697b      	ldr	r3, [r7, #20]
    960e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    9610:	693b      	ldr	r3, [r7, #16]
    9612:	7e1b      	ldrb	r3, [r3, #24]
    9614:	2b00      	cmp	r3, #0
    9616:	d103      	bne.n	9620 <_i2c_master_set_config+0x114>
    9618:	4b90      	ldr	r3, [pc, #576]	; (985c <_i2c_master_set_config+0x350>)
    961a:	4798      	blx	r3
    961c:	1e03      	subs	r3, r0, #0
    961e:	d002      	beq.n	9626 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    9620:	2380      	movs	r3, #128	; 0x80
    9622:	657b      	str	r3, [r7, #84]	; 0x54
    9624:	e001      	b.n	962a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    9626:	2300      	movs	r3, #0
    9628:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    962a:	693b      	ldr	r3, [r7, #16]
    962c:	691b      	ldr	r3, [r3, #16]
    962e:	2b00      	cmp	r3, #0
    9630:	d004      	beq.n	963c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    9632:	693b      	ldr	r3, [r7, #16]
    9634:	691b      	ldr	r3, [r3, #16]
    9636:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9638:	4313      	orrs	r3, r2
    963a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    963c:	693b      	ldr	r3, [r7, #16]
    963e:	689b      	ldr	r3, [r3, #8]
    9640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9642:	4313      	orrs	r3, r2
    9644:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    9646:	693b      	ldr	r3, [r7, #16]
    9648:	2224      	movs	r2, #36	; 0x24
    964a:	5c9b      	ldrb	r3, [r3, r2]
    964c:	2b00      	cmp	r3, #0
    964e:	d004      	beq.n	965a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    9650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9652:	2280      	movs	r2, #128	; 0x80
    9654:	05d2      	lsls	r2, r2, #23
    9656:	4313      	orrs	r3, r2
    9658:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    965a:	693b      	ldr	r3, [r7, #16]
    965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    965e:	2b00      	cmp	r3, #0
    9660:	d004      	beq.n	966c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    9662:	693b      	ldr	r3, [r7, #16]
    9664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9668:	4313      	orrs	r3, r2
    966a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    966c:	693b      	ldr	r3, [r7, #16]
    966e:	222c      	movs	r2, #44	; 0x2c
    9670:	5c9b      	ldrb	r3, [r3, r2]
    9672:	2b00      	cmp	r3, #0
    9674:	d105      	bne.n	9682 <_i2c_master_set_config+0x176>
    9676:	693b      	ldr	r3, [r7, #16]
    9678:	689a      	ldr	r2, [r3, #8]
    967a:	2380      	movs	r3, #128	; 0x80
    967c:	049b      	lsls	r3, r3, #18
    967e:	429a      	cmp	r2, r3
    9680:	d104      	bne.n	968c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    9682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9684:	2280      	movs	r2, #128	; 0x80
    9686:	0512      	lsls	r2, r2, #20
    9688:	4313      	orrs	r3, r2
    968a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    968c:	693b      	ldr	r3, [r7, #16]
    968e:	222d      	movs	r2, #45	; 0x2d
    9690:	5c9b      	ldrb	r3, [r3, r2]
    9692:	2b00      	cmp	r3, #0
    9694:	d004      	beq.n	96a0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    9696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9698:	2280      	movs	r2, #128	; 0x80
    969a:	0412      	lsls	r2, r2, #16
    969c:	4313      	orrs	r3, r2
    969e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    96a0:	693b      	ldr	r3, [r7, #16]
    96a2:	222e      	movs	r2, #46	; 0x2e
    96a4:	5c9b      	ldrb	r3, [r3, r2]
    96a6:	2b00      	cmp	r3, #0
    96a8:	d004      	beq.n	96b4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    96aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96ac:	2280      	movs	r2, #128	; 0x80
    96ae:	03d2      	lsls	r2, r2, #15
    96b0:	4313      	orrs	r3, r2
    96b2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    96b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96b6:	681a      	ldr	r2, [r3, #0]
    96b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96ba:	431a      	orrs	r2, r3
    96bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96be:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    96c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96c2:	2280      	movs	r2, #128	; 0x80
    96c4:	0052      	lsls	r2, r2, #1
    96c6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    96c8:	2323      	movs	r3, #35	; 0x23
    96ca:	2210      	movs	r2, #16
    96cc:	4694      	mov	ip, r2
    96ce:	44bc      	add	ip, r7
    96d0:	4463      	add	r3, ip
    96d2:	781b      	ldrb	r3, [r3, #0]
    96d4:	3314      	adds	r3, #20
    96d6:	b2db      	uxtb	r3, r3
    96d8:	0018      	movs	r0, r3
    96da:	4b61      	ldr	r3, [pc, #388]	; (9860 <_i2c_master_set_config+0x354>)
    96dc:	4798      	blx	r3
    96de:	0003      	movs	r3, r0
    96e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    96e2:	693b      	ldr	r3, [r7, #16]
    96e4:	681b      	ldr	r3, [r3, #0]
    96e6:	22fa      	movs	r2, #250	; 0xfa
    96e8:	0092      	lsls	r2, r2, #2
    96ea:	4353      	muls	r3, r2
    96ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    96ee:	693b      	ldr	r3, [r7, #16]
    96f0:	685b      	ldr	r3, [r3, #4]
    96f2:	22fa      	movs	r2, #250	; 0xfa
    96f4:	0092      	lsls	r2, r2, #2
    96f6:	4353      	muls	r3, r2
    96f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    96fa:	693b      	ldr	r3, [r7, #16]
    96fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    96fe:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    9700:	4b58      	ldr	r3, [pc, #352]	; (9864 <_i2c_master_set_config+0x358>)
    9702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9704:	4798      	blx	r3
    9706:	0005      	movs	r5, r0
    9708:	000e      	movs	r6, r1
    970a:	4b56      	ldr	r3, [pc, #344]	; (9864 <_i2c_master_set_config+0x358>)
    970c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    970e:	4798      	blx	r3
    9710:	60b8      	str	r0, [r7, #8]
    9712:	60f9      	str	r1, [r7, #12]
    9714:	4b53      	ldr	r3, [pc, #332]	; (9864 <_i2c_master_set_config+0x358>)
    9716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9718:	4798      	blx	r3
    971a:	4c53      	ldr	r4, [pc, #332]	; (9868 <_i2c_master_set_config+0x35c>)
    971c:	4a53      	ldr	r2, [pc, #332]	; (986c <_i2c_master_set_config+0x360>)
    971e:	4b54      	ldr	r3, [pc, #336]	; (9870 <_i2c_master_set_config+0x364>)
    9720:	47a0      	blx	r4
    9722:	0003      	movs	r3, r0
    9724:	000c      	movs	r4, r1
    9726:	603b      	str	r3, [r7, #0]
    9728:	607c      	str	r4, [r7, #4]
    972a:	4b4e      	ldr	r3, [pc, #312]	; (9864 <_i2c_master_set_config+0x358>)
    972c:	6a38      	ldr	r0, [r7, #32]
    972e:	4798      	blx	r3
    9730:	0002      	movs	r2, r0
    9732:	000b      	movs	r3, r1
    9734:	4c4c      	ldr	r4, [pc, #304]	; (9868 <_i2c_master_set_config+0x35c>)
    9736:	6838      	ldr	r0, [r7, #0]
    9738:	6879      	ldr	r1, [r7, #4]
    973a:	47a0      	blx	r4
    973c:	0003      	movs	r3, r0
    973e:	000c      	movs	r4, r1
    9740:	0018      	movs	r0, r3
    9742:	0021      	movs	r1, r4
    9744:	4c4b      	ldr	r4, [pc, #300]	; (9874 <_i2c_master_set_config+0x368>)
    9746:	2200      	movs	r2, #0
    9748:	4b4b      	ldr	r3, [pc, #300]	; (9878 <_i2c_master_set_config+0x36c>)
    974a:	47a0      	blx	r4
    974c:	0003      	movs	r3, r0
    974e:	000c      	movs	r4, r1
    9750:	001a      	movs	r2, r3
    9752:	0023      	movs	r3, r4
    9754:	4c44      	ldr	r4, [pc, #272]	; (9868 <_i2c_master_set_config+0x35c>)
    9756:	68b8      	ldr	r0, [r7, #8]
    9758:	68f9      	ldr	r1, [r7, #12]
    975a:	47a0      	blx	r4
    975c:	0003      	movs	r3, r0
    975e:	000c      	movs	r4, r1
    9760:	001a      	movs	r2, r3
    9762:	0023      	movs	r3, r4
    9764:	4c45      	ldr	r4, [pc, #276]	; (987c <_i2c_master_set_config+0x370>)
    9766:	0028      	movs	r0, r5
    9768:	0031      	movs	r1, r6
    976a:	47a0      	blx	r4
    976c:	0003      	movs	r3, r0
    976e:	000c      	movs	r4, r1
    9770:	001d      	movs	r5, r3
    9772:	0026      	movs	r6, r4
    9774:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9776:	005a      	lsls	r2, r3, #1
    9778:	4b3a      	ldr	r3, [pc, #232]	; (9864 <_i2c_master_set_config+0x358>)
    977a:	0010      	movs	r0, r2
    977c:	4798      	blx	r3
    977e:	0002      	movs	r2, r0
    9780:	000b      	movs	r3, r1
    9782:	4c3c      	ldr	r4, [pc, #240]	; (9874 <_i2c_master_set_config+0x368>)
    9784:	0028      	movs	r0, r5
    9786:	0031      	movs	r1, r6
    9788:	47a0      	blx	r4
    978a:	0003      	movs	r3, r0
    978c:	000c      	movs	r4, r1
    978e:	0018      	movs	r0, r3
    9790:	0021      	movs	r1, r4
    9792:	4c3a      	ldr	r4, [pc, #232]	; (987c <_i2c_master_set_config+0x370>)
    9794:	2200      	movs	r2, #0
    9796:	4b3a      	ldr	r3, [pc, #232]	; (9880 <_i2c_master_set_config+0x374>)
    9798:	47a0      	blx	r4
    979a:	0003      	movs	r3, r0
    979c:	000c      	movs	r4, r1
    979e:	001d      	movs	r5, r3
    97a0:	0026      	movs	r6, r4
    97a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97a4:	005a      	lsls	r2, r3, #1
    97a6:	4b2f      	ldr	r3, [pc, #188]	; (9864 <_i2c_master_set_config+0x358>)
    97a8:	0010      	movs	r0, r2
    97aa:	4798      	blx	r3
    97ac:	0002      	movs	r2, r0
    97ae:	000b      	movs	r3, r1
    97b0:	4c34      	ldr	r4, [pc, #208]	; (9884 <_i2c_master_set_config+0x378>)
    97b2:	0028      	movs	r0, r5
    97b4:	0031      	movs	r1, r6
    97b6:	47a0      	blx	r4
    97b8:	0003      	movs	r3, r0
    97ba:	000c      	movs	r4, r1
    97bc:	0019      	movs	r1, r3
    97be:	0022      	movs	r2, r4
    97c0:	4b31      	ldr	r3, [pc, #196]	; (9888 <_i2c_master_set_config+0x37c>)
    97c2:	0008      	movs	r0, r1
    97c4:	0011      	movs	r1, r2
    97c6:	4798      	blx	r3
    97c8:	0003      	movs	r3, r0
    97ca:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    97cc:	693b      	ldr	r3, [r7, #16]
    97ce:	689a      	ldr	r2, [r3, #8]
    97d0:	2380      	movs	r3, #128	; 0x80
    97d2:	049b      	lsls	r3, r3, #18
    97d4:	429a      	cmp	r2, r3
    97d6:	d16a      	bne.n	98ae <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    97d8:	4b22      	ldr	r3, [pc, #136]	; (9864 <_i2c_master_set_config+0x358>)
    97da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    97dc:	4798      	blx	r3
    97de:	4c25      	ldr	r4, [pc, #148]	; (9874 <_i2c_master_set_config+0x368>)
    97e0:	0002      	movs	r2, r0
    97e2:	000b      	movs	r3, r1
    97e4:	47a0      	blx	r4
    97e6:	0003      	movs	r3, r0
    97e8:	000c      	movs	r4, r1
    97ea:	001d      	movs	r5, r3
    97ec:	0026      	movs	r6, r4
    97ee:	4b1d      	ldr	r3, [pc, #116]	; (9864 <_i2c_master_set_config+0x358>)
    97f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    97f2:	4798      	blx	r3
    97f4:	4c1c      	ldr	r4, [pc, #112]	; (9868 <_i2c_master_set_config+0x35c>)
    97f6:	2200      	movs	r2, #0
    97f8:	4b24      	ldr	r3, [pc, #144]	; (988c <_i2c_master_set_config+0x380>)
    97fa:	47a0      	blx	r4
    97fc:	0003      	movs	r3, r0
    97fe:	000c      	movs	r4, r1
    9800:	001a      	movs	r2, r3
    9802:	0023      	movs	r3, r4
    9804:	4c1f      	ldr	r4, [pc, #124]	; (9884 <_i2c_master_set_config+0x378>)
    9806:	0028      	movs	r0, r5
    9808:	0031      	movs	r1, r6
    980a:	47a0      	blx	r4
    980c:	0003      	movs	r3, r0
    980e:	000c      	movs	r4, r1
    9810:	0018      	movs	r0, r3
    9812:	0021      	movs	r1, r4
    9814:	4c19      	ldr	r4, [pc, #100]	; (987c <_i2c_master_set_config+0x370>)
    9816:	2200      	movs	r2, #0
    9818:	4b19      	ldr	r3, [pc, #100]	; (9880 <_i2c_master_set_config+0x374>)
    981a:	47a0      	blx	r4
    981c:	0003      	movs	r3, r0
    981e:	000c      	movs	r4, r1
    9820:	0019      	movs	r1, r3
    9822:	0022      	movs	r2, r4
    9824:	4b18      	ldr	r3, [pc, #96]	; (9888 <_i2c_master_set_config+0x37c>)
    9826:	0008      	movs	r0, r1
    9828:	0011      	movs	r1, r2
    982a:	4798      	blx	r3
    982c:	0003      	movs	r3, r0
    982e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    9830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9832:	2b00      	cmp	r3, #0
    9834:	d02e      	beq.n	9894 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    9836:	4b16      	ldr	r3, [pc, #88]	; (9890 <_i2c_master_set_config+0x384>)
    9838:	6a79      	ldr	r1, [r7, #36]	; 0x24
    983a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    983c:	4798      	blx	r3
    983e:	0003      	movs	r3, r0
    9840:	1e9a      	subs	r2, r3, #2
    9842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9844:	1ad3      	subs	r3, r2, r3
    9846:	653b      	str	r3, [r7, #80]	; 0x50
    9848:	e031      	b.n	98ae <_i2c_master_set_config+0x3a2>
    984a:	46c0      	nop			; (mov r8, r8)
    984c:	0000aa2d 	.word	0x0000aa2d
    9850:	0000947d 	.word	0x0000947d
    9854:	0000a871 	.word	0x0000a871
    9858:	0000c945 	.word	0x0000c945
    985c:	000094a5 	.word	0x000094a5
    9860:	0000c77d 	.word	0x0000c77d
    9864:	000126a9 	.word	0x000126a9
    9868:	00011a51 	.word	0x00011a51
    986c:	e826d695 	.word	0xe826d695
    9870:	3e112e0b 	.word	0x3e112e0b
    9874:	00010bc9 	.word	0x00010bc9
    9878:	40240000 	.word	0x40240000
    987c:	00011f51 	.word	0x00011f51
    9880:	3ff00000 	.word	0x3ff00000
    9884:	000111e9 	.word	0x000111e9
    9888:	000125bd 	.word	0x000125bd
    988c:	40080000 	.word	0x40080000
    9890:	0001080d 	.word	0x0001080d
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    9894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9896:	005a      	lsls	r2, r3, #1
    9898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    989a:	18d3      	adds	r3, r2, r3
    989c:	1e5a      	subs	r2, r3, #1
    989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    98a0:	0059      	lsls	r1, r3, #1
    98a2:	4b1d      	ldr	r3, [pc, #116]	; (9918 <_i2c_master_set_config+0x40c>)
    98a4:	0010      	movs	r0, r2
    98a6:	4798      	blx	r3
    98a8:	0003      	movs	r3, r0
    98aa:	3b01      	subs	r3, #1
    98ac:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    98ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    98b0:	2bff      	cmp	r3, #255	; 0xff
    98b2:	dc08      	bgt.n	98c6 <_i2c_master_set_config+0x3ba>
    98b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    98b6:	2b00      	cmp	r3, #0
    98b8:	db05      	blt.n	98c6 <_i2c_master_set_config+0x3ba>
    98ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98bc:	2bff      	cmp	r3, #255	; 0xff
    98be:	dc02      	bgt.n	98c6 <_i2c_master_set_config+0x3ba>
    98c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98c2:	2b00      	cmp	r3, #0
    98c4:	da06      	bge.n	98d4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    98c6:	233b      	movs	r3, #59	; 0x3b
    98c8:	2210      	movs	r2, #16
    98ca:	4694      	mov	ip, r2
    98cc:	44bc      	add	ip, r7
    98ce:	4463      	add	r3, ip
    98d0:	2240      	movs	r2, #64	; 0x40
    98d2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    98d4:	233b      	movs	r3, #59	; 0x3b
    98d6:	2210      	movs	r2, #16
    98d8:	4694      	mov	ip, r2
    98da:	44bc      	add	ip, r7
    98dc:	4463      	add	r3, ip
    98de:	781b      	ldrb	r3, [r3, #0]
    98e0:	2b40      	cmp	r3, #64	; 0x40
    98e2:	d00e      	beq.n	9902 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    98e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    98e6:	22ff      	movs	r2, #255	; 0xff
    98e8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    98ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98ec:	041b      	lsls	r3, r3, #16
    98ee:	0019      	movs	r1, r3
    98f0:	23ff      	movs	r3, #255	; 0xff
    98f2:	041b      	lsls	r3, r3, #16
    98f4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    98f6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    98f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    98fa:	0612      	lsls	r2, r2, #24
    98fc:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    98fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9900:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    9902:	233b      	movs	r3, #59	; 0x3b
    9904:	2210      	movs	r2, #16
    9906:	4694      	mov	ip, r2
    9908:	44bc      	add	ip, r7
    990a:	4463      	add	r3, ip
    990c:	781b      	ldrb	r3, [r3, #0]
}
    990e:	0018      	movs	r0, r3
    9910:	46bd      	mov	sp, r7
    9912:	b017      	add	sp, #92	; 0x5c
    9914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9916:	46c0      	nop			; (mov r8, r8)
    9918:	0001080d 	.word	0x0001080d

0000991c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    991c:	b590      	push	{r4, r7, lr}
    991e:	b08b      	sub	sp, #44	; 0x2c
    9920:	af00      	add	r7, sp, #0
    9922:	60f8      	str	r0, [r7, #12]
    9924:	60b9      	str	r1, [r7, #8]
    9926:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    9928:	68fb      	ldr	r3, [r7, #12]
    992a:	68ba      	ldr	r2, [r7, #8]
    992c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    992e:	68fb      	ldr	r3, [r7, #12]
    9930:	681b      	ldr	r3, [r3, #0]
    9932:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9934:	68fb      	ldr	r3, [r7, #12]
    9936:	681b      	ldr	r3, [r3, #0]
    9938:	0018      	movs	r0, r3
    993a:	4b3b      	ldr	r3, [pc, #236]	; (9a28 <i2c_master_init+0x10c>)
    993c:	4798      	blx	r3
    993e:	0003      	movs	r3, r0
    9940:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    9942:	6a3b      	ldr	r3, [r7, #32]
    9944:	3302      	adds	r3, #2
    9946:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9948:	6a3b      	ldr	r3, [r7, #32]
    994a:	3314      	adds	r3, #20
    994c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    994e:	2201      	movs	r2, #1
    9950:	69fb      	ldr	r3, [r7, #28]
    9952:	409a      	lsls	r2, r3
    9954:	0013      	movs	r3, r2
    9956:	0019      	movs	r1, r3
    9958:	2002      	movs	r0, #2
    995a:	4b34      	ldr	r3, [pc, #208]	; (9a2c <i2c_master_init+0x110>)
    995c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    995e:	2314      	movs	r3, #20
    9960:	18fb      	adds	r3, r7, r3
    9962:	0018      	movs	r0, r3
    9964:	4b32      	ldr	r3, [pc, #200]	; (9a30 <i2c_master_init+0x114>)
    9966:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    9968:	687b      	ldr	r3, [r7, #4]
    996a:	7b1a      	ldrb	r2, [r3, #12]
    996c:	2314      	movs	r3, #20
    996e:	18fb      	adds	r3, r7, r3
    9970:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    9972:	69bb      	ldr	r3, [r7, #24]
    9974:	b2db      	uxtb	r3, r3
    9976:	2214      	movs	r2, #20
    9978:	18ba      	adds	r2, r7, r2
    997a:	0011      	movs	r1, r2
    997c:	0018      	movs	r0, r3
    997e:	4b2d      	ldr	r3, [pc, #180]	; (9a34 <i2c_master_init+0x118>)
    9980:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9982:	69bb      	ldr	r3, [r7, #24]
    9984:	b2db      	uxtb	r3, r3
    9986:	0018      	movs	r0, r3
    9988:	4b2b      	ldr	r3, [pc, #172]	; (9a38 <i2c_master_init+0x11c>)
    998a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	7b1b      	ldrb	r3, [r3, #12]
    9990:	2100      	movs	r1, #0
    9992:	0018      	movs	r0, r3
    9994:	4b29      	ldr	r3, [pc, #164]	; (9a3c <i2c_master_init+0x120>)
    9996:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    9998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    999a:	681b      	ldr	r3, [r3, #0]
    999c:	2202      	movs	r2, #2
    999e:	4013      	ands	r3, r2
    99a0:	d001      	beq.n	99a6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    99a2:	231c      	movs	r3, #28
    99a4:	e03b      	b.n	9a1e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    99a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    99a8:	681b      	ldr	r3, [r3, #0]
    99aa:	2201      	movs	r2, #1
    99ac:	4013      	ands	r3, r2
    99ae:	d001      	beq.n	99b4 <i2c_master_init+0x98>
		return STATUS_BUSY;
    99b0:	2305      	movs	r3, #5
    99b2:	e034      	b.n	9a1e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    99b4:	68fb      	ldr	r3, [r7, #12]
    99b6:	681b      	ldr	r3, [r3, #0]
    99b8:	2217      	movs	r2, #23
    99ba:	18bc      	adds	r4, r7, r2
    99bc:	0018      	movs	r0, r3
    99be:	4b1a      	ldr	r3, [pc, #104]	; (9a28 <i2c_master_init+0x10c>)
    99c0:	4798      	blx	r3
    99c2:	0003      	movs	r3, r0
    99c4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    99c6:	4a1e      	ldr	r2, [pc, #120]	; (9a40 <i2c_master_init+0x124>)
    99c8:	2317      	movs	r3, #23
    99ca:	18fb      	adds	r3, r7, r3
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	0011      	movs	r1, r2
    99d0:	0018      	movs	r0, r3
    99d2:	4b1c      	ldr	r3, [pc, #112]	; (9a44 <i2c_master_init+0x128>)
    99d4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    99d6:	2317      	movs	r3, #23
    99d8:	18fb      	adds	r3, r7, r3
    99da:	781a      	ldrb	r2, [r3, #0]
    99dc:	4b1a      	ldr	r3, [pc, #104]	; (9a48 <i2c_master_init+0x12c>)
    99de:	0092      	lsls	r2, r2, #2
    99e0:	68f9      	ldr	r1, [r7, #12]
    99e2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    99e4:	68fb      	ldr	r3, [r7, #12]
    99e6:	2200      	movs	r2, #0
    99e8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    99ea:	68fb      	ldr	r3, [r7, #12]
    99ec:	2200      	movs	r2, #0
    99ee:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    99f0:	68fb      	ldr	r3, [r7, #12]
    99f2:	2200      	movs	r2, #0
    99f4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    99f6:	68fb      	ldr	r3, [r7, #12]
    99f8:	2200      	movs	r2, #0
    99fa:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    99fc:	68fb      	ldr	r3, [r7, #12]
    99fe:	2225      	movs	r2, #37	; 0x25
    9a00:	2100      	movs	r1, #0
    9a02:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    9a04:	68fb      	ldr	r3, [r7, #12]
    9a06:	2200      	movs	r2, #0
    9a08:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    9a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9a0c:	2214      	movs	r2, #20
    9a0e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    9a10:	687a      	ldr	r2, [r7, #4]
    9a12:	68fb      	ldr	r3, [r7, #12]
    9a14:	0011      	movs	r1, r2
    9a16:	0018      	movs	r0, r3
    9a18:	4b0c      	ldr	r3, [pc, #48]	; (9a4c <i2c_master_init+0x130>)
    9a1a:	4798      	blx	r3
    9a1c:	0003      	movs	r3, r0
}
    9a1e:	0018      	movs	r0, r3
    9a20:	46bd      	mov	sp, r7
    9a22:	b00b      	add	sp, #44	; 0x2c
    9a24:	bd90      	pop	{r4, r7, pc}
    9a26:	46c0      	nop			; (mov r8, r8)
    9a28:	0000aa2d 	.word	0x0000aa2d
    9a2c:	00009421 	.word	0x00009421
    9a30:	00009409 	.word	0x00009409
    9a34:	0000c659 	.word	0x0000c659
    9a38:	0000c69d 	.word	0x0000c69d
    9a3c:	0000a7e5 	.word	0x0000a7e5
    9a40:	0000a23d 	.word	0x0000a23d
    9a44:	0000b675 	.word	0x0000b675
    9a48:	20000aac 	.word	0x20000aac
    9a4c:	0000950d 	.word	0x0000950d

00009a50 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    9a50:	b580      	push	{r7, lr}
    9a52:	b084      	sub	sp, #16
    9a54:	af00      	add	r7, sp, #0
    9a56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9a58:	687b      	ldr	r3, [r7, #4]
    9a5a:	681b      	ldr	r3, [r3, #0]
    9a5c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    9a5e:	68fb      	ldr	r3, [r7, #12]
    9a60:	7e1b      	ldrb	r3, [r3, #24]
    9a62:	b2db      	uxtb	r3, r3
    9a64:	001a      	movs	r2, r3
    9a66:	2302      	movs	r3, #2
    9a68:	4013      	ands	r3, r2
    9a6a:	d00b      	beq.n	9a84 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    9a6c:	68fb      	ldr	r3, [r7, #12]
    9a6e:	2202      	movs	r2, #2
    9a70:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    9a72:	68fb      	ldr	r3, [r7, #12]
    9a74:	8b5b      	ldrh	r3, [r3, #26]
    9a76:	b29b      	uxth	r3, r3
    9a78:	001a      	movs	r2, r3
    9a7a:	2302      	movs	r3, #2
    9a7c:	4013      	ands	r3, r2
    9a7e:	d011      	beq.n	9aa4 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    9a80:	2341      	movs	r3, #65	; 0x41
    9a82:	e010      	b.n	9aa6 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    9a84:	68fb      	ldr	r3, [r7, #12]
    9a86:	8b5b      	ldrh	r3, [r3, #26]
    9a88:	b29b      	uxth	r3, r3
    9a8a:	001a      	movs	r2, r3
    9a8c:	2304      	movs	r3, #4
    9a8e:	4013      	ands	r3, r2
    9a90:	d008      	beq.n	9aa4 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9a92:	68fb      	ldr	r3, [r7, #12]
    9a94:	685b      	ldr	r3, [r3, #4]
    9a96:	22c0      	movs	r2, #192	; 0xc0
    9a98:	0292      	lsls	r2, r2, #10
    9a9a:	431a      	orrs	r2, r3
    9a9c:	68fb      	ldr	r3, [r7, #12]
    9a9e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    9aa0:	2318      	movs	r3, #24
    9aa2:	e000      	b.n	9aa6 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    9aa4:	2300      	movs	r3, #0
}
    9aa6:	0018      	movs	r0, r3
    9aa8:	46bd      	mov	sp, r7
    9aaa:	b004      	add	sp, #16
    9aac:	bd80      	pop	{r7, pc}

00009aae <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    9aae:	b580      	push	{r7, lr}
    9ab0:	b084      	sub	sp, #16
    9ab2:	af00      	add	r7, sp, #0
    9ab4:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9ab6:	687b      	ldr	r3, [r7, #4]
    9ab8:	681b      	ldr	r3, [r3, #0]
    9aba:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    9abc:	230e      	movs	r3, #14
    9abe:	18fb      	adds	r3, r7, r3
    9ac0:	2200      	movs	r2, #0
    9ac2:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    9ac4:	e00f      	b.n	9ae6 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    9ac6:	230e      	movs	r3, #14
    9ac8:	18fb      	adds	r3, r7, r3
    9aca:	220e      	movs	r2, #14
    9acc:	18ba      	adds	r2, r7, r2
    9ace:	8812      	ldrh	r2, [r2, #0]
    9ad0:	3201      	adds	r2, #1
    9ad2:	801a      	strh	r2, [r3, #0]
    9ad4:	687b      	ldr	r3, [r7, #4]
    9ad6:	891b      	ldrh	r3, [r3, #8]
    9ad8:	220e      	movs	r2, #14
    9ada:	18ba      	adds	r2, r7, r2
    9adc:	8812      	ldrh	r2, [r2, #0]
    9ade:	429a      	cmp	r2, r3
    9ae0:	d301      	bcc.n	9ae6 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    9ae2:	2312      	movs	r3, #18
    9ae4:	e00e      	b.n	9b04 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    9ae6:	68bb      	ldr	r3, [r7, #8]
    9ae8:	7e1b      	ldrb	r3, [r3, #24]
    9aea:	b2db      	uxtb	r3, r3
    9aec:	001a      	movs	r2, r3
    9aee:	2301      	movs	r3, #1
    9af0:	4013      	ands	r3, r2
    9af2:	d106      	bne.n	9b02 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    9af4:	68bb      	ldr	r3, [r7, #8]
    9af6:	7e1b      	ldrb	r3, [r3, #24]
    9af8:	b2db      	uxtb	r3, r3
    9afa:	001a      	movs	r2, r3
    9afc:	2302      	movs	r3, #2
    9afe:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    9b00:	d0e1      	beq.n	9ac6 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    9b02:	2300      	movs	r3, #0
}
    9b04:	0018      	movs	r0, r3
    9b06:	46bd      	mov	sp, r7
    9b08:	b004      	add	sp, #16
    9b0a:	bd80      	pop	{r7, pc}

00009b0c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    9b0c:	b590      	push	{r4, r7, lr}
    9b0e:	b085      	sub	sp, #20
    9b10:	af00      	add	r7, sp, #0
    9b12:	6078      	str	r0, [r7, #4]
    9b14:	000a      	movs	r2, r1
    9b16:	1cfb      	adds	r3, r7, #3
    9b18:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9b1a:	687b      	ldr	r3, [r7, #4]
    9b1c:	681b      	ldr	r3, [r3, #0]
    9b1e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9b20:	68fb      	ldr	r3, [r7, #12]
    9b22:	685b      	ldr	r3, [r3, #4]
    9b24:	2280      	movs	r2, #128	; 0x80
    9b26:	02d2      	lsls	r2, r2, #11
    9b28:	431a      	orrs	r2, r3
    9b2a:	68fb      	ldr	r3, [r7, #12]
    9b2c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    9b2e:	1cfb      	adds	r3, r7, #3
    9b30:	781a      	ldrb	r2, [r3, #0]
    9b32:	68fb      	ldr	r3, [r7, #12]
    9b34:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    9b36:	230b      	movs	r3, #11
    9b38:	18fc      	adds	r4, r7, r3
    9b3a:	687b      	ldr	r3, [r7, #4]
    9b3c:	0018      	movs	r0, r3
    9b3e:	4b07      	ldr	r3, [pc, #28]	; (9b5c <_i2c_master_send_hs_master_code+0x50>)
    9b40:	4798      	blx	r3
    9b42:	0003      	movs	r3, r0
    9b44:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    9b46:	68fb      	ldr	r3, [r7, #12]
    9b48:	2201      	movs	r2, #1
    9b4a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    9b4c:	230b      	movs	r3, #11
    9b4e:	18fb      	adds	r3, r7, r3
    9b50:	781b      	ldrb	r3, [r3, #0]
}
    9b52:	0018      	movs	r0, r3
    9b54:	46bd      	mov	sp, r7
    9b56:	b005      	add	sp, #20
    9b58:	bd90      	pop	{r4, r7, pc}
    9b5a:	46c0      	nop			; (mov r8, r8)
    9b5c:	00009aaf 	.word	0x00009aaf

00009b60 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9b60:	b590      	push	{r4, r7, lr}
    9b62:	b087      	sub	sp, #28
    9b64:	af00      	add	r7, sp, #0
    9b66:	6078      	str	r0, [r7, #4]
    9b68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9b6a:	687b      	ldr	r3, [r7, #4]
    9b6c:	681b      	ldr	r3, [r3, #0]
    9b6e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    9b70:	2314      	movs	r3, #20
    9b72:	18fb      	adds	r3, r7, r3
    9b74:	683a      	ldr	r2, [r7, #0]
    9b76:	8852      	ldrh	r2, [r2, #2]
    9b78:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    9b7a:	2312      	movs	r3, #18
    9b7c:	18fb      	adds	r3, r7, r3
    9b7e:	2200      	movs	r2, #0
    9b80:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    9b82:	68fb      	ldr	r3, [r7, #12]
    9b84:	681b      	ldr	r3, [r3, #0]
    9b86:	011b      	lsls	r3, r3, #4
    9b88:	0fdb      	lsrs	r3, r3, #31
    9b8a:	b2db      	uxtb	r3, r3
    9b8c:	001a      	movs	r2, r3
    9b8e:	230b      	movs	r3, #11
    9b90:	18fb      	adds	r3, r7, r3
    9b92:	1e51      	subs	r1, r2, #1
    9b94:	418a      	sbcs	r2, r1
    9b96:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    9b98:	683b      	ldr	r3, [r7, #0]
    9b9a:	7a5b      	ldrb	r3, [r3, #9]
    9b9c:	2b00      	cmp	r3, #0
    9b9e:	d006      	beq.n	9bae <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    9ba0:	683b      	ldr	r3, [r7, #0]
    9ba2:	7a9a      	ldrb	r2, [r3, #10]
    9ba4:	687b      	ldr	r3, [r7, #4]
    9ba6:	0011      	movs	r1, r2
    9ba8:	0018      	movs	r0, r3
    9baa:	4b85      	ldr	r3, [pc, #532]	; (9dc0 <_i2c_master_read_packet+0x260>)
    9bac:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9bae:	68fb      	ldr	r3, [r7, #12]
    9bb0:	685b      	ldr	r3, [r3, #4]
    9bb2:	4a84      	ldr	r2, [pc, #528]	; (9dc4 <_i2c_master_read_packet+0x264>)
    9bb4:	401a      	ands	r2, r3
    9bb6:	68fb      	ldr	r3, [r7, #12]
    9bb8:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    9bba:	683b      	ldr	r3, [r7, #0]
    9bbc:	7a1b      	ldrb	r3, [r3, #8]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	d042      	beq.n	9c48 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    9bc2:	683b      	ldr	r3, [r7, #0]
    9bc4:	881b      	ldrh	r3, [r3, #0]
    9bc6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9bc8:	683b      	ldr	r3, [r7, #0]
    9bca:	7a5b      	ldrb	r3, [r3, #9]
    9bcc:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    9bce:	4313      	orrs	r3, r2
    9bd0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9bd2:	2380      	movs	r3, #128	; 0x80
    9bd4:	021b      	lsls	r3, r3, #8
    9bd6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    9bd8:	68fb      	ldr	r3, [r7, #12]
    9bda:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    9bdc:	2317      	movs	r3, #23
    9bde:	18fc      	adds	r4, r7, r3
    9be0:	687b      	ldr	r3, [r7, #4]
    9be2:	0018      	movs	r0, r3
    9be4:	4b78      	ldr	r3, [pc, #480]	; (9dc8 <_i2c_master_read_packet+0x268>)
    9be6:	4798      	blx	r3
    9be8:	0003      	movs	r3, r0
    9bea:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9bec:	68fb      	ldr	r3, [r7, #12]
    9bee:	685b      	ldr	r3, [r3, #4]
    9bf0:	4a74      	ldr	r2, [pc, #464]	; (9dc4 <_i2c_master_read_packet+0x264>)
    9bf2:	401a      	ands	r2, r3
    9bf4:	68fb      	ldr	r3, [r7, #12]
    9bf6:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    9bf8:	2317      	movs	r3, #23
    9bfa:	18fb      	adds	r3, r7, r3
    9bfc:	781b      	ldrb	r3, [r3, #0]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d107      	bne.n	9c12 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    9c02:	2317      	movs	r3, #23
    9c04:	18fc      	adds	r4, r7, r3
    9c06:	687b      	ldr	r3, [r7, #4]
    9c08:	0018      	movs	r0, r3
    9c0a:	4b70      	ldr	r3, [pc, #448]	; (9dcc <_i2c_master_read_packet+0x26c>)
    9c0c:	4798      	blx	r3
    9c0e:	0003      	movs	r3, r0
    9c10:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    9c12:	2317      	movs	r3, #23
    9c14:	18fb      	adds	r3, r7, r3
    9c16:	781b      	ldrb	r3, [r3, #0]
    9c18:	2b00      	cmp	r3, #0
    9c1a:	d111      	bne.n	9c40 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    9c1c:	683b      	ldr	r3, [r7, #0]
    9c1e:	881b      	ldrh	r3, [r3, #0]
    9c20:	0a1b      	lsrs	r3, r3, #8
    9c22:	b29b      	uxth	r3, r3
    9c24:	2278      	movs	r2, #120	; 0x78
    9c26:	4313      	orrs	r3, r2
    9c28:	b29b      	uxth	r3, r3
    9c2a:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9c2c:	683b      	ldr	r3, [r7, #0]
    9c2e:	7a5b      	ldrb	r3, [r3, #9]
    9c30:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    9c32:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9c34:	2201      	movs	r2, #1
    9c36:	4313      	orrs	r3, r2
    9c38:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    9c3a:	68fb      	ldr	r3, [r7, #12]
    9c3c:	625a      	str	r2, [r3, #36]	; 0x24
    9c3e:	e00f      	b.n	9c60 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    9c40:	2317      	movs	r3, #23
    9c42:	18fb      	adds	r3, r7, r3
    9c44:	781b      	ldrb	r3, [r3, #0]
    9c46:	e0b6      	b.n	9db6 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    9c48:	683b      	ldr	r3, [r7, #0]
    9c4a:	881b      	ldrh	r3, [r3, #0]
    9c4c:	005b      	lsls	r3, r3, #1
    9c4e:	2201      	movs	r2, #1
    9c50:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    9c52:	683b      	ldr	r3, [r7, #0]
    9c54:	7a5b      	ldrb	r3, [r3, #9]
    9c56:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    9c58:	4313      	orrs	r3, r2
    9c5a:	001a      	movs	r2, r3
    9c5c:	68fb      	ldr	r3, [r7, #12]
    9c5e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    9c60:	2317      	movs	r3, #23
    9c62:	18fc      	adds	r4, r7, r3
    9c64:	687b      	ldr	r3, [r7, #4]
    9c66:	0018      	movs	r0, r3
    9c68:	4b57      	ldr	r3, [pc, #348]	; (9dc8 <_i2c_master_read_packet+0x268>)
    9c6a:	4798      	blx	r3
    9c6c:	0003      	movs	r3, r0
    9c6e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    9c70:	230b      	movs	r3, #11
    9c72:	18fb      	adds	r3, r7, r3
    9c74:	781b      	ldrb	r3, [r3, #0]
    9c76:	2b00      	cmp	r3, #0
    9c78:	d00b      	beq.n	9c92 <_i2c_master_read_packet+0x132>
    9c7a:	683b      	ldr	r3, [r7, #0]
    9c7c:	885b      	ldrh	r3, [r3, #2]
    9c7e:	2b01      	cmp	r3, #1
    9c80:	d107      	bne.n	9c92 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9c82:	68fb      	ldr	r3, [r7, #12]
    9c84:	685b      	ldr	r3, [r3, #4]
    9c86:	2280      	movs	r2, #128	; 0x80
    9c88:	02d2      	lsls	r2, r2, #11
    9c8a:	431a      	orrs	r2, r3
    9c8c:	68fb      	ldr	r3, [r7, #12]
    9c8e:	605a      	str	r2, [r3, #4]
    9c90:	e005      	b.n	9c9e <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    9c92:	68fb      	ldr	r3, [r7, #12]
    9c94:	685b      	ldr	r3, [r3, #4]
    9c96:	4a4b      	ldr	r2, [pc, #300]	; (9dc4 <_i2c_master_read_packet+0x264>)
    9c98:	401a      	ands	r2, r3
    9c9a:	68fb      	ldr	r3, [r7, #12]
    9c9c:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    9c9e:	2317      	movs	r3, #23
    9ca0:	18fb      	adds	r3, r7, r3
    9ca2:	781b      	ldrb	r3, [r3, #0]
    9ca4:	2b00      	cmp	r3, #0
    9ca6:	d107      	bne.n	9cb8 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    9ca8:	2317      	movs	r3, #23
    9caa:	18fc      	adds	r4, r7, r3
    9cac:	687b      	ldr	r3, [r7, #4]
    9cae:	0018      	movs	r0, r3
    9cb0:	4b46      	ldr	r3, [pc, #280]	; (9dcc <_i2c_master_read_packet+0x26c>)
    9cb2:	4798      	blx	r3
    9cb4:	0003      	movs	r3, r0
    9cb6:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    9cb8:	2317      	movs	r3, #23
    9cba:	18fb      	adds	r3, r7, r3
    9cbc:	781b      	ldrb	r3, [r3, #0]
    9cbe:	2b00      	cmp	r3, #0
    9cc0:	d000      	beq.n	9cc4 <_i2c_master_read_packet+0x164>
    9cc2:	e075      	b.n	9db0 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    9cc4:	e04b      	b.n	9d5e <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    9cc6:	68fb      	ldr	r3, [r7, #12]
    9cc8:	8b5b      	ldrh	r3, [r3, #26]
    9cca:	b29b      	uxth	r3, r3
    9ccc:	001a      	movs	r2, r3
    9cce:	2320      	movs	r3, #32
    9cd0:	4013      	ands	r3, r2
    9cd2:	d101      	bne.n	9cd8 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    9cd4:	2341      	movs	r3, #65	; 0x41
    9cd6:	e06e      	b.n	9db6 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	7adb      	ldrb	r3, [r3, #11]
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d01e      	beq.n	9d1e <_i2c_master_read_packet+0x1be>
    9ce0:	230b      	movs	r3, #11
    9ce2:	18fb      	adds	r3, r7, r3
    9ce4:	781b      	ldrb	r3, [r3, #0]
    9ce6:	2201      	movs	r2, #1
    9ce8:	4053      	eors	r3, r2
    9cea:	b2db      	uxtb	r3, r3
    9cec:	2b00      	cmp	r3, #0
    9cee:	d004      	beq.n	9cfa <_i2c_master_read_packet+0x19a>
    9cf0:	2314      	movs	r3, #20
    9cf2:	18fb      	adds	r3, r7, r3
    9cf4:	881b      	ldrh	r3, [r3, #0]
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	d009      	beq.n	9d0e <_i2c_master_read_packet+0x1ae>
    9cfa:	230b      	movs	r3, #11
    9cfc:	18fb      	adds	r3, r7, r3
    9cfe:	781b      	ldrb	r3, [r3, #0]
    9d00:	2b00      	cmp	r3, #0
    9d02:	d00c      	beq.n	9d1e <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    9d04:	2314      	movs	r3, #20
    9d06:	18fb      	adds	r3, r7, r3
    9d08:	881b      	ldrh	r3, [r3, #0]
    9d0a:	2b01      	cmp	r3, #1
    9d0c:	d107      	bne.n	9d1e <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9d0e:	68fb      	ldr	r3, [r7, #12]
    9d10:	685b      	ldr	r3, [r3, #4]
    9d12:	2280      	movs	r2, #128	; 0x80
    9d14:	02d2      	lsls	r2, r2, #11
    9d16:	431a      	orrs	r2, r3
    9d18:	68fb      	ldr	r3, [r7, #12]
    9d1a:	605a      	str	r2, [r3, #4]
    9d1c:	e01a      	b.n	9d54 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    9d1e:	687b      	ldr	r3, [r7, #4]
    9d20:	0018      	movs	r0, r3
    9d22:	4b2b      	ldr	r3, [pc, #172]	; (9dd0 <_i2c_master_read_packet+0x270>)
    9d24:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    9d26:	683b      	ldr	r3, [r7, #0]
    9d28:	685a      	ldr	r2, [r3, #4]
    9d2a:	2312      	movs	r3, #18
    9d2c:	18fb      	adds	r3, r7, r3
    9d2e:	881b      	ldrh	r3, [r3, #0]
    9d30:	2112      	movs	r1, #18
    9d32:	1879      	adds	r1, r7, r1
    9d34:	1c58      	adds	r0, r3, #1
    9d36:	8008      	strh	r0, [r1, #0]
    9d38:	18d3      	adds	r3, r2, r3
    9d3a:	68fa      	ldr	r2, [r7, #12]
    9d3c:	2128      	movs	r1, #40	; 0x28
    9d3e:	5c52      	ldrb	r2, [r2, r1]
    9d40:	b2d2      	uxtb	r2, r2
    9d42:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    9d44:	2317      	movs	r3, #23
    9d46:	18fc      	adds	r4, r7, r3
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	0018      	movs	r0, r3
    9d4c:	4b1e      	ldr	r3, [pc, #120]	; (9dc8 <_i2c_master_read_packet+0x268>)
    9d4e:	4798      	blx	r3
    9d50:	0003      	movs	r3, r0
    9d52:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    9d54:	2317      	movs	r3, #23
    9d56:	18fb      	adds	r3, r7, r3
    9d58:	781b      	ldrb	r3, [r3, #0]
    9d5a:	2b00      	cmp	r3, #0
    9d5c:	d109      	bne.n	9d72 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    9d5e:	2314      	movs	r3, #20
    9d60:	18fb      	adds	r3, r7, r3
    9d62:	881b      	ldrh	r3, [r3, #0]
    9d64:	2214      	movs	r2, #20
    9d66:	18ba      	adds	r2, r7, r2
    9d68:	1e59      	subs	r1, r3, #1
    9d6a:	8011      	strh	r1, [r2, #0]
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	d1aa      	bne.n	9cc6 <_i2c_master_read_packet+0x166>
    9d70:	e000      	b.n	9d74 <_i2c_master_read_packet+0x214>
				break;
    9d72:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    9d74:	687b      	ldr	r3, [r7, #4]
    9d76:	7a9b      	ldrb	r3, [r3, #10]
    9d78:	2b00      	cmp	r3, #0
    9d7a:	d00a      	beq.n	9d92 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    9d7c:	687b      	ldr	r3, [r7, #4]
    9d7e:	0018      	movs	r0, r3
    9d80:	4b13      	ldr	r3, [pc, #76]	; (9dd0 <_i2c_master_read_packet+0x270>)
    9d82:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9d84:	68fb      	ldr	r3, [r7, #12]
    9d86:	685b      	ldr	r3, [r3, #4]
    9d88:	22c0      	movs	r2, #192	; 0xc0
    9d8a:	0292      	lsls	r2, r2, #10
    9d8c:	431a      	orrs	r2, r3
    9d8e:	68fb      	ldr	r3, [r7, #12]
    9d90:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    9d92:	687b      	ldr	r3, [r7, #4]
    9d94:	0018      	movs	r0, r3
    9d96:	4b0e      	ldr	r3, [pc, #56]	; (9dd0 <_i2c_master_read_packet+0x270>)
    9d98:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    9d9a:	683b      	ldr	r3, [r7, #0]
    9d9c:	685a      	ldr	r2, [r3, #4]
    9d9e:	2312      	movs	r3, #18
    9da0:	18fb      	adds	r3, r7, r3
    9da2:	881b      	ldrh	r3, [r3, #0]
    9da4:	18d3      	adds	r3, r2, r3
    9da6:	68fa      	ldr	r2, [r7, #12]
    9da8:	2128      	movs	r1, #40	; 0x28
    9daa:	5c52      	ldrb	r2, [r2, r1]
    9dac:	b2d2      	uxtb	r2, r2
    9dae:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    9db0:	2317      	movs	r3, #23
    9db2:	18fb      	adds	r3, r7, r3
    9db4:	781b      	ldrb	r3, [r3, #0]
}
    9db6:	0018      	movs	r0, r3
    9db8:	46bd      	mov	sp, r7
    9dba:	b007      	add	sp, #28
    9dbc:	bd90      	pop	{r4, r7, pc}
    9dbe:	46c0      	nop			; (mov r8, r8)
    9dc0:	00009b0d 	.word	0x00009b0d
    9dc4:	fffbffff 	.word	0xfffbffff
    9dc8:	00009aaf 	.word	0x00009aaf
    9dcc:	00009a51 	.word	0x00009a51
    9dd0:	000094e9 	.word	0x000094e9

00009dd4 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9dd4:	b580      	push	{r7, lr}
    9dd6:	b082      	sub	sp, #8
    9dd8:	af00      	add	r7, sp, #0
    9dda:	6078      	str	r0, [r7, #4]
    9ddc:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    9dde:	687b      	ldr	r3, [r7, #4]
    9de0:	8b9b      	ldrh	r3, [r3, #28]
    9de2:	b29b      	uxth	r3, r3
    9de4:	2b00      	cmp	r3, #0
    9de6:	d001      	beq.n	9dec <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    9de8:	2305      	movs	r3, #5
    9dea:	e00c      	b.n	9e06 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    9dec:	687b      	ldr	r3, [r7, #4]
    9dee:	2201      	movs	r2, #1
    9df0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    9df2:	687b      	ldr	r3, [r7, #4]
    9df4:	2201      	movs	r2, #1
    9df6:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    9df8:	683a      	ldr	r2, [r7, #0]
    9dfa:	687b      	ldr	r3, [r7, #4]
    9dfc:	0011      	movs	r1, r2
    9dfe:	0018      	movs	r0, r3
    9e00:	4b03      	ldr	r3, [pc, #12]	; (9e10 <i2c_master_read_packet_wait+0x3c>)
    9e02:	4798      	blx	r3
    9e04:	0003      	movs	r3, r0
}
    9e06:	0018      	movs	r0, r3
    9e08:	46bd      	mov	sp, r7
    9e0a:	b002      	add	sp, #8
    9e0c:	bd80      	pop	{r7, pc}
    9e0e:	46c0      	nop			; (mov r8, r8)
    9e10:	00009b61 	.word	0x00009b61

00009e14 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9e14:	b590      	push	{r4, r7, lr}
    9e16:	b087      	sub	sp, #28
    9e18:	af00      	add	r7, sp, #0
    9e1a:	6078      	str	r0, [r7, #4]
    9e1c:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9e1e:	687b      	ldr	r3, [r7, #4]
    9e20:	681b      	ldr	r3, [r3, #0]
    9e22:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    9e24:	2314      	movs	r3, #20
    9e26:	18fb      	adds	r3, r7, r3
    9e28:	683a      	ldr	r2, [r7, #0]
    9e2a:	8852      	ldrh	r2, [r2, #2]
    9e2c:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    9e2e:	687b      	ldr	r3, [r7, #4]
    9e30:	0018      	movs	r0, r3
    9e32:	4b51      	ldr	r3, [pc, #324]	; (9f78 <_i2c_master_write_packet+0x164>)
    9e34:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    9e36:	683b      	ldr	r3, [r7, #0]
    9e38:	7a5b      	ldrb	r3, [r3, #9]
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d006      	beq.n	9e4c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    9e3e:	683b      	ldr	r3, [r7, #0]
    9e40:	7a9a      	ldrb	r2, [r3, #10]
    9e42:	687b      	ldr	r3, [r7, #4]
    9e44:	0011      	movs	r1, r2
    9e46:	0018      	movs	r0, r3
    9e48:	4b4c      	ldr	r3, [pc, #304]	; (9f7c <_i2c_master_write_packet+0x168>)
    9e4a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9e4c:	68fb      	ldr	r3, [r7, #12]
    9e4e:	685b      	ldr	r3, [r3, #4]
    9e50:	4a4b      	ldr	r2, [pc, #300]	; (9f80 <_i2c_master_write_packet+0x16c>)
    9e52:	401a      	ands	r2, r3
    9e54:	68fb      	ldr	r3, [r7, #12]
    9e56:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    9e58:	683b      	ldr	r3, [r7, #0]
    9e5a:	7a1b      	ldrb	r3, [r3, #8]
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d00d      	beq.n	9e7c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9e60:	683b      	ldr	r3, [r7, #0]
    9e62:	881b      	ldrh	r3, [r3, #0]
    9e64:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9e66:	683b      	ldr	r3, [r7, #0]
    9e68:	7a5b      	ldrb	r3, [r3, #9]
    9e6a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9e6c:	4313      	orrs	r3, r2
    9e6e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9e70:	2380      	movs	r3, #128	; 0x80
    9e72:	021b      	lsls	r3, r3, #8
    9e74:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9e76:	68fb      	ldr	r3, [r7, #12]
    9e78:	625a      	str	r2, [r3, #36]	; 0x24
    9e7a:	e009      	b.n	9e90 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9e7c:	683b      	ldr	r3, [r7, #0]
    9e7e:	881b      	ldrh	r3, [r3, #0]
    9e80:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    9e82:	683b      	ldr	r3, [r7, #0]
    9e84:	7a5b      	ldrb	r3, [r3, #9]
    9e86:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9e88:	4313      	orrs	r3, r2
    9e8a:	001a      	movs	r2, r3
    9e8c:	68fb      	ldr	r3, [r7, #12]
    9e8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    9e90:	2317      	movs	r3, #23
    9e92:	18fc      	adds	r4, r7, r3
    9e94:	687b      	ldr	r3, [r7, #4]
    9e96:	0018      	movs	r0, r3
    9e98:	4b3a      	ldr	r3, [pc, #232]	; (9f84 <_i2c_master_write_packet+0x170>)
    9e9a:	4798      	blx	r3
    9e9c:	0003      	movs	r3, r0
    9e9e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    9ea0:	2317      	movs	r3, #23
    9ea2:	18fb      	adds	r3, r7, r3
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	2b00      	cmp	r3, #0
    9ea8:	d107      	bne.n	9eba <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    9eaa:	2317      	movs	r3, #23
    9eac:	18fc      	adds	r4, r7, r3
    9eae:	687b      	ldr	r3, [r7, #4]
    9eb0:	0018      	movs	r0, r3
    9eb2:	4b35      	ldr	r3, [pc, #212]	; (9f88 <_i2c_master_write_packet+0x174>)
    9eb4:	4798      	blx	r3
    9eb6:	0003      	movs	r3, r0
    9eb8:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    9eba:	2317      	movs	r3, #23
    9ebc:	18fb      	adds	r3, r7, r3
    9ebe:	781b      	ldrb	r3, [r3, #0]
    9ec0:	2b00      	cmp	r3, #0
    9ec2:	d152      	bne.n	9f6a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    9ec4:	2312      	movs	r3, #18
    9ec6:	18fb      	adds	r3, r7, r3
    9ec8:	2200      	movs	r2, #0
    9eca:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    9ecc:	e033      	b.n	9f36 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    9ece:	68fb      	ldr	r3, [r7, #12]
    9ed0:	8b5b      	ldrh	r3, [r3, #26]
    9ed2:	b29b      	uxth	r3, r3
    9ed4:	001a      	movs	r2, r3
    9ed6:	2320      	movs	r3, #32
    9ed8:	4013      	ands	r3, r2
    9eda:	d101      	bne.n	9ee0 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    9edc:	2341      	movs	r3, #65	; 0x41
    9ede:	e047      	b.n	9f70 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    9ee0:	687b      	ldr	r3, [r7, #4]
    9ee2:	0018      	movs	r0, r3
    9ee4:	4b24      	ldr	r3, [pc, #144]	; (9f78 <_i2c_master_write_packet+0x164>)
    9ee6:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    9ee8:	683b      	ldr	r3, [r7, #0]
    9eea:	685a      	ldr	r2, [r3, #4]
    9eec:	2312      	movs	r3, #18
    9eee:	18fb      	adds	r3, r7, r3
    9ef0:	881b      	ldrh	r3, [r3, #0]
    9ef2:	2112      	movs	r1, #18
    9ef4:	1879      	adds	r1, r7, r1
    9ef6:	1c58      	adds	r0, r3, #1
    9ef8:	8008      	strh	r0, [r1, #0]
    9efa:	18d3      	adds	r3, r2, r3
    9efc:	7819      	ldrb	r1, [r3, #0]
    9efe:	68fb      	ldr	r3, [r7, #12]
    9f00:	2228      	movs	r2, #40	; 0x28
    9f02:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    9f04:	2317      	movs	r3, #23
    9f06:	18fc      	adds	r4, r7, r3
    9f08:	687b      	ldr	r3, [r7, #4]
    9f0a:	0018      	movs	r0, r3
    9f0c:	4b1d      	ldr	r3, [pc, #116]	; (9f84 <_i2c_master_write_packet+0x170>)
    9f0e:	4798      	blx	r3
    9f10:	0003      	movs	r3, r0
    9f12:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    9f14:	2317      	movs	r3, #23
    9f16:	18fb      	adds	r3, r7, r3
    9f18:	781b      	ldrb	r3, [r3, #0]
    9f1a:	2b00      	cmp	r3, #0
    9f1c:	d115      	bne.n	9f4a <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    9f1e:	68fb      	ldr	r3, [r7, #12]
    9f20:	8b5b      	ldrh	r3, [r3, #26]
    9f22:	b29b      	uxth	r3, r3
    9f24:	001a      	movs	r2, r3
    9f26:	2304      	movs	r3, #4
    9f28:	4013      	ands	r3, r2
    9f2a:	d004      	beq.n	9f36 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    9f2c:	2317      	movs	r3, #23
    9f2e:	18fb      	adds	r3, r7, r3
    9f30:	221e      	movs	r2, #30
    9f32:	701a      	strb	r2, [r3, #0]
				break;
    9f34:	e00a      	b.n	9f4c <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    9f36:	2314      	movs	r3, #20
    9f38:	18fb      	adds	r3, r7, r3
    9f3a:	881b      	ldrh	r3, [r3, #0]
    9f3c:	2214      	movs	r2, #20
    9f3e:	18ba      	adds	r2, r7, r2
    9f40:	1e59      	subs	r1, r3, #1
    9f42:	8011      	strh	r1, [r2, #0]
    9f44:	2b00      	cmp	r3, #0
    9f46:	d1c2      	bne.n	9ece <_i2c_master_write_packet+0xba>
    9f48:	e000      	b.n	9f4c <_i2c_master_write_packet+0x138>
				break;
    9f4a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    9f4c:	687b      	ldr	r3, [r7, #4]
    9f4e:	7a9b      	ldrb	r3, [r3, #10]
    9f50:	2b00      	cmp	r3, #0
    9f52:	d00a      	beq.n	9f6a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	0018      	movs	r0, r3
    9f58:	4b07      	ldr	r3, [pc, #28]	; (9f78 <_i2c_master_write_packet+0x164>)
    9f5a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9f5c:	68fb      	ldr	r3, [r7, #12]
    9f5e:	685b      	ldr	r3, [r3, #4]
    9f60:	22c0      	movs	r2, #192	; 0xc0
    9f62:	0292      	lsls	r2, r2, #10
    9f64:	431a      	orrs	r2, r3
    9f66:	68fb      	ldr	r3, [r7, #12]
    9f68:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    9f6a:	2317      	movs	r3, #23
    9f6c:	18fb      	adds	r3, r7, r3
    9f6e:	781b      	ldrb	r3, [r3, #0]
}
    9f70:	0018      	movs	r0, r3
    9f72:	46bd      	mov	sp, r7
    9f74:	b007      	add	sp, #28
    9f76:	bd90      	pop	{r4, r7, pc}
    9f78:	000094e9 	.word	0x000094e9
    9f7c:	00009b0d 	.word	0x00009b0d
    9f80:	fffbffff 	.word	0xfffbffff
    9f84:	00009aaf 	.word	0x00009aaf
    9f88:	00009a51 	.word	0x00009a51

00009f8c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	b082      	sub	sp, #8
    9f90:	af00      	add	r7, sp, #0
    9f92:	6078      	str	r0, [r7, #4]
    9f94:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    9f96:	687b      	ldr	r3, [r7, #4]
    9f98:	8b9b      	ldrh	r3, [r3, #28]
    9f9a:	b29b      	uxth	r3, r3
    9f9c:	2b00      	cmp	r3, #0
    9f9e:	d001      	beq.n	9fa4 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    9fa0:	2305      	movs	r3, #5
    9fa2:	e00c      	b.n	9fbe <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    9fa4:	687b      	ldr	r3, [r7, #4]
    9fa6:	2200      	movs	r2, #0
    9fa8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    9faa:	687b      	ldr	r3, [r7, #4]
    9fac:	2201      	movs	r2, #1
    9fae:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    9fb0:	683a      	ldr	r2, [r7, #0]
    9fb2:	687b      	ldr	r3, [r7, #4]
    9fb4:	0011      	movs	r1, r2
    9fb6:	0018      	movs	r0, r3
    9fb8:	4b03      	ldr	r3, [pc, #12]	; (9fc8 <i2c_master_write_packet_wait_no_stop+0x3c>)
    9fba:	4798      	blx	r3
    9fbc:	0003      	movs	r3, r0
}
    9fbe:	0018      	movs	r0, r3
    9fc0:	46bd      	mov	sp, r7
    9fc2:	b002      	add	sp, #8
    9fc4:	bd80      	pop	{r7, pc}
    9fc6:	46c0      	nop			; (mov r8, r8)
    9fc8:	00009e15 	.word	0x00009e15

00009fcc <i2c_master_is_syncing>:
{
    9fcc:	b580      	push	{r7, lr}
    9fce:	b084      	sub	sp, #16
    9fd0:	af00      	add	r7, sp, #0
    9fd2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    9fd4:	687b      	ldr	r3, [r7, #4]
    9fd6:	681b      	ldr	r3, [r3, #0]
    9fd8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    9fda:	68fb      	ldr	r3, [r7, #12]
    9fdc:	69db      	ldr	r3, [r3, #28]
    9fde:	2207      	movs	r2, #7
    9fe0:	4013      	ands	r3, r2
    9fe2:	1e5a      	subs	r2, r3, #1
    9fe4:	4193      	sbcs	r3, r2
    9fe6:	b2db      	uxtb	r3, r3
}
    9fe8:	0018      	movs	r0, r3
    9fea:	46bd      	mov	sp, r7
    9fec:	b004      	add	sp, #16
    9fee:	bd80      	pop	{r7, pc}

00009ff0 <_i2c_master_wait_for_sync>:
{
    9ff0:	b580      	push	{r7, lr}
    9ff2:	b082      	sub	sp, #8
    9ff4:	af00      	add	r7, sp, #0
    9ff6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    9ff8:	46c0      	nop			; (mov r8, r8)
    9ffa:	687b      	ldr	r3, [r7, #4]
    9ffc:	0018      	movs	r0, r3
    9ffe:	4b04      	ldr	r3, [pc, #16]	; (a010 <_i2c_master_wait_for_sync+0x20>)
    a000:	4798      	blx	r3
    a002:	1e03      	subs	r3, r0, #0
    a004:	d1f9      	bne.n	9ffa <_i2c_master_wait_for_sync+0xa>
}
    a006:	46c0      	nop			; (mov r8, r8)
    a008:	46bd      	mov	sp, r7
    a00a:	b002      	add	sp, #8
    a00c:	bd80      	pop	{r7, pc}
    a00e:	46c0      	nop			; (mov r8, r8)
    a010:	00009fcd 	.word	0x00009fcd

0000a014 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    a014:	b580      	push	{r7, lr}
    a016:	b084      	sub	sp, #16
    a018:	af00      	add	r7, sp, #0
    a01a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a01c:	687b      	ldr	r3, [r7, #4]
    a01e:	681b      	ldr	r3, [r3, #0]
    a020:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    a022:	68fb      	ldr	r3, [r7, #12]
    a024:	681b      	ldr	r3, [r3, #0]
    a026:	011b      	lsls	r3, r3, #4
    a028:	0fdb      	lsrs	r3, r3, #31
    a02a:	b2db      	uxtb	r3, r3
    a02c:	001a      	movs	r2, r3
    a02e:	230b      	movs	r3, #11
    a030:	18fb      	adds	r3, r7, r3
    a032:	1e51      	subs	r1, r2, #1
    a034:	418a      	sbcs	r2, r1
    a036:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    a038:	2308      	movs	r3, #8
    a03a:	18fb      	adds	r3, r7, r3
    a03c:	687a      	ldr	r2, [r7, #4]
    a03e:	8b52      	ldrh	r2, [r2, #26]
    a040:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    a042:	687b      	ldr	r3, [r7, #4]
    a044:	8b9b      	ldrh	r3, [r3, #28]
    a046:	b29a      	uxth	r2, r3
    a048:	2308      	movs	r3, #8
    a04a:	18fb      	adds	r3, r7, r3
    a04c:	2108      	movs	r1, #8
    a04e:	1879      	adds	r1, r7, r1
    a050:	8809      	ldrh	r1, [r1, #0]
    a052:	1a8a      	subs	r2, r1, r2
    a054:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    a056:	687b      	ldr	r3, [r7, #4]
    a058:	8b9b      	ldrh	r3, [r3, #28]
    a05a:	b29b      	uxth	r3, r3
    a05c:	3b01      	subs	r3, #1
    a05e:	b29a      	uxth	r2, r3
    a060:	687b      	ldr	r3, [r7, #4]
    a062:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    a064:	230b      	movs	r3, #11
    a066:	18fb      	adds	r3, r7, r3
    a068:	781b      	ldrb	r3, [r3, #0]
    a06a:	2b00      	cmp	r3, #0
    a06c:	d010      	beq.n	a090 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    a06e:	687b      	ldr	r3, [r7, #4]
    a070:	7adb      	ldrb	r3, [r3, #11]
    a072:	2b00      	cmp	r3, #0
    a074:	d01c      	beq.n	a0b0 <_i2c_master_read+0x9c>
    a076:	687b      	ldr	r3, [r7, #4]
    a078:	8b9b      	ldrh	r3, [r3, #28]
    a07a:	b29b      	uxth	r3, r3
    a07c:	2b01      	cmp	r3, #1
    a07e:	d117      	bne.n	a0b0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a080:	68fb      	ldr	r3, [r7, #12]
    a082:	685b      	ldr	r3, [r3, #4]
    a084:	2280      	movs	r2, #128	; 0x80
    a086:	02d2      	lsls	r2, r2, #11
    a088:	431a      	orrs	r2, r3
    a08a:	68fb      	ldr	r3, [r7, #12]
    a08c:	605a      	str	r2, [r3, #4]
    a08e:	e00f      	b.n	a0b0 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    a090:	687b      	ldr	r3, [r7, #4]
    a092:	7adb      	ldrb	r3, [r3, #11]
    a094:	2b00      	cmp	r3, #0
    a096:	d00b      	beq.n	a0b0 <_i2c_master_read+0x9c>
    a098:	687b      	ldr	r3, [r7, #4]
    a09a:	8b9b      	ldrh	r3, [r3, #28]
    a09c:	b29b      	uxth	r3, r3
    a09e:	2b00      	cmp	r3, #0
    a0a0:	d106      	bne.n	a0b0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a0a2:	68fb      	ldr	r3, [r7, #12]
    a0a4:	685b      	ldr	r3, [r3, #4]
    a0a6:	2280      	movs	r2, #128	; 0x80
    a0a8:	02d2      	lsls	r2, r2, #11
    a0aa:	431a      	orrs	r2, r3
    a0ac:	68fb      	ldr	r3, [r7, #12]
    a0ae:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    a0b0:	687b      	ldr	r3, [r7, #4]
    a0b2:	8b9b      	ldrh	r3, [r3, #28]
    a0b4:	b29b      	uxth	r3, r3
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d10e      	bne.n	a0d8 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    a0ba:	687b      	ldr	r3, [r7, #4]
    a0bc:	7a9b      	ldrb	r3, [r3, #10]
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d00a      	beq.n	a0d8 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    a0c2:	687b      	ldr	r3, [r7, #4]
    a0c4:	0018      	movs	r0, r3
    a0c6:	4b0e      	ldr	r3, [pc, #56]	; (a100 <_i2c_master_read+0xec>)
    a0c8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a0ca:	68fb      	ldr	r3, [r7, #12]
    a0cc:	685b      	ldr	r3, [r3, #4]
    a0ce:	22c0      	movs	r2, #192	; 0xc0
    a0d0:	0292      	lsls	r2, r2, #10
    a0d2:	431a      	orrs	r2, r3
    a0d4:	68fb      	ldr	r3, [r7, #12]
    a0d6:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	0018      	movs	r0, r3
    a0dc:	4b08      	ldr	r3, [pc, #32]	; (a100 <_i2c_master_read+0xec>)
    a0de:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    a0e0:	687b      	ldr	r3, [r7, #4]
    a0e2:	6a1a      	ldr	r2, [r3, #32]
    a0e4:	2308      	movs	r3, #8
    a0e6:	18fb      	adds	r3, r7, r3
    a0e8:	881b      	ldrh	r3, [r3, #0]
    a0ea:	18d3      	adds	r3, r2, r3
    a0ec:	68fa      	ldr	r2, [r7, #12]
    a0ee:	2128      	movs	r1, #40	; 0x28
    a0f0:	5c52      	ldrb	r2, [r2, r1]
    a0f2:	b2d2      	uxtb	r2, r2
    a0f4:	701a      	strb	r2, [r3, #0]
}
    a0f6:	46c0      	nop			; (mov r8, r8)
    a0f8:	46bd      	mov	sp, r7
    a0fa:	b004      	add	sp, #16
    a0fc:	bd80      	pop	{r7, pc}
    a0fe:	46c0      	nop			; (mov r8, r8)
    a100:	00009ff1 	.word	0x00009ff1

0000a104 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    a104:	b580      	push	{r7, lr}
    a106:	b084      	sub	sp, #16
    a108:	af00      	add	r7, sp, #0
    a10a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a10c:	687b      	ldr	r3, [r7, #4]
    a10e:	681b      	ldr	r3, [r3, #0]
    a110:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    a112:	68fb      	ldr	r3, [r7, #12]
    a114:	8b5b      	ldrh	r3, [r3, #26]
    a116:	b29b      	uxth	r3, r3
    a118:	001a      	movs	r2, r3
    a11a:	2304      	movs	r3, #4
    a11c:	4013      	ands	r3, r2
    a11e:	d004      	beq.n	a12a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    a120:	687b      	ldr	r3, [r7, #4]
    a122:	2225      	movs	r2, #37	; 0x25
    a124:	211e      	movs	r1, #30
    a126:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    a128:	e024      	b.n	a174 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    a12a:	230a      	movs	r3, #10
    a12c:	18fb      	adds	r3, r7, r3
    a12e:	687a      	ldr	r2, [r7, #4]
    a130:	8b52      	ldrh	r2, [r2, #26]
    a132:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    a134:	687b      	ldr	r3, [r7, #4]
    a136:	8b9b      	ldrh	r3, [r3, #28]
    a138:	b29a      	uxth	r2, r3
    a13a:	230a      	movs	r3, #10
    a13c:	18fb      	adds	r3, r7, r3
    a13e:	210a      	movs	r1, #10
    a140:	1879      	adds	r1, r7, r1
    a142:	8809      	ldrh	r1, [r1, #0]
    a144:	1a8a      	subs	r2, r1, r2
    a146:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    a148:	687b      	ldr	r3, [r7, #4]
    a14a:	8b9b      	ldrh	r3, [r3, #28]
    a14c:	b29b      	uxth	r3, r3
    a14e:	3b01      	subs	r3, #1
    a150:	b29a      	uxth	r2, r3
    a152:	687b      	ldr	r3, [r7, #4]
    a154:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	0018      	movs	r0, r3
    a15a:	4b08      	ldr	r3, [pc, #32]	; (a17c <_i2c_master_write+0x78>)
    a15c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    a15e:	687b      	ldr	r3, [r7, #4]
    a160:	6a1a      	ldr	r2, [r3, #32]
    a162:	230a      	movs	r3, #10
    a164:	18fb      	adds	r3, r7, r3
    a166:	881b      	ldrh	r3, [r3, #0]
    a168:	18d3      	adds	r3, r2, r3
    a16a:	781b      	ldrb	r3, [r3, #0]
    a16c:	b2d9      	uxtb	r1, r3
    a16e:	68fb      	ldr	r3, [r7, #12]
    a170:	2228      	movs	r2, #40	; 0x28
    a172:	5499      	strb	r1, [r3, r2]
}
    a174:	46bd      	mov	sp, r7
    a176:	b004      	add	sp, #16
    a178:	bd80      	pop	{r7, pc}
    a17a:	46c0      	nop			; (mov r8, r8)
    a17c:	00009ff1 	.word	0x00009ff1

0000a180 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    a180:	b580      	push	{r7, lr}
    a182:	b084      	sub	sp, #16
    a184:	af00      	add	r7, sp, #0
    a186:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	681b      	ldr	r3, [r3, #0]
    a18c:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    a18e:	68fb      	ldr	r3, [r7, #12]
    a190:	7e1b      	ldrb	r3, [r3, #24]
    a192:	b2db      	uxtb	r3, r3
    a194:	001a      	movs	r2, r3
    a196:	2301      	movs	r3, #1
    a198:	4013      	ands	r3, r2
    a19a:	d02b      	beq.n	a1f4 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    a19c:	68fb      	ldr	r3, [r7, #12]
    a19e:	2201      	movs	r2, #1
    a1a0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    a1a2:	68fb      	ldr	r3, [r7, #12]
    a1a4:	8b5b      	ldrh	r3, [r3, #26]
    a1a6:	b29b      	uxth	r3, r3
    a1a8:	001a      	movs	r2, r3
    a1aa:	2302      	movs	r3, #2
    a1ac:	4013      	ands	r3, r2
    a1ae:	d004      	beq.n	a1ba <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    a1b0:	687b      	ldr	r3, [r7, #4]
    a1b2:	2225      	movs	r2, #37	; 0x25
    a1b4:	2141      	movs	r1, #65	; 0x41
    a1b6:	5499      	strb	r1, [r3, r2]
    a1b8:	e01c      	b.n	a1f4 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    a1ba:	68fb      	ldr	r3, [r7, #12]
    a1bc:	8b5b      	ldrh	r3, [r3, #26]
    a1be:	b29b      	uxth	r3, r3
    a1c0:	001a      	movs	r2, r3
    a1c2:	2304      	movs	r3, #4
    a1c4:	4013      	ands	r3, r2
    a1c6:	d015      	beq.n	a1f4 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    a1c8:	687b      	ldr	r3, [r7, #4]
    a1ca:	2225      	movs	r2, #37	; 0x25
    a1cc:	2118      	movs	r1, #24
    a1ce:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    a1d0:	687b      	ldr	r3, [r7, #4]
    a1d2:	2200      	movs	r2, #0
    a1d4:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	7a9b      	ldrb	r3, [r3, #10]
    a1da:	2b00      	cmp	r3, #0
    a1dc:	d00a      	beq.n	a1f4 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    a1de:	687b      	ldr	r3, [r7, #4]
    a1e0:	0018      	movs	r0, r3
    a1e2:	4b13      	ldr	r3, [pc, #76]	; (a230 <_i2c_master_async_address_response+0xb0>)
    a1e4:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a1e6:	68fb      	ldr	r3, [r7, #12]
    a1e8:	685b      	ldr	r3, [r3, #4]
    a1ea:	22c0      	movs	r2, #192	; 0xc0
    a1ec:	0292      	lsls	r2, r2, #10
    a1ee:	431a      	orrs	r2, r3
    a1f0:	68fb      	ldr	r3, [r7, #12]
    a1f2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	8b9b      	ldrh	r3, [r3, #28]
    a1f8:	b29a      	uxth	r2, r3
    a1fa:	687b      	ldr	r3, [r7, #4]
    a1fc:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    a1fe:	687b      	ldr	r3, [r7, #4]
    a200:	2225      	movs	r2, #37	; 0x25
    a202:	5c9b      	ldrb	r3, [r3, r2]
    a204:	b2db      	uxtb	r3, r3
    a206:	2b05      	cmp	r3, #5
    a208:	d10e      	bne.n	a228 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    a20a:	687b      	ldr	r3, [r7, #4]
    a20c:	2224      	movs	r2, #36	; 0x24
    a20e:	5c9b      	ldrb	r3, [r3, r2]
    a210:	b2db      	uxtb	r3, r3
    a212:	2b00      	cmp	r3, #0
    a214:	d104      	bne.n	a220 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    a216:	687b      	ldr	r3, [r7, #4]
    a218:	0018      	movs	r0, r3
    a21a:	4b06      	ldr	r3, [pc, #24]	; (a234 <_i2c_master_async_address_response+0xb4>)
    a21c:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    a21e:	e003      	b.n	a228 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    a220:	687b      	ldr	r3, [r7, #4]
    a222:	0018      	movs	r0, r3
    a224:	4b04      	ldr	r3, [pc, #16]	; (a238 <_i2c_master_async_address_response+0xb8>)
    a226:	4798      	blx	r3
}
    a228:	46c0      	nop			; (mov r8, r8)
    a22a:	46bd      	mov	sp, r7
    a22c:	b004      	add	sp, #16
    a22e:	bd80      	pop	{r7, pc}
    a230:	00009ff1 	.word	0x00009ff1
    a234:	0000a105 	.word	0x0000a105
    a238:	0000a015 	.word	0x0000a015

0000a23c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    a23c:	b580      	push	{r7, lr}
    a23e:	b086      	sub	sp, #24
    a240:	af00      	add	r7, sp, #0
    a242:	0002      	movs	r2, r0
    a244:	1dfb      	adds	r3, r7, #7
    a246:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    a248:	1dfb      	adds	r3, r7, #7
    a24a:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    a24c:	4b93      	ldr	r3, [pc, #588]	; (a49c <_i2c_master_interrupt_handler+0x260>)
    a24e:	0092      	lsls	r2, r2, #2
    a250:	58d3      	ldr	r3, [r2, r3]
    a252:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a254:	697b      	ldr	r3, [r7, #20]
    a256:	681b      	ldr	r3, [r3, #0]
    a258:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    a25a:	693b      	ldr	r3, [r7, #16]
    a25c:	681b      	ldr	r3, [r3, #0]
    a25e:	011b      	lsls	r3, r3, #4
    a260:	0fdb      	lsrs	r3, r3, #31
    a262:	b2db      	uxtb	r3, r3
    a264:	001a      	movs	r2, r3
    a266:	230f      	movs	r3, #15
    a268:	18fb      	adds	r3, r7, r3
    a26a:	1e51      	subs	r1, r2, #1
    a26c:	418a      	sbcs	r2, r1
    a26e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    a270:	230e      	movs	r3, #14
    a272:	18fb      	adds	r3, r7, r3
    a274:	697a      	ldr	r2, [r7, #20]
    a276:	7e52      	ldrb	r2, [r2, #25]
    a278:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    a27a:	697b      	ldr	r3, [r7, #20]
    a27c:	7e1b      	ldrb	r3, [r3, #24]
    a27e:	b2da      	uxtb	r2, r3
    a280:	230e      	movs	r3, #14
    a282:	18fb      	adds	r3, r7, r3
    a284:	210e      	movs	r1, #14
    a286:	1879      	adds	r1, r7, r1
    a288:	7809      	ldrb	r1, [r1, #0]
    a28a:	400a      	ands	r2, r1
    a28c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    a28e:	697b      	ldr	r3, [r7, #20]
    a290:	8b5b      	ldrh	r3, [r3, #26]
    a292:	b29b      	uxth	r3, r3
    a294:	2b00      	cmp	r3, #0
    a296:	d109      	bne.n	a2ac <_i2c_master_interrupt_handler+0x70>
    a298:	697b      	ldr	r3, [r7, #20]
    a29a:	8b9b      	ldrh	r3, [r3, #28]
    a29c:	b29b      	uxth	r3, r3
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d004      	beq.n	a2ac <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    a2a2:	697b      	ldr	r3, [r7, #20]
    a2a4:	0018      	movs	r0, r3
    a2a6:	4b7e      	ldr	r3, [pc, #504]	; (a4a0 <_i2c_master_interrupt_handler+0x264>)
    a2a8:	4798      	blx	r3
    a2aa:	e070      	b.n	a38e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a2ac:	697b      	ldr	r3, [r7, #20]
    a2ae:	8b5b      	ldrh	r3, [r3, #26]
    a2b0:	b29b      	uxth	r3, r3
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	d039      	beq.n	a32a <_i2c_master_interrupt_handler+0xee>
    a2b6:	697b      	ldr	r3, [r7, #20]
    a2b8:	8b9b      	ldrh	r3, [r3, #28]
    a2ba:	b29b      	uxth	r3, r3
    a2bc:	2b00      	cmp	r3, #0
    a2be:	d134      	bne.n	a32a <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    a2c0:	697b      	ldr	r3, [r7, #20]
    a2c2:	2225      	movs	r2, #37	; 0x25
    a2c4:	5c9b      	ldrb	r3, [r3, r2]
    a2c6:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a2c8:	2b05      	cmp	r3, #5
    a2ca:	d12e      	bne.n	a32a <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    a2cc:	697b      	ldr	r3, [r7, #20]
    a2ce:	2224      	movs	r2, #36	; 0x24
    a2d0:	5c9b      	ldrb	r3, [r3, r2]
    a2d2:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    a2d4:	2b00      	cmp	r3, #0
    a2d6:	d128      	bne.n	a32a <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    a2d8:	693b      	ldr	r3, [r7, #16]
    a2da:	2203      	movs	r2, #3
    a2dc:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    a2de:	697b      	ldr	r3, [r7, #20]
    a2e0:	2200      	movs	r2, #0
    a2e2:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    a2e4:	697b      	ldr	r3, [r7, #20]
    a2e6:	2225      	movs	r2, #37	; 0x25
    a2e8:	2100      	movs	r1, #0
    a2ea:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    a2ec:	697b      	ldr	r3, [r7, #20]
    a2ee:	7a9b      	ldrb	r3, [r3, #10]
    a2f0:	2b00      	cmp	r3, #0
    a2f2:	d00b      	beq.n	a30c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    a2f4:	697b      	ldr	r3, [r7, #20]
    a2f6:	0018      	movs	r0, r3
    a2f8:	4b6a      	ldr	r3, [pc, #424]	; (a4a4 <_i2c_master_interrupt_handler+0x268>)
    a2fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a2fc:	693b      	ldr	r3, [r7, #16]
    a2fe:	685b      	ldr	r3, [r3, #4]
    a300:	22c0      	movs	r2, #192	; 0xc0
    a302:	0292      	lsls	r2, r2, #10
    a304:	431a      	orrs	r2, r3
    a306:	693b      	ldr	r3, [r7, #16]
    a308:	605a      	str	r2, [r3, #4]
    a30a:	e002      	b.n	a312 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    a30c:	693b      	ldr	r3, [r7, #16]
    a30e:	2201      	movs	r2, #1
    a310:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    a312:	230e      	movs	r3, #14
    a314:	18fb      	adds	r3, r7, r3
    a316:	781b      	ldrb	r3, [r3, #0]
    a318:	2201      	movs	r2, #1
    a31a:	4013      	ands	r3, r2
    a31c:	d037      	beq.n	a38e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    a31e:	697b      	ldr	r3, [r7, #20]
    a320:	68db      	ldr	r3, [r3, #12]
    a322:	697a      	ldr	r2, [r7, #20]
    a324:	0010      	movs	r0, r2
    a326:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    a328:	e031      	b.n	a38e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    a32a:	697b      	ldr	r3, [r7, #20]
    a32c:	8b5b      	ldrh	r3, [r3, #26]
    a32e:	b29b      	uxth	r3, r3
    a330:	2b00      	cmp	r3, #0
    a332:	d02c      	beq.n	a38e <_i2c_master_interrupt_handler+0x152>
    a334:	697b      	ldr	r3, [r7, #20]
    a336:	8b9b      	ldrh	r3, [r3, #28]
    a338:	b29b      	uxth	r3, r3
    a33a:	2b00      	cmp	r3, #0
    a33c:	d027      	beq.n	a38e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    a33e:	693b      	ldr	r3, [r7, #16]
    a340:	8b5b      	ldrh	r3, [r3, #26]
    a342:	b29b      	uxth	r3, r3
    a344:	001a      	movs	r2, r3
    a346:	2320      	movs	r3, #32
    a348:	4013      	ands	r3, r2
    a34a:	d111      	bne.n	a370 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    a34c:	230f      	movs	r3, #15
    a34e:	18fb      	adds	r3, r7, r3
    a350:	781b      	ldrb	r3, [r3, #0]
    a352:	2201      	movs	r2, #1
    a354:	4053      	eors	r3, r2
    a356:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    a358:	2b00      	cmp	r3, #0
    a35a:	d104      	bne.n	a366 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    a35c:	697b      	ldr	r3, [r7, #20]
    a35e:	8b9b      	ldrh	r3, [r3, #28]
    a360:	b29b      	uxth	r3, r3
    a362:	2b01      	cmp	r3, #1
    a364:	d004      	beq.n	a370 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    a366:	697b      	ldr	r3, [r7, #20]
    a368:	2225      	movs	r2, #37	; 0x25
    a36a:	2141      	movs	r1, #65	; 0x41
    a36c:	5499      	strb	r1, [r3, r2]
    a36e:	e00e      	b.n	a38e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    a370:	697b      	ldr	r3, [r7, #20]
    a372:	2224      	movs	r2, #36	; 0x24
    a374:	5c9b      	ldrb	r3, [r3, r2]
    a376:	b2db      	uxtb	r3, r3
    a378:	2b00      	cmp	r3, #0
    a37a:	d104      	bne.n	a386 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    a37c:	697b      	ldr	r3, [r7, #20]
    a37e:	0018      	movs	r0, r3
    a380:	4b49      	ldr	r3, [pc, #292]	; (a4a8 <_i2c_master_interrupt_handler+0x26c>)
    a382:	4798      	blx	r3
    a384:	e003      	b.n	a38e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    a386:	697b      	ldr	r3, [r7, #20]
    a388:	0018      	movs	r0, r3
    a38a:	4b48      	ldr	r3, [pc, #288]	; (a4ac <_i2c_master_interrupt_handler+0x270>)
    a38c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a38e:	697b      	ldr	r3, [r7, #20]
    a390:	8b5b      	ldrh	r3, [r3, #26]
    a392:	b29b      	uxth	r3, r3
    a394:	2b00      	cmp	r3, #0
    a396:	d047      	beq.n	a428 <_i2c_master_interrupt_handler+0x1ec>
    a398:	697b      	ldr	r3, [r7, #20]
    a39a:	8b9b      	ldrh	r3, [r3, #28]
    a39c:	b29b      	uxth	r3, r3
    a39e:	2b00      	cmp	r3, #0
    a3a0:	d142      	bne.n	a428 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    a3a2:	697b      	ldr	r3, [r7, #20]
    a3a4:	2225      	movs	r2, #37	; 0x25
    a3a6:	5c9b      	ldrb	r3, [r3, r2]
    a3a8:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a3aa:	2b05      	cmp	r3, #5
    a3ac:	d13c      	bne.n	a428 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    a3ae:	697b      	ldr	r3, [r7, #20]
    a3b0:	2224      	movs	r2, #36	; 0x24
    a3b2:	5c9b      	ldrb	r3, [r3, r2]
    a3b4:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    a3b6:	2b01      	cmp	r3, #1
    a3b8:	d136      	bne.n	a428 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    a3ba:	693b      	ldr	r3, [r7, #16]
    a3bc:	7e1b      	ldrb	r3, [r3, #24]
    a3be:	b2db      	uxtb	r3, r3
    a3c0:	001a      	movs	r2, r3
    a3c2:	2302      	movs	r3, #2
    a3c4:	4013      	ands	r3, r2
    a3c6:	d002      	beq.n	a3ce <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a3c8:	693b      	ldr	r3, [r7, #16]
    a3ca:	2202      	movs	r2, #2
    a3cc:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    a3ce:	693b      	ldr	r3, [r7, #16]
    a3d0:	2203      	movs	r2, #3
    a3d2:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    a3d4:	697b      	ldr	r3, [r7, #20]
    a3d6:	2200      	movs	r2, #0
    a3d8:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    a3da:	697b      	ldr	r3, [r7, #20]
    a3dc:	2225      	movs	r2, #37	; 0x25
    a3de:	2100      	movs	r1, #0
    a3e0:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    a3e2:	230e      	movs	r3, #14
    a3e4:	18fb      	adds	r3, r7, r3
    a3e6:	781b      	ldrb	r3, [r3, #0]
    a3e8:	2202      	movs	r2, #2
    a3ea:	4013      	ands	r3, r2
    a3ec:	d00b      	beq.n	a406 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    a3ee:	697b      	ldr	r3, [r7, #20]
    a3f0:	2224      	movs	r2, #36	; 0x24
    a3f2:	5c9b      	ldrb	r3, [r3, r2]
    a3f4:	b2db      	uxtb	r3, r3
    a3f6:	2b01      	cmp	r3, #1
    a3f8:	d105      	bne.n	a406 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    a3fa:	697b      	ldr	r3, [r7, #20]
    a3fc:	691b      	ldr	r3, [r3, #16]
    a3fe:	697a      	ldr	r2, [r7, #20]
    a400:	0010      	movs	r0, r2
    a402:	4798      	blx	r3
    a404:	e010      	b.n	a428 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    a406:	230e      	movs	r3, #14
    a408:	18fb      	adds	r3, r7, r3
    a40a:	781b      	ldrb	r3, [r3, #0]
    a40c:	2201      	movs	r2, #1
    a40e:	4013      	ands	r3, r2
    a410:	d00a      	beq.n	a428 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    a412:	697b      	ldr	r3, [r7, #20]
    a414:	2224      	movs	r2, #36	; 0x24
    a416:	5c9b      	ldrb	r3, [r3, r2]
    a418:	b2db      	uxtb	r3, r3
    a41a:	2b00      	cmp	r3, #0
    a41c:	d104      	bne.n	a428 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    a41e:	697b      	ldr	r3, [r7, #20]
    a420:	68db      	ldr	r3, [r3, #12]
    a422:	697a      	ldr	r2, [r7, #20]
    a424:	0010      	movs	r0, r2
    a426:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    a428:	697b      	ldr	r3, [r7, #20]
    a42a:	2225      	movs	r2, #37	; 0x25
    a42c:	5c9b      	ldrb	r3, [r3, r2]
    a42e:	b2db      	uxtb	r3, r3
    a430:	2b05      	cmp	r3, #5
    a432:	d02e      	beq.n	a492 <_i2c_master_interrupt_handler+0x256>
    a434:	697b      	ldr	r3, [r7, #20]
    a436:	2225      	movs	r2, #37	; 0x25
    a438:	5c9b      	ldrb	r3, [r3, r2]
    a43a:	b2db      	uxtb	r3, r3
    a43c:	2b00      	cmp	r3, #0
    a43e:	d028      	beq.n	a492 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    a440:	693b      	ldr	r3, [r7, #16]
    a442:	2203      	movs	r2, #3
    a444:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    a446:	697b      	ldr	r3, [r7, #20]
    a448:	2200      	movs	r2, #0
    a44a:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    a44c:	697b      	ldr	r3, [r7, #20]
    a44e:	2200      	movs	r2, #0
    a450:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    a452:	697b      	ldr	r3, [r7, #20]
    a454:	2225      	movs	r2, #37	; 0x25
    a456:	5c9b      	ldrb	r3, [r3, r2]
    a458:	b2db      	uxtb	r3, r3
    a45a:	2b41      	cmp	r3, #65	; 0x41
    a45c:	d00e      	beq.n	a47c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    a45e:	697b      	ldr	r3, [r7, #20]
    a460:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    a462:	2b00      	cmp	r3, #0
    a464:	d00a      	beq.n	a47c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    a466:	697b      	ldr	r3, [r7, #20]
    a468:	0018      	movs	r0, r3
    a46a:	4b0e      	ldr	r3, [pc, #56]	; (a4a4 <_i2c_master_interrupt_handler+0x268>)
    a46c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    a46e:	693b      	ldr	r3, [r7, #16]
    a470:	685b      	ldr	r3, [r3, #4]
    a472:	22e0      	movs	r2, #224	; 0xe0
    a474:	02d2      	lsls	r2, r2, #11
    a476:	431a      	orrs	r2, r3
    a478:	693b      	ldr	r3, [r7, #16]
    a47a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    a47c:	230e      	movs	r3, #14
    a47e:	18fb      	adds	r3, r7, r3
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	2204      	movs	r2, #4
    a484:	4013      	ands	r3, r2
    a486:	d004      	beq.n	a492 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    a488:	697b      	ldr	r3, [r7, #20]
    a48a:	695b      	ldr	r3, [r3, #20]
    a48c:	697a      	ldr	r2, [r7, #20]
    a48e:	0010      	movs	r0, r2
    a490:	4798      	blx	r3
		}
	}
}
    a492:	46c0      	nop			; (mov r8, r8)
    a494:	46bd      	mov	sp, r7
    a496:	b006      	add	sp, #24
    a498:	bd80      	pop	{r7, pc}
    a49a:	46c0      	nop			; (mov r8, r8)
    a49c:	20000aac 	.word	0x20000aac
    a4a0:	0000a181 	.word	0x0000a181
    a4a4:	00009ff1 	.word	0x00009ff1
    a4a8:	0000a105 	.word	0x0000a105
    a4ac:	0000a015 	.word	0x0000a015

0000a4b0 <system_gclk_chan_get_config_defaults>:
{
    a4b0:	b580      	push	{r7, lr}
    a4b2:	b082      	sub	sp, #8
    a4b4:	af00      	add	r7, sp, #0
    a4b6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	2200      	movs	r2, #0
    a4bc:	701a      	strb	r2, [r3, #0]
}
    a4be:	46c0      	nop			; (mov r8, r8)
    a4c0:	46bd      	mov	sp, r7
    a4c2:	b002      	add	sp, #8
    a4c4:	bd80      	pop	{r7, pc}

0000a4c6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    a4c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4c8:	b08d      	sub	sp, #52	; 0x34
    a4ca:	af00      	add	r7, sp, #0
    a4cc:	60b8      	str	r0, [r7, #8]
    a4ce:	60f9      	str	r1, [r7, #12]
    a4d0:	603a      	str	r2, [r7, #0]
    a4d2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    a4d4:	2300      	movs	r3, #0
    a4d6:	2400      	movs	r4, #0
    a4d8:	623b      	str	r3, [r7, #32]
    a4da:	627c      	str	r4, [r7, #36]	; 0x24
    a4dc:	2300      	movs	r3, #0
    a4de:	2400      	movs	r4, #0
    a4e0:	61bb      	str	r3, [r7, #24]
    a4e2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    a4e4:	233f      	movs	r3, #63	; 0x3f
    a4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a4e8:	e053      	b.n	a592 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4ec:	3b20      	subs	r3, #32
    a4ee:	2b00      	cmp	r3, #0
    a4f0:	db04      	blt.n	a4fc <long_division+0x36>
    a4f2:	2201      	movs	r2, #1
    a4f4:	409a      	lsls	r2, r3
    a4f6:	0013      	movs	r3, r2
    a4f8:	617b      	str	r3, [r7, #20]
    a4fa:	e00b      	b.n	a514 <long_division+0x4e>
    a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4fe:	2220      	movs	r2, #32
    a500:	1ad3      	subs	r3, r2, r3
    a502:	2201      	movs	r2, #1
    a504:	40da      	lsrs	r2, r3
    a506:	0013      	movs	r3, r2
    a508:	2100      	movs	r1, #0
    a50a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a50c:	4091      	lsls	r1, r2
    a50e:	000a      	movs	r2, r1
    a510:	4313      	orrs	r3, r2
    a512:	617b      	str	r3, [r7, #20]
    a514:	2201      	movs	r2, #1
    a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a518:	409a      	lsls	r2, r3
    a51a:	0013      	movs	r3, r2
    a51c:	613b      	str	r3, [r7, #16]

		r = r << 1;
    a51e:	69bb      	ldr	r3, [r7, #24]
    a520:	69fc      	ldr	r4, [r7, #28]
    a522:	18db      	adds	r3, r3, r3
    a524:	4164      	adcs	r4, r4
    a526:	61bb      	str	r3, [r7, #24]
    a528:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    a52a:	68bb      	ldr	r3, [r7, #8]
    a52c:	693a      	ldr	r2, [r7, #16]
    a52e:	401a      	ands	r2, r3
    a530:	0015      	movs	r5, r2
    a532:	68fb      	ldr	r3, [r7, #12]
    a534:	697a      	ldr	r2, [r7, #20]
    a536:	401a      	ands	r2, r3
    a538:	0016      	movs	r6, r2
    a53a:	002b      	movs	r3, r5
    a53c:	4333      	orrs	r3, r6
    a53e:	d007      	beq.n	a550 <long_division+0x8a>
			r |= 0x01;
    a540:	69bb      	ldr	r3, [r7, #24]
    a542:	2201      	movs	r2, #1
    a544:	4313      	orrs	r3, r2
    a546:	61bb      	str	r3, [r7, #24]
    a548:	69fb      	ldr	r3, [r7, #28]
    a54a:	2200      	movs	r2, #0
    a54c:	4313      	orrs	r3, r2
    a54e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    a550:	687a      	ldr	r2, [r7, #4]
    a552:	69fb      	ldr	r3, [r7, #28]
    a554:	429a      	cmp	r2, r3
    a556:	d819      	bhi.n	a58c <long_division+0xc6>
    a558:	687a      	ldr	r2, [r7, #4]
    a55a:	69fb      	ldr	r3, [r7, #28]
    a55c:	429a      	cmp	r2, r3
    a55e:	d103      	bne.n	a568 <long_division+0xa2>
    a560:	683a      	ldr	r2, [r7, #0]
    a562:	69bb      	ldr	r3, [r7, #24]
    a564:	429a      	cmp	r2, r3
    a566:	d811      	bhi.n	a58c <long_division+0xc6>
			r = r - d;
    a568:	69b9      	ldr	r1, [r7, #24]
    a56a:	69fa      	ldr	r2, [r7, #28]
    a56c:	683b      	ldr	r3, [r7, #0]
    a56e:	687c      	ldr	r4, [r7, #4]
    a570:	1ac9      	subs	r1, r1, r3
    a572:	41a2      	sbcs	r2, r4
    a574:	000b      	movs	r3, r1
    a576:	0014      	movs	r4, r2
    a578:	61bb      	str	r3, [r7, #24]
    a57a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    a57c:	6a3a      	ldr	r2, [r7, #32]
    a57e:	693b      	ldr	r3, [r7, #16]
    a580:	4313      	orrs	r3, r2
    a582:	623b      	str	r3, [r7, #32]
    a584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a586:	697b      	ldr	r3, [r7, #20]
    a588:	4313      	orrs	r3, r2
    a58a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a58e:	3b01      	subs	r3, #1
    a590:	62fb      	str	r3, [r7, #44]	; 0x2c
    a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a594:	2b00      	cmp	r3, #0
    a596:	daa8      	bge.n	a4ea <long_division+0x24>
		}
	}

	return q;
    a598:	6a3b      	ldr	r3, [r7, #32]
    a59a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    a59c:	0018      	movs	r0, r3
    a59e:	0021      	movs	r1, r4
    a5a0:	46bd      	mov	sp, r7
    a5a2:	b00d      	add	sp, #52	; 0x34
    a5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a5a6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    a5a6:	b580      	push	{r7, lr}
    a5a8:	b086      	sub	sp, #24
    a5aa:	af00      	add	r7, sp, #0
    a5ac:	60f8      	str	r0, [r7, #12]
    a5ae:	60b9      	str	r1, [r7, #8]
    a5b0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    a5b2:	2316      	movs	r3, #22
    a5b4:	18fb      	adds	r3, r7, r3
    a5b6:	2200      	movs	r2, #0
    a5b8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    a5ba:	68bb      	ldr	r3, [r7, #8]
    a5bc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    a5be:	68bb      	ldr	r3, [r7, #8]
    a5c0:	085a      	lsrs	r2, r3, #1
    a5c2:	68fb      	ldr	r3, [r7, #12]
    a5c4:	429a      	cmp	r2, r3
    a5c6:	d201      	bcs.n	a5cc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a5c8:	2340      	movs	r3, #64	; 0x40
    a5ca:	e026      	b.n	a61a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    a5cc:	68bb      	ldr	r3, [r7, #8]
    a5ce:	085b      	lsrs	r3, r3, #1
    a5d0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    a5d2:	e00a      	b.n	a5ea <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    a5d4:	693a      	ldr	r2, [r7, #16]
    a5d6:	68fb      	ldr	r3, [r7, #12]
    a5d8:	1ad3      	subs	r3, r2, r3
    a5da:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    a5dc:	2316      	movs	r3, #22
    a5de:	18fb      	adds	r3, r7, r3
    a5e0:	881a      	ldrh	r2, [r3, #0]
    a5e2:	2316      	movs	r3, #22
    a5e4:	18fb      	adds	r3, r7, r3
    a5e6:	3201      	adds	r2, #1
    a5e8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    a5ea:	693a      	ldr	r2, [r7, #16]
    a5ec:	68fb      	ldr	r3, [r7, #12]
    a5ee:	429a      	cmp	r2, r3
    a5f0:	d2f0      	bcs.n	a5d4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    a5f2:	2316      	movs	r3, #22
    a5f4:	18fb      	adds	r3, r7, r3
    a5f6:	2216      	movs	r2, #22
    a5f8:	18ba      	adds	r2, r7, r2
    a5fa:	8812      	ldrh	r2, [r2, #0]
    a5fc:	3a01      	subs	r2, #1
    a5fe:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    a600:	2316      	movs	r3, #22
    a602:	18fb      	adds	r3, r7, r3
    a604:	881b      	ldrh	r3, [r3, #0]
    a606:	2bff      	cmp	r3, #255	; 0xff
    a608:	d901      	bls.n	a60e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a60a:	2340      	movs	r3, #64	; 0x40
    a60c:	e005      	b.n	a61a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    a60e:	687b      	ldr	r3, [r7, #4]
    a610:	2216      	movs	r2, #22
    a612:	18ba      	adds	r2, r7, r2
    a614:	8812      	ldrh	r2, [r2, #0]
    a616:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    a618:	2300      	movs	r3, #0
	}
}
    a61a:	0018      	movs	r0, r3
    a61c:	46bd      	mov	sp, r7
    a61e:	b006      	add	sp, #24
    a620:	bd80      	pop	{r7, pc}
	...

0000a624 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    a624:	b5f0      	push	{r4, r5, r6, r7, lr}
    a626:	b0a1      	sub	sp, #132	; 0x84
    a628:	af00      	add	r7, sp, #0
    a62a:	64f8      	str	r0, [r7, #76]	; 0x4c
    a62c:	64b9      	str	r1, [r7, #72]	; 0x48
    a62e:	647a      	str	r2, [r7, #68]	; 0x44
    a630:	2243      	movs	r2, #67	; 0x43
    a632:	18ba      	adds	r2, r7, r2
    a634:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    a636:	2300      	movs	r3, #0
    a638:	2400      	movs	r4, #0
    a63a:	673b      	str	r3, [r7, #112]	; 0x70
    a63c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    a63e:	2300      	movs	r3, #0
    a640:	2400      	movs	r4, #0
    a642:	66bb      	str	r3, [r7, #104]	; 0x68
    a644:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    a646:	2300      	movs	r3, #0
    a648:	2400      	movs	r4, #0
    a64a:	67bb      	str	r3, [r7, #120]	; 0x78
    a64c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    a64e:	2300      	movs	r3, #0
    a650:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    a652:	2358      	movs	r3, #88	; 0x58
    a654:	2240      	movs	r2, #64	; 0x40
    a656:	4694      	mov	ip, r2
    a658:	44bc      	add	ip, r7
    a65a:	4463      	add	r3, ip
    a65c:	781a      	ldrb	r2, [r3, #0]
    a65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a660:	435a      	muls	r2, r3
    a662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a664:	429a      	cmp	r2, r3
    a666:	d901      	bls.n	a66c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a668:	2340      	movs	r3, #64	; 0x40
    a66a:	e0b3      	b.n	a7d4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    a66c:	2343      	movs	r3, #67	; 0x43
    a66e:	18fb      	adds	r3, r7, r3
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	2b00      	cmp	r3, #0
    a674:	d13d      	bne.n	a6f2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    a676:	2358      	movs	r3, #88	; 0x58
    a678:	2240      	movs	r2, #64	; 0x40
    a67a:	4694      	mov	ip, r2
    a67c:	44bc      	add	ip, r7
    a67e:	4463      	add	r3, ip
    a680:	781b      	ldrb	r3, [r3, #0]
    a682:	b2db      	uxtb	r3, r3
    a684:	613b      	str	r3, [r7, #16]
    a686:	2300      	movs	r3, #0
    a688:	617b      	str	r3, [r7, #20]
    a68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a68c:	60bb      	str	r3, [r7, #8]
    a68e:	2300      	movs	r3, #0
    a690:	60fb      	str	r3, [r7, #12]
    a692:	4c52      	ldr	r4, [pc, #328]	; (a7dc <_sercom_get_async_baud_val+0x1b8>)
    a694:	68ba      	ldr	r2, [r7, #8]
    a696:	68fb      	ldr	r3, [r7, #12]
    a698:	6938      	ldr	r0, [r7, #16]
    a69a:	6979      	ldr	r1, [r7, #20]
    a69c:	47a0      	blx	r4
    a69e:	0003      	movs	r3, r0
    a6a0:	000c      	movs	r4, r1
    a6a2:	001b      	movs	r3, r3
    a6a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    a6a6:	2300      	movs	r3, #0
    a6a8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    a6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a6ac:	603b      	str	r3, [r7, #0]
    a6ae:	2300      	movs	r3, #0
    a6b0:	607b      	str	r3, [r7, #4]
    a6b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
    a6b4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    a6b6:	683a      	ldr	r2, [r7, #0]
    a6b8:	687b      	ldr	r3, [r7, #4]
    a6ba:	4c49      	ldr	r4, [pc, #292]	; (a7e0 <_sercom_get_async_baud_val+0x1bc>)
    a6bc:	47a0      	blx	r4
    a6be:	0003      	movs	r3, r0
    a6c0:	000c      	movs	r4, r1
    a6c2:	673b      	str	r3, [r7, #112]	; 0x70
    a6c4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    a6c6:	2100      	movs	r1, #0
    a6c8:	2201      	movs	r2, #1
    a6ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    a6cc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    a6ce:	1ac9      	subs	r1, r1, r3
    a6d0:	41a2      	sbcs	r2, r4
    a6d2:	000b      	movs	r3, r1
    a6d4:	0014      	movs	r4, r2
    a6d6:	66bb      	str	r3, [r7, #104]	; 0x68
    a6d8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    a6da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a6dc:	0c1b      	lsrs	r3, r3, #16
    a6de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    a6e0:	0416      	lsls	r6, r2, #16
    a6e2:	431e      	orrs	r6, r3
    a6e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a6e6:	041d      	lsls	r5, r3, #16
    a6e8:	0033      	movs	r3, r6
    a6ea:	67bb      	str	r3, [r7, #120]	; 0x78
    a6ec:	2300      	movs	r3, #0
    a6ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    a6f0:	e06a      	b.n	a7c8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    a6f2:	2343      	movs	r3, #67	; 0x43
    a6f4:	18fb      	adds	r3, r7, r3
    a6f6:	781b      	ldrb	r3, [r3, #0]
    a6f8:	2b01      	cmp	r3, #1
    a6fa:	d165      	bne.n	a7c8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    a6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a6fe:	633b      	str	r3, [r7, #48]	; 0x30
    a700:	2300      	movs	r3, #0
    a702:	637b      	str	r3, [r7, #52]	; 0x34
    a704:	2358      	movs	r3, #88	; 0x58
    a706:	2240      	movs	r2, #64	; 0x40
    a708:	4694      	mov	ip, r2
    a70a:	44bc      	add	ip, r7
    a70c:	4463      	add	r3, ip
    a70e:	781b      	ldrb	r3, [r3, #0]
    a710:	b2db      	uxtb	r3, r3
    a712:	62bb      	str	r3, [r7, #40]	; 0x28
    a714:	2300      	movs	r3, #0
    a716:	62fb      	str	r3, [r7, #44]	; 0x2c
    a718:	4c30      	ldr	r4, [pc, #192]	; (a7dc <_sercom_get_async_baud_val+0x1b8>)
    a71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a71e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a720:	6b79      	ldr	r1, [r7, #52]	; 0x34
    a722:	47a0      	blx	r4
    a724:	0003      	movs	r3, r0
    a726:	000c      	movs	r4, r1
    a728:	65bb      	str	r3, [r7, #88]	; 0x58
    a72a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    a72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a72e:	623b      	str	r3, [r7, #32]
    a730:	2300      	movs	r3, #0
    a732:	627b      	str	r3, [r7, #36]	; 0x24
    a734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a736:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a738:	001a      	movs	r2, r3
    a73a:	0023      	movs	r3, r4
    a73c:	6a38      	ldr	r0, [r7, #32]
    a73e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a740:	4c27      	ldr	r4, [pc, #156]	; (a7e0 <_sercom_get_async_baud_val+0x1bc>)
    a742:	47a0      	blx	r4
    a744:	0003      	movs	r3, r0
    a746:	000c      	movs	r4, r1
    a748:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    a74a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    a74c:	2380      	movs	r3, #128	; 0x80
    a74e:	019b      	lsls	r3, r3, #6
    a750:	429a      	cmp	r2, r3
    a752:	d901      	bls.n	a758 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a754:	2340      	movs	r3, #64	; 0x40
    a756:	e03d      	b.n	a7d4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    a758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a75a:	61bb      	str	r3, [r7, #24]
    a75c:	2300      	movs	r3, #0
    a75e:	61fb      	str	r3, [r7, #28]
    a760:	69b9      	ldr	r1, [r7, #24]
    a762:	69fa      	ldr	r2, [r7, #28]
    a764:	000b      	movs	r3, r1
    a766:	0f5b      	lsrs	r3, r3, #29
    a768:	0010      	movs	r0, r2
    a76a:	00c0      	lsls	r0, r0, #3
    a76c:	63f8      	str	r0, [r7, #60]	; 0x3c
    a76e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    a770:	4318      	orrs	r0, r3
    a772:	63f8      	str	r0, [r7, #60]	; 0x3c
    a774:	000b      	movs	r3, r1
    a776:	00db      	lsls	r3, r3, #3
    a778:	63bb      	str	r3, [r7, #56]	; 0x38
    a77a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a77c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a77e:	001a      	movs	r2, r3
    a780:	0023      	movs	r3, r4
    a782:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    a784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    a786:	4c16      	ldr	r4, [pc, #88]	; (a7e0 <_sercom_get_async_baud_val+0x1bc>)
    a788:	47a0      	blx	r4
    a78a:	0003      	movs	r3, r0
    a78c:	000c      	movs	r4, r1
    a78e:	65bb      	str	r3, [r7, #88]	; 0x58
    a790:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    a792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a794:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a796:	b2d9      	uxtb	r1, r3
    a798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a79a:	b2db      	uxtb	r3, r3
    a79c:	00db      	lsls	r3, r3, #3
    a79e:	b2da      	uxtb	r2, r3
    a7a0:	2317      	movs	r3, #23
    a7a2:	2040      	movs	r0, #64	; 0x40
    a7a4:	4684      	mov	ip, r0
    a7a6:	44bc      	add	ip, r7
    a7a8:	4463      	add	r3, ip
    a7aa:	1a8a      	subs	r2, r1, r2
    a7ac:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    a7ae:	2317      	movs	r3, #23
    a7b0:	2240      	movs	r2, #64	; 0x40
    a7b2:	4694      	mov	ip, r2
    a7b4:	44bc      	add	ip, r7
    a7b6:	4463      	add	r3, ip
    a7b8:	781b      	ldrb	r3, [r3, #0]
    a7ba:	035b      	lsls	r3, r3, #13
    a7bc:	001a      	movs	r2, r3
    a7be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a7c0:	4313      	orrs	r3, r2
    a7c2:	67bb      	str	r3, [r7, #120]	; 0x78
    a7c4:	2300      	movs	r3, #0
    a7c6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    a7c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    a7ca:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    a7cc:	b29a      	uxth	r2, r3
    a7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a7d0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    a7d2:	2300      	movs	r3, #0
}
    a7d4:	0018      	movs	r0, r3
    a7d6:	46bd      	mov	sp, r7
    a7d8:	b021      	add	sp, #132	; 0x84
    a7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7dc:	00010b75 	.word	0x00010b75
    a7e0:	0000a4c7 	.word	0x0000a4c7

0000a7e4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    a7e4:	b580      	push	{r7, lr}
    a7e6:	b084      	sub	sp, #16
    a7e8:	af00      	add	r7, sp, #0
    a7ea:	0002      	movs	r2, r0
    a7ec:	1dfb      	adds	r3, r7, #7
    a7ee:	701a      	strb	r2, [r3, #0]
    a7f0:	1dbb      	adds	r3, r7, #6
    a7f2:	1c0a      	adds	r2, r1, #0
    a7f4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    a7f6:	4b1a      	ldr	r3, [pc, #104]	; (a860 <sercom_set_gclk_generator+0x7c>)
    a7f8:	781b      	ldrb	r3, [r3, #0]
    a7fa:	2201      	movs	r2, #1
    a7fc:	4053      	eors	r3, r2
    a7fe:	b2db      	uxtb	r3, r3
    a800:	2b00      	cmp	r3, #0
    a802:	d103      	bne.n	a80c <sercom_set_gclk_generator+0x28>
    a804:	1dbb      	adds	r3, r7, #6
    a806:	781b      	ldrb	r3, [r3, #0]
    a808:	2b00      	cmp	r3, #0
    a80a:	d01b      	beq.n	a844 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a80c:	230c      	movs	r3, #12
    a80e:	18fb      	adds	r3, r7, r3
    a810:	0018      	movs	r0, r3
    a812:	4b14      	ldr	r3, [pc, #80]	; (a864 <sercom_set_gclk_generator+0x80>)
    a814:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    a816:	230c      	movs	r3, #12
    a818:	18fb      	adds	r3, r7, r3
    a81a:	1dfa      	adds	r2, r7, #7
    a81c:	7812      	ldrb	r2, [r2, #0]
    a81e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    a820:	230c      	movs	r3, #12
    a822:	18fb      	adds	r3, r7, r3
    a824:	0019      	movs	r1, r3
    a826:	2013      	movs	r0, #19
    a828:	4b0f      	ldr	r3, [pc, #60]	; (a868 <sercom_set_gclk_generator+0x84>)
    a82a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    a82c:	2013      	movs	r0, #19
    a82e:	4b0f      	ldr	r3, [pc, #60]	; (a86c <sercom_set_gclk_generator+0x88>)
    a830:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    a832:	4b0b      	ldr	r3, [pc, #44]	; (a860 <sercom_set_gclk_generator+0x7c>)
    a834:	1dfa      	adds	r2, r7, #7
    a836:	7812      	ldrb	r2, [r2, #0]
    a838:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    a83a:	4b09      	ldr	r3, [pc, #36]	; (a860 <sercom_set_gclk_generator+0x7c>)
    a83c:	2201      	movs	r2, #1
    a83e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    a840:	2300      	movs	r3, #0
    a842:	e008      	b.n	a856 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    a844:	4b06      	ldr	r3, [pc, #24]	; (a860 <sercom_set_gclk_generator+0x7c>)
    a846:	785b      	ldrb	r3, [r3, #1]
    a848:	1dfa      	adds	r2, r7, #7
    a84a:	7812      	ldrb	r2, [r2, #0]
    a84c:	429a      	cmp	r2, r3
    a84e:	d101      	bne.n	a854 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    a850:	2300      	movs	r3, #0
    a852:	e000      	b.n	a856 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    a854:	231d      	movs	r3, #29
}
    a856:	0018      	movs	r0, r3
    a858:	46bd      	mov	sp, r7
    a85a:	b004      	add	sp, #16
    a85c:	bd80      	pop	{r7, pc}
    a85e:	46c0      	nop			; (mov r8, r8)
    a860:	2000022c 	.word	0x2000022c
    a864:	0000a4b1 	.word	0x0000a4b1
    a868:	0000c659 	.word	0x0000c659
    a86c:	0000c69d 	.word	0x0000c69d

0000a870 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    a870:	b580      	push	{r7, lr}
    a872:	b082      	sub	sp, #8
    a874:	af00      	add	r7, sp, #0
    a876:	6078      	str	r0, [r7, #4]
    a878:	000a      	movs	r2, r1
    a87a:	1cfb      	adds	r3, r7, #3
    a87c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    a87e:	687b      	ldr	r3, [r7, #4]
    a880:	4a4d      	ldr	r2, [pc, #308]	; (a9b8 <_sercom_get_default_pad+0x148>)
    a882:	4293      	cmp	r3, r2
    a884:	d03f      	beq.n	a906 <_sercom_get_default_pad+0x96>
    a886:	4a4c      	ldr	r2, [pc, #304]	; (a9b8 <_sercom_get_default_pad+0x148>)
    a888:	4293      	cmp	r3, r2
    a88a:	d806      	bhi.n	a89a <_sercom_get_default_pad+0x2a>
    a88c:	4a4b      	ldr	r2, [pc, #300]	; (a9bc <_sercom_get_default_pad+0x14c>)
    a88e:	4293      	cmp	r3, r2
    a890:	d00f      	beq.n	a8b2 <_sercom_get_default_pad+0x42>
    a892:	4a4b      	ldr	r2, [pc, #300]	; (a9c0 <_sercom_get_default_pad+0x150>)
    a894:	4293      	cmp	r3, r2
    a896:	d021      	beq.n	a8dc <_sercom_get_default_pad+0x6c>
    a898:	e089      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a89a:	4a4a      	ldr	r2, [pc, #296]	; (a9c4 <_sercom_get_default_pad+0x154>)
    a89c:	4293      	cmp	r3, r2
    a89e:	d100      	bne.n	a8a2 <_sercom_get_default_pad+0x32>
    a8a0:	e05b      	b.n	a95a <_sercom_get_default_pad+0xea>
    a8a2:	4a49      	ldr	r2, [pc, #292]	; (a9c8 <_sercom_get_default_pad+0x158>)
    a8a4:	4293      	cmp	r3, r2
    a8a6:	d100      	bne.n	a8aa <_sercom_get_default_pad+0x3a>
    a8a8:	e06c      	b.n	a984 <_sercom_get_default_pad+0x114>
    a8aa:	4a48      	ldr	r2, [pc, #288]	; (a9cc <_sercom_get_default_pad+0x15c>)
    a8ac:	4293      	cmp	r3, r2
    a8ae:	d03f      	beq.n	a930 <_sercom_get_default_pad+0xc0>
    a8b0:	e07d      	b.n	a9ae <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a8b2:	1cfb      	adds	r3, r7, #3
    a8b4:	781b      	ldrb	r3, [r3, #0]
    a8b6:	2b01      	cmp	r3, #1
    a8b8:	d00a      	beq.n	a8d0 <_sercom_get_default_pad+0x60>
    a8ba:	dc02      	bgt.n	a8c2 <_sercom_get_default_pad+0x52>
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d005      	beq.n	a8cc <_sercom_get_default_pad+0x5c>
    a8c0:	e075      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a8c2:	2b02      	cmp	r3, #2
    a8c4:	d006      	beq.n	a8d4 <_sercom_get_default_pad+0x64>
    a8c6:	2b03      	cmp	r3, #3
    a8c8:	d006      	beq.n	a8d8 <_sercom_get_default_pad+0x68>
    a8ca:	e070      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a8cc:	4b40      	ldr	r3, [pc, #256]	; (a9d0 <_sercom_get_default_pad+0x160>)
    a8ce:	e06f      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a8d0:	4b40      	ldr	r3, [pc, #256]	; (a9d4 <_sercom_get_default_pad+0x164>)
    a8d2:	e06d      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a8d4:	4b40      	ldr	r3, [pc, #256]	; (a9d8 <_sercom_get_default_pad+0x168>)
    a8d6:	e06b      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a8d8:	4b40      	ldr	r3, [pc, #256]	; (a9dc <_sercom_get_default_pad+0x16c>)
    a8da:	e069      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a8dc:	1cfb      	adds	r3, r7, #3
    a8de:	781b      	ldrb	r3, [r3, #0]
    a8e0:	2b01      	cmp	r3, #1
    a8e2:	d00a      	beq.n	a8fa <_sercom_get_default_pad+0x8a>
    a8e4:	dc02      	bgt.n	a8ec <_sercom_get_default_pad+0x7c>
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d005      	beq.n	a8f6 <_sercom_get_default_pad+0x86>
    a8ea:	e060      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a8ec:	2b02      	cmp	r3, #2
    a8ee:	d006      	beq.n	a8fe <_sercom_get_default_pad+0x8e>
    a8f0:	2b03      	cmp	r3, #3
    a8f2:	d006      	beq.n	a902 <_sercom_get_default_pad+0x92>
    a8f4:	e05b      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a8f6:	2303      	movs	r3, #3
    a8f8:	e05a      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a8fa:	4b39      	ldr	r3, [pc, #228]	; (a9e0 <_sercom_get_default_pad+0x170>)
    a8fc:	e058      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a8fe:	4b39      	ldr	r3, [pc, #228]	; (a9e4 <_sercom_get_default_pad+0x174>)
    a900:	e056      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a902:	4b39      	ldr	r3, [pc, #228]	; (a9e8 <_sercom_get_default_pad+0x178>)
    a904:	e054      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a906:	1cfb      	adds	r3, r7, #3
    a908:	781b      	ldrb	r3, [r3, #0]
    a90a:	2b01      	cmp	r3, #1
    a90c:	d00a      	beq.n	a924 <_sercom_get_default_pad+0xb4>
    a90e:	dc02      	bgt.n	a916 <_sercom_get_default_pad+0xa6>
    a910:	2b00      	cmp	r3, #0
    a912:	d005      	beq.n	a920 <_sercom_get_default_pad+0xb0>
    a914:	e04b      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a916:	2b02      	cmp	r3, #2
    a918:	d006      	beq.n	a928 <_sercom_get_default_pad+0xb8>
    a91a:	2b03      	cmp	r3, #3
    a91c:	d006      	beq.n	a92c <_sercom_get_default_pad+0xbc>
    a91e:	e046      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a920:	4b32      	ldr	r3, [pc, #200]	; (a9ec <_sercom_get_default_pad+0x17c>)
    a922:	e045      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a924:	4b32      	ldr	r3, [pc, #200]	; (a9f0 <_sercom_get_default_pad+0x180>)
    a926:	e043      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a928:	4b32      	ldr	r3, [pc, #200]	; (a9f4 <_sercom_get_default_pad+0x184>)
    a92a:	e041      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a92c:	4b32      	ldr	r3, [pc, #200]	; (a9f8 <_sercom_get_default_pad+0x188>)
    a92e:	e03f      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a930:	1cfb      	adds	r3, r7, #3
    a932:	781b      	ldrb	r3, [r3, #0]
    a934:	2b01      	cmp	r3, #1
    a936:	d00a      	beq.n	a94e <_sercom_get_default_pad+0xde>
    a938:	dc02      	bgt.n	a940 <_sercom_get_default_pad+0xd0>
    a93a:	2b00      	cmp	r3, #0
    a93c:	d005      	beq.n	a94a <_sercom_get_default_pad+0xda>
    a93e:	e036      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a940:	2b02      	cmp	r3, #2
    a942:	d006      	beq.n	a952 <_sercom_get_default_pad+0xe2>
    a944:	2b03      	cmp	r3, #3
    a946:	d006      	beq.n	a956 <_sercom_get_default_pad+0xe6>
    a948:	e031      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a94a:	4b2c      	ldr	r3, [pc, #176]	; (a9fc <_sercom_get_default_pad+0x18c>)
    a94c:	e030      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a94e:	4b2c      	ldr	r3, [pc, #176]	; (aa00 <_sercom_get_default_pad+0x190>)
    a950:	e02e      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a952:	4b2c      	ldr	r3, [pc, #176]	; (aa04 <_sercom_get_default_pad+0x194>)
    a954:	e02c      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a956:	4b2c      	ldr	r3, [pc, #176]	; (aa08 <_sercom_get_default_pad+0x198>)
    a958:	e02a      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a95a:	1cfb      	adds	r3, r7, #3
    a95c:	781b      	ldrb	r3, [r3, #0]
    a95e:	2b01      	cmp	r3, #1
    a960:	d00a      	beq.n	a978 <_sercom_get_default_pad+0x108>
    a962:	dc02      	bgt.n	a96a <_sercom_get_default_pad+0xfa>
    a964:	2b00      	cmp	r3, #0
    a966:	d005      	beq.n	a974 <_sercom_get_default_pad+0x104>
    a968:	e021      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a96a:	2b02      	cmp	r3, #2
    a96c:	d006      	beq.n	a97c <_sercom_get_default_pad+0x10c>
    a96e:	2b03      	cmp	r3, #3
    a970:	d006      	beq.n	a980 <_sercom_get_default_pad+0x110>
    a972:	e01c      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a974:	4b25      	ldr	r3, [pc, #148]	; (aa0c <_sercom_get_default_pad+0x19c>)
    a976:	e01b      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a978:	4b25      	ldr	r3, [pc, #148]	; (aa10 <_sercom_get_default_pad+0x1a0>)
    a97a:	e019      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a97c:	4b25      	ldr	r3, [pc, #148]	; (aa14 <_sercom_get_default_pad+0x1a4>)
    a97e:	e017      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a980:	4b25      	ldr	r3, [pc, #148]	; (aa18 <_sercom_get_default_pad+0x1a8>)
    a982:	e015      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a984:	1cfb      	adds	r3, r7, #3
    a986:	781b      	ldrb	r3, [r3, #0]
    a988:	2b01      	cmp	r3, #1
    a98a:	d00a      	beq.n	a9a2 <_sercom_get_default_pad+0x132>
    a98c:	dc02      	bgt.n	a994 <_sercom_get_default_pad+0x124>
    a98e:	2b00      	cmp	r3, #0
    a990:	d005      	beq.n	a99e <_sercom_get_default_pad+0x12e>
    a992:	e00c      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a994:	2b02      	cmp	r3, #2
    a996:	d006      	beq.n	a9a6 <_sercom_get_default_pad+0x136>
    a998:	2b03      	cmp	r3, #3
    a99a:	d006      	beq.n	a9aa <_sercom_get_default_pad+0x13a>
    a99c:	e007      	b.n	a9ae <_sercom_get_default_pad+0x13e>
    a99e:	4b1f      	ldr	r3, [pc, #124]	; (aa1c <_sercom_get_default_pad+0x1ac>)
    a9a0:	e006      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a9a2:	4b1f      	ldr	r3, [pc, #124]	; (aa20 <_sercom_get_default_pad+0x1b0>)
    a9a4:	e004      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a9a6:	4b1f      	ldr	r3, [pc, #124]	; (aa24 <_sercom_get_default_pad+0x1b4>)
    a9a8:	e002      	b.n	a9b0 <_sercom_get_default_pad+0x140>
    a9aa:	4b1f      	ldr	r3, [pc, #124]	; (aa28 <_sercom_get_default_pad+0x1b8>)
    a9ac:	e000      	b.n	a9b0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    a9ae:	2300      	movs	r3, #0
}
    a9b0:	0018      	movs	r0, r3
    a9b2:	46bd      	mov	sp, r7
    a9b4:	b002      	add	sp, #8
    a9b6:	bd80      	pop	{r7, pc}
    a9b8:	42001000 	.word	0x42001000
    a9bc:	42000800 	.word	0x42000800
    a9c0:	42000c00 	.word	0x42000c00
    a9c4:	42001800 	.word	0x42001800
    a9c8:	42001c00 	.word	0x42001c00
    a9cc:	42001400 	.word	0x42001400
    a9d0:	00040003 	.word	0x00040003
    a9d4:	00050003 	.word	0x00050003
    a9d8:	00060003 	.word	0x00060003
    a9dc:	00070003 	.word	0x00070003
    a9e0:	00010003 	.word	0x00010003
    a9e4:	001e0003 	.word	0x001e0003
    a9e8:	001f0003 	.word	0x001f0003
    a9ec:	00080003 	.word	0x00080003
    a9f0:	00090003 	.word	0x00090003
    a9f4:	000a0003 	.word	0x000a0003
    a9f8:	000b0003 	.word	0x000b0003
    a9fc:	00100003 	.word	0x00100003
    aa00:	00110003 	.word	0x00110003
    aa04:	00120003 	.word	0x00120003
    aa08:	00130003 	.word	0x00130003
    aa0c:	000c0003 	.word	0x000c0003
    aa10:	000d0003 	.word	0x000d0003
    aa14:	000e0003 	.word	0x000e0003
    aa18:	000f0003 	.word	0x000f0003
    aa1c:	00160003 	.word	0x00160003
    aa20:	00170003 	.word	0x00170003
    aa24:	00180003 	.word	0x00180003
    aa28:	00190003 	.word	0x00190003

0000aa2c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    aa2c:	b590      	push	{r4, r7, lr}
    aa2e:	b08b      	sub	sp, #44	; 0x2c
    aa30:	af00      	add	r7, sp, #0
    aa32:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    aa34:	230c      	movs	r3, #12
    aa36:	18fb      	adds	r3, r7, r3
    aa38:	4a0f      	ldr	r2, [pc, #60]	; (aa78 <_sercom_get_sercom_inst_index+0x4c>)
    aa3a:	ca13      	ldmia	r2!, {r0, r1, r4}
    aa3c:	c313      	stmia	r3!, {r0, r1, r4}
    aa3e:	ca13      	ldmia	r2!, {r0, r1, r4}
    aa40:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    aa42:	2300      	movs	r3, #0
    aa44:	627b      	str	r3, [r7, #36]	; 0x24
    aa46:	e00e      	b.n	aa66 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    aa48:	230c      	movs	r3, #12
    aa4a:	18fb      	adds	r3, r7, r3
    aa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    aa4e:	0092      	lsls	r2, r2, #2
    aa50:	58d3      	ldr	r3, [r2, r3]
    aa52:	001a      	movs	r2, r3
    aa54:	687b      	ldr	r3, [r7, #4]
    aa56:	429a      	cmp	r2, r3
    aa58:	d102      	bne.n	aa60 <_sercom_get_sercom_inst_index+0x34>
			return i;
    aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aa5c:	b2db      	uxtb	r3, r3
    aa5e:	e006      	b.n	aa6e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aa62:	3301      	adds	r3, #1
    aa64:	627b      	str	r3, [r7, #36]	; 0x24
    aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aa68:	2b05      	cmp	r3, #5
    aa6a:	d9ed      	bls.n	aa48 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    aa6c:	2300      	movs	r3, #0
}
    aa6e:	0018      	movs	r0, r3
    aa70:	46bd      	mov	sp, r7
    aa72:	b00b      	add	sp, #44	; 0x2c
    aa74:	bd90      	pop	{r4, r7, pc}
    aa76:	46c0      	nop			; (mov r8, r8)
    aa78:	00013ee8 	.word	0x00013ee8

0000aa7c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    aa7c:	b580      	push	{r7, lr}
    aa7e:	b086      	sub	sp, #24
    aa80:	af00      	add	r7, sp, #0
    aa82:	60f8      	str	r0, [r7, #12]
    aa84:	60b9      	str	r1, [r7, #8]
    aa86:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    aa88:	2300      	movs	r3, #0
    aa8a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    aa8c:	68fb      	ldr	r3, [r7, #12]
    aa8e:	2b00      	cmp	r3, #0
    aa90:	d012      	beq.n	aab8 <_read+0x3c>
		return -1;
    aa92:	2301      	movs	r3, #1
    aa94:	425b      	negs	r3, r3
    aa96:	e013      	b.n	aac0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    aa98:	4b0b      	ldr	r3, [pc, #44]	; (aac8 <_read+0x4c>)
    aa9a:	681a      	ldr	r2, [r3, #0]
    aa9c:	4b0b      	ldr	r3, [pc, #44]	; (aacc <_read+0x50>)
    aa9e:	681b      	ldr	r3, [r3, #0]
    aaa0:	68b9      	ldr	r1, [r7, #8]
    aaa2:	0018      	movs	r0, r3
    aaa4:	4790      	blx	r2
		ptr++;
    aaa6:	68bb      	ldr	r3, [r7, #8]
    aaa8:	3301      	adds	r3, #1
    aaaa:	60bb      	str	r3, [r7, #8]
		nChars++;
    aaac:	697b      	ldr	r3, [r7, #20]
    aaae:	3301      	adds	r3, #1
    aab0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    aab2:	687b      	ldr	r3, [r7, #4]
    aab4:	3b01      	subs	r3, #1
    aab6:	607b      	str	r3, [r7, #4]
    aab8:	687b      	ldr	r3, [r7, #4]
    aaba:	2b00      	cmp	r3, #0
    aabc:	dcec      	bgt.n	aa98 <_read+0x1c>
	}
	return nChars;
    aabe:	697b      	ldr	r3, [r7, #20]
}
    aac0:	0018      	movs	r0, r3
    aac2:	46bd      	mov	sp, r7
    aac4:	b006      	add	sp, #24
    aac6:	bd80      	pop	{r7, pc}
    aac8:	20000aa0 	.word	0x20000aa0
    aacc:	20000aa8 	.word	0x20000aa8

0000aad0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    aad0:	b580      	push	{r7, lr}
    aad2:	b086      	sub	sp, #24
    aad4:	af00      	add	r7, sp, #0
    aad6:	60f8      	str	r0, [r7, #12]
    aad8:	60b9      	str	r1, [r7, #8]
    aada:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    aadc:	2300      	movs	r3, #0
    aade:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    aae0:	68fb      	ldr	r3, [r7, #12]
    aae2:	2b01      	cmp	r3, #1
    aae4:	d01d      	beq.n	ab22 <_write+0x52>
    aae6:	68fb      	ldr	r3, [r7, #12]
    aae8:	2b02      	cmp	r3, #2
    aaea:	d01a      	beq.n	ab22 <_write+0x52>
    aaec:	68fb      	ldr	r3, [r7, #12]
    aaee:	2b03      	cmp	r3, #3
    aaf0:	d017      	beq.n	ab22 <_write+0x52>
		return -1;
    aaf2:	2301      	movs	r3, #1
    aaf4:	425b      	negs	r3, r3
    aaf6:	e018      	b.n	ab2a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    aaf8:	4b0e      	ldr	r3, [pc, #56]	; (ab34 <_write+0x64>)
    aafa:	681a      	ldr	r2, [r3, #0]
    aafc:	4b0e      	ldr	r3, [pc, #56]	; (ab38 <_write+0x68>)
    aafe:	6818      	ldr	r0, [r3, #0]
    ab00:	68bb      	ldr	r3, [r7, #8]
    ab02:	1c59      	adds	r1, r3, #1
    ab04:	60b9      	str	r1, [r7, #8]
    ab06:	781b      	ldrb	r3, [r3, #0]
    ab08:	0019      	movs	r1, r3
    ab0a:	4790      	blx	r2
    ab0c:	1e03      	subs	r3, r0, #0
    ab0e:	da02      	bge.n	ab16 <_write+0x46>
			return -1;
    ab10:	2301      	movs	r3, #1
    ab12:	425b      	negs	r3, r3
    ab14:	e009      	b.n	ab2a <_write+0x5a>
		}
		++nChars;
    ab16:	697b      	ldr	r3, [r7, #20]
    ab18:	3301      	adds	r3, #1
    ab1a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    ab1c:	687b      	ldr	r3, [r7, #4]
    ab1e:	3b01      	subs	r3, #1
    ab20:	607b      	str	r3, [r7, #4]
    ab22:	687b      	ldr	r3, [r7, #4]
    ab24:	2b00      	cmp	r3, #0
    ab26:	d1e7      	bne.n	aaf8 <_write+0x28>
	}
	return nChars;
    ab28:	697b      	ldr	r3, [r7, #20]
}
    ab2a:	0018      	movs	r0, r3
    ab2c:	46bd      	mov	sp, r7
    ab2e:	b006      	add	sp, #24
    ab30:	bd80      	pop	{r7, pc}
    ab32:	46c0      	nop			; (mov r8, r8)
    ab34:	20000aa4 	.word	0x20000aa4
    ab38:	20000aa8 	.word	0x20000aa8

0000ab3c <system_gclk_chan_get_config_defaults>:
{
    ab3c:	b580      	push	{r7, lr}
    ab3e:	b082      	sub	sp, #8
    ab40:	af00      	add	r7, sp, #0
    ab42:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    ab44:	687b      	ldr	r3, [r7, #4]
    ab46:	2200      	movs	r2, #0
    ab48:	701a      	strb	r2, [r3, #0]
}
    ab4a:	46c0      	nop			; (mov r8, r8)
    ab4c:	46bd      	mov	sp, r7
    ab4e:	b002      	add	sp, #8
    ab50:	bd80      	pop	{r7, pc}
	...

0000ab54 <system_apb_clock_set_mask>:
{
    ab54:	b580      	push	{r7, lr}
    ab56:	b082      	sub	sp, #8
    ab58:	af00      	add	r7, sp, #0
    ab5a:	0002      	movs	r2, r0
    ab5c:	6039      	str	r1, [r7, #0]
    ab5e:	1dfb      	adds	r3, r7, #7
    ab60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ab62:	1dfb      	adds	r3, r7, #7
    ab64:	781b      	ldrb	r3, [r3, #0]
    ab66:	2b01      	cmp	r3, #1
    ab68:	d00a      	beq.n	ab80 <system_apb_clock_set_mask+0x2c>
    ab6a:	2b02      	cmp	r3, #2
    ab6c:	d00f      	beq.n	ab8e <system_apb_clock_set_mask+0x3a>
    ab6e:	2b00      	cmp	r3, #0
    ab70:	d114      	bne.n	ab9c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ab72:	4b0e      	ldr	r3, [pc, #56]	; (abac <system_apb_clock_set_mask+0x58>)
    ab74:	4a0d      	ldr	r2, [pc, #52]	; (abac <system_apb_clock_set_mask+0x58>)
    ab76:	6991      	ldr	r1, [r2, #24]
    ab78:	683a      	ldr	r2, [r7, #0]
    ab7a:	430a      	orrs	r2, r1
    ab7c:	619a      	str	r2, [r3, #24]
			break;
    ab7e:	e00f      	b.n	aba0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ab80:	4b0a      	ldr	r3, [pc, #40]	; (abac <system_apb_clock_set_mask+0x58>)
    ab82:	4a0a      	ldr	r2, [pc, #40]	; (abac <system_apb_clock_set_mask+0x58>)
    ab84:	69d1      	ldr	r1, [r2, #28]
    ab86:	683a      	ldr	r2, [r7, #0]
    ab88:	430a      	orrs	r2, r1
    ab8a:	61da      	str	r2, [r3, #28]
			break;
    ab8c:	e008      	b.n	aba0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ab8e:	4b07      	ldr	r3, [pc, #28]	; (abac <system_apb_clock_set_mask+0x58>)
    ab90:	4a06      	ldr	r2, [pc, #24]	; (abac <system_apb_clock_set_mask+0x58>)
    ab92:	6a11      	ldr	r1, [r2, #32]
    ab94:	683a      	ldr	r2, [r7, #0]
    ab96:	430a      	orrs	r2, r1
    ab98:	621a      	str	r2, [r3, #32]
			break;
    ab9a:	e001      	b.n	aba0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ab9c:	2317      	movs	r3, #23
    ab9e:	e000      	b.n	aba2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    aba0:	2300      	movs	r3, #0
}
    aba2:	0018      	movs	r0, r3
    aba4:	46bd      	mov	sp, r7
    aba6:	b002      	add	sp, #8
    aba8:	bd80      	pop	{r7, pc}
    abaa:	46c0      	nop			; (mov r8, r8)
    abac:	40000400 	.word	0x40000400

0000abb0 <system_pinmux_get_config_defaults>:
{
    abb0:	b580      	push	{r7, lr}
    abb2:	b082      	sub	sp, #8
    abb4:	af00      	add	r7, sp, #0
    abb6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    abb8:	687b      	ldr	r3, [r7, #4]
    abba:	2280      	movs	r2, #128	; 0x80
    abbc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    abbe:	687b      	ldr	r3, [r7, #4]
    abc0:	2200      	movs	r2, #0
    abc2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	2201      	movs	r2, #1
    abc8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    abca:	687b      	ldr	r3, [r7, #4]
    abcc:	2200      	movs	r2, #0
    abce:	70da      	strb	r2, [r3, #3]
}
    abd0:	46c0      	nop			; (mov r8, r8)
    abd2:	46bd      	mov	sp, r7
    abd4:	b002      	add	sp, #8
    abd6:	bd80      	pop	{r7, pc}

0000abd8 <system_is_debugger_present>:
{
    abd8:	b580      	push	{r7, lr}
    abda:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    abdc:	4b05      	ldr	r3, [pc, #20]	; (abf4 <system_is_debugger_present+0x1c>)
    abde:	789b      	ldrb	r3, [r3, #2]
    abe0:	b2db      	uxtb	r3, r3
    abe2:	001a      	movs	r2, r3
    abe4:	2302      	movs	r3, #2
    abe6:	4013      	ands	r3, r2
    abe8:	1e5a      	subs	r2, r3, #1
    abea:	4193      	sbcs	r3, r2
    abec:	b2db      	uxtb	r3, r3
}
    abee:	0018      	movs	r0, r3
    abf0:	46bd      	mov	sp, r7
    abf2:	bd80      	pop	{r7, pc}
    abf4:	41002000 	.word	0x41002000

0000abf8 <usart_is_syncing>:
{
    abf8:	b580      	push	{r7, lr}
    abfa:	b084      	sub	sp, #16
    abfc:	af00      	add	r7, sp, #0
    abfe:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    ac00:	687b      	ldr	r3, [r7, #4]
    ac02:	681b      	ldr	r3, [r3, #0]
    ac04:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    ac06:	68fb      	ldr	r3, [r7, #12]
    ac08:	69db      	ldr	r3, [r3, #28]
    ac0a:	1e5a      	subs	r2, r3, #1
    ac0c:	4193      	sbcs	r3, r2
    ac0e:	b2db      	uxtb	r3, r3
}
    ac10:	0018      	movs	r0, r3
    ac12:	46bd      	mov	sp, r7
    ac14:	b004      	add	sp, #16
    ac16:	bd80      	pop	{r7, pc}

0000ac18 <_usart_wait_for_sync>:
{
    ac18:	b580      	push	{r7, lr}
    ac1a:	b082      	sub	sp, #8
    ac1c:	af00      	add	r7, sp, #0
    ac1e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    ac20:	46c0      	nop			; (mov r8, r8)
    ac22:	687b      	ldr	r3, [r7, #4]
    ac24:	0018      	movs	r0, r3
    ac26:	4b04      	ldr	r3, [pc, #16]	; (ac38 <_usart_wait_for_sync+0x20>)
    ac28:	4798      	blx	r3
    ac2a:	1e03      	subs	r3, r0, #0
    ac2c:	d1f9      	bne.n	ac22 <_usart_wait_for_sync+0xa>
}
    ac2e:	46c0      	nop			; (mov r8, r8)
    ac30:	46bd      	mov	sp, r7
    ac32:	b002      	add	sp, #8
    ac34:	bd80      	pop	{r7, pc}
    ac36:	46c0      	nop			; (mov r8, r8)
    ac38:	0000abf9 	.word	0x0000abf9

0000ac3c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    ac3c:	b5b0      	push	{r4, r5, r7, lr}
    ac3e:	b08c      	sub	sp, #48	; 0x30
    ac40:	af02      	add	r7, sp, #8
    ac42:	6078      	str	r0, [r7, #4]
    ac44:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	681b      	ldr	r3, [r3, #0]
    ac4a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ac4c:	687b      	ldr	r3, [r7, #4]
    ac4e:	681b      	ldr	r3, [r3, #0]
    ac50:	0018      	movs	r0, r3
    ac52:	4bab      	ldr	r3, [pc, #684]	; (af00 <_usart_set_config+0x2c4>)
    ac54:	4798      	blx	r3
    ac56:	0003      	movs	r3, r0
    ac58:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ac5a:	697b      	ldr	r3, [r7, #20]
    ac5c:	3314      	adds	r3, #20
    ac5e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    ac60:	2300      	movs	r3, #0
    ac62:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    ac64:	2300      	movs	r3, #0
    ac66:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    ac68:	230a      	movs	r3, #10
    ac6a:	18fb      	adds	r3, r7, r3
    ac6c:	2200      	movs	r2, #0
    ac6e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    ac70:	231f      	movs	r3, #31
    ac72:	18fb      	adds	r3, r7, r3
    ac74:	2200      	movs	r2, #0
    ac76:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    ac78:	231e      	movs	r3, #30
    ac7a:	18fb      	adds	r3, r7, r3
    ac7c:	2210      	movs	r2, #16
    ac7e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    ac80:	683b      	ldr	r3, [r7, #0]
    ac82:	8a1b      	ldrh	r3, [r3, #16]
    ac84:	2280      	movs	r2, #128	; 0x80
    ac86:	01d2      	lsls	r2, r2, #7
    ac88:	4293      	cmp	r3, r2
    ac8a:	d01c      	beq.n	acc6 <_usart_set_config+0x8a>
    ac8c:	2280      	movs	r2, #128	; 0x80
    ac8e:	01d2      	lsls	r2, r2, #7
    ac90:	4293      	cmp	r3, r2
    ac92:	dc06      	bgt.n	aca2 <_usart_set_config+0x66>
    ac94:	2b00      	cmp	r3, #0
    ac96:	d00d      	beq.n	acb4 <_usart_set_config+0x78>
    ac98:	2280      	movs	r2, #128	; 0x80
    ac9a:	0192      	lsls	r2, r2, #6
    ac9c:	4293      	cmp	r3, r2
    ac9e:	d024      	beq.n	acea <_usart_set_config+0xae>
    aca0:	e035      	b.n	ad0e <_usart_set_config+0xd2>
    aca2:	22c0      	movs	r2, #192	; 0xc0
    aca4:	01d2      	lsls	r2, r2, #7
    aca6:	4293      	cmp	r3, r2
    aca8:	d028      	beq.n	acfc <_usart_set_config+0xc0>
    acaa:	2280      	movs	r2, #128	; 0x80
    acac:	0212      	lsls	r2, r2, #8
    acae:	4293      	cmp	r3, r2
    acb0:	d012      	beq.n	acd8 <_usart_set_config+0x9c>
    acb2:	e02c      	b.n	ad0e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    acb4:	231f      	movs	r3, #31
    acb6:	18fb      	adds	r3, r7, r3
    acb8:	2200      	movs	r2, #0
    acba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    acbc:	231e      	movs	r3, #30
    acbe:	18fb      	adds	r3, r7, r3
    acc0:	2210      	movs	r2, #16
    acc2:	701a      	strb	r2, [r3, #0]
			break;
    acc4:	e023      	b.n	ad0e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    acc6:	231f      	movs	r3, #31
    acc8:	18fb      	adds	r3, r7, r3
    acca:	2200      	movs	r2, #0
    accc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    acce:	231e      	movs	r3, #30
    acd0:	18fb      	adds	r3, r7, r3
    acd2:	2208      	movs	r2, #8
    acd4:	701a      	strb	r2, [r3, #0]
			break;
    acd6:	e01a      	b.n	ad0e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    acd8:	231f      	movs	r3, #31
    acda:	18fb      	adds	r3, r7, r3
    acdc:	2200      	movs	r2, #0
    acde:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    ace0:	231e      	movs	r3, #30
    ace2:	18fb      	adds	r3, r7, r3
    ace4:	2203      	movs	r2, #3
    ace6:	701a      	strb	r2, [r3, #0]
			break;
    ace8:	e011      	b.n	ad0e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    acea:	231f      	movs	r3, #31
    acec:	18fb      	adds	r3, r7, r3
    acee:	2201      	movs	r2, #1
    acf0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    acf2:	231e      	movs	r3, #30
    acf4:	18fb      	adds	r3, r7, r3
    acf6:	2210      	movs	r2, #16
    acf8:	701a      	strb	r2, [r3, #0]
			break;
    acfa:	e008      	b.n	ad0e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    acfc:	231f      	movs	r3, #31
    acfe:	18fb      	adds	r3, r7, r3
    ad00:	2201      	movs	r2, #1
    ad02:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    ad04:	231e      	movs	r3, #30
    ad06:	18fb      	adds	r3, r7, r3
    ad08:	2208      	movs	r2, #8
    ad0a:	701a      	strb	r2, [r3, #0]
			break;
    ad0c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    ad0e:	683b      	ldr	r3, [r7, #0]
    ad10:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    ad12:	683b      	ldr	r3, [r7, #0]
    ad14:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    ad16:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    ad18:	683b      	ldr	r3, [r7, #0]
    ad1a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    ad1c:	4313      	orrs	r3, r2
		config->sample_rate |
    ad1e:	683a      	ldr	r2, [r7, #0]
    ad20:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    ad22:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    ad24:	683a      	ldr	r2, [r7, #0]
    ad26:	7e12      	ldrb	r2, [r2, #24]
    ad28:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    ad2a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    ad2c:	683a      	ldr	r2, [r7, #0]
    ad2e:	2126      	movs	r1, #38	; 0x26
    ad30:	5c52      	ldrb	r2, [r2, r1]
    ad32:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    ad34:	4313      	orrs	r3, r2
    ad36:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    ad38:	231d      	movs	r3, #29
    ad3a:	18fb      	adds	r3, r7, r3
    ad3c:	2200      	movs	r2, #0
    ad3e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    ad40:	683b      	ldr	r3, [r7, #0]
    ad42:	685b      	ldr	r3, [r3, #4]
    ad44:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    ad46:	68fb      	ldr	r3, [r7, #12]
    ad48:	2b00      	cmp	r3, #0
    ad4a:	d01e      	beq.n	ad8a <_usart_set_config+0x14e>
    ad4c:	2280      	movs	r2, #128	; 0x80
    ad4e:	0552      	lsls	r2, r2, #21
    ad50:	4293      	cmp	r3, r2
    ad52:	d14f      	bne.n	adf4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    ad54:	683b      	ldr	r3, [r7, #0]
    ad56:	2227      	movs	r2, #39	; 0x27
    ad58:	5c9b      	ldrb	r3, [r3, r2]
    ad5a:	2201      	movs	r2, #1
    ad5c:	4053      	eors	r3, r2
    ad5e:	b2db      	uxtb	r3, r3
    ad60:	2b00      	cmp	r3, #0
    ad62:	d046      	beq.n	adf2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    ad64:	683b      	ldr	r3, [r7, #0]
    ad66:	6a1d      	ldr	r5, [r3, #32]
    ad68:	693b      	ldr	r3, [r7, #16]
    ad6a:	b2db      	uxtb	r3, r3
    ad6c:	0018      	movs	r0, r3
    ad6e:	4b65      	ldr	r3, [pc, #404]	; (af04 <_usart_set_config+0x2c8>)
    ad70:	4798      	blx	r3
    ad72:	0001      	movs	r1, r0
    ad74:	231d      	movs	r3, #29
    ad76:	18fc      	adds	r4, r7, r3
    ad78:	230a      	movs	r3, #10
    ad7a:	18fb      	adds	r3, r7, r3
    ad7c:	001a      	movs	r2, r3
    ad7e:	0028      	movs	r0, r5
    ad80:	4b61      	ldr	r3, [pc, #388]	; (af08 <_usart_set_config+0x2cc>)
    ad82:	4798      	blx	r3
    ad84:	0003      	movs	r3, r0
    ad86:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    ad88:	e033      	b.n	adf2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    ad8a:	683b      	ldr	r3, [r7, #0]
    ad8c:	2227      	movs	r2, #39	; 0x27
    ad8e:	5c9b      	ldrb	r3, [r3, r2]
    ad90:	2b00      	cmp	r3, #0
    ad92:	d014      	beq.n	adbe <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    ad94:	683b      	ldr	r3, [r7, #0]
    ad96:	6a18      	ldr	r0, [r3, #32]
    ad98:	683b      	ldr	r3, [r7, #0]
    ad9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    ad9c:	231d      	movs	r3, #29
    ad9e:	18fc      	adds	r4, r7, r3
    ada0:	231f      	movs	r3, #31
    ada2:	18fb      	adds	r3, r7, r3
    ada4:	781d      	ldrb	r5, [r3, #0]
    ada6:	230a      	movs	r3, #10
    ada8:	18fa      	adds	r2, r7, r3
    adaa:	231e      	movs	r3, #30
    adac:	18fb      	adds	r3, r7, r3
    adae:	781b      	ldrb	r3, [r3, #0]
    adb0:	9300      	str	r3, [sp, #0]
    adb2:	002b      	movs	r3, r5
    adb4:	4d55      	ldr	r5, [pc, #340]	; (af0c <_usart_set_config+0x2d0>)
    adb6:	47a8      	blx	r5
    adb8:	0003      	movs	r3, r0
    adba:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    adbc:	e01a      	b.n	adf4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    adbe:	683b      	ldr	r3, [r7, #0]
    adc0:	6a1d      	ldr	r5, [r3, #32]
    adc2:	693b      	ldr	r3, [r7, #16]
    adc4:	b2db      	uxtb	r3, r3
    adc6:	0018      	movs	r0, r3
    adc8:	4b4e      	ldr	r3, [pc, #312]	; (af04 <_usart_set_config+0x2c8>)
    adca:	4798      	blx	r3
				status_code =
    adcc:	231d      	movs	r3, #29
    adce:	18fc      	adds	r4, r7, r3
    add0:	231f      	movs	r3, #31
    add2:	18fb      	adds	r3, r7, r3
    add4:	7819      	ldrb	r1, [r3, #0]
    add6:	230a      	movs	r3, #10
    add8:	18fa      	adds	r2, r7, r3
    adda:	231e      	movs	r3, #30
    addc:	18fb      	adds	r3, r7, r3
    adde:	781b      	ldrb	r3, [r3, #0]
    ade0:	9300      	str	r3, [sp, #0]
    ade2:	000b      	movs	r3, r1
    ade4:	0001      	movs	r1, r0
    ade6:	0028      	movs	r0, r5
    ade8:	4d48      	ldr	r5, [pc, #288]	; (af0c <_usart_set_config+0x2d0>)
    adea:	47a8      	blx	r5
    adec:	0003      	movs	r3, r0
    adee:	7023      	strb	r3, [r4, #0]
			break;
    adf0:	e000      	b.n	adf4 <_usart_set_config+0x1b8>
			break;
    adf2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    adf4:	231d      	movs	r3, #29
    adf6:	18fb      	adds	r3, r7, r3
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d003      	beq.n	ae06 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    adfe:	231d      	movs	r3, #29
    ae00:	18fb      	adds	r3, r7, r3
    ae02:	781b      	ldrb	r3, [r3, #0]
    ae04:	e077      	b.n	aef6 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    ae06:	683b      	ldr	r3, [r7, #0]
    ae08:	7e5b      	ldrb	r3, [r3, #25]
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	d003      	beq.n	ae16 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    ae0e:	683b      	ldr	r3, [r7, #0]
    ae10:	7e9a      	ldrb	r2, [r3, #26]
    ae12:	69bb      	ldr	r3, [r7, #24]
    ae14:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ae16:	687b      	ldr	r3, [r7, #4]
    ae18:	0018      	movs	r0, r3
    ae1a:	4b3d      	ldr	r3, [pc, #244]	; (af10 <_usart_set_config+0x2d4>)
    ae1c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    ae1e:	230a      	movs	r3, #10
    ae20:	18fb      	adds	r3, r7, r3
    ae22:	881a      	ldrh	r2, [r3, #0]
    ae24:	69bb      	ldr	r3, [r7, #24]
    ae26:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    ae28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ae2a:	68fb      	ldr	r3, [r7, #12]
    ae2c:	4313      	orrs	r3, r2
    ae2e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    ae30:	683b      	ldr	r3, [r7, #0]
    ae32:	2227      	movs	r2, #39	; 0x27
    ae34:	5c9b      	ldrb	r3, [r3, r2]
    ae36:	2201      	movs	r2, #1
    ae38:	4053      	eors	r3, r2
    ae3a:	b2db      	uxtb	r3, r3
    ae3c:	2b00      	cmp	r3, #0
    ae3e:	d003      	beq.n	ae48 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae42:	2204      	movs	r2, #4
    ae44:	4313      	orrs	r3, r2
    ae46:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ae48:	683b      	ldr	r3, [r7, #0]
    ae4a:	7e5b      	ldrb	r3, [r3, #25]
    ae4c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ae4e:	683b      	ldr	r3, [r7, #0]
    ae50:	7f1b      	ldrb	r3, [r3, #28]
    ae52:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ae54:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ae56:	683b      	ldr	r3, [r7, #0]
    ae58:	7f5b      	ldrb	r3, [r3, #29]
    ae5a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ae5c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ae5e:	683b      	ldr	r3, [r7, #0]
    ae60:	2124      	movs	r1, #36	; 0x24
    ae62:	5c5b      	ldrb	r3, [r3, r1]
    ae64:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ae66:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    ae68:	683b      	ldr	r3, [r7, #0]
    ae6a:	2125      	movs	r1, #37	; 0x25
    ae6c:	5c5b      	ldrb	r3, [r3, r1]
    ae6e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ae70:	4313      	orrs	r3, r2
	ctrlb =  
    ae72:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    ae74:	683b      	ldr	r3, [r7, #0]
    ae76:	7a9b      	ldrb	r3, [r3, #10]
    ae78:	001a      	movs	r2, r3
    ae7a:	6a3b      	ldr	r3, [r7, #32]
    ae7c:	4313      	orrs	r3, r2
    ae7e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    ae80:	683b      	ldr	r3, [r7, #0]
    ae82:	7adb      	ldrb	r3, [r3, #11]
    ae84:	001a      	movs	r2, r3
    ae86:	6a3b      	ldr	r3, [r7, #32]
    ae88:	4313      	orrs	r3, r2
    ae8a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    ae8c:	683b      	ldr	r3, [r7, #0]
    ae8e:	891b      	ldrh	r3, [r3, #8]
    ae90:	2bff      	cmp	r3, #255	; 0xff
    ae92:	d00b      	beq.n	aeac <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae96:	2280      	movs	r2, #128	; 0x80
    ae98:	0452      	lsls	r2, r2, #17
    ae9a:	4313      	orrs	r3, r2
    ae9c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    ae9e:	683b      	ldr	r3, [r7, #0]
    aea0:	891b      	ldrh	r3, [r3, #8]
    aea2:	001a      	movs	r2, r3
    aea4:	6a3b      	ldr	r3, [r7, #32]
    aea6:	4313      	orrs	r3, r2
    aea8:	623b      	str	r3, [r7, #32]
    aeaa:	e008      	b.n	aebe <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    aeac:	683b      	ldr	r3, [r7, #0]
    aeae:	7edb      	ldrb	r3, [r3, #27]
    aeb0:	2b00      	cmp	r3, #0
    aeb2:	d004      	beq.n	aebe <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aeb6:	2280      	movs	r2, #128	; 0x80
    aeb8:	04d2      	lsls	r2, r2, #19
    aeba:	4313      	orrs	r3, r2
    aebc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    aebe:	683b      	ldr	r3, [r7, #0]
    aec0:	222c      	movs	r2, #44	; 0x2c
    aec2:	5c9b      	ldrb	r3, [r3, r2]
    aec4:	2b00      	cmp	r3, #0
    aec6:	d103      	bne.n	aed0 <_usart_set_config+0x294>
    aec8:	4b12      	ldr	r3, [pc, #72]	; (af14 <_usart_set_config+0x2d8>)
    aeca:	4798      	blx	r3
    aecc:	1e03      	subs	r3, r0, #0
    aece:	d003      	beq.n	aed8 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aed2:	2280      	movs	r2, #128	; 0x80
    aed4:	4313      	orrs	r3, r2
    aed6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    aed8:	687b      	ldr	r3, [r7, #4]
    aeda:	0018      	movs	r0, r3
    aedc:	4b0c      	ldr	r3, [pc, #48]	; (af10 <_usart_set_config+0x2d4>)
    aede:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    aee0:	69bb      	ldr	r3, [r7, #24]
    aee2:	6a3a      	ldr	r2, [r7, #32]
    aee4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    aee6:	687b      	ldr	r3, [r7, #4]
    aee8:	0018      	movs	r0, r3
    aeea:	4b09      	ldr	r3, [pc, #36]	; (af10 <_usart_set_config+0x2d4>)
    aeec:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    aeee:	69bb      	ldr	r3, [r7, #24]
    aef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    aef2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    aef4:	2300      	movs	r3, #0
}
    aef6:	0018      	movs	r0, r3
    aef8:	46bd      	mov	sp, r7
    aefa:	b00a      	add	sp, #40	; 0x28
    aefc:	bdb0      	pop	{r4, r5, r7, pc}
    aefe:	46c0      	nop			; (mov r8, r8)
    af00:	0000aa2d 	.word	0x0000aa2d
    af04:	0000c77d 	.word	0x0000c77d
    af08:	0000a5a7 	.word	0x0000a5a7
    af0c:	0000a625 	.word	0x0000a625
    af10:	0000ac19 	.word	0x0000ac19
    af14:	0000abd9 	.word	0x0000abd9

0000af18 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    af18:	b590      	push	{r4, r7, lr}
    af1a:	b093      	sub	sp, #76	; 0x4c
    af1c:	af00      	add	r7, sp, #0
    af1e:	60f8      	str	r0, [r7, #12]
    af20:	60b9      	str	r1, [r7, #8]
    af22:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    af24:	233b      	movs	r3, #59	; 0x3b
    af26:	18fb      	adds	r3, r7, r3
    af28:	2200      	movs	r2, #0
    af2a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    af2c:	68fb      	ldr	r3, [r7, #12]
    af2e:	68ba      	ldr	r2, [r7, #8]
    af30:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    af32:	68fb      	ldr	r3, [r7, #12]
    af34:	681b      	ldr	r3, [r3, #0]
    af36:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    af38:	68fb      	ldr	r3, [r7, #12]
    af3a:	681b      	ldr	r3, [r3, #0]
    af3c:	0018      	movs	r0, r3
    af3e:	4b86      	ldr	r3, [pc, #536]	; (b158 <usart_init+0x240>)
    af40:	4798      	blx	r3
    af42:	0003      	movs	r3, r0
    af44:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af48:	3302      	adds	r3, #2
    af4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    af4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af4e:	3314      	adds	r3, #20
    af50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    af52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    af54:	681b      	ldr	r3, [r3, #0]
    af56:	2201      	movs	r2, #1
    af58:	4013      	ands	r3, r2
    af5a:	d001      	beq.n	af60 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    af5c:	2305      	movs	r3, #5
    af5e:	e0f6      	b.n	b14e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    af60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    af62:	681b      	ldr	r3, [r3, #0]
    af64:	2202      	movs	r2, #2
    af66:	4013      	ands	r3, r2
    af68:	d001      	beq.n	af6e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    af6a:	231c      	movs	r3, #28
    af6c:	e0ef      	b.n	b14e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    af6e:	2201      	movs	r2, #1
    af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af72:	409a      	lsls	r2, r3
    af74:	0013      	movs	r3, r2
    af76:	0019      	movs	r1, r3
    af78:	2002      	movs	r0, #2
    af7a:	4b78      	ldr	r3, [pc, #480]	; (b15c <usart_init+0x244>)
    af7c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    af7e:	2324      	movs	r3, #36	; 0x24
    af80:	18fb      	adds	r3, r7, r3
    af82:	0018      	movs	r0, r3
    af84:	4b76      	ldr	r3, [pc, #472]	; (b160 <usart_init+0x248>)
    af86:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    af88:	687b      	ldr	r3, [r7, #4]
    af8a:	222d      	movs	r2, #45	; 0x2d
    af8c:	5c9a      	ldrb	r2, [r3, r2]
    af8e:	2324      	movs	r3, #36	; 0x24
    af90:	18fb      	adds	r3, r7, r3
    af92:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    af96:	b2db      	uxtb	r3, r3
    af98:	2224      	movs	r2, #36	; 0x24
    af9a:	18ba      	adds	r2, r7, r2
    af9c:	0011      	movs	r1, r2
    af9e:	0018      	movs	r0, r3
    afa0:	4b70      	ldr	r3, [pc, #448]	; (b164 <usart_init+0x24c>)
    afa2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    afa6:	b2db      	uxtb	r3, r3
    afa8:	0018      	movs	r0, r3
    afaa:	4b6f      	ldr	r3, [pc, #444]	; (b168 <usart_init+0x250>)
    afac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    afae:	687b      	ldr	r3, [r7, #4]
    afb0:	222d      	movs	r2, #45	; 0x2d
    afb2:	5c9b      	ldrb	r3, [r3, r2]
    afb4:	2100      	movs	r1, #0
    afb6:	0018      	movs	r0, r3
    afb8:	4b6c      	ldr	r3, [pc, #432]	; (b16c <usart_init+0x254>)
    afba:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    afbc:	687b      	ldr	r3, [r7, #4]
    afbe:	7ada      	ldrb	r2, [r3, #11]
    afc0:	68fb      	ldr	r3, [r7, #12]
    afc2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    afc4:	687b      	ldr	r3, [r7, #4]
    afc6:	2224      	movs	r2, #36	; 0x24
    afc8:	5c9a      	ldrb	r2, [r3, r2]
    afca:	68fb      	ldr	r3, [r7, #12]
    afcc:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    afce:	687b      	ldr	r3, [r7, #4]
    afd0:	2225      	movs	r2, #37	; 0x25
    afd2:	5c9a      	ldrb	r2, [r3, r2]
    afd4:	68fb      	ldr	r3, [r7, #12]
    afd6:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	7eda      	ldrb	r2, [r3, #27]
    afdc:	68fb      	ldr	r3, [r7, #12]
    afde:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	7f1a      	ldrb	r2, [r3, #28]
    afe4:	68fb      	ldr	r3, [r7, #12]
    afe6:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    afe8:	233b      	movs	r3, #59	; 0x3b
    afea:	18fc      	adds	r4, r7, r3
    afec:	687a      	ldr	r2, [r7, #4]
    afee:	68fb      	ldr	r3, [r7, #12]
    aff0:	0011      	movs	r1, r2
    aff2:	0018      	movs	r0, r3
    aff4:	4b5e      	ldr	r3, [pc, #376]	; (b170 <usart_init+0x258>)
    aff6:	4798      	blx	r3
    aff8:	0003      	movs	r3, r0
    affa:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    affc:	233b      	movs	r3, #59	; 0x3b
    affe:	18fb      	adds	r3, r7, r3
    b000:	781b      	ldrb	r3, [r3, #0]
    b002:	2b00      	cmp	r3, #0
    b004:	d003      	beq.n	b00e <usart_init+0xf6>
		return status_code;
    b006:	233b      	movs	r3, #59	; 0x3b
    b008:	18fb      	adds	r3, r7, r3
    b00a:	781b      	ldrb	r3, [r3, #0]
    b00c:	e09f      	b.n	b14e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    b00e:	2320      	movs	r3, #32
    b010:	18fb      	adds	r3, r7, r3
    b012:	0018      	movs	r0, r3
    b014:	4b57      	ldr	r3, [pc, #348]	; (b174 <usart_init+0x25c>)
    b016:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b018:	2320      	movs	r3, #32
    b01a:	18fb      	adds	r3, r7, r3
    b01c:	2200      	movs	r2, #0
    b01e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    b020:	2320      	movs	r3, #32
    b022:	18fb      	adds	r3, r7, r3
    b024:	2200      	movs	r2, #0
    b026:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    b028:	687b      	ldr	r3, [r7, #4]
    b02a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    b02c:	2310      	movs	r3, #16
    b02e:	18fb      	adds	r3, r7, r3
    b030:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    b032:	687b      	ldr	r3, [r7, #4]
    b034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    b036:	2310      	movs	r3, #16
    b038:	18fb      	adds	r3, r7, r3
    b03a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    b03c:	687b      	ldr	r3, [r7, #4]
    b03e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    b040:	2310      	movs	r3, #16
    b042:	18fb      	adds	r3, r7, r3
    b044:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    b046:	687b      	ldr	r3, [r7, #4]
    b048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    b04a:	2310      	movs	r3, #16
    b04c:	18fb      	adds	r3, r7, r3
    b04e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    b050:	2347      	movs	r3, #71	; 0x47
    b052:	18fb      	adds	r3, r7, r3
    b054:	2200      	movs	r2, #0
    b056:	701a      	strb	r2, [r3, #0]
    b058:	e02c      	b.n	b0b4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    b05a:	2347      	movs	r3, #71	; 0x47
    b05c:	18fb      	adds	r3, r7, r3
    b05e:	781a      	ldrb	r2, [r3, #0]
    b060:	2310      	movs	r3, #16
    b062:	18fb      	adds	r3, r7, r3
    b064:	0092      	lsls	r2, r2, #2
    b066:	58d3      	ldr	r3, [r2, r3]
    b068:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    b06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b06c:	2b00      	cmp	r3, #0
    b06e:	d109      	bne.n	b084 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    b070:	2347      	movs	r3, #71	; 0x47
    b072:	18fb      	adds	r3, r7, r3
    b074:	781a      	ldrb	r2, [r3, #0]
    b076:	68bb      	ldr	r3, [r7, #8]
    b078:	0011      	movs	r1, r2
    b07a:	0018      	movs	r0, r3
    b07c:	4b3e      	ldr	r3, [pc, #248]	; (b178 <usart_init+0x260>)
    b07e:	4798      	blx	r3
    b080:	0003      	movs	r3, r0
    b082:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    b084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b086:	3301      	adds	r3, #1
    b088:	d00d      	beq.n	b0a6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    b08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b08c:	b2da      	uxtb	r2, r3
    b08e:	2320      	movs	r3, #32
    b090:	18fb      	adds	r3, r7, r3
    b092:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    b094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b096:	0c1b      	lsrs	r3, r3, #16
    b098:	b2db      	uxtb	r3, r3
    b09a:	2220      	movs	r2, #32
    b09c:	18ba      	adds	r2, r7, r2
    b09e:	0011      	movs	r1, r2
    b0a0:	0018      	movs	r0, r3
    b0a2:	4b36      	ldr	r3, [pc, #216]	; (b17c <usart_init+0x264>)
    b0a4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    b0a6:	2347      	movs	r3, #71	; 0x47
    b0a8:	18fb      	adds	r3, r7, r3
    b0aa:	781a      	ldrb	r2, [r3, #0]
    b0ac:	2347      	movs	r3, #71	; 0x47
    b0ae:	18fb      	adds	r3, r7, r3
    b0b0:	3201      	adds	r2, #1
    b0b2:	701a      	strb	r2, [r3, #0]
    b0b4:	2347      	movs	r3, #71	; 0x47
    b0b6:	18fb      	adds	r3, r7, r3
    b0b8:	781b      	ldrb	r3, [r3, #0]
    b0ba:	2b03      	cmp	r3, #3
    b0bc:	d9cd      	bls.n	b05a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    b0be:	2300      	movs	r3, #0
    b0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    b0c2:	e00a      	b.n	b0da <usart_init+0x1c2>
		module->callback[i]            = NULL;
    b0c4:	68fa      	ldr	r2, [r7, #12]
    b0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0c8:	3302      	adds	r3, #2
    b0ca:	009b      	lsls	r3, r3, #2
    b0cc:	18d3      	adds	r3, r2, r3
    b0ce:	3304      	adds	r3, #4
    b0d0:	2200      	movs	r2, #0
    b0d2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    b0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0d6:	3301      	adds	r3, #1
    b0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    b0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0dc:	2b05      	cmp	r3, #5
    b0de:	d9f1      	bls.n	b0c4 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    b0e0:	68fb      	ldr	r3, [r7, #12]
    b0e2:	2200      	movs	r2, #0
    b0e4:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    b0e6:	68fb      	ldr	r3, [r7, #12]
    b0e8:	2200      	movs	r2, #0
    b0ea:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    b0ec:	68fb      	ldr	r3, [r7, #12]
    b0ee:	2200      	movs	r2, #0
    b0f0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    b0f2:	68fb      	ldr	r3, [r7, #12]
    b0f4:	2200      	movs	r2, #0
    b0f6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    b0f8:	68fb      	ldr	r3, [r7, #12]
    b0fa:	2230      	movs	r2, #48	; 0x30
    b0fc:	2100      	movs	r1, #0
    b0fe:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    b100:	68fb      	ldr	r3, [r7, #12]
    b102:	2231      	movs	r2, #49	; 0x31
    b104:	2100      	movs	r1, #0
    b106:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    b108:	68fb      	ldr	r3, [r7, #12]
    b10a:	2232      	movs	r2, #50	; 0x32
    b10c:	2100      	movs	r1, #0
    b10e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    b110:	68fb      	ldr	r3, [r7, #12]
    b112:	2233      	movs	r2, #51	; 0x33
    b114:	2100      	movs	r1, #0
    b116:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    b118:	68fb      	ldr	r3, [r7, #12]
    b11a:	681b      	ldr	r3, [r3, #0]
    b11c:	2227      	movs	r2, #39	; 0x27
    b11e:	18bc      	adds	r4, r7, r2
    b120:	0018      	movs	r0, r3
    b122:	4b0d      	ldr	r3, [pc, #52]	; (b158 <usart_init+0x240>)
    b124:	4798      	blx	r3
    b126:	0003      	movs	r3, r0
    b128:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    b12a:	4a15      	ldr	r2, [pc, #84]	; (b180 <usart_init+0x268>)
    b12c:	2327      	movs	r3, #39	; 0x27
    b12e:	18fb      	adds	r3, r7, r3
    b130:	781b      	ldrb	r3, [r3, #0]
    b132:	0011      	movs	r1, r2
    b134:	0018      	movs	r0, r3
    b136:	4b13      	ldr	r3, [pc, #76]	; (b184 <usart_init+0x26c>)
    b138:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    b13a:	2327      	movs	r3, #39	; 0x27
    b13c:	18fb      	adds	r3, r7, r3
    b13e:	781a      	ldrb	r2, [r3, #0]
    b140:	4b11      	ldr	r3, [pc, #68]	; (b188 <usart_init+0x270>)
    b142:	0092      	lsls	r2, r2, #2
    b144:	68f9      	ldr	r1, [r7, #12]
    b146:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    b148:	233b      	movs	r3, #59	; 0x3b
    b14a:	18fb      	adds	r3, r7, r3
    b14c:	781b      	ldrb	r3, [r3, #0]
}
    b14e:	0018      	movs	r0, r3
    b150:	46bd      	mov	sp, r7
    b152:	b013      	add	sp, #76	; 0x4c
    b154:	bd90      	pop	{r4, r7, pc}
    b156:	46c0      	nop			; (mov r8, r8)
    b158:	0000aa2d 	.word	0x0000aa2d
    b15c:	0000ab55 	.word	0x0000ab55
    b160:	0000ab3d 	.word	0x0000ab3d
    b164:	0000c659 	.word	0x0000c659
    b168:	0000c69d 	.word	0x0000c69d
    b16c:	0000a7e5 	.word	0x0000a7e5
    b170:	0000ac3d 	.word	0x0000ac3d
    b174:	0000abb1 	.word	0x0000abb1
    b178:	0000a871 	.word	0x0000a871
    b17c:	0000c945 	.word	0x0000c945
    b180:	0000b321 	.word	0x0000b321
    b184:	0000b675 	.word	0x0000b675
    b188:	20000aac 	.word	0x20000aac

0000b18c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    b18c:	b580      	push	{r7, lr}
    b18e:	b084      	sub	sp, #16
    b190:	af00      	add	r7, sp, #0
    b192:	6078      	str	r0, [r7, #4]
    b194:	000a      	movs	r2, r1
    b196:	1cbb      	adds	r3, r7, #2
    b198:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b19a:	687b      	ldr	r3, [r7, #4]
    b19c:	681b      	ldr	r3, [r3, #0]
    b19e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	79db      	ldrb	r3, [r3, #7]
    b1a4:	2201      	movs	r2, #1
    b1a6:	4053      	eors	r3, r2
    b1a8:	b2db      	uxtb	r3, r3
    b1aa:	2b00      	cmp	r3, #0
    b1ac:	d001      	beq.n	b1b2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    b1ae:	231c      	movs	r3, #28
    b1b0:	e017      	b.n	b1e2 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    b1b2:	687b      	ldr	r3, [r7, #4]
    b1b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b1b6:	b29b      	uxth	r3, r3
    b1b8:	2b00      	cmp	r3, #0
    b1ba:	d001      	beq.n	b1c0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    b1bc:	2305      	movs	r3, #5
    b1be:	e010      	b.n	b1e2 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b1c0:	687b      	ldr	r3, [r7, #4]
    b1c2:	0018      	movs	r0, r3
    b1c4:	4b09      	ldr	r3, [pc, #36]	; (b1ec <usart_write_wait+0x60>)
    b1c6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    b1c8:	68fb      	ldr	r3, [r7, #12]
    b1ca:	1cba      	adds	r2, r7, #2
    b1cc:	8812      	ldrh	r2, [r2, #0]
    b1ce:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    b1d0:	46c0      	nop			; (mov r8, r8)
    b1d2:	68fb      	ldr	r3, [r7, #12]
    b1d4:	7e1b      	ldrb	r3, [r3, #24]
    b1d6:	b2db      	uxtb	r3, r3
    b1d8:	001a      	movs	r2, r3
    b1da:	2302      	movs	r3, #2
    b1dc:	4013      	ands	r3, r2
    b1de:	d0f8      	beq.n	b1d2 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    b1e0:	2300      	movs	r3, #0
}
    b1e2:	0018      	movs	r0, r3
    b1e4:	46bd      	mov	sp, r7
    b1e6:	b004      	add	sp, #16
    b1e8:	bd80      	pop	{r7, pc}
    b1ea:	46c0      	nop			; (mov r8, r8)
    b1ec:	0000ac19 	.word	0x0000ac19

0000b1f0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    b1f0:	b580      	push	{r7, lr}
    b1f2:	b084      	sub	sp, #16
    b1f4:	af00      	add	r7, sp, #0
    b1f6:	6078      	str	r0, [r7, #4]
    b1f8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b1fa:	687b      	ldr	r3, [r7, #4]
    b1fc:	681b      	ldr	r3, [r3, #0]
    b1fe:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    b200:	687b      	ldr	r3, [r7, #4]
    b202:	799b      	ldrb	r3, [r3, #6]
    b204:	2201      	movs	r2, #1
    b206:	4053      	eors	r3, r2
    b208:	b2db      	uxtb	r3, r3
    b20a:	2b00      	cmp	r3, #0
    b20c:	d001      	beq.n	b212 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    b20e:	231c      	movs	r3, #28
    b210:	e05e      	b.n	b2d0 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    b212:	687b      	ldr	r3, [r7, #4]
    b214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b216:	b29b      	uxth	r3, r3
    b218:	2b00      	cmp	r3, #0
    b21a:	d001      	beq.n	b220 <usart_read_wait+0x30>
		return STATUS_BUSY;
    b21c:	2305      	movs	r3, #5
    b21e:	e057      	b.n	b2d0 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    b220:	68fb      	ldr	r3, [r7, #12]
    b222:	7e1b      	ldrb	r3, [r3, #24]
    b224:	b2db      	uxtb	r3, r3
    b226:	001a      	movs	r2, r3
    b228:	2304      	movs	r3, #4
    b22a:	4013      	ands	r3, r2
    b22c:	d101      	bne.n	b232 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    b22e:	2305      	movs	r3, #5
    b230:	e04e      	b.n	b2d0 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b232:	687b      	ldr	r3, [r7, #4]
    b234:	0018      	movs	r0, r3
    b236:	4b28      	ldr	r3, [pc, #160]	; (b2d8 <usart_read_wait+0xe8>)
    b238:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    b23a:	68fb      	ldr	r3, [r7, #12]
    b23c:	8b5b      	ldrh	r3, [r3, #26]
    b23e:	b29b      	uxth	r3, r3
    b240:	b2da      	uxtb	r2, r3
    b242:	230b      	movs	r3, #11
    b244:	18fb      	adds	r3, r7, r3
    b246:	213f      	movs	r1, #63	; 0x3f
    b248:	400a      	ands	r2, r1
    b24a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    b24c:	230b      	movs	r3, #11
    b24e:	18fb      	adds	r3, r7, r3
    b250:	781b      	ldrb	r3, [r3, #0]
    b252:	2b00      	cmp	r3, #0
    b254:	d036      	beq.n	b2c4 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    b256:	230b      	movs	r3, #11
    b258:	18fb      	adds	r3, r7, r3
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	2202      	movs	r2, #2
    b25e:	4013      	ands	r3, r2
    b260:	d004      	beq.n	b26c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    b262:	68fb      	ldr	r3, [r7, #12]
    b264:	2202      	movs	r2, #2
    b266:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    b268:	231a      	movs	r3, #26
    b26a:	e031      	b.n	b2d0 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    b26c:	230b      	movs	r3, #11
    b26e:	18fb      	adds	r3, r7, r3
    b270:	781b      	ldrb	r3, [r3, #0]
    b272:	2204      	movs	r2, #4
    b274:	4013      	ands	r3, r2
    b276:	d004      	beq.n	b282 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    b278:	68fb      	ldr	r3, [r7, #12]
    b27a:	2204      	movs	r2, #4
    b27c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    b27e:	231e      	movs	r3, #30
    b280:	e026      	b.n	b2d0 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    b282:	230b      	movs	r3, #11
    b284:	18fb      	adds	r3, r7, r3
    b286:	781b      	ldrb	r3, [r3, #0]
    b288:	2201      	movs	r2, #1
    b28a:	4013      	ands	r3, r2
    b28c:	d004      	beq.n	b298 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    b28e:	68fb      	ldr	r3, [r7, #12]
    b290:	2201      	movs	r2, #1
    b292:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    b294:	2313      	movs	r3, #19
    b296:	e01b      	b.n	b2d0 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    b298:	230b      	movs	r3, #11
    b29a:	18fb      	adds	r3, r7, r3
    b29c:	781b      	ldrb	r3, [r3, #0]
    b29e:	2210      	movs	r2, #16
    b2a0:	4013      	ands	r3, r2
    b2a2:	d004      	beq.n	b2ae <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    b2a4:	68fb      	ldr	r3, [r7, #12]
    b2a6:	2210      	movs	r2, #16
    b2a8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    b2aa:	2342      	movs	r3, #66	; 0x42
    b2ac:	e010      	b.n	b2d0 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    b2ae:	230b      	movs	r3, #11
    b2b0:	18fb      	adds	r3, r7, r3
    b2b2:	781b      	ldrb	r3, [r3, #0]
    b2b4:	2220      	movs	r2, #32
    b2b6:	4013      	ands	r3, r2
    b2b8:	d004      	beq.n	b2c4 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    b2ba:	68fb      	ldr	r3, [r7, #12]
    b2bc:	2220      	movs	r2, #32
    b2be:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    b2c0:	2341      	movs	r3, #65	; 0x41
    b2c2:	e005      	b.n	b2d0 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    b2c4:	68fb      	ldr	r3, [r7, #12]
    b2c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b2c8:	b29a      	uxth	r2, r3
    b2ca:	683b      	ldr	r3, [r7, #0]
    b2cc:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    b2ce:	2300      	movs	r3, #0
}
    b2d0:	0018      	movs	r0, r3
    b2d2:	46bd      	mov	sp, r7
    b2d4:	b004      	add	sp, #16
    b2d6:	bd80      	pop	{r7, pc}
    b2d8:	0000ac19 	.word	0x0000ac19

0000b2dc <usart_is_syncing>:
{
    b2dc:	b580      	push	{r7, lr}
    b2de:	b084      	sub	sp, #16
    b2e0:	af00      	add	r7, sp, #0
    b2e2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b2e4:	687b      	ldr	r3, [r7, #4]
    b2e6:	681b      	ldr	r3, [r3, #0]
    b2e8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    b2ea:	68fb      	ldr	r3, [r7, #12]
    b2ec:	69db      	ldr	r3, [r3, #28]
    b2ee:	1e5a      	subs	r2, r3, #1
    b2f0:	4193      	sbcs	r3, r2
    b2f2:	b2db      	uxtb	r3, r3
}
    b2f4:	0018      	movs	r0, r3
    b2f6:	46bd      	mov	sp, r7
    b2f8:	b004      	add	sp, #16
    b2fa:	bd80      	pop	{r7, pc}

0000b2fc <_usart_wait_for_sync>:
{
    b2fc:	b580      	push	{r7, lr}
    b2fe:	b082      	sub	sp, #8
    b300:	af00      	add	r7, sp, #0
    b302:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    b304:	46c0      	nop			; (mov r8, r8)
    b306:	687b      	ldr	r3, [r7, #4]
    b308:	0018      	movs	r0, r3
    b30a:	4b04      	ldr	r3, [pc, #16]	; (b31c <_usart_wait_for_sync+0x20>)
    b30c:	4798      	blx	r3
    b30e:	1e03      	subs	r3, r0, #0
    b310:	d1f9      	bne.n	b306 <_usart_wait_for_sync+0xa>
}
    b312:	46c0      	nop			; (mov r8, r8)
    b314:	46bd      	mov	sp, r7
    b316:	b002      	add	sp, #8
    b318:	bd80      	pop	{r7, pc}
    b31a:	46c0      	nop			; (mov r8, r8)
    b31c:	0000b2dd 	.word	0x0000b2dd

0000b320 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    b320:	b580      	push	{r7, lr}
    b322:	b088      	sub	sp, #32
    b324:	af00      	add	r7, sp, #0
    b326:	0002      	movs	r2, r0
    b328:	1dfb      	adds	r3, r7, #7
    b32a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    b32c:	1dfb      	adds	r3, r7, #7
    b32e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    b330:	4ba3      	ldr	r3, [pc, #652]	; (b5c0 <_usart_interrupt_handler+0x2a0>)
    b332:	0092      	lsls	r2, r2, #2
    b334:	58d3      	ldr	r3, [r2, r3]
    b336:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    b338:	69bb      	ldr	r3, [r7, #24]
    b33a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    b33c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    b33e:	69bb      	ldr	r3, [r7, #24]
    b340:	0018      	movs	r0, r3
    b342:	4ba0      	ldr	r3, [pc, #640]	; (b5c4 <_usart_interrupt_handler+0x2a4>)
    b344:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    b346:	697b      	ldr	r3, [r7, #20]
    b348:	7e1b      	ldrb	r3, [r3, #24]
    b34a:	b2da      	uxtb	r2, r3
    b34c:	2312      	movs	r3, #18
    b34e:	18fb      	adds	r3, r7, r3
    b350:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    b352:	697b      	ldr	r3, [r7, #20]
    b354:	7d9b      	ldrb	r3, [r3, #22]
    b356:	b2db      	uxtb	r3, r3
    b358:	b29a      	uxth	r2, r3
    b35a:	2312      	movs	r3, #18
    b35c:	18fb      	adds	r3, r7, r3
    b35e:	2112      	movs	r1, #18
    b360:	1879      	adds	r1, r7, r1
    b362:	8809      	ldrh	r1, [r1, #0]
    b364:	400a      	ands	r2, r1
    b366:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    b368:	69bb      	ldr	r3, [r7, #24]
    b36a:	2230      	movs	r2, #48	; 0x30
    b36c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    b36e:	69ba      	ldr	r2, [r7, #24]
    b370:	2131      	movs	r1, #49	; 0x31
    b372:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    b374:	4013      	ands	r3, r2
    b376:	b2da      	uxtb	r2, r3
    b378:	2310      	movs	r3, #16
    b37a:	18fb      	adds	r3, r7, r3
    b37c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    b37e:	2312      	movs	r3, #18
    b380:	18fb      	adds	r3, r7, r3
    b382:	881b      	ldrh	r3, [r3, #0]
    b384:	2201      	movs	r2, #1
    b386:	4013      	ands	r3, r2
    b388:	d044      	beq.n	b414 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    b38a:	69bb      	ldr	r3, [r7, #24]
    b38c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b38e:	b29b      	uxth	r3, r3
    b390:	2b00      	cmp	r3, #0
    b392:	d03c      	beq.n	b40e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    b394:	69bb      	ldr	r3, [r7, #24]
    b396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b398:	781b      	ldrb	r3, [r3, #0]
    b39a:	b2da      	uxtb	r2, r3
    b39c:	231c      	movs	r3, #28
    b39e:	18fb      	adds	r3, r7, r3
    b3a0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    b3a2:	69bb      	ldr	r3, [r7, #24]
    b3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b3a6:	1c5a      	adds	r2, r3, #1
    b3a8:	69bb      	ldr	r3, [r7, #24]
    b3aa:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    b3ac:	69bb      	ldr	r3, [r7, #24]
    b3ae:	795b      	ldrb	r3, [r3, #5]
    b3b0:	2b01      	cmp	r3, #1
    b3b2:	d113      	bne.n	b3dc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    b3b4:	69bb      	ldr	r3, [r7, #24]
    b3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b3b8:	781b      	ldrb	r3, [r3, #0]
    b3ba:	b2db      	uxtb	r3, r3
    b3bc:	021b      	lsls	r3, r3, #8
    b3be:	b21a      	sxth	r2, r3
    b3c0:	231c      	movs	r3, #28
    b3c2:	18fb      	adds	r3, r7, r3
    b3c4:	2100      	movs	r1, #0
    b3c6:	5e5b      	ldrsh	r3, [r3, r1]
    b3c8:	4313      	orrs	r3, r2
    b3ca:	b21a      	sxth	r2, r3
    b3cc:	231c      	movs	r3, #28
    b3ce:	18fb      	adds	r3, r7, r3
    b3d0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    b3d2:	69bb      	ldr	r3, [r7, #24]
    b3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b3d6:	1c5a      	adds	r2, r3, #1
    b3d8:	69bb      	ldr	r3, [r7, #24]
    b3da:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    b3dc:	231c      	movs	r3, #28
    b3de:	18fb      	adds	r3, r7, r3
    b3e0:	881b      	ldrh	r3, [r3, #0]
    b3e2:	05db      	lsls	r3, r3, #23
    b3e4:	0ddb      	lsrs	r3, r3, #23
    b3e6:	b29a      	uxth	r2, r3
    b3e8:	697b      	ldr	r3, [r7, #20]
    b3ea:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    b3ec:	69bb      	ldr	r3, [r7, #24]
    b3ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b3f0:	b29b      	uxth	r3, r3
    b3f2:	3b01      	subs	r3, #1
    b3f4:	b29b      	uxth	r3, r3
    b3f6:	69ba      	ldr	r2, [r7, #24]
    b3f8:	1c19      	adds	r1, r3, #0
    b3fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
    b3fc:	2b00      	cmp	r3, #0
    b3fe:	d109      	bne.n	b414 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b400:	697b      	ldr	r3, [r7, #20]
    b402:	2201      	movs	r2, #1
    b404:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    b406:	697b      	ldr	r3, [r7, #20]
    b408:	2202      	movs	r2, #2
    b40a:	759a      	strb	r2, [r3, #22]
    b40c:	e002      	b.n	b414 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b40e:	697b      	ldr	r3, [r7, #20]
    b410:	2201      	movs	r2, #1
    b412:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    b414:	2312      	movs	r3, #18
    b416:	18fb      	adds	r3, r7, r3
    b418:	881b      	ldrh	r3, [r3, #0]
    b41a:	2202      	movs	r2, #2
    b41c:	4013      	ands	r3, r2
    b41e:	d011      	beq.n	b444 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    b420:	697b      	ldr	r3, [r7, #20]
    b422:	2202      	movs	r2, #2
    b424:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    b426:	69bb      	ldr	r3, [r7, #24]
    b428:	2233      	movs	r2, #51	; 0x33
    b42a:	2100      	movs	r1, #0
    b42c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    b42e:	2310      	movs	r3, #16
    b430:	18fb      	adds	r3, r7, r3
    b432:	881b      	ldrh	r3, [r3, #0]
    b434:	2201      	movs	r2, #1
    b436:	4013      	ands	r3, r2
    b438:	d004      	beq.n	b444 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    b43a:	69bb      	ldr	r3, [r7, #24]
    b43c:	68db      	ldr	r3, [r3, #12]
    b43e:	69ba      	ldr	r2, [r7, #24]
    b440:	0010      	movs	r0, r2
    b442:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    b444:	2312      	movs	r3, #18
    b446:	18fb      	adds	r3, r7, r3
    b448:	881b      	ldrh	r3, [r3, #0]
    b44a:	2204      	movs	r2, #4
    b44c:	4013      	ands	r3, r2
    b44e:	d100      	bne.n	b452 <_usart_interrupt_handler+0x132>
    b450:	e0bd      	b.n	b5ce <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    b452:	69bb      	ldr	r3, [r7, #24]
    b454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b456:	b29b      	uxth	r3, r3
    b458:	2b00      	cmp	r3, #0
    b45a:	d100      	bne.n	b45e <_usart_interrupt_handler+0x13e>
    b45c:	e0b4      	b.n	b5c8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    b45e:	697b      	ldr	r3, [r7, #20]
    b460:	8b5b      	ldrh	r3, [r3, #26]
    b462:	b29b      	uxth	r3, r3
    b464:	b2da      	uxtb	r2, r3
    b466:	231f      	movs	r3, #31
    b468:	18fb      	adds	r3, r7, r3
    b46a:	213f      	movs	r1, #63	; 0x3f
    b46c:	400a      	ands	r2, r1
    b46e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    b470:	231f      	movs	r3, #31
    b472:	18fb      	adds	r3, r7, r3
    b474:	781b      	ldrb	r3, [r3, #0]
    b476:	2208      	movs	r2, #8
    b478:	4013      	ands	r3, r2
    b47a:	d007      	beq.n	b48c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    b47c:	231f      	movs	r3, #31
    b47e:	18fb      	adds	r3, r7, r3
    b480:	221f      	movs	r2, #31
    b482:	18ba      	adds	r2, r7, r2
    b484:	7812      	ldrb	r2, [r2, #0]
    b486:	2108      	movs	r1, #8
    b488:	438a      	bics	r2, r1
    b48a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    b48c:	231f      	movs	r3, #31
    b48e:	18fb      	adds	r3, r7, r3
    b490:	781b      	ldrb	r3, [r3, #0]
    b492:	2b00      	cmp	r3, #0
    b494:	d050      	beq.n	b538 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    b496:	231f      	movs	r3, #31
    b498:	18fb      	adds	r3, r7, r3
    b49a:	781b      	ldrb	r3, [r3, #0]
    b49c:	2202      	movs	r2, #2
    b49e:	4013      	ands	r3, r2
    b4a0:	d007      	beq.n	b4b2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    b4a2:	69bb      	ldr	r3, [r7, #24]
    b4a4:	2232      	movs	r2, #50	; 0x32
    b4a6:	211a      	movs	r1, #26
    b4a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    b4aa:	697b      	ldr	r3, [r7, #20]
    b4ac:	2202      	movs	r2, #2
    b4ae:	835a      	strh	r2, [r3, #26]
    b4b0:	e036      	b.n	b520 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    b4b2:	231f      	movs	r3, #31
    b4b4:	18fb      	adds	r3, r7, r3
    b4b6:	781b      	ldrb	r3, [r3, #0]
    b4b8:	2204      	movs	r2, #4
    b4ba:	4013      	ands	r3, r2
    b4bc:	d007      	beq.n	b4ce <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    b4be:	69bb      	ldr	r3, [r7, #24]
    b4c0:	2232      	movs	r2, #50	; 0x32
    b4c2:	211e      	movs	r1, #30
    b4c4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    b4c6:	697b      	ldr	r3, [r7, #20]
    b4c8:	2204      	movs	r2, #4
    b4ca:	835a      	strh	r2, [r3, #26]
    b4cc:	e028      	b.n	b520 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    b4ce:	231f      	movs	r3, #31
    b4d0:	18fb      	adds	r3, r7, r3
    b4d2:	781b      	ldrb	r3, [r3, #0]
    b4d4:	2201      	movs	r2, #1
    b4d6:	4013      	ands	r3, r2
    b4d8:	d007      	beq.n	b4ea <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    b4da:	69bb      	ldr	r3, [r7, #24]
    b4dc:	2232      	movs	r2, #50	; 0x32
    b4de:	2113      	movs	r1, #19
    b4e0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    b4e2:	697b      	ldr	r3, [r7, #20]
    b4e4:	2201      	movs	r2, #1
    b4e6:	835a      	strh	r2, [r3, #26]
    b4e8:	e01a      	b.n	b520 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    b4ea:	231f      	movs	r3, #31
    b4ec:	18fb      	adds	r3, r7, r3
    b4ee:	781b      	ldrb	r3, [r3, #0]
    b4f0:	2210      	movs	r2, #16
    b4f2:	4013      	ands	r3, r2
    b4f4:	d007      	beq.n	b506 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    b4f6:	69bb      	ldr	r3, [r7, #24]
    b4f8:	2232      	movs	r2, #50	; 0x32
    b4fa:	2142      	movs	r1, #66	; 0x42
    b4fc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    b4fe:	697b      	ldr	r3, [r7, #20]
    b500:	2210      	movs	r2, #16
    b502:	835a      	strh	r2, [r3, #26]
    b504:	e00c      	b.n	b520 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    b506:	231f      	movs	r3, #31
    b508:	18fb      	adds	r3, r7, r3
    b50a:	781b      	ldrb	r3, [r3, #0]
    b50c:	2220      	movs	r2, #32
    b50e:	4013      	ands	r3, r2
    b510:	d006      	beq.n	b520 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    b512:	69bb      	ldr	r3, [r7, #24]
    b514:	2232      	movs	r2, #50	; 0x32
    b516:	2141      	movs	r1, #65	; 0x41
    b518:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    b51a:	697b      	ldr	r3, [r7, #20]
    b51c:	2220      	movs	r2, #32
    b51e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    b520:	2310      	movs	r3, #16
    b522:	18fb      	adds	r3, r7, r3
    b524:	881b      	ldrh	r3, [r3, #0]
    b526:	2204      	movs	r2, #4
    b528:	4013      	ands	r3, r2
				if (callback_status
    b52a:	d050      	beq.n	b5ce <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    b52c:	69bb      	ldr	r3, [r7, #24]
    b52e:	695b      	ldr	r3, [r3, #20]
    b530:	69ba      	ldr	r2, [r7, #24]
    b532:	0010      	movs	r0, r2
    b534:	4798      	blx	r3
    b536:	e04a      	b.n	b5ce <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    b538:	697b      	ldr	r3, [r7, #20]
    b53a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b53c:	b29a      	uxth	r2, r3
    b53e:	230e      	movs	r3, #14
    b540:	18fb      	adds	r3, r7, r3
    b542:	05d2      	lsls	r2, r2, #23
    b544:	0dd2      	lsrs	r2, r2, #23
    b546:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    b548:	69bb      	ldr	r3, [r7, #24]
    b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b54c:	220e      	movs	r2, #14
    b54e:	18ba      	adds	r2, r7, r2
    b550:	8812      	ldrh	r2, [r2, #0]
    b552:	b2d2      	uxtb	r2, r2
    b554:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    b556:	69bb      	ldr	r3, [r7, #24]
    b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b55a:	1c5a      	adds	r2, r3, #1
    b55c:	69bb      	ldr	r3, [r7, #24]
    b55e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    b560:	69bb      	ldr	r3, [r7, #24]
    b562:	795b      	ldrb	r3, [r3, #5]
    b564:	2b01      	cmp	r3, #1
    b566:	d10d      	bne.n	b584 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    b568:	69bb      	ldr	r3, [r7, #24]
    b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b56c:	220e      	movs	r2, #14
    b56e:	18ba      	adds	r2, r7, r2
    b570:	8812      	ldrh	r2, [r2, #0]
    b572:	0a12      	lsrs	r2, r2, #8
    b574:	b292      	uxth	r2, r2
    b576:	b2d2      	uxtb	r2, r2
    b578:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    b57a:	69bb      	ldr	r3, [r7, #24]
    b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b57e:	1c5a      	adds	r2, r3, #1
    b580:	69bb      	ldr	r3, [r7, #24]
    b582:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    b584:	69bb      	ldr	r3, [r7, #24]
    b586:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b588:	b29b      	uxth	r3, r3
    b58a:	3b01      	subs	r3, #1
    b58c:	b29b      	uxth	r3, r3
    b58e:	69ba      	ldr	r2, [r7, #24]
    b590:	1c19      	adds	r1, r3, #0
    b592:	8591      	strh	r1, [r2, #44]	; 0x2c
    b594:	2b00      	cmp	r3, #0
    b596:	d11a      	bne.n	b5ce <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    b598:	697b      	ldr	r3, [r7, #20]
    b59a:	2204      	movs	r2, #4
    b59c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    b59e:	69bb      	ldr	r3, [r7, #24]
    b5a0:	2232      	movs	r2, #50	; 0x32
    b5a2:	2100      	movs	r1, #0
    b5a4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    b5a6:	2310      	movs	r3, #16
    b5a8:	18fb      	adds	r3, r7, r3
    b5aa:	881b      	ldrh	r3, [r3, #0]
    b5ac:	2202      	movs	r2, #2
    b5ae:	4013      	ands	r3, r2
					if (callback_status
    b5b0:	d00d      	beq.n	b5ce <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    b5b2:	69bb      	ldr	r3, [r7, #24]
    b5b4:	691b      	ldr	r3, [r3, #16]
    b5b6:	69ba      	ldr	r2, [r7, #24]
    b5b8:	0010      	movs	r0, r2
    b5ba:	4798      	blx	r3
    b5bc:	e007      	b.n	b5ce <_usart_interrupt_handler+0x2ae>
    b5be:	46c0      	nop			; (mov r8, r8)
    b5c0:	20000aac 	.word	0x20000aac
    b5c4:	0000b2fd 	.word	0x0000b2fd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    b5c8:	697b      	ldr	r3, [r7, #20]
    b5ca:	2204      	movs	r2, #4
    b5cc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    b5ce:	2312      	movs	r3, #18
    b5d0:	18fb      	adds	r3, r7, r3
    b5d2:	881b      	ldrh	r3, [r3, #0]
    b5d4:	2210      	movs	r2, #16
    b5d6:	4013      	ands	r3, r2
    b5d8:	d010      	beq.n	b5fc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    b5da:	697b      	ldr	r3, [r7, #20]
    b5dc:	2210      	movs	r2, #16
    b5de:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    b5e0:	697b      	ldr	r3, [r7, #20]
    b5e2:	2210      	movs	r2, #16
    b5e4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    b5e6:	2310      	movs	r3, #16
    b5e8:	18fb      	adds	r3, r7, r3
    b5ea:	881b      	ldrh	r3, [r3, #0]
    b5ec:	2210      	movs	r2, #16
    b5ee:	4013      	ands	r3, r2
    b5f0:	d004      	beq.n	b5fc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    b5f2:	69bb      	ldr	r3, [r7, #24]
    b5f4:	69db      	ldr	r3, [r3, #28]
    b5f6:	69ba      	ldr	r2, [r7, #24]
    b5f8:	0010      	movs	r0, r2
    b5fa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    b5fc:	2312      	movs	r3, #18
    b5fe:	18fb      	adds	r3, r7, r3
    b600:	881b      	ldrh	r3, [r3, #0]
    b602:	2220      	movs	r2, #32
    b604:	4013      	ands	r3, r2
    b606:	d010      	beq.n	b62a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    b608:	697b      	ldr	r3, [r7, #20]
    b60a:	2220      	movs	r2, #32
    b60c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    b60e:	697b      	ldr	r3, [r7, #20]
    b610:	2220      	movs	r2, #32
    b612:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    b614:	2310      	movs	r3, #16
    b616:	18fb      	adds	r3, r7, r3
    b618:	881b      	ldrh	r3, [r3, #0]
    b61a:	2208      	movs	r2, #8
    b61c:	4013      	ands	r3, r2
    b61e:	d004      	beq.n	b62a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    b620:	69bb      	ldr	r3, [r7, #24]
    b622:	699b      	ldr	r3, [r3, #24]
    b624:	69ba      	ldr	r2, [r7, #24]
    b626:	0010      	movs	r0, r2
    b628:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    b62a:	2312      	movs	r3, #18
    b62c:	18fb      	adds	r3, r7, r3
    b62e:	881b      	ldrh	r3, [r3, #0]
    b630:	2208      	movs	r2, #8
    b632:	4013      	ands	r3, r2
    b634:	d010      	beq.n	b658 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    b636:	697b      	ldr	r3, [r7, #20]
    b638:	2208      	movs	r2, #8
    b63a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    b63c:	697b      	ldr	r3, [r7, #20]
    b63e:	2208      	movs	r2, #8
    b640:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    b642:	2310      	movs	r3, #16
    b644:	18fb      	adds	r3, r7, r3
    b646:	881b      	ldrh	r3, [r3, #0]
    b648:	2220      	movs	r2, #32
    b64a:	4013      	ands	r3, r2
    b64c:	d004      	beq.n	b658 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    b64e:	69bb      	ldr	r3, [r7, #24]
    b650:	6a1b      	ldr	r3, [r3, #32]
    b652:	69ba      	ldr	r2, [r7, #24]
    b654:	0010      	movs	r0, r2
    b656:	4798      	blx	r3
		}
	}
#endif
}
    b658:	46c0      	nop			; (mov r8, r8)
    b65a:	46bd      	mov	sp, r7
    b65c:	b008      	add	sp, #32
    b65e:	bd80      	pop	{r7, pc}

0000b660 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    b660:	b580      	push	{r7, lr}
    b662:	b082      	sub	sp, #8
    b664:	af00      	add	r7, sp, #0
    b666:	0002      	movs	r2, r0
    b668:	1dfb      	adds	r3, r7, #7
    b66a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    b66c:	46c0      	nop			; (mov r8, r8)
    b66e:	46bd      	mov	sp, r7
    b670:	b002      	add	sp, #8
    b672:	bd80      	pop	{r7, pc}

0000b674 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    b674:	b580      	push	{r7, lr}
    b676:	b084      	sub	sp, #16
    b678:	af00      	add	r7, sp, #0
    b67a:	0002      	movs	r2, r0
    b67c:	6039      	str	r1, [r7, #0]
    b67e:	1dfb      	adds	r3, r7, #7
    b680:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    b682:	4b13      	ldr	r3, [pc, #76]	; (b6d0 <_sercom_set_handler+0x5c>)
    b684:	781b      	ldrb	r3, [r3, #0]
    b686:	2201      	movs	r2, #1
    b688:	4053      	eors	r3, r2
    b68a:	b2db      	uxtb	r3, r3
    b68c:	2b00      	cmp	r3, #0
    b68e:	d015      	beq.n	b6bc <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b690:	2300      	movs	r3, #0
    b692:	60fb      	str	r3, [r7, #12]
    b694:	e00c      	b.n	b6b0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    b696:	4b0f      	ldr	r3, [pc, #60]	; (b6d4 <_sercom_set_handler+0x60>)
    b698:	68fa      	ldr	r2, [r7, #12]
    b69a:	0092      	lsls	r2, r2, #2
    b69c:	490e      	ldr	r1, [pc, #56]	; (b6d8 <_sercom_set_handler+0x64>)
    b69e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    b6a0:	4b0e      	ldr	r3, [pc, #56]	; (b6dc <_sercom_set_handler+0x68>)
    b6a2:	68fa      	ldr	r2, [r7, #12]
    b6a4:	0092      	lsls	r2, r2, #2
    b6a6:	2100      	movs	r1, #0
    b6a8:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b6aa:	68fb      	ldr	r3, [r7, #12]
    b6ac:	3301      	adds	r3, #1
    b6ae:	60fb      	str	r3, [r7, #12]
    b6b0:	68fb      	ldr	r3, [r7, #12]
    b6b2:	2b05      	cmp	r3, #5
    b6b4:	d9ef      	bls.n	b696 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    b6b6:	4b06      	ldr	r3, [pc, #24]	; (b6d0 <_sercom_set_handler+0x5c>)
    b6b8:	2201      	movs	r2, #1
    b6ba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    b6bc:	1dfb      	adds	r3, r7, #7
    b6be:	781a      	ldrb	r2, [r3, #0]
    b6c0:	4b04      	ldr	r3, [pc, #16]	; (b6d4 <_sercom_set_handler+0x60>)
    b6c2:	0092      	lsls	r2, r2, #2
    b6c4:	6839      	ldr	r1, [r7, #0]
    b6c6:	50d1      	str	r1, [r2, r3]
}
    b6c8:	46c0      	nop			; (mov r8, r8)
    b6ca:	46bd      	mov	sp, r7
    b6cc:	b004      	add	sp, #16
    b6ce:	bd80      	pop	{r7, pc}
    b6d0:	2000022e 	.word	0x2000022e
    b6d4:	20000230 	.word	0x20000230
    b6d8:	0000b661 	.word	0x0000b661
    b6dc:	20000aac 	.word	0x20000aac

0000b6e0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    b6e0:	b590      	push	{r4, r7, lr}
    b6e2:	b085      	sub	sp, #20
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    b6e8:	2308      	movs	r3, #8
    b6ea:	18fb      	adds	r3, r7, r3
    b6ec:	4a0b      	ldr	r2, [pc, #44]	; (b71c <_sercom_get_interrupt_vector+0x3c>)
    b6ee:	6811      	ldr	r1, [r2, #0]
    b6f0:	6019      	str	r1, [r3, #0]
    b6f2:	8892      	ldrh	r2, [r2, #4]
    b6f4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    b6f6:	230f      	movs	r3, #15
    b6f8:	18fc      	adds	r4, r7, r3
    b6fa:	687b      	ldr	r3, [r7, #4]
    b6fc:	0018      	movs	r0, r3
    b6fe:	4b08      	ldr	r3, [pc, #32]	; (b720 <_sercom_get_interrupt_vector+0x40>)
    b700:	4798      	blx	r3
    b702:	0003      	movs	r3, r0
    b704:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    b706:	230f      	movs	r3, #15
    b708:	18fb      	adds	r3, r7, r3
    b70a:	781b      	ldrb	r3, [r3, #0]
    b70c:	2208      	movs	r2, #8
    b70e:	18ba      	adds	r2, r7, r2
    b710:	5cd3      	ldrb	r3, [r2, r3]
    b712:	b25b      	sxtb	r3, r3
}
    b714:	0018      	movs	r0, r3
    b716:	46bd      	mov	sp, r7
    b718:	b005      	add	sp, #20
    b71a:	bd90      	pop	{r4, r7, pc}
    b71c:	00013f00 	.word	0x00013f00
    b720:	0000aa2d 	.word	0x0000aa2d

0000b724 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    b724:	b580      	push	{r7, lr}
    b726:	af00      	add	r7, sp, #0
    b728:	4b03      	ldr	r3, [pc, #12]	; (b738 <SERCOM0_Handler+0x14>)
    b72a:	681b      	ldr	r3, [r3, #0]
    b72c:	2000      	movs	r0, #0
    b72e:	4798      	blx	r3
    b730:	46c0      	nop			; (mov r8, r8)
    b732:	46bd      	mov	sp, r7
    b734:	bd80      	pop	{r7, pc}
    b736:	46c0      	nop			; (mov r8, r8)
    b738:	20000230 	.word	0x20000230

0000b73c <SERCOM1_Handler>:
    b73c:	b580      	push	{r7, lr}
    b73e:	af00      	add	r7, sp, #0
    b740:	4b03      	ldr	r3, [pc, #12]	; (b750 <SERCOM1_Handler+0x14>)
    b742:	685b      	ldr	r3, [r3, #4]
    b744:	2001      	movs	r0, #1
    b746:	4798      	blx	r3
    b748:	46c0      	nop			; (mov r8, r8)
    b74a:	46bd      	mov	sp, r7
    b74c:	bd80      	pop	{r7, pc}
    b74e:	46c0      	nop			; (mov r8, r8)
    b750:	20000230 	.word	0x20000230

0000b754 <SERCOM2_Handler>:
    b754:	b580      	push	{r7, lr}
    b756:	af00      	add	r7, sp, #0
    b758:	4b03      	ldr	r3, [pc, #12]	; (b768 <SERCOM2_Handler+0x14>)
    b75a:	689b      	ldr	r3, [r3, #8]
    b75c:	2002      	movs	r0, #2
    b75e:	4798      	blx	r3
    b760:	46c0      	nop			; (mov r8, r8)
    b762:	46bd      	mov	sp, r7
    b764:	bd80      	pop	{r7, pc}
    b766:	46c0      	nop			; (mov r8, r8)
    b768:	20000230 	.word	0x20000230

0000b76c <SERCOM3_Handler>:
    b76c:	b580      	push	{r7, lr}
    b76e:	af00      	add	r7, sp, #0
    b770:	4b03      	ldr	r3, [pc, #12]	; (b780 <SERCOM3_Handler+0x14>)
    b772:	68db      	ldr	r3, [r3, #12]
    b774:	2003      	movs	r0, #3
    b776:	4798      	blx	r3
    b778:	46c0      	nop			; (mov r8, r8)
    b77a:	46bd      	mov	sp, r7
    b77c:	bd80      	pop	{r7, pc}
    b77e:	46c0      	nop			; (mov r8, r8)
    b780:	20000230 	.word	0x20000230

0000b784 <SERCOM4_Handler>:
    b784:	b580      	push	{r7, lr}
    b786:	af00      	add	r7, sp, #0
    b788:	4b03      	ldr	r3, [pc, #12]	; (b798 <SERCOM4_Handler+0x14>)
    b78a:	691b      	ldr	r3, [r3, #16]
    b78c:	2004      	movs	r0, #4
    b78e:	4798      	blx	r3
    b790:	46c0      	nop			; (mov r8, r8)
    b792:	46bd      	mov	sp, r7
    b794:	bd80      	pop	{r7, pc}
    b796:	46c0      	nop			; (mov r8, r8)
    b798:	20000230 	.word	0x20000230

0000b79c <SERCOM5_Handler>:
    b79c:	b580      	push	{r7, lr}
    b79e:	af00      	add	r7, sp, #0
    b7a0:	4b03      	ldr	r3, [pc, #12]	; (b7b0 <SERCOM5_Handler+0x14>)
    b7a2:	695b      	ldr	r3, [r3, #20]
    b7a4:	2005      	movs	r0, #5
    b7a6:	4798      	blx	r3
    b7a8:	46c0      	nop			; (mov r8, r8)
    b7aa:	46bd      	mov	sp, r7
    b7ac:	bd80      	pop	{r7, pc}
    b7ae:	46c0      	nop			; (mov r8, r8)
    b7b0:	20000230 	.word	0x20000230

0000b7b4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    b7b4:	b580      	push	{r7, lr}
    b7b6:	b082      	sub	sp, #8
    b7b8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    b7ba:	4b10      	ldr	r3, [pc, #64]	; (b7fc <cpu_irq_enter_critical+0x48>)
    b7bc:	681b      	ldr	r3, [r3, #0]
    b7be:	2b00      	cmp	r3, #0
    b7c0:	d112      	bne.n	b7e8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b7c2:	f3ef 8310 	mrs	r3, PRIMASK
    b7c6:	607b      	str	r3, [r7, #4]
  return(result);
    b7c8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    b7ca:	2b00      	cmp	r3, #0
    b7cc:	d109      	bne.n	b7e2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    b7ce:	b672      	cpsid	i
    b7d0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    b7d4:	4b0a      	ldr	r3, [pc, #40]	; (b800 <cpu_irq_enter_critical+0x4c>)
    b7d6:	2200      	movs	r2, #0
    b7d8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    b7da:	4b0a      	ldr	r3, [pc, #40]	; (b804 <cpu_irq_enter_critical+0x50>)
    b7dc:	2201      	movs	r2, #1
    b7de:	701a      	strb	r2, [r3, #0]
    b7e0:	e002      	b.n	b7e8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    b7e2:	4b08      	ldr	r3, [pc, #32]	; (b804 <cpu_irq_enter_critical+0x50>)
    b7e4:	2200      	movs	r2, #0
    b7e6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    b7e8:	4b04      	ldr	r3, [pc, #16]	; (b7fc <cpu_irq_enter_critical+0x48>)
    b7ea:	681b      	ldr	r3, [r3, #0]
    b7ec:	1c5a      	adds	r2, r3, #1
    b7ee:	4b03      	ldr	r3, [pc, #12]	; (b7fc <cpu_irq_enter_critical+0x48>)
    b7f0:	601a      	str	r2, [r3, #0]
}
    b7f2:	46c0      	nop			; (mov r8, r8)
    b7f4:	46bd      	mov	sp, r7
    b7f6:	b002      	add	sp, #8
    b7f8:	bd80      	pop	{r7, pc}
    b7fa:	46c0      	nop			; (mov r8, r8)
    b7fc:	20000248 	.word	0x20000248
    b800:	20000010 	.word	0x20000010
    b804:	2000024c 	.word	0x2000024c

0000b808 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    b808:	b580      	push	{r7, lr}
    b80a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    b80c:	4b0b      	ldr	r3, [pc, #44]	; (b83c <cpu_irq_leave_critical+0x34>)
    b80e:	681b      	ldr	r3, [r3, #0]
    b810:	1e5a      	subs	r2, r3, #1
    b812:	4b0a      	ldr	r3, [pc, #40]	; (b83c <cpu_irq_leave_critical+0x34>)
    b814:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    b816:	4b09      	ldr	r3, [pc, #36]	; (b83c <cpu_irq_leave_critical+0x34>)
    b818:	681b      	ldr	r3, [r3, #0]
    b81a:	2b00      	cmp	r3, #0
    b81c:	d10a      	bne.n	b834 <cpu_irq_leave_critical+0x2c>
    b81e:	4b08      	ldr	r3, [pc, #32]	; (b840 <cpu_irq_leave_critical+0x38>)
    b820:	781b      	ldrb	r3, [r3, #0]
    b822:	b2db      	uxtb	r3, r3
    b824:	2b00      	cmp	r3, #0
    b826:	d005      	beq.n	b834 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    b828:	4b06      	ldr	r3, [pc, #24]	; (b844 <cpu_irq_leave_critical+0x3c>)
    b82a:	2201      	movs	r2, #1
    b82c:	701a      	strb	r2, [r3, #0]
    b82e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b832:	b662      	cpsie	i
	}
}
    b834:	46c0      	nop			; (mov r8, r8)
    b836:	46bd      	mov	sp, r7
    b838:	bd80      	pop	{r7, pc}
    b83a:	46c0      	nop			; (mov r8, r8)
    b83c:	20000248 	.word	0x20000248
    b840:	2000024c 	.word	0x2000024c
    b844:	20000010 	.word	0x20000010

0000b848 <system_pinmux_get_group_from_gpio_pin>:
{
    b848:	b580      	push	{r7, lr}
    b84a:	b084      	sub	sp, #16
    b84c:	af00      	add	r7, sp, #0
    b84e:	0002      	movs	r2, r0
    b850:	1dfb      	adds	r3, r7, #7
    b852:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b854:	230f      	movs	r3, #15
    b856:	18fb      	adds	r3, r7, r3
    b858:	1dfa      	adds	r2, r7, #7
    b85a:	7812      	ldrb	r2, [r2, #0]
    b85c:	09d2      	lsrs	r2, r2, #7
    b85e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b860:	230e      	movs	r3, #14
    b862:	18fb      	adds	r3, r7, r3
    b864:	1dfa      	adds	r2, r7, #7
    b866:	7812      	ldrb	r2, [r2, #0]
    b868:	0952      	lsrs	r2, r2, #5
    b86a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b86c:	4b0d      	ldr	r3, [pc, #52]	; (b8a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b86e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    b870:	230f      	movs	r3, #15
    b872:	18fb      	adds	r3, r7, r3
    b874:	781b      	ldrb	r3, [r3, #0]
    b876:	2b00      	cmp	r3, #0
    b878:	d10f      	bne.n	b89a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b87a:	230f      	movs	r3, #15
    b87c:	18fb      	adds	r3, r7, r3
    b87e:	781b      	ldrb	r3, [r3, #0]
    b880:	009b      	lsls	r3, r3, #2
    b882:	2210      	movs	r2, #16
    b884:	4694      	mov	ip, r2
    b886:	44bc      	add	ip, r7
    b888:	4463      	add	r3, ip
    b88a:	3b08      	subs	r3, #8
    b88c:	681a      	ldr	r2, [r3, #0]
    b88e:	230e      	movs	r3, #14
    b890:	18fb      	adds	r3, r7, r3
    b892:	781b      	ldrb	r3, [r3, #0]
    b894:	01db      	lsls	r3, r3, #7
    b896:	18d3      	adds	r3, r2, r3
    b898:	e000      	b.n	b89c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    b89a:	2300      	movs	r3, #0
}
    b89c:	0018      	movs	r0, r3
    b89e:	46bd      	mov	sp, r7
    b8a0:	b004      	add	sp, #16
    b8a2:	bd80      	pop	{r7, pc}
    b8a4:	41004400 	.word	0x41004400

0000b8a8 <port_get_group_from_gpio_pin>:
{
    b8a8:	b580      	push	{r7, lr}
    b8aa:	b082      	sub	sp, #8
    b8ac:	af00      	add	r7, sp, #0
    b8ae:	0002      	movs	r2, r0
    b8b0:	1dfb      	adds	r3, r7, #7
    b8b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b8b4:	1dfb      	adds	r3, r7, #7
    b8b6:	781b      	ldrb	r3, [r3, #0]
    b8b8:	0018      	movs	r0, r3
    b8ba:	4b03      	ldr	r3, [pc, #12]	; (b8c8 <port_get_group_from_gpio_pin+0x20>)
    b8bc:	4798      	blx	r3
    b8be:	0003      	movs	r3, r0
}
    b8c0:	0018      	movs	r0, r3
    b8c2:	46bd      	mov	sp, r7
    b8c4:	b002      	add	sp, #8
    b8c6:	bd80      	pop	{r7, pc}
    b8c8:	0000b849 	.word	0x0000b849

0000b8cc <port_get_config_defaults>:
{
    b8cc:	b580      	push	{r7, lr}
    b8ce:	b082      	sub	sp, #8
    b8d0:	af00      	add	r7, sp, #0
    b8d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    b8d4:	687b      	ldr	r3, [r7, #4]
    b8d6:	2200      	movs	r2, #0
    b8d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b8da:	687b      	ldr	r3, [r7, #4]
    b8dc:	2201      	movs	r2, #1
    b8de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    b8e0:	687b      	ldr	r3, [r7, #4]
    b8e2:	2200      	movs	r2, #0
    b8e4:	709a      	strb	r2, [r3, #2]
}
    b8e6:	46c0      	nop			; (mov r8, r8)
    b8e8:	46bd      	mov	sp, r7
    b8ea:	b002      	add	sp, #8
    b8ec:	bd80      	pop	{r7, pc}
	...

0000b8f0 <port_pin_set_output_level>:
{
    b8f0:	b580      	push	{r7, lr}
    b8f2:	b084      	sub	sp, #16
    b8f4:	af00      	add	r7, sp, #0
    b8f6:	0002      	movs	r2, r0
    b8f8:	1dfb      	adds	r3, r7, #7
    b8fa:	701a      	strb	r2, [r3, #0]
    b8fc:	1dbb      	adds	r3, r7, #6
    b8fe:	1c0a      	adds	r2, r1, #0
    b900:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    b902:	1dfb      	adds	r3, r7, #7
    b904:	781b      	ldrb	r3, [r3, #0]
    b906:	0018      	movs	r0, r3
    b908:	4b0d      	ldr	r3, [pc, #52]	; (b940 <port_pin_set_output_level+0x50>)
    b90a:	4798      	blx	r3
    b90c:	0003      	movs	r3, r0
    b90e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b910:	1dfb      	adds	r3, r7, #7
    b912:	781b      	ldrb	r3, [r3, #0]
    b914:	221f      	movs	r2, #31
    b916:	4013      	ands	r3, r2
    b918:	2201      	movs	r2, #1
    b91a:	409a      	lsls	r2, r3
    b91c:	0013      	movs	r3, r2
    b91e:	60bb      	str	r3, [r7, #8]
	if (level) {
    b920:	1dbb      	adds	r3, r7, #6
    b922:	781b      	ldrb	r3, [r3, #0]
    b924:	2b00      	cmp	r3, #0
    b926:	d003      	beq.n	b930 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    b928:	68fb      	ldr	r3, [r7, #12]
    b92a:	68ba      	ldr	r2, [r7, #8]
    b92c:	619a      	str	r2, [r3, #24]
}
    b92e:	e002      	b.n	b936 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    b930:	68fb      	ldr	r3, [r7, #12]
    b932:	68ba      	ldr	r2, [r7, #8]
    b934:	615a      	str	r2, [r3, #20]
}
    b936:	46c0      	nop			; (mov r8, r8)
    b938:	46bd      	mov	sp, r7
    b93a:	b004      	add	sp, #16
    b93c:	bd80      	pop	{r7, pc}
    b93e:	46c0      	nop			; (mov r8, r8)
    b940:	0000b8a9 	.word	0x0000b8a9

0000b944 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    b944:	b580      	push	{r7, lr}
    b946:	b082      	sub	sp, #8
    b948:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    b94a:	1d3b      	adds	r3, r7, #4
    b94c:	0018      	movs	r0, r3
    b94e:	4b0e      	ldr	r3, [pc, #56]	; (b988 <system_board_init+0x44>)
    b950:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b952:	1d3b      	adds	r3, r7, #4
    b954:	2201      	movs	r2, #1
    b956:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    b958:	1d3b      	adds	r3, r7, #4
    b95a:	0019      	movs	r1, r3
    b95c:	2017      	movs	r0, #23
    b95e:	4b0b      	ldr	r3, [pc, #44]	; (b98c <system_board_init+0x48>)
    b960:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    b962:	2101      	movs	r1, #1
    b964:	2017      	movs	r0, #23
    b966:	4b0a      	ldr	r3, [pc, #40]	; (b990 <system_board_init+0x4c>)
    b968:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    b96a:	1d3b      	adds	r3, r7, #4
    b96c:	2200      	movs	r2, #0
    b96e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    b970:	1d3b      	adds	r3, r7, #4
    b972:	2201      	movs	r2, #1
    b974:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    b976:	1d3b      	adds	r3, r7, #4
    b978:	0019      	movs	r1, r3
    b97a:	2037      	movs	r0, #55	; 0x37
    b97c:	4b03      	ldr	r3, [pc, #12]	; (b98c <system_board_init+0x48>)
    b97e:	4798      	blx	r3
}
    b980:	46c0      	nop			; (mov r8, r8)
    b982:	46bd      	mov	sp, r7
    b984:	b002      	add	sp, #8
    b986:	bd80      	pop	{r7, pc}
    b988:	0000b8cd 	.word	0x0000b8cd
    b98c:	0000b9bd 	.word	0x0000b9bd
    b990:	0000b8f1 	.word	0x0000b8f1

0000b994 <system_pinmux_get_config_defaults>:
{
    b994:	b580      	push	{r7, lr}
    b996:	b082      	sub	sp, #8
    b998:	af00      	add	r7, sp, #0
    b99a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b99c:	687b      	ldr	r3, [r7, #4]
    b99e:	2280      	movs	r2, #128	; 0x80
    b9a0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b9a2:	687b      	ldr	r3, [r7, #4]
    b9a4:	2200      	movs	r2, #0
    b9a6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b9a8:	687b      	ldr	r3, [r7, #4]
    b9aa:	2201      	movs	r2, #1
    b9ac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b9ae:	687b      	ldr	r3, [r7, #4]
    b9b0:	2200      	movs	r2, #0
    b9b2:	70da      	strb	r2, [r3, #3]
}
    b9b4:	46c0      	nop			; (mov r8, r8)
    b9b6:	46bd      	mov	sp, r7
    b9b8:	b002      	add	sp, #8
    b9ba:	bd80      	pop	{r7, pc}

0000b9bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    b9bc:	b580      	push	{r7, lr}
    b9be:	b084      	sub	sp, #16
    b9c0:	af00      	add	r7, sp, #0
    b9c2:	0002      	movs	r2, r0
    b9c4:	6039      	str	r1, [r7, #0]
    b9c6:	1dfb      	adds	r3, r7, #7
    b9c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    b9ca:	230c      	movs	r3, #12
    b9cc:	18fb      	adds	r3, r7, r3
    b9ce:	0018      	movs	r0, r3
    b9d0:	4b10      	ldr	r3, [pc, #64]	; (ba14 <port_pin_set_config+0x58>)
    b9d2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    b9d4:	230c      	movs	r3, #12
    b9d6:	18fb      	adds	r3, r7, r3
    b9d8:	2280      	movs	r2, #128	; 0x80
    b9da:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    b9dc:	683b      	ldr	r3, [r7, #0]
    b9de:	781a      	ldrb	r2, [r3, #0]
    b9e0:	230c      	movs	r3, #12
    b9e2:	18fb      	adds	r3, r7, r3
    b9e4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    b9e6:	683b      	ldr	r3, [r7, #0]
    b9e8:	785a      	ldrb	r2, [r3, #1]
    b9ea:	230c      	movs	r3, #12
    b9ec:	18fb      	adds	r3, r7, r3
    b9ee:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    b9f0:	683b      	ldr	r3, [r7, #0]
    b9f2:	789a      	ldrb	r2, [r3, #2]
    b9f4:	230c      	movs	r3, #12
    b9f6:	18fb      	adds	r3, r7, r3
    b9f8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    b9fa:	230c      	movs	r3, #12
    b9fc:	18fa      	adds	r2, r7, r3
    b9fe:	1dfb      	adds	r3, r7, #7
    ba00:	781b      	ldrb	r3, [r3, #0]
    ba02:	0011      	movs	r1, r2
    ba04:	0018      	movs	r0, r3
    ba06:	4b04      	ldr	r3, [pc, #16]	; (ba18 <port_pin_set_config+0x5c>)
    ba08:	4798      	blx	r3
}
    ba0a:	46c0      	nop			; (mov r8, r8)
    ba0c:	46bd      	mov	sp, r7
    ba0e:	b004      	add	sp, #16
    ba10:	bd80      	pop	{r7, pc}
    ba12:	46c0      	nop			; (mov r8, r8)
    ba14:	0000b995 	.word	0x0000b995
    ba18:	0000c945 	.word	0x0000c945

0000ba1c <system_gclk_gen_get_config_defaults>:
{
    ba1c:	b580      	push	{r7, lr}
    ba1e:	b082      	sub	sp, #8
    ba20:	af00      	add	r7, sp, #0
    ba22:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    ba24:	687b      	ldr	r3, [r7, #4]
    ba26:	2201      	movs	r2, #1
    ba28:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    ba2a:	687b      	ldr	r3, [r7, #4]
    ba2c:	2200      	movs	r2, #0
    ba2e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    ba30:	687b      	ldr	r3, [r7, #4]
    ba32:	2206      	movs	r2, #6
    ba34:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    ba36:	687b      	ldr	r3, [r7, #4]
    ba38:	2200      	movs	r2, #0
    ba3a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    ba3c:	687b      	ldr	r3, [r7, #4]
    ba3e:	2200      	movs	r2, #0
    ba40:	725a      	strb	r2, [r3, #9]
}
    ba42:	46c0      	nop			; (mov r8, r8)
    ba44:	46bd      	mov	sp, r7
    ba46:	b002      	add	sp, #8
    ba48:	bd80      	pop	{r7, pc}

0000ba4a <system_gclk_chan_get_config_defaults>:
{
    ba4a:	b580      	push	{r7, lr}
    ba4c:	b082      	sub	sp, #8
    ba4e:	af00      	add	r7, sp, #0
    ba50:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    ba52:	687b      	ldr	r3, [r7, #4]
    ba54:	2200      	movs	r2, #0
    ba56:	701a      	strb	r2, [r3, #0]
}
    ba58:	46c0      	nop			; (mov r8, r8)
    ba5a:	46bd      	mov	sp, r7
    ba5c:	b002      	add	sp, #8
    ba5e:	bd80      	pop	{r7, pc}

0000ba60 <system_clock_source_xosc32k_get_config_defaults>:
{
    ba60:	b580      	push	{r7, lr}
    ba62:	b082      	sub	sp, #8
    ba64:	af00      	add	r7, sp, #0
    ba66:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    ba68:	687b      	ldr	r3, [r7, #4]
    ba6a:	2200      	movs	r2, #0
    ba6c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    ba6e:	687b      	ldr	r3, [r7, #4]
    ba70:	2204      	movs	r2, #4
    ba72:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    ba74:	687b      	ldr	r3, [r7, #4]
    ba76:	2200      	movs	r2, #0
    ba78:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    ba7a:	687b      	ldr	r3, [r7, #4]
    ba7c:	2280      	movs	r2, #128	; 0x80
    ba7e:	0212      	lsls	r2, r2, #8
    ba80:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    ba82:	687b      	ldr	r3, [r7, #4]
    ba84:	2200      	movs	r2, #0
    ba86:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    ba88:	687b      	ldr	r3, [r7, #4]
    ba8a:	2201      	movs	r2, #1
    ba8c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    ba8e:	687b      	ldr	r3, [r7, #4]
    ba90:	2200      	movs	r2, #0
    ba92:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    ba94:	687b      	ldr	r3, [r7, #4]
    ba96:	2201      	movs	r2, #1
    ba98:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    ba9a:	687b      	ldr	r3, [r7, #4]
    ba9c:	2200      	movs	r2, #0
    ba9e:	739a      	strb	r2, [r3, #14]
}
    baa0:	46c0      	nop			; (mov r8, r8)
    baa2:	46bd      	mov	sp, r7
    baa4:	b002      	add	sp, #8
    baa6:	bd80      	pop	{r7, pc}

0000baa8 <system_clock_source_osc8m_get_config_defaults>:
{
    baa8:	b580      	push	{r7, lr}
    baaa:	b082      	sub	sp, #8
    baac:	af00      	add	r7, sp, #0
    baae:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    bab0:	687b      	ldr	r3, [r7, #4]
    bab2:	2203      	movs	r2, #3
    bab4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    bab6:	687b      	ldr	r3, [r7, #4]
    bab8:	2200      	movs	r2, #0
    baba:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    babc:	687b      	ldr	r3, [r7, #4]
    babe:	2201      	movs	r2, #1
    bac0:	709a      	strb	r2, [r3, #2]
}
    bac2:	46c0      	nop			; (mov r8, r8)
    bac4:	46bd      	mov	sp, r7
    bac6:	b002      	add	sp, #8
    bac8:	bd80      	pop	{r7, pc}

0000baca <system_clock_source_dfll_get_config_defaults>:
{
    baca:	b580      	push	{r7, lr}
    bacc:	b082      	sub	sp, #8
    bace:	af00      	add	r7, sp, #0
    bad0:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    bad2:	687b      	ldr	r3, [r7, #4]
    bad4:	2200      	movs	r2, #0
    bad6:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    bad8:	687b      	ldr	r3, [r7, #4]
    bada:	2200      	movs	r2, #0
    badc:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    bade:	687b      	ldr	r3, [r7, #4]
    bae0:	2200      	movs	r2, #0
    bae2:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    bae4:	687b      	ldr	r3, [r7, #4]
    bae6:	2200      	movs	r2, #0
    bae8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    baea:	687b      	ldr	r3, [r7, #4]
    baec:	2200      	movs	r2, #0
    baee:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    baf0:	687b      	ldr	r3, [r7, #4]
    baf2:	2201      	movs	r2, #1
    baf4:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    baf6:	687b      	ldr	r3, [r7, #4]
    baf8:	2207      	movs	r2, #7
    bafa:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    bafc:	687b      	ldr	r3, [r7, #4]
    bafe:	223f      	movs	r2, #63	; 0x3f
    bb00:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    bb02:	687b      	ldr	r3, [r7, #4]
    bb04:	2201      	movs	r2, #1
    bb06:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    bb08:	687b      	ldr	r3, [r7, #4]
    bb0a:	2201      	movs	r2, #1
    bb0c:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    bb0e:	687b      	ldr	r3, [r7, #4]
    bb10:	2206      	movs	r2, #6
    bb12:	821a      	strh	r2, [r3, #16]
}
    bb14:	46c0      	nop			; (mov r8, r8)
    bb16:	46bd      	mov	sp, r7
    bb18:	b002      	add	sp, #8
    bb1a:	bd80      	pop	{r7, pc}

0000bb1c <system_cpu_clock_set_divider>:
{
    bb1c:	b580      	push	{r7, lr}
    bb1e:	b082      	sub	sp, #8
    bb20:	af00      	add	r7, sp, #0
    bb22:	0002      	movs	r2, r0
    bb24:	1dfb      	adds	r3, r7, #7
    bb26:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    bb28:	4a03      	ldr	r2, [pc, #12]	; (bb38 <system_cpu_clock_set_divider+0x1c>)
    bb2a:	1dfb      	adds	r3, r7, #7
    bb2c:	781b      	ldrb	r3, [r3, #0]
    bb2e:	7213      	strb	r3, [r2, #8]
}
    bb30:	46c0      	nop			; (mov r8, r8)
    bb32:	46bd      	mov	sp, r7
    bb34:	b002      	add	sp, #8
    bb36:	bd80      	pop	{r7, pc}
    bb38:	40000400 	.word	0x40000400

0000bb3c <system_apb_clock_set_divider>:
{
    bb3c:	b580      	push	{r7, lr}
    bb3e:	b082      	sub	sp, #8
    bb40:	af00      	add	r7, sp, #0
    bb42:	0002      	movs	r2, r0
    bb44:	1dfb      	adds	r3, r7, #7
    bb46:	701a      	strb	r2, [r3, #0]
    bb48:	1dbb      	adds	r3, r7, #6
    bb4a:	1c0a      	adds	r2, r1, #0
    bb4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    bb4e:	1dfb      	adds	r3, r7, #7
    bb50:	781b      	ldrb	r3, [r3, #0]
    bb52:	2b01      	cmp	r3, #1
    bb54:	d008      	beq.n	bb68 <system_apb_clock_set_divider+0x2c>
    bb56:	2b02      	cmp	r3, #2
    bb58:	d00b      	beq.n	bb72 <system_apb_clock_set_divider+0x36>
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	d10e      	bne.n	bb7c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    bb5e:	4a0b      	ldr	r2, [pc, #44]	; (bb8c <system_apb_clock_set_divider+0x50>)
    bb60:	1dbb      	adds	r3, r7, #6
    bb62:	781b      	ldrb	r3, [r3, #0]
    bb64:	7253      	strb	r3, [r2, #9]
			break;
    bb66:	e00b      	b.n	bb80 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    bb68:	4a08      	ldr	r2, [pc, #32]	; (bb8c <system_apb_clock_set_divider+0x50>)
    bb6a:	1dbb      	adds	r3, r7, #6
    bb6c:	781b      	ldrb	r3, [r3, #0]
    bb6e:	7293      	strb	r3, [r2, #10]
			break;
    bb70:	e006      	b.n	bb80 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    bb72:	4a06      	ldr	r2, [pc, #24]	; (bb8c <system_apb_clock_set_divider+0x50>)
    bb74:	1dbb      	adds	r3, r7, #6
    bb76:	781b      	ldrb	r3, [r3, #0]
    bb78:	72d3      	strb	r3, [r2, #11]
			break;
    bb7a:	e001      	b.n	bb80 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    bb7c:	2317      	movs	r3, #23
    bb7e:	e000      	b.n	bb82 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    bb80:	2300      	movs	r3, #0
}
    bb82:	0018      	movs	r0, r3
    bb84:	46bd      	mov	sp, r7
    bb86:	b002      	add	sp, #8
    bb88:	bd80      	pop	{r7, pc}
    bb8a:	46c0      	nop			; (mov r8, r8)
    bb8c:	40000400 	.word	0x40000400

0000bb90 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    bb90:	b580      	push	{r7, lr}
    bb92:	b082      	sub	sp, #8
    bb94:	af00      	add	r7, sp, #0
    bb96:	0002      	movs	r2, r0
    bb98:	1dfb      	adds	r3, r7, #7
    bb9a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    bb9c:	4a08      	ldr	r2, [pc, #32]	; (bbc0 <system_flash_set_waitstates+0x30>)
    bb9e:	1dfb      	adds	r3, r7, #7
    bba0:	781b      	ldrb	r3, [r3, #0]
    bba2:	210f      	movs	r1, #15
    bba4:	400b      	ands	r3, r1
    bba6:	b2d9      	uxtb	r1, r3
    bba8:	6853      	ldr	r3, [r2, #4]
    bbaa:	200f      	movs	r0, #15
    bbac:	4001      	ands	r1, r0
    bbae:	0049      	lsls	r1, r1, #1
    bbb0:	201e      	movs	r0, #30
    bbb2:	4383      	bics	r3, r0
    bbb4:	430b      	orrs	r3, r1
    bbb6:	6053      	str	r3, [r2, #4]
}
    bbb8:	46c0      	nop			; (mov r8, r8)
    bbba:	46bd      	mov	sp, r7
    bbbc:	b002      	add	sp, #8
    bbbe:	bd80      	pop	{r7, pc}
    bbc0:	41004000 	.word	0x41004000

0000bbc4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    bbc4:	b580      	push	{r7, lr}
    bbc6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    bbc8:	46c0      	nop			; (mov r8, r8)
    bbca:	4b04      	ldr	r3, [pc, #16]	; (bbdc <_system_dfll_wait_for_sync+0x18>)
    bbcc:	68db      	ldr	r3, [r3, #12]
    bbce:	2210      	movs	r2, #16
    bbd0:	4013      	ands	r3, r2
    bbd2:	d0fa      	beq.n	bbca <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    bbd4:	46c0      	nop			; (mov r8, r8)
    bbd6:	46bd      	mov	sp, r7
    bbd8:	bd80      	pop	{r7, pc}
    bbda:	46c0      	nop			; (mov r8, r8)
    bbdc:	40000800 	.word	0x40000800

0000bbe0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    bbe0:	b580      	push	{r7, lr}
    bbe2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    bbe4:	4b0c      	ldr	r3, [pc, #48]	; (bc18 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bbe6:	2202      	movs	r2, #2
    bbe8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    bbea:	4b0c      	ldr	r3, [pc, #48]	; (bc1c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    bbec:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    bbee:	4a0a      	ldr	r2, [pc, #40]	; (bc18 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bbf0:	4b0b      	ldr	r3, [pc, #44]	; (bc20 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    bbf2:	689b      	ldr	r3, [r3, #8]
    bbf4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    bbf6:	4a08      	ldr	r2, [pc, #32]	; (bc18 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bbf8:	4b09      	ldr	r3, [pc, #36]	; (bc20 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    bbfa:	685b      	ldr	r3, [r3, #4]
    bbfc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    bbfe:	4b06      	ldr	r3, [pc, #24]	; (bc18 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bc00:	2200      	movs	r2, #0
    bc02:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    bc04:	4b05      	ldr	r3, [pc, #20]	; (bc1c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    bc06:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    bc08:	4a03      	ldr	r2, [pc, #12]	; (bc18 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bc0a:	4b05      	ldr	r3, [pc, #20]	; (bc20 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    bc0c:	681b      	ldr	r3, [r3, #0]
    bc0e:	b29b      	uxth	r3, r3
    bc10:	8493      	strh	r3, [r2, #36]	; 0x24
}
    bc12:	46c0      	nop			; (mov r8, r8)
    bc14:	46bd      	mov	sp, r7
    bc16:	bd80      	pop	{r7, pc}
    bc18:	40000800 	.word	0x40000800
    bc1c:	0000bbc5 	.word	0x0000bbc5
    bc20:	20000250 	.word	0x20000250

0000bc24 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    bc24:	b580      	push	{r7, lr}
    bc26:	b082      	sub	sp, #8
    bc28:	af00      	add	r7, sp, #0
    bc2a:	0002      	movs	r2, r0
    bc2c:	1dfb      	adds	r3, r7, #7
    bc2e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    bc30:	1dfb      	adds	r3, r7, #7
    bc32:	781b      	ldrb	r3, [r3, #0]
    bc34:	2b08      	cmp	r3, #8
    bc36:	d840      	bhi.n	bcba <system_clock_source_get_hz+0x96>
    bc38:	009a      	lsls	r2, r3, #2
    bc3a:	4b22      	ldr	r3, [pc, #136]	; (bcc4 <system_clock_source_get_hz+0xa0>)
    bc3c:	18d3      	adds	r3, r2, r3
    bc3e:	681b      	ldr	r3, [r3, #0]
    bc40:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    bc42:	4b21      	ldr	r3, [pc, #132]	; (bcc8 <system_clock_source_get_hz+0xa4>)
    bc44:	691b      	ldr	r3, [r3, #16]
    bc46:	e039      	b.n	bcbc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    bc48:	4b20      	ldr	r3, [pc, #128]	; (bccc <system_clock_source_get_hz+0xa8>)
    bc4a:	6a1b      	ldr	r3, [r3, #32]
    bc4c:	059b      	lsls	r3, r3, #22
    bc4e:	0f9b      	lsrs	r3, r3, #30
    bc50:	b2db      	uxtb	r3, r3
    bc52:	001a      	movs	r2, r3
    bc54:	4b1e      	ldr	r3, [pc, #120]	; (bcd0 <system_clock_source_get_hz+0xac>)
    bc56:	40d3      	lsrs	r3, r2
    bc58:	e030      	b.n	bcbc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    bc5a:	2380      	movs	r3, #128	; 0x80
    bc5c:	021b      	lsls	r3, r3, #8
    bc5e:	e02d      	b.n	bcbc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    bc60:	2380      	movs	r3, #128	; 0x80
    bc62:	021b      	lsls	r3, r3, #8
    bc64:	e02a      	b.n	bcbc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    bc66:	4b18      	ldr	r3, [pc, #96]	; (bcc8 <system_clock_source_get_hz+0xa4>)
    bc68:	695b      	ldr	r3, [r3, #20]
    bc6a:	e027      	b.n	bcbc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    bc6c:	4b16      	ldr	r3, [pc, #88]	; (bcc8 <system_clock_source_get_hz+0xa4>)
    bc6e:	681b      	ldr	r3, [r3, #0]
    bc70:	2202      	movs	r2, #2
    bc72:	4013      	ands	r3, r2
    bc74:	d101      	bne.n	bc7a <system_clock_source_get_hz+0x56>
			return 0;
    bc76:	2300      	movs	r3, #0
    bc78:	e020      	b.n	bcbc <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    bc7a:	4b16      	ldr	r3, [pc, #88]	; (bcd4 <system_clock_source_get_hz+0xb0>)
    bc7c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    bc7e:	4b12      	ldr	r3, [pc, #72]	; (bcc8 <system_clock_source_get_hz+0xa4>)
    bc80:	681b      	ldr	r3, [r3, #0]
    bc82:	2204      	movs	r2, #4
    bc84:	4013      	ands	r3, r2
    bc86:	d009      	beq.n	bc9c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    bc88:	2000      	movs	r0, #0
    bc8a:	4b13      	ldr	r3, [pc, #76]	; (bcd8 <system_clock_source_get_hz+0xb4>)
    bc8c:	4798      	blx	r3
    bc8e:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    bc90:	4b0d      	ldr	r3, [pc, #52]	; (bcc8 <system_clock_source_get_hz+0xa4>)
    bc92:	689b      	ldr	r3, [r3, #8]
    bc94:	041b      	lsls	r3, r3, #16
    bc96:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    bc98:	4353      	muls	r3, r2
    bc9a:	e00f      	b.n	bcbc <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    bc9c:	4b0f      	ldr	r3, [pc, #60]	; (bcdc <system_clock_source_get_hz+0xb8>)
    bc9e:	e00d      	b.n	bcbc <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    bca0:	4a0a      	ldr	r2, [pc, #40]	; (bccc <system_clock_source_get_hz+0xa8>)
    bca2:	2350      	movs	r3, #80	; 0x50
    bca4:	5cd3      	ldrb	r3, [r2, r3]
    bca6:	b2db      	uxtb	r3, r3
    bca8:	001a      	movs	r2, r3
    bcaa:	2304      	movs	r3, #4
    bcac:	4013      	ands	r3, r2
    bcae:	d101      	bne.n	bcb4 <system_clock_source_get_hz+0x90>
			return 0;
    bcb0:	2300      	movs	r3, #0
    bcb2:	e003      	b.n	bcbc <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    bcb4:	4b04      	ldr	r3, [pc, #16]	; (bcc8 <system_clock_source_get_hz+0xa4>)
    bcb6:	68db      	ldr	r3, [r3, #12]
    bcb8:	e000      	b.n	bcbc <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    bcba:	2300      	movs	r3, #0
	}
}
    bcbc:	0018      	movs	r0, r3
    bcbe:	46bd      	mov	sp, r7
    bcc0:	b002      	add	sp, #8
    bcc2:	bd80      	pop	{r7, pc}
    bcc4:	00013f08 	.word	0x00013f08
    bcc8:	20000250 	.word	0x20000250
    bccc:	40000800 	.word	0x40000800
    bcd0:	007a1200 	.word	0x007a1200
    bcd4:	0000bbc5 	.word	0x0000bbc5
    bcd8:	0000c77d 	.word	0x0000c77d
    bcdc:	02dc6c00 	.word	0x02dc6c00

0000bce0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    bce0:	b580      	push	{r7, lr}
    bce2:	b084      	sub	sp, #16
    bce4:	af00      	add	r7, sp, #0
    bce6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    bce8:	4b1a      	ldr	r3, [pc, #104]	; (bd54 <system_clock_source_osc8m_set_config+0x74>)
    bcea:	6a1b      	ldr	r3, [r3, #32]
    bcec:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    bcee:	687b      	ldr	r3, [r7, #4]
    bcf0:	781b      	ldrb	r3, [r3, #0]
    bcf2:	1c1a      	adds	r2, r3, #0
    bcf4:	2303      	movs	r3, #3
    bcf6:	4013      	ands	r3, r2
    bcf8:	b2da      	uxtb	r2, r3
    bcfa:	230d      	movs	r3, #13
    bcfc:	18fb      	adds	r3, r7, r3
    bcfe:	2103      	movs	r1, #3
    bd00:	400a      	ands	r2, r1
    bd02:	0010      	movs	r0, r2
    bd04:	781a      	ldrb	r2, [r3, #0]
    bd06:	2103      	movs	r1, #3
    bd08:	438a      	bics	r2, r1
    bd0a:	1c11      	adds	r1, r2, #0
    bd0c:	1c02      	adds	r2, r0, #0
    bd0e:	430a      	orrs	r2, r1
    bd10:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    bd12:	687b      	ldr	r3, [r7, #4]
    bd14:	789a      	ldrb	r2, [r3, #2]
    bd16:	230c      	movs	r3, #12
    bd18:	18fb      	adds	r3, r7, r3
    bd1a:	01d0      	lsls	r0, r2, #7
    bd1c:	781a      	ldrb	r2, [r3, #0]
    bd1e:	217f      	movs	r1, #127	; 0x7f
    bd20:	400a      	ands	r2, r1
    bd22:	1c11      	adds	r1, r2, #0
    bd24:	1c02      	adds	r2, r0, #0
    bd26:	430a      	orrs	r2, r1
    bd28:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    bd2a:	687b      	ldr	r3, [r7, #4]
    bd2c:	785a      	ldrb	r2, [r3, #1]
    bd2e:	230c      	movs	r3, #12
    bd30:	18fb      	adds	r3, r7, r3
    bd32:	2101      	movs	r1, #1
    bd34:	400a      	ands	r2, r1
    bd36:	0190      	lsls	r0, r2, #6
    bd38:	781a      	ldrb	r2, [r3, #0]
    bd3a:	2140      	movs	r1, #64	; 0x40
    bd3c:	438a      	bics	r2, r1
    bd3e:	1c11      	adds	r1, r2, #0
    bd40:	1c02      	adds	r2, r0, #0
    bd42:	430a      	orrs	r2, r1
    bd44:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    bd46:	4b03      	ldr	r3, [pc, #12]	; (bd54 <system_clock_source_osc8m_set_config+0x74>)
    bd48:	68fa      	ldr	r2, [r7, #12]
    bd4a:	621a      	str	r2, [r3, #32]
}
    bd4c:	46c0      	nop			; (mov r8, r8)
    bd4e:	46bd      	mov	sp, r7
    bd50:	b004      	add	sp, #16
    bd52:	bd80      	pop	{r7, pc}
    bd54:	40000800 	.word	0x40000800

0000bd58 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    bd58:	b580      	push	{r7, lr}
    bd5a:	b084      	sub	sp, #16
    bd5c:	af00      	add	r7, sp, #0
    bd5e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    bd60:	4a43      	ldr	r2, [pc, #268]	; (be70 <system_clock_source_xosc32k_set_config+0x118>)
    bd62:	230c      	movs	r3, #12
    bd64:	18fb      	adds	r3, r7, r3
    bd66:	8a92      	ldrh	r2, [r2, #20]
    bd68:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    bd6a:	687b      	ldr	r3, [r7, #4]
    bd6c:	785b      	ldrb	r3, [r3, #1]
    bd6e:	1c1a      	adds	r2, r3, #0
    bd70:	2307      	movs	r3, #7
    bd72:	4013      	ands	r3, r2
    bd74:	b2da      	uxtb	r2, r3
    bd76:	230c      	movs	r3, #12
    bd78:	18fb      	adds	r3, r7, r3
    bd7a:	2107      	movs	r1, #7
    bd7c:	400a      	ands	r2, r1
    bd7e:	0010      	movs	r0, r2
    bd80:	785a      	ldrb	r2, [r3, #1]
    bd82:	2107      	movs	r1, #7
    bd84:	438a      	bics	r2, r1
    bd86:	1c11      	adds	r1, r2, #0
    bd88:	1c02      	adds	r2, r0, #0
    bd8a:	430a      	orrs	r2, r1
    bd8c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    bd8e:	687b      	ldr	r3, [r7, #4]
    bd90:	781b      	ldrb	r3, [r3, #0]
    bd92:	2b00      	cmp	r3, #0
    bd94:	d106      	bne.n	bda4 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    bd96:	230c      	movs	r3, #12
    bd98:	18fb      	adds	r3, r7, r3
    bd9a:	781a      	ldrb	r2, [r3, #0]
    bd9c:	2104      	movs	r1, #4
    bd9e:	430a      	orrs	r2, r1
    bda0:	701a      	strb	r2, [r3, #0]
    bda2:	e005      	b.n	bdb0 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    bda4:	230c      	movs	r3, #12
    bda6:	18fb      	adds	r3, r7, r3
    bda8:	781a      	ldrb	r2, [r3, #0]
    bdaa:	2104      	movs	r1, #4
    bdac:	438a      	bics	r2, r1
    bdae:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    bdb0:	687b      	ldr	r3, [r7, #4]
    bdb2:	789a      	ldrb	r2, [r3, #2]
    bdb4:	230c      	movs	r3, #12
    bdb6:	18fb      	adds	r3, r7, r3
    bdb8:	2101      	movs	r1, #1
    bdba:	400a      	ands	r2, r1
    bdbc:	0150      	lsls	r0, r2, #5
    bdbe:	781a      	ldrb	r2, [r3, #0]
    bdc0:	2120      	movs	r1, #32
    bdc2:	438a      	bics	r2, r1
    bdc4:	1c11      	adds	r1, r2, #0
    bdc6:	1c02      	adds	r2, r0, #0
    bdc8:	430a      	orrs	r2, r1
    bdca:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    bdcc:	687b      	ldr	r3, [r7, #4]
    bdce:	78da      	ldrb	r2, [r3, #3]
    bdd0:	230c      	movs	r3, #12
    bdd2:	18fb      	adds	r3, r7, r3
    bdd4:	2101      	movs	r1, #1
    bdd6:	400a      	ands	r2, r1
    bdd8:	0110      	lsls	r0, r2, #4
    bdda:	781a      	ldrb	r2, [r3, #0]
    bddc:	2110      	movs	r1, #16
    bdde:	438a      	bics	r2, r1
    bde0:	1c11      	adds	r1, r2, #0
    bde2:	1c02      	adds	r2, r0, #0
    bde4:	430a      	orrs	r2, r1
    bde6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    bde8:	687b      	ldr	r3, [r7, #4]
    bdea:	791a      	ldrb	r2, [r3, #4]
    bdec:	230c      	movs	r3, #12
    bdee:	18fb      	adds	r3, r7, r3
    bdf0:	2101      	movs	r1, #1
    bdf2:	400a      	ands	r2, r1
    bdf4:	00d0      	lsls	r0, r2, #3
    bdf6:	781a      	ldrb	r2, [r3, #0]
    bdf8:	2108      	movs	r1, #8
    bdfa:	438a      	bics	r2, r1
    bdfc:	1c11      	adds	r1, r2, #0
    bdfe:	1c02      	adds	r2, r0, #0
    be00:	430a      	orrs	r2, r1
    be02:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    be04:	687b      	ldr	r3, [r7, #4]
    be06:	7b5a      	ldrb	r2, [r3, #13]
    be08:	230c      	movs	r3, #12
    be0a:	18fb      	adds	r3, r7, r3
    be0c:	01d0      	lsls	r0, r2, #7
    be0e:	781a      	ldrb	r2, [r3, #0]
    be10:	217f      	movs	r1, #127	; 0x7f
    be12:	400a      	ands	r2, r1
    be14:	1c11      	adds	r1, r2, #0
    be16:	1c02      	adds	r2, r0, #0
    be18:	430a      	orrs	r2, r1
    be1a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    be1c:	687b      	ldr	r3, [r7, #4]
    be1e:	7b1a      	ldrb	r2, [r3, #12]
    be20:	230c      	movs	r3, #12
    be22:	18fb      	adds	r3, r7, r3
    be24:	2101      	movs	r1, #1
    be26:	400a      	ands	r2, r1
    be28:	0190      	lsls	r0, r2, #6
    be2a:	781a      	ldrb	r2, [r3, #0]
    be2c:	2140      	movs	r1, #64	; 0x40
    be2e:	438a      	bics	r2, r1
    be30:	1c11      	adds	r1, r2, #0
    be32:	1c02      	adds	r2, r0, #0
    be34:	430a      	orrs	r2, r1
    be36:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    be38:	687b      	ldr	r3, [r7, #4]
    be3a:	7b9a      	ldrb	r2, [r3, #14]
    be3c:	230c      	movs	r3, #12
    be3e:	18fb      	adds	r3, r7, r3
    be40:	2101      	movs	r1, #1
    be42:	400a      	ands	r2, r1
    be44:	0110      	lsls	r0, r2, #4
    be46:	785a      	ldrb	r2, [r3, #1]
    be48:	2110      	movs	r1, #16
    be4a:	438a      	bics	r2, r1
    be4c:	1c11      	adds	r1, r2, #0
    be4e:	1c02      	adds	r2, r0, #0
    be50:	430a      	orrs	r2, r1
    be52:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    be54:	687b      	ldr	r3, [r7, #4]
    be56:	689a      	ldr	r2, [r3, #8]
    be58:	4b06      	ldr	r3, [pc, #24]	; (be74 <system_clock_source_xosc32k_set_config+0x11c>)
    be5a:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    be5c:	4a04      	ldr	r2, [pc, #16]	; (be70 <system_clock_source_xosc32k_set_config+0x118>)
    be5e:	230c      	movs	r3, #12
    be60:	18fb      	adds	r3, r7, r3
    be62:	881b      	ldrh	r3, [r3, #0]
    be64:	8293      	strh	r3, [r2, #20]
}
    be66:	46c0      	nop			; (mov r8, r8)
    be68:	46bd      	mov	sp, r7
    be6a:	b004      	add	sp, #16
    be6c:	bd80      	pop	{r7, pc}
    be6e:	46c0      	nop			; (mov r8, r8)
    be70:	40000800 	.word	0x40000800
    be74:	20000250 	.word	0x20000250

0000be78 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    be78:	b580      	push	{r7, lr}
    be7a:	b082      	sub	sp, #8
    be7c:	af00      	add	r7, sp, #0
    be7e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    be80:	687b      	ldr	r3, [r7, #4]
    be82:	7a1b      	ldrb	r3, [r3, #8]
    be84:	029b      	lsls	r3, r3, #10
    be86:	041b      	lsls	r3, r3, #16
    be88:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    be8a:	687b      	ldr	r3, [r7, #4]
    be8c:	895b      	ldrh	r3, [r3, #10]
    be8e:	059b      	lsls	r3, r3, #22
    be90:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    be92:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    be94:	4b2a      	ldr	r3, [pc, #168]	; (bf40 <system_clock_source_dfll_set_config+0xc8>)
    be96:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    be9c:	687b      	ldr	r3, [r7, #4]
    be9e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    bea0:	4313      	orrs	r3, r2
    bea2:	b2db      	uxtb	r3, r3
    bea4:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    bea6:	687b      	ldr	r3, [r7, #4]
    bea8:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    beaa:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    beac:	687a      	ldr	r2, [r7, #4]
    beae:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    beb0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    beb2:	687b      	ldr	r3, [r7, #4]
    beb4:	785b      	ldrb	r3, [r3, #1]
    beb6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    beb8:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    beba:	4b21      	ldr	r3, [pc, #132]	; (bf40 <system_clock_source_dfll_set_config+0xc8>)
    bebc:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    bebe:	687b      	ldr	r3, [r7, #4]
    bec0:	781b      	ldrb	r3, [r3, #0]
    bec2:	2b04      	cmp	r3, #4
    bec4:	d116      	bne.n	bef4 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	7b1b      	ldrb	r3, [r3, #12]
    beca:	069b      	lsls	r3, r3, #26
    becc:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bece:	687b      	ldr	r3, [r7, #4]
    bed0:	89db      	ldrh	r3, [r3, #14]
    bed2:	041b      	lsls	r3, r3, #16
    bed4:	0019      	movs	r1, r3
    bed6:	4b1b      	ldr	r3, [pc, #108]	; (bf44 <system_clock_source_dfll_set_config+0xcc>)
    bed8:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    beda:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    bedc:	687a      	ldr	r2, [r7, #4]
    bede:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bee0:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    bee2:	4b17      	ldr	r3, [pc, #92]	; (bf40 <system_clock_source_dfll_set_config+0xc8>)
    bee4:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    bee6:	4b16      	ldr	r3, [pc, #88]	; (bf40 <system_clock_source_dfll_set_config+0xc8>)
    bee8:	681b      	ldr	r3, [r3, #0]
    beea:	687a      	ldr	r2, [r7, #4]
    beec:	7812      	ldrb	r2, [r2, #0]
    beee:	431a      	orrs	r2, r3
    bef0:	4b13      	ldr	r3, [pc, #76]	; (bf40 <system_clock_source_dfll_set_config+0xc8>)
    bef2:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    bef4:	687b      	ldr	r3, [r7, #4]
    bef6:	781b      	ldrb	r3, [r3, #0]
    bef8:	2b20      	cmp	r3, #32
    befa:	d11c      	bne.n	bf36 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    befc:	687b      	ldr	r3, [r7, #4]
    befe:	7b1b      	ldrb	r3, [r3, #12]
    bf00:	069b      	lsls	r3, r3, #26
    bf02:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bf04:	687b      	ldr	r3, [r7, #4]
    bf06:	89db      	ldrh	r3, [r3, #14]
    bf08:	041b      	lsls	r3, r3, #16
    bf0a:	0019      	movs	r1, r3
    bf0c:	4b0d      	ldr	r3, [pc, #52]	; (bf44 <system_clock_source_dfll_set_config+0xcc>)
    bf0e:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bf10:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    bf12:	687a      	ldr	r2, [r7, #4]
    bf14:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bf16:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    bf18:	4b09      	ldr	r3, [pc, #36]	; (bf40 <system_clock_source_dfll_set_config+0xc8>)
    bf1a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    bf1c:	4b08      	ldr	r3, [pc, #32]	; (bf40 <system_clock_source_dfll_set_config+0xc8>)
    bf1e:	681b      	ldr	r3, [r3, #0]
    bf20:	687a      	ldr	r2, [r7, #4]
    bf22:	7812      	ldrb	r2, [r2, #0]
    bf24:	2104      	movs	r1, #4
    bf26:	430a      	orrs	r2, r1
    bf28:	b2d2      	uxtb	r2, r2
    bf2a:	4313      	orrs	r3, r2
    bf2c:	2280      	movs	r2, #128	; 0x80
    bf2e:	00d2      	lsls	r2, r2, #3
    bf30:	431a      	orrs	r2, r3
    bf32:	4b03      	ldr	r3, [pc, #12]	; (bf40 <system_clock_source_dfll_set_config+0xc8>)
    bf34:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    bf36:	46c0      	nop			; (mov r8, r8)
    bf38:	46bd      	mov	sp, r7
    bf3a:	b002      	add	sp, #8
    bf3c:	bd80      	pop	{r7, pc}
    bf3e:	46c0      	nop			; (mov r8, r8)
    bf40:	20000250 	.word	0x20000250
    bf44:	03ff0000 	.word	0x03ff0000

0000bf48 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    bf48:	b580      	push	{r7, lr}
    bf4a:	b082      	sub	sp, #8
    bf4c:	af00      	add	r7, sp, #0
    bf4e:	0002      	movs	r2, r0
    bf50:	1dfb      	adds	r3, r7, #7
    bf52:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    bf54:	1dfb      	adds	r3, r7, #7
    bf56:	781b      	ldrb	r3, [r3, #0]
    bf58:	2b08      	cmp	r3, #8
    bf5a:	d83b      	bhi.n	bfd4 <system_clock_source_enable+0x8c>
    bf5c:	009a      	lsls	r2, r3, #2
    bf5e:	4b21      	ldr	r3, [pc, #132]	; (bfe4 <system_clock_source_enable+0x9c>)
    bf60:	18d3      	adds	r3, r2, r3
    bf62:	681b      	ldr	r3, [r3, #0]
    bf64:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    bf66:	4b20      	ldr	r3, [pc, #128]	; (bfe8 <system_clock_source_enable+0xa0>)
    bf68:	4a1f      	ldr	r2, [pc, #124]	; (bfe8 <system_clock_source_enable+0xa0>)
    bf6a:	6a12      	ldr	r2, [r2, #32]
    bf6c:	2102      	movs	r1, #2
    bf6e:	430a      	orrs	r2, r1
    bf70:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    bf72:	2300      	movs	r3, #0
    bf74:	e031      	b.n	bfda <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    bf76:	4b1c      	ldr	r3, [pc, #112]	; (bfe8 <system_clock_source_enable+0xa0>)
    bf78:	4a1b      	ldr	r2, [pc, #108]	; (bfe8 <system_clock_source_enable+0xa0>)
    bf7a:	6992      	ldr	r2, [r2, #24]
    bf7c:	2102      	movs	r1, #2
    bf7e:	430a      	orrs	r2, r1
    bf80:	619a      	str	r2, [r3, #24]
		break;
    bf82:	e029      	b.n	bfd8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    bf84:	4a18      	ldr	r2, [pc, #96]	; (bfe8 <system_clock_source_enable+0xa0>)
    bf86:	4b18      	ldr	r3, [pc, #96]	; (bfe8 <system_clock_source_enable+0xa0>)
    bf88:	8a1b      	ldrh	r3, [r3, #16]
    bf8a:	b29b      	uxth	r3, r3
    bf8c:	2102      	movs	r1, #2
    bf8e:	430b      	orrs	r3, r1
    bf90:	b29b      	uxth	r3, r3
    bf92:	8213      	strh	r3, [r2, #16]
		break;
    bf94:	e020      	b.n	bfd8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    bf96:	4a14      	ldr	r2, [pc, #80]	; (bfe8 <system_clock_source_enable+0xa0>)
    bf98:	4b13      	ldr	r3, [pc, #76]	; (bfe8 <system_clock_source_enable+0xa0>)
    bf9a:	8a9b      	ldrh	r3, [r3, #20]
    bf9c:	b29b      	uxth	r3, r3
    bf9e:	2102      	movs	r1, #2
    bfa0:	430b      	orrs	r3, r1
    bfa2:	b29b      	uxth	r3, r3
    bfa4:	8293      	strh	r3, [r2, #20]
		break;
    bfa6:	e017      	b.n	bfd8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    bfa8:	4b10      	ldr	r3, [pc, #64]	; (bfec <system_clock_source_enable+0xa4>)
    bfaa:	681b      	ldr	r3, [r3, #0]
    bfac:	2202      	movs	r2, #2
    bfae:	431a      	orrs	r2, r3
    bfb0:	4b0e      	ldr	r3, [pc, #56]	; (bfec <system_clock_source_enable+0xa4>)
    bfb2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    bfb4:	4b0e      	ldr	r3, [pc, #56]	; (bff0 <system_clock_source_enable+0xa8>)
    bfb6:	4798      	blx	r3
		break;
    bfb8:	e00e      	b.n	bfd8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    bfba:	4a0b      	ldr	r2, [pc, #44]	; (bfe8 <system_clock_source_enable+0xa0>)
    bfbc:	490a      	ldr	r1, [pc, #40]	; (bfe8 <system_clock_source_enable+0xa0>)
    bfbe:	2344      	movs	r3, #68	; 0x44
    bfc0:	5ccb      	ldrb	r3, [r1, r3]
    bfc2:	b2db      	uxtb	r3, r3
    bfc4:	2102      	movs	r1, #2
    bfc6:	430b      	orrs	r3, r1
    bfc8:	b2d9      	uxtb	r1, r3
    bfca:	2344      	movs	r3, #68	; 0x44
    bfcc:	54d1      	strb	r1, [r2, r3]
		break;
    bfce:	e003      	b.n	bfd8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    bfd0:	2300      	movs	r3, #0
    bfd2:	e002      	b.n	bfda <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    bfd4:	2317      	movs	r3, #23
    bfd6:	e000      	b.n	bfda <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    bfd8:	2300      	movs	r3, #0
}
    bfda:	0018      	movs	r0, r3
    bfdc:	46bd      	mov	sp, r7
    bfde:	b002      	add	sp, #8
    bfe0:	bd80      	pop	{r7, pc}
    bfe2:	46c0      	nop			; (mov r8, r8)
    bfe4:	00013f2c 	.word	0x00013f2c
    bfe8:	40000800 	.word	0x40000800
    bfec:	20000250 	.word	0x20000250
    bff0:	0000bbe1 	.word	0x0000bbe1

0000bff4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    bff4:	b580      	push	{r7, lr}
    bff6:	b084      	sub	sp, #16
    bff8:	af00      	add	r7, sp, #0
    bffa:	0002      	movs	r2, r0
    bffc:	1dfb      	adds	r3, r7, #7
    bffe:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    c000:	2300      	movs	r3, #0
    c002:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    c004:	1dfb      	adds	r3, r7, #7
    c006:	781b      	ldrb	r3, [r3, #0]
    c008:	2b08      	cmp	r3, #8
    c00a:	d821      	bhi.n	c050 <system_clock_source_is_ready+0x5c>
    c00c:	009a      	lsls	r2, r3, #2
    c00e:	4b18      	ldr	r3, [pc, #96]	; (c070 <system_clock_source_is_ready+0x7c>)
    c010:	18d3      	adds	r3, r2, r3
    c012:	681b      	ldr	r3, [r3, #0]
    c014:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    c016:	2308      	movs	r3, #8
    c018:	60fb      	str	r3, [r7, #12]
		break;
    c01a:	e01b      	b.n	c054 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    c01c:	2304      	movs	r3, #4
    c01e:	60fb      	str	r3, [r7, #12]
		break;
    c020:	e018      	b.n	c054 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    c022:	2301      	movs	r3, #1
    c024:	60fb      	str	r3, [r7, #12]
		break;
    c026:	e015      	b.n	c054 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    c028:	2302      	movs	r3, #2
    c02a:	60fb      	str	r3, [r7, #12]
		break;
    c02c:	e012      	b.n	c054 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    c02e:	23d0      	movs	r3, #208	; 0xd0
    c030:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    c032:	e00f      	b.n	c054 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    c034:	4a0f      	ldr	r2, [pc, #60]	; (c074 <system_clock_source_is_ready+0x80>)
    c036:	2350      	movs	r3, #80	; 0x50
    c038:	5cd3      	ldrb	r3, [r2, r3]
    c03a:	b2db      	uxtb	r3, r3
    c03c:	001a      	movs	r2, r3
    c03e:	2303      	movs	r3, #3
    c040:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    c042:	3b03      	subs	r3, #3
    c044:	425a      	negs	r2, r3
    c046:	4153      	adcs	r3, r2
    c048:	b2db      	uxtb	r3, r3
    c04a:	e00c      	b.n	c066 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    c04c:	2301      	movs	r3, #1
    c04e:	e00a      	b.n	c066 <system_clock_source_is_ready+0x72>

	default:
		return false;
    c050:	2300      	movs	r3, #0
    c052:	e008      	b.n	c066 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    c054:	4b07      	ldr	r3, [pc, #28]	; (c074 <system_clock_source_is_ready+0x80>)
    c056:	68db      	ldr	r3, [r3, #12]
    c058:	68fa      	ldr	r2, [r7, #12]
    c05a:	401a      	ands	r2, r3
    c05c:	68fb      	ldr	r3, [r7, #12]
    c05e:	1ad3      	subs	r3, r2, r3
    c060:	425a      	negs	r2, r3
    c062:	4153      	adcs	r3, r2
    c064:	b2db      	uxtb	r3, r3
}
    c066:	0018      	movs	r0, r3
    c068:	46bd      	mov	sp, r7
    c06a:	b004      	add	sp, #16
    c06c:	bd80      	pop	{r7, pc}
    c06e:	46c0      	nop			; (mov r8, r8)
    c070:	00013f50 	.word	0x00013f50
    c074:	40000800 	.word	0x40000800

0000c078 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    c078:	b580      	push	{r7, lr}
    c07a:	b082      	sub	sp, #8
    c07c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    c07e:	003b      	movs	r3, r7
    c080:	2202      	movs	r2, #2
    c082:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    c084:	2300      	movs	r3, #0
    c086:	607b      	str	r3, [r7, #4]
    c088:	e009      	b.n	c09e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    c08a:	687b      	ldr	r3, [r7, #4]
    c08c:	b2db      	uxtb	r3, r3
    c08e:	003a      	movs	r2, r7
    c090:	0011      	movs	r1, r2
    c092:	0018      	movs	r0, r3
    c094:	4b05      	ldr	r3, [pc, #20]	; (c0ac <_switch_peripheral_gclk+0x34>)
    c096:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    c098:	687b      	ldr	r3, [r7, #4]
    c09a:	3301      	adds	r3, #1
    c09c:	607b      	str	r3, [r7, #4]
    c09e:	687b      	ldr	r3, [r7, #4]
    c0a0:	2b24      	cmp	r3, #36	; 0x24
    c0a2:	d9f2      	bls.n	c08a <_switch_peripheral_gclk+0x12>
	}
}
    c0a4:	46c0      	nop			; (mov r8, r8)
    c0a6:	46bd      	mov	sp, r7
    c0a8:	b002      	add	sp, #8
    c0aa:	bd80      	pop	{r7, pc}
    c0ac:	0000c659 	.word	0x0000c659

0000c0b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    c0b0:	b580      	push	{r7, lr}
    c0b2:	b0aa      	sub	sp, #168	; 0xa8
    c0b4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    c0b6:	4b87      	ldr	r3, [pc, #540]	; (c2d4 <system_clock_init+0x224>)
    c0b8:	22c2      	movs	r2, #194	; 0xc2
    c0ba:	00d2      	lsls	r2, r2, #3
    c0bc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    c0be:	2002      	movs	r0, #2
    c0c0:	4b85      	ldr	r3, [pc, #532]	; (c2d8 <system_clock_init+0x228>)
    c0c2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    c0c4:	4b85      	ldr	r3, [pc, #532]	; (c2dc <system_clock_init+0x22c>)
    c0c6:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    c0c8:	2394      	movs	r3, #148	; 0x94
    c0ca:	18fb      	adds	r3, r7, r3
    c0cc:	0018      	movs	r0, r3
    c0ce:	4b84      	ldr	r3, [pc, #528]	; (c2e0 <system_clock_init+0x230>)
    c0d0:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    c0d2:	2394      	movs	r3, #148	; 0x94
    c0d4:	18fb      	adds	r3, r7, r3
    c0d6:	2280      	movs	r2, #128	; 0x80
    c0d8:	0212      	lsls	r2, r2, #8
    c0da:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    c0dc:	2394      	movs	r3, #148	; 0x94
    c0de:	18fb      	adds	r3, r7, r3
    c0e0:	2200      	movs	r2, #0
    c0e2:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    c0e4:	2394      	movs	r3, #148	; 0x94
    c0e6:	18fb      	adds	r3, r7, r3
    c0e8:	2203      	movs	r2, #3
    c0ea:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    c0ec:	2394      	movs	r3, #148	; 0x94
    c0ee:	18fb      	adds	r3, r7, r3
    c0f0:	2200      	movs	r2, #0
    c0f2:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    c0f4:	2394      	movs	r3, #148	; 0x94
    c0f6:	18fb      	adds	r3, r7, r3
    c0f8:	2200      	movs	r2, #0
    c0fa:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    c0fc:	2394      	movs	r3, #148	; 0x94
    c0fe:	18fb      	adds	r3, r7, r3
    c100:	2201      	movs	r2, #1
    c102:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    c104:	2394      	movs	r3, #148	; 0x94
    c106:	18fb      	adds	r3, r7, r3
    c108:	2200      	movs	r2, #0
    c10a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    c10c:	2394      	movs	r3, #148	; 0x94
    c10e:	18fb      	adds	r3, r7, r3
    c110:	2200      	movs	r2, #0
    c112:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    c114:	2394      	movs	r3, #148	; 0x94
    c116:	18fb      	adds	r3, r7, r3
    c118:	0018      	movs	r0, r3
    c11a:	4b72      	ldr	r3, [pc, #456]	; (c2e4 <system_clock_init+0x234>)
    c11c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    c11e:	2005      	movs	r0, #5
    c120:	4b71      	ldr	r3, [pc, #452]	; (c2e8 <system_clock_init+0x238>)
    c122:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    c124:	46c0      	nop			; (mov r8, r8)
    c126:	2005      	movs	r0, #5
    c128:	4b70      	ldr	r3, [pc, #448]	; (c2ec <system_clock_init+0x23c>)
    c12a:	4798      	blx	r3
    c12c:	0003      	movs	r3, r0
    c12e:	001a      	movs	r2, r3
    c130:	2301      	movs	r3, #1
    c132:	4053      	eors	r3, r2
    c134:	b2db      	uxtb	r3, r3
    c136:	2b00      	cmp	r3, #0
    c138:	d1f5      	bne.n	c126 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    c13a:	4a66      	ldr	r2, [pc, #408]	; (c2d4 <system_clock_init+0x224>)
    c13c:	8a93      	ldrh	r3, [r2, #20]
    c13e:	2180      	movs	r1, #128	; 0x80
    c140:	430b      	orrs	r3, r1
    c142:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    c144:	2380      	movs	r3, #128	; 0x80
    c146:	18fb      	adds	r3, r7, r3
    c148:	0018      	movs	r0, r3
    c14a:	4b69      	ldr	r3, [pc, #420]	; (c2f0 <system_clock_init+0x240>)
    c14c:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    c14e:	2380      	movs	r3, #128	; 0x80
    c150:	18fb      	adds	r3, r7, r3
    c152:	2204      	movs	r2, #4
    c154:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    c156:	2380      	movs	r3, #128	; 0x80
    c158:	18fb      	adds	r3, r7, r3
    c15a:	2200      	movs	r2, #0
    c15c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    c15e:	4b65      	ldr	r3, [pc, #404]	; (c2f4 <system_clock_init+0x244>)
    c160:	681b      	ldr	r3, [r3, #0]
    c162:	0e9b      	lsrs	r3, r3, #26
    c164:	22a4      	movs	r2, #164	; 0xa4
    c166:	18ba      	adds	r2, r7, r2
    c168:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    c16a:	23a4      	movs	r3, #164	; 0xa4
    c16c:	18fb      	adds	r3, r7, r3
    c16e:	681b      	ldr	r3, [r3, #0]
    c170:	2b3f      	cmp	r3, #63	; 0x3f
    c172:	d103      	bne.n	c17c <system_clock_init+0xcc>
		coarse = 0x1f;
    c174:	231f      	movs	r3, #31
    c176:	22a4      	movs	r2, #164	; 0xa4
    c178:	18ba      	adds	r2, r7, r2
    c17a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    c17c:	23a4      	movs	r3, #164	; 0xa4
    c17e:	18fb      	adds	r3, r7, r3
    c180:	681b      	ldr	r3, [r3, #0]
    c182:	b2da      	uxtb	r2, r3
    c184:	2380      	movs	r3, #128	; 0x80
    c186:	18fb      	adds	r3, r7, r3
    c188:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    c18a:	2380      	movs	r3, #128	; 0x80
    c18c:	18fb      	adds	r3, r7, r3
    c18e:	2200      	movs	r2, #0
    c190:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    c192:	2380      	movs	r3, #128	; 0x80
    c194:	18fb      	adds	r3, r7, r3
    c196:	2200      	movs	r2, #0
    c198:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    c19a:	2380      	movs	r3, #128	; 0x80
    c19c:	18fb      	adds	r3, r7, r3
    c19e:	2200      	movs	r2, #0
    c1a0:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    c1a2:	2380      	movs	r3, #128	; 0x80
    c1a4:	18fb      	adds	r3, r7, r3
    c1a6:	2200      	movs	r2, #0
    c1a8:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    c1aa:	2380      	movs	r3, #128	; 0x80
    c1ac:	18fb      	adds	r3, r7, r3
    c1ae:	4a52      	ldr	r2, [pc, #328]	; (c2f8 <system_clock_init+0x248>)
    c1b0:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    c1b2:	2380      	movs	r3, #128	; 0x80
    c1b4:	18fb      	adds	r3, r7, r3
    c1b6:	2207      	movs	r2, #7
    c1b8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    c1ba:	2380      	movs	r3, #128	; 0x80
    c1bc:	18fb      	adds	r3, r7, r3
    c1be:	223f      	movs	r2, #63	; 0x3f
    c1c0:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    c1c2:	2380      	movs	r3, #128	; 0x80
    c1c4:	18fb      	adds	r3, r7, r3
    c1c6:	0018      	movs	r0, r3
    c1c8:	4b4c      	ldr	r3, [pc, #304]	; (c2fc <system_clock_init+0x24c>)
    c1ca:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    c1cc:	237c      	movs	r3, #124	; 0x7c
    c1ce:	18fb      	adds	r3, r7, r3
    c1d0:	0018      	movs	r0, r3
    c1d2:	4b4b      	ldr	r3, [pc, #300]	; (c300 <system_clock_init+0x250>)
    c1d4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    c1d6:	237c      	movs	r3, #124	; 0x7c
    c1d8:	18fb      	adds	r3, r7, r3
    c1da:	2200      	movs	r2, #0
    c1dc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    c1de:	237c      	movs	r3, #124	; 0x7c
    c1e0:	18fb      	adds	r3, r7, r3
    c1e2:	2201      	movs	r2, #1
    c1e4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    c1e6:	237c      	movs	r3, #124	; 0x7c
    c1e8:	18fb      	adds	r3, r7, r3
    c1ea:	2200      	movs	r2, #0
    c1ec:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    c1ee:	237c      	movs	r3, #124	; 0x7c
    c1f0:	18fb      	adds	r3, r7, r3
    c1f2:	0018      	movs	r0, r3
    c1f4:	4b43      	ldr	r3, [pc, #268]	; (c304 <system_clock_init+0x254>)
    c1f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    c1f8:	2006      	movs	r0, #6
    c1fa:	4b3b      	ldr	r3, [pc, #236]	; (c2e8 <system_clock_init+0x238>)
    c1fc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    c1fe:	4b42      	ldr	r3, [pc, #264]	; (c308 <system_clock_init+0x258>)
    c200:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    c202:	2364      	movs	r3, #100	; 0x64
    c204:	18fb      	adds	r3, r7, r3
    c206:	0018      	movs	r0, r3
    c208:	4b40      	ldr	r3, [pc, #256]	; (c30c <system_clock_init+0x25c>)
    c20a:	4798      	blx	r3
    c20c:	2364      	movs	r3, #100	; 0x64
    c20e:	18fb      	adds	r3, r7, r3
    c210:	2205      	movs	r2, #5
    c212:	701a      	strb	r2, [r3, #0]
    c214:	2364      	movs	r3, #100	; 0x64
    c216:	18fb      	adds	r3, r7, r3
    c218:	2201      	movs	r2, #1
    c21a:	605a      	str	r2, [r3, #4]
    c21c:	2364      	movs	r3, #100	; 0x64
    c21e:	18fb      	adds	r3, r7, r3
    c220:	2200      	movs	r2, #0
    c222:	721a      	strb	r2, [r3, #8]
    c224:	2364      	movs	r3, #100	; 0x64
    c226:	18fb      	adds	r3, r7, r3
    c228:	2200      	movs	r2, #0
    c22a:	725a      	strb	r2, [r3, #9]
    c22c:	2364      	movs	r3, #100	; 0x64
    c22e:	18fb      	adds	r3, r7, r3
    c230:	0019      	movs	r1, r3
    c232:	2001      	movs	r0, #1
    c234:	4b36      	ldr	r3, [pc, #216]	; (c310 <system_clock_init+0x260>)
    c236:	4798      	blx	r3
    c238:	2001      	movs	r0, #1
    c23a:	4b36      	ldr	r3, [pc, #216]	; (c314 <system_clock_init+0x264>)
    c23c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    c23e:	230c      	movs	r3, #12
    c240:	18fb      	adds	r3, r7, r3
    c242:	0018      	movs	r0, r3
    c244:	4b34      	ldr	r3, [pc, #208]	; (c318 <system_clock_init+0x268>)
    c246:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    c248:	230c      	movs	r3, #12
    c24a:	18fb      	adds	r3, r7, r3
    c24c:	2201      	movs	r2, #1
    c24e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    c250:	230c      	movs	r3, #12
    c252:	18fb      	adds	r3, r7, r3
    c254:	0019      	movs	r1, r3
    c256:	2000      	movs	r0, #0
    c258:	4b30      	ldr	r3, [pc, #192]	; (c31c <system_clock_init+0x26c>)
    c25a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    c25c:	2000      	movs	r0, #0
    c25e:	4b30      	ldr	r3, [pc, #192]	; (c320 <system_clock_init+0x270>)
    c260:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    c262:	2007      	movs	r0, #7
    c264:	4b20      	ldr	r3, [pc, #128]	; (c2e8 <system_clock_init+0x238>)
    c266:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    c268:	46c0      	nop			; (mov r8, r8)
    c26a:	2007      	movs	r0, #7
    c26c:	4b1f      	ldr	r3, [pc, #124]	; (c2ec <system_clock_init+0x23c>)
    c26e:	4798      	blx	r3
    c270:	0003      	movs	r3, r0
    c272:	001a      	movs	r2, r3
    c274:	2301      	movs	r3, #1
    c276:	4053      	eors	r3, r2
    c278:	b2db      	uxtb	r3, r3
    c27a:	2b00      	cmp	r3, #0
    c27c:	d1f5      	bne.n	c26a <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    c27e:	2000      	movs	r0, #0
    c280:	4b28      	ldr	r3, [pc, #160]	; (c324 <system_clock_init+0x274>)
    c282:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    c284:	2100      	movs	r1, #0
    c286:	2000      	movs	r0, #0
    c288:	4b27      	ldr	r3, [pc, #156]	; (c328 <system_clock_init+0x278>)
    c28a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    c28c:	2100      	movs	r1, #0
    c28e:	2001      	movs	r0, #1
    c290:	4b25      	ldr	r3, [pc, #148]	; (c328 <system_clock_init+0x278>)
    c292:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    c294:	2100      	movs	r1, #0
    c296:	2002      	movs	r0, #2
    c298:	4b23      	ldr	r3, [pc, #140]	; (c328 <system_clock_init+0x278>)
    c29a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    c29c:	003b      	movs	r3, r7
    c29e:	0018      	movs	r0, r3
    c2a0:	4b1a      	ldr	r3, [pc, #104]	; (c30c <system_clock_init+0x25c>)
    c2a2:	4798      	blx	r3
    c2a4:	003b      	movs	r3, r7
    c2a6:	2207      	movs	r2, #7
    c2a8:	701a      	strb	r2, [r3, #0]
    c2aa:	003b      	movs	r3, r7
    c2ac:	2201      	movs	r2, #1
    c2ae:	605a      	str	r2, [r3, #4]
    c2b0:	003b      	movs	r3, r7
    c2b2:	2200      	movs	r2, #0
    c2b4:	721a      	strb	r2, [r3, #8]
    c2b6:	003b      	movs	r3, r7
    c2b8:	2200      	movs	r2, #0
    c2ba:	725a      	strb	r2, [r3, #9]
    c2bc:	003b      	movs	r3, r7
    c2be:	0019      	movs	r1, r3
    c2c0:	2000      	movs	r0, #0
    c2c2:	4b13      	ldr	r3, [pc, #76]	; (c310 <system_clock_init+0x260>)
    c2c4:	4798      	blx	r3
    c2c6:	2000      	movs	r0, #0
    c2c8:	4b12      	ldr	r3, [pc, #72]	; (c314 <system_clock_init+0x264>)
    c2ca:	4798      	blx	r3
#endif
}
    c2cc:	46c0      	nop			; (mov r8, r8)
    c2ce:	46bd      	mov	sp, r7
    c2d0:	b02a      	add	sp, #168	; 0xa8
    c2d2:	bd80      	pop	{r7, pc}
    c2d4:	40000800 	.word	0x40000800
    c2d8:	0000bb91 	.word	0x0000bb91
    c2dc:	0000c079 	.word	0x0000c079
    c2e0:	0000ba61 	.word	0x0000ba61
    c2e4:	0000bd59 	.word	0x0000bd59
    c2e8:	0000bf49 	.word	0x0000bf49
    c2ec:	0000bff5 	.word	0x0000bff5
    c2f0:	0000bacb 	.word	0x0000bacb
    c2f4:	00806024 	.word	0x00806024
    c2f8:	000005b9 	.word	0x000005b9
    c2fc:	0000be79 	.word	0x0000be79
    c300:	0000baa9 	.word	0x0000baa9
    c304:	0000bce1 	.word	0x0000bce1
    c308:	0000c3d1 	.word	0x0000c3d1
    c30c:	0000ba1d 	.word	0x0000ba1d
    c310:	0000c401 	.word	0x0000c401
    c314:	0000c525 	.word	0x0000c525
    c318:	0000ba4b 	.word	0x0000ba4b
    c31c:	0000c659 	.word	0x0000c659
    c320:	0000c69d 	.word	0x0000c69d
    c324:	0000bb1d 	.word	0x0000bb1d
    c328:	0000bb3d 	.word	0x0000bb3d

0000c32c <system_apb_clock_set_mask>:
{
    c32c:	b580      	push	{r7, lr}
    c32e:	b082      	sub	sp, #8
    c330:	af00      	add	r7, sp, #0
    c332:	0002      	movs	r2, r0
    c334:	6039      	str	r1, [r7, #0]
    c336:	1dfb      	adds	r3, r7, #7
    c338:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c33a:	1dfb      	adds	r3, r7, #7
    c33c:	781b      	ldrb	r3, [r3, #0]
    c33e:	2b01      	cmp	r3, #1
    c340:	d00a      	beq.n	c358 <system_apb_clock_set_mask+0x2c>
    c342:	2b02      	cmp	r3, #2
    c344:	d00f      	beq.n	c366 <system_apb_clock_set_mask+0x3a>
    c346:	2b00      	cmp	r3, #0
    c348:	d114      	bne.n	c374 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c34a:	4b0e      	ldr	r3, [pc, #56]	; (c384 <system_apb_clock_set_mask+0x58>)
    c34c:	4a0d      	ldr	r2, [pc, #52]	; (c384 <system_apb_clock_set_mask+0x58>)
    c34e:	6991      	ldr	r1, [r2, #24]
    c350:	683a      	ldr	r2, [r7, #0]
    c352:	430a      	orrs	r2, r1
    c354:	619a      	str	r2, [r3, #24]
			break;
    c356:	e00f      	b.n	c378 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c358:	4b0a      	ldr	r3, [pc, #40]	; (c384 <system_apb_clock_set_mask+0x58>)
    c35a:	4a0a      	ldr	r2, [pc, #40]	; (c384 <system_apb_clock_set_mask+0x58>)
    c35c:	69d1      	ldr	r1, [r2, #28]
    c35e:	683a      	ldr	r2, [r7, #0]
    c360:	430a      	orrs	r2, r1
    c362:	61da      	str	r2, [r3, #28]
			break;
    c364:	e008      	b.n	c378 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c366:	4b07      	ldr	r3, [pc, #28]	; (c384 <system_apb_clock_set_mask+0x58>)
    c368:	4a06      	ldr	r2, [pc, #24]	; (c384 <system_apb_clock_set_mask+0x58>)
    c36a:	6a11      	ldr	r1, [r2, #32]
    c36c:	683a      	ldr	r2, [r7, #0]
    c36e:	430a      	orrs	r2, r1
    c370:	621a      	str	r2, [r3, #32]
			break;
    c372:	e001      	b.n	c378 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c374:	2317      	movs	r3, #23
    c376:	e000      	b.n	c37a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c378:	2300      	movs	r3, #0
}
    c37a:	0018      	movs	r0, r3
    c37c:	46bd      	mov	sp, r7
    c37e:	b002      	add	sp, #8
    c380:	bd80      	pop	{r7, pc}
    c382:	46c0      	nop			; (mov r8, r8)
    c384:	40000400 	.word	0x40000400

0000c388 <system_interrupt_enter_critical_section>:
{
    c388:	b580      	push	{r7, lr}
    c38a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    c38c:	4b02      	ldr	r3, [pc, #8]	; (c398 <system_interrupt_enter_critical_section+0x10>)
    c38e:	4798      	blx	r3
}
    c390:	46c0      	nop			; (mov r8, r8)
    c392:	46bd      	mov	sp, r7
    c394:	bd80      	pop	{r7, pc}
    c396:	46c0      	nop			; (mov r8, r8)
    c398:	0000b7b5 	.word	0x0000b7b5

0000c39c <system_interrupt_leave_critical_section>:
{
    c39c:	b580      	push	{r7, lr}
    c39e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    c3a0:	4b02      	ldr	r3, [pc, #8]	; (c3ac <system_interrupt_leave_critical_section+0x10>)
    c3a2:	4798      	blx	r3
}
    c3a4:	46c0      	nop			; (mov r8, r8)
    c3a6:	46bd      	mov	sp, r7
    c3a8:	bd80      	pop	{r7, pc}
    c3aa:	46c0      	nop			; (mov r8, r8)
    c3ac:	0000b809 	.word	0x0000b809

0000c3b0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    c3b0:	b580      	push	{r7, lr}
    c3b2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c3b4:	4b05      	ldr	r3, [pc, #20]	; (c3cc <system_gclk_is_syncing+0x1c>)
    c3b6:	785b      	ldrb	r3, [r3, #1]
    c3b8:	b2db      	uxtb	r3, r3
    c3ba:	b25b      	sxtb	r3, r3
    c3bc:	2b00      	cmp	r3, #0
    c3be:	da01      	bge.n	c3c4 <system_gclk_is_syncing+0x14>
		return true;
    c3c0:	2301      	movs	r3, #1
    c3c2:	e000      	b.n	c3c6 <system_gclk_is_syncing+0x16>
	}

	return false;
    c3c4:	2300      	movs	r3, #0
}
    c3c6:	0018      	movs	r0, r3
    c3c8:	46bd      	mov	sp, r7
    c3ca:	bd80      	pop	{r7, pc}
    c3cc:	40000c00 	.word	0x40000c00

0000c3d0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    c3d0:	b580      	push	{r7, lr}
    c3d2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    c3d4:	2108      	movs	r1, #8
    c3d6:	2000      	movs	r0, #0
    c3d8:	4b07      	ldr	r3, [pc, #28]	; (c3f8 <system_gclk_init+0x28>)
    c3da:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    c3dc:	4b07      	ldr	r3, [pc, #28]	; (c3fc <system_gclk_init+0x2c>)
    c3de:	2201      	movs	r2, #1
    c3e0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    c3e2:	46c0      	nop			; (mov r8, r8)
    c3e4:	4b05      	ldr	r3, [pc, #20]	; (c3fc <system_gclk_init+0x2c>)
    c3e6:	781b      	ldrb	r3, [r3, #0]
    c3e8:	b2db      	uxtb	r3, r3
    c3ea:	001a      	movs	r2, r3
    c3ec:	2301      	movs	r3, #1
    c3ee:	4013      	ands	r3, r2
    c3f0:	d1f8      	bne.n	c3e4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    c3f2:	46c0      	nop			; (mov r8, r8)
    c3f4:	46bd      	mov	sp, r7
    c3f6:	bd80      	pop	{r7, pc}
    c3f8:	0000c32d 	.word	0x0000c32d
    c3fc:	40000c00 	.word	0x40000c00

0000c400 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    c400:	b580      	push	{r7, lr}
    c402:	b086      	sub	sp, #24
    c404:	af00      	add	r7, sp, #0
    c406:	0002      	movs	r2, r0
    c408:	6039      	str	r1, [r7, #0]
    c40a:	1dfb      	adds	r3, r7, #7
    c40c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    c40e:	1dfb      	adds	r3, r7, #7
    c410:	781b      	ldrb	r3, [r3, #0]
    c412:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    c414:	1dfb      	adds	r3, r7, #7
    c416:	781b      	ldrb	r3, [r3, #0]
    c418:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    c41a:	683b      	ldr	r3, [r7, #0]
    c41c:	781b      	ldrb	r3, [r3, #0]
    c41e:	021b      	lsls	r3, r3, #8
    c420:	001a      	movs	r2, r3
    c422:	697b      	ldr	r3, [r7, #20]
    c424:	4313      	orrs	r3, r2
    c426:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    c428:	683b      	ldr	r3, [r7, #0]
    c42a:	785b      	ldrb	r3, [r3, #1]
    c42c:	2b00      	cmp	r3, #0
    c42e:	d004      	beq.n	c43a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    c430:	697b      	ldr	r3, [r7, #20]
    c432:	2280      	movs	r2, #128	; 0x80
    c434:	02d2      	lsls	r2, r2, #11
    c436:	4313      	orrs	r3, r2
    c438:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    c43a:	683b      	ldr	r3, [r7, #0]
    c43c:	7a5b      	ldrb	r3, [r3, #9]
    c43e:	2b00      	cmp	r3, #0
    c440:	d004      	beq.n	c44c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    c442:	697b      	ldr	r3, [r7, #20]
    c444:	2280      	movs	r2, #128	; 0x80
    c446:	0312      	lsls	r2, r2, #12
    c448:	4313      	orrs	r3, r2
    c44a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    c44c:	683b      	ldr	r3, [r7, #0]
    c44e:	685b      	ldr	r3, [r3, #4]
    c450:	2b01      	cmp	r3, #1
    c452:	d92c      	bls.n	c4ae <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    c454:	683b      	ldr	r3, [r7, #0]
    c456:	685a      	ldr	r2, [r3, #4]
    c458:	683b      	ldr	r3, [r7, #0]
    c45a:	685b      	ldr	r3, [r3, #4]
    c45c:	3b01      	subs	r3, #1
    c45e:	4013      	ands	r3, r2
    c460:	d11a      	bne.n	c498 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    c462:	2300      	movs	r3, #0
    c464:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    c466:	2302      	movs	r3, #2
    c468:	60bb      	str	r3, [r7, #8]
    c46a:	e005      	b.n	c478 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    c46c:	68fb      	ldr	r3, [r7, #12]
    c46e:	3301      	adds	r3, #1
    c470:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    c472:	68bb      	ldr	r3, [r7, #8]
    c474:	005b      	lsls	r3, r3, #1
    c476:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    c478:	683b      	ldr	r3, [r7, #0]
    c47a:	685a      	ldr	r2, [r3, #4]
    c47c:	68bb      	ldr	r3, [r7, #8]
    c47e:	429a      	cmp	r2, r3
    c480:	d8f4      	bhi.n	c46c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    c482:	68fb      	ldr	r3, [r7, #12]
    c484:	021b      	lsls	r3, r3, #8
    c486:	693a      	ldr	r2, [r7, #16]
    c488:	4313      	orrs	r3, r2
    c48a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    c48c:	697b      	ldr	r3, [r7, #20]
    c48e:	2280      	movs	r2, #128	; 0x80
    c490:	0352      	lsls	r2, r2, #13
    c492:	4313      	orrs	r3, r2
    c494:	617b      	str	r3, [r7, #20]
    c496:	e00a      	b.n	c4ae <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    c498:	683b      	ldr	r3, [r7, #0]
    c49a:	685b      	ldr	r3, [r3, #4]
    c49c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    c49e:	693a      	ldr	r2, [r7, #16]
    c4a0:	4313      	orrs	r3, r2
    c4a2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    c4a4:	697b      	ldr	r3, [r7, #20]
    c4a6:	2280      	movs	r2, #128	; 0x80
    c4a8:	0292      	lsls	r2, r2, #10
    c4aa:	4313      	orrs	r3, r2
    c4ac:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    c4ae:	683b      	ldr	r3, [r7, #0]
    c4b0:	7a1b      	ldrb	r3, [r3, #8]
    c4b2:	2b00      	cmp	r3, #0
    c4b4:	d004      	beq.n	c4c0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    c4b6:	697b      	ldr	r3, [r7, #20]
    c4b8:	2280      	movs	r2, #128	; 0x80
    c4ba:	0392      	lsls	r2, r2, #14
    c4bc:	4313      	orrs	r3, r2
    c4be:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    c4c0:	46c0      	nop			; (mov r8, r8)
    c4c2:	4b13      	ldr	r3, [pc, #76]	; (c510 <system_gclk_gen_set_config+0x110>)
    c4c4:	4798      	blx	r3
    c4c6:	1e03      	subs	r3, r0, #0
    c4c8:	d1fb      	bne.n	c4c2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c4ca:	4b12      	ldr	r3, [pc, #72]	; (c514 <system_gclk_gen_set_config+0x114>)
    c4cc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c4ce:	4a12      	ldr	r2, [pc, #72]	; (c518 <system_gclk_gen_set_config+0x118>)
    c4d0:	1dfb      	adds	r3, r7, #7
    c4d2:	781b      	ldrb	r3, [r3, #0]
    c4d4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    c4d6:	46c0      	nop			; (mov r8, r8)
    c4d8:	4b0d      	ldr	r3, [pc, #52]	; (c510 <system_gclk_gen_set_config+0x110>)
    c4da:	4798      	blx	r3
    c4dc:	1e03      	subs	r3, r0, #0
    c4de:	d1fb      	bne.n	c4d8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    c4e0:	4b0e      	ldr	r3, [pc, #56]	; (c51c <system_gclk_gen_set_config+0x11c>)
    c4e2:	693a      	ldr	r2, [r7, #16]
    c4e4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    c4e6:	46c0      	nop			; (mov r8, r8)
    c4e8:	4b09      	ldr	r3, [pc, #36]	; (c510 <system_gclk_gen_set_config+0x110>)
    c4ea:	4798      	blx	r3
    c4ec:	1e03      	subs	r3, r0, #0
    c4ee:	d1fb      	bne.n	c4e8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    c4f0:	4b0a      	ldr	r3, [pc, #40]	; (c51c <system_gclk_gen_set_config+0x11c>)
    c4f2:	4a0a      	ldr	r2, [pc, #40]	; (c51c <system_gclk_gen_set_config+0x11c>)
    c4f4:	6851      	ldr	r1, [r2, #4]
    c4f6:	2280      	movs	r2, #128	; 0x80
    c4f8:	0252      	lsls	r2, r2, #9
    c4fa:	4011      	ands	r1, r2
    c4fc:	697a      	ldr	r2, [r7, #20]
    c4fe:	430a      	orrs	r2, r1
    c500:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c502:	4b07      	ldr	r3, [pc, #28]	; (c520 <system_gclk_gen_set_config+0x120>)
    c504:	4798      	blx	r3
}
    c506:	46c0      	nop			; (mov r8, r8)
    c508:	46bd      	mov	sp, r7
    c50a:	b006      	add	sp, #24
    c50c:	bd80      	pop	{r7, pc}
    c50e:	46c0      	nop			; (mov r8, r8)
    c510:	0000c3b1 	.word	0x0000c3b1
    c514:	0000c389 	.word	0x0000c389
    c518:	40000c08 	.word	0x40000c08
    c51c:	40000c00 	.word	0x40000c00
    c520:	0000c39d 	.word	0x0000c39d

0000c524 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    c524:	b580      	push	{r7, lr}
    c526:	b082      	sub	sp, #8
    c528:	af00      	add	r7, sp, #0
    c52a:	0002      	movs	r2, r0
    c52c:	1dfb      	adds	r3, r7, #7
    c52e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c530:	46c0      	nop			; (mov r8, r8)
    c532:	4b0e      	ldr	r3, [pc, #56]	; (c56c <system_gclk_gen_enable+0x48>)
    c534:	4798      	blx	r3
    c536:	1e03      	subs	r3, r0, #0
    c538:	d1fb      	bne.n	c532 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c53a:	4b0d      	ldr	r3, [pc, #52]	; (c570 <system_gclk_gen_enable+0x4c>)
    c53c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c53e:	4a0d      	ldr	r2, [pc, #52]	; (c574 <system_gclk_gen_enable+0x50>)
    c540:	1dfb      	adds	r3, r7, #7
    c542:	781b      	ldrb	r3, [r3, #0]
    c544:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c546:	46c0      	nop			; (mov r8, r8)
    c548:	4b08      	ldr	r3, [pc, #32]	; (c56c <system_gclk_gen_enable+0x48>)
    c54a:	4798      	blx	r3
    c54c:	1e03      	subs	r3, r0, #0
    c54e:	d1fb      	bne.n	c548 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    c550:	4b09      	ldr	r3, [pc, #36]	; (c578 <system_gclk_gen_enable+0x54>)
    c552:	4a09      	ldr	r2, [pc, #36]	; (c578 <system_gclk_gen_enable+0x54>)
    c554:	6852      	ldr	r2, [r2, #4]
    c556:	2180      	movs	r1, #128	; 0x80
    c558:	0249      	lsls	r1, r1, #9
    c55a:	430a      	orrs	r2, r1
    c55c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c55e:	4b07      	ldr	r3, [pc, #28]	; (c57c <system_gclk_gen_enable+0x58>)
    c560:	4798      	blx	r3
}
    c562:	46c0      	nop			; (mov r8, r8)
    c564:	46bd      	mov	sp, r7
    c566:	b002      	add	sp, #8
    c568:	bd80      	pop	{r7, pc}
    c56a:	46c0      	nop			; (mov r8, r8)
    c56c:	0000c3b1 	.word	0x0000c3b1
    c570:	0000c389 	.word	0x0000c389
    c574:	40000c04 	.word	0x40000c04
    c578:	40000c00 	.word	0x40000c00
    c57c:	0000c39d 	.word	0x0000c39d

0000c580 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    c580:	b580      	push	{r7, lr}
    c582:	b086      	sub	sp, #24
    c584:	af00      	add	r7, sp, #0
    c586:	0002      	movs	r2, r0
    c588:	1dfb      	adds	r3, r7, #7
    c58a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c58c:	46c0      	nop			; (mov r8, r8)
    c58e:	4b2a      	ldr	r3, [pc, #168]	; (c638 <system_gclk_gen_get_hz+0xb8>)
    c590:	4798      	blx	r3
    c592:	1e03      	subs	r3, r0, #0
    c594:	d1fb      	bne.n	c58e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c596:	4b29      	ldr	r3, [pc, #164]	; (c63c <system_gclk_gen_get_hz+0xbc>)
    c598:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c59a:	4a29      	ldr	r2, [pc, #164]	; (c640 <system_gclk_gen_get_hz+0xc0>)
    c59c:	1dfb      	adds	r3, r7, #7
    c59e:	781b      	ldrb	r3, [r3, #0]
    c5a0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c5a2:	46c0      	nop			; (mov r8, r8)
    c5a4:	4b24      	ldr	r3, [pc, #144]	; (c638 <system_gclk_gen_get_hz+0xb8>)
    c5a6:	4798      	blx	r3
    c5a8:	1e03      	subs	r3, r0, #0
    c5aa:	d1fb      	bne.n	c5a4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    c5ac:	4b25      	ldr	r3, [pc, #148]	; (c644 <system_gclk_gen_get_hz+0xc4>)
    c5ae:	685b      	ldr	r3, [r3, #4]
    c5b0:	04db      	lsls	r3, r3, #19
    c5b2:	0edb      	lsrs	r3, r3, #27
    c5b4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    c5b6:	0018      	movs	r0, r3
    c5b8:	4b23      	ldr	r3, [pc, #140]	; (c648 <system_gclk_gen_get_hz+0xc8>)
    c5ba:	4798      	blx	r3
    c5bc:	0003      	movs	r3, r0
    c5be:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c5c0:	4a1f      	ldr	r2, [pc, #124]	; (c640 <system_gclk_gen_get_hz+0xc0>)
    c5c2:	1dfb      	adds	r3, r7, #7
    c5c4:	781b      	ldrb	r3, [r3, #0]
    c5c6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    c5c8:	4b1e      	ldr	r3, [pc, #120]	; (c644 <system_gclk_gen_get_hz+0xc4>)
    c5ca:	685b      	ldr	r3, [r3, #4]
    c5cc:	02db      	lsls	r3, r3, #11
    c5ce:	0fdb      	lsrs	r3, r3, #31
    c5d0:	b2da      	uxtb	r2, r3
    c5d2:	2313      	movs	r3, #19
    c5d4:	18fb      	adds	r3, r7, r3
    c5d6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c5d8:	4a1c      	ldr	r2, [pc, #112]	; (c64c <system_gclk_gen_get_hz+0xcc>)
    c5da:	1dfb      	adds	r3, r7, #7
    c5dc:	781b      	ldrb	r3, [r3, #0]
    c5de:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c5e0:	46c0      	nop			; (mov r8, r8)
    c5e2:	4b15      	ldr	r3, [pc, #84]	; (c638 <system_gclk_gen_get_hz+0xb8>)
    c5e4:	4798      	blx	r3
    c5e6:	1e03      	subs	r3, r0, #0
    c5e8:	d1fb      	bne.n	c5e2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    c5ea:	4b16      	ldr	r3, [pc, #88]	; (c644 <system_gclk_gen_get_hz+0xc4>)
    c5ec:	689b      	ldr	r3, [r3, #8]
    c5ee:	021b      	lsls	r3, r3, #8
    c5f0:	0c1b      	lsrs	r3, r3, #16
    c5f2:	b29b      	uxth	r3, r3
    c5f4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    c5f6:	4b16      	ldr	r3, [pc, #88]	; (c650 <system_gclk_gen_get_hz+0xd0>)
    c5f8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    c5fa:	2313      	movs	r3, #19
    c5fc:	18fb      	adds	r3, r7, r3
    c5fe:	781b      	ldrb	r3, [r3, #0]
    c600:	2b00      	cmp	r3, #0
    c602:	d109      	bne.n	c618 <system_gclk_gen_get_hz+0x98>
    c604:	68fb      	ldr	r3, [r7, #12]
    c606:	2b01      	cmp	r3, #1
    c608:	d906      	bls.n	c618 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    c60a:	4b12      	ldr	r3, [pc, #72]	; (c654 <system_gclk_gen_get_hz+0xd4>)
    c60c:	68f9      	ldr	r1, [r7, #12]
    c60e:	6978      	ldr	r0, [r7, #20]
    c610:	4798      	blx	r3
    c612:	0003      	movs	r3, r0
    c614:	617b      	str	r3, [r7, #20]
    c616:	e00a      	b.n	c62e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    c618:	2313      	movs	r3, #19
    c61a:	18fb      	adds	r3, r7, r3
    c61c:	781b      	ldrb	r3, [r3, #0]
    c61e:	2b00      	cmp	r3, #0
    c620:	d005      	beq.n	c62e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    c622:	68fb      	ldr	r3, [r7, #12]
    c624:	3301      	adds	r3, #1
    c626:	697a      	ldr	r2, [r7, #20]
    c628:	40da      	lsrs	r2, r3
    c62a:	0013      	movs	r3, r2
    c62c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    c62e:	697b      	ldr	r3, [r7, #20]
}
    c630:	0018      	movs	r0, r3
    c632:	46bd      	mov	sp, r7
    c634:	b006      	add	sp, #24
    c636:	bd80      	pop	{r7, pc}
    c638:	0000c3b1 	.word	0x0000c3b1
    c63c:	0000c389 	.word	0x0000c389
    c640:	40000c04 	.word	0x40000c04
    c644:	40000c00 	.word	0x40000c00
    c648:	0000bc25 	.word	0x0000bc25
    c64c:	40000c08 	.word	0x40000c08
    c650:	0000c39d 	.word	0x0000c39d
    c654:	0001080d 	.word	0x0001080d

0000c658 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    c658:	b580      	push	{r7, lr}
    c65a:	b084      	sub	sp, #16
    c65c:	af00      	add	r7, sp, #0
    c65e:	0002      	movs	r2, r0
    c660:	6039      	str	r1, [r7, #0]
    c662:	1dfb      	adds	r3, r7, #7
    c664:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    c666:	1dfb      	adds	r3, r7, #7
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    c66c:	683b      	ldr	r3, [r7, #0]
    c66e:	781b      	ldrb	r3, [r3, #0]
    c670:	021b      	lsls	r3, r3, #8
    c672:	001a      	movs	r2, r3
    c674:	68fb      	ldr	r3, [r7, #12]
    c676:	4313      	orrs	r3, r2
    c678:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    c67a:	1dfb      	adds	r3, r7, #7
    c67c:	781b      	ldrb	r3, [r3, #0]
    c67e:	0018      	movs	r0, r3
    c680:	4b04      	ldr	r3, [pc, #16]	; (c694 <system_gclk_chan_set_config+0x3c>)
    c682:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    c684:	4b04      	ldr	r3, [pc, #16]	; (c698 <system_gclk_chan_set_config+0x40>)
    c686:	68fa      	ldr	r2, [r7, #12]
    c688:	b292      	uxth	r2, r2
    c68a:	805a      	strh	r2, [r3, #2]
}
    c68c:	46c0      	nop			; (mov r8, r8)
    c68e:	46bd      	mov	sp, r7
    c690:	b004      	add	sp, #16
    c692:	bd80      	pop	{r7, pc}
    c694:	0000c6e5 	.word	0x0000c6e5
    c698:	40000c00 	.word	0x40000c00

0000c69c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    c69c:	b580      	push	{r7, lr}
    c69e:	b082      	sub	sp, #8
    c6a0:	af00      	add	r7, sp, #0
    c6a2:	0002      	movs	r2, r0
    c6a4:	1dfb      	adds	r3, r7, #7
    c6a6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c6a8:	4b0a      	ldr	r3, [pc, #40]	; (c6d4 <system_gclk_chan_enable+0x38>)
    c6aa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c6ac:	4a0a      	ldr	r2, [pc, #40]	; (c6d8 <system_gclk_chan_enable+0x3c>)
    c6ae:	1dfb      	adds	r3, r7, #7
    c6b0:	781b      	ldrb	r3, [r3, #0]
    c6b2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    c6b4:	4909      	ldr	r1, [pc, #36]	; (c6dc <system_gclk_chan_enable+0x40>)
    c6b6:	4b09      	ldr	r3, [pc, #36]	; (c6dc <system_gclk_chan_enable+0x40>)
    c6b8:	885b      	ldrh	r3, [r3, #2]
    c6ba:	b29b      	uxth	r3, r3
    c6bc:	2280      	movs	r2, #128	; 0x80
    c6be:	01d2      	lsls	r2, r2, #7
    c6c0:	4313      	orrs	r3, r2
    c6c2:	b29b      	uxth	r3, r3
    c6c4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    c6c6:	4b06      	ldr	r3, [pc, #24]	; (c6e0 <system_gclk_chan_enable+0x44>)
    c6c8:	4798      	blx	r3
}
    c6ca:	46c0      	nop			; (mov r8, r8)
    c6cc:	46bd      	mov	sp, r7
    c6ce:	b002      	add	sp, #8
    c6d0:	bd80      	pop	{r7, pc}
    c6d2:	46c0      	nop			; (mov r8, r8)
    c6d4:	0000c389 	.word	0x0000c389
    c6d8:	40000c02 	.word	0x40000c02
    c6dc:	40000c00 	.word	0x40000c00
    c6e0:	0000c39d 	.word	0x0000c39d

0000c6e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    c6e4:	b580      	push	{r7, lr}
    c6e6:	b084      	sub	sp, #16
    c6e8:	af00      	add	r7, sp, #0
    c6ea:	0002      	movs	r2, r0
    c6ec:	1dfb      	adds	r3, r7, #7
    c6ee:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c6f0:	4b1c      	ldr	r3, [pc, #112]	; (c764 <system_gclk_chan_disable+0x80>)
    c6f2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c6f4:	4a1c      	ldr	r2, [pc, #112]	; (c768 <system_gclk_chan_disable+0x84>)
    c6f6:	1dfb      	adds	r3, r7, #7
    c6f8:	781b      	ldrb	r3, [r3, #0]
    c6fa:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    c6fc:	4b1b      	ldr	r3, [pc, #108]	; (c76c <system_gclk_chan_disable+0x88>)
    c6fe:	885b      	ldrh	r3, [r3, #2]
    c700:	051b      	lsls	r3, r3, #20
    c702:	0f1b      	lsrs	r3, r3, #28
    c704:	b2db      	uxtb	r3, r3
    c706:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    c708:	4a18      	ldr	r2, [pc, #96]	; (c76c <system_gclk_chan_disable+0x88>)
    c70a:	8853      	ldrh	r3, [r2, #2]
    c70c:	4918      	ldr	r1, [pc, #96]	; (c770 <system_gclk_chan_disable+0x8c>)
    c70e:	400b      	ands	r3, r1
    c710:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    c712:	4a16      	ldr	r2, [pc, #88]	; (c76c <system_gclk_chan_disable+0x88>)
    c714:	4b15      	ldr	r3, [pc, #84]	; (c76c <system_gclk_chan_disable+0x88>)
    c716:	885b      	ldrh	r3, [r3, #2]
    c718:	b29b      	uxth	r3, r3
    c71a:	4916      	ldr	r1, [pc, #88]	; (c774 <system_gclk_chan_disable+0x90>)
    c71c:	400b      	ands	r3, r1
    c71e:	b29b      	uxth	r3, r3
    c720:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    c722:	46c0      	nop			; (mov r8, r8)
    c724:	4b11      	ldr	r3, [pc, #68]	; (c76c <system_gclk_chan_disable+0x88>)
    c726:	885b      	ldrh	r3, [r3, #2]
    c728:	b29b      	uxth	r3, r3
    c72a:	001a      	movs	r2, r3
    c72c:	2380      	movs	r3, #128	; 0x80
    c72e:	01db      	lsls	r3, r3, #7
    c730:	4013      	ands	r3, r2
    c732:	d1f7      	bne.n	c724 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    c734:	4a0d      	ldr	r2, [pc, #52]	; (c76c <system_gclk_chan_disable+0x88>)
    c736:	68fb      	ldr	r3, [r7, #12]
    c738:	b2db      	uxtb	r3, r3
    c73a:	1c19      	adds	r1, r3, #0
    c73c:	230f      	movs	r3, #15
    c73e:	400b      	ands	r3, r1
    c740:	b2d9      	uxtb	r1, r3
    c742:	8853      	ldrh	r3, [r2, #2]
    c744:	1c08      	adds	r0, r1, #0
    c746:	210f      	movs	r1, #15
    c748:	4001      	ands	r1, r0
    c74a:	0208      	lsls	r0, r1, #8
    c74c:	4908      	ldr	r1, [pc, #32]	; (c770 <system_gclk_chan_disable+0x8c>)
    c74e:	400b      	ands	r3, r1
    c750:	1c19      	adds	r1, r3, #0
    c752:	1c03      	adds	r3, r0, #0
    c754:	430b      	orrs	r3, r1
    c756:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    c758:	4b07      	ldr	r3, [pc, #28]	; (c778 <system_gclk_chan_disable+0x94>)
    c75a:	4798      	blx	r3
}
    c75c:	46c0      	nop			; (mov r8, r8)
    c75e:	46bd      	mov	sp, r7
    c760:	b004      	add	sp, #16
    c762:	bd80      	pop	{r7, pc}
    c764:	0000c389 	.word	0x0000c389
    c768:	40000c02 	.word	0x40000c02
    c76c:	40000c00 	.word	0x40000c00
    c770:	fffff0ff 	.word	0xfffff0ff
    c774:	ffffbfff 	.word	0xffffbfff
    c778:	0000c39d 	.word	0x0000c39d

0000c77c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    c77c:	b580      	push	{r7, lr}
    c77e:	b084      	sub	sp, #16
    c780:	af00      	add	r7, sp, #0
    c782:	0002      	movs	r2, r0
    c784:	1dfb      	adds	r3, r7, #7
    c786:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    c788:	4b0d      	ldr	r3, [pc, #52]	; (c7c0 <system_gclk_chan_get_hz+0x44>)
    c78a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c78c:	4a0d      	ldr	r2, [pc, #52]	; (c7c4 <system_gclk_chan_get_hz+0x48>)
    c78e:	1dfb      	adds	r3, r7, #7
    c790:	781b      	ldrb	r3, [r3, #0]
    c792:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    c794:	4b0c      	ldr	r3, [pc, #48]	; (c7c8 <system_gclk_chan_get_hz+0x4c>)
    c796:	885b      	ldrh	r3, [r3, #2]
    c798:	051b      	lsls	r3, r3, #20
    c79a:	0f1b      	lsrs	r3, r3, #28
    c79c:	b2da      	uxtb	r2, r3
    c79e:	230f      	movs	r3, #15
    c7a0:	18fb      	adds	r3, r7, r3
    c7a2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    c7a4:	4b09      	ldr	r3, [pc, #36]	; (c7cc <system_gclk_chan_get_hz+0x50>)
    c7a6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    c7a8:	230f      	movs	r3, #15
    c7aa:	18fb      	adds	r3, r7, r3
    c7ac:	781b      	ldrb	r3, [r3, #0]
    c7ae:	0018      	movs	r0, r3
    c7b0:	4b07      	ldr	r3, [pc, #28]	; (c7d0 <system_gclk_chan_get_hz+0x54>)
    c7b2:	4798      	blx	r3
    c7b4:	0003      	movs	r3, r0
}
    c7b6:	0018      	movs	r0, r3
    c7b8:	46bd      	mov	sp, r7
    c7ba:	b004      	add	sp, #16
    c7bc:	bd80      	pop	{r7, pc}
    c7be:	46c0      	nop			; (mov r8, r8)
    c7c0:	0000c389 	.word	0x0000c389
    c7c4:	40000c02 	.word	0x40000c02
    c7c8:	40000c00 	.word	0x40000c00
    c7cc:	0000c39d 	.word	0x0000c39d
    c7d0:	0000c581 	.word	0x0000c581

0000c7d4 <system_pinmux_get_group_from_gpio_pin>:
{
    c7d4:	b580      	push	{r7, lr}
    c7d6:	b084      	sub	sp, #16
    c7d8:	af00      	add	r7, sp, #0
    c7da:	0002      	movs	r2, r0
    c7dc:	1dfb      	adds	r3, r7, #7
    c7de:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c7e0:	230f      	movs	r3, #15
    c7e2:	18fb      	adds	r3, r7, r3
    c7e4:	1dfa      	adds	r2, r7, #7
    c7e6:	7812      	ldrb	r2, [r2, #0]
    c7e8:	09d2      	lsrs	r2, r2, #7
    c7ea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c7ec:	230e      	movs	r3, #14
    c7ee:	18fb      	adds	r3, r7, r3
    c7f0:	1dfa      	adds	r2, r7, #7
    c7f2:	7812      	ldrb	r2, [r2, #0]
    c7f4:	0952      	lsrs	r2, r2, #5
    c7f6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c7f8:	4b0d      	ldr	r3, [pc, #52]	; (c830 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c7fa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c7fc:	230f      	movs	r3, #15
    c7fe:	18fb      	adds	r3, r7, r3
    c800:	781b      	ldrb	r3, [r3, #0]
    c802:	2b00      	cmp	r3, #0
    c804:	d10f      	bne.n	c826 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c806:	230f      	movs	r3, #15
    c808:	18fb      	adds	r3, r7, r3
    c80a:	781b      	ldrb	r3, [r3, #0]
    c80c:	009b      	lsls	r3, r3, #2
    c80e:	2210      	movs	r2, #16
    c810:	4694      	mov	ip, r2
    c812:	44bc      	add	ip, r7
    c814:	4463      	add	r3, ip
    c816:	3b08      	subs	r3, #8
    c818:	681a      	ldr	r2, [r3, #0]
    c81a:	230e      	movs	r3, #14
    c81c:	18fb      	adds	r3, r7, r3
    c81e:	781b      	ldrb	r3, [r3, #0]
    c820:	01db      	lsls	r3, r3, #7
    c822:	18d3      	adds	r3, r2, r3
    c824:	e000      	b.n	c828 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c826:	2300      	movs	r3, #0
}
    c828:	0018      	movs	r0, r3
    c82a:	46bd      	mov	sp, r7
    c82c:	b004      	add	sp, #16
    c82e:	bd80      	pop	{r7, pc}
    c830:	41004400 	.word	0x41004400

0000c834 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    c834:	b580      	push	{r7, lr}
    c836:	b088      	sub	sp, #32
    c838:	af00      	add	r7, sp, #0
    c83a:	60f8      	str	r0, [r7, #12]
    c83c:	60b9      	str	r1, [r7, #8]
    c83e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    c840:	2300      	movs	r3, #0
    c842:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    c844:	687b      	ldr	r3, [r7, #4]
    c846:	78db      	ldrb	r3, [r3, #3]
    c848:	2201      	movs	r2, #1
    c84a:	4053      	eors	r3, r2
    c84c:	b2db      	uxtb	r3, r3
    c84e:	2b00      	cmp	r3, #0
    c850:	d035      	beq.n	c8be <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    c852:	687b      	ldr	r3, [r7, #4]
    c854:	781b      	ldrb	r3, [r3, #0]
    c856:	2b80      	cmp	r3, #128	; 0x80
    c858:	d00b      	beq.n	c872 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    c85a:	69fb      	ldr	r3, [r7, #28]
    c85c:	2280      	movs	r2, #128	; 0x80
    c85e:	0252      	lsls	r2, r2, #9
    c860:	4313      	orrs	r3, r2
    c862:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    c864:	687b      	ldr	r3, [r7, #4]
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	061b      	lsls	r3, r3, #24
    c86a:	001a      	movs	r2, r3
    c86c:	69fb      	ldr	r3, [r7, #28]
    c86e:	4313      	orrs	r3, r2
    c870:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c872:	687b      	ldr	r3, [r7, #4]
    c874:	785b      	ldrb	r3, [r3, #1]
    c876:	2b00      	cmp	r3, #0
    c878:	d003      	beq.n	c882 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c87a:	687b      	ldr	r3, [r7, #4]
    c87c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c87e:	2b02      	cmp	r3, #2
    c880:	d110      	bne.n	c8a4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    c882:	69fb      	ldr	r3, [r7, #28]
    c884:	2280      	movs	r2, #128	; 0x80
    c886:	0292      	lsls	r2, r2, #10
    c888:	4313      	orrs	r3, r2
    c88a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    c88c:	687b      	ldr	r3, [r7, #4]
    c88e:	789b      	ldrb	r3, [r3, #2]
    c890:	2b00      	cmp	r3, #0
    c892:	d004      	beq.n	c89e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    c894:	69fb      	ldr	r3, [r7, #28]
    c896:	2280      	movs	r2, #128	; 0x80
    c898:	02d2      	lsls	r2, r2, #11
    c89a:	4313      	orrs	r3, r2
    c89c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    c89e:	68fb      	ldr	r3, [r7, #12]
    c8a0:	68ba      	ldr	r2, [r7, #8]
    c8a2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c8a4:	687b      	ldr	r3, [r7, #4]
    c8a6:	785b      	ldrb	r3, [r3, #1]
    c8a8:	2b01      	cmp	r3, #1
    c8aa:	d003      	beq.n	c8b4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c8ac:	687b      	ldr	r3, [r7, #4]
    c8ae:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c8b0:	2b02      	cmp	r3, #2
    c8b2:	d107      	bne.n	c8c4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    c8b4:	69fb      	ldr	r3, [r7, #28]
    c8b6:	4a22      	ldr	r2, [pc, #136]	; (c940 <_system_pinmux_config+0x10c>)
    c8b8:	4013      	ands	r3, r2
    c8ba:	61fb      	str	r3, [r7, #28]
    c8bc:	e002      	b.n	c8c4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    c8be:	68fb      	ldr	r3, [r7, #12]
    c8c0:	68ba      	ldr	r2, [r7, #8]
    c8c2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    c8c4:	68bb      	ldr	r3, [r7, #8]
    c8c6:	041b      	lsls	r3, r3, #16
    c8c8:	0c1b      	lsrs	r3, r3, #16
    c8ca:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    c8cc:	68bb      	ldr	r3, [r7, #8]
    c8ce:	0c1b      	lsrs	r3, r3, #16
    c8d0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c8d2:	69ba      	ldr	r2, [r7, #24]
    c8d4:	69fb      	ldr	r3, [r7, #28]
    c8d6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    c8d8:	22a0      	movs	r2, #160	; 0xa0
    c8da:	05d2      	lsls	r2, r2, #23
    c8dc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c8de:	68fb      	ldr	r3, [r7, #12]
    c8e0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c8e2:	697a      	ldr	r2, [r7, #20]
    c8e4:	69fb      	ldr	r3, [r7, #28]
    c8e6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    c8e8:	22d0      	movs	r2, #208	; 0xd0
    c8ea:	0612      	lsls	r2, r2, #24
    c8ec:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c8ee:	68fb      	ldr	r3, [r7, #12]
    c8f0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    c8f2:	687b      	ldr	r3, [r7, #4]
    c8f4:	78db      	ldrb	r3, [r3, #3]
    c8f6:	2201      	movs	r2, #1
    c8f8:	4053      	eors	r3, r2
    c8fa:	b2db      	uxtb	r3, r3
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d01a      	beq.n	c936 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    c900:	69fa      	ldr	r2, [r7, #28]
    c902:	2380      	movs	r3, #128	; 0x80
    c904:	02db      	lsls	r3, r3, #11
    c906:	4013      	ands	r3, r2
    c908:	d00a      	beq.n	c920 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	789b      	ldrb	r3, [r3, #2]
    c90e:	2b01      	cmp	r3, #1
    c910:	d103      	bne.n	c91a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    c912:	68fb      	ldr	r3, [r7, #12]
    c914:	68ba      	ldr	r2, [r7, #8]
    c916:	619a      	str	r2, [r3, #24]
    c918:	e002      	b.n	c920 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    c91a:	68fb      	ldr	r3, [r7, #12]
    c91c:	68ba      	ldr	r2, [r7, #8]
    c91e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c920:	687b      	ldr	r3, [r7, #4]
    c922:	785b      	ldrb	r3, [r3, #1]
    c924:	2b01      	cmp	r3, #1
    c926:	d003      	beq.n	c930 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c928:	687b      	ldr	r3, [r7, #4]
    c92a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c92c:	2b02      	cmp	r3, #2
    c92e:	d102      	bne.n	c936 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    c930:	68fb      	ldr	r3, [r7, #12]
    c932:	68ba      	ldr	r2, [r7, #8]
    c934:	609a      	str	r2, [r3, #8]
		}
	}
}
    c936:	46c0      	nop			; (mov r8, r8)
    c938:	46bd      	mov	sp, r7
    c93a:	b008      	add	sp, #32
    c93c:	bd80      	pop	{r7, pc}
    c93e:	46c0      	nop			; (mov r8, r8)
    c940:	fffbffff 	.word	0xfffbffff

0000c944 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    c944:	b580      	push	{r7, lr}
    c946:	b084      	sub	sp, #16
    c948:	af00      	add	r7, sp, #0
    c94a:	0002      	movs	r2, r0
    c94c:	6039      	str	r1, [r7, #0]
    c94e:	1dfb      	adds	r3, r7, #7
    c950:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c952:	1dfb      	adds	r3, r7, #7
    c954:	781b      	ldrb	r3, [r3, #0]
    c956:	0018      	movs	r0, r3
    c958:	4b0a      	ldr	r3, [pc, #40]	; (c984 <system_pinmux_pin_set_config+0x40>)
    c95a:	4798      	blx	r3
    c95c:	0003      	movs	r3, r0
    c95e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    c960:	1dfb      	adds	r3, r7, #7
    c962:	781b      	ldrb	r3, [r3, #0]
    c964:	221f      	movs	r2, #31
    c966:	4013      	ands	r3, r2
    c968:	2201      	movs	r2, #1
    c96a:	409a      	lsls	r2, r3
    c96c:	0013      	movs	r3, r2
    c96e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    c970:	683a      	ldr	r2, [r7, #0]
    c972:	68b9      	ldr	r1, [r7, #8]
    c974:	68fb      	ldr	r3, [r7, #12]
    c976:	0018      	movs	r0, r3
    c978:	4b03      	ldr	r3, [pc, #12]	; (c988 <system_pinmux_pin_set_config+0x44>)
    c97a:	4798      	blx	r3
}
    c97c:	46c0      	nop			; (mov r8, r8)
    c97e:	46bd      	mov	sp, r7
    c980:	b004      	add	sp, #16
    c982:	bd80      	pop	{r7, pc}
    c984:	0000c7d5 	.word	0x0000c7d5
    c988:	0000c835 	.word	0x0000c835

0000c98c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    c98c:	b580      	push	{r7, lr}
    c98e:	af00      	add	r7, sp, #0
	return;
    c990:	46c0      	nop			; (mov r8, r8)
}
    c992:	46bd      	mov	sp, r7
    c994:	bd80      	pop	{r7, pc}
	...

0000c998 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    c998:	b580      	push	{r7, lr}
    c99a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    c99c:	4b06      	ldr	r3, [pc, #24]	; (c9b8 <system_init+0x20>)
    c99e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    c9a0:	4b06      	ldr	r3, [pc, #24]	; (c9bc <system_init+0x24>)
    c9a2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    c9a4:	4b06      	ldr	r3, [pc, #24]	; (c9c0 <system_init+0x28>)
    c9a6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    c9a8:	4b06      	ldr	r3, [pc, #24]	; (c9c4 <system_init+0x2c>)
    c9aa:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    c9ac:	4b06      	ldr	r3, [pc, #24]	; (c9c8 <system_init+0x30>)
    c9ae:	4798      	blx	r3
}
    c9b0:	46c0      	nop			; (mov r8, r8)
    c9b2:	46bd      	mov	sp, r7
    c9b4:	bd80      	pop	{r7, pc}
    c9b6:	46c0      	nop			; (mov r8, r8)
    c9b8:	0000c0b1 	.word	0x0000c0b1
    c9bc:	0000b945 	.word	0x0000b945
    c9c0:	0000c98d 	.word	0x0000c98d
    c9c4:	000065f9 	.word	0x000065f9
    c9c8:	0000c98d 	.word	0x0000c98d

0000c9cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    c9cc:	b580      	push	{r7, lr}
    c9ce:	b082      	sub	sp, #8
    c9d0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    c9d2:	4b2f      	ldr	r3, [pc, #188]	; (ca90 <Reset_Handler+0xc4>)
    c9d4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    c9d6:	4b2f      	ldr	r3, [pc, #188]	; (ca94 <Reset_Handler+0xc8>)
    c9d8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    c9da:	687a      	ldr	r2, [r7, #4]
    c9dc:	683b      	ldr	r3, [r7, #0]
    c9de:	429a      	cmp	r2, r3
    c9e0:	d00c      	beq.n	c9fc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    c9e2:	e007      	b.n	c9f4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    c9e4:	683b      	ldr	r3, [r7, #0]
    c9e6:	1d1a      	adds	r2, r3, #4
    c9e8:	603a      	str	r2, [r7, #0]
    c9ea:	687a      	ldr	r2, [r7, #4]
    c9ec:	1d11      	adds	r1, r2, #4
    c9ee:	6079      	str	r1, [r7, #4]
    c9f0:	6812      	ldr	r2, [r2, #0]
    c9f2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    c9f4:	683a      	ldr	r2, [r7, #0]
    c9f6:	4b28      	ldr	r3, [pc, #160]	; (ca98 <Reset_Handler+0xcc>)
    c9f8:	429a      	cmp	r2, r3
    c9fa:	d3f3      	bcc.n	c9e4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    c9fc:	4b27      	ldr	r3, [pc, #156]	; (ca9c <Reset_Handler+0xd0>)
    c9fe:	603b      	str	r3, [r7, #0]
    ca00:	e004      	b.n	ca0c <Reset_Handler+0x40>
                *pDest++ = 0;
    ca02:	683b      	ldr	r3, [r7, #0]
    ca04:	1d1a      	adds	r2, r3, #4
    ca06:	603a      	str	r2, [r7, #0]
    ca08:	2200      	movs	r2, #0
    ca0a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    ca0c:	683a      	ldr	r2, [r7, #0]
    ca0e:	4b24      	ldr	r3, [pc, #144]	; (caa0 <Reset_Handler+0xd4>)
    ca10:	429a      	cmp	r2, r3
    ca12:	d3f6      	bcc.n	ca02 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    ca14:	4b23      	ldr	r3, [pc, #140]	; (caa4 <Reset_Handler+0xd8>)
    ca16:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    ca18:	4b23      	ldr	r3, [pc, #140]	; (caa8 <Reset_Handler+0xdc>)
    ca1a:	687a      	ldr	r2, [r7, #4]
    ca1c:	21ff      	movs	r1, #255	; 0xff
    ca1e:	438a      	bics	r2, r1
    ca20:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    ca22:	4a22      	ldr	r2, [pc, #136]	; (caac <Reset_Handler+0xe0>)
    ca24:	2390      	movs	r3, #144	; 0x90
    ca26:	005b      	lsls	r3, r3, #1
    ca28:	2102      	movs	r1, #2
    ca2a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    ca2c:	4a20      	ldr	r2, [pc, #128]	; (cab0 <Reset_Handler+0xe4>)
    ca2e:	78d3      	ldrb	r3, [r2, #3]
    ca30:	2103      	movs	r1, #3
    ca32:	438b      	bics	r3, r1
    ca34:	1c19      	adds	r1, r3, #0
    ca36:	2302      	movs	r3, #2
    ca38:	430b      	orrs	r3, r1
    ca3a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    ca3c:	4a1c      	ldr	r2, [pc, #112]	; (cab0 <Reset_Handler+0xe4>)
    ca3e:	78d3      	ldrb	r3, [r2, #3]
    ca40:	210c      	movs	r1, #12
    ca42:	438b      	bics	r3, r1
    ca44:	1c19      	adds	r1, r3, #0
    ca46:	2308      	movs	r3, #8
    ca48:	430b      	orrs	r3, r1
    ca4a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    ca4c:	4a19      	ldr	r2, [pc, #100]	; (cab4 <Reset_Handler+0xe8>)
    ca4e:	7b93      	ldrb	r3, [r2, #14]
    ca50:	2130      	movs	r1, #48	; 0x30
    ca52:	438b      	bics	r3, r1
    ca54:	1c19      	adds	r1, r3, #0
    ca56:	2320      	movs	r3, #32
    ca58:	430b      	orrs	r3, r1
    ca5a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    ca5c:	4a15      	ldr	r2, [pc, #84]	; (cab4 <Reset_Handler+0xe8>)
    ca5e:	7b93      	ldrb	r3, [r2, #14]
    ca60:	210c      	movs	r1, #12
    ca62:	438b      	bics	r3, r1
    ca64:	1c19      	adds	r1, r3, #0
    ca66:	2308      	movs	r3, #8
    ca68:	430b      	orrs	r3, r1
    ca6a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    ca6c:	4a11      	ldr	r2, [pc, #68]	; (cab4 <Reset_Handler+0xe8>)
    ca6e:	7b93      	ldrb	r3, [r2, #14]
    ca70:	2103      	movs	r1, #3
    ca72:	438b      	bics	r3, r1
    ca74:	1c19      	adds	r1, r3, #0
    ca76:	2302      	movs	r3, #2
    ca78:	430b      	orrs	r3, r1
    ca7a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    ca7c:	4a0e      	ldr	r2, [pc, #56]	; (cab8 <Reset_Handler+0xec>)
    ca7e:	6853      	ldr	r3, [r2, #4]
    ca80:	2180      	movs	r1, #128	; 0x80
    ca82:	430b      	orrs	r3, r1
    ca84:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    ca86:	4b0d      	ldr	r3, [pc, #52]	; (cabc <Reset_Handler+0xf0>)
    ca88:	4798      	blx	r3

        /* Branch to main function */
        main();
    ca8a:	4b0d      	ldr	r3, [pc, #52]	; (cac0 <Reset_Handler+0xf4>)
    ca8c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    ca8e:	e7fe      	b.n	ca8e <Reset_Handler+0xc2>
    ca90:	00014498 	.word	0x00014498
    ca94:	20000000 	.word	0x20000000
    ca98:	200001e4 	.word	0x200001e4
    ca9c:	200001e4 	.word	0x200001e4
    caa0:	20000ac8 	.word	0x20000ac8
    caa4:	00000000 	.word	0x00000000
    caa8:	e000ed00 	.word	0xe000ed00
    caac:	41007000 	.word	0x41007000
    cab0:	41005000 	.word	0x41005000
    cab4:	41004800 	.word	0x41004800
    cab8:	41004000 	.word	0x41004000
    cabc:	0000dced 	.word	0x0000dced
    cac0:	0000cee9 	.word	0x0000cee9

0000cac4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    cac4:	b580      	push	{r7, lr}
    cac6:	af00      	add	r7, sp, #0
        while (1) {
    cac8:	e7fe      	b.n	cac8 <Dummy_Handler+0x4>
	...

0000cacc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    cacc:	b580      	push	{r7, lr}
    cace:	b084      	sub	sp, #16
    cad0:	af00      	add	r7, sp, #0
    cad2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    cad4:	4b0a      	ldr	r3, [pc, #40]	; (cb00 <_sbrk+0x34>)
    cad6:	681b      	ldr	r3, [r3, #0]
    cad8:	2b00      	cmp	r3, #0
    cada:	d102      	bne.n	cae2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    cadc:	4b08      	ldr	r3, [pc, #32]	; (cb00 <_sbrk+0x34>)
    cade:	4a09      	ldr	r2, [pc, #36]	; (cb04 <_sbrk+0x38>)
    cae0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    cae2:	4b07      	ldr	r3, [pc, #28]	; (cb00 <_sbrk+0x34>)
    cae4:	681b      	ldr	r3, [r3, #0]
    cae6:	60fb      	str	r3, [r7, #12]

	heap += incr;
    cae8:	4b05      	ldr	r3, [pc, #20]	; (cb00 <_sbrk+0x34>)
    caea:	681a      	ldr	r2, [r3, #0]
    caec:	687b      	ldr	r3, [r7, #4]
    caee:	18d2      	adds	r2, r2, r3
    caf0:	4b03      	ldr	r3, [pc, #12]	; (cb00 <_sbrk+0x34>)
    caf2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    caf4:	68fb      	ldr	r3, [r7, #12]
}
    caf6:	0018      	movs	r0, r3
    caf8:	46bd      	mov	sp, r7
    cafa:	b004      	add	sp, #16
    cafc:	bd80      	pop	{r7, pc}
    cafe:	46c0      	nop			; (mov r8, r8)
    cb00:	20000268 	.word	0x20000268
    cb04:	20002ac8 	.word	0x20002ac8

0000cb08 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    cb08:	b580      	push	{r7, lr}
    cb0a:	b082      	sub	sp, #8
    cb0c:	af00      	add	r7, sp, #0
    cb0e:	6078      	str	r0, [r7, #4]
	return -1;
    cb10:	2301      	movs	r3, #1
    cb12:	425b      	negs	r3, r3
}
    cb14:	0018      	movs	r0, r3
    cb16:	46bd      	mov	sp, r7
    cb18:	b002      	add	sp, #8
    cb1a:	bd80      	pop	{r7, pc}

0000cb1c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    cb1c:	b580      	push	{r7, lr}
    cb1e:	b082      	sub	sp, #8
    cb20:	af00      	add	r7, sp, #0
    cb22:	6078      	str	r0, [r7, #4]
    cb24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    cb26:	683b      	ldr	r3, [r7, #0]
    cb28:	2280      	movs	r2, #128	; 0x80
    cb2a:	0192      	lsls	r2, r2, #6
    cb2c:	605a      	str	r2, [r3, #4]

	return 0;
    cb2e:	2300      	movs	r3, #0
}
    cb30:	0018      	movs	r0, r3
    cb32:	46bd      	mov	sp, r7
    cb34:	b002      	add	sp, #8
    cb36:	bd80      	pop	{r7, pc}

0000cb38 <_isatty>:

extern int _isatty(int file)
{
    cb38:	b580      	push	{r7, lr}
    cb3a:	b082      	sub	sp, #8
    cb3c:	af00      	add	r7, sp, #0
    cb3e:	6078      	str	r0, [r7, #4]
	return 1;
    cb40:	2301      	movs	r3, #1
}
    cb42:	0018      	movs	r0, r3
    cb44:	46bd      	mov	sp, r7
    cb46:	b002      	add	sp, #8
    cb48:	bd80      	pop	{r7, pc}

0000cb4a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    cb4a:	b580      	push	{r7, lr}
    cb4c:	b084      	sub	sp, #16
    cb4e:	af00      	add	r7, sp, #0
    cb50:	60f8      	str	r0, [r7, #12]
    cb52:	60b9      	str	r1, [r7, #8]
    cb54:	607a      	str	r2, [r7, #4]
	return 0;
    cb56:	2300      	movs	r3, #0
}
    cb58:	0018      	movs	r0, r3
    cb5a:	46bd      	mov	sp, r7
    cb5c:	b004      	add	sp, #16
    cb5e:	bd80      	pop	{r7, pc}

0000cb60 <system_pinmux_get_group_from_gpio_pin>:
{
    cb60:	b580      	push	{r7, lr}
    cb62:	b084      	sub	sp, #16
    cb64:	af00      	add	r7, sp, #0
    cb66:	0002      	movs	r2, r0
    cb68:	1dfb      	adds	r3, r7, #7
    cb6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    cb6c:	230f      	movs	r3, #15
    cb6e:	18fb      	adds	r3, r7, r3
    cb70:	1dfa      	adds	r2, r7, #7
    cb72:	7812      	ldrb	r2, [r2, #0]
    cb74:	09d2      	lsrs	r2, r2, #7
    cb76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    cb78:	230e      	movs	r3, #14
    cb7a:	18fb      	adds	r3, r7, r3
    cb7c:	1dfa      	adds	r2, r7, #7
    cb7e:	7812      	ldrb	r2, [r2, #0]
    cb80:	0952      	lsrs	r2, r2, #5
    cb82:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cb84:	4b0d      	ldr	r3, [pc, #52]	; (cbbc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cb86:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    cb88:	230f      	movs	r3, #15
    cb8a:	18fb      	adds	r3, r7, r3
    cb8c:	781b      	ldrb	r3, [r3, #0]
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d10f      	bne.n	cbb2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    cb92:	230f      	movs	r3, #15
    cb94:	18fb      	adds	r3, r7, r3
    cb96:	781b      	ldrb	r3, [r3, #0]
    cb98:	009b      	lsls	r3, r3, #2
    cb9a:	2210      	movs	r2, #16
    cb9c:	4694      	mov	ip, r2
    cb9e:	44bc      	add	ip, r7
    cba0:	4463      	add	r3, ip
    cba2:	3b08      	subs	r3, #8
    cba4:	681a      	ldr	r2, [r3, #0]
    cba6:	230e      	movs	r3, #14
    cba8:	18fb      	adds	r3, r7, r3
    cbaa:	781b      	ldrb	r3, [r3, #0]
    cbac:	01db      	lsls	r3, r3, #7
    cbae:	18d3      	adds	r3, r2, r3
    cbb0:	e000      	b.n	cbb4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    cbb2:	2300      	movs	r3, #0
}
    cbb4:	0018      	movs	r0, r3
    cbb6:	46bd      	mov	sp, r7
    cbb8:	b004      	add	sp, #16
    cbba:	bd80      	pop	{r7, pc}
    cbbc:	41004400 	.word	0x41004400

0000cbc0 <adc_is_syncing>:
{
    cbc0:	b580      	push	{r7, lr}
    cbc2:	b084      	sub	sp, #16
    cbc4:	af00      	add	r7, sp, #0
    cbc6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    cbc8:	687b      	ldr	r3, [r7, #4]
    cbca:	681b      	ldr	r3, [r3, #0]
    cbcc:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    cbce:	68fb      	ldr	r3, [r7, #12]
    cbd0:	7e5b      	ldrb	r3, [r3, #25]
    cbd2:	b2db      	uxtb	r3, r3
    cbd4:	b25b      	sxtb	r3, r3
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	da01      	bge.n	cbde <adc_is_syncing+0x1e>
		return true;
    cbda:	2301      	movs	r3, #1
    cbdc:	e000      	b.n	cbe0 <adc_is_syncing+0x20>
	return false;
    cbde:	2300      	movs	r3, #0
}
    cbe0:	0018      	movs	r0, r3
    cbe2:	46bd      	mov	sp, r7
    cbe4:	b004      	add	sp, #16
    cbe6:	bd80      	pop	{r7, pc}

0000cbe8 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    cbe8:	b580      	push	{r7, lr}
    cbea:	b084      	sub	sp, #16
    cbec:	af00      	add	r7, sp, #0
    cbee:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	681b      	ldr	r3, [r3, #0]
    cbf4:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    cbf6:	46c0      	nop			; (mov r8, r8)
    cbf8:	687b      	ldr	r3, [r7, #4]
    cbfa:	0018      	movs	r0, r3
    cbfc:	4b0e      	ldr	r3, [pc, #56]	; (cc38 <adc_enable+0x50>)
    cbfe:	4798      	blx	r3
    cc00:	1e03      	subs	r3, r0, #0
    cc02:	d1f9      	bne.n	cbf8 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    cc04:	68fb      	ldr	r3, [r7, #12]
    cc06:	220f      	movs	r2, #15
    cc08:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    cc0a:	68fb      	ldr	r3, [r7, #12]
    cc0c:	220f      	movs	r2, #15
    cc0e:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    cc10:	68fb      	ldr	r3, [r7, #12]
    cc12:	781b      	ldrb	r3, [r3, #0]
    cc14:	b2db      	uxtb	r3, r3
    cc16:	2202      	movs	r2, #2
    cc18:	4313      	orrs	r3, r2
    cc1a:	b2da      	uxtb	r2, r3
    cc1c:	68fb      	ldr	r3, [r7, #12]
    cc1e:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    cc20:	46c0      	nop			; (mov r8, r8)
    cc22:	687b      	ldr	r3, [r7, #4]
    cc24:	0018      	movs	r0, r3
    cc26:	4b04      	ldr	r3, [pc, #16]	; (cc38 <adc_enable+0x50>)
    cc28:	4798      	blx	r3
    cc2a:	1e03      	subs	r3, r0, #0
    cc2c:	d1f9      	bne.n	cc22 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    cc2e:	2300      	movs	r3, #0
}
    cc30:	0018      	movs	r0, r3
    cc32:	46bd      	mov	sp, r7
    cc34:	b004      	add	sp, #16
    cc36:	bd80      	pop	{r7, pc}
    cc38:	0000cbc1 	.word	0x0000cbc1

0000cc3c <port_get_group_from_gpio_pin>:
{
    cc3c:	b580      	push	{r7, lr}
    cc3e:	b082      	sub	sp, #8
    cc40:	af00      	add	r7, sp, #0
    cc42:	0002      	movs	r2, r0
    cc44:	1dfb      	adds	r3, r7, #7
    cc46:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cc48:	1dfb      	adds	r3, r7, #7
    cc4a:	781b      	ldrb	r3, [r3, #0]
    cc4c:	0018      	movs	r0, r3
    cc4e:	4b03      	ldr	r3, [pc, #12]	; (cc5c <port_get_group_from_gpio_pin+0x20>)
    cc50:	4798      	blx	r3
    cc52:	0003      	movs	r3, r0
}
    cc54:	0018      	movs	r0, r3
    cc56:	46bd      	mov	sp, r7
    cc58:	b002      	add	sp, #8
    cc5a:	bd80      	pop	{r7, pc}
    cc5c:	0000cb61 	.word	0x0000cb61

0000cc60 <port_get_config_defaults>:
{
    cc60:	b580      	push	{r7, lr}
    cc62:	b082      	sub	sp, #8
    cc64:	af00      	add	r7, sp, #0
    cc66:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    cc68:	687b      	ldr	r3, [r7, #4]
    cc6a:	2200      	movs	r2, #0
    cc6c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    cc6e:	687b      	ldr	r3, [r7, #4]
    cc70:	2201      	movs	r2, #1
    cc72:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    cc74:	687b      	ldr	r3, [r7, #4]
    cc76:	2200      	movs	r2, #0
    cc78:	709a      	strb	r2, [r3, #2]
}
    cc7a:	46c0      	nop			; (mov r8, r8)
    cc7c:	46bd      	mov	sp, r7
    cc7e:	b002      	add	sp, #8
    cc80:	bd80      	pop	{r7, pc}
	...

0000cc84 <port_pin_set_output_level>:
{
    cc84:	b580      	push	{r7, lr}
    cc86:	b084      	sub	sp, #16
    cc88:	af00      	add	r7, sp, #0
    cc8a:	0002      	movs	r2, r0
    cc8c:	1dfb      	adds	r3, r7, #7
    cc8e:	701a      	strb	r2, [r3, #0]
    cc90:	1dbb      	adds	r3, r7, #6
    cc92:	1c0a      	adds	r2, r1, #0
    cc94:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    cc96:	1dfb      	adds	r3, r7, #7
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	0018      	movs	r0, r3
    cc9c:	4b0d      	ldr	r3, [pc, #52]	; (ccd4 <port_pin_set_output_level+0x50>)
    cc9e:	4798      	blx	r3
    cca0:	0003      	movs	r3, r0
    cca2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cca4:	1dfb      	adds	r3, r7, #7
    cca6:	781b      	ldrb	r3, [r3, #0]
    cca8:	221f      	movs	r2, #31
    ccaa:	4013      	ands	r3, r2
    ccac:	2201      	movs	r2, #1
    ccae:	409a      	lsls	r2, r3
    ccb0:	0013      	movs	r3, r2
    ccb2:	60bb      	str	r3, [r7, #8]
	if (level) {
    ccb4:	1dbb      	adds	r3, r7, #6
    ccb6:	781b      	ldrb	r3, [r3, #0]
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d003      	beq.n	ccc4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    ccbc:	68fb      	ldr	r3, [r7, #12]
    ccbe:	68ba      	ldr	r2, [r7, #8]
    ccc0:	619a      	str	r2, [r3, #24]
}
    ccc2:	e002      	b.n	ccca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    ccc4:	68fb      	ldr	r3, [r7, #12]
    ccc6:	68ba      	ldr	r2, [r7, #8]
    ccc8:	615a      	str	r2, [r3, #20]
}
    ccca:	46c0      	nop			; (mov r8, r8)
    cccc:	46bd      	mov	sp, r7
    ccce:	b004      	add	sp, #16
    ccd0:	bd80      	pop	{r7, pc}
    ccd2:	46c0      	nop			; (mov r8, r8)
    ccd4:	0000cc3d 	.word	0x0000cc3d

0000ccd8 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    ccd8:	b580      	push	{r7, lr}
    ccda:	b08e      	sub	sp, #56	; 0x38
    ccdc:	af00      	add	r7, sp, #0
    ccde:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    cce0:	2308      	movs	r3, #8
    cce2:	18fb      	adds	r3, r7, r3
    cce4:	0018      	movs	r0, r3
    cce6:	4b0f      	ldr	r3, [pc, #60]	; (cd24 <configure_adc+0x4c>)
    cce8:	4798      	blx	r3
	config_adc.positive_input = pin;
    ccea:	687b      	ldr	r3, [r7, #4]
    ccec:	b2da      	uxtb	r2, r3
    ccee:	2308      	movs	r3, #8
    ccf0:	18fb      	adds	r3, r7, r3
    ccf2:	731a      	strb	r2, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    ccf4:	2308      	movs	r3, #8
    ccf6:	18fb      	adds	r3, r7, r3
    ccf8:	2201      	movs	r2, #1
    ccfa:	705a      	strb	r2, [r3, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    ccfc:	2308      	movs	r3, #8
    ccfe:	18fb      	adds	r3, r7, r3
    cd00:	2280      	movs	r2, #128	; 0x80
    cd02:	0092      	lsls	r2, r2, #2
    cd04:	805a      	strh	r2, [r3, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    cd06:	2308      	movs	r3, #8
    cd08:	18fa      	adds	r2, r7, r3
    cd0a:	4907      	ldr	r1, [pc, #28]	; (cd28 <configure_adc+0x50>)
    cd0c:	4b07      	ldr	r3, [pc, #28]	; (cd2c <configure_adc+0x54>)
    cd0e:	0018      	movs	r0, r3
    cd10:	4b07      	ldr	r3, [pc, #28]	; (cd30 <configure_adc+0x58>)
    cd12:	4798      	blx	r3
	adc_enable(&adc_instance);
    cd14:	4b05      	ldr	r3, [pc, #20]	; (cd2c <configure_adc+0x54>)
    cd16:	0018      	movs	r0, r3
    cd18:	4b06      	ldr	r3, [pc, #24]	; (cd34 <configure_adc+0x5c>)
    cd1a:	4798      	blx	r3
}
    cd1c:	46c0      	nop			; (mov r8, r8)
    cd1e:	46bd      	mov	sp, r7
    cd20:	b00e      	add	sp, #56	; 0x38
    cd22:	bd80      	pop	{r7, pc}
    cd24:	00008d3d 	.word	0x00008d3d
    cd28:	42004000 	.word	0x42004000
    cd2c:	20000a98 	.word	0x20000a98
    cd30:	0000938d 	.word	0x0000938d
    cd34:	0000cbe9 	.word	0x0000cbe9

0000cd38 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    cd38:	b580      	push	{r7, lr}
    cd3a:	b084      	sub	sp, #16
    cd3c:	af00      	add	r7, sp, #0
    cd3e:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    cd40:	230c      	movs	r3, #12
    cd42:	18fb      	adds	r3, r7, r3
    cd44:	0018      	movs	r0, r3
    cd46:	4b09      	ldr	r3, [pc, #36]	; (cd6c <configure_port_pins_set+0x34>)
    cd48:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    cd4a:	230c      	movs	r3, #12
    cd4c:	18fb      	adds	r3, r7, r3
    cd4e:	2201      	movs	r2, #1
    cd50:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(pin, &config_port_pin);
    cd52:	687b      	ldr	r3, [r7, #4]
    cd54:	b2db      	uxtb	r3, r3
    cd56:	220c      	movs	r2, #12
    cd58:	18ba      	adds	r2, r7, r2
    cd5a:	0011      	movs	r1, r2
    cd5c:	0018      	movs	r0, r3
    cd5e:	4b04      	ldr	r3, [pc, #16]	; (cd70 <configure_port_pins_set+0x38>)
    cd60:	4798      	blx	r3
}
    cd62:	46c0      	nop			; (mov r8, r8)
    cd64:	46bd      	mov	sp, r7
    cd66:	b004      	add	sp, #16
    cd68:	bd80      	pop	{r7, pc}
    cd6a:	46c0      	nop			; (mov r8, r8)
    cd6c:	0000cc61 	.word	0x0000cc61
    cd70:	0000b9bd 	.word	0x0000b9bd

0000cd74 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
    cd74:	b580      	push	{r7, lr}
    cd76:	b084      	sub	sp, #16
    cd78:	af00      	add	r7, sp, #0
    cd7a:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    cd7c:	230c      	movs	r3, #12
    cd7e:	18fb      	adds	r3, r7, r3
    cd80:	0018      	movs	r0, r3
    cd82:	4b0b      	ldr	r3, [pc, #44]	; (cdb0 <configure_port_pins_get+0x3c>)
    cd84:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    cd86:	230c      	movs	r3, #12
    cd88:	18fb      	adds	r3, r7, r3
    cd8a:	2200      	movs	r2, #0
    cd8c:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    cd8e:	230c      	movs	r3, #12
    cd90:	18fb      	adds	r3, r7, r3
    cd92:	2201      	movs	r2, #1
    cd94:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(pin, &config_port_pin);
    cd96:	687b      	ldr	r3, [r7, #4]
    cd98:	b2db      	uxtb	r3, r3
    cd9a:	220c      	movs	r2, #12
    cd9c:	18ba      	adds	r2, r7, r2
    cd9e:	0011      	movs	r1, r2
    cda0:	0018      	movs	r0, r3
    cda2:	4b04      	ldr	r3, [pc, #16]	; (cdb4 <configure_port_pins_get+0x40>)
    cda4:	4798      	blx	r3
}
    cda6:	46c0      	nop			; (mov r8, r8)
    cda8:	46bd      	mov	sp, r7
    cdaa:	b004      	add	sp, #16
    cdac:	bd80      	pop	{r7, pc}
    cdae:	46c0      	nop			; (mov r8, r8)
    cdb0:	0000cc61 	.word	0x0000cc61
    cdb4:	0000b9bd 	.word	0x0000b9bd

0000cdb8 <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
    cdb8:	b580      	push	{r7, lr}
    cdba:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
    cdbc:	2015      	movs	r0, #21
    cdbe:	4b04      	ldr	r3, [pc, #16]	; (cdd0 <led1_on+0x18>)
    cdc0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, true);	
    cdc2:	2101      	movs	r1, #1
    cdc4:	2015      	movs	r0, #21
    cdc6:	4b03      	ldr	r3, [pc, #12]	; (cdd4 <led1_on+0x1c>)
    cdc8:	4798      	blx	r3
}
    cdca:	46c0      	nop			; (mov r8, r8)
    cdcc:	46bd      	mov	sp, r7
    cdce:	bd80      	pop	{r7, pc}
    cdd0:	0000cd39 	.word	0x0000cd39
    cdd4:	0000cc85 	.word	0x0000cc85

0000cdd8 <system_pinmux_get_group_from_gpio_pin>:
{
    cdd8:	b580      	push	{r7, lr}
    cdda:	b084      	sub	sp, #16
    cddc:	af00      	add	r7, sp, #0
    cdde:	0002      	movs	r2, r0
    cde0:	1dfb      	adds	r3, r7, #7
    cde2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    cde4:	230f      	movs	r3, #15
    cde6:	18fb      	adds	r3, r7, r3
    cde8:	1dfa      	adds	r2, r7, #7
    cdea:	7812      	ldrb	r2, [r2, #0]
    cdec:	09d2      	lsrs	r2, r2, #7
    cdee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    cdf0:	230e      	movs	r3, #14
    cdf2:	18fb      	adds	r3, r7, r3
    cdf4:	1dfa      	adds	r2, r7, #7
    cdf6:	7812      	ldrb	r2, [r2, #0]
    cdf8:	0952      	lsrs	r2, r2, #5
    cdfa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cdfc:	4b0d      	ldr	r3, [pc, #52]	; (ce34 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cdfe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    ce00:	230f      	movs	r3, #15
    ce02:	18fb      	adds	r3, r7, r3
    ce04:	781b      	ldrb	r3, [r3, #0]
    ce06:	2b00      	cmp	r3, #0
    ce08:	d10f      	bne.n	ce2a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    ce0a:	230f      	movs	r3, #15
    ce0c:	18fb      	adds	r3, r7, r3
    ce0e:	781b      	ldrb	r3, [r3, #0]
    ce10:	009b      	lsls	r3, r3, #2
    ce12:	2210      	movs	r2, #16
    ce14:	4694      	mov	ip, r2
    ce16:	44bc      	add	ip, r7
    ce18:	4463      	add	r3, ip
    ce1a:	3b08      	subs	r3, #8
    ce1c:	681a      	ldr	r2, [r3, #0]
    ce1e:	230e      	movs	r3, #14
    ce20:	18fb      	adds	r3, r7, r3
    ce22:	781b      	ldrb	r3, [r3, #0]
    ce24:	01db      	lsls	r3, r3, #7
    ce26:	18d3      	adds	r3, r2, r3
    ce28:	e000      	b.n	ce2c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    ce2a:	2300      	movs	r3, #0
}
    ce2c:	0018      	movs	r0, r3
    ce2e:	46bd      	mov	sp, r7
    ce30:	b004      	add	sp, #16
    ce32:	bd80      	pop	{r7, pc}
    ce34:	41004400 	.word	0x41004400

0000ce38 <port_get_group_from_gpio_pin>:
{
    ce38:	b580      	push	{r7, lr}
    ce3a:	b082      	sub	sp, #8
    ce3c:	af00      	add	r7, sp, #0
    ce3e:	0002      	movs	r2, r0
    ce40:	1dfb      	adds	r3, r7, #7
    ce42:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ce44:	1dfb      	adds	r3, r7, #7
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	0018      	movs	r0, r3
    ce4a:	4b03      	ldr	r3, [pc, #12]	; (ce58 <port_get_group_from_gpio_pin+0x20>)
    ce4c:	4798      	blx	r3
    ce4e:	0003      	movs	r3, r0
}
    ce50:	0018      	movs	r0, r3
    ce52:	46bd      	mov	sp, r7
    ce54:	b002      	add	sp, #8
    ce56:	bd80      	pop	{r7, pc}
    ce58:	0000cdd9 	.word	0x0000cdd9

0000ce5c <port_pin_get_input_level>:
{
    ce5c:	b580      	push	{r7, lr}
    ce5e:	b084      	sub	sp, #16
    ce60:	af00      	add	r7, sp, #0
    ce62:	0002      	movs	r2, r0
    ce64:	1dfb      	adds	r3, r7, #7
    ce66:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ce68:	1dfb      	adds	r3, r7, #7
    ce6a:	781b      	ldrb	r3, [r3, #0]
    ce6c:	0018      	movs	r0, r3
    ce6e:	4b0b      	ldr	r3, [pc, #44]	; (ce9c <port_pin_get_input_level+0x40>)
    ce70:	4798      	blx	r3
    ce72:	0003      	movs	r3, r0
    ce74:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ce76:	1dfb      	adds	r3, r7, #7
    ce78:	781b      	ldrb	r3, [r3, #0]
    ce7a:	221f      	movs	r2, #31
    ce7c:	4013      	ands	r3, r2
    ce7e:	2201      	movs	r2, #1
    ce80:	409a      	lsls	r2, r3
    ce82:	0013      	movs	r3, r2
    ce84:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    ce86:	68fb      	ldr	r3, [r7, #12]
    ce88:	6a1b      	ldr	r3, [r3, #32]
    ce8a:	68ba      	ldr	r2, [r7, #8]
    ce8c:	4013      	ands	r3, r2
    ce8e:	1e5a      	subs	r2, r3, #1
    ce90:	4193      	sbcs	r3, r2
    ce92:	b2db      	uxtb	r3, r3
}
    ce94:	0018      	movs	r0, r3
    ce96:	46bd      	mov	sp, r7
    ce98:	b004      	add	sp, #16
    ce9a:	bd80      	pop	{r7, pc}
    ce9c:	0000ce39 	.word	0x0000ce39

0000cea0 <system_interrupt_enable_global>:
{
    cea0:	b580      	push	{r7, lr}
    cea2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    cea4:	4b04      	ldr	r3, [pc, #16]	; (ceb8 <system_interrupt_enable_global+0x18>)
    cea6:	2201      	movs	r2, #1
    cea8:	701a      	strb	r2, [r3, #0]
    ceaa:	f3bf 8f5f 	dmb	sy
    ceae:	b662      	cpsie	i
}
    ceb0:	46c0      	nop			; (mov r8, r8)
    ceb2:	46bd      	mov	sp, r7
    ceb4:	bd80      	pop	{r7, pc}
    ceb6:	46c0      	nop			; (mov r8, r8)
    ceb8:	20000010 	.word	0x20000010

0000cebc <request_led_change>:
/**
 * MQTT broker has requested LED turn on or off
 * @param on_off 1 if turn on 0 if turn off
 */
void request_led_change(uint8_t on_off)
{
    cebc:	b580      	push	{r7, lr}
    cebe:	b082      	sub	sp, #8
    cec0:	af00      	add	r7, sp, #0
    cec2:	0002      	movs	r2, r0
    cec4:	1dfb      	adds	r3, r7, #7
    cec6:	701a      	strb	r2, [r3, #0]
	printf("led change requested w value: %d\r\n", on_off);
    cec8:	1dfb      	adds	r3, r7, #7
    ceca:	781a      	ldrb	r2, [r3, #0]
    cecc:	4b04      	ldr	r3, [pc, #16]	; (cee0 <request_led_change+0x24>)
    cece:	0011      	movs	r1, r2
    ced0:	0018      	movs	r0, r3
    ced2:	4b04      	ldr	r3, [pc, #16]	; (cee4 <request_led_change+0x28>)
    ced4:	4798      	blx	r3
}
    ced6:	46c0      	nop			; (mov r8, r8)
    ced8:	46bd      	mov	sp, r7
    ceda:	b002      	add	sp, #8
    cedc:	bd80      	pop	{r7, pc}
    cede:	46c0      	nop			; (mov r8, r8)
    cee0:	00013f74 	.word	0x00013f74
    cee4:	0000e7e5 	.word	0x0000e7e5

0000cee8 <main>:
	}
}


int main(void)
{
    cee8:	b590      	push	{r4, r7, lr}
    ceea:	b08b      	sub	sp, #44	; 0x2c
    ceec:	af02      	add	r7, sp, #8
	uint32_t MQTTCounter = 0;
    ceee:	2300      	movs	r3, #0
    cef0:	61fb      	str	r3, [r7, #28]

	mqttfirmware_download = 0;
    cef2:	4b45      	ldr	r3, [pc, #276]	; (d008 <main+0x120>)
    cef4:	2200      	movs	r2, #0
    cef6:	701a      	strb	r2, [r3, #0]

	system_init();
    cef8:	4b44      	ldr	r3, [pc, #272]	; (d00c <main+0x124>)
    cefa:	4798      	blx	r3
	system_interrupt_enable_global();
    cefc:	4b44      	ldr	r3, [pc, #272]	; (d010 <main+0x128>)
    cefe:	4798      	blx	r3
	delay_init();
    cf00:	4b44      	ldr	r3, [pc, #272]	; (d014 <main+0x12c>)
    cf02:	4798      	blx	r3
	configure_usart();
    cf04:	4b44      	ldr	r3, [pc, #272]	; (d018 <main+0x130>)
    cf06:	4798      	blx	r3
	mqtt_inst_config new_mqtt;
	get_mqtt_config_defaults(&new_mqtt);
    cf08:	003b      	movs	r3, r7
    cf0a:	0018      	movs	r0, r3
    cf0c:	4b43      	ldr	r3, [pc, #268]	; (d01c <main+0x134>)
    cf0e:	4798      	blx	r3
	int mqtt_result = mqtt_initialize(&new_mqtt);
    cf10:	003b      	movs	r3, r7
    cf12:	0018      	movs	r0, r3
    cf14:	4b42      	ldr	r3, [pc, #264]	; (d020 <main+0x138>)
    cf16:	4798      	blx	r3
    cf18:	0003      	movs	r3, r0
    cf1a:	61bb      	str	r3, [r7, #24]
	
	if (WIFI_SUCCESS != mqtt_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
    cf1c:	69bb      	ldr	r3, [r7, #24]
    cf1e:	2b00      	cmp	r3, #0
    cf20:	d003      	beq.n	cf2a <main+0x42>
    cf22:	4b40      	ldr	r3, [pc, #256]	; (d024 <main+0x13c>)
    cf24:	0018      	movs	r0, r3
    cf26:	4b40      	ldr	r3, [pc, #256]	; (d028 <main+0x140>)
    cf28:	4798      	blx	r3

	printf("Board initialized.\r\n");
    cf2a:	4b40      	ldr	r3, [pc, #256]	; (d02c <main+0x144>)
    cf2c:	0018      	movs	r0, r3
    cf2e:	4b3e      	ldr	r3, [pc, #248]	; (d028 <main+0x140>)
    cf30:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect(new_mqtt.ssid, strlen(new_mqtt.ssid), new_mqtt.auth, new_mqtt.password, M2M_WIFI_CH_ALL);
    cf32:	003b      	movs	r3, r7
    cf34:	681c      	ldr	r4, [r3, #0]
    cf36:	003b      	movs	r3, r7
    cf38:	681b      	ldr	r3, [r3, #0]
    cf3a:	0018      	movs	r0, r3
    cf3c:	4b3c      	ldr	r3, [pc, #240]	; (d030 <main+0x148>)
    cf3e:	4798      	blx	r3
    cf40:	0003      	movs	r3, r0
    cf42:	b2d9      	uxtb	r1, r3
    cf44:	003b      	movs	r3, r7
    cf46:	685b      	ldr	r3, [r3, #4]
    cf48:	b2da      	uxtb	r2, r3
    cf4a:	003b      	movs	r3, r7
    cf4c:	6898      	ldr	r0, [r3, #8]
    cf4e:	23ff      	movs	r3, #255	; 0xff
    cf50:	9300      	str	r3, [sp, #0]
    cf52:	0003      	movs	r3, r0
    cf54:	0020      	movs	r0, r4
    cf56:	4c37      	ldr	r4, [pc, #220]	; (d034 <main+0x14c>)
    cf58:	47a0      	blx	r4

	while (!(wifi_connected)) {
    cf5a:	e002      	b.n	cf62 <main+0x7a>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    cf5c:	2000      	movs	r0, #0
    cf5e:	4b36      	ldr	r3, [pc, #216]	; (d038 <main+0x150>)
    cf60:	4798      	blx	r3
	while (!(wifi_connected)) {
    cf62:	4b36      	ldr	r3, [pc, #216]	; (d03c <main+0x154>)
    cf64:	681b      	ldr	r3, [r3, #0]
    cf66:	2b00      	cmp	r3, #0
    cf68:	d0f8      	beq.n	cf5c <main+0x74>
		/* Checks the timer timeout. */
		//sw_timer_task(&swt_module_inst);
	}

	while (!(mqtt_connected)) {
    cf6a:	e002      	b.n	cf72 <main+0x8a>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    cf6c:	2000      	movs	r0, #0
    cf6e:	4b32      	ldr	r3, [pc, #200]	; (d038 <main+0x150>)
    cf70:	4798      	blx	r3
	while (!(mqtt_connected)) {
    cf72:	4b33      	ldr	r3, [pc, #204]	; (d040 <main+0x158>)
    cf74:	681b      	ldr	r3, [r3, #0]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d0f8      	beq.n	cf6c <main+0x84>
		//sw_timer_task(&swt_module_inst);
	}



	configure_adc(MOISTURE_ANA_PIN);        //configure moisture sensor analog
    cf7a:	2000      	movs	r0, #0
    cf7c:	4b31      	ldr	r3, [pc, #196]	; (d044 <main+0x15c>)
    cf7e:	4798      	blx	r3
	configure_i2c_hdc();                    //config i2c
    cf80:	4b31      	ldr	r3, [pc, #196]	; (d048 <main+0x160>)
    cf82:	4798      	blx	r3
	configure_i2c_tsl2561(ADDR_FLOAT);
    cf84:	2039      	movs	r0, #57	; 0x39
    cf86:	4b31      	ldr	r3, [pc, #196]	; (d04c <main+0x164>)
    cf88:	4798      	blx	r3
	uint16_t dev_id = get_hdc_device_id();
    cf8a:	2316      	movs	r3, #22
    cf8c:	18fc      	adds	r4, r7, r3
    cf8e:	4b30      	ldr	r3, [pc, #192]	; (d050 <main+0x168>)
    cf90:	4798      	blx	r3
    cf92:	0003      	movs	r3, r0
    cf94:	8023      	strh	r3, [r4, #0]
	printf("dev id: 0x%02x\r\n", dev_id);
    cf96:	2316      	movs	r3, #22
    cf98:	18fb      	adds	r3, r7, r3
    cf9a:	881a      	ldrh	r2, [r3, #0]
    cf9c:	4b2d      	ldr	r3, [pc, #180]	; (d054 <main+0x16c>)
    cf9e:	0011      	movs	r1, r2
    cfa0:	0018      	movs	r0, r3
    cfa2:	4b2d      	ldr	r3, [pc, #180]	; (d058 <main+0x170>)
    cfa4:	4798      	blx	r3

	configure_port_pins_get(PIN_PA11); //TODO: decide if this is necessary
    cfa6:	200b      	movs	r0, #11
    cfa8:	4b2c      	ldr	r3, [pc, #176]	; (d05c <main+0x174>)
    cfaa:	4798      	blx	r3

	printf("Running as MQTT User: %s\r\n", MQTT_USER);
    cfac:	4a2c      	ldr	r2, [pc, #176]	; (d060 <main+0x178>)
    cfae:	4b2d      	ldr	r3, [pc, #180]	; (d064 <main+0x17c>)
    cfb0:	0011      	movs	r1, r2
    cfb2:	0018      	movs	r0, r3
    cfb4:	4b28      	ldr	r3, [pc, #160]	; (d058 <main+0x170>)
    cfb6:	4798      	blx	r3
	register_request_topic(LED_TOPIC, '#', &request_led_change);
    cfb8:	4a2b      	ldr	r2, [pc, #172]	; (d068 <main+0x180>)
    cfba:	4b2c      	ldr	r3, [pc, #176]	; (d06c <main+0x184>)
    cfbc:	2123      	movs	r1, #35	; 0x23
    cfbe:	0018      	movs	r0, r3
    cfc0:	4b2b      	ldr	r3, [pc, #172]	; (d070 <main+0x188>)
    cfc2:	4798      	blx	r3

	led1_on(); //show that board is connected
    cfc4:	4b2b      	ldr	r3, [pc, #172]	; (d074 <main+0x18c>)
    cfc6:	4798      	blx	r3

	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    cfc8:	2000      	movs	r0, #0
    cfca:	4b1b      	ldr	r3, [pc, #108]	; (d038 <main+0x150>)
    cfcc:	4798      	blx	r3
		/* Checks the timer timeout. */
		//sw_timer_task(&swt_module_inst);

		if ((mqttfirmware_download == 1 || port_pin_get_input_level(PIN_PA11) == false)) {
    cfce:	4b0e      	ldr	r3, [pc, #56]	; (d008 <main+0x120>)
    cfd0:	781b      	ldrb	r3, [r3, #0]
    cfd2:	2b01      	cmp	r3, #1
    cfd4:	d013      	beq.n	cffe <main+0x116>
    cfd6:	200b      	movs	r0, #11
    cfd8:	4b27      	ldr	r3, [pc, #156]	; (d078 <main+0x190>)
    cfda:	4798      	blx	r3
    cfdc:	0003      	movs	r3, r0
    cfde:	001a      	movs	r2, r3
    cfe0:	2301      	movs	r3, #1
    cfe2:	4053      	eors	r3, r2
    cfe4:	b2db      	uxtb	r3, r3
    cfe6:	2b00      	cmp	r3, #0
    cfe8:	d109      	bne.n	cffe <main+0x116>
		} else if ((MQTTCounter >= COUNTER_MAX)) {
    cfea:	69fb      	ldr	r3, [r7, #28]
    cfec:	4a23      	ldr	r2, [pc, #140]	; (d07c <main+0x194>)
    cfee:	4293      	cmp	r3, r2
    cff0:	d905      	bls.n	cffe <main+0x116>
			MQTTCounter = 0; //reset sensor counter
    cff2:	2300      	movs	r3, #0
    cff4:	61fb      	str	r3, [r7, #28]
			printf("Sending sensor values to Cloud.\r\n");
    cff6:	4b22      	ldr	r3, [pc, #136]	; (d080 <main+0x198>)
    cff8:	0018      	movs	r0, r3
    cffa:	4b0b      	ldr	r3, [pc, #44]	; (d028 <main+0x140>)
    cffc:	4798      	blx	r3
			//publish_sensor_values();
		}

		++MQTTCounter;
    cffe:	69fb      	ldr	r3, [r7, #28]
    d000:	3301      	adds	r3, #1
    d002:	61fb      	str	r3, [r7, #28]
		m2m_wifi_handle_events(NULL);
    d004:	e7e0      	b.n	cfc8 <main+0xe0>
    d006:	46c0      	nop			; (mov r8, r8)
    d008:	200007d4 	.word	0x200007d4
    d00c:	0000c999 	.word	0x0000c999
    d010:	0000cea1 	.word	0x0000cea1
    d014:	00008bb1 	.word	0x00008bb1
    d018:	000003a1 	.word	0x000003a1
    d01c:	00008b3d 	.word	0x00008b3d
    d020:	00008925 	.word	0x00008925
    d024:	00014084 	.word	0x00014084
    d028:	0000e901 	.word	0x0000e901
    d02c:	000140a8 	.word	0x000140a8
    d030:	0000eac9 	.word	0x0000eac9
    d034:	00002775 	.word	0x00002775
    d038:	00002759 	.word	0x00002759
    d03c:	20000224 	.word	0x20000224
    d040:	20000228 	.word	0x20000228
    d044:	0000ccd9 	.word	0x0000ccd9
    d048:	00000581 	.word	0x00000581
    d04c:	0000088d 	.word	0x0000088d
    d050:	00000709 	.word	0x00000709
    d054:	000140bc 	.word	0x000140bc
    d058:	0000e7e5 	.word	0x0000e7e5
    d05c:	0000cd75 	.word	0x0000cd75
    d060:	000140d0 	.word	0x000140d0
    d064:	000140dc 	.word	0x000140dc
    d068:	0000cebd 	.word	0x0000cebd
    d06c:	000140f8 	.word	0x000140f8
    d070:	00008a15 	.word	0x00008a15
    d074:	0000cdb9 	.word	0x0000cdb9
    d078:	0000ce5d 	.word	0x0000ce5d
    d07c:	002dc6bf 	.word	0x002dc6bf
    d080:	0001410c 	.word	0x0001410c

0000d084 <_hwerr_to_stderr>:
    d084:	1c03      	adds	r3, r0, #0
    d086:	300e      	adds	r0, #14
    d088:	b500      	push	{lr}
    d08a:	280e      	cmp	r0, #14
    d08c:	d819      	bhi.n	d0c2 <_hwerr_to_stderr+0x3e>
    d08e:	f003 fbb3 	bl	107f8 <__gnu_thumb1_case_uqi>
    d092:	1416      	.short	0x1416
    d094:	1b181012 	.word	0x1b181012
    d098:	180c0e18 	.word	0x180c0e18
    d09c:	1d0a0e0e 	.word	0x1d0a0e0e
    d0a0:	08          	.byte	0x08
    d0a1:	00          	.byte	0x00
    d0a2:	2000      	movs	r0, #0
    d0a4:	e014      	b.n	d0d0 <_hwerr_to_stderr+0x4c>
    d0a6:	2070      	movs	r0, #112	; 0x70
    d0a8:	e011      	b.n	d0ce <_hwerr_to_stderr+0x4a>
    d0aa:	2016      	movs	r0, #22
    d0ac:	e00f      	b.n	d0ce <_hwerr_to_stderr+0x4a>
    d0ae:	200c      	movs	r0, #12
    d0b0:	e00d      	b.n	d0ce <_hwerr_to_stderr+0x4a>
    d0b2:	2079      	movs	r0, #121	; 0x79
    d0b4:	e00b      	b.n	d0ce <_hwerr_to_stderr+0x4a>
    d0b6:	2068      	movs	r0, #104	; 0x68
    d0b8:	e009      	b.n	d0ce <_hwerr_to_stderr+0x4a>
    d0ba:	200b      	movs	r0, #11
    d0bc:	e007      	b.n	d0ce <_hwerr_to_stderr+0x4a>
    d0be:	2010      	movs	r0, #16
    d0c0:	e005      	b.n	d0ce <_hwerr_to_stderr+0x4a>
    d0c2:	2000      	movs	r0, #0
    d0c4:	4283      	cmp	r3, r0
    d0c6:	da03      	bge.n	d0d0 <_hwerr_to_stderr+0x4c>
    d0c8:	2005      	movs	r0, #5
    d0ca:	e000      	b.n	d0ce <_hwerr_to_stderr+0x4a>
    d0cc:	2002      	movs	r0, #2
    d0ce:	4240      	negs	r0, r0
    d0d0:	bd00      	pop	{pc}
	...

0000d0d4 <_mqtt_send_wait>:
    d0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0d6:	1c04      	adds	r4, r0, #0
    d0d8:	3443      	adds	r4, #67	; 0x43
    d0da:	7823      	ldrb	r3, [r4, #0]
    d0dc:	1c05      	adds	r5, r0, #0
    d0de:	07d8      	lsls	r0, r3, #31
    d0e0:	d51c      	bpl.n	d11c <_mqtt_send_wait+0x48>
    d0e2:	2604      	movs	r6, #4
    d0e4:	4333      	orrs	r3, r6
    d0e6:	7023      	strb	r3, [r4, #0]
    d0e8:	2002      	movs	r0, #2
    d0ea:	5628      	ldrsb	r0, [r5, r0]
    d0ec:	b292      	uxth	r2, r2
    d0ee:	2300      	movs	r3, #0
    d0f0:	4f0c      	ldr	r7, [pc, #48]	; (d124 <_mqtt_send_wait+0x50>)
    d0f2:	47b8      	blx	r7
    d0f4:	2800      	cmp	r0, #0
    d0f6:	da05      	bge.n	d104 <_mqtt_send_wait+0x30>
    d0f8:	7823      	ldrb	r3, [r4, #0]
    d0fa:	43b3      	bics	r3, r6
    d0fc:	7023      	strb	r3, [r4, #0]
    d0fe:	4b0a      	ldr	r3, [pc, #40]	; (d128 <_mqtt_send_wait+0x54>)
    d100:	4798      	blx	r3
    d102:	e00d      	b.n	d120 <_mqtt_send_wait+0x4c>
    d104:	7822      	ldrb	r2, [r4, #0]
    d106:	2314      	movs	r3, #20
    d108:	4013      	ands	r3, r2
    d10a:	2000      	movs	r0, #0
    d10c:	2b04      	cmp	r3, #4
    d10e:	d107      	bne.n	d120 <_mqtt_send_wait+0x4c>
    d110:	4b06      	ldr	r3, [pc, #24]	; (d12c <_mqtt_send_wait+0x58>)
    d112:	4798      	blx	r3
    d114:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    d116:	4b06      	ldr	r3, [pc, #24]	; (d130 <_mqtt_send_wait+0x5c>)
    d118:	4798      	blx	r3
    d11a:	e7f3      	b.n	d104 <_mqtt_send_wait+0x30>
    d11c:	2001      	movs	r0, #1
    d11e:	4240      	negs	r0, r0
    d120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d122:	46c0      	nop			; (mov r8, r8)
    d124:	00005b0d 	.word	0x00005b0d
    d128:	0000d085 	.word	0x0000d085
    d12c:	00002759 	.word	0x00002759
    d130:	00008415 	.word	0x00008415

0000d134 <mqtt_get_config_defaults>:
    d134:	4b07      	ldr	r3, [pc, #28]	; (d154 <mqtt_get_config_defaults+0x20>)
    d136:	2240      	movs	r2, #64	; 0x40
    d138:	8003      	strh	r3, [r0, #0]
    d13a:	2396      	movs	r3, #150	; 0x96
    d13c:	009b      	lsls	r3, r3, #2
    d13e:	8103      	strh	r3, [r0, #8]
    d140:	6102      	str	r2, [r0, #16]
    d142:	2300      	movs	r3, #0
    d144:	2220      	movs	r2, #32
    d146:	7083      	strb	r3, [r0, #2]
    d148:	6043      	str	r3, [r0, #4]
    d14a:	60c3      	str	r3, [r0, #12]
    d14c:	6142      	str	r2, [r0, #20]
    d14e:	7603      	strb	r3, [r0, #24]
    d150:	4770      	bx	lr
    d152:	46c0      	nop			; (mov r8, r8)
    d154:	0000075b 	.word	0x0000075b

0000d158 <mqtt_init>:
    d158:	b538      	push	{r3, r4, r5, lr}
    d15a:	1c04      	adds	r4, r0, #0
    d15c:	1c0d      	adds	r5, r1, #0
    d15e:	2800      	cmp	r0, #0
    d160:	d030      	beq.n	d1c4 <mqtt_init+0x6c>
    d162:	2900      	cmp	r1, #0
    d164:	d02e      	beq.n	d1c4 <mqtt_init+0x6c>
    d166:	690b      	ldr	r3, [r1, #16]
    d168:	2b00      	cmp	r3, #0
    d16a:	d02b      	beq.n	d1c4 <mqtt_init+0x6c>
    d16c:	684b      	ldr	r3, [r1, #4]
    d16e:	2b00      	cmp	r3, #0
    d170:	d028      	beq.n	d1c4 <mqtt_init+0x6c>
    d172:	2100      	movs	r1, #0
    d174:	2274      	movs	r2, #116	; 0x74
    d176:	4b16      	ldr	r3, [pc, #88]	; (d1d0 <mqtt_init+0x78>)
    d178:	4798      	blx	r3
    d17a:	1c20      	adds	r0, r4, #0
    d17c:	4b15      	ldr	r3, [pc, #84]	; (d1d4 <mqtt_init+0x7c>)
    d17e:	3058      	adds	r0, #88	; 0x58
    d180:	1c29      	adds	r1, r5, #0
    d182:	221c      	movs	r2, #28
    d184:	4798      	blx	r3
    d186:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d188:	2b00      	cmp	r3, #0
    d18a:	d10b      	bne.n	d1a4 <mqtt_init+0x4c>
    d18c:	6928      	ldr	r0, [r5, #16]
    d18e:	4b12      	ldr	r3, [pc, #72]	; (d1d8 <mqtt_init+0x80>)
    d190:	4798      	blx	r3
    d192:	6660      	str	r0, [r4, #100]	; 0x64
    d194:	2800      	cmp	r0, #0
    d196:	d017      	beq.n	d1c8 <mqtt_init+0x70>
    d198:	1c23      	adds	r3, r4, #0
    d19a:	3343      	adds	r3, #67	; 0x43
    d19c:	781a      	ldrb	r2, [r3, #0]
    d19e:	2120      	movs	r1, #32
    d1a0:	430a      	orrs	r2, r1
    d1a2:	701a      	strb	r2, [r3, #0]
    d1a4:	892a      	ldrh	r2, [r5, #8]
    d1a6:	23fa      	movs	r3, #250	; 0xfa
    d1a8:	005b      	lsls	r3, r3, #1
    d1aa:	4353      	muls	r3, r2
    d1ac:	6868      	ldr	r0, [r5, #4]
    d1ae:	490b      	ldr	r1, [pc, #44]	; (d1dc <mqtt_init+0x84>)
    d1b0:	1c22      	adds	r2, r4, #0
    d1b2:	4d0b      	ldr	r5, [pc, #44]	; (d1e0 <mqtt_init+0x88>)
    d1b4:	47a8      	blx	r5
    d1b6:	1c03      	adds	r3, r0, #0
    d1b8:	6520      	str	r0, [r4, #80]	; 0x50
    d1ba:	2000      	movs	r0, #0
    d1bc:	4283      	cmp	r3, r0
    d1be:	da05      	bge.n	d1cc <mqtt_init+0x74>
    d1c0:	201c      	movs	r0, #28
    d1c2:	e002      	b.n	d1ca <mqtt_init+0x72>
    d1c4:	2016      	movs	r0, #22
    d1c6:	e000      	b.n	d1ca <mqtt_init+0x72>
    d1c8:	200c      	movs	r0, #12
    d1ca:	4240      	negs	r0, r0
    d1cc:	bd38      	pop	{r3, r4, r5, pc}
    d1ce:	46c0      	nop			; (mov r8, r8)
    d1d0:	0000dda3 	.word	0x0000dda3
    d1d4:	0000dd6d 	.word	0x0000dd6d
    d1d8:	0000dd35 	.word	0x0000dd35
    d1dc:	0000d7b9 	.word	0x0000d7b9
    d1e0:	00008309 	.word	0x00008309

0000d1e4 <mqtt_register_callback>:
    d1e4:	2800      	cmp	r0, #0
    d1e6:	d002      	beq.n	d1ee <mqtt_register_callback+0xa>
    d1e8:	6541      	str	r1, [r0, #84]	; 0x54
    d1ea:	2000      	movs	r0, #0
    d1ec:	e001      	b.n	d1f2 <mqtt_register_callback+0xe>
    d1ee:	2016      	movs	r0, #22
    d1f0:	4240      	negs	r0, r0
    d1f2:	4770      	bx	lr

0000d1f4 <mqtt_socket_resolve_handler>:
    d1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1f6:	1c06      	adds	r6, r0, #0
    d1f8:	b085      	sub	sp, #20
    d1fa:	1c0f      	adds	r7, r1, #0
    d1fc:	2400      	movs	r4, #0
    d1fe:	4b0f      	ldr	r3, [pc, #60]	; (d23c <mqtt_socket_resolve_handler+0x48>)
    d200:	58e5      	ldr	r5, [r4, r3]
    d202:	2d00      	cmp	r5, #0
    d204:	d015      	beq.n	d232 <mqtt_socket_resolve_handler+0x3e>
    d206:	1ce9      	adds	r1, r5, #3
    d208:	1c30      	adds	r0, r6, #0
    d20a:	4b0d      	ldr	r3, [pc, #52]	; (d240 <mqtt_socket_resolve_handler+0x4c>)
    d20c:	4798      	blx	r3
    d20e:	2800      	cmp	r0, #0
    d210:	d10f      	bne.n	d232 <mqtt_socket_resolve_handler+0x3e>
    d212:	466a      	mov	r2, sp
    d214:	2302      	movs	r3, #2
    d216:	8013      	strh	r3, [r2, #0]
    d218:	1c2b      	adds	r3, r5, #0
    d21a:	3358      	adds	r3, #88	; 0x58
    d21c:	881b      	ldrh	r3, [r3, #0]
    d21e:	9701      	str	r7, [sp, #4]
    d220:	ba5b      	rev16	r3, r3
    d222:	8053      	strh	r3, [r2, #2]
    d224:	2002      	movs	r0, #2
    d226:	5628      	ldrsb	r0, [r5, r0]
    d228:	4669      	mov	r1, sp
    d22a:	2210      	movs	r2, #16
    d22c:	4b05      	ldr	r3, [pc, #20]	; (d244 <mqtt_socket_resolve_handler+0x50>)
    d22e:	4798      	blx	r3
    d230:	e002      	b.n	d238 <mqtt_socket_resolve_handler+0x44>
    d232:	3404      	adds	r4, #4
    d234:	2c1c      	cmp	r4, #28
    d236:	d1e2      	bne.n	d1fe <mqtt_socket_resolve_handler+0xa>
    d238:	b005      	add	sp, #20
    d23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d23c:	2000026c 	.word	0x2000026c
    d240:	0000eaa5 	.word	0x0000eaa5
    d244:	000059f9 	.word	0x000059f9

0000d248 <mqtt_connect>:
    d248:	b5f0      	push	{r4, r5, r6, r7, lr}
    d24a:	1c04      	adds	r4, r0, #0
    d24c:	b089      	sub	sp, #36	; 0x24
    d24e:	1c0d      	adds	r5, r1, #0
    d250:	2800      	cmp	r0, #0
    d252:	d051      	beq.n	d2f8 <mqtt_connect+0xb0>
    d254:	2900      	cmp	r1, #0
    d256:	d04f      	beq.n	d2f8 <mqtt_connect+0xb0>
    d258:	1c08      	adds	r0, r1, #0
    d25a:	4b39      	ldr	r3, [pc, #228]	; (d340 <mqtt_connect+0xf8>)
    d25c:	4798      	blx	r3
    d25e:	2840      	cmp	r0, #64	; 0x40
    d260:	d84c      	bhi.n	d2fc <mqtt_connect+0xb4>
    d262:	1c21      	adds	r1, r4, #0
    d264:	3143      	adds	r1, #67	; 0x43
    d266:	780b      	ldrb	r3, [r1, #0]
    d268:	9101      	str	r1, [sp, #4]
    d26a:	07db      	lsls	r3, r3, #31
    d26c:	0fd9      	lsrs	r1, r3, #31
    d26e:	466a      	mov	r2, sp
    d270:	b2ce      	uxtb	r6, r1
    d272:	1ce0      	adds	r0, r4, #3
    d274:	7211      	strb	r1, [r2, #8]
    d276:	2e00      	cmp	r6, #0
    d278:	d142      	bne.n	d300 <mqtt_connect+0xb8>
    d27a:	2701      	movs	r7, #1
    d27c:	1c29      	adds	r1, r5, #0
    d27e:	4b31      	ldr	r3, [pc, #196]	; (d344 <mqtt_connect+0xfc>)
    d280:	8027      	strh	r7, [r4, #0]
    d282:	4798      	blx	r3
    d284:	9a01      	ldr	r2, [sp, #4]
    d286:	2002      	movs	r0, #2
    d288:	7813      	ldrb	r3, [r2, #0]
    d28a:	9901      	ldr	r1, [sp, #4]
    d28c:	43bb      	bics	r3, r7
    d28e:	4383      	bics	r3, r0
    d290:	22e3      	movs	r2, #227	; 0xe3
    d292:	4013      	ands	r3, r2
    d294:	466a      	mov	r2, sp
    d296:	700b      	strb	r3, [r1, #0]
    d298:	7a12      	ldrb	r2, [r2, #8]
    d29a:	1c23      	adds	r3, r4, #0
    d29c:	3348      	adds	r3, #72	; 0x48
    d29e:	6466      	str	r6, [r4, #68]	; 0x44
    d2a0:	701a      	strb	r2, [r3, #0]
    d2a2:	7c9a      	ldrb	r2, [r3, #18]
    d2a4:	805e      	strh	r6, [r3, #2]
    d2a6:	1e53      	subs	r3, r2, #1
    d2a8:	419a      	sbcs	r2, r3
    d2aa:	b2d2      	uxtb	r2, r2
    d2ac:	1c39      	adds	r1, r7, #0
    d2ae:	4b26      	ldr	r3, [pc, #152]	; (d348 <mqtt_connect+0x100>)
    d2b0:	4798      	blx	r3
    d2b2:	70a0      	strb	r0, [r4, #2]
    d2b4:	2800      	cmp	r0, #0
    d2b6:	db25      	blt.n	d304 <mqtt_connect+0xbc>
    d2b8:	4b24      	ldr	r3, [pc, #144]	; (d34c <mqtt_connect+0x104>)
    d2ba:	0080      	lsls	r0, r0, #2
    d2bc:	50c4      	str	r4, [r0, r3]
    d2be:	1c2b      	adds	r3, r5, #0
    d2c0:	781f      	ldrb	r7, [r3, #0]
    d2c2:	2f00      	cmp	r7, #0
    d2c4:	d026      	beq.n	d314 <mqtt_connect+0xcc>
    d2c6:	2220      	movs	r2, #32
    d2c8:	1c39      	adds	r1, r7, #0
    d2ca:	4391      	bics	r1, r2
    d2cc:	1c0a      	adds	r2, r1, #0
    d2ce:	3a41      	subs	r2, #65	; 0x41
    d2d0:	b2d2      	uxtb	r2, r2
    d2d2:	3301      	adds	r3, #1
    d2d4:	2a05      	cmp	r2, #5
    d2d6:	d90d      	bls.n	d2f4 <mqtt_connect+0xac>
    d2d8:	2f3a      	cmp	r7, #58	; 0x3a
    d2da:	d00b      	beq.n	d2f4 <mqtt_connect+0xac>
    d2dc:	2f2f      	cmp	r7, #47	; 0x2f
    d2de:	d009      	beq.n	d2f4 <mqtt_connect+0xac>
    d2e0:	2f2e      	cmp	r7, #46	; 0x2e
    d2e2:	d102      	bne.n	d2ea <mqtt_connect+0xa2>
    d2e4:	2e00      	cmp	r6, #0
    d2e6:	d0eb      	beq.n	d2c0 <mqtt_connect+0x78>
    d2e8:	e00f      	b.n	d30a <mqtt_connect+0xc2>
    d2ea:	2230      	movs	r2, #48	; 0x30
    d2ec:	4017      	ands	r7, r2
    d2ee:	4297      	cmp	r7, r2
    d2f0:	d0e6      	beq.n	d2c0 <mqtt_connect+0x78>
    d2f2:	e00a      	b.n	d30a <mqtt_connect+0xc2>
    d2f4:	2601      	movs	r6, #1
    d2f6:	e7e3      	b.n	d2c0 <mqtt_connect+0x78>
    d2f8:	2016      	movs	r0, #22
    d2fa:	e004      	b.n	d306 <mqtt_connect+0xbe>
    d2fc:	205b      	movs	r0, #91	; 0x5b
    d2fe:	e002      	b.n	d306 <mqtt_connect+0xbe>
    d300:	2078      	movs	r0, #120	; 0x78
    d302:	e000      	b.n	d306 <mqtt_connect+0xbe>
    d304:	201c      	movs	r0, #28
    d306:	4240      	negs	r0, r0
    d308:	e017      	b.n	d33a <mqtt_connect+0xf2>
    d30a:	1c28      	adds	r0, r5, #0
    d30c:	4b10      	ldr	r3, [pc, #64]	; (d350 <mqtt_connect+0x108>)
    d30e:	4798      	blx	r3
    d310:	2000      	movs	r0, #0
    d312:	e012      	b.n	d33a <mqtt_connect+0xf2>
    d314:	466a      	mov	r2, sp
    d316:	2302      	movs	r3, #2
    d318:	8213      	strh	r3, [r2, #16]
    d31a:	1c23      	adds	r3, r4, #0
    d31c:	3358      	adds	r3, #88	; 0x58
    d31e:	881b      	ldrh	r3, [r3, #0]
    d320:	1c28      	adds	r0, r5, #0
    d322:	ba5b      	rev16	r3, r3
    d324:	8253      	strh	r3, [r2, #18]
    d326:	4b0b      	ldr	r3, [pc, #44]	; (d354 <mqtt_connect+0x10c>)
    d328:	4798      	blx	r3
    d32a:	9005      	str	r0, [sp, #20]
    d32c:	2002      	movs	r0, #2
    d32e:	5620      	ldrsb	r0, [r4, r0]
    d330:	a904      	add	r1, sp, #16
    d332:	2210      	movs	r2, #16
    d334:	4b08      	ldr	r3, [pc, #32]	; (d358 <mqtt_connect+0x110>)
    d336:	4798      	blx	r3
    d338:	1c38      	adds	r0, r7, #0
    d33a:	b009      	add	sp, #36	; 0x24
    d33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d33e:	46c0      	nop			; (mov r8, r8)
    d340:	0000eac9 	.word	0x0000eac9
    d344:	0000eab9 	.word	0x0000eab9
    d348:	000057e9 	.word	0x000057e9
    d34c:	2000026c 	.word	0x2000026c
    d350:	00006035 	.word	0x00006035
    d354:	00005f2d 	.word	0x00005f2d
    d358:	000059f9 	.word	0x000059f9

0000d35c <mqtt_connect_broker>:
    d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d35e:	b095      	sub	sp, #84	; 0x54
    d360:	af02      	add	r7, sp, #8
    d362:	617b      	str	r3, [r7, #20]
    d364:	1c3b      	adds	r3, r7, #0
    d366:	3370      	adds	r3, #112	; 0x70
    d368:	781b      	ldrb	r3, [r3, #0]
    d36a:	1c05      	adds	r5, r0, #0
    d36c:	60fb      	str	r3, [r7, #12]
    d36e:	1c3b      	adds	r3, r7, #0
    d370:	3374      	adds	r3, #116	; 0x74
    d372:	781b      	ldrb	r3, [r3, #0]
    d374:	6139      	str	r1, [r7, #16]
    d376:	61fa      	str	r2, [r7, #28]
    d378:	60bb      	str	r3, [r7, #8]
    d37a:	2800      	cmp	r0, #0
    d37c:	d101      	bne.n	d382 <mqtt_connect_broker+0x26>
    d37e:	2016      	movs	r0, #22
    d380:	e129      	b.n	d5d6 <mqtt_connect_broker+0x27a>
    d382:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    d384:	4668      	mov	r0, sp
    d386:	3307      	adds	r3, #7
    d388:	08db      	lsrs	r3, r3, #3
    d38a:	00db      	lsls	r3, r3, #3
    d38c:	1ac0      	subs	r0, r0, r3
    d38e:	4685      	mov	sp, r0
    d390:	ac02      	add	r4, sp, #8
    d392:	607c      	str	r4, [r7, #4]
    d394:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    d396:	2c00      	cmp	r4, #0
    d398:	d0f1      	beq.n	d37e <mqtt_connect_broker+0x22>
    d39a:	1c2b      	adds	r3, r5, #0
    d39c:	3343      	adds	r3, #67	; 0x43
    d39e:	781b      	ldrb	r3, [r3, #0]
    d3a0:	07d8      	lsls	r0, r3, #31
    d3a2:	d400      	bmi.n	d3a6 <mqtt_connect_broker+0x4a>
    d3a4:	e112      	b.n	d5cc <mqtt_connect_broker+0x270>
    d3a6:	079a      	lsls	r2, r3, #30
    d3a8:	d500      	bpl.n	d3ac <mqtt_connect_broker+0x50>
    d3aa:	e111      	b.n	d5d0 <mqtt_connect_broker+0x274>
    d3ac:	071c      	lsls	r4, r3, #28
    d3ae:	d40b      	bmi.n	d3c8 <mqtt_connect_broker+0x6c>
    d3b0:	4e8b      	ldr	r6, [pc, #556]	; (d5e0 <mqtt_connect_broker+0x284>)
    d3b2:	6e38      	ldr	r0, [r7, #96]	; 0x60
    d3b4:	47b0      	blx	r6
    d3b6:	1c03      	adds	r3, r0, #0
    d3b8:	61b8      	str	r0, [r7, #24]
    d3ba:	69f8      	ldr	r0, [r7, #28]
    d3bc:	330e      	adds	r3, #14
    d3be:	1c34      	adds	r4, r6, #0
    d3c0:	2800      	cmp	r0, #0
    d3c2:	d113      	bne.n	d3ec <mqtt_connect_broker+0x90>
    d3c4:	1c1e      	adds	r6, r3, #0
    d3c6:	e01d      	b.n	d404 <mqtt_connect_broker+0xa8>
    d3c8:	1c2b      	adds	r3, r5, #0
    d3ca:	3370      	adds	r3, #112	; 0x70
    d3cc:	781b      	ldrb	r3, [r3, #0]
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d000      	beq.n	d3d4 <mqtt_connect_broker+0x78>
    d3d2:	e0ff      	b.n	d5d4 <mqtt_connect_broker+0x278>
    d3d4:	1c2b      	adds	r3, r5, #0
    d3d6:	3343      	adds	r3, #67	; 0x43
    d3d8:	781b      	ldrb	r3, [r3, #0]
    d3da:	071a      	lsls	r2, r3, #28
    d3dc:	d5e8      	bpl.n	d3b0 <mqtt_connect_broker+0x54>
    d3de:	4b81      	ldr	r3, [pc, #516]	; (d5e4 <mqtt_connect_broker+0x288>)
    d3e0:	2000      	movs	r0, #0
    d3e2:	4798      	blx	r3
    d3e4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    d3e6:	4b80      	ldr	r3, [pc, #512]	; (d5e8 <mqtt_connect_broker+0x28c>)
    d3e8:	4798      	blx	r3
    d3ea:	e7f3      	b.n	d3d4 <mqtt_connect_broker+0x78>
    d3ec:	69f8      	ldr	r0, [r7, #28]
    d3ee:	47b0      	blx	r6
    d3f0:	69be      	ldr	r6, [r7, #24]
    d3f2:	697b      	ldr	r3, [r7, #20]
    d3f4:	3610      	adds	r6, #16
    d3f6:	1836      	adds	r6, r6, r0
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d003      	beq.n	d404 <mqtt_connect_broker+0xa8>
    d3fc:	1c18      	adds	r0, r3, #0
    d3fe:	47a0      	blx	r4
    d400:	3602      	adds	r6, #2
    d402:	1836      	adds	r6, r6, r0
    d404:	6e78      	ldr	r0, [r7, #100]	; 0x64
    d406:	2800      	cmp	r0, #0
    d408:	d007      	beq.n	d41a <mqtt_connect_broker+0xbe>
    d40a:	47a0      	blx	r4
    d40c:	3602      	adds	r6, #2
    d40e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    d410:	1830      	adds	r0, r6, r0
    d412:	1906      	adds	r6, r0, r4
    d414:	2c00      	cmp	r4, #0
    d416:	d100      	bne.n	d41a <mqtt_connect_broker+0xbe>
    d418:	1c06      	adds	r6, r0, #0
    d41a:	69fc      	ldr	r4, [r7, #28]
    d41c:	2c00      	cmp	r4, #0
    d41e:	d006      	beq.n	d42e <mqtt_connect_broker+0xd2>
    d420:	24c0      	movs	r4, #192	; 0xc0
    d422:	61bc      	str	r4, [r7, #24]
    d424:	697c      	ldr	r4, [r7, #20]
    d426:	2c00      	cmp	r4, #0
    d428:	d103      	bne.n	d432 <mqtt_connect_broker+0xd6>
    d42a:	2480      	movs	r4, #128	; 0x80
    d42c:	e000      	b.n	d430 <mqtt_connect_broker+0xd4>
    d42e:	69fc      	ldr	r4, [r7, #28]
    d430:	61bc      	str	r4, [r7, #24]
    d432:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    d434:	2c00      	cmp	r4, #0
    d436:	d00f      	beq.n	d458 <mqtt_connect_broker+0xfc>
    d438:	68bc      	ldr	r4, [r7, #8]
    d43a:	2c00      	cmp	r4, #0
    d43c:	d003      	beq.n	d446 <mqtt_connect_broker+0xea>
    d43e:	69bc      	ldr	r4, [r7, #24]
    d440:	2320      	movs	r3, #32
    d442:	431c      	orrs	r4, r3
    d444:	61bc      	str	r4, [r7, #24]
    d446:	68fc      	ldr	r4, [r7, #12]
    d448:	2303      	movs	r3, #3
    d44a:	4023      	ands	r3, r4
    d44c:	00db      	lsls	r3, r3, #3
    d44e:	69bc      	ldr	r4, [r7, #24]
    d450:	2204      	movs	r2, #4
    d452:	4313      	orrs	r3, r2
    d454:	431c      	orrs	r4, r3
    d456:	61bc      	str	r4, [r7, #24]
    d458:	693c      	ldr	r4, [r7, #16]
    d45a:	2c00      	cmp	r4, #0
    d45c:	d003      	beq.n	d466 <mqtt_connect_broker+0x10a>
    d45e:	69bc      	ldr	r4, [r7, #24]
    d460:	2302      	movs	r3, #2
    d462:	431c      	orrs	r4, r3
    d464:	61bc      	str	r4, [r7, #24]
    d466:	1c2b      	adds	r3, r5, #0
    d468:	3343      	adds	r3, #67	; 0x43
    d46a:	781a      	ldrb	r2, [r3, #0]
    d46c:	2108      	movs	r1, #8
    d46e:	430a      	orrs	r2, r1
    d470:	701a      	strb	r2, [r3, #0]
    d472:	1c38      	adds	r0, r7, #0
    d474:	9500      	str	r5, [sp, #0]
    d476:	3020      	adds	r0, #32
    d478:	6879      	ldr	r1, [r7, #4]
    d47a:	4b5c      	ldr	r3, [pc, #368]	; (d5ec <mqtt_connect_broker+0x290>)
    d47c:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    d47e:	4c5c      	ldr	r4, [pc, #368]	; (d5f0 <mqtt_connect_broker+0x294>)
    d480:	47a0      	blx	r4
    d482:	1c38      	adds	r0, r7, #0
    d484:	3020      	adds	r0, #32
    d486:	2110      	movs	r1, #16
    d488:	4b5a      	ldr	r3, [pc, #360]	; (d5f4 <mqtt_connect_broker+0x298>)
    d48a:	4798      	blx	r3
    d48c:	2e80      	cmp	r6, #128	; 0x80
    d48e:	dd09      	ble.n	d4a4 <mqtt_connect_broker+0x148>
    d490:	2180      	movs	r1, #128	; 0x80
    d492:	4249      	negs	r1, r1
    d494:	4331      	orrs	r1, r6
    d496:	1c38      	adds	r0, r7, #0
    d498:	b249      	sxtb	r1, r1
    d49a:	3020      	adds	r0, #32
    d49c:	4c55      	ldr	r4, [pc, #340]	; (d5f4 <mqtt_connect_broker+0x298>)
    d49e:	47a0      	blx	r4
    d4a0:	11f6      	asrs	r6, r6, #7
    d4a2:	e7f3      	b.n	d48c <mqtt_connect_broker+0x130>
    d4a4:	4b54      	ldr	r3, [pc, #336]	; (d5f8 <mqtt_connect_broker+0x29c>)
    d4a6:	401e      	ands	r6, r3
    d4a8:	d504      	bpl.n	d4b4 <mqtt_connect_broker+0x158>
    d4aa:	2380      	movs	r3, #128	; 0x80
    d4ac:	3e01      	subs	r6, #1
    d4ae:	425b      	negs	r3, r3
    d4b0:	431e      	orrs	r6, r3
    d4b2:	3601      	adds	r6, #1
    d4b4:	1c38      	adds	r0, r7, #0
    d4b6:	b271      	sxtb	r1, r6
    d4b8:	3020      	adds	r0, #32
    d4ba:	4c4e      	ldr	r4, [pc, #312]	; (d5f4 <mqtt_connect_broker+0x298>)
    d4bc:	47a0      	blx	r4
    d4be:	1c38      	adds	r0, r7, #0
    d4c0:	4c4e      	ldr	r4, [pc, #312]	; (d5fc <mqtt_connect_broker+0x2a0>)
    d4c2:	3020      	adds	r0, #32
    d4c4:	2106      	movs	r1, #6
    d4c6:	47a0      	blx	r4
    d4c8:	1c38      	adds	r0, r7, #0
    d4ca:	4b4d      	ldr	r3, [pc, #308]	; (d600 <mqtt_connect_broker+0x2a4>)
    d4cc:	3020      	adds	r0, #32
    d4ce:	494d      	ldr	r1, [pc, #308]	; (d604 <mqtt_connect_broker+0x2a8>)
    d4d0:	2206      	movs	r2, #6
    d4d2:	4798      	blx	r3
    d4d4:	1c38      	adds	r0, r7, #0
    d4d6:	3020      	adds	r0, #32
    d4d8:	2103      	movs	r1, #3
    d4da:	4a46      	ldr	r2, [pc, #280]	; (d5f4 <mqtt_connect_broker+0x298>)
    d4dc:	4790      	blx	r2
    d4de:	69bb      	ldr	r3, [r7, #24]
    d4e0:	1c38      	adds	r0, r7, #0
    d4e2:	4a44      	ldr	r2, [pc, #272]	; (d5f4 <mqtt_connect_broker+0x298>)
    d4e4:	b259      	sxtb	r1, r3
    d4e6:	3020      	adds	r0, #32
    d4e8:	4790      	blx	r2
    d4ea:	1c2b      	adds	r3, r5, #0
    d4ec:	3360      	adds	r3, #96	; 0x60
    d4ee:	2000      	movs	r0, #0
    d4f0:	5e19      	ldrsh	r1, [r3, r0]
    d4f2:	1c38      	adds	r0, r7, #0
    d4f4:	3020      	adds	r0, #32
    d4f6:	47a0      	blx	r4
    d4f8:	4e39      	ldr	r6, [pc, #228]	; (d5e0 <mqtt_connect_broker+0x284>)
    d4fa:	6e38      	ldr	r0, [r7, #96]	; 0x60
    d4fc:	47b0      	blx	r6
    d4fe:	b201      	sxth	r1, r0
    d500:	1c38      	adds	r0, r7, #0
    d502:	3020      	adds	r0, #32
    d504:	47a0      	blx	r4
    d506:	6e38      	ldr	r0, [r7, #96]	; 0x60
    d508:	47b0      	blx	r6
    d50a:	1c02      	adds	r2, r0, #0
    d50c:	1c38      	adds	r0, r7, #0
    d50e:	3020      	adds	r0, #32
    d510:	6e39      	ldr	r1, [r7, #96]	; 0x60
    d512:	4b3b      	ldr	r3, [pc, #236]	; (d600 <mqtt_connect_broker+0x2a4>)
    d514:	4798      	blx	r3
    d516:	6e78      	ldr	r0, [r7, #100]	; 0x64
    d518:	2800      	cmp	r0, #0
    d51a:	d015      	beq.n	d548 <mqtt_connect_broker+0x1ec>
    d51c:	47b0      	blx	r6
    d51e:	b201      	sxth	r1, r0
    d520:	1c38      	adds	r0, r7, #0
    d522:	3020      	adds	r0, #32
    d524:	47a0      	blx	r4
    d526:	6e78      	ldr	r0, [r7, #100]	; 0x64
    d528:	47b0      	blx	r6
    d52a:	1c02      	adds	r2, r0, #0
    d52c:	1c38      	adds	r0, r7, #0
    d52e:	4c34      	ldr	r4, [pc, #208]	; (d600 <mqtt_connect_broker+0x2a4>)
    d530:	3020      	adds	r0, #32
    d532:	6e79      	ldr	r1, [r7, #100]	; 0x64
    d534:	47a0      	blx	r4
    d536:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    d538:	2c00      	cmp	r4, #0
    d53a:	d005      	beq.n	d548 <mqtt_connect_broker+0x1ec>
    d53c:	1c38      	adds	r0, r7, #0
    d53e:	1c21      	adds	r1, r4, #0
    d540:	3020      	adds	r0, #32
    d542:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    d544:	4c2e      	ldr	r4, [pc, #184]	; (d600 <mqtt_connect_broker+0x2a4>)
    d546:	47a0      	blx	r4
    d548:	69fc      	ldr	r4, [r7, #28]
    d54a:	2c00      	cmp	r4, #0
    d54c:	d01f      	beq.n	d58e <mqtt_connect_broker+0x232>
    d54e:	4e24      	ldr	r6, [pc, #144]	; (d5e0 <mqtt_connect_broker+0x284>)
    d550:	1c20      	adds	r0, r4, #0
    d552:	47b0      	blx	r6
    d554:	b201      	sxth	r1, r0
    d556:	1c38      	adds	r0, r7, #0
    d558:	3020      	adds	r0, #32
    d55a:	4c28      	ldr	r4, [pc, #160]	; (d5fc <mqtt_connect_broker+0x2a0>)
    d55c:	47a0      	blx	r4
    d55e:	69f8      	ldr	r0, [r7, #28]
    d560:	47b0      	blx	r6
    d562:	1c02      	adds	r2, r0, #0
    d564:	1c38      	adds	r0, r7, #0
    d566:	3020      	adds	r0, #32
    d568:	69f9      	ldr	r1, [r7, #28]
    d56a:	4c25      	ldr	r4, [pc, #148]	; (d600 <mqtt_connect_broker+0x2a4>)
    d56c:	47a0      	blx	r4
    d56e:	6978      	ldr	r0, [r7, #20]
    d570:	2800      	cmp	r0, #0
    d572:	d00c      	beq.n	d58e <mqtt_connect_broker+0x232>
    d574:	47b0      	blx	r6
    d576:	b201      	sxth	r1, r0
    d578:	1c38      	adds	r0, r7, #0
    d57a:	4a20      	ldr	r2, [pc, #128]	; (d5fc <mqtt_connect_broker+0x2a0>)
    d57c:	3020      	adds	r0, #32
    d57e:	4790      	blx	r2
    d580:	6978      	ldr	r0, [r7, #20]
    d582:	47b0      	blx	r6
    d584:	1c02      	adds	r2, r0, #0
    d586:	1c38      	adds	r0, r7, #0
    d588:	3020      	adds	r0, #32
    d58a:	6979      	ldr	r1, [r7, #20]
    d58c:	47a0      	blx	r4
    d58e:	1c38      	adds	r0, r7, #0
    d590:	1c2c      	adds	r4, r5, #0
    d592:	3020      	adds	r0, #32
    d594:	4b1c      	ldr	r3, [pc, #112]	; (d608 <mqtt_connect_broker+0x2ac>)
    d596:	3443      	adds	r4, #67	; 0x43
    d598:	4798      	blx	r3
    d59a:	7821      	ldrb	r1, [r4, #0]
    d59c:	0789      	lsls	r1, r1, #30
    d59e:	0fc9      	lsrs	r1, r1, #31
    d5a0:	2901      	cmp	r1, #1
    d5a2:	d10b      	bne.n	d5bc <mqtt_connect_broker+0x260>
    d5a4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    d5a6:	2a00      	cmp	r2, #0
    d5a8:	d108      	bne.n	d5bc <mqtt_connect_broker+0x260>
    d5aa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d005      	beq.n	d5bc <mqtt_connect_broker+0x260>
    d5b0:	2034      	movs	r0, #52	; 0x34
    d5b2:	55c2      	strb	r2, [r0, r7]
    d5b4:	1c3a      	adds	r2, r7, #0
    d5b6:	1c28      	adds	r0, r5, #0
    d5b8:	3234      	adds	r2, #52	; 0x34
    d5ba:	4798      	blx	r3
    d5bc:	7823      	ldrb	r3, [r4, #0]
    d5be:	2202      	movs	r2, #2
    d5c0:	4313      	orrs	r3, r2
    d5c2:	2208      	movs	r2, #8
    d5c4:	4393      	bics	r3, r2
    d5c6:	7023      	strb	r3, [r4, #0]
    d5c8:	2000      	movs	r0, #0
    d5ca:	e005      	b.n	d5d8 <mqtt_connect_broker+0x27c>
    d5cc:	2080      	movs	r0, #128	; 0x80
    d5ce:	e002      	b.n	d5d6 <mqtt_connect_broker+0x27a>
    d5d0:	2078      	movs	r0, #120	; 0x78
    d5d2:	e000      	b.n	d5d6 <mqtt_connect_broker+0x27a>
    d5d4:	200b      	movs	r0, #11
    d5d6:	4240      	negs	r0, r0
    d5d8:	46bd      	mov	sp, r7
    d5da:	b013      	add	sp, #76	; 0x4c
    d5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5de:	46c0      	nop			; (mov r8, r8)
    d5e0:	0000eac9 	.word	0x0000eac9
    d5e4:	00002759 	.word	0x00002759
    d5e8:	00008415 	.word	0x00008415
    d5ec:	0000d0d5 	.word	0x0000d0d5
    d5f0:	00008031 	.word	0x00008031
    d5f4:	00008065 	.word	0x00008065
    d5f8:	8000007f 	.word	0x8000007f
    d5fc:	000080b1 	.word	0x000080b1
    d600:	000080f1 	.word	0x000080f1
    d604:	0001412d 	.word	0x0001412d
    d608:	0000812d 	.word	0x0000812d

0000d60c <mqtt_subscribe>:
    d60c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d60e:	b08d      	sub	sp, #52	; 0x34
    d610:	af02      	add	r7, sp, #8
    d612:	1c04      	adds	r4, r0, #0
    d614:	60b9      	str	r1, [r7, #8]
    d616:	607a      	str	r2, [r7, #4]
    d618:	d101      	bne.n	d61e <mqtt_subscribe+0x12>
    d61a:	2016      	movs	r0, #22
    d61c:	e086      	b.n	d72c <mqtt_subscribe+0x120>
    d61e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    d620:	466a      	mov	r2, sp
    d622:	3307      	adds	r3, #7
    d624:	08db      	lsrs	r3, r3, #3
    d626:	00db      	lsls	r3, r3, #3
    d628:	1ad2      	subs	r2, r2, r3
    d62a:	4695      	mov	sp, r2
    d62c:	ad02      	add	r5, sp, #8
    d62e:	603d      	str	r5, [r7, #0]
    d630:	68bd      	ldr	r5, [r7, #8]
    d632:	2d00      	cmp	r5, #0
    d634:	d0f1      	beq.n	d61a <mqtt_subscribe+0xe>
    d636:	687d      	ldr	r5, [r7, #4]
    d638:	2d02      	cmp	r5, #2
    d63a:	d8ee      	bhi.n	d61a <mqtt_subscribe+0xe>
    d63c:	1c05      	adds	r5, r0, #0
    d63e:	3543      	adds	r5, #67	; 0x43
    d640:	782b      	ldrb	r3, [r5, #0]
    d642:	079a      	lsls	r2, r3, #30
    d644:	d56f      	bpl.n	d726 <mqtt_subscribe+0x11a>
    d646:	071a      	lsls	r2, r3, #28
    d648:	d41a      	bmi.n	d680 <mqtt_subscribe+0x74>
    d64a:	68b8      	ldr	r0, [r7, #8]
    d64c:	4d39      	ldr	r5, [pc, #228]	; (d734 <mqtt_subscribe+0x128>)
    d64e:	47a8      	blx	r5
    d650:	1c25      	adds	r5, r4, #0
    d652:	3543      	adds	r5, #67	; 0x43
    d654:	782b      	ldrb	r3, [r5, #0]
    d656:	2208      	movs	r2, #8
    d658:	4313      	orrs	r3, r2
    d65a:	702b      	strb	r3, [r5, #0]
    d65c:	60fd      	str	r5, [r7, #12]
    d65e:	1d46      	adds	r6, r0, #5
    d660:	9400      	str	r4, [sp, #0]
    d662:	1c38      	adds	r0, r7, #0
    d664:	3014      	adds	r0, #20
    d666:	6839      	ldr	r1, [r7, #0]
    d668:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    d66a:	4b33      	ldr	r3, [pc, #204]	; (d738 <mqtt_subscribe+0x12c>)
    d66c:	4d33      	ldr	r5, [pc, #204]	; (d73c <mqtt_subscribe+0x130>)
    d66e:	47a8      	blx	r5
    d670:	1c38      	adds	r0, r7, #0
    d672:	217e      	movs	r1, #126	; 0x7e
    d674:	3014      	adds	r0, #20
    d676:	4249      	negs	r1, r1
    d678:	4b31      	ldr	r3, [pc, #196]	; (d740 <mqtt_subscribe+0x134>)
    d67a:	4798      	blx	r3
    d67c:	4d2d      	ldr	r5, [pc, #180]	; (d734 <mqtt_subscribe+0x128>)
    d67e:	e00e      	b.n	d69e <mqtt_subscribe+0x92>
    d680:	1c03      	adds	r3, r0, #0
    d682:	3370      	adds	r3, #112	; 0x70
    d684:	781b      	ldrb	r3, [r3, #0]
    d686:	2b00      	cmp	r3, #0
    d688:	d14f      	bne.n	d72a <mqtt_subscribe+0x11e>
    d68a:	782b      	ldrb	r3, [r5, #0]
    d68c:	071a      	lsls	r2, r3, #28
    d68e:	d5dc      	bpl.n	d64a <mqtt_subscribe+0x3e>
    d690:	4b2c      	ldr	r3, [pc, #176]	; (d744 <mqtt_subscribe+0x138>)
    d692:	2000      	movs	r0, #0
    d694:	4798      	blx	r3
    d696:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    d698:	4b2b      	ldr	r3, [pc, #172]	; (d748 <mqtt_subscribe+0x13c>)
    d69a:	4798      	blx	r3
    d69c:	e7f5      	b.n	d68a <mqtt_subscribe+0x7e>
    d69e:	4b28      	ldr	r3, [pc, #160]	; (d740 <mqtt_subscribe+0x134>)
    d6a0:	2e80      	cmp	r6, #128	; 0x80
    d6a2:	dd08      	ble.n	d6b6 <mqtt_subscribe+0xaa>
    d6a4:	2180      	movs	r1, #128	; 0x80
    d6a6:	4249      	negs	r1, r1
    d6a8:	4331      	orrs	r1, r6
    d6aa:	1c38      	adds	r0, r7, #0
    d6ac:	b249      	sxtb	r1, r1
    d6ae:	3014      	adds	r0, #20
    d6b0:	4798      	blx	r3
    d6b2:	11f6      	asrs	r6, r6, #7
    d6b4:	e7f3      	b.n	d69e <mqtt_subscribe+0x92>
    d6b6:	4925      	ldr	r1, [pc, #148]	; (d74c <mqtt_subscribe+0x140>)
    d6b8:	4031      	ands	r1, r6
    d6ba:	d504      	bpl.n	d6c6 <mqtt_subscribe+0xba>
    d6bc:	2280      	movs	r2, #128	; 0x80
    d6be:	3901      	subs	r1, #1
    d6c0:	4252      	negs	r2, r2
    d6c2:	4311      	orrs	r1, r2
    d6c4:	3101      	adds	r1, #1
    d6c6:	1c38      	adds	r0, r7, #0
    d6c8:	b249      	sxtb	r1, r1
    d6ca:	3014      	adds	r0, #20
    d6cc:	4798      	blx	r3
    d6ce:	8821      	ldrh	r1, [r4, #0]
    d6d0:	1c38      	adds	r0, r7, #0
    d6d2:	1c4b      	adds	r3, r1, #1
    d6d4:	8023      	strh	r3, [r4, #0]
    d6d6:	b209      	sxth	r1, r1
    d6d8:	3014      	adds	r0, #20
    d6da:	4e1d      	ldr	r6, [pc, #116]	; (d750 <mqtt_subscribe+0x144>)
    d6dc:	47b0      	blx	r6
    d6de:	8823      	ldrh	r3, [r4, #0]
    d6e0:	2b00      	cmp	r3, #0
    d6e2:	d101      	bne.n	d6e8 <mqtt_subscribe+0xdc>
    d6e4:	2301      	movs	r3, #1
    d6e6:	8023      	strh	r3, [r4, #0]
    d6e8:	68b8      	ldr	r0, [r7, #8]
    d6ea:	47a8      	blx	r5
    d6ec:	b201      	sxth	r1, r0
    d6ee:	1c38      	adds	r0, r7, #0
    d6f0:	3014      	adds	r0, #20
    d6f2:	47b0      	blx	r6
    d6f4:	68b8      	ldr	r0, [r7, #8]
    d6f6:	47a8      	blx	r5
    d6f8:	1c02      	adds	r2, r0, #0
    d6fa:	1c38      	adds	r0, r7, #0
    d6fc:	3014      	adds	r0, #20
    d6fe:	68b9      	ldr	r1, [r7, #8]
    d700:	4b14      	ldr	r3, [pc, #80]	; (d754 <mqtt_subscribe+0x148>)
    d702:	4798      	blx	r3
    d704:	687d      	ldr	r5, [r7, #4]
    d706:	1c38      	adds	r0, r7, #0
    d708:	b269      	sxtb	r1, r5
    d70a:	3014      	adds	r0, #20
    d70c:	4b0c      	ldr	r3, [pc, #48]	; (d740 <mqtt_subscribe+0x134>)
    d70e:	4798      	blx	r3
    d710:	1c38      	adds	r0, r7, #0
    d712:	3014      	adds	r0, #20
    d714:	4b10      	ldr	r3, [pc, #64]	; (d758 <mqtt_subscribe+0x14c>)
    d716:	4798      	blx	r3
    d718:	68fd      	ldr	r5, [r7, #12]
    d71a:	2208      	movs	r2, #8
    d71c:	782b      	ldrb	r3, [r5, #0]
    d71e:	2000      	movs	r0, #0
    d720:	4393      	bics	r3, r2
    d722:	702b      	strb	r3, [r5, #0]
    d724:	e003      	b.n	d72e <mqtt_subscribe+0x122>
    d726:	2080      	movs	r0, #128	; 0x80
    d728:	e000      	b.n	d72c <mqtt_subscribe+0x120>
    d72a:	200b      	movs	r0, #11
    d72c:	4240      	negs	r0, r0
    d72e:	46bd      	mov	sp, r7
    d730:	b00b      	add	sp, #44	; 0x2c
    d732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d734:	0000eac9 	.word	0x0000eac9
    d738:	0000d0d5 	.word	0x0000d0d5
    d73c:	00008031 	.word	0x00008031
    d740:	00008065 	.word	0x00008065
    d744:	00002759 	.word	0x00002759
    d748:	00008415 	.word	0x00008415
    d74c:	8000007f 	.word	0x8000007f
    d750:	000080b1 	.word	0x000080b1
    d754:	000080f1 	.word	0x000080f1
    d758:	0000812d 	.word	0x0000812d

0000d75c <_mqtt_ping>:
    d75c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d75e:	23c0      	movs	r3, #192	; 0xc0
    d760:	a901      	add	r1, sp, #4
    d762:	2500      	movs	r5, #0
    d764:	700b      	strb	r3, [r1, #0]
    d766:	704d      	strb	r5, [r1, #1]
    d768:	42a8      	cmp	r0, r5
    d76a:	d019      	beq.n	d7a0 <_mqtt_ping+0x44>
    d76c:	1c04      	adds	r4, r0, #0
    d76e:	3443      	adds	r4, #67	; 0x43
    d770:	7823      	ldrb	r3, [r4, #0]
    d772:	079a      	lsls	r2, r3, #30
    d774:	d516      	bpl.n	d7a4 <_mqtt_ping+0x48>
    d776:	071a      	lsls	r2, r3, #28
    d778:	d416      	bmi.n	d7a8 <_mqtt_ping+0x4c>
    d77a:	2608      	movs	r6, #8
    d77c:	4333      	orrs	r3, r6
    d77e:	7023      	strb	r3, [r4, #0]
    d780:	7880      	ldrb	r0, [r0, #2]
    d782:	1c2b      	adds	r3, r5, #0
    d784:	b240      	sxtb	r0, r0
    d786:	2202      	movs	r2, #2
    d788:	4f09      	ldr	r7, [pc, #36]	; (d7b0 <_mqtt_ping+0x54>)
    d78a:	47b8      	blx	r7
    d78c:	1c2b      	adds	r3, r5, #0
    d78e:	42a8      	cmp	r0, r5
    d790:	da0c      	bge.n	d7ac <_mqtt_ping+0x50>
    d792:	7823      	ldrb	r3, [r4, #0]
    d794:	43b3      	bics	r3, r6
    d796:	7023      	strb	r3, [r4, #0]
    d798:	4b06      	ldr	r3, [pc, #24]	; (d7b4 <_mqtt_ping+0x58>)
    d79a:	4798      	blx	r3
    d79c:	1c03      	adds	r3, r0, #0
    d79e:	e005      	b.n	d7ac <_mqtt_ping+0x50>
    d7a0:	2316      	movs	r3, #22
    d7a2:	e002      	b.n	d7aa <_mqtt_ping+0x4e>
    d7a4:	2380      	movs	r3, #128	; 0x80
    d7a6:	e000      	b.n	d7aa <_mqtt_ping+0x4e>
    d7a8:	230b      	movs	r3, #11
    d7aa:	425b      	negs	r3, r3
    d7ac:	1c18      	adds	r0, r3, #0
    d7ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d7b0:	00005b0d 	.word	0x00005b0d
    d7b4:	0000d085 	.word	0x0000d085

0000d7b8 <mqtt_timer_callback>:
    d7b8:	b570      	push	{r4, r5, r6, lr}
    d7ba:	1c05      	adds	r5, r0, #0
    d7bc:	b086      	sub	sp, #24
    d7be:	1c0e      	adds	r6, r1, #0
    d7c0:	1c14      	adds	r4, r2, #0
    d7c2:	2800      	cmp	r0, #0
    d7c4:	d012      	beq.n	d7ec <mqtt_timer_callback+0x34>
    d7c6:	2a00      	cmp	r2, #0
    d7c8:	d010      	beq.n	d7ec <mqtt_timer_callback+0x34>
    d7ca:	1c10      	adds	r0, r2, #0
    d7cc:	4b08      	ldr	r3, [pc, #32]	; (d7f0 <mqtt_timer_callback+0x38>)
    d7ce:	4798      	blx	r3
    d7d0:	2800      	cmp	r0, #0
    d7d2:	da04      	bge.n	d7de <mqtt_timer_callback+0x26>
    d7d4:	1c28      	adds	r0, r5, #0
    d7d6:	1c31      	adds	r1, r6, #0
    d7d8:	2200      	movs	r2, #0
    d7da:	4b06      	ldr	r3, [pc, #24]	; (d7f4 <mqtt_timer_callback+0x3c>)
    d7dc:	e005      	b.n	d7ea <mqtt_timer_callback+0x32>
    d7de:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d7e0:	2b00      	cmp	r3, #0
    d7e2:	d003      	beq.n	d7ec <mqtt_timer_callback+0x34>
    d7e4:	1c20      	adds	r0, r4, #0
    d7e6:	2107      	movs	r1, #7
    d7e8:	aa01      	add	r2, sp, #4
    d7ea:	4798      	blx	r3
    d7ec:	b006      	add	sp, #24
    d7ee:	bd70      	pop	{r4, r5, r6, pc}
    d7f0:	0000d75d 	.word	0x0000d75d
    d7f4:	00008399 	.word	0x00008399

0000d7f8 <_mqtt_puback>:
    d7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d7fa:	2302      	movs	r3, #2
    d7fc:	ac01      	add	r4, sp, #4
    d7fe:	2700      	movs	r7, #0
    d800:	7063      	strb	r3, [r4, #1]
    d802:	42b8      	cmp	r0, r7
    d804:	d01e      	beq.n	d844 <_mqtt_puback+0x4c>
    d806:	1c05      	adds	r5, r0, #0
    d808:	3543      	adds	r5, #67	; 0x43
    d80a:	782b      	ldrb	r3, [r5, #0]
    d80c:	079e      	lsls	r6, r3, #30
    d80e:	d51b      	bpl.n	d848 <_mqtt_puback+0x50>
    d810:	071e      	lsls	r6, r3, #28
    d812:	d41b      	bmi.n	d84c <_mqtt_puback+0x54>
    d814:	2608      	movs	r6, #8
    d816:	4333      	orrs	r3, r6
    d818:	702b      	strb	r3, [r5, #0]
    d81a:	7880      	ldrb	r0, [r0, #2]
    d81c:	7021      	strb	r1, [r4, #0]
    d81e:	0a11      	lsrs	r1, r2, #8
    d820:	70a1      	strb	r1, [r4, #2]
    d822:	70e2      	strb	r2, [r4, #3]
    d824:	1c21      	adds	r1, r4, #0
    d826:	1c3b      	adds	r3, r7, #0
    d828:	b240      	sxtb	r0, r0
    d82a:	2204      	movs	r2, #4
    d82c:	4c09      	ldr	r4, [pc, #36]	; (d854 <_mqtt_puback+0x5c>)
    d82e:	47a0      	blx	r4
    d830:	1c3b      	adds	r3, r7, #0
    d832:	42b8      	cmp	r0, r7
    d834:	da0c      	bge.n	d850 <_mqtt_puback+0x58>
    d836:	782b      	ldrb	r3, [r5, #0]
    d838:	43b3      	bics	r3, r6
    d83a:	702b      	strb	r3, [r5, #0]
    d83c:	4b06      	ldr	r3, [pc, #24]	; (d858 <_mqtt_puback+0x60>)
    d83e:	4798      	blx	r3
    d840:	1c03      	adds	r3, r0, #0
    d842:	e005      	b.n	d850 <_mqtt_puback+0x58>
    d844:	2316      	movs	r3, #22
    d846:	e002      	b.n	d84e <_mqtt_puback+0x56>
    d848:	2380      	movs	r3, #128	; 0x80
    d84a:	e000      	b.n	d84e <_mqtt_puback+0x56>
    d84c:	230b      	movs	r3, #11
    d84e:	425b      	negs	r3, r3
    d850:	1c18      	adds	r0, r3, #0
    d852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d854:	00005b0d 	.word	0x00005b0d
    d858:	0000d085 	.word	0x0000d085

0000d85c <mqtt_clear_conn>:
    d85c:	b530      	push	{r4, r5, lr}
    d85e:	1c04      	adds	r4, r0, #0
    d860:	b087      	sub	sp, #28
    d862:	2800      	cmp	r0, #0
    d864:	d01c      	beq.n	d8a0 <mqtt_clear_conn+0x44>
    d866:	2002      	movs	r0, #2
    d868:	4b0e      	ldr	r3, [pc, #56]	; (d8a4 <mqtt_clear_conn+0x48>)
    d86a:	5620      	ldrsb	r0, [r4, r0]
    d86c:	4798      	blx	r3
    d86e:	1c23      	adds	r3, r4, #0
    d870:	3343      	adds	r3, #67	; 0x43
    d872:	781a      	ldrb	r2, [r3, #0]
    d874:	21fc      	movs	r1, #252	; 0xfc
    d876:	0795      	lsls	r5, r2, #30
    d878:	400a      	ands	r2, r1
    d87a:	701a      	strb	r2, [r3, #0]
    d87c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    d87e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    d880:	9301      	str	r3, [sp, #4]
    d882:	2300      	movs	r3, #0
    d884:	64e3      	str	r3, [r4, #76]	; 0x4c
    d886:	6d21      	ldr	r1, [r4, #80]	; 0x50
    d888:	4b07      	ldr	r3, [pc, #28]	; (d8a8 <mqtt_clear_conn+0x4c>)
    d88a:	4798      	blx	r3
    d88c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d88e:	0fed      	lsrs	r5, r5, #31
    d890:	2b00      	cmp	r3, #0
    d892:	d005      	beq.n	d8a0 <mqtt_clear_conn+0x44>
    d894:	2d00      	cmp	r5, #0
    d896:	d003      	beq.n	d8a0 <mqtt_clear_conn+0x44>
    d898:	1c20      	adds	r0, r4, #0
    d89a:	2105      	movs	r1, #5
    d89c:	aa01      	add	r2, sp, #4
    d89e:	4798      	blx	r3
    d8a0:	b007      	add	sp, #28
    d8a2:	bd30      	pop	{r4, r5, pc}
    d8a4:	00005df1 	.word	0x00005df1
    d8a8:	000083e9 	.word	0x000083e9

0000d8ac <mqtt_disconnect>:
    d8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d8ae:	23e0      	movs	r3, #224	; 0xe0
    d8b0:	ae01      	add	r6, sp, #4
    d8b2:	2700      	movs	r7, #0
    d8b4:	1c05      	adds	r5, r0, #0
    d8b6:	7033      	strb	r3, [r6, #0]
    d8b8:	7077      	strb	r7, [r6, #1]
    d8ba:	42b8      	cmp	r0, r7
    d8bc:	d036      	beq.n	d92c <mqtt_disconnect+0x80>
    d8be:	1c04      	adds	r4, r0, #0
    d8c0:	3443      	adds	r4, #67	; 0x43
    d8c2:	7823      	ldrb	r3, [r4, #0]
    d8c4:	079a      	lsls	r2, r3, #30
    d8c6:	d533      	bpl.n	d930 <mqtt_disconnect+0x84>
    d8c8:	42b9      	cmp	r1, r7
    d8ca:	d12b      	bne.n	d924 <mqtt_disconnect+0x78>
    d8cc:	071a      	lsls	r2, r3, #28
    d8ce:	d414      	bmi.n	d8fa <mqtt_disconnect+0x4e>
    d8d0:	7823      	ldrb	r3, [r4, #0]
    d8d2:	2210      	movs	r2, #16
    d8d4:	4313      	orrs	r3, r2
    d8d6:	2708      	movs	r7, #8
    d8d8:	433b      	orrs	r3, r7
    d8da:	7023      	strb	r3, [r4, #0]
    d8dc:	2002      	movs	r0, #2
    d8de:	5628      	ldrsb	r0, [r5, r0]
    d8e0:	1c31      	adds	r1, r6, #0
    d8e2:	2202      	movs	r2, #2
    d8e4:	2300      	movs	r3, #0
    d8e6:	4d15      	ldr	r5, [pc, #84]	; (d93c <mqtt_disconnect+0x90>)
    d8e8:	47a8      	blx	r5
    d8ea:	2800      	cmp	r0, #0
    d8ec:	da14      	bge.n	d918 <mqtt_disconnect+0x6c>
    d8ee:	7823      	ldrb	r3, [r4, #0]
    d8f0:	43bb      	bics	r3, r7
    d8f2:	7023      	strb	r3, [r4, #0]
    d8f4:	4b12      	ldr	r3, [pc, #72]	; (d940 <mqtt_disconnect+0x94>)
    d8f6:	4798      	blx	r3
    d8f8:	e01e      	b.n	d938 <mqtt_disconnect+0x8c>
    d8fa:	1c03      	adds	r3, r0, #0
    d8fc:	3370      	adds	r3, #112	; 0x70
    d8fe:	781b      	ldrb	r3, [r3, #0]
    d900:	2b00      	cmp	r3, #0
    d902:	d117      	bne.n	d934 <mqtt_disconnect+0x88>
    d904:	7823      	ldrb	r3, [r4, #0]
    d906:	071a      	lsls	r2, r3, #28
    d908:	d5e2      	bpl.n	d8d0 <mqtt_disconnect+0x24>
    d90a:	4b0e      	ldr	r3, [pc, #56]	; (d944 <mqtt_disconnect+0x98>)
    d90c:	2000      	movs	r0, #0
    d90e:	4798      	blx	r3
    d910:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    d912:	4b0d      	ldr	r3, [pc, #52]	; (d948 <mqtt_disconnect+0x9c>)
    d914:	4798      	blx	r3
    d916:	e7f5      	b.n	d904 <mqtt_disconnect+0x58>
    d918:	7823      	ldrb	r3, [r4, #0]
    d91a:	2202      	movs	r2, #2
    d91c:	4393      	bics	r3, r2
    d91e:	7023      	strb	r3, [r4, #0]
    d920:	2000      	movs	r0, #0
    d922:	e009      	b.n	d938 <mqtt_disconnect+0x8c>
    d924:	4b09      	ldr	r3, [pc, #36]	; (d94c <mqtt_disconnect+0xa0>)
    d926:	4798      	blx	r3
    d928:	1c38      	adds	r0, r7, #0
    d92a:	e005      	b.n	d938 <mqtt_disconnect+0x8c>
    d92c:	2016      	movs	r0, #22
    d92e:	e002      	b.n	d936 <mqtt_disconnect+0x8a>
    d930:	2080      	movs	r0, #128	; 0x80
    d932:	e000      	b.n	d936 <mqtt_disconnect+0x8a>
    d934:	200b      	movs	r0, #11
    d936:	4240      	negs	r0, r0
    d938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d93a:	46c0      	nop			; (mov r8, r8)
    d93c:	00005b0d 	.word	0x00005b0d
    d940:	0000d085 	.word	0x0000d085
    d944:	00002759 	.word	0x00002759
    d948:	00008415 	.word	0x00008415
    d94c:	0000d85d 	.word	0x0000d85d

0000d950 <_mqtt_recv_handler>:
    d950:	b5f0      	push	{r4, r5, r6, r7, lr}
    d952:	1c04      	adds	r4, r0, #0
    d954:	6e40      	ldr	r0, [r0, #100]	; 0x64
    d956:	230f      	movs	r3, #15
    d958:	7802      	ldrb	r2, [r0, #0]
    d95a:	b087      	sub	sp, #28
    d95c:	1c15      	adds	r5, r2, #0
    d95e:	439d      	bics	r5, r3
    d960:	2d50      	cmp	r5, #80	; 0x50
    d962:	d100      	bne.n	d966 <_mqtt_recv_handler+0x16>
    d964:	e098      	b.n	da98 <_mqtt_recv_handler+0x148>
    d966:	d808      	bhi.n	d97a <_mqtt_recv_handler+0x2a>
    d968:	2d30      	cmp	r5, #48	; 0x30
    d96a:	d03f      	beq.n	d9ec <_mqtt_recv_handler+0x9c>
    d96c:	2d40      	cmp	r5, #64	; 0x40
    d96e:	d100      	bne.n	d972 <_mqtt_recv_handler+0x22>
    d970:	e0b3      	b.n	dada <_mqtt_recv_handler+0x18a>
    d972:	2d20      	cmp	r5, #32
    d974:	d000      	beq.n	d978 <_mqtt_recv_handler+0x28>
    d976:	e0c3      	b.n	db00 <_mqtt_recv_handler+0x1b0>
    d978:	e00e      	b.n	d998 <_mqtt_recv_handler+0x48>
    d97a:	2d70      	cmp	r5, #112	; 0x70
    d97c:	d100      	bne.n	d980 <_mqtt_recv_handler+0x30>
    d97e:	e0ac      	b.n	dada <_mqtt_recv_handler+0x18a>
    d980:	d803      	bhi.n	d98a <_mqtt_recv_handler+0x3a>
    d982:	2d60      	cmp	r5, #96	; 0x60
    d984:	d100      	bne.n	d988 <_mqtt_recv_handler+0x38>
    d986:	e096      	b.n	dab6 <_mqtt_recv_handler+0x166>
    d988:	e0ba      	b.n	db00 <_mqtt_recv_handler+0x1b0>
    d98a:	2d90      	cmp	r5, #144	; 0x90
    d98c:	d100      	bne.n	d990 <_mqtt_recv_handler+0x40>
    d98e:	e0aa      	b.n	dae6 <_mqtt_recv_handler+0x196>
    d990:	2db0      	cmp	r5, #176	; 0xb0
    d992:	d100      	bne.n	d996 <_mqtt_recv_handler+0x46>
    d994:	e0ad      	b.n	daf2 <_mqtt_recv_handler+0x1a2>
    d996:	e0b3      	b.n	db00 <_mqtt_recv_handler+0x1b0>
    d998:	aa01      	add	r2, sp, #4
    d99a:	2303      	movs	r3, #3
    d99c:	2901      	cmp	r1, #1
    d99e:	d900      	bls.n	d9a2 <_mqtt_recv_handler+0x52>
    d9a0:	78c3      	ldrb	r3, [r0, #3]
    d9a2:	7013      	strb	r3, [r2, #0]
    d9a4:	7813      	ldrb	r3, [r2, #0]
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	d00d      	beq.n	d9c6 <_mqtt_recv_handler+0x76>
    d9aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d002      	beq.n	d9b6 <_mqtt_recv_handler+0x66>
    d9b0:	1c20      	adds	r0, r4, #0
    d9b2:	2101      	movs	r1, #1
    d9b4:	4798      	blx	r3
    d9b6:	236f      	movs	r3, #111	; 0x6f
    d9b8:	425b      	negs	r3, r3
    d9ba:	64e3      	str	r3, [r4, #76]	; 0x4c
    d9bc:	1c20      	adds	r0, r4, #0
    d9be:	2100      	movs	r1, #0
    d9c0:	4b50      	ldr	r3, [pc, #320]	; (db04 <_mqtt_recv_handler+0x1b4>)
    d9c2:	4798      	blx	r3
    d9c4:	e09c      	b.n	db00 <_mqtt_recv_handler+0x1b0>
    d9c6:	1c23      	adds	r3, r4, #0
    d9c8:	3343      	adds	r3, #67	; 0x43
    d9ca:	7819      	ldrb	r1, [r3, #0]
    d9cc:	0789      	lsls	r1, r1, #30
    d9ce:	0fc9      	lsrs	r1, r1, #31
    d9d0:	d105      	bne.n	d9de <_mqtt_recv_handler+0x8e>
    d9d2:	781a      	ldrb	r2, [r3, #0]
    d9d4:	64e1      	str	r1, [r4, #76]	; 0x4c
    d9d6:	2102      	movs	r1, #2
    d9d8:	430a      	orrs	r2, r1
    d9da:	701a      	strb	r2, [r3, #0]
    d9dc:	e090      	b.n	db00 <_mqtt_recv_handler+0x1b0>
    d9de:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d100      	bne.n	d9e6 <_mqtt_recv_handler+0x96>
    d9e4:	e08c      	b.n	db00 <_mqtt_recv_handler+0x1b0>
    d9e6:	1c20      	adds	r0, r4, #0
    d9e8:	2101      	movs	r1, #1
    d9ea:	e088      	b.n	dafe <_mqtt_recv_handler+0x1ae>
    d9ec:	ad01      	add	r5, sp, #4
    d9ee:	0713      	lsls	r3, r2, #28
    d9f0:	7c2a      	ldrb	r2, [r5, #16]
    d9f2:	0fdb      	lsrs	r3, r3, #31
    d9f4:	2604      	movs	r6, #4
    d9f6:	009b      	lsls	r3, r3, #2
    d9f8:	43b2      	bics	r2, r6
    d9fa:	431a      	orrs	r2, r3
    d9fc:	742a      	strb	r2, [r5, #16]
    d9fe:	7807      	ldrb	r7, [r0, #0]
    da00:	2303      	movs	r3, #3
    da02:	b2d2      	uxtb	r2, r2
    da04:	087f      	lsrs	r7, r7, #1
    da06:	439a      	bics	r2, r3
    da08:	401f      	ands	r7, r3
    da0a:	1c13      	adds	r3, r2, #0
    da0c:	433b      	orrs	r3, r7
    da0e:	742b      	strb	r3, [r5, #16]
    da10:	1c43      	adds	r3, r0, #1
    da12:	7818      	ldrb	r0, [r3, #0]
    da14:	1c5a      	adds	r2, r3, #1
    da16:	287f      	cmp	r0, #127	; 0x7f
    da18:	d901      	bls.n	da1e <_mqtt_recv_handler+0xce>
    da1a:	1c13      	adds	r3, r2, #0
    da1c:	e7f9      	b.n	da12 <_mqtt_recv_handler+0xc2>
    da1e:	7858      	ldrb	r0, [r3, #1]
    da20:	789e      	ldrb	r6, [r3, #2]
    da22:	0200      	lsls	r0, r0, #8
    da24:	4330      	orrs	r0, r6
    da26:	3303      	adds	r3, #3
    da28:	2600      	movs	r6, #0
    da2a:	6068      	str	r0, [r5, #4]
    da2c:	9301      	str	r3, [sp, #4]
    da2e:	1818      	adds	r0, r3, r0
    da30:	42b7      	cmp	r7, r6
    da32:	d004      	beq.n	da3e <_mqtt_recv_handler+0xee>
    da34:	7806      	ldrb	r6, [r0, #0]
    da36:	7843      	ldrb	r3, [r0, #1]
    da38:	0236      	lsls	r6, r6, #8
    da3a:	431e      	orrs	r6, r3
    da3c:	3002      	adds	r0, #2
    da3e:	1851      	adds	r1, r2, r1
    da40:	6d63      	ldr	r3, [r4, #84]	; 0x54
    da42:	60a8      	str	r0, [r5, #8]
    da44:	1a08      	subs	r0, r1, r0
    da46:	60e8      	str	r0, [r5, #12]
    da48:	2b00      	cmp	r3, #0
    da4a:	d003      	beq.n	da54 <_mqtt_recv_handler+0x104>
    da4c:	1c20      	adds	r0, r4, #0
    da4e:	2106      	movs	r1, #6
    da50:	1c2a      	adds	r2, r5, #0
    da52:	4798      	blx	r3
    da54:	7c2b      	ldrb	r3, [r5, #16]
    da56:	079b      	lsls	r3, r3, #30
    da58:	0f9b      	lsrs	r3, r3, #30
    da5a:	2b01      	cmp	r3, #1
    da5c:	d10b      	bne.n	da76 <_mqtt_recv_handler+0x126>
    da5e:	b2b6      	uxth	r6, r6
    da60:	1c20      	adds	r0, r4, #0
    da62:	2140      	movs	r1, #64	; 0x40
    da64:	1c32      	adds	r2, r6, #0
    da66:	4b28      	ldr	r3, [pc, #160]	; (db08 <_mqtt_recv_handler+0x1b8>)
    da68:	4798      	blx	r3
    da6a:	2800      	cmp	r0, #0
    da6c:	d048      	beq.n	db00 <_mqtt_recv_handler+0x1b0>
    da6e:	1c23      	adds	r3, r4, #0
    da70:	3348      	adds	r3, #72	; 0x48
    da72:	2240      	movs	r2, #64	; 0x40
    da74:	e00c      	b.n	da90 <_mqtt_recv_handler+0x140>
    da76:	2b02      	cmp	r3, #2
    da78:	d142      	bne.n	db00 <_mqtt_recv_handler+0x1b0>
    da7a:	b2b6      	uxth	r6, r6
    da7c:	1c20      	adds	r0, r4, #0
    da7e:	2150      	movs	r1, #80	; 0x50
    da80:	1c32      	adds	r2, r6, #0
    da82:	4b21      	ldr	r3, [pc, #132]	; (db08 <_mqtt_recv_handler+0x1b8>)
    da84:	4798      	blx	r3
    da86:	2800      	cmp	r0, #0
    da88:	d03a      	beq.n	db00 <_mqtt_recv_handler+0x1b0>
    da8a:	1c23      	adds	r3, r4, #0
    da8c:	3348      	adds	r3, #72	; 0x48
    da8e:	2250      	movs	r2, #80	; 0x50
    da90:	344a      	adds	r4, #74	; 0x4a
    da92:	701a      	strb	r2, [r3, #0]
    da94:	8026      	strh	r6, [r4, #0]
    da96:	e033      	b.n	db00 <_mqtt_recv_handler+0x1b0>
    da98:	7885      	ldrb	r5, [r0, #2]
    da9a:	78c3      	ldrb	r3, [r0, #3]
    da9c:	022d      	lsls	r5, r5, #8
    da9e:	431d      	orrs	r5, r3
    daa0:	1c20      	adds	r0, r4, #0
    daa2:	2162      	movs	r1, #98	; 0x62
    daa4:	1c2a      	adds	r2, r5, #0
    daa6:	4b18      	ldr	r3, [pc, #96]	; (db08 <_mqtt_recv_handler+0x1b8>)
    daa8:	4798      	blx	r3
    daaa:	2800      	cmp	r0, #0
    daac:	d028      	beq.n	db00 <_mqtt_recv_handler+0x1b0>
    daae:	1c23      	adds	r3, r4, #0
    dab0:	3348      	adds	r3, #72	; 0x48
    dab2:	2260      	movs	r2, #96	; 0x60
    dab4:	e00d      	b.n	dad2 <_mqtt_recv_handler+0x182>
    dab6:	7885      	ldrb	r5, [r0, #2]
    dab8:	78c3      	ldrb	r3, [r0, #3]
    daba:	022d      	lsls	r5, r5, #8
    dabc:	431d      	orrs	r5, r3
    dabe:	1c20      	adds	r0, r4, #0
    dac0:	2170      	movs	r1, #112	; 0x70
    dac2:	1c2a      	adds	r2, r5, #0
    dac4:	4b10      	ldr	r3, [pc, #64]	; (db08 <_mqtt_recv_handler+0x1b8>)
    dac6:	4798      	blx	r3
    dac8:	2800      	cmp	r0, #0
    daca:	d019      	beq.n	db00 <_mqtt_recv_handler+0x1b0>
    dacc:	1c23      	adds	r3, r4, #0
    dace:	3348      	adds	r3, #72	; 0x48
    dad0:	2270      	movs	r2, #112	; 0x70
    dad2:	344a      	adds	r4, #74	; 0x4a
    dad4:	701a      	strb	r2, [r3, #0]
    dad6:	8025      	strh	r5, [r4, #0]
    dad8:	e012      	b.n	db00 <_mqtt_recv_handler+0x1b0>
    dada:	6d63      	ldr	r3, [r4, #84]	; 0x54
    dadc:	2b00      	cmp	r3, #0
    dade:	d00f      	beq.n	db00 <_mqtt_recv_handler+0x1b0>
    dae0:	1c20      	adds	r0, r4, #0
    dae2:	2102      	movs	r1, #2
    dae4:	e00a      	b.n	dafc <_mqtt_recv_handler+0x1ac>
    dae6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    dae8:	2b00      	cmp	r3, #0
    daea:	d009      	beq.n	db00 <_mqtt_recv_handler+0x1b0>
    daec:	1c20      	adds	r0, r4, #0
    daee:	2103      	movs	r1, #3
    daf0:	e004      	b.n	dafc <_mqtt_recv_handler+0x1ac>
    daf2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    daf4:	2b00      	cmp	r3, #0
    daf6:	d003      	beq.n	db00 <_mqtt_recv_handler+0x1b0>
    daf8:	1c20      	adds	r0, r4, #0
    dafa:	2104      	movs	r1, #4
    dafc:	aa01      	add	r2, sp, #4
    dafe:	4798      	blx	r3
    db00:	b007      	add	sp, #28
    db02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db04:	0000d8ad 	.word	0x0000d8ad
    db08:	0000d7f9 	.word	0x0000d7f9

0000db0c <mqtt_recv_packet>:
    db0c:	b538      	push	{r3, r4, r5, lr}
    db0e:	1e04      	subs	r4, r0, #0
    db10:	d017      	beq.n	db42 <mqtt_recv_packet+0x36>
    db12:	6c42      	ldr	r2, [r0, #68]	; 0x44
    db14:	6e83      	ldr	r3, [r0, #104]	; 0x68
    db16:	429a      	cmp	r2, r3
    db18:	d906      	bls.n	db28 <mqtt_recv_packet+0x1c>
    db1a:	238b      	movs	r3, #139	; 0x8b
    db1c:	425b      	negs	r3, r3
    db1e:	64c3      	str	r3, [r0, #76]	; 0x4c
    db20:	2100      	movs	r1, #0
    db22:	4b08      	ldr	r3, [pc, #32]	; (db44 <mqtt_recv_packet+0x38>)
    db24:	4798      	blx	r3
    db26:	e00c      	b.n	db42 <mqtt_recv_packet+0x36>
    db28:	6c62      	ldr	r2, [r4, #68]	; 0x44
    db2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    db2c:	2002      	movs	r0, #2
    db2e:	1899      	adds	r1, r3, r2
    db30:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    db32:	5620      	ldrsb	r0, [r4, r0]
    db34:	1a9a      	subs	r2, r3, r2
    db36:	b292      	uxth	r2, r2
    db38:	2300      	movs	r3, #0
    db3a:	4d03      	ldr	r5, [pc, #12]	; (db48 <mqtt_recv_packet+0x3c>)
    db3c:	47a8      	blx	r5
    db3e:	2800      	cmp	r0, #0
    db40:	d1f2      	bne.n	db28 <mqtt_recv_packet+0x1c>
    db42:	bd38      	pop	{r3, r4, r5, pc}
    db44:	0000d8ad 	.word	0x0000d8ad
    db48:	00005c71 	.word	0x00005c71

0000db4c <mqtt_recved_packet>:
    db4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    db4e:	1e04      	subs	r4, r0, #0
    db50:	d042      	beq.n	dbd8 <mqtt_recved_packet+0x8c>
    db52:	6c63      	ldr	r3, [r4, #68]	; 0x44
    db54:	6e67      	ldr	r7, [r4, #100]	; 0x64
    db56:	18ca      	adds	r2, r1, r3
    db58:	2301      	movs	r3, #1
    db5a:	9701      	str	r7, [sp, #4]
    db5c:	6462      	str	r2, [r4, #68]	; 0x44
    db5e:	2600      	movs	r6, #0
    db60:	1c1d      	adds	r5, r3, #0
    db62:	42a9      	cmp	r1, r5
    db64:	dc03      	bgt.n	db6e <mqtt_recved_packet+0x22>
    db66:	1c20      	adds	r0, r4, #0
    db68:	4b1c      	ldr	r3, [pc, #112]	; (dbdc <mqtt_recved_packet+0x90>)
    db6a:	4798      	blx	r3
    db6c:	e034      	b.n	dbd8 <mqtt_recved_packet+0x8c>
    db6e:	9f01      	ldr	r7, [sp, #4]
    db70:	5d78      	ldrb	r0, [r7, r5]
    db72:	01df      	lsls	r7, r3, #7
    db74:	46bc      	mov	ip, r7
    db76:	2d03      	cmp	r5, #3
    db78:	d101      	bne.n	db7e <mqtt_recved_packet+0x32>
    db7a:	234d      	movs	r3, #77	; 0x4d
    db7c:	e00e      	b.n	db9c <mqtt_recved_packet+0x50>
    db7e:	277f      	movs	r7, #127	; 0x7f
    db80:	4007      	ands	r7, r0
    db82:	437b      	muls	r3, r7
    db84:	b240      	sxtb	r0, r0
    db86:	3501      	adds	r5, #1
    db88:	18f6      	adds	r6, r6, r3
    db8a:	2800      	cmp	r0, #0
    db8c:	da01      	bge.n	db92 <mqtt_recved_packet+0x46>
    db8e:	4663      	mov	r3, ip
    db90:	e7e7      	b.n	db62 <mqtt_recved_packet+0x16>
    db92:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    db94:	19af      	adds	r7, r5, r6
    db96:	429f      	cmp	r7, r3
    db98:	d907      	bls.n	dbaa <mqtt_recved_packet+0x5e>
    db9a:	238b      	movs	r3, #139	; 0x8b
    db9c:	425b      	negs	r3, r3
    db9e:	64e3      	str	r3, [r4, #76]	; 0x4c
    dba0:	1c20      	adds	r0, r4, #0
    dba2:	2100      	movs	r1, #0
    dba4:	4b0e      	ldr	r3, [pc, #56]	; (dbe0 <mqtt_recved_packet+0x94>)
    dba6:	4798      	blx	r3
    dba8:	e016      	b.n	dbd8 <mqtt_recved_packet+0x8c>
    dbaa:	42ba      	cmp	r2, r7
    dbac:	d314      	bcc.n	dbd8 <mqtt_recved_packet+0x8c>
    dbae:	4b0d      	ldr	r3, [pc, #52]	; (dbe4 <mqtt_recved_packet+0x98>)
    dbb0:	1c20      	adds	r0, r4, #0
    dbb2:	1c31      	adds	r1, r6, #0
    dbb4:	4798      	blx	r3
    dbb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    dbb8:	42bb      	cmp	r3, r7
    dbba:	d102      	bne.n	dbc2 <mqtt_recved_packet+0x76>
    dbbc:	2300      	movs	r3, #0
    dbbe:	6463      	str	r3, [r4, #68]	; 0x44
    dbc0:	e00a      	b.n	dbd8 <mqtt_recved_packet+0x8c>
    dbc2:	1b9e      	subs	r6, r3, r6
    dbc4:	9b01      	ldr	r3, [sp, #4]
    dbc6:	1b75      	subs	r5, r6, r5
    dbc8:	19d9      	adds	r1, r3, r7
    dbca:	1c18      	adds	r0, r3, #0
    dbcc:	1c2a      	adds	r2, r5, #0
    dbce:	4b06      	ldr	r3, [pc, #24]	; (dbe8 <mqtt_recved_packet+0x9c>)
    dbd0:	4798      	blx	r3
    dbd2:	6465      	str	r5, [r4, #68]	; 0x44
    dbd4:	2100      	movs	r1, #0
    dbd6:	e7bc      	b.n	db52 <mqtt_recved_packet+0x6>
    dbd8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    dbda:	46c0      	nop			; (mov r8, r8)
    dbdc:	0000db0d 	.word	0x0000db0d
    dbe0:	0000d8ad 	.word	0x0000d8ad
    dbe4:	0000d951 	.word	0x0000d951
    dbe8:	0000dd7f 	.word	0x0000dd7f

0000dbec <mqtt_socket_event_handler>:
    dbec:	b570      	push	{r4, r5, r6, lr}
    dbee:	4d37      	ldr	r5, [pc, #220]	; (dccc <mqtt_socket_event_handler+0xe0>)
    dbf0:	0086      	lsls	r6, r0, #2
    dbf2:	5974      	ldr	r4, [r6, r5]
    dbf4:	b086      	sub	sp, #24
    dbf6:	2c00      	cmp	r4, #0
    dbf8:	d066      	beq.n	dcc8 <mqtt_socket_event_handler+0xdc>
    dbfa:	2906      	cmp	r1, #6
    dbfc:	d02b      	beq.n	dc56 <mqtt_socket_event_handler+0x6a>
    dbfe:	2907      	cmp	r1, #7
    dc00:	d039      	beq.n	dc76 <mqtt_socket_event_handler+0x8a>
    dc02:	2905      	cmp	r1, #5
    dc04:	d160      	bne.n	dcc8 <mqtt_socket_event_handler+0xdc>
    dc06:	2001      	movs	r0, #1
    dc08:	5610      	ldrsb	r0, [r2, r0]
    dc0a:	4b31      	ldr	r3, [pc, #196]	; (dcd0 <mqtt_socket_event_handler+0xe4>)
    dc0c:	4798      	blx	r3
    dc0e:	9001      	str	r0, [sp, #4]
    dc10:	2800      	cmp	r0, #0
    dc12:	da06      	bge.n	dc22 <mqtt_socket_event_handler+0x36>
    dc14:	2002      	movs	r0, #2
    dc16:	4b2f      	ldr	r3, [pc, #188]	; (dcd4 <mqtt_socket_event_handler+0xe8>)
    dc18:	5620      	ldrsb	r0, [r4, r0]
    dc1a:	4798      	blx	r3
    dc1c:	2300      	movs	r3, #0
    dc1e:	5173      	str	r3, [r6, r5]
    dc20:	e011      	b.n	dc46 <mqtt_socket_event_handler+0x5a>
    dc22:	1c23      	adds	r3, r4, #0
    dc24:	3343      	adds	r3, #67	; 0x43
    dc26:	781a      	ldrb	r2, [r3, #0]
    dc28:	2101      	movs	r1, #1
    dc2a:	430a      	orrs	r2, r1
    dc2c:	701a      	strb	r2, [r3, #0]
    dc2e:	331d      	adds	r3, #29
    dc30:	881b      	ldrh	r3, [r3, #0]
    dc32:	2b00      	cmp	r3, #0
    dc34:	d004      	beq.n	dc40 <mqtt_socket_event_handler+0x54>
    dc36:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    dc38:	6d21      	ldr	r1, [r4, #80]	; 0x50
    dc3a:	2200      	movs	r2, #0
    dc3c:	4b26      	ldr	r3, [pc, #152]	; (dcd8 <mqtt_socket_event_handler+0xec>)
    dc3e:	4798      	blx	r3
    dc40:	1c20      	adds	r0, r4, #0
    dc42:	4b26      	ldr	r3, [pc, #152]	; (dcdc <mqtt_socket_event_handler+0xf0>)
    dc44:	4798      	blx	r3
    dc46:	6d63      	ldr	r3, [r4, #84]	; 0x54
    dc48:	2b00      	cmp	r3, #0
    dc4a:	d03d      	beq.n	dcc8 <mqtt_socket_event_handler+0xdc>
    dc4c:	1c20      	adds	r0, r4, #0
    dc4e:	2100      	movs	r1, #0
    dc50:	aa01      	add	r2, sp, #4
    dc52:	4798      	blx	r3
    dc54:	e038      	b.n	dcc8 <mqtt_socket_event_handler+0xdc>
    dc56:	2304      	movs	r3, #4
    dc58:	5ed1      	ldrsh	r1, [r2, r3]
    dc5a:	2900      	cmp	r1, #0
    dc5c:	dd03      	ble.n	dc66 <mqtt_socket_event_handler+0x7a>
    dc5e:	1c20      	adds	r0, r4, #0
    dc60:	4b1f      	ldr	r3, [pc, #124]	; (dce0 <mqtt_socket_event_handler+0xf4>)
    dc62:	4798      	blx	r3
    dc64:	e003      	b.n	dc6e <mqtt_socket_event_handler+0x82>
    dc66:	1c0b      	adds	r3, r1, #0
    dc68:	1c08      	adds	r0, r1, #0
    dc6a:	330d      	adds	r3, #13
    dc6c:	d11a      	bne.n	dca4 <mqtt_socket_event_handler+0xb8>
    dc6e:	4b1b      	ldr	r3, [pc, #108]	; (dcdc <mqtt_socket_event_handler+0xf0>)
    dc70:	1c20      	adds	r0, r4, #0
    dc72:	4798      	blx	r3
    dc74:	e028      	b.n	dcc8 <mqtt_socket_event_handler+0xdc>
    dc76:	1c23      	adds	r3, r4, #0
    dc78:	3343      	adds	r3, #67	; 0x43
    dc7a:	8810      	ldrh	r0, [r2, #0]
    dc7c:	781a      	ldrb	r2, [r3, #0]
    dc7e:	0751      	lsls	r1, r2, #29
    dc80:	d402      	bmi.n	dc88 <mqtt_socket_event_handler+0x9c>
    dc82:	2108      	movs	r1, #8
    dc84:	438a      	bics	r2, r1
    dc86:	701a      	strb	r2, [r3, #0]
    dc88:	781a      	ldrb	r2, [r3, #0]
    dc8a:	2104      	movs	r1, #4
    dc8c:	438a      	bics	r2, r1
    dc8e:	701a      	strb	r2, [r3, #0]
    dc90:	06d3      	lsls	r3, r2, #27
    dc92:	0fde      	lsrs	r6, r3, #31
    dc94:	b200      	sxth	r0, r0
    dc96:	2b00      	cmp	r3, #0
    dc98:	db02      	blt.n	dca0 <mqtt_socket_event_handler+0xb4>
    dc9a:	2800      	cmp	r0, #0
    dc9c:	da08      	bge.n	dcb0 <mqtt_socket_event_handler+0xc4>
    dc9e:	e001      	b.n	dca4 <mqtt_socket_event_handler+0xb8>
    dca0:	2800      	cmp	r0, #0
    dca2:	da02      	bge.n	dcaa <mqtt_socket_event_handler+0xbe>
    dca4:	4b0a      	ldr	r3, [pc, #40]	; (dcd0 <mqtt_socket_event_handler+0xe4>)
    dca6:	4798      	blx	r3
    dca8:	64e0      	str	r0, [r4, #76]	; 0x4c
    dcaa:	1c20      	adds	r0, r4, #0
    dcac:	4b0d      	ldr	r3, [pc, #52]	; (dce4 <mqtt_socket_event_handler+0xf8>)
    dcae:	e7e0      	b.n	dc72 <mqtt_socket_event_handler+0x86>
    dcb0:	1c25      	adds	r5, r4, #0
    dcb2:	3548      	adds	r5, #72	; 0x48
    dcb4:	7829      	ldrb	r1, [r5, #0]
    dcb6:	2900      	cmp	r1, #0
    dcb8:	d006      	beq.n	dcc8 <mqtt_socket_event_handler+0xdc>
    dcba:	1c23      	adds	r3, r4, #0
    dcbc:	334a      	adds	r3, #74	; 0x4a
    dcbe:	881a      	ldrh	r2, [r3, #0]
    dcc0:	1c20      	adds	r0, r4, #0
    dcc2:	4b09      	ldr	r3, [pc, #36]	; (dce8 <mqtt_socket_event_handler+0xfc>)
    dcc4:	4798      	blx	r3
    dcc6:	702e      	strb	r6, [r5, #0]
    dcc8:	b006      	add	sp, #24
    dcca:	bd70      	pop	{r4, r5, r6, pc}
    dccc:	2000026c 	.word	0x2000026c
    dcd0:	0000d085 	.word	0x0000d085
    dcd4:	00005df1 	.word	0x00005df1
    dcd8:	00008399 	.word	0x00008399
    dcdc:	0000db0d 	.word	0x0000db0d
    dce0:	0000db4d 	.word	0x0000db4d
    dce4:	0000d85d 	.word	0x0000d85d
    dce8:	0000d7f9 	.word	0x0000d7f9

0000dcec <__libc_init_array>:
    dcec:	b570      	push	{r4, r5, r6, lr}
    dcee:	2600      	movs	r6, #0
    dcf0:	4d0c      	ldr	r5, [pc, #48]	; (dd24 <__libc_init_array+0x38>)
    dcf2:	4c0d      	ldr	r4, [pc, #52]	; (dd28 <__libc_init_array+0x3c>)
    dcf4:	1b64      	subs	r4, r4, r5
    dcf6:	10a4      	asrs	r4, r4, #2
    dcf8:	42a6      	cmp	r6, r4
    dcfa:	d109      	bne.n	dd10 <__libc_init_array+0x24>
    dcfc:	2600      	movs	r6, #0
    dcfe:	f006 fbbb 	bl	14478 <_init>
    dd02:	4d0a      	ldr	r5, [pc, #40]	; (dd2c <__libc_init_array+0x40>)
    dd04:	4c0a      	ldr	r4, [pc, #40]	; (dd30 <__libc_init_array+0x44>)
    dd06:	1b64      	subs	r4, r4, r5
    dd08:	10a4      	asrs	r4, r4, #2
    dd0a:	42a6      	cmp	r6, r4
    dd0c:	d105      	bne.n	dd1a <__libc_init_array+0x2e>
    dd0e:	bd70      	pop	{r4, r5, r6, pc}
    dd10:	00b3      	lsls	r3, r6, #2
    dd12:	58eb      	ldr	r3, [r5, r3]
    dd14:	4798      	blx	r3
    dd16:	3601      	adds	r6, #1
    dd18:	e7ee      	b.n	dcf8 <__libc_init_array+0xc>
    dd1a:	00b3      	lsls	r3, r6, #2
    dd1c:	58eb      	ldr	r3, [r5, r3]
    dd1e:	4798      	blx	r3
    dd20:	3601      	adds	r6, #1
    dd22:	e7f2      	b.n	dd0a <__libc_init_array+0x1e>
    dd24:	00014484 	.word	0x00014484
    dd28:	00014484 	.word	0x00014484
    dd2c:	00014484 	.word	0x00014484
    dd30:	00014488 	.word	0x00014488

0000dd34 <malloc>:
    dd34:	b510      	push	{r4, lr}
    dd36:	4b03      	ldr	r3, [pc, #12]	; (dd44 <malloc+0x10>)
    dd38:	0001      	movs	r1, r0
    dd3a:	6818      	ldr	r0, [r3, #0]
    dd3c:	f000 f884 	bl	de48 <_malloc_r>
    dd40:	bd10      	pop	{r4, pc}
    dd42:	46c0      	nop			; (mov r8, r8)
    dd44:	20000014 	.word	0x20000014

0000dd48 <__ascii_mbtowc>:
    dd48:	b082      	sub	sp, #8
    dd4a:	2900      	cmp	r1, #0
    dd4c:	d100      	bne.n	dd50 <__ascii_mbtowc+0x8>
    dd4e:	a901      	add	r1, sp, #4
    dd50:	1e10      	subs	r0, r2, #0
    dd52:	d006      	beq.n	dd62 <__ascii_mbtowc+0x1a>
    dd54:	2b00      	cmp	r3, #0
    dd56:	d006      	beq.n	dd66 <__ascii_mbtowc+0x1e>
    dd58:	7813      	ldrb	r3, [r2, #0]
    dd5a:	600b      	str	r3, [r1, #0]
    dd5c:	7810      	ldrb	r0, [r2, #0]
    dd5e:	1e43      	subs	r3, r0, #1
    dd60:	4198      	sbcs	r0, r3
    dd62:	b002      	add	sp, #8
    dd64:	4770      	bx	lr
    dd66:	2002      	movs	r0, #2
    dd68:	4240      	negs	r0, r0
    dd6a:	e7fa      	b.n	dd62 <__ascii_mbtowc+0x1a>

0000dd6c <memcpy>:
    dd6c:	2300      	movs	r3, #0
    dd6e:	b510      	push	{r4, lr}
    dd70:	429a      	cmp	r2, r3
    dd72:	d100      	bne.n	dd76 <memcpy+0xa>
    dd74:	bd10      	pop	{r4, pc}
    dd76:	5ccc      	ldrb	r4, [r1, r3]
    dd78:	54c4      	strb	r4, [r0, r3]
    dd7a:	3301      	adds	r3, #1
    dd7c:	e7f8      	b.n	dd70 <memcpy+0x4>

0000dd7e <memmove>:
    dd7e:	b510      	push	{r4, lr}
    dd80:	4288      	cmp	r0, r1
    dd82:	d902      	bls.n	dd8a <memmove+0xc>
    dd84:	188b      	adds	r3, r1, r2
    dd86:	4298      	cmp	r0, r3
    dd88:	d308      	bcc.n	dd9c <memmove+0x1e>
    dd8a:	2300      	movs	r3, #0
    dd8c:	429a      	cmp	r2, r3
    dd8e:	d007      	beq.n	dda0 <memmove+0x22>
    dd90:	5ccc      	ldrb	r4, [r1, r3]
    dd92:	54c4      	strb	r4, [r0, r3]
    dd94:	3301      	adds	r3, #1
    dd96:	e7f9      	b.n	dd8c <memmove+0xe>
    dd98:	5c8b      	ldrb	r3, [r1, r2]
    dd9a:	5483      	strb	r3, [r0, r2]
    dd9c:	3a01      	subs	r2, #1
    dd9e:	d2fb      	bcs.n	dd98 <memmove+0x1a>
    dda0:	bd10      	pop	{r4, pc}

0000dda2 <memset>:
    dda2:	0003      	movs	r3, r0
    dda4:	1882      	adds	r2, r0, r2
    dda6:	4293      	cmp	r3, r2
    dda8:	d100      	bne.n	ddac <memset+0xa>
    ddaa:	4770      	bx	lr
    ddac:	7019      	strb	r1, [r3, #0]
    ddae:	3301      	adds	r3, #1
    ddb0:	e7f9      	b.n	dda6 <memset+0x4>
	...

0000ddb4 <_free_r>:
    ddb4:	b570      	push	{r4, r5, r6, lr}
    ddb6:	0005      	movs	r5, r0
    ddb8:	2900      	cmp	r1, #0
    ddba:	d010      	beq.n	ddde <_free_r+0x2a>
    ddbc:	1f0c      	subs	r4, r1, #4
    ddbe:	6823      	ldr	r3, [r4, #0]
    ddc0:	2b00      	cmp	r3, #0
    ddc2:	da00      	bge.n	ddc6 <_free_r+0x12>
    ddc4:	18e4      	adds	r4, r4, r3
    ddc6:	0028      	movs	r0, r5
    ddc8:	f001 ffeb 	bl	fda2 <__malloc_lock>
    ddcc:	4a1d      	ldr	r2, [pc, #116]	; (de44 <_free_r+0x90>)
    ddce:	6813      	ldr	r3, [r2, #0]
    ddd0:	2b00      	cmp	r3, #0
    ddd2:	d105      	bne.n	dde0 <_free_r+0x2c>
    ddd4:	6063      	str	r3, [r4, #4]
    ddd6:	6014      	str	r4, [r2, #0]
    ddd8:	0028      	movs	r0, r5
    ddda:	f001 ffe3 	bl	fda4 <__malloc_unlock>
    ddde:	bd70      	pop	{r4, r5, r6, pc}
    dde0:	42a3      	cmp	r3, r4
    dde2:	d909      	bls.n	ddf8 <_free_r+0x44>
    dde4:	6821      	ldr	r1, [r4, #0]
    dde6:	1860      	adds	r0, r4, r1
    dde8:	4283      	cmp	r3, r0
    ddea:	d1f3      	bne.n	ddd4 <_free_r+0x20>
    ddec:	6818      	ldr	r0, [r3, #0]
    ddee:	685b      	ldr	r3, [r3, #4]
    ddf0:	1841      	adds	r1, r0, r1
    ddf2:	6021      	str	r1, [r4, #0]
    ddf4:	e7ee      	b.n	ddd4 <_free_r+0x20>
    ddf6:	0013      	movs	r3, r2
    ddf8:	685a      	ldr	r2, [r3, #4]
    ddfa:	2a00      	cmp	r2, #0
    ddfc:	d001      	beq.n	de02 <_free_r+0x4e>
    ddfe:	42a2      	cmp	r2, r4
    de00:	d9f9      	bls.n	ddf6 <_free_r+0x42>
    de02:	6819      	ldr	r1, [r3, #0]
    de04:	1858      	adds	r0, r3, r1
    de06:	42a0      	cmp	r0, r4
    de08:	d10b      	bne.n	de22 <_free_r+0x6e>
    de0a:	6820      	ldr	r0, [r4, #0]
    de0c:	1809      	adds	r1, r1, r0
    de0e:	1858      	adds	r0, r3, r1
    de10:	6019      	str	r1, [r3, #0]
    de12:	4282      	cmp	r2, r0
    de14:	d1e0      	bne.n	ddd8 <_free_r+0x24>
    de16:	6810      	ldr	r0, [r2, #0]
    de18:	6852      	ldr	r2, [r2, #4]
    de1a:	1841      	adds	r1, r0, r1
    de1c:	6019      	str	r1, [r3, #0]
    de1e:	605a      	str	r2, [r3, #4]
    de20:	e7da      	b.n	ddd8 <_free_r+0x24>
    de22:	42a0      	cmp	r0, r4
    de24:	d902      	bls.n	de2c <_free_r+0x78>
    de26:	230c      	movs	r3, #12
    de28:	602b      	str	r3, [r5, #0]
    de2a:	e7d5      	b.n	ddd8 <_free_r+0x24>
    de2c:	6821      	ldr	r1, [r4, #0]
    de2e:	1860      	adds	r0, r4, r1
    de30:	4282      	cmp	r2, r0
    de32:	d103      	bne.n	de3c <_free_r+0x88>
    de34:	6810      	ldr	r0, [r2, #0]
    de36:	6852      	ldr	r2, [r2, #4]
    de38:	1841      	adds	r1, r0, r1
    de3a:	6021      	str	r1, [r4, #0]
    de3c:	6062      	str	r2, [r4, #4]
    de3e:	605c      	str	r4, [r3, #4]
    de40:	e7ca      	b.n	ddd8 <_free_r+0x24>
    de42:	46c0      	nop			; (mov r8, r8)
    de44:	20000288 	.word	0x20000288

0000de48 <_malloc_r>:
    de48:	2303      	movs	r3, #3
    de4a:	b570      	push	{r4, r5, r6, lr}
    de4c:	1ccd      	adds	r5, r1, #3
    de4e:	439d      	bics	r5, r3
    de50:	3508      	adds	r5, #8
    de52:	0006      	movs	r6, r0
    de54:	2d0c      	cmp	r5, #12
    de56:	d21e      	bcs.n	de96 <_malloc_r+0x4e>
    de58:	250c      	movs	r5, #12
    de5a:	42a9      	cmp	r1, r5
    de5c:	d81d      	bhi.n	de9a <_malloc_r+0x52>
    de5e:	0030      	movs	r0, r6
    de60:	f001 ff9f 	bl	fda2 <__malloc_lock>
    de64:	4a25      	ldr	r2, [pc, #148]	; (defc <_malloc_r+0xb4>)
    de66:	6814      	ldr	r4, [r2, #0]
    de68:	0021      	movs	r1, r4
    de6a:	2900      	cmp	r1, #0
    de6c:	d119      	bne.n	dea2 <_malloc_r+0x5a>
    de6e:	4c24      	ldr	r4, [pc, #144]	; (df00 <_malloc_r+0xb8>)
    de70:	6823      	ldr	r3, [r4, #0]
    de72:	2b00      	cmp	r3, #0
    de74:	d103      	bne.n	de7e <_malloc_r+0x36>
    de76:	0030      	movs	r0, r6
    de78:	f000 fd4c 	bl	e914 <_sbrk_r>
    de7c:	6020      	str	r0, [r4, #0]
    de7e:	0029      	movs	r1, r5
    de80:	0030      	movs	r0, r6
    de82:	f000 fd47 	bl	e914 <_sbrk_r>
    de86:	1c43      	adds	r3, r0, #1
    de88:	d12c      	bne.n	dee4 <_malloc_r+0x9c>
    de8a:	230c      	movs	r3, #12
    de8c:	0030      	movs	r0, r6
    de8e:	6033      	str	r3, [r6, #0]
    de90:	f001 ff88 	bl	fda4 <__malloc_unlock>
    de94:	e003      	b.n	de9e <_malloc_r+0x56>
    de96:	2d00      	cmp	r5, #0
    de98:	dadf      	bge.n	de5a <_malloc_r+0x12>
    de9a:	230c      	movs	r3, #12
    de9c:	6033      	str	r3, [r6, #0]
    de9e:	2000      	movs	r0, #0
    dea0:	bd70      	pop	{r4, r5, r6, pc}
    dea2:	680b      	ldr	r3, [r1, #0]
    dea4:	1b5b      	subs	r3, r3, r5
    dea6:	d41a      	bmi.n	dede <_malloc_r+0x96>
    dea8:	2b0b      	cmp	r3, #11
    deaa:	d903      	bls.n	deb4 <_malloc_r+0x6c>
    deac:	600b      	str	r3, [r1, #0]
    deae:	18cc      	adds	r4, r1, r3
    deb0:	6025      	str	r5, [r4, #0]
    deb2:	e003      	b.n	debc <_malloc_r+0x74>
    deb4:	428c      	cmp	r4, r1
    deb6:	d10e      	bne.n	ded6 <_malloc_r+0x8e>
    deb8:	6863      	ldr	r3, [r4, #4]
    deba:	6013      	str	r3, [r2, #0]
    debc:	0030      	movs	r0, r6
    debe:	f001 ff71 	bl	fda4 <__malloc_unlock>
    dec2:	0020      	movs	r0, r4
    dec4:	2207      	movs	r2, #7
    dec6:	300b      	adds	r0, #11
    dec8:	1d23      	adds	r3, r4, #4
    deca:	4390      	bics	r0, r2
    decc:	1ac3      	subs	r3, r0, r3
    dece:	d0e7      	beq.n	dea0 <_malloc_r+0x58>
    ded0:	425a      	negs	r2, r3
    ded2:	50e2      	str	r2, [r4, r3]
    ded4:	e7e4      	b.n	dea0 <_malloc_r+0x58>
    ded6:	684b      	ldr	r3, [r1, #4]
    ded8:	6063      	str	r3, [r4, #4]
    deda:	000c      	movs	r4, r1
    dedc:	e7ee      	b.n	debc <_malloc_r+0x74>
    dede:	000c      	movs	r4, r1
    dee0:	6849      	ldr	r1, [r1, #4]
    dee2:	e7c2      	b.n	de6a <_malloc_r+0x22>
    dee4:	2303      	movs	r3, #3
    dee6:	1cc4      	adds	r4, r0, #3
    dee8:	439c      	bics	r4, r3
    deea:	42a0      	cmp	r0, r4
    deec:	d0e0      	beq.n	deb0 <_malloc_r+0x68>
    deee:	1a21      	subs	r1, r4, r0
    def0:	0030      	movs	r0, r6
    def2:	f000 fd0f 	bl	e914 <_sbrk_r>
    def6:	1c43      	adds	r3, r0, #1
    def8:	d1da      	bne.n	deb0 <_malloc_r+0x68>
    defa:	e7c6      	b.n	de8a <_malloc_r+0x42>
    defc:	20000288 	.word	0x20000288
    df00:	2000028c 	.word	0x2000028c

0000df04 <__cvt>:
    df04:	b5f0      	push	{r4, r5, r6, r7, lr}
    df06:	b08b      	sub	sp, #44	; 0x2c
    df08:	0014      	movs	r4, r2
    df0a:	1e1d      	subs	r5, r3, #0
    df0c:	9912      	ldr	r1, [sp, #72]	; 0x48
    df0e:	da53      	bge.n	dfb8 <__cvt+0xb4>
    df10:	2480      	movs	r4, #128	; 0x80
    df12:	0624      	lsls	r4, r4, #24
    df14:	191b      	adds	r3, r3, r4
    df16:	001d      	movs	r5, r3
    df18:	0014      	movs	r4, r2
    df1a:	232d      	movs	r3, #45	; 0x2d
    df1c:	700b      	strb	r3, [r1, #0]
    df1e:	2320      	movs	r3, #32
    df20:	9e14      	ldr	r6, [sp, #80]	; 0x50
    df22:	2203      	movs	r2, #3
    df24:	439e      	bics	r6, r3
    df26:	2e46      	cmp	r6, #70	; 0x46
    df28:	d007      	beq.n	df3a <__cvt+0x36>
    df2a:	0033      	movs	r3, r6
    df2c:	3b45      	subs	r3, #69	; 0x45
    df2e:	4259      	negs	r1, r3
    df30:	414b      	adcs	r3, r1
    df32:	9910      	ldr	r1, [sp, #64]	; 0x40
    df34:	3a01      	subs	r2, #1
    df36:	18cb      	adds	r3, r1, r3
    df38:	9310      	str	r3, [sp, #64]	; 0x40
    df3a:	ab09      	add	r3, sp, #36	; 0x24
    df3c:	9304      	str	r3, [sp, #16]
    df3e:	ab08      	add	r3, sp, #32
    df40:	9303      	str	r3, [sp, #12]
    df42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    df44:	9200      	str	r2, [sp, #0]
    df46:	9302      	str	r3, [sp, #8]
    df48:	9b10      	ldr	r3, [sp, #64]	; 0x40
    df4a:	0022      	movs	r2, r4
    df4c:	9301      	str	r3, [sp, #4]
    df4e:	002b      	movs	r3, r5
    df50:	f000 ff2e 	bl	edb0 <_dtoa_r>
    df54:	0007      	movs	r7, r0
    df56:	2e47      	cmp	r6, #71	; 0x47
    df58:	d102      	bne.n	df60 <__cvt+0x5c>
    df5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    df5c:	07db      	lsls	r3, r3, #31
    df5e:	d524      	bpl.n	dfaa <__cvt+0xa6>
    df60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    df62:	18fb      	adds	r3, r7, r3
    df64:	9307      	str	r3, [sp, #28]
    df66:	2e46      	cmp	r6, #70	; 0x46
    df68:	d114      	bne.n	df94 <__cvt+0x90>
    df6a:	783b      	ldrb	r3, [r7, #0]
    df6c:	2b30      	cmp	r3, #48	; 0x30
    df6e:	d10c      	bne.n	df8a <__cvt+0x86>
    df70:	2200      	movs	r2, #0
    df72:	2300      	movs	r3, #0
    df74:	0020      	movs	r0, r4
    df76:	0029      	movs	r1, r5
    df78:	f002 fdce 	bl	10b18 <__aeabi_dcmpeq>
    df7c:	2800      	cmp	r0, #0
    df7e:	d104      	bne.n	df8a <__cvt+0x86>
    df80:	2301      	movs	r3, #1
    df82:	9a10      	ldr	r2, [sp, #64]	; 0x40
    df84:	1a9b      	subs	r3, r3, r2
    df86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    df88:	6013      	str	r3, [r2, #0]
    df8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    df8c:	9a07      	ldr	r2, [sp, #28]
    df8e:	681b      	ldr	r3, [r3, #0]
    df90:	18d3      	adds	r3, r2, r3
    df92:	9307      	str	r3, [sp, #28]
    df94:	2200      	movs	r2, #0
    df96:	2300      	movs	r3, #0
    df98:	0020      	movs	r0, r4
    df9a:	0029      	movs	r1, r5
    df9c:	f002 fdbc 	bl	10b18 <__aeabi_dcmpeq>
    dfa0:	2230      	movs	r2, #48	; 0x30
    dfa2:	2800      	cmp	r0, #0
    dfa4:	d00d      	beq.n	dfc2 <__cvt+0xbe>
    dfa6:	9b07      	ldr	r3, [sp, #28]
    dfa8:	9309      	str	r3, [sp, #36]	; 0x24
    dfaa:	0038      	movs	r0, r7
    dfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dfae:	9a15      	ldr	r2, [sp, #84]	; 0x54
    dfb0:	1bdb      	subs	r3, r3, r7
    dfb2:	6013      	str	r3, [r2, #0]
    dfb4:	b00b      	add	sp, #44	; 0x2c
    dfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfb8:	2300      	movs	r3, #0
    dfba:	e7af      	b.n	df1c <__cvt+0x18>
    dfbc:	1c59      	adds	r1, r3, #1
    dfbe:	9109      	str	r1, [sp, #36]	; 0x24
    dfc0:	701a      	strb	r2, [r3, #0]
    dfc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dfc4:	9907      	ldr	r1, [sp, #28]
    dfc6:	4299      	cmp	r1, r3
    dfc8:	d8f8      	bhi.n	dfbc <__cvt+0xb8>
    dfca:	e7ee      	b.n	dfaa <__cvt+0xa6>

0000dfcc <__exponent>:
    dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfce:	232b      	movs	r3, #43	; 0x2b
    dfd0:	b085      	sub	sp, #20
    dfd2:	0007      	movs	r7, r0
    dfd4:	000c      	movs	r4, r1
    dfd6:	7002      	strb	r2, [r0, #0]
    dfd8:	1c86      	adds	r6, r0, #2
    dfda:	2900      	cmp	r1, #0
    dfdc:	da01      	bge.n	dfe2 <__exponent+0x16>
    dfde:	232d      	movs	r3, #45	; 0x2d
    dfe0:	424c      	negs	r4, r1
    dfe2:	707b      	strb	r3, [r7, #1]
    dfe4:	2c09      	cmp	r4, #9
    dfe6:	dd23      	ble.n	e030 <__exponent+0x64>
    dfe8:	ab02      	add	r3, sp, #8
    dfea:	1ddd      	adds	r5, r3, #7
    dfec:	1e6b      	subs	r3, r5, #1
    dfee:	0020      	movs	r0, r4
    dff0:	210a      	movs	r1, #10
    dff2:	9301      	str	r3, [sp, #4]
    dff4:	f002 fd7a 	bl	10aec <__aeabi_idivmod>
    dff8:	1e6b      	subs	r3, r5, #1
    dffa:	3130      	adds	r1, #48	; 0x30
    dffc:	7019      	strb	r1, [r3, #0]
    dffe:	0020      	movs	r0, r4
    e000:	210a      	movs	r1, #10
    e002:	f002 fc8d 	bl	10920 <__divsi3>
    e006:	0004      	movs	r4, r0
    e008:	2809      	cmp	r0, #9
    e00a:	dc0a      	bgt.n	e022 <__exponent+0x56>
    e00c:	3d02      	subs	r5, #2
    e00e:	3430      	adds	r4, #48	; 0x30
    e010:	702c      	strb	r4, [r5, #0]
    e012:	ab02      	add	r3, sp, #8
    e014:	3307      	adds	r3, #7
    e016:	0030      	movs	r0, r6
    e018:	42ab      	cmp	r3, r5
    e01a:	d804      	bhi.n	e026 <__exponent+0x5a>
    e01c:	1bc0      	subs	r0, r0, r7
    e01e:	b005      	add	sp, #20
    e020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e022:	9d01      	ldr	r5, [sp, #4]
    e024:	e7e2      	b.n	dfec <__exponent+0x20>
    e026:	782b      	ldrb	r3, [r5, #0]
    e028:	3501      	adds	r5, #1
    e02a:	7033      	strb	r3, [r6, #0]
    e02c:	3601      	adds	r6, #1
    e02e:	e7f0      	b.n	e012 <__exponent+0x46>
    e030:	2330      	movs	r3, #48	; 0x30
    e032:	18e4      	adds	r4, r4, r3
    e034:	7033      	strb	r3, [r6, #0]
    e036:	1cb0      	adds	r0, r6, #2
    e038:	7074      	strb	r4, [r6, #1]
    e03a:	e7ef      	b.n	e01c <__exponent+0x50>

0000e03c <_printf_float>:
    e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e03e:	b095      	sub	sp, #84	; 0x54
    e040:	000c      	movs	r4, r1
    e042:	920a      	str	r2, [sp, #40]	; 0x28
    e044:	930b      	str	r3, [sp, #44]	; 0x2c
    e046:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    e048:	9009      	str	r0, [sp, #36]	; 0x24
    e04a:	f001 fe27 	bl	fc9c <_localeconv_r>
    e04e:	6803      	ldr	r3, [r0, #0]
    e050:	0018      	movs	r0, r3
    e052:	930d      	str	r3, [sp, #52]	; 0x34
    e054:	f000 fd38 	bl	eac8 <strlen>
    e058:	2300      	movs	r3, #0
    e05a:	9312      	str	r3, [sp, #72]	; 0x48
    e05c:	6823      	ldr	r3, [r4, #0]
    e05e:	900e      	str	r0, [sp, #56]	; 0x38
    e060:	930c      	str	r3, [sp, #48]	; 0x30
    e062:	990c      	ldr	r1, [sp, #48]	; 0x30
    e064:	7e27      	ldrb	r7, [r4, #24]
    e066:	682b      	ldr	r3, [r5, #0]
    e068:	2207      	movs	r2, #7
    e06a:	05c9      	lsls	r1, r1, #23
    e06c:	d547      	bpl.n	e0fe <_printf_float+0xc2>
    e06e:	189b      	adds	r3, r3, r2
    e070:	4393      	bics	r3, r2
    e072:	001a      	movs	r2, r3
    e074:	3208      	adds	r2, #8
    e076:	602a      	str	r2, [r5, #0]
    e078:	681a      	ldr	r2, [r3, #0]
    e07a:	685b      	ldr	r3, [r3, #4]
    e07c:	64a2      	str	r2, [r4, #72]	; 0x48
    e07e:	64e3      	str	r3, [r4, #76]	; 0x4c
    e080:	2201      	movs	r2, #1
    e082:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    e084:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    e086:	006b      	lsls	r3, r5, #1
    e088:	085b      	lsrs	r3, r3, #1
    e08a:	930f      	str	r3, [sp, #60]	; 0x3c
    e08c:	4252      	negs	r2, r2
    e08e:	4ba7      	ldr	r3, [pc, #668]	; (e32c <_printf_float+0x2f0>)
    e090:	0030      	movs	r0, r6
    e092:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e094:	f004 fa72 	bl	1257c <__aeabi_dcmpun>
    e098:	2800      	cmp	r0, #0
    e09a:	d000      	beq.n	e09e <_printf_float+0x62>
    e09c:	e206      	b.n	e4ac <_printf_float+0x470>
    e09e:	2201      	movs	r2, #1
    e0a0:	4ba2      	ldr	r3, [pc, #648]	; (e32c <_printf_float+0x2f0>)
    e0a2:	4252      	negs	r2, r2
    e0a4:	0030      	movs	r0, r6
    e0a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e0a8:	f002 fd46 	bl	10b38 <__aeabi_dcmple>
    e0ac:	2800      	cmp	r0, #0
    e0ae:	d000      	beq.n	e0b2 <_printf_float+0x76>
    e0b0:	e1fc      	b.n	e4ac <_printf_float+0x470>
    e0b2:	2200      	movs	r2, #0
    e0b4:	2300      	movs	r3, #0
    e0b6:	0030      	movs	r0, r6
    e0b8:	0029      	movs	r1, r5
    e0ba:	f002 fd33 	bl	10b24 <__aeabi_dcmplt>
    e0be:	2800      	cmp	r0, #0
    e0c0:	d003      	beq.n	e0ca <_printf_float+0x8e>
    e0c2:	0023      	movs	r3, r4
    e0c4:	222d      	movs	r2, #45	; 0x2d
    e0c6:	3343      	adds	r3, #67	; 0x43
    e0c8:	701a      	strb	r2, [r3, #0]
    e0ca:	4d99      	ldr	r5, [pc, #612]	; (e330 <_printf_float+0x2f4>)
    e0cc:	2f47      	cmp	r7, #71	; 0x47
    e0ce:	d800      	bhi.n	e0d2 <_printf_float+0x96>
    e0d0:	4d98      	ldr	r5, [pc, #608]	; (e334 <_printf_float+0x2f8>)
    e0d2:	2303      	movs	r3, #3
    e0d4:	2600      	movs	r6, #0
    e0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e0d8:	6123      	str	r3, [r4, #16]
    e0da:	3301      	adds	r3, #1
    e0dc:	439a      	bics	r2, r3
    e0de:	6022      	str	r2, [r4, #0]
    e0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e0e2:	aa13      	add	r2, sp, #76	; 0x4c
    e0e4:	9300      	str	r3, [sp, #0]
    e0e6:	0021      	movs	r1, r4
    e0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e0ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    e0ec:	f000 f9f2 	bl	e4d4 <_printf_common>
    e0f0:	1c43      	adds	r3, r0, #1
    e0f2:	d000      	beq.n	e0f6 <_printf_float+0xba>
    e0f4:	e09c      	b.n	e230 <_printf_float+0x1f4>
    e0f6:	2001      	movs	r0, #1
    e0f8:	4240      	negs	r0, r0
    e0fa:	b015      	add	sp, #84	; 0x54
    e0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0fe:	3307      	adds	r3, #7
    e100:	e7b6      	b.n	e070 <_printf_float+0x34>
    e102:	2380      	movs	r3, #128	; 0x80
    e104:	6862      	ldr	r2, [r4, #4]
    e106:	00db      	lsls	r3, r3, #3
    e108:	1c51      	adds	r1, r2, #1
    e10a:	d145      	bne.n	e198 <_printf_float+0x15c>
    e10c:	3207      	adds	r2, #7
    e10e:	6062      	str	r2, [r4, #4]
    e110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e112:	2100      	movs	r1, #0
    e114:	4313      	orrs	r3, r2
    e116:	aa12      	add	r2, sp, #72	; 0x48
    e118:	9205      	str	r2, [sp, #20]
    e11a:	aa11      	add	r2, sp, #68	; 0x44
    e11c:	9203      	str	r2, [sp, #12]
    e11e:	2223      	movs	r2, #35	; 0x23
    e120:	6023      	str	r3, [r4, #0]
    e122:	9106      	str	r1, [sp, #24]
    e124:	9301      	str	r3, [sp, #4]
    e126:	a908      	add	r1, sp, #32
    e128:	6863      	ldr	r3, [r4, #4]
    e12a:	1852      	adds	r2, r2, r1
    e12c:	9202      	str	r2, [sp, #8]
    e12e:	9300      	str	r3, [sp, #0]
    e130:	0032      	movs	r2, r6
    e132:	002b      	movs	r3, r5
    e134:	9704      	str	r7, [sp, #16]
    e136:	9809      	ldr	r0, [sp, #36]	; 0x24
    e138:	f7ff fee4 	bl	df04 <__cvt>
    e13c:	2320      	movs	r3, #32
    e13e:	003a      	movs	r2, r7
    e140:	0005      	movs	r5, r0
    e142:	439a      	bics	r2, r3
    e144:	2a47      	cmp	r2, #71	; 0x47
    e146:	d107      	bne.n	e158 <_printf_float+0x11c>
    e148:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e14a:	1cda      	adds	r2, r3, #3
    e14c:	db02      	blt.n	e154 <_printf_float+0x118>
    e14e:	6862      	ldr	r2, [r4, #4]
    e150:	4293      	cmp	r3, r2
    e152:	dd5b      	ble.n	e20c <_printf_float+0x1d0>
    e154:	3f02      	subs	r7, #2
    e156:	b2ff      	uxtb	r7, r7
    e158:	9911      	ldr	r1, [sp, #68]	; 0x44
    e15a:	2f65      	cmp	r7, #101	; 0x65
    e15c:	d83b      	bhi.n	e1d6 <_printf_float+0x19a>
    e15e:	0020      	movs	r0, r4
    e160:	3901      	subs	r1, #1
    e162:	003a      	movs	r2, r7
    e164:	3050      	adds	r0, #80	; 0x50
    e166:	9111      	str	r1, [sp, #68]	; 0x44
    e168:	f7ff ff30 	bl	dfcc <__exponent>
    e16c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e16e:	0006      	movs	r6, r0
    e170:	1883      	adds	r3, r0, r2
    e172:	6123      	str	r3, [r4, #16]
    e174:	2a01      	cmp	r2, #1
    e176:	dc02      	bgt.n	e17e <_printf_float+0x142>
    e178:	6822      	ldr	r2, [r4, #0]
    e17a:	07d2      	lsls	r2, r2, #31
    e17c:	d501      	bpl.n	e182 <_printf_float+0x146>
    e17e:	3301      	adds	r3, #1
    e180:	6123      	str	r3, [r4, #16]
    e182:	2323      	movs	r3, #35	; 0x23
    e184:	aa08      	add	r2, sp, #32
    e186:	189b      	adds	r3, r3, r2
    e188:	781b      	ldrb	r3, [r3, #0]
    e18a:	2b00      	cmp	r3, #0
    e18c:	d0a8      	beq.n	e0e0 <_printf_float+0xa4>
    e18e:	0023      	movs	r3, r4
    e190:	222d      	movs	r2, #45	; 0x2d
    e192:	3343      	adds	r3, #67	; 0x43
    e194:	701a      	strb	r2, [r3, #0]
    e196:	e7a3      	b.n	e0e0 <_printf_float+0xa4>
    e198:	2f67      	cmp	r7, #103	; 0x67
    e19a:	d001      	beq.n	e1a0 <_printf_float+0x164>
    e19c:	2f47      	cmp	r7, #71	; 0x47
    e19e:	d1b7      	bne.n	e110 <_printf_float+0xd4>
    e1a0:	2a00      	cmp	r2, #0
    e1a2:	d016      	beq.n	e1d2 <_printf_float+0x196>
    e1a4:	990c      	ldr	r1, [sp, #48]	; 0x30
    e1a6:	a808      	add	r0, sp, #32
    e1a8:	430b      	orrs	r3, r1
    e1aa:	2100      	movs	r1, #0
    e1ac:	9106      	str	r1, [sp, #24]
    e1ae:	a912      	add	r1, sp, #72	; 0x48
    e1b0:	9105      	str	r1, [sp, #20]
    e1b2:	a911      	add	r1, sp, #68	; 0x44
    e1b4:	9103      	str	r1, [sp, #12]
    e1b6:	2123      	movs	r1, #35	; 0x23
    e1b8:	1809      	adds	r1, r1, r0
    e1ba:	6023      	str	r3, [r4, #0]
    e1bc:	9301      	str	r3, [sp, #4]
    e1be:	9200      	str	r2, [sp, #0]
    e1c0:	002b      	movs	r3, r5
    e1c2:	9704      	str	r7, [sp, #16]
    e1c4:	9102      	str	r1, [sp, #8]
    e1c6:	0032      	movs	r2, r6
    e1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    e1ca:	f7ff fe9b 	bl	df04 <__cvt>
    e1ce:	0005      	movs	r5, r0
    e1d0:	e7ba      	b.n	e148 <_printf_float+0x10c>
    e1d2:	2201      	movs	r2, #1
    e1d4:	e79b      	b.n	e10e <_printf_float+0xd2>
    e1d6:	2f66      	cmp	r7, #102	; 0x66
    e1d8:	d119      	bne.n	e20e <_printf_float+0x1d2>
    e1da:	6863      	ldr	r3, [r4, #4]
    e1dc:	2900      	cmp	r1, #0
    e1de:	dd0c      	ble.n	e1fa <_printf_float+0x1be>
    e1e0:	6121      	str	r1, [r4, #16]
    e1e2:	2b00      	cmp	r3, #0
    e1e4:	d102      	bne.n	e1ec <_printf_float+0x1b0>
    e1e6:	6822      	ldr	r2, [r4, #0]
    e1e8:	07d2      	lsls	r2, r2, #31
    e1ea:	d502      	bpl.n	e1f2 <_printf_float+0x1b6>
    e1ec:	3301      	adds	r3, #1
    e1ee:	185b      	adds	r3, r3, r1
    e1f0:	6123      	str	r3, [r4, #16]
    e1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e1f4:	2600      	movs	r6, #0
    e1f6:	65a3      	str	r3, [r4, #88]	; 0x58
    e1f8:	e7c3      	b.n	e182 <_printf_float+0x146>
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	d103      	bne.n	e206 <_printf_float+0x1ca>
    e1fe:	2201      	movs	r2, #1
    e200:	6821      	ldr	r1, [r4, #0]
    e202:	4211      	tst	r1, r2
    e204:	d000      	beq.n	e208 <_printf_float+0x1cc>
    e206:	1c9a      	adds	r2, r3, #2
    e208:	6122      	str	r2, [r4, #16]
    e20a:	e7f2      	b.n	e1f2 <_printf_float+0x1b6>
    e20c:	2767      	movs	r7, #103	; 0x67
    e20e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e210:	9812      	ldr	r0, [sp, #72]	; 0x48
    e212:	4283      	cmp	r3, r0
    e214:	db05      	blt.n	e222 <_printf_float+0x1e6>
    e216:	6822      	ldr	r2, [r4, #0]
    e218:	6123      	str	r3, [r4, #16]
    e21a:	07d2      	lsls	r2, r2, #31
    e21c:	d5e9      	bpl.n	e1f2 <_printf_float+0x1b6>
    e21e:	3301      	adds	r3, #1
    e220:	e7e6      	b.n	e1f0 <_printf_float+0x1b4>
    e222:	2201      	movs	r2, #1
    e224:	2b00      	cmp	r3, #0
    e226:	dc01      	bgt.n	e22c <_printf_float+0x1f0>
    e228:	1892      	adds	r2, r2, r2
    e22a:	1ad2      	subs	r2, r2, r3
    e22c:	1812      	adds	r2, r2, r0
    e22e:	e7eb      	b.n	e208 <_printf_float+0x1cc>
    e230:	6822      	ldr	r2, [r4, #0]
    e232:	0553      	lsls	r3, r2, #21
    e234:	d408      	bmi.n	e248 <_printf_float+0x20c>
    e236:	6923      	ldr	r3, [r4, #16]
    e238:	002a      	movs	r2, r5
    e23a:	990a      	ldr	r1, [sp, #40]	; 0x28
    e23c:	9809      	ldr	r0, [sp, #36]	; 0x24
    e23e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    e240:	47a8      	blx	r5
    e242:	1c43      	adds	r3, r0, #1
    e244:	d129      	bne.n	e29a <_printf_float+0x25e>
    e246:	e756      	b.n	e0f6 <_printf_float+0xba>
    e248:	2f65      	cmp	r7, #101	; 0x65
    e24a:	d800      	bhi.n	e24e <_printf_float+0x212>
    e24c:	e0dc      	b.n	e408 <_printf_float+0x3cc>
    e24e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    e250:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e252:	2200      	movs	r2, #0
    e254:	2300      	movs	r3, #0
    e256:	f002 fc5f 	bl	10b18 <__aeabi_dcmpeq>
    e25a:	2800      	cmp	r0, #0
    e25c:	d035      	beq.n	e2ca <_printf_float+0x28e>
    e25e:	2301      	movs	r3, #1
    e260:	4a35      	ldr	r2, [pc, #212]	; (e338 <_printf_float+0x2fc>)
    e262:	990a      	ldr	r1, [sp, #40]	; 0x28
    e264:	9809      	ldr	r0, [sp, #36]	; 0x24
    e266:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    e268:	47a8      	blx	r5
    e26a:	1c43      	adds	r3, r0, #1
    e26c:	d100      	bne.n	e270 <_printf_float+0x234>
    e26e:	e742      	b.n	e0f6 <_printf_float+0xba>
    e270:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e272:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e274:	4293      	cmp	r3, r2
    e276:	db02      	blt.n	e27e <_printf_float+0x242>
    e278:	6823      	ldr	r3, [r4, #0]
    e27a:	07db      	lsls	r3, r3, #31
    e27c:	d50d      	bpl.n	e29a <_printf_float+0x25e>
    e27e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    e280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e282:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e284:	990a      	ldr	r1, [sp, #40]	; 0x28
    e286:	9809      	ldr	r0, [sp, #36]	; 0x24
    e288:	47a8      	blx	r5
    e28a:	2500      	movs	r5, #0
    e28c:	1c43      	adds	r3, r0, #1
    e28e:	d100      	bne.n	e292 <_printf_float+0x256>
    e290:	e731      	b.n	e0f6 <_printf_float+0xba>
    e292:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e294:	3b01      	subs	r3, #1
    e296:	429d      	cmp	r5, r3
    e298:	db0b      	blt.n	e2b2 <_printf_float+0x276>
    e29a:	6823      	ldr	r3, [r4, #0]
    e29c:	2500      	movs	r5, #0
    e29e:	079b      	lsls	r3, r3, #30
    e2a0:	d500      	bpl.n	e2a4 <_printf_float+0x268>
    e2a2:	e0fd      	b.n	e4a0 <_printf_float+0x464>
    e2a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e2a6:	68e0      	ldr	r0, [r4, #12]
    e2a8:	4298      	cmp	r0, r3
    e2aa:	db00      	blt.n	e2ae <_printf_float+0x272>
    e2ac:	e725      	b.n	e0fa <_printf_float+0xbe>
    e2ae:	0018      	movs	r0, r3
    e2b0:	e723      	b.n	e0fa <_printf_float+0xbe>
    e2b2:	0022      	movs	r2, r4
    e2b4:	2301      	movs	r3, #1
    e2b6:	321a      	adds	r2, #26
    e2b8:	990a      	ldr	r1, [sp, #40]	; 0x28
    e2ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    e2bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e2be:	47b0      	blx	r6
    e2c0:	1c43      	adds	r3, r0, #1
    e2c2:	d100      	bne.n	e2c6 <_printf_float+0x28a>
    e2c4:	e717      	b.n	e0f6 <_printf_float+0xba>
    e2c6:	3501      	adds	r5, #1
    e2c8:	e7e3      	b.n	e292 <_printf_float+0x256>
    e2ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	dc35      	bgt.n	e33c <_printf_float+0x300>
    e2d0:	2301      	movs	r3, #1
    e2d2:	4a19      	ldr	r2, [pc, #100]	; (e338 <_printf_float+0x2fc>)
    e2d4:	990a      	ldr	r1, [sp, #40]	; 0x28
    e2d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    e2d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e2da:	47b0      	blx	r6
    e2dc:	1c43      	adds	r3, r0, #1
    e2de:	d100      	bne.n	e2e2 <_printf_float+0x2a6>
    e2e0:	e709      	b.n	e0f6 <_printf_float+0xba>
    e2e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d105      	bne.n	e2f4 <_printf_float+0x2b8>
    e2e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	d102      	bne.n	e2f4 <_printf_float+0x2b8>
    e2ee:	6823      	ldr	r3, [r4, #0]
    e2f0:	07db      	lsls	r3, r3, #31
    e2f2:	d5d2      	bpl.n	e29a <_printf_float+0x25e>
    e2f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e2f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e2f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e2fa:	990a      	ldr	r1, [sp, #40]	; 0x28
    e2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    e2fe:	47b0      	blx	r6
    e300:	2600      	movs	r6, #0
    e302:	1c43      	adds	r3, r0, #1
    e304:	d100      	bne.n	e308 <_printf_float+0x2cc>
    e306:	e6f6      	b.n	e0f6 <_printf_float+0xba>
    e308:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e30a:	425b      	negs	r3, r3
    e30c:	429e      	cmp	r6, r3
    e30e:	db01      	blt.n	e314 <_printf_float+0x2d8>
    e310:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e312:	e791      	b.n	e238 <_printf_float+0x1fc>
    e314:	0022      	movs	r2, r4
    e316:	2301      	movs	r3, #1
    e318:	321a      	adds	r2, #26
    e31a:	990a      	ldr	r1, [sp, #40]	; 0x28
    e31c:	9809      	ldr	r0, [sp, #36]	; 0x24
    e31e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e320:	47b8      	blx	r7
    e322:	1c43      	adds	r3, r0, #1
    e324:	d100      	bne.n	e328 <_printf_float+0x2ec>
    e326:	e6e6      	b.n	e0f6 <_printf_float+0xba>
    e328:	3601      	adds	r6, #1
    e32a:	e7ed      	b.n	e308 <_printf_float+0x2cc>
    e32c:	7fefffff 	.word	0x7fefffff
    e330:	00014146 	.word	0x00014146
    e334:	00014142 	.word	0x00014142
    e338:	00014152 	.word	0x00014152
    e33c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    e33e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    e340:	429e      	cmp	r6, r3
    e342:	dd00      	ble.n	e346 <_printf_float+0x30a>
    e344:	001e      	movs	r6, r3
    e346:	2e00      	cmp	r6, #0
    e348:	dc35      	bgt.n	e3b6 <_printf_float+0x37a>
    e34a:	2300      	movs	r3, #0
    e34c:	930c      	str	r3, [sp, #48]	; 0x30
    e34e:	43f3      	mvns	r3, r6
    e350:	17db      	asrs	r3, r3, #31
    e352:	930f      	str	r3, [sp, #60]	; 0x3c
    e354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e356:	6da7      	ldr	r7, [r4, #88]	; 0x58
    e358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e35a:	4033      	ands	r3, r6
    e35c:	1afb      	subs	r3, r7, r3
    e35e:	429a      	cmp	r2, r3
    e360:	db32      	blt.n	e3c8 <_printf_float+0x38c>
    e362:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e364:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e366:	4293      	cmp	r3, r2
    e368:	db3c      	blt.n	e3e4 <_printf_float+0x3a8>
    e36a:	6823      	ldr	r3, [r4, #0]
    e36c:	07db      	lsls	r3, r3, #31
    e36e:	d439      	bmi.n	e3e4 <_printf_float+0x3a8>
    e370:	9e12      	ldr	r6, [sp, #72]	; 0x48
    e372:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e374:	1bf3      	subs	r3, r6, r7
    e376:	1ab6      	subs	r6, r6, r2
    e378:	429e      	cmp	r6, r3
    e37a:	dd00      	ble.n	e37e <_printf_float+0x342>
    e37c:	001e      	movs	r6, r3
    e37e:	2e00      	cmp	r6, #0
    e380:	dc39      	bgt.n	e3f6 <_printf_float+0x3ba>
    e382:	43f7      	mvns	r7, r6
    e384:	2500      	movs	r5, #0
    e386:	17fb      	asrs	r3, r7, #31
    e388:	930c      	str	r3, [sp, #48]	; 0x30
    e38a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e38c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e38e:	990c      	ldr	r1, [sp, #48]	; 0x30
    e390:	1a9b      	subs	r3, r3, r2
    e392:	0032      	movs	r2, r6
    e394:	400a      	ands	r2, r1
    e396:	1a9b      	subs	r3, r3, r2
    e398:	429d      	cmp	r5, r3
    e39a:	db00      	blt.n	e39e <_printf_float+0x362>
    e39c:	e77d      	b.n	e29a <_printf_float+0x25e>
    e39e:	0022      	movs	r2, r4
    e3a0:	2301      	movs	r3, #1
    e3a2:	321a      	adds	r2, #26
    e3a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    e3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
    e3a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e3aa:	47b8      	blx	r7
    e3ac:	1c43      	adds	r3, r0, #1
    e3ae:	d100      	bne.n	e3b2 <_printf_float+0x376>
    e3b0:	e6a1      	b.n	e0f6 <_printf_float+0xba>
    e3b2:	3501      	adds	r5, #1
    e3b4:	e7e9      	b.n	e38a <_printf_float+0x34e>
    e3b6:	0033      	movs	r3, r6
    e3b8:	002a      	movs	r2, r5
    e3ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    e3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    e3be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e3c0:	47b8      	blx	r7
    e3c2:	1c43      	adds	r3, r0, #1
    e3c4:	d1c1      	bne.n	e34a <_printf_float+0x30e>
    e3c6:	e696      	b.n	e0f6 <_printf_float+0xba>
    e3c8:	0022      	movs	r2, r4
    e3ca:	2301      	movs	r3, #1
    e3cc:	321a      	adds	r2, #26
    e3ce:	990a      	ldr	r1, [sp, #40]	; 0x28
    e3d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    e3d2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e3d4:	47b8      	blx	r7
    e3d6:	1c43      	adds	r3, r0, #1
    e3d8:	d100      	bne.n	e3dc <_printf_float+0x3a0>
    e3da:	e68c      	b.n	e0f6 <_printf_float+0xba>
    e3dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e3de:	3301      	adds	r3, #1
    e3e0:	930c      	str	r3, [sp, #48]	; 0x30
    e3e2:	e7b7      	b.n	e354 <_printf_float+0x318>
    e3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e3e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e3e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    e3ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    e3ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e3ee:	47b0      	blx	r6
    e3f0:	1c43      	adds	r3, r0, #1
    e3f2:	d1bd      	bne.n	e370 <_printf_float+0x334>
    e3f4:	e67f      	b.n	e0f6 <_printf_float+0xba>
    e3f6:	19ea      	adds	r2, r5, r7
    e3f8:	0033      	movs	r3, r6
    e3fa:	990a      	ldr	r1, [sp, #40]	; 0x28
    e3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    e3fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    e400:	47a8      	blx	r5
    e402:	1c43      	adds	r3, r0, #1
    e404:	d1bd      	bne.n	e382 <_printf_float+0x346>
    e406:	e676      	b.n	e0f6 <_printf_float+0xba>
    e408:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e40a:	2b01      	cmp	r3, #1
    e40c:	dc02      	bgt.n	e414 <_printf_float+0x3d8>
    e40e:	2301      	movs	r3, #1
    e410:	421a      	tst	r2, r3
    e412:	d038      	beq.n	e486 <_printf_float+0x44a>
    e414:	2301      	movs	r3, #1
    e416:	002a      	movs	r2, r5
    e418:	990a      	ldr	r1, [sp, #40]	; 0x28
    e41a:	9809      	ldr	r0, [sp, #36]	; 0x24
    e41c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e41e:	47b8      	blx	r7
    e420:	1c43      	adds	r3, r0, #1
    e422:	d100      	bne.n	e426 <_printf_float+0x3ea>
    e424:	e667      	b.n	e0f6 <_printf_float+0xba>
    e426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e42a:	990a      	ldr	r1, [sp, #40]	; 0x28
    e42c:	9809      	ldr	r0, [sp, #36]	; 0x24
    e42e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e430:	47b8      	blx	r7
    e432:	1c43      	adds	r3, r0, #1
    e434:	d100      	bne.n	e438 <_printf_float+0x3fc>
    e436:	e65e      	b.n	e0f6 <_printf_float+0xba>
    e438:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    e43a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e43c:	2200      	movs	r2, #0
    e43e:	2300      	movs	r3, #0
    e440:	f002 fb6a 	bl	10b18 <__aeabi_dcmpeq>
    e444:	2800      	cmp	r0, #0
    e446:	d008      	beq.n	e45a <_printf_float+0x41e>
    e448:	2500      	movs	r5, #0
    e44a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e44c:	3b01      	subs	r3, #1
    e44e:	429d      	cmp	r5, r3
    e450:	db0d      	blt.n	e46e <_printf_float+0x432>
    e452:	0022      	movs	r2, r4
    e454:	0033      	movs	r3, r6
    e456:	3250      	adds	r2, #80	; 0x50
    e458:	e6ef      	b.n	e23a <_printf_float+0x1fe>
    e45a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e45c:	1c6a      	adds	r2, r5, #1
    e45e:	3b01      	subs	r3, #1
    e460:	990a      	ldr	r1, [sp, #40]	; 0x28
    e462:	9809      	ldr	r0, [sp, #36]	; 0x24
    e464:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    e466:	47a8      	blx	r5
    e468:	1c43      	adds	r3, r0, #1
    e46a:	d1f2      	bne.n	e452 <_printf_float+0x416>
    e46c:	e643      	b.n	e0f6 <_printf_float+0xba>
    e46e:	0022      	movs	r2, r4
    e470:	2301      	movs	r3, #1
    e472:	321a      	adds	r2, #26
    e474:	990a      	ldr	r1, [sp, #40]	; 0x28
    e476:	9809      	ldr	r0, [sp, #36]	; 0x24
    e478:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e47a:	47b8      	blx	r7
    e47c:	1c43      	adds	r3, r0, #1
    e47e:	d100      	bne.n	e482 <_printf_float+0x446>
    e480:	e639      	b.n	e0f6 <_printf_float+0xba>
    e482:	3501      	adds	r5, #1
    e484:	e7e1      	b.n	e44a <_printf_float+0x40e>
    e486:	002a      	movs	r2, r5
    e488:	e7ea      	b.n	e460 <_printf_float+0x424>
    e48a:	0022      	movs	r2, r4
    e48c:	2301      	movs	r3, #1
    e48e:	3219      	adds	r2, #25
    e490:	990a      	ldr	r1, [sp, #40]	; 0x28
    e492:	9809      	ldr	r0, [sp, #36]	; 0x24
    e494:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e496:	47b0      	blx	r6
    e498:	1c43      	adds	r3, r0, #1
    e49a:	d100      	bne.n	e49e <_printf_float+0x462>
    e49c:	e62b      	b.n	e0f6 <_printf_float+0xba>
    e49e:	3501      	adds	r5, #1
    e4a0:	68e3      	ldr	r3, [r4, #12]
    e4a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e4a4:	1a9b      	subs	r3, r3, r2
    e4a6:	429d      	cmp	r5, r3
    e4a8:	dbef      	blt.n	e48a <_printf_float+0x44e>
    e4aa:	e6fb      	b.n	e2a4 <_printf_float+0x268>
    e4ac:	0032      	movs	r2, r6
    e4ae:	002b      	movs	r3, r5
    e4b0:	0030      	movs	r0, r6
    e4b2:	0029      	movs	r1, r5
    e4b4:	f004 f862 	bl	1257c <__aeabi_dcmpun>
    e4b8:	2800      	cmp	r0, #0
    e4ba:	d100      	bne.n	e4be <_printf_float+0x482>
    e4bc:	e621      	b.n	e102 <_printf_float+0xc6>
    e4be:	4d03      	ldr	r5, [pc, #12]	; (e4cc <_printf_float+0x490>)
    e4c0:	2f47      	cmp	r7, #71	; 0x47
    e4c2:	d900      	bls.n	e4c6 <_printf_float+0x48a>
    e4c4:	e605      	b.n	e0d2 <_printf_float+0x96>
    e4c6:	4d02      	ldr	r5, [pc, #8]	; (e4d0 <_printf_float+0x494>)
    e4c8:	e603      	b.n	e0d2 <_printf_float+0x96>
    e4ca:	46c0      	nop			; (mov r8, r8)
    e4cc:	0001414e 	.word	0x0001414e
    e4d0:	0001414a 	.word	0x0001414a

0000e4d4 <_printf_common>:
    e4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e4d6:	0015      	movs	r5, r2
    e4d8:	9301      	str	r3, [sp, #4]
    e4da:	688a      	ldr	r2, [r1, #8]
    e4dc:	690b      	ldr	r3, [r1, #16]
    e4de:	9000      	str	r0, [sp, #0]
    e4e0:	000c      	movs	r4, r1
    e4e2:	4293      	cmp	r3, r2
    e4e4:	da00      	bge.n	e4e8 <_printf_common+0x14>
    e4e6:	0013      	movs	r3, r2
    e4e8:	0022      	movs	r2, r4
    e4ea:	602b      	str	r3, [r5, #0]
    e4ec:	3243      	adds	r2, #67	; 0x43
    e4ee:	7812      	ldrb	r2, [r2, #0]
    e4f0:	2a00      	cmp	r2, #0
    e4f2:	d001      	beq.n	e4f8 <_printf_common+0x24>
    e4f4:	3301      	adds	r3, #1
    e4f6:	602b      	str	r3, [r5, #0]
    e4f8:	6823      	ldr	r3, [r4, #0]
    e4fa:	069b      	lsls	r3, r3, #26
    e4fc:	d502      	bpl.n	e504 <_printf_common+0x30>
    e4fe:	682b      	ldr	r3, [r5, #0]
    e500:	3302      	adds	r3, #2
    e502:	602b      	str	r3, [r5, #0]
    e504:	2706      	movs	r7, #6
    e506:	6823      	ldr	r3, [r4, #0]
    e508:	401f      	ands	r7, r3
    e50a:	d027      	beq.n	e55c <_printf_common+0x88>
    e50c:	0023      	movs	r3, r4
    e50e:	3343      	adds	r3, #67	; 0x43
    e510:	781b      	ldrb	r3, [r3, #0]
    e512:	1e5a      	subs	r2, r3, #1
    e514:	4193      	sbcs	r3, r2
    e516:	6822      	ldr	r2, [r4, #0]
    e518:	0692      	lsls	r2, r2, #26
    e51a:	d430      	bmi.n	e57e <_printf_common+0xaa>
    e51c:	0022      	movs	r2, r4
    e51e:	9901      	ldr	r1, [sp, #4]
    e520:	3243      	adds	r2, #67	; 0x43
    e522:	9800      	ldr	r0, [sp, #0]
    e524:	9e08      	ldr	r6, [sp, #32]
    e526:	47b0      	blx	r6
    e528:	1c43      	adds	r3, r0, #1
    e52a:	d025      	beq.n	e578 <_printf_common+0xa4>
    e52c:	2306      	movs	r3, #6
    e52e:	6820      	ldr	r0, [r4, #0]
    e530:	682a      	ldr	r2, [r5, #0]
    e532:	68e1      	ldr	r1, [r4, #12]
    e534:	4003      	ands	r3, r0
    e536:	2500      	movs	r5, #0
    e538:	2b04      	cmp	r3, #4
    e53a:	d103      	bne.n	e544 <_printf_common+0x70>
    e53c:	1a8d      	subs	r5, r1, r2
    e53e:	43eb      	mvns	r3, r5
    e540:	17db      	asrs	r3, r3, #31
    e542:	401d      	ands	r5, r3
    e544:	68a3      	ldr	r3, [r4, #8]
    e546:	6922      	ldr	r2, [r4, #16]
    e548:	4293      	cmp	r3, r2
    e54a:	dd01      	ble.n	e550 <_printf_common+0x7c>
    e54c:	1a9b      	subs	r3, r3, r2
    e54e:	18ed      	adds	r5, r5, r3
    e550:	2700      	movs	r7, #0
    e552:	42bd      	cmp	r5, r7
    e554:	d120      	bne.n	e598 <_printf_common+0xc4>
    e556:	2000      	movs	r0, #0
    e558:	e010      	b.n	e57c <_printf_common+0xa8>
    e55a:	3701      	adds	r7, #1
    e55c:	68e3      	ldr	r3, [r4, #12]
    e55e:	682a      	ldr	r2, [r5, #0]
    e560:	1a9b      	subs	r3, r3, r2
    e562:	429f      	cmp	r7, r3
    e564:	dad2      	bge.n	e50c <_printf_common+0x38>
    e566:	0022      	movs	r2, r4
    e568:	2301      	movs	r3, #1
    e56a:	3219      	adds	r2, #25
    e56c:	9901      	ldr	r1, [sp, #4]
    e56e:	9800      	ldr	r0, [sp, #0]
    e570:	9e08      	ldr	r6, [sp, #32]
    e572:	47b0      	blx	r6
    e574:	1c43      	adds	r3, r0, #1
    e576:	d1f0      	bne.n	e55a <_printf_common+0x86>
    e578:	2001      	movs	r0, #1
    e57a:	4240      	negs	r0, r0
    e57c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e57e:	2030      	movs	r0, #48	; 0x30
    e580:	18e1      	adds	r1, r4, r3
    e582:	3143      	adds	r1, #67	; 0x43
    e584:	7008      	strb	r0, [r1, #0]
    e586:	0021      	movs	r1, r4
    e588:	1c5a      	adds	r2, r3, #1
    e58a:	3145      	adds	r1, #69	; 0x45
    e58c:	7809      	ldrb	r1, [r1, #0]
    e58e:	18a2      	adds	r2, r4, r2
    e590:	3243      	adds	r2, #67	; 0x43
    e592:	3302      	adds	r3, #2
    e594:	7011      	strb	r1, [r2, #0]
    e596:	e7c1      	b.n	e51c <_printf_common+0x48>
    e598:	0022      	movs	r2, r4
    e59a:	2301      	movs	r3, #1
    e59c:	321a      	adds	r2, #26
    e59e:	9901      	ldr	r1, [sp, #4]
    e5a0:	9800      	ldr	r0, [sp, #0]
    e5a2:	9e08      	ldr	r6, [sp, #32]
    e5a4:	47b0      	blx	r6
    e5a6:	1c43      	adds	r3, r0, #1
    e5a8:	d0e6      	beq.n	e578 <_printf_common+0xa4>
    e5aa:	3701      	adds	r7, #1
    e5ac:	e7d1      	b.n	e552 <_printf_common+0x7e>
	...

0000e5b0 <_printf_i>:
    e5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5b2:	b08b      	sub	sp, #44	; 0x2c
    e5b4:	9206      	str	r2, [sp, #24]
    e5b6:	000a      	movs	r2, r1
    e5b8:	3243      	adds	r2, #67	; 0x43
    e5ba:	9307      	str	r3, [sp, #28]
    e5bc:	9005      	str	r0, [sp, #20]
    e5be:	9204      	str	r2, [sp, #16]
    e5c0:	7e0a      	ldrb	r2, [r1, #24]
    e5c2:	000c      	movs	r4, r1
    e5c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e5c6:	2a6e      	cmp	r2, #110	; 0x6e
    e5c8:	d100      	bne.n	e5cc <_printf_i+0x1c>
    e5ca:	e08f      	b.n	e6ec <_printf_i+0x13c>
    e5cc:	d817      	bhi.n	e5fe <_printf_i+0x4e>
    e5ce:	2a63      	cmp	r2, #99	; 0x63
    e5d0:	d02c      	beq.n	e62c <_printf_i+0x7c>
    e5d2:	d808      	bhi.n	e5e6 <_printf_i+0x36>
    e5d4:	2a00      	cmp	r2, #0
    e5d6:	d100      	bne.n	e5da <_printf_i+0x2a>
    e5d8:	e099      	b.n	e70e <_printf_i+0x15e>
    e5da:	2a58      	cmp	r2, #88	; 0x58
    e5dc:	d054      	beq.n	e688 <_printf_i+0xd8>
    e5de:	0026      	movs	r6, r4
    e5e0:	3642      	adds	r6, #66	; 0x42
    e5e2:	7032      	strb	r2, [r6, #0]
    e5e4:	e029      	b.n	e63a <_printf_i+0x8a>
    e5e6:	2a64      	cmp	r2, #100	; 0x64
    e5e8:	d001      	beq.n	e5ee <_printf_i+0x3e>
    e5ea:	2a69      	cmp	r2, #105	; 0x69
    e5ec:	d1f7      	bne.n	e5de <_printf_i+0x2e>
    e5ee:	6821      	ldr	r1, [r4, #0]
    e5f0:	681a      	ldr	r2, [r3, #0]
    e5f2:	0608      	lsls	r0, r1, #24
    e5f4:	d523      	bpl.n	e63e <_printf_i+0x8e>
    e5f6:	1d11      	adds	r1, r2, #4
    e5f8:	6019      	str	r1, [r3, #0]
    e5fa:	6815      	ldr	r5, [r2, #0]
    e5fc:	e025      	b.n	e64a <_printf_i+0x9a>
    e5fe:	2a73      	cmp	r2, #115	; 0x73
    e600:	d100      	bne.n	e604 <_printf_i+0x54>
    e602:	e088      	b.n	e716 <_printf_i+0x166>
    e604:	d808      	bhi.n	e618 <_printf_i+0x68>
    e606:	2a6f      	cmp	r2, #111	; 0x6f
    e608:	d029      	beq.n	e65e <_printf_i+0xae>
    e60a:	2a70      	cmp	r2, #112	; 0x70
    e60c:	d1e7      	bne.n	e5de <_printf_i+0x2e>
    e60e:	2220      	movs	r2, #32
    e610:	6809      	ldr	r1, [r1, #0]
    e612:	430a      	orrs	r2, r1
    e614:	6022      	str	r2, [r4, #0]
    e616:	e003      	b.n	e620 <_printf_i+0x70>
    e618:	2a75      	cmp	r2, #117	; 0x75
    e61a:	d020      	beq.n	e65e <_printf_i+0xae>
    e61c:	2a78      	cmp	r2, #120	; 0x78
    e61e:	d1de      	bne.n	e5de <_printf_i+0x2e>
    e620:	0022      	movs	r2, r4
    e622:	2178      	movs	r1, #120	; 0x78
    e624:	3245      	adds	r2, #69	; 0x45
    e626:	7011      	strb	r1, [r2, #0]
    e628:	4a6c      	ldr	r2, [pc, #432]	; (e7dc <_printf_i+0x22c>)
    e62a:	e030      	b.n	e68e <_printf_i+0xde>
    e62c:	000e      	movs	r6, r1
    e62e:	681a      	ldr	r2, [r3, #0]
    e630:	3642      	adds	r6, #66	; 0x42
    e632:	1d11      	adds	r1, r2, #4
    e634:	6019      	str	r1, [r3, #0]
    e636:	6813      	ldr	r3, [r2, #0]
    e638:	7033      	strb	r3, [r6, #0]
    e63a:	2301      	movs	r3, #1
    e63c:	e079      	b.n	e732 <_printf_i+0x182>
    e63e:	0649      	lsls	r1, r1, #25
    e640:	d5d9      	bpl.n	e5f6 <_printf_i+0x46>
    e642:	1d11      	adds	r1, r2, #4
    e644:	6019      	str	r1, [r3, #0]
    e646:	2300      	movs	r3, #0
    e648:	5ed5      	ldrsh	r5, [r2, r3]
    e64a:	2d00      	cmp	r5, #0
    e64c:	da03      	bge.n	e656 <_printf_i+0xa6>
    e64e:	232d      	movs	r3, #45	; 0x2d
    e650:	9a04      	ldr	r2, [sp, #16]
    e652:	426d      	negs	r5, r5
    e654:	7013      	strb	r3, [r2, #0]
    e656:	4b62      	ldr	r3, [pc, #392]	; (e7e0 <_printf_i+0x230>)
    e658:	270a      	movs	r7, #10
    e65a:	9303      	str	r3, [sp, #12]
    e65c:	e02f      	b.n	e6be <_printf_i+0x10e>
    e65e:	6820      	ldr	r0, [r4, #0]
    e660:	6819      	ldr	r1, [r3, #0]
    e662:	0605      	lsls	r5, r0, #24
    e664:	d503      	bpl.n	e66e <_printf_i+0xbe>
    e666:	1d08      	adds	r0, r1, #4
    e668:	6018      	str	r0, [r3, #0]
    e66a:	680d      	ldr	r5, [r1, #0]
    e66c:	e005      	b.n	e67a <_printf_i+0xca>
    e66e:	0640      	lsls	r0, r0, #25
    e670:	d5f9      	bpl.n	e666 <_printf_i+0xb6>
    e672:	680d      	ldr	r5, [r1, #0]
    e674:	1d08      	adds	r0, r1, #4
    e676:	6018      	str	r0, [r3, #0]
    e678:	b2ad      	uxth	r5, r5
    e67a:	4b59      	ldr	r3, [pc, #356]	; (e7e0 <_printf_i+0x230>)
    e67c:	2708      	movs	r7, #8
    e67e:	9303      	str	r3, [sp, #12]
    e680:	2a6f      	cmp	r2, #111	; 0x6f
    e682:	d018      	beq.n	e6b6 <_printf_i+0x106>
    e684:	270a      	movs	r7, #10
    e686:	e016      	b.n	e6b6 <_printf_i+0x106>
    e688:	3145      	adds	r1, #69	; 0x45
    e68a:	700a      	strb	r2, [r1, #0]
    e68c:	4a54      	ldr	r2, [pc, #336]	; (e7e0 <_printf_i+0x230>)
    e68e:	9203      	str	r2, [sp, #12]
    e690:	681a      	ldr	r2, [r3, #0]
    e692:	6821      	ldr	r1, [r4, #0]
    e694:	1d10      	adds	r0, r2, #4
    e696:	6018      	str	r0, [r3, #0]
    e698:	6815      	ldr	r5, [r2, #0]
    e69a:	0608      	lsls	r0, r1, #24
    e69c:	d522      	bpl.n	e6e4 <_printf_i+0x134>
    e69e:	07cb      	lsls	r3, r1, #31
    e6a0:	d502      	bpl.n	e6a8 <_printf_i+0xf8>
    e6a2:	2320      	movs	r3, #32
    e6a4:	4319      	orrs	r1, r3
    e6a6:	6021      	str	r1, [r4, #0]
    e6a8:	2710      	movs	r7, #16
    e6aa:	2d00      	cmp	r5, #0
    e6ac:	d103      	bne.n	e6b6 <_printf_i+0x106>
    e6ae:	2320      	movs	r3, #32
    e6b0:	6822      	ldr	r2, [r4, #0]
    e6b2:	439a      	bics	r2, r3
    e6b4:	6022      	str	r2, [r4, #0]
    e6b6:	0023      	movs	r3, r4
    e6b8:	2200      	movs	r2, #0
    e6ba:	3343      	adds	r3, #67	; 0x43
    e6bc:	701a      	strb	r2, [r3, #0]
    e6be:	6863      	ldr	r3, [r4, #4]
    e6c0:	60a3      	str	r3, [r4, #8]
    e6c2:	2b00      	cmp	r3, #0
    e6c4:	db5c      	blt.n	e780 <_printf_i+0x1d0>
    e6c6:	2204      	movs	r2, #4
    e6c8:	6821      	ldr	r1, [r4, #0]
    e6ca:	4391      	bics	r1, r2
    e6cc:	6021      	str	r1, [r4, #0]
    e6ce:	2d00      	cmp	r5, #0
    e6d0:	d158      	bne.n	e784 <_printf_i+0x1d4>
    e6d2:	9e04      	ldr	r6, [sp, #16]
    e6d4:	2b00      	cmp	r3, #0
    e6d6:	d064      	beq.n	e7a2 <_printf_i+0x1f2>
    e6d8:	0026      	movs	r6, r4
    e6da:	9b03      	ldr	r3, [sp, #12]
    e6dc:	3642      	adds	r6, #66	; 0x42
    e6de:	781b      	ldrb	r3, [r3, #0]
    e6e0:	7033      	strb	r3, [r6, #0]
    e6e2:	e05e      	b.n	e7a2 <_printf_i+0x1f2>
    e6e4:	0648      	lsls	r0, r1, #25
    e6e6:	d5da      	bpl.n	e69e <_printf_i+0xee>
    e6e8:	b2ad      	uxth	r5, r5
    e6ea:	e7d8      	b.n	e69e <_printf_i+0xee>
    e6ec:	6809      	ldr	r1, [r1, #0]
    e6ee:	681a      	ldr	r2, [r3, #0]
    e6f0:	0608      	lsls	r0, r1, #24
    e6f2:	d505      	bpl.n	e700 <_printf_i+0x150>
    e6f4:	1d11      	adds	r1, r2, #4
    e6f6:	6019      	str	r1, [r3, #0]
    e6f8:	6813      	ldr	r3, [r2, #0]
    e6fa:	6962      	ldr	r2, [r4, #20]
    e6fc:	601a      	str	r2, [r3, #0]
    e6fe:	e006      	b.n	e70e <_printf_i+0x15e>
    e700:	0649      	lsls	r1, r1, #25
    e702:	d5f7      	bpl.n	e6f4 <_printf_i+0x144>
    e704:	1d11      	adds	r1, r2, #4
    e706:	6019      	str	r1, [r3, #0]
    e708:	6813      	ldr	r3, [r2, #0]
    e70a:	8aa2      	ldrh	r2, [r4, #20]
    e70c:	801a      	strh	r2, [r3, #0]
    e70e:	2300      	movs	r3, #0
    e710:	9e04      	ldr	r6, [sp, #16]
    e712:	6123      	str	r3, [r4, #16]
    e714:	e054      	b.n	e7c0 <_printf_i+0x210>
    e716:	681a      	ldr	r2, [r3, #0]
    e718:	1d11      	adds	r1, r2, #4
    e71a:	6019      	str	r1, [r3, #0]
    e71c:	6816      	ldr	r6, [r2, #0]
    e71e:	2100      	movs	r1, #0
    e720:	6862      	ldr	r2, [r4, #4]
    e722:	0030      	movs	r0, r6
    e724:	f001 fb32 	bl	fd8c <memchr>
    e728:	2800      	cmp	r0, #0
    e72a:	d001      	beq.n	e730 <_printf_i+0x180>
    e72c:	1b80      	subs	r0, r0, r6
    e72e:	6060      	str	r0, [r4, #4]
    e730:	6863      	ldr	r3, [r4, #4]
    e732:	6123      	str	r3, [r4, #16]
    e734:	2300      	movs	r3, #0
    e736:	9a04      	ldr	r2, [sp, #16]
    e738:	7013      	strb	r3, [r2, #0]
    e73a:	e041      	b.n	e7c0 <_printf_i+0x210>
    e73c:	6923      	ldr	r3, [r4, #16]
    e73e:	0032      	movs	r2, r6
    e740:	9906      	ldr	r1, [sp, #24]
    e742:	9805      	ldr	r0, [sp, #20]
    e744:	9d07      	ldr	r5, [sp, #28]
    e746:	47a8      	blx	r5
    e748:	1c43      	adds	r3, r0, #1
    e74a:	d043      	beq.n	e7d4 <_printf_i+0x224>
    e74c:	6823      	ldr	r3, [r4, #0]
    e74e:	2500      	movs	r5, #0
    e750:	079b      	lsls	r3, r3, #30
    e752:	d40f      	bmi.n	e774 <_printf_i+0x1c4>
    e754:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e756:	68e0      	ldr	r0, [r4, #12]
    e758:	4298      	cmp	r0, r3
    e75a:	da3d      	bge.n	e7d8 <_printf_i+0x228>
    e75c:	0018      	movs	r0, r3
    e75e:	e03b      	b.n	e7d8 <_printf_i+0x228>
    e760:	0022      	movs	r2, r4
    e762:	2301      	movs	r3, #1
    e764:	3219      	adds	r2, #25
    e766:	9906      	ldr	r1, [sp, #24]
    e768:	9805      	ldr	r0, [sp, #20]
    e76a:	9e07      	ldr	r6, [sp, #28]
    e76c:	47b0      	blx	r6
    e76e:	1c43      	adds	r3, r0, #1
    e770:	d030      	beq.n	e7d4 <_printf_i+0x224>
    e772:	3501      	adds	r5, #1
    e774:	68e3      	ldr	r3, [r4, #12]
    e776:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e778:	1a9b      	subs	r3, r3, r2
    e77a:	429d      	cmp	r5, r3
    e77c:	dbf0      	blt.n	e760 <_printf_i+0x1b0>
    e77e:	e7e9      	b.n	e754 <_printf_i+0x1a4>
    e780:	2d00      	cmp	r5, #0
    e782:	d0a9      	beq.n	e6d8 <_printf_i+0x128>
    e784:	9e04      	ldr	r6, [sp, #16]
    e786:	0028      	movs	r0, r5
    e788:	0039      	movs	r1, r7
    e78a:	f002 f8c5 	bl	10918 <__aeabi_uidivmod>
    e78e:	9b03      	ldr	r3, [sp, #12]
    e790:	3e01      	subs	r6, #1
    e792:	5c5b      	ldrb	r3, [r3, r1]
    e794:	0028      	movs	r0, r5
    e796:	7033      	strb	r3, [r6, #0]
    e798:	0039      	movs	r1, r7
    e79a:	f002 f837 	bl	1080c <__udivsi3>
    e79e:	1e05      	subs	r5, r0, #0
    e7a0:	d1f1      	bne.n	e786 <_printf_i+0x1d6>
    e7a2:	2f08      	cmp	r7, #8
    e7a4:	d109      	bne.n	e7ba <_printf_i+0x20a>
    e7a6:	6823      	ldr	r3, [r4, #0]
    e7a8:	07db      	lsls	r3, r3, #31
    e7aa:	d506      	bpl.n	e7ba <_printf_i+0x20a>
    e7ac:	6863      	ldr	r3, [r4, #4]
    e7ae:	6922      	ldr	r2, [r4, #16]
    e7b0:	4293      	cmp	r3, r2
    e7b2:	dc02      	bgt.n	e7ba <_printf_i+0x20a>
    e7b4:	2330      	movs	r3, #48	; 0x30
    e7b6:	3e01      	subs	r6, #1
    e7b8:	7033      	strb	r3, [r6, #0]
    e7ba:	9b04      	ldr	r3, [sp, #16]
    e7bc:	1b9b      	subs	r3, r3, r6
    e7be:	6123      	str	r3, [r4, #16]
    e7c0:	9b07      	ldr	r3, [sp, #28]
    e7c2:	aa09      	add	r2, sp, #36	; 0x24
    e7c4:	9300      	str	r3, [sp, #0]
    e7c6:	0021      	movs	r1, r4
    e7c8:	9b06      	ldr	r3, [sp, #24]
    e7ca:	9805      	ldr	r0, [sp, #20]
    e7cc:	f7ff fe82 	bl	e4d4 <_printf_common>
    e7d0:	1c43      	adds	r3, r0, #1
    e7d2:	d1b3      	bne.n	e73c <_printf_i+0x18c>
    e7d4:	2001      	movs	r0, #1
    e7d6:	4240      	negs	r0, r0
    e7d8:	b00b      	add	sp, #44	; 0x2c
    e7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7dc:	00014165 	.word	0x00014165
    e7e0:	00014154 	.word	0x00014154

0000e7e4 <iprintf>:
    e7e4:	b40f      	push	{r0, r1, r2, r3}
    e7e6:	4b0b      	ldr	r3, [pc, #44]	; (e814 <iprintf+0x30>)
    e7e8:	b513      	push	{r0, r1, r4, lr}
    e7ea:	681c      	ldr	r4, [r3, #0]
    e7ec:	2c00      	cmp	r4, #0
    e7ee:	d005      	beq.n	e7fc <iprintf+0x18>
    e7f0:	69a3      	ldr	r3, [r4, #24]
    e7f2:	2b00      	cmp	r3, #0
    e7f4:	d102      	bne.n	e7fc <iprintf+0x18>
    e7f6:	0020      	movs	r0, r4
    e7f8:	f001 f9ba 	bl	fb70 <__sinit>
    e7fc:	ab05      	add	r3, sp, #20
    e7fe:	9a04      	ldr	r2, [sp, #16]
    e800:	68a1      	ldr	r1, [r4, #8]
    e802:	0020      	movs	r0, r4
    e804:	9301      	str	r3, [sp, #4]
    e806:	f001 fde7 	bl	103d8 <_vfiprintf_r>
    e80a:	bc16      	pop	{r1, r2, r4}
    e80c:	bc08      	pop	{r3}
    e80e:	b004      	add	sp, #16
    e810:	4718      	bx	r3
    e812:	46c0      	nop			; (mov r8, r8)
    e814:	20000014 	.word	0x20000014

0000e818 <putchar>:
    e818:	4b08      	ldr	r3, [pc, #32]	; (e83c <putchar+0x24>)
    e81a:	b570      	push	{r4, r5, r6, lr}
    e81c:	681c      	ldr	r4, [r3, #0]
    e81e:	0005      	movs	r5, r0
    e820:	2c00      	cmp	r4, #0
    e822:	d005      	beq.n	e830 <putchar+0x18>
    e824:	69a3      	ldr	r3, [r4, #24]
    e826:	2b00      	cmp	r3, #0
    e828:	d102      	bne.n	e830 <putchar+0x18>
    e82a:	0020      	movs	r0, r4
    e82c:	f001 f9a0 	bl	fb70 <__sinit>
    e830:	0029      	movs	r1, r5
    e832:	68a2      	ldr	r2, [r4, #8]
    e834:	0020      	movs	r0, r4
    e836:	f001 feeb 	bl	10610 <_putc_r>
    e83a:	bd70      	pop	{r4, r5, r6, pc}
    e83c:	20000014 	.word	0x20000014

0000e840 <_puts_r>:
    e840:	b570      	push	{r4, r5, r6, lr}
    e842:	0005      	movs	r5, r0
    e844:	000e      	movs	r6, r1
    e846:	2800      	cmp	r0, #0
    e848:	d004      	beq.n	e854 <_puts_r+0x14>
    e84a:	6983      	ldr	r3, [r0, #24]
    e84c:	2b00      	cmp	r3, #0
    e84e:	d101      	bne.n	e854 <_puts_r+0x14>
    e850:	f001 f98e 	bl	fb70 <__sinit>
    e854:	69ab      	ldr	r3, [r5, #24]
    e856:	68ac      	ldr	r4, [r5, #8]
    e858:	2b00      	cmp	r3, #0
    e85a:	d102      	bne.n	e862 <_puts_r+0x22>
    e85c:	0028      	movs	r0, r5
    e85e:	f001 f987 	bl	fb70 <__sinit>
    e862:	4b24      	ldr	r3, [pc, #144]	; (e8f4 <_puts_r+0xb4>)
    e864:	429c      	cmp	r4, r3
    e866:	d10f      	bne.n	e888 <_puts_r+0x48>
    e868:	686c      	ldr	r4, [r5, #4]
    e86a:	89a3      	ldrh	r3, [r4, #12]
    e86c:	071b      	lsls	r3, r3, #28
    e86e:	d502      	bpl.n	e876 <_puts_r+0x36>
    e870:	6923      	ldr	r3, [r4, #16]
    e872:	2b00      	cmp	r3, #0
    e874:	d120      	bne.n	e8b8 <_puts_r+0x78>
    e876:	0021      	movs	r1, r4
    e878:	0028      	movs	r0, r5
    e87a:	f000 f99f 	bl	ebbc <__swsetup_r>
    e87e:	2800      	cmp	r0, #0
    e880:	d01a      	beq.n	e8b8 <_puts_r+0x78>
    e882:	2001      	movs	r0, #1
    e884:	4240      	negs	r0, r0
    e886:	bd70      	pop	{r4, r5, r6, pc}
    e888:	4b1b      	ldr	r3, [pc, #108]	; (e8f8 <_puts_r+0xb8>)
    e88a:	429c      	cmp	r4, r3
    e88c:	d101      	bne.n	e892 <_puts_r+0x52>
    e88e:	68ac      	ldr	r4, [r5, #8]
    e890:	e7eb      	b.n	e86a <_puts_r+0x2a>
    e892:	4b1a      	ldr	r3, [pc, #104]	; (e8fc <_puts_r+0xbc>)
    e894:	429c      	cmp	r4, r3
    e896:	d1e8      	bne.n	e86a <_puts_r+0x2a>
    e898:	68ec      	ldr	r4, [r5, #12]
    e89a:	e7e6      	b.n	e86a <_puts_r+0x2a>
    e89c:	3b01      	subs	r3, #1
    e89e:	3601      	adds	r6, #1
    e8a0:	60a3      	str	r3, [r4, #8]
    e8a2:	2b00      	cmp	r3, #0
    e8a4:	da04      	bge.n	e8b0 <_puts_r+0x70>
    e8a6:	69a2      	ldr	r2, [r4, #24]
    e8a8:	4293      	cmp	r3, r2
    e8aa:	db16      	blt.n	e8da <_puts_r+0x9a>
    e8ac:	290a      	cmp	r1, #10
    e8ae:	d014      	beq.n	e8da <_puts_r+0x9a>
    e8b0:	6823      	ldr	r3, [r4, #0]
    e8b2:	1c5a      	adds	r2, r3, #1
    e8b4:	6022      	str	r2, [r4, #0]
    e8b6:	7019      	strb	r1, [r3, #0]
    e8b8:	7831      	ldrb	r1, [r6, #0]
    e8ba:	68a3      	ldr	r3, [r4, #8]
    e8bc:	2900      	cmp	r1, #0
    e8be:	d1ed      	bne.n	e89c <_puts_r+0x5c>
    e8c0:	3b01      	subs	r3, #1
    e8c2:	60a3      	str	r3, [r4, #8]
    e8c4:	2b00      	cmp	r3, #0
    e8c6:	da0f      	bge.n	e8e8 <_puts_r+0xa8>
    e8c8:	0022      	movs	r2, r4
    e8ca:	310a      	adds	r1, #10
    e8cc:	0028      	movs	r0, r5
    e8ce:	f000 f913 	bl	eaf8 <__swbuf_r>
    e8d2:	1c43      	adds	r3, r0, #1
    e8d4:	d0d5      	beq.n	e882 <_puts_r+0x42>
    e8d6:	200a      	movs	r0, #10
    e8d8:	e7d5      	b.n	e886 <_puts_r+0x46>
    e8da:	0022      	movs	r2, r4
    e8dc:	0028      	movs	r0, r5
    e8de:	f000 f90b 	bl	eaf8 <__swbuf_r>
    e8e2:	1c43      	adds	r3, r0, #1
    e8e4:	d1e8      	bne.n	e8b8 <_puts_r+0x78>
    e8e6:	e7cc      	b.n	e882 <_puts_r+0x42>
    e8e8:	200a      	movs	r0, #10
    e8ea:	6823      	ldr	r3, [r4, #0]
    e8ec:	1c5a      	adds	r2, r3, #1
    e8ee:	6022      	str	r2, [r4, #0]
    e8f0:	7018      	strb	r0, [r3, #0]
    e8f2:	e7c8      	b.n	e886 <_puts_r+0x46>
    e8f4:	000142a4 	.word	0x000142a4
    e8f8:	000142c4 	.word	0x000142c4
    e8fc:	00014284 	.word	0x00014284

0000e900 <puts>:
    e900:	b510      	push	{r4, lr}
    e902:	4b03      	ldr	r3, [pc, #12]	; (e910 <puts+0x10>)
    e904:	0001      	movs	r1, r0
    e906:	6818      	ldr	r0, [r3, #0]
    e908:	f7ff ff9a 	bl	e840 <_puts_r>
    e90c:	bd10      	pop	{r4, pc}
    e90e:	46c0      	nop			; (mov r8, r8)
    e910:	20000014 	.word	0x20000014

0000e914 <_sbrk_r>:
    e914:	2300      	movs	r3, #0
    e916:	b570      	push	{r4, r5, r6, lr}
    e918:	4c06      	ldr	r4, [pc, #24]	; (e934 <_sbrk_r+0x20>)
    e91a:	0005      	movs	r5, r0
    e91c:	0008      	movs	r0, r1
    e91e:	6023      	str	r3, [r4, #0]
    e920:	f7fe f8d4 	bl	cacc <_sbrk>
    e924:	1c43      	adds	r3, r0, #1
    e926:	d103      	bne.n	e930 <_sbrk_r+0x1c>
    e928:	6823      	ldr	r3, [r4, #0]
    e92a:	2b00      	cmp	r3, #0
    e92c:	d000      	beq.n	e930 <_sbrk_r+0x1c>
    e92e:	602b      	str	r3, [r5, #0]
    e930:	bd70      	pop	{r4, r5, r6, pc}
    e932:	46c0      	nop			; (mov r8, r8)
    e934:	20000ac4 	.word	0x20000ac4

0000e938 <setbuf>:
    e938:	424a      	negs	r2, r1
    e93a:	414a      	adcs	r2, r1
    e93c:	2380      	movs	r3, #128	; 0x80
    e93e:	b510      	push	{r4, lr}
    e940:	0052      	lsls	r2, r2, #1
    e942:	00db      	lsls	r3, r3, #3
    e944:	f000 f802 	bl	e94c <setvbuf>
    e948:	bd10      	pop	{r4, pc}
	...

0000e94c <setvbuf>:
    e94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e94e:	001d      	movs	r5, r3
    e950:	4b4f      	ldr	r3, [pc, #316]	; (ea90 <setvbuf+0x144>)
    e952:	b085      	sub	sp, #20
    e954:	681e      	ldr	r6, [r3, #0]
    e956:	0004      	movs	r4, r0
    e958:	000f      	movs	r7, r1
    e95a:	9200      	str	r2, [sp, #0]
    e95c:	2e00      	cmp	r6, #0
    e95e:	d005      	beq.n	e96c <setvbuf+0x20>
    e960:	69b3      	ldr	r3, [r6, #24]
    e962:	2b00      	cmp	r3, #0
    e964:	d102      	bne.n	e96c <setvbuf+0x20>
    e966:	0030      	movs	r0, r6
    e968:	f001 f902 	bl	fb70 <__sinit>
    e96c:	4b49      	ldr	r3, [pc, #292]	; (ea94 <setvbuf+0x148>)
    e96e:	429c      	cmp	r4, r3
    e970:	d150      	bne.n	ea14 <setvbuf+0xc8>
    e972:	6874      	ldr	r4, [r6, #4]
    e974:	9b00      	ldr	r3, [sp, #0]
    e976:	2b02      	cmp	r3, #2
    e978:	d005      	beq.n	e986 <setvbuf+0x3a>
    e97a:	2b01      	cmp	r3, #1
    e97c:	d900      	bls.n	e980 <setvbuf+0x34>
    e97e:	e084      	b.n	ea8a <setvbuf+0x13e>
    e980:	2d00      	cmp	r5, #0
    e982:	da00      	bge.n	e986 <setvbuf+0x3a>
    e984:	e081      	b.n	ea8a <setvbuf+0x13e>
    e986:	0021      	movs	r1, r4
    e988:	0030      	movs	r0, r6
    e98a:	f001 f883 	bl	fa94 <_fflush_r>
    e98e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e990:	2900      	cmp	r1, #0
    e992:	d008      	beq.n	e9a6 <setvbuf+0x5a>
    e994:	0023      	movs	r3, r4
    e996:	3344      	adds	r3, #68	; 0x44
    e998:	4299      	cmp	r1, r3
    e99a:	d002      	beq.n	e9a2 <setvbuf+0x56>
    e99c:	0030      	movs	r0, r6
    e99e:	f7ff fa09 	bl	ddb4 <_free_r>
    e9a2:	2300      	movs	r3, #0
    e9a4:	6363      	str	r3, [r4, #52]	; 0x34
    e9a6:	2300      	movs	r3, #0
    e9a8:	61a3      	str	r3, [r4, #24]
    e9aa:	6063      	str	r3, [r4, #4]
    e9ac:	89a3      	ldrh	r3, [r4, #12]
    e9ae:	061b      	lsls	r3, r3, #24
    e9b0:	d503      	bpl.n	e9ba <setvbuf+0x6e>
    e9b2:	6921      	ldr	r1, [r4, #16]
    e9b4:	0030      	movs	r0, r6
    e9b6:	f7ff f9fd 	bl	ddb4 <_free_r>
    e9ba:	89a3      	ldrh	r3, [r4, #12]
    e9bc:	4a36      	ldr	r2, [pc, #216]	; (ea98 <setvbuf+0x14c>)
    e9be:	4013      	ands	r3, r2
    e9c0:	81a3      	strh	r3, [r4, #12]
    e9c2:	9b00      	ldr	r3, [sp, #0]
    e9c4:	2b02      	cmp	r3, #2
    e9c6:	d05a      	beq.n	ea7e <setvbuf+0x132>
    e9c8:	ab03      	add	r3, sp, #12
    e9ca:	aa02      	add	r2, sp, #8
    e9cc:	0021      	movs	r1, r4
    e9ce:	0030      	movs	r0, r6
    e9d0:	f001 f970 	bl	fcb4 <__swhatbuf_r>
    e9d4:	89a3      	ldrh	r3, [r4, #12]
    e9d6:	4318      	orrs	r0, r3
    e9d8:	81a0      	strh	r0, [r4, #12]
    e9da:	2d00      	cmp	r5, #0
    e9dc:	d124      	bne.n	ea28 <setvbuf+0xdc>
    e9de:	9d02      	ldr	r5, [sp, #8]
    e9e0:	0028      	movs	r0, r5
    e9e2:	f7ff f9a7 	bl	dd34 <malloc>
    e9e6:	9501      	str	r5, [sp, #4]
    e9e8:	1e07      	subs	r7, r0, #0
    e9ea:	d142      	bne.n	ea72 <setvbuf+0x126>
    e9ec:	9b02      	ldr	r3, [sp, #8]
    e9ee:	9301      	str	r3, [sp, #4]
    e9f0:	42ab      	cmp	r3, r5
    e9f2:	d139      	bne.n	ea68 <setvbuf+0x11c>
    e9f4:	2001      	movs	r0, #1
    e9f6:	4240      	negs	r0, r0
    e9f8:	2302      	movs	r3, #2
    e9fa:	89a2      	ldrh	r2, [r4, #12]
    e9fc:	4313      	orrs	r3, r2
    e9fe:	81a3      	strh	r3, [r4, #12]
    ea00:	2300      	movs	r3, #0
    ea02:	60a3      	str	r3, [r4, #8]
    ea04:	0023      	movs	r3, r4
    ea06:	3347      	adds	r3, #71	; 0x47
    ea08:	6023      	str	r3, [r4, #0]
    ea0a:	6123      	str	r3, [r4, #16]
    ea0c:	2301      	movs	r3, #1
    ea0e:	6163      	str	r3, [r4, #20]
    ea10:	b005      	add	sp, #20
    ea12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea14:	4b21      	ldr	r3, [pc, #132]	; (ea9c <setvbuf+0x150>)
    ea16:	429c      	cmp	r4, r3
    ea18:	d101      	bne.n	ea1e <setvbuf+0xd2>
    ea1a:	68b4      	ldr	r4, [r6, #8]
    ea1c:	e7aa      	b.n	e974 <setvbuf+0x28>
    ea1e:	4b20      	ldr	r3, [pc, #128]	; (eaa0 <setvbuf+0x154>)
    ea20:	429c      	cmp	r4, r3
    ea22:	d1a7      	bne.n	e974 <setvbuf+0x28>
    ea24:	68f4      	ldr	r4, [r6, #12]
    ea26:	e7a5      	b.n	e974 <setvbuf+0x28>
    ea28:	2f00      	cmp	r7, #0
    ea2a:	d0d9      	beq.n	e9e0 <setvbuf+0x94>
    ea2c:	69b3      	ldr	r3, [r6, #24]
    ea2e:	2b00      	cmp	r3, #0
    ea30:	d102      	bne.n	ea38 <setvbuf+0xec>
    ea32:	0030      	movs	r0, r6
    ea34:	f001 f89c 	bl	fb70 <__sinit>
    ea38:	9b00      	ldr	r3, [sp, #0]
    ea3a:	2b01      	cmp	r3, #1
    ea3c:	d103      	bne.n	ea46 <setvbuf+0xfa>
    ea3e:	89a3      	ldrh	r3, [r4, #12]
    ea40:	9a00      	ldr	r2, [sp, #0]
    ea42:	431a      	orrs	r2, r3
    ea44:	81a2      	strh	r2, [r4, #12]
    ea46:	2008      	movs	r0, #8
    ea48:	89a3      	ldrh	r3, [r4, #12]
    ea4a:	6027      	str	r7, [r4, #0]
    ea4c:	6127      	str	r7, [r4, #16]
    ea4e:	6165      	str	r5, [r4, #20]
    ea50:	4018      	ands	r0, r3
    ea52:	d018      	beq.n	ea86 <setvbuf+0x13a>
    ea54:	2001      	movs	r0, #1
    ea56:	4018      	ands	r0, r3
    ea58:	2300      	movs	r3, #0
    ea5a:	4298      	cmp	r0, r3
    ea5c:	d011      	beq.n	ea82 <setvbuf+0x136>
    ea5e:	426d      	negs	r5, r5
    ea60:	60a3      	str	r3, [r4, #8]
    ea62:	61a5      	str	r5, [r4, #24]
    ea64:	0018      	movs	r0, r3
    ea66:	e7d3      	b.n	ea10 <setvbuf+0xc4>
    ea68:	9801      	ldr	r0, [sp, #4]
    ea6a:	f7ff f963 	bl	dd34 <malloc>
    ea6e:	1e07      	subs	r7, r0, #0
    ea70:	d0c0      	beq.n	e9f4 <setvbuf+0xa8>
    ea72:	2380      	movs	r3, #128	; 0x80
    ea74:	89a2      	ldrh	r2, [r4, #12]
    ea76:	9d01      	ldr	r5, [sp, #4]
    ea78:	4313      	orrs	r3, r2
    ea7a:	81a3      	strh	r3, [r4, #12]
    ea7c:	e7d6      	b.n	ea2c <setvbuf+0xe0>
    ea7e:	2000      	movs	r0, #0
    ea80:	e7ba      	b.n	e9f8 <setvbuf+0xac>
    ea82:	60a5      	str	r5, [r4, #8]
    ea84:	e7c4      	b.n	ea10 <setvbuf+0xc4>
    ea86:	60a0      	str	r0, [r4, #8]
    ea88:	e7c2      	b.n	ea10 <setvbuf+0xc4>
    ea8a:	2001      	movs	r0, #1
    ea8c:	4240      	negs	r0, r0
    ea8e:	e7bf      	b.n	ea10 <setvbuf+0xc4>
    ea90:	20000014 	.word	0x20000014
    ea94:	000142a4 	.word	0x000142a4
    ea98:	fffff35c 	.word	0xfffff35c
    ea9c:	000142c4 	.word	0x000142c4
    eaa0:	00014284 	.word	0x00014284

0000eaa4 <strcmp>:
    eaa4:	7802      	ldrb	r2, [r0, #0]
    eaa6:	780b      	ldrb	r3, [r1, #0]
    eaa8:	2a00      	cmp	r2, #0
    eaaa:	d003      	beq.n	eab4 <strcmp+0x10>
    eaac:	3001      	adds	r0, #1
    eaae:	3101      	adds	r1, #1
    eab0:	429a      	cmp	r2, r3
    eab2:	d0f7      	beq.n	eaa4 <strcmp>
    eab4:	1ad0      	subs	r0, r2, r3
    eab6:	4770      	bx	lr

0000eab8 <strcpy>:
    eab8:	1c03      	adds	r3, r0, #0
    eaba:	780a      	ldrb	r2, [r1, #0]
    eabc:	3101      	adds	r1, #1
    eabe:	701a      	strb	r2, [r3, #0]
    eac0:	3301      	adds	r3, #1
    eac2:	2a00      	cmp	r2, #0
    eac4:	d1f9      	bne.n	eaba <strcpy+0x2>
    eac6:	4770      	bx	lr

0000eac8 <strlen>:
    eac8:	2300      	movs	r3, #0
    eaca:	5cc2      	ldrb	r2, [r0, r3]
    eacc:	3301      	adds	r3, #1
    eace:	2a00      	cmp	r2, #0
    ead0:	d1fb      	bne.n	eaca <strlen+0x2>
    ead2:	1e58      	subs	r0, r3, #1
    ead4:	4770      	bx	lr

0000ead6 <strncmp>:
    ead6:	2300      	movs	r3, #0
    ead8:	b530      	push	{r4, r5, lr}
    eada:	429a      	cmp	r2, r3
    eadc:	d00a      	beq.n	eaf4 <strncmp+0x1e>
    eade:	3a01      	subs	r2, #1
    eae0:	5cc4      	ldrb	r4, [r0, r3]
    eae2:	5ccd      	ldrb	r5, [r1, r3]
    eae4:	42ac      	cmp	r4, r5
    eae6:	d104      	bne.n	eaf2 <strncmp+0x1c>
    eae8:	429a      	cmp	r2, r3
    eaea:	d002      	beq.n	eaf2 <strncmp+0x1c>
    eaec:	3301      	adds	r3, #1
    eaee:	2c00      	cmp	r4, #0
    eaf0:	d1f6      	bne.n	eae0 <strncmp+0xa>
    eaf2:	1b63      	subs	r3, r4, r5
    eaf4:	0018      	movs	r0, r3
    eaf6:	bd30      	pop	{r4, r5, pc}

0000eaf8 <__swbuf_r>:
    eaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eafa:	0005      	movs	r5, r0
    eafc:	000e      	movs	r6, r1
    eafe:	0014      	movs	r4, r2
    eb00:	2800      	cmp	r0, #0
    eb02:	d004      	beq.n	eb0e <__swbuf_r+0x16>
    eb04:	6983      	ldr	r3, [r0, #24]
    eb06:	2b00      	cmp	r3, #0
    eb08:	d101      	bne.n	eb0e <__swbuf_r+0x16>
    eb0a:	f001 f831 	bl	fb70 <__sinit>
    eb0e:	4b22      	ldr	r3, [pc, #136]	; (eb98 <__swbuf_r+0xa0>)
    eb10:	429c      	cmp	r4, r3
    eb12:	d12d      	bne.n	eb70 <__swbuf_r+0x78>
    eb14:	686c      	ldr	r4, [r5, #4]
    eb16:	69a3      	ldr	r3, [r4, #24]
    eb18:	60a3      	str	r3, [r4, #8]
    eb1a:	89a3      	ldrh	r3, [r4, #12]
    eb1c:	071b      	lsls	r3, r3, #28
    eb1e:	d531      	bpl.n	eb84 <__swbuf_r+0x8c>
    eb20:	6923      	ldr	r3, [r4, #16]
    eb22:	2b00      	cmp	r3, #0
    eb24:	d02e      	beq.n	eb84 <__swbuf_r+0x8c>
    eb26:	6823      	ldr	r3, [r4, #0]
    eb28:	6922      	ldr	r2, [r4, #16]
    eb2a:	b2f7      	uxtb	r7, r6
    eb2c:	1a98      	subs	r0, r3, r2
    eb2e:	6963      	ldr	r3, [r4, #20]
    eb30:	b2f6      	uxtb	r6, r6
    eb32:	4298      	cmp	r0, r3
    eb34:	db05      	blt.n	eb42 <__swbuf_r+0x4a>
    eb36:	0021      	movs	r1, r4
    eb38:	0028      	movs	r0, r5
    eb3a:	f000 ffab 	bl	fa94 <_fflush_r>
    eb3e:	2800      	cmp	r0, #0
    eb40:	d126      	bne.n	eb90 <__swbuf_r+0x98>
    eb42:	68a3      	ldr	r3, [r4, #8]
    eb44:	3001      	adds	r0, #1
    eb46:	3b01      	subs	r3, #1
    eb48:	60a3      	str	r3, [r4, #8]
    eb4a:	6823      	ldr	r3, [r4, #0]
    eb4c:	1c5a      	adds	r2, r3, #1
    eb4e:	6022      	str	r2, [r4, #0]
    eb50:	701f      	strb	r7, [r3, #0]
    eb52:	6963      	ldr	r3, [r4, #20]
    eb54:	4298      	cmp	r0, r3
    eb56:	d004      	beq.n	eb62 <__swbuf_r+0x6a>
    eb58:	89a3      	ldrh	r3, [r4, #12]
    eb5a:	07db      	lsls	r3, r3, #31
    eb5c:	d51a      	bpl.n	eb94 <__swbuf_r+0x9c>
    eb5e:	2e0a      	cmp	r6, #10
    eb60:	d118      	bne.n	eb94 <__swbuf_r+0x9c>
    eb62:	0021      	movs	r1, r4
    eb64:	0028      	movs	r0, r5
    eb66:	f000 ff95 	bl	fa94 <_fflush_r>
    eb6a:	2800      	cmp	r0, #0
    eb6c:	d012      	beq.n	eb94 <__swbuf_r+0x9c>
    eb6e:	e00f      	b.n	eb90 <__swbuf_r+0x98>
    eb70:	4b0a      	ldr	r3, [pc, #40]	; (eb9c <__swbuf_r+0xa4>)
    eb72:	429c      	cmp	r4, r3
    eb74:	d101      	bne.n	eb7a <__swbuf_r+0x82>
    eb76:	68ac      	ldr	r4, [r5, #8]
    eb78:	e7cd      	b.n	eb16 <__swbuf_r+0x1e>
    eb7a:	4b09      	ldr	r3, [pc, #36]	; (eba0 <__swbuf_r+0xa8>)
    eb7c:	429c      	cmp	r4, r3
    eb7e:	d1ca      	bne.n	eb16 <__swbuf_r+0x1e>
    eb80:	68ec      	ldr	r4, [r5, #12]
    eb82:	e7c8      	b.n	eb16 <__swbuf_r+0x1e>
    eb84:	0021      	movs	r1, r4
    eb86:	0028      	movs	r0, r5
    eb88:	f000 f818 	bl	ebbc <__swsetup_r>
    eb8c:	2800      	cmp	r0, #0
    eb8e:	d0ca      	beq.n	eb26 <__swbuf_r+0x2e>
    eb90:	2601      	movs	r6, #1
    eb92:	4276      	negs	r6, r6
    eb94:	0030      	movs	r0, r6
    eb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb98:	000142a4 	.word	0x000142a4
    eb9c:	000142c4 	.word	0x000142c4
    eba0:	00014284 	.word	0x00014284

0000eba4 <__ascii_wctomb>:
    eba4:	1e0b      	subs	r3, r1, #0
    eba6:	d004      	beq.n	ebb2 <__ascii_wctomb+0xe>
    eba8:	2aff      	cmp	r2, #255	; 0xff
    ebaa:	d904      	bls.n	ebb6 <__ascii_wctomb+0x12>
    ebac:	238a      	movs	r3, #138	; 0x8a
    ebae:	6003      	str	r3, [r0, #0]
    ebb0:	3b8b      	subs	r3, #139	; 0x8b
    ebb2:	0018      	movs	r0, r3
    ebb4:	4770      	bx	lr
    ebb6:	700a      	strb	r2, [r1, #0]
    ebb8:	2301      	movs	r3, #1
    ebba:	e7fa      	b.n	ebb2 <__ascii_wctomb+0xe>

0000ebbc <__swsetup_r>:
    ebbc:	4b36      	ldr	r3, [pc, #216]	; (ec98 <__swsetup_r+0xdc>)
    ebbe:	b570      	push	{r4, r5, r6, lr}
    ebc0:	681d      	ldr	r5, [r3, #0]
    ebc2:	0006      	movs	r6, r0
    ebc4:	000c      	movs	r4, r1
    ebc6:	2d00      	cmp	r5, #0
    ebc8:	d005      	beq.n	ebd6 <__swsetup_r+0x1a>
    ebca:	69ab      	ldr	r3, [r5, #24]
    ebcc:	2b00      	cmp	r3, #0
    ebce:	d102      	bne.n	ebd6 <__swsetup_r+0x1a>
    ebd0:	0028      	movs	r0, r5
    ebd2:	f000 ffcd 	bl	fb70 <__sinit>
    ebd6:	4b31      	ldr	r3, [pc, #196]	; (ec9c <__swsetup_r+0xe0>)
    ebd8:	429c      	cmp	r4, r3
    ebda:	d10f      	bne.n	ebfc <__swsetup_r+0x40>
    ebdc:	686c      	ldr	r4, [r5, #4]
    ebde:	230c      	movs	r3, #12
    ebe0:	5ee2      	ldrsh	r2, [r4, r3]
    ebe2:	b293      	uxth	r3, r2
    ebe4:	0719      	lsls	r1, r3, #28
    ebe6:	d42d      	bmi.n	ec44 <__swsetup_r+0x88>
    ebe8:	06d9      	lsls	r1, r3, #27
    ebea:	d411      	bmi.n	ec10 <__swsetup_r+0x54>
    ebec:	2309      	movs	r3, #9
    ebee:	2001      	movs	r0, #1
    ebf0:	6033      	str	r3, [r6, #0]
    ebf2:	3337      	adds	r3, #55	; 0x37
    ebf4:	4313      	orrs	r3, r2
    ebf6:	81a3      	strh	r3, [r4, #12]
    ebf8:	4240      	negs	r0, r0
    ebfa:	bd70      	pop	{r4, r5, r6, pc}
    ebfc:	4b28      	ldr	r3, [pc, #160]	; (eca0 <__swsetup_r+0xe4>)
    ebfe:	429c      	cmp	r4, r3
    ec00:	d101      	bne.n	ec06 <__swsetup_r+0x4a>
    ec02:	68ac      	ldr	r4, [r5, #8]
    ec04:	e7eb      	b.n	ebde <__swsetup_r+0x22>
    ec06:	4b27      	ldr	r3, [pc, #156]	; (eca4 <__swsetup_r+0xe8>)
    ec08:	429c      	cmp	r4, r3
    ec0a:	d1e8      	bne.n	ebde <__swsetup_r+0x22>
    ec0c:	68ec      	ldr	r4, [r5, #12]
    ec0e:	e7e6      	b.n	ebde <__swsetup_r+0x22>
    ec10:	075b      	lsls	r3, r3, #29
    ec12:	d513      	bpl.n	ec3c <__swsetup_r+0x80>
    ec14:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ec16:	2900      	cmp	r1, #0
    ec18:	d008      	beq.n	ec2c <__swsetup_r+0x70>
    ec1a:	0023      	movs	r3, r4
    ec1c:	3344      	adds	r3, #68	; 0x44
    ec1e:	4299      	cmp	r1, r3
    ec20:	d002      	beq.n	ec28 <__swsetup_r+0x6c>
    ec22:	0030      	movs	r0, r6
    ec24:	f7ff f8c6 	bl	ddb4 <_free_r>
    ec28:	2300      	movs	r3, #0
    ec2a:	6363      	str	r3, [r4, #52]	; 0x34
    ec2c:	2224      	movs	r2, #36	; 0x24
    ec2e:	89a3      	ldrh	r3, [r4, #12]
    ec30:	4393      	bics	r3, r2
    ec32:	81a3      	strh	r3, [r4, #12]
    ec34:	2300      	movs	r3, #0
    ec36:	6063      	str	r3, [r4, #4]
    ec38:	6923      	ldr	r3, [r4, #16]
    ec3a:	6023      	str	r3, [r4, #0]
    ec3c:	2308      	movs	r3, #8
    ec3e:	89a2      	ldrh	r2, [r4, #12]
    ec40:	4313      	orrs	r3, r2
    ec42:	81a3      	strh	r3, [r4, #12]
    ec44:	6923      	ldr	r3, [r4, #16]
    ec46:	2b00      	cmp	r3, #0
    ec48:	d10b      	bne.n	ec62 <__swsetup_r+0xa6>
    ec4a:	21a0      	movs	r1, #160	; 0xa0
    ec4c:	2280      	movs	r2, #128	; 0x80
    ec4e:	89a3      	ldrh	r3, [r4, #12]
    ec50:	0089      	lsls	r1, r1, #2
    ec52:	0092      	lsls	r2, r2, #2
    ec54:	400b      	ands	r3, r1
    ec56:	4293      	cmp	r3, r2
    ec58:	d003      	beq.n	ec62 <__swsetup_r+0xa6>
    ec5a:	0021      	movs	r1, r4
    ec5c:	0030      	movs	r0, r6
    ec5e:	f001 f851 	bl	fd04 <__smakebuf_r>
    ec62:	2301      	movs	r3, #1
    ec64:	89a2      	ldrh	r2, [r4, #12]
    ec66:	4013      	ands	r3, r2
    ec68:	d011      	beq.n	ec8e <__swsetup_r+0xd2>
    ec6a:	2300      	movs	r3, #0
    ec6c:	60a3      	str	r3, [r4, #8]
    ec6e:	6963      	ldr	r3, [r4, #20]
    ec70:	425b      	negs	r3, r3
    ec72:	61a3      	str	r3, [r4, #24]
    ec74:	2000      	movs	r0, #0
    ec76:	6923      	ldr	r3, [r4, #16]
    ec78:	4283      	cmp	r3, r0
    ec7a:	d1be      	bne.n	ebfa <__swsetup_r+0x3e>
    ec7c:	230c      	movs	r3, #12
    ec7e:	5ee2      	ldrsh	r2, [r4, r3]
    ec80:	0613      	lsls	r3, r2, #24
    ec82:	d5ba      	bpl.n	ebfa <__swsetup_r+0x3e>
    ec84:	2340      	movs	r3, #64	; 0x40
    ec86:	4313      	orrs	r3, r2
    ec88:	81a3      	strh	r3, [r4, #12]
    ec8a:	3801      	subs	r0, #1
    ec8c:	e7b5      	b.n	ebfa <__swsetup_r+0x3e>
    ec8e:	0792      	lsls	r2, r2, #30
    ec90:	d400      	bmi.n	ec94 <__swsetup_r+0xd8>
    ec92:	6963      	ldr	r3, [r4, #20]
    ec94:	60a3      	str	r3, [r4, #8]
    ec96:	e7ed      	b.n	ec74 <__swsetup_r+0xb8>
    ec98:	20000014 	.word	0x20000014
    ec9c:	000142a4 	.word	0x000142a4
    eca0:	000142c4 	.word	0x000142c4
    eca4:	00014284 	.word	0x00014284

0000eca8 <quorem>:
    eca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecaa:	6903      	ldr	r3, [r0, #16]
    ecac:	690c      	ldr	r4, [r1, #16]
    ecae:	b089      	sub	sp, #36	; 0x24
    ecb0:	0007      	movs	r7, r0
    ecb2:	9105      	str	r1, [sp, #20]
    ecb4:	2600      	movs	r6, #0
    ecb6:	429c      	cmp	r4, r3
    ecb8:	dc6d      	bgt.n	ed96 <quorem+0xee>
    ecba:	000b      	movs	r3, r1
    ecbc:	3c01      	subs	r4, #1
    ecbe:	3314      	adds	r3, #20
    ecc0:	00a5      	lsls	r5, r4, #2
    ecc2:	9303      	str	r3, [sp, #12]
    ecc4:	195b      	adds	r3, r3, r5
    ecc6:	9304      	str	r3, [sp, #16]
    ecc8:	0003      	movs	r3, r0
    ecca:	3314      	adds	r3, #20
    eccc:	9302      	str	r3, [sp, #8]
    ecce:	195d      	adds	r5, r3, r5
    ecd0:	9b04      	ldr	r3, [sp, #16]
    ecd2:	6828      	ldr	r0, [r5, #0]
    ecd4:	681b      	ldr	r3, [r3, #0]
    ecd6:	1c59      	adds	r1, r3, #1
    ecd8:	9301      	str	r3, [sp, #4]
    ecda:	f001 fd97 	bl	1080c <__udivsi3>
    ecde:	9001      	str	r0, [sp, #4]
    ece0:	42b0      	cmp	r0, r6
    ece2:	d02d      	beq.n	ed40 <quorem+0x98>
    ece4:	9b03      	ldr	r3, [sp, #12]
    ece6:	9802      	ldr	r0, [sp, #8]
    ece8:	469c      	mov	ip, r3
    ecea:	9606      	str	r6, [sp, #24]
    ecec:	4662      	mov	r2, ip
    ecee:	ca08      	ldmia	r2!, {r3}
    ecf0:	4694      	mov	ip, r2
    ecf2:	9a01      	ldr	r2, [sp, #4]
    ecf4:	b299      	uxth	r1, r3
    ecf6:	4351      	muls	r1, r2
    ecf8:	0c1b      	lsrs	r3, r3, #16
    ecfa:	4353      	muls	r3, r2
    ecfc:	1989      	adds	r1, r1, r6
    ecfe:	0c0a      	lsrs	r2, r1, #16
    ed00:	189b      	adds	r3, r3, r2
    ed02:	9307      	str	r3, [sp, #28]
    ed04:	8802      	ldrh	r2, [r0, #0]
    ed06:	0c1e      	lsrs	r6, r3, #16
    ed08:	9b06      	ldr	r3, [sp, #24]
    ed0a:	b289      	uxth	r1, r1
    ed0c:	18d2      	adds	r2, r2, r3
    ed0e:	6803      	ldr	r3, [r0, #0]
    ed10:	1a52      	subs	r2, r2, r1
    ed12:	0c19      	lsrs	r1, r3, #16
    ed14:	466b      	mov	r3, sp
    ed16:	8b9b      	ldrh	r3, [r3, #28]
    ed18:	1acb      	subs	r3, r1, r3
    ed1a:	1411      	asrs	r1, r2, #16
    ed1c:	185b      	adds	r3, r3, r1
    ed1e:	1419      	asrs	r1, r3, #16
    ed20:	b292      	uxth	r2, r2
    ed22:	041b      	lsls	r3, r3, #16
    ed24:	431a      	orrs	r2, r3
    ed26:	9b04      	ldr	r3, [sp, #16]
    ed28:	9106      	str	r1, [sp, #24]
    ed2a:	c004      	stmia	r0!, {r2}
    ed2c:	4563      	cmp	r3, ip
    ed2e:	d2dd      	bcs.n	ecec <quorem+0x44>
    ed30:	682b      	ldr	r3, [r5, #0]
    ed32:	2b00      	cmp	r3, #0
    ed34:	d104      	bne.n	ed40 <quorem+0x98>
    ed36:	9b02      	ldr	r3, [sp, #8]
    ed38:	3d04      	subs	r5, #4
    ed3a:	42ab      	cmp	r3, r5
    ed3c:	d32e      	bcc.n	ed9c <quorem+0xf4>
    ed3e:	613c      	str	r4, [r7, #16]
    ed40:	9905      	ldr	r1, [sp, #20]
    ed42:	0038      	movs	r0, r7
    ed44:	f001 fa41 	bl	101ca <__mcmp>
    ed48:	2800      	cmp	r0, #0
    ed4a:	db23      	blt.n	ed94 <quorem+0xec>
    ed4c:	2500      	movs	r5, #0
    ed4e:	9b01      	ldr	r3, [sp, #4]
    ed50:	9802      	ldr	r0, [sp, #8]
    ed52:	3301      	adds	r3, #1
    ed54:	9903      	ldr	r1, [sp, #12]
    ed56:	9301      	str	r3, [sp, #4]
    ed58:	c908      	ldmia	r1!, {r3}
    ed5a:	8802      	ldrh	r2, [r0, #0]
    ed5c:	1955      	adds	r5, r2, r5
    ed5e:	b29a      	uxth	r2, r3
    ed60:	1aaa      	subs	r2, r5, r2
    ed62:	6805      	ldr	r5, [r0, #0]
    ed64:	0c1b      	lsrs	r3, r3, #16
    ed66:	0c2d      	lsrs	r5, r5, #16
    ed68:	1aeb      	subs	r3, r5, r3
    ed6a:	1415      	asrs	r5, r2, #16
    ed6c:	195b      	adds	r3, r3, r5
    ed6e:	141d      	asrs	r5, r3, #16
    ed70:	b292      	uxth	r2, r2
    ed72:	041b      	lsls	r3, r3, #16
    ed74:	4313      	orrs	r3, r2
    ed76:	c008      	stmia	r0!, {r3}
    ed78:	9b04      	ldr	r3, [sp, #16]
    ed7a:	428b      	cmp	r3, r1
    ed7c:	d2ec      	bcs.n	ed58 <quorem+0xb0>
    ed7e:	9a02      	ldr	r2, [sp, #8]
    ed80:	00a3      	lsls	r3, r4, #2
    ed82:	18d3      	adds	r3, r2, r3
    ed84:	681a      	ldr	r2, [r3, #0]
    ed86:	2a00      	cmp	r2, #0
    ed88:	d104      	bne.n	ed94 <quorem+0xec>
    ed8a:	9a02      	ldr	r2, [sp, #8]
    ed8c:	3b04      	subs	r3, #4
    ed8e:	429a      	cmp	r2, r3
    ed90:	d309      	bcc.n	eda6 <quorem+0xfe>
    ed92:	613c      	str	r4, [r7, #16]
    ed94:	9e01      	ldr	r6, [sp, #4]
    ed96:	0030      	movs	r0, r6
    ed98:	b009      	add	sp, #36	; 0x24
    ed9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed9c:	682b      	ldr	r3, [r5, #0]
    ed9e:	2b00      	cmp	r3, #0
    eda0:	d1cd      	bne.n	ed3e <quorem+0x96>
    eda2:	3c01      	subs	r4, #1
    eda4:	e7c7      	b.n	ed36 <quorem+0x8e>
    eda6:	681a      	ldr	r2, [r3, #0]
    eda8:	2a00      	cmp	r2, #0
    edaa:	d1f2      	bne.n	ed92 <quorem+0xea>
    edac:	3c01      	subs	r4, #1
    edae:	e7ec      	b.n	ed8a <quorem+0xe2>

0000edb0 <_dtoa_r>:
    edb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    edb2:	0016      	movs	r6, r2
    edb4:	001f      	movs	r7, r3
    edb6:	6a44      	ldr	r4, [r0, #36]	; 0x24
    edb8:	b09d      	sub	sp, #116	; 0x74
    edba:	9004      	str	r0, [sp, #16]
    edbc:	9d25      	ldr	r5, [sp, #148]	; 0x94
    edbe:	9606      	str	r6, [sp, #24]
    edc0:	9707      	str	r7, [sp, #28]
    edc2:	2c00      	cmp	r4, #0
    edc4:	d108      	bne.n	edd8 <_dtoa_r+0x28>
    edc6:	2010      	movs	r0, #16
    edc8:	f7fe ffb4 	bl	dd34 <malloc>
    edcc:	9b04      	ldr	r3, [sp, #16]
    edce:	6258      	str	r0, [r3, #36]	; 0x24
    edd0:	6044      	str	r4, [r0, #4]
    edd2:	6084      	str	r4, [r0, #8]
    edd4:	6004      	str	r4, [r0, #0]
    edd6:	60c4      	str	r4, [r0, #12]
    edd8:	9b04      	ldr	r3, [sp, #16]
    edda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eddc:	6819      	ldr	r1, [r3, #0]
    edde:	2900      	cmp	r1, #0
    ede0:	d00b      	beq.n	edfa <_dtoa_r+0x4a>
    ede2:	685a      	ldr	r2, [r3, #4]
    ede4:	2301      	movs	r3, #1
    ede6:	4093      	lsls	r3, r2
    ede8:	604a      	str	r2, [r1, #4]
    edea:	608b      	str	r3, [r1, #8]
    edec:	9804      	ldr	r0, [sp, #16]
    edee:	f001 f812 	bl	fe16 <_Bfree>
    edf2:	2200      	movs	r2, #0
    edf4:	9b04      	ldr	r3, [sp, #16]
    edf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    edf8:	601a      	str	r2, [r3, #0]
    edfa:	9b07      	ldr	r3, [sp, #28]
    edfc:	2b00      	cmp	r3, #0
    edfe:	da1f      	bge.n	ee40 <_dtoa_r+0x90>
    ee00:	2301      	movs	r3, #1
    ee02:	602b      	str	r3, [r5, #0]
    ee04:	007b      	lsls	r3, r7, #1
    ee06:	085b      	lsrs	r3, r3, #1
    ee08:	9307      	str	r3, [sp, #28]
    ee0a:	9c07      	ldr	r4, [sp, #28]
    ee0c:	4bb7      	ldr	r3, [pc, #732]	; (f0ec <_dtoa_r+0x33c>)
    ee0e:	0022      	movs	r2, r4
    ee10:	9319      	str	r3, [sp, #100]	; 0x64
    ee12:	401a      	ands	r2, r3
    ee14:	429a      	cmp	r2, r3
    ee16:	d116      	bne.n	ee46 <_dtoa_r+0x96>
    ee18:	4bb5      	ldr	r3, [pc, #724]	; (f0f0 <_dtoa_r+0x340>)
    ee1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    ee1c:	6013      	str	r3, [r2, #0]
    ee1e:	9b06      	ldr	r3, [sp, #24]
    ee20:	2b00      	cmp	r3, #0
    ee22:	d103      	bne.n	ee2c <_dtoa_r+0x7c>
    ee24:	0324      	lsls	r4, r4, #12
    ee26:	d101      	bne.n	ee2c <_dtoa_r+0x7c>
    ee28:	f000 fd91 	bl	f94e <_dtoa_r+0xb9e>
    ee2c:	4bb1      	ldr	r3, [pc, #708]	; (f0f4 <_dtoa_r+0x344>)
    ee2e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ee30:	930a      	str	r3, [sp, #40]	; 0x28
    ee32:	4bb1      	ldr	r3, [pc, #708]	; (f0f8 <_dtoa_r+0x348>)
    ee34:	2a00      	cmp	r2, #0
    ee36:	d001      	beq.n	ee3c <_dtoa_r+0x8c>
    ee38:	f000 fd8f 	bl	f95a <_dtoa_r+0xbaa>
    ee3c:	f000 fd8f 	bl	f95e <_dtoa_r+0xbae>
    ee40:	2300      	movs	r3, #0
    ee42:	602b      	str	r3, [r5, #0]
    ee44:	e7e1      	b.n	ee0a <_dtoa_r+0x5a>
    ee46:	9e06      	ldr	r6, [sp, #24]
    ee48:	9f07      	ldr	r7, [sp, #28]
    ee4a:	2200      	movs	r2, #0
    ee4c:	2300      	movs	r3, #0
    ee4e:	0030      	movs	r0, r6
    ee50:	0039      	movs	r1, r7
    ee52:	f001 fe61 	bl	10b18 <__aeabi_dcmpeq>
    ee56:	1e05      	subs	r5, r0, #0
    ee58:	d00e      	beq.n	ee78 <_dtoa_r+0xc8>
    ee5a:	2301      	movs	r3, #1
    ee5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    ee5e:	6013      	str	r3, [r2, #0]
    ee60:	4ba6      	ldr	r3, [pc, #664]	; (f0fc <_dtoa_r+0x34c>)
    ee62:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ee64:	930a      	str	r3, [sp, #40]	; 0x28
    ee66:	2a00      	cmp	r2, #0
    ee68:	d101      	bne.n	ee6e <_dtoa_r+0xbe>
    ee6a:	f000 fd78 	bl	f95e <_dtoa_r+0xbae>
    ee6e:	4aa4      	ldr	r2, [pc, #656]	; (f100 <_dtoa_r+0x350>)
    ee70:	9926      	ldr	r1, [sp, #152]	; 0x98
    ee72:	600a      	str	r2, [r1, #0]
    ee74:	f000 fd73 	bl	f95e <_dtoa_r+0xbae>
    ee78:	ab1a      	add	r3, sp, #104	; 0x68
    ee7a:	9301      	str	r3, [sp, #4]
    ee7c:	ab1b      	add	r3, sp, #108	; 0x6c
    ee7e:	9300      	str	r3, [sp, #0]
    ee80:	0032      	movs	r2, r6
    ee82:	003b      	movs	r3, r7
    ee84:	9804      	ldr	r0, [sp, #16]
    ee86:	f001 fa1d 	bl	102c4 <__d2b>
    ee8a:	0063      	lsls	r3, r4, #1
    ee8c:	9005      	str	r0, [sp, #20]
    ee8e:	0d5b      	lsrs	r3, r3, #21
    ee90:	d100      	bne.n	ee94 <_dtoa_r+0xe4>
    ee92:	e07f      	b.n	ef94 <_dtoa_r+0x1e4>
    ee94:	033a      	lsls	r2, r7, #12
    ee96:	4c9b      	ldr	r4, [pc, #620]	; (f104 <_dtoa_r+0x354>)
    ee98:	0b12      	lsrs	r2, r2, #12
    ee9a:	4314      	orrs	r4, r2
    ee9c:	0021      	movs	r1, r4
    ee9e:	4a9a      	ldr	r2, [pc, #616]	; (f108 <_dtoa_r+0x358>)
    eea0:	0030      	movs	r0, r6
    eea2:	9518      	str	r5, [sp, #96]	; 0x60
    eea4:	189e      	adds	r6, r3, r2
    eea6:	2200      	movs	r2, #0
    eea8:	4b98      	ldr	r3, [pc, #608]	; (f10c <_dtoa_r+0x35c>)
    eeaa:	f003 f851 	bl	11f50 <__aeabi_dsub>
    eeae:	4a98      	ldr	r2, [pc, #608]	; (f110 <_dtoa_r+0x360>)
    eeb0:	4b98      	ldr	r3, [pc, #608]	; (f114 <_dtoa_r+0x364>)
    eeb2:	f002 fdcd 	bl	11a50 <__aeabi_dmul>
    eeb6:	4a98      	ldr	r2, [pc, #608]	; (f118 <_dtoa_r+0x368>)
    eeb8:	4b98      	ldr	r3, [pc, #608]	; (f11c <_dtoa_r+0x36c>)
    eeba:	f001 fe85 	bl	10bc8 <__aeabi_dadd>
    eebe:	0004      	movs	r4, r0
    eec0:	0030      	movs	r0, r6
    eec2:	000d      	movs	r5, r1
    eec4:	f003 fbae 	bl	12624 <__aeabi_i2d>
    eec8:	4a95      	ldr	r2, [pc, #596]	; (f120 <_dtoa_r+0x370>)
    eeca:	4b96      	ldr	r3, [pc, #600]	; (f124 <_dtoa_r+0x374>)
    eecc:	f002 fdc0 	bl	11a50 <__aeabi_dmul>
    eed0:	0002      	movs	r2, r0
    eed2:	000b      	movs	r3, r1
    eed4:	0020      	movs	r0, r4
    eed6:	0029      	movs	r1, r5
    eed8:	f001 fe76 	bl	10bc8 <__aeabi_dadd>
    eedc:	0004      	movs	r4, r0
    eede:	000d      	movs	r5, r1
    eee0:	f003 fb6c 	bl	125bc <__aeabi_d2iz>
    eee4:	2200      	movs	r2, #0
    eee6:	9003      	str	r0, [sp, #12]
    eee8:	2300      	movs	r3, #0
    eeea:	0020      	movs	r0, r4
    eeec:	0029      	movs	r1, r5
    eeee:	f001 fe19 	bl	10b24 <__aeabi_dcmplt>
    eef2:	2800      	cmp	r0, #0
    eef4:	d00e      	beq.n	ef14 <_dtoa_r+0x164>
    eef6:	9803      	ldr	r0, [sp, #12]
    eef8:	f003 fb94 	bl	12624 <__aeabi_i2d>
    eefc:	000b      	movs	r3, r1
    eefe:	0002      	movs	r2, r0
    ef00:	0029      	movs	r1, r5
    ef02:	0020      	movs	r0, r4
    ef04:	f001 fe08 	bl	10b18 <__aeabi_dcmpeq>
    ef08:	0003      	movs	r3, r0
    ef0a:	4258      	negs	r0, r3
    ef0c:	4158      	adcs	r0, r3
    ef0e:	9b03      	ldr	r3, [sp, #12]
    ef10:	1a1b      	subs	r3, r3, r0
    ef12:	9303      	str	r3, [sp, #12]
    ef14:	2301      	movs	r3, #1
    ef16:	9316      	str	r3, [sp, #88]	; 0x58
    ef18:	9b03      	ldr	r3, [sp, #12]
    ef1a:	2b16      	cmp	r3, #22
    ef1c:	d80f      	bhi.n	ef3e <_dtoa_r+0x18e>
    ef1e:	4982      	ldr	r1, [pc, #520]	; (f128 <_dtoa_r+0x378>)
    ef20:	00db      	lsls	r3, r3, #3
    ef22:	18c9      	adds	r1, r1, r3
    ef24:	6808      	ldr	r0, [r1, #0]
    ef26:	6849      	ldr	r1, [r1, #4]
    ef28:	9a06      	ldr	r2, [sp, #24]
    ef2a:	9b07      	ldr	r3, [sp, #28]
    ef2c:	f001 fe0e 	bl	10b4c <__aeabi_dcmpgt>
    ef30:	2800      	cmp	r0, #0
    ef32:	d04b      	beq.n	efcc <_dtoa_r+0x21c>
    ef34:	9b03      	ldr	r3, [sp, #12]
    ef36:	3b01      	subs	r3, #1
    ef38:	9303      	str	r3, [sp, #12]
    ef3a:	2300      	movs	r3, #0
    ef3c:	9316      	str	r3, [sp, #88]	; 0x58
    ef3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ef40:	1b9e      	subs	r6, r3, r6
    ef42:	2300      	movs	r3, #0
    ef44:	930b      	str	r3, [sp, #44]	; 0x2c
    ef46:	0033      	movs	r3, r6
    ef48:	3b01      	subs	r3, #1
    ef4a:	930c      	str	r3, [sp, #48]	; 0x30
    ef4c:	d504      	bpl.n	ef58 <_dtoa_r+0x1a8>
    ef4e:	2301      	movs	r3, #1
    ef50:	1b9b      	subs	r3, r3, r6
    ef52:	930b      	str	r3, [sp, #44]	; 0x2c
    ef54:	2300      	movs	r3, #0
    ef56:	930c      	str	r3, [sp, #48]	; 0x30
    ef58:	9b03      	ldr	r3, [sp, #12]
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	db38      	blt.n	efd0 <_dtoa_r+0x220>
    ef5e:	9a03      	ldr	r2, [sp, #12]
    ef60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef62:	4694      	mov	ip, r2
    ef64:	4463      	add	r3, ip
    ef66:	930c      	str	r3, [sp, #48]	; 0x30
    ef68:	2300      	movs	r3, #0
    ef6a:	920f      	str	r2, [sp, #60]	; 0x3c
    ef6c:	9308      	str	r3, [sp, #32]
    ef6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ef70:	2501      	movs	r5, #1
    ef72:	2b09      	cmp	r3, #9
    ef74:	d900      	bls.n	ef78 <_dtoa_r+0x1c8>
    ef76:	e091      	b.n	f09c <_dtoa_r+0x2ec>
    ef78:	2b05      	cmp	r3, #5
    ef7a:	dd02      	ble.n	ef82 <_dtoa_r+0x1d2>
    ef7c:	2500      	movs	r5, #0
    ef7e:	3b04      	subs	r3, #4
    ef80:	9322      	str	r3, [sp, #136]	; 0x88
    ef82:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ef84:	1e98      	subs	r0, r3, #2
    ef86:	2803      	cmp	r0, #3
    ef88:	d900      	bls.n	ef8c <_dtoa_r+0x1dc>
    ef8a:	e091      	b.n	f0b0 <_dtoa_r+0x300>
    ef8c:	f001 fc34 	bl	107f8 <__gnu_thumb1_case_uqi>
    ef90:	76298482 	.word	0x76298482
    ef94:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ef96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ef98:	189e      	adds	r6, r3, r2
    ef9a:	4b64      	ldr	r3, [pc, #400]	; (f12c <_dtoa_r+0x37c>)
    ef9c:	18f2      	adds	r2, r6, r3
    ef9e:	2a20      	cmp	r2, #32
    efa0:	dd0f      	ble.n	efc2 <_dtoa_r+0x212>
    efa2:	4b63      	ldr	r3, [pc, #396]	; (f130 <_dtoa_r+0x380>)
    efa4:	9806      	ldr	r0, [sp, #24]
    efa6:	18f3      	adds	r3, r6, r3
    efa8:	40d8      	lsrs	r0, r3
    efaa:	2340      	movs	r3, #64	; 0x40
    efac:	1a9b      	subs	r3, r3, r2
    efae:	409c      	lsls	r4, r3
    efb0:	4320      	orrs	r0, r4
    efb2:	f003 fb79 	bl	126a8 <__aeabi_ui2d>
    efb6:	2301      	movs	r3, #1
    efb8:	4c5e      	ldr	r4, [pc, #376]	; (f134 <_dtoa_r+0x384>)
    efba:	3e01      	subs	r6, #1
    efbc:	1909      	adds	r1, r1, r4
    efbe:	9318      	str	r3, [sp, #96]	; 0x60
    efc0:	e771      	b.n	eea6 <_dtoa_r+0xf6>
    efc2:	2320      	movs	r3, #32
    efc4:	9806      	ldr	r0, [sp, #24]
    efc6:	1a9b      	subs	r3, r3, r2
    efc8:	4098      	lsls	r0, r3
    efca:	e7f2      	b.n	efb2 <_dtoa_r+0x202>
    efcc:	9016      	str	r0, [sp, #88]	; 0x58
    efce:	e7b6      	b.n	ef3e <_dtoa_r+0x18e>
    efd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    efd2:	9a03      	ldr	r2, [sp, #12]
    efd4:	1a9b      	subs	r3, r3, r2
    efd6:	930b      	str	r3, [sp, #44]	; 0x2c
    efd8:	4253      	negs	r3, r2
    efda:	9308      	str	r3, [sp, #32]
    efdc:	2300      	movs	r3, #0
    efde:	930f      	str	r3, [sp, #60]	; 0x3c
    efe0:	e7c5      	b.n	ef6e <_dtoa_r+0x1be>
    efe2:	2301      	movs	r3, #1
    efe4:	930e      	str	r3, [sp, #56]	; 0x38
    efe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    efe8:	2b00      	cmp	r3, #0
    efea:	dd65      	ble.n	f0b8 <_dtoa_r+0x308>
    efec:	001f      	movs	r7, r3
    efee:	930d      	str	r3, [sp, #52]	; 0x34
    eff0:	9a04      	ldr	r2, [sp, #16]
    eff2:	6a54      	ldr	r4, [r2, #36]	; 0x24
    eff4:	2200      	movs	r2, #0
    eff6:	6062      	str	r2, [r4, #4]
    eff8:	3204      	adds	r2, #4
    effa:	0011      	movs	r1, r2
    effc:	3114      	adds	r1, #20
    effe:	4299      	cmp	r1, r3
    f000:	d95f      	bls.n	f0c2 <_dtoa_r+0x312>
    f002:	6861      	ldr	r1, [r4, #4]
    f004:	9804      	ldr	r0, [sp, #16]
    f006:	f000 fece 	bl	fda6 <_Balloc>
    f00a:	9b04      	ldr	r3, [sp, #16]
    f00c:	6020      	str	r0, [r4, #0]
    f00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f010:	681b      	ldr	r3, [r3, #0]
    f012:	930a      	str	r3, [sp, #40]	; 0x28
    f014:	2f0e      	cmp	r7, #14
    f016:	d900      	bls.n	f01a <_dtoa_r+0x26a>
    f018:	e105      	b.n	f226 <_dtoa_r+0x476>
    f01a:	2d00      	cmp	r5, #0
    f01c:	d100      	bne.n	f020 <_dtoa_r+0x270>
    f01e:	e102      	b.n	f226 <_dtoa_r+0x476>
    f020:	9b06      	ldr	r3, [sp, #24]
    f022:	9c07      	ldr	r4, [sp, #28]
    f024:	9314      	str	r3, [sp, #80]	; 0x50
    f026:	9415      	str	r4, [sp, #84]	; 0x54
    f028:	9b03      	ldr	r3, [sp, #12]
    f02a:	2b00      	cmp	r3, #0
    f02c:	dc00      	bgt.n	f030 <_dtoa_r+0x280>
    f02e:	e085      	b.n	f13c <_dtoa_r+0x38c>
    f030:	001a      	movs	r2, r3
    f032:	210f      	movs	r1, #15
    f034:	4b3c      	ldr	r3, [pc, #240]	; (f128 <_dtoa_r+0x378>)
    f036:	400a      	ands	r2, r1
    f038:	00d2      	lsls	r2, r2, #3
    f03a:	189b      	adds	r3, r3, r2
    f03c:	685c      	ldr	r4, [r3, #4]
    f03e:	681b      	ldr	r3, [r3, #0]
    f040:	9310      	str	r3, [sp, #64]	; 0x40
    f042:	9411      	str	r4, [sp, #68]	; 0x44
    f044:	9b03      	ldr	r3, [sp, #12]
    f046:	2402      	movs	r4, #2
    f048:	111d      	asrs	r5, r3, #4
    f04a:	06eb      	lsls	r3, r5, #27
    f04c:	d50a      	bpl.n	f064 <_dtoa_r+0x2b4>
    f04e:	4b3a      	ldr	r3, [pc, #232]	; (f138 <_dtoa_r+0x388>)
    f050:	400d      	ands	r5, r1
    f052:	6a1a      	ldr	r2, [r3, #32]
    f054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f056:	9814      	ldr	r0, [sp, #80]	; 0x50
    f058:	9915      	ldr	r1, [sp, #84]	; 0x54
    f05a:	f002 f8c5 	bl	111e8 <__aeabi_ddiv>
    f05e:	9006      	str	r0, [sp, #24]
    f060:	9107      	str	r1, [sp, #28]
    f062:	3401      	adds	r4, #1
    f064:	4e34      	ldr	r6, [pc, #208]	; (f138 <_dtoa_r+0x388>)
    f066:	2d00      	cmp	r5, #0
    f068:	d130      	bne.n	f0cc <_dtoa_r+0x31c>
    f06a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f06c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f06e:	9806      	ldr	r0, [sp, #24]
    f070:	9907      	ldr	r1, [sp, #28]
    f072:	f002 f8b9 	bl	111e8 <__aeabi_ddiv>
    f076:	9006      	str	r0, [sp, #24]
    f078:	9107      	str	r1, [sp, #28]
    f07a:	e07a      	b.n	f172 <_dtoa_r+0x3c2>
    f07c:	2301      	movs	r3, #1
    f07e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    f080:	930e      	str	r3, [sp, #56]	; 0x38
    f082:	4694      	mov	ip, r2
    f084:	9b03      	ldr	r3, [sp, #12]
    f086:	4463      	add	r3, ip
    f088:	1c5f      	adds	r7, r3, #1
    f08a:	930d      	str	r3, [sp, #52]	; 0x34
    f08c:	1e3b      	subs	r3, r7, #0
    f08e:	dcaf      	bgt.n	eff0 <_dtoa_r+0x240>
    f090:	2301      	movs	r3, #1
    f092:	e7ad      	b.n	eff0 <_dtoa_r+0x240>
    f094:	2300      	movs	r3, #0
    f096:	e7a5      	b.n	efe4 <_dtoa_r+0x234>
    f098:	2300      	movs	r3, #0
    f09a:	e7f0      	b.n	f07e <_dtoa_r+0x2ce>
    f09c:	2300      	movs	r3, #0
    f09e:	950e      	str	r5, [sp, #56]	; 0x38
    f0a0:	9322      	str	r3, [sp, #136]	; 0x88
    f0a2:	3b01      	subs	r3, #1
    f0a4:	2200      	movs	r2, #0
    f0a6:	930d      	str	r3, [sp, #52]	; 0x34
    f0a8:	001f      	movs	r7, r3
    f0aa:	3313      	adds	r3, #19
    f0ac:	9223      	str	r2, [sp, #140]	; 0x8c
    f0ae:	e79f      	b.n	eff0 <_dtoa_r+0x240>
    f0b0:	2301      	movs	r3, #1
    f0b2:	930e      	str	r3, [sp, #56]	; 0x38
    f0b4:	3b02      	subs	r3, #2
    f0b6:	e7f5      	b.n	f0a4 <_dtoa_r+0x2f4>
    f0b8:	2301      	movs	r3, #1
    f0ba:	930d      	str	r3, [sp, #52]	; 0x34
    f0bc:	001f      	movs	r7, r3
    f0be:	001a      	movs	r2, r3
    f0c0:	e7f4      	b.n	f0ac <_dtoa_r+0x2fc>
    f0c2:	6861      	ldr	r1, [r4, #4]
    f0c4:	0052      	lsls	r2, r2, #1
    f0c6:	3101      	adds	r1, #1
    f0c8:	6061      	str	r1, [r4, #4]
    f0ca:	e796      	b.n	effa <_dtoa_r+0x24a>
    f0cc:	2301      	movs	r3, #1
    f0ce:	421d      	tst	r5, r3
    f0d0:	d008      	beq.n	f0e4 <_dtoa_r+0x334>
    f0d2:	9810      	ldr	r0, [sp, #64]	; 0x40
    f0d4:	9911      	ldr	r1, [sp, #68]	; 0x44
    f0d6:	18e4      	adds	r4, r4, r3
    f0d8:	6832      	ldr	r2, [r6, #0]
    f0da:	6873      	ldr	r3, [r6, #4]
    f0dc:	f002 fcb8 	bl	11a50 <__aeabi_dmul>
    f0e0:	9010      	str	r0, [sp, #64]	; 0x40
    f0e2:	9111      	str	r1, [sp, #68]	; 0x44
    f0e4:	106d      	asrs	r5, r5, #1
    f0e6:	3608      	adds	r6, #8
    f0e8:	e7bd      	b.n	f066 <_dtoa_r+0x2b6>
    f0ea:	46c0      	nop			; (mov r8, r8)
    f0ec:	7ff00000 	.word	0x7ff00000
    f0f0:	0000270f 	.word	0x0000270f
    f0f4:	00014280 	.word	0x00014280
    f0f8:	00014283 	.word	0x00014283
    f0fc:	00014152 	.word	0x00014152
    f100:	00014153 	.word	0x00014153
    f104:	3ff00000 	.word	0x3ff00000
    f108:	fffffc01 	.word	0xfffffc01
    f10c:	3ff80000 	.word	0x3ff80000
    f110:	636f4361 	.word	0x636f4361
    f114:	3fd287a7 	.word	0x3fd287a7
    f118:	8b60c8b3 	.word	0x8b60c8b3
    f11c:	3fc68a28 	.word	0x3fc68a28
    f120:	509f79fb 	.word	0x509f79fb
    f124:	3fd34413 	.word	0x3fd34413
    f128:	00014310 	.word	0x00014310
    f12c:	00000432 	.word	0x00000432
    f130:	00000412 	.word	0x00000412
    f134:	fe100000 	.word	0xfe100000
    f138:	000142e8 	.word	0x000142e8
    f13c:	9b03      	ldr	r3, [sp, #12]
    f13e:	2402      	movs	r4, #2
    f140:	2b00      	cmp	r3, #0
    f142:	d016      	beq.n	f172 <_dtoa_r+0x3c2>
    f144:	9814      	ldr	r0, [sp, #80]	; 0x50
    f146:	9915      	ldr	r1, [sp, #84]	; 0x54
    f148:	425d      	negs	r5, r3
    f14a:	230f      	movs	r3, #15
    f14c:	4aca      	ldr	r2, [pc, #808]	; (f478 <_dtoa_r+0x6c8>)
    f14e:	402b      	ands	r3, r5
    f150:	00db      	lsls	r3, r3, #3
    f152:	18d3      	adds	r3, r2, r3
    f154:	681a      	ldr	r2, [r3, #0]
    f156:	685b      	ldr	r3, [r3, #4]
    f158:	f002 fc7a 	bl	11a50 <__aeabi_dmul>
    f15c:	2300      	movs	r3, #0
    f15e:	9006      	str	r0, [sp, #24]
    f160:	9107      	str	r1, [sp, #28]
    f162:	4ec6      	ldr	r6, [pc, #792]	; (f47c <_dtoa_r+0x6cc>)
    f164:	112d      	asrs	r5, r5, #4
    f166:	2d00      	cmp	r5, #0
    f168:	d000      	beq.n	f16c <_dtoa_r+0x3bc>
    f16a:	e08c      	b.n	f286 <_dtoa_r+0x4d6>
    f16c:	2b00      	cmp	r3, #0
    f16e:	d000      	beq.n	f172 <_dtoa_r+0x3c2>
    f170:	e781      	b.n	f076 <_dtoa_r+0x2c6>
    f172:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f174:	2b00      	cmp	r3, #0
    f176:	d100      	bne.n	f17a <_dtoa_r+0x3ca>
    f178:	e091      	b.n	f29e <_dtoa_r+0x4ee>
    f17a:	9a06      	ldr	r2, [sp, #24]
    f17c:	9b07      	ldr	r3, [sp, #28]
    f17e:	9210      	str	r2, [sp, #64]	; 0x40
    f180:	9311      	str	r3, [sp, #68]	; 0x44
    f182:	9810      	ldr	r0, [sp, #64]	; 0x40
    f184:	9911      	ldr	r1, [sp, #68]	; 0x44
    f186:	2200      	movs	r2, #0
    f188:	4bbd      	ldr	r3, [pc, #756]	; (f480 <_dtoa_r+0x6d0>)
    f18a:	f001 fccb 	bl	10b24 <__aeabi_dcmplt>
    f18e:	2800      	cmp	r0, #0
    f190:	d100      	bne.n	f194 <_dtoa_r+0x3e4>
    f192:	e084      	b.n	f29e <_dtoa_r+0x4ee>
    f194:	2f00      	cmp	r7, #0
    f196:	d100      	bne.n	f19a <_dtoa_r+0x3ea>
    f198:	e081      	b.n	f29e <_dtoa_r+0x4ee>
    f19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f19c:	2b00      	cmp	r3, #0
    f19e:	dd3e      	ble.n	f21e <_dtoa_r+0x46e>
    f1a0:	9810      	ldr	r0, [sp, #64]	; 0x40
    f1a2:	9911      	ldr	r1, [sp, #68]	; 0x44
    f1a4:	9b03      	ldr	r3, [sp, #12]
    f1a6:	2200      	movs	r2, #0
    f1a8:	1e5e      	subs	r6, r3, #1
    f1aa:	4bb6      	ldr	r3, [pc, #728]	; (f484 <_dtoa_r+0x6d4>)
    f1ac:	f002 fc50 	bl	11a50 <__aeabi_dmul>
    f1b0:	9006      	str	r0, [sp, #24]
    f1b2:	9107      	str	r1, [sp, #28]
    f1b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f1b6:	3401      	adds	r4, #1
    f1b8:	0020      	movs	r0, r4
    f1ba:	f003 fa33 	bl	12624 <__aeabi_i2d>
    f1be:	9a06      	ldr	r2, [sp, #24]
    f1c0:	9b07      	ldr	r3, [sp, #28]
    f1c2:	f002 fc45 	bl	11a50 <__aeabi_dmul>
    f1c6:	2200      	movs	r2, #0
    f1c8:	4baf      	ldr	r3, [pc, #700]	; (f488 <_dtoa_r+0x6d8>)
    f1ca:	f001 fcfd 	bl	10bc8 <__aeabi_dadd>
    f1ce:	9012      	str	r0, [sp, #72]	; 0x48
    f1d0:	9113      	str	r1, [sp, #76]	; 0x4c
    f1d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f1d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    f1d6:	4aad      	ldr	r2, [pc, #692]	; (f48c <_dtoa_r+0x6dc>)
    f1d8:	9310      	str	r3, [sp, #64]	; 0x40
    f1da:	9411      	str	r4, [sp, #68]	; 0x44
    f1dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f1de:	189c      	adds	r4, r3, r2
    f1e0:	9411      	str	r4, [sp, #68]	; 0x44
    f1e2:	2d00      	cmp	r5, #0
    f1e4:	d15e      	bne.n	f2a4 <_dtoa_r+0x4f4>
    f1e6:	9806      	ldr	r0, [sp, #24]
    f1e8:	9907      	ldr	r1, [sp, #28]
    f1ea:	2200      	movs	r2, #0
    f1ec:	4ba8      	ldr	r3, [pc, #672]	; (f490 <_dtoa_r+0x6e0>)
    f1ee:	f002 feaf 	bl	11f50 <__aeabi_dsub>
    f1f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f1f4:	0023      	movs	r3, r4
    f1f6:	9006      	str	r0, [sp, #24]
    f1f8:	9107      	str	r1, [sp, #28]
    f1fa:	f001 fca7 	bl	10b4c <__aeabi_dcmpgt>
    f1fe:	2800      	cmp	r0, #0
    f200:	d000      	beq.n	f204 <_dtoa_r+0x454>
    f202:	e301      	b.n	f808 <_dtoa_r+0xa58>
    f204:	48a3      	ldr	r0, [pc, #652]	; (f494 <_dtoa_r+0x6e4>)
    f206:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f208:	4684      	mov	ip, r0
    f20a:	4461      	add	r1, ip
    f20c:	000b      	movs	r3, r1
    f20e:	9806      	ldr	r0, [sp, #24]
    f210:	9907      	ldr	r1, [sp, #28]
    f212:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f214:	f001 fc86 	bl	10b24 <__aeabi_dcmplt>
    f218:	2800      	cmp	r0, #0
    f21a:	d000      	beq.n	f21e <_dtoa_r+0x46e>
    f21c:	e2e8      	b.n	f7f0 <_dtoa_r+0xa40>
    f21e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f220:	9c15      	ldr	r4, [sp, #84]	; 0x54
    f222:	9306      	str	r3, [sp, #24]
    f224:	9407      	str	r4, [sp, #28]
    f226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f228:	2b00      	cmp	r3, #0
    f22a:	da00      	bge.n	f22e <_dtoa_r+0x47e>
    f22c:	e157      	b.n	f4de <_dtoa_r+0x72e>
    f22e:	9a03      	ldr	r2, [sp, #12]
    f230:	2a0e      	cmp	r2, #14
    f232:	dd00      	ble.n	f236 <_dtoa_r+0x486>
    f234:	e153      	b.n	f4de <_dtoa_r+0x72e>
    f236:	4b90      	ldr	r3, [pc, #576]	; (f478 <_dtoa_r+0x6c8>)
    f238:	00d2      	lsls	r2, r2, #3
    f23a:	189b      	adds	r3, r3, r2
    f23c:	685c      	ldr	r4, [r3, #4]
    f23e:	681b      	ldr	r3, [r3, #0]
    f240:	9308      	str	r3, [sp, #32]
    f242:	9409      	str	r4, [sp, #36]	; 0x24
    f244:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f246:	2b00      	cmp	r3, #0
    f248:	db00      	blt.n	f24c <_dtoa_r+0x49c>
    f24a:	e0ce      	b.n	f3ea <_dtoa_r+0x63a>
    f24c:	2f00      	cmp	r7, #0
    f24e:	dd00      	ble.n	f252 <_dtoa_r+0x4a2>
    f250:	e0cb      	b.n	f3ea <_dtoa_r+0x63a>
    f252:	d000      	beq.n	f256 <_dtoa_r+0x4a6>
    f254:	e2cf      	b.n	f7f6 <_dtoa_r+0xa46>
    f256:	9808      	ldr	r0, [sp, #32]
    f258:	9909      	ldr	r1, [sp, #36]	; 0x24
    f25a:	2200      	movs	r2, #0
    f25c:	4b8c      	ldr	r3, [pc, #560]	; (f490 <_dtoa_r+0x6e0>)
    f25e:	f002 fbf7 	bl	11a50 <__aeabi_dmul>
    f262:	9a06      	ldr	r2, [sp, #24]
    f264:	9b07      	ldr	r3, [sp, #28]
    f266:	f001 fc7b 	bl	10b60 <__aeabi_dcmpge>
    f26a:	003e      	movs	r6, r7
    f26c:	9708      	str	r7, [sp, #32]
    f26e:	2800      	cmp	r0, #0
    f270:	d000      	beq.n	f274 <_dtoa_r+0x4c4>
    f272:	e2a4      	b.n	f7be <_dtoa_r+0xa0e>
    f274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f278:	1c5d      	adds	r5, r3, #1
    f27a:	2331      	movs	r3, #49	; 0x31
    f27c:	7013      	strb	r3, [r2, #0]
    f27e:	9b03      	ldr	r3, [sp, #12]
    f280:	3301      	adds	r3, #1
    f282:	9303      	str	r3, [sp, #12]
    f284:	e29f      	b.n	f7c6 <_dtoa_r+0xa16>
    f286:	2201      	movs	r2, #1
    f288:	4215      	tst	r5, r2
    f28a:	d005      	beq.n	f298 <_dtoa_r+0x4e8>
    f28c:	18a4      	adds	r4, r4, r2
    f28e:	6832      	ldr	r2, [r6, #0]
    f290:	6873      	ldr	r3, [r6, #4]
    f292:	f002 fbdd 	bl	11a50 <__aeabi_dmul>
    f296:	2301      	movs	r3, #1
    f298:	106d      	asrs	r5, r5, #1
    f29a:	3608      	adds	r6, #8
    f29c:	e763      	b.n	f166 <_dtoa_r+0x3b6>
    f29e:	9e03      	ldr	r6, [sp, #12]
    f2a0:	003d      	movs	r5, r7
    f2a2:	e789      	b.n	f1b8 <_dtoa_r+0x408>
    f2a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f2a6:	1e69      	subs	r1, r5, #1
    f2a8:	1952      	adds	r2, r2, r5
    f2aa:	9217      	str	r2, [sp, #92]	; 0x5c
    f2ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f2ae:	4b72      	ldr	r3, [pc, #456]	; (f478 <_dtoa_r+0x6c8>)
    f2b0:	00c9      	lsls	r1, r1, #3
    f2b2:	2a00      	cmp	r2, #0
    f2b4:	d04a      	beq.n	f34c <_dtoa_r+0x59c>
    f2b6:	185b      	adds	r3, r3, r1
    f2b8:	681a      	ldr	r2, [r3, #0]
    f2ba:	685b      	ldr	r3, [r3, #4]
    f2bc:	2000      	movs	r0, #0
    f2be:	4976      	ldr	r1, [pc, #472]	; (f498 <_dtoa_r+0x6e8>)
    f2c0:	f001 ff92 	bl	111e8 <__aeabi_ddiv>
    f2c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f2c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f2c8:	f002 fe42 	bl	11f50 <__aeabi_dsub>
    f2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2ce:	9010      	str	r0, [sp, #64]	; 0x40
    f2d0:	9111      	str	r1, [sp, #68]	; 0x44
    f2d2:	9312      	str	r3, [sp, #72]	; 0x48
    f2d4:	9806      	ldr	r0, [sp, #24]
    f2d6:	9907      	ldr	r1, [sp, #28]
    f2d8:	f003 f970 	bl	125bc <__aeabi_d2iz>
    f2dc:	0004      	movs	r4, r0
    f2de:	f003 f9a1 	bl	12624 <__aeabi_i2d>
    f2e2:	0002      	movs	r2, r0
    f2e4:	000b      	movs	r3, r1
    f2e6:	9806      	ldr	r0, [sp, #24]
    f2e8:	9907      	ldr	r1, [sp, #28]
    f2ea:	f002 fe31 	bl	11f50 <__aeabi_dsub>
    f2ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f2f0:	3430      	adds	r4, #48	; 0x30
    f2f2:	1c5d      	adds	r5, r3, #1
    f2f4:	701c      	strb	r4, [r3, #0]
    f2f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f2f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f2fa:	9006      	str	r0, [sp, #24]
    f2fc:	9107      	str	r1, [sp, #28]
    f2fe:	f001 fc11 	bl	10b24 <__aeabi_dcmplt>
    f302:	2800      	cmp	r0, #0
    f304:	d165      	bne.n	f3d2 <_dtoa_r+0x622>
    f306:	9a06      	ldr	r2, [sp, #24]
    f308:	9b07      	ldr	r3, [sp, #28]
    f30a:	2000      	movs	r0, #0
    f30c:	495c      	ldr	r1, [pc, #368]	; (f480 <_dtoa_r+0x6d0>)
    f30e:	f002 fe1f 	bl	11f50 <__aeabi_dsub>
    f312:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f314:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f316:	f001 fc05 	bl	10b24 <__aeabi_dcmplt>
    f31a:	2800      	cmp	r0, #0
    f31c:	d000      	beq.n	f320 <_dtoa_r+0x570>
    f31e:	e0be      	b.n	f49e <_dtoa_r+0x6ee>
    f320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f322:	429d      	cmp	r5, r3
    f324:	d100      	bne.n	f328 <_dtoa_r+0x578>
    f326:	e77a      	b.n	f21e <_dtoa_r+0x46e>
    f328:	9810      	ldr	r0, [sp, #64]	; 0x40
    f32a:	9911      	ldr	r1, [sp, #68]	; 0x44
    f32c:	2200      	movs	r2, #0
    f32e:	4b55      	ldr	r3, [pc, #340]	; (f484 <_dtoa_r+0x6d4>)
    f330:	f002 fb8e 	bl	11a50 <__aeabi_dmul>
    f334:	2200      	movs	r2, #0
    f336:	9010      	str	r0, [sp, #64]	; 0x40
    f338:	9111      	str	r1, [sp, #68]	; 0x44
    f33a:	9806      	ldr	r0, [sp, #24]
    f33c:	9907      	ldr	r1, [sp, #28]
    f33e:	4b51      	ldr	r3, [pc, #324]	; (f484 <_dtoa_r+0x6d4>)
    f340:	f002 fb86 	bl	11a50 <__aeabi_dmul>
    f344:	9512      	str	r5, [sp, #72]	; 0x48
    f346:	9006      	str	r0, [sp, #24]
    f348:	9107      	str	r1, [sp, #28]
    f34a:	e7c3      	b.n	f2d4 <_dtoa_r+0x524>
    f34c:	1859      	adds	r1, r3, r1
    f34e:	6808      	ldr	r0, [r1, #0]
    f350:	6849      	ldr	r1, [r1, #4]
    f352:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f354:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f356:	f002 fb7b 	bl	11a50 <__aeabi_dmul>
    f35a:	9010      	str	r0, [sp, #64]	; 0x40
    f35c:	9111      	str	r1, [sp, #68]	; 0x44
    f35e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f360:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    f362:	9806      	ldr	r0, [sp, #24]
    f364:	9907      	ldr	r1, [sp, #28]
    f366:	f003 f929 	bl	125bc <__aeabi_d2iz>
    f36a:	9012      	str	r0, [sp, #72]	; 0x48
    f36c:	f003 f95a 	bl	12624 <__aeabi_i2d>
    f370:	0002      	movs	r2, r0
    f372:	000b      	movs	r3, r1
    f374:	9806      	ldr	r0, [sp, #24]
    f376:	9907      	ldr	r1, [sp, #28]
    f378:	f002 fdea 	bl	11f50 <__aeabi_dsub>
    f37c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f37e:	9006      	str	r0, [sp, #24]
    f380:	9107      	str	r1, [sp, #28]
    f382:	3330      	adds	r3, #48	; 0x30
    f384:	7023      	strb	r3, [r4, #0]
    f386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f388:	3401      	adds	r4, #1
    f38a:	2200      	movs	r2, #0
    f38c:	42a3      	cmp	r3, r4
    f38e:	d124      	bne.n	f3da <_dtoa_r+0x62a>
    f390:	4b41      	ldr	r3, [pc, #260]	; (f498 <_dtoa_r+0x6e8>)
    f392:	9810      	ldr	r0, [sp, #64]	; 0x40
    f394:	9911      	ldr	r1, [sp, #68]	; 0x44
    f396:	f001 fc17 	bl	10bc8 <__aeabi_dadd>
    f39a:	0002      	movs	r2, r0
    f39c:	000b      	movs	r3, r1
    f39e:	9806      	ldr	r0, [sp, #24]
    f3a0:	9907      	ldr	r1, [sp, #28]
    f3a2:	f001 fbd3 	bl	10b4c <__aeabi_dcmpgt>
    f3a6:	2800      	cmp	r0, #0
    f3a8:	d000      	beq.n	f3ac <_dtoa_r+0x5fc>
    f3aa:	e078      	b.n	f49e <_dtoa_r+0x6ee>
    f3ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f3ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f3b0:	2000      	movs	r0, #0
    f3b2:	4939      	ldr	r1, [pc, #228]	; (f498 <_dtoa_r+0x6e8>)
    f3b4:	f002 fdcc 	bl	11f50 <__aeabi_dsub>
    f3b8:	0002      	movs	r2, r0
    f3ba:	000b      	movs	r3, r1
    f3bc:	9806      	ldr	r0, [sp, #24]
    f3be:	9907      	ldr	r1, [sp, #28]
    f3c0:	f001 fbb0 	bl	10b24 <__aeabi_dcmplt>
    f3c4:	2800      	cmp	r0, #0
    f3c6:	d100      	bne.n	f3ca <_dtoa_r+0x61a>
    f3c8:	e729      	b.n	f21e <_dtoa_r+0x46e>
    f3ca:	1e6b      	subs	r3, r5, #1
    f3cc:	781a      	ldrb	r2, [r3, #0]
    f3ce:	2a30      	cmp	r2, #48	; 0x30
    f3d0:	d001      	beq.n	f3d6 <_dtoa_r+0x626>
    f3d2:	9603      	str	r6, [sp, #12]
    f3d4:	e03f      	b.n	f456 <_dtoa_r+0x6a6>
    f3d6:	001d      	movs	r5, r3
    f3d8:	e7f7      	b.n	f3ca <_dtoa_r+0x61a>
    f3da:	9806      	ldr	r0, [sp, #24]
    f3dc:	9907      	ldr	r1, [sp, #28]
    f3de:	4b29      	ldr	r3, [pc, #164]	; (f484 <_dtoa_r+0x6d4>)
    f3e0:	f002 fb36 	bl	11a50 <__aeabi_dmul>
    f3e4:	9006      	str	r0, [sp, #24]
    f3e6:	9107      	str	r1, [sp, #28]
    f3e8:	e7bb      	b.n	f362 <_dtoa_r+0x5b2>
    f3ea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    f3ec:	9a08      	ldr	r2, [sp, #32]
    f3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f3f0:	9806      	ldr	r0, [sp, #24]
    f3f2:	9907      	ldr	r1, [sp, #28]
    f3f4:	f001 fef8 	bl	111e8 <__aeabi_ddiv>
    f3f8:	f003 f8e0 	bl	125bc <__aeabi_d2iz>
    f3fc:	0004      	movs	r4, r0
    f3fe:	f003 f911 	bl	12624 <__aeabi_i2d>
    f402:	9a08      	ldr	r2, [sp, #32]
    f404:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f406:	f002 fb23 	bl	11a50 <__aeabi_dmul>
    f40a:	000b      	movs	r3, r1
    f40c:	0002      	movs	r2, r0
    f40e:	9806      	ldr	r0, [sp, #24]
    f410:	9907      	ldr	r1, [sp, #28]
    f412:	f002 fd9d 	bl	11f50 <__aeabi_dsub>
    f416:	0023      	movs	r3, r4
    f418:	3330      	adds	r3, #48	; 0x30
    f41a:	7033      	strb	r3, [r6, #0]
    f41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f41e:	1c75      	adds	r5, r6, #1
    f420:	1aeb      	subs	r3, r5, r3
    f422:	429f      	cmp	r7, r3
    f424:	d14c      	bne.n	f4c0 <_dtoa_r+0x710>
    f426:	0002      	movs	r2, r0
    f428:	000b      	movs	r3, r1
    f42a:	f001 fbcd 	bl	10bc8 <__aeabi_dadd>
    f42e:	0006      	movs	r6, r0
    f430:	000f      	movs	r7, r1
    f432:	0002      	movs	r2, r0
    f434:	000b      	movs	r3, r1
    f436:	9808      	ldr	r0, [sp, #32]
    f438:	9909      	ldr	r1, [sp, #36]	; 0x24
    f43a:	f001 fb73 	bl	10b24 <__aeabi_dcmplt>
    f43e:	2800      	cmp	r0, #0
    f440:	d12c      	bne.n	f49c <_dtoa_r+0x6ec>
    f442:	9808      	ldr	r0, [sp, #32]
    f444:	9909      	ldr	r1, [sp, #36]	; 0x24
    f446:	0032      	movs	r2, r6
    f448:	003b      	movs	r3, r7
    f44a:	f001 fb65 	bl	10b18 <__aeabi_dcmpeq>
    f44e:	2800      	cmp	r0, #0
    f450:	d001      	beq.n	f456 <_dtoa_r+0x6a6>
    f452:	07e3      	lsls	r3, r4, #31
    f454:	d422      	bmi.n	f49c <_dtoa_r+0x6ec>
    f456:	9905      	ldr	r1, [sp, #20]
    f458:	9804      	ldr	r0, [sp, #16]
    f45a:	f000 fcdc 	bl	fe16 <_Bfree>
    f45e:	2300      	movs	r3, #0
    f460:	702b      	strb	r3, [r5, #0]
    f462:	9b03      	ldr	r3, [sp, #12]
    f464:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f466:	3301      	adds	r3, #1
    f468:	6013      	str	r3, [r2, #0]
    f46a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f46c:	2b00      	cmp	r3, #0
    f46e:	d100      	bne.n	f472 <_dtoa_r+0x6c2>
    f470:	e275      	b.n	f95e <_dtoa_r+0xbae>
    f472:	601d      	str	r5, [r3, #0]
    f474:	e273      	b.n	f95e <_dtoa_r+0xbae>
    f476:	46c0      	nop			; (mov r8, r8)
    f478:	00014310 	.word	0x00014310
    f47c:	000142e8 	.word	0x000142e8
    f480:	3ff00000 	.word	0x3ff00000
    f484:	40240000 	.word	0x40240000
    f488:	401c0000 	.word	0x401c0000
    f48c:	fcc00000 	.word	0xfcc00000
    f490:	40140000 	.word	0x40140000
    f494:	7cc00000 	.word	0x7cc00000
    f498:	3fe00000 	.word	0x3fe00000
    f49c:	9e03      	ldr	r6, [sp, #12]
    f49e:	1e6b      	subs	r3, r5, #1
    f4a0:	781a      	ldrb	r2, [r3, #0]
    f4a2:	2a39      	cmp	r2, #57	; 0x39
    f4a4:	d106      	bne.n	f4b4 <_dtoa_r+0x704>
    f4a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f4a8:	429a      	cmp	r2, r3
    f4aa:	d107      	bne.n	f4bc <_dtoa_r+0x70c>
    f4ac:	2330      	movs	r3, #48	; 0x30
    f4ae:	7013      	strb	r3, [r2, #0]
    f4b0:	0013      	movs	r3, r2
    f4b2:	3601      	adds	r6, #1
    f4b4:	781a      	ldrb	r2, [r3, #0]
    f4b6:	3201      	adds	r2, #1
    f4b8:	701a      	strb	r2, [r3, #0]
    f4ba:	e78a      	b.n	f3d2 <_dtoa_r+0x622>
    f4bc:	001d      	movs	r5, r3
    f4be:	e7ee      	b.n	f49e <_dtoa_r+0x6ee>
    f4c0:	2200      	movs	r2, #0
    f4c2:	4bcf      	ldr	r3, [pc, #828]	; (f800 <_dtoa_r+0xa50>)
    f4c4:	f002 fac4 	bl	11a50 <__aeabi_dmul>
    f4c8:	2200      	movs	r2, #0
    f4ca:	2300      	movs	r3, #0
    f4cc:	9006      	str	r0, [sp, #24]
    f4ce:	9107      	str	r1, [sp, #28]
    f4d0:	002e      	movs	r6, r5
    f4d2:	f001 fb21 	bl	10b18 <__aeabi_dcmpeq>
    f4d6:	2800      	cmp	r0, #0
    f4d8:	d100      	bne.n	f4dc <_dtoa_r+0x72c>
    f4da:	e787      	b.n	f3ec <_dtoa_r+0x63c>
    f4dc:	e7bb      	b.n	f456 <_dtoa_r+0x6a6>
    f4de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f4e0:	2a00      	cmp	r2, #0
    f4e2:	d100      	bne.n	f4e6 <_dtoa_r+0x736>
    f4e4:	e087      	b.n	f5f6 <_dtoa_r+0x846>
    f4e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    f4e8:	2a01      	cmp	r2, #1
    f4ea:	dc6e      	bgt.n	f5ca <_dtoa_r+0x81a>
    f4ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    f4ee:	2a00      	cmp	r2, #0
    f4f0:	d067      	beq.n	f5c2 <_dtoa_r+0x812>
    f4f2:	4ac4      	ldr	r2, [pc, #784]	; (f804 <_dtoa_r+0xa54>)
    f4f4:	189b      	adds	r3, r3, r2
    f4f6:	9d08      	ldr	r5, [sp, #32]
    f4f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    f4fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f4fc:	2101      	movs	r1, #1
    f4fe:	18d2      	adds	r2, r2, r3
    f500:	920b      	str	r2, [sp, #44]	; 0x2c
    f502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f504:	9804      	ldr	r0, [sp, #16]
    f506:	18d3      	adds	r3, r2, r3
    f508:	930c      	str	r3, [sp, #48]	; 0x30
    f50a:	f000 fd22 	bl	ff52 <__i2b>
    f50e:	0006      	movs	r6, r0
    f510:	2c00      	cmp	r4, #0
    f512:	dd0e      	ble.n	f532 <_dtoa_r+0x782>
    f514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f516:	2b00      	cmp	r3, #0
    f518:	dd0b      	ble.n	f532 <_dtoa_r+0x782>
    f51a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f51c:	0023      	movs	r3, r4
    f51e:	4294      	cmp	r4, r2
    f520:	dd00      	ble.n	f524 <_dtoa_r+0x774>
    f522:	0013      	movs	r3, r2
    f524:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f526:	1ae4      	subs	r4, r4, r3
    f528:	1ad2      	subs	r2, r2, r3
    f52a:	920b      	str	r2, [sp, #44]	; 0x2c
    f52c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f52e:	1ad3      	subs	r3, r2, r3
    f530:	930c      	str	r3, [sp, #48]	; 0x30
    f532:	9b08      	ldr	r3, [sp, #32]
    f534:	2b00      	cmp	r3, #0
    f536:	d01e      	beq.n	f576 <_dtoa_r+0x7c6>
    f538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f53a:	2b00      	cmp	r3, #0
    f53c:	d05f      	beq.n	f5fe <_dtoa_r+0x84e>
    f53e:	2d00      	cmp	r5, #0
    f540:	dd11      	ble.n	f566 <_dtoa_r+0x7b6>
    f542:	0031      	movs	r1, r6
    f544:	002a      	movs	r2, r5
    f546:	9804      	ldr	r0, [sp, #16]
    f548:	f000 fd9c 	bl	10084 <__pow5mult>
    f54c:	9a05      	ldr	r2, [sp, #20]
    f54e:	0001      	movs	r1, r0
    f550:	0006      	movs	r6, r0
    f552:	9804      	ldr	r0, [sp, #16]
    f554:	f000 fd06 	bl	ff64 <__multiply>
    f558:	9905      	ldr	r1, [sp, #20]
    f55a:	9010      	str	r0, [sp, #64]	; 0x40
    f55c:	9804      	ldr	r0, [sp, #16]
    f55e:	f000 fc5a 	bl	fe16 <_Bfree>
    f562:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f564:	9305      	str	r3, [sp, #20]
    f566:	9b08      	ldr	r3, [sp, #32]
    f568:	1b5a      	subs	r2, r3, r5
    f56a:	d004      	beq.n	f576 <_dtoa_r+0x7c6>
    f56c:	9905      	ldr	r1, [sp, #20]
    f56e:	9804      	ldr	r0, [sp, #16]
    f570:	f000 fd88 	bl	10084 <__pow5mult>
    f574:	9005      	str	r0, [sp, #20]
    f576:	2101      	movs	r1, #1
    f578:	9804      	ldr	r0, [sp, #16]
    f57a:	f000 fcea 	bl	ff52 <__i2b>
    f57e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f580:	9008      	str	r0, [sp, #32]
    f582:	2b00      	cmp	r3, #0
    f584:	dd3d      	ble.n	f602 <_dtoa_r+0x852>
    f586:	001a      	movs	r2, r3
    f588:	0001      	movs	r1, r0
    f58a:	9804      	ldr	r0, [sp, #16]
    f58c:	f000 fd7a 	bl	10084 <__pow5mult>
    f590:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f592:	9008      	str	r0, [sp, #32]
    f594:	2500      	movs	r5, #0
    f596:	2b01      	cmp	r3, #1
    f598:	dc3b      	bgt.n	f612 <_dtoa_r+0x862>
    f59a:	2500      	movs	r5, #0
    f59c:	9b06      	ldr	r3, [sp, #24]
    f59e:	42ab      	cmp	r3, r5
    f5a0:	d133      	bne.n	f60a <_dtoa_r+0x85a>
    f5a2:	9b07      	ldr	r3, [sp, #28]
    f5a4:	031b      	lsls	r3, r3, #12
    f5a6:	42ab      	cmp	r3, r5
    f5a8:	d12f      	bne.n	f60a <_dtoa_r+0x85a>
    f5aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f5ac:	9a07      	ldr	r2, [sp, #28]
    f5ae:	4213      	tst	r3, r2
    f5b0:	d02b      	beq.n	f60a <_dtoa_r+0x85a>
    f5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5b4:	3501      	adds	r5, #1
    f5b6:	3301      	adds	r3, #1
    f5b8:	930b      	str	r3, [sp, #44]	; 0x2c
    f5ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f5bc:	3301      	adds	r3, #1
    f5be:	930c      	str	r3, [sp, #48]	; 0x30
    f5c0:	e023      	b.n	f60a <_dtoa_r+0x85a>
    f5c2:	2336      	movs	r3, #54	; 0x36
    f5c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    f5c6:	1a9b      	subs	r3, r3, r2
    f5c8:	e795      	b.n	f4f6 <_dtoa_r+0x746>
    f5ca:	9b08      	ldr	r3, [sp, #32]
    f5cc:	1e7d      	subs	r5, r7, #1
    f5ce:	42ab      	cmp	r3, r5
    f5d0:	db06      	blt.n	f5e0 <_dtoa_r+0x830>
    f5d2:	1b5d      	subs	r5, r3, r5
    f5d4:	2f00      	cmp	r7, #0
    f5d6:	da0b      	bge.n	f5f0 <_dtoa_r+0x840>
    f5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5da:	1bdc      	subs	r4, r3, r7
    f5dc:	2300      	movs	r3, #0
    f5de:	e78c      	b.n	f4fa <_dtoa_r+0x74a>
    f5e0:	9b08      	ldr	r3, [sp, #32]
    f5e2:	9508      	str	r5, [sp, #32]
    f5e4:	1aea      	subs	r2, r5, r3
    f5e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f5e8:	2500      	movs	r5, #0
    f5ea:	189b      	adds	r3, r3, r2
    f5ec:	930f      	str	r3, [sp, #60]	; 0x3c
    f5ee:	e7f1      	b.n	f5d4 <_dtoa_r+0x824>
    f5f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    f5f2:	003b      	movs	r3, r7
    f5f4:	e781      	b.n	f4fa <_dtoa_r+0x74a>
    f5f6:	9d08      	ldr	r5, [sp, #32]
    f5f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    f5fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    f5fc:	e788      	b.n	f510 <_dtoa_r+0x760>
    f5fe:	9a08      	ldr	r2, [sp, #32]
    f600:	e7b4      	b.n	f56c <_dtoa_r+0x7bc>
    f602:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f604:	2500      	movs	r5, #0
    f606:	2b01      	cmp	r3, #1
    f608:	ddc7      	ble.n	f59a <_dtoa_r+0x7ea>
    f60a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f60c:	2001      	movs	r0, #1
    f60e:	2b00      	cmp	r3, #0
    f610:	d00b      	beq.n	f62a <_dtoa_r+0x87a>
    f612:	9b08      	ldr	r3, [sp, #32]
    f614:	9a08      	ldr	r2, [sp, #32]
    f616:	691b      	ldr	r3, [r3, #16]
    f618:	930f      	str	r3, [sp, #60]	; 0x3c
    f61a:	3303      	adds	r3, #3
    f61c:	009b      	lsls	r3, r3, #2
    f61e:	18d3      	adds	r3, r2, r3
    f620:	6858      	ldr	r0, [r3, #4]
    f622:	f000 fc4d 	bl	fec0 <__hi0bits>
    f626:	2320      	movs	r3, #32
    f628:	1a18      	subs	r0, r3, r0
    f62a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f62c:	18c0      	adds	r0, r0, r3
    f62e:	231f      	movs	r3, #31
    f630:	4018      	ands	r0, r3
    f632:	d100      	bne.n	f636 <_dtoa_r+0x886>
    f634:	e0ab      	b.n	f78e <_dtoa_r+0x9de>
    f636:	3301      	adds	r3, #1
    f638:	1a1b      	subs	r3, r3, r0
    f63a:	2b04      	cmp	r3, #4
    f63c:	dc00      	bgt.n	f640 <_dtoa_r+0x890>
    f63e:	e09b      	b.n	f778 <_dtoa_r+0x9c8>
    f640:	231c      	movs	r3, #28
    f642:	1a18      	subs	r0, r3, r0
    f644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f646:	1824      	adds	r4, r4, r0
    f648:	181b      	adds	r3, r3, r0
    f64a:	930b      	str	r3, [sp, #44]	; 0x2c
    f64c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f64e:	181b      	adds	r3, r3, r0
    f650:	930c      	str	r3, [sp, #48]	; 0x30
    f652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f654:	2b00      	cmp	r3, #0
    f656:	dd05      	ble.n	f664 <_dtoa_r+0x8b4>
    f658:	001a      	movs	r2, r3
    f65a:	9905      	ldr	r1, [sp, #20]
    f65c:	9804      	ldr	r0, [sp, #16]
    f65e:	f000 fd63 	bl	10128 <__lshift>
    f662:	9005      	str	r0, [sp, #20]
    f664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f666:	2b00      	cmp	r3, #0
    f668:	dd05      	ble.n	f676 <_dtoa_r+0x8c6>
    f66a:	001a      	movs	r2, r3
    f66c:	9908      	ldr	r1, [sp, #32]
    f66e:	9804      	ldr	r0, [sp, #16]
    f670:	f000 fd5a 	bl	10128 <__lshift>
    f674:	9008      	str	r0, [sp, #32]
    f676:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f678:	2b00      	cmp	r3, #0
    f67a:	d100      	bne.n	f67e <_dtoa_r+0x8ce>
    f67c:	e089      	b.n	f792 <_dtoa_r+0x9e2>
    f67e:	9908      	ldr	r1, [sp, #32]
    f680:	9805      	ldr	r0, [sp, #20]
    f682:	f000 fda2 	bl	101ca <__mcmp>
    f686:	2800      	cmp	r0, #0
    f688:	db00      	blt.n	f68c <_dtoa_r+0x8dc>
    f68a:	e082      	b.n	f792 <_dtoa_r+0x9e2>
    f68c:	9b03      	ldr	r3, [sp, #12]
    f68e:	220a      	movs	r2, #10
    f690:	3b01      	subs	r3, #1
    f692:	9303      	str	r3, [sp, #12]
    f694:	9905      	ldr	r1, [sp, #20]
    f696:	2300      	movs	r3, #0
    f698:	9804      	ldr	r0, [sp, #16]
    f69a:	f000 fbd5 	bl	fe48 <__multadd>
    f69e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f6a0:	9005      	str	r0, [sp, #20]
    f6a2:	2b00      	cmp	r3, #0
    f6a4:	d100      	bne.n	f6a8 <_dtoa_r+0x8f8>
    f6a6:	e15d      	b.n	f964 <_dtoa_r+0xbb4>
    f6a8:	2300      	movs	r3, #0
    f6aa:	0031      	movs	r1, r6
    f6ac:	220a      	movs	r2, #10
    f6ae:	9804      	ldr	r0, [sp, #16]
    f6b0:	f000 fbca 	bl	fe48 <__multadd>
    f6b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f6b6:	0006      	movs	r6, r0
    f6b8:	2b00      	cmp	r3, #0
    f6ba:	dc02      	bgt.n	f6c2 <_dtoa_r+0x912>
    f6bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f6be:	2b02      	cmp	r3, #2
    f6c0:	dc6d      	bgt.n	f79e <_dtoa_r+0x9ee>
    f6c2:	2c00      	cmp	r4, #0
    f6c4:	dd05      	ble.n	f6d2 <_dtoa_r+0x922>
    f6c6:	0031      	movs	r1, r6
    f6c8:	0022      	movs	r2, r4
    f6ca:	9804      	ldr	r0, [sp, #16]
    f6cc:	f000 fd2c 	bl	10128 <__lshift>
    f6d0:	0006      	movs	r6, r0
    f6d2:	0030      	movs	r0, r6
    f6d4:	2d00      	cmp	r5, #0
    f6d6:	d011      	beq.n	f6fc <_dtoa_r+0x94c>
    f6d8:	6871      	ldr	r1, [r6, #4]
    f6da:	9804      	ldr	r0, [sp, #16]
    f6dc:	f000 fb63 	bl	fda6 <_Balloc>
    f6e0:	0031      	movs	r1, r6
    f6e2:	0004      	movs	r4, r0
    f6e4:	6933      	ldr	r3, [r6, #16]
    f6e6:	310c      	adds	r1, #12
    f6e8:	1c9a      	adds	r2, r3, #2
    f6ea:	0092      	lsls	r2, r2, #2
    f6ec:	300c      	adds	r0, #12
    f6ee:	f7fe fb3d 	bl	dd6c <memcpy>
    f6f2:	2201      	movs	r2, #1
    f6f4:	0021      	movs	r1, r4
    f6f6:	9804      	ldr	r0, [sp, #16]
    f6f8:	f000 fd16 	bl	10128 <__lshift>
    f6fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f700:	3f01      	subs	r7, #1
    f702:	930b      	str	r3, [sp, #44]	; 0x2c
    f704:	19db      	adds	r3, r3, r7
    f706:	0037      	movs	r7, r6
    f708:	0006      	movs	r6, r0
    f70a:	930f      	str	r3, [sp, #60]	; 0x3c
    f70c:	9908      	ldr	r1, [sp, #32]
    f70e:	9805      	ldr	r0, [sp, #20]
    f710:	f7ff faca 	bl	eca8 <quorem>
    f714:	0039      	movs	r1, r7
    f716:	900d      	str	r0, [sp, #52]	; 0x34
    f718:	0004      	movs	r4, r0
    f71a:	9805      	ldr	r0, [sp, #20]
    f71c:	f000 fd55 	bl	101ca <__mcmp>
    f720:	0032      	movs	r2, r6
    f722:	900e      	str	r0, [sp, #56]	; 0x38
    f724:	9908      	ldr	r1, [sp, #32]
    f726:	9804      	ldr	r0, [sp, #16]
    f728:	f000 fd68 	bl	101fc <__mdiff>
    f72c:	2301      	movs	r3, #1
    f72e:	930c      	str	r3, [sp, #48]	; 0x30
    f730:	68c3      	ldr	r3, [r0, #12]
    f732:	3430      	adds	r4, #48	; 0x30
    f734:	0005      	movs	r5, r0
    f736:	2b00      	cmp	r3, #0
    f738:	d104      	bne.n	f744 <_dtoa_r+0x994>
    f73a:	0001      	movs	r1, r0
    f73c:	9805      	ldr	r0, [sp, #20]
    f73e:	f000 fd44 	bl	101ca <__mcmp>
    f742:	900c      	str	r0, [sp, #48]	; 0x30
    f744:	0029      	movs	r1, r5
    f746:	9804      	ldr	r0, [sp, #16]
    f748:	f000 fb65 	bl	fe16 <_Bfree>
    f74c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f74e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    f750:	4313      	orrs	r3, r2
    f752:	d000      	beq.n	f756 <_dtoa_r+0x9a6>
    f754:	e089      	b.n	f86a <_dtoa_r+0xaba>
    f756:	9a06      	ldr	r2, [sp, #24]
    f758:	3301      	adds	r3, #1
    f75a:	4213      	tst	r3, r2
    f75c:	d000      	beq.n	f760 <_dtoa_r+0x9b0>
    f75e:	e084      	b.n	f86a <_dtoa_r+0xaba>
    f760:	2c39      	cmp	r4, #57	; 0x39
    f762:	d100      	bne.n	f766 <_dtoa_r+0x9b6>
    f764:	e0a3      	b.n	f8ae <_dtoa_r+0xafe>
    f766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f768:	2b00      	cmp	r3, #0
    f76a:	dd01      	ble.n	f770 <_dtoa_r+0x9c0>
    f76c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    f76e:	3431      	adds	r4, #49	; 0x31
    f770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f772:	1c5d      	adds	r5, r3, #1
    f774:	701c      	strb	r4, [r3, #0]
    f776:	e027      	b.n	f7c8 <_dtoa_r+0xa18>
    f778:	2b04      	cmp	r3, #4
    f77a:	d100      	bne.n	f77e <_dtoa_r+0x9ce>
    f77c:	e769      	b.n	f652 <_dtoa_r+0x8a2>
    f77e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f780:	331c      	adds	r3, #28
    f782:	18d2      	adds	r2, r2, r3
    f784:	920b      	str	r2, [sp, #44]	; 0x2c
    f786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f788:	18e4      	adds	r4, r4, r3
    f78a:	18d3      	adds	r3, r2, r3
    f78c:	e760      	b.n	f650 <_dtoa_r+0x8a0>
    f78e:	0003      	movs	r3, r0
    f790:	e7f5      	b.n	f77e <_dtoa_r+0x9ce>
    f792:	2f00      	cmp	r7, #0
    f794:	dc3c      	bgt.n	f810 <_dtoa_r+0xa60>
    f796:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f798:	2b02      	cmp	r3, #2
    f79a:	dd39      	ble.n	f810 <_dtoa_r+0xa60>
    f79c:	970d      	str	r7, [sp, #52]	; 0x34
    f79e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f7a0:	2b00      	cmp	r3, #0
    f7a2:	d10c      	bne.n	f7be <_dtoa_r+0xa0e>
    f7a4:	9908      	ldr	r1, [sp, #32]
    f7a6:	2205      	movs	r2, #5
    f7a8:	9804      	ldr	r0, [sp, #16]
    f7aa:	f000 fb4d 	bl	fe48 <__multadd>
    f7ae:	9008      	str	r0, [sp, #32]
    f7b0:	0001      	movs	r1, r0
    f7b2:	9805      	ldr	r0, [sp, #20]
    f7b4:	f000 fd09 	bl	101ca <__mcmp>
    f7b8:	2800      	cmp	r0, #0
    f7ba:	dd00      	ble.n	f7be <_dtoa_r+0xa0e>
    f7bc:	e55a      	b.n	f274 <_dtoa_r+0x4c4>
    f7be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f7c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f7c2:	43db      	mvns	r3, r3
    f7c4:	9303      	str	r3, [sp, #12]
    f7c6:	2700      	movs	r7, #0
    f7c8:	9908      	ldr	r1, [sp, #32]
    f7ca:	9804      	ldr	r0, [sp, #16]
    f7cc:	f000 fb23 	bl	fe16 <_Bfree>
    f7d0:	2e00      	cmp	r6, #0
    f7d2:	d100      	bne.n	f7d6 <_dtoa_r+0xa26>
    f7d4:	e63f      	b.n	f456 <_dtoa_r+0x6a6>
    f7d6:	2f00      	cmp	r7, #0
    f7d8:	d005      	beq.n	f7e6 <_dtoa_r+0xa36>
    f7da:	42b7      	cmp	r7, r6
    f7dc:	d003      	beq.n	f7e6 <_dtoa_r+0xa36>
    f7de:	0039      	movs	r1, r7
    f7e0:	9804      	ldr	r0, [sp, #16]
    f7e2:	f000 fb18 	bl	fe16 <_Bfree>
    f7e6:	0031      	movs	r1, r6
    f7e8:	9804      	ldr	r0, [sp, #16]
    f7ea:	f000 fb14 	bl	fe16 <_Bfree>
    f7ee:	e632      	b.n	f456 <_dtoa_r+0x6a6>
    f7f0:	9508      	str	r5, [sp, #32]
    f7f2:	002e      	movs	r6, r5
    f7f4:	e7e3      	b.n	f7be <_dtoa_r+0xa0e>
    f7f6:	2300      	movs	r3, #0
    f7f8:	9308      	str	r3, [sp, #32]
    f7fa:	001e      	movs	r6, r3
    f7fc:	e7df      	b.n	f7be <_dtoa_r+0xa0e>
    f7fe:	46c0      	nop			; (mov r8, r8)
    f800:	40240000 	.word	0x40240000
    f804:	00000433 	.word	0x00000433
    f808:	9603      	str	r6, [sp, #12]
    f80a:	9508      	str	r5, [sp, #32]
    f80c:	002e      	movs	r6, r5
    f80e:	e531      	b.n	f274 <_dtoa_r+0x4c4>
    f810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f812:	970d      	str	r7, [sp, #52]	; 0x34
    f814:	2b00      	cmp	r3, #0
    f816:	d000      	beq.n	f81a <_dtoa_r+0xa6a>
    f818:	e753      	b.n	f6c2 <_dtoa_r+0x912>
    f81a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f81c:	9908      	ldr	r1, [sp, #32]
    f81e:	9805      	ldr	r0, [sp, #20]
    f820:	f7ff fa42 	bl	eca8 <quorem>
    f824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f826:	3030      	adds	r0, #48	; 0x30
    f828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f82a:	7028      	strb	r0, [r5, #0]
    f82c:	3501      	adds	r5, #1
    f82e:	0004      	movs	r4, r0
    f830:	1aeb      	subs	r3, r5, r3
    f832:	429a      	cmp	r2, r3
    f834:	dc78      	bgt.n	f928 <_dtoa_r+0xb78>
    f836:	1e15      	subs	r5, r2, #0
    f838:	dc00      	bgt.n	f83c <_dtoa_r+0xa8c>
    f83a:	2501      	movs	r5, #1
    f83c:	2700      	movs	r7, #0
    f83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f840:	195d      	adds	r5, r3, r5
    f842:	9905      	ldr	r1, [sp, #20]
    f844:	2201      	movs	r2, #1
    f846:	9804      	ldr	r0, [sp, #16]
    f848:	f000 fc6e 	bl	10128 <__lshift>
    f84c:	9908      	ldr	r1, [sp, #32]
    f84e:	9005      	str	r0, [sp, #20]
    f850:	f000 fcbb 	bl	101ca <__mcmp>
    f854:	2800      	cmp	r0, #0
    f856:	dc2f      	bgt.n	f8b8 <_dtoa_r+0xb08>
    f858:	d101      	bne.n	f85e <_dtoa_r+0xaae>
    f85a:	07e3      	lsls	r3, r4, #31
    f85c:	d42c      	bmi.n	f8b8 <_dtoa_r+0xb08>
    f85e:	1e6b      	subs	r3, r5, #1
    f860:	781a      	ldrb	r2, [r3, #0]
    f862:	2a30      	cmp	r2, #48	; 0x30
    f864:	d1b0      	bne.n	f7c8 <_dtoa_r+0xa18>
    f866:	001d      	movs	r5, r3
    f868:	e7f9      	b.n	f85e <_dtoa_r+0xaae>
    f86a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f86c:	2b00      	cmp	r3, #0
    f86e:	db07      	blt.n	f880 <_dtoa_r+0xad0>
    f870:	001d      	movs	r5, r3
    f872:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f874:	431d      	orrs	r5, r3
    f876:	d126      	bne.n	f8c6 <_dtoa_r+0xb16>
    f878:	2301      	movs	r3, #1
    f87a:	9a06      	ldr	r2, [sp, #24]
    f87c:	4213      	tst	r3, r2
    f87e:	d122      	bne.n	f8c6 <_dtoa_r+0xb16>
    f880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f882:	2b00      	cmp	r3, #0
    f884:	dc00      	bgt.n	f888 <_dtoa_r+0xad8>
    f886:	e773      	b.n	f770 <_dtoa_r+0x9c0>
    f888:	9905      	ldr	r1, [sp, #20]
    f88a:	2201      	movs	r2, #1
    f88c:	9804      	ldr	r0, [sp, #16]
    f88e:	f000 fc4b 	bl	10128 <__lshift>
    f892:	9908      	ldr	r1, [sp, #32]
    f894:	9005      	str	r0, [sp, #20]
    f896:	f000 fc98 	bl	101ca <__mcmp>
    f89a:	2800      	cmp	r0, #0
    f89c:	dc04      	bgt.n	f8a8 <_dtoa_r+0xaf8>
    f89e:	d000      	beq.n	f8a2 <_dtoa_r+0xaf2>
    f8a0:	e766      	b.n	f770 <_dtoa_r+0x9c0>
    f8a2:	07e3      	lsls	r3, r4, #31
    f8a4:	d400      	bmi.n	f8a8 <_dtoa_r+0xaf8>
    f8a6:	e763      	b.n	f770 <_dtoa_r+0x9c0>
    f8a8:	2c39      	cmp	r4, #57	; 0x39
    f8aa:	d000      	beq.n	f8ae <_dtoa_r+0xafe>
    f8ac:	e75e      	b.n	f76c <_dtoa_r+0x9bc>
    f8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f8b2:	1c5d      	adds	r5, r3, #1
    f8b4:	2339      	movs	r3, #57	; 0x39
    f8b6:	7013      	strb	r3, [r2, #0]
    f8b8:	1e6b      	subs	r3, r5, #1
    f8ba:	781a      	ldrb	r2, [r3, #0]
    f8bc:	2a39      	cmp	r2, #57	; 0x39
    f8be:	d03b      	beq.n	f938 <_dtoa_r+0xb88>
    f8c0:	3201      	adds	r2, #1
    f8c2:	701a      	strb	r2, [r3, #0]
    f8c4:	e780      	b.n	f7c8 <_dtoa_r+0xa18>
    f8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8c8:	3301      	adds	r3, #1
    f8ca:	930d      	str	r3, [sp, #52]	; 0x34
    f8cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f8ce:	2b00      	cmp	r3, #0
    f8d0:	dd05      	ble.n	f8de <_dtoa_r+0xb2e>
    f8d2:	2c39      	cmp	r4, #57	; 0x39
    f8d4:	d0eb      	beq.n	f8ae <_dtoa_r+0xafe>
    f8d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f8d8:	3401      	adds	r4, #1
    f8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8dc:	e74a      	b.n	f774 <_dtoa_r+0x9c4>
    f8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f8e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f8e4:	701c      	strb	r4, [r3, #0]
    f8e6:	4293      	cmp	r3, r2
    f8e8:	d0ab      	beq.n	f842 <_dtoa_r+0xa92>
    f8ea:	2300      	movs	r3, #0
    f8ec:	220a      	movs	r2, #10
    f8ee:	9905      	ldr	r1, [sp, #20]
    f8f0:	9804      	ldr	r0, [sp, #16]
    f8f2:	f000 faa9 	bl	fe48 <__multadd>
    f8f6:	2300      	movs	r3, #0
    f8f8:	9005      	str	r0, [sp, #20]
    f8fa:	220a      	movs	r2, #10
    f8fc:	0039      	movs	r1, r7
    f8fe:	9804      	ldr	r0, [sp, #16]
    f900:	42b7      	cmp	r7, r6
    f902:	d106      	bne.n	f912 <_dtoa_r+0xb62>
    f904:	f000 faa0 	bl	fe48 <__multadd>
    f908:	0007      	movs	r7, r0
    f90a:	0006      	movs	r6, r0
    f90c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f90e:	930b      	str	r3, [sp, #44]	; 0x2c
    f910:	e6fc      	b.n	f70c <_dtoa_r+0x95c>
    f912:	f000 fa99 	bl	fe48 <__multadd>
    f916:	0031      	movs	r1, r6
    f918:	0007      	movs	r7, r0
    f91a:	2300      	movs	r3, #0
    f91c:	220a      	movs	r2, #10
    f91e:	9804      	ldr	r0, [sp, #16]
    f920:	f000 fa92 	bl	fe48 <__multadd>
    f924:	0006      	movs	r6, r0
    f926:	e7f1      	b.n	f90c <_dtoa_r+0xb5c>
    f928:	2300      	movs	r3, #0
    f92a:	220a      	movs	r2, #10
    f92c:	9905      	ldr	r1, [sp, #20]
    f92e:	9804      	ldr	r0, [sp, #16]
    f930:	f000 fa8a 	bl	fe48 <__multadd>
    f934:	9005      	str	r0, [sp, #20]
    f936:	e771      	b.n	f81c <_dtoa_r+0xa6c>
    f938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f93a:	429a      	cmp	r2, r3
    f93c:	d105      	bne.n	f94a <_dtoa_r+0xb9a>
    f93e:	9b03      	ldr	r3, [sp, #12]
    f940:	3301      	adds	r3, #1
    f942:	9303      	str	r3, [sp, #12]
    f944:	2331      	movs	r3, #49	; 0x31
    f946:	7013      	strb	r3, [r2, #0]
    f948:	e73e      	b.n	f7c8 <_dtoa_r+0xa18>
    f94a:	001d      	movs	r5, r3
    f94c:	e7b4      	b.n	f8b8 <_dtoa_r+0xb08>
    f94e:	4b0a      	ldr	r3, [pc, #40]	; (f978 <_dtoa_r+0xbc8>)
    f950:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f952:	930a      	str	r3, [sp, #40]	; 0x28
    f954:	4b09      	ldr	r3, [pc, #36]	; (f97c <_dtoa_r+0xbcc>)
    f956:	2a00      	cmp	r2, #0
    f958:	d001      	beq.n	f95e <_dtoa_r+0xbae>
    f95a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f95c:	6013      	str	r3, [r2, #0]
    f95e:	980a      	ldr	r0, [sp, #40]	; 0x28
    f960:	b01d      	add	sp, #116	; 0x74
    f962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f966:	2b00      	cmp	r3, #0
    f968:	dd00      	ble.n	f96c <_dtoa_r+0xbbc>
    f96a:	e756      	b.n	f81a <_dtoa_r+0xa6a>
    f96c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f96e:	2b02      	cmp	r3, #2
    f970:	dc00      	bgt.n	f974 <_dtoa_r+0xbc4>
    f972:	e752      	b.n	f81a <_dtoa_r+0xa6a>
    f974:	e713      	b.n	f79e <_dtoa_r+0x9ee>
    f976:	46c0      	nop			; (mov r8, r8)
    f978:	00014277 	.word	0x00014277
    f97c:	0001427f 	.word	0x0001427f

0000f980 <__sflush_r>:
    f980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f982:	898a      	ldrh	r2, [r1, #12]
    f984:	0005      	movs	r5, r0
    f986:	000c      	movs	r4, r1
    f988:	0713      	lsls	r3, r2, #28
    f98a:	d460      	bmi.n	fa4e <__sflush_r+0xce>
    f98c:	684b      	ldr	r3, [r1, #4]
    f98e:	2b00      	cmp	r3, #0
    f990:	dc04      	bgt.n	f99c <__sflush_r+0x1c>
    f992:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    f994:	2b00      	cmp	r3, #0
    f996:	dc01      	bgt.n	f99c <__sflush_r+0x1c>
    f998:	2000      	movs	r0, #0
    f99a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f99c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    f99e:	2f00      	cmp	r7, #0
    f9a0:	d0fa      	beq.n	f998 <__sflush_r+0x18>
    f9a2:	2300      	movs	r3, #0
    f9a4:	682e      	ldr	r6, [r5, #0]
    f9a6:	602b      	str	r3, [r5, #0]
    f9a8:	2380      	movs	r3, #128	; 0x80
    f9aa:	015b      	lsls	r3, r3, #5
    f9ac:	401a      	ands	r2, r3
    f9ae:	d034      	beq.n	fa1a <__sflush_r+0x9a>
    f9b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    f9b2:	89a3      	ldrh	r3, [r4, #12]
    f9b4:	075b      	lsls	r3, r3, #29
    f9b6:	d506      	bpl.n	f9c6 <__sflush_r+0x46>
    f9b8:	6863      	ldr	r3, [r4, #4]
    f9ba:	1ac0      	subs	r0, r0, r3
    f9bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f9be:	2b00      	cmp	r3, #0
    f9c0:	d001      	beq.n	f9c6 <__sflush_r+0x46>
    f9c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f9c4:	1ac0      	subs	r0, r0, r3
    f9c6:	0002      	movs	r2, r0
    f9c8:	6a21      	ldr	r1, [r4, #32]
    f9ca:	2300      	movs	r3, #0
    f9cc:	0028      	movs	r0, r5
    f9ce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    f9d0:	47b8      	blx	r7
    f9d2:	89a1      	ldrh	r1, [r4, #12]
    f9d4:	1c43      	adds	r3, r0, #1
    f9d6:	d106      	bne.n	f9e6 <__sflush_r+0x66>
    f9d8:	682b      	ldr	r3, [r5, #0]
    f9da:	2b1d      	cmp	r3, #29
    f9dc:	d831      	bhi.n	fa42 <__sflush_r+0xc2>
    f9de:	4a2c      	ldr	r2, [pc, #176]	; (fa90 <__sflush_r+0x110>)
    f9e0:	40da      	lsrs	r2, r3
    f9e2:	07d3      	lsls	r3, r2, #31
    f9e4:	d52d      	bpl.n	fa42 <__sflush_r+0xc2>
    f9e6:	2300      	movs	r3, #0
    f9e8:	6063      	str	r3, [r4, #4]
    f9ea:	6923      	ldr	r3, [r4, #16]
    f9ec:	6023      	str	r3, [r4, #0]
    f9ee:	04cb      	lsls	r3, r1, #19
    f9f0:	d505      	bpl.n	f9fe <__sflush_r+0x7e>
    f9f2:	1c43      	adds	r3, r0, #1
    f9f4:	d102      	bne.n	f9fc <__sflush_r+0x7c>
    f9f6:	682b      	ldr	r3, [r5, #0]
    f9f8:	2b00      	cmp	r3, #0
    f9fa:	d100      	bne.n	f9fe <__sflush_r+0x7e>
    f9fc:	6560      	str	r0, [r4, #84]	; 0x54
    f9fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    fa00:	602e      	str	r6, [r5, #0]
    fa02:	2900      	cmp	r1, #0
    fa04:	d0c8      	beq.n	f998 <__sflush_r+0x18>
    fa06:	0023      	movs	r3, r4
    fa08:	3344      	adds	r3, #68	; 0x44
    fa0a:	4299      	cmp	r1, r3
    fa0c:	d002      	beq.n	fa14 <__sflush_r+0x94>
    fa0e:	0028      	movs	r0, r5
    fa10:	f7fe f9d0 	bl	ddb4 <_free_r>
    fa14:	2000      	movs	r0, #0
    fa16:	6360      	str	r0, [r4, #52]	; 0x34
    fa18:	e7bf      	b.n	f99a <__sflush_r+0x1a>
    fa1a:	2301      	movs	r3, #1
    fa1c:	6a21      	ldr	r1, [r4, #32]
    fa1e:	0028      	movs	r0, r5
    fa20:	47b8      	blx	r7
    fa22:	1c43      	adds	r3, r0, #1
    fa24:	d1c5      	bne.n	f9b2 <__sflush_r+0x32>
    fa26:	682b      	ldr	r3, [r5, #0]
    fa28:	2b00      	cmp	r3, #0
    fa2a:	d0c2      	beq.n	f9b2 <__sflush_r+0x32>
    fa2c:	2b1d      	cmp	r3, #29
    fa2e:	d001      	beq.n	fa34 <__sflush_r+0xb4>
    fa30:	2b16      	cmp	r3, #22
    fa32:	d101      	bne.n	fa38 <__sflush_r+0xb8>
    fa34:	602e      	str	r6, [r5, #0]
    fa36:	e7af      	b.n	f998 <__sflush_r+0x18>
    fa38:	2340      	movs	r3, #64	; 0x40
    fa3a:	89a2      	ldrh	r2, [r4, #12]
    fa3c:	4313      	orrs	r3, r2
    fa3e:	81a3      	strh	r3, [r4, #12]
    fa40:	e7ab      	b.n	f99a <__sflush_r+0x1a>
    fa42:	2340      	movs	r3, #64	; 0x40
    fa44:	430b      	orrs	r3, r1
    fa46:	2001      	movs	r0, #1
    fa48:	81a3      	strh	r3, [r4, #12]
    fa4a:	4240      	negs	r0, r0
    fa4c:	e7a5      	b.n	f99a <__sflush_r+0x1a>
    fa4e:	690f      	ldr	r7, [r1, #16]
    fa50:	2f00      	cmp	r7, #0
    fa52:	d0a1      	beq.n	f998 <__sflush_r+0x18>
    fa54:	680b      	ldr	r3, [r1, #0]
    fa56:	600f      	str	r7, [r1, #0]
    fa58:	1bdb      	subs	r3, r3, r7
    fa5a:	9301      	str	r3, [sp, #4]
    fa5c:	2300      	movs	r3, #0
    fa5e:	0792      	lsls	r2, r2, #30
    fa60:	d100      	bne.n	fa64 <__sflush_r+0xe4>
    fa62:	694b      	ldr	r3, [r1, #20]
    fa64:	60a3      	str	r3, [r4, #8]
    fa66:	9b01      	ldr	r3, [sp, #4]
    fa68:	2b00      	cmp	r3, #0
    fa6a:	dc00      	bgt.n	fa6e <__sflush_r+0xee>
    fa6c:	e794      	b.n	f998 <__sflush_r+0x18>
    fa6e:	9b01      	ldr	r3, [sp, #4]
    fa70:	003a      	movs	r2, r7
    fa72:	6a21      	ldr	r1, [r4, #32]
    fa74:	0028      	movs	r0, r5
    fa76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    fa78:	47b0      	blx	r6
    fa7a:	2800      	cmp	r0, #0
    fa7c:	dc03      	bgt.n	fa86 <__sflush_r+0x106>
    fa7e:	2340      	movs	r3, #64	; 0x40
    fa80:	89a2      	ldrh	r2, [r4, #12]
    fa82:	4313      	orrs	r3, r2
    fa84:	e7df      	b.n	fa46 <__sflush_r+0xc6>
    fa86:	9b01      	ldr	r3, [sp, #4]
    fa88:	183f      	adds	r7, r7, r0
    fa8a:	1a1b      	subs	r3, r3, r0
    fa8c:	9301      	str	r3, [sp, #4]
    fa8e:	e7ea      	b.n	fa66 <__sflush_r+0xe6>
    fa90:	20400001 	.word	0x20400001

0000fa94 <_fflush_r>:
    fa94:	690b      	ldr	r3, [r1, #16]
    fa96:	b570      	push	{r4, r5, r6, lr}
    fa98:	0005      	movs	r5, r0
    fa9a:	000c      	movs	r4, r1
    fa9c:	2b00      	cmp	r3, #0
    fa9e:	d101      	bne.n	faa4 <_fflush_r+0x10>
    faa0:	2000      	movs	r0, #0
    faa2:	bd70      	pop	{r4, r5, r6, pc}
    faa4:	2800      	cmp	r0, #0
    faa6:	d004      	beq.n	fab2 <_fflush_r+0x1e>
    faa8:	6983      	ldr	r3, [r0, #24]
    faaa:	2b00      	cmp	r3, #0
    faac:	d101      	bne.n	fab2 <_fflush_r+0x1e>
    faae:	f000 f85f 	bl	fb70 <__sinit>
    fab2:	4b0b      	ldr	r3, [pc, #44]	; (fae0 <_fflush_r+0x4c>)
    fab4:	429c      	cmp	r4, r3
    fab6:	d109      	bne.n	facc <_fflush_r+0x38>
    fab8:	686c      	ldr	r4, [r5, #4]
    faba:	220c      	movs	r2, #12
    fabc:	5ea3      	ldrsh	r3, [r4, r2]
    fabe:	2b00      	cmp	r3, #0
    fac0:	d0ee      	beq.n	faa0 <_fflush_r+0xc>
    fac2:	0021      	movs	r1, r4
    fac4:	0028      	movs	r0, r5
    fac6:	f7ff ff5b 	bl	f980 <__sflush_r>
    faca:	e7ea      	b.n	faa2 <_fflush_r+0xe>
    facc:	4b05      	ldr	r3, [pc, #20]	; (fae4 <_fflush_r+0x50>)
    face:	429c      	cmp	r4, r3
    fad0:	d101      	bne.n	fad6 <_fflush_r+0x42>
    fad2:	68ac      	ldr	r4, [r5, #8]
    fad4:	e7f1      	b.n	faba <_fflush_r+0x26>
    fad6:	4b04      	ldr	r3, [pc, #16]	; (fae8 <_fflush_r+0x54>)
    fad8:	429c      	cmp	r4, r3
    fada:	d1ee      	bne.n	faba <_fflush_r+0x26>
    fadc:	68ec      	ldr	r4, [r5, #12]
    fade:	e7ec      	b.n	faba <_fflush_r+0x26>
    fae0:	000142a4 	.word	0x000142a4
    fae4:	000142c4 	.word	0x000142c4
    fae8:	00014284 	.word	0x00014284

0000faec <_cleanup_r>:
    faec:	b510      	push	{r4, lr}
    faee:	4902      	ldr	r1, [pc, #8]	; (faf8 <_cleanup_r+0xc>)
    faf0:	f000 f8b2 	bl	fc58 <_fwalk_reent>
    faf4:	bd10      	pop	{r4, pc}
    faf6:	46c0      	nop			; (mov r8, r8)
    faf8:	0000fa95 	.word	0x0000fa95

0000fafc <std.isra.0>:
    fafc:	2300      	movs	r3, #0
    fafe:	b510      	push	{r4, lr}
    fb00:	0004      	movs	r4, r0
    fb02:	6003      	str	r3, [r0, #0]
    fb04:	6043      	str	r3, [r0, #4]
    fb06:	6083      	str	r3, [r0, #8]
    fb08:	8181      	strh	r1, [r0, #12]
    fb0a:	6643      	str	r3, [r0, #100]	; 0x64
    fb0c:	81c2      	strh	r2, [r0, #14]
    fb0e:	6103      	str	r3, [r0, #16]
    fb10:	6143      	str	r3, [r0, #20]
    fb12:	6183      	str	r3, [r0, #24]
    fb14:	0019      	movs	r1, r3
    fb16:	2208      	movs	r2, #8
    fb18:	305c      	adds	r0, #92	; 0x5c
    fb1a:	f7fe f942 	bl	dda2 <memset>
    fb1e:	4b05      	ldr	r3, [pc, #20]	; (fb34 <std.isra.0+0x38>)
    fb20:	6224      	str	r4, [r4, #32]
    fb22:	6263      	str	r3, [r4, #36]	; 0x24
    fb24:	4b04      	ldr	r3, [pc, #16]	; (fb38 <std.isra.0+0x3c>)
    fb26:	62a3      	str	r3, [r4, #40]	; 0x28
    fb28:	4b04      	ldr	r3, [pc, #16]	; (fb3c <std.isra.0+0x40>)
    fb2a:	62e3      	str	r3, [r4, #44]	; 0x2c
    fb2c:	4b04      	ldr	r3, [pc, #16]	; (fb40 <std.isra.0+0x44>)
    fb2e:	6323      	str	r3, [r4, #48]	; 0x30
    fb30:	bd10      	pop	{r4, pc}
    fb32:	46c0      	nop			; (mov r8, r8)
    fb34:	0001067d 	.word	0x0001067d
    fb38:	000106a5 	.word	0x000106a5
    fb3c:	000106dd 	.word	0x000106dd
    fb40:	00010709 	.word	0x00010709

0000fb44 <__sfmoreglue>:
    fb44:	b570      	push	{r4, r5, r6, lr}
    fb46:	2568      	movs	r5, #104	; 0x68
    fb48:	1e4a      	subs	r2, r1, #1
    fb4a:	4355      	muls	r5, r2
    fb4c:	000e      	movs	r6, r1
    fb4e:	0029      	movs	r1, r5
    fb50:	3174      	adds	r1, #116	; 0x74
    fb52:	f7fe f979 	bl	de48 <_malloc_r>
    fb56:	1e04      	subs	r4, r0, #0
    fb58:	d008      	beq.n	fb6c <__sfmoreglue+0x28>
    fb5a:	2100      	movs	r1, #0
    fb5c:	002a      	movs	r2, r5
    fb5e:	6001      	str	r1, [r0, #0]
    fb60:	6046      	str	r6, [r0, #4]
    fb62:	300c      	adds	r0, #12
    fb64:	60a0      	str	r0, [r4, #8]
    fb66:	3268      	adds	r2, #104	; 0x68
    fb68:	f7fe f91b 	bl	dda2 <memset>
    fb6c:	0020      	movs	r0, r4
    fb6e:	bd70      	pop	{r4, r5, r6, pc}

0000fb70 <__sinit>:
    fb70:	6983      	ldr	r3, [r0, #24]
    fb72:	b513      	push	{r0, r1, r4, lr}
    fb74:	0004      	movs	r4, r0
    fb76:	2b00      	cmp	r3, #0
    fb78:	d128      	bne.n	fbcc <__sinit+0x5c>
    fb7a:	6483      	str	r3, [r0, #72]	; 0x48
    fb7c:	64c3      	str	r3, [r0, #76]	; 0x4c
    fb7e:	6503      	str	r3, [r0, #80]	; 0x50
    fb80:	4b13      	ldr	r3, [pc, #76]	; (fbd0 <__sinit+0x60>)
    fb82:	4a14      	ldr	r2, [pc, #80]	; (fbd4 <__sinit+0x64>)
    fb84:	681b      	ldr	r3, [r3, #0]
    fb86:	6282      	str	r2, [r0, #40]	; 0x28
    fb88:	9301      	str	r3, [sp, #4]
    fb8a:	4298      	cmp	r0, r3
    fb8c:	d101      	bne.n	fb92 <__sinit+0x22>
    fb8e:	2301      	movs	r3, #1
    fb90:	6183      	str	r3, [r0, #24]
    fb92:	0020      	movs	r0, r4
    fb94:	f000 f820 	bl	fbd8 <__sfp>
    fb98:	6060      	str	r0, [r4, #4]
    fb9a:	0020      	movs	r0, r4
    fb9c:	f000 f81c 	bl	fbd8 <__sfp>
    fba0:	60a0      	str	r0, [r4, #8]
    fba2:	0020      	movs	r0, r4
    fba4:	f000 f818 	bl	fbd8 <__sfp>
    fba8:	2200      	movs	r2, #0
    fbaa:	60e0      	str	r0, [r4, #12]
    fbac:	2104      	movs	r1, #4
    fbae:	6860      	ldr	r0, [r4, #4]
    fbb0:	f7ff ffa4 	bl	fafc <std.isra.0>
    fbb4:	2201      	movs	r2, #1
    fbb6:	2109      	movs	r1, #9
    fbb8:	68a0      	ldr	r0, [r4, #8]
    fbba:	f7ff ff9f 	bl	fafc <std.isra.0>
    fbbe:	2202      	movs	r2, #2
    fbc0:	2112      	movs	r1, #18
    fbc2:	68e0      	ldr	r0, [r4, #12]
    fbc4:	f7ff ff9a 	bl	fafc <std.isra.0>
    fbc8:	2301      	movs	r3, #1
    fbca:	61a3      	str	r3, [r4, #24]
    fbcc:	bd13      	pop	{r0, r1, r4, pc}
    fbce:	46c0      	nop			; (mov r8, r8)
    fbd0:	00014134 	.word	0x00014134
    fbd4:	0000faed 	.word	0x0000faed

0000fbd8 <__sfp>:
    fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbda:	4b1e      	ldr	r3, [pc, #120]	; (fc54 <__sfp+0x7c>)
    fbdc:	0007      	movs	r7, r0
    fbde:	681e      	ldr	r6, [r3, #0]
    fbe0:	69b3      	ldr	r3, [r6, #24]
    fbe2:	2b00      	cmp	r3, #0
    fbe4:	d102      	bne.n	fbec <__sfp+0x14>
    fbe6:	0030      	movs	r0, r6
    fbe8:	f7ff ffc2 	bl	fb70 <__sinit>
    fbec:	3648      	adds	r6, #72	; 0x48
    fbee:	68b4      	ldr	r4, [r6, #8]
    fbf0:	6873      	ldr	r3, [r6, #4]
    fbf2:	3b01      	subs	r3, #1
    fbf4:	d504      	bpl.n	fc00 <__sfp+0x28>
    fbf6:	6833      	ldr	r3, [r6, #0]
    fbf8:	2b00      	cmp	r3, #0
    fbfa:	d007      	beq.n	fc0c <__sfp+0x34>
    fbfc:	6836      	ldr	r6, [r6, #0]
    fbfe:	e7f6      	b.n	fbee <__sfp+0x16>
    fc00:	220c      	movs	r2, #12
    fc02:	5ea5      	ldrsh	r5, [r4, r2]
    fc04:	2d00      	cmp	r5, #0
    fc06:	d00d      	beq.n	fc24 <__sfp+0x4c>
    fc08:	3468      	adds	r4, #104	; 0x68
    fc0a:	e7f2      	b.n	fbf2 <__sfp+0x1a>
    fc0c:	2104      	movs	r1, #4
    fc0e:	0038      	movs	r0, r7
    fc10:	f7ff ff98 	bl	fb44 <__sfmoreglue>
    fc14:	6030      	str	r0, [r6, #0]
    fc16:	2800      	cmp	r0, #0
    fc18:	d1f0      	bne.n	fbfc <__sfp+0x24>
    fc1a:	230c      	movs	r3, #12
    fc1c:	0004      	movs	r4, r0
    fc1e:	603b      	str	r3, [r7, #0]
    fc20:	0020      	movs	r0, r4
    fc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc24:	2301      	movs	r3, #1
    fc26:	0020      	movs	r0, r4
    fc28:	425b      	negs	r3, r3
    fc2a:	81e3      	strh	r3, [r4, #14]
    fc2c:	3302      	adds	r3, #2
    fc2e:	81a3      	strh	r3, [r4, #12]
    fc30:	6665      	str	r5, [r4, #100]	; 0x64
    fc32:	6025      	str	r5, [r4, #0]
    fc34:	60a5      	str	r5, [r4, #8]
    fc36:	6065      	str	r5, [r4, #4]
    fc38:	6125      	str	r5, [r4, #16]
    fc3a:	6165      	str	r5, [r4, #20]
    fc3c:	61a5      	str	r5, [r4, #24]
    fc3e:	2208      	movs	r2, #8
    fc40:	0029      	movs	r1, r5
    fc42:	305c      	adds	r0, #92	; 0x5c
    fc44:	f7fe f8ad 	bl	dda2 <memset>
    fc48:	6365      	str	r5, [r4, #52]	; 0x34
    fc4a:	63a5      	str	r5, [r4, #56]	; 0x38
    fc4c:	64a5      	str	r5, [r4, #72]	; 0x48
    fc4e:	64e5      	str	r5, [r4, #76]	; 0x4c
    fc50:	e7e6      	b.n	fc20 <__sfp+0x48>
    fc52:	46c0      	nop			; (mov r8, r8)
    fc54:	00014134 	.word	0x00014134

0000fc58 <_fwalk_reent>:
    fc58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fc5a:	0004      	movs	r4, r0
    fc5c:	0007      	movs	r7, r0
    fc5e:	2600      	movs	r6, #0
    fc60:	9101      	str	r1, [sp, #4]
    fc62:	3448      	adds	r4, #72	; 0x48
    fc64:	2c00      	cmp	r4, #0
    fc66:	d101      	bne.n	fc6c <_fwalk_reent+0x14>
    fc68:	0030      	movs	r0, r6
    fc6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fc6c:	6863      	ldr	r3, [r4, #4]
    fc6e:	68a5      	ldr	r5, [r4, #8]
    fc70:	9300      	str	r3, [sp, #0]
    fc72:	9b00      	ldr	r3, [sp, #0]
    fc74:	3b01      	subs	r3, #1
    fc76:	9300      	str	r3, [sp, #0]
    fc78:	d501      	bpl.n	fc7e <_fwalk_reent+0x26>
    fc7a:	6824      	ldr	r4, [r4, #0]
    fc7c:	e7f2      	b.n	fc64 <_fwalk_reent+0xc>
    fc7e:	89ab      	ldrh	r3, [r5, #12]
    fc80:	2b01      	cmp	r3, #1
    fc82:	d908      	bls.n	fc96 <_fwalk_reent+0x3e>
    fc84:	220e      	movs	r2, #14
    fc86:	5eab      	ldrsh	r3, [r5, r2]
    fc88:	3301      	adds	r3, #1
    fc8a:	d004      	beq.n	fc96 <_fwalk_reent+0x3e>
    fc8c:	0029      	movs	r1, r5
    fc8e:	0038      	movs	r0, r7
    fc90:	9b01      	ldr	r3, [sp, #4]
    fc92:	4798      	blx	r3
    fc94:	4306      	orrs	r6, r0
    fc96:	3568      	adds	r5, #104	; 0x68
    fc98:	e7eb      	b.n	fc72 <_fwalk_reent+0x1a>
	...

0000fc9c <_localeconv_r>:
    fc9c:	4b03      	ldr	r3, [pc, #12]	; (fcac <_localeconv_r+0x10>)
    fc9e:	681b      	ldr	r3, [r3, #0]
    fca0:	6a18      	ldr	r0, [r3, #32]
    fca2:	2800      	cmp	r0, #0
    fca4:	d100      	bne.n	fca8 <_localeconv_r+0xc>
    fca6:	4802      	ldr	r0, [pc, #8]	; (fcb0 <_localeconv_r+0x14>)
    fca8:	30f0      	adds	r0, #240	; 0xf0
    fcaa:	4770      	bx	lr
    fcac:	20000014 	.word	0x20000014
    fcb0:	20000078 	.word	0x20000078

0000fcb4 <__swhatbuf_r>:
    fcb4:	b570      	push	{r4, r5, r6, lr}
    fcb6:	000e      	movs	r6, r1
    fcb8:	001d      	movs	r5, r3
    fcba:	230e      	movs	r3, #14
    fcbc:	5ec9      	ldrsh	r1, [r1, r3]
    fcbe:	b090      	sub	sp, #64	; 0x40
    fcc0:	0014      	movs	r4, r2
    fcc2:	2900      	cmp	r1, #0
    fcc4:	da07      	bge.n	fcd6 <__swhatbuf_r+0x22>
    fcc6:	2300      	movs	r3, #0
    fcc8:	602b      	str	r3, [r5, #0]
    fcca:	89b3      	ldrh	r3, [r6, #12]
    fccc:	061b      	lsls	r3, r3, #24
    fcce:	d411      	bmi.n	fcf4 <__swhatbuf_r+0x40>
    fcd0:	2380      	movs	r3, #128	; 0x80
    fcd2:	00db      	lsls	r3, r3, #3
    fcd4:	e00f      	b.n	fcf6 <__swhatbuf_r+0x42>
    fcd6:	aa01      	add	r2, sp, #4
    fcd8:	f000 fd42 	bl	10760 <_fstat_r>
    fcdc:	2800      	cmp	r0, #0
    fcde:	dbf2      	blt.n	fcc6 <__swhatbuf_r+0x12>
    fce0:	22f0      	movs	r2, #240	; 0xf0
    fce2:	9b02      	ldr	r3, [sp, #8]
    fce4:	0212      	lsls	r2, r2, #8
    fce6:	4013      	ands	r3, r2
    fce8:	4a05      	ldr	r2, [pc, #20]	; (fd00 <__swhatbuf_r+0x4c>)
    fcea:	189b      	adds	r3, r3, r2
    fcec:	425a      	negs	r2, r3
    fcee:	4153      	adcs	r3, r2
    fcf0:	602b      	str	r3, [r5, #0]
    fcf2:	e7ed      	b.n	fcd0 <__swhatbuf_r+0x1c>
    fcf4:	2340      	movs	r3, #64	; 0x40
    fcf6:	2000      	movs	r0, #0
    fcf8:	6023      	str	r3, [r4, #0]
    fcfa:	b010      	add	sp, #64	; 0x40
    fcfc:	bd70      	pop	{r4, r5, r6, pc}
    fcfe:	46c0      	nop			; (mov r8, r8)
    fd00:	ffffe000 	.word	0xffffe000

0000fd04 <__smakebuf_r>:
    fd04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fd06:	2602      	movs	r6, #2
    fd08:	898b      	ldrh	r3, [r1, #12]
    fd0a:	0005      	movs	r5, r0
    fd0c:	000c      	movs	r4, r1
    fd0e:	4233      	tst	r3, r6
    fd10:	d006      	beq.n	fd20 <__smakebuf_r+0x1c>
    fd12:	0023      	movs	r3, r4
    fd14:	3347      	adds	r3, #71	; 0x47
    fd16:	6023      	str	r3, [r4, #0]
    fd18:	6123      	str	r3, [r4, #16]
    fd1a:	2301      	movs	r3, #1
    fd1c:	6163      	str	r3, [r4, #20]
    fd1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    fd20:	ab01      	add	r3, sp, #4
    fd22:	466a      	mov	r2, sp
    fd24:	f7ff ffc6 	bl	fcb4 <__swhatbuf_r>
    fd28:	9900      	ldr	r1, [sp, #0]
    fd2a:	0007      	movs	r7, r0
    fd2c:	0028      	movs	r0, r5
    fd2e:	f7fe f88b 	bl	de48 <_malloc_r>
    fd32:	2800      	cmp	r0, #0
    fd34:	d108      	bne.n	fd48 <__smakebuf_r+0x44>
    fd36:	220c      	movs	r2, #12
    fd38:	5ea3      	ldrsh	r3, [r4, r2]
    fd3a:	059a      	lsls	r2, r3, #22
    fd3c:	d4ef      	bmi.n	fd1e <__smakebuf_r+0x1a>
    fd3e:	2203      	movs	r2, #3
    fd40:	4393      	bics	r3, r2
    fd42:	431e      	orrs	r6, r3
    fd44:	81a6      	strh	r6, [r4, #12]
    fd46:	e7e4      	b.n	fd12 <__smakebuf_r+0xe>
    fd48:	4b0f      	ldr	r3, [pc, #60]	; (fd88 <__smakebuf_r+0x84>)
    fd4a:	62ab      	str	r3, [r5, #40]	; 0x28
    fd4c:	2380      	movs	r3, #128	; 0x80
    fd4e:	89a2      	ldrh	r2, [r4, #12]
    fd50:	6020      	str	r0, [r4, #0]
    fd52:	4313      	orrs	r3, r2
    fd54:	81a3      	strh	r3, [r4, #12]
    fd56:	9b00      	ldr	r3, [sp, #0]
    fd58:	6120      	str	r0, [r4, #16]
    fd5a:	6163      	str	r3, [r4, #20]
    fd5c:	9b01      	ldr	r3, [sp, #4]
    fd5e:	2b00      	cmp	r3, #0
    fd60:	d00d      	beq.n	fd7e <__smakebuf_r+0x7a>
    fd62:	230e      	movs	r3, #14
    fd64:	5ee1      	ldrsh	r1, [r4, r3]
    fd66:	0028      	movs	r0, r5
    fd68:	f000 fd0c 	bl	10784 <_isatty_r>
    fd6c:	2800      	cmp	r0, #0
    fd6e:	d006      	beq.n	fd7e <__smakebuf_r+0x7a>
    fd70:	2203      	movs	r2, #3
    fd72:	89a3      	ldrh	r3, [r4, #12]
    fd74:	4393      	bics	r3, r2
    fd76:	001a      	movs	r2, r3
    fd78:	2301      	movs	r3, #1
    fd7a:	4313      	orrs	r3, r2
    fd7c:	81a3      	strh	r3, [r4, #12]
    fd7e:	89a0      	ldrh	r0, [r4, #12]
    fd80:	4338      	orrs	r0, r7
    fd82:	81a0      	strh	r0, [r4, #12]
    fd84:	e7cb      	b.n	fd1e <__smakebuf_r+0x1a>
    fd86:	46c0      	nop			; (mov r8, r8)
    fd88:	0000faed 	.word	0x0000faed

0000fd8c <memchr>:
    fd8c:	b2c9      	uxtb	r1, r1
    fd8e:	1882      	adds	r2, r0, r2
    fd90:	4290      	cmp	r0, r2
    fd92:	d101      	bne.n	fd98 <memchr+0xc>
    fd94:	2000      	movs	r0, #0
    fd96:	4770      	bx	lr
    fd98:	7803      	ldrb	r3, [r0, #0]
    fd9a:	428b      	cmp	r3, r1
    fd9c:	d0fb      	beq.n	fd96 <memchr+0xa>
    fd9e:	3001      	adds	r0, #1
    fda0:	e7f6      	b.n	fd90 <memchr+0x4>

0000fda2 <__malloc_lock>:
    fda2:	4770      	bx	lr

0000fda4 <__malloc_unlock>:
    fda4:	4770      	bx	lr

0000fda6 <_Balloc>:
    fda6:	b570      	push	{r4, r5, r6, lr}
    fda8:	6a46      	ldr	r6, [r0, #36]	; 0x24
    fdaa:	0004      	movs	r4, r0
    fdac:	000d      	movs	r5, r1
    fdae:	2e00      	cmp	r6, #0
    fdb0:	d107      	bne.n	fdc2 <_Balloc+0x1c>
    fdb2:	2010      	movs	r0, #16
    fdb4:	f7fd ffbe 	bl	dd34 <malloc>
    fdb8:	6260      	str	r0, [r4, #36]	; 0x24
    fdba:	6046      	str	r6, [r0, #4]
    fdbc:	6086      	str	r6, [r0, #8]
    fdbe:	6006      	str	r6, [r0, #0]
    fdc0:	60c6      	str	r6, [r0, #12]
    fdc2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    fdc4:	68f3      	ldr	r3, [r6, #12]
    fdc6:	2b00      	cmp	r3, #0
    fdc8:	d013      	beq.n	fdf2 <_Balloc+0x4c>
    fdca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fdcc:	00aa      	lsls	r2, r5, #2
    fdce:	68db      	ldr	r3, [r3, #12]
    fdd0:	189b      	adds	r3, r3, r2
    fdd2:	6818      	ldr	r0, [r3, #0]
    fdd4:	2800      	cmp	r0, #0
    fdd6:	d118      	bne.n	fe0a <_Balloc+0x64>
    fdd8:	2101      	movs	r1, #1
    fdda:	000e      	movs	r6, r1
    fddc:	40ae      	lsls	r6, r5
    fdde:	1d72      	adds	r2, r6, #5
    fde0:	0092      	lsls	r2, r2, #2
    fde2:	0020      	movs	r0, r4
    fde4:	f000 fac2 	bl	1036c <_calloc_r>
    fde8:	2800      	cmp	r0, #0
    fdea:	d00c      	beq.n	fe06 <_Balloc+0x60>
    fdec:	6045      	str	r5, [r0, #4]
    fdee:	6086      	str	r6, [r0, #8]
    fdf0:	e00d      	b.n	fe0e <_Balloc+0x68>
    fdf2:	2221      	movs	r2, #33	; 0x21
    fdf4:	2104      	movs	r1, #4
    fdf6:	0020      	movs	r0, r4
    fdf8:	f000 fab8 	bl	1036c <_calloc_r>
    fdfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fdfe:	60f0      	str	r0, [r6, #12]
    fe00:	68db      	ldr	r3, [r3, #12]
    fe02:	2b00      	cmp	r3, #0
    fe04:	d1e1      	bne.n	fdca <_Balloc+0x24>
    fe06:	2000      	movs	r0, #0
    fe08:	bd70      	pop	{r4, r5, r6, pc}
    fe0a:	6802      	ldr	r2, [r0, #0]
    fe0c:	601a      	str	r2, [r3, #0]
    fe0e:	2300      	movs	r3, #0
    fe10:	6103      	str	r3, [r0, #16]
    fe12:	60c3      	str	r3, [r0, #12]
    fe14:	e7f8      	b.n	fe08 <_Balloc+0x62>

0000fe16 <_Bfree>:
    fe16:	b570      	push	{r4, r5, r6, lr}
    fe18:	6a44      	ldr	r4, [r0, #36]	; 0x24
    fe1a:	0006      	movs	r6, r0
    fe1c:	000d      	movs	r5, r1
    fe1e:	2c00      	cmp	r4, #0
    fe20:	d107      	bne.n	fe32 <_Bfree+0x1c>
    fe22:	2010      	movs	r0, #16
    fe24:	f7fd ff86 	bl	dd34 <malloc>
    fe28:	6270      	str	r0, [r6, #36]	; 0x24
    fe2a:	6044      	str	r4, [r0, #4]
    fe2c:	6084      	str	r4, [r0, #8]
    fe2e:	6004      	str	r4, [r0, #0]
    fe30:	60c4      	str	r4, [r0, #12]
    fe32:	2d00      	cmp	r5, #0
    fe34:	d007      	beq.n	fe46 <_Bfree+0x30>
    fe36:	6a73      	ldr	r3, [r6, #36]	; 0x24
    fe38:	686a      	ldr	r2, [r5, #4]
    fe3a:	68db      	ldr	r3, [r3, #12]
    fe3c:	0092      	lsls	r2, r2, #2
    fe3e:	189b      	adds	r3, r3, r2
    fe40:	681a      	ldr	r2, [r3, #0]
    fe42:	602a      	str	r2, [r5, #0]
    fe44:	601d      	str	r5, [r3, #0]
    fe46:	bd70      	pop	{r4, r5, r6, pc}

0000fe48 <__multadd>:
    fe48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fe4a:	001e      	movs	r6, r3
    fe4c:	2314      	movs	r3, #20
    fe4e:	469c      	mov	ip, r3
    fe50:	0007      	movs	r7, r0
    fe52:	000c      	movs	r4, r1
    fe54:	2000      	movs	r0, #0
    fe56:	690d      	ldr	r5, [r1, #16]
    fe58:	448c      	add	ip, r1
    fe5a:	4663      	mov	r3, ip
    fe5c:	8819      	ldrh	r1, [r3, #0]
    fe5e:	681b      	ldr	r3, [r3, #0]
    fe60:	4351      	muls	r1, r2
    fe62:	0c1b      	lsrs	r3, r3, #16
    fe64:	4353      	muls	r3, r2
    fe66:	1989      	adds	r1, r1, r6
    fe68:	0c0e      	lsrs	r6, r1, #16
    fe6a:	199b      	adds	r3, r3, r6
    fe6c:	b289      	uxth	r1, r1
    fe6e:	0c1e      	lsrs	r6, r3, #16
    fe70:	041b      	lsls	r3, r3, #16
    fe72:	185b      	adds	r3, r3, r1
    fe74:	4661      	mov	r1, ip
    fe76:	3001      	adds	r0, #1
    fe78:	c108      	stmia	r1!, {r3}
    fe7a:	468c      	mov	ip, r1
    fe7c:	4285      	cmp	r5, r0
    fe7e:	dcec      	bgt.n	fe5a <__multadd+0x12>
    fe80:	2e00      	cmp	r6, #0
    fe82:	d01b      	beq.n	febc <__multadd+0x74>
    fe84:	68a3      	ldr	r3, [r4, #8]
    fe86:	429d      	cmp	r5, r3
    fe88:	db12      	blt.n	feb0 <__multadd+0x68>
    fe8a:	6863      	ldr	r3, [r4, #4]
    fe8c:	0038      	movs	r0, r7
    fe8e:	1c59      	adds	r1, r3, #1
    fe90:	f7ff ff89 	bl	fda6 <_Balloc>
    fe94:	0021      	movs	r1, r4
    fe96:	6923      	ldr	r3, [r4, #16]
    fe98:	9001      	str	r0, [sp, #4]
    fe9a:	1c9a      	adds	r2, r3, #2
    fe9c:	0092      	lsls	r2, r2, #2
    fe9e:	310c      	adds	r1, #12
    fea0:	300c      	adds	r0, #12
    fea2:	f7fd ff63 	bl	dd6c <memcpy>
    fea6:	0021      	movs	r1, r4
    fea8:	0038      	movs	r0, r7
    feaa:	f7ff ffb4 	bl	fe16 <_Bfree>
    feae:	9c01      	ldr	r4, [sp, #4]
    feb0:	1d2b      	adds	r3, r5, #4
    feb2:	009b      	lsls	r3, r3, #2
    feb4:	18e3      	adds	r3, r4, r3
    feb6:	3501      	adds	r5, #1
    feb8:	605e      	str	r6, [r3, #4]
    feba:	6125      	str	r5, [r4, #16]
    febc:	0020      	movs	r0, r4
    febe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fec0 <__hi0bits>:
    fec0:	0003      	movs	r3, r0
    fec2:	0c02      	lsrs	r2, r0, #16
    fec4:	2000      	movs	r0, #0
    fec6:	4282      	cmp	r2, r0
    fec8:	d101      	bne.n	fece <__hi0bits+0xe>
    feca:	041b      	lsls	r3, r3, #16
    fecc:	3010      	adds	r0, #16
    fece:	0e1a      	lsrs	r2, r3, #24
    fed0:	d101      	bne.n	fed6 <__hi0bits+0x16>
    fed2:	3008      	adds	r0, #8
    fed4:	021b      	lsls	r3, r3, #8
    fed6:	0f1a      	lsrs	r2, r3, #28
    fed8:	d101      	bne.n	fede <__hi0bits+0x1e>
    feda:	3004      	adds	r0, #4
    fedc:	011b      	lsls	r3, r3, #4
    fede:	0f9a      	lsrs	r2, r3, #30
    fee0:	d101      	bne.n	fee6 <__hi0bits+0x26>
    fee2:	3002      	adds	r0, #2
    fee4:	009b      	lsls	r3, r3, #2
    fee6:	2b00      	cmp	r3, #0
    fee8:	db03      	blt.n	fef2 <__hi0bits+0x32>
    feea:	3001      	adds	r0, #1
    feec:	005b      	lsls	r3, r3, #1
    feee:	d400      	bmi.n	fef2 <__hi0bits+0x32>
    fef0:	2020      	movs	r0, #32
    fef2:	4770      	bx	lr

0000fef4 <__lo0bits>:
    fef4:	2207      	movs	r2, #7
    fef6:	6803      	ldr	r3, [r0, #0]
    fef8:	b510      	push	{r4, lr}
    fefa:	0001      	movs	r1, r0
    fefc:	401a      	ands	r2, r3
    fefe:	d00d      	beq.n	ff1c <__lo0bits+0x28>
    ff00:	2401      	movs	r4, #1
    ff02:	2000      	movs	r0, #0
    ff04:	4223      	tst	r3, r4
    ff06:	d105      	bne.n	ff14 <__lo0bits+0x20>
    ff08:	3002      	adds	r0, #2
    ff0a:	4203      	tst	r3, r0
    ff0c:	d003      	beq.n	ff16 <__lo0bits+0x22>
    ff0e:	40e3      	lsrs	r3, r4
    ff10:	0020      	movs	r0, r4
    ff12:	600b      	str	r3, [r1, #0]
    ff14:	bd10      	pop	{r4, pc}
    ff16:	089b      	lsrs	r3, r3, #2
    ff18:	600b      	str	r3, [r1, #0]
    ff1a:	e7fb      	b.n	ff14 <__lo0bits+0x20>
    ff1c:	b29c      	uxth	r4, r3
    ff1e:	0010      	movs	r0, r2
    ff20:	2c00      	cmp	r4, #0
    ff22:	d101      	bne.n	ff28 <__lo0bits+0x34>
    ff24:	2010      	movs	r0, #16
    ff26:	0c1b      	lsrs	r3, r3, #16
    ff28:	b2da      	uxtb	r2, r3
    ff2a:	2a00      	cmp	r2, #0
    ff2c:	d101      	bne.n	ff32 <__lo0bits+0x3e>
    ff2e:	3008      	adds	r0, #8
    ff30:	0a1b      	lsrs	r3, r3, #8
    ff32:	071a      	lsls	r2, r3, #28
    ff34:	d101      	bne.n	ff3a <__lo0bits+0x46>
    ff36:	3004      	adds	r0, #4
    ff38:	091b      	lsrs	r3, r3, #4
    ff3a:	079a      	lsls	r2, r3, #30
    ff3c:	d101      	bne.n	ff42 <__lo0bits+0x4e>
    ff3e:	3002      	adds	r0, #2
    ff40:	089b      	lsrs	r3, r3, #2
    ff42:	07da      	lsls	r2, r3, #31
    ff44:	d4e8      	bmi.n	ff18 <__lo0bits+0x24>
    ff46:	085b      	lsrs	r3, r3, #1
    ff48:	d001      	beq.n	ff4e <__lo0bits+0x5a>
    ff4a:	3001      	adds	r0, #1
    ff4c:	e7e4      	b.n	ff18 <__lo0bits+0x24>
    ff4e:	2020      	movs	r0, #32
    ff50:	e7e0      	b.n	ff14 <__lo0bits+0x20>

0000ff52 <__i2b>:
    ff52:	b510      	push	{r4, lr}
    ff54:	000c      	movs	r4, r1
    ff56:	2101      	movs	r1, #1
    ff58:	f7ff ff25 	bl	fda6 <_Balloc>
    ff5c:	2301      	movs	r3, #1
    ff5e:	6144      	str	r4, [r0, #20]
    ff60:	6103      	str	r3, [r0, #16]
    ff62:	bd10      	pop	{r4, pc}

0000ff64 <__multiply>:
    ff64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff66:	690b      	ldr	r3, [r1, #16]
    ff68:	0015      	movs	r5, r2
    ff6a:	6912      	ldr	r2, [r2, #16]
    ff6c:	b089      	sub	sp, #36	; 0x24
    ff6e:	000c      	movs	r4, r1
    ff70:	4293      	cmp	r3, r2
    ff72:	da01      	bge.n	ff78 <__multiply+0x14>
    ff74:	002c      	movs	r4, r5
    ff76:	000d      	movs	r5, r1
    ff78:	6927      	ldr	r7, [r4, #16]
    ff7a:	692e      	ldr	r6, [r5, #16]
    ff7c:	68a2      	ldr	r2, [r4, #8]
    ff7e:	19bb      	adds	r3, r7, r6
    ff80:	6861      	ldr	r1, [r4, #4]
    ff82:	9301      	str	r3, [sp, #4]
    ff84:	4293      	cmp	r3, r2
    ff86:	dd00      	ble.n	ff8a <__multiply+0x26>
    ff88:	3101      	adds	r1, #1
    ff8a:	f7ff ff0c 	bl	fda6 <_Balloc>
    ff8e:	0003      	movs	r3, r0
    ff90:	3314      	adds	r3, #20
    ff92:	9300      	str	r3, [sp, #0]
    ff94:	9a00      	ldr	r2, [sp, #0]
    ff96:	19bb      	adds	r3, r7, r6
    ff98:	4694      	mov	ip, r2
    ff9a:	009b      	lsls	r3, r3, #2
    ff9c:	449c      	add	ip, r3
    ff9e:	0013      	movs	r3, r2
    ffa0:	2200      	movs	r2, #0
    ffa2:	9004      	str	r0, [sp, #16]
    ffa4:	4563      	cmp	r3, ip
    ffa6:	d31c      	bcc.n	ffe2 <__multiply+0x7e>
    ffa8:	002a      	movs	r2, r5
    ffaa:	3414      	adds	r4, #20
    ffac:	00bf      	lsls	r7, r7, #2
    ffae:	19e3      	adds	r3, r4, r7
    ffb0:	3214      	adds	r2, #20
    ffb2:	00b6      	lsls	r6, r6, #2
    ffb4:	9305      	str	r3, [sp, #20]
    ffb6:	1993      	adds	r3, r2, r6
    ffb8:	9402      	str	r4, [sp, #8]
    ffba:	9306      	str	r3, [sp, #24]
    ffbc:	9b06      	ldr	r3, [sp, #24]
    ffbe:	429a      	cmp	r2, r3
    ffc0:	d311      	bcc.n	ffe6 <__multiply+0x82>
    ffc2:	9b01      	ldr	r3, [sp, #4]
    ffc4:	2b00      	cmp	r3, #0
    ffc6:	dd06      	ble.n	ffd6 <__multiply+0x72>
    ffc8:	2304      	movs	r3, #4
    ffca:	425b      	negs	r3, r3
    ffcc:	449c      	add	ip, r3
    ffce:	4663      	mov	r3, ip
    ffd0:	681b      	ldr	r3, [r3, #0]
    ffd2:	2b00      	cmp	r3, #0
    ffd4:	d051      	beq.n	1007a <__multiply+0x116>
    ffd6:	9b04      	ldr	r3, [sp, #16]
    ffd8:	9a01      	ldr	r2, [sp, #4]
    ffda:	0018      	movs	r0, r3
    ffdc:	611a      	str	r2, [r3, #16]
    ffde:	b009      	add	sp, #36	; 0x24
    ffe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffe2:	c304      	stmia	r3!, {r2}
    ffe4:	e7de      	b.n	ffa4 <__multiply+0x40>
    ffe6:	8814      	ldrh	r4, [r2, #0]
    ffe8:	2c00      	cmp	r4, #0
    ffea:	d01e      	beq.n	1002a <__multiply+0xc6>
    ffec:	2600      	movs	r6, #0
    ffee:	9d00      	ldr	r5, [sp, #0]
    fff0:	9f02      	ldr	r7, [sp, #8]
    fff2:	cf01      	ldmia	r7!, {r0}
    fff4:	9507      	str	r5, [sp, #28]
    fff6:	cd08      	ldmia	r5!, {r3}
    fff8:	9303      	str	r3, [sp, #12]
    fffa:	b283      	uxth	r3, r0
    fffc:	4363      	muls	r3, r4
    fffe:	0019      	movs	r1, r3
   10000:	466b      	mov	r3, sp
   10002:	0c00      	lsrs	r0, r0, #16
   10004:	899b      	ldrh	r3, [r3, #12]
   10006:	4360      	muls	r0, r4
   10008:	18cb      	adds	r3, r1, r3
   1000a:	9903      	ldr	r1, [sp, #12]
   1000c:	199b      	adds	r3, r3, r6
   1000e:	0c09      	lsrs	r1, r1, #16
   10010:	1841      	adds	r1, r0, r1
   10012:	0c18      	lsrs	r0, r3, #16
   10014:	1809      	adds	r1, r1, r0
   10016:	0c0e      	lsrs	r6, r1, #16
   10018:	b29b      	uxth	r3, r3
   1001a:	0409      	lsls	r1, r1, #16
   1001c:	430b      	orrs	r3, r1
   1001e:	9907      	ldr	r1, [sp, #28]
   10020:	600b      	str	r3, [r1, #0]
   10022:	9b05      	ldr	r3, [sp, #20]
   10024:	42bb      	cmp	r3, r7
   10026:	d8e4      	bhi.n	fff2 <__multiply+0x8e>
   10028:	602e      	str	r6, [r5, #0]
   1002a:	6813      	ldr	r3, [r2, #0]
   1002c:	0c1b      	lsrs	r3, r3, #16
   1002e:	9303      	str	r3, [sp, #12]
   10030:	d01e      	beq.n	10070 <__multiply+0x10c>
   10032:	2600      	movs	r6, #0
   10034:	9b00      	ldr	r3, [sp, #0]
   10036:	9c02      	ldr	r4, [sp, #8]
   10038:	681b      	ldr	r3, [r3, #0]
   1003a:	9800      	ldr	r0, [sp, #0]
   1003c:	0007      	movs	r7, r0
   1003e:	8821      	ldrh	r1, [r4, #0]
   10040:	9d03      	ldr	r5, [sp, #12]
   10042:	b29b      	uxth	r3, r3
   10044:	4369      	muls	r1, r5
   10046:	c820      	ldmia	r0!, {r5}
   10048:	0c2d      	lsrs	r5, r5, #16
   1004a:	1949      	adds	r1, r1, r5
   1004c:	198e      	adds	r6, r1, r6
   1004e:	0431      	lsls	r1, r6, #16
   10050:	430b      	orrs	r3, r1
   10052:	603b      	str	r3, [r7, #0]
   10054:	cc08      	ldmia	r4!, {r3}
   10056:	9903      	ldr	r1, [sp, #12]
   10058:	0c1b      	lsrs	r3, r3, #16
   1005a:	434b      	muls	r3, r1
   1005c:	6879      	ldr	r1, [r7, #4]
   1005e:	0c36      	lsrs	r6, r6, #16
   10060:	b289      	uxth	r1, r1
   10062:	185b      	adds	r3, r3, r1
   10064:	9905      	ldr	r1, [sp, #20]
   10066:	199b      	adds	r3, r3, r6
   10068:	0c1e      	lsrs	r6, r3, #16
   1006a:	42a1      	cmp	r1, r4
   1006c:	d8e6      	bhi.n	1003c <__multiply+0xd8>
   1006e:	6003      	str	r3, [r0, #0]
   10070:	9b00      	ldr	r3, [sp, #0]
   10072:	3204      	adds	r2, #4
   10074:	3304      	adds	r3, #4
   10076:	9300      	str	r3, [sp, #0]
   10078:	e7a0      	b.n	ffbc <__multiply+0x58>
   1007a:	9b01      	ldr	r3, [sp, #4]
   1007c:	3b01      	subs	r3, #1
   1007e:	9301      	str	r3, [sp, #4]
   10080:	e79f      	b.n	ffc2 <__multiply+0x5e>
	...

00010084 <__pow5mult>:
   10084:	2303      	movs	r3, #3
   10086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10088:	4013      	ands	r3, r2
   1008a:	0005      	movs	r5, r0
   1008c:	000e      	movs	r6, r1
   1008e:	0014      	movs	r4, r2
   10090:	2b00      	cmp	r3, #0
   10092:	d008      	beq.n	100a6 <__pow5mult+0x22>
   10094:	4922      	ldr	r1, [pc, #136]	; (10120 <__pow5mult+0x9c>)
   10096:	3b01      	subs	r3, #1
   10098:	009a      	lsls	r2, r3, #2
   1009a:	5852      	ldr	r2, [r2, r1]
   1009c:	2300      	movs	r3, #0
   1009e:	0031      	movs	r1, r6
   100a0:	f7ff fed2 	bl	fe48 <__multadd>
   100a4:	0006      	movs	r6, r0
   100a6:	10a3      	asrs	r3, r4, #2
   100a8:	9301      	str	r3, [sp, #4]
   100aa:	d036      	beq.n	1011a <__pow5mult+0x96>
   100ac:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   100ae:	2c00      	cmp	r4, #0
   100b0:	d107      	bne.n	100c2 <__pow5mult+0x3e>
   100b2:	2010      	movs	r0, #16
   100b4:	f7fd fe3e 	bl	dd34 <malloc>
   100b8:	6268      	str	r0, [r5, #36]	; 0x24
   100ba:	6044      	str	r4, [r0, #4]
   100bc:	6084      	str	r4, [r0, #8]
   100be:	6004      	str	r4, [r0, #0]
   100c0:	60c4      	str	r4, [r0, #12]
   100c2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   100c4:	68bc      	ldr	r4, [r7, #8]
   100c6:	2c00      	cmp	r4, #0
   100c8:	d107      	bne.n	100da <__pow5mult+0x56>
   100ca:	4916      	ldr	r1, [pc, #88]	; (10124 <__pow5mult+0xa0>)
   100cc:	0028      	movs	r0, r5
   100ce:	f7ff ff40 	bl	ff52 <__i2b>
   100d2:	2300      	movs	r3, #0
   100d4:	0004      	movs	r4, r0
   100d6:	60b8      	str	r0, [r7, #8]
   100d8:	6003      	str	r3, [r0, #0]
   100da:	2201      	movs	r2, #1
   100dc:	9b01      	ldr	r3, [sp, #4]
   100de:	4213      	tst	r3, r2
   100e0:	d00a      	beq.n	100f8 <__pow5mult+0x74>
   100e2:	0031      	movs	r1, r6
   100e4:	0022      	movs	r2, r4
   100e6:	0028      	movs	r0, r5
   100e8:	f7ff ff3c 	bl	ff64 <__multiply>
   100ec:	0007      	movs	r7, r0
   100ee:	0031      	movs	r1, r6
   100f0:	0028      	movs	r0, r5
   100f2:	f7ff fe90 	bl	fe16 <_Bfree>
   100f6:	003e      	movs	r6, r7
   100f8:	9b01      	ldr	r3, [sp, #4]
   100fa:	105b      	asrs	r3, r3, #1
   100fc:	9301      	str	r3, [sp, #4]
   100fe:	d00c      	beq.n	1011a <__pow5mult+0x96>
   10100:	6820      	ldr	r0, [r4, #0]
   10102:	2800      	cmp	r0, #0
   10104:	d107      	bne.n	10116 <__pow5mult+0x92>
   10106:	0022      	movs	r2, r4
   10108:	0021      	movs	r1, r4
   1010a:	0028      	movs	r0, r5
   1010c:	f7ff ff2a 	bl	ff64 <__multiply>
   10110:	2300      	movs	r3, #0
   10112:	6020      	str	r0, [r4, #0]
   10114:	6003      	str	r3, [r0, #0]
   10116:	0004      	movs	r4, r0
   10118:	e7df      	b.n	100da <__pow5mult+0x56>
   1011a:	0030      	movs	r0, r6
   1011c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1011e:	46c0      	nop			; (mov r8, r8)
   10120:	000143d8 	.word	0x000143d8
   10124:	00000271 	.word	0x00000271

00010128 <__lshift>:
   10128:	b5f0      	push	{r4, r5, r6, r7, lr}
   1012a:	000d      	movs	r5, r1
   1012c:	0017      	movs	r7, r2
   1012e:	692b      	ldr	r3, [r5, #16]
   10130:	1154      	asrs	r4, r2, #5
   10132:	b085      	sub	sp, #20
   10134:	18e3      	adds	r3, r4, r3
   10136:	9302      	str	r3, [sp, #8]
   10138:	3301      	adds	r3, #1
   1013a:	9301      	str	r3, [sp, #4]
   1013c:	6849      	ldr	r1, [r1, #4]
   1013e:	68ab      	ldr	r3, [r5, #8]
   10140:	9003      	str	r0, [sp, #12]
   10142:	9a01      	ldr	r2, [sp, #4]
   10144:	4293      	cmp	r3, r2
   10146:	db34      	blt.n	101b2 <__lshift+0x8a>
   10148:	9803      	ldr	r0, [sp, #12]
   1014a:	f7ff fe2c 	bl	fda6 <_Balloc>
   1014e:	2300      	movs	r3, #0
   10150:	0002      	movs	r2, r0
   10152:	0006      	movs	r6, r0
   10154:	0019      	movs	r1, r3
   10156:	3214      	adds	r2, #20
   10158:	42a3      	cmp	r3, r4
   1015a:	db2d      	blt.n	101b8 <__lshift+0x90>
   1015c:	43e3      	mvns	r3, r4
   1015e:	17db      	asrs	r3, r3, #31
   10160:	401c      	ands	r4, r3
   10162:	002b      	movs	r3, r5
   10164:	211f      	movs	r1, #31
   10166:	00a4      	lsls	r4, r4, #2
   10168:	1914      	adds	r4, r2, r4
   1016a:	692a      	ldr	r2, [r5, #16]
   1016c:	3314      	adds	r3, #20
   1016e:	0092      	lsls	r2, r2, #2
   10170:	189a      	adds	r2, r3, r2
   10172:	400f      	ands	r7, r1
   10174:	d024      	beq.n	101c0 <__lshift+0x98>
   10176:	3101      	adds	r1, #1
   10178:	1bc9      	subs	r1, r1, r7
   1017a:	468c      	mov	ip, r1
   1017c:	2100      	movs	r1, #0
   1017e:	6818      	ldr	r0, [r3, #0]
   10180:	40b8      	lsls	r0, r7
   10182:	4301      	orrs	r1, r0
   10184:	4660      	mov	r0, ip
   10186:	6021      	str	r1, [r4, #0]
   10188:	cb02      	ldmia	r3!, {r1}
   1018a:	3404      	adds	r4, #4
   1018c:	40c1      	lsrs	r1, r0
   1018e:	429a      	cmp	r2, r3
   10190:	d8f5      	bhi.n	1017e <__lshift+0x56>
   10192:	6021      	str	r1, [r4, #0]
   10194:	2900      	cmp	r1, #0
   10196:	d002      	beq.n	1019e <__lshift+0x76>
   10198:	9b02      	ldr	r3, [sp, #8]
   1019a:	3302      	adds	r3, #2
   1019c:	9301      	str	r3, [sp, #4]
   1019e:	9b01      	ldr	r3, [sp, #4]
   101a0:	9803      	ldr	r0, [sp, #12]
   101a2:	3b01      	subs	r3, #1
   101a4:	6133      	str	r3, [r6, #16]
   101a6:	0029      	movs	r1, r5
   101a8:	f7ff fe35 	bl	fe16 <_Bfree>
   101ac:	0030      	movs	r0, r6
   101ae:	b005      	add	sp, #20
   101b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101b2:	3101      	adds	r1, #1
   101b4:	005b      	lsls	r3, r3, #1
   101b6:	e7c4      	b.n	10142 <__lshift+0x1a>
   101b8:	0098      	lsls	r0, r3, #2
   101ba:	5011      	str	r1, [r2, r0]
   101bc:	3301      	adds	r3, #1
   101be:	e7cb      	b.n	10158 <__lshift+0x30>
   101c0:	cb02      	ldmia	r3!, {r1}
   101c2:	c402      	stmia	r4!, {r1}
   101c4:	429a      	cmp	r2, r3
   101c6:	d8fb      	bhi.n	101c0 <__lshift+0x98>
   101c8:	e7e9      	b.n	1019e <__lshift+0x76>

000101ca <__mcmp>:
   101ca:	690a      	ldr	r2, [r1, #16]
   101cc:	6903      	ldr	r3, [r0, #16]
   101ce:	b530      	push	{r4, r5, lr}
   101d0:	1a9b      	subs	r3, r3, r2
   101d2:	d10e      	bne.n	101f2 <__mcmp+0x28>
   101d4:	0092      	lsls	r2, r2, #2
   101d6:	3014      	adds	r0, #20
   101d8:	3114      	adds	r1, #20
   101da:	1884      	adds	r4, r0, r2
   101dc:	1889      	adds	r1, r1, r2
   101de:	3c04      	subs	r4, #4
   101e0:	3904      	subs	r1, #4
   101e2:	6822      	ldr	r2, [r4, #0]
   101e4:	680d      	ldr	r5, [r1, #0]
   101e6:	42aa      	cmp	r2, r5
   101e8:	d005      	beq.n	101f6 <__mcmp+0x2c>
   101ea:	42aa      	cmp	r2, r5
   101ec:	4192      	sbcs	r2, r2
   101ee:	2301      	movs	r3, #1
   101f0:	4313      	orrs	r3, r2
   101f2:	0018      	movs	r0, r3
   101f4:	bd30      	pop	{r4, r5, pc}
   101f6:	42a0      	cmp	r0, r4
   101f8:	d3f1      	bcc.n	101de <__mcmp+0x14>
   101fa:	e7fa      	b.n	101f2 <__mcmp+0x28>

000101fc <__mdiff>:
   101fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   101fe:	000d      	movs	r5, r1
   10200:	b085      	sub	sp, #20
   10202:	0007      	movs	r7, r0
   10204:	0011      	movs	r1, r2
   10206:	0028      	movs	r0, r5
   10208:	0014      	movs	r4, r2
   1020a:	f7ff ffde 	bl	101ca <__mcmp>
   1020e:	1e06      	subs	r6, r0, #0
   10210:	d108      	bne.n	10224 <__mdiff+0x28>
   10212:	0001      	movs	r1, r0
   10214:	0038      	movs	r0, r7
   10216:	f7ff fdc6 	bl	fda6 <_Balloc>
   1021a:	2301      	movs	r3, #1
   1021c:	6146      	str	r6, [r0, #20]
   1021e:	6103      	str	r3, [r0, #16]
   10220:	b005      	add	sp, #20
   10222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10224:	2301      	movs	r3, #1
   10226:	9301      	str	r3, [sp, #4]
   10228:	2800      	cmp	r0, #0
   1022a:	db04      	blt.n	10236 <__mdiff+0x3a>
   1022c:	0023      	movs	r3, r4
   1022e:	002c      	movs	r4, r5
   10230:	001d      	movs	r5, r3
   10232:	2300      	movs	r3, #0
   10234:	9301      	str	r3, [sp, #4]
   10236:	6861      	ldr	r1, [r4, #4]
   10238:	0038      	movs	r0, r7
   1023a:	f7ff fdb4 	bl	fda6 <_Balloc>
   1023e:	002f      	movs	r7, r5
   10240:	2200      	movs	r2, #0
   10242:	9b01      	ldr	r3, [sp, #4]
   10244:	6926      	ldr	r6, [r4, #16]
   10246:	60c3      	str	r3, [r0, #12]
   10248:	3414      	adds	r4, #20
   1024a:	00b3      	lsls	r3, r6, #2
   1024c:	18e3      	adds	r3, r4, r3
   1024e:	9302      	str	r3, [sp, #8]
   10250:	692b      	ldr	r3, [r5, #16]
   10252:	3714      	adds	r7, #20
   10254:	009b      	lsls	r3, r3, #2
   10256:	18fb      	adds	r3, r7, r3
   10258:	9303      	str	r3, [sp, #12]
   1025a:	0003      	movs	r3, r0
   1025c:	4694      	mov	ip, r2
   1025e:	3314      	adds	r3, #20
   10260:	cc20      	ldmia	r4!, {r5}
   10262:	cf04      	ldmia	r7!, {r2}
   10264:	9201      	str	r2, [sp, #4]
   10266:	b2aa      	uxth	r2, r5
   10268:	4494      	add	ip, r2
   1026a:	466a      	mov	r2, sp
   1026c:	4661      	mov	r1, ip
   1026e:	8892      	ldrh	r2, [r2, #4]
   10270:	0c2d      	lsrs	r5, r5, #16
   10272:	1a8a      	subs	r2, r1, r2
   10274:	9901      	ldr	r1, [sp, #4]
   10276:	0c09      	lsrs	r1, r1, #16
   10278:	1a69      	subs	r1, r5, r1
   1027a:	1415      	asrs	r5, r2, #16
   1027c:	1949      	adds	r1, r1, r5
   1027e:	140d      	asrs	r5, r1, #16
   10280:	b292      	uxth	r2, r2
   10282:	0409      	lsls	r1, r1, #16
   10284:	430a      	orrs	r2, r1
   10286:	601a      	str	r2, [r3, #0]
   10288:	9a03      	ldr	r2, [sp, #12]
   1028a:	46ac      	mov	ip, r5
   1028c:	3304      	adds	r3, #4
   1028e:	42ba      	cmp	r2, r7
   10290:	d8e6      	bhi.n	10260 <__mdiff+0x64>
   10292:	9902      	ldr	r1, [sp, #8]
   10294:	001a      	movs	r2, r3
   10296:	428c      	cmp	r4, r1
   10298:	d305      	bcc.n	102a6 <__mdiff+0xaa>
   1029a:	3a04      	subs	r2, #4
   1029c:	6813      	ldr	r3, [r2, #0]
   1029e:	2b00      	cmp	r3, #0
   102a0:	d00e      	beq.n	102c0 <__mdiff+0xc4>
   102a2:	6106      	str	r6, [r0, #16]
   102a4:	e7bc      	b.n	10220 <__mdiff+0x24>
   102a6:	cc04      	ldmia	r4!, {r2}
   102a8:	b291      	uxth	r1, r2
   102aa:	4461      	add	r1, ip
   102ac:	140d      	asrs	r5, r1, #16
   102ae:	0c12      	lsrs	r2, r2, #16
   102b0:	1952      	adds	r2, r2, r5
   102b2:	1415      	asrs	r5, r2, #16
   102b4:	b289      	uxth	r1, r1
   102b6:	0412      	lsls	r2, r2, #16
   102b8:	430a      	orrs	r2, r1
   102ba:	46ac      	mov	ip, r5
   102bc:	c304      	stmia	r3!, {r2}
   102be:	e7e8      	b.n	10292 <__mdiff+0x96>
   102c0:	3e01      	subs	r6, #1
   102c2:	e7ea      	b.n	1029a <__mdiff+0x9e>

000102c4 <__d2b>:
   102c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   102c6:	001d      	movs	r5, r3
   102c8:	2101      	movs	r1, #1
   102ca:	9f08      	ldr	r7, [sp, #32]
   102cc:	0014      	movs	r4, r2
   102ce:	f7ff fd6a 	bl	fda6 <_Balloc>
   102d2:	032b      	lsls	r3, r5, #12
   102d4:	006d      	lsls	r5, r5, #1
   102d6:	0006      	movs	r6, r0
   102d8:	0b1b      	lsrs	r3, r3, #12
   102da:	0d6d      	lsrs	r5, r5, #21
   102dc:	d124      	bne.n	10328 <__d2b+0x64>
   102de:	9301      	str	r3, [sp, #4]
   102e0:	2c00      	cmp	r4, #0
   102e2:	d027      	beq.n	10334 <__d2b+0x70>
   102e4:	4668      	mov	r0, sp
   102e6:	9400      	str	r4, [sp, #0]
   102e8:	f7ff fe04 	bl	fef4 <__lo0bits>
   102ec:	9c00      	ldr	r4, [sp, #0]
   102ee:	2800      	cmp	r0, #0
   102f0:	d01e      	beq.n	10330 <__d2b+0x6c>
   102f2:	9b01      	ldr	r3, [sp, #4]
   102f4:	2120      	movs	r1, #32
   102f6:	001a      	movs	r2, r3
   102f8:	1a09      	subs	r1, r1, r0
   102fa:	408a      	lsls	r2, r1
   102fc:	40c3      	lsrs	r3, r0
   102fe:	4322      	orrs	r2, r4
   10300:	6172      	str	r2, [r6, #20]
   10302:	9301      	str	r3, [sp, #4]
   10304:	9c01      	ldr	r4, [sp, #4]
   10306:	61b4      	str	r4, [r6, #24]
   10308:	1e63      	subs	r3, r4, #1
   1030a:	419c      	sbcs	r4, r3
   1030c:	3401      	adds	r4, #1
   1030e:	6134      	str	r4, [r6, #16]
   10310:	2d00      	cmp	r5, #0
   10312:	d018      	beq.n	10346 <__d2b+0x82>
   10314:	4b12      	ldr	r3, [pc, #72]	; (10360 <__d2b+0x9c>)
   10316:	18ed      	adds	r5, r5, r3
   10318:	2335      	movs	r3, #53	; 0x35
   1031a:	182d      	adds	r5, r5, r0
   1031c:	603d      	str	r5, [r7, #0]
   1031e:	1a18      	subs	r0, r3, r0
   10320:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10322:	6018      	str	r0, [r3, #0]
   10324:	0030      	movs	r0, r6
   10326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10328:	2280      	movs	r2, #128	; 0x80
   1032a:	0352      	lsls	r2, r2, #13
   1032c:	4313      	orrs	r3, r2
   1032e:	e7d6      	b.n	102de <__d2b+0x1a>
   10330:	6174      	str	r4, [r6, #20]
   10332:	e7e7      	b.n	10304 <__d2b+0x40>
   10334:	a801      	add	r0, sp, #4
   10336:	f7ff fddd 	bl	fef4 <__lo0bits>
   1033a:	2401      	movs	r4, #1
   1033c:	9b01      	ldr	r3, [sp, #4]
   1033e:	6134      	str	r4, [r6, #16]
   10340:	6173      	str	r3, [r6, #20]
   10342:	3020      	adds	r0, #32
   10344:	e7e4      	b.n	10310 <__d2b+0x4c>
   10346:	4b07      	ldr	r3, [pc, #28]	; (10364 <__d2b+0xa0>)
   10348:	18c0      	adds	r0, r0, r3
   1034a:	4b07      	ldr	r3, [pc, #28]	; (10368 <__d2b+0xa4>)
   1034c:	6038      	str	r0, [r7, #0]
   1034e:	18e3      	adds	r3, r4, r3
   10350:	009b      	lsls	r3, r3, #2
   10352:	18f3      	adds	r3, r6, r3
   10354:	6958      	ldr	r0, [r3, #20]
   10356:	f7ff fdb3 	bl	fec0 <__hi0bits>
   1035a:	0164      	lsls	r4, r4, #5
   1035c:	1a20      	subs	r0, r4, r0
   1035e:	e7df      	b.n	10320 <__d2b+0x5c>
   10360:	fffffbcd 	.word	0xfffffbcd
   10364:	fffffbce 	.word	0xfffffbce
   10368:	3fffffff 	.word	0x3fffffff

0001036c <_calloc_r>:
   1036c:	434a      	muls	r2, r1
   1036e:	b570      	push	{r4, r5, r6, lr}
   10370:	0011      	movs	r1, r2
   10372:	0014      	movs	r4, r2
   10374:	f7fd fd68 	bl	de48 <_malloc_r>
   10378:	1e05      	subs	r5, r0, #0
   1037a:	d003      	beq.n	10384 <_calloc_r+0x18>
   1037c:	0022      	movs	r2, r4
   1037e:	2100      	movs	r1, #0
   10380:	f7fd fd0f 	bl	dda2 <memset>
   10384:	0028      	movs	r0, r5
   10386:	bd70      	pop	{r4, r5, r6, pc}

00010388 <__sfputc_r>:
   10388:	6893      	ldr	r3, [r2, #8]
   1038a:	b510      	push	{r4, lr}
   1038c:	3b01      	subs	r3, #1
   1038e:	6093      	str	r3, [r2, #8]
   10390:	2b00      	cmp	r3, #0
   10392:	da05      	bge.n	103a0 <__sfputc_r+0x18>
   10394:	6994      	ldr	r4, [r2, #24]
   10396:	42a3      	cmp	r3, r4
   10398:	db08      	blt.n	103ac <__sfputc_r+0x24>
   1039a:	b2cb      	uxtb	r3, r1
   1039c:	2b0a      	cmp	r3, #10
   1039e:	d005      	beq.n	103ac <__sfputc_r+0x24>
   103a0:	6813      	ldr	r3, [r2, #0]
   103a2:	1c58      	adds	r0, r3, #1
   103a4:	6010      	str	r0, [r2, #0]
   103a6:	7019      	strb	r1, [r3, #0]
   103a8:	b2c8      	uxtb	r0, r1
   103aa:	bd10      	pop	{r4, pc}
   103ac:	f7fe fba4 	bl	eaf8 <__swbuf_r>
   103b0:	e7fb      	b.n	103aa <__sfputc_r+0x22>

000103b2 <__sfputs_r>:
   103b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103b4:	0006      	movs	r6, r0
   103b6:	000f      	movs	r7, r1
   103b8:	0014      	movs	r4, r2
   103ba:	18d5      	adds	r5, r2, r3
   103bc:	42ac      	cmp	r4, r5
   103be:	d101      	bne.n	103c4 <__sfputs_r+0x12>
   103c0:	2000      	movs	r0, #0
   103c2:	e007      	b.n	103d4 <__sfputs_r+0x22>
   103c4:	7821      	ldrb	r1, [r4, #0]
   103c6:	003a      	movs	r2, r7
   103c8:	0030      	movs	r0, r6
   103ca:	f7ff ffdd 	bl	10388 <__sfputc_r>
   103ce:	3401      	adds	r4, #1
   103d0:	1c43      	adds	r3, r0, #1
   103d2:	d1f3      	bne.n	103bc <__sfputs_r+0xa>
   103d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000103d8 <_vfiprintf_r>:
   103d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   103da:	b09f      	sub	sp, #124	; 0x7c
   103dc:	0006      	movs	r6, r0
   103de:	000f      	movs	r7, r1
   103e0:	0014      	movs	r4, r2
   103e2:	9305      	str	r3, [sp, #20]
   103e4:	2800      	cmp	r0, #0
   103e6:	d004      	beq.n	103f2 <_vfiprintf_r+0x1a>
   103e8:	6983      	ldr	r3, [r0, #24]
   103ea:	2b00      	cmp	r3, #0
   103ec:	d101      	bne.n	103f2 <_vfiprintf_r+0x1a>
   103ee:	f7ff fbbf 	bl	fb70 <__sinit>
   103f2:	4b7f      	ldr	r3, [pc, #508]	; (105f0 <_vfiprintf_r+0x218>)
   103f4:	429f      	cmp	r7, r3
   103f6:	d15c      	bne.n	104b2 <_vfiprintf_r+0xda>
   103f8:	6877      	ldr	r7, [r6, #4]
   103fa:	89bb      	ldrh	r3, [r7, #12]
   103fc:	071b      	lsls	r3, r3, #28
   103fe:	d562      	bpl.n	104c6 <_vfiprintf_r+0xee>
   10400:	693b      	ldr	r3, [r7, #16]
   10402:	2b00      	cmp	r3, #0
   10404:	d05f      	beq.n	104c6 <_vfiprintf_r+0xee>
   10406:	2300      	movs	r3, #0
   10408:	ad06      	add	r5, sp, #24
   1040a:	616b      	str	r3, [r5, #20]
   1040c:	3320      	adds	r3, #32
   1040e:	766b      	strb	r3, [r5, #25]
   10410:	3310      	adds	r3, #16
   10412:	76ab      	strb	r3, [r5, #26]
   10414:	9402      	str	r4, [sp, #8]
   10416:	9c02      	ldr	r4, [sp, #8]
   10418:	7823      	ldrb	r3, [r4, #0]
   1041a:	2b00      	cmp	r3, #0
   1041c:	d15d      	bne.n	104da <_vfiprintf_r+0x102>
   1041e:	9b02      	ldr	r3, [sp, #8]
   10420:	1ae3      	subs	r3, r4, r3
   10422:	9304      	str	r3, [sp, #16]
   10424:	d00d      	beq.n	10442 <_vfiprintf_r+0x6a>
   10426:	9b04      	ldr	r3, [sp, #16]
   10428:	9a02      	ldr	r2, [sp, #8]
   1042a:	0039      	movs	r1, r7
   1042c:	0030      	movs	r0, r6
   1042e:	f7ff ffc0 	bl	103b2 <__sfputs_r>
   10432:	1c43      	adds	r3, r0, #1
   10434:	d100      	bne.n	10438 <_vfiprintf_r+0x60>
   10436:	e0cc      	b.n	105d2 <_vfiprintf_r+0x1fa>
   10438:	696a      	ldr	r2, [r5, #20]
   1043a:	9b04      	ldr	r3, [sp, #16]
   1043c:	4694      	mov	ip, r2
   1043e:	4463      	add	r3, ip
   10440:	616b      	str	r3, [r5, #20]
   10442:	7823      	ldrb	r3, [r4, #0]
   10444:	2b00      	cmp	r3, #0
   10446:	d100      	bne.n	1044a <_vfiprintf_r+0x72>
   10448:	e0c3      	b.n	105d2 <_vfiprintf_r+0x1fa>
   1044a:	2201      	movs	r2, #1
   1044c:	2300      	movs	r3, #0
   1044e:	4252      	negs	r2, r2
   10450:	606a      	str	r2, [r5, #4]
   10452:	a902      	add	r1, sp, #8
   10454:	3254      	adds	r2, #84	; 0x54
   10456:	1852      	adds	r2, r2, r1
   10458:	3401      	adds	r4, #1
   1045a:	602b      	str	r3, [r5, #0]
   1045c:	60eb      	str	r3, [r5, #12]
   1045e:	60ab      	str	r3, [r5, #8]
   10460:	7013      	strb	r3, [r2, #0]
   10462:	65ab      	str	r3, [r5, #88]	; 0x58
   10464:	7821      	ldrb	r1, [r4, #0]
   10466:	2205      	movs	r2, #5
   10468:	4862      	ldr	r0, [pc, #392]	; (105f4 <_vfiprintf_r+0x21c>)
   1046a:	f7ff fc8f 	bl	fd8c <memchr>
   1046e:	1c63      	adds	r3, r4, #1
   10470:	469c      	mov	ip, r3
   10472:	2800      	cmp	r0, #0
   10474:	d135      	bne.n	104e2 <_vfiprintf_r+0x10a>
   10476:	6829      	ldr	r1, [r5, #0]
   10478:	06cb      	lsls	r3, r1, #27
   1047a:	d504      	bpl.n	10486 <_vfiprintf_r+0xae>
   1047c:	2353      	movs	r3, #83	; 0x53
   1047e:	aa02      	add	r2, sp, #8
   10480:	3020      	adds	r0, #32
   10482:	189b      	adds	r3, r3, r2
   10484:	7018      	strb	r0, [r3, #0]
   10486:	070b      	lsls	r3, r1, #28
   10488:	d504      	bpl.n	10494 <_vfiprintf_r+0xbc>
   1048a:	2353      	movs	r3, #83	; 0x53
   1048c:	202b      	movs	r0, #43	; 0x2b
   1048e:	aa02      	add	r2, sp, #8
   10490:	189b      	adds	r3, r3, r2
   10492:	7018      	strb	r0, [r3, #0]
   10494:	7823      	ldrb	r3, [r4, #0]
   10496:	2b2a      	cmp	r3, #42	; 0x2a
   10498:	d02c      	beq.n	104f4 <_vfiprintf_r+0x11c>
   1049a:	2000      	movs	r0, #0
   1049c:	210a      	movs	r1, #10
   1049e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   104a0:	7822      	ldrb	r2, [r4, #0]
   104a2:	3a30      	subs	r2, #48	; 0x30
   104a4:	2a09      	cmp	r2, #9
   104a6:	d800      	bhi.n	104aa <_vfiprintf_r+0xd2>
   104a8:	e06b      	b.n	10582 <_vfiprintf_r+0x1aa>
   104aa:	2800      	cmp	r0, #0
   104ac:	d02a      	beq.n	10504 <_vfiprintf_r+0x12c>
   104ae:	9309      	str	r3, [sp, #36]	; 0x24
   104b0:	e028      	b.n	10504 <_vfiprintf_r+0x12c>
   104b2:	4b51      	ldr	r3, [pc, #324]	; (105f8 <_vfiprintf_r+0x220>)
   104b4:	429f      	cmp	r7, r3
   104b6:	d101      	bne.n	104bc <_vfiprintf_r+0xe4>
   104b8:	68b7      	ldr	r7, [r6, #8]
   104ba:	e79e      	b.n	103fa <_vfiprintf_r+0x22>
   104bc:	4b4f      	ldr	r3, [pc, #316]	; (105fc <_vfiprintf_r+0x224>)
   104be:	429f      	cmp	r7, r3
   104c0:	d19b      	bne.n	103fa <_vfiprintf_r+0x22>
   104c2:	68f7      	ldr	r7, [r6, #12]
   104c4:	e799      	b.n	103fa <_vfiprintf_r+0x22>
   104c6:	0039      	movs	r1, r7
   104c8:	0030      	movs	r0, r6
   104ca:	f7fe fb77 	bl	ebbc <__swsetup_r>
   104ce:	2800      	cmp	r0, #0
   104d0:	d099      	beq.n	10406 <_vfiprintf_r+0x2e>
   104d2:	2001      	movs	r0, #1
   104d4:	4240      	negs	r0, r0
   104d6:	b01f      	add	sp, #124	; 0x7c
   104d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104da:	2b25      	cmp	r3, #37	; 0x25
   104dc:	d09f      	beq.n	1041e <_vfiprintf_r+0x46>
   104de:	3401      	adds	r4, #1
   104e0:	e79a      	b.n	10418 <_vfiprintf_r+0x40>
   104e2:	4b44      	ldr	r3, [pc, #272]	; (105f4 <_vfiprintf_r+0x21c>)
   104e4:	6829      	ldr	r1, [r5, #0]
   104e6:	1ac0      	subs	r0, r0, r3
   104e8:	2301      	movs	r3, #1
   104ea:	4083      	lsls	r3, r0
   104ec:	430b      	orrs	r3, r1
   104ee:	602b      	str	r3, [r5, #0]
   104f0:	4664      	mov	r4, ip
   104f2:	e7b7      	b.n	10464 <_vfiprintf_r+0x8c>
   104f4:	9b05      	ldr	r3, [sp, #20]
   104f6:	1d18      	adds	r0, r3, #4
   104f8:	681b      	ldr	r3, [r3, #0]
   104fa:	9005      	str	r0, [sp, #20]
   104fc:	2b00      	cmp	r3, #0
   104fe:	db3a      	blt.n	10576 <_vfiprintf_r+0x19e>
   10500:	9309      	str	r3, [sp, #36]	; 0x24
   10502:	4664      	mov	r4, ip
   10504:	7823      	ldrb	r3, [r4, #0]
   10506:	2b2e      	cmp	r3, #46	; 0x2e
   10508:	d10b      	bne.n	10522 <_vfiprintf_r+0x14a>
   1050a:	7863      	ldrb	r3, [r4, #1]
   1050c:	1c62      	adds	r2, r4, #1
   1050e:	2b2a      	cmp	r3, #42	; 0x2a
   10510:	d13f      	bne.n	10592 <_vfiprintf_r+0x1ba>
   10512:	9b05      	ldr	r3, [sp, #20]
   10514:	3402      	adds	r4, #2
   10516:	1d1a      	adds	r2, r3, #4
   10518:	681b      	ldr	r3, [r3, #0]
   1051a:	9205      	str	r2, [sp, #20]
   1051c:	2b00      	cmp	r3, #0
   1051e:	db35      	blt.n	1058c <_vfiprintf_r+0x1b4>
   10520:	9307      	str	r3, [sp, #28]
   10522:	7821      	ldrb	r1, [r4, #0]
   10524:	2203      	movs	r2, #3
   10526:	4836      	ldr	r0, [pc, #216]	; (10600 <_vfiprintf_r+0x228>)
   10528:	f7ff fc30 	bl	fd8c <memchr>
   1052c:	2800      	cmp	r0, #0
   1052e:	d007      	beq.n	10540 <_vfiprintf_r+0x168>
   10530:	4b33      	ldr	r3, [pc, #204]	; (10600 <_vfiprintf_r+0x228>)
   10532:	682a      	ldr	r2, [r5, #0]
   10534:	1ac0      	subs	r0, r0, r3
   10536:	2340      	movs	r3, #64	; 0x40
   10538:	4083      	lsls	r3, r0
   1053a:	4313      	orrs	r3, r2
   1053c:	602b      	str	r3, [r5, #0]
   1053e:	3401      	adds	r4, #1
   10540:	7821      	ldrb	r1, [r4, #0]
   10542:	1c63      	adds	r3, r4, #1
   10544:	2206      	movs	r2, #6
   10546:	482f      	ldr	r0, [pc, #188]	; (10604 <_vfiprintf_r+0x22c>)
   10548:	9302      	str	r3, [sp, #8]
   1054a:	7629      	strb	r1, [r5, #24]
   1054c:	f7ff fc1e 	bl	fd8c <memchr>
   10550:	2800      	cmp	r0, #0
   10552:	d044      	beq.n	105de <_vfiprintf_r+0x206>
   10554:	4b2c      	ldr	r3, [pc, #176]	; (10608 <_vfiprintf_r+0x230>)
   10556:	2b00      	cmp	r3, #0
   10558:	d12f      	bne.n	105ba <_vfiprintf_r+0x1e2>
   1055a:	6829      	ldr	r1, [r5, #0]
   1055c:	9b05      	ldr	r3, [sp, #20]
   1055e:	2207      	movs	r2, #7
   10560:	05c9      	lsls	r1, r1, #23
   10562:	d528      	bpl.n	105b6 <_vfiprintf_r+0x1de>
   10564:	189b      	adds	r3, r3, r2
   10566:	4393      	bics	r3, r2
   10568:	3308      	adds	r3, #8
   1056a:	9305      	str	r3, [sp, #20]
   1056c:	696b      	ldr	r3, [r5, #20]
   1056e:	9a03      	ldr	r2, [sp, #12]
   10570:	189b      	adds	r3, r3, r2
   10572:	616b      	str	r3, [r5, #20]
   10574:	e74f      	b.n	10416 <_vfiprintf_r+0x3e>
   10576:	425b      	negs	r3, r3
   10578:	60eb      	str	r3, [r5, #12]
   1057a:	2302      	movs	r3, #2
   1057c:	430b      	orrs	r3, r1
   1057e:	602b      	str	r3, [r5, #0]
   10580:	e7bf      	b.n	10502 <_vfiprintf_r+0x12a>
   10582:	434b      	muls	r3, r1
   10584:	3401      	adds	r4, #1
   10586:	189b      	adds	r3, r3, r2
   10588:	2001      	movs	r0, #1
   1058a:	e789      	b.n	104a0 <_vfiprintf_r+0xc8>
   1058c:	2301      	movs	r3, #1
   1058e:	425b      	negs	r3, r3
   10590:	e7c6      	b.n	10520 <_vfiprintf_r+0x148>
   10592:	2300      	movs	r3, #0
   10594:	0014      	movs	r4, r2
   10596:	200a      	movs	r0, #10
   10598:	001a      	movs	r2, r3
   1059a:	606b      	str	r3, [r5, #4]
   1059c:	7821      	ldrb	r1, [r4, #0]
   1059e:	3930      	subs	r1, #48	; 0x30
   105a0:	2909      	cmp	r1, #9
   105a2:	d903      	bls.n	105ac <_vfiprintf_r+0x1d4>
   105a4:	2b00      	cmp	r3, #0
   105a6:	d0bc      	beq.n	10522 <_vfiprintf_r+0x14a>
   105a8:	9207      	str	r2, [sp, #28]
   105aa:	e7ba      	b.n	10522 <_vfiprintf_r+0x14a>
   105ac:	4342      	muls	r2, r0
   105ae:	3401      	adds	r4, #1
   105b0:	1852      	adds	r2, r2, r1
   105b2:	2301      	movs	r3, #1
   105b4:	e7f2      	b.n	1059c <_vfiprintf_r+0x1c4>
   105b6:	3307      	adds	r3, #7
   105b8:	e7d5      	b.n	10566 <_vfiprintf_r+0x18e>
   105ba:	ab05      	add	r3, sp, #20
   105bc:	9300      	str	r3, [sp, #0]
   105be:	003a      	movs	r2, r7
   105c0:	4b12      	ldr	r3, [pc, #72]	; (1060c <_vfiprintf_r+0x234>)
   105c2:	0029      	movs	r1, r5
   105c4:	0030      	movs	r0, r6
   105c6:	f7fd fd39 	bl	e03c <_printf_float>
   105ca:	9003      	str	r0, [sp, #12]
   105cc:	9b03      	ldr	r3, [sp, #12]
   105ce:	3301      	adds	r3, #1
   105d0:	d1cc      	bne.n	1056c <_vfiprintf_r+0x194>
   105d2:	89bb      	ldrh	r3, [r7, #12]
   105d4:	065b      	lsls	r3, r3, #25
   105d6:	d500      	bpl.n	105da <_vfiprintf_r+0x202>
   105d8:	e77b      	b.n	104d2 <_vfiprintf_r+0xfa>
   105da:	980b      	ldr	r0, [sp, #44]	; 0x2c
   105dc:	e77b      	b.n	104d6 <_vfiprintf_r+0xfe>
   105de:	ab05      	add	r3, sp, #20
   105e0:	9300      	str	r3, [sp, #0]
   105e2:	003a      	movs	r2, r7
   105e4:	4b09      	ldr	r3, [pc, #36]	; (1060c <_vfiprintf_r+0x234>)
   105e6:	0029      	movs	r1, r5
   105e8:	0030      	movs	r0, r6
   105ea:	f7fd ffe1 	bl	e5b0 <_printf_i>
   105ee:	e7ec      	b.n	105ca <_vfiprintf_r+0x1f2>
   105f0:	000142a4 	.word	0x000142a4
   105f4:	000143e4 	.word	0x000143e4
   105f8:	000142c4 	.word	0x000142c4
   105fc:	00014284 	.word	0x00014284
   10600:	000143ea 	.word	0x000143ea
   10604:	000143ee 	.word	0x000143ee
   10608:	0000e03d 	.word	0x0000e03d
   1060c:	000103b3 	.word	0x000103b3

00010610 <_putc_r>:
   10610:	b570      	push	{r4, r5, r6, lr}
   10612:	0006      	movs	r6, r0
   10614:	000d      	movs	r5, r1
   10616:	0014      	movs	r4, r2
   10618:	2800      	cmp	r0, #0
   1061a:	d004      	beq.n	10626 <_putc_r+0x16>
   1061c:	6983      	ldr	r3, [r0, #24]
   1061e:	2b00      	cmp	r3, #0
   10620:	d101      	bne.n	10626 <_putc_r+0x16>
   10622:	f7ff faa5 	bl	fb70 <__sinit>
   10626:	4b12      	ldr	r3, [pc, #72]	; (10670 <_putc_r+0x60>)
   10628:	429c      	cmp	r4, r3
   1062a:	d111      	bne.n	10650 <_putc_r+0x40>
   1062c:	6874      	ldr	r4, [r6, #4]
   1062e:	68a3      	ldr	r3, [r4, #8]
   10630:	3b01      	subs	r3, #1
   10632:	60a3      	str	r3, [r4, #8]
   10634:	2b00      	cmp	r3, #0
   10636:	da05      	bge.n	10644 <_putc_r+0x34>
   10638:	69a2      	ldr	r2, [r4, #24]
   1063a:	4293      	cmp	r3, r2
   1063c:	db12      	blt.n	10664 <_putc_r+0x54>
   1063e:	b2eb      	uxtb	r3, r5
   10640:	2b0a      	cmp	r3, #10
   10642:	d00f      	beq.n	10664 <_putc_r+0x54>
   10644:	6823      	ldr	r3, [r4, #0]
   10646:	b2e8      	uxtb	r0, r5
   10648:	1c5a      	adds	r2, r3, #1
   1064a:	6022      	str	r2, [r4, #0]
   1064c:	701d      	strb	r5, [r3, #0]
   1064e:	bd70      	pop	{r4, r5, r6, pc}
   10650:	4b08      	ldr	r3, [pc, #32]	; (10674 <_putc_r+0x64>)
   10652:	429c      	cmp	r4, r3
   10654:	d101      	bne.n	1065a <_putc_r+0x4a>
   10656:	68b4      	ldr	r4, [r6, #8]
   10658:	e7e9      	b.n	1062e <_putc_r+0x1e>
   1065a:	4b07      	ldr	r3, [pc, #28]	; (10678 <_putc_r+0x68>)
   1065c:	429c      	cmp	r4, r3
   1065e:	d1e6      	bne.n	1062e <_putc_r+0x1e>
   10660:	68f4      	ldr	r4, [r6, #12]
   10662:	e7e4      	b.n	1062e <_putc_r+0x1e>
   10664:	0022      	movs	r2, r4
   10666:	0029      	movs	r1, r5
   10668:	0030      	movs	r0, r6
   1066a:	f7fe fa45 	bl	eaf8 <__swbuf_r>
   1066e:	e7ee      	b.n	1064e <_putc_r+0x3e>
   10670:	000142a4 	.word	0x000142a4
   10674:	000142c4 	.word	0x000142c4
   10678:	00014284 	.word	0x00014284

0001067c <__sread>:
   1067c:	b570      	push	{r4, r5, r6, lr}
   1067e:	000c      	movs	r4, r1
   10680:	250e      	movs	r5, #14
   10682:	5f49      	ldrsh	r1, [r1, r5]
   10684:	f000 f8a4 	bl	107d0 <_read_r>
   10688:	2800      	cmp	r0, #0
   1068a:	db03      	blt.n	10694 <__sread+0x18>
   1068c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1068e:	181b      	adds	r3, r3, r0
   10690:	6563      	str	r3, [r4, #84]	; 0x54
   10692:	bd70      	pop	{r4, r5, r6, pc}
   10694:	89a3      	ldrh	r3, [r4, #12]
   10696:	4a02      	ldr	r2, [pc, #8]	; (106a0 <__sread+0x24>)
   10698:	4013      	ands	r3, r2
   1069a:	81a3      	strh	r3, [r4, #12]
   1069c:	e7f9      	b.n	10692 <__sread+0x16>
   1069e:	46c0      	nop			; (mov r8, r8)
   106a0:	ffffefff 	.word	0xffffefff

000106a4 <__swrite>:
   106a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106a6:	001f      	movs	r7, r3
   106a8:	898b      	ldrh	r3, [r1, #12]
   106aa:	0005      	movs	r5, r0
   106ac:	000c      	movs	r4, r1
   106ae:	0016      	movs	r6, r2
   106b0:	05db      	lsls	r3, r3, #23
   106b2:	d505      	bpl.n	106c0 <__swrite+0x1c>
   106b4:	230e      	movs	r3, #14
   106b6:	5ec9      	ldrsh	r1, [r1, r3]
   106b8:	2200      	movs	r2, #0
   106ba:	2302      	movs	r3, #2
   106bc:	f000 f874 	bl	107a8 <_lseek_r>
   106c0:	89a3      	ldrh	r3, [r4, #12]
   106c2:	4a05      	ldr	r2, [pc, #20]	; (106d8 <__swrite+0x34>)
   106c4:	0028      	movs	r0, r5
   106c6:	4013      	ands	r3, r2
   106c8:	81a3      	strh	r3, [r4, #12]
   106ca:	0032      	movs	r2, r6
   106cc:	230e      	movs	r3, #14
   106ce:	5ee1      	ldrsh	r1, [r4, r3]
   106d0:	003b      	movs	r3, r7
   106d2:	f000 f81f 	bl	10714 <_write_r>
   106d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106d8:	ffffefff 	.word	0xffffefff

000106dc <__sseek>:
   106dc:	b570      	push	{r4, r5, r6, lr}
   106de:	000c      	movs	r4, r1
   106e0:	250e      	movs	r5, #14
   106e2:	5f49      	ldrsh	r1, [r1, r5]
   106e4:	f000 f860 	bl	107a8 <_lseek_r>
   106e8:	89a3      	ldrh	r3, [r4, #12]
   106ea:	1c42      	adds	r2, r0, #1
   106ec:	d103      	bne.n	106f6 <__sseek+0x1a>
   106ee:	4a05      	ldr	r2, [pc, #20]	; (10704 <__sseek+0x28>)
   106f0:	4013      	ands	r3, r2
   106f2:	81a3      	strh	r3, [r4, #12]
   106f4:	bd70      	pop	{r4, r5, r6, pc}
   106f6:	2280      	movs	r2, #128	; 0x80
   106f8:	0152      	lsls	r2, r2, #5
   106fa:	4313      	orrs	r3, r2
   106fc:	81a3      	strh	r3, [r4, #12]
   106fe:	6560      	str	r0, [r4, #84]	; 0x54
   10700:	e7f8      	b.n	106f4 <__sseek+0x18>
   10702:	46c0      	nop			; (mov r8, r8)
   10704:	ffffefff 	.word	0xffffefff

00010708 <__sclose>:
   10708:	b510      	push	{r4, lr}
   1070a:	230e      	movs	r3, #14
   1070c:	5ec9      	ldrsh	r1, [r1, r3]
   1070e:	f000 f815 	bl	1073c <_close_r>
   10712:	bd10      	pop	{r4, pc}

00010714 <_write_r>:
   10714:	b570      	push	{r4, r5, r6, lr}
   10716:	0005      	movs	r5, r0
   10718:	0008      	movs	r0, r1
   1071a:	0011      	movs	r1, r2
   1071c:	2200      	movs	r2, #0
   1071e:	4c06      	ldr	r4, [pc, #24]	; (10738 <_write_r+0x24>)
   10720:	6022      	str	r2, [r4, #0]
   10722:	001a      	movs	r2, r3
   10724:	f7fa f9d4 	bl	aad0 <_write>
   10728:	1c43      	adds	r3, r0, #1
   1072a:	d103      	bne.n	10734 <_write_r+0x20>
   1072c:	6823      	ldr	r3, [r4, #0]
   1072e:	2b00      	cmp	r3, #0
   10730:	d000      	beq.n	10734 <_write_r+0x20>
   10732:	602b      	str	r3, [r5, #0]
   10734:	bd70      	pop	{r4, r5, r6, pc}
   10736:	46c0      	nop			; (mov r8, r8)
   10738:	20000ac4 	.word	0x20000ac4

0001073c <_close_r>:
   1073c:	2300      	movs	r3, #0
   1073e:	b570      	push	{r4, r5, r6, lr}
   10740:	4c06      	ldr	r4, [pc, #24]	; (1075c <_close_r+0x20>)
   10742:	0005      	movs	r5, r0
   10744:	0008      	movs	r0, r1
   10746:	6023      	str	r3, [r4, #0]
   10748:	f7fc f9de 	bl	cb08 <_close>
   1074c:	1c43      	adds	r3, r0, #1
   1074e:	d103      	bne.n	10758 <_close_r+0x1c>
   10750:	6823      	ldr	r3, [r4, #0]
   10752:	2b00      	cmp	r3, #0
   10754:	d000      	beq.n	10758 <_close_r+0x1c>
   10756:	602b      	str	r3, [r5, #0]
   10758:	bd70      	pop	{r4, r5, r6, pc}
   1075a:	46c0      	nop			; (mov r8, r8)
   1075c:	20000ac4 	.word	0x20000ac4

00010760 <_fstat_r>:
   10760:	2300      	movs	r3, #0
   10762:	b570      	push	{r4, r5, r6, lr}
   10764:	4c06      	ldr	r4, [pc, #24]	; (10780 <_fstat_r+0x20>)
   10766:	0005      	movs	r5, r0
   10768:	0008      	movs	r0, r1
   1076a:	0011      	movs	r1, r2
   1076c:	6023      	str	r3, [r4, #0]
   1076e:	f7fc f9d5 	bl	cb1c <_fstat>
   10772:	1c43      	adds	r3, r0, #1
   10774:	d103      	bne.n	1077e <_fstat_r+0x1e>
   10776:	6823      	ldr	r3, [r4, #0]
   10778:	2b00      	cmp	r3, #0
   1077a:	d000      	beq.n	1077e <_fstat_r+0x1e>
   1077c:	602b      	str	r3, [r5, #0]
   1077e:	bd70      	pop	{r4, r5, r6, pc}
   10780:	20000ac4 	.word	0x20000ac4

00010784 <_isatty_r>:
   10784:	2300      	movs	r3, #0
   10786:	b570      	push	{r4, r5, r6, lr}
   10788:	4c06      	ldr	r4, [pc, #24]	; (107a4 <_isatty_r+0x20>)
   1078a:	0005      	movs	r5, r0
   1078c:	0008      	movs	r0, r1
   1078e:	6023      	str	r3, [r4, #0]
   10790:	f7fc f9d2 	bl	cb38 <_isatty>
   10794:	1c43      	adds	r3, r0, #1
   10796:	d103      	bne.n	107a0 <_isatty_r+0x1c>
   10798:	6823      	ldr	r3, [r4, #0]
   1079a:	2b00      	cmp	r3, #0
   1079c:	d000      	beq.n	107a0 <_isatty_r+0x1c>
   1079e:	602b      	str	r3, [r5, #0]
   107a0:	bd70      	pop	{r4, r5, r6, pc}
   107a2:	46c0      	nop			; (mov r8, r8)
   107a4:	20000ac4 	.word	0x20000ac4

000107a8 <_lseek_r>:
   107a8:	b570      	push	{r4, r5, r6, lr}
   107aa:	0005      	movs	r5, r0
   107ac:	0008      	movs	r0, r1
   107ae:	0011      	movs	r1, r2
   107b0:	2200      	movs	r2, #0
   107b2:	4c06      	ldr	r4, [pc, #24]	; (107cc <_lseek_r+0x24>)
   107b4:	6022      	str	r2, [r4, #0]
   107b6:	001a      	movs	r2, r3
   107b8:	f7fc f9c7 	bl	cb4a <_lseek>
   107bc:	1c43      	adds	r3, r0, #1
   107be:	d103      	bne.n	107c8 <_lseek_r+0x20>
   107c0:	6823      	ldr	r3, [r4, #0]
   107c2:	2b00      	cmp	r3, #0
   107c4:	d000      	beq.n	107c8 <_lseek_r+0x20>
   107c6:	602b      	str	r3, [r5, #0]
   107c8:	bd70      	pop	{r4, r5, r6, pc}
   107ca:	46c0      	nop			; (mov r8, r8)
   107cc:	20000ac4 	.word	0x20000ac4

000107d0 <_read_r>:
   107d0:	b570      	push	{r4, r5, r6, lr}
   107d2:	0005      	movs	r5, r0
   107d4:	0008      	movs	r0, r1
   107d6:	0011      	movs	r1, r2
   107d8:	2200      	movs	r2, #0
   107da:	4c06      	ldr	r4, [pc, #24]	; (107f4 <_read_r+0x24>)
   107dc:	6022      	str	r2, [r4, #0]
   107de:	001a      	movs	r2, r3
   107e0:	f7fa f94c 	bl	aa7c <_read>
   107e4:	1c43      	adds	r3, r0, #1
   107e6:	d103      	bne.n	107f0 <_read_r+0x20>
   107e8:	6823      	ldr	r3, [r4, #0]
   107ea:	2b00      	cmp	r3, #0
   107ec:	d000      	beq.n	107f0 <_read_r+0x20>
   107ee:	602b      	str	r3, [r5, #0]
   107f0:	bd70      	pop	{r4, r5, r6, pc}
   107f2:	46c0      	nop			; (mov r8, r8)
   107f4:	20000ac4 	.word	0x20000ac4

000107f8 <__gnu_thumb1_case_uqi>:
   107f8:	b402      	push	{r1}
   107fa:	4671      	mov	r1, lr
   107fc:	0849      	lsrs	r1, r1, #1
   107fe:	0049      	lsls	r1, r1, #1
   10800:	5c09      	ldrb	r1, [r1, r0]
   10802:	0049      	lsls	r1, r1, #1
   10804:	448e      	add	lr, r1
   10806:	bc02      	pop	{r1}
   10808:	4770      	bx	lr
   1080a:	46c0      	nop			; (mov r8, r8)

0001080c <__udivsi3>:
   1080c:	2200      	movs	r2, #0
   1080e:	0843      	lsrs	r3, r0, #1
   10810:	428b      	cmp	r3, r1
   10812:	d374      	bcc.n	108fe <__udivsi3+0xf2>
   10814:	0903      	lsrs	r3, r0, #4
   10816:	428b      	cmp	r3, r1
   10818:	d35f      	bcc.n	108da <__udivsi3+0xce>
   1081a:	0a03      	lsrs	r3, r0, #8
   1081c:	428b      	cmp	r3, r1
   1081e:	d344      	bcc.n	108aa <__udivsi3+0x9e>
   10820:	0b03      	lsrs	r3, r0, #12
   10822:	428b      	cmp	r3, r1
   10824:	d328      	bcc.n	10878 <__udivsi3+0x6c>
   10826:	0c03      	lsrs	r3, r0, #16
   10828:	428b      	cmp	r3, r1
   1082a:	d30d      	bcc.n	10848 <__udivsi3+0x3c>
   1082c:	22ff      	movs	r2, #255	; 0xff
   1082e:	0209      	lsls	r1, r1, #8
   10830:	ba12      	rev	r2, r2
   10832:	0c03      	lsrs	r3, r0, #16
   10834:	428b      	cmp	r3, r1
   10836:	d302      	bcc.n	1083e <__udivsi3+0x32>
   10838:	1212      	asrs	r2, r2, #8
   1083a:	0209      	lsls	r1, r1, #8
   1083c:	d065      	beq.n	1090a <__udivsi3+0xfe>
   1083e:	0b03      	lsrs	r3, r0, #12
   10840:	428b      	cmp	r3, r1
   10842:	d319      	bcc.n	10878 <__udivsi3+0x6c>
   10844:	e000      	b.n	10848 <__udivsi3+0x3c>
   10846:	0a09      	lsrs	r1, r1, #8
   10848:	0bc3      	lsrs	r3, r0, #15
   1084a:	428b      	cmp	r3, r1
   1084c:	d301      	bcc.n	10852 <__udivsi3+0x46>
   1084e:	03cb      	lsls	r3, r1, #15
   10850:	1ac0      	subs	r0, r0, r3
   10852:	4152      	adcs	r2, r2
   10854:	0b83      	lsrs	r3, r0, #14
   10856:	428b      	cmp	r3, r1
   10858:	d301      	bcc.n	1085e <__udivsi3+0x52>
   1085a:	038b      	lsls	r3, r1, #14
   1085c:	1ac0      	subs	r0, r0, r3
   1085e:	4152      	adcs	r2, r2
   10860:	0b43      	lsrs	r3, r0, #13
   10862:	428b      	cmp	r3, r1
   10864:	d301      	bcc.n	1086a <__udivsi3+0x5e>
   10866:	034b      	lsls	r3, r1, #13
   10868:	1ac0      	subs	r0, r0, r3
   1086a:	4152      	adcs	r2, r2
   1086c:	0b03      	lsrs	r3, r0, #12
   1086e:	428b      	cmp	r3, r1
   10870:	d301      	bcc.n	10876 <__udivsi3+0x6a>
   10872:	030b      	lsls	r3, r1, #12
   10874:	1ac0      	subs	r0, r0, r3
   10876:	4152      	adcs	r2, r2
   10878:	0ac3      	lsrs	r3, r0, #11
   1087a:	428b      	cmp	r3, r1
   1087c:	d301      	bcc.n	10882 <__udivsi3+0x76>
   1087e:	02cb      	lsls	r3, r1, #11
   10880:	1ac0      	subs	r0, r0, r3
   10882:	4152      	adcs	r2, r2
   10884:	0a83      	lsrs	r3, r0, #10
   10886:	428b      	cmp	r3, r1
   10888:	d301      	bcc.n	1088e <__udivsi3+0x82>
   1088a:	028b      	lsls	r3, r1, #10
   1088c:	1ac0      	subs	r0, r0, r3
   1088e:	4152      	adcs	r2, r2
   10890:	0a43      	lsrs	r3, r0, #9
   10892:	428b      	cmp	r3, r1
   10894:	d301      	bcc.n	1089a <__udivsi3+0x8e>
   10896:	024b      	lsls	r3, r1, #9
   10898:	1ac0      	subs	r0, r0, r3
   1089a:	4152      	adcs	r2, r2
   1089c:	0a03      	lsrs	r3, r0, #8
   1089e:	428b      	cmp	r3, r1
   108a0:	d301      	bcc.n	108a6 <__udivsi3+0x9a>
   108a2:	020b      	lsls	r3, r1, #8
   108a4:	1ac0      	subs	r0, r0, r3
   108a6:	4152      	adcs	r2, r2
   108a8:	d2cd      	bcs.n	10846 <__udivsi3+0x3a>
   108aa:	09c3      	lsrs	r3, r0, #7
   108ac:	428b      	cmp	r3, r1
   108ae:	d301      	bcc.n	108b4 <__udivsi3+0xa8>
   108b0:	01cb      	lsls	r3, r1, #7
   108b2:	1ac0      	subs	r0, r0, r3
   108b4:	4152      	adcs	r2, r2
   108b6:	0983      	lsrs	r3, r0, #6
   108b8:	428b      	cmp	r3, r1
   108ba:	d301      	bcc.n	108c0 <__udivsi3+0xb4>
   108bc:	018b      	lsls	r3, r1, #6
   108be:	1ac0      	subs	r0, r0, r3
   108c0:	4152      	adcs	r2, r2
   108c2:	0943      	lsrs	r3, r0, #5
   108c4:	428b      	cmp	r3, r1
   108c6:	d301      	bcc.n	108cc <__udivsi3+0xc0>
   108c8:	014b      	lsls	r3, r1, #5
   108ca:	1ac0      	subs	r0, r0, r3
   108cc:	4152      	adcs	r2, r2
   108ce:	0903      	lsrs	r3, r0, #4
   108d0:	428b      	cmp	r3, r1
   108d2:	d301      	bcc.n	108d8 <__udivsi3+0xcc>
   108d4:	010b      	lsls	r3, r1, #4
   108d6:	1ac0      	subs	r0, r0, r3
   108d8:	4152      	adcs	r2, r2
   108da:	08c3      	lsrs	r3, r0, #3
   108dc:	428b      	cmp	r3, r1
   108de:	d301      	bcc.n	108e4 <__udivsi3+0xd8>
   108e0:	00cb      	lsls	r3, r1, #3
   108e2:	1ac0      	subs	r0, r0, r3
   108e4:	4152      	adcs	r2, r2
   108e6:	0883      	lsrs	r3, r0, #2
   108e8:	428b      	cmp	r3, r1
   108ea:	d301      	bcc.n	108f0 <__udivsi3+0xe4>
   108ec:	008b      	lsls	r3, r1, #2
   108ee:	1ac0      	subs	r0, r0, r3
   108f0:	4152      	adcs	r2, r2
   108f2:	0843      	lsrs	r3, r0, #1
   108f4:	428b      	cmp	r3, r1
   108f6:	d301      	bcc.n	108fc <__udivsi3+0xf0>
   108f8:	004b      	lsls	r3, r1, #1
   108fa:	1ac0      	subs	r0, r0, r3
   108fc:	4152      	adcs	r2, r2
   108fe:	1a41      	subs	r1, r0, r1
   10900:	d200      	bcs.n	10904 <__udivsi3+0xf8>
   10902:	4601      	mov	r1, r0
   10904:	4152      	adcs	r2, r2
   10906:	4610      	mov	r0, r2
   10908:	4770      	bx	lr
   1090a:	e7ff      	b.n	1090c <__udivsi3+0x100>
   1090c:	b501      	push	{r0, lr}
   1090e:	2000      	movs	r0, #0
   10910:	f000 f8f0 	bl	10af4 <__aeabi_idiv0>
   10914:	bd02      	pop	{r1, pc}
   10916:	46c0      	nop			; (mov r8, r8)

00010918 <__aeabi_uidivmod>:
   10918:	2900      	cmp	r1, #0
   1091a:	d0f7      	beq.n	1090c <__udivsi3+0x100>
   1091c:	e776      	b.n	1080c <__udivsi3>
   1091e:	4770      	bx	lr

00010920 <__divsi3>:
   10920:	4603      	mov	r3, r0
   10922:	430b      	orrs	r3, r1
   10924:	d47f      	bmi.n	10a26 <__divsi3+0x106>
   10926:	2200      	movs	r2, #0
   10928:	0843      	lsrs	r3, r0, #1
   1092a:	428b      	cmp	r3, r1
   1092c:	d374      	bcc.n	10a18 <__divsi3+0xf8>
   1092e:	0903      	lsrs	r3, r0, #4
   10930:	428b      	cmp	r3, r1
   10932:	d35f      	bcc.n	109f4 <__divsi3+0xd4>
   10934:	0a03      	lsrs	r3, r0, #8
   10936:	428b      	cmp	r3, r1
   10938:	d344      	bcc.n	109c4 <__divsi3+0xa4>
   1093a:	0b03      	lsrs	r3, r0, #12
   1093c:	428b      	cmp	r3, r1
   1093e:	d328      	bcc.n	10992 <__divsi3+0x72>
   10940:	0c03      	lsrs	r3, r0, #16
   10942:	428b      	cmp	r3, r1
   10944:	d30d      	bcc.n	10962 <__divsi3+0x42>
   10946:	22ff      	movs	r2, #255	; 0xff
   10948:	0209      	lsls	r1, r1, #8
   1094a:	ba12      	rev	r2, r2
   1094c:	0c03      	lsrs	r3, r0, #16
   1094e:	428b      	cmp	r3, r1
   10950:	d302      	bcc.n	10958 <__divsi3+0x38>
   10952:	1212      	asrs	r2, r2, #8
   10954:	0209      	lsls	r1, r1, #8
   10956:	d065      	beq.n	10a24 <__divsi3+0x104>
   10958:	0b03      	lsrs	r3, r0, #12
   1095a:	428b      	cmp	r3, r1
   1095c:	d319      	bcc.n	10992 <__divsi3+0x72>
   1095e:	e000      	b.n	10962 <__divsi3+0x42>
   10960:	0a09      	lsrs	r1, r1, #8
   10962:	0bc3      	lsrs	r3, r0, #15
   10964:	428b      	cmp	r3, r1
   10966:	d301      	bcc.n	1096c <__divsi3+0x4c>
   10968:	03cb      	lsls	r3, r1, #15
   1096a:	1ac0      	subs	r0, r0, r3
   1096c:	4152      	adcs	r2, r2
   1096e:	0b83      	lsrs	r3, r0, #14
   10970:	428b      	cmp	r3, r1
   10972:	d301      	bcc.n	10978 <__divsi3+0x58>
   10974:	038b      	lsls	r3, r1, #14
   10976:	1ac0      	subs	r0, r0, r3
   10978:	4152      	adcs	r2, r2
   1097a:	0b43      	lsrs	r3, r0, #13
   1097c:	428b      	cmp	r3, r1
   1097e:	d301      	bcc.n	10984 <__divsi3+0x64>
   10980:	034b      	lsls	r3, r1, #13
   10982:	1ac0      	subs	r0, r0, r3
   10984:	4152      	adcs	r2, r2
   10986:	0b03      	lsrs	r3, r0, #12
   10988:	428b      	cmp	r3, r1
   1098a:	d301      	bcc.n	10990 <__divsi3+0x70>
   1098c:	030b      	lsls	r3, r1, #12
   1098e:	1ac0      	subs	r0, r0, r3
   10990:	4152      	adcs	r2, r2
   10992:	0ac3      	lsrs	r3, r0, #11
   10994:	428b      	cmp	r3, r1
   10996:	d301      	bcc.n	1099c <__divsi3+0x7c>
   10998:	02cb      	lsls	r3, r1, #11
   1099a:	1ac0      	subs	r0, r0, r3
   1099c:	4152      	adcs	r2, r2
   1099e:	0a83      	lsrs	r3, r0, #10
   109a0:	428b      	cmp	r3, r1
   109a2:	d301      	bcc.n	109a8 <__divsi3+0x88>
   109a4:	028b      	lsls	r3, r1, #10
   109a6:	1ac0      	subs	r0, r0, r3
   109a8:	4152      	adcs	r2, r2
   109aa:	0a43      	lsrs	r3, r0, #9
   109ac:	428b      	cmp	r3, r1
   109ae:	d301      	bcc.n	109b4 <__divsi3+0x94>
   109b0:	024b      	lsls	r3, r1, #9
   109b2:	1ac0      	subs	r0, r0, r3
   109b4:	4152      	adcs	r2, r2
   109b6:	0a03      	lsrs	r3, r0, #8
   109b8:	428b      	cmp	r3, r1
   109ba:	d301      	bcc.n	109c0 <__divsi3+0xa0>
   109bc:	020b      	lsls	r3, r1, #8
   109be:	1ac0      	subs	r0, r0, r3
   109c0:	4152      	adcs	r2, r2
   109c2:	d2cd      	bcs.n	10960 <__divsi3+0x40>
   109c4:	09c3      	lsrs	r3, r0, #7
   109c6:	428b      	cmp	r3, r1
   109c8:	d301      	bcc.n	109ce <__divsi3+0xae>
   109ca:	01cb      	lsls	r3, r1, #7
   109cc:	1ac0      	subs	r0, r0, r3
   109ce:	4152      	adcs	r2, r2
   109d0:	0983      	lsrs	r3, r0, #6
   109d2:	428b      	cmp	r3, r1
   109d4:	d301      	bcc.n	109da <__divsi3+0xba>
   109d6:	018b      	lsls	r3, r1, #6
   109d8:	1ac0      	subs	r0, r0, r3
   109da:	4152      	adcs	r2, r2
   109dc:	0943      	lsrs	r3, r0, #5
   109de:	428b      	cmp	r3, r1
   109e0:	d301      	bcc.n	109e6 <__divsi3+0xc6>
   109e2:	014b      	lsls	r3, r1, #5
   109e4:	1ac0      	subs	r0, r0, r3
   109e6:	4152      	adcs	r2, r2
   109e8:	0903      	lsrs	r3, r0, #4
   109ea:	428b      	cmp	r3, r1
   109ec:	d301      	bcc.n	109f2 <__divsi3+0xd2>
   109ee:	010b      	lsls	r3, r1, #4
   109f0:	1ac0      	subs	r0, r0, r3
   109f2:	4152      	adcs	r2, r2
   109f4:	08c3      	lsrs	r3, r0, #3
   109f6:	428b      	cmp	r3, r1
   109f8:	d301      	bcc.n	109fe <__divsi3+0xde>
   109fa:	00cb      	lsls	r3, r1, #3
   109fc:	1ac0      	subs	r0, r0, r3
   109fe:	4152      	adcs	r2, r2
   10a00:	0883      	lsrs	r3, r0, #2
   10a02:	428b      	cmp	r3, r1
   10a04:	d301      	bcc.n	10a0a <__divsi3+0xea>
   10a06:	008b      	lsls	r3, r1, #2
   10a08:	1ac0      	subs	r0, r0, r3
   10a0a:	4152      	adcs	r2, r2
   10a0c:	0843      	lsrs	r3, r0, #1
   10a0e:	428b      	cmp	r3, r1
   10a10:	d301      	bcc.n	10a16 <__divsi3+0xf6>
   10a12:	004b      	lsls	r3, r1, #1
   10a14:	1ac0      	subs	r0, r0, r3
   10a16:	4152      	adcs	r2, r2
   10a18:	1a41      	subs	r1, r0, r1
   10a1a:	d200      	bcs.n	10a1e <__divsi3+0xfe>
   10a1c:	4601      	mov	r1, r0
   10a1e:	4152      	adcs	r2, r2
   10a20:	4610      	mov	r0, r2
   10a22:	4770      	bx	lr
   10a24:	e05d      	b.n	10ae2 <__divsi3+0x1c2>
   10a26:	0fca      	lsrs	r2, r1, #31
   10a28:	d000      	beq.n	10a2c <__divsi3+0x10c>
   10a2a:	4249      	negs	r1, r1
   10a2c:	1003      	asrs	r3, r0, #32
   10a2e:	d300      	bcc.n	10a32 <__divsi3+0x112>
   10a30:	4240      	negs	r0, r0
   10a32:	4053      	eors	r3, r2
   10a34:	2200      	movs	r2, #0
   10a36:	469c      	mov	ip, r3
   10a38:	0903      	lsrs	r3, r0, #4
   10a3a:	428b      	cmp	r3, r1
   10a3c:	d32d      	bcc.n	10a9a <__divsi3+0x17a>
   10a3e:	0a03      	lsrs	r3, r0, #8
   10a40:	428b      	cmp	r3, r1
   10a42:	d312      	bcc.n	10a6a <__divsi3+0x14a>
   10a44:	22fc      	movs	r2, #252	; 0xfc
   10a46:	0189      	lsls	r1, r1, #6
   10a48:	ba12      	rev	r2, r2
   10a4a:	0a03      	lsrs	r3, r0, #8
   10a4c:	428b      	cmp	r3, r1
   10a4e:	d30c      	bcc.n	10a6a <__divsi3+0x14a>
   10a50:	0189      	lsls	r1, r1, #6
   10a52:	1192      	asrs	r2, r2, #6
   10a54:	428b      	cmp	r3, r1
   10a56:	d308      	bcc.n	10a6a <__divsi3+0x14a>
   10a58:	0189      	lsls	r1, r1, #6
   10a5a:	1192      	asrs	r2, r2, #6
   10a5c:	428b      	cmp	r3, r1
   10a5e:	d304      	bcc.n	10a6a <__divsi3+0x14a>
   10a60:	0189      	lsls	r1, r1, #6
   10a62:	d03a      	beq.n	10ada <__divsi3+0x1ba>
   10a64:	1192      	asrs	r2, r2, #6
   10a66:	e000      	b.n	10a6a <__divsi3+0x14a>
   10a68:	0989      	lsrs	r1, r1, #6
   10a6a:	09c3      	lsrs	r3, r0, #7
   10a6c:	428b      	cmp	r3, r1
   10a6e:	d301      	bcc.n	10a74 <__divsi3+0x154>
   10a70:	01cb      	lsls	r3, r1, #7
   10a72:	1ac0      	subs	r0, r0, r3
   10a74:	4152      	adcs	r2, r2
   10a76:	0983      	lsrs	r3, r0, #6
   10a78:	428b      	cmp	r3, r1
   10a7a:	d301      	bcc.n	10a80 <__divsi3+0x160>
   10a7c:	018b      	lsls	r3, r1, #6
   10a7e:	1ac0      	subs	r0, r0, r3
   10a80:	4152      	adcs	r2, r2
   10a82:	0943      	lsrs	r3, r0, #5
   10a84:	428b      	cmp	r3, r1
   10a86:	d301      	bcc.n	10a8c <__divsi3+0x16c>
   10a88:	014b      	lsls	r3, r1, #5
   10a8a:	1ac0      	subs	r0, r0, r3
   10a8c:	4152      	adcs	r2, r2
   10a8e:	0903      	lsrs	r3, r0, #4
   10a90:	428b      	cmp	r3, r1
   10a92:	d301      	bcc.n	10a98 <__divsi3+0x178>
   10a94:	010b      	lsls	r3, r1, #4
   10a96:	1ac0      	subs	r0, r0, r3
   10a98:	4152      	adcs	r2, r2
   10a9a:	08c3      	lsrs	r3, r0, #3
   10a9c:	428b      	cmp	r3, r1
   10a9e:	d301      	bcc.n	10aa4 <__divsi3+0x184>
   10aa0:	00cb      	lsls	r3, r1, #3
   10aa2:	1ac0      	subs	r0, r0, r3
   10aa4:	4152      	adcs	r2, r2
   10aa6:	0883      	lsrs	r3, r0, #2
   10aa8:	428b      	cmp	r3, r1
   10aaa:	d301      	bcc.n	10ab0 <__divsi3+0x190>
   10aac:	008b      	lsls	r3, r1, #2
   10aae:	1ac0      	subs	r0, r0, r3
   10ab0:	4152      	adcs	r2, r2
   10ab2:	d2d9      	bcs.n	10a68 <__divsi3+0x148>
   10ab4:	0843      	lsrs	r3, r0, #1
   10ab6:	428b      	cmp	r3, r1
   10ab8:	d301      	bcc.n	10abe <__divsi3+0x19e>
   10aba:	004b      	lsls	r3, r1, #1
   10abc:	1ac0      	subs	r0, r0, r3
   10abe:	4152      	adcs	r2, r2
   10ac0:	1a41      	subs	r1, r0, r1
   10ac2:	d200      	bcs.n	10ac6 <__divsi3+0x1a6>
   10ac4:	4601      	mov	r1, r0
   10ac6:	4663      	mov	r3, ip
   10ac8:	4152      	adcs	r2, r2
   10aca:	105b      	asrs	r3, r3, #1
   10acc:	4610      	mov	r0, r2
   10ace:	d301      	bcc.n	10ad4 <__divsi3+0x1b4>
   10ad0:	4240      	negs	r0, r0
   10ad2:	2b00      	cmp	r3, #0
   10ad4:	d500      	bpl.n	10ad8 <__divsi3+0x1b8>
   10ad6:	4249      	negs	r1, r1
   10ad8:	4770      	bx	lr
   10ada:	4663      	mov	r3, ip
   10adc:	105b      	asrs	r3, r3, #1
   10ade:	d300      	bcc.n	10ae2 <__divsi3+0x1c2>
   10ae0:	4240      	negs	r0, r0
   10ae2:	b501      	push	{r0, lr}
   10ae4:	2000      	movs	r0, #0
   10ae6:	f000 f805 	bl	10af4 <__aeabi_idiv0>
   10aea:	bd02      	pop	{r1, pc}

00010aec <__aeabi_idivmod>:
   10aec:	2900      	cmp	r1, #0
   10aee:	d0f8      	beq.n	10ae2 <__divsi3+0x1c2>
   10af0:	e716      	b.n	10920 <__divsi3>
   10af2:	4770      	bx	lr

00010af4 <__aeabi_idiv0>:
   10af4:	4770      	bx	lr
   10af6:	46c0      	nop			; (mov r8, r8)

00010af8 <__aeabi_cdrcmple>:
   10af8:	4684      	mov	ip, r0
   10afa:	1c10      	adds	r0, r2, #0
   10afc:	4662      	mov	r2, ip
   10afe:	468c      	mov	ip, r1
   10b00:	1c19      	adds	r1, r3, #0
   10b02:	4663      	mov	r3, ip
   10b04:	e000      	b.n	10b08 <__aeabi_cdcmpeq>
   10b06:	46c0      	nop			; (mov r8, r8)

00010b08 <__aeabi_cdcmpeq>:
   10b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10b0a:	f000 ff3f 	bl	1198c <__ledf2>
   10b0e:	2800      	cmp	r0, #0
   10b10:	d401      	bmi.n	10b16 <__aeabi_cdcmpeq+0xe>
   10b12:	2100      	movs	r1, #0
   10b14:	42c8      	cmn	r0, r1
   10b16:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00010b18 <__aeabi_dcmpeq>:
   10b18:	b510      	push	{r4, lr}
   10b1a:	f000 fe99 	bl	11850 <__eqdf2>
   10b1e:	4240      	negs	r0, r0
   10b20:	3001      	adds	r0, #1
   10b22:	bd10      	pop	{r4, pc}

00010b24 <__aeabi_dcmplt>:
   10b24:	b510      	push	{r4, lr}
   10b26:	f000 ff31 	bl	1198c <__ledf2>
   10b2a:	2800      	cmp	r0, #0
   10b2c:	db01      	blt.n	10b32 <__aeabi_dcmplt+0xe>
   10b2e:	2000      	movs	r0, #0
   10b30:	bd10      	pop	{r4, pc}
   10b32:	2001      	movs	r0, #1
   10b34:	bd10      	pop	{r4, pc}
   10b36:	46c0      	nop			; (mov r8, r8)

00010b38 <__aeabi_dcmple>:
   10b38:	b510      	push	{r4, lr}
   10b3a:	f000 ff27 	bl	1198c <__ledf2>
   10b3e:	2800      	cmp	r0, #0
   10b40:	dd01      	ble.n	10b46 <__aeabi_dcmple+0xe>
   10b42:	2000      	movs	r0, #0
   10b44:	bd10      	pop	{r4, pc}
   10b46:	2001      	movs	r0, #1
   10b48:	bd10      	pop	{r4, pc}
   10b4a:	46c0      	nop			; (mov r8, r8)

00010b4c <__aeabi_dcmpgt>:
   10b4c:	b510      	push	{r4, lr}
   10b4e:	f000 feb9 	bl	118c4 <__gedf2>
   10b52:	2800      	cmp	r0, #0
   10b54:	dc01      	bgt.n	10b5a <__aeabi_dcmpgt+0xe>
   10b56:	2000      	movs	r0, #0
   10b58:	bd10      	pop	{r4, pc}
   10b5a:	2001      	movs	r0, #1
   10b5c:	bd10      	pop	{r4, pc}
   10b5e:	46c0      	nop			; (mov r8, r8)

00010b60 <__aeabi_dcmpge>:
   10b60:	b510      	push	{r4, lr}
   10b62:	f000 feaf 	bl	118c4 <__gedf2>
   10b66:	2800      	cmp	r0, #0
   10b68:	da01      	bge.n	10b6e <__aeabi_dcmpge+0xe>
   10b6a:	2000      	movs	r0, #0
   10b6c:	bd10      	pop	{r4, pc}
   10b6e:	2001      	movs	r0, #1
   10b70:	bd10      	pop	{r4, pc}
   10b72:	46c0      	nop			; (mov r8, r8)

00010b74 <__aeabi_lmul>:
   10b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b76:	46ce      	mov	lr, r9
   10b78:	4647      	mov	r7, r8
   10b7a:	0415      	lsls	r5, r2, #16
   10b7c:	0c2d      	lsrs	r5, r5, #16
   10b7e:	002e      	movs	r6, r5
   10b80:	b580      	push	{r7, lr}
   10b82:	0407      	lsls	r7, r0, #16
   10b84:	0c14      	lsrs	r4, r2, #16
   10b86:	0c3f      	lsrs	r7, r7, #16
   10b88:	4699      	mov	r9, r3
   10b8a:	0c03      	lsrs	r3, r0, #16
   10b8c:	437e      	muls	r6, r7
   10b8e:	435d      	muls	r5, r3
   10b90:	4367      	muls	r7, r4
   10b92:	4363      	muls	r3, r4
   10b94:	197f      	adds	r7, r7, r5
   10b96:	0c34      	lsrs	r4, r6, #16
   10b98:	19e4      	adds	r4, r4, r7
   10b9a:	469c      	mov	ip, r3
   10b9c:	42a5      	cmp	r5, r4
   10b9e:	d903      	bls.n	10ba8 <__aeabi_lmul+0x34>
   10ba0:	2380      	movs	r3, #128	; 0x80
   10ba2:	025b      	lsls	r3, r3, #9
   10ba4:	4698      	mov	r8, r3
   10ba6:	44c4      	add	ip, r8
   10ba8:	464b      	mov	r3, r9
   10baa:	4351      	muls	r1, r2
   10bac:	4343      	muls	r3, r0
   10bae:	0436      	lsls	r6, r6, #16
   10bb0:	0c36      	lsrs	r6, r6, #16
   10bb2:	0c25      	lsrs	r5, r4, #16
   10bb4:	0424      	lsls	r4, r4, #16
   10bb6:	4465      	add	r5, ip
   10bb8:	19a4      	adds	r4, r4, r6
   10bba:	1859      	adds	r1, r3, r1
   10bbc:	1949      	adds	r1, r1, r5
   10bbe:	0020      	movs	r0, r4
   10bc0:	bc0c      	pop	{r2, r3}
   10bc2:	4690      	mov	r8, r2
   10bc4:	4699      	mov	r9, r3
   10bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010bc8 <__aeabi_dadd>:
   10bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bca:	4645      	mov	r5, r8
   10bcc:	46de      	mov	lr, fp
   10bce:	4657      	mov	r7, sl
   10bd0:	464e      	mov	r6, r9
   10bd2:	030c      	lsls	r4, r1, #12
   10bd4:	b5e0      	push	{r5, r6, r7, lr}
   10bd6:	004e      	lsls	r6, r1, #1
   10bd8:	0fc9      	lsrs	r1, r1, #31
   10bda:	4688      	mov	r8, r1
   10bdc:	000d      	movs	r5, r1
   10bde:	0a61      	lsrs	r1, r4, #9
   10be0:	0f44      	lsrs	r4, r0, #29
   10be2:	430c      	orrs	r4, r1
   10be4:	00c7      	lsls	r7, r0, #3
   10be6:	0319      	lsls	r1, r3, #12
   10be8:	0058      	lsls	r0, r3, #1
   10bea:	0fdb      	lsrs	r3, r3, #31
   10bec:	469b      	mov	fp, r3
   10bee:	0a4b      	lsrs	r3, r1, #9
   10bf0:	0f51      	lsrs	r1, r2, #29
   10bf2:	430b      	orrs	r3, r1
   10bf4:	0d76      	lsrs	r6, r6, #21
   10bf6:	0d40      	lsrs	r0, r0, #21
   10bf8:	0019      	movs	r1, r3
   10bfa:	00d2      	lsls	r2, r2, #3
   10bfc:	45d8      	cmp	r8, fp
   10bfe:	d100      	bne.n	10c02 <__aeabi_dadd+0x3a>
   10c00:	e0ae      	b.n	10d60 <__aeabi_dadd+0x198>
   10c02:	1a35      	subs	r5, r6, r0
   10c04:	2d00      	cmp	r5, #0
   10c06:	dc00      	bgt.n	10c0a <__aeabi_dadd+0x42>
   10c08:	e0f6      	b.n	10df8 <__aeabi_dadd+0x230>
   10c0a:	2800      	cmp	r0, #0
   10c0c:	d10f      	bne.n	10c2e <__aeabi_dadd+0x66>
   10c0e:	4313      	orrs	r3, r2
   10c10:	d100      	bne.n	10c14 <__aeabi_dadd+0x4c>
   10c12:	e0db      	b.n	10dcc <__aeabi_dadd+0x204>
   10c14:	1e6b      	subs	r3, r5, #1
   10c16:	2b00      	cmp	r3, #0
   10c18:	d000      	beq.n	10c1c <__aeabi_dadd+0x54>
   10c1a:	e137      	b.n	10e8c <__aeabi_dadd+0x2c4>
   10c1c:	1aba      	subs	r2, r7, r2
   10c1e:	4297      	cmp	r7, r2
   10c20:	41bf      	sbcs	r7, r7
   10c22:	1a64      	subs	r4, r4, r1
   10c24:	427f      	negs	r7, r7
   10c26:	1be4      	subs	r4, r4, r7
   10c28:	2601      	movs	r6, #1
   10c2a:	0017      	movs	r7, r2
   10c2c:	e024      	b.n	10c78 <__aeabi_dadd+0xb0>
   10c2e:	4bc6      	ldr	r3, [pc, #792]	; (10f48 <__aeabi_dadd+0x380>)
   10c30:	429e      	cmp	r6, r3
   10c32:	d04d      	beq.n	10cd0 <__aeabi_dadd+0x108>
   10c34:	2380      	movs	r3, #128	; 0x80
   10c36:	041b      	lsls	r3, r3, #16
   10c38:	4319      	orrs	r1, r3
   10c3a:	2d38      	cmp	r5, #56	; 0x38
   10c3c:	dd00      	ble.n	10c40 <__aeabi_dadd+0x78>
   10c3e:	e107      	b.n	10e50 <__aeabi_dadd+0x288>
   10c40:	2d1f      	cmp	r5, #31
   10c42:	dd00      	ble.n	10c46 <__aeabi_dadd+0x7e>
   10c44:	e138      	b.n	10eb8 <__aeabi_dadd+0x2f0>
   10c46:	2020      	movs	r0, #32
   10c48:	1b43      	subs	r3, r0, r5
   10c4a:	469a      	mov	sl, r3
   10c4c:	000b      	movs	r3, r1
   10c4e:	4650      	mov	r0, sl
   10c50:	4083      	lsls	r3, r0
   10c52:	4699      	mov	r9, r3
   10c54:	0013      	movs	r3, r2
   10c56:	4648      	mov	r0, r9
   10c58:	40eb      	lsrs	r3, r5
   10c5a:	4318      	orrs	r0, r3
   10c5c:	0003      	movs	r3, r0
   10c5e:	4650      	mov	r0, sl
   10c60:	4082      	lsls	r2, r0
   10c62:	1e50      	subs	r0, r2, #1
   10c64:	4182      	sbcs	r2, r0
   10c66:	40e9      	lsrs	r1, r5
   10c68:	431a      	orrs	r2, r3
   10c6a:	1aba      	subs	r2, r7, r2
   10c6c:	1a61      	subs	r1, r4, r1
   10c6e:	4297      	cmp	r7, r2
   10c70:	41a4      	sbcs	r4, r4
   10c72:	0017      	movs	r7, r2
   10c74:	4264      	negs	r4, r4
   10c76:	1b0c      	subs	r4, r1, r4
   10c78:	0223      	lsls	r3, r4, #8
   10c7a:	d562      	bpl.n	10d42 <__aeabi_dadd+0x17a>
   10c7c:	0264      	lsls	r4, r4, #9
   10c7e:	0a65      	lsrs	r5, r4, #9
   10c80:	2d00      	cmp	r5, #0
   10c82:	d100      	bne.n	10c86 <__aeabi_dadd+0xbe>
   10c84:	e0df      	b.n	10e46 <__aeabi_dadd+0x27e>
   10c86:	0028      	movs	r0, r5
   10c88:	f001 fd46 	bl	12718 <__clzsi2>
   10c8c:	0003      	movs	r3, r0
   10c8e:	3b08      	subs	r3, #8
   10c90:	2b1f      	cmp	r3, #31
   10c92:	dd00      	ble.n	10c96 <__aeabi_dadd+0xce>
   10c94:	e0d2      	b.n	10e3c <__aeabi_dadd+0x274>
   10c96:	2220      	movs	r2, #32
   10c98:	003c      	movs	r4, r7
   10c9a:	1ad2      	subs	r2, r2, r3
   10c9c:	409d      	lsls	r5, r3
   10c9e:	40d4      	lsrs	r4, r2
   10ca0:	409f      	lsls	r7, r3
   10ca2:	4325      	orrs	r5, r4
   10ca4:	429e      	cmp	r6, r3
   10ca6:	dd00      	ble.n	10caa <__aeabi_dadd+0xe2>
   10ca8:	e0c4      	b.n	10e34 <__aeabi_dadd+0x26c>
   10caa:	1b9e      	subs	r6, r3, r6
   10cac:	1c73      	adds	r3, r6, #1
   10cae:	2b1f      	cmp	r3, #31
   10cb0:	dd00      	ble.n	10cb4 <__aeabi_dadd+0xec>
   10cb2:	e0f1      	b.n	10e98 <__aeabi_dadd+0x2d0>
   10cb4:	2220      	movs	r2, #32
   10cb6:	0038      	movs	r0, r7
   10cb8:	0029      	movs	r1, r5
   10cba:	1ad2      	subs	r2, r2, r3
   10cbc:	40d8      	lsrs	r0, r3
   10cbe:	4091      	lsls	r1, r2
   10cc0:	4097      	lsls	r7, r2
   10cc2:	002c      	movs	r4, r5
   10cc4:	4301      	orrs	r1, r0
   10cc6:	1e78      	subs	r0, r7, #1
   10cc8:	4187      	sbcs	r7, r0
   10cca:	40dc      	lsrs	r4, r3
   10ccc:	2600      	movs	r6, #0
   10cce:	430f      	orrs	r7, r1
   10cd0:	077b      	lsls	r3, r7, #29
   10cd2:	d009      	beq.n	10ce8 <__aeabi_dadd+0x120>
   10cd4:	230f      	movs	r3, #15
   10cd6:	403b      	ands	r3, r7
   10cd8:	2b04      	cmp	r3, #4
   10cda:	d005      	beq.n	10ce8 <__aeabi_dadd+0x120>
   10cdc:	1d3b      	adds	r3, r7, #4
   10cde:	42bb      	cmp	r3, r7
   10ce0:	41bf      	sbcs	r7, r7
   10ce2:	427f      	negs	r7, r7
   10ce4:	19e4      	adds	r4, r4, r7
   10ce6:	001f      	movs	r7, r3
   10ce8:	0223      	lsls	r3, r4, #8
   10cea:	d52c      	bpl.n	10d46 <__aeabi_dadd+0x17e>
   10cec:	4b96      	ldr	r3, [pc, #600]	; (10f48 <__aeabi_dadd+0x380>)
   10cee:	3601      	adds	r6, #1
   10cf0:	429e      	cmp	r6, r3
   10cf2:	d100      	bne.n	10cf6 <__aeabi_dadd+0x12e>
   10cf4:	e09a      	b.n	10e2c <__aeabi_dadd+0x264>
   10cf6:	4645      	mov	r5, r8
   10cf8:	4b94      	ldr	r3, [pc, #592]	; (10f4c <__aeabi_dadd+0x384>)
   10cfa:	08ff      	lsrs	r7, r7, #3
   10cfc:	401c      	ands	r4, r3
   10cfe:	0760      	lsls	r0, r4, #29
   10d00:	0576      	lsls	r6, r6, #21
   10d02:	0264      	lsls	r4, r4, #9
   10d04:	4307      	orrs	r7, r0
   10d06:	0b24      	lsrs	r4, r4, #12
   10d08:	0d76      	lsrs	r6, r6, #21
   10d0a:	2100      	movs	r1, #0
   10d0c:	0324      	lsls	r4, r4, #12
   10d0e:	0b23      	lsrs	r3, r4, #12
   10d10:	0d0c      	lsrs	r4, r1, #20
   10d12:	4a8f      	ldr	r2, [pc, #572]	; (10f50 <__aeabi_dadd+0x388>)
   10d14:	0524      	lsls	r4, r4, #20
   10d16:	431c      	orrs	r4, r3
   10d18:	4014      	ands	r4, r2
   10d1a:	0533      	lsls	r3, r6, #20
   10d1c:	4323      	orrs	r3, r4
   10d1e:	005b      	lsls	r3, r3, #1
   10d20:	07ed      	lsls	r5, r5, #31
   10d22:	085b      	lsrs	r3, r3, #1
   10d24:	432b      	orrs	r3, r5
   10d26:	0038      	movs	r0, r7
   10d28:	0019      	movs	r1, r3
   10d2a:	bc3c      	pop	{r2, r3, r4, r5}
   10d2c:	4690      	mov	r8, r2
   10d2e:	4699      	mov	r9, r3
   10d30:	46a2      	mov	sl, r4
   10d32:	46ab      	mov	fp, r5
   10d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d36:	4664      	mov	r4, ip
   10d38:	4304      	orrs	r4, r0
   10d3a:	d100      	bne.n	10d3e <__aeabi_dadd+0x176>
   10d3c:	e211      	b.n	11162 <__aeabi_dadd+0x59a>
   10d3e:	0004      	movs	r4, r0
   10d40:	4667      	mov	r7, ip
   10d42:	077b      	lsls	r3, r7, #29
   10d44:	d1c6      	bne.n	10cd4 <__aeabi_dadd+0x10c>
   10d46:	4645      	mov	r5, r8
   10d48:	0760      	lsls	r0, r4, #29
   10d4a:	08ff      	lsrs	r7, r7, #3
   10d4c:	4307      	orrs	r7, r0
   10d4e:	08e4      	lsrs	r4, r4, #3
   10d50:	4b7d      	ldr	r3, [pc, #500]	; (10f48 <__aeabi_dadd+0x380>)
   10d52:	429e      	cmp	r6, r3
   10d54:	d030      	beq.n	10db8 <__aeabi_dadd+0x1f0>
   10d56:	0324      	lsls	r4, r4, #12
   10d58:	0576      	lsls	r6, r6, #21
   10d5a:	0b24      	lsrs	r4, r4, #12
   10d5c:	0d76      	lsrs	r6, r6, #21
   10d5e:	e7d4      	b.n	10d0a <__aeabi_dadd+0x142>
   10d60:	1a33      	subs	r3, r6, r0
   10d62:	469a      	mov	sl, r3
   10d64:	2b00      	cmp	r3, #0
   10d66:	dd78      	ble.n	10e5a <__aeabi_dadd+0x292>
   10d68:	2800      	cmp	r0, #0
   10d6a:	d031      	beq.n	10dd0 <__aeabi_dadd+0x208>
   10d6c:	4876      	ldr	r0, [pc, #472]	; (10f48 <__aeabi_dadd+0x380>)
   10d6e:	4286      	cmp	r6, r0
   10d70:	d0ae      	beq.n	10cd0 <__aeabi_dadd+0x108>
   10d72:	2080      	movs	r0, #128	; 0x80
   10d74:	0400      	lsls	r0, r0, #16
   10d76:	4301      	orrs	r1, r0
   10d78:	4653      	mov	r3, sl
   10d7a:	2b38      	cmp	r3, #56	; 0x38
   10d7c:	dc00      	bgt.n	10d80 <__aeabi_dadd+0x1b8>
   10d7e:	e0e9      	b.n	10f54 <__aeabi_dadd+0x38c>
   10d80:	430a      	orrs	r2, r1
   10d82:	1e51      	subs	r1, r2, #1
   10d84:	418a      	sbcs	r2, r1
   10d86:	2100      	movs	r1, #0
   10d88:	19d2      	adds	r2, r2, r7
   10d8a:	42ba      	cmp	r2, r7
   10d8c:	41bf      	sbcs	r7, r7
   10d8e:	1909      	adds	r1, r1, r4
   10d90:	427c      	negs	r4, r7
   10d92:	0017      	movs	r7, r2
   10d94:	190c      	adds	r4, r1, r4
   10d96:	0223      	lsls	r3, r4, #8
   10d98:	d5d3      	bpl.n	10d42 <__aeabi_dadd+0x17a>
   10d9a:	4b6b      	ldr	r3, [pc, #428]	; (10f48 <__aeabi_dadd+0x380>)
   10d9c:	3601      	adds	r6, #1
   10d9e:	429e      	cmp	r6, r3
   10da0:	d100      	bne.n	10da4 <__aeabi_dadd+0x1dc>
   10da2:	e13a      	b.n	1101a <__aeabi_dadd+0x452>
   10da4:	2001      	movs	r0, #1
   10da6:	4b69      	ldr	r3, [pc, #420]	; (10f4c <__aeabi_dadd+0x384>)
   10da8:	401c      	ands	r4, r3
   10daa:	087b      	lsrs	r3, r7, #1
   10dac:	4007      	ands	r7, r0
   10dae:	431f      	orrs	r7, r3
   10db0:	07e0      	lsls	r0, r4, #31
   10db2:	4307      	orrs	r7, r0
   10db4:	0864      	lsrs	r4, r4, #1
   10db6:	e78b      	b.n	10cd0 <__aeabi_dadd+0x108>
   10db8:	0023      	movs	r3, r4
   10dba:	433b      	orrs	r3, r7
   10dbc:	d100      	bne.n	10dc0 <__aeabi_dadd+0x1f8>
   10dbe:	e1cb      	b.n	11158 <__aeabi_dadd+0x590>
   10dc0:	2280      	movs	r2, #128	; 0x80
   10dc2:	0312      	lsls	r2, r2, #12
   10dc4:	4314      	orrs	r4, r2
   10dc6:	0324      	lsls	r4, r4, #12
   10dc8:	0b24      	lsrs	r4, r4, #12
   10dca:	e79e      	b.n	10d0a <__aeabi_dadd+0x142>
   10dcc:	002e      	movs	r6, r5
   10dce:	e77f      	b.n	10cd0 <__aeabi_dadd+0x108>
   10dd0:	0008      	movs	r0, r1
   10dd2:	4310      	orrs	r0, r2
   10dd4:	d100      	bne.n	10dd8 <__aeabi_dadd+0x210>
   10dd6:	e0b4      	b.n	10f42 <__aeabi_dadd+0x37a>
   10dd8:	1e58      	subs	r0, r3, #1
   10dda:	2800      	cmp	r0, #0
   10ddc:	d000      	beq.n	10de0 <__aeabi_dadd+0x218>
   10dde:	e0de      	b.n	10f9e <__aeabi_dadd+0x3d6>
   10de0:	18ba      	adds	r2, r7, r2
   10de2:	42ba      	cmp	r2, r7
   10de4:	419b      	sbcs	r3, r3
   10de6:	1864      	adds	r4, r4, r1
   10de8:	425b      	negs	r3, r3
   10dea:	18e4      	adds	r4, r4, r3
   10dec:	0017      	movs	r7, r2
   10dee:	2601      	movs	r6, #1
   10df0:	0223      	lsls	r3, r4, #8
   10df2:	d5a6      	bpl.n	10d42 <__aeabi_dadd+0x17a>
   10df4:	2602      	movs	r6, #2
   10df6:	e7d5      	b.n	10da4 <__aeabi_dadd+0x1dc>
   10df8:	2d00      	cmp	r5, #0
   10dfa:	d16e      	bne.n	10eda <__aeabi_dadd+0x312>
   10dfc:	1c70      	adds	r0, r6, #1
   10dfe:	0540      	lsls	r0, r0, #21
   10e00:	0d40      	lsrs	r0, r0, #21
   10e02:	2801      	cmp	r0, #1
   10e04:	dc00      	bgt.n	10e08 <__aeabi_dadd+0x240>
   10e06:	e0f9      	b.n	10ffc <__aeabi_dadd+0x434>
   10e08:	1ab8      	subs	r0, r7, r2
   10e0a:	4684      	mov	ip, r0
   10e0c:	4287      	cmp	r7, r0
   10e0e:	4180      	sbcs	r0, r0
   10e10:	1ae5      	subs	r5, r4, r3
   10e12:	4240      	negs	r0, r0
   10e14:	1a2d      	subs	r5, r5, r0
   10e16:	0228      	lsls	r0, r5, #8
   10e18:	d400      	bmi.n	10e1c <__aeabi_dadd+0x254>
   10e1a:	e089      	b.n	10f30 <__aeabi_dadd+0x368>
   10e1c:	1bd7      	subs	r7, r2, r7
   10e1e:	42ba      	cmp	r2, r7
   10e20:	4192      	sbcs	r2, r2
   10e22:	1b1c      	subs	r4, r3, r4
   10e24:	4252      	negs	r2, r2
   10e26:	1aa5      	subs	r5, r4, r2
   10e28:	46d8      	mov	r8, fp
   10e2a:	e729      	b.n	10c80 <__aeabi_dadd+0xb8>
   10e2c:	4645      	mov	r5, r8
   10e2e:	2400      	movs	r4, #0
   10e30:	2700      	movs	r7, #0
   10e32:	e76a      	b.n	10d0a <__aeabi_dadd+0x142>
   10e34:	4c45      	ldr	r4, [pc, #276]	; (10f4c <__aeabi_dadd+0x384>)
   10e36:	1af6      	subs	r6, r6, r3
   10e38:	402c      	ands	r4, r5
   10e3a:	e749      	b.n	10cd0 <__aeabi_dadd+0x108>
   10e3c:	003d      	movs	r5, r7
   10e3e:	3828      	subs	r0, #40	; 0x28
   10e40:	4085      	lsls	r5, r0
   10e42:	2700      	movs	r7, #0
   10e44:	e72e      	b.n	10ca4 <__aeabi_dadd+0xdc>
   10e46:	0038      	movs	r0, r7
   10e48:	f001 fc66 	bl	12718 <__clzsi2>
   10e4c:	3020      	adds	r0, #32
   10e4e:	e71d      	b.n	10c8c <__aeabi_dadd+0xc4>
   10e50:	430a      	orrs	r2, r1
   10e52:	1e51      	subs	r1, r2, #1
   10e54:	418a      	sbcs	r2, r1
   10e56:	2100      	movs	r1, #0
   10e58:	e707      	b.n	10c6a <__aeabi_dadd+0xa2>
   10e5a:	2b00      	cmp	r3, #0
   10e5c:	d000      	beq.n	10e60 <__aeabi_dadd+0x298>
   10e5e:	e0f3      	b.n	11048 <__aeabi_dadd+0x480>
   10e60:	1c70      	adds	r0, r6, #1
   10e62:	0543      	lsls	r3, r0, #21
   10e64:	0d5b      	lsrs	r3, r3, #21
   10e66:	2b01      	cmp	r3, #1
   10e68:	dc00      	bgt.n	10e6c <__aeabi_dadd+0x2a4>
   10e6a:	e0ad      	b.n	10fc8 <__aeabi_dadd+0x400>
   10e6c:	4b36      	ldr	r3, [pc, #216]	; (10f48 <__aeabi_dadd+0x380>)
   10e6e:	4298      	cmp	r0, r3
   10e70:	d100      	bne.n	10e74 <__aeabi_dadd+0x2ac>
   10e72:	e0d1      	b.n	11018 <__aeabi_dadd+0x450>
   10e74:	18ba      	adds	r2, r7, r2
   10e76:	42ba      	cmp	r2, r7
   10e78:	41bf      	sbcs	r7, r7
   10e7a:	1864      	adds	r4, r4, r1
   10e7c:	427f      	negs	r7, r7
   10e7e:	19e4      	adds	r4, r4, r7
   10e80:	07e7      	lsls	r7, r4, #31
   10e82:	0852      	lsrs	r2, r2, #1
   10e84:	4317      	orrs	r7, r2
   10e86:	0864      	lsrs	r4, r4, #1
   10e88:	0006      	movs	r6, r0
   10e8a:	e721      	b.n	10cd0 <__aeabi_dadd+0x108>
   10e8c:	482e      	ldr	r0, [pc, #184]	; (10f48 <__aeabi_dadd+0x380>)
   10e8e:	4285      	cmp	r5, r0
   10e90:	d100      	bne.n	10e94 <__aeabi_dadd+0x2cc>
   10e92:	e093      	b.n	10fbc <__aeabi_dadd+0x3f4>
   10e94:	001d      	movs	r5, r3
   10e96:	e6d0      	b.n	10c3a <__aeabi_dadd+0x72>
   10e98:	0029      	movs	r1, r5
   10e9a:	3e1f      	subs	r6, #31
   10e9c:	40f1      	lsrs	r1, r6
   10e9e:	2b20      	cmp	r3, #32
   10ea0:	d100      	bne.n	10ea4 <__aeabi_dadd+0x2dc>
   10ea2:	e08d      	b.n	10fc0 <__aeabi_dadd+0x3f8>
   10ea4:	2240      	movs	r2, #64	; 0x40
   10ea6:	1ad3      	subs	r3, r2, r3
   10ea8:	409d      	lsls	r5, r3
   10eaa:	432f      	orrs	r7, r5
   10eac:	1e7d      	subs	r5, r7, #1
   10eae:	41af      	sbcs	r7, r5
   10eb0:	2400      	movs	r4, #0
   10eb2:	430f      	orrs	r7, r1
   10eb4:	2600      	movs	r6, #0
   10eb6:	e744      	b.n	10d42 <__aeabi_dadd+0x17a>
   10eb8:	002b      	movs	r3, r5
   10eba:	0008      	movs	r0, r1
   10ebc:	3b20      	subs	r3, #32
   10ebe:	40d8      	lsrs	r0, r3
   10ec0:	0003      	movs	r3, r0
   10ec2:	2d20      	cmp	r5, #32
   10ec4:	d100      	bne.n	10ec8 <__aeabi_dadd+0x300>
   10ec6:	e07d      	b.n	10fc4 <__aeabi_dadd+0x3fc>
   10ec8:	2040      	movs	r0, #64	; 0x40
   10eca:	1b45      	subs	r5, r0, r5
   10ecc:	40a9      	lsls	r1, r5
   10ece:	430a      	orrs	r2, r1
   10ed0:	1e51      	subs	r1, r2, #1
   10ed2:	418a      	sbcs	r2, r1
   10ed4:	2100      	movs	r1, #0
   10ed6:	431a      	orrs	r2, r3
   10ed8:	e6c7      	b.n	10c6a <__aeabi_dadd+0xa2>
   10eda:	2e00      	cmp	r6, #0
   10edc:	d050      	beq.n	10f80 <__aeabi_dadd+0x3b8>
   10ede:	4e1a      	ldr	r6, [pc, #104]	; (10f48 <__aeabi_dadd+0x380>)
   10ee0:	42b0      	cmp	r0, r6
   10ee2:	d057      	beq.n	10f94 <__aeabi_dadd+0x3cc>
   10ee4:	2680      	movs	r6, #128	; 0x80
   10ee6:	426b      	negs	r3, r5
   10ee8:	4699      	mov	r9, r3
   10eea:	0436      	lsls	r6, r6, #16
   10eec:	4334      	orrs	r4, r6
   10eee:	464b      	mov	r3, r9
   10ef0:	2b38      	cmp	r3, #56	; 0x38
   10ef2:	dd00      	ble.n	10ef6 <__aeabi_dadd+0x32e>
   10ef4:	e0d6      	b.n	110a4 <__aeabi_dadd+0x4dc>
   10ef6:	2b1f      	cmp	r3, #31
   10ef8:	dd00      	ble.n	10efc <__aeabi_dadd+0x334>
   10efa:	e135      	b.n	11168 <__aeabi_dadd+0x5a0>
   10efc:	2620      	movs	r6, #32
   10efe:	1af5      	subs	r5, r6, r3
   10f00:	0026      	movs	r6, r4
   10f02:	40ae      	lsls	r6, r5
   10f04:	46b2      	mov	sl, r6
   10f06:	003e      	movs	r6, r7
   10f08:	40de      	lsrs	r6, r3
   10f0a:	46ac      	mov	ip, r5
   10f0c:	0035      	movs	r5, r6
   10f0e:	4656      	mov	r6, sl
   10f10:	432e      	orrs	r6, r5
   10f12:	4665      	mov	r5, ip
   10f14:	40af      	lsls	r7, r5
   10f16:	1e7d      	subs	r5, r7, #1
   10f18:	41af      	sbcs	r7, r5
   10f1a:	40dc      	lsrs	r4, r3
   10f1c:	4337      	orrs	r7, r6
   10f1e:	1bd7      	subs	r7, r2, r7
   10f20:	42ba      	cmp	r2, r7
   10f22:	4192      	sbcs	r2, r2
   10f24:	1b0c      	subs	r4, r1, r4
   10f26:	4252      	negs	r2, r2
   10f28:	1aa4      	subs	r4, r4, r2
   10f2a:	0006      	movs	r6, r0
   10f2c:	46d8      	mov	r8, fp
   10f2e:	e6a3      	b.n	10c78 <__aeabi_dadd+0xb0>
   10f30:	4664      	mov	r4, ip
   10f32:	4667      	mov	r7, ip
   10f34:	432c      	orrs	r4, r5
   10f36:	d000      	beq.n	10f3a <__aeabi_dadd+0x372>
   10f38:	e6a2      	b.n	10c80 <__aeabi_dadd+0xb8>
   10f3a:	2500      	movs	r5, #0
   10f3c:	2600      	movs	r6, #0
   10f3e:	2700      	movs	r7, #0
   10f40:	e706      	b.n	10d50 <__aeabi_dadd+0x188>
   10f42:	001e      	movs	r6, r3
   10f44:	e6c4      	b.n	10cd0 <__aeabi_dadd+0x108>
   10f46:	46c0      	nop			; (mov r8, r8)
   10f48:	000007ff 	.word	0x000007ff
   10f4c:	ff7fffff 	.word	0xff7fffff
   10f50:	800fffff 	.word	0x800fffff
   10f54:	2b1f      	cmp	r3, #31
   10f56:	dc63      	bgt.n	11020 <__aeabi_dadd+0x458>
   10f58:	2020      	movs	r0, #32
   10f5a:	1ac3      	subs	r3, r0, r3
   10f5c:	0008      	movs	r0, r1
   10f5e:	4098      	lsls	r0, r3
   10f60:	469c      	mov	ip, r3
   10f62:	4683      	mov	fp, r0
   10f64:	4653      	mov	r3, sl
   10f66:	0010      	movs	r0, r2
   10f68:	40d8      	lsrs	r0, r3
   10f6a:	0003      	movs	r3, r0
   10f6c:	4658      	mov	r0, fp
   10f6e:	4318      	orrs	r0, r3
   10f70:	4663      	mov	r3, ip
   10f72:	409a      	lsls	r2, r3
   10f74:	1e53      	subs	r3, r2, #1
   10f76:	419a      	sbcs	r2, r3
   10f78:	4653      	mov	r3, sl
   10f7a:	4302      	orrs	r2, r0
   10f7c:	40d9      	lsrs	r1, r3
   10f7e:	e703      	b.n	10d88 <__aeabi_dadd+0x1c0>
   10f80:	0026      	movs	r6, r4
   10f82:	433e      	orrs	r6, r7
   10f84:	d006      	beq.n	10f94 <__aeabi_dadd+0x3cc>
   10f86:	43eb      	mvns	r3, r5
   10f88:	4699      	mov	r9, r3
   10f8a:	2b00      	cmp	r3, #0
   10f8c:	d0c7      	beq.n	10f1e <__aeabi_dadd+0x356>
   10f8e:	4e94      	ldr	r6, [pc, #592]	; (111e0 <__aeabi_dadd+0x618>)
   10f90:	42b0      	cmp	r0, r6
   10f92:	d1ac      	bne.n	10eee <__aeabi_dadd+0x326>
   10f94:	000c      	movs	r4, r1
   10f96:	0017      	movs	r7, r2
   10f98:	0006      	movs	r6, r0
   10f9a:	46d8      	mov	r8, fp
   10f9c:	e698      	b.n	10cd0 <__aeabi_dadd+0x108>
   10f9e:	4b90      	ldr	r3, [pc, #576]	; (111e0 <__aeabi_dadd+0x618>)
   10fa0:	459a      	cmp	sl, r3
   10fa2:	d00b      	beq.n	10fbc <__aeabi_dadd+0x3f4>
   10fa4:	4682      	mov	sl, r0
   10fa6:	e6e7      	b.n	10d78 <__aeabi_dadd+0x1b0>
   10fa8:	2800      	cmp	r0, #0
   10faa:	d000      	beq.n	10fae <__aeabi_dadd+0x3e6>
   10fac:	e09e      	b.n	110ec <__aeabi_dadd+0x524>
   10fae:	0018      	movs	r0, r3
   10fb0:	4310      	orrs	r0, r2
   10fb2:	d100      	bne.n	10fb6 <__aeabi_dadd+0x3ee>
   10fb4:	e0e9      	b.n	1118a <__aeabi_dadd+0x5c2>
   10fb6:	001c      	movs	r4, r3
   10fb8:	0017      	movs	r7, r2
   10fba:	46d8      	mov	r8, fp
   10fbc:	4e88      	ldr	r6, [pc, #544]	; (111e0 <__aeabi_dadd+0x618>)
   10fbe:	e687      	b.n	10cd0 <__aeabi_dadd+0x108>
   10fc0:	2500      	movs	r5, #0
   10fc2:	e772      	b.n	10eaa <__aeabi_dadd+0x2e2>
   10fc4:	2100      	movs	r1, #0
   10fc6:	e782      	b.n	10ece <__aeabi_dadd+0x306>
   10fc8:	0023      	movs	r3, r4
   10fca:	433b      	orrs	r3, r7
   10fcc:	2e00      	cmp	r6, #0
   10fce:	d000      	beq.n	10fd2 <__aeabi_dadd+0x40a>
   10fd0:	e0ab      	b.n	1112a <__aeabi_dadd+0x562>
   10fd2:	2b00      	cmp	r3, #0
   10fd4:	d100      	bne.n	10fd8 <__aeabi_dadd+0x410>
   10fd6:	e0e7      	b.n	111a8 <__aeabi_dadd+0x5e0>
   10fd8:	000b      	movs	r3, r1
   10fda:	4313      	orrs	r3, r2
   10fdc:	d100      	bne.n	10fe0 <__aeabi_dadd+0x418>
   10fde:	e677      	b.n	10cd0 <__aeabi_dadd+0x108>
   10fe0:	18ba      	adds	r2, r7, r2
   10fe2:	42ba      	cmp	r2, r7
   10fe4:	41bf      	sbcs	r7, r7
   10fe6:	1864      	adds	r4, r4, r1
   10fe8:	427f      	negs	r7, r7
   10fea:	19e4      	adds	r4, r4, r7
   10fec:	0223      	lsls	r3, r4, #8
   10fee:	d400      	bmi.n	10ff2 <__aeabi_dadd+0x42a>
   10ff0:	e0f2      	b.n	111d8 <__aeabi_dadd+0x610>
   10ff2:	4b7c      	ldr	r3, [pc, #496]	; (111e4 <__aeabi_dadd+0x61c>)
   10ff4:	0017      	movs	r7, r2
   10ff6:	401c      	ands	r4, r3
   10ff8:	0006      	movs	r6, r0
   10ffa:	e669      	b.n	10cd0 <__aeabi_dadd+0x108>
   10ffc:	0020      	movs	r0, r4
   10ffe:	4338      	orrs	r0, r7
   11000:	2e00      	cmp	r6, #0
   11002:	d1d1      	bne.n	10fa8 <__aeabi_dadd+0x3e0>
   11004:	2800      	cmp	r0, #0
   11006:	d15b      	bne.n	110c0 <__aeabi_dadd+0x4f8>
   11008:	001c      	movs	r4, r3
   1100a:	4314      	orrs	r4, r2
   1100c:	d100      	bne.n	11010 <__aeabi_dadd+0x448>
   1100e:	e0a8      	b.n	11162 <__aeabi_dadd+0x59a>
   11010:	001c      	movs	r4, r3
   11012:	0017      	movs	r7, r2
   11014:	46d8      	mov	r8, fp
   11016:	e65b      	b.n	10cd0 <__aeabi_dadd+0x108>
   11018:	0006      	movs	r6, r0
   1101a:	2400      	movs	r4, #0
   1101c:	2700      	movs	r7, #0
   1101e:	e697      	b.n	10d50 <__aeabi_dadd+0x188>
   11020:	4650      	mov	r0, sl
   11022:	000b      	movs	r3, r1
   11024:	3820      	subs	r0, #32
   11026:	40c3      	lsrs	r3, r0
   11028:	4699      	mov	r9, r3
   1102a:	4653      	mov	r3, sl
   1102c:	2b20      	cmp	r3, #32
   1102e:	d100      	bne.n	11032 <__aeabi_dadd+0x46a>
   11030:	e095      	b.n	1115e <__aeabi_dadd+0x596>
   11032:	2340      	movs	r3, #64	; 0x40
   11034:	4650      	mov	r0, sl
   11036:	1a1b      	subs	r3, r3, r0
   11038:	4099      	lsls	r1, r3
   1103a:	430a      	orrs	r2, r1
   1103c:	1e51      	subs	r1, r2, #1
   1103e:	418a      	sbcs	r2, r1
   11040:	464b      	mov	r3, r9
   11042:	2100      	movs	r1, #0
   11044:	431a      	orrs	r2, r3
   11046:	e69f      	b.n	10d88 <__aeabi_dadd+0x1c0>
   11048:	2e00      	cmp	r6, #0
   1104a:	d130      	bne.n	110ae <__aeabi_dadd+0x4e6>
   1104c:	0026      	movs	r6, r4
   1104e:	433e      	orrs	r6, r7
   11050:	d067      	beq.n	11122 <__aeabi_dadd+0x55a>
   11052:	43db      	mvns	r3, r3
   11054:	469a      	mov	sl, r3
   11056:	2b00      	cmp	r3, #0
   11058:	d01c      	beq.n	11094 <__aeabi_dadd+0x4cc>
   1105a:	4e61      	ldr	r6, [pc, #388]	; (111e0 <__aeabi_dadd+0x618>)
   1105c:	42b0      	cmp	r0, r6
   1105e:	d060      	beq.n	11122 <__aeabi_dadd+0x55a>
   11060:	4653      	mov	r3, sl
   11062:	2b38      	cmp	r3, #56	; 0x38
   11064:	dd00      	ble.n	11068 <__aeabi_dadd+0x4a0>
   11066:	e096      	b.n	11196 <__aeabi_dadd+0x5ce>
   11068:	2b1f      	cmp	r3, #31
   1106a:	dd00      	ble.n	1106e <__aeabi_dadd+0x4a6>
   1106c:	e09f      	b.n	111ae <__aeabi_dadd+0x5e6>
   1106e:	2620      	movs	r6, #32
   11070:	1af3      	subs	r3, r6, r3
   11072:	0026      	movs	r6, r4
   11074:	409e      	lsls	r6, r3
   11076:	469c      	mov	ip, r3
   11078:	46b3      	mov	fp, r6
   1107a:	4653      	mov	r3, sl
   1107c:	003e      	movs	r6, r7
   1107e:	40de      	lsrs	r6, r3
   11080:	0033      	movs	r3, r6
   11082:	465e      	mov	r6, fp
   11084:	431e      	orrs	r6, r3
   11086:	4663      	mov	r3, ip
   11088:	409f      	lsls	r7, r3
   1108a:	1e7b      	subs	r3, r7, #1
   1108c:	419f      	sbcs	r7, r3
   1108e:	4653      	mov	r3, sl
   11090:	40dc      	lsrs	r4, r3
   11092:	4337      	orrs	r7, r6
   11094:	18bf      	adds	r7, r7, r2
   11096:	4297      	cmp	r7, r2
   11098:	4192      	sbcs	r2, r2
   1109a:	1864      	adds	r4, r4, r1
   1109c:	4252      	negs	r2, r2
   1109e:	18a4      	adds	r4, r4, r2
   110a0:	0006      	movs	r6, r0
   110a2:	e678      	b.n	10d96 <__aeabi_dadd+0x1ce>
   110a4:	4327      	orrs	r7, r4
   110a6:	1e7c      	subs	r4, r7, #1
   110a8:	41a7      	sbcs	r7, r4
   110aa:	2400      	movs	r4, #0
   110ac:	e737      	b.n	10f1e <__aeabi_dadd+0x356>
   110ae:	4e4c      	ldr	r6, [pc, #304]	; (111e0 <__aeabi_dadd+0x618>)
   110b0:	42b0      	cmp	r0, r6
   110b2:	d036      	beq.n	11122 <__aeabi_dadd+0x55a>
   110b4:	2680      	movs	r6, #128	; 0x80
   110b6:	425b      	negs	r3, r3
   110b8:	0436      	lsls	r6, r6, #16
   110ba:	469a      	mov	sl, r3
   110bc:	4334      	orrs	r4, r6
   110be:	e7cf      	b.n	11060 <__aeabi_dadd+0x498>
   110c0:	0018      	movs	r0, r3
   110c2:	4310      	orrs	r0, r2
   110c4:	d100      	bne.n	110c8 <__aeabi_dadd+0x500>
   110c6:	e603      	b.n	10cd0 <__aeabi_dadd+0x108>
   110c8:	1ab8      	subs	r0, r7, r2
   110ca:	4684      	mov	ip, r0
   110cc:	4567      	cmp	r7, ip
   110ce:	41ad      	sbcs	r5, r5
   110d0:	1ae0      	subs	r0, r4, r3
   110d2:	426d      	negs	r5, r5
   110d4:	1b40      	subs	r0, r0, r5
   110d6:	0205      	lsls	r5, r0, #8
   110d8:	d400      	bmi.n	110dc <__aeabi_dadd+0x514>
   110da:	e62c      	b.n	10d36 <__aeabi_dadd+0x16e>
   110dc:	1bd7      	subs	r7, r2, r7
   110de:	42ba      	cmp	r2, r7
   110e0:	4192      	sbcs	r2, r2
   110e2:	1b1c      	subs	r4, r3, r4
   110e4:	4252      	negs	r2, r2
   110e6:	1aa4      	subs	r4, r4, r2
   110e8:	46d8      	mov	r8, fp
   110ea:	e5f1      	b.n	10cd0 <__aeabi_dadd+0x108>
   110ec:	0018      	movs	r0, r3
   110ee:	4310      	orrs	r0, r2
   110f0:	d100      	bne.n	110f4 <__aeabi_dadd+0x52c>
   110f2:	e763      	b.n	10fbc <__aeabi_dadd+0x3f4>
   110f4:	08f8      	lsrs	r0, r7, #3
   110f6:	0767      	lsls	r7, r4, #29
   110f8:	4307      	orrs	r7, r0
   110fa:	2080      	movs	r0, #128	; 0x80
   110fc:	08e4      	lsrs	r4, r4, #3
   110fe:	0300      	lsls	r0, r0, #12
   11100:	4204      	tst	r4, r0
   11102:	d008      	beq.n	11116 <__aeabi_dadd+0x54e>
   11104:	08dd      	lsrs	r5, r3, #3
   11106:	4205      	tst	r5, r0
   11108:	d105      	bne.n	11116 <__aeabi_dadd+0x54e>
   1110a:	08d2      	lsrs	r2, r2, #3
   1110c:	0759      	lsls	r1, r3, #29
   1110e:	4311      	orrs	r1, r2
   11110:	000f      	movs	r7, r1
   11112:	002c      	movs	r4, r5
   11114:	46d8      	mov	r8, fp
   11116:	0f7b      	lsrs	r3, r7, #29
   11118:	00e4      	lsls	r4, r4, #3
   1111a:	431c      	orrs	r4, r3
   1111c:	00ff      	lsls	r7, r7, #3
   1111e:	4e30      	ldr	r6, [pc, #192]	; (111e0 <__aeabi_dadd+0x618>)
   11120:	e5d6      	b.n	10cd0 <__aeabi_dadd+0x108>
   11122:	000c      	movs	r4, r1
   11124:	0017      	movs	r7, r2
   11126:	0006      	movs	r6, r0
   11128:	e5d2      	b.n	10cd0 <__aeabi_dadd+0x108>
   1112a:	2b00      	cmp	r3, #0
   1112c:	d038      	beq.n	111a0 <__aeabi_dadd+0x5d8>
   1112e:	000b      	movs	r3, r1
   11130:	4313      	orrs	r3, r2
   11132:	d100      	bne.n	11136 <__aeabi_dadd+0x56e>
   11134:	e742      	b.n	10fbc <__aeabi_dadd+0x3f4>
   11136:	08f8      	lsrs	r0, r7, #3
   11138:	0767      	lsls	r7, r4, #29
   1113a:	4307      	orrs	r7, r0
   1113c:	2080      	movs	r0, #128	; 0x80
   1113e:	08e4      	lsrs	r4, r4, #3
   11140:	0300      	lsls	r0, r0, #12
   11142:	4204      	tst	r4, r0
   11144:	d0e7      	beq.n	11116 <__aeabi_dadd+0x54e>
   11146:	08cb      	lsrs	r3, r1, #3
   11148:	4203      	tst	r3, r0
   1114a:	d1e4      	bne.n	11116 <__aeabi_dadd+0x54e>
   1114c:	08d2      	lsrs	r2, r2, #3
   1114e:	0749      	lsls	r1, r1, #29
   11150:	4311      	orrs	r1, r2
   11152:	000f      	movs	r7, r1
   11154:	001c      	movs	r4, r3
   11156:	e7de      	b.n	11116 <__aeabi_dadd+0x54e>
   11158:	2700      	movs	r7, #0
   1115a:	2400      	movs	r4, #0
   1115c:	e5d5      	b.n	10d0a <__aeabi_dadd+0x142>
   1115e:	2100      	movs	r1, #0
   11160:	e76b      	b.n	1103a <__aeabi_dadd+0x472>
   11162:	2500      	movs	r5, #0
   11164:	2700      	movs	r7, #0
   11166:	e5f3      	b.n	10d50 <__aeabi_dadd+0x188>
   11168:	464e      	mov	r6, r9
   1116a:	0025      	movs	r5, r4
   1116c:	3e20      	subs	r6, #32
   1116e:	40f5      	lsrs	r5, r6
   11170:	464b      	mov	r3, r9
   11172:	002e      	movs	r6, r5
   11174:	2b20      	cmp	r3, #32
   11176:	d02d      	beq.n	111d4 <__aeabi_dadd+0x60c>
   11178:	2540      	movs	r5, #64	; 0x40
   1117a:	1aed      	subs	r5, r5, r3
   1117c:	40ac      	lsls	r4, r5
   1117e:	4327      	orrs	r7, r4
   11180:	1e7c      	subs	r4, r7, #1
   11182:	41a7      	sbcs	r7, r4
   11184:	2400      	movs	r4, #0
   11186:	4337      	orrs	r7, r6
   11188:	e6c9      	b.n	10f1e <__aeabi_dadd+0x356>
   1118a:	2480      	movs	r4, #128	; 0x80
   1118c:	2500      	movs	r5, #0
   1118e:	0324      	lsls	r4, r4, #12
   11190:	4e13      	ldr	r6, [pc, #76]	; (111e0 <__aeabi_dadd+0x618>)
   11192:	2700      	movs	r7, #0
   11194:	e5dc      	b.n	10d50 <__aeabi_dadd+0x188>
   11196:	4327      	orrs	r7, r4
   11198:	1e7c      	subs	r4, r7, #1
   1119a:	41a7      	sbcs	r7, r4
   1119c:	2400      	movs	r4, #0
   1119e:	e779      	b.n	11094 <__aeabi_dadd+0x4cc>
   111a0:	000c      	movs	r4, r1
   111a2:	0017      	movs	r7, r2
   111a4:	4e0e      	ldr	r6, [pc, #56]	; (111e0 <__aeabi_dadd+0x618>)
   111a6:	e593      	b.n	10cd0 <__aeabi_dadd+0x108>
   111a8:	000c      	movs	r4, r1
   111aa:	0017      	movs	r7, r2
   111ac:	e590      	b.n	10cd0 <__aeabi_dadd+0x108>
   111ae:	4656      	mov	r6, sl
   111b0:	0023      	movs	r3, r4
   111b2:	3e20      	subs	r6, #32
   111b4:	40f3      	lsrs	r3, r6
   111b6:	4699      	mov	r9, r3
   111b8:	4653      	mov	r3, sl
   111ba:	2b20      	cmp	r3, #32
   111bc:	d00e      	beq.n	111dc <__aeabi_dadd+0x614>
   111be:	2340      	movs	r3, #64	; 0x40
   111c0:	4656      	mov	r6, sl
   111c2:	1b9b      	subs	r3, r3, r6
   111c4:	409c      	lsls	r4, r3
   111c6:	4327      	orrs	r7, r4
   111c8:	1e7c      	subs	r4, r7, #1
   111ca:	41a7      	sbcs	r7, r4
   111cc:	464b      	mov	r3, r9
   111ce:	2400      	movs	r4, #0
   111d0:	431f      	orrs	r7, r3
   111d2:	e75f      	b.n	11094 <__aeabi_dadd+0x4cc>
   111d4:	2400      	movs	r4, #0
   111d6:	e7d2      	b.n	1117e <__aeabi_dadd+0x5b6>
   111d8:	0017      	movs	r7, r2
   111da:	e5b2      	b.n	10d42 <__aeabi_dadd+0x17a>
   111dc:	2400      	movs	r4, #0
   111de:	e7f2      	b.n	111c6 <__aeabi_dadd+0x5fe>
   111e0:	000007ff 	.word	0x000007ff
   111e4:	ff7fffff 	.word	0xff7fffff

000111e8 <__aeabi_ddiv>:
   111e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   111ea:	4657      	mov	r7, sl
   111ec:	4645      	mov	r5, r8
   111ee:	46de      	mov	lr, fp
   111f0:	464e      	mov	r6, r9
   111f2:	b5e0      	push	{r5, r6, r7, lr}
   111f4:	004c      	lsls	r4, r1, #1
   111f6:	030e      	lsls	r6, r1, #12
   111f8:	b087      	sub	sp, #28
   111fa:	4683      	mov	fp, r0
   111fc:	4692      	mov	sl, r2
   111fe:	001d      	movs	r5, r3
   11200:	4680      	mov	r8, r0
   11202:	0b36      	lsrs	r6, r6, #12
   11204:	0d64      	lsrs	r4, r4, #21
   11206:	0fcf      	lsrs	r7, r1, #31
   11208:	2c00      	cmp	r4, #0
   1120a:	d04f      	beq.n	112ac <__aeabi_ddiv+0xc4>
   1120c:	4b6f      	ldr	r3, [pc, #444]	; (113cc <__aeabi_ddiv+0x1e4>)
   1120e:	429c      	cmp	r4, r3
   11210:	d035      	beq.n	1127e <__aeabi_ddiv+0x96>
   11212:	2380      	movs	r3, #128	; 0x80
   11214:	0f42      	lsrs	r2, r0, #29
   11216:	041b      	lsls	r3, r3, #16
   11218:	00f6      	lsls	r6, r6, #3
   1121a:	4313      	orrs	r3, r2
   1121c:	4333      	orrs	r3, r6
   1121e:	4699      	mov	r9, r3
   11220:	00c3      	lsls	r3, r0, #3
   11222:	4698      	mov	r8, r3
   11224:	4b6a      	ldr	r3, [pc, #424]	; (113d0 <__aeabi_ddiv+0x1e8>)
   11226:	2600      	movs	r6, #0
   11228:	469c      	mov	ip, r3
   1122a:	2300      	movs	r3, #0
   1122c:	4464      	add	r4, ip
   1122e:	9303      	str	r3, [sp, #12]
   11230:	032b      	lsls	r3, r5, #12
   11232:	0b1b      	lsrs	r3, r3, #12
   11234:	469b      	mov	fp, r3
   11236:	006b      	lsls	r3, r5, #1
   11238:	0fed      	lsrs	r5, r5, #31
   1123a:	4650      	mov	r0, sl
   1123c:	0d5b      	lsrs	r3, r3, #21
   1123e:	9501      	str	r5, [sp, #4]
   11240:	d05e      	beq.n	11300 <__aeabi_ddiv+0x118>
   11242:	4a62      	ldr	r2, [pc, #392]	; (113cc <__aeabi_ddiv+0x1e4>)
   11244:	4293      	cmp	r3, r2
   11246:	d053      	beq.n	112f0 <__aeabi_ddiv+0x108>
   11248:	465a      	mov	r2, fp
   1124a:	00d1      	lsls	r1, r2, #3
   1124c:	2280      	movs	r2, #128	; 0x80
   1124e:	0f40      	lsrs	r0, r0, #29
   11250:	0412      	lsls	r2, r2, #16
   11252:	4302      	orrs	r2, r0
   11254:	430a      	orrs	r2, r1
   11256:	4693      	mov	fp, r2
   11258:	4652      	mov	r2, sl
   1125a:	00d1      	lsls	r1, r2, #3
   1125c:	4a5c      	ldr	r2, [pc, #368]	; (113d0 <__aeabi_ddiv+0x1e8>)
   1125e:	4694      	mov	ip, r2
   11260:	2200      	movs	r2, #0
   11262:	4463      	add	r3, ip
   11264:	0038      	movs	r0, r7
   11266:	4068      	eors	r0, r5
   11268:	4684      	mov	ip, r0
   1126a:	9002      	str	r0, [sp, #8]
   1126c:	1ae4      	subs	r4, r4, r3
   1126e:	4316      	orrs	r6, r2
   11270:	2e0f      	cmp	r6, #15
   11272:	d900      	bls.n	11276 <__aeabi_ddiv+0x8e>
   11274:	e0b4      	b.n	113e0 <__aeabi_ddiv+0x1f8>
   11276:	4b57      	ldr	r3, [pc, #348]	; (113d4 <__aeabi_ddiv+0x1ec>)
   11278:	00b6      	lsls	r6, r6, #2
   1127a:	599b      	ldr	r3, [r3, r6]
   1127c:	469f      	mov	pc, r3
   1127e:	0003      	movs	r3, r0
   11280:	4333      	orrs	r3, r6
   11282:	4699      	mov	r9, r3
   11284:	d16c      	bne.n	11360 <__aeabi_ddiv+0x178>
   11286:	2300      	movs	r3, #0
   11288:	4698      	mov	r8, r3
   1128a:	3302      	adds	r3, #2
   1128c:	2608      	movs	r6, #8
   1128e:	9303      	str	r3, [sp, #12]
   11290:	e7ce      	b.n	11230 <__aeabi_ddiv+0x48>
   11292:	46cb      	mov	fp, r9
   11294:	4641      	mov	r1, r8
   11296:	9a03      	ldr	r2, [sp, #12]
   11298:	9701      	str	r7, [sp, #4]
   1129a:	2a02      	cmp	r2, #2
   1129c:	d165      	bne.n	1136a <__aeabi_ddiv+0x182>
   1129e:	9b01      	ldr	r3, [sp, #4]
   112a0:	4c4a      	ldr	r4, [pc, #296]	; (113cc <__aeabi_ddiv+0x1e4>)
   112a2:	469c      	mov	ip, r3
   112a4:	2300      	movs	r3, #0
   112a6:	2200      	movs	r2, #0
   112a8:	4698      	mov	r8, r3
   112aa:	e06b      	b.n	11384 <__aeabi_ddiv+0x19c>
   112ac:	0003      	movs	r3, r0
   112ae:	4333      	orrs	r3, r6
   112b0:	4699      	mov	r9, r3
   112b2:	d04e      	beq.n	11352 <__aeabi_ddiv+0x16a>
   112b4:	2e00      	cmp	r6, #0
   112b6:	d100      	bne.n	112ba <__aeabi_ddiv+0xd2>
   112b8:	e1bc      	b.n	11634 <__aeabi_ddiv+0x44c>
   112ba:	0030      	movs	r0, r6
   112bc:	f001 fa2c 	bl	12718 <__clzsi2>
   112c0:	0003      	movs	r3, r0
   112c2:	3b0b      	subs	r3, #11
   112c4:	2b1c      	cmp	r3, #28
   112c6:	dd00      	ble.n	112ca <__aeabi_ddiv+0xe2>
   112c8:	e1ac      	b.n	11624 <__aeabi_ddiv+0x43c>
   112ca:	221d      	movs	r2, #29
   112cc:	1ad3      	subs	r3, r2, r3
   112ce:	465a      	mov	r2, fp
   112d0:	0001      	movs	r1, r0
   112d2:	40da      	lsrs	r2, r3
   112d4:	3908      	subs	r1, #8
   112d6:	408e      	lsls	r6, r1
   112d8:	0013      	movs	r3, r2
   112da:	4333      	orrs	r3, r6
   112dc:	4699      	mov	r9, r3
   112de:	465b      	mov	r3, fp
   112e0:	408b      	lsls	r3, r1
   112e2:	4698      	mov	r8, r3
   112e4:	2300      	movs	r3, #0
   112e6:	4c3c      	ldr	r4, [pc, #240]	; (113d8 <__aeabi_ddiv+0x1f0>)
   112e8:	2600      	movs	r6, #0
   112ea:	1a24      	subs	r4, r4, r0
   112ec:	9303      	str	r3, [sp, #12]
   112ee:	e79f      	b.n	11230 <__aeabi_ddiv+0x48>
   112f0:	4651      	mov	r1, sl
   112f2:	465a      	mov	r2, fp
   112f4:	4311      	orrs	r1, r2
   112f6:	d129      	bne.n	1134c <__aeabi_ddiv+0x164>
   112f8:	2200      	movs	r2, #0
   112fa:	4693      	mov	fp, r2
   112fc:	3202      	adds	r2, #2
   112fe:	e7b1      	b.n	11264 <__aeabi_ddiv+0x7c>
   11300:	4659      	mov	r1, fp
   11302:	4301      	orrs	r1, r0
   11304:	d01e      	beq.n	11344 <__aeabi_ddiv+0x15c>
   11306:	465b      	mov	r3, fp
   11308:	2b00      	cmp	r3, #0
   1130a:	d100      	bne.n	1130e <__aeabi_ddiv+0x126>
   1130c:	e19e      	b.n	1164c <__aeabi_ddiv+0x464>
   1130e:	4658      	mov	r0, fp
   11310:	f001 fa02 	bl	12718 <__clzsi2>
   11314:	0003      	movs	r3, r0
   11316:	3b0b      	subs	r3, #11
   11318:	2b1c      	cmp	r3, #28
   1131a:	dd00      	ble.n	1131e <__aeabi_ddiv+0x136>
   1131c:	e18f      	b.n	1163e <__aeabi_ddiv+0x456>
   1131e:	0002      	movs	r2, r0
   11320:	4659      	mov	r1, fp
   11322:	3a08      	subs	r2, #8
   11324:	4091      	lsls	r1, r2
   11326:	468b      	mov	fp, r1
   11328:	211d      	movs	r1, #29
   1132a:	1acb      	subs	r3, r1, r3
   1132c:	4651      	mov	r1, sl
   1132e:	40d9      	lsrs	r1, r3
   11330:	000b      	movs	r3, r1
   11332:	4659      	mov	r1, fp
   11334:	430b      	orrs	r3, r1
   11336:	4651      	mov	r1, sl
   11338:	469b      	mov	fp, r3
   1133a:	4091      	lsls	r1, r2
   1133c:	4b26      	ldr	r3, [pc, #152]	; (113d8 <__aeabi_ddiv+0x1f0>)
   1133e:	2200      	movs	r2, #0
   11340:	1a1b      	subs	r3, r3, r0
   11342:	e78f      	b.n	11264 <__aeabi_ddiv+0x7c>
   11344:	2300      	movs	r3, #0
   11346:	2201      	movs	r2, #1
   11348:	469b      	mov	fp, r3
   1134a:	e78b      	b.n	11264 <__aeabi_ddiv+0x7c>
   1134c:	4651      	mov	r1, sl
   1134e:	2203      	movs	r2, #3
   11350:	e788      	b.n	11264 <__aeabi_ddiv+0x7c>
   11352:	2300      	movs	r3, #0
   11354:	4698      	mov	r8, r3
   11356:	3301      	adds	r3, #1
   11358:	2604      	movs	r6, #4
   1135a:	2400      	movs	r4, #0
   1135c:	9303      	str	r3, [sp, #12]
   1135e:	e767      	b.n	11230 <__aeabi_ddiv+0x48>
   11360:	2303      	movs	r3, #3
   11362:	46b1      	mov	r9, r6
   11364:	9303      	str	r3, [sp, #12]
   11366:	260c      	movs	r6, #12
   11368:	e762      	b.n	11230 <__aeabi_ddiv+0x48>
   1136a:	2a03      	cmp	r2, #3
   1136c:	d100      	bne.n	11370 <__aeabi_ddiv+0x188>
   1136e:	e25c      	b.n	1182a <__aeabi_ddiv+0x642>
   11370:	9b01      	ldr	r3, [sp, #4]
   11372:	2a01      	cmp	r2, #1
   11374:	d000      	beq.n	11378 <__aeabi_ddiv+0x190>
   11376:	e1e4      	b.n	11742 <__aeabi_ddiv+0x55a>
   11378:	4013      	ands	r3, r2
   1137a:	469c      	mov	ip, r3
   1137c:	2300      	movs	r3, #0
   1137e:	2400      	movs	r4, #0
   11380:	2200      	movs	r2, #0
   11382:	4698      	mov	r8, r3
   11384:	2100      	movs	r1, #0
   11386:	0312      	lsls	r2, r2, #12
   11388:	0b13      	lsrs	r3, r2, #12
   1138a:	0d0a      	lsrs	r2, r1, #20
   1138c:	0512      	lsls	r2, r2, #20
   1138e:	431a      	orrs	r2, r3
   11390:	0523      	lsls	r3, r4, #20
   11392:	4c12      	ldr	r4, [pc, #72]	; (113dc <__aeabi_ddiv+0x1f4>)
   11394:	4640      	mov	r0, r8
   11396:	4022      	ands	r2, r4
   11398:	4313      	orrs	r3, r2
   1139a:	4662      	mov	r2, ip
   1139c:	005b      	lsls	r3, r3, #1
   1139e:	07d2      	lsls	r2, r2, #31
   113a0:	085b      	lsrs	r3, r3, #1
   113a2:	4313      	orrs	r3, r2
   113a4:	0019      	movs	r1, r3
   113a6:	b007      	add	sp, #28
   113a8:	bc3c      	pop	{r2, r3, r4, r5}
   113aa:	4690      	mov	r8, r2
   113ac:	4699      	mov	r9, r3
   113ae:	46a2      	mov	sl, r4
   113b0:	46ab      	mov	fp, r5
   113b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113b4:	2300      	movs	r3, #0
   113b6:	2280      	movs	r2, #128	; 0x80
   113b8:	469c      	mov	ip, r3
   113ba:	0312      	lsls	r2, r2, #12
   113bc:	4698      	mov	r8, r3
   113be:	4c03      	ldr	r4, [pc, #12]	; (113cc <__aeabi_ddiv+0x1e4>)
   113c0:	e7e0      	b.n	11384 <__aeabi_ddiv+0x19c>
   113c2:	2300      	movs	r3, #0
   113c4:	4c01      	ldr	r4, [pc, #4]	; (113cc <__aeabi_ddiv+0x1e4>)
   113c6:	2200      	movs	r2, #0
   113c8:	4698      	mov	r8, r3
   113ca:	e7db      	b.n	11384 <__aeabi_ddiv+0x19c>
   113cc:	000007ff 	.word	0x000007ff
   113d0:	fffffc01 	.word	0xfffffc01
   113d4:	000143f8 	.word	0x000143f8
   113d8:	fffffc0d 	.word	0xfffffc0d
   113dc:	800fffff 	.word	0x800fffff
   113e0:	45d9      	cmp	r9, fp
   113e2:	d900      	bls.n	113e6 <__aeabi_ddiv+0x1fe>
   113e4:	e139      	b.n	1165a <__aeabi_ddiv+0x472>
   113e6:	d100      	bne.n	113ea <__aeabi_ddiv+0x202>
   113e8:	e134      	b.n	11654 <__aeabi_ddiv+0x46c>
   113ea:	2300      	movs	r3, #0
   113ec:	4646      	mov	r6, r8
   113ee:	464d      	mov	r5, r9
   113f0:	469a      	mov	sl, r3
   113f2:	3c01      	subs	r4, #1
   113f4:	465b      	mov	r3, fp
   113f6:	0e0a      	lsrs	r2, r1, #24
   113f8:	021b      	lsls	r3, r3, #8
   113fa:	431a      	orrs	r2, r3
   113fc:	020b      	lsls	r3, r1, #8
   113fe:	0c17      	lsrs	r7, r2, #16
   11400:	9303      	str	r3, [sp, #12]
   11402:	0413      	lsls	r3, r2, #16
   11404:	0c1b      	lsrs	r3, r3, #16
   11406:	0039      	movs	r1, r7
   11408:	0028      	movs	r0, r5
   1140a:	4690      	mov	r8, r2
   1140c:	9301      	str	r3, [sp, #4]
   1140e:	f7ff f9fd 	bl	1080c <__udivsi3>
   11412:	0002      	movs	r2, r0
   11414:	9b01      	ldr	r3, [sp, #4]
   11416:	4683      	mov	fp, r0
   11418:	435a      	muls	r2, r3
   1141a:	0028      	movs	r0, r5
   1141c:	0039      	movs	r1, r7
   1141e:	4691      	mov	r9, r2
   11420:	f7ff fa7a 	bl	10918 <__aeabi_uidivmod>
   11424:	0c35      	lsrs	r5, r6, #16
   11426:	0409      	lsls	r1, r1, #16
   11428:	430d      	orrs	r5, r1
   1142a:	45a9      	cmp	r9, r5
   1142c:	d90d      	bls.n	1144a <__aeabi_ddiv+0x262>
   1142e:	465b      	mov	r3, fp
   11430:	4445      	add	r5, r8
   11432:	3b01      	subs	r3, #1
   11434:	45a8      	cmp	r8, r5
   11436:	d900      	bls.n	1143a <__aeabi_ddiv+0x252>
   11438:	e13a      	b.n	116b0 <__aeabi_ddiv+0x4c8>
   1143a:	45a9      	cmp	r9, r5
   1143c:	d800      	bhi.n	11440 <__aeabi_ddiv+0x258>
   1143e:	e137      	b.n	116b0 <__aeabi_ddiv+0x4c8>
   11440:	2302      	movs	r3, #2
   11442:	425b      	negs	r3, r3
   11444:	469c      	mov	ip, r3
   11446:	4445      	add	r5, r8
   11448:	44e3      	add	fp, ip
   1144a:	464b      	mov	r3, r9
   1144c:	1aeb      	subs	r3, r5, r3
   1144e:	0039      	movs	r1, r7
   11450:	0018      	movs	r0, r3
   11452:	9304      	str	r3, [sp, #16]
   11454:	f7ff f9da 	bl	1080c <__udivsi3>
   11458:	9b01      	ldr	r3, [sp, #4]
   1145a:	0005      	movs	r5, r0
   1145c:	4343      	muls	r3, r0
   1145e:	0039      	movs	r1, r7
   11460:	9804      	ldr	r0, [sp, #16]
   11462:	4699      	mov	r9, r3
   11464:	f7ff fa58 	bl	10918 <__aeabi_uidivmod>
   11468:	0433      	lsls	r3, r6, #16
   1146a:	0409      	lsls	r1, r1, #16
   1146c:	0c1b      	lsrs	r3, r3, #16
   1146e:	430b      	orrs	r3, r1
   11470:	4599      	cmp	r9, r3
   11472:	d909      	bls.n	11488 <__aeabi_ddiv+0x2a0>
   11474:	4443      	add	r3, r8
   11476:	1e6a      	subs	r2, r5, #1
   11478:	4598      	cmp	r8, r3
   1147a:	d900      	bls.n	1147e <__aeabi_ddiv+0x296>
   1147c:	e11a      	b.n	116b4 <__aeabi_ddiv+0x4cc>
   1147e:	4599      	cmp	r9, r3
   11480:	d800      	bhi.n	11484 <__aeabi_ddiv+0x29c>
   11482:	e117      	b.n	116b4 <__aeabi_ddiv+0x4cc>
   11484:	3d02      	subs	r5, #2
   11486:	4443      	add	r3, r8
   11488:	464a      	mov	r2, r9
   1148a:	1a9b      	subs	r3, r3, r2
   1148c:	465a      	mov	r2, fp
   1148e:	0412      	lsls	r2, r2, #16
   11490:	432a      	orrs	r2, r5
   11492:	9903      	ldr	r1, [sp, #12]
   11494:	4693      	mov	fp, r2
   11496:	0c10      	lsrs	r0, r2, #16
   11498:	0c0a      	lsrs	r2, r1, #16
   1149a:	4691      	mov	r9, r2
   1149c:	0409      	lsls	r1, r1, #16
   1149e:	465a      	mov	r2, fp
   114a0:	0c09      	lsrs	r1, r1, #16
   114a2:	464e      	mov	r6, r9
   114a4:	000d      	movs	r5, r1
   114a6:	0412      	lsls	r2, r2, #16
   114a8:	0c12      	lsrs	r2, r2, #16
   114aa:	4345      	muls	r5, r0
   114ac:	9105      	str	r1, [sp, #20]
   114ae:	4351      	muls	r1, r2
   114b0:	4372      	muls	r2, r6
   114b2:	4370      	muls	r0, r6
   114b4:	1952      	adds	r2, r2, r5
   114b6:	0c0e      	lsrs	r6, r1, #16
   114b8:	18b2      	adds	r2, r6, r2
   114ba:	4295      	cmp	r5, r2
   114bc:	d903      	bls.n	114c6 <__aeabi_ddiv+0x2de>
   114be:	2580      	movs	r5, #128	; 0x80
   114c0:	026d      	lsls	r5, r5, #9
   114c2:	46ac      	mov	ip, r5
   114c4:	4460      	add	r0, ip
   114c6:	0c15      	lsrs	r5, r2, #16
   114c8:	0409      	lsls	r1, r1, #16
   114ca:	0412      	lsls	r2, r2, #16
   114cc:	0c09      	lsrs	r1, r1, #16
   114ce:	1828      	adds	r0, r5, r0
   114d0:	1852      	adds	r2, r2, r1
   114d2:	4283      	cmp	r3, r0
   114d4:	d200      	bcs.n	114d8 <__aeabi_ddiv+0x2f0>
   114d6:	e0ce      	b.n	11676 <__aeabi_ddiv+0x48e>
   114d8:	d100      	bne.n	114dc <__aeabi_ddiv+0x2f4>
   114da:	e0c8      	b.n	1166e <__aeabi_ddiv+0x486>
   114dc:	1a1d      	subs	r5, r3, r0
   114de:	4653      	mov	r3, sl
   114e0:	1a9e      	subs	r6, r3, r2
   114e2:	45b2      	cmp	sl, r6
   114e4:	4192      	sbcs	r2, r2
   114e6:	4252      	negs	r2, r2
   114e8:	1aab      	subs	r3, r5, r2
   114ea:	469a      	mov	sl, r3
   114ec:	4598      	cmp	r8, r3
   114ee:	d100      	bne.n	114f2 <__aeabi_ddiv+0x30a>
   114f0:	e117      	b.n	11722 <__aeabi_ddiv+0x53a>
   114f2:	0039      	movs	r1, r7
   114f4:	0018      	movs	r0, r3
   114f6:	f7ff f989 	bl	1080c <__udivsi3>
   114fa:	9b01      	ldr	r3, [sp, #4]
   114fc:	0005      	movs	r5, r0
   114fe:	4343      	muls	r3, r0
   11500:	0039      	movs	r1, r7
   11502:	4650      	mov	r0, sl
   11504:	9304      	str	r3, [sp, #16]
   11506:	f7ff fa07 	bl	10918 <__aeabi_uidivmod>
   1150a:	9804      	ldr	r0, [sp, #16]
   1150c:	040b      	lsls	r3, r1, #16
   1150e:	0c31      	lsrs	r1, r6, #16
   11510:	4319      	orrs	r1, r3
   11512:	4288      	cmp	r0, r1
   11514:	d909      	bls.n	1152a <__aeabi_ddiv+0x342>
   11516:	4441      	add	r1, r8
   11518:	1e6b      	subs	r3, r5, #1
   1151a:	4588      	cmp	r8, r1
   1151c:	d900      	bls.n	11520 <__aeabi_ddiv+0x338>
   1151e:	e107      	b.n	11730 <__aeabi_ddiv+0x548>
   11520:	4288      	cmp	r0, r1
   11522:	d800      	bhi.n	11526 <__aeabi_ddiv+0x33e>
   11524:	e104      	b.n	11730 <__aeabi_ddiv+0x548>
   11526:	3d02      	subs	r5, #2
   11528:	4441      	add	r1, r8
   1152a:	9b04      	ldr	r3, [sp, #16]
   1152c:	1acb      	subs	r3, r1, r3
   1152e:	0018      	movs	r0, r3
   11530:	0039      	movs	r1, r7
   11532:	9304      	str	r3, [sp, #16]
   11534:	f7ff f96a 	bl	1080c <__udivsi3>
   11538:	9b01      	ldr	r3, [sp, #4]
   1153a:	4682      	mov	sl, r0
   1153c:	4343      	muls	r3, r0
   1153e:	0039      	movs	r1, r7
   11540:	9804      	ldr	r0, [sp, #16]
   11542:	9301      	str	r3, [sp, #4]
   11544:	f7ff f9e8 	bl	10918 <__aeabi_uidivmod>
   11548:	9801      	ldr	r0, [sp, #4]
   1154a:	040b      	lsls	r3, r1, #16
   1154c:	0431      	lsls	r1, r6, #16
   1154e:	0c09      	lsrs	r1, r1, #16
   11550:	4319      	orrs	r1, r3
   11552:	4288      	cmp	r0, r1
   11554:	d90d      	bls.n	11572 <__aeabi_ddiv+0x38a>
   11556:	4653      	mov	r3, sl
   11558:	4441      	add	r1, r8
   1155a:	3b01      	subs	r3, #1
   1155c:	4588      	cmp	r8, r1
   1155e:	d900      	bls.n	11562 <__aeabi_ddiv+0x37a>
   11560:	e0e8      	b.n	11734 <__aeabi_ddiv+0x54c>
   11562:	4288      	cmp	r0, r1
   11564:	d800      	bhi.n	11568 <__aeabi_ddiv+0x380>
   11566:	e0e5      	b.n	11734 <__aeabi_ddiv+0x54c>
   11568:	2302      	movs	r3, #2
   1156a:	425b      	negs	r3, r3
   1156c:	469c      	mov	ip, r3
   1156e:	4441      	add	r1, r8
   11570:	44e2      	add	sl, ip
   11572:	9b01      	ldr	r3, [sp, #4]
   11574:	042d      	lsls	r5, r5, #16
   11576:	1ace      	subs	r6, r1, r3
   11578:	4651      	mov	r1, sl
   1157a:	4329      	orrs	r1, r5
   1157c:	9d05      	ldr	r5, [sp, #20]
   1157e:	464f      	mov	r7, r9
   11580:	002a      	movs	r2, r5
   11582:	040b      	lsls	r3, r1, #16
   11584:	0c08      	lsrs	r0, r1, #16
   11586:	0c1b      	lsrs	r3, r3, #16
   11588:	435a      	muls	r2, r3
   1158a:	4345      	muls	r5, r0
   1158c:	437b      	muls	r3, r7
   1158e:	4378      	muls	r0, r7
   11590:	195b      	adds	r3, r3, r5
   11592:	0c17      	lsrs	r7, r2, #16
   11594:	18fb      	adds	r3, r7, r3
   11596:	429d      	cmp	r5, r3
   11598:	d903      	bls.n	115a2 <__aeabi_ddiv+0x3ba>
   1159a:	2580      	movs	r5, #128	; 0x80
   1159c:	026d      	lsls	r5, r5, #9
   1159e:	46ac      	mov	ip, r5
   115a0:	4460      	add	r0, ip
   115a2:	0c1d      	lsrs	r5, r3, #16
   115a4:	0412      	lsls	r2, r2, #16
   115a6:	041b      	lsls	r3, r3, #16
   115a8:	0c12      	lsrs	r2, r2, #16
   115aa:	1828      	adds	r0, r5, r0
   115ac:	189b      	adds	r3, r3, r2
   115ae:	4286      	cmp	r6, r0
   115b0:	d200      	bcs.n	115b4 <__aeabi_ddiv+0x3cc>
   115b2:	e093      	b.n	116dc <__aeabi_ddiv+0x4f4>
   115b4:	d100      	bne.n	115b8 <__aeabi_ddiv+0x3d0>
   115b6:	e08e      	b.n	116d6 <__aeabi_ddiv+0x4ee>
   115b8:	2301      	movs	r3, #1
   115ba:	4319      	orrs	r1, r3
   115bc:	4ba0      	ldr	r3, [pc, #640]	; (11840 <__aeabi_ddiv+0x658>)
   115be:	18e3      	adds	r3, r4, r3
   115c0:	2b00      	cmp	r3, #0
   115c2:	dc00      	bgt.n	115c6 <__aeabi_ddiv+0x3de>
   115c4:	e099      	b.n	116fa <__aeabi_ddiv+0x512>
   115c6:	074a      	lsls	r2, r1, #29
   115c8:	d000      	beq.n	115cc <__aeabi_ddiv+0x3e4>
   115ca:	e09e      	b.n	1170a <__aeabi_ddiv+0x522>
   115cc:	465a      	mov	r2, fp
   115ce:	01d2      	lsls	r2, r2, #7
   115d0:	d506      	bpl.n	115e0 <__aeabi_ddiv+0x3f8>
   115d2:	465a      	mov	r2, fp
   115d4:	4b9b      	ldr	r3, [pc, #620]	; (11844 <__aeabi_ddiv+0x65c>)
   115d6:	401a      	ands	r2, r3
   115d8:	2380      	movs	r3, #128	; 0x80
   115da:	4693      	mov	fp, r2
   115dc:	00db      	lsls	r3, r3, #3
   115de:	18e3      	adds	r3, r4, r3
   115e0:	4a99      	ldr	r2, [pc, #612]	; (11848 <__aeabi_ddiv+0x660>)
   115e2:	4293      	cmp	r3, r2
   115e4:	dd68      	ble.n	116b8 <__aeabi_ddiv+0x4d0>
   115e6:	2301      	movs	r3, #1
   115e8:	9a02      	ldr	r2, [sp, #8]
   115ea:	4c98      	ldr	r4, [pc, #608]	; (1184c <__aeabi_ddiv+0x664>)
   115ec:	401a      	ands	r2, r3
   115ee:	2300      	movs	r3, #0
   115f0:	4694      	mov	ip, r2
   115f2:	4698      	mov	r8, r3
   115f4:	2200      	movs	r2, #0
   115f6:	e6c5      	b.n	11384 <__aeabi_ddiv+0x19c>
   115f8:	2280      	movs	r2, #128	; 0x80
   115fa:	464b      	mov	r3, r9
   115fc:	0312      	lsls	r2, r2, #12
   115fe:	4213      	tst	r3, r2
   11600:	d00a      	beq.n	11618 <__aeabi_ddiv+0x430>
   11602:	465b      	mov	r3, fp
   11604:	4213      	tst	r3, r2
   11606:	d106      	bne.n	11616 <__aeabi_ddiv+0x42e>
   11608:	431a      	orrs	r2, r3
   1160a:	0312      	lsls	r2, r2, #12
   1160c:	0b12      	lsrs	r2, r2, #12
   1160e:	46ac      	mov	ip, r5
   11610:	4688      	mov	r8, r1
   11612:	4c8e      	ldr	r4, [pc, #568]	; (1184c <__aeabi_ddiv+0x664>)
   11614:	e6b6      	b.n	11384 <__aeabi_ddiv+0x19c>
   11616:	464b      	mov	r3, r9
   11618:	431a      	orrs	r2, r3
   1161a:	0312      	lsls	r2, r2, #12
   1161c:	0b12      	lsrs	r2, r2, #12
   1161e:	46bc      	mov	ip, r7
   11620:	4c8a      	ldr	r4, [pc, #552]	; (1184c <__aeabi_ddiv+0x664>)
   11622:	e6af      	b.n	11384 <__aeabi_ddiv+0x19c>
   11624:	0003      	movs	r3, r0
   11626:	465a      	mov	r2, fp
   11628:	3b28      	subs	r3, #40	; 0x28
   1162a:	409a      	lsls	r2, r3
   1162c:	2300      	movs	r3, #0
   1162e:	4691      	mov	r9, r2
   11630:	4698      	mov	r8, r3
   11632:	e657      	b.n	112e4 <__aeabi_ddiv+0xfc>
   11634:	4658      	mov	r0, fp
   11636:	f001 f86f 	bl	12718 <__clzsi2>
   1163a:	3020      	adds	r0, #32
   1163c:	e640      	b.n	112c0 <__aeabi_ddiv+0xd8>
   1163e:	0003      	movs	r3, r0
   11640:	4652      	mov	r2, sl
   11642:	3b28      	subs	r3, #40	; 0x28
   11644:	409a      	lsls	r2, r3
   11646:	2100      	movs	r1, #0
   11648:	4693      	mov	fp, r2
   1164a:	e677      	b.n	1133c <__aeabi_ddiv+0x154>
   1164c:	f001 f864 	bl	12718 <__clzsi2>
   11650:	3020      	adds	r0, #32
   11652:	e65f      	b.n	11314 <__aeabi_ddiv+0x12c>
   11654:	4588      	cmp	r8, r1
   11656:	d200      	bcs.n	1165a <__aeabi_ddiv+0x472>
   11658:	e6c7      	b.n	113ea <__aeabi_ddiv+0x202>
   1165a:	464b      	mov	r3, r9
   1165c:	07de      	lsls	r6, r3, #31
   1165e:	085d      	lsrs	r5, r3, #1
   11660:	4643      	mov	r3, r8
   11662:	085b      	lsrs	r3, r3, #1
   11664:	431e      	orrs	r6, r3
   11666:	4643      	mov	r3, r8
   11668:	07db      	lsls	r3, r3, #31
   1166a:	469a      	mov	sl, r3
   1166c:	e6c2      	b.n	113f4 <__aeabi_ddiv+0x20c>
   1166e:	2500      	movs	r5, #0
   11670:	4592      	cmp	sl, r2
   11672:	d300      	bcc.n	11676 <__aeabi_ddiv+0x48e>
   11674:	e733      	b.n	114de <__aeabi_ddiv+0x2f6>
   11676:	9e03      	ldr	r6, [sp, #12]
   11678:	4659      	mov	r1, fp
   1167a:	46b4      	mov	ip, r6
   1167c:	44e2      	add	sl, ip
   1167e:	45b2      	cmp	sl, r6
   11680:	41ad      	sbcs	r5, r5
   11682:	426d      	negs	r5, r5
   11684:	4445      	add	r5, r8
   11686:	18eb      	adds	r3, r5, r3
   11688:	3901      	subs	r1, #1
   1168a:	4598      	cmp	r8, r3
   1168c:	d207      	bcs.n	1169e <__aeabi_ddiv+0x4b6>
   1168e:	4298      	cmp	r0, r3
   11690:	d900      	bls.n	11694 <__aeabi_ddiv+0x4ac>
   11692:	e07f      	b.n	11794 <__aeabi_ddiv+0x5ac>
   11694:	d100      	bne.n	11698 <__aeabi_ddiv+0x4b0>
   11696:	e0bc      	b.n	11812 <__aeabi_ddiv+0x62a>
   11698:	1a1d      	subs	r5, r3, r0
   1169a:	468b      	mov	fp, r1
   1169c:	e71f      	b.n	114de <__aeabi_ddiv+0x2f6>
   1169e:	4598      	cmp	r8, r3
   116a0:	d1fa      	bne.n	11698 <__aeabi_ddiv+0x4b0>
   116a2:	9d03      	ldr	r5, [sp, #12]
   116a4:	4555      	cmp	r5, sl
   116a6:	d9f2      	bls.n	1168e <__aeabi_ddiv+0x4a6>
   116a8:	4643      	mov	r3, r8
   116aa:	468b      	mov	fp, r1
   116ac:	1a1d      	subs	r5, r3, r0
   116ae:	e716      	b.n	114de <__aeabi_ddiv+0x2f6>
   116b0:	469b      	mov	fp, r3
   116b2:	e6ca      	b.n	1144a <__aeabi_ddiv+0x262>
   116b4:	0015      	movs	r5, r2
   116b6:	e6e7      	b.n	11488 <__aeabi_ddiv+0x2a0>
   116b8:	465a      	mov	r2, fp
   116ba:	08c9      	lsrs	r1, r1, #3
   116bc:	0752      	lsls	r2, r2, #29
   116be:	430a      	orrs	r2, r1
   116c0:	055b      	lsls	r3, r3, #21
   116c2:	4690      	mov	r8, r2
   116c4:	0d5c      	lsrs	r4, r3, #21
   116c6:	465a      	mov	r2, fp
   116c8:	2301      	movs	r3, #1
   116ca:	9902      	ldr	r1, [sp, #8]
   116cc:	0252      	lsls	r2, r2, #9
   116ce:	4019      	ands	r1, r3
   116d0:	0b12      	lsrs	r2, r2, #12
   116d2:	468c      	mov	ip, r1
   116d4:	e656      	b.n	11384 <__aeabi_ddiv+0x19c>
   116d6:	2b00      	cmp	r3, #0
   116d8:	d100      	bne.n	116dc <__aeabi_ddiv+0x4f4>
   116da:	e76f      	b.n	115bc <__aeabi_ddiv+0x3d4>
   116dc:	4446      	add	r6, r8
   116de:	1e4a      	subs	r2, r1, #1
   116e0:	45b0      	cmp	r8, r6
   116e2:	d929      	bls.n	11738 <__aeabi_ddiv+0x550>
   116e4:	0011      	movs	r1, r2
   116e6:	4286      	cmp	r6, r0
   116e8:	d000      	beq.n	116ec <__aeabi_ddiv+0x504>
   116ea:	e765      	b.n	115b8 <__aeabi_ddiv+0x3d0>
   116ec:	9a03      	ldr	r2, [sp, #12]
   116ee:	4293      	cmp	r3, r2
   116f0:	d000      	beq.n	116f4 <__aeabi_ddiv+0x50c>
   116f2:	e761      	b.n	115b8 <__aeabi_ddiv+0x3d0>
   116f4:	e762      	b.n	115bc <__aeabi_ddiv+0x3d4>
   116f6:	2101      	movs	r1, #1
   116f8:	4249      	negs	r1, r1
   116fa:	2001      	movs	r0, #1
   116fc:	1ac2      	subs	r2, r0, r3
   116fe:	2a38      	cmp	r2, #56	; 0x38
   11700:	dd21      	ble.n	11746 <__aeabi_ddiv+0x55e>
   11702:	9b02      	ldr	r3, [sp, #8]
   11704:	4003      	ands	r3, r0
   11706:	469c      	mov	ip, r3
   11708:	e638      	b.n	1137c <__aeabi_ddiv+0x194>
   1170a:	220f      	movs	r2, #15
   1170c:	400a      	ands	r2, r1
   1170e:	2a04      	cmp	r2, #4
   11710:	d100      	bne.n	11714 <__aeabi_ddiv+0x52c>
   11712:	e75b      	b.n	115cc <__aeabi_ddiv+0x3e4>
   11714:	000a      	movs	r2, r1
   11716:	1d11      	adds	r1, r2, #4
   11718:	4291      	cmp	r1, r2
   1171a:	4192      	sbcs	r2, r2
   1171c:	4252      	negs	r2, r2
   1171e:	4493      	add	fp, r2
   11720:	e754      	b.n	115cc <__aeabi_ddiv+0x3e4>
   11722:	4b47      	ldr	r3, [pc, #284]	; (11840 <__aeabi_ddiv+0x658>)
   11724:	18e3      	adds	r3, r4, r3
   11726:	2b00      	cmp	r3, #0
   11728:	dde5      	ble.n	116f6 <__aeabi_ddiv+0x50e>
   1172a:	2201      	movs	r2, #1
   1172c:	4252      	negs	r2, r2
   1172e:	e7f2      	b.n	11716 <__aeabi_ddiv+0x52e>
   11730:	001d      	movs	r5, r3
   11732:	e6fa      	b.n	1152a <__aeabi_ddiv+0x342>
   11734:	469a      	mov	sl, r3
   11736:	e71c      	b.n	11572 <__aeabi_ddiv+0x38a>
   11738:	42b0      	cmp	r0, r6
   1173a:	d839      	bhi.n	117b0 <__aeabi_ddiv+0x5c8>
   1173c:	d06e      	beq.n	1181c <__aeabi_ddiv+0x634>
   1173e:	0011      	movs	r1, r2
   11740:	e73a      	b.n	115b8 <__aeabi_ddiv+0x3d0>
   11742:	9302      	str	r3, [sp, #8]
   11744:	e73a      	b.n	115bc <__aeabi_ddiv+0x3d4>
   11746:	2a1f      	cmp	r2, #31
   11748:	dc3c      	bgt.n	117c4 <__aeabi_ddiv+0x5dc>
   1174a:	2320      	movs	r3, #32
   1174c:	1a9b      	subs	r3, r3, r2
   1174e:	000c      	movs	r4, r1
   11750:	4658      	mov	r0, fp
   11752:	4099      	lsls	r1, r3
   11754:	4098      	lsls	r0, r3
   11756:	1e4b      	subs	r3, r1, #1
   11758:	4199      	sbcs	r1, r3
   1175a:	465b      	mov	r3, fp
   1175c:	40d4      	lsrs	r4, r2
   1175e:	40d3      	lsrs	r3, r2
   11760:	4320      	orrs	r0, r4
   11762:	4308      	orrs	r0, r1
   11764:	001a      	movs	r2, r3
   11766:	0743      	lsls	r3, r0, #29
   11768:	d009      	beq.n	1177e <__aeabi_ddiv+0x596>
   1176a:	230f      	movs	r3, #15
   1176c:	4003      	ands	r3, r0
   1176e:	2b04      	cmp	r3, #4
   11770:	d005      	beq.n	1177e <__aeabi_ddiv+0x596>
   11772:	0001      	movs	r1, r0
   11774:	1d08      	adds	r0, r1, #4
   11776:	4288      	cmp	r0, r1
   11778:	419b      	sbcs	r3, r3
   1177a:	425b      	negs	r3, r3
   1177c:	18d2      	adds	r2, r2, r3
   1177e:	0213      	lsls	r3, r2, #8
   11780:	d53a      	bpl.n	117f8 <__aeabi_ddiv+0x610>
   11782:	2301      	movs	r3, #1
   11784:	9a02      	ldr	r2, [sp, #8]
   11786:	2401      	movs	r4, #1
   11788:	401a      	ands	r2, r3
   1178a:	2300      	movs	r3, #0
   1178c:	4694      	mov	ip, r2
   1178e:	4698      	mov	r8, r3
   11790:	2200      	movs	r2, #0
   11792:	e5f7      	b.n	11384 <__aeabi_ddiv+0x19c>
   11794:	2102      	movs	r1, #2
   11796:	4249      	negs	r1, r1
   11798:	468c      	mov	ip, r1
   1179a:	9d03      	ldr	r5, [sp, #12]
   1179c:	44e3      	add	fp, ip
   1179e:	46ac      	mov	ip, r5
   117a0:	44e2      	add	sl, ip
   117a2:	45aa      	cmp	sl, r5
   117a4:	41ad      	sbcs	r5, r5
   117a6:	426d      	negs	r5, r5
   117a8:	4445      	add	r5, r8
   117aa:	18ed      	adds	r5, r5, r3
   117ac:	1a2d      	subs	r5, r5, r0
   117ae:	e696      	b.n	114de <__aeabi_ddiv+0x2f6>
   117b0:	1e8a      	subs	r2, r1, #2
   117b2:	9903      	ldr	r1, [sp, #12]
   117b4:	004d      	lsls	r5, r1, #1
   117b6:	428d      	cmp	r5, r1
   117b8:	4189      	sbcs	r1, r1
   117ba:	4249      	negs	r1, r1
   117bc:	4441      	add	r1, r8
   117be:	1876      	adds	r6, r6, r1
   117c0:	9503      	str	r5, [sp, #12]
   117c2:	e78f      	b.n	116e4 <__aeabi_ddiv+0x4fc>
   117c4:	201f      	movs	r0, #31
   117c6:	4240      	negs	r0, r0
   117c8:	1ac3      	subs	r3, r0, r3
   117ca:	4658      	mov	r0, fp
   117cc:	40d8      	lsrs	r0, r3
   117ce:	0003      	movs	r3, r0
   117d0:	2a20      	cmp	r2, #32
   117d2:	d028      	beq.n	11826 <__aeabi_ddiv+0x63e>
   117d4:	2040      	movs	r0, #64	; 0x40
   117d6:	465d      	mov	r5, fp
   117d8:	1a82      	subs	r2, r0, r2
   117da:	4095      	lsls	r5, r2
   117dc:	4329      	orrs	r1, r5
   117de:	1e4a      	subs	r2, r1, #1
   117e0:	4191      	sbcs	r1, r2
   117e2:	4319      	orrs	r1, r3
   117e4:	2307      	movs	r3, #7
   117e6:	2200      	movs	r2, #0
   117e8:	400b      	ands	r3, r1
   117ea:	d009      	beq.n	11800 <__aeabi_ddiv+0x618>
   117ec:	230f      	movs	r3, #15
   117ee:	2200      	movs	r2, #0
   117f0:	400b      	ands	r3, r1
   117f2:	0008      	movs	r0, r1
   117f4:	2b04      	cmp	r3, #4
   117f6:	d1bd      	bne.n	11774 <__aeabi_ddiv+0x58c>
   117f8:	0001      	movs	r1, r0
   117fa:	0753      	lsls	r3, r2, #29
   117fc:	0252      	lsls	r2, r2, #9
   117fe:	0b12      	lsrs	r2, r2, #12
   11800:	08c9      	lsrs	r1, r1, #3
   11802:	4319      	orrs	r1, r3
   11804:	2301      	movs	r3, #1
   11806:	4688      	mov	r8, r1
   11808:	9902      	ldr	r1, [sp, #8]
   1180a:	2400      	movs	r4, #0
   1180c:	4019      	ands	r1, r3
   1180e:	468c      	mov	ip, r1
   11810:	e5b8      	b.n	11384 <__aeabi_ddiv+0x19c>
   11812:	4552      	cmp	r2, sl
   11814:	d8be      	bhi.n	11794 <__aeabi_ddiv+0x5ac>
   11816:	468b      	mov	fp, r1
   11818:	2500      	movs	r5, #0
   1181a:	e660      	b.n	114de <__aeabi_ddiv+0x2f6>
   1181c:	9d03      	ldr	r5, [sp, #12]
   1181e:	429d      	cmp	r5, r3
   11820:	d3c6      	bcc.n	117b0 <__aeabi_ddiv+0x5c8>
   11822:	0011      	movs	r1, r2
   11824:	e762      	b.n	116ec <__aeabi_ddiv+0x504>
   11826:	2500      	movs	r5, #0
   11828:	e7d8      	b.n	117dc <__aeabi_ddiv+0x5f4>
   1182a:	2280      	movs	r2, #128	; 0x80
   1182c:	465b      	mov	r3, fp
   1182e:	0312      	lsls	r2, r2, #12
   11830:	431a      	orrs	r2, r3
   11832:	9b01      	ldr	r3, [sp, #4]
   11834:	0312      	lsls	r2, r2, #12
   11836:	0b12      	lsrs	r2, r2, #12
   11838:	469c      	mov	ip, r3
   1183a:	4688      	mov	r8, r1
   1183c:	4c03      	ldr	r4, [pc, #12]	; (1184c <__aeabi_ddiv+0x664>)
   1183e:	e5a1      	b.n	11384 <__aeabi_ddiv+0x19c>
   11840:	000003ff 	.word	0x000003ff
   11844:	feffffff 	.word	0xfeffffff
   11848:	000007fe 	.word	0x000007fe
   1184c:	000007ff 	.word	0x000007ff

00011850 <__eqdf2>:
   11850:	b5f0      	push	{r4, r5, r6, r7, lr}
   11852:	464f      	mov	r7, r9
   11854:	4646      	mov	r6, r8
   11856:	46d6      	mov	lr, sl
   11858:	005c      	lsls	r4, r3, #1
   1185a:	b5c0      	push	{r6, r7, lr}
   1185c:	031f      	lsls	r7, r3, #12
   1185e:	0fdb      	lsrs	r3, r3, #31
   11860:	469a      	mov	sl, r3
   11862:	4b17      	ldr	r3, [pc, #92]	; (118c0 <__eqdf2+0x70>)
   11864:	030e      	lsls	r6, r1, #12
   11866:	004d      	lsls	r5, r1, #1
   11868:	4684      	mov	ip, r0
   1186a:	4680      	mov	r8, r0
   1186c:	0b36      	lsrs	r6, r6, #12
   1186e:	0d6d      	lsrs	r5, r5, #21
   11870:	0fc9      	lsrs	r1, r1, #31
   11872:	4691      	mov	r9, r2
   11874:	0b3f      	lsrs	r7, r7, #12
   11876:	0d64      	lsrs	r4, r4, #21
   11878:	2001      	movs	r0, #1
   1187a:	429d      	cmp	r5, r3
   1187c:	d008      	beq.n	11890 <__eqdf2+0x40>
   1187e:	429c      	cmp	r4, r3
   11880:	d001      	beq.n	11886 <__eqdf2+0x36>
   11882:	42a5      	cmp	r5, r4
   11884:	d00b      	beq.n	1189e <__eqdf2+0x4e>
   11886:	bc1c      	pop	{r2, r3, r4}
   11888:	4690      	mov	r8, r2
   1188a:	4699      	mov	r9, r3
   1188c:	46a2      	mov	sl, r4
   1188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11890:	4663      	mov	r3, ip
   11892:	4333      	orrs	r3, r6
   11894:	d1f7      	bne.n	11886 <__eqdf2+0x36>
   11896:	42ac      	cmp	r4, r5
   11898:	d1f5      	bne.n	11886 <__eqdf2+0x36>
   1189a:	433a      	orrs	r2, r7
   1189c:	d1f3      	bne.n	11886 <__eqdf2+0x36>
   1189e:	2001      	movs	r0, #1
   118a0:	42be      	cmp	r6, r7
   118a2:	d1f0      	bne.n	11886 <__eqdf2+0x36>
   118a4:	45c8      	cmp	r8, r9
   118a6:	d1ee      	bne.n	11886 <__eqdf2+0x36>
   118a8:	4551      	cmp	r1, sl
   118aa:	d007      	beq.n	118bc <__eqdf2+0x6c>
   118ac:	2d00      	cmp	r5, #0
   118ae:	d1ea      	bne.n	11886 <__eqdf2+0x36>
   118b0:	4663      	mov	r3, ip
   118b2:	431e      	orrs	r6, r3
   118b4:	0030      	movs	r0, r6
   118b6:	1e46      	subs	r6, r0, #1
   118b8:	41b0      	sbcs	r0, r6
   118ba:	e7e4      	b.n	11886 <__eqdf2+0x36>
   118bc:	2000      	movs	r0, #0
   118be:	e7e2      	b.n	11886 <__eqdf2+0x36>
   118c0:	000007ff 	.word	0x000007ff

000118c4 <__gedf2>:
   118c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   118c6:	4645      	mov	r5, r8
   118c8:	46de      	mov	lr, fp
   118ca:	4657      	mov	r7, sl
   118cc:	464e      	mov	r6, r9
   118ce:	b5e0      	push	{r5, r6, r7, lr}
   118d0:	031f      	lsls	r7, r3, #12
   118d2:	0b3d      	lsrs	r5, r7, #12
   118d4:	4f2c      	ldr	r7, [pc, #176]	; (11988 <__gedf2+0xc4>)
   118d6:	030e      	lsls	r6, r1, #12
   118d8:	004c      	lsls	r4, r1, #1
   118da:	46ab      	mov	fp, r5
   118dc:	005d      	lsls	r5, r3, #1
   118de:	4684      	mov	ip, r0
   118e0:	0b36      	lsrs	r6, r6, #12
   118e2:	0d64      	lsrs	r4, r4, #21
   118e4:	0fc9      	lsrs	r1, r1, #31
   118e6:	4690      	mov	r8, r2
   118e8:	0d6d      	lsrs	r5, r5, #21
   118ea:	0fdb      	lsrs	r3, r3, #31
   118ec:	42bc      	cmp	r4, r7
   118ee:	d02a      	beq.n	11946 <__gedf2+0x82>
   118f0:	4f25      	ldr	r7, [pc, #148]	; (11988 <__gedf2+0xc4>)
   118f2:	42bd      	cmp	r5, r7
   118f4:	d02d      	beq.n	11952 <__gedf2+0x8e>
   118f6:	2c00      	cmp	r4, #0
   118f8:	d10f      	bne.n	1191a <__gedf2+0x56>
   118fa:	4330      	orrs	r0, r6
   118fc:	0007      	movs	r7, r0
   118fe:	4681      	mov	r9, r0
   11900:	4278      	negs	r0, r7
   11902:	4178      	adcs	r0, r7
   11904:	b2c0      	uxtb	r0, r0
   11906:	2d00      	cmp	r5, #0
   11908:	d117      	bne.n	1193a <__gedf2+0x76>
   1190a:	465f      	mov	r7, fp
   1190c:	433a      	orrs	r2, r7
   1190e:	d114      	bne.n	1193a <__gedf2+0x76>
   11910:	464b      	mov	r3, r9
   11912:	2000      	movs	r0, #0
   11914:	2b00      	cmp	r3, #0
   11916:	d00a      	beq.n	1192e <__gedf2+0x6a>
   11918:	e006      	b.n	11928 <__gedf2+0x64>
   1191a:	2d00      	cmp	r5, #0
   1191c:	d102      	bne.n	11924 <__gedf2+0x60>
   1191e:	4658      	mov	r0, fp
   11920:	4302      	orrs	r2, r0
   11922:	d001      	beq.n	11928 <__gedf2+0x64>
   11924:	4299      	cmp	r1, r3
   11926:	d018      	beq.n	1195a <__gedf2+0x96>
   11928:	4248      	negs	r0, r1
   1192a:	2101      	movs	r1, #1
   1192c:	4308      	orrs	r0, r1
   1192e:	bc3c      	pop	{r2, r3, r4, r5}
   11930:	4690      	mov	r8, r2
   11932:	4699      	mov	r9, r3
   11934:	46a2      	mov	sl, r4
   11936:	46ab      	mov	fp, r5
   11938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1193a:	2800      	cmp	r0, #0
   1193c:	d0f2      	beq.n	11924 <__gedf2+0x60>
   1193e:	2001      	movs	r0, #1
   11940:	3b01      	subs	r3, #1
   11942:	4318      	orrs	r0, r3
   11944:	e7f3      	b.n	1192e <__gedf2+0x6a>
   11946:	0037      	movs	r7, r6
   11948:	4307      	orrs	r7, r0
   1194a:	d0d1      	beq.n	118f0 <__gedf2+0x2c>
   1194c:	2002      	movs	r0, #2
   1194e:	4240      	negs	r0, r0
   11950:	e7ed      	b.n	1192e <__gedf2+0x6a>
   11952:	465f      	mov	r7, fp
   11954:	4317      	orrs	r7, r2
   11956:	d0ce      	beq.n	118f6 <__gedf2+0x32>
   11958:	e7f8      	b.n	1194c <__gedf2+0x88>
   1195a:	42ac      	cmp	r4, r5
   1195c:	dce4      	bgt.n	11928 <__gedf2+0x64>
   1195e:	da03      	bge.n	11968 <__gedf2+0xa4>
   11960:	1e48      	subs	r0, r1, #1
   11962:	2101      	movs	r1, #1
   11964:	4308      	orrs	r0, r1
   11966:	e7e2      	b.n	1192e <__gedf2+0x6a>
   11968:	455e      	cmp	r6, fp
   1196a:	d8dd      	bhi.n	11928 <__gedf2+0x64>
   1196c:	d006      	beq.n	1197c <__gedf2+0xb8>
   1196e:	2000      	movs	r0, #0
   11970:	455e      	cmp	r6, fp
   11972:	d2dc      	bcs.n	1192e <__gedf2+0x6a>
   11974:	2301      	movs	r3, #1
   11976:	1e48      	subs	r0, r1, #1
   11978:	4318      	orrs	r0, r3
   1197a:	e7d8      	b.n	1192e <__gedf2+0x6a>
   1197c:	45c4      	cmp	ip, r8
   1197e:	d8d3      	bhi.n	11928 <__gedf2+0x64>
   11980:	2000      	movs	r0, #0
   11982:	45c4      	cmp	ip, r8
   11984:	d3f6      	bcc.n	11974 <__gedf2+0xb0>
   11986:	e7d2      	b.n	1192e <__gedf2+0x6a>
   11988:	000007ff 	.word	0x000007ff

0001198c <__ledf2>:
   1198c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1198e:	464e      	mov	r6, r9
   11990:	4645      	mov	r5, r8
   11992:	46de      	mov	lr, fp
   11994:	4657      	mov	r7, sl
   11996:	005c      	lsls	r4, r3, #1
   11998:	b5e0      	push	{r5, r6, r7, lr}
   1199a:	031f      	lsls	r7, r3, #12
   1199c:	0fdb      	lsrs	r3, r3, #31
   1199e:	4699      	mov	r9, r3
   119a0:	4b2a      	ldr	r3, [pc, #168]	; (11a4c <__ledf2+0xc0>)
   119a2:	030e      	lsls	r6, r1, #12
   119a4:	004d      	lsls	r5, r1, #1
   119a6:	0fc9      	lsrs	r1, r1, #31
   119a8:	4684      	mov	ip, r0
   119aa:	0b36      	lsrs	r6, r6, #12
   119ac:	0d6d      	lsrs	r5, r5, #21
   119ae:	468b      	mov	fp, r1
   119b0:	4690      	mov	r8, r2
   119b2:	0b3f      	lsrs	r7, r7, #12
   119b4:	0d64      	lsrs	r4, r4, #21
   119b6:	429d      	cmp	r5, r3
   119b8:	d020      	beq.n	119fc <__ledf2+0x70>
   119ba:	4b24      	ldr	r3, [pc, #144]	; (11a4c <__ledf2+0xc0>)
   119bc:	429c      	cmp	r4, r3
   119be:	d022      	beq.n	11a06 <__ledf2+0x7a>
   119c0:	2d00      	cmp	r5, #0
   119c2:	d112      	bne.n	119ea <__ledf2+0x5e>
   119c4:	4330      	orrs	r0, r6
   119c6:	4243      	negs	r3, r0
   119c8:	4143      	adcs	r3, r0
   119ca:	b2db      	uxtb	r3, r3
   119cc:	2c00      	cmp	r4, #0
   119ce:	d01f      	beq.n	11a10 <__ledf2+0x84>
   119d0:	2b00      	cmp	r3, #0
   119d2:	d00c      	beq.n	119ee <__ledf2+0x62>
   119d4:	464b      	mov	r3, r9
   119d6:	2001      	movs	r0, #1
   119d8:	3b01      	subs	r3, #1
   119da:	4303      	orrs	r3, r0
   119dc:	0018      	movs	r0, r3
   119de:	bc3c      	pop	{r2, r3, r4, r5}
   119e0:	4690      	mov	r8, r2
   119e2:	4699      	mov	r9, r3
   119e4:	46a2      	mov	sl, r4
   119e6:	46ab      	mov	fp, r5
   119e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119ea:	2c00      	cmp	r4, #0
   119ec:	d016      	beq.n	11a1c <__ledf2+0x90>
   119ee:	45cb      	cmp	fp, r9
   119f0:	d017      	beq.n	11a22 <__ledf2+0x96>
   119f2:	465b      	mov	r3, fp
   119f4:	4259      	negs	r1, r3
   119f6:	2301      	movs	r3, #1
   119f8:	430b      	orrs	r3, r1
   119fa:	e7ef      	b.n	119dc <__ledf2+0x50>
   119fc:	0031      	movs	r1, r6
   119fe:	2302      	movs	r3, #2
   11a00:	4301      	orrs	r1, r0
   11a02:	d1eb      	bne.n	119dc <__ledf2+0x50>
   11a04:	e7d9      	b.n	119ba <__ledf2+0x2e>
   11a06:	0039      	movs	r1, r7
   11a08:	2302      	movs	r3, #2
   11a0a:	4311      	orrs	r1, r2
   11a0c:	d1e6      	bne.n	119dc <__ledf2+0x50>
   11a0e:	e7d7      	b.n	119c0 <__ledf2+0x34>
   11a10:	433a      	orrs	r2, r7
   11a12:	d1dd      	bne.n	119d0 <__ledf2+0x44>
   11a14:	2300      	movs	r3, #0
   11a16:	2800      	cmp	r0, #0
   11a18:	d0e0      	beq.n	119dc <__ledf2+0x50>
   11a1a:	e7ea      	b.n	119f2 <__ledf2+0x66>
   11a1c:	433a      	orrs	r2, r7
   11a1e:	d1e6      	bne.n	119ee <__ledf2+0x62>
   11a20:	e7e7      	b.n	119f2 <__ledf2+0x66>
   11a22:	42a5      	cmp	r5, r4
   11a24:	dce5      	bgt.n	119f2 <__ledf2+0x66>
   11a26:	db05      	blt.n	11a34 <__ledf2+0xa8>
   11a28:	42be      	cmp	r6, r7
   11a2a:	d8e2      	bhi.n	119f2 <__ledf2+0x66>
   11a2c:	d007      	beq.n	11a3e <__ledf2+0xb2>
   11a2e:	2300      	movs	r3, #0
   11a30:	42be      	cmp	r6, r7
   11a32:	d2d3      	bcs.n	119dc <__ledf2+0x50>
   11a34:	4659      	mov	r1, fp
   11a36:	2301      	movs	r3, #1
   11a38:	3901      	subs	r1, #1
   11a3a:	430b      	orrs	r3, r1
   11a3c:	e7ce      	b.n	119dc <__ledf2+0x50>
   11a3e:	45c4      	cmp	ip, r8
   11a40:	d8d7      	bhi.n	119f2 <__ledf2+0x66>
   11a42:	2300      	movs	r3, #0
   11a44:	45c4      	cmp	ip, r8
   11a46:	d3f5      	bcc.n	11a34 <__ledf2+0xa8>
   11a48:	e7c8      	b.n	119dc <__ledf2+0x50>
   11a4a:	46c0      	nop			; (mov r8, r8)
   11a4c:	000007ff 	.word	0x000007ff

00011a50 <__aeabi_dmul>:
   11a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a52:	4657      	mov	r7, sl
   11a54:	4645      	mov	r5, r8
   11a56:	46de      	mov	lr, fp
   11a58:	464e      	mov	r6, r9
   11a5a:	b5e0      	push	{r5, r6, r7, lr}
   11a5c:	030c      	lsls	r4, r1, #12
   11a5e:	4698      	mov	r8, r3
   11a60:	004e      	lsls	r6, r1, #1
   11a62:	0b23      	lsrs	r3, r4, #12
   11a64:	b087      	sub	sp, #28
   11a66:	0007      	movs	r7, r0
   11a68:	4692      	mov	sl, r2
   11a6a:	469b      	mov	fp, r3
   11a6c:	0d76      	lsrs	r6, r6, #21
   11a6e:	0fcd      	lsrs	r5, r1, #31
   11a70:	2e00      	cmp	r6, #0
   11a72:	d06b      	beq.n	11b4c <__aeabi_dmul+0xfc>
   11a74:	4b6d      	ldr	r3, [pc, #436]	; (11c2c <__aeabi_dmul+0x1dc>)
   11a76:	429e      	cmp	r6, r3
   11a78:	d035      	beq.n	11ae6 <__aeabi_dmul+0x96>
   11a7a:	2480      	movs	r4, #128	; 0x80
   11a7c:	465b      	mov	r3, fp
   11a7e:	0f42      	lsrs	r2, r0, #29
   11a80:	0424      	lsls	r4, r4, #16
   11a82:	00db      	lsls	r3, r3, #3
   11a84:	4314      	orrs	r4, r2
   11a86:	431c      	orrs	r4, r3
   11a88:	00c3      	lsls	r3, r0, #3
   11a8a:	4699      	mov	r9, r3
   11a8c:	4b68      	ldr	r3, [pc, #416]	; (11c30 <__aeabi_dmul+0x1e0>)
   11a8e:	46a3      	mov	fp, r4
   11a90:	469c      	mov	ip, r3
   11a92:	2300      	movs	r3, #0
   11a94:	2700      	movs	r7, #0
   11a96:	4466      	add	r6, ip
   11a98:	9302      	str	r3, [sp, #8]
   11a9a:	4643      	mov	r3, r8
   11a9c:	031c      	lsls	r4, r3, #12
   11a9e:	005a      	lsls	r2, r3, #1
   11aa0:	0fdb      	lsrs	r3, r3, #31
   11aa2:	4650      	mov	r0, sl
   11aa4:	0b24      	lsrs	r4, r4, #12
   11aa6:	0d52      	lsrs	r2, r2, #21
   11aa8:	4698      	mov	r8, r3
   11aaa:	d100      	bne.n	11aae <__aeabi_dmul+0x5e>
   11aac:	e076      	b.n	11b9c <__aeabi_dmul+0x14c>
   11aae:	4b5f      	ldr	r3, [pc, #380]	; (11c2c <__aeabi_dmul+0x1dc>)
   11ab0:	429a      	cmp	r2, r3
   11ab2:	d06d      	beq.n	11b90 <__aeabi_dmul+0x140>
   11ab4:	2380      	movs	r3, #128	; 0x80
   11ab6:	0f41      	lsrs	r1, r0, #29
   11ab8:	041b      	lsls	r3, r3, #16
   11aba:	430b      	orrs	r3, r1
   11abc:	495c      	ldr	r1, [pc, #368]	; (11c30 <__aeabi_dmul+0x1e0>)
   11abe:	00e4      	lsls	r4, r4, #3
   11ac0:	468c      	mov	ip, r1
   11ac2:	431c      	orrs	r4, r3
   11ac4:	00c3      	lsls	r3, r0, #3
   11ac6:	2000      	movs	r0, #0
   11ac8:	4462      	add	r2, ip
   11aca:	4641      	mov	r1, r8
   11acc:	18b6      	adds	r6, r6, r2
   11ace:	4069      	eors	r1, r5
   11ad0:	1c72      	adds	r2, r6, #1
   11ad2:	9101      	str	r1, [sp, #4]
   11ad4:	4694      	mov	ip, r2
   11ad6:	4307      	orrs	r7, r0
   11ad8:	2f0f      	cmp	r7, #15
   11ada:	d900      	bls.n	11ade <__aeabi_dmul+0x8e>
   11adc:	e0b0      	b.n	11c40 <__aeabi_dmul+0x1f0>
   11ade:	4a55      	ldr	r2, [pc, #340]	; (11c34 <__aeabi_dmul+0x1e4>)
   11ae0:	00bf      	lsls	r7, r7, #2
   11ae2:	59d2      	ldr	r2, [r2, r7]
   11ae4:	4697      	mov	pc, r2
   11ae6:	465b      	mov	r3, fp
   11ae8:	4303      	orrs	r3, r0
   11aea:	4699      	mov	r9, r3
   11aec:	d000      	beq.n	11af0 <__aeabi_dmul+0xa0>
   11aee:	e087      	b.n	11c00 <__aeabi_dmul+0x1b0>
   11af0:	2300      	movs	r3, #0
   11af2:	469b      	mov	fp, r3
   11af4:	3302      	adds	r3, #2
   11af6:	2708      	movs	r7, #8
   11af8:	9302      	str	r3, [sp, #8]
   11afa:	e7ce      	b.n	11a9a <__aeabi_dmul+0x4a>
   11afc:	4642      	mov	r2, r8
   11afe:	9201      	str	r2, [sp, #4]
   11b00:	2802      	cmp	r0, #2
   11b02:	d067      	beq.n	11bd4 <__aeabi_dmul+0x184>
   11b04:	2803      	cmp	r0, #3
   11b06:	d100      	bne.n	11b0a <__aeabi_dmul+0xba>
   11b08:	e20e      	b.n	11f28 <__aeabi_dmul+0x4d8>
   11b0a:	2801      	cmp	r0, #1
   11b0c:	d000      	beq.n	11b10 <__aeabi_dmul+0xc0>
   11b0e:	e162      	b.n	11dd6 <__aeabi_dmul+0x386>
   11b10:	2300      	movs	r3, #0
   11b12:	2400      	movs	r4, #0
   11b14:	2200      	movs	r2, #0
   11b16:	4699      	mov	r9, r3
   11b18:	9901      	ldr	r1, [sp, #4]
   11b1a:	4001      	ands	r1, r0
   11b1c:	b2cd      	uxtb	r5, r1
   11b1e:	2100      	movs	r1, #0
   11b20:	0312      	lsls	r2, r2, #12
   11b22:	0d0b      	lsrs	r3, r1, #20
   11b24:	0b12      	lsrs	r2, r2, #12
   11b26:	051b      	lsls	r3, r3, #20
   11b28:	4313      	orrs	r3, r2
   11b2a:	4a43      	ldr	r2, [pc, #268]	; (11c38 <__aeabi_dmul+0x1e8>)
   11b2c:	0524      	lsls	r4, r4, #20
   11b2e:	4013      	ands	r3, r2
   11b30:	431c      	orrs	r4, r3
   11b32:	0064      	lsls	r4, r4, #1
   11b34:	07ed      	lsls	r5, r5, #31
   11b36:	0864      	lsrs	r4, r4, #1
   11b38:	432c      	orrs	r4, r5
   11b3a:	4648      	mov	r0, r9
   11b3c:	0021      	movs	r1, r4
   11b3e:	b007      	add	sp, #28
   11b40:	bc3c      	pop	{r2, r3, r4, r5}
   11b42:	4690      	mov	r8, r2
   11b44:	4699      	mov	r9, r3
   11b46:	46a2      	mov	sl, r4
   11b48:	46ab      	mov	fp, r5
   11b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b4c:	4303      	orrs	r3, r0
   11b4e:	4699      	mov	r9, r3
   11b50:	d04f      	beq.n	11bf2 <__aeabi_dmul+0x1a2>
   11b52:	465b      	mov	r3, fp
   11b54:	2b00      	cmp	r3, #0
   11b56:	d100      	bne.n	11b5a <__aeabi_dmul+0x10a>
   11b58:	e189      	b.n	11e6e <__aeabi_dmul+0x41e>
   11b5a:	4658      	mov	r0, fp
   11b5c:	f000 fddc 	bl	12718 <__clzsi2>
   11b60:	0003      	movs	r3, r0
   11b62:	3b0b      	subs	r3, #11
   11b64:	2b1c      	cmp	r3, #28
   11b66:	dd00      	ble.n	11b6a <__aeabi_dmul+0x11a>
   11b68:	e17a      	b.n	11e60 <__aeabi_dmul+0x410>
   11b6a:	221d      	movs	r2, #29
   11b6c:	1ad3      	subs	r3, r2, r3
   11b6e:	003a      	movs	r2, r7
   11b70:	0001      	movs	r1, r0
   11b72:	465c      	mov	r4, fp
   11b74:	40da      	lsrs	r2, r3
   11b76:	3908      	subs	r1, #8
   11b78:	408c      	lsls	r4, r1
   11b7a:	0013      	movs	r3, r2
   11b7c:	408f      	lsls	r7, r1
   11b7e:	4323      	orrs	r3, r4
   11b80:	469b      	mov	fp, r3
   11b82:	46b9      	mov	r9, r7
   11b84:	2300      	movs	r3, #0
   11b86:	4e2d      	ldr	r6, [pc, #180]	; (11c3c <__aeabi_dmul+0x1ec>)
   11b88:	2700      	movs	r7, #0
   11b8a:	1a36      	subs	r6, r6, r0
   11b8c:	9302      	str	r3, [sp, #8]
   11b8e:	e784      	b.n	11a9a <__aeabi_dmul+0x4a>
   11b90:	4653      	mov	r3, sl
   11b92:	4323      	orrs	r3, r4
   11b94:	d12a      	bne.n	11bec <__aeabi_dmul+0x19c>
   11b96:	2400      	movs	r4, #0
   11b98:	2002      	movs	r0, #2
   11b9a:	e796      	b.n	11aca <__aeabi_dmul+0x7a>
   11b9c:	4653      	mov	r3, sl
   11b9e:	4323      	orrs	r3, r4
   11ba0:	d020      	beq.n	11be4 <__aeabi_dmul+0x194>
   11ba2:	2c00      	cmp	r4, #0
   11ba4:	d100      	bne.n	11ba8 <__aeabi_dmul+0x158>
   11ba6:	e157      	b.n	11e58 <__aeabi_dmul+0x408>
   11ba8:	0020      	movs	r0, r4
   11baa:	f000 fdb5 	bl	12718 <__clzsi2>
   11bae:	0003      	movs	r3, r0
   11bb0:	3b0b      	subs	r3, #11
   11bb2:	2b1c      	cmp	r3, #28
   11bb4:	dd00      	ble.n	11bb8 <__aeabi_dmul+0x168>
   11bb6:	e149      	b.n	11e4c <__aeabi_dmul+0x3fc>
   11bb8:	211d      	movs	r1, #29
   11bba:	1acb      	subs	r3, r1, r3
   11bbc:	4651      	mov	r1, sl
   11bbe:	0002      	movs	r2, r0
   11bc0:	40d9      	lsrs	r1, r3
   11bc2:	4653      	mov	r3, sl
   11bc4:	3a08      	subs	r2, #8
   11bc6:	4094      	lsls	r4, r2
   11bc8:	4093      	lsls	r3, r2
   11bca:	430c      	orrs	r4, r1
   11bcc:	4a1b      	ldr	r2, [pc, #108]	; (11c3c <__aeabi_dmul+0x1ec>)
   11bce:	1a12      	subs	r2, r2, r0
   11bd0:	2000      	movs	r0, #0
   11bd2:	e77a      	b.n	11aca <__aeabi_dmul+0x7a>
   11bd4:	2501      	movs	r5, #1
   11bd6:	9b01      	ldr	r3, [sp, #4]
   11bd8:	4c14      	ldr	r4, [pc, #80]	; (11c2c <__aeabi_dmul+0x1dc>)
   11bda:	401d      	ands	r5, r3
   11bdc:	2300      	movs	r3, #0
   11bde:	2200      	movs	r2, #0
   11be0:	4699      	mov	r9, r3
   11be2:	e79c      	b.n	11b1e <__aeabi_dmul+0xce>
   11be4:	2400      	movs	r4, #0
   11be6:	2200      	movs	r2, #0
   11be8:	2001      	movs	r0, #1
   11bea:	e76e      	b.n	11aca <__aeabi_dmul+0x7a>
   11bec:	4653      	mov	r3, sl
   11bee:	2003      	movs	r0, #3
   11bf0:	e76b      	b.n	11aca <__aeabi_dmul+0x7a>
   11bf2:	2300      	movs	r3, #0
   11bf4:	469b      	mov	fp, r3
   11bf6:	3301      	adds	r3, #1
   11bf8:	2704      	movs	r7, #4
   11bfa:	2600      	movs	r6, #0
   11bfc:	9302      	str	r3, [sp, #8]
   11bfe:	e74c      	b.n	11a9a <__aeabi_dmul+0x4a>
   11c00:	2303      	movs	r3, #3
   11c02:	4681      	mov	r9, r0
   11c04:	270c      	movs	r7, #12
   11c06:	9302      	str	r3, [sp, #8]
   11c08:	e747      	b.n	11a9a <__aeabi_dmul+0x4a>
   11c0a:	2280      	movs	r2, #128	; 0x80
   11c0c:	2300      	movs	r3, #0
   11c0e:	2500      	movs	r5, #0
   11c10:	0312      	lsls	r2, r2, #12
   11c12:	4699      	mov	r9, r3
   11c14:	4c05      	ldr	r4, [pc, #20]	; (11c2c <__aeabi_dmul+0x1dc>)
   11c16:	e782      	b.n	11b1e <__aeabi_dmul+0xce>
   11c18:	465c      	mov	r4, fp
   11c1a:	464b      	mov	r3, r9
   11c1c:	9802      	ldr	r0, [sp, #8]
   11c1e:	e76f      	b.n	11b00 <__aeabi_dmul+0xb0>
   11c20:	465c      	mov	r4, fp
   11c22:	464b      	mov	r3, r9
   11c24:	9501      	str	r5, [sp, #4]
   11c26:	9802      	ldr	r0, [sp, #8]
   11c28:	e76a      	b.n	11b00 <__aeabi_dmul+0xb0>
   11c2a:	46c0      	nop			; (mov r8, r8)
   11c2c:	000007ff 	.word	0x000007ff
   11c30:	fffffc01 	.word	0xfffffc01
   11c34:	00014438 	.word	0x00014438
   11c38:	800fffff 	.word	0x800fffff
   11c3c:	fffffc0d 	.word	0xfffffc0d
   11c40:	464a      	mov	r2, r9
   11c42:	4649      	mov	r1, r9
   11c44:	0c17      	lsrs	r7, r2, #16
   11c46:	0c1a      	lsrs	r2, r3, #16
   11c48:	041b      	lsls	r3, r3, #16
   11c4a:	0c1b      	lsrs	r3, r3, #16
   11c4c:	0408      	lsls	r0, r1, #16
   11c4e:	0019      	movs	r1, r3
   11c50:	0c00      	lsrs	r0, r0, #16
   11c52:	4341      	muls	r1, r0
   11c54:	0015      	movs	r5, r2
   11c56:	4688      	mov	r8, r1
   11c58:	0019      	movs	r1, r3
   11c5a:	437d      	muls	r5, r7
   11c5c:	4379      	muls	r1, r7
   11c5e:	9503      	str	r5, [sp, #12]
   11c60:	4689      	mov	r9, r1
   11c62:	0029      	movs	r1, r5
   11c64:	0015      	movs	r5, r2
   11c66:	4345      	muls	r5, r0
   11c68:	444d      	add	r5, r9
   11c6a:	9502      	str	r5, [sp, #8]
   11c6c:	4645      	mov	r5, r8
   11c6e:	0c2d      	lsrs	r5, r5, #16
   11c70:	46aa      	mov	sl, r5
   11c72:	9d02      	ldr	r5, [sp, #8]
   11c74:	4455      	add	r5, sl
   11c76:	45a9      	cmp	r9, r5
   11c78:	d906      	bls.n	11c88 <__aeabi_dmul+0x238>
   11c7a:	468a      	mov	sl, r1
   11c7c:	2180      	movs	r1, #128	; 0x80
   11c7e:	0249      	lsls	r1, r1, #9
   11c80:	4689      	mov	r9, r1
   11c82:	44ca      	add	sl, r9
   11c84:	4651      	mov	r1, sl
   11c86:	9103      	str	r1, [sp, #12]
   11c88:	0c29      	lsrs	r1, r5, #16
   11c8a:	9104      	str	r1, [sp, #16]
   11c8c:	4641      	mov	r1, r8
   11c8e:	0409      	lsls	r1, r1, #16
   11c90:	042d      	lsls	r5, r5, #16
   11c92:	0c09      	lsrs	r1, r1, #16
   11c94:	4688      	mov	r8, r1
   11c96:	0029      	movs	r1, r5
   11c98:	0c25      	lsrs	r5, r4, #16
   11c9a:	0424      	lsls	r4, r4, #16
   11c9c:	4441      	add	r1, r8
   11c9e:	0c24      	lsrs	r4, r4, #16
   11ca0:	9105      	str	r1, [sp, #20]
   11ca2:	0021      	movs	r1, r4
   11ca4:	4341      	muls	r1, r0
   11ca6:	4688      	mov	r8, r1
   11ca8:	0021      	movs	r1, r4
   11caa:	4379      	muls	r1, r7
   11cac:	468a      	mov	sl, r1
   11cae:	4368      	muls	r0, r5
   11cb0:	4641      	mov	r1, r8
   11cb2:	4450      	add	r0, sl
   11cb4:	4681      	mov	r9, r0
   11cb6:	0c08      	lsrs	r0, r1, #16
   11cb8:	4448      	add	r0, r9
   11cba:	436f      	muls	r7, r5
   11cbc:	4582      	cmp	sl, r0
   11cbe:	d903      	bls.n	11cc8 <__aeabi_dmul+0x278>
   11cc0:	2180      	movs	r1, #128	; 0x80
   11cc2:	0249      	lsls	r1, r1, #9
   11cc4:	4689      	mov	r9, r1
   11cc6:	444f      	add	r7, r9
   11cc8:	0c01      	lsrs	r1, r0, #16
   11cca:	4689      	mov	r9, r1
   11ccc:	0039      	movs	r1, r7
   11cce:	4449      	add	r1, r9
   11cd0:	9102      	str	r1, [sp, #8]
   11cd2:	4641      	mov	r1, r8
   11cd4:	040f      	lsls	r7, r1, #16
   11cd6:	9904      	ldr	r1, [sp, #16]
   11cd8:	0c3f      	lsrs	r7, r7, #16
   11cda:	4688      	mov	r8, r1
   11cdc:	0400      	lsls	r0, r0, #16
   11cde:	19c0      	adds	r0, r0, r7
   11ce0:	4480      	add	r8, r0
   11ce2:	4641      	mov	r1, r8
   11ce4:	9104      	str	r1, [sp, #16]
   11ce6:	4659      	mov	r1, fp
   11ce8:	0c0f      	lsrs	r7, r1, #16
   11cea:	0409      	lsls	r1, r1, #16
   11cec:	0c09      	lsrs	r1, r1, #16
   11cee:	4688      	mov	r8, r1
   11cf0:	4359      	muls	r1, r3
   11cf2:	468a      	mov	sl, r1
   11cf4:	0039      	movs	r1, r7
   11cf6:	4351      	muls	r1, r2
   11cf8:	4689      	mov	r9, r1
   11cfa:	4641      	mov	r1, r8
   11cfc:	434a      	muls	r2, r1
   11cfe:	4651      	mov	r1, sl
   11d00:	0c09      	lsrs	r1, r1, #16
   11d02:	468b      	mov	fp, r1
   11d04:	437b      	muls	r3, r7
   11d06:	18d2      	adds	r2, r2, r3
   11d08:	445a      	add	r2, fp
   11d0a:	4293      	cmp	r3, r2
   11d0c:	d903      	bls.n	11d16 <__aeabi_dmul+0x2c6>
   11d0e:	2380      	movs	r3, #128	; 0x80
   11d10:	025b      	lsls	r3, r3, #9
   11d12:	469b      	mov	fp, r3
   11d14:	44d9      	add	r9, fp
   11d16:	4651      	mov	r1, sl
   11d18:	0409      	lsls	r1, r1, #16
   11d1a:	0c09      	lsrs	r1, r1, #16
   11d1c:	468a      	mov	sl, r1
   11d1e:	4641      	mov	r1, r8
   11d20:	4361      	muls	r1, r4
   11d22:	437c      	muls	r4, r7
   11d24:	0c13      	lsrs	r3, r2, #16
   11d26:	0412      	lsls	r2, r2, #16
   11d28:	444b      	add	r3, r9
   11d2a:	4452      	add	r2, sl
   11d2c:	46a1      	mov	r9, r4
   11d2e:	468a      	mov	sl, r1
   11d30:	003c      	movs	r4, r7
   11d32:	4641      	mov	r1, r8
   11d34:	436c      	muls	r4, r5
   11d36:	434d      	muls	r5, r1
   11d38:	4651      	mov	r1, sl
   11d3a:	444d      	add	r5, r9
   11d3c:	0c0f      	lsrs	r7, r1, #16
   11d3e:	197d      	adds	r5, r7, r5
   11d40:	45a9      	cmp	r9, r5
   11d42:	d903      	bls.n	11d4c <__aeabi_dmul+0x2fc>
   11d44:	2180      	movs	r1, #128	; 0x80
   11d46:	0249      	lsls	r1, r1, #9
   11d48:	4688      	mov	r8, r1
   11d4a:	4444      	add	r4, r8
   11d4c:	9f04      	ldr	r7, [sp, #16]
   11d4e:	9903      	ldr	r1, [sp, #12]
   11d50:	46b8      	mov	r8, r7
   11d52:	4441      	add	r1, r8
   11d54:	468b      	mov	fp, r1
   11d56:	4583      	cmp	fp, r0
   11d58:	4180      	sbcs	r0, r0
   11d5a:	4241      	negs	r1, r0
   11d5c:	4688      	mov	r8, r1
   11d5e:	4651      	mov	r1, sl
   11d60:	0408      	lsls	r0, r1, #16
   11d62:	042f      	lsls	r7, r5, #16
   11d64:	0c00      	lsrs	r0, r0, #16
   11d66:	183f      	adds	r7, r7, r0
   11d68:	4658      	mov	r0, fp
   11d6a:	9902      	ldr	r1, [sp, #8]
   11d6c:	1810      	adds	r0, r2, r0
   11d6e:	4689      	mov	r9, r1
   11d70:	4290      	cmp	r0, r2
   11d72:	4192      	sbcs	r2, r2
   11d74:	444f      	add	r7, r9
   11d76:	46ba      	mov	sl, r7
   11d78:	4252      	negs	r2, r2
   11d7a:	4699      	mov	r9, r3
   11d7c:	4693      	mov	fp, r2
   11d7e:	44c2      	add	sl, r8
   11d80:	44d1      	add	r9, sl
   11d82:	44cb      	add	fp, r9
   11d84:	428f      	cmp	r7, r1
   11d86:	41bf      	sbcs	r7, r7
   11d88:	45c2      	cmp	sl, r8
   11d8a:	4189      	sbcs	r1, r1
   11d8c:	4599      	cmp	r9, r3
   11d8e:	419b      	sbcs	r3, r3
   11d90:	4593      	cmp	fp, r2
   11d92:	4192      	sbcs	r2, r2
   11d94:	427f      	negs	r7, r7
   11d96:	4249      	negs	r1, r1
   11d98:	0c2d      	lsrs	r5, r5, #16
   11d9a:	4252      	negs	r2, r2
   11d9c:	430f      	orrs	r7, r1
   11d9e:	425b      	negs	r3, r3
   11da0:	4313      	orrs	r3, r2
   11da2:	197f      	adds	r7, r7, r5
   11da4:	18ff      	adds	r7, r7, r3
   11da6:	465b      	mov	r3, fp
   11da8:	193c      	adds	r4, r7, r4
   11daa:	0ddb      	lsrs	r3, r3, #23
   11dac:	9a05      	ldr	r2, [sp, #20]
   11dae:	0264      	lsls	r4, r4, #9
   11db0:	431c      	orrs	r4, r3
   11db2:	0243      	lsls	r3, r0, #9
   11db4:	4313      	orrs	r3, r2
   11db6:	1e5d      	subs	r5, r3, #1
   11db8:	41ab      	sbcs	r3, r5
   11dba:	465a      	mov	r2, fp
   11dbc:	0dc0      	lsrs	r0, r0, #23
   11dbe:	4303      	orrs	r3, r0
   11dc0:	0252      	lsls	r2, r2, #9
   11dc2:	4313      	orrs	r3, r2
   11dc4:	01e2      	lsls	r2, r4, #7
   11dc6:	d556      	bpl.n	11e76 <__aeabi_dmul+0x426>
   11dc8:	2001      	movs	r0, #1
   11dca:	085a      	lsrs	r2, r3, #1
   11dcc:	4003      	ands	r3, r0
   11dce:	4313      	orrs	r3, r2
   11dd0:	07e2      	lsls	r2, r4, #31
   11dd2:	4313      	orrs	r3, r2
   11dd4:	0864      	lsrs	r4, r4, #1
   11dd6:	485a      	ldr	r0, [pc, #360]	; (11f40 <__aeabi_dmul+0x4f0>)
   11dd8:	4460      	add	r0, ip
   11dda:	2800      	cmp	r0, #0
   11ddc:	dd4d      	ble.n	11e7a <__aeabi_dmul+0x42a>
   11dde:	075a      	lsls	r2, r3, #29
   11de0:	d009      	beq.n	11df6 <__aeabi_dmul+0x3a6>
   11de2:	220f      	movs	r2, #15
   11de4:	401a      	ands	r2, r3
   11de6:	2a04      	cmp	r2, #4
   11de8:	d005      	beq.n	11df6 <__aeabi_dmul+0x3a6>
   11dea:	1d1a      	adds	r2, r3, #4
   11dec:	429a      	cmp	r2, r3
   11dee:	419b      	sbcs	r3, r3
   11df0:	425b      	negs	r3, r3
   11df2:	18e4      	adds	r4, r4, r3
   11df4:	0013      	movs	r3, r2
   11df6:	01e2      	lsls	r2, r4, #7
   11df8:	d504      	bpl.n	11e04 <__aeabi_dmul+0x3b4>
   11dfa:	2080      	movs	r0, #128	; 0x80
   11dfc:	4a51      	ldr	r2, [pc, #324]	; (11f44 <__aeabi_dmul+0x4f4>)
   11dfe:	00c0      	lsls	r0, r0, #3
   11e00:	4014      	ands	r4, r2
   11e02:	4460      	add	r0, ip
   11e04:	4a50      	ldr	r2, [pc, #320]	; (11f48 <__aeabi_dmul+0x4f8>)
   11e06:	4290      	cmp	r0, r2
   11e08:	dd00      	ble.n	11e0c <__aeabi_dmul+0x3bc>
   11e0a:	e6e3      	b.n	11bd4 <__aeabi_dmul+0x184>
   11e0c:	2501      	movs	r5, #1
   11e0e:	08db      	lsrs	r3, r3, #3
   11e10:	0762      	lsls	r2, r4, #29
   11e12:	431a      	orrs	r2, r3
   11e14:	0264      	lsls	r4, r4, #9
   11e16:	9b01      	ldr	r3, [sp, #4]
   11e18:	4691      	mov	r9, r2
   11e1a:	0b22      	lsrs	r2, r4, #12
   11e1c:	0544      	lsls	r4, r0, #21
   11e1e:	0d64      	lsrs	r4, r4, #21
   11e20:	401d      	ands	r5, r3
   11e22:	e67c      	b.n	11b1e <__aeabi_dmul+0xce>
   11e24:	2280      	movs	r2, #128	; 0x80
   11e26:	4659      	mov	r1, fp
   11e28:	0312      	lsls	r2, r2, #12
   11e2a:	4211      	tst	r1, r2
   11e2c:	d008      	beq.n	11e40 <__aeabi_dmul+0x3f0>
   11e2e:	4214      	tst	r4, r2
   11e30:	d106      	bne.n	11e40 <__aeabi_dmul+0x3f0>
   11e32:	4322      	orrs	r2, r4
   11e34:	0312      	lsls	r2, r2, #12
   11e36:	0b12      	lsrs	r2, r2, #12
   11e38:	4645      	mov	r5, r8
   11e3a:	4699      	mov	r9, r3
   11e3c:	4c43      	ldr	r4, [pc, #268]	; (11f4c <__aeabi_dmul+0x4fc>)
   11e3e:	e66e      	b.n	11b1e <__aeabi_dmul+0xce>
   11e40:	465b      	mov	r3, fp
   11e42:	431a      	orrs	r2, r3
   11e44:	0312      	lsls	r2, r2, #12
   11e46:	0b12      	lsrs	r2, r2, #12
   11e48:	4c40      	ldr	r4, [pc, #256]	; (11f4c <__aeabi_dmul+0x4fc>)
   11e4a:	e668      	b.n	11b1e <__aeabi_dmul+0xce>
   11e4c:	0003      	movs	r3, r0
   11e4e:	4654      	mov	r4, sl
   11e50:	3b28      	subs	r3, #40	; 0x28
   11e52:	409c      	lsls	r4, r3
   11e54:	2300      	movs	r3, #0
   11e56:	e6b9      	b.n	11bcc <__aeabi_dmul+0x17c>
   11e58:	f000 fc5e 	bl	12718 <__clzsi2>
   11e5c:	3020      	adds	r0, #32
   11e5e:	e6a6      	b.n	11bae <__aeabi_dmul+0x15e>
   11e60:	0003      	movs	r3, r0
   11e62:	3b28      	subs	r3, #40	; 0x28
   11e64:	409f      	lsls	r7, r3
   11e66:	2300      	movs	r3, #0
   11e68:	46bb      	mov	fp, r7
   11e6a:	4699      	mov	r9, r3
   11e6c:	e68a      	b.n	11b84 <__aeabi_dmul+0x134>
   11e6e:	f000 fc53 	bl	12718 <__clzsi2>
   11e72:	3020      	adds	r0, #32
   11e74:	e674      	b.n	11b60 <__aeabi_dmul+0x110>
   11e76:	46b4      	mov	ip, r6
   11e78:	e7ad      	b.n	11dd6 <__aeabi_dmul+0x386>
   11e7a:	2501      	movs	r5, #1
   11e7c:	1a2a      	subs	r2, r5, r0
   11e7e:	2a38      	cmp	r2, #56	; 0x38
   11e80:	dd06      	ble.n	11e90 <__aeabi_dmul+0x440>
   11e82:	9b01      	ldr	r3, [sp, #4]
   11e84:	2400      	movs	r4, #0
   11e86:	401d      	ands	r5, r3
   11e88:	2300      	movs	r3, #0
   11e8a:	2200      	movs	r2, #0
   11e8c:	4699      	mov	r9, r3
   11e8e:	e646      	b.n	11b1e <__aeabi_dmul+0xce>
   11e90:	2a1f      	cmp	r2, #31
   11e92:	dc21      	bgt.n	11ed8 <__aeabi_dmul+0x488>
   11e94:	2520      	movs	r5, #32
   11e96:	0020      	movs	r0, r4
   11e98:	1aad      	subs	r5, r5, r2
   11e9a:	001e      	movs	r6, r3
   11e9c:	40ab      	lsls	r3, r5
   11e9e:	40a8      	lsls	r0, r5
   11ea0:	40d6      	lsrs	r6, r2
   11ea2:	1e5d      	subs	r5, r3, #1
   11ea4:	41ab      	sbcs	r3, r5
   11ea6:	4330      	orrs	r0, r6
   11ea8:	4318      	orrs	r0, r3
   11eaa:	40d4      	lsrs	r4, r2
   11eac:	0743      	lsls	r3, r0, #29
   11eae:	d009      	beq.n	11ec4 <__aeabi_dmul+0x474>
   11eb0:	230f      	movs	r3, #15
   11eb2:	4003      	ands	r3, r0
   11eb4:	2b04      	cmp	r3, #4
   11eb6:	d005      	beq.n	11ec4 <__aeabi_dmul+0x474>
   11eb8:	0003      	movs	r3, r0
   11eba:	1d18      	adds	r0, r3, #4
   11ebc:	4298      	cmp	r0, r3
   11ebe:	419b      	sbcs	r3, r3
   11ec0:	425b      	negs	r3, r3
   11ec2:	18e4      	adds	r4, r4, r3
   11ec4:	0223      	lsls	r3, r4, #8
   11ec6:	d521      	bpl.n	11f0c <__aeabi_dmul+0x4bc>
   11ec8:	2501      	movs	r5, #1
   11eca:	9b01      	ldr	r3, [sp, #4]
   11ecc:	2401      	movs	r4, #1
   11ece:	401d      	ands	r5, r3
   11ed0:	2300      	movs	r3, #0
   11ed2:	2200      	movs	r2, #0
   11ed4:	4699      	mov	r9, r3
   11ed6:	e622      	b.n	11b1e <__aeabi_dmul+0xce>
   11ed8:	251f      	movs	r5, #31
   11eda:	0021      	movs	r1, r4
   11edc:	426d      	negs	r5, r5
   11ede:	1a28      	subs	r0, r5, r0
   11ee0:	40c1      	lsrs	r1, r0
   11ee2:	0008      	movs	r0, r1
   11ee4:	2a20      	cmp	r2, #32
   11ee6:	d01d      	beq.n	11f24 <__aeabi_dmul+0x4d4>
   11ee8:	355f      	adds	r5, #95	; 0x5f
   11eea:	1aaa      	subs	r2, r5, r2
   11eec:	4094      	lsls	r4, r2
   11eee:	4323      	orrs	r3, r4
   11ef0:	1e5c      	subs	r4, r3, #1
   11ef2:	41a3      	sbcs	r3, r4
   11ef4:	2507      	movs	r5, #7
   11ef6:	4303      	orrs	r3, r0
   11ef8:	401d      	ands	r5, r3
   11efa:	2200      	movs	r2, #0
   11efc:	2d00      	cmp	r5, #0
   11efe:	d009      	beq.n	11f14 <__aeabi_dmul+0x4c4>
   11f00:	220f      	movs	r2, #15
   11f02:	2400      	movs	r4, #0
   11f04:	401a      	ands	r2, r3
   11f06:	0018      	movs	r0, r3
   11f08:	2a04      	cmp	r2, #4
   11f0a:	d1d6      	bne.n	11eba <__aeabi_dmul+0x46a>
   11f0c:	0003      	movs	r3, r0
   11f0e:	0765      	lsls	r5, r4, #29
   11f10:	0264      	lsls	r4, r4, #9
   11f12:	0b22      	lsrs	r2, r4, #12
   11f14:	08db      	lsrs	r3, r3, #3
   11f16:	432b      	orrs	r3, r5
   11f18:	2501      	movs	r5, #1
   11f1a:	4699      	mov	r9, r3
   11f1c:	9b01      	ldr	r3, [sp, #4]
   11f1e:	2400      	movs	r4, #0
   11f20:	401d      	ands	r5, r3
   11f22:	e5fc      	b.n	11b1e <__aeabi_dmul+0xce>
   11f24:	2400      	movs	r4, #0
   11f26:	e7e2      	b.n	11eee <__aeabi_dmul+0x49e>
   11f28:	2280      	movs	r2, #128	; 0x80
   11f2a:	2501      	movs	r5, #1
   11f2c:	0312      	lsls	r2, r2, #12
   11f2e:	4322      	orrs	r2, r4
   11f30:	9901      	ldr	r1, [sp, #4]
   11f32:	0312      	lsls	r2, r2, #12
   11f34:	0b12      	lsrs	r2, r2, #12
   11f36:	400d      	ands	r5, r1
   11f38:	4699      	mov	r9, r3
   11f3a:	4c04      	ldr	r4, [pc, #16]	; (11f4c <__aeabi_dmul+0x4fc>)
   11f3c:	e5ef      	b.n	11b1e <__aeabi_dmul+0xce>
   11f3e:	46c0      	nop			; (mov r8, r8)
   11f40:	000003ff 	.word	0x000003ff
   11f44:	feffffff 	.word	0xfeffffff
   11f48:	000007fe 	.word	0x000007fe
   11f4c:	000007ff 	.word	0x000007ff

00011f50 <__aeabi_dsub>:
   11f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f52:	4646      	mov	r6, r8
   11f54:	46d6      	mov	lr, sl
   11f56:	464f      	mov	r7, r9
   11f58:	030c      	lsls	r4, r1, #12
   11f5a:	b5c0      	push	{r6, r7, lr}
   11f5c:	0fcd      	lsrs	r5, r1, #31
   11f5e:	004e      	lsls	r6, r1, #1
   11f60:	0a61      	lsrs	r1, r4, #9
   11f62:	0f44      	lsrs	r4, r0, #29
   11f64:	430c      	orrs	r4, r1
   11f66:	00c1      	lsls	r1, r0, #3
   11f68:	0058      	lsls	r0, r3, #1
   11f6a:	0d40      	lsrs	r0, r0, #21
   11f6c:	4684      	mov	ip, r0
   11f6e:	468a      	mov	sl, r1
   11f70:	000f      	movs	r7, r1
   11f72:	0319      	lsls	r1, r3, #12
   11f74:	0f50      	lsrs	r0, r2, #29
   11f76:	0a49      	lsrs	r1, r1, #9
   11f78:	4301      	orrs	r1, r0
   11f7a:	48c6      	ldr	r0, [pc, #792]	; (12294 <__aeabi_dsub+0x344>)
   11f7c:	0d76      	lsrs	r6, r6, #21
   11f7e:	46a8      	mov	r8, r5
   11f80:	0fdb      	lsrs	r3, r3, #31
   11f82:	00d2      	lsls	r2, r2, #3
   11f84:	4584      	cmp	ip, r0
   11f86:	d100      	bne.n	11f8a <__aeabi_dsub+0x3a>
   11f88:	e0d8      	b.n	1213c <__aeabi_dsub+0x1ec>
   11f8a:	2001      	movs	r0, #1
   11f8c:	4043      	eors	r3, r0
   11f8e:	42ab      	cmp	r3, r5
   11f90:	d100      	bne.n	11f94 <__aeabi_dsub+0x44>
   11f92:	e0a6      	b.n	120e2 <__aeabi_dsub+0x192>
   11f94:	4660      	mov	r0, ip
   11f96:	1a35      	subs	r5, r6, r0
   11f98:	2d00      	cmp	r5, #0
   11f9a:	dc00      	bgt.n	11f9e <__aeabi_dsub+0x4e>
   11f9c:	e105      	b.n	121aa <__aeabi_dsub+0x25a>
   11f9e:	2800      	cmp	r0, #0
   11fa0:	d110      	bne.n	11fc4 <__aeabi_dsub+0x74>
   11fa2:	000b      	movs	r3, r1
   11fa4:	4313      	orrs	r3, r2
   11fa6:	d100      	bne.n	11faa <__aeabi_dsub+0x5a>
   11fa8:	e0d7      	b.n	1215a <__aeabi_dsub+0x20a>
   11faa:	1e6b      	subs	r3, r5, #1
   11fac:	2b00      	cmp	r3, #0
   11fae:	d000      	beq.n	11fb2 <__aeabi_dsub+0x62>
   11fb0:	e14b      	b.n	1224a <__aeabi_dsub+0x2fa>
   11fb2:	4653      	mov	r3, sl
   11fb4:	1a9f      	subs	r7, r3, r2
   11fb6:	45ba      	cmp	sl, r7
   11fb8:	4180      	sbcs	r0, r0
   11fba:	1a64      	subs	r4, r4, r1
   11fbc:	4240      	negs	r0, r0
   11fbe:	1a24      	subs	r4, r4, r0
   11fc0:	2601      	movs	r6, #1
   11fc2:	e01e      	b.n	12002 <__aeabi_dsub+0xb2>
   11fc4:	4bb3      	ldr	r3, [pc, #716]	; (12294 <__aeabi_dsub+0x344>)
   11fc6:	429e      	cmp	r6, r3
   11fc8:	d048      	beq.n	1205c <__aeabi_dsub+0x10c>
   11fca:	2380      	movs	r3, #128	; 0x80
   11fcc:	041b      	lsls	r3, r3, #16
   11fce:	4319      	orrs	r1, r3
   11fd0:	2d38      	cmp	r5, #56	; 0x38
   11fd2:	dd00      	ble.n	11fd6 <__aeabi_dsub+0x86>
   11fd4:	e119      	b.n	1220a <__aeabi_dsub+0x2ba>
   11fd6:	2d1f      	cmp	r5, #31
   11fd8:	dd00      	ble.n	11fdc <__aeabi_dsub+0x8c>
   11fda:	e14c      	b.n	12276 <__aeabi_dsub+0x326>
   11fdc:	2320      	movs	r3, #32
   11fde:	000f      	movs	r7, r1
   11fe0:	1b5b      	subs	r3, r3, r5
   11fe2:	0010      	movs	r0, r2
   11fe4:	409a      	lsls	r2, r3
   11fe6:	409f      	lsls	r7, r3
   11fe8:	40e8      	lsrs	r0, r5
   11fea:	1e53      	subs	r3, r2, #1
   11fec:	419a      	sbcs	r2, r3
   11fee:	40e9      	lsrs	r1, r5
   11ff0:	4307      	orrs	r7, r0
   11ff2:	4317      	orrs	r7, r2
   11ff4:	4653      	mov	r3, sl
   11ff6:	1bdf      	subs	r7, r3, r7
   11ff8:	1a61      	subs	r1, r4, r1
   11ffa:	45ba      	cmp	sl, r7
   11ffc:	41a4      	sbcs	r4, r4
   11ffe:	4264      	negs	r4, r4
   12000:	1b0c      	subs	r4, r1, r4
   12002:	0223      	lsls	r3, r4, #8
   12004:	d400      	bmi.n	12008 <__aeabi_dsub+0xb8>
   12006:	e0c5      	b.n	12194 <__aeabi_dsub+0x244>
   12008:	0264      	lsls	r4, r4, #9
   1200a:	0a65      	lsrs	r5, r4, #9
   1200c:	2d00      	cmp	r5, #0
   1200e:	d100      	bne.n	12012 <__aeabi_dsub+0xc2>
   12010:	e0f6      	b.n	12200 <__aeabi_dsub+0x2b0>
   12012:	0028      	movs	r0, r5
   12014:	f000 fb80 	bl	12718 <__clzsi2>
   12018:	0003      	movs	r3, r0
   1201a:	3b08      	subs	r3, #8
   1201c:	2b1f      	cmp	r3, #31
   1201e:	dd00      	ble.n	12022 <__aeabi_dsub+0xd2>
   12020:	e0e9      	b.n	121f6 <__aeabi_dsub+0x2a6>
   12022:	2220      	movs	r2, #32
   12024:	003c      	movs	r4, r7
   12026:	1ad2      	subs	r2, r2, r3
   12028:	409d      	lsls	r5, r3
   1202a:	40d4      	lsrs	r4, r2
   1202c:	409f      	lsls	r7, r3
   1202e:	4325      	orrs	r5, r4
   12030:	429e      	cmp	r6, r3
   12032:	dd00      	ble.n	12036 <__aeabi_dsub+0xe6>
   12034:	e0db      	b.n	121ee <__aeabi_dsub+0x29e>
   12036:	1b9e      	subs	r6, r3, r6
   12038:	1c73      	adds	r3, r6, #1
   1203a:	2b1f      	cmp	r3, #31
   1203c:	dd00      	ble.n	12040 <__aeabi_dsub+0xf0>
   1203e:	e10a      	b.n	12256 <__aeabi_dsub+0x306>
   12040:	2220      	movs	r2, #32
   12042:	0038      	movs	r0, r7
   12044:	1ad2      	subs	r2, r2, r3
   12046:	0029      	movs	r1, r5
   12048:	4097      	lsls	r7, r2
   1204a:	002c      	movs	r4, r5
   1204c:	4091      	lsls	r1, r2
   1204e:	40d8      	lsrs	r0, r3
   12050:	1e7a      	subs	r2, r7, #1
   12052:	4197      	sbcs	r7, r2
   12054:	40dc      	lsrs	r4, r3
   12056:	2600      	movs	r6, #0
   12058:	4301      	orrs	r1, r0
   1205a:	430f      	orrs	r7, r1
   1205c:	077b      	lsls	r3, r7, #29
   1205e:	d009      	beq.n	12074 <__aeabi_dsub+0x124>
   12060:	230f      	movs	r3, #15
   12062:	403b      	ands	r3, r7
   12064:	2b04      	cmp	r3, #4
   12066:	d005      	beq.n	12074 <__aeabi_dsub+0x124>
   12068:	1d3b      	adds	r3, r7, #4
   1206a:	42bb      	cmp	r3, r7
   1206c:	41bf      	sbcs	r7, r7
   1206e:	427f      	negs	r7, r7
   12070:	19e4      	adds	r4, r4, r7
   12072:	001f      	movs	r7, r3
   12074:	0223      	lsls	r3, r4, #8
   12076:	d525      	bpl.n	120c4 <__aeabi_dsub+0x174>
   12078:	4b86      	ldr	r3, [pc, #536]	; (12294 <__aeabi_dsub+0x344>)
   1207a:	3601      	adds	r6, #1
   1207c:	429e      	cmp	r6, r3
   1207e:	d100      	bne.n	12082 <__aeabi_dsub+0x132>
   12080:	e0af      	b.n	121e2 <__aeabi_dsub+0x292>
   12082:	4b85      	ldr	r3, [pc, #532]	; (12298 <__aeabi_dsub+0x348>)
   12084:	2501      	movs	r5, #1
   12086:	401c      	ands	r4, r3
   12088:	4643      	mov	r3, r8
   1208a:	0762      	lsls	r2, r4, #29
   1208c:	08ff      	lsrs	r7, r7, #3
   1208e:	0264      	lsls	r4, r4, #9
   12090:	0576      	lsls	r6, r6, #21
   12092:	4317      	orrs	r7, r2
   12094:	0b24      	lsrs	r4, r4, #12
   12096:	0d76      	lsrs	r6, r6, #21
   12098:	401d      	ands	r5, r3
   1209a:	2100      	movs	r1, #0
   1209c:	0324      	lsls	r4, r4, #12
   1209e:	0b23      	lsrs	r3, r4, #12
   120a0:	0d0c      	lsrs	r4, r1, #20
   120a2:	4a7e      	ldr	r2, [pc, #504]	; (1229c <__aeabi_dsub+0x34c>)
   120a4:	0524      	lsls	r4, r4, #20
   120a6:	431c      	orrs	r4, r3
   120a8:	4014      	ands	r4, r2
   120aa:	0533      	lsls	r3, r6, #20
   120ac:	4323      	orrs	r3, r4
   120ae:	005b      	lsls	r3, r3, #1
   120b0:	07ed      	lsls	r5, r5, #31
   120b2:	085b      	lsrs	r3, r3, #1
   120b4:	432b      	orrs	r3, r5
   120b6:	0038      	movs	r0, r7
   120b8:	0019      	movs	r1, r3
   120ba:	bc1c      	pop	{r2, r3, r4}
   120bc:	4690      	mov	r8, r2
   120be:	4699      	mov	r9, r3
   120c0:	46a2      	mov	sl, r4
   120c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120c4:	2501      	movs	r5, #1
   120c6:	4643      	mov	r3, r8
   120c8:	0762      	lsls	r2, r4, #29
   120ca:	08ff      	lsrs	r7, r7, #3
   120cc:	4317      	orrs	r7, r2
   120ce:	08e4      	lsrs	r4, r4, #3
   120d0:	401d      	ands	r5, r3
   120d2:	4b70      	ldr	r3, [pc, #448]	; (12294 <__aeabi_dsub+0x344>)
   120d4:	429e      	cmp	r6, r3
   120d6:	d036      	beq.n	12146 <__aeabi_dsub+0x1f6>
   120d8:	0324      	lsls	r4, r4, #12
   120da:	0576      	lsls	r6, r6, #21
   120dc:	0b24      	lsrs	r4, r4, #12
   120de:	0d76      	lsrs	r6, r6, #21
   120e0:	e7db      	b.n	1209a <__aeabi_dsub+0x14a>
   120e2:	4663      	mov	r3, ip
   120e4:	1af3      	subs	r3, r6, r3
   120e6:	2b00      	cmp	r3, #0
   120e8:	dc00      	bgt.n	120ec <__aeabi_dsub+0x19c>
   120ea:	e094      	b.n	12216 <__aeabi_dsub+0x2c6>
   120ec:	4660      	mov	r0, ip
   120ee:	2800      	cmp	r0, #0
   120f0:	d035      	beq.n	1215e <__aeabi_dsub+0x20e>
   120f2:	4868      	ldr	r0, [pc, #416]	; (12294 <__aeabi_dsub+0x344>)
   120f4:	4286      	cmp	r6, r0
   120f6:	d0b1      	beq.n	1205c <__aeabi_dsub+0x10c>
   120f8:	2780      	movs	r7, #128	; 0x80
   120fa:	043f      	lsls	r7, r7, #16
   120fc:	4339      	orrs	r1, r7
   120fe:	2b38      	cmp	r3, #56	; 0x38
   12100:	dc00      	bgt.n	12104 <__aeabi_dsub+0x1b4>
   12102:	e0fd      	b.n	12300 <__aeabi_dsub+0x3b0>
   12104:	430a      	orrs	r2, r1
   12106:	0017      	movs	r7, r2
   12108:	2100      	movs	r1, #0
   1210a:	1e7a      	subs	r2, r7, #1
   1210c:	4197      	sbcs	r7, r2
   1210e:	4457      	add	r7, sl
   12110:	4557      	cmp	r7, sl
   12112:	4180      	sbcs	r0, r0
   12114:	1909      	adds	r1, r1, r4
   12116:	4244      	negs	r4, r0
   12118:	190c      	adds	r4, r1, r4
   1211a:	0223      	lsls	r3, r4, #8
   1211c:	d53a      	bpl.n	12194 <__aeabi_dsub+0x244>
   1211e:	4b5d      	ldr	r3, [pc, #372]	; (12294 <__aeabi_dsub+0x344>)
   12120:	3601      	adds	r6, #1
   12122:	429e      	cmp	r6, r3
   12124:	d100      	bne.n	12128 <__aeabi_dsub+0x1d8>
   12126:	e14b      	b.n	123c0 <__aeabi_dsub+0x470>
   12128:	2201      	movs	r2, #1
   1212a:	4b5b      	ldr	r3, [pc, #364]	; (12298 <__aeabi_dsub+0x348>)
   1212c:	401c      	ands	r4, r3
   1212e:	087b      	lsrs	r3, r7, #1
   12130:	4017      	ands	r7, r2
   12132:	431f      	orrs	r7, r3
   12134:	07e2      	lsls	r2, r4, #31
   12136:	4317      	orrs	r7, r2
   12138:	0864      	lsrs	r4, r4, #1
   1213a:	e78f      	b.n	1205c <__aeabi_dsub+0x10c>
   1213c:	0008      	movs	r0, r1
   1213e:	4310      	orrs	r0, r2
   12140:	d000      	beq.n	12144 <__aeabi_dsub+0x1f4>
   12142:	e724      	b.n	11f8e <__aeabi_dsub+0x3e>
   12144:	e721      	b.n	11f8a <__aeabi_dsub+0x3a>
   12146:	0023      	movs	r3, r4
   12148:	433b      	orrs	r3, r7
   1214a:	d100      	bne.n	1214e <__aeabi_dsub+0x1fe>
   1214c:	e1b9      	b.n	124c2 <__aeabi_dsub+0x572>
   1214e:	2280      	movs	r2, #128	; 0x80
   12150:	0312      	lsls	r2, r2, #12
   12152:	4314      	orrs	r4, r2
   12154:	0324      	lsls	r4, r4, #12
   12156:	0b24      	lsrs	r4, r4, #12
   12158:	e79f      	b.n	1209a <__aeabi_dsub+0x14a>
   1215a:	002e      	movs	r6, r5
   1215c:	e77e      	b.n	1205c <__aeabi_dsub+0x10c>
   1215e:	0008      	movs	r0, r1
   12160:	4310      	orrs	r0, r2
   12162:	d100      	bne.n	12166 <__aeabi_dsub+0x216>
   12164:	e0ca      	b.n	122fc <__aeabi_dsub+0x3ac>
   12166:	1e58      	subs	r0, r3, #1
   12168:	4684      	mov	ip, r0
   1216a:	2800      	cmp	r0, #0
   1216c:	d000      	beq.n	12170 <__aeabi_dsub+0x220>
   1216e:	e0e7      	b.n	12340 <__aeabi_dsub+0x3f0>
   12170:	4452      	add	r2, sl
   12172:	4552      	cmp	r2, sl
   12174:	4180      	sbcs	r0, r0
   12176:	1864      	adds	r4, r4, r1
   12178:	4240      	negs	r0, r0
   1217a:	1824      	adds	r4, r4, r0
   1217c:	0017      	movs	r7, r2
   1217e:	2601      	movs	r6, #1
   12180:	0223      	lsls	r3, r4, #8
   12182:	d507      	bpl.n	12194 <__aeabi_dsub+0x244>
   12184:	2602      	movs	r6, #2
   12186:	e7cf      	b.n	12128 <__aeabi_dsub+0x1d8>
   12188:	4664      	mov	r4, ip
   1218a:	432c      	orrs	r4, r5
   1218c:	d100      	bne.n	12190 <__aeabi_dsub+0x240>
   1218e:	e1b3      	b.n	124f8 <__aeabi_dsub+0x5a8>
   12190:	002c      	movs	r4, r5
   12192:	4667      	mov	r7, ip
   12194:	077b      	lsls	r3, r7, #29
   12196:	d000      	beq.n	1219a <__aeabi_dsub+0x24a>
   12198:	e762      	b.n	12060 <__aeabi_dsub+0x110>
   1219a:	0763      	lsls	r3, r4, #29
   1219c:	08ff      	lsrs	r7, r7, #3
   1219e:	431f      	orrs	r7, r3
   121a0:	2501      	movs	r5, #1
   121a2:	4643      	mov	r3, r8
   121a4:	08e4      	lsrs	r4, r4, #3
   121a6:	401d      	ands	r5, r3
   121a8:	e793      	b.n	120d2 <__aeabi_dsub+0x182>
   121aa:	2d00      	cmp	r5, #0
   121ac:	d178      	bne.n	122a0 <__aeabi_dsub+0x350>
   121ae:	1c75      	adds	r5, r6, #1
   121b0:	056d      	lsls	r5, r5, #21
   121b2:	0d6d      	lsrs	r5, r5, #21
   121b4:	2d01      	cmp	r5, #1
   121b6:	dc00      	bgt.n	121ba <__aeabi_dsub+0x26a>
   121b8:	e0f2      	b.n	123a0 <__aeabi_dsub+0x450>
   121ba:	4650      	mov	r0, sl
   121bc:	1a80      	subs	r0, r0, r2
   121be:	4582      	cmp	sl, r0
   121c0:	41bf      	sbcs	r7, r7
   121c2:	1a65      	subs	r5, r4, r1
   121c4:	427f      	negs	r7, r7
   121c6:	1bed      	subs	r5, r5, r7
   121c8:	4684      	mov	ip, r0
   121ca:	0228      	lsls	r0, r5, #8
   121cc:	d400      	bmi.n	121d0 <__aeabi_dsub+0x280>
   121ce:	e08c      	b.n	122ea <__aeabi_dsub+0x39a>
   121d0:	4650      	mov	r0, sl
   121d2:	1a17      	subs	r7, r2, r0
   121d4:	42ba      	cmp	r2, r7
   121d6:	4192      	sbcs	r2, r2
   121d8:	1b0c      	subs	r4, r1, r4
   121da:	4255      	negs	r5, r2
   121dc:	1b65      	subs	r5, r4, r5
   121de:	4698      	mov	r8, r3
   121e0:	e714      	b.n	1200c <__aeabi_dsub+0xbc>
   121e2:	2501      	movs	r5, #1
   121e4:	4643      	mov	r3, r8
   121e6:	2400      	movs	r4, #0
   121e8:	401d      	ands	r5, r3
   121ea:	2700      	movs	r7, #0
   121ec:	e755      	b.n	1209a <__aeabi_dsub+0x14a>
   121ee:	4c2a      	ldr	r4, [pc, #168]	; (12298 <__aeabi_dsub+0x348>)
   121f0:	1af6      	subs	r6, r6, r3
   121f2:	402c      	ands	r4, r5
   121f4:	e732      	b.n	1205c <__aeabi_dsub+0x10c>
   121f6:	003d      	movs	r5, r7
   121f8:	3828      	subs	r0, #40	; 0x28
   121fa:	4085      	lsls	r5, r0
   121fc:	2700      	movs	r7, #0
   121fe:	e717      	b.n	12030 <__aeabi_dsub+0xe0>
   12200:	0038      	movs	r0, r7
   12202:	f000 fa89 	bl	12718 <__clzsi2>
   12206:	3020      	adds	r0, #32
   12208:	e706      	b.n	12018 <__aeabi_dsub+0xc8>
   1220a:	430a      	orrs	r2, r1
   1220c:	0017      	movs	r7, r2
   1220e:	2100      	movs	r1, #0
   12210:	1e7a      	subs	r2, r7, #1
   12212:	4197      	sbcs	r7, r2
   12214:	e6ee      	b.n	11ff4 <__aeabi_dsub+0xa4>
   12216:	2b00      	cmp	r3, #0
   12218:	d000      	beq.n	1221c <__aeabi_dsub+0x2cc>
   1221a:	e0e5      	b.n	123e8 <__aeabi_dsub+0x498>
   1221c:	1c73      	adds	r3, r6, #1
   1221e:	469c      	mov	ip, r3
   12220:	055b      	lsls	r3, r3, #21
   12222:	0d5b      	lsrs	r3, r3, #21
   12224:	2b01      	cmp	r3, #1
   12226:	dc00      	bgt.n	1222a <__aeabi_dsub+0x2da>
   12228:	e09f      	b.n	1236a <__aeabi_dsub+0x41a>
   1222a:	4b1a      	ldr	r3, [pc, #104]	; (12294 <__aeabi_dsub+0x344>)
   1222c:	459c      	cmp	ip, r3
   1222e:	d100      	bne.n	12232 <__aeabi_dsub+0x2e2>
   12230:	e0c5      	b.n	123be <__aeabi_dsub+0x46e>
   12232:	4452      	add	r2, sl
   12234:	4552      	cmp	r2, sl
   12236:	4180      	sbcs	r0, r0
   12238:	1864      	adds	r4, r4, r1
   1223a:	4240      	negs	r0, r0
   1223c:	1824      	adds	r4, r4, r0
   1223e:	07e7      	lsls	r7, r4, #31
   12240:	0852      	lsrs	r2, r2, #1
   12242:	4317      	orrs	r7, r2
   12244:	0864      	lsrs	r4, r4, #1
   12246:	4666      	mov	r6, ip
   12248:	e708      	b.n	1205c <__aeabi_dsub+0x10c>
   1224a:	4812      	ldr	r0, [pc, #72]	; (12294 <__aeabi_dsub+0x344>)
   1224c:	4285      	cmp	r5, r0
   1224e:	d100      	bne.n	12252 <__aeabi_dsub+0x302>
   12250:	e085      	b.n	1235e <__aeabi_dsub+0x40e>
   12252:	001d      	movs	r5, r3
   12254:	e6bc      	b.n	11fd0 <__aeabi_dsub+0x80>
   12256:	0029      	movs	r1, r5
   12258:	3e1f      	subs	r6, #31
   1225a:	40f1      	lsrs	r1, r6
   1225c:	2b20      	cmp	r3, #32
   1225e:	d100      	bne.n	12262 <__aeabi_dsub+0x312>
   12260:	e07f      	b.n	12362 <__aeabi_dsub+0x412>
   12262:	2240      	movs	r2, #64	; 0x40
   12264:	1ad3      	subs	r3, r2, r3
   12266:	409d      	lsls	r5, r3
   12268:	432f      	orrs	r7, r5
   1226a:	1e7d      	subs	r5, r7, #1
   1226c:	41af      	sbcs	r7, r5
   1226e:	2400      	movs	r4, #0
   12270:	430f      	orrs	r7, r1
   12272:	2600      	movs	r6, #0
   12274:	e78e      	b.n	12194 <__aeabi_dsub+0x244>
   12276:	002b      	movs	r3, r5
   12278:	000f      	movs	r7, r1
   1227a:	3b20      	subs	r3, #32
   1227c:	40df      	lsrs	r7, r3
   1227e:	2d20      	cmp	r5, #32
   12280:	d071      	beq.n	12366 <__aeabi_dsub+0x416>
   12282:	2340      	movs	r3, #64	; 0x40
   12284:	1b5d      	subs	r5, r3, r5
   12286:	40a9      	lsls	r1, r5
   12288:	430a      	orrs	r2, r1
   1228a:	1e51      	subs	r1, r2, #1
   1228c:	418a      	sbcs	r2, r1
   1228e:	2100      	movs	r1, #0
   12290:	4317      	orrs	r7, r2
   12292:	e6af      	b.n	11ff4 <__aeabi_dsub+0xa4>
   12294:	000007ff 	.word	0x000007ff
   12298:	ff7fffff 	.word	0xff7fffff
   1229c:	800fffff 	.word	0x800fffff
   122a0:	2e00      	cmp	r6, #0
   122a2:	d03e      	beq.n	12322 <__aeabi_dsub+0x3d2>
   122a4:	4eb3      	ldr	r6, [pc, #716]	; (12574 <__aeabi_dsub+0x624>)
   122a6:	45b4      	cmp	ip, r6
   122a8:	d045      	beq.n	12336 <__aeabi_dsub+0x3e6>
   122aa:	2680      	movs	r6, #128	; 0x80
   122ac:	0436      	lsls	r6, r6, #16
   122ae:	426d      	negs	r5, r5
   122b0:	4334      	orrs	r4, r6
   122b2:	2d38      	cmp	r5, #56	; 0x38
   122b4:	dd00      	ble.n	122b8 <__aeabi_dsub+0x368>
   122b6:	e0a8      	b.n	1240a <__aeabi_dsub+0x4ba>
   122b8:	2d1f      	cmp	r5, #31
   122ba:	dd00      	ble.n	122be <__aeabi_dsub+0x36e>
   122bc:	e11f      	b.n	124fe <__aeabi_dsub+0x5ae>
   122be:	2620      	movs	r6, #32
   122c0:	0027      	movs	r7, r4
   122c2:	4650      	mov	r0, sl
   122c4:	1b76      	subs	r6, r6, r5
   122c6:	40b7      	lsls	r7, r6
   122c8:	40e8      	lsrs	r0, r5
   122ca:	4307      	orrs	r7, r0
   122cc:	4650      	mov	r0, sl
   122ce:	40b0      	lsls	r0, r6
   122d0:	1e46      	subs	r6, r0, #1
   122d2:	41b0      	sbcs	r0, r6
   122d4:	40ec      	lsrs	r4, r5
   122d6:	4338      	orrs	r0, r7
   122d8:	1a17      	subs	r7, r2, r0
   122da:	42ba      	cmp	r2, r7
   122dc:	4192      	sbcs	r2, r2
   122de:	1b0c      	subs	r4, r1, r4
   122e0:	4252      	negs	r2, r2
   122e2:	1aa4      	subs	r4, r4, r2
   122e4:	4666      	mov	r6, ip
   122e6:	4698      	mov	r8, r3
   122e8:	e68b      	b.n	12002 <__aeabi_dsub+0xb2>
   122ea:	4664      	mov	r4, ip
   122ec:	4667      	mov	r7, ip
   122ee:	432c      	orrs	r4, r5
   122f0:	d000      	beq.n	122f4 <__aeabi_dsub+0x3a4>
   122f2:	e68b      	b.n	1200c <__aeabi_dsub+0xbc>
   122f4:	2500      	movs	r5, #0
   122f6:	2600      	movs	r6, #0
   122f8:	2700      	movs	r7, #0
   122fa:	e6ea      	b.n	120d2 <__aeabi_dsub+0x182>
   122fc:	001e      	movs	r6, r3
   122fe:	e6ad      	b.n	1205c <__aeabi_dsub+0x10c>
   12300:	2b1f      	cmp	r3, #31
   12302:	dc60      	bgt.n	123c6 <__aeabi_dsub+0x476>
   12304:	2720      	movs	r7, #32
   12306:	1af8      	subs	r0, r7, r3
   12308:	000f      	movs	r7, r1
   1230a:	4684      	mov	ip, r0
   1230c:	4087      	lsls	r7, r0
   1230e:	0010      	movs	r0, r2
   12310:	40d8      	lsrs	r0, r3
   12312:	4307      	orrs	r7, r0
   12314:	4660      	mov	r0, ip
   12316:	4082      	lsls	r2, r0
   12318:	1e50      	subs	r0, r2, #1
   1231a:	4182      	sbcs	r2, r0
   1231c:	40d9      	lsrs	r1, r3
   1231e:	4317      	orrs	r7, r2
   12320:	e6f5      	b.n	1210e <__aeabi_dsub+0x1be>
   12322:	0026      	movs	r6, r4
   12324:	4650      	mov	r0, sl
   12326:	4306      	orrs	r6, r0
   12328:	d005      	beq.n	12336 <__aeabi_dsub+0x3e6>
   1232a:	43ed      	mvns	r5, r5
   1232c:	2d00      	cmp	r5, #0
   1232e:	d0d3      	beq.n	122d8 <__aeabi_dsub+0x388>
   12330:	4e90      	ldr	r6, [pc, #576]	; (12574 <__aeabi_dsub+0x624>)
   12332:	45b4      	cmp	ip, r6
   12334:	d1bd      	bne.n	122b2 <__aeabi_dsub+0x362>
   12336:	000c      	movs	r4, r1
   12338:	0017      	movs	r7, r2
   1233a:	4666      	mov	r6, ip
   1233c:	4698      	mov	r8, r3
   1233e:	e68d      	b.n	1205c <__aeabi_dsub+0x10c>
   12340:	488c      	ldr	r0, [pc, #560]	; (12574 <__aeabi_dsub+0x624>)
   12342:	4283      	cmp	r3, r0
   12344:	d00b      	beq.n	1235e <__aeabi_dsub+0x40e>
   12346:	4663      	mov	r3, ip
   12348:	e6d9      	b.n	120fe <__aeabi_dsub+0x1ae>
   1234a:	2d00      	cmp	r5, #0
   1234c:	d000      	beq.n	12350 <__aeabi_dsub+0x400>
   1234e:	e096      	b.n	1247e <__aeabi_dsub+0x52e>
   12350:	0008      	movs	r0, r1
   12352:	4310      	orrs	r0, r2
   12354:	d100      	bne.n	12358 <__aeabi_dsub+0x408>
   12356:	e0e2      	b.n	1251e <__aeabi_dsub+0x5ce>
   12358:	000c      	movs	r4, r1
   1235a:	0017      	movs	r7, r2
   1235c:	4698      	mov	r8, r3
   1235e:	4e85      	ldr	r6, [pc, #532]	; (12574 <__aeabi_dsub+0x624>)
   12360:	e67c      	b.n	1205c <__aeabi_dsub+0x10c>
   12362:	2500      	movs	r5, #0
   12364:	e780      	b.n	12268 <__aeabi_dsub+0x318>
   12366:	2100      	movs	r1, #0
   12368:	e78e      	b.n	12288 <__aeabi_dsub+0x338>
   1236a:	0023      	movs	r3, r4
   1236c:	4650      	mov	r0, sl
   1236e:	4303      	orrs	r3, r0
   12370:	2e00      	cmp	r6, #0
   12372:	d000      	beq.n	12376 <__aeabi_dsub+0x426>
   12374:	e0a8      	b.n	124c8 <__aeabi_dsub+0x578>
   12376:	2b00      	cmp	r3, #0
   12378:	d100      	bne.n	1237c <__aeabi_dsub+0x42c>
   1237a:	e0de      	b.n	1253a <__aeabi_dsub+0x5ea>
   1237c:	000b      	movs	r3, r1
   1237e:	4313      	orrs	r3, r2
   12380:	d100      	bne.n	12384 <__aeabi_dsub+0x434>
   12382:	e66b      	b.n	1205c <__aeabi_dsub+0x10c>
   12384:	4452      	add	r2, sl
   12386:	4552      	cmp	r2, sl
   12388:	4180      	sbcs	r0, r0
   1238a:	1864      	adds	r4, r4, r1
   1238c:	4240      	negs	r0, r0
   1238e:	1824      	adds	r4, r4, r0
   12390:	0017      	movs	r7, r2
   12392:	0223      	lsls	r3, r4, #8
   12394:	d400      	bmi.n	12398 <__aeabi_dsub+0x448>
   12396:	e6fd      	b.n	12194 <__aeabi_dsub+0x244>
   12398:	4b77      	ldr	r3, [pc, #476]	; (12578 <__aeabi_dsub+0x628>)
   1239a:	4666      	mov	r6, ip
   1239c:	401c      	ands	r4, r3
   1239e:	e65d      	b.n	1205c <__aeabi_dsub+0x10c>
   123a0:	0025      	movs	r5, r4
   123a2:	4650      	mov	r0, sl
   123a4:	4305      	orrs	r5, r0
   123a6:	2e00      	cmp	r6, #0
   123a8:	d1cf      	bne.n	1234a <__aeabi_dsub+0x3fa>
   123aa:	2d00      	cmp	r5, #0
   123ac:	d14f      	bne.n	1244e <__aeabi_dsub+0x4fe>
   123ae:	000c      	movs	r4, r1
   123b0:	4314      	orrs	r4, r2
   123b2:	d100      	bne.n	123b6 <__aeabi_dsub+0x466>
   123b4:	e0a0      	b.n	124f8 <__aeabi_dsub+0x5a8>
   123b6:	000c      	movs	r4, r1
   123b8:	0017      	movs	r7, r2
   123ba:	4698      	mov	r8, r3
   123bc:	e64e      	b.n	1205c <__aeabi_dsub+0x10c>
   123be:	4666      	mov	r6, ip
   123c0:	2400      	movs	r4, #0
   123c2:	2700      	movs	r7, #0
   123c4:	e685      	b.n	120d2 <__aeabi_dsub+0x182>
   123c6:	001f      	movs	r7, r3
   123c8:	0008      	movs	r0, r1
   123ca:	3f20      	subs	r7, #32
   123cc:	40f8      	lsrs	r0, r7
   123ce:	0007      	movs	r7, r0
   123d0:	2b20      	cmp	r3, #32
   123d2:	d100      	bne.n	123d6 <__aeabi_dsub+0x486>
   123d4:	e08e      	b.n	124f4 <__aeabi_dsub+0x5a4>
   123d6:	2040      	movs	r0, #64	; 0x40
   123d8:	1ac3      	subs	r3, r0, r3
   123da:	4099      	lsls	r1, r3
   123dc:	430a      	orrs	r2, r1
   123de:	1e51      	subs	r1, r2, #1
   123e0:	418a      	sbcs	r2, r1
   123e2:	2100      	movs	r1, #0
   123e4:	4317      	orrs	r7, r2
   123e6:	e692      	b.n	1210e <__aeabi_dsub+0x1be>
   123e8:	2e00      	cmp	r6, #0
   123ea:	d114      	bne.n	12416 <__aeabi_dsub+0x4c6>
   123ec:	0026      	movs	r6, r4
   123ee:	4650      	mov	r0, sl
   123f0:	4306      	orrs	r6, r0
   123f2:	d062      	beq.n	124ba <__aeabi_dsub+0x56a>
   123f4:	43db      	mvns	r3, r3
   123f6:	2b00      	cmp	r3, #0
   123f8:	d15c      	bne.n	124b4 <__aeabi_dsub+0x564>
   123fa:	1887      	adds	r7, r0, r2
   123fc:	4297      	cmp	r7, r2
   123fe:	4192      	sbcs	r2, r2
   12400:	1864      	adds	r4, r4, r1
   12402:	4252      	negs	r2, r2
   12404:	18a4      	adds	r4, r4, r2
   12406:	4666      	mov	r6, ip
   12408:	e687      	b.n	1211a <__aeabi_dsub+0x1ca>
   1240a:	4650      	mov	r0, sl
   1240c:	4320      	orrs	r0, r4
   1240e:	1e44      	subs	r4, r0, #1
   12410:	41a0      	sbcs	r0, r4
   12412:	2400      	movs	r4, #0
   12414:	e760      	b.n	122d8 <__aeabi_dsub+0x388>
   12416:	4e57      	ldr	r6, [pc, #348]	; (12574 <__aeabi_dsub+0x624>)
   12418:	45b4      	cmp	ip, r6
   1241a:	d04e      	beq.n	124ba <__aeabi_dsub+0x56a>
   1241c:	2680      	movs	r6, #128	; 0x80
   1241e:	0436      	lsls	r6, r6, #16
   12420:	425b      	negs	r3, r3
   12422:	4334      	orrs	r4, r6
   12424:	2b38      	cmp	r3, #56	; 0x38
   12426:	dd00      	ble.n	1242a <__aeabi_dsub+0x4da>
   12428:	e07f      	b.n	1252a <__aeabi_dsub+0x5da>
   1242a:	2b1f      	cmp	r3, #31
   1242c:	dd00      	ble.n	12430 <__aeabi_dsub+0x4e0>
   1242e:	e08b      	b.n	12548 <__aeabi_dsub+0x5f8>
   12430:	2620      	movs	r6, #32
   12432:	0027      	movs	r7, r4
   12434:	4650      	mov	r0, sl
   12436:	1af6      	subs	r6, r6, r3
   12438:	40b7      	lsls	r7, r6
   1243a:	40d8      	lsrs	r0, r3
   1243c:	4307      	orrs	r7, r0
   1243e:	4650      	mov	r0, sl
   12440:	40b0      	lsls	r0, r6
   12442:	1e46      	subs	r6, r0, #1
   12444:	41b0      	sbcs	r0, r6
   12446:	4307      	orrs	r7, r0
   12448:	40dc      	lsrs	r4, r3
   1244a:	18bf      	adds	r7, r7, r2
   1244c:	e7d6      	b.n	123fc <__aeabi_dsub+0x4ac>
   1244e:	000d      	movs	r5, r1
   12450:	4315      	orrs	r5, r2
   12452:	d100      	bne.n	12456 <__aeabi_dsub+0x506>
   12454:	e602      	b.n	1205c <__aeabi_dsub+0x10c>
   12456:	4650      	mov	r0, sl
   12458:	1a80      	subs	r0, r0, r2
   1245a:	4582      	cmp	sl, r0
   1245c:	41bf      	sbcs	r7, r7
   1245e:	1a65      	subs	r5, r4, r1
   12460:	427f      	negs	r7, r7
   12462:	1bed      	subs	r5, r5, r7
   12464:	4684      	mov	ip, r0
   12466:	0228      	lsls	r0, r5, #8
   12468:	d400      	bmi.n	1246c <__aeabi_dsub+0x51c>
   1246a:	e68d      	b.n	12188 <__aeabi_dsub+0x238>
   1246c:	4650      	mov	r0, sl
   1246e:	1a17      	subs	r7, r2, r0
   12470:	42ba      	cmp	r2, r7
   12472:	4192      	sbcs	r2, r2
   12474:	1b0c      	subs	r4, r1, r4
   12476:	4252      	negs	r2, r2
   12478:	1aa4      	subs	r4, r4, r2
   1247a:	4698      	mov	r8, r3
   1247c:	e5ee      	b.n	1205c <__aeabi_dsub+0x10c>
   1247e:	000d      	movs	r5, r1
   12480:	4315      	orrs	r5, r2
   12482:	d100      	bne.n	12486 <__aeabi_dsub+0x536>
   12484:	e76b      	b.n	1235e <__aeabi_dsub+0x40e>
   12486:	4650      	mov	r0, sl
   12488:	0767      	lsls	r7, r4, #29
   1248a:	08c0      	lsrs	r0, r0, #3
   1248c:	4307      	orrs	r7, r0
   1248e:	2080      	movs	r0, #128	; 0x80
   12490:	08e4      	lsrs	r4, r4, #3
   12492:	0300      	lsls	r0, r0, #12
   12494:	4204      	tst	r4, r0
   12496:	d007      	beq.n	124a8 <__aeabi_dsub+0x558>
   12498:	08cd      	lsrs	r5, r1, #3
   1249a:	4205      	tst	r5, r0
   1249c:	d104      	bne.n	124a8 <__aeabi_dsub+0x558>
   1249e:	002c      	movs	r4, r5
   124a0:	4698      	mov	r8, r3
   124a2:	08d7      	lsrs	r7, r2, #3
   124a4:	0749      	lsls	r1, r1, #29
   124a6:	430f      	orrs	r7, r1
   124a8:	0f7b      	lsrs	r3, r7, #29
   124aa:	00e4      	lsls	r4, r4, #3
   124ac:	431c      	orrs	r4, r3
   124ae:	00ff      	lsls	r7, r7, #3
   124b0:	4e30      	ldr	r6, [pc, #192]	; (12574 <__aeabi_dsub+0x624>)
   124b2:	e5d3      	b.n	1205c <__aeabi_dsub+0x10c>
   124b4:	4e2f      	ldr	r6, [pc, #188]	; (12574 <__aeabi_dsub+0x624>)
   124b6:	45b4      	cmp	ip, r6
   124b8:	d1b4      	bne.n	12424 <__aeabi_dsub+0x4d4>
   124ba:	000c      	movs	r4, r1
   124bc:	0017      	movs	r7, r2
   124be:	4666      	mov	r6, ip
   124c0:	e5cc      	b.n	1205c <__aeabi_dsub+0x10c>
   124c2:	2700      	movs	r7, #0
   124c4:	2400      	movs	r4, #0
   124c6:	e5e8      	b.n	1209a <__aeabi_dsub+0x14a>
   124c8:	2b00      	cmp	r3, #0
   124ca:	d039      	beq.n	12540 <__aeabi_dsub+0x5f0>
   124cc:	000b      	movs	r3, r1
   124ce:	4313      	orrs	r3, r2
   124d0:	d100      	bne.n	124d4 <__aeabi_dsub+0x584>
   124d2:	e744      	b.n	1235e <__aeabi_dsub+0x40e>
   124d4:	08c0      	lsrs	r0, r0, #3
   124d6:	0767      	lsls	r7, r4, #29
   124d8:	4307      	orrs	r7, r0
   124da:	2080      	movs	r0, #128	; 0x80
   124dc:	08e4      	lsrs	r4, r4, #3
   124de:	0300      	lsls	r0, r0, #12
   124e0:	4204      	tst	r4, r0
   124e2:	d0e1      	beq.n	124a8 <__aeabi_dsub+0x558>
   124e4:	08cb      	lsrs	r3, r1, #3
   124e6:	4203      	tst	r3, r0
   124e8:	d1de      	bne.n	124a8 <__aeabi_dsub+0x558>
   124ea:	08d7      	lsrs	r7, r2, #3
   124ec:	0749      	lsls	r1, r1, #29
   124ee:	430f      	orrs	r7, r1
   124f0:	001c      	movs	r4, r3
   124f2:	e7d9      	b.n	124a8 <__aeabi_dsub+0x558>
   124f4:	2100      	movs	r1, #0
   124f6:	e771      	b.n	123dc <__aeabi_dsub+0x48c>
   124f8:	2500      	movs	r5, #0
   124fa:	2700      	movs	r7, #0
   124fc:	e5e9      	b.n	120d2 <__aeabi_dsub+0x182>
   124fe:	002e      	movs	r6, r5
   12500:	0027      	movs	r7, r4
   12502:	3e20      	subs	r6, #32
   12504:	40f7      	lsrs	r7, r6
   12506:	2d20      	cmp	r5, #32
   12508:	d02f      	beq.n	1256a <__aeabi_dsub+0x61a>
   1250a:	2640      	movs	r6, #64	; 0x40
   1250c:	1b75      	subs	r5, r6, r5
   1250e:	40ac      	lsls	r4, r5
   12510:	4650      	mov	r0, sl
   12512:	4320      	orrs	r0, r4
   12514:	1e44      	subs	r4, r0, #1
   12516:	41a0      	sbcs	r0, r4
   12518:	2400      	movs	r4, #0
   1251a:	4338      	orrs	r0, r7
   1251c:	e6dc      	b.n	122d8 <__aeabi_dsub+0x388>
   1251e:	2480      	movs	r4, #128	; 0x80
   12520:	2500      	movs	r5, #0
   12522:	0324      	lsls	r4, r4, #12
   12524:	4e13      	ldr	r6, [pc, #76]	; (12574 <__aeabi_dsub+0x624>)
   12526:	2700      	movs	r7, #0
   12528:	e5d3      	b.n	120d2 <__aeabi_dsub+0x182>
   1252a:	4650      	mov	r0, sl
   1252c:	4320      	orrs	r0, r4
   1252e:	0007      	movs	r7, r0
   12530:	1e78      	subs	r0, r7, #1
   12532:	4187      	sbcs	r7, r0
   12534:	2400      	movs	r4, #0
   12536:	18bf      	adds	r7, r7, r2
   12538:	e760      	b.n	123fc <__aeabi_dsub+0x4ac>
   1253a:	000c      	movs	r4, r1
   1253c:	0017      	movs	r7, r2
   1253e:	e58d      	b.n	1205c <__aeabi_dsub+0x10c>
   12540:	000c      	movs	r4, r1
   12542:	0017      	movs	r7, r2
   12544:	4e0b      	ldr	r6, [pc, #44]	; (12574 <__aeabi_dsub+0x624>)
   12546:	e589      	b.n	1205c <__aeabi_dsub+0x10c>
   12548:	001e      	movs	r6, r3
   1254a:	0027      	movs	r7, r4
   1254c:	3e20      	subs	r6, #32
   1254e:	40f7      	lsrs	r7, r6
   12550:	2b20      	cmp	r3, #32
   12552:	d00c      	beq.n	1256e <__aeabi_dsub+0x61e>
   12554:	2640      	movs	r6, #64	; 0x40
   12556:	1af3      	subs	r3, r6, r3
   12558:	409c      	lsls	r4, r3
   1255a:	4650      	mov	r0, sl
   1255c:	4320      	orrs	r0, r4
   1255e:	1e44      	subs	r4, r0, #1
   12560:	41a0      	sbcs	r0, r4
   12562:	4307      	orrs	r7, r0
   12564:	2400      	movs	r4, #0
   12566:	18bf      	adds	r7, r7, r2
   12568:	e748      	b.n	123fc <__aeabi_dsub+0x4ac>
   1256a:	2400      	movs	r4, #0
   1256c:	e7d0      	b.n	12510 <__aeabi_dsub+0x5c0>
   1256e:	2400      	movs	r4, #0
   12570:	e7f3      	b.n	1255a <__aeabi_dsub+0x60a>
   12572:	46c0      	nop			; (mov r8, r8)
   12574:	000007ff 	.word	0x000007ff
   12578:	ff7fffff 	.word	0xff7fffff

0001257c <__aeabi_dcmpun>:
   1257c:	b570      	push	{r4, r5, r6, lr}
   1257e:	4e0e      	ldr	r6, [pc, #56]	; (125b8 <__aeabi_dcmpun+0x3c>)
   12580:	030d      	lsls	r5, r1, #12
   12582:	031c      	lsls	r4, r3, #12
   12584:	0049      	lsls	r1, r1, #1
   12586:	005b      	lsls	r3, r3, #1
   12588:	0b2d      	lsrs	r5, r5, #12
   1258a:	0d49      	lsrs	r1, r1, #21
   1258c:	0b24      	lsrs	r4, r4, #12
   1258e:	0d5b      	lsrs	r3, r3, #21
   12590:	42b1      	cmp	r1, r6
   12592:	d004      	beq.n	1259e <__aeabi_dcmpun+0x22>
   12594:	4908      	ldr	r1, [pc, #32]	; (125b8 <__aeabi_dcmpun+0x3c>)
   12596:	2000      	movs	r0, #0
   12598:	428b      	cmp	r3, r1
   1259a:	d008      	beq.n	125ae <__aeabi_dcmpun+0x32>
   1259c:	bd70      	pop	{r4, r5, r6, pc}
   1259e:	4305      	orrs	r5, r0
   125a0:	2001      	movs	r0, #1
   125a2:	2d00      	cmp	r5, #0
   125a4:	d1fa      	bne.n	1259c <__aeabi_dcmpun+0x20>
   125a6:	4904      	ldr	r1, [pc, #16]	; (125b8 <__aeabi_dcmpun+0x3c>)
   125a8:	2000      	movs	r0, #0
   125aa:	428b      	cmp	r3, r1
   125ac:	d1f6      	bne.n	1259c <__aeabi_dcmpun+0x20>
   125ae:	4314      	orrs	r4, r2
   125b0:	0020      	movs	r0, r4
   125b2:	1e44      	subs	r4, r0, #1
   125b4:	41a0      	sbcs	r0, r4
   125b6:	e7f1      	b.n	1259c <__aeabi_dcmpun+0x20>
   125b8:	000007ff 	.word	0x000007ff

000125bc <__aeabi_d2iz>:
   125bc:	b530      	push	{r4, r5, lr}
   125be:	4d13      	ldr	r5, [pc, #76]	; (1260c <__aeabi_d2iz+0x50>)
   125c0:	030a      	lsls	r2, r1, #12
   125c2:	004b      	lsls	r3, r1, #1
   125c4:	0b12      	lsrs	r2, r2, #12
   125c6:	0d5b      	lsrs	r3, r3, #21
   125c8:	0fc9      	lsrs	r1, r1, #31
   125ca:	2400      	movs	r4, #0
   125cc:	42ab      	cmp	r3, r5
   125ce:	dd10      	ble.n	125f2 <__aeabi_d2iz+0x36>
   125d0:	4c0f      	ldr	r4, [pc, #60]	; (12610 <__aeabi_d2iz+0x54>)
   125d2:	42a3      	cmp	r3, r4
   125d4:	dc0f      	bgt.n	125f6 <__aeabi_d2iz+0x3a>
   125d6:	2480      	movs	r4, #128	; 0x80
   125d8:	4d0e      	ldr	r5, [pc, #56]	; (12614 <__aeabi_d2iz+0x58>)
   125da:	0364      	lsls	r4, r4, #13
   125dc:	4322      	orrs	r2, r4
   125de:	1aed      	subs	r5, r5, r3
   125e0:	2d1f      	cmp	r5, #31
   125e2:	dd0b      	ble.n	125fc <__aeabi_d2iz+0x40>
   125e4:	480c      	ldr	r0, [pc, #48]	; (12618 <__aeabi_d2iz+0x5c>)
   125e6:	1ac3      	subs	r3, r0, r3
   125e8:	40da      	lsrs	r2, r3
   125ea:	4254      	negs	r4, r2
   125ec:	2900      	cmp	r1, #0
   125ee:	d100      	bne.n	125f2 <__aeabi_d2iz+0x36>
   125f0:	0014      	movs	r4, r2
   125f2:	0020      	movs	r0, r4
   125f4:	bd30      	pop	{r4, r5, pc}
   125f6:	4b09      	ldr	r3, [pc, #36]	; (1261c <__aeabi_d2iz+0x60>)
   125f8:	18cc      	adds	r4, r1, r3
   125fa:	e7fa      	b.n	125f2 <__aeabi_d2iz+0x36>
   125fc:	4c08      	ldr	r4, [pc, #32]	; (12620 <__aeabi_d2iz+0x64>)
   125fe:	40e8      	lsrs	r0, r5
   12600:	46a4      	mov	ip, r4
   12602:	4463      	add	r3, ip
   12604:	409a      	lsls	r2, r3
   12606:	4302      	orrs	r2, r0
   12608:	e7ef      	b.n	125ea <__aeabi_d2iz+0x2e>
   1260a:	46c0      	nop			; (mov r8, r8)
   1260c:	000003fe 	.word	0x000003fe
   12610:	0000041d 	.word	0x0000041d
   12614:	00000433 	.word	0x00000433
   12618:	00000413 	.word	0x00000413
   1261c:	7fffffff 	.word	0x7fffffff
   12620:	fffffbed 	.word	0xfffffbed

00012624 <__aeabi_i2d>:
   12624:	b570      	push	{r4, r5, r6, lr}
   12626:	2800      	cmp	r0, #0
   12628:	d030      	beq.n	1268c <__aeabi_i2d+0x68>
   1262a:	17c3      	asrs	r3, r0, #31
   1262c:	18c4      	adds	r4, r0, r3
   1262e:	405c      	eors	r4, r3
   12630:	0fc5      	lsrs	r5, r0, #31
   12632:	0020      	movs	r0, r4
   12634:	f000 f870 	bl	12718 <__clzsi2>
   12638:	4b17      	ldr	r3, [pc, #92]	; (12698 <__aeabi_i2d+0x74>)
   1263a:	4a18      	ldr	r2, [pc, #96]	; (1269c <__aeabi_i2d+0x78>)
   1263c:	1a1b      	subs	r3, r3, r0
   1263e:	1ad2      	subs	r2, r2, r3
   12640:	2a1f      	cmp	r2, #31
   12642:	dd18      	ble.n	12676 <__aeabi_i2d+0x52>
   12644:	4a16      	ldr	r2, [pc, #88]	; (126a0 <__aeabi_i2d+0x7c>)
   12646:	1ad2      	subs	r2, r2, r3
   12648:	4094      	lsls	r4, r2
   1264a:	2200      	movs	r2, #0
   1264c:	0324      	lsls	r4, r4, #12
   1264e:	055b      	lsls	r3, r3, #21
   12650:	0b24      	lsrs	r4, r4, #12
   12652:	0d5b      	lsrs	r3, r3, #21
   12654:	2100      	movs	r1, #0
   12656:	0010      	movs	r0, r2
   12658:	0324      	lsls	r4, r4, #12
   1265a:	0d0a      	lsrs	r2, r1, #20
   1265c:	0b24      	lsrs	r4, r4, #12
   1265e:	0512      	lsls	r2, r2, #20
   12660:	4322      	orrs	r2, r4
   12662:	4c10      	ldr	r4, [pc, #64]	; (126a4 <__aeabi_i2d+0x80>)
   12664:	051b      	lsls	r3, r3, #20
   12666:	4022      	ands	r2, r4
   12668:	4313      	orrs	r3, r2
   1266a:	005b      	lsls	r3, r3, #1
   1266c:	07ed      	lsls	r5, r5, #31
   1266e:	085b      	lsrs	r3, r3, #1
   12670:	432b      	orrs	r3, r5
   12672:	0019      	movs	r1, r3
   12674:	bd70      	pop	{r4, r5, r6, pc}
   12676:	0021      	movs	r1, r4
   12678:	4091      	lsls	r1, r2
   1267a:	000a      	movs	r2, r1
   1267c:	210b      	movs	r1, #11
   1267e:	1a08      	subs	r0, r1, r0
   12680:	40c4      	lsrs	r4, r0
   12682:	055b      	lsls	r3, r3, #21
   12684:	0324      	lsls	r4, r4, #12
   12686:	0b24      	lsrs	r4, r4, #12
   12688:	0d5b      	lsrs	r3, r3, #21
   1268a:	e7e3      	b.n	12654 <__aeabi_i2d+0x30>
   1268c:	2500      	movs	r5, #0
   1268e:	2300      	movs	r3, #0
   12690:	2400      	movs	r4, #0
   12692:	2200      	movs	r2, #0
   12694:	e7de      	b.n	12654 <__aeabi_i2d+0x30>
   12696:	46c0      	nop			; (mov r8, r8)
   12698:	0000041e 	.word	0x0000041e
   1269c:	00000433 	.word	0x00000433
   126a0:	00000413 	.word	0x00000413
   126a4:	800fffff 	.word	0x800fffff

000126a8 <__aeabi_ui2d>:
   126a8:	b510      	push	{r4, lr}
   126aa:	1e04      	subs	r4, r0, #0
   126ac:	d028      	beq.n	12700 <__aeabi_ui2d+0x58>
   126ae:	f000 f833 	bl	12718 <__clzsi2>
   126b2:	4b15      	ldr	r3, [pc, #84]	; (12708 <__aeabi_ui2d+0x60>)
   126b4:	4a15      	ldr	r2, [pc, #84]	; (1270c <__aeabi_ui2d+0x64>)
   126b6:	1a1b      	subs	r3, r3, r0
   126b8:	1ad2      	subs	r2, r2, r3
   126ba:	2a1f      	cmp	r2, #31
   126bc:	dd15      	ble.n	126ea <__aeabi_ui2d+0x42>
   126be:	4a14      	ldr	r2, [pc, #80]	; (12710 <__aeabi_ui2d+0x68>)
   126c0:	1ad2      	subs	r2, r2, r3
   126c2:	4094      	lsls	r4, r2
   126c4:	2200      	movs	r2, #0
   126c6:	0324      	lsls	r4, r4, #12
   126c8:	055b      	lsls	r3, r3, #21
   126ca:	0b24      	lsrs	r4, r4, #12
   126cc:	0d5b      	lsrs	r3, r3, #21
   126ce:	2100      	movs	r1, #0
   126d0:	0010      	movs	r0, r2
   126d2:	0324      	lsls	r4, r4, #12
   126d4:	0d0a      	lsrs	r2, r1, #20
   126d6:	0b24      	lsrs	r4, r4, #12
   126d8:	0512      	lsls	r2, r2, #20
   126da:	4322      	orrs	r2, r4
   126dc:	4c0d      	ldr	r4, [pc, #52]	; (12714 <__aeabi_ui2d+0x6c>)
   126de:	051b      	lsls	r3, r3, #20
   126e0:	4022      	ands	r2, r4
   126e2:	4313      	orrs	r3, r2
   126e4:	005b      	lsls	r3, r3, #1
   126e6:	0859      	lsrs	r1, r3, #1
   126e8:	bd10      	pop	{r4, pc}
   126ea:	0021      	movs	r1, r4
   126ec:	4091      	lsls	r1, r2
   126ee:	000a      	movs	r2, r1
   126f0:	210b      	movs	r1, #11
   126f2:	1a08      	subs	r0, r1, r0
   126f4:	40c4      	lsrs	r4, r0
   126f6:	055b      	lsls	r3, r3, #21
   126f8:	0324      	lsls	r4, r4, #12
   126fa:	0b24      	lsrs	r4, r4, #12
   126fc:	0d5b      	lsrs	r3, r3, #21
   126fe:	e7e6      	b.n	126ce <__aeabi_ui2d+0x26>
   12700:	2300      	movs	r3, #0
   12702:	2400      	movs	r4, #0
   12704:	2200      	movs	r2, #0
   12706:	e7e2      	b.n	126ce <__aeabi_ui2d+0x26>
   12708:	0000041e 	.word	0x0000041e
   1270c:	00000433 	.word	0x00000433
   12710:	00000413 	.word	0x00000413
   12714:	800fffff 	.word	0x800fffff

00012718 <__clzsi2>:
   12718:	211c      	movs	r1, #28
   1271a:	2301      	movs	r3, #1
   1271c:	041b      	lsls	r3, r3, #16
   1271e:	4298      	cmp	r0, r3
   12720:	d301      	bcc.n	12726 <__clzsi2+0xe>
   12722:	0c00      	lsrs	r0, r0, #16
   12724:	3910      	subs	r1, #16
   12726:	0a1b      	lsrs	r3, r3, #8
   12728:	4298      	cmp	r0, r3
   1272a:	d301      	bcc.n	12730 <__clzsi2+0x18>
   1272c:	0a00      	lsrs	r0, r0, #8
   1272e:	3908      	subs	r1, #8
   12730:	091b      	lsrs	r3, r3, #4
   12732:	4298      	cmp	r0, r3
   12734:	d301      	bcc.n	1273a <__clzsi2+0x22>
   12736:	0900      	lsrs	r0, r0, #4
   12738:	3904      	subs	r1, #4
   1273a:	a202      	add	r2, pc, #8	; (adr r2, 12744 <__clzsi2+0x2c>)
   1273c:	5c10      	ldrb	r0, [r2, r0]
   1273e:	1840      	adds	r0, r0, r1
   12740:	4770      	bx	lr
   12742:	46c0      	nop			; (mov r8, r8)
   12744:	02020304 	.word	0x02020304
   12748:	01010101 	.word	0x01010101
	...
   12754:	6c696166 	.word	0x6c696166
   12758:	74206465 	.word	0x74206465
   1275c:	6e69206f 	.word	0x6e69206f
   12760:	61697469 	.word	0x61697469
   12764:	657a696c 	.word	0x657a696c
   12768:	43444820 	.word	0x43444820
   1276c:	30383031 	.word	0x30383031
   12770:	69726420 	.word	0x69726420
   12774:	2e726576 	.word	0x2e726576
   12778:	0000000d 	.word	0x0000000d
   1277c:	61746164 	.word	0x61746164
   12780:	63617020 	.word	0x63617020
   12784:	3a74656b 	.word	0x3a74656b
   12788:	25783020 	.word	0x25783020
   1278c:	20783230 	.word	0x20783230
   12790:	30257830 	.word	0x30257830
   12794:	30207832 	.word	0x30207832
   12798:	32302578 	.word	0x32302578
   1279c:	000a0d78 	.word	0x000a0d78
   127a0:	6f727265 	.word	0x6f727265
   127a4:	72742072 	.word	0x72742072
   127a8:	676e6979 	.word	0x676e6979
   127ac:	206f7420 	.word	0x206f7420
   127b0:	20746573 	.word	0x20746573
   127b4:	6f736572 	.word	0x6f736572
   127b8:	6974756c 	.word	0x6974756c
   127bc:	0d216e6f 	.word	0x0d216e6f
   127c0:	00000000 	.word	0x00000000
   127c4:	6c696166 	.word	0x6c696166
   127c8:	74206465 	.word	0x74206465
   127cc:	0973206f 	.word	0x0973206f
   127d0:	20646e65 	.word	0x20646e65
   127d4:	69676572 	.word	0x69676572
   127d8:	72657473 	.word	0x72657473
   127dc:	71657220 	.word	0x71657220
   127e0:	74736575 	.word	0x74736575
   127e4:	726f6620 	.word	0x726f6620
   127e8:	6d6f6320 	.word	0x6d6f6320
   127ec:	646e616d 	.word	0x646e616d
   127f0:	25783020 	.word	0x25783020
   127f4:	21783230 	.word	0x21783230
   127f8:	00000a0d 	.word	0x00000a0d
   127fc:	6c696166 	.word	0x6c696166
   12800:	74206465 	.word	0x74206465
   12804:	6572206f 	.word	0x6572206f
   12808:	76696563 	.word	0x76696563
   1280c:	79622065 	.word	0x79622065
   12810:	20736574 	.word	0x20736574
   12814:	20726f66 	.word	0x20726f66
   12818:	6d6d6f63 	.word	0x6d6d6f63
   1281c:	20646e61 	.word	0x20646e61
   12820:	30257830 	.word	0x30257830
   12824:	0d217832 	.word	0x0d217832
   12828:	0000000a 	.word	0x0000000a
   1282c:	6c696166 	.word	0x6c696166
   12830:	74206465 	.word	0x74206465
   12834:	6e69206f 	.word	0x6e69206f
   12838:	61697469 	.word	0x61697469
   1283c:	657a696c 	.word	0x657a696c
   12840:	4c535420 	.word	0x4c535420
   12844:	31363532 	.word	0x31363532
   12848:	69726420 	.word	0x69726420
   1284c:	2e726576 	.word	0x2e726576
   12850:	0000000d 	.word	0x0000000d
   12854:	6c696166 	.word	0x6c696166
   12858:	74206465 	.word	0x74206465
   1285c:	6573206f 	.word	0x6573206f
   12860:	7220646e 	.word	0x7220646e
   12864:	73696765 	.word	0x73696765
   12868:	20726574 	.word	0x20726574
   1286c:	75716572 	.word	0x75716572
   12870:	20747365 	.word	0x20747365
   12874:	20726f66 	.word	0x20726f66
   12878:	6d6d6f63 	.word	0x6d6d6f63
   1287c:	20646e61 	.word	0x20646e61
   12880:	30257830 	.word	0x30257830
   12884:	0d217832 	.word	0x0d217832
   12888:	0000000a 	.word	0x0000000a
   1288c:	6c696166 	.word	0x6c696166
   12890:	74206465 	.word	0x74206465
   12894:	6572206f 	.word	0x6572206f
   12898:	76696563 	.word	0x76696563
   1289c:	79622065 	.word	0x79622065
   128a0:	20736574 	.word	0x20736574
   128a4:	20726f66 	.word	0x20726f66
   128a8:	6d6d6f63 	.word	0x6d6d6f63
   128ac:	20646e61 	.word	0x20646e61
   128b0:	30257830 	.word	0x30257830
   128b4:	0d217832 	.word	0x0d217832
   128b8:	0000000a 	.word	0x0000000a
   128bc:	5f746567 	.word	0x5f746567
   128c0:	3a78756c 	.word	0x3a78756c
   128c4:	4c535420 	.word	0x4c535420
   128c8:	31363532 	.word	0x31363532
   128cc:	67696c20 	.word	0x67696c20
   128d0:	69207468 	.word	0x69207468
   128d4:	61732073 	.word	0x61732073
   128d8:	61727574 	.word	0x61727574
   128dc:	00646574 	.word	0x00646574
   128e0:	50504128 	.word	0x50504128
   128e4:	52452829 	.word	0x52452829
   128e8:	255b2952 	.word	0x255b2952
   128ec:	255b5d73 	.word	0x255b5d73
   128f0:	00005d64 	.word	0x00005d64
   128f4:	61766e69 	.word	0x61766e69
   128f8:	6564696c 	.word	0x6564696c
   128fc:	636f6920 	.word	0x636f6920
   12900:	6320746c 	.word	0x6320746c
   12904:	0000646d 	.word	0x0000646d

00012908 <__FUNCTION__.15054>:
   12908:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   12918:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   12928:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   12938:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   12948:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   12958:	74207075 63206568 00706968 66696828     up the chip.(hif
   12968:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   12978:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   12988:	66696828 64612029 73657264 75622073     (hif) address bu
   12998:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   129a8:	70757272 20646574 6b636170 53207465     rrupted packet S
   129b8:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   129c8:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   129d8:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   129e8:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   129f8:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   12a08:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   12a18:	73696765 65726574 00000064 2061744f     egistered...Ota 
   12a28:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   12a38:	69676572 72657473 00006465 70797243     registered..Cryp
   12a48:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   12a58:	7220746f 73696765 65726574 00000064     ot registered...
   12a68:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   12a78:	6f6e2073 65722074 74736967 64657265     s not registered
   12a88:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   12a98:	72672064 2070756f 00004449 66696828     d group ID..(hif
   12aa8:	6f682029 61207473 64207070 276e6469     ) host app didn'
   12ab8:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   12ac8:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   12ad8:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   12ae8:	61462029 2065736c 65746e69 70757272     ) False interrup
   12af8:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   12b08:	74206c69 6552206f 69206461 7265746e     il to Read inter
   12b18:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   12b28:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   12b38:	746e6920 75727265 25207470 72742064      interrupt %d tr
   12b48:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   12b58:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   12b68:	72612064 656d7567 0000746e 20505041     d argument..APP 
   12b78:	75716552 65747365 69532064 6920657a     Requested Size i
   12b88:	616c2073 72656772 61687420 6874206e     s larger than th
   12b98:	65722065 65766963 75622064 72656666     e recived buffer
   12ba8:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   12bb8:	00000000 20505041 75716552 65747365     ....APP Requeste
   12bc8:	64412064 73657264 65622073 646e6f79     d Address beyond
   12bd8:	65687420 63657220 64657669 66756220      the recived buf
   12be8:	20726566 72646461 20737365 20646e61     fer address and 
   12bf8:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   12c08:	0000000a 0000216c 0000213c 00002134     ....l!..<!..4!..
   12c18:	0000214c 00002144 00002164 00002154     L!..D!..d!..T!..
   12c28:	0000215c                                \!..

00012c2c <__FUNCTION__.13073>:
   12c2c:	5f666968 646e6573 00000000              hif_send....

00012c38 <__FUNCTION__.13083>:
   12c38:	5f666968 00727369                       hif_isr.

00012c40 <__FUNCTION__.13089>:
   12c40:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00012c50 <__FUNCTION__.13101>:
   12c50:	5f666968 65636572 00657669              hif_receive.

00012c5c <__FUNCTION__.13117>:
   12c5c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   12c6c:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   12c7c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   12c8c:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   12c9c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   12cac:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   12cbc:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   12ccc:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   12cdc:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   12cec:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   12cfc:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   12d0c:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   12d1c:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   12d2c:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   12d3c:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   12d4c:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   12d5c:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   12d6c:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   12d7c:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   12d8c:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   12d9c:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   12dac:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   12dbc:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   12dcc:	73747365 72657020 61637320 6c73206e     ests per scan sl
   12ddc:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   12dec:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   12dfc:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   12e0c:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   12e1c:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   12e2c:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   12e3c:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   12e4c:	6e694d20 69726420 20726576 20726576      Min driver ver 
   12e5c:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   12e6c:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   12e7c:	0000000a 303a3131 39313a37 00000000     ....11:07:19....
   12e8c:	20727041 32203432 00383130 76697244     Apr 24 2018.Driv
   12e9c:	62207265 746c6975 20746120 25097325     er built at %s.%
   12eac:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   12ebc:	7277616d 65562065 6f697372 0000006e     mawre Version...
   12ecc:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   12edc:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   12eec:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   12efc:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   12f0c:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   12f1c:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   12f2c:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   12f3c:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   12f4c:	53502074 656b204b 656c2079 6874676e     t PSK key length
   12f5c:	00000000 65646e75 656e6966 65732064     ....undefined se
   12f6c:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   12f7c:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   12f8c:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   12f9c:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   12fac:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   12fbc:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   12fcc:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   12fdc:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   12fec:	66754220 20726566 65637865 64656465      Buffer exceeded
   12ffc:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   1300c:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   1301c:	00000000                                ....

00013020 <__FUNCTION__.13052>:
   13020:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001302c <__FUNCTION__.13081>:
   1302c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001303c <__FUNCTION__.13109>:
   1303c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1304c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   1305c:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   1306c:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   1307c:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   1308c:	20656874 70696863 00000000 50504128     the chip....(APP
   1309c:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   130ac:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   130bc:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   130cc:	6c616974 00657a69                       tialize.

000130d4 <__FUNCTION__.12915>:
   130d4:	70696863 6b61775f 00000065              chip_wake...

000130e0 <__FUNCTION__.12964>:
   130e0:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   130f0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13100:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   13110:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   13120:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   13130:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   13140:	6e65206f 656c6261 746e6920 75727265     o enable interru
   13150:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   13160:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   13170:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   13180:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   13190:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   131a0:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   131b0:	75622074 00000073                       t bus...

000131b8 <__FUNCTION__.12962>:
   131b8:	645f6d6e 695f7672 0074696e              nm_drv_init.

000131c4 <__FUNCTION__.12969>:
   131c4:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

000131d4 <crc7_syndrome_table>:
   131d4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   131e4:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   131f4:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   13204:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   13214:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   13224:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   13234:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   13244:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   13254:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   13264:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   13274:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   13284:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   13294:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   132a4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   132b4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   132c4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   132d4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   132e4:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   132f4:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   13304:	73756220 72726520 2e2e726f 0000002e      bus error......
   13314:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13324:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   13334:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13344:	61642064 72206174 6f707365 2065736e     d data response 
   13354:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   13364:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13374:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   13384:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   13394:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   133a4:	656c6961 61642064 72206174 6f707365     ailed data respo
   133b4:	2065736e 64616572 7562202c 72652073     nse read, bus er
   133c4:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   133d4:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   133e4:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   133f4:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   13404:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13414:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   13424:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   13434:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13444:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   13454:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   13464:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   13474:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   13484:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   13494:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   134a4:	656c6961 61642064 62206174 6b636f6c     ailed data block
   134b4:	69727720 202c6574 20737562 6f727265      write, bus erro
   134c4:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   134d4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   134e4:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   134f4:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   13504:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13514:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   13524:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   13534:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   13544:	65722064 6e6f7073 202c6573 74697277     d response, writ
   13554:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   13564:	00000000 65736552 6e612074 65722064     ....Reset and re
   13574:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   13584:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13594:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   135a4:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   135b4:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   135c4:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   135d4:	69727720 62206574 6b636f6c 30252820      write block (%0
   135e4:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   135f4:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   13604:	61746164 69727720 2e2e6574 0000002e     data write......
   13614:	65736552 6e612074 65722064 20797274     Reset and retry 
   13624:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   13634:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   13644:	72202c64 20646165 20676572 38302528     d, read reg (%08
   13654:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   13664:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   13674:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   13684:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   13694:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   136a4:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   136b4:	6e612074 65722064 20797274 25206425     t and retry %d %
   136c4:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   136d4:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   136e4:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   136f4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13704:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   13714:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   13724:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   13734:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   13744:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   13754:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13764:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   13774:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   13784:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   13794:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   137a4:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   137b4:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   137c4:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   137d4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   137e4:	6e692064 6e726574 77206c61 65746972     d internal write
   137f4:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   13804:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13814:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   13824:	64692070 002e2e2e 00003d28 00003d28     p id....(=..(=..
   13834:	00003db8 00003c7c 00003cc2 00003ce4     .=..|<...<...<..
   13844:	00003d6a 00003d6a 00003e24 00003c50     j=..j=..$>..P<..
   13854:	00003e7e 00003e7e 00003e7e 00003e7e     ~>..~>..~>..~>..
   13864:	00003d06                                .=..

00013868 <__FUNCTION__.12268>:
   13868:	5f697073 00646d63                       spi_cmd.

00013870 <__FUNCTION__.12275>:
   13870:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00013880 <__FUNCTION__.12284>:
   13880:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001388c <__FUNCTION__.12300>:
   1388c:	5f697073 61746164 6165725f 00000064     spi_data_read...

0001389c <__FUNCTION__.12315>:
   1389c:	5f697073 61746164 6972775f 00006574     spi_data_write..

000138ac <__FUNCTION__.12327>:
   138ac:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000138bc <__FUNCTION__.12338>:
   138bc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000138cc <__FUNCTION__.12350>:
   138cc:	5f697073 64616572 6765725f 00000000     spi_read_reg....

000138dc <__FUNCTION__.12363>:
   138dc:	735f6d6e 725f6970 00646165              nm_spi_read.

000138e8 <__FUNCTION__.12384>:
   138e8:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   138f8:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   13908:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   13918:	25207465 65732064 6f697373 4449206e     et %d session ID
   13928:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   13938:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   13948:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   13958:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   13968:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   13978:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   13988:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   13998:	204c5353 6b636f53 00007465              SSL Socket..

000139a4 <tcc_modules>:
   139a4:	42002000 42002400 42002800              . .B.$.B.(.B

000139b0 <_tcc_gclk_ids>:
   139b0:	001b1a1a                                ....

000139b4 <_tcc_apbcmasks>:
   139b4:	00000100 00000200 00000400              ............

000139c0 <_tcc_maxs>:
   139c0:	00ffffff 00ffffff 0000ffff              ............

000139cc <_tcc_cc_nums>:
   139cc:	00020204                                ....

000139d0 <_tcc_ow_nums>:
   139d0:	00020408                                ....

000139d4 <_tcc_intflag>:
   139d4:	00000001 00000002 00000004 00000008     ................
   139e4:	00001000 00002000 00004000 00008000     ..... ...@......
   139f4:	00010000 00020000 00040000 00080000     ................
   13a04:	42002000 42002400 42002800 462d6957     . .B.$.B.(.BWi-F
   13a14:	6f632069 63656e6e 0d646574 00000000     i connected.....
   13a24:	462d6957 69642069 6e6f6373 7463656e     Wi-Fi disconnect
   13a34:	000d6465 462d6957 50492069 20736920     ed..Wi-Fi IP is 
   13a44:	252e7525 75252e75 0d75252e 0000000a     %u.%u.%u.%u.....
   13a54:	75746361 726f7461 0000002f 6e6e6f43     actuator/...Conn
   13a64:	20746365 6c696166 206f7420 76726573     ect fail to serv
   13a74:	25287265 20212973 72746572 74692079     er(%s)! retry it
   13a84:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   13a94:	0000000a 5454514d 6f726220 2072656b     ....MQTT broker 
   13aa4:	6c636564 64656e69 756f7920 63612072     declined your ac
   13ab4:	73736563 72652021 20726f72 65646f63     cess! error code
   13ac4:	0d642520 0000000a 61746164 65723e2d      %d.....data->re
   13ad4:	705f7663 696c6275 742e6873 6369706f     cv_publish.topic
   13ae4:	7325203a 00000a0d 69706f74 616e2063     : %s....topic na
   13af4:	203a656d 0a0d7325 00000000 61746164     me: %s......data
   13b04:	65723e2d 705f7663 696c6275 742e6873     ->recv_publish.t
   13b14:	6369706f 7a69735f 25203a65 000a0d64     opic_size: %d...
   13b24:	61746164 7a697320 25203a65 000a0d64     data size: %d...
   13b34:	69706f74 69732063 203a657a 0a0d6425     topic size: %d..
   13b44:	00000000 5454514d 71657220 74736575     ....MQTT request
   13b54:	203a6465 0a0d7325 00000000 69676572     ed: %s......regi
   13b64:	72657473 725f6465 65757165 745f7473     stered_request_t
   13b74:	6369706f 7325203a 00000a0d 69676572     opic: %s....regi
   13b84:	72657473 665f6465 74636e75 3a6e6f69     stered_function:
   13b94:	0d642520 0000000a 5454514d 73696420      %d.....MQTT dis
   13ba4:	6e6e6f63 65746365 00000d64 656d6954     connected...Time
   13bb4:	6e652072 656c6261 000d2e64 5454514d     r enabled...MQTT
   13bc4:	696e6920 6c616974 74617a69 206e6f69      initialization 
   13bd4:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   13be4:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   13bf4:	5454514d 67657220 65747369 61632072     MQTT register ca
   13c04:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   13c14:	726f7272 646f6320 73692065 64252820     rror code is (%d
   13c24:	000a0d29 5454514d 6e6f4320 75676966     )...MQTT Configu
   13c34:	2e646572 0000000d 74696e49 696c6169     red.....Initiali
   13c44:	676e697a 0d2e2e2e 00000000 6e69616d     zing........main
   13c54:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   13c64:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
   13c74:	0000000a 6e69616d 326d203a 69775f6d     ....main: m2m_wi
   13c84:	695f6966 2074696e 6c6c6163 63757320     fi_init call suc
   13c94:	73736563 64252821 000a0d29 6b636f53     cess!(%d)...Sock
   13ca4:	20737465 74696e69 696c6169 2e64657a     ets initialized.
   13cb4:	0000000d 5f77656e 69706f74 6f742e63     ....new_topic.to
   13cc4:	5f636970 656d616e 7325203a 00000a0d     pic_name: %s....
   13cd4:	6c696166 74206465 7573206f 72637362     failed to subscr
   13ce4:	20656269 69706f74 25203a63 000a0d73     ibe topic: %s...
   13cf4:	6765725b 65747369 65725f72 73657571     [register_reques
   13d04:	6f745f74 5d636970 63757320 73736563     t_topic] success
   13d14:	6c6c7566 65722079 74736967 64657265     fully registered
   13d24:	71657220 74736575 706f7420 25206369      request topic %
   13d34:	6e612073 61632064 61626c6c 0d216b63     s and callback!.
   13d44:	0000000a 6765725b 65747369 65725f72     ....[register_re
   13d54:	73657571 6f745f74 5d636970 78616d20     quest_topic] max
   13d64:	6d756e20 20726562 7420666f 6369706f      number of topic
   13d74:	6c612073 64616572 65722079 74736967     s already regist
   13d84:	64657265 00000d2e 50726941 4e6e6e65     ered....AirPennN
   13d94:	442d7465 63697665 00000065 6e6e6570     et-Device...penn
   13da4:	30343731 69666977 00000000 74656564     1740wifi....deet
   13db4:	6165732e 70752e73 2e6e6e65 00756465     .seas.upenn.edu.
   13dc4:	00000002 00000003 00000028 00000029     ........(...)...
   13dd4:	00000004 00000005 00000006 00000007     ................
   13de4:	0000ffff 0000ffff 00000022 00000023     ........"...#...
   13df4:	0000ffff 0000ffff 0000ffff 0000ffff     ................
   13e04:	00000008 00000009 0000000a 0000000b     ................
   13e14:	00008ffe 00009004 00009004 00009004     ................
   13e24:	00009004 00009004 00009004 00009004     ................
   13e34:	00009004 00009004 00009004 00009004     ................
   13e44:	00009004 00009004 00009004 00009004     ................
   13e54:	00008fdc 00009004 00009004 00009004     ................
   13e64:	00009004 00009004 00009004 00009004     ................
   13e74:	00009004 00009004 00009004 00009004     ................
   13e84:	00009004 00009004 00009004 00009004     ................
   13e94:	00008ff8 00009004 00009004 00009004     ................
   13ea4:	00009004 00009004 00009004 00009004     ................
   13eb4:	00009004 00009004 00009004 00009004     ................
   13ec4:	00009004 00009004 00009004 00009004     ................
   13ed4:	00008ff2 00008f9a 00008fb0 00008fc6     ................
   13ee4:	00008f80 42000800 42000c00 42001000     .......B...B...B
   13ef4:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
   13f04:	00000e0d 0000bc42 0000bcba 0000bcba     ....B...........
   13f14:	0000bc60 0000bc5a 0000bc66 0000bc48     `...Z...f...H...
   13f24:	0000bc6c 0000bca0 0000bf84 0000bfd4     l...............
   13f34:	0000bfd4 0000bfd0 0000bf76 0000bf96     ........v.......
   13f44:	0000bf66 0000bfa8 0000bfba 0000c022     f..........."...
   13f54:	0000c050 0000c050 0000c04c 0000c01c     P...P...L.......
   13f64:	0000c028 0000c016 0000c02e 0000c034     (...........4...
   13f74:	2064656c 6e616863 72206567 65757165     led change reque
   13f84:	64657473 76207720 65756c61 6425203a     sted w value: %d
   13f94:	00000a0d 706d7570 61686320 2065676e     ....pump change 
   13fa4:	75716572 65747365 20772064 756c6176     requested w valu
   13fb4:	25203a65 000a0d64 616c6572 68632079     e: %d...relay ch
   13fc4:	65676e61 71657220 74736575 77206465     ange requested w
   13fd4:	6c617620 203a6575 0a0d6425 00000000      value: %d......
   13fe4:	6d726966 65726177 776f6420 616f6c6e     firmware downloa
   13ff4:	65722064 73657571 0d646574 00000000     d requested.....
   14004:	50424e53 00000000 32346e73 61746562     SNBP....sn42beta
   14014:	006f6872 6d726966 65726177 63757320     rho.firmware suc
   14024:	73736563 6c6c7566 6f642079 6f6c6e77     cessfully downlo
   14034:	64656461 00000d21 6d726966 65726177     aded!...firmware
   14044:	736e7520 65636375 75667373 43202e6c      unsuccessful. C
   14054:	6b636568 676f6c20 726f6620 726f6d20     heck log for mor
   14064:	65642065 6c696174 000d2e73 75206f4e     e details...No u
   14074:	74616470 6f662065 2e646e75 0000000d     pdate found.....
   14084:	2e2e0a0d 2d69572e 66206946 656c6961     .....Wi-Fi faile
   14094:	6f742064 6e6f6320 75676966 2e2e6572     d to configure..
   140a4:	00000d2e 72616f42 6e692064 61697469     ....Board initia
   140b4:	657a696c 000d2e64 20766564 203a6469     lized...dev id: 
   140c4:	30257830 0a0d7832 00000000 75746361     0x%02x......actu
   140d4:	726f7461 0000002f 6e6e7552 20676e69     ator/...Running 
   140e4:	4d207361 20545451 72657355 7325203a     as MQTT User: %s
   140f4:	00000a0d 2f30672f 2f64656c 75746361     ..../g0/led/actu
   14104:	726f7461 0000002f 646e6553 20676e69     ator/...Sending 
   14114:	736e6573 7620726f 65756c61 6f742073     sensor values to
   14124:	6f6c4320 0d2e6475 49514d00 00706473      Cloud...MQIsdp.

00014134 <_global_impure_ptr>:
   14134:	20000018 4f500043 00584953 4e49002e     ... C.POSIX...IN
   14144:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
   14154:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   14164:	32313000 36353433 61393837 65646362     .0123456789abcde
   14174:	20000066                                         f.

00014176 <_ctype_>:
   14176:	20202000 20202020 28282020 20282828     .         ((((( 
   14186:	20202020 20202020 20202020 20202020                     
   14196:	10108820 10101010 10101010 10101010      ...............
   141a6:	04040410 04040404 10040404 10101010     ................
   141b6:	41411010 41414141 01010101 01010101     ..AAAAAA........
   141c6:	01010101 01010101 01010101 10101010     ................
   141d6:	42421010 42424242 02020202 02020202     ..BBBBBB........
   141e6:	02020202 02020202 02020202 10101010     ................
   141f6:	00000020 00000000 00000000 00000000      ...............
	...
   14276:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

00014284 <__sf_fake_stderr>:
	...

000142a4 <__sf_fake_stdin>:
	...

000142c4 <__sf_fake_stdout>:
	...

000142e8 <__mprec_bigtens>:
   142e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   142f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   14308:	7f73bf3c 75154fdd                       <.s..O.u

00014310 <__mprec_tens>:
   14310:	00000000 3ff00000 00000000 40240000     .......?......$@
   14320:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   14330:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   14340:	00000000 412e8480 00000000 416312d0     .......A......cA
   14350:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   14360:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   14370:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   14380:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   14390:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   143a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   143b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   143c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   143d0:	79d99db4 44ea7843                       ...yCx.D

000143d8 <p05.6047>:
   143d8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   143e8:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
   143f8:	000113e0 000113c2 0001137c 0001129a     ........|.......
   14408:	0001137c 000113b4 0001137c 0001129a     |.......|.......
   14418:	000113c2 000113c2 000113b4 0001129a     ................
   14428:	00011292 00011292 00011292 000115f8     ................
   14438:	00011c40 00011b00 00011b00 00011afc     @...............
   14448:	00011c18 00011c18 00011c0a 00011afc     ................
   14458:	00011c18 00011c0a 00011c18 00011afc     ................
   14468:	00011c20 00011c20 00011c20 00011e24      ... ... ...$...

00014478 <_init>:
   14478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1447a:	46c0      	nop			; (mov r8, r8)
   1447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1447e:	bc08      	pop	{r3}
   14480:	469e      	mov	lr, r3
   14482:	4770      	bx	lr

00014484 <__init_array_start>:
   14484:	000000dd 	.word	0x000000dd

00014488 <_fini>:
   14488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1448a:	46c0      	nop			; (mov r8, r8)
   1448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1448e:	bc08      	pop	{r3}
   14490:	469e      	mov	lr, r3
   14492:	4770      	bx	lr

00014494 <__fini_array_start>:
   14494:	000000b5 	.word	0x000000b5
