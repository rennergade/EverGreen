
EverGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001a3b0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  0001a3b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000738  200001e8  0001a598  000301e8  2**2
                  ALLOC
  3 .stack        00002000  20000920  0001acd0  000301e8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
  6 .debug_info   00094151  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000097b4  00000000  00000000  000c442b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a447  00000000  00000000  000cdbdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c88  00000000  00000000  000d8026  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001a48  00000000  00000000  000d9cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028999  00000000  00000000  000db6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002a64d  00000000  00000000  0010408f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009ae9f  00000000  00000000  0012e6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000075e0  00000000  00000000  001c957c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 29 00 20 cd 11 01 00 c5 12 01 00 c5 12 01 00      ). ............
	...
      2c:	c5 12 01 00 00 00 00 00 00 00 00 00 c5 12 01 00     ................
      3c:	c5 12 01 00 c5 12 01 00 c5 12 01 00 c5 12 01 00     ................
      4c:	c5 12 01 00 b1 8c 00 00 c5 12 01 00 c5 12 01 00     ................
      5c:	c5 12 01 00 c5 12 01 00 25 ff 00 00 3d ff 00 00     ........%...=...
      6c:	55 ff 00 00 6d ff 00 00 85 ff 00 00 9d ff 00 00     U...m...........
      7c:	8d af 00 00 a1 af 00 00 b5 af 00 00 c5 12 01 00     ................
      8c:	c5 12 01 00 c5 12 01 00 00 00 00 00 00 00 00 00     ................
      9c:	c5 12 01 00 c5 12 01 00 c5 12 01 00 c5 12 01 00     ................
      ac:	c5 12 01 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001e8 	.word	0x200001e8
      d4:	00000000 	.word	0x00000000
      d8:	0001a3b0 	.word	0x0001a3b0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001ec 	.word	0x200001ec
     108:	0001a3b0 	.word	0x0001a3b0
     10c:	0001a3b0 	.word	0x0001a3b0
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <system_interrupt_enable+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     140:	b580      	push	{r7, lr}
     142:	b084      	sub	sp, #16
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     14e:	68fb      	ldr	r3, [r7, #12]
     150:	69db      	ldr	r3, [r3, #28]
     152:	1e5a      	subs	r2, r3, #1
     154:	4193      	sbcs	r3, r2
     156:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     158:	0018      	movs	r0, r3
     15a:	46bd      	mov	sp, r7
     15c:	b004      	add	sp, #16
     15e:	bd80      	pop	{r7, pc}

00000160 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     168:	46c0      	nop			; (mov r8, r8)
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	0018      	movs	r0, r3
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <_usart_wait_for_sync+0x20>)
     170:	4798      	blx	r3
     172:	1e03      	subs	r3, r0, #0
     174:	d1f9      	bne.n	16a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000141 	.word	0x00000141

00000184 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	2280      	movs	r2, #128	; 0x80
     190:	05d2      	lsls	r2, r2, #23
     192:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     194:	687b      	ldr	r3, [r7, #4]
     196:	2200      	movs	r2, #0
     198:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     19a:	687b      	ldr	r3, [r7, #4]
     19c:	22ff      	movs	r2, #255	; 0xff
     19e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2200      	movs	r2, #0
     1aa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2296      	movs	r2, #150	; 0x96
     1b0:	0192      	lsls	r2, r2, #6
     1b2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	2224      	movs	r2, #36	; 0x24
     1b8:	2101      	movs	r1, #1
     1ba:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2225      	movs	r2, #37	; 0x25
     1c0:	2101      	movs	r1, #1
     1c2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	2226      	movs	r2, #38	; 0x26
     1c8:	2100      	movs	r1, #0
     1ca:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	2227      	movs	r2, #39	; 0x27
     1d0:	2100      	movs	r1, #0
     1d2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	2200      	movs	r2, #0
     1d8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     1da:	687b      	ldr	r3, [r7, #4]
     1dc:	2288      	movs	r2, #136	; 0x88
     1de:	0352      	lsls	r2, r2, #13
     1e0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	222c      	movs	r2, #44	; 0x2c
     1e6:	2100      	movs	r1, #0
     1e8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	222d      	movs	r2, #45	; 0x2d
     1ee:	2100      	movs	r1, #0
     1f0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	2200      	movs	r2, #0
     1f6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	2200      	movs	r2, #0
     1fc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     1fe:	687b      	ldr	r3, [r7, #4]
     200:	2200      	movs	r2, #0
     202:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     204:	687b      	ldr	r3, [r7, #4]
     206:	2200      	movs	r2, #0
     208:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	2200      	movs	r2, #0
     20e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     210:	687b      	ldr	r3, [r7, #4]
     212:	2200      	movs	r2, #0
     214:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     216:	687b      	ldr	r3, [r7, #4]
     218:	2200      	movs	r2, #0
     21a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	2200      	movs	r2, #0
     220:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     222:	687b      	ldr	r3, [r7, #4]
     224:	2200      	movs	r2, #0
     226:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	2200      	movs	r2, #0
     22c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     22e:	687b      	ldr	r3, [r7, #4]
     230:	2213      	movs	r2, #19
     232:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2200      	movs	r2, #0
     238:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	46bd      	mov	sp, r7
     23e:	b002      	add	sp, #8
     240:	bd80      	pop	{r7, pc}
	...

00000244 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     24c:	687b      	ldr	r3, [r7, #4]
     24e:	681b      	ldr	r3, [r3, #0]
     250:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     252:	687b      	ldr	r3, [r7, #4]
     254:	681b      	ldr	r3, [r3, #0]
     256:	0018      	movs	r0, r3
     258:	4b09      	ldr	r3, [pc, #36]	; (280 <usart_enable+0x3c>)
     25a:	4798      	blx	r3
     25c:	0003      	movs	r3, r0
     25e:	0018      	movs	r0, r3
     260:	4b08      	ldr	r3, [pc, #32]	; (284 <usart_enable+0x40>)
     262:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     264:	687b      	ldr	r3, [r7, #4]
     266:	0018      	movs	r0, r3
     268:	4b07      	ldr	r3, [pc, #28]	; (288 <usart_enable+0x44>)
     26a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     26c:	68fb      	ldr	r3, [r7, #12]
     26e:	681b      	ldr	r3, [r3, #0]
     270:	2202      	movs	r2, #2
     272:	431a      	orrs	r2, r3
     274:	68fb      	ldr	r3, [r7, #12]
     276:	601a      	str	r2, [r3, #0]
}
     278:	46c0      	nop			; (mov r8, r8)
     27a:	46bd      	mov	sp, r7
     27c:	b004      	add	sp, #16
     27e:	bd80      	pop	{r7, pc}
     280:	0000fee1 	.word	0x0000fee1
     284:	00000115 	.word	0x00000115
     288:	00000161 	.word	0x00000161

0000028c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     28c:	b580      	push	{r7, lr}
     28e:	b084      	sub	sp, #16
     290:	af00      	add	r7, sp, #0
     292:	60f8      	str	r0, [r7, #12]
     294:	60b9      	str	r1, [r7, #8]
     296:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
     298:	687a      	ldr	r2, [r7, #4]
     29a:	68b9      	ldr	r1, [r7, #8]
     29c:	68fb      	ldr	r3, [r7, #12]
     29e:	0018      	movs	r0, r3
     2a0:	4b05      	ldr	r3, [pc, #20]	; (2b8 <usart_serial_init+0x2c>)
     2a2:	4798      	blx	r3
     2a4:	1e03      	subs	r3, r0, #0
     2a6:	d101      	bne.n	2ac <usart_serial_init+0x20>
		return true;
     2a8:	2301      	movs	r3, #1
     2aa:	e000      	b.n	2ae <usart_serial_init+0x22>
	}
	else {
		return false;
     2ac:	2300      	movs	r3, #0
	}
}
     2ae:	0018      	movs	r0, r3
     2b0:	46bd      	mov	sp, r7
     2b2:	b004      	add	sp, #16
     2b4:	bd80      	pop	{r7, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	0000f719 	.word	0x0000f719

000002bc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	6078      	str	r0, [r7, #4]
     2c4:	000a      	movs	r2, r1
     2c6:	1cfb      	adds	r3, r7, #3
     2c8:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	1cfb      	adds	r3, r7, #3
     2ce:	781b      	ldrb	r3, [r3, #0]
     2d0:	b29a      	uxth	r2, r3
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	0011      	movs	r1, r2
     2d6:	0018      	movs	r0, r3
     2d8:	4b04      	ldr	r3, [pc, #16]	; (2ec <usart_serial_putchar+0x30>)
     2da:	4798      	blx	r3
     2dc:	1e03      	subs	r3, r0, #0
     2de:	d1f5      	bne.n	2cc <usart_serial_putchar+0x10>

	return STATUS_OK;
     2e0:	2300      	movs	r3, #0
}
     2e2:	0018      	movs	r0, r3
     2e4:	46bd      	mov	sp, r7
     2e6:	b002      	add	sp, #8
     2e8:	bd80      	pop	{r7, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	0000f98d 	.word	0x0000f98d

000002f0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b084      	sub	sp, #16
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
     2f8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     2fa:	230e      	movs	r3, #14
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	2200      	movs	r2, #0
     300:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     302:	46c0      	nop			; (mov r8, r8)
     304:	230e      	movs	r3, #14
     306:	18fa      	adds	r2, r7, r3
     308:	687b      	ldr	r3, [r7, #4]
     30a:	0011      	movs	r1, r2
     30c:	0018      	movs	r0, r3
     30e:	4b07      	ldr	r3, [pc, #28]	; (32c <usart_serial_getchar+0x3c>)
     310:	4798      	blx	r3
     312:	1e03      	subs	r3, r0, #0
     314:	d1f6      	bne.n	304 <usart_serial_getchar+0x14>

	*c = temp;
     316:	230e      	movs	r3, #14
     318:	18fb      	adds	r3, r7, r3
     31a:	881b      	ldrh	r3, [r3, #0]
     31c:	b2da      	uxtb	r2, r3
     31e:	683b      	ldr	r3, [r7, #0]
     320:	701a      	strb	r2, [r3, #0]
}
     322:	46c0      	nop			; (mov r8, r8)
     324:	46bd      	mov	sp, r7
     326:	b004      	add	sp, #16
     328:	bd80      	pop	{r7, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	0000f9f1 	.word	0x0000f9f1

00000330 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     330:	b580      	push	{r7, lr}
     332:	b084      	sub	sp, #16
     334:	af00      	add	r7, sp, #0
     336:	60f8      	str	r0, [r7, #12]
     338:	60b9      	str	r1, [r7, #8]
     33a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     33c:	4b10      	ldr	r3, [pc, #64]	; (380 <stdio_serial_init+0x50>)
     33e:	68fa      	ldr	r2, [r7, #12]
     340:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     342:	4b10      	ldr	r3, [pc, #64]	; (384 <stdio_serial_init+0x54>)
     344:	4a10      	ldr	r2, [pc, #64]	; (388 <stdio_serial_init+0x58>)
     346:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     348:	4b10      	ldr	r3, [pc, #64]	; (38c <stdio_serial_init+0x5c>)
     34a:	4a11      	ldr	r2, [pc, #68]	; (390 <stdio_serial_init+0x60>)
     34c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
     34e:	687a      	ldr	r2, [r7, #4]
     350:	68b9      	ldr	r1, [r7, #8]
     352:	68fb      	ldr	r3, [r7, #12]
     354:	0018      	movs	r0, r3
     356:	4b0f      	ldr	r3, [pc, #60]	; (394 <stdio_serial_init+0x64>)
     358:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     35a:	4b0f      	ldr	r3, [pc, #60]	; (398 <stdio_serial_init+0x68>)
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	689b      	ldr	r3, [r3, #8]
     360:	2100      	movs	r1, #0
     362:	0018      	movs	r0, r3
     364:	4b0d      	ldr	r3, [pc, #52]	; (39c <stdio_serial_init+0x6c>)
     366:	4798      	blx	r3
	setbuf(stdin, NULL);
     368:	4b0b      	ldr	r3, [pc, #44]	; (398 <stdio_serial_init+0x68>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	685b      	ldr	r3, [r3, #4]
     36e:	2100      	movs	r1, #0
     370:	0018      	movs	r0, r3
     372:	4b0a      	ldr	r3, [pc, #40]	; (39c <stdio_serial_init+0x6c>)
     374:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     376:	46c0      	nop			; (mov r8, r8)
     378:	46bd      	mov	sp, r7
     37a:	b004      	add	sp, #16
     37c:	bd80      	pop	{r7, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	20000900 	.word	0x20000900
     384:	200008fc 	.word	0x200008fc
     388:	000002bd 	.word	0x000002bd
     38c:	200008f8 	.word	0x200008f8
     390:	000002f1 	.word	0x000002f1
     394:	0000028d 	.word	0x0000028d
     398:	20000018 	.word	0x20000018
     39c:	000130c5 	.word	0x000130c5

000003a0 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
     3a0:	b580      	push	{r7, lr}
     3a2:	b090      	sub	sp, #64	; 0x40
     3a4:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
     3a6:	003b      	movs	r3, r7
     3a8:	0018      	movs	r0, r3
     3aa:	4b13      	ldr	r3, [pc, #76]	; (3f8 <configure_usart+0x58>)
     3ac:	4798      	blx	r3
	config_usart.baudrate = 115200;
     3ae:	003b      	movs	r3, r7
     3b0:	22e1      	movs	r2, #225	; 0xe1
     3b2:	0252      	lsls	r2, r2, #9
     3b4:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     3b6:	003b      	movs	r3, r7
     3b8:	22c4      	movs	r2, #196	; 0xc4
     3ba:	0392      	lsls	r2, r2, #14
     3bc:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
     3be:	003b      	movs	r3, r7
     3c0:	2201      	movs	r2, #1
     3c2:	4252      	negs	r2, r2
     3c4:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
     3c6:	003b      	movs	r3, r7
     3c8:	2201      	movs	r2, #1
     3ca:	4252      	negs	r2, r2
     3cc:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     3ce:	003b      	movs	r3, r7
     3d0:	4a0a      	ldr	r2, [pc, #40]	; (3fc <configure_usart+0x5c>)
     3d2:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
     3d4:	003b      	movs	r3, r7
     3d6:	4a0a      	ldr	r2, [pc, #40]	; (400 <configure_usart+0x60>)
     3d8:	63da      	str	r2, [r3, #60]	; 0x3c

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);
     3da:	003a      	movs	r2, r7
     3dc:	4909      	ldr	r1, [pc, #36]	; (404 <configure_usart+0x64>)
     3de:	4b0a      	ldr	r3, [pc, #40]	; (408 <configure_usart+0x68>)
     3e0:	0018      	movs	r0, r3
     3e2:	4b0a      	ldr	r3, [pc, #40]	; (40c <configure_usart+0x6c>)
     3e4:	4798      	blx	r3

	usart_enable(&usart_instance);
     3e6:	4b08      	ldr	r3, [pc, #32]	; (408 <configure_usart+0x68>)
     3e8:	0018      	movs	r0, r3
     3ea:	4b09      	ldr	r3, [pc, #36]	; (410 <configure_usart+0x70>)
     3ec:	4798      	blx	r3
}
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	46bd      	mov	sp, r7
     3f2:	b010      	add	sp, #64	; 0x40
     3f4:	bd80      	pop	{r7, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00000185 	.word	0x00000185
     3fc:	002a0003 	.word	0x002a0003
     400:	002b0003 	.word	0x002b0003
     404:	42001800 	.word	0x42001800
     408:	200007ac 	.word	0x200007ac
     40c:	00000331 	.word	0x00000331
     410:	00000245 	.word	0x00000245

00000414 <system_interrupt_enable>:
{
     414:	b580      	push	{r7, lr}
     416:	b082      	sub	sp, #8
     418:	af00      	add	r7, sp, #0
     41a:	0002      	movs	r2, r0
     41c:	1dfb      	adds	r3, r7, #7
     41e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     420:	4b06      	ldr	r3, [pc, #24]	; (43c <system_interrupt_enable+0x28>)
     422:	1dfa      	adds	r2, r7, #7
     424:	7812      	ldrb	r2, [r2, #0]
     426:	0011      	movs	r1, r2
     428:	221f      	movs	r2, #31
     42a:	400a      	ands	r2, r1
     42c:	2101      	movs	r1, #1
     42e:	4091      	lsls	r1, r2
     430:	000a      	movs	r2, r1
     432:	601a      	str	r2, [r3, #0]
}
     434:	46c0      	nop			; (mov r8, r8)
     436:	46bd      	mov	sp, r7
     438:	b002      	add	sp, #8
     43a:	bd80      	pop	{r7, pc}
     43c:	e000e100 	.word	0xe000e100

00000440 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     440:	b580      	push	{r7, lr}
     442:	b084      	sub	sp, #16
     444:	af00      	add	r7, sp, #0
     446:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     448:	687b      	ldr	r3, [r7, #4]
     44a:	681b      	ldr	r3, [r3, #0]
     44c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     44e:	68fb      	ldr	r3, [r7, #12]
     450:	69db      	ldr	r3, [r3, #28]
     452:	2207      	movs	r2, #7
     454:	4013      	ands	r3, r2
     456:	1e5a      	subs	r2, r3, #1
     458:	4193      	sbcs	r3, r2
     45a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     45c:	0018      	movs	r0, r3
     45e:	46bd      	mov	sp, r7
     460:	b004      	add	sp, #16
     462:	bd80      	pop	{r7, pc}

00000464 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     464:	b580      	push	{r7, lr}
     466:	b082      	sub	sp, #8
     468:	af00      	add	r7, sp, #0
     46a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     46c:	46c0      	nop			; (mov r8, r8)
     46e:	687b      	ldr	r3, [r7, #4]
     470:	0018      	movs	r0, r3
     472:	4b04      	ldr	r3, [pc, #16]	; (484 <_i2c_master_wait_for_sync+0x20>)
     474:	4798      	blx	r3
     476:	1e03      	subs	r3, r0, #0
     478:	d1f9      	bne.n	46e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	46bd      	mov	sp, r7
     47e:	b002      	add	sp, #8
     480:	bd80      	pop	{r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	00000441 	.word	0x00000441

00000488 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     490:	687b      	ldr	r3, [r7, #4]
     492:	2264      	movs	r2, #100	; 0x64
     494:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     496:	687b      	ldr	r3, [r7, #4]
     498:	4a1b      	ldr	r2, [pc, #108]	; (508 <i2c_master_get_config_defaults+0x80>)
     49a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	2200      	movs	r2, #0
     4a0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	2200      	movs	r2, #0
     4a6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	2200      	movs	r2, #0
     4ac:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	2280      	movs	r2, #128	; 0x80
     4b2:	0392      	lsls	r2, r2, #14
     4b4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	2201      	movs	r2, #1
     4ba:	4252      	negs	r2, r2
     4bc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	2201      	movs	r2, #1
     4c2:	4252      	negs	r2, r2
     4c4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	2200      	movs	r2, #0
     4ca:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	2200      	movs	r2, #0
     4d0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	2224      	movs	r2, #36	; 0x24
     4d6:	2100      	movs	r1, #0
     4d8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	2200      	movs	r2, #0
     4de:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	222c      	movs	r2, #44	; 0x2c
     4e4:	2100      	movs	r1, #0
     4e6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	222d      	movs	r2, #45	; 0x2d
     4ec:	2100      	movs	r1, #0
     4ee:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	222e      	movs	r2, #46	; 0x2e
     4f4:	2100      	movs	r1, #0
     4f6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	22d7      	movs	r2, #215	; 0xd7
     4fc:	861a      	strh	r2, [r3, #48]	; 0x30
}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	46bd      	mov	sp, r7
     502:	b002      	add	sp, #8
     504:	bd80      	pop	{r7, pc}
     506:	46c0      	nop			; (mov r8, r8)
     508:	00000d48 	.word	0x00000d48

0000050c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
     50c:	b580      	push	{r7, lr}
     50e:	b084      	sub	sp, #16
     510:	af00      	add	r7, sp, #0
     512:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     514:	687b      	ldr	r3, [r7, #4]
     516:	681b      	ldr	r3, [r3, #0]
     518:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     51a:	2300      	movs	r3, #0
     51c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     51e:	687b      	ldr	r3, [r7, #4]
     520:	0018      	movs	r0, r3
     522:	4b14      	ldr	r3, [pc, #80]	; (574 <i2c_master_enable+0x68>)
     524:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     526:	68bb      	ldr	r3, [r7, #8]
     528:	681b      	ldr	r3, [r3, #0]
     52a:	2202      	movs	r2, #2
     52c:	431a      	orrs	r2, r3
     52e:	68bb      	ldr	r3, [r7, #8]
     530:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     532:	687b      	ldr	r3, [r7, #4]
     534:	681b      	ldr	r3, [r3, #0]
     536:	0018      	movs	r0, r3
     538:	4b0f      	ldr	r3, [pc, #60]	; (578 <i2c_master_enable+0x6c>)
     53a:	4798      	blx	r3
     53c:	0003      	movs	r3, r0
     53e:	0018      	movs	r0, r3
     540:	4b0e      	ldr	r3, [pc, #56]	; (57c <i2c_master_enable+0x70>)
     542:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     544:	e00c      	b.n	560 <i2c_master_enable+0x54>
		timeout_counter++;
     546:	68fb      	ldr	r3, [r7, #12]
     548:	3301      	adds	r3, #1
     54a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	88db      	ldrh	r3, [r3, #6]
     550:	001a      	movs	r2, r3
     552:	68fb      	ldr	r3, [r7, #12]
     554:	429a      	cmp	r2, r3
     556:	d803      	bhi.n	560 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     558:	68bb      	ldr	r3, [r7, #8]
     55a:	2210      	movs	r2, #16
     55c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
     55e:	e006      	b.n	56e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     560:	68bb      	ldr	r3, [r7, #8]
     562:	8b5b      	ldrh	r3, [r3, #26]
     564:	b29b      	uxth	r3, r3
     566:	001a      	movs	r2, r3
     568:	2310      	movs	r3, #16
     56a:	4013      	ands	r3, r2
     56c:	d0eb      	beq.n	546 <i2c_master_enable+0x3a>
		}
	}
}
     56e:	46bd      	mov	sp, r7
     570:	b004      	add	sp, #16
     572:	bd80      	pop	{r7, pc}
     574:	00000465 	.word	0x00000465
     578:	0000fee1 	.word	0x0000fee1
     57c:	00000415 	.word	0x00000415

00000580 <configure_i2c_hdc>:
 **/

#include "hdc_1080.h"

void configure_i2c_hdc()
{
     580:	b590      	push	{r4, r7, lr}
     582:	b08f      	sub	sp, #60	; 0x3c
     584:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
     586:	003b      	movs	r3, r7
     588:	0018      	movs	r0, r3
     58a:	4b15      	ldr	r3, [pc, #84]	; (5e0 <configure_i2c_hdc+0x60>)
     58c:	4798      	blx	r3
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
     58e:	003b      	movs	r3, r7
     590:	2201      	movs	r2, #1
     592:	4252      	negs	r2, r2
     594:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     596:	003b      	movs	r3, r7
     598:	4a12      	ldr	r2, [pc, #72]	; (5e4 <configure_i2c_hdc+0x64>)
     59a:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     59c:	003b      	movs	r3, r7
     59e:	4a12      	ldr	r2, [pc, #72]	; (5e8 <configure_i2c_hdc+0x68>)
     5a0:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
     5a2:	003b      	movs	r3, r7
     5a4:	2200      	movs	r2, #0
     5a6:	731a      	strb	r2, [r3, #12]
	enum status_code init_status = i2c_master_init(&i2c_hdc, SERCOM3, &config_i2c_master);
     5a8:	2337      	movs	r3, #55	; 0x37
     5aa:	18fc      	adds	r4, r7, r3
     5ac:	003a      	movs	r2, r7
     5ae:	490f      	ldr	r1, [pc, #60]	; (5ec <configure_i2c_hdc+0x6c>)
     5b0:	4b0f      	ldr	r3, [pc, #60]	; (5f0 <configure_i2c_hdc+0x70>)
     5b2:	0018      	movs	r0, r3
     5b4:	4b0f      	ldr	r3, [pc, #60]	; (5f4 <configure_i2c_hdc+0x74>)
     5b6:	4798      	blx	r3
     5b8:	0003      	movs	r3, r0
     5ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != init_status) {
     5bc:	2337      	movs	r3, #55	; 0x37
     5be:	18fb      	adds	r3, r7, r3
     5c0:	781b      	ldrb	r3, [r3, #0]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d004      	beq.n	5d0 <configure_i2c_hdc+0x50>
		printf("failed to initialize HDC1080 driver.\r\n");
     5c6:	4b0c      	ldr	r3, [pc, #48]	; (5f8 <configure_i2c_hdc+0x78>)
     5c8:	0018      	movs	r0, r3
     5ca:	4b0c      	ldr	r3, [pc, #48]	; (5fc <configure_i2c_hdc+0x7c>)
     5cc:	4798      	blx	r3
     5ce:	e003      	b.n	5d8 <configure_i2c_hdc+0x58>
		return;
	}
	i2c_master_enable(&i2c_hdc);
     5d0:	4b07      	ldr	r3, [pc, #28]	; (5f0 <configure_i2c_hdc+0x70>)
     5d2:	0018      	movs	r0, r3
     5d4:	4b0a      	ldr	r3, [pc, #40]	; (600 <configure_i2c_hdc+0x80>)
     5d6:	4798      	blx	r3
}
     5d8:	46bd      	mov	sp, r7
     5da:	b00f      	add	sp, #60	; 0x3c
     5dc:	bd90      	pop	{r4, r7, pc}
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	00000489 	.word	0x00000489
     5e4:	00160002 	.word	0x00160002
     5e8:	00170002 	.word	0x00170002
     5ec:	42001400 	.word	0x42001400
     5f0:	200002c8 	.word	0x200002c8
     5f4:	0000e0dd 	.word	0x0000e0dd
     5f8:	00017a00 	.word	0x00017a00
     5fc:	0001308d 	.word	0x0001308d
     600:	0000050d 	.word	0x0000050d

00000604 <set_resolution>:
//NOTE: bit[10] = 1 for 11 bit temp
//NOTE: bit[9:8] = 00 for 14 bit humidity
//NOTE: bit[9:8] = 01 for 11 bit humidity
//NOTE: bit[9:8] = 10 for 8 bit humidity
void set_resolution(hdc_resolution temp_resolution, hdc_resolution humidity_resolution)
{
     604:	b590      	push	{r4, r7, lr}
     606:	b089      	sub	sp, #36	; 0x24
     608:	af00      	add	r7, sp, #0
     60a:	0002      	movs	r2, r0
     60c:	1dfb      	adds	r3, r7, #7
     60e:	701a      	strb	r2, [r3, #0]
     610:	1dbb      	adds	r3, r7, #6
     612:	1c0a      	adds	r2, r1, #0
     614:	701a      	strb	r2, [r3, #0]
	int8_t data_packet[3];

	data_packet[0] = HDC_SET_RES;
     616:	2318      	movs	r3, #24
     618:	18fb      	adds	r3, r7, r3
     61a:	2202      	movs	r2, #2
     61c:	701a      	strb	r2, [r3, #0]
	uint8_t write_byte = 0;
     61e:	231f      	movs	r3, #31
     620:	18fb      	adds	r3, r7, r3
     622:	2200      	movs	r2, #0
     624:	701a      	strb	r2, [r3, #0]
	switch (temp_resolution) {
     626:	1dfb      	adds	r3, r7, #7
     628:	781b      	ldrb	r3, [r3, #0]
     62a:	2b01      	cmp	r3, #1
     62c:	d007      	beq.n	63e <set_resolution+0x3a>
     62e:	2b02      	cmp	r3, #2
     630:	d000      	beq.n	634 <set_resolution+0x30>
		write_byte = (1 << 2);
		break;
	}
	default: {
		//TODO: error
		return;
     632:	e07e      	b.n	732 <set_resolution+0x12e>
		write_byte = 0;
     634:	231f      	movs	r3, #31
     636:	18fb      	adds	r3, r7, r3
     638:	2200      	movs	r2, #0
     63a:	701a      	strb	r2, [r3, #0]
		break;
     63c:	e004      	b.n	648 <set_resolution+0x44>
		write_byte = (1 << 2);
     63e:	231f      	movs	r3, #31
     640:	18fb      	adds	r3, r7, r3
     642:	2204      	movs	r2, #4
     644:	701a      	strb	r2, [r3, #0]
		break;
     646:	46c0      	nop			; (mov r8, r8)
	}
	}

	switch (humidity_resolution) {
     648:	1dbb      	adds	r3, r7, #6
     64a:	781b      	ldrb	r3, [r3, #0]
     64c:	2b01      	cmp	r3, #1
     64e:	d00b      	beq.n	668 <set_resolution+0x64>
     650:	2b02      	cmp	r3, #2
     652:	d002      	beq.n	65a <set_resolution+0x56>
     654:	2b00      	cmp	r3, #0
     656:	d010      	beq.n	67a <set_resolution+0x76>
		write_byte |= 2;
		break;
	}
	default: {
		//TODO: error
		return;
     658:	e06b      	b.n	732 <set_resolution+0x12e>
		write_byte |= 0;
     65a:	231f      	movs	r3, #31
     65c:	18fb      	adds	r3, r7, r3
     65e:	221f      	movs	r2, #31
     660:	18ba      	adds	r2, r7, r2
     662:	7812      	ldrb	r2, [r2, #0]
     664:	701a      	strb	r2, [r3, #0]
		break;
     666:	e011      	b.n	68c <set_resolution+0x88>
		write_byte |= 1;
     668:	231f      	movs	r3, #31
     66a:	18fb      	adds	r3, r7, r3
     66c:	221f      	movs	r2, #31
     66e:	18ba      	adds	r2, r7, r2
     670:	7812      	ldrb	r2, [r2, #0]
     672:	2101      	movs	r1, #1
     674:	430a      	orrs	r2, r1
     676:	701a      	strb	r2, [r3, #0]
		break;
     678:	e008      	b.n	68c <set_resolution+0x88>
		write_byte |= 2;
     67a:	231f      	movs	r3, #31
     67c:	18fb      	adds	r3, r7, r3
     67e:	221f      	movs	r2, #31
     680:	18ba      	adds	r2, r7, r2
     682:	7812      	ldrb	r2, [r2, #0]
     684:	2102      	movs	r1, #2
     686:	430a      	orrs	r2, r1
     688:	701a      	strb	r2, [r3, #0]
		break;
     68a:	46c0      	nop			; (mov r8, r8)
	}
	}
	write_byte |= (1 << 4);
     68c:	231f      	movs	r3, #31
     68e:	18fb      	adds	r3, r7, r3
     690:	221f      	movs	r2, #31
     692:	18ba      	adds	r2, r7, r2
     694:	7812      	ldrb	r2, [r2, #0]
     696:	2110      	movs	r1, #16
     698:	430a      	orrs	r2, r1
     69a:	701a      	strb	r2, [r3, #0]
	data_packet[1] = write_byte;
     69c:	231f      	movs	r3, #31
     69e:	18fb      	adds	r3, r7, r3
     6a0:	2200      	movs	r2, #0
     6a2:	569a      	ldrsb	r2, [r3, r2]
     6a4:	2318      	movs	r3, #24
     6a6:	18fb      	adds	r3, r7, r3
     6a8:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x00;
     6aa:	2318      	movs	r3, #24
     6ac:	18fb      	adds	r3, r7, r3
     6ae:	2200      	movs	r2, #0
     6b0:	709a      	strb	r2, [r3, #2]
	printf("data packet: 0x%02x 0x%02x 0x%02x\r\n", data_packet[0], data_packet[1], data_packet[2]);
     6b2:	2318      	movs	r3, #24
     6b4:	18fb      	adds	r3, r7, r3
     6b6:	781b      	ldrb	r3, [r3, #0]
     6b8:	b25b      	sxtb	r3, r3
     6ba:	0019      	movs	r1, r3
     6bc:	2318      	movs	r3, #24
     6be:	18fb      	adds	r3, r7, r3
     6c0:	785b      	ldrb	r3, [r3, #1]
     6c2:	b25b      	sxtb	r3, r3
     6c4:	001a      	movs	r2, r3
     6c6:	2318      	movs	r3, #24
     6c8:	18fb      	adds	r3, r7, r3
     6ca:	789b      	ldrb	r3, [r3, #2]
     6cc:	b25b      	sxtb	r3, r3
     6ce:	481a      	ldr	r0, [pc, #104]	; (738 <set_resolution+0x134>)
     6d0:	4c1a      	ldr	r4, [pc, #104]	; (73c <set_resolution+0x138>)
     6d2:	47a0      	blx	r4
	struct i2c_master_packet packet = {
     6d4:	230c      	movs	r3, #12
     6d6:	18fb      	adds	r3, r7, r3
     6d8:	2240      	movs	r2, #64	; 0x40
     6da:	801a      	strh	r2, [r3, #0]
     6dc:	230c      	movs	r3, #12
     6de:	18fb      	adds	r3, r7, r3
     6e0:	2203      	movs	r2, #3
     6e2:	805a      	strh	r2, [r3, #2]
     6e4:	230c      	movs	r3, #12
     6e6:	18fb      	adds	r3, r7, r3
     6e8:	2218      	movs	r2, #24
     6ea:	18ba      	adds	r2, r7, r2
     6ec:	605a      	str	r2, [r3, #4]
     6ee:	230c      	movs	r3, #12
     6f0:	18fb      	adds	r3, r7, r3
     6f2:	2200      	movs	r2, #0
     6f4:	721a      	strb	r2, [r3, #8]
     6f6:	230c      	movs	r3, #12
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	2200      	movs	r2, #0
     6fc:	725a      	strb	r2, [r3, #9]
     6fe:	230c      	movs	r3, #12
     700:	18fb      	adds	r3, r7, r3
     702:	2200      	movs	r2, #0
     704:	729a      	strb	r2, [r3, #10]
		.data			= data_packet,
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
     706:	231e      	movs	r3, #30
     708:	18fc      	adds	r4, r7, r3
     70a:	230c      	movs	r3, #12
     70c:	18fa      	adds	r2, r7, r3
     70e:	4b0c      	ldr	r3, [pc, #48]	; (740 <set_resolution+0x13c>)
     710:	0011      	movs	r1, r2
     712:	0018      	movs	r0, r3
     714:	4b0b      	ldr	r3, [pc, #44]	; (744 <set_resolution+0x140>)
     716:	4798      	blx	r3
     718:	0003      	movs	r3, r0
     71a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != i2c_status)
     71c:	231e      	movs	r3, #30
     71e:	18fb      	adds	r3, r7, r3
     720:	781b      	ldrb	r3, [r3, #0]
     722:	2b00      	cmp	r3, #0
     724:	d004      	beq.n	730 <set_resolution+0x12c>
		printf("error trying to set resolution!\r\n");
     726:	4b08      	ldr	r3, [pc, #32]	; (748 <set_resolution+0x144>)
     728:	0018      	movs	r0, r3
     72a:	4b08      	ldr	r3, [pc, #32]	; (74c <set_resolution+0x148>)
     72c:	4798      	blx	r3

	return;
     72e:	46c0      	nop			; (mov r8, r8)
     730:	46c0      	nop			; (mov r8, r8)
}
     732:	46bd      	mov	sp, r7
     734:	b009      	add	sp, #36	; 0x24
     736:	bd90      	pop	{r4, r7, pc}
     738:	00017a28 	.word	0x00017a28
     73c:	00012f71 	.word	0x00012f71
     740:	200002c8 	.word	0x200002c8
     744:	0000e74d 	.word	0x0000e74d
     748:	00017a4c 	.word	0x00017a4c
     74c:	0001308d 	.word	0x0001308d

00000750 <request_data>:

uint16_t request_data(hdc_request command)
{
     750:	b590      	push	{r4, r7, lr}
     752:	b089      	sub	sp, #36	; 0x24
     754:	af00      	add	r7, sp, #0
     756:	0002      	movs	r2, r0
     758:	1dfb      	adds	r3, r7, #7
     75a:	701a      	strb	r2, [r3, #0]
	uint8_t received_data[2];
	uint8_t write_buffer = command;
     75c:	231b      	movs	r3, #27
     75e:	18fb      	adds	r3, r7, r3
     760:	1dfa      	adds	r2, r7, #7
     762:	7812      	ldrb	r2, [r2, #0]
     764:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
     766:	230c      	movs	r3, #12
     768:	18fb      	adds	r3, r7, r3
     76a:	2240      	movs	r2, #64	; 0x40
     76c:	801a      	strh	r2, [r3, #0]
     76e:	230c      	movs	r3, #12
     770:	18fb      	adds	r3, r7, r3
     772:	2201      	movs	r2, #1
     774:	805a      	strh	r2, [r3, #2]
     776:	230c      	movs	r3, #12
     778:	18fb      	adds	r3, r7, r3
     77a:	221b      	movs	r2, #27
     77c:	18ba      	adds	r2, r7, r2
     77e:	605a      	str	r2, [r3, #4]
     780:	230c      	movs	r3, #12
     782:	18fb      	adds	r3, r7, r3
     784:	2200      	movs	r2, #0
     786:	721a      	strb	r2, [r3, #8]
     788:	230c      	movs	r3, #12
     78a:	18fb      	adds	r3, r7, r3
     78c:	2200      	movs	r2, #0
     78e:	725a      	strb	r2, [r3, #9]
     790:	230c      	movs	r3, #12
     792:	18fb      	adds	r3, r7, r3
     794:	2200      	movs	r2, #0
     796:	729a      	strb	r2, [r3, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &packet);
     798:	231f      	movs	r3, #31
     79a:	18fc      	adds	r4, r7, r3
     79c:	230c      	movs	r3, #12
     79e:	18fa      	adds	r2, r7, r3
     7a0:	4b24      	ldr	r3, [pc, #144]	; (834 <request_data+0xe4>)
     7a2:	0011      	movs	r1, r2
     7a4:	0018      	movs	r0, r3
     7a6:	4b24      	ldr	r3, [pc, #144]	; (838 <request_data+0xe8>)
     7a8:	4798      	blx	r3
     7aa:	0003      	movs	r3, r0
     7ac:	7023      	strb	r3, [r4, #0]

	if (STATUS_OK != i2c_code) {
     7ae:	231f      	movs	r3, #31
     7b0:	18fb      	adds	r3, r7, r3
     7b2:	781b      	ldrb	r3, [r3, #0]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d008      	beq.n	7ca <request_data+0x7a>
		printf("failed to s	end register request for command 0x%02x!\r\n", command);
     7b8:	1dfb      	adds	r3, r7, #7
     7ba:	781a      	ldrb	r2, [r3, #0]
     7bc:	4b1f      	ldr	r3, [pc, #124]	; (83c <request_data+0xec>)
     7be:	0011      	movs	r1, r2
     7c0:	0018      	movs	r0, r3
     7c2:	4b1f      	ldr	r3, [pc, #124]	; (840 <request_data+0xf0>)
     7c4:	4798      	blx	r3
		return -1;
     7c6:	4b1f      	ldr	r3, [pc, #124]	; (844 <request_data+0xf4>)
     7c8:	e030      	b.n	82c <request_data+0xdc>
	}
	packet.data = received_data;
     7ca:	230c      	movs	r3, #12
     7cc:	18fb      	adds	r3, r7, r3
     7ce:	221c      	movs	r2, #28
     7d0:	18ba      	adds	r2, r7, r2
     7d2:	605a      	str	r2, [r3, #4]
	packet.data_length = 2;
     7d4:	230c      	movs	r3, #12
     7d6:	18fb      	adds	r3, r7, r3
     7d8:	2202      	movs	r2, #2
     7da:	805a      	strh	r2, [r3, #2]
	delay_ms(15);
     7dc:	200f      	movs	r0, #15
     7de:	4b1a      	ldr	r3, [pc, #104]	; (848 <request_data+0xf8>)
     7e0:	4798      	blx	r3
	i2c_code = i2c_master_read_packet_wait(&i2c_hdc, &packet);
     7e2:	231f      	movs	r3, #31
     7e4:	18fc      	adds	r4, r7, r3
     7e6:	230c      	movs	r3, #12
     7e8:	18fa      	adds	r2, r7, r3
     7ea:	4b12      	ldr	r3, [pc, #72]	; (834 <request_data+0xe4>)
     7ec:	0011      	movs	r1, r2
     7ee:	0018      	movs	r0, r3
     7f0:	4b16      	ldr	r3, [pc, #88]	; (84c <request_data+0xfc>)
     7f2:	4798      	blx	r3
     7f4:	0003      	movs	r3, r0
     7f6:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != i2c_code) {
     7f8:	231f      	movs	r3, #31
     7fa:	18fb      	adds	r3, r7, r3
     7fc:	781b      	ldrb	r3, [r3, #0]
     7fe:	2b00      	cmp	r3, #0
     800:	d008      	beq.n	814 <request_data+0xc4>
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
     802:	1dfb      	adds	r3, r7, #7
     804:	781a      	ldrb	r2, [r3, #0]
     806:	4b12      	ldr	r3, [pc, #72]	; (850 <request_data+0x100>)
     808:	0011      	movs	r1, r2
     80a:	0018      	movs	r0, r3
     80c:	4b0c      	ldr	r3, [pc, #48]	; (840 <request_data+0xf0>)
     80e:	4798      	blx	r3
		return -1;
     810:	4b0c      	ldr	r3, [pc, #48]	; (844 <request_data+0xf4>)
     812:	e00b      	b.n	82c <request_data+0xdc>
	}
	return (received_data[0] << 8) | received_data[1];
     814:	231c      	movs	r3, #28
     816:	18fb      	adds	r3, r7, r3
     818:	781b      	ldrb	r3, [r3, #0]
     81a:	021b      	lsls	r3, r3, #8
     81c:	b21a      	sxth	r2, r3
     81e:	231c      	movs	r3, #28
     820:	18fb      	adds	r3, r7, r3
     822:	785b      	ldrb	r3, [r3, #1]
     824:	b21b      	sxth	r3, r3
     826:	4313      	orrs	r3, r2
     828:	b21b      	sxth	r3, r3
     82a:	b29b      	uxth	r3, r3
}
     82c:	0018      	movs	r0, r3
     82e:	46bd      	mov	sp, r7
     830:	b009      	add	sp, #36	; 0x24
     832:	bd90      	pop	{r4, r7, pc}
     834:	200002c8 	.word	0x200002c8
     838:	0000e78d 	.word	0x0000e78d
     83c:	00017a70 	.word	0x00017a70
     840:	00012f71 	.word	0x00012f71
     844:	0000ffff 	.word	0x0000ffff
     848:	0000d3c9 	.word	0x0000d3c9
     84c:	0000e595 	.word	0x0000e595
     850:	00017aa8 	.word	0x00017aa8

00000854 <get_hdc_device_id>:
uint16_t get_hdc_manufacturer_id()
{
	return request_data(HDC_MANUFACTURER_ID);
}
uint16_t get_hdc_device_id()
{
     854:	b580      	push	{r7, lr}
     856:	af00      	add	r7, sp, #0
	return request_data(HDC_DEVICE_ID);
     858:	20ff      	movs	r0, #255	; 0xff
     85a:	4b03      	ldr	r3, [pc, #12]	; (868 <get_hdc_device_id+0x14>)
     85c:	4798      	blx	r3
     85e:	0003      	movs	r3, r0
}
     860:	0018      	movs	r0, r3
     862:	46bd      	mov	sp, r7
     864:	bd80      	pop	{r7, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	00000751 	.word	0x00000751

0000086c <get_humidity>:
double get_humidity()
{
     86c:	b590      	push	{r4, r7, lr}
     86e:	b083      	sub	sp, #12
     870:	af00      	add	r7, sp, #0
	double raw_data = request_data(HDC_HUMIDITY);
     872:	2001      	movs	r0, #1
     874:	4b12      	ldr	r3, [pc, #72]	; (8c0 <get_humidity+0x54>)
     876:	4798      	blx	r3
     878:	0003      	movs	r3, r0
     87a:	001a      	movs	r2, r3
     87c:	4b11      	ldr	r3, [pc, #68]	; (8c4 <get_humidity+0x58>)
     87e:	0010      	movs	r0, r2
     880:	4798      	blx	r3
     882:	0003      	movs	r3, r0
     884:	000c      	movs	r4, r1
     886:	603b      	str	r3, [r7, #0]
     888:	607c      	str	r4, [r7, #4]

	raw_data /= 65536.0;
     88a:	4c0f      	ldr	r4, [pc, #60]	; (8c8 <get_humidity+0x5c>)
     88c:	2200      	movs	r2, #0
     88e:	4b0f      	ldr	r3, [pc, #60]	; (8cc <get_humidity+0x60>)
     890:	6838      	ldr	r0, [r7, #0]
     892:	6879      	ldr	r1, [r7, #4]
     894:	47a0      	blx	r4
     896:	0003      	movs	r3, r0
     898:	000c      	movs	r4, r1
     89a:	603b      	str	r3, [r7, #0]
     89c:	607c      	str	r4, [r7, #4]
	raw_data *= 100.0;
     89e:	4c0c      	ldr	r4, [pc, #48]	; (8d0 <get_humidity+0x64>)
     8a0:	2200      	movs	r2, #0
     8a2:	4b0c      	ldr	r3, [pc, #48]	; (8d4 <get_humidity+0x68>)
     8a4:	6838      	ldr	r0, [r7, #0]
     8a6:	6879      	ldr	r1, [r7, #4]
     8a8:	47a0      	blx	r4
     8aa:	0003      	movs	r3, r0
     8ac:	000c      	movs	r4, r1
     8ae:	603b      	str	r3, [r7, #0]
     8b0:	607c      	str	r4, [r7, #4]
	return raw_data;
     8b2:	683b      	ldr	r3, [r7, #0]
     8b4:	687c      	ldr	r4, [r7, #4]
}
     8b6:	0018      	movs	r0, r3
     8b8:	0021      	movs	r1, r4
     8ba:	46bd      	mov	sp, r7
     8bc:	b003      	add	sp, #12
     8be:	bd90      	pop	{r4, r7, pc}
     8c0:	00000751 	.word	0x00000751
     8c4:	000178b1 	.word	0x000178b1
     8c8:	000163f1 	.word	0x000163f1
     8cc:	40f00000 	.word	0x40f00000
     8d0:	00016c59 	.word	0x00016c59
     8d4:	40590000 	.word	0x40590000

000008d8 <get_temp>:

double get_temp()
{
     8d8:	b590      	push	{r4, r7, lr}
     8da:	b083      	sub	sp, #12
     8dc:	af00      	add	r7, sp, #0
	double raw_data = request_data(HDC_TEMP);
     8de:	2000      	movs	r0, #0
     8e0:	4b17      	ldr	r3, [pc, #92]	; (940 <get_temp+0x68>)
     8e2:	4798      	blx	r3
     8e4:	0003      	movs	r3, r0
     8e6:	001a      	movs	r2, r3
     8e8:	4b16      	ldr	r3, [pc, #88]	; (944 <get_temp+0x6c>)
     8ea:	0010      	movs	r0, r2
     8ec:	4798      	blx	r3
     8ee:	0003      	movs	r3, r0
     8f0:	000c      	movs	r4, r1
     8f2:	603b      	str	r3, [r7, #0]
     8f4:	607c      	str	r4, [r7, #4]

	raw_data /= 65536.0;
     8f6:	4c14      	ldr	r4, [pc, #80]	; (948 <get_temp+0x70>)
     8f8:	2200      	movs	r2, #0
     8fa:	4b14      	ldr	r3, [pc, #80]	; (94c <get_temp+0x74>)
     8fc:	6838      	ldr	r0, [r7, #0]
     8fe:	6879      	ldr	r1, [r7, #4]
     900:	47a0      	blx	r4
     902:	0003      	movs	r3, r0
     904:	000c      	movs	r4, r1
     906:	603b      	str	r3, [r7, #0]
     908:	607c      	str	r4, [r7, #4]
	raw_data *= 165.0;
     90a:	4c11      	ldr	r4, [pc, #68]	; (950 <get_temp+0x78>)
     90c:	2200      	movs	r2, #0
     90e:	4b11      	ldr	r3, [pc, #68]	; (954 <get_temp+0x7c>)
     910:	6838      	ldr	r0, [r7, #0]
     912:	6879      	ldr	r1, [r7, #4]
     914:	47a0      	blx	r4
     916:	0003      	movs	r3, r0
     918:	000c      	movs	r4, r1
     91a:	603b      	str	r3, [r7, #0]
     91c:	607c      	str	r4, [r7, #4]
	raw_data -= 40.0;
     91e:	4c0e      	ldr	r4, [pc, #56]	; (958 <get_temp+0x80>)
     920:	2200      	movs	r2, #0
     922:	4b0e      	ldr	r3, [pc, #56]	; (95c <get_temp+0x84>)
     924:	6838      	ldr	r0, [r7, #0]
     926:	6879      	ldr	r1, [r7, #4]
     928:	47a0      	blx	r4
     92a:	0003      	movs	r3, r0
     92c:	000c      	movs	r4, r1
     92e:	603b      	str	r3, [r7, #0]
     930:	607c      	str	r4, [r7, #4]
	return raw_data;
     932:	683b      	ldr	r3, [r7, #0]
     934:	687c      	ldr	r4, [r7, #4]
}
     936:	0018      	movs	r0, r3
     938:	0021      	movs	r1, r4
     93a:	46bd      	mov	sp, r7
     93c:	b003      	add	sp, #12
     93e:	bd90      	pop	{r4, r7, pc}
     940:	00000751 	.word	0x00000751
     944:	000178b1 	.word	0x000178b1
     948:	000163f1 	.word	0x000163f1
     94c:	40f00000 	.word	0x40f00000
     950:	00016c59 	.word	0x00016c59
     954:	4064a000 	.word	0x4064a000
     958:	00017159 	.word	0x00017159
     95c:	40440000 	.word	0x40440000

00000960 <system_interrupt_enable>:
{
     960:	b580      	push	{r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
     966:	0002      	movs	r2, r0
     968:	1dfb      	adds	r3, r7, #7
     96a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     96c:	4b06      	ldr	r3, [pc, #24]	; (988 <system_interrupt_enable+0x28>)
     96e:	1dfa      	adds	r2, r7, #7
     970:	7812      	ldrb	r2, [r2, #0]
     972:	0011      	movs	r1, r2
     974:	221f      	movs	r2, #31
     976:	400a      	ands	r2, r1
     978:	2101      	movs	r1, #1
     97a:	4091      	lsls	r1, r2
     97c:	000a      	movs	r2, r1
     97e:	601a      	str	r2, [r3, #0]
}
     980:	46c0      	nop			; (mov r8, r8)
     982:	46bd      	mov	sp, r7
     984:	b002      	add	sp, #8
     986:	bd80      	pop	{r7, pc}
     988:	e000e100 	.word	0xe000e100

0000098c <i2c_master_is_syncing>:
{
     98c:	b580      	push	{r7, lr}
     98e:	b084      	sub	sp, #16
     990:	af00      	add	r7, sp, #0
     992:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     994:	687b      	ldr	r3, [r7, #4]
     996:	681b      	ldr	r3, [r3, #0]
     998:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     99a:	68fb      	ldr	r3, [r7, #12]
     99c:	69db      	ldr	r3, [r3, #28]
     99e:	2207      	movs	r2, #7
     9a0:	4013      	ands	r3, r2
     9a2:	1e5a      	subs	r2, r3, #1
     9a4:	4193      	sbcs	r3, r2
     9a6:	b2db      	uxtb	r3, r3
}
     9a8:	0018      	movs	r0, r3
     9aa:	46bd      	mov	sp, r7
     9ac:	b004      	add	sp, #16
     9ae:	bd80      	pop	{r7, pc}

000009b0 <_i2c_master_wait_for_sync>:
{
     9b0:	b580      	push	{r7, lr}
     9b2:	b082      	sub	sp, #8
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
     9b8:	46c0      	nop			; (mov r8, r8)
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	0018      	movs	r0, r3
     9be:	4b04      	ldr	r3, [pc, #16]	; (9d0 <_i2c_master_wait_for_sync+0x20>)
     9c0:	4798      	blx	r3
     9c2:	1e03      	subs	r3, r0, #0
     9c4:	d1f9      	bne.n	9ba <_i2c_master_wait_for_sync+0xa>
}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	46bd      	mov	sp, r7
     9ca:	b002      	add	sp, #8
     9cc:	bd80      	pop	{r7, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	0000098d 	.word	0x0000098d

000009d4 <i2c_master_get_config_defaults>:
{
     9d4:	b580      	push	{r7, lr}
     9d6:	b082      	sub	sp, #8
     9d8:	af00      	add	r7, sp, #0
     9da:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	2264      	movs	r2, #100	; 0x64
     9e0:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	4a1b      	ldr	r2, [pc, #108]	; (a54 <i2c_master_get_config_defaults+0x80>)
     9e6:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     9e8:	687b      	ldr	r3, [r7, #4]
     9ea:	2200      	movs	r2, #0
     9ec:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	2200      	movs	r2, #0
     9f2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	2200      	movs	r2, #0
     9f8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     9fa:	687b      	ldr	r3, [r7, #4]
     9fc:	2280      	movs	r2, #128	; 0x80
     9fe:	0392      	lsls	r2, r2, #14
     a00:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	2201      	movs	r2, #1
     a06:	4252      	negs	r2, r2
     a08:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	2201      	movs	r2, #1
     a0e:	4252      	negs	r2, r2
     a10:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	2200      	movs	r2, #0
     a16:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	2200      	movs	r2, #0
     a1c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	2224      	movs	r2, #36	; 0x24
     a22:	2100      	movs	r1, #0
     a24:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	2200      	movs	r2, #0
     a2a:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	222c      	movs	r2, #44	; 0x2c
     a30:	2100      	movs	r1, #0
     a32:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	222d      	movs	r2, #45	; 0x2d
     a38:	2100      	movs	r1, #0
     a3a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     a3c:	687b      	ldr	r3, [r7, #4]
     a3e:	222e      	movs	r2, #46	; 0x2e
     a40:	2100      	movs	r1, #0
     a42:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	22d7      	movs	r2, #215	; 0xd7
     a48:	861a      	strh	r2, [r3, #48]	; 0x30
}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	46bd      	mov	sp, r7
     a4e:	b002      	add	sp, #8
     a50:	bd80      	pop	{r7, pc}
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	00000d48 	.word	0x00000d48

00000a58 <i2c_master_enable>:
{
     a58:	b580      	push	{r7, lr}
     a5a:	b084      	sub	sp, #16
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
     a66:	2300      	movs	r3, #0
     a68:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	0018      	movs	r0, r3
     a6e:	4b14      	ldr	r3, [pc, #80]	; (ac0 <i2c_master_enable+0x68>)
     a70:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     a72:	68bb      	ldr	r3, [r7, #8]
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	2202      	movs	r2, #2
     a78:	431a      	orrs	r2, r3
     a7a:	68bb      	ldr	r3, [r7, #8]
     a7c:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	0018      	movs	r0, r3
     a84:	4b0f      	ldr	r3, [pc, #60]	; (ac4 <i2c_master_enable+0x6c>)
     a86:	4798      	blx	r3
     a88:	0003      	movs	r3, r0
     a8a:	0018      	movs	r0, r3
     a8c:	4b0e      	ldr	r3, [pc, #56]	; (ac8 <i2c_master_enable+0x70>)
     a8e:	4798      	blx	r3
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     a90:	e00c      	b.n	aac <i2c_master_enable+0x54>
		timeout_counter++;
     a92:	68fb      	ldr	r3, [r7, #12]
     a94:	3301      	adds	r3, #1
     a96:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     a98:	687b      	ldr	r3, [r7, #4]
     a9a:	88db      	ldrh	r3, [r3, #6]
     a9c:	001a      	movs	r2, r3
     a9e:	68fb      	ldr	r3, [r7, #12]
     aa0:	429a      	cmp	r2, r3
     aa2:	d803      	bhi.n	aac <i2c_master_enable+0x54>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     aa4:	68bb      	ldr	r3, [r7, #8]
     aa6:	2210      	movs	r2, #16
     aa8:	835a      	strh	r2, [r3, #26]
			return;
     aaa:	e006      	b.n	aba <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     aac:	68bb      	ldr	r3, [r7, #8]
     aae:	8b5b      	ldrh	r3, [r3, #26]
     ab0:	b29b      	uxth	r3, r3
     ab2:	001a      	movs	r2, r3
     ab4:	2310      	movs	r3, #16
     ab6:	4013      	ands	r3, r2
     ab8:	d0eb      	beq.n	a92 <i2c_master_enable+0x3a>
}
     aba:	46bd      	mov	sp, r7
     abc:	b004      	add	sp, #16
     abe:	bd80      	pop	{r7, pc}
     ac0:	000009b1 	.word	0x000009b1
     ac4:	0000fee1 	.word	0x0000fee1
     ac8:	00000961 	.word	0x00000961

00000acc <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
     acc:	b590      	push	{r4, r7, lr}
     ace:	b091      	sub	sp, #68	; 0x44
     ad0:	af00      	add	r7, sp, #0
     ad2:	0002      	movs	r2, r0
     ad4:	1dfb      	adds	r3, r7, #7
     ad6:	701a      	strb	r2, [r3, #0]
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
     ad8:	2308      	movs	r3, #8
     ada:	18fb      	adds	r3, r7, r3
     adc:	0018      	movs	r0, r3
     ade:	4b19      	ldr	r3, [pc, #100]	; (b44 <configure_i2c_tsl2561+0x78>)
     ae0:	4798      	blx	r3
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
     ae2:	2308      	movs	r3, #8
     ae4:	18fb      	adds	r3, r7, r3
     ae6:	2201      	movs	r2, #1
     ae8:	4252      	negs	r2, r2
     aea:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
     aec:	2308      	movs	r3, #8
     aee:	18fb      	adds	r3, r7, r3
     af0:	4a15      	ldr	r2, [pc, #84]	; (b48 <configure_i2c_tsl2561+0x7c>)
     af2:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     af4:	2308      	movs	r3, #8
     af6:	18fb      	adds	r3, r7, r3
     af8:	4a14      	ldr	r2, [pc, #80]	; (b4c <configure_i2c_tsl2561+0x80>)
     afa:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
     afc:	2308      	movs	r3, #8
     afe:	18fb      	adds	r3, r7, r3
     b00:	2200      	movs	r2, #0
     b02:	731a      	strb	r2, [r3, #12]
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
     b04:	233f      	movs	r3, #63	; 0x3f
     b06:	18fc      	adds	r4, r7, r3
     b08:	2308      	movs	r3, #8
     b0a:	18fa      	adds	r2, r7, r3
     b0c:	4910      	ldr	r1, [pc, #64]	; (b50 <configure_i2c_tsl2561+0x84>)
     b0e:	4b11      	ldr	r3, [pc, #68]	; (b54 <configure_i2c_tsl2561+0x88>)
     b10:	0018      	movs	r0, r3
     b12:	4b11      	ldr	r3, [pc, #68]	; (b58 <configure_i2c_tsl2561+0x8c>)
     b14:	4798      	blx	r3
     b16:	0003      	movs	r3, r0
     b18:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != init_status) {
     b1a:	233f      	movs	r3, #63	; 0x3f
     b1c:	18fb      	adds	r3, r7, r3
     b1e:	781b      	ldrb	r3, [r3, #0]
     b20:	2b00      	cmp	r3, #0
     b22:	d004      	beq.n	b2e <configure_i2c_tsl2561+0x62>
		printf("failed to initialize TSL2561 driver.\r\n");
     b24:	4b0d      	ldr	r3, [pc, #52]	; (b5c <configure_i2c_tsl2561+0x90>)
     b26:	0018      	movs	r0, r3
     b28:	4b0d      	ldr	r3, [pc, #52]	; (b60 <configure_i2c_tsl2561+0x94>)
     b2a:	4798      	blx	r3
     b2c:	e007      	b.n	b3e <configure_i2c_tsl2561+0x72>
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
     b2e:	4b09      	ldr	r3, [pc, #36]	; (b54 <configure_i2c_tsl2561+0x88>)
     b30:	0018      	movs	r0, r3
     b32:	4b0c      	ldr	r3, [pc, #48]	; (b64 <configure_i2c_tsl2561+0x98>)
     b34:	4798      	blx	r3
	tsl2561_addr = addr;
     b36:	4b0c      	ldr	r3, [pc, #48]	; (b68 <configure_i2c_tsl2561+0x9c>)
     b38:	1dfa      	adds	r2, r7, #7
     b3a:	7812      	ldrb	r2, [r2, #0]
     b3c:	701a      	strb	r2, [r3, #0]
}
     b3e:	46bd      	mov	sp, r7
     b40:	b011      	add	sp, #68	; 0x44
     b42:	bd90      	pop	{r4, r7, pc}
     b44:	000009d5 	.word	0x000009d5
     b48:	00080002 	.word	0x00080002
     b4c:	00090002 	.word	0x00090002
     b50:	42000800 	.word	0x42000800
     b54:	200002f0 	.word	0x200002f0
     b58:	0000e0dd 	.word	0x0000e0dd
     b5c:	00017ad8 	.word	0x00017ad8
     b60:	0001308d 	.word	0x0001308d
     b64:	00000a59 	.word	0x00000a59
     b68:	20000204 	.word	0x20000204

00000b6c <read_byte>:


uint8_t read_byte(tsl2561_registers reg)
{
     b6c:	b590      	push	{r4, r7, lr}
     b6e:	b087      	sub	sp, #28
     b70:	af00      	add	r7, sp, #0
     b72:	0002      	movs	r2, r0
     b74:	1dfb      	adds	r3, r7, #7
     b76:	701a      	strb	r2, [r3, #0]
	uint8_t received_data;
	uint8_t write_buffer = reg;
     b78:	2315      	movs	r3, #21
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	1dfa      	adds	r2, r7, #7
     b7e:	7812      	ldrb	r2, [r2, #0]
     b80:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
     b82:	4b30      	ldr	r3, [pc, #192]	; (c44 <read_byte+0xd8>)
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	b29a      	uxth	r2, r3
     b88:	2308      	movs	r3, #8
     b8a:	18fb      	adds	r3, r7, r3
     b8c:	801a      	strh	r2, [r3, #0]
     b8e:	2308      	movs	r3, #8
     b90:	18fb      	adds	r3, r7, r3
     b92:	2201      	movs	r2, #1
     b94:	805a      	strh	r2, [r3, #2]
     b96:	2308      	movs	r3, #8
     b98:	18fb      	adds	r3, r7, r3
     b9a:	2215      	movs	r2, #21
     b9c:	18ba      	adds	r2, r7, r2
     b9e:	605a      	str	r2, [r3, #4]
     ba0:	2308      	movs	r3, #8
     ba2:	18fb      	adds	r3, r7, r3
     ba4:	2200      	movs	r2, #0
     ba6:	721a      	strb	r2, [r3, #8]
     ba8:	2308      	movs	r3, #8
     baa:	18fb      	adds	r3, r7, r3
     bac:	2200      	movs	r2, #0
     bae:	725a      	strb	r2, [r3, #9]
     bb0:	2308      	movs	r3, #8
     bb2:	18fb      	adds	r3, r7, r3
     bb4:	2200      	movs	r2, #0
     bb6:	729a      	strb	r2, [r3, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait(&i2c_tsl2561, &packet);
     bb8:	2317      	movs	r3, #23
     bba:	18fc      	adds	r4, r7, r3
     bbc:	2308      	movs	r3, #8
     bbe:	18fa      	adds	r2, r7, r3
     bc0:	4b21      	ldr	r3, [pc, #132]	; (c48 <read_byte+0xdc>)
     bc2:	0011      	movs	r1, r2
     bc4:	0018      	movs	r0, r3
     bc6:	4b21      	ldr	r3, [pc, #132]	; (c4c <read_byte+0xe0>)
     bc8:	4798      	blx	r3
     bca:	0003      	movs	r3, r0
     bcc:	7023      	strb	r3, [r4, #0]

	if (STATUS_OK != i2c_code) {
     bce:	2317      	movs	r3, #23
     bd0:	18fb      	adds	r3, r7, r3
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d00a      	beq.n	bee <read_byte+0x82>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
     bd8:	2315      	movs	r3, #21
     bda:	18fb      	adds	r3, r7, r3
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	001a      	movs	r2, r3
     be0:	4b1b      	ldr	r3, [pc, #108]	; (c50 <read_byte+0xe4>)
     be2:	0011      	movs	r1, r2
     be4:	0018      	movs	r0, r3
     be6:	4b1b      	ldr	r3, [pc, #108]	; (c54 <read_byte+0xe8>)
     be8:	4798      	blx	r3
		return -1;
     bea:	23ff      	movs	r3, #255	; 0xff
     bec:	e026      	b.n	c3c <read_byte+0xd0>
	}
	packet.data = &received_data;
     bee:	2308      	movs	r3, #8
     bf0:	18fb      	adds	r3, r7, r3
     bf2:	2216      	movs	r2, #22
     bf4:	18ba      	adds	r2, r7, r2
     bf6:	605a      	str	r2, [r3, #4]
	packet.data_length = 1;
     bf8:	2308      	movs	r3, #8
     bfa:	18fb      	adds	r3, r7, r3
     bfc:	2201      	movs	r2, #1
     bfe:	805a      	strh	r2, [r3, #2]

	i2c_code = i2c_master_read_packet_wait(&i2c_tsl2561, &packet);
     c00:	2317      	movs	r3, #23
     c02:	18fc      	adds	r4, r7, r3
     c04:	2308      	movs	r3, #8
     c06:	18fa      	adds	r2, r7, r3
     c08:	4b0f      	ldr	r3, [pc, #60]	; (c48 <read_byte+0xdc>)
     c0a:	0011      	movs	r1, r2
     c0c:	0018      	movs	r0, r3
     c0e:	4b12      	ldr	r3, [pc, #72]	; (c58 <read_byte+0xec>)
     c10:	4798      	blx	r3
     c12:	0003      	movs	r3, r0
     c14:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != i2c_code) {
     c16:	2317      	movs	r3, #23
     c18:	18fb      	adds	r3, r7, r3
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d00a      	beq.n	c36 <read_byte+0xca>
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
     c20:	2315      	movs	r3, #21
     c22:	18fb      	adds	r3, r7, r3
     c24:	781b      	ldrb	r3, [r3, #0]
     c26:	001a      	movs	r2, r3
     c28:	4b0c      	ldr	r3, [pc, #48]	; (c5c <read_byte+0xf0>)
     c2a:	0011      	movs	r1, r2
     c2c:	0018      	movs	r0, r3
     c2e:	4b09      	ldr	r3, [pc, #36]	; (c54 <read_byte+0xe8>)
     c30:	4798      	blx	r3
		return -1;
     c32:	23ff      	movs	r3, #255	; 0xff
     c34:	e002      	b.n	c3c <read_byte+0xd0>
	}
	return received_data;
     c36:	2316      	movs	r3, #22
     c38:	18fb      	adds	r3, r7, r3
     c3a:	781b      	ldrb	r3, [r3, #0]
}
     c3c:	0018      	movs	r0, r3
     c3e:	46bd      	mov	sp, r7
     c40:	b007      	add	sp, #28
     c42:	bd90      	pop	{r4, r7, pc}
     c44:	20000204 	.word	0x20000204
     c48:	200002f0 	.word	0x200002f0
     c4c:	0000e74d 	.word	0x0000e74d
     c50:	00017b00 	.word	0x00017b00
     c54:	00012f71 	.word	0x00012f71
     c58:	0000e595 	.word	0x0000e595
     c5c:	00017b38 	.word	0x00017b38

00000c60 <write_byte>:

void write_byte(tsl2561_registers reg, uint8_t data_byte)
{
     c60:	b590      	push	{r4, r7, lr}
     c62:	b087      	sub	sp, #28
     c64:	af00      	add	r7, sp, #0
     c66:	0002      	movs	r2, r0
     c68:	1dfb      	adds	r3, r7, #7
     c6a:	701a      	strb	r2, [r3, #0]
     c6c:	1dbb      	adds	r3, r7, #6
     c6e:	1c0a      	adds	r2, r1, #0
     c70:	701a      	strb	r2, [r3, #0]
	uint8_t write_buffer[2] = { reg, data_byte };
     c72:	2314      	movs	r3, #20
     c74:	18fb      	adds	r3, r7, r3
     c76:	1dfa      	adds	r2, r7, #7
     c78:	7812      	ldrb	r2, [r2, #0]
     c7a:	701a      	strb	r2, [r3, #0]
     c7c:	2314      	movs	r3, #20
     c7e:	18fb      	adds	r3, r7, r3
     c80:	1dba      	adds	r2, r7, #6
     c82:	7812      	ldrb	r2, [r2, #0]
     c84:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
     c86:	4b1a      	ldr	r3, [pc, #104]	; (cf0 <write_byte+0x90>)
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	b29a      	uxth	r2, r3
     c8c:	2308      	movs	r3, #8
     c8e:	18fb      	adds	r3, r7, r3
     c90:	801a      	strh	r2, [r3, #0]
     c92:	2308      	movs	r3, #8
     c94:	18fb      	adds	r3, r7, r3
     c96:	2202      	movs	r2, #2
     c98:	805a      	strh	r2, [r3, #2]
     c9a:	2308      	movs	r3, #8
     c9c:	18fb      	adds	r3, r7, r3
     c9e:	2214      	movs	r2, #20
     ca0:	18ba      	adds	r2, r7, r2
     ca2:	605a      	str	r2, [r3, #4]
     ca4:	2308      	movs	r3, #8
     ca6:	18fb      	adds	r3, r7, r3
     ca8:	2200      	movs	r2, #0
     caa:	721a      	strb	r2, [r3, #8]
     cac:	2308      	movs	r3, #8
     cae:	18fb      	adds	r3, r7, r3
     cb0:	2200      	movs	r2, #0
     cb2:	725a      	strb	r2, [r3, #9]
     cb4:	2308      	movs	r3, #8
     cb6:	18fb      	adds	r3, r7, r3
     cb8:	2200      	movs	r2, #0
     cba:	729a      	strb	r2, [r3, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &packet);
     cbc:	2317      	movs	r3, #23
     cbe:	18fc      	adds	r4, r7, r3
     cc0:	2308      	movs	r3, #8
     cc2:	18fa      	adds	r2, r7, r3
     cc4:	4b0b      	ldr	r3, [pc, #44]	; (cf4 <write_byte+0x94>)
     cc6:	0011      	movs	r1, r2
     cc8:	0018      	movs	r0, r3
     cca:	4b0b      	ldr	r3, [pc, #44]	; (cf8 <write_byte+0x98>)
     ccc:	4798      	blx	r3
     cce:	0003      	movs	r3, r0
     cd0:	7023      	strb	r3, [r4, #0]

	if (STATUS_OK != i2c_code) {
     cd2:	2317      	movs	r3, #23
     cd4:	18fb      	adds	r3, r7, r3
     cd6:	781b      	ldrb	r3, [r3, #0]
     cd8:	2b00      	cmp	r3, #0
     cda:	d006      	beq.n	cea <write_byte+0x8a>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
     cdc:	2314      	movs	r3, #20
     cde:	18fa      	adds	r2, r7, r3
     ce0:	4b06      	ldr	r3, [pc, #24]	; (cfc <write_byte+0x9c>)
     ce2:	0011      	movs	r1, r2
     ce4:	0018      	movs	r0, r3
     ce6:	4b06      	ldr	r3, [pc, #24]	; (d00 <write_byte+0xa0>)
     ce8:	4798      	blx	r3
		return;
	}
}
     cea:	46bd      	mov	sp, r7
     cec:	b007      	add	sp, #28
     cee:	bd90      	pop	{r4, r7, pc}
     cf0:	20000204 	.word	0x20000204
     cf4:	200002f0 	.word	0x200002f0
     cf8:	0000e78d 	.word	0x0000e78d
     cfc:	00017b00 	.word	0x00017b00
     d00:	00012f71 	.word	0x00012f71

00000d04 <set_gain>:
 * For now the integration time will always be 402ms. Will update once decide
 * if we need faster readings
 * @param new_gain new gain multiplier
 */
void set_gain(tsl2561_gains new_gain)
{
     d04:	b580      	push	{r7, lr}
     d06:	b082      	sub	sp, #8
     d08:	af00      	add	r7, sp, #0
     d0a:	0002      	movs	r2, r0
     d0c:	1dfb      	adds	r3, r7, #7
     d0e:	701a      	strb	r2, [r3, #0]
	write_byte(CMD_BIT | TIMING_REG, (INTEGRATE_402MS | new_gain));
     d10:	1dfb      	adds	r3, r7, #7
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	2202      	movs	r2, #2
     d16:	4313      	orrs	r3, r2
     d18:	b2db      	uxtb	r3, r3
     d1a:	0019      	movs	r1, r3
     d1c:	2081      	movs	r0, #129	; 0x81
     d1e:	4b03      	ldr	r3, [pc, #12]	; (d2c <set_gain+0x28>)
     d20:	4798      	blx	r3
}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	46bd      	mov	sp, r7
     d26:	b002      	add	sp, #8
     d28:	bd80      	pop	{r7, pc}
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00000c61 	.word	0x00000c61

00000d30 <power_on_tsl2561>:

void power_on_tsl2561()
{
     d30:	b580      	push	{r7, lr}
     d32:	af00      	add	r7, sp, #0
	write_byte(CMD_BIT | CTRL_REG, 0x03);
     d34:	2103      	movs	r1, #3
     d36:	2080      	movs	r0, #128	; 0x80
     d38:	4b03      	ldr	r3, [pc, #12]	; (d48 <power_on_tsl2561+0x18>)
     d3a:	4798      	blx	r3
	set_gain(GAIN_16X);
     d3c:	2010      	movs	r0, #16
     d3e:	4b03      	ldr	r3, [pc, #12]	; (d4c <power_on_tsl2561+0x1c>)
     d40:	4798      	blx	r3
}
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	46bd      	mov	sp, r7
     d46:	bd80      	pop	{r7, pc}
     d48:	00000c61 	.word	0x00000c61
     d4c:	00000d05 	.word	0x00000d05

00000d50 <power_off_tsl2561>:

void power_off_tsl2561()
{
     d50:	b580      	push	{r7, lr}
     d52:	af00      	add	r7, sp, #0
	write_byte(CMD_BIT | CTRL_REG, 0x0);
     d54:	2100      	movs	r1, #0
     d56:	2080      	movs	r0, #128	; 0x80
     d58:	4b02      	ldr	r3, [pc, #8]	; (d64 <power_off_tsl2561+0x14>)
     d5a:	4798      	blx	r3
}
     d5c:	46c0      	nop			; (mov r8, r8)
     d5e:	46bd      	mov	sp, r7
     d60:	bd80      	pop	{r7, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	00000c61 	.word	0x00000c61

00000d68 <get_chan0>:
{
	return read_byte(CMD_BIT | ID_REG);
}

uint16_t get_chan0()
{
     d68:	b5b0      	push	{r4, r5, r7, lr}
     d6a:	af00      	add	r7, sp, #0
	//TODO: add way to change this
	delay_ms(403);
     d6c:	2394      	movs	r3, #148	; 0x94
     d6e:	33ff      	adds	r3, #255	; 0xff
     d70:	0018      	movs	r0, r3
     d72:	4b09      	ldr	r3, [pc, #36]	; (d98 <get_chan0+0x30>)
     d74:	4798      	blx	r3
	//HAVE TO READ LOW REGISTER BEFORE HIGH REG PER DATASHEET
	return read_byte(CMD_BIT | CHAN0_LOW_REG) | (read_byte(CMD_BIT | CHAN0_HIGH_REG) << 8);
     d76:	208c      	movs	r0, #140	; 0x8c
     d78:	4b08      	ldr	r3, [pc, #32]	; (d9c <get_chan0+0x34>)
     d7a:	4798      	blx	r3
     d7c:	0003      	movs	r3, r0
     d7e:	b21c      	sxth	r4, r3
     d80:	208d      	movs	r0, #141	; 0x8d
     d82:	4b06      	ldr	r3, [pc, #24]	; (d9c <get_chan0+0x34>)
     d84:	4798      	blx	r3
     d86:	0003      	movs	r3, r0
     d88:	021b      	lsls	r3, r3, #8
     d8a:	b21b      	sxth	r3, r3
     d8c:	4323      	orrs	r3, r4
     d8e:	b21b      	sxth	r3, r3
     d90:	b29b      	uxth	r3, r3
}
     d92:	0018      	movs	r0, r3
     d94:	46bd      	mov	sp, r7
     d96:	bdb0      	pop	{r4, r5, r7, pc}
     d98:	0000d3c9 	.word	0x0000d3c9
     d9c:	00000b6d 	.word	0x00000b6d

00000da0 <get_chan1>:

uint16_t get_chan1()
{
     da0:	b5b0      	push	{r4, r5, r7, lr}
     da2:	af00      	add	r7, sp, #0
	//TODO: add way to change this
	delay_ms(403);
     da4:	2394      	movs	r3, #148	; 0x94
     da6:	33ff      	adds	r3, #255	; 0xff
     da8:	0018      	movs	r0, r3
     daa:	4b09      	ldr	r3, [pc, #36]	; (dd0 <get_chan1+0x30>)
     dac:	4798      	blx	r3
	return read_byte(CMD_BIT | CHAN1_LOW_REG) | (read_byte(CMD_BIT | CHAN1_HIGH_REG) << 8);
     dae:	208e      	movs	r0, #142	; 0x8e
     db0:	4b08      	ldr	r3, [pc, #32]	; (dd4 <get_chan1+0x34>)
     db2:	4798      	blx	r3
     db4:	0003      	movs	r3, r0
     db6:	b21c      	sxth	r4, r3
     db8:	208f      	movs	r0, #143	; 0x8f
     dba:	4b06      	ldr	r3, [pc, #24]	; (dd4 <get_chan1+0x34>)
     dbc:	4798      	blx	r3
     dbe:	0003      	movs	r3, r0
     dc0:	021b      	lsls	r3, r3, #8
     dc2:	b21b      	sxth	r3, r3
     dc4:	4323      	orrs	r3, r4
     dc6:	b21b      	sxth	r3, r3
     dc8:	b29b      	uxth	r3, r3
}
     dca:	0018      	movs	r0, r3
     dcc:	46bd      	mov	sp, r7
     dce:	bdb0      	pop	{r4, r5, r7, pc}
     dd0:	0000d3c9 	.word	0x0000d3c9
     dd4:	00000b6d 	.word	0x00000b6d

00000dd8 <get_lux>:

uint32_t get_lux()
{
     dd8:	b590      	push	{r4, r7, lr}
     dda:	b089      	sub	sp, #36	; 0x24
     ddc:	af00      	add	r7, sp, #0
	uint16_t chan0 = get_chan0();
     dde:	2312      	movs	r3, #18
     de0:	18fc      	adds	r4, r7, r3
     de2:	4b52      	ldr	r3, [pc, #328]	; (f2c <get_lux+0x154>)
     de4:	4798      	blx	r3
     de6:	0003      	movs	r3, r0
     de8:	8023      	strh	r3, [r4, #0]
	uint16_t chan1 = get_chan1();
     dea:	2310      	movs	r3, #16
     dec:	18fc      	adds	r4, r7, r3
     dee:	4b50      	ldr	r3, [pc, #320]	; (f30 <get_lux+0x158>)
     df0:	4798      	blx	r3
     df2:	0003      	movs	r3, r0
     df4:	8023      	strh	r3, [r4, #0]

	uint16_t saturation_test = 0xffff; // can't guarantee accuracy if reg is filled
     df6:	230e      	movs	r3, #14
     df8:	18fb      	adds	r3, r7, r3
     dfa:	2201      	movs	r2, #1
     dfc:	4252      	negs	r2, r2
     dfe:	801a      	strh	r2, [r3, #0]
	if (chan0 > saturation_test || (chan1 > saturation_test)) {
     e00:	2312      	movs	r3, #18
     e02:	18fa      	adds	r2, r7, r3
     e04:	230e      	movs	r3, #14
     e06:	18fb      	adds	r3, r7, r3
     e08:	8812      	ldrh	r2, [r2, #0]
     e0a:	881b      	ldrh	r3, [r3, #0]
     e0c:	429a      	cmp	r2, r3
     e0e:	d807      	bhi.n	e20 <get_lux+0x48>
     e10:	2310      	movs	r3, #16
     e12:	18fa      	adds	r2, r7, r3
     e14:	230e      	movs	r3, #14
     e16:	18fb      	adds	r3, r7, r3
     e18:	8812      	ldrh	r2, [r2, #0]
     e1a:	881b      	ldrh	r3, [r3, #0]
     e1c:	429a      	cmp	r2, r3
     e1e:	d906      	bls.n	e2e <get_lux+0x56>
		printf("get_lux: TSL2561 light is saturated");
     e20:	4b44      	ldr	r3, [pc, #272]	; (f34 <get_lux+0x15c>)
     e22:	0018      	movs	r0, r3
     e24:	4b44      	ldr	r3, [pc, #272]	; (f38 <get_lux+0x160>)
     e26:	4798      	blx	r3
		return -1;
     e28:	2301      	movs	r3, #1
     e2a:	425b      	negs	r3, r3
     e2c:	e079      	b.n	f22 <get_lux+0x14a>
	}

	unsigned long ratio10 = 0;
     e2e:	2300      	movs	r3, #0
     e30:	61fb      	str	r3, [r7, #28]
	if(chan0 != 0) {
     e32:	2312      	movs	r3, #18
     e34:	18fb      	adds	r3, r7, r3
     e36:	881b      	ldrh	r3, [r3, #0]
     e38:	2b00      	cmp	r3, #0
     e3a:	d00b      	beq.n	e54 <get_lux+0x7c>
		 ratio10 = (chan1 << (TSL2561_LUX_RATIOSCALE + 1)) / chan0;
     e3c:	2310      	movs	r3, #16
     e3e:	18fb      	adds	r3, r7, r3
     e40:	881b      	ldrh	r3, [r3, #0]
     e42:	029a      	lsls	r2, r3, #10
     e44:	2312      	movs	r3, #18
     e46:	18fb      	adds	r3, r7, r3
     e48:	8819      	ldrh	r1, [r3, #0]
     e4a:	4b3c      	ldr	r3, [pc, #240]	; (f3c <get_lux+0x164>)
     e4c:	0010      	movs	r0, r2
     e4e:	4798      	blx	r3
     e50:	0003      	movs	r3, r0
     e52:	61fb      	str	r3, [r7, #28]
	}
	ratio10 = (ratio10 + 1) >> 1;
     e54:	69fb      	ldr	r3, [r7, #28]
     e56:	3301      	adds	r3, #1
     e58:	085b      	lsrs	r3, r3, #1
     e5a:	61fb      	str	r3, [r7, #28]
	unsigned int b, m;

	if ((ratio10 >= 0) && (ratio10 <= TSL2561_LUX_K1T)) {
     e5c:	69fb      	ldr	r3, [r7, #28]
     e5e:	2b40      	cmp	r3, #64	; 0x40
     e60:	d806      	bhi.n	e70 <get_lux+0x98>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
     e62:	23f9      	movs	r3, #249	; 0xf9
     e64:	005b      	lsls	r3, r3, #1
     e66:	61bb      	str	r3, [r7, #24]
     e68:	23df      	movs	r3, #223	; 0xdf
     e6a:	005b      	lsls	r3, r3, #1
     e6c:	617b      	str	r3, [r7, #20]
     e6e:	e042      	b.n	ef6 <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K2T) {
     e70:	69fb      	ldr	r3, [r7, #28]
     e72:	2b80      	cmp	r3, #128	; 0x80
     e74:	d805      	bhi.n	e82 <get_lux+0xaa>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
     e76:	2385      	movs	r3, #133	; 0x85
     e78:	009b      	lsls	r3, r3, #2
     e7a:	61bb      	str	r3, [r7, #24]
     e7c:	4b30      	ldr	r3, [pc, #192]	; (f40 <get_lux+0x168>)
     e7e:	617b      	str	r3, [r7, #20]
     e80:	e039      	b.n	ef6 <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K3T) {
     e82:	69fb      	ldr	r3, [r7, #28]
     e84:	2bc0      	cmp	r3, #192	; 0xc0
     e86:	d804      	bhi.n	e92 <get_lux+0xba>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
     e88:	4b2e      	ldr	r3, [pc, #184]	; (f44 <get_lux+0x16c>)
     e8a:	61bb      	str	r3, [r7, #24]
     e8c:	4b2e      	ldr	r3, [pc, #184]	; (f48 <get_lux+0x170>)
     e8e:	617b      	str	r3, [r7, #20]
     e90:	e031      	b.n	ef6 <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K4T) {
     e92:	69fa      	ldr	r2, [r7, #28]
     e94:	2380      	movs	r3, #128	; 0x80
     e96:	005b      	lsls	r3, r3, #1
     e98:	429a      	cmp	r2, r3
     e9a:	d805      	bhi.n	ea8 <get_lux+0xd0>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
     e9c:	239c      	movs	r3, #156	; 0x9c
     e9e:	009b      	lsls	r3, r3, #2
     ea0:	61bb      	str	r3, [r7, #24]
     ea2:	4b2a      	ldr	r3, [pc, #168]	; (f4c <get_lux+0x174>)
     ea4:	617b      	str	r3, [r7, #20]
     ea6:	e026      	b.n	ef6 <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K5T) {
     ea8:	69fa      	ldr	r2, [r7, #28]
     eaa:	239c      	movs	r3, #156	; 0x9c
     eac:	005b      	lsls	r3, r3, #1
     eae:	429a      	cmp	r2, r3
     eb0:	d806      	bhi.n	ec0 <get_lux+0xe8>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
     eb2:	2370      	movs	r3, #112	; 0x70
     eb4:	33ff      	adds	r3, #255	; 0xff
     eb6:	61bb      	str	r3, [r7, #24]
     eb8:	23fe      	movs	r3, #254	; 0xfe
     eba:	005b      	lsls	r3, r3, #1
     ebc:	617b      	str	r3, [r7, #20]
     ebe:	e01a      	b.n	ef6 <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K6T) {
     ec0:	69fa      	ldr	r2, [r7, #28]
     ec2:	23cd      	movs	r3, #205	; 0xcd
     ec4:	005b      	lsls	r3, r3, #1
     ec6:	429a      	cmp	r2, r3
     ec8:	d804      	bhi.n	ed4 <get_lux+0xfc>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
     eca:	23d2      	movs	r3, #210	; 0xd2
     ecc:	61bb      	str	r3, [r7, #24]
     ece:	23fb      	movs	r3, #251	; 0xfb
     ed0:	617b      	str	r3, [r7, #20]
     ed2:	e010      	b.n	ef6 <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K7T) {
     ed4:	69fb      	ldr	r3, [r7, #28]
     ed6:	4a1e      	ldr	r2, [pc, #120]	; (f50 <get_lux+0x178>)
     ed8:	4293      	cmp	r3, r2
     eda:	d804      	bhi.n	ee6 <get_lux+0x10e>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
     edc:	2318      	movs	r3, #24
     ede:	61bb      	str	r3, [r7, #24]
     ee0:	2312      	movs	r3, #18
     ee2:	617b      	str	r3, [r7, #20]
     ee4:	e007      	b.n	ef6 <get_lux+0x11e>
	} else if (ratio10 > TSL2561_LUX_K8T) {
     ee6:	69fb      	ldr	r3, [r7, #28]
     ee8:	4a19      	ldr	r2, [pc, #100]	; (f50 <get_lux+0x178>)
     eea:	4293      	cmp	r3, r2
     eec:	d903      	bls.n	ef6 <get_lux+0x11e>
		b = TSL2561_LUX_B8T; m = TSL2561_LUX_M8T;
     eee:	2300      	movs	r3, #0
     ef0:	61bb      	str	r3, [r7, #24]
     ef2:	2300      	movs	r3, #0
     ef4:	617b      	str	r3, [r7, #20]
	}
	
	
	unsigned long temp = ((chan0 * b) - (chan1 * m));
     ef6:	2312      	movs	r3, #18
     ef8:	18fb      	adds	r3, r7, r3
     efa:	881b      	ldrh	r3, [r3, #0]
     efc:	69ba      	ldr	r2, [r7, #24]
     efe:	435a      	muls	r2, r3
     f00:	2310      	movs	r3, #16
     f02:	18fb      	adds	r3, r7, r3
     f04:	881b      	ldrh	r3, [r3, #0]
     f06:	6979      	ldr	r1, [r7, #20]
     f08:	434b      	muls	r3, r1
     f0a:	1ad3      	subs	r3, r2, r3
     f0c:	60bb      	str	r3, [r7, #8]
	temp = (temp) ? temp : 0; // no negative lux
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
     f0e:	68bb      	ldr	r3, [r7, #8]
     f10:	2280      	movs	r2, #128	; 0x80
     f12:	0192      	lsls	r2, r2, #6
     f14:	4694      	mov	ip, r2
     f16:	4463      	add	r3, ip
     f18:	60bb      	str	r3, [r7, #8]
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
     f1a:	68bb      	ldr	r3, [r7, #8]
     f1c:	0b9b      	lsrs	r3, r3, #14
     f1e:	607b      	str	r3, [r7, #4]
	return lux;
     f20:	687b      	ldr	r3, [r7, #4]
}
     f22:	0018      	movs	r0, r3
     f24:	46bd      	mov	sp, r7
     f26:	b009      	add	sp, #36	; 0x24
     f28:	bd90      	pop	{r4, r7, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00000d69 	.word	0x00000d69
     f30:	00000da1 	.word	0x00000da1
     f34:	00017b68 	.word	0x00017b68
     f38:	00012f71 	.word	0x00012f71
     f3c:	000155b9 	.word	0x000155b9
     f40:	000002d1 	.word	0x000002d1
     f44:	0000023f 	.word	0x0000023f
     f48:	0000037b 	.word	0x0000037b
     f4c:	000003fe 	.word	0x000003fe
     f50:	0000029a 	.word	0x0000029a

00000f54 <crc32_calculate>:
 * \note To calculate the CRC of multiple blocks, use this function first, then
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
     f54:	b580      	push	{r7, lr}
     f56:	b084      	sub	sp, #16
     f58:	af00      	add	r7, sp, #0
     f5a:	60f8      	str	r0, [r7, #12]
     f5c:	60b9      	str	r1, [r7, #8]
     f5e:	607a      	str	r2, [r7, #4]
	*crc = 0;
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	2200      	movs	r2, #0
     f64:	601a      	str	r2, [r3, #0]

	return crc32_recalculate(data, length, crc);
     f66:	687a      	ldr	r2, [r7, #4]
     f68:	68b9      	ldr	r1, [r7, #8]
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	0018      	movs	r0, r3
     f6e:	4b03      	ldr	r3, [pc, #12]	; (f7c <crc32_calculate+0x28>)
     f70:	4798      	blx	r3
     f72:	0003      	movs	r3, r0
}
     f74:	0018      	movs	r0, r3
     f76:	46bd      	mov	sp, r7
     f78:	b004      	add	sp, #16
     f7a:	bd80      	pop	{r7, pc}
     f7c:	000089f5 	.word	0x000089f5

00000f80 <clear_state>:
 * @param mask state to clear
 *
 */
//TODO: check and see if it will only clear on mask
static void clear_state(download_state mask)
{
     f80:	b580      	push	{r7, lr}
     f82:	b082      	sub	sp, #8
     f84:	af00      	add	r7, sp, #0
     f86:	0002      	movs	r2, r0
     f88:	1dbb      	adds	r3, r7, #6
     f8a:	801a      	strh	r2, [r3, #0]
	down_state &= ~mask;
     f8c:	1dbb      	adds	r3, r7, #6
     f8e:	2200      	movs	r2, #0
     f90:	5e9b      	ldrsh	r3, [r3, r2]
     f92:	43db      	mvns	r3, r3
     f94:	b21b      	sxth	r3, r3
     f96:	4a06      	ldr	r2, [pc, #24]	; (fb0 <clear_state+0x30>)
     f98:	8812      	ldrh	r2, [r2, #0]
     f9a:	b212      	sxth	r2, r2
     f9c:	4013      	ands	r3, r2
     f9e:	b21b      	sxth	r3, r3
     fa0:	b29a      	uxth	r2, r3
     fa2:	4b03      	ldr	r3, [pc, #12]	; (fb0 <clear_state+0x30>)
     fa4:	801a      	strh	r2, [r3, #0]
}
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	46bd      	mov	sp, r7
     faa:	b002      	add	sp, #8
     fac:	bd80      	pop	{r7, pc}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	20000324 	.word	0x20000324

00000fb4 <add_state>:
/**
 * add a given state to the global download_state @ref down_state
 * @param mask add given state
 */
static void add_state(download_state mask)
{
     fb4:	b580      	push	{r7, lr}
     fb6:	b082      	sub	sp, #8
     fb8:	af00      	add	r7, sp, #0
     fba:	0002      	movs	r2, r0
     fbc:	1dbb      	adds	r3, r7, #6
     fbe:	801a      	strh	r2, [r3, #0]
	down_state |= mask;
     fc0:	4b10      	ldr	r3, [pc, #64]	; (1004 <add_state+0x50>)
     fc2:	881a      	ldrh	r2, [r3, #0]
     fc4:	1dbb      	adds	r3, r7, #6
     fc6:	881b      	ldrh	r3, [r3, #0]
     fc8:	4313      	orrs	r3, r2
     fca:	b29a      	uxth	r2, r3
     fcc:	4b0d      	ldr	r3, [pc, #52]	; (1004 <add_state+0x50>)
     fce:	801a      	strh	r2, [r3, #0]
	if (mask == CANCELED || mask == COMPLETED)
     fd0:	1dbb      	adds	r3, r7, #6
     fd2:	881b      	ldrh	r3, [r3, #0]
     fd4:	2b20      	cmp	r3, #32
     fd6:	d003      	beq.n	fe0 <add_state+0x2c>
     fd8:	1dbb      	adds	r3, r7, #6
     fda:	881b      	ldrh	r3, [r3, #0]
     fdc:	2b10      	cmp	r3, #16
     fde:	d104      	bne.n	fea <add_state+0x36>
		at25dfx_chip_sleep(&at25dfx_chip);
     fe0:	4b09      	ldr	r3, [pc, #36]	; (1008 <add_state+0x54>)
     fe2:	0018      	movs	r0, r3
     fe4:	4b09      	ldr	r3, [pc, #36]	; (100c <add_state+0x58>)
     fe6:	4798      	blx	r3
	else if (mask == DOWNLOADING)
		at25dfx_chip_wake(&at25dfx_chip);
}
     fe8:	e007      	b.n	ffa <add_state+0x46>
	else if (mask == DOWNLOADING)
     fea:	1dbb      	adds	r3, r7, #6
     fec:	881b      	ldrh	r3, [r3, #0]
     fee:	2b08      	cmp	r3, #8
     ff0:	d103      	bne.n	ffa <add_state+0x46>
		at25dfx_chip_wake(&at25dfx_chip);
     ff2:	4b05      	ldr	r3, [pc, #20]	; (1008 <add_state+0x54>)
     ff4:	0018      	movs	r0, r3
     ff6:	4b06      	ldr	r3, [pc, #24]	; (1010 <add_state+0x5c>)
     ff8:	4798      	blx	r3
}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	46bd      	mov	sp, r7
     ffe:	b002      	add	sp, #8
    1000:	bd80      	pop	{r7, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	20000324 	.word	0x20000324
    1008:	2000031c 	.word	0x2000031c
    100c:	00002f49 	.word	0x00002f49
    1010:	00002fd5 	.word	0x00002fd5

00001014 <init_state>:
/**
 * initialize global @ref down_state
 */
static void init_state()
{
    1014:	b580      	push	{r7, lr}
    1016:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
    1018:	4b04      	ldr	r3, [pc, #16]	; (102c <init_state+0x18>)
    101a:	2200      	movs	r2, #0
    101c:	801a      	strh	r2, [r3, #0]
	add_state(NOT_CHECKED);
    101e:	2040      	movs	r0, #64	; 0x40
    1020:	4b03      	ldr	r3, [pc, #12]	; (1030 <init_state+0x1c>)
    1022:	4798      	blx	r3
}
    1024:	46c0      	nop			; (mov r8, r8)
    1026:	46bd      	mov	sp, r7
    1028:	bd80      	pop	{r7, pc}
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	20000324 	.word	0x20000324
    1030:	00000fb5 	.word	0x00000fb5

00001034 <is_state_set>:
 * check is a state is set or not
 * @param  mask state to check
 * @return      true if state is set
 */
static inline bool is_state_set(download_state mask)
{
    1034:	b580      	push	{r7, lr}
    1036:	b082      	sub	sp, #8
    1038:	af00      	add	r7, sp, #0
    103a:	0002      	movs	r2, r0
    103c:	1dbb      	adds	r3, r7, #6
    103e:	801a      	strh	r2, [r3, #0]
	return (down_state & mask) != 0;
    1040:	4b06      	ldr	r3, [pc, #24]	; (105c <is_state_set+0x28>)
    1042:	881b      	ldrh	r3, [r3, #0]
    1044:	1dba      	adds	r2, r7, #6
    1046:	8812      	ldrh	r2, [r2, #0]
    1048:	4013      	ands	r3, r2
    104a:	b29b      	uxth	r3, r3
    104c:	1e5a      	subs	r2, r3, #1
    104e:	4193      	sbcs	r3, r2
    1050:	b2db      	uxtb	r3, r3
}
    1052:	0018      	movs	r0, r3
    1054:	46bd      	mov	sp, r7
    1056:	b002      	add	sp, #8
    1058:	bd80      	pop	{r7, pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	20000324 	.word	0x20000324

00001060 <start_download>:

/**
 * ensures proper state before GET Request
 */
static void start_download()
{
    1060:	b590      	push	{r4, r7, lr}
    1062:	b083      	sub	sp, #12
    1064:	af02      	add	r7, sp, #8
	if (!is_state_set(STORAGE_READY)) {
    1066:	2001      	movs	r0, #1
    1068:	4b35      	ldr	r3, [pc, #212]	; (1140 <start_download+0xe0>)
    106a:	4798      	blx	r3
    106c:	0003      	movs	r3, r0
    106e:	001a      	movs	r2, r3
    1070:	2301      	movs	r3, #1
    1072:	4053      	eors	r3, r2
    1074:	b2db      	uxtb	r3, r3
    1076:	2b00      	cmp	r3, #0
    1078:	d004      	beq.n	1084 <start_download+0x24>
		printf("start_download: MMC storage not ready.\r\n");
    107a:	4b32      	ldr	r3, [pc, #200]	; (1144 <start_download+0xe4>)
    107c:	0018      	movs	r0, r3
    107e:	4b32      	ldr	r3, [pc, #200]	; (1148 <start_download+0xe8>)
    1080:	4798      	blx	r3
		return;
    1082:	e059      	b.n	1138 <start_download+0xd8>
	}

	if (!is_state_set(WIFI_CONNECTED)) {
    1084:	2002      	movs	r0, #2
    1086:	4b2e      	ldr	r3, [pc, #184]	; (1140 <start_download+0xe0>)
    1088:	4798      	blx	r3
    108a:	0003      	movs	r3, r0
    108c:	001a      	movs	r2, r3
    108e:	2301      	movs	r3, #1
    1090:	4053      	eors	r3, r2
    1092:	b2db      	uxtb	r3, r3
    1094:	2b00      	cmp	r3, #0
    1096:	d004      	beq.n	10a2 <start_download+0x42>
		printf("start_download: Wi-Fi is not connected.\r\n");
    1098:	4b2c      	ldr	r3, [pc, #176]	; (114c <start_download+0xec>)
    109a:	0018      	movs	r0, r3
    109c:	4b2a      	ldr	r3, [pc, #168]	; (1148 <start_download+0xe8>)
    109e:	4798      	blx	r3
		return;
    10a0:	e04a      	b.n	1138 <start_download+0xd8>
	}

	if (is_state_set(GET_REQUESTED)) {
    10a2:	2004      	movs	r0, #4
    10a4:	4b26      	ldr	r3, [pc, #152]	; (1140 <start_download+0xe0>)
    10a6:	4798      	blx	r3
    10a8:	1e03      	subs	r3, r0, #0
    10aa:	d004      	beq.n	10b6 <start_download+0x56>
		printf("start_download: request is sent already.\r\n");
    10ac:	4b28      	ldr	r3, [pc, #160]	; (1150 <start_download+0xf0>)
    10ae:	0018      	movs	r0, r3
    10b0:	4b25      	ldr	r3, [pc, #148]	; (1148 <start_download+0xe8>)
    10b2:	4798      	blx	r3
		return;
    10b4:	e040      	b.n	1138 <start_download+0xd8>
	}

	if (is_state_set(DOWNLOADING)) {
    10b6:	2008      	movs	r0, #8
    10b8:	4b21      	ldr	r3, [pc, #132]	; (1140 <start_download+0xe0>)
    10ba:	4798      	blx	r3
    10bc:	1e03      	subs	r3, r0, #0
    10be:	d004      	beq.n	10ca <start_download+0x6a>
		printf("start_download: running download already.\r\n");
    10c0:	4b24      	ldr	r3, [pc, #144]	; (1154 <start_download+0xf4>)
    10c2:	0018      	movs	r0, r3
    10c4:	4b20      	ldr	r3, [pc, #128]	; (1148 <start_download+0xe8>)
    10c6:	4798      	blx	r3
		return;
    10c8:	e036      	b.n	1138 <start_download+0xd8>
	}
	if (is_state_set(NOT_CHECKED)) {
    10ca:	2040      	movs	r0, #64	; 0x40
    10cc:	4b1c      	ldr	r3, [pc, #112]	; (1140 <start_download+0xe0>)
    10ce:	4798      	blx	r3
    10d0:	1e03      	subs	r3, r0, #0
    10d2:	d00e      	beq.n	10f2 <start_download+0x92>
		printf("start_download [NOT_CHECKED]: sending HTTP request for header\r\n");
    10d4:	4b20      	ldr	r3, [pc, #128]	; (1158 <start_download+0xf8>)
    10d6:	0018      	movs	r0, r3
    10d8:	4b1b      	ldr	r3, [pc, #108]	; (1148 <start_download+0xe8>)
    10da:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_header_http_address, HTTP_METHOD_GET, NULL, NULL);
    10dc:	4b1f      	ldr	r3, [pc, #124]	; (115c <start_download+0xfc>)
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	68d9      	ldr	r1, [r3, #12]
    10e2:	481f      	ldr	r0, [pc, #124]	; (1160 <start_download+0x100>)
    10e4:	2300      	movs	r3, #0
    10e6:	9300      	str	r3, [sp, #0]
    10e8:	2300      	movs	r3, #0
    10ea:	2201      	movs	r2, #1
    10ec:	4c1d      	ldr	r4, [pc, #116]	; (1164 <start_download+0x104>)
    10ee:	47a0      	blx	r4
		return;
    10f0:	e022      	b.n	1138 <start_download+0xd8>
	}
	if (is_state_set(UPDATE_AVAILABLE)) {
    10f2:	2080      	movs	r0, #128	; 0x80
    10f4:	4b12      	ldr	r3, [pc, #72]	; (1140 <start_download+0xe0>)
    10f6:	4798      	blx	r3
    10f8:	1e03      	subs	r3, r0, #0
    10fa:	d00e      	beq.n	111a <start_download+0xba>
		printf("start_download [UPDATE_AVAILABLE]: sending HTTP request for firmware\r\n");
    10fc:	4b1a      	ldr	r3, [pc, #104]	; (1168 <start_download+0x108>)
    10fe:	0018      	movs	r0, r3
    1100:	4b11      	ldr	r3, [pc, #68]	; (1148 <start_download+0xe8>)
    1102:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_http_address, HTTP_METHOD_GET, NULL, NULL);
    1104:	4b15      	ldr	r3, [pc, #84]	; (115c <start_download+0xfc>)
    1106:	681b      	ldr	r3, [r3, #0]
    1108:	6919      	ldr	r1, [r3, #16]
    110a:	4815      	ldr	r0, [pc, #84]	; (1160 <start_download+0x100>)
    110c:	2300      	movs	r3, #0
    110e:	9300      	str	r3, [sp, #0]
    1110:	2300      	movs	r3, #0
    1112:	2201      	movs	r2, #1
    1114:	4c13      	ldr	r4, [pc, #76]	; (1164 <start_download+0x104>)
    1116:	47a0      	blx	r4
		return;
    1118:	e00e      	b.n	1138 <start_download+0xd8>
	}
	if (is_state_set(UPDATE_NOT_AVAILABLE)) {
    111a:	2380      	movs	r3, #128	; 0x80
    111c:	005b      	lsls	r3, r3, #1
    111e:	0018      	movs	r0, r3
    1120:	4b07      	ldr	r3, [pc, #28]	; (1140 <start_download+0xe0>)
    1122:	4798      	blx	r3
    1124:	1e03      	subs	r3, r0, #0
    1126:	d007      	beq.n	1138 <start_download+0xd8>
		printf("start_download: no update available\r\n");
    1128:	4b10      	ldr	r3, [pc, #64]	; (116c <start_download+0x10c>)
    112a:	0018      	movs	r0, r3
    112c:	4b06      	ldr	r3, [pc, #24]	; (1148 <start_download+0xe8>)
    112e:	4798      	blx	r3
		add_state(COMPLETED);
    1130:	2010      	movs	r0, #16
    1132:	4b0f      	ldr	r3, [pc, #60]	; (1170 <start_download+0x110>)
    1134:	4798      	blx	r3
		return;
    1136:	46c0      	nop			; (mov r8, r8)
	}
}
    1138:	46bd      	mov	sp, r7
    113a:	b001      	add	sp, #4
    113c:	bd90      	pop	{r4, r7, pc}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	00001035 	.word	0x00001035
    1144:	00017b8c 	.word	0x00017b8c
    1148:	0001308d 	.word	0x0001308d
    114c:	00017bb4 	.word	0x00017bb4
    1150:	00017be0 	.word	0x00017be0
    1154:	00017c0c 	.word	0x00017c0c
    1158:	00017c38 	.word	0x00017c38
    115c:	200004ac 	.word	0x200004ac
    1160:	20000380 	.word	0x20000380
    1164:	0000b50d 	.word	0x0000b50d
    1168:	00017c78 	.word	0x00017c78
    116c:	00017cc0 	.word	0x00017cc0
    1170:	00000fb5 	.word	0x00000fb5

00001174 <write_firmware_metadata>:

static void write_firmware_metadata(uint32_t firmware_address, uint16_t firmware_version, uint32_t firmware_checksum, uint32_t fw_size)
{
    1174:	b5b0      	push	{r4, r5, r7, lr}
    1176:	b0c8      	sub	sp, #288	; 0x120
    1178:	af00      	add	r7, sp, #0
    117a:	60f8      	str	r0, [r7, #12]
    117c:	607a      	str	r2, [r7, #4]
    117e:	603b      	str	r3, [r7, #0]
    1180:	4b29      	ldr	r3, [pc, #164]	; (1228 <write_firmware_metadata+0xb4>)
    1182:	2290      	movs	r2, #144	; 0x90
    1184:	0052      	lsls	r2, r2, #1
    1186:	4694      	mov	ip, r2
    1188:	44bc      	add	ip, r7
    118a:	4463      	add	r3, ip
    118c:	1c0a      	adds	r2, r1, #0
    118e:	801a      	strh	r2, [r3, #0]
	if (FW1_ADDR == firmware_address)
    1190:	68fa      	ldr	r2, [r7, #12]
    1192:	2380      	movs	r3, #128	; 0x80
    1194:	019b      	lsls	r3, r3, #6
    1196:	429a      	cmp	r2, r3
    1198:	d103      	bne.n	11a2 <write_firmware_metadata+0x2e>
		firmware_address = FW1_HEADER_ADDR;
    119a:	2380      	movs	r3, #128	; 0x80
    119c:	015b      	lsls	r3, r3, #5
    119e:	60fb      	str	r3, [r7, #12]
    11a0:	e007      	b.n	11b2 <write_firmware_metadata+0x3e>
	else if (FW2_ADDR == firmware_address)
    11a2:	68fa      	ldr	r2, [r7, #12]
    11a4:	2382      	movs	r3, #130	; 0x82
    11a6:	02db      	lsls	r3, r3, #11
    11a8:	429a      	cmp	r2, r3
    11aa:	d138      	bne.n	121e <write_firmware_metadata+0xaa>
		firmware_address = FW2_HEADER_ADDR;
    11ac:	2380      	movs	r3, #128	; 0x80
    11ae:	02db      	lsls	r3, r3, #11
    11b0:	60fb      	str	r3, [r7, #12]
		return;

	//NOTE: existing firmware information has already been erased when chip was being prepped
	//NOTE: this is to prevent metadata corruption or a mismatch in the case of failure

	fw_header_t new_firmware_header = { .fw_version = firmware_version, .checksum = firmware_checksum, .size = fw_size };
    11b2:	2388      	movs	r3, #136	; 0x88
    11b4:	005b      	lsls	r3, r3, #1
    11b6:	18fb      	adds	r3, r7, r3
    11b8:	4a1b      	ldr	r2, [pc, #108]	; (1228 <write_firmware_metadata+0xb4>)
    11ba:	2190      	movs	r1, #144	; 0x90
    11bc:	0049      	lsls	r1, r1, #1
    11be:	468c      	mov	ip, r1
    11c0:	44bc      	add	ip, r7
    11c2:	4462      	add	r2, ip
    11c4:	8812      	ldrh	r2, [r2, #0]
    11c6:	801a      	strh	r2, [r3, #0]
    11c8:	2388      	movs	r3, #136	; 0x88
    11ca:	005b      	lsls	r3, r3, #1
    11cc:	18fb      	adds	r3, r7, r3
    11ce:	687a      	ldr	r2, [r7, #4]
    11d0:	605a      	str	r2, [r3, #4]
    11d2:	2388      	movs	r3, #136	; 0x88
    11d4:	005b      	lsls	r3, r3, #1
    11d6:	18fb      	adds	r3, r7, r3
    11d8:	683a      	ldr	r2, [r7, #0]
    11da:	609a      	str	r2, [r3, #8]
	uint8_t write_buffer[FLASH_ROW_SIZE];
	memcpy(write_buffer, &new_firmware_header, sizeof(fw_header_t));
    11dc:	2388      	movs	r3, #136	; 0x88
    11de:	005b      	lsls	r3, r3, #1
    11e0:	18f9      	adds	r1, r7, r3
    11e2:	2310      	movs	r3, #16
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	220c      	movs	r2, #12
    11e8:	0018      	movs	r0, r3
    11ea:	4b10      	ldr	r3, [pc, #64]	; (122c <write_firmware_metadata+0xb8>)
    11ec:	4798      	blx	r3
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
    11ee:	2320      	movs	r3, #32
    11f0:	33ff      	adds	r3, #255	; 0xff
    11f2:	18fc      	adds	r4, r7, r3
    11f4:	2380      	movs	r3, #128	; 0x80
    11f6:	005b      	lsls	r3, r3, #1
    11f8:	2210      	movs	r2, #16
    11fa:	18ba      	adds	r2, r7, r2
    11fc:	68f9      	ldr	r1, [r7, #12]
    11fe:	480c      	ldr	r0, [pc, #48]	; (1230 <write_firmware_metadata+0xbc>)
    1200:	4d0c      	ldr	r5, [pc, #48]	; (1234 <write_firmware_metadata+0xc0>)
    1202:	47a8      	blx	r5
    1204:	0003      	movs	r3, r0
    1206:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != write_code) {
    1208:	2320      	movs	r3, #32
    120a:	33ff      	adds	r3, #255	; 0xff
    120c:	18fb      	adds	r3, r7, r3
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	2b00      	cmp	r3, #0
    1212:	d005      	beq.n	1220 <write_firmware_metadata+0xac>
		printf("write_firmware_metadata: could not write to flash!\r\n");
    1214:	4b08      	ldr	r3, [pc, #32]	; (1238 <write_firmware_metadata+0xc4>)
    1216:	0018      	movs	r0, r3
    1218:	4b08      	ldr	r3, [pc, #32]	; (123c <write_firmware_metadata+0xc8>)
    121a:	4798      	blx	r3
		return;
    121c:	e000      	b.n	1220 <write_firmware_metadata+0xac>
		return;
    121e:	46c0      	nop			; (mov r8, r8)
	}
}
    1220:	46bd      	mov	sp, r7
    1222:	b048      	add	sp, #288	; 0x120
    1224:	bdb0      	pop	{r4, r5, r7, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	fffffeea 	.word	0xfffffeea
    122c:	000124f9 	.word	0x000124f9
    1230:	2000031c 	.word	0x2000031c
    1234:	00002bf1 	.word	0x00002bf1
    1238:	00017ce8 	.word	0x00017ce8
    123c:	0001308d 	.word	0x0001308d

00001240 <update_boot_status>:

/**
 * update the boot status struct in internal memory
 */
static void update_boot_status()
{
    1240:	b590      	push	{r4, r7, lr}
    1242:	b0d1      	sub	sp, #324	; 0x144
    1244:	af00      	add	r7, sp, #0
	struct nvm_parameters nvm_information;

	nvm_get_parameters(&nvm_information);
    1246:	2386      	movs	r3, #134	; 0x86
    1248:	005b      	lsls	r3, r3, #1
    124a:	18fb      	adds	r3, r7, r3
    124c:	0018      	movs	r0, r3
    124e:	4ba5      	ldr	r3, [pc, #660]	; (14e4 <update_boot_status+0x2a4>)
    1250:	4798      	blx	r3
	uint16_t num_pages = nvm_information.nvm_number_of_pages;
    1252:	239b      	movs	r3, #155	; 0x9b
    1254:	005b      	lsls	r3, r3, #1
    1256:	18fb      	adds	r3, r7, r3
    1258:	2286      	movs	r2, #134	; 0x86
    125a:	0052      	lsls	r2, r2, #1
    125c:	18ba      	adds	r2, r7, r2
    125e:	8852      	ldrh	r2, [r2, #2]
    1260:	801a      	strh	r2, [r3, #0]
	int page_to_write = BOOT_STATUS_ADDR / NVMCTRL_PAGE_SIZE;
    1262:	23ff      	movs	r3, #255	; 0xff
    1264:	2298      	movs	r2, #152	; 0x98
    1266:	0052      	lsls	r2, r2, #1
    1268:	18ba      	adds	r2, r7, r2
    126a:	6013      	str	r3, [r2, #0]
	int row_to_erase = page_to_write / NVMCTRL_ROW_PAGES;
    126c:	2398      	movs	r3, #152	; 0x98
    126e:	005b      	lsls	r3, r3, #1
    1270:	18fb      	adds	r3, r7, r3
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	2b00      	cmp	r3, #0
    1276:	da00      	bge.n	127a <update_boot_status+0x3a>
    1278:	3303      	adds	r3, #3
    127a:	109b      	asrs	r3, r3, #2
    127c:	2296      	movs	r2, #150	; 0x96
    127e:	0052      	lsls	r2, r2, #1
    1280:	18ba      	adds	r2, r7, r2
    1282:	6013      	str	r3, [r2, #0]
	printf("update_boot_status: row_to_erase: %d\r\n", row_to_erase);
    1284:	2396      	movs	r3, #150	; 0x96
    1286:	005b      	lsls	r3, r3, #1
    1288:	18fb      	adds	r3, r7, r3
    128a:	681a      	ldr	r2, [r3, #0]
    128c:	4b96      	ldr	r3, [pc, #600]	; (14e8 <update_boot_status+0x2a8>)
    128e:	0011      	movs	r1, r2
    1290:	0018      	movs	r0, r3
    1292:	4b96      	ldr	r3, [pc, #600]	; (14ec <update_boot_status+0x2ac>)
    1294:	4798      	blx	r3
	printf("update_boot_status: page_to_write: %d\r\n", page_to_write);
    1296:	2398      	movs	r3, #152	; 0x98
    1298:	005b      	lsls	r3, r3, #1
    129a:	18fb      	adds	r3, r7, r3
    129c:	681a      	ldr	r2, [r3, #0]
    129e:	4b94      	ldr	r3, [pc, #592]	; (14f0 <update_boot_status+0x2b0>)
    12a0:	0011      	movs	r1, r2
    12a2:	0018      	movs	r0, r3
    12a4:	4b91      	ldr	r3, [pc, #580]	; (14ec <update_boot_status+0x2ac>)
    12a6:	4798      	blx	r3
	uint8_t page_offset = page_to_write - (row_to_erase * NVMCTRL_ROW_PAGES);
    12a8:	2398      	movs	r3, #152	; 0x98
    12aa:	005b      	lsls	r3, r3, #1
    12ac:	18fb      	adds	r3, r7, r3
    12ae:	681b      	ldr	r3, [r3, #0]
    12b0:	b2d9      	uxtb	r1, r3
    12b2:	2396      	movs	r3, #150	; 0x96
    12b4:	005b      	lsls	r3, r3, #1
    12b6:	18fb      	adds	r3, r7, r3
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	b2db      	uxtb	r3, r3
    12bc:	009b      	lsls	r3, r3, #2
    12be:	b2da      	uxtb	r2, r3
    12c0:	232c      	movs	r3, #44	; 0x2c
    12c2:	33ff      	adds	r3, #255	; 0xff
    12c4:	18fb      	adds	r3, r7, r3
    12c6:	1a8a      	subs	r2, r1, r2
    12c8:	701a      	strb	r2, [r3, #0]
	int row_address = row_to_erase * NVMCTRL_ROW_SIZE;
    12ca:	2396      	movs	r3, #150	; 0x96
    12cc:	005b      	lsls	r3, r3, #1
    12ce:	18fb      	adds	r3, r7, r3
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	021b      	lsls	r3, r3, #8
    12d4:	2292      	movs	r2, #146	; 0x92
    12d6:	0052      	lsls	r2, r2, #1
    12d8:	18ba      	adds	r2, r7, r2
    12da:	6013      	str	r3, [r2, #0]
	printf("update_boot_status: row_address: %d\r\n", row_address);
    12dc:	2392      	movs	r3, #146	; 0x92
    12de:	005b      	lsls	r3, r3, #1
    12e0:	18fb      	adds	r3, r7, r3
    12e2:	681a      	ldr	r2, [r3, #0]
    12e4:	4b83      	ldr	r3, [pc, #524]	; (14f4 <update_boot_status+0x2b4>)
    12e6:	0011      	movs	r1, r2
    12e8:	0018      	movs	r0, r3
    12ea:	4b80      	ldr	r3, [pc, #512]	; (14ec <update_boot_status+0x2ac>)
    12ec:	4798      	blx	r3
	printf("update_boot_status: page_offset: %d\r\n", page_offset);
    12ee:	232c      	movs	r3, #44	; 0x2c
    12f0:	33ff      	adds	r3, #255	; 0xff
    12f2:	18fb      	adds	r3, r7, r3
    12f4:	781a      	ldrb	r2, [r3, #0]
    12f6:	4b80      	ldr	r3, [pc, #512]	; (14f8 <update_boot_status+0x2b8>)
    12f8:	0011      	movs	r1, r2
    12fa:	0018      	movs	r0, r3
    12fc:	4b7b      	ldr	r3, [pc, #492]	; (14ec <update_boot_status+0x2ac>)
    12fe:	4798      	blx	r3
	uint8_t row_buffer[NVMCTRL_ROW_SIZE];
	enum status_code read_nvm_code;
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    1300:	2300      	movs	r3, #0
    1302:	229e      	movs	r2, #158	; 0x9e
    1304:	0052      	lsls	r2, r2, #1
    1306:	18ba      	adds	r2, r7, r2
    1308:	6013      	str	r3, [r2, #0]
    130a:	e031      	b.n	1370 <update_boot_status+0x130>
		int offset = i * NVMCTRL_PAGE_SIZE;
    130c:	239e      	movs	r3, #158	; 0x9e
    130e:	005b      	lsls	r3, r3, #1
    1310:	18fb      	adds	r3, r7, r3
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	019b      	lsls	r3, r3, #6
    1316:	2290      	movs	r2, #144	; 0x90
    1318:	0052      	lsls	r2, r2, #1
    131a:	18ba      	adds	r2, r7, r2
    131c:	6013      	str	r3, [r2, #0]
		do
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    131e:	2392      	movs	r3, #146	; 0x92
    1320:	005b      	lsls	r3, r3, #1
    1322:	18fb      	adds	r3, r7, r3
    1324:	681a      	ldr	r2, [r3, #0]
    1326:	2390      	movs	r3, #144	; 0x90
    1328:	005b      	lsls	r3, r3, #1
    132a:	18fb      	adds	r3, r7, r3
    132c:	681b      	ldr	r3, [r3, #0]
    132e:	18d3      	adds	r3, r2, r3
    1330:	0018      	movs	r0, r3
    1332:	2390      	movs	r3, #144	; 0x90
    1334:	005b      	lsls	r3, r3, #1
    1336:	18fb      	adds	r3, r7, r3
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	220c      	movs	r2, #12
    133c:	18ba      	adds	r2, r7, r2
    133e:	18d3      	adds	r3, r2, r3
    1340:	2220      	movs	r2, #32
    1342:	32ff      	adds	r2, #255	; 0xff
    1344:	18bc      	adds	r4, r7, r2
    1346:	2240      	movs	r2, #64	; 0x40
    1348:	0019      	movs	r1, r3
    134a:	4b6c      	ldr	r3, [pc, #432]	; (14fc <update_boot_status+0x2bc>)
    134c:	4798      	blx	r3
    134e:	0003      	movs	r3, r0
    1350:	7023      	strb	r3, [r4, #0]
		while (STATUS_OK != read_nvm_code);
    1352:	2320      	movs	r3, #32
    1354:	33ff      	adds	r3, #255	; 0xff
    1356:	18fb      	adds	r3, r7, r3
    1358:	781b      	ldrb	r3, [r3, #0]
    135a:	2b00      	cmp	r3, #0
    135c:	d1df      	bne.n	131e <update_boot_status+0xde>
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    135e:	239e      	movs	r3, #158	; 0x9e
    1360:	005b      	lsls	r3, r3, #1
    1362:	18fb      	adds	r3, r7, r3
    1364:	681b      	ldr	r3, [r3, #0]
    1366:	3301      	adds	r3, #1
    1368:	229e      	movs	r2, #158	; 0x9e
    136a:	0052      	lsls	r2, r2, #1
    136c:	18ba      	adds	r2, r7, r2
    136e:	6013      	str	r3, [r2, #0]
    1370:	239e      	movs	r3, #158	; 0x9e
    1372:	005b      	lsls	r3, r3, #1
    1374:	18fb      	adds	r3, r7, r3
    1376:	681b      	ldr	r3, [r3, #0]
    1378:	2b03      	cmp	r3, #3
    137a:	ddc7      	ble.n	130c <update_boot_status+0xcc>
	}
	printf("row: %04x\r\n", row_buffer);
    137c:	230c      	movs	r3, #12
    137e:	18fa      	adds	r2, r7, r3
    1380:	4b5f      	ldr	r3, [pc, #380]	; (1500 <update_boot_status+0x2c0>)
    1382:	0011      	movs	r1, r2
    1384:	0018      	movs	r0, r3
    1386:	4b59      	ldr	r3, [pc, #356]	; (14ec <update_boot_status+0x2ac>)
    1388:	4798      	blx	r3
	do
		read_nvm_code = nvm_erase_row(row_address);
    138a:	2392      	movs	r3, #146	; 0x92
    138c:	005b      	lsls	r3, r3, #1
    138e:	18fb      	adds	r3, r7, r3
    1390:	681b      	ldr	r3, [r3, #0]
    1392:	2220      	movs	r2, #32
    1394:	32ff      	adds	r2, #255	; 0xff
    1396:	18bc      	adds	r4, r7, r2
    1398:	0018      	movs	r0, r3
    139a:	4b5a      	ldr	r3, [pc, #360]	; (1504 <update_boot_status+0x2c4>)
    139c:	4798      	blx	r3
    139e:	0003      	movs	r3, r0
    13a0:	7023      	strb	r3, [r4, #0]
	while (STATUS_OK != read_nvm_code);
    13a2:	2320      	movs	r3, #32
    13a4:	33ff      	adds	r3, #255	; 0xff
    13a6:	18fb      	adds	r3, r7, r3
    13a8:	781b      	ldrb	r3, [r3, #0]
    13aa:	2b00      	cmp	r3, #0
    13ac:	d1ed      	bne.n	138a <update_boot_status+0x14a>

	fw_status_t write_boot;
	memcpy(&write_boot, row_buffer + page_offset * NVMCTRL_PAGE_SIZE, sizeof(fw_status_t));
    13ae:	232c      	movs	r3, #44	; 0x2c
    13b0:	33ff      	adds	r3, #255	; 0xff
    13b2:	18fb      	adds	r3, r7, r3
    13b4:	781b      	ldrb	r3, [r3, #0]
    13b6:	019b      	lsls	r3, r3, #6
    13b8:	001a      	movs	r2, r3
    13ba:	230c      	movs	r3, #12
    13bc:	18fb      	adds	r3, r7, r3
    13be:	1899      	adds	r1, r3, r2
    13c0:	1d3b      	adds	r3, r7, #4
    13c2:	2208      	movs	r2, #8
    13c4:	0018      	movs	r0, r3
    13c6:	4b50      	ldr	r3, [pc, #320]	; (1508 <update_boot_status+0x2c8>)
    13c8:	4798      	blx	r3
	write_boot.new_image_ready = 1;
    13ca:	4b50      	ldr	r3, [pc, #320]	; (150c <update_boot_status+0x2cc>)
    13cc:	22a0      	movs	r2, #160	; 0xa0
    13ce:	0052      	lsls	r2, r2, #1
    13d0:	4694      	mov	ip, r2
    13d2:	44bc      	add	ip, r7
    13d4:	4463      	add	r3, ip
    13d6:	2201      	movs	r2, #1
    13d8:	70da      	strb	r2, [r3, #3]
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[0]);
    13da:	4b4c      	ldr	r3, [pc, #304]	; (150c <update_boot_status+0x2cc>)
    13dc:	22a0      	movs	r2, #160	; 0xa0
    13de:	0052      	lsls	r2, r2, #1
    13e0:	4694      	mov	ip, r2
    13e2:	44bc      	add	ip, r7
    13e4:	4463      	add	r3, ip
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	001a      	movs	r2, r3
    13ea:	4b49      	ldr	r3, [pc, #292]	; (1510 <update_boot_status+0x2d0>)
    13ec:	0011      	movs	r1, r2
    13ee:	0018      	movs	r0, r3
    13f0:	4b3e      	ldr	r3, [pc, #248]	; (14ec <update_boot_status+0x2ac>)
    13f2:	4798      	blx	r3
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[1]);
    13f4:	4b45      	ldr	r3, [pc, #276]	; (150c <update_boot_status+0x2cc>)
    13f6:	22a0      	movs	r2, #160	; 0xa0
    13f8:	0052      	lsls	r2, r2, #1
    13fa:	4694      	mov	ip, r2
    13fc:	44bc      	add	ip, r7
    13fe:	4463      	add	r3, ip
    1400:	785b      	ldrb	r3, [r3, #1]
    1402:	001a      	movs	r2, r3
    1404:	4b42      	ldr	r3, [pc, #264]	; (1510 <update_boot_status+0x2d0>)
    1406:	0011      	movs	r1, r2
    1408:	0018      	movs	r0, r3
    140a:	4b38      	ldr	r3, [pc, #224]	; (14ec <update_boot_status+0x2ac>)
    140c:	4798      	blx	r3
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[2]);
    140e:	4b3f      	ldr	r3, [pc, #252]	; (150c <update_boot_status+0x2cc>)
    1410:	22a0      	movs	r2, #160	; 0xa0
    1412:	0052      	lsls	r2, r2, #1
    1414:	4694      	mov	ip, r2
    1416:	44bc      	add	ip, r7
    1418:	4463      	add	r3, ip
    141a:	789b      	ldrb	r3, [r3, #2]
    141c:	001a      	movs	r2, r3
    141e:	4b3c      	ldr	r3, [pc, #240]	; (1510 <update_boot_status+0x2d0>)
    1420:	0011      	movs	r1, r2
    1422:	0018      	movs	r0, r3
    1424:	4b31      	ldr	r3, [pc, #196]	; (14ec <update_boot_status+0x2ac>)
    1426:	4798      	blx	r3
	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));
    1428:	232c      	movs	r3, #44	; 0x2c
    142a:	33ff      	adds	r3, #255	; 0xff
    142c:	18fb      	adds	r3, r7, r3
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	019b      	lsls	r3, r3, #6
    1432:	001a      	movs	r2, r3
    1434:	230c      	movs	r3, #12
    1436:	18fb      	adds	r3, r7, r3
    1438:	189b      	adds	r3, r3, r2
    143a:	1d39      	adds	r1, r7, #4
    143c:	2208      	movs	r2, #8
    143e:	0018      	movs	r0, r3
    1440:	4b31      	ldr	r3, [pc, #196]	; (1508 <update_boot_status+0x2c8>)
    1442:	4798      	blx	r3

	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));
    1444:	232c      	movs	r3, #44	; 0x2c
    1446:	33ff      	adds	r3, #255	; 0xff
    1448:	18fb      	adds	r3, r7, r3
    144a:	781b      	ldrb	r3, [r3, #0]
    144c:	019b      	lsls	r3, r3, #6
    144e:	001a      	movs	r2, r3
    1450:	230c      	movs	r3, #12
    1452:	18fb      	adds	r3, r7, r3
    1454:	189b      	adds	r3, r3, r2
    1456:	1d39      	adds	r1, r7, #4
    1458:	2208      	movs	r2, #8
    145a:	0018      	movs	r0, r3
    145c:	4b2a      	ldr	r3, [pc, #168]	; (1508 <update_boot_status+0x2c8>)
    145e:	4798      	blx	r3
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    1460:	2300      	movs	r3, #0
    1462:	229c      	movs	r2, #156	; 0x9c
    1464:	0052      	lsls	r2, r2, #1
    1466:	18ba      	adds	r2, r7, r2
    1468:	6013      	str	r3, [r2, #0]
    146a:	e031      	b.n	14d0 <update_boot_status+0x290>
		int offset = i * NVMCTRL_PAGE_SIZE;
    146c:	239c      	movs	r3, #156	; 0x9c
    146e:	005b      	lsls	r3, r3, #1
    1470:	18fb      	adds	r3, r7, r3
    1472:	681b      	ldr	r3, [r3, #0]
    1474:	019b      	lsls	r3, r3, #6
    1476:	228c      	movs	r2, #140	; 0x8c
    1478:	0052      	lsls	r2, r2, #1
    147a:	18ba      	adds	r2, r7, r2
    147c:	6013      	str	r3, [r2, #0]
		do
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    147e:	2392      	movs	r3, #146	; 0x92
    1480:	005b      	lsls	r3, r3, #1
    1482:	18fb      	adds	r3, r7, r3
    1484:	681a      	ldr	r2, [r3, #0]
    1486:	238c      	movs	r3, #140	; 0x8c
    1488:	005b      	lsls	r3, r3, #1
    148a:	18fb      	adds	r3, r7, r3
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	18d3      	adds	r3, r2, r3
    1490:	0018      	movs	r0, r3
    1492:	238c      	movs	r3, #140	; 0x8c
    1494:	005b      	lsls	r3, r3, #1
    1496:	18fb      	adds	r3, r7, r3
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	220c      	movs	r2, #12
    149c:	18ba      	adds	r2, r7, r2
    149e:	18d3      	adds	r3, r2, r3
    14a0:	2220      	movs	r2, #32
    14a2:	32ff      	adds	r2, #255	; 0xff
    14a4:	18bc      	adds	r4, r7, r2
    14a6:	2240      	movs	r2, #64	; 0x40
    14a8:	0019      	movs	r1, r3
    14aa:	4b1a      	ldr	r3, [pc, #104]	; (1514 <update_boot_status+0x2d4>)
    14ac:	4798      	blx	r3
    14ae:	0003      	movs	r3, r0
    14b0:	7023      	strb	r3, [r4, #0]
		while (STATUS_OK != read_nvm_code);
    14b2:	2320      	movs	r3, #32
    14b4:	33ff      	adds	r3, #255	; 0xff
    14b6:	18fb      	adds	r3, r7, r3
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	2b00      	cmp	r3, #0
    14bc:	d1df      	bne.n	147e <update_boot_status+0x23e>
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    14be:	239c      	movs	r3, #156	; 0x9c
    14c0:	005b      	lsls	r3, r3, #1
    14c2:	18fb      	adds	r3, r7, r3
    14c4:	681b      	ldr	r3, [r3, #0]
    14c6:	3301      	adds	r3, #1
    14c8:	229c      	movs	r2, #156	; 0x9c
    14ca:	0052      	lsls	r2, r2, #1
    14cc:	18ba      	adds	r2, r7, r2
    14ce:	6013      	str	r3, [r2, #0]
    14d0:	239c      	movs	r3, #156	; 0x9c
    14d2:	005b      	lsls	r3, r3, #1
    14d4:	18fb      	adds	r3, r7, r3
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	2b03      	cmp	r3, #3
    14da:	ddc7      	ble.n	146c <update_boot_status+0x22c>
	}
}
    14dc:	46c0      	nop			; (mov r8, r8)
    14de:	46bd      	mov	sp, r7
    14e0:	b051      	add	sp, #324	; 0x144
    14e2:	bd90      	pop	{r4, r7, pc}
    14e4:	0000951d 	.word	0x0000951d
    14e8:	00017d1c 	.word	0x00017d1c
    14ec:	00012f71 	.word	0x00012f71
    14f0:	00017d44 	.word	0x00017d44
    14f4:	00017d6c 	.word	0x00017d6c
    14f8:	00017d94 	.word	0x00017d94
    14fc:	00009379 	.word	0x00009379
    1500:	00017dbc 	.word	0x00017dbc
    1504:	00009475 	.word	0x00009475
    1508:	000124f9 	.word	0x000124f9
    150c:	fffffec4 	.word	0xfffffec4
    1510:	00017dc8 	.word	0x00017dc8
    1514:	0000922d 	.word	0x0000922d

00001518 <verify_flash>:
 * calculates crc for firmware to ensure flash wrote correctly
 * @param  known_checksum checksum calculated during download
 * @return                true if checksums match
 */
bool verify_flash(crc32_t known_checksum)
{
    1518:	b5b0      	push	{r4, r5, r7, lr}
    151a:	b086      	sub	sp, #24
    151c:	af00      	add	r7, sp, #0
    151e:	6078      	str	r0, [r7, #4]
	//TODO: write this
	crc32_t flash_checksum = 0;
    1520:	2300      	movs	r3, #0
    1522:	60bb      	str	r3, [r7, #8]

	printf("starting seed: %04x\r\n", flash_checksum);
    1524:	68ba      	ldr	r2, [r7, #8]
    1526:	4b3e      	ldr	r3, [pc, #248]	; (1620 <verify_flash+0x108>)
    1528:	0011      	movs	r1, r2
    152a:	0018      	movs	r0, r3
    152c:	4b3d      	ldr	r3, [pc, #244]	; (1624 <verify_flash+0x10c>)
    152e:	4798      	blx	r3
	enum status_code read_status;
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
    1530:	2300      	movs	r3, #0
    1532:	617b      	str	r3, [r7, #20]
    1534:	e039      	b.n	15aa <verify_flash+0x92>
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
    1536:	697b      	ldr	r3, [r7, #20]
    1538:	3320      	adds	r3, #32
    153a:	021b      	lsls	r3, r3, #8
    153c:	0019      	movs	r1, r3
    153e:	2313      	movs	r3, #19
    1540:	18fc      	adds	r4, r7, r3
    1542:	2380      	movs	r3, #128	; 0x80
    1544:	005b      	lsls	r3, r3, #1
    1546:	4a38      	ldr	r2, [pc, #224]	; (1628 <verify_flash+0x110>)
    1548:	4838      	ldr	r0, [pc, #224]	; (162c <verify_flash+0x114>)
    154a:	4d39      	ldr	r5, [pc, #228]	; (1630 <verify_flash+0x118>)
    154c:	47a8      	blx	r5
    154e:	0003      	movs	r3, r0
    1550:	7023      	strb	r3, [r4, #0]
		if (STATUS_OK != read_status) {
    1552:	2313      	movs	r3, #19
    1554:	18fb      	adds	r3, r7, r3
    1556:	781b      	ldrb	r3, [r3, #0]
    1558:	2b00      	cmp	r3, #0
    155a:	d009      	beq.n	1570 <verify_flash+0x58>
			printf("verify_flash: error trying to read external flash. %d", read_status);
    155c:	2313      	movs	r3, #19
    155e:	18fb      	adds	r3, r7, r3
    1560:	781a      	ldrb	r2, [r3, #0]
    1562:	4b34      	ldr	r3, [pc, #208]	; (1634 <verify_flash+0x11c>)
    1564:	0011      	movs	r1, r2
    1566:	0018      	movs	r0, r3
    1568:	4b2e      	ldr	r3, [pc, #184]	; (1624 <verify_flash+0x10c>)
    156a:	4798      	blx	r3
			return false;
    156c:	2300      	movs	r3, #0
    156e:	e052      	b.n	1616 <verify_flash+0xfe>
		}
		//printf("verify_flash [flash_dump]: %d. %s\r\n", i, write_row_buffer);
		if (!flash_checksum)
    1570:	68bb      	ldr	r3, [r7, #8]
    1572:	2b00      	cmp	r3, #0
    1574:	d108      	bne.n	1588 <verify_flash+0x70>
			crc32_calculate(write_row_buffer, FLASH_ROW_SIZE, &flash_checksum);
    1576:	2308      	movs	r3, #8
    1578:	18fa      	adds	r2, r7, r3
    157a:	2380      	movs	r3, #128	; 0x80
    157c:	0059      	lsls	r1, r3, #1
    157e:	4b2a      	ldr	r3, [pc, #168]	; (1628 <verify_flash+0x110>)
    1580:	0018      	movs	r0, r3
    1582:	4b2d      	ldr	r3, [pc, #180]	; (1638 <verify_flash+0x120>)
    1584:	4798      	blx	r3
    1586:	e007      	b.n	1598 <verify_flash+0x80>
		else
			crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &flash_checksum);
    1588:	2308      	movs	r3, #8
    158a:	18fa      	adds	r2, r7, r3
    158c:	2380      	movs	r3, #128	; 0x80
    158e:	0059      	lsls	r1, r3, #1
    1590:	4b25      	ldr	r3, [pc, #148]	; (1628 <verify_flash+0x110>)
    1592:	0018      	movs	r0, r3
    1594:	4b29      	ldr	r3, [pc, #164]	; (163c <verify_flash+0x124>)
    1596:	4798      	blx	r3
		printf("%d. verify_flash: crc_val: %d\r\n", i, flash_checksum);
    1598:	68ba      	ldr	r2, [r7, #8]
    159a:	6979      	ldr	r1, [r7, #20]
    159c:	4b28      	ldr	r3, [pc, #160]	; (1640 <verify_flash+0x128>)
    159e:	0018      	movs	r0, r3
    15a0:	4b20      	ldr	r3, [pc, #128]	; (1624 <verify_flash+0x10c>)
    15a2:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
    15a4:	697b      	ldr	r3, [r7, #20]
    15a6:	3301      	adds	r3, #1
    15a8:	617b      	str	r3, [r7, #20]
    15aa:	4b26      	ldr	r3, [pc, #152]	; (1644 <verify_flash+0x12c>)
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	0a1a      	lsrs	r2, r3, #8
    15b0:	697b      	ldr	r3, [r7, #20]
    15b2:	429a      	cmp	r2, r3
    15b4:	d8bf      	bhi.n	1536 <verify_flash+0x1e>
	}
	int remaining_bytes = total_bytes_written % FLASH_ROW_SIZE;
    15b6:	4b23      	ldr	r3, [pc, #140]	; (1644 <verify_flash+0x12c>)
    15b8:	681b      	ldr	r3, [r3, #0]
    15ba:	001a      	movs	r2, r3
    15bc:	23ff      	movs	r3, #255	; 0xff
    15be:	4013      	ands	r3, r2
    15c0:	60fb      	str	r3, [r7, #12]
	printf("verify_flash: remaining bytes %d\r\n", remaining_bytes);
    15c2:	68fa      	ldr	r2, [r7, #12]
    15c4:	4b20      	ldr	r3, [pc, #128]	; (1648 <verify_flash+0x130>)
    15c6:	0011      	movs	r1, r2
    15c8:	0018      	movs	r0, r3
    15ca:	4b16      	ldr	r3, [pc, #88]	; (1624 <verify_flash+0x10c>)
    15cc:	4798      	blx	r3
	read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (total_bytes_written - remaining_bytes), write_row_buffer, remaining_bytes);
    15ce:	4b1d      	ldr	r3, [pc, #116]	; (1644 <verify_flash+0x12c>)
    15d0:	681a      	ldr	r2, [r3, #0]
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	1ad3      	subs	r3, r2, r3
    15d6:	2280      	movs	r2, #128	; 0x80
    15d8:	0192      	lsls	r2, r2, #6
    15da:	1899      	adds	r1, r3, r2
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	b29b      	uxth	r3, r3
    15e0:	2213      	movs	r2, #19
    15e2:	18bc      	adds	r4, r7, r2
    15e4:	4a10      	ldr	r2, [pc, #64]	; (1628 <verify_flash+0x110>)
    15e6:	4811      	ldr	r0, [pc, #68]	; (162c <verify_flash+0x114>)
    15e8:	4d11      	ldr	r5, [pc, #68]	; (1630 <verify_flash+0x118>)
    15ea:	47a8      	blx	r5
    15ec:	0003      	movs	r3, r0
    15ee:	7023      	strb	r3, [r4, #0]
	crc32_recalculate(write_row_buffer, remaining_bytes, &flash_checksum);
    15f0:	68f9      	ldr	r1, [r7, #12]
    15f2:	2308      	movs	r3, #8
    15f4:	18fa      	adds	r2, r7, r3
    15f6:	4b0c      	ldr	r3, [pc, #48]	; (1628 <verify_flash+0x110>)
    15f8:	0018      	movs	r0, r3
    15fa:	4b10      	ldr	r3, [pc, #64]	; (163c <verify_flash+0x124>)
    15fc:	4798      	blx	r3
	printf("verify_flash: calculated crc32 val: %d\r\n", flash_checksum);
    15fe:	68ba      	ldr	r2, [r7, #8]
    1600:	4b12      	ldr	r3, [pc, #72]	; (164c <verify_flash+0x134>)
    1602:	0011      	movs	r1, r2
    1604:	0018      	movs	r0, r3
    1606:	4b07      	ldr	r3, [pc, #28]	; (1624 <verify_flash+0x10c>)
    1608:	4798      	blx	r3
	return flash_checksum == known_checksum;
    160a:	68ba      	ldr	r2, [r7, #8]
    160c:	687b      	ldr	r3, [r7, #4]
    160e:	1ad3      	subs	r3, r2, r3
    1610:	425a      	negs	r2, r3
    1612:	4153      	adcs	r3, r2
    1614:	b2db      	uxtb	r3, r3
}
    1616:	0018      	movs	r0, r3
    1618:	46bd      	mov	sp, r7
    161a:	b006      	add	sp, #24
    161c:	bdb0      	pop	{r4, r5, r7, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	00017df8 	.word	0x00017df8
    1624:	00012f71 	.word	0x00012f71
    1628:	200004b0 	.word	0x200004b0
    162c:	2000031c 	.word	0x2000031c
    1630:	00002b39 	.word	0x00002b39
    1634:	00017e10 	.word	0x00017e10
    1638:	00000f55 	.word	0x00000f55
    163c:	000089f5 	.word	0x000089f5
    1640:	00017e48 	.word	0x00017e48
    1644:	20000318 	.word	0x20000318
    1648:	00017e68 	.word	0x00017e68
    164c:	00017e8c 	.word	0x00017e8c

00001650 <erase_firmware_in_flash>:
/**
 * erase given firmware in flash Memory
 * @param firmware_starter_address starting address of firmware
 */
static void erase_firmware_in_flash(uint32_t firmware_starter_address)
{
    1650:	b590      	push	{r4, r7, lr}
    1652:	b085      	sub	sp, #20
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]
	if (firmware_starter_address == FW1_ADDR)
    1658:	687a      	ldr	r2, [r7, #4]
    165a:	2380      	movs	r3, #128	; 0x80
    165c:	019b      	lsls	r3, r3, #6
    165e:	429a      	cmp	r2, r3
    1660:	d102      	bne.n	1668 <erase_firmware_in_flash+0x18>
		firmware_starter_address = FW1_ERASE_ADDR;
    1662:	2300      	movs	r3, #0
    1664:	607b      	str	r3, [r7, #4]
    1666:	e007      	b.n	1678 <erase_firmware_in_flash+0x28>
	else if (firmware_starter_address == FW2_ADDR)
    1668:	687a      	ldr	r2, [r7, #4]
    166a:	2382      	movs	r3, #130	; 0x82
    166c:	02db      	lsls	r3, r3, #11
    166e:	429a      	cmp	r2, r3
    1670:	d000      	beq.n	1674 <erase_firmware_in_flash+0x24>
    1672:	e16b      	b.n	194c <erase_firmware_in_flash+0x2fc>
		firmware_starter_address = FW2_ERASE_ADDR;
    1674:	4bb7      	ldr	r3, [pc, #732]	; (1954 <erase_firmware_in_flash+0x304>)
    1676:	607b      	str	r3, [r7, #4]
	else
		//TODO: Throw error
		return;
	printf("FW1_ERASE_ADDR: %d\r\n", firmware_starter_address);
    1678:	687a      	ldr	r2, [r7, #4]
    167a:	4bb7      	ldr	r3, [pc, #732]	; (1958 <erase_firmware_in_flash+0x308>)
    167c:	0011      	movs	r1, r2
    167e:	0018      	movs	r0, r3
    1680:	4bb6      	ldr	r3, [pc, #728]	; (195c <erase_firmware_in_flash+0x30c>)
    1682:	4798      	blx	r3
	//Clear flash for max firmware size here
	at25dfx_chip_wake(&at25dfx_chip);
    1684:	4bb6      	ldr	r3, [pc, #728]	; (1960 <erase_firmware_in_flash+0x310>)
    1686:	0018      	movs	r0, r3
    1688:	4bb6      	ldr	r3, [pc, #728]	; (1964 <erase_firmware_in_flash+0x314>)
    168a:	4798      	blx	r3

	//check if chip is there
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    168c:	4bb4      	ldr	r3, [pc, #720]	; (1960 <erase_firmware_in_flash+0x310>)
    168e:	0018      	movs	r0, r3
    1690:	4bb5      	ldr	r3, [pc, #724]	; (1968 <erase_firmware_in_flash+0x318>)
    1692:	4798      	blx	r3
    1694:	1e03      	subs	r3, r0, #0
    1696:	d004      	beq.n	16a2 <erase_firmware_in_flash+0x52>
		printf("store_file_packet: No flash chip.\r\n");
    1698:	4bb4      	ldr	r3, [pc, #720]	; (196c <erase_firmware_in_flash+0x31c>)
    169a:	0018      	movs	r0, r3
    169c:	4bb4      	ldr	r3, [pc, #720]	; (1970 <erase_firmware_in_flash+0x320>)
    169e:	4798      	blx	r3
		return;
    16a0:	e155      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	//max fw size is ~252k = 3x 64kb sectors 1x 32kb sector 7x4kb sectors
	//disable protection
	enum status_code status_val;
	//for (int i = 0; i < FW_MAX_SIZE / SIXTY_FOUR_KB; i++) {
	status_val = at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
    16a2:	230f      	movs	r3, #15
    16a4:	18fc      	adds	r4, r7, r3
    16a6:	4bae      	ldr	r3, [pc, #696]	; (1960 <erase_firmware_in_flash+0x310>)
    16a8:	2100      	movs	r1, #0
    16aa:	0018      	movs	r0, r3
    16ac:	4bb1      	ldr	r3, [pc, #708]	; (1974 <erase_firmware_in_flash+0x324>)
    16ae:	4798      	blx	r3
    16b0:	0003      	movs	r3, r0
    16b2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    16b4:	230f      	movs	r3, #15
    16b6:	18fb      	adds	r3, r7, r3
    16b8:	781b      	ldrb	r3, [r3, #0]
    16ba:	2b00      	cmp	r3, #0
    16bc:	d009      	beq.n	16d2 <erase_firmware_in_flash+0x82>
		add_state(CANCELED);
    16be:	2020      	movs	r0, #32
    16c0:	4bad      	ldr	r3, [pc, #692]	; (1978 <erase_firmware_in_flash+0x328>)
    16c2:	4798      	blx	r3
		printf("store_file_packet: error clearing sector protect at address %d \r\n", SIXTY_FOUR_KB);
    16c4:	4aad      	ldr	r2, [pc, #692]	; (197c <erase_firmware_in_flash+0x32c>)
    16c6:	4bae      	ldr	r3, [pc, #696]	; (1980 <erase_firmware_in_flash+0x330>)
    16c8:	0011      	movs	r1, r2
    16ca:	0018      	movs	r0, r3
    16cc:	4ba3      	ldr	r3, [pc, #652]	; (195c <erase_firmware_in_flash+0x30c>)
    16ce:	4798      	blx	r3
		return;
    16d0:	e13d      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	//}
	//erase block (sets to FF's)
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address, AT25DFX_BLOCK_SIZE_64KB);
    16d2:	230f      	movs	r3, #15
    16d4:	18fc      	adds	r4, r7, r3
    16d6:	6879      	ldr	r1, [r7, #4]
    16d8:	4ba1      	ldr	r3, [pc, #644]	; (1960 <erase_firmware_in_flash+0x310>)
    16da:	2202      	movs	r2, #2
    16dc:	0018      	movs	r0, r3
    16de:	4ba9      	ldr	r3, [pc, #676]	; (1984 <erase_firmware_in_flash+0x334>)
    16e0:	4798      	blx	r3
    16e2:	0003      	movs	r3, r0
    16e4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    16e6:	230f      	movs	r3, #15
    16e8:	18fb      	adds	r3, r7, r3
    16ea:	781b      	ldrb	r3, [r3, #0]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d009      	beq.n	1704 <erase_firmware_in_flash+0xb4>
		add_state(CANCELED);
    16f0:	2020      	movs	r0, #32
    16f2:	4ba1      	ldr	r3, [pc, #644]	; (1978 <erase_firmware_in_flash+0x328>)
    16f4:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address);
    16f6:	687a      	ldr	r2, [r7, #4]
    16f8:	4ba3      	ldr	r3, [pc, #652]	; (1988 <erase_firmware_in_flash+0x338>)
    16fa:	0011      	movs	r1, r2
    16fc:	0018      	movs	r0, r3
    16fe:	4b97      	ldr	r3, [pc, #604]	; (195c <erase_firmware_in_flash+0x30c>)
    1700:	4798      	blx	r3
		return;
    1702:	e124      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 1), AT25DFX_BLOCK_SIZE_64KB);
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	4a9d      	ldr	r2, [pc, #628]	; (197c <erase_firmware_in_flash+0x32c>)
    1708:	1899      	adds	r1, r3, r2
    170a:	230f      	movs	r3, #15
    170c:	18fc      	adds	r4, r7, r3
    170e:	4b94      	ldr	r3, [pc, #592]	; (1960 <erase_firmware_in_flash+0x310>)
    1710:	2202      	movs	r2, #2
    1712:	0018      	movs	r0, r3
    1714:	4b9b      	ldr	r3, [pc, #620]	; (1984 <erase_firmware_in_flash+0x334>)
    1716:	4798      	blx	r3
    1718:	0003      	movs	r3, r0
    171a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    171c:	230f      	movs	r3, #15
    171e:	18fb      	adds	r3, r7, r3
    1720:	781b      	ldrb	r3, [r3, #0]
    1722:	2b00      	cmp	r3, #0
    1724:	d008      	beq.n	1738 <erase_firmware_in_flash+0xe8>
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 1));
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	4a94      	ldr	r2, [pc, #592]	; (197c <erase_firmware_in_flash+0x32c>)
    172a:	189a      	adds	r2, r3, r2
    172c:	4b96      	ldr	r3, [pc, #600]	; (1988 <erase_firmware_in_flash+0x338>)
    172e:	0011      	movs	r1, r2
    1730:	0018      	movs	r0, r3
    1732:	4b8a      	ldr	r3, [pc, #552]	; (195c <erase_firmware_in_flash+0x30c>)
    1734:	4798      	blx	r3
		return;
    1736:	e10a      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2), AT25DFX_BLOCK_SIZE_64KB);
    1738:	687b      	ldr	r3, [r7, #4]
    173a:	4a94      	ldr	r2, [pc, #592]	; (198c <erase_firmware_in_flash+0x33c>)
    173c:	1899      	adds	r1, r3, r2
    173e:	230f      	movs	r3, #15
    1740:	18fc      	adds	r4, r7, r3
    1742:	4b87      	ldr	r3, [pc, #540]	; (1960 <erase_firmware_in_flash+0x310>)
    1744:	2202      	movs	r2, #2
    1746:	0018      	movs	r0, r3
    1748:	4b8e      	ldr	r3, [pc, #568]	; (1984 <erase_firmware_in_flash+0x334>)
    174a:	4798      	blx	r3
    174c:	0003      	movs	r3, r0
    174e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1750:	230f      	movs	r3, #15
    1752:	18fb      	adds	r3, r7, r3
    1754:	781b      	ldrb	r3, [r3, #0]
    1756:	2b00      	cmp	r3, #0
    1758:	d00b      	beq.n	1772 <erase_firmware_in_flash+0x122>
		add_state(CANCELED);
    175a:	2020      	movs	r0, #32
    175c:	4b86      	ldr	r3, [pc, #536]	; (1978 <erase_firmware_in_flash+0x328>)
    175e:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2));
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	4a8a      	ldr	r2, [pc, #552]	; (198c <erase_firmware_in_flash+0x33c>)
    1764:	189a      	adds	r2, r3, r2
    1766:	4b88      	ldr	r3, [pc, #544]	; (1988 <erase_firmware_in_flash+0x338>)
    1768:	0011      	movs	r1, r2
    176a:	0018      	movs	r0, r3
    176c:	4b7b      	ldr	r3, [pc, #492]	; (195c <erase_firmware_in_flash+0x30c>)
    176e:	4798      	blx	r3
		return;
    1770:	e0ed      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0), AT25DFX_BLOCK_SIZE_32KB);
    1772:	687b      	ldr	r3, [r7, #4]
    1774:	4a86      	ldr	r2, [pc, #536]	; (1990 <erase_firmware_in_flash+0x340>)
    1776:	1899      	adds	r1, r3, r2
    1778:	230f      	movs	r3, #15
    177a:	18fc      	adds	r4, r7, r3
    177c:	4b78      	ldr	r3, [pc, #480]	; (1960 <erase_firmware_in_flash+0x310>)
    177e:	2201      	movs	r2, #1
    1780:	0018      	movs	r0, r3
    1782:	4b80      	ldr	r3, [pc, #512]	; (1984 <erase_firmware_in_flash+0x334>)
    1784:	4798      	blx	r3
    1786:	0003      	movs	r3, r0
    1788:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    178a:	230f      	movs	r3, #15
    178c:	18fb      	adds	r3, r7, r3
    178e:	781b      	ldrb	r3, [r3, #0]
    1790:	2b00      	cmp	r3, #0
    1792:	d00b      	beq.n	17ac <erase_firmware_in_flash+0x15c>
		add_state(CANCELED);
    1794:	2020      	movs	r0, #32
    1796:	4b78      	ldr	r3, [pc, #480]	; (1978 <erase_firmware_in_flash+0x328>)
    1798:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0));
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	4a7c      	ldr	r2, [pc, #496]	; (1990 <erase_firmware_in_flash+0x340>)
    179e:	189a      	adds	r2, r3, r2
    17a0:	4b79      	ldr	r3, [pc, #484]	; (1988 <erase_firmware_in_flash+0x338>)
    17a2:	0011      	movs	r1, r2
    17a4:	0018      	movs	r0, r3
    17a6:	4b6d      	ldr	r3, [pc, #436]	; (195c <erase_firmware_in_flash+0x30c>)
    17a8:	4798      	blx	r3
		return;
    17aa:	e0d0      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0), AT25DFX_BLOCK_SIZE_4KB);
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	4a79      	ldr	r2, [pc, #484]	; (1994 <erase_firmware_in_flash+0x344>)
    17b0:	1899      	adds	r1, r3, r2
    17b2:	230f      	movs	r3, #15
    17b4:	18fc      	adds	r4, r7, r3
    17b6:	4b6a      	ldr	r3, [pc, #424]	; (1960 <erase_firmware_in_flash+0x310>)
    17b8:	2200      	movs	r2, #0
    17ba:	0018      	movs	r0, r3
    17bc:	4b71      	ldr	r3, [pc, #452]	; (1984 <erase_firmware_in_flash+0x334>)
    17be:	4798      	blx	r3
    17c0:	0003      	movs	r3, r0
    17c2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    17c4:	230f      	movs	r3, #15
    17c6:	18fb      	adds	r3, r7, r3
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	2b00      	cmp	r3, #0
    17cc:	d00b      	beq.n	17e6 <erase_firmware_in_flash+0x196>
		add_state(CANCELED);
    17ce:	2020      	movs	r0, #32
    17d0:	4b69      	ldr	r3, [pc, #420]	; (1978 <erase_firmware_in_flash+0x328>)
    17d2:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0));
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	4a6f      	ldr	r2, [pc, #444]	; (1994 <erase_firmware_in_flash+0x344>)
    17d8:	189a      	adds	r2, r3, r2
    17da:	4b6b      	ldr	r3, [pc, #428]	; (1988 <erase_firmware_in_flash+0x338>)
    17dc:	0011      	movs	r1, r2
    17de:	0018      	movs	r0, r3
    17e0:	4b5e      	ldr	r3, [pc, #376]	; (195c <erase_firmware_in_flash+0x30c>)
    17e2:	4798      	blx	r3
		return;
    17e4:	e0b3      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1), AT25DFX_BLOCK_SIZE_4KB);
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	4a6b      	ldr	r2, [pc, #428]	; (1998 <erase_firmware_in_flash+0x348>)
    17ea:	1899      	adds	r1, r3, r2
    17ec:	230f      	movs	r3, #15
    17ee:	18fc      	adds	r4, r7, r3
    17f0:	4b5b      	ldr	r3, [pc, #364]	; (1960 <erase_firmware_in_flash+0x310>)
    17f2:	2200      	movs	r2, #0
    17f4:	0018      	movs	r0, r3
    17f6:	4b63      	ldr	r3, [pc, #396]	; (1984 <erase_firmware_in_flash+0x334>)
    17f8:	4798      	blx	r3
    17fa:	0003      	movs	r3, r0
    17fc:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    17fe:	230f      	movs	r3, #15
    1800:	18fb      	adds	r3, r7, r3
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	2b00      	cmp	r3, #0
    1806:	d00b      	beq.n	1820 <erase_firmware_in_flash+0x1d0>
		add_state(CANCELED);
    1808:	2020      	movs	r0, #32
    180a:	4b5b      	ldr	r3, [pc, #364]	; (1978 <erase_firmware_in_flash+0x328>)
    180c:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1));
    180e:	687b      	ldr	r3, [r7, #4]
    1810:	4a61      	ldr	r2, [pc, #388]	; (1998 <erase_firmware_in_flash+0x348>)
    1812:	189a      	adds	r2, r3, r2
    1814:	4b5c      	ldr	r3, [pc, #368]	; (1988 <erase_firmware_in_flash+0x338>)
    1816:	0011      	movs	r1, r2
    1818:	0018      	movs	r0, r3
    181a:	4b50      	ldr	r3, [pc, #320]	; (195c <erase_firmware_in_flash+0x30c>)
    181c:	4798      	blx	r3
		return;
    181e:	e096      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2), AT25DFX_BLOCK_SIZE_4KB);
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	4a5e      	ldr	r2, [pc, #376]	; (199c <erase_firmware_in_flash+0x34c>)
    1824:	1899      	adds	r1, r3, r2
    1826:	230f      	movs	r3, #15
    1828:	18fc      	adds	r4, r7, r3
    182a:	4b4d      	ldr	r3, [pc, #308]	; (1960 <erase_firmware_in_flash+0x310>)
    182c:	2200      	movs	r2, #0
    182e:	0018      	movs	r0, r3
    1830:	4b54      	ldr	r3, [pc, #336]	; (1984 <erase_firmware_in_flash+0x334>)
    1832:	4798      	blx	r3
    1834:	0003      	movs	r3, r0
    1836:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1838:	230f      	movs	r3, #15
    183a:	18fb      	adds	r3, r7, r3
    183c:	781b      	ldrb	r3, [r3, #0]
    183e:	2b00      	cmp	r3, #0
    1840:	d00b      	beq.n	185a <erase_firmware_in_flash+0x20a>
		add_state(CANCELED);
    1842:	2020      	movs	r0, #32
    1844:	4b4c      	ldr	r3, [pc, #304]	; (1978 <erase_firmware_in_flash+0x328>)
    1846:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2));
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	4a54      	ldr	r2, [pc, #336]	; (199c <erase_firmware_in_flash+0x34c>)
    184c:	189a      	adds	r2, r3, r2
    184e:	4b4e      	ldr	r3, [pc, #312]	; (1988 <erase_firmware_in_flash+0x338>)
    1850:	0011      	movs	r1, r2
    1852:	0018      	movs	r0, r3
    1854:	4b41      	ldr	r3, [pc, #260]	; (195c <erase_firmware_in_flash+0x30c>)
    1856:	4798      	blx	r3
		return;
    1858:	e079      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3), AT25DFX_BLOCK_SIZE_4KB);
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	4a50      	ldr	r2, [pc, #320]	; (19a0 <erase_firmware_in_flash+0x350>)
    185e:	1899      	adds	r1, r3, r2
    1860:	230f      	movs	r3, #15
    1862:	18fc      	adds	r4, r7, r3
    1864:	4b3e      	ldr	r3, [pc, #248]	; (1960 <erase_firmware_in_flash+0x310>)
    1866:	2200      	movs	r2, #0
    1868:	0018      	movs	r0, r3
    186a:	4b46      	ldr	r3, [pc, #280]	; (1984 <erase_firmware_in_flash+0x334>)
    186c:	4798      	blx	r3
    186e:	0003      	movs	r3, r0
    1870:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1872:	230f      	movs	r3, #15
    1874:	18fb      	adds	r3, r7, r3
    1876:	781b      	ldrb	r3, [r3, #0]
    1878:	2b00      	cmp	r3, #0
    187a:	d00b      	beq.n	1894 <erase_firmware_in_flash+0x244>
		add_state(CANCELED);
    187c:	2020      	movs	r0, #32
    187e:	4b3e      	ldr	r3, [pc, #248]	; (1978 <erase_firmware_in_flash+0x328>)
    1880:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	4a46      	ldr	r2, [pc, #280]	; (19a0 <erase_firmware_in_flash+0x350>)
    1886:	189a      	adds	r2, r3, r2
    1888:	4b3f      	ldr	r3, [pc, #252]	; (1988 <erase_firmware_in_flash+0x338>)
    188a:	0011      	movs	r1, r2
    188c:	0018      	movs	r0, r3
    188e:	4b33      	ldr	r3, [pc, #204]	; (195c <erase_firmware_in_flash+0x30c>)
    1890:	4798      	blx	r3
		return;
    1892:	e05c      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4), AT25DFX_BLOCK_SIZE_4KB);
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	4a43      	ldr	r2, [pc, #268]	; (19a4 <erase_firmware_in_flash+0x354>)
    1898:	1899      	adds	r1, r3, r2
    189a:	230f      	movs	r3, #15
    189c:	18fc      	adds	r4, r7, r3
    189e:	4b30      	ldr	r3, [pc, #192]	; (1960 <erase_firmware_in_flash+0x310>)
    18a0:	2200      	movs	r2, #0
    18a2:	0018      	movs	r0, r3
    18a4:	4b37      	ldr	r3, [pc, #220]	; (1984 <erase_firmware_in_flash+0x334>)
    18a6:	4798      	blx	r3
    18a8:	0003      	movs	r3, r0
    18aa:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    18ac:	230f      	movs	r3, #15
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	781b      	ldrb	r3, [r3, #0]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d00b      	beq.n	18ce <erase_firmware_in_flash+0x27e>
		add_state(CANCELED);
    18b6:	2020      	movs	r0, #32
    18b8:	4b2f      	ldr	r3, [pc, #188]	; (1978 <erase_firmware_in_flash+0x328>)
    18ba:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4));
    18bc:	687b      	ldr	r3, [r7, #4]
    18be:	4a39      	ldr	r2, [pc, #228]	; (19a4 <erase_firmware_in_flash+0x354>)
    18c0:	189a      	adds	r2, r3, r2
    18c2:	4b31      	ldr	r3, [pc, #196]	; (1988 <erase_firmware_in_flash+0x338>)
    18c4:	0011      	movs	r1, r2
    18c6:	0018      	movs	r0, r3
    18c8:	4b24      	ldr	r3, [pc, #144]	; (195c <erase_firmware_in_flash+0x30c>)
    18ca:	4798      	blx	r3
		return;
    18cc:	e03f      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5), AT25DFX_BLOCK_SIZE_4KB);
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	4a35      	ldr	r2, [pc, #212]	; (19a8 <erase_firmware_in_flash+0x358>)
    18d2:	1899      	adds	r1, r3, r2
    18d4:	230f      	movs	r3, #15
    18d6:	18fc      	adds	r4, r7, r3
    18d8:	4b21      	ldr	r3, [pc, #132]	; (1960 <erase_firmware_in_flash+0x310>)
    18da:	2200      	movs	r2, #0
    18dc:	0018      	movs	r0, r3
    18de:	4b29      	ldr	r3, [pc, #164]	; (1984 <erase_firmware_in_flash+0x334>)
    18e0:	4798      	blx	r3
    18e2:	0003      	movs	r3, r0
    18e4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    18e6:	230f      	movs	r3, #15
    18e8:	18fb      	adds	r3, r7, r3
    18ea:	781b      	ldrb	r3, [r3, #0]
    18ec:	2b00      	cmp	r3, #0
    18ee:	d00b      	beq.n	1908 <erase_firmware_in_flash+0x2b8>
		add_state(CANCELED);
    18f0:	2020      	movs	r0, #32
    18f2:	4b21      	ldr	r3, [pc, #132]	; (1978 <erase_firmware_in_flash+0x328>)
    18f4:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5));
    18f6:	687b      	ldr	r3, [r7, #4]
    18f8:	4a2b      	ldr	r2, [pc, #172]	; (19a8 <erase_firmware_in_flash+0x358>)
    18fa:	189a      	adds	r2, r3, r2
    18fc:	4b22      	ldr	r3, [pc, #136]	; (1988 <erase_firmware_in_flash+0x338>)
    18fe:	0011      	movs	r1, r2
    1900:	0018      	movs	r0, r3
    1902:	4b16      	ldr	r3, [pc, #88]	; (195c <erase_firmware_in_flash+0x30c>)
    1904:	4798      	blx	r3
		return;
    1906:	e022      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 6), AT25DFX_BLOCK_SIZE_4KB);
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	4a28      	ldr	r2, [pc, #160]	; (19ac <erase_firmware_in_flash+0x35c>)
    190c:	1899      	adds	r1, r3, r2
    190e:	230f      	movs	r3, #15
    1910:	18fc      	adds	r4, r7, r3
    1912:	4b13      	ldr	r3, [pc, #76]	; (1960 <erase_firmware_in_flash+0x310>)
    1914:	2200      	movs	r2, #0
    1916:	0018      	movs	r0, r3
    1918:	4b1a      	ldr	r3, [pc, #104]	; (1984 <erase_firmware_in_flash+0x334>)
    191a:	4798      	blx	r3
    191c:	0003      	movs	r3, r0
    191e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1920:	230f      	movs	r3, #15
    1922:	18fb      	adds	r3, r7, r3
    1924:	781b      	ldrb	r3, [r3, #0]
    1926:	2b00      	cmp	r3, #0
    1928:	d00b      	beq.n	1942 <erase_firmware_in_flash+0x2f2>
		add_state(CANCELED);
    192a:	2020      	movs	r0, #32
    192c:	4b12      	ldr	r3, [pc, #72]	; (1978 <erase_firmware_in_flash+0x328>)
    192e:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	4a1b      	ldr	r2, [pc, #108]	; (19a0 <erase_firmware_in_flash+0x350>)
    1934:	189a      	adds	r2, r3, r2
    1936:	4b14      	ldr	r3, [pc, #80]	; (1988 <erase_firmware_in_flash+0x338>)
    1938:	0011      	movs	r1, r2
    193a:	0018      	movs	r0, r3
    193c:	4b07      	ldr	r3, [pc, #28]	; (195c <erase_firmware_in_flash+0x30c>)
    193e:	4798      	blx	r3
		return;
    1940:	e005      	b.n	194e <erase_firmware_in_flash+0x2fe>
	}
	at25dfx_chip_sleep(&at25dfx_chip);
    1942:	4b07      	ldr	r3, [pc, #28]	; (1960 <erase_firmware_in_flash+0x310>)
    1944:	0018      	movs	r0, r3
    1946:	4b1a      	ldr	r3, [pc, #104]	; (19b0 <erase_firmware_in_flash+0x360>)
    1948:	4798      	blx	r3
    194a:	e000      	b.n	194e <erase_firmware_in_flash+0x2fe>
		return;
    194c:	46c0      	nop			; (mov r8, r8)
}
    194e:	46bd      	mov	sp, r7
    1950:	b005      	add	sp, #20
    1952:	bd90      	pop	{r4, r7, pc}
    1954:	0003fffc 	.word	0x0003fffc
    1958:	00017eb8 	.word	0x00017eb8
    195c:	00012f71 	.word	0x00012f71
    1960:	2000031c 	.word	0x2000031c
    1964:	00002fd5 	.word	0x00002fd5
    1968:	00002a8d 	.word	0x00002a8d
    196c:	00017ed0 	.word	0x00017ed0
    1970:	0001308d 	.word	0x0001308d
    1974:	00002e95 	.word	0x00002e95
    1978:	00000fb5 	.word	0x00000fb5
    197c:	0000ffff 	.word	0x0000ffff
    1980:	00017ef4 	.word	0x00017ef4
    1984:	00002d99 	.word	0x00002d99
    1988:	00017f38 	.word	0x00017f38
    198c:	0001fffe 	.word	0x0001fffe
    1990:	0002fffd 	.word	0x0002fffd
    1994:	00027ffd 	.word	0x00027ffd
    1998:	00028ffc 	.word	0x00028ffc
    199c:	00029ffb 	.word	0x00029ffb
    19a0:	0002affa 	.word	0x0002affa
    19a4:	0002bff9 	.word	0x0002bff9
    19a8:	0002cff8 	.word	0x0002cff8
    19ac:	0002dff7 	.word	0x0002dff7
    19b0:	00002f49 	.word	0x00002f49

000019b4 <check_set_firmware_metadata>:

//TODO: write documentation on this
static void check_set_firmware_metadata(fw_header_t firmware_header)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	b084      	sub	sp, #16
    19b8:	af00      	add	r7, sp, #0
    19ba:	1d3b      	adds	r3, r7, #4
    19bc:	6018      	str	r0, [r3, #0]
    19be:	6059      	str	r1, [r3, #4]
    19c0:	609a      	str	r2, [r3, #8]
	printf("new firmware version: %d\r\n", firmware_header.fw_version);
    19c2:	1d3b      	adds	r3, r7, #4
    19c4:	881b      	ldrh	r3, [r3, #0]
    19c6:	001a      	movs	r2, r3
    19c8:	4b15      	ldr	r3, [pc, #84]	; (1a20 <check_set_firmware_metadata+0x6c>)
    19ca:	0011      	movs	r1, r2
    19cc:	0018      	movs	r0, r3
    19ce:	4b15      	ldr	r3, [pc, #84]	; (1a24 <check_set_firmware_metadata+0x70>)
    19d0:	4798      	blx	r3
	printf("new firmware checksum: %04x\r\n", firmware_header.checksum);
    19d2:	1d3b      	adds	r3, r7, #4
    19d4:	685a      	ldr	r2, [r3, #4]
    19d6:	4b14      	ldr	r3, [pc, #80]	; (1a28 <check_set_firmware_metadata+0x74>)
    19d8:	0011      	movs	r1, r2
    19da:	0018      	movs	r0, r3
    19dc:	4b11      	ldr	r3, [pc, #68]	; (1a24 <check_set_firmware_metadata+0x70>)
    19de:	4798      	blx	r3
	if (firmware_header.fw_version > FW_VERSION) {
    19e0:	1d3b      	adds	r3, r7, #4
    19e2:	881b      	ldrh	r3, [r3, #0]
    19e4:	2b00      	cmp	r3, #0
    19e6:	d011      	beq.n	1a0c <check_set_firmware_metadata+0x58>
		clear_state(GET_REQUESTED);
    19e8:	2004      	movs	r0, #4
    19ea:	4b10      	ldr	r3, [pc, #64]	; (1a2c <check_set_firmware_metadata+0x78>)
    19ec:	4798      	blx	r3
		clear_state(NOT_CHECKED);
    19ee:	2040      	movs	r0, #64	; 0x40
    19f0:	4b0e      	ldr	r3, [pc, #56]	; (1a2c <check_set_firmware_metadata+0x78>)
    19f2:	4798      	blx	r3
		add_state(UPDATE_AVAILABLE);
    19f4:	2080      	movs	r0, #128	; 0x80
    19f6:	4b0e      	ldr	r3, [pc, #56]	; (1a30 <check_set_firmware_metadata+0x7c>)
    19f8:	4798      	blx	r3
		new_firmware_checksum = firmware_header.checksum;
    19fa:	1d3b      	adds	r3, r7, #4
    19fc:	685a      	ldr	r2, [r3, #4]
    19fe:	4b0d      	ldr	r3, [pc, #52]	; (1a34 <check_set_firmware_metadata+0x80>)
    1a00:	601a      	str	r2, [r3, #0]
		new_firmware_version = firmware_header.fw_version;
    1a02:	1d3b      	adds	r3, r7, #4
    1a04:	881a      	ldrh	r2, [r3, #0]
    1a06:	4b0c      	ldr	r3, [pc, #48]	; (1a38 <check_set_firmware_metadata+0x84>)
    1a08:	801a      	strh	r2, [r3, #0]
		return;
    1a0a:	e006      	b.n	1a1a <check_set_firmware_metadata+0x66>
	} else {
		clear_state(NOT_CHECKED & GET_REQUESTED);
    1a0c:	2000      	movs	r0, #0
    1a0e:	4b07      	ldr	r3, [pc, #28]	; (1a2c <check_set_firmware_metadata+0x78>)
    1a10:	4798      	blx	r3
		add_state(UPDATE_NOT_AVAILABLE & COMPLETED);
    1a12:	2000      	movs	r0, #0
    1a14:	4b06      	ldr	r3, [pc, #24]	; (1a30 <check_set_firmware_metadata+0x7c>)
    1a16:	4798      	blx	r3
		return;
    1a18:	46c0      	nop			; (mov r8, r8)
	}
}
    1a1a:	46bd      	mov	sp, r7
    1a1c:	b004      	add	sp, #16
    1a1e:	bd80      	pop	{r7, pc}
    1a20:	00017f74 	.word	0x00017f74
    1a24:	00012f71 	.word	0x00012f71
    1a28:	00017f90 	.word	0x00017f90
    1a2c:	00000f81 	.word	0x00000f81
    1a30:	00000fb5 	.word	0x00000fb5
    1a34:	20000218 	.word	0x20000218
    1a38:	20000214 	.word	0x20000214

00001a3c <store_file_packet>:
 * puts the given packet in flash memory
 * @param data   data to put in flash memory
 * @param length size in bytes of data
 */
static void store_file_packet(char *data, uint32_t length)
{
    1a3c:	b5b0      	push	{r4, r5, r7, lr}
    1a3e:	b08a      	sub	sp, #40	; 0x28
    1a40:	af00      	add	r7, sp, #0
    1a42:	6078      	str	r0, [r7, #4]
    1a44:	6039      	str	r1, [r7, #0]
	if ((data == NULL) || (length < 1)) {
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d002      	beq.n	1a52 <store_file_packet+0x16>
    1a4c:	683b      	ldr	r3, [r7, #0]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d104      	bne.n	1a5c <store_file_packet+0x20>
		printf("store_file_packet: empty data.\r\n");
    1a52:	4bb2      	ldr	r3, [pc, #712]	; (1d1c <store_file_packet+0x2e0>)
    1a54:	0018      	movs	r0, r3
    1a56:	4bb2      	ldr	r3, [pc, #712]	; (1d20 <store_file_packet+0x2e4>)
    1a58:	4798      	blx	r3
		return;
    1a5a:	e15c      	b.n	1d16 <store_file_packet+0x2da>
	}
	if (is_state_set(NOT_CHECKED)) {
    1a5c:	2040      	movs	r0, #64	; 0x40
    1a5e:	4bb1      	ldr	r3, [pc, #708]	; (1d24 <store_file_packet+0x2e8>)
    1a60:	4798      	blx	r3
    1a62:	1e03      	subs	r3, r0, #0
    1a64:	d025      	beq.n	1ab2 <store_file_packet+0x76>
		if (6 != length) {
    1a66:	683b      	ldr	r3, [r7, #0]
    1a68:	2b06      	cmp	r3, #6
    1a6a:	d006      	beq.n	1a7a <store_file_packet+0x3e>
			printf("store_file_packet [UPDATE_CHECK]: file [%d bytes] does not match header [%d bytes] size\r\n", length, sizeof(fw_header_t));
    1a6c:	6839      	ldr	r1, [r7, #0]
    1a6e:	4bae      	ldr	r3, [pc, #696]	; (1d28 <store_file_packet+0x2ec>)
    1a70:	220c      	movs	r2, #12
    1a72:	0018      	movs	r0, r3
    1a74:	4bad      	ldr	r3, [pc, #692]	; (1d2c <store_file_packet+0x2f0>)
    1a76:	4798      	blx	r3
			return;
    1a78:	e14d      	b.n	1d16 <store_file_packet+0x2da>
		}
		fw_header_t firmware_header;
		memcpy(&firmware_header.fw_version, data, 2);
    1a7a:	6879      	ldr	r1, [r7, #4]
    1a7c:	230c      	movs	r3, #12
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	2202      	movs	r2, #2
    1a82:	0018      	movs	r0, r3
    1a84:	4baa      	ldr	r3, [pc, #680]	; (1d30 <store_file_packet+0x2f4>)
    1a86:	4798      	blx	r3
		memcpy(&firmware_header.checksum, data + 2, 4);
    1a88:	687b      	ldr	r3, [r7, #4]
    1a8a:	1c99      	adds	r1, r3, #2
    1a8c:	230c      	movs	r3, #12
    1a8e:	18fb      	adds	r3, r7, r3
    1a90:	3304      	adds	r3, #4
    1a92:	2204      	movs	r2, #4
    1a94:	0018      	movs	r0, r3
    1a96:	4ba6      	ldr	r3, [pc, #664]	; (1d30 <store_file_packet+0x2f4>)
    1a98:	4798      	blx	r3
		check_set_firmware_metadata(firmware_header);
    1a9a:	230c      	movs	r3, #12
    1a9c:	18fb      	adds	r3, r7, r3
    1a9e:	6818      	ldr	r0, [r3, #0]
    1aa0:	6859      	ldr	r1, [r3, #4]
    1aa2:	689a      	ldr	r2, [r3, #8]
    1aa4:	4ba3      	ldr	r3, [pc, #652]	; (1d34 <store_file_packet+0x2f8>)
    1aa6:	4798      	blx	r3
		add_state(COMPLETED);
    1aa8:	2010      	movs	r0, #16
    1aaa:	4ba3      	ldr	r3, [pc, #652]	; (1d38 <store_file_packet+0x2fc>)
    1aac:	4798      	blx	r3
		return;
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	e131      	b.n	1d16 <store_file_packet+0x2da>
	} else if (is_state_set(UPDATE_AVAILABLE)) {
    1ab2:	2080      	movs	r0, #128	; 0x80
    1ab4:	4b9b      	ldr	r3, [pc, #620]	; (1d24 <store_file_packet+0x2e8>)
    1ab6:	4798      	blx	r3
    1ab8:	1e03      	subs	r3, r0, #0
    1aba:	d100      	bne.n	1abe <store_file_packet+0x82>
    1abc:	e12b      	b.n	1d16 <store_file_packet+0x2da>
		enum status_code status_val;
		//hasn't started downloading yet, first packet. set values
		if (!is_state_set(DOWNLOADING)) {
    1abe:	2008      	movs	r0, #8
    1ac0:	4b98      	ldr	r3, [pc, #608]	; (1d24 <store_file_packet+0x2e8>)
    1ac2:	4798      	blx	r3
    1ac4:	0003      	movs	r3, r0
    1ac6:	001a      	movs	r2, r3
    1ac8:	2301      	movs	r3, #1
    1aca:	4053      	eors	r3, r2
    1acc:	b2db      	uxtb	r3, r3
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d01b      	beq.n	1b0a <store_file_packet+0xce>
			erase_firmware_in_flash(FW1_ADDR);
    1ad2:	2380      	movs	r3, #128	; 0x80
    1ad4:	019b      	lsls	r3, r3, #6
    1ad6:	0018      	movs	r0, r3
    1ad8:	4b98      	ldr	r3, [pc, #608]	; (1d3c <store_file_packet+0x300>)
    1ada:	4798      	blx	r3
			received_file_size = 0;
    1adc:	4b98      	ldr	r3, [pc, #608]	; (1d40 <store_file_packet+0x304>)
    1ade:	2200      	movs	r2, #0
    1ae0:	601a      	str	r2, [r3, #0]
			write_address = FW1_ADDR; //TODO: MAKE GENERIC SO CAN OTA CLI
    1ae2:	4b98      	ldr	r3, [pc, #608]	; (1d44 <store_file_packet+0x308>)
    1ae4:	2280      	movs	r2, #128	; 0x80
    1ae6:	0192      	lsls	r2, r2, #6
    1ae8:	601a      	str	r2, [r3, #0]
			buffer_cursor = 0;
    1aea:	4b97      	ldr	r3, [pc, #604]	; (1d48 <store_file_packet+0x30c>)
    1aec:	2200      	movs	r2, #0
    1aee:	701a      	strb	r2, [r3, #0]
			total_bytes_written = 0;
    1af0:	4b96      	ldr	r3, [pc, #600]	; (1d4c <store_file_packet+0x310>)
    1af2:	2200      	movs	r2, #0
    1af4:	601a      	str	r2, [r3, #0]
			printf("starting val: ", crc_val);
    1af6:	4b96      	ldr	r3, [pc, #600]	; (1d50 <store_file_packet+0x314>)
    1af8:	681a      	ldr	r2, [r3, #0]
    1afa:	4b96      	ldr	r3, [pc, #600]	; (1d54 <store_file_packet+0x318>)
    1afc:	0011      	movs	r1, r2
    1afe:	0018      	movs	r0, r3
    1b00:	4b8a      	ldr	r3, [pc, #552]	; (1d2c <store_file_packet+0x2f0>)
    1b02:	4798      	blx	r3
			add_state(DOWNLOADING);
    1b04:	2008      	movs	r0, #8
    1b06:	4b8c      	ldr	r3, [pc, #560]	; (1d38 <store_file_packet+0x2fc>)
    1b08:	4798      	blx	r3
		}

		if (data != NULL) {
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d100      	bne.n	1b12 <store_file_packet+0xd6>
    1b10:	e101      	b.n	1d16 <store_file_packet+0x2da>
			int bytes_written = 0;
    1b12:	2300      	movs	r3, #0
    1b14:	627b      	str	r3, [r7, #36]	; 0x24
			//printf("length of packet: %d\r\n", length);
			while (bytes_written < length) {
    1b16:	e079      	b.n	1c0c <store_file_packet+0x1d0>
				//TOOD: Check to see if should look at bytes_written + 256 or + 255
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    1b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b1a:	33ff      	adds	r3, #255	; 0xff
    1b1c:	001a      	movs	r2, r3
    1b1e:	683b      	ldr	r3, [r7, #0]
    1b20:	429a      	cmp	r2, r3
    1b22:	d207      	bcs.n	1b34 <store_file_packet+0xf8>
    1b24:	4b88      	ldr	r3, [pc, #544]	; (1d48 <store_file_packet+0x30c>)
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	b29b      	uxth	r3, r3
    1b2a:	2280      	movs	r2, #128	; 0x80
    1b2c:	0052      	lsls	r2, r2, #1
    1b2e:	1ad3      	subs	r3, r2, r3
    1b30:	b29b      	uxth	r3, r3
    1b32:	e005      	b.n	1b40 <store_file_packet+0x104>
    1b34:	683b      	ldr	r3, [r7, #0]
    1b36:	b29a      	uxth	r2, r3
    1b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b3a:	b29b      	uxth	r3, r3
    1b3c:	1ad3      	subs	r3, r2, r3
    1b3e:	b29b      	uxth	r3, r3
    1b40:	2222      	movs	r2, #34	; 0x22
    1b42:	18ba      	adds	r2, r7, r2
    1b44:	8013      	strh	r3, [r2, #0]
				//printf("store_file_packet: num_bytes_to_buffer %d\r\n", num_bytes_to_buffer);
				unsigned int data_cursor = data + bytes_written;
    1b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b48:	687a      	ldr	r2, [r7, #4]
    1b4a:	18d3      	adds	r3, r2, r3
    1b4c:	61fb      	str	r3, [r7, #28]
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    1b4e:	4b7e      	ldr	r3, [pc, #504]	; (1d48 <store_file_packet+0x30c>)
    1b50:	781b      	ldrb	r3, [r3, #0]
    1b52:	001a      	movs	r2, r3
    1b54:	4b80      	ldr	r3, [pc, #512]	; (1d58 <store_file_packet+0x31c>)
    1b56:	18d0      	adds	r0, r2, r3
    1b58:	69f9      	ldr	r1, [r7, #28]
    1b5a:	2322      	movs	r3, #34	; 0x22
    1b5c:	18fb      	adds	r3, r7, r3
    1b5e:	881b      	ldrh	r3, [r3, #0]
    1b60:	001a      	movs	r2, r3
    1b62:	4b73      	ldr	r3, [pc, #460]	; (1d30 <store_file_packet+0x2f4>)
    1b64:	4798      	blx	r3
				bytes_written += num_bytes_to_buffer;
    1b66:	2322      	movs	r3, #34	; 0x22
    1b68:	18fb      	adds	r3, r7, r3
    1b6a:	881b      	ldrh	r3, [r3, #0]
    1b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1b6e:	18d3      	adds	r3, r2, r3
    1b70:	627b      	str	r3, [r7, #36]	; 0x24
				buffer_cursor = buffer_cursor + num_bytes_to_buffer;
    1b72:	2322      	movs	r3, #34	; 0x22
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	881b      	ldrh	r3, [r3, #0]
    1b78:	b2da      	uxtb	r2, r3
    1b7a:	4b73      	ldr	r3, [pc, #460]	; (1d48 <store_file_packet+0x30c>)
    1b7c:	781b      	ldrb	r3, [r3, #0]
    1b7e:	18d3      	adds	r3, r2, r3
    1b80:	b2da      	uxtb	r2, r3
    1b82:	4b71      	ldr	r3, [pc, #452]	; (1d48 <store_file_packet+0x30c>)
    1b84:	701a      	strb	r2, [r3, #0]
				if (buffer_cursor == 0)
    1b86:	4b70      	ldr	r3, [pc, #448]	; (1d48 <store_file_packet+0x30c>)
    1b88:	781b      	ldrb	r3, [r3, #0]
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d102      	bne.n	1b94 <store_file_packet+0x158>
					buffer_cursor = (FLASH_ROW_SIZE - 1);
    1b8e:	4b6e      	ldr	r3, [pc, #440]	; (1d48 <store_file_packet+0x30c>)
    1b90:	22ff      	movs	r2, #255	; 0xff
    1b92:	701a      	strb	r2, [r3, #0]
				if (buffer_cursor == (FLASH_ROW_SIZE - 1)) {
    1b94:	4b6c      	ldr	r3, [pc, #432]	; (1d48 <store_file_packet+0x30c>)
    1b96:	781b      	ldrb	r3, [r3, #0]
    1b98:	2bff      	cmp	r3, #255	; 0xff
    1b9a:	d137      	bne.n	1c0c <store_file_packet+0x1d0>
					status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, FLASH_ROW_SIZE);
    1b9c:	4b69      	ldr	r3, [pc, #420]	; (1d44 <store_file_packet+0x308>)
    1b9e:	6819      	ldr	r1, [r3, #0]
    1ba0:	231b      	movs	r3, #27
    1ba2:	18fc      	adds	r4, r7, r3
    1ba4:	2380      	movs	r3, #128	; 0x80
    1ba6:	005b      	lsls	r3, r3, #1
    1ba8:	4a6b      	ldr	r2, [pc, #428]	; (1d58 <store_file_packet+0x31c>)
    1baa:	486c      	ldr	r0, [pc, #432]	; (1d5c <store_file_packet+0x320>)
    1bac:	4d6c      	ldr	r5, [pc, #432]	; (1d60 <store_file_packet+0x324>)
    1bae:	47a8      	blx	r5
    1bb0:	0003      	movs	r3, r0
    1bb2:	7023      	strb	r3, [r4, #0]
					if (STATUS_OK != status_val) {
    1bb4:	231b      	movs	r3, #27
    1bb6:	18fb      	adds	r3, r7, r3
    1bb8:	781b      	ldrb	r3, [r3, #0]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d00a      	beq.n	1bd4 <store_file_packet+0x198>
						add_state(CANCELED);
    1bbe:	2020      	movs	r0, #32
    1bc0:	4b5d      	ldr	r3, [pc, #372]	; (1d38 <store_file_packet+0x2fc>)
    1bc2:	4798      	blx	r3
						printf("store_file_packet: error writing row at address %d \r\n", write_address);
    1bc4:	4b5f      	ldr	r3, [pc, #380]	; (1d44 <store_file_packet+0x308>)
    1bc6:	681a      	ldr	r2, [r3, #0]
    1bc8:	4b66      	ldr	r3, [pc, #408]	; (1d64 <store_file_packet+0x328>)
    1bca:	0011      	movs	r1, r2
    1bcc:	0018      	movs	r0, r3
    1bce:	4b57      	ldr	r3, [pc, #348]	; (1d2c <store_file_packet+0x2f0>)
    1bd0:	4798      	blx	r3
						return;
    1bd2:	e0a0      	b.n	1d16 <store_file_packet+0x2da>
					}
					buffer_cursor = 0;
    1bd4:	4b5c      	ldr	r3, [pc, #368]	; (1d48 <store_file_packet+0x30c>)
    1bd6:	2200      	movs	r2, #0
    1bd8:	701a      	strb	r2, [r3, #0]
					write_address += FLASH_ROW_SIZE;
    1bda:	4b5a      	ldr	r3, [pc, #360]	; (1d44 <store_file_packet+0x308>)
    1bdc:	681b      	ldr	r3, [r3, #0]
    1bde:	1c5a      	adds	r2, r3, #1
    1be0:	32ff      	adds	r2, #255	; 0xff
    1be2:	4b58      	ldr	r3, [pc, #352]	; (1d44 <store_file_packet+0x308>)
    1be4:	601a      	str	r2, [r3, #0]
#if DEBUG_LEVEL >= 3
					if (!global_test_counter)
						hexDump("hexDump", write_row_buffer, 256);

#endif
					if (!crc_val)
    1be6:	4b5a      	ldr	r3, [pc, #360]	; (1d50 <store_file_packet+0x314>)
    1be8:	681b      	ldr	r3, [r3, #0]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d107      	bne.n	1bfe <store_file_packet+0x1c2>
						crc32_calculate(write_row_buffer, FLASH_ROW_SIZE, &crc_val);
    1bee:	4a58      	ldr	r2, [pc, #352]	; (1d50 <store_file_packet+0x314>)
    1bf0:	2380      	movs	r3, #128	; 0x80
    1bf2:	0059      	lsls	r1, r3, #1
    1bf4:	4b58      	ldr	r3, [pc, #352]	; (1d58 <store_file_packet+0x31c>)
    1bf6:	0018      	movs	r0, r3
    1bf8:	4b5b      	ldr	r3, [pc, #364]	; (1d68 <store_file_packet+0x32c>)
    1bfa:	4798      	blx	r3
    1bfc:	e006      	b.n	1c0c <store_file_packet+0x1d0>
					else
						crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &crc_val);
    1bfe:	4a54      	ldr	r2, [pc, #336]	; (1d50 <store_file_packet+0x314>)
    1c00:	2380      	movs	r3, #128	; 0x80
    1c02:	0059      	lsls	r1, r3, #1
    1c04:	4b54      	ldr	r3, [pc, #336]	; (1d58 <store_file_packet+0x31c>)
    1c06:	0018      	movs	r0, r3
    1c08:	4b58      	ldr	r3, [pc, #352]	; (1d6c <store_file_packet+0x330>)
    1c0a:	4798      	blx	r3
			while (bytes_written < length) {
    1c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1c0e:	683b      	ldr	r3, [r7, #0]
    1c10:	429a      	cmp	r2, r3
    1c12:	d200      	bcs.n	1c16 <store_file_packet+0x1da>
    1c14:	e780      	b.n	1b18 <store_file_packet+0xdc>
					printf("%d. store_file_packet [crc_calc]: %d\r\n", global_test_counter++, crc_val);
#endif
				}
			}

			total_bytes_written += bytes_written;
    1c16:	4b4d      	ldr	r3, [pc, #308]	; (1d4c <store_file_packet+0x310>)
    1c18:	681a      	ldr	r2, [r3, #0]
    1c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c1c:	18d2      	adds	r2, r2, r3
    1c1e:	4b4b      	ldr	r3, [pc, #300]	; (1d4c <store_file_packet+0x310>)
    1c20:	601a      	str	r2, [r3, #0]
			received_file_size += length;
    1c22:	4b47      	ldr	r3, [pc, #284]	; (1d40 <store_file_packet+0x304>)
    1c24:	681a      	ldr	r2, [r3, #0]
    1c26:	683b      	ldr	r3, [r7, #0]
    1c28:	18d2      	adds	r2, r2, r3
    1c2a:	4b45      	ldr	r3, [pc, #276]	; (1d40 <store_file_packet+0x304>)
    1c2c:	601a      	str	r2, [r3, #0]
			printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    1c2e:	4b44      	ldr	r3, [pc, #272]	; (1d40 <store_file_packet+0x304>)
    1c30:	6819      	ldr	r1, [r3, #0]
    1c32:	4b4f      	ldr	r3, [pc, #316]	; (1d70 <store_file_packet+0x334>)
    1c34:	681a      	ldr	r2, [r3, #0]
    1c36:	4b4f      	ldr	r3, [pc, #316]	; (1d74 <store_file_packet+0x338>)
    1c38:	0018      	movs	r0, r3
    1c3a:	4b3c      	ldr	r3, [pc, #240]	; (1d2c <store_file_packet+0x2f0>)
    1c3c:	4798      	blx	r3
			if (received_file_size >= http_file_size) {
    1c3e:	4b40      	ldr	r3, [pc, #256]	; (1d40 <store_file_packet+0x304>)
    1c40:	681a      	ldr	r2, [r3, #0]
    1c42:	4b4b      	ldr	r3, [pc, #300]	; (1d70 <store_file_packet+0x334>)
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	429a      	cmp	r2, r3
    1c48:	d365      	bcc.n	1d16 <store_file_packet+0x2da>
#if DEBUG_LEVEL >= 2
				printf("store_file_packet: leftover write_buffer %s\r\n", write_row_buffer);
#endif
				status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, buffer_cursor);
    1c4a:	4b3e      	ldr	r3, [pc, #248]	; (1d44 <store_file_packet+0x308>)
    1c4c:	6819      	ldr	r1, [r3, #0]
    1c4e:	4b3e      	ldr	r3, [pc, #248]	; (1d48 <store_file_packet+0x30c>)
    1c50:	781b      	ldrb	r3, [r3, #0]
    1c52:	b29b      	uxth	r3, r3
    1c54:	221b      	movs	r2, #27
    1c56:	18bc      	adds	r4, r7, r2
    1c58:	4a3f      	ldr	r2, [pc, #252]	; (1d58 <store_file_packet+0x31c>)
    1c5a:	4840      	ldr	r0, [pc, #256]	; (1d5c <store_file_packet+0x320>)
    1c5c:	4d40      	ldr	r5, [pc, #256]	; (1d60 <store_file_packet+0x324>)
    1c5e:	47a8      	blx	r5
    1c60:	0003      	movs	r3, r0
    1c62:	7023      	strb	r3, [r4, #0]
				if (STATUS_OK != status_val) {
    1c64:	231b      	movs	r3, #27
    1c66:	18fb      	adds	r3, r7, r3
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d00a      	beq.n	1c84 <store_file_packet+0x248>
					add_state(CANCELED);
    1c6e:	2020      	movs	r0, #32
    1c70:	4b31      	ldr	r3, [pc, #196]	; (1d38 <store_file_packet+0x2fc>)
    1c72:	4798      	blx	r3
					printf("store_file_packet: error writing row at address %d \r\n", write_address);
    1c74:	4b33      	ldr	r3, [pc, #204]	; (1d44 <store_file_packet+0x308>)
    1c76:	681a      	ldr	r2, [r3, #0]
    1c78:	4b3a      	ldr	r3, [pc, #232]	; (1d64 <store_file_packet+0x328>)
    1c7a:	0011      	movs	r1, r2
    1c7c:	0018      	movs	r0, r3
    1c7e:	4b2b      	ldr	r3, [pc, #172]	; (1d2c <store_file_packet+0x2f0>)
    1c80:	4798      	blx	r3
					return;
    1c82:	e048      	b.n	1d16 <store_file_packet+0x2da>
				}
				crc32_recalculate(write_row_buffer, buffer_cursor, &crc_val);
    1c84:	4b30      	ldr	r3, [pc, #192]	; (1d48 <store_file_packet+0x30c>)
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	0019      	movs	r1, r3
    1c8a:	4a31      	ldr	r2, [pc, #196]	; (1d50 <store_file_packet+0x314>)
    1c8c:	4b32      	ldr	r3, [pc, #200]	; (1d58 <store_file_packet+0x31c>)
    1c8e:	0018      	movs	r0, r3
    1c90:	4b36      	ldr	r3, [pc, #216]	; (1d6c <store_file_packet+0x330>)
    1c92:	4798      	blx	r3
#if DEBUG_LEVEL >= 1
				printf("store_file_packet: buffer_cursor size: %d\r\n", buffer_cursor);
				printf("store_file_packet: calculated crc32 val from packets: %d\r\n", crc_val);
#endif
				bytes_written += buffer_cursor;
    1c94:	4b2c      	ldr	r3, [pc, #176]	; (1d48 <store_file_packet+0x30c>)
    1c96:	781b      	ldrb	r3, [r3, #0]
    1c98:	001a      	movs	r2, r3
    1c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c9c:	189b      	adds	r3, r3, r2
    1c9e:	627b      	str	r3, [r7, #36]	; 0x24
				printf("store_file_packet: file downloaded successfully.\r\n");
    1ca0:	4b35      	ldr	r3, [pc, #212]	; (1d78 <store_file_packet+0x33c>)
    1ca2:	0018      	movs	r0, r3
    1ca4:	4b1e      	ldr	r3, [pc, #120]	; (1d20 <store_file_packet+0x2e4>)
    1ca6:	4798      	blx	r3
#if DEBUG_LEVEL >= 1
				printf("store_file_packet: received_file_size: %d\r\n", received_file_size);
				printf("store_file_packet: num bytes written to flash memory: %d\r\n", total_bytes_written);
#endif
				if (verify_flash(crc_val)) {
    1ca8:	4b29      	ldr	r3, [pc, #164]	; (1d50 <store_file_packet+0x314>)
    1caa:	681b      	ldr	r3, [r3, #0]
    1cac:	0018      	movs	r0, r3
    1cae:	4b33      	ldr	r3, [pc, #204]	; (1d7c <store_file_packet+0x340>)
    1cb0:	4798      	blx	r3
    1cb2:	1e03      	subs	r3, r0, #0
    1cb4:	d00a      	beq.n	1ccc <store_file_packet+0x290>
					printf("store_file_packet: flash successfully written with no errors\r\n");
    1cb6:	4b32      	ldr	r3, [pc, #200]	; (1d80 <store_file_packet+0x344>)
    1cb8:	0018      	movs	r0, r3
    1cba:	4b19      	ldr	r3, [pc, #100]	; (1d20 <store_file_packet+0x2e4>)
    1cbc:	4798      	blx	r3
				} else {
					printf("store_file_packet: flash corrupted.\r\n");
					add_state(CANCELED);
					return;
				}
				if (crc_val != new_firmware_checksum) {
    1cbe:	4b24      	ldr	r3, [pc, #144]	; (1d50 <store_file_packet+0x314>)
    1cc0:	681a      	ldr	r2, [r3, #0]
    1cc2:	4b30      	ldr	r3, [pc, #192]	; (1d84 <store_file_packet+0x348>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	429a      	cmp	r2, r3
    1cc8:	d014      	beq.n	1cf4 <store_file_packet+0x2b8>
    1cca:	e007      	b.n	1cdc <store_file_packet+0x2a0>
					printf("store_file_packet: flash corrupted.\r\n");
    1ccc:	4b2e      	ldr	r3, [pc, #184]	; (1d88 <store_file_packet+0x34c>)
    1cce:	0018      	movs	r0, r3
    1cd0:	4b13      	ldr	r3, [pc, #76]	; (1d20 <store_file_packet+0x2e4>)
    1cd2:	4798      	blx	r3
					add_state(CANCELED);
    1cd4:	2020      	movs	r0, #32
    1cd6:	4b18      	ldr	r3, [pc, #96]	; (1d38 <store_file_packet+0x2fc>)
    1cd8:	4798      	blx	r3
					return;
    1cda:	e01c      	b.n	1d16 <store_file_packet+0x2da>
					printf("store_file_packet: file checksums don't match.\r\n Expected checksum %04x\r\n Received checksum %04x\r\n", new_firmware_checksum, crc_val);
    1cdc:	4b29      	ldr	r3, [pc, #164]	; (1d84 <store_file_packet+0x348>)
    1cde:	6819      	ldr	r1, [r3, #0]
    1ce0:	4b1b      	ldr	r3, [pc, #108]	; (1d50 <store_file_packet+0x314>)
    1ce2:	681a      	ldr	r2, [r3, #0]
    1ce4:	4b29      	ldr	r3, [pc, #164]	; (1d8c <store_file_packet+0x350>)
    1ce6:	0018      	movs	r0, r3
    1ce8:	4b10      	ldr	r3, [pc, #64]	; (1d2c <store_file_packet+0x2f0>)
    1cea:	4798      	blx	r3
					add_state(CANCELED);
    1cec:	2020      	movs	r0, #32
    1cee:	4b12      	ldr	r3, [pc, #72]	; (1d38 <store_file_packet+0x2fc>)
    1cf0:	4798      	blx	r3
					return;
    1cf2:	e010      	b.n	1d16 <store_file_packet+0x2da>
				} else {
					update_boot_status();
    1cf4:	4b26      	ldr	r3, [pc, #152]	; (1d90 <store_file_packet+0x354>)
    1cf6:	4798      	blx	r3
					write_firmware_metadata(FW1_ADDR, new_firmware_version, new_firmware_checksum, received_file_size);
    1cf8:	4b26      	ldr	r3, [pc, #152]	; (1d94 <store_file_packet+0x358>)
    1cfa:	8819      	ldrh	r1, [r3, #0]
    1cfc:	4b21      	ldr	r3, [pc, #132]	; (1d84 <store_file_packet+0x348>)
    1cfe:	681a      	ldr	r2, [r3, #0]
    1d00:	4b0f      	ldr	r3, [pc, #60]	; (1d40 <store_file_packet+0x304>)
    1d02:	681c      	ldr	r4, [r3, #0]
    1d04:	2380      	movs	r3, #128	; 0x80
    1d06:	0198      	lsls	r0, r3, #6
    1d08:	0023      	movs	r3, r4
    1d0a:	4c23      	ldr	r4, [pc, #140]	; (1d98 <store_file_packet+0x35c>)
    1d0c:	47a0      	blx	r4
					add_state(COMPLETED);
    1d0e:	2010      	movs	r0, #16
    1d10:	4b09      	ldr	r3, [pc, #36]	; (1d38 <store_file_packet+0x2fc>)
    1d12:	4798      	blx	r3
				}
				return;
    1d14:	46c0      	nop			; (mov r8, r8)
			}
		}
	} else {
		//TODO: shouldn't get here
	}
}
    1d16:	46bd      	mov	sp, r7
    1d18:	b00a      	add	sp, #40	; 0x28
    1d1a:	bdb0      	pop	{r4, r5, r7, pc}
    1d1c:	00017fb0 	.word	0x00017fb0
    1d20:	0001308d 	.word	0x0001308d
    1d24:	00001035 	.word	0x00001035
    1d28:	00017fd0 	.word	0x00017fd0
    1d2c:	00012f71 	.word	0x00012f71
    1d30:	000124f9 	.word	0x000124f9
    1d34:	000019b5 	.word	0x000019b5
    1d38:	00000fb5 	.word	0x00000fb5
    1d3c:	00001651 	.word	0x00001651
    1d40:	20000210 	.word	0x20000210
    1d44:	200004a4 	.word	0x200004a4
    1d48:	200004a8 	.word	0x200004a8
    1d4c:	20000318 	.word	0x20000318
    1d50:	20000208 	.word	0x20000208
    1d54:	0001802c 	.word	0x0001802c
    1d58:	200004b0 	.word	0x200004b0
    1d5c:	2000031c 	.word	0x2000031c
    1d60:	00002bf1 	.word	0x00002bf1
    1d64:	0001803c 	.word	0x0001803c
    1d68:	00000f55 	.word	0x00000f55
    1d6c:	000089f5 	.word	0x000089f5
    1d70:	2000020c 	.word	0x2000020c
    1d74:	00018074 	.word	0x00018074
    1d78:	000180a8 	.word	0x000180a8
    1d7c:	00001519 	.word	0x00001519
    1d80:	000180dc 	.word	0x000180dc
    1d84:	20000218 	.word	0x20000218
    1d88:	0001811c 	.word	0x0001811c
    1d8c:	00018144 	.word	0x00018144
    1d90:	00001241 	.word	0x00001241
    1d94:	20000214 	.word	0x20000214
    1d98:	00001175 	.word	0x00001175

00001d9c <http_client_callback>:
 * @param module_inst instantiated http_client struct
 * @param evt         event change (enum)
 * @param data        data from http_client
 */
static void http_client_callback(struct http_client_module *module_inst, int evt, union http_client_data *data)
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	b084      	sub	sp, #16
    1da0:	af00      	add	r7, sp, #0
    1da2:	60f8      	str	r0, [r7, #12]
    1da4:	60b9      	str	r1, [r7, #8]
    1da6:	607a      	str	r2, [r7, #4]
	switch (evt) {
    1da8:	68bb      	ldr	r3, [r7, #8]
    1daa:	2b04      	cmp	r3, #4
    1dac:	d85e      	bhi.n	1e6c <http_client_callback+0xd0>
    1dae:	68bb      	ldr	r3, [r7, #8]
    1db0:	009a      	lsls	r2, r3, #2
    1db2:	4b32      	ldr	r3, [pc, #200]	; (1e7c <http_client_callback+0xe0>)
    1db4:	18d3      	adds	r3, r2, r3
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED: {
		printf("http_client_callback: HTTP client socket connected.\r\n");
    1dba:	4b31      	ldr	r3, [pc, #196]	; (1e80 <http_client_callback+0xe4>)
    1dbc:	0018      	movs	r0, r3
    1dbe:	4b31      	ldr	r3, [pc, #196]	; (1e84 <http_client_callback+0xe8>)
    1dc0:	4798      	blx	r3
		break;
    1dc2:	e058      	b.n	1e76 <http_client_callback+0xda>
	}
	case HTTP_CLIENT_CALLBACK_REQUESTED: {
		printf("http_client_callback: request completed.\r\n");
    1dc4:	4b30      	ldr	r3, [pc, #192]	; (1e88 <http_client_callback+0xec>)
    1dc6:	0018      	movs	r0, r3
    1dc8:	4b2e      	ldr	r3, [pc, #184]	; (1e84 <http_client_callback+0xe8>)
    1dca:	4798      	blx	r3
		add_state(GET_REQUESTED);
    1dcc:	2004      	movs	r0, #4
    1dce:	4b2f      	ldr	r3, [pc, #188]	; (1e8c <http_client_callback+0xf0>)
    1dd0:	4798      	blx	r3
		break;
    1dd2:	e050      	b.n	1e76 <http_client_callback+0xda>
	}
	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE: {
		printf("http_client_callback: received response %u data size %u\r\n",
		       (unsigned int)data->recv_response.response_code,
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	881b      	ldrh	r3, [r3, #0]
		printf("http_client_callback: received response %u data size %u\r\n",
    1dd8:	0019      	movs	r1, r3
		       (unsigned int)data->recv_response.content_length);
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	685a      	ldr	r2, [r3, #4]
		printf("http_client_callback: received response %u data size %u\r\n",
    1dde:	4b2c      	ldr	r3, [pc, #176]	; (1e90 <http_client_callback+0xf4>)
    1de0:	0018      	movs	r0, r3
    1de2:	4b2c      	ldr	r3, [pc, #176]	; (1e94 <http_client_callback+0xf8>)
    1de4:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	881b      	ldrh	r3, [r3, #0]
    1dea:	2bc8      	cmp	r3, #200	; 0xc8
    1dec:	d10c      	bne.n	1e08 <http_client_callback+0x6c>
			http_file_size = data->recv_response.content_length;
    1dee:	687b      	ldr	r3, [r7, #4]
    1df0:	685a      	ldr	r2, [r3, #4]
    1df2:	4b29      	ldr	r3, [pc, #164]	; (1e98 <http_client_callback+0xfc>)
    1df4:	601a      	str	r2, [r3, #0]
			received_file_size = 0;
    1df6:	4b29      	ldr	r3, [pc, #164]	; (1e9c <http_client_callback+0x100>)
    1df8:	2200      	movs	r2, #0
    1dfa:	601a      	str	r2, [r3, #0]
		} else {
			add_state(CANCELED);
			return;
		}
		if (data->recv_response.content_length <= MTU_HTTP)
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	685b      	ldr	r3, [r3, #4]
    1e00:	4a27      	ldr	r2, [pc, #156]	; (1ea0 <http_client_callback+0x104>)
    1e02:	4293      	cmp	r3, r2
    1e04:	d834      	bhi.n	1e70 <http_client_callback+0xd4>
    1e06:	e003      	b.n	1e10 <http_client_callback+0x74>
			add_state(CANCELED);
    1e08:	2020      	movs	r0, #32
    1e0a:	4b20      	ldr	r3, [pc, #128]	; (1e8c <http_client_callback+0xf0>)
    1e0c:	4798      	blx	r3
			return;
    1e0e:	e032      	b.n	1e76 <http_client_callback+0xda>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	689a      	ldr	r2, [r3, #8]
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	685b      	ldr	r3, [r3, #4]
    1e18:	0019      	movs	r1, r3
    1e1a:	0010      	movs	r0, r2
    1e1c:	4b21      	ldr	r3, [pc, #132]	; (1ea4 <http_client_callback+0x108>)
    1e1e:	4798      	blx	r3
		//add_state(COMPLETED);
		break;
    1e20:	e026      	b.n	1e70 <http_client_callback+0xd4>
	}
	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA: {
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	685a      	ldr	r2, [r3, #4]
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	681b      	ldr	r3, [r3, #0]
    1e2a:	0019      	movs	r1, r3
    1e2c:	0010      	movs	r0, r2
    1e2e:	4b1d      	ldr	r3, [pc, #116]	; (1ea4 <http_client_callback+0x108>)
    1e30:	4798      	blx	r3
		//if (data->recv_chunked_data.is_complete)
		//add_state(COMPLETED);
		break;
    1e32:	e020      	b.n	1e76 <http_client_callback+0xda>
	}
	case HTTP_CLIENT_CALLBACK_DISCONNECTED: {
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	681a      	ldr	r2, [r3, #0]
    1e38:	4b1b      	ldr	r3, [pc, #108]	; (1ea8 <http_client_callback+0x10c>)
    1e3a:	0011      	movs	r1, r2
    1e3c:	0018      	movs	r0, r3
    1e3e:	4b15      	ldr	r3, [pc, #84]	; (1e94 <http_client_callback+0xf8>)
    1e40:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	681b      	ldr	r3, [r3, #0]
    1e46:	330b      	adds	r3, #11
    1e48:	d110      	bne.n	1e6c <http_client_callback+0xd0>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING))
    1e4a:	2008      	movs	r0, #8
    1e4c:	4b17      	ldr	r3, [pc, #92]	; (1eac <http_client_callback+0x110>)
    1e4e:	4798      	blx	r3
    1e50:	1e03      	subs	r3, r0, #0
    1e52:	d002      	beq.n	1e5a <http_client_callback+0xbe>
				clear_state(DOWNLOADING);
    1e54:	2008      	movs	r0, #8
    1e56:	4b16      	ldr	r3, [pc, #88]	; (1eb0 <http_client_callback+0x114>)
    1e58:	4798      	blx	r3

			if (is_state_set(GET_REQUESTED))
    1e5a:	2004      	movs	r0, #4
    1e5c:	4b13      	ldr	r3, [pc, #76]	; (1eac <http_client_callback+0x110>)
    1e5e:	4798      	blx	r3
    1e60:	1e03      	subs	r3, r0, #0
    1e62:	d007      	beq.n	1e74 <http_client_callback+0xd8>
				clear_state(GET_REQUESTED);
    1e64:	2004      	movs	r0, #4
    1e66:	4b12      	ldr	r3, [pc, #72]	; (1eb0 <http_client_callback+0x114>)
    1e68:	4798      	blx	r3
			break;
    1e6a:	e003      	b.n	1e74 <http_client_callback+0xd8>
		}
	}
	default: {
		break;
    1e6c:	46c0      	nop			; (mov r8, r8)
    1e6e:	e002      	b.n	1e76 <http_client_callback+0xda>
		break;
    1e70:	46c0      	nop			; (mov r8, r8)
    1e72:	e000      	b.n	1e76 <http_client_callback+0xda>
			break;
    1e74:	46c0      	nop			; (mov r8, r8)
	}
	}
}
    1e76:	46bd      	mov	sp, r7
    1e78:	b004      	add	sp, #16
    1e7a:	bd80      	pop	{r7, pc}
    1e7c:	00018508 	.word	0x00018508
    1e80:	000181a8 	.word	0x000181a8
    1e84:	0001308d 	.word	0x0001308d
    1e88:	000181e0 	.word	0x000181e0
    1e8c:	00000fb5 	.word	0x00000fb5
    1e90:	0001820c 	.word	0x0001820c
    1e94:	00012f71 	.word	0x00012f71
    1e98:	2000020c 	.word	0x2000020c
    1e9c:	20000210 	.word	0x20000210
    1ea0:	000005dc 	.word	0x000005dc
    1ea4:	00001a3d 	.word	0x00001a3d
    1ea8:	00018248 	.word	0x00018248
    1eac:	00001035 	.word	0x00001035
    1eb0:	00000f81 	.word	0x00000f81

00001eb4 <configure_http_client>:

/**
 * http_client configuration setup
 */
void configure_http_client(void)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	b088      	sub	sp, #32
    1eb8:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
    1eba:	003b      	movs	r3, r7
    1ebc:	0018      	movs	r0, r3
    1ebe:	4b12      	ldr	r3, [pc, #72]	; (1f08 <configure_http_client+0x54>)
    1ec0:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MTU_HTTP;
    1ec2:	003b      	movs	r3, r7
    1ec4:	4a11      	ldr	r2, [pc, #68]	; (1f0c <configure_http_client+0x58>)
    1ec6:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    1ec8:	003b      	movs	r3, r7
    1eca:	4a11      	ldr	r2, [pc, #68]	; (1f10 <configure_http_client+0x5c>)
    1ecc:	605a      	str	r2, [r3, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    1ece:	003a      	movs	r2, r7
    1ed0:	4b10      	ldr	r3, [pc, #64]	; (1f14 <configure_http_client+0x60>)
    1ed2:	0011      	movs	r1, r2
    1ed4:	0018      	movs	r0, r3
    1ed6:	4b10      	ldr	r3, [pc, #64]	; (1f18 <configure_http_client+0x64>)
    1ed8:	4798      	blx	r3
    1eda:	0003      	movs	r3, r0
    1edc:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
    1ede:	69fb      	ldr	r3, [r7, #28]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	da06      	bge.n	1ef2 <configure_http_client+0x3e>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    1ee4:	69fa      	ldr	r2, [r7, #28]
    1ee6:	4b0d      	ldr	r3, [pc, #52]	; (1f1c <configure_http_client+0x68>)
    1ee8:	0011      	movs	r1, r2
    1eea:	0018      	movs	r0, r3
    1eec:	4b0c      	ldr	r3, [pc, #48]	; (1f20 <configure_http_client+0x6c>)
    1eee:	4798      	blx	r3
		while (1) {
    1ef0:	e7fe      	b.n	1ef0 <configure_http_client+0x3c>
		}         /* Loop forever. */
	}

	http_client_register_callback(&http_client_module_inst, http_client_callback);
    1ef2:	4a0c      	ldr	r2, [pc, #48]	; (1f24 <configure_http_client+0x70>)
    1ef4:	4b07      	ldr	r3, [pc, #28]	; (1f14 <configure_http_client+0x60>)
    1ef6:	0011      	movs	r1, r2
    1ef8:	0018      	movs	r0, r3
    1efa:	4b0b      	ldr	r3, [pc, #44]	; (1f28 <configure_http_client+0x74>)
    1efc:	4798      	blx	r3
}
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	46bd      	mov	sp, r7
    1f02:	b008      	add	sp, #32
    1f04:	bd80      	pop	{r7, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	0000b045 	.word	0x0000b045
    1f0c:	000005dc 	.word	0x000005dc
    1f10:	20000328 	.word	0x20000328
    1f14:	20000380 	.word	0x20000380
    1f18:	0000b091 	.word	0x0000b091
    1f1c:	00018278 	.word	0x00018278
    1f20:	00012f71 	.word	0x00012f71
    1f24:	00001d9d 	.word	0x00001d9d
    1f28:	0000b17d 	.word	0x0000b17d

00001f2c <socket_callback>:
 * @param sock    open socket
 * @param evt     event change that pulled callback
 * @param evt_msg event data
 */
void socket_callback(SOCKET sock, uint8_t evt, void *evt_msg)
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b082      	sub	sp, #8
    1f30:	af00      	add	r7, sp, #0
    1f32:	603a      	str	r2, [r7, #0]
    1f34:	1dfb      	adds	r3, r7, #7
    1f36:	1c02      	adds	r2, r0, #0
    1f38:	701a      	strb	r2, [r3, #0]
    1f3a:	1dbb      	adds	r3, r7, #6
    1f3c:	1c0a      	adds	r2, r1, #0
    1f3e:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, evt, evt_msg);
    1f40:	683a      	ldr	r2, [r7, #0]
    1f42:	1dbb      	adds	r3, r7, #6
    1f44:	7819      	ldrb	r1, [r3, #0]
    1f46:	1dfb      	adds	r3, r7, #7
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	b25b      	sxtb	r3, r3
    1f4c:	0018      	movs	r0, r3
    1f4e:	4b03      	ldr	r3, [pc, #12]	; (1f5c <socket_callback+0x30>)
    1f50:	4798      	blx	r3
}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	46bd      	mov	sp, r7
    1f56:	b002      	add	sp, #8
    1f58:	bd80      	pop	{r7, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	0000b21d 	.word	0x0000b21d

00001f60 <resolve_cb>:
 * callback to resolve http address to an IP address
 * @param pu8DomainName unknown??
 * @param u32ServerIP   unknown??
 */
void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    1f60:	b5b0      	push	{r4, r5, r7, lr}
    1f62:	b084      	sub	sp, #16
    1f64:	af02      	add	r7, sp, #8
    1f66:	6078      	str	r0, [r7, #4]
    1f68:	6039      	str	r1, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	       (int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    1f6a:	683b      	ldr	r3, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    1f6c:	22ff      	movs	r2, #255	; 0xff
    1f6e:	4013      	ands	r3, r2
    1f70:	001c      	movs	r4, r3
	       (int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    1f72:	683b      	ldr	r3, [r7, #0]
    1f74:	0a1b      	lsrs	r3, r3, #8
    1f76:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    1f78:	23ff      	movs	r3, #255	; 0xff
    1f7a:	401a      	ands	r2, r3
    1f7c:	0015      	movs	r5, r2
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    1f7e:	683b      	ldr	r3, [r7, #0]
    1f80:	0c1b      	lsrs	r3, r3, #16
    1f82:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    1f84:	23ff      	movs	r3, #255	; 0xff
    1f86:	4013      	ands	r3, r2
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    1f88:	683a      	ldr	r2, [r7, #0]
    1f8a:	0e12      	lsrs	r2, r2, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    1f8c:	6879      	ldr	r1, [r7, #4]
    1f8e:	4808      	ldr	r0, [pc, #32]	; (1fb0 <resolve_cb+0x50>)
    1f90:	9201      	str	r2, [sp, #4]
    1f92:	9300      	str	r3, [sp, #0]
    1f94:	002b      	movs	r3, r5
    1f96:	0022      	movs	r2, r4
    1f98:	4c06      	ldr	r4, [pc, #24]	; (1fb4 <resolve_cb+0x54>)
    1f9a:	47a0      	blx	r4
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    1f9c:	683a      	ldr	r2, [r7, #0]
    1f9e:	687b      	ldr	r3, [r7, #4]
    1fa0:	0011      	movs	r1, r2
    1fa2:	0018      	movs	r0, r3
    1fa4:	4b04      	ldr	r3, [pc, #16]	; (1fb8 <resolve_cb+0x58>)
    1fa6:	4798      	blx	r3
}
    1fa8:	46c0      	nop			; (mov r8, r8)
    1faa:	46bd      	mov	sp, r7
    1fac:	b002      	add	sp, #8
    1fae:	bdb0      	pop	{r4, r5, r7, pc}
    1fb0:	000182c0 	.word	0x000182c0
    1fb4:	00012f71 	.word	0x00012f71
    1fb8:	0000b381 	.word	0x0000b381

00001fbc <wifi_callback>:
 * Callback for wifi state changes
 * @param evt     event change
 * @param evt_msg information about wifi state change
 */
void wifi_callback(uint8_t evt, void *evt_msg)
{
    1fbc:	b590      	push	{r4, r7, lr}
    1fbe:	b087      	sub	sp, #28
    1fc0:	af02      	add	r7, sp, #8
    1fc2:	0002      	movs	r2, r0
    1fc4:	6039      	str	r1, [r7, #0]
    1fc6:	1dfb      	adds	r3, r7, #7
    1fc8:	701a      	strb	r2, [r3, #0]
	switch (evt) {
    1fca:	1dfb      	adds	r3, r7, #7
    1fcc:	781b      	ldrb	r3, [r3, #0]
    1fce:	2b2c      	cmp	r3, #44	; 0x2c
    1fd0:	d002      	beq.n	1fd8 <wifi_callback+0x1c>
    1fd2:	2b32      	cmp	r3, #50	; 0x32
    1fd4:	d041      	beq.n	205a <STACK_SIZE+0x5a>
    1fd6:	e05b      	b.n	2090 <STACK_SIZE+0x90>
	case M2M_WIFI_RESP_CON_STATE_CHANGED: {
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)evt_msg;
    1fd8:	683b      	ldr	r3, [r7, #0]
    1fda:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	781b      	ldrb	r3, [r3, #0]
    1fe0:	2b01      	cmp	r3, #1
    1fe2:	d106      	bne.n	1ff2 <wifi_callback+0x36>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED]: connected.\r\n");
    1fe4:	4b31      	ldr	r3, [pc, #196]	; (20ac <STACK_SIZE+0xac>)
    1fe6:	0018      	movs	r0, r3
    1fe8:	4b31      	ldr	r3, [pc, #196]	; (20b0 <STACK_SIZE+0xb0>)
    1fea:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    1fec:	4b31      	ldr	r3, [pc, #196]	; (20b4 <STACK_SIZE+0xb4>)
    1fee:	4798      	blx	r3
			if (is_state_set(GET_REQUESTED))
				clear_state(GET_REQUESTED);
			m2m_wifi_connect(current_wifi_config->ssid, strlen(current_wifi_config->ssid), current_wifi_config->auth_type, current_wifi_config->password, M2M_WIFI_CH_ALL);
		}

		break;
    1ff0:	e056      	b.n	20a0 <STACK_SIZE+0xa0>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	781b      	ldrb	r3, [r3, #0]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d152      	bne.n	20a0 <STACK_SIZE+0xa0>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED] disconnected.\r\n");
    1ffa:	4b2f      	ldr	r3, [pc, #188]	; (20b8 <STACK_SIZE+0xb8>)
    1ffc:	0018      	movs	r0, r3
    1ffe:	4b2c      	ldr	r3, [pc, #176]	; (20b0 <STACK_SIZE+0xb0>)
    2000:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
    2002:	2002      	movs	r0, #2
    2004:	4b2d      	ldr	r3, [pc, #180]	; (20bc <STACK_SIZE+0xbc>)
    2006:	4798      	blx	r3
			if (is_state_set(DOWNLOADING))
    2008:	2008      	movs	r0, #8
    200a:	4b2d      	ldr	r3, [pc, #180]	; (20c0 <STACK_SIZE+0xc0>)
    200c:	4798      	blx	r3
    200e:	1e03      	subs	r3, r0, #0
    2010:	d002      	beq.n	2018 <STACK_SIZE+0x18>
				clear_state(DOWNLOADING);
    2012:	2008      	movs	r0, #8
    2014:	4b29      	ldr	r3, [pc, #164]	; (20bc <STACK_SIZE+0xbc>)
    2016:	4798      	blx	r3
			if (is_state_set(GET_REQUESTED))
    2018:	2004      	movs	r0, #4
    201a:	4b29      	ldr	r3, [pc, #164]	; (20c0 <STACK_SIZE+0xc0>)
    201c:	4798      	blx	r3
    201e:	1e03      	subs	r3, r0, #0
    2020:	d002      	beq.n	2028 <STACK_SIZE+0x28>
				clear_state(GET_REQUESTED);
    2022:	2004      	movs	r0, #4
    2024:	4b25      	ldr	r3, [pc, #148]	; (20bc <STACK_SIZE+0xbc>)
    2026:	4798      	blx	r3
			m2m_wifi_connect(current_wifi_config->ssid, strlen(current_wifi_config->ssid), current_wifi_config->auth_type, current_wifi_config->password, M2M_WIFI_CH_ALL);
    2028:	4b26      	ldr	r3, [pc, #152]	; (20c4 <STACK_SIZE+0xc4>)
    202a:	681b      	ldr	r3, [r3, #0]
    202c:	681c      	ldr	r4, [r3, #0]
    202e:	4b25      	ldr	r3, [pc, #148]	; (20c4 <STACK_SIZE+0xc4>)
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	681b      	ldr	r3, [r3, #0]
    2034:	0018      	movs	r0, r3
    2036:	4b24      	ldr	r3, [pc, #144]	; (20c8 <STACK_SIZE+0xc8>)
    2038:	4798      	blx	r3
    203a:	0003      	movs	r3, r0
    203c:	b2d9      	uxtb	r1, r3
    203e:	4b21      	ldr	r3, [pc, #132]	; (20c4 <STACK_SIZE+0xc4>)
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	685b      	ldr	r3, [r3, #4]
    2044:	b2da      	uxtb	r2, r3
    2046:	4b1f      	ldr	r3, [pc, #124]	; (20c4 <STACK_SIZE+0xc4>)
    2048:	681b      	ldr	r3, [r3, #0]
    204a:	6898      	ldr	r0, [r3, #8]
    204c:	23ff      	movs	r3, #255	; 0xff
    204e:	9300      	str	r3, [sp, #0]
    2050:	0003      	movs	r3, r0
    2052:	0020      	movs	r0, r4
    2054:	4c1d      	ldr	r4, [pc, #116]	; (20cc <STACK_SIZE+0xcc>)
    2056:	47a0      	blx	r4
		break;
    2058:	e022      	b.n	20a0 <STACK_SIZE+0xa0>
	}
	case M2M_WIFI_REQ_DHCP_CONF: {
		uint8_t *pu8IPAddress = (uint8_t *)evt_msg;
    205a:	683b      	ldr	r3, [r7, #0]
    205c:	60bb      	str	r3, [r7, #8]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
		       pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    205e:	68bb      	ldr	r3, [r7, #8]
    2060:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    2062:	0019      	movs	r1, r3
		       pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    2064:	68bb      	ldr	r3, [r7, #8]
    2066:	3301      	adds	r3, #1
    2068:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    206a:	001a      	movs	r2, r3
		       pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    206c:	68bb      	ldr	r3, [r7, #8]
    206e:	3302      	adds	r3, #2
    2070:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    2072:	001c      	movs	r4, r3
		       pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    2074:	68bb      	ldr	r3, [r7, #8]
    2076:	3303      	adds	r3, #3
    2078:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    207a:	4815      	ldr	r0, [pc, #84]	; (20d0 <STACK_SIZE+0xd0>)
    207c:	9300      	str	r3, [sp, #0]
    207e:	0023      	movs	r3, r4
    2080:	4c14      	ldr	r4, [pc, #80]	; (20d4 <STACK_SIZE+0xd4>)
    2082:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    2084:	2002      	movs	r0, #2
    2086:	4b14      	ldr	r3, [pc, #80]	; (20d8 <STACK_SIZE+0xd8>)
    2088:	4798      	blx	r3
		start_download();
    208a:	4b14      	ldr	r3, [pc, #80]	; (20dc <STACK_SIZE+0xdc>)
    208c:	4798      	blx	r3
		break;
    208e:	e008      	b.n	20a2 <STACK_SIZE+0xa2>
	}
	default:
		printf("wifi_callback [default]: ERROR evt %d\r\n", evt);
    2090:	1dfb      	adds	r3, r7, #7
    2092:	781a      	ldrb	r2, [r3, #0]
    2094:	4b12      	ldr	r3, [pc, #72]	; (20e0 <STACK_SIZE+0xe0>)
    2096:	0011      	movs	r1, r2
    2098:	0018      	movs	r0, r3
    209a:	4b0e      	ldr	r3, [pc, #56]	; (20d4 <STACK_SIZE+0xd4>)
    209c:	4798      	blx	r3
	}
}
    209e:	e000      	b.n	20a2 <STACK_SIZE+0xa2>
		break;
    20a0:	46c0      	nop			; (mov r8, r8)
}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	46bd      	mov	sp, r7
    20a6:	b005      	add	sp, #20
    20a8:	bd90      	pop	{r4, r7, pc}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	000182f0 	.word	0x000182f0
    20b0:	0001308d 	.word	0x0001308d
    20b4:	00005371 	.word	0x00005371
    20b8:	00018330 	.word	0x00018330
    20bc:	00000f81 	.word	0x00000f81
    20c0:	00001035 	.word	0x00001035
    20c4:	200004ac 	.word	0x200004ac
    20c8:	000132d3 	.word	0x000132d3
    20cc:	00004ea9 	.word	0x00004ea9
    20d0:	00018370 	.word	0x00018370
    20d4:	00012f71 	.word	0x00012f71
    20d8:	00000fb5 	.word	0x00000fb5
    20dc:	00001061 	.word	0x00001061
    20e0:	000183b4 	.word	0x000183b4

000020e4 <configure_timer>:

static void configure_timer(void)
{
    20e4:	b580      	push	{r7, lr}
    20e6:	b082      	sub	sp, #8
    20e8:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;

	sw_timer_get_config_defaults(&swt_conf);
    20ea:	1d3b      	adds	r3, r7, #4
    20ec:	0018      	movs	r0, r3
    20ee:	4b08      	ldr	r3, [pc, #32]	; (2110 <configure_timer+0x2c>)
    20f0:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    20f2:	1d3a      	adds	r2, r7, #4
    20f4:	4b07      	ldr	r3, [pc, #28]	; (2114 <configure_timer+0x30>)
    20f6:	0011      	movs	r1, r2
    20f8:	0018      	movs	r0, r3
    20fa:	4b07      	ldr	r3, [pc, #28]	; (2118 <configure_timer+0x34>)
    20fc:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    20fe:	4b05      	ldr	r3, [pc, #20]	; (2114 <configure_timer+0x30>)
    2100:	0018      	movs	r0, r3
    2102:	4b06      	ldr	r3, [pc, #24]	; (211c <configure_timer+0x38>)
    2104:	4798      	blx	r3
}
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	46bd      	mov	sp, r7
    210a:	b002      	add	sp, #8
    210c:	bd80      	pop	{r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	0000c9f1 	.word	0x0000c9f1
    2114:	20000328 	.word	0x20000328
    2118:	0000ca15 	.word	0x0000ca15
    211c:	0000cb01 	.word	0x0000cb01

00002120 <get_default_wifi_config>:

void get_default_wifi_config(wifi_config *wifi_configuration)
{
    2120:	b580      	push	{r7, lr}
    2122:	b082      	sub	sp, #8
    2124:	af00      	add	r7, sp, #0
    2126:	6078      	str	r0, [r7, #4]
	wifi_configuration->ssid = "AirPennNet-Device";
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	4a09      	ldr	r2, [pc, #36]	; (2150 <get_default_wifi_config+0x30>)
    212c:	601a      	str	r2, [r3, #0]
	wifi_configuration->auth_type = M2M_WIFI_SEC_WPA_PSK;
    212e:	687b      	ldr	r3, [r7, #4]
    2130:	2202      	movs	r2, #2
    2132:	605a      	str	r2, [r3, #4]
	wifi_configuration->password = "penn1740wifi";
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	4a07      	ldr	r2, [pc, #28]	; (2154 <get_default_wifi_config+0x34>)
    2138:	609a      	str	r2, [r3, #8]
	wifi_configuration->firmware_header_http_address = "http://www.seas.upenn.edu/~warcher/ese516/metadata.bin";
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	4a06      	ldr	r2, [pc, #24]	; (2158 <get_default_wifi_config+0x38>)
    213e:	60da      	str	r2, [r3, #12]
	wifi_configuration->firmware_http_address = "http://www.seas.upenn.edu/~warcher/ese516/test-firmware.bin";
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	4a06      	ldr	r2, [pc, #24]	; (215c <get_default_wifi_config+0x3c>)
    2144:	611a      	str	r2, [r3, #16]
}
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	46bd      	mov	sp, r7
    214a:	b002      	add	sp, #8
    214c:	bd80      	pop	{r7, pc}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	000183dc 	.word	0x000183dc
    2154:	000183f0 	.word	0x000183f0
    2158:	00018400 	.word	0x00018400
    215c:	00018438 	.word	0x00018438

00002160 <configure_wifi_module>:
void configure_wifi_module(wifi_config *wifi_configuration)
{
    2160:	b5b0      	push	{r4, r5, r7, lr}
    2162:	b08c      	sub	sp, #48	; 0x30
    2164:	af02      	add	r7, sp, #8
    2166:	6078      	str	r0, [r7, #4]
	init_state();
    2168:	4b32      	ldr	r3, [pc, #200]	; (2234 <configure_wifi_module+0xd4>)
    216a:	4798      	blx	r3
	add_state(STORAGE_READY);
    216c:	2001      	movs	r0, #1
    216e:	4b32      	ldr	r3, [pc, #200]	; (2238 <configure_wifi_module+0xd8>)
    2170:	4798      	blx	r3
	configure_timer();
    2172:	4b32      	ldr	r3, [pc, #200]	; (223c <configure_wifi_module+0xdc>)
    2174:	4798      	blx	r3
	configure_http_client();
    2176:	4b32      	ldr	r3, [pc, #200]	; (2240 <configure_wifi_module+0xe0>)
    2178:	4798      	blx	r3
	nm_bsp_init();
    217a:	4b32      	ldr	r3, [pc, #200]	; (2244 <configure_wifi_module+0xe4>)
    217c:	4798      	blx	r3

	tstrWifiInitParam wifi_params;
	memset((uint8_t *)&wifi_params, 0, sizeof(tstrWifiInitParam));
    217e:	230c      	movs	r3, #12
    2180:	18fb      	adds	r3, r7, r3
    2182:	2218      	movs	r2, #24
    2184:	2100      	movs	r1, #0
    2186:	0018      	movs	r0, r3
    2188:	4b2f      	ldr	r3, [pc, #188]	; (2248 <configure_wifi_module+0xe8>)
    218a:	4798      	blx	r3
	wifi_params.pfAppWifiCb = wifi_callback;
    218c:	230c      	movs	r3, #12
    218e:	18fb      	adds	r3, r7, r3
    2190:	4a2e      	ldr	r2, [pc, #184]	; (224c <configure_wifi_module+0xec>)
    2192:	601a      	str	r2, [r3, #0]
	int8_t ret = m2m_wifi_init(&wifi_params); // NOTE: m2m = machine to machine
    2194:	2327      	movs	r3, #39	; 0x27
    2196:	18fc      	adds	r4, r7, r3
    2198:	230c      	movs	r3, #12
    219a:	18fb      	adds	r3, r7, r3
    219c:	0018      	movs	r0, r3
    219e:	4b2c      	ldr	r3, [pc, #176]	; (2250 <configure_wifi_module+0xf0>)
    21a0:	4798      	blx	r3
    21a2:	0003      	movs	r3, r0
    21a4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    21a6:	2327      	movs	r3, #39	; 0x27
    21a8:	18fb      	adds	r3, r7, r3
    21aa:	781b      	ldrb	r3, [r3, #0]
    21ac:	b25b      	sxtb	r3, r3
    21ae:	2b00      	cmp	r3, #0
    21b0:	d004      	beq.n	21bc <configure_wifi_module+0x5c>
		printf("failed to initialize wifi parameters\r\n");
    21b2:	4b28      	ldr	r3, [pc, #160]	; (2254 <configure_wifi_module+0xf4>)
    21b4:	0018      	movs	r0, r3
    21b6:	4b28      	ldr	r3, [pc, #160]	; (2258 <configure_wifi_module+0xf8>)
    21b8:	4798      	blx	r3
    21ba:	e037      	b.n	222c <configure_wifi_module+0xcc>
		return 0;
	}

	socketInit();
    21bc:	4b27      	ldr	r3, [pc, #156]	; (225c <configure_wifi_module+0xfc>)
    21be:	4798      	blx	r3
	registerSocketCallback(socket_callback, resolve_cb);
    21c0:	4a27      	ldr	r2, [pc, #156]	; (2260 <configure_wifi_module+0x100>)
    21c2:	4b28      	ldr	r3, [pc, #160]	; (2264 <configure_wifi_module+0x104>)
    21c4:	0011      	movs	r1, r2
    21c6:	0018      	movs	r0, r3
    21c8:	4b27      	ldr	r3, [pc, #156]	; (2268 <configure_wifi_module+0x108>)
    21ca:	4798      	blx	r3
	printf("--- Welcome to ATWINC 1500 Connection Test ---\r\n");
    21cc:	4b27      	ldr	r3, [pc, #156]	; (226c <configure_wifi_module+0x10c>)
    21ce:	0018      	movs	r0, r3
    21d0:	4b21      	ldr	r3, [pc, #132]	; (2258 <configure_wifi_module+0xf8>)
    21d2:	4798      	blx	r3
	printf("main: connecting to WiFi AP %s...\r\n", wifi_configuration->ssid);
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	681a      	ldr	r2, [r3, #0]
    21d8:	4b25      	ldr	r3, [pc, #148]	; (2270 <configure_wifi_module+0x110>)
    21da:	0011      	movs	r1, r2
    21dc:	0018      	movs	r0, r3
    21de:	4b25      	ldr	r3, [pc, #148]	; (2274 <configure_wifi_module+0x114>)
    21e0:	4798      	blx	r3
	ret = m2m_wifi_connect(wifi_configuration->ssid, strlen(wifi_configuration->ssid), wifi_configuration->auth_type, wifi_configuration->password, M2M_WIFI_CH_ALL);
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	681d      	ldr	r5, [r3, #0]
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	681b      	ldr	r3, [r3, #0]
    21ea:	0018      	movs	r0, r3
    21ec:	4b22      	ldr	r3, [pc, #136]	; (2278 <configure_wifi_module+0x118>)
    21ee:	4798      	blx	r3
    21f0:	0003      	movs	r3, r0
    21f2:	b2d9      	uxtb	r1, r3
    21f4:	687b      	ldr	r3, [r7, #4]
    21f6:	685b      	ldr	r3, [r3, #4]
    21f8:	b2da      	uxtb	r2, r3
    21fa:	687b      	ldr	r3, [r7, #4]
    21fc:	6898      	ldr	r0, [r3, #8]
    21fe:	2327      	movs	r3, #39	; 0x27
    2200:	18fc      	adds	r4, r7, r3
    2202:	23ff      	movs	r3, #255	; 0xff
    2204:	9300      	str	r3, [sp, #0]
    2206:	0003      	movs	r3, r0
    2208:	0028      	movs	r0, r5
    220a:	4d1c      	ldr	r5, [pc, #112]	; (227c <configure_wifi_module+0x11c>)
    220c:	47a8      	blx	r5
    220e:	0003      	movs	r3, r0
    2210:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS == ret) {
    2212:	2327      	movs	r3, #39	; 0x27
    2214:	18fb      	adds	r3, r7, r3
    2216:	781b      	ldrb	r3, [r3, #0]
    2218:	b25b      	sxtb	r3, r3
    221a:	2b00      	cmp	r3, #0
    221c:	d106      	bne.n	222c <configure_wifi_module+0xcc>
		printf("successfully connected");
    221e:	4b18      	ldr	r3, [pc, #96]	; (2280 <configure_wifi_module+0x120>)
    2220:	0018      	movs	r0, r3
    2222:	4b14      	ldr	r3, [pc, #80]	; (2274 <configure_wifi_module+0x114>)
    2224:	4798      	blx	r3
		current_wifi_config = wifi_configuration;
    2226:	4b17      	ldr	r3, [pc, #92]	; (2284 <configure_wifi_module+0x124>)
    2228:	687a      	ldr	r2, [r7, #4]
    222a:	601a      	str	r2, [r3, #0]
	}
}
    222c:	46bd      	mov	sp, r7
    222e:	b00a      	add	sp, #40	; 0x28
    2230:	bdb0      	pop	{r4, r5, r7, pc}
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	00001015 	.word	0x00001015
    2238:	00000fb5 	.word	0x00000fb5
    223c:	000020e5 	.word	0x000020e5
    2240:	00001eb5 	.word	0x00001eb5
    2244:	000031ed 	.word	0x000031ed
    2248:	0001252f 	.word	0x0001252f
    224c:	00001fbd 	.word	0x00001fbd
    2250:	00004ca1 	.word	0x00004ca1
    2254:	00018474 	.word	0x00018474
    2258:	0001308d 	.word	0x0001308d
    225c:	00007ea5 	.word	0x00007ea5
    2260:	00001f61 	.word	0x00001f61
    2264:	00001f2d 	.word	0x00001f2d
    2268:	00007ef5 	.word	0x00007ef5
    226c:	0001849c 	.word	0x0001849c
    2270:	000184cc 	.word	0x000184cc
    2274:	00012f71 	.word	0x00012f71
    2278:	000132d3 	.word	0x000132d3
    227c:	00004ea9 	.word	0x00004ea9
    2280:	000184f0 	.word	0x000184f0
    2284:	200004ac 	.word	0x200004ac

00002288 <check_for_update>:

bool check_for_update()
{
    2288:	b580      	push	{r7, lr}
    228a:	af00      	add	r7, sp, #0
	m2m_wifi_request_dhcp_client();
    228c:	4b15      	ldr	r3, [pc, #84]	; (22e4 <check_for_update+0x5c>)
    228e:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    2290:	e006      	b.n	22a0 <check_for_update+0x18>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    2292:	2000      	movs	r0, #0
    2294:	4b14      	ldr	r3, [pc, #80]	; (22e8 <check_for_update+0x60>)
    2296:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    2298:	4b14      	ldr	r3, [pc, #80]	; (22ec <check_for_update+0x64>)
    229a:	0018      	movs	r0, r3
    229c:	4b14      	ldr	r3, [pc, #80]	; (22f0 <check_for_update+0x68>)
    229e:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    22a0:	2010      	movs	r0, #16
    22a2:	4b14      	ldr	r3, [pc, #80]	; (22f4 <check_for_update+0x6c>)
    22a4:	4798      	blx	r3
    22a6:	0003      	movs	r3, r0
    22a8:	001a      	movs	r2, r3
    22aa:	2301      	movs	r3, #1
    22ac:	4053      	eors	r3, r2
    22ae:	b2db      	uxtb	r3, r3
    22b0:	2b00      	cmp	r3, #0
    22b2:	d009      	beq.n	22c8 <check_for_update+0x40>
    22b4:	2020      	movs	r0, #32
    22b6:	4b0f      	ldr	r3, [pc, #60]	; (22f4 <check_for_update+0x6c>)
    22b8:	4798      	blx	r3
    22ba:	0003      	movs	r3, r0
    22bc:	001a      	movs	r2, r3
    22be:	2301      	movs	r3, #1
    22c0:	4053      	eors	r3, r2
    22c2:	b2db      	uxtb	r3, r3
    22c4:	2b00      	cmp	r3, #0
    22c6:	d1e4      	bne.n	2292 <check_for_update+0xa>
	}
	if (is_state_set(UPDATE_AVAILABLE)) {
    22c8:	2080      	movs	r0, #128	; 0x80
    22ca:	4b0a      	ldr	r3, [pc, #40]	; (22f4 <check_for_update+0x6c>)
    22cc:	4798      	blx	r3
    22ce:	1e03      	subs	r3, r0, #0
    22d0:	d004      	beq.n	22dc <check_for_update+0x54>
		clear_state(COMPLETED);
    22d2:	2010      	movs	r0, #16
    22d4:	4b08      	ldr	r3, [pc, #32]	; (22f8 <check_for_update+0x70>)
    22d6:	4798      	blx	r3
		return true;
    22d8:	2301      	movs	r3, #1
    22da:	e000      	b.n	22de <check_for_update+0x56>
	} else {
		return false;
    22dc:	2300      	movs	r3, #0
	}
}
    22de:	0018      	movs	r0, r3
    22e0:	46bd      	mov	sp, r7
    22e2:	bd80      	pop	{r7, pc}
    22e4:	00005371 	.word	0x00005371
    22e8:	00004e8d 	.word	0x00004e8d
    22ec:	20000328 	.word	0x20000328
    22f0:	0000cc31 	.word	0x0000cc31
    22f4:	00001035 	.word	0x00001035
    22f8:	00000f81 	.word	0x00000f81

000022fc <download_firmware>:
bool download_firmware()
{
    22fc:	b580      	push	{r7, lr}
    22fe:	af00      	add	r7, sp, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    2300:	2080      	movs	r0, #128	; 0x80
    2302:	4b17      	ldr	r3, [pc, #92]	; (2360 <download_firmware+0x64>)
    2304:	4798      	blx	r3
    2306:	1e03      	subs	r3, r0, #0
    2308:	d026      	beq.n	2358 <download_firmware+0x5c>
		start_download();
    230a:	4b16      	ldr	r3, [pc, #88]	; (2364 <download_firmware+0x68>)
    230c:	4798      	blx	r3
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    230e:	e006      	b.n	231e <download_firmware+0x22>
			/* Handle pending events from network controller. */
			m2m_wifi_handle_events(NULL);
    2310:	2000      	movs	r0, #0
    2312:	4b15      	ldr	r3, [pc, #84]	; (2368 <download_firmware+0x6c>)
    2314:	4798      	blx	r3
			/* Checks the timer timeout. */
			sw_timer_task(&swt_module_inst);
    2316:	4b15      	ldr	r3, [pc, #84]	; (236c <download_firmware+0x70>)
    2318:	0018      	movs	r0, r3
    231a:	4b15      	ldr	r3, [pc, #84]	; (2370 <download_firmware+0x74>)
    231c:	4798      	blx	r3
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    231e:	2010      	movs	r0, #16
    2320:	4b0f      	ldr	r3, [pc, #60]	; (2360 <download_firmware+0x64>)
    2322:	4798      	blx	r3
    2324:	0003      	movs	r3, r0
    2326:	001a      	movs	r2, r3
    2328:	2301      	movs	r3, #1
    232a:	4053      	eors	r3, r2
    232c:	b2db      	uxtb	r3, r3
    232e:	2b00      	cmp	r3, #0
    2330:	d009      	beq.n	2346 <download_firmware+0x4a>
    2332:	2020      	movs	r0, #32
    2334:	4b0a      	ldr	r3, [pc, #40]	; (2360 <download_firmware+0x64>)
    2336:	4798      	blx	r3
    2338:	0003      	movs	r3, r0
    233a:	001a      	movs	r2, r3
    233c:	2301      	movs	r3, #1
    233e:	4053      	eors	r3, r2
    2340:	b2db      	uxtb	r3, r3
    2342:	2b00      	cmp	r3, #0
    2344:	d1e4      	bne.n	2310 <download_firmware+0x14>
		}
		if (is_state_set(COMPLETED))
    2346:	2010      	movs	r0, #16
    2348:	4b05      	ldr	r3, [pc, #20]	; (2360 <download_firmware+0x64>)
    234a:	4798      	blx	r3
    234c:	1e03      	subs	r3, r0, #0
    234e:	d001      	beq.n	2354 <download_firmware+0x58>
			return true;
    2350:	2301      	movs	r3, #1
    2352:	e002      	b.n	235a <download_firmware+0x5e>
		else
			return false;
    2354:	2300      	movs	r3, #0
    2356:	e000      	b.n	235a <download_firmware+0x5e>
	} else {
		return false;
    2358:	2300      	movs	r3, #0
	}
}
    235a:	0018      	movs	r0, r3
    235c:	46bd      	mov	sp, r7
    235e:	bd80      	pop	{r7, pc}
    2360:	00001035 	.word	0x00001035
    2364:	00001061 	.word	0x00001061
    2368:	00004e8d 	.word	0x00004e8d
    236c:	20000328 	.word	0x20000328
    2370:	0000cc31 	.word	0x0000cc31

00002374 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2374:	b580      	push	{r7, lr}
    2376:	b084      	sub	sp, #16
    2378:	af00      	add	r7, sp, #0
    237a:	0002      	movs	r2, r0
    237c:	1dfb      	adds	r3, r7, #7
    237e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2380:	230f      	movs	r3, #15
    2382:	18fb      	adds	r3, r7, r3
    2384:	1dfa      	adds	r2, r7, #7
    2386:	7812      	ldrb	r2, [r2, #0]
    2388:	09d2      	lsrs	r2, r2, #7
    238a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    238c:	230e      	movs	r3, #14
    238e:	18fb      	adds	r3, r7, r3
    2390:	1dfa      	adds	r2, r7, #7
    2392:	7812      	ldrb	r2, [r2, #0]
    2394:	0952      	lsrs	r2, r2, #5
    2396:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2398:	4b0d      	ldr	r3, [pc, #52]	; (23d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    239a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    239c:	230f      	movs	r3, #15
    239e:	18fb      	adds	r3, r7, r3
    23a0:	781b      	ldrb	r3, [r3, #0]
    23a2:	2b00      	cmp	r3, #0
    23a4:	d10f      	bne.n	23c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    23a6:	230f      	movs	r3, #15
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	781b      	ldrb	r3, [r3, #0]
    23ac:	009b      	lsls	r3, r3, #2
    23ae:	2210      	movs	r2, #16
    23b0:	4694      	mov	ip, r2
    23b2:	44bc      	add	ip, r7
    23b4:	4463      	add	r3, ip
    23b6:	3b08      	subs	r3, #8
    23b8:	681a      	ldr	r2, [r3, #0]
    23ba:	230e      	movs	r3, #14
    23bc:	18fb      	adds	r3, r7, r3
    23be:	781b      	ldrb	r3, [r3, #0]
    23c0:	01db      	lsls	r3, r3, #7
    23c2:	18d3      	adds	r3, r2, r3
    23c4:	e000      	b.n	23c8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    23c6:	2300      	movs	r3, #0
	}
}
    23c8:	0018      	movs	r0, r3
    23ca:	46bd      	mov	sp, r7
    23cc:	b004      	add	sp, #16
    23ce:	bd80      	pop	{r7, pc}
    23d0:	41004400 	.word	0x41004400

000023d4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    23d4:	b580      	push	{r7, lr}
    23d6:	b082      	sub	sp, #8
    23d8:	af00      	add	r7, sp, #0
    23da:	0002      	movs	r2, r0
    23dc:	1dfb      	adds	r3, r7, #7
    23de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    23e0:	1dfb      	adds	r3, r7, #7
    23e2:	781b      	ldrb	r3, [r3, #0]
    23e4:	0018      	movs	r0, r3
    23e6:	4b03      	ldr	r3, [pc, #12]	; (23f4 <port_get_group_from_gpio_pin+0x20>)
    23e8:	4798      	blx	r3
    23ea:	0003      	movs	r3, r0
}
    23ec:	0018      	movs	r0, r3
    23ee:	46bd      	mov	sp, r7
    23f0:	b002      	add	sp, #8
    23f2:	bd80      	pop	{r7, pc}
    23f4:	00002375 	.word	0x00002375

000023f8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    23f8:	b580      	push	{r7, lr}
    23fa:	b084      	sub	sp, #16
    23fc:	af00      	add	r7, sp, #0
    23fe:	0002      	movs	r2, r0
    2400:	1dfb      	adds	r3, r7, #7
    2402:	701a      	strb	r2, [r3, #0]
    2404:	1dbb      	adds	r3, r7, #6
    2406:	1c0a      	adds	r2, r1, #0
    2408:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    240a:	1dfb      	adds	r3, r7, #7
    240c:	781b      	ldrb	r3, [r3, #0]
    240e:	0018      	movs	r0, r3
    2410:	4b0d      	ldr	r3, [pc, #52]	; (2448 <port_pin_set_output_level+0x50>)
    2412:	4798      	blx	r3
    2414:	0003      	movs	r3, r0
    2416:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2418:	1dfb      	adds	r3, r7, #7
    241a:	781b      	ldrb	r3, [r3, #0]
    241c:	221f      	movs	r2, #31
    241e:	4013      	ands	r3, r2
    2420:	2201      	movs	r2, #1
    2422:	409a      	lsls	r2, r3
    2424:	0013      	movs	r3, r2
    2426:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2428:	1dbb      	adds	r3, r7, #6
    242a:	781b      	ldrb	r3, [r3, #0]
    242c:	2b00      	cmp	r3, #0
    242e:	d003      	beq.n	2438 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2430:	68fb      	ldr	r3, [r7, #12]
    2432:	68ba      	ldr	r2, [r7, #8]
    2434:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2436:	e002      	b.n	243e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2438:	68fb      	ldr	r3, [r7, #12]
    243a:	68ba      	ldr	r2, [r7, #8]
    243c:	615a      	str	r2, [r3, #20]
}
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	46bd      	mov	sp, r7
    2442:	b004      	add	sp, #16
    2444:	bd80      	pop	{r7, pc}
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	000023d5 	.word	0x000023d5

0000244c <system_interrupt_enter_critical_section>:
{
    244c:	b580      	push	{r7, lr}
    244e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2450:	4b02      	ldr	r3, [pc, #8]	; (245c <system_interrupt_enter_critical_section+0x10>)
    2452:	4798      	blx	r3
}
    2454:	46c0      	nop			; (mov r8, r8)
    2456:	46bd      	mov	sp, r7
    2458:	bd80      	pop	{r7, pc}
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	0000ffb5 	.word	0x0000ffb5

00002460 <system_interrupt_leave_critical_section>:
{
    2460:	b580      	push	{r7, lr}
    2462:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2464:	4b02      	ldr	r3, [pc, #8]	; (2470 <system_interrupt_leave_critical_section+0x10>)
    2466:	4798      	blx	r3
}
    2468:	46c0      	nop			; (mov r8, r8)
    246a:	46bd      	mov	sp, r7
    246c:	bd80      	pop	{r7, pc}
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	00010009 	.word	0x00010009

00002474 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
    2474:	b580      	push	{r7, lr}
    2476:	b084      	sub	sp, #16
    2478:	af00      	add	r7, sp, #0
    247a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
    247c:	4b0d      	ldr	r3, [pc, #52]	; (24b4 <spi_lock+0x40>)
    247e:	4798      	blx	r3

	if (module->locked) {
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	791b      	ldrb	r3, [r3, #4]
    2484:	b2db      	uxtb	r3, r3
    2486:	2b00      	cmp	r3, #0
    2488:	d004      	beq.n	2494 <spi_lock+0x20>
		status = STATUS_BUSY;
    248a:	230f      	movs	r3, #15
    248c:	18fb      	adds	r3, r7, r3
    248e:	2205      	movs	r2, #5
    2490:	701a      	strb	r2, [r3, #0]
    2492:	e006      	b.n	24a2 <spi_lock+0x2e>
	} else {
		module->locked = true;
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	2201      	movs	r2, #1
    2498:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
    249a:	230f      	movs	r3, #15
    249c:	18fb      	adds	r3, r7, r3
    249e:	2200      	movs	r2, #0
    24a0:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
    24a2:	4b05      	ldr	r3, [pc, #20]	; (24b8 <spi_lock+0x44>)
    24a4:	4798      	blx	r3

	return status;
    24a6:	230f      	movs	r3, #15
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	781b      	ldrb	r3, [r3, #0]
}
    24ac:	0018      	movs	r0, r3
    24ae:	46bd      	mov	sp, r7
    24b0:	b004      	add	sp, #16
    24b2:	bd80      	pop	{r7, pc}
    24b4:	0000244d 	.word	0x0000244d
    24b8:	00002461 	.word	0x00002461

000024bc <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
    24bc:	b580      	push	{r7, lr}
    24be:	b082      	sub	sp, #8
    24c0:	af00      	add	r7, sp, #0
    24c2:	6078      	str	r0, [r7, #4]
	module->locked = false;
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	2200      	movs	r2, #0
    24c8:	711a      	strb	r2, [r3, #4]
}
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	46bd      	mov	sp, r7
    24ce:	b002      	add	sp, #8
    24d0:	bd80      	pop	{r7, pc}

000024d2 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    24d2:	b580      	push	{r7, lr}
    24d4:	b084      	sub	sp, #16
    24d6:	af00      	add	r7, sp, #0
    24d8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    24da:	687b      	ldr	r3, [r7, #4]
    24dc:	681b      	ldr	r3, [r3, #0]
    24de:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24e0:	68fb      	ldr	r3, [r7, #12]
    24e2:	7e1b      	ldrb	r3, [r3, #24]
    24e4:	b2db      	uxtb	r3, r3
    24e6:	001a      	movs	r2, r3
    24e8:	2301      	movs	r3, #1
    24ea:	4013      	ands	r3, r2
    24ec:	1e5a      	subs	r2, r3, #1
    24ee:	4193      	sbcs	r3, r2
    24f0:	b2db      	uxtb	r3, r3
}
    24f2:	0018      	movs	r0, r3
    24f4:	46bd      	mov	sp, r7
    24f6:	b004      	add	sp, #16
    24f8:	bd80      	pop	{r7, pc}

000024fa <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    24fa:	b580      	push	{r7, lr}
    24fc:	b084      	sub	sp, #16
    24fe:	af00      	add	r7, sp, #0
    2500:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	681b      	ldr	r3, [r3, #0]
    2506:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2508:	68fb      	ldr	r3, [r7, #12]
    250a:	7e1b      	ldrb	r3, [r3, #24]
    250c:	b2db      	uxtb	r3, r3
    250e:	001a      	movs	r2, r3
    2510:	2304      	movs	r3, #4
    2512:	4013      	ands	r3, r2
    2514:	1e5a      	subs	r2, r3, #1
    2516:	4193      	sbcs	r3, r2
    2518:	b2db      	uxtb	r3, r3
}
    251a:	0018      	movs	r0, r3
    251c:	46bd      	mov	sp, r7
    251e:	b004      	add	sp, #16
    2520:	bd80      	pop	{r7, pc}
	...

00002524 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    2524:	b580      	push	{r7, lr}
    2526:	b084      	sub	sp, #16
    2528:	af00      	add	r7, sp, #0
    252a:	6078      	str	r0, [r7, #4]
    252c:	000a      	movs	r2, r1
    252e:	1cbb      	adds	r3, r7, #2
    2530:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	681b      	ldr	r3, [r3, #0]
    2536:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	0018      	movs	r0, r3
    253c:	4b0a      	ldr	r3, [pc, #40]	; (2568 <spi_write+0x44>)
    253e:	4798      	blx	r3
    2540:	0003      	movs	r3, r0
    2542:	001a      	movs	r2, r3
    2544:	2301      	movs	r3, #1
    2546:	4053      	eors	r3, r2
    2548:	b2db      	uxtb	r3, r3
    254a:	2b00      	cmp	r3, #0
    254c:	d001      	beq.n	2552 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    254e:	2305      	movs	r3, #5
    2550:	e006      	b.n	2560 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2552:	1cbb      	adds	r3, r7, #2
    2554:	881b      	ldrh	r3, [r3, #0]
    2556:	05db      	lsls	r3, r3, #23
    2558:	0dda      	lsrs	r2, r3, #23
    255a:	68fb      	ldr	r3, [r7, #12]
    255c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    255e:	2300      	movs	r3, #0
}
    2560:	0018      	movs	r0, r3
    2562:	46bd      	mov	sp, r7
    2564:	b004      	add	sp, #16
    2566:	bd80      	pop	{r7, pc}
    2568:	000024d3 	.word	0x000024d3

0000256c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    256c:	b580      	push	{r7, lr}
    256e:	b084      	sub	sp, #16
    2570:	af00      	add	r7, sp, #0
    2572:	6078      	str	r0, [r7, #4]
    2574:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	681b      	ldr	r3, [r3, #0]
    257a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	0018      	movs	r0, r3
    2580:	4b1b      	ldr	r3, [pc, #108]	; (25f0 <spi_read+0x84>)
    2582:	4798      	blx	r3
    2584:	0003      	movs	r3, r0
    2586:	001a      	movs	r2, r3
    2588:	2301      	movs	r3, #1
    258a:	4053      	eors	r3, r2
    258c:	b2db      	uxtb	r3, r3
    258e:	2b00      	cmp	r3, #0
    2590:	d001      	beq.n	2596 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2592:	2310      	movs	r3, #16
    2594:	e027      	b.n	25e6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    2596:	230f      	movs	r3, #15
    2598:	18fb      	adds	r3, r7, r3
    259a:	2200      	movs	r2, #0
    259c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    259e:	68bb      	ldr	r3, [r7, #8]
    25a0:	8b5b      	ldrh	r3, [r3, #26]
    25a2:	b29b      	uxth	r3, r3
    25a4:	001a      	movs	r2, r3
    25a6:	2304      	movs	r3, #4
    25a8:	4013      	ands	r3, r2
    25aa:	d006      	beq.n	25ba <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    25ac:	230f      	movs	r3, #15
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	221e      	movs	r2, #30
    25b2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    25b4:	68bb      	ldr	r3, [r7, #8]
    25b6:	2204      	movs	r2, #4
    25b8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25ba:	687b      	ldr	r3, [r7, #4]
    25bc:	799b      	ldrb	r3, [r3, #6]
    25be:	2b01      	cmp	r3, #1
    25c0:	d108      	bne.n	25d4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    25c2:	68bb      	ldr	r3, [r7, #8]
    25c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25c6:	b29b      	uxth	r3, r3
    25c8:	05db      	lsls	r3, r3, #23
    25ca:	0ddb      	lsrs	r3, r3, #23
    25cc:	b29a      	uxth	r2, r3
    25ce:	683b      	ldr	r3, [r7, #0]
    25d0:	801a      	strh	r2, [r3, #0]
    25d2:	e005      	b.n	25e0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    25d4:	68bb      	ldr	r3, [r7, #8]
    25d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25d8:	b2db      	uxtb	r3, r3
    25da:	b29a      	uxth	r2, r3
    25dc:	683b      	ldr	r3, [r7, #0]
    25de:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    25e0:	230f      	movs	r3, #15
    25e2:	18fb      	adds	r3, r7, r3
    25e4:	781b      	ldrb	r3, [r3, #0]
}
    25e6:	0018      	movs	r0, r3
    25e8:	46bd      	mov	sp, r7
    25ea:	b004      	add	sp, #16
    25ec:	bd80      	pop	{r7, pc}
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	000024fb 	.word	0x000024fb

000025f4 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b082      	sub	sp, #8
    25f8:	af00      	add	r7, sp, #0
    25fa:	0002      	movs	r2, r0
    25fc:	1dfb      	adds	r3, r7, #7
    25fe:	701a      	strb	r2, [r3, #0]
	switch (type) {
    2600:	1dfb      	adds	r3, r7, #7
    2602:	781b      	ldrb	r3, [r3, #0]
    2604:	2b09      	cmp	r3, #9
    2606:	d818      	bhi.n	263a <_at25dfx_get_device_id+0x46>
    2608:	009a      	lsls	r2, r3, #2
    260a:	4b0e      	ldr	r3, [pc, #56]	; (2644 <_at25dfx_get_device_id+0x50>)
    260c:	18d3      	adds	r3, r2, r3
    260e:	681b      	ldr	r3, [r3, #0]
    2610:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
    2612:	4b0d      	ldr	r3, [pc, #52]	; (2648 <_at25dfx_get_device_id+0x54>)
    2614:	e012      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
    2616:	4b0d      	ldr	r3, [pc, #52]	; (264c <_at25dfx_get_device_id+0x58>)
    2618:	e010      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
    261a:	4b0d      	ldr	r3, [pc, #52]	; (2650 <_at25dfx_get_device_id+0x5c>)
    261c:	e00e      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
    261e:	4b0d      	ldr	r3, [pc, #52]	; (2654 <_at25dfx_get_device_id+0x60>)
    2620:	e00c      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
    2622:	4b0d      	ldr	r3, [pc, #52]	; (2658 <_at25dfx_get_device_id+0x64>)
    2624:	e00a      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
    2626:	4b0d      	ldr	r3, [pc, #52]	; (265c <_at25dfx_get_device_id+0x68>)
    2628:	e008      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
    262a:	4b0d      	ldr	r3, [pc, #52]	; (2660 <_at25dfx_get_device_id+0x6c>)
    262c:	e006      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
    262e:	4b0d      	ldr	r3, [pc, #52]	; (2664 <_at25dfx_get_device_id+0x70>)
    2630:	e004      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
    2632:	4b0d      	ldr	r3, [pc, #52]	; (2668 <_at25dfx_get_device_id+0x74>)
    2634:	e002      	b.n	263c <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
    2636:	4b0d      	ldr	r3, [pc, #52]	; (266c <_at25dfx_get_device_id+0x78>)
    2638:	e000      	b.n	263c <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
    263a:	2300      	movs	r3, #0
	}
}
    263c:	0018      	movs	r0, r3
    263e:	46bd      	mov	sp, r7
    2640:	b002      	add	sp, #8
    2642:	bd80      	pop	{r7, pc}
    2644:	0001851c 	.word	0x0001851c
    2648:	0000651f 	.word	0x0000651f
    264c:	0000431f 	.word	0x0000431f
    2650:	0001441f 	.word	0x0001441f
    2654:	0002451f 	.word	0x0002451f
    2658:	0001451f 	.word	0x0001451f
    265c:	0002461f 	.word	0x0002461f
    2660:	0003461f 	.word	0x0003461f
    2664:	0000861f 	.word	0x0000861f
    2668:	0001471f 	.word	0x0001471f
    266c:	0000481f 	.word	0x0000481f

00002670 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
    2670:	b580      	push	{r7, lr}
    2672:	b082      	sub	sp, #8
    2674:	af00      	add	r7, sp, #0
    2676:	0002      	movs	r2, r0
    2678:	1dfb      	adds	r3, r7, #7
    267a:	701a      	strb	r2, [r3, #0]
	switch (type) {
    267c:	1dfb      	adds	r3, r7, #7
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	2b09      	cmp	r3, #9
    2682:	d819      	bhi.n	26b8 <_at25dfx_get_device_size+0x48>
    2684:	009a      	lsls	r2, r3, #2
    2686:	4b0f      	ldr	r3, [pc, #60]	; (26c4 <_at25dfx_get_device_size+0x54>)
    2688:	18d3      	adds	r3, r2, r3
    268a:	681b      	ldr	r3, [r3, #0]
    268c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
    268e:	2380      	movs	r3, #128	; 0x80
    2690:	025b      	lsls	r3, r3, #9
    2692:	e012      	b.n	26ba <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
    2694:	2380      	movs	r3, #128	; 0x80
    2696:	02db      	lsls	r3, r3, #11
    2698:	e00f      	b.n	26ba <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
    269a:	2380      	movs	r3, #128	; 0x80
    269c:	031b      	lsls	r3, r3, #12
    269e:	e00c      	b.n	26ba <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
    26a0:	2380      	movs	r3, #128	; 0x80
    26a2:	035b      	lsls	r3, r3, #13
    26a4:	e009      	b.n	26ba <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
    26a6:	2380      	movs	r3, #128	; 0x80
    26a8:	039b      	lsls	r3, r3, #14
    26aa:	e006      	b.n	26ba <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
    26ac:	2380      	movs	r3, #128	; 0x80
    26ae:	03db      	lsls	r3, r3, #15
    26b0:	e003      	b.n	26ba <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
    26b2:	2380      	movs	r3, #128	; 0x80
    26b4:	041b      	lsls	r3, r3, #16
    26b6:	e000      	b.n	26ba <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
    26b8:	2300      	movs	r3, #0
	}
}
    26ba:	0018      	movs	r0, r3
    26bc:	46bd      	mov	sp, r7
    26be:	b002      	add	sp, #8
    26c0:	bd80      	pop	{r7, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	00018544 	.word	0x00018544

000026c8 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
    26c8:	b580      	push	{r7, lr}
    26ca:	b082      	sub	sp, #8
    26cc:	af00      	add	r7, sp, #0
    26ce:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	795b      	ldrb	r3, [r3, #5]
    26d4:	2100      	movs	r1, #0
    26d6:	0018      	movs	r0, r3
    26d8:	4b02      	ldr	r3, [pc, #8]	; (26e4 <_at25dfx_chip_select+0x1c>)
    26da:	4798      	blx	r3
}
    26dc:	46c0      	nop			; (mov r8, r8)
    26de:	46bd      	mov	sp, r7
    26e0:	b002      	add	sp, #8
    26e2:	bd80      	pop	{r7, pc}
    26e4:	000023f9 	.word	0x000023f9

000026e8 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b082      	sub	sp, #8
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	795b      	ldrb	r3, [r3, #5]
    26f4:	2101      	movs	r1, #1
    26f6:	0018      	movs	r0, r3
    26f8:	4b02      	ldr	r3, [pc, #8]	; (2704 <_at25dfx_chip_deselect+0x1c>)
    26fa:	4798      	blx	r3
}
    26fc:	46c0      	nop			; (mov r8, r8)
    26fe:	46bd      	mov	sp, r7
    2700:	b002      	add	sp, #8
    2702:	bd80      	pop	{r7, pc}
    2704:	000023f9 	.word	0x000023f9

00002708 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    2708:	b084      	sub	sp, #16
    270a:	b5b0      	push	{r4, r5, r7, lr}
    270c:	b084      	sub	sp, #16
    270e:	af00      	add	r7, sp, #0
    2710:	6078      	str	r0, [r7, #4]
    2712:	2004      	movs	r0, #4
    2714:	2420      	movs	r4, #32
    2716:	46a4      	mov	ip, r4
    2718:	44bc      	add	ip, r7
    271a:	4460      	add	r0, ip
    271c:	6001      	str	r1, [r0, #0]
    271e:	6042      	str	r2, [r0, #4]
    2720:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    2722:	2304      	movs	r3, #4
    2724:	2220      	movs	r2, #32
    2726:	4694      	mov	ip, r2
    2728:	44bc      	add	ip, r7
    272a:	4463      	add	r3, ip
    272c:	781a      	ldrb	r2, [r3, #0]
    272e:	2308      	movs	r3, #8
    2730:	18fb      	adds	r3, r7, r3
    2732:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    2734:	2304      	movs	r3, #4
    2736:	2220      	movs	r2, #32
    2738:	4694      	mov	ip, r2
    273a:	44bc      	add	ip, r7
    273c:	4463      	add	r3, ip
    273e:	785b      	ldrb	r3, [r3, #1]
    2740:	2b01      	cmp	r3, #1
    2742:	d91f      	bls.n	2784 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    2744:	2304      	movs	r3, #4
    2746:	2220      	movs	r2, #32
    2748:	4694      	mov	ip, r2
    274a:	44bc      	add	ip, r7
    274c:	4463      	add	r3, ip
    274e:	685b      	ldr	r3, [r3, #4]
    2750:	b2da      	uxtb	r2, r3
    2752:	2308      	movs	r3, #8
    2754:	18fb      	adds	r3, r7, r3
    2756:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    2758:	2304      	movs	r3, #4
    275a:	2220      	movs	r2, #32
    275c:	4694      	mov	ip, r2
    275e:	44bc      	add	ip, r7
    2760:	4463      	add	r3, ip
    2762:	685b      	ldr	r3, [r3, #4]
    2764:	0a1b      	lsrs	r3, r3, #8
    2766:	b2da      	uxtb	r2, r3
    2768:	2308      	movs	r3, #8
    276a:	18fb      	adds	r3, r7, r3
    276c:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    276e:	2304      	movs	r3, #4
    2770:	2220      	movs	r2, #32
    2772:	4694      	mov	ip, r2
    2774:	44bc      	add	ip, r7
    2776:	4463      	add	r3, ip
    2778:	685b      	ldr	r3, [r3, #4]
    277a:	0c1b      	lsrs	r3, r3, #16
    277c:	b2da      	uxtb	r2, r3
    277e:	2308      	movs	r3, #8
    2780:	18fb      	adds	r3, r7, r3
    2782:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	0018      	movs	r0, r3
    2788:	4b1d      	ldr	r3, [pc, #116]	; (2800 <_at25dfx_chip_issue_read_command_wait+0xf8>)
    278a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	6818      	ldr	r0, [r3, #0]
    2790:	2304      	movs	r3, #4
    2792:	2220      	movs	r2, #32
    2794:	4694      	mov	ip, r2
    2796:	44bc      	add	ip, r7
    2798:	4463      	add	r3, ip
    279a:	785b      	ldrb	r3, [r3, #1]
    279c:	b29a      	uxth	r2, r3
    279e:	230f      	movs	r3, #15
    27a0:	18fc      	adds	r4, r7, r3
    27a2:	2308      	movs	r3, #8
    27a4:	18fb      	adds	r3, r7, r3
    27a6:	0019      	movs	r1, r3
    27a8:	4b16      	ldr	r3, [pc, #88]	; (2804 <_at25dfx_chip_issue_read_command_wait+0xfc>)
    27aa:	4798      	blx	r3
    27ac:	0003      	movs	r3, r0
    27ae:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    27b0:	2304      	movs	r3, #4
    27b2:	2220      	movs	r2, #32
    27b4:	4694      	mov	ip, r2
    27b6:	44bc      	add	ip, r7
    27b8:	4463      	add	r3, ip
    27ba:	899b      	ldrh	r3, [r3, #12]
    27bc:	2b00      	cmp	r3, #0
    27be:	d014      	beq.n	27ea <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	6818      	ldr	r0, [r3, #0]
    27c4:	2304      	movs	r3, #4
    27c6:	2220      	movs	r2, #32
    27c8:	4694      	mov	ip, r2
    27ca:	44bc      	add	ip, r7
    27cc:	4463      	add	r3, ip
    27ce:	6899      	ldr	r1, [r3, #8]
    27d0:	2304      	movs	r3, #4
    27d2:	2220      	movs	r2, #32
    27d4:	4694      	mov	ip, r2
    27d6:	44bc      	add	ip, r7
    27d8:	4463      	add	r3, ip
    27da:	899a      	ldrh	r2, [r3, #12]
    27dc:	230f      	movs	r3, #15
    27de:	18fc      	adds	r4, r7, r3
    27e0:	2300      	movs	r3, #0
    27e2:	4d09      	ldr	r5, [pc, #36]	; (2808 <_at25dfx_chip_issue_read_command_wait+0x100>)
    27e4:	47a8      	blx	r5
    27e6:	0003      	movs	r3, r0
    27e8:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    27ea:	687b      	ldr	r3, [r7, #4]
    27ec:	0018      	movs	r0, r3
    27ee:	4b07      	ldr	r3, [pc, #28]	; (280c <_at25dfx_chip_issue_read_command_wait+0x104>)
    27f0:	4798      	blx	r3
}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	46bd      	mov	sp, r7
    27f6:	b004      	add	sp, #16
    27f8:	bcb0      	pop	{r4, r5, r7}
    27fa:	bc08      	pop	{r3}
    27fc:	b004      	add	sp, #16
    27fe:	4718      	bx	r3
    2800:	000026c9 	.word	0x000026c9
    2804:	00009e79 	.word	0x00009e79
    2808:	00009c55 	.word	0x00009c55
    280c:	000026e9 	.word	0x000026e9

00002810 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    2810:	b084      	sub	sp, #16
    2812:	b590      	push	{r4, r7, lr}
    2814:	b085      	sub	sp, #20
    2816:	af00      	add	r7, sp, #0
    2818:	6078      	str	r0, [r7, #4]
    281a:	2004      	movs	r0, #4
    281c:	2420      	movs	r4, #32
    281e:	46a4      	mov	ip, r4
    2820:	44bc      	add	ip, r7
    2822:	4460      	add	r0, ip
    2824:	6001      	str	r1, [r0, #0]
    2826:	6042      	str	r2, [r0, #4]
    2828:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    282a:	2304      	movs	r3, #4
    282c:	2220      	movs	r2, #32
    282e:	4694      	mov	ip, r2
    2830:	44bc      	add	ip, r7
    2832:	4463      	add	r3, ip
    2834:	781a      	ldrb	r2, [r3, #0]
    2836:	2308      	movs	r3, #8
    2838:	18fb      	adds	r3, r7, r3
    283a:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    283c:	2304      	movs	r3, #4
    283e:	2220      	movs	r2, #32
    2840:	4694      	mov	ip, r2
    2842:	44bc      	add	ip, r7
    2844:	4463      	add	r3, ip
    2846:	785b      	ldrb	r3, [r3, #1]
    2848:	2b01      	cmp	r3, #1
    284a:	d91f      	bls.n	288c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    284c:	2304      	movs	r3, #4
    284e:	2220      	movs	r2, #32
    2850:	4694      	mov	ip, r2
    2852:	44bc      	add	ip, r7
    2854:	4463      	add	r3, ip
    2856:	685b      	ldr	r3, [r3, #4]
    2858:	b2da      	uxtb	r2, r3
    285a:	2308      	movs	r3, #8
    285c:	18fb      	adds	r3, r7, r3
    285e:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    2860:	2304      	movs	r3, #4
    2862:	2220      	movs	r2, #32
    2864:	4694      	mov	ip, r2
    2866:	44bc      	add	ip, r7
    2868:	4463      	add	r3, ip
    286a:	685b      	ldr	r3, [r3, #4]
    286c:	0a1b      	lsrs	r3, r3, #8
    286e:	b2da      	uxtb	r2, r3
    2870:	2308      	movs	r3, #8
    2872:	18fb      	adds	r3, r7, r3
    2874:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    2876:	2304      	movs	r3, #4
    2878:	2220      	movs	r2, #32
    287a:	4694      	mov	ip, r2
    287c:	44bc      	add	ip, r7
    287e:	4463      	add	r3, ip
    2880:	685b      	ldr	r3, [r3, #4]
    2882:	0c1b      	lsrs	r3, r3, #16
    2884:	b2da      	uxtb	r2, r3
    2886:	2308      	movs	r3, #8
    2888:	18fb      	adds	r3, r7, r3
    288a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	0018      	movs	r0, r3
    2890:	4b1d      	ldr	r3, [pc, #116]	; (2908 <_at25dfx_chip_issue_write_command_wait+0xf8>)
    2892:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	6818      	ldr	r0, [r3, #0]
    2898:	2304      	movs	r3, #4
    289a:	2220      	movs	r2, #32
    289c:	4694      	mov	ip, r2
    289e:	44bc      	add	ip, r7
    28a0:	4463      	add	r3, ip
    28a2:	785b      	ldrb	r3, [r3, #1]
    28a4:	b29a      	uxth	r2, r3
    28a6:	230f      	movs	r3, #15
    28a8:	18fc      	adds	r4, r7, r3
    28aa:	2308      	movs	r3, #8
    28ac:	18fb      	adds	r3, r7, r3
    28ae:	0019      	movs	r1, r3
    28b0:	4b16      	ldr	r3, [pc, #88]	; (290c <_at25dfx_chip_issue_write_command_wait+0xfc>)
    28b2:	4798      	blx	r3
    28b4:	0003      	movs	r3, r0
    28b6:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    28b8:	2304      	movs	r3, #4
    28ba:	2220      	movs	r2, #32
    28bc:	4694      	mov	ip, r2
    28be:	44bc      	add	ip, r7
    28c0:	4463      	add	r3, ip
    28c2:	899b      	ldrh	r3, [r3, #12]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d014      	beq.n	28f2 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	6818      	ldr	r0, [r3, #0]
    28cc:	2304      	movs	r3, #4
    28ce:	2220      	movs	r2, #32
    28d0:	4694      	mov	ip, r2
    28d2:	44bc      	add	ip, r7
    28d4:	4463      	add	r3, ip
    28d6:	6899      	ldr	r1, [r3, #8]
    28d8:	2304      	movs	r3, #4
    28da:	2220      	movs	r2, #32
    28dc:	4694      	mov	ip, r2
    28de:	44bc      	add	ip, r7
    28e0:	4463      	add	r3, ip
    28e2:	899b      	ldrh	r3, [r3, #12]
    28e4:	220f      	movs	r2, #15
    28e6:	18bc      	adds	r4, r7, r2
    28e8:	001a      	movs	r2, r3
    28ea:	4b08      	ldr	r3, [pc, #32]	; (290c <_at25dfx_chip_issue_write_command_wait+0xfc>)
    28ec:	4798      	blx	r3
    28ee:	0003      	movs	r3, r0
    28f0:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	0018      	movs	r0, r3
    28f6:	4b06      	ldr	r3, [pc, #24]	; (2910 <_at25dfx_chip_issue_write_command_wait+0x100>)
    28f8:	4798      	blx	r3
}
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	46bd      	mov	sp, r7
    28fe:	b005      	add	sp, #20
    2900:	bc90      	pop	{r4, r7}
    2902:	bc08      	pop	{r3}
    2904:	b004      	add	sp, #16
    2906:	4718      	bx	r3
    2908:	000026c9 	.word	0x000026c9
    290c:	00009e79 	.word	0x00009e79
    2910:	000026e9 	.word	0x000026e9

00002914 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
    2914:	b590      	push	{r4, r7, lr}
    2916:	b085      	sub	sp, #20
    2918:	af00      	add	r7, sp, #0
    291a:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
    291c:	230c      	movs	r3, #12
    291e:	18fb      	adds	r3, r7, r3
    2920:	2200      	movs	r2, #0
    2922:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    2924:	46c0      	nop			; (mov r8, r8)
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	681b      	ldr	r3, [r3, #0]
    292a:	0018      	movs	r0, r3
    292c:	4b3c      	ldr	r3, [pc, #240]	; (2a20 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    292e:	4798      	blx	r3
    2930:	0003      	movs	r3, r0
    2932:	001a      	movs	r2, r3
    2934:	2301      	movs	r3, #1
    2936:	4053      	eors	r3, r2
    2938:	b2db      	uxtb	r3, r3
    293a:	2b00      	cmp	r3, #0
    293c:	d1f3      	bne.n	2926 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	0018      	movs	r0, r3
    2942:	4b38      	ldr	r3, [pc, #224]	; (2a24 <_at25dfx_chip_get_nonbusy_status+0x110>)
    2944:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	681b      	ldr	r3, [r3, #0]
    294a:	220f      	movs	r2, #15
    294c:	18bc      	adds	r4, r7, r2
    294e:	2105      	movs	r1, #5
    2950:	0018      	movs	r0, r3
    2952:	4b35      	ldr	r3, [pc, #212]	; (2a28 <_at25dfx_chip_get_nonbusy_status+0x114>)
    2954:	4798      	blx	r3
    2956:	0003      	movs	r3, r0
    2958:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	681b      	ldr	r3, [r3, #0]
    2960:	0018      	movs	r0, r3
    2962:	4b32      	ldr	r3, [pc, #200]	; (2a2c <_at25dfx_chip_get_nonbusy_status+0x118>)
    2964:	4798      	blx	r3
    2966:	0003      	movs	r3, r0
    2968:	001a      	movs	r2, r3
    296a:	2301      	movs	r3, #1
    296c:	4053      	eors	r3, r2
    296e:	b2db      	uxtb	r3, r3
    2970:	2b00      	cmp	r3, #0
    2972:	d1f3      	bne.n	295c <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	681b      	ldr	r3, [r3, #0]
    2978:	220f      	movs	r2, #15
    297a:	18bc      	adds	r4, r7, r2
    297c:	220c      	movs	r2, #12
    297e:	18ba      	adds	r2, r7, r2
    2980:	0011      	movs	r1, r2
    2982:	0018      	movs	r0, r3
    2984:	4b2a      	ldr	r3, [pc, #168]	; (2a30 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    2986:	4798      	blx	r3
    2988:	0003      	movs	r3, r0
    298a:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    298c:	46c0      	nop			; (mov r8, r8)
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	0018      	movs	r0, r3
    2994:	4b22      	ldr	r3, [pc, #136]	; (2a20 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    2996:	4798      	blx	r3
    2998:	0003      	movs	r3, r0
    299a:	001a      	movs	r2, r3
    299c:	2301      	movs	r3, #1
    299e:	4053      	eors	r3, r2
    29a0:	b2db      	uxtb	r3, r3
    29a2:	2b00      	cmp	r3, #0
    29a4:	d1f3      	bne.n	298e <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	681b      	ldr	r3, [r3, #0]
    29aa:	220f      	movs	r2, #15
    29ac:	18bc      	adds	r4, r7, r2
    29ae:	2100      	movs	r1, #0
    29b0:	0018      	movs	r0, r3
    29b2:	4b1d      	ldr	r3, [pc, #116]	; (2a28 <_at25dfx_chip_get_nonbusy_status+0x114>)
    29b4:	4798      	blx	r3
    29b6:	0003      	movs	r3, r0
    29b8:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	0018      	movs	r0, r3
    29c2:	4b1a      	ldr	r3, [pc, #104]	; (2a2c <_at25dfx_chip_get_nonbusy_status+0x118>)
    29c4:	4798      	blx	r3
    29c6:	0003      	movs	r3, r0
    29c8:	001a      	movs	r2, r3
    29ca:	2301      	movs	r3, #1
    29cc:	4053      	eors	r3, r2
    29ce:	b2db      	uxtb	r3, r3
    29d0:	2b00      	cmp	r3, #0
    29d2:	d1f3      	bne.n	29bc <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	220f      	movs	r2, #15
    29da:	18bc      	adds	r4, r7, r2
    29dc:	220c      	movs	r2, #12
    29de:	18ba      	adds	r2, r7, r2
    29e0:	0011      	movs	r1, r2
    29e2:	0018      	movs	r0, r3
    29e4:	4b12      	ldr	r3, [pc, #72]	; (2a30 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    29e6:	4798      	blx	r3
    29e8:	0003      	movs	r3, r0
    29ea:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    29ec:	230c      	movs	r3, #12
    29ee:	18fb      	adds	r3, r7, r3
    29f0:	881b      	ldrh	r3, [r3, #0]
    29f2:	001a      	movs	r2, r3
    29f4:	2301      	movs	r3, #1
    29f6:	4013      	ands	r3, r2
    29f8:	d1c8      	bne.n	298c <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	0018      	movs	r0, r3
    29fe:	4b0d      	ldr	r3, [pc, #52]	; (2a34 <_at25dfx_chip_get_nonbusy_status+0x120>)
    2a00:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    2a02:	230c      	movs	r3, #12
    2a04:	18fb      	adds	r3, r7, r3
    2a06:	881b      	ldrh	r3, [r3, #0]
    2a08:	001a      	movs	r2, r3
    2a0a:	2320      	movs	r3, #32
    2a0c:	4013      	ands	r3, r2
    2a0e:	d001      	beq.n	2a14 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
    2a10:	2310      	movs	r3, #16
    2a12:	e000      	b.n	2a16 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
    2a14:	2300      	movs	r3, #0
}
    2a16:	0018      	movs	r0, r3
    2a18:	46bd      	mov	sp, r7
    2a1a:	b005      	add	sp, #20
    2a1c:	bd90      	pop	{r4, r7, pc}
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	000024d3 	.word	0x000024d3
    2a24:	000026c9 	.word	0x000026c9
    2a28:	00002525 	.word	0x00002525
    2a2c:	000024fb 	.word	0x000024fb
    2a30:	0000256d 	.word	0x0000256d
    2a34:	000026e9 	.word	0x000026e9

00002a38 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
    2a38:	b590      	push	{r4, r7, lr}
    2a3a:	b089      	sub	sp, #36	; 0x24
    2a3c:	af02      	add	r7, sp, #8
    2a3e:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
    2a40:	2308      	movs	r3, #8
    2a42:	18fb      	adds	r3, r7, r3
    2a44:	2206      	movs	r2, #6
    2a46:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2a48:	2308      	movs	r3, #8
    2a4a:	18fb      	adds	r3, r7, r3
    2a4c:	2201      	movs	r2, #1
    2a4e:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    2a50:	2308      	movs	r3, #8
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	2200      	movs	r2, #0
    2a56:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2a58:	2308      	movs	r3, #8
    2a5a:	18fb      	adds	r3, r7, r3
    2a5c:	2200      	movs	r2, #0
    2a5e:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    2a60:	2308      	movs	r3, #8
    2a62:	18fb      	adds	r3, r7, r3
    2a64:	2200      	movs	r2, #0
    2a66:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2a68:	2308      	movs	r3, #8
    2a6a:	18fb      	adds	r3, r7, r3
    2a6c:	6878      	ldr	r0, [r7, #4]
    2a6e:	466a      	mov	r2, sp
    2a70:	68d9      	ldr	r1, [r3, #12]
    2a72:	6011      	str	r1, [r2, #0]
    2a74:	6819      	ldr	r1, [r3, #0]
    2a76:	685a      	ldr	r2, [r3, #4]
    2a78:	689b      	ldr	r3, [r3, #8]
    2a7a:	4c03      	ldr	r4, [pc, #12]	; (2a88 <_at25dfx_chip_enable_write+0x50>)
    2a7c:	47a0      	blx	r4
}
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	46bd      	mov	sp, r7
    2a82:	b007      	add	sp, #28
    2a84:	bd90      	pop	{r4, r7, pc}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	00002811 	.word	0x00002811

00002a8c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    2a8c:	b590      	push	{r4, r7, lr}
    2a8e:	b08b      	sub	sp, #44	; 0x2c
    2a90:	af02      	add	r7, sp, #8
    2a92:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    2a94:	2300      	movs	r3, #0
    2a96:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	681b      	ldr	r3, [r3, #0]
    2a9c:	221f      	movs	r2, #31
    2a9e:	18bc      	adds	r4, r7, r2
    2aa0:	0018      	movs	r0, r3
    2aa2:	4b21      	ldr	r3, [pc, #132]	; (2b28 <at25dfx_chip_check_presence+0x9c>)
    2aa4:	4798      	blx	r3
    2aa6:	0003      	movs	r3, r0
    2aa8:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2aaa:	231f      	movs	r3, #31
    2aac:	18fb      	adds	r3, r7, r3
    2aae:	781b      	ldrb	r3, [r3, #0]
    2ab0:	2b05      	cmp	r3, #5
    2ab2:	d103      	bne.n	2abc <at25dfx_chip_check_presence+0x30>
		return status;
    2ab4:	231f      	movs	r3, #31
    2ab6:	18fb      	adds	r3, r7, r3
    2ab8:	781b      	ldrb	r3, [r3, #0]
    2aba:	e030      	b.n	2b1e <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
    2abc:	230c      	movs	r3, #12
    2abe:	18fb      	adds	r3, r7, r3
    2ac0:	229f      	movs	r2, #159	; 0x9f
    2ac2:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2ac4:	230c      	movs	r3, #12
    2ac6:	18fb      	adds	r3, r7, r3
    2ac8:	2201      	movs	r2, #1
    2aca:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
    2acc:	230c      	movs	r3, #12
    2ace:	18fb      	adds	r3, r7, r3
    2ad0:	2208      	movs	r2, #8
    2ad2:	18ba      	adds	r2, r7, r2
    2ad4:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
    2ad6:	230c      	movs	r3, #12
    2ad8:	18fb      	adds	r3, r7, r3
    2ada:	2203      	movs	r2, #3
    2adc:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2ade:	230c      	movs	r3, #12
    2ae0:	18fb      	adds	r3, r7, r3
    2ae2:	2200      	movs	r2, #0
    2ae4:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    2ae6:	230c      	movs	r3, #12
    2ae8:	18fb      	adds	r3, r7, r3
    2aea:	6878      	ldr	r0, [r7, #4]
    2aec:	466a      	mov	r2, sp
    2aee:	68d9      	ldr	r1, [r3, #12]
    2af0:	6011      	str	r1, [r2, #0]
    2af2:	6819      	ldr	r1, [r3, #0]
    2af4:	685a      	ldr	r2, [r3, #4]
    2af6:	689b      	ldr	r3, [r3, #8]
    2af8:	4c0c      	ldr	r4, [pc, #48]	; (2b2c <at25dfx_chip_check_presence+0xa0>)
    2afa:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	681b      	ldr	r3, [r3, #0]
    2b00:	0018      	movs	r0, r3
    2b02:	4b0b      	ldr	r3, [pc, #44]	; (2b30 <at25dfx_chip_check_presence+0xa4>)
    2b04:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	791b      	ldrb	r3, [r3, #4]
    2b0a:	0018      	movs	r0, r3
    2b0c:	4b09      	ldr	r3, [pc, #36]	; (2b34 <at25dfx_chip_check_presence+0xa8>)
    2b0e:	4798      	blx	r3
    2b10:	0002      	movs	r2, r0
    2b12:	68bb      	ldr	r3, [r7, #8]
    2b14:	429a      	cmp	r2, r3
    2b16:	d101      	bne.n	2b1c <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
    2b18:	2300      	movs	r3, #0
    2b1a:	e000      	b.n	2b1e <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
    2b1c:	2314      	movs	r3, #20
	}
}
    2b1e:	0018      	movs	r0, r3
    2b20:	46bd      	mov	sp, r7
    2b22:	b009      	add	sp, #36	; 0x24
    2b24:	bd90      	pop	{r4, r7, pc}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	00002475 	.word	0x00002475
    2b2c:	00002709 	.word	0x00002709
    2b30:	000024bd 	.word	0x000024bd
    2b34:	000025f5 	.word	0x000025f5

00002b38 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    2b38:	b590      	push	{r4, r7, lr}
    2b3a:	b08d      	sub	sp, #52	; 0x34
    2b3c:	af02      	add	r7, sp, #8
    2b3e:	60f8      	str	r0, [r7, #12]
    2b40:	60b9      	str	r1, [r7, #8]
    2b42:	607a      	str	r2, [r7, #4]
    2b44:	001a      	movs	r2, r3
    2b46:	1cbb      	adds	r3, r7, #2
    2b48:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    2b4a:	1cbb      	adds	r3, r7, #2
    2b4c:	881a      	ldrh	r2, [r3, #0]
    2b4e:	68bb      	ldr	r3, [r7, #8]
    2b50:	18d4      	adds	r4, r2, r3
    2b52:	68fb      	ldr	r3, [r7, #12]
    2b54:	791b      	ldrb	r3, [r3, #4]
    2b56:	0018      	movs	r0, r3
    2b58:	4b21      	ldr	r3, [pc, #132]	; (2be0 <at25dfx_chip_read_buffer+0xa8>)
    2b5a:	4798      	blx	r3
    2b5c:	0003      	movs	r3, r0
    2b5e:	429c      	cmp	r4, r3
    2b60:	d901      	bls.n	2b66 <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    2b62:	2317      	movs	r3, #23
    2b64:	e037      	b.n	2bd6 <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
    2b66:	68fb      	ldr	r3, [r7, #12]
    2b68:	681b      	ldr	r3, [r3, #0]
    2b6a:	2227      	movs	r2, #39	; 0x27
    2b6c:	18bc      	adds	r4, r7, r2
    2b6e:	0018      	movs	r0, r3
    2b70:	4b1c      	ldr	r3, [pc, #112]	; (2be4 <at25dfx_chip_read_buffer+0xac>)
    2b72:	4798      	blx	r3
    2b74:	0003      	movs	r3, r0
    2b76:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2b78:	2327      	movs	r3, #39	; 0x27
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	781b      	ldrb	r3, [r3, #0]
    2b7e:	2b05      	cmp	r3, #5
    2b80:	d103      	bne.n	2b8a <at25dfx_chip_read_buffer+0x52>
		return status;
    2b82:	2327      	movs	r3, #39	; 0x27
    2b84:	18fb      	adds	r3, r7, r3
    2b86:	781b      	ldrb	r3, [r3, #0]
    2b88:	e025      	b.n	2bd6 <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
    2b8a:	2314      	movs	r3, #20
    2b8c:	18fb      	adds	r3, r7, r3
    2b8e:	220b      	movs	r2, #11
    2b90:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
    2b92:	2314      	movs	r3, #20
    2b94:	18fb      	adds	r3, r7, r3
    2b96:	2205      	movs	r2, #5
    2b98:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    2b9a:	2314      	movs	r3, #20
    2b9c:	18fb      	adds	r3, r7, r3
    2b9e:	68ba      	ldr	r2, [r7, #8]
    2ba0:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
    2ba2:	2314      	movs	r3, #20
    2ba4:	18fb      	adds	r3, r7, r3
    2ba6:	687a      	ldr	r2, [r7, #4]
    2ba8:	609a      	str	r2, [r3, #8]
	cmd.length = length;
    2baa:	2314      	movs	r3, #20
    2bac:	18fb      	adds	r3, r7, r3
    2bae:	1cba      	adds	r2, r7, #2
    2bb0:	8812      	ldrh	r2, [r2, #0]
    2bb2:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    2bb4:	2314      	movs	r3, #20
    2bb6:	18fb      	adds	r3, r7, r3
    2bb8:	68f8      	ldr	r0, [r7, #12]
    2bba:	466a      	mov	r2, sp
    2bbc:	68d9      	ldr	r1, [r3, #12]
    2bbe:	6011      	str	r1, [r2, #0]
    2bc0:	6819      	ldr	r1, [r3, #0]
    2bc2:	685a      	ldr	r2, [r3, #4]
    2bc4:	689b      	ldr	r3, [r3, #8]
    2bc6:	4c08      	ldr	r4, [pc, #32]	; (2be8 <at25dfx_chip_read_buffer+0xb0>)
    2bc8:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2bca:	68fb      	ldr	r3, [r7, #12]
    2bcc:	681b      	ldr	r3, [r3, #0]
    2bce:	0018      	movs	r0, r3
    2bd0:	4b06      	ldr	r3, [pc, #24]	; (2bec <at25dfx_chip_read_buffer+0xb4>)
    2bd2:	4798      	blx	r3

	return STATUS_OK;
    2bd4:	2300      	movs	r3, #0
}
    2bd6:	0018      	movs	r0, r3
    2bd8:	46bd      	mov	sp, r7
    2bda:	b00b      	add	sp, #44	; 0x2c
    2bdc:	bd90      	pop	{r4, r7, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	00002671 	.word	0x00002671
    2be4:	00002475 	.word	0x00002475
    2be8:	00002709 	.word	0x00002709
    2bec:	000024bd 	.word	0x000024bd

00002bf0 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    2bf0:	b590      	push	{r4, r7, lr}
    2bf2:	b08d      	sub	sp, #52	; 0x34
    2bf4:	af02      	add	r7, sp, #8
    2bf6:	60f8      	str	r0, [r7, #12]
    2bf8:	60b9      	str	r1, [r7, #8]
    2bfa:	607a      	str	r2, [r7, #4]
    2bfc:	001a      	movs	r2, r3
    2bfe:	1cbb      	adds	r3, r7, #2
    2c00:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    2c02:	1cbb      	adds	r3, r7, #2
    2c04:	881a      	ldrh	r2, [r3, #0]
    2c06:	68bb      	ldr	r3, [r7, #8]
    2c08:	18d4      	adds	r4, r2, r3
    2c0a:	68fb      	ldr	r3, [r7, #12]
    2c0c:	791b      	ldrb	r3, [r3, #4]
    2c0e:	0018      	movs	r0, r3
    2c10:	4b5b      	ldr	r3, [pc, #364]	; (2d80 <at25dfx_chip_write_buffer+0x190>)
    2c12:	4798      	blx	r3
    2c14:	0003      	movs	r3, r0
    2c16:	429c      	cmp	r4, r3
    2c18:	d901      	bls.n	2c1e <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    2c1a:	2317      	movs	r3, #23
    2c1c:	e0ab      	b.n	2d76 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
    2c1e:	68fb      	ldr	r3, [r7, #12]
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	2227      	movs	r2, #39	; 0x27
    2c24:	18bc      	adds	r4, r7, r2
    2c26:	0018      	movs	r0, r3
    2c28:	4b56      	ldr	r3, [pc, #344]	; (2d84 <at25dfx_chip_write_buffer+0x194>)
    2c2a:	4798      	blx	r3
    2c2c:	0003      	movs	r3, r0
    2c2e:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2c30:	2327      	movs	r3, #39	; 0x27
    2c32:	18fb      	adds	r3, r7, r3
    2c34:	781b      	ldrb	r3, [r3, #0]
    2c36:	2b05      	cmp	r3, #5
    2c38:	d103      	bne.n	2c42 <at25dfx_chip_write_buffer+0x52>
		return status;
    2c3a:	2327      	movs	r3, #39	; 0x27
    2c3c:	18fb      	adds	r3, r7, r3
    2c3e:	781b      	ldrb	r3, [r3, #0]
    2c40:	e099      	b.n	2d76 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
    2c42:	68fb      	ldr	r3, [r7, #12]
    2c44:	0018      	movs	r0, r3
    2c46:	4b50      	ldr	r3, [pc, #320]	; (2d88 <at25dfx_chip_write_buffer+0x198>)
    2c48:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
    2c4a:	2314      	movs	r3, #20
    2c4c:	18fb      	adds	r3, r7, r3
    2c4e:	2202      	movs	r2, #2
    2c50:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
    2c52:	2314      	movs	r3, #20
    2c54:	18fb      	adds	r3, r7, r3
    2c56:	2204      	movs	r2, #4
    2c58:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    2c5a:	2314      	movs	r3, #20
    2c5c:	18fb      	adds	r3, r7, r3
    2c5e:	68ba      	ldr	r2, [r7, #8]
    2c60:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
    2c62:	2314      	movs	r3, #20
    2c64:	18fb      	adds	r3, r7, r3
    2c66:	687a      	ldr	r2, [r7, #4]
    2c68:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    2c6a:	68bb      	ldr	r3, [r7, #8]
    2c6c:	b29b      	uxth	r3, r3
    2c6e:	22ff      	movs	r2, #255	; 0xff
    2c70:	4013      	ands	r3, r2
    2c72:	b29a      	uxth	r2, r3
    2c74:	2324      	movs	r3, #36	; 0x24
    2c76:	18fb      	adds	r3, r7, r3
    2c78:	2180      	movs	r1, #128	; 0x80
    2c7a:	0049      	lsls	r1, r1, #1
    2c7c:	1a8a      	subs	r2, r1, r2
    2c7e:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
    2c80:	1cbb      	adds	r3, r7, #2
    2c82:	2224      	movs	r2, #36	; 0x24
    2c84:	18ba      	adds	r2, r7, r2
    2c86:	8810      	ldrh	r0, [r2, #0]
    2c88:	881b      	ldrh	r3, [r3, #0]
    2c8a:	b299      	uxth	r1, r3
    2c8c:	b282      	uxth	r2, r0
    2c8e:	4291      	cmp	r1, r2
    2c90:	d900      	bls.n	2c94 <at25dfx_chip_write_buffer+0xa4>
    2c92:	1c03      	adds	r3, r0, #0
    2c94:	b29a      	uxth	r2, r3
    2c96:	2314      	movs	r3, #20
    2c98:	18fb      	adds	r3, r7, r3
    2c9a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2c9c:	2314      	movs	r3, #20
    2c9e:	18fb      	adds	r3, r7, r3
    2ca0:	68f8      	ldr	r0, [r7, #12]
    2ca2:	466a      	mov	r2, sp
    2ca4:	68d9      	ldr	r1, [r3, #12]
    2ca6:	6011      	str	r1, [r2, #0]
    2ca8:	6819      	ldr	r1, [r3, #0]
    2caa:	685a      	ldr	r2, [r3, #4]
    2cac:	689b      	ldr	r3, [r3, #8]
    2cae:	4c37      	ldr	r4, [pc, #220]	; (2d8c <at25dfx_chip_write_buffer+0x19c>)
    2cb0:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    2cb2:	2327      	movs	r3, #39	; 0x27
    2cb4:	18fc      	adds	r4, r7, r3
    2cb6:	68fb      	ldr	r3, [r7, #12]
    2cb8:	0018      	movs	r0, r3
    2cba:	4b35      	ldr	r3, [pc, #212]	; (2d90 <at25dfx_chip_write_buffer+0x1a0>)
    2cbc:	4798      	blx	r3
    2cbe:	0003      	movs	r3, r0
    2cc0:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
    2cc2:	2314      	movs	r3, #20
    2cc4:	18fb      	adds	r3, r7, r3
    2cc6:	899a      	ldrh	r2, [r3, #12]
    2cc8:	1cbb      	adds	r3, r7, #2
    2cca:	1cb9      	adds	r1, r7, #2
    2ccc:	8809      	ldrh	r1, [r1, #0]
    2cce:	1a8a      	subs	r2, r1, r2
    2cd0:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
    2cd2:	e03f      	b.n	2d54 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
    2cd4:	68fb      	ldr	r3, [r7, #12]
    2cd6:	0018      	movs	r0, r3
    2cd8:	4b2b      	ldr	r3, [pc, #172]	; (2d88 <at25dfx_chip_write_buffer+0x198>)
    2cda:	4798      	blx	r3

		cmd.address += cmd.length;
    2cdc:	2314      	movs	r3, #20
    2cde:	18fb      	adds	r3, r7, r3
    2ce0:	685b      	ldr	r3, [r3, #4]
    2ce2:	2214      	movs	r2, #20
    2ce4:	18ba      	adds	r2, r7, r2
    2ce6:	8992      	ldrh	r2, [r2, #12]
    2ce8:	189a      	adds	r2, r3, r2
    2cea:	2314      	movs	r3, #20
    2cec:	18fb      	adds	r3, r7, r3
    2cee:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
    2cf0:	2314      	movs	r3, #20
    2cf2:	18fb      	adds	r3, r7, r3
    2cf4:	689b      	ldr	r3, [r3, #8]
    2cf6:	2214      	movs	r2, #20
    2cf8:	18ba      	adds	r2, r7, r2
    2cfa:	8992      	ldrh	r2, [r2, #12]
    2cfc:	189a      	adds	r2, r3, r2
    2cfe:	2314      	movs	r3, #20
    2d00:	18fb      	adds	r3, r7, r3
    2d02:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    2d04:	1cbb      	adds	r3, r7, #2
    2d06:	881b      	ldrh	r3, [r3, #0]
    2d08:	b299      	uxth	r1, r3
    2d0a:	2280      	movs	r2, #128	; 0x80
    2d0c:	0052      	lsls	r2, r2, #1
    2d0e:	4291      	cmp	r1, r2
    2d10:	d901      	bls.n	2d16 <at25dfx_chip_write_buffer+0x126>
    2d12:	2380      	movs	r3, #128	; 0x80
    2d14:	005b      	lsls	r3, r3, #1
    2d16:	b29a      	uxth	r2, r3
    2d18:	2314      	movs	r3, #20
    2d1a:	18fb      	adds	r3, r7, r3
    2d1c:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2d1e:	2314      	movs	r3, #20
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	68f8      	ldr	r0, [r7, #12]
    2d24:	466a      	mov	r2, sp
    2d26:	68d9      	ldr	r1, [r3, #12]
    2d28:	6011      	str	r1, [r2, #0]
    2d2a:	6819      	ldr	r1, [r3, #0]
    2d2c:	685a      	ldr	r2, [r3, #4]
    2d2e:	689b      	ldr	r3, [r3, #8]
    2d30:	4c16      	ldr	r4, [pc, #88]	; (2d8c <at25dfx_chip_write_buffer+0x19c>)
    2d32:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
    2d34:	2327      	movs	r3, #39	; 0x27
    2d36:	18fc      	adds	r4, r7, r3
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	0018      	movs	r0, r3
    2d3c:	4b14      	ldr	r3, [pc, #80]	; (2d90 <at25dfx_chip_write_buffer+0x1a0>)
    2d3e:	4798      	blx	r3
    2d40:	0003      	movs	r3, r0
    2d42:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
    2d44:	2314      	movs	r3, #20
    2d46:	18fb      	adds	r3, r7, r3
    2d48:	899a      	ldrh	r2, [r3, #12]
    2d4a:	1cbb      	adds	r3, r7, #2
    2d4c:	1cb9      	adds	r1, r7, #2
    2d4e:	8809      	ldrh	r1, [r1, #0]
    2d50:	1a8a      	subs	r2, r1, r2
    2d52:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
    2d54:	1cbb      	adds	r3, r7, #2
    2d56:	881b      	ldrh	r3, [r3, #0]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d004      	beq.n	2d66 <at25dfx_chip_write_buffer+0x176>
    2d5c:	2327      	movs	r3, #39	; 0x27
    2d5e:	18fb      	adds	r3, r7, r3
    2d60:	781b      	ldrb	r3, [r3, #0]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d0b6      	beq.n	2cd4 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
    2d66:	68fb      	ldr	r3, [r7, #12]
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	0018      	movs	r0, r3
    2d6c:	4b09      	ldr	r3, [pc, #36]	; (2d94 <at25dfx_chip_write_buffer+0x1a4>)
    2d6e:	4798      	blx	r3

	return status;
    2d70:	2327      	movs	r3, #39	; 0x27
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	781b      	ldrb	r3, [r3, #0]
}
    2d76:	0018      	movs	r0, r3
    2d78:	46bd      	mov	sp, r7
    2d7a:	b00b      	add	sp, #44	; 0x2c
    2d7c:	bd90      	pop	{r4, r7, pc}
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	00002671 	.word	0x00002671
    2d84:	00002475 	.word	0x00002475
    2d88:	00002a39 	.word	0x00002a39
    2d8c:	00002811 	.word	0x00002811
    2d90:	00002915 	.word	0x00002915
    2d94:	000024bd 	.word	0x000024bd

00002d98 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    2d98:	b590      	push	{r4, r7, lr}
    2d9a:	b08d      	sub	sp, #52	; 0x34
    2d9c:	af02      	add	r7, sp, #8
    2d9e:	60f8      	str	r0, [r7, #12]
    2da0:	60b9      	str	r1, [r7, #8]
    2da2:	1dfb      	adds	r3, r7, #7
    2da4:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
    2da6:	68fb      	ldr	r3, [r7, #12]
    2da8:	791b      	ldrb	r3, [r3, #4]
    2daa:	0018      	movs	r0, r3
    2dac:	4b33      	ldr	r3, [pc, #204]	; (2e7c <at25dfx_chip_erase_block+0xe4>)
    2dae:	4798      	blx	r3
    2db0:	0002      	movs	r2, r0
    2db2:	68bb      	ldr	r3, [r7, #8]
    2db4:	429a      	cmp	r2, r3
    2db6:	d801      	bhi.n	2dbc <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
    2db8:	2317      	movs	r3, #23
    2dba:	e05b      	b.n	2e74 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
    2dbc:	68fb      	ldr	r3, [r7, #12]
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	2227      	movs	r2, #39	; 0x27
    2dc2:	18bc      	adds	r4, r7, r2
    2dc4:	0018      	movs	r0, r3
    2dc6:	4b2e      	ldr	r3, [pc, #184]	; (2e80 <at25dfx_chip_erase_block+0xe8>)
    2dc8:	4798      	blx	r3
    2dca:	0003      	movs	r3, r0
    2dcc:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2dce:	2327      	movs	r3, #39	; 0x27
    2dd0:	18fb      	adds	r3, r7, r3
    2dd2:	781b      	ldrb	r3, [r3, #0]
    2dd4:	2b05      	cmp	r3, #5
    2dd6:	d103      	bne.n	2de0 <at25dfx_chip_erase_block+0x48>
		return status;
    2dd8:	2327      	movs	r3, #39	; 0x27
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	781b      	ldrb	r3, [r3, #0]
    2dde:	e049      	b.n	2e74 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
    2de0:	68fb      	ldr	r3, [r7, #12]
    2de2:	0018      	movs	r0, r3
    2de4:	4b27      	ldr	r3, [pc, #156]	; (2e84 <at25dfx_chip_erase_block+0xec>)
    2de6:	4798      	blx	r3

	switch (block_size) {
    2de8:	1dfb      	adds	r3, r7, #7
    2dea:	781b      	ldrb	r3, [r3, #0]
    2dec:	2b01      	cmp	r3, #1
    2dee:	d008      	beq.n	2e02 <at25dfx_chip_erase_block+0x6a>
    2df0:	2b02      	cmp	r3, #2
    2df2:	d00b      	beq.n	2e0c <at25dfx_chip_erase_block+0x74>
    2df4:	2b00      	cmp	r3, #0
    2df6:	d10e      	bne.n	2e16 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    2df8:	2314      	movs	r3, #20
    2dfa:	18fb      	adds	r3, r7, r3
    2dfc:	2220      	movs	r2, #32
    2dfe:	701a      	strb	r2, [r3, #0]
		break;
    2e00:	e00d      	b.n	2e1e <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    2e02:	2314      	movs	r3, #20
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	2252      	movs	r2, #82	; 0x52
    2e08:	701a      	strb	r2, [r3, #0]
		break;
    2e0a:	e008      	b.n	2e1e <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    2e0c:	2314      	movs	r3, #20
    2e0e:	18fb      	adds	r3, r7, r3
    2e10:	22d8      	movs	r2, #216	; 0xd8
    2e12:	701a      	strb	r2, [r3, #0]
		break;
    2e14:	e003      	b.n	2e1e <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
    2e16:	2314      	movs	r3, #20
    2e18:	18fb      	adds	r3, r7, r3
    2e1a:	2200      	movs	r2, #0
    2e1c:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
    2e1e:	2314      	movs	r3, #20
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	2204      	movs	r2, #4
    2e24:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    2e26:	2314      	movs	r3, #20
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	68ba      	ldr	r2, [r7, #8]
    2e2c:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
    2e2e:	2314      	movs	r3, #20
    2e30:	18fb      	adds	r3, r7, r3
    2e32:	2200      	movs	r2, #0
    2e34:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
    2e36:	2314      	movs	r3, #20
    2e38:	18fb      	adds	r3, r7, r3
    2e3a:	2200      	movs	r2, #0
    2e3c:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2e3e:	2314      	movs	r3, #20
    2e40:	18fb      	adds	r3, r7, r3
    2e42:	68f8      	ldr	r0, [r7, #12]
    2e44:	466a      	mov	r2, sp
    2e46:	68d9      	ldr	r1, [r3, #12]
    2e48:	6011      	str	r1, [r2, #0]
    2e4a:	6819      	ldr	r1, [r3, #0]
    2e4c:	685a      	ldr	r2, [r3, #4]
    2e4e:	689b      	ldr	r3, [r3, #8]
    2e50:	4c0d      	ldr	r4, [pc, #52]	; (2e88 <at25dfx_chip_erase_block+0xf0>)
    2e52:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    2e54:	2327      	movs	r3, #39	; 0x27
    2e56:	18fc      	adds	r4, r7, r3
    2e58:	68fb      	ldr	r3, [r7, #12]
    2e5a:	0018      	movs	r0, r3
    2e5c:	4b0b      	ldr	r3, [pc, #44]	; (2e8c <at25dfx_chip_erase_block+0xf4>)
    2e5e:	4798      	blx	r3
    2e60:	0003      	movs	r3, r0
    2e62:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
    2e64:	68fb      	ldr	r3, [r7, #12]
    2e66:	681b      	ldr	r3, [r3, #0]
    2e68:	0018      	movs	r0, r3
    2e6a:	4b09      	ldr	r3, [pc, #36]	; (2e90 <at25dfx_chip_erase_block+0xf8>)
    2e6c:	4798      	blx	r3

	return status;
    2e6e:	2327      	movs	r3, #39	; 0x27
    2e70:	18fb      	adds	r3, r7, r3
    2e72:	781b      	ldrb	r3, [r3, #0]
}
    2e74:	0018      	movs	r0, r3
    2e76:	46bd      	mov	sp, r7
    2e78:	b00b      	add	sp, #44	; 0x2c
    2e7a:	bd90      	pop	{r4, r7, pc}
    2e7c:	00002671 	.word	0x00002671
    2e80:	00002475 	.word	0x00002475
    2e84:	00002a39 	.word	0x00002a39
    2e88:	00002811 	.word	0x00002811
    2e8c:	00002915 	.word	0x00002915
    2e90:	000024bd 	.word	0x000024bd

00002e94 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    2e94:	b590      	push	{r4, r7, lr}
    2e96:	b08b      	sub	sp, #44	; 0x2c
    2e98:	af02      	add	r7, sp, #8
    2e9a:	6078      	str	r0, [r7, #4]
    2e9c:	000a      	movs	r2, r1
    2e9e:	1cfb      	adds	r3, r7, #3
    2ea0:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    2ea2:	687b      	ldr	r3, [r7, #4]
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	221f      	movs	r2, #31
    2ea8:	18bc      	adds	r4, r7, r2
    2eaa:	0018      	movs	r0, r3
    2eac:	4b22      	ldr	r3, [pc, #136]	; (2f38 <at25dfx_chip_set_global_sector_protect+0xa4>)
    2eae:	4798      	blx	r3
    2eb0:	0003      	movs	r3, r0
    2eb2:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2eb4:	231f      	movs	r3, #31
    2eb6:	18fb      	adds	r3, r7, r3
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	2b05      	cmp	r3, #5
    2ebc:	d103      	bne.n	2ec6 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
    2ebe:	231f      	movs	r3, #31
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	781b      	ldrb	r3, [r3, #0]
    2ec4:	e033      	b.n	2f2e <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	0018      	movs	r0, r3
    2eca:	4b1c      	ldr	r3, [pc, #112]	; (2f3c <at25dfx_chip_set_global_sector_protect+0xa8>)
    2ecc:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    2ece:	1cfb      	adds	r3, r7, #3
    2ed0:	781b      	ldrb	r3, [r3, #0]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d001      	beq.n	2eda <at25dfx_chip_set_global_sector_protect+0x46>
    2ed6:	223c      	movs	r2, #60	; 0x3c
    2ed8:	e000      	b.n	2edc <at25dfx_chip_set_global_sector_protect+0x48>
    2eda:	2200      	movs	r2, #0
    2edc:	230b      	movs	r3, #11
    2ede:	18fb      	adds	r3, r7, r3
    2ee0:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
    2ee2:	230c      	movs	r3, #12
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	2201      	movs	r2, #1
    2ee8:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2eea:	230c      	movs	r3, #12
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	2201      	movs	r2, #1
    2ef0:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
    2ef2:	230c      	movs	r3, #12
    2ef4:	18fb      	adds	r3, r7, r3
    2ef6:	2201      	movs	r2, #1
    2ef8:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
    2efa:	230c      	movs	r3, #12
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	220b      	movs	r2, #11
    2f00:	18ba      	adds	r2, r7, r2
    2f02:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2f04:	230c      	movs	r3, #12
    2f06:	18fb      	adds	r3, r7, r3
    2f08:	2200      	movs	r2, #0
    2f0a:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2f0c:	230c      	movs	r3, #12
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	6878      	ldr	r0, [r7, #4]
    2f12:	466a      	mov	r2, sp
    2f14:	68d9      	ldr	r1, [r3, #12]
    2f16:	6011      	str	r1, [r2, #0]
    2f18:	6819      	ldr	r1, [r3, #0]
    2f1a:	685a      	ldr	r2, [r3, #4]
    2f1c:	689b      	ldr	r3, [r3, #8]
    2f1e:	4c08      	ldr	r4, [pc, #32]	; (2f40 <at25dfx_chip_set_global_sector_protect+0xac>)
    2f20:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	681b      	ldr	r3, [r3, #0]
    2f26:	0018      	movs	r0, r3
    2f28:	4b06      	ldr	r3, [pc, #24]	; (2f44 <at25dfx_chip_set_global_sector_protect+0xb0>)
    2f2a:	4798      	blx	r3

	return STATUS_OK;
    2f2c:	2300      	movs	r3, #0
}
    2f2e:	0018      	movs	r0, r3
    2f30:	46bd      	mov	sp, r7
    2f32:	b009      	add	sp, #36	; 0x24
    2f34:	bd90      	pop	{r4, r7, pc}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	00002475 	.word	0x00002475
    2f3c:	00002a39 	.word	0x00002a39
    2f40:	00002811 	.word	0x00002811
    2f44:	000024bd 	.word	0x000024bd

00002f48 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    2f48:	b590      	push	{r4, r7, lr}
    2f4a:	b08b      	sub	sp, #44	; 0x2c
    2f4c:	af02      	add	r7, sp, #8
    2f4e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    2f50:	687b      	ldr	r3, [r7, #4]
    2f52:	681b      	ldr	r3, [r3, #0]
    2f54:	221f      	movs	r2, #31
    2f56:	18bc      	adds	r4, r7, r2
    2f58:	0018      	movs	r0, r3
    2f5a:	4b1b      	ldr	r3, [pc, #108]	; (2fc8 <at25dfx_chip_sleep+0x80>)
    2f5c:	4798      	blx	r3
    2f5e:	0003      	movs	r3, r0
    2f60:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2f62:	231f      	movs	r3, #31
    2f64:	18fb      	adds	r3, r7, r3
    2f66:	781b      	ldrb	r3, [r3, #0]
    2f68:	2b05      	cmp	r3, #5
    2f6a:	d103      	bne.n	2f74 <at25dfx_chip_sleep+0x2c>
		return status;
    2f6c:	231f      	movs	r3, #31
    2f6e:	18fb      	adds	r3, r7, r3
    2f70:	781b      	ldrb	r3, [r3, #0]
    2f72:	e024      	b.n	2fbe <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
    2f74:	230c      	movs	r3, #12
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	22b9      	movs	r2, #185	; 0xb9
    2f7a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2f7c:	230c      	movs	r3, #12
    2f7e:	18fb      	adds	r3, r7, r3
    2f80:	2201      	movs	r2, #1
    2f82:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    2f84:	230c      	movs	r3, #12
    2f86:	18fb      	adds	r3, r7, r3
    2f88:	2200      	movs	r2, #0
    2f8a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2f8c:	230c      	movs	r3, #12
    2f8e:	18fb      	adds	r3, r7, r3
    2f90:	2200      	movs	r2, #0
    2f92:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    2f94:	230c      	movs	r3, #12
    2f96:	18fb      	adds	r3, r7, r3
    2f98:	2200      	movs	r2, #0
    2f9a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2f9c:	230c      	movs	r3, #12
    2f9e:	18fb      	adds	r3, r7, r3
    2fa0:	6878      	ldr	r0, [r7, #4]
    2fa2:	466a      	mov	r2, sp
    2fa4:	68d9      	ldr	r1, [r3, #12]
    2fa6:	6011      	str	r1, [r2, #0]
    2fa8:	6819      	ldr	r1, [r3, #0]
    2faa:	685a      	ldr	r2, [r3, #4]
    2fac:	689b      	ldr	r3, [r3, #8]
    2fae:	4c07      	ldr	r4, [pc, #28]	; (2fcc <at25dfx_chip_sleep+0x84>)
    2fb0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	681b      	ldr	r3, [r3, #0]
    2fb6:	0018      	movs	r0, r3
    2fb8:	4b05      	ldr	r3, [pc, #20]	; (2fd0 <at25dfx_chip_sleep+0x88>)
    2fba:	4798      	blx	r3

	return STATUS_OK;
    2fbc:	2300      	movs	r3, #0
}
    2fbe:	0018      	movs	r0, r3
    2fc0:	46bd      	mov	sp, r7
    2fc2:	b009      	add	sp, #36	; 0x24
    2fc4:	bd90      	pop	{r4, r7, pc}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	00002475 	.word	0x00002475
    2fcc:	00002811 	.word	0x00002811
    2fd0:	000024bd 	.word	0x000024bd

00002fd4 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    2fd4:	b590      	push	{r4, r7, lr}
    2fd6:	b08b      	sub	sp, #44	; 0x2c
    2fd8:	af02      	add	r7, sp, #8
    2fda:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    2fdc:	687b      	ldr	r3, [r7, #4]
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	221f      	movs	r2, #31
    2fe2:	18bc      	adds	r4, r7, r2
    2fe4:	0018      	movs	r0, r3
    2fe6:	4b1b      	ldr	r3, [pc, #108]	; (3054 <at25dfx_chip_wake+0x80>)
    2fe8:	4798      	blx	r3
    2fea:	0003      	movs	r3, r0
    2fec:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2fee:	231f      	movs	r3, #31
    2ff0:	18fb      	adds	r3, r7, r3
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	2b05      	cmp	r3, #5
    2ff6:	d103      	bne.n	3000 <at25dfx_chip_wake+0x2c>
		return status;
    2ff8:	231f      	movs	r3, #31
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	781b      	ldrb	r3, [r3, #0]
    2ffe:	e024      	b.n	304a <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
    3000:	230c      	movs	r3, #12
    3002:	18fb      	adds	r3, r7, r3
    3004:	22ab      	movs	r2, #171	; 0xab
    3006:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    3008:	230c      	movs	r3, #12
    300a:	18fb      	adds	r3, r7, r3
    300c:	2201      	movs	r2, #1
    300e:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    3010:	230c      	movs	r3, #12
    3012:	18fb      	adds	r3, r7, r3
    3014:	2200      	movs	r2, #0
    3016:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    3018:	230c      	movs	r3, #12
    301a:	18fb      	adds	r3, r7, r3
    301c:	2200      	movs	r2, #0
    301e:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    3020:	230c      	movs	r3, #12
    3022:	18fb      	adds	r3, r7, r3
    3024:	2200      	movs	r2, #0
    3026:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3028:	230c      	movs	r3, #12
    302a:	18fb      	adds	r3, r7, r3
    302c:	6878      	ldr	r0, [r7, #4]
    302e:	466a      	mov	r2, sp
    3030:	68d9      	ldr	r1, [r3, #12]
    3032:	6011      	str	r1, [r2, #0]
    3034:	6819      	ldr	r1, [r3, #0]
    3036:	685a      	ldr	r2, [r3, #4]
    3038:	689b      	ldr	r3, [r3, #8]
    303a:	4c07      	ldr	r4, [pc, #28]	; (3058 <at25dfx_chip_wake+0x84>)
    303c:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    303e:	687b      	ldr	r3, [r7, #4]
    3040:	681b      	ldr	r3, [r3, #0]
    3042:	0018      	movs	r0, r3
    3044:	4b05      	ldr	r3, [pc, #20]	; (305c <at25dfx_chip_wake+0x88>)
    3046:	4798      	blx	r3

	return STATUS_OK;
    3048:	2300      	movs	r3, #0
    304a:	0018      	movs	r0, r3
    304c:	46bd      	mov	sp, r7
    304e:	b009      	add	sp, #36	; 0x24
    3050:	bd90      	pop	{r4, r7, pc}
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	00002475 	.word	0x00002475
    3058:	00002811 	.word	0x00002811
    305c:	000024bd 	.word	0x000024bd

00003060 <system_pinmux_get_group_from_gpio_pin>:
{
    3060:	b580      	push	{r7, lr}
    3062:	b084      	sub	sp, #16
    3064:	af00      	add	r7, sp, #0
    3066:	0002      	movs	r2, r0
    3068:	1dfb      	adds	r3, r7, #7
    306a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    306c:	230f      	movs	r3, #15
    306e:	18fb      	adds	r3, r7, r3
    3070:	1dfa      	adds	r2, r7, #7
    3072:	7812      	ldrb	r2, [r2, #0]
    3074:	09d2      	lsrs	r2, r2, #7
    3076:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3078:	230e      	movs	r3, #14
    307a:	18fb      	adds	r3, r7, r3
    307c:	1dfa      	adds	r2, r7, #7
    307e:	7812      	ldrb	r2, [r2, #0]
    3080:	0952      	lsrs	r2, r2, #5
    3082:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3084:	4b0d      	ldr	r3, [pc, #52]	; (30bc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3086:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3088:	230f      	movs	r3, #15
    308a:	18fb      	adds	r3, r7, r3
    308c:	781b      	ldrb	r3, [r3, #0]
    308e:	2b00      	cmp	r3, #0
    3090:	d10f      	bne.n	30b2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3092:	230f      	movs	r3, #15
    3094:	18fb      	adds	r3, r7, r3
    3096:	781b      	ldrb	r3, [r3, #0]
    3098:	009b      	lsls	r3, r3, #2
    309a:	2210      	movs	r2, #16
    309c:	4694      	mov	ip, r2
    309e:	44bc      	add	ip, r7
    30a0:	4463      	add	r3, ip
    30a2:	3b08      	subs	r3, #8
    30a4:	681a      	ldr	r2, [r3, #0]
    30a6:	230e      	movs	r3, #14
    30a8:	18fb      	adds	r3, r7, r3
    30aa:	781b      	ldrb	r3, [r3, #0]
    30ac:	01db      	lsls	r3, r3, #7
    30ae:	18d3      	adds	r3, r2, r3
    30b0:	e000      	b.n	30b4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    30b2:	2300      	movs	r3, #0
}
    30b4:	0018      	movs	r0, r3
    30b6:	46bd      	mov	sp, r7
    30b8:	b004      	add	sp, #16
    30ba:	bd80      	pop	{r7, pc}
    30bc:	41004400 	.word	0x41004400

000030c0 <system_interrupt_enable_global>:
{
    30c0:	b580      	push	{r7, lr}
    30c2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    30c4:	4b04      	ldr	r3, [pc, #16]	; (30d8 <system_interrupt_enable_global+0x18>)
    30c6:	2201      	movs	r2, #1
    30c8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    30ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    30ce:	b662      	cpsie	i
}
    30d0:	46c0      	nop			; (mov r8, r8)
    30d2:	46bd      	mov	sp, r7
    30d4:	bd80      	pop	{r7, pc}
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	20000014 	.word	0x20000014

000030dc <port_get_group_from_gpio_pin>:
{
    30dc:	b580      	push	{r7, lr}
    30de:	b082      	sub	sp, #8
    30e0:	af00      	add	r7, sp, #0
    30e2:	0002      	movs	r2, r0
    30e4:	1dfb      	adds	r3, r7, #7
    30e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    30e8:	1dfb      	adds	r3, r7, #7
    30ea:	781b      	ldrb	r3, [r3, #0]
    30ec:	0018      	movs	r0, r3
    30ee:	4b03      	ldr	r3, [pc, #12]	; (30fc <port_get_group_from_gpio_pin+0x20>)
    30f0:	4798      	blx	r3
    30f2:	0003      	movs	r3, r0
}
    30f4:	0018      	movs	r0, r3
    30f6:	46bd      	mov	sp, r7
    30f8:	b002      	add	sp, #8
    30fa:	bd80      	pop	{r7, pc}
    30fc:	00003061 	.word	0x00003061

00003100 <port_get_config_defaults>:
{
    3100:	b580      	push	{r7, lr}
    3102:	b082      	sub	sp, #8
    3104:	af00      	add	r7, sp, #0
    3106:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	2200      	movs	r2, #0
    310c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	2201      	movs	r2, #1
    3112:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	2200      	movs	r2, #0
    3118:	709a      	strb	r2, [r3, #2]
}
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	46bd      	mov	sp, r7
    311e:	b002      	add	sp, #8
    3120:	bd80      	pop	{r7, pc}
	...

00003124 <port_pin_set_output_level>:
{
    3124:	b580      	push	{r7, lr}
    3126:	b084      	sub	sp, #16
    3128:	af00      	add	r7, sp, #0
    312a:	0002      	movs	r2, r0
    312c:	1dfb      	adds	r3, r7, #7
    312e:	701a      	strb	r2, [r3, #0]
    3130:	1dbb      	adds	r3, r7, #6
    3132:	1c0a      	adds	r2, r1, #0
    3134:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3136:	1dfb      	adds	r3, r7, #7
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	0018      	movs	r0, r3
    313c:	4b0d      	ldr	r3, [pc, #52]	; (3174 <port_pin_set_output_level+0x50>)
    313e:	4798      	blx	r3
    3140:	0003      	movs	r3, r0
    3142:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3144:	1dfb      	adds	r3, r7, #7
    3146:	781b      	ldrb	r3, [r3, #0]
    3148:	221f      	movs	r2, #31
    314a:	4013      	ands	r3, r2
    314c:	2201      	movs	r2, #1
    314e:	409a      	lsls	r2, r3
    3150:	0013      	movs	r3, r2
    3152:	60bb      	str	r3, [r7, #8]
	if (level) {
    3154:	1dbb      	adds	r3, r7, #6
    3156:	781b      	ldrb	r3, [r3, #0]
    3158:	2b00      	cmp	r3, #0
    315a:	d003      	beq.n	3164 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    315c:	68fb      	ldr	r3, [r7, #12]
    315e:	68ba      	ldr	r2, [r7, #8]
    3160:	619a      	str	r2, [r3, #24]
}
    3162:	e002      	b.n	316a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	68ba      	ldr	r2, [r7, #8]
    3168:	615a      	str	r2, [r3, #20]
}
    316a:	46c0      	nop			; (mov r8, r8)
    316c:	46bd      	mov	sp, r7
    316e:	b004      	add	sp, #16
    3170:	bd80      	pop	{r7, pc}
    3172:	46c0      	nop			; (mov r8, r8)
    3174:	000030dd 	.word	0x000030dd

00003178 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    3178:	b580      	push	{r7, lr}
    317a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    317c:	4b04      	ldr	r3, [pc, #16]	; (3190 <chip_isr+0x18>)
    317e:	681b      	ldr	r3, [r3, #0]
    3180:	2b00      	cmp	r3, #0
    3182:	d002      	beq.n	318a <chip_isr+0x12>
		gpfIsr();
    3184:	4b02      	ldr	r3, [pc, #8]	; (3190 <chip_isr+0x18>)
    3186:	681b      	ldr	r3, [r3, #0]
    3188:	4798      	blx	r3
	}
}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	46bd      	mov	sp, r7
    318e:	bd80      	pop	{r7, pc}
    3190:	2000021c 	.word	0x2000021c

00003194 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    3194:	b580      	push	{r7, lr}
    3196:	b082      	sub	sp, #8
    3198:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    319a:	1d3b      	adds	r3, r7, #4
    319c:	0018      	movs	r0, r3
    319e:	4b10      	ldr	r3, [pc, #64]	; (31e0 <init_chip_pins+0x4c>)
    31a0:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    31a2:	1d3b      	adds	r3, r7, #4
    31a4:	2201      	movs	r2, #1
    31a6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    31a8:	1d3b      	adds	r3, r7, #4
    31aa:	0019      	movs	r1, r3
    31ac:	201b      	movs	r0, #27
    31ae:	4b0d      	ldr	r3, [pc, #52]	; (31e4 <init_chip_pins+0x50>)
    31b0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    31b2:	1d3b      	adds	r3, r7, #4
    31b4:	0019      	movs	r1, r3
    31b6:	201c      	movs	r0, #28
    31b8:	4b0a      	ldr	r3, [pc, #40]	; (31e4 <init_chip_pins+0x50>)
    31ba:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    31bc:	1d3b      	adds	r3, r7, #4
    31be:	0019      	movs	r1, r3
    31c0:	2028      	movs	r0, #40	; 0x28
    31c2:	4b08      	ldr	r3, [pc, #32]	; (31e4 <init_chip_pins+0x50>)
    31c4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    31c6:	2100      	movs	r1, #0
    31c8:	201c      	movs	r0, #28
    31ca:	4b07      	ldr	r3, [pc, #28]	; (31e8 <init_chip_pins+0x54>)
    31cc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    31ce:	2100      	movs	r1, #0
    31d0:	201b      	movs	r0, #27
    31d2:	4b05      	ldr	r3, [pc, #20]	; (31e8 <init_chip_pins+0x54>)
    31d4:	4798      	blx	r3
}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	46bd      	mov	sp, r7
    31da:	b002      	add	sp, #8
    31dc:	bd80      	pop	{r7, pc}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	00003101 	.word	0x00003101
    31e4:	000101bd 	.word	0x000101bd
    31e8:	00003125 	.word	0x00003125

000031ec <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    31ec:	b580      	push	{r7, lr}
    31ee:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    31f0:	4b0c      	ldr	r3, [pc, #48]	; (3224 <nm_bsp_init+0x38>)
    31f2:	2200      	movs	r2, #0
    31f4:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    31f6:	4b0c      	ldr	r3, [pc, #48]	; (3228 <nm_bsp_init+0x3c>)
    31f8:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    31fa:	4b0c      	ldr	r3, [pc, #48]	; (322c <nm_bsp_init+0x40>)
    31fc:	681b      	ldr	r3, [r3, #0]
    31fe:	2201      	movs	r2, #1
    3200:	4013      	ands	r3, r2
    3202:	d004      	beq.n	320e <nm_bsp_init+0x22>
    3204:	4b09      	ldr	r3, [pc, #36]	; (322c <nm_bsp_init+0x40>)
    3206:	681b      	ldr	r3, [r3, #0]
    3208:	2202      	movs	r2, #2
    320a:	4013      	ands	r3, r2
    320c:	d101      	bne.n	3212 <nm_bsp_init+0x26>
	    delay_init();
    320e:	4b08      	ldr	r3, [pc, #32]	; (3230 <nm_bsp_init+0x44>)
    3210:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    3212:	4b08      	ldr	r3, [pc, #32]	; (3234 <nm_bsp_init+0x48>)
    3214:	4798      	blx	r3

	system_interrupt_enable_global();
    3216:	4b08      	ldr	r3, [pc, #32]	; (3238 <nm_bsp_init+0x4c>)
    3218:	4798      	blx	r3

	return M2M_SUCCESS;
    321a:	2300      	movs	r3, #0
}
    321c:	0018      	movs	r0, r3
    321e:	46bd      	mov	sp, r7
    3220:	bd80      	pop	{r7, pc}
    3222:	46c0      	nop			; (mov r8, r8)
    3224:	2000021c 	.word	0x2000021c
    3228:	00003195 	.word	0x00003195
    322c:	e000e010 	.word	0xe000e010
    3230:	0000d341 	.word	0x0000d341
    3234:	0000323d 	.word	0x0000323d
    3238:	000030c1 	.word	0x000030c1

0000323c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    323c:	b580      	push	{r7, lr}
    323e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    3240:	2100      	movs	r1, #0
    3242:	201c      	movs	r0, #28
    3244:	4b0b      	ldr	r3, [pc, #44]	; (3274 <nm_bsp_reset+0x38>)
    3246:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    3248:	2100      	movs	r1, #0
    324a:	201b      	movs	r0, #27
    324c:	4b09      	ldr	r3, [pc, #36]	; (3274 <nm_bsp_reset+0x38>)
    324e:	4798      	blx	r3
	nm_bsp_sleep(1);
    3250:	2001      	movs	r0, #1
    3252:	4b09      	ldr	r3, [pc, #36]	; (3278 <nm_bsp_reset+0x3c>)
    3254:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    3256:	2101      	movs	r1, #1
    3258:	201c      	movs	r0, #28
    325a:	4b06      	ldr	r3, [pc, #24]	; (3274 <nm_bsp_reset+0x38>)
    325c:	4798      	blx	r3
	nm_bsp_sleep(10);
    325e:	200a      	movs	r0, #10
    3260:	4b05      	ldr	r3, [pc, #20]	; (3278 <nm_bsp_reset+0x3c>)
    3262:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    3264:	2101      	movs	r1, #1
    3266:	201b      	movs	r0, #27
    3268:	4b02      	ldr	r3, [pc, #8]	; (3274 <nm_bsp_reset+0x38>)
    326a:	4798      	blx	r3
}
    326c:	46c0      	nop			; (mov r8, r8)
    326e:	46bd      	mov	sp, r7
    3270:	bd80      	pop	{r7, pc}
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	00003125 	.word	0x00003125
    3278:	0000327d 	.word	0x0000327d

0000327c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    327c:	b580      	push	{r7, lr}
    327e:	b082      	sub	sp, #8
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    3284:	e002      	b.n	328c <nm_bsp_sleep+0x10>
		delay_ms(1);
    3286:	2001      	movs	r0, #1
    3288:	4b05      	ldr	r3, [pc, #20]	; (32a0 <nm_bsp_sleep+0x24>)
    328a:	4798      	blx	r3
	while (u32TimeMsec--) {
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	1e5a      	subs	r2, r3, #1
    3290:	607a      	str	r2, [r7, #4]
    3292:	2b00      	cmp	r3, #0
    3294:	d1f7      	bne.n	3286 <nm_bsp_sleep+0xa>
	}
}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	46bd      	mov	sp, r7
    329a:	b002      	add	sp, #8
    329c:	bd80      	pop	{r7, pc}
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	0000d3c9 	.word	0x0000d3c9

000032a4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	b086      	sub	sp, #24
    32a8:	af00      	add	r7, sp, #0
    32aa:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    32ac:	4b15      	ldr	r3, [pc, #84]	; (3304 <nm_bsp_register_isr+0x60>)
    32ae:	687a      	ldr	r2, [r7, #4]
    32b0:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    32b2:	230c      	movs	r3, #12
    32b4:	18fb      	adds	r3, r7, r3
    32b6:	0018      	movs	r0, r3
    32b8:	4b13      	ldr	r3, [pc, #76]	; (3308 <nm_bsp_register_isr+0x64>)
    32ba:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    32bc:	230c      	movs	r3, #12
    32be:	18fb      	adds	r3, r7, r3
    32c0:	2229      	movs	r2, #41	; 0x29
    32c2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    32c4:	230c      	movs	r3, #12
    32c6:	18fb      	adds	r3, r7, r3
    32c8:	2200      	movs	r2, #0
    32ca:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    32cc:	230c      	movs	r3, #12
    32ce:	18fb      	adds	r3, r7, r3
    32d0:	2201      	movs	r2, #1
    32d2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    32d4:	230c      	movs	r3, #12
    32d6:	18fb      	adds	r3, r7, r3
    32d8:	2202      	movs	r2, #2
    32da:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    32dc:	230c      	movs	r3, #12
    32de:	18fb      	adds	r3, r7, r3
    32e0:	0019      	movs	r1, r3
    32e2:	2009      	movs	r0, #9
    32e4:	4b09      	ldr	r3, [pc, #36]	; (330c <nm_bsp_register_isr+0x68>)
    32e6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    32e8:	4b09      	ldr	r3, [pc, #36]	; (3310 <nm_bsp_register_isr+0x6c>)
    32ea:	2200      	movs	r2, #0
    32ec:	2109      	movs	r1, #9
    32ee:	0018      	movs	r0, r3
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <nm_bsp_register_isr+0x70>)
    32f2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    32f4:	2100      	movs	r1, #0
    32f6:	2009      	movs	r0, #9
    32f8:	4b07      	ldr	r3, [pc, #28]	; (3318 <nm_bsp_register_isr+0x74>)
    32fa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    32fc:	46c0      	nop			; (mov r8, r8)
    32fe:	46bd      	mov	sp, r7
    3300:	b006      	add	sp, #24
    3302:	bd80      	pop	{r7, pc}
    3304:	2000021c 	.word	0x2000021c
    3308:	00008fbd 	.word	0x00008fbd
    330c:	00008ff1 	.word	0x00008ff1
    3310:	00003179 	.word	0x00003179
    3314:	00008bbd 	.word	0x00008bbd
    3318:	00008c21 	.word	0x00008c21

0000331c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    331c:	b580      	push	{r7, lr}
    331e:	b082      	sub	sp, #8
    3320:	af00      	add	r7, sp, #0
    3322:	0002      	movs	r2, r0
    3324:	1dfb      	adds	r3, r7, #7
    3326:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    3328:	1dfb      	adds	r3, r7, #7
    332a:	781b      	ldrb	r3, [r3, #0]
    332c:	2b00      	cmp	r3, #0
    332e:	d004      	beq.n	333a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    3330:	2100      	movs	r1, #0
    3332:	2009      	movs	r0, #9
    3334:	4b05      	ldr	r3, [pc, #20]	; (334c <nm_bsp_interrupt_ctrl+0x30>)
    3336:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    3338:	e003      	b.n	3342 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    333a:	2100      	movs	r1, #0
    333c:	2009      	movs	r0, #9
    333e:	4b04      	ldr	r3, [pc, #16]	; (3350 <nm_bsp_interrupt_ctrl+0x34>)
    3340:	4798      	blx	r3
}
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	46bd      	mov	sp, r7
    3346:	b002      	add	sp, #8
    3348:	bd80      	pop	{r7, pc}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	00008c21 	.word	0x00008c21
    3350:	00008c69 	.word	0x00008c69

00003354 <system_pinmux_get_group_from_gpio_pin>:
{
    3354:	b580      	push	{r7, lr}
    3356:	b084      	sub	sp, #16
    3358:	af00      	add	r7, sp, #0
    335a:	0002      	movs	r2, r0
    335c:	1dfb      	adds	r3, r7, #7
    335e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3360:	230f      	movs	r3, #15
    3362:	18fb      	adds	r3, r7, r3
    3364:	1dfa      	adds	r2, r7, #7
    3366:	7812      	ldrb	r2, [r2, #0]
    3368:	09d2      	lsrs	r2, r2, #7
    336a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    336c:	230e      	movs	r3, #14
    336e:	18fb      	adds	r3, r7, r3
    3370:	1dfa      	adds	r2, r7, #7
    3372:	7812      	ldrb	r2, [r2, #0]
    3374:	0952      	lsrs	r2, r2, #5
    3376:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3378:	4b0d      	ldr	r3, [pc, #52]	; (33b0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    337a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    337c:	230f      	movs	r3, #15
    337e:	18fb      	adds	r3, r7, r3
    3380:	781b      	ldrb	r3, [r3, #0]
    3382:	2b00      	cmp	r3, #0
    3384:	d10f      	bne.n	33a6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3386:	230f      	movs	r3, #15
    3388:	18fb      	adds	r3, r7, r3
    338a:	781b      	ldrb	r3, [r3, #0]
    338c:	009b      	lsls	r3, r3, #2
    338e:	2210      	movs	r2, #16
    3390:	4694      	mov	ip, r2
    3392:	44bc      	add	ip, r7
    3394:	4463      	add	r3, ip
    3396:	3b08      	subs	r3, #8
    3398:	681a      	ldr	r2, [r3, #0]
    339a:	230e      	movs	r3, #14
    339c:	18fb      	adds	r3, r7, r3
    339e:	781b      	ldrb	r3, [r3, #0]
    33a0:	01db      	lsls	r3, r3, #7
    33a2:	18d3      	adds	r3, r2, r3
    33a4:	e000      	b.n	33a8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    33a6:	2300      	movs	r3, #0
}
    33a8:	0018      	movs	r0, r3
    33aa:	46bd      	mov	sp, r7
    33ac:	b004      	add	sp, #16
    33ae:	bd80      	pop	{r7, pc}
    33b0:	41004400 	.word	0x41004400

000033b4 <system_interrupt_enable>:
{
    33b4:	b580      	push	{r7, lr}
    33b6:	b082      	sub	sp, #8
    33b8:	af00      	add	r7, sp, #0
    33ba:	0002      	movs	r2, r0
    33bc:	1dfb      	adds	r3, r7, #7
    33be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    33c0:	4b06      	ldr	r3, [pc, #24]	; (33dc <system_interrupt_enable+0x28>)
    33c2:	1dfa      	adds	r2, r7, #7
    33c4:	7812      	ldrb	r2, [r2, #0]
    33c6:	0011      	movs	r1, r2
    33c8:	221f      	movs	r2, #31
    33ca:	400a      	ands	r2, r1
    33cc:	2101      	movs	r1, #1
    33ce:	4091      	lsls	r1, r2
    33d0:	000a      	movs	r2, r1
    33d2:	601a      	str	r2, [r3, #0]
}
    33d4:	46c0      	nop			; (mov r8, r8)
    33d6:	46bd      	mov	sp, r7
    33d8:	b002      	add	sp, #8
    33da:	bd80      	pop	{r7, pc}
    33dc:	e000e100 	.word	0xe000e100

000033e0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    33e0:	b580      	push	{r7, lr}
    33e2:	b082      	sub	sp, #8
    33e4:	af00      	add	r7, sp, #0
    33e6:	0002      	movs	r2, r0
    33e8:	1dfb      	adds	r3, r7, #7
    33ea:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    33ec:	4a07      	ldr	r2, [pc, #28]	; (340c <system_interrupt_disable+0x2c>)
    33ee:	1dfb      	adds	r3, r7, #7
    33f0:	781b      	ldrb	r3, [r3, #0]
    33f2:	0019      	movs	r1, r3
    33f4:	231f      	movs	r3, #31
    33f6:	400b      	ands	r3, r1
    33f8:	2101      	movs	r1, #1
    33fa:	4099      	lsls	r1, r3
    33fc:	000b      	movs	r3, r1
    33fe:	0019      	movs	r1, r3
    3400:	2380      	movs	r3, #128	; 0x80
    3402:	50d1      	str	r1, [r2, r3]
}
    3404:	46c0      	nop			; (mov r8, r8)
    3406:	46bd      	mov	sp, r7
    3408:	b002      	add	sp, #8
    340a:	bd80      	pop	{r7, pc}
    340c:	e000e100 	.word	0xe000e100

00003410 <port_get_group_from_gpio_pin>:
{
    3410:	b580      	push	{r7, lr}
    3412:	b082      	sub	sp, #8
    3414:	af00      	add	r7, sp, #0
    3416:	0002      	movs	r2, r0
    3418:	1dfb      	adds	r3, r7, #7
    341a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    341c:	1dfb      	adds	r3, r7, #7
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	0018      	movs	r0, r3
    3422:	4b03      	ldr	r3, [pc, #12]	; (3430 <port_get_group_from_gpio_pin+0x20>)
    3424:	4798      	blx	r3
    3426:	0003      	movs	r3, r0
}
    3428:	0018      	movs	r0, r3
    342a:	46bd      	mov	sp, r7
    342c:	b002      	add	sp, #8
    342e:	bd80      	pop	{r7, pc}
    3430:	00003355 	.word	0x00003355

00003434 <port_get_config_defaults>:
{
    3434:	b580      	push	{r7, lr}
    3436:	b082      	sub	sp, #8
    3438:	af00      	add	r7, sp, #0
    343a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    343c:	687b      	ldr	r3, [r7, #4]
    343e:	2200      	movs	r2, #0
    3440:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3442:	687b      	ldr	r3, [r7, #4]
    3444:	2201      	movs	r2, #1
    3446:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	2200      	movs	r2, #0
    344c:	709a      	strb	r2, [r3, #2]
}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	46bd      	mov	sp, r7
    3452:	b002      	add	sp, #8
    3454:	bd80      	pop	{r7, pc}
	...

00003458 <port_pin_set_output_level>:
{
    3458:	b580      	push	{r7, lr}
    345a:	b084      	sub	sp, #16
    345c:	af00      	add	r7, sp, #0
    345e:	0002      	movs	r2, r0
    3460:	1dfb      	adds	r3, r7, #7
    3462:	701a      	strb	r2, [r3, #0]
    3464:	1dbb      	adds	r3, r7, #6
    3466:	1c0a      	adds	r2, r1, #0
    3468:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    346a:	1dfb      	adds	r3, r7, #7
    346c:	781b      	ldrb	r3, [r3, #0]
    346e:	0018      	movs	r0, r3
    3470:	4b0d      	ldr	r3, [pc, #52]	; (34a8 <port_pin_set_output_level+0x50>)
    3472:	4798      	blx	r3
    3474:	0003      	movs	r3, r0
    3476:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3478:	1dfb      	adds	r3, r7, #7
    347a:	781b      	ldrb	r3, [r3, #0]
    347c:	221f      	movs	r2, #31
    347e:	4013      	ands	r3, r2
    3480:	2201      	movs	r2, #1
    3482:	409a      	lsls	r2, r3
    3484:	0013      	movs	r3, r2
    3486:	60bb      	str	r3, [r7, #8]
	if (level) {
    3488:	1dbb      	adds	r3, r7, #6
    348a:	781b      	ldrb	r3, [r3, #0]
    348c:	2b00      	cmp	r3, #0
    348e:	d003      	beq.n	3498 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3490:	68fb      	ldr	r3, [r7, #12]
    3492:	68ba      	ldr	r2, [r7, #8]
    3494:	619a      	str	r2, [r3, #24]
}
    3496:	e002      	b.n	349e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3498:	68fb      	ldr	r3, [r7, #12]
    349a:	68ba      	ldr	r2, [r7, #8]
    349c:	615a      	str	r2, [r3, #20]
}
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	46bd      	mov	sp, r7
    34a2:	b004      	add	sp, #16
    34a4:	bd80      	pop	{r7, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	00003411 	.word	0x00003411

000034ac <spi_is_syncing>:
{
    34ac:	b580      	push	{r7, lr}
    34ae:	b084      	sub	sp, #16
    34b0:	af00      	add	r7, sp, #0
    34b2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	681b      	ldr	r3, [r3, #0]
    34b8:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    34ba:	68fb      	ldr	r3, [r7, #12]
    34bc:	69db      	ldr	r3, [r3, #28]
    34be:	1e5a      	subs	r2, r3, #1
    34c0:	4193      	sbcs	r3, r2
    34c2:	b2db      	uxtb	r3, r3
}
    34c4:	0018      	movs	r0, r3
    34c6:	46bd      	mov	sp, r7
    34c8:	b004      	add	sp, #16
    34ca:	bd80      	pop	{r7, pc}

000034cc <spi_get_config_defaults>:
{
    34cc:	b580      	push	{r7, lr}
    34ce:	b082      	sub	sp, #8
    34d0:	af00      	add	r7, sp, #0
    34d2:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	2201      	movs	r2, #1
    34d8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    34da:	687b      	ldr	r3, [r7, #4]
    34dc:	2200      	movs	r2, #0
    34de:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	2200      	movs	r2, #0
    34e4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	22c0      	movs	r2, #192	; 0xc0
    34ea:	0392      	lsls	r2, r2, #14
    34ec:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	2200      	movs	r2, #0
    34f2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    34f4:	687b      	ldr	r3, [r7, #4]
    34f6:	2200      	movs	r2, #0
    34f8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	2201      	movs	r2, #1
    34fe:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    3500:	687b      	ldr	r3, [r7, #4]
    3502:	2201      	movs	r2, #1
    3504:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    3506:	687b      	ldr	r3, [r7, #4]
    3508:	2200      	movs	r2, #0
    350a:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	2224      	movs	r2, #36	; 0x24
    3510:	2100      	movs	r1, #0
    3512:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	3318      	adds	r3, #24
    3518:	220c      	movs	r2, #12
    351a:	2100      	movs	r1, #0
    351c:	0018      	movs	r0, r3
    351e:	4b0a      	ldr	r3, [pc, #40]	; (3548 <spi_get_config_defaults+0x7c>)
    3520:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	4a09      	ldr	r2, [pc, #36]	; (354c <spi_get_config_defaults+0x80>)
    3526:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	2200      	movs	r2, #0
    352c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	2200      	movs	r2, #0
    3532:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    3534:	687b      	ldr	r3, [r7, #4]
    3536:	2200      	movs	r2, #0
    3538:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	2200      	movs	r2, #0
    353e:	635a      	str	r2, [r3, #52]	; 0x34
};
    3540:	46c0      	nop			; (mov r8, r8)
    3542:	46bd      	mov	sp, r7
    3544:	b002      	add	sp, #8
    3546:	bd80      	pop	{r7, pc}
    3548:	0001252f 	.word	0x0001252f
    354c:	000186a0 	.word	0x000186a0

00003550 <spi_slave_inst_get_config_defaults>:
{
    3550:	b580      	push	{r7, lr}
    3552:	b082      	sub	sp, #8
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	220a      	movs	r2, #10
    355c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	2200      	movs	r2, #0
    3562:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    3564:	687b      	ldr	r3, [r7, #4]
    3566:	2200      	movs	r2, #0
    3568:	709a      	strb	r2, [r3, #2]
}
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	46bd      	mov	sp, r7
    356e:	b002      	add	sp, #8
    3570:	bd80      	pop	{r7, pc}
	...

00003574 <spi_attach_slave>:
{
    3574:	b580      	push	{r7, lr}
    3576:	b084      	sub	sp, #16
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
    357c:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    357e:	683b      	ldr	r3, [r7, #0]
    3580:	781a      	ldrb	r2, [r3, #0]
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    3586:	683b      	ldr	r3, [r7, #0]
    3588:	785a      	ldrb	r2, [r3, #1]
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    358e:	683b      	ldr	r3, [r7, #0]
    3590:	789a      	ldrb	r2, [r3, #2]
    3592:	687b      	ldr	r3, [r7, #4]
    3594:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    3596:	230c      	movs	r3, #12
    3598:	18fb      	adds	r3, r7, r3
    359a:	0018      	movs	r0, r3
    359c:	4b0b      	ldr	r3, [pc, #44]	; (35cc <spi_attach_slave+0x58>)
    359e:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    35a0:	230c      	movs	r3, #12
    35a2:	18fb      	adds	r3, r7, r3
    35a4:	2201      	movs	r2, #1
    35a6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	781b      	ldrb	r3, [r3, #0]
    35ac:	220c      	movs	r2, #12
    35ae:	18ba      	adds	r2, r7, r2
    35b0:	0011      	movs	r1, r2
    35b2:	0018      	movs	r0, r3
    35b4:	4b06      	ldr	r3, [pc, #24]	; (35d0 <spi_attach_slave+0x5c>)
    35b6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	2101      	movs	r1, #1
    35be:	0018      	movs	r0, r3
    35c0:	4b04      	ldr	r3, [pc, #16]	; (35d4 <spi_attach_slave+0x60>)
    35c2:	4798      	blx	r3
}
    35c4:	46c0      	nop			; (mov r8, r8)
    35c6:	46bd      	mov	sp, r7
    35c8:	b004      	add	sp, #16
    35ca:	bd80      	pop	{r7, pc}
    35cc:	00003435 	.word	0x00003435
    35d0:	000101bd 	.word	0x000101bd
    35d4:	00003459 	.word	0x00003459

000035d8 <spi_enable>:
{
    35d8:	b580      	push	{r7, lr}
    35da:	b084      	sub	sp, #16
    35dc:	af00      	add	r7, sp, #0
    35de:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	681b      	ldr	r3, [r3, #0]
    35e4:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	681b      	ldr	r3, [r3, #0]
    35ea:	0018      	movs	r0, r3
    35ec:	4b0b      	ldr	r3, [pc, #44]	; (361c <spi_enable+0x44>)
    35ee:	4798      	blx	r3
    35f0:	0003      	movs	r3, r0
    35f2:	0018      	movs	r0, r3
    35f4:	4b0a      	ldr	r3, [pc, #40]	; (3620 <spi_enable+0x48>)
    35f6:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    35f8:	46c0      	nop			; (mov r8, r8)
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	0018      	movs	r0, r3
    35fe:	4b09      	ldr	r3, [pc, #36]	; (3624 <spi_enable+0x4c>)
    3600:	4798      	blx	r3
    3602:	1e03      	subs	r3, r0, #0
    3604:	d1f9      	bne.n	35fa <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3606:	68fb      	ldr	r3, [r7, #12]
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	2202      	movs	r2, #2
    360c:	431a      	orrs	r2, r3
    360e:	68fb      	ldr	r3, [r7, #12]
    3610:	601a      	str	r2, [r3, #0]
}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	46bd      	mov	sp, r7
    3616:	b004      	add	sp, #16
    3618:	bd80      	pop	{r7, pc}
    361a:	46c0      	nop			; (mov r8, r8)
    361c:	0000fee1 	.word	0x0000fee1
    3620:	000033b5 	.word	0x000033b5
    3624:	000034ad 	.word	0x000034ad

00003628 <spi_disable>:
{
    3628:	b580      	push	{r7, lr}
    362a:	b084      	sub	sp, #16
    362c:	af00      	add	r7, sp, #0
    362e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3630:	687b      	ldr	r3, [r7, #4]
    3632:	681b      	ldr	r3, [r3, #0]
    3634:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	681b      	ldr	r3, [r3, #0]
    363a:	0018      	movs	r0, r3
    363c:	4b0e      	ldr	r3, [pc, #56]	; (3678 <spi_disable+0x50>)
    363e:	4798      	blx	r3
    3640:	0003      	movs	r3, r0
    3642:	0018      	movs	r0, r3
    3644:	4b0d      	ldr	r3, [pc, #52]	; (367c <spi_disable+0x54>)
    3646:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    3648:	46c0      	nop			; (mov r8, r8)
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	0018      	movs	r0, r3
    364e:	4b0c      	ldr	r3, [pc, #48]	; (3680 <spi_disable+0x58>)
    3650:	4798      	blx	r3
    3652:	1e03      	subs	r3, r0, #0
    3654:	d1f9      	bne.n	364a <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3656:	68fb      	ldr	r3, [r7, #12]
    3658:	228f      	movs	r2, #143	; 0x8f
    365a:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    365c:	68fb      	ldr	r3, [r7, #12]
    365e:	228f      	movs	r2, #143	; 0x8f
    3660:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3662:	68fb      	ldr	r3, [r7, #12]
    3664:	681b      	ldr	r3, [r3, #0]
    3666:	2202      	movs	r2, #2
    3668:	4393      	bics	r3, r2
    366a:	001a      	movs	r2, r3
    366c:	68fb      	ldr	r3, [r7, #12]
    366e:	601a      	str	r2, [r3, #0]
}
    3670:	46c0      	nop			; (mov r8, r8)
    3672:	46bd      	mov	sp, r7
    3674:	b004      	add	sp, #16
    3676:	bd80      	pop	{r7, pc}
    3678:	0000fee1 	.word	0x0000fee1
    367c:	000033e1 	.word	0x000033e1
    3680:	000034ad 	.word	0x000034ad

00003684 <spi_is_write_complete>:
{
    3684:	b580      	push	{r7, lr}
    3686:	b084      	sub	sp, #16
    3688:	af00      	add	r7, sp, #0
    368a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	681b      	ldr	r3, [r3, #0]
    3690:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3692:	68fb      	ldr	r3, [r7, #12]
    3694:	7e1b      	ldrb	r3, [r3, #24]
    3696:	b2db      	uxtb	r3, r3
    3698:	001a      	movs	r2, r3
    369a:	2302      	movs	r3, #2
    369c:	4013      	ands	r3, r2
    369e:	1e5a      	subs	r2, r3, #1
    36a0:	4193      	sbcs	r3, r2
    36a2:	b2db      	uxtb	r3, r3
}
    36a4:	0018      	movs	r0, r3
    36a6:	46bd      	mov	sp, r7
    36a8:	b004      	add	sp, #16
    36aa:	bd80      	pop	{r7, pc}

000036ac <spi_is_ready_to_write>:
{
    36ac:	b580      	push	{r7, lr}
    36ae:	b084      	sub	sp, #16
    36b0:	af00      	add	r7, sp, #0
    36b2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    36b4:	687b      	ldr	r3, [r7, #4]
    36b6:	681b      	ldr	r3, [r3, #0]
    36b8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    36ba:	68fb      	ldr	r3, [r7, #12]
    36bc:	7e1b      	ldrb	r3, [r3, #24]
    36be:	b2db      	uxtb	r3, r3
    36c0:	001a      	movs	r2, r3
    36c2:	2301      	movs	r3, #1
    36c4:	4013      	ands	r3, r2
    36c6:	1e5a      	subs	r2, r3, #1
    36c8:	4193      	sbcs	r3, r2
    36ca:	b2db      	uxtb	r3, r3
}
    36cc:	0018      	movs	r0, r3
    36ce:	46bd      	mov	sp, r7
    36d0:	b004      	add	sp, #16
    36d2:	bd80      	pop	{r7, pc}

000036d4 <spi_is_ready_to_read>:
{
    36d4:	b580      	push	{r7, lr}
    36d6:	b084      	sub	sp, #16
    36d8:	af00      	add	r7, sp, #0
    36da:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    36dc:	687b      	ldr	r3, [r7, #4]
    36de:	681b      	ldr	r3, [r3, #0]
    36e0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    36e2:	68fb      	ldr	r3, [r7, #12]
    36e4:	7e1b      	ldrb	r3, [r3, #24]
    36e6:	b2db      	uxtb	r3, r3
    36e8:	001a      	movs	r2, r3
    36ea:	2304      	movs	r3, #4
    36ec:	4013      	ands	r3, r2
    36ee:	1e5a      	subs	r2, r3, #1
    36f0:	4193      	sbcs	r3, r2
    36f2:	b2db      	uxtb	r3, r3
}
    36f4:	0018      	movs	r0, r3
    36f6:	46bd      	mov	sp, r7
    36f8:	b004      	add	sp, #16
    36fa:	bd80      	pop	{r7, pc}

000036fc <spi_write>:
{
    36fc:	b580      	push	{r7, lr}
    36fe:	b084      	sub	sp, #16
    3700:	af00      	add	r7, sp, #0
    3702:	6078      	str	r0, [r7, #4]
    3704:	000a      	movs	r2, r1
    3706:	1cbb      	adds	r3, r7, #2
    3708:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	0018      	movs	r0, r3
    3714:	4b0a      	ldr	r3, [pc, #40]	; (3740 <spi_write+0x44>)
    3716:	4798      	blx	r3
    3718:	0003      	movs	r3, r0
    371a:	001a      	movs	r2, r3
    371c:	2301      	movs	r3, #1
    371e:	4053      	eors	r3, r2
    3720:	b2db      	uxtb	r3, r3
    3722:	2b00      	cmp	r3, #0
    3724:	d001      	beq.n	372a <spi_write+0x2e>
		return STATUS_BUSY;
    3726:	2305      	movs	r3, #5
    3728:	e006      	b.n	3738 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    372a:	1cbb      	adds	r3, r7, #2
    372c:	881b      	ldrh	r3, [r3, #0]
    372e:	05db      	lsls	r3, r3, #23
    3730:	0dda      	lsrs	r2, r3, #23
    3732:	68fb      	ldr	r3, [r7, #12]
    3734:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    3736:	2300      	movs	r3, #0
}
    3738:	0018      	movs	r0, r3
    373a:	46bd      	mov	sp, r7
    373c:	b004      	add	sp, #16
    373e:	bd80      	pop	{r7, pc}
    3740:	000036ad 	.word	0x000036ad

00003744 <spi_read>:
{
    3744:	b580      	push	{r7, lr}
    3746:	b084      	sub	sp, #16
    3748:	af00      	add	r7, sp, #0
    374a:	6078      	str	r0, [r7, #4]
    374c:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	681b      	ldr	r3, [r3, #0]
    3752:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	0018      	movs	r0, r3
    3758:	4b1b      	ldr	r3, [pc, #108]	; (37c8 <spi_read+0x84>)
    375a:	4798      	blx	r3
    375c:	0003      	movs	r3, r0
    375e:	001a      	movs	r2, r3
    3760:	2301      	movs	r3, #1
    3762:	4053      	eors	r3, r2
    3764:	b2db      	uxtb	r3, r3
    3766:	2b00      	cmp	r3, #0
    3768:	d001      	beq.n	376e <spi_read+0x2a>
		return STATUS_ERR_IO;
    376a:	2310      	movs	r3, #16
    376c:	e027      	b.n	37be <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    376e:	230f      	movs	r3, #15
    3770:	18fb      	adds	r3, r7, r3
    3772:	2200      	movs	r2, #0
    3774:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3776:	68bb      	ldr	r3, [r7, #8]
    3778:	8b5b      	ldrh	r3, [r3, #26]
    377a:	b29b      	uxth	r3, r3
    377c:	001a      	movs	r2, r3
    377e:	2304      	movs	r3, #4
    3780:	4013      	ands	r3, r2
    3782:	d006      	beq.n	3792 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3784:	230f      	movs	r3, #15
    3786:	18fb      	adds	r3, r7, r3
    3788:	221e      	movs	r2, #30
    378a:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    378c:	68bb      	ldr	r3, [r7, #8]
    378e:	2204      	movs	r2, #4
    3790:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3792:	687b      	ldr	r3, [r7, #4]
    3794:	799b      	ldrb	r3, [r3, #6]
    3796:	2b01      	cmp	r3, #1
    3798:	d108      	bne.n	37ac <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    379a:	68bb      	ldr	r3, [r7, #8]
    379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    379e:	b29b      	uxth	r3, r3
    37a0:	05db      	lsls	r3, r3, #23
    37a2:	0ddb      	lsrs	r3, r3, #23
    37a4:	b29a      	uxth	r2, r3
    37a6:	683b      	ldr	r3, [r7, #0]
    37a8:	801a      	strh	r2, [r3, #0]
    37aa:	e005      	b.n	37b8 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    37ac:	68bb      	ldr	r3, [r7, #8]
    37ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37b0:	b2db      	uxtb	r3, r3
    37b2:	b29a      	uxth	r2, r3
    37b4:	683b      	ldr	r3, [r7, #0]
    37b6:	801a      	strh	r2, [r3, #0]
	return retval;
    37b8:	230f      	movs	r3, #15
    37ba:	18fb      	adds	r3, r7, r3
    37bc:	781b      	ldrb	r3, [r3, #0]
}
    37be:	0018      	movs	r0, r3
    37c0:	46bd      	mov	sp, r7
    37c2:	b004      	add	sp, #16
    37c4:	bd80      	pop	{r7, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	000036d5 	.word	0x000036d5

000037cc <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    37cc:	b580      	push	{r7, lr}
    37ce:	b086      	sub	sp, #24
    37d0:	af00      	add	r7, sp, #0
    37d2:	60f8      	str	r0, [r7, #12]
    37d4:	60b9      	str	r1, [r7, #8]
    37d6:	1dbb      	adds	r3, r7, #6
    37d8:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    37da:	2313      	movs	r3, #19
    37dc:	18fb      	adds	r3, r7, r3
    37de:	2200      	movs	r2, #0
    37e0:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    37e2:	2317      	movs	r3, #23
    37e4:	18fb      	adds	r3, r7, r3
    37e6:	2200      	movs	r2, #0
    37e8:	701a      	strb	r2, [r3, #0]
    37ea:	2316      	movs	r3, #22
    37ec:	18fb      	adds	r3, r7, r3
    37ee:	2200      	movs	r2, #0
    37f0:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    37f2:	2314      	movs	r3, #20
    37f4:	18fb      	adds	r3, r7, r3
    37f6:	2200      	movs	r2, #0
    37f8:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    37fa:	2310      	movs	r3, #16
    37fc:	18fb      	adds	r3, r7, r3
    37fe:	2200      	movs	r2, #0
    3800:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    3802:	68bb      	ldr	r3, [r7, #8]
    3804:	2b00      	cmp	r3, #0
    3806:	d102      	bne.n	380e <spi_rw+0x42>
    3808:	68fb      	ldr	r3, [r7, #12]
    380a:	2b00      	cmp	r3, #0
    380c:	d003      	beq.n	3816 <spi_rw+0x4a>
    380e:	1dbb      	adds	r3, r7, #6
    3810:	881b      	ldrh	r3, [r3, #0]
    3812:	2b00      	cmp	r3, #0
    3814:	d102      	bne.n	381c <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    3816:	230f      	movs	r3, #15
    3818:	425b      	negs	r3, r3
    381a:	e07e      	b.n	391a <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    381c:	68fb      	ldr	r3, [r7, #12]
    381e:	2b00      	cmp	r3, #0
    3820:	d106      	bne.n	3830 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    3822:	2313      	movs	r3, #19
    3824:	18fb      	adds	r3, r7, r3
    3826:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    3828:	2317      	movs	r3, #23
    382a:	18fb      	adds	r3, r7, r3
    382c:	2201      	movs	r2, #1
    382e:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    3830:	68bb      	ldr	r3, [r7, #8]
    3832:	2b00      	cmp	r3, #0
    3834:	d106      	bne.n	3844 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    3836:	2313      	movs	r3, #19
    3838:	18fb      	adds	r3, r7, r3
    383a:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    383c:	2316      	movs	r3, #22
    383e:	18fb      	adds	r3, r7, r3
    3840:	2201      	movs	r2, #1
    3842:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    3844:	4937      	ldr	r1, [pc, #220]	; (3924 <spi_rw+0x158>)
    3846:	4b38      	ldr	r3, [pc, #224]	; (3928 <spi_rw+0x15c>)
    3848:	2201      	movs	r2, #1
    384a:	0018      	movs	r0, r3
    384c:	4b37      	ldr	r3, [pc, #220]	; (392c <spi_rw+0x160>)
    384e:	4798      	blx	r3

	while (u16Sz) {
    3850:	e04c      	b.n	38ec <spi_rw+0x120>
		txd_data = *pu8Mosi;
    3852:	68fb      	ldr	r3, [r7, #12]
    3854:	781a      	ldrb	r2, [r3, #0]
    3856:	2314      	movs	r3, #20
    3858:	18fb      	adds	r3, r7, r3
    385a:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    385c:	46c0      	nop			; (mov r8, r8)
    385e:	4b32      	ldr	r3, [pc, #200]	; (3928 <spi_rw+0x15c>)
    3860:	0018      	movs	r0, r3
    3862:	4b33      	ldr	r3, [pc, #204]	; (3930 <spi_rw+0x164>)
    3864:	4798      	blx	r3
    3866:	0003      	movs	r3, r0
    3868:	001a      	movs	r2, r3
    386a:	2301      	movs	r3, #1
    386c:	4053      	eors	r3, r2
    386e:	b2db      	uxtb	r3, r3
    3870:	2b00      	cmp	r3, #0
    3872:	d1f4      	bne.n	385e <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    3874:	46c0      	nop			; (mov r8, r8)
    3876:	2314      	movs	r3, #20
    3878:	18fb      	adds	r3, r7, r3
    387a:	881a      	ldrh	r2, [r3, #0]
    387c:	4b2a      	ldr	r3, [pc, #168]	; (3928 <spi_rw+0x15c>)
    387e:	0011      	movs	r1, r2
    3880:	0018      	movs	r0, r3
    3882:	4b2c      	ldr	r3, [pc, #176]	; (3934 <spi_rw+0x168>)
    3884:	4798      	blx	r3
    3886:	1e03      	subs	r3, r0, #0
    3888:	d1f5      	bne.n	3876 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    388a:	46c0      	nop			; (mov r8, r8)
    388c:	4b26      	ldr	r3, [pc, #152]	; (3928 <spi_rw+0x15c>)
    388e:	0018      	movs	r0, r3
    3890:	4b29      	ldr	r3, [pc, #164]	; (3938 <spi_rw+0x16c>)
    3892:	4798      	blx	r3
    3894:	0003      	movs	r3, r0
    3896:	001a      	movs	r2, r3
    3898:	2301      	movs	r3, #1
    389a:	4053      	eors	r3, r2
    389c:	b2db      	uxtb	r3, r3
    389e:	2b00      	cmp	r3, #0
    38a0:	d1f4      	bne.n	388c <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	2310      	movs	r3, #16
    38a6:	18fa      	adds	r2, r7, r3
    38a8:	4b1f      	ldr	r3, [pc, #124]	; (3928 <spi_rw+0x15c>)
    38aa:	0011      	movs	r1, r2
    38ac:	0018      	movs	r0, r3
    38ae:	4b23      	ldr	r3, [pc, #140]	; (393c <spi_rw+0x170>)
    38b0:	4798      	blx	r3
    38b2:	1e03      	subs	r3, r0, #0
    38b4:	d1f6      	bne.n	38a4 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    38b6:	2310      	movs	r3, #16
    38b8:	18fb      	adds	r3, r7, r3
    38ba:	881b      	ldrh	r3, [r3, #0]
    38bc:	b2da      	uxtb	r2, r3
    38be:	68bb      	ldr	r3, [r7, #8]
    38c0:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    38c2:	1dbb      	adds	r3, r7, #6
    38c4:	881a      	ldrh	r2, [r3, #0]
    38c6:	1dbb      	adds	r3, r7, #6
    38c8:	3a01      	subs	r2, #1
    38ca:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    38cc:	2316      	movs	r3, #22
    38ce:	18fb      	adds	r3, r7, r3
    38d0:	781b      	ldrb	r3, [r3, #0]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d102      	bne.n	38dc <spi_rw+0x110>
			pu8Miso++;
    38d6:	68bb      	ldr	r3, [r7, #8]
    38d8:	3301      	adds	r3, #1
    38da:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    38dc:	2317      	movs	r3, #23
    38de:	18fb      	adds	r3, r7, r3
    38e0:	781b      	ldrb	r3, [r3, #0]
    38e2:	2b00      	cmp	r3, #0
    38e4:	d102      	bne.n	38ec <spi_rw+0x120>
			pu8Mosi++;
    38e6:	68fb      	ldr	r3, [r7, #12]
    38e8:	3301      	adds	r3, #1
    38ea:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    38ec:	1dbb      	adds	r3, r7, #6
    38ee:	881b      	ldrh	r3, [r3, #0]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d1ae      	bne.n	3852 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    38f4:	46c0      	nop			; (mov r8, r8)
    38f6:	4b0c      	ldr	r3, [pc, #48]	; (3928 <spi_rw+0x15c>)
    38f8:	0018      	movs	r0, r3
    38fa:	4b11      	ldr	r3, [pc, #68]	; (3940 <spi_rw+0x174>)
    38fc:	4798      	blx	r3
    38fe:	0003      	movs	r3, r0
    3900:	001a      	movs	r2, r3
    3902:	2301      	movs	r3, #1
    3904:	4053      	eors	r3, r2
    3906:	b2db      	uxtb	r3, r3
    3908:	2b00      	cmp	r3, #0
    390a:	d1f4      	bne.n	38f6 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    390c:	4905      	ldr	r1, [pc, #20]	; (3924 <spi_rw+0x158>)
    390e:	4b06      	ldr	r3, [pc, #24]	; (3928 <spi_rw+0x15c>)
    3910:	2200      	movs	r2, #0
    3912:	0018      	movs	r0, r3
    3914:	4b05      	ldr	r3, [pc, #20]	; (392c <spi_rw+0x160>)
    3916:	4798      	blx	r3

	return M2M_SUCCESS;
    3918:	2300      	movs	r3, #0
}
    391a:	0018      	movs	r0, r3
    391c:	46bd      	mov	sp, r7
    391e:	b006      	add	sp, #24
    3920:	bd80      	pop	{r7, pc}
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	200005b0 	.word	0x200005b0
    3928:	200005b4 	.word	0x200005b4
    392c:	00009d89 	.word	0x00009d89
    3930:	000036ad 	.word	0x000036ad
    3934:	000036fd 	.word	0x000036fd
    3938:	000036d5 	.word	0x000036d5
    393c:	00003745 	.word	0x00003745
    3940:	00003685 	.word	0x00003685

00003944 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    3944:	b580      	push	{r7, lr}
    3946:	b092      	sub	sp, #72	; 0x48
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    394c:	2347      	movs	r3, #71	; 0x47
    394e:	18fb      	adds	r3, r7, r3
    3950:	2200      	movs	r2, #0
    3952:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    3954:	2308      	movs	r3, #8
    3956:	18fb      	adds	r3, r7, r3
    3958:	0018      	movs	r0, r3
    395a:	4b26      	ldr	r3, [pc, #152]	; (39f4 <nm_bus_init+0xb0>)
    395c:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    395e:	2308      	movs	r3, #8
    3960:	18fb      	adds	r3, r7, r3
    3962:	220e      	movs	r2, #14
    3964:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    3966:	2308      	movs	r3, #8
    3968:	18fa      	adds	r2, r7, r3
    396a:	4b23      	ldr	r3, [pc, #140]	; (39f8 <nm_bus_init+0xb4>)
    396c:	0011      	movs	r1, r2
    396e:	0018      	movs	r0, r3
    3970:	4b22      	ldr	r3, [pc, #136]	; (39fc <nm_bus_init+0xb8>)
    3972:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    3974:	230c      	movs	r3, #12
    3976:	18fb      	adds	r3, r7, r3
    3978:	0018      	movs	r0, r3
    397a:	4b21      	ldr	r3, [pc, #132]	; (3a00 <nm_bus_init+0xbc>)
    397c:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    397e:	230c      	movs	r3, #12
    3980:	18fb      	adds	r3, r7, r3
    3982:	22c0      	movs	r2, #192	; 0xc0
    3984:	0392      	lsls	r2, r2, #14
    3986:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    3988:	230c      	movs	r3, #12
    398a:	18fb      	adds	r3, r7, r3
    398c:	4a1d      	ldr	r2, [pc, #116]	; (3a04 <nm_bus_init+0xc0>)
    398e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    3990:	230c      	movs	r3, #12
    3992:	18fb      	adds	r3, r7, r3
    3994:	4a1c      	ldr	r2, [pc, #112]	; (3a08 <nm_bus_init+0xc4>)
    3996:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    3998:	230c      	movs	r3, #12
    399a:	18fb      	adds	r3, r7, r3
    399c:	2201      	movs	r2, #1
    399e:	4252      	negs	r2, r2
    39a0:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    39a2:	230c      	movs	r3, #12
    39a4:	18fb      	adds	r3, r7, r3
    39a6:	4a19      	ldr	r2, [pc, #100]	; (3a0c <nm_bus_init+0xc8>)
    39a8:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    39aa:	230c      	movs	r3, #12
    39ac:	18fb      	adds	r3, r7, r3
    39ae:	2200      	movs	r2, #0
    39b0:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    39b2:	230c      	movs	r3, #12
    39b4:	18fb      	adds	r3, r7, r3
    39b6:	4a16      	ldr	r2, [pc, #88]	; (3a10 <nm_bus_init+0xcc>)
    39b8:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    39ba:	230c      	movs	r3, #12
    39bc:	18fa      	adds	r2, r7, r3
    39be:	4915      	ldr	r1, [pc, #84]	; (3a14 <nm_bus_init+0xd0>)
    39c0:	4b15      	ldr	r3, [pc, #84]	; (3a18 <nm_bus_init+0xd4>)
    39c2:	0018      	movs	r0, r3
    39c4:	4b15      	ldr	r3, [pc, #84]	; (3a1c <nm_bus_init+0xd8>)
    39c6:	4798      	blx	r3
    39c8:	1e03      	subs	r3, r0, #0
    39ca:	d002      	beq.n	39d2 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    39cc:	2306      	movs	r3, #6
    39ce:	425b      	negs	r3, r3
    39d0:	e00c      	b.n	39ec <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    39d2:	4b11      	ldr	r3, [pc, #68]	; (3a18 <nm_bus_init+0xd4>)
    39d4:	0018      	movs	r0, r3
    39d6:	4b12      	ldr	r3, [pc, #72]	; (3a20 <nm_bus_init+0xdc>)
    39d8:	4798      	blx	r3

	nm_bsp_reset();
    39da:	4b12      	ldr	r3, [pc, #72]	; (3a24 <nm_bus_init+0xe0>)
    39dc:	4798      	blx	r3
	nm_bsp_sleep(1);
    39de:	2001      	movs	r0, #1
    39e0:	4b11      	ldr	r3, [pc, #68]	; (3a28 <nm_bus_init+0xe4>)
    39e2:	4798      	blx	r3
#endif
	return result;
    39e4:	2347      	movs	r3, #71	; 0x47
    39e6:	18fb      	adds	r3, r7, r3
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	b25b      	sxtb	r3, r3
}
    39ec:	0018      	movs	r0, r3
    39ee:	46bd      	mov	sp, r7
    39f0:	b012      	add	sp, #72	; 0x48
    39f2:	bd80      	pop	{r7, pc}
    39f4:	00003551 	.word	0x00003551
    39f8:	200005b0 	.word	0x200005b0
    39fc:	00003575 	.word	0x00003575
    3a00:	000034cd 	.word	0x000034cd
    3a04:	000c0002 	.word	0x000c0002
    3a08:	000d0002 	.word	0x000d0002
    3a0c:	000f0002 	.word	0x000f0002
    3a10:	00b71b00 	.word	0x00b71b00
    3a14:	42001000 	.word	0x42001000
    3a18:	200005b4 	.word	0x200005b4
    3a1c:	00009ac5 	.word	0x00009ac5
    3a20:	000035d9 	.word	0x000035d9
    3a24:	0000323d 	.word	0x0000323d
    3a28:	0000327d 	.word	0x0000327d

00003a2c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    3a2c:	b590      	push	{r4, r7, lr}
    3a2e:	b085      	sub	sp, #20
    3a30:	af00      	add	r7, sp, #0
    3a32:	0002      	movs	r2, r0
    3a34:	6039      	str	r1, [r7, #0]
    3a36:	1dfb      	adds	r3, r7, #7
    3a38:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    3a3a:	230f      	movs	r3, #15
    3a3c:	18fb      	adds	r3, r7, r3
    3a3e:	2200      	movs	r2, #0
    3a40:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    3a42:	1dfb      	adds	r3, r7, #7
    3a44:	781b      	ldrb	r3, [r3, #0]
    3a46:	2b03      	cmp	r3, #3
    3a48:	d10f      	bne.n	3a6a <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    3a4a:	683b      	ldr	r3, [r7, #0]
    3a4c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    3a4e:	68bb      	ldr	r3, [r7, #8]
    3a50:	6818      	ldr	r0, [r3, #0]
    3a52:	68bb      	ldr	r3, [r7, #8]
    3a54:	6859      	ldr	r1, [r3, #4]
    3a56:	68bb      	ldr	r3, [r7, #8]
    3a58:	891b      	ldrh	r3, [r3, #8]
    3a5a:	220f      	movs	r2, #15
    3a5c:	18bc      	adds	r4, r7, r2
    3a5e:	001a      	movs	r2, r3
    3a60:	4b10      	ldr	r3, [pc, #64]	; (3aa4 <nm_bus_ioctl+0x78>)
    3a62:	4798      	blx	r3
    3a64:	0003      	movs	r3, r0
    3a66:	7023      	strb	r3, [r4, #0]
		}
		break;
    3a68:	e013      	b.n	3a92 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    3a6a:	230f      	movs	r3, #15
    3a6c:	18fb      	adds	r3, r7, r3
    3a6e:	22ff      	movs	r2, #255	; 0xff
    3a70:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    3a72:	230e      	movs	r3, #14
    3a74:	33ff      	adds	r3, #255	; 0xff
    3a76:	001a      	movs	r2, r3
    3a78:	490b      	ldr	r1, [pc, #44]	; (3aa8 <nm_bus_ioctl+0x7c>)
    3a7a:	4b0c      	ldr	r3, [pc, #48]	; (3aac <nm_bus_ioctl+0x80>)
    3a7c:	0018      	movs	r0, r3
    3a7e:	4b0c      	ldr	r3, [pc, #48]	; (3ab0 <nm_bus_ioctl+0x84>)
    3a80:	4798      	blx	r3
    3a82:	4b0c      	ldr	r3, [pc, #48]	; (3ab4 <nm_bus_ioctl+0x88>)
    3a84:	0018      	movs	r0, r3
    3a86:	4b0c      	ldr	r3, [pc, #48]	; (3ab8 <nm_bus_ioctl+0x8c>)
    3a88:	4798      	blx	r3
    3a8a:	200d      	movs	r0, #13
    3a8c:	4b0b      	ldr	r3, [pc, #44]	; (3abc <nm_bus_ioctl+0x90>)
    3a8e:	4798      	blx	r3
			break;
    3a90:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    3a92:	230f      	movs	r3, #15
    3a94:	18fb      	adds	r3, r7, r3
    3a96:	781b      	ldrb	r3, [r3, #0]
    3a98:	b25b      	sxtb	r3, r3
}
    3a9a:	0018      	movs	r0, r3
    3a9c:	46bd      	mov	sp, r7
    3a9e:	b005      	add	sp, #20
    3aa0:	bd90      	pop	{r4, r7, pc}
    3aa2:	46c0      	nop			; (mov r8, r8)
    3aa4:	000037cd 	.word	0x000037cd
    3aa8:	00018594 	.word	0x00018594
    3aac:	0001856c 	.word	0x0001856c
    3ab0:	00012f71 	.word	0x00012f71
    3ab4:	00018580 	.word	0x00018580
    3ab8:	0001308d 	.word	0x0001308d
    3abc:	00012fa5 	.word	0x00012fa5

00003ac0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    3ac0:	b580      	push	{r7, lr}
    3ac2:	b082      	sub	sp, #8
    3ac4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    3ac6:	1dfb      	adds	r3, r7, #7
    3ac8:	2200      	movs	r2, #0
    3aca:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    3acc:	1d3b      	adds	r3, r7, #4
    3ace:	0018      	movs	r0, r3
    3ad0:	4b13      	ldr	r3, [pc, #76]	; (3b20 <nm_bus_deinit+0x60>)
    3ad2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3ad4:	1d3b      	adds	r3, r7, #4
    3ad6:	2200      	movs	r2, #0
    3ad8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    3ada:	1d3b      	adds	r3, r7, #4
    3adc:	2200      	movs	r2, #0
    3ade:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    3ae0:	4b10      	ldr	r3, [pc, #64]	; (3b24 <nm_bus_deinit+0x64>)
    3ae2:	0018      	movs	r0, r3
    3ae4:	4b10      	ldr	r3, [pc, #64]	; (3b28 <nm_bus_deinit+0x68>)
    3ae6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    3ae8:	1d3b      	adds	r3, r7, #4
    3aea:	0019      	movs	r1, r3
    3aec:	200c      	movs	r0, #12
    3aee:	4b0f      	ldr	r3, [pc, #60]	; (3b2c <nm_bus_deinit+0x6c>)
    3af0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    3af2:	1d3b      	adds	r3, r7, #4
    3af4:	0019      	movs	r1, r3
    3af6:	200f      	movs	r0, #15
    3af8:	4b0c      	ldr	r3, [pc, #48]	; (3b2c <nm_bus_deinit+0x6c>)
    3afa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    3afc:	1d3b      	adds	r3, r7, #4
    3afe:	0019      	movs	r1, r3
    3b00:	200d      	movs	r0, #13
    3b02:	4b0a      	ldr	r3, [pc, #40]	; (3b2c <nm_bus_deinit+0x6c>)
    3b04:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    3b06:	1d3b      	adds	r3, r7, #4
    3b08:	0019      	movs	r1, r3
    3b0a:	200e      	movs	r0, #14
    3b0c:	4b07      	ldr	r3, [pc, #28]	; (3b2c <nm_bus_deinit+0x6c>)
    3b0e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    3b10:	1dfb      	adds	r3, r7, #7
    3b12:	781b      	ldrb	r3, [r3, #0]
    3b14:	b25b      	sxtb	r3, r3
}
    3b16:	0018      	movs	r0, r3
    3b18:	46bd      	mov	sp, r7
    3b1a:	b002      	add	sp, #8
    3b1c:	bd80      	pop	{r7, pc}
    3b1e:	46c0      	nop			; (mov r8, r8)
    3b20:	00003435 	.word	0x00003435
    3b24:	200005b4 	.word	0x200005b4
    3b28:	00003629 	.word	0x00003629
    3b2c:	000101bd 	.word	0x000101bd

00003b30 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    3b30:	b580      	push	{r7, lr}
    3b32:	b084      	sub	sp, #16
    3b34:	af00      	add	r7, sp, #0
    3b36:	60f8      	str	r0, [r7, #12]
    3b38:	60b9      	str	r1, [r7, #8]
    3b3a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d010      	beq.n	3b64 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    3b42:	68bb      	ldr	r3, [r7, #8]
    3b44:	781a      	ldrb	r2, [r3, #0]
    3b46:	68fb      	ldr	r3, [r7, #12]
    3b48:	701a      	strb	r2, [r3, #0]
		pDst++;
    3b4a:	68fb      	ldr	r3, [r7, #12]
    3b4c:	3301      	adds	r3, #1
    3b4e:	60fb      	str	r3, [r7, #12]
		pSrc++;
    3b50:	68bb      	ldr	r3, [r7, #8]
    3b52:	3301      	adds	r3, #1
    3b54:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    3b56:	687b      	ldr	r3, [r7, #4]
    3b58:	3b01      	subs	r3, #1
    3b5a:	607b      	str	r3, [r7, #4]
    3b5c:	687b      	ldr	r3, [r7, #4]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d1ef      	bne.n	3b42 <m2m_memcpy+0x12>
    3b62:	e000      	b.n	3b66 <m2m_memcpy+0x36>
	if(sz == 0) return;
    3b64:	46c0      	nop			; (mov r8, r8)
}
    3b66:	46bd      	mov	sp, r7
    3b68:	b004      	add	sp, #16
    3b6a:	bd80      	pop	{r7, pc}

00003b6c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    3b6c:	b580      	push	{r7, lr}
    3b6e:	b084      	sub	sp, #16
    3b70:	af00      	add	r7, sp, #0
    3b72:	60f8      	str	r0, [r7, #12]
    3b74:	607a      	str	r2, [r7, #4]
    3b76:	230b      	movs	r3, #11
    3b78:	18fb      	adds	r3, r7, r3
    3b7a:	1c0a      	adds	r2, r1, #0
    3b7c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	2b00      	cmp	r3, #0
    3b82:	d00e      	beq.n	3ba2 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    3b84:	68fb      	ldr	r3, [r7, #12]
    3b86:	220b      	movs	r2, #11
    3b88:	18ba      	adds	r2, r7, r2
    3b8a:	7812      	ldrb	r2, [r2, #0]
    3b8c:	701a      	strb	r2, [r3, #0]
		pBuf++;
    3b8e:	68fb      	ldr	r3, [r7, #12]
    3b90:	3301      	adds	r3, #1
    3b92:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    3b94:	687b      	ldr	r3, [r7, #4]
    3b96:	3b01      	subs	r3, #1
    3b98:	607b      	str	r3, [r7, #4]
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d1f1      	bne.n	3b84 <m2m_memset+0x18>
    3ba0:	e000      	b.n	3ba4 <m2m_memset+0x38>
	if(sz == 0) return;
    3ba2:	46c0      	nop			; (mov r8, r8)
}
    3ba4:	46bd      	mov	sp, r7
    3ba6:	b004      	add	sp, #16
    3ba8:	bd80      	pop	{r7, pc}

00003baa <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    3baa:	b580      	push	{r7, lr}
    3bac:	b084      	sub	sp, #16
    3bae:	af00      	add	r7, sp, #0
    3bb0:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    3bb2:	230e      	movs	r3, #14
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	2200      	movs	r2, #0
    3bb8:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    3bba:	e009      	b.n	3bd0 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    3bbc:	230e      	movs	r3, #14
    3bbe:	18fb      	adds	r3, r7, r3
    3bc0:	881a      	ldrh	r2, [r3, #0]
    3bc2:	230e      	movs	r3, #14
    3bc4:	18fb      	adds	r3, r7, r3
    3bc6:	3201      	adds	r2, #1
    3bc8:	801a      	strh	r2, [r3, #0]
		pcStr++;
    3bca:	687b      	ldr	r3, [r7, #4]
    3bcc:	3301      	adds	r3, #1
    3bce:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	781b      	ldrb	r3, [r3, #0]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d1f1      	bne.n	3bbc <m2m_strlen+0x12>
	}
	return u16StrLen;
    3bd8:	230e      	movs	r3, #14
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	881b      	ldrh	r3, [r3, #0]
}
    3bde:	0018      	movs	r0, r3
    3be0:	46bd      	mov	sp, r7
    3be2:	b004      	add	sp, #16
    3be4:	bd80      	pop	{r7, pc}
	...

00003be8 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    3be8:	b580      	push	{r7, lr}
    3bea:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    3bec:	4b04      	ldr	r3, [pc, #16]	; (3c00 <isr+0x18>)
    3bee:	78db      	ldrb	r3, [r3, #3]
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	3301      	adds	r3, #1
    3bf4:	b2da      	uxtb	r2, r3
    3bf6:	4b02      	ldr	r3, [pc, #8]	; (3c00 <isr+0x18>)
    3bf8:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	46bd      	mov	sp, r7
    3bfe:	bd80      	pop	{r7, pc}
    3c00:	200005f0 	.word	0x200005f0

00003c04 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    3c04:	b590      	push	{r4, r7, lr}
    3c06:	b083      	sub	sp, #12
    3c08:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    3c0a:	1dfb      	adds	r3, r7, #7
    3c0c:	2200      	movs	r2, #0
    3c0e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    3c10:	4b14      	ldr	r3, [pc, #80]	; (3c64 <hif_set_rx_done+0x60>)
    3c12:	2200      	movs	r2, #0
    3c14:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    3c16:	2001      	movs	r0, #1
    3c18:	4b13      	ldr	r3, [pc, #76]	; (3c68 <hif_set_rx_done+0x64>)
    3c1a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    3c1c:	1dfc      	adds	r4, r7, #7
    3c1e:	003b      	movs	r3, r7
    3c20:	4a12      	ldr	r2, [pc, #72]	; (3c6c <hif_set_rx_done+0x68>)
    3c22:	0019      	movs	r1, r3
    3c24:	0010      	movs	r0, r2
    3c26:	4b12      	ldr	r3, [pc, #72]	; (3c70 <hif_set_rx_done+0x6c>)
    3c28:	4798      	blx	r3
    3c2a:	0003      	movs	r3, r0
    3c2c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3c2e:	1dfb      	adds	r3, r7, #7
    3c30:	781b      	ldrb	r3, [r3, #0]
    3c32:	b25b      	sxtb	r3, r3
    3c34:	2b00      	cmp	r3, #0
    3c36:	d10d      	bne.n	3c54 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    3c38:	683b      	ldr	r3, [r7, #0]
    3c3a:	2202      	movs	r2, #2
    3c3c:	4313      	orrs	r3, r2
    3c3e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    3c40:	683b      	ldr	r3, [r7, #0]
    3c42:	1dfc      	adds	r4, r7, #7
    3c44:	4a09      	ldr	r2, [pc, #36]	; (3c6c <hif_set_rx_done+0x68>)
    3c46:	0019      	movs	r1, r3
    3c48:	0010      	movs	r0, r2
    3c4a:	4b0a      	ldr	r3, [pc, #40]	; (3c74 <hif_set_rx_done+0x70>)
    3c4c:	4798      	blx	r3
    3c4e:	0003      	movs	r3, r0
    3c50:	7023      	strb	r3, [r4, #0]
    3c52:	e000      	b.n	3c56 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    3c54:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    3c56:	1dfb      	adds	r3, r7, #7
    3c58:	781b      	ldrb	r3, [r3, #0]
    3c5a:	b25b      	sxtb	r3, r3

}
    3c5c:	0018      	movs	r0, r3
    3c5e:	46bd      	mov	sp, r7
    3c60:	b003      	add	sp, #12
    3c62:	bd90      	pop	{r4, r7, pc}
    3c64:	200005f0 	.word	0x200005f0
    3c68:	0000331d 	.word	0x0000331d
    3c6c:	00001070 	.word	0x00001070
    3c70:	00005ba9 	.word	0x00005ba9
    3c74:	00005bcd 	.word	0x00005bcd

00003c78 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    3c78:	b580      	push	{r7, lr}
    3c7a:	b082      	sub	sp, #8
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	603a      	str	r2, [r7, #0]
    3c80:	1dfb      	adds	r3, r7, #7
    3c82:	1c02      	adds	r2, r0, #0
    3c84:	701a      	strb	r2, [r3, #0]
    3c86:	1d3b      	adds	r3, r7, #4
    3c88:	1c0a      	adds	r2, r1, #0
    3c8a:	801a      	strh	r2, [r3, #0]


}
    3c8c:	46c0      	nop			; (mov r8, r8)
    3c8e:	46bd      	mov	sp, r7
    3c90:	b002      	add	sp, #8
    3c92:	bd80      	pop	{r7, pc}

00003c94 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    3c94:	b590      	push	{r4, r7, lr}
    3c96:	b083      	sub	sp, #12
    3c98:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3c9a:	1dfb      	adds	r3, r7, #7
    3c9c:	2200      	movs	r2, #0
    3c9e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    3ca0:	4b16      	ldr	r3, [pc, #88]	; (3cfc <hif_chip_wake+0x68>)
    3ca2:	789b      	ldrb	r3, [r3, #2]
    3ca4:	b2db      	uxtb	r3, r3
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d003      	beq.n	3cb2 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    3caa:	1dfb      	adds	r3, r7, #7
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	b25b      	sxtb	r3, r3
    3cb0:	e01f      	b.n	3cf2 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    3cb2:	4b12      	ldr	r3, [pc, #72]	; (3cfc <hif_chip_wake+0x68>)
    3cb4:	785b      	ldrb	r3, [r3, #1]
    3cb6:	b2db      	uxtb	r3, r3
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d10e      	bne.n	3cda <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    3cbc:	4b0f      	ldr	r3, [pc, #60]	; (3cfc <hif_chip_wake+0x68>)
    3cbe:	781b      	ldrb	r3, [r3, #0]
    3cc0:	b2db      	uxtb	r3, r3
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d009      	beq.n	3cda <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    3cc6:	1dfc      	adds	r4, r7, #7
    3cc8:	4b0d      	ldr	r3, [pc, #52]	; (3d00 <hif_chip_wake+0x6c>)
    3cca:	4798      	blx	r3
    3ccc:	0003      	movs	r3, r0
    3cce:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    3cd0:	1dfb      	adds	r3, r7, #7
    3cd2:	781b      	ldrb	r3, [r3, #0]
    3cd4:	b25b      	sxtb	r3, r3
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d107      	bne.n	3cea <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    3cda:	4b08      	ldr	r3, [pc, #32]	; (3cfc <hif_chip_wake+0x68>)
    3cdc:	785b      	ldrb	r3, [r3, #1]
    3cde:	b2db      	uxtb	r3, r3
    3ce0:	3301      	adds	r3, #1
    3ce2:	b2da      	uxtb	r2, r3
    3ce4:	4b05      	ldr	r3, [pc, #20]	; (3cfc <hif_chip_wake+0x68>)
    3ce6:	705a      	strb	r2, [r3, #1]
    3ce8:	e000      	b.n	3cec <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    3cea:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    3cec:	1dfb      	adds	r3, r7, #7
    3cee:	781b      	ldrb	r3, [r3, #0]
    3cf0:	b25b      	sxtb	r3, r3
}
    3cf2:	0018      	movs	r0, r3
    3cf4:	46bd      	mov	sp, r7
    3cf6:	b003      	add	sp, #12
    3cf8:	bd90      	pop	{r4, r7, pc}
    3cfa:	46c0      	nop			; (mov r8, r8)
    3cfc:	200005f0 	.word	0x200005f0
    3d00:	0000567d 	.word	0x0000567d

00003d04 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    3d04:	b580      	push	{r7, lr}
    3d06:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    3d08:	4b07      	ldr	r3, [pc, #28]	; (3d28 <hif_chip_sleep_sc+0x24>)
    3d0a:	785b      	ldrb	r3, [r3, #1]
    3d0c:	b2db      	uxtb	r3, r3
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d006      	beq.n	3d20 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    3d12:	4b05      	ldr	r3, [pc, #20]	; (3d28 <hif_chip_sleep_sc+0x24>)
    3d14:	785b      	ldrb	r3, [r3, #1]
    3d16:	b2db      	uxtb	r3, r3
    3d18:	3b01      	subs	r3, #1
    3d1a:	b2da      	uxtb	r2, r3
    3d1c:	4b02      	ldr	r3, [pc, #8]	; (3d28 <hif_chip_sleep_sc+0x24>)
    3d1e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    3d20:	2300      	movs	r3, #0
}
    3d22:	0018      	movs	r0, r3
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}
    3d28:	200005f0 	.word	0x200005f0

00003d2c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    3d2c:	b590      	push	{r4, r7, lr}
    3d2e:	b083      	sub	sp, #12
    3d30:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3d32:	1dfb      	adds	r3, r7, #7
    3d34:	2200      	movs	r2, #0
    3d36:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    3d38:	4b10      	ldr	r3, [pc, #64]	; (3d7c <hif_chip_sleep+0x50>)
    3d3a:	785b      	ldrb	r3, [r3, #1]
    3d3c:	b2db      	uxtb	r3, r3
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d006      	beq.n	3d50 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    3d42:	4b0e      	ldr	r3, [pc, #56]	; (3d7c <hif_chip_sleep+0x50>)
    3d44:	785b      	ldrb	r3, [r3, #1]
    3d46:	b2db      	uxtb	r3, r3
    3d48:	3b01      	subs	r3, #1
    3d4a:	b2da      	uxtb	r2, r3
    3d4c:	4b0b      	ldr	r3, [pc, #44]	; (3d7c <hif_chip_sleep+0x50>)
    3d4e:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    3d50:	4b0a      	ldr	r3, [pc, #40]	; (3d7c <hif_chip_sleep+0x50>)
    3d52:	785b      	ldrb	r3, [r3, #1]
    3d54:	b2db      	uxtb	r3, r3
    3d56:	2b00      	cmp	r3, #0
    3d58:	d109      	bne.n	3d6e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    3d5a:	4b08      	ldr	r3, [pc, #32]	; (3d7c <hif_chip_sleep+0x50>)
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	b2db      	uxtb	r3, r3
    3d60:	2b00      	cmp	r3, #0
    3d62:	d004      	beq.n	3d6e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    3d64:	1dfc      	adds	r4, r7, #7
    3d66:	4b06      	ldr	r3, [pc, #24]	; (3d80 <hif_chip_sleep+0x54>)
    3d68:	4798      	blx	r3
    3d6a:	0003      	movs	r3, r0
    3d6c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    3d6e:	1dfb      	adds	r3, r7, #7
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	b25b      	sxtb	r3, r3
}
    3d74:	0018      	movs	r0, r3
    3d76:	46bd      	mov	sp, r7
    3d78:	b003      	add	sp, #12
    3d7a:	bd90      	pop	{r4, r7, pc}
    3d7c:	200005f0 	.word	0x200005f0
    3d80:	000055a5 	.word	0x000055a5

00003d84 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    3d84:	b580      	push	{r7, lr}
    3d86:	b082      	sub	sp, #8
    3d88:	af00      	add	r7, sp, #0
    3d8a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    3d8c:	4b09      	ldr	r3, [pc, #36]	; (3db4 <hif_init+0x30>)
    3d8e:	2228      	movs	r2, #40	; 0x28
    3d90:	2100      	movs	r1, #0
    3d92:	0018      	movs	r0, r3
    3d94:	4b08      	ldr	r3, [pc, #32]	; (3db8 <hif_init+0x34>)
    3d96:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    3d98:	4b08      	ldr	r3, [pc, #32]	; (3dbc <hif_init+0x38>)
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b08      	ldr	r3, [pc, #32]	; (3dc0 <hif_init+0x3c>)
    3d9e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    3da0:	4b08      	ldr	r3, [pc, #32]	; (3dc4 <hif_init+0x40>)
    3da2:	0019      	movs	r1, r3
    3da4:	2003      	movs	r0, #3
    3da6:	4b08      	ldr	r3, [pc, #32]	; (3dc8 <hif_init+0x44>)
    3da8:	4798      	blx	r3
	return M2M_SUCCESS;
    3daa:	2300      	movs	r3, #0
}
    3dac:	0018      	movs	r0, r3
    3dae:	46bd      	mov	sp, r7
    3db0:	b002      	add	sp, #8
    3db2:	bd80      	pop	{r7, pc}
    3db4:	200005f0 	.word	0x200005f0
    3db8:	00003b6d 	.word	0x00003b6d
    3dbc:	00003be9 	.word	0x00003be9
    3dc0:	000032a5 	.word	0x000032a5
    3dc4:	00003c79 	.word	0x00003c79
    3dc8:	00004841 	.word	0x00004841

00003dcc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    3dcc:	b590      	push	{r4, r7, lr}
    3dce:	b089      	sub	sp, #36	; 0x24
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	0004      	movs	r4, r0
    3dd4:	0008      	movs	r0, r1
    3dd6:	603a      	str	r2, [r7, #0]
    3dd8:	0019      	movs	r1, r3
    3dda:	1dfb      	adds	r3, r7, #7
    3ddc:	1c22      	adds	r2, r4, #0
    3dde:	701a      	strb	r2, [r3, #0]
    3de0:	1dbb      	adds	r3, r7, #6
    3de2:	1c02      	adds	r2, r0, #0
    3de4:	701a      	strb	r2, [r3, #0]
    3de6:	1d3b      	adds	r3, r7, #4
    3de8:	1c0a      	adds	r2, r1, #0
    3dea:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    3dec:	231f      	movs	r3, #31
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	22ff      	movs	r2, #255	; 0xff
    3df2:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    3df4:	1dbb      	adds	r3, r7, #6
    3df6:	781b      	ldrb	r3, [r3, #0]
    3df8:	227f      	movs	r2, #127	; 0x7f
    3dfa:	4013      	ands	r3, r2
    3dfc:	b2da      	uxtb	r2, r3
    3dfe:	2318      	movs	r3, #24
    3e00:	18fb      	adds	r3, r7, r3
    3e02:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    3e04:	2318      	movs	r3, #24
    3e06:	18fb      	adds	r3, r7, r3
    3e08:	1dfa      	adds	r2, r7, #7
    3e0a:	7812      	ldrb	r2, [r2, #0]
    3e0c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    3e0e:	2318      	movs	r3, #24
    3e10:	18fb      	adds	r3, r7, r3
    3e12:	2208      	movs	r2, #8
    3e14:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    3e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d011      	beq.n	3e40 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    3e1c:	2318      	movs	r3, #24
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	885b      	ldrh	r3, [r3, #2]
    3e22:	b29a      	uxth	r2, r3
    3e24:	2338      	movs	r3, #56	; 0x38
    3e26:	18f9      	adds	r1, r7, r3
    3e28:	2334      	movs	r3, #52	; 0x34
    3e2a:	18fb      	adds	r3, r7, r3
    3e2c:	8809      	ldrh	r1, [r1, #0]
    3e2e:	881b      	ldrh	r3, [r3, #0]
    3e30:	18cb      	adds	r3, r1, r3
    3e32:	b29b      	uxth	r3, r3
    3e34:	18d3      	adds	r3, r2, r3
    3e36:	b29a      	uxth	r2, r3
    3e38:	2318      	movs	r3, #24
    3e3a:	18fb      	adds	r3, r7, r3
    3e3c:	805a      	strh	r2, [r3, #2]
    3e3e:	e00a      	b.n	3e56 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    3e40:	2318      	movs	r3, #24
    3e42:	18fb      	adds	r3, r7, r3
    3e44:	885b      	ldrh	r3, [r3, #2]
    3e46:	b29a      	uxth	r2, r3
    3e48:	1d3b      	adds	r3, r7, #4
    3e4a:	881b      	ldrh	r3, [r3, #0]
    3e4c:	18d3      	adds	r3, r2, r3
    3e4e:	b29a      	uxth	r2, r3
    3e50:	2318      	movs	r3, #24
    3e52:	18fb      	adds	r3, r7, r3
    3e54:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    3e56:	231f      	movs	r3, #31
    3e58:	18fc      	adds	r4, r7, r3
    3e5a:	4bb0      	ldr	r3, [pc, #704]	; (411c <hif_send+0x350>)
    3e5c:	4798      	blx	r3
    3e5e:	0003      	movs	r3, r0
    3e60:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    3e62:	231f      	movs	r3, #31
    3e64:	18fb      	adds	r3, r7, r3
    3e66:	781b      	ldrb	r3, [r3, #0]
    3e68:	b25b      	sxtb	r3, r3
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d000      	beq.n	3e70 <hif_send+0xa4>
    3e6e:	e127      	b.n	40c0 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
    3e70:	2300      	movs	r3, #0
    3e72:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    3e74:	230e      	movs	r3, #14
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	2200      	movs	r2, #0
    3e7a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    3e7c:	2300      	movs	r3, #0
    3e7e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    3e80:	1dfb      	adds	r3, r7, #7
    3e82:	781a      	ldrb	r2, [r3, #0]
    3e84:	697b      	ldr	r3, [r7, #20]
    3e86:	4313      	orrs	r3, r2
    3e88:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    3e8a:	1dbb      	adds	r3, r7, #6
    3e8c:	781b      	ldrb	r3, [r3, #0]
    3e8e:	021a      	lsls	r2, r3, #8
    3e90:	697b      	ldr	r3, [r7, #20]
    3e92:	4313      	orrs	r3, r2
    3e94:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    3e96:	2318      	movs	r3, #24
    3e98:	18fb      	adds	r3, r7, r3
    3e9a:	885b      	ldrh	r3, [r3, #2]
    3e9c:	b29b      	uxth	r3, r3
    3e9e:	041a      	lsls	r2, r3, #16
    3ea0:	697b      	ldr	r3, [r7, #20]
    3ea2:	4313      	orrs	r3, r2
    3ea4:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    3ea6:	697b      	ldr	r3, [r7, #20]
    3ea8:	221f      	movs	r2, #31
    3eaa:	18bc      	adds	r4, r7, r2
    3eac:	4a9c      	ldr	r2, [pc, #624]	; (4120 <hif_send+0x354>)
    3eae:	0019      	movs	r1, r3
    3eb0:	0010      	movs	r0, r2
    3eb2:	4b9c      	ldr	r3, [pc, #624]	; (4124 <hif_send+0x358>)
    3eb4:	4798      	blx	r3
    3eb6:	0003      	movs	r3, r0
    3eb8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    3eba:	231f      	movs	r3, #31
    3ebc:	18fb      	adds	r3, r7, r3
    3ebe:	781b      	ldrb	r3, [r3, #0]
    3ec0:	b25b      	sxtb	r3, r3
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d000      	beq.n	3ec8 <hif_send+0xfc>
    3ec6:	e115      	b.n	40f4 <hif_send+0x328>

		reg = 0UL;
    3ec8:	2300      	movs	r3, #0
    3eca:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    3ecc:	697b      	ldr	r3, [r7, #20]
    3ece:	2202      	movs	r2, #2
    3ed0:	4313      	orrs	r3, r2
    3ed2:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    3ed4:	697b      	ldr	r3, [r7, #20]
    3ed6:	221f      	movs	r2, #31
    3ed8:	18bc      	adds	r4, r7, r2
    3eda:	4a93      	ldr	r2, [pc, #588]	; (4128 <hif_send+0x35c>)
    3edc:	0019      	movs	r1, r3
    3ede:	0010      	movs	r0, r2
    3ee0:	4b90      	ldr	r3, [pc, #576]	; (4124 <hif_send+0x358>)
    3ee2:	4798      	blx	r3
    3ee4:	0003      	movs	r3, r0
    3ee6:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    3ee8:	231f      	movs	r3, #31
    3eea:	18fb      	adds	r3, r7, r3
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	b25b      	sxtb	r3, r3
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d000      	beq.n	3ef6 <hif_send+0x12a>
    3ef4:	e100      	b.n	40f8 <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    3ef6:	2300      	movs	r3, #0
    3ef8:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    3efa:	230e      	movs	r3, #14
    3efc:	18fb      	adds	r3, r7, r3
    3efe:	2200      	movs	r2, #0
    3f00:	801a      	strh	r2, [r3, #0]
    3f02:	e04f      	b.n	3fa4 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    3f04:	231f      	movs	r3, #31
    3f06:	18fc      	adds	r4, r7, r3
    3f08:	2314      	movs	r3, #20
    3f0a:	18fb      	adds	r3, r7, r3
    3f0c:	4a86      	ldr	r2, [pc, #536]	; (4128 <hif_send+0x35c>)
    3f0e:	0019      	movs	r1, r3
    3f10:	0010      	movs	r0, r2
    3f12:	4b86      	ldr	r3, [pc, #536]	; (412c <hif_send+0x360>)
    3f14:	4798      	blx	r3
    3f16:	0003      	movs	r3, r0
    3f18:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    3f1a:	231f      	movs	r3, #31
    3f1c:	18fb      	adds	r3, r7, r3
    3f1e:	781b      	ldrb	r3, [r3, #0]
    3f20:	b25b      	sxtb	r3, r3
    3f22:	2b00      	cmp	r3, #0
    3f24:	d146      	bne.n	3fb4 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    3f26:	230e      	movs	r3, #14
    3f28:	18fb      	adds	r3, r7, r3
    3f2a:	881b      	ldrh	r3, [r3, #0]
    3f2c:	b29a      	uxth	r2, r3
    3f2e:	23f4      	movs	r3, #244	; 0xf4
    3f30:	33ff      	adds	r3, #255	; 0xff
    3f32:	429a      	cmp	r2, r3
    3f34:	d915      	bls.n	3f62 <hif_send+0x196>
				if(cnt < 501) {
    3f36:	230e      	movs	r3, #14
    3f38:	18fb      	adds	r3, r7, r3
    3f3a:	881b      	ldrh	r3, [r3, #0]
    3f3c:	b29a      	uxth	r2, r3
    3f3e:	23fa      	movs	r3, #250	; 0xfa
    3f40:	005b      	lsls	r3, r3, #1
    3f42:	429a      	cmp	r2, r3
    3f44:	d80a      	bhi.n	3f5c <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    3f46:	4b7a      	ldr	r3, [pc, #488]	; (4130 <hif_send+0x364>)
    3f48:	0018      	movs	r0, r3
    3f4a:	4b7a      	ldr	r3, [pc, #488]	; (4134 <hif_send+0x368>)
    3f4c:	4798      	blx	r3
    3f4e:	4b7a      	ldr	r3, [pc, #488]	; (4138 <hif_send+0x36c>)
    3f50:	0018      	movs	r0, r3
    3f52:	4b7a      	ldr	r3, [pc, #488]	; (413c <hif_send+0x370>)
    3f54:	4798      	blx	r3
    3f56:	200d      	movs	r0, #13
    3f58:	4b79      	ldr	r3, [pc, #484]	; (4140 <hif_send+0x374>)
    3f5a:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    3f5c:	2001      	movs	r0, #1
    3f5e:	4b79      	ldr	r3, [pc, #484]	; (4144 <hif_send+0x378>)
    3f60:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    3f62:	697b      	ldr	r3, [r7, #20]
    3f64:	2202      	movs	r2, #2
    3f66:	4013      	ands	r3, r2
    3f68:	d113      	bne.n	3f92 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    3f6a:	231f      	movs	r3, #31
    3f6c:	18fc      	adds	r4, r7, r3
    3f6e:	2310      	movs	r3, #16
    3f70:	18fb      	adds	r3, r7, r3
    3f72:	4a75      	ldr	r2, [pc, #468]	; (4148 <hif_send+0x37c>)
    3f74:	0019      	movs	r1, r3
    3f76:	0010      	movs	r0, r2
    3f78:	4b6c      	ldr	r3, [pc, #432]	; (412c <hif_send+0x360>)
    3f7a:	4798      	blx	r3
    3f7c:	0003      	movs	r3, r0
    3f7e:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    3f80:	231f      	movs	r3, #31
    3f82:	18fb      	adds	r3, r7, r3
    3f84:	781b      	ldrb	r3, [r3, #0]
    3f86:	b25b      	sxtb	r3, r3
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d015      	beq.n	3fb8 <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    3f8c:	2300      	movs	r3, #0
    3f8e:	613b      	str	r3, [r7, #16]
					goto ERR1;
    3f90:	e0b9      	b.n	4106 <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    3f92:	230e      	movs	r3, #14
    3f94:	18fb      	adds	r3, r7, r3
    3f96:	881b      	ldrh	r3, [r3, #0]
    3f98:	b29b      	uxth	r3, r3
    3f9a:	3301      	adds	r3, #1
    3f9c:	b29a      	uxth	r2, r3
    3f9e:	230e      	movs	r3, #14
    3fa0:	18fb      	adds	r3, r7, r3
    3fa2:	801a      	strh	r2, [r3, #0]
    3fa4:	230e      	movs	r3, #14
    3fa6:	18fb      	adds	r3, r7, r3
    3fa8:	881b      	ldrh	r3, [r3, #0]
    3faa:	b29b      	uxth	r3, r3
    3fac:	4a67      	ldr	r2, [pc, #412]	; (414c <hif_send+0x380>)
    3fae:	4293      	cmp	r3, r2
    3fb0:	d9a8      	bls.n	3f04 <hif_send+0x138>
    3fb2:	e002      	b.n	3fba <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    3fb4:	46c0      	nop			; (mov r8, r8)
    3fb6:	e000      	b.n	3fba <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    3fb8:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    3fba:	693b      	ldr	r3, [r7, #16]
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d100      	bne.n	3fc2 <hif_send+0x1f6>
    3fc0:	e073      	b.n	40aa <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    3fc2:	693b      	ldr	r3, [r7, #16]
    3fc4:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    3fc6:	2318      	movs	r3, #24
    3fc8:	18fb      	adds	r3, r7, r3
    3fca:	885b      	ldrh	r3, [r3, #2]
    3fcc:	b29a      	uxth	r2, r3
    3fce:	2318      	movs	r3, #24
    3fd0:	18fb      	adds	r3, r7, r3
    3fd2:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    3fd4:	68bb      	ldr	r3, [r7, #8]
    3fd6:	221f      	movs	r2, #31
    3fd8:	18bc      	adds	r4, r7, r2
    3fda:	2218      	movs	r2, #24
    3fdc:	18b9      	adds	r1, r7, r2
    3fde:	2208      	movs	r2, #8
    3fe0:	0018      	movs	r0, r3
    3fe2:	4b5b      	ldr	r3, [pc, #364]	; (4150 <hif_send+0x384>)
    3fe4:	4798      	blx	r3
    3fe6:	0003      	movs	r3, r0
    3fe8:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    3fea:	231f      	movs	r3, #31
    3fec:	18fb      	adds	r3, r7, r3
    3fee:	781b      	ldrb	r3, [r3, #0]
    3ff0:	b25b      	sxtb	r3, r3
    3ff2:	2b00      	cmp	r3, #0
    3ff4:	d000      	beq.n	3ff8 <hif_send+0x22c>
    3ff6:	e081      	b.n	40fc <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    3ff8:	68bb      	ldr	r3, [r7, #8]
    3ffa:	3308      	adds	r3, #8
    3ffc:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    3ffe:	683b      	ldr	r3, [r7, #0]
    4000:	2b00      	cmp	r3, #0
    4002:	d015      	beq.n	4030 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    4004:	68b8      	ldr	r0, [r7, #8]
    4006:	1d3b      	adds	r3, r7, #4
    4008:	881a      	ldrh	r2, [r3, #0]
    400a:	231f      	movs	r3, #31
    400c:	18fc      	adds	r4, r7, r3
    400e:	683b      	ldr	r3, [r7, #0]
    4010:	0019      	movs	r1, r3
    4012:	4b4f      	ldr	r3, [pc, #316]	; (4150 <hif_send+0x384>)
    4014:	4798      	blx	r3
    4016:	0003      	movs	r3, r0
    4018:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    401a:	231f      	movs	r3, #31
    401c:	18fb      	adds	r3, r7, r3
    401e:	781b      	ldrb	r3, [r3, #0]
    4020:	b25b      	sxtb	r3, r3
    4022:	2b00      	cmp	r3, #0
    4024:	d16c      	bne.n	4100 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    4026:	1d3b      	adds	r3, r7, #4
    4028:	881a      	ldrh	r2, [r3, #0]
    402a:	68bb      	ldr	r3, [r7, #8]
    402c:	18d3      	adds	r3, r2, r3
    402e:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    4030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4032:	2b00      	cmp	r3, #0
    4034:	d021      	beq.n	407a <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    4036:	2338      	movs	r3, #56	; 0x38
    4038:	18fb      	adds	r3, r7, r3
    403a:	881a      	ldrh	r2, [r3, #0]
    403c:	1d3b      	adds	r3, r7, #4
    403e:	881b      	ldrh	r3, [r3, #0]
    4040:	1ad3      	subs	r3, r2, r3
    4042:	001a      	movs	r2, r3
    4044:	68bb      	ldr	r3, [r7, #8]
    4046:	18d3      	adds	r3, r2, r3
    4048:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    404a:	68b8      	ldr	r0, [r7, #8]
    404c:	2334      	movs	r3, #52	; 0x34
    404e:	18fb      	adds	r3, r7, r3
    4050:	881a      	ldrh	r2, [r3, #0]
    4052:	231f      	movs	r3, #31
    4054:	18fc      	adds	r4, r7, r3
    4056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4058:	0019      	movs	r1, r3
    405a:	4b3d      	ldr	r3, [pc, #244]	; (4150 <hif_send+0x384>)
    405c:	4798      	blx	r3
    405e:	0003      	movs	r3, r0
    4060:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    4062:	231f      	movs	r3, #31
    4064:	18fb      	adds	r3, r7, r3
    4066:	781b      	ldrb	r3, [r3, #0]
    4068:	b25b      	sxtb	r3, r3
    406a:	2b00      	cmp	r3, #0
    406c:	d14a      	bne.n	4104 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    406e:	2334      	movs	r3, #52	; 0x34
    4070:	18fb      	adds	r3, r7, r3
    4072:	881a      	ldrh	r2, [r3, #0]
    4074:	68bb      	ldr	r3, [r7, #8]
    4076:	18d3      	adds	r3, r2, r3
    4078:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    407a:	693b      	ldr	r3, [r7, #16]
    407c:	009b      	lsls	r3, r3, #2
    407e:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    4080:	697b      	ldr	r3, [r7, #20]
    4082:	2202      	movs	r2, #2
    4084:	4313      	orrs	r3, r2
    4086:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    4088:	697b      	ldr	r3, [r7, #20]
    408a:	221f      	movs	r2, #31
    408c:	18bc      	adds	r4, r7, r2
    408e:	4a31      	ldr	r2, [pc, #196]	; (4154 <hif_send+0x388>)
    4090:	0019      	movs	r1, r3
    4092:	0010      	movs	r0, r2
    4094:	4b23      	ldr	r3, [pc, #140]	; (4124 <hif_send+0x358>)
    4096:	4798      	blx	r3
    4098:	0003      	movs	r3, r0
    409a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    409c:	231f      	movs	r3, #31
    409e:	18fb      	adds	r3, r7, r3
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	b25b      	sxtb	r3, r3
    40a4:	2b00      	cmp	r3, #0
    40a6:	d01a      	beq.n	40de <hif_send+0x312>
    40a8:	e02d      	b.n	4106 <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    40aa:	231f      	movs	r3, #31
    40ac:	18fc      	adds	r4, r7, r3
    40ae:	4b2a      	ldr	r3, [pc, #168]	; (4158 <hif_send+0x38c>)
    40b0:	4798      	blx	r3
    40b2:	0003      	movs	r3, r0
    40b4:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    40b6:	231f      	movs	r3, #31
    40b8:	18fb      	adds	r3, r7, r3
    40ba:	22fd      	movs	r2, #253	; 0xfd
    40bc:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    40be:	e024      	b.n	410a <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    40c0:	23cb      	movs	r3, #203	; 0xcb
    40c2:	005a      	lsls	r2, r3, #1
    40c4:	4925      	ldr	r1, [pc, #148]	; (415c <hif_send+0x390>)
    40c6:	4b26      	ldr	r3, [pc, #152]	; (4160 <hif_send+0x394>)
    40c8:	0018      	movs	r0, r3
    40ca:	4b1a      	ldr	r3, [pc, #104]	; (4134 <hif_send+0x368>)
    40cc:	4798      	blx	r3
    40ce:	4b25      	ldr	r3, [pc, #148]	; (4164 <hif_send+0x398>)
    40d0:	0018      	movs	r0, r3
    40d2:	4b1a      	ldr	r3, [pc, #104]	; (413c <hif_send+0x370>)
    40d4:	4798      	blx	r3
    40d6:	200d      	movs	r0, #13
    40d8:	4b19      	ldr	r3, [pc, #100]	; (4140 <hif_send+0x374>)
    40da:	4798      	blx	r3
		goto ERR2;
    40dc:	e015      	b.n	410a <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    40de:	231f      	movs	r3, #31
    40e0:	18fc      	adds	r4, r7, r3
    40e2:	4b1d      	ldr	r3, [pc, #116]	; (4158 <hif_send+0x38c>)
    40e4:	4798      	blx	r3
    40e6:	0003      	movs	r3, r0
    40e8:	7023      	strb	r3, [r4, #0]
	return ret;
    40ea:	231f      	movs	r3, #31
    40ec:	18fb      	adds	r3, r7, r3
    40ee:	781b      	ldrb	r3, [r3, #0]
    40f0:	b25b      	sxtb	r3, r3
    40f2:	e00e      	b.n	4112 <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    40f4:	46c0      	nop			; (mov r8, r8)
    40f6:	e006      	b.n	4106 <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    40f8:	46c0      	nop			; (mov r8, r8)
    40fa:	e004      	b.n	4106 <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    40fc:	46c0      	nop			; (mov r8, r8)
    40fe:	e002      	b.n	4106 <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    4100:	46c0      	nop			; (mov r8, r8)
    4102:	e000      	b.n	4106 <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    4104:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    4106:	4b18      	ldr	r3, [pc, #96]	; (4168 <hif_send+0x39c>)
    4108:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    410a:	231f      	movs	r3, #31
    410c:	18fb      	adds	r3, r7, r3
    410e:	781b      	ldrb	r3, [r3, #0]
    4110:	b25b      	sxtb	r3, r3
}
    4112:	0018      	movs	r0, r3
    4114:	46bd      	mov	sp, r7
    4116:	b009      	add	sp, #36	; 0x24
    4118:	bd90      	pop	{r4, r7, pc}
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	00003c95 	.word	0x00003c95
    4120:	0000108c 	.word	0x0000108c
    4124:	00005bcd 	.word	0x00005bcd
    4128:	00001078 	.word	0x00001078
    412c:	00005ba9 	.word	0x00005ba9
    4130:	000185a4 	.word	0x000185a4
    4134:	00012f71 	.word	0x00012f71
    4138:	000185b0 	.word	0x000185b0
    413c:	0001308d 	.word	0x0001308d
    4140:	00012fa5 	.word	0x00012fa5
    4144:	0000327d 	.word	0x0000327d
    4148:	00150400 	.word	0x00150400
    414c:	000003e7 	.word	0x000003e7
    4150:	00005d15 	.word	0x00005d15
    4154:	0000106c 	.word	0x0000106c
    4158:	00003d2d 	.word	0x00003d2d
    415c:	000188b8 	.word	0x000188b8
    4160:	000185c0 	.word	0x000185c0
    4164:	000185d4 	.word	0x000185d4
    4168:	00003d05 	.word	0x00003d05

0000416c <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    416c:	b590      	push	{r4, r7, lr}
    416e:	b087      	sub	sp, #28
    4170:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    4172:	230f      	movs	r3, #15
    4174:	18fb      	adds	r3, r7, r3
    4176:	2200      	movs	r2, #0
    4178:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    417a:	230f      	movs	r3, #15
    417c:	18fc      	adds	r4, r7, r3
    417e:	2308      	movs	r3, #8
    4180:	18fb      	adds	r3, r7, r3
    4182:	4ad6      	ldr	r2, [pc, #856]	; (44dc <hif_isr+0x370>)
    4184:	0019      	movs	r1, r3
    4186:	0010      	movs	r0, r2
    4188:	4bd5      	ldr	r3, [pc, #852]	; (44e0 <hif_isr+0x374>)
    418a:	4798      	blx	r3
    418c:	0003      	movs	r3, r0
    418e:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    4190:	230f      	movs	r3, #15
    4192:	18fb      	adds	r3, r7, r3
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	b25b      	sxtb	r3, r3
    4198:	2b00      	cmp	r3, #0
    419a:	d000      	beq.n	419e <hif_isr+0x32>
    419c:	e217      	b.n	45ce <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    419e:	68bb      	ldr	r3, [r7, #8]
    41a0:	2201      	movs	r2, #1
    41a2:	4013      	ands	r3, r2
    41a4:	d100      	bne.n	41a8 <hif_isr+0x3c>
    41a6:	e1fd      	b.n	45a4 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    41a8:	2000      	movs	r0, #0
    41aa:	4bce      	ldr	r3, [pc, #824]	; (44e4 <hif_isr+0x378>)
    41ac:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    41ae:	68bb      	ldr	r3, [r7, #8]
    41b0:	2201      	movs	r2, #1
    41b2:	4393      	bics	r3, r2
    41b4:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    41b6:	68bb      	ldr	r3, [r7, #8]
    41b8:	220f      	movs	r2, #15
    41ba:	18bc      	adds	r4, r7, r2
    41bc:	4ac7      	ldr	r2, [pc, #796]	; (44dc <hif_isr+0x370>)
    41be:	0019      	movs	r1, r3
    41c0:	0010      	movs	r0, r2
    41c2:	4bc9      	ldr	r3, [pc, #804]	; (44e8 <hif_isr+0x37c>)
    41c4:	4798      	blx	r3
    41c6:	0003      	movs	r3, r0
    41c8:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    41ca:	230f      	movs	r3, #15
    41cc:	18fb      	adds	r3, r7, r3
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	b25b      	sxtb	r3, r3
    41d2:	2b00      	cmp	r3, #0
    41d4:	d000      	beq.n	41d8 <hif_isr+0x6c>
    41d6:	e208      	b.n	45ea <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    41d8:	4bc4      	ldr	r3, [pc, #784]	; (44ec <hif_isr+0x380>)
    41da:	2201      	movs	r2, #1
    41dc:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    41de:	68bb      	ldr	r3, [r7, #8]
    41e0:	089b      	lsrs	r3, r3, #2
    41e2:	b29a      	uxth	r2, r3
    41e4:	230c      	movs	r3, #12
    41e6:	18fb      	adds	r3, r7, r3
    41e8:	0512      	lsls	r2, r2, #20
    41ea:	0d12      	lsrs	r2, r2, #20
    41ec:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    41ee:	230c      	movs	r3, #12
    41f0:	18fb      	adds	r3, r7, r3
    41f2:	881b      	ldrh	r3, [r3, #0]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d100      	bne.n	41fa <hif_isr+0x8e>
    41f8:	e1c1      	b.n	457e <hif_isr+0x412>
				uint32 address = 0;
    41fa:	2300      	movs	r3, #0
    41fc:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    41fe:	230f      	movs	r3, #15
    4200:	18fc      	adds	r4, r7, r3
    4202:	003b      	movs	r3, r7
    4204:	4aba      	ldr	r2, [pc, #744]	; (44f0 <hif_isr+0x384>)
    4206:	0019      	movs	r1, r3
    4208:	0010      	movs	r0, r2
    420a:	4bb5      	ldr	r3, [pc, #724]	; (44e0 <hif_isr+0x374>)
    420c:	4798      	blx	r3
    420e:	0003      	movs	r3, r0
    4210:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    4212:	230f      	movs	r3, #15
    4214:	18fb      	adds	r3, r7, r3
    4216:	781b      	ldrb	r3, [r3, #0]
    4218:	b25b      	sxtb	r3, r3
    421a:	2b00      	cmp	r3, #0
    421c:	d012      	beq.n	4244 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    421e:	23c8      	movs	r3, #200	; 0xc8
    4220:	33ff      	adds	r3, #255	; 0xff
    4222:	001a      	movs	r2, r3
    4224:	49b3      	ldr	r1, [pc, #716]	; (44f4 <hif_isr+0x388>)
    4226:	4bb4      	ldr	r3, [pc, #720]	; (44f8 <hif_isr+0x38c>)
    4228:	0018      	movs	r0, r3
    422a:	4bb4      	ldr	r3, [pc, #720]	; (44fc <hif_isr+0x390>)
    422c:	4798      	blx	r3
    422e:	4bb4      	ldr	r3, [pc, #720]	; (4500 <hif_isr+0x394>)
    4230:	0018      	movs	r0, r3
    4232:	4bb4      	ldr	r3, [pc, #720]	; (4504 <hif_isr+0x398>)
    4234:	4798      	blx	r3
    4236:	200d      	movs	r0, #13
    4238:	4bb3      	ldr	r3, [pc, #716]	; (4508 <hif_isr+0x39c>)
    423a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    423c:	2001      	movs	r0, #1
    423e:	4ba9      	ldr	r3, [pc, #676]	; (44e4 <hif_isr+0x378>)
    4240:	4798      	blx	r3
					goto ERR1;
    4242:	e1d3      	b.n	45ec <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    4244:	683a      	ldr	r2, [r7, #0]
    4246:	4ba9      	ldr	r3, [pc, #676]	; (44ec <hif_isr+0x380>)
    4248:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    424a:	230c      	movs	r3, #12
    424c:	18fb      	adds	r3, r7, r3
    424e:	881a      	ldrh	r2, [r3, #0]
    4250:	4ba6      	ldr	r3, [pc, #664]	; (44ec <hif_isr+0x380>)
    4252:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    4254:	683b      	ldr	r3, [r7, #0]
    4256:	220f      	movs	r2, #15
    4258:	18bc      	adds	r4, r7, r2
    425a:	1d39      	adds	r1, r7, #4
    425c:	2204      	movs	r2, #4
    425e:	0018      	movs	r0, r3
    4260:	4baa      	ldr	r3, [pc, #680]	; (450c <hif_isr+0x3a0>)
    4262:	4798      	blx	r3
    4264:	0003      	movs	r3, r0
    4266:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    4268:	1d3b      	adds	r3, r7, #4
    426a:	885b      	ldrh	r3, [r3, #2]
    426c:	b29a      	uxth	r2, r3
    426e:	1d3b      	adds	r3, r7, #4
    4270:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    4272:	230f      	movs	r3, #15
    4274:	18fb      	adds	r3, r7, r3
    4276:	781b      	ldrb	r3, [r3, #0]
    4278:	b25b      	sxtb	r3, r3
    427a:	2b00      	cmp	r3, #0
    427c:	d012      	beq.n	42a4 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    427e:	23d2      	movs	r3, #210	; 0xd2
    4280:	33ff      	adds	r3, #255	; 0xff
    4282:	001a      	movs	r2, r3
    4284:	499b      	ldr	r1, [pc, #620]	; (44f4 <hif_isr+0x388>)
    4286:	4b9c      	ldr	r3, [pc, #624]	; (44f8 <hif_isr+0x38c>)
    4288:	0018      	movs	r0, r3
    428a:	4b9c      	ldr	r3, [pc, #624]	; (44fc <hif_isr+0x390>)
    428c:	4798      	blx	r3
    428e:	4ba0      	ldr	r3, [pc, #640]	; (4510 <hif_isr+0x3a4>)
    4290:	0018      	movs	r0, r3
    4292:	4b9c      	ldr	r3, [pc, #624]	; (4504 <hif_isr+0x398>)
    4294:	4798      	blx	r3
    4296:	200d      	movs	r0, #13
    4298:	4b9b      	ldr	r3, [pc, #620]	; (4508 <hif_isr+0x39c>)
    429a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    429c:	2001      	movs	r0, #1
    429e:	4b91      	ldr	r3, [pc, #580]	; (44e4 <hif_isr+0x378>)
    42a0:	4798      	blx	r3
					goto ERR1;
    42a2:	e1a3      	b.n	45ec <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    42a4:	1d3b      	adds	r3, r7, #4
    42a6:	885b      	ldrh	r3, [r3, #2]
    42a8:	b29b      	uxth	r3, r3
    42aa:	220c      	movs	r2, #12
    42ac:	18ba      	adds	r2, r7, r2
    42ae:	8812      	ldrh	r2, [r2, #0]
    42b0:	429a      	cmp	r2, r3
    42b2:	d02d      	beq.n	4310 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    42b4:	230c      	movs	r3, #12
    42b6:	18fb      	adds	r3, r7, r3
    42b8:	881b      	ldrh	r3, [r3, #0]
    42ba:	1d3a      	adds	r2, r7, #4
    42bc:	8852      	ldrh	r2, [r2, #2]
    42be:	b292      	uxth	r2, r2
    42c0:	1a9b      	subs	r3, r3, r2
    42c2:	2b04      	cmp	r3, #4
    42c4:	dd24      	ble.n	4310 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    42c6:	23ed      	movs	r3, #237	; 0xed
    42c8:	005a      	lsls	r2, r3, #1
    42ca:	498a      	ldr	r1, [pc, #552]	; (44f4 <hif_isr+0x388>)
    42cc:	4b8a      	ldr	r3, [pc, #552]	; (44f8 <hif_isr+0x38c>)
    42ce:	0018      	movs	r0, r3
    42d0:	4b8a      	ldr	r3, [pc, #552]	; (44fc <hif_isr+0x390>)
    42d2:	4798      	blx	r3
    42d4:	230c      	movs	r3, #12
    42d6:	18fb      	adds	r3, r7, r3
    42d8:	8819      	ldrh	r1, [r3, #0]
    42da:	1d3b      	adds	r3, r7, #4
    42dc:	885b      	ldrh	r3, [r3, #2]
    42de:	b29b      	uxth	r3, r3
    42e0:	001a      	movs	r2, r3
    42e2:	1d3b      	adds	r3, r7, #4
    42e4:	781b      	ldrb	r3, [r3, #0]
    42e6:	b2db      	uxtb	r3, r3
    42e8:	001c      	movs	r4, r3
    42ea:	1d3b      	adds	r3, r7, #4
    42ec:	785b      	ldrb	r3, [r3, #1]
    42ee:	b2db      	uxtb	r3, r3
    42f0:	4888      	ldr	r0, [pc, #544]	; (4514 <hif_isr+0x3a8>)
    42f2:	9300      	str	r3, [sp, #0]
    42f4:	0023      	movs	r3, r4
    42f6:	4c81      	ldr	r4, [pc, #516]	; (44fc <hif_isr+0x390>)
    42f8:	47a0      	blx	r4
    42fa:	200d      	movs	r0, #13
    42fc:	4b82      	ldr	r3, [pc, #520]	; (4508 <hif_isr+0x39c>)
    42fe:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    4300:	2001      	movs	r0, #1
    4302:	4b78      	ldr	r3, [pc, #480]	; (44e4 <hif_isr+0x378>)
    4304:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    4306:	230f      	movs	r3, #15
    4308:	18fb      	adds	r3, r7, r3
    430a:	22fa      	movs	r2, #250	; 0xfa
    430c:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    430e:	e16d      	b.n	45ec <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    4310:	1d3b      	adds	r3, r7, #4
    4312:	781b      	ldrb	r3, [r3, #0]
    4314:	b2db      	uxtb	r3, r3
    4316:	2b01      	cmp	r3, #1
    4318:	d120      	bne.n	435c <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    431a:	4b74      	ldr	r3, [pc, #464]	; (44ec <hif_isr+0x380>)
    431c:	68db      	ldr	r3, [r3, #12]
    431e:	2b00      	cmp	r3, #0
    4320:	d00d      	beq.n	433e <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4322:	4b72      	ldr	r3, [pc, #456]	; (44ec <hif_isr+0x380>)
    4324:	68db      	ldr	r3, [r3, #12]
    4326:	1d3a      	adds	r2, r7, #4
    4328:	7852      	ldrb	r2, [r2, #1]
    432a:	b2d0      	uxtb	r0, r2
    432c:	1d3a      	adds	r2, r7, #4
    432e:	8852      	ldrh	r2, [r2, #2]
    4330:	b292      	uxth	r2, r2
    4332:	3a08      	subs	r2, #8
    4334:	b291      	uxth	r1, r2
    4336:	683a      	ldr	r2, [r7, #0]
    4338:	3208      	adds	r2, #8
    433a:	4798      	blx	r3
    433c:	e0fe      	b.n	453c <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    433e:	23f3      	movs	r3, #243	; 0xf3
    4340:	005a      	lsls	r2, r3, #1
    4342:	496c      	ldr	r1, [pc, #432]	; (44f4 <hif_isr+0x388>)
    4344:	4b6c      	ldr	r3, [pc, #432]	; (44f8 <hif_isr+0x38c>)
    4346:	0018      	movs	r0, r3
    4348:	4b6c      	ldr	r3, [pc, #432]	; (44fc <hif_isr+0x390>)
    434a:	4798      	blx	r3
    434c:	4b72      	ldr	r3, [pc, #456]	; (4518 <hif_isr+0x3ac>)
    434e:	0018      	movs	r0, r3
    4350:	4b6c      	ldr	r3, [pc, #432]	; (4504 <hif_isr+0x398>)
    4352:	4798      	blx	r3
    4354:	200d      	movs	r0, #13
    4356:	4b6c      	ldr	r3, [pc, #432]	; (4508 <hif_isr+0x39c>)
    4358:	4798      	blx	r3
    435a:	e0ef      	b.n	453c <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    435c:	1d3b      	adds	r3, r7, #4
    435e:	781b      	ldrb	r3, [r3, #0]
    4360:	b2db      	uxtb	r3, r3
    4362:	2b02      	cmp	r3, #2
    4364:	d120      	bne.n	43a8 <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    4366:	4b61      	ldr	r3, [pc, #388]	; (44ec <hif_isr+0x380>)
    4368:	691b      	ldr	r3, [r3, #16]
    436a:	2b00      	cmp	r3, #0
    436c:	d00d      	beq.n	438a <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    436e:	4b5f      	ldr	r3, [pc, #380]	; (44ec <hif_isr+0x380>)
    4370:	691b      	ldr	r3, [r3, #16]
    4372:	1d3a      	adds	r2, r7, #4
    4374:	7852      	ldrb	r2, [r2, #1]
    4376:	b2d0      	uxtb	r0, r2
    4378:	1d3a      	adds	r2, r7, #4
    437a:	8852      	ldrh	r2, [r2, #2]
    437c:	b292      	uxth	r2, r2
    437e:	3a08      	subs	r2, #8
    4380:	b291      	uxth	r1, r2
    4382:	683a      	ldr	r2, [r7, #0]
    4384:	3208      	adds	r2, #8
    4386:	4798      	blx	r3
    4388:	e0d8      	b.n	453c <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    438a:	23f7      	movs	r3, #247	; 0xf7
    438c:	005a      	lsls	r2, r3, #1
    438e:	4959      	ldr	r1, [pc, #356]	; (44f4 <hif_isr+0x388>)
    4390:	4b59      	ldr	r3, [pc, #356]	; (44f8 <hif_isr+0x38c>)
    4392:	0018      	movs	r0, r3
    4394:	4b59      	ldr	r3, [pc, #356]	; (44fc <hif_isr+0x390>)
    4396:	4798      	blx	r3
    4398:	4b60      	ldr	r3, [pc, #384]	; (451c <hif_isr+0x3b0>)
    439a:	0018      	movs	r0, r3
    439c:	4b59      	ldr	r3, [pc, #356]	; (4504 <hif_isr+0x398>)
    439e:	4798      	blx	r3
    43a0:	200d      	movs	r0, #13
    43a2:	4b59      	ldr	r3, [pc, #356]	; (4508 <hif_isr+0x39c>)
    43a4:	4798      	blx	r3
    43a6:	e0c9      	b.n	453c <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    43a8:	1d3b      	adds	r3, r7, #4
    43aa:	781b      	ldrb	r3, [r3, #0]
    43ac:	b2db      	uxtb	r3, r3
    43ae:	2b04      	cmp	r3, #4
    43b0:	d120      	bne.n	43f4 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    43b2:	4b4e      	ldr	r3, [pc, #312]	; (44ec <hif_isr+0x380>)
    43b4:	695b      	ldr	r3, [r3, #20]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d00d      	beq.n	43d6 <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    43ba:	4b4c      	ldr	r3, [pc, #304]	; (44ec <hif_isr+0x380>)
    43bc:	695b      	ldr	r3, [r3, #20]
    43be:	1d3a      	adds	r2, r7, #4
    43c0:	7852      	ldrb	r2, [r2, #1]
    43c2:	b2d0      	uxtb	r0, r2
    43c4:	1d3a      	adds	r2, r7, #4
    43c6:	8852      	ldrh	r2, [r2, #2]
    43c8:	b292      	uxth	r2, r2
    43ca:	3a08      	subs	r2, #8
    43cc:	b291      	uxth	r1, r2
    43ce:	683a      	ldr	r2, [r7, #0]
    43d0:	3208      	adds	r2, #8
    43d2:	4798      	blx	r3
    43d4:	e0b2      	b.n	453c <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    43d6:	23fb      	movs	r3, #251	; 0xfb
    43d8:	005a      	lsls	r2, r3, #1
    43da:	4946      	ldr	r1, [pc, #280]	; (44f4 <hif_isr+0x388>)
    43dc:	4b46      	ldr	r3, [pc, #280]	; (44f8 <hif_isr+0x38c>)
    43de:	0018      	movs	r0, r3
    43e0:	4b46      	ldr	r3, [pc, #280]	; (44fc <hif_isr+0x390>)
    43e2:	4798      	blx	r3
    43e4:	4b4e      	ldr	r3, [pc, #312]	; (4520 <hif_isr+0x3b4>)
    43e6:	0018      	movs	r0, r3
    43e8:	4b46      	ldr	r3, [pc, #280]	; (4504 <hif_isr+0x398>)
    43ea:	4798      	blx	r3
    43ec:	200d      	movs	r0, #13
    43ee:	4b46      	ldr	r3, [pc, #280]	; (4508 <hif_isr+0x39c>)
    43f0:	4798      	blx	r3
    43f2:	e0a3      	b.n	453c <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    43f4:	1d3b      	adds	r3, r7, #4
    43f6:	781b      	ldrb	r3, [r3, #0]
    43f8:	b2db      	uxtb	r3, r3
    43fa:	2b06      	cmp	r3, #6
    43fc:	d11f      	bne.n	443e <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    43fe:	4b3b      	ldr	r3, [pc, #236]	; (44ec <hif_isr+0x380>)
    4400:	6a1b      	ldr	r3, [r3, #32]
    4402:	2b00      	cmp	r3, #0
    4404:	d00d      	beq.n	4422 <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4406:	4b39      	ldr	r3, [pc, #228]	; (44ec <hif_isr+0x380>)
    4408:	6a1b      	ldr	r3, [r3, #32]
    440a:	1d3a      	adds	r2, r7, #4
    440c:	7852      	ldrb	r2, [r2, #1]
    440e:	b2d0      	uxtb	r0, r2
    4410:	1d3a      	adds	r2, r7, #4
    4412:	8852      	ldrh	r2, [r2, #2]
    4414:	b292      	uxth	r2, r2
    4416:	3a08      	subs	r2, #8
    4418:	b291      	uxth	r1, r2
    441a:	683a      	ldr	r2, [r7, #0]
    441c:	3208      	adds	r2, #8
    441e:	4798      	blx	r3
    4420:	e08c      	b.n	453c <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    4422:	4a40      	ldr	r2, [pc, #256]	; (4524 <hif_isr+0x3b8>)
    4424:	4933      	ldr	r1, [pc, #204]	; (44f4 <hif_isr+0x388>)
    4426:	4b34      	ldr	r3, [pc, #208]	; (44f8 <hif_isr+0x38c>)
    4428:	0018      	movs	r0, r3
    442a:	4b34      	ldr	r3, [pc, #208]	; (44fc <hif_isr+0x390>)
    442c:	4798      	blx	r3
    442e:	4b3e      	ldr	r3, [pc, #248]	; (4528 <hif_isr+0x3bc>)
    4430:	0018      	movs	r0, r3
    4432:	4b34      	ldr	r3, [pc, #208]	; (4504 <hif_isr+0x398>)
    4434:	4798      	blx	r3
    4436:	200d      	movs	r0, #13
    4438:	4b33      	ldr	r3, [pc, #204]	; (4508 <hif_isr+0x39c>)
    443a:	4798      	blx	r3
    443c:	e07e      	b.n	453c <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    443e:	1d3b      	adds	r3, r7, #4
    4440:	781b      	ldrb	r3, [r3, #0]
    4442:	b2db      	uxtb	r3, r3
    4444:	2b07      	cmp	r3, #7
    4446:	d11f      	bne.n	4488 <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    4448:	4b28      	ldr	r3, [pc, #160]	; (44ec <hif_isr+0x380>)
    444a:	699b      	ldr	r3, [r3, #24]
    444c:	2b00      	cmp	r3, #0
    444e:	d00d      	beq.n	446c <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4450:	4b26      	ldr	r3, [pc, #152]	; (44ec <hif_isr+0x380>)
    4452:	699b      	ldr	r3, [r3, #24]
    4454:	1d3a      	adds	r2, r7, #4
    4456:	7852      	ldrb	r2, [r2, #1]
    4458:	b2d0      	uxtb	r0, r2
    445a:	1d3a      	adds	r2, r7, #4
    445c:	8852      	ldrh	r2, [r2, #2]
    445e:	b292      	uxth	r2, r2
    4460:	3a08      	subs	r2, #8
    4462:	b291      	uxth	r1, r2
    4464:	683a      	ldr	r2, [r7, #0]
    4466:	3208      	adds	r2, #8
    4468:	4798      	blx	r3
    446a:	e067      	b.n	453c <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    446c:	4a2f      	ldr	r2, [pc, #188]	; (452c <hif_isr+0x3c0>)
    446e:	4921      	ldr	r1, [pc, #132]	; (44f4 <hif_isr+0x388>)
    4470:	4b21      	ldr	r3, [pc, #132]	; (44f8 <hif_isr+0x38c>)
    4472:	0018      	movs	r0, r3
    4474:	4b21      	ldr	r3, [pc, #132]	; (44fc <hif_isr+0x390>)
    4476:	4798      	blx	r3
    4478:	4b2d      	ldr	r3, [pc, #180]	; (4530 <hif_isr+0x3c4>)
    447a:	0018      	movs	r0, r3
    447c:	4b21      	ldr	r3, [pc, #132]	; (4504 <hif_isr+0x398>)
    447e:	4798      	blx	r3
    4480:	200d      	movs	r0, #13
    4482:	4b21      	ldr	r3, [pc, #132]	; (4508 <hif_isr+0x39c>)
    4484:	4798      	blx	r3
    4486:	e059      	b.n	453c <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    4488:	1d3b      	adds	r3, r7, #4
    448a:	781b      	ldrb	r3, [r3, #0]
    448c:	b2db      	uxtb	r3, r3
    448e:	2b05      	cmp	r3, #5
    4490:	d111      	bne.n	44b6 <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    4492:	4b16      	ldr	r3, [pc, #88]	; (44ec <hif_isr+0x380>)
    4494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4496:	2b00      	cmp	r3, #0
    4498:	d050      	beq.n	453c <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    449a:	4b14      	ldr	r3, [pc, #80]	; (44ec <hif_isr+0x380>)
    449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    449e:	1d3a      	adds	r2, r7, #4
    44a0:	7852      	ldrb	r2, [r2, #1]
    44a2:	b2d0      	uxtb	r0, r2
    44a4:	1d3a      	adds	r2, r7, #4
    44a6:	8852      	ldrh	r2, [r2, #2]
    44a8:	b292      	uxth	r2, r2
    44aa:	3a08      	subs	r2, #8
    44ac:	b291      	uxth	r1, r2
    44ae:	683a      	ldr	r2, [r7, #0]
    44b0:	3208      	adds	r2, #8
    44b2:	4798      	blx	r3
    44b4:	e042      	b.n	453c <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    44b6:	4a1f      	ldr	r2, [pc, #124]	; (4534 <hif_isr+0x3c8>)
    44b8:	490e      	ldr	r1, [pc, #56]	; (44f4 <hif_isr+0x388>)
    44ba:	4b0f      	ldr	r3, [pc, #60]	; (44f8 <hif_isr+0x38c>)
    44bc:	0018      	movs	r0, r3
    44be:	4b0f      	ldr	r3, [pc, #60]	; (44fc <hif_isr+0x390>)
    44c0:	4798      	blx	r3
    44c2:	4b1d      	ldr	r3, [pc, #116]	; (4538 <hif_isr+0x3cc>)
    44c4:	0018      	movs	r0, r3
    44c6:	4b0f      	ldr	r3, [pc, #60]	; (4504 <hif_isr+0x398>)
    44c8:	4798      	blx	r3
    44ca:	200d      	movs	r0, #13
    44cc:	4b0e      	ldr	r3, [pc, #56]	; (4508 <hif_isr+0x39c>)
    44ce:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    44d0:	230f      	movs	r3, #15
    44d2:	18fb      	adds	r3, r7, r3
    44d4:	22fa      	movs	r2, #250	; 0xfa
    44d6:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    44d8:	e088      	b.n	45ec <hif_isr+0x480>
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	00001070 	.word	0x00001070
    44e0:	00005ba9 	.word	0x00005ba9
    44e4:	0000331d 	.word	0x0000331d
    44e8:	00005bcd 	.word	0x00005bcd
    44ec:	200005f0 	.word	0x200005f0
    44f0:	00001084 	.word	0x00001084
    44f4:	000188c4 	.word	0x000188c4
    44f8:	000185c0 	.word	0x000185c0
    44fc:	00012f71 	.word	0x00012f71
    4500:	000185f0 	.word	0x000185f0
    4504:	0001308d 	.word	0x0001308d
    4508:	00012fa5 	.word	0x00012fa5
    450c:	00005c1d 	.word	0x00005c1d
    4510:	00018614 	.word	0x00018614
    4514:	0001862c 	.word	0x0001862c
    4518:	0001866c 	.word	0x0001866c
    451c:	0001868c 	.word	0x0001868c
    4520:	000186b0 	.word	0x000186b0
    4524:	000001ff 	.word	0x000001ff
    4528:	000186d0 	.word	0x000186d0
    452c:	00000206 	.word	0x00000206
    4530:	000186f4 	.word	0x000186f4
    4534:	0000020f 	.word	0x0000020f
    4538:	00018718 	.word	0x00018718
				}
				if(gstrHifCxt.u8HifRXDone)
    453c:	4b2f      	ldr	r3, [pc, #188]	; (45fc <hif_isr+0x490>)
    453e:	789b      	ldrb	r3, [r3, #2]
    4540:	b2db      	uxtb	r3, r3
    4542:	2b00      	cmp	r3, #0
    4544:	d052      	beq.n	45ec <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    4546:	4a2e      	ldr	r2, [pc, #184]	; (4600 <hif_isr+0x494>)
    4548:	492e      	ldr	r1, [pc, #184]	; (4604 <hif_isr+0x498>)
    454a:	4b2f      	ldr	r3, [pc, #188]	; (4608 <hif_isr+0x49c>)
    454c:	0018      	movs	r0, r3
    454e:	4b2f      	ldr	r3, [pc, #188]	; (460c <hif_isr+0x4a0>)
    4550:	4798      	blx	r3
    4552:	1d3b      	adds	r3, r7, #4
    4554:	781b      	ldrb	r3, [r3, #0]
    4556:	b2db      	uxtb	r3, r3
    4558:	0019      	movs	r1, r3
    455a:	1d3b      	adds	r3, r7, #4
    455c:	785b      	ldrb	r3, [r3, #1]
    455e:	b2db      	uxtb	r3, r3
    4560:	001a      	movs	r2, r3
    4562:	4b2b      	ldr	r3, [pc, #172]	; (4610 <hif_isr+0x4a4>)
    4564:	0018      	movs	r0, r3
    4566:	4b29      	ldr	r3, [pc, #164]	; (460c <hif_isr+0x4a0>)
    4568:	4798      	blx	r3
    456a:	200d      	movs	r0, #13
    456c:	4b29      	ldr	r3, [pc, #164]	; (4614 <hif_isr+0x4a8>)
    456e:	4798      	blx	r3
					ret = hif_set_rx_done();
    4570:	230f      	movs	r3, #15
    4572:	18fc      	adds	r4, r7, r3
    4574:	4b28      	ldr	r3, [pc, #160]	; (4618 <hif_isr+0x4ac>)
    4576:	4798      	blx	r3
    4578:	0003      	movs	r3, r0
    457a:	7023      	strb	r3, [r4, #0]
    457c:	e036      	b.n	45ec <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    457e:	2387      	movs	r3, #135	; 0x87
    4580:	009a      	lsls	r2, r3, #2
    4582:	4920      	ldr	r1, [pc, #128]	; (4604 <hif_isr+0x498>)
    4584:	4b20      	ldr	r3, [pc, #128]	; (4608 <hif_isr+0x49c>)
    4586:	0018      	movs	r0, r3
    4588:	4b20      	ldr	r3, [pc, #128]	; (460c <hif_isr+0x4a0>)
    458a:	4798      	blx	r3
    458c:	4b23      	ldr	r3, [pc, #140]	; (461c <hif_isr+0x4b0>)
    458e:	0018      	movs	r0, r3
    4590:	4b23      	ldr	r3, [pc, #140]	; (4620 <hif_isr+0x4b4>)
    4592:	4798      	blx	r3
    4594:	200d      	movs	r0, #13
    4596:	4b1f      	ldr	r3, [pc, #124]	; (4614 <hif_isr+0x4a8>)
    4598:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    459a:	230f      	movs	r3, #15
    459c:	18fb      	adds	r3, r7, r3
    459e:	22fe      	movs	r2, #254	; 0xfe
    45a0:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    45a2:	e023      	b.n	45ec <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    45a4:	2389      	movs	r3, #137	; 0x89
    45a6:	009a      	lsls	r2, r3, #2
    45a8:	4916      	ldr	r1, [pc, #88]	; (4604 <hif_isr+0x498>)
    45aa:	4b17      	ldr	r3, [pc, #92]	; (4608 <hif_isr+0x49c>)
    45ac:	0018      	movs	r0, r3
    45ae:	4b17      	ldr	r3, [pc, #92]	; (460c <hif_isr+0x4a0>)
    45b0:	4798      	blx	r3
    45b2:	68ba      	ldr	r2, [r7, #8]
    45b4:	4b1b      	ldr	r3, [pc, #108]	; (4624 <hif_isr+0x4b8>)
    45b6:	0011      	movs	r1, r2
    45b8:	0018      	movs	r0, r3
    45ba:	4b14      	ldr	r3, [pc, #80]	; (460c <hif_isr+0x4a0>)
    45bc:	4798      	blx	r3
    45be:	200d      	movs	r0, #13
    45c0:	4b14      	ldr	r3, [pc, #80]	; (4614 <hif_isr+0x4a8>)
    45c2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    45c4:	230f      	movs	r3, #15
    45c6:	18fb      	adds	r3, r7, r3
    45c8:	22f4      	movs	r2, #244	; 0xf4
    45ca:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    45cc:	e00e      	b.n	45ec <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    45ce:	4a16      	ldr	r2, [pc, #88]	; (4628 <hif_isr+0x4bc>)
    45d0:	490c      	ldr	r1, [pc, #48]	; (4604 <hif_isr+0x498>)
    45d2:	4b0d      	ldr	r3, [pc, #52]	; (4608 <hif_isr+0x49c>)
    45d4:	0018      	movs	r0, r3
    45d6:	4b0d      	ldr	r3, [pc, #52]	; (460c <hif_isr+0x4a0>)
    45d8:	4798      	blx	r3
    45da:	4b14      	ldr	r3, [pc, #80]	; (462c <hif_isr+0x4c0>)
    45dc:	0018      	movs	r0, r3
    45de:	4b10      	ldr	r3, [pc, #64]	; (4620 <hif_isr+0x4b4>)
    45e0:	4798      	blx	r3
    45e2:	200d      	movs	r0, #13
    45e4:	4b0b      	ldr	r3, [pc, #44]	; (4614 <hif_isr+0x4a8>)
    45e6:	4798      	blx	r3
		goto ERR1;
    45e8:	e000      	b.n	45ec <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    45ea:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    45ec:	230f      	movs	r3, #15
    45ee:	18fb      	adds	r3, r7, r3
    45f0:	781b      	ldrb	r3, [r3, #0]
    45f2:	b25b      	sxtb	r3, r3
}
    45f4:	0018      	movs	r0, r3
    45f6:	46bd      	mov	sp, r7
    45f8:	b005      	add	sp, #20
    45fa:	bd90      	pop	{r4, r7, pc}
    45fc:	200005f0 	.word	0x200005f0
    4600:	00000215 	.word	0x00000215
    4604:	000188c4 	.word	0x000188c4
    4608:	000185c0 	.word	0x000185c0
    460c:	00012f71 	.word	0x00012f71
    4610:	00018730 	.word	0x00018730
    4614:	00012fa5 	.word	0x00012fa5
    4618:	00003c05 	.word	0x00003c05
    461c:	0001875c 	.word	0x0001875c
    4620:	0001308d 	.word	0x0001308d
    4624:	00018770 	.word	0x00018770
    4628:	0000022d 	.word	0x0000022d
    462c:	0001878c 	.word	0x0001878c

00004630 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    4630:	b590      	push	{r4, r7, lr}
    4632:	b083      	sub	sp, #12
    4634:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    4636:	1dfb      	adds	r3, r7, #7
    4638:	2200      	movs	r2, #0
    463a:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    463c:	e023      	b.n	4686 <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    463e:	4b18      	ldr	r3, [pc, #96]	; (46a0 <hif_handle_isr+0x70>)
    4640:	78db      	ldrb	r3, [r3, #3]
    4642:	b2db      	uxtb	r3, r3
    4644:	3b01      	subs	r3, #1
    4646:	b2da      	uxtb	r2, r3
    4648:	4b15      	ldr	r3, [pc, #84]	; (46a0 <hif_handle_isr+0x70>)
    464a:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    464c:	1dfc      	adds	r4, r7, #7
    464e:	4b15      	ldr	r3, [pc, #84]	; (46a4 <hif_handle_isr+0x74>)
    4650:	4798      	blx	r3
    4652:	0003      	movs	r3, r0
    4654:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    4656:	1dfb      	adds	r3, r7, #7
    4658:	781b      	ldrb	r3, [r3, #0]
    465a:	b25b      	sxtb	r3, r3
    465c:	2b00      	cmp	r3, #0
    465e:	d100      	bne.n	4662 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    4660:	e011      	b.n	4686 <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    4662:	4a11      	ldr	r2, [pc, #68]	; (46a8 <hif_handle_isr+0x78>)
    4664:	4911      	ldr	r1, [pc, #68]	; (46ac <hif_handle_isr+0x7c>)
    4666:	4b12      	ldr	r3, [pc, #72]	; (46b0 <hif_handle_isr+0x80>)
    4668:	0018      	movs	r0, r3
    466a:	4b12      	ldr	r3, [pc, #72]	; (46b4 <hif_handle_isr+0x84>)
    466c:	4798      	blx	r3
    466e:	1dfb      	adds	r3, r7, #7
    4670:	2200      	movs	r2, #0
    4672:	569a      	ldrsb	r2, [r3, r2]
    4674:	4b10      	ldr	r3, [pc, #64]	; (46b8 <hif_handle_isr+0x88>)
    4676:	0011      	movs	r1, r2
    4678:	0018      	movs	r0, r3
    467a:	4b0e      	ldr	r3, [pc, #56]	; (46b4 <hif_handle_isr+0x84>)
    467c:	4798      	blx	r3
    467e:	200d      	movs	r0, #13
    4680:	4b0e      	ldr	r3, [pc, #56]	; (46bc <hif_handle_isr+0x8c>)
    4682:	4798      	blx	r3
			ret = hif_isr();
    4684:	e7e2      	b.n	464c <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    4686:	4b06      	ldr	r3, [pc, #24]	; (46a0 <hif_handle_isr+0x70>)
    4688:	78db      	ldrb	r3, [r3, #3]
    468a:	b2db      	uxtb	r3, r3
    468c:	2b00      	cmp	r3, #0
    468e:	d1d6      	bne.n	463e <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    4690:	1dfb      	adds	r3, r7, #7
    4692:	781b      	ldrb	r3, [r3, #0]
    4694:	b25b      	sxtb	r3, r3
}
    4696:	0018      	movs	r0, r3
    4698:	46bd      	mov	sp, r7
    469a:	b003      	add	sp, #12
    469c:	bd90      	pop	{r4, r7, pc}
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	200005f0 	.word	0x200005f0
    46a4:	0000416d 	.word	0x0000416d
    46a8:	0000024a 	.word	0x0000024a
    46ac:	000188cc 	.word	0x000188cc
    46b0:	000185c0 	.word	0x000185c0
    46b4:	00012f71 	.word	0x00012f71
    46b8:	000187b0 	.word	0x000187b0
    46bc:	00012fa5 	.word	0x00012fa5

000046c0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    46c0:	b590      	push	{r4, r7, lr}
    46c2:	b087      	sub	sp, #28
    46c4:	af00      	add	r7, sp, #0
    46c6:	60f8      	str	r0, [r7, #12]
    46c8:	60b9      	str	r1, [r7, #8]
    46ca:	0019      	movs	r1, r3
    46cc:	1dbb      	adds	r3, r7, #6
    46ce:	801a      	strh	r2, [r3, #0]
    46d0:	1d7b      	adds	r3, r7, #5
    46d2:	1c0a      	adds	r2, r1, #0
    46d4:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    46d6:	2317      	movs	r3, #23
    46d8:	18fb      	adds	r3, r7, r3
    46da:	2200      	movs	r2, #0
    46dc:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    46de:	68fb      	ldr	r3, [r7, #12]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d006      	beq.n	46f2 <hif_receive+0x32>
    46e4:	68bb      	ldr	r3, [r7, #8]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d003      	beq.n	46f2 <hif_receive+0x32>
    46ea:	1dbb      	adds	r3, r7, #6
    46ec:	881b      	ldrh	r3, [r3, #0]
    46ee:	2b00      	cmp	r3, #0
    46f0:	d11c      	bne.n	472c <hif_receive+0x6c>
	{
		if(isDone)
    46f2:	1d7b      	adds	r3, r7, #5
    46f4:	781b      	ldrb	r3, [r3, #0]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d006      	beq.n	4708 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    46fa:	2317      	movs	r3, #23
    46fc:	18fc      	adds	r4, r7, r3
    46fe:	4b42      	ldr	r3, [pc, #264]	; (4808 <hif_receive+0x148>)
    4700:	4798      	blx	r3
    4702:	0003      	movs	r3, r0
    4704:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    4706:	e077      	b.n	47f8 <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    4708:	2317      	movs	r3, #23
    470a:	18fb      	adds	r3, r7, r3
    470c:	22f4      	movs	r2, #244	; 0xf4
    470e:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    4710:	4a3e      	ldr	r2, [pc, #248]	; (480c <hif_receive+0x14c>)
    4712:	493f      	ldr	r1, [pc, #252]	; (4810 <hif_receive+0x150>)
    4714:	4b3f      	ldr	r3, [pc, #252]	; (4814 <hif_receive+0x154>)
    4716:	0018      	movs	r0, r3
    4718:	4b3f      	ldr	r3, [pc, #252]	; (4818 <hif_receive+0x158>)
    471a:	4798      	blx	r3
    471c:	4b3f      	ldr	r3, [pc, #252]	; (481c <hif_receive+0x15c>)
    471e:	0018      	movs	r0, r3
    4720:	4b3f      	ldr	r3, [pc, #252]	; (4820 <hif_receive+0x160>)
    4722:	4798      	blx	r3
    4724:	200d      	movs	r0, #13
    4726:	4b3f      	ldr	r3, [pc, #252]	; (4824 <hif_receive+0x164>)
    4728:	4798      	blx	r3
		goto ERR1;
    472a:	e065      	b.n	47f8 <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    472c:	1dbb      	adds	r3, r7, #6
    472e:	881a      	ldrh	r2, [r3, #0]
    4730:	4b3d      	ldr	r3, [pc, #244]	; (4828 <hif_receive+0x168>)
    4732:	689b      	ldr	r3, [r3, #8]
    4734:	429a      	cmp	r2, r3
    4736:	d915      	bls.n	4764 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    4738:	2317      	movs	r3, #23
    473a:	18fb      	adds	r3, r7, r3
    473c:	22f4      	movs	r2, #244	; 0xf4
    473e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    4740:	4a3a      	ldr	r2, [pc, #232]	; (482c <hif_receive+0x16c>)
    4742:	4933      	ldr	r1, [pc, #204]	; (4810 <hif_receive+0x150>)
    4744:	4b33      	ldr	r3, [pc, #204]	; (4814 <hif_receive+0x154>)
    4746:	0018      	movs	r0, r3
    4748:	4b33      	ldr	r3, [pc, #204]	; (4818 <hif_receive+0x158>)
    474a:	4798      	blx	r3
    474c:	1dbb      	adds	r3, r7, #6
    474e:	8819      	ldrh	r1, [r3, #0]
    4750:	4b35      	ldr	r3, [pc, #212]	; (4828 <hif_receive+0x168>)
    4752:	689a      	ldr	r2, [r3, #8]
    4754:	4b36      	ldr	r3, [pc, #216]	; (4830 <hif_receive+0x170>)
    4756:	0018      	movs	r0, r3
    4758:	4b2f      	ldr	r3, [pc, #188]	; (4818 <hif_receive+0x158>)
    475a:	4798      	blx	r3
    475c:	200d      	movs	r0, #13
    475e:	4b31      	ldr	r3, [pc, #196]	; (4824 <hif_receive+0x164>)
    4760:	4798      	blx	r3
		goto ERR1;
    4762:	e049      	b.n	47f8 <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    4764:	4b30      	ldr	r3, [pc, #192]	; (4828 <hif_receive+0x168>)
    4766:	685a      	ldr	r2, [r3, #4]
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	429a      	cmp	r2, r3
    476c:	d80a      	bhi.n	4784 <hif_receive+0xc4>
    476e:	1dbb      	adds	r3, r7, #6
    4770:	881a      	ldrh	r2, [r3, #0]
    4772:	68fb      	ldr	r3, [r7, #12]
    4774:	18d2      	adds	r2, r2, r3
    4776:	4b2c      	ldr	r3, [pc, #176]	; (4828 <hif_receive+0x168>)
    4778:	6859      	ldr	r1, [r3, #4]
    477a:	4b2b      	ldr	r3, [pc, #172]	; (4828 <hif_receive+0x168>)
    477c:	689b      	ldr	r3, [r3, #8]
    477e:	18cb      	adds	r3, r1, r3
    4780:	429a      	cmp	r2, r3
    4782:	d911      	bls.n	47a8 <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    4784:	2317      	movs	r3, #23
    4786:	18fb      	adds	r3, r7, r3
    4788:	22f4      	movs	r2, #244	; 0xf4
    478a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    478c:	4a29      	ldr	r2, [pc, #164]	; (4834 <hif_receive+0x174>)
    478e:	4920      	ldr	r1, [pc, #128]	; (4810 <hif_receive+0x150>)
    4790:	4b20      	ldr	r3, [pc, #128]	; (4814 <hif_receive+0x154>)
    4792:	0018      	movs	r0, r3
    4794:	4b20      	ldr	r3, [pc, #128]	; (4818 <hif_receive+0x158>)
    4796:	4798      	blx	r3
    4798:	4b27      	ldr	r3, [pc, #156]	; (4838 <hif_receive+0x178>)
    479a:	0018      	movs	r0, r3
    479c:	4b20      	ldr	r3, [pc, #128]	; (4820 <hif_receive+0x160>)
    479e:	4798      	blx	r3
    47a0:	200d      	movs	r0, #13
    47a2:	4b20      	ldr	r3, [pc, #128]	; (4824 <hif_receive+0x164>)
    47a4:	4798      	blx	r3
		goto ERR1;
    47a6:	e027      	b.n	47f8 <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    47a8:	1dbb      	adds	r3, r7, #6
    47aa:	881a      	ldrh	r2, [r3, #0]
    47ac:	2317      	movs	r3, #23
    47ae:	18fc      	adds	r4, r7, r3
    47b0:	68b9      	ldr	r1, [r7, #8]
    47b2:	68fb      	ldr	r3, [r7, #12]
    47b4:	0018      	movs	r0, r3
    47b6:	4b21      	ldr	r3, [pc, #132]	; (483c <hif_receive+0x17c>)
    47b8:	4798      	blx	r3
    47ba:	0003      	movs	r3, r0
    47bc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    47be:	2317      	movs	r3, #23
    47c0:	18fb      	adds	r3, r7, r3
    47c2:	781b      	ldrb	r3, [r3, #0]
    47c4:	b25b      	sxtb	r3, r3
    47c6:	2b00      	cmp	r3, #0
    47c8:	d115      	bne.n	47f6 <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    47ca:	4b17      	ldr	r3, [pc, #92]	; (4828 <hif_receive+0x168>)
    47cc:	685a      	ldr	r2, [r3, #4]
    47ce:	4b16      	ldr	r3, [pc, #88]	; (4828 <hif_receive+0x168>)
    47d0:	689b      	ldr	r3, [r3, #8]
    47d2:	18d2      	adds	r2, r2, r3
    47d4:	1dbb      	adds	r3, r7, #6
    47d6:	8819      	ldrh	r1, [r3, #0]
    47d8:	68fb      	ldr	r3, [r7, #12]
    47da:	18cb      	adds	r3, r1, r3
    47dc:	429a      	cmp	r2, r3
    47de:	d003      	beq.n	47e8 <hif_receive+0x128>
    47e0:	1d7b      	adds	r3, r7, #5
    47e2:	781b      	ldrb	r3, [r3, #0]
    47e4:	2b00      	cmp	r3, #0
    47e6:	d007      	beq.n	47f8 <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    47e8:	2317      	movs	r3, #23
    47ea:	18fc      	adds	r4, r7, r3
    47ec:	4b06      	ldr	r3, [pc, #24]	; (4808 <hif_receive+0x148>)
    47ee:	4798      	blx	r3
    47f0:	0003      	movs	r3, r0
    47f2:	7023      	strb	r3, [r4, #0]
    47f4:	e000      	b.n	47f8 <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    47f6:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    47f8:	2317      	movs	r3, #23
    47fa:	18fb      	adds	r3, r7, r3
    47fc:	781b      	ldrb	r3, [r3, #0]
    47fe:	b25b      	sxtb	r3, r3
}
    4800:	0018      	movs	r0, r3
    4802:	46bd      	mov	sp, r7
    4804:	b007      	add	sp, #28
    4806:	bd90      	pop	{r4, r7, pc}
    4808:	00003c05 	.word	0x00003c05
    480c:	0000026b 	.word	0x0000026b
    4810:	000188dc 	.word	0x000188dc
    4814:	000185c0 	.word	0x000185c0
    4818:	00012f71 	.word	0x00012f71
    481c:	000187e0 	.word	0x000187e0
    4820:	0001308d 	.word	0x0001308d
    4824:	00012fa5 	.word	0x00012fa5
    4828:	200005f0 	.word	0x200005f0
    482c:	00000273 	.word	0x00000273
    4830:	00018800 	.word	0x00018800
    4834:	00000279 	.word	0x00000279
    4838:	00018848 	.word	0x00018848
    483c:	00005c1d 	.word	0x00005c1d

00004840 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    4840:	b580      	push	{r7, lr}
    4842:	b084      	sub	sp, #16
    4844:	af00      	add	r7, sp, #0
    4846:	0002      	movs	r2, r0
    4848:	6039      	str	r1, [r7, #0]
    484a:	1dfb      	adds	r3, r7, #7
    484c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    484e:	230f      	movs	r3, #15
    4850:	18fb      	adds	r3, r7, r3
    4852:	2200      	movs	r2, #0
    4854:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    4856:	1dfb      	adds	r3, r7, #7
    4858:	781b      	ldrb	r3, [r3, #0]
    485a:	2b07      	cmp	r3, #7
    485c:	d820      	bhi.n	48a0 <hif_register_cb+0x60>
    485e:	009a      	lsls	r2, r3, #2
    4860:	4b1e      	ldr	r3, [pc, #120]	; (48dc <hif_register_cb+0x9c>)
    4862:	18d3      	adds	r3, r2, r3
    4864:	681b      	ldr	r3, [r3, #0]
    4866:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    4868:	4b1d      	ldr	r3, [pc, #116]	; (48e0 <hif_register_cb+0xa0>)
    486a:	683a      	ldr	r2, [r7, #0]
    486c:	611a      	str	r2, [r3, #16]
			break;
    486e:	e02c      	b.n	48ca <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    4870:	4b1b      	ldr	r3, [pc, #108]	; (48e0 <hif_register_cb+0xa0>)
    4872:	683a      	ldr	r2, [r7, #0]
    4874:	60da      	str	r2, [r3, #12]
			break;
    4876:	e028      	b.n	48ca <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    4878:	4b19      	ldr	r3, [pc, #100]	; (48e0 <hif_register_cb+0xa0>)
    487a:	683a      	ldr	r2, [r7, #0]
    487c:	615a      	str	r2, [r3, #20]
			break;
    487e:	e024      	b.n	48ca <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    4880:	4b17      	ldr	r3, [pc, #92]	; (48e0 <hif_register_cb+0xa0>)
    4882:	683a      	ldr	r2, [r7, #0]
    4884:	61da      	str	r2, [r3, #28]
			break;
    4886:	e020      	b.n	48ca <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    4888:	4b15      	ldr	r3, [pc, #84]	; (48e0 <hif_register_cb+0xa0>)
    488a:	683a      	ldr	r2, [r7, #0]
    488c:	621a      	str	r2, [r3, #32]
			break;
    488e:	e01c      	b.n	48ca <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    4890:	4b13      	ldr	r3, [pc, #76]	; (48e0 <hif_register_cb+0xa0>)
    4892:	683a      	ldr	r2, [r7, #0]
    4894:	619a      	str	r2, [r3, #24]
			break;
    4896:	e018      	b.n	48ca <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    4898:	4b11      	ldr	r3, [pc, #68]	; (48e0 <hif_register_cb+0xa0>)
    489a:	683a      	ldr	r2, [r7, #0]
    489c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    489e:	e014      	b.n	48ca <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    48a0:	4a10      	ldr	r2, [pc, #64]	; (48e4 <hif_register_cb+0xa4>)
    48a2:	4911      	ldr	r1, [pc, #68]	; (48e8 <hif_register_cb+0xa8>)
    48a4:	4b11      	ldr	r3, [pc, #68]	; (48ec <hif_register_cb+0xac>)
    48a6:	0018      	movs	r0, r3
    48a8:	4b11      	ldr	r3, [pc, #68]	; (48f0 <hif_register_cb+0xb0>)
    48aa:	4798      	blx	r3
    48ac:	1dfb      	adds	r3, r7, #7
    48ae:	781a      	ldrb	r2, [r3, #0]
    48b0:	4b10      	ldr	r3, [pc, #64]	; (48f4 <hif_register_cb+0xb4>)
    48b2:	0011      	movs	r1, r2
    48b4:	0018      	movs	r0, r3
    48b6:	4b0e      	ldr	r3, [pc, #56]	; (48f0 <hif_register_cb+0xb0>)
    48b8:	4798      	blx	r3
    48ba:	200d      	movs	r0, #13
    48bc:	4b0e      	ldr	r3, [pc, #56]	; (48f8 <hif_register_cb+0xb8>)
    48be:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    48c0:	230f      	movs	r3, #15
    48c2:	18fb      	adds	r3, r7, r3
    48c4:	22f4      	movs	r2, #244	; 0xf4
    48c6:	701a      	strb	r2, [r3, #0]
			break;
    48c8:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    48ca:	230f      	movs	r3, #15
    48cc:	18fb      	adds	r3, r7, r3
    48ce:	781b      	ldrb	r3, [r3, #0]
    48d0:	b25b      	sxtb	r3, r3
}
    48d2:	0018      	movs	r0, r3
    48d4:	46bd      	mov	sp, r7
    48d6:	b004      	add	sp, #16
    48d8:	bd80      	pop	{r7, pc}
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	00018898 	.word	0x00018898
    48e0:	200005f0 	.word	0x200005f0
    48e4:	000002b1 	.word	0x000002b1
    48e8:	000188e8 	.word	0x000188e8
    48ec:	000185c0 	.word	0x000185c0
    48f0:	00012f71 	.word	0x00012f71
    48f4:	0001888c 	.word	0x0001888c
    48f8:	00012fa5 	.word	0x00012fa5

000048fc <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    48fc:	b590      	push	{r4, r7, lr}
    48fe:	b0ad      	sub	sp, #180	; 0xb4
    4900:	af02      	add	r7, sp, #8
    4902:	603a      	str	r2, [r7, #0]
    4904:	1dfb      	adds	r3, r7, #7
    4906:	1c02      	adds	r2, r0, #0
    4908:	701a      	strb	r2, [r3, #0]
    490a:	1d3b      	adds	r3, r7, #4
    490c:	1c0a      	adds	r2, r1, #0
    490e:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    4910:	1dfb      	adds	r3, r7, #7
    4912:	781b      	ldrb	r3, [r3, #0]
    4914:	2b2c      	cmp	r3, #44	; 0x2c
    4916:	d116      	bne.n	4946 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    4918:	239c      	movs	r3, #156	; 0x9c
    491a:	18f9      	adds	r1, r7, r3
    491c:	6838      	ldr	r0, [r7, #0]
    491e:	2300      	movs	r3, #0
    4920:	2204      	movs	r2, #4
    4922:	4cc6      	ldr	r4, [pc, #792]	; (4c3c <m2m_wifi_cb+0x340>)
    4924:	47a0      	blx	r4
    4926:	1e03      	subs	r3, r0, #0
    4928:	d000      	beq.n	492c <m2m_wifi_cb+0x30>
    492a:	e1aa      	b.n	4c82 <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    492c:	4bc4      	ldr	r3, [pc, #784]	; (4c40 <m2m_wifi_cb+0x344>)
    492e:	681b      	ldr	r3, [r3, #0]
    4930:	2b00      	cmp	r3, #0
    4932:	d100      	bne.n	4936 <m2m_wifi_cb+0x3a>
    4934:	e1a5      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    4936:	4bc2      	ldr	r3, [pc, #776]	; (4c40 <m2m_wifi_cb+0x344>)
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	229c      	movs	r2, #156	; 0x9c
    493c:	18ba      	adds	r2, r7, r2
    493e:	0011      	movs	r1, r2
    4940:	202c      	movs	r0, #44	; 0x2c
    4942:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4944:	e19d      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    4946:	1dfb      	adds	r3, r7, #7
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	2b1b      	cmp	r3, #27
    494c:	d116      	bne.n	497c <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    494e:	2394      	movs	r3, #148	; 0x94
    4950:	18f9      	adds	r1, r7, r3
    4952:	6838      	ldr	r0, [r7, #0]
    4954:	2300      	movs	r3, #0
    4956:	2208      	movs	r2, #8
    4958:	4cb8      	ldr	r4, [pc, #736]	; (4c3c <m2m_wifi_cb+0x340>)
    495a:	47a0      	blx	r4
    495c:	1e03      	subs	r3, r0, #0
    495e:	d000      	beq.n	4962 <m2m_wifi_cb+0x66>
    4960:	e18f      	b.n	4c82 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4962:	4bb7      	ldr	r3, [pc, #732]	; (4c40 <m2m_wifi_cb+0x344>)
    4964:	681b      	ldr	r3, [r3, #0]
    4966:	2b00      	cmp	r3, #0
    4968:	d100      	bne.n	496c <m2m_wifi_cb+0x70>
    496a:	e18a      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    496c:	4bb4      	ldr	r3, [pc, #720]	; (4c40 <m2m_wifi_cb+0x344>)
    496e:	681b      	ldr	r3, [r3, #0]
    4970:	2294      	movs	r2, #148	; 0x94
    4972:	18ba      	adds	r2, r7, r2
    4974:	0011      	movs	r1, r2
    4976:	201b      	movs	r0, #27
    4978:	4798      	blx	r3
}
    497a:	e182      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    497c:	1dfb      	adds	r3, r7, #7
    497e:	781b      	ldrb	r3, [r3, #0]
    4980:	2b06      	cmp	r3, #6
    4982:	d116      	bne.n	49b2 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    4984:	2308      	movs	r3, #8
    4986:	18f9      	adds	r1, r7, r3
    4988:	6838      	ldr	r0, [r7, #0]
    498a:	2301      	movs	r3, #1
    498c:	2230      	movs	r2, #48	; 0x30
    498e:	4cab      	ldr	r4, [pc, #684]	; (4c3c <m2m_wifi_cb+0x340>)
    4990:	47a0      	blx	r4
    4992:	1e03      	subs	r3, r0, #0
    4994:	d000      	beq.n	4998 <m2m_wifi_cb+0x9c>
    4996:	e174      	b.n	4c82 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    4998:	4ba9      	ldr	r3, [pc, #676]	; (4c40 <m2m_wifi_cb+0x344>)
    499a:	681b      	ldr	r3, [r3, #0]
    499c:	2b00      	cmp	r3, #0
    499e:	d100      	bne.n	49a2 <m2m_wifi_cb+0xa6>
    49a0:	e16f      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    49a2:	4ba7      	ldr	r3, [pc, #668]	; (4c40 <m2m_wifi_cb+0x344>)
    49a4:	681b      	ldr	r3, [r3, #0]
    49a6:	2208      	movs	r2, #8
    49a8:	18ba      	adds	r2, r7, r2
    49aa:	0011      	movs	r1, r2
    49ac:	2006      	movs	r0, #6
    49ae:	4798      	blx	r3
}
    49b0:	e167      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    49b2:	1dfb      	adds	r3, r7, #7
    49b4:	781b      	ldrb	r3, [r3, #0]
    49b6:	2b0e      	cmp	r3, #14
    49b8:	d100      	bne.n	49bc <m2m_wifi_cb+0xc0>
    49ba:	e162      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    49bc:	1dfb      	adds	r3, r7, #7
    49be:	781b      	ldrb	r3, [r3, #0]
    49c0:	2b32      	cmp	r3, #50	; 0x32
    49c2:	d116      	bne.n	49f2 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    49c4:	2380      	movs	r3, #128	; 0x80
    49c6:	18f9      	adds	r1, r7, r3
    49c8:	6838      	ldr	r0, [r7, #0]
    49ca:	2300      	movs	r3, #0
    49cc:	2214      	movs	r2, #20
    49ce:	4c9b      	ldr	r4, [pc, #620]	; (4c3c <m2m_wifi_cb+0x340>)
    49d0:	47a0      	blx	r4
    49d2:	1e03      	subs	r3, r0, #0
    49d4:	d000      	beq.n	49d8 <m2m_wifi_cb+0xdc>
    49d6:	e154      	b.n	4c82 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    49d8:	4b99      	ldr	r3, [pc, #612]	; (4c40 <m2m_wifi_cb+0x344>)
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	2b00      	cmp	r3, #0
    49de:	d100      	bne.n	49e2 <m2m_wifi_cb+0xe6>
    49e0:	e14f      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    49e2:	4b97      	ldr	r3, [pc, #604]	; (4c40 <m2m_wifi_cb+0x344>)
    49e4:	681b      	ldr	r3, [r3, #0]
    49e6:	2280      	movs	r2, #128	; 0x80
    49e8:	18ba      	adds	r2, r7, r2
    49ea:	0011      	movs	r1, r2
    49ec:	2032      	movs	r0, #50	; 0x32
    49ee:	4798      	blx	r3
}
    49f0:	e147      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    49f2:	1dfb      	adds	r3, r7, #7
    49f4:	781b      	ldrb	r3, [r3, #0]
    49f6:	2b2f      	cmp	r3, #47	; 0x2f
    49f8:	d11d      	bne.n	4a36 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    49fa:	2308      	movs	r3, #8
    49fc:	18fb      	adds	r3, r7, r3
    49fe:	2264      	movs	r2, #100	; 0x64
    4a00:	2100      	movs	r1, #0
    4a02:	0018      	movs	r0, r3
    4a04:	4b8f      	ldr	r3, [pc, #572]	; (4c44 <m2m_wifi_cb+0x348>)
    4a06:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    4a08:	2308      	movs	r3, #8
    4a0a:	18f9      	adds	r1, r7, r3
    4a0c:	6838      	ldr	r0, [r7, #0]
    4a0e:	2300      	movs	r3, #0
    4a10:	2264      	movs	r2, #100	; 0x64
    4a12:	4c8a      	ldr	r4, [pc, #552]	; (4c3c <m2m_wifi_cb+0x340>)
    4a14:	47a0      	blx	r4
    4a16:	1e03      	subs	r3, r0, #0
    4a18:	d000      	beq.n	4a1c <m2m_wifi_cb+0x120>
    4a1a:	e132      	b.n	4c82 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4a1c:	4b88      	ldr	r3, [pc, #544]	; (4c40 <m2m_wifi_cb+0x344>)
    4a1e:	681b      	ldr	r3, [r3, #0]
    4a20:	2b00      	cmp	r3, #0
    4a22:	d100      	bne.n	4a26 <m2m_wifi_cb+0x12a>
    4a24:	e12d      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    4a26:	4b86      	ldr	r3, [pc, #536]	; (4c40 <m2m_wifi_cb+0x344>)
    4a28:	681b      	ldr	r3, [r3, #0]
    4a2a:	2208      	movs	r2, #8
    4a2c:	18ba      	adds	r2, r7, r2
    4a2e:	0011      	movs	r1, r2
    4a30:	202f      	movs	r0, #47	; 0x2f
    4a32:	4798      	blx	r3
}
    4a34:	e125      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    4a36:	1dfb      	adds	r3, r7, #7
    4a38:	781b      	ldrb	r3, [r3, #0]
    4a3a:	2b34      	cmp	r3, #52	; 0x34
    4a3c:	d12e      	bne.n	4a9c <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    4a3e:	237c      	movs	r3, #124	; 0x7c
    4a40:	18f9      	adds	r1, r7, r3
    4a42:	6838      	ldr	r0, [r7, #0]
    4a44:	2300      	movs	r3, #0
    4a46:	2204      	movs	r2, #4
    4a48:	4c7c      	ldr	r4, [pc, #496]	; (4c3c <m2m_wifi_cb+0x340>)
    4a4a:	47a0      	blx	r4
    4a4c:	1e03      	subs	r3, r0, #0
    4a4e:	d000      	beq.n	4a52 <m2m_wifi_cb+0x156>
    4a50:	e117      	b.n	4c82 <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    4a52:	4b7d      	ldr	r3, [pc, #500]	; (4c48 <m2m_wifi_cb+0x34c>)
    4a54:	0018      	movs	r0, r3
    4a56:	4b7d      	ldr	r3, [pc, #500]	; (4c4c <m2m_wifi_cb+0x350>)
    4a58:	4798      	blx	r3
    4a5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4a5c:	0e1b      	lsrs	r3, r3, #24
    4a5e:	b2db      	uxtb	r3, r3
    4a60:	0019      	movs	r1, r3
    4a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4a64:	0c1b      	lsrs	r3, r3, #16
    4a66:	b2db      	uxtb	r3, r3
    4a68:	001a      	movs	r2, r3
    4a6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4a6c:	0a1b      	lsrs	r3, r3, #8
    4a6e:	b2db      	uxtb	r3, r3
    4a70:	001c      	movs	r4, r3
    4a72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4a74:	b2db      	uxtb	r3, r3
    4a76:	4876      	ldr	r0, [pc, #472]	; (4c50 <m2m_wifi_cb+0x354>)
    4a78:	9300      	str	r3, [sp, #0]
    4a7a:	0023      	movs	r3, r4
    4a7c:	4c73      	ldr	r4, [pc, #460]	; (4c4c <m2m_wifi_cb+0x350>)
    4a7e:	47a0      	blx	r4
    4a80:	200d      	movs	r0, #13
    4a82:	4b74      	ldr	r3, [pc, #464]	; (4c54 <m2m_wifi_cb+0x358>)
    4a84:	4798      	blx	r3
			if (gpfAppWifiCb)
    4a86:	4b6e      	ldr	r3, [pc, #440]	; (4c40 <m2m_wifi_cb+0x344>)
    4a88:	681b      	ldr	r3, [r3, #0]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d100      	bne.n	4a90 <m2m_wifi_cb+0x194>
    4a8e:	e0f8      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    4a90:	4b6b      	ldr	r3, [pc, #428]	; (4c40 <m2m_wifi_cb+0x344>)
    4a92:	681b      	ldr	r3, [r3, #0]
    4a94:	2100      	movs	r1, #0
    4a96:	2034      	movs	r0, #52	; 0x34
    4a98:	4798      	blx	r3
}
    4a9a:	e0f2      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    4a9c:	1dfb      	adds	r3, r7, #7
    4a9e:	781b      	ldrb	r3, [r3, #0]
    4aa0:	2b11      	cmp	r3, #17
    4aa2:	d11e      	bne.n	4ae2 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    4aa4:	4b6c      	ldr	r3, [pc, #432]	; (4c58 <m2m_wifi_cb+0x35c>)
    4aa6:	2200      	movs	r2, #0
    4aa8:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    4aaa:	2378      	movs	r3, #120	; 0x78
    4aac:	18f9      	adds	r1, r7, r3
    4aae:	6838      	ldr	r0, [r7, #0]
    4ab0:	2300      	movs	r3, #0
    4ab2:	2204      	movs	r2, #4
    4ab4:	4c61      	ldr	r4, [pc, #388]	; (4c3c <m2m_wifi_cb+0x340>)
    4ab6:	47a0      	blx	r4
    4ab8:	1e03      	subs	r3, r0, #0
    4aba:	d000      	beq.n	4abe <m2m_wifi_cb+0x1c2>
    4abc:	e0e1      	b.n	4c82 <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    4abe:	2378      	movs	r3, #120	; 0x78
    4ac0:	18fb      	adds	r3, r7, r3
    4ac2:	781a      	ldrb	r2, [r3, #0]
    4ac4:	4b65      	ldr	r3, [pc, #404]	; (4c5c <m2m_wifi_cb+0x360>)
    4ac6:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    4ac8:	4b5d      	ldr	r3, [pc, #372]	; (4c40 <m2m_wifi_cb+0x344>)
    4aca:	681b      	ldr	r3, [r3, #0]
    4acc:	2b00      	cmp	r3, #0
    4ace:	d100      	bne.n	4ad2 <m2m_wifi_cb+0x1d6>
    4ad0:	e0d7      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    4ad2:	4b5b      	ldr	r3, [pc, #364]	; (4c40 <m2m_wifi_cb+0x344>)
    4ad4:	681b      	ldr	r3, [r3, #0]
    4ad6:	2278      	movs	r2, #120	; 0x78
    4ad8:	18ba      	adds	r2, r7, r2
    4ada:	0011      	movs	r1, r2
    4adc:	2011      	movs	r0, #17
    4ade:	4798      	blx	r3
}
    4ae0:	e0cf      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    4ae2:	1dfb      	adds	r3, r7, #7
    4ae4:	781b      	ldrb	r3, [r3, #0]
    4ae6:	2b13      	cmp	r3, #19
    4ae8:	d116      	bne.n	4b18 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    4aea:	2308      	movs	r3, #8
    4aec:	18f9      	adds	r1, r7, r3
    4aee:	6838      	ldr	r0, [r7, #0]
    4af0:	2300      	movs	r3, #0
    4af2:	222c      	movs	r2, #44	; 0x2c
    4af4:	4c51      	ldr	r4, [pc, #324]	; (4c3c <m2m_wifi_cb+0x340>)
    4af6:	47a0      	blx	r4
    4af8:	1e03      	subs	r3, r0, #0
    4afa:	d000      	beq.n	4afe <m2m_wifi_cb+0x202>
    4afc:	e0c1      	b.n	4c82 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4afe:	4b50      	ldr	r3, [pc, #320]	; (4c40 <m2m_wifi_cb+0x344>)
    4b00:	681b      	ldr	r3, [r3, #0]
    4b02:	2b00      	cmp	r3, #0
    4b04:	d100      	bne.n	4b08 <m2m_wifi_cb+0x20c>
    4b06:	e0bc      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    4b08:	4b4d      	ldr	r3, [pc, #308]	; (4c40 <m2m_wifi_cb+0x344>)
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	2208      	movs	r2, #8
    4b0e:	18ba      	adds	r2, r7, r2
    4b10:	0011      	movs	r1, r2
    4b12:	2013      	movs	r0, #19
    4b14:	4798      	blx	r3
}
    4b16:	e0b4      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    4b18:	1dfb      	adds	r3, r7, #7
    4b1a:	781b      	ldrb	r3, [r3, #0]
    4b1c:	2b04      	cmp	r3, #4
    4b1e:	d116      	bne.n	4b4e <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    4b20:	23a0      	movs	r3, #160	; 0xa0
    4b22:	18f9      	adds	r1, r7, r3
    4b24:	6838      	ldr	r0, [r7, #0]
    4b26:	2300      	movs	r3, #0
    4b28:	2204      	movs	r2, #4
    4b2a:	4c44      	ldr	r4, [pc, #272]	; (4c3c <m2m_wifi_cb+0x340>)
    4b2c:	47a0      	blx	r4
    4b2e:	1e03      	subs	r3, r0, #0
    4b30:	d000      	beq.n	4b34 <m2m_wifi_cb+0x238>
    4b32:	e0a6      	b.n	4c82 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4b34:	4b42      	ldr	r3, [pc, #264]	; (4c40 <m2m_wifi_cb+0x344>)
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d100      	bne.n	4b3e <m2m_wifi_cb+0x242>
    4b3c:	e0a1      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    4b3e:	4b40      	ldr	r3, [pc, #256]	; (4c40 <m2m_wifi_cb+0x344>)
    4b40:	681b      	ldr	r3, [r3, #0]
    4b42:	22a0      	movs	r2, #160	; 0xa0
    4b44:	18ba      	adds	r2, r7, r2
    4b46:	0011      	movs	r1, r2
    4b48:	2004      	movs	r0, #4
    4b4a:	4798      	blx	r3
}
    4b4c:	e099      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    4b4e:	1dfb      	adds	r3, r7, #7
    4b50:	781b      	ldrb	r3, [r3, #0]
    4b52:	2b65      	cmp	r3, #101	; 0x65
    4b54:	d116      	bne.n	4b84 <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    4b56:	23a0      	movs	r3, #160	; 0xa0
    4b58:	18f9      	adds	r1, r7, r3
    4b5a:	6838      	ldr	r0, [r7, #0]
    4b5c:	2300      	movs	r3, #0
    4b5e:	2204      	movs	r2, #4
    4b60:	4c36      	ldr	r4, [pc, #216]	; (4c3c <m2m_wifi_cb+0x340>)
    4b62:	47a0      	blx	r4
    4b64:	1e03      	subs	r3, r0, #0
    4b66:	d000      	beq.n	4b6a <m2m_wifi_cb+0x26e>
    4b68:	e08b      	b.n	4c82 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4b6a:	4b35      	ldr	r3, [pc, #212]	; (4c40 <m2m_wifi_cb+0x344>)
    4b6c:	681b      	ldr	r3, [r3, #0]
    4b6e:	2b00      	cmp	r3, #0
    4b70:	d100      	bne.n	4b74 <m2m_wifi_cb+0x278>
    4b72:	e086      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    4b74:	4b32      	ldr	r3, [pc, #200]	; (4c40 <m2m_wifi_cb+0x344>)
    4b76:	681b      	ldr	r3, [r3, #0]
    4b78:	22a0      	movs	r2, #160	; 0xa0
    4b7a:	18ba      	adds	r2, r7, r2
    4b7c:	0011      	movs	r1, r2
    4b7e:	2065      	movs	r0, #101	; 0x65
    4b80:	4798      	blx	r3
}
    4b82:	e07e      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    4b84:	1dfb      	adds	r3, r7, #7
    4b86:	781b      	ldrb	r3, [r3, #0]
    4b88:	2b09      	cmp	r3, #9
    4b8a:	d116      	bne.n	4bba <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    4b8c:	2308      	movs	r3, #8
    4b8e:	18f9      	adds	r1, r7, r3
    4b90:	6838      	ldr	r0, [r7, #0]
    4b92:	2301      	movs	r3, #1
    4b94:	2264      	movs	r2, #100	; 0x64
    4b96:	4c29      	ldr	r4, [pc, #164]	; (4c3c <m2m_wifi_cb+0x340>)
    4b98:	47a0      	blx	r4
    4b9a:	1e03      	subs	r3, r0, #0
    4b9c:	d000      	beq.n	4ba0 <m2m_wifi_cb+0x2a4>
    4b9e:	e070      	b.n	4c82 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    4ba0:	4b27      	ldr	r3, [pc, #156]	; (4c40 <m2m_wifi_cb+0x344>)
    4ba2:	681b      	ldr	r3, [r3, #0]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d100      	bne.n	4baa <m2m_wifi_cb+0x2ae>
    4ba8:	e06b      	b.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    4baa:	4b25      	ldr	r3, [pc, #148]	; (4c40 <m2m_wifi_cb+0x344>)
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	2208      	movs	r2, #8
    4bb0:	18ba      	adds	r2, r7, r2
    4bb2:	0011      	movs	r1, r2
    4bb4:	2009      	movs	r0, #9
    4bb6:	4798      	blx	r3
}
    4bb8:	e063      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    4bba:	1dfb      	adds	r3, r7, #7
    4bbc:	781b      	ldrb	r3, [r3, #0]
    4bbe:	2b2a      	cmp	r3, #42	; 0x2a
    4bc0:	d114      	bne.n	4bec <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    4bc2:	2374      	movs	r3, #116	; 0x74
    4bc4:	18f9      	adds	r1, r7, r3
    4bc6:	6838      	ldr	r0, [r7, #0]
    4bc8:	2301      	movs	r3, #1
    4bca:	2204      	movs	r2, #4
    4bcc:	4c1b      	ldr	r4, [pc, #108]	; (4c3c <m2m_wifi_cb+0x340>)
    4bce:	47a0      	blx	r4
    4bd0:	1e03      	subs	r3, r0, #0
    4bd2:	d156      	bne.n	4c82 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    4bd4:	4b1a      	ldr	r3, [pc, #104]	; (4c40 <m2m_wifi_cb+0x344>)
    4bd6:	681b      	ldr	r3, [r3, #0]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d052      	beq.n	4c82 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    4bdc:	4b18      	ldr	r3, [pc, #96]	; (4c40 <m2m_wifi_cb+0x344>)
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	2274      	movs	r2, #116	; 0x74
    4be2:	18ba      	adds	r2, r7, r2
    4be4:	0011      	movs	r1, r2
    4be6:	202a      	movs	r0, #42	; 0x2a
    4be8:	4798      	blx	r3
}
    4bea:	e04a      	b.n	4c82 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    4bec:	1dfb      	adds	r3, r7, #7
    4bee:	781b      	ldrb	r3, [r3, #0]
    4bf0:	2b20      	cmp	r3, #32
    4bf2:	d135      	bne.n	4c60 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    4bf4:	236c      	movs	r3, #108	; 0x6c
    4bf6:	18f9      	adds	r1, r7, r3
    4bf8:	6838      	ldr	r0, [r7, #0]
    4bfa:	2300      	movs	r3, #0
    4bfc:	2208      	movs	r2, #8
    4bfe:	4c0f      	ldr	r4, [pc, #60]	; (4c3c <m2m_wifi_cb+0x340>)
    4c00:	47a0      	blx	r4
    4c02:	1e03      	subs	r3, r0, #0
    4c04:	d13d      	bne.n	4c82 <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    4c06:	683b      	ldr	r3, [r7, #0]
    4c08:	3308      	adds	r3, #8
    4c0a:	0018      	movs	r0, r3
    4c0c:	236c      	movs	r3, #108	; 0x6c
    4c0e:	18fb      	adds	r3, r7, r3
    4c10:	6819      	ldr	r1, [r3, #0]
    4c12:	236c      	movs	r3, #108	; 0x6c
    4c14:	18fb      	adds	r3, r7, r3
    4c16:	889a      	ldrh	r2, [r3, #4]
    4c18:	2301      	movs	r3, #1
    4c1a:	4c08      	ldr	r4, [pc, #32]	; (4c3c <m2m_wifi_cb+0x340>)
    4c1c:	47a0      	blx	r4
    4c1e:	1e03      	subs	r3, r0, #0
    4c20:	d12f      	bne.n	4c82 <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    4c22:	4b07      	ldr	r3, [pc, #28]	; (4c40 <m2m_wifi_cb+0x344>)
    4c24:	681b      	ldr	r3, [r3, #0]
    4c26:	2b00      	cmp	r3, #0
    4c28:	d02b      	beq.n	4c82 <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    4c2a:	4b05      	ldr	r3, [pc, #20]	; (4c40 <m2m_wifi_cb+0x344>)
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	226c      	movs	r2, #108	; 0x6c
    4c30:	18ba      	adds	r2, r7, r2
    4c32:	0011      	movs	r1, r2
    4c34:	2020      	movs	r0, #32
    4c36:	4798      	blx	r3
}
    4c38:	e023      	b.n	4c82 <m2m_wifi_cb+0x386>
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	000046c1 	.word	0x000046c1
    4c40:	20000224 	.word	0x20000224
    4c44:	00003b6d 	.word	0x00003b6d
    4c48:	000188f8 	.word	0x000188f8
    4c4c:	00012f71 	.word	0x00012f71
    4c50:	00018904 	.word	0x00018904
    4c54:	00012fa5 	.word	0x00012fa5
    4c58:	20000221 	.word	0x20000221
    4c5c:	20000220 	.word	0x20000220
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    4c60:	2395      	movs	r3, #149	; 0x95
    4c62:	005a      	lsls	r2, r3, #1
    4c64:	4909      	ldr	r1, [pc, #36]	; (4c8c <m2m_wifi_cb+0x390>)
    4c66:	4b0a      	ldr	r3, [pc, #40]	; (4c90 <m2m_wifi_cb+0x394>)
    4c68:	0018      	movs	r0, r3
    4c6a:	4b0a      	ldr	r3, [pc, #40]	; (4c94 <m2m_wifi_cb+0x398>)
    4c6c:	4798      	blx	r3
    4c6e:	1dfb      	adds	r3, r7, #7
    4c70:	781a      	ldrb	r2, [r3, #0]
    4c72:	4b09      	ldr	r3, [pc, #36]	; (4c98 <m2m_wifi_cb+0x39c>)
    4c74:	0011      	movs	r1, r2
    4c76:	0018      	movs	r0, r3
    4c78:	4b06      	ldr	r3, [pc, #24]	; (4c94 <m2m_wifi_cb+0x398>)
    4c7a:	4798      	blx	r3
    4c7c:	200d      	movs	r0, #13
    4c7e:	4b07      	ldr	r3, [pc, #28]	; (4c9c <m2m_wifi_cb+0x3a0>)
    4c80:	4798      	blx	r3
}
    4c82:	46c0      	nop			; (mov r8, r8)
    4c84:	46bd      	mov	sp, r7
    4c86:	b02b      	add	sp, #172	; 0xac
    4c88:	bd90      	pop	{r4, r7, pc}
    4c8a:	46c0      	nop			; (mov r8, r8)
    4c8c:	00018cac 	.word	0x00018cac
    4c90:	00018924 	.word	0x00018924
    4c94:	00012f71 	.word	0x00012f71
    4c98:	00018938 	.word	0x00018938
    4c9c:	00012fa5 	.word	0x00012fa5

00004ca0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    4ca0:	b590      	push	{r4, r7, lr}
    4ca2:	b091      	sub	sp, #68	; 0x44
    4ca4:	af02      	add	r7, sp, #8
    4ca6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    4ca8:	2337      	movs	r3, #55	; 0x37
    4caa:	18fb      	adds	r3, r7, r3
    4cac:	2200      	movs	r2, #0
    4cae:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    4cb0:	230b      	movs	r3, #11
    4cb2:	18fb      	adds	r3, r7, r3
    4cb4:	2201      	movs	r2, #1
    4cb6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d104      	bne.n	4cc8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    4cbe:	2337      	movs	r3, #55	; 0x37
    4cc0:	18fb      	adds	r3, r7, r3
    4cc2:	22f4      	movs	r2, #244	; 0xf4
    4cc4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    4cc6:	e0ad      	b.n	4e24 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    4cc8:	687b      	ldr	r3, [r7, #4]
    4cca:	681a      	ldr	r2, [r3, #0]
    4ccc:	4b59      	ldr	r3, [pc, #356]	; (4e34 <m2m_wifi_init+0x194>)
    4cce:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    4cd0:	4b59      	ldr	r3, [pc, #356]	; (4e38 <m2m_wifi_init+0x198>)
    4cd2:	2200      	movs	r2, #0
    4cd4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    4cd6:	2337      	movs	r3, #55	; 0x37
    4cd8:	18fc      	adds	r4, r7, r3
    4cda:	230b      	movs	r3, #11
    4cdc:	18fb      	adds	r3, r7, r3
    4cde:	0018      	movs	r0, r3
    4ce0:	4b56      	ldr	r3, [pc, #344]	; (4e3c <m2m_wifi_init+0x19c>)
    4ce2:	4798      	blx	r3
    4ce4:	0003      	movs	r3, r0
    4ce6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    4ce8:	2337      	movs	r3, #55	; 0x37
    4cea:	18fb      	adds	r3, r7, r3
    4cec:	781b      	ldrb	r3, [r3, #0]
    4cee:	b25b      	sxtb	r3, r3
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d000      	beq.n	4cf6 <m2m_wifi_init+0x56>
    4cf4:	e093      	b.n	4e1e <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    4cf6:	2337      	movs	r3, #55	; 0x37
    4cf8:	18fc      	adds	r4, r7, r3
    4cfa:	2000      	movs	r0, #0
    4cfc:	4b50      	ldr	r3, [pc, #320]	; (4e40 <m2m_wifi_init+0x1a0>)
    4cfe:	4798      	blx	r3
    4d00:	0003      	movs	r3, r0
    4d02:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    4d04:	2337      	movs	r3, #55	; 0x37
    4d06:	18fb      	adds	r3, r7, r3
    4d08:	781b      	ldrb	r3, [r3, #0]
    4d0a:	b25b      	sxtb	r3, r3
    4d0c:	2b00      	cmp	r3, #0
    4d0e:	d000      	beq.n	4d12 <m2m_wifi_init+0x72>
    4d10:	e080      	b.n	4e14 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    4d12:	4b4c      	ldr	r3, [pc, #304]	; (4e44 <m2m_wifi_init+0x1a4>)
    4d14:	0019      	movs	r1, r3
    4d16:	2001      	movs	r0, #1
    4d18:	4b4b      	ldr	r3, [pc, #300]	; (4e48 <m2m_wifi_init+0x1a8>)
    4d1a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    4d1c:	2337      	movs	r3, #55	; 0x37
    4d1e:	18fc      	adds	r4, r7, r3
    4d20:	230c      	movs	r3, #12
    4d22:	18fb      	adds	r3, r7, r3
    4d24:	0018      	movs	r0, r3
    4d26:	4b49      	ldr	r3, [pc, #292]	; (4e4c <m2m_wifi_init+0x1ac>)
    4d28:	4798      	blx	r3
    4d2a:	0003      	movs	r3, r0
    4d2c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    4d2e:	4b48      	ldr	r3, [pc, #288]	; (4e50 <m2m_wifi_init+0x1b0>)
    4d30:	0018      	movs	r0, r3
    4d32:	4b48      	ldr	r3, [pc, #288]	; (4e54 <m2m_wifi_init+0x1b4>)
    4d34:	4798      	blx	r3
    4d36:	230c      	movs	r3, #12
    4d38:	18fb      	adds	r3, r7, r3
    4d3a:	791b      	ldrb	r3, [r3, #4]
    4d3c:	0019      	movs	r1, r3
    4d3e:	230c      	movs	r3, #12
    4d40:	18fb      	adds	r3, r7, r3
    4d42:	795b      	ldrb	r3, [r3, #5]
    4d44:	001a      	movs	r2, r3
    4d46:	230c      	movs	r3, #12
    4d48:	18fb      	adds	r3, r7, r3
    4d4a:	799b      	ldrb	r3, [r3, #6]
    4d4c:	001c      	movs	r4, r3
    4d4e:	230c      	movs	r3, #12
    4d50:	18fb      	adds	r3, r7, r3
    4d52:	8c1b      	ldrh	r3, [r3, #32]
    4d54:	4840      	ldr	r0, [pc, #256]	; (4e58 <m2m_wifi_init+0x1b8>)
    4d56:	9300      	str	r3, [sp, #0]
    4d58:	0023      	movs	r3, r4
    4d5a:	4c3e      	ldr	r4, [pc, #248]	; (4e54 <m2m_wifi_init+0x1b4>)
    4d5c:	47a0      	blx	r4
    4d5e:	200d      	movs	r0, #13
    4d60:	4b3e      	ldr	r3, [pc, #248]	; (4e5c <m2m_wifi_init+0x1bc>)
    4d62:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    4d64:	4b3a      	ldr	r3, [pc, #232]	; (4e50 <m2m_wifi_init+0x1b0>)
    4d66:	0018      	movs	r0, r3
    4d68:	4b3a      	ldr	r3, [pc, #232]	; (4e54 <m2m_wifi_init+0x1b4>)
    4d6a:	4798      	blx	r3
    4d6c:	230c      	movs	r3, #12
    4d6e:	18fb      	adds	r3, r7, r3
    4d70:	3316      	adds	r3, #22
    4d72:	001a      	movs	r2, r3
    4d74:	230c      	movs	r3, #12
    4d76:	18fb      	adds	r3, r7, r3
    4d78:	330a      	adds	r3, #10
    4d7a:	0019      	movs	r1, r3
    4d7c:	4b38      	ldr	r3, [pc, #224]	; (4e60 <m2m_wifi_init+0x1c0>)
    4d7e:	0018      	movs	r0, r3
    4d80:	4b34      	ldr	r3, [pc, #208]	; (4e54 <m2m_wifi_init+0x1b4>)
    4d82:	4798      	blx	r3
    4d84:	200d      	movs	r0, #13
    4d86:	4b35      	ldr	r3, [pc, #212]	; (4e5c <m2m_wifi_init+0x1bc>)
    4d88:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    4d8a:	4b31      	ldr	r3, [pc, #196]	; (4e50 <m2m_wifi_init+0x1b0>)
    4d8c:	0018      	movs	r0, r3
    4d8e:	4b31      	ldr	r3, [pc, #196]	; (4e54 <m2m_wifi_init+0x1b4>)
    4d90:	4798      	blx	r3
    4d92:	230c      	movs	r3, #12
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	79db      	ldrb	r3, [r3, #7]
    4d98:	0019      	movs	r1, r3
    4d9a:	230c      	movs	r3, #12
    4d9c:	18fb      	adds	r3, r7, r3
    4d9e:	7a1b      	ldrb	r3, [r3, #8]
    4da0:	001a      	movs	r2, r3
    4da2:	230c      	movs	r3, #12
    4da4:	18fb      	adds	r3, r7, r3
    4da6:	7a5b      	ldrb	r3, [r3, #9]
    4da8:	482e      	ldr	r0, [pc, #184]	; (4e64 <m2m_wifi_init+0x1c4>)
    4daa:	4c2a      	ldr	r4, [pc, #168]	; (4e54 <m2m_wifi_init+0x1b4>)
    4dac:	47a0      	blx	r4
    4dae:	200d      	movs	r0, #13
    4db0:	4b2a      	ldr	r3, [pc, #168]	; (4e5c <m2m_wifi_init+0x1bc>)
    4db2:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    4db4:	4b26      	ldr	r3, [pc, #152]	; (4e50 <m2m_wifi_init+0x1b0>)
    4db6:	0018      	movs	r0, r3
    4db8:	4b26      	ldr	r3, [pc, #152]	; (4e54 <m2m_wifi_init+0x1b4>)
    4dba:	4798      	blx	r3
    4dbc:	482a      	ldr	r0, [pc, #168]	; (4e68 <m2m_wifi_init+0x1c8>)
    4dbe:	2302      	movs	r3, #2
    4dc0:	2205      	movs	r2, #5
    4dc2:	2113      	movs	r1, #19
    4dc4:	4c23      	ldr	r4, [pc, #140]	; (4e54 <m2m_wifi_init+0x1b4>)
    4dc6:	47a0      	blx	r4
    4dc8:	200d      	movs	r0, #13
    4dca:	4b24      	ldr	r3, [pc, #144]	; (4e5c <m2m_wifi_init+0x1bc>)
    4dcc:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    4dce:	4b20      	ldr	r3, [pc, #128]	; (4e50 <m2m_wifi_init+0x1b0>)
    4dd0:	0018      	movs	r0, r3
    4dd2:	4b20      	ldr	r3, [pc, #128]	; (4e54 <m2m_wifi_init+0x1b4>)
    4dd4:	4798      	blx	r3
    4dd6:	4a25      	ldr	r2, [pc, #148]	; (4e6c <m2m_wifi_init+0x1cc>)
    4dd8:	4925      	ldr	r1, [pc, #148]	; (4e70 <m2m_wifi_init+0x1d0>)
    4dda:	4b26      	ldr	r3, [pc, #152]	; (4e74 <m2m_wifi_init+0x1d4>)
    4ddc:	0018      	movs	r0, r3
    4dde:	4b1d      	ldr	r3, [pc, #116]	; (4e54 <m2m_wifi_init+0x1b4>)
    4de0:	4798      	blx	r3
    4de2:	200d      	movs	r0, #13
    4de4:	4b1d      	ldr	r3, [pc, #116]	; (4e5c <m2m_wifi_init+0x1bc>)
    4de6:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    4de8:	2337      	movs	r3, #55	; 0x37
    4dea:	18fb      	adds	r3, r7, r3
    4dec:	781b      	ldrb	r3, [r3, #0]
    4dee:	b25b      	sxtb	r3, r3
    4df0:	330d      	adds	r3, #13
    4df2:	d116      	bne.n	4e22 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    4df4:	23ee      	movs	r3, #238	; 0xee
    4df6:	33ff      	adds	r3, #255	; 0xff
    4df8:	001a      	movs	r2, r3
    4dfa:	491f      	ldr	r1, [pc, #124]	; (4e78 <m2m_wifi_init+0x1d8>)
    4dfc:	4b1f      	ldr	r3, [pc, #124]	; (4e7c <m2m_wifi_init+0x1dc>)
    4dfe:	0018      	movs	r0, r3
    4e00:	4b14      	ldr	r3, [pc, #80]	; (4e54 <m2m_wifi_init+0x1b4>)
    4e02:	4798      	blx	r3
    4e04:	4b1e      	ldr	r3, [pc, #120]	; (4e80 <m2m_wifi_init+0x1e0>)
    4e06:	0018      	movs	r0, r3
    4e08:	4b1e      	ldr	r3, [pc, #120]	; (4e84 <m2m_wifi_init+0x1e4>)
    4e0a:	4798      	blx	r3
    4e0c:	200d      	movs	r0, #13
    4e0e:	4b13      	ldr	r3, [pc, #76]	; (4e5c <m2m_wifi_init+0x1bc>)
    4e10:	4798      	blx	r3
	}

	goto _EXIT0;
    4e12:	e006      	b.n	4e22 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    4e14:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    4e16:	2000      	movs	r0, #0
    4e18:	4b1b      	ldr	r3, [pc, #108]	; (4e88 <m2m_wifi_init+0x1e8>)
    4e1a:	4798      	blx	r3
    4e1c:	e002      	b.n	4e24 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    4e1e:	46c0      	nop			; (mov r8, r8)
    4e20:	e000      	b.n	4e24 <m2m_wifi_init+0x184>
	goto _EXIT0;
    4e22:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    4e24:	2337      	movs	r3, #55	; 0x37
    4e26:	18fb      	adds	r3, r7, r3
    4e28:	781b      	ldrb	r3, [r3, #0]
    4e2a:	b25b      	sxtb	r3, r3
}
    4e2c:	0018      	movs	r0, r3
    4e2e:	46bd      	mov	sp, r7
    4e30:	b00f      	add	sp, #60	; 0x3c
    4e32:	bd90      	pop	{r4, r7, pc}
    4e34:	20000224 	.word	0x20000224
    4e38:	20000221 	.word	0x20000221
    4e3c:	00005fad 	.word	0x00005fad
    4e40:	00003d85 	.word	0x00003d85
    4e44:	000048fd 	.word	0x000048fd
    4e48:	00004841 	.word	0x00004841
    4e4c:	00005de1 	.word	0x00005de1
    4e50:	000188f8 	.word	0x000188f8
    4e54:	00012f71 	.word	0x00012f71
    4e58:	00018a8c 	.word	0x00018a8c
    4e5c:	00012fa5 	.word	0x00012fa5
    4e60:	00018ab4 	.word	0x00018ab4
    4e64:	00018ad0 	.word	0x00018ad0
    4e68:	00018af4 	.word	0x00018af4
    4e6c:	00018b0c 	.word	0x00018b0c
    4e70:	00018b18 	.word	0x00018b18
    4e74:	00018b24 	.word	0x00018b24
    4e78:	00018cb8 	.word	0x00018cb8
    4e7c:	00018924 	.word	0x00018924
    4e80:	00018b3c 	.word	0x00018b3c
    4e84:	0001308d 	.word	0x0001308d
    4e88:	00006141 	.word	0x00006141

00004e8c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    4e8c:	b580      	push	{r7, lr}
    4e8e:	b082      	sub	sp, #8
    4e90:	af00      	add	r7, sp, #0
    4e92:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    4e94:	4b03      	ldr	r3, [pc, #12]	; (4ea4 <m2m_wifi_handle_events+0x18>)
    4e96:	4798      	blx	r3
    4e98:	0003      	movs	r3, r0
}
    4e9a:	0018      	movs	r0, r3
    4e9c:	46bd      	mov	sp, r7
    4e9e:	b002      	add	sp, #8
    4ea0:	bd80      	pop	{r7, pc}
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	00004631 	.word	0x00004631

00004ea8 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    4ea8:	b590      	push	{r4, r7, lr}
    4eaa:	b087      	sub	sp, #28
    4eac:	af02      	add	r7, sp, #8
    4eae:	60f8      	str	r0, [r7, #12]
    4eb0:	0008      	movs	r0, r1
    4eb2:	0011      	movs	r1, r2
    4eb4:	607b      	str	r3, [r7, #4]
    4eb6:	230b      	movs	r3, #11
    4eb8:	18fb      	adds	r3, r7, r3
    4eba:	1c02      	adds	r2, r0, #0
    4ebc:	701a      	strb	r2, [r3, #0]
    4ebe:	230a      	movs	r3, #10
    4ec0:	18fb      	adds	r3, r7, r3
    4ec2:	1c0a      	adds	r2, r1, #0
    4ec4:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    4ec6:	687c      	ldr	r4, [r7, #4]
    4ec8:	230a      	movs	r3, #10
    4eca:	18fb      	adds	r3, r7, r3
    4ecc:	781a      	ldrb	r2, [r3, #0]
    4ece:	230b      	movs	r3, #11
    4ed0:	18fb      	adds	r3, r7, r3
    4ed2:	7819      	ldrb	r1, [r3, #0]
    4ed4:	68f8      	ldr	r0, [r7, #12]
    4ed6:	2300      	movs	r3, #0
    4ed8:	9301      	str	r3, [sp, #4]
    4eda:	2320      	movs	r3, #32
    4edc:	18fb      	adds	r3, r7, r3
    4ede:	881b      	ldrh	r3, [r3, #0]
    4ee0:	9300      	str	r3, [sp, #0]
    4ee2:	0023      	movs	r3, r4
    4ee4:	4c03      	ldr	r4, [pc, #12]	; (4ef4 <m2m_wifi_connect+0x4c>)
    4ee6:	47a0      	blx	r4
    4ee8:	0003      	movs	r3, r0
}
    4eea:	0018      	movs	r0, r3
    4eec:	46bd      	mov	sp, r7
    4eee:	b005      	add	sp, #20
    4ef0:	bd90      	pop	{r4, r7, pc}
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	00004ef9 	.word	0x00004ef9

00004ef8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    4ef8:	b5b0      	push	{r4, r5, r7, lr}
    4efa:	b0aa      	sub	sp, #168	; 0xa8
    4efc:	af04      	add	r7, sp, #16
    4efe:	60f8      	str	r0, [r7, #12]
    4f00:	0008      	movs	r0, r1
    4f02:	0011      	movs	r1, r2
    4f04:	607b      	str	r3, [r7, #4]
    4f06:	230b      	movs	r3, #11
    4f08:	18fb      	adds	r3, r7, r3
    4f0a:	1c02      	adds	r2, r0, #0
    4f0c:	701a      	strb	r2, [r3, #0]
    4f0e:	230a      	movs	r3, #10
    4f10:	18fb      	adds	r3, r7, r3
    4f12:	1c0a      	adds	r2, r1, #0
    4f14:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    4f16:	2397      	movs	r3, #151	; 0x97
    4f18:	18fb      	adds	r3, r7, r3
    4f1a:	2200      	movs	r2, #0
    4f1c:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    4f1e:	230a      	movs	r3, #10
    4f20:	18fb      	adds	r3, r7, r3
    4f22:	781b      	ldrb	r3, [r3, #0]
    4f24:	2b01      	cmp	r3, #1
    4f26:	d100      	bne.n	4f2a <m2m_wifi_connect_sc+0x32>
    4f28:	e083      	b.n	5032 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    4f2a:	687b      	ldr	r3, [r7, #4]
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d111      	bne.n	4f54 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    4f30:	4adb      	ldr	r2, [pc, #876]	; (52a0 <m2m_wifi_connect_sc+0x3a8>)
    4f32:	49dc      	ldr	r1, [pc, #880]	; (52a4 <m2m_wifi_connect_sc+0x3ac>)
    4f34:	4bdc      	ldr	r3, [pc, #880]	; (52a8 <m2m_wifi_connect_sc+0x3b0>)
    4f36:	0018      	movs	r0, r3
    4f38:	4bdc      	ldr	r3, [pc, #880]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    4f3a:	4798      	blx	r3
    4f3c:	4bdc      	ldr	r3, [pc, #880]	; (52b0 <m2m_wifi_connect_sc+0x3b8>)
    4f3e:	0018      	movs	r0, r3
    4f40:	4bdc      	ldr	r3, [pc, #880]	; (52b4 <m2m_wifi_connect_sc+0x3bc>)
    4f42:	4798      	blx	r3
    4f44:	200d      	movs	r0, #13
    4f46:	4bdc      	ldr	r3, [pc, #880]	; (52b8 <m2m_wifi_connect_sc+0x3c0>)
    4f48:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    4f4a:	2397      	movs	r3, #151	; 0x97
    4f4c:	18fb      	adds	r3, r7, r3
    4f4e:	22f4      	movs	r2, #244	; 0xf4
    4f50:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    4f52:	e1f5      	b.n	5340 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    4f54:	230a      	movs	r3, #10
    4f56:	18fb      	adds	r3, r7, r3
    4f58:	781b      	ldrb	r3, [r3, #0]
    4f5a:	2b02      	cmp	r3, #2
    4f5c:	d169      	bne.n	5032 <m2m_wifi_connect_sc+0x13a>
    4f5e:	687b      	ldr	r3, [r7, #4]
    4f60:	0018      	movs	r0, r3
    4f62:	4bd6      	ldr	r3, [pc, #856]	; (52bc <m2m_wifi_connect_sc+0x3c4>)
    4f64:	4798      	blx	r3
    4f66:	0003      	movs	r3, r0
    4f68:	2b40      	cmp	r3, #64	; 0x40
    4f6a:	d162      	bne.n	5032 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    4f6c:	2396      	movs	r3, #150	; 0x96
    4f6e:	18fb      	adds	r3, r7, r3
    4f70:	2200      	movs	r2, #0
    4f72:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    4f74:	687b      	ldr	r3, [r7, #4]
    4f76:	2290      	movs	r2, #144	; 0x90
    4f78:	18ba      	adds	r2, r7, r2
    4f7a:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    4f7c:	e054      	b.n	5028 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    4f7e:	2396      	movs	r3, #150	; 0x96
    4f80:	18fb      	adds	r3, r7, r3
    4f82:	781b      	ldrb	r3, [r3, #0]
    4f84:	2290      	movs	r2, #144	; 0x90
    4f86:	18ba      	adds	r2, r7, r2
    4f88:	6812      	ldr	r2, [r2, #0]
    4f8a:	18d3      	adds	r3, r2, r3
    4f8c:	781b      	ldrb	r3, [r3, #0]
    4f8e:	2b2f      	cmp	r3, #47	; 0x2f
    4f90:	d931      	bls.n	4ff6 <m2m_wifi_connect_sc+0xfe>
    4f92:	2396      	movs	r3, #150	; 0x96
    4f94:	18fb      	adds	r3, r7, r3
    4f96:	781b      	ldrb	r3, [r3, #0]
    4f98:	2290      	movs	r2, #144	; 0x90
    4f9a:	18ba      	adds	r2, r7, r2
    4f9c:	6812      	ldr	r2, [r2, #0]
    4f9e:	18d3      	adds	r3, r2, r3
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	2b39      	cmp	r3, #57	; 0x39
    4fa4:	d909      	bls.n	4fba <m2m_wifi_connect_sc+0xc2>
    4fa6:	2396      	movs	r3, #150	; 0x96
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	781b      	ldrb	r3, [r3, #0]
    4fac:	2290      	movs	r2, #144	; 0x90
    4fae:	18ba      	adds	r2, r7, r2
    4fb0:	6812      	ldr	r2, [r2, #0]
    4fb2:	18d3      	adds	r3, r2, r3
    4fb4:	781b      	ldrb	r3, [r3, #0]
    4fb6:	2b40      	cmp	r3, #64	; 0x40
    4fb8:	d91d      	bls.n	4ff6 <m2m_wifi_connect_sc+0xfe>
    4fba:	2396      	movs	r3, #150	; 0x96
    4fbc:	18fb      	adds	r3, r7, r3
    4fbe:	781b      	ldrb	r3, [r3, #0]
    4fc0:	2290      	movs	r2, #144	; 0x90
    4fc2:	18ba      	adds	r2, r7, r2
    4fc4:	6812      	ldr	r2, [r2, #0]
    4fc6:	18d3      	adds	r3, r2, r3
    4fc8:	781b      	ldrb	r3, [r3, #0]
    4fca:	2b46      	cmp	r3, #70	; 0x46
    4fcc:	d909      	bls.n	4fe2 <m2m_wifi_connect_sc+0xea>
    4fce:	2396      	movs	r3, #150	; 0x96
    4fd0:	18fb      	adds	r3, r7, r3
    4fd2:	781b      	ldrb	r3, [r3, #0]
    4fd4:	2290      	movs	r2, #144	; 0x90
    4fd6:	18ba      	adds	r2, r7, r2
    4fd8:	6812      	ldr	r2, [r2, #0]
    4fda:	18d3      	adds	r3, r2, r3
    4fdc:	781b      	ldrb	r3, [r3, #0]
    4fde:	2b60      	cmp	r3, #96	; 0x60
    4fe0:	d909      	bls.n	4ff6 <m2m_wifi_connect_sc+0xfe>
    4fe2:	2396      	movs	r3, #150	; 0x96
    4fe4:	18fb      	adds	r3, r7, r3
    4fe6:	781b      	ldrb	r3, [r3, #0]
    4fe8:	2290      	movs	r2, #144	; 0x90
    4fea:	18ba      	adds	r2, r7, r2
    4fec:	6812      	ldr	r2, [r2, #0]
    4fee:	18d3      	adds	r3, r2, r3
    4ff0:	781b      	ldrb	r3, [r3, #0]
    4ff2:	2b66      	cmp	r3, #102	; 0x66
    4ff4:	d911      	bls.n	501a <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    4ff6:	4ab2      	ldr	r2, [pc, #712]	; (52c0 <m2m_wifi_connect_sc+0x3c8>)
    4ff8:	49aa      	ldr	r1, [pc, #680]	; (52a4 <m2m_wifi_connect_sc+0x3ac>)
    4ffa:	4bab      	ldr	r3, [pc, #684]	; (52a8 <m2m_wifi_connect_sc+0x3b0>)
    4ffc:	0018      	movs	r0, r3
    4ffe:	4bab      	ldr	r3, [pc, #684]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    5000:	4798      	blx	r3
    5002:	4bb0      	ldr	r3, [pc, #704]	; (52c4 <m2m_wifi_connect_sc+0x3cc>)
    5004:	0018      	movs	r0, r3
    5006:	4bab      	ldr	r3, [pc, #684]	; (52b4 <m2m_wifi_connect_sc+0x3bc>)
    5008:	4798      	blx	r3
    500a:	200d      	movs	r0, #13
    500c:	4baa      	ldr	r3, [pc, #680]	; (52b8 <m2m_wifi_connect_sc+0x3c0>)
    500e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    5010:	2397      	movs	r3, #151	; 0x97
    5012:	18fb      	adds	r3, r7, r3
    5014:	22f4      	movs	r2, #244	; 0xf4
    5016:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    5018:	e192      	b.n	5340 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    501a:	2396      	movs	r3, #150	; 0x96
    501c:	18fb      	adds	r3, r7, r3
    501e:	781a      	ldrb	r2, [r3, #0]
    5020:	2396      	movs	r3, #150	; 0x96
    5022:	18fb      	adds	r3, r7, r3
    5024:	3201      	adds	r2, #1
    5026:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    5028:	2396      	movs	r3, #150	; 0x96
    502a:	18fb      	adds	r3, r7, r3
    502c:	781b      	ldrb	r3, [r3, #0]
    502e:	2b3f      	cmp	r3, #63	; 0x3f
    5030:	d9a5      	bls.n	4f7e <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    5032:	230b      	movs	r3, #11
    5034:	18fb      	adds	r3, r7, r3
    5036:	781b      	ldrb	r3, [r3, #0]
    5038:	2b00      	cmp	r3, #0
    503a:	d004      	beq.n	5046 <m2m_wifi_connect_sc+0x14e>
    503c:	230b      	movs	r3, #11
    503e:	18fb      	adds	r3, r7, r3
    5040:	781b      	ldrb	r3, [r3, #0]
    5042:	2b20      	cmp	r3, #32
    5044:	d911      	bls.n	506a <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    5046:	4aa0      	ldr	r2, [pc, #640]	; (52c8 <m2m_wifi_connect_sc+0x3d0>)
    5048:	4996      	ldr	r1, [pc, #600]	; (52a4 <m2m_wifi_connect_sc+0x3ac>)
    504a:	4b97      	ldr	r3, [pc, #604]	; (52a8 <m2m_wifi_connect_sc+0x3b0>)
    504c:	0018      	movs	r0, r3
    504e:	4b97      	ldr	r3, [pc, #604]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    5050:	4798      	blx	r3
    5052:	4b9e      	ldr	r3, [pc, #632]	; (52cc <m2m_wifi_connect_sc+0x3d4>)
    5054:	0018      	movs	r0, r3
    5056:	4b97      	ldr	r3, [pc, #604]	; (52b4 <m2m_wifi_connect_sc+0x3bc>)
    5058:	4798      	blx	r3
    505a:	200d      	movs	r0, #13
    505c:	4b96      	ldr	r3, [pc, #600]	; (52b8 <m2m_wifi_connect_sc+0x3c0>)
    505e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    5060:	2397      	movs	r3, #151	; 0x97
    5062:	18fb      	adds	r3, r7, r3
    5064:	22f4      	movs	r2, #244	; 0xf4
    5066:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    5068:	e16a      	b.n	5340 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    506a:	23a8      	movs	r3, #168	; 0xa8
    506c:	18fb      	adds	r3, r7, r3
    506e:	881b      	ldrh	r3, [r3, #0]
    5070:	2b00      	cmp	r3, #0
    5072:	d004      	beq.n	507e <m2m_wifi_connect_sc+0x186>
    5074:	23a8      	movs	r3, #168	; 0xa8
    5076:	18fb      	adds	r3, r7, r3
    5078:	881b      	ldrh	r3, [r3, #0]
    507a:	2b0e      	cmp	r3, #14
    507c:	d916      	bls.n	50ac <m2m_wifi_connect_sc+0x1b4>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    507e:	23a8      	movs	r3, #168	; 0xa8
    5080:	18fb      	adds	r3, r7, r3
    5082:	881b      	ldrh	r3, [r3, #0]
    5084:	2bff      	cmp	r3, #255	; 0xff
    5086:	d011      	beq.n	50ac <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("CH INVALID\n");
    5088:	4a91      	ldr	r2, [pc, #580]	; (52d0 <m2m_wifi_connect_sc+0x3d8>)
    508a:	4986      	ldr	r1, [pc, #536]	; (52a4 <m2m_wifi_connect_sc+0x3ac>)
    508c:	4b86      	ldr	r3, [pc, #536]	; (52a8 <m2m_wifi_connect_sc+0x3b0>)
    508e:	0018      	movs	r0, r3
    5090:	4b86      	ldr	r3, [pc, #536]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    5092:	4798      	blx	r3
    5094:	4b8f      	ldr	r3, [pc, #572]	; (52d4 <m2m_wifi_connect_sc+0x3dc>)
    5096:	0018      	movs	r0, r3
    5098:	4b86      	ldr	r3, [pc, #536]	; (52b4 <m2m_wifi_connect_sc+0x3bc>)
    509a:	4798      	blx	r3
    509c:	200d      	movs	r0, #13
    509e:	4b86      	ldr	r3, [pc, #536]	; (52b8 <m2m_wifi_connect_sc+0x3c0>)
    50a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    50a2:	2397      	movs	r3, #151	; 0x97
    50a4:	18fb      	adds	r3, r7, r3
    50a6:	22f4      	movs	r2, #244	; 0xf4
    50a8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    50aa:	e149      	b.n	5340 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    50ac:	230b      	movs	r3, #11
    50ae:	18fb      	adds	r3, r7, r3
    50b0:	781a      	ldrb	r2, [r3, #0]
    50b2:	68f9      	ldr	r1, [r7, #12]
    50b4:	2314      	movs	r3, #20
    50b6:	18fb      	adds	r3, r7, r3
    50b8:	3346      	adds	r3, #70	; 0x46
    50ba:	0018      	movs	r0, r3
    50bc:	4b86      	ldr	r3, [pc, #536]	; (52d8 <m2m_wifi_connect_sc+0x3e0>)
    50be:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    50c0:	230b      	movs	r3, #11
    50c2:	18fb      	adds	r3, r7, r3
    50c4:	781b      	ldrb	r3, [r3, #0]
    50c6:	2214      	movs	r2, #20
    50c8:	18ba      	adds	r2, r7, r2
    50ca:	2146      	movs	r1, #70	; 0x46
    50cc:	18d3      	adds	r3, r2, r3
    50ce:	185b      	adds	r3, r3, r1
    50d0:	2200      	movs	r2, #0
    50d2:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    50d4:	2314      	movs	r3, #20
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	22a8      	movs	r2, #168	; 0xa8
    50da:	18ba      	adds	r2, r7, r2
    50dc:	2144      	movs	r1, #68	; 0x44
    50de:	8812      	ldrh	r2, [r2, #0]
    50e0:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    50e2:	23ac      	movs	r3, #172	; 0xac
    50e4:	18fb      	adds	r3, r7, r3
    50e6:	781b      	ldrb	r3, [r3, #0]
    50e8:	1e5a      	subs	r2, r3, #1
    50ea:	4193      	sbcs	r3, r2
    50ec:	b2db      	uxtb	r3, r3
    50ee:	0019      	movs	r1, r3
    50f0:	2314      	movs	r3, #20
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	2267      	movs	r2, #103	; 0x67
    50f6:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    50f8:	2314      	movs	r3, #20
    50fa:	18fb      	adds	r3, r7, r3
    50fc:	228c      	movs	r2, #140	; 0x8c
    50fe:	18ba      	adds	r2, r7, r2
    5100:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    5102:	238c      	movs	r3, #140	; 0x8c
    5104:	18fb      	adds	r3, r7, r3
    5106:	681b      	ldr	r3, [r3, #0]
    5108:	220a      	movs	r2, #10
    510a:	18ba      	adds	r2, r7, r2
    510c:	2141      	movs	r1, #65	; 0x41
    510e:	7812      	ldrb	r2, [r2, #0]
    5110:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    5112:	230a      	movs	r3, #10
    5114:	18fb      	adds	r3, r7, r3
    5116:	781b      	ldrb	r3, [r3, #0]
    5118:	2b03      	cmp	r3, #3
    511a:	d000      	beq.n	511e <m2m_wifi_connect_sc+0x226>
    511c:	e07b      	b.n	5216 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	2288      	movs	r2, #136	; 0x88
    5122:	18ba      	adds	r2, r7, r2
    5124:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    5126:	238c      	movs	r3, #140	; 0x8c
    5128:	18fb      	adds	r3, r7, r3
    512a:	681b      	ldr	r3, [r3, #0]
    512c:	2284      	movs	r2, #132	; 0x84
    512e:	18ba      	adds	r2, r7, r2
    5130:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    5132:	2388      	movs	r3, #136	; 0x88
    5134:	18fb      	adds	r3, r7, r3
    5136:	681b      	ldr	r3, [r3, #0]
    5138:	781b      	ldrb	r3, [r3, #0]
    513a:	3b01      	subs	r3, #1
    513c:	b2da      	uxtb	r2, r3
    513e:	2384      	movs	r3, #132	; 0x84
    5140:	18fb      	adds	r3, r7, r3
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    5146:	2384      	movs	r3, #132	; 0x84
    5148:	18fb      	adds	r3, r7, r3
    514a:	681b      	ldr	r3, [r3, #0]
    514c:	781b      	ldrb	r3, [r3, #0]
    514e:	2b03      	cmp	r3, #3
    5150:	d917      	bls.n	5182 <m2m_wifi_connect_sc+0x28a>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    5152:	4a62      	ldr	r2, [pc, #392]	; (52dc <m2m_wifi_connect_sc+0x3e4>)
    5154:	4953      	ldr	r1, [pc, #332]	; (52a4 <m2m_wifi_connect_sc+0x3ac>)
    5156:	4b54      	ldr	r3, [pc, #336]	; (52a8 <m2m_wifi_connect_sc+0x3b0>)
    5158:	0018      	movs	r0, r3
    515a:	4b54      	ldr	r3, [pc, #336]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    515c:	4798      	blx	r3
    515e:	2384      	movs	r3, #132	; 0x84
    5160:	18fb      	adds	r3, r7, r3
    5162:	681b      	ldr	r3, [r3, #0]
    5164:	781b      	ldrb	r3, [r3, #0]
    5166:	001a      	movs	r2, r3
    5168:	4b5d      	ldr	r3, [pc, #372]	; (52e0 <m2m_wifi_connect_sc+0x3e8>)
    516a:	0011      	movs	r1, r2
    516c:	0018      	movs	r0, r3
    516e:	4b4f      	ldr	r3, [pc, #316]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    5170:	4798      	blx	r3
    5172:	200d      	movs	r0, #13
    5174:	4b50      	ldr	r3, [pc, #320]	; (52b8 <m2m_wifi_connect_sc+0x3c0>)
    5176:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5178:	2397      	movs	r3, #151	; 0x97
    517a:	18fb      	adds	r3, r7, r3
    517c:	22f4      	movs	r2, #244	; 0xf4
    517e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    5180:	e0de      	b.n	5340 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    5182:	2388      	movs	r3, #136	; 0x88
    5184:	18fb      	adds	r3, r7, r3
    5186:	681b      	ldr	r3, [r3, #0]
    5188:	785b      	ldrb	r3, [r3, #1]
    518a:	3b01      	subs	r3, #1
    518c:	b2da      	uxtb	r2, r3
    518e:	2384      	movs	r3, #132	; 0x84
    5190:	18fb      	adds	r3, r7, r3
    5192:	681b      	ldr	r3, [r3, #0]
    5194:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    5196:	2384      	movs	r3, #132	; 0x84
    5198:	18fb      	adds	r3, r7, r3
    519a:	681b      	ldr	r3, [r3, #0]
    519c:	785b      	ldrb	r3, [r3, #1]
    519e:	2b0a      	cmp	r3, #10
    51a0:	d01e      	beq.n	51e0 <m2m_wifi_connect_sc+0x2e8>
    51a2:	2384      	movs	r3, #132	; 0x84
    51a4:	18fb      	adds	r3, r7, r3
    51a6:	681b      	ldr	r3, [r3, #0]
    51a8:	785b      	ldrb	r3, [r3, #1]
    51aa:	2b1a      	cmp	r3, #26
    51ac:	d018      	beq.n	51e0 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    51ae:	2396      	movs	r3, #150	; 0x96
    51b0:	009a      	lsls	r2, r3, #2
    51b2:	493c      	ldr	r1, [pc, #240]	; (52a4 <m2m_wifi_connect_sc+0x3ac>)
    51b4:	4b3c      	ldr	r3, [pc, #240]	; (52a8 <m2m_wifi_connect_sc+0x3b0>)
    51b6:	0018      	movs	r0, r3
    51b8:	4b3c      	ldr	r3, [pc, #240]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    51ba:	4798      	blx	r3
    51bc:	2384      	movs	r3, #132	; 0x84
    51be:	18fb      	adds	r3, r7, r3
    51c0:	681b      	ldr	r3, [r3, #0]
    51c2:	785b      	ldrb	r3, [r3, #1]
    51c4:	001a      	movs	r2, r3
    51c6:	4b47      	ldr	r3, [pc, #284]	; (52e4 <m2m_wifi_connect_sc+0x3ec>)
    51c8:	0011      	movs	r1, r2
    51ca:	0018      	movs	r0, r3
    51cc:	4b37      	ldr	r3, [pc, #220]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    51ce:	4798      	blx	r3
    51d0:	200d      	movs	r0, #13
    51d2:	4b39      	ldr	r3, [pc, #228]	; (52b8 <m2m_wifi_connect_sc+0x3c0>)
    51d4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    51d6:	2397      	movs	r3, #151	; 0x97
    51d8:	18fb      	adds	r3, r7, r3
    51da:	22f4      	movs	r2, #244	; 0xf4
    51dc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    51de:	e0af      	b.n	5340 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    51e0:	2384      	movs	r3, #132	; 0x84
    51e2:	18fb      	adds	r3, r7, r3
    51e4:	681b      	ldr	r3, [r3, #0]
    51e6:	1c98      	adds	r0, r3, #2
    51e8:	2388      	movs	r3, #136	; 0x88
    51ea:	18fb      	adds	r3, r7, r3
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	1c99      	adds	r1, r3, #2
    51f0:	2388      	movs	r3, #136	; 0x88
    51f2:	18fb      	adds	r3, r7, r3
    51f4:	681b      	ldr	r3, [r3, #0]
    51f6:	785b      	ldrb	r3, [r3, #1]
    51f8:	001a      	movs	r2, r3
    51fa:	4b37      	ldr	r3, [pc, #220]	; (52d8 <m2m_wifi_connect_sc+0x3e0>)
    51fc:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    51fe:	2388      	movs	r3, #136	; 0x88
    5200:	18fb      	adds	r3, r7, r3
    5202:	681b      	ldr	r3, [r3, #0]
    5204:	785b      	ldrb	r3, [r3, #1]
    5206:	001a      	movs	r2, r3
    5208:	2384      	movs	r3, #132	; 0x84
    520a:	18fb      	adds	r3, r7, r3
    520c:	681b      	ldr	r3, [r3, #0]
    520e:	189b      	adds	r3, r3, r2
    5210:	2200      	movs	r2, #0
    5212:	709a      	strb	r2, [r3, #2]
    5214:	e083      	b.n	531e <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    5216:	230a      	movs	r3, #10
    5218:	18fb      	adds	r3, r7, r3
    521a:	781b      	ldrb	r3, [r3, #0]
    521c:	2b02      	cmp	r3, #2
    521e:	d130      	bne.n	5282 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    5220:	2382      	movs	r3, #130	; 0x82
    5222:	18fc      	adds	r4, r7, r3
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	0018      	movs	r0, r3
    5228:	4b24      	ldr	r3, [pc, #144]	; (52bc <m2m_wifi_connect_sc+0x3c4>)
    522a:	4798      	blx	r3
    522c:	0003      	movs	r3, r0
    522e:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    5230:	2382      	movs	r3, #130	; 0x82
    5232:	18fb      	adds	r3, r7, r3
    5234:	881b      	ldrh	r3, [r3, #0]
    5236:	2b00      	cmp	r3, #0
    5238:	d004      	beq.n	5244 <m2m_wifi_connect_sc+0x34c>
    523a:	2382      	movs	r3, #130	; 0x82
    523c:	18fb      	adds	r3, r7, r3
    523e:	881b      	ldrh	r3, [r3, #0]
    5240:	2b40      	cmp	r3, #64	; 0x40
    5242:	d911      	bls.n	5268 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    5244:	4a28      	ldr	r2, [pc, #160]	; (52e8 <m2m_wifi_connect_sc+0x3f0>)
    5246:	4917      	ldr	r1, [pc, #92]	; (52a4 <m2m_wifi_connect_sc+0x3ac>)
    5248:	4b17      	ldr	r3, [pc, #92]	; (52a8 <m2m_wifi_connect_sc+0x3b0>)
    524a:	0018      	movs	r0, r3
    524c:	4b17      	ldr	r3, [pc, #92]	; (52ac <m2m_wifi_connect_sc+0x3b4>)
    524e:	4798      	blx	r3
    5250:	4b26      	ldr	r3, [pc, #152]	; (52ec <m2m_wifi_connect_sc+0x3f4>)
    5252:	0018      	movs	r0, r3
    5254:	4b17      	ldr	r3, [pc, #92]	; (52b4 <m2m_wifi_connect_sc+0x3bc>)
    5256:	4798      	blx	r3
    5258:	200d      	movs	r0, #13
    525a:	4b17      	ldr	r3, [pc, #92]	; (52b8 <m2m_wifi_connect_sc+0x3c0>)
    525c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    525e:	2397      	movs	r3, #151	; 0x97
    5260:	18fb      	adds	r3, r7, r3
    5262:	22f4      	movs	r2, #244	; 0xf4
    5264:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    5266:	e06b      	b.n	5340 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    5268:	238c      	movs	r3, #140	; 0x8c
    526a:	18fb      	adds	r3, r7, r3
    526c:	6818      	ldr	r0, [r3, #0]
    526e:	2382      	movs	r3, #130	; 0x82
    5270:	18fb      	adds	r3, r7, r3
    5272:	881b      	ldrh	r3, [r3, #0]
    5274:	3301      	adds	r3, #1
    5276:	001a      	movs	r2, r3
    5278:	687b      	ldr	r3, [r7, #4]
    527a:	0019      	movs	r1, r3
    527c:	4b16      	ldr	r3, [pc, #88]	; (52d8 <m2m_wifi_connect_sc+0x3e0>)
    527e:	4798      	blx	r3
    5280:	e04d      	b.n	531e <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    5282:	230a      	movs	r3, #10
    5284:	18fb      	adds	r3, r7, r3
    5286:	781b      	ldrb	r3, [r3, #0]
    5288:	2b04      	cmp	r3, #4
    528a:	d131      	bne.n	52f0 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    528c:	238c      	movs	r3, #140	; 0x8c
    528e:	18fb      	adds	r3, r7, r3
    5290:	681b      	ldr	r3, [r3, #0]
    5292:	6879      	ldr	r1, [r7, #4]
    5294:	223e      	movs	r2, #62	; 0x3e
    5296:	0018      	movs	r0, r3
    5298:	4b0f      	ldr	r3, [pc, #60]	; (52d8 <m2m_wifi_connect_sc+0x3e0>)
    529a:	4798      	blx	r3
    529c:	e03f      	b.n	531e <m2m_wifi_connect_sc+0x426>
    529e:	46c0      	nop			; (mov r8, r8)
    52a0:	0000021b 	.word	0x0000021b
    52a4:	00018cc8 	.word	0x00018cc8
    52a8:	00018924 	.word	0x00018924
    52ac:	00012f71 	.word	0x00012f71
    52b0:	00018b58 	.word	0x00018b58
    52b4:	0001308d 	.word	0x0001308d
    52b8:	00012fa5 	.word	0x00012fa5
    52bc:	00003bab 	.word	0x00003bab
    52c0:	00000227 	.word	0x00000227
    52c4:	00018b6c 	.word	0x00018b6c
    52c8:	00000231 	.word	0x00000231
    52cc:	00018b78 	.word	0x00018b78
    52d0:	0000023a 	.word	0x0000023a
    52d4:	00018b8c 	.word	0x00018b8c
    52d8:	00003b31 	.word	0x00003b31
    52dc:	00000251 	.word	0x00000251
    52e0:	00018b98 	.word	0x00018b98
    52e4:	00018bb4 	.word	0x00018bb4
    52e8:	00000267 	.word	0x00000267
    52ec:	00018bd0 	.word	0x00018bd0
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    52f0:	230a      	movs	r3, #10
    52f2:	18fb      	adds	r3, r7, r3
    52f4:	781b      	ldrb	r3, [r3, #0]
    52f6:	2b01      	cmp	r3, #1
    52f8:	d011      	beq.n	531e <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    52fa:	4a15      	ldr	r2, [pc, #84]	; (5350 <m2m_wifi_connect_sc+0x458>)
    52fc:	4915      	ldr	r1, [pc, #84]	; (5354 <m2m_wifi_connect_sc+0x45c>)
    52fe:	4b16      	ldr	r3, [pc, #88]	; (5358 <m2m_wifi_connect_sc+0x460>)
    5300:	0018      	movs	r0, r3
    5302:	4b16      	ldr	r3, [pc, #88]	; (535c <m2m_wifi_connect_sc+0x464>)
    5304:	4798      	blx	r3
    5306:	4b16      	ldr	r3, [pc, #88]	; (5360 <m2m_wifi_connect_sc+0x468>)
    5308:	0018      	movs	r0, r3
    530a:	4b16      	ldr	r3, [pc, #88]	; (5364 <m2m_wifi_connect_sc+0x46c>)
    530c:	4798      	blx	r3
    530e:	200d      	movs	r0, #13
    5310:	4b15      	ldr	r3, [pc, #84]	; (5368 <m2m_wifi_connect_sc+0x470>)
    5312:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    5314:	2397      	movs	r3, #151	; 0x97
    5316:	18fb      	adds	r3, r7, r3
    5318:	22f4      	movs	r2, #244	; 0xf4
    531a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    531c:	e010      	b.n	5340 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    531e:	2397      	movs	r3, #151	; 0x97
    5320:	18fc      	adds	r4, r7, r3
    5322:	2314      	movs	r3, #20
    5324:	18fa      	adds	r2, r7, r3
    5326:	2300      	movs	r3, #0
    5328:	9302      	str	r3, [sp, #8]
    532a:	2300      	movs	r3, #0
    532c:	9301      	str	r3, [sp, #4]
    532e:	2300      	movs	r3, #0
    5330:	9300      	str	r3, [sp, #0]
    5332:	236c      	movs	r3, #108	; 0x6c
    5334:	2128      	movs	r1, #40	; 0x28
    5336:	2001      	movs	r0, #1
    5338:	4d0c      	ldr	r5, [pc, #48]	; (536c <m2m_wifi_connect_sc+0x474>)
    533a:	47a8      	blx	r5
    533c:	0003      	movs	r3, r0
    533e:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    5340:	2397      	movs	r3, #151	; 0x97
    5342:	18fb      	adds	r3, r7, r3
    5344:	781b      	ldrb	r3, [r3, #0]
    5346:	b25b      	sxtb	r3, r3
}
    5348:	0018      	movs	r0, r3
    534a:	46bd      	mov	sp, r7
    534c:	b026      	add	sp, #152	; 0x98
    534e:	bdb0      	pop	{r4, r5, r7, pc}
    5350:	00000277 	.word	0x00000277
    5354:	00018cc8 	.word	0x00018cc8
    5358:	00018924 	.word	0x00018924
    535c:	00012f71 	.word	0x00012f71
    5360:	00018bec 	.word	0x00018bec
    5364:	0001308d 	.word	0x0001308d
    5368:	00012fa5 	.word	0x00012fa5
    536c:	00003dcd 	.word	0x00003dcd

00005370 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    5370:	b580      	push	{r7, lr}
    5372:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    5374:	2300      	movs	r3, #0
}
    5376:	0018      	movs	r0, r3
    5378:	46bd      	mov	sp, r7
    537a:	bd80      	pop	{r7, pc}

0000537c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    537c:	b590      	push	{r4, r7, lr}
    537e:	b087      	sub	sp, #28
    5380:	af00      	add	r7, sp, #0
    5382:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    5384:	2317      	movs	r3, #23
    5386:	18fb      	adds	r3, r7, r3
    5388:	2200      	movs	r2, #0
    538a:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    538c:	687b      	ldr	r3, [r7, #4]
    538e:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    5390:	693b      	ldr	r3, [r7, #16]
    5392:	2280      	movs	r2, #128	; 0x80
    5394:	0052      	lsls	r2, r2, #1
    5396:	4313      	orrs	r3, r2
    5398:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    539a:	693a      	ldr	r2, [r7, #16]
    539c:	23a5      	movs	r3, #165	; 0xa5
    539e:	015b      	lsls	r3, r3, #5
    53a0:	0011      	movs	r1, r2
    53a2:	0018      	movs	r0, r3
    53a4:	4b12      	ldr	r3, [pc, #72]	; (53f0 <chip_apply_conf+0x74>)
    53a6:	4798      	blx	r3
		if(val32 != 0) {		
    53a8:	693b      	ldr	r3, [r7, #16]
    53aa:	2b00      	cmp	r3, #0
    53ac:	d018      	beq.n	53e0 <chip_apply_conf+0x64>
			uint32 reg = 0;
    53ae:	2300      	movs	r3, #0
    53b0:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    53b2:	2317      	movs	r3, #23
    53b4:	18fc      	adds	r4, r7, r3
    53b6:	230c      	movs	r3, #12
    53b8:	18fa      	adds	r2, r7, r3
    53ba:	23a5      	movs	r3, #165	; 0xa5
    53bc:	015b      	lsls	r3, r3, #5
    53be:	0011      	movs	r1, r2
    53c0:	0018      	movs	r0, r3
    53c2:	4b0c      	ldr	r3, [pc, #48]	; (53f4 <chip_apply_conf+0x78>)
    53c4:	4798      	blx	r3
    53c6:	0003      	movs	r3, r0
    53c8:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    53ca:	2317      	movs	r3, #23
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	781b      	ldrb	r3, [r3, #0]
    53d0:	b25b      	sxtb	r3, r3
    53d2:	2b00      	cmp	r3, #0
    53d4:	d1e1      	bne.n	539a <chip_apply_conf+0x1e>
				if(reg == val32)
    53d6:	68fa      	ldr	r2, [r7, #12]
    53d8:	693b      	ldr	r3, [r7, #16]
    53da:	429a      	cmp	r2, r3
    53dc:	d002      	beq.n	53e4 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    53de:	e7dc      	b.n	539a <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    53e0:	46c0      	nop			; (mov r8, r8)
    53e2:	e000      	b.n	53e6 <chip_apply_conf+0x6a>
					break;
    53e4:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    53e6:	2300      	movs	r3, #0
}
    53e8:	0018      	movs	r0, r3
    53ea:	46bd      	mov	sp, r7
    53ec:	b007      	add	sp, #28
    53ee:	bd90      	pop	{r4, r7, pc}
    53f0:	00005bcd 	.word	0x00005bcd
    53f4:	00005ba9 	.word	0x00005ba9

000053f8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    53f8:	b590      	push	{r4, r7, lr}
    53fa:	b083      	sub	sp, #12
    53fc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    53fe:	2300      	movs	r3, #0
    5400:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    5402:	1dfb      	adds	r3, r7, #7
    5404:	2200      	movs	r2, #0
    5406:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    5408:	1dfc      	adds	r4, r7, #7
    540a:	003b      	movs	r3, r7
    540c:	4a24      	ldr	r2, [pc, #144]	; (54a0 <enable_interrupts+0xa8>)
    540e:	0019      	movs	r1, r3
    5410:	0010      	movs	r0, r2
    5412:	4b24      	ldr	r3, [pc, #144]	; (54a4 <enable_interrupts+0xac>)
    5414:	4798      	blx	r3
    5416:	0003      	movs	r3, r0
    5418:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    541a:	1dfb      	adds	r3, r7, #7
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	b25b      	sxtb	r3, r3
    5420:	2b00      	cmp	r3, #0
    5422:	d131      	bne.n	5488 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    5424:	683b      	ldr	r3, [r7, #0]
    5426:	2280      	movs	r2, #128	; 0x80
    5428:	0052      	lsls	r2, r2, #1
    542a:	4313      	orrs	r3, r2
    542c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    542e:	683b      	ldr	r3, [r7, #0]
    5430:	1dfc      	adds	r4, r7, #7
    5432:	4a1b      	ldr	r2, [pc, #108]	; (54a0 <enable_interrupts+0xa8>)
    5434:	0019      	movs	r1, r3
    5436:	0010      	movs	r0, r2
    5438:	4b1b      	ldr	r3, [pc, #108]	; (54a8 <enable_interrupts+0xb0>)
    543a:	4798      	blx	r3
    543c:	0003      	movs	r3, r0
    543e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    5440:	1dfb      	adds	r3, r7, #7
    5442:	781b      	ldrb	r3, [r3, #0]
    5444:	b25b      	sxtb	r3, r3
    5446:	2b00      	cmp	r3, #0
    5448:	d120      	bne.n	548c <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    544a:	1dfc      	adds	r4, r7, #7
    544c:	003a      	movs	r2, r7
    544e:	23d0      	movs	r3, #208	; 0xd0
    5450:	015b      	lsls	r3, r3, #5
    5452:	0011      	movs	r1, r2
    5454:	0018      	movs	r0, r3
    5456:	4b13      	ldr	r3, [pc, #76]	; (54a4 <enable_interrupts+0xac>)
    5458:	4798      	blx	r3
    545a:	0003      	movs	r3, r0
    545c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    545e:	1dfb      	adds	r3, r7, #7
    5460:	781b      	ldrb	r3, [r3, #0]
    5462:	b25b      	sxtb	r3, r3
    5464:	2b00      	cmp	r3, #0
    5466:	d113      	bne.n	5490 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    5468:	683b      	ldr	r3, [r7, #0]
    546a:	2280      	movs	r2, #128	; 0x80
    546c:	0252      	lsls	r2, r2, #9
    546e:	4313      	orrs	r3, r2
    5470:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    5472:	683a      	ldr	r2, [r7, #0]
    5474:	1dfc      	adds	r4, r7, #7
    5476:	23d0      	movs	r3, #208	; 0xd0
    5478:	015b      	lsls	r3, r3, #5
    547a:	0011      	movs	r1, r2
    547c:	0018      	movs	r0, r3
    547e:	4b0a      	ldr	r3, [pc, #40]	; (54a8 <enable_interrupts+0xb0>)
    5480:	4798      	blx	r3
    5482:	0003      	movs	r3, r0
    5484:	7023      	strb	r3, [r4, #0]
    5486:	e004      	b.n	5492 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    5488:	46c0      	nop			; (mov r8, r8)
    548a:	e002      	b.n	5492 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    548c:	46c0      	nop			; (mov r8, r8)
    548e:	e000      	b.n	5492 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    5490:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    5492:	1dfb      	adds	r3, r7, #7
    5494:	781b      	ldrb	r3, [r3, #0]
    5496:	b25b      	sxtb	r3, r3
}
    5498:	0018      	movs	r0, r3
    549a:	46bd      	mov	sp, r7
    549c:	b003      	add	sp, #12
    549e:	bd90      	pop	{r4, r7, pc}
    54a0:	00001408 	.word	0x00001408
    54a4:	00005ba9 	.word	0x00005ba9
    54a8:	00005bcd 	.word	0x00005bcd

000054ac <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    54ac:	b580      	push	{r7, lr}
    54ae:	b082      	sub	sp, #8
    54b0:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    54b2:	4b32      	ldr	r3, [pc, #200]	; (557c <nmi_get_chipid+0xd0>)
    54b4:	681b      	ldr	r3, [r3, #0]
    54b6:	2b00      	cmp	r3, #0
    54b8:	d159      	bne.n	556e <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    54ba:	4a30      	ldr	r2, [pc, #192]	; (557c <nmi_get_chipid+0xd0>)
    54bc:	2380      	movs	r3, #128	; 0x80
    54be:	015b      	lsls	r3, r3, #5
    54c0:	0011      	movs	r1, r2
    54c2:	0018      	movs	r0, r3
    54c4:	4b2e      	ldr	r3, [pc, #184]	; (5580 <nmi_get_chipid+0xd4>)
    54c6:	4798      	blx	r3
    54c8:	1e03      	subs	r3, r0, #0
    54ca:	d004      	beq.n	54d6 <nmi_get_chipid+0x2a>
			chipid = 0;
    54cc:	4b2b      	ldr	r3, [pc, #172]	; (557c <nmi_get_chipid+0xd0>)
    54ce:	2200      	movs	r2, #0
    54d0:	601a      	str	r2, [r3, #0]
			return 0;
    54d2:	2300      	movs	r3, #0
    54d4:	e04d      	b.n	5572 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    54d6:	1d3b      	adds	r3, r7, #4
    54d8:	4a2a      	ldr	r2, [pc, #168]	; (5584 <nmi_get_chipid+0xd8>)
    54da:	0019      	movs	r1, r3
    54dc:	0010      	movs	r0, r2
    54de:	4b28      	ldr	r3, [pc, #160]	; (5580 <nmi_get_chipid+0xd4>)
    54e0:	4798      	blx	r3
    54e2:	1e03      	subs	r3, r0, #0
    54e4:	d004      	beq.n	54f0 <nmi_get_chipid+0x44>
			chipid = 0;
    54e6:	4b25      	ldr	r3, [pc, #148]	; (557c <nmi_get_chipid+0xd0>)
    54e8:	2200      	movs	r2, #0
    54ea:	601a      	str	r2, [r3, #0]
			return 0;
    54ec:	2300      	movs	r3, #0
    54ee:	e040      	b.n	5572 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    54f0:	4b22      	ldr	r3, [pc, #136]	; (557c <nmi_get_chipid+0xd0>)
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	4a24      	ldr	r2, [pc, #144]	; (5588 <nmi_get_chipid+0xdc>)
    54f6:	4293      	cmp	r3, r2
    54f8:	d106      	bne.n	5508 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    54fa:	687b      	ldr	r3, [r7, #4]
    54fc:	2b01      	cmp	r3, #1
    54fe:	d029      	beq.n	5554 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    5500:	4b1e      	ldr	r3, [pc, #120]	; (557c <nmi_get_chipid+0xd0>)
    5502:	4a22      	ldr	r2, [pc, #136]	; (558c <nmi_get_chipid+0xe0>)
    5504:	601a      	str	r2, [r3, #0]
    5506:	e025      	b.n	5554 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    5508:	4b1c      	ldr	r3, [pc, #112]	; (557c <nmi_get_chipid+0xd0>)
    550a:	681b      	ldr	r3, [r3, #0]
    550c:	4a20      	ldr	r2, [pc, #128]	; (5590 <nmi_get_chipid+0xe4>)
    550e:	4293      	cmp	r3, r2
    5510:	d10d      	bne.n	552e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    5512:	687b      	ldr	r3, [r7, #4]
    5514:	2b03      	cmp	r3, #3
    5516:	d01d      	beq.n	5554 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    5518:	687b      	ldr	r3, [r7, #4]
    551a:	2b04      	cmp	r3, #4
    551c:	d103      	bne.n	5526 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    551e:	4b17      	ldr	r3, [pc, #92]	; (557c <nmi_get_chipid+0xd0>)
    5520:	4a1c      	ldr	r2, [pc, #112]	; (5594 <nmi_get_chipid+0xe8>)
    5522:	601a      	str	r2, [r3, #0]
    5524:	e016      	b.n	5554 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    5526:	4b15      	ldr	r3, [pc, #84]	; (557c <nmi_get_chipid+0xd0>)
    5528:	4a1b      	ldr	r2, [pc, #108]	; (5598 <nmi_get_chipid+0xec>)
    552a:	601a      	str	r2, [r3, #0]
    552c:	e012      	b.n	5554 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    552e:	4b13      	ldr	r3, [pc, #76]	; (557c <nmi_get_chipid+0xd0>)
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	4a1a      	ldr	r2, [pc, #104]	; (559c <nmi_get_chipid+0xf0>)
    5534:	4293      	cmp	r3, r2
    5536:	d10d      	bne.n	5554 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    5538:	4a10      	ldr	r2, [pc, #64]	; (557c <nmi_get_chipid+0xd0>)
    553a:	23ec      	movs	r3, #236	; 0xec
    553c:	039b      	lsls	r3, r3, #14
    553e:	0011      	movs	r1, r2
    5540:	0018      	movs	r0, r3
    5542:	4b0f      	ldr	r3, [pc, #60]	; (5580 <nmi_get_chipid+0xd4>)
    5544:	4798      	blx	r3
    5546:	1e03      	subs	r3, r0, #0
    5548:	d004      	beq.n	5554 <nmi_get_chipid+0xa8>
			chipid = 0;
    554a:	4b0c      	ldr	r3, [pc, #48]	; (557c <nmi_get_chipid+0xd0>)
    554c:	2200      	movs	r2, #0
    554e:	601a      	str	r2, [r3, #0]
			return 0;
    5550:	2300      	movs	r3, #0
    5552:	e00e      	b.n	5572 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    5554:	4b09      	ldr	r3, [pc, #36]	; (557c <nmi_get_chipid+0xd0>)
    5556:	681b      	ldr	r3, [r3, #0]
    5558:	4a11      	ldr	r2, [pc, #68]	; (55a0 <nmi_get_chipid+0xf4>)
    555a:	401a      	ands	r2, r3
    555c:	4b07      	ldr	r3, [pc, #28]	; (557c <nmi_get_chipid+0xd0>)
    555e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    5560:	4b06      	ldr	r3, [pc, #24]	; (557c <nmi_get_chipid+0xd0>)
    5562:	681b      	ldr	r3, [r3, #0]
    5564:	22a0      	movs	r2, #160	; 0xa0
    5566:	02d2      	lsls	r2, r2, #11
    5568:	431a      	orrs	r2, r3
    556a:	4b04      	ldr	r3, [pc, #16]	; (557c <nmi_get_chipid+0xd0>)
    556c:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    556e:	4b03      	ldr	r3, [pc, #12]	; (557c <nmi_get_chipid+0xd0>)
    5570:	681b      	ldr	r3, [r3, #0]
}
    5572:	0018      	movs	r0, r3
    5574:	46bd      	mov	sp, r7
    5576:	b002      	add	sp, #8
    5578:	bd80      	pop	{r7, pc}
    557a:	46c0      	nop			; (mov r8, r8)
    557c:	20000228 	.word	0x20000228
    5580:	00005ba9 	.word	0x00005ba9
    5584:	000013f4 	.word	0x000013f4
    5588:	001002a0 	.word	0x001002a0
    558c:	001002a1 	.word	0x001002a1
    5590:	001002b0 	.word	0x001002b0
    5594:	001002b1 	.word	0x001002b1
    5598:	001002b2 	.word	0x001002b2
    559c:	001000f0 	.word	0x001000f0
    55a0:	fff0ffff 	.word	0xfff0ffff

000055a4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    55a4:	b590      	push	{r4, r7, lr}
    55a6:	b083      	sub	sp, #12
    55a8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    55aa:	1dfb      	adds	r3, r7, #7
    55ac:	2200      	movs	r2, #0
    55ae:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    55b0:	1dfc      	adds	r4, r7, #7
    55b2:	003b      	movs	r3, r7
    55b4:	0019      	movs	r1, r3
    55b6:	2010      	movs	r0, #16
    55b8:	4b2e      	ldr	r3, [pc, #184]	; (5674 <chip_sleep+0xd0>)
    55ba:	4798      	blx	r3
    55bc:	0003      	movs	r3, r0
    55be:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    55c0:	1dfb      	adds	r3, r7, #7
    55c2:	781b      	ldrb	r3, [r3, #0]
    55c4:	b25b      	sxtb	r3, r3
    55c6:	2b00      	cmp	r3, #0
    55c8:	d145      	bne.n	5656 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    55ca:	683b      	ldr	r3, [r7, #0]
    55cc:	2201      	movs	r2, #1
    55ce:	4013      	ands	r3, r2
    55d0:	d000      	beq.n	55d4 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    55d2:	e7ed      	b.n	55b0 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    55d4:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    55d6:	1dfc      	adds	r4, r7, #7
    55d8:	003b      	movs	r3, r7
    55da:	0019      	movs	r1, r3
    55dc:	2001      	movs	r0, #1
    55de:	4b25      	ldr	r3, [pc, #148]	; (5674 <chip_sleep+0xd0>)
    55e0:	4798      	blx	r3
    55e2:	0003      	movs	r3, r0
    55e4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    55e6:	1dfb      	adds	r3, r7, #7
    55e8:	781b      	ldrb	r3, [r3, #0]
    55ea:	b25b      	sxtb	r3, r3
    55ec:	2b00      	cmp	r3, #0
    55ee:	d134      	bne.n	565a <chip_sleep+0xb6>
	if(reg & NBIT1)
    55f0:	683b      	ldr	r3, [r7, #0]
    55f2:	2202      	movs	r2, #2
    55f4:	4013      	ands	r3, r2
    55f6:	d010      	beq.n	561a <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    55f8:	683b      	ldr	r3, [r7, #0]
    55fa:	2202      	movs	r2, #2
    55fc:	4393      	bics	r3, r2
    55fe:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    5600:	683b      	ldr	r3, [r7, #0]
    5602:	1dfc      	adds	r4, r7, #7
    5604:	0019      	movs	r1, r3
    5606:	2001      	movs	r0, #1
    5608:	4b1b      	ldr	r3, [pc, #108]	; (5678 <chip_sleep+0xd4>)
    560a:	4798      	blx	r3
    560c:	0003      	movs	r3, r0
    560e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    5610:	1dfb      	adds	r3, r7, #7
    5612:	781b      	ldrb	r3, [r3, #0]
    5614:	b25b      	sxtb	r3, r3
    5616:	2b00      	cmp	r3, #0
    5618:	d121      	bne.n	565e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    561a:	1dfc      	adds	r4, r7, #7
    561c:	003b      	movs	r3, r7
    561e:	0019      	movs	r1, r3
    5620:	200b      	movs	r0, #11
    5622:	4b14      	ldr	r3, [pc, #80]	; (5674 <chip_sleep+0xd0>)
    5624:	4798      	blx	r3
    5626:	0003      	movs	r3, r0
    5628:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    562a:	1dfb      	adds	r3, r7, #7
    562c:	781b      	ldrb	r3, [r3, #0]
    562e:	b25b      	sxtb	r3, r3
    5630:	2b00      	cmp	r3, #0
    5632:	d116      	bne.n	5662 <chip_sleep+0xbe>
	if(reg & NBIT0)
    5634:	683b      	ldr	r3, [r7, #0]
    5636:	2201      	movs	r2, #1
    5638:	4013      	ands	r3, r2
    563a:	d013      	beq.n	5664 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    563c:	683b      	ldr	r3, [r7, #0]
    563e:	2201      	movs	r2, #1
    5640:	4393      	bics	r3, r2
    5642:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    5644:	683b      	ldr	r3, [r7, #0]
    5646:	1dfc      	adds	r4, r7, #7
    5648:	0019      	movs	r1, r3
    564a:	200b      	movs	r0, #11
    564c:	4b0a      	ldr	r3, [pc, #40]	; (5678 <chip_sleep+0xd4>)
    564e:	4798      	blx	r3
    5650:	0003      	movs	r3, r0
    5652:	7023      	strb	r3, [r4, #0]
    5654:	e006      	b.n	5664 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    5656:	46c0      	nop			; (mov r8, r8)
    5658:	e004      	b.n	5664 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    565a:	46c0      	nop			; (mov r8, r8)
    565c:	e002      	b.n	5664 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    565e:	46c0      	nop			; (mov r8, r8)
    5660:	e000      	b.n	5664 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    5662:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    5664:	1dfb      	adds	r3, r7, #7
    5666:	781b      	ldrb	r3, [r3, #0]
    5668:	b25b      	sxtb	r3, r3
}
    566a:	0018      	movs	r0, r3
    566c:	46bd      	mov	sp, r7
    566e:	b003      	add	sp, #12
    5670:	bd90      	pop	{r4, r7, pc}
    5672:	46c0      	nop			; (mov r8, r8)
    5674:	00005ba9 	.word	0x00005ba9
    5678:	00005bcd 	.word	0x00005bcd

0000567c <chip_wake>:
sint8 chip_wake(void)
{
    567c:	b590      	push	{r4, r7, lr}
    567e:	b085      	sub	sp, #20
    5680:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    5682:	230f      	movs	r3, #15
    5684:	18fb      	adds	r3, r7, r3
    5686:	2200      	movs	r2, #0
    5688:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    568a:	2300      	movs	r3, #0
    568c:	607b      	str	r3, [r7, #4]
    568e:	2300      	movs	r3, #0
    5690:	603b      	str	r3, [r7, #0]
    5692:	2300      	movs	r3, #0
    5694:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    5696:	230f      	movs	r3, #15
    5698:	18fc      	adds	r4, r7, r3
    569a:	1d3b      	adds	r3, r7, #4
    569c:	0019      	movs	r1, r3
    569e:	200b      	movs	r0, #11
    56a0:	4b4c      	ldr	r3, [pc, #304]	; (57d4 <chip_wake+0x158>)
    56a2:	4798      	blx	r3
    56a4:	0003      	movs	r3, r0
    56a6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    56a8:	230f      	movs	r3, #15
    56aa:	18fb      	adds	r3, r7, r3
    56ac:	781b      	ldrb	r3, [r3, #0]
    56ae:	b25b      	sxtb	r3, r3
    56b0:	2b00      	cmp	r3, #0
    56b2:	d000      	beq.n	56b6 <chip_wake+0x3a>
    56b4:	e07f      	b.n	57b6 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	2201      	movs	r2, #1
    56ba:	4013      	ands	r3, r2
    56bc:	d110      	bne.n	56e0 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    56be:	687b      	ldr	r3, [r7, #4]
    56c0:	2201      	movs	r2, #1
    56c2:	4313      	orrs	r3, r2
    56c4:	220f      	movs	r2, #15
    56c6:	18bc      	adds	r4, r7, r2
    56c8:	0019      	movs	r1, r3
    56ca:	200b      	movs	r0, #11
    56cc:	4b42      	ldr	r3, [pc, #264]	; (57d8 <chip_wake+0x15c>)
    56ce:	4798      	blx	r3
    56d0:	0003      	movs	r3, r0
    56d2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    56d4:	230f      	movs	r3, #15
    56d6:	18fb      	adds	r3, r7, r3
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	b25b      	sxtb	r3, r3
    56dc:	2b00      	cmp	r3, #0
    56de:	d16c      	bne.n	57ba <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    56e0:	230f      	movs	r3, #15
    56e2:	18fc      	adds	r4, r7, r3
    56e4:	1d3b      	adds	r3, r7, #4
    56e6:	0019      	movs	r1, r3
    56e8:	2001      	movs	r0, #1
    56ea:	4b3a      	ldr	r3, [pc, #232]	; (57d4 <chip_wake+0x158>)
    56ec:	4798      	blx	r3
    56ee:	0003      	movs	r3, r0
    56f0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    56f2:	230f      	movs	r3, #15
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	781b      	ldrb	r3, [r3, #0]
    56f8:	b25b      	sxtb	r3, r3
    56fa:	2b00      	cmp	r3, #0
    56fc:	d15f      	bne.n	57be <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	2202      	movs	r2, #2
    5702:	4013      	ands	r3, r2
    5704:	d110      	bne.n	5728 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    5706:	687b      	ldr	r3, [r7, #4]
    5708:	2202      	movs	r2, #2
    570a:	4313      	orrs	r3, r2
    570c:	220f      	movs	r2, #15
    570e:	18bc      	adds	r4, r7, r2
    5710:	0019      	movs	r1, r3
    5712:	2001      	movs	r0, #1
    5714:	4b30      	ldr	r3, [pc, #192]	; (57d8 <chip_wake+0x15c>)
    5716:	4798      	blx	r3
    5718:	0003      	movs	r3, r0
    571a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    571c:	230f      	movs	r3, #15
    571e:	18fb      	adds	r3, r7, r3
    5720:	781b      	ldrb	r3, [r3, #0]
    5722:	b25b      	sxtb	r3, r3
    5724:	2b00      	cmp	r3, #0
    5726:	d14c      	bne.n	57c2 <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    5728:	230f      	movs	r3, #15
    572a:	18fc      	adds	r4, r7, r3
    572c:	003b      	movs	r3, r7
    572e:	0019      	movs	r1, r3
    5730:	200f      	movs	r0, #15
    5732:	4b28      	ldr	r3, [pc, #160]	; (57d4 <chip_wake+0x158>)
    5734:	4798      	blx	r3
    5736:	0003      	movs	r3, r0
    5738:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    573a:	230f      	movs	r3, #15
    573c:	18fb      	adds	r3, r7, r3
    573e:	781b      	ldrb	r3, [r3, #0]
    5740:	b25b      	sxtb	r3, r3
    5742:	2b00      	cmp	r3, #0
    5744:	d013      	beq.n	576e <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    5746:	23aa      	movs	r3, #170	; 0xaa
    5748:	005a      	lsls	r2, r3, #1
    574a:	4924      	ldr	r1, [pc, #144]	; (57dc <chip_wake+0x160>)
    574c:	4b24      	ldr	r3, [pc, #144]	; (57e0 <chip_wake+0x164>)
    574e:	0018      	movs	r0, r3
    5750:	4b24      	ldr	r3, [pc, #144]	; (57e4 <chip_wake+0x168>)
    5752:	4798      	blx	r3
    5754:	230f      	movs	r3, #15
    5756:	18fb      	adds	r3, r7, r3
    5758:	2100      	movs	r1, #0
    575a:	5659      	ldrsb	r1, [r3, r1]
    575c:	683a      	ldr	r2, [r7, #0]
    575e:	4b22      	ldr	r3, [pc, #136]	; (57e8 <chip_wake+0x16c>)
    5760:	0018      	movs	r0, r3
    5762:	4b20      	ldr	r3, [pc, #128]	; (57e4 <chip_wake+0x168>)
    5764:	4798      	blx	r3
    5766:	200d      	movs	r0, #13
    5768:	4b20      	ldr	r3, [pc, #128]	; (57ec <chip_wake+0x170>)
    576a:	4798      	blx	r3
			goto _WAKE_EXIT;
    576c:	e02a      	b.n	57c4 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    576e:	683b      	ldr	r3, [r7, #0]
    5770:	2204      	movs	r2, #4
    5772:	4013      	ands	r3, r2
    5774:	d11b      	bne.n	57ae <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    5776:	2002      	movs	r0, #2
    5778:	4b1d      	ldr	r3, [pc, #116]	; (57f0 <chip_wake+0x174>)
    577a:	4798      	blx	r3
		trials++;
    577c:	68bb      	ldr	r3, [r7, #8]
    577e:	3301      	adds	r3, #1
    5780:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    5782:	68bb      	ldr	r3, [r7, #8]
    5784:	2b04      	cmp	r3, #4
    5786:	d9cf      	bls.n	5728 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    5788:	23af      	movs	r3, #175	; 0xaf
    578a:	005a      	lsls	r2, r3, #1
    578c:	4913      	ldr	r1, [pc, #76]	; (57dc <chip_wake+0x160>)
    578e:	4b14      	ldr	r3, [pc, #80]	; (57e0 <chip_wake+0x164>)
    5790:	0018      	movs	r0, r3
    5792:	4b14      	ldr	r3, [pc, #80]	; (57e4 <chip_wake+0x168>)
    5794:	4798      	blx	r3
    5796:	4b17      	ldr	r3, [pc, #92]	; (57f4 <chip_wake+0x178>)
    5798:	0018      	movs	r0, r3
    579a:	4b17      	ldr	r3, [pc, #92]	; (57f8 <chip_wake+0x17c>)
    579c:	4798      	blx	r3
    579e:	200d      	movs	r0, #13
    57a0:	4b12      	ldr	r3, [pc, #72]	; (57ec <chip_wake+0x170>)
    57a2:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    57a4:	230f      	movs	r3, #15
    57a6:	18fb      	adds	r3, r7, r3
    57a8:	22fc      	movs	r2, #252	; 0xfc
    57aa:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    57ac:	e00a      	b.n	57c4 <chip_wake+0x148>
			break;
    57ae:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    57b0:	4b12      	ldr	r3, [pc, #72]	; (57fc <chip_wake+0x180>)
    57b2:	4798      	blx	r3
    57b4:	e006      	b.n	57c4 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    57b6:	46c0      	nop			; (mov r8, r8)
    57b8:	e004      	b.n	57c4 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    57ba:	46c0      	nop			; (mov r8, r8)
    57bc:	e002      	b.n	57c4 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    57be:	46c0      	nop			; (mov r8, r8)
    57c0:	e000      	b.n	57c4 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    57c2:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    57c4:	230f      	movs	r3, #15
    57c6:	18fb      	adds	r3, r7, r3
    57c8:	781b      	ldrb	r3, [r3, #0]
    57ca:	b25b      	sxtb	r3, r3
}
    57cc:	0018      	movs	r0, r3
    57ce:	46bd      	mov	sp, r7
    57d0:	b005      	add	sp, #20
    57d2:	bd90      	pop	{r4, r7, pc}
    57d4:	00005ba9 	.word	0x00005ba9
    57d8:	00005bcd 	.word	0x00005bcd
    57dc:	00018d60 	.word	0x00018d60
    57e0:	00018cdc 	.word	0x00018cdc
    57e4:	00012f71 	.word	0x00012f71
    57e8:	00018cf0 	.word	0x00018cf0
    57ec:	00012fa5 	.word	0x00012fa5
    57f0:	0000327d 	.word	0x0000327d
    57f4:	00018d08 	.word	0x00018d08
    57f8:	0001308d 	.word	0x0001308d
    57fc:	00005b69 	.word	0x00005b69

00005800 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    5800:	b580      	push	{r7, lr}
    5802:	b088      	sub	sp, #32
    5804:	af00      	add	r7, sp, #0
    5806:	0002      	movs	r2, r0
    5808:	1dfb      	adds	r3, r7, #7
    580a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    580c:	2313      	movs	r3, #19
    580e:	18fb      	adds	r3, r7, r3
    5810:	2200      	movs	r2, #0
    5812:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    5814:	2300      	movs	r3, #0
    5816:	61fb      	str	r3, [r7, #28]
    5818:	2300      	movs	r3, #0
    581a:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    581c:	2300      	movs	r3, #0
    581e:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    5820:	4b4a      	ldr	r3, [pc, #296]	; (594c <wait_for_bootrom+0x14c>)
    5822:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    5824:	2300      	movs	r3, #0
    5826:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    5828:	4b49      	ldr	r3, [pc, #292]	; (5950 <wait_for_bootrom+0x150>)
    582a:	0018      	movs	r0, r3
    582c:	4b49      	ldr	r3, [pc, #292]	; (5954 <wait_for_bootrom+0x154>)
    582e:	4798      	blx	r3
    5830:	0003      	movs	r3, r0
    5832:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    5834:	69fb      	ldr	r3, [r7, #28]
    5836:	2b00      	cmp	r3, #0
    5838:	db03      	blt.n	5842 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    583a:	2001      	movs	r0, #1
    583c:	4b46      	ldr	r3, [pc, #280]	; (5958 <wait_for_bootrom+0x158>)
    583e:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    5840:	e7f2      	b.n	5828 <wait_for_bootrom+0x28>
			break;
    5842:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    5844:	4b45      	ldr	r3, [pc, #276]	; (595c <wait_for_bootrom+0x15c>)
    5846:	0018      	movs	r0, r3
    5848:	4b42      	ldr	r3, [pc, #264]	; (5954 <wait_for_bootrom+0x154>)
    584a:	4798      	blx	r3
    584c:	0003      	movs	r3, r0
    584e:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    5850:	69fb      	ldr	r3, [r7, #28]
    5852:	2201      	movs	r2, #1
    5854:	4013      	ands	r3, r2
    5856:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    5858:	69fb      	ldr	r3, [r7, #28]
    585a:	2b00      	cmp	r3, #0
    585c:	d112      	bne.n	5884 <wait_for_bootrom+0x84>
	{
		reg = 0;
    585e:	2300      	movs	r3, #0
    5860:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    5862:	e00b      	b.n	587c <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    5864:	2001      	movs	r0, #1
    5866:	4b3c      	ldr	r3, [pc, #240]	; (5958 <wait_for_bootrom+0x158>)
    5868:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    586a:	4b3d      	ldr	r3, [pc, #244]	; (5960 <wait_for_bootrom+0x160>)
    586c:	0018      	movs	r0, r3
    586e:	4b39      	ldr	r3, [pc, #228]	; (5954 <wait_for_bootrom+0x154>)
    5870:	4798      	blx	r3
    5872:	0003      	movs	r3, r0
    5874:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    5876:	69bb      	ldr	r3, [r7, #24]
    5878:	3301      	adds	r3, #1
    587a:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    587c:	69fb      	ldr	r3, [r7, #28]
    587e:	4a39      	ldr	r2, [pc, #228]	; (5964 <wait_for_bootrom+0x164>)
    5880:	4293      	cmp	r3, r2
    5882:	d1ef      	bne.n	5864 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    5884:	1dfb      	adds	r3, r7, #7
    5886:	781b      	ldrb	r3, [r3, #0]
    5888:	2b02      	cmp	r3, #2
    588a:	d10d      	bne.n	58a8 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    588c:	4a36      	ldr	r2, [pc, #216]	; (5968 <wait_for_bootrom+0x168>)
    588e:	4b37      	ldr	r3, [pc, #220]	; (596c <wait_for_bootrom+0x16c>)
    5890:	0011      	movs	r1, r2
    5892:	0018      	movs	r0, r3
    5894:	4b36      	ldr	r3, [pc, #216]	; (5970 <wait_for_bootrom+0x170>)
    5896:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    5898:	2380      	movs	r3, #128	; 0x80
    589a:	035b      	lsls	r3, r3, #13
    589c:	4a35      	ldr	r2, [pc, #212]	; (5974 <wait_for_bootrom+0x174>)
    589e:	0019      	movs	r1, r3
    58a0:	0010      	movs	r0, r2
    58a2:	4b33      	ldr	r3, [pc, #204]	; (5970 <wait_for_bootrom+0x170>)
    58a4:	4798      	blx	r3
    58a6:	e022      	b.n	58ee <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    58a8:	1dfb      	adds	r3, r7, #7
    58aa:	781b      	ldrb	r3, [r3, #0]
    58ac:	2b03      	cmp	r3, #3
    58ae:	d10b      	bne.n	58c8 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    58b0:	4a2d      	ldr	r2, [pc, #180]	; (5968 <wait_for_bootrom+0x168>)
    58b2:	4b2e      	ldr	r3, [pc, #184]	; (596c <wait_for_bootrom+0x16c>)
    58b4:	0011      	movs	r1, r2
    58b6:	0018      	movs	r0, r3
    58b8:	4b2d      	ldr	r3, [pc, #180]	; (5970 <wait_for_bootrom+0x170>)
    58ba:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    58bc:	4b2d      	ldr	r3, [pc, #180]	; (5974 <wait_for_bootrom+0x174>)
    58be:	2100      	movs	r1, #0
    58c0:	0018      	movs	r0, r3
    58c2:	4b2b      	ldr	r3, [pc, #172]	; (5970 <wait_for_bootrom+0x170>)
    58c4:	4798      	blx	r3
    58c6:	e012      	b.n	58ee <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    58c8:	1dfb      	adds	r3, r7, #7
    58ca:	781b      	ldrb	r3, [r3, #0]
    58cc:	2b04      	cmp	r3, #4
    58ce:	d108      	bne.n	58e2 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    58d0:	2380      	movs	r3, #128	; 0x80
    58d2:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    58d4:	68fb      	ldr	r3, [r7, #12]
    58d6:	4a27      	ldr	r2, [pc, #156]	; (5974 <wait_for_bootrom+0x174>)
    58d8:	0019      	movs	r1, r3
    58da:	0010      	movs	r0, r2
    58dc:	4b24      	ldr	r3, [pc, #144]	; (5970 <wait_for_bootrom+0x170>)
    58de:	4798      	blx	r3
    58e0:	e005      	b.n	58ee <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    58e2:	68fb      	ldr	r3, [r7, #12]
    58e4:	4a23      	ldr	r2, [pc, #140]	; (5974 <wait_for_bootrom+0x174>)
    58e6:	0019      	movs	r1, r3
    58e8:	0010      	movs	r0, r2
    58ea:	4b21      	ldr	r3, [pc, #132]	; (5970 <wait_for_bootrom+0x170>)
    58ec:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    58ee:	4b22      	ldr	r3, [pc, #136]	; (5978 <wait_for_bootrom+0x178>)
    58f0:	4798      	blx	r3
    58f2:	0003      	movs	r3, r0
    58f4:	051b      	lsls	r3, r3, #20
    58f6:	0d1b      	lsrs	r3, r3, #20
    58f8:	4a20      	ldr	r2, [pc, #128]	; (597c <wait_for_bootrom+0x17c>)
    58fa:	4293      	cmp	r3, r2
    58fc:	d906      	bls.n	590c <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    58fe:	697b      	ldr	r3, [r7, #20]
    5900:	2202      	movs	r2, #2
    5902:	4313      	orrs	r3, r2
    5904:	0018      	movs	r0, r3
    5906:	4b1e      	ldr	r3, [pc, #120]	; (5980 <wait_for_bootrom+0x180>)
    5908:	4798      	blx	r3
    590a:	e003      	b.n	5914 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    590c:	697b      	ldr	r3, [r7, #20]
    590e:	0018      	movs	r0, r3
    5910:	4b1b      	ldr	r3, [pc, #108]	; (5980 <wait_for_bootrom+0x180>)
    5912:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    5914:	4b1b      	ldr	r3, [pc, #108]	; (5984 <wait_for_bootrom+0x184>)
    5916:	0018      	movs	r0, r3
    5918:	4b1b      	ldr	r3, [pc, #108]	; (5988 <wait_for_bootrom+0x188>)
    591a:	4798      	blx	r3
    591c:	68fa      	ldr	r2, [r7, #12]
    591e:	4b1b      	ldr	r3, [pc, #108]	; (598c <wait_for_bootrom+0x18c>)
    5920:	0011      	movs	r1, r2
    5922:	0018      	movs	r0, r3
    5924:	4b18      	ldr	r3, [pc, #96]	; (5988 <wait_for_bootrom+0x188>)
    5926:	4798      	blx	r3
    5928:	200d      	movs	r0, #13
    592a:	4b19      	ldr	r3, [pc, #100]	; (5990 <wait_for_bootrom+0x190>)
    592c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    592e:	4a19      	ldr	r2, [pc, #100]	; (5994 <wait_for_bootrom+0x194>)
    5930:	4b0b      	ldr	r3, [pc, #44]	; (5960 <wait_for_bootrom+0x160>)
    5932:	0011      	movs	r1, r2
    5934:	0018      	movs	r0, r3
    5936:	4b0e      	ldr	r3, [pc, #56]	; (5970 <wait_for_bootrom+0x170>)
    5938:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    593a:	2313      	movs	r3, #19
    593c:	18fb      	adds	r3, r7, r3
    593e:	781b      	ldrb	r3, [r3, #0]
    5940:	b25b      	sxtb	r3, r3
}
    5942:	0018      	movs	r0, r3
    5944:	46bd      	mov	sp, r7
    5946:	b008      	add	sp, #32
    5948:	bd80      	pop	{r7, pc}
    594a:	46c0      	nop			; (mov r8, r8)
    594c:	13521352 	.word	0x13521352
    5950:	00001014 	.word	0x00001014
    5954:	00005b89 	.word	0x00005b89
    5958:	0000327d 	.word	0x0000327d
    595c:	000207bc 	.word	0x000207bc
    5960:	000c000c 	.word	0x000c000c
    5964:	10add09e 	.word	0x10add09e
    5968:	3c1cd57d 	.word	0x3c1cd57d
    596c:	000207ac 	.word	0x000207ac
    5970:	00005bcd 	.word	0x00005bcd
    5974:	0000108c 	.word	0x0000108c
    5978:	000054ad 	.word	0x000054ad
    597c:	0000039f 	.word	0x0000039f
    5980:	0000537d 	.word	0x0000537d
    5984:	00018d24 	.word	0x00018d24
    5988:	00012f71 	.word	0x00012f71
    598c:	00018d30 	.word	0x00018d30
    5990:	00012fa5 	.word	0x00012fa5
    5994:	ef522f61 	.word	0xef522f61

00005998 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    5998:	b580      	push	{r7, lr}
    599a:	b088      	sub	sp, #32
    599c:	af00      	add	r7, sp, #0
    599e:	0002      	movs	r2, r0
    59a0:	1dfb      	adds	r3, r7, #7
    59a2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    59a4:	231f      	movs	r3, #31
    59a6:	18fb      	adds	r3, r7, r3
    59a8:	2200      	movs	r2, #0
    59aa:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    59ac:	2300      	movs	r3, #0
    59ae:	61bb      	str	r3, [r7, #24]
    59b0:	2300      	movs	r3, #0
    59b2:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    59b4:	2301      	movs	r3, #1
    59b6:	425b      	negs	r3, r3
    59b8:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    59ba:	4b1d      	ldr	r3, [pc, #116]	; (5a30 <wait_for_firmware_start+0x98>)
    59bc:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    59be:	4b1d      	ldr	r3, [pc, #116]	; (5a34 <wait_for_firmware_start+0x9c>)
    59c0:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    59c2:	1dfb      	adds	r3, r7, #7
    59c4:	781b      	ldrb	r3, [r3, #0]
    59c6:	2b02      	cmp	r3, #2
    59c8:	d003      	beq.n	59d2 <wait_for_firmware_start+0x3a>
    59ca:	1dfb      	adds	r3, r7, #7
    59cc:	781b      	ldrb	r3, [r3, #0]
    59ce:	2b03      	cmp	r3, #3
    59d0:	d119      	bne.n	5a06 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    59d2:	4b19      	ldr	r3, [pc, #100]	; (5a38 <wait_for_firmware_start+0xa0>)
    59d4:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    59d6:	4b19      	ldr	r3, [pc, #100]	; (5a3c <wait_for_firmware_start+0xa4>)
    59d8:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    59da:	e014      	b.n	5a06 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    59dc:	2002      	movs	r0, #2
    59de:	4b18      	ldr	r3, [pc, #96]	; (5a40 <wait_for_firmware_start+0xa8>)
    59e0:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    59e2:	68fb      	ldr	r3, [r7, #12]
    59e4:	0018      	movs	r0, r3
    59e6:	4b17      	ldr	r3, [pc, #92]	; (5a44 <wait_for_firmware_start+0xac>)
    59e8:	4798      	blx	r3
    59ea:	0003      	movs	r3, r0
    59ec:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    59ee:	697b      	ldr	r3, [r7, #20]
    59f0:	3301      	adds	r3, #1
    59f2:	617b      	str	r3, [r7, #20]
    59f4:	697a      	ldr	r2, [r7, #20]
    59f6:	693b      	ldr	r3, [r7, #16]
    59f8:	429a      	cmp	r2, r3
    59fa:	d304      	bcc.n	5a06 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    59fc:	231f      	movs	r3, #31
    59fe:	18fb      	adds	r3, r7, r3
    5a00:	22fb      	movs	r2, #251	; 0xfb
    5a02:	701a      	strb	r2, [r3, #0]
			goto ERR;
    5a04:	e00c      	b.n	5a20 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    5a06:	68ba      	ldr	r2, [r7, #8]
    5a08:	69bb      	ldr	r3, [r7, #24]
    5a0a:	429a      	cmp	r2, r3
    5a0c:	d1e6      	bne.n	59dc <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    5a0e:	68bb      	ldr	r3, [r7, #8]
    5a10:	4a08      	ldr	r2, [pc, #32]	; (5a34 <wait_for_firmware_start+0x9c>)
    5a12:	4293      	cmp	r3, r2
    5a14:	d104      	bne.n	5a20 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    5a16:	4b06      	ldr	r3, [pc, #24]	; (5a30 <wait_for_firmware_start+0x98>)
    5a18:	2100      	movs	r1, #0
    5a1a:	0018      	movs	r0, r3
    5a1c:	4b0a      	ldr	r3, [pc, #40]	; (5a48 <wait_for_firmware_start+0xb0>)
    5a1e:	4798      	blx	r3
	}
ERR:
	return ret;
    5a20:	231f      	movs	r3, #31
    5a22:	18fb      	adds	r3, r7, r3
    5a24:	781b      	ldrb	r3, [r3, #0]
    5a26:	b25b      	sxtb	r3, r3
}
    5a28:	0018      	movs	r0, r3
    5a2a:	46bd      	mov	sp, r7
    5a2c:	b008      	add	sp, #32
    5a2e:	bd80      	pop	{r7, pc}
    5a30:	0000108c 	.word	0x0000108c
    5a34:	02532636 	.word	0x02532636
    5a38:	000207ac 	.word	0x000207ac
    5a3c:	d75dc1c3 	.word	0xd75dc1c3
    5a40:	0000327d 	.word	0x0000327d
    5a44:	00005b89 	.word	0x00005b89
    5a48:	00005bcd 	.word	0x00005bcd

00005a4c <chip_deinit>:

sint8 chip_deinit(void)
{
    5a4c:	b590      	push	{r4, r7, lr}
    5a4e:	b083      	sub	sp, #12
    5a50:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    5a52:	2300      	movs	r3, #0
    5a54:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    5a56:	1dfc      	adds	r4, r7, #7
    5a58:	003a      	movs	r2, r7
    5a5a:	23a0      	movs	r3, #160	; 0xa0
    5a5c:	015b      	lsls	r3, r3, #5
    5a5e:	0011      	movs	r1, r2
    5a60:	0018      	movs	r0, r3
    5a62:	4b1f      	ldr	r3, [pc, #124]	; (5ae0 <chip_deinit+0x94>)
    5a64:	4798      	blx	r3
    5a66:	0003      	movs	r3, r0
    5a68:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    5a6a:	1dfb      	adds	r3, r7, #7
    5a6c:	781b      	ldrb	r3, [r3, #0]
    5a6e:	b25b      	sxtb	r3, r3
    5a70:	2b00      	cmp	r3, #0
    5a72:	d00d      	beq.n	5a90 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    5a74:	4a1b      	ldr	r2, [pc, #108]	; (5ae4 <chip_deinit+0x98>)
    5a76:	491c      	ldr	r1, [pc, #112]	; (5ae8 <chip_deinit+0x9c>)
    5a78:	4b1c      	ldr	r3, [pc, #112]	; (5aec <chip_deinit+0xa0>)
    5a7a:	0018      	movs	r0, r3
    5a7c:	4b1c      	ldr	r3, [pc, #112]	; (5af0 <chip_deinit+0xa4>)
    5a7e:	4798      	blx	r3
    5a80:	4b1c      	ldr	r3, [pc, #112]	; (5af4 <chip_deinit+0xa8>)
    5a82:	0018      	movs	r0, r3
    5a84:	4b1c      	ldr	r3, [pc, #112]	; (5af8 <chip_deinit+0xac>)
    5a86:	4798      	blx	r3
    5a88:	200d      	movs	r0, #13
    5a8a:	4b1c      	ldr	r3, [pc, #112]	; (5afc <chip_deinit+0xb0>)
    5a8c:	4798      	blx	r3
		goto ERR1;
    5a8e:	e020      	b.n	5ad2 <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    5a90:	683b      	ldr	r3, [r7, #0]
    5a92:	4a1b      	ldr	r2, [pc, #108]	; (5b00 <chip_deinit+0xb4>)
    5a94:	4013      	ands	r3, r2
    5a96:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    5a98:	683a      	ldr	r2, [r7, #0]
    5a9a:	1dfc      	adds	r4, r7, #7
    5a9c:	23a0      	movs	r3, #160	; 0xa0
    5a9e:	015b      	lsls	r3, r3, #5
    5aa0:	0011      	movs	r1, r2
    5aa2:	0018      	movs	r0, r3
    5aa4:	4b17      	ldr	r3, [pc, #92]	; (5b04 <chip_deinit+0xb8>)
    5aa6:	4798      	blx	r3
    5aa8:	0003      	movs	r3, r0
    5aaa:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    5aac:	1dfb      	adds	r3, r7, #7
    5aae:	781b      	ldrb	r3, [r3, #0]
    5ab0:	b25b      	sxtb	r3, r3
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d00d      	beq.n	5ad2 <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    5ab6:	4a14      	ldr	r2, [pc, #80]	; (5b08 <chip_deinit+0xbc>)
    5ab8:	490b      	ldr	r1, [pc, #44]	; (5ae8 <chip_deinit+0x9c>)
    5aba:	4b0c      	ldr	r3, [pc, #48]	; (5aec <chip_deinit+0xa0>)
    5abc:	0018      	movs	r0, r3
    5abe:	4b0c      	ldr	r3, [pc, #48]	; (5af0 <chip_deinit+0xa4>)
    5ac0:	4798      	blx	r3
    5ac2:	4b0c      	ldr	r3, [pc, #48]	; (5af4 <chip_deinit+0xa8>)
    5ac4:	0018      	movs	r0, r3
    5ac6:	4b0c      	ldr	r3, [pc, #48]	; (5af8 <chip_deinit+0xac>)
    5ac8:	4798      	blx	r3
    5aca:	200d      	movs	r0, #13
    5acc:	4b0b      	ldr	r3, [pc, #44]	; (5afc <chip_deinit+0xb0>)
    5ace:	4798      	blx	r3
		goto ERR1;
    5ad0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    5ad2:	1dfb      	adds	r3, r7, #7
    5ad4:	781b      	ldrb	r3, [r3, #0]
    5ad6:	b25b      	sxtb	r3, r3
}
    5ad8:	0018      	movs	r0, r3
    5ada:	46bd      	mov	sp, r7
    5adc:	b003      	add	sp, #12
    5ade:	bd90      	pop	{r4, r7, pc}
    5ae0:	00005ba9 	.word	0x00005ba9
    5ae4:	00000205 	.word	0x00000205
    5ae8:	00018d6c 	.word	0x00018d6c
    5aec:	00018cdc 	.word	0x00018cdc
    5af0:	00012f71 	.word	0x00012f71
    5af4:	00018d48 	.word	0x00018d48
    5af8:	0001308d 	.word	0x0001308d
    5afc:	00012fa5 	.word	0x00012fa5
    5b00:	fffffbff 	.word	0xfffffbff
    5b04:	00005bcd 	.word	0x00005bcd
    5b08:	0000020b 	.word	0x0000020b

00005b0c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    5b0c:	b590      	push	{r4, r7, lr}
    5b0e:	b085      	sub	sp, #20
    5b10:	af00      	add	r7, sp, #0
    5b12:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    5b14:	230f      	movs	r3, #15
    5b16:	18fb      	adds	r3, r7, r3
    5b18:	2200      	movs	r2, #0
    5b1a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    5b1c:	230f      	movs	r3, #15
    5b1e:	18fc      	adds	r4, r7, r3
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	0018      	movs	r0, r3
    5b24:	4b05      	ldr	r3, [pc, #20]	; (5b3c <nm_bus_iface_init+0x30>)
    5b26:	4798      	blx	r3
    5b28:	0003      	movs	r3, r0
    5b2a:	7023      	strb	r3, [r4, #0]
	return ret;
    5b2c:	230f      	movs	r3, #15
    5b2e:	18fb      	adds	r3, r7, r3
    5b30:	781b      	ldrb	r3, [r3, #0]
    5b32:	b25b      	sxtb	r3, r3
}
    5b34:	0018      	movs	r0, r3
    5b36:	46bd      	mov	sp, r7
    5b38:	b005      	add	sp, #20
    5b3a:	bd90      	pop	{r4, r7, pc}
    5b3c:	00003945 	.word	0x00003945

00005b40 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    5b40:	b590      	push	{r4, r7, lr}
    5b42:	b083      	sub	sp, #12
    5b44:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    5b46:	1dfb      	adds	r3, r7, #7
    5b48:	2200      	movs	r2, #0
    5b4a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    5b4c:	1dfc      	adds	r4, r7, #7
    5b4e:	4b05      	ldr	r3, [pc, #20]	; (5b64 <nm_bus_iface_deinit+0x24>)
    5b50:	4798      	blx	r3
    5b52:	0003      	movs	r3, r0
    5b54:	7023      	strb	r3, [r4, #0]

	return ret;
    5b56:	1dfb      	adds	r3, r7, #7
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	b25b      	sxtb	r3, r3
}
    5b5c:	0018      	movs	r0, r3
    5b5e:	46bd      	mov	sp, r7
    5b60:	b003      	add	sp, #12
    5b62:	bd90      	pop	{r4, r7, pc}
    5b64:	00003ac1 	.word	0x00003ac1

00005b68 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    5b68:	b580      	push	{r7, lr}
    5b6a:	b082      	sub	sp, #8
    5b6c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    5b6e:	1dfb      	adds	r3, r7, #7
    5b70:	2200      	movs	r2, #0
    5b72:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    5b74:	4b03      	ldr	r3, [pc, #12]	; (5b84 <nm_bus_reset+0x1c>)
    5b76:	4798      	blx	r3
    5b78:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    5b7a:	0018      	movs	r0, r3
    5b7c:	46bd      	mov	sp, r7
    5b7e:	b002      	add	sp, #8
    5b80:	bd80      	pop	{r7, pc}
    5b82:	46c0      	nop			; (mov r8, r8)
    5b84:	00007451 	.word	0x00007451

00005b88 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	b082      	sub	sp, #8
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	0018      	movs	r0, r3
    5b94:	4b03      	ldr	r3, [pc, #12]	; (5ba4 <nm_read_reg+0x1c>)
    5b96:	4798      	blx	r3
    5b98:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    5b9a:	0018      	movs	r0, r3
    5b9c:	46bd      	mov	sp, r7
    5b9e:	b002      	add	sp, #8
    5ba0:	bd80      	pop	{r7, pc}
    5ba2:	46c0      	nop			; (mov r8, r8)
    5ba4:	000075e5 	.word	0x000075e5

00005ba8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    5ba8:	b580      	push	{r7, lr}
    5baa:	b082      	sub	sp, #8
    5bac:	af00      	add	r7, sp, #0
    5bae:	6078      	str	r0, [r7, #4]
    5bb0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    5bb2:	683a      	ldr	r2, [r7, #0]
    5bb4:	687b      	ldr	r3, [r7, #4]
    5bb6:	0011      	movs	r1, r2
    5bb8:	0018      	movs	r0, r3
    5bba:	4b03      	ldr	r3, [pc, #12]	; (5bc8 <nm_read_reg_with_ret+0x20>)
    5bbc:	4798      	blx	r3
    5bbe:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    5bc0:	0018      	movs	r0, r3
    5bc2:	46bd      	mov	sp, r7
    5bc4:	b002      	add	sp, #8
    5bc6:	bd80      	pop	{r7, pc}
    5bc8:	00007609 	.word	0x00007609

00005bcc <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5bcc:	b580      	push	{r7, lr}
    5bce:	b082      	sub	sp, #8
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	6078      	str	r0, [r7, #4]
    5bd4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    5bd6:	683a      	ldr	r2, [r7, #0]
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	0011      	movs	r1, r2
    5bdc:	0018      	movs	r0, r3
    5bde:	4b03      	ldr	r3, [pc, #12]	; (5bec <nm_write_reg+0x20>)
    5be0:	4798      	blx	r3
    5be2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    5be4:	0018      	movs	r0, r3
    5be6:	46bd      	mov	sp, r7
    5be8:	b002      	add	sp, #8
    5bea:	bd80      	pop	{r7, pc}
    5bec:	00007659 	.word	0x00007659

00005bf0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5bf0:	b580      	push	{r7, lr}
    5bf2:	b084      	sub	sp, #16
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	60f8      	str	r0, [r7, #12]
    5bf8:	60b9      	str	r1, [r7, #8]
    5bfa:	1dbb      	adds	r3, r7, #6
    5bfc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    5bfe:	1dbb      	adds	r3, r7, #6
    5c00:	881a      	ldrh	r2, [r3, #0]
    5c02:	68b9      	ldr	r1, [r7, #8]
    5c04:	68fb      	ldr	r3, [r7, #12]
    5c06:	0018      	movs	r0, r3
    5c08:	4b03      	ldr	r3, [pc, #12]	; (5c18 <p_nm_read_block+0x28>)
    5c0a:	4798      	blx	r3
    5c0c:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    5c0e:	0018      	movs	r0, r3
    5c10:	46bd      	mov	sp, r7
    5c12:	b004      	add	sp, #16
    5c14:	bd80      	pop	{r7, pc}
    5c16:	46c0      	nop			; (mov r8, r8)
    5c18:	000076a9 	.word	0x000076a9

00005c1c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    5c1c:	b580      	push	{r7, lr}
    5c1e:	b086      	sub	sp, #24
    5c20:	af00      	add	r7, sp, #0
    5c22:	60f8      	str	r0, [r7, #12]
    5c24:	60b9      	str	r1, [r7, #8]
    5c26:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    5c28:	4b2d      	ldr	r3, [pc, #180]	; (5ce0 <nm_read_block+0xc4>)
    5c2a:	881a      	ldrh	r2, [r3, #0]
    5c2c:	2310      	movs	r3, #16
    5c2e:	18fb      	adds	r3, r7, r3
    5c30:	3a08      	subs	r2, #8
    5c32:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    5c34:	2300      	movs	r3, #0
    5c36:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    5c38:	2313      	movs	r3, #19
    5c3a:	18fb      	adds	r3, r7, r3
    5c3c:	2200      	movs	r2, #0
    5c3e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    5c40:	2310      	movs	r3, #16
    5c42:	18fb      	adds	r3, r7, r3
    5c44:	881a      	ldrh	r2, [r3, #0]
    5c46:	687b      	ldr	r3, [r7, #4]
    5c48:	429a      	cmp	r2, r3
    5c4a:	d313      	bcc.n	5c74 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    5c4c:	68ba      	ldr	r2, [r7, #8]
    5c4e:	697b      	ldr	r3, [r7, #20]
    5c50:	18d1      	adds	r1, r2, r3
    5c52:	687b      	ldr	r3, [r7, #4]
    5c54:	b29a      	uxth	r2, r3
    5c56:	68fb      	ldr	r3, [r7, #12]
    5c58:	0018      	movs	r0, r3
    5c5a:	4b22      	ldr	r3, [pc, #136]	; (5ce4 <nm_read_block+0xc8>)
    5c5c:	4798      	blx	r3
    5c5e:	0003      	movs	r3, r0
    5c60:	b2da      	uxtb	r2, r3
    5c62:	2313      	movs	r3, #19
    5c64:	18fb      	adds	r3, r7, r3
    5c66:	781b      	ldrb	r3, [r3, #0]
    5c68:	18d3      	adds	r3, r2, r3
    5c6a:	b2da      	uxtb	r2, r3
    5c6c:	2313      	movs	r3, #19
    5c6e:	18fb      	adds	r3, r7, r3
    5c70:	701a      	strb	r2, [r3, #0]
			break;
    5c72:	e02d      	b.n	5cd0 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    5c74:	68ba      	ldr	r2, [r7, #8]
    5c76:	697b      	ldr	r3, [r7, #20]
    5c78:	18d1      	adds	r1, r2, r3
    5c7a:	2310      	movs	r3, #16
    5c7c:	18fb      	adds	r3, r7, r3
    5c7e:	881a      	ldrh	r2, [r3, #0]
    5c80:	68fb      	ldr	r3, [r7, #12]
    5c82:	0018      	movs	r0, r3
    5c84:	4b17      	ldr	r3, [pc, #92]	; (5ce4 <nm_read_block+0xc8>)
    5c86:	4798      	blx	r3
    5c88:	0003      	movs	r3, r0
    5c8a:	b2da      	uxtb	r2, r3
    5c8c:	2313      	movs	r3, #19
    5c8e:	18fb      	adds	r3, r7, r3
    5c90:	781b      	ldrb	r3, [r3, #0]
    5c92:	18d3      	adds	r3, r2, r3
    5c94:	b2da      	uxtb	r2, r3
    5c96:	2313      	movs	r3, #19
    5c98:	18fb      	adds	r3, r7, r3
    5c9a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    5c9c:	2313      	movs	r3, #19
    5c9e:	18fb      	adds	r3, r7, r3
    5ca0:	781b      	ldrb	r3, [r3, #0]
    5ca2:	b25b      	sxtb	r3, r3
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d112      	bne.n	5cce <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    5ca8:	2310      	movs	r3, #16
    5caa:	18fb      	adds	r3, r7, r3
    5cac:	881b      	ldrh	r3, [r3, #0]
    5cae:	687a      	ldr	r2, [r7, #4]
    5cb0:	1ad3      	subs	r3, r2, r3
    5cb2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    5cb4:	2310      	movs	r3, #16
    5cb6:	18fb      	adds	r3, r7, r3
    5cb8:	881b      	ldrh	r3, [r3, #0]
    5cba:	697a      	ldr	r2, [r7, #20]
    5cbc:	18d3      	adds	r3, r2, r3
    5cbe:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    5cc0:	2310      	movs	r3, #16
    5cc2:	18fb      	adds	r3, r7, r3
    5cc4:	881b      	ldrh	r3, [r3, #0]
    5cc6:	68fa      	ldr	r2, [r7, #12]
    5cc8:	18d3      	adds	r3, r2, r3
    5cca:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    5ccc:	e7b8      	b.n	5c40 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    5cce:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    5cd0:	2313      	movs	r3, #19
    5cd2:	18fb      	adds	r3, r7, r3
    5cd4:	781b      	ldrb	r3, [r3, #0]
    5cd6:	b25b      	sxtb	r3, r3
}
    5cd8:	0018      	movs	r0, r3
    5cda:	46bd      	mov	sp, r7
    5cdc:	b006      	add	sp, #24
    5cde:	bd80      	pop	{r7, pc}
    5ce0:	20000000 	.word	0x20000000
    5ce4:	00005bf1 	.word	0x00005bf1

00005ce8 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5ce8:	b580      	push	{r7, lr}
    5cea:	b084      	sub	sp, #16
    5cec:	af00      	add	r7, sp, #0
    5cee:	60f8      	str	r0, [r7, #12]
    5cf0:	60b9      	str	r1, [r7, #8]
    5cf2:	1dbb      	adds	r3, r7, #6
    5cf4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    5cf6:	1dbb      	adds	r3, r7, #6
    5cf8:	881a      	ldrh	r2, [r3, #0]
    5cfa:	68b9      	ldr	r1, [r7, #8]
    5cfc:	68fb      	ldr	r3, [r7, #12]
    5cfe:	0018      	movs	r0, r3
    5d00:	4b03      	ldr	r3, [pc, #12]	; (5d10 <p_nm_write_block+0x28>)
    5d02:	4798      	blx	r3
    5d04:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    5d06:	0018      	movs	r0, r3
    5d08:	46bd      	mov	sp, r7
    5d0a:	b004      	add	sp, #16
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	46c0      	nop			; (mov r8, r8)
    5d10:	00007701 	.word	0x00007701

00005d14 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b086      	sub	sp, #24
    5d18:	af00      	add	r7, sp, #0
    5d1a:	60f8      	str	r0, [r7, #12]
    5d1c:	60b9      	str	r1, [r7, #8]
    5d1e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    5d20:	4b2d      	ldr	r3, [pc, #180]	; (5dd8 <nm_write_block+0xc4>)
    5d22:	881a      	ldrh	r2, [r3, #0]
    5d24:	2310      	movs	r3, #16
    5d26:	18fb      	adds	r3, r7, r3
    5d28:	3a08      	subs	r2, #8
    5d2a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    5d2c:	2300      	movs	r3, #0
    5d2e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    5d30:	2313      	movs	r3, #19
    5d32:	18fb      	adds	r3, r7, r3
    5d34:	2200      	movs	r2, #0
    5d36:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    5d38:	2310      	movs	r3, #16
    5d3a:	18fb      	adds	r3, r7, r3
    5d3c:	881a      	ldrh	r2, [r3, #0]
    5d3e:	687b      	ldr	r3, [r7, #4]
    5d40:	429a      	cmp	r2, r3
    5d42:	d313      	bcc.n	5d6c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    5d44:	68ba      	ldr	r2, [r7, #8]
    5d46:	697b      	ldr	r3, [r7, #20]
    5d48:	18d1      	adds	r1, r2, r3
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	b29a      	uxth	r2, r3
    5d4e:	68fb      	ldr	r3, [r7, #12]
    5d50:	0018      	movs	r0, r3
    5d52:	4b22      	ldr	r3, [pc, #136]	; (5ddc <nm_write_block+0xc8>)
    5d54:	4798      	blx	r3
    5d56:	0003      	movs	r3, r0
    5d58:	b2da      	uxtb	r2, r3
    5d5a:	2313      	movs	r3, #19
    5d5c:	18fb      	adds	r3, r7, r3
    5d5e:	781b      	ldrb	r3, [r3, #0]
    5d60:	18d3      	adds	r3, r2, r3
    5d62:	b2da      	uxtb	r2, r3
    5d64:	2313      	movs	r3, #19
    5d66:	18fb      	adds	r3, r7, r3
    5d68:	701a      	strb	r2, [r3, #0]
			break;
    5d6a:	e02d      	b.n	5dc8 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    5d6c:	68ba      	ldr	r2, [r7, #8]
    5d6e:	697b      	ldr	r3, [r7, #20]
    5d70:	18d1      	adds	r1, r2, r3
    5d72:	2310      	movs	r3, #16
    5d74:	18fb      	adds	r3, r7, r3
    5d76:	881a      	ldrh	r2, [r3, #0]
    5d78:	68fb      	ldr	r3, [r7, #12]
    5d7a:	0018      	movs	r0, r3
    5d7c:	4b17      	ldr	r3, [pc, #92]	; (5ddc <nm_write_block+0xc8>)
    5d7e:	4798      	blx	r3
    5d80:	0003      	movs	r3, r0
    5d82:	b2da      	uxtb	r2, r3
    5d84:	2313      	movs	r3, #19
    5d86:	18fb      	adds	r3, r7, r3
    5d88:	781b      	ldrb	r3, [r3, #0]
    5d8a:	18d3      	adds	r3, r2, r3
    5d8c:	b2da      	uxtb	r2, r3
    5d8e:	2313      	movs	r3, #19
    5d90:	18fb      	adds	r3, r7, r3
    5d92:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    5d94:	2313      	movs	r3, #19
    5d96:	18fb      	adds	r3, r7, r3
    5d98:	781b      	ldrb	r3, [r3, #0]
    5d9a:	b25b      	sxtb	r3, r3
    5d9c:	2b00      	cmp	r3, #0
    5d9e:	d112      	bne.n	5dc6 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    5da0:	2310      	movs	r3, #16
    5da2:	18fb      	adds	r3, r7, r3
    5da4:	881b      	ldrh	r3, [r3, #0]
    5da6:	687a      	ldr	r2, [r7, #4]
    5da8:	1ad3      	subs	r3, r2, r3
    5daa:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    5dac:	2310      	movs	r3, #16
    5dae:	18fb      	adds	r3, r7, r3
    5db0:	881b      	ldrh	r3, [r3, #0]
    5db2:	697a      	ldr	r2, [r7, #20]
    5db4:	18d3      	adds	r3, r2, r3
    5db6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    5db8:	2310      	movs	r3, #16
    5dba:	18fb      	adds	r3, r7, r3
    5dbc:	881b      	ldrh	r3, [r3, #0]
    5dbe:	68fa      	ldr	r2, [r7, #12]
    5dc0:	18d3      	adds	r3, r2, r3
    5dc2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    5dc4:	e7b8      	b.n	5d38 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    5dc6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    5dc8:	2313      	movs	r3, #19
    5dca:	18fb      	adds	r3, r7, r3
    5dcc:	781b      	ldrb	r3, [r3, #0]
    5dce:	b25b      	sxtb	r3, r3
}
    5dd0:	0018      	movs	r0, r3
    5dd2:	46bd      	mov	sp, r7
    5dd4:	b006      	add	sp, #24
    5dd6:	bd80      	pop	{r7, pc}
    5dd8:	20000000 	.word	0x20000000
    5ddc:	00005ce9 	.word	0x00005ce9

00005de0 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    5de0:	b590      	push	{r4, r7, lr}
    5de2:	b089      	sub	sp, #36	; 0x24
    5de4:	af00      	add	r7, sp, #0
    5de6:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    5de8:	2300      	movs	r3, #0
    5dea:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    5dec:	231f      	movs	r3, #31
    5dee:	18fb      	adds	r3, r7, r3
    5df0:	2200      	movs	r2, #0
    5df2:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    5df4:	230c      	movs	r3, #12
    5df6:	18fb      	adds	r3, r7, r3
    5df8:	0018      	movs	r0, r3
    5dfa:	2308      	movs	r3, #8
    5dfc:	001a      	movs	r2, r3
    5dfe:	2100      	movs	r1, #0
    5e00:	4b64      	ldr	r3, [pc, #400]	; (5f94 <nm_get_firmware_full_info+0x1b4>)
    5e02:	4798      	blx	r3
	if (pstrRev != NULL)
    5e04:	687b      	ldr	r3, [r7, #4]
    5e06:	2b00      	cmp	r3, #0
    5e08:	d100      	bne.n	5e0c <nm_get_firmware_full_info+0x2c>
    5e0a:	e0ba      	b.n	5f82 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    5e0c:	687b      	ldr	r3, [r7, #4]
    5e0e:	2228      	movs	r2, #40	; 0x28
    5e10:	2100      	movs	r1, #0
    5e12:	0018      	movs	r0, r3
    5e14:	4b60      	ldr	r3, [pc, #384]	; (5f98 <nm_get_firmware_full_info+0x1b8>)
    5e16:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    5e18:	231f      	movs	r3, #31
    5e1a:	18fc      	adds	r4, r7, r3
    5e1c:	2314      	movs	r3, #20
    5e1e:	18fb      	adds	r3, r7, r3
    5e20:	4a5e      	ldr	r2, [pc, #376]	; (5f9c <nm_get_firmware_full_info+0x1bc>)
    5e22:	0019      	movs	r1, r3
    5e24:	0010      	movs	r0, r2
    5e26:	4b5e      	ldr	r3, [pc, #376]	; (5fa0 <nm_get_firmware_full_info+0x1c0>)
    5e28:	4798      	blx	r3
    5e2a:	0003      	movs	r3, r0
    5e2c:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    5e2e:	231f      	movs	r3, #31
    5e30:	18fb      	adds	r3, r7, r3
    5e32:	781b      	ldrb	r3, [r3, #0]
    5e34:	b25b      	sxtb	r3, r3
    5e36:	2b00      	cmp	r3, #0
    5e38:	d000      	beq.n	5e3c <nm_get_firmware_full_info+0x5c>
    5e3a:	e0a2      	b.n	5f82 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    5e3c:	697b      	ldr	r3, [r7, #20]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d100      	bne.n	5e44 <nm_get_firmware_full_info+0x64>
    5e42:	e09a      	b.n	5f7a <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    5e44:	697b      	ldr	r3, [r7, #20]
    5e46:	22c0      	movs	r2, #192	; 0xc0
    5e48:	0292      	lsls	r2, r2, #10
    5e4a:	4313      	orrs	r3, r2
    5e4c:	221f      	movs	r2, #31
    5e4e:	18bc      	adds	r4, r7, r2
    5e50:	220c      	movs	r2, #12
    5e52:	18b9      	adds	r1, r7, r2
    5e54:	2208      	movs	r2, #8
    5e56:	0018      	movs	r0, r3
    5e58:	4b52      	ldr	r3, [pc, #328]	; (5fa4 <nm_get_firmware_full_info+0x1c4>)
    5e5a:	4798      	blx	r3
    5e5c:	0003      	movs	r3, r0
    5e5e:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    5e60:	231f      	movs	r3, #31
    5e62:	18fb      	adds	r3, r7, r3
    5e64:	781b      	ldrb	r3, [r3, #0]
    5e66:	b25b      	sxtb	r3, r3
    5e68:	2b00      	cmp	r3, #0
    5e6a:	d000      	beq.n	5e6e <nm_get_firmware_full_info+0x8e>
    5e6c:	e089      	b.n	5f82 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    5e6e:	230c      	movs	r3, #12
    5e70:	18fb      	adds	r3, r7, r3
    5e72:	685b      	ldr	r3, [r3, #4]
    5e74:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    5e76:	697b      	ldr	r3, [r7, #20]
    5e78:	041b      	lsls	r3, r3, #16
    5e7a:	0c1b      	lsrs	r3, r3, #16
    5e7c:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    5e7e:	697b      	ldr	r3, [r7, #20]
    5e80:	2b00      	cmp	r3, #0
    5e82:	d100      	bne.n	5e86 <nm_get_firmware_full_info+0xa6>
    5e84:	e074      	b.n	5f70 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    5e86:	697b      	ldr	r3, [r7, #20]
    5e88:	22c0      	movs	r2, #192	; 0xc0
    5e8a:	0292      	lsls	r2, r2, #10
    5e8c:	4313      	orrs	r3, r2
    5e8e:	221f      	movs	r2, #31
    5e90:	18bc      	adds	r4, r7, r2
    5e92:	6879      	ldr	r1, [r7, #4]
    5e94:	2228      	movs	r2, #40	; 0x28
    5e96:	0018      	movs	r0, r3
    5e98:	4b42      	ldr	r3, [pc, #264]	; (5fa4 <nm_get_firmware_full_info+0x1c4>)
    5e9a:	4798      	blx	r3
    5e9c:	0003      	movs	r3, r0
    5e9e:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    5ea0:	231f      	movs	r3, #31
    5ea2:	18fb      	adds	r3, r7, r3
    5ea4:	781b      	ldrb	r3, [r3, #0]
    5ea6:	b25b      	sxtb	r3, r3
    5ea8:	2b00      	cmp	r3, #0
    5eaa:	d16a      	bne.n	5f82 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	791b      	ldrb	r3, [r3, #4]
    5eb0:	021b      	lsls	r3, r3, #8
    5eb2:	b21a      	sxth	r2, r3
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	795b      	ldrb	r3, [r3, #5]
    5eb8:	011b      	lsls	r3, r3, #4
    5eba:	b21b      	sxth	r3, r3
    5ebc:	21ff      	movs	r1, #255	; 0xff
    5ebe:	400b      	ands	r3, r1
    5ec0:	b21b      	sxth	r3, r3
    5ec2:	4313      	orrs	r3, r2
    5ec4:	b21a      	sxth	r2, r3
    5ec6:	687b      	ldr	r3, [r7, #4]
    5ec8:	799b      	ldrb	r3, [r3, #6]
    5eca:	b21b      	sxth	r3, r3
    5ecc:	210f      	movs	r1, #15
    5ece:	400b      	ands	r3, r1
    5ed0:	b21b      	sxth	r3, r3
    5ed2:	4313      	orrs	r3, r2
    5ed4:	b21a      	sxth	r2, r3
    5ed6:	231c      	movs	r3, #28
    5ed8:	18fb      	adds	r3, r7, r3
    5eda:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    5edc:	231a      	movs	r3, #26
    5ede:	18fb      	adds	r3, r7, r3
    5ee0:	4a31      	ldr	r2, [pc, #196]	; (5fa8 <nm_get_firmware_full_info+0x1c8>)
    5ee2:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	79db      	ldrb	r3, [r3, #7]
    5ee8:	021b      	lsls	r3, r3, #8
    5eea:	b21a      	sxth	r2, r3
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	7a1b      	ldrb	r3, [r3, #8]
    5ef0:	011b      	lsls	r3, r3, #4
    5ef2:	b21b      	sxth	r3, r3
    5ef4:	21ff      	movs	r1, #255	; 0xff
    5ef6:	400b      	ands	r3, r1
    5ef8:	b21b      	sxth	r3, r3
    5efa:	4313      	orrs	r3, r2
    5efc:	b21a      	sxth	r2, r3
    5efe:	687b      	ldr	r3, [r7, #4]
    5f00:	7a5b      	ldrb	r3, [r3, #9]
    5f02:	b21b      	sxth	r3, r3
    5f04:	210f      	movs	r1, #15
    5f06:	400b      	ands	r3, r1
    5f08:	b21b      	sxth	r3, r3
    5f0a:	4313      	orrs	r3, r2
    5f0c:	b21a      	sxth	r2, r3
    5f0e:	2318      	movs	r3, #24
    5f10:	18fb      	adds	r3, r7, r3
    5f12:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    5f14:	231c      	movs	r3, #28
    5f16:	18fb      	adds	r3, r7, r3
    5f18:	881b      	ldrh	r3, [r3, #0]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d009      	beq.n	5f32 <nm_get_firmware_full_info+0x152>
    5f1e:	2318      	movs	r3, #24
    5f20:	18fb      	adds	r3, r7, r3
    5f22:	881b      	ldrh	r3, [r3, #0]
    5f24:	2b00      	cmp	r3, #0
    5f26:	d004      	beq.n	5f32 <nm_get_firmware_full_info+0x152>
    5f28:	2318      	movs	r3, #24
    5f2a:	18fb      	adds	r3, r7, r3
    5f2c:	881b      	ldrh	r3, [r3, #0]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d104      	bne.n	5f3c <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    5f32:	231f      	movs	r3, #31
    5f34:	18fb      	adds	r3, r7, r3
    5f36:	22f4      	movs	r2, #244	; 0xf4
    5f38:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    5f3a:	e022      	b.n	5f82 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    5f3c:	231a      	movs	r3, #26
    5f3e:	18fa      	adds	r2, r7, r3
    5f40:	2318      	movs	r3, #24
    5f42:	18fb      	adds	r3, r7, r3
    5f44:	8812      	ldrh	r2, [r2, #0]
    5f46:	881b      	ldrh	r3, [r3, #0]
    5f48:	429a      	cmp	r2, r3
    5f4a:	d204      	bcs.n	5f56 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    5f4c:	231f      	movs	r3, #31
    5f4e:	18fb      	adds	r3, r7, r3
    5f50:	22f3      	movs	r2, #243	; 0xf3
    5f52:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    5f54:	e015      	b.n	5f82 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    5f56:	231a      	movs	r3, #26
    5f58:	18fa      	adds	r2, r7, r3
    5f5a:	231c      	movs	r3, #28
    5f5c:	18fb      	adds	r3, r7, r3
    5f5e:	8812      	ldrh	r2, [r2, #0]
    5f60:	881b      	ldrh	r3, [r3, #0]
    5f62:	429a      	cmp	r2, r3
    5f64:	d90d      	bls.n	5f82 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    5f66:	231f      	movs	r3, #31
    5f68:	18fb      	adds	r3, r7, r3
    5f6a:	22f3      	movs	r2, #243	; 0xf3
    5f6c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    5f6e:	e008      	b.n	5f82 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    5f70:	231f      	movs	r3, #31
    5f72:	18fb      	adds	r3, r7, r3
    5f74:	22f4      	movs	r2, #244	; 0xf4
    5f76:	701a      	strb	r2, [r3, #0]
    5f78:	e003      	b.n	5f82 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    5f7a:	231f      	movs	r3, #31
    5f7c:	18fb      	adds	r3, r7, r3
    5f7e:	22f4      	movs	r2, #244	; 0xf4
    5f80:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    5f82:	231f      	movs	r3, #31
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	b25b      	sxtb	r3, r3
}
    5f8a:	0018      	movs	r0, r3
    5f8c:	46bd      	mov	sp, r7
    5f8e:	b009      	add	sp, #36	; 0x24
    5f90:	bd90      	pop	{r4, r7, pc}
    5f92:	46c0      	nop			; (mov r8, r8)
    5f94:	0001252f 	.word	0x0001252f
    5f98:	00003b6d 	.word	0x00003b6d
    5f9c:	000c0008 	.word	0x000c0008
    5fa0:	00005ba9 	.word	0x00005ba9
    5fa4:	00005c1d 	.word	0x00005c1d
    5fa8:	00001352 	.word	0x00001352

00005fac <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    5fac:	b590      	push	{r4, r7, lr}
    5fae:	b085      	sub	sp, #20
    5fb0:	af00      	add	r7, sp, #0
    5fb2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    5fb4:	230f      	movs	r3, #15
    5fb6:	18fb      	adds	r3, r7, r3
    5fb8:	2200      	movs	r2, #0
    5fba:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    5fbc:	687b      	ldr	r3, [r7, #4]
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d013      	beq.n	5fea <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    5fc2:	230e      	movs	r3, #14
    5fc4:	18fb      	adds	r3, r7, r3
    5fc6:	687a      	ldr	r2, [r7, #4]
    5fc8:	7812      	ldrb	r2, [r2, #0]
    5fca:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    5fcc:	230e      	movs	r3, #14
    5fce:	18fb      	adds	r3, r7, r3
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d004      	beq.n	5fe0 <nm_drv_init+0x34>
    5fd6:	230e      	movs	r3, #14
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	2b04      	cmp	r3, #4
    5fde:	d908      	bls.n	5ff2 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    5fe0:	230e      	movs	r3, #14
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	2201      	movs	r2, #1
    5fe6:	701a      	strb	r2, [r3, #0]
    5fe8:	e003      	b.n	5ff2 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    5fea:	230e      	movs	r3, #14
    5fec:	18fb      	adds	r3, r7, r3
    5fee:	2201      	movs	r2, #1
    5ff0:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    5ff2:	230f      	movs	r3, #15
    5ff4:	18fc      	adds	r4, r7, r3
    5ff6:	2000      	movs	r0, #0
    5ff8:	4b41      	ldr	r3, [pc, #260]	; (6100 <nm_drv_init+0x154>)
    5ffa:	4798      	blx	r3
    5ffc:	0003      	movs	r3, r0
    5ffe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6000:	230f      	movs	r3, #15
    6002:	18fb      	adds	r3, r7, r3
    6004:	781b      	ldrb	r3, [r3, #0]
    6006:	b25b      	sxtb	r3, r3
    6008:	2b00      	cmp	r3, #0
    600a:	d00f      	beq.n	602c <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    600c:	2328      	movs	r3, #40	; 0x28
    600e:	33ff      	adds	r3, #255	; 0xff
    6010:	001a      	movs	r2, r3
    6012:	493c      	ldr	r1, [pc, #240]	; (6104 <nm_drv_init+0x158>)
    6014:	4b3c      	ldr	r3, [pc, #240]	; (6108 <nm_drv_init+0x15c>)
    6016:	0018      	movs	r0, r3
    6018:	4b3c      	ldr	r3, [pc, #240]	; (610c <nm_drv_init+0x160>)
    601a:	4798      	blx	r3
    601c:	4b3c      	ldr	r3, [pc, #240]	; (6110 <nm_drv_init+0x164>)
    601e:	0018      	movs	r0, r3
    6020:	4b3c      	ldr	r3, [pc, #240]	; (6114 <nm_drv_init+0x168>)
    6022:	4798      	blx	r3
    6024:	200d      	movs	r0, #13
    6026:	4b3c      	ldr	r3, [pc, #240]	; (6118 <nm_drv_init+0x16c>)
    6028:	4798      	blx	r3
		goto ERR1;
    602a:	e060      	b.n	60ee <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    602c:	4b3b      	ldr	r3, [pc, #236]	; (611c <nm_drv_init+0x170>)
    602e:	0018      	movs	r0, r3
    6030:	4b36      	ldr	r3, [pc, #216]	; (610c <nm_drv_init+0x160>)
    6032:	4798      	blx	r3
    6034:	4b3a      	ldr	r3, [pc, #232]	; (6120 <nm_drv_init+0x174>)
    6036:	4798      	blx	r3
    6038:	0002      	movs	r2, r0
    603a:	4b3a      	ldr	r3, [pc, #232]	; (6124 <nm_drv_init+0x178>)
    603c:	0011      	movs	r1, r2
    603e:	0018      	movs	r0, r3
    6040:	4b32      	ldr	r3, [pc, #200]	; (610c <nm_drv_init+0x160>)
    6042:	4798      	blx	r3
    6044:	200d      	movs	r0, #13
    6046:	4b34      	ldr	r3, [pc, #208]	; (6118 <nm_drv_init+0x16c>)
    6048:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    604a:	4b37      	ldr	r3, [pc, #220]	; (6128 <nm_drv_init+0x17c>)
    604c:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    604e:	230f      	movs	r3, #15
    6050:	18fc      	adds	r4, r7, r3
    6052:	230e      	movs	r3, #14
    6054:	18fb      	adds	r3, r7, r3
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	0018      	movs	r0, r3
    605a:	4b34      	ldr	r3, [pc, #208]	; (612c <nm_drv_init+0x180>)
    605c:	4798      	blx	r3
    605e:	0003      	movs	r3, r0
    6060:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6062:	230f      	movs	r3, #15
    6064:	18fb      	adds	r3, r7, r3
    6066:	781b      	ldrb	r3, [r3, #0]
    6068:	b25b      	sxtb	r3, r3
    606a:	2b00      	cmp	r3, #0
    606c:	d13a      	bne.n	60e4 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    606e:	230f      	movs	r3, #15
    6070:	18fc      	adds	r4, r7, r3
    6072:	230e      	movs	r3, #14
    6074:	18fb      	adds	r3, r7, r3
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	0018      	movs	r0, r3
    607a:	4b2d      	ldr	r3, [pc, #180]	; (6130 <nm_drv_init+0x184>)
    607c:	4798      	blx	r3
    607e:	0003      	movs	r3, r0
    6080:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6082:	230f      	movs	r3, #15
    6084:	18fb      	adds	r3, r7, r3
    6086:	781b      	ldrb	r3, [r3, #0]
    6088:	b25b      	sxtb	r3, r3
    608a:	2b00      	cmp	r3, #0
    608c:	d12c      	bne.n	60e8 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    608e:	230e      	movs	r3, #14
    6090:	18fb      	adds	r3, r7, r3
    6092:	781b      	ldrb	r3, [r3, #0]
    6094:	2b02      	cmp	r3, #2
    6096:	d02a      	beq.n	60ee <nm_drv_init+0x142>
    6098:	230e      	movs	r3, #14
    609a:	18fb      	adds	r3, r7, r3
    609c:	781b      	ldrb	r3, [r3, #0]
    609e:	2b03      	cmp	r3, #3
    60a0:	d025      	beq.n	60ee <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    60a2:	230f      	movs	r3, #15
    60a4:	18fc      	adds	r4, r7, r3
    60a6:	4b23      	ldr	r3, [pc, #140]	; (6134 <nm_drv_init+0x188>)
    60a8:	4798      	blx	r3
    60aa:	0003      	movs	r3, r0
    60ac:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    60ae:	230f      	movs	r3, #15
    60b0:	18fb      	adds	r3, r7, r3
    60b2:	781b      	ldrb	r3, [r3, #0]
    60b4:	b25b      	sxtb	r3, r3
    60b6:	2b00      	cmp	r3, #0
    60b8:	d00f      	beq.n	60da <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    60ba:	2356      	movs	r3, #86	; 0x56
    60bc:	33ff      	adds	r3, #255	; 0xff
    60be:	001a      	movs	r2, r3
    60c0:	4910      	ldr	r1, [pc, #64]	; (6104 <nm_drv_init+0x158>)
    60c2:	4b11      	ldr	r3, [pc, #68]	; (6108 <nm_drv_init+0x15c>)
    60c4:	0018      	movs	r0, r3
    60c6:	4b11      	ldr	r3, [pc, #68]	; (610c <nm_drv_init+0x160>)
    60c8:	4798      	blx	r3
    60ca:	4b1b      	ldr	r3, [pc, #108]	; (6138 <nm_drv_init+0x18c>)
    60cc:	0018      	movs	r0, r3
    60ce:	4b11      	ldr	r3, [pc, #68]	; (6114 <nm_drv_init+0x168>)
    60d0:	4798      	blx	r3
    60d2:	200d      	movs	r0, #13
    60d4:	4b10      	ldr	r3, [pc, #64]	; (6118 <nm_drv_init+0x16c>)
    60d6:	4798      	blx	r3
		goto ERR2;
    60d8:	e007      	b.n	60ea <nm_drv_init+0x13e>
	}
	return ret;
    60da:	230f      	movs	r3, #15
    60dc:	18fb      	adds	r3, r7, r3
    60de:	781b      	ldrb	r3, [r3, #0]
    60e0:	b25b      	sxtb	r3, r3
    60e2:	e008      	b.n	60f6 <nm_drv_init+0x14a>
		goto ERR2;
    60e4:	46c0      	nop			; (mov r8, r8)
    60e6:	e000      	b.n	60ea <nm_drv_init+0x13e>
		goto ERR2;
    60e8:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    60ea:	4b14      	ldr	r3, [pc, #80]	; (613c <nm_drv_init+0x190>)
    60ec:	4798      	blx	r3
ERR1:
	return ret;
    60ee:	230f      	movs	r3, #15
    60f0:	18fb      	adds	r3, r7, r3
    60f2:	781b      	ldrb	r3, [r3, #0]
    60f4:	b25b      	sxtb	r3, r3
}
    60f6:	0018      	movs	r0, r3
    60f8:	46bd      	mov	sp, r7
    60fa:	b005      	add	sp, #20
    60fc:	bd90      	pop	{r4, r7, pc}
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	00005b0d 	.word	0x00005b0d
    6104:	00018e44 	.word	0x00018e44
    6108:	00018d78 	.word	0x00018d78
    610c:	00012f71 	.word	0x00012f71
    6110:	00018d8c 	.word	0x00018d8c
    6114:	0001308d 	.word	0x0001308d
    6118:	00012fa5 	.word	0x00012fa5
    611c:	00018da8 	.word	0x00018da8
    6120:	000054ad 	.word	0x000054ad
    6124:	00018db4 	.word	0x00018db4
    6128:	00007481 	.word	0x00007481
    612c:	00005801 	.word	0x00005801
    6130:	00005999 	.word	0x00005999
    6134:	000053f9 	.word	0x000053f9
    6138:	00018dc4 	.word	0x00018dc4
    613c:	00005b41 	.word	0x00005b41

00006140 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    6140:	b590      	push	{r4, r7, lr}
    6142:	b085      	sub	sp, #20
    6144:	af00      	add	r7, sp, #0
    6146:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    6148:	230f      	movs	r3, #15
    614a:	18fc      	adds	r4, r7, r3
    614c:	4b2d      	ldr	r3, [pc, #180]	; (6204 <nm_drv_deinit+0xc4>)
    614e:	4798      	blx	r3
    6150:	0003      	movs	r3, r0
    6152:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6154:	230f      	movs	r3, #15
    6156:	18fb      	adds	r3, r7, r3
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	b25b      	sxtb	r3, r3
    615c:	2b00      	cmp	r3, #0
    615e:	d00e      	beq.n	617e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    6160:	23b6      	movs	r3, #182	; 0xb6
    6162:	005a      	lsls	r2, r3, #1
    6164:	4928      	ldr	r1, [pc, #160]	; (6208 <nm_drv_deinit+0xc8>)
    6166:	4b29      	ldr	r3, [pc, #164]	; (620c <nm_drv_deinit+0xcc>)
    6168:	0018      	movs	r0, r3
    616a:	4b29      	ldr	r3, [pc, #164]	; (6210 <nm_drv_deinit+0xd0>)
    616c:	4798      	blx	r3
    616e:	4b29      	ldr	r3, [pc, #164]	; (6214 <nm_drv_deinit+0xd4>)
    6170:	0018      	movs	r0, r3
    6172:	4b29      	ldr	r3, [pc, #164]	; (6218 <nm_drv_deinit+0xd8>)
    6174:	4798      	blx	r3
    6176:	200d      	movs	r0, #13
    6178:	4b28      	ldr	r3, [pc, #160]	; (621c <nm_drv_deinit+0xdc>)
    617a:	4798      	blx	r3
		goto ERR1;
    617c:	e03a      	b.n	61f4 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    617e:	230f      	movs	r3, #15
    6180:	18fc      	adds	r4, r7, r3
    6182:	2000      	movs	r0, #0
    6184:	4b26      	ldr	r3, [pc, #152]	; (6220 <nm_drv_deinit+0xe0>)
    6186:	4798      	blx	r3
    6188:	0003      	movs	r3, r0
    618a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    618c:	230f      	movs	r3, #15
    618e:	18fb      	adds	r3, r7, r3
    6190:	781b      	ldrb	r3, [r3, #0]
    6192:	b25b      	sxtb	r3, r3
    6194:	2b00      	cmp	r3, #0
    6196:	d00f      	beq.n	61b8 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    6198:	2374      	movs	r3, #116	; 0x74
    619a:	33ff      	adds	r3, #255	; 0xff
    619c:	001a      	movs	r2, r3
    619e:	491a      	ldr	r1, [pc, #104]	; (6208 <nm_drv_deinit+0xc8>)
    61a0:	4b1a      	ldr	r3, [pc, #104]	; (620c <nm_drv_deinit+0xcc>)
    61a2:	0018      	movs	r0, r3
    61a4:	4b1a      	ldr	r3, [pc, #104]	; (6210 <nm_drv_deinit+0xd0>)
    61a6:	4798      	blx	r3
    61a8:	4b1e      	ldr	r3, [pc, #120]	; (6224 <nm_drv_deinit+0xe4>)
    61aa:	0018      	movs	r0, r3
    61ac:	4b1a      	ldr	r3, [pc, #104]	; (6218 <nm_drv_deinit+0xd8>)
    61ae:	4798      	blx	r3
    61b0:	200d      	movs	r0, #13
    61b2:	4b1a      	ldr	r3, [pc, #104]	; (621c <nm_drv_deinit+0xdc>)
    61b4:	4798      	blx	r3
		goto ERR1;
    61b6:	e01d      	b.n	61f4 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    61b8:	230f      	movs	r3, #15
    61ba:	18fc      	adds	r4, r7, r3
    61bc:	4b1a      	ldr	r3, [pc, #104]	; (6228 <nm_drv_deinit+0xe8>)
    61be:	4798      	blx	r3
    61c0:	0003      	movs	r3, r0
    61c2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    61c4:	230f      	movs	r3, #15
    61c6:	18fb      	adds	r3, r7, r3
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	b25b      	sxtb	r3, r3
    61cc:	2b00      	cmp	r3, #0
    61ce:	d00f      	beq.n	61f0 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    61d0:	237a      	movs	r3, #122	; 0x7a
    61d2:	33ff      	adds	r3, #255	; 0xff
    61d4:	001a      	movs	r2, r3
    61d6:	490c      	ldr	r1, [pc, #48]	; (6208 <nm_drv_deinit+0xc8>)
    61d8:	4b0c      	ldr	r3, [pc, #48]	; (620c <nm_drv_deinit+0xcc>)
    61da:	0018      	movs	r0, r3
    61dc:	4b0c      	ldr	r3, [pc, #48]	; (6210 <nm_drv_deinit+0xd0>)
    61de:	4798      	blx	r3
    61e0:	4b12      	ldr	r3, [pc, #72]	; (622c <nm_drv_deinit+0xec>)
    61e2:	0018      	movs	r0, r3
    61e4:	4b0c      	ldr	r3, [pc, #48]	; (6218 <nm_drv_deinit+0xd8>)
    61e6:	4798      	blx	r3
    61e8:	200d      	movs	r0, #13
    61ea:	4b0c      	ldr	r3, [pc, #48]	; (621c <nm_drv_deinit+0xdc>)
    61ec:	4798      	blx	r3
		goto ERR1;
    61ee:	e001      	b.n	61f4 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    61f0:	4b0f      	ldr	r3, [pc, #60]	; (6230 <nm_drv_deinit+0xf0>)
    61f2:	4798      	blx	r3
#endif

ERR1:
	return ret;
    61f4:	230f      	movs	r3, #15
    61f6:	18fb      	adds	r3, r7, r3
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	b25b      	sxtb	r3, r3
}
    61fc:	0018      	movs	r0, r3
    61fe:	46bd      	mov	sp, r7
    6200:	b005      	add	sp, #20
    6202:	bd90      	pop	{r4, r7, pc}
    6204:	00005a4d 	.word	0x00005a4d
    6208:	00018e50 	.word	0x00018e50
    620c:	00018d78 	.word	0x00018d78
    6210:	00012f71 	.word	0x00012f71
    6214:	00018de4 	.word	0x00018de4
    6218:	0001308d 	.word	0x0001308d
    621c:	00012fa5 	.word	0x00012fa5
    6220:	000088d9 	.word	0x000088d9
    6224:	00018e04 	.word	0x00018e04
    6228:	00005b41 	.word	0x00005b41
    622c:	00018e28 	.word	0x00018e28
    6230:	000075cd 	.word	0x000075cd

00006234 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    6234:	b580      	push	{r7, lr}
    6236:	b086      	sub	sp, #24
    6238:	af00      	add	r7, sp, #0
    623a:	6078      	str	r0, [r7, #4]
    623c:	000a      	movs	r2, r1
    623e:	1cbb      	adds	r3, r7, #2
    6240:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    6242:	230c      	movs	r3, #12
    6244:	18fb      	adds	r3, r7, r3
    6246:	2200      	movs	r2, #0
    6248:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    624a:	230c      	movs	r3, #12
    624c:	18fb      	adds	r3, r7, r3
    624e:	687a      	ldr	r2, [r7, #4]
    6250:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    6252:	230c      	movs	r3, #12
    6254:	18fb      	adds	r3, r7, r3
    6256:	1cba      	adds	r2, r7, #2
    6258:	8812      	ldrh	r2, [r2, #0]
    625a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    625c:	230c      	movs	r3, #12
    625e:	18fb      	adds	r3, r7, r3
    6260:	0019      	movs	r1, r3
    6262:	2003      	movs	r0, #3
    6264:	4b03      	ldr	r3, [pc, #12]	; (6274 <nmi_spi_read+0x40>)
    6266:	4798      	blx	r3
    6268:	0003      	movs	r3, r0
}
    626a:	0018      	movs	r0, r3
    626c:	46bd      	mov	sp, r7
    626e:	b006      	add	sp, #24
    6270:	bd80      	pop	{r7, pc}
    6272:	46c0      	nop			; (mov r8, r8)
    6274:	00003a2d 	.word	0x00003a2d

00006278 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    6278:	b580      	push	{r7, lr}
    627a:	b086      	sub	sp, #24
    627c:	af00      	add	r7, sp, #0
    627e:	6078      	str	r0, [r7, #4]
    6280:	000a      	movs	r2, r1
    6282:	1cbb      	adds	r3, r7, #2
    6284:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    6286:	230c      	movs	r3, #12
    6288:	18fb      	adds	r3, r7, r3
    628a:	687a      	ldr	r2, [r7, #4]
    628c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    628e:	230c      	movs	r3, #12
    6290:	18fb      	adds	r3, r7, r3
    6292:	2200      	movs	r2, #0
    6294:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    6296:	230c      	movs	r3, #12
    6298:	18fb      	adds	r3, r7, r3
    629a:	1cba      	adds	r2, r7, #2
    629c:	8812      	ldrh	r2, [r2, #0]
    629e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    62a0:	230c      	movs	r3, #12
    62a2:	18fb      	adds	r3, r7, r3
    62a4:	0019      	movs	r1, r3
    62a6:	2003      	movs	r0, #3
    62a8:	4b03      	ldr	r3, [pc, #12]	; (62b8 <nmi_spi_write+0x40>)
    62aa:	4798      	blx	r3
    62ac:	0003      	movs	r3, r0
}
    62ae:	0018      	movs	r0, r3
    62b0:	46bd      	mov	sp, r7
    62b2:	b006      	add	sp, #24
    62b4:	bd80      	pop	{r7, pc}
    62b6:	46c0      	nop			; (mov r8, r8)
    62b8:	00003a2d 	.word	0x00003a2d

000062bc <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b082      	sub	sp, #8
    62c0:	af00      	add	r7, sp, #0
    62c2:	0002      	movs	r2, r0
    62c4:	1dfb      	adds	r3, r7, #7
    62c6:	701a      	strb	r2, [r3, #0]
    62c8:	1dbb      	adds	r3, r7, #6
    62ca:	1c0a      	adds	r2, r1, #0
    62cc:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    62ce:	1dfb      	adds	r3, r7, #7
    62d0:	781b      	ldrb	r3, [r3, #0]
    62d2:	005a      	lsls	r2, r3, #1
    62d4:	1dbb      	adds	r3, r7, #6
    62d6:	781b      	ldrb	r3, [r3, #0]
    62d8:	4053      	eors	r3, r2
    62da:	4a03      	ldr	r2, [pc, #12]	; (62e8 <crc7_byte+0x2c>)
    62dc:	5cd3      	ldrb	r3, [r2, r3]
}
    62de:	0018      	movs	r0, r3
    62e0:	46bd      	mov	sp, r7
    62e2:	b002      	add	sp, #8
    62e4:	bd80      	pop	{r7, pc}
    62e6:	46c0      	nop			; (mov r8, r8)
    62e8:	00018e60 	.word	0x00018e60

000062ec <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    62ec:	b590      	push	{r4, r7, lr}
    62ee:	b085      	sub	sp, #20
    62f0:	af00      	add	r7, sp, #0
    62f2:	60b9      	str	r1, [r7, #8]
    62f4:	607a      	str	r2, [r7, #4]
    62f6:	230f      	movs	r3, #15
    62f8:	18fb      	adds	r3, r7, r3
    62fa:	1c02      	adds	r2, r0, #0
    62fc:	701a      	strb	r2, [r3, #0]
	while (len--)
    62fe:	e00e      	b.n	631e <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    6300:	68bb      	ldr	r3, [r7, #8]
    6302:	1c5a      	adds	r2, r3, #1
    6304:	60ba      	str	r2, [r7, #8]
    6306:	781a      	ldrb	r2, [r3, #0]
    6308:	230f      	movs	r3, #15
    630a:	18fc      	adds	r4, r7, r3
    630c:	230f      	movs	r3, #15
    630e:	18fb      	adds	r3, r7, r3
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	0011      	movs	r1, r2
    6314:	0018      	movs	r0, r3
    6316:	4b08      	ldr	r3, [pc, #32]	; (6338 <crc7+0x4c>)
    6318:	4798      	blx	r3
    631a:	0003      	movs	r3, r0
    631c:	7023      	strb	r3, [r4, #0]
	while (len--)
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	1e5a      	subs	r2, r3, #1
    6322:	607a      	str	r2, [r7, #4]
    6324:	2b00      	cmp	r3, #0
    6326:	d1eb      	bne.n	6300 <crc7+0x14>
	return crc;
    6328:	230f      	movs	r3, #15
    632a:	18fb      	adds	r3, r7, r3
    632c:	781b      	ldrb	r3, [r3, #0]
}
    632e:	0018      	movs	r0, r3
    6330:	46bd      	mov	sp, r7
    6332:	b005      	add	sp, #20
    6334:	bd90      	pop	{r4, r7, pc}
    6336:	46c0      	nop			; (mov r8, r8)
    6338:	000062bd 	.word	0x000062bd

0000633c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    633c:	b590      	push	{r4, r7, lr}
    633e:	b089      	sub	sp, #36	; 0x24
    6340:	af00      	add	r7, sp, #0
    6342:	60b9      	str	r1, [r7, #8]
    6344:	607a      	str	r2, [r7, #4]
    6346:	603b      	str	r3, [r7, #0]
    6348:	230f      	movs	r3, #15
    634a:	18fb      	adds	r3, r7, r3
    634c:	1c02      	adds	r2, r0, #0
    634e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    6350:	231f      	movs	r3, #31
    6352:	18fb      	adds	r3, r7, r3
    6354:	2205      	movs	r2, #5
    6356:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    6358:	231e      	movs	r3, #30
    635a:	18fb      	adds	r3, r7, r3
    635c:	2201      	movs	r2, #1
    635e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    6360:	2314      	movs	r3, #20
    6362:	18fb      	adds	r3, r7, r3
    6364:	220f      	movs	r2, #15
    6366:	18ba      	adds	r2, r7, r2
    6368:	7812      	ldrb	r2, [r2, #0]
    636a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    636c:	230f      	movs	r3, #15
    636e:	18fb      	adds	r3, r7, r3
    6370:	781b      	ldrb	r3, [r3, #0]
    6372:	3bc1      	subs	r3, #193	; 0xc1
    6374:	2b0e      	cmp	r3, #14
    6376:	d900      	bls.n	637a <spi_cmd+0x3e>
    6378:	e11b      	b.n	65b2 <spi_cmd+0x276>
    637a:	009a      	lsls	r2, r3, #2
    637c:	4bb6      	ldr	r3, [pc, #728]	; (6658 <spi_cmd+0x31c>)
    637e:	18d3      	adds	r3, r2, r3
    6380:	681b      	ldr	r3, [r3, #0]
    6382:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    6384:	68bb      	ldr	r3, [r7, #8]
    6386:	0c1b      	lsrs	r3, r3, #16
    6388:	b2da      	uxtb	r2, r3
    638a:	2314      	movs	r3, #20
    638c:	18fb      	adds	r3, r7, r3
    638e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6390:	68bb      	ldr	r3, [r7, #8]
    6392:	0a1b      	lsrs	r3, r3, #8
    6394:	b2da      	uxtb	r2, r3
    6396:	2314      	movs	r3, #20
    6398:	18fb      	adds	r3, r7, r3
    639a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    639c:	68bb      	ldr	r3, [r7, #8]
    639e:	b2da      	uxtb	r2, r3
    63a0:	2314      	movs	r3, #20
    63a2:	18fb      	adds	r3, r7, r3
    63a4:	70da      	strb	r2, [r3, #3]
		len = 5;
    63a6:	231f      	movs	r3, #31
    63a8:	18fb      	adds	r3, r7, r3
    63aa:	2205      	movs	r2, #5
    63ac:	701a      	strb	r2, [r3, #0]
		break;
    63ae:	e105      	b.n	65bc <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    63b0:	68bb      	ldr	r3, [r7, #8]
    63b2:	0a1b      	lsrs	r3, r3, #8
    63b4:	b2da      	uxtb	r2, r3
    63b6:	2314      	movs	r3, #20
    63b8:	18fb      	adds	r3, r7, r3
    63ba:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    63bc:	2330      	movs	r3, #48	; 0x30
    63be:	18fb      	adds	r3, r7, r3
    63c0:	781b      	ldrb	r3, [r3, #0]
    63c2:	2b00      	cmp	r3, #0
    63c4:	d009      	beq.n	63da <spi_cmd+0x9e>
    63c6:	2314      	movs	r3, #20
    63c8:	18fb      	adds	r3, r7, r3
    63ca:	785b      	ldrb	r3, [r3, #1]
    63cc:	2280      	movs	r2, #128	; 0x80
    63ce:	4252      	negs	r2, r2
    63d0:	4313      	orrs	r3, r2
    63d2:	b2da      	uxtb	r2, r3
    63d4:	2314      	movs	r3, #20
    63d6:	18fb      	adds	r3, r7, r3
    63d8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    63da:	68bb      	ldr	r3, [r7, #8]
    63dc:	b2da      	uxtb	r2, r3
    63de:	2314      	movs	r3, #20
    63e0:	18fb      	adds	r3, r7, r3
    63e2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    63e4:	2314      	movs	r3, #20
    63e6:	18fb      	adds	r3, r7, r3
    63e8:	2200      	movs	r2, #0
    63ea:	70da      	strb	r2, [r3, #3]
		len = 5;
    63ec:	231f      	movs	r3, #31
    63ee:	18fb      	adds	r3, r7, r3
    63f0:	2205      	movs	r2, #5
    63f2:	701a      	strb	r2, [r3, #0]
		break;
    63f4:	e0e2      	b.n	65bc <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    63f6:	2314      	movs	r3, #20
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	2200      	movs	r2, #0
    63fc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    63fe:	2314      	movs	r3, #20
    6400:	18fb      	adds	r3, r7, r3
    6402:	2200      	movs	r2, #0
    6404:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    6406:	2314      	movs	r3, #20
    6408:	18fb      	adds	r3, r7, r3
    640a:	2200      	movs	r2, #0
    640c:	70da      	strb	r2, [r3, #3]
		len = 5;
    640e:	231f      	movs	r3, #31
    6410:	18fb      	adds	r3, r7, r3
    6412:	2205      	movs	r2, #5
    6414:	701a      	strb	r2, [r3, #0]
		break;
    6416:	e0d1      	b.n	65bc <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    6418:	2314      	movs	r3, #20
    641a:	18fb      	adds	r3, r7, r3
    641c:	2200      	movs	r2, #0
    641e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    6420:	2314      	movs	r3, #20
    6422:	18fb      	adds	r3, r7, r3
    6424:	2200      	movs	r2, #0
    6426:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    6428:	2314      	movs	r3, #20
    642a:	18fb      	adds	r3, r7, r3
    642c:	2200      	movs	r2, #0
    642e:	70da      	strb	r2, [r3, #3]
		len = 5;
    6430:	231f      	movs	r3, #31
    6432:	18fb      	adds	r3, r7, r3
    6434:	2205      	movs	r2, #5
    6436:	701a      	strb	r2, [r3, #0]
		break;
    6438:	e0c0      	b.n	65bc <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    643a:	2314      	movs	r3, #20
    643c:	18fb      	adds	r3, r7, r3
    643e:	22ff      	movs	r2, #255	; 0xff
    6440:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    6442:	2314      	movs	r3, #20
    6444:	18fb      	adds	r3, r7, r3
    6446:	22ff      	movs	r2, #255	; 0xff
    6448:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    644a:	2314      	movs	r3, #20
    644c:	18fb      	adds	r3, r7, r3
    644e:	22ff      	movs	r2, #255	; 0xff
    6450:	70da      	strb	r2, [r3, #3]
		len = 5;
    6452:	231f      	movs	r3, #31
    6454:	18fb      	adds	r3, r7, r3
    6456:	2205      	movs	r2, #5
    6458:	701a      	strb	r2, [r3, #0]
		break;
    645a:	e0af      	b.n	65bc <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    645c:	68bb      	ldr	r3, [r7, #8]
    645e:	0c1b      	lsrs	r3, r3, #16
    6460:	b2da      	uxtb	r2, r3
    6462:	2314      	movs	r3, #20
    6464:	18fb      	adds	r3, r7, r3
    6466:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6468:	68bb      	ldr	r3, [r7, #8]
    646a:	0a1b      	lsrs	r3, r3, #8
    646c:	b2da      	uxtb	r2, r3
    646e:	2314      	movs	r3, #20
    6470:	18fb      	adds	r3, r7, r3
    6472:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    6474:	68bb      	ldr	r3, [r7, #8]
    6476:	b2da      	uxtb	r2, r3
    6478:	2314      	movs	r3, #20
    647a:	18fb      	adds	r3, r7, r3
    647c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    647e:	683b      	ldr	r3, [r7, #0]
    6480:	0a1b      	lsrs	r3, r3, #8
    6482:	b2da      	uxtb	r2, r3
    6484:	2314      	movs	r3, #20
    6486:	18fb      	adds	r3, r7, r3
    6488:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    648a:	683b      	ldr	r3, [r7, #0]
    648c:	b2da      	uxtb	r2, r3
    648e:	2314      	movs	r3, #20
    6490:	18fb      	adds	r3, r7, r3
    6492:	715a      	strb	r2, [r3, #5]
		len = 7;
    6494:	231f      	movs	r3, #31
    6496:	18fb      	adds	r3, r7, r3
    6498:	2207      	movs	r2, #7
    649a:	701a      	strb	r2, [r3, #0]
		break;
    649c:	e08e      	b.n	65bc <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    649e:	68bb      	ldr	r3, [r7, #8]
    64a0:	0c1b      	lsrs	r3, r3, #16
    64a2:	b2da      	uxtb	r2, r3
    64a4:	2314      	movs	r3, #20
    64a6:	18fb      	adds	r3, r7, r3
    64a8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    64aa:	68bb      	ldr	r3, [r7, #8]
    64ac:	0a1b      	lsrs	r3, r3, #8
    64ae:	b2da      	uxtb	r2, r3
    64b0:	2314      	movs	r3, #20
    64b2:	18fb      	adds	r3, r7, r3
    64b4:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    64b6:	68bb      	ldr	r3, [r7, #8]
    64b8:	b2da      	uxtb	r2, r3
    64ba:	2314      	movs	r3, #20
    64bc:	18fb      	adds	r3, r7, r3
    64be:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    64c0:	683b      	ldr	r3, [r7, #0]
    64c2:	0c1b      	lsrs	r3, r3, #16
    64c4:	b2da      	uxtb	r2, r3
    64c6:	2314      	movs	r3, #20
    64c8:	18fb      	adds	r3, r7, r3
    64ca:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    64cc:	683b      	ldr	r3, [r7, #0]
    64ce:	0a1b      	lsrs	r3, r3, #8
    64d0:	b2da      	uxtb	r2, r3
    64d2:	2314      	movs	r3, #20
    64d4:	18fb      	adds	r3, r7, r3
    64d6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    64d8:	683b      	ldr	r3, [r7, #0]
    64da:	b2da      	uxtb	r2, r3
    64dc:	2314      	movs	r3, #20
    64de:	18fb      	adds	r3, r7, r3
    64e0:	719a      	strb	r2, [r3, #6]
		len = 8;
    64e2:	231f      	movs	r3, #31
    64e4:	18fb      	adds	r3, r7, r3
    64e6:	2208      	movs	r2, #8
    64e8:	701a      	strb	r2, [r3, #0]
		break;
    64ea:	e067      	b.n	65bc <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    64ec:	68bb      	ldr	r3, [r7, #8]
    64ee:	0a1b      	lsrs	r3, r3, #8
    64f0:	b2da      	uxtb	r2, r3
    64f2:	2314      	movs	r3, #20
    64f4:	18fb      	adds	r3, r7, r3
    64f6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    64f8:	2330      	movs	r3, #48	; 0x30
    64fa:	18fb      	adds	r3, r7, r3
    64fc:	781b      	ldrb	r3, [r3, #0]
    64fe:	2b00      	cmp	r3, #0
    6500:	d009      	beq.n	6516 <spi_cmd+0x1da>
    6502:	2314      	movs	r3, #20
    6504:	18fb      	adds	r3, r7, r3
    6506:	785b      	ldrb	r3, [r3, #1]
    6508:	2280      	movs	r2, #128	; 0x80
    650a:	4252      	negs	r2, r2
    650c:	4313      	orrs	r3, r2
    650e:	b2da      	uxtb	r2, r3
    6510:	2314      	movs	r3, #20
    6512:	18fb      	adds	r3, r7, r3
    6514:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    6516:	68bb      	ldr	r3, [r7, #8]
    6518:	b2da      	uxtb	r2, r3
    651a:	2314      	movs	r3, #20
    651c:	18fb      	adds	r3, r7, r3
    651e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    6520:	687b      	ldr	r3, [r7, #4]
    6522:	0e1b      	lsrs	r3, r3, #24
    6524:	b2da      	uxtb	r2, r3
    6526:	2314      	movs	r3, #20
    6528:	18fb      	adds	r3, r7, r3
    652a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	0c1b      	lsrs	r3, r3, #16
    6530:	b2da      	uxtb	r2, r3
    6532:	2314      	movs	r3, #20
    6534:	18fb      	adds	r3, r7, r3
    6536:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    6538:	687b      	ldr	r3, [r7, #4]
    653a:	0a1b      	lsrs	r3, r3, #8
    653c:	b2da      	uxtb	r2, r3
    653e:	2314      	movs	r3, #20
    6540:	18fb      	adds	r3, r7, r3
    6542:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    6544:	687b      	ldr	r3, [r7, #4]
    6546:	b2da      	uxtb	r2, r3
    6548:	2314      	movs	r3, #20
    654a:	18fb      	adds	r3, r7, r3
    654c:	719a      	strb	r2, [r3, #6]
		len = 8;
    654e:	231f      	movs	r3, #31
    6550:	18fb      	adds	r3, r7, r3
    6552:	2208      	movs	r2, #8
    6554:	701a      	strb	r2, [r3, #0]
		break;
    6556:	e031      	b.n	65bc <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    6558:	68bb      	ldr	r3, [r7, #8]
    655a:	0c1b      	lsrs	r3, r3, #16
    655c:	b2da      	uxtb	r2, r3
    655e:	2314      	movs	r3, #20
    6560:	18fb      	adds	r3, r7, r3
    6562:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6564:	68bb      	ldr	r3, [r7, #8]
    6566:	0a1b      	lsrs	r3, r3, #8
    6568:	b2da      	uxtb	r2, r3
    656a:	2314      	movs	r3, #20
    656c:	18fb      	adds	r3, r7, r3
    656e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    6570:	68bb      	ldr	r3, [r7, #8]
    6572:	b2da      	uxtb	r2, r3
    6574:	2314      	movs	r3, #20
    6576:	18fb      	adds	r3, r7, r3
    6578:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	0e1b      	lsrs	r3, r3, #24
    657e:	b2da      	uxtb	r2, r3
    6580:	2314      	movs	r3, #20
    6582:	18fb      	adds	r3, r7, r3
    6584:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	0c1b      	lsrs	r3, r3, #16
    658a:	b2da      	uxtb	r2, r3
    658c:	2314      	movs	r3, #20
    658e:	18fb      	adds	r3, r7, r3
    6590:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    6592:	687b      	ldr	r3, [r7, #4]
    6594:	0a1b      	lsrs	r3, r3, #8
    6596:	b2da      	uxtb	r2, r3
    6598:	2314      	movs	r3, #20
    659a:	18fb      	adds	r3, r7, r3
    659c:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    659e:	687b      	ldr	r3, [r7, #4]
    65a0:	b2da      	uxtb	r2, r3
    65a2:	2314      	movs	r3, #20
    65a4:	18fb      	adds	r3, r7, r3
    65a6:	71da      	strb	r2, [r3, #7]
		len = 9;
    65a8:	231f      	movs	r3, #31
    65aa:	18fb      	adds	r3, r7, r3
    65ac:	2209      	movs	r2, #9
    65ae:	701a      	strb	r2, [r3, #0]
		break;
    65b0:	e004      	b.n	65bc <spi_cmd+0x280>
	default:
		result = N_FAIL;
    65b2:	231e      	movs	r3, #30
    65b4:	18fb      	adds	r3, r7, r3
    65b6:	2200      	movs	r2, #0
    65b8:	701a      	strb	r2, [r3, #0]
		break;
    65ba:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    65bc:	231e      	movs	r3, #30
    65be:	18fb      	adds	r3, r7, r3
    65c0:	781b      	ldrb	r3, [r3, #0]
    65c2:	b25b      	sxtb	r3, r3
    65c4:	2b00      	cmp	r3, #0
    65c6:	d03f      	beq.n	6648 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    65c8:	4b24      	ldr	r3, [pc, #144]	; (665c <spi_cmd+0x320>)
    65ca:	781b      	ldrb	r3, [r3, #0]
    65cc:	2b00      	cmp	r3, #0
    65ce:	d115      	bne.n	65fc <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    65d0:	231f      	movs	r3, #31
    65d2:	18fb      	adds	r3, r7, r3
    65d4:	781b      	ldrb	r3, [r3, #0]
    65d6:	1e5c      	subs	r4, r3, #1
    65d8:	231f      	movs	r3, #31
    65da:	18fb      	adds	r3, r7, r3
    65dc:	781b      	ldrb	r3, [r3, #0]
    65de:	3b01      	subs	r3, #1
    65e0:	001a      	movs	r2, r3
    65e2:	2314      	movs	r3, #20
    65e4:	18fb      	adds	r3, r7, r3
    65e6:	0019      	movs	r1, r3
    65e8:	207f      	movs	r0, #127	; 0x7f
    65ea:	4b1d      	ldr	r3, [pc, #116]	; (6660 <spi_cmd+0x324>)
    65ec:	4798      	blx	r3
    65ee:	0003      	movs	r3, r0
    65f0:	18db      	adds	r3, r3, r3
    65f2:	b2da      	uxtb	r2, r3
    65f4:	2314      	movs	r3, #20
    65f6:	18fb      	adds	r3, r7, r3
    65f8:	551a      	strb	r2, [r3, r4]
    65fa:	e006      	b.n	660a <spi_cmd+0x2ce>
		else
			len-=1;
    65fc:	231f      	movs	r3, #31
    65fe:	18fb      	adds	r3, r7, r3
    6600:	221f      	movs	r2, #31
    6602:	18ba      	adds	r2, r7, r2
    6604:	7812      	ldrb	r2, [r2, #0]
    6606:	3a01      	subs	r2, #1
    6608:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    660a:	231f      	movs	r3, #31
    660c:	18fb      	adds	r3, r7, r3
    660e:	781b      	ldrb	r3, [r3, #0]
    6610:	b29a      	uxth	r2, r3
    6612:	2314      	movs	r3, #20
    6614:	18fb      	adds	r3, r7, r3
    6616:	0011      	movs	r1, r2
    6618:	0018      	movs	r0, r3
    661a:	4b12      	ldr	r3, [pc, #72]	; (6664 <spi_cmd+0x328>)
    661c:	4798      	blx	r3
    661e:	1e03      	subs	r3, r0, #0
    6620:	d012      	beq.n	6648 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    6622:	2328      	movs	r3, #40	; 0x28
    6624:	33ff      	adds	r3, #255	; 0xff
    6626:	001a      	movs	r2, r3
    6628:	490f      	ldr	r1, [pc, #60]	; (6668 <spi_cmd+0x32c>)
    662a:	4b10      	ldr	r3, [pc, #64]	; (666c <spi_cmd+0x330>)
    662c:	0018      	movs	r0, r3
    662e:	4b10      	ldr	r3, [pc, #64]	; (6670 <spi_cmd+0x334>)
    6630:	4798      	blx	r3
    6632:	4b10      	ldr	r3, [pc, #64]	; (6674 <spi_cmd+0x338>)
    6634:	0018      	movs	r0, r3
    6636:	4b10      	ldr	r3, [pc, #64]	; (6678 <spi_cmd+0x33c>)
    6638:	4798      	blx	r3
    663a:	200d      	movs	r0, #13
    663c:	4b0f      	ldr	r3, [pc, #60]	; (667c <spi_cmd+0x340>)
    663e:	4798      	blx	r3
			result = N_FAIL;
    6640:	231e      	movs	r3, #30
    6642:	18fb      	adds	r3, r7, r3
    6644:	2200      	movs	r2, #0
    6646:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    6648:	231e      	movs	r3, #30
    664a:	18fb      	adds	r3, r7, r3
    664c:	781b      	ldrb	r3, [r3, #0]
    664e:	b25b      	sxtb	r3, r3
}
    6650:	0018      	movs	r0, r3
    6652:	46bd      	mov	sp, r7
    6654:	b009      	add	sp, #36	; 0x24
    6656:	bd90      	pop	{r4, r7, pc}
    6658:	000194b8 	.word	0x000194b8
    665c:	2000022c 	.word	0x2000022c
    6660:	000062ed 	.word	0x000062ed
    6664:	00006279 	.word	0x00006279
    6668:	000194f4 	.word	0x000194f4
    666c:	00018f60 	.word	0x00018f60
    6670:	00012f71 	.word	0x00012f71
    6674:	00018f74 	.word	0x00018f74
    6678:	0001308d 	.word	0x0001308d
    667c:	00012fa5 	.word	0x00012fa5

00006680 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    6680:	b590      	push	{r4, r7, lr}
    6682:	b085      	sub	sp, #20
    6684:	af00      	add	r7, sp, #0
    6686:	0002      	movs	r2, r0
    6688:	1dfb      	adds	r3, r7, #7
    668a:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    668c:	230e      	movs	r3, #14
    668e:	18fb      	adds	r3, r7, r3
    6690:	2201      	movs	r2, #1
    6692:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    6694:	4b31      	ldr	r3, [pc, #196]	; (675c <spi_data_rsp+0xdc>)
    6696:	781b      	ldrb	r3, [r3, #0]
    6698:	2b00      	cmp	r3, #0
    669a:	d104      	bne.n	66a6 <spi_data_rsp+0x26>
		len = 2;
    669c:	230f      	movs	r3, #15
    669e:	18fb      	adds	r3, r7, r3
    66a0:	2202      	movs	r2, #2
    66a2:	701a      	strb	r2, [r3, #0]
    66a4:	e003      	b.n	66ae <spi_data_rsp+0x2e>
	else
		len = 3;
    66a6:	230f      	movs	r3, #15
    66a8:	18fb      	adds	r3, r7, r3
    66aa:	2203      	movs	r2, #3
    66ac:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    66ae:	230f      	movs	r3, #15
    66b0:	18fb      	adds	r3, r7, r3
    66b2:	781b      	ldrb	r3, [r3, #0]
    66b4:	b29a      	uxth	r2, r3
    66b6:	2308      	movs	r3, #8
    66b8:	18fb      	adds	r3, r7, r3
    66ba:	0011      	movs	r1, r2
    66bc:	0018      	movs	r0, r3
    66be:	4b28      	ldr	r3, [pc, #160]	; (6760 <spi_data_rsp+0xe0>)
    66c0:	4798      	blx	r3
    66c2:	1e03      	subs	r3, r0, #0
    66c4:	d013      	beq.n	66ee <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    66c6:	233c      	movs	r3, #60	; 0x3c
    66c8:	33ff      	adds	r3, #255	; 0xff
    66ca:	001a      	movs	r2, r3
    66cc:	4925      	ldr	r1, [pc, #148]	; (6764 <spi_data_rsp+0xe4>)
    66ce:	4b26      	ldr	r3, [pc, #152]	; (6768 <spi_data_rsp+0xe8>)
    66d0:	0018      	movs	r0, r3
    66d2:	4b26      	ldr	r3, [pc, #152]	; (676c <spi_data_rsp+0xec>)
    66d4:	4798      	blx	r3
    66d6:	4b26      	ldr	r3, [pc, #152]	; (6770 <spi_data_rsp+0xf0>)
    66d8:	0018      	movs	r0, r3
    66da:	4b26      	ldr	r3, [pc, #152]	; (6774 <spi_data_rsp+0xf4>)
    66dc:	4798      	blx	r3
    66de:	200d      	movs	r0, #13
    66e0:	4b25      	ldr	r3, [pc, #148]	; (6778 <spi_data_rsp+0xf8>)
    66e2:	4798      	blx	r3
		result = N_FAIL;
    66e4:	230e      	movs	r3, #14
    66e6:	18fb      	adds	r3, r7, r3
    66e8:	2200      	movs	r2, #0
    66ea:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    66ec:	e02e      	b.n	674c <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    66ee:	230f      	movs	r3, #15
    66f0:	18fb      	adds	r3, r7, r3
    66f2:	781b      	ldrb	r3, [r3, #0]
    66f4:	3b01      	subs	r3, #1
    66f6:	2208      	movs	r2, #8
    66f8:	18ba      	adds	r2, r7, r2
    66fa:	5cd3      	ldrb	r3, [r2, r3]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d108      	bne.n	6712 <spi_data_rsp+0x92>
    6700:	230f      	movs	r3, #15
    6702:	18fb      	adds	r3, r7, r3
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	3b02      	subs	r3, #2
    6708:	2208      	movs	r2, #8
    670a:	18ba      	adds	r2, r7, r2
    670c:	5cd3      	ldrb	r3, [r2, r3]
    670e:	2bc3      	cmp	r3, #195	; 0xc3
    6710:	d01c      	beq.n	674c <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    6712:	23a1      	movs	r3, #161	; 0xa1
    6714:	005a      	lsls	r2, r3, #1
    6716:	4913      	ldr	r1, [pc, #76]	; (6764 <spi_data_rsp+0xe4>)
    6718:	4b13      	ldr	r3, [pc, #76]	; (6768 <spi_data_rsp+0xe8>)
    671a:	0018      	movs	r0, r3
    671c:	4b13      	ldr	r3, [pc, #76]	; (676c <spi_data_rsp+0xec>)
    671e:	4798      	blx	r3
    6720:	2308      	movs	r3, #8
    6722:	18fb      	adds	r3, r7, r3
    6724:	781b      	ldrb	r3, [r3, #0]
    6726:	0019      	movs	r1, r3
    6728:	2308      	movs	r3, #8
    672a:	18fb      	adds	r3, r7, r3
    672c:	785b      	ldrb	r3, [r3, #1]
    672e:	001a      	movs	r2, r3
    6730:	2308      	movs	r3, #8
    6732:	18fb      	adds	r3, r7, r3
    6734:	789b      	ldrb	r3, [r3, #2]
    6736:	4811      	ldr	r0, [pc, #68]	; (677c <spi_data_rsp+0xfc>)
    6738:	4c0c      	ldr	r4, [pc, #48]	; (676c <spi_data_rsp+0xec>)
    673a:	47a0      	blx	r4
    673c:	200d      	movs	r0, #13
    673e:	4b0e      	ldr	r3, [pc, #56]	; (6778 <spi_data_rsp+0xf8>)
    6740:	4798      	blx	r3
		result = N_FAIL;
    6742:	230e      	movs	r3, #14
    6744:	18fb      	adds	r3, r7, r3
    6746:	2200      	movs	r2, #0
    6748:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    674a:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    674c:	230e      	movs	r3, #14
    674e:	18fb      	adds	r3, r7, r3
    6750:	781b      	ldrb	r3, [r3, #0]
    6752:	b25b      	sxtb	r3, r3
}
    6754:	0018      	movs	r0, r3
    6756:	46bd      	mov	sp, r7
    6758:	b005      	add	sp, #20
    675a:	bd90      	pop	{r4, r7, pc}
    675c:	2000022c 	.word	0x2000022c
    6760:	00006235 	.word	0x00006235
    6764:	000194fc 	.word	0x000194fc
    6768:	00018f60 	.word	0x00018f60
    676c:	00012f71 	.word	0x00012f71
    6770:	00018fa0 	.word	0x00018fa0
    6774:	0001308d 	.word	0x0001308d
    6778:	00012fa5 	.word	0x00012fa5
    677c:	00018fc0 	.word	0x00018fc0

00006780 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    6780:	b580      	push	{r7, lr}
    6782:	b084      	sub	sp, #16
    6784:	af00      	add	r7, sp, #0
    6786:	0002      	movs	r2, r0
    6788:	1dfb      	adds	r3, r7, #7
    678a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    678c:	230f      	movs	r3, #15
    678e:	18fb      	adds	r3, r7, r3
    6790:	2201      	movs	r2, #1
    6792:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    6794:	1dfb      	adds	r3, r7, #7
    6796:	781b      	ldrb	r3, [r3, #0]
    6798:	2bcf      	cmp	r3, #207	; 0xcf
    679a:	d007      	beq.n	67ac <spi_cmd_rsp+0x2c>
    679c:	1dfb      	adds	r3, r7, #7
    679e:	781b      	ldrb	r3, [r3, #0]
    67a0:	2bc5      	cmp	r3, #197	; 0xc5
    67a2:	d003      	beq.n	67ac <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    67a4:	1dfb      	adds	r3, r7, #7
    67a6:	781b      	ldrb	r3, [r3, #0]
    67a8:	2bc6      	cmp	r3, #198	; 0xc6
    67aa:	d10c      	bne.n	67c6 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    67ac:	230d      	movs	r3, #13
    67ae:	18fb      	adds	r3, r7, r3
    67b0:	2101      	movs	r1, #1
    67b2:	0018      	movs	r0, r3
    67b4:	4b39      	ldr	r3, [pc, #228]	; (689c <spi_cmd_rsp+0x11c>)
    67b6:	4798      	blx	r3
    67b8:	1e03      	subs	r3, r0, #0
    67ba:	d004      	beq.n	67c6 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    67bc:	230f      	movs	r3, #15
    67be:	18fb      	adds	r3, r7, r3
    67c0:	2200      	movs	r2, #0
    67c2:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    67c4:	e061      	b.n	688a <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    67c6:	230e      	movs	r3, #14
    67c8:	18fb      	adds	r3, r7, r3
    67ca:	220a      	movs	r2, #10
    67cc:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    67ce:	230d      	movs	r3, #13
    67d0:	18fb      	adds	r3, r7, r3
    67d2:	2101      	movs	r1, #1
    67d4:	0018      	movs	r0, r3
    67d6:	4b31      	ldr	r3, [pc, #196]	; (689c <spi_cmd_rsp+0x11c>)
    67d8:	4798      	blx	r3
    67da:	1e03      	subs	r3, r0, #0
    67dc:	d012      	beq.n	6804 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    67de:	23b1      	movs	r3, #177	; 0xb1
    67e0:	005a      	lsls	r2, r3, #1
    67e2:	492f      	ldr	r1, [pc, #188]	; (68a0 <spi_cmd_rsp+0x120>)
    67e4:	4b2f      	ldr	r3, [pc, #188]	; (68a4 <spi_cmd_rsp+0x124>)
    67e6:	0018      	movs	r0, r3
    67e8:	4b2f      	ldr	r3, [pc, #188]	; (68a8 <spi_cmd_rsp+0x128>)
    67ea:	4798      	blx	r3
    67ec:	4b2f      	ldr	r3, [pc, #188]	; (68ac <spi_cmd_rsp+0x12c>)
    67ee:	0018      	movs	r0, r3
    67f0:	4b2f      	ldr	r3, [pc, #188]	; (68b0 <spi_cmd_rsp+0x130>)
    67f2:	4798      	blx	r3
    67f4:	200d      	movs	r0, #13
    67f6:	4b2f      	ldr	r3, [pc, #188]	; (68b4 <spi_cmd_rsp+0x134>)
    67f8:	4798      	blx	r3
			result = N_FAIL;
    67fa:	230f      	movs	r3, #15
    67fc:	18fb      	adds	r3, r7, r3
    67fe:	2200      	movs	r2, #0
    6800:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    6802:	e042      	b.n	688a <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    6804:	230d      	movs	r3, #13
    6806:	18fb      	adds	r3, r7, r3
    6808:	781b      	ldrb	r3, [r3, #0]
    680a:	1dfa      	adds	r2, r7, #7
    680c:	7812      	ldrb	r2, [r2, #0]
    680e:	429a      	cmp	r2, r3
    6810:	d00b      	beq.n	682a <spi_cmd_rsp+0xaa>
    6812:	230e      	movs	r3, #14
    6814:	18fb      	adds	r3, r7, r3
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	b25b      	sxtb	r3, r3
    681a:	b2da      	uxtb	r2, r3
    681c:	3a01      	subs	r2, #1
    681e:	b2d1      	uxtb	r1, r2
    6820:	220e      	movs	r2, #14
    6822:	18ba      	adds	r2, r7, r2
    6824:	7011      	strb	r1, [r2, #0]
    6826:	2b00      	cmp	r3, #0
    6828:	dcd1      	bgt.n	67ce <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    682a:	230e      	movs	r3, #14
    682c:	18fb      	adds	r3, r7, r3
    682e:	220a      	movs	r2, #10
    6830:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6832:	230d      	movs	r3, #13
    6834:	18fb      	adds	r3, r7, r3
    6836:	2101      	movs	r1, #1
    6838:	0018      	movs	r0, r3
    683a:	4b18      	ldr	r3, [pc, #96]	; (689c <spi_cmd_rsp+0x11c>)
    683c:	4798      	blx	r3
    683e:	1e03      	subs	r3, r0, #0
    6840:	d012      	beq.n	6868 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    6842:	23b8      	movs	r3, #184	; 0xb8
    6844:	005a      	lsls	r2, r3, #1
    6846:	4916      	ldr	r1, [pc, #88]	; (68a0 <spi_cmd_rsp+0x120>)
    6848:	4b16      	ldr	r3, [pc, #88]	; (68a4 <spi_cmd_rsp+0x124>)
    684a:	0018      	movs	r0, r3
    684c:	4b16      	ldr	r3, [pc, #88]	; (68a8 <spi_cmd_rsp+0x128>)
    684e:	4798      	blx	r3
    6850:	4b16      	ldr	r3, [pc, #88]	; (68ac <spi_cmd_rsp+0x12c>)
    6852:	0018      	movs	r0, r3
    6854:	4b16      	ldr	r3, [pc, #88]	; (68b0 <spi_cmd_rsp+0x130>)
    6856:	4798      	blx	r3
    6858:	200d      	movs	r0, #13
    685a:	4b16      	ldr	r3, [pc, #88]	; (68b4 <spi_cmd_rsp+0x134>)
    685c:	4798      	blx	r3
			result = N_FAIL;
    685e:	230f      	movs	r3, #15
    6860:	18fb      	adds	r3, r7, r3
    6862:	2200      	movs	r2, #0
    6864:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    6866:	e010      	b.n	688a <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    6868:	230d      	movs	r3, #13
    686a:	18fb      	adds	r3, r7, r3
    686c:	781b      	ldrb	r3, [r3, #0]
    686e:	2b00      	cmp	r3, #0
    6870:	d00b      	beq.n	688a <spi_cmd_rsp+0x10a>
    6872:	230e      	movs	r3, #14
    6874:	18fb      	adds	r3, r7, r3
    6876:	781b      	ldrb	r3, [r3, #0]
    6878:	b25b      	sxtb	r3, r3
    687a:	b2da      	uxtb	r2, r3
    687c:	3a01      	subs	r2, #1
    687e:	b2d1      	uxtb	r1, r2
    6880:	220e      	movs	r2, #14
    6882:	18ba      	adds	r2, r7, r2
    6884:	7011      	strb	r1, [r2, #0]
    6886:	2b00      	cmp	r3, #0
    6888:	dcd3      	bgt.n	6832 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    688a:	230f      	movs	r3, #15
    688c:	18fb      	adds	r3, r7, r3
    688e:	781b      	ldrb	r3, [r3, #0]
    6890:	b25b      	sxtb	r3, r3
}
    6892:	0018      	movs	r0, r3
    6894:	46bd      	mov	sp, r7
    6896:	b004      	add	sp, #16
    6898:	bd80      	pop	{r7, pc}
    689a:	46c0      	nop			; (mov r8, r8)
    689c:	00006235 	.word	0x00006235
    68a0:	0001950c 	.word	0x0001950c
    68a4:	00018f60 	.word	0x00018f60
    68a8:	00012f71 	.word	0x00012f71
    68ac:	00018ff0 	.word	0x00018ff0
    68b0:	0001308d 	.word	0x0001308d
    68b4:	00012fa5 	.word	0x00012fa5

000068b8 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    68b8:	b580      	push	{r7, lr}
    68ba:	b086      	sub	sp, #24
    68bc:	af00      	add	r7, sp, #0
    68be:	6078      	str	r0, [r7, #4]
    68c0:	0008      	movs	r0, r1
    68c2:	0011      	movs	r1, r2
    68c4:	1cbb      	adds	r3, r7, #2
    68c6:	1c02      	adds	r2, r0, #0
    68c8:	801a      	strh	r2, [r3, #0]
    68ca:	1c7b      	adds	r3, r7, #1
    68cc:	1c0a      	adds	r2, r1, #0
    68ce:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    68d0:	2311      	movs	r3, #17
    68d2:	18fb      	adds	r3, r7, r3
    68d4:	2201      	movs	r2, #1
    68d6:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    68d8:	2314      	movs	r3, #20
    68da:	18fb      	adds	r3, r7, r3
    68dc:	2200      	movs	r2, #0
    68de:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    68e0:	1cbb      	adds	r3, r7, #2
    68e2:	881a      	ldrh	r2, [r3, #0]
    68e4:	2380      	movs	r3, #128	; 0x80
    68e6:	019b      	lsls	r3, r3, #6
    68e8:	429a      	cmp	r2, r3
    68ea:	d805      	bhi.n	68f8 <spi_data_read+0x40>
			nbytes = sz;
    68ec:	2312      	movs	r3, #18
    68ee:	18fb      	adds	r3, r7, r3
    68f0:	1cba      	adds	r2, r7, #2
    68f2:	8812      	ldrh	r2, [r2, #0]
    68f4:	801a      	strh	r2, [r3, #0]
    68f6:	e004      	b.n	6902 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    68f8:	2312      	movs	r3, #18
    68fa:	18fb      	adds	r3, r7, r3
    68fc:	2280      	movs	r2, #128	; 0x80
    68fe:	0192      	lsls	r2, r2, #6
    6900:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    6902:	2316      	movs	r3, #22
    6904:	18fb      	adds	r3, r7, r3
    6906:	220a      	movs	r2, #10
    6908:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    690a:	230b      	movs	r3, #11
    690c:	18fb      	adds	r3, r7, r3
    690e:	2101      	movs	r1, #1
    6910:	0018      	movs	r0, r3
    6912:	4b5c      	ldr	r3, [pc, #368]	; (6a84 <spi_data_read+0x1cc>)
    6914:	4798      	blx	r3
    6916:	1e03      	subs	r3, r0, #0
    6918:	d011      	beq.n	693e <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    691a:	4a5b      	ldr	r2, [pc, #364]	; (6a88 <spi_data_read+0x1d0>)
    691c:	495b      	ldr	r1, [pc, #364]	; (6a8c <spi_data_read+0x1d4>)
    691e:	4b5c      	ldr	r3, [pc, #368]	; (6a90 <spi_data_read+0x1d8>)
    6920:	0018      	movs	r0, r3
    6922:	4b5c      	ldr	r3, [pc, #368]	; (6a94 <spi_data_read+0x1dc>)
    6924:	4798      	blx	r3
    6926:	4b5c      	ldr	r3, [pc, #368]	; (6a98 <spi_data_read+0x1e0>)
    6928:	0018      	movs	r0, r3
    692a:	4b5c      	ldr	r3, [pc, #368]	; (6a9c <spi_data_read+0x1e4>)
    692c:	4798      	blx	r3
    692e:	200d      	movs	r0, #13
    6930:	4b5b      	ldr	r3, [pc, #364]	; (6aa0 <spi_data_read+0x1e8>)
    6932:	4798      	blx	r3
				result = N_FAIL;
    6934:	2311      	movs	r3, #17
    6936:	18fb      	adds	r3, r7, r3
    6938:	2200      	movs	r2, #0
    693a:	701a      	strb	r2, [r3, #0]
				break;
    693c:	e017      	b.n	696e <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    693e:	230b      	movs	r3, #11
    6940:	18fb      	adds	r3, r7, r3
    6942:	781b      	ldrb	r3, [r3, #0]
    6944:	091b      	lsrs	r3, r3, #4
    6946:	b2db      	uxtb	r3, r3
    6948:	001a      	movs	r2, r3
    694a:	230f      	movs	r3, #15
    694c:	4013      	ands	r3, r2
    694e:	2b0f      	cmp	r3, #15
    6950:	d00c      	beq.n	696c <spi_data_read+0xb4>
				break;
		} while (retry--);
    6952:	2316      	movs	r3, #22
    6954:	18fb      	adds	r3, r7, r3
    6956:	2200      	movs	r2, #0
    6958:	5e9b      	ldrsh	r3, [r3, r2]
    695a:	b29a      	uxth	r2, r3
    695c:	3a01      	subs	r2, #1
    695e:	b291      	uxth	r1, r2
    6960:	2216      	movs	r2, #22
    6962:	18ba      	adds	r2, r7, r2
    6964:	8011      	strh	r1, [r2, #0]
    6966:	2b00      	cmp	r3, #0
    6968:	d1cf      	bne.n	690a <spi_data_read+0x52>
    696a:	e000      	b.n	696e <spi_data_read+0xb6>
				break;
    696c:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    696e:	2311      	movs	r3, #17
    6970:	18fb      	adds	r3, r7, r3
    6972:	781b      	ldrb	r3, [r3, #0]
    6974:	b25b      	sxtb	r3, r3
    6976:	2b00      	cmp	r3, #0
    6978:	d100      	bne.n	697c <spi_data_read+0xc4>
    697a:	e079      	b.n	6a70 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    697c:	2316      	movs	r3, #22
    697e:	18fb      	adds	r3, r7, r3
    6980:	2200      	movs	r2, #0
    6982:	5e9b      	ldrsh	r3, [r3, r2]
    6984:	2b00      	cmp	r3, #0
    6986:	dc16      	bgt.n	69b6 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    6988:	4a46      	ldr	r2, [pc, #280]	; (6aa4 <spi_data_read+0x1ec>)
    698a:	4940      	ldr	r1, [pc, #256]	; (6a8c <spi_data_read+0x1d4>)
    698c:	4b40      	ldr	r3, [pc, #256]	; (6a90 <spi_data_read+0x1d8>)
    698e:	0018      	movs	r0, r3
    6990:	4b40      	ldr	r3, [pc, #256]	; (6a94 <spi_data_read+0x1dc>)
    6992:	4798      	blx	r3
    6994:	230b      	movs	r3, #11
    6996:	18fb      	adds	r3, r7, r3
    6998:	781b      	ldrb	r3, [r3, #0]
    699a:	001a      	movs	r2, r3
    699c:	4b42      	ldr	r3, [pc, #264]	; (6aa8 <spi_data_read+0x1f0>)
    699e:	0011      	movs	r1, r2
    69a0:	0018      	movs	r0, r3
    69a2:	4b3c      	ldr	r3, [pc, #240]	; (6a94 <spi_data_read+0x1dc>)
    69a4:	4798      	blx	r3
    69a6:	200d      	movs	r0, #13
    69a8:	4b3d      	ldr	r3, [pc, #244]	; (6aa0 <spi_data_read+0x1e8>)
    69aa:	4798      	blx	r3
			result = N_FAIL;
    69ac:	2311      	movs	r3, #17
    69ae:	18fb      	adds	r3, r7, r3
    69b0:	2200      	movs	r2, #0
    69b2:	701a      	strb	r2, [r3, #0]
			break;
    69b4:	e05d      	b.n	6a72 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    69b6:	2314      	movs	r3, #20
    69b8:	18fb      	adds	r3, r7, r3
    69ba:	2200      	movs	r2, #0
    69bc:	5e9b      	ldrsh	r3, [r3, r2]
    69be:	687a      	ldr	r2, [r7, #4]
    69c0:	18d2      	adds	r2, r2, r3
    69c2:	2312      	movs	r3, #18
    69c4:	18fb      	adds	r3, r7, r3
    69c6:	881b      	ldrh	r3, [r3, #0]
    69c8:	0019      	movs	r1, r3
    69ca:	0010      	movs	r0, r2
    69cc:	4b2d      	ldr	r3, [pc, #180]	; (6a84 <spi_data_read+0x1cc>)
    69ce:	4798      	blx	r3
    69d0:	1e03      	subs	r3, r0, #0
    69d2:	d012      	beq.n	69fa <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    69d4:	23c5      	movs	r3, #197	; 0xc5
    69d6:	009a      	lsls	r2, r3, #2
    69d8:	492c      	ldr	r1, [pc, #176]	; (6a8c <spi_data_read+0x1d4>)
    69da:	4b2d      	ldr	r3, [pc, #180]	; (6a90 <spi_data_read+0x1d8>)
    69dc:	0018      	movs	r0, r3
    69de:	4b2d      	ldr	r3, [pc, #180]	; (6a94 <spi_data_read+0x1dc>)
    69e0:	4798      	blx	r3
    69e2:	4b32      	ldr	r3, [pc, #200]	; (6aac <spi_data_read+0x1f4>)
    69e4:	0018      	movs	r0, r3
    69e6:	4b2d      	ldr	r3, [pc, #180]	; (6a9c <spi_data_read+0x1e4>)
    69e8:	4798      	blx	r3
    69ea:	200d      	movs	r0, #13
    69ec:	4b2c      	ldr	r3, [pc, #176]	; (6aa0 <spi_data_read+0x1e8>)
    69ee:	4798      	blx	r3
			result = N_FAIL;
    69f0:	2311      	movs	r3, #17
    69f2:	18fb      	adds	r3, r7, r3
    69f4:	2200      	movs	r2, #0
    69f6:	701a      	strb	r2, [r3, #0]
			break;
    69f8:	e03b      	b.n	6a72 <spi_data_read+0x1ba>
		}
		if(!clockless)
    69fa:	1c7b      	adds	r3, r7, #1
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	2b00      	cmp	r3, #0
    6a00:	d11d      	bne.n	6a3e <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    6a02:	4b2b      	ldr	r3, [pc, #172]	; (6ab0 <spi_data_read+0x1f8>)
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	2b00      	cmp	r3, #0
    6a08:	d119      	bne.n	6a3e <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    6a0a:	230c      	movs	r3, #12
    6a0c:	18fb      	adds	r3, r7, r3
    6a0e:	2102      	movs	r1, #2
    6a10:	0018      	movs	r0, r3
    6a12:	4b1c      	ldr	r3, [pc, #112]	; (6a84 <spi_data_read+0x1cc>)
    6a14:	4798      	blx	r3
    6a16:	1e03      	subs	r3, r0, #0
    6a18:	d011      	beq.n	6a3e <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    6a1a:	4a26      	ldr	r2, [pc, #152]	; (6ab4 <spi_data_read+0x1fc>)
    6a1c:	491b      	ldr	r1, [pc, #108]	; (6a8c <spi_data_read+0x1d4>)
    6a1e:	4b1c      	ldr	r3, [pc, #112]	; (6a90 <spi_data_read+0x1d8>)
    6a20:	0018      	movs	r0, r3
    6a22:	4b1c      	ldr	r3, [pc, #112]	; (6a94 <spi_data_read+0x1dc>)
    6a24:	4798      	blx	r3
    6a26:	4b24      	ldr	r3, [pc, #144]	; (6ab8 <spi_data_read+0x200>)
    6a28:	0018      	movs	r0, r3
    6a2a:	4b1c      	ldr	r3, [pc, #112]	; (6a9c <spi_data_read+0x1e4>)
    6a2c:	4798      	blx	r3
    6a2e:	200d      	movs	r0, #13
    6a30:	4b1b      	ldr	r3, [pc, #108]	; (6aa0 <spi_data_read+0x1e8>)
    6a32:	4798      	blx	r3
					result = N_FAIL;
    6a34:	2311      	movs	r3, #17
    6a36:	18fb      	adds	r3, r7, r3
    6a38:	2200      	movs	r2, #0
    6a3a:	701a      	strb	r2, [r3, #0]
					break;
    6a3c:	e019      	b.n	6a72 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    6a3e:	2314      	movs	r3, #20
    6a40:	18fb      	adds	r3, r7, r3
    6a42:	881a      	ldrh	r2, [r3, #0]
    6a44:	2312      	movs	r3, #18
    6a46:	18fb      	adds	r3, r7, r3
    6a48:	881b      	ldrh	r3, [r3, #0]
    6a4a:	18d3      	adds	r3, r2, r3
    6a4c:	b29a      	uxth	r2, r3
    6a4e:	2314      	movs	r3, #20
    6a50:	18fb      	adds	r3, r7, r3
    6a52:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    6a54:	2312      	movs	r3, #18
    6a56:	18fb      	adds	r3, r7, r3
    6a58:	881a      	ldrh	r2, [r3, #0]
    6a5a:	1cbb      	adds	r3, r7, #2
    6a5c:	1cb9      	adds	r1, r7, #2
    6a5e:	8809      	ldrh	r1, [r1, #0]
    6a60:	1a8a      	subs	r2, r1, r2
    6a62:	801a      	strh	r2, [r3, #0]

	} while (sz);
    6a64:	1cbb      	adds	r3, r7, #2
    6a66:	881b      	ldrh	r3, [r3, #0]
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d000      	beq.n	6a6e <spi_data_read+0x1b6>
    6a6c:	e738      	b.n	68e0 <spi_data_read+0x28>
    6a6e:	e000      	b.n	6a72 <spi_data_read+0x1ba>
			break;
    6a70:	46c0      	nop			; (mov r8, r8)

	return result;
    6a72:	2311      	movs	r3, #17
    6a74:	18fb      	adds	r3, r7, r3
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	b25b      	sxtb	r3, r3
}
    6a7a:	0018      	movs	r0, r3
    6a7c:	46bd      	mov	sp, r7
    6a7e:	b006      	add	sp, #24
    6a80:	bd80      	pop	{r7, pc}
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	00006235 	.word	0x00006235
    6a88:	000002ff 	.word	0x000002ff
    6a8c:	00019518 	.word	0x00019518
    6a90:	00018f60 	.word	0x00018f60
    6a94:	00012f71 	.word	0x00012f71
    6a98:	00019024 	.word	0x00019024
    6a9c:	0001308d 	.word	0x0001308d
    6aa0:	00012fa5 	.word	0x00012fa5
    6aa4:	0000030b 	.word	0x0000030b
    6aa8:	00019058 	.word	0x00019058
    6aac:	00019088 	.word	0x00019088
    6ab0:	2000022c 	.word	0x2000022c
    6ab4:	0000031f 	.word	0x0000031f
    6ab8:	000190b8 	.word	0x000190b8

00006abc <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    6abc:	b580      	push	{r7, lr}
    6abe:	b086      	sub	sp, #24
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	6078      	str	r0, [r7, #4]
    6ac4:	000a      	movs	r2, r1
    6ac6:	1cbb      	adds	r3, r7, #2
    6ac8:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    6aca:	2313      	movs	r3, #19
    6acc:	18fb      	adds	r3, r7, r3
    6ace:	2201      	movs	r2, #1
    6ad0:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    6ad2:	230c      	movs	r3, #12
    6ad4:	18fb      	adds	r3, r7, r3
    6ad6:	2200      	movs	r2, #0
    6ad8:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    6ada:	2316      	movs	r3, #22
    6adc:	18fb      	adds	r3, r7, r3
    6ade:	2200      	movs	r2, #0
    6ae0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    6ae2:	1cbb      	adds	r3, r7, #2
    6ae4:	881a      	ldrh	r2, [r3, #0]
    6ae6:	2380      	movs	r3, #128	; 0x80
    6ae8:	019b      	lsls	r3, r3, #6
    6aea:	429a      	cmp	r2, r3
    6aec:	d805      	bhi.n	6afa <spi_data_write+0x3e>
			nbytes = sz;
    6aee:	2314      	movs	r3, #20
    6af0:	18fb      	adds	r3, r7, r3
    6af2:	1cba      	adds	r2, r7, #2
    6af4:	8812      	ldrh	r2, [r2, #0]
    6af6:	801a      	strh	r2, [r3, #0]
    6af8:	e004      	b.n	6b04 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    6afa:	2314      	movs	r3, #20
    6afc:	18fb      	adds	r3, r7, r3
    6afe:	2280      	movs	r2, #128	; 0x80
    6b00:	0192      	lsls	r2, r2, #6
    6b02:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    6b04:	2311      	movs	r3, #17
    6b06:	18fb      	adds	r3, r7, r3
    6b08:	22f0      	movs	r2, #240	; 0xf0
    6b0a:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    6b0c:	2316      	movs	r3, #22
    6b0e:	18fb      	adds	r3, r7, r3
    6b10:	2200      	movs	r2, #0
    6b12:	5e9b      	ldrsh	r3, [r3, r2]
    6b14:	2b00      	cmp	r3, #0
    6b16:	d10f      	bne.n	6b38 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    6b18:	1cbb      	adds	r3, r7, #2
    6b1a:	881a      	ldrh	r2, [r3, #0]
    6b1c:	2380      	movs	r3, #128	; 0x80
    6b1e:	019b      	lsls	r3, r3, #6
    6b20:	429a      	cmp	r2, r3
    6b22:	d804      	bhi.n	6b2e <spi_data_write+0x72>
				order = 0x3;
    6b24:	2312      	movs	r3, #18
    6b26:	18fb      	adds	r3, r7, r3
    6b28:	2203      	movs	r2, #3
    6b2a:	701a      	strb	r2, [r3, #0]
    6b2c:	e013      	b.n	6b56 <spi_data_write+0x9a>
			else
				order = 0x1;
    6b2e:	2312      	movs	r3, #18
    6b30:	18fb      	adds	r3, r7, r3
    6b32:	2201      	movs	r2, #1
    6b34:	701a      	strb	r2, [r3, #0]
    6b36:	e00e      	b.n	6b56 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    6b38:	1cbb      	adds	r3, r7, #2
    6b3a:	881a      	ldrh	r2, [r3, #0]
    6b3c:	2380      	movs	r3, #128	; 0x80
    6b3e:	019b      	lsls	r3, r3, #6
    6b40:	429a      	cmp	r2, r3
    6b42:	d804      	bhi.n	6b4e <spi_data_write+0x92>
				order = 0x3;
    6b44:	2312      	movs	r3, #18
    6b46:	18fb      	adds	r3, r7, r3
    6b48:	2203      	movs	r2, #3
    6b4a:	701a      	strb	r2, [r3, #0]
    6b4c:	e003      	b.n	6b56 <spi_data_write+0x9a>
			else
				order = 0x2;
    6b4e:	2312      	movs	r3, #18
    6b50:	18fb      	adds	r3, r7, r3
    6b52:	2202      	movs	r2, #2
    6b54:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    6b56:	2311      	movs	r3, #17
    6b58:	18fb      	adds	r3, r7, r3
    6b5a:	781a      	ldrb	r2, [r3, #0]
    6b5c:	2312      	movs	r3, #18
    6b5e:	18fb      	adds	r3, r7, r3
    6b60:	781b      	ldrb	r3, [r3, #0]
    6b62:	4313      	orrs	r3, r2
    6b64:	b2da      	uxtb	r2, r3
    6b66:	2311      	movs	r3, #17
    6b68:	18fb      	adds	r3, r7, r3
    6b6a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    6b6c:	2311      	movs	r3, #17
    6b6e:	18fb      	adds	r3, r7, r3
    6b70:	2101      	movs	r1, #1
    6b72:	0018      	movs	r0, r3
    6b74:	4b3a      	ldr	r3, [pc, #232]	; (6c60 <spi_data_write+0x1a4>)
    6b76:	4798      	blx	r3
    6b78:	1e03      	subs	r3, r0, #0
    6b7a:	d012      	beq.n	6ba2 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    6b7c:	23d4      	movs	r3, #212	; 0xd4
    6b7e:	009a      	lsls	r2, r3, #2
    6b80:	4938      	ldr	r1, [pc, #224]	; (6c64 <spi_data_write+0x1a8>)
    6b82:	4b39      	ldr	r3, [pc, #228]	; (6c68 <spi_data_write+0x1ac>)
    6b84:	0018      	movs	r0, r3
    6b86:	4b39      	ldr	r3, [pc, #228]	; (6c6c <spi_data_write+0x1b0>)
    6b88:	4798      	blx	r3
    6b8a:	4b39      	ldr	r3, [pc, #228]	; (6c70 <spi_data_write+0x1b4>)
    6b8c:	0018      	movs	r0, r3
    6b8e:	4b39      	ldr	r3, [pc, #228]	; (6c74 <spi_data_write+0x1b8>)
    6b90:	4798      	blx	r3
    6b92:	200d      	movs	r0, #13
    6b94:	4b38      	ldr	r3, [pc, #224]	; (6c78 <spi_data_write+0x1bc>)
    6b96:	4798      	blx	r3
			result = N_FAIL;
    6b98:	2313      	movs	r3, #19
    6b9a:	18fb      	adds	r3, r7, r3
    6b9c:	2200      	movs	r2, #0
    6b9e:	701a      	strb	r2, [r3, #0]
			break;
    6ba0:	e056      	b.n	6c50 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    6ba2:	2316      	movs	r3, #22
    6ba4:	18fb      	adds	r3, r7, r3
    6ba6:	2200      	movs	r2, #0
    6ba8:	5e9b      	ldrsh	r3, [r3, r2]
    6baa:	687a      	ldr	r2, [r7, #4]
    6bac:	18d2      	adds	r2, r2, r3
    6bae:	2314      	movs	r3, #20
    6bb0:	18fb      	adds	r3, r7, r3
    6bb2:	881b      	ldrh	r3, [r3, #0]
    6bb4:	0019      	movs	r1, r3
    6bb6:	0010      	movs	r0, r2
    6bb8:	4b29      	ldr	r3, [pc, #164]	; (6c60 <spi_data_write+0x1a4>)
    6bba:	4798      	blx	r3
    6bbc:	1e03      	subs	r3, r0, #0
    6bbe:	d011      	beq.n	6be4 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    6bc0:	4a2e      	ldr	r2, [pc, #184]	; (6c7c <spi_data_write+0x1c0>)
    6bc2:	4928      	ldr	r1, [pc, #160]	; (6c64 <spi_data_write+0x1a8>)
    6bc4:	4b28      	ldr	r3, [pc, #160]	; (6c68 <spi_data_write+0x1ac>)
    6bc6:	0018      	movs	r0, r3
    6bc8:	4b28      	ldr	r3, [pc, #160]	; (6c6c <spi_data_write+0x1b0>)
    6bca:	4798      	blx	r3
    6bcc:	4b2c      	ldr	r3, [pc, #176]	; (6c80 <spi_data_write+0x1c4>)
    6bce:	0018      	movs	r0, r3
    6bd0:	4b28      	ldr	r3, [pc, #160]	; (6c74 <spi_data_write+0x1b8>)
    6bd2:	4798      	blx	r3
    6bd4:	200d      	movs	r0, #13
    6bd6:	4b28      	ldr	r3, [pc, #160]	; (6c78 <spi_data_write+0x1bc>)
    6bd8:	4798      	blx	r3
			result = N_FAIL;
    6bda:	2313      	movs	r3, #19
    6bdc:	18fb      	adds	r3, r7, r3
    6bde:	2200      	movs	r2, #0
    6be0:	701a      	strb	r2, [r3, #0]
			break;
    6be2:	e035      	b.n	6c50 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    6be4:	4b27      	ldr	r3, [pc, #156]	; (6c84 <spi_data_write+0x1c8>)
    6be6:	781b      	ldrb	r3, [r3, #0]
    6be8:	2b00      	cmp	r3, #0
    6bea:	d119      	bne.n	6c20 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    6bec:	230c      	movs	r3, #12
    6bee:	18fb      	adds	r3, r7, r3
    6bf0:	2102      	movs	r1, #2
    6bf2:	0018      	movs	r0, r3
    6bf4:	4b1a      	ldr	r3, [pc, #104]	; (6c60 <spi_data_write+0x1a4>)
    6bf6:	4798      	blx	r3
    6bf8:	1e03      	subs	r3, r0, #0
    6bfa:	d011      	beq.n	6c20 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    6bfc:	4a22      	ldr	r2, [pc, #136]	; (6c88 <spi_data_write+0x1cc>)
    6bfe:	4919      	ldr	r1, [pc, #100]	; (6c64 <spi_data_write+0x1a8>)
    6c00:	4b19      	ldr	r3, [pc, #100]	; (6c68 <spi_data_write+0x1ac>)
    6c02:	0018      	movs	r0, r3
    6c04:	4b19      	ldr	r3, [pc, #100]	; (6c6c <spi_data_write+0x1b0>)
    6c06:	4798      	blx	r3
    6c08:	4b20      	ldr	r3, [pc, #128]	; (6c8c <spi_data_write+0x1d0>)
    6c0a:	0018      	movs	r0, r3
    6c0c:	4b19      	ldr	r3, [pc, #100]	; (6c74 <spi_data_write+0x1b8>)
    6c0e:	4798      	blx	r3
    6c10:	200d      	movs	r0, #13
    6c12:	4b19      	ldr	r3, [pc, #100]	; (6c78 <spi_data_write+0x1bc>)
    6c14:	4798      	blx	r3
				result = N_FAIL;
    6c16:	2313      	movs	r3, #19
    6c18:	18fb      	adds	r3, r7, r3
    6c1a:	2200      	movs	r2, #0
    6c1c:	701a      	strb	r2, [r3, #0]
				break;
    6c1e:	e017      	b.n	6c50 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    6c20:	2316      	movs	r3, #22
    6c22:	18fb      	adds	r3, r7, r3
    6c24:	881a      	ldrh	r2, [r3, #0]
    6c26:	2314      	movs	r3, #20
    6c28:	18fb      	adds	r3, r7, r3
    6c2a:	881b      	ldrh	r3, [r3, #0]
    6c2c:	18d3      	adds	r3, r2, r3
    6c2e:	b29a      	uxth	r2, r3
    6c30:	2316      	movs	r3, #22
    6c32:	18fb      	adds	r3, r7, r3
    6c34:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    6c36:	1cbb      	adds	r3, r7, #2
    6c38:	1cb9      	adds	r1, r7, #2
    6c3a:	2214      	movs	r2, #20
    6c3c:	18ba      	adds	r2, r7, r2
    6c3e:	8809      	ldrh	r1, [r1, #0]
    6c40:	8812      	ldrh	r2, [r2, #0]
    6c42:	1a8a      	subs	r2, r1, r2
    6c44:	801a      	strh	r2, [r3, #0]
	} while (sz);
    6c46:	1cbb      	adds	r3, r7, #2
    6c48:	881b      	ldrh	r3, [r3, #0]
    6c4a:	2b00      	cmp	r3, #0
    6c4c:	d000      	beq.n	6c50 <spi_data_write+0x194>
    6c4e:	e748      	b.n	6ae2 <spi_data_write+0x26>


	return result;
    6c50:	2313      	movs	r3, #19
    6c52:	18fb      	adds	r3, r7, r3
    6c54:	781b      	ldrb	r3, [r3, #0]
    6c56:	b25b      	sxtb	r3, r3
}
    6c58:	0018      	movs	r0, r3
    6c5a:	46bd      	mov	sp, r7
    6c5c:	b006      	add	sp, #24
    6c5e:	bd80      	pop	{r7, pc}
    6c60:	00006279 	.word	0x00006279
    6c64:	00019528 	.word	0x00019528
    6c68:	00018f60 	.word	0x00018f60
    6c6c:	00012f71 	.word	0x00012f71
    6c70:	000190ec 	.word	0x000190ec
    6c74:	0001308d 	.word	0x0001308d
    6c78:	00012fa5 	.word	0x00012fa5
    6c7c:	00000359 	.word	0x00000359
    6c80:	00019124 	.word	0x00019124
    6c84:	2000022c 	.word	0x2000022c
    6c88:	00000363 	.word	0x00000363
    6c8c:	00019158 	.word	0x00019158

00006c90 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    6c90:	b5b0      	push	{r4, r5, r7, lr}
    6c92:	b086      	sub	sp, #24
    6c94:	af02      	add	r7, sp, #8
    6c96:	6078      	str	r0, [r7, #4]
    6c98:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    6c9a:	230f      	movs	r3, #15
    6c9c:	18fb      	adds	r3, r7, r3
    6c9e:	220a      	movs	r2, #10
    6ca0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    6ca2:	230e      	movs	r3, #14
    6ca4:	18fb      	adds	r3, r7, r3
    6ca6:	2201      	movs	r2, #1
    6ca8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    6caa:	230d      	movs	r3, #13
    6cac:	18fb      	adds	r3, r7, r3
    6cae:	22c9      	movs	r2, #201	; 0xc9
    6cb0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    6cb2:	230c      	movs	r3, #12
    6cb4:	18fb      	adds	r3, r7, r3
    6cb6:	2200      	movs	r2, #0
    6cb8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	2b30      	cmp	r3, #48	; 0x30
    6cbe:	d808      	bhi.n	6cd2 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    6cc0:	230d      	movs	r3, #13
    6cc2:	18fb      	adds	r3, r7, r3
    6cc4:	22c3      	movs	r2, #195	; 0xc3
    6cc6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    6cc8:	230c      	movs	r3, #12
    6cca:	18fb      	adds	r3, r7, r3
    6ccc:	2201      	movs	r2, #1
    6cce:	701a      	strb	r2, [r3, #0]
    6cd0:	e007      	b.n	6ce2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    6cd2:	230d      	movs	r3, #13
    6cd4:	18fb      	adds	r3, r7, r3
    6cd6:	22c9      	movs	r2, #201	; 0xc9
    6cd8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    6cda:	230c      	movs	r3, #12
    6cdc:	18fb      	adds	r3, r7, r3
    6cde:	2200      	movs	r2, #0
    6ce0:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    6ce2:	230e      	movs	r3, #14
    6ce4:	18fc      	adds	r4, r7, r3
    6ce6:	683a      	ldr	r2, [r7, #0]
    6ce8:	6879      	ldr	r1, [r7, #4]
    6cea:	230d      	movs	r3, #13
    6cec:	18fb      	adds	r3, r7, r3
    6cee:	7818      	ldrb	r0, [r3, #0]
    6cf0:	230c      	movs	r3, #12
    6cf2:	18fb      	adds	r3, r7, r3
    6cf4:	781b      	ldrb	r3, [r3, #0]
    6cf6:	9300      	str	r3, [sp, #0]
    6cf8:	2304      	movs	r3, #4
    6cfa:	4d3c      	ldr	r5, [pc, #240]	; (6dec <spi_write_reg+0x15c>)
    6cfc:	47a8      	blx	r5
    6cfe:	0003      	movs	r3, r0
    6d00:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6d02:	230e      	movs	r3, #14
    6d04:	18fb      	adds	r3, r7, r3
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	b25b      	sxtb	r3, r3
    6d0a:	2b01      	cmp	r3, #1
    6d0c:	d00f      	beq.n	6d2e <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    6d0e:	4a38      	ldr	r2, [pc, #224]	; (6df0 <spi_write_reg+0x160>)
    6d10:	4938      	ldr	r1, [pc, #224]	; (6df4 <spi_write_reg+0x164>)
    6d12:	4b39      	ldr	r3, [pc, #228]	; (6df8 <spi_write_reg+0x168>)
    6d14:	0018      	movs	r0, r3
    6d16:	4b39      	ldr	r3, [pc, #228]	; (6dfc <spi_write_reg+0x16c>)
    6d18:	4798      	blx	r3
    6d1a:	687a      	ldr	r2, [r7, #4]
    6d1c:	4b38      	ldr	r3, [pc, #224]	; (6e00 <spi_write_reg+0x170>)
    6d1e:	0011      	movs	r1, r2
    6d20:	0018      	movs	r0, r3
    6d22:	4b36      	ldr	r3, [pc, #216]	; (6dfc <spi_write_reg+0x16c>)
    6d24:	4798      	blx	r3
    6d26:	200d      	movs	r0, #13
    6d28:	4b36      	ldr	r3, [pc, #216]	; (6e04 <spi_write_reg+0x174>)
    6d2a:	4798      	blx	r3
		goto _FAIL_;
    6d2c:	e020      	b.n	6d70 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    6d2e:	230e      	movs	r3, #14
    6d30:	18fc      	adds	r4, r7, r3
    6d32:	230d      	movs	r3, #13
    6d34:	18fb      	adds	r3, r7, r3
    6d36:	781b      	ldrb	r3, [r3, #0]
    6d38:	0018      	movs	r0, r3
    6d3a:	4b33      	ldr	r3, [pc, #204]	; (6e08 <spi_write_reg+0x178>)
    6d3c:	4798      	blx	r3
    6d3e:	0003      	movs	r3, r0
    6d40:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6d42:	230e      	movs	r3, #14
    6d44:	18fb      	adds	r3, r7, r3
    6d46:	781b      	ldrb	r3, [r3, #0]
    6d48:	b25b      	sxtb	r3, r3
    6d4a:	2b01      	cmp	r3, #1
    6d4c:	d010      	beq.n	6d70 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    6d4e:	23e7      	movs	r3, #231	; 0xe7
    6d50:	009a      	lsls	r2, r3, #2
    6d52:	4928      	ldr	r1, [pc, #160]	; (6df4 <spi_write_reg+0x164>)
    6d54:	4b28      	ldr	r3, [pc, #160]	; (6df8 <spi_write_reg+0x168>)
    6d56:	0018      	movs	r0, r3
    6d58:	4b28      	ldr	r3, [pc, #160]	; (6dfc <spi_write_reg+0x16c>)
    6d5a:	4798      	blx	r3
    6d5c:	687a      	ldr	r2, [r7, #4]
    6d5e:	4b2b      	ldr	r3, [pc, #172]	; (6e0c <spi_write_reg+0x17c>)
    6d60:	0011      	movs	r1, r2
    6d62:	0018      	movs	r0, r3
    6d64:	4b25      	ldr	r3, [pc, #148]	; (6dfc <spi_write_reg+0x16c>)
    6d66:	4798      	blx	r3
    6d68:	200d      	movs	r0, #13
    6d6a:	4b26      	ldr	r3, [pc, #152]	; (6e04 <spi_write_reg+0x174>)
    6d6c:	4798      	blx	r3
		goto _FAIL_;
    6d6e:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    6d70:	230e      	movs	r3, #14
    6d72:	18fb      	adds	r3, r7, r3
    6d74:	781b      	ldrb	r3, [r3, #0]
    6d76:	b25b      	sxtb	r3, r3
    6d78:	2b01      	cmp	r3, #1
    6d7a:	d02e      	beq.n	6dda <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    6d7c:	2001      	movs	r0, #1
    6d7e:	4b24      	ldr	r3, [pc, #144]	; (6e10 <spi_write_reg+0x180>)
    6d80:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    6d82:	2300      	movs	r3, #0
    6d84:	9300      	str	r3, [sp, #0]
    6d86:	2300      	movs	r3, #0
    6d88:	2200      	movs	r2, #0
    6d8a:	2100      	movs	r1, #0
    6d8c:	20cf      	movs	r0, #207	; 0xcf
    6d8e:	4c17      	ldr	r4, [pc, #92]	; (6dec <spi_write_reg+0x15c>)
    6d90:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    6d92:	20cf      	movs	r0, #207	; 0xcf
    6d94:	4b1c      	ldr	r3, [pc, #112]	; (6e08 <spi_write_reg+0x178>)
    6d96:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    6d98:	4a1e      	ldr	r2, [pc, #120]	; (6e14 <spi_write_reg+0x184>)
    6d9a:	4916      	ldr	r1, [pc, #88]	; (6df4 <spi_write_reg+0x164>)
    6d9c:	4b16      	ldr	r3, [pc, #88]	; (6df8 <spi_write_reg+0x168>)
    6d9e:	0018      	movs	r0, r3
    6da0:	4b16      	ldr	r3, [pc, #88]	; (6dfc <spi_write_reg+0x16c>)
    6da2:	4798      	blx	r3
    6da4:	230f      	movs	r3, #15
    6da6:	18fb      	adds	r3, r7, r3
    6da8:	7819      	ldrb	r1, [r3, #0]
    6daa:	683b      	ldr	r3, [r7, #0]
    6dac:	687a      	ldr	r2, [r7, #4]
    6dae:	481a      	ldr	r0, [pc, #104]	; (6e18 <spi_write_reg+0x188>)
    6db0:	4c12      	ldr	r4, [pc, #72]	; (6dfc <spi_write_reg+0x16c>)
    6db2:	47a0      	blx	r4
    6db4:	200d      	movs	r0, #13
    6db6:	4b13      	ldr	r3, [pc, #76]	; (6e04 <spi_write_reg+0x174>)
    6db8:	4798      	blx	r3
		nm_bsp_sleep(1);
    6dba:	2001      	movs	r0, #1
    6dbc:	4b14      	ldr	r3, [pc, #80]	; (6e10 <spi_write_reg+0x180>)
    6dbe:	4798      	blx	r3
		retry--;
    6dc0:	230f      	movs	r3, #15
    6dc2:	18fb      	adds	r3, r7, r3
    6dc4:	781a      	ldrb	r2, [r3, #0]
    6dc6:	230f      	movs	r3, #15
    6dc8:	18fb      	adds	r3, r7, r3
    6dca:	3a01      	subs	r2, #1
    6dcc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    6dce:	230f      	movs	r3, #15
    6dd0:	18fb      	adds	r3, r7, r3
    6dd2:	781b      	ldrb	r3, [r3, #0]
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	d000      	beq.n	6dda <spi_write_reg+0x14a>
    6dd8:	e76f      	b.n	6cba <spi_write_reg+0x2a>
	}

	return result;
    6dda:	230e      	movs	r3, #14
    6ddc:	18fb      	adds	r3, r7, r3
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	b25b      	sxtb	r3, r3
}
    6de2:	0018      	movs	r0, r3
    6de4:	46bd      	mov	sp, r7
    6de6:	b004      	add	sp, #16
    6de8:	bdb0      	pop	{r4, r5, r7, pc}
    6dea:	46c0      	nop			; (mov r8, r8)
    6dec:	0000633d 	.word	0x0000633d
    6df0:	00000396 	.word	0x00000396
    6df4:	00019538 	.word	0x00019538
    6df8:	00018f60 	.word	0x00018f60
    6dfc:	00012f71 	.word	0x00012f71
    6e00:	00019190 	.word	0x00019190
    6e04:	00012fa5 	.word	0x00012fa5
    6e08:	00006781 	.word	0x00006781
    6e0c:	000191bc 	.word	0x000191bc
    6e10:	0000327d 	.word	0x0000327d
    6e14:	000003af 	.word	0x000003af
    6e18:	000191f4 	.word	0x000191f4

00006e1c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    6e1c:	b5b0      	push	{r4, r5, r7, lr}
    6e1e:	b088      	sub	sp, #32
    6e20:	af02      	add	r7, sp, #8
    6e22:	60f8      	str	r0, [r7, #12]
    6e24:	60b9      	str	r1, [r7, #8]
    6e26:	1dbb      	adds	r3, r7, #6
    6e28:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    6e2a:	2316      	movs	r3, #22
    6e2c:	18fb      	adds	r3, r7, r3
    6e2e:	220a      	movs	r2, #10
    6e30:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    6e32:	2315      	movs	r3, #21
    6e34:	18fb      	adds	r3, r7, r3
    6e36:	22c7      	movs	r2, #199	; 0xc7
    6e38:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    6e3a:	1dbb      	adds	r3, r7, #6
    6e3c:	881b      	ldrh	r3, [r3, #0]
    6e3e:	2b01      	cmp	r3, #1
    6e40:	d102      	bne.n	6e48 <nm_spi_write+0x2c>
		size = 2;
    6e42:	1dbb      	adds	r3, r7, #6
    6e44:	2202      	movs	r2, #2
    6e46:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    6e48:	1dbb      	adds	r3, r7, #6
    6e4a:	881a      	ldrh	r2, [r3, #0]
    6e4c:	2317      	movs	r3, #23
    6e4e:	18fc      	adds	r4, r7, r3
    6e50:	68f9      	ldr	r1, [r7, #12]
    6e52:	2315      	movs	r3, #21
    6e54:	18fb      	adds	r3, r7, r3
    6e56:	7818      	ldrb	r0, [r3, #0]
    6e58:	2300      	movs	r3, #0
    6e5a:	9300      	str	r3, [sp, #0]
    6e5c:	0013      	movs	r3, r2
    6e5e:	2200      	movs	r2, #0
    6e60:	4d5b      	ldr	r5, [pc, #364]	; (6fd0 <nm_spi_write+0x1b4>)
    6e62:	47a8      	blx	r5
    6e64:	0003      	movs	r3, r0
    6e66:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6e68:	2317      	movs	r3, #23
    6e6a:	18fb      	adds	r3, r7, r3
    6e6c:	781b      	ldrb	r3, [r3, #0]
    6e6e:	b25b      	sxtb	r3, r3
    6e70:	2b01      	cmp	r3, #1
    6e72:	d00f      	beq.n	6e94 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    6e74:	4a57      	ldr	r2, [pc, #348]	; (6fd4 <nm_spi_write+0x1b8>)
    6e76:	4958      	ldr	r1, [pc, #352]	; (6fd8 <nm_spi_write+0x1bc>)
    6e78:	4b58      	ldr	r3, [pc, #352]	; (6fdc <nm_spi_write+0x1c0>)
    6e7a:	0018      	movs	r0, r3
    6e7c:	4b58      	ldr	r3, [pc, #352]	; (6fe0 <nm_spi_write+0x1c4>)
    6e7e:	4798      	blx	r3
    6e80:	68fa      	ldr	r2, [r7, #12]
    6e82:	4b58      	ldr	r3, [pc, #352]	; (6fe4 <nm_spi_write+0x1c8>)
    6e84:	0011      	movs	r1, r2
    6e86:	0018      	movs	r0, r3
    6e88:	4b55      	ldr	r3, [pc, #340]	; (6fe0 <nm_spi_write+0x1c4>)
    6e8a:	4798      	blx	r3
    6e8c:	200d      	movs	r0, #13
    6e8e:	4b56      	ldr	r3, [pc, #344]	; (6fe8 <nm_spi_write+0x1cc>)
    6e90:	4798      	blx	r3
		goto _FAIL_;
    6e92:	e05f      	b.n	6f54 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    6e94:	2317      	movs	r3, #23
    6e96:	18fc      	adds	r4, r7, r3
    6e98:	2315      	movs	r3, #21
    6e9a:	18fb      	adds	r3, r7, r3
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	0018      	movs	r0, r3
    6ea0:	4b52      	ldr	r3, [pc, #328]	; (6fec <nm_spi_write+0x1d0>)
    6ea2:	4798      	blx	r3
    6ea4:	0003      	movs	r3, r0
    6ea6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6ea8:	2317      	movs	r3, #23
    6eaa:	18fb      	adds	r3, r7, r3
    6eac:	781b      	ldrb	r3, [r3, #0]
    6eae:	b25b      	sxtb	r3, r3
    6eb0:	2b01      	cmp	r3, #1
    6eb2:	d010      	beq.n	6ed6 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    6eb4:	23f4      	movs	r3, #244	; 0xf4
    6eb6:	009a      	lsls	r2, r3, #2
    6eb8:	4947      	ldr	r1, [pc, #284]	; (6fd8 <nm_spi_write+0x1bc>)
    6eba:	4b48      	ldr	r3, [pc, #288]	; (6fdc <nm_spi_write+0x1c0>)
    6ebc:	0018      	movs	r0, r3
    6ebe:	4b48      	ldr	r3, [pc, #288]	; (6fe0 <nm_spi_write+0x1c4>)
    6ec0:	4798      	blx	r3
    6ec2:	68fa      	ldr	r2, [r7, #12]
    6ec4:	4b4a      	ldr	r3, [pc, #296]	; (6ff0 <nm_spi_write+0x1d4>)
    6ec6:	0011      	movs	r1, r2
    6ec8:	0018      	movs	r0, r3
    6eca:	4b45      	ldr	r3, [pc, #276]	; (6fe0 <nm_spi_write+0x1c4>)
    6ecc:	4798      	blx	r3
    6ece:	200d      	movs	r0, #13
    6ed0:	4b45      	ldr	r3, [pc, #276]	; (6fe8 <nm_spi_write+0x1cc>)
    6ed2:	4798      	blx	r3
		goto _FAIL_;
    6ed4:	e03e      	b.n	6f54 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    6ed6:	2317      	movs	r3, #23
    6ed8:	18fc      	adds	r4, r7, r3
    6eda:	1dbb      	adds	r3, r7, #6
    6edc:	881a      	ldrh	r2, [r3, #0]
    6ede:	68bb      	ldr	r3, [r7, #8]
    6ee0:	0011      	movs	r1, r2
    6ee2:	0018      	movs	r0, r3
    6ee4:	4b43      	ldr	r3, [pc, #268]	; (6ff4 <nm_spi_write+0x1d8>)
    6ee6:	4798      	blx	r3
    6ee8:	0003      	movs	r3, r0
    6eea:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6eec:	2317      	movs	r3, #23
    6eee:	18fb      	adds	r3, r7, r3
    6ef0:	781b      	ldrb	r3, [r3, #0]
    6ef2:	b25b      	sxtb	r3, r3
    6ef4:	2b01      	cmp	r3, #1
    6ef6:	d00e      	beq.n	6f16 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    6ef8:	23f8      	movs	r3, #248	; 0xf8
    6efa:	009a      	lsls	r2, r3, #2
    6efc:	4936      	ldr	r1, [pc, #216]	; (6fd8 <nm_spi_write+0x1bc>)
    6efe:	4b37      	ldr	r3, [pc, #220]	; (6fdc <nm_spi_write+0x1c0>)
    6f00:	0018      	movs	r0, r3
    6f02:	4b37      	ldr	r3, [pc, #220]	; (6fe0 <nm_spi_write+0x1c4>)
    6f04:	4798      	blx	r3
    6f06:	4b3c      	ldr	r3, [pc, #240]	; (6ff8 <nm_spi_write+0x1dc>)
    6f08:	0018      	movs	r0, r3
    6f0a:	4b3c      	ldr	r3, [pc, #240]	; (6ffc <nm_spi_write+0x1e0>)
    6f0c:	4798      	blx	r3
    6f0e:	200d      	movs	r0, #13
    6f10:	4b35      	ldr	r3, [pc, #212]	; (6fe8 <nm_spi_write+0x1cc>)
    6f12:	4798      	blx	r3
		goto _FAIL_;
    6f14:	e01e      	b.n	6f54 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    6f16:	2317      	movs	r3, #23
    6f18:	18fc      	adds	r4, r7, r3
    6f1a:	2315      	movs	r3, #21
    6f1c:	18fb      	adds	r3, r7, r3
    6f1e:	781b      	ldrb	r3, [r3, #0]
    6f20:	0018      	movs	r0, r3
    6f22:	4b37      	ldr	r3, [pc, #220]	; (7000 <nm_spi_write+0x1e4>)
    6f24:	4798      	blx	r3
    6f26:	0003      	movs	r3, r0
    6f28:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6f2a:	2317      	movs	r3, #23
    6f2c:	18fb      	adds	r3, r7, r3
    6f2e:	781b      	ldrb	r3, [r3, #0]
    6f30:	b25b      	sxtb	r3, r3
    6f32:	2b01      	cmp	r3, #1
    6f34:	d00e      	beq.n	6f54 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    6f36:	23fa      	movs	r3, #250	; 0xfa
    6f38:	009a      	lsls	r2, r3, #2
    6f3a:	4927      	ldr	r1, [pc, #156]	; (6fd8 <nm_spi_write+0x1bc>)
    6f3c:	4b27      	ldr	r3, [pc, #156]	; (6fdc <nm_spi_write+0x1c0>)
    6f3e:	0018      	movs	r0, r3
    6f40:	4b27      	ldr	r3, [pc, #156]	; (6fe0 <nm_spi_write+0x1c4>)
    6f42:	4798      	blx	r3
    6f44:	4b2c      	ldr	r3, [pc, #176]	; (6ff8 <nm_spi_write+0x1dc>)
    6f46:	0018      	movs	r0, r3
    6f48:	4b2c      	ldr	r3, [pc, #176]	; (6ffc <nm_spi_write+0x1e0>)
    6f4a:	4798      	blx	r3
    6f4c:	200d      	movs	r0, #13
    6f4e:	4b26      	ldr	r3, [pc, #152]	; (6fe8 <nm_spi_write+0x1cc>)
    6f50:	4798      	blx	r3
		goto _FAIL_;
    6f52:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    6f54:	2317      	movs	r3, #23
    6f56:	18fb      	adds	r3, r7, r3
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	b25b      	sxtb	r3, r3
    6f5c:	2b01      	cmp	r3, #1
    6f5e:	d02f      	beq.n	6fc0 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    6f60:	2001      	movs	r0, #1
    6f62:	4b28      	ldr	r3, [pc, #160]	; (7004 <nm_spi_write+0x1e8>)
    6f64:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    6f66:	2300      	movs	r3, #0
    6f68:	9300      	str	r3, [sp, #0]
    6f6a:	2300      	movs	r3, #0
    6f6c:	2200      	movs	r2, #0
    6f6e:	2100      	movs	r1, #0
    6f70:	20cf      	movs	r0, #207	; 0xcf
    6f72:	4c17      	ldr	r4, [pc, #92]	; (6fd0 <nm_spi_write+0x1b4>)
    6f74:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    6f76:	20cf      	movs	r0, #207	; 0xcf
    6f78:	4b1c      	ldr	r3, [pc, #112]	; (6fec <nm_spi_write+0x1d0>)
    6f7a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    6f7c:	4a22      	ldr	r2, [pc, #136]	; (7008 <nm_spi_write+0x1ec>)
    6f7e:	4916      	ldr	r1, [pc, #88]	; (6fd8 <nm_spi_write+0x1bc>)
    6f80:	4b16      	ldr	r3, [pc, #88]	; (6fdc <nm_spi_write+0x1c0>)
    6f82:	0018      	movs	r0, r3
    6f84:	4b16      	ldr	r3, [pc, #88]	; (6fe0 <nm_spi_write+0x1c4>)
    6f86:	4798      	blx	r3
    6f88:	2316      	movs	r3, #22
    6f8a:	18fb      	adds	r3, r7, r3
    6f8c:	7819      	ldrb	r1, [r3, #0]
    6f8e:	1dbb      	adds	r3, r7, #6
    6f90:	881b      	ldrh	r3, [r3, #0]
    6f92:	68fa      	ldr	r2, [r7, #12]
    6f94:	481d      	ldr	r0, [pc, #116]	; (700c <nm_spi_write+0x1f0>)
    6f96:	4c12      	ldr	r4, [pc, #72]	; (6fe0 <nm_spi_write+0x1c4>)
    6f98:	47a0      	blx	r4
    6f9a:	200d      	movs	r0, #13
    6f9c:	4b12      	ldr	r3, [pc, #72]	; (6fe8 <nm_spi_write+0x1cc>)
    6f9e:	4798      	blx	r3
		nm_bsp_sleep(1);
    6fa0:	2001      	movs	r0, #1
    6fa2:	4b18      	ldr	r3, [pc, #96]	; (7004 <nm_spi_write+0x1e8>)
    6fa4:	4798      	blx	r3
		retry--;
    6fa6:	2316      	movs	r3, #22
    6fa8:	18fb      	adds	r3, r7, r3
    6faa:	781a      	ldrb	r2, [r3, #0]
    6fac:	2316      	movs	r3, #22
    6fae:	18fb      	adds	r3, r7, r3
    6fb0:	3a01      	subs	r2, #1
    6fb2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    6fb4:	2316      	movs	r3, #22
    6fb6:	18fb      	adds	r3, r7, r3
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d000      	beq.n	6fc0 <nm_spi_write+0x1a4>
    6fbe:	e73c      	b.n	6e3a <nm_spi_write+0x1e>
	}


	return result;
    6fc0:	2317      	movs	r3, #23
    6fc2:	18fb      	adds	r3, r7, r3
    6fc4:	781b      	ldrb	r3, [r3, #0]
    6fc6:	b25b      	sxtb	r3, r3
}
    6fc8:	0018      	movs	r0, r3
    6fca:	46bd      	mov	sp, r7
    6fcc:	b006      	add	sp, #24
    6fce:	bdb0      	pop	{r4, r5, r7, pc}
    6fd0:	0000633d 	.word	0x0000633d
    6fd4:	000003ca 	.word	0x000003ca
    6fd8:	00019548 	.word	0x00019548
    6fdc:	00018f60 	.word	0x00018f60
    6fe0:	00012f71 	.word	0x00012f71
    6fe4:	00019210 	.word	0x00019210
    6fe8:	00012fa5 	.word	0x00012fa5
    6fec:	00006781 	.word	0x00006781
    6ff0:	00019240 	.word	0x00019240
    6ff4:	00006abd 	.word	0x00006abd
    6ff8:	00019278 	.word	0x00019278
    6ffc:	0001308d 	.word	0x0001308d
    7000:	00006681 	.word	0x00006681
    7004:	0000327d 	.word	0x0000327d
    7008:	000003f2 	.word	0x000003f2
    700c:	000192a0 	.word	0x000192a0

00007010 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    7010:	b5b0      	push	{r4, r5, r7, lr}
    7012:	b086      	sub	sp, #24
    7014:	af02      	add	r7, sp, #8
    7016:	6078      	str	r0, [r7, #4]
    7018:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    701a:	230f      	movs	r3, #15
    701c:	18fb      	adds	r3, r7, r3
    701e:	220a      	movs	r2, #10
    7020:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    7022:	230e      	movs	r3, #14
    7024:	18fb      	adds	r3, r7, r3
    7026:	2201      	movs	r2, #1
    7028:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    702a:	230d      	movs	r3, #13
    702c:	18fb      	adds	r3, r7, r3
    702e:	22ca      	movs	r2, #202	; 0xca
    7030:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    7032:	230c      	movs	r3, #12
    7034:	18fb      	adds	r3, r7, r3
    7036:	2200      	movs	r2, #0
    7038:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	2bff      	cmp	r3, #255	; 0xff
    703e:	d808      	bhi.n	7052 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    7040:	230d      	movs	r3, #13
    7042:	18fb      	adds	r3, r7, r3
    7044:	22c4      	movs	r2, #196	; 0xc4
    7046:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    7048:	230c      	movs	r3, #12
    704a:	18fb      	adds	r3, r7, r3
    704c:	2201      	movs	r2, #1
    704e:	701a      	strb	r2, [r3, #0]
    7050:	e007      	b.n	7062 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    7052:	230d      	movs	r3, #13
    7054:	18fb      	adds	r3, r7, r3
    7056:	22ca      	movs	r2, #202	; 0xca
    7058:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    705a:	230c      	movs	r3, #12
    705c:	18fb      	adds	r3, r7, r3
    705e:	2200      	movs	r2, #0
    7060:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7062:	230e      	movs	r3, #14
    7064:	18fc      	adds	r4, r7, r3
    7066:	6879      	ldr	r1, [r7, #4]
    7068:	230d      	movs	r3, #13
    706a:	18fb      	adds	r3, r7, r3
    706c:	7818      	ldrb	r0, [r3, #0]
    706e:	230c      	movs	r3, #12
    7070:	18fb      	adds	r3, r7, r3
    7072:	781b      	ldrb	r3, [r3, #0]
    7074:	9300      	str	r3, [sp, #0]
    7076:	2304      	movs	r3, #4
    7078:	2200      	movs	r2, #0
    707a:	4d56      	ldr	r5, [pc, #344]	; (71d4 <spi_read_reg+0x1c4>)
    707c:	47a8      	blx	r5
    707e:	0003      	movs	r3, r0
    7080:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7082:	230e      	movs	r3, #14
    7084:	18fb      	adds	r3, r7, r3
    7086:	781b      	ldrb	r3, [r3, #0]
    7088:	b25b      	sxtb	r3, r3
    708a:	2b01      	cmp	r3, #1
    708c:	d00f      	beq.n	70ae <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    708e:	4a52      	ldr	r2, [pc, #328]	; (71d8 <spi_read_reg+0x1c8>)
    7090:	4952      	ldr	r1, [pc, #328]	; (71dc <spi_read_reg+0x1cc>)
    7092:	4b53      	ldr	r3, [pc, #332]	; (71e0 <spi_read_reg+0x1d0>)
    7094:	0018      	movs	r0, r3
    7096:	4b53      	ldr	r3, [pc, #332]	; (71e4 <spi_read_reg+0x1d4>)
    7098:	4798      	blx	r3
    709a:	687a      	ldr	r2, [r7, #4]
    709c:	4b52      	ldr	r3, [pc, #328]	; (71e8 <spi_read_reg+0x1d8>)
    709e:	0011      	movs	r1, r2
    70a0:	0018      	movs	r0, r3
    70a2:	4b50      	ldr	r3, [pc, #320]	; (71e4 <spi_read_reg+0x1d4>)
    70a4:	4798      	blx	r3
    70a6:	200d      	movs	r0, #13
    70a8:	4b50      	ldr	r3, [pc, #320]	; (71ec <spi_read_reg+0x1dc>)
    70aa:	4798      	blx	r3
		goto _FAIL_;
    70ac:	e055      	b.n	715a <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    70ae:	230e      	movs	r3, #14
    70b0:	18fc      	adds	r4, r7, r3
    70b2:	230d      	movs	r3, #13
    70b4:	18fb      	adds	r3, r7, r3
    70b6:	781b      	ldrb	r3, [r3, #0]
    70b8:	0018      	movs	r0, r3
    70ba:	4b4d      	ldr	r3, [pc, #308]	; (71f0 <spi_read_reg+0x1e0>)
    70bc:	4798      	blx	r3
    70be:	0003      	movs	r3, r0
    70c0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    70c2:	230e      	movs	r3, #14
    70c4:	18fb      	adds	r3, r7, r3
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	b25b      	sxtb	r3, r3
    70ca:	2b01      	cmp	r3, #1
    70cc:	d00f      	beq.n	70ee <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    70ce:	4a49      	ldr	r2, [pc, #292]	; (71f4 <spi_read_reg+0x1e4>)
    70d0:	4942      	ldr	r1, [pc, #264]	; (71dc <spi_read_reg+0x1cc>)
    70d2:	4b43      	ldr	r3, [pc, #268]	; (71e0 <spi_read_reg+0x1d0>)
    70d4:	0018      	movs	r0, r3
    70d6:	4b43      	ldr	r3, [pc, #268]	; (71e4 <spi_read_reg+0x1d4>)
    70d8:	4798      	blx	r3
    70da:	687a      	ldr	r2, [r7, #4]
    70dc:	4b46      	ldr	r3, [pc, #280]	; (71f8 <spi_read_reg+0x1e8>)
    70de:	0011      	movs	r1, r2
    70e0:	0018      	movs	r0, r3
    70e2:	4b40      	ldr	r3, [pc, #256]	; (71e4 <spi_read_reg+0x1d4>)
    70e4:	4798      	blx	r3
    70e6:	200d      	movs	r0, #13
    70e8:	4b40      	ldr	r3, [pc, #256]	; (71ec <spi_read_reg+0x1dc>)
    70ea:	4798      	blx	r3
		goto _FAIL_;
    70ec:	e035      	b.n	715a <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    70ee:	230e      	movs	r3, #14
    70f0:	18fc      	adds	r4, r7, r3
    70f2:	230c      	movs	r3, #12
    70f4:	18fb      	adds	r3, r7, r3
    70f6:	781a      	ldrb	r2, [r3, #0]
    70f8:	2308      	movs	r3, #8
    70fa:	18fb      	adds	r3, r7, r3
    70fc:	2104      	movs	r1, #4
    70fe:	0018      	movs	r0, r3
    7100:	4b3e      	ldr	r3, [pc, #248]	; (71fc <spi_read_reg+0x1ec>)
    7102:	4798      	blx	r3
    7104:	0003      	movs	r3, r0
    7106:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7108:	230e      	movs	r3, #14
    710a:	18fb      	adds	r3, r7, r3
    710c:	781b      	ldrb	r3, [r3, #0]
    710e:	b25b      	sxtb	r3, r3
    7110:	2b01      	cmp	r3, #1
    7112:	d00d      	beq.n	7130 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    7114:	4a3a      	ldr	r2, [pc, #232]	; (7200 <spi_read_reg+0x1f0>)
    7116:	4931      	ldr	r1, [pc, #196]	; (71dc <spi_read_reg+0x1cc>)
    7118:	4b31      	ldr	r3, [pc, #196]	; (71e0 <spi_read_reg+0x1d0>)
    711a:	0018      	movs	r0, r3
    711c:	4b31      	ldr	r3, [pc, #196]	; (71e4 <spi_read_reg+0x1d4>)
    711e:	4798      	blx	r3
    7120:	4b38      	ldr	r3, [pc, #224]	; (7204 <spi_read_reg+0x1f4>)
    7122:	0018      	movs	r0, r3
    7124:	4b38      	ldr	r3, [pc, #224]	; (7208 <spi_read_reg+0x1f8>)
    7126:	4798      	blx	r3
    7128:	200d      	movs	r0, #13
    712a:	4b30      	ldr	r3, [pc, #192]	; (71ec <spi_read_reg+0x1dc>)
    712c:	4798      	blx	r3
		goto _FAIL_;
    712e:	e014      	b.n	715a <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    7130:	2308      	movs	r3, #8
    7132:	18fb      	adds	r3, r7, r3
    7134:	781b      	ldrb	r3, [r3, #0]
    7136:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    7138:	2308      	movs	r3, #8
    713a:	18fb      	adds	r3, r7, r3
    713c:	785b      	ldrb	r3, [r3, #1]
    713e:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    7140:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    7142:	2308      	movs	r3, #8
    7144:	18fb      	adds	r3, r7, r3
    7146:	789b      	ldrb	r3, [r3, #2]
    7148:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    714a:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    714c:	2308      	movs	r3, #8
    714e:	18fb      	adds	r3, r7, r3
    7150:	78db      	ldrb	r3, [r3, #3]
    7152:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    7154:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    7156:	683b      	ldr	r3, [r7, #0]
    7158:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    715a:	230e      	movs	r3, #14
    715c:	18fb      	adds	r3, r7, r3
    715e:	781b      	ldrb	r3, [r3, #0]
    7160:	b25b      	sxtb	r3, r3
    7162:	2b01      	cmp	r3, #1
    7164:	d02e      	beq.n	71c4 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    7166:	2001      	movs	r0, #1
    7168:	4b28      	ldr	r3, [pc, #160]	; (720c <spi_read_reg+0x1fc>)
    716a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    716c:	2300      	movs	r3, #0
    716e:	9300      	str	r3, [sp, #0]
    7170:	2300      	movs	r3, #0
    7172:	2200      	movs	r2, #0
    7174:	2100      	movs	r1, #0
    7176:	20cf      	movs	r0, #207	; 0xcf
    7178:	4c16      	ldr	r4, [pc, #88]	; (71d4 <spi_read_reg+0x1c4>)
    717a:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    717c:	20cf      	movs	r0, #207	; 0xcf
    717e:	4b1c      	ldr	r3, [pc, #112]	; (71f0 <spi_read_reg+0x1e0>)
    7180:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    7182:	4a23      	ldr	r2, [pc, #140]	; (7210 <spi_read_reg+0x200>)
    7184:	4915      	ldr	r1, [pc, #84]	; (71dc <spi_read_reg+0x1cc>)
    7186:	4b16      	ldr	r3, [pc, #88]	; (71e0 <spi_read_reg+0x1d0>)
    7188:	0018      	movs	r0, r3
    718a:	4b16      	ldr	r3, [pc, #88]	; (71e4 <spi_read_reg+0x1d4>)
    718c:	4798      	blx	r3
    718e:	230f      	movs	r3, #15
    7190:	18fb      	adds	r3, r7, r3
    7192:	7819      	ldrb	r1, [r3, #0]
    7194:	687a      	ldr	r2, [r7, #4]
    7196:	4b1f      	ldr	r3, [pc, #124]	; (7214 <spi_read_reg+0x204>)
    7198:	0018      	movs	r0, r3
    719a:	4b12      	ldr	r3, [pc, #72]	; (71e4 <spi_read_reg+0x1d4>)
    719c:	4798      	blx	r3
    719e:	200d      	movs	r0, #13
    71a0:	4b12      	ldr	r3, [pc, #72]	; (71ec <spi_read_reg+0x1dc>)
    71a2:	4798      	blx	r3
		nm_bsp_sleep(1);
    71a4:	2001      	movs	r0, #1
    71a6:	4b19      	ldr	r3, [pc, #100]	; (720c <spi_read_reg+0x1fc>)
    71a8:	4798      	blx	r3
		retry--;
    71aa:	230f      	movs	r3, #15
    71ac:	18fb      	adds	r3, r7, r3
    71ae:	781a      	ldrb	r2, [r3, #0]
    71b0:	230f      	movs	r3, #15
    71b2:	18fb      	adds	r3, r7, r3
    71b4:	3a01      	subs	r2, #1
    71b6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    71b8:	230f      	movs	r3, #15
    71ba:	18fb      	adds	r3, r7, r3
    71bc:	781b      	ldrb	r3, [r3, #0]
    71be:	2b00      	cmp	r3, #0
    71c0:	d000      	beq.n	71c4 <spi_read_reg+0x1b4>
    71c2:	e73a      	b.n	703a <spi_read_reg+0x2a>
	}
		
	return result;
    71c4:	230e      	movs	r3, #14
    71c6:	18fb      	adds	r3, r7, r3
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	b25b      	sxtb	r3, r3
}
    71cc:	0018      	movs	r0, r3
    71ce:	46bd      	mov	sp, r7
    71d0:	b004      	add	sp, #16
    71d2:	bdb0      	pop	{r4, r5, r7, pc}
    71d4:	0000633d 	.word	0x0000633d
    71d8:	00000417 	.word	0x00000417
    71dc:	00019558 	.word	0x00019558
    71e0:	00018f60 	.word	0x00018f60
    71e4:	00012f71 	.word	0x00012f71
    71e8:	000192bc 	.word	0x000192bc
    71ec:	00012fa5 	.word	0x00012fa5
    71f0:	00006781 	.word	0x00006781
    71f4:	0000041d 	.word	0x0000041d
    71f8:	000192e8 	.word	0x000192e8
    71fc:	000068b9 	.word	0x000068b9
    7200:	00000424 	.word	0x00000424
    7204:	0001931c 	.word	0x0001931c
    7208:	0001308d 	.word	0x0001308d
    720c:	0000327d 	.word	0x0000327d
    7210:	0000043c 	.word	0x0000043c
    7214:	0001933c 	.word	0x0001933c

00007218 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    7218:	b5b0      	push	{r4, r5, r7, lr}
    721a:	b088      	sub	sp, #32
    721c:	af02      	add	r7, sp, #8
    721e:	60f8      	str	r0, [r7, #12]
    7220:	60b9      	str	r1, [r7, #8]
    7222:	1dbb      	adds	r3, r7, #6
    7224:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    7226:	2314      	movs	r3, #20
    7228:	18fb      	adds	r3, r7, r3
    722a:	22c8      	movs	r2, #200	; 0xc8
    722c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    722e:	2316      	movs	r3, #22
    7230:	18fb      	adds	r3, r7, r3
    7232:	220a      	movs	r2, #10
    7234:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    7236:	2315      	movs	r3, #21
    7238:	18fb      	adds	r3, r7, r3
    723a:	2200      	movs	r2, #0
    723c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    723e:	1dbb      	adds	r3, r7, #6
    7240:	881b      	ldrh	r3, [r3, #0]
    7242:	2b01      	cmp	r3, #1
    7244:	d106      	bne.n	7254 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    7246:	1dbb      	adds	r3, r7, #6
    7248:	2202      	movs	r2, #2
    724a:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    724c:	2315      	movs	r3, #21
    724e:	18fb      	adds	r3, r7, r3
    7250:	2201      	movs	r2, #1
    7252:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    7254:	1dbb      	adds	r3, r7, #6
    7256:	881a      	ldrh	r2, [r3, #0]
    7258:	2317      	movs	r3, #23
    725a:	18fc      	adds	r4, r7, r3
    725c:	68f9      	ldr	r1, [r7, #12]
    725e:	2314      	movs	r3, #20
    7260:	18fb      	adds	r3, r7, r3
    7262:	7818      	ldrb	r0, [r3, #0]
    7264:	2300      	movs	r3, #0
    7266:	9300      	str	r3, [sp, #0]
    7268:	0013      	movs	r3, r2
    726a:	2200      	movs	r2, #0
    726c:	4d56      	ldr	r5, [pc, #344]	; (73c8 <nm_spi_read+0x1b0>)
    726e:	47a8      	blx	r5
    7270:	0003      	movs	r3, r0
    7272:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7274:	2317      	movs	r3, #23
    7276:	18fb      	adds	r3, r7, r3
    7278:	781b      	ldrb	r3, [r3, #0]
    727a:	b25b      	sxtb	r3, r3
    727c:	2b01      	cmp	r3, #1
    727e:	d00f      	beq.n	72a0 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    7280:	4a52      	ldr	r2, [pc, #328]	; (73cc <nm_spi_read+0x1b4>)
    7282:	4953      	ldr	r1, [pc, #332]	; (73d0 <nm_spi_read+0x1b8>)
    7284:	4b53      	ldr	r3, [pc, #332]	; (73d4 <nm_spi_read+0x1bc>)
    7286:	0018      	movs	r0, r3
    7288:	4b53      	ldr	r3, [pc, #332]	; (73d8 <nm_spi_read+0x1c0>)
    728a:	4798      	blx	r3
    728c:	68fa      	ldr	r2, [r7, #12]
    728e:	4b53      	ldr	r3, [pc, #332]	; (73dc <nm_spi_read+0x1c4>)
    7290:	0011      	movs	r1, r2
    7292:	0018      	movs	r0, r3
    7294:	4b50      	ldr	r3, [pc, #320]	; (73d8 <nm_spi_read+0x1c0>)
    7296:	4798      	blx	r3
    7298:	200d      	movs	r0, #13
    729a:	4b51      	ldr	r3, [pc, #324]	; (73e0 <nm_spi_read+0x1c8>)
    729c:	4798      	blx	r3
		goto _FAIL_;
    729e:	e055      	b.n	734c <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    72a0:	2317      	movs	r3, #23
    72a2:	18fc      	adds	r4, r7, r3
    72a4:	2314      	movs	r3, #20
    72a6:	18fb      	adds	r3, r7, r3
    72a8:	781b      	ldrb	r3, [r3, #0]
    72aa:	0018      	movs	r0, r3
    72ac:	4b4d      	ldr	r3, [pc, #308]	; (73e4 <nm_spi_read+0x1cc>)
    72ae:	4798      	blx	r3
    72b0:	0003      	movs	r3, r0
    72b2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    72b4:	2317      	movs	r3, #23
    72b6:	18fb      	adds	r3, r7, r3
    72b8:	781b      	ldrb	r3, [r3, #0]
    72ba:	b25b      	sxtb	r3, r3
    72bc:	2b01      	cmp	r3, #1
    72be:	d00f      	beq.n	72e0 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    72c0:	4a49      	ldr	r2, [pc, #292]	; (73e8 <nm_spi_read+0x1d0>)
    72c2:	4943      	ldr	r1, [pc, #268]	; (73d0 <nm_spi_read+0x1b8>)
    72c4:	4b43      	ldr	r3, [pc, #268]	; (73d4 <nm_spi_read+0x1bc>)
    72c6:	0018      	movs	r0, r3
    72c8:	4b43      	ldr	r3, [pc, #268]	; (73d8 <nm_spi_read+0x1c0>)
    72ca:	4798      	blx	r3
    72cc:	68fa      	ldr	r2, [r7, #12]
    72ce:	4b47      	ldr	r3, [pc, #284]	; (73ec <nm_spi_read+0x1d4>)
    72d0:	0011      	movs	r1, r2
    72d2:	0018      	movs	r0, r3
    72d4:	4b40      	ldr	r3, [pc, #256]	; (73d8 <nm_spi_read+0x1c0>)
    72d6:	4798      	blx	r3
    72d8:	200d      	movs	r0, #13
    72da:	4b41      	ldr	r3, [pc, #260]	; (73e0 <nm_spi_read+0x1c8>)
    72dc:	4798      	blx	r3
		goto _FAIL_;
    72de:	e035      	b.n	734c <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    72e0:	2315      	movs	r3, #21
    72e2:	18fb      	adds	r3, r7, r3
    72e4:	781b      	ldrb	r3, [r3, #0]
    72e6:	2b00      	cmp	r3, #0
    72e8:	d011      	beq.n	730e <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    72ea:	2317      	movs	r3, #23
    72ec:	18fc      	adds	r4, r7, r3
    72ee:	1dbb      	adds	r3, r7, #6
    72f0:	8819      	ldrh	r1, [r3, #0]
    72f2:	2310      	movs	r3, #16
    72f4:	18fb      	adds	r3, r7, r3
    72f6:	2200      	movs	r2, #0
    72f8:	0018      	movs	r0, r3
    72fa:	4b3d      	ldr	r3, [pc, #244]	; (73f0 <nm_spi_read+0x1d8>)
    72fc:	4798      	blx	r3
    72fe:	0003      	movs	r3, r0
    7300:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    7302:	2310      	movs	r3, #16
    7304:	18fb      	adds	r3, r7, r3
    7306:	781a      	ldrb	r2, [r3, #0]
    7308:	68bb      	ldr	r3, [r7, #8]
    730a:	701a      	strb	r2, [r3, #0]
    730c:	e00a      	b.n	7324 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    730e:	2317      	movs	r3, #23
    7310:	18fc      	adds	r4, r7, r3
    7312:	1dbb      	adds	r3, r7, #6
    7314:	8819      	ldrh	r1, [r3, #0]
    7316:	68bb      	ldr	r3, [r7, #8]
    7318:	2200      	movs	r2, #0
    731a:	0018      	movs	r0, r3
    731c:	4b34      	ldr	r3, [pc, #208]	; (73f0 <nm_spi_read+0x1d8>)
    731e:	4798      	blx	r3
    7320:	0003      	movs	r3, r0
    7322:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    7324:	2317      	movs	r3, #23
    7326:	18fb      	adds	r3, r7, r3
    7328:	781b      	ldrb	r3, [r3, #0]
    732a:	b25b      	sxtb	r3, r3
    732c:	2b01      	cmp	r3, #1
    732e:	d00d      	beq.n	734c <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    7330:	4a30      	ldr	r2, [pc, #192]	; (73f4 <nm_spi_read+0x1dc>)
    7332:	4927      	ldr	r1, [pc, #156]	; (73d0 <nm_spi_read+0x1b8>)
    7334:	4b27      	ldr	r3, [pc, #156]	; (73d4 <nm_spi_read+0x1bc>)
    7336:	0018      	movs	r0, r3
    7338:	4b27      	ldr	r3, [pc, #156]	; (73d8 <nm_spi_read+0x1c0>)
    733a:	4798      	blx	r3
    733c:	4b2e      	ldr	r3, [pc, #184]	; (73f8 <nm_spi_read+0x1e0>)
    733e:	0018      	movs	r0, r3
    7340:	4b2e      	ldr	r3, [pc, #184]	; (73fc <nm_spi_read+0x1e4>)
    7342:	4798      	blx	r3
    7344:	200d      	movs	r0, #13
    7346:	4b26      	ldr	r3, [pc, #152]	; (73e0 <nm_spi_read+0x1c8>)
    7348:	4798      	blx	r3
		goto _FAIL_;
    734a:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    734c:	2317      	movs	r3, #23
    734e:	18fb      	adds	r3, r7, r3
    7350:	781b      	ldrb	r3, [r3, #0]
    7352:	b25b      	sxtb	r3, r3
    7354:	2b01      	cmp	r3, #1
    7356:	d02f      	beq.n	73b8 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    7358:	2001      	movs	r0, #1
    735a:	4b29      	ldr	r3, [pc, #164]	; (7400 <nm_spi_read+0x1e8>)
    735c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    735e:	2300      	movs	r3, #0
    7360:	9300      	str	r3, [sp, #0]
    7362:	2300      	movs	r3, #0
    7364:	2200      	movs	r2, #0
    7366:	2100      	movs	r1, #0
    7368:	20cf      	movs	r0, #207	; 0xcf
    736a:	4c17      	ldr	r4, [pc, #92]	; (73c8 <nm_spi_read+0x1b0>)
    736c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    736e:	20cf      	movs	r0, #207	; 0xcf
    7370:	4b1c      	ldr	r3, [pc, #112]	; (73e4 <nm_spi_read+0x1cc>)
    7372:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    7374:	4a23      	ldr	r2, [pc, #140]	; (7404 <nm_spi_read+0x1ec>)
    7376:	4916      	ldr	r1, [pc, #88]	; (73d0 <nm_spi_read+0x1b8>)
    7378:	4b16      	ldr	r3, [pc, #88]	; (73d4 <nm_spi_read+0x1bc>)
    737a:	0018      	movs	r0, r3
    737c:	4b16      	ldr	r3, [pc, #88]	; (73d8 <nm_spi_read+0x1c0>)
    737e:	4798      	blx	r3
    7380:	2316      	movs	r3, #22
    7382:	18fb      	adds	r3, r7, r3
    7384:	7819      	ldrb	r1, [r3, #0]
    7386:	1dbb      	adds	r3, r7, #6
    7388:	881b      	ldrh	r3, [r3, #0]
    738a:	68fa      	ldr	r2, [r7, #12]
    738c:	481e      	ldr	r0, [pc, #120]	; (7408 <nm_spi_read+0x1f0>)
    738e:	4c12      	ldr	r4, [pc, #72]	; (73d8 <nm_spi_read+0x1c0>)
    7390:	47a0      	blx	r4
    7392:	200d      	movs	r0, #13
    7394:	4b12      	ldr	r3, [pc, #72]	; (73e0 <nm_spi_read+0x1c8>)
    7396:	4798      	blx	r3
		nm_bsp_sleep(1);
    7398:	2001      	movs	r0, #1
    739a:	4b19      	ldr	r3, [pc, #100]	; (7400 <nm_spi_read+0x1e8>)
    739c:	4798      	blx	r3
		retry--;
    739e:	2316      	movs	r3, #22
    73a0:	18fb      	adds	r3, r7, r3
    73a2:	781a      	ldrb	r2, [r3, #0]
    73a4:	2316      	movs	r3, #22
    73a6:	18fb      	adds	r3, r7, r3
    73a8:	3a01      	subs	r2, #1
    73aa:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    73ac:	2316      	movs	r3, #22
    73ae:	18fb      	adds	r3, r7, r3
    73b0:	781b      	ldrb	r3, [r3, #0]
    73b2:	2b00      	cmp	r3, #0
    73b4:	d000      	beq.n	73b8 <nm_spi_read+0x1a0>
    73b6:	e742      	b.n	723e <nm_spi_read+0x26>
	}

	return result;
    73b8:	2317      	movs	r3, #23
    73ba:	18fb      	adds	r3, r7, r3
    73bc:	781b      	ldrb	r3, [r3, #0]
    73be:	b25b      	sxtb	r3, r3
}
    73c0:	0018      	movs	r0, r3
    73c2:	46bd      	mov	sp, r7
    73c4:	b006      	add	sp, #24
    73c6:	bdb0      	pop	{r4, r5, r7, pc}
    73c8:	0000633d 	.word	0x0000633d
    73cc:	0000045d 	.word	0x0000045d
    73d0:	00019568 	.word	0x00019568
    73d4:	00018f60 	.word	0x00018f60
    73d8:	00012f71 	.word	0x00012f71
    73dc:	00019354 	.word	0x00019354
    73e0:	00012fa5 	.word	0x00012fa5
    73e4:	00006781 	.word	0x00006781
    73e8:	00000463 	.word	0x00000463
    73ec:	00019384 	.word	0x00019384
    73f0:	000068b9 	.word	0x000068b9
    73f4:	00000473 	.word	0x00000473
    73f8:	000193bc 	.word	0x000193bc
    73fc:	0001308d 	.word	0x0001308d
    7400:	0000327d 	.word	0x0000327d
    7404:	00000484 	.word	0x00000484
    7408:	000192a0 	.word	0x000192a0

0000740c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    740c:	b580      	push	{r7, lr}
    740e:	b082      	sub	sp, #8
    7410:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    7412:	4b0c      	ldr	r3, [pc, #48]	; (7444 <spi_init_pkt_sz+0x38>)
    7414:	0018      	movs	r0, r3
    7416:	4b0c      	ldr	r3, [pc, #48]	; (7448 <spi_init_pkt_sz+0x3c>)
    7418:	4798      	blx	r3
    741a:	0003      	movs	r3, r0
    741c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    741e:	687b      	ldr	r3, [r7, #4]
    7420:	2270      	movs	r2, #112	; 0x70
    7422:	4393      	bics	r3, r2
    7424:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    7426:	687b      	ldr	r3, [r7, #4]
    7428:	2250      	movs	r2, #80	; 0x50
    742a:	4313      	orrs	r3, r2
    742c:	607b      	str	r3, [r7, #4]
    742e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    7430:	687b      	ldr	r3, [r7, #4]
    7432:	4a04      	ldr	r2, [pc, #16]	; (7444 <spi_init_pkt_sz+0x38>)
    7434:	0019      	movs	r1, r3
    7436:	0010      	movs	r0, r2
    7438:	4b04      	ldr	r3, [pc, #16]	; (744c <spi_init_pkt_sz+0x40>)
    743a:	4798      	blx	r3
}
    743c:	46c0      	nop			; (mov r8, r8)
    743e:	46bd      	mov	sp, r7
    7440:	b002      	add	sp, #8
    7442:	bd80      	pop	{r7, pc}
    7444:	0000e824 	.word	0x0000e824
    7448:	000075e5 	.word	0x000075e5
    744c:	00007659 	.word	0x00007659

00007450 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    7450:	b590      	push	{r4, r7, lr}
    7452:	b083      	sub	sp, #12
    7454:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7456:	2300      	movs	r3, #0
    7458:	9300      	str	r3, [sp, #0]
    745a:	2300      	movs	r3, #0
    745c:	2200      	movs	r2, #0
    745e:	2100      	movs	r1, #0
    7460:	20cf      	movs	r0, #207	; 0xcf
    7462:	4c05      	ldr	r4, [pc, #20]	; (7478 <nm_spi_reset+0x28>)
    7464:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    7466:	20cf      	movs	r0, #207	; 0xcf
    7468:	4b04      	ldr	r3, [pc, #16]	; (747c <nm_spi_reset+0x2c>)
    746a:	4798      	blx	r3
	return M2M_SUCCESS;
    746c:	2300      	movs	r3, #0
}
    746e:	0018      	movs	r0, r3
    7470:	46bd      	mov	sp, r7
    7472:	b001      	add	sp, #4
    7474:	bd90      	pop	{r4, r7, pc}
    7476:	46c0      	nop			; (mov r8, r8)
    7478:	0000633d 	.word	0x0000633d
    747c:	00006781 	.word	0x00006781

00007480 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    7480:	b580      	push	{r7, lr}
    7482:	b082      	sub	sp, #8
    7484:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    7486:	2300      	movs	r3, #0
    7488:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    748a:	4b3e      	ldr	r3, [pc, #248]	; (7584 <nm_spi_init+0x104>)
    748c:	2200      	movs	r2, #0
    748e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    7490:	003b      	movs	r3, r7
    7492:	4a3d      	ldr	r2, [pc, #244]	; (7588 <nm_spi_init+0x108>)
    7494:	0019      	movs	r1, r3
    7496:	0010      	movs	r0, r2
    7498:	4b3c      	ldr	r3, [pc, #240]	; (758c <nm_spi_init+0x10c>)
    749a:	4798      	blx	r3
    749c:	1e03      	subs	r3, r0, #0
    749e:	d126      	bne.n	74ee <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    74a0:	4b38      	ldr	r3, [pc, #224]	; (7584 <nm_spi_init+0x104>)
    74a2:	2201      	movs	r2, #1
    74a4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    74a6:	4a3a      	ldr	r2, [pc, #232]	; (7590 <nm_spi_init+0x110>)
    74a8:	493a      	ldr	r1, [pc, #232]	; (7594 <nm_spi_init+0x114>)
    74aa:	4b3b      	ldr	r3, [pc, #236]	; (7598 <nm_spi_init+0x118>)
    74ac:	0018      	movs	r0, r3
    74ae:	4b3b      	ldr	r3, [pc, #236]	; (759c <nm_spi_init+0x11c>)
    74b0:	4798      	blx	r3
    74b2:	4b3b      	ldr	r3, [pc, #236]	; (75a0 <nm_spi_init+0x120>)
    74b4:	0018      	movs	r0, r3
    74b6:	4b3b      	ldr	r3, [pc, #236]	; (75a4 <nm_spi_init+0x124>)
    74b8:	4798      	blx	r3
    74ba:	200d      	movs	r0, #13
    74bc:	4b3a      	ldr	r3, [pc, #232]	; (75a8 <nm_spi_init+0x128>)
    74be:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    74c0:	003b      	movs	r3, r7
    74c2:	4a31      	ldr	r2, [pc, #196]	; (7588 <nm_spi_init+0x108>)
    74c4:	0019      	movs	r1, r3
    74c6:	0010      	movs	r0, r2
    74c8:	4b30      	ldr	r3, [pc, #192]	; (758c <nm_spi_init+0x10c>)
    74ca:	4798      	blx	r3
    74cc:	1e03      	subs	r3, r0, #0
    74ce:	d10e      	bne.n	74ee <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    74d0:	4a36      	ldr	r2, [pc, #216]	; (75ac <nm_spi_init+0x12c>)
    74d2:	4930      	ldr	r1, [pc, #192]	; (7594 <nm_spi_init+0x114>)
    74d4:	4b30      	ldr	r3, [pc, #192]	; (7598 <nm_spi_init+0x118>)
    74d6:	0018      	movs	r0, r3
    74d8:	4b30      	ldr	r3, [pc, #192]	; (759c <nm_spi_init+0x11c>)
    74da:	4798      	blx	r3
    74dc:	4b34      	ldr	r3, [pc, #208]	; (75b0 <nm_spi_init+0x130>)
    74de:	0018      	movs	r0, r3
    74e0:	4b30      	ldr	r3, [pc, #192]	; (75a4 <nm_spi_init+0x124>)
    74e2:	4798      	blx	r3
    74e4:	200d      	movs	r0, #13
    74e6:	4b30      	ldr	r3, [pc, #192]	; (75a8 <nm_spi_init+0x128>)
    74e8:	4798      	blx	r3
			return 0;
    74ea:	2300      	movs	r3, #0
    74ec:	e045      	b.n	757a <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    74ee:	4b25      	ldr	r3, [pc, #148]	; (7584 <nm_spi_init+0x104>)
    74f0:	781b      	ldrb	r3, [r3, #0]
    74f2:	2b00      	cmp	r3, #0
    74f4:	d125      	bne.n	7542 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    74f6:	683b      	ldr	r3, [r7, #0]
    74f8:	220c      	movs	r2, #12
    74fa:	4393      	bics	r3, r2
    74fc:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    74fe:	683b      	ldr	r3, [r7, #0]
    7500:	2270      	movs	r2, #112	; 0x70
    7502:	4393      	bics	r3, r2
    7504:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    7506:	683b      	ldr	r3, [r7, #0]
    7508:	2250      	movs	r2, #80	; 0x50
    750a:	4313      	orrs	r3, r2
    750c:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    750e:	683b      	ldr	r3, [r7, #0]
    7510:	4a1d      	ldr	r2, [pc, #116]	; (7588 <nm_spi_init+0x108>)
    7512:	0019      	movs	r1, r3
    7514:	0010      	movs	r0, r2
    7516:	4b27      	ldr	r3, [pc, #156]	; (75b4 <nm_spi_init+0x134>)
    7518:	4798      	blx	r3
    751a:	1e03      	subs	r3, r0, #0
    751c:	d10e      	bne.n	753c <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    751e:	4a26      	ldr	r2, [pc, #152]	; (75b8 <nm_spi_init+0x138>)
    7520:	491c      	ldr	r1, [pc, #112]	; (7594 <nm_spi_init+0x114>)
    7522:	4b1d      	ldr	r3, [pc, #116]	; (7598 <nm_spi_init+0x118>)
    7524:	0018      	movs	r0, r3
    7526:	4b1d      	ldr	r3, [pc, #116]	; (759c <nm_spi_init+0x11c>)
    7528:	4798      	blx	r3
    752a:	4b24      	ldr	r3, [pc, #144]	; (75bc <nm_spi_init+0x13c>)
    752c:	0018      	movs	r0, r3
    752e:	4b1d      	ldr	r3, [pc, #116]	; (75a4 <nm_spi_init+0x124>)
    7530:	4798      	blx	r3
    7532:	200d      	movs	r0, #13
    7534:	4b1c      	ldr	r3, [pc, #112]	; (75a8 <nm_spi_init+0x128>)
    7536:	4798      	blx	r3
			return 0;
    7538:	2300      	movs	r3, #0
    753a:	e01e      	b.n	757a <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    753c:	4b11      	ldr	r3, [pc, #68]	; (7584 <nm_spi_init+0x104>)
    753e:	2201      	movs	r2, #1
    7540:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    7542:	1d3a      	adds	r2, r7, #4
    7544:	2380      	movs	r3, #128	; 0x80
    7546:	015b      	lsls	r3, r3, #5
    7548:	0011      	movs	r1, r2
    754a:	0018      	movs	r0, r3
    754c:	4b0f      	ldr	r3, [pc, #60]	; (758c <nm_spi_init+0x10c>)
    754e:	4798      	blx	r3
    7550:	1e03      	subs	r3, r0, #0
    7552:	d10f      	bne.n	7574 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    7554:	4a1a      	ldr	r2, [pc, #104]	; (75c0 <nm_spi_init+0x140>)
    7556:	490f      	ldr	r1, [pc, #60]	; (7594 <nm_spi_init+0x114>)
    7558:	4b0f      	ldr	r3, [pc, #60]	; (7598 <nm_spi_init+0x118>)
    755a:	0018      	movs	r0, r3
    755c:	4b0f      	ldr	r3, [pc, #60]	; (759c <nm_spi_init+0x11c>)
    755e:	4798      	blx	r3
    7560:	4b18      	ldr	r3, [pc, #96]	; (75c4 <nm_spi_init+0x144>)
    7562:	0018      	movs	r0, r3
    7564:	4b0f      	ldr	r3, [pc, #60]	; (75a4 <nm_spi_init+0x124>)
    7566:	4798      	blx	r3
    7568:	200d      	movs	r0, #13
    756a:	4b0f      	ldr	r3, [pc, #60]	; (75a8 <nm_spi_init+0x128>)
    756c:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    756e:	2306      	movs	r3, #6
    7570:	425b      	negs	r3, r3
    7572:	e002      	b.n	757a <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    7574:	4b14      	ldr	r3, [pc, #80]	; (75c8 <nm_spi_init+0x148>)
    7576:	4798      	blx	r3


	return M2M_SUCCESS;
    7578:	2300      	movs	r3, #0
}
    757a:	0018      	movs	r0, r3
    757c:	46bd      	mov	sp, r7
    757e:	b002      	add	sp, #8
    7580:	bd80      	pop	{r7, pc}
    7582:	46c0      	nop			; (mov r8, r8)
    7584:	2000022c 	.word	0x2000022c
    7588:	0000e824 	.word	0x0000e824
    758c:	00007011 	.word	0x00007011
    7590:	000004c7 	.word	0x000004c7
    7594:	00019574 	.word	0x00019574
    7598:	00018f60 	.word	0x00018f60
    759c:	00012f71 	.word	0x00012f71
    75a0:	000193e4 	.word	0x000193e4
    75a4:	0001308d 	.word	0x0001308d
    75a8:	00012fa5 	.word	0x00012fa5
    75ac:	000004ca 	.word	0x000004ca
    75b0:	00019434 	.word	0x00019434
    75b4:	00006c91 	.word	0x00006c91
    75b8:	000004d4 	.word	0x000004d4
    75bc:	00019460 	.word	0x00019460
    75c0:	000004de 	.word	0x000004de
    75c4:	00019494 	.word	0x00019494
    75c8:	0000740d 	.word	0x0000740d

000075cc <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    75cc:	b580      	push	{r7, lr}
    75ce:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    75d0:	4b03      	ldr	r3, [pc, #12]	; (75e0 <nm_spi_deinit+0x14>)
    75d2:	2200      	movs	r2, #0
    75d4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    75d6:	2300      	movs	r3, #0
}
    75d8:	0018      	movs	r0, r3
    75da:	46bd      	mov	sp, r7
    75dc:	bd80      	pop	{r7, pc}
    75de:	46c0      	nop			; (mov r8, r8)
    75e0:	2000022c 	.word	0x2000022c

000075e4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    75e4:	b580      	push	{r7, lr}
    75e6:	b084      	sub	sp, #16
    75e8:	af00      	add	r7, sp, #0
    75ea:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    75ec:	230c      	movs	r3, #12
    75ee:	18fa      	adds	r2, r7, r3
    75f0:	687b      	ldr	r3, [r7, #4]
    75f2:	0011      	movs	r1, r2
    75f4:	0018      	movs	r0, r3
    75f6:	4b03      	ldr	r3, [pc, #12]	; (7604 <nm_spi_read_reg+0x20>)
    75f8:	4798      	blx	r3

	return u32Val;
    75fa:	68fb      	ldr	r3, [r7, #12]
}
    75fc:	0018      	movs	r0, r3
    75fe:	46bd      	mov	sp, r7
    7600:	b004      	add	sp, #16
    7602:	bd80      	pop	{r7, pc}
    7604:	00007011 	.word	0x00007011

00007608 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    7608:	b590      	push	{r4, r7, lr}
    760a:	b085      	sub	sp, #20
    760c:	af00      	add	r7, sp, #0
    760e:	6078      	str	r0, [r7, #4]
    7610:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    7612:	230f      	movs	r3, #15
    7614:	18fc      	adds	r4, r7, r3
    7616:	683a      	ldr	r2, [r7, #0]
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	0011      	movs	r1, r2
    761c:	0018      	movs	r0, r3
    761e:	4b0d      	ldr	r3, [pc, #52]	; (7654 <nm_spi_read_reg_with_ret+0x4c>)
    7620:	4798      	blx	r3
    7622:	0003      	movs	r3, r0
    7624:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7626:	230f      	movs	r3, #15
    7628:	18fb      	adds	r3, r7, r3
    762a:	781b      	ldrb	r3, [r3, #0]
    762c:	b25b      	sxtb	r3, r3
    762e:	2b01      	cmp	r3, #1
    7630:	d104      	bne.n	763c <nm_spi_read_reg_with_ret+0x34>
    7632:	230f      	movs	r3, #15
    7634:	18fb      	adds	r3, r7, r3
    7636:	2200      	movs	r2, #0
    7638:	701a      	strb	r2, [r3, #0]
    763a:	e003      	b.n	7644 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    763c:	230f      	movs	r3, #15
    763e:	18fb      	adds	r3, r7, r3
    7640:	22fa      	movs	r2, #250	; 0xfa
    7642:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7644:	230f      	movs	r3, #15
    7646:	18fb      	adds	r3, r7, r3
    7648:	781b      	ldrb	r3, [r3, #0]
    764a:	b25b      	sxtb	r3, r3
}
    764c:	0018      	movs	r0, r3
    764e:	46bd      	mov	sp, r7
    7650:	b005      	add	sp, #20
    7652:	bd90      	pop	{r4, r7, pc}
    7654:	00007011 	.word	0x00007011

00007658 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    7658:	b590      	push	{r4, r7, lr}
    765a:	b085      	sub	sp, #20
    765c:	af00      	add	r7, sp, #0
    765e:	6078      	str	r0, [r7, #4]
    7660:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    7662:	230f      	movs	r3, #15
    7664:	18fc      	adds	r4, r7, r3
    7666:	683a      	ldr	r2, [r7, #0]
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	0011      	movs	r1, r2
    766c:	0018      	movs	r0, r3
    766e:	4b0d      	ldr	r3, [pc, #52]	; (76a4 <nm_spi_write_reg+0x4c>)
    7670:	4798      	blx	r3
    7672:	0003      	movs	r3, r0
    7674:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7676:	230f      	movs	r3, #15
    7678:	18fb      	adds	r3, r7, r3
    767a:	781b      	ldrb	r3, [r3, #0]
    767c:	b25b      	sxtb	r3, r3
    767e:	2b01      	cmp	r3, #1
    7680:	d104      	bne.n	768c <nm_spi_write_reg+0x34>
    7682:	230f      	movs	r3, #15
    7684:	18fb      	adds	r3, r7, r3
    7686:	2200      	movs	r2, #0
    7688:	701a      	strb	r2, [r3, #0]
    768a:	e003      	b.n	7694 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    768c:	230f      	movs	r3, #15
    768e:	18fb      	adds	r3, r7, r3
    7690:	22fa      	movs	r2, #250	; 0xfa
    7692:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7694:	230f      	movs	r3, #15
    7696:	18fb      	adds	r3, r7, r3
    7698:	781b      	ldrb	r3, [r3, #0]
    769a:	b25b      	sxtb	r3, r3
}
    769c:	0018      	movs	r0, r3
    769e:	46bd      	mov	sp, r7
    76a0:	b005      	add	sp, #20
    76a2:	bd90      	pop	{r4, r7, pc}
    76a4:	00006c91 	.word	0x00006c91

000076a8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    76a8:	b590      	push	{r4, r7, lr}
    76aa:	b087      	sub	sp, #28
    76ac:	af00      	add	r7, sp, #0
    76ae:	60f8      	str	r0, [r7, #12]
    76b0:	60b9      	str	r1, [r7, #8]
    76b2:	1dbb      	adds	r3, r7, #6
    76b4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    76b6:	2317      	movs	r3, #23
    76b8:	18fc      	adds	r4, r7, r3
    76ba:	1dbb      	adds	r3, r7, #6
    76bc:	881a      	ldrh	r2, [r3, #0]
    76be:	68b9      	ldr	r1, [r7, #8]
    76c0:	68fb      	ldr	r3, [r7, #12]
    76c2:	0018      	movs	r0, r3
    76c4:	4b0d      	ldr	r3, [pc, #52]	; (76fc <nm_spi_read_block+0x54>)
    76c6:	4798      	blx	r3
    76c8:	0003      	movs	r3, r0
    76ca:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    76cc:	2317      	movs	r3, #23
    76ce:	18fb      	adds	r3, r7, r3
    76d0:	781b      	ldrb	r3, [r3, #0]
    76d2:	b25b      	sxtb	r3, r3
    76d4:	2b01      	cmp	r3, #1
    76d6:	d104      	bne.n	76e2 <nm_spi_read_block+0x3a>
    76d8:	2317      	movs	r3, #23
    76da:	18fb      	adds	r3, r7, r3
    76dc:	2200      	movs	r2, #0
    76de:	701a      	strb	r2, [r3, #0]
    76e0:	e003      	b.n	76ea <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    76e2:	2317      	movs	r3, #23
    76e4:	18fb      	adds	r3, r7, r3
    76e6:	22fa      	movs	r2, #250	; 0xfa
    76e8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    76ea:	2317      	movs	r3, #23
    76ec:	18fb      	adds	r3, r7, r3
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	b25b      	sxtb	r3, r3
}
    76f2:	0018      	movs	r0, r3
    76f4:	46bd      	mov	sp, r7
    76f6:	b007      	add	sp, #28
    76f8:	bd90      	pop	{r4, r7, pc}
    76fa:	46c0      	nop			; (mov r8, r8)
    76fc:	00007219 	.word	0x00007219

00007700 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    7700:	b590      	push	{r4, r7, lr}
    7702:	b087      	sub	sp, #28
    7704:	af00      	add	r7, sp, #0
    7706:	60f8      	str	r0, [r7, #12]
    7708:	60b9      	str	r1, [r7, #8]
    770a:	1dbb      	adds	r3, r7, #6
    770c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    770e:	2317      	movs	r3, #23
    7710:	18fc      	adds	r4, r7, r3
    7712:	1dbb      	adds	r3, r7, #6
    7714:	881a      	ldrh	r2, [r3, #0]
    7716:	68b9      	ldr	r1, [r7, #8]
    7718:	68fb      	ldr	r3, [r7, #12]
    771a:	0018      	movs	r0, r3
    771c:	4b0d      	ldr	r3, [pc, #52]	; (7754 <nm_spi_write_block+0x54>)
    771e:	4798      	blx	r3
    7720:	0003      	movs	r3, r0
    7722:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7724:	2317      	movs	r3, #23
    7726:	18fb      	adds	r3, r7, r3
    7728:	781b      	ldrb	r3, [r3, #0]
    772a:	b25b      	sxtb	r3, r3
    772c:	2b01      	cmp	r3, #1
    772e:	d104      	bne.n	773a <nm_spi_write_block+0x3a>
    7730:	2317      	movs	r3, #23
    7732:	18fb      	adds	r3, r7, r3
    7734:	2200      	movs	r2, #0
    7736:	701a      	strb	r2, [r3, #0]
    7738:	e003      	b.n	7742 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    773a:	2317      	movs	r3, #23
    773c:	18fb      	adds	r3, r7, r3
    773e:	22fa      	movs	r2, #250	; 0xfa
    7740:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7742:	2317      	movs	r3, #23
    7744:	18fb      	adds	r3, r7, r3
    7746:	781b      	ldrb	r3, [r3, #0]
    7748:	b25b      	sxtb	r3, r3
}
    774a:	0018      	movs	r0, r3
    774c:	46bd      	mov	sp, r7
    774e:	b007      	add	sp, #28
    7750:	bd90      	pop	{r4, r7, pc}
    7752:	46c0      	nop			; (mov r8, r8)
    7754:	00006e1d 	.word	0x00006e1d

00007758 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    7758:	b590      	push	{r4, r7, lr}
    775a:	b089      	sub	sp, #36	; 0x24
    775c:	af00      	add	r7, sp, #0
    775e:	60b9      	str	r1, [r7, #8]
    7760:	0011      	movs	r1, r2
    7762:	607b      	str	r3, [r7, #4]
    7764:	230f      	movs	r3, #15
    7766:	18fb      	adds	r3, r7, r3
    7768:	1c02      	adds	r2, r0, #0
    776a:	701a      	strb	r2, [r3, #0]
    776c:	230e      	movs	r3, #14
    776e:	18fb      	adds	r3, r7, r3
    7770:	1c0a      	adds	r2, r1, #0
    7772:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    7774:	2330      	movs	r3, #48	; 0x30
    7776:	18fb      	adds	r3, r7, r3
    7778:	881b      	ldrh	r3, [r3, #0]
    777a:	2b00      	cmp	r3, #0
    777c:	d100      	bne.n	7780 <Socket_ReadSocketData+0x28>
    777e:	e0d6      	b.n	792e <Socket_ReadSocketData+0x1d6>
    7780:	230f      	movs	r3, #15
    7782:	18fb      	adds	r3, r7, r3
    7784:	2200      	movs	r2, #0
    7786:	569a      	ldrsb	r2, [r3, r2]
    7788:	4b6b      	ldr	r3, [pc, #428]	; (7938 <Socket_ReadSocketData+0x1e0>)
    778a:	0112      	lsls	r2, r2, #4
    778c:	58d3      	ldr	r3, [r2, r3]
    778e:	2b00      	cmp	r3, #0
    7790:	d100      	bne.n	7794 <Socket_ReadSocketData+0x3c>
    7792:	e0cc      	b.n	792e <Socket_ReadSocketData+0x1d6>
    7794:	230f      	movs	r3, #15
    7796:	18fb      	adds	r3, r7, r3
    7798:	781b      	ldrb	r3, [r3, #0]
    779a:	b25b      	sxtb	r3, r3
    779c:	4a66      	ldr	r2, [pc, #408]	; (7938 <Socket_ReadSocketData+0x1e0>)
    779e:	011b      	lsls	r3, r3, #4
    77a0:	18d3      	adds	r3, r2, r3
    77a2:	3304      	adds	r3, #4
    77a4:	881b      	ldrh	r3, [r3, #0]
    77a6:	b29b      	uxth	r3, r3
    77a8:	2b00      	cmp	r3, #0
    77aa:	d100      	bne.n	77ae <Socket_ReadSocketData+0x56>
    77ac:	e0bf      	b.n	792e <Socket_ReadSocketData+0x1d6>
    77ae:	230f      	movs	r3, #15
    77b0:	18fb      	adds	r3, r7, r3
    77b2:	781b      	ldrb	r3, [r3, #0]
    77b4:	b25b      	sxtb	r3, r3
    77b6:	4a60      	ldr	r2, [pc, #384]	; (7938 <Socket_ReadSocketData+0x1e0>)
    77b8:	011b      	lsls	r3, r3, #4
    77ba:	18d3      	adds	r3, r2, r3
    77bc:	330a      	adds	r3, #10
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	b2db      	uxtb	r3, r3
    77c2:	2b01      	cmp	r3, #1
    77c4:	d000      	beq.n	77c8 <Socket_ReadSocketData+0x70>
    77c6:	e0b2      	b.n	792e <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    77c8:	687b      	ldr	r3, [r7, #4]
    77ca:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    77cc:	68bb      	ldr	r3, [r7, #8]
    77ce:	2230      	movs	r2, #48	; 0x30
    77d0:	18ba      	adds	r2, r7, r2
    77d2:	8812      	ldrh	r2, [r2, #0]
    77d4:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    77d6:	2319      	movs	r3, #25
    77d8:	18fb      	adds	r3, r7, r3
    77da:	2201      	movs	r2, #1
    77dc:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    77de:	231a      	movs	r3, #26
    77e0:	18fb      	adds	r3, r7, r3
    77e2:	2230      	movs	r2, #48	; 0x30
    77e4:	18ba      	adds	r2, r7, r2
    77e6:	8812      	ldrh	r2, [r2, #0]
    77e8:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    77ea:	230f      	movs	r3, #15
    77ec:	18fb      	adds	r3, r7, r3
    77ee:	781b      	ldrb	r3, [r3, #0]
    77f0:	b25b      	sxtb	r3, r3
    77f2:	4a51      	ldr	r2, [pc, #324]	; (7938 <Socket_ReadSocketData+0x1e0>)
    77f4:	011b      	lsls	r3, r3, #4
    77f6:	18d3      	adds	r3, r2, r3
    77f8:	3304      	adds	r3, #4
    77fa:	881b      	ldrh	r3, [r3, #0]
    77fc:	b29b      	uxth	r3, r3
    77fe:	221a      	movs	r2, #26
    7800:	18ba      	adds	r2, r7, r2
    7802:	8812      	ldrh	r2, [r2, #0]
    7804:	1ad3      	subs	r3, r2, r3
    7806:	b29a      	uxth	r2, r3
    7808:	2316      	movs	r3, #22
    780a:	18fb      	adds	r3, r7, r3
    780c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    780e:	2316      	movs	r3, #22
    7810:	18fb      	adds	r3, r7, r3
    7812:	2200      	movs	r2, #0
    7814:	5e9b      	ldrsh	r3, [r3, r2]
    7816:	2b00      	cmp	r3, #0
    7818:	dd0f      	ble.n	783a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    781a:	2319      	movs	r3, #25
    781c:	18fb      	adds	r3, r7, r3
    781e:	2200      	movs	r2, #0
    7820:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    7822:	230f      	movs	r3, #15
    7824:	18fb      	adds	r3, r7, r3
    7826:	2200      	movs	r2, #0
    7828:	569a      	ldrsb	r2, [r3, r2]
    782a:	231a      	movs	r3, #26
    782c:	18fb      	adds	r3, r7, r3
    782e:	4942      	ldr	r1, [pc, #264]	; (7938 <Socket_ReadSocketData+0x1e0>)
    7830:	0112      	lsls	r2, r2, #4
    7832:	188a      	adds	r2, r1, r2
    7834:	3204      	adds	r2, #4
    7836:	8812      	ldrh	r2, [r2, #0]
    7838:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    783a:	230f      	movs	r3, #15
    783c:	18fb      	adds	r3, r7, r3
    783e:	2200      	movs	r2, #0
    7840:	569a      	ldrsb	r2, [r3, r2]
    7842:	4b3d      	ldr	r3, [pc, #244]	; (7938 <Socket_ReadSocketData+0x1e0>)
    7844:	0112      	lsls	r2, r2, #4
    7846:	58d1      	ldr	r1, [r2, r3]
    7848:	2319      	movs	r3, #25
    784a:	18fb      	adds	r3, r7, r3
    784c:	781c      	ldrb	r4, [r3, #0]
    784e:	231a      	movs	r3, #26
    7850:	18fb      	adds	r3, r7, r3
    7852:	881a      	ldrh	r2, [r3, #0]
    7854:	69f8      	ldr	r0, [r7, #28]
    7856:	0023      	movs	r3, r4
    7858:	4c38      	ldr	r4, [pc, #224]	; (793c <Socket_ReadSocketData+0x1e4>)
    785a:	47a0      	blx	r4
    785c:	1e03      	subs	r3, r0, #0
    785e:	d14f      	bne.n	7900 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    7860:	230f      	movs	r3, #15
    7862:	18fb      	adds	r3, r7, r3
    7864:	2200      	movs	r2, #0
    7866:	569a      	ldrsb	r2, [r3, r2]
    7868:	4b33      	ldr	r3, [pc, #204]	; (7938 <Socket_ReadSocketData+0x1e0>)
    786a:	0112      	lsls	r2, r2, #4
    786c:	58d2      	ldr	r2, [r2, r3]
    786e:	68bb      	ldr	r3, [r7, #8]
    7870:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    7872:	231a      	movs	r3, #26
    7874:	18fb      	adds	r3, r7, r3
    7876:	2200      	movs	r2, #0
    7878:	5e9a      	ldrsh	r2, [r3, r2]
    787a:	68bb      	ldr	r3, [r7, #8]
    787c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    787e:	68bb      	ldr	r3, [r7, #8]
    7880:	88da      	ldrh	r2, [r3, #6]
    7882:	231a      	movs	r3, #26
    7884:	18fb      	adds	r3, r7, r3
    7886:	881b      	ldrh	r3, [r3, #0]
    7888:	1ad3      	subs	r3, r2, r3
    788a:	b29a      	uxth	r2, r3
    788c:	68bb      	ldr	r3, [r7, #8]
    788e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    7890:	4b2b      	ldr	r3, [pc, #172]	; (7940 <Socket_ReadSocketData+0x1e8>)
    7892:	681b      	ldr	r3, [r3, #0]
    7894:	2b00      	cmp	r3, #0
    7896:	d00b      	beq.n	78b0 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    7898:	4b29      	ldr	r3, [pc, #164]	; (7940 <Socket_ReadSocketData+0x1e8>)
    789a:	681b      	ldr	r3, [r3, #0]
    789c:	68bc      	ldr	r4, [r7, #8]
    789e:	220e      	movs	r2, #14
    78a0:	18ba      	adds	r2, r7, r2
    78a2:	7811      	ldrb	r1, [r2, #0]
    78a4:	220f      	movs	r2, #15
    78a6:	18ba      	adds	r2, r7, r2
    78a8:	2000      	movs	r0, #0
    78aa:	5610      	ldrsb	r0, [r2, r0]
    78ac:	0022      	movs	r2, r4
    78ae:	4798      	blx	r3

				u16ReadCount -= u16Read;
    78b0:	2330      	movs	r3, #48	; 0x30
    78b2:	18f9      	adds	r1, r7, r3
    78b4:	2330      	movs	r3, #48	; 0x30
    78b6:	18fa      	adds	r2, r7, r3
    78b8:	231a      	movs	r3, #26
    78ba:	18fb      	adds	r3, r7, r3
    78bc:	8812      	ldrh	r2, [r2, #0]
    78be:	881b      	ldrh	r3, [r3, #0]
    78c0:	1ad3      	subs	r3, r2, r3
    78c2:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    78c4:	231a      	movs	r3, #26
    78c6:	18fb      	adds	r3, r7, r3
    78c8:	881b      	ldrh	r3, [r3, #0]
    78ca:	69fa      	ldr	r2, [r7, #28]
    78cc:	18d3      	adds	r3, r2, r3
    78ce:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    78d0:	230f      	movs	r3, #15
    78d2:	18fb      	adds	r3, r7, r3
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	b25b      	sxtb	r3, r3
    78d8:	4a17      	ldr	r2, [pc, #92]	; (7938 <Socket_ReadSocketData+0x1e0>)
    78da:	011b      	lsls	r3, r3, #4
    78dc:	18d3      	adds	r3, r2, r3
    78de:	330a      	adds	r3, #10
    78e0:	781b      	ldrb	r3, [r3, #0]
    78e2:	b2db      	uxtb	r3, r3
    78e4:	2b00      	cmp	r3, #0
    78e6:	d11b      	bne.n	7920 <Socket_ReadSocketData+0x1c8>
    78e8:	2330      	movs	r3, #48	; 0x30
    78ea:	18fb      	adds	r3, r7, r3
    78ec:	881b      	ldrh	r3, [r3, #0]
    78ee:	2b00      	cmp	r3, #0
    78f0:	d016      	beq.n	7920 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    78f2:	2301      	movs	r3, #1
    78f4:	2200      	movs	r2, #0
    78f6:	2100      	movs	r1, #0
    78f8:	2000      	movs	r0, #0
    78fa:	4c10      	ldr	r4, [pc, #64]	; (793c <Socket_ReadSocketData+0x1e4>)
    78fc:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    78fe:	e016      	b.n	792e <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    7900:	4b10      	ldr	r3, [pc, #64]	; (7944 <Socket_ReadSocketData+0x1ec>)
    7902:	0018      	movs	r0, r3
    7904:	4b10      	ldr	r3, [pc, #64]	; (7948 <Socket_ReadSocketData+0x1f0>)
    7906:	4798      	blx	r3
    7908:	2330      	movs	r3, #48	; 0x30
    790a:	18fb      	adds	r3, r7, r3
    790c:	881a      	ldrh	r2, [r3, #0]
    790e:	4b0f      	ldr	r3, [pc, #60]	; (794c <Socket_ReadSocketData+0x1f4>)
    7910:	0011      	movs	r1, r2
    7912:	0018      	movs	r0, r3
    7914:	4b0c      	ldr	r3, [pc, #48]	; (7948 <Socket_ReadSocketData+0x1f0>)
    7916:	4798      	blx	r3
    7918:	200d      	movs	r0, #13
    791a:	4b0d      	ldr	r3, [pc, #52]	; (7950 <Socket_ReadSocketData+0x1f8>)
    791c:	4798      	blx	r3
				break;
    791e:	e006      	b.n	792e <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    7920:	2330      	movs	r3, #48	; 0x30
    7922:	18fb      	adds	r3, r7, r3
    7924:	881b      	ldrh	r3, [r3, #0]
    7926:	2b00      	cmp	r3, #0
    7928:	d000      	beq.n	792c <Socket_ReadSocketData+0x1d4>
    792a:	e754      	b.n	77d6 <Socket_ReadSocketData+0x7e>
	}
}
    792c:	e7ff      	b.n	792e <Socket_ReadSocketData+0x1d6>
    792e:	46c0      	nop			; (mov r8, r8)
    7930:	46bd      	mov	sp, r7
    7932:	b009      	add	sp, #36	; 0x24
    7934:	bd90      	pop	{r4, r7, pc}
    7936:	46c0      	nop			; (mov r8, r8)
    7938:	2000061c 	.word	0x2000061c
    793c:	000046c1 	.word	0x000046c1
    7940:	200006cc 	.word	0x200006cc
    7944:	00019580 	.word	0x00019580
    7948:	00012f71 	.word	0x00012f71
    794c:	0001958c 	.word	0x0001958c
    7950:	00012fa5 	.word	0x00012fa5

00007954 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    7954:	b590      	push	{r4, r7, lr}
    7956:	b0bb      	sub	sp, #236	; 0xec
    7958:	af02      	add	r7, sp, #8
    795a:	603a      	str	r2, [r7, #0]
    795c:	1dfb      	adds	r3, r7, #7
    795e:	1c02      	adds	r2, r0, #0
    7960:	701a      	strb	r2, [r3, #0]
    7962:	1d3b      	adds	r3, r7, #4
    7964:	1c0a      	adds	r2, r1, #0
    7966:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    7968:	1dfb      	adds	r3, r7, #7
    796a:	781b      	ldrb	r3, [r3, #0]
    796c:	2b41      	cmp	r3, #65	; 0x41
    796e:	d003      	beq.n	7978 <m2m_ip_cb+0x24>
    7970:	1dfb      	adds	r3, r7, #7
    7972:	781b      	ldrb	r3, [r3, #0]
    7974:	2b54      	cmp	r3, #84	; 0x54
    7976:	d120      	bne.n	79ba <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    7978:	23cc      	movs	r3, #204	; 0xcc
    797a:	18f9      	adds	r1, r7, r3
    797c:	6838      	ldr	r0, [r7, #0]
    797e:	2300      	movs	r3, #0
    7980:	2204      	movs	r2, #4
    7982:	4c98      	ldr	r4, [pc, #608]	; (7be4 <m2m_ip_cb+0x290>)
    7984:	47a0      	blx	r4
    7986:	1e03      	subs	r3, r0, #0
    7988:	d000      	beq.n	798c <m2m_ip_cb+0x38>
    798a:	e275      	b.n	7e78 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    798c:	23cc      	movs	r3, #204	; 0xcc
    798e:	18fb      	adds	r3, r7, r3
    7990:	2201      	movs	r2, #1
    7992:	569a      	ldrsb	r2, [r3, r2]
    7994:	23c8      	movs	r3, #200	; 0xc8
    7996:	18fb      	adds	r3, r7, r3
    7998:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    799a:	4b93      	ldr	r3, [pc, #588]	; (7be8 <m2m_ip_cb+0x294>)
    799c:	681b      	ldr	r3, [r3, #0]
    799e:	2b00      	cmp	r3, #0
    79a0:	d100      	bne.n	79a4 <m2m_ip_cb+0x50>
    79a2:	e269      	b.n	7e78 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    79a4:	4b90      	ldr	r3, [pc, #576]	; (7be8 <m2m_ip_cb+0x294>)
    79a6:	681b      	ldr	r3, [r3, #0]
    79a8:	22cc      	movs	r2, #204	; 0xcc
    79aa:	18ba      	adds	r2, r7, r2
    79ac:	2000      	movs	r0, #0
    79ae:	5610      	ldrsb	r0, [r2, r0]
    79b0:	22c8      	movs	r2, #200	; 0xc8
    79b2:	18ba      	adds	r2, r7, r2
    79b4:	2101      	movs	r1, #1
    79b6:	4798      	blx	r3
	{
    79b8:	e25e      	b.n	7e78 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    79ba:	1dfb      	adds	r3, r7, #7
    79bc:	781b      	ldrb	r3, [r3, #0]
    79be:	2b42      	cmp	r3, #66	; 0x42
    79c0:	d120      	bne.n	7a04 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    79c2:	23c4      	movs	r3, #196	; 0xc4
    79c4:	18f9      	adds	r1, r7, r3
    79c6:	6838      	ldr	r0, [r7, #0]
    79c8:	2300      	movs	r3, #0
    79ca:	2204      	movs	r2, #4
    79cc:	4c85      	ldr	r4, [pc, #532]	; (7be4 <m2m_ip_cb+0x290>)
    79ce:	47a0      	blx	r4
    79d0:	1e03      	subs	r3, r0, #0
    79d2:	d000      	beq.n	79d6 <m2m_ip_cb+0x82>
    79d4:	e257      	b.n	7e86 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    79d6:	23c4      	movs	r3, #196	; 0xc4
    79d8:	18fb      	adds	r3, r7, r3
    79da:	2201      	movs	r2, #1
    79dc:	569a      	ldrsb	r2, [r3, r2]
    79de:	23c0      	movs	r3, #192	; 0xc0
    79e0:	18fb      	adds	r3, r7, r3
    79e2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    79e4:	4b80      	ldr	r3, [pc, #512]	; (7be8 <m2m_ip_cb+0x294>)
    79e6:	681b      	ldr	r3, [r3, #0]
    79e8:	2b00      	cmp	r3, #0
    79ea:	d100      	bne.n	79ee <m2m_ip_cb+0x9a>
    79ec:	e24b      	b.n	7e86 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    79ee:	4b7e      	ldr	r3, [pc, #504]	; (7be8 <m2m_ip_cb+0x294>)
    79f0:	681b      	ldr	r3, [r3, #0]
    79f2:	22c4      	movs	r2, #196	; 0xc4
    79f4:	18ba      	adds	r2, r7, r2
    79f6:	2000      	movs	r0, #0
    79f8:	5610      	ldrsb	r0, [r2, r0]
    79fa:	22c0      	movs	r2, #192	; 0xc0
    79fc:	18ba      	adds	r2, r7, r2
    79fe:	2102      	movs	r1, #2
    7a00:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    7a02:	e240      	b.n	7e86 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    7a04:	1dfb      	adds	r3, r7, #7
    7a06:	781b      	ldrb	r3, [r3, #0]
    7a08:	2b43      	cmp	r3, #67	; 0x43
    7a0a:	d000      	beq.n	7a0e <m2m_ip_cb+0xba>
    7a0c:	e086      	b.n	7b1c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    7a0e:	23b4      	movs	r3, #180	; 0xb4
    7a10:	18f9      	adds	r1, r7, r3
    7a12:	6838      	ldr	r0, [r7, #0]
    7a14:	2300      	movs	r3, #0
    7a16:	220c      	movs	r2, #12
    7a18:	4c72      	ldr	r4, [pc, #456]	; (7be4 <m2m_ip_cb+0x290>)
    7a1a:	47a0      	blx	r4
    7a1c:	1e03      	subs	r3, r0, #0
    7a1e:	d000      	beq.n	7a22 <m2m_ip_cb+0xce>
    7a20:	e231      	b.n	7e86 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    7a22:	23b4      	movs	r3, #180	; 0xb4
    7a24:	18fb      	adds	r3, r7, r3
    7a26:	7a5b      	ldrb	r3, [r3, #9]
    7a28:	b25b      	sxtb	r3, r3
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	db4f      	blt.n	7ace <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    7a2e:	23b4      	movs	r3, #180	; 0xb4
    7a30:	18fb      	adds	r3, r7, r3
    7a32:	7a5b      	ldrb	r3, [r3, #9]
    7a34:	b25b      	sxtb	r3, r3
    7a36:	0018      	movs	r0, r3
    7a38:	23b4      	movs	r3, #180	; 0xb4
    7a3a:	18fb      	adds	r3, r7, r3
    7a3c:	7a1b      	ldrb	r3, [r3, #8]
    7a3e:	b25b      	sxtb	r3, r3
    7a40:	4a6a      	ldr	r2, [pc, #424]	; (7bec <m2m_ip_cb+0x298>)
    7a42:	011b      	lsls	r3, r3, #4
    7a44:	18d3      	adds	r3, r2, r3
    7a46:	330b      	adds	r3, #11
    7a48:	781b      	ldrb	r3, [r3, #0]
    7a4a:	b2d9      	uxtb	r1, r3
    7a4c:	4a67      	ldr	r2, [pc, #412]	; (7bec <m2m_ip_cb+0x298>)
    7a4e:	0103      	lsls	r3, r0, #4
    7a50:	18d3      	adds	r3, r2, r3
    7a52:	330b      	adds	r3, #11
    7a54:	1c0a      	adds	r2, r1, #0
    7a56:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    7a58:	23b4      	movs	r3, #180	; 0xb4
    7a5a:	18fb      	adds	r3, r7, r3
    7a5c:	7a5b      	ldrb	r3, [r3, #9]
    7a5e:	b25b      	sxtb	r3, r3
    7a60:	4a62      	ldr	r2, [pc, #392]	; (7bec <m2m_ip_cb+0x298>)
    7a62:	011b      	lsls	r3, r3, #4
    7a64:	18d3      	adds	r3, r2, r3
    7a66:	330a      	adds	r3, #10
    7a68:	2201      	movs	r2, #1
    7a6a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7a6c:	23b4      	movs	r3, #180	; 0xb4
    7a6e:	18fb      	adds	r3, r7, r3
    7a70:	7a5b      	ldrb	r3, [r3, #9]
    7a72:	b25b      	sxtb	r3, r3
    7a74:	0018      	movs	r0, r3
    7a76:	23b4      	movs	r3, #180	; 0xb4
    7a78:	18fb      	adds	r3, r7, r3
    7a7a:	895b      	ldrh	r3, [r3, #10]
    7a7c:	3b08      	subs	r3, #8
    7a7e:	b299      	uxth	r1, r3
    7a80:	4a5a      	ldr	r2, [pc, #360]	; (7bec <m2m_ip_cb+0x298>)
    7a82:	0103      	lsls	r3, r0, #4
    7a84:	18d3      	adds	r3, r2, r3
    7a86:	3308      	adds	r3, #8
    7a88:	1c0a      	adds	r2, r1, #0
    7a8a:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    7a8c:	4b58      	ldr	r3, [pc, #352]	; (7bf0 <m2m_ip_cb+0x29c>)
    7a8e:	881b      	ldrh	r3, [r3, #0]
    7a90:	b29b      	uxth	r3, r3
    7a92:	3301      	adds	r3, #1
    7a94:	b29a      	uxth	r2, r3
    7a96:	4b56      	ldr	r3, [pc, #344]	; (7bf0 <m2m_ip_cb+0x29c>)
    7a98:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    7a9a:	4b55      	ldr	r3, [pc, #340]	; (7bf0 <m2m_ip_cb+0x29c>)
    7a9c:	881b      	ldrh	r3, [r3, #0]
    7a9e:	b29b      	uxth	r3, r3
    7aa0:	2b00      	cmp	r3, #0
    7aa2:	d106      	bne.n	7ab2 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    7aa4:	4b52      	ldr	r3, [pc, #328]	; (7bf0 <m2m_ip_cb+0x29c>)
    7aa6:	881b      	ldrh	r3, [r3, #0]
    7aa8:	b29b      	uxth	r3, r3
    7aaa:	3301      	adds	r3, #1
    7aac:	b29a      	uxth	r2, r3
    7aae:	4b50      	ldr	r3, [pc, #320]	; (7bf0 <m2m_ip_cb+0x29c>)
    7ab0:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    7ab2:	23b4      	movs	r3, #180	; 0xb4
    7ab4:	18fb      	adds	r3, r7, r3
    7ab6:	7a5b      	ldrb	r3, [r3, #9]
    7ab8:	b25b      	sxtb	r3, r3
    7aba:	0018      	movs	r0, r3
    7abc:	4b4c      	ldr	r3, [pc, #304]	; (7bf0 <m2m_ip_cb+0x29c>)
    7abe:	881b      	ldrh	r3, [r3, #0]
    7ac0:	b299      	uxth	r1, r3
    7ac2:	4a4a      	ldr	r2, [pc, #296]	; (7bec <m2m_ip_cb+0x298>)
    7ac4:	0103      	lsls	r3, r0, #4
    7ac6:	18d3      	adds	r3, r2, r3
    7ac8:	3306      	adds	r3, #6
    7aca:	1c0a      	adds	r2, r1, #0
    7acc:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    7ace:	23b4      	movs	r3, #180	; 0xb4
    7ad0:	18fb      	adds	r3, r7, r3
    7ad2:	2209      	movs	r2, #9
    7ad4:	569a      	ldrsb	r2, [r3, r2]
    7ad6:	23a0      	movs	r3, #160	; 0xa0
    7ad8:	18fb      	adds	r3, r7, r3
    7ada:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    7adc:	23a0      	movs	r3, #160	; 0xa0
    7ade:	18fb      	adds	r3, r7, r3
    7ae0:	2202      	movs	r2, #2
    7ae2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    7ae4:	23b4      	movs	r3, #180	; 0xb4
    7ae6:	18fb      	adds	r3, r7, r3
    7ae8:	885a      	ldrh	r2, [r3, #2]
    7aea:	23a0      	movs	r3, #160	; 0xa0
    7aec:	18fb      	adds	r3, r7, r3
    7aee:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    7af0:	23b4      	movs	r3, #180	; 0xb4
    7af2:	18fb      	adds	r3, r7, r3
    7af4:	685a      	ldr	r2, [r3, #4]
    7af6:	23a0      	movs	r3, #160	; 0xa0
    7af8:	18fb      	adds	r3, r7, r3
    7afa:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    7afc:	4b3a      	ldr	r3, [pc, #232]	; (7be8 <m2m_ip_cb+0x294>)
    7afe:	681b      	ldr	r3, [r3, #0]
    7b00:	2b00      	cmp	r3, #0
    7b02:	d100      	bne.n	7b06 <m2m_ip_cb+0x1b2>
    7b04:	e1bf      	b.n	7e86 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    7b06:	4b38      	ldr	r3, [pc, #224]	; (7be8 <m2m_ip_cb+0x294>)
    7b08:	681b      	ldr	r3, [r3, #0]
    7b0a:	22b4      	movs	r2, #180	; 0xb4
    7b0c:	18ba      	adds	r2, r7, r2
    7b0e:	2008      	movs	r0, #8
    7b10:	5610      	ldrsb	r0, [r2, r0]
    7b12:	22a0      	movs	r2, #160	; 0xa0
    7b14:	18ba      	adds	r2, r7, r2
    7b16:	2104      	movs	r1, #4
    7b18:	4798      	blx	r3
}
    7b1a:	e1b4      	b.n	7e86 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    7b1c:	1dfb      	adds	r3, r7, #7
    7b1e:	781b      	ldrb	r3, [r3, #0]
    7b20:	2b44      	cmp	r3, #68	; 0x44
    7b22:	d003      	beq.n	7b2c <m2m_ip_cb+0x1d8>
    7b24:	1dfb      	adds	r3, r7, #7
    7b26:	781b      	ldrb	r3, [r3, #0]
    7b28:	2b4b      	cmp	r3, #75	; 0x4b
    7b2a:	d13d      	bne.n	7ba8 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    7b2c:	239c      	movs	r3, #156	; 0x9c
    7b2e:	18f9      	adds	r1, r7, r3
    7b30:	6838      	ldr	r0, [r7, #0]
    7b32:	2300      	movs	r3, #0
    7b34:	2204      	movs	r2, #4
    7b36:	4c2b      	ldr	r4, [pc, #172]	; (7be4 <m2m_ip_cb+0x290>)
    7b38:	47a0      	blx	r4
    7b3a:	1e03      	subs	r3, r0, #0
    7b3c:	d000      	beq.n	7b40 <m2m_ip_cb+0x1ec>
    7b3e:	e19d      	b.n	7e7c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    7b40:	239c      	movs	r3, #156	; 0x9c
    7b42:	18fb      	adds	r3, r7, r3
    7b44:	2200      	movs	r2, #0
    7b46:	569a      	ldrsb	r2, [r3, r2]
    7b48:	2398      	movs	r3, #152	; 0x98
    7b4a:	18fb      	adds	r3, r7, r3
    7b4c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    7b4e:	239c      	movs	r3, #156	; 0x9c
    7b50:	18fb      	adds	r3, r7, r3
    7b52:	2201      	movs	r2, #1
    7b54:	569a      	ldrsb	r2, [r3, r2]
    7b56:	2398      	movs	r3, #152	; 0x98
    7b58:	18fb      	adds	r3, r7, r3
    7b5a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    7b5c:	239c      	movs	r3, #156	; 0x9c
    7b5e:	18fb      	adds	r3, r7, r3
    7b60:	785b      	ldrb	r3, [r3, #1]
    7b62:	b25b      	sxtb	r3, r3
    7b64:	2b00      	cmp	r3, #0
    7b66:	d10f      	bne.n	7b88 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7b68:	239c      	movs	r3, #156	; 0x9c
    7b6a:	18fb      	adds	r3, r7, r3
    7b6c:	781b      	ldrb	r3, [r3, #0]
    7b6e:	b25b      	sxtb	r3, r3
    7b70:	0018      	movs	r0, r3
    7b72:	239c      	movs	r3, #156	; 0x9c
    7b74:	18fb      	adds	r3, r7, r3
    7b76:	885b      	ldrh	r3, [r3, #2]
    7b78:	3b08      	subs	r3, #8
    7b7a:	b299      	uxth	r1, r3
    7b7c:	4a1b      	ldr	r2, [pc, #108]	; (7bec <m2m_ip_cb+0x298>)
    7b7e:	0103      	lsls	r3, r0, #4
    7b80:	18d3      	adds	r3, r2, r3
    7b82:	3308      	adds	r3, #8
    7b84:	1c0a      	adds	r2, r1, #0
    7b86:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    7b88:	4b17      	ldr	r3, [pc, #92]	; (7be8 <m2m_ip_cb+0x294>)
    7b8a:	681b      	ldr	r3, [r3, #0]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d100      	bne.n	7b92 <m2m_ip_cb+0x23e>
    7b90:	e174      	b.n	7e7c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    7b92:	4b15      	ldr	r3, [pc, #84]	; (7be8 <m2m_ip_cb+0x294>)
    7b94:	681b      	ldr	r3, [r3, #0]
    7b96:	229c      	movs	r2, #156	; 0x9c
    7b98:	18ba      	adds	r2, r7, r2
    7b9a:	2000      	movs	r0, #0
    7b9c:	5610      	ldrsb	r0, [r2, r0]
    7b9e:	2298      	movs	r2, #152	; 0x98
    7ba0:	18ba      	adds	r2, r7, r2
    7ba2:	2105      	movs	r1, #5
    7ba4:	4798      	blx	r3
	{
    7ba6:	e169      	b.n	7e7c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    7ba8:	1dfb      	adds	r3, r7, #7
    7baa:	781b      	ldrb	r3, [r3, #0]
    7bac:	2b4a      	cmp	r3, #74	; 0x4a
    7bae:	d123      	bne.n	7bf8 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    7bb0:	230c      	movs	r3, #12
    7bb2:	18f9      	adds	r1, r7, r3
    7bb4:	6838      	ldr	r0, [r7, #0]
    7bb6:	2300      	movs	r3, #0
    7bb8:	2244      	movs	r2, #68	; 0x44
    7bba:	4c0a      	ldr	r4, [pc, #40]	; (7be4 <m2m_ip_cb+0x290>)
    7bbc:	47a0      	blx	r4
    7bbe:	1e03      	subs	r3, r0, #0
    7bc0:	d000      	beq.n	7bc4 <m2m_ip_cb+0x270>
    7bc2:	e160      	b.n	7e86 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    7bc4:	4b0b      	ldr	r3, [pc, #44]	; (7bf4 <m2m_ip_cb+0x2a0>)
    7bc6:	681b      	ldr	r3, [r3, #0]
    7bc8:	2b00      	cmp	r3, #0
    7bca:	d100      	bne.n	7bce <m2m_ip_cb+0x27a>
    7bcc:	e15b      	b.n	7e86 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    7bce:	4b09      	ldr	r3, [pc, #36]	; (7bf4 <m2m_ip_cb+0x2a0>)
    7bd0:	681a      	ldr	r2, [r3, #0]
    7bd2:	230c      	movs	r3, #12
    7bd4:	18fb      	adds	r3, r7, r3
    7bd6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    7bd8:	230c      	movs	r3, #12
    7bda:	18fb      	adds	r3, r7, r3
    7bdc:	0018      	movs	r0, r3
    7bde:	4790      	blx	r2
}
    7be0:	e151      	b.n	7e86 <m2m_ip_cb+0x532>
    7be2:	46c0      	nop			; (mov r8, r8)
    7be4:	000046c1 	.word	0x000046c1
    7be8:	200006cc 	.word	0x200006cc
    7bec:	2000061c 	.word	0x2000061c
    7bf0:	2000022e 	.word	0x2000022e
    7bf4:	200006d4 	.word	0x200006d4
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    7bf8:	1dfb      	adds	r3, r7, #7
    7bfa:	781b      	ldrb	r3, [r3, #0]
    7bfc:	2b46      	cmp	r3, #70	; 0x46
    7bfe:	d008      	beq.n	7c12 <m2m_ip_cb+0x2be>
    7c00:	1dfb      	adds	r3, r7, #7
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	2b48      	cmp	r3, #72	; 0x48
    7c06:	d004      	beq.n	7c12 <m2m_ip_cb+0x2be>
    7c08:	1dfb      	adds	r3, r7, #7
    7c0a:	781b      	ldrb	r3, [r3, #0]
    7c0c:	2b4d      	cmp	r3, #77	; 0x4d
    7c0e:	d000      	beq.n	7c12 <m2m_ip_cb+0x2be>
    7c10:	e0b4      	b.n	7d7c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    7c12:	23df      	movs	r3, #223	; 0xdf
    7c14:	18fb      	adds	r3, r7, r3
    7c16:	2206      	movs	r2, #6
    7c18:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    7c1a:	1dfb      	adds	r3, r7, #7
    7c1c:	781b      	ldrb	r3, [r3, #0]
    7c1e:	2b48      	cmp	r3, #72	; 0x48
    7c20:	d103      	bne.n	7c2a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    7c22:	23df      	movs	r3, #223	; 0xdf
    7c24:	18fb      	adds	r3, r7, r3
    7c26:	2209      	movs	r2, #9
    7c28:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    7c2a:	23d8      	movs	r3, #216	; 0xd8
    7c2c:	18fb      	adds	r3, r7, r3
    7c2e:	2210      	movs	r2, #16
    7c30:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    7c32:	23d8      	movs	r3, #216	; 0xd8
    7c34:	18fb      	adds	r3, r7, r3
    7c36:	881a      	ldrh	r2, [r3, #0]
    7c38:	2388      	movs	r3, #136	; 0x88
    7c3a:	18f9      	adds	r1, r7, r3
    7c3c:	6838      	ldr	r0, [r7, #0]
    7c3e:	2300      	movs	r3, #0
    7c40:	4c93      	ldr	r4, [pc, #588]	; (7e90 <m2m_ip_cb+0x53c>)
    7c42:	47a0      	blx	r4
    7c44:	1e03      	subs	r3, r0, #0
    7c46:	d000      	beq.n	7c4a <m2m_ip_cb+0x2f6>
    7c48:	e11a      	b.n	7e80 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    7c4a:	23d6      	movs	r3, #214	; 0xd6
    7c4c:	18fb      	adds	r3, r7, r3
    7c4e:	2200      	movs	r2, #0
    7c50:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    7c52:	23d5      	movs	r3, #213	; 0xd5
    7c54:	18fb      	adds	r3, r7, r3
    7c56:	2288      	movs	r2, #136	; 0x88
    7c58:	18ba      	adds	r2, r7, r2
    7c5a:	7b12      	ldrb	r2, [r2, #12]
    7c5c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    7c5e:	23d6      	movs	r3, #214	; 0xd6
    7c60:	18fb      	adds	r3, r7, r3
    7c62:	2288      	movs	r2, #136	; 0x88
    7c64:	18ba      	adds	r2, r7, r2
    7c66:	89d2      	ldrh	r2, [r2, #14]
    7c68:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    7c6a:	23d5      	movs	r3, #213	; 0xd5
    7c6c:	18fb      	adds	r3, r7, r3
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	b25b      	sxtb	r3, r3
    7c72:	4a88      	ldr	r2, [pc, #544]	; (7e94 <m2m_ip_cb+0x540>)
    7c74:	011b      	lsls	r3, r3, #4
    7c76:	18d3      	adds	r3, r2, r3
    7c78:	330c      	adds	r3, #12
    7c7a:	2200      	movs	r2, #0
    7c7c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    7c7e:	23d2      	movs	r3, #210	; 0xd2
    7c80:	18fb      	adds	r3, r7, r3
    7c82:	2288      	movs	r2, #136	; 0x88
    7c84:	18ba      	adds	r2, r7, r2
    7c86:	8912      	ldrh	r2, [r2, #8]
    7c88:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    7c8a:	23d0      	movs	r3, #208	; 0xd0
    7c8c:	18fb      	adds	r3, r7, r3
    7c8e:	2288      	movs	r2, #136	; 0x88
    7c90:	18ba      	adds	r2, r7, r2
    7c92:	8952      	ldrh	r2, [r2, #10]
    7c94:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    7c96:	2388      	movs	r3, #136	; 0x88
    7c98:	18fb      	adds	r3, r7, r3
    7c9a:	885a      	ldrh	r2, [r3, #2]
    7c9c:	2370      	movs	r3, #112	; 0x70
    7c9e:	18fb      	adds	r3, r7, r3
    7ca0:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    7ca2:	2388      	movs	r3, #136	; 0x88
    7ca4:	18fb      	adds	r3, r7, r3
    7ca6:	685a      	ldr	r2, [r3, #4]
    7ca8:	2370      	movs	r3, #112	; 0x70
    7caa:	18fb      	adds	r3, r7, r3
    7cac:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7cae:	23d5      	movs	r3, #213	; 0xd5
    7cb0:	18fb      	adds	r3, r7, r3
    7cb2:	781b      	ldrb	r3, [r3, #0]
    7cb4:	b25b      	sxtb	r3, r3
    7cb6:	4a77      	ldr	r2, [pc, #476]	; (7e94 <m2m_ip_cb+0x540>)
    7cb8:	011b      	lsls	r3, r3, #4
    7cba:	18d3      	adds	r3, r2, r3
    7cbc:	3306      	adds	r3, #6
    7cbe:	881b      	ldrh	r3, [r3, #0]
    7cc0:	b29b      	uxth	r3, r3
    7cc2:	22d6      	movs	r2, #214	; 0xd6
    7cc4:	18ba      	adds	r2, r7, r2
    7cc6:	8812      	ldrh	r2, [r2, #0]
    7cc8:	429a      	cmp	r2, r3
    7cca:	d148      	bne.n	7d5e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    7ccc:	23d2      	movs	r3, #210	; 0xd2
    7cce:	18fb      	adds	r3, r7, r3
    7cd0:	2200      	movs	r2, #0
    7cd2:	5e9b      	ldrsh	r3, [r3, r2]
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	dd25      	ble.n	7d24 <m2m_ip_cb+0x3d0>
    7cd8:	23d2      	movs	r3, #210	; 0xd2
    7cda:	18fb      	adds	r3, r7, r3
    7cdc:	2200      	movs	r2, #0
    7cde:	5e9a      	ldrsh	r2, [r3, r2]
    7ce0:	1d3b      	adds	r3, r7, #4
    7ce2:	881b      	ldrh	r3, [r3, #0]
    7ce4:	429a      	cmp	r2, r3
    7ce6:	da1d      	bge.n	7d24 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    7ce8:	23d0      	movs	r3, #208	; 0xd0
    7cea:	18fb      	adds	r3, r7, r3
    7cec:	881b      	ldrh	r3, [r3, #0]
    7cee:	683a      	ldr	r2, [r7, #0]
    7cf0:	18d3      	adds	r3, r2, r3
    7cf2:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    7cf4:	23d8      	movs	r3, #216	; 0xd8
    7cf6:	18fb      	adds	r3, r7, r3
    7cf8:	22d2      	movs	r2, #210	; 0xd2
    7cfa:	18ba      	adds	r2, r7, r2
    7cfc:	8812      	ldrh	r2, [r2, #0]
    7cfe:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    7d00:	683c      	ldr	r4, [r7, #0]
    7d02:	23df      	movs	r3, #223	; 0xdf
    7d04:	18fb      	adds	r3, r7, r3
    7d06:	781a      	ldrb	r2, [r3, #0]
    7d08:	2370      	movs	r3, #112	; 0x70
    7d0a:	18f9      	adds	r1, r7, r3
    7d0c:	23d5      	movs	r3, #213	; 0xd5
    7d0e:	18fb      	adds	r3, r7, r3
    7d10:	2000      	movs	r0, #0
    7d12:	5618      	ldrsb	r0, [r3, r0]
    7d14:	23d8      	movs	r3, #216	; 0xd8
    7d16:	18fb      	adds	r3, r7, r3
    7d18:	881b      	ldrh	r3, [r3, #0]
    7d1a:	9300      	str	r3, [sp, #0]
    7d1c:	0023      	movs	r3, r4
    7d1e:	4c5e      	ldr	r4, [pc, #376]	; (7e98 <m2m_ip_cb+0x544>)
    7d20:	47a0      	blx	r4
	{
    7d22:	e0ad      	b.n	7e80 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    7d24:	2370      	movs	r3, #112	; 0x70
    7d26:	18fb      	adds	r3, r7, r3
    7d28:	22d2      	movs	r2, #210	; 0xd2
    7d2a:	18ba      	adds	r2, r7, r2
    7d2c:	8812      	ldrh	r2, [r2, #0]
    7d2e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    7d30:	2370      	movs	r3, #112	; 0x70
    7d32:	18fb      	adds	r3, r7, r3
    7d34:	2200      	movs	r2, #0
    7d36:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    7d38:	4b58      	ldr	r3, [pc, #352]	; (7e9c <m2m_ip_cb+0x548>)
    7d3a:	681b      	ldr	r3, [r3, #0]
    7d3c:	2b00      	cmp	r3, #0
    7d3e:	d100      	bne.n	7d42 <m2m_ip_cb+0x3ee>
    7d40:	e09e      	b.n	7e80 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    7d42:	4b56      	ldr	r3, [pc, #344]	; (7e9c <m2m_ip_cb+0x548>)
    7d44:	681b      	ldr	r3, [r3, #0]
    7d46:	2270      	movs	r2, #112	; 0x70
    7d48:	18bc      	adds	r4, r7, r2
    7d4a:	22df      	movs	r2, #223	; 0xdf
    7d4c:	18ba      	adds	r2, r7, r2
    7d4e:	7811      	ldrb	r1, [r2, #0]
    7d50:	22d5      	movs	r2, #213	; 0xd5
    7d52:	18ba      	adds	r2, r7, r2
    7d54:	2000      	movs	r0, #0
    7d56:	5610      	ldrsb	r0, [r2, r0]
    7d58:	0022      	movs	r2, r4
    7d5a:	4798      	blx	r3
	{
    7d5c:	e090      	b.n	7e80 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    7d5e:	23d8      	movs	r3, #216	; 0xd8
    7d60:	18fa      	adds	r2, r7, r3
    7d62:	1d3b      	adds	r3, r7, #4
    7d64:	8812      	ldrh	r2, [r2, #0]
    7d66:	881b      	ldrh	r3, [r3, #0]
    7d68:	429a      	cmp	r2, r3
    7d6a:	d300      	bcc.n	7d6e <m2m_ip_cb+0x41a>
    7d6c:	e088      	b.n	7e80 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    7d6e:	2301      	movs	r3, #1
    7d70:	2200      	movs	r2, #0
    7d72:	2100      	movs	r1, #0
    7d74:	2000      	movs	r0, #0
    7d76:	4c46      	ldr	r4, [pc, #280]	; (7e90 <m2m_ip_cb+0x53c>)
    7d78:	47a0      	blx	r4
	{
    7d7a:	e081      	b.n	7e80 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    7d7c:	1dfb      	adds	r3, r7, #7
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	2b45      	cmp	r3, #69	; 0x45
    7d82:	d007      	beq.n	7d94 <m2m_ip_cb+0x440>
    7d84:	1dfb      	adds	r3, r7, #7
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	2b47      	cmp	r3, #71	; 0x47
    7d8a:	d003      	beq.n	7d94 <m2m_ip_cb+0x440>
    7d8c:	1dfb      	adds	r3, r7, #7
    7d8e:	781b      	ldrb	r3, [r3, #0]
    7d90:	2b4c      	cmp	r3, #76	; 0x4c
    7d92:	d14c      	bne.n	7e2e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    7d94:	23de      	movs	r3, #222	; 0xde
    7d96:	18fb      	adds	r3, r7, r3
    7d98:	2207      	movs	r2, #7
    7d9a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    7d9c:	1dfb      	adds	r3, r7, #7
    7d9e:	781b      	ldrb	r3, [r3, #0]
    7da0:	2b47      	cmp	r3, #71	; 0x47
    7da2:	d103      	bne.n	7dac <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    7da4:	23de      	movs	r3, #222	; 0xde
    7da6:	18fb      	adds	r3, r7, r3
    7da8:	2208      	movs	r2, #8
    7daa:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    7dac:	2364      	movs	r3, #100	; 0x64
    7dae:	18f9      	adds	r1, r7, r3
    7db0:	6838      	ldr	r0, [r7, #0]
    7db2:	2300      	movs	r3, #0
    7db4:	2208      	movs	r2, #8
    7db6:	4c36      	ldr	r4, [pc, #216]	; (7e90 <m2m_ip_cb+0x53c>)
    7db8:	47a0      	blx	r4
    7dba:	1e03      	subs	r3, r0, #0
    7dbc:	d162      	bne.n	7e84 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    7dbe:	23dc      	movs	r3, #220	; 0xdc
    7dc0:	18fb      	adds	r3, r7, r3
    7dc2:	2200      	movs	r2, #0
    7dc4:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    7dc6:	23db      	movs	r3, #219	; 0xdb
    7dc8:	18fb      	adds	r3, r7, r3
    7dca:	2264      	movs	r2, #100	; 0x64
    7dcc:	18ba      	adds	r2, r7, r2
    7dce:	7812      	ldrb	r2, [r2, #0]
    7dd0:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    7dd2:	23dc      	movs	r3, #220	; 0xdc
    7dd4:	18fb      	adds	r3, r7, r3
    7dd6:	2264      	movs	r2, #100	; 0x64
    7dd8:	18ba      	adds	r2, r7, r2
    7dda:	8892      	ldrh	r2, [r2, #4]
    7ddc:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    7dde:	2364      	movs	r3, #100	; 0x64
    7de0:	18fb      	adds	r3, r7, r3
    7de2:	2202      	movs	r2, #2
    7de4:	5e9a      	ldrsh	r2, [r3, r2]
    7de6:	236e      	movs	r3, #110	; 0x6e
    7de8:	18fb      	adds	r3, r7, r3
    7dea:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7dec:	23db      	movs	r3, #219	; 0xdb
    7dee:	18fb      	adds	r3, r7, r3
    7df0:	781b      	ldrb	r3, [r3, #0]
    7df2:	b25b      	sxtb	r3, r3
    7df4:	4a27      	ldr	r2, [pc, #156]	; (7e94 <m2m_ip_cb+0x540>)
    7df6:	011b      	lsls	r3, r3, #4
    7df8:	18d3      	adds	r3, r2, r3
    7dfa:	3306      	adds	r3, #6
    7dfc:	881b      	ldrh	r3, [r3, #0]
    7dfe:	b29b      	uxth	r3, r3
    7e00:	22dc      	movs	r2, #220	; 0xdc
    7e02:	18ba      	adds	r2, r7, r2
    7e04:	8812      	ldrh	r2, [r2, #0]
    7e06:	429a      	cmp	r2, r3
    7e08:	d13c      	bne.n	7e84 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    7e0a:	4b24      	ldr	r3, [pc, #144]	; (7e9c <m2m_ip_cb+0x548>)
    7e0c:	681b      	ldr	r3, [r3, #0]
    7e0e:	2b00      	cmp	r3, #0
    7e10:	d038      	beq.n	7e84 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    7e12:	4b22      	ldr	r3, [pc, #136]	; (7e9c <m2m_ip_cb+0x548>)
    7e14:	681b      	ldr	r3, [r3, #0]
    7e16:	226e      	movs	r2, #110	; 0x6e
    7e18:	18bc      	adds	r4, r7, r2
    7e1a:	22de      	movs	r2, #222	; 0xde
    7e1c:	18ba      	adds	r2, r7, r2
    7e1e:	7811      	ldrb	r1, [r2, #0]
    7e20:	22db      	movs	r2, #219	; 0xdb
    7e22:	18ba      	adds	r2, r7, r2
    7e24:	2000      	movs	r0, #0
    7e26:	5610      	ldrsb	r0, [r2, r0]
    7e28:	0022      	movs	r2, r4
    7e2a:	4798      	blx	r3
	{
    7e2c:	e02a      	b.n	7e84 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    7e2e:	1dfb      	adds	r3, r7, #7
    7e30:	781b      	ldrb	r3, [r3, #0]
    7e32:	2b52      	cmp	r3, #82	; 0x52
    7e34:	d127      	bne.n	7e86 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    7e36:	2350      	movs	r3, #80	; 0x50
    7e38:	18f9      	adds	r1, r7, r3
    7e3a:	6838      	ldr	r0, [r7, #0]
    7e3c:	2301      	movs	r3, #1
    7e3e:	2214      	movs	r2, #20
    7e40:	4c13      	ldr	r4, [pc, #76]	; (7e90 <m2m_ip_cb+0x53c>)
    7e42:	47a0      	blx	r4
    7e44:	1e03      	subs	r3, r0, #0
    7e46:	d11e      	bne.n	7e86 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    7e48:	2350      	movs	r3, #80	; 0x50
    7e4a:	18fb      	adds	r3, r7, r3
    7e4c:	685b      	ldr	r3, [r3, #4]
    7e4e:	001a      	movs	r2, r3
    7e50:	4b13      	ldr	r3, [pc, #76]	; (7ea0 <m2m_ip_cb+0x54c>)
    7e52:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    7e54:	4b12      	ldr	r3, [pc, #72]	; (7ea0 <m2m_ip_cb+0x54c>)
    7e56:	681b      	ldr	r3, [r3, #0]
    7e58:	2b00      	cmp	r3, #0
    7e5a:	d014      	beq.n	7e86 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    7e5c:	4b10      	ldr	r3, [pc, #64]	; (7ea0 <m2m_ip_cb+0x54c>)
    7e5e:	681c      	ldr	r4, [r3, #0]
    7e60:	2350      	movs	r3, #80	; 0x50
    7e62:	18fb      	adds	r3, r7, r3
    7e64:	6818      	ldr	r0, [r3, #0]
    7e66:	2350      	movs	r3, #80	; 0x50
    7e68:	18fb      	adds	r3, r7, r3
    7e6a:	6899      	ldr	r1, [r3, #8]
    7e6c:	2350      	movs	r3, #80	; 0x50
    7e6e:	18fb      	adds	r3, r7, r3
    7e70:	7c1b      	ldrb	r3, [r3, #16]
    7e72:	001a      	movs	r2, r3
    7e74:	47a0      	blx	r4
}
    7e76:	e006      	b.n	7e86 <m2m_ip_cb+0x532>
	{
    7e78:	46c0      	nop			; (mov r8, r8)
    7e7a:	e004      	b.n	7e86 <m2m_ip_cb+0x532>
	{
    7e7c:	46c0      	nop			; (mov r8, r8)
    7e7e:	e002      	b.n	7e86 <m2m_ip_cb+0x532>
	{
    7e80:	46c0      	nop			; (mov r8, r8)
    7e82:	e000      	b.n	7e86 <m2m_ip_cb+0x532>
	{
    7e84:	46c0      	nop			; (mov r8, r8)
}
    7e86:	46c0      	nop			; (mov r8, r8)
    7e88:	46bd      	mov	sp, r7
    7e8a:	b039      	add	sp, #228	; 0xe4
    7e8c:	bd90      	pop	{r4, r7, pc}
    7e8e:	46c0      	nop			; (mov r8, r8)
    7e90:	000046c1 	.word	0x000046c1
    7e94:	2000061c 	.word	0x2000061c
    7e98:	00007759 	.word	0x00007759
    7e9c:	200006cc 	.word	0x200006cc
    7ea0:	200006d0 	.word	0x200006d0

00007ea4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    7ea4:	b580      	push	{r7, lr}
    7ea6:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    7ea8:	4b0c      	ldr	r3, [pc, #48]	; (7edc <socketInit+0x38>)
    7eaa:	781b      	ldrb	r3, [r3, #0]
    7eac:	b2db      	uxtb	r3, r3
    7eae:	2b00      	cmp	r3, #0
    7eb0:	d110      	bne.n	7ed4 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    7eb2:	4b0b      	ldr	r3, [pc, #44]	; (7ee0 <socketInit+0x3c>)
    7eb4:	22b0      	movs	r2, #176	; 0xb0
    7eb6:	2100      	movs	r1, #0
    7eb8:	0018      	movs	r0, r3
    7eba:	4b0a      	ldr	r3, [pc, #40]	; (7ee4 <socketInit+0x40>)
    7ebc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    7ebe:	4b0a      	ldr	r3, [pc, #40]	; (7ee8 <socketInit+0x44>)
    7ec0:	0019      	movs	r1, r3
    7ec2:	2002      	movs	r0, #2
    7ec4:	4b09      	ldr	r3, [pc, #36]	; (7eec <socketInit+0x48>)
    7ec6:	4798      	blx	r3
		gbSocketInit	= 1;
    7ec8:	4b04      	ldr	r3, [pc, #16]	; (7edc <socketInit+0x38>)
    7eca:	2201      	movs	r2, #1
    7ecc:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    7ece:	4b08      	ldr	r3, [pc, #32]	; (7ef0 <socketInit+0x4c>)
    7ed0:	2200      	movs	r2, #0
    7ed2:	801a      	strh	r2, [r3, #0]
	}
}
    7ed4:	46c0      	nop			; (mov r8, r8)
    7ed6:	46bd      	mov	sp, r7
    7ed8:	bd80      	pop	{r7, pc}
    7eda:	46c0      	nop			; (mov r8, r8)
    7edc:	20000230 	.word	0x20000230
    7ee0:	2000061c 	.word	0x2000061c
    7ee4:	00003b6d 	.word	0x00003b6d
    7ee8:	00007955 	.word	0x00007955
    7eec:	00004841 	.word	0x00004841
    7ef0:	2000022e 	.word	0x2000022e

00007ef4 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    7ef4:	b580      	push	{r7, lr}
    7ef6:	b082      	sub	sp, #8
    7ef8:	af00      	add	r7, sp, #0
    7efa:	6078      	str	r0, [r7, #4]
    7efc:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    7efe:	4b05      	ldr	r3, [pc, #20]	; (7f14 <registerSocketCallback+0x20>)
    7f00:	687a      	ldr	r2, [r7, #4]
    7f02:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    7f04:	4b04      	ldr	r3, [pc, #16]	; (7f18 <registerSocketCallback+0x24>)
    7f06:	683a      	ldr	r2, [r7, #0]
    7f08:	601a      	str	r2, [r3, #0]
}
    7f0a:	46c0      	nop			; (mov r8, r8)
    7f0c:	46bd      	mov	sp, r7
    7f0e:	b002      	add	sp, #8
    7f10:	bd80      	pop	{r7, pc}
    7f12:	46c0      	nop			; (mov r8, r8)
    7f14:	200006cc 	.word	0x200006cc
    7f18:	200006d4 	.word	0x200006d4

00007f1c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    7f1c:	b590      	push	{r4, r7, lr}
    7f1e:	b08d      	sub	sp, #52	; 0x34
    7f20:	af04      	add	r7, sp, #16
    7f22:	0004      	movs	r4, r0
    7f24:	0008      	movs	r0, r1
    7f26:	0011      	movs	r1, r2
    7f28:	1dbb      	adds	r3, r7, #6
    7f2a:	1c22      	adds	r2, r4, #0
    7f2c:	801a      	strh	r2, [r3, #0]
    7f2e:	1d7b      	adds	r3, r7, #5
    7f30:	1c02      	adds	r2, r0, #0
    7f32:	701a      	strb	r2, [r3, #0]
    7f34:	1d3b      	adds	r3, r7, #4
    7f36:	1c0a      	adds	r2, r1, #0
    7f38:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    7f3a:	231f      	movs	r3, #31
    7f3c:	18fb      	adds	r3, r7, r3
    7f3e:	22ff      	movs	r2, #255	; 0xff
    7f40:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    7f42:	1dbb      	adds	r3, r7, #6
    7f44:	881b      	ldrh	r3, [r3, #0]
    7f46:	2b02      	cmp	r3, #2
    7f48:	d000      	beq.n	7f4c <socket+0x30>
    7f4a:	e0cd      	b.n	80e8 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    7f4c:	1d7b      	adds	r3, r7, #5
    7f4e:	781b      	ldrb	r3, [r3, #0]
    7f50:	2b01      	cmp	r3, #1
    7f52:	d135      	bne.n	7fc0 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    7f54:	231e      	movs	r3, #30
    7f56:	18fb      	adds	r3, r7, r3
    7f58:	2200      	movs	r2, #0
    7f5a:	701a      	strb	r2, [r3, #0]
    7f5c:	e02a      	b.n	7fb4 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    7f5e:	2317      	movs	r3, #23
    7f60:	18fb      	adds	r3, r7, r3
    7f62:	4a65      	ldr	r2, [pc, #404]	; (80f8 <socket+0x1dc>)
    7f64:	7812      	ldrb	r2, [r2, #0]
    7f66:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    7f68:	4b63      	ldr	r3, [pc, #396]	; (80f8 <socket+0x1dc>)
    7f6a:	781b      	ldrb	r3, [r3, #0]
    7f6c:	b2db      	uxtb	r3, r3
    7f6e:	011a      	lsls	r2, r3, #4
    7f70:	4b62      	ldr	r3, [pc, #392]	; (80fc <socket+0x1e0>)
    7f72:	18d3      	adds	r3, r2, r3
    7f74:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    7f76:	4b60      	ldr	r3, [pc, #384]	; (80f8 <socket+0x1dc>)
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	b2db      	uxtb	r3, r3
    7f7c:	1c5a      	adds	r2, r3, #1
    7f7e:	4b60      	ldr	r3, [pc, #384]	; (8100 <socket+0x1e4>)
    7f80:	2107      	movs	r1, #7
    7f82:	0010      	movs	r0, r2
    7f84:	4798      	blx	r3
    7f86:	000b      	movs	r3, r1
    7f88:	b2da      	uxtb	r2, r3
    7f8a:	4b5b      	ldr	r3, [pc, #364]	; (80f8 <socket+0x1dc>)
    7f8c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    7f8e:	69bb      	ldr	r3, [r7, #24]
    7f90:	7a9b      	ldrb	r3, [r3, #10]
    7f92:	b2db      	uxtb	r3, r3
    7f94:	2b00      	cmp	r3, #0
    7f96:	d106      	bne.n	7fa6 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    7f98:	231f      	movs	r3, #31
    7f9a:	18fb      	adds	r3, r7, r3
    7f9c:	2217      	movs	r2, #23
    7f9e:	18ba      	adds	r2, r7, r2
    7fa0:	7812      	ldrb	r2, [r2, #0]
    7fa2:	701a      	strb	r2, [r3, #0]
					break;
    7fa4:	e04c      	b.n	8040 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    7fa6:	231e      	movs	r3, #30
    7fa8:	18fb      	adds	r3, r7, r3
    7faa:	781a      	ldrb	r2, [r3, #0]
    7fac:	231e      	movs	r3, #30
    7fae:	18fb      	adds	r3, r7, r3
    7fb0:	3201      	adds	r2, #1
    7fb2:	701a      	strb	r2, [r3, #0]
    7fb4:	231e      	movs	r3, #30
    7fb6:	18fb      	adds	r3, r7, r3
    7fb8:	781b      	ldrb	r3, [r3, #0]
    7fba:	2b06      	cmp	r3, #6
    7fbc:	d9cf      	bls.n	7f5e <socket+0x42>
    7fbe:	e03f      	b.n	8040 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    7fc0:	1d7b      	adds	r3, r7, #5
    7fc2:	781b      	ldrb	r3, [r3, #0]
    7fc4:	2b02      	cmp	r3, #2
    7fc6:	d13b      	bne.n	8040 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    7fc8:	4b4e      	ldr	r3, [pc, #312]	; (8104 <socket+0x1e8>)
    7fca:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    7fcc:	231e      	movs	r3, #30
    7fce:	18fb      	adds	r3, r7, r3
    7fd0:	2200      	movs	r2, #0
    7fd2:	701a      	strb	r2, [r3, #0]
    7fd4:	e02f      	b.n	8036 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    7fd6:	2317      	movs	r3, #23
    7fd8:	18fb      	adds	r3, r7, r3
    7fda:	4a4b      	ldr	r2, [pc, #300]	; (8108 <socket+0x1ec>)
    7fdc:	7812      	ldrb	r2, [r2, #0]
    7fde:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    7fe0:	4b49      	ldr	r3, [pc, #292]	; (8108 <socket+0x1ec>)
    7fe2:	781b      	ldrb	r3, [r3, #0]
    7fe4:	b2db      	uxtb	r3, r3
    7fe6:	011b      	lsls	r3, r3, #4
    7fe8:	693a      	ldr	r2, [r7, #16]
    7fea:	18d3      	adds	r3, r2, r3
    7fec:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    7fee:	4b46      	ldr	r3, [pc, #280]	; (8108 <socket+0x1ec>)
    7ff0:	781b      	ldrb	r3, [r3, #0]
    7ff2:	b2db      	uxtb	r3, r3
    7ff4:	3301      	adds	r3, #1
    7ff6:	4a45      	ldr	r2, [pc, #276]	; (810c <socket+0x1f0>)
    7ff8:	4013      	ands	r3, r2
    7ffa:	d504      	bpl.n	8006 <socket+0xea>
    7ffc:	3b01      	subs	r3, #1
    7ffe:	2204      	movs	r2, #4
    8000:	4252      	negs	r2, r2
    8002:	4313      	orrs	r3, r2
    8004:	3301      	adds	r3, #1
    8006:	b2da      	uxtb	r2, r3
    8008:	4b3f      	ldr	r3, [pc, #252]	; (8108 <socket+0x1ec>)
    800a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    800c:	69bb      	ldr	r3, [r7, #24]
    800e:	7a9b      	ldrb	r3, [r3, #10]
    8010:	b2db      	uxtb	r3, r3
    8012:	2b00      	cmp	r3, #0
    8014:	d108      	bne.n	8028 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    8016:	2317      	movs	r3, #23
    8018:	18fb      	adds	r3, r7, r3
    801a:	781b      	ldrb	r3, [r3, #0]
    801c:	3307      	adds	r3, #7
    801e:	b2da      	uxtb	r2, r3
    8020:	231f      	movs	r3, #31
    8022:	18fb      	adds	r3, r7, r3
    8024:	701a      	strb	r2, [r3, #0]
					break;
    8026:	e00b      	b.n	8040 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    8028:	231e      	movs	r3, #30
    802a:	18fb      	adds	r3, r7, r3
    802c:	781a      	ldrb	r2, [r3, #0]
    802e:	231e      	movs	r3, #30
    8030:	18fb      	adds	r3, r7, r3
    8032:	3201      	adds	r2, #1
    8034:	701a      	strb	r2, [r3, #0]
    8036:	231e      	movs	r3, #30
    8038:	18fb      	adds	r3, r7, r3
    803a:	781b      	ldrb	r3, [r3, #0]
    803c:	2b03      	cmp	r3, #3
    803e:	d9ca      	bls.n	7fd6 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    8040:	231f      	movs	r3, #31
    8042:	18fb      	adds	r3, r7, r3
    8044:	781b      	ldrb	r3, [r3, #0]
    8046:	2b7f      	cmp	r3, #127	; 0x7f
    8048:	d84e      	bhi.n	80e8 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    804a:	69bb      	ldr	r3, [r7, #24]
    804c:	2210      	movs	r2, #16
    804e:	2100      	movs	r1, #0
    8050:	0018      	movs	r0, r3
    8052:	4b2f      	ldr	r3, [pc, #188]	; (8110 <socket+0x1f4>)
    8054:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    8056:	69bb      	ldr	r3, [r7, #24]
    8058:	2201      	movs	r2, #1
    805a:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    805c:	4b2d      	ldr	r3, [pc, #180]	; (8114 <socket+0x1f8>)
    805e:	881b      	ldrh	r3, [r3, #0]
    8060:	b29b      	uxth	r3, r3
    8062:	3301      	adds	r3, #1
    8064:	b29a      	uxth	r2, r3
    8066:	4b2b      	ldr	r3, [pc, #172]	; (8114 <socket+0x1f8>)
    8068:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    806a:	4b2a      	ldr	r3, [pc, #168]	; (8114 <socket+0x1f8>)
    806c:	881b      	ldrh	r3, [r3, #0]
    806e:	b29b      	uxth	r3, r3
    8070:	2b00      	cmp	r3, #0
    8072:	d106      	bne.n	8082 <socket+0x166>
				++gu16SessionID;
    8074:	4b27      	ldr	r3, [pc, #156]	; (8114 <socket+0x1f8>)
    8076:	881b      	ldrh	r3, [r3, #0]
    8078:	b29b      	uxth	r3, r3
    807a:	3301      	adds	r3, #1
    807c:	b29a      	uxth	r2, r3
    807e:	4b25      	ldr	r3, [pc, #148]	; (8114 <socket+0x1f8>)
    8080:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    8082:	4b24      	ldr	r3, [pc, #144]	; (8114 <socket+0x1f8>)
    8084:	881b      	ldrh	r3, [r3, #0]
    8086:	b29a      	uxth	r2, r3
    8088:	69bb      	ldr	r3, [r7, #24]
    808a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    808c:	4b22      	ldr	r3, [pc, #136]	; (8118 <socket+0x1fc>)
    808e:	0018      	movs	r0, r3
    8090:	4b22      	ldr	r3, [pc, #136]	; (811c <socket+0x200>)
    8092:	4798      	blx	r3
    8094:	231f      	movs	r3, #31
    8096:	18fb      	adds	r3, r7, r3
    8098:	2100      	movs	r1, #0
    809a:	5659      	ldrsb	r1, [r3, r1]
    809c:	4b1d      	ldr	r3, [pc, #116]	; (8114 <socket+0x1f8>)
    809e:	881b      	ldrh	r3, [r3, #0]
    80a0:	b29b      	uxth	r3, r3
    80a2:	001a      	movs	r2, r3
    80a4:	4b1e      	ldr	r3, [pc, #120]	; (8120 <socket+0x204>)
    80a6:	0018      	movs	r0, r3
    80a8:	4b1c      	ldr	r3, [pc, #112]	; (811c <socket+0x200>)
    80aa:	4798      	blx	r3
    80ac:	200d      	movs	r0, #13
    80ae:	4b1d      	ldr	r3, [pc, #116]	; (8124 <socket+0x208>)
    80b0:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    80b2:	1d3b      	adds	r3, r7, #4
    80b4:	781b      	ldrb	r3, [r3, #0]
    80b6:	2201      	movs	r2, #1
    80b8:	4013      	ands	r3, r2
    80ba:	d015      	beq.n	80e8 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    80bc:	230c      	movs	r3, #12
    80be:	18fb      	adds	r3, r7, r3
    80c0:	221f      	movs	r2, #31
    80c2:	18ba      	adds	r2, r7, r2
    80c4:	7812      	ldrb	r2, [r2, #0]
    80c6:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    80c8:	69bb      	ldr	r3, [r7, #24]
    80ca:	2221      	movs	r2, #33	; 0x21
    80cc:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    80ce:	230c      	movs	r3, #12
    80d0:	18fa      	adds	r2, r7, r3
    80d2:	2300      	movs	r3, #0
    80d4:	9302      	str	r3, [sp, #8]
    80d6:	2300      	movs	r3, #0
    80d8:	9301      	str	r3, [sp, #4]
    80da:	2300      	movs	r3, #0
    80dc:	9300      	str	r3, [sp, #0]
    80de:	2304      	movs	r3, #4
    80e0:	2150      	movs	r1, #80	; 0x50
    80e2:	2002      	movs	r0, #2
    80e4:	4c10      	ldr	r4, [pc, #64]	; (8128 <socket+0x20c>)
    80e6:	47a0      	blx	r4
			}
		}
	}
	return sock;
    80e8:	231f      	movs	r3, #31
    80ea:	18fb      	adds	r3, r7, r3
    80ec:	781b      	ldrb	r3, [r3, #0]
    80ee:	b25b      	sxtb	r3, r3
}
    80f0:	0018      	movs	r0, r3
    80f2:	46bd      	mov	sp, r7
    80f4:	b009      	add	sp, #36	; 0x24
    80f6:	bd90      	pop	{r4, r7, pc}
    80f8:	20000231 	.word	0x20000231
    80fc:	2000061c 	.word	0x2000061c
    8100:	00015785 	.word	0x00015785
    8104:	2000068c 	.word	0x2000068c
    8108:	20000232 	.word	0x20000232
    810c:	80000003 	.word	0x80000003
    8110:	00003b6d 	.word	0x00003b6d
    8114:	2000022e 	.word	0x2000022e
    8118:	00019580 	.word	0x00019580
    811c:	00012f71 	.word	0x00012f71
    8120:	000195a0 	.word	0x000195a0
    8124:	00012fa5 	.word	0x00012fa5
    8128:	00003dcd 	.word	0x00003dcd

0000812c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    812c:	b5b0      	push	{r4, r5, r7, lr}
    812e:	b08a      	sub	sp, #40	; 0x28
    8130:	af04      	add	r7, sp, #16
    8132:	6039      	str	r1, [r7, #0]
    8134:	0011      	movs	r1, r2
    8136:	1dfb      	adds	r3, r7, #7
    8138:	1c02      	adds	r2, r0, #0
    813a:	701a      	strb	r2, [r3, #0]
    813c:	1dbb      	adds	r3, r7, #6
    813e:	1c0a      	adds	r2, r1, #0
    8140:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8142:	2317      	movs	r3, #23
    8144:	18fb      	adds	r3, r7, r3
    8146:	22fa      	movs	r2, #250	; 0xfa
    8148:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    814a:	1dfb      	adds	r3, r7, #7
    814c:	781b      	ldrb	r3, [r3, #0]
    814e:	2b7f      	cmp	r3, #127	; 0x7f
    8150:	d867      	bhi.n	8222 <connect+0xf6>
    8152:	683b      	ldr	r3, [r7, #0]
    8154:	2b00      	cmp	r3, #0
    8156:	d064      	beq.n	8222 <connect+0xf6>
    8158:	1dfb      	adds	r3, r7, #7
    815a:	781b      	ldrb	r3, [r3, #0]
    815c:	b25b      	sxtb	r3, r3
    815e:	4a35      	ldr	r2, [pc, #212]	; (8234 <connect+0x108>)
    8160:	011b      	lsls	r3, r3, #4
    8162:	18d3      	adds	r3, r2, r3
    8164:	330a      	adds	r3, #10
    8166:	781b      	ldrb	r3, [r3, #0]
    8168:	b2db      	uxtb	r3, r3
    816a:	2b01      	cmp	r3, #1
    816c:	d159      	bne.n	8222 <connect+0xf6>
    816e:	1dbb      	adds	r3, r7, #6
    8170:	781b      	ldrb	r3, [r3, #0]
    8172:	2b00      	cmp	r3, #0
    8174:	d055      	beq.n	8222 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    8176:	2316      	movs	r3, #22
    8178:	18fb      	adds	r3, r7, r3
    817a:	2244      	movs	r2, #68	; 0x44
    817c:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    817e:	1dfb      	adds	r3, r7, #7
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	b25b      	sxtb	r3, r3
    8184:	4a2b      	ldr	r2, [pc, #172]	; (8234 <connect+0x108>)
    8186:	011b      	lsls	r3, r3, #4
    8188:	18d3      	adds	r3, r2, r3
    818a:	330b      	adds	r3, #11
    818c:	781b      	ldrb	r3, [r3, #0]
    818e:	b2db      	uxtb	r3, r3
    8190:	001a      	movs	r2, r3
    8192:	2301      	movs	r3, #1
    8194:	4013      	ands	r3, r2
    8196:	d00f      	beq.n	81b8 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    8198:	2316      	movs	r3, #22
    819a:	18fb      	adds	r3, r7, r3
    819c:	224b      	movs	r2, #75	; 0x4b
    819e:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    81a0:	1dfb      	adds	r3, r7, #7
    81a2:	781b      	ldrb	r3, [r3, #0]
    81a4:	b25b      	sxtb	r3, r3
    81a6:	4a23      	ldr	r2, [pc, #140]	; (8234 <connect+0x108>)
    81a8:	011b      	lsls	r3, r3, #4
    81aa:	18d3      	adds	r3, r2, r3
    81ac:	330b      	adds	r3, #11
    81ae:	781b      	ldrb	r3, [r3, #0]
    81b0:	b2da      	uxtb	r2, r3
    81b2:	2308      	movs	r3, #8
    81b4:	18fb      	adds	r3, r7, r3
    81b6:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    81b8:	2308      	movs	r3, #8
    81ba:	18fb      	adds	r3, r7, r3
    81bc:	1dfa      	adds	r2, r7, #7
    81be:	7812      	ldrb	r2, [r2, #0]
    81c0:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    81c2:	6839      	ldr	r1, [r7, #0]
    81c4:	2308      	movs	r3, #8
    81c6:	18fb      	adds	r3, r7, r3
    81c8:	2208      	movs	r2, #8
    81ca:	0018      	movs	r0, r3
    81cc:	4b1a      	ldr	r3, [pc, #104]	; (8238 <connect+0x10c>)
    81ce:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    81d0:	1dfb      	adds	r3, r7, #7
    81d2:	781b      	ldrb	r3, [r3, #0]
    81d4:	b25b      	sxtb	r3, r3
    81d6:	4a17      	ldr	r2, [pc, #92]	; (8234 <connect+0x108>)
    81d8:	011b      	lsls	r3, r3, #4
    81da:	18d3      	adds	r3, r2, r3
    81dc:	3306      	adds	r3, #6
    81de:	881b      	ldrh	r3, [r3, #0]
    81e0:	b29a      	uxth	r2, r3
    81e2:	2308      	movs	r3, #8
    81e4:	18fb      	adds	r3, r7, r3
    81e6:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    81e8:	2317      	movs	r3, #23
    81ea:	18fc      	adds	r4, r7, r3
    81ec:	2308      	movs	r3, #8
    81ee:	18fa      	adds	r2, r7, r3
    81f0:	2316      	movs	r3, #22
    81f2:	18fb      	adds	r3, r7, r3
    81f4:	7819      	ldrb	r1, [r3, #0]
    81f6:	2300      	movs	r3, #0
    81f8:	9302      	str	r3, [sp, #8]
    81fa:	2300      	movs	r3, #0
    81fc:	9301      	str	r3, [sp, #4]
    81fe:	2300      	movs	r3, #0
    8200:	9300      	str	r3, [sp, #0]
    8202:	230c      	movs	r3, #12
    8204:	2002      	movs	r0, #2
    8206:	4d0d      	ldr	r5, [pc, #52]	; (823c <connect+0x110>)
    8208:	47a8      	blx	r5
    820a:	0003      	movs	r3, r0
    820c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    820e:	2317      	movs	r3, #23
    8210:	18fb      	adds	r3, r7, r3
    8212:	781b      	ldrb	r3, [r3, #0]
    8214:	b25b      	sxtb	r3, r3
    8216:	2b00      	cmp	r3, #0
    8218:	d003      	beq.n	8222 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    821a:	2317      	movs	r3, #23
    821c:	18fb      	adds	r3, r7, r3
    821e:	22f7      	movs	r2, #247	; 0xf7
    8220:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    8222:	2317      	movs	r3, #23
    8224:	18fb      	adds	r3, r7, r3
    8226:	781b      	ldrb	r3, [r3, #0]
    8228:	b25b      	sxtb	r3, r3
}
    822a:	0018      	movs	r0, r3
    822c:	46bd      	mov	sp, r7
    822e:	b006      	add	sp, #24
    8230:	bdb0      	pop	{r4, r5, r7, pc}
    8232:	46c0      	nop			; (mov r8, r8)
    8234:	2000061c 	.word	0x2000061c
    8238:	00003b31 	.word	0x00003b31
    823c:	00003dcd 	.word	0x00003dcd

00008240 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    8240:	b590      	push	{r4, r7, lr}
    8242:	b08f      	sub	sp, #60	; 0x3c
    8244:	af04      	add	r7, sp, #16
    8246:	0004      	movs	r4, r0
    8248:	60b9      	str	r1, [r7, #8]
    824a:	0010      	movs	r0, r2
    824c:	0019      	movs	r1, r3
    824e:	230f      	movs	r3, #15
    8250:	18fb      	adds	r3, r7, r3
    8252:	1c22      	adds	r2, r4, #0
    8254:	701a      	strb	r2, [r3, #0]
    8256:	230c      	movs	r3, #12
    8258:	18fb      	adds	r3, r7, r3
    825a:	1c02      	adds	r2, r0, #0
    825c:	801a      	strh	r2, [r3, #0]
    825e:	1dbb      	adds	r3, r7, #6
    8260:	1c0a      	adds	r2, r1, #0
    8262:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    8264:	2326      	movs	r3, #38	; 0x26
    8266:	18fb      	adds	r3, r7, r3
    8268:	2206      	movs	r2, #6
    826a:	4252      	negs	r2, r2
    826c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    826e:	230f      	movs	r3, #15
    8270:	18fb      	adds	r3, r7, r3
    8272:	781b      	ldrb	r3, [r3, #0]
    8274:	2b7f      	cmp	r3, #127	; 0x7f
    8276:	d900      	bls.n	827a <send+0x3a>
    8278:	e087      	b.n	838a <send+0x14a>
    827a:	68bb      	ldr	r3, [r7, #8]
    827c:	2b00      	cmp	r3, #0
    827e:	d100      	bne.n	8282 <send+0x42>
    8280:	e083      	b.n	838a <send+0x14a>
    8282:	230c      	movs	r3, #12
    8284:	18fb      	adds	r3, r7, r3
    8286:	881a      	ldrh	r2, [r3, #0]
    8288:	23af      	movs	r3, #175	; 0xaf
    828a:	00db      	lsls	r3, r3, #3
    828c:	429a      	cmp	r2, r3
    828e:	d900      	bls.n	8292 <send+0x52>
    8290:	e07b      	b.n	838a <send+0x14a>
    8292:	230f      	movs	r3, #15
    8294:	18fb      	adds	r3, r7, r3
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	b25b      	sxtb	r3, r3
    829a:	4a40      	ldr	r2, [pc, #256]	; (839c <send+0x15c>)
    829c:	011b      	lsls	r3, r3, #4
    829e:	18d3      	adds	r3, r2, r3
    82a0:	330a      	adds	r3, #10
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	b2db      	uxtb	r3, r3
    82a6:	2b01      	cmp	r3, #1
    82a8:	d16f      	bne.n	838a <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    82aa:	2323      	movs	r3, #35	; 0x23
    82ac:	18fb      	adds	r3, r7, r3
    82ae:	2245      	movs	r2, #69	; 0x45
    82b0:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    82b2:	2324      	movs	r3, #36	; 0x24
    82b4:	18fb      	adds	r3, r7, r3
    82b6:	2250      	movs	r2, #80	; 0x50
    82b8:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    82ba:	2310      	movs	r3, #16
    82bc:	18fb      	adds	r3, r7, r3
    82be:	220f      	movs	r2, #15
    82c0:	18ba      	adds	r2, r7, r2
    82c2:	7812      	ldrb	r2, [r2, #0]
    82c4:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    82c6:	2310      	movs	r3, #16
    82c8:	18fb      	adds	r3, r7, r3
    82ca:	220c      	movs	r2, #12
    82cc:	18ba      	adds	r2, r7, r2
    82ce:	8812      	ldrh	r2, [r2, #0]
    82d0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    82d2:	230f      	movs	r3, #15
    82d4:	18fb      	adds	r3, r7, r3
    82d6:	781b      	ldrb	r3, [r3, #0]
    82d8:	b25b      	sxtb	r3, r3
    82da:	4a30      	ldr	r2, [pc, #192]	; (839c <send+0x15c>)
    82dc:	011b      	lsls	r3, r3, #4
    82de:	18d3      	adds	r3, r2, r3
    82e0:	3306      	adds	r3, #6
    82e2:	881b      	ldrh	r3, [r3, #0]
    82e4:	b29a      	uxth	r2, r3
    82e6:	2310      	movs	r3, #16
    82e8:	18fb      	adds	r3, r7, r3
    82ea:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    82ec:	230f      	movs	r3, #15
    82ee:	18fb      	adds	r3, r7, r3
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	b25b      	sxtb	r3, r3
    82f4:	2b06      	cmp	r3, #6
    82f6:	dd03      	ble.n	8300 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    82f8:	2324      	movs	r3, #36	; 0x24
    82fa:	18fb      	adds	r3, r7, r3
    82fc:	2244      	movs	r2, #68	; 0x44
    82fe:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8300:	230f      	movs	r3, #15
    8302:	18fb      	adds	r3, r7, r3
    8304:	781b      	ldrb	r3, [r3, #0]
    8306:	b25b      	sxtb	r3, r3
    8308:	4a24      	ldr	r2, [pc, #144]	; (839c <send+0x15c>)
    830a:	011b      	lsls	r3, r3, #4
    830c:	18d3      	adds	r3, r2, r3
    830e:	330b      	adds	r3, #11
    8310:	781b      	ldrb	r3, [r3, #0]
    8312:	b2db      	uxtb	r3, r3
    8314:	001a      	movs	r2, r3
    8316:	2301      	movs	r3, #1
    8318:	4013      	ands	r3, r2
    831a:	d00f      	beq.n	833c <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    831c:	2323      	movs	r3, #35	; 0x23
    831e:	18fb      	adds	r3, r7, r3
    8320:	224c      	movs	r2, #76	; 0x4c
    8322:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    8324:	230f      	movs	r3, #15
    8326:	18fb      	adds	r3, r7, r3
    8328:	2200      	movs	r2, #0
    832a:	569a      	ldrsb	r2, [r3, r2]
    832c:	2324      	movs	r3, #36	; 0x24
    832e:	18fb      	adds	r3, r7, r3
    8330:	491a      	ldr	r1, [pc, #104]	; (839c <send+0x15c>)
    8332:	0112      	lsls	r2, r2, #4
    8334:	188a      	adds	r2, r1, r2
    8336:	3208      	adds	r2, #8
    8338:	8812      	ldrh	r2, [r2, #0]
    833a:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    833c:	2323      	movs	r3, #35	; 0x23
    833e:	18fb      	adds	r3, r7, r3
    8340:	781b      	ldrb	r3, [r3, #0]
    8342:	2280      	movs	r2, #128	; 0x80
    8344:	4252      	negs	r2, r2
    8346:	4313      	orrs	r3, r2
    8348:	b2d9      	uxtb	r1, r3
    834a:	2310      	movs	r3, #16
    834c:	18fa      	adds	r2, r7, r3
    834e:	2324      	movs	r3, #36	; 0x24
    8350:	18fb      	adds	r3, r7, r3
    8352:	881b      	ldrh	r3, [r3, #0]
    8354:	9302      	str	r3, [sp, #8]
    8356:	230c      	movs	r3, #12
    8358:	18fb      	adds	r3, r7, r3
    835a:	881b      	ldrh	r3, [r3, #0]
    835c:	9301      	str	r3, [sp, #4]
    835e:	68bb      	ldr	r3, [r7, #8]
    8360:	9300      	str	r3, [sp, #0]
    8362:	2310      	movs	r3, #16
    8364:	2002      	movs	r0, #2
    8366:	4c0e      	ldr	r4, [pc, #56]	; (83a0 <send+0x160>)
    8368:	47a0      	blx	r4
    836a:	0003      	movs	r3, r0
    836c:	001a      	movs	r2, r3
    836e:	2326      	movs	r3, #38	; 0x26
    8370:	18fb      	adds	r3, r7, r3
    8372:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    8374:	2326      	movs	r3, #38	; 0x26
    8376:	18fb      	adds	r3, r7, r3
    8378:	2200      	movs	r2, #0
    837a:	5e9b      	ldrsh	r3, [r3, r2]
    837c:	2b00      	cmp	r3, #0
    837e:	d004      	beq.n	838a <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    8380:	2326      	movs	r3, #38	; 0x26
    8382:	18fb      	adds	r3, r7, r3
    8384:	220e      	movs	r2, #14
    8386:	4252      	negs	r2, r2
    8388:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    838a:	2326      	movs	r3, #38	; 0x26
    838c:	18fb      	adds	r3, r7, r3
    838e:	2200      	movs	r2, #0
    8390:	5e9b      	ldrsh	r3, [r3, r2]
}
    8392:	0018      	movs	r0, r3
    8394:	46bd      	mov	sp, r7
    8396:	b00b      	add	sp, #44	; 0x2c
    8398:	bd90      	pop	{r4, r7, pc}
    839a:	46c0      	nop			; (mov r8, r8)
    839c:	2000061c 	.word	0x2000061c
    83a0:	00003dcd 	.word	0x00003dcd

000083a4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    83a4:	b590      	push	{r4, r7, lr}
    83a6:	b08d      	sub	sp, #52	; 0x34
    83a8:	af04      	add	r7, sp, #16
    83aa:	60b9      	str	r1, [r7, #8]
    83ac:	0011      	movs	r1, r2
    83ae:	607b      	str	r3, [r7, #4]
    83b0:	230f      	movs	r3, #15
    83b2:	18fb      	adds	r3, r7, r3
    83b4:	1c02      	adds	r2, r0, #0
    83b6:	701a      	strb	r2, [r3, #0]
    83b8:	230c      	movs	r3, #12
    83ba:	18fb      	adds	r3, r7, r3
    83bc:	1c0a      	adds	r2, r1, #0
    83be:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    83c0:	231e      	movs	r3, #30
    83c2:	18fb      	adds	r3, r7, r3
    83c4:	2206      	movs	r2, #6
    83c6:	4252      	negs	r2, r2
    83c8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    83ca:	230f      	movs	r3, #15
    83cc:	18fb      	adds	r3, r7, r3
    83ce:	781b      	ldrb	r3, [r3, #0]
    83d0:	2b7f      	cmp	r3, #127	; 0x7f
    83d2:	d900      	bls.n	83d6 <recv+0x32>
    83d4:	e099      	b.n	850a <recv+0x166>
    83d6:	68bb      	ldr	r3, [r7, #8]
    83d8:	2b00      	cmp	r3, #0
    83da:	d100      	bne.n	83de <recv+0x3a>
    83dc:	e095      	b.n	850a <recv+0x166>
    83de:	230c      	movs	r3, #12
    83e0:	18fb      	adds	r3, r7, r3
    83e2:	881b      	ldrh	r3, [r3, #0]
    83e4:	2b00      	cmp	r3, #0
    83e6:	d100      	bne.n	83ea <recv+0x46>
    83e8:	e08f      	b.n	850a <recv+0x166>
    83ea:	230f      	movs	r3, #15
    83ec:	18fb      	adds	r3, r7, r3
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	b25b      	sxtb	r3, r3
    83f2:	4a4a      	ldr	r2, [pc, #296]	; (851c <recv+0x178>)
    83f4:	011b      	lsls	r3, r3, #4
    83f6:	18d3      	adds	r3, r2, r3
    83f8:	330a      	adds	r3, #10
    83fa:	781b      	ldrb	r3, [r3, #0]
    83fc:	b2db      	uxtb	r3, r3
    83fe:	2b01      	cmp	r3, #1
    8400:	d000      	beq.n	8404 <recv+0x60>
    8402:	e082      	b.n	850a <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    8404:	231e      	movs	r3, #30
    8406:	18fb      	adds	r3, r7, r3
    8408:	2200      	movs	r2, #0
    840a:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    840c:	230f      	movs	r3, #15
    840e:	18fb      	adds	r3, r7, r3
    8410:	2200      	movs	r2, #0
    8412:	569a      	ldrsb	r2, [r3, r2]
    8414:	4b41      	ldr	r3, [pc, #260]	; (851c <recv+0x178>)
    8416:	0112      	lsls	r2, r2, #4
    8418:	68b9      	ldr	r1, [r7, #8]
    841a:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    841c:	230f      	movs	r3, #15
    841e:	18fb      	adds	r3, r7, r3
    8420:	781b      	ldrb	r3, [r3, #0]
    8422:	b25b      	sxtb	r3, r3
    8424:	4a3d      	ldr	r2, [pc, #244]	; (851c <recv+0x178>)
    8426:	011b      	lsls	r3, r3, #4
    8428:	18d3      	adds	r3, r2, r3
    842a:	3304      	adds	r3, #4
    842c:	220c      	movs	r2, #12
    842e:	18ba      	adds	r2, r7, r2
    8430:	8812      	ldrh	r2, [r2, #0]
    8432:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    8434:	230f      	movs	r3, #15
    8436:	18fb      	adds	r3, r7, r3
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	b25b      	sxtb	r3, r3
    843c:	4a37      	ldr	r2, [pc, #220]	; (851c <recv+0x178>)
    843e:	011b      	lsls	r3, r3, #4
    8440:	18d3      	adds	r3, r2, r3
    8442:	330c      	adds	r3, #12
    8444:	781b      	ldrb	r3, [r3, #0]
    8446:	b2db      	uxtb	r3, r3
    8448:	2b00      	cmp	r3, #0
    844a:	d15e      	bne.n	850a <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    844c:	231d      	movs	r3, #29
    844e:	18fb      	adds	r3, r7, r3
    8450:	2246      	movs	r2, #70	; 0x46
    8452:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    8454:	230f      	movs	r3, #15
    8456:	18fb      	adds	r3, r7, r3
    8458:	781b      	ldrb	r3, [r3, #0]
    845a:	b25b      	sxtb	r3, r3
    845c:	4a2f      	ldr	r2, [pc, #188]	; (851c <recv+0x178>)
    845e:	011b      	lsls	r3, r3, #4
    8460:	18d3      	adds	r3, r2, r3
    8462:	330c      	adds	r3, #12
    8464:	2201      	movs	r2, #1
    8466:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8468:	230f      	movs	r3, #15
    846a:	18fb      	adds	r3, r7, r3
    846c:	781b      	ldrb	r3, [r3, #0]
    846e:	b25b      	sxtb	r3, r3
    8470:	4a2a      	ldr	r2, [pc, #168]	; (851c <recv+0x178>)
    8472:	011b      	lsls	r3, r3, #4
    8474:	18d3      	adds	r3, r2, r3
    8476:	330b      	adds	r3, #11
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	b2db      	uxtb	r3, r3
    847c:	001a      	movs	r2, r3
    847e:	2301      	movs	r3, #1
    8480:	4013      	ands	r3, r2
    8482:	d003      	beq.n	848c <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    8484:	231d      	movs	r3, #29
    8486:	18fb      	adds	r3, r7, r3
    8488:	224d      	movs	r2, #77	; 0x4d
    848a:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    848c:	687b      	ldr	r3, [r7, #4]
    848e:	2b00      	cmp	r3, #0
    8490:	d105      	bne.n	849e <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    8492:	2314      	movs	r3, #20
    8494:	18fb      	adds	r3, r7, r3
    8496:	2201      	movs	r2, #1
    8498:	4252      	negs	r2, r2
    849a:	601a      	str	r2, [r3, #0]
    849c:	e003      	b.n	84a6 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    849e:	2314      	movs	r3, #20
    84a0:	18fb      	adds	r3, r7, r3
    84a2:	687a      	ldr	r2, [r7, #4]
    84a4:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    84a6:	2314      	movs	r3, #20
    84a8:	18fb      	adds	r3, r7, r3
    84aa:	220f      	movs	r2, #15
    84ac:	18ba      	adds	r2, r7, r2
    84ae:	7812      	ldrb	r2, [r2, #0]
    84b0:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    84b2:	230f      	movs	r3, #15
    84b4:	18fb      	adds	r3, r7, r3
    84b6:	781b      	ldrb	r3, [r3, #0]
    84b8:	b25b      	sxtb	r3, r3
    84ba:	4a18      	ldr	r2, [pc, #96]	; (851c <recv+0x178>)
    84bc:	011b      	lsls	r3, r3, #4
    84be:	18d3      	adds	r3, r2, r3
    84c0:	3306      	adds	r3, #6
    84c2:	881b      	ldrh	r3, [r3, #0]
    84c4:	b29a      	uxth	r2, r3
    84c6:	2314      	movs	r3, #20
    84c8:	18fb      	adds	r3, r7, r3
    84ca:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    84cc:	2314      	movs	r3, #20
    84ce:	18fa      	adds	r2, r7, r3
    84d0:	231d      	movs	r3, #29
    84d2:	18fb      	adds	r3, r7, r3
    84d4:	7819      	ldrb	r1, [r3, #0]
    84d6:	2300      	movs	r3, #0
    84d8:	9302      	str	r3, [sp, #8]
    84da:	2300      	movs	r3, #0
    84dc:	9301      	str	r3, [sp, #4]
    84de:	2300      	movs	r3, #0
    84e0:	9300      	str	r3, [sp, #0]
    84e2:	2308      	movs	r3, #8
    84e4:	2002      	movs	r0, #2
    84e6:	4c0e      	ldr	r4, [pc, #56]	; (8520 <recv+0x17c>)
    84e8:	47a0      	blx	r4
    84ea:	0003      	movs	r3, r0
    84ec:	001a      	movs	r2, r3
    84ee:	231e      	movs	r3, #30
    84f0:	18fb      	adds	r3, r7, r3
    84f2:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    84f4:	231e      	movs	r3, #30
    84f6:	18fb      	adds	r3, r7, r3
    84f8:	2200      	movs	r2, #0
    84fa:	5e9b      	ldrsh	r3, [r3, r2]
    84fc:	2b00      	cmp	r3, #0
    84fe:	d004      	beq.n	850a <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    8500:	231e      	movs	r3, #30
    8502:	18fb      	adds	r3, r7, r3
    8504:	220e      	movs	r2, #14
    8506:	4252      	negs	r2, r2
    8508:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    850a:	231e      	movs	r3, #30
    850c:	18fb      	adds	r3, r7, r3
    850e:	2200      	movs	r2, #0
    8510:	5e9b      	ldrsh	r3, [r3, r2]
}
    8512:	0018      	movs	r0, r3
    8514:	46bd      	mov	sp, r7
    8516:	b009      	add	sp, #36	; 0x24
    8518:	bd90      	pop	{r4, r7, pc}
    851a:	46c0      	nop			; (mov r8, r8)
    851c:	2000061c 	.word	0x2000061c
    8520:	00003dcd 	.word	0x00003dcd

00008524 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    8524:	b5b0      	push	{r4, r5, r7, lr}
    8526:	b088      	sub	sp, #32
    8528:	af04      	add	r7, sp, #16
    852a:	0002      	movs	r2, r0
    852c:	1dfb      	adds	r3, r7, #7
    852e:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8530:	230f      	movs	r3, #15
    8532:	18fb      	adds	r3, r7, r3
    8534:	22fa      	movs	r2, #250	; 0xfa
    8536:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    8538:	4b42      	ldr	r3, [pc, #264]	; (8644 <close+0x120>)
    853a:	0018      	movs	r0, r3
    853c:	4b42      	ldr	r3, [pc, #264]	; (8648 <close+0x124>)
    853e:	4798      	blx	r3
    8540:	1dfb      	adds	r3, r7, #7
    8542:	2200      	movs	r2, #0
    8544:	569a      	ldrsb	r2, [r3, r2]
    8546:	4b41      	ldr	r3, [pc, #260]	; (864c <close+0x128>)
    8548:	0011      	movs	r1, r2
    854a:	0018      	movs	r0, r3
    854c:	4b3e      	ldr	r3, [pc, #248]	; (8648 <close+0x124>)
    854e:	4798      	blx	r3
    8550:	200d      	movs	r0, #13
    8552:	4b3f      	ldr	r3, [pc, #252]	; (8650 <close+0x12c>)
    8554:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    8556:	1dfb      	adds	r3, r7, #7
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	2b7f      	cmp	r3, #127	; 0x7f
    855c:	d86a      	bhi.n	8634 <close+0x110>
    855e:	1dfb      	adds	r3, r7, #7
    8560:	781b      	ldrb	r3, [r3, #0]
    8562:	b25b      	sxtb	r3, r3
    8564:	4a3b      	ldr	r2, [pc, #236]	; (8654 <close+0x130>)
    8566:	011b      	lsls	r3, r3, #4
    8568:	18d3      	adds	r3, r2, r3
    856a:	330a      	adds	r3, #10
    856c:	781b      	ldrb	r3, [r3, #0]
    856e:	b2db      	uxtb	r3, r3
    8570:	2b01      	cmp	r3, #1
    8572:	d15f      	bne.n	8634 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    8574:	230e      	movs	r3, #14
    8576:	18fb      	adds	r3, r7, r3
    8578:	2249      	movs	r2, #73	; 0x49
    857a:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    857c:	2308      	movs	r3, #8
    857e:	18fb      	adds	r3, r7, r3
    8580:	1dfa      	adds	r2, r7, #7
    8582:	7812      	ldrb	r2, [r2, #0]
    8584:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    8586:	1dfb      	adds	r3, r7, #7
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	b25b      	sxtb	r3, r3
    858c:	4a31      	ldr	r2, [pc, #196]	; (8654 <close+0x130>)
    858e:	011b      	lsls	r3, r3, #4
    8590:	18d3      	adds	r3, r2, r3
    8592:	3306      	adds	r3, #6
    8594:	881b      	ldrh	r3, [r3, #0]
    8596:	b29a      	uxth	r2, r3
    8598:	2308      	movs	r3, #8
    859a:	18fb      	adds	r3, r7, r3
    859c:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    859e:	1dfb      	adds	r3, r7, #7
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	b25b      	sxtb	r3, r3
    85a4:	4a2b      	ldr	r2, [pc, #172]	; (8654 <close+0x130>)
    85a6:	011b      	lsls	r3, r3, #4
    85a8:	18d3      	adds	r3, r2, r3
    85aa:	330a      	adds	r3, #10
    85ac:	2200      	movs	r2, #0
    85ae:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    85b0:	1dfb      	adds	r3, r7, #7
    85b2:	781b      	ldrb	r3, [r3, #0]
    85b4:	b25b      	sxtb	r3, r3
    85b6:	4a27      	ldr	r2, [pc, #156]	; (8654 <close+0x130>)
    85b8:	011b      	lsls	r3, r3, #4
    85ba:	18d3      	adds	r3, r2, r3
    85bc:	3306      	adds	r3, #6
    85be:	2200      	movs	r2, #0
    85c0:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    85c2:	1dfb      	adds	r3, r7, #7
    85c4:	781b      	ldrb	r3, [r3, #0]
    85c6:	b25b      	sxtb	r3, r3
    85c8:	4a22      	ldr	r2, [pc, #136]	; (8654 <close+0x130>)
    85ca:	011b      	lsls	r3, r3, #4
    85cc:	18d3      	adds	r3, r2, r3
    85ce:	330b      	adds	r3, #11
    85d0:	781b      	ldrb	r3, [r3, #0]
    85d2:	b2db      	uxtb	r3, r3
    85d4:	001a      	movs	r2, r3
    85d6:	2301      	movs	r3, #1
    85d8:	4013      	ands	r3, r2
    85da:	d003      	beq.n	85e4 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    85dc:	230e      	movs	r3, #14
    85de:	18fb      	adds	r3, r7, r3
    85e0:	224e      	movs	r2, #78	; 0x4e
    85e2:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    85e4:	230f      	movs	r3, #15
    85e6:	18fc      	adds	r4, r7, r3
    85e8:	2308      	movs	r3, #8
    85ea:	18fa      	adds	r2, r7, r3
    85ec:	230e      	movs	r3, #14
    85ee:	18fb      	adds	r3, r7, r3
    85f0:	7819      	ldrb	r1, [r3, #0]
    85f2:	2300      	movs	r3, #0
    85f4:	9302      	str	r3, [sp, #8]
    85f6:	2300      	movs	r3, #0
    85f8:	9301      	str	r3, [sp, #4]
    85fa:	2300      	movs	r3, #0
    85fc:	9300      	str	r3, [sp, #0]
    85fe:	2304      	movs	r3, #4
    8600:	2002      	movs	r0, #2
    8602:	4d15      	ldr	r5, [pc, #84]	; (8658 <close+0x134>)
    8604:	47a8      	blx	r5
    8606:	0003      	movs	r3, r0
    8608:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    860a:	230f      	movs	r3, #15
    860c:	18fb      	adds	r3, r7, r3
    860e:	781b      	ldrb	r3, [r3, #0]
    8610:	b25b      	sxtb	r3, r3
    8612:	2b00      	cmp	r3, #0
    8614:	d003      	beq.n	861e <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    8616:	230f      	movs	r3, #15
    8618:	18fb      	adds	r3, r7, r3
    861a:	22f7      	movs	r2, #247	; 0xf7
    861c:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    861e:	1dfb      	adds	r3, r7, #7
    8620:	781b      	ldrb	r3, [r3, #0]
    8622:	b25b      	sxtb	r3, r3
    8624:	011a      	lsls	r2, r3, #4
    8626:	4b0b      	ldr	r3, [pc, #44]	; (8654 <close+0x130>)
    8628:	18d3      	adds	r3, r2, r3
    862a:	2210      	movs	r2, #16
    862c:	2100      	movs	r1, #0
    862e:	0018      	movs	r0, r3
    8630:	4b0a      	ldr	r3, [pc, #40]	; (865c <close+0x138>)
    8632:	4798      	blx	r3
	}
	return s8Ret;
    8634:	230f      	movs	r3, #15
    8636:	18fb      	adds	r3, r7, r3
    8638:	781b      	ldrb	r3, [r3, #0]
    863a:	b25b      	sxtb	r3, r3
}
    863c:	0018      	movs	r0, r3
    863e:	46bd      	mov	sp, r7
    8640:	b004      	add	sp, #16
    8642:	bdb0      	pop	{r4, r5, r7, pc}
    8644:	00019580 	.word	0x00019580
    8648:	00012f71 	.word	0x00012f71
    864c:	000195bc 	.word	0x000195bc
    8650:	00012fa5 	.word	0x00012fa5
    8654:	2000061c 	.word	0x2000061c
    8658:	00003dcd 	.word	0x00003dcd
    865c:	00003b6d 	.word	0x00003b6d

00008660 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    8660:	b580      	push	{r7, lr}
    8662:	b086      	sub	sp, #24
    8664:	af00      	add	r7, sp, #0
    8666:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    8668:	2300      	movs	r3, #0
    866a:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    866c:	2317      	movs	r3, #23
    866e:	18fb      	adds	r3, r7, r3
    8670:	2200      	movs	r2, #0
    8672:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    8674:	2316      	movs	r3, #22
    8676:	18fb      	adds	r3, r7, r3
    8678:	2200      	movs	r2, #0
    867a:	701a      	strb	r2, [r3, #0]
    867c:	e060      	b.n	8740 <nmi_inet_addr+0xe0>
	{
		j = 0;
    867e:	2315      	movs	r3, #21
    8680:	18fb      	adds	r3, r7, r3
    8682:	2200      	movs	r2, #0
    8684:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    8686:	2314      	movs	r3, #20
    8688:	18fb      	adds	r3, r7, r3
    868a:	687a      	ldr	r2, [r7, #4]
    868c:	7812      	ldrb	r2, [r2, #0]
    868e:	701a      	strb	r2, [r3, #0]
			++j;
    8690:	2315      	movs	r3, #21
    8692:	18fb      	adds	r3, r7, r3
    8694:	2215      	movs	r2, #21
    8696:	18ba      	adds	r2, r7, r2
    8698:	7812      	ldrb	r2, [r2, #0]
    869a:	3201      	adds	r2, #1
    869c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    869e:	2315      	movs	r3, #21
    86a0:	18fb      	adds	r3, r7, r3
    86a2:	781b      	ldrb	r3, [r3, #0]
    86a4:	2b04      	cmp	r3, #4
    86a6:	d901      	bls.n	86ac <nmi_inet_addr+0x4c>
			{
				return 0;
    86a8:	2300      	movs	r3, #0
    86aa:	e057      	b.n	875c <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    86ac:	2314      	movs	r3, #20
    86ae:	18fb      	adds	r3, r7, r3
    86b0:	781b      	ldrb	r3, [r3, #0]
    86b2:	2b2e      	cmp	r3, #46	; 0x2e
    86b4:	d004      	beq.n	86c0 <nmi_inet_addr+0x60>
    86b6:	2314      	movs	r3, #20
    86b8:	18fb      	adds	r3, r7, r3
    86ba:	781b      	ldrb	r3, [r3, #0]
    86bc:	2b00      	cmp	r3, #0
    86be:	d10d      	bne.n	86dc <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    86c0:	2316      	movs	r3, #22
    86c2:	18fb      	adds	r3, r7, r3
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	220c      	movs	r2, #12
    86c8:	18ba      	adds	r2, r7, r2
    86ca:	2117      	movs	r1, #23
    86cc:	1879      	adds	r1, r7, r1
    86ce:	7809      	ldrb	r1, [r1, #0]
    86d0:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    86d2:	2317      	movs	r3, #23
    86d4:	18fb      	adds	r3, r7, r3
    86d6:	2200      	movs	r2, #0
    86d8:	701a      	strb	r2, [r3, #0]
    86da:	e01d      	b.n	8718 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    86dc:	2314      	movs	r3, #20
    86de:	18fb      	adds	r3, r7, r3
    86e0:	781b      	ldrb	r3, [r3, #0]
    86e2:	2b2f      	cmp	r3, #47	; 0x2f
    86e4:	d916      	bls.n	8714 <nmi_inet_addr+0xb4>
    86e6:	2314      	movs	r3, #20
    86e8:	18fb      	adds	r3, r7, r3
    86ea:	781b      	ldrb	r3, [r3, #0]
    86ec:	2b39      	cmp	r3, #57	; 0x39
    86ee:	d811      	bhi.n	8714 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    86f0:	2317      	movs	r3, #23
    86f2:	18fb      	adds	r3, r7, r3
    86f4:	781b      	ldrb	r3, [r3, #0]
    86f6:	1c1a      	adds	r2, r3, #0
    86f8:	0092      	lsls	r2, r2, #2
    86fa:	18d3      	adds	r3, r2, r3
    86fc:	18db      	adds	r3, r3, r3
    86fe:	b2da      	uxtb	r2, r3
    8700:	2314      	movs	r3, #20
    8702:	18fb      	adds	r3, r7, r3
    8704:	781b      	ldrb	r3, [r3, #0]
    8706:	18d3      	adds	r3, r2, r3
    8708:	b2da      	uxtb	r2, r3
    870a:	2317      	movs	r3, #23
    870c:	18fb      	adds	r3, r7, r3
    870e:	3a30      	subs	r2, #48	; 0x30
    8710:	701a      	strb	r2, [r3, #0]
    8712:	e001      	b.n	8718 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    8714:	2300      	movs	r3, #0
    8716:	e021      	b.n	875c <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    8718:	687b      	ldr	r3, [r7, #4]
    871a:	3301      	adds	r3, #1
    871c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    871e:	2314      	movs	r3, #20
    8720:	18fb      	adds	r3, r7, r3
    8722:	781b      	ldrb	r3, [r3, #0]
    8724:	2b2e      	cmp	r3, #46	; 0x2e
    8726:	d004      	beq.n	8732 <nmi_inet_addr+0xd2>
    8728:	2314      	movs	r3, #20
    872a:	18fb      	adds	r3, r7, r3
    872c:	781b      	ldrb	r3, [r3, #0]
    872e:	2b00      	cmp	r3, #0
    8730:	d1a9      	bne.n	8686 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    8732:	2316      	movs	r3, #22
    8734:	18fb      	adds	r3, r7, r3
    8736:	2216      	movs	r2, #22
    8738:	18ba      	adds	r2, r7, r2
    873a:	7812      	ldrb	r2, [r2, #0]
    873c:	3201      	adds	r2, #1
    873e:	701a      	strb	r2, [r3, #0]
    8740:	2316      	movs	r3, #22
    8742:	18fb      	adds	r3, r7, r3
    8744:	781b      	ldrb	r3, [r3, #0]
    8746:	2b03      	cmp	r3, #3
    8748:	d999      	bls.n	867e <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    874a:	230c      	movs	r3, #12
    874c:	18f9      	adds	r1, r7, r3
    874e:	2310      	movs	r3, #16
    8750:	18fb      	adds	r3, r7, r3
    8752:	2204      	movs	r2, #4
    8754:	0018      	movs	r0, r3
    8756:	4b03      	ldr	r3, [pc, #12]	; (8764 <nmi_inet_addr+0x104>)
    8758:	4798      	blx	r3
	return u32IP;
    875a:	693b      	ldr	r3, [r7, #16]
}
    875c:	0018      	movs	r0, r3
    875e:	46bd      	mov	sp, r7
    8760:	b006      	add	sp, #24
    8762:	bd80      	pop	{r7, pc}
    8764:	00003b31 	.word	0x00003b31

00008768 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    8768:	b5b0      	push	{r4, r5, r7, lr}
    876a:	b088      	sub	sp, #32
    876c:	af04      	add	r7, sp, #16
    876e:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    8770:	230f      	movs	r3, #15
    8772:	18fb      	adds	r3, r7, r3
    8774:	22fa      	movs	r2, #250	; 0xfa
    8776:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    8778:	687b      	ldr	r3, [r7, #4]
    877a:	0018      	movs	r0, r3
    877c:	4b14      	ldr	r3, [pc, #80]	; (87d0 <gethostbyname+0x68>)
    877e:	4798      	blx	r3
    8780:	0003      	movs	r3, r0
    8782:	001a      	movs	r2, r3
    8784:	230e      	movs	r3, #14
    8786:	18fb      	adds	r3, r7, r3
    8788:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    878a:	230e      	movs	r3, #14
    878c:	18fb      	adds	r3, r7, r3
    878e:	781b      	ldrb	r3, [r3, #0]
    8790:	2b40      	cmp	r3, #64	; 0x40
    8792:	d815      	bhi.n	87c0 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    8794:	230e      	movs	r3, #14
    8796:	18fb      	adds	r3, r7, r3
    8798:	781b      	ldrb	r3, [r3, #0]
    879a:	b29b      	uxth	r3, r3
    879c:	3301      	adds	r3, #1
    879e:	b299      	uxth	r1, r3
    87a0:	230f      	movs	r3, #15
    87a2:	18fc      	adds	r4, r7, r3
    87a4:	687a      	ldr	r2, [r7, #4]
    87a6:	2300      	movs	r3, #0
    87a8:	9302      	str	r3, [sp, #8]
    87aa:	2300      	movs	r3, #0
    87ac:	9301      	str	r3, [sp, #4]
    87ae:	2300      	movs	r3, #0
    87b0:	9300      	str	r3, [sp, #0]
    87b2:	000b      	movs	r3, r1
    87b4:	214a      	movs	r1, #74	; 0x4a
    87b6:	2002      	movs	r0, #2
    87b8:	4d06      	ldr	r5, [pc, #24]	; (87d4 <gethostbyname+0x6c>)
    87ba:	47a8      	blx	r5
    87bc:	0003      	movs	r3, r0
    87be:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    87c0:	230f      	movs	r3, #15
    87c2:	18fb      	adds	r3, r7, r3
    87c4:	781b      	ldrb	r3, [r3, #0]
    87c6:	b25b      	sxtb	r3, r3
}
    87c8:	0018      	movs	r0, r3
    87ca:	46bd      	mov	sp, r7
    87cc:	b004      	add	sp, #16
    87ce:	bdb0      	pop	{r4, r5, r7, pc}
    87d0:	00003bab 	.word	0x00003bab
    87d4:	00003dcd 	.word	0x00003dcd

000087d8 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    87d8:	b580      	push	{r7, lr}
    87da:	b082      	sub	sp, #8
    87dc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    87de:	003b      	movs	r3, r7
    87e0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    87e2:	687b      	ldr	r3, [r7, #4]
    87e4:	22b9      	movs	r2, #185	; 0xb9
    87e6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    87e8:	4b13      	ldr	r3, [pc, #76]	; (8838 <spi_flash_enter_low_power_mode+0x60>)
    87ea:	2100      	movs	r1, #0
    87ec:	0018      	movs	r0, r3
    87ee:	4b13      	ldr	r3, [pc, #76]	; (883c <spi_flash_enter_low_power_mode+0x64>)
    87f0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    87f2:	687b      	ldr	r3, [r7, #4]
    87f4:	781b      	ldrb	r3, [r3, #0]
    87f6:	001a      	movs	r2, r3
    87f8:	4b11      	ldr	r3, [pc, #68]	; (8840 <spi_flash_enter_low_power_mode+0x68>)
    87fa:	0011      	movs	r1, r2
    87fc:	0018      	movs	r0, r3
    87fe:	4b0f      	ldr	r3, [pc, #60]	; (883c <spi_flash_enter_low_power_mode+0x64>)
    8800:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8802:	4b10      	ldr	r3, [pc, #64]	; (8844 <spi_flash_enter_low_power_mode+0x6c>)
    8804:	2101      	movs	r1, #1
    8806:	0018      	movs	r0, r3
    8808:	4b0c      	ldr	r3, [pc, #48]	; (883c <spi_flash_enter_low_power_mode+0x64>)
    880a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    880c:	4b0e      	ldr	r3, [pc, #56]	; (8848 <spi_flash_enter_low_power_mode+0x70>)
    880e:	2100      	movs	r1, #0
    8810:	0018      	movs	r0, r3
    8812:	4b0a      	ldr	r3, [pc, #40]	; (883c <spi_flash_enter_low_power_mode+0x64>)
    8814:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    8816:	4b0d      	ldr	r3, [pc, #52]	; (884c <spi_flash_enter_low_power_mode+0x74>)
    8818:	2181      	movs	r1, #129	; 0x81
    881a:	0018      	movs	r0, r3
    881c:	4b07      	ldr	r3, [pc, #28]	; (883c <spi_flash_enter_low_power_mode+0x64>)
    881e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8820:	46c0      	nop			; (mov r8, r8)
    8822:	4b0b      	ldr	r3, [pc, #44]	; (8850 <spi_flash_enter_low_power_mode+0x78>)
    8824:	0018      	movs	r0, r3
    8826:	4b0b      	ldr	r3, [pc, #44]	; (8854 <spi_flash_enter_low_power_mode+0x7c>)
    8828:	4798      	blx	r3
    882a:	0003      	movs	r3, r0
    882c:	2b01      	cmp	r3, #1
    882e:	d1f8      	bne.n	8822 <spi_flash_enter_low_power_mode+0x4a>
}
    8830:	46c0      	nop			; (mov r8, r8)
    8832:	46bd      	mov	sp, r7
    8834:	b002      	add	sp, #8
    8836:	bd80      	pop	{r7, pc}
    8838:	00010208 	.word	0x00010208
    883c:	00005bcd 	.word	0x00005bcd
    8840:	0001020c 	.word	0x0001020c
    8844:	00010214 	.word	0x00010214
    8848:	0001021c 	.word	0x0001021c
    884c:	00010204 	.word	0x00010204
    8850:	00010218 	.word	0x00010218
    8854:	00005b89 	.word	0x00005b89

00008858 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    8858:	b580      	push	{r7, lr}
    885a:	b082      	sub	sp, #8
    885c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    885e:	003b      	movs	r3, r7
    8860:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    8862:	687b      	ldr	r3, [r7, #4]
    8864:	22ab      	movs	r2, #171	; 0xab
    8866:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8868:	4b13      	ldr	r3, [pc, #76]	; (88b8 <spi_flash_leave_low_power_mode+0x60>)
    886a:	2100      	movs	r1, #0
    886c:	0018      	movs	r0, r3
    886e:	4b13      	ldr	r3, [pc, #76]	; (88bc <spi_flash_leave_low_power_mode+0x64>)
    8870:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8872:	687b      	ldr	r3, [r7, #4]
    8874:	781b      	ldrb	r3, [r3, #0]
    8876:	001a      	movs	r2, r3
    8878:	4b11      	ldr	r3, [pc, #68]	; (88c0 <spi_flash_leave_low_power_mode+0x68>)
    887a:	0011      	movs	r1, r2
    887c:	0018      	movs	r0, r3
    887e:	4b0f      	ldr	r3, [pc, #60]	; (88bc <spi_flash_leave_low_power_mode+0x64>)
    8880:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8882:	4b10      	ldr	r3, [pc, #64]	; (88c4 <spi_flash_leave_low_power_mode+0x6c>)
    8884:	2101      	movs	r1, #1
    8886:	0018      	movs	r0, r3
    8888:	4b0c      	ldr	r3, [pc, #48]	; (88bc <spi_flash_leave_low_power_mode+0x64>)
    888a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    888c:	4b0e      	ldr	r3, [pc, #56]	; (88c8 <spi_flash_leave_low_power_mode+0x70>)
    888e:	2100      	movs	r1, #0
    8890:	0018      	movs	r0, r3
    8892:	4b0a      	ldr	r3, [pc, #40]	; (88bc <spi_flash_leave_low_power_mode+0x64>)
    8894:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    8896:	4b0d      	ldr	r3, [pc, #52]	; (88cc <spi_flash_leave_low_power_mode+0x74>)
    8898:	2181      	movs	r1, #129	; 0x81
    889a:	0018      	movs	r0, r3
    889c:	4b07      	ldr	r3, [pc, #28]	; (88bc <spi_flash_leave_low_power_mode+0x64>)
    889e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    88a0:	46c0      	nop			; (mov r8, r8)
    88a2:	4b0b      	ldr	r3, [pc, #44]	; (88d0 <spi_flash_leave_low_power_mode+0x78>)
    88a4:	0018      	movs	r0, r3
    88a6:	4b0b      	ldr	r3, [pc, #44]	; (88d4 <spi_flash_leave_low_power_mode+0x7c>)
    88a8:	4798      	blx	r3
    88aa:	0003      	movs	r3, r0
    88ac:	2b01      	cmp	r3, #1
    88ae:	d1f8      	bne.n	88a2 <spi_flash_leave_low_power_mode+0x4a>
}
    88b0:	46c0      	nop			; (mov r8, r8)
    88b2:	46bd      	mov	sp, r7
    88b4:	b002      	add	sp, #8
    88b6:	bd80      	pop	{r7, pc}
    88b8:	00010208 	.word	0x00010208
    88bc:	00005bcd 	.word	0x00005bcd
    88c0:	0001020c 	.word	0x0001020c
    88c4:	00010214 	.word	0x00010214
    88c8:	0001021c 	.word	0x0001021c
    88cc:	00010204 	.word	0x00010204
    88d0:	00010218 	.word	0x00010218
    88d4:	00005b89 	.word	0x00005b89

000088d8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    88d8:	b590      	push	{r4, r7, lr}
    88da:	b085      	sub	sp, #20
    88dc:	af00      	add	r7, sp, #0
    88de:	0002      	movs	r2, r0
    88e0:	1dfb      	adds	r3, r7, #7
    88e2:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    88e4:	230f      	movs	r3, #15
    88e6:	18fb      	adds	r3, r7, r3
    88e8:	2200      	movs	r2, #0
    88ea:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    88ec:	4b24      	ldr	r3, [pc, #144]	; (8980 <spi_flash_enable+0xa8>)
    88ee:	4798      	blx	r3
    88f0:	0003      	movs	r3, r0
    88f2:	051b      	lsls	r3, r3, #20
    88f4:	0d1b      	lsrs	r3, r3, #20
    88f6:	4a23      	ldr	r2, [pc, #140]	; (8984 <spi_flash_enable+0xac>)
    88f8:	4293      	cmp	r3, r2
    88fa:	d938      	bls.n	896e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    88fc:	230f      	movs	r3, #15
    88fe:	18fc      	adds	r4, r7, r3
    8900:	2308      	movs	r3, #8
    8902:	18fb      	adds	r3, r7, r3
    8904:	4a20      	ldr	r2, [pc, #128]	; (8988 <spi_flash_enable+0xb0>)
    8906:	0019      	movs	r1, r3
    8908:	0010      	movs	r0, r2
    890a:	4b20      	ldr	r3, [pc, #128]	; (898c <spi_flash_enable+0xb4>)
    890c:	4798      	blx	r3
    890e:	0003      	movs	r3, r0
    8910:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    8912:	230f      	movs	r3, #15
    8914:	18fb      	adds	r3, r7, r3
    8916:	781b      	ldrb	r3, [r3, #0]
    8918:	b25b      	sxtb	r3, r3
    891a:	2b00      	cmp	r3, #0
    891c:	d126      	bne.n	896c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    891e:	68bb      	ldr	r3, [r7, #8]
    8920:	4a1b      	ldr	r2, [pc, #108]	; (8990 <spi_flash_enable+0xb8>)
    8922:	4013      	ands	r3, r2
    8924:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    8926:	68bb      	ldr	r3, [r7, #8]
    8928:	4a1a      	ldr	r2, [pc, #104]	; (8994 <spi_flash_enable+0xbc>)
    892a:	4313      	orrs	r3, r2
    892c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    892e:	68bb      	ldr	r3, [r7, #8]
    8930:	4a15      	ldr	r2, [pc, #84]	; (8988 <spi_flash_enable+0xb0>)
    8932:	0019      	movs	r1, r3
    8934:	0010      	movs	r0, r2
    8936:	4b18      	ldr	r3, [pc, #96]	; (8998 <spi_flash_enable+0xc0>)
    8938:	4798      	blx	r3
		if(enable) {
    893a:	1dfb      	adds	r3, r7, #7
    893c:	781b      	ldrb	r3, [r3, #0]
    893e:	2b00      	cmp	r3, #0
    8940:	d002      	beq.n	8948 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    8942:	4b16      	ldr	r3, [pc, #88]	; (899c <spi_flash_enable+0xc4>)
    8944:	4798      	blx	r3
    8946:	e001      	b.n	894c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    8948:	4b15      	ldr	r3, [pc, #84]	; (89a0 <spi_flash_enable+0xc8>)
    894a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    894c:	68bb      	ldr	r3, [r7, #8]
    894e:	4a10      	ldr	r2, [pc, #64]	; (8990 <spi_flash_enable+0xb8>)
    8950:	4013      	ands	r3, r2
    8952:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    8954:	68bb      	ldr	r3, [r7, #8]
    8956:	2280      	movs	r2, #128	; 0x80
    8958:	0252      	lsls	r2, r2, #9
    895a:	4313      	orrs	r3, r2
    895c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    895e:	68bb      	ldr	r3, [r7, #8]
    8960:	4a09      	ldr	r2, [pc, #36]	; (8988 <spi_flash_enable+0xb0>)
    8962:	0019      	movs	r1, r3
    8964:	0010      	movs	r0, r2
    8966:	4b0c      	ldr	r3, [pc, #48]	; (8998 <spi_flash_enable+0xc0>)
    8968:	4798      	blx	r3
    896a:	e000      	b.n	896e <spi_flash_enable+0x96>
			goto ERR1;
    896c:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    896e:	230f      	movs	r3, #15
    8970:	18fb      	adds	r3, r7, r3
    8972:	781b      	ldrb	r3, [r3, #0]
    8974:	b25b      	sxtb	r3, r3
}
    8976:	0018      	movs	r0, r3
    8978:	46bd      	mov	sp, r7
    897a:	b005      	add	sp, #20
    897c:	bd90      	pop	{r4, r7, pc}
    897e:	46c0      	nop			; (mov r8, r8)
    8980:	000054ad 	.word	0x000054ad
    8984:	0000039f 	.word	0x0000039f
    8988:	00001410 	.word	0x00001410
    898c:	00005ba9 	.word	0x00005ba9
    8990:	f8888fff 	.word	0xf8888fff
    8994:	01111000 	.word	0x01111000
    8998:	00005bcd 	.word	0x00005bcd
    899c:	00008859 	.word	0x00008859
    89a0:	000087d9 	.word	0x000087d9

000089a4 <_crc32_recalculate_bytes_helper>:
 *
 * \attention This implementation assumes a little-endian architecture.
 */
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
    89a4:	b580      	push	{r7, lr}
    89a6:	b086      	sub	sp, #24
    89a8:	af00      	add	r7, sp, #0
    89aa:	60f8      	str	r0, [r7, #12]
    89ac:	60b9      	str	r1, [r7, #8]
    89ae:	607a      	str	r2, [r7, #4]
	uint_fast8_t bit;

	crc ^= data;
    89b0:	68ba      	ldr	r2, [r7, #8]
    89b2:	68fb      	ldr	r3, [r7, #12]
    89b4:	4053      	eors	r3, r2
    89b6:	60bb      	str	r3, [r7, #8]

	for (bit = 8 * bytes; bit > 0; bit--) {
    89b8:	687b      	ldr	r3, [r7, #4]
    89ba:	00db      	lsls	r3, r3, #3
    89bc:	617b      	str	r3, [r7, #20]
    89be:	e00f      	b.n	89e0 <_crc32_recalculate_bytes_helper+0x3c>
		if (crc & 1) {
    89c0:	68bb      	ldr	r3, [r7, #8]
    89c2:	2201      	movs	r2, #1
    89c4:	4013      	ands	r3, r2
    89c6:	d005      	beq.n	89d4 <_crc32_recalculate_bytes_helper+0x30>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    89c8:	68bb      	ldr	r3, [r7, #8]
    89ca:	085b      	lsrs	r3, r3, #1
    89cc:	4a08      	ldr	r2, [pc, #32]	; (89f0 <_crc32_recalculate_bytes_helper+0x4c>)
    89ce:	4053      	eors	r3, r2
    89d0:	60bb      	str	r3, [r7, #8]
    89d2:	e002      	b.n	89da <_crc32_recalculate_bytes_helper+0x36>
		} else {
			crc >>= 1;
    89d4:	68bb      	ldr	r3, [r7, #8]
    89d6:	085b      	lsrs	r3, r3, #1
    89d8:	60bb      	str	r3, [r7, #8]
	for (bit = 8 * bytes; bit > 0; bit--) {
    89da:	697b      	ldr	r3, [r7, #20]
    89dc:	3b01      	subs	r3, #1
    89de:	617b      	str	r3, [r7, #20]
    89e0:	697b      	ldr	r3, [r7, #20]
    89e2:	2b00      	cmp	r3, #0
    89e4:	d1ec      	bne.n	89c0 <_crc32_recalculate_bytes_helper+0x1c>
		}
	}

	return crc;
    89e6:	68bb      	ldr	r3, [r7, #8]
}
    89e8:	0018      	movs	r0, r3
    89ea:	46bd      	mov	sp, r7
    89ec:	b006      	add	sp, #24
    89ee:	bd80      	pop	{r7, pc}
    89f0:	edb88320 	.word	0xedb88320

000089f4 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    89f4:	b580      	push	{r7, lr}
    89f6:	b088      	sub	sp, #32
    89f8:	af00      	add	r7, sp, #0
    89fa:	60f8      	str	r0, [r7, #12]
    89fc:	60b9      	str	r1, [r7, #8]
    89fe:	607a      	str	r2, [r7, #4]
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    8a00:	68fb      	ldr	r3, [r7, #12]
    8a02:	2203      	movs	r2, #3
    8a04:	4393      	bics	r3, r2
	const word_t *word_ptr =
    8a06:	61fb      	str	r3, [r7, #28]
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    8a08:	687b      	ldr	r3, [r7, #4]
    8a0a:	681b      	ldr	r3, [r3, #0]
    8a0c:	43db      	mvns	r3, r3
    8a0e:	617b      	str	r3, [r7, #20]
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
    8a10:	68bb      	ldr	r3, [r7, #8]
    8a12:	2b03      	cmp	r3, #3
    8a14:	d802      	bhi.n	8a1c <crc32_recalculate+0x28>
		temp_length = length;
    8a16:	68bb      	ldr	r3, [r7, #8]
    8a18:	61bb      	str	r3, [r7, #24]
    8a1a:	e004      	b.n	8a26 <crc32_recalculate+0x32>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    8a1c:	68fb      	ldr	r3, [r7, #12]
    8a1e:	425b      	negs	r3, r3
    8a20:	2203      	movs	r2, #3
    8a22:	4013      	ands	r3, r2
    8a24:	61bb      	str	r3, [r7, #24]
	}

	if (temp_length) {
    8a26:	69bb      	ldr	r3, [r7, #24]
    8a28:	2b00      	cmp	r3, #0
    8a2a:	d01a      	beq.n	8a62 <crc32_recalculate+0x6e>
		length -= temp_length;
    8a2c:	68ba      	ldr	r2, [r7, #8]
    8a2e:	69bb      	ldr	r3, [r7, #24]
    8a30:	1ad3      	subs	r3, r2, r3
    8a32:	60bb      	str	r3, [r7, #8]

		word = *(word_ptr++);
    8a34:	69fb      	ldr	r3, [r7, #28]
    8a36:	1d1a      	adds	r2, r3, #4
    8a38:	61fa      	str	r2, [r7, #28]
    8a3a:	681b      	ldr	r3, [r3, #0]
    8a3c:	613b      	str	r3, [r7, #16]
		word >>= 8 * (WORD_SIZE - temp_length);
    8a3e:	69ba      	ldr	r2, [r7, #24]
    8a40:	0013      	movs	r3, r2
    8a42:	075b      	lsls	r3, r3, #29
    8a44:	1a9b      	subs	r3, r3, r2
    8a46:	00db      	lsls	r3, r3, #3
    8a48:	3320      	adds	r3, #32
    8a4a:	693a      	ldr	r2, [r7, #16]
    8a4c:	40da      	lsrs	r2, r3
    8a4e:	0013      	movs	r3, r2
    8a50:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
    8a52:	69ba      	ldr	r2, [r7, #24]
    8a54:	6979      	ldr	r1, [r7, #20]
    8a56:	693b      	ldr	r3, [r7, #16]
    8a58:	0018      	movs	r0, r3
    8a5a:	4b24      	ldr	r3, [pc, #144]	; (8aec <crc32_recalculate+0xf8>)
    8a5c:	4798      	blx	r3
    8a5e:	0003      	movs	r3, r0
    8a60:	617b      	str	r3, [r7, #20]
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    8a62:	68bb      	ldr	r3, [r7, #8]
    8a64:	2203      	movs	r2, #3
    8a66:	4393      	bics	r3, r2
    8a68:	61bb      	str	r3, [r7, #24]

	if (temp_length) {
    8a6a:	69bb      	ldr	r3, [r7, #24]
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	d019      	beq.n	8aa4 <crc32_recalculate+0xb0>
		length -= temp_length;
    8a70:	68ba      	ldr	r2, [r7, #8]
    8a72:	69bb      	ldr	r3, [r7, #24]
    8a74:	1ad3      	subs	r3, r2, r3
    8a76:	60bb      	str	r3, [r7, #8]
		temp_length /= WORD_SIZE;
    8a78:	69bb      	ldr	r3, [r7, #24]
    8a7a:	089b      	lsrs	r3, r3, #2
    8a7c:	61bb      	str	r3, [r7, #24]

		while (temp_length--) {
    8a7e:	e00c      	b.n	8a9a <crc32_recalculate+0xa6>
			word = *(word_ptr++);
    8a80:	69fb      	ldr	r3, [r7, #28]
    8a82:	1d1a      	adds	r2, r3, #4
    8a84:	61fa      	str	r2, [r7, #28]
    8a86:	681b      	ldr	r3, [r3, #0]
    8a88:	613b      	str	r3, [r7, #16]
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
    8a8a:	6979      	ldr	r1, [r7, #20]
    8a8c:	693b      	ldr	r3, [r7, #16]
    8a8e:	2204      	movs	r2, #4
    8a90:	0018      	movs	r0, r3
    8a92:	4b16      	ldr	r3, [pc, #88]	; (8aec <crc32_recalculate+0xf8>)
    8a94:	4798      	blx	r3
    8a96:	0003      	movs	r3, r0
    8a98:	617b      	str	r3, [r7, #20]
		while (temp_length--) {
    8a9a:	69bb      	ldr	r3, [r7, #24]
    8a9c:	1e5a      	subs	r2, r3, #1
    8a9e:	61ba      	str	r2, [r7, #24]
    8aa0:	2b00      	cmp	r3, #0
    8aa2:	d1ed      	bne.n	8a80 <crc32_recalculate+0x8c>
		}
	}

	// Calculate for tailing bytes
	if (length) {
    8aa4:	68bb      	ldr	r3, [r7, #8]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d016      	beq.n	8ad8 <crc32_recalculate+0xe4>
		word = *word_ptr;
    8aaa:	69fb      	ldr	r3, [r7, #28]
    8aac:	681b      	ldr	r3, [r3, #0]
    8aae:	613b      	str	r3, [r7, #16]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    8ab0:	68ba      	ldr	r2, [r7, #8]
    8ab2:	0013      	movs	r3, r2
    8ab4:	075b      	lsls	r3, r3, #29
    8ab6:	1a9b      	subs	r3, r3, r2
    8ab8:	00db      	lsls	r3, r3, #3
    8aba:	3320      	adds	r3, #32
    8abc:	2201      	movs	r2, #1
    8abe:	4252      	negs	r2, r2
    8ac0:	40da      	lsrs	r2, r3
    8ac2:	693b      	ldr	r3, [r7, #16]
    8ac4:	4013      	ands	r3, r2
    8ac6:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
    8ac8:	68ba      	ldr	r2, [r7, #8]
    8aca:	6979      	ldr	r1, [r7, #20]
    8acc:	693b      	ldr	r3, [r7, #16]
    8ace:	0018      	movs	r0, r3
    8ad0:	4b06      	ldr	r3, [pc, #24]	; (8aec <crc32_recalculate+0xf8>)
    8ad2:	4798      	blx	r3
    8ad4:	0003      	movs	r3, r0
    8ad6:	617b      	str	r3, [r7, #20]
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    8ad8:	697b      	ldr	r3, [r7, #20]
    8ada:	43da      	mvns	r2, r3
    8adc:	687b      	ldr	r3, [r7, #4]
    8ade:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    8ae0:	2300      	movs	r3, #0
    8ae2:	0018      	movs	r0, r3
    8ae4:	46bd      	mov	sp, r7
    8ae6:	b008      	add	sp, #32
    8ae8:	bd80      	pop	{r7, pc}
    8aea:	46c0      	nop			; (mov r8, r8)
    8aec:	000089a5 	.word	0x000089a5

00008af0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    8af0:	b580      	push	{r7, lr}
    8af2:	b084      	sub	sp, #16
    8af4:	af00      	add	r7, sp, #0
    8af6:	0002      	movs	r2, r0
    8af8:	1dfb      	adds	r3, r7, #7
    8afa:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    8afc:	230f      	movs	r3, #15
    8afe:	18fb      	adds	r3, r7, r3
    8b00:	1dfa      	adds	r2, r7, #7
    8b02:	7812      	ldrb	r2, [r2, #0]
    8b04:	0952      	lsrs	r2, r2, #5
    8b06:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    8b08:	230f      	movs	r3, #15
    8b0a:	18fb      	adds	r3, r7, r3
    8b0c:	781b      	ldrb	r3, [r3, #0]
    8b0e:	2b00      	cmp	r3, #0
    8b10:	d10c      	bne.n	8b2c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8b12:	4b09      	ldr	r3, [pc, #36]	; (8b38 <_extint_get_eic_from_channel+0x48>)
    8b14:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    8b16:	230f      	movs	r3, #15
    8b18:	18fb      	adds	r3, r7, r3
    8b1a:	781b      	ldrb	r3, [r3, #0]
    8b1c:	009b      	lsls	r3, r3, #2
    8b1e:	2210      	movs	r2, #16
    8b20:	4694      	mov	ip, r2
    8b22:	44bc      	add	ip, r7
    8b24:	4463      	add	r3, ip
    8b26:	3b08      	subs	r3, #8
    8b28:	681b      	ldr	r3, [r3, #0]
    8b2a:	e000      	b.n	8b2e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    8b2c:	2300      	movs	r3, #0
	}
}
    8b2e:	0018      	movs	r0, r3
    8b30:	46bd      	mov	sp, r7
    8b32:	b004      	add	sp, #16
    8b34:	bd80      	pop	{r7, pc}
    8b36:	46c0      	nop			; (mov r8, r8)
    8b38:	40001800 	.word	0x40001800

00008b3c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    8b3c:	b580      	push	{r7, lr}
    8b3e:	b084      	sub	sp, #16
    8b40:	af00      	add	r7, sp, #0
    8b42:	0002      	movs	r2, r0
    8b44:	1dfb      	adds	r3, r7, #7
    8b46:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    8b48:	1dfb      	adds	r3, r7, #7
    8b4a:	781b      	ldrb	r3, [r3, #0]
    8b4c:	0018      	movs	r0, r3
    8b4e:	4b0b      	ldr	r3, [pc, #44]	; (8b7c <extint_chan_is_detected+0x40>)
    8b50:	4798      	blx	r3
    8b52:	0003      	movs	r3, r0
    8b54:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    8b56:	1dfb      	adds	r3, r7, #7
    8b58:	781b      	ldrb	r3, [r3, #0]
    8b5a:	221f      	movs	r2, #31
    8b5c:	4013      	ands	r3, r2
    8b5e:	2201      	movs	r2, #1
    8b60:	409a      	lsls	r2, r3
    8b62:	0013      	movs	r3, r2
    8b64:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    8b66:	68fb      	ldr	r3, [r7, #12]
    8b68:	691b      	ldr	r3, [r3, #16]
    8b6a:	68ba      	ldr	r2, [r7, #8]
    8b6c:	4013      	ands	r3, r2
    8b6e:	1e5a      	subs	r2, r3, #1
    8b70:	4193      	sbcs	r3, r2
    8b72:	b2db      	uxtb	r3, r3
}
    8b74:	0018      	movs	r0, r3
    8b76:	46bd      	mov	sp, r7
    8b78:	b004      	add	sp, #16
    8b7a:	bd80      	pop	{r7, pc}
    8b7c:	00008af1 	.word	0x00008af1

00008b80 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	b084      	sub	sp, #16
    8b84:	af00      	add	r7, sp, #0
    8b86:	0002      	movs	r2, r0
    8b88:	1dfb      	adds	r3, r7, #7
    8b8a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    8b8c:	1dfb      	adds	r3, r7, #7
    8b8e:	781b      	ldrb	r3, [r3, #0]
    8b90:	0018      	movs	r0, r3
    8b92:	4b09      	ldr	r3, [pc, #36]	; (8bb8 <extint_chan_clear_detected+0x38>)
    8b94:	4798      	blx	r3
    8b96:	0003      	movs	r3, r0
    8b98:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    8b9a:	1dfb      	adds	r3, r7, #7
    8b9c:	781b      	ldrb	r3, [r3, #0]
    8b9e:	221f      	movs	r2, #31
    8ba0:	4013      	ands	r3, r2
    8ba2:	2201      	movs	r2, #1
    8ba4:	409a      	lsls	r2, r3
    8ba6:	0013      	movs	r3, r2
    8ba8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    8baa:	68fb      	ldr	r3, [r7, #12]
    8bac:	68ba      	ldr	r2, [r7, #8]
    8bae:	611a      	str	r2, [r3, #16]
}
    8bb0:	46c0      	nop			; (mov r8, r8)
    8bb2:	46bd      	mov	sp, r7
    8bb4:	b004      	add	sp, #16
    8bb6:	bd80      	pop	{r7, pc}
    8bb8:	00008af1 	.word	0x00008af1

00008bbc <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    8bbc:	b580      	push	{r7, lr}
    8bbe:	b082      	sub	sp, #8
    8bc0:	af00      	add	r7, sp, #0
    8bc2:	6078      	str	r0, [r7, #4]
    8bc4:	0008      	movs	r0, r1
    8bc6:	0011      	movs	r1, r2
    8bc8:	1cfb      	adds	r3, r7, #3
    8bca:	1c02      	adds	r2, r0, #0
    8bcc:	701a      	strb	r2, [r3, #0]
    8bce:	1cbb      	adds	r3, r7, #2
    8bd0:	1c0a      	adds	r2, r1, #0
    8bd2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    8bd4:	1cbb      	adds	r3, r7, #2
    8bd6:	781b      	ldrb	r3, [r3, #0]
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d001      	beq.n	8be0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8bdc:	2317      	movs	r3, #23
    8bde:	e019      	b.n	8c14 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    8be0:	1cfb      	adds	r3, r7, #3
    8be2:	781a      	ldrb	r2, [r3, #0]
    8be4:	4b0d      	ldr	r3, [pc, #52]	; (8c1c <extint_register_callback+0x60>)
    8be6:	0092      	lsls	r2, r2, #2
    8be8:	58d3      	ldr	r3, [r2, r3]
    8bea:	2b00      	cmp	r3, #0
    8bec:	d107      	bne.n	8bfe <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    8bee:	1cfb      	adds	r3, r7, #3
    8bf0:	781a      	ldrb	r2, [r3, #0]
    8bf2:	4b0a      	ldr	r3, [pc, #40]	; (8c1c <extint_register_callback+0x60>)
    8bf4:	0092      	lsls	r2, r2, #2
    8bf6:	6879      	ldr	r1, [r7, #4]
    8bf8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    8bfa:	2300      	movs	r3, #0
    8bfc:	e00a      	b.n	8c14 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    8bfe:	1cfb      	adds	r3, r7, #3
    8c00:	781a      	ldrb	r2, [r3, #0]
    8c02:	4b06      	ldr	r3, [pc, #24]	; (8c1c <extint_register_callback+0x60>)
    8c04:	0092      	lsls	r2, r2, #2
    8c06:	58d2      	ldr	r2, [r2, r3]
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	429a      	cmp	r2, r3
    8c0c:	d101      	bne.n	8c12 <extint_register_callback+0x56>
		return STATUS_OK;
    8c0e:	2300      	movs	r3, #0
    8c10:	e000      	b.n	8c14 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    8c12:	231d      	movs	r3, #29
}
    8c14:	0018      	movs	r0, r3
    8c16:	46bd      	mov	sp, r7
    8c18:	b002      	add	sp, #8
    8c1a:	bd80      	pop	{r7, pc}
    8c1c:	200006dc 	.word	0x200006dc

00008c20 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    8c20:	b580      	push	{r7, lr}
    8c22:	b084      	sub	sp, #16
    8c24:	af00      	add	r7, sp, #0
    8c26:	0002      	movs	r2, r0
    8c28:	1dfb      	adds	r3, r7, #7
    8c2a:	701a      	strb	r2, [r3, #0]
    8c2c:	1dbb      	adds	r3, r7, #6
    8c2e:	1c0a      	adds	r2, r1, #0
    8c30:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    8c32:	1dbb      	adds	r3, r7, #6
    8c34:	781b      	ldrb	r3, [r3, #0]
    8c36:	2b00      	cmp	r3, #0
    8c38:	d10e      	bne.n	8c58 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    8c3a:	1dfb      	adds	r3, r7, #7
    8c3c:	781b      	ldrb	r3, [r3, #0]
    8c3e:	0018      	movs	r0, r3
    8c40:	4b08      	ldr	r3, [pc, #32]	; (8c64 <extint_chan_enable_callback+0x44>)
    8c42:	4798      	blx	r3
    8c44:	0003      	movs	r3, r0
    8c46:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    8c48:	1dfb      	adds	r3, r7, #7
    8c4a:	781b      	ldrb	r3, [r3, #0]
    8c4c:	2201      	movs	r2, #1
    8c4e:	409a      	lsls	r2, r3
    8c50:	68fb      	ldr	r3, [r7, #12]
    8c52:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    8c54:	2300      	movs	r3, #0
    8c56:	e000      	b.n	8c5a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    8c58:	2317      	movs	r3, #23
}
    8c5a:	0018      	movs	r0, r3
    8c5c:	46bd      	mov	sp, r7
    8c5e:	b004      	add	sp, #16
    8c60:	bd80      	pop	{r7, pc}
    8c62:	46c0      	nop			; (mov r8, r8)
    8c64:	00008af1 	.word	0x00008af1

00008c68 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    8c68:	b580      	push	{r7, lr}
    8c6a:	b084      	sub	sp, #16
    8c6c:	af00      	add	r7, sp, #0
    8c6e:	0002      	movs	r2, r0
    8c70:	1dfb      	adds	r3, r7, #7
    8c72:	701a      	strb	r2, [r3, #0]
    8c74:	1dbb      	adds	r3, r7, #6
    8c76:	1c0a      	adds	r2, r1, #0
    8c78:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    8c7a:	1dbb      	adds	r3, r7, #6
    8c7c:	781b      	ldrb	r3, [r3, #0]
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d10e      	bne.n	8ca0 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    8c82:	1dfb      	adds	r3, r7, #7
    8c84:	781b      	ldrb	r3, [r3, #0]
    8c86:	0018      	movs	r0, r3
    8c88:	4b08      	ldr	r3, [pc, #32]	; (8cac <extint_chan_disable_callback+0x44>)
    8c8a:	4798      	blx	r3
    8c8c:	0003      	movs	r3, r0
    8c8e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    8c90:	1dfb      	adds	r3, r7, #7
    8c92:	781b      	ldrb	r3, [r3, #0]
    8c94:	2201      	movs	r2, #1
    8c96:	409a      	lsls	r2, r3
    8c98:	68fb      	ldr	r3, [r7, #12]
    8c9a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    8c9c:	2300      	movs	r3, #0
    8c9e:	e000      	b.n	8ca2 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    8ca0:	2317      	movs	r3, #23
}
    8ca2:	0018      	movs	r0, r3
    8ca4:	46bd      	mov	sp, r7
    8ca6:	b004      	add	sp, #16
    8ca8:	bd80      	pop	{r7, pc}
    8caa:	46c0      	nop			; (mov r8, r8)
    8cac:	00008af1 	.word	0x00008af1

00008cb0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    8cb0:	b580      	push	{r7, lr}
    8cb2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    8cb4:	4b15      	ldr	r3, [pc, #84]	; (8d0c <EIC_Handler+0x5c>)
    8cb6:	2200      	movs	r2, #0
    8cb8:	701a      	strb	r2, [r3, #0]
    8cba:	e020      	b.n	8cfe <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    8cbc:	4b13      	ldr	r3, [pc, #76]	; (8d0c <EIC_Handler+0x5c>)
    8cbe:	781b      	ldrb	r3, [r3, #0]
    8cc0:	0018      	movs	r0, r3
    8cc2:	4b13      	ldr	r3, [pc, #76]	; (8d10 <EIC_Handler+0x60>)
    8cc4:	4798      	blx	r3
    8cc6:	1e03      	subs	r3, r0, #0
    8cc8:	d013      	beq.n	8cf2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    8cca:	4b10      	ldr	r3, [pc, #64]	; (8d0c <EIC_Handler+0x5c>)
    8ccc:	781b      	ldrb	r3, [r3, #0]
    8cce:	0018      	movs	r0, r3
    8cd0:	4b10      	ldr	r3, [pc, #64]	; (8d14 <EIC_Handler+0x64>)
    8cd2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    8cd4:	4b0d      	ldr	r3, [pc, #52]	; (8d0c <EIC_Handler+0x5c>)
    8cd6:	781b      	ldrb	r3, [r3, #0]
    8cd8:	001a      	movs	r2, r3
    8cda:	4b0f      	ldr	r3, [pc, #60]	; (8d18 <EIC_Handler+0x68>)
    8cdc:	0092      	lsls	r2, r2, #2
    8cde:	58d3      	ldr	r3, [r2, r3]
    8ce0:	2b00      	cmp	r3, #0
    8ce2:	d006      	beq.n	8cf2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    8ce4:	4b09      	ldr	r3, [pc, #36]	; (8d0c <EIC_Handler+0x5c>)
    8ce6:	781b      	ldrb	r3, [r3, #0]
    8ce8:	001a      	movs	r2, r3
    8cea:	4b0b      	ldr	r3, [pc, #44]	; (8d18 <EIC_Handler+0x68>)
    8cec:	0092      	lsls	r2, r2, #2
    8cee:	58d3      	ldr	r3, [r2, r3]
    8cf0:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    8cf2:	4b06      	ldr	r3, [pc, #24]	; (8d0c <EIC_Handler+0x5c>)
    8cf4:	781b      	ldrb	r3, [r3, #0]
    8cf6:	3301      	adds	r3, #1
    8cf8:	b2da      	uxtb	r2, r3
    8cfa:	4b04      	ldr	r3, [pc, #16]	; (8d0c <EIC_Handler+0x5c>)
    8cfc:	701a      	strb	r2, [r3, #0]
    8cfe:	4b03      	ldr	r3, [pc, #12]	; (8d0c <EIC_Handler+0x5c>)
    8d00:	781b      	ldrb	r3, [r3, #0]
    8d02:	2b0f      	cmp	r3, #15
    8d04:	d9da      	bls.n	8cbc <EIC_Handler+0xc>
			}
		}
	}
}
    8d06:	46c0      	nop			; (mov r8, r8)
    8d08:	46bd      	mov	sp, r7
    8d0a:	bd80      	pop	{r7, pc}
    8d0c:	200006d8 	.word	0x200006d8
    8d10:	00008b3d 	.word	0x00008b3d
    8d14:	00008b81 	.word	0x00008b81
    8d18:	200006dc 	.word	0x200006dc

00008d1c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8d1c:	b580      	push	{r7, lr}
    8d1e:	b082      	sub	sp, #8
    8d20:	af00      	add	r7, sp, #0
    8d22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    8d24:	687b      	ldr	r3, [r7, #4]
    8d26:	2200      	movs	r2, #0
    8d28:	701a      	strb	r2, [r3, #0]
}
    8d2a:	46c0      	nop			; (mov r8, r8)
    8d2c:	46bd      	mov	sp, r7
    8d2e:	b002      	add	sp, #8
    8d30:	bd80      	pop	{r7, pc}
	...

00008d34 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8d34:	b580      	push	{r7, lr}
    8d36:	b082      	sub	sp, #8
    8d38:	af00      	add	r7, sp, #0
    8d3a:	0002      	movs	r2, r0
    8d3c:	6039      	str	r1, [r7, #0]
    8d3e:	1dfb      	adds	r3, r7, #7
    8d40:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8d42:	1dfb      	adds	r3, r7, #7
    8d44:	781b      	ldrb	r3, [r3, #0]
    8d46:	2b01      	cmp	r3, #1
    8d48:	d00a      	beq.n	8d60 <system_apb_clock_set_mask+0x2c>
    8d4a:	2b02      	cmp	r3, #2
    8d4c:	d00f      	beq.n	8d6e <system_apb_clock_set_mask+0x3a>
    8d4e:	2b00      	cmp	r3, #0
    8d50:	d114      	bne.n	8d7c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8d52:	4b0e      	ldr	r3, [pc, #56]	; (8d8c <system_apb_clock_set_mask+0x58>)
    8d54:	4a0d      	ldr	r2, [pc, #52]	; (8d8c <system_apb_clock_set_mask+0x58>)
    8d56:	6991      	ldr	r1, [r2, #24]
    8d58:	683a      	ldr	r2, [r7, #0]
    8d5a:	430a      	orrs	r2, r1
    8d5c:	619a      	str	r2, [r3, #24]
			break;
    8d5e:	e00f      	b.n	8d80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8d60:	4b0a      	ldr	r3, [pc, #40]	; (8d8c <system_apb_clock_set_mask+0x58>)
    8d62:	4a0a      	ldr	r2, [pc, #40]	; (8d8c <system_apb_clock_set_mask+0x58>)
    8d64:	69d1      	ldr	r1, [r2, #28]
    8d66:	683a      	ldr	r2, [r7, #0]
    8d68:	430a      	orrs	r2, r1
    8d6a:	61da      	str	r2, [r3, #28]
			break;
    8d6c:	e008      	b.n	8d80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8d6e:	4b07      	ldr	r3, [pc, #28]	; (8d8c <system_apb_clock_set_mask+0x58>)
    8d70:	4a06      	ldr	r2, [pc, #24]	; (8d8c <system_apb_clock_set_mask+0x58>)
    8d72:	6a11      	ldr	r1, [r2, #32]
    8d74:	683a      	ldr	r2, [r7, #0]
    8d76:	430a      	orrs	r2, r1
    8d78:	621a      	str	r2, [r3, #32]
			break;
    8d7a:	e001      	b.n	8d80 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8d7c:	2317      	movs	r3, #23
    8d7e:	e000      	b.n	8d82 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8d80:	2300      	movs	r3, #0
}
    8d82:	0018      	movs	r0, r3
    8d84:	46bd      	mov	sp, r7
    8d86:	b002      	add	sp, #8
    8d88:	bd80      	pop	{r7, pc}
    8d8a:	46c0      	nop			; (mov r8, r8)
    8d8c:	40000400 	.word	0x40000400

00008d90 <system_pinmux_get_config_defaults>:
{
    8d90:	b580      	push	{r7, lr}
    8d92:	b082      	sub	sp, #8
    8d94:	af00      	add	r7, sp, #0
    8d96:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	2280      	movs	r2, #128	; 0x80
    8d9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8d9e:	687b      	ldr	r3, [r7, #4]
    8da0:	2200      	movs	r2, #0
    8da2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	2201      	movs	r2, #1
    8da8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8daa:	687b      	ldr	r3, [r7, #4]
    8dac:	2200      	movs	r2, #0
    8dae:	70da      	strb	r2, [r3, #3]
}
    8db0:	46c0      	nop			; (mov r8, r8)
    8db2:	46bd      	mov	sp, r7
    8db4:	b002      	add	sp, #8
    8db6:	bd80      	pop	{r7, pc}

00008db8 <system_interrupt_enable>:
{
    8db8:	b580      	push	{r7, lr}
    8dba:	b082      	sub	sp, #8
    8dbc:	af00      	add	r7, sp, #0
    8dbe:	0002      	movs	r2, r0
    8dc0:	1dfb      	adds	r3, r7, #7
    8dc2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8dc4:	4b06      	ldr	r3, [pc, #24]	; (8de0 <system_interrupt_enable+0x28>)
    8dc6:	1dfa      	adds	r2, r7, #7
    8dc8:	7812      	ldrb	r2, [r2, #0]
    8dca:	0011      	movs	r1, r2
    8dcc:	221f      	movs	r2, #31
    8dce:	400a      	ands	r2, r1
    8dd0:	2101      	movs	r1, #1
    8dd2:	4091      	lsls	r1, r2
    8dd4:	000a      	movs	r2, r1
    8dd6:	601a      	str	r2, [r3, #0]
}
    8dd8:	46c0      	nop			; (mov r8, r8)
    8dda:	46bd      	mov	sp, r7
    8ddc:	b002      	add	sp, #8
    8dde:	bd80      	pop	{r7, pc}
    8de0:	e000e100 	.word	0xe000e100

00008de4 <_extint_get_eic_from_channel>:
{
    8de4:	b580      	push	{r7, lr}
    8de6:	b084      	sub	sp, #16
    8de8:	af00      	add	r7, sp, #0
    8dea:	0002      	movs	r2, r0
    8dec:	1dfb      	adds	r3, r7, #7
    8dee:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    8df0:	230f      	movs	r3, #15
    8df2:	18fb      	adds	r3, r7, r3
    8df4:	1dfa      	adds	r2, r7, #7
    8df6:	7812      	ldrb	r2, [r2, #0]
    8df8:	0952      	lsrs	r2, r2, #5
    8dfa:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    8dfc:	230f      	movs	r3, #15
    8dfe:	18fb      	adds	r3, r7, r3
    8e00:	781b      	ldrb	r3, [r3, #0]
    8e02:	2b00      	cmp	r3, #0
    8e04:	d10c      	bne.n	8e20 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8e06:	4b09      	ldr	r3, [pc, #36]	; (8e2c <_extint_get_eic_from_channel+0x48>)
    8e08:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    8e0a:	230f      	movs	r3, #15
    8e0c:	18fb      	adds	r3, r7, r3
    8e0e:	781b      	ldrb	r3, [r3, #0]
    8e10:	009b      	lsls	r3, r3, #2
    8e12:	2210      	movs	r2, #16
    8e14:	4694      	mov	ip, r2
    8e16:	44bc      	add	ip, r7
    8e18:	4463      	add	r3, ip
    8e1a:	3b08      	subs	r3, #8
    8e1c:	681b      	ldr	r3, [r3, #0]
    8e1e:	e000      	b.n	8e22 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    8e20:	2300      	movs	r3, #0
}
    8e22:	0018      	movs	r0, r3
    8e24:	46bd      	mov	sp, r7
    8e26:	b004      	add	sp, #16
    8e28:	bd80      	pop	{r7, pc}
    8e2a:	46c0      	nop			; (mov r8, r8)
    8e2c:	40001800 	.word	0x40001800

00008e30 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    8e30:	b580      	push	{r7, lr}
    8e32:	b082      	sub	sp, #8
    8e34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8e36:	4b0f      	ldr	r3, [pc, #60]	; (8e74 <extint_is_syncing+0x44>)
    8e38:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8e3a:	2300      	movs	r3, #0
    8e3c:	607b      	str	r3, [r7, #4]
    8e3e:	e011      	b.n	8e64 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    8e40:	687b      	ldr	r3, [r7, #4]
    8e42:	009b      	lsls	r3, r3, #2
    8e44:	2208      	movs	r2, #8
    8e46:	4694      	mov	ip, r2
    8e48:	44bc      	add	ip, r7
    8e4a:	4463      	add	r3, ip
    8e4c:	3b08      	subs	r3, #8
    8e4e:	681b      	ldr	r3, [r3, #0]
    8e50:	785b      	ldrb	r3, [r3, #1]
    8e52:	b2db      	uxtb	r3, r3
    8e54:	b25b      	sxtb	r3, r3
    8e56:	2b00      	cmp	r3, #0
    8e58:	da01      	bge.n	8e5e <extint_is_syncing+0x2e>
			return true;
    8e5a:	2301      	movs	r3, #1
    8e5c:	e006      	b.n	8e6c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8e5e:	687b      	ldr	r3, [r7, #4]
    8e60:	3301      	adds	r3, #1
    8e62:	607b      	str	r3, [r7, #4]
    8e64:	687b      	ldr	r3, [r7, #4]
    8e66:	2b00      	cmp	r3, #0
    8e68:	d0ea      	beq.n	8e40 <extint_is_syncing+0x10>
		}
	}
	return false;
    8e6a:	2300      	movs	r3, #0
}
    8e6c:	0018      	movs	r0, r3
    8e6e:	46bd      	mov	sp, r7
    8e70:	b002      	add	sp, #8
    8e72:	bd80      	pop	{r7, pc}
    8e74:	40001800 	.word	0x40001800

00008e78 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    8e78:	b580      	push	{r7, lr}
    8e7a:	b084      	sub	sp, #16
    8e7c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8e7e:	4b2d      	ldr	r3, [pc, #180]	; (8f34 <_system_extint_init+0xbc>)
    8e80:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    8e82:	2140      	movs	r1, #64	; 0x40
    8e84:	2000      	movs	r0, #0
    8e86:	4b2c      	ldr	r3, [pc, #176]	; (8f38 <_system_extint_init+0xc0>)
    8e88:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8e8a:	003b      	movs	r3, r7
    8e8c:	0018      	movs	r0, r3
    8e8e:	4b2b      	ldr	r3, [pc, #172]	; (8f3c <_system_extint_init+0xc4>)
    8e90:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    8e92:	003b      	movs	r3, r7
    8e94:	2200      	movs	r2, #0
    8e96:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    8e98:	003b      	movs	r3, r7
    8e9a:	0019      	movs	r1, r3
    8e9c:	2005      	movs	r0, #5
    8e9e:	4b28      	ldr	r3, [pc, #160]	; (8f40 <_system_extint_init+0xc8>)
    8ea0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    8ea2:	2005      	movs	r0, #5
    8ea4:	4b27      	ldr	r3, [pc, #156]	; (8f44 <_system_extint_init+0xcc>)
    8ea6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8ea8:	2300      	movs	r3, #0
    8eaa:	60fb      	str	r3, [r7, #12]
    8eac:	e018      	b.n	8ee0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    8eae:	68fb      	ldr	r3, [r7, #12]
    8eb0:	009b      	lsls	r3, r3, #2
    8eb2:	2210      	movs	r2, #16
    8eb4:	4694      	mov	ip, r2
    8eb6:	44bc      	add	ip, r7
    8eb8:	4463      	add	r3, ip
    8eba:	3b0c      	subs	r3, #12
    8ebc:	681a      	ldr	r2, [r3, #0]
    8ebe:	68fb      	ldr	r3, [r7, #12]
    8ec0:	009b      	lsls	r3, r3, #2
    8ec2:	2110      	movs	r1, #16
    8ec4:	468c      	mov	ip, r1
    8ec6:	44bc      	add	ip, r7
    8ec8:	4463      	add	r3, ip
    8eca:	3b0c      	subs	r3, #12
    8ecc:	681b      	ldr	r3, [r3, #0]
    8ece:	781b      	ldrb	r3, [r3, #0]
    8ed0:	b2db      	uxtb	r3, r3
    8ed2:	2101      	movs	r1, #1
    8ed4:	430b      	orrs	r3, r1
    8ed6:	b2db      	uxtb	r3, r3
    8ed8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8eda:	68fb      	ldr	r3, [r7, #12]
    8edc:	3301      	adds	r3, #1
    8ede:	60fb      	str	r3, [r7, #12]
    8ee0:	68fb      	ldr	r3, [r7, #12]
    8ee2:	2b00      	cmp	r3, #0
    8ee4:	d0e3      	beq.n	8eae <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    8ee6:	46c0      	nop			; (mov r8, r8)
    8ee8:	4b17      	ldr	r3, [pc, #92]	; (8f48 <_system_extint_init+0xd0>)
    8eea:	4798      	blx	r3
    8eec:	1e03      	subs	r3, r0, #0
    8eee:	d1fb      	bne.n	8ee8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    8ef0:	230b      	movs	r3, #11
    8ef2:	18fb      	adds	r3, r7, r3
    8ef4:	2200      	movs	r2, #0
    8ef6:	701a      	strb	r2, [r3, #0]
    8ef8:	e00d      	b.n	8f16 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    8efa:	230b      	movs	r3, #11
    8efc:	18fb      	adds	r3, r7, r3
    8efe:	781a      	ldrb	r2, [r3, #0]
    8f00:	4b12      	ldr	r3, [pc, #72]	; (8f4c <_system_extint_init+0xd4>)
    8f02:	0092      	lsls	r2, r2, #2
    8f04:	2100      	movs	r1, #0
    8f06:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    8f08:	230b      	movs	r3, #11
    8f0a:	18fb      	adds	r3, r7, r3
    8f0c:	781a      	ldrb	r2, [r3, #0]
    8f0e:	230b      	movs	r3, #11
    8f10:	18fb      	adds	r3, r7, r3
    8f12:	3201      	adds	r2, #1
    8f14:	701a      	strb	r2, [r3, #0]
    8f16:	230b      	movs	r3, #11
    8f18:	18fb      	adds	r3, r7, r3
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	2b0f      	cmp	r3, #15
    8f1e:	d9ec      	bls.n	8efa <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    8f20:	2004      	movs	r0, #4
    8f22:	4b0b      	ldr	r3, [pc, #44]	; (8f50 <_system_extint_init+0xd8>)
    8f24:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    8f26:	4b0b      	ldr	r3, [pc, #44]	; (8f54 <_system_extint_init+0xdc>)
    8f28:	4798      	blx	r3
}
    8f2a:	46c0      	nop			; (mov r8, r8)
    8f2c:	46bd      	mov	sp, r7
    8f2e:	b004      	add	sp, #16
    8f30:	bd80      	pop	{r7, pc}
    8f32:	46c0      	nop			; (mov r8, r8)
    8f34:	40001800 	.word	0x40001800
    8f38:	00008d35 	.word	0x00008d35
    8f3c:	00008d1d 	.word	0x00008d1d
    8f40:	00010e59 	.word	0x00010e59
    8f44:	00010e9d 	.word	0x00010e9d
    8f48:	00008e31 	.word	0x00008e31
    8f4c:	200006dc 	.word	0x200006dc
    8f50:	00008db9 	.word	0x00008db9
    8f54:	00008f59 	.word	0x00008f59

00008f58 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    8f58:	b580      	push	{r7, lr}
    8f5a:	b082      	sub	sp, #8
    8f5c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8f5e:	4b15      	ldr	r3, [pc, #84]	; (8fb4 <_extint_enable+0x5c>)
    8f60:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8f62:	2300      	movs	r3, #0
    8f64:	607b      	str	r3, [r7, #4]
    8f66:	e018      	b.n	8f9a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	009b      	lsls	r3, r3, #2
    8f6c:	2208      	movs	r2, #8
    8f6e:	4694      	mov	ip, r2
    8f70:	44bc      	add	ip, r7
    8f72:	4463      	add	r3, ip
    8f74:	3b08      	subs	r3, #8
    8f76:	681a      	ldr	r2, [r3, #0]
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	009b      	lsls	r3, r3, #2
    8f7c:	2108      	movs	r1, #8
    8f7e:	468c      	mov	ip, r1
    8f80:	44bc      	add	ip, r7
    8f82:	4463      	add	r3, ip
    8f84:	3b08      	subs	r3, #8
    8f86:	681b      	ldr	r3, [r3, #0]
    8f88:	781b      	ldrb	r3, [r3, #0]
    8f8a:	b2db      	uxtb	r3, r3
    8f8c:	2102      	movs	r1, #2
    8f8e:	430b      	orrs	r3, r1
    8f90:	b2db      	uxtb	r3, r3
    8f92:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8f94:	687b      	ldr	r3, [r7, #4]
    8f96:	3301      	adds	r3, #1
    8f98:	607b      	str	r3, [r7, #4]
    8f9a:	687b      	ldr	r3, [r7, #4]
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d0e3      	beq.n	8f68 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    8fa0:	46c0      	nop			; (mov r8, r8)
    8fa2:	4b05      	ldr	r3, [pc, #20]	; (8fb8 <_extint_enable+0x60>)
    8fa4:	4798      	blx	r3
    8fa6:	1e03      	subs	r3, r0, #0
    8fa8:	d1fb      	bne.n	8fa2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    8faa:	46c0      	nop			; (mov r8, r8)
    8fac:	46bd      	mov	sp, r7
    8fae:	b002      	add	sp, #8
    8fb0:	bd80      	pop	{r7, pc}
    8fb2:	46c0      	nop			; (mov r8, r8)
    8fb4:	40001800 	.word	0x40001800
    8fb8:	00008e31 	.word	0x00008e31

00008fbc <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    8fbc:	b580      	push	{r7, lr}
    8fbe:	b082      	sub	sp, #8
    8fc0:	af00      	add	r7, sp, #0
    8fc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    8fc4:	687b      	ldr	r3, [r7, #4]
    8fc6:	2200      	movs	r2, #0
    8fc8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    8fca:	687b      	ldr	r3, [r7, #4]
    8fcc:	2200      	movs	r2, #0
    8fce:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	2201      	movs	r2, #1
    8fd4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    8fd6:	687b      	ldr	r3, [r7, #4]
    8fd8:	2201      	movs	r2, #1
    8fda:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	2200      	movs	r2, #0
    8fe0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    8fe2:	687b      	ldr	r3, [r7, #4]
    8fe4:	2202      	movs	r2, #2
    8fe6:	72da      	strb	r2, [r3, #11]
}
    8fe8:	46c0      	nop			; (mov r8, r8)
    8fea:	46bd      	mov	sp, r7
    8fec:	b002      	add	sp, #8
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b086      	sub	sp, #24
    8ff4:	af00      	add	r7, sp, #0
    8ff6:	0002      	movs	r2, r0
    8ff8:	6039      	str	r1, [r7, #0]
    8ffa:	1dfb      	adds	r3, r7, #7
    8ffc:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    8ffe:	2308      	movs	r3, #8
    9000:	18fb      	adds	r3, r7, r3
    9002:	0018      	movs	r0, r3
    9004:	4b36      	ldr	r3, [pc, #216]	; (90e0 <extint_chan_set_config+0xf0>)
    9006:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    9008:	683b      	ldr	r3, [r7, #0]
    900a:	685b      	ldr	r3, [r3, #4]
    900c:	b2da      	uxtb	r2, r3
    900e:	2308      	movs	r3, #8
    9010:	18fb      	adds	r3, r7, r3
    9012:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9014:	2308      	movs	r3, #8
    9016:	18fb      	adds	r3, r7, r3
    9018:	2200      	movs	r2, #0
    901a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    901c:	683b      	ldr	r3, [r7, #0]
    901e:	7a1a      	ldrb	r2, [r3, #8]
    9020:	2308      	movs	r3, #8
    9022:	18fb      	adds	r3, r7, r3
    9024:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    9026:	683b      	ldr	r3, [r7, #0]
    9028:	681b      	ldr	r3, [r3, #0]
    902a:	b2db      	uxtb	r3, r3
    902c:	2208      	movs	r2, #8
    902e:	18ba      	adds	r2, r7, r2
    9030:	0011      	movs	r1, r2
    9032:	0018      	movs	r0, r3
    9034:	4b2b      	ldr	r3, [pc, #172]	; (90e4 <extint_chan_set_config+0xf4>)
    9036:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    9038:	1dfb      	adds	r3, r7, #7
    903a:	781b      	ldrb	r3, [r3, #0]
    903c:	0018      	movs	r0, r3
    903e:	4b2a      	ldr	r3, [pc, #168]	; (90e8 <extint_chan_set_config+0xf8>)
    9040:	4798      	blx	r3
    9042:	0003      	movs	r3, r0
    9044:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    9046:	1dfb      	adds	r3, r7, #7
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	2207      	movs	r2, #7
    904c:	4013      	ands	r3, r2
    904e:	009b      	lsls	r3, r3, #2
    9050:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    9052:	683b      	ldr	r3, [r7, #0]
    9054:	7adb      	ldrb	r3, [r3, #11]
    9056:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    9058:	683b      	ldr	r3, [r7, #0]
    905a:	7a9b      	ldrb	r3, [r3, #10]
    905c:	2b00      	cmp	r3, #0
    905e:	d003      	beq.n	9068 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    9060:	697b      	ldr	r3, [r7, #20]
    9062:	2208      	movs	r2, #8
    9064:	4313      	orrs	r3, r2
    9066:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    9068:	1dfb      	adds	r3, r7, #7
    906a:	781b      	ldrb	r3, [r3, #0]
    906c:	08db      	lsrs	r3, r3, #3
    906e:	b2db      	uxtb	r3, r3
    9070:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    9072:	1dfb      	adds	r3, r7, #7
    9074:	781b      	ldrb	r3, [r3, #0]
    9076:	08db      	lsrs	r3, r3, #3
    9078:	b2db      	uxtb	r3, r3
    907a:	001a      	movs	r2, r3
    907c:	693b      	ldr	r3, [r7, #16]
    907e:	3206      	adds	r2, #6
    9080:	0092      	lsls	r2, r2, #2
    9082:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    9084:	210f      	movs	r1, #15
    9086:	68fa      	ldr	r2, [r7, #12]
    9088:	4091      	lsls	r1, r2
    908a:	000a      	movs	r2, r1
    908c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    908e:	401a      	ands	r2, r3
			(new_config << config_pos);
    9090:	6979      	ldr	r1, [r7, #20]
    9092:	68fb      	ldr	r3, [r7, #12]
    9094:	4099      	lsls	r1, r3
    9096:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    9098:	431a      	orrs	r2, r3
    909a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    909c:	693b      	ldr	r3, [r7, #16]
    909e:	1d82      	adds	r2, r0, #6
    90a0:	0092      	lsls	r2, r2, #2
    90a2:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    90a4:	683b      	ldr	r3, [r7, #0]
    90a6:	7a5b      	ldrb	r3, [r3, #9]
    90a8:	2b00      	cmp	r3, #0
    90aa:	d00a      	beq.n	90c2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    90ac:	693b      	ldr	r3, [r7, #16]
    90ae:	695a      	ldr	r2, [r3, #20]
    90b0:	1dfb      	adds	r3, r7, #7
    90b2:	781b      	ldrb	r3, [r3, #0]
    90b4:	2101      	movs	r1, #1
    90b6:	4099      	lsls	r1, r3
    90b8:	000b      	movs	r3, r1
    90ba:	431a      	orrs	r2, r3
    90bc:	693b      	ldr	r3, [r7, #16]
    90be:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    90c0:	e00a      	b.n	90d8 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    90c2:	693b      	ldr	r3, [r7, #16]
    90c4:	695b      	ldr	r3, [r3, #20]
    90c6:	1dfa      	adds	r2, r7, #7
    90c8:	7812      	ldrb	r2, [r2, #0]
    90ca:	2101      	movs	r1, #1
    90cc:	4091      	lsls	r1, r2
    90ce:	000a      	movs	r2, r1
    90d0:	43d2      	mvns	r2, r2
    90d2:	401a      	ands	r2, r3
    90d4:	693b      	ldr	r3, [r7, #16]
    90d6:	615a      	str	r2, [r3, #20]
}
    90d8:	46c0      	nop			; (mov r8, r8)
    90da:	46bd      	mov	sp, r7
    90dc:	b006      	add	sp, #24
    90de:	bd80      	pop	{r7, pc}
    90e0:	00008d91 	.word	0x00008d91
    90e4:	00011145 	.word	0x00011145
    90e8:	00008de5 	.word	0x00008de5

000090ec <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    90ec:	b580      	push	{r7, lr}
    90ee:	b082      	sub	sp, #8
    90f0:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    90f2:	4b07      	ldr	r3, [pc, #28]	; (9110 <nvm_is_ready+0x24>)
    90f4:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    90f6:	687b      	ldr	r3, [r7, #4]
    90f8:	7d1b      	ldrb	r3, [r3, #20]
    90fa:	b2db      	uxtb	r3, r3
    90fc:	001a      	movs	r2, r3
    90fe:	2301      	movs	r3, #1
    9100:	4013      	ands	r3, r2
    9102:	1e5a      	subs	r2, r3, #1
    9104:	4193      	sbcs	r3, r2
    9106:	b2db      	uxtb	r3, r3
}
    9108:	0018      	movs	r0, r3
    910a:	46bd      	mov	sp, r7
    910c:	b002      	add	sp, #8
    910e:	bd80      	pop	{r7, pc}
    9110:	41004000 	.word	0x41004000

00009114 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    9114:	b580      	push	{r7, lr}
    9116:	b086      	sub	sp, #24
    9118:	af00      	add	r7, sp, #0
    911a:	60b9      	str	r1, [r7, #8]
    911c:	607a      	str	r2, [r7, #4]
    911e:	230f      	movs	r3, #15
    9120:	18fb      	adds	r3, r7, r3
    9122:	1c02      	adds	r2, r0, #0
    9124:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    9126:	4b3a      	ldr	r3, [pc, #232]	; (9210 <nvm_execute_command+0xfc>)
    9128:	881b      	ldrh	r3, [r3, #0]
    912a:	001a      	movs	r2, r3
    912c:	4b38      	ldr	r3, [pc, #224]	; (9210 <nvm_execute_command+0xfc>)
    912e:	885b      	ldrh	r3, [r3, #2]
    9130:	435a      	muls	r2, r3
    9132:	68bb      	ldr	r3, [r7, #8]
    9134:	429a      	cmp	r2, r3
    9136:	d209      	bcs.n	914c <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    9138:	68bb      	ldr	r3, [r7, #8]
    913a:	4a36      	ldr	r2, [pc, #216]	; (9214 <nvm_execute_command+0x100>)
    913c:	4293      	cmp	r3, r2
    913e:	d903      	bls.n	9148 <nvm_execute_command+0x34>
    9140:	68bb      	ldr	r3, [r7, #8]
    9142:	4a35      	ldr	r2, [pc, #212]	; (9218 <nvm_execute_command+0x104>)
    9144:	4293      	cmp	r3, r2
    9146:	d901      	bls.n	914c <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    9148:	2318      	movs	r3, #24
    914a:	e05c      	b.n	9206 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    914c:	4b33      	ldr	r3, [pc, #204]	; (921c <nvm_execute_command+0x108>)
    914e:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    9150:	697b      	ldr	r3, [r7, #20]
    9152:	685b      	ldr	r3, [r3, #4]
    9154:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    9156:	693b      	ldr	r3, [r7, #16]
    9158:	2280      	movs	r2, #128	; 0x80
    915a:	02d2      	lsls	r2, r2, #11
    915c:	431a      	orrs	r2, r3
    915e:	697b      	ldr	r3, [r7, #20]
    9160:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9162:	697b      	ldr	r3, [r7, #20]
    9164:	2220      	movs	r2, #32
    9166:	32ff      	adds	r2, #255	; 0xff
    9168:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    916a:	4b2d      	ldr	r3, [pc, #180]	; (9220 <nvm_execute_command+0x10c>)
    916c:	4798      	blx	r3
    916e:	0003      	movs	r3, r0
    9170:	001a      	movs	r2, r3
    9172:	2301      	movs	r3, #1
    9174:	4053      	eors	r3, r2
    9176:	b2db      	uxtb	r3, r3
    9178:	2b00      	cmp	r3, #0
    917a:	d004      	beq.n	9186 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    917c:	697b      	ldr	r3, [r7, #20]
    917e:	693a      	ldr	r2, [r7, #16]
    9180:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    9182:	2305      	movs	r3, #5
    9184:	e03f      	b.n	9206 <nvm_execute_command+0xf2>
	}

	switch (command) {
    9186:	230f      	movs	r3, #15
    9188:	18fb      	adds	r3, r7, r3
    918a:	781b      	ldrb	r3, [r3, #0]
    918c:	2b45      	cmp	r3, #69	; 0x45
    918e:	d81d      	bhi.n	91cc <nvm_execute_command+0xb8>
    9190:	009a      	lsls	r2, r3, #2
    9192:	4b24      	ldr	r3, [pc, #144]	; (9224 <nvm_execute_command+0x110>)
    9194:	18d3      	adds	r3, r2, r3
    9196:	681b      	ldr	r3, [r3, #0]
    9198:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    919a:	697b      	ldr	r3, [r7, #20]
    919c:	8b1b      	ldrh	r3, [r3, #24]
    919e:	b29b      	uxth	r3, r3
    91a0:	001a      	movs	r2, r3
    91a2:	2380      	movs	r3, #128	; 0x80
    91a4:	005b      	lsls	r3, r3, #1
    91a6:	4013      	ands	r3, r2
    91a8:	d004      	beq.n	91b4 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    91aa:	697b      	ldr	r3, [r7, #20]
    91ac:	693a      	ldr	r2, [r7, #16]
    91ae:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    91b0:	2310      	movs	r3, #16
    91b2:	e028      	b.n	9206 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    91b4:	68bb      	ldr	r3, [r7, #8]
    91b6:	089b      	lsrs	r3, r3, #2
    91b8:	005a      	lsls	r2, r3, #1
    91ba:	697b      	ldr	r3, [r7, #20]
    91bc:	61da      	str	r2, [r3, #28]
			break;
    91be:	e00b      	b.n	91d8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    91c0:	68bb      	ldr	r3, [r7, #8]
    91c2:	089b      	lsrs	r3, r3, #2
    91c4:	005a      	lsls	r2, r3, #1
    91c6:	697b      	ldr	r3, [r7, #20]
    91c8:	61da      	str	r2, [r3, #28]
			break;
    91ca:	e005      	b.n	91d8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    91cc:	697b      	ldr	r3, [r7, #20]
    91ce:	693a      	ldr	r2, [r7, #16]
    91d0:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    91d2:	2317      	movs	r3, #23
    91d4:	e017      	b.n	9206 <nvm_execute_command+0xf2>
			break;
    91d6:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    91d8:	230f      	movs	r3, #15
    91da:	18fb      	adds	r3, r7, r3
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	b29b      	uxth	r3, r3
    91e0:	4a11      	ldr	r2, [pc, #68]	; (9228 <nvm_execute_command+0x114>)
    91e2:	4313      	orrs	r3, r2
    91e4:	b29a      	uxth	r2, r3
    91e6:	697b      	ldr	r3, [r7, #20]
    91e8:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    91ea:	46c0      	nop			; (mov r8, r8)
    91ec:	4b0c      	ldr	r3, [pc, #48]	; (9220 <nvm_execute_command+0x10c>)
    91ee:	4798      	blx	r3
    91f0:	0003      	movs	r3, r0
    91f2:	001a      	movs	r2, r3
    91f4:	2301      	movs	r3, #1
    91f6:	4053      	eors	r3, r2
    91f8:	b2db      	uxtb	r3, r3
    91fa:	2b00      	cmp	r3, #0
    91fc:	d1f6      	bne.n	91ec <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    91fe:	697b      	ldr	r3, [r7, #20]
    9200:	693a      	ldr	r2, [r7, #16]
    9202:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    9204:	2300      	movs	r3, #0
}
    9206:	0018      	movs	r0, r3
    9208:	46bd      	mov	sp, r7
    920a:	b006      	add	sp, #24
    920c:	bd80      	pop	{r7, pc}
    920e:	46c0      	nop			; (mov r8, r8)
    9210:	20000234 	.word	0x20000234
    9214:	00803fff 	.word	0x00803fff
    9218:	00806000 	.word	0x00806000
    921c:	41004000 	.word	0x41004000
    9220:	000090ed 	.word	0x000090ed
    9224:	00019630 	.word	0x00019630
    9228:	ffffa500 	.word	0xffffa500

0000922c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    922c:	b580      	push	{r7, lr}
    922e:	b088      	sub	sp, #32
    9230:	af00      	add	r7, sp, #0
    9232:	60f8      	str	r0, [r7, #12]
    9234:	60b9      	str	r1, [r7, #8]
    9236:	1dbb      	adds	r3, r7, #6
    9238:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    923a:	4b4a      	ldr	r3, [pc, #296]	; (9364 <nvm_write_buffer+0x138>)
    923c:	881b      	ldrh	r3, [r3, #0]
    923e:	001a      	movs	r2, r3
    9240:	4b48      	ldr	r3, [pc, #288]	; (9364 <nvm_write_buffer+0x138>)
    9242:	885b      	ldrh	r3, [r3, #2]
    9244:	435a      	muls	r2, r3
	if (destination_address >
    9246:	68fb      	ldr	r3, [r7, #12]
    9248:	429a      	cmp	r2, r3
    924a:	d201      	bcs.n	9250 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    924c:	2318      	movs	r3, #24
    924e:	e084      	b.n	935a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    9250:	4b44      	ldr	r3, [pc, #272]	; (9364 <nvm_write_buffer+0x138>)
    9252:	881b      	ldrh	r3, [r3, #0]
    9254:	3b01      	subs	r3, #1
    9256:	001a      	movs	r2, r3
    9258:	68fb      	ldr	r3, [r7, #12]
    925a:	4013      	ands	r3, r2
    925c:	d001      	beq.n	9262 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    925e:	2318      	movs	r3, #24
    9260:	e07b      	b.n	935a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    9262:	4b40      	ldr	r3, [pc, #256]	; (9364 <nvm_write_buffer+0x138>)
    9264:	881b      	ldrh	r3, [r3, #0]
    9266:	1dba      	adds	r2, r7, #6
    9268:	8812      	ldrh	r2, [r2, #0]
    926a:	429a      	cmp	r2, r3
    926c:	d901      	bls.n	9272 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    926e:	2317      	movs	r3, #23
    9270:	e073      	b.n	935a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    9272:	4b3d      	ldr	r3, [pc, #244]	; (9368 <nvm_write_buffer+0x13c>)
    9274:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9276:	4b3d      	ldr	r3, [pc, #244]	; (936c <nvm_write_buffer+0x140>)
    9278:	4798      	blx	r3
    927a:	0003      	movs	r3, r0
    927c:	001a      	movs	r2, r3
    927e:	2301      	movs	r3, #1
    9280:	4053      	eors	r3, r2
    9282:	b2db      	uxtb	r3, r3
    9284:	2b00      	cmp	r3, #0
    9286:	d001      	beq.n	928c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    9288:	2305      	movs	r3, #5
    928a:	e066      	b.n	935a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    928c:	697b      	ldr	r3, [r7, #20]
    928e:	4a38      	ldr	r2, [pc, #224]	; (9370 <nvm_write_buffer+0x144>)
    9290:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    9292:	46c0      	nop			; (mov r8, r8)
    9294:	4b35      	ldr	r3, [pc, #212]	; (936c <nvm_write_buffer+0x140>)
    9296:	4798      	blx	r3
    9298:	0003      	movs	r3, r0
    929a:	001a      	movs	r2, r3
    929c:	2301      	movs	r3, #1
    929e:	4053      	eors	r3, r2
    92a0:	b2db      	uxtb	r3, r3
    92a2:	2b00      	cmp	r3, #0
    92a4:	d1f6      	bne.n	9294 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    92a6:	697b      	ldr	r3, [r7, #20]
    92a8:	2220      	movs	r2, #32
    92aa:	32ff      	adds	r2, #255	; 0xff
    92ac:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    92ae:	68fb      	ldr	r3, [r7, #12]
    92b0:	085b      	lsrs	r3, r3, #1
    92b2:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    92b4:	231a      	movs	r3, #26
    92b6:	18fb      	adds	r3, r7, r3
    92b8:	2200      	movs	r2, #0
    92ba:	801a      	strh	r2, [r3, #0]
    92bc:	e032      	b.n	9324 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    92be:	231a      	movs	r3, #26
    92c0:	18fb      	adds	r3, r7, r3
    92c2:	881b      	ldrh	r3, [r3, #0]
    92c4:	68ba      	ldr	r2, [r7, #8]
    92c6:	18d3      	adds	r3, r2, r3
    92c8:	781a      	ldrb	r2, [r3, #0]
    92ca:	2318      	movs	r3, #24
    92cc:	18fb      	adds	r3, r7, r3
    92ce:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    92d0:	231a      	movs	r3, #26
    92d2:	18fb      	adds	r3, r7, r3
    92d4:	881a      	ldrh	r2, [r3, #0]
    92d6:	1dbb      	adds	r3, r7, #6
    92d8:	881b      	ldrh	r3, [r3, #0]
    92da:	3b01      	subs	r3, #1
    92dc:	429a      	cmp	r2, r3
    92de:	da11      	bge.n	9304 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    92e0:	231a      	movs	r3, #26
    92e2:	18fb      	adds	r3, r7, r3
    92e4:	881b      	ldrh	r3, [r3, #0]
    92e6:	3301      	adds	r3, #1
    92e8:	68ba      	ldr	r2, [r7, #8]
    92ea:	18d3      	adds	r3, r2, r3
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	021b      	lsls	r3, r3, #8
    92f0:	b21a      	sxth	r2, r3
    92f2:	2318      	movs	r3, #24
    92f4:	18fb      	adds	r3, r7, r3
    92f6:	2100      	movs	r1, #0
    92f8:	5e5b      	ldrsh	r3, [r3, r1]
    92fa:	4313      	orrs	r3, r2
    92fc:	b21a      	sxth	r2, r3
    92fe:	2318      	movs	r3, #24
    9300:	18fb      	adds	r3, r7, r3
    9302:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    9304:	69fb      	ldr	r3, [r7, #28]
    9306:	1c5a      	adds	r2, r3, #1
    9308:	61fa      	str	r2, [r7, #28]
    930a:	005b      	lsls	r3, r3, #1
    930c:	001a      	movs	r2, r3
    930e:	2318      	movs	r3, #24
    9310:	18fb      	adds	r3, r7, r3
    9312:	881b      	ldrh	r3, [r3, #0]
    9314:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    9316:	231a      	movs	r3, #26
    9318:	18fb      	adds	r3, r7, r3
    931a:	221a      	movs	r2, #26
    931c:	18ba      	adds	r2, r7, r2
    931e:	8812      	ldrh	r2, [r2, #0]
    9320:	3202      	adds	r2, #2
    9322:	801a      	strh	r2, [r3, #0]
    9324:	231a      	movs	r3, #26
    9326:	18fa      	adds	r2, r7, r3
    9328:	1dbb      	adds	r3, r7, #6
    932a:	8812      	ldrh	r2, [r2, #0]
    932c:	881b      	ldrh	r3, [r3, #0]
    932e:	429a      	cmp	r2, r3
    9330:	d3c5      	bcc.n	92be <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    9332:	4b0c      	ldr	r3, [pc, #48]	; (9364 <nvm_write_buffer+0x138>)
    9334:	791b      	ldrb	r3, [r3, #4]
    9336:	2201      	movs	r2, #1
    9338:	4053      	eors	r3, r2
    933a:	b2db      	uxtb	r3, r3
    933c:	2b00      	cmp	r3, #0
    933e:	d00b      	beq.n	9358 <nvm_write_buffer+0x12c>
    9340:	1dbb      	adds	r3, r7, #6
    9342:	881b      	ldrh	r3, [r3, #0]
    9344:	2b3f      	cmp	r3, #63	; 0x3f
    9346:	d807      	bhi.n	9358 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    9348:	68fb      	ldr	r3, [r7, #12]
    934a:	2200      	movs	r2, #0
    934c:	0019      	movs	r1, r3
    934e:	2004      	movs	r0, #4
    9350:	4b08      	ldr	r3, [pc, #32]	; (9374 <nvm_write_buffer+0x148>)
    9352:	4798      	blx	r3
    9354:	0003      	movs	r3, r0
    9356:	e000      	b.n	935a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    9358:	2300      	movs	r3, #0
}
    935a:	0018      	movs	r0, r3
    935c:	46bd      	mov	sp, r7
    935e:	b008      	add	sp, #32
    9360:	bd80      	pop	{r7, pc}
    9362:	46c0      	nop			; (mov r8, r8)
    9364:	20000234 	.word	0x20000234
    9368:	41004000 	.word	0x41004000
    936c:	000090ed 	.word	0x000090ed
    9370:	ffffa544 	.word	0xffffa544
    9374:	00009115 	.word	0x00009115

00009378 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    9378:	b580      	push	{r7, lr}
    937a:	b088      	sub	sp, #32
    937c:	af00      	add	r7, sp, #0
    937e:	60f8      	str	r0, [r7, #12]
    9380:	60b9      	str	r1, [r7, #8]
    9382:	1dbb      	adds	r3, r7, #6
    9384:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9386:	4b38      	ldr	r3, [pc, #224]	; (9468 <nvm_read_buffer+0xf0>)
    9388:	881b      	ldrh	r3, [r3, #0]
    938a:	001a      	movs	r2, r3
    938c:	4b36      	ldr	r3, [pc, #216]	; (9468 <nvm_read_buffer+0xf0>)
    938e:	885b      	ldrh	r3, [r3, #2]
    9390:	435a      	muls	r2, r3
	if (source_address >
    9392:	68fb      	ldr	r3, [r7, #12]
    9394:	429a      	cmp	r2, r3
    9396:	d201      	bcs.n	939c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    9398:	2318      	movs	r3, #24
    939a:	e060      	b.n	945e <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    939c:	4b32      	ldr	r3, [pc, #200]	; (9468 <nvm_read_buffer+0xf0>)
    939e:	881b      	ldrh	r3, [r3, #0]
    93a0:	3b01      	subs	r3, #1
    93a2:	001a      	movs	r2, r3
    93a4:	68fb      	ldr	r3, [r7, #12]
    93a6:	4013      	ands	r3, r2
    93a8:	d001      	beq.n	93ae <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    93aa:	2318      	movs	r3, #24
    93ac:	e057      	b.n	945e <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    93ae:	4b2e      	ldr	r3, [pc, #184]	; (9468 <nvm_read_buffer+0xf0>)
    93b0:	881b      	ldrh	r3, [r3, #0]
    93b2:	1dba      	adds	r2, r7, #6
    93b4:	8812      	ldrh	r2, [r2, #0]
    93b6:	429a      	cmp	r2, r3
    93b8:	d901      	bls.n	93be <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    93ba:	2317      	movs	r3, #23
    93bc:	e04f      	b.n	945e <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    93be:	4b2b      	ldr	r3, [pc, #172]	; (946c <nvm_read_buffer+0xf4>)
    93c0:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    93c2:	4b2b      	ldr	r3, [pc, #172]	; (9470 <nvm_read_buffer+0xf8>)
    93c4:	4798      	blx	r3
    93c6:	0003      	movs	r3, r0
    93c8:	001a      	movs	r2, r3
    93ca:	2301      	movs	r3, #1
    93cc:	4053      	eors	r3, r2
    93ce:	b2db      	uxtb	r3, r3
    93d0:	2b00      	cmp	r3, #0
    93d2:	d001      	beq.n	93d8 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    93d4:	2305      	movs	r3, #5
    93d6:	e042      	b.n	945e <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    93d8:	697b      	ldr	r3, [r7, #20]
    93da:	2220      	movs	r2, #32
    93dc:	32ff      	adds	r2, #255	; 0xff
    93de:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    93e0:	68fb      	ldr	r3, [r7, #12]
    93e2:	085b      	lsrs	r3, r3, #1
    93e4:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    93e6:	231a      	movs	r3, #26
    93e8:	18fb      	adds	r3, r7, r3
    93ea:	2200      	movs	r2, #0
    93ec:	801a      	strh	r2, [r3, #0]
    93ee:	e02e      	b.n	944e <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    93f0:	69fb      	ldr	r3, [r7, #28]
    93f2:	1c5a      	adds	r2, r3, #1
    93f4:	61fa      	str	r2, [r7, #28]
    93f6:	005b      	lsls	r3, r3, #1
    93f8:	001a      	movs	r2, r3
    93fa:	2312      	movs	r3, #18
    93fc:	18fb      	adds	r3, r7, r3
    93fe:	8812      	ldrh	r2, [r2, #0]
    9400:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    9402:	231a      	movs	r3, #26
    9404:	18fb      	adds	r3, r7, r3
    9406:	881b      	ldrh	r3, [r3, #0]
    9408:	68ba      	ldr	r2, [r7, #8]
    940a:	18d3      	adds	r3, r2, r3
    940c:	2212      	movs	r2, #18
    940e:	18ba      	adds	r2, r7, r2
    9410:	8812      	ldrh	r2, [r2, #0]
    9412:	b2d2      	uxtb	r2, r2
    9414:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    9416:	231a      	movs	r3, #26
    9418:	18fb      	adds	r3, r7, r3
    941a:	881a      	ldrh	r2, [r3, #0]
    941c:	1dbb      	adds	r3, r7, #6
    941e:	881b      	ldrh	r3, [r3, #0]
    9420:	3b01      	subs	r3, #1
    9422:	429a      	cmp	r2, r3
    9424:	da0c      	bge.n	9440 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    9426:	231a      	movs	r3, #26
    9428:	18fb      	adds	r3, r7, r3
    942a:	881b      	ldrh	r3, [r3, #0]
    942c:	3301      	adds	r3, #1
    942e:	68ba      	ldr	r2, [r7, #8]
    9430:	18d3      	adds	r3, r2, r3
    9432:	2212      	movs	r2, #18
    9434:	18ba      	adds	r2, r7, r2
    9436:	8812      	ldrh	r2, [r2, #0]
    9438:	0a12      	lsrs	r2, r2, #8
    943a:	b292      	uxth	r2, r2
    943c:	b2d2      	uxtb	r2, r2
    943e:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    9440:	231a      	movs	r3, #26
    9442:	18fb      	adds	r3, r7, r3
    9444:	221a      	movs	r2, #26
    9446:	18ba      	adds	r2, r7, r2
    9448:	8812      	ldrh	r2, [r2, #0]
    944a:	3202      	adds	r2, #2
    944c:	801a      	strh	r2, [r3, #0]
    944e:	231a      	movs	r3, #26
    9450:	18fa      	adds	r2, r7, r3
    9452:	1dbb      	adds	r3, r7, #6
    9454:	8812      	ldrh	r2, [r2, #0]
    9456:	881b      	ldrh	r3, [r3, #0]
    9458:	429a      	cmp	r2, r3
    945a:	d3c9      	bcc.n	93f0 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    945c:	2300      	movs	r3, #0
}
    945e:	0018      	movs	r0, r3
    9460:	46bd      	mov	sp, r7
    9462:	b008      	add	sp, #32
    9464:	bd80      	pop	{r7, pc}
    9466:	46c0      	nop			; (mov r8, r8)
    9468:	20000234 	.word	0x20000234
    946c:	41004000 	.word	0x41004000
    9470:	000090ed 	.word	0x000090ed

00009474 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    9474:	b580      	push	{r7, lr}
    9476:	b084      	sub	sp, #16
    9478:	af00      	add	r7, sp, #0
    947a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    947c:	4b23      	ldr	r3, [pc, #140]	; (950c <nvm_erase_row+0x98>)
    947e:	881b      	ldrh	r3, [r3, #0]
    9480:	001a      	movs	r2, r3
    9482:	4b22      	ldr	r3, [pc, #136]	; (950c <nvm_erase_row+0x98>)
    9484:	885b      	ldrh	r3, [r3, #2]
    9486:	435a      	muls	r2, r3
	if (row_address >
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	429a      	cmp	r2, r3
    948c:	d201      	bcs.n	9492 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    948e:	2318      	movs	r3, #24
    9490:	e037      	b.n	9502 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    9492:	4b1e      	ldr	r3, [pc, #120]	; (950c <nvm_erase_row+0x98>)
    9494:	881b      	ldrh	r3, [r3, #0]
    9496:	009b      	lsls	r3, r3, #2
    9498:	3b01      	subs	r3, #1
    949a:	001a      	movs	r2, r3
    949c:	687b      	ldr	r3, [r7, #4]
    949e:	4013      	ands	r3, r2
    94a0:	d001      	beq.n	94a6 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    94a2:	2318      	movs	r3, #24
    94a4:	e02d      	b.n	9502 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    94a6:	4b1a      	ldr	r3, [pc, #104]	; (9510 <nvm_erase_row+0x9c>)
    94a8:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    94aa:	4b1a      	ldr	r3, [pc, #104]	; (9514 <nvm_erase_row+0xa0>)
    94ac:	4798      	blx	r3
    94ae:	0003      	movs	r3, r0
    94b0:	001a      	movs	r2, r3
    94b2:	2301      	movs	r3, #1
    94b4:	4053      	eors	r3, r2
    94b6:	b2db      	uxtb	r3, r3
    94b8:	2b00      	cmp	r3, #0
    94ba:	d001      	beq.n	94c0 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    94bc:	2305      	movs	r3, #5
    94be:	e020      	b.n	9502 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    94c0:	68fb      	ldr	r3, [r7, #12]
    94c2:	2220      	movs	r2, #32
    94c4:	32ff      	adds	r2, #255	; 0xff
    94c6:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    94c8:	687b      	ldr	r3, [r7, #4]
    94ca:	089b      	lsrs	r3, r3, #2
    94cc:	005a      	lsls	r2, r3, #1
    94ce:	68fb      	ldr	r3, [r7, #12]
    94d0:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    94d2:	68fb      	ldr	r3, [r7, #12]
    94d4:	4a10      	ldr	r2, [pc, #64]	; (9518 <nvm_erase_row+0xa4>)
    94d6:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    94d8:	46c0      	nop			; (mov r8, r8)
    94da:	4b0e      	ldr	r3, [pc, #56]	; (9514 <nvm_erase_row+0xa0>)
    94dc:	4798      	blx	r3
    94de:	0003      	movs	r3, r0
    94e0:	001a      	movs	r2, r3
    94e2:	2301      	movs	r3, #1
    94e4:	4053      	eors	r3, r2
    94e6:	b2db      	uxtb	r3, r3
    94e8:	2b00      	cmp	r3, #0
    94ea:	d1f6      	bne.n	94da <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    94ec:	68fb      	ldr	r3, [r7, #12]
    94ee:	8b1b      	ldrh	r3, [r3, #24]
    94f0:	b29b      	uxth	r3, r3
    94f2:	b2db      	uxtb	r3, r3
    94f4:	001a      	movs	r2, r3
    94f6:	231c      	movs	r3, #28
    94f8:	4013      	ands	r3, r2
    94fa:	d001      	beq.n	9500 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    94fc:	2304      	movs	r3, #4
    94fe:	e000      	b.n	9502 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    9500:	2300      	movs	r3, #0
}
    9502:	0018      	movs	r0, r3
    9504:	46bd      	mov	sp, r7
    9506:	b004      	add	sp, #16
    9508:	bd80      	pop	{r7, pc}
    950a:	46c0      	nop			; (mov r8, r8)
    950c:	20000234 	.word	0x20000234
    9510:	41004000 	.word	0x41004000
    9514:	000090ed 	.word	0x000090ed
    9518:	ffffa502 	.word	0xffffa502

0000951c <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    951c:	b580      	push	{r7, lr}
    951e:	b086      	sub	sp, #24
    9520:	af00      	add	r7, sp, #0
    9522:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    9524:	4b2a      	ldr	r3, [pc, #168]	; (95d0 <nvm_get_parameters+0xb4>)
    9526:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9528:	697b      	ldr	r3, [r7, #20]
    952a:	2220      	movs	r2, #32
    952c:	32ff      	adds	r2, #255	; 0xff
    952e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    9530:	697b      	ldr	r3, [r7, #20]
    9532:	689b      	ldr	r3, [r3, #8]
    9534:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    9536:	693b      	ldr	r3, [r7, #16]
    9538:	0c1b      	lsrs	r3, r3, #16
    953a:	2207      	movs	r2, #7
    953c:	4013      	ands	r3, r2
    953e:	2208      	movs	r2, #8
    9540:	409a      	lsls	r2, r3
    9542:	0013      	movs	r3, r2
	parameters->page_size =
    9544:	b2da      	uxtb	r2, r3
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    954a:	693b      	ldr	r3, [r7, #16]
    954c:	b29a      	uxth	r2, r3
    954e:	687b      	ldr	r3, [r7, #4]
    9550:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    9552:	4b20      	ldr	r3, [pc, #128]	; (95d4 <nvm_get_parameters+0xb8>)
    9554:	881b      	ldrh	r3, [r3, #0]
    9556:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    9558:	091b      	lsrs	r3, r3, #4
    955a:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    955c:	230e      	movs	r3, #14
    955e:	18fb      	adds	r3, r7, r3
    9560:	2107      	movs	r1, #7
    9562:	400a      	ands	r2, r1
    9564:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    9566:	230e      	movs	r3, #14
    9568:	18fb      	adds	r3, r7, r3
    956a:	881b      	ldrh	r3, [r3, #0]
    956c:	2b07      	cmp	r3, #7
    956e:	d103      	bne.n	9578 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
    9570:	687b      	ldr	r3, [r7, #4]
    9572:	2200      	movs	r2, #0
    9574:	605a      	str	r2, [r3, #4]
    9576:	e00a      	b.n	958e <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    9578:	230e      	movs	r3, #14
    957a:	18fb      	adds	r3, r7, r3
    957c:	881b      	ldrh	r3, [r3, #0]
    957e:	2206      	movs	r2, #6
    9580:	1ad3      	subs	r3, r2, r3
    9582:	2204      	movs	r2, #4
    9584:	409a      	lsls	r2, r3
    9586:	0013      	movs	r3, r2
    9588:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    958a:	687b      	ldr	r3, [r7, #4]
    958c:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    958e:	4b11      	ldr	r3, [pc, #68]	; (95d4 <nvm_get_parameters+0xb8>)
    9590:	881b      	ldrh	r3, [r3, #0]
    9592:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    9594:	230c      	movs	r3, #12
    9596:	18fb      	adds	r3, r7, r3
    9598:	2107      	movs	r1, #7
    959a:	400a      	ands	r2, r1
    959c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    959e:	230c      	movs	r3, #12
    95a0:	18fb      	adds	r3, r7, r3
    95a2:	881b      	ldrh	r3, [r3, #0]
    95a4:	2b07      	cmp	r3, #7
    95a6:	d103      	bne.n	95b0 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
    95a8:	687b      	ldr	r3, [r7, #4]
    95aa:	2200      	movs	r2, #0
    95ac:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    95ae:	e00a      	b.n	95c6 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    95b0:	230c      	movs	r3, #12
    95b2:	18fb      	adds	r3, r7, r3
    95b4:	881b      	ldrh	r3, [r3, #0]
    95b6:	2207      	movs	r2, #7
    95b8:	1ad3      	subs	r3, r2, r3
    95ba:	2204      	movs	r2, #4
    95bc:	409a      	lsls	r2, r3
    95be:	0013      	movs	r3, r2
    95c0:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    95c2:	687b      	ldr	r3, [r7, #4]
    95c4:	609a      	str	r2, [r3, #8]
}
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	46bd      	mov	sp, r7
    95ca:	b006      	add	sp, #24
    95cc:	bd80      	pop	{r7, pc}
    95ce:	46c0      	nop			; (mov r8, r8)
    95d0:	41004000 	.word	0x41004000
    95d4:	00804000 	.word	0x00804000

000095d8 <system_pinmux_get_config_defaults>:
{
    95d8:	b580      	push	{r7, lr}
    95da:	b082      	sub	sp, #8
    95dc:	af00      	add	r7, sp, #0
    95de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    95e0:	687b      	ldr	r3, [r7, #4]
    95e2:	2280      	movs	r2, #128	; 0x80
    95e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	2200      	movs	r2, #0
    95ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    95ec:	687b      	ldr	r3, [r7, #4]
    95ee:	2201      	movs	r2, #1
    95f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    95f2:	687b      	ldr	r3, [r7, #4]
    95f4:	2200      	movs	r2, #0
    95f6:	70da      	strb	r2, [r3, #3]
}
    95f8:	46c0      	nop			; (mov r8, r8)
    95fa:	46bd      	mov	sp, r7
    95fc:	b002      	add	sp, #8
    95fe:	bd80      	pop	{r7, pc}

00009600 <system_pinmux_get_group_from_gpio_pin>:
{
    9600:	b580      	push	{r7, lr}
    9602:	b084      	sub	sp, #16
    9604:	af00      	add	r7, sp, #0
    9606:	0002      	movs	r2, r0
    9608:	1dfb      	adds	r3, r7, #7
    960a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    960c:	230f      	movs	r3, #15
    960e:	18fb      	adds	r3, r7, r3
    9610:	1dfa      	adds	r2, r7, #7
    9612:	7812      	ldrb	r2, [r2, #0]
    9614:	09d2      	lsrs	r2, r2, #7
    9616:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9618:	230e      	movs	r3, #14
    961a:	18fb      	adds	r3, r7, r3
    961c:	1dfa      	adds	r2, r7, #7
    961e:	7812      	ldrb	r2, [r2, #0]
    9620:	0952      	lsrs	r2, r2, #5
    9622:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9624:	4b0d      	ldr	r3, [pc, #52]	; (965c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9626:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    9628:	230f      	movs	r3, #15
    962a:	18fb      	adds	r3, r7, r3
    962c:	781b      	ldrb	r3, [r3, #0]
    962e:	2b00      	cmp	r3, #0
    9630:	d10f      	bne.n	9652 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9632:	230f      	movs	r3, #15
    9634:	18fb      	adds	r3, r7, r3
    9636:	781b      	ldrb	r3, [r3, #0]
    9638:	009b      	lsls	r3, r3, #2
    963a:	2210      	movs	r2, #16
    963c:	4694      	mov	ip, r2
    963e:	44bc      	add	ip, r7
    9640:	4463      	add	r3, ip
    9642:	3b08      	subs	r3, #8
    9644:	681a      	ldr	r2, [r3, #0]
    9646:	230e      	movs	r3, #14
    9648:	18fb      	adds	r3, r7, r3
    964a:	781b      	ldrb	r3, [r3, #0]
    964c:	01db      	lsls	r3, r3, #7
    964e:	18d3      	adds	r3, r2, r3
    9650:	e000      	b.n	9654 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    9652:	2300      	movs	r3, #0
}
    9654:	0018      	movs	r0, r3
    9656:	46bd      	mov	sp, r7
    9658:	b004      	add	sp, #16
    965a:	bd80      	pop	{r7, pc}
    965c:	41004400 	.word	0x41004400

00009660 <port_get_group_from_gpio_pin>:
{
    9660:	b580      	push	{r7, lr}
    9662:	b082      	sub	sp, #8
    9664:	af00      	add	r7, sp, #0
    9666:	0002      	movs	r2, r0
    9668:	1dfb      	adds	r3, r7, #7
    966a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    966c:	1dfb      	adds	r3, r7, #7
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	0018      	movs	r0, r3
    9672:	4b03      	ldr	r3, [pc, #12]	; (9680 <port_get_group_from_gpio_pin+0x20>)
    9674:	4798      	blx	r3
    9676:	0003      	movs	r3, r0
}
    9678:	0018      	movs	r0, r3
    967a:	46bd      	mov	sp, r7
    967c:	b002      	add	sp, #8
    967e:	bd80      	pop	{r7, pc}
    9680:	00009601 	.word	0x00009601

00009684 <port_pin_set_output_level>:
{
    9684:	b580      	push	{r7, lr}
    9686:	b084      	sub	sp, #16
    9688:	af00      	add	r7, sp, #0
    968a:	0002      	movs	r2, r0
    968c:	1dfb      	adds	r3, r7, #7
    968e:	701a      	strb	r2, [r3, #0]
    9690:	1dbb      	adds	r3, r7, #6
    9692:	1c0a      	adds	r2, r1, #0
    9694:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9696:	1dfb      	adds	r3, r7, #7
    9698:	781b      	ldrb	r3, [r3, #0]
    969a:	0018      	movs	r0, r3
    969c:	4b0d      	ldr	r3, [pc, #52]	; (96d4 <port_pin_set_output_level+0x50>)
    969e:	4798      	blx	r3
    96a0:	0003      	movs	r3, r0
    96a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    96a4:	1dfb      	adds	r3, r7, #7
    96a6:	781b      	ldrb	r3, [r3, #0]
    96a8:	221f      	movs	r2, #31
    96aa:	4013      	ands	r3, r2
    96ac:	2201      	movs	r2, #1
    96ae:	409a      	lsls	r2, r3
    96b0:	0013      	movs	r3, r2
    96b2:	60bb      	str	r3, [r7, #8]
	if (level) {
    96b4:	1dbb      	adds	r3, r7, #6
    96b6:	781b      	ldrb	r3, [r3, #0]
    96b8:	2b00      	cmp	r3, #0
    96ba:	d003      	beq.n	96c4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    96bc:	68fb      	ldr	r3, [r7, #12]
    96be:	68ba      	ldr	r2, [r7, #8]
    96c0:	619a      	str	r2, [r3, #24]
}
    96c2:	e002      	b.n	96ca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    96c4:	68fb      	ldr	r3, [r7, #12]
    96c6:	68ba      	ldr	r2, [r7, #8]
    96c8:	615a      	str	r2, [r3, #20]
}
    96ca:	46c0      	nop			; (mov r8, r8)
    96cc:	46bd      	mov	sp, r7
    96ce:	b004      	add	sp, #16
    96d0:	bd80      	pop	{r7, pc}
    96d2:	46c0      	nop			; (mov r8, r8)
    96d4:	00009661 	.word	0x00009661

000096d8 <system_gclk_chan_get_config_defaults>:
{
    96d8:	b580      	push	{r7, lr}
    96da:	b082      	sub	sp, #8
    96dc:	af00      	add	r7, sp, #0
    96de:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    96e0:	687b      	ldr	r3, [r7, #4]
    96e2:	2200      	movs	r2, #0
    96e4:	701a      	strb	r2, [r3, #0]
}
    96e6:	46c0      	nop			; (mov r8, r8)
    96e8:	46bd      	mov	sp, r7
    96ea:	b002      	add	sp, #8
    96ec:	bd80      	pop	{r7, pc}
	...

000096f0 <system_apb_clock_set_mask>:
{
    96f0:	b580      	push	{r7, lr}
    96f2:	b082      	sub	sp, #8
    96f4:	af00      	add	r7, sp, #0
    96f6:	0002      	movs	r2, r0
    96f8:	6039      	str	r1, [r7, #0]
    96fa:	1dfb      	adds	r3, r7, #7
    96fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    96fe:	1dfb      	adds	r3, r7, #7
    9700:	781b      	ldrb	r3, [r3, #0]
    9702:	2b01      	cmp	r3, #1
    9704:	d00a      	beq.n	971c <system_apb_clock_set_mask+0x2c>
    9706:	2b02      	cmp	r3, #2
    9708:	d00f      	beq.n	972a <system_apb_clock_set_mask+0x3a>
    970a:	2b00      	cmp	r3, #0
    970c:	d114      	bne.n	9738 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    970e:	4b0e      	ldr	r3, [pc, #56]	; (9748 <system_apb_clock_set_mask+0x58>)
    9710:	4a0d      	ldr	r2, [pc, #52]	; (9748 <system_apb_clock_set_mask+0x58>)
    9712:	6991      	ldr	r1, [r2, #24]
    9714:	683a      	ldr	r2, [r7, #0]
    9716:	430a      	orrs	r2, r1
    9718:	619a      	str	r2, [r3, #24]
			break;
    971a:	e00f      	b.n	973c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    971c:	4b0a      	ldr	r3, [pc, #40]	; (9748 <system_apb_clock_set_mask+0x58>)
    971e:	4a0a      	ldr	r2, [pc, #40]	; (9748 <system_apb_clock_set_mask+0x58>)
    9720:	69d1      	ldr	r1, [r2, #28]
    9722:	683a      	ldr	r2, [r7, #0]
    9724:	430a      	orrs	r2, r1
    9726:	61da      	str	r2, [r3, #28]
			break;
    9728:	e008      	b.n	973c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    972a:	4b07      	ldr	r3, [pc, #28]	; (9748 <system_apb_clock_set_mask+0x58>)
    972c:	4a06      	ldr	r2, [pc, #24]	; (9748 <system_apb_clock_set_mask+0x58>)
    972e:	6a11      	ldr	r1, [r2, #32]
    9730:	683a      	ldr	r2, [r7, #0]
    9732:	430a      	orrs	r2, r1
    9734:	621a      	str	r2, [r3, #32]
			break;
    9736:	e001      	b.n	973c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    9738:	2317      	movs	r3, #23
    973a:	e000      	b.n	973e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    973c:	2300      	movs	r3, #0
}
    973e:	0018      	movs	r0, r3
    9740:	46bd      	mov	sp, r7
    9742:	b002      	add	sp, #8
    9744:	bd80      	pop	{r7, pc}
    9746:	46c0      	nop			; (mov r8, r8)
    9748:	40000400 	.word	0x40000400

0000974c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    974c:	b580      	push	{r7, lr}
    974e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    9750:	4b05      	ldr	r3, [pc, #20]	; (9768 <system_is_debugger_present+0x1c>)
    9752:	789b      	ldrb	r3, [r3, #2]
    9754:	b2db      	uxtb	r3, r3
    9756:	001a      	movs	r2, r3
    9758:	2302      	movs	r3, #2
    975a:	4013      	ands	r3, r2
    975c:	1e5a      	subs	r2, r3, #1
    975e:	4193      	sbcs	r3, r2
    9760:	b2db      	uxtb	r3, r3
}
    9762:	0018      	movs	r0, r3
    9764:	46bd      	mov	sp, r7
    9766:	bd80      	pop	{r7, pc}
    9768:	41002000 	.word	0x41002000

0000976c <spi_is_write_complete>:
{
    976c:	b580      	push	{r7, lr}
    976e:	b084      	sub	sp, #16
    9770:	af00      	add	r7, sp, #0
    9772:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9774:	687b      	ldr	r3, [r7, #4]
    9776:	681b      	ldr	r3, [r3, #0]
    9778:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    977a:	68fb      	ldr	r3, [r7, #12]
    977c:	7e1b      	ldrb	r3, [r3, #24]
    977e:	b2db      	uxtb	r3, r3
    9780:	001a      	movs	r2, r3
    9782:	2302      	movs	r3, #2
    9784:	4013      	ands	r3, r2
    9786:	1e5a      	subs	r2, r3, #1
    9788:	4193      	sbcs	r3, r2
    978a:	b2db      	uxtb	r3, r3
}
    978c:	0018      	movs	r0, r3
    978e:	46bd      	mov	sp, r7
    9790:	b004      	add	sp, #16
    9792:	bd80      	pop	{r7, pc}

00009794 <spi_is_ready_to_write>:
{
    9794:	b580      	push	{r7, lr}
    9796:	b084      	sub	sp, #16
    9798:	af00      	add	r7, sp, #0
    979a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    979c:	687b      	ldr	r3, [r7, #4]
    979e:	681b      	ldr	r3, [r3, #0]
    97a0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    97a2:	68fb      	ldr	r3, [r7, #12]
    97a4:	7e1b      	ldrb	r3, [r3, #24]
    97a6:	b2db      	uxtb	r3, r3
    97a8:	001a      	movs	r2, r3
    97aa:	2301      	movs	r3, #1
    97ac:	4013      	ands	r3, r2
    97ae:	1e5a      	subs	r2, r3, #1
    97b0:	4193      	sbcs	r3, r2
    97b2:	b2db      	uxtb	r3, r3
}
    97b4:	0018      	movs	r0, r3
    97b6:	46bd      	mov	sp, r7
    97b8:	b004      	add	sp, #16
    97ba:	bd80      	pop	{r7, pc}

000097bc <spi_is_ready_to_read>:
{
    97bc:	b580      	push	{r7, lr}
    97be:	b084      	sub	sp, #16
    97c0:	af00      	add	r7, sp, #0
    97c2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    97c4:	687b      	ldr	r3, [r7, #4]
    97c6:	681b      	ldr	r3, [r3, #0]
    97c8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    97ca:	68fb      	ldr	r3, [r7, #12]
    97cc:	7e1b      	ldrb	r3, [r3, #24]
    97ce:	b2db      	uxtb	r3, r3
    97d0:	001a      	movs	r2, r3
    97d2:	2304      	movs	r3, #4
    97d4:	4013      	ands	r3, r2
    97d6:	1e5a      	subs	r2, r3, #1
    97d8:	4193      	sbcs	r3, r2
    97da:	b2db      	uxtb	r3, r3
}
    97dc:	0018      	movs	r0, r3
    97de:	46bd      	mov	sp, r7
    97e0:	b004      	add	sp, #16
    97e2:	bd80      	pop	{r7, pc}

000097e4 <spi_write>:
{
    97e4:	b580      	push	{r7, lr}
    97e6:	b084      	sub	sp, #16
    97e8:	af00      	add	r7, sp, #0
    97ea:	6078      	str	r0, [r7, #4]
    97ec:	000a      	movs	r2, r1
    97ee:	1cbb      	adds	r3, r7, #2
    97f0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    97f2:	687b      	ldr	r3, [r7, #4]
    97f4:	681b      	ldr	r3, [r3, #0]
    97f6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    97f8:	687b      	ldr	r3, [r7, #4]
    97fa:	0018      	movs	r0, r3
    97fc:	4b0a      	ldr	r3, [pc, #40]	; (9828 <spi_write+0x44>)
    97fe:	4798      	blx	r3
    9800:	0003      	movs	r3, r0
    9802:	001a      	movs	r2, r3
    9804:	2301      	movs	r3, #1
    9806:	4053      	eors	r3, r2
    9808:	b2db      	uxtb	r3, r3
    980a:	2b00      	cmp	r3, #0
    980c:	d001      	beq.n	9812 <spi_write+0x2e>
		return STATUS_BUSY;
    980e:	2305      	movs	r3, #5
    9810:	e006      	b.n	9820 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9812:	1cbb      	adds	r3, r7, #2
    9814:	881b      	ldrh	r3, [r3, #0]
    9816:	05db      	lsls	r3, r3, #23
    9818:	0dda      	lsrs	r2, r3, #23
    981a:	68fb      	ldr	r3, [r7, #12]
    981c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    981e:	2300      	movs	r3, #0
}
    9820:	0018      	movs	r0, r3
    9822:	46bd      	mov	sp, r7
    9824:	b004      	add	sp, #16
    9826:	bd80      	pop	{r7, pc}
    9828:	00009795 	.word	0x00009795

0000982c <spi_read>:
{
    982c:	b580      	push	{r7, lr}
    982e:	b084      	sub	sp, #16
    9830:	af00      	add	r7, sp, #0
    9832:	6078      	str	r0, [r7, #4]
    9834:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9836:	687b      	ldr	r3, [r7, #4]
    9838:	681b      	ldr	r3, [r3, #0]
    983a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    983c:	687b      	ldr	r3, [r7, #4]
    983e:	0018      	movs	r0, r3
    9840:	4b1b      	ldr	r3, [pc, #108]	; (98b0 <spi_read+0x84>)
    9842:	4798      	blx	r3
    9844:	0003      	movs	r3, r0
    9846:	001a      	movs	r2, r3
    9848:	2301      	movs	r3, #1
    984a:	4053      	eors	r3, r2
    984c:	b2db      	uxtb	r3, r3
    984e:	2b00      	cmp	r3, #0
    9850:	d001      	beq.n	9856 <spi_read+0x2a>
		return STATUS_ERR_IO;
    9852:	2310      	movs	r3, #16
    9854:	e027      	b.n	98a6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    9856:	230f      	movs	r3, #15
    9858:	18fb      	adds	r3, r7, r3
    985a:	2200      	movs	r2, #0
    985c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    985e:	68bb      	ldr	r3, [r7, #8]
    9860:	8b5b      	ldrh	r3, [r3, #26]
    9862:	b29b      	uxth	r3, r3
    9864:	001a      	movs	r2, r3
    9866:	2304      	movs	r3, #4
    9868:	4013      	ands	r3, r2
    986a:	d006      	beq.n	987a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    986c:	230f      	movs	r3, #15
    986e:	18fb      	adds	r3, r7, r3
    9870:	221e      	movs	r2, #30
    9872:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9874:	68bb      	ldr	r3, [r7, #8]
    9876:	2204      	movs	r2, #4
    9878:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    987a:	687b      	ldr	r3, [r7, #4]
    987c:	799b      	ldrb	r3, [r3, #6]
    987e:	2b01      	cmp	r3, #1
    9880:	d108      	bne.n	9894 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9882:	68bb      	ldr	r3, [r7, #8]
    9884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9886:	b29b      	uxth	r3, r3
    9888:	05db      	lsls	r3, r3, #23
    988a:	0ddb      	lsrs	r3, r3, #23
    988c:	b29a      	uxth	r2, r3
    988e:	683b      	ldr	r3, [r7, #0]
    9890:	801a      	strh	r2, [r3, #0]
    9892:	e005      	b.n	98a0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    9894:	68bb      	ldr	r3, [r7, #8]
    9896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9898:	b2db      	uxtb	r3, r3
    989a:	b29a      	uxth	r2, r3
    989c:	683b      	ldr	r3, [r7, #0]
    989e:	801a      	strh	r2, [r3, #0]
	return retval;
    98a0:	230f      	movs	r3, #15
    98a2:	18fb      	adds	r3, r7, r3
    98a4:	781b      	ldrb	r3, [r3, #0]
}
    98a6:	0018      	movs	r0, r3
    98a8:	46bd      	mov	sp, r7
    98aa:	b004      	add	sp, #16
    98ac:	bd80      	pop	{r7, pc}
    98ae:	46c0      	nop			; (mov r8, r8)
    98b0:	000097bd 	.word	0x000097bd

000098b4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    98b4:	b590      	push	{r4, r7, lr}
    98b6:	b093      	sub	sp, #76	; 0x4c
    98b8:	af00      	add	r7, sp, #0
    98ba:	6078      	str	r0, [r7, #4]
    98bc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    98be:	687b      	ldr	r3, [r7, #4]
    98c0:	681b      	ldr	r3, [r3, #0]
    98c2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    98c4:	687b      	ldr	r3, [r7, #4]
    98c6:	681b      	ldr	r3, [r3, #0]
    98c8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    98ca:	231c      	movs	r3, #28
    98cc:	18fb      	adds	r3, r7, r3
    98ce:	0018      	movs	r0, r3
    98d0:	4b75      	ldr	r3, [pc, #468]	; (9aa8 <_spi_set_config+0x1f4>)
    98d2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    98d4:	231c      	movs	r3, #28
    98d6:	18fb      	adds	r3, r7, r3
    98d8:	2200      	movs	r2, #0
    98da:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    98dc:	683b      	ldr	r3, [r7, #0]
    98de:	781b      	ldrb	r3, [r3, #0]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d103      	bne.n	98ec <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    98e4:	231c      	movs	r3, #28
    98e6:	18fb      	adds	r3, r7, r3
    98e8:	2200      	movs	r2, #0
    98ea:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    98ec:	683b      	ldr	r3, [r7, #0]
    98ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    98f0:	230c      	movs	r3, #12
    98f2:	18fb      	adds	r3, r7, r3
    98f4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    98f6:	683b      	ldr	r3, [r7, #0]
    98f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    98fa:	230c      	movs	r3, #12
    98fc:	18fb      	adds	r3, r7, r3
    98fe:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    9900:	683b      	ldr	r3, [r7, #0]
    9902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    9904:	230c      	movs	r3, #12
    9906:	18fb      	adds	r3, r7, r3
    9908:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    990a:	683b      	ldr	r3, [r7, #0]
    990c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    990e:	230c      	movs	r3, #12
    9910:	18fb      	adds	r3, r7, r3
    9912:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9914:	2347      	movs	r3, #71	; 0x47
    9916:	18fb      	adds	r3, r7, r3
    9918:	2200      	movs	r2, #0
    991a:	701a      	strb	r2, [r3, #0]
    991c:	e02c      	b.n	9978 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    991e:	2347      	movs	r3, #71	; 0x47
    9920:	18fb      	adds	r3, r7, r3
    9922:	781a      	ldrb	r2, [r3, #0]
    9924:	230c      	movs	r3, #12
    9926:	18fb      	adds	r3, r7, r3
    9928:	0092      	lsls	r2, r2, #2
    992a:	58d3      	ldr	r3, [r2, r3]
    992c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    992e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9930:	2b00      	cmp	r3, #0
    9932:	d109      	bne.n	9948 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    9934:	2347      	movs	r3, #71	; 0x47
    9936:	18fb      	adds	r3, r7, r3
    9938:	781a      	ldrb	r2, [r3, #0]
    993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    993c:	0011      	movs	r1, r2
    993e:	0018      	movs	r0, r3
    9940:	4b5a      	ldr	r3, [pc, #360]	; (9aac <_spi_set_config+0x1f8>)
    9942:	4798      	blx	r3
    9944:	0003      	movs	r3, r0
    9946:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    9948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    994a:	3301      	adds	r3, #1
    994c:	d00d      	beq.n	996a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    994e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9950:	b2da      	uxtb	r2, r3
    9952:	231c      	movs	r3, #28
    9954:	18fb      	adds	r3, r7, r3
    9956:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    9958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    995a:	0c1b      	lsrs	r3, r3, #16
    995c:	b2db      	uxtb	r3, r3
    995e:	221c      	movs	r2, #28
    9960:	18ba      	adds	r2, r7, r2
    9962:	0011      	movs	r1, r2
    9964:	0018      	movs	r0, r3
    9966:	4b52      	ldr	r3, [pc, #328]	; (9ab0 <_spi_set_config+0x1fc>)
    9968:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    996a:	2347      	movs	r3, #71	; 0x47
    996c:	18fb      	adds	r3, r7, r3
    996e:	781a      	ldrb	r2, [r3, #0]
    9970:	2347      	movs	r3, #71	; 0x47
    9972:	18fb      	adds	r3, r7, r3
    9974:	3201      	adds	r2, #1
    9976:	701a      	strb	r2, [r3, #0]
    9978:	2347      	movs	r3, #71	; 0x47
    997a:	18fb      	adds	r3, r7, r3
    997c:	781b      	ldrb	r3, [r3, #0]
    997e:	2b03      	cmp	r3, #3
    9980:	d9cd      	bls.n	991e <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    9982:	683b      	ldr	r3, [r7, #0]
    9984:	781a      	ldrb	r2, [r3, #0]
    9986:	687b      	ldr	r3, [r7, #4]
    9988:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    998a:	683b      	ldr	r3, [r7, #0]
    998c:	7c1a      	ldrb	r2, [r3, #16]
    998e:	687b      	ldr	r3, [r7, #4]
    9990:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    9992:	683b      	ldr	r3, [r7, #0]
    9994:	7c9a      	ldrb	r2, [r3, #18]
    9996:	687b      	ldr	r3, [r7, #4]
    9998:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    999a:	683b      	ldr	r3, [r7, #0]
    999c:	7d1a      	ldrb	r2, [r3, #20]
    999e:	687b      	ldr	r3, [r7, #4]
    99a0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    99a2:	230a      	movs	r3, #10
    99a4:	18fb      	adds	r3, r7, r3
    99a6:	2200      	movs	r2, #0
    99a8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    99aa:	2300      	movs	r3, #0
    99ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    99ae:	2300      	movs	r3, #0
    99b0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    99b2:	683b      	ldr	r3, [r7, #0]
    99b4:	781b      	ldrb	r3, [r3, #0]
    99b6:	2b01      	cmp	r3, #1
    99b8:	d129      	bne.n	9a0e <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    99ba:	687b      	ldr	r3, [r7, #4]
    99bc:	681b      	ldr	r3, [r3, #0]
    99be:	0018      	movs	r0, r3
    99c0:	4b3c      	ldr	r3, [pc, #240]	; (9ab4 <_spi_set_config+0x200>)
    99c2:	4798      	blx	r3
    99c4:	0003      	movs	r3, r0
    99c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    99c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    99ca:	3314      	adds	r3, #20
    99cc:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    99ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99d0:	b2db      	uxtb	r3, r3
    99d2:	0018      	movs	r0, r3
    99d4:	4b38      	ldr	r3, [pc, #224]	; (9ab8 <_spi_set_config+0x204>)
    99d6:	4798      	blx	r3
    99d8:	0003      	movs	r3, r0
    99da:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    99dc:	683b      	ldr	r3, [r7, #0]
    99de:	699b      	ldr	r3, [r3, #24]
    99e0:	2223      	movs	r2, #35	; 0x23
    99e2:	18bc      	adds	r4, r7, r2
    99e4:	220a      	movs	r2, #10
    99e6:	18ba      	adds	r2, r7, r2
    99e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    99ea:	0018      	movs	r0, r3
    99ec:	4b33      	ldr	r3, [pc, #204]	; (9abc <_spi_set_config+0x208>)
    99ee:	4798      	blx	r3
    99f0:	0003      	movs	r3, r0
    99f2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    99f4:	2323      	movs	r3, #35	; 0x23
    99f6:	18fb      	adds	r3, r7, r3
    99f8:	781b      	ldrb	r3, [r3, #0]
    99fa:	2b00      	cmp	r3, #0
    99fc:	d001      	beq.n	9a02 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    99fe:	2317      	movs	r3, #23
    9a00:	e04e      	b.n	9aa0 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    9a02:	230a      	movs	r3, #10
    9a04:	18fb      	adds	r3, r7, r3
    9a06:	881b      	ldrh	r3, [r3, #0]
    9a08:	b2da      	uxtb	r2, r3
    9a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a0c:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    9a0e:	683b      	ldr	r3, [r7, #0]
    9a10:	685b      	ldr	r3, [r3, #4]
    9a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9a14:	4313      	orrs	r3, r2
    9a16:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    9a18:	683b      	ldr	r3, [r7, #0]
    9a1a:	689b      	ldr	r3, [r3, #8]
    9a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9a1e:	4313      	orrs	r3, r2
    9a20:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    9a22:	683b      	ldr	r3, [r7, #0]
    9a24:	68db      	ldr	r3, [r3, #12]
    9a26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9a28:	4313      	orrs	r3, r2
    9a2a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    9a2c:	683b      	ldr	r3, [r7, #0]
    9a2e:	7c1b      	ldrb	r3, [r3, #16]
    9a30:	001a      	movs	r2, r3
    9a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9a34:	4313      	orrs	r3, r2
    9a36:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    9a38:	683b      	ldr	r3, [r7, #0]
    9a3a:	7c5b      	ldrb	r3, [r3, #17]
    9a3c:	2b00      	cmp	r3, #0
    9a3e:	d103      	bne.n	9a48 <_spi_set_config+0x194>
    9a40:	4b1f      	ldr	r3, [pc, #124]	; (9ac0 <_spi_set_config+0x20c>)
    9a42:	4798      	blx	r3
    9a44:	1e03      	subs	r3, r0, #0
    9a46:	d003      	beq.n	9a50 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    9a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a4a:	2280      	movs	r2, #128	; 0x80
    9a4c:	4313      	orrs	r3, r2
    9a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    9a50:	683b      	ldr	r3, [r7, #0]
    9a52:	7c9b      	ldrb	r3, [r3, #18]
    9a54:	2b00      	cmp	r3, #0
    9a56:	d004      	beq.n	9a62 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    9a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9a5a:	2280      	movs	r2, #128	; 0x80
    9a5c:	0292      	lsls	r2, r2, #10
    9a5e:	4313      	orrs	r3, r2
    9a60:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    9a62:	683b      	ldr	r3, [r7, #0]
    9a64:	7cdb      	ldrb	r3, [r3, #19]
    9a66:	2b00      	cmp	r3, #0
    9a68:	d004      	beq.n	9a74 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    9a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9a6c:	2280      	movs	r2, #128	; 0x80
    9a6e:	0092      	lsls	r2, r2, #2
    9a70:	4313      	orrs	r3, r2
    9a72:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    9a74:	683b      	ldr	r3, [r7, #0]
    9a76:	7d1b      	ldrb	r3, [r3, #20]
    9a78:	2b00      	cmp	r3, #0
    9a7a:	d004      	beq.n	9a86 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    9a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9a7e:	2280      	movs	r2, #128	; 0x80
    9a80:	0192      	lsls	r2, r2, #6
    9a82:	4313      	orrs	r3, r2
    9a84:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    9a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a88:	681a      	ldr	r2, [r3, #0]
    9a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a8c:	431a      	orrs	r2, r3
    9a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a90:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    9a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a94:	685a      	ldr	r2, [r3, #4]
    9a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9a98:	431a      	orrs	r2, r3
    9a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a9c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    9a9e:	2300      	movs	r3, #0
}
    9aa0:	0018      	movs	r0, r3
    9aa2:	46bd      	mov	sp, r7
    9aa4:	b013      	add	sp, #76	; 0x4c
    9aa6:	bd90      	pop	{r4, r7, pc}
    9aa8:	000095d9 	.word	0x000095d9
    9aac:	0000f071 	.word	0x0000f071
    9ab0:	00011145 	.word	0x00011145
    9ab4:	0000f22d 	.word	0x0000f22d
    9ab8:	00010f7d 	.word	0x00010f7d
    9abc:	0000eda7 	.word	0x0000eda7
    9ac0:	0000974d 	.word	0x0000974d

00009ac4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    9ac4:	b590      	push	{r4, r7, lr}
    9ac6:	b08b      	sub	sp, #44	; 0x2c
    9ac8:	af00      	add	r7, sp, #0
    9aca:	60f8      	str	r0, [r7, #12]
    9acc:	60b9      	str	r1, [r7, #8]
    9ace:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    9ad0:	68fb      	ldr	r3, [r7, #12]
    9ad2:	68ba      	ldr	r2, [r7, #8]
    9ad4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    9ad6:	68fb      	ldr	r3, [r7, #12]
    9ad8:	681b      	ldr	r3, [r3, #0]
    9ada:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    9adc:	6a3b      	ldr	r3, [r7, #32]
    9ade:	681b      	ldr	r3, [r3, #0]
    9ae0:	2202      	movs	r2, #2
    9ae2:	4013      	ands	r3, r2
    9ae4:	d001      	beq.n	9aea <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    9ae6:	231c      	movs	r3, #28
    9ae8:	e09c      	b.n	9c24 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    9aea:	6a3b      	ldr	r3, [r7, #32]
    9aec:	681b      	ldr	r3, [r3, #0]
    9aee:	2201      	movs	r2, #1
    9af0:	4013      	ands	r3, r2
    9af2:	d001      	beq.n	9af8 <spi_init+0x34>
		return STATUS_BUSY;
    9af4:	2305      	movs	r3, #5
    9af6:	e095      	b.n	9c24 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9af8:	68fb      	ldr	r3, [r7, #12]
    9afa:	681b      	ldr	r3, [r3, #0]
    9afc:	0018      	movs	r0, r3
    9afe:	4b4b      	ldr	r3, [pc, #300]	; (9c2c <spi_init+0x168>)
    9b00:	4798      	blx	r3
    9b02:	0003      	movs	r3, r0
    9b04:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    9b06:	69fb      	ldr	r3, [r7, #28]
    9b08:	3302      	adds	r3, #2
    9b0a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9b0c:	69fb      	ldr	r3, [r7, #28]
    9b0e:	3314      	adds	r3, #20
    9b10:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    9b12:	2201      	movs	r2, #1
    9b14:	69bb      	ldr	r3, [r7, #24]
    9b16:	409a      	lsls	r2, r3
    9b18:	0013      	movs	r3, r2
    9b1a:	0019      	movs	r1, r3
    9b1c:	2002      	movs	r0, #2
    9b1e:	4b44      	ldr	r3, [pc, #272]	; (9c30 <spi_init+0x16c>)
    9b20:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    9b22:	2310      	movs	r3, #16
    9b24:	18fb      	adds	r3, r7, r3
    9b26:	0018      	movs	r0, r3
    9b28:	4b42      	ldr	r3, [pc, #264]	; (9c34 <spi_init+0x170>)
    9b2a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    9b2c:	687b      	ldr	r3, [r7, #4]
    9b2e:	2224      	movs	r2, #36	; 0x24
    9b30:	5c9a      	ldrb	r2, [r3, r2]
    9b32:	2310      	movs	r3, #16
    9b34:	18fb      	adds	r3, r7, r3
    9b36:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    9b38:	697b      	ldr	r3, [r7, #20]
    9b3a:	b2db      	uxtb	r3, r3
    9b3c:	2210      	movs	r2, #16
    9b3e:	18ba      	adds	r2, r7, r2
    9b40:	0011      	movs	r1, r2
    9b42:	0018      	movs	r0, r3
    9b44:	4b3c      	ldr	r3, [pc, #240]	; (9c38 <spi_init+0x174>)
    9b46:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9b48:	697b      	ldr	r3, [r7, #20]
    9b4a:	b2db      	uxtb	r3, r3
    9b4c:	0018      	movs	r0, r3
    9b4e:	4b3b      	ldr	r3, [pc, #236]	; (9c3c <spi_init+0x178>)
    9b50:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    9b52:	687b      	ldr	r3, [r7, #4]
    9b54:	2224      	movs	r2, #36	; 0x24
    9b56:	5c9b      	ldrb	r3, [r3, r2]
    9b58:	2100      	movs	r1, #0
    9b5a:	0018      	movs	r0, r3
    9b5c:	4b38      	ldr	r3, [pc, #224]	; (9c40 <spi_init+0x17c>)
    9b5e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    9b60:	687b      	ldr	r3, [r7, #4]
    9b62:	781b      	ldrb	r3, [r3, #0]
    9b64:	2b01      	cmp	r3, #1
    9b66:	d105      	bne.n	9b74 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    9b68:	6a3b      	ldr	r3, [r7, #32]
    9b6a:	681b      	ldr	r3, [r3, #0]
    9b6c:	220c      	movs	r2, #12
    9b6e:	431a      	orrs	r2, r3
    9b70:	6a3b      	ldr	r3, [r7, #32]
    9b72:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    9b74:	2327      	movs	r3, #39	; 0x27
    9b76:	18fb      	adds	r3, r7, r3
    9b78:	2200      	movs	r2, #0
    9b7a:	701a      	strb	r2, [r3, #0]
    9b7c:	e010      	b.n	9ba0 <spi_init+0xdc>
		module->callback[i]        = NULL;
    9b7e:	2327      	movs	r3, #39	; 0x27
    9b80:	18fb      	adds	r3, r7, r3
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	68fa      	ldr	r2, [r7, #12]
    9b86:	3302      	adds	r3, #2
    9b88:	009b      	lsls	r3, r3, #2
    9b8a:	18d3      	adds	r3, r2, r3
    9b8c:	3304      	adds	r3, #4
    9b8e:	2200      	movs	r2, #0
    9b90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    9b92:	2327      	movs	r3, #39	; 0x27
    9b94:	18fb      	adds	r3, r7, r3
    9b96:	781a      	ldrb	r2, [r3, #0]
    9b98:	2327      	movs	r3, #39	; 0x27
    9b9a:	18fb      	adds	r3, r7, r3
    9b9c:	3201      	adds	r2, #1
    9b9e:	701a      	strb	r2, [r3, #0]
    9ba0:	2327      	movs	r3, #39	; 0x27
    9ba2:	18fb      	adds	r3, r7, r3
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	2b06      	cmp	r3, #6
    9ba8:	d9e9      	bls.n	9b7e <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    9baa:	68fb      	ldr	r3, [r7, #12]
    9bac:	2200      	movs	r2, #0
    9bae:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    9bb0:	68fb      	ldr	r3, [r7, #12]
    9bb2:	2200      	movs	r2, #0
    9bb4:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    9bb6:	68fb      	ldr	r3, [r7, #12]
    9bb8:	2200      	movs	r2, #0
    9bba:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    9bbc:	68fb      	ldr	r3, [r7, #12]
    9bbe:	2200      	movs	r2, #0
    9bc0:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    9bc2:	68fb      	ldr	r3, [r7, #12]
    9bc4:	2236      	movs	r2, #54	; 0x36
    9bc6:	2100      	movs	r1, #0
    9bc8:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    9bca:	68fb      	ldr	r3, [r7, #12]
    9bcc:	2237      	movs	r2, #55	; 0x37
    9bce:	2100      	movs	r1, #0
    9bd0:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    9bd2:	68fb      	ldr	r3, [r7, #12]
    9bd4:	2238      	movs	r2, #56	; 0x38
    9bd6:	2100      	movs	r1, #0
    9bd8:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    9bda:	68fb      	ldr	r3, [r7, #12]
    9bdc:	2203      	movs	r2, #3
    9bde:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    9be0:	68fb      	ldr	r3, [r7, #12]
    9be2:	2200      	movs	r2, #0
    9be4:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    9be6:	68fb      	ldr	r3, [r7, #12]
    9be8:	681b      	ldr	r3, [r3, #0]
    9bea:	2213      	movs	r2, #19
    9bec:	18bc      	adds	r4, r7, r2
    9bee:	0018      	movs	r0, r3
    9bf0:	4b0e      	ldr	r3, [pc, #56]	; (9c2c <spi_init+0x168>)
    9bf2:	4798      	blx	r3
    9bf4:	0003      	movs	r3, r0
    9bf6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    9bf8:	4a12      	ldr	r2, [pc, #72]	; (9c44 <spi_init+0x180>)
    9bfa:	2313      	movs	r3, #19
    9bfc:	18fb      	adds	r3, r7, r3
    9bfe:	781b      	ldrb	r3, [r3, #0]
    9c00:	0011      	movs	r1, r2
    9c02:	0018      	movs	r0, r3
    9c04:	4b10      	ldr	r3, [pc, #64]	; (9c48 <spi_init+0x184>)
    9c06:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    9c08:	2313      	movs	r3, #19
    9c0a:	18fb      	adds	r3, r7, r3
    9c0c:	781a      	ldrb	r2, [r3, #0]
    9c0e:	4b0f      	ldr	r3, [pc, #60]	; (9c4c <spi_init+0x188>)
    9c10:	0092      	lsls	r2, r2, #2
    9c12:	68f9      	ldr	r1, [r7, #12]
    9c14:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    9c16:	687a      	ldr	r2, [r7, #4]
    9c18:	68fb      	ldr	r3, [r7, #12]
    9c1a:	0011      	movs	r1, r2
    9c1c:	0018      	movs	r0, r3
    9c1e:	4b0c      	ldr	r3, [pc, #48]	; (9c50 <spi_init+0x18c>)
    9c20:	4798      	blx	r3
    9c22:	0003      	movs	r3, r0
}
    9c24:	0018      	movs	r0, r3
    9c26:	46bd      	mov	sp, r7
    9c28:	b00b      	add	sp, #44	; 0x2c
    9c2a:	bd90      	pop	{r4, r7, pc}
    9c2c:	0000f22d 	.word	0x0000f22d
    9c30:	000096f1 	.word	0x000096f1
    9c34:	000096d9 	.word	0x000096d9
    9c38:	00010e59 	.word	0x00010e59
    9c3c:	00010e9d 	.word	0x00010e9d
    9c40:	0000efe5 	.word	0x0000efe5
    9c44:	0000a11d 	.word	0x0000a11d
    9c48:	0000fe75 	.word	0x0000fe75
    9c4c:	20000904 	.word	0x20000904
    9c50:	000098b5 	.word	0x000098b5

00009c54 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    9c54:	b590      	push	{r4, r7, lr}
    9c56:	b087      	sub	sp, #28
    9c58:	af00      	add	r7, sp, #0
    9c5a:	60f8      	str	r0, [r7, #12]
    9c5c:	60b9      	str	r1, [r7, #8]
    9c5e:	0019      	movs	r1, r3
    9c60:	1dbb      	adds	r3, r7, #6
    9c62:	801a      	strh	r2, [r3, #0]
    9c64:	1d3b      	adds	r3, r7, #4
    9c66:	1c0a      	adds	r2, r1, #0
    9c68:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    9c6a:	68fb      	ldr	r3, [r7, #12]
    9c6c:	2238      	movs	r2, #56	; 0x38
    9c6e:	5c9b      	ldrb	r3, [r3, r2]
    9c70:	b2db      	uxtb	r3, r3
    9c72:	2b05      	cmp	r3, #5
    9c74:	d101      	bne.n	9c7a <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    9c76:	2305      	movs	r3, #5
    9c78:	e07a      	b.n	9d70 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    9c7a:	1dbb      	adds	r3, r7, #6
    9c7c:	881b      	ldrh	r3, [r3, #0]
    9c7e:	2b00      	cmp	r3, #0
    9c80:	d101      	bne.n	9c86 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    9c82:	2317      	movs	r3, #23
    9c84:	e074      	b.n	9d70 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    9c86:	68fb      	ldr	r3, [r7, #12]
    9c88:	79db      	ldrb	r3, [r3, #7]
    9c8a:	2201      	movs	r2, #1
    9c8c:	4053      	eors	r3, r2
    9c8e:	b2db      	uxtb	r3, r3
    9c90:	2b00      	cmp	r3, #0
    9c92:	d001      	beq.n	9c98 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    9c94:	231c      	movs	r3, #28
    9c96:	e06b      	b.n	9d70 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    9c98:	2316      	movs	r3, #22
    9c9a:	18fb      	adds	r3, r7, r3
    9c9c:	2200      	movs	r2, #0
    9c9e:	801a      	strh	r2, [r3, #0]

	while (length--) {
    9ca0:	e05e      	b.n	9d60 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    9ca2:	68fb      	ldr	r3, [r7, #12]
    9ca4:	795b      	ldrb	r3, [r3, #5]
    9ca6:	2b01      	cmp	r3, #1
    9ca8:	d112      	bne.n	9cd0 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    9caa:	46c0      	nop			; (mov r8, r8)
    9cac:	68fb      	ldr	r3, [r7, #12]
    9cae:	0018      	movs	r0, r3
    9cb0:	4b31      	ldr	r3, [pc, #196]	; (9d78 <spi_read_buffer_wait+0x124>)
    9cb2:	4798      	blx	r3
    9cb4:	0003      	movs	r3, r0
    9cb6:	001a      	movs	r2, r3
    9cb8:	2301      	movs	r3, #1
    9cba:	4053      	eors	r3, r2
    9cbc:	b2db      	uxtb	r3, r3
    9cbe:	2b00      	cmp	r3, #0
    9cc0:	d1f4      	bne.n	9cac <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    9cc2:	1d3b      	adds	r3, r7, #4
    9cc4:	881a      	ldrh	r2, [r3, #0]
    9cc6:	68fb      	ldr	r3, [r7, #12]
    9cc8:	0011      	movs	r1, r2
    9cca:	0018      	movs	r0, r3
    9ccc:	4b2b      	ldr	r3, [pc, #172]	; (9d7c <spi_read_buffer_wait+0x128>)
    9cce:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    9cd0:	46c0      	nop			; (mov r8, r8)
    9cd2:	68fb      	ldr	r3, [r7, #12]
    9cd4:	0018      	movs	r0, r3
    9cd6:	4b2a      	ldr	r3, [pc, #168]	; (9d80 <spi_read_buffer_wait+0x12c>)
    9cd8:	4798      	blx	r3
    9cda:	0003      	movs	r3, r0
    9cdc:	001a      	movs	r2, r3
    9cde:	2301      	movs	r3, #1
    9ce0:	4053      	eors	r3, r2
    9ce2:	b2db      	uxtb	r3, r3
    9ce4:	2b00      	cmp	r3, #0
    9ce6:	d1f4      	bne.n	9cd2 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    9ce8:	2312      	movs	r3, #18
    9cea:	18fb      	adds	r3, r7, r3
    9cec:	2200      	movs	r2, #0
    9cee:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    9cf0:	2315      	movs	r3, #21
    9cf2:	18fc      	adds	r4, r7, r3
    9cf4:	2312      	movs	r3, #18
    9cf6:	18fa      	adds	r2, r7, r3
    9cf8:	68fb      	ldr	r3, [r7, #12]
    9cfa:	0011      	movs	r1, r2
    9cfc:	0018      	movs	r0, r3
    9cfe:	4b21      	ldr	r3, [pc, #132]	; (9d84 <spi_read_buffer_wait+0x130>)
    9d00:	4798      	blx	r3
    9d02:	0003      	movs	r3, r0
    9d04:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    9d06:	2315      	movs	r3, #21
    9d08:	18fb      	adds	r3, r7, r3
    9d0a:	781b      	ldrb	r3, [r3, #0]
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	d003      	beq.n	9d18 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    9d10:	2315      	movs	r3, #21
    9d12:	18fb      	adds	r3, r7, r3
    9d14:	781b      	ldrb	r3, [r3, #0]
    9d16:	e02b      	b.n	9d70 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    9d18:	2316      	movs	r3, #22
    9d1a:	18fb      	adds	r3, r7, r3
    9d1c:	881b      	ldrh	r3, [r3, #0]
    9d1e:	2216      	movs	r2, #22
    9d20:	18ba      	adds	r2, r7, r2
    9d22:	1c59      	adds	r1, r3, #1
    9d24:	8011      	strh	r1, [r2, #0]
    9d26:	001a      	movs	r2, r3
    9d28:	68bb      	ldr	r3, [r7, #8]
    9d2a:	189b      	adds	r3, r3, r2
    9d2c:	2212      	movs	r2, #18
    9d2e:	18ba      	adds	r2, r7, r2
    9d30:	8812      	ldrh	r2, [r2, #0]
    9d32:	b2d2      	uxtb	r2, r2
    9d34:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9d36:	68fb      	ldr	r3, [r7, #12]
    9d38:	799b      	ldrb	r3, [r3, #6]
    9d3a:	2b01      	cmp	r3, #1
    9d3c:	d110      	bne.n	9d60 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    9d3e:	2316      	movs	r3, #22
    9d40:	18fb      	adds	r3, r7, r3
    9d42:	881b      	ldrh	r3, [r3, #0]
    9d44:	2216      	movs	r2, #22
    9d46:	18ba      	adds	r2, r7, r2
    9d48:	1c59      	adds	r1, r3, #1
    9d4a:	8011      	strh	r1, [r2, #0]
    9d4c:	001a      	movs	r2, r3
    9d4e:	68bb      	ldr	r3, [r7, #8]
    9d50:	189b      	adds	r3, r3, r2
    9d52:	2212      	movs	r2, #18
    9d54:	18ba      	adds	r2, r7, r2
    9d56:	8812      	ldrh	r2, [r2, #0]
    9d58:	0a12      	lsrs	r2, r2, #8
    9d5a:	b292      	uxth	r2, r2
    9d5c:	b2d2      	uxtb	r2, r2
    9d5e:	701a      	strb	r2, [r3, #0]
	while (length--) {
    9d60:	1dbb      	adds	r3, r7, #6
    9d62:	881b      	ldrh	r3, [r3, #0]
    9d64:	1dba      	adds	r2, r7, #6
    9d66:	1e59      	subs	r1, r3, #1
    9d68:	8011      	strh	r1, [r2, #0]
    9d6a:	2b00      	cmp	r3, #0
    9d6c:	d199      	bne.n	9ca2 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    9d6e:	2300      	movs	r3, #0
}
    9d70:	0018      	movs	r0, r3
    9d72:	46bd      	mov	sp, r7
    9d74:	b007      	add	sp, #28
    9d76:	bd90      	pop	{r4, r7, pc}
    9d78:	00009795 	.word	0x00009795
    9d7c:	000097e5 	.word	0x000097e5
    9d80:	000097bd 	.word	0x000097bd
    9d84:	0000982d 	.word	0x0000982d

00009d88 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    9d88:	b580      	push	{r7, lr}
    9d8a:	b086      	sub	sp, #24
    9d8c:	af00      	add	r7, sp, #0
    9d8e:	60f8      	str	r0, [r7, #12]
    9d90:	60b9      	str	r1, [r7, #8]
    9d92:	1dfb      	adds	r3, r7, #7
    9d94:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    9d96:	68fb      	ldr	r3, [r7, #12]
    9d98:	795b      	ldrb	r3, [r3, #5]
    9d9a:	2b01      	cmp	r3, #1
    9d9c:	d001      	beq.n	9da2 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    9d9e:	2315      	movs	r3, #21
    9da0:	e05c      	b.n	9e5c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    9da2:	68fb      	ldr	r3, [r7, #12]
    9da4:	7a1b      	ldrb	r3, [r3, #8]
    9da6:	2201      	movs	r2, #1
    9da8:	4053      	eors	r3, r2
    9daa:	b2db      	uxtb	r3, r3
    9dac:	2b00      	cmp	r3, #0
    9dae:	d054      	beq.n	9e5a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    9db0:	1dfb      	adds	r3, r7, #7
    9db2:	781b      	ldrb	r3, [r3, #0]
    9db4:	2b00      	cmp	r3, #0
    9db6:	d04a      	beq.n	9e4e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    9db8:	68bb      	ldr	r3, [r7, #8]
    9dba:	785b      	ldrb	r3, [r3, #1]
    9dbc:	2b00      	cmp	r3, #0
    9dbe:	d03f      	beq.n	9e40 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    9dc0:	68fb      	ldr	r3, [r7, #12]
    9dc2:	0018      	movs	r0, r3
    9dc4:	4b27      	ldr	r3, [pc, #156]	; (9e64 <spi_select_slave+0xdc>)
    9dc6:	4798      	blx	r3
    9dc8:	0003      	movs	r3, r0
    9dca:	001a      	movs	r2, r3
    9dcc:	2301      	movs	r3, #1
    9dce:	4053      	eors	r3, r2
    9dd0:	b2db      	uxtb	r3, r3
    9dd2:	2b00      	cmp	r3, #0
    9dd4:	d007      	beq.n	9de6 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    9dd6:	68bb      	ldr	r3, [r7, #8]
    9dd8:	781b      	ldrb	r3, [r3, #0]
    9dda:	2101      	movs	r1, #1
    9ddc:	0018      	movs	r0, r3
    9dde:	4b22      	ldr	r3, [pc, #136]	; (9e68 <spi_select_slave+0xe0>)
    9de0:	4798      	blx	r3
					return STATUS_BUSY;
    9de2:	2305      	movs	r3, #5
    9de4:	e03a      	b.n	9e5c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    9de6:	68bb      	ldr	r3, [r7, #8]
    9de8:	781b      	ldrb	r3, [r3, #0]
    9dea:	2100      	movs	r1, #0
    9dec:	0018      	movs	r0, r3
    9dee:	4b1e      	ldr	r3, [pc, #120]	; (9e68 <spi_select_slave+0xe0>)
    9df0:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    9df2:	68bb      	ldr	r3, [r7, #8]
    9df4:	789b      	ldrb	r3, [r3, #2]
    9df6:	b29a      	uxth	r2, r3
    9df8:	68fb      	ldr	r3, [r7, #12]
    9dfa:	0011      	movs	r1, r2
    9dfc:	0018      	movs	r0, r3
    9dfe:	4b1b      	ldr	r3, [pc, #108]	; (9e6c <spi_select_slave+0xe4>)
    9e00:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    9e02:	68fb      	ldr	r3, [r7, #12]
    9e04:	79db      	ldrb	r3, [r3, #7]
    9e06:	2201      	movs	r2, #1
    9e08:	4053      	eors	r3, r2
    9e0a:	b2db      	uxtb	r3, r3
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	d024      	beq.n	9e5a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    9e10:	46c0      	nop			; (mov r8, r8)
    9e12:	68fb      	ldr	r3, [r7, #12]
    9e14:	0018      	movs	r0, r3
    9e16:	4b16      	ldr	r3, [pc, #88]	; (9e70 <spi_select_slave+0xe8>)
    9e18:	4798      	blx	r3
    9e1a:	0003      	movs	r3, r0
    9e1c:	001a      	movs	r2, r3
    9e1e:	2301      	movs	r3, #1
    9e20:	4053      	eors	r3, r2
    9e22:	b2db      	uxtb	r3, r3
    9e24:	2b00      	cmp	r3, #0
    9e26:	d1f4      	bne.n	9e12 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    9e28:	2316      	movs	r3, #22
    9e2a:	18fb      	adds	r3, r7, r3
    9e2c:	2200      	movs	r2, #0
    9e2e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    9e30:	2316      	movs	r3, #22
    9e32:	18fa      	adds	r2, r7, r3
    9e34:	68fb      	ldr	r3, [r7, #12]
    9e36:	0011      	movs	r1, r2
    9e38:	0018      	movs	r0, r3
    9e3a:	4b0e      	ldr	r3, [pc, #56]	; (9e74 <spi_select_slave+0xec>)
    9e3c:	4798      	blx	r3
    9e3e:	e00c      	b.n	9e5a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    9e40:	68bb      	ldr	r3, [r7, #8]
    9e42:	781b      	ldrb	r3, [r3, #0]
    9e44:	2100      	movs	r1, #0
    9e46:	0018      	movs	r0, r3
    9e48:	4b07      	ldr	r3, [pc, #28]	; (9e68 <spi_select_slave+0xe0>)
    9e4a:	4798      	blx	r3
    9e4c:	e005      	b.n	9e5a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    9e4e:	68bb      	ldr	r3, [r7, #8]
    9e50:	781b      	ldrb	r3, [r3, #0]
    9e52:	2101      	movs	r1, #1
    9e54:	0018      	movs	r0, r3
    9e56:	4b04      	ldr	r3, [pc, #16]	; (9e68 <spi_select_slave+0xe0>)
    9e58:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    9e5a:	2300      	movs	r3, #0
}
    9e5c:	0018      	movs	r0, r3
    9e5e:	46bd      	mov	sp, r7
    9e60:	b006      	add	sp, #24
    9e62:	bd80      	pop	{r7, pc}
    9e64:	00009795 	.word	0x00009795
    9e68:	00009685 	.word	0x00009685
    9e6c:	000097e5 	.word	0x000097e5
    9e70:	000097bd 	.word	0x000097bd
    9e74:	0000982d 	.word	0x0000982d

00009e78 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    9e78:	b580      	push	{r7, lr}
    9e7a:	b086      	sub	sp, #24
    9e7c:	af00      	add	r7, sp, #0
    9e7e:	60f8      	str	r0, [r7, #12]
    9e80:	60b9      	str	r1, [r7, #8]
    9e82:	1dbb      	adds	r3, r7, #6
    9e84:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    9e86:	68fb      	ldr	r3, [r7, #12]
    9e88:	2238      	movs	r2, #56	; 0x38
    9e8a:	5c9b      	ldrb	r3, [r3, r2]
    9e8c:	b2db      	uxtb	r3, r3
    9e8e:	2b05      	cmp	r3, #5
    9e90:	d101      	bne.n	9e96 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    9e92:	2305      	movs	r3, #5
    9e94:	e087      	b.n	9fa6 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    9e96:	1dbb      	adds	r3, r7, #6
    9e98:	881b      	ldrh	r3, [r3, #0]
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d101      	bne.n	9ea2 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    9e9e:	2317      	movs	r3, #23
    9ea0:	e081      	b.n	9fa6 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    9ea2:	2316      	movs	r3, #22
    9ea4:	18fb      	adds	r3, r7, r3
    9ea6:	2200      	movs	r2, #0
    9ea8:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    9eaa:	2314      	movs	r3, #20
    9eac:	18fb      	adds	r3, r7, r3
    9eae:	1dba      	adds	r2, r7, #6
    9eb0:	8812      	ldrh	r2, [r2, #0]
    9eb2:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    9eb4:	e05f      	b.n	9f76 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    9eb6:	46c0      	nop			; (mov r8, r8)
    9eb8:	68fb      	ldr	r3, [r7, #12]
    9eba:	0018      	movs	r0, r3
    9ebc:	4b3c      	ldr	r3, [pc, #240]	; (9fb0 <spi_write_buffer_wait+0x138>)
    9ebe:	4798      	blx	r3
    9ec0:	0003      	movs	r3, r0
    9ec2:	001a      	movs	r2, r3
    9ec4:	2301      	movs	r3, #1
    9ec6:	4053      	eors	r3, r2
    9ec8:	b2db      	uxtb	r3, r3
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d1f4      	bne.n	9eb8 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    9ece:	2316      	movs	r3, #22
    9ed0:	18fb      	adds	r3, r7, r3
    9ed2:	881b      	ldrh	r3, [r3, #0]
    9ed4:	2216      	movs	r2, #22
    9ed6:	18ba      	adds	r2, r7, r2
    9ed8:	1c59      	adds	r1, r3, #1
    9eda:	8011      	strh	r1, [r2, #0]
    9edc:	001a      	movs	r2, r3
    9ede:	68bb      	ldr	r3, [r7, #8]
    9ee0:	189b      	adds	r3, r3, r2
    9ee2:	781a      	ldrb	r2, [r3, #0]
    9ee4:	2312      	movs	r3, #18
    9ee6:	18fb      	adds	r3, r7, r3
    9ee8:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9eea:	68fb      	ldr	r3, [r7, #12]
    9eec:	799b      	ldrb	r3, [r3, #6]
    9eee:	2b01      	cmp	r3, #1
    9ef0:	d115      	bne.n	9f1e <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    9ef2:	2316      	movs	r3, #22
    9ef4:	18fb      	adds	r3, r7, r3
    9ef6:	881b      	ldrh	r3, [r3, #0]
    9ef8:	2216      	movs	r2, #22
    9efa:	18ba      	adds	r2, r7, r2
    9efc:	1c59      	adds	r1, r3, #1
    9efe:	8011      	strh	r1, [r2, #0]
    9f00:	001a      	movs	r2, r3
    9f02:	68bb      	ldr	r3, [r7, #8]
    9f04:	189b      	adds	r3, r3, r2
    9f06:	781b      	ldrb	r3, [r3, #0]
    9f08:	021b      	lsls	r3, r3, #8
    9f0a:	b21a      	sxth	r2, r3
    9f0c:	2312      	movs	r3, #18
    9f0e:	18fb      	adds	r3, r7, r3
    9f10:	2100      	movs	r1, #0
    9f12:	5e5b      	ldrsh	r3, [r3, r1]
    9f14:	4313      	orrs	r3, r2
    9f16:	b21a      	sxth	r2, r3
    9f18:	2312      	movs	r3, #18
    9f1a:	18fb      	adds	r3, r7, r3
    9f1c:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    9f1e:	2312      	movs	r3, #18
    9f20:	18fb      	adds	r3, r7, r3
    9f22:	881a      	ldrh	r2, [r3, #0]
    9f24:	68fb      	ldr	r3, [r7, #12]
    9f26:	0011      	movs	r1, r2
    9f28:	0018      	movs	r0, r3
    9f2a:	4b22      	ldr	r3, [pc, #136]	; (9fb4 <spi_write_buffer_wait+0x13c>)
    9f2c:	4798      	blx	r3

		if (module->receiver_enabled) {
    9f2e:	68fb      	ldr	r3, [r7, #12]
    9f30:	79db      	ldrb	r3, [r3, #7]
    9f32:	2214      	movs	r2, #20
    9f34:	18ba      	adds	r2, r7, r2
    9f36:	2114      	movs	r1, #20
    9f38:	1879      	adds	r1, r7, r1
    9f3a:	8809      	ldrh	r1, [r1, #0]
    9f3c:	8011      	strh	r1, [r2, #0]
    9f3e:	2b00      	cmp	r3, #0
    9f40:	d019      	beq.n	9f76 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    9f42:	46c0      	nop			; (mov r8, r8)
    9f44:	68fb      	ldr	r3, [r7, #12]
    9f46:	0018      	movs	r0, r3
    9f48:	4b1b      	ldr	r3, [pc, #108]	; (9fb8 <spi_write_buffer_wait+0x140>)
    9f4a:	4798      	blx	r3
    9f4c:	0003      	movs	r3, r0
    9f4e:	001a      	movs	r2, r3
    9f50:	2301      	movs	r3, #1
    9f52:	4053      	eors	r3, r2
    9f54:	b2db      	uxtb	r3, r3
    9f56:	2b00      	cmp	r3, #0
    9f58:	d1f4      	bne.n	9f44 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    9f5a:	2310      	movs	r3, #16
    9f5c:	18fa      	adds	r2, r7, r3
    9f5e:	68fb      	ldr	r3, [r7, #12]
    9f60:	0011      	movs	r1, r2
    9f62:	0018      	movs	r0, r3
    9f64:	4b15      	ldr	r3, [pc, #84]	; (9fbc <spi_write_buffer_wait+0x144>)
    9f66:	4798      	blx	r3
			flush_length--;
    9f68:	2314      	movs	r3, #20
    9f6a:	18fb      	adds	r3, r7, r3
    9f6c:	881a      	ldrh	r2, [r3, #0]
    9f6e:	2314      	movs	r3, #20
    9f70:	18fb      	adds	r3, r7, r3
    9f72:	3a01      	subs	r2, #1
    9f74:	801a      	strh	r2, [r3, #0]
	while (length--) {
    9f76:	1dbb      	adds	r3, r7, #6
    9f78:	881b      	ldrh	r3, [r3, #0]
    9f7a:	1dba      	adds	r2, r7, #6
    9f7c:	1e59      	subs	r1, r3, #1
    9f7e:	8011      	strh	r1, [r2, #0]
    9f80:	2b00      	cmp	r3, #0
    9f82:	d198      	bne.n	9eb6 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    9f84:	68fb      	ldr	r3, [r7, #12]
    9f86:	795b      	ldrb	r3, [r3, #5]
    9f88:	2b01      	cmp	r3, #1
    9f8a:	d10b      	bne.n	9fa4 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    9f8c:	46c0      	nop			; (mov r8, r8)
    9f8e:	68fb      	ldr	r3, [r7, #12]
    9f90:	0018      	movs	r0, r3
    9f92:	4b0b      	ldr	r3, [pc, #44]	; (9fc0 <spi_write_buffer_wait+0x148>)
    9f94:	4798      	blx	r3
    9f96:	0003      	movs	r3, r0
    9f98:	001a      	movs	r2, r3
    9f9a:	2301      	movs	r3, #1
    9f9c:	4053      	eors	r3, r2
    9f9e:	b2db      	uxtb	r3, r3
    9fa0:	2b00      	cmp	r3, #0
    9fa2:	d1f4      	bne.n	9f8e <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    9fa4:	2300      	movs	r3, #0
}
    9fa6:	0018      	movs	r0, r3
    9fa8:	46bd      	mov	sp, r7
    9faa:	b006      	add	sp, #24
    9fac:	bd80      	pop	{r7, pc}
    9fae:	46c0      	nop			; (mov r8, r8)
    9fb0:	00009795 	.word	0x00009795
    9fb4:	000097e5 	.word	0x000097e5
    9fb8:	000097bd 	.word	0x000097bd
    9fbc:	0000982d 	.word	0x0000982d
    9fc0:	0000976d 	.word	0x0000976d

00009fc4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    9fc4:	b580      	push	{r7, lr}
    9fc6:	b084      	sub	sp, #16
    9fc8:	af00      	add	r7, sp, #0
    9fca:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9fcc:	687b      	ldr	r3, [r7, #4]
    9fce:	681b      	ldr	r3, [r3, #0]
    9fd0:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9fd2:	687b      	ldr	r3, [r7, #4]
    9fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9fd6:	781b      	ldrb	r3, [r3, #0]
    9fd8:	b2da      	uxtb	r2, r3
    9fda:	230e      	movs	r3, #14
    9fdc:	18fb      	adds	r3, r7, r3
    9fde:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    9fe0:	687b      	ldr	r3, [r7, #4]
    9fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9fe4:	1c5a      	adds	r2, r3, #1
    9fe6:	687b      	ldr	r3, [r7, #4]
    9fe8:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9fea:	687b      	ldr	r3, [r7, #4]
    9fec:	799b      	ldrb	r3, [r3, #6]
    9fee:	2b01      	cmp	r3, #1
    9ff0:	d113      	bne.n	a01a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    9ff2:	687b      	ldr	r3, [r7, #4]
    9ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9ff6:	781b      	ldrb	r3, [r3, #0]
    9ff8:	b2db      	uxtb	r3, r3
    9ffa:	021b      	lsls	r3, r3, #8
    9ffc:	b21a      	sxth	r2, r3
    9ffe:	230e      	movs	r3, #14
    a000:	18fb      	adds	r3, r7, r3
    a002:	2100      	movs	r1, #0
    a004:	5e5b      	ldrsh	r3, [r3, r1]
    a006:	4313      	orrs	r3, r2
    a008:	b21a      	sxth	r2, r3
    a00a:	230e      	movs	r3, #14
    a00c:	18fb      	adds	r3, r7, r3
    a00e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    a010:	687b      	ldr	r3, [r7, #4]
    a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a014:	1c5a      	adds	r2, r3, #1
    a016:	687b      	ldr	r3, [r7, #4]
    a018:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    a01a:	230e      	movs	r3, #14
    a01c:	18fb      	adds	r3, r7, r3
    a01e:	881b      	ldrh	r3, [r3, #0]
    a020:	05db      	lsls	r3, r3, #23
    a022:	0dda      	lsrs	r2, r3, #23
    a024:	68bb      	ldr	r3, [r7, #8]
    a026:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a02c:	b29b      	uxth	r3, r3
    a02e:	3b01      	subs	r3, #1
    a030:	b29a      	uxth	r2, r3
    a032:	687b      	ldr	r3, [r7, #4]
    a034:	869a      	strh	r2, [r3, #52]	; 0x34
}
    a036:	46c0      	nop			; (mov r8, r8)
    a038:	46bd      	mov	sp, r7
    a03a:	b004      	add	sp, #16
    a03c:	bd80      	pop	{r7, pc}
	...

0000a040 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    a040:	b580      	push	{r7, lr}
    a042:	b084      	sub	sp, #16
    a044:	af00      	add	r7, sp, #0
    a046:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a048:	687b      	ldr	r3, [r7, #4]
    a04a:	681b      	ldr	r3, [r3, #0]
    a04c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    a04e:	4b08      	ldr	r3, [pc, #32]	; (a070 <_spi_write_dummy+0x30>)
    a050:	881b      	ldrh	r3, [r3, #0]
    a052:	001a      	movs	r2, r3
    a054:	68fb      	ldr	r3, [r7, #12]
    a056:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    a058:	687b      	ldr	r3, [r7, #4]
    a05a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a05c:	b29b      	uxth	r3, r3
    a05e:	3b01      	subs	r3, #1
    a060:	b29a      	uxth	r2, r3
    a062:	687b      	ldr	r3, [r7, #4]
    a064:	865a      	strh	r2, [r3, #50]	; 0x32
}
    a066:	46c0      	nop			; (mov r8, r8)
    a068:	46bd      	mov	sp, r7
    a06a:	b004      	add	sp, #16
    a06c:	bd80      	pop	{r7, pc}
    a06e:	46c0      	nop			; (mov r8, r8)
    a070:	2000071c 	.word	0x2000071c

0000a074 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    a074:	b580      	push	{r7, lr}
    a076:	b084      	sub	sp, #16
    a078:	af00      	add	r7, sp, #0
    a07a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a07c:	687b      	ldr	r3, [r7, #4]
    a07e:	681b      	ldr	r3, [r3, #0]
    a080:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    a082:	230a      	movs	r3, #10
    a084:	18fb      	adds	r3, r7, r3
    a086:	2200      	movs	r2, #0
    a088:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    a08a:	68fb      	ldr	r3, [r7, #12]
    a08c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a08e:	230a      	movs	r3, #10
    a090:	18fb      	adds	r3, r7, r3
    a092:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    a094:	687b      	ldr	r3, [r7, #4]
    a096:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a098:	b29b      	uxth	r3, r3
    a09a:	3b01      	subs	r3, #1
    a09c:	b29a      	uxth	r2, r3
    a09e:	687b      	ldr	r3, [r7, #4]
    a0a0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    a0a2:	46c0      	nop			; (mov r8, r8)
    a0a4:	46bd      	mov	sp, r7
    a0a6:	b004      	add	sp, #16
    a0a8:	bd80      	pop	{r7, pc}

0000a0aa <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    a0aa:	b580      	push	{r7, lr}
    a0ac:	b084      	sub	sp, #16
    a0ae:	af00      	add	r7, sp, #0
    a0b0:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a0b2:	687b      	ldr	r3, [r7, #4]
    a0b4:	681b      	ldr	r3, [r3, #0]
    a0b6:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    a0b8:	68fb      	ldr	r3, [r7, #12]
    a0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a0bc:	b29a      	uxth	r2, r3
    a0be:	230a      	movs	r3, #10
    a0c0:	18fb      	adds	r3, r7, r3
    a0c2:	05d2      	lsls	r2, r2, #23
    a0c4:	0dd2      	lsrs	r2, r2, #23
    a0c6:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    a0c8:	687b      	ldr	r3, [r7, #4]
    a0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a0cc:	220a      	movs	r2, #10
    a0ce:	18ba      	adds	r2, r7, r2
    a0d0:	8812      	ldrh	r2, [r2, #0]
    a0d2:	b2d2      	uxtb	r2, r2
    a0d4:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    a0d6:	687b      	ldr	r3, [r7, #4]
    a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a0da:	1c5a      	adds	r2, r3, #1
    a0dc:	687b      	ldr	r3, [r7, #4]
    a0de:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a0e0:	687b      	ldr	r3, [r7, #4]
    a0e2:	799b      	ldrb	r3, [r3, #6]
    a0e4:	2b01      	cmp	r3, #1
    a0e6:	d10d      	bne.n	a104 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a0ec:	220a      	movs	r2, #10
    a0ee:	18ba      	adds	r2, r7, r2
    a0f0:	8812      	ldrh	r2, [r2, #0]
    a0f2:	0a12      	lsrs	r2, r2, #8
    a0f4:	b292      	uxth	r2, r2
    a0f6:	b2d2      	uxtb	r2, r2
    a0f8:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    a0fa:	687b      	ldr	r3, [r7, #4]
    a0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a0fe:	1c5a      	adds	r2, r3, #1
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    a108:	b29b      	uxth	r3, r3
    a10a:	3b01      	subs	r3, #1
    a10c:	b29a      	uxth	r2, r3
    a10e:	687b      	ldr	r3, [r7, #4]
    a110:	861a      	strh	r2, [r3, #48]	; 0x30
}
    a112:	46c0      	nop			; (mov r8, r8)
    a114:	46bd      	mov	sp, r7
    a116:	b004      	add	sp, #16
    a118:	bd80      	pop	{r7, pc}
	...

0000a11c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    a11c:	b580      	push	{r7, lr}
    a11e:	b086      	sub	sp, #24
    a120:	af00      	add	r7, sp, #0
    a122:	0002      	movs	r2, r0
    a124:	1dfb      	adds	r3, r7, #7
    a126:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    a128:	1dfb      	adds	r3, r7, #7
    a12a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    a12c:	4b96      	ldr	r3, [pc, #600]	; (a388 <_spi_interrupt_handler+0x26c>)
    a12e:	0092      	lsls	r2, r2, #2
    a130:	58d3      	ldr	r3, [r2, r3]
    a132:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a134:	697b      	ldr	r3, [r7, #20]
    a136:	681b      	ldr	r3, [r3, #0]
    a138:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    a13a:	697b      	ldr	r3, [r7, #20]
    a13c:	2237      	movs	r2, #55	; 0x37
    a13e:	5c9a      	ldrb	r2, [r3, r2]
    a140:	697b      	ldr	r3, [r7, #20]
    a142:	2136      	movs	r1, #54	; 0x36
    a144:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    a146:	230f      	movs	r3, #15
    a148:	18fb      	adds	r3, r7, r3
    a14a:	400a      	ands	r2, r1
    a14c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    a14e:	693b      	ldr	r3, [r7, #16]
    a150:	7e1b      	ldrb	r3, [r3, #24]
    a152:	b2da      	uxtb	r2, r3
    a154:	230c      	movs	r3, #12
    a156:	18fb      	adds	r3, r7, r3
    a158:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    a15a:	693b      	ldr	r3, [r7, #16]
    a15c:	7d9b      	ldrb	r3, [r3, #22]
    a15e:	b2db      	uxtb	r3, r3
    a160:	b29a      	uxth	r2, r3
    a162:	230c      	movs	r3, #12
    a164:	18fb      	adds	r3, r7, r3
    a166:	210c      	movs	r1, #12
    a168:	1879      	adds	r1, r7, r1
    a16a:	8809      	ldrh	r1, [r1, #0]
    a16c:	400a      	ands	r2, r1
    a16e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    a170:	230c      	movs	r3, #12
    a172:	18fb      	adds	r3, r7, r3
    a174:	881b      	ldrh	r3, [r3, #0]
    a176:	2201      	movs	r2, #1
    a178:	4013      	ands	r3, r2
    a17a:	d038      	beq.n	a1ee <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a17c:	697b      	ldr	r3, [r7, #20]
    a17e:	795b      	ldrb	r3, [r3, #5]
    a180:	2b01      	cmp	r3, #1
    a182:	d110      	bne.n	a1a6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    a184:	697b      	ldr	r3, [r7, #20]
    a186:	7a5b      	ldrb	r3, [r3, #9]
    a188:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    a18a:	2b00      	cmp	r3, #0
    a18c:	d10b      	bne.n	a1a6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    a18e:	697b      	ldr	r3, [r7, #20]
    a190:	0018      	movs	r0, r3
    a192:	4b7e      	ldr	r3, [pc, #504]	; (a38c <_spi_interrupt_handler+0x270>)
    a194:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    a196:	697b      	ldr	r3, [r7, #20]
    a198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a19a:	b29b      	uxth	r3, r3
    a19c:	2b00      	cmp	r3, #0
    a19e:	d102      	bne.n	a1a6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    a1a0:	693b      	ldr	r3, [r7, #16]
    a1a2:	2201      	movs	r2, #1
    a1a4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    a1a6:	697b      	ldr	r3, [r7, #20]
    a1a8:	795b      	ldrb	r3, [r3, #5]
		if (0
    a1aa:	2b01      	cmp	r3, #1
    a1ac:	d11f      	bne.n	a1ee <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    a1ae:	697b      	ldr	r3, [r7, #20]
    a1b0:	7a5b      	ldrb	r3, [r3, #9]
    a1b2:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    a1b4:	2b00      	cmp	r3, #0
    a1b6:	d01a      	beq.n	a1ee <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    a1b8:	697b      	ldr	r3, [r7, #20]
    a1ba:	0018      	movs	r0, r3
    a1bc:	4b74      	ldr	r3, [pc, #464]	; (a390 <_spi_interrupt_handler+0x274>)
    a1be:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    a1c0:	697b      	ldr	r3, [r7, #20]
    a1c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a1c4:	b29b      	uxth	r3, r3
    a1c6:	2b00      	cmp	r3, #0
    a1c8:	d111      	bne.n	a1ee <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    a1ca:	693b      	ldr	r3, [r7, #16]
    a1cc:	2201      	movs	r2, #1
    a1ce:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    a1d0:	697b      	ldr	r3, [r7, #20]
    a1d2:	7a5b      	ldrb	r3, [r3, #9]
    a1d4:	b2db      	uxtb	r3, r3
    a1d6:	2b01      	cmp	r3, #1
    a1d8:	d109      	bne.n	a1ee <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    a1da:	697b      	ldr	r3, [r7, #20]
    a1dc:	79db      	ldrb	r3, [r3, #7]
    a1de:	2201      	movs	r2, #1
    a1e0:	4053      	eors	r3, r2
    a1e2:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    a1e4:	2b00      	cmp	r3, #0
    a1e6:	d002      	beq.n	a1ee <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a1e8:	693b      	ldr	r3, [r7, #16]
    a1ea:	2202      	movs	r2, #2
    a1ec:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    a1ee:	230c      	movs	r3, #12
    a1f0:	18fb      	adds	r3, r7, r3
    a1f2:	881b      	ldrh	r3, [r3, #0]
    a1f4:	2204      	movs	r2, #4
    a1f6:	4013      	ands	r3, r2
    a1f8:	d100      	bne.n	a1fc <_spi_interrupt_handler+0xe0>
    a1fa:	e07e      	b.n	a2fa <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a1fc:	693b      	ldr	r3, [r7, #16]
    a1fe:	8b5b      	ldrh	r3, [r3, #26]
    a200:	b29b      	uxth	r3, r3
    a202:	001a      	movs	r2, r3
    a204:	2304      	movs	r3, #4
    a206:	4013      	ands	r3, r2
    a208:	d022      	beq.n	a250 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    a20a:	697b      	ldr	r3, [r7, #20]
    a20c:	7a5b      	ldrb	r3, [r3, #9]
    a20e:	b2db      	uxtb	r3, r3
    a210:	2b01      	cmp	r3, #1
    a212:	d014      	beq.n	a23e <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    a214:	697b      	ldr	r3, [r7, #20]
    a216:	2238      	movs	r2, #56	; 0x38
    a218:	211e      	movs	r1, #30
    a21a:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    a21c:	697b      	ldr	r3, [r7, #20]
    a21e:	2203      	movs	r2, #3
    a220:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    a222:	693b      	ldr	r3, [r7, #16]
    a224:	2205      	movs	r2, #5
    a226:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    a228:	230f      	movs	r3, #15
    a22a:	18fb      	adds	r3, r7, r3
    a22c:	781b      	ldrb	r3, [r3, #0]
    a22e:	2208      	movs	r2, #8
    a230:	4013      	ands	r3, r2
    a232:	d004      	beq.n	a23e <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    a234:	697b      	ldr	r3, [r7, #20]
    a236:	699b      	ldr	r3, [r3, #24]
    a238:	697a      	ldr	r2, [r7, #20]
    a23a:	0010      	movs	r0, r2
    a23c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    a23e:	693b      	ldr	r3, [r7, #16]
    a240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a242:	230a      	movs	r3, #10
    a244:	18fb      	adds	r3, r7, r3
    a246:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a248:	693b      	ldr	r3, [r7, #16]
    a24a:	2204      	movs	r2, #4
    a24c:	835a      	strh	r2, [r3, #26]
    a24e:	e054      	b.n	a2fa <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    a250:	697b      	ldr	r3, [r7, #20]
    a252:	7a5b      	ldrb	r3, [r3, #9]
    a254:	b2db      	uxtb	r3, r3
    a256:	2b01      	cmp	r3, #1
    a258:	d11e      	bne.n	a298 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    a25a:	697b      	ldr	r3, [r7, #20]
    a25c:	0018      	movs	r0, r3
    a25e:	4b4d      	ldr	r3, [pc, #308]	; (a394 <_spi_interrupt_handler+0x278>)
    a260:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    a262:	697b      	ldr	r3, [r7, #20]
    a264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a266:	b29b      	uxth	r3, r3
    a268:	2b00      	cmp	r3, #0
    a26a:	d146      	bne.n	a2fa <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    a26c:	693b      	ldr	r3, [r7, #16]
    a26e:	2204      	movs	r2, #4
    a270:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    a272:	697b      	ldr	r3, [r7, #20]
    a274:	2238      	movs	r2, #56	; 0x38
    a276:	2100      	movs	r1, #0
    a278:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    a27a:	697b      	ldr	r3, [r7, #20]
    a27c:	2203      	movs	r2, #3
    a27e:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    a280:	230f      	movs	r3, #15
    a282:	18fb      	adds	r3, r7, r3
    a284:	781b      	ldrb	r3, [r3, #0]
    a286:	2201      	movs	r2, #1
    a288:	4013      	ands	r3, r2
    a28a:	d036      	beq.n	a2fa <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    a28c:	697b      	ldr	r3, [r7, #20]
    a28e:	68db      	ldr	r3, [r3, #12]
    a290:	697a      	ldr	r2, [r7, #20]
    a292:	0010      	movs	r0, r2
    a294:	4798      	blx	r3
    a296:	e030      	b.n	a2fa <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    a298:	697b      	ldr	r3, [r7, #20]
    a29a:	0018      	movs	r0, r3
    a29c:	4b3e      	ldr	r3, [pc, #248]	; (a398 <_spi_interrupt_handler+0x27c>)
    a29e:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    a2a0:	697b      	ldr	r3, [r7, #20]
    a2a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    a2a4:	b29b      	uxth	r3, r3
    a2a6:	2b00      	cmp	r3, #0
    a2a8:	d127      	bne.n	a2fa <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    a2aa:	697b      	ldr	r3, [r7, #20]
    a2ac:	2238      	movs	r2, #56	; 0x38
    a2ae:	2100      	movs	r1, #0
    a2b0:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    a2b2:	693b      	ldr	r3, [r7, #16]
    a2b4:	2204      	movs	r2, #4
    a2b6:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    a2b8:	697b      	ldr	r3, [r7, #20]
    a2ba:	7a5b      	ldrb	r3, [r3, #9]
    a2bc:	b2db      	uxtb	r3, r3
    a2be:	2b02      	cmp	r3, #2
    a2c0:	d10b      	bne.n	a2da <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    a2c2:	230f      	movs	r3, #15
    a2c4:	18fb      	adds	r3, r7, r3
    a2c6:	781b      	ldrb	r3, [r3, #0]
    a2c8:	2204      	movs	r2, #4
    a2ca:	4013      	ands	r3, r2
    a2cc:	d015      	beq.n	a2fa <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    a2ce:	697b      	ldr	r3, [r7, #20]
    a2d0:	695b      	ldr	r3, [r3, #20]
    a2d2:	697a      	ldr	r2, [r7, #20]
    a2d4:	0010      	movs	r0, r2
    a2d6:	4798      	blx	r3
    a2d8:	e00f      	b.n	a2fa <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    a2da:	697b      	ldr	r3, [r7, #20]
    a2dc:	7a5b      	ldrb	r3, [r3, #9]
    a2de:	b2db      	uxtb	r3, r3
    a2e0:	2b00      	cmp	r3, #0
    a2e2:	d10a      	bne.n	a2fa <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    a2e4:	230f      	movs	r3, #15
    a2e6:	18fb      	adds	r3, r7, r3
    a2e8:	781b      	ldrb	r3, [r3, #0]
    a2ea:	2202      	movs	r2, #2
    a2ec:	4013      	ands	r3, r2
    a2ee:	d004      	beq.n	a2fa <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    a2f0:	697b      	ldr	r3, [r7, #20]
    a2f2:	691b      	ldr	r3, [r3, #16]
    a2f4:	697a      	ldr	r2, [r7, #20]
    a2f6:	0010      	movs	r0, r2
    a2f8:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    a2fa:	230c      	movs	r3, #12
    a2fc:	18fb      	adds	r3, r7, r3
    a2fe:	881b      	ldrh	r3, [r3, #0]
    a300:	2202      	movs	r2, #2
    a302:	4013      	ands	r3, r2
    a304:	d024      	beq.n	a350 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a306:	697b      	ldr	r3, [r7, #20]
    a308:	795b      	ldrb	r3, [r3, #5]
    a30a:	2b01      	cmp	r3, #1
    a30c:	d120      	bne.n	a350 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    a30e:	697b      	ldr	r3, [r7, #20]
    a310:	7a5b      	ldrb	r3, [r3, #9]
    a312:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    a314:	2b01      	cmp	r3, #1
    a316:	d11b      	bne.n	a350 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    a318:	697b      	ldr	r3, [r7, #20]
    a31a:	79db      	ldrb	r3, [r3, #7]
    a31c:	2201      	movs	r2, #1
    a31e:	4053      	eors	r3, r2
    a320:	b2db      	uxtb	r3, r3
    a322:	2b00      	cmp	r3, #0
    a324:	d014      	beq.n	a350 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a326:	693b      	ldr	r3, [r7, #16]
    a328:	2202      	movs	r2, #2
    a32a:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    a32c:	697b      	ldr	r3, [r7, #20]
    a32e:	2203      	movs	r2, #3
    a330:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    a332:	697b      	ldr	r3, [r7, #20]
    a334:	2238      	movs	r2, #56	; 0x38
    a336:	2100      	movs	r1, #0
    a338:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    a33a:	230f      	movs	r3, #15
    a33c:	18fb      	adds	r3, r7, r3
    a33e:	781b      	ldrb	r3, [r3, #0]
    a340:	2201      	movs	r2, #1
    a342:	4013      	ands	r3, r2
    a344:	d004      	beq.n	a350 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    a346:	697b      	ldr	r3, [r7, #20]
    a348:	68db      	ldr	r3, [r3, #12]
    a34a:	697a      	ldr	r2, [r7, #20]
    a34c:	0010      	movs	r0, r2
    a34e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    a350:	230c      	movs	r3, #12
    a352:	18fb      	adds	r3, r7, r3
    a354:	881b      	ldrh	r3, [r3, #0]
    a356:	2280      	movs	r2, #128	; 0x80
    a358:	4013      	ands	r3, r2
    a35a:	d010      	beq.n	a37e <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    a35c:	693b      	ldr	r3, [r7, #16]
    a35e:	2280      	movs	r2, #128	; 0x80
    a360:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    a362:	693b      	ldr	r3, [r7, #16]
    a364:	2280      	movs	r2, #128	; 0x80
    a366:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    a368:	230f      	movs	r3, #15
    a36a:	18fb      	adds	r3, r7, r3
    a36c:	781b      	ldrb	r3, [r3, #0]
    a36e:	2240      	movs	r2, #64	; 0x40
    a370:	4013      	ands	r3, r2
    a372:	d004      	beq.n	a37e <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    a374:	697b      	ldr	r3, [r7, #20]
    a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a378:	697a      	ldr	r2, [r7, #20]
    a37a:	0010      	movs	r0, r2
    a37c:	4798      	blx	r3
		}
	}
#  endif
}
    a37e:	46c0      	nop			; (mov r8, r8)
    a380:	46bd      	mov	sp, r7
    a382:	b006      	add	sp, #24
    a384:	bd80      	pop	{r7, pc}
    a386:	46c0      	nop			; (mov r8, r8)
    a388:	20000904 	.word	0x20000904
    a38c:	0000a041 	.word	0x0000a041
    a390:	00009fc5 	.word	0x00009fc5
    a394:	0000a075 	.word	0x0000a075
    a398:	0000a0ab 	.word	0x0000a0ab

0000a39c <system_gclk_chan_get_config_defaults>:
{
    a39c:	b580      	push	{r7, lr}
    a39e:	b082      	sub	sp, #8
    a3a0:	af00      	add	r7, sp, #0
    a3a2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a3a4:	687b      	ldr	r3, [r7, #4]
    a3a6:	2200      	movs	r2, #0
    a3a8:	701a      	strb	r2, [r3, #0]
}
    a3aa:	46c0      	nop			; (mov r8, r8)
    a3ac:	46bd      	mov	sp, r7
    a3ae:	b002      	add	sp, #8
    a3b0:	bd80      	pop	{r7, pc}
	...

0000a3b4 <system_apb_clock_set_mask>:
{
    a3b4:	b580      	push	{r7, lr}
    a3b6:	b082      	sub	sp, #8
    a3b8:	af00      	add	r7, sp, #0
    a3ba:	0002      	movs	r2, r0
    a3bc:	6039      	str	r1, [r7, #0]
    a3be:	1dfb      	adds	r3, r7, #7
    a3c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a3c2:	1dfb      	adds	r3, r7, #7
    a3c4:	781b      	ldrb	r3, [r3, #0]
    a3c6:	2b01      	cmp	r3, #1
    a3c8:	d00a      	beq.n	a3e0 <system_apb_clock_set_mask+0x2c>
    a3ca:	2b02      	cmp	r3, #2
    a3cc:	d00f      	beq.n	a3ee <system_apb_clock_set_mask+0x3a>
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	d114      	bne.n	a3fc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    a3d2:	4b0e      	ldr	r3, [pc, #56]	; (a40c <system_apb_clock_set_mask+0x58>)
    a3d4:	4a0d      	ldr	r2, [pc, #52]	; (a40c <system_apb_clock_set_mask+0x58>)
    a3d6:	6991      	ldr	r1, [r2, #24]
    a3d8:	683a      	ldr	r2, [r7, #0]
    a3da:	430a      	orrs	r2, r1
    a3dc:	619a      	str	r2, [r3, #24]
			break;
    a3de:	e00f      	b.n	a400 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    a3e0:	4b0a      	ldr	r3, [pc, #40]	; (a40c <system_apb_clock_set_mask+0x58>)
    a3e2:	4a0a      	ldr	r2, [pc, #40]	; (a40c <system_apb_clock_set_mask+0x58>)
    a3e4:	69d1      	ldr	r1, [r2, #28]
    a3e6:	683a      	ldr	r2, [r7, #0]
    a3e8:	430a      	orrs	r2, r1
    a3ea:	61da      	str	r2, [r3, #28]
			break;
    a3ec:	e008      	b.n	a400 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    a3ee:	4b07      	ldr	r3, [pc, #28]	; (a40c <system_apb_clock_set_mask+0x58>)
    a3f0:	4a06      	ldr	r2, [pc, #24]	; (a40c <system_apb_clock_set_mask+0x58>)
    a3f2:	6a11      	ldr	r1, [r2, #32]
    a3f4:	683a      	ldr	r2, [r7, #0]
    a3f6:	430a      	orrs	r2, r1
    a3f8:	621a      	str	r2, [r3, #32]
			break;
    a3fa:	e001      	b.n	a400 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    a3fc:	2317      	movs	r3, #23
    a3fe:	e000      	b.n	a402 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    a400:	2300      	movs	r3, #0
}
    a402:	0018      	movs	r0, r3
    a404:	46bd      	mov	sp, r7
    a406:	b002      	add	sp, #8
    a408:	bd80      	pop	{r7, pc}
    a40a:	46c0      	nop			; (mov r8, r8)
    a40c:	40000400 	.word	0x40000400

0000a410 <system_pinmux_get_config_defaults>:
{
    a410:	b580      	push	{r7, lr}
    a412:	b082      	sub	sp, #8
    a414:	af00      	add	r7, sp, #0
    a416:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	2280      	movs	r2, #128	; 0x80
    a41c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a41e:	687b      	ldr	r3, [r7, #4]
    a420:	2200      	movs	r2, #0
    a422:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a424:	687b      	ldr	r3, [r7, #4]
    a426:	2201      	movs	r2, #1
    a428:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a42a:	687b      	ldr	r3, [r7, #4]
    a42c:	2200      	movs	r2, #0
    a42e:	70da      	strb	r2, [r3, #3]
}
    a430:	46c0      	nop			; (mov r8, r8)
    a432:	46bd      	mov	sp, r7
    a434:	b002      	add	sp, #8
    a436:	bd80      	pop	{r7, pc}

0000a438 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    a438:	b580      	push	{r7, lr}
    a43a:	b084      	sub	sp, #16
    a43c:	af00      	add	r7, sp, #0
    a43e:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    a440:	2300      	movs	r3, #0
    a442:	60fb      	str	r3, [r7, #12]
    a444:	e00c      	b.n	a460 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    a446:	4b0a      	ldr	r3, [pc, #40]	; (a470 <_tcc_get_inst_index+0x38>)
    a448:	68fa      	ldr	r2, [r7, #12]
    a44a:	0092      	lsls	r2, r2, #2
    a44c:	58d2      	ldr	r2, [r2, r3]
    a44e:	687b      	ldr	r3, [r7, #4]
    a450:	429a      	cmp	r2, r3
    a452:	d102      	bne.n	a45a <_tcc_get_inst_index+0x22>
			return i;
    a454:	68fb      	ldr	r3, [r7, #12]
    a456:	b2db      	uxtb	r3, r3
    a458:	e006      	b.n	a468 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    a45a:	68fb      	ldr	r3, [r7, #12]
    a45c:	3301      	adds	r3, #1
    a45e:	60fb      	str	r3, [r7, #12]
    a460:	68fb      	ldr	r3, [r7, #12]
    a462:	2b02      	cmp	r3, #2
    a464:	d9ef      	bls.n	a446 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    a466:	2300      	movs	r3, #0
}
    a468:	0018      	movs	r0, r3
    a46a:	46bd      	mov	sp, r7
    a46c:	b004      	add	sp, #16
    a46e:	bd80      	pop	{r7, pc}
    a470:	00019748 	.word	0x00019748

0000a474 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    a474:	b590      	push	{r4, r7, lr}
    a476:	b085      	sub	sp, #20
    a478:	af00      	add	r7, sp, #0
    a47a:	6078      	str	r0, [r7, #4]
    a47c:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    a47e:	230f      	movs	r3, #15
    a480:	18fc      	adds	r4, r7, r3
    a482:	683b      	ldr	r3, [r7, #0]
    a484:	0018      	movs	r0, r3
    a486:	4bad      	ldr	r3, [pc, #692]	; (a73c <tcc_get_config_defaults+0x2c8>)
    a488:	4798      	blx	r3
    a48a:	0003      	movs	r3, r0
    a48c:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    a48e:	687b      	ldr	r3, [r7, #4]
    a490:	2200      	movs	r2, #0
    a492:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    a494:	230f      	movs	r3, #15
    a496:	18fb      	adds	r3, r7, r3
    a498:	781a      	ldrb	r2, [r3, #0]
    a49a:	4ba9      	ldr	r3, [pc, #676]	; (a740 <tcc_get_config_defaults+0x2cc>)
    a49c:	0092      	lsls	r2, r2, #2
    a49e:	58d2      	ldr	r2, [r2, r3]
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    a4a4:	687b      	ldr	r3, [r7, #4]
    a4a6:	2200      	movs	r2, #0
    a4a8:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	2200      	movs	r2, #0
    a4ae:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	2200      	movs	r2, #0
    a4b4:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    a4b6:	687b      	ldr	r3, [r7, #4]
    a4b8:	2200      	movs	r2, #0
    a4ba:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    a4bc:	687b      	ldr	r3, [r7, #4]
    a4be:	2200      	movs	r2, #0
    a4c0:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    a4c2:	687b      	ldr	r3, [r7, #4]
    a4c4:	2200      	movs	r2, #0
    a4c6:	61da      	str	r2, [r3, #28]
    a4c8:	687b      	ldr	r3, [r7, #4]
    a4ca:	2200      	movs	r2, #0
    a4cc:	621a      	str	r2, [r3, #32]
    a4ce:	687b      	ldr	r3, [r7, #4]
    a4d0:	2200      	movs	r2, #0
    a4d2:	625a      	str	r2, [r3, #36]	; 0x24
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	2200      	movs	r2, #0
    a4d8:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    a4da:	687b      	ldr	r3, [r7, #4]
    a4dc:	2200      	movs	r2, #0
    a4de:	751a      	strb	r2, [r3, #20]
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	2200      	movs	r2, #0
    a4e4:	755a      	strb	r2, [r3, #21]
    a4e6:	687b      	ldr	r3, [r7, #4]
    a4e8:	2200      	movs	r2, #0
    a4ea:	759a      	strb	r2, [r3, #22]
    a4ec:	687b      	ldr	r3, [r7, #4]
    a4ee:	2200      	movs	r2, #0
    a4f0:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    a4f2:	687b      	ldr	r3, [r7, #4]
    a4f4:	2200      	movs	r2, #0
    a4f6:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    a4f8:	687b      	ldr	r3, [r7, #4]
    a4fa:	2200      	movs	r2, #0
    a4fc:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    a4fe:	687b      	ldr	r3, [r7, #4]
    a500:	2200      	movs	r2, #0
    a502:	741a      	strb	r2, [r3, #16]
    a504:	687b      	ldr	r3, [r7, #4]
    a506:	2200      	movs	r2, #0
    a508:	745a      	strb	r2, [r3, #17]
    a50a:	687b      	ldr	r3, [r7, #4]
    a50c:	2200      	movs	r2, #0
    a50e:	749a      	strb	r2, [r3, #18]
    a510:	687b      	ldr	r3, [r7, #4]
    a512:	2200      	movs	r2, #0
    a514:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    a516:	687b      	ldr	r3, [r7, #4]
    a518:	222c      	movs	r2, #44	; 0x2c
    a51a:	2100      	movs	r1, #0
    a51c:	5499      	strb	r1, [r3, r2]
    a51e:	687b      	ldr	r3, [r7, #4]
    a520:	222d      	movs	r2, #45	; 0x2d
    a522:	2100      	movs	r1, #0
    a524:	5499      	strb	r1, [r3, r2]
    a526:	687b      	ldr	r3, [r7, #4]
    a528:	222e      	movs	r2, #46	; 0x2e
    a52a:	2100      	movs	r1, #0
    a52c:	5499      	strb	r1, [r3, r2]
    a52e:	687b      	ldr	r3, [r7, #4]
    a530:	222f      	movs	r2, #47	; 0x2f
    a532:	2100      	movs	r1, #0
    a534:	5499      	strb	r1, [r3, r2]
    a536:	687b      	ldr	r3, [r7, #4]
    a538:	2230      	movs	r2, #48	; 0x30
    a53a:	2100      	movs	r1, #0
    a53c:	5499      	strb	r1, [r3, r2]
    a53e:	687b      	ldr	r3, [r7, #4]
    a540:	2231      	movs	r2, #49	; 0x31
    a542:	2100      	movs	r1, #0
    a544:	5499      	strb	r1, [r3, r2]
    a546:	687b      	ldr	r3, [r7, #4]
    a548:	2232      	movs	r2, #50	; 0x32
    a54a:	2100      	movs	r1, #0
    a54c:	5499      	strb	r1, [r3, r2]
    a54e:	687b      	ldr	r3, [r7, #4]
    a550:	2233      	movs	r2, #51	; 0x33
    a552:	2100      	movs	r1, #0
    a554:	5499      	strb	r1, [r3, r2]
    a556:	687b      	ldr	r3, [r7, #4]
    a558:	2234      	movs	r2, #52	; 0x34
    a55a:	2100      	movs	r1, #0
    a55c:	5499      	strb	r1, [r3, r2]
    a55e:	687b      	ldr	r3, [r7, #4]
    a560:	2235      	movs	r2, #53	; 0x35
    a562:	2100      	movs	r1, #0
    a564:	5499      	strb	r1, [r3, r2]
    a566:	687b      	ldr	r3, [r7, #4]
    a568:	2236      	movs	r2, #54	; 0x36
    a56a:	2100      	movs	r1, #0
    a56c:	5499      	strb	r1, [r3, r2]
    a56e:	687b      	ldr	r3, [r7, #4]
    a570:	2237      	movs	r2, #55	; 0x37
    a572:	2100      	movs	r1, #0
    a574:	5499      	strb	r1, [r3, r2]
    a576:	687b      	ldr	r3, [r7, #4]
    a578:	2238      	movs	r2, #56	; 0x38
    a57a:	2100      	movs	r1, #0
    a57c:	5499      	strb	r1, [r3, r2]
    a57e:	687b      	ldr	r3, [r7, #4]
    a580:	2239      	movs	r2, #57	; 0x39
    a582:	2100      	movs	r1, #0
    a584:	5499      	strb	r1, [r3, r2]
    a586:	687b      	ldr	r3, [r7, #4]
    a588:	223a      	movs	r2, #58	; 0x3a
    a58a:	2100      	movs	r1, #0
    a58c:	5499      	strb	r1, [r3, r2]
    a58e:	687b      	ldr	r3, [r7, #4]
    a590:	223b      	movs	r2, #59	; 0x3b
    a592:	2100      	movs	r1, #0
    a594:	5499      	strb	r1, [r3, r2]
    a596:	687b      	ldr	r3, [r7, #4]
    a598:	223c      	movs	r2, #60	; 0x3c
    a59a:	2100      	movs	r1, #0
    a59c:	5499      	strb	r1, [r3, r2]
    a59e:	687b      	ldr	r3, [r7, #4]
    a5a0:	223d      	movs	r2, #61	; 0x3d
    a5a2:	2100      	movs	r1, #0
    a5a4:	5499      	strb	r1, [r3, r2]
    a5a6:	687b      	ldr	r3, [r7, #4]
    a5a8:	223e      	movs	r2, #62	; 0x3e
    a5aa:	2100      	movs	r1, #0
    a5ac:	5499      	strb	r1, [r3, r2]
    a5ae:	687b      	ldr	r3, [r7, #4]
    a5b0:	223f      	movs	r2, #63	; 0x3f
    a5b2:	2100      	movs	r1, #0
    a5b4:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    a5b6:	687b      	ldr	r3, [r7, #4]
    a5b8:	2240      	movs	r2, #64	; 0x40
    a5ba:	2100      	movs	r1, #0
    a5bc:	5499      	strb	r1, [r3, r2]
    a5be:	687b      	ldr	r3, [r7, #4]
    a5c0:	2241      	movs	r2, #65	; 0x41
    a5c2:	2100      	movs	r1, #0
    a5c4:	5499      	strb	r1, [r3, r2]
    a5c6:	687b      	ldr	r3, [r7, #4]
    a5c8:	2242      	movs	r2, #66	; 0x42
    a5ca:	2100      	movs	r1, #0
    a5cc:	5499      	strb	r1, [r3, r2]
    a5ce:	687b      	ldr	r3, [r7, #4]
    a5d0:	2243      	movs	r2, #67	; 0x43
    a5d2:	2100      	movs	r1, #0
    a5d4:	5499      	strb	r1, [r3, r2]
    a5d6:	687b      	ldr	r3, [r7, #4]
    a5d8:	2244      	movs	r2, #68	; 0x44
    a5da:	2100      	movs	r1, #0
    a5dc:	5499      	strb	r1, [r3, r2]
    a5de:	687b      	ldr	r3, [r7, #4]
    a5e0:	2245      	movs	r2, #69	; 0x45
    a5e2:	2100      	movs	r1, #0
    a5e4:	5499      	strb	r1, [r3, r2]
    a5e6:	687b      	ldr	r3, [r7, #4]
    a5e8:	2246      	movs	r2, #70	; 0x46
    a5ea:	2100      	movs	r1, #0
    a5ec:	5499      	strb	r1, [r3, r2]
    a5ee:	687b      	ldr	r3, [r7, #4]
    a5f0:	2247      	movs	r2, #71	; 0x47
    a5f2:	2100      	movs	r1, #0
    a5f4:	5499      	strb	r1, [r3, r2]
    a5f6:	687b      	ldr	r3, [r7, #4]
    a5f8:	2248      	movs	r2, #72	; 0x48
    a5fa:	2100      	movs	r1, #0
    a5fc:	5499      	strb	r1, [r3, r2]
    a5fe:	687b      	ldr	r3, [r7, #4]
    a600:	2249      	movs	r2, #73	; 0x49
    a602:	2100      	movs	r1, #0
    a604:	5499      	strb	r1, [r3, r2]
    a606:	687b      	ldr	r3, [r7, #4]
    a608:	224a      	movs	r2, #74	; 0x4a
    a60a:	2100      	movs	r1, #0
    a60c:	5499      	strb	r1, [r3, r2]
    a60e:	687b      	ldr	r3, [r7, #4]
    a610:	224b      	movs	r2, #75	; 0x4b
    a612:	2100      	movs	r1, #0
    a614:	5499      	strb	r1, [r3, r2]
    a616:	687b      	ldr	r3, [r7, #4]
    a618:	224c      	movs	r2, #76	; 0x4c
    a61a:	2100      	movs	r1, #0
    a61c:	5499      	strb	r1, [r3, r2]
    a61e:	687b      	ldr	r3, [r7, #4]
    a620:	224d      	movs	r2, #77	; 0x4d
    a622:	2100      	movs	r1, #0
    a624:	5499      	strb	r1, [r3, r2]
    a626:	687b      	ldr	r3, [r7, #4]
    a628:	224e      	movs	r2, #78	; 0x4e
    a62a:	2100      	movs	r1, #0
    a62c:	5499      	strb	r1, [r3, r2]
    a62e:	687b      	ldr	r3, [r7, #4]
    a630:	224f      	movs	r2, #79	; 0x4f
    a632:	2100      	movs	r1, #0
    a634:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    a636:	687b      	ldr	r3, [r7, #4]
    a638:	2250      	movs	r2, #80	; 0x50
    a63a:	2100      	movs	r1, #0
    a63c:	5499      	strb	r1, [r3, r2]
    a63e:	687b      	ldr	r3, [r7, #4]
    a640:	2251      	movs	r2, #81	; 0x51
    a642:	2100      	movs	r1, #0
    a644:	5499      	strb	r1, [r3, r2]
    a646:	687b      	ldr	r3, [r7, #4]
    a648:	2252      	movs	r2, #82	; 0x52
    a64a:	2100      	movs	r1, #0
    a64c:	5499      	strb	r1, [r3, r2]
    a64e:	687b      	ldr	r3, [r7, #4]
    a650:	2253      	movs	r2, #83	; 0x53
    a652:	2100      	movs	r1, #0
    a654:	5499      	strb	r1, [r3, r2]
    a656:	687b      	ldr	r3, [r7, #4]
    a658:	2254      	movs	r2, #84	; 0x54
    a65a:	2100      	movs	r1, #0
    a65c:	5499      	strb	r1, [r3, r2]
    a65e:	687b      	ldr	r3, [r7, #4]
    a660:	2255      	movs	r2, #85	; 0x55
    a662:	2100      	movs	r1, #0
    a664:	5499      	strb	r1, [r3, r2]
    a666:	687b      	ldr	r3, [r7, #4]
    a668:	2256      	movs	r2, #86	; 0x56
    a66a:	2100      	movs	r1, #0
    a66c:	5499      	strb	r1, [r3, r2]
    a66e:	687b      	ldr	r3, [r7, #4]
    a670:	2257      	movs	r2, #87	; 0x57
    a672:	2100      	movs	r1, #0
    a674:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    a676:	687b      	ldr	r3, [r7, #4]
    a678:	2298      	movs	r2, #152	; 0x98
    a67a:	2100      	movs	r1, #0
    a67c:	5499      	strb	r1, [r3, r2]
    a67e:	687b      	ldr	r3, [r7, #4]
    a680:	2200      	movs	r2, #0
    a682:	659a      	str	r2, [r3, #88]	; 0x58
    a684:	687b      	ldr	r3, [r7, #4]
    a686:	2200      	movs	r2, #0
    a688:	679a      	str	r2, [r3, #120]	; 0x78
    a68a:	687b      	ldr	r3, [r7, #4]
    a68c:	2299      	movs	r2, #153	; 0x99
    a68e:	2100      	movs	r1, #0
    a690:	5499      	strb	r1, [r3, r2]
    a692:	687b      	ldr	r3, [r7, #4]
    a694:	2200      	movs	r2, #0
    a696:	65da      	str	r2, [r3, #92]	; 0x5c
    a698:	687b      	ldr	r3, [r7, #4]
    a69a:	2200      	movs	r2, #0
    a69c:	67da      	str	r2, [r3, #124]	; 0x7c
    a69e:	687b      	ldr	r3, [r7, #4]
    a6a0:	229a      	movs	r2, #154	; 0x9a
    a6a2:	2100      	movs	r1, #0
    a6a4:	5499      	strb	r1, [r3, r2]
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	2200      	movs	r2, #0
    a6aa:	661a      	str	r2, [r3, #96]	; 0x60
    a6ac:	687b      	ldr	r3, [r7, #4]
    a6ae:	2280      	movs	r2, #128	; 0x80
    a6b0:	2100      	movs	r1, #0
    a6b2:	5099      	str	r1, [r3, r2]
    a6b4:	687b      	ldr	r3, [r7, #4]
    a6b6:	229b      	movs	r2, #155	; 0x9b
    a6b8:	2100      	movs	r1, #0
    a6ba:	5499      	strb	r1, [r3, r2]
    a6bc:	687b      	ldr	r3, [r7, #4]
    a6be:	2200      	movs	r2, #0
    a6c0:	665a      	str	r2, [r3, #100]	; 0x64
    a6c2:	687b      	ldr	r3, [r7, #4]
    a6c4:	2284      	movs	r2, #132	; 0x84
    a6c6:	2100      	movs	r1, #0
    a6c8:	5099      	str	r1, [r3, r2]
    a6ca:	687b      	ldr	r3, [r7, #4]
    a6cc:	229c      	movs	r2, #156	; 0x9c
    a6ce:	2100      	movs	r1, #0
    a6d0:	5499      	strb	r1, [r3, r2]
    a6d2:	687b      	ldr	r3, [r7, #4]
    a6d4:	2200      	movs	r2, #0
    a6d6:	669a      	str	r2, [r3, #104]	; 0x68
    a6d8:	687b      	ldr	r3, [r7, #4]
    a6da:	2288      	movs	r2, #136	; 0x88
    a6dc:	2100      	movs	r1, #0
    a6de:	5099      	str	r1, [r3, r2]
    a6e0:	687b      	ldr	r3, [r7, #4]
    a6e2:	229d      	movs	r2, #157	; 0x9d
    a6e4:	2100      	movs	r1, #0
    a6e6:	5499      	strb	r1, [r3, r2]
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	2200      	movs	r2, #0
    a6ec:	66da      	str	r2, [r3, #108]	; 0x6c
    a6ee:	687b      	ldr	r3, [r7, #4]
    a6f0:	228c      	movs	r2, #140	; 0x8c
    a6f2:	2100      	movs	r1, #0
    a6f4:	5099      	str	r1, [r3, r2]
    a6f6:	687b      	ldr	r3, [r7, #4]
    a6f8:	229e      	movs	r2, #158	; 0x9e
    a6fa:	2100      	movs	r1, #0
    a6fc:	5499      	strb	r1, [r3, r2]
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	2200      	movs	r2, #0
    a702:	671a      	str	r2, [r3, #112]	; 0x70
    a704:	687b      	ldr	r3, [r7, #4]
    a706:	2290      	movs	r2, #144	; 0x90
    a708:	2100      	movs	r1, #0
    a70a:	5099      	str	r1, [r3, r2]
    a70c:	687b      	ldr	r3, [r7, #4]
    a70e:	229f      	movs	r2, #159	; 0x9f
    a710:	2100      	movs	r1, #0
    a712:	5499      	strb	r1, [r3, r2]
    a714:	687b      	ldr	r3, [r7, #4]
    a716:	2200      	movs	r2, #0
    a718:	675a      	str	r2, [r3, #116]	; 0x74
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	2294      	movs	r2, #148	; 0x94
    a71e:	2100      	movs	r1, #0
    a720:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    a722:	687b      	ldr	r3, [r7, #4]
    a724:	22a0      	movs	r2, #160	; 0xa0
    a726:	2101      	movs	r1, #1
    a728:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    a72a:	687b      	ldr	r3, [r7, #4]
    a72c:	22a1      	movs	r2, #161	; 0xa1
    a72e:	2100      	movs	r1, #0
    a730:	5499      	strb	r1, [r3, r2]
}
    a732:	46c0      	nop			; (mov r8, r8)
    a734:	46bd      	mov	sp, r7
    a736:	b005      	add	sp, #20
    a738:	bd90      	pop	{r4, r7, pc}
    a73a:	46c0      	nop			; (mov r8, r8)
    a73c:	0000a439 	.word	0x0000a439
    a740:	00019764 	.word	0x00019764

0000a744 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    a744:	b580      	push	{r7, lr}
    a746:	b086      	sub	sp, #24
    a748:	af00      	add	r7, sp, #0
    a74a:	60b9      	str	r1, [r7, #8]
    a74c:	607a      	str	r2, [r7, #4]
    a74e:	230f      	movs	r3, #15
    a750:	18fb      	adds	r3, r7, r3
    a752:	1c02      	adds	r2, r0, #0
    a754:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    a756:	2300      	movs	r3, #0
    a758:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    a75a:	2300      	movs	r3, #0
    a75c:	613b      	str	r3, [r7, #16]
    a75e:	e01d      	b.n	a79c <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    a760:	68ba      	ldr	r2, [r7, #8]
    a762:	693b      	ldr	r3, [r7, #16]
    a764:	18d3      	adds	r3, r2, r3
    a766:	3310      	adds	r3, #16
    a768:	781b      	ldrb	r3, [r3, #0]
    a76a:	2b01      	cmp	r3, #1
    a76c:	d113      	bne.n	a796 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    a76e:	230f      	movs	r3, #15
    a770:	18fb      	adds	r3, r7, r3
    a772:	781b      	ldrb	r3, [r3, #0]
    a774:	4a1b      	ldr	r2, [pc, #108]	; (a7e4 <_tcc_build_ctrla+0xa0>)
    a776:	5cd3      	ldrb	r3, [r2, r3]
    a778:	001a      	movs	r2, r3
    a77a:	693b      	ldr	r3, [r7, #16]
    a77c:	429a      	cmp	r2, r3
    a77e:	da01      	bge.n	a784 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    a780:	2317      	movs	r3, #23
    a782:	e02a      	b.n	a7da <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    a784:	2380      	movs	r3, #128	; 0x80
    a786:	045a      	lsls	r2, r3, #17
    a788:	693b      	ldr	r3, [r7, #16]
    a78a:	409a      	lsls	r2, r3
    a78c:	0013      	movs	r3, r2
    a78e:	001a      	movs	r2, r3
    a790:	697b      	ldr	r3, [r7, #20]
    a792:	4313      	orrs	r3, r2
    a794:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    a796:	693b      	ldr	r3, [r7, #16]
    a798:	3301      	adds	r3, #1
    a79a:	613b      	str	r3, [r7, #16]
    a79c:	693b      	ldr	r3, [r7, #16]
    a79e:	2b03      	cmp	r3, #3
    a7a0:	ddde      	ble.n	a760 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    a7a2:	68bb      	ldr	r3, [r7, #8]
    a7a4:	22a1      	movs	r2, #161	; 0xa1
    a7a6:	5c9b      	ldrb	r3, [r3, r2]
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	d004      	beq.n	a7b6 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    a7ac:	697b      	ldr	r3, [r7, #20]
    a7ae:	2280      	movs	r2, #128	; 0x80
    a7b0:	0112      	lsls	r2, r2, #4
    a7b2:	4313      	orrs	r3, r2
    a7b4:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    a7b6:	68bb      	ldr	r3, [r7, #8]
    a7b8:	7b1b      	ldrb	r3, [r3, #12]
    a7ba:	031b      	lsls	r3, r3, #12
    a7bc:	001a      	movs	r2, r3
    a7be:	697b      	ldr	r3, [r7, #20]
    a7c0:	4313      	orrs	r3, r2
    a7c2:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    a7c4:	68bb      	ldr	r3, [r7, #8]
    a7c6:	7adb      	ldrb	r3, [r3, #11]
    a7c8:	021b      	lsls	r3, r3, #8
    a7ca:	001a      	movs	r2, r3
    a7cc:	697b      	ldr	r3, [r7, #20]
    a7ce:	4313      	orrs	r3, r2
    a7d0:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    a7d2:	687b      	ldr	r3, [r7, #4]
    a7d4:	697a      	ldr	r2, [r7, #20]
    a7d6:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    a7d8:	2300      	movs	r3, #0
}
    a7da:	0018      	movs	r0, r3
    a7dc:	46bd      	mov	sp, r7
    a7de:	b006      	add	sp, #24
    a7e0:	bd80      	pop	{r7, pc}
    a7e2:	46c0      	nop			; (mov r8, r8)
    a7e4:	00019770 	.word	0x00019770

0000a7e8 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    a7e8:	b580      	push	{r7, lr}
    a7ea:	b086      	sub	sp, #24
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	60b9      	str	r1, [r7, #8]
    a7f0:	607a      	str	r2, [r7, #4]
    a7f2:	230f      	movs	r3, #15
    a7f4:	18fb      	adds	r3, r7, r3
    a7f6:	1c02      	adds	r2, r0, #0
    a7f8:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    a7fa:	2317      	movs	r3, #23
    a7fc:	18fb      	adds	r3, r7, r3
    a7fe:	2200      	movs	r2, #0
    a800:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    a802:	68bb      	ldr	r3, [r7, #8]
    a804:	7a1b      	ldrb	r3, [r3, #8]
    a806:	2b00      	cmp	r3, #0
    a808:	d007      	beq.n	a81a <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    a80a:	2317      	movs	r3, #23
    a80c:	18fb      	adds	r3, r7, r3
    a80e:	2217      	movs	r2, #23
    a810:	18ba      	adds	r2, r7, r2
    a812:	7812      	ldrb	r2, [r2, #0]
    a814:	2104      	movs	r1, #4
    a816:	430a      	orrs	r2, r1
    a818:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    a81a:	68bb      	ldr	r3, [r7, #8]
    a81c:	7a5b      	ldrb	r3, [r3, #9]
    a81e:	2b01      	cmp	r3, #1
    a820:	d107      	bne.n	a832 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    a822:	2317      	movs	r3, #23
    a824:	18fb      	adds	r3, r7, r3
    a826:	2217      	movs	r2, #23
    a828:	18ba      	adds	r2, r7, r2
    a82a:	7812      	ldrb	r2, [r2, #0]
    a82c:	2101      	movs	r1, #1
    a82e:	430a      	orrs	r2, r1
    a830:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    a832:	687b      	ldr	r3, [r7, #4]
    a834:	2217      	movs	r2, #23
    a836:	18ba      	adds	r2, r7, r2
    a838:	7812      	ldrb	r2, [r2, #0]
    a83a:	701a      	strb	r2, [r3, #0]
}
    a83c:	46c0      	nop			; (mov r8, r8)
    a83e:	46bd      	mov	sp, r7
    a840:	b006      	add	sp, #24
    a842:	bd80      	pop	{r7, pc}

0000a844 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    a844:	b580      	push	{r7, lr}
    a846:	b088      	sub	sp, #32
    a848:	af00      	add	r7, sp, #0
    a84a:	60b9      	str	r1, [r7, #8]
    a84c:	607a      	str	r2, [r7, #4]
    a84e:	230f      	movs	r3, #15
    a850:	18fb      	adds	r3, r7, r3
    a852:	1c02      	adds	r2, r0, #0
    a854:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    a856:	230f      	movs	r3, #15
    a858:	18fb      	adds	r3, r7, r3
    a85a:	781a      	ldrb	r2, [r3, #0]
    a85c:	231b      	movs	r3, #27
    a85e:	18fb      	adds	r3, r7, r3
    a860:	493e      	ldr	r1, [pc, #248]	; (a95c <_tcc_build_faults+0x118>)
    a862:	5c8a      	ldrb	r2, [r1, r2]
    a864:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    a866:	2300      	movs	r3, #0
    a868:	61fb      	str	r3, [r7, #28]
    a86a:	e06e      	b.n	a94a <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    a86c:	69fa      	ldr	r2, [r7, #28]
    a86e:	0013      	movs	r3, r2
    a870:	009b      	lsls	r3, r3, #2
    a872:	189b      	adds	r3, r3, r2
    a874:	005b      	lsls	r3, r3, #1
    a876:	3328      	adds	r3, #40	; 0x28
    a878:	68ba      	ldr	r2, [r7, #8]
    a87a:	18d3      	adds	r3, r2, r3
    a87c:	3304      	adds	r3, #4
    a87e:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    a880:	697b      	ldr	r3, [r7, #20]
    a882:	7a5b      	ldrb	r3, [r3, #9]
    a884:	221b      	movs	r2, #27
    a886:	18ba      	adds	r2, r7, r2
    a888:	7812      	ldrb	r2, [r2, #0]
    a88a:	429a      	cmp	r2, r3
    a88c:	d801      	bhi.n	a892 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    a88e:	2317      	movs	r3, #23
    a890:	e05f      	b.n	a952 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    a892:	697b      	ldr	r3, [r7, #20]
    a894:	781b      	ldrb	r3, [r3, #0]
    a896:	2b0f      	cmp	r3, #15
    a898:	d901      	bls.n	a89e <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    a89a:	2317      	movs	r3, #23
    a89c:	e059      	b.n	a952 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    a89e:	697b      	ldr	r3, [r7, #20]
    a8a0:	781b      	ldrb	r3, [r3, #0]
    a8a2:	061b      	lsls	r3, r3, #24
    a8a4:	001a      	movs	r2, r3
    a8a6:	23f0      	movs	r3, #240	; 0xf0
    a8a8:	051b      	lsls	r3, r3, #20
    a8aa:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    a8ac:	697b      	ldr	r3, [r7, #20]
    a8ae:	785b      	ldrb	r3, [r3, #1]
    a8b0:	041b      	lsls	r3, r3, #16
    a8b2:	0019      	movs	r1, r3
    a8b4:	23ff      	movs	r3, #255	; 0xff
    a8b6:	041b      	lsls	r3, r3, #16
    a8b8:	400b      	ands	r3, r1
    a8ba:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    a8bc:	697b      	ldr	r3, [r7, #20]
    a8be:	789b      	ldrb	r3, [r3, #2]
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	d001      	beq.n	a8c8 <_tcc_build_faults+0x84>
    a8c4:	2380      	movs	r3, #128	; 0x80
    a8c6:	e000      	b.n	a8ca <_tcc_build_faults+0x86>
    a8c8:	2300      	movs	r3, #0
    a8ca:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    a8cc:	697b      	ldr	r3, [r7, #20]
    a8ce:	78db      	ldrb	r3, [r3, #3]
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d001      	beq.n	a8d8 <_tcc_build_faults+0x94>
    a8d4:	2308      	movs	r3, #8
    a8d6:	e000      	b.n	a8da <_tcc_build_faults+0x96>
    a8d8:	2300      	movs	r3, #0
    a8da:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    a8dc:	697b      	ldr	r3, [r7, #20]
    a8de:	791b      	ldrb	r3, [r3, #4]
    a8e0:	2b00      	cmp	r3, #0
    a8e2:	d001      	beq.n	a8e8 <_tcc_build_faults+0xa4>
    a8e4:	2310      	movs	r3, #16
    a8e6:	e000      	b.n	a8ea <_tcc_build_faults+0xa6>
    a8e8:	2300      	movs	r3, #0
    a8ea:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    a8ec:	697b      	ldr	r3, [r7, #20]
    a8ee:	795b      	ldrb	r3, [r3, #5]
    a8f0:	0019      	movs	r1, r3
    a8f2:	2303      	movs	r3, #3
    a8f4:	400b      	ands	r3, r1
    a8f6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    a8f8:	697b      	ldr	r3, [r7, #20]
    a8fa:	799b      	ldrb	r3, [r3, #6]
    a8fc:	015b      	lsls	r3, r3, #5
    a8fe:	0019      	movs	r1, r3
    a900:	2360      	movs	r3, #96	; 0x60
    a902:	400b      	ands	r3, r1
    a904:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    a906:	697b      	ldr	r3, [r7, #20]
    a908:	79db      	ldrb	r3, [r3, #7]
    a90a:	021b      	lsls	r3, r3, #8
    a90c:	0019      	movs	r1, r3
    a90e:	23c0      	movs	r3, #192	; 0xc0
    a910:	009b      	lsls	r3, r3, #2
    a912:	400b      	ands	r3, r1
    a914:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    a916:	697b      	ldr	r3, [r7, #20]
    a918:	7a1b      	ldrb	r3, [r3, #8]
    a91a:	031b      	lsls	r3, r3, #12
    a91c:	0019      	movs	r1, r3
    a91e:	23e0      	movs	r3, #224	; 0xe0
    a920:	01db      	lsls	r3, r3, #7
    a922:	400b      	ands	r3, r1
    a924:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    a926:	697b      	ldr	r3, [r7, #20]
    a928:	7a5b      	ldrb	r3, [r3, #9]
    a92a:	029b      	lsls	r3, r3, #10
    a92c:	0019      	movs	r1, r3
    a92e:	23c0      	movs	r3, #192	; 0xc0
    a930:	011b      	lsls	r3, r3, #4
    a932:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    a934:	4313      	orrs	r3, r2
    a936:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    a938:	69fb      	ldr	r3, [r7, #28]
    a93a:	009b      	lsls	r3, r3, #2
    a93c:	687a      	ldr	r2, [r7, #4]
    a93e:	18d3      	adds	r3, r2, r3
    a940:	693a      	ldr	r2, [r7, #16]
    a942:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    a944:	69fb      	ldr	r3, [r7, #28]
    a946:	3301      	adds	r3, #1
    a948:	61fb      	str	r3, [r7, #28]
    a94a:	69fb      	ldr	r3, [r7, #28]
    a94c:	2b01      	cmp	r3, #1
    a94e:	dd8d      	ble.n	a86c <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    a950:	2300      	movs	r3, #0
}
    a952:	0018      	movs	r0, r3
    a954:	46bd      	mov	sp, r7
    a956:	b008      	add	sp, #32
    a958:	bd80      	pop	{r7, pc}
    a95a:	46c0      	nop			; (mov r8, r8)
    a95c:	00019770 	.word	0x00019770

0000a960 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    a960:	b580      	push	{r7, lr}
    a962:	b088      	sub	sp, #32
    a964:	af00      	add	r7, sp, #0
    a966:	60b9      	str	r1, [r7, #8]
    a968:	607a      	str	r2, [r7, #4]
    a96a:	230f      	movs	r3, #15
    a96c:	18fb      	adds	r3, r7, r3
    a96e:	1c02      	adds	r2, r0, #0
    a970:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    a972:	230f      	movs	r3, #15
    a974:	18fb      	adds	r3, r7, r3
    a976:	781a      	ldrb	r2, [r3, #0]
    a978:	2317      	movs	r3, #23
    a97a:	18fb      	adds	r3, r7, r3
    a97c:	492d      	ldr	r1, [pc, #180]	; (aa34 <_tcc_build_drvctrl+0xd4>)
    a97e:	5c8a      	ldrb	r2, [r1, r2]
    a980:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    a982:	2300      	movs	r3, #0
    a984:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    a986:	2300      	movs	r3, #0
    a988:	61fb      	str	r3, [r7, #28]
    a98a:	e048      	b.n	aa1e <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    a98c:	68ba      	ldr	r2, [r7, #8]
    a98e:	2150      	movs	r1, #80	; 0x50
    a990:	69fb      	ldr	r3, [r7, #28]
    a992:	18d3      	adds	r3, r2, r3
    a994:	185b      	adds	r3, r3, r1
    a996:	781b      	ldrb	r3, [r3, #0]
    a998:	2b00      	cmp	r3, #0
    a99a:	d010      	beq.n	a9be <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    a99c:	2317      	movs	r3, #23
    a99e:	18fb      	adds	r3, r7, r3
    a9a0:	781a      	ldrb	r2, [r3, #0]
    a9a2:	69fb      	ldr	r3, [r7, #28]
    a9a4:	429a      	cmp	r2, r3
    a9a6:	d801      	bhi.n	a9ac <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    a9a8:	2317      	movs	r3, #23
    a9aa:	e03f      	b.n	aa2c <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    a9ac:	2380      	movs	r3, #128	; 0x80
    a9ae:	025a      	lsls	r2, r3, #9
    a9b0:	69fb      	ldr	r3, [r7, #28]
    a9b2:	409a      	lsls	r2, r3
    a9b4:	0013      	movs	r3, r2
    a9b6:	001a      	movs	r2, r3
    a9b8:	69bb      	ldr	r3, [r7, #24]
    a9ba:	4313      	orrs	r3, r2
    a9bc:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    a9be:	68ba      	ldr	r2, [r7, #8]
    a9c0:	69fb      	ldr	r3, [r7, #28]
    a9c2:	331c      	adds	r3, #28
    a9c4:	005b      	lsls	r3, r3, #1
    a9c6:	18d3      	adds	r3, r2, r3
    a9c8:	3309      	adds	r3, #9
    a9ca:	781b      	ldrb	r3, [r3, #0]
    a9cc:	2b00      	cmp	r3, #0
    a9ce:	d023      	beq.n	aa18 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    a9d0:	2317      	movs	r3, #23
    a9d2:	18fb      	adds	r3, r7, r3
    a9d4:	781a      	ldrb	r2, [r3, #0]
    a9d6:	69fb      	ldr	r3, [r7, #28]
    a9d8:	429a      	cmp	r2, r3
    a9da:	d801      	bhi.n	a9e0 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    a9dc:	2317      	movs	r3, #23
    a9de:	e025      	b.n	aa2c <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    a9e0:	68ba      	ldr	r2, [r7, #8]
    a9e2:	69fb      	ldr	r3, [r7, #28]
    a9e4:	331c      	adds	r3, #28
    a9e6:	005b      	lsls	r3, r3, #1
    a9e8:	18d3      	adds	r3, r2, r3
    a9ea:	3309      	adds	r3, #9
    a9ec:	781b      	ldrb	r3, [r3, #0]
    a9ee:	2b02      	cmp	r3, #2
    a9f0:	d10a      	bne.n	aa08 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    a9f2:	2302      	movs	r3, #2
    a9f4:	33ff      	adds	r3, #255	; 0xff
    a9f6:	001a      	movs	r2, r3
    a9f8:	69fb      	ldr	r3, [r7, #28]
    a9fa:	409a      	lsls	r2, r3
    a9fc:	0013      	movs	r3, r2
    a9fe:	001a      	movs	r2, r3
    aa00:	69bb      	ldr	r3, [r7, #24]
    aa02:	4313      	orrs	r3, r2
    aa04:	61bb      	str	r3, [r7, #24]
    aa06:	e007      	b.n	aa18 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    aa08:	2201      	movs	r2, #1
    aa0a:	69fb      	ldr	r3, [r7, #28]
    aa0c:	409a      	lsls	r2, r3
    aa0e:	0013      	movs	r3, r2
    aa10:	001a      	movs	r2, r3
    aa12:	69bb      	ldr	r3, [r7, #24]
    aa14:	4313      	orrs	r3, r2
    aa16:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    aa18:	69fb      	ldr	r3, [r7, #28]
    aa1a:	3301      	adds	r3, #1
    aa1c:	61fb      	str	r3, [r7, #28]
    aa1e:	69fb      	ldr	r3, [r7, #28]
    aa20:	2b07      	cmp	r3, #7
    aa22:	d9b3      	bls.n	a98c <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    aa24:	687b      	ldr	r3, [r7, #4]
    aa26:	69ba      	ldr	r2, [r7, #24]
    aa28:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    aa2a:	2300      	movs	r3, #0
}
    aa2c:	0018      	movs	r0, r3
    aa2e:	46bd      	mov	sp, r7
    aa30:	b008      	add	sp, #32
    aa32:	bd80      	pop	{r7, pc}
    aa34:	00019774 	.word	0x00019774

0000aa38 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    aa38:	b580      	push	{r7, lr}
    aa3a:	b088      	sub	sp, #32
    aa3c:	af00      	add	r7, sp, #0
    aa3e:	60b9      	str	r1, [r7, #8]
    aa40:	607a      	str	r2, [r7, #4]
    aa42:	230f      	movs	r3, #15
    aa44:	18fb      	adds	r3, r7, r3
    aa46:	1c02      	adds	r2, r0, #0
    aa48:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    aa4a:	230f      	movs	r3, #15
    aa4c:	18fb      	adds	r3, r7, r3
    aa4e:	781a      	ldrb	r2, [r3, #0]
    aa50:	2317      	movs	r3, #23
    aa52:	18fb      	adds	r3, r7, r3
    aa54:	491d      	ldr	r1, [pc, #116]	; (aacc <_tcc_build_waves+0x94>)
    aa56:	5c8a      	ldrb	r2, [r1, r2]
    aa58:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    aa5a:	68bb      	ldr	r3, [r7, #8]
    aa5c:	3310      	adds	r3, #16
    aa5e:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    aa60:	693b      	ldr	r3, [r7, #16]
    aa62:	7a5b      	ldrb	r3, [r3, #9]
    aa64:	011b      	lsls	r3, r3, #4
    aa66:	001a      	movs	r2, r3
    aa68:	2330      	movs	r3, #48	; 0x30
    aa6a:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    aa6c:	693b      	ldr	r3, [r7, #16]
    aa6e:	7a1b      	ldrb	r3, [r3, #8]
    aa70:	0019      	movs	r1, r3
    aa72:	2307      	movs	r3, #7
    aa74:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    aa76:	4313      	orrs	r3, r2
    aa78:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    aa7a:	2300      	movs	r3, #0
    aa7c:	61fb      	str	r3, [r7, #28]
    aa7e:	e01a      	b.n	aab6 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    aa80:	693a      	ldr	r2, [r7, #16]
    aa82:	69fb      	ldr	r3, [r7, #28]
    aa84:	18d3      	adds	r3, r2, r3
    aa86:	3304      	adds	r3, #4
    aa88:	781b      	ldrb	r3, [r3, #0]
    aa8a:	2b00      	cmp	r3, #0
    aa8c:	d010      	beq.n	aab0 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    aa8e:	2317      	movs	r3, #23
    aa90:	18fb      	adds	r3, r7, r3
    aa92:	781a      	ldrb	r2, [r3, #0]
    aa94:	69fb      	ldr	r3, [r7, #28]
    aa96:	429a      	cmp	r2, r3
    aa98:	dc01      	bgt.n	aa9e <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    aa9a:	2317      	movs	r3, #23
    aa9c:	e012      	b.n	aac4 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    aa9e:	2380      	movs	r3, #128	; 0x80
    aaa0:	025a      	lsls	r2, r3, #9
    aaa2:	69fb      	ldr	r3, [r7, #28]
    aaa4:	409a      	lsls	r2, r3
    aaa6:	0013      	movs	r3, r2
    aaa8:	001a      	movs	r2, r3
    aaaa:	69bb      	ldr	r3, [r7, #24]
    aaac:	4313      	orrs	r3, r2
    aaae:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    aab0:	69fb      	ldr	r3, [r7, #28]
    aab2:	3301      	adds	r3, #1
    aab4:	61fb      	str	r3, [r7, #28]
    aab6:	69fb      	ldr	r3, [r7, #28]
    aab8:	2b03      	cmp	r3, #3
    aaba:	dde1      	ble.n	aa80 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    aabc:	687b      	ldr	r3, [r7, #4]
    aabe:	69ba      	ldr	r2, [r7, #24]
    aac0:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    aac2:	2300      	movs	r3, #0
}
    aac4:	0018      	movs	r0, r3
    aac6:	46bd      	mov	sp, r7
    aac8:	b008      	add	sp, #32
    aaca:	bd80      	pop	{r7, pc}
    aacc:	00019770 	.word	0x00019770

0000aad0 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    aad0:	b590      	push	{r4, r7, lr}
    aad2:	b091      	sub	sp, #68	; 0x44
    aad4:	af00      	add	r7, sp, #0
    aad6:	60f8      	str	r0, [r7, #12]
    aad8:	60b9      	str	r1, [r7, #8]
    aada:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    aadc:	233b      	movs	r3, #59	; 0x3b
    aade:	18fc      	adds	r4, r7, r3
    aae0:	68bb      	ldr	r3, [r7, #8]
    aae2:	0018      	movs	r0, r3
    aae4:	4bc4      	ldr	r3, [pc, #784]	; (adf8 <tcc_init+0x328>)
    aae6:	4798      	blx	r3
    aae8:	0003      	movs	r3, r0
    aaea:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    aaec:	233b      	movs	r3, #59	; 0x3b
    aaee:	18fb      	adds	r3, r7, r3
    aaf0:	781a      	ldrb	r2, [r3, #0]
    aaf2:	4bc2      	ldr	r3, [pc, #776]	; (adfc <tcc_init+0x32c>)
    aaf4:	0092      	lsls	r2, r2, #2
    aaf6:	58d3      	ldr	r3, [r2, r3]
    aaf8:	0019      	movs	r1, r3
    aafa:	2002      	movs	r0, #2
    aafc:	4bc0      	ldr	r3, [pc, #768]	; (ae00 <tcc_init+0x330>)
    aafe:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    ab00:	68bb      	ldr	r3, [r7, #8]
    ab02:	681b      	ldr	r3, [r3, #0]
    ab04:	2202      	movs	r2, #2
    ab06:	4013      	ands	r3, r2
    ab08:	d001      	beq.n	ab0e <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    ab0a:	231c      	movs	r3, #28
    ab0c:	e1be      	b.n	ae8c <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    ab0e:	68bb      	ldr	r3, [r7, #8]
    ab10:	681b      	ldr	r3, [r3, #0]
    ab12:	2201      	movs	r2, #1
    ab14:	4013      	ands	r3, r2
    ab16:	d001      	beq.n	ab1c <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    ab18:	231c      	movs	r3, #28
    ab1a:	e1b7      	b.n	ae8c <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    ab1c:	233b      	movs	r3, #59	; 0x3b
    ab1e:	18fb      	adds	r3, r7, r3
    ab20:	781a      	ldrb	r2, [r3, #0]
    ab22:	4bb8      	ldr	r3, [pc, #736]	; (ae04 <tcc_init+0x334>)
    ab24:	0092      	lsls	r2, r2, #2
    ab26:	58d3      	ldr	r3, [r2, r3]
    ab28:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    ab2a:	687b      	ldr	r3, [r7, #4]
    ab2c:	681a      	ldr	r2, [r3, #0]
    ab2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab30:	429a      	cmp	r2, r3
    ab32:	d804      	bhi.n	ab3e <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    ab34:	687b      	ldr	r3, [r7, #4]
    ab36:	685a      	ldr	r2, [r3, #4]
    ab38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab3a:	429a      	cmp	r2, r3
    ab3c:	d901      	bls.n	ab42 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    ab3e:	2317      	movs	r3, #23
    ab40:	e1a4      	b.n	ae8c <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ab42:	2300      	movs	r3, #0
    ab44:	63fb      	str	r3, [r7, #60]	; 0x3c
    ab46:	e00e      	b.n	ab66 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    ab48:	687a      	ldr	r2, [r7, #4]
    ab4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ab4c:	3306      	adds	r3, #6
    ab4e:	009b      	lsls	r3, r3, #2
    ab50:	18d3      	adds	r3, r2, r3
    ab52:	3304      	adds	r3, #4
    ab54:	681a      	ldr	r2, [r3, #0]
    ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab58:	429a      	cmp	r2, r3
    ab5a:	d901      	bls.n	ab60 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    ab5c:	2317      	movs	r3, #23
    ab5e:	e195      	b.n	ae8c <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ab60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ab62:	3301      	adds	r3, #1
    ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
    ab66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ab68:	2b03      	cmp	r3, #3
    ab6a:	dded      	ble.n	ab48 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ab6c:	2300      	movs	r3, #0
    ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    ab70:	e019      	b.n	aba6 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    ab72:	687a      	ldr	r2, [r7, #4]
    ab74:	2198      	movs	r1, #152	; 0x98
    ab76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ab78:	18d3      	adds	r3, r2, r3
    ab7a:	185b      	adds	r3, r3, r1
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	2201      	movs	r2, #1
    ab80:	4053      	eors	r3, r2
    ab82:	b2db      	uxtb	r3, r3
    ab84:	2b00      	cmp	r3, #0
    ab86:	d10a      	bne.n	ab9e <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    ab88:	233b      	movs	r3, #59	; 0x3b
    ab8a:	18fb      	adds	r3, r7, r3
    ab8c:	781b      	ldrb	r3, [r3, #0]
    ab8e:	4a9e      	ldr	r2, [pc, #632]	; (ae08 <tcc_init+0x338>)
    ab90:	5cd3      	ldrb	r3, [r2, r3]
    ab92:	001a      	movs	r2, r3
    ab94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ab96:	429a      	cmp	r2, r3
    ab98:	dc02      	bgt.n	aba0 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    ab9a:	2317      	movs	r3, #23
    ab9c:	e176      	b.n	ae8c <tcc_init+0x3bc>
			continue;
    ab9e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    aba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aba2:	3301      	adds	r3, #1
    aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    aba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aba8:	2b07      	cmp	r3, #7
    abaa:	dde2      	ble.n	ab72 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    abac:	2300      	movs	r3, #0
    abae:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    abb0:	2333      	movs	r3, #51	; 0x33
    abb2:	18fc      	adds	r4, r7, r3
    abb4:	232c      	movs	r3, #44	; 0x2c
    abb6:	18fa      	adds	r2, r7, r3
    abb8:	6879      	ldr	r1, [r7, #4]
    abba:	233b      	movs	r3, #59	; 0x3b
    abbc:	18fb      	adds	r3, r7, r3
    abbe:	781b      	ldrb	r3, [r3, #0]
    abc0:	0018      	movs	r0, r3
    abc2:	4b92      	ldr	r3, [pc, #584]	; (ae0c <tcc_init+0x33c>)
    abc4:	4798      	blx	r3
    abc6:	0003      	movs	r3, r0
    abc8:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    abca:	2333      	movs	r3, #51	; 0x33
    abcc:	18fb      	adds	r3, r7, r3
    abce:	781b      	ldrb	r3, [r3, #0]
    abd0:	2b00      	cmp	r3, #0
    abd2:	d003      	beq.n	abdc <tcc_init+0x10c>
		return status;
    abd4:	2333      	movs	r3, #51	; 0x33
    abd6:	18fb      	adds	r3, r7, r3
    abd8:	781b      	ldrb	r3, [r3, #0]
    abda:	e157      	b.n	ae8c <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    abdc:	232b      	movs	r3, #43	; 0x2b
    abde:	18fa      	adds	r2, r7, r3
    abe0:	6879      	ldr	r1, [r7, #4]
    abe2:	233b      	movs	r3, #59	; 0x3b
    abe4:	18fb      	adds	r3, r7, r3
    abe6:	781b      	ldrb	r3, [r3, #0]
    abe8:	0018      	movs	r0, r3
    abea:	4b89      	ldr	r3, [pc, #548]	; (ae10 <tcc_init+0x340>)
    abec:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    abee:	2333      	movs	r3, #51	; 0x33
    abf0:	18fc      	adds	r4, r7, r3
    abf2:	2320      	movs	r3, #32
    abf4:	18fa      	adds	r2, r7, r3
    abf6:	6879      	ldr	r1, [r7, #4]
    abf8:	233b      	movs	r3, #59	; 0x3b
    abfa:	18fb      	adds	r3, r7, r3
    abfc:	781b      	ldrb	r3, [r3, #0]
    abfe:	0018      	movs	r0, r3
    ac00:	4b84      	ldr	r3, [pc, #528]	; (ae14 <tcc_init+0x344>)
    ac02:	4798      	blx	r3
    ac04:	0003      	movs	r3, r0
    ac06:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    ac08:	2333      	movs	r3, #51	; 0x33
    ac0a:	18fb      	adds	r3, r7, r3
    ac0c:	781b      	ldrb	r3, [r3, #0]
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d003      	beq.n	ac1a <tcc_init+0x14a>
		return status;
    ac12:	2333      	movs	r3, #51	; 0x33
    ac14:	18fb      	adds	r3, r7, r3
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	e138      	b.n	ae8c <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    ac1a:	2300      	movs	r3, #0
    ac1c:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    ac1e:	2333      	movs	r3, #51	; 0x33
    ac20:	18fc      	adds	r4, r7, r3
    ac22:	231c      	movs	r3, #28
    ac24:	18fa      	adds	r2, r7, r3
    ac26:	6879      	ldr	r1, [r7, #4]
    ac28:	233b      	movs	r3, #59	; 0x3b
    ac2a:	18fb      	adds	r3, r7, r3
    ac2c:	781b      	ldrb	r3, [r3, #0]
    ac2e:	0018      	movs	r0, r3
    ac30:	4b79      	ldr	r3, [pc, #484]	; (ae18 <tcc_init+0x348>)
    ac32:	4798      	blx	r3
    ac34:	0003      	movs	r3, r0
    ac36:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    ac38:	2333      	movs	r3, #51	; 0x33
    ac3a:	18fb      	adds	r3, r7, r3
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	2b00      	cmp	r3, #0
    ac40:	d003      	beq.n	ac4a <tcc_init+0x17a>
		return status;
    ac42:	2333      	movs	r3, #51	; 0x33
    ac44:	18fb      	adds	r3, r7, r3
    ac46:	781b      	ldrb	r3, [r3, #0]
    ac48:	e120      	b.n	ae8c <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    ac4a:	2333      	movs	r3, #51	; 0x33
    ac4c:	18fc      	adds	r4, r7, r3
    ac4e:	2318      	movs	r3, #24
    ac50:	18fa      	adds	r2, r7, r3
    ac52:	6879      	ldr	r1, [r7, #4]
    ac54:	233b      	movs	r3, #59	; 0x3b
    ac56:	18fb      	adds	r3, r7, r3
    ac58:	781b      	ldrb	r3, [r3, #0]
    ac5a:	0018      	movs	r0, r3
    ac5c:	4b6f      	ldr	r3, [pc, #444]	; (ae1c <tcc_init+0x34c>)
    ac5e:	4798      	blx	r3
    ac60:	0003      	movs	r3, r0
    ac62:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    ac64:	2333      	movs	r3, #51	; 0x33
    ac66:	18fb      	adds	r3, r7, r3
    ac68:	781b      	ldrb	r3, [r3, #0]
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d003      	beq.n	ac76 <tcc_init+0x1a6>
		return status;
    ac6e:	2333      	movs	r3, #51	; 0x33
    ac70:	18fb      	adds	r3, r7, r3
    ac72:	781b      	ldrb	r3, [r3, #0]
    ac74:	e10a      	b.n	ae8c <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ac76:	2300      	movs	r3, #0
    ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
    ac7a:	e009      	b.n	ac90 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    ac7c:	68fa      	ldr	r2, [r7, #12]
    ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ac80:	009b      	lsls	r3, r3, #2
    ac82:	18d3      	adds	r3, r2, r3
    ac84:	3304      	adds	r3, #4
    ac86:	2200      	movs	r2, #0
    ac88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ac8c:	3301      	adds	r3, #1
    ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    ac90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ac92:	2b0b      	cmp	r3, #11
    ac94:	ddf2      	ble.n	ac7c <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    ac96:	68fb      	ldr	r3, [r7, #12]
    ac98:	2200      	movs	r2, #0
    ac9a:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    ac9c:	68fb      	ldr	r3, [r7, #12]
    ac9e:	2200      	movs	r2, #0
    aca0:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    aca2:	233b      	movs	r3, #59	; 0x3b
    aca4:	18fb      	adds	r3, r7, r3
    aca6:	781a      	ldrb	r2, [r3, #0]
    aca8:	4b5d      	ldr	r3, [pc, #372]	; (ae20 <tcc_init+0x350>)
    acaa:	0092      	lsls	r2, r2, #2
    acac:	68f9      	ldr	r1, [r7, #12]
    acae:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    acb0:	68fb      	ldr	r3, [r7, #12]
    acb2:	68ba      	ldr	r2, [r7, #8]
    acb4:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    acb6:	687b      	ldr	r3, [r7, #4]
    acb8:	22a0      	movs	r2, #160	; 0xa0
    acba:	5c99      	ldrb	r1, [r3, r2]
    acbc:	68fb      	ldr	r3, [r7, #12]
    acbe:	223c      	movs	r2, #60	; 0x3c
    acc0:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    acc2:	2314      	movs	r3, #20
    acc4:	18fb      	adds	r3, r7, r3
    acc6:	0018      	movs	r0, r3
    acc8:	4b56      	ldr	r3, [pc, #344]	; (ae24 <tcc_init+0x354>)
    acca:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    accc:	687b      	ldr	r3, [r7, #4]
    acce:	7a9a      	ldrb	r2, [r3, #10]
    acd0:	2314      	movs	r3, #20
    acd2:	18fb      	adds	r3, r7, r3
    acd4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    acd6:	233b      	movs	r3, #59	; 0x3b
    acd8:	18fb      	adds	r3, r7, r3
    acda:	781b      	ldrb	r3, [r3, #0]
    acdc:	4a52      	ldr	r2, [pc, #328]	; (ae28 <tcc_init+0x358>)
    acde:	5cd3      	ldrb	r3, [r2, r3]
    ace0:	2214      	movs	r2, #20
    ace2:	18ba      	adds	r2, r7, r2
    ace4:	0011      	movs	r1, r2
    ace6:	0018      	movs	r0, r3
    ace8:	4b50      	ldr	r3, [pc, #320]	; (ae2c <tcc_init+0x35c>)
    acea:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    acec:	233b      	movs	r3, #59	; 0x3b
    acee:	18fb      	adds	r3, r7, r3
    acf0:	781b      	ldrb	r3, [r3, #0]
    acf2:	4a4d      	ldr	r2, [pc, #308]	; (ae28 <tcc_init+0x358>)
    acf4:	5cd3      	ldrb	r3, [r2, r3]
    acf6:	0018      	movs	r0, r3
    acf8:	4b4d      	ldr	r3, [pc, #308]	; (ae30 <tcc_init+0x360>)
    acfa:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    acfc:	2300      	movs	r3, #0
    acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    ad00:	e02d      	b.n	ad5e <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    ad02:	687a      	ldr	r2, [r7, #4]
    ad04:	2198      	movs	r1, #152	; 0x98
    ad06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ad08:	18d3      	adds	r3, r2, r3
    ad0a:	185b      	adds	r3, r3, r1
    ad0c:	781b      	ldrb	r3, [r3, #0]
    ad0e:	2201      	movs	r2, #1
    ad10:	4053      	eors	r3, r2
    ad12:	b2db      	uxtb	r3, r3
    ad14:	2b00      	cmp	r3, #0
    ad16:	d11e      	bne.n	ad56 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    ad18:	2310      	movs	r3, #16
    ad1a:	18fb      	adds	r3, r7, r3
    ad1c:	0018      	movs	r0, r3
    ad1e:	4b45      	ldr	r3, [pc, #276]	; (ae34 <tcc_init+0x364>)
    ad20:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    ad22:	687b      	ldr	r3, [r7, #4]
    ad24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ad26:	321e      	adds	r2, #30
    ad28:	0092      	lsls	r2, r2, #2
    ad2a:	58d3      	ldr	r3, [r2, r3]
    ad2c:	b2da      	uxtb	r2, r3
    ad2e:	2310      	movs	r3, #16
    ad30:	18fb      	adds	r3, r7, r3
    ad32:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    ad34:	2310      	movs	r3, #16
    ad36:	18fb      	adds	r3, r7, r3
    ad38:	2201      	movs	r2, #1
    ad3a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    ad3c:	687b      	ldr	r3, [r7, #4]
    ad3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ad40:	3216      	adds	r2, #22
    ad42:	0092      	lsls	r2, r2, #2
    ad44:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    ad46:	b2db      	uxtb	r3, r3
    ad48:	2210      	movs	r2, #16
    ad4a:	18ba      	adds	r2, r7, r2
    ad4c:	0011      	movs	r1, r2
    ad4e:	0018      	movs	r0, r3
    ad50:	4b39      	ldr	r3, [pc, #228]	; (ae38 <tcc_init+0x368>)
    ad52:	4798      	blx	r3
    ad54:	e000      	b.n	ad58 <tcc_init+0x288>
			continue;
    ad56:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ad58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ad5a:	3301      	adds	r3, #1
    ad5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    ad5e:	233b      	movs	r3, #59	; 0x3b
    ad60:	18fb      	adds	r3, r7, r3
    ad62:	781b      	ldrb	r3, [r3, #0]
    ad64:	4a28      	ldr	r2, [pc, #160]	; (ae08 <tcc_init+0x338>)
    ad66:	5cd3      	ldrb	r3, [r2, r3]
    ad68:	001a      	movs	r2, r3
    ad6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ad6c:	429a      	cmp	r2, r3
    ad6e:	dcc8      	bgt.n	ad02 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    ad70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ad72:	68bb      	ldr	r3, [r7, #8]
    ad74:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ad76:	46c0      	nop			; (mov r8, r8)
    ad78:	68bb      	ldr	r3, [r7, #8]
    ad7a:	689b      	ldr	r3, [r3, #8]
    ad7c:	2204      	movs	r2, #4
    ad7e:	4013      	ands	r3, r2
    ad80:	d1fa      	bne.n	ad78 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    ad82:	68bb      	ldr	r3, [r7, #8]
    ad84:	22ff      	movs	r2, #255	; 0xff
    ad86:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ad88:	46c0      	nop			; (mov r8, r8)
    ad8a:	68bb      	ldr	r3, [r7, #8]
    ad8c:	689b      	ldr	r3, [r3, #8]
    ad8e:	2204      	movs	r2, #4
    ad90:	4013      	ands	r3, r2
    ad92:	d1fa      	bne.n	ad8a <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    ad94:	232b      	movs	r3, #43	; 0x2b
    ad96:	18fb      	adds	r3, r7, r3
    ad98:	781a      	ldrb	r2, [r3, #0]
    ad9a:	68bb      	ldr	r3, [r7, #8]
    ad9c:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    ad9e:	2320      	movs	r3, #32
    ada0:	18fb      	adds	r3, r7, r3
    ada2:	681a      	ldr	r2, [r3, #0]
    ada4:	68bb      	ldr	r3, [r7, #8]
    ada6:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    ada8:	2320      	movs	r3, #32
    adaa:	18fb      	adds	r3, r7, r3
    adac:	685a      	ldr	r2, [r3, #4]
    adae:	68bb      	ldr	r3, [r7, #8]
    adb0:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    adb2:	69fa      	ldr	r2, [r7, #28]
    adb4:	68bb      	ldr	r3, [r7, #8]
    adb6:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    adb8:	46c0      	nop			; (mov r8, r8)
    adba:	68bb      	ldr	r3, [r7, #8]
    adbc:	689b      	ldr	r3, [r3, #8]
    adbe:	4a1f      	ldr	r2, [pc, #124]	; (ae3c <tcc_init+0x36c>)
    adc0:	4013      	ands	r3, r2
    adc2:	d1fa      	bne.n	adba <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    adc4:	69ba      	ldr	r2, [r7, #24]
    adc6:	68bb      	ldr	r3, [r7, #8]
    adc8:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    adca:	46c0      	nop			; (mov r8, r8)
    adcc:	68bb      	ldr	r3, [r7, #8]
    adce:	689b      	ldr	r3, [r3, #8]
    add0:	2210      	movs	r2, #16
    add2:	4013      	ands	r3, r2
    add4:	d1fa      	bne.n	adcc <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    add6:	687b      	ldr	r3, [r7, #4]
    add8:	681a      	ldr	r2, [r3, #0]
    adda:	68bb      	ldr	r3, [r7, #8]
    addc:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    adde:	46c0      	nop			; (mov r8, r8)
    ade0:	68bb      	ldr	r3, [r7, #8]
    ade2:	689b      	ldr	r3, [r3, #8]
    ade4:	4a16      	ldr	r2, [pc, #88]	; (ae40 <tcc_init+0x370>)
    ade6:	4013      	ands	r3, r2
    ade8:	d1fa      	bne.n	ade0 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    adea:	687b      	ldr	r3, [r7, #4]
    adec:	685a      	ldr	r2, [r3, #4]
    adee:	68bb      	ldr	r3, [r7, #8]
    adf0:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    adf2:	2300      	movs	r3, #0
    adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    adf6:	e03f      	b.n	ae78 <tcc_init+0x3a8>
    adf8:	0000a439 	.word	0x0000a439
    adfc:	00019758 	.word	0x00019758
    ae00:	0000a3b5 	.word	0x0000a3b5
    ae04:	00019764 	.word	0x00019764
    ae08:	00019774 	.word	0x00019774
    ae0c:	0000a745 	.word	0x0000a745
    ae10:	0000a7e9 	.word	0x0000a7e9
    ae14:	0000a845 	.word	0x0000a845
    ae18:	0000a961 	.word	0x0000a961
    ae1c:	0000aa39 	.word	0x0000aa39
    ae20:	20000720 	.word	0x20000720
    ae24:	0000a39d 	.word	0x0000a39d
    ae28:	00019754 	.word	0x00019754
    ae2c:	00010e59 	.word	0x00010e59
    ae30:	00010e9d 	.word	0x00010e9d
    ae34:	0000a411 	.word	0x0000a411
    ae38:	00011145 	.word	0x00011145
    ae3c:	00020040 	.word	0x00020040
    ae40:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    ae44:	46c0      	nop			; (mov r8, r8)
    ae46:	68bb      	ldr	r3, [r7, #8]
    ae48:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    ae4a:	4912      	ldr	r1, [pc, #72]	; (ae94 <tcc_init+0x3c4>)
    ae4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ae4e:	4091      	lsls	r1, r2
    ae50:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    ae52:	4013      	ands	r3, r2
    ae54:	d1f7      	bne.n	ae46 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    ae56:	687a      	ldr	r2, [r7, #4]
    ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae5a:	3306      	adds	r3, #6
    ae5c:	009b      	lsls	r3, r3, #2
    ae5e:	18d3      	adds	r3, r2, r3
    ae60:	3304      	adds	r3, #4
    ae62:	681a      	ldr	r2, [r3, #0]
    ae64:	68b9      	ldr	r1, [r7, #8]
    ae66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae68:	3310      	adds	r3, #16
    ae6a:	009b      	lsls	r3, r3, #2
    ae6c:	18cb      	adds	r3, r1, r3
    ae6e:	3304      	adds	r3, #4
    ae70:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    ae72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae74:	3301      	adds	r3, #1
    ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
    ae78:	233b      	movs	r3, #59	; 0x3b
    ae7a:	18fb      	adds	r3, r7, r3
    ae7c:	781b      	ldrb	r3, [r3, #0]
    ae7e:	4a06      	ldr	r2, [pc, #24]	; (ae98 <tcc_init+0x3c8>)
    ae80:	5cd3      	ldrb	r3, [r2, r3]
    ae82:	001a      	movs	r2, r3
    ae84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae86:	429a      	cmp	r2, r3
    ae88:	dcdc      	bgt.n	ae44 <tcc_init+0x374>
	}

	return STATUS_OK;
    ae8a:	2300      	movs	r3, #0
}
    ae8c:	0018      	movs	r0, r3
    ae8e:	46bd      	mov	sp, r7
    ae90:	b011      	add	sp, #68	; 0x44
    ae92:	bd90      	pop	{r4, r7, pc}
    ae94:	00080100 	.word	0x00080100
    ae98:	00019770 	.word	0x00019770

0000ae9c <system_interrupt_enable>:
{
    ae9c:	b580      	push	{r7, lr}
    ae9e:	b082      	sub	sp, #8
    aea0:	af00      	add	r7, sp, #0
    aea2:	0002      	movs	r2, r0
    aea4:	1dfb      	adds	r3, r7, #7
    aea6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    aea8:	4b06      	ldr	r3, [pc, #24]	; (aec4 <system_interrupt_enable+0x28>)
    aeaa:	1dfa      	adds	r2, r7, #7
    aeac:	7812      	ldrb	r2, [r2, #0]
    aeae:	0011      	movs	r1, r2
    aeb0:	221f      	movs	r2, #31
    aeb2:	400a      	ands	r2, r1
    aeb4:	2101      	movs	r1, #1
    aeb6:	4091      	lsls	r1, r2
    aeb8:	000a      	movs	r2, r1
    aeba:	601a      	str	r2, [r3, #0]
}
    aebc:	46c0      	nop			; (mov r8, r8)
    aebe:	46bd      	mov	sp, r7
    aec0:	b002      	add	sp, #8
    aec2:	bd80      	pop	{r7, pc}
    aec4:	e000e100 	.word	0xe000e100

0000aec8 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    aec8:	b580      	push	{r7, lr}
    aeca:	b082      	sub	sp, #8
    aecc:	af00      	add	r7, sp, #0
    aece:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    aed0:	4a04      	ldr	r2, [pc, #16]	; (aee4 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    aed2:	687b      	ldr	r3, [r7, #4]
    aed4:	18d3      	adds	r3, r2, r3
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	b25b      	sxtb	r3, r3
}
    aeda:	0018      	movs	r0, r3
    aedc:	46bd      	mov	sp, r7
    aede:	b002      	add	sp, #8
    aee0:	bd80      	pop	{r7, pc}
    aee2:	46c0      	nop			; (mov r8, r8)
    aee4:	20000004 	.word	0x20000004

0000aee8 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    aee8:	b580      	push	{r7, lr}
    aeea:	b084      	sub	sp, #16
    aeec:	af00      	add	r7, sp, #0
    aeee:	60f8      	str	r0, [r7, #12]
    aef0:	60b9      	str	r1, [r7, #8]
    aef2:	1dfb      	adds	r3, r7, #7
    aef4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    aef6:	1dfb      	adds	r3, r7, #7
    aef8:	781b      	ldrb	r3, [r3, #0]
    aefa:	68fa      	ldr	r2, [r7, #12]
    aefc:	009b      	lsls	r3, r3, #2
    aefe:	18d3      	adds	r3, r2, r3
    af00:	3304      	adds	r3, #4
    af02:	68ba      	ldr	r2, [r7, #8]
    af04:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    af06:	68fb      	ldr	r3, [r7, #12]
    af08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    af0a:	1dfb      	adds	r3, r7, #7
    af0c:	7819      	ldrb	r1, [r3, #0]
    af0e:	4b05      	ldr	r3, [pc, #20]	; (af24 <tcc_register_callback+0x3c>)
    af10:	0089      	lsls	r1, r1, #2
    af12:	58cb      	ldr	r3, [r1, r3]
    af14:	431a      	orrs	r2, r3
    af16:	68fb      	ldr	r3, [r7, #12]
    af18:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    af1a:	2300      	movs	r3, #0
}
    af1c:	0018      	movs	r0, r3
    af1e:	46bd      	mov	sp, r7
    af20:	b004      	add	sp, #16
    af22:	bd80      	pop	{r7, pc}
    af24:	00019778 	.word	0x00019778

0000af28 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    af28:	b580      	push	{r7, lr}
    af2a:	b082      	sub	sp, #8
    af2c:	af00      	add	r7, sp, #0
    af2e:	6078      	str	r0, [r7, #4]
    af30:	000a      	movs	r2, r1
    af32:	1cfb      	adds	r3, r7, #3
    af34:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    af36:	687b      	ldr	r3, [r7, #4]
    af38:	681b      	ldr	r3, [r3, #0]
    af3a:	0018      	movs	r0, r3
    af3c:	4b0f      	ldr	r3, [pc, #60]	; (af7c <tcc_enable_callback+0x54>)
    af3e:	4798      	blx	r3
    af40:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    af42:	0018      	movs	r0, r3
    af44:	4b0e      	ldr	r3, [pc, #56]	; (af80 <tcc_enable_callback+0x58>)
    af46:	4798      	blx	r3
    af48:	0003      	movs	r3, r0
    af4a:	0018      	movs	r0, r3
    af4c:	4b0d      	ldr	r3, [pc, #52]	; (af84 <tcc_enable_callback+0x5c>)
    af4e:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    af50:	687b      	ldr	r3, [r7, #4]
    af52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    af54:	1cfb      	adds	r3, r7, #3
    af56:	7819      	ldrb	r1, [r3, #0]
    af58:	4b0b      	ldr	r3, [pc, #44]	; (af88 <tcc_enable_callback+0x60>)
    af5a:	0089      	lsls	r1, r1, #2
    af5c:	58cb      	ldr	r3, [r1, r3]
    af5e:	431a      	orrs	r2, r3
    af60:	687b      	ldr	r3, [r7, #4]
    af62:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    af64:	687b      	ldr	r3, [r7, #4]
    af66:	681b      	ldr	r3, [r3, #0]
    af68:	1cfa      	adds	r2, r7, #3
    af6a:	7811      	ldrb	r1, [r2, #0]
    af6c:	4a06      	ldr	r2, [pc, #24]	; (af88 <tcc_enable_callback+0x60>)
    af6e:	0089      	lsls	r1, r1, #2
    af70:	588a      	ldr	r2, [r1, r2]
    af72:	629a      	str	r2, [r3, #40]	; 0x28
}
    af74:	46c0      	nop			; (mov r8, r8)
    af76:	46bd      	mov	sp, r7
    af78:	b002      	add	sp, #8
    af7a:	bd80      	pop	{r7, pc}
    af7c:	0000a439 	.word	0x0000a439
    af80:	0000aec9 	.word	0x0000aec9
    af84:	0000ae9d 	.word	0x0000ae9d
    af88:	00019778 	.word	0x00019778

0000af8c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    af8c:	b580      	push	{r7, lr}
    af8e:	af00      	add	r7, sp, #0
    af90:	2000      	movs	r0, #0
    af92:	4b02      	ldr	r3, [pc, #8]	; (af9c <TCC0_Handler+0x10>)
    af94:	4798      	blx	r3
    af96:	46c0      	nop			; (mov r8, r8)
    af98:	46bd      	mov	sp, r7
    af9a:	bd80      	pop	{r7, pc}
    af9c:	0000afc9 	.word	0x0000afc9

0000afa0 <TCC1_Handler>:
    afa0:	b580      	push	{r7, lr}
    afa2:	af00      	add	r7, sp, #0
    afa4:	2001      	movs	r0, #1
    afa6:	4b02      	ldr	r3, [pc, #8]	; (afb0 <TCC1_Handler+0x10>)
    afa8:	4798      	blx	r3
    afaa:	46c0      	nop			; (mov r8, r8)
    afac:	46bd      	mov	sp, r7
    afae:	bd80      	pop	{r7, pc}
    afb0:	0000afc9 	.word	0x0000afc9

0000afb4 <TCC2_Handler>:
    afb4:	b580      	push	{r7, lr}
    afb6:	af00      	add	r7, sp, #0
    afb8:	2002      	movs	r0, #2
    afba:	4b02      	ldr	r3, [pc, #8]	; (afc4 <TCC2_Handler+0x10>)
    afbc:	4798      	blx	r3
    afbe:	46c0      	nop			; (mov r8, r8)
    afc0:	46bd      	mov	sp, r7
    afc2:	bd80      	pop	{r7, pc}
    afc4:	0000afc9 	.word	0x0000afc9

0000afc8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    afc8:	b580      	push	{r7, lr}
    afca:	b086      	sub	sp, #24
    afcc:	af00      	add	r7, sp, #0
    afce:	0002      	movs	r2, r0
    afd0:	1dfb      	adds	r3, r7, #7
    afd2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    afd4:	1dfb      	adds	r3, r7, #7
    afd6:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    afd8:	4b18      	ldr	r3, [pc, #96]	; (b03c <_tcc_interrupt_handler+0x74>)
    afda:	0092      	lsls	r2, r2, #2
    afdc:	58d3      	ldr	r3, [r2, r3]
    afde:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    afe0:	693b      	ldr	r3, [r7, #16]
    afe2:	681b      	ldr	r3, [r3, #0]
    afe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    afe6:	693b      	ldr	r3, [r7, #16]
    afe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    afea:	401a      	ands	r2, r3
			module->enable_callback_mask);
    afec:	693b      	ldr	r3, [r7, #16]
    afee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    aff0:	4013      	ands	r3, r2
    aff2:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    aff4:	2300      	movs	r3, #0
    aff6:	617b      	str	r3, [r7, #20]
    aff8:	e019      	b.n	b02e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    affa:	4b11      	ldr	r3, [pc, #68]	; (b040 <_tcc_interrupt_handler+0x78>)
    affc:	697a      	ldr	r2, [r7, #20]
    affe:	0092      	lsls	r2, r2, #2
    b000:	58d3      	ldr	r3, [r2, r3]
    b002:	68fa      	ldr	r2, [r7, #12]
    b004:	4013      	ands	r3, r2
    b006:	d00f      	beq.n	b028 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    b008:	693a      	ldr	r2, [r7, #16]
    b00a:	697b      	ldr	r3, [r7, #20]
    b00c:	009b      	lsls	r3, r3, #2
    b00e:	18d3      	adds	r3, r2, r3
    b010:	3304      	adds	r3, #4
    b012:	681b      	ldr	r3, [r3, #0]
    b014:	693a      	ldr	r2, [r7, #16]
    b016:	0010      	movs	r0, r2
    b018:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    b01a:	693b      	ldr	r3, [r7, #16]
    b01c:	681b      	ldr	r3, [r3, #0]
    b01e:	4a08      	ldr	r2, [pc, #32]	; (b040 <_tcc_interrupt_handler+0x78>)
    b020:	6979      	ldr	r1, [r7, #20]
    b022:	0089      	lsls	r1, r1, #2
    b024:	588a      	ldr	r2, [r1, r2]
    b026:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    b028:	697b      	ldr	r3, [r7, #20]
    b02a:	3301      	adds	r3, #1
    b02c:	617b      	str	r3, [r7, #20]
    b02e:	697b      	ldr	r3, [r7, #20]
    b030:	2b0b      	cmp	r3, #11
    b032:	dde2      	ble.n	affa <_tcc_interrupt_handler+0x32>
		}
	}
}
    b034:	46c0      	nop			; (mov r8, r8)
    b036:	46bd      	mov	sp, r7
    b038:	b006      	add	sp, #24
    b03a:	bd80      	pop	{r7, pc}
    b03c:	20000720 	.word	0x20000720
    b040:	00019778 	.word	0x00019778

0000b044 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
    b044:	b580      	push	{r7, lr}
    b046:	b082      	sub	sp, #8
    b048:	af00      	add	r7, sp, #0
    b04a:	6078      	str	r0, [r7, #4]
	config->port = 80;
    b04c:	687b      	ldr	r3, [r7, #4]
    b04e:	2250      	movs	r2, #80	; 0x50
    b050:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
    b052:	687b      	ldr	r3, [r7, #4]
    b054:	2200      	movs	r2, #0
    b056:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
    b058:	687b      	ldr	r3, [r7, #4]
    b05a:	4a0b      	ldr	r2, [pc, #44]	; (b088 <http_client_get_config_defaults+0x44>)
    b05c:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
    b05e:	687b      	ldr	r3, [r7, #4]
    b060:	2200      	movs	r2, #0
    b062:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
    b064:	687b      	ldr	r3, [r7, #4]
    b066:	2200      	movs	r2, #0
    b068:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
    b06a:	687b      	ldr	r3, [r7, #4]
    b06c:	2280      	movs	r2, #128	; 0x80
    b06e:	0052      	lsls	r2, r2, #1
    b070:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    b072:	687b      	ldr	r3, [r7, #4]
    b074:	2252      	movs	r2, #82	; 0x52
    b076:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    b078:	687b      	ldr	r3, [r7, #4]
    b07a:	4a04      	ldr	r2, [pc, #16]	; (b08c <http_client_get_config_defaults+0x48>)
    b07c:	619a      	str	r2, [r3, #24]
}
    b07e:	46c0      	nop			; (mov r8, r8)
    b080:	46bd      	mov	sp, r7
    b082:	b002      	add	sp, #8
    b084:	bd80      	pop	{r7, pc}
    b086:	46c0      	nop			; (mov r8, r8)
    b088:	00004e20 	.word	0x00004e20
    b08c:	000197a8 	.word	0x000197a8

0000b090 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    b090:	b590      	push	{r4, r7, lr}
    b092:	b083      	sub	sp, #12
    b094:	af00      	add	r7, sp, #0
    b096:	6078      	str	r0, [r7, #4]
    b098:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    b09a:	687b      	ldr	r3, [r7, #4]
    b09c:	2b00      	cmp	r3, #0
    b09e:	d002      	beq.n	b0a6 <http_client_init+0x16>
    b0a0:	683b      	ldr	r3, [r7, #0]
    b0a2:	2b00      	cmp	r3, #0
    b0a4:	d102      	bne.n	b0ac <http_client_init+0x1c>
		return -EINVAL;
    b0a6:	2316      	movs	r3, #22
    b0a8:	425b      	negs	r3, r3
    b0aa:	e058      	b.n	b15e <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
    b0ac:	683b      	ldr	r3, [r7, #0]
    b0ae:	691b      	ldr	r3, [r3, #16]
    b0b0:	2b00      	cmp	r3, #0
    b0b2:	d102      	bne.n	b0ba <http_client_init+0x2a>
		return -EINVAL;
    b0b4:	2316      	movs	r3, #22
    b0b6:	425b      	negs	r3, r3
    b0b8:	e051      	b.n	b15e <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
    b0ba:	683b      	ldr	r3, [r7, #0]
    b0bc:	685b      	ldr	r3, [r3, #4]
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d102      	bne.n	b0c8 <http_client_init+0x38>
		return -EINVAL;
    b0c2:	2316      	movs	r3, #22
    b0c4:	425b      	negs	r3, r3
    b0c6:	e04a      	b.n	b15e <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    b0c8:	683b      	ldr	r3, [r7, #0]
    b0ca:	695b      	ldr	r3, [r3, #20]
    b0cc:	2b51      	cmp	r3, #81	; 0x51
    b0ce:	d802      	bhi.n	b0d6 <http_client_init+0x46>
		return -EINVAL;
    b0d0:	2316      	movs	r3, #22
    b0d2:	425b      	negs	r3, r3
    b0d4:	e043      	b.n	b15e <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
    b0d6:	687b      	ldr	r3, [r7, #4]
    b0d8:	22e8      	movs	r2, #232	; 0xe8
    b0da:	2100      	movs	r1, #0
    b0dc:	0018      	movs	r0, r3
    b0de:	4b22      	ldr	r3, [pc, #136]	; (b168 <http_client_init+0xd8>)
    b0e0:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	3350      	adds	r3, #80	; 0x50
    b0e6:	6839      	ldr	r1, [r7, #0]
    b0e8:	221c      	movs	r2, #28
    b0ea:	0018      	movs	r0, r3
    b0ec:	4b1f      	ldr	r3, [pc, #124]	; (b16c <http_client_init+0xdc>)
    b0ee:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    b0f0:	687b      	ldr	r3, [r7, #4]
    b0f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d115      	bne.n	b124 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    b0f8:	683b      	ldr	r3, [r7, #0]
    b0fa:	691b      	ldr	r3, [r3, #16]
    b0fc:	0018      	movs	r0, r3
    b0fe:	4b1c      	ldr	r3, [pc, #112]	; (b170 <http_client_init+0xe0>)
    b100:	4798      	blx	r3
    b102:	0003      	movs	r3, r0
    b104:	001a      	movs	r2, r3
    b106:	687b      	ldr	r3, [r7, #4]
    b108:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    b10a:	687b      	ldr	r3, [r7, #4]
    b10c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b10e:	2b00      	cmp	r3, #0
    b110:	d102      	bne.n	b118 <http_client_init+0x88>
			return -ENOMEM;
    b112:	230c      	movs	r3, #12
    b114:	425b      	negs	r3, r3
    b116:	e022      	b.n	b15e <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
    b118:	687b      	ldr	r3, [r7, #4]
    b11a:	2241      	movs	r2, #65	; 0x41
    b11c:	5c99      	ldrb	r1, [r3, r2]
    b11e:	2004      	movs	r0, #4
    b120:	4301      	orrs	r1, r0
    b122:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
    b124:	683b      	ldr	r3, [r7, #0]
    b126:	891b      	ldrh	r3, [r3, #8]
    b128:	2b00      	cmp	r3, #0
    b12a:	d010      	beq.n	b14e <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    b12c:	683b      	ldr	r3, [r7, #0]
    b12e:	6858      	ldr	r0, [r3, #4]
    b130:	687a      	ldr	r2, [r7, #4]
    b132:	4910      	ldr	r1, [pc, #64]	; (b174 <http_client_init+0xe4>)
    b134:	2300      	movs	r3, #0
    b136:	4c10      	ldr	r4, [pc, #64]	; (b178 <http_client_init+0xe8>)
    b138:	47a0      	blx	r4
    b13a:	0002      	movs	r2, r0
    b13c:	687b      	ldr	r3, [r7, #4]
    b13e:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
    b140:	687b      	ldr	r3, [r7, #4]
    b142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b144:	2b00      	cmp	r3, #0
    b146:	da02      	bge.n	b14e <http_client_init+0xbe>
			return -ENOSPC;
    b148:	231c      	movs	r3, #28
    b14a:	425b      	negs	r3, r3
    b14c:	e007      	b.n	b15e <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	2200      	movs	r2, #0
    b152:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    b154:	687b      	ldr	r3, [r7, #4]
    b156:	22d8      	movs	r2, #216	; 0xd8
    b158:	2100      	movs	r1, #0
    b15a:	5099      	str	r1, [r3, r2]

	return 0;
    b15c:	2300      	movs	r3, #0
}
    b15e:	0018      	movs	r0, r3
    b160:	46bd      	mov	sp, r7
    b162:	b003      	add	sp, #12
    b164:	bd90      	pop	{r4, r7, pc}
    b166:	46c0      	nop			; (mov r8, r8)
    b168:	0001252f 	.word	0x0001252f
    b16c:	000124f9 	.word	0x000124f9
    b170:	000124ad 	.word	0x000124ad
    b174:	0000b441 	.word	0x0000b441
    b178:	0000cb25 	.word	0x0000cb25

0000b17c <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
    b17c:	b580      	push	{r7, lr}
    b17e:	b082      	sub	sp, #8
    b180:	af00      	add	r7, sp, #0
    b182:	6078      	str	r0, [r7, #4]
    b184:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	2b00      	cmp	r3, #0
    b18a:	d102      	bne.n	b192 <http_client_register_callback+0x16>
		return -EINVAL;
    b18c:	2316      	movs	r3, #22
    b18e:	425b      	negs	r3, r3
    b190:	e003      	b.n	b19a <http_client_register_callback+0x1e>
	}

	module->cb = callback;
    b192:	687b      	ldr	r3, [r7, #4]
    b194:	683a      	ldr	r2, [r7, #0]
    b196:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
    b198:	2300      	movs	r3, #0
}
    b19a:	0018      	movs	r0, r3
    b19c:	46bd      	mov	sp, r7
    b19e:	b002      	add	sp, #8
    b1a0:	bd80      	pop	{r7, pc}
	...

0000b1a4 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
    b1a4:	b580      	push	{r7, lr}
    b1a6:	b082      	sub	sp, #8
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	6078      	str	r0, [r7, #4]
	switch (err) {
    b1ac:	687b      	ldr	r3, [r7, #4]
    b1ae:	330e      	adds	r3, #14
    b1b0:	2b0e      	cmp	r3, #14
    b1b2:	d825      	bhi.n	b200 <_hwerr_to_stderr+0x5c>
    b1b4:	009a      	lsls	r2, r3, #2
    b1b6:	4b18      	ldr	r3, [pc, #96]	; (b218 <_hwerr_to_stderr+0x74>)
    b1b8:	18d3      	adds	r3, r2, r3
    b1ba:	681b      	ldr	r3, [r3, #0]
    b1bc:	469f      	mov	pc, r3
		case 0:
			return -EIO;
    b1be:	2305      	movs	r3, #5
    b1c0:	425b      	negs	r3, r3
    b1c2:	e024      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    b1c4:	2302      	movs	r3, #2
    b1c6:	425b      	negs	r3, r3
    b1c8:	e021      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    b1ca:	2370      	movs	r3, #112	; 0x70
    b1cc:	425b      	negs	r3, r3
    b1ce:	e01e      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    b1d0:	230c      	movs	r3, #12
    b1d2:	425b      	negs	r3, r3
    b1d4:	e01b      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    b1d6:	2316      	movs	r3, #22
    b1d8:	425b      	negs	r3, r3
    b1da:	e018      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    b1dc:	230c      	movs	r3, #12
    b1de:	425b      	negs	r3, r3
    b1e0:	e015      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
    b1e2:	2305      	movs	r3, #5
    b1e4:	425b      	negs	r3, r3
    b1e6:	e012      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    b1e8:	2379      	movs	r3, #121	; 0x79
    b1ea:	425b      	negs	r3, r3
    b1ec:	e00f      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    b1ee:	2368      	movs	r3, #104	; 0x68
    b1f0:	425b      	negs	r3, r3
    b1f2:	e00c      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    b1f4:	230b      	movs	r3, #11
    b1f6:	425b      	negs	r3, r3
    b1f8:	e009      	b.n	b20e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    b1fa:	2310      	movs	r3, #16
    b1fc:	425b      	negs	r3, r3
    b1fe:	e006      	b.n	b20e <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
    b200:	687b      	ldr	r3, [r7, #4]
    b202:	2b00      	cmp	r3, #0
    b204:	da02      	bge.n	b20c <_hwerr_to_stderr+0x68>
				return -EIO;
    b206:	2305      	movs	r3, #5
    b208:	425b      	negs	r3, r3
    b20a:	e000      	b.n	b20e <_hwerr_to_stderr+0x6a>
			}
			return 0;
    b20c:	2300      	movs	r3, #0
	}
}
    b20e:	0018      	movs	r0, r3
    b210:	46bd      	mov	sp, r7
    b212:	b002      	add	sp, #8
    b214:	bd80      	pop	{r7, pc}
    b216:	46c0      	nop			; (mov r8, r8)
    b218:	000198e4 	.word	0x000198e4

0000b21c <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    b21c:	b580      	push	{r7, lr}
    b21e:	b08a      	sub	sp, #40	; 0x28
    b220:	af00      	add	r7, sp, #0
    b222:	603a      	str	r2, [r7, #0]
    b224:	1dfb      	adds	r3, r7, #7
    b226:	1c02      	adds	r2, r0, #0
    b228:	701a      	strb	r2, [r3, #0]
    b22a:	1dbb      	adds	r3, r7, #6
    b22c:	1c0a      	adds	r2, r1, #0
    b22e:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
    b230:	1dfb      	adds	r3, r7, #7
    b232:	2200      	movs	r2, #0
    b234:	569a      	ldrsb	r2, [r3, r2]
    b236:	4b4b      	ldr	r3, [pc, #300]	; (b364 <http_client_socket_event_handler+0x148>)
    b238:	0092      	lsls	r2, r2, #2
    b23a:	58d3      	ldr	r3, [r2, r3]
    b23c:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
    b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b240:	2b00      	cmp	r3, #0
    b242:	d100      	bne.n	b246 <http_client_socket_event_handler+0x2a>
    b244:	e08a      	b.n	b35c <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
    b246:	1dbb      	adds	r3, r7, #6
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	2b06      	cmp	r3, #6
    b24c:	d040      	beq.n	b2d0 <http_client_socket_event_handler+0xb4>
    b24e:	2b07      	cmp	r3, #7
    b250:	d060      	beq.n	b314 <http_client_socket_event_handler+0xf8>
    b252:	2b05      	cmp	r3, #5
    b254:	d000      	beq.n	b258 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
    b256:	e082      	b.n	b35e <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    b258:	683b      	ldr	r3, [r7, #0]
    b25a:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
    b25c:	6a3b      	ldr	r3, [r7, #32]
    b25e:	785b      	ldrb	r3, [r3, #1]
    b260:	b25b      	sxtb	r3, r3
    b262:	001a      	movs	r2, r3
    b264:	230c      	movs	r3, #12
    b266:	18fb      	adds	r3, r7, r3
    b268:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
    b26a:	6a3b      	ldr	r3, [r7, #32]
    b26c:	785b      	ldrb	r3, [r3, #1]
    b26e:	b25b      	sxtb	r3, r3
    b270:	2b00      	cmp	r3, #0
    b272:	da0c      	bge.n	b28e <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    b274:	6a3b      	ldr	r3, [r7, #32]
    b276:	785b      	ldrb	r3, [r3, #1]
    b278:	b25b      	sxtb	r3, r3
    b27a:	0018      	movs	r0, r3
    b27c:	4b3a      	ldr	r3, [pc, #232]	; (b368 <http_client_socket_event_handler+0x14c>)
    b27e:	4798      	blx	r3
    b280:	0002      	movs	r2, r0
    b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b284:	0011      	movs	r1, r2
    b286:	0018      	movs	r0, r3
    b288:	4b38      	ldr	r3, [pc, #224]	; (b36c <http_client_socket_event_handler+0x150>)
    b28a:	4798      	blx	r3
    	break;
    b28c:	e067      	b.n	b35e <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
    b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b292:	2b00      	cmp	r3, #0
    b294:	d006      	beq.n	b2a4 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b29a:	220c      	movs	r2, #12
    b29c:	18ba      	adds	r2, r7, r2
    b29e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b2a0:	2100      	movs	r1, #0
    b2a2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2a6:	2203      	movs	r2, #3
    b2a8:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2ac:	6d58      	ldr	r0, [r3, #84]	; 0x54
    b2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2b0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2b4:	2258      	movs	r2, #88	; 0x58
    b2b6:	5a9b      	ldrh	r3, [r3, r2]
    b2b8:	001a      	movs	r2, r3
    b2ba:	4b2d      	ldr	r3, [pc, #180]	; (b370 <http_client_socket_event_handler+0x154>)
    b2bc:	4798      	blx	r3
    		_http_client_recv_packet(module);
    b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2c0:	0018      	movs	r0, r3
    b2c2:	4b2c      	ldr	r3, [pc, #176]	; (b374 <http_client_socket_event_handler+0x158>)
    b2c4:	4798      	blx	r3
			_http_client_request(module);
    b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2c8:	0018      	movs	r0, r3
    b2ca:	4b2b      	ldr	r3, [pc, #172]	; (b378 <http_client_socket_event_handler+0x15c>)
    b2cc:	4798      	blx	r3
    	break;
    b2ce:	e046      	b.n	b35e <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
    b2d0:	683b      	ldr	r3, [r7, #0]
    b2d2:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
    b2d4:	69fb      	ldr	r3, [r7, #28]
    b2d6:	2204      	movs	r2, #4
    b2d8:	5e9b      	ldrsh	r3, [r3, r2]
    b2da:	2b00      	cmp	r3, #0
    b2dc:	dd09      	ble.n	b2f2 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    b2de:	69fb      	ldr	r3, [r7, #28]
    b2e0:	2204      	movs	r2, #4
    b2e2:	5e9b      	ldrsh	r3, [r3, r2]
    b2e4:	001a      	movs	r2, r3
    b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2e8:	0011      	movs	r1, r2
    b2ea:	0018      	movs	r0, r3
    b2ec:	4b23      	ldr	r3, [pc, #140]	; (b37c <http_client_socket_event_handler+0x160>)
    b2ee:	4798      	blx	r3
    b2f0:	e00b      	b.n	b30a <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    b2f2:	69fb      	ldr	r3, [r7, #28]
    b2f4:	2204      	movs	r2, #4
    b2f6:	5e9b      	ldrsh	r3, [r3, r2]
    b2f8:	0018      	movs	r0, r3
    b2fa:	4b1b      	ldr	r3, [pc, #108]	; (b368 <http_client_socket_event_handler+0x14c>)
    b2fc:	4798      	blx	r3
    b2fe:	0002      	movs	r2, r0
    b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b302:	0011      	movs	r1, r2
    b304:	0018      	movs	r0, r3
    b306:	4b19      	ldr	r3, [pc, #100]	; (b36c <http_client_socket_event_handler+0x150>)
    b308:	4798      	blx	r3
		_http_client_recv_packet(module);
    b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b30c:	0018      	movs	r0, r3
    b30e:	4b19      	ldr	r3, [pc, #100]	; (b374 <http_client_socket_event_handler+0x158>)
    b310:	4798      	blx	r3
		break;
    b312:	e024      	b.n	b35e <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
    b314:	231a      	movs	r3, #26
    b316:	18fb      	adds	r3, r7, r3
    b318:	683a      	ldr	r2, [r7, #0]
    b31a:	8812      	ldrh	r2, [r2, #0]
    b31c:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
    b31e:	231a      	movs	r3, #26
    b320:	18fb      	adds	r3, r7, r3
    b322:	2200      	movs	r2, #0
    b324:	5e9b      	ldrsh	r3, [r3, r2]
    b326:	2b00      	cmp	r3, #0
    b328:	da0d      	bge.n	b346 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    b32a:	231a      	movs	r3, #26
    b32c:	18fb      	adds	r3, r7, r3
    b32e:	2200      	movs	r2, #0
    b330:	5e9b      	ldrsh	r3, [r3, r2]
    b332:	0018      	movs	r0, r3
    b334:	4b0c      	ldr	r3, [pc, #48]	; (b368 <http_client_socket_event_handler+0x14c>)
    b336:	4798      	blx	r3
    b338:	0002      	movs	r2, r0
    b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b33c:	0011      	movs	r1, r2
    b33e:	0018      	movs	r0, r3
    b340:	4b0a      	ldr	r3, [pc, #40]	; (b36c <http_client_socket_event_handler+0x150>)
    b342:	4798      	blx	r3
    b344:	e003      	b.n	b34e <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
    b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b348:	0018      	movs	r0, r3
    b34a:	4b0b      	ldr	r3, [pc, #44]	; (b378 <http_client_socket_event_handler+0x15c>)
    b34c:	4798      	blx	r3
		module->sending = 0;
    b34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b350:	2241      	movs	r2, #65	; 0x41
    b352:	5c99      	ldrb	r1, [r3, r2]
    b354:	2001      	movs	r0, #1
    b356:	4381      	bics	r1, r0
    b358:	5499      	strb	r1, [r3, r2]
    	break;
    b35a:	e000      	b.n	b35e <http_client_socket_event_handler+0x142>
		return;
    b35c:	46c0      	nop			; (mov r8, r8)
	}

}
    b35e:	46bd      	mov	sp, r7
    b360:	b00a      	add	sp, #40	; 0x28
    b362:	bd80      	pop	{r7, pc}
    b364:	2000023c 	.word	0x2000023c
    b368:	0000b1a5 	.word	0x0000b1a5
    b36c:	0000b819 	.word	0x0000b819
    b370:	0000cbb5 	.word	0x0000cbb5
    b374:	0000c0a5 	.word	0x0000c0a5
    b378:	0000b96d 	.word	0x0000b96d
    b37c:	0000c109 	.word	0x0000c109

0000b380 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    b380:	b580      	push	{r7, lr}
    b382:	b088      	sub	sp, #32
    b384:	af00      	add	r7, sp, #0
    b386:	6078      	str	r0, [r7, #4]
    b388:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    b38a:	2300      	movs	r3, #0
    b38c:	61fb      	str	r3, [r7, #28]
    b38e:	e048      	b.n	b422 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
    b390:	4b27      	ldr	r3, [pc, #156]	; (b430 <http_client_socket_resolve_handler+0xb0>)
    b392:	69fa      	ldr	r2, [r7, #28]
    b394:	0092      	lsls	r2, r2, #2
    b396:	58d3      	ldr	r3, [r2, r3]
    b398:	2b00      	cmp	r3, #0
    b39a:	d03f      	beq.n	b41c <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
    b39c:	4b24      	ldr	r3, [pc, #144]	; (b430 <http_client_socket_resolve_handler+0xb0>)
    b39e:	69fa      	ldr	r2, [r7, #28]
    b3a0:	0092      	lsls	r2, r2, #2
    b3a2:	58d3      	ldr	r3, [r2, r3]
    b3a4:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    b3a6:	69bb      	ldr	r3, [r7, #24]
    b3a8:	1c5a      	adds	r2, r3, #1
    b3aa:	687b      	ldr	r3, [r7, #4]
    b3ac:	0011      	movs	r1, r2
    b3ae:	0018      	movs	r0, r3
    b3b0:	4b20      	ldr	r3, [pc, #128]	; (b434 <http_client_socket_resolve_handler+0xb4>)
    b3b2:	4798      	blx	r3
    b3b4:	1e03      	subs	r3, r0, #0
    b3b6:	d131      	bne.n	b41c <http_client_socket_resolve_handler+0x9c>
    b3b8:	69bb      	ldr	r3, [r7, #24]
    b3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b3bc:	2b01      	cmp	r3, #1
    b3be:	d12d      	bne.n	b41c <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    b3c0:	683b      	ldr	r3, [r7, #0]
    b3c2:	2b00      	cmp	r3, #0
    b3c4:	d107      	bne.n	b3d6 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    b3c6:	2376      	movs	r3, #118	; 0x76
    b3c8:	425a      	negs	r2, r3
    b3ca:	69bb      	ldr	r3, [r7, #24]
    b3cc:	0011      	movs	r1, r2
    b3ce:	0018      	movs	r0, r3
    b3d0:	4b19      	ldr	r3, [pc, #100]	; (b438 <http_client_socket_resolve_handler+0xb8>)
    b3d2:	4798      	blx	r3
					return;
    b3d4:	e028      	b.n	b428 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
    b3d6:	2308      	movs	r3, #8
    b3d8:	18fb      	adds	r3, r7, r3
    b3da:	2202      	movs	r2, #2
    b3dc:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    b3de:	69bb      	ldr	r3, [r7, #24]
    b3e0:	2250      	movs	r2, #80	; 0x50
    b3e2:	5a9b      	ldrh	r3, [r3, r2]
    b3e4:	021b      	lsls	r3, r3, #8
    b3e6:	b21a      	sxth	r2, r3
    b3e8:	69bb      	ldr	r3, [r7, #24]
    b3ea:	2150      	movs	r1, #80	; 0x50
    b3ec:	5a5b      	ldrh	r3, [r3, r1]
    b3ee:	0a1b      	lsrs	r3, r3, #8
    b3f0:	b29b      	uxth	r3, r3
    b3f2:	b21b      	sxth	r3, r3
    b3f4:	4313      	orrs	r3, r2
    b3f6:	b21b      	sxth	r3, r3
    b3f8:	b29a      	uxth	r2, r3
    b3fa:	2308      	movs	r3, #8
    b3fc:	18fb      	adds	r3, r7, r3
    b3fe:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
    b400:	2308      	movs	r3, #8
    b402:	18fb      	adds	r3, r7, r3
    b404:	683a      	ldr	r2, [r7, #0]
    b406:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    b408:	69bb      	ldr	r3, [r7, #24]
    b40a:	781b      	ldrb	r3, [r3, #0]
    b40c:	b25b      	sxtb	r3, r3
    b40e:	2208      	movs	r2, #8
    b410:	18b9      	adds	r1, r7, r2
    b412:	2210      	movs	r2, #16
    b414:	0018      	movs	r0, r3
    b416:	4b09      	ldr	r3, [pc, #36]	; (b43c <http_client_socket_resolve_handler+0xbc>)
    b418:	4798      	blx	r3
				return;
    b41a:	e005      	b.n	b428 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    b41c:	69fb      	ldr	r3, [r7, #28]
    b41e:	3301      	adds	r3, #1
    b420:	61fb      	str	r3, [r7, #28]
    b422:	69fb      	ldr	r3, [r7, #28]
    b424:	2b06      	cmp	r3, #6
    b426:	ddb3      	ble.n	b390 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
    b428:	46bd      	mov	sp, r7
    b42a:	b008      	add	sp, #32
    b42c:	bd80      	pop	{r7, pc}
    b42e:	46c0      	nop			; (mov r8, r8)
    b430:	2000023c 	.word	0x2000023c
    b434:	00013275 	.word	0x00013275
    b438:	0000b819 	.word	0x0000b819
    b43c:	0000812d 	.word	0x0000812d

0000b440 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    b440:	b580      	push	{r7, lr}
    b442:	b086      	sub	sp, #24
    b444:	af00      	add	r7, sp, #0
    b446:	60f8      	str	r0, [r7, #12]
    b448:	60b9      	str	r1, [r7, #8]
    b44a:	607a      	str	r2, [r7, #4]
    b44c:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
    b44e:	687b      	ldr	r3, [r7, #4]
    b450:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    b452:	697b      	ldr	r3, [r7, #20]
    b454:	2b00      	cmp	r3, #0
    b456:	d007      	beq.n	b468 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    b458:	233e      	movs	r3, #62	; 0x3e
    b45a:	425a      	negs	r2, r3
    b45c:	697b      	ldr	r3, [r7, #20]
    b45e:	0011      	movs	r1, r2
    b460:	0018      	movs	r0, r3
    b462:	4b03      	ldr	r3, [pc, #12]	; (b470 <http_client_timer_callback+0x30>)
    b464:	4798      	blx	r3
    b466:	e000      	b.n	b46a <http_client_timer_callback+0x2a>
		return;
    b468:	46c0      	nop			; (mov r8, r8)
}
    b46a:	46bd      	mov	sp, r7
    b46c:	b006      	add	sp, #24
    b46e:	bd80      	pop	{r7, pc}
    b470:	0000b819 	.word	0x0000b819

0000b474 <_is_ip>:

static int _is_ip(const char *host)
{
    b474:	b580      	push	{r7, lr}
    b476:	b084      	sub	sp, #16
    b478:	af00      	add	r7, sp, #0
    b47a:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
    b47c:	2300      	movs	r3, #0
    b47e:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
    b480:	e03a      	b.n	b4f8 <_is_ip+0x84>
		ch = *host++;
    b482:	687b      	ldr	r3, [r7, #4]
    b484:	1c5a      	adds	r2, r3, #1
    b486:	607a      	str	r2, [r7, #4]
    b488:	220b      	movs	r2, #11
    b48a:	18ba      	adds	r2, r7, r2
    b48c:	781b      	ldrb	r3, [r3, #0]
    b48e:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    b490:	230b      	movs	r3, #11
    b492:	18fb      	adds	r3, r7, r3
    b494:	781b      	ldrb	r3, [r3, #0]
    b496:	2b60      	cmp	r3, #96	; 0x60
    b498:	d904      	bls.n	b4a4 <_is_ip+0x30>
    b49a:	230b      	movs	r3, #11
    b49c:	18fb      	adds	r3, r7, r3
    b49e:	781b      	ldrb	r3, [r3, #0]
    b4a0:	2b66      	cmp	r3, #102	; 0x66
    b4a2:	d913      	bls.n	b4cc <_is_ip+0x58>
    b4a4:	230b      	movs	r3, #11
    b4a6:	18fb      	adds	r3, r7, r3
    b4a8:	781b      	ldrb	r3, [r3, #0]
    b4aa:	2b40      	cmp	r3, #64	; 0x40
    b4ac:	d904      	bls.n	b4b8 <_is_ip+0x44>
    b4ae:	230b      	movs	r3, #11
    b4b0:	18fb      	adds	r3, r7, r3
    b4b2:	781b      	ldrb	r3, [r3, #0]
    b4b4:	2b46      	cmp	r3, #70	; 0x46
    b4b6:	d909      	bls.n	b4cc <_is_ip+0x58>
    b4b8:	230b      	movs	r3, #11
    b4ba:	18fb      	adds	r3, r7, r3
    b4bc:	781b      	ldrb	r3, [r3, #0]
    b4be:	2b3a      	cmp	r3, #58	; 0x3a
    b4c0:	d004      	beq.n	b4cc <_is_ip+0x58>
    b4c2:	230b      	movs	r3, #11
    b4c4:	18fb      	adds	r3, r7, r3
    b4c6:	781b      	ldrb	r3, [r3, #0]
    b4c8:	2b2f      	cmp	r3, #47	; 0x2f
    b4ca:	d102      	bne.n	b4d2 <_is_ip+0x5e>
			isv6 = 1;
    b4cc:	2301      	movs	r3, #1
    b4ce:	60fb      	str	r3, [r7, #12]
    b4d0:	e012      	b.n	b4f8 <_is_ip+0x84>
		} else if (ch == '.') {
    b4d2:	230b      	movs	r3, #11
    b4d4:	18fb      	adds	r3, r7, r3
    b4d6:	781b      	ldrb	r3, [r3, #0]
    b4d8:	2b2e      	cmp	r3, #46	; 0x2e
    b4da:	d104      	bne.n	b4e6 <_is_ip+0x72>
			if (isv6) {
    b4dc:	68fb      	ldr	r3, [r7, #12]
    b4de:	2b00      	cmp	r3, #0
    b4e0:	d00a      	beq.n	b4f8 <_is_ip+0x84>
				return 0;
    b4e2:	2300      	movs	r3, #0
    b4e4:	e00d      	b.n	b502 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
    b4e6:	230b      	movs	r3, #11
    b4e8:	18fb      	adds	r3, r7, r3
    b4ea:	781b      	ldrb	r3, [r3, #0]
    b4ec:	2230      	movs	r2, #48	; 0x30
    b4ee:	4013      	ands	r3, r2
    b4f0:	2b30      	cmp	r3, #48	; 0x30
    b4f2:	d001      	beq.n	b4f8 <_is_ip+0x84>
			return 0;
    b4f4:	2300      	movs	r3, #0
    b4f6:	e004      	b.n	b502 <_is_ip+0x8e>
	while (*host != '\0') {
    b4f8:	687b      	ldr	r3, [r7, #4]
    b4fa:	781b      	ldrb	r3, [r3, #0]
    b4fc:	2b00      	cmp	r3, #0
    b4fe:	d1c0      	bne.n	b482 <_is_ip+0xe>
		}
	}
	return 1;
    b500:	2301      	movs	r3, #1
}
    b502:	0018      	movs	r0, r3
    b504:	46bd      	mov	sp, r7
    b506:	b004      	add	sp, #16
    b508:	bd80      	pop	{r7, pc}
	...

0000b50c <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    b50c:	b5b0      	push	{r4, r5, r7, lr}
    b50e:	b08e      	sub	sp, #56	; 0x38
    b510:	af00      	add	r7, sp, #0
    b512:	60f8      	str	r0, [r7, #12]
    b514:	60b9      	str	r1, [r7, #8]
    b516:	603b      	str	r3, [r7, #0]
    b518:	1dfb      	adds	r3, r7, #7
    b51a:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
    b51c:	2337      	movs	r3, #55	; 0x37
    b51e:	18fb      	adds	r3, r7, r3
    b520:	2200      	movs	r2, #0
    b522:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
    b524:	2300      	movs	r3, #0
    b526:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
    b528:	2300      	movs	r3, #0
    b52a:	633b      	str	r3, [r7, #48]	; 0x30
    b52c:	2300      	movs	r3, #0
    b52e:	62fb      	str	r3, [r7, #44]	; 0x2c
    b530:	2300      	movs	r3, #0
    b532:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
    b534:	68fb      	ldr	r3, [r7, #12]
    b536:	2b00      	cmp	r3, #0
    b538:	d102      	bne.n	b540 <http_client_send_request+0x34>
		return -EINVAL;
    b53a:	2316      	movs	r3, #22
    b53c:	425b      	negs	r3, r3
    b53e:	e145      	b.n	b7cc <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    b540:	68fb      	ldr	r3, [r7, #12]
    b542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b544:	2b02      	cmp	r3, #2
    b546:	d902      	bls.n	b54e <http_client_send_request+0x42>
		return -EBUSY;
    b548:	2310      	movs	r3, #16
    b54a:	425b      	negs	r3, r3
    b54c:	e13e      	b.n	b7cc <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    b54e:	49a1      	ldr	r1, [pc, #644]	; (b7d4 <http_client_send_request+0x2c8>)
    b550:	68bb      	ldr	r3, [r7, #8]
    b552:	2207      	movs	r2, #7
    b554:	0018      	movs	r0, r3
    b556:	4ba0      	ldr	r3, [pc, #640]	; (b7d8 <http_client_send_request+0x2cc>)
    b558:	4798      	blx	r3
    b55a:	1e03      	subs	r3, r0, #0
    b55c:	d102      	bne.n	b564 <http_client_send_request+0x58>
		i = 7;
    b55e:	2307      	movs	r3, #7
    b560:	633b      	str	r3, [r7, #48]	; 0x30
    b562:	e009      	b.n	b578 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
    b564:	499d      	ldr	r1, [pc, #628]	; (b7dc <http_client_send_request+0x2d0>)
    b566:	68bb      	ldr	r3, [r7, #8]
    b568:	2208      	movs	r2, #8
    b56a:	0018      	movs	r0, r3
    b56c:	4b9a      	ldr	r3, [pc, #616]	; (b7d8 <http_client_send_request+0x2cc>)
    b56e:	4798      	blx	r3
    b570:	1e03      	subs	r3, r0, #0
    b572:	d101      	bne.n	b578 <http_client_send_request+0x6c>
		i = 8;
    b574:	2308      	movs	r3, #8
    b576:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    b578:	68fb      	ldr	r3, [r7, #12]
    b57a:	1c5c      	adds	r4, r3, #1
    b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b57e:	68ba      	ldr	r2, [r7, #8]
    b580:	18d5      	adds	r5, r2, r3
    b582:	68fb      	ldr	r3, [r7, #12]
    b584:	3301      	adds	r3, #1
    b586:	0018      	movs	r0, r3
    b588:	4b95      	ldr	r3, [pc, #596]	; (b7e0 <http_client_send_request+0x2d4>)
    b58a:	4798      	blx	r3
    b58c:	0003      	movs	r3, r0
    b58e:	001a      	movs	r2, r3
    b590:	0029      	movs	r1, r5
    b592:	0020      	movs	r0, r4
    b594:	4b90      	ldr	r3, [pc, #576]	; (b7d8 <http_client_send_request+0x2cc>)
    b596:	4798      	blx	r3
    b598:	0003      	movs	r3, r0
    b59a:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    b59c:	e00d      	b.n	b5ba <http_client_send_request+0xae>
		module->host[j++] = url[i];
    b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5a0:	1c5a      	adds	r2, r3, #1
    b5a2:	62fa      	str	r2, [r7, #44]	; 0x2c
    b5a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b5a6:	68b9      	ldr	r1, [r7, #8]
    b5a8:	188a      	adds	r2, r1, r2
    b5aa:	7811      	ldrb	r1, [r2, #0]
    b5ac:	68fa      	ldr	r2, [r7, #12]
    b5ae:	18d3      	adds	r3, r2, r3
    b5b0:	1c0a      	adds	r2, r1, #0
    b5b2:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    b5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5b6:	3301      	adds	r3, #1
    b5b8:	633b      	str	r3, [r7, #48]	; 0x30
    b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5bc:	68ba      	ldr	r2, [r7, #8]
    b5be:	18d3      	adds	r3, r2, r3
    b5c0:	781b      	ldrb	r3, [r3, #0]
    b5c2:	2b00      	cmp	r3, #0
    b5c4:	d005      	beq.n	b5d2 <http_client_send_request+0xc6>
    b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5c8:	68ba      	ldr	r2, [r7, #8]
    b5ca:	18d3      	adds	r3, r2, r3
    b5cc:	781b      	ldrb	r3, [r3, #0]
    b5ce:	2b2f      	cmp	r3, #47	; 0x2f
    b5d0:	d1e5      	bne.n	b59e <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
    b5d2:	68fa      	ldr	r2, [r7, #12]
    b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5d6:	18d3      	adds	r3, r2, r3
    b5d8:	3301      	adds	r3, #1
    b5da:	2200      	movs	r2, #0
    b5dc:	701a      	strb	r2, [r3, #0]
	uri = url + i;
    b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5e0:	68ba      	ldr	r2, [r7, #8]
    b5e2:	18d3      	adds	r3, r2, r3
    b5e4:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    b5e6:	68fb      	ldr	r3, [r7, #12]
    b5e8:	3301      	adds	r3, #1
    b5ea:	781b      	ldrb	r3, [r3, #0]
    b5ec:	2b00      	cmp	r3, #0
    b5ee:	d102      	bne.n	b5f6 <http_client_send_request+0xea>
		return -EINVAL;
    b5f0:	2316      	movs	r3, #22
    b5f2:	425b      	negs	r3, r3
    b5f4:	e0ea      	b.n	b7cc <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b5f8:	0018      	movs	r0, r3
    b5fa:	4b79      	ldr	r3, [pc, #484]	; (b7e0 <http_client_send_request+0x2d4>)
    b5fc:	4798      	blx	r3
    b5fe:	0003      	movs	r3, r0
    b600:	2b3f      	cmp	r3, #63	; 0x3f
    b602:	d902      	bls.n	b60a <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
    b604:	235b      	movs	r3, #91	; 0x5b
    b606:	425b      	negs	r3, r3
    b608:	e0e0      	b.n	b7cc <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
    b60a:	68fb      	ldr	r3, [r7, #12]
    b60c:	22d4      	movs	r2, #212	; 0xd4
    b60e:	589b      	ldr	r3, [r3, r2]
    b610:	2b00      	cmp	r3, #0
    b612:	d005      	beq.n	b620 <http_client_send_request+0x114>
		free(module->req.ext_header);
    b614:	68fb      	ldr	r3, [r7, #12]
    b616:	22d4      	movs	r2, #212	; 0xd4
    b618:	589b      	ldr	r3, [r3, r2]
    b61a:	0018      	movs	r0, r3
    b61c:	4b71      	ldr	r3, [pc, #452]	; (b7e4 <http_client_send_request+0x2d8>)
    b61e:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    b620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b622:	2b00      	cmp	r3, #0
    b624:	d010      	beq.n	b648 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
    b626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b628:	0018      	movs	r0, r3
    b62a:	4b6f      	ldr	r3, [pc, #444]	; (b7e8 <http_client_send_request+0x2dc>)
    b62c:	4798      	blx	r3
    b62e:	0003      	movs	r3, r0
    b630:	0019      	movs	r1, r3
    b632:	68fb      	ldr	r3, [r7, #12]
    b634:	22d4      	movs	r2, #212	; 0xd4
    b636:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
    b638:	68fb      	ldr	r3, [r7, #12]
    b63a:	22d4      	movs	r2, #212	; 0xd4
    b63c:	589b      	ldr	r3, [r3, r2]
    b63e:	2b00      	cmp	r3, #0
    b640:	d106      	bne.n	b650 <http_client_send_request+0x144>
			return -ENOMEM;
    b642:	230c      	movs	r3, #12
    b644:	425b      	negs	r3, r3
    b646:	e0c1      	b.n	b7cc <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
    b648:	68fb      	ldr	r3, [r7, #12]
    b64a:	22d4      	movs	r2, #212	; 0xd4
    b64c:	2100      	movs	r1, #0
    b64e:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
    b650:	68fb      	ldr	r3, [r7, #12]
    b652:	2241      	movs	r2, #65	; 0x41
    b654:	5c99      	ldrb	r1, [r3, r2]
    b656:	2001      	movs	r0, #1
    b658:	4381      	bics	r1, r0
    b65a:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
    b65c:	68fb      	ldr	r3, [r7, #12]
    b65e:	2200      	movs	r2, #0
    b660:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
    b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b664:	781b      	ldrb	r3, [r3, #0]
    b666:	2b2f      	cmp	r3, #47	; 0x2f
    b668:	d107      	bne.n	b67a <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
    b66a:	68fb      	ldr	r3, [r7, #12]
    b66c:	3370      	adds	r3, #112	; 0x70
    b66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b670:	0011      	movs	r1, r2
    b672:	0018      	movs	r0, r3
    b674:	4b5d      	ldr	r3, [pc, #372]	; (b7ec <http_client_send_request+0x2e0>)
    b676:	4798      	blx	r3
    b678:	e00f      	b.n	b69a <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
    b67a:	68fb      	ldr	r3, [r7, #12]
    b67c:	2270      	movs	r2, #112	; 0x70
    b67e:	212f      	movs	r1, #47	; 0x2f
    b680:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
    b682:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b684:	781b      	ldrb	r3, [r3, #0]
    b686:	2b00      	cmp	r3, #0
    b688:	d007      	beq.n	b69a <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
    b68a:	68fb      	ldr	r3, [r7, #12]
    b68c:	3370      	adds	r3, #112	; 0x70
    b68e:	3301      	adds	r3, #1
    b690:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b692:	0011      	movs	r1, r2
    b694:	0018      	movs	r0, r3
    b696:	4b55      	ldr	r3, [pc, #340]	; (b7ec <http_client_send_request+0x2e0>)
    b698:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    b69a:	683b      	ldr	r3, [r7, #0]
    b69c:	2b00      	cmp	r3, #0
    b69e:	d007      	beq.n	b6b0 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    b6a0:	68fb      	ldr	r3, [r7, #12]
    b6a2:	33b0      	adds	r3, #176	; 0xb0
    b6a4:	6839      	ldr	r1, [r7, #0]
    b6a6:	2218      	movs	r2, #24
    b6a8:	0018      	movs	r0, r3
    b6aa:	4b51      	ldr	r3, [pc, #324]	; (b7f0 <http_client_send_request+0x2e4>)
    b6ac:	4798      	blx	r3
    b6ae:	e006      	b.n	b6be <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    b6b0:	68fb      	ldr	r3, [r7, #12]
    b6b2:	33b0      	adds	r3, #176	; 0xb0
    b6b4:	2218      	movs	r2, #24
    b6b6:	2100      	movs	r1, #0
    b6b8:	0018      	movs	r0, r3
    b6ba:	4b4e      	ldr	r3, [pc, #312]	; (b7f4 <http_client_send_request+0x2e8>)
    b6bc:	4798      	blx	r3
	}

	module->req.method = method;
    b6be:	68fb      	ldr	r3, [r7, #12]
    b6c0:	1dfa      	adds	r2, r7, #7
    b6c2:	21c8      	movs	r1, #200	; 0xc8
    b6c4:	7812      	ldrb	r2, [r2, #0]
    b6c6:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
    b6c8:	68fb      	ldr	r3, [r7, #12]
    b6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b6cc:	2b01      	cmp	r3, #1
    b6ce:	d003      	beq.n	b6d8 <http_client_send_request+0x1cc>
    b6d0:	d316      	bcc.n	b700 <http_client_send_request+0x1f4>
    b6d2:	2b02      	cmp	r3, #2
    b6d4:	d004      	beq.n	b6e0 <http_client_send_request+0x1d4>
    b6d6:	e074      	b.n	b7c2 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b6da:	2b00      	cmp	r3, #0
    b6dc:	d100      	bne.n	b6e0 <http_client_send_request+0x1d4>
    b6de:	e073      	b.n	b7c8 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b6e2:	2b00      	cmp	r3, #0
    b6e4:	d107      	bne.n	b6f6 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
    b6e6:	68fb      	ldr	r3, [r7, #12]
    b6e8:	2203      	movs	r2, #3
    b6ea:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    b6ec:	68fb      	ldr	r3, [r7, #12]
    b6ee:	0018      	movs	r0, r3
    b6f0:	4b41      	ldr	r3, [pc, #260]	; (b7f8 <http_client_send_request+0x2ec>)
    b6f2:	4798      	blx	r3
			break;
    b6f4:	e069      	b.n	b7ca <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    b6f6:	68fb      	ldr	r3, [r7, #12]
    b6f8:	2100      	movs	r1, #0
    b6fa:	0018      	movs	r0, r3
    b6fc:	4b3f      	ldr	r3, [pc, #252]	; (b7fc <http_client_send_request+0x2f0>)
    b6fe:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    b700:	68fb      	ldr	r3, [r7, #12]
    b702:	2252      	movs	r2, #82	; 0x52
    b704:	5c9b      	ldrb	r3, [r3, r2]
    b706:	2b00      	cmp	r3, #0
    b708:	d007      	beq.n	b71a <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
    b70a:	2337      	movs	r3, #55	; 0x37
    b70c:	18fb      	adds	r3, r7, r3
    b70e:	2237      	movs	r2, #55	; 0x37
    b710:	18ba      	adds	r2, r7, r2
    b712:	7812      	ldrb	r2, [r2, #0]
    b714:	2101      	movs	r1, #1
    b716:	430a      	orrs	r2, r1
    b718:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    b71a:	2337      	movs	r3, #55	; 0x37
    b71c:	18fb      	adds	r3, r7, r3
    b71e:	781b      	ldrb	r3, [r3, #0]
    b720:	001a      	movs	r2, r3
    b722:	2101      	movs	r1, #1
    b724:	2002      	movs	r0, #2
    b726:	4b36      	ldr	r3, [pc, #216]	; (b800 <http_client_send_request+0x2f4>)
    b728:	4798      	blx	r3
    b72a:	0003      	movs	r3, r0
    b72c:	001a      	movs	r2, r3
    b72e:	68fb      	ldr	r3, [r7, #12]
    b730:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
    b732:	68fb      	ldr	r3, [r7, #12]
    b734:	781b      	ldrb	r3, [r3, #0]
    b736:	b25b      	sxtb	r3, r3
    b738:	2b00      	cmp	r3, #0
    b73a:	db3f      	blt.n	b7bc <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
    b73c:	68fb      	ldr	r3, [r7, #12]
    b73e:	781b      	ldrb	r3, [r3, #0]
    b740:	b25b      	sxtb	r3, r3
    b742:	001a      	movs	r2, r3
    b744:	4b2f      	ldr	r3, [pc, #188]	; (b804 <http_client_send_request+0x2f8>)
    b746:	0092      	lsls	r2, r2, #2
    b748:	68f9      	ldr	r1, [r7, #12]
    b74a:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
    b74c:	68fb      	ldr	r3, [r7, #12]
    b74e:	3301      	adds	r3, #1
    b750:	0018      	movs	r0, r3
    b752:	4b2d      	ldr	r3, [pc, #180]	; (b808 <http_client_send_request+0x2fc>)
    b754:	4798      	blx	r3
    b756:	1e03      	subs	r3, r0, #0
    b758:	d027      	beq.n	b7aa <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
    b75a:	2314      	movs	r3, #20
    b75c:	18fb      	adds	r3, r7, r3
    b75e:	2202      	movs	r2, #2
    b760:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    b762:	68fb      	ldr	r3, [r7, #12]
    b764:	2250      	movs	r2, #80	; 0x50
    b766:	5a9b      	ldrh	r3, [r3, r2]
    b768:	021b      	lsls	r3, r3, #8
    b76a:	b21a      	sxth	r2, r3
    b76c:	68fb      	ldr	r3, [r7, #12]
    b76e:	2150      	movs	r1, #80	; 0x50
    b770:	5a5b      	ldrh	r3, [r3, r1]
    b772:	0a1b      	lsrs	r3, r3, #8
    b774:	b29b      	uxth	r3, r3
    b776:	b21b      	sxth	r3, r3
    b778:	4313      	orrs	r3, r2
    b77a:	b21b      	sxth	r3, r3
    b77c:	b29a      	uxth	r2, r3
    b77e:	2314      	movs	r3, #20
    b780:	18fb      	adds	r3, r7, r3
    b782:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    b784:	68fb      	ldr	r3, [r7, #12]
    b786:	3301      	adds	r3, #1
    b788:	0018      	movs	r0, r3
    b78a:	4b20      	ldr	r3, [pc, #128]	; (b80c <http_client_send_request+0x300>)
    b78c:	4798      	blx	r3
    b78e:	0002      	movs	r2, r0
    b790:	2314      	movs	r3, #20
    b792:	18fb      	adds	r3, r7, r3
    b794:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    b796:	68fb      	ldr	r3, [r7, #12]
    b798:	781b      	ldrb	r3, [r3, #0]
    b79a:	b25b      	sxtb	r3, r3
    b79c:	2214      	movs	r2, #20
    b79e:	18b9      	adds	r1, r7, r2
    b7a0:	2210      	movs	r2, #16
    b7a2:	0018      	movs	r0, r3
    b7a4:	4b1a      	ldr	r3, [pc, #104]	; (b810 <http_client_send_request+0x304>)
    b7a6:	4798      	blx	r3
    b7a8:	e004      	b.n	b7b4 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
    b7aa:	68fb      	ldr	r3, [r7, #12]
    b7ac:	3301      	adds	r3, #1
    b7ae:	0018      	movs	r0, r3
    b7b0:	4b18      	ldr	r3, [pc, #96]	; (b814 <http_client_send_request+0x308>)
    b7b2:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    b7b4:	68fb      	ldr	r3, [r7, #12]
    b7b6:	2201      	movs	r2, #1
    b7b8:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
    b7ba:	e006      	b.n	b7ca <http_client_send_request+0x2be>
			return -ENOSPC;
    b7bc:	231c      	movs	r3, #28
    b7be:	425b      	negs	r3, r3
    b7c0:	e004      	b.n	b7cc <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    b7c2:	230b      	movs	r3, #11
    b7c4:	425b      	negs	r3, r3
    b7c6:	e001      	b.n	b7cc <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
    b7c8:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
    b7ca:	2300      	movs	r3, #0
}
    b7cc:	0018      	movs	r0, r3
    b7ce:	46bd      	mov	sp, r7
    b7d0:	b00e      	add	sp, #56	; 0x38
    b7d2:	bdb0      	pop	{r4, r5, r7, pc}
    b7d4:	000197b4 	.word	0x000197b4
    b7d8:	000132e1 	.word	0x000132e1
    b7dc:	000197bc 	.word	0x000197bc
    b7e0:	000132d3 	.word	0x000132d3
    b7e4:	000124c1 	.word	0x000124c1
    b7e8:	00013299 	.word	0x00013299
    b7ec:	00013289 	.word	0x00013289
    b7f0:	000124f9 	.word	0x000124f9
    b7f4:	0001252f 	.word	0x0001252f
    b7f8:	0000b96d 	.word	0x0000b96d
    b7fc:	0000b819 	.word	0x0000b819
    b800:	00007f1d 	.word	0x00007f1d
    b804:	2000023c 	.word	0x2000023c
    b808:	0000b475 	.word	0x0000b475
    b80c:	00008661 	.word	0x00008661
    b810:	0000812d 	.word	0x0000812d
    b814:	00008769 	.word	0x00008769

0000b818 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    b818:	b580      	push	{r7, lr}
    b81a:	b086      	sub	sp, #24
    b81c:	af00      	add	r7, sp, #0
    b81e:	6078      	str	r0, [r7, #4]
    b820:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
    b822:	687b      	ldr	r3, [r7, #4]
    b824:	22c0      	movs	r2, #192	; 0xc0
    b826:	589b      	ldr	r3, [r3, r2]
    b828:	2b00      	cmp	r3, #0
    b82a:	d007      	beq.n	b83c <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
    b82c:	687b      	ldr	r3, [r7, #4]
    b82e:	22c0      	movs	r2, #192	; 0xc0
    b830:	589b      	ldr	r3, [r3, r2]
    b832:	687a      	ldr	r2, [r7, #4]
    b834:	21c4      	movs	r1, #196	; 0xc4
    b836:	5852      	ldr	r2, [r2, r1]
    b838:	0010      	movs	r0, r2
    b83a:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    b83c:	687b      	ldr	r3, [r7, #4]
    b83e:	33b0      	adds	r3, #176	; 0xb0
    b840:	2218      	movs	r2, #24
    b842:	2100      	movs	r1, #0
    b844:	0018      	movs	r0, r3
    b846:	4b24      	ldr	r3, [pc, #144]	; (b8d8 <_http_client_clear_conn+0xc0>)
    b848:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    b84a:	687b      	ldr	r3, [r7, #4]
    b84c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b84e:	2b00      	cmp	r3, #0
    b850:	d005      	beq.n	b85e <_http_client_clear_conn+0x46>
		close(module->sock);
    b852:	687b      	ldr	r3, [r7, #4]
    b854:	781b      	ldrb	r3, [r3, #0]
    b856:	b25b      	sxtb	r3, r3
    b858:	0018      	movs	r0, r3
    b85a:	4b20      	ldr	r3, [pc, #128]	; (b8dc <_http_client_clear_conn+0xc4>)
    b85c:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    b85e:	687b      	ldr	r3, [r7, #4]
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	b25b      	sxtb	r3, r3
    b864:	001a      	movs	r2, r3
    b866:	4b1e      	ldr	r3, [pc, #120]	; (b8e0 <_http_client_clear_conn+0xc8>)
    b868:	0092      	lsls	r2, r2, #2
    b86a:	2100      	movs	r1, #0
    b86c:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
    b86e:	687b      	ldr	r3, [r7, #4]
    b870:	336c      	adds	r3, #108	; 0x6c
    b872:	226c      	movs	r2, #108	; 0x6c
    b874:	2100      	movs	r1, #0
    b876:	0018      	movs	r0, r3
    b878:	4b17      	ldr	r3, [pc, #92]	; (b8d8 <_http_client_clear_conn+0xc0>)
    b87a:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    b87c:	687b      	ldr	r3, [r7, #4]
    b87e:	33d8      	adds	r3, #216	; 0xd8
    b880:	2210      	movs	r2, #16
    b882:	2100      	movs	r1, #0
    b884:	0018      	movs	r0, r3
    b886:	4b14      	ldr	r3, [pc, #80]	; (b8d8 <_http_client_clear_conn+0xc0>)
    b888:	4798      	blx	r3
	module->req.state = STATE_INIT;
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	2200      	movs	r2, #0
    b88e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    b890:	687b      	ldr	r3, [r7, #4]
    b892:	22d8      	movs	r2, #216	; 0xd8
    b894:	2100      	movs	r1, #0
    b896:	5099      	str	r1, [r3, r2]

	module->sending = 0;
    b898:	687b      	ldr	r3, [r7, #4]
    b89a:	2241      	movs	r2, #65	; 0x41
    b89c:	5c99      	ldrb	r1, [r3, r2]
    b89e:	2001      	movs	r0, #1
    b8a0:	4381      	bics	r1, r0
    b8a2:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
    b8a4:	687b      	ldr	r3, [r7, #4]
    b8a6:	2241      	movs	r2, #65	; 0x41
    b8a8:	5c99      	ldrb	r1, [r3, r2]
    b8aa:	2002      	movs	r0, #2
    b8ac:	4381      	bics	r1, r0
    b8ae:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
    b8b0:	230c      	movs	r3, #12
    b8b2:	18fb      	adds	r3, r7, r3
    b8b4:	683a      	ldr	r2, [r7, #0]
    b8b6:	601a      	str	r2, [r3, #0]
	if (module->cb) {
    b8b8:	687b      	ldr	r3, [r7, #4]
    b8ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b8bc:	2b00      	cmp	r3, #0
    b8be:	d006      	beq.n	b8ce <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    b8c0:	687b      	ldr	r3, [r7, #4]
    b8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b8c4:	220c      	movs	r2, #12
    b8c6:	18ba      	adds	r2, r7, r2
    b8c8:	6878      	ldr	r0, [r7, #4]
    b8ca:	2104      	movs	r1, #4
    b8cc:	4798      	blx	r3
	}
}
    b8ce:	46c0      	nop			; (mov r8, r8)
    b8d0:	46bd      	mov	sp, r7
    b8d2:	b006      	add	sp, #24
    b8d4:	bd80      	pop	{r7, pc}
    b8d6:	46c0      	nop			; (mov r8, r8)
    b8d8:	0001252f 	.word	0x0001252f
    b8dc:	00008525 	.word	0x00008525
    b8e0:	2000023c 	.word	0x2000023c

0000b8e4 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    b8e4:	b590      	push	{r4, r7, lr}
    b8e6:	b087      	sub	sp, #28
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	60f8      	str	r0, [r7, #12]
    b8ec:	60b9      	str	r1, [r7, #8]
    b8ee:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
    b8f0:	68fb      	ldr	r3, [r7, #12]
    b8f2:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
    b8f4:	697b      	ldr	r3, [r7, #20]
    b8f6:	2241      	movs	r2, #65	; 0x41
    b8f8:	5c99      	ldrb	r1, [r3, r2]
    b8fa:	2001      	movs	r0, #1
    b8fc:	4301      	orrs	r1, r0
    b8fe:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    b900:	697b      	ldr	r3, [r7, #20]
    b902:	2000      	movs	r0, #0
    b904:	5618      	ldrsb	r0, [r3, r0]
    b906:	687b      	ldr	r3, [r7, #4]
    b908:	b29a      	uxth	r2, r3
    b90a:	68b9      	ldr	r1, [r7, #8]
    b90c:	2300      	movs	r3, #0
    b90e:	4c14      	ldr	r4, [pc, #80]	; (b960 <_http_client_send_wait+0x7c>)
    b910:	47a0      	blx	r4
    b912:	0003      	movs	r3, r0
    b914:	613b      	str	r3, [r7, #16]
    b916:	693b      	ldr	r3, [r7, #16]
    b918:	2b00      	cmp	r3, #0
    b91a:	da0f      	bge.n	b93c <_http_client_send_wait+0x58>
		module->sending = 0;
    b91c:	697b      	ldr	r3, [r7, #20]
    b91e:	2241      	movs	r2, #65	; 0x41
    b920:	5c99      	ldrb	r1, [r3, r2]
    b922:	2001      	movs	r0, #1
    b924:	4381      	bics	r1, r0
    b926:	5499      	strb	r1, [r3, r2]
		return result;
    b928:	693b      	ldr	r3, [r7, #16]
    b92a:	e014      	b.n	b956 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    b92c:	2000      	movs	r0, #0
    b92e:	4b0d      	ldr	r3, [pc, #52]	; (b964 <_http_client_send_wait+0x80>)
    b930:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
    b932:	697b      	ldr	r3, [r7, #20]
    b934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b936:	0018      	movs	r0, r3
    b938:	4b0b      	ldr	r3, [pc, #44]	; (b968 <_http_client_send_wait+0x84>)
    b93a:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    b93c:	697b      	ldr	r3, [r7, #20]
    b93e:	2241      	movs	r2, #65	; 0x41
    b940:	5c9b      	ldrb	r3, [r3, r2]
    b942:	2201      	movs	r2, #1
    b944:	4013      	ands	r3, r2
    b946:	b2db      	uxtb	r3, r3
    b948:	2b00      	cmp	r3, #0
    b94a:	d003      	beq.n	b954 <_http_client_send_wait+0x70>
    b94c:	697b      	ldr	r3, [r7, #20]
    b94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b950:	2b02      	cmp	r3, #2
    b952:	d8eb      	bhi.n	b92c <_http_client_send_wait+0x48>
	}

	return 0;
    b954:	2300      	movs	r3, #0
}
    b956:	0018      	movs	r0, r3
    b958:	46bd      	mov	sp, r7
    b95a:	b007      	add	sp, #28
    b95c:	bd90      	pop	{r4, r7, pc}
    b95e:	46c0      	nop			; (mov r8, r8)
    b960:	00008241 	.word	0x00008241
    b964:	00004e8d 	.word	0x00004e8d
    b968:	0000cc31 	.word	0x0000cc31

0000b96c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    b96c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b96e:	46c6      	mov	lr, r8
    b970:	b500      	push	{lr}
    b972:	b0a0      	sub	sp, #128	; 0x80
    b974:	af02      	add	r7, sp, #8
    b976:	61f8      	str	r0, [r7, #28]
    b978:	4668      	mov	r0, sp
    b97a:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    b97c:	2318      	movs	r3, #24
    b97e:	2218      	movs	r2, #24
    b980:	18ba      	adds	r2, r7, r2
    b982:	18d0      	adds	r0, r2, r3
    b984:	4bbd      	ldr	r3, [pc, #756]	; (bc7c <_http_client_request+0x310>)
    b986:	469c      	mov	ip, r3
    b988:	4663      	mov	r3, ip
    b98a:	cb16      	ldmia	r3!, {r1, r2, r4}
    b98c:	c016      	stmia	r0!, {r1, r2, r4}
    b98e:	469c      	mov	ip, r3
    b990:	4663      	mov	r3, ip
    b992:	681b      	ldr	r3, [r3, #0]
    b994:	469c      	mov	ip, r3
    b996:	4663      	mov	r3, ip
    b998:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    b99a:	69f8      	ldr	r0, [r7, #28]
    b99c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    b99e:	4684      	mov	ip, r0
    b9a0:	2301      	movs	r3, #1
    b9a2:	425b      	negs	r3, r3
    b9a4:	4698      	mov	r8, r3
    b9a6:	44c4      	add	ip, r8
    b9a8:	4663      	mov	r3, ip
    b9aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    b9ac:	6038      	str	r0, [r7, #0]
    b9ae:	2300      	movs	r3, #0
    b9b0:	607b      	str	r3, [r7, #4]
    b9b2:	6839      	ldr	r1, [r7, #0]
    b9b4:	687a      	ldr	r2, [r7, #4]
    b9b6:	000b      	movs	r3, r1
    b9b8:	0f5b      	lsrs	r3, r3, #29
    b9ba:	469c      	mov	ip, r3
    b9bc:	0013      	movs	r3, r2
    b9be:	00db      	lsls	r3, r3, #3
    b9c0:	617b      	str	r3, [r7, #20]
    b9c2:	4663      	mov	r3, ip
    b9c4:	697c      	ldr	r4, [r7, #20]
    b9c6:	431c      	orrs	r4, r3
    b9c8:	617c      	str	r4, [r7, #20]
    b9ca:	000b      	movs	r3, r1
    b9cc:	00db      	lsls	r3, r3, #3
    b9ce:	613b      	str	r3, [r7, #16]
    b9d0:	0005      	movs	r5, r0
    b9d2:	2200      	movs	r2, #0
    b9d4:	0016      	movs	r6, r2
    b9d6:	0f6a      	lsrs	r2, r5, #29
    b9d8:	00f3      	lsls	r3, r6, #3
    b9da:	60fb      	str	r3, [r7, #12]
    b9dc:	68fb      	ldr	r3, [r7, #12]
    b9de:	4313      	orrs	r3, r2
    b9e0:	60fb      	str	r3, [r7, #12]
    b9e2:	00eb      	lsls	r3, r5, #3
    b9e4:	60bb      	str	r3, [r7, #8]
    b9e6:	1dc3      	adds	r3, r0, #7
    b9e8:	08db      	lsrs	r3, r3, #3
    b9ea:	00db      	lsls	r3, r3, #3
    b9ec:	466a      	mov	r2, sp
    b9ee:	1ad3      	subs	r3, r2, r3
    b9f0:	469d      	mov	sp, r3
    b9f2:	ab02      	add	r3, sp, #8
    b9f4:	3300      	adds	r3, #0
    b9f6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
    b9f8:	69fb      	ldr	r3, [r7, #28]
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d100      	bne.n	ba00 <_http_client_request+0x94>
    b9fe:	e346      	b.n	c08e <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
    ba00:	69fb      	ldr	r3, [r7, #28]
    ba02:	2241      	movs	r2, #65	; 0x41
    ba04:	5c9b      	ldrb	r3, [r3, r2]
    ba06:	2201      	movs	r2, #1
    ba08:	4013      	ands	r3, r2
    ba0a:	b2db      	uxtb	r3, r3
    ba0c:	2b00      	cmp	r3, #0
    ba0e:	d000      	beq.n	ba12 <_http_client_request+0xa6>
    ba10:	e33f      	b.n	c092 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
    ba12:	69fb      	ldr	r3, [r7, #28]
    ba14:	33b0      	adds	r3, #176	; 0xb0
    ba16:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
    ba18:	69fb      	ldr	r3, [r7, #28]
    ba1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    ba1c:	2b03      	cmp	r3, #3
    ba1e:	d003      	beq.n	ba28 <_http_client_request+0xbc>
    ba20:	2b04      	cmp	r3, #4
    ba22:	d100      	bne.n	ba26 <_http_client_request+0xba>
    ba24:	e1b3      	b.n	bd8e <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
    ba26:	e32f      	b.n	c088 <_http_client_request+0x71c>
		module->req.content_length = 0;
    ba28:	69fb      	ldr	r3, [r7, #28]
    ba2a:	22cc      	movs	r2, #204	; 0xcc
    ba2c:	2100      	movs	r1, #0
    ba2e:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
    ba30:	69fb      	ldr	r3, [r7, #28]
    ba32:	22d0      	movs	r2, #208	; 0xd0
    ba34:	2100      	movs	r1, #0
    ba36:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    ba38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    ba3a:	69fb      	ldr	r3, [r7, #28]
    ba3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    ba3e:	4c90      	ldr	r4, [pc, #576]	; (bc80 <_http_client_request+0x314>)
    ba40:	2334      	movs	r3, #52	; 0x34
    ba42:	2018      	movs	r0, #24
    ba44:	1838      	adds	r0, r7, r0
    ba46:	18c0      	adds	r0, r0, r3
    ba48:	69fb      	ldr	r3, [r7, #28]
    ba4a:	9300      	str	r3, [sp, #0]
    ba4c:	0023      	movs	r3, r4
    ba4e:	4c8d      	ldr	r4, [pc, #564]	; (bc84 <_http_client_request+0x318>)
    ba50:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
    ba52:	69fb      	ldr	r3, [r7, #28]
    ba54:	22c8      	movs	r2, #200	; 0xc8
    ba56:	5c9b      	ldrb	r3, [r3, r2]
    ba58:	2b01      	cmp	r3, #1
    ba5a:	d10a      	bne.n	ba72 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
    ba5c:	498a      	ldr	r1, [pc, #552]	; (bc88 <_http_client_request+0x31c>)
    ba5e:	2334      	movs	r3, #52	; 0x34
    ba60:	2218      	movs	r2, #24
    ba62:	4694      	mov	ip, r2
    ba64:	44bc      	add	ip, r7
    ba66:	4463      	add	r3, ip
    ba68:	2204      	movs	r2, #4
    ba6a:	0018      	movs	r0, r3
    ba6c:	4b87      	ldr	r3, [pc, #540]	; (bc8c <_http_client_request+0x320>)
    ba6e:	4798      	blx	r3
    ba70:	e04e      	b.n	bb10 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
    ba72:	69fb      	ldr	r3, [r7, #28]
    ba74:	22c8      	movs	r2, #200	; 0xc8
    ba76:	5c9b      	ldrb	r3, [r3, r2]
    ba78:	2b02      	cmp	r3, #2
    ba7a:	d10a      	bne.n	ba92 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
    ba7c:	4984      	ldr	r1, [pc, #528]	; (bc90 <_http_client_request+0x324>)
    ba7e:	2334      	movs	r3, #52	; 0x34
    ba80:	2218      	movs	r2, #24
    ba82:	4694      	mov	ip, r2
    ba84:	44bc      	add	ip, r7
    ba86:	4463      	add	r3, ip
    ba88:	2205      	movs	r2, #5
    ba8a:	0018      	movs	r0, r3
    ba8c:	4b7f      	ldr	r3, [pc, #508]	; (bc8c <_http_client_request+0x320>)
    ba8e:	4798      	blx	r3
    ba90:	e03e      	b.n	bb10 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    ba92:	69fb      	ldr	r3, [r7, #28]
    ba94:	22c8      	movs	r2, #200	; 0xc8
    ba96:	5c9b      	ldrb	r3, [r3, r2]
    ba98:	2b03      	cmp	r3, #3
    ba9a:	d10a      	bne.n	bab2 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    ba9c:	497d      	ldr	r1, [pc, #500]	; (bc94 <_http_client_request+0x328>)
    ba9e:	2334      	movs	r3, #52	; 0x34
    baa0:	2218      	movs	r2, #24
    baa2:	4694      	mov	ip, r2
    baa4:	44bc      	add	ip, r7
    baa6:	4463      	add	r3, ip
    baa8:	2207      	movs	r2, #7
    baaa:	0018      	movs	r0, r3
    baac:	4b77      	ldr	r3, [pc, #476]	; (bc8c <_http_client_request+0x320>)
    baae:	4798      	blx	r3
    bab0:	e02e      	b.n	bb10 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    bab2:	69fb      	ldr	r3, [r7, #28]
    bab4:	22c8      	movs	r2, #200	; 0xc8
    bab6:	5c9b      	ldrb	r3, [r3, r2]
    bab8:	2b04      	cmp	r3, #4
    baba:	d10a      	bne.n	bad2 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    babc:	4976      	ldr	r1, [pc, #472]	; (bc98 <_http_client_request+0x32c>)
    babe:	2334      	movs	r3, #52	; 0x34
    bac0:	2218      	movs	r2, #24
    bac2:	4694      	mov	ip, r2
    bac4:	44bc      	add	ip, r7
    bac6:	4463      	add	r3, ip
    bac8:	2204      	movs	r2, #4
    baca:	0018      	movs	r0, r3
    bacc:	4b6f      	ldr	r3, [pc, #444]	; (bc8c <_http_client_request+0x320>)
    bace:	4798      	blx	r3
    bad0:	e01e      	b.n	bb10 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    bad2:	69fb      	ldr	r3, [r7, #28]
    bad4:	22c8      	movs	r2, #200	; 0xc8
    bad6:	5c9b      	ldrb	r3, [r3, r2]
    bad8:	2b05      	cmp	r3, #5
    bada:	d10a      	bne.n	baf2 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    badc:	496f      	ldr	r1, [pc, #444]	; (bc9c <_http_client_request+0x330>)
    bade:	2334      	movs	r3, #52	; 0x34
    bae0:	2218      	movs	r2, #24
    bae2:	4694      	mov	ip, r2
    bae4:	44bc      	add	ip, r7
    bae6:	4463      	add	r3, ip
    bae8:	2208      	movs	r2, #8
    baea:	0018      	movs	r0, r3
    baec:	4b67      	ldr	r3, [pc, #412]	; (bc8c <_http_client_request+0x320>)
    baee:	4798      	blx	r3
    baf0:	e00e      	b.n	bb10 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    baf2:	69fb      	ldr	r3, [r7, #28]
    baf4:	22c8      	movs	r2, #200	; 0xc8
    baf6:	5c9b      	ldrb	r3, [r3, r2]
    baf8:	2b06      	cmp	r3, #6
    bafa:	d109      	bne.n	bb10 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    bafc:	4968      	ldr	r1, [pc, #416]	; (bca0 <_http_client_request+0x334>)
    bafe:	2334      	movs	r3, #52	; 0x34
    bb00:	2218      	movs	r2, #24
    bb02:	4694      	mov	ip, r2
    bb04:	44bc      	add	ip, r7
    bb06:	4463      	add	r3, ip
    bb08:	2205      	movs	r2, #5
    bb0a:	0018      	movs	r0, r3
    bb0c:	4b5f      	ldr	r3, [pc, #380]	; (bc8c <_http_client_request+0x320>)
    bb0e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    bb10:	69fb      	ldr	r3, [r7, #28]
    bb12:	3370      	adds	r3, #112	; 0x70
    bb14:	001c      	movs	r4, r3
    bb16:	69fb      	ldr	r3, [r7, #28]
    bb18:	3370      	adds	r3, #112	; 0x70
    bb1a:	0018      	movs	r0, r3
    bb1c:	4b61      	ldr	r3, [pc, #388]	; (bca4 <_http_client_request+0x338>)
    bb1e:	4798      	blx	r3
    bb20:	0002      	movs	r2, r0
    bb22:	2334      	movs	r3, #52	; 0x34
    bb24:	2118      	movs	r1, #24
    bb26:	468c      	mov	ip, r1
    bb28:	44bc      	add	ip, r7
    bb2a:	4463      	add	r3, ip
    bb2c:	0021      	movs	r1, r4
    bb2e:	0018      	movs	r0, r3
    bb30:	4b56      	ldr	r3, [pc, #344]	; (bc8c <_http_client_request+0x320>)
    bb32:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    bb34:	495c      	ldr	r1, [pc, #368]	; (bca8 <_http_client_request+0x33c>)
    bb36:	2334      	movs	r3, #52	; 0x34
    bb38:	2218      	movs	r2, #24
    bb3a:	4694      	mov	ip, r2
    bb3c:	44bc      	add	ip, r7
    bb3e:	4463      	add	r3, ip
    bb40:	220b      	movs	r2, #11
    bb42:	0018      	movs	r0, r3
    bb44:	4b51      	ldr	r3, [pc, #324]	; (bc8c <_http_client_request+0x320>)
    bb46:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    bb48:	4958      	ldr	r1, [pc, #352]	; (bcac <_http_client_request+0x340>)
    bb4a:	2334      	movs	r3, #52	; 0x34
    bb4c:	2218      	movs	r2, #24
    bb4e:	4694      	mov	ip, r2
    bb50:	44bc      	add	ip, r7
    bb52:	4463      	add	r3, ip
    bb54:	220c      	movs	r2, #12
    bb56:	0018      	movs	r0, r3
    bb58:	4b4c      	ldr	r3, [pc, #304]	; (bc8c <_http_client_request+0x320>)
    bb5a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    bb5c:	69fb      	ldr	r3, [r7, #28]
    bb5e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    bb60:	69fb      	ldr	r3, [r7, #28]
    bb62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    bb64:	0018      	movs	r0, r3
    bb66:	4b4f      	ldr	r3, [pc, #316]	; (bca4 <_http_client_request+0x338>)
    bb68:	4798      	blx	r3
    bb6a:	0002      	movs	r2, r0
    bb6c:	2334      	movs	r3, #52	; 0x34
    bb6e:	2118      	movs	r1, #24
    bb70:	468c      	mov	ip, r1
    bb72:	44bc      	add	ip, r7
    bb74:	4463      	add	r3, ip
    bb76:	0021      	movs	r1, r4
    bb78:	0018      	movs	r0, r3
    bb7a:	4b44      	ldr	r3, [pc, #272]	; (bc8c <_http_client_request+0x320>)
    bb7c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    bb7e:	494c      	ldr	r1, [pc, #304]	; (bcb0 <_http_client_request+0x344>)
    bb80:	2334      	movs	r3, #52	; 0x34
    bb82:	2218      	movs	r2, #24
    bb84:	4694      	mov	ip, r2
    bb86:	44bc      	add	ip, r7
    bb88:	4463      	add	r3, ip
    bb8a:	2202      	movs	r2, #2
    bb8c:	0018      	movs	r0, r3
    bb8e:	4b3f      	ldr	r3, [pc, #252]	; (bc8c <_http_client_request+0x320>)
    bb90:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    bb92:	4948      	ldr	r1, [pc, #288]	; (bcb4 <_http_client_request+0x348>)
    bb94:	2334      	movs	r3, #52	; 0x34
    bb96:	2218      	movs	r2, #24
    bb98:	4694      	mov	ip, r2
    bb9a:	44bc      	add	ip, r7
    bb9c:	4463      	add	r3, ip
    bb9e:	2206      	movs	r2, #6
    bba0:	0018      	movs	r0, r3
    bba2:	4b3a      	ldr	r3, [pc, #232]	; (bc8c <_http_client_request+0x320>)
    bba4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    bba6:	69fb      	ldr	r3, [r7, #28]
    bba8:	1c5c      	adds	r4, r3, #1
    bbaa:	69fb      	ldr	r3, [r7, #28]
    bbac:	3301      	adds	r3, #1
    bbae:	0018      	movs	r0, r3
    bbb0:	4b3c      	ldr	r3, [pc, #240]	; (bca4 <_http_client_request+0x338>)
    bbb2:	4798      	blx	r3
    bbb4:	0002      	movs	r2, r0
    bbb6:	2334      	movs	r3, #52	; 0x34
    bbb8:	2118      	movs	r1, #24
    bbba:	468c      	mov	ip, r1
    bbbc:	44bc      	add	ip, r7
    bbbe:	4463      	add	r3, ip
    bbc0:	0021      	movs	r1, r4
    bbc2:	0018      	movs	r0, r3
    bbc4:	4b31      	ldr	r3, [pc, #196]	; (bc8c <_http_client_request+0x320>)
    bbc6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    bbc8:	4939      	ldr	r1, [pc, #228]	; (bcb0 <_http_client_request+0x344>)
    bbca:	2334      	movs	r3, #52	; 0x34
    bbcc:	2218      	movs	r2, #24
    bbce:	4694      	mov	ip, r2
    bbd0:	44bc      	add	ip, r7
    bbd2:	4463      	add	r3, ip
    bbd4:	2202      	movs	r2, #2
    bbd6:	0018      	movs	r0, r3
    bbd8:	4b2c      	ldr	r3, [pc, #176]	; (bc8c <_http_client_request+0x320>)
    bbda:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    bbdc:	4936      	ldr	r1, [pc, #216]	; (bcb8 <_http_client_request+0x34c>)
    bbde:	2334      	movs	r3, #52	; 0x34
    bbe0:	2218      	movs	r2, #24
    bbe2:	4694      	mov	ip, r2
    bbe4:	44bc      	add	ip, r7
    bbe6:	4463      	add	r3, ip
    bbe8:	2218      	movs	r2, #24
    bbea:	0018      	movs	r0, r3
    bbec:	4b27      	ldr	r3, [pc, #156]	; (bc8c <_http_client_request+0x320>)
    bbee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    bbf0:	4932      	ldr	r1, [pc, #200]	; (bcbc <_http_client_request+0x350>)
    bbf2:	2334      	movs	r3, #52	; 0x34
    bbf4:	2218      	movs	r2, #24
    bbf6:	4694      	mov	ip, r2
    bbf8:	44bc      	add	ip, r7
    bbfa:	4463      	add	r3, ip
    bbfc:	2213      	movs	r2, #19
    bbfe:	0018      	movs	r0, r3
    bc00:	4b22      	ldr	r3, [pc, #136]	; (bc8c <_http_client_request+0x320>)
    bc02:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    bc04:	492e      	ldr	r1, [pc, #184]	; (bcc0 <_http_client_request+0x354>)
    bc06:	2334      	movs	r3, #52	; 0x34
    bc08:	2218      	movs	r2, #24
    bc0a:	4694      	mov	ip, r2
    bc0c:	44bc      	add	ip, r7
    bc0e:	4463      	add	r3, ip
    bc10:	2217      	movs	r2, #23
    bc12:	0018      	movs	r0, r3
    bc14:	4b1d      	ldr	r3, [pc, #116]	; (bc8c <_http_client_request+0x320>)
    bc16:	4798      	blx	r3
		if (entity->read != NULL) {
    bc18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bc1a:	68db      	ldr	r3, [r3, #12]
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	d100      	bne.n	bc22 <_http_client_request+0x2b6>
    bc20:	e088      	b.n	bd34 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
    bc22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bc24:	781b      	ldrb	r3, [r3, #0]
    bc26:	2b00      	cmp	r3, #0
    bc28:	d00f      	beq.n	bc4a <_http_client_request+0x2de>
				module->req.content_length = -1;
    bc2a:	69fb      	ldr	r3, [r7, #28]
    bc2c:	21cc      	movs	r1, #204	; 0xcc
    bc2e:	2201      	movs	r2, #1
    bc30:	4252      	negs	r2, r2
    bc32:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    bc34:	4923      	ldr	r1, [pc, #140]	; (bcc4 <_http_client_request+0x358>)
    bc36:	2334      	movs	r3, #52	; 0x34
    bc38:	2218      	movs	r2, #24
    bc3a:	4694      	mov	ip, r2
    bc3c:	44bc      	add	ip, r7
    bc3e:	4463      	add	r3, ip
    bc40:	221c      	movs	r2, #28
    bc42:	0018      	movs	r0, r3
    bc44:	4b11      	ldr	r3, [pc, #68]	; (bc8c <_http_client_request+0x320>)
    bc46:	4798      	blx	r3
    bc48:	e074      	b.n	bd34 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
    bc4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bc4c:	689b      	ldr	r3, [r3, #8]
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d070      	beq.n	bd34 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    bc52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bc54:	689a      	ldr	r2, [r3, #8]
    bc56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bc58:	695b      	ldr	r3, [r3, #20]
    bc5a:	0018      	movs	r0, r3
    bc5c:	4790      	blx	r2
    bc5e:	0001      	movs	r1, r0
    bc60:	69fb      	ldr	r3, [r7, #28]
    bc62:	22cc      	movs	r2, #204	; 0xcc
    bc64:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
    bc66:	69fb      	ldr	r3, [r7, #28]
    bc68:	22cc      	movs	r2, #204	; 0xcc
    bc6a:	589b      	ldr	r3, [r3, r2]
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	da2b      	bge.n	bcc8 <_http_client_request+0x35c>
					module->req.content_length = 0;
    bc70:	69fb      	ldr	r3, [r7, #28]
    bc72:	22cc      	movs	r2, #204	; 0xcc
    bc74:	2100      	movs	r1, #0
    bc76:	5099      	str	r1, [r3, r2]
    bc78:	e05c      	b.n	bd34 <_http_client_request+0x3c8>
    bc7a:	46c0      	nop			; (mov r8, r8)
    bc7c:	000198a4 	.word	0x000198a4
    bc80:	0000b8e5 	.word	0x0000b8e5
    bc84:	0000c84d 	.word	0x0000c84d
    bc88:	000197c8 	.word	0x000197c8
    bc8c:	0000c90d 	.word	0x0000c90d
    bc90:	000197d0 	.word	0x000197d0
    bc94:	000197d8 	.word	0x000197d8
    bc98:	000197e0 	.word	0x000197e0
    bc9c:	000197e8 	.word	0x000197e8
    bca0:	000197f4 	.word	0x000197f4
    bca4:	000132d3 	.word	0x000132d3
    bca8:	000197fc 	.word	0x000197fc
    bcac:	00019808 	.word	0x00019808
    bcb0:	00019818 	.word	0x00019818
    bcb4:	0001981c 	.word	0x0001981c
    bcb8:	00019824 	.word	0x00019824
    bcbc:	00019840 	.word	0x00019840
    bcc0:	00019854 	.word	0x00019854
    bcc4:	0001986c 	.word	0x0001986c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    bcc8:	69fb      	ldr	r3, [r7, #28]
    bcca:	22cc      	movs	r2, #204	; 0xcc
    bccc:	589b      	ldr	r3, [r3, r2]
    bcce:	001a      	movs	r2, r3
    bcd0:	49e0      	ldr	r1, [pc, #896]	; (c054 <_http_client_request+0x6e8>)
    bcd2:	2328      	movs	r3, #40	; 0x28
    bcd4:	2018      	movs	r0, #24
    bcd6:	4684      	mov	ip, r0
    bcd8:	44bc      	add	ip, r7
    bcda:	4463      	add	r3, ip
    bcdc:	0018      	movs	r0, r3
    bcde:	4bde      	ldr	r3, [pc, #888]	; (c058 <_http_client_request+0x6ec>)
    bce0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    bce2:	49de      	ldr	r1, [pc, #888]	; (c05c <_http_client_request+0x6f0>)
    bce4:	2334      	movs	r3, #52	; 0x34
    bce6:	2218      	movs	r2, #24
    bce8:	4694      	mov	ip, r2
    bcea:	44bc      	add	ip, r7
    bcec:	4463      	add	r3, ip
    bcee:	2210      	movs	r2, #16
    bcf0:	0018      	movs	r0, r3
    bcf2:	4bdb      	ldr	r3, [pc, #876]	; (c060 <_http_client_request+0x6f4>)
    bcf4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
    bcf6:	2328      	movs	r3, #40	; 0x28
    bcf8:	2218      	movs	r2, #24
    bcfa:	4694      	mov	ip, r2
    bcfc:	44bc      	add	ip, r7
    bcfe:	4463      	add	r3, ip
    bd00:	0018      	movs	r0, r3
    bd02:	4bd8      	ldr	r3, [pc, #864]	; (c064 <_http_client_request+0x6f8>)
    bd04:	4798      	blx	r3
    bd06:	0002      	movs	r2, r0
    bd08:	2328      	movs	r3, #40	; 0x28
    bd0a:	2118      	movs	r1, #24
    bd0c:	1879      	adds	r1, r7, r1
    bd0e:	18c9      	adds	r1, r1, r3
    bd10:	2334      	movs	r3, #52	; 0x34
    bd12:	2018      	movs	r0, #24
    bd14:	4684      	mov	ip, r0
    bd16:	44bc      	add	ip, r7
    bd18:	4463      	add	r3, ip
    bd1a:	0018      	movs	r0, r3
    bd1c:	4bd0      	ldr	r3, [pc, #832]	; (c060 <_http_client_request+0x6f4>)
    bd1e:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    bd20:	49d1      	ldr	r1, [pc, #836]	; (c068 <_http_client_request+0x6fc>)
    bd22:	2334      	movs	r3, #52	; 0x34
    bd24:	2218      	movs	r2, #24
    bd26:	4694      	mov	ip, r2
    bd28:	44bc      	add	ip, r7
    bd2a:	4463      	add	r3, ip
    bd2c:	2202      	movs	r2, #2
    bd2e:	0018      	movs	r0, r3
    bd30:	4bcb      	ldr	r3, [pc, #812]	; (c060 <_http_client_request+0x6f4>)
    bd32:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
    bd34:	69fb      	ldr	r3, [r7, #28]
    bd36:	22d4      	movs	r2, #212	; 0xd4
    bd38:	589b      	ldr	r3, [r3, r2]
    bd3a:	2b00      	cmp	r3, #0
    bd3c:	d012      	beq.n	bd64 <_http_client_request+0x3f8>
			stream_writer_send_buffer(&writer,
    bd3e:	69fb      	ldr	r3, [r7, #28]
    bd40:	22d4      	movs	r2, #212	; 0xd4
    bd42:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
    bd44:	69fb      	ldr	r3, [r7, #28]
    bd46:	22d4      	movs	r2, #212	; 0xd4
    bd48:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
    bd4a:	0018      	movs	r0, r3
    bd4c:	4bc5      	ldr	r3, [pc, #788]	; (c064 <_http_client_request+0x6f8>)
    bd4e:	4798      	blx	r3
    bd50:	0002      	movs	r2, r0
    bd52:	2334      	movs	r3, #52	; 0x34
    bd54:	2118      	movs	r1, #24
    bd56:	468c      	mov	ip, r1
    bd58:	44bc      	add	ip, r7
    bd5a:	4463      	add	r3, ip
    bd5c:	0021      	movs	r1, r4
    bd5e:	0018      	movs	r0, r3
    bd60:	4bbf      	ldr	r3, [pc, #764]	; (c060 <_http_client_request+0x6f4>)
    bd62:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    bd64:	49c0      	ldr	r1, [pc, #768]	; (c068 <_http_client_request+0x6fc>)
    bd66:	2334      	movs	r3, #52	; 0x34
    bd68:	2218      	movs	r2, #24
    bd6a:	4694      	mov	ip, r2
    bd6c:	44bc      	add	ip, r7
    bd6e:	4463      	add	r3, ip
    bd70:	2202      	movs	r2, #2
    bd72:	0018      	movs	r0, r3
    bd74:	4bba      	ldr	r3, [pc, #744]	; (c060 <_http_client_request+0x6f4>)
    bd76:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    bd78:	2334      	movs	r3, #52	; 0x34
    bd7a:	2218      	movs	r2, #24
    bd7c:	4694      	mov	ip, r2
    bd7e:	44bc      	add	ip, r7
    bd80:	4463      	add	r3, ip
    bd82:	0018      	movs	r0, r3
    bd84:	4bb9      	ldr	r3, [pc, #740]	; (c06c <_http_client_request+0x700>)
    bd86:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
    bd88:	69fb      	ldr	r3, [r7, #28]
    bd8a:	2204      	movs	r2, #4
    bd8c:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
    bd8e:	69fb      	ldr	r3, [r7, #28]
    bd90:	22cc      	movs	r2, #204	; 0xcc
    bd92:	589b      	ldr	r3, [r3, r2]
    bd94:	2b00      	cmp	r3, #0
    bd96:	db00      	blt.n	bd9a <_http_client_request+0x42e>
    bd98:	e0c6      	b.n	bf28 <_http_client_request+0x5bc>
    bd9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bd9c:	68db      	ldr	r3, [r3, #12]
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d100      	bne.n	bda4 <_http_client_request+0x438>
    bda2:	e0c1      	b.n	bf28 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    bda4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bda6:	68dc      	ldr	r4, [r3, #12]
    bda8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bdaa:	6958      	ldr	r0, [r3, #20]
    bdac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    bdae:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    bdb0:	69fb      	ldr	r3, [r7, #28]
    bdb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    bdb4:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    bdb6:	69fb      	ldr	r3, [r7, #28]
    bdb8:	22d0      	movs	r2, #208	; 0xd0
    bdba:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    bdbc:	002a      	movs	r2, r5
    bdbe:	47a0      	blx	r4
    bdc0:	0003      	movs	r3, r0
    bdc2:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    bdc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	da01      	bge.n	bdce <_http_client_request+0x462>
				size = 0;
    bdca:	2300      	movs	r3, #0
    bdcc:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    bdce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    bdd0:	220a      	movs	r2, #10
    bdd2:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    bdd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    bdd6:	220d      	movs	r2, #13
    bdd8:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    bdda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bddc:	3305      	adds	r3, #5
    bdde:	6eba      	ldr	r2, [r7, #104]	; 0x68
    bde0:	210d      	movs	r1, #13
    bde2:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    bde4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bde6:	3306      	adds	r3, #6
    bde8:	6eba      	ldr	r2, [r7, #104]	; 0x68
    bdea:	210a      	movs	r1, #10
    bdec:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
    bdee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bdf0:	2b00      	cmp	r3, #0
    bdf2:	db14      	blt.n	be1e <_http_client_request+0x4b2>
				ptr = buffer + 2;
    bdf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    bdf6:	3302      	adds	r3, #2
    bdf8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
    bdfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bdfc:	4a9c      	ldr	r2, [pc, #624]	; (c070 <_http_client_request+0x704>)
    bdfe:	4013      	ands	r3, r2
    be00:	d504      	bpl.n	be0c <_http_client_request+0x4a0>
    be02:	3b01      	subs	r3, #1
    be04:	2210      	movs	r2, #16
    be06:	4252      	negs	r2, r2
    be08:	4313      	orrs	r3, r2
    be0a:	3301      	adds	r3, #1
    be0c:	001a      	movs	r2, r3
    be0e:	2318      	movs	r3, #24
    be10:	2118      	movs	r1, #24
    be12:	468c      	mov	ip, r1
    be14:	44bc      	add	ip, r7
    be16:	4463      	add	r3, ip
    be18:	5c9a      	ldrb	r2, [r3, r2]
    be1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    be1c:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
    be1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    be20:	2b0f      	cmp	r3, #15
    be22:	dd19      	ble.n	be58 <_http_client_request+0x4ec>
				ptr = buffer + 1;
    be24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    be26:	3301      	adds	r3, #1
    be28:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
    be2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    be2c:	2b00      	cmp	r3, #0
    be2e:	da00      	bge.n	be32 <_http_client_request+0x4c6>
    be30:	330f      	adds	r3, #15
    be32:	111b      	asrs	r3, r3, #4
    be34:	001a      	movs	r2, r3
    be36:	4b8e      	ldr	r3, [pc, #568]	; (c070 <_http_client_request+0x704>)
    be38:	4013      	ands	r3, r2
    be3a:	d504      	bpl.n	be46 <_http_client_request+0x4da>
    be3c:	3b01      	subs	r3, #1
    be3e:	2210      	movs	r2, #16
    be40:	4252      	negs	r2, r2
    be42:	4313      	orrs	r3, r2
    be44:	3301      	adds	r3, #1
    be46:	001a      	movs	r2, r3
    be48:	2318      	movs	r3, #24
    be4a:	2118      	movs	r1, #24
    be4c:	468c      	mov	ip, r1
    be4e:	44bc      	add	ip, r7
    be50:	4463      	add	r3, ip
    be52:	5c9a      	ldrb	r2, [r3, r2]
    be54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    be56:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
    be58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    be5a:	2bff      	cmp	r3, #255	; 0xff
    be5c:	dd18      	ble.n	be90 <_http_client_request+0x524>
				ptr = buffer;
    be5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    be60:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
    be62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    be64:	2b00      	cmp	r3, #0
    be66:	da00      	bge.n	be6a <_http_client_request+0x4fe>
    be68:	33ff      	adds	r3, #255	; 0xff
    be6a:	121b      	asrs	r3, r3, #8
    be6c:	001a      	movs	r2, r3
    be6e:	4b80      	ldr	r3, [pc, #512]	; (c070 <_http_client_request+0x704>)
    be70:	4013      	ands	r3, r2
    be72:	d504      	bpl.n	be7e <_http_client_request+0x512>
    be74:	3b01      	subs	r3, #1
    be76:	2210      	movs	r2, #16
    be78:	4252      	negs	r2, r2
    be7a:	4313      	orrs	r3, r2
    be7c:	3301      	adds	r3, #1
    be7e:	001a      	movs	r2, r3
    be80:	2318      	movs	r3, #24
    be82:	2118      	movs	r1, #24
    be84:	468c      	mov	ip, r1
    be86:	44bc      	add	ip, r7
    be88:	4463      	add	r3, ip
    be8a:	5c9a      	ldrb	r2, [r3, r2]
    be8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    be8e:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    be90:	69fb      	ldr	r3, [r7, #28]
    be92:	2000      	movs	r0, #0
    be94:	5618      	ldrsb	r0, [r3, r0]
    be96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    be98:	3303      	adds	r3, #3
    be9a:	001a      	movs	r2, r3
    be9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    be9e:	1ad3      	subs	r3, r2, r3
    bea0:	b29a      	uxth	r2, r3
    bea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bea4:	b29b      	uxth	r3, r3
    bea6:	18d3      	adds	r3, r2, r3
    bea8:	b29b      	uxth	r3, r3
    beaa:	3304      	adds	r3, #4
    beac:	b29a      	uxth	r2, r3
    beae:	6f39      	ldr	r1, [r7, #112]	; 0x70
    beb0:	2300      	movs	r3, #0
    beb2:	4c70      	ldr	r4, [pc, #448]	; (c074 <_http_client_request+0x708>)
    beb4:	47a0      	blx	r4
    beb6:	0003      	movs	r3, r0
    beb8:	663b      	str	r3, [r7, #96]	; 0x60
    beba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    bebc:	2b00      	cmp	r3, #0
    bebe:	da07      	bge.n	bed0 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
    bec0:	2305      	movs	r3, #5
    bec2:	425a      	negs	r2, r3
    bec4:	69fb      	ldr	r3, [r7, #28]
    bec6:	0011      	movs	r1, r2
    bec8:	0018      	movs	r0, r3
    beca:	4b6b      	ldr	r3, [pc, #428]	; (c078 <_http_client_request+0x70c>)
    becc:	4798      	blx	r3
				return;
    bece:	e0e1      	b.n	c094 <_http_client_request+0x728>
			module->req.sent_length += size;
    bed0:	69fb      	ldr	r3, [r7, #28]
    bed2:	22d0      	movs	r2, #208	; 0xd0
    bed4:	589a      	ldr	r2, [r3, r2]
    bed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bed8:	18d2      	adds	r2, r2, r3
    beda:	69fb      	ldr	r3, [r7, #28]
    bedc:	21d0      	movs	r1, #208	; 0xd0
    bede:	505a      	str	r2, [r3, r1]
			if(size == 0) {
    bee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bee2:	2b00      	cmp	r3, #0
    bee4:	d000      	beq.n	bee8 <_http_client_request+0x57c>
    bee6:	e0c9      	b.n	c07c <_http_client_request+0x710>
				if (module->req.entity.close) {
    bee8:	69fb      	ldr	r3, [r7, #28]
    beea:	22c0      	movs	r2, #192	; 0xc0
    beec:	589b      	ldr	r3, [r3, r2]
    beee:	2b00      	cmp	r3, #0
    bef0:	d007      	beq.n	bf02 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
    bef2:	69fb      	ldr	r3, [r7, #28]
    bef4:	22c0      	movs	r2, #192	; 0xc0
    bef6:	589b      	ldr	r3, [r3, r2]
    bef8:	69fa      	ldr	r2, [r7, #28]
    befa:	21c4      	movs	r1, #196	; 0xc4
    befc:	5852      	ldr	r2, [r2, r1]
    befe:	0010      	movs	r0, r2
    bf00:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    bf02:	69fb      	ldr	r3, [r7, #28]
    bf04:	2202      	movs	r2, #2
    bf06:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    bf08:	69fb      	ldr	r3, [r7, #28]
    bf0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bf0c:	2b00      	cmp	r3, #0
    bf0e:	d100      	bne.n	bf12 <_http_client_request+0x5a6>
    bf10:	e0b5      	b.n	c07e <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    bf12:	69fb      	ldr	r3, [r7, #28]
    bf14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bf16:	220c      	movs	r2, #12
    bf18:	2118      	movs	r1, #24
    bf1a:	468c      	mov	ip, r1
    bf1c:	44bc      	add	ip, r7
    bf1e:	4462      	add	r2, ip
    bf20:	69f8      	ldr	r0, [r7, #28]
    bf22:	2101      	movs	r1, #1
    bf24:	4798      	blx	r3
				break;
    bf26:	e0aa      	b.n	c07e <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
    bf28:	69fb      	ldr	r3, [r7, #28]
    bf2a:	22cc      	movs	r2, #204	; 0xcc
    bf2c:	589b      	ldr	r3, [r3, r2]
    bf2e:	2b00      	cmp	r3, #0
    bf30:	dc00      	bgt.n	bf34 <_http_client_request+0x5c8>
    bf32:	e07c      	b.n	c02e <_http_client_request+0x6c2>
    bf34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bf36:	68db      	ldr	r3, [r3, #12]
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d100      	bne.n	bf3e <_http_client_request+0x5d2>
    bf3c:	e077      	b.n	c02e <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
    bf3e:	69fb      	ldr	r3, [r7, #28]
    bf40:	22d0      	movs	r2, #208	; 0xd0
    bf42:	589a      	ldr	r2, [r3, r2]
    bf44:	69fb      	ldr	r3, [r7, #28]
    bf46:	21cc      	movs	r1, #204	; 0xcc
    bf48:	585b      	ldr	r3, [r3, r1]
    bf4a:	429a      	cmp	r2, r3
    bf4c:	db1f      	blt.n	bf8e <_http_client_request+0x622>
				if (module->req.entity.close) {
    bf4e:	69fb      	ldr	r3, [r7, #28]
    bf50:	22c0      	movs	r2, #192	; 0xc0
    bf52:	589b      	ldr	r3, [r3, r2]
    bf54:	2b00      	cmp	r3, #0
    bf56:	d007      	beq.n	bf68 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
    bf58:	69fb      	ldr	r3, [r7, #28]
    bf5a:	22c0      	movs	r2, #192	; 0xc0
    bf5c:	589b      	ldr	r3, [r3, r2]
    bf5e:	69fa      	ldr	r2, [r7, #28]
    bf60:	21c4      	movs	r1, #196	; 0xc4
    bf62:	5852      	ldr	r2, [r2, r1]
    bf64:	0010      	movs	r0, r2
    bf66:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    bf68:	69fb      	ldr	r3, [r7, #28]
    bf6a:	2202      	movs	r2, #2
    bf6c:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    bf6e:	69fb      	ldr	r3, [r7, #28]
    bf70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bf72:	2b00      	cmp	r3, #0
    bf74:	d100      	bne.n	bf78 <_http_client_request+0x60c>
    bf76:	e084      	b.n	c082 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    bf78:	69fb      	ldr	r3, [r7, #28]
    bf7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bf7c:	220c      	movs	r2, #12
    bf7e:	2118      	movs	r1, #24
    bf80:	468c      	mov	ip, r1
    bf82:	44bc      	add	ip, r7
    bf84:	4462      	add	r2, ip
    bf86:	69f8      	ldr	r0, [r7, #28]
    bf88:	2101      	movs	r1, #1
    bf8a:	4798      	blx	r3
				break;
    bf8c:	e079      	b.n	c082 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    bf8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bf90:	68dc      	ldr	r4, [r3, #12]
    bf92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bf94:	6958      	ldr	r0, [r3, #20]
    bf96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    bf98:	69fb      	ldr	r3, [r7, #28]
    bf9a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    bf9c:	69fb      	ldr	r3, [r7, #28]
    bf9e:	22d0      	movs	r2, #208	; 0xd0
    bfa0:	589b      	ldr	r3, [r3, r2]
    bfa2:	002a      	movs	r2, r5
    bfa4:	47a0      	blx	r4
    bfa6:	0003      	movs	r3, r0
    bfa8:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    bfaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bfac:	2b00      	cmp	r3, #0
    bfae:	da0d      	bge.n	bfcc <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    bfb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	d102      	bne.n	bfbc <_http_client_request+0x650>
    bfb6:	234d      	movs	r3, #77	; 0x4d
    bfb8:	425b      	negs	r3, r3
    bfba:	e001      	b.n	bfc0 <_http_client_request+0x654>
    bfbc:	2305      	movs	r3, #5
    bfbe:	425b      	negs	r3, r3
    bfc0:	69fa      	ldr	r2, [r7, #28]
    bfc2:	0019      	movs	r1, r3
    bfc4:	0010      	movs	r0, r2
    bfc6:	4b2c      	ldr	r3, [pc, #176]	; (c078 <_http_client_request+0x70c>)
    bfc8:	4798      	blx	r3
			if (size < 0) {
    bfca:	e057      	b.n	c07c <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
    bfcc:	69fb      	ldr	r3, [r7, #28]
    bfce:	22cc      	movs	r2, #204	; 0xcc
    bfd0:	589a      	ldr	r2, [r3, r2]
    bfd2:	69fb      	ldr	r3, [r7, #28]
    bfd4:	21d0      	movs	r1, #208	; 0xd0
    bfd6:	585b      	ldr	r3, [r3, r1]
    bfd8:	1ad2      	subs	r2, r2, r3
    bfda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bfdc:	429a      	cmp	r2, r3
    bfde:	da07      	bge.n	bff0 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
    bfe0:	69fb      	ldr	r3, [r7, #28]
    bfe2:	22cc      	movs	r2, #204	; 0xcc
    bfe4:	589a      	ldr	r2, [r3, r2]
    bfe6:	69fb      	ldr	r3, [r7, #28]
    bfe8:	21d0      	movs	r1, #208	; 0xd0
    bfea:	585b      	ldr	r3, [r3, r1]
    bfec:	1ad3      	subs	r3, r2, r3
    bfee:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    bff0:	69fb      	ldr	r3, [r7, #28]
    bff2:	2000      	movs	r0, #0
    bff4:	5618      	ldrsb	r0, [r3, r0]
    bff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    bff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bffa:	b29a      	uxth	r2, r3
    bffc:	2300      	movs	r3, #0
    bffe:	4c1d      	ldr	r4, [pc, #116]	; (c074 <_http_client_request+0x708>)
    c000:	47a0      	blx	r4
    c002:	0003      	movs	r3, r0
    c004:	663b      	str	r3, [r7, #96]	; 0x60
    c006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    c008:	2b00      	cmp	r3, #0
    c00a:	da07      	bge.n	c01c <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
    c00c:	2305      	movs	r3, #5
    c00e:	425a      	negs	r2, r3
    c010:	69fb      	ldr	r3, [r7, #28]
    c012:	0011      	movs	r1, r2
    c014:	0018      	movs	r0, r3
    c016:	4b18      	ldr	r3, [pc, #96]	; (c078 <_http_client_request+0x70c>)
    c018:	4798      	blx	r3
					return;
    c01a:	e03b      	b.n	c094 <_http_client_request+0x728>
				module->req.sent_length += size;
    c01c:	69fb      	ldr	r3, [r7, #28]
    c01e:	22d0      	movs	r2, #208	; 0xd0
    c020:	589a      	ldr	r2, [r3, r2]
    c022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c024:	18d2      	adds	r2, r2, r3
    c026:	69fb      	ldr	r3, [r7, #28]
    c028:	21d0      	movs	r1, #208	; 0xd0
    c02a:	505a      	str	r2, [r3, r1]
			if (size < 0) {
    c02c:	e026      	b.n	c07c <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
    c02e:	69fb      	ldr	r3, [r7, #28]
    c030:	2202      	movs	r2, #2
    c032:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
    c034:	69fb      	ldr	r3, [r7, #28]
    c036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c038:	2b00      	cmp	r3, #0
    c03a:	d024      	beq.n	c086 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    c03c:	69fb      	ldr	r3, [r7, #28]
    c03e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c040:	220c      	movs	r2, #12
    c042:	2118      	movs	r1, #24
    c044:	468c      	mov	ip, r1
    c046:	44bc      	add	ip, r7
    c048:	4462      	add	r2, ip
    c04a:	69f8      	ldr	r0, [r7, #28]
    c04c:	2101      	movs	r1, #1
    c04e:	4798      	blx	r3
			break;
    c050:	e019      	b.n	c086 <_http_client_request+0x71a>
    c052:	46c0      	nop			; (mov r8, r8)
    c054:	0001988c 	.word	0x0001988c
    c058:	00013231 	.word	0x00013231
    c05c:	00019890 	.word	0x00019890
    c060:	0000c90d 	.word	0x0000c90d
    c064:	000132d3 	.word	0x000132d3
    c068:	00019818 	.word	0x00019818
    c06c:	0000c949 	.word	0x0000c949
    c070:	8000000f 	.word	0x8000000f
    c074:	00008241 	.word	0x00008241
    c078:	0000b819 	.word	0x0000b819
		break;
    c07c:	e004      	b.n	c088 <_http_client_request+0x71c>
				break;
    c07e:	46c0      	nop			; (mov r8, r8)
    c080:	e002      	b.n	c088 <_http_client_request+0x71c>
				break;
    c082:	46c0      	nop			; (mov r8, r8)
    c084:	e000      	b.n	c088 <_http_client_request+0x71c>
			break;
    c086:	46c0      	nop			; (mov r8, r8)
    c088:	69bb      	ldr	r3, [r7, #24]
    c08a:	469d      	mov	sp, r3
    c08c:	e004      	b.n	c098 <_http_client_request+0x72c>
		return;
    c08e:	46c0      	nop			; (mov r8, r8)
    c090:	e000      	b.n	c094 <_http_client_request+0x728>
		return;
    c092:	46c0      	nop			; (mov r8, r8)
    c094:	69bb      	ldr	r3, [r7, #24]
    c096:	469d      	mov	sp, r3
	}
}
    c098:	46bd      	mov	sp, r7
    c09a:	b01e      	add	sp, #120	; 0x78
    c09c:	bc04      	pop	{r2}
    c09e:	4690      	mov	r8, r2
    c0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0a2:	46c0      	nop			; (mov r8, r8)

0000c0a4 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    c0a4:	b590      	push	{r4, r7, lr}
    c0a6:	b083      	sub	sp, #12
    c0a8:	af00      	add	r7, sp, #0
    c0aa:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
    c0ac:	687b      	ldr	r3, [r7, #4]
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	d021      	beq.n	c0f6 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    c0b2:	687b      	ldr	r3, [r7, #4]
    c0b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c0b6:	687b      	ldr	r3, [r7, #4]
    c0b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c0ba:	429a      	cmp	r2, r3
    c0bc:	d307      	bcc.n	c0ce <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
    c0be:	238b      	movs	r3, #139	; 0x8b
    c0c0:	425a      	negs	r2, r3
    c0c2:	687b      	ldr	r3, [r7, #4]
    c0c4:	0011      	movs	r1, r2
    c0c6:	0018      	movs	r0, r3
    c0c8:	4b0d      	ldr	r3, [pc, #52]	; (c100 <_http_client_recv_packet+0x5c>)
    c0ca:	4798      	blx	r3
		return;
    c0cc:	e014      	b.n	c0f8 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    c0ce:	687b      	ldr	r3, [r7, #4]
    c0d0:	2000      	movs	r0, #0
    c0d2:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
    c0d4:	687b      	ldr	r3, [r7, #4]
    c0d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c0d8:	687b      	ldr	r3, [r7, #4]
    c0da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c0dc:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    c0de:	687b      	ldr	r3, [r7, #4]
    c0e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
    c0e2:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    c0e4:	687b      	ldr	r3, [r7, #4]
    c0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
    c0e8:	b29b      	uxth	r3, r3
    c0ea:	1ad3      	subs	r3, r2, r3
    c0ec:	b29a      	uxth	r2, r3
    c0ee:	2300      	movs	r3, #0
    c0f0:	4c04      	ldr	r4, [pc, #16]	; (c104 <_http_client_recv_packet+0x60>)
    c0f2:	47a0      	blx	r4
    c0f4:	e000      	b.n	c0f8 <_http_client_recv_packet+0x54>
		return;
    c0f6:	46c0      	nop			; (mov r8, r8)
}
    c0f8:	46bd      	mov	sp, r7
    c0fa:	b003      	add	sp, #12
    c0fc:	bd90      	pop	{r4, r7, pc}
    c0fe:	46c0      	nop			; (mov r8, r8)
    c100:	0000b819 	.word	0x0000b819
    c104:	000083a5 	.word	0x000083a5

0000c108 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
    c108:	b580      	push	{r7, lr}
    c10a:	b082      	sub	sp, #8
    c10c:	af00      	add	r7, sp, #0
    c10e:	6078      	str	r0, [r7, #4]
    c110:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
    c112:	687b      	ldr	r3, [r7, #4]
    c114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c116:	683b      	ldr	r3, [r7, #0]
    c118:	18d2      	adds	r2, r2, r3
    c11a:	687b      	ldr	r3, [r7, #4]
    c11c:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
    c11e:	687b      	ldr	r3, [r7, #4]
    c120:	2258      	movs	r2, #88	; 0x58
    c122:	5a9b      	ldrh	r3, [r3, r2]
    c124:	2b00      	cmp	r3, #0
    c126:	d007      	beq.n	c138 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    c128:	687b      	ldr	r3, [r7, #4]
    c12a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    c12c:	687b      	ldr	r3, [r7, #4]
    c12e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c130:	0019      	movs	r1, r3
    c132:	0010      	movs	r0, r2
    c134:	4b06      	ldr	r3, [pc, #24]	; (c150 <_http_client_recved_packet+0x48>)
    c136:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
    c138:	46c0      	nop			; (mov r8, r8)
    c13a:	687b      	ldr	r3, [r7, #4]
    c13c:	0018      	movs	r0, r3
    c13e:	4b05      	ldr	r3, [pc, #20]	; (c154 <_http_client_recved_packet+0x4c>)
    c140:	4798      	blx	r3
    c142:	1e03      	subs	r3, r0, #0
    c144:	d1f9      	bne.n	c13a <_http_client_recved_packet+0x32>
}
    c146:	46c0      	nop			; (mov r8, r8)
    c148:	46bd      	mov	sp, r7
    c14a:	b002      	add	sp, #8
    c14c:	bd80      	pop	{r7, pc}
    c14e:	46c0      	nop			; (mov r8, r8)
    c150:	0000cc05 	.word	0x0000cc05
    c154:	0000c159 	.word	0x0000c159

0000c158 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
    c158:	b580      	push	{r7, lr}
    c15a:	b082      	sub	sp, #8
    c15c:	af00      	add	r7, sp, #0
    c15e:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
    c160:	687b      	ldr	r3, [r7, #4]
    c162:	22d8      	movs	r2, #216	; 0xd8
    c164:	589b      	ldr	r3, [r3, r2]
    c166:	2b00      	cmp	r3, #0
    c168:	d002      	beq.n	c170 <_http_client_handle_response+0x18>
    c16a:	2b01      	cmp	r3, #1
    c16c:	d006      	beq.n	c17c <_http_client_handle_response+0x24>
    c16e:	e00b      	b.n	c188 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
    c170:	687b      	ldr	r3, [r7, #4]
    c172:	0018      	movs	r0, r3
    c174:	4b07      	ldr	r3, [pc, #28]	; (c194 <_http_client_handle_response+0x3c>)
    c176:	4798      	blx	r3
    c178:	0003      	movs	r3, r0
    c17a:	e006      	b.n	c18a <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
    c17c:	687b      	ldr	r3, [r7, #4]
    c17e:	0018      	movs	r0, r3
    c180:	4b05      	ldr	r3, [pc, #20]	; (c198 <_http_client_handle_response+0x40>)
    c182:	4798      	blx	r3
    c184:	0003      	movs	r3, r0
    c186:	e000      	b.n	c18a <_http_client_handle_response+0x32>
	}
	return 0;
    c188:	2300      	movs	r3, #0
}
    c18a:	0018      	movs	r0, r3
    c18c:	46bd      	mov	sp, r7
    c18e:	b002      	add	sp, #8
    c190:	bd80      	pop	{r7, pc}
    c192:	46c0      	nop			; (mov r8, r8)
    c194:	0000c19d 	.word	0x0000c19d
    c198:	0000c655 	.word	0x0000c655

0000c19c <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
    c19c:	b590      	push	{r4, r7, lr}
    c19e:	b08b      	sub	sp, #44	; 0x2c
    c1a0:	af00      	add	r7, sp, #0
    c1a2:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
    c1a4:	687b      	ldr	r3, [r7, #4]
    c1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c1a8:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    c1aa:	4b9a      	ldr	r3, [pc, #616]	; (c414 <_http_client_handle_header+0x278>)
    c1ac:	681a      	ldr	r2, [r3, #0]
    c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c1b0:	0011      	movs	r1, r2
    c1b2:	0018      	movs	r0, r3
    c1b4:	4b98      	ldr	r3, [pc, #608]	; (c418 <_http_client_handle_header+0x27c>)
    c1b6:	4798      	blx	r3
    c1b8:	0003      	movs	r3, r0
    c1ba:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    c1bc:	69bb      	ldr	r3, [r7, #24]
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d007      	beq.n	c1d2 <_http_client_handle_header+0x36>
    c1c2:	687b      	ldr	r3, [r7, #4]
    c1c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c1c6:	687b      	ldr	r3, [r7, #4]
    c1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c1ca:	18d2      	adds	r2, r2, r3
    c1cc:	69bb      	ldr	r3, [r7, #24]
    c1ce:	429a      	cmp	r2, r3
    c1d0:	d807      	bhi.n	c1e2 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
    c1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c1d4:	687b      	ldr	r3, [r7, #4]
    c1d6:	0011      	movs	r1, r2
    c1d8:	0018      	movs	r0, r3
    c1da:	4b90      	ldr	r3, [pc, #576]	; (c41c <_http_client_handle_header+0x280>)
    c1dc:	4798      	blx	r3
			return 0;
    c1de:	2300      	movs	r3, #0
    c1e0:	e114      	b.n	c40c <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
    c1e2:	4b8c      	ldr	r3, [pc, #560]	; (c414 <_http_client_handle_header+0x278>)
    c1e4:	681c      	ldr	r4, [r3, #0]
    c1e6:	4b8b      	ldr	r3, [pc, #556]	; (c414 <_http_client_handle_header+0x278>)
    c1e8:	681b      	ldr	r3, [r3, #0]
    c1ea:	0018      	movs	r0, r3
    c1ec:	4b8c      	ldr	r3, [pc, #560]	; (c420 <_http_client_handle_header+0x284>)
    c1ee:	4798      	blx	r3
    c1f0:	0002      	movs	r2, r0
    c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c1f4:	0021      	movs	r1, r4
    c1f6:	0018      	movs	r0, r3
    c1f8:	4b8a      	ldr	r3, [pc, #552]	; (c424 <_http_client_handle_header+0x288>)
    c1fa:	4798      	blx	r3
    c1fc:	1e03      	subs	r3, r0, #0
    c1fe:	d15d      	bne.n	c2bc <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
    c200:	4b84      	ldr	r3, [pc, #528]	; (c414 <_http_client_handle_header+0x278>)
    c202:	681b      	ldr	r3, [r3, #0]
    c204:	0018      	movs	r0, r3
    c206:	4b86      	ldr	r3, [pc, #536]	; (c420 <_http_client_handle_header+0x284>)
    c208:	4798      	blx	r3
    c20a:	0002      	movs	r2, r0
    c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c20e:	189a      	adds	r2, r3, r2
    c210:	687b      	ldr	r3, [r7, #4]
    c212:	0011      	movs	r1, r2
    c214:	0018      	movs	r0, r3
    c216:	4b81      	ldr	r3, [pc, #516]	; (c41c <_http_client_handle_header+0x280>)
    c218:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
    c21a:	687b      	ldr	r3, [r7, #4]
    c21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c21e:	2b00      	cmp	r3, #0
    c220:	d046      	beq.n	c2b0 <_http_client_handle_header+0x114>
    c222:	687b      	ldr	r3, [r7, #4]
    c224:	22e4      	movs	r2, #228	; 0xe4
    c226:	5a9b      	ldrh	r3, [r3, r2]
    c228:	2b00      	cmp	r3, #0
    c22a:	d041      	beq.n	c2b0 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
    c22c:	687b      	ldr	r3, [r7, #4]
    c22e:	22dc      	movs	r2, #220	; 0xdc
    c230:	589b      	ldr	r3, [r3, r2]
    c232:	2b00      	cmp	r3, #0
    c234:	da19      	bge.n	c26a <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
    c236:	687b      	ldr	r3, [r7, #4]
    c238:	22e4      	movs	r2, #228	; 0xe4
    c23a:	5a9a      	ldrh	r2, [r3, r2]
    c23c:	230c      	movs	r3, #12
    c23e:	18fb      	adds	r3, r7, r3
    c240:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
    c242:	230c      	movs	r3, #12
    c244:	18fb      	adds	r3, r7, r3
    c246:	2201      	movs	r2, #1
    c248:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
    c24a:	687b      	ldr	r3, [r7, #4]
    c24c:	22e0      	movs	r2, #224	; 0xe0
    c24e:	2100      	movs	r1, #0
    c250:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
    c252:	230c      	movs	r3, #12
    c254:	18fb      	adds	r3, r7, r3
    c256:	2200      	movs	r2, #0
    c258:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c25a:	687b      	ldr	r3, [r7, #4]
    c25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c25e:	220c      	movs	r2, #12
    c260:	18ba      	adds	r2, r7, r2
    c262:	6878      	ldr	r0, [r7, #4]
    c264:	2102      	movs	r1, #2
    c266:	4798      	blx	r3
    c268:	e022      	b.n	c2b0 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    c26a:	687b      	ldr	r3, [r7, #4]
    c26c:	22dc      	movs	r2, #220	; 0xdc
    c26e:	589a      	ldr	r2, [r3, r2]
    c270:	687b      	ldr	r3, [r7, #4]
    c272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c274:	429a      	cmp	r2, r3
    c276:	dd1b      	ble.n	c2b0 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
    c278:	687b      	ldr	r3, [r7, #4]
    c27a:	22e4      	movs	r2, #228	; 0xe4
    c27c:	5a9a      	ldrh	r2, [r3, r2]
    c27e:	230c      	movs	r3, #12
    c280:	18fb      	adds	r3, r7, r3
    c282:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
    c284:	687b      	ldr	r3, [r7, #4]
    c286:	22dc      	movs	r2, #220	; 0xdc
    c288:	589b      	ldr	r3, [r3, r2]
    c28a:	001a      	movs	r2, r3
    c28c:	230c      	movs	r3, #12
    c28e:	18fb      	adds	r3, r7, r3
    c290:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
    c292:	230c      	movs	r3, #12
    c294:	18fb      	adds	r3, r7, r3
    c296:	2200      	movs	r2, #0
    c298:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
    c29a:	687b      	ldr	r3, [r7, #4]
    c29c:	22e0      	movs	r2, #224	; 0xe0
    c29e:	2100      	movs	r1, #0
    c2a0:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c2a2:	687b      	ldr	r3, [r7, #4]
    c2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c2a6:	220c      	movs	r2, #12
    c2a8:	18ba      	adds	r2, r7, r2
    c2aa:	6878      	ldr	r0, [r7, #4]
    c2ac:	2102      	movs	r1, #2
    c2ae:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
    c2b0:	687b      	ldr	r3, [r7, #4]
    c2b2:	22d8      	movs	r2, #216	; 0xd8
    c2b4:	2101      	movs	r1, #1
    c2b6:	5099      	str	r1, [r3, r2]
			return 1;
    c2b8:	2301      	movs	r3, #1
    c2ba:	e0a7      	b.n	c40c <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    c2bc:	495a      	ldr	r1, [pc, #360]	; (c428 <_http_client_handle_header+0x28c>)
    c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c2c0:	2210      	movs	r2, #16
    c2c2:	0018      	movs	r0, r3
    c2c4:	4b57      	ldr	r3, [pc, #348]	; (c424 <_http_client_handle_header+0x288>)
    c2c6:	4798      	blx	r3
    c2c8:	1e03      	subs	r3, r0, #0
    c2ca:	d109      	bne.n	c2e0 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c2ce:	3310      	adds	r3, #16
    c2d0:	0018      	movs	r0, r3
    c2d2:	4b56      	ldr	r3, [pc, #344]	; (c42c <_http_client_handle_header+0x290>)
    c2d4:	4798      	blx	r3
    c2d6:	0001      	movs	r1, r0
    c2d8:	687b      	ldr	r3, [r7, #4]
    c2da:	22dc      	movs	r2, #220	; 0xdc
    c2dc:	5099      	str	r1, [r3, r2]
    c2de:	e08b      	b.n	c3f8 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    c2e0:	4953      	ldr	r1, [pc, #332]	; (c430 <_http_client_handle_header+0x294>)
    c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c2e4:	2213      	movs	r2, #19
    c2e6:	0018      	movs	r0, r3
    c2e8:	4b4e      	ldr	r3, [pc, #312]	; (c424 <_http_client_handle_header+0x288>)
    c2ea:	4798      	blx	r3
    c2ec:	1e03      	subs	r3, r0, #0
    c2ee:	d127      	bne.n	c340 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c2f2:	3313      	adds	r3, #19
    c2f4:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c2f6:	e01e      	b.n	c336 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
    c2f8:	6a3b      	ldr	r3, [r7, #32]
    c2fa:	781b      	ldrb	r3, [r3, #0]
    c2fc:	2b20      	cmp	r3, #32
    c2fe:	d103      	bne.n	c308 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c300:	6a3b      	ldr	r3, [r7, #32]
    c302:	3301      	adds	r3, #1
    c304:	623b      	str	r3, [r7, #32]
    c306:	e016      	b.n	c336 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    c308:	6a3b      	ldr	r3, [r7, #32]
    c30a:	781b      	ldrb	r3, [r3, #0]
    c30c:	2b43      	cmp	r3, #67	; 0x43
    c30e:	d003      	beq.n	c318 <_http_client_handle_header+0x17c>
    c310:	6a3b      	ldr	r3, [r7, #32]
    c312:	781b      	ldrb	r3, [r3, #0]
    c314:	2b63      	cmp	r3, #99	; 0x63
    c316:	d105      	bne.n	c324 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
    c318:	687b      	ldr	r3, [r7, #4]
    c31a:	21cc      	movs	r1, #204	; 0xcc
    c31c:	2201      	movs	r2, #1
    c31e:	4252      	negs	r2, r2
    c320:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
    c322:	e069      	b.n	c3f8 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
    c324:	2386      	movs	r3, #134	; 0x86
    c326:	425a      	negs	r2, r3
    c328:	687b      	ldr	r3, [r7, #4]
    c32a:	0011      	movs	r1, r2
    c32c:	0018      	movs	r0, r3
    c32e:	4b41      	ldr	r3, [pc, #260]	; (c434 <_http_client_handle_header+0x298>)
    c330:	4798      	blx	r3
					return 0;
    c332:	2300      	movs	r3, #0
    c334:	e06a      	b.n	c40c <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c336:	69ba      	ldr	r2, [r7, #24]
    c338:	6a3b      	ldr	r3, [r7, #32]
    c33a:	429a      	cmp	r2, r3
    c33c:	d8dc      	bhi.n	c2f8 <_http_client_handle_header+0x15c>
    c33e:	e05b      	b.n	c3f8 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    c340:	493d      	ldr	r1, [pc, #244]	; (c438 <_http_client_handle_header+0x29c>)
    c342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c344:	220c      	movs	r2, #12
    c346:	0018      	movs	r0, r3
    c348:	4b36      	ldr	r3, [pc, #216]	; (c424 <_http_client_handle_header+0x288>)
    c34a:	4798      	blx	r3
    c34c:	1e03      	subs	r3, r0, #0
    c34e:	d126      	bne.n	c39e <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
    c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c352:	330c      	adds	r3, #12
    c354:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c356:	e01d      	b.n	c394 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
    c358:	69fb      	ldr	r3, [r7, #28]
    c35a:	781b      	ldrb	r3, [r3, #0]
    c35c:	2b20      	cmp	r3, #32
    c35e:	d103      	bne.n	c368 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c360:	69fb      	ldr	r3, [r7, #28]
    c362:	3301      	adds	r3, #1
    c364:	61fb      	str	r3, [r7, #28]
    c366:	e015      	b.n	c394 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    c368:	69fb      	ldr	r3, [r7, #28]
    c36a:	781b      	ldrb	r3, [r3, #0]
    c36c:	2b4b      	cmp	r3, #75	; 0x4b
    c36e:	d003      	beq.n	c378 <_http_client_handle_header+0x1dc>
    c370:	69fb      	ldr	r3, [r7, #28]
    c372:	781b      	ldrb	r3, [r3, #0]
    c374:	2b6b      	cmp	r3, #107	; 0x6b
    c376:	d106      	bne.n	c386 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
    c378:	687b      	ldr	r3, [r7, #4]
    c37a:	2241      	movs	r2, #65	; 0x41
    c37c:	5c99      	ldrb	r1, [r3, r2]
    c37e:	2002      	movs	r0, #2
    c380:	4301      	orrs	r1, r0
    c382:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
    c384:	e038      	b.n	c3f8 <_http_client_handle_header+0x25c>
					module->permanent = 0;
    c386:	687b      	ldr	r3, [r7, #4]
    c388:	2241      	movs	r2, #65	; 0x41
    c38a:	5c99      	ldrb	r1, [r3, r2]
    c38c:	2002      	movs	r0, #2
    c38e:	4381      	bics	r1, r0
    c390:	5499      	strb	r1, [r3, r2]
				break;
    c392:	e031      	b.n	c3f8 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c394:	69ba      	ldr	r2, [r7, #24]
    c396:	69fb      	ldr	r3, [r7, #28]
    c398:	429a      	cmp	r2, r3
    c39a:	d8dd      	bhi.n	c358 <_http_client_handle_header+0x1bc>
    c39c:	e02c      	b.n	c3f8 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    c39e:	4927      	ldr	r1, [pc, #156]	; (c43c <_http_client_handle_header+0x2a0>)
    c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3a2:	2205      	movs	r2, #5
    c3a4:	0018      	movs	r0, r3
    c3a6:	4b1f      	ldr	r3, [pc, #124]	; (c424 <_http_client_handle_header+0x288>)
    c3a8:	4798      	blx	r3
    c3aa:	1e03      	subs	r3, r0, #0
    c3ac:	d124      	bne.n	c3f8 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3b0:	3309      	adds	r3, #9
    c3b2:	0018      	movs	r0, r3
    c3b4:	4b1d      	ldr	r3, [pc, #116]	; (c42c <_http_client_handle_header+0x290>)
    c3b6:	4798      	blx	r3
    c3b8:	0003      	movs	r3, r0
    c3ba:	b299      	uxth	r1, r3
    c3bc:	687b      	ldr	r3, [r7, #4]
    c3be:	22e4      	movs	r2, #228	; 0xe4
    c3c0:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
    c3c2:	687b      	ldr	r3, [r7, #4]
    c3c4:	22dc      	movs	r2, #220	; 0xdc
    c3c6:	2100      	movs	r1, #0
    c3c8:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
    c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3cc:	3305      	adds	r3, #5
    c3ce:	781b      	ldrb	r3, [r3, #0]
    c3d0:	2b31      	cmp	r3, #49	; 0x31
    c3d2:	d804      	bhi.n	c3de <_http_client_handle_header+0x242>
    c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3d6:	3307      	adds	r3, #7
    c3d8:	781b      	ldrb	r3, [r3, #0]
    c3da:	2b30      	cmp	r3, #48	; 0x30
    c3dc:	d906      	bls.n	c3ec <_http_client_handle_header+0x250>
				module->permanent = 1;
    c3de:	687b      	ldr	r3, [r7, #4]
    c3e0:	2241      	movs	r2, #65	; 0x41
    c3e2:	5c99      	ldrb	r1, [r3, r2]
    c3e4:	2002      	movs	r0, #2
    c3e6:	4301      	orrs	r1, r0
    c3e8:	5499      	strb	r1, [r3, r2]
    c3ea:	e005      	b.n	c3f8 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
    c3ec:	687b      	ldr	r3, [r7, #4]
    c3ee:	2241      	movs	r2, #65	; 0x41
    c3f0:	5c99      	ldrb	r1, [r3, r2]
    c3f2:	2002      	movs	r0, #2
    c3f4:	4381      	bics	r1, r0
    c3f6:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
    c3f8:	4b06      	ldr	r3, [pc, #24]	; (c414 <_http_client_handle_header+0x278>)
    c3fa:	681b      	ldr	r3, [r3, #0]
    c3fc:	0018      	movs	r0, r3
    c3fe:	4b08      	ldr	r3, [pc, #32]	; (c420 <_http_client_handle_header+0x284>)
    c400:	4798      	blx	r3
    c402:	0002      	movs	r2, r0
    c404:	69bb      	ldr	r3, [r7, #24]
    c406:	189b      	adds	r3, r3, r2
    c408:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    c40a:	e6ce      	b.n	c1aa <_http_client_handle_header+0xe>
	}
}
    c40c:	0018      	movs	r0, r3
    c40e:	46bd      	mov	sp, r7
    c410:	b00b      	add	sp, #44	; 0x2c
    c412:	bd90      	pop	{r4, r7, pc}
    c414:	20000008 	.word	0x20000008
    c418:	00013303 	.word	0x00013303
    c41c:	0000c801 	.word	0x0000c801
    c420:	000132d3 	.word	0x000132d3
    c424:	000132e1 	.word	0x000132e1
    c428:	00019890 	.word	0x00019890
    c42c:	00012451 	.word	0x00012451
    c430:	000198b4 	.word	0x000198b4
    c434:	0000b819 	.word	0x0000b819
    c438:	000198c8 	.word	0x000198c8
    c43c:	000198d8 	.word	0x000198d8

0000c440 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
    c440:	b580      	push	{r7, lr}
    c442:	b088      	sub	sp, #32
    c444:	af00      	add	r7, sp, #0
    c446:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
    c448:	687b      	ldr	r3, [r7, #4]
    c44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c44c:	61fb      	str	r3, [r7, #28]
	int extension = 0;
    c44e:	2300      	movs	r3, #0
    c450:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
    c452:	687b      	ldr	r3, [r7, #4]
    c454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c456:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
    c458:	687b      	ldr	r3, [r7, #4]
    c45a:	22e0      	movs	r2, #224	; 0xe0
    c45c:	589b      	ldr	r3, [r3, r2]
    c45e:	2b00      	cmp	r3, #0
    c460:	db71      	blt.n	c546 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
    c462:	687b      	ldr	r3, [r7, #4]
    c464:	22e0      	movs	r2, #224	; 0xe0
    c466:	589b      	ldr	r3, [r3, r2]
    c468:	2b00      	cmp	r3, #0
    c46a:	d134      	bne.n	c4d6 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    c46c:	687b      	ldr	r3, [r7, #4]
    c46e:	22d8      	movs	r2, #216	; 0xd8
    c470:	2100      	movs	r1, #0
    c472:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    c474:	687b      	ldr	r3, [r7, #4]
    c476:	22e4      	movs	r2, #228	; 0xe4
    c478:	2100      	movs	r1, #0
    c47a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    c47c:	2308      	movs	r3, #8
    c47e:	18fb      	adds	r3, r7, r3
    c480:	2201      	movs	r2, #1
    c482:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
    c484:	2308      	movs	r3, #8
    c486:	18fb      	adds	r3, r7, r3
    c488:	2200      	movs	r2, #0
    c48a:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
    c48c:	2308      	movs	r3, #8
    c48e:	18fb      	adds	r3, r7, r3
    c490:	2200      	movs	r2, #0
    c492:	605a      	str	r2, [r3, #4]
				if (module->cb) {
    c494:	687b      	ldr	r3, [r7, #4]
    c496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c498:	2b00      	cmp	r3, #0
    c49a:	d006      	beq.n	c4aa <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c49c:	687b      	ldr	r3, [r7, #4]
    c49e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c4a0:	2208      	movs	r2, #8
    c4a2:	18ba      	adds	r2, r7, r2
    c4a4:	6878      	ldr	r0, [r7, #4]
    c4a6:	2103      	movs	r1, #3
    c4a8:	4798      	blx	r3
				}
				if (module->permanent == 0) {
    c4aa:	687b      	ldr	r3, [r7, #4]
    c4ac:	2241      	movs	r2, #65	; 0x41
    c4ae:	5c9b      	ldrb	r3, [r3, r2]
    c4b0:	2202      	movs	r2, #2
    c4b2:	4013      	ands	r3, r2
    c4b4:	b2db      	uxtb	r3, r3
    c4b6:	2b00      	cmp	r3, #0
    c4b8:	d105      	bne.n	c4c6 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
    c4ba:	687b      	ldr	r3, [r7, #4]
    c4bc:	2100      	movs	r1, #0
    c4be:	0018      	movs	r0, r3
    c4c0:	4b62      	ldr	r3, [pc, #392]	; (c64c <_http_client_read_chuked_entity+0x20c>)
    c4c2:	4798      	blx	r3
					return;
    c4c4:	e0bf      	b.n	c646 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
    c4c6:	697b      	ldr	r3, [r7, #20]
    c4c8:	1c9a      	adds	r2, r3, #2
    c4ca:	687b      	ldr	r3, [r7, #4]
    c4cc:	0011      	movs	r1, r2
    c4ce:	0018      	movs	r0, r3
    c4d0:	4b5f      	ldr	r3, [pc, #380]	; (c650 <_http_client_read_chuked_entity+0x210>)
    c4d2:	4798      	blx	r3
    c4d4:	e0b2      	b.n	c63c <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
    c4d6:	687b      	ldr	r3, [r7, #4]
    c4d8:	22e0      	movs	r2, #224	; 0xe0
    c4da:	589a      	ldr	r2, [r3, r2]
    c4dc:	69fb      	ldr	r3, [r7, #28]
    c4de:	429a      	cmp	r2, r3
    c4e0:	dd00      	ble.n	c4e4 <_http_client_read_chuked_entity+0xa4>
    c4e2:	e0ab      	b.n	c63c <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
    c4e4:	687b      	ldr	r3, [r7, #4]
    c4e6:	22e0      	movs	r2, #224	; 0xe0
    c4e8:	589b      	ldr	r3, [r3, r2]
    c4ea:	001a      	movs	r2, r3
    c4ec:	2308      	movs	r3, #8
    c4ee:	18fb      	adds	r3, r7, r3
    c4f0:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
    c4f2:	2308      	movs	r3, #8
    c4f4:	18fb      	adds	r3, r7, r3
    c4f6:	697a      	ldr	r2, [r7, #20]
    c4f8:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
    c4fa:	2308      	movs	r3, #8
    c4fc:	18fb      	adds	r3, r7, r3
    c4fe:	2200      	movs	r2, #0
    c500:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
    c502:	687b      	ldr	r3, [r7, #4]
    c504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c506:	2b00      	cmp	r3, #0
    c508:	d006      	beq.n	c518 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c50e:	2208      	movs	r2, #8
    c510:	18ba      	adds	r2, r7, r2
    c512:	6878      	ldr	r0, [r7, #4]
    c514:	2103      	movs	r1, #3
    c516:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    c518:	687b      	ldr	r3, [r7, #4]
    c51a:	22e0      	movs	r2, #224	; 0xe0
    c51c:	589b      	ldr	r3, [r3, r2]
    c51e:	3302      	adds	r3, #2
    c520:	697a      	ldr	r2, [r7, #20]
    c522:	18d2      	adds	r2, r2, r3
    c524:	687b      	ldr	r3, [r7, #4]
    c526:	0011      	movs	r1, r2
    c528:	0018      	movs	r0, r3
    c52a:	4b49      	ldr	r3, [pc, #292]	; (c650 <_http_client_read_chuked_entity+0x210>)
    c52c:	4798      	blx	r3
				length = (int)module->recved_size;
    c52e:	687b      	ldr	r3, [r7, #4]
    c530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c532:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
    c534:	687b      	ldr	r3, [r7, #4]
    c536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c538:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
    c53a:	687b      	ldr	r3, [r7, #4]
    c53c:	21e0      	movs	r1, #224	; 0xe0
    c53e:	2201      	movs	r2, #1
    c540:	4252      	negs	r2, r2
    c542:	505a      	str	r2, [r3, r1]
    c544:	e07a      	b.n	c63c <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
    c546:	687b      	ldr	r3, [r7, #4]
    c548:	22e0      	movs	r2, #224	; 0xe0
    c54a:	2100      	movs	r1, #0
    c54c:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
    c54e:	e05a      	b.n	c606 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
    c550:	697b      	ldr	r3, [r7, #20]
    c552:	781b      	ldrb	r3, [r3, #0]
    c554:	2b0a      	cmp	r3, #10
    c556:	d106      	bne.n	c566 <_http_client_read_chuked_entity+0x126>
					buffer++;
    c558:	697b      	ldr	r3, [r7, #20]
    c55a:	3301      	adds	r3, #1
    c55c:	617b      	str	r3, [r7, #20]
					length--;
    c55e:	69fb      	ldr	r3, [r7, #28]
    c560:	3b01      	subs	r3, #1
    c562:	61fb      	str	r3, [r7, #28]
					break;
    c564:	e052      	b.n	c60c <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
    c566:	69bb      	ldr	r3, [r7, #24]
    c568:	2b00      	cmp	r3, #0
    c56a:	d145      	bne.n	c5f8 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
    c56c:	697b      	ldr	r3, [r7, #20]
    c56e:	781b      	ldrb	r3, [r3, #0]
    c570:	2b2f      	cmp	r3, #47	; 0x2f
    c572:	d910      	bls.n	c596 <_http_client_read_chuked_entity+0x156>
    c574:	697b      	ldr	r3, [r7, #20]
    c576:	781b      	ldrb	r3, [r3, #0]
    c578:	2b39      	cmp	r3, #57	; 0x39
    c57a:	d80c      	bhi.n	c596 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    c57c:	687b      	ldr	r3, [r7, #4]
    c57e:	22e0      	movs	r2, #224	; 0xe0
    c580:	589b      	ldr	r3, [r3, r2]
    c582:	011b      	lsls	r3, r3, #4
    c584:	697a      	ldr	r2, [r7, #20]
    c586:	7812      	ldrb	r2, [r2, #0]
    c588:	189b      	adds	r3, r3, r2
    c58a:	3b30      	subs	r3, #48	; 0x30
    c58c:	001a      	movs	r2, r3
    c58e:	687b      	ldr	r3, [r7, #4]
    c590:	21e0      	movs	r1, #224	; 0xe0
    c592:	505a      	str	r2, [r3, r1]
    c594:	e031      	b.n	c5fa <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    c596:	697b      	ldr	r3, [r7, #20]
    c598:	781b      	ldrb	r3, [r3, #0]
    c59a:	2b60      	cmp	r3, #96	; 0x60
    c59c:	d910      	bls.n	c5c0 <_http_client_read_chuked_entity+0x180>
    c59e:	697b      	ldr	r3, [r7, #20]
    c5a0:	781b      	ldrb	r3, [r3, #0]
    c5a2:	2b66      	cmp	r3, #102	; 0x66
    c5a4:	d80c      	bhi.n	c5c0 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    c5a6:	687b      	ldr	r3, [r7, #4]
    c5a8:	22e0      	movs	r2, #224	; 0xe0
    c5aa:	589b      	ldr	r3, [r3, r2]
    c5ac:	011b      	lsls	r3, r3, #4
    c5ae:	697a      	ldr	r2, [r7, #20]
    c5b0:	7812      	ldrb	r2, [r2, #0]
    c5b2:	189b      	adds	r3, r3, r2
    c5b4:	3b61      	subs	r3, #97	; 0x61
    c5b6:	001a      	movs	r2, r3
    c5b8:	687b      	ldr	r3, [r7, #4]
    c5ba:	21e0      	movs	r1, #224	; 0xe0
    c5bc:	505a      	str	r2, [r3, r1]
    c5be:	e01c      	b.n	c5fa <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    c5c0:	697b      	ldr	r3, [r7, #20]
    c5c2:	781b      	ldrb	r3, [r3, #0]
    c5c4:	2b40      	cmp	r3, #64	; 0x40
    c5c6:	d910      	bls.n	c5ea <_http_client_read_chuked_entity+0x1aa>
    c5c8:	697b      	ldr	r3, [r7, #20]
    c5ca:	781b      	ldrb	r3, [r3, #0]
    c5cc:	2b46      	cmp	r3, #70	; 0x46
    c5ce:	d80c      	bhi.n	c5ea <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    c5d0:	687b      	ldr	r3, [r7, #4]
    c5d2:	22e0      	movs	r2, #224	; 0xe0
    c5d4:	589b      	ldr	r3, [r3, r2]
    c5d6:	011b      	lsls	r3, r3, #4
    c5d8:	697a      	ldr	r2, [r7, #20]
    c5da:	7812      	ldrb	r2, [r2, #0]
    c5dc:	189b      	adds	r3, r3, r2
    c5de:	3b41      	subs	r3, #65	; 0x41
    c5e0:	001a      	movs	r2, r3
    c5e2:	687b      	ldr	r3, [r7, #4]
    c5e4:	21e0      	movs	r1, #224	; 0xe0
    c5e6:	505a      	str	r2, [r3, r1]
    c5e8:	e007      	b.n	c5fa <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
    c5ea:	697b      	ldr	r3, [r7, #20]
    c5ec:	781b      	ldrb	r3, [r3, #0]
    c5ee:	2b3b      	cmp	r3, #59	; 0x3b
    c5f0:	d103      	bne.n	c5fa <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
    c5f2:	2301      	movs	r3, #1
    c5f4:	61bb      	str	r3, [r7, #24]
    c5f6:	e000      	b.n	c5fa <_http_client_read_chuked_entity+0x1ba>
					continue;
    c5f8:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
    c5fa:	697b      	ldr	r3, [r7, #20]
    c5fc:	3301      	adds	r3, #1
    c5fe:	617b      	str	r3, [r7, #20]
    c600:	69fb      	ldr	r3, [r7, #28]
    c602:	3b01      	subs	r3, #1
    c604:	61fb      	str	r3, [r7, #28]
    c606:	69fb      	ldr	r3, [r7, #28]
    c608:	2b00      	cmp	r3, #0
    c60a:	dca1      	bgt.n	c550 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    c60c:	687b      	ldr	r3, [r7, #4]
    c60e:	22e0      	movs	r2, #224	; 0xe0
    c610:	589a      	ldr	r2, [r3, r2]
    c612:	687b      	ldr	r3, [r7, #4]
    c614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c616:	429a      	cmp	r2, r3
    c618:	dd07      	ble.n	c62a <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
    c61a:	238b      	movs	r3, #139	; 0x8b
    c61c:	425a      	negs	r2, r3
    c61e:	687b      	ldr	r3, [r7, #4]
    c620:	0011      	movs	r1, r2
    c622:	0018      	movs	r0, r3
    c624:	4b09      	ldr	r3, [pc, #36]	; (c64c <_http_client_read_chuked_entity+0x20c>)
    c626:	4798      	blx	r3
				return;
    c628:	e00d      	b.n	c646 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
    c62a:	69fb      	ldr	r3, [r7, #28]
    c62c:	2b00      	cmp	r3, #0
    c62e:	d105      	bne.n	c63c <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
    c630:	687b      	ldr	r3, [r7, #4]
    c632:	21e0      	movs	r1, #224	; 0xe0
    c634:	2201      	movs	r2, #1
    c636:	4252      	negs	r2, r2
    c638:	505a      	str	r2, [r3, r1]
				return;
    c63a:	e004      	b.n	c646 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
    c63c:	687b      	ldr	r3, [r7, #4]
    c63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c640:	2b00      	cmp	r3, #0
    c642:	d000      	beq.n	c646 <_http_client_read_chuked_entity+0x206>
    c644:	e708      	b.n	c458 <_http_client_read_chuked_entity+0x18>
}
    c646:	46bd      	mov	sp, r7
    c648:	b008      	add	sp, #32
    c64a:	bd80      	pop	{r7, pc}
    c64c:	0000b819 	.word	0x0000b819
    c650:	0000c801 	.word	0x0000c801

0000c654 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
    c654:	b580      	push	{r7, lr}
    c656:	b086      	sub	sp, #24
    c658:	af00      	add	r7, sp, #0
    c65a:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
    c65c:	687b      	ldr	r3, [r7, #4]
    c65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c660:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    c662:	687b      	ldr	r3, [r7, #4]
    c664:	22dc      	movs	r2, #220	; 0xdc
    c666:	589b      	ldr	r3, [r3, r2]
    c668:	2b00      	cmp	r3, #0
    c66a:	db58      	blt.n	c71e <_http_client_handle_entity+0xca>
    c66c:	687b      	ldr	r3, [r7, #4]
    c66e:	22dc      	movs	r2, #220	; 0xdc
    c670:	589a      	ldr	r2, [r3, r2]
    c672:	687b      	ldr	r3, [r7, #4]
    c674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c676:	429a      	cmp	r2, r3
    c678:	dc51      	bgt.n	c71e <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
    c67a:	687b      	ldr	r3, [r7, #4]
    c67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c67e:	0019      	movs	r1, r3
    c680:	687b      	ldr	r3, [r7, #4]
    c682:	22dc      	movs	r2, #220	; 0xdc
    c684:	589b      	ldr	r3, [r3, r2]
    c686:	4299      	cmp	r1, r3
    c688:	da00      	bge.n	c68c <_http_client_handle_entity+0x38>
    c68a:	e0a9      	b.n	c7e0 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
    c68c:	687b      	ldr	r3, [r7, #4]
    c68e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c690:	2b00      	cmp	r3, #0
    c692:	d020      	beq.n	c6d6 <_http_client_handle_entity+0x82>
    c694:	687b      	ldr	r3, [r7, #4]
    c696:	22e4      	movs	r2, #228	; 0xe4
    c698:	5a9b      	ldrh	r3, [r3, r2]
    c69a:	2b00      	cmp	r3, #0
    c69c:	d01b      	beq.n	c6d6 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
    c69e:	687b      	ldr	r3, [r7, #4]
    c6a0:	22e4      	movs	r2, #228	; 0xe4
    c6a2:	5a9a      	ldrh	r2, [r3, r2]
    c6a4:	2308      	movs	r3, #8
    c6a6:	18fb      	adds	r3, r7, r3
    c6a8:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
    c6aa:	2308      	movs	r3, #8
    c6ac:	18fb      	adds	r3, r7, r3
    c6ae:	2200      	movs	r2, #0
    c6b0:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
    c6b2:	687b      	ldr	r3, [r7, #4]
    c6b4:	22dc      	movs	r2, #220	; 0xdc
    c6b6:	589b      	ldr	r3, [r3, r2]
    c6b8:	001a      	movs	r2, r3
    c6ba:	2308      	movs	r3, #8
    c6bc:	18fb      	adds	r3, r7, r3
    c6be:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
    c6c0:	2308      	movs	r3, #8
    c6c2:	18fb      	adds	r3, r7, r3
    c6c4:	697a      	ldr	r2, [r7, #20]
    c6c6:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c6c8:	687b      	ldr	r3, [r7, #4]
    c6ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c6cc:	2208      	movs	r2, #8
    c6ce:	18ba      	adds	r2, r7, r2
    c6d0:	6878      	ldr	r0, [r7, #4]
    c6d2:	2102      	movs	r1, #2
    c6d4:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
    c6d6:	687b      	ldr	r3, [r7, #4]
    c6d8:	22d8      	movs	r2, #216	; 0xd8
    c6da:	2100      	movs	r1, #0
    c6dc:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	22e4      	movs	r2, #228	; 0xe4
    c6e2:	2100      	movs	r1, #0
    c6e4:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
    c6e6:	687b      	ldr	r3, [r7, #4]
    c6e8:	2241      	movs	r2, #65	; 0x41
    c6ea:	5c9b      	ldrb	r3, [r3, r2]
    c6ec:	2202      	movs	r2, #2
    c6ee:	4013      	ands	r3, r2
    c6f0:	b2db      	uxtb	r3, r3
    c6f2:	2b00      	cmp	r3, #0
    c6f4:	d105      	bne.n	c702 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
    c6f6:	687b      	ldr	r3, [r7, #4]
    c6f8:	2100      	movs	r1, #0
    c6fa:	0018      	movs	r0, r3
    c6fc:	4b3b      	ldr	r3, [pc, #236]	; (c7ec <_http_client_handle_entity+0x198>)
    c6fe:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
    c700:	e06e      	b.n	c7e0 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    c702:	687b      	ldr	r3, [r7, #4]
    c704:	22dc      	movs	r2, #220	; 0xdc
    c706:	589b      	ldr	r3, [r3, r2]
    c708:	001a      	movs	r2, r3
    c70a:	697b      	ldr	r3, [r7, #20]
    c70c:	189a      	adds	r2, r3, r2
    c70e:	687b      	ldr	r3, [r7, #4]
    c710:	0011      	movs	r1, r2
    c712:	0018      	movs	r0, r3
    c714:	4b36      	ldr	r3, [pc, #216]	; (c7f0 <_http_client_handle_entity+0x19c>)
    c716:	4798      	blx	r3
				return module->recved_size;
    c718:	687b      	ldr	r3, [r7, #4]
    c71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c71c:	e061      	b.n	c7e2 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
    c71e:	687b      	ldr	r3, [r7, #4]
    c720:	22dc      	movs	r2, #220	; 0xdc
    c722:	589b      	ldr	r3, [r3, r2]
    c724:	2b00      	cmp	r3, #0
    c726:	db57      	blt.n	c7d8 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
    c728:	687b      	ldr	r3, [r7, #4]
    c72a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c72c:	2308      	movs	r3, #8
    c72e:	18fb      	adds	r3, r7, r3
    c730:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
    c732:	2308      	movs	r3, #8
    c734:	18fb      	adds	r3, r7, r3
    c736:	697a      	ldr	r2, [r7, #20]
    c738:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
    c73a:	687b      	ldr	r3, [r7, #4]
    c73c:	22e0      	movs	r2, #224	; 0xe0
    c73e:	589a      	ldr	r2, [r3, r2]
    c740:	687b      	ldr	r3, [r7, #4]
    c742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c744:	18d2      	adds	r2, r2, r3
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	21e0      	movs	r1, #224	; 0xe0
    c74a:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	22dc      	movs	r2, #220	; 0xdc
    c750:	589a      	ldr	r2, [r3, r2]
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	21e0      	movs	r1, #224	; 0xe0
    c756:	585b      	ldr	r3, [r3, r1]
    c758:	429a      	cmp	r2, r3
    c75a:	dc0c      	bgt.n	c776 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    c75c:	687b      	ldr	r3, [r7, #4]
    c75e:	22d8      	movs	r2, #216	; 0xd8
    c760:	2100      	movs	r1, #0
    c762:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    c764:	687b      	ldr	r3, [r7, #4]
    c766:	22e4      	movs	r2, #228	; 0xe4
    c768:	2100      	movs	r1, #0
    c76a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    c76c:	2308      	movs	r3, #8
    c76e:	18fb      	adds	r3, r7, r3
    c770:	2201      	movs	r2, #1
    c772:	721a      	strb	r2, [r3, #8]
    c774:	e003      	b.n	c77e <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
    c776:	2308      	movs	r3, #8
    c778:	18fb      	adds	r3, r7, r3
    c77a:	2200      	movs	r2, #0
    c77c:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
    c77e:	687b      	ldr	r3, [r7, #4]
    c780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c782:	2b00      	cmp	r3, #0
    c784:	d006      	beq.n	c794 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c786:	687b      	ldr	r3, [r7, #4]
    c788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c78a:	2208      	movs	r2, #8
    c78c:	18ba      	adds	r2, r7, r2
    c78e:	6878      	ldr	r0, [r7, #4]
    c790:	2103      	movs	r1, #3
    c792:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
    c794:	2308      	movs	r3, #8
    c796:	18fb      	adds	r3, r7, r3
    c798:	7a1b      	ldrb	r3, [r3, #8]
    c79a:	2b01      	cmp	r3, #1
    c79c:	d112      	bne.n	c7c4 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
    c79e:	687b      	ldr	r3, [r7, #4]
    c7a0:	2241      	movs	r2, #65	; 0x41
    c7a2:	5c9b      	ldrb	r3, [r3, r2]
    c7a4:	2202      	movs	r2, #2
    c7a6:	4013      	ands	r3, r2
    c7a8:	b2db      	uxtb	r3, r3
    c7aa:	2b00      	cmp	r3, #0
    c7ac:	d10a      	bne.n	c7c4 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
    c7ae:	4b11      	ldr	r3, [pc, #68]	; (c7f4 <_http_client_handle_entity+0x1a0>)
    c7b0:	0018      	movs	r0, r3
    c7b2:	4b11      	ldr	r3, [pc, #68]	; (c7f8 <_http_client_handle_entity+0x1a4>)
    c7b4:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    c7b6:	687b      	ldr	r3, [r7, #4]
    c7b8:	2100      	movs	r1, #0
    c7ba:	0018      	movs	r0, r3
    c7bc:	4b0b      	ldr	r3, [pc, #44]	; (c7ec <_http_client_handle_entity+0x198>)
    c7be:	4798      	blx	r3
					return 0;
    c7c0:	2300      	movs	r3, #0
    c7c2:	e00e      	b.n	c7e2 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
    c7c4:	687b      	ldr	r3, [r7, #4]
    c7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c7c8:	697a      	ldr	r2, [r7, #20]
    c7ca:	18d2      	adds	r2, r2, r3
    c7cc:	687b      	ldr	r3, [r7, #4]
    c7ce:	0011      	movs	r1, r2
    c7d0:	0018      	movs	r0, r3
    c7d2:	4b07      	ldr	r3, [pc, #28]	; (c7f0 <_http_client_handle_entity+0x19c>)
    c7d4:	4798      	blx	r3
    c7d6:	e003      	b.n	c7e0 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
    c7d8:	687b      	ldr	r3, [r7, #4]
    c7da:	0018      	movs	r0, r3
    c7dc:	4b07      	ldr	r3, [pc, #28]	; (c7fc <_http_client_handle_entity+0x1a8>)
    c7de:	4798      	blx	r3
		}
	}

	return 0;
    c7e0:	2300      	movs	r3, #0
}
    c7e2:	0018      	movs	r0, r3
    c7e4:	46bd      	mov	sp, r7
    c7e6:	b006      	add	sp, #24
    c7e8:	bd80      	pop	{r7, pc}
    c7ea:	46c0      	nop			; (mov r8, r8)
    c7ec:	0000b819 	.word	0x0000b819
    c7f0:	0000c801 	.word	0x0000c801
    c7f4:	000198e0 	.word	0x000198e0
    c7f8:	0001308d 	.word	0x0001308d
    c7fc:	0000c441 	.word	0x0000c441

0000c800 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    c800:	b580      	push	{r7, lr}
    c802:	b084      	sub	sp, #16
    c804:	af00      	add	r7, sp, #0
    c806:	6078      	str	r0, [r7, #4]
    c808:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
    c80a:	687b      	ldr	r3, [r7, #4]
    c80c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c80e:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    c810:	687b      	ldr	r3, [r7, #4]
    c812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c814:	001a      	movs	r2, r3
    c816:	683b      	ldr	r3, [r7, #0]
    c818:	1ad2      	subs	r2, r2, r3
    c81a:	68fb      	ldr	r3, [r7, #12]
    c81c:	18d3      	adds	r3, r2, r3
    c81e:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
    c820:	68bb      	ldr	r3, [r7, #8]
    c822:	2b00      	cmp	r3, #0
    c824:	dd09      	ble.n	c83a <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
    c826:	68ba      	ldr	r2, [r7, #8]
    c828:	6839      	ldr	r1, [r7, #0]
    c82a:	68fb      	ldr	r3, [r7, #12]
    c82c:	0018      	movs	r0, r3
    c82e:	4b06      	ldr	r3, [pc, #24]	; (c848 <_http_client_move_buffer+0x48>)
    c830:	4798      	blx	r3
		module->recved_size = remain;
    c832:	68ba      	ldr	r2, [r7, #8]
    c834:	687b      	ldr	r3, [r7, #4]
    c836:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
    c838:	e002      	b.n	c840 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
    c83a:	687b      	ldr	r3, [r7, #4]
    c83c:	2200      	movs	r2, #0
    c83e:	645a      	str	r2, [r3, #68]	; 0x44
}
    c840:	46c0      	nop			; (mov r8, r8)
    c842:	46bd      	mov	sp, r7
    c844:	b004      	add	sp, #16
    c846:	bd80      	pop	{r7, pc}
    c848:	0001250b 	.word	0x0001250b

0000c84c <stream_writer_init>:
#include "iot/stream_writer.h"
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    c84c:	b580      	push	{r7, lr}
    c84e:	b084      	sub	sp, #16
    c850:	af00      	add	r7, sp, #0
    c852:	60f8      	str	r0, [r7, #12]
    c854:	60b9      	str	r1, [r7, #8]
    c856:	607a      	str	r2, [r7, #4]
    c858:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    c85a:	68fb      	ldr	r3, [r7, #12]
    c85c:	687a      	ldr	r2, [r7, #4]
    c85e:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    c860:	68fb      	ldr	r3, [r7, #12]
    c862:	68ba      	ldr	r2, [r7, #8]
    c864:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    c866:	68fb      	ldr	r3, [r7, #12]
    c868:	2200      	movs	r2, #0
    c86a:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    c86c:	68fb      	ldr	r3, [r7, #12]
    c86e:	683a      	ldr	r2, [r7, #0]
    c870:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    c872:	68fb      	ldr	r3, [r7, #12]
    c874:	69ba      	ldr	r2, [r7, #24]
    c876:	60da      	str	r2, [r3, #12]
}
    c878:	46c0      	nop			; (mov r8, r8)
    c87a:	46bd      	mov	sp, r7
    c87c:	b004      	add	sp, #16
    c87e:	bd80      	pop	{r7, pc}

0000c880 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    c880:	b580      	push	{r7, lr}
    c882:	b084      	sub	sp, #16
    c884:	af00      	add	r7, sp, #0
    c886:	6078      	str	r0, [r7, #4]
    c888:	000a      	movs	r2, r1
    c88a:	1cfb      	adds	r3, r7, #3
    c88c:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    c88e:	687b      	ldr	r3, [r7, #4]
    c890:	681a      	ldr	r2, [r3, #0]
    c892:	687b      	ldr	r3, [r7, #4]
    c894:	685b      	ldr	r3, [r3, #4]
    c896:	1ad3      	subs	r3, r2, r3
    c898:	60fb      	str	r3, [r7, #12]

	if (remain < 1) {
    c89a:	68fb      	ldr	r3, [r7, #12]
    c89c:	2b00      	cmp	r3, #0
    c89e:	dc03      	bgt.n	c8a8 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    c8a0:	687b      	ldr	r3, [r7, #4]
    c8a2:	0018      	movs	r0, r3
    c8a4:	4b08      	ldr	r3, [pc, #32]	; (c8c8 <stream_writer_send_8+0x48>)
    c8a6:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    c8a8:	687b      	ldr	r3, [r7, #4]
    c8aa:	6919      	ldr	r1, [r3, #16]
    c8ac:	687b      	ldr	r3, [r7, #4]
    c8ae:	685b      	ldr	r3, [r3, #4]
    c8b0:	1c58      	adds	r0, r3, #1
    c8b2:	687a      	ldr	r2, [r7, #4]
    c8b4:	6050      	str	r0, [r2, #4]
    c8b6:	18cb      	adds	r3, r1, r3
    c8b8:	1cfa      	adds	r2, r7, #3
    c8ba:	7812      	ldrb	r2, [r2, #0]
    c8bc:	701a      	strb	r2, [r3, #0]
}
    c8be:	46c0      	nop			; (mov r8, r8)
    c8c0:	46bd      	mov	sp, r7
    c8c2:	b004      	add	sp, #16
    c8c4:	bd80      	pop	{r7, pc}
    c8c6:	46c0      	nop			; (mov r8, r8)
    c8c8:	0000c949 	.word	0x0000c949

0000c8cc <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    c8cc:	b580      	push	{r7, lr}
    c8ce:	b082      	sub	sp, #8
    c8d0:	af00      	add	r7, sp, #0
    c8d2:	6078      	str	r0, [r7, #4]
    c8d4:	000a      	movs	r2, r1
    c8d6:	1cbb      	adds	r3, r7, #2
    c8d8:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    c8da:	1cbb      	adds	r3, r7, #2
    c8dc:	2200      	movs	r2, #0
    c8de:	5e9b      	ldrsh	r3, [r3, r2]
    c8e0:	121b      	asrs	r3, r3, #8
    c8e2:	b21b      	sxth	r3, r3
    c8e4:	b25a      	sxtb	r2, r3
    c8e6:	687b      	ldr	r3, [r7, #4]
    c8e8:	0011      	movs	r1, r2
    c8ea:	0018      	movs	r0, r3
    c8ec:	4b06      	ldr	r3, [pc, #24]	; (c908 <stream_writer_send_16BE+0x3c>)
    c8ee:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
    c8f0:	1cbb      	adds	r3, r7, #2
    c8f2:	881b      	ldrh	r3, [r3, #0]
    c8f4:	b25a      	sxtb	r2, r3
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	0011      	movs	r1, r2
    c8fa:	0018      	movs	r0, r3
    c8fc:	4b02      	ldr	r3, [pc, #8]	; (c908 <stream_writer_send_16BE+0x3c>)
    c8fe:	4798      	blx	r3
}
    c900:	46c0      	nop			; (mov r8, r8)
    c902:	46bd      	mov	sp, r7
    c904:	b002      	add	sp, #8
    c906:	bd80      	pop	{r7, pc}
    c908:	0000c881 	.word	0x0000c881

0000c90c <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    c90c:	b580      	push	{r7, lr}
    c90e:	b084      	sub	sp, #16
    c910:	af00      	add	r7, sp, #0
    c912:	60f8      	str	r0, [r7, #12]
    c914:	60b9      	str	r1, [r7, #8]
    c916:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    c918:	e00d      	b.n	c936 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    c91a:	68bb      	ldr	r3, [r7, #8]
    c91c:	781b      	ldrb	r3, [r3, #0]
    c91e:	b25a      	sxtb	r2, r3
    c920:	68fb      	ldr	r3, [r7, #12]
    c922:	0011      	movs	r1, r2
    c924:	0018      	movs	r0, r3
    c926:	4b07      	ldr	r3, [pc, #28]	; (c944 <stream_writer_send_buffer+0x38>)
    c928:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    c92a:	687b      	ldr	r3, [r7, #4]
    c92c:	3b01      	subs	r3, #1
    c92e:	607b      	str	r3, [r7, #4]
    c930:	68bb      	ldr	r3, [r7, #8]
    c932:	3301      	adds	r3, #1
    c934:	60bb      	str	r3, [r7, #8]
    c936:	687b      	ldr	r3, [r7, #4]
    c938:	2b00      	cmp	r3, #0
    c93a:	d1ee      	bne.n	c91a <stream_writer_send_buffer+0xe>
	}
}
    c93c:	46c0      	nop			; (mov r8, r8)
    c93e:	46bd      	mov	sp, r7
    c940:	b004      	add	sp, #16
    c942:	bd80      	pop	{r7, pc}
    c944:	0000c881 	.word	0x0000c881

0000c948 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    c948:	b590      	push	{r4, r7, lr}
    c94a:	b083      	sub	sp, #12
    c94c:	af00      	add	r7, sp, #0
    c94e:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    c950:	687b      	ldr	r3, [r7, #4]
    c952:	685b      	ldr	r3, [r3, #4]
    c954:	2b00      	cmp	r3, #0
    c956:	d00c      	beq.n	c972 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    c958:	687b      	ldr	r3, [r7, #4]
    c95a:	689c      	ldr	r4, [r3, #8]
    c95c:	687b      	ldr	r3, [r7, #4]
    c95e:	68d8      	ldr	r0, [r3, #12]
    c960:	687b      	ldr	r3, [r7, #4]
    c962:	6919      	ldr	r1, [r3, #16]
    c964:	687b      	ldr	r3, [r7, #4]
    c966:	685b      	ldr	r3, [r3, #4]
    c968:	001a      	movs	r2, r3
    c96a:	47a0      	blx	r4
		writer->written = 0;
    c96c:	687b      	ldr	r3, [r7, #4]
    c96e:	2200      	movs	r2, #0
    c970:	605a      	str	r2, [r3, #4]
	}
}
    c972:	46c0      	nop			; (mov r8, r8)
    c974:	46bd      	mov	sp, r7
    c976:	b003      	add	sp, #12
    c978:	bd90      	pop	{r4, r7, pc}
	...

0000c97c <system_cpu_clock_get_hz>:
{
    c97c:	b580      	push	{r7, lr}
    c97e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    c980:	2000      	movs	r0, #0
    c982:	4b05      	ldr	r3, [pc, #20]	; (c998 <system_cpu_clock_get_hz+0x1c>)
    c984:	4798      	blx	r3
    c986:	0002      	movs	r2, r0
    c988:	4b04      	ldr	r3, [pc, #16]	; (c99c <system_cpu_clock_get_hz+0x20>)
    c98a:	7a1b      	ldrb	r3, [r3, #8]
    c98c:	b2db      	uxtb	r3, r3
    c98e:	40da      	lsrs	r2, r3
    c990:	0013      	movs	r3, r2
}
    c992:	0018      	movs	r0, r3
    c994:	46bd      	mov	sp, r7
    c996:	bd80      	pop	{r7, pc}
    c998:	00010d81 	.word	0x00010d81
    c99c:	40000400 	.word	0x40000400

0000c9a0 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    c9a0:	b580      	push	{r7, lr}
    c9a2:	b084      	sub	sp, #16
    c9a4:	af00      	add	r7, sp, #0
    c9a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    c9a8:	687b      	ldr	r3, [r7, #4]
    c9aa:	681b      	ldr	r3, [r3, #0]
    c9ac:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    c9ae:	46c0      	nop			; (mov r8, r8)
    c9b0:	68fb      	ldr	r3, [r7, #12]
    c9b2:	689b      	ldr	r3, [r3, #8]
    c9b4:	2202      	movs	r2, #2
    c9b6:	4013      	ands	r3, r2
    c9b8:	d1fa      	bne.n	c9b0 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    c9ba:	68fb      	ldr	r3, [r7, #12]
    c9bc:	681b      	ldr	r3, [r3, #0]
    c9be:	2202      	movs	r2, #2
    c9c0:	431a      	orrs	r2, r3
    c9c2:	68fb      	ldr	r3, [r7, #12]
    c9c4:	601a      	str	r2, [r3, #0]
}
    c9c6:	46c0      	nop			; (mov r8, r8)
    c9c8:	46bd      	mov	sp, r7
    c9ca:	b004      	add	sp, #16
    c9cc:	bd80      	pop	{r7, pc}
	...

0000c9d0 <sw_timer_tcc_callback>:
 * This function performs to the increasing the tick count.
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    c9d0:	b580      	push	{r7, lr}
    c9d2:	b082      	sub	sp, #8
    c9d4:	af00      	add	r7, sp, #0
    c9d6:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    c9d8:	4b04      	ldr	r3, [pc, #16]	; (c9ec <sw_timer_tcc_callback+0x1c>)
    c9da:	681b      	ldr	r3, [r3, #0]
    c9dc:	1c5a      	adds	r2, r3, #1
    c9de:	4b03      	ldr	r3, [pc, #12]	; (c9ec <sw_timer_tcc_callback+0x1c>)
    c9e0:	601a      	str	r2, [r3, #0]
}
    c9e2:	46c0      	nop			; (mov r8, r8)
    c9e4:	46bd      	mov	sp, r7
    c9e6:	b002      	add	sp, #8
    c9e8:	bd80      	pop	{r7, pc}
    c9ea:	46c0      	nop			; (mov r8, r8)
    c9ec:	20000258 	.word	0x20000258

0000c9f0 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    c9f0:	b580      	push	{r7, lr}
    c9f2:	b082      	sub	sp, #8
    c9f4:	af00      	add	r7, sp, #0
    c9f6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    c9f8:	687b      	ldr	r3, [r7, #4]
    c9fa:	2264      	movs	r2, #100	; 0x64
    c9fc:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	2200      	movs	r2, #0
    ca02:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	2200      	movs	r2, #0
    ca08:	705a      	strb	r2, [r3, #1]
}
    ca0a:	46c0      	nop			; (mov r8, r8)
    ca0c:	46bd      	mov	sp, r7
    ca0e:	b002      	add	sp, #8
    ca10:	bd80      	pop	{r7, pc}
	...

0000ca14 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    ca14:	b590      	push	{r4, r7, lr}
    ca16:	b0b1      	sub	sp, #196	; 0xc4
    ca18:	af00      	add	r7, sp, #0
    ca1a:	6078      	str	r0, [r7, #4]
    ca1c:	6039      	str	r1, [r7, #0]
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    ca1e:	230c      	movs	r3, #12
    ca20:	18fb      	adds	r3, r7, r3
    ca22:	4a2e      	ldr	r2, [pc, #184]	; (cadc <sw_timer_init+0xc8>)
    ca24:	ca13      	ldmia	r2!, {r0, r1, r4}
    ca26:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    ca28:	683b      	ldr	r3, [r7, #0]
    ca2a:	885b      	ldrh	r3, [r3, #2]
    ca2c:	001a      	movs	r2, r3
    ca2e:	687b      	ldr	r3, [r7, #4]
    ca30:	655a      	str	r2, [r3, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    ca32:	687b      	ldr	r3, [r7, #4]
    ca34:	3314      	adds	r3, #20
    ca36:	22bc      	movs	r2, #188	; 0xbc
    ca38:	18ba      	adds	r2, r7, r2
    ca3a:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    ca3c:	683b      	ldr	r3, [r7, #0]
    ca3e:	781b      	ldrb	r3, [r3, #0]
    ca40:	001a      	movs	r2, r3
    ca42:	230c      	movs	r3, #12
    ca44:	18fb      	adds	r3, r7, r3
    ca46:	0092      	lsls	r2, r2, #2
    ca48:	58d2      	ldr	r2, [r2, r3]
    ca4a:	2318      	movs	r3, #24
    ca4c:	18fb      	adds	r3, r7, r3
    ca4e:	0011      	movs	r1, r2
    ca50:	0018      	movs	r0, r3
    ca52:	4b23      	ldr	r3, [pc, #140]	; (cae0 <sw_timer_init+0xcc>)
    ca54:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    ca56:	4b23      	ldr	r3, [pc, #140]	; (cae4 <sw_timer_init+0xd0>)
    ca58:	4798      	blx	r3
    ca5a:	0004      	movs	r4, r0
    ca5c:	683b      	ldr	r3, [r7, #0]
    ca5e:	885b      	ldrh	r3, [r3, #2]
    ca60:	001a      	movs	r2, r3
    ca62:	4b21      	ldr	r3, [pc, #132]	; (cae8 <sw_timer_init+0xd4>)
    ca64:	0011      	movs	r1, r2
    ca66:	22fa      	movs	r2, #250	; 0xfa
    ca68:	0210      	lsls	r0, r2, #8
    ca6a:	4798      	blx	r3
    ca6c:	0003      	movs	r3, r0
    ca6e:	001a      	movs	r2, r3
    ca70:	4b1e      	ldr	r3, [pc, #120]	; (caec <sw_timer_init+0xd8>)
    ca72:	0011      	movs	r1, r2
    ca74:	0020      	movs	r0, r4
    ca76:	4798      	blx	r3
    ca78:	0003      	movs	r3, r0
    ca7a:	001a      	movs	r2, r3
    ca7c:	2318      	movs	r3, #24
    ca7e:	18fb      	adds	r3, r7, r3
    ca80:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    ca82:	2318      	movs	r3, #24
    ca84:	18fb      	adds	r3, r7, r3
    ca86:	2205      	movs	r2, #5
    ca88:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    ca8a:	683b      	ldr	r3, [r7, #0]
    ca8c:	781b      	ldrb	r3, [r3, #0]
    ca8e:	001a      	movs	r2, r3
    ca90:	230c      	movs	r3, #12
    ca92:	18fb      	adds	r3, r7, r3
    ca94:	0092      	lsls	r2, r2, #2
    ca96:	58d1      	ldr	r1, [r2, r3]
    ca98:	2318      	movs	r3, #24
    ca9a:	18fa      	adds	r2, r7, r3
    ca9c:	23bc      	movs	r3, #188	; 0xbc
    ca9e:	18fb      	adds	r3, r7, r3
    caa0:	681b      	ldr	r3, [r3, #0]
    caa2:	0018      	movs	r0, r3
    caa4:	4b12      	ldr	r3, [pc, #72]	; (caf0 <sw_timer_init+0xdc>)
    caa6:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    caa8:	683b      	ldr	r3, [r7, #0]
    caaa:	785b      	ldrb	r3, [r3, #1]
    caac:	3308      	adds	r3, #8
    caae:	b2da      	uxtb	r2, r3
    cab0:	4910      	ldr	r1, [pc, #64]	; (caf4 <sw_timer_init+0xe0>)
    cab2:	23bc      	movs	r3, #188	; 0xbc
    cab4:	18fb      	adds	r3, r7, r3
    cab6:	681b      	ldr	r3, [r3, #0]
    cab8:	0018      	movs	r0, r3
    caba:	4b0f      	ldr	r3, [pc, #60]	; (caf8 <sw_timer_init+0xe4>)
    cabc:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    cabe:	683b      	ldr	r3, [r7, #0]
    cac0:	785b      	ldrb	r3, [r3, #1]
    cac2:	3308      	adds	r3, #8
    cac4:	b2da      	uxtb	r2, r3
    cac6:	23bc      	movs	r3, #188	; 0xbc
    cac8:	18fb      	adds	r3, r7, r3
    caca:	681b      	ldr	r3, [r3, #0]
    cacc:	0011      	movs	r1, r2
    cace:	0018      	movs	r0, r3
    cad0:	4b0a      	ldr	r3, [pc, #40]	; (cafc <sw_timer_init+0xe8>)
    cad2:	4798      	blx	r3
}
    cad4:	46c0      	nop			; (mov r8, r8)
    cad6:	46bd      	mov	sp, r7
    cad8:	b031      	add	sp, #196	; 0xc4
    cada:	bd90      	pop	{r4, r7, pc}
    cadc:	00019920 	.word	0x00019920
    cae0:	0000a475 	.word	0x0000a475
    cae4:	0000c97d 	.word	0x0000c97d
    cae8:	000155b9 	.word	0x000155b9
    caec:	000154a5 	.word	0x000154a5
    caf0:	0000aad1 	.word	0x0000aad1
    caf4:	0000c9d1 	.word	0x0000c9d1
    caf8:	0000aee9 	.word	0x0000aee9
    cafc:	0000af29 	.word	0x0000af29

0000cb00 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    cb00:	b580      	push	{r7, lr}
    cb02:	b084      	sub	sp, #16
    cb04:	af00      	add	r7, sp, #0
    cb06:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;

	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;
    cb08:	687b      	ldr	r3, [r7, #4]
    cb0a:	3314      	adds	r3, #20
    cb0c:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    cb0e:	68fb      	ldr	r3, [r7, #12]
    cb10:	0018      	movs	r0, r3
    cb12:	4b03      	ldr	r3, [pc, #12]	; (cb20 <sw_timer_enable+0x20>)
    cb14:	4798      	blx	r3
}
    cb16:	46c0      	nop			; (mov r8, r8)
    cb18:	46bd      	mov	sp, r7
    cb1a:	b004      	add	sp, #16
    cb1c:	bd80      	pop	{r7, pc}
    cb1e:	46c0      	nop			; (mov r8, r8)
    cb20:	0000c9a1 	.word	0x0000c9a1

0000cb24 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    cb24:	b580      	push	{r7, lr}
    cb26:	b086      	sub	sp, #24
    cb28:	af00      	add	r7, sp, #0
    cb2a:	60f8      	str	r0, [r7, #12]
    cb2c:	60b9      	str	r1, [r7, #8]
    cb2e:	607a      	str	r2, [r7, #4]
    cb30:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    cb32:	2300      	movs	r3, #0
    cb34:	617b      	str	r3, [r7, #20]
    cb36:	e032      	b.n	cb9e <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    cb38:	68f9      	ldr	r1, [r7, #12]
    cb3a:	697a      	ldr	r2, [r7, #20]
    cb3c:	0013      	movs	r3, r2
    cb3e:	009b      	lsls	r3, r3, #2
    cb40:	189b      	adds	r3, r3, r2
    cb42:	009b      	lsls	r3, r3, #2
    cb44:	5c5b      	ldrb	r3, [r3, r1]
    cb46:	07db      	lsls	r3, r3, #31
    cb48:	0fdb      	lsrs	r3, r3, #31
    cb4a:	b2db      	uxtb	r3, r3
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d123      	bne.n	cb98 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    cb50:	697a      	ldr	r2, [r7, #20]
    cb52:	0013      	movs	r3, r2
    cb54:	009b      	lsls	r3, r3, #2
    cb56:	189b      	adds	r3, r3, r2
    cb58:	009b      	lsls	r3, r3, #2
    cb5a:	68fa      	ldr	r2, [r7, #12]
    cb5c:	18d3      	adds	r3, r2, r3
    cb5e:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    cb60:	693b      	ldr	r3, [r7, #16]
    cb62:	68ba      	ldr	r2, [r7, #8]
    cb64:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    cb66:	693b      	ldr	r3, [r7, #16]
    cb68:	781a      	ldrb	r2, [r3, #0]
    cb6a:	2102      	movs	r1, #2
    cb6c:	438a      	bics	r2, r1
    cb6e:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    cb70:	693b      	ldr	r3, [r7, #16]
    cb72:	687a      	ldr	r2, [r7, #4]
    cb74:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    cb76:	68fb      	ldr	r3, [r7, #12]
    cb78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    cb7a:	4b0d      	ldr	r3, [pc, #52]	; (cbb0 <sw_timer_register_callback+0x8c>)
    cb7c:	0011      	movs	r1, r2
    cb7e:	6838      	ldr	r0, [r7, #0]
    cb80:	4798      	blx	r3
    cb82:	0003      	movs	r3, r0
    cb84:	001a      	movs	r2, r3
    cb86:	693b      	ldr	r3, [r7, #16]
    cb88:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    cb8a:	693b      	ldr	r3, [r7, #16]
    cb8c:	781a      	ldrb	r2, [r3, #0]
    cb8e:	2101      	movs	r1, #1
    cb90:	430a      	orrs	r2, r1
    cb92:	701a      	strb	r2, [r3, #0]
			return index;
    cb94:	697b      	ldr	r3, [r7, #20]
    cb96:	e007      	b.n	cba8 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    cb98:	697b      	ldr	r3, [r7, #20]
    cb9a:	3301      	adds	r3, #1
    cb9c:	617b      	str	r3, [r7, #20]
    cb9e:	697b      	ldr	r3, [r7, #20]
    cba0:	2b00      	cmp	r3, #0
    cba2:	ddc9      	ble.n	cb38 <sw_timer_register_callback+0x14>
		}
	}

	return -1;
    cba4:	2301      	movs	r3, #1
    cba6:	425b      	negs	r3, r3
}
    cba8:	0018      	movs	r0, r3
    cbaa:	46bd      	mov	sp, r7
    cbac:	b006      	add	sp, #24
    cbae:	bd80      	pop	{r7, pc}
    cbb0:	000154a5 	.word	0x000154a5

0000cbb4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    cbb4:	b580      	push	{r7, lr}
    cbb6:	b086      	sub	sp, #24
    cbb8:	af00      	add	r7, sp, #0
    cbba:	60f8      	str	r0, [r7, #12]
    cbbc:	60b9      	str	r1, [r7, #8]
    cbbe:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    cbc0:	68ba      	ldr	r2, [r7, #8]
    cbc2:	0013      	movs	r3, r2
    cbc4:	009b      	lsls	r3, r3, #2
    cbc6:	189b      	adds	r3, r3, r2
    cbc8:	009b      	lsls	r3, r3, #2
    cbca:	68fa      	ldr	r2, [r7, #12]
    cbcc:	18d3      	adds	r3, r2, r3
    cbce:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    cbd0:	697b      	ldr	r3, [r7, #20]
    cbd2:	781a      	ldrb	r2, [r3, #0]
    cbd4:	2102      	movs	r1, #2
    cbd6:	430a      	orrs	r2, r1
    cbd8:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    cbda:	68fb      	ldr	r3, [r7, #12]
    cbdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    cbde:	4b07      	ldr	r3, [pc, #28]	; (cbfc <sw_timer_enable_callback+0x48>)
    cbe0:	0011      	movs	r1, r2
    cbe2:	6878      	ldr	r0, [r7, #4]
    cbe4:	4798      	blx	r3
    cbe6:	0003      	movs	r3, r0
    cbe8:	001a      	movs	r2, r3
    cbea:	4b05      	ldr	r3, [pc, #20]	; (cc00 <sw_timer_enable_callback+0x4c>)
    cbec:	681b      	ldr	r3, [r3, #0]
    cbee:	18d2      	adds	r2, r2, r3
    cbf0:	697b      	ldr	r3, [r7, #20]
    cbf2:	611a      	str	r2, [r3, #16]
}
    cbf4:	46c0      	nop			; (mov r8, r8)
    cbf6:	46bd      	mov	sp, r7
    cbf8:	b006      	add	sp, #24
    cbfa:	bd80      	pop	{r7, pc}
    cbfc:	000154a5 	.word	0x000154a5
    cc00:	20000258 	.word	0x20000258

0000cc04 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    cc04:	b580      	push	{r7, lr}
    cc06:	b084      	sub	sp, #16
    cc08:	af00      	add	r7, sp, #0
    cc0a:	6078      	str	r0, [r7, #4]
    cc0c:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    cc0e:	683a      	ldr	r2, [r7, #0]
    cc10:	0013      	movs	r3, r2
    cc12:	009b      	lsls	r3, r3, #2
    cc14:	189b      	adds	r3, r3, r2
    cc16:	009b      	lsls	r3, r3, #2
    cc18:	687a      	ldr	r2, [r7, #4]
    cc1a:	18d3      	adds	r3, r2, r3
    cc1c:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    cc1e:	68fb      	ldr	r3, [r7, #12]
    cc20:	781a      	ldrb	r2, [r3, #0]
    cc22:	2102      	movs	r1, #2
    cc24:	438a      	bics	r2, r1
    cc26:	701a      	strb	r2, [r3, #0]
}
    cc28:	46c0      	nop			; (mov r8, r8)
    cc2a:	46bd      	mov	sp, r7
    cc2c:	b004      	add	sp, #16
    cc2e:	bd80      	pop	{r7, pc}

0000cc30 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    cc30:	b590      	push	{r4, r7, lr}
    cc32:	b085      	sub	sp, #20
    cc34:	af00      	add	r7, sp, #0
    cc36:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    cc38:	2300      	movs	r3, #0
    cc3a:	60fb      	str	r3, [r7, #12]
    cc3c:	e053      	b.n	cce6 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    cc3e:	6879      	ldr	r1, [r7, #4]
    cc40:	68fa      	ldr	r2, [r7, #12]
    cc42:	0013      	movs	r3, r2
    cc44:	009b      	lsls	r3, r3, #2
    cc46:	189b      	adds	r3, r3, r2
    cc48:	009b      	lsls	r3, r3, #2
    cc4a:	5c5b      	ldrb	r3, [r3, r1]
    cc4c:	07db      	lsls	r3, r3, #31
    cc4e:	0fdb      	lsrs	r3, r3, #31
    cc50:	b2db      	uxtb	r3, r3
    cc52:	2b00      	cmp	r3, #0
    cc54:	d044      	beq.n	cce0 <sw_timer_task+0xb0>
    cc56:	6879      	ldr	r1, [r7, #4]
    cc58:	68fa      	ldr	r2, [r7, #12]
    cc5a:	0013      	movs	r3, r2
    cc5c:	009b      	lsls	r3, r3, #2
    cc5e:	189b      	adds	r3, r3, r2
    cc60:	009b      	lsls	r3, r3, #2
    cc62:	5c5b      	ldrb	r3, [r3, r1]
    cc64:	079b      	lsls	r3, r3, #30
    cc66:	0fdb      	lsrs	r3, r3, #31
    cc68:	b2db      	uxtb	r3, r3
    cc6a:	2b00      	cmp	r3, #0
    cc6c:	d038      	beq.n	cce0 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    cc6e:	68fa      	ldr	r2, [r7, #12]
    cc70:	0013      	movs	r3, r2
    cc72:	009b      	lsls	r3, r3, #2
    cc74:	189b      	adds	r3, r3, r2
    cc76:	009b      	lsls	r3, r3, #2
    cc78:	687a      	ldr	r2, [r7, #4]
    cc7a:	18d3      	adds	r3, r2, r3
    cc7c:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    cc7e:	68bb      	ldr	r3, [r7, #8]
    cc80:	691a      	ldr	r2, [r3, #16]
    cc82:	4b1c      	ldr	r3, [pc, #112]	; (ccf4 <sw_timer_task+0xc4>)
    cc84:	681b      	ldr	r3, [r3, #0]
    cc86:	1ad3      	subs	r3, r2, r3
    cc88:	d52a      	bpl.n	cce0 <sw_timer_task+0xb0>
    cc8a:	68bb      	ldr	r3, [r7, #8]
    cc8c:	781b      	ldrb	r3, [r3, #0]
    cc8e:	2204      	movs	r2, #4
    cc90:	4013      	ands	r3, r2
    cc92:	b2db      	uxtb	r3, r3
    cc94:	2b00      	cmp	r3, #0
    cc96:	d123      	bne.n	cce0 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    cc98:	68bb      	ldr	r3, [r7, #8]
    cc9a:	781a      	ldrb	r2, [r3, #0]
    cc9c:	2104      	movs	r1, #4
    cc9e:	430a      	orrs	r2, r1
    cca0:	701a      	strb	r2, [r3, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    cca2:	68bb      	ldr	r3, [r7, #8]
    cca4:	685c      	ldr	r4, [r3, #4]
    cca6:	68bb      	ldr	r3, [r7, #8]
    cca8:	689a      	ldr	r2, [r3, #8]
    ccaa:	68bb      	ldr	r3, [r7, #8]
    ccac:	68db      	ldr	r3, [r3, #12]
    ccae:	68f9      	ldr	r1, [r7, #12]
    ccb0:	6878      	ldr	r0, [r7, #4]
    ccb2:	47a0      	blx	r4
				/* Timer was expired. */
				if (handler->period > 0) {
    ccb4:	68bb      	ldr	r3, [r7, #8]
    ccb6:	68db      	ldr	r3, [r3, #12]
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d007      	beq.n	cccc <sw_timer_task+0x9c>
					handler->expire_time = sw_timer_tick + handler->period;
    ccbc:	68bb      	ldr	r3, [r7, #8]
    ccbe:	68da      	ldr	r2, [r3, #12]
    ccc0:	4b0c      	ldr	r3, [pc, #48]	; (ccf4 <sw_timer_task+0xc4>)
    ccc2:	681b      	ldr	r3, [r3, #0]
    ccc4:	18d2      	adds	r2, r2, r3
    ccc6:	68bb      	ldr	r3, [r7, #8]
    ccc8:	611a      	str	r2, [r3, #16]
    ccca:	e004      	b.n	ccd6 <sw_timer_task+0xa6>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    cccc:	68bb      	ldr	r3, [r7, #8]
    ccce:	781a      	ldrb	r2, [r3, #0]
    ccd0:	2102      	movs	r1, #2
    ccd2:	438a      	bics	r2, r1
    ccd4:	701a      	strb	r2, [r3, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    ccd6:	68bb      	ldr	r3, [r7, #8]
    ccd8:	781a      	ldrb	r2, [r3, #0]
    ccda:	2104      	movs	r1, #4
    ccdc:	438a      	bics	r2, r1
    ccde:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    cce0:	68fb      	ldr	r3, [r7, #12]
    cce2:	3301      	adds	r3, #1
    cce4:	60fb      	str	r3, [r7, #12]
    cce6:	68fb      	ldr	r3, [r7, #12]
    cce8:	2b00      	cmp	r3, #0
    ccea:	dda8      	ble.n	cc3e <sw_timer_task+0xe>
			}
		}
	}

}
    ccec:	46c0      	nop			; (mov r8, r8)
    ccee:	46bd      	mov	sp, r7
    ccf0:	b005      	add	sp, #20
    ccf2:	bd90      	pop	{r4, r7, pc}
    ccf4:	20000258 	.word	0x20000258

0000ccf8 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    ccf8:	b590      	push	{r4, r7, lr}
    ccfa:	b08d      	sub	sp, #52	; 0x34
    ccfc:	af06      	add	r7, sp, #24
    ccfe:	60f8      	str	r0, [r7, #12]
    cd00:	60b9      	str	r1, [r7, #8]
    cd02:	607a      	str	r2, [r7, #4]
	switch (type) {
    cd04:	68bb      	ldr	r3, [r7, #8]
    cd06:	2b01      	cmp	r3, #1
    cd08:	d030      	beq.n	cd6c <mqtt_callback+0x74>
    cd0a:	dc02      	bgt.n	cd12 <mqtt_callback+0x1a>
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	d006      	beq.n	cd1e <mqtt_callback+0x26>
	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer */
		printf("MQTT disconnected\r\n");
		break;
	}
}
    cd10:	e146      	b.n	cfa0 <mqtt_callback+0x2a8>
	switch (type) {
    cd12:	2b05      	cmp	r3, #5
    cd14:	d100      	bne.n	cd18 <mqtt_callback+0x20>
    cd16:	e13d      	b.n	cf94 <mqtt_callback+0x29c>
    cd18:	2b06      	cmp	r3, #6
    cd1a:	d063      	beq.n	cde4 <mqtt_callback+0xec>
}
    cd1c:	e140      	b.n	cfa0 <mqtt_callback+0x2a8>
		if (data->sock_connected.result >= 0) {
    cd1e:	687b      	ldr	r3, [r7, #4]
    cd20:	681b      	ldr	r3, [r3, #0]
    cd22:	2b00      	cmp	r3, #0
    cd24:	db15      	blt.n	cd52 <mqtt_callback+0x5a>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, MQTT_USER, NULL, NULL, 0, 0, 0);
    cd26:	68f8      	ldr	r0, [r7, #12]
    cd28:	2300      	movs	r3, #0
    cd2a:	9305      	str	r3, [sp, #20]
    cd2c:	2300      	movs	r3, #0
    cd2e:	9304      	str	r3, [sp, #16]
    cd30:	2300      	movs	r3, #0
    cd32:	9303      	str	r3, [sp, #12]
    cd34:	2300      	movs	r3, #0
    cd36:	9302      	str	r3, [sp, #8]
    cd38:	2300      	movs	r3, #0
    cd3a:	9301      	str	r3, [sp, #4]
    cd3c:	4b9a      	ldr	r3, [pc, #616]	; (cfa8 <mqtt_callback+0x2b0>)
    cd3e:	9300      	str	r3, [sp, #0]
    cd40:	2300      	movs	r3, #0
    cd42:	2200      	movs	r2, #0
    cd44:	2101      	movs	r1, #1
    cd46:	4c99      	ldr	r4, [pc, #612]	; (cfac <mqtt_callback+0x2b4>)
    cd48:	47a0      	blx	r4
			mqtt_connected = 1;
    cd4a:	4b99      	ldr	r3, [pc, #612]	; (cfb0 <mqtt_callback+0x2b8>)
    cd4c:	2201      	movs	r2, #1
    cd4e:	601a      	str	r2, [r3, #0]
	break;
    cd50:	e126      	b.n	cfa0 <mqtt_callback+0x2a8>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    cd52:	4a98      	ldr	r2, [pc, #608]	; (cfb4 <mqtt_callback+0x2bc>)
    cd54:	4b98      	ldr	r3, [pc, #608]	; (cfb8 <mqtt_callback+0x2c0>)
    cd56:	0011      	movs	r1, r2
    cd58:	0018      	movs	r0, r3
    cd5a:	4b98      	ldr	r3, [pc, #608]	; (cfbc <mqtt_callback+0x2c4>)
    cd5c:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    cd5e:	4a95      	ldr	r2, [pc, #596]	; (cfb4 <mqtt_callback+0x2bc>)
    cd60:	68fb      	ldr	r3, [r7, #12]
    cd62:	0011      	movs	r1, r2
    cd64:	0018      	movs	r0, r3
    cd66:	4b96      	ldr	r3, [pc, #600]	; (cfc0 <mqtt_callback+0x2c8>)
    cd68:	4798      	blx	r3
	break;
    cd6a:	e119      	b.n	cfa0 <mqtt_callback+0x2a8>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    cd6c:	687b      	ldr	r3, [r7, #4]
    cd6e:	781b      	ldrb	r3, [r3, #0]
    cd70:	2b00      	cmp	r3, #0
    cd72:	d12e      	bne.n	cdd2 <mqtt_callback+0xda>
			  module_inst->busy = 0;
    cd74:	68fb      	ldr	r3, [r7, #12]
    cd76:	2243      	movs	r2, #67	; 0x43
    cd78:	5c99      	ldrb	r1, [r3, r2]
    cd7a:	2008      	movs	r0, #8
    cd7c:	4381      	bics	r1, r0
    cd7e:	5499      	strb	r1, [r3, r2]
			  mqtt_subscribe(module_inst, PUMP_TOPIC "#", 0);
    cd80:	4990      	ldr	r1, [pc, #576]	; (cfc4 <mqtt_callback+0x2cc>)
    cd82:	68fb      	ldr	r3, [r7, #12]
    cd84:	2200      	movs	r2, #0
    cd86:	0018      	movs	r0, r3
    cd88:	4b8f      	ldr	r3, [pc, #572]	; (cfc8 <mqtt_callback+0x2d0>)
    cd8a:	4798      	blx	r3
			  mqtt_subscribe(module_inst, RELAY1_TOPIC "#", 0);
    cd8c:	498f      	ldr	r1, [pc, #572]	; (cfcc <mqtt_callback+0x2d4>)
    cd8e:	68fb      	ldr	r3, [r7, #12]
    cd90:	2200      	movs	r2, #0
    cd92:	0018      	movs	r0, r3
    cd94:	4b8c      	ldr	r3, [pc, #560]	; (cfc8 <mqtt_callback+0x2d0>)
    cd96:	4798      	blx	r3
			  mqtt_subscribe(module_inst, RELAY2_TOPIC "#", 0);
    cd98:	498d      	ldr	r1, [pc, #564]	; (cfd0 <mqtt_callback+0x2d8>)
    cd9a:	68fb      	ldr	r3, [r7, #12]
    cd9c:	2200      	movs	r2, #0
    cd9e:	0018      	movs	r0, r3
    cda0:	4b89      	ldr	r3, [pc, #548]	; (cfc8 <mqtt_callback+0x2d0>)
    cda2:	4798      	blx	r3
			  mqtt_subscribe(module_inst, LED_TOPIC "#", 0);
    cda4:	498b      	ldr	r1, [pc, #556]	; (cfd4 <mqtt_callback+0x2dc>)
    cda6:	68fb      	ldr	r3, [r7, #12]
    cda8:	2200      	movs	r2, #0
    cdaa:	0018      	movs	r0, r3
    cdac:	4b86      	ldr	r3, [pc, #536]	; (cfc8 <mqtt_callback+0x2d0>)
    cdae:	4798      	blx	r3
			  mqtt_subscribe(module_inst, UPGRADE_TOPIC "#", 0);
    cdb0:	4989      	ldr	r1, [pc, #548]	; (cfd8 <mqtt_callback+0x2e0>)
    cdb2:	68fb      	ldr	r3, [r7, #12]
    cdb4:	2200      	movs	r2, #0
    cdb6:	0018      	movs	r0, r3
    cdb8:	4b83      	ldr	r3, [pc, #524]	; (cfc8 <mqtt_callback+0x2d0>)
    cdba:	4798      	blx	r3
			  mqtt_subscribe(module_inst, VERSION_TOPIC "#", 0);
    cdbc:	4987      	ldr	r1, [pc, #540]	; (cfdc <mqtt_callback+0x2e4>)
    cdbe:	68fb      	ldr	r3, [r7, #12]
    cdc0:	2200      	movs	r2, #0
    cdc2:	0018      	movs	r0, r3
    cdc4:	4b80      	ldr	r3, [pc, #512]	; (cfc8 <mqtt_callback+0x2d0>)
    cdc6:	4798      	blx	r3
			printf("Preparation of MQTT has been completed.\r\n");
    cdc8:	4b85      	ldr	r3, [pc, #532]	; (cfe0 <mqtt_callback+0x2e8>)
    cdca:	0018      	movs	r0, r3
    cdcc:	4b85      	ldr	r3, [pc, #532]	; (cfe4 <mqtt_callback+0x2ec>)
    cdce:	4798      	blx	r3
		break;
    cdd0:	e0e6      	b.n	cfa0 <mqtt_callback+0x2a8>
			printf("MQTT broker declined your access! error code %d\r\n", data->connected.result);
    cdd2:	687b      	ldr	r3, [r7, #4]
    cdd4:	781b      	ldrb	r3, [r3, #0]
    cdd6:	001a      	movs	r2, r3
    cdd8:	4b83      	ldr	r3, [pc, #524]	; (cfe8 <mqtt_callback+0x2f0>)
    cdda:	0011      	movs	r1, r2
    cddc:	0018      	movs	r0, r3
    cdde:	4b77      	ldr	r3, [pc, #476]	; (cfbc <mqtt_callback+0x2c4>)
    cde0:	4798      	blx	r3
		break;
    cde2:	e0dd      	b.n	cfa0 <mqtt_callback+0x2a8>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL)
    cde4:	687b      	ldr	r3, [r7, #4]
    cde6:	681b      	ldr	r3, [r3, #0]
    cde8:	2b00      	cmp	r3, #0
    cdea:	d100      	bne.n	cdee <mqtt_callback+0xf6>
    cdec:	e0d7      	b.n	cf9e <mqtt_callback+0x2a6>
    cdee:	687b      	ldr	r3, [r7, #4]
    cdf0:	689b      	ldr	r3, [r3, #8]
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	d100      	bne.n	cdf8 <mqtt_callback+0x100>
    cdf6:	e0d2      	b.n	cf9e <mqtt_callback+0x2a6>
			if (strncmp(data->recv_publish.topic, PUMP_TOPIC, strlen(PUMP_TOPIC)) == 0)
    cdf8:	687b      	ldr	r3, [r7, #4]
    cdfa:	681b      	ldr	r3, [r3, #0]
    cdfc:	497b      	ldr	r1, [pc, #492]	; (cfec <mqtt_callback+0x2f4>)
    cdfe:	2212      	movs	r2, #18
    ce00:	0018      	movs	r0, r3
    ce02:	4b7b      	ldr	r3, [pc, #492]	; (cff0 <mqtt_callback+0x2f8>)
    ce04:	4798      	blx	r3
    ce06:	1e03      	subs	r3, r0, #0
    ce08:	d10a      	bne.n	ce20 <mqtt_callback+0x128>
					printf("%s >> ", PUMP_TOPIC);
    ce0a:	4a78      	ldr	r2, [pc, #480]	; (cfec <mqtt_callback+0x2f4>)
    ce0c:	4b79      	ldr	r3, [pc, #484]	; (cff4 <mqtt_callback+0x2fc>)
    ce0e:	0011      	movs	r1, r2
    ce10:	0018      	movs	r0, r3
    ce12:	4b6a      	ldr	r3, [pc, #424]	; (cfbc <mqtt_callback+0x2c4>)
    ce14:	4798      	blx	r3
					run_pump(10000);
    ce16:	4b78      	ldr	r3, [pc, #480]	; (cff8 <mqtt_callback+0x300>)
    ce18:	0018      	movs	r0, r3
    ce1a:	4b78      	ldr	r3, [pc, #480]	; (cffc <mqtt_callback+0x304>)
    ce1c:	4798      	blx	r3
    ce1e:	e0ad      	b.n	cf7c <mqtt_callback+0x284>
			else if (strncmp(data->recv_publish.topic, RELAY1_TOPIC, strlen(RELAY1_TOPIC)) == 0)
    ce20:	687b      	ldr	r3, [r7, #4]
    ce22:	681b      	ldr	r3, [r3, #0]
    ce24:	4976      	ldr	r1, [pc, #472]	; (d000 <mqtt_callback+0x308>)
    ce26:	2214      	movs	r2, #20
    ce28:	0018      	movs	r0, r3
    ce2a:	4b71      	ldr	r3, [pc, #452]	; (cff0 <mqtt_callback+0x2f8>)
    ce2c:	4798      	blx	r3
    ce2e:	1e03      	subs	r3, r0, #0
    ce30:	d122      	bne.n	ce78 <mqtt_callback+0x180>
					printf("%s >> ", RELAY1_TOPIC);
    ce32:	4a73      	ldr	r2, [pc, #460]	; (d000 <mqtt_callback+0x308>)
    ce34:	4b6f      	ldr	r3, [pc, #444]	; (cff4 <mqtt_callback+0x2fc>)
    ce36:	0011      	movs	r1, r2
    ce38:	0018      	movs	r0, r3
    ce3a:	4b60      	ldr	r3, [pc, #384]	; (cfbc <mqtt_callback+0x2c4>)
    ce3c:	4798      	blx	r3
					if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    ce3e:	687b      	ldr	r3, [r7, #4]
    ce40:	6899      	ldr	r1, [r3, #8]
    ce42:	687b      	ldr	r3, [r7, #4]
    ce44:	68db      	ldr	r3, [r3, #12]
    ce46:	001a      	movs	r2, r3
    ce48:	4b6e      	ldr	r3, [pc, #440]	; (d004 <mqtt_callback+0x30c>)
    ce4a:	0018      	movs	r0, r3
    ce4c:	4b68      	ldr	r3, [pc, #416]	; (cff0 <mqtt_callback+0x2f8>)
    ce4e:	4798      	blx	r3
    ce50:	1e03      	subs	r3, r0, #0
    ce52:	d102      	bne.n	ce5a <mqtt_callback+0x162>
						relay1_enable();
    ce54:	4b6c      	ldr	r3, [pc, #432]	; (d008 <mqtt_callback+0x310>)
    ce56:	4798      	blx	r3
    ce58:	e090      	b.n	cf7c <mqtt_callback+0x284>
					else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    ce5a:	687b      	ldr	r3, [r7, #4]
    ce5c:	6899      	ldr	r1, [r3, #8]
    ce5e:	687b      	ldr	r3, [r7, #4]
    ce60:	68db      	ldr	r3, [r3, #12]
    ce62:	001a      	movs	r2, r3
    ce64:	4b69      	ldr	r3, [pc, #420]	; (d00c <mqtt_callback+0x314>)
    ce66:	0018      	movs	r0, r3
    ce68:	4b61      	ldr	r3, [pc, #388]	; (cff0 <mqtt_callback+0x2f8>)
    ce6a:	4798      	blx	r3
    ce6c:	1e03      	subs	r3, r0, #0
    ce6e:	d000      	beq.n	ce72 <mqtt_callback+0x17a>
    ce70:	e084      	b.n	cf7c <mqtt_callback+0x284>
						relay1_disable();
    ce72:	4b67      	ldr	r3, [pc, #412]	; (d010 <mqtt_callback+0x318>)
    ce74:	4798      	blx	r3
    ce76:	e081      	b.n	cf7c <mqtt_callback+0x284>
			else if (strncmp(data->recv_publish.topic, LED_TOPIC, strlen(LED_TOPIC)) == 0)
    ce78:	687b      	ldr	r3, [r7, #4]
    ce7a:	681b      	ldr	r3, [r3, #0]
    ce7c:	4965      	ldr	r1, [pc, #404]	; (d014 <mqtt_callback+0x31c>)
    ce7e:	2211      	movs	r2, #17
    ce80:	0018      	movs	r0, r3
    ce82:	4b5b      	ldr	r3, [pc, #364]	; (cff0 <mqtt_callback+0x2f8>)
    ce84:	4798      	blx	r3
    ce86:	1e03      	subs	r3, r0, #0
    ce88:	d121      	bne.n	cece <mqtt_callback+0x1d6>
					printf("%s >> ", LED_TOPIC);
    ce8a:	4a62      	ldr	r2, [pc, #392]	; (d014 <mqtt_callback+0x31c>)
    ce8c:	4b59      	ldr	r3, [pc, #356]	; (cff4 <mqtt_callback+0x2fc>)
    ce8e:	0011      	movs	r1, r2
    ce90:	0018      	movs	r0, r3
    ce92:	4b4a      	ldr	r3, [pc, #296]	; (cfbc <mqtt_callback+0x2c4>)
    ce94:	4798      	blx	r3
					if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    ce96:	687b      	ldr	r3, [r7, #4]
    ce98:	6899      	ldr	r1, [r3, #8]
    ce9a:	687b      	ldr	r3, [r7, #4]
    ce9c:	68db      	ldr	r3, [r3, #12]
    ce9e:	001a      	movs	r2, r3
    cea0:	4b58      	ldr	r3, [pc, #352]	; (d004 <mqtt_callback+0x30c>)
    cea2:	0018      	movs	r0, r3
    cea4:	4b52      	ldr	r3, [pc, #328]	; (cff0 <mqtt_callback+0x2f8>)
    cea6:	4798      	blx	r3
    cea8:	1e03      	subs	r3, r0, #0
    ceaa:	d102      	bne.n	ceb2 <mqtt_callback+0x1ba>
						led2_on();
    ceac:	4b5a      	ldr	r3, [pc, #360]	; (d018 <mqtt_callback+0x320>)
    ceae:	4798      	blx	r3
    ceb0:	e064      	b.n	cf7c <mqtt_callback+0x284>
					else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    ceb2:	687b      	ldr	r3, [r7, #4]
    ceb4:	6899      	ldr	r1, [r3, #8]
    ceb6:	687b      	ldr	r3, [r7, #4]
    ceb8:	68db      	ldr	r3, [r3, #12]
    ceba:	001a      	movs	r2, r3
    cebc:	4b53      	ldr	r3, [pc, #332]	; (d00c <mqtt_callback+0x314>)
    cebe:	0018      	movs	r0, r3
    cec0:	4b4b      	ldr	r3, [pc, #300]	; (cff0 <mqtt_callback+0x2f8>)
    cec2:	4798      	blx	r3
    cec4:	1e03      	subs	r3, r0, #0
    cec6:	d159      	bne.n	cf7c <mqtt_callback+0x284>
						led2_off();
    cec8:	4b54      	ldr	r3, [pc, #336]	; (d01c <mqtt_callback+0x324>)
    ceca:	4798      	blx	r3
    cecc:	e056      	b.n	cf7c <mqtt_callback+0x284>
			else if (strncmp(data->recv_publish.topic, RELAY2_TOPIC, strlen(RELAY2_TOPIC)) == 0)
    cece:	687b      	ldr	r3, [r7, #4]
    ced0:	681b      	ldr	r3, [r3, #0]
    ced2:	4953      	ldr	r1, [pc, #332]	; (d020 <mqtt_callback+0x328>)
    ced4:	2214      	movs	r2, #20
    ced6:	0018      	movs	r0, r3
    ced8:	4b45      	ldr	r3, [pc, #276]	; (cff0 <mqtt_callback+0x2f8>)
    ceda:	4798      	blx	r3
    cedc:	1e03      	subs	r3, r0, #0
    cede:	d121      	bne.n	cf24 <mqtt_callback+0x22c>
					printf("%s >> ", RELAY2_TOPIC);
    cee0:	4a4f      	ldr	r2, [pc, #316]	; (d020 <mqtt_callback+0x328>)
    cee2:	4b44      	ldr	r3, [pc, #272]	; (cff4 <mqtt_callback+0x2fc>)
    cee4:	0011      	movs	r1, r2
    cee6:	0018      	movs	r0, r3
    cee8:	4b34      	ldr	r3, [pc, #208]	; (cfbc <mqtt_callback+0x2c4>)
    ceea:	4798      	blx	r3
					if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    ceec:	687b      	ldr	r3, [r7, #4]
    ceee:	6899      	ldr	r1, [r3, #8]
    cef0:	687b      	ldr	r3, [r7, #4]
    cef2:	68db      	ldr	r3, [r3, #12]
    cef4:	001a      	movs	r2, r3
    cef6:	4b43      	ldr	r3, [pc, #268]	; (d004 <mqtt_callback+0x30c>)
    cef8:	0018      	movs	r0, r3
    cefa:	4b3d      	ldr	r3, [pc, #244]	; (cff0 <mqtt_callback+0x2f8>)
    cefc:	4798      	blx	r3
    cefe:	1e03      	subs	r3, r0, #0
    cf00:	d102      	bne.n	cf08 <mqtt_callback+0x210>
						relay2_enable();
    cf02:	4b48      	ldr	r3, [pc, #288]	; (d024 <mqtt_callback+0x32c>)
    cf04:	4798      	blx	r3
    cf06:	e039      	b.n	cf7c <mqtt_callback+0x284>
					else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    cf08:	687b      	ldr	r3, [r7, #4]
    cf0a:	6899      	ldr	r1, [r3, #8]
    cf0c:	687b      	ldr	r3, [r7, #4]
    cf0e:	68db      	ldr	r3, [r3, #12]
    cf10:	001a      	movs	r2, r3
    cf12:	4b3e      	ldr	r3, [pc, #248]	; (d00c <mqtt_callback+0x314>)
    cf14:	0018      	movs	r0, r3
    cf16:	4b36      	ldr	r3, [pc, #216]	; (cff0 <mqtt_callback+0x2f8>)
    cf18:	4798      	blx	r3
    cf1a:	1e03      	subs	r3, r0, #0
    cf1c:	d12e      	bne.n	cf7c <mqtt_callback+0x284>
						relay2_disable();
    cf1e:	4b42      	ldr	r3, [pc, #264]	; (d028 <mqtt_callback+0x330>)
    cf20:	4798      	blx	r3
    cf22:	e02b      	b.n	cf7c <mqtt_callback+0x284>
			else if (strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) == 0)
    cf24:	687b      	ldr	r3, [r7, #4]
    cf26:	681b      	ldr	r3, [r3, #0]
    cf28:	4940      	ldr	r1, [pc, #256]	; (d02c <mqtt_callback+0x334>)
    cf2a:	2215      	movs	r2, #21
    cf2c:	0018      	movs	r0, r3
    cf2e:	4b30      	ldr	r3, [pc, #192]	; (cff0 <mqtt_callback+0x2f8>)
    cf30:	4798      	blx	r3
    cf32:	1e03      	subs	r3, r0, #0
    cf34:	d109      	bne.n	cf4a <mqtt_callback+0x252>
					printf("%s >> ", UPGRADE_TOPIC);
    cf36:	4a3d      	ldr	r2, [pc, #244]	; (d02c <mqtt_callback+0x334>)
    cf38:	4b2e      	ldr	r3, [pc, #184]	; (cff4 <mqtt_callback+0x2fc>)
    cf3a:	0011      	movs	r1, r2
    cf3c:	0018      	movs	r0, r3
    cf3e:	4b1f      	ldr	r3, [pc, #124]	; (cfbc <mqtt_callback+0x2c4>)
    cf40:	4798      	blx	r3
					RcvDownloadFwCmdByMQTT = 1;
    cf42:	4b3b      	ldr	r3, [pc, #236]	; (d030 <mqtt_callback+0x338>)
    cf44:	2201      	movs	r2, #1
    cf46:	701a      	strb	r2, [r3, #0]
    cf48:	e018      	b.n	cf7c <mqtt_callback+0x284>
				printf("Unknown topic: %s", data->recv_publish.topic);
    cf4a:	687b      	ldr	r3, [r7, #4]
    cf4c:	681a      	ldr	r2, [r3, #0]
    cf4e:	4b39      	ldr	r3, [pc, #228]	; (d034 <mqtt_callback+0x33c>)
    cf50:	0011      	movs	r1, r2
    cf52:	0018      	movs	r0, r3
    cf54:	4b19      	ldr	r3, [pc, #100]	; (cfbc <mqtt_callback+0x2c4>)
    cf56:	4798      	blx	r3
			for (uint8_t i; i < data->recv_publish.msg_size; i++)
    cf58:	e010      	b.n	cf7c <mqtt_callback+0x284>
				printf("%c", data->recv_publish.msg[i]);
    cf5a:	687b      	ldr	r3, [r7, #4]
    cf5c:	689a      	ldr	r2, [r3, #8]
    cf5e:	2317      	movs	r3, #23
    cf60:	18fb      	adds	r3, r7, r3
    cf62:	781b      	ldrb	r3, [r3, #0]
    cf64:	18d3      	adds	r3, r2, r3
    cf66:	781b      	ldrb	r3, [r3, #0]
    cf68:	0018      	movs	r0, r3
    cf6a:	4b33      	ldr	r3, [pc, #204]	; (d038 <mqtt_callback+0x340>)
    cf6c:	4798      	blx	r3
			for (uint8_t i; i < data->recv_publish.msg_size; i++)
    cf6e:	2317      	movs	r3, #23
    cf70:	18fb      	adds	r3, r7, r3
    cf72:	781a      	ldrb	r2, [r3, #0]
    cf74:	2317      	movs	r3, #23
    cf76:	18fb      	adds	r3, r7, r3
    cf78:	3201      	adds	r2, #1
    cf7a:	701a      	strb	r2, [r3, #0]
    cf7c:	2317      	movs	r3, #23
    cf7e:	18fb      	adds	r3, r7, r3
    cf80:	781a      	ldrb	r2, [r3, #0]
    cf82:	687b      	ldr	r3, [r7, #4]
    cf84:	68db      	ldr	r3, [r3, #12]
    cf86:	429a      	cmp	r2, r3
    cf88:	dbe7      	blt.n	cf5a <mqtt_callback+0x262>
			printf("\r\n");
    cf8a:	4b2c      	ldr	r3, [pc, #176]	; (d03c <mqtt_callback+0x344>)
    cf8c:	0018      	movs	r0, r3
    cf8e:	4b15      	ldr	r3, [pc, #84]	; (cfe4 <mqtt_callback+0x2ec>)
    cf90:	4798      	blx	r3
		break;
    cf92:	e004      	b.n	cf9e <mqtt_callback+0x2a6>
		printf("MQTT disconnected\r\n");
    cf94:	4b2a      	ldr	r3, [pc, #168]	; (d040 <mqtt_callback+0x348>)
    cf96:	0018      	movs	r0, r3
    cf98:	4b12      	ldr	r3, [pc, #72]	; (cfe4 <mqtt_callback+0x2ec>)
    cf9a:	4798      	blx	r3
		break;
    cf9c:	e000      	b.n	cfa0 <mqtt_callback+0x2a8>
		break;
    cf9e:	46c0      	nop			; (mov r8, r8)
}
    cfa0:	46c0      	nop			; (mov r8, r8)
    cfa2:	46bd      	mov	sp, r7
    cfa4:	b007      	add	sp, #28
    cfa6:	bd90      	pop	{r4, r7, pc}
    cfa8:	000199a8 	.word	0x000199a8
    cfac:	00011e0d 	.word	0x00011e0d
    cfb0:	20000260 	.word	0x20000260
    cfb4:	0001992c 	.word	0x0001992c
    cfb8:	000199b4 	.word	0x000199b4
    cfbc:	00012f71 	.word	0x00012f71
    cfc0:	00011cf9 	.word	0x00011cf9
    cfc4:	000199ec 	.word	0x000199ec
    cfc8:	00012265 	.word	0x00012265
    cfcc:	00019a00 	.word	0x00019a00
    cfd0:	00019a18 	.word	0x00019a18
    cfd4:	00019a30 	.word	0x00019a30
    cfd8:	00019a44 	.word	0x00019a44
    cfdc:	00019a5c 	.word	0x00019a5c
    cfe0:	00019a74 	.word	0x00019a74
    cfe4:	0001308d 	.word	0x0001308d
    cfe8:	00019aa0 	.word	0x00019aa0
    cfec:	00019ad4 	.word	0x00019ad4
    cff0:	000132e1 	.word	0x000132e1
    cff4:	00019ae8 	.word	0x00019ae8
    cff8:	00002710 	.word	0x00002710
    cffc:	00011901 	.word	0x00011901
    d000:	00019af0 	.word	0x00019af0
    d004:	00019b08 	.word	0x00019b08
    d008:	00011841 	.word	0x00011841
    d00c:	00019b0c 	.word	0x00019b0c
    d010:	00011861 	.word	0x00011861
    d014:	00019b10 	.word	0x00019b10
    d018:	00011801 	.word	0x00011801
    d01c:	00011821 	.word	0x00011821
    d020:	00019b24 	.word	0x00019b24
    d024:	00011881 	.word	0x00011881
    d028:	000118a1 	.word	0x000118a1
    d02c:	00019b3c 	.word	0x00019b3c
    d030:	2000025c 	.word	0x2000025c
    d034:	00019b54 	.word	0x00019b54
    d038:	00012fa5 	.word	0x00012fa5
    d03c:	00019b68 	.word	0x00019b68
    d040:	00019b6c 	.word	0x00019b6c

0000d044 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
void configure_mqtt(void)
{
    d044:	b580      	push	{r7, lr}
    d046:	b088      	sub	sp, #32
    d048:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    d04a:	003b      	movs	r3, r7
    d04c:	0018      	movs	r0, r3
    d04e:	4b1b      	ldr	r3, [pc, #108]	; (d0bc <configure_mqtt+0x78>)
    d050:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    d052:	003b      	movs	r3, r7
    d054:	4a1a      	ldr	r2, [pc, #104]	; (d0c0 <configure_mqtt+0x7c>)
    d056:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    d058:	003b      	movs	r3, r7
    d05a:	4a1a      	ldr	r2, [pc, #104]	; (d0c4 <configure_mqtt+0x80>)
    d05c:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    d05e:	003b      	movs	r3, r7
    d060:	2280      	movs	r2, #128	; 0x80
    d062:	611a      	str	r2, [r3, #16]
	mqtt_conf.port = CLOUD_PORT;
    d064:	003b      	movs	r3, r7
    d066:	4a18      	ldr	r2, [pc, #96]	; (d0c8 <configure_mqtt+0x84>)
    d068:	801a      	strh	r2, [r3, #0]
	//cloudmqtt port 11353

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    d06a:	003a      	movs	r2, r7
    d06c:	4b17      	ldr	r3, [pc, #92]	; (d0cc <configure_mqtt+0x88>)
    d06e:	0011      	movs	r1, r2
    d070:	0018      	movs	r0, r3
    d072:	4b17      	ldr	r3, [pc, #92]	; (d0d0 <configure_mqtt+0x8c>)
    d074:	4798      	blx	r3
    d076:	0003      	movs	r3, r0
    d078:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    d07a:	69fb      	ldr	r3, [r7, #28]
    d07c:	2b00      	cmp	r3, #0
    d07e:	da06      	bge.n	d08e <configure_mqtt+0x4a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    d080:	69fa      	ldr	r2, [r7, #28]
    d082:	4b14      	ldr	r3, [pc, #80]	; (d0d4 <configure_mqtt+0x90>)
    d084:	0011      	movs	r1, r2
    d086:	0018      	movs	r0, r3
    d088:	4b13      	ldr	r3, [pc, #76]	; (d0d8 <configure_mqtt+0x94>)
    d08a:	4798      	blx	r3
		while (1) {
    d08c:	e7fe      	b.n	d08c <configure_mqtt+0x48>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    d08e:	4a13      	ldr	r2, [pc, #76]	; (d0dc <configure_mqtt+0x98>)
    d090:	4b0e      	ldr	r3, [pc, #56]	; (d0cc <configure_mqtt+0x88>)
    d092:	0011      	movs	r1, r2
    d094:	0018      	movs	r0, r3
    d096:	4b12      	ldr	r3, [pc, #72]	; (d0e0 <configure_mqtt+0x9c>)
    d098:	4798      	blx	r3
    d09a:	0003      	movs	r3, r0
    d09c:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    d09e:	69fb      	ldr	r3, [r7, #28]
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	da06      	bge.n	d0b2 <configure_mqtt+0x6e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    d0a4:	69fa      	ldr	r2, [r7, #28]
    d0a6:	4b0f      	ldr	r3, [pc, #60]	; (d0e4 <configure_mqtt+0xa0>)
    d0a8:	0011      	movs	r1, r2
    d0aa:	0018      	movs	r0, r3
    d0ac:	4b0a      	ldr	r3, [pc, #40]	; (d0d8 <configure_mqtt+0x94>)
    d0ae:	4798      	blx	r3
		while (1) {
    d0b0:	e7fe      	b.n	d0b0 <configure_mqtt+0x6c>
		}
	}
}
    d0b2:	46c0      	nop			; (mov r8, r8)
    d0b4:	46bd      	mov	sp, r7
    d0b6:	b008      	add	sp, #32
    d0b8:	bd80      	pop	{r7, pc}
    d0ba:	46c0      	nop			; (mov r8, r8)
    d0bc:	00011c39 	.word	0x00011c39
    d0c0:	20000328 	.word	0x20000328
    d0c4:	2000072c 	.word	0x2000072c
    d0c8:	0000075b 	.word	0x0000075b
    d0cc:	20000878 	.word	0x20000878
    d0d0:	00011c5d 	.word	0x00011c5d
    d0d4:	00019b90 	.word	0x00019b90
    d0d8:	00012f71 	.word	0x00012f71
    d0dc:	0000ccf9 	.word	0x0000ccf9
    d0e0:	00011ce9 	.word	0x00011ce9
    d0e4:	00019bc4 	.word	0x00019bc4

0000d0e8 <publish_sensor_values>:
	printf("Sockets initialized.\r\n");
	
	return 0;
}

void publish_sensor_values(void) {
    d0e8:	b590      	push	{r4, r7, lr}
    d0ea:	b099      	sub	sp, #100	; 0x64
    d0ec:	af02      	add	r7, sp, #8
	
		uint8_t mqtt_send_buffer[MQTT_SEND_BUFFER_SIZE];
		printf("Publishing version to %s\r\n", VERSION_TOPIC);
    d0ee:	4a6b      	ldr	r2, [pc, #428]	; (d29c <publish_sensor_values+0x1b4>)
    d0f0:	4b6b      	ldr	r3, [pc, #428]	; (d2a0 <publish_sensor_values+0x1b8>)
    d0f2:	0011      	movs	r1, r2
    d0f4:	0018      	movs	r0, r3
    d0f6:	4b6b      	ldr	r3, [pc, #428]	; (d2a4 <publish_sensor_values+0x1bc>)
    d0f8:	4798      	blx	r3
		//version
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    d0fa:	003b      	movs	r3, r7
    d0fc:	2240      	movs	r2, #64	; 0x40
    d0fe:	2100      	movs	r1, #0
    d100:	0018      	movs	r0, r3
    d102:	4b69      	ldr	r3, [pc, #420]	; (d2a8 <publish_sensor_values+0x1c0>)
    d104:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%s", APP_VERSION); //set to current firmware
    d106:	003b      	movs	r3, r7
    d108:	4a68      	ldr	r2, [pc, #416]	; (d2ac <publish_sensor_values+0x1c4>)
    d10a:	6811      	ldr	r1, [r2, #0]
    d10c:	6019      	str	r1, [r3, #0]
    d10e:	8892      	ldrh	r2, [r2, #4]
    d110:	809a      	strh	r2, [r3, #4]
		mqtt_publish(&mqtt_inst, VERSION_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    d112:	003b      	movs	r3, r7
    d114:	0018      	movs	r0, r3
    d116:	4b66      	ldr	r3, [pc, #408]	; (d2b0 <publish_sensor_values+0x1c8>)
    d118:	4798      	blx	r3
    d11a:	0004      	movs	r4, r0
    d11c:	003a      	movs	r2, r7
    d11e:	495f      	ldr	r1, [pc, #380]	; (d29c <publish_sensor_values+0x1b4>)
    d120:	4864      	ldr	r0, [pc, #400]	; (d2b4 <publish_sensor_values+0x1cc>)
    d122:	2300      	movs	r3, #0
    d124:	9301      	str	r3, [sp, #4]
    d126:	2300      	movs	r3, #0
    d128:	9300      	str	r3, [sp, #0]
    d12a:	0023      	movs	r3, r4
    d12c:	4c62      	ldr	r4, [pc, #392]	; (d2b8 <publish_sensor_values+0x1d0>)
    d12e:	47a0      	blx	r4
		
		
		//temp
		set_resolution(FOURTEEN_BIT_RESOLUTION,FOURTEEN_BIT_RESOLUTION);
    d130:	2102      	movs	r1, #2
    d132:	2002      	movs	r0, #2
    d134:	4b61      	ldr	r3, [pc, #388]	; (d2bc <publish_sensor_values+0x1d4>)
    d136:	4798      	blx	r3
		double temperature = get_temp();
    d138:	4b61      	ldr	r3, [pc, #388]	; (d2c0 <publish_sensor_values+0x1d8>)
    d13a:	4798      	blx	r3
    d13c:	0003      	movs	r3, r0
    d13e:	000c      	movs	r4, r1
    d140:	653b      	str	r3, [r7, #80]	; 0x50
    d142:	657c      	str	r4, [r7, #84]	; 0x54
		double humidity = get_humidity();
    d144:	4b5f      	ldr	r3, [pc, #380]	; (d2c4 <publish_sensor_values+0x1dc>)
    d146:	4798      	blx	r3
    d148:	0003      	movs	r3, r0
    d14a:	000c      	movs	r4, r1
    d14c:	64bb      	str	r3, [r7, #72]	; 0x48
    d14e:	64fc      	str	r4, [r7, #76]	; 0x4c
		
		printf("Temperature: %f\r\n", temperature);
    d150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d152:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    d154:	495c      	ldr	r1, [pc, #368]	; (d2c8 <publish_sensor_values+0x1e0>)
    d156:	001a      	movs	r2, r3
    d158:	0023      	movs	r3, r4
    d15a:	0008      	movs	r0, r1
    d15c:	4951      	ldr	r1, [pc, #324]	; (d2a4 <publish_sensor_values+0x1bc>)
    d15e:	4788      	blx	r1
		printf("Humidity: %f\r\n", humidity);
    d160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d162:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    d164:	4959      	ldr	r1, [pc, #356]	; (d2cc <publish_sensor_values+0x1e4>)
    d166:	001a      	movs	r2, r3
    d168:	0023      	movs	r3, r4
    d16a:	0008      	movs	r0, r1
    d16c:	494d      	ldr	r1, [pc, #308]	; (d2a4 <publish_sensor_values+0x1bc>)
    d16e:	4788      	blx	r1

		
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    d170:	003b      	movs	r3, r7
    d172:	2240      	movs	r2, #64	; 0x40
    d174:	2100      	movs	r1, #0
    d176:	0018      	movs	r0, r3
    d178:	4b4b      	ldr	r3, [pc, #300]	; (d2a8 <publish_sensor_values+0x1c0>)
    d17a:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%f", temperature);
    d17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d17e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    d180:	4953      	ldr	r1, [pc, #332]	; (d2d0 <publish_sensor_values+0x1e8>)
    d182:	0038      	movs	r0, r7
    d184:	001a      	movs	r2, r3
    d186:	0023      	movs	r3, r4
    d188:	4c52      	ldr	r4, [pc, #328]	; (d2d4 <publish_sensor_values+0x1ec>)
    d18a:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    d18c:	003b      	movs	r3, r7
    d18e:	0018      	movs	r0, r3
    d190:	4b47      	ldr	r3, [pc, #284]	; (d2b0 <publish_sensor_values+0x1c8>)
    d192:	4798      	blx	r3
    d194:	0004      	movs	r4, r0
    d196:	003a      	movs	r2, r7
    d198:	494f      	ldr	r1, [pc, #316]	; (d2d8 <publish_sensor_values+0x1f0>)
    d19a:	4846      	ldr	r0, [pc, #280]	; (d2b4 <publish_sensor_values+0x1cc>)
    d19c:	2300      	movs	r3, #0
    d19e:	9301      	str	r3, [sp, #4]
    d1a0:	2300      	movs	r3, #0
    d1a2:	9300      	str	r3, [sp, #0]
    d1a4:	0023      	movs	r3, r4
    d1a6:	4c44      	ldr	r4, [pc, #272]	; (d2b8 <publish_sensor_values+0x1d0>)
    d1a8:	47a0      	blx	r4
		
		//humidity
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    d1aa:	003b      	movs	r3, r7
    d1ac:	2240      	movs	r2, #64	; 0x40
    d1ae:	2100      	movs	r1, #0
    d1b0:	0018      	movs	r0, r3
    d1b2:	4b3d      	ldr	r3, [pc, #244]	; (d2a8 <publish_sensor_values+0x1c0>)
    d1b4:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%f", humidity);
    d1b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d1b8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    d1ba:	4945      	ldr	r1, [pc, #276]	; (d2d0 <publish_sensor_values+0x1e8>)
    d1bc:	0038      	movs	r0, r7
    d1be:	001a      	movs	r2, r3
    d1c0:	0023      	movs	r3, r4
    d1c2:	4c44      	ldr	r4, [pc, #272]	; (d2d4 <publish_sensor_values+0x1ec>)
    d1c4:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, HUMIDITY_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    d1c6:	003b      	movs	r3, r7
    d1c8:	0018      	movs	r0, r3
    d1ca:	4b39      	ldr	r3, [pc, #228]	; (d2b0 <publish_sensor_values+0x1c8>)
    d1cc:	4798      	blx	r3
    d1ce:	0004      	movs	r4, r0
    d1d0:	003a      	movs	r2, r7
    d1d2:	4942      	ldr	r1, [pc, #264]	; (d2dc <publish_sensor_values+0x1f4>)
    d1d4:	4837      	ldr	r0, [pc, #220]	; (d2b4 <publish_sensor_values+0x1cc>)
    d1d6:	2300      	movs	r3, #0
    d1d8:	9301      	str	r3, [sp, #4]
    d1da:	2300      	movs	r3, #0
    d1dc:	9300      	str	r3, [sp, #0]
    d1de:	0023      	movs	r3, r4
    d1e0:	4c35      	ldr	r4, [pc, #212]	; (d2b8 <publish_sensor_values+0x1d0>)
    d1e2:	47a0      	blx	r4
		
		
		//lux
		
		power_on_tsl2561();
    d1e4:	4b3e      	ldr	r3, [pc, #248]	; (d2e0 <publish_sensor_values+0x1f8>)
    d1e6:	4798      	blx	r3
		uint32_t lux_value = get_lux();
    d1e8:	4b3e      	ldr	r3, [pc, #248]	; (d2e4 <publish_sensor_values+0x1fc>)
    d1ea:	4798      	blx	r3
    d1ec:	0003      	movs	r3, r0
    d1ee:	647b      	str	r3, [r7, #68]	; 0x44
		power_off_tsl2561();
    d1f0:	4b3d      	ldr	r3, [pc, #244]	; (d2e8 <publish_sensor_values+0x200>)
    d1f2:	4798      	blx	r3
		
		printf("Lux: %d\r\n", lux_value);
    d1f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d1f6:	4b3d      	ldr	r3, [pc, #244]	; (d2ec <publish_sensor_values+0x204>)
    d1f8:	0011      	movs	r1, r2
    d1fa:	0018      	movs	r0, r3
    d1fc:	4b29      	ldr	r3, [pc, #164]	; (d2a4 <publish_sensor_values+0x1bc>)
    d1fe:	4798      	blx	r3
		
		
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    d200:	003b      	movs	r3, r7
    d202:	2240      	movs	r2, #64	; 0x40
    d204:	2100      	movs	r1, #0
    d206:	0018      	movs	r0, r3
    d208:	4b27      	ldr	r3, [pc, #156]	; (d2a8 <publish_sensor_values+0x1c0>)
    d20a:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%d", lux_value);
    d20c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d20e:	4938      	ldr	r1, [pc, #224]	; (d2f0 <publish_sensor_values+0x208>)
    d210:	003b      	movs	r3, r7
    d212:	0018      	movs	r0, r3
    d214:	4b2f      	ldr	r3, [pc, #188]	; (d2d4 <publish_sensor_values+0x1ec>)
    d216:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, LUX_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    d218:	003b      	movs	r3, r7
    d21a:	0018      	movs	r0, r3
    d21c:	4b24      	ldr	r3, [pc, #144]	; (d2b0 <publish_sensor_values+0x1c8>)
    d21e:	4798      	blx	r3
    d220:	0004      	movs	r4, r0
    d222:	003a      	movs	r2, r7
    d224:	4933      	ldr	r1, [pc, #204]	; (d2f4 <publish_sensor_values+0x20c>)
    d226:	4823      	ldr	r0, [pc, #140]	; (d2b4 <publish_sensor_values+0x1cc>)
    d228:	2300      	movs	r3, #0
    d22a:	9301      	str	r3, [sp, #4]
    d22c:	2300      	movs	r3, #0
    d22e:	9300      	str	r3, [sp, #0]
    d230:	0023      	movs	r3, r4
    d232:	4c21      	ldr	r4, [pc, #132]	; (d2b8 <publish_sensor_values+0x1d0>)
    d234:	47a0      	blx	r4
		
		
		//moisture
		float m_value = get_moisture();
    d236:	4b30      	ldr	r3, [pc, #192]	; (d2f8 <publish_sensor_values+0x210>)
    d238:	4798      	blx	r3
    d23a:	1c03      	adds	r3, r0, #0
    d23c:	643b      	str	r3, [r7, #64]	; 0x40
		
		printf("Moisture: %.02f\r\n", m_value);
    d23e:	4b2f      	ldr	r3, [pc, #188]	; (d2fc <publish_sensor_values+0x214>)
    d240:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d242:	4798      	blx	r3
    d244:	0003      	movs	r3, r0
    d246:	000c      	movs	r4, r1
    d248:	492d      	ldr	r1, [pc, #180]	; (d300 <publish_sensor_values+0x218>)
    d24a:	001a      	movs	r2, r3
    d24c:	0023      	movs	r3, r4
    d24e:	0008      	movs	r0, r1
    d250:	4914      	ldr	r1, [pc, #80]	; (d2a4 <publish_sensor_values+0x1bc>)
    d252:	4788      	blx	r1
		
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    d254:	003b      	movs	r3, r7
    d256:	2240      	movs	r2, #64	; 0x40
    d258:	2100      	movs	r1, #0
    d25a:	0018      	movs	r0, r3
    d25c:	4b12      	ldr	r3, [pc, #72]	; (d2a8 <publish_sensor_values+0x1c0>)
    d25e:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%.02f", m_value);
    d260:	4b26      	ldr	r3, [pc, #152]	; (d2fc <publish_sensor_values+0x214>)
    d262:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d264:	4798      	blx	r3
    d266:	0003      	movs	r3, r0
    d268:	000c      	movs	r4, r1
    d26a:	4926      	ldr	r1, [pc, #152]	; (d304 <publish_sensor_values+0x21c>)
    d26c:	0038      	movs	r0, r7
    d26e:	001a      	movs	r2, r3
    d270:	0023      	movs	r3, r4
    d272:	4c18      	ldr	r4, [pc, #96]	; (d2d4 <publish_sensor_values+0x1ec>)
    d274:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, MOISTURE_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    d276:	003b      	movs	r3, r7
    d278:	0018      	movs	r0, r3
    d27a:	4b0d      	ldr	r3, [pc, #52]	; (d2b0 <publish_sensor_values+0x1c8>)
    d27c:	4798      	blx	r3
    d27e:	0004      	movs	r4, r0
    d280:	003a      	movs	r2, r7
    d282:	4921      	ldr	r1, [pc, #132]	; (d308 <publish_sensor_values+0x220>)
    d284:	480b      	ldr	r0, [pc, #44]	; (d2b4 <publish_sensor_values+0x1cc>)
    d286:	2300      	movs	r3, #0
    d288:	9301      	str	r3, [sp, #4]
    d28a:	2300      	movs	r3, #0
    d28c:	9300      	str	r3, [sp, #0]
    d28e:	0023      	movs	r3, r4
    d290:	4c09      	ldr	r4, [pc, #36]	; (d2b8 <publish_sensor_values+0x1d0>)
    d292:	47a0      	blx	r4
		
	
}
    d294:	46c0      	nop			; (mov r8, r8)
    d296:	46bd      	mov	sp, r7
    d298:	b017      	add	sp, #92	; 0x5c
    d29a:	bd90      	pop	{r4, r7, pc}
    d29c:	00019c88 	.word	0x00019c88
    d2a0:	00019ca0 	.word	0x00019ca0
    d2a4:	00012f71 	.word	0x00012f71
    d2a8:	0001252f 	.word	0x0001252f
    d2ac:	00019cbc 	.word	0x00019cbc
    d2b0:	000132d3 	.word	0x000132d3
    d2b4:	20000878 	.word	0x20000878
    d2b8:	000120bd 	.word	0x000120bd
    d2bc:	00000605 	.word	0x00000605
    d2c0:	000008d9 	.word	0x000008d9
    d2c4:	0000086d 	.word	0x0000086d
    d2c8:	00019cc4 	.word	0x00019cc4
    d2cc:	00019cd8 	.word	0x00019cd8
    d2d0:	00019ce8 	.word	0x00019ce8
    d2d4:	00013231 	.word	0x00013231
    d2d8:	00019cec 	.word	0x00019cec
    d2dc:	00019d00 	.word	0x00019d00
    d2e0:	00000d31 	.word	0x00000d31
    d2e4:	00000dd9 	.word	0x00000dd9
    d2e8:	00000d51 	.word	0x00000d51
    d2ec:	00019d14 	.word	0x00019d14
    d2f0:	00019d20 	.word	0x00019d20
    d2f4:	00019d24 	.word	0x00019d24
    d2f8:	00011645 	.word	0x00011645
    d2fc:	00017921 	.word	0x00017921
    d300:	00019d38 	.word	0x00019d38
    d304:	00019d4c 	.word	0x00019d4c
    d308:	00019d54 	.word	0x00019d54

0000d30c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    d30c:	b580      	push	{r7, lr}
    d30e:	b082      	sub	sp, #8
    d310:	af00      	add	r7, sp, #0
    d312:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	2b00      	cmp	r3, #0
    d318:	d00c      	beq.n	d334 <delay_cycles+0x28>
		SysTick->LOAD = n;
    d31a:	4b08      	ldr	r3, [pc, #32]	; (d33c <delay_cycles+0x30>)
    d31c:	687a      	ldr	r2, [r7, #4]
    d31e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    d320:	4b06      	ldr	r3, [pc, #24]	; (d33c <delay_cycles+0x30>)
    d322:	2200      	movs	r2, #0
    d324:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    d326:	46c0      	nop			; (mov r8, r8)
    d328:	4b04      	ldr	r3, [pc, #16]	; (d33c <delay_cycles+0x30>)
    d32a:	681a      	ldr	r2, [r3, #0]
    d32c:	2380      	movs	r3, #128	; 0x80
    d32e:	025b      	lsls	r3, r3, #9
    d330:	4013      	ands	r3, r2
    d332:	d0f9      	beq.n	d328 <delay_cycles+0x1c>
		};
	}
}
    d334:	46c0      	nop			; (mov r8, r8)
    d336:	46bd      	mov	sp, r7
    d338:	b002      	add	sp, #8
    d33a:	bd80      	pop	{r7, pc}
    d33c:	e000e010 	.word	0xe000e010

0000d340 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    d340:	b580      	push	{r7, lr}
    d342:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    d344:	2000      	movs	r0, #0
    d346:	4b0f      	ldr	r3, [pc, #60]	; (d384 <delay_init+0x44>)
    d348:	4798      	blx	r3
    d34a:	0002      	movs	r2, r0
    d34c:	4b0e      	ldr	r3, [pc, #56]	; (d388 <delay_init+0x48>)
    d34e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    d350:	4b0d      	ldr	r3, [pc, #52]	; (d388 <delay_init+0x48>)
    d352:	6818      	ldr	r0, [r3, #0]
    d354:	4b0d      	ldr	r3, [pc, #52]	; (d38c <delay_init+0x4c>)
    d356:	22fa      	movs	r2, #250	; 0xfa
    d358:	0091      	lsls	r1, r2, #2
    d35a:	4798      	blx	r3
    d35c:	0003      	movs	r3, r0
    d35e:	001a      	movs	r2, r3
    d360:	4b09      	ldr	r3, [pc, #36]	; (d388 <delay_init+0x48>)
    d362:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    d364:	4b08      	ldr	r3, [pc, #32]	; (d388 <delay_init+0x48>)
    d366:	6818      	ldr	r0, [r3, #0]
    d368:	4b08      	ldr	r3, [pc, #32]	; (d38c <delay_init+0x4c>)
    d36a:	22fa      	movs	r2, #250	; 0xfa
    d36c:	0091      	lsls	r1, r2, #2
    d36e:	4798      	blx	r3
    d370:	0003      	movs	r3, r0
    d372:	001a      	movs	r2, r3
    d374:	4b06      	ldr	r3, [pc, #24]	; (d390 <delay_init+0x50>)
    d376:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    d378:	4b06      	ldr	r3, [pc, #24]	; (d394 <delay_init+0x54>)
    d37a:	2205      	movs	r2, #5
    d37c:	601a      	str	r2, [r3, #0]
}
    d37e:	46c0      	nop			; (mov r8, r8)
    d380:	46bd      	mov	sp, r7
    d382:	bd80      	pop	{r7, pc}
    d384:	00010d81 	.word	0x00010d81
    d388:	2000000c 	.word	0x2000000c
    d38c:	000154a5 	.word	0x000154a5
    d390:	20000010 	.word	0x20000010
    d394:	e000e010 	.word	0xe000e010

0000d398 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    d398:	b580      	push	{r7, lr}
    d39a:	b082      	sub	sp, #8
    d39c:	af00      	add	r7, sp, #0
    d39e:	6078      	str	r0, [r7, #4]
	while (n--) {
    d3a0:	e004      	b.n	d3ac <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    d3a2:	4b07      	ldr	r3, [pc, #28]	; (d3c0 <delay_cycles_us+0x28>)
    d3a4:	681b      	ldr	r3, [r3, #0]
    d3a6:	0018      	movs	r0, r3
    d3a8:	4b06      	ldr	r3, [pc, #24]	; (d3c4 <delay_cycles_us+0x2c>)
    d3aa:	4798      	blx	r3
	while (n--) {
    d3ac:	687b      	ldr	r3, [r7, #4]
    d3ae:	1e5a      	subs	r2, r3, #1
    d3b0:	607a      	str	r2, [r7, #4]
    d3b2:	2b00      	cmp	r3, #0
    d3b4:	d1f5      	bne.n	d3a2 <delay_cycles_us+0xa>
	}
}
    d3b6:	46c0      	nop			; (mov r8, r8)
    d3b8:	46bd      	mov	sp, r7
    d3ba:	b002      	add	sp, #8
    d3bc:	bd80      	pop	{r7, pc}
    d3be:	46c0      	nop			; (mov r8, r8)
    d3c0:	20000010 	.word	0x20000010
    d3c4:	0000d30d 	.word	0x0000d30d

0000d3c8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    d3c8:	b580      	push	{r7, lr}
    d3ca:	b082      	sub	sp, #8
    d3cc:	af00      	add	r7, sp, #0
    d3ce:	6078      	str	r0, [r7, #4]
	while (n--) {
    d3d0:	e004      	b.n	d3dc <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    d3d2:	4b07      	ldr	r3, [pc, #28]	; (d3f0 <delay_cycles_ms+0x28>)
    d3d4:	681b      	ldr	r3, [r3, #0]
    d3d6:	0018      	movs	r0, r3
    d3d8:	4b06      	ldr	r3, [pc, #24]	; (d3f4 <delay_cycles_ms+0x2c>)
    d3da:	4798      	blx	r3
	while (n--) {
    d3dc:	687b      	ldr	r3, [r7, #4]
    d3de:	1e5a      	subs	r2, r3, #1
    d3e0:	607a      	str	r2, [r7, #4]
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d1f5      	bne.n	d3d2 <delay_cycles_ms+0xa>
	}
}
    d3e6:	46c0      	nop			; (mov r8, r8)
    d3e8:	46bd      	mov	sp, r7
    d3ea:	b002      	add	sp, #8
    d3ec:	bd80      	pop	{r7, pc}
    d3ee:	46c0      	nop			; (mov r8, r8)
    d3f0:	2000000c 	.word	0x2000000c
    d3f4:	0000d30d 	.word	0x0000d30d

0000d3f8 <system_gclk_chan_get_config_defaults>:
{
    d3f8:	b580      	push	{r7, lr}
    d3fa:	b082      	sub	sp, #8
    d3fc:	af00      	add	r7, sp, #0
    d3fe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	2200      	movs	r2, #0
    d404:	701a      	strb	r2, [r3, #0]
}
    d406:	46c0      	nop			; (mov r8, r8)
    d408:	46bd      	mov	sp, r7
    d40a:	b002      	add	sp, #8
    d40c:	bd80      	pop	{r7, pc}
	...

0000d410 <system_apb_clock_set_mask>:
{
    d410:	b580      	push	{r7, lr}
    d412:	b082      	sub	sp, #8
    d414:	af00      	add	r7, sp, #0
    d416:	0002      	movs	r2, r0
    d418:	6039      	str	r1, [r7, #0]
    d41a:	1dfb      	adds	r3, r7, #7
    d41c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    d41e:	1dfb      	adds	r3, r7, #7
    d420:	781b      	ldrb	r3, [r3, #0]
    d422:	2b01      	cmp	r3, #1
    d424:	d00a      	beq.n	d43c <system_apb_clock_set_mask+0x2c>
    d426:	2b02      	cmp	r3, #2
    d428:	d00f      	beq.n	d44a <system_apb_clock_set_mask+0x3a>
    d42a:	2b00      	cmp	r3, #0
    d42c:	d114      	bne.n	d458 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    d42e:	4b0e      	ldr	r3, [pc, #56]	; (d468 <system_apb_clock_set_mask+0x58>)
    d430:	4a0d      	ldr	r2, [pc, #52]	; (d468 <system_apb_clock_set_mask+0x58>)
    d432:	6991      	ldr	r1, [r2, #24]
    d434:	683a      	ldr	r2, [r7, #0]
    d436:	430a      	orrs	r2, r1
    d438:	619a      	str	r2, [r3, #24]
			break;
    d43a:	e00f      	b.n	d45c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    d43c:	4b0a      	ldr	r3, [pc, #40]	; (d468 <system_apb_clock_set_mask+0x58>)
    d43e:	4a0a      	ldr	r2, [pc, #40]	; (d468 <system_apb_clock_set_mask+0x58>)
    d440:	69d1      	ldr	r1, [r2, #28]
    d442:	683a      	ldr	r2, [r7, #0]
    d444:	430a      	orrs	r2, r1
    d446:	61da      	str	r2, [r3, #28]
			break;
    d448:	e008      	b.n	d45c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    d44a:	4b07      	ldr	r3, [pc, #28]	; (d468 <system_apb_clock_set_mask+0x58>)
    d44c:	4a06      	ldr	r2, [pc, #24]	; (d468 <system_apb_clock_set_mask+0x58>)
    d44e:	6a11      	ldr	r1, [r2, #32]
    d450:	683a      	ldr	r2, [r7, #0]
    d452:	430a      	orrs	r2, r1
    d454:	621a      	str	r2, [r3, #32]
			break;
    d456:	e001      	b.n	d45c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    d458:	2317      	movs	r3, #23
    d45a:	e000      	b.n	d45e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    d45c:	2300      	movs	r3, #0
}
    d45e:	0018      	movs	r0, r3
    d460:	46bd      	mov	sp, r7
    d462:	b002      	add	sp, #8
    d464:	bd80      	pop	{r7, pc}
    d466:	46c0      	nop			; (mov r8, r8)
    d468:	40000400 	.word	0x40000400

0000d46c <system_pinmux_get_config_defaults>:
{
    d46c:	b580      	push	{r7, lr}
    d46e:	b082      	sub	sp, #8
    d470:	af00      	add	r7, sp, #0
    d472:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    d474:	687b      	ldr	r3, [r7, #4]
    d476:	2280      	movs	r2, #128	; 0x80
    d478:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d47a:	687b      	ldr	r3, [r7, #4]
    d47c:	2200      	movs	r2, #0
    d47e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	2201      	movs	r2, #1
    d484:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    d486:	687b      	ldr	r3, [r7, #4]
    d488:	2200      	movs	r2, #0
    d48a:	70da      	strb	r2, [r3, #3]
}
    d48c:	46c0      	nop			; (mov r8, r8)
    d48e:	46bd      	mov	sp, r7
    d490:	b002      	add	sp, #8
    d492:	bd80      	pop	{r7, pc}

0000d494 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    d494:	b580      	push	{r7, lr}
    d496:	b082      	sub	sp, #8
    d498:	af00      	add	r7, sp, #0
    d49a:	0002      	movs	r2, r0
    d49c:	1dfb      	adds	r3, r7, #7
    d49e:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    d4a0:	1dfb      	adds	r3, r7, #7
    d4a2:	781b      	ldrb	r3, [r3, #0]
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	d002      	beq.n	d4ae <system_voltage_reference_enable+0x1a>
    d4a8:	2b01      	cmp	r3, #1
    d4aa:	d007      	beq.n	d4bc <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    d4ac:	e00d      	b.n	d4ca <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    d4ae:	4b08      	ldr	r3, [pc, #32]	; (d4d0 <system_voltage_reference_enable+0x3c>)
    d4b0:	4a07      	ldr	r2, [pc, #28]	; (d4d0 <system_voltage_reference_enable+0x3c>)
    d4b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
    d4b4:	2102      	movs	r1, #2
    d4b6:	430a      	orrs	r2, r1
    d4b8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    d4ba:	e006      	b.n	d4ca <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    d4bc:	4b04      	ldr	r3, [pc, #16]	; (d4d0 <system_voltage_reference_enable+0x3c>)
    d4be:	4a04      	ldr	r2, [pc, #16]	; (d4d0 <system_voltage_reference_enable+0x3c>)
    d4c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
    d4c2:	2104      	movs	r1, #4
    d4c4:	430a      	orrs	r2, r1
    d4c6:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    d4c8:	46c0      	nop			; (mov r8, r8)
	}
}
    d4ca:	46bd      	mov	sp, r7
    d4cc:	b002      	add	sp, #8
    d4ce:	bd80      	pop	{r7, pc}
    d4d0:	40000800 	.word	0x40000800

0000d4d4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    d4d4:	b580      	push	{r7, lr}
    d4d6:	b084      	sub	sp, #16
    d4d8:	af00      	add	r7, sp, #0
    d4da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    d4dc:	687b      	ldr	r3, [r7, #4]
    d4de:	681b      	ldr	r3, [r3, #0]
    d4e0:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    d4e2:	68fb      	ldr	r3, [r7, #12]
    d4e4:	7e5b      	ldrb	r3, [r3, #25]
    d4e6:	b2db      	uxtb	r3, r3
    d4e8:	b25b      	sxtb	r3, r3
    d4ea:	2b00      	cmp	r3, #0
    d4ec:	da01      	bge.n	d4f2 <adc_is_syncing+0x1e>
		return true;
    d4ee:	2301      	movs	r3, #1
    d4f0:	e000      	b.n	d4f4 <adc_is_syncing+0x20>
	}

	return false;
    d4f2:	2300      	movs	r3, #0
}
    d4f4:	0018      	movs	r0, r3
    d4f6:	46bd      	mov	sp, r7
    d4f8:	b004      	add	sp, #16
    d4fa:	bd80      	pop	{r7, pc}

0000d4fc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    d4fc:	b580      	push	{r7, lr}
    d4fe:	b082      	sub	sp, #8
    d500:	af00      	add	r7, sp, #0
    d502:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    d504:	687b      	ldr	r3, [r7, #4]
    d506:	2200      	movs	r2, #0
    d508:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    d50a:	687b      	ldr	r3, [r7, #4]
    d50c:	2200      	movs	r2, #0
    d50e:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    d510:	687b      	ldr	r3, [r7, #4]
    d512:	2200      	movs	r2, #0
    d514:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    d516:	687b      	ldr	r3, [r7, #4]
    d518:	2200      	movs	r2, #0
    d51a:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	2200      	movs	r2, #0
    d520:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    d522:	687b      	ldr	r3, [r7, #4]
    d524:	2200      	movs	r2, #0
    d526:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    d528:	687b      	ldr	r3, [r7, #4]
    d52a:	2200      	movs	r2, #0
    d52c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	2200      	movs	r2, #0
    d532:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	2200      	movs	r2, #0
    d538:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    d53a:	687b      	ldr	r3, [r7, #4]
    d53c:	22c0      	movs	r2, #192	; 0xc0
    d53e:	0152      	lsls	r2, r2, #5
    d540:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    d542:	687b      	ldr	r3, [r7, #4]
    d544:	2200      	movs	r2, #0
    d546:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    d548:	687b      	ldr	r3, [r7, #4]
    d54a:	2200      	movs	r2, #0
    d54c:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    d54e:	687b      	ldr	r3, [r7, #4]
    d550:	2200      	movs	r2, #0
    d552:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    d554:	687b      	ldr	r3, [r7, #4]
    d556:	2200      	movs	r2, #0
    d558:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    d55a:	687b      	ldr	r3, [r7, #4]
    d55c:	2200      	movs	r2, #0
    d55e:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    d560:	687b      	ldr	r3, [r7, #4]
    d562:	222a      	movs	r2, #42	; 0x2a
    d564:	2100      	movs	r1, #0
    d566:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    d568:	687b      	ldr	r3, [r7, #4]
    d56a:	2200      	movs	r2, #0
    d56c:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    d56e:	687b      	ldr	r3, [r7, #4]
    d570:	2200      	movs	r2, #0
    d572:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    d574:	687b      	ldr	r3, [r7, #4]
    d576:	2224      	movs	r2, #36	; 0x24
    d578:	2100      	movs	r1, #0
    d57a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    d57c:	687b      	ldr	r3, [r7, #4]
    d57e:	2200      	movs	r2, #0
    d580:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    d582:	687b      	ldr	r3, [r7, #4]
    d584:	2200      	movs	r2, #0
    d586:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    d588:	687b      	ldr	r3, [r7, #4]
    d58a:	2200      	movs	r2, #0
    d58c:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    d58e:	687b      	ldr	r3, [r7, #4]
    d590:	222b      	movs	r2, #43	; 0x2b
    d592:	2100      	movs	r1, #0
    d594:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	222c      	movs	r2, #44	; 0x2c
    d59a:	2100      	movs	r1, #0
    d59c:	5499      	strb	r1, [r3, r2]
}
    d59e:	46c0      	nop			; (mov r8, r8)
    d5a0:	46bd      	mov	sp, r7
    d5a2:	b002      	add	sp, #8
    d5a4:	bd80      	pop	{r7, pc}
	...

0000d5a8 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    d5a8:	b580      	push	{r7, lr}
    d5aa:	b098      	sub	sp, #96	; 0x60
    d5ac:	af00      	add	r7, sp, #0
    d5ae:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    d5b0:	230c      	movs	r3, #12
    d5b2:	18fa      	adds	r2, r7, r3
    d5b4:	4b15      	ldr	r3, [pc, #84]	; (d60c <_adc_configure_ain_pin+0x64>)
    d5b6:	0010      	movs	r0, r2
    d5b8:	0019      	movs	r1, r3
    d5ba:	2350      	movs	r3, #80	; 0x50
    d5bc:	001a      	movs	r2, r3
    d5be:	4b14      	ldr	r3, [pc, #80]	; (d610 <_adc_configure_ain_pin+0x68>)
    d5c0:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    d5c2:	4b14      	ldr	r3, [pc, #80]	; (d614 <_adc_configure_ain_pin+0x6c>)
    d5c4:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    d5c6:	687b      	ldr	r3, [r7, #4]
    d5c8:	2b13      	cmp	r3, #19
    d5ca:	d81a      	bhi.n	d602 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    d5cc:	230c      	movs	r3, #12
    d5ce:	18fb      	adds	r3, r7, r3
    d5d0:	687a      	ldr	r2, [r7, #4]
    d5d2:	0092      	lsls	r2, r2, #2
    d5d4:	58d3      	ldr	r3, [r2, r3]
    d5d6:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    d5d8:	2308      	movs	r3, #8
    d5da:	18fb      	adds	r3, r7, r3
    d5dc:	0018      	movs	r0, r3
    d5de:	4b0e      	ldr	r3, [pc, #56]	; (d618 <_adc_configure_ain_pin+0x70>)
    d5e0:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    d5e2:	2308      	movs	r3, #8
    d5e4:	18fb      	adds	r3, r7, r3
    d5e6:	2200      	movs	r2, #0
    d5e8:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    d5ea:	2308      	movs	r3, #8
    d5ec:	18fb      	adds	r3, r7, r3
    d5ee:	2201      	movs	r2, #1
    d5f0:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    d5f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    d5f4:	b2db      	uxtb	r3, r3
    d5f6:	2208      	movs	r2, #8
    d5f8:	18ba      	adds	r2, r7, r2
    d5fa:	0011      	movs	r1, r2
    d5fc:	0018      	movs	r0, r3
    d5fe:	4b07      	ldr	r3, [pc, #28]	; (d61c <_adc_configure_ain_pin+0x74>)
    d600:	4798      	blx	r3
	}
}
    d602:	46c0      	nop			; (mov r8, r8)
    d604:	46bd      	mov	sp, r7
    d606:	b018      	add	sp, #96	; 0x60
    d608:	bd80      	pop	{r7, pc}
    d60a:	46c0      	nop			; (mov r8, r8)
    d60c:	00019d68 	.word	0x00019d68
    d610:	000124f9 	.word	0x000124f9
    d614:	0000ffff 	.word	0x0000ffff
    d618:	0000d46d 	.word	0x0000d46d
    d61c:	00011145 	.word	0x00011145

0000d620 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    d620:	b5f0      	push	{r4, r5, r6, r7, lr}
    d622:	b089      	sub	sp, #36	; 0x24
    d624:	af00      	add	r7, sp, #0
    d626:	6078      	str	r0, [r7, #4]
    d628:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    d62a:	231f      	movs	r3, #31
    d62c:	18fb      	adds	r3, r7, r3
    d62e:	2200      	movs	r2, #0
    d630:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    d632:	2310      	movs	r3, #16
    d634:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    d636:	2317      	movs	r3, #23
    d638:	18fb      	adds	r3, r7, r3
    d63a:	2200      	movs	r2, #0
    d63c:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    d63e:	687b      	ldr	r3, [r7, #4]
    d640:	681b      	ldr	r3, [r3, #0]
    d642:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d644:	230c      	movs	r3, #12
    d646:	18fb      	adds	r3, r7, r3
    d648:	0018      	movs	r0, r3
    d64a:	4bce      	ldr	r3, [pc, #824]	; (d984 <_adc_set_config+0x364>)
    d64c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    d64e:	683b      	ldr	r3, [r7, #0]
    d650:	781a      	ldrb	r2, [r3, #0]
    d652:	230c      	movs	r3, #12
    d654:	18fb      	adds	r3, r7, r3
    d656:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    d658:	230c      	movs	r3, #12
    d65a:	18fb      	adds	r3, r7, r3
    d65c:	0019      	movs	r1, r3
    d65e:	201e      	movs	r0, #30
    d660:	4bc9      	ldr	r3, [pc, #804]	; (d988 <_adc_set_config+0x368>)
    d662:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    d664:	201e      	movs	r0, #30
    d666:	4bc9      	ldr	r3, [pc, #804]	; (d98c <_adc_set_config+0x36c>)
    d668:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    d66a:	683b      	ldr	r3, [r7, #0]
    d66c:	222c      	movs	r2, #44	; 0x2c
    d66e:	5c9b      	ldrb	r3, [r3, r2]
    d670:	2b00      	cmp	r3, #0
    d672:	d040      	beq.n	d6f6 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    d674:	2316      	movs	r3, #22
    d676:	18fb      	adds	r3, r7, r3
    d678:	683a      	ldr	r2, [r7, #0]
    d67a:	212b      	movs	r1, #43	; 0x2b
    d67c:	5c52      	ldrb	r2, [r2, r1]
    d67e:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    d680:	683b      	ldr	r3, [r7, #0]
    d682:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    d684:	2315      	movs	r3, #21
    d686:	18fb      	adds	r3, r7, r3
    d688:	2216      	movs	r2, #22
    d68a:	18ba      	adds	r2, r7, r2
    d68c:	7812      	ldrb	r2, [r2, #0]
    d68e:	188a      	adds	r2, r1, r2
    d690:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    d692:	683b      	ldr	r3, [r7, #0]
    d694:	222c      	movs	r2, #44	; 0x2c
    d696:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    d698:	230f      	movs	r3, #15
    d69a:	18fb      	adds	r3, r7, r3
    d69c:	2215      	movs	r2, #21
    d69e:	18ba      	adds	r2, r7, r2
    d6a0:	7812      	ldrb	r2, [r2, #0]
    d6a2:	188a      	adds	r2, r1, r2
    d6a4:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    d6a6:	e018      	b.n	d6da <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    d6a8:	2316      	movs	r3, #22
    d6aa:	18fb      	adds	r3, r7, r3
    d6ac:	781b      	ldrb	r3, [r3, #0]
    d6ae:	220f      	movs	r2, #15
    d6b0:	4013      	ands	r3, r2
    d6b2:	683a      	ldr	r2, [r7, #0]
    d6b4:	7b12      	ldrb	r2, [r2, #12]
    d6b6:	189b      	adds	r3, r3, r2
    d6b8:	0018      	movs	r0, r3
    d6ba:	4bb5      	ldr	r3, [pc, #724]	; (d990 <_adc_set_config+0x370>)
    d6bc:	4798      	blx	r3
			start_pin++;
    d6be:	2315      	movs	r3, #21
    d6c0:	18fb      	adds	r3, r7, r3
    d6c2:	781a      	ldrb	r2, [r3, #0]
    d6c4:	2315      	movs	r3, #21
    d6c6:	18fb      	adds	r3, r7, r3
    d6c8:	3201      	adds	r2, #1
    d6ca:	701a      	strb	r2, [r3, #0]
			offset++;
    d6cc:	2316      	movs	r3, #22
    d6ce:	18fb      	adds	r3, r7, r3
    d6d0:	781a      	ldrb	r2, [r3, #0]
    d6d2:	2316      	movs	r3, #22
    d6d4:	18fb      	adds	r3, r7, r3
    d6d6:	3201      	adds	r2, #1
    d6d8:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    d6da:	2315      	movs	r3, #21
    d6dc:	18fa      	adds	r2, r7, r3
    d6de:	230f      	movs	r3, #15
    d6e0:	18fb      	adds	r3, r7, r3
    d6e2:	7812      	ldrb	r2, [r2, #0]
    d6e4:	781b      	ldrb	r3, [r3, #0]
    d6e6:	429a      	cmp	r2, r3
    d6e8:	d3de      	bcc.n	d6a8 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    d6ea:	683b      	ldr	r3, [r7, #0]
    d6ec:	89db      	ldrh	r3, [r3, #14]
    d6ee:	0018      	movs	r0, r3
    d6f0:	4ba7      	ldr	r3, [pc, #668]	; (d990 <_adc_set_config+0x370>)
    d6f2:	4798      	blx	r3
    d6f4:	e009      	b.n	d70a <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    d6f6:	683b      	ldr	r3, [r7, #0]
    d6f8:	7b1b      	ldrb	r3, [r3, #12]
    d6fa:	0018      	movs	r0, r3
    d6fc:	4ba4      	ldr	r3, [pc, #656]	; (d990 <_adc_set_config+0x370>)
    d6fe:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    d700:	683b      	ldr	r3, [r7, #0]
    d702:	89db      	ldrh	r3, [r3, #14]
    d704:	0018      	movs	r0, r3
    d706:	4ba2      	ldr	r3, [pc, #648]	; (d990 <_adc_set_config+0x370>)
    d708:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    d70a:	683b      	ldr	r3, [r7, #0]
    d70c:	7d5b      	ldrb	r3, [r3, #21]
    d70e:	009b      	lsls	r3, r3, #2
    d710:	b2da      	uxtb	r2, r3
    d712:	693b      	ldr	r3, [r7, #16]
    d714:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    d716:	683b      	ldr	r3, [r7, #0]
    d718:	7d9b      	ldrb	r3, [r3, #22]
    d71a:	01db      	lsls	r3, r3, #7
    d71c:	b25a      	sxtb	r2, r3
			(config->reference);
    d71e:	683b      	ldr	r3, [r7, #0]
    d720:	785b      	ldrb	r3, [r3, #1]
    d722:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    d724:	4313      	orrs	r3, r2
    d726:	b25b      	sxtb	r3, r3
    d728:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    d72a:	693b      	ldr	r3, [r7, #16]
    d72c:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    d72e:	683b      	ldr	r3, [r7, #0]
    d730:	791b      	ldrb	r3, [r3, #4]
    d732:	2b34      	cmp	r3, #52	; 0x34
    d734:	d846      	bhi.n	d7c4 <_adc_set_config+0x1a4>
    d736:	009a      	lsls	r2, r3, #2
    d738:	4b96      	ldr	r3, [pc, #600]	; (d994 <_adc_set_config+0x374>)
    d73a:	18d3      	adds	r3, r2, r3
    d73c:	681b      	ldr	r3, [r3, #0]
    d73e:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    d740:	231f      	movs	r3, #31
    d742:	18fb      	adds	r3, r7, r3
    d744:	683a      	ldr	r2, [r7, #0]
    d746:	7c52      	ldrb	r2, [r2, #17]
    d748:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    d74a:	2317      	movs	r3, #23
    d74c:	18fb      	adds	r3, r7, r3
    d74e:	683a      	ldr	r2, [r7, #0]
    d750:	7c12      	ldrb	r2, [r2, #16]
    d752:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    d754:	2310      	movs	r3, #16
    d756:	61bb      	str	r3, [r7, #24]
		break;
    d758:	e036      	b.n	d7c8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    d75a:	231f      	movs	r3, #31
    d75c:	18fb      	adds	r3, r7, r3
    d75e:	2201      	movs	r2, #1
    d760:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    d762:	2317      	movs	r3, #23
    d764:	18fb      	adds	r3, r7, r3
    d766:	2202      	movs	r2, #2
    d768:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    d76a:	2310      	movs	r3, #16
    d76c:	61bb      	str	r3, [r7, #24]
		break;
    d76e:	e02b      	b.n	d7c8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    d770:	231f      	movs	r3, #31
    d772:	18fb      	adds	r3, r7, r3
    d774:	2202      	movs	r2, #2
    d776:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    d778:	2317      	movs	r3, #23
    d77a:	18fb      	adds	r3, r7, r3
    d77c:	2204      	movs	r2, #4
    d77e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    d780:	2310      	movs	r3, #16
    d782:	61bb      	str	r3, [r7, #24]
		break;
    d784:	e020      	b.n	d7c8 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    d786:	231f      	movs	r3, #31
    d788:	18fb      	adds	r3, r7, r3
    d78a:	2201      	movs	r2, #1
    d78c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    d78e:	2317      	movs	r3, #23
    d790:	18fb      	adds	r3, r7, r3
    d792:	2206      	movs	r2, #6
    d794:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    d796:	2310      	movs	r3, #16
    d798:	61bb      	str	r3, [r7, #24]
		break;
    d79a:	e015      	b.n	d7c8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    d79c:	231f      	movs	r3, #31
    d79e:	18fb      	adds	r3, r7, r3
    d7a0:	2200      	movs	r2, #0
    d7a2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    d7a4:	2317      	movs	r3, #23
    d7a6:	18fb      	adds	r3, r7, r3
    d7a8:	2208      	movs	r2, #8
    d7aa:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    d7ac:	2310      	movs	r3, #16
    d7ae:	61bb      	str	r3, [r7, #24]
		break;
    d7b0:	e00a      	b.n	d7c8 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    d7b2:	2330      	movs	r3, #48	; 0x30
    d7b4:	61bb      	str	r3, [r7, #24]
		break;
    d7b6:	e007      	b.n	d7c8 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    d7b8:	2320      	movs	r3, #32
    d7ba:	61bb      	str	r3, [r7, #24]
		break;
    d7bc:	e004      	b.n	d7c8 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    d7be:	2300      	movs	r3, #0
    d7c0:	61bb      	str	r3, [r7, #24]
		break;
    d7c2:	e001      	b.n	d7c8 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    d7c4:	2317      	movs	r3, #23
    d7c6:	e1ae      	b.n	db26 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    d7c8:	231f      	movs	r3, #31
    d7ca:	18fb      	adds	r3, r7, r3
    d7cc:	781b      	ldrb	r3, [r3, #0]
    d7ce:	011b      	lsls	r3, r3, #4
    d7d0:	b2db      	uxtb	r3, r3
    d7d2:	2270      	movs	r2, #112	; 0x70
    d7d4:	4013      	ands	r3, r2
    d7d6:	b2da      	uxtb	r2, r3
    d7d8:	2317      	movs	r3, #23
    d7da:	18fb      	adds	r3, r7, r3
    d7dc:	781b      	ldrb	r3, [r3, #0]
    d7de:	4313      	orrs	r3, r2
    d7e0:	b2da      	uxtb	r2, r3
    d7e2:	693b      	ldr	r3, [r7, #16]
    d7e4:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    d7e6:	683b      	ldr	r3, [r7, #0]
    d7e8:	7ddb      	ldrb	r3, [r3, #23]
    d7ea:	2b3f      	cmp	r3, #63	; 0x3f
    d7ec:	d901      	bls.n	d7f2 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    d7ee:	2317      	movs	r3, #23
    d7f0:	e199      	b.n	db26 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    d7f2:	683b      	ldr	r3, [r7, #0]
    d7f4:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    d7f6:	693b      	ldr	r3, [r7, #16]
    d7f8:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    d7fa:	46c0      	nop			; (mov r8, r8)
    d7fc:	687b      	ldr	r3, [r7, #4]
    d7fe:	0018      	movs	r0, r3
    d800:	4b65      	ldr	r3, [pc, #404]	; (d998 <_adc_set_config+0x378>)
    d802:	4798      	blx	r3
    d804:	1e03      	subs	r3, r0, #0
    d806:	d1f9      	bne.n	d7fc <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    d808:	683b      	ldr	r3, [r7, #0]
    d80a:	885a      	ldrh	r2, [r3, #2]
    d80c:	69bb      	ldr	r3, [r7, #24]
    d80e:	b29b      	uxth	r3, r3
    d810:	4313      	orrs	r3, r2
    d812:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    d814:	683b      	ldr	r3, [r7, #0]
    d816:	2124      	movs	r1, #36	; 0x24
    d818:	5c5b      	ldrb	r3, [r3, r1]
    d81a:	b29b      	uxth	r3, r3
    d81c:	00db      	lsls	r3, r3, #3
    d81e:	b29b      	uxth	r3, r3
			resolution |
    d820:	4313      	orrs	r3, r2
    d822:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    d824:	683b      	ldr	r3, [r7, #0]
    d826:	7d1b      	ldrb	r3, [r3, #20]
    d828:	b29b      	uxth	r3, r3
    d82a:	009b      	lsls	r3, r3, #2
    d82c:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    d82e:	4313      	orrs	r3, r2
    d830:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    d832:	683b      	ldr	r3, [r7, #0]
    d834:	7c9b      	ldrb	r3, [r3, #18]
    d836:	b29b      	uxth	r3, r3
    d838:	18db      	adds	r3, r3, r3
    d83a:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    d83c:	4313      	orrs	r3, r2
    d83e:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    d840:	683b      	ldr	r3, [r7, #0]
    d842:	7cdb      	ldrb	r3, [r3, #19]
    d844:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    d846:	4313      	orrs	r3, r2
    d848:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    d84a:	693b      	ldr	r3, [r7, #16]
    d84c:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    d84e:	683b      	ldr	r3, [r7, #0]
    d850:	7e1b      	ldrb	r3, [r3, #24]
    d852:	2b00      	cmp	r3, #0
    d854:	d100      	bne.n	d858 <_adc_set_config+0x238>
    d856:	e0c4      	b.n	d9e2 <_adc_set_config+0x3c2>
		switch (resolution) {
    d858:	69bb      	ldr	r3, [r7, #24]
    d85a:	2b10      	cmp	r3, #16
    d85c:	d100      	bne.n	d860 <_adc_set_config+0x240>
    d85e:	e076      	b.n	d94e <_adc_set_config+0x32e>
    d860:	d802      	bhi.n	d868 <_adc_set_config+0x248>
    d862:	2b00      	cmp	r3, #0
    d864:	d04d      	beq.n	d902 <_adc_set_config+0x2e2>
    d866:	e0bc      	b.n	d9e2 <_adc_set_config+0x3c2>
    d868:	2b20      	cmp	r3, #32
    d86a:	d023      	beq.n	d8b4 <_adc_set_config+0x294>
    d86c:	2b30      	cmp	r3, #48	; 0x30
    d86e:	d000      	beq.n	d872 <_adc_set_config+0x252>
    d870:	e0b7      	b.n	d9e2 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    d872:	683b      	ldr	r3, [r7, #0]
    d874:	7cdb      	ldrb	r3, [r3, #19]
    d876:	2b00      	cmp	r3, #0
    d878:	d011      	beq.n	d89e <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    d87a:	683b      	ldr	r3, [r7, #0]
    d87c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    d87e:	2b7f      	cmp	r3, #127	; 0x7f
    d880:	dc0b      	bgt.n	d89a <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    d882:	683b      	ldr	r3, [r7, #0]
    d884:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    d886:	3380      	adds	r3, #128	; 0x80
    d888:	db07      	blt.n	d89a <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    d88a:	683b      	ldr	r3, [r7, #0]
    d88c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    d88e:	2b7f      	cmp	r3, #127	; 0x7f
    d890:	dc03      	bgt.n	d89a <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    d892:	683b      	ldr	r3, [r7, #0]
    d894:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    d896:	3380      	adds	r3, #128	; 0x80
    d898:	da01      	bge.n	d89e <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    d89a:	2317      	movs	r3, #23
    d89c:	e143      	b.n	db26 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    d89e:	683b      	ldr	r3, [r7, #0]
    d8a0:	69db      	ldr	r3, [r3, #28]
    d8a2:	2bff      	cmp	r3, #255	; 0xff
    d8a4:	dc04      	bgt.n	d8b0 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    d8a6:	683b      	ldr	r3, [r7, #0]
    d8a8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    d8aa:	2bff      	cmp	r3, #255	; 0xff
    d8ac:	dc00      	bgt.n	d8b0 <_adc_set_config+0x290>
    d8ae:	e091      	b.n	d9d4 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    d8b0:	2317      	movs	r3, #23
    d8b2:	e138      	b.n	db26 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    d8b4:	683b      	ldr	r3, [r7, #0]
    d8b6:	7cdb      	ldrb	r3, [r3, #19]
    d8b8:	2b00      	cmp	r3, #0
    d8ba:	d015      	beq.n	d8e8 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    d8bc:	683b      	ldr	r3, [r7, #0]
    d8be:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    d8c0:	4a36      	ldr	r2, [pc, #216]	; (d99c <_adc_set_config+0x37c>)
    d8c2:	4293      	cmp	r3, r2
    d8c4:	dc0e      	bgt.n	d8e4 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    d8c6:	683b      	ldr	r3, [r7, #0]
    d8c8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    d8ca:	4a35      	ldr	r2, [pc, #212]	; (d9a0 <_adc_set_config+0x380>)
    d8cc:	4293      	cmp	r3, r2
    d8ce:	db09      	blt.n	d8e4 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    d8d0:	683b      	ldr	r3, [r7, #0]
    d8d2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    d8d4:	4a31      	ldr	r2, [pc, #196]	; (d99c <_adc_set_config+0x37c>)
    d8d6:	4293      	cmp	r3, r2
    d8d8:	dc04      	bgt.n	d8e4 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    d8da:	683b      	ldr	r3, [r7, #0]
    d8dc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    d8de:	4a30      	ldr	r2, [pc, #192]	; (d9a0 <_adc_set_config+0x380>)
    d8e0:	4293      	cmp	r3, r2
    d8e2:	da01      	bge.n	d8e8 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    d8e4:	2317      	movs	r3, #23
    d8e6:	e11e      	b.n	db26 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    d8e8:	683b      	ldr	r3, [r7, #0]
    d8ea:	69db      	ldr	r3, [r3, #28]
    d8ec:	4a2d      	ldr	r2, [pc, #180]	; (d9a4 <_adc_set_config+0x384>)
    d8ee:	4293      	cmp	r3, r2
    d8f0:	dc05      	bgt.n	d8fe <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    d8f2:	683b      	ldr	r3, [r7, #0]
    d8f4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    d8f6:	4a2b      	ldr	r2, [pc, #172]	; (d9a4 <_adc_set_config+0x384>)
    d8f8:	4293      	cmp	r3, r2
    d8fa:	dc00      	bgt.n	d8fe <_adc_set_config+0x2de>
    d8fc:	e06c      	b.n	d9d8 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    d8fe:	2317      	movs	r3, #23
    d900:	e111      	b.n	db26 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    d902:	683b      	ldr	r3, [r7, #0]
    d904:	7cdb      	ldrb	r3, [r3, #19]
    d906:	2b00      	cmp	r3, #0
    d908:	d015      	beq.n	d936 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    d90a:	683b      	ldr	r3, [r7, #0]
    d90c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    d90e:	4a26      	ldr	r2, [pc, #152]	; (d9a8 <_adc_set_config+0x388>)
    d910:	4293      	cmp	r3, r2
    d912:	dc0e      	bgt.n	d932 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    d914:	683b      	ldr	r3, [r7, #0]
    d916:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    d918:	4a24      	ldr	r2, [pc, #144]	; (d9ac <_adc_set_config+0x38c>)
    d91a:	4293      	cmp	r3, r2
    d91c:	db09      	blt.n	d932 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    d91e:	683b      	ldr	r3, [r7, #0]
    d920:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    d922:	4a21      	ldr	r2, [pc, #132]	; (d9a8 <_adc_set_config+0x388>)
    d924:	4293      	cmp	r3, r2
    d926:	dc04      	bgt.n	d932 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    d928:	683b      	ldr	r3, [r7, #0]
    d92a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    d92c:	4a1f      	ldr	r2, [pc, #124]	; (d9ac <_adc_set_config+0x38c>)
    d92e:	4293      	cmp	r3, r2
    d930:	da01      	bge.n	d936 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    d932:	2317      	movs	r3, #23
    d934:	e0f7      	b.n	db26 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    d936:	683b      	ldr	r3, [r7, #0]
    d938:	69db      	ldr	r3, [r3, #28]
    d93a:	4a1d      	ldr	r2, [pc, #116]	; (d9b0 <_adc_set_config+0x390>)
    d93c:	4293      	cmp	r3, r2
    d93e:	dc04      	bgt.n	d94a <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    d940:	683b      	ldr	r3, [r7, #0]
    d942:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    d944:	4a1a      	ldr	r2, [pc, #104]	; (d9b0 <_adc_set_config+0x390>)
    d946:	4293      	cmp	r3, r2
    d948:	dd48      	ble.n	d9dc <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    d94a:	2317      	movs	r3, #23
    d94c:	e0eb      	b.n	db26 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    d94e:	683b      	ldr	r3, [r7, #0]
    d950:	7cdb      	ldrb	r3, [r3, #19]
    d952:	2b00      	cmp	r3, #0
    d954:	d032      	beq.n	d9bc <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    d956:	683b      	ldr	r3, [r7, #0]
    d958:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    d95a:	4a16      	ldr	r2, [pc, #88]	; (d9b4 <_adc_set_config+0x394>)
    d95c:	4293      	cmp	r3, r2
    d95e:	dc0e      	bgt.n	d97e <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    d960:	683b      	ldr	r3, [r7, #0]
    d962:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    d964:	4a14      	ldr	r2, [pc, #80]	; (d9b8 <_adc_set_config+0x398>)
    d966:	4293      	cmp	r3, r2
    d968:	db09      	blt.n	d97e <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    d96a:	683b      	ldr	r3, [r7, #0]
    d96c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    d96e:	4a11      	ldr	r2, [pc, #68]	; (d9b4 <_adc_set_config+0x394>)
    d970:	4293      	cmp	r3, r2
    d972:	dc04      	bgt.n	d97e <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    d974:	683b      	ldr	r3, [r7, #0]
    d976:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    d978:	4a0f      	ldr	r2, [pc, #60]	; (d9b8 <_adc_set_config+0x398>)
    d97a:	4293      	cmp	r3, r2
    d97c:	da1e      	bge.n	d9bc <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    d97e:	2317      	movs	r3, #23
    d980:	e0d1      	b.n	db26 <_adc_set_config+0x506>
    d982:	46c0      	nop			; (mov r8, r8)
    d984:	0000d3f9 	.word	0x0000d3f9
    d988:	00010e59 	.word	0x00010e59
    d98c:	00010e9d 	.word	0x00010e9d
    d990:	0000d5a9 	.word	0x0000d5a9
    d994:	00019db8 	.word	0x00019db8
    d998:	0000d4d5 	.word	0x0000d4d5
    d99c:	000001ff 	.word	0x000001ff
    d9a0:	fffffe00 	.word	0xfffffe00
    d9a4:	000003ff 	.word	0x000003ff
    d9a8:	000007ff 	.word	0x000007ff
    d9ac:	fffff800 	.word	0xfffff800
    d9b0:	00000fff 	.word	0x00000fff
    d9b4:	00007fff 	.word	0x00007fff
    d9b8:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    d9bc:	683b      	ldr	r3, [r7, #0]
    d9be:	69db      	ldr	r3, [r3, #28]
    d9c0:	4a5b      	ldr	r2, [pc, #364]	; (db30 <_adc_set_config+0x510>)
    d9c2:	4293      	cmp	r3, r2
    d9c4:	dc04      	bgt.n	d9d0 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    d9c6:	683b      	ldr	r3, [r7, #0]
    d9c8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    d9ca:	4a59      	ldr	r2, [pc, #356]	; (db30 <_adc_set_config+0x510>)
    d9cc:	4293      	cmp	r3, r2
    d9ce:	dd07      	ble.n	d9e0 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    d9d0:	2317      	movs	r3, #23
    d9d2:	e0a8      	b.n	db26 <_adc_set_config+0x506>
			break;
    d9d4:	46c0      	nop			; (mov r8, r8)
    d9d6:	e004      	b.n	d9e2 <_adc_set_config+0x3c2>
			break;
    d9d8:	46c0      	nop			; (mov r8, r8)
    d9da:	e002      	b.n	d9e2 <_adc_set_config+0x3c2>
			break;
    d9dc:	46c0      	nop			; (mov r8, r8)
    d9de:	e000      	b.n	d9e2 <_adc_set_config+0x3c2>
			}
			break;
    d9e0:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    d9e2:	46c0      	nop			; (mov r8, r8)
    d9e4:	687b      	ldr	r3, [r7, #4]
    d9e6:	0018      	movs	r0, r3
    d9e8:	4b52      	ldr	r3, [pc, #328]	; (db34 <_adc_set_config+0x514>)
    d9ea:	4798      	blx	r3
    d9ec:	1e03      	subs	r3, r0, #0
    d9ee:	d1f9      	bne.n	d9e4 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    d9f0:	683b      	ldr	r3, [r7, #0]
    d9f2:	7e1a      	ldrb	r2, [r3, #24]
    d9f4:	693b      	ldr	r3, [r7, #16]
    d9f6:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    d9f8:	46c0      	nop			; (mov r8, r8)
    d9fa:	687b      	ldr	r3, [r7, #4]
    d9fc:	0018      	movs	r0, r3
    d9fe:	4b4d      	ldr	r3, [pc, #308]	; (db34 <_adc_set_config+0x514>)
    da00:	4798      	blx	r3
    da02:	1e03      	subs	r3, r0, #0
    da04:	d1f9      	bne.n	d9fa <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    da06:	683b      	ldr	r3, [r7, #0]
    da08:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    da0a:	b29a      	uxth	r2, r3
    da0c:	693b      	ldr	r3, [r7, #16]
    da0e:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    da10:	46c0      	nop			; (mov r8, r8)
    da12:	687b      	ldr	r3, [r7, #4]
    da14:	0018      	movs	r0, r3
    da16:	4b47      	ldr	r3, [pc, #284]	; (db34 <_adc_set_config+0x514>)
    da18:	4798      	blx	r3
    da1a:	1e03      	subs	r3, r0, #0
    da1c:	d1f9      	bne.n	da12 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    da1e:	683b      	ldr	r3, [r7, #0]
    da20:	6a1b      	ldr	r3, [r3, #32]
    da22:	b29a      	uxth	r2, r3
    da24:	693b      	ldr	r3, [r7, #16]
    da26:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    da28:	2314      	movs	r3, #20
    da2a:	18fb      	adds	r3, r7, r3
    da2c:	683a      	ldr	r2, [r7, #0]
    da2e:	212c      	movs	r1, #44	; 0x2c
    da30:	5c52      	ldrb	r2, [r2, r1]
    da32:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    da34:	2314      	movs	r3, #20
    da36:	18fb      	adds	r3, r7, r3
    da38:	781b      	ldrb	r3, [r3, #0]
    da3a:	2b00      	cmp	r3, #0
    da3c:	d006      	beq.n	da4c <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    da3e:	2314      	movs	r3, #20
    da40:	18fb      	adds	r3, r7, r3
    da42:	781a      	ldrb	r2, [r3, #0]
    da44:	2314      	movs	r3, #20
    da46:	18fb      	adds	r3, r7, r3
    da48:	3a01      	subs	r2, #1
    da4a:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    da4c:	2314      	movs	r3, #20
    da4e:	18fb      	adds	r3, r7, r3
    da50:	781b      	ldrb	r3, [r3, #0]
    da52:	2b0f      	cmp	r3, #15
    da54:	d804      	bhi.n	da60 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    da56:	683b      	ldr	r3, [r7, #0]
    da58:	222b      	movs	r2, #43	; 0x2b
    da5a:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    da5c:	2b0f      	cmp	r3, #15
    da5e:	d901      	bls.n	da64 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    da60:	2317      	movs	r3, #23
    da62:	e060      	b.n	db26 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    da64:	46c0      	nop			; (mov r8, r8)
    da66:	687b      	ldr	r3, [r7, #4]
    da68:	0018      	movs	r0, r3
    da6a:	4b32      	ldr	r3, [pc, #200]	; (db34 <_adc_set_config+0x514>)
    da6c:	4798      	blx	r3
    da6e:	1e03      	subs	r3, r0, #0
    da70:	d1f9      	bne.n	da66 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    da72:	683b      	ldr	r3, [r7, #0]
    da74:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    da76:	683a      	ldr	r2, [r7, #0]
    da78:	212b      	movs	r1, #43	; 0x2b
    da7a:	5c52      	ldrb	r2, [r2, r1]
    da7c:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    da7e:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    da80:	2214      	movs	r2, #20
    da82:	18ba      	adds	r2, r7, r2
    da84:	7812      	ldrb	r2, [r2, #0]
    da86:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    da88:	4313      	orrs	r3, r2
			config->negative_input |
    da8a:	683a      	ldr	r2, [r7, #0]
    da8c:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    da8e:	4313      	orrs	r3, r2
			config->positive_input;
    da90:	683a      	ldr	r2, [r7, #0]
    da92:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    da94:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    da96:	693b      	ldr	r3, [r7, #16]
    da98:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    da9a:	683b      	ldr	r3, [r7, #0]
    da9c:	222a      	movs	r2, #42	; 0x2a
    da9e:	5c9a      	ldrb	r2, [r3, r2]
    daa0:	693b      	ldr	r3, [r7, #16]
    daa2:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    daa4:	693b      	ldr	r3, [r7, #16]
    daa6:	220f      	movs	r2, #15
    daa8:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    daaa:	683b      	ldr	r3, [r7, #0]
    daac:	2224      	movs	r2, #36	; 0x24
    daae:	5c9b      	ldrb	r3, [r3, r2]
    dab0:	2b00      	cmp	r3, #0
    dab2:	d01e      	beq.n	daf2 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    dab4:	683b      	ldr	r3, [r7, #0]
    dab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    dab8:	4a1f      	ldr	r2, [pc, #124]	; (db38 <_adc_set_config+0x518>)
    daba:	4293      	cmp	r3, r2
    dabc:	d901      	bls.n	dac2 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    dabe:	2317      	movs	r3, #23
    dac0:	e031      	b.n	db26 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    dac2:	683b      	ldr	r3, [r7, #0]
    dac4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    dac6:	693b      	ldr	r3, [r7, #16]
    dac8:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    daca:	683b      	ldr	r3, [r7, #0]
    dacc:	2228      	movs	r2, #40	; 0x28
    dace:	5e9b      	ldrsh	r3, [r3, r2]
    dad0:	4a1a      	ldr	r2, [pc, #104]	; (db3c <_adc_set_config+0x51c>)
    dad2:	4293      	cmp	r3, r2
    dad4:	dc05      	bgt.n	dae2 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    dad6:	683b      	ldr	r3, [r7, #0]
    dad8:	2228      	movs	r2, #40	; 0x28
    dada:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    dadc:	4a18      	ldr	r2, [pc, #96]	; (db40 <_adc_set_config+0x520>)
    dade:	4293      	cmp	r3, r2
    dae0:	da01      	bge.n	dae6 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    dae2:	2317      	movs	r3, #23
    dae4:	e01f      	b.n	db26 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    dae6:	683b      	ldr	r3, [r7, #0]
    dae8:	2228      	movs	r2, #40	; 0x28
    daea:	5e9b      	ldrsh	r3, [r3, r2]
    daec:	b29a      	uxth	r2, r3
    daee:	693b      	ldr	r3, [r7, #16]
    daf0:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    daf2:	4b14      	ldr	r3, [pc, #80]	; (db44 <_adc_set_config+0x524>)
    daf4:	681b      	ldr	r3, [r3, #0]
    daf6:	08db      	lsrs	r3, r3, #3
    daf8:	b29b      	uxth	r3, r3
    dafa:	021b      	lsls	r3, r3, #8
    dafc:	b29a      	uxth	r2, r3
    dafe:	23e0      	movs	r3, #224	; 0xe0
    db00:	00db      	lsls	r3, r3, #3
    db02:	4013      	ands	r3, r2
    db04:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    db06:	4b10      	ldr	r3, [pc, #64]	; (db48 <_adc_set_config+0x528>)
    db08:	685c      	ldr	r4, [r3, #4]
    db0a:	681b      	ldr	r3, [r3, #0]
    db0c:	0161      	lsls	r1, r4, #5
    db0e:	0edd      	lsrs	r5, r3, #27
    db10:	430d      	orrs	r5, r1
    db12:	0ee6      	lsrs	r6, r4, #27
    db14:	b2ab      	uxth	r3, r5
    db16:	21ff      	movs	r1, #255	; 0xff
    db18:	400b      	ands	r3, r1
    db1a:	b29b      	uxth	r3, r3
			) |
    db1c:	4313      	orrs	r3, r2
    db1e:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    db20:	693b      	ldr	r3, [r7, #16]
    db22:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    db24:	2300      	movs	r3, #0
}
    db26:	0018      	movs	r0, r3
    db28:	46bd      	mov	sp, r7
    db2a:	b009      	add	sp, #36	; 0x24
    db2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db2e:	46c0      	nop			; (mov r8, r8)
    db30:	0000ffff 	.word	0x0000ffff
    db34:	0000d4d5 	.word	0x0000d4d5
    db38:	00000fff 	.word	0x00000fff
    db3c:	000007ff 	.word	0x000007ff
    db40:	fffff800 	.word	0xfffff800
    db44:	00806024 	.word	0x00806024
    db48:	00806020 	.word	0x00806020

0000db4c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    db4c:	b580      	push	{r7, lr}
    db4e:	b084      	sub	sp, #16
    db50:	af00      	add	r7, sp, #0
    db52:	60f8      	str	r0, [r7, #12]
    db54:	60b9      	str	r1, [r7, #8]
    db56:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    db58:	68fb      	ldr	r3, [r7, #12]
    db5a:	68ba      	ldr	r2, [r7, #8]
    db5c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    db5e:	2380      	movs	r3, #128	; 0x80
    db60:	025b      	lsls	r3, r3, #9
    db62:	0019      	movs	r1, r3
    db64:	2002      	movs	r0, #2
    db66:	4b15      	ldr	r3, [pc, #84]	; (dbbc <adc_init+0x70>)
    db68:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    db6a:	68bb      	ldr	r3, [r7, #8]
    db6c:	781b      	ldrb	r3, [r3, #0]
    db6e:	b2db      	uxtb	r3, r3
    db70:	001a      	movs	r2, r3
    db72:	2301      	movs	r3, #1
    db74:	4013      	ands	r3, r2
    db76:	d001      	beq.n	db7c <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    db78:	2305      	movs	r3, #5
    db7a:	e01a      	b.n	dbb2 <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    db7c:	68bb      	ldr	r3, [r7, #8]
    db7e:	781b      	ldrb	r3, [r3, #0]
    db80:	b2db      	uxtb	r3, r3
    db82:	001a      	movs	r2, r3
    db84:	2302      	movs	r3, #2
    db86:	4013      	ands	r3, r2
    db88:	d001      	beq.n	db8e <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    db8a:	231c      	movs	r3, #28
    db8c:	e011      	b.n	dbb2 <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    db8e:	687b      	ldr	r3, [r7, #4]
    db90:	785a      	ldrb	r2, [r3, #1]
    db92:	68fb      	ldr	r3, [r7, #12]
    db94:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    db96:	68fb      	ldr	r3, [r7, #12]
    db98:	791b      	ldrb	r3, [r3, #4]
    db9a:	2b00      	cmp	r3, #0
    db9c:	d102      	bne.n	dba4 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    db9e:	2001      	movs	r0, #1
    dba0:	4b07      	ldr	r3, [pc, #28]	; (dbc0 <adc_init+0x74>)
    dba2:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    dba4:	687a      	ldr	r2, [r7, #4]
    dba6:	68fb      	ldr	r3, [r7, #12]
    dba8:	0011      	movs	r1, r2
    dbaa:	0018      	movs	r0, r3
    dbac:	4b05      	ldr	r3, [pc, #20]	; (dbc4 <adc_init+0x78>)
    dbae:	4798      	blx	r3
    dbb0:	0003      	movs	r3, r0
}
    dbb2:	0018      	movs	r0, r3
    dbb4:	46bd      	mov	sp, r7
    dbb6:	b004      	add	sp, #16
    dbb8:	bd80      	pop	{r7, pc}
    dbba:	46c0      	nop			; (mov r8, r8)
    dbbc:	0000d411 	.word	0x0000d411
    dbc0:	0000d495 	.word	0x0000d495
    dbc4:	0000d621 	.word	0x0000d621

0000dbc8 <system_gclk_chan_get_config_defaults>:
{
    dbc8:	b580      	push	{r7, lr}
    dbca:	b082      	sub	sp, #8
    dbcc:	af00      	add	r7, sp, #0
    dbce:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	2200      	movs	r2, #0
    dbd4:	701a      	strb	r2, [r3, #0]
}
    dbd6:	46c0      	nop			; (mov r8, r8)
    dbd8:	46bd      	mov	sp, r7
    dbda:	b002      	add	sp, #8
    dbdc:	bd80      	pop	{r7, pc}
	...

0000dbe0 <system_apb_clock_set_mask>:
{
    dbe0:	b580      	push	{r7, lr}
    dbe2:	b082      	sub	sp, #8
    dbe4:	af00      	add	r7, sp, #0
    dbe6:	0002      	movs	r2, r0
    dbe8:	6039      	str	r1, [r7, #0]
    dbea:	1dfb      	adds	r3, r7, #7
    dbec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    dbee:	1dfb      	adds	r3, r7, #7
    dbf0:	781b      	ldrb	r3, [r3, #0]
    dbf2:	2b01      	cmp	r3, #1
    dbf4:	d00a      	beq.n	dc0c <system_apb_clock_set_mask+0x2c>
    dbf6:	2b02      	cmp	r3, #2
    dbf8:	d00f      	beq.n	dc1a <system_apb_clock_set_mask+0x3a>
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	d114      	bne.n	dc28 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    dbfe:	4b0e      	ldr	r3, [pc, #56]	; (dc38 <system_apb_clock_set_mask+0x58>)
    dc00:	4a0d      	ldr	r2, [pc, #52]	; (dc38 <system_apb_clock_set_mask+0x58>)
    dc02:	6991      	ldr	r1, [r2, #24]
    dc04:	683a      	ldr	r2, [r7, #0]
    dc06:	430a      	orrs	r2, r1
    dc08:	619a      	str	r2, [r3, #24]
			break;
    dc0a:	e00f      	b.n	dc2c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    dc0c:	4b0a      	ldr	r3, [pc, #40]	; (dc38 <system_apb_clock_set_mask+0x58>)
    dc0e:	4a0a      	ldr	r2, [pc, #40]	; (dc38 <system_apb_clock_set_mask+0x58>)
    dc10:	69d1      	ldr	r1, [r2, #28]
    dc12:	683a      	ldr	r2, [r7, #0]
    dc14:	430a      	orrs	r2, r1
    dc16:	61da      	str	r2, [r3, #28]
			break;
    dc18:	e008      	b.n	dc2c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    dc1a:	4b07      	ldr	r3, [pc, #28]	; (dc38 <system_apb_clock_set_mask+0x58>)
    dc1c:	4a06      	ldr	r2, [pc, #24]	; (dc38 <system_apb_clock_set_mask+0x58>)
    dc1e:	6a11      	ldr	r1, [r2, #32]
    dc20:	683a      	ldr	r2, [r7, #0]
    dc22:	430a      	orrs	r2, r1
    dc24:	621a      	str	r2, [r3, #32]
			break;
    dc26:	e001      	b.n	dc2c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    dc28:	2317      	movs	r3, #23
    dc2a:	e000      	b.n	dc2e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    dc2c:	2300      	movs	r3, #0
}
    dc2e:	0018      	movs	r0, r3
    dc30:	46bd      	mov	sp, r7
    dc32:	b002      	add	sp, #8
    dc34:	bd80      	pop	{r7, pc}
    dc36:	46c0      	nop			; (mov r8, r8)
    dc38:	40000400 	.word	0x40000400

0000dc3c <system_pinmux_get_config_defaults>:
{
    dc3c:	b580      	push	{r7, lr}
    dc3e:	b082      	sub	sp, #8
    dc40:	af00      	add	r7, sp, #0
    dc42:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    dc44:	687b      	ldr	r3, [r7, #4]
    dc46:	2280      	movs	r2, #128	; 0x80
    dc48:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    dc4a:	687b      	ldr	r3, [r7, #4]
    dc4c:	2200      	movs	r2, #0
    dc4e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    dc50:	687b      	ldr	r3, [r7, #4]
    dc52:	2201      	movs	r2, #1
    dc54:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    dc56:	687b      	ldr	r3, [r7, #4]
    dc58:	2200      	movs	r2, #0
    dc5a:	70da      	strb	r2, [r3, #3]
}
    dc5c:	46c0      	nop			; (mov r8, r8)
    dc5e:	46bd      	mov	sp, r7
    dc60:	b002      	add	sp, #8
    dc62:	bd80      	pop	{r7, pc}

0000dc64 <system_is_debugger_present>:
{
    dc64:	b580      	push	{r7, lr}
    dc66:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    dc68:	4b05      	ldr	r3, [pc, #20]	; (dc80 <system_is_debugger_present+0x1c>)
    dc6a:	789b      	ldrb	r3, [r3, #2]
    dc6c:	b2db      	uxtb	r3, r3
    dc6e:	001a      	movs	r2, r3
    dc70:	2302      	movs	r3, #2
    dc72:	4013      	ands	r3, r2
    dc74:	1e5a      	subs	r2, r3, #1
    dc76:	4193      	sbcs	r3, r2
    dc78:	b2db      	uxtb	r3, r3
}
    dc7a:	0018      	movs	r0, r3
    dc7c:	46bd      	mov	sp, r7
    dc7e:	bd80      	pop	{r7, pc}
    dc80:	41002000 	.word	0x41002000

0000dc84 <i2c_master_is_syncing>:
{
    dc84:	b580      	push	{r7, lr}
    dc86:	b084      	sub	sp, #16
    dc88:	af00      	add	r7, sp, #0
    dc8a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    dc8c:	687b      	ldr	r3, [r7, #4]
    dc8e:	681b      	ldr	r3, [r3, #0]
    dc90:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    dc92:	68fb      	ldr	r3, [r7, #12]
    dc94:	69db      	ldr	r3, [r3, #28]
    dc96:	2207      	movs	r2, #7
    dc98:	4013      	ands	r3, r2
    dc9a:	1e5a      	subs	r2, r3, #1
    dc9c:	4193      	sbcs	r3, r2
    dc9e:	b2db      	uxtb	r3, r3
}
    dca0:	0018      	movs	r0, r3
    dca2:	46bd      	mov	sp, r7
    dca4:	b004      	add	sp, #16
    dca6:	bd80      	pop	{r7, pc}

0000dca8 <_i2c_master_wait_for_sync>:
{
    dca8:	b580      	push	{r7, lr}
    dcaa:	b082      	sub	sp, #8
    dcac:	af00      	add	r7, sp, #0
    dcae:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    dcb0:	46c0      	nop			; (mov r8, r8)
    dcb2:	687b      	ldr	r3, [r7, #4]
    dcb4:	0018      	movs	r0, r3
    dcb6:	4b04      	ldr	r3, [pc, #16]	; (dcc8 <_i2c_master_wait_for_sync+0x20>)
    dcb8:	4798      	blx	r3
    dcba:	1e03      	subs	r3, r0, #0
    dcbc:	d1f9      	bne.n	dcb2 <_i2c_master_wait_for_sync+0xa>
}
    dcbe:	46c0      	nop			; (mov r8, r8)
    dcc0:	46bd      	mov	sp, r7
    dcc2:	b002      	add	sp, #8
    dcc4:	bd80      	pop	{r7, pc}
    dcc6:	46c0      	nop			; (mov r8, r8)
    dcc8:	0000dc85 	.word	0x0000dc85

0000dccc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    dccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcce:	b097      	sub	sp, #92	; 0x5c
    dcd0:	af00      	add	r7, sp, #0
    dcd2:	6178      	str	r0, [r7, #20]
    dcd4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    dcd6:	2300      	movs	r3, #0
    dcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    dcda:	2300      	movs	r3, #0
    dcdc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    dcde:	2300      	movs	r3, #0
    dce0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    dce2:	233b      	movs	r3, #59	; 0x3b
    dce4:	2210      	movs	r2, #16
    dce6:	4694      	mov	ip, r2
    dce8:	44bc      	add	ip, r7
    dcea:	4463      	add	r3, ip
    dcec:	2200      	movs	r2, #0
    dcee:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    dcf0:	697b      	ldr	r3, [r7, #20]
    dcf2:	681b      	ldr	r3, [r3, #0]
    dcf4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    dcf6:	697b      	ldr	r3, [r7, #20]
    dcf8:	681b      	ldr	r3, [r3, #0]
    dcfa:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    dcfc:	2323      	movs	r3, #35	; 0x23
    dcfe:	2210      	movs	r2, #16
    dd00:	18ba      	adds	r2, r7, r2
    dd02:	18d4      	adds	r4, r2, r3
    dd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dd06:	0018      	movs	r0, r3
    dd08:	4bc0      	ldr	r3, [pc, #768]	; (e00c <_i2c_master_set_config+0x340>)
    dd0a:	4798      	blx	r3
    dd0c:	0003      	movs	r3, r0
    dd0e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    dd10:	230c      	movs	r3, #12
    dd12:	2210      	movs	r2, #16
    dd14:	4694      	mov	ip, r2
    dd16:	44bc      	add	ip, r7
    dd18:	4463      	add	r3, ip
    dd1a:	0018      	movs	r0, r3
    dd1c:	4bbc      	ldr	r3, [pc, #752]	; (e010 <_i2c_master_set_config+0x344>)
    dd1e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    dd20:	693b      	ldr	r3, [r7, #16]
    dd22:	69db      	ldr	r3, [r3, #28]
    dd24:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    dd26:	693b      	ldr	r3, [r7, #16]
    dd28:	6a1b      	ldr	r3, [r3, #32]
    dd2a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    dd2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d106      	bne.n	dd40 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    dd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dd34:	2100      	movs	r1, #0
    dd36:	0018      	movs	r0, r3
    dd38:	4bb6      	ldr	r3, [pc, #728]	; (e014 <_i2c_master_set_config+0x348>)
    dd3a:	4798      	blx	r3
    dd3c:	0003      	movs	r3, r0
    dd3e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    dd40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd42:	b2da      	uxtb	r2, r3
    dd44:	230c      	movs	r3, #12
    dd46:	2110      	movs	r1, #16
    dd48:	468c      	mov	ip, r1
    dd4a:	44bc      	add	ip, r7
    dd4c:	4463      	add	r3, ip
    dd4e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    dd50:	230c      	movs	r3, #12
    dd52:	2210      	movs	r2, #16
    dd54:	4694      	mov	ip, r2
    dd56:	44bc      	add	ip, r7
    dd58:	4463      	add	r3, ip
    dd5a:	2202      	movs	r2, #2
    dd5c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    dd5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd60:	0c1b      	lsrs	r3, r3, #16
    dd62:	b2db      	uxtb	r3, r3
    dd64:	220c      	movs	r2, #12
    dd66:	2110      	movs	r1, #16
    dd68:	468c      	mov	ip, r1
    dd6a:	44bc      	add	ip, r7
    dd6c:	4462      	add	r2, ip
    dd6e:	0011      	movs	r1, r2
    dd70:	0018      	movs	r0, r3
    dd72:	4ba9      	ldr	r3, [pc, #676]	; (e018 <_i2c_master_set_config+0x34c>)
    dd74:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    dd76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d106      	bne.n	dd8a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    dd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dd7e:	2101      	movs	r1, #1
    dd80:	0018      	movs	r0, r3
    dd82:	4ba4      	ldr	r3, [pc, #656]	; (e014 <_i2c_master_set_config+0x348>)
    dd84:	4798      	blx	r3
    dd86:	0003      	movs	r3, r0
    dd88:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    dd8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd8c:	b2da      	uxtb	r2, r3
    dd8e:	230c      	movs	r3, #12
    dd90:	2110      	movs	r1, #16
    dd92:	468c      	mov	ip, r1
    dd94:	44bc      	add	ip, r7
    dd96:	4463      	add	r3, ip
    dd98:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    dd9a:	230c      	movs	r3, #12
    dd9c:	2210      	movs	r2, #16
    dd9e:	4694      	mov	ip, r2
    dda0:	44bc      	add	ip, r7
    dda2:	4463      	add	r3, ip
    dda4:	2202      	movs	r2, #2
    dda6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    dda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddaa:	0c1b      	lsrs	r3, r3, #16
    ddac:	b2db      	uxtb	r3, r3
    ddae:	220c      	movs	r2, #12
    ddb0:	2110      	movs	r1, #16
    ddb2:	468c      	mov	ip, r1
    ddb4:	44bc      	add	ip, r7
    ddb6:	4462      	add	r2, ip
    ddb8:	0011      	movs	r1, r2
    ddba:	0018      	movs	r0, r3
    ddbc:	4b96      	ldr	r3, [pc, #600]	; (e018 <_i2c_master_set_config+0x34c>)
    ddbe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    ddc0:	693b      	ldr	r3, [r7, #16]
    ddc2:	8a9a      	ldrh	r2, [r3, #20]
    ddc4:	697b      	ldr	r3, [r7, #20]
    ddc6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    ddc8:	693b      	ldr	r3, [r7, #16]
    ddca:	8ada      	ldrh	r2, [r3, #22]
    ddcc:	697b      	ldr	r3, [r7, #20]
    ddce:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    ddd0:	693b      	ldr	r3, [r7, #16]
    ddd2:	7e1b      	ldrb	r3, [r3, #24]
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d103      	bne.n	dde0 <_i2c_master_set_config+0x114>
    ddd8:	4b90      	ldr	r3, [pc, #576]	; (e01c <_i2c_master_set_config+0x350>)
    ddda:	4798      	blx	r3
    dddc:	1e03      	subs	r3, r0, #0
    ddde:	d002      	beq.n	dde6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    dde0:	2380      	movs	r3, #128	; 0x80
    dde2:	657b      	str	r3, [r7, #84]	; 0x54
    dde4:	e001      	b.n	ddea <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    dde6:	2300      	movs	r3, #0
    dde8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    ddea:	693b      	ldr	r3, [r7, #16]
    ddec:	691b      	ldr	r3, [r3, #16]
    ddee:	2b00      	cmp	r3, #0
    ddf0:	d004      	beq.n	ddfc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    ddf2:	693b      	ldr	r3, [r7, #16]
    ddf4:	691b      	ldr	r3, [r3, #16]
    ddf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    ddf8:	4313      	orrs	r3, r2
    ddfa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    ddfc:	693b      	ldr	r3, [r7, #16]
    ddfe:	689b      	ldr	r3, [r3, #8]
    de00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    de02:	4313      	orrs	r3, r2
    de04:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    de06:	693b      	ldr	r3, [r7, #16]
    de08:	2224      	movs	r2, #36	; 0x24
    de0a:	5c9b      	ldrb	r3, [r3, r2]
    de0c:	2b00      	cmp	r3, #0
    de0e:	d004      	beq.n	de1a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    de10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    de12:	2280      	movs	r2, #128	; 0x80
    de14:	05d2      	lsls	r2, r2, #23
    de16:	4313      	orrs	r3, r2
    de18:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    de1a:	693b      	ldr	r3, [r7, #16]
    de1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de1e:	2b00      	cmp	r3, #0
    de20:	d004      	beq.n	de2c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    de22:	693b      	ldr	r3, [r7, #16]
    de24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    de28:	4313      	orrs	r3, r2
    de2a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    de2c:	693b      	ldr	r3, [r7, #16]
    de2e:	222c      	movs	r2, #44	; 0x2c
    de30:	5c9b      	ldrb	r3, [r3, r2]
    de32:	2b00      	cmp	r3, #0
    de34:	d105      	bne.n	de42 <_i2c_master_set_config+0x176>
    de36:	693b      	ldr	r3, [r7, #16]
    de38:	689a      	ldr	r2, [r3, #8]
    de3a:	2380      	movs	r3, #128	; 0x80
    de3c:	049b      	lsls	r3, r3, #18
    de3e:	429a      	cmp	r2, r3
    de40:	d104      	bne.n	de4c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    de42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    de44:	2280      	movs	r2, #128	; 0x80
    de46:	0512      	lsls	r2, r2, #20
    de48:	4313      	orrs	r3, r2
    de4a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    de4c:	693b      	ldr	r3, [r7, #16]
    de4e:	222d      	movs	r2, #45	; 0x2d
    de50:	5c9b      	ldrb	r3, [r3, r2]
    de52:	2b00      	cmp	r3, #0
    de54:	d004      	beq.n	de60 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    de56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    de58:	2280      	movs	r2, #128	; 0x80
    de5a:	0412      	lsls	r2, r2, #16
    de5c:	4313      	orrs	r3, r2
    de5e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    de60:	693b      	ldr	r3, [r7, #16]
    de62:	222e      	movs	r2, #46	; 0x2e
    de64:	5c9b      	ldrb	r3, [r3, r2]
    de66:	2b00      	cmp	r3, #0
    de68:	d004      	beq.n	de74 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    de6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    de6c:	2280      	movs	r2, #128	; 0x80
    de6e:	03d2      	lsls	r2, r2, #15
    de70:	4313      	orrs	r3, r2
    de72:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    de74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de76:	681a      	ldr	r2, [r3, #0]
    de78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    de7a:	431a      	orrs	r2, r3
    de7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de7e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    de80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de82:	2280      	movs	r2, #128	; 0x80
    de84:	0052      	lsls	r2, r2, #1
    de86:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    de88:	2323      	movs	r3, #35	; 0x23
    de8a:	2210      	movs	r2, #16
    de8c:	4694      	mov	ip, r2
    de8e:	44bc      	add	ip, r7
    de90:	4463      	add	r3, ip
    de92:	781b      	ldrb	r3, [r3, #0]
    de94:	3314      	adds	r3, #20
    de96:	b2db      	uxtb	r3, r3
    de98:	0018      	movs	r0, r3
    de9a:	4b61      	ldr	r3, [pc, #388]	; (e020 <_i2c_master_set_config+0x354>)
    de9c:	4798      	blx	r3
    de9e:	0003      	movs	r3, r0
    dea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    dea2:	693b      	ldr	r3, [r7, #16]
    dea4:	681b      	ldr	r3, [r3, #0]
    dea6:	22fa      	movs	r2, #250	; 0xfa
    dea8:	0092      	lsls	r2, r2, #2
    deaa:	4353      	muls	r3, r2
    deac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    deae:	693b      	ldr	r3, [r7, #16]
    deb0:	685b      	ldr	r3, [r3, #4]
    deb2:	22fa      	movs	r2, #250	; 0xfa
    deb4:	0092      	lsls	r2, r2, #2
    deb6:	4353      	muls	r3, r2
    deb8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    deba:	693b      	ldr	r3, [r7, #16]
    debc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    debe:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    dec0:	4b58      	ldr	r3, [pc, #352]	; (e024 <_i2c_master_set_config+0x358>)
    dec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dec4:	4798      	blx	r3
    dec6:	0005      	movs	r5, r0
    dec8:	000e      	movs	r6, r1
    deca:	4b56      	ldr	r3, [pc, #344]	; (e024 <_i2c_master_set_config+0x358>)
    decc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    dece:	4798      	blx	r3
    ded0:	60b8      	str	r0, [r7, #8]
    ded2:	60f9      	str	r1, [r7, #12]
    ded4:	4b53      	ldr	r3, [pc, #332]	; (e024 <_i2c_master_set_config+0x358>)
    ded6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ded8:	4798      	blx	r3
    deda:	4c53      	ldr	r4, [pc, #332]	; (e028 <_i2c_master_set_config+0x35c>)
    dedc:	4a53      	ldr	r2, [pc, #332]	; (e02c <_i2c_master_set_config+0x360>)
    dede:	4b54      	ldr	r3, [pc, #336]	; (e030 <_i2c_master_set_config+0x364>)
    dee0:	47a0      	blx	r4
    dee2:	0003      	movs	r3, r0
    dee4:	000c      	movs	r4, r1
    dee6:	603b      	str	r3, [r7, #0]
    dee8:	607c      	str	r4, [r7, #4]
    deea:	4b4e      	ldr	r3, [pc, #312]	; (e024 <_i2c_master_set_config+0x358>)
    deec:	6a38      	ldr	r0, [r7, #32]
    deee:	4798      	blx	r3
    def0:	0002      	movs	r2, r0
    def2:	000b      	movs	r3, r1
    def4:	4c4c      	ldr	r4, [pc, #304]	; (e028 <_i2c_master_set_config+0x35c>)
    def6:	6838      	ldr	r0, [r7, #0]
    def8:	6879      	ldr	r1, [r7, #4]
    defa:	47a0      	blx	r4
    defc:	0003      	movs	r3, r0
    defe:	000c      	movs	r4, r1
    df00:	0018      	movs	r0, r3
    df02:	0021      	movs	r1, r4
    df04:	4c4b      	ldr	r4, [pc, #300]	; (e034 <_i2c_master_set_config+0x368>)
    df06:	2200      	movs	r2, #0
    df08:	4b4b      	ldr	r3, [pc, #300]	; (e038 <_i2c_master_set_config+0x36c>)
    df0a:	47a0      	blx	r4
    df0c:	0003      	movs	r3, r0
    df0e:	000c      	movs	r4, r1
    df10:	001a      	movs	r2, r3
    df12:	0023      	movs	r3, r4
    df14:	4c44      	ldr	r4, [pc, #272]	; (e028 <_i2c_master_set_config+0x35c>)
    df16:	68b8      	ldr	r0, [r7, #8]
    df18:	68f9      	ldr	r1, [r7, #12]
    df1a:	47a0      	blx	r4
    df1c:	0003      	movs	r3, r0
    df1e:	000c      	movs	r4, r1
    df20:	001a      	movs	r2, r3
    df22:	0023      	movs	r3, r4
    df24:	4c45      	ldr	r4, [pc, #276]	; (e03c <_i2c_master_set_config+0x370>)
    df26:	0028      	movs	r0, r5
    df28:	0031      	movs	r1, r6
    df2a:	47a0      	blx	r4
    df2c:	0003      	movs	r3, r0
    df2e:	000c      	movs	r4, r1
    df30:	001d      	movs	r5, r3
    df32:	0026      	movs	r6, r4
    df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df36:	005a      	lsls	r2, r3, #1
    df38:	4b3a      	ldr	r3, [pc, #232]	; (e024 <_i2c_master_set_config+0x358>)
    df3a:	0010      	movs	r0, r2
    df3c:	4798      	blx	r3
    df3e:	0002      	movs	r2, r0
    df40:	000b      	movs	r3, r1
    df42:	4c3c      	ldr	r4, [pc, #240]	; (e034 <_i2c_master_set_config+0x368>)
    df44:	0028      	movs	r0, r5
    df46:	0031      	movs	r1, r6
    df48:	47a0      	blx	r4
    df4a:	0003      	movs	r3, r0
    df4c:	000c      	movs	r4, r1
    df4e:	0018      	movs	r0, r3
    df50:	0021      	movs	r1, r4
    df52:	4c3a      	ldr	r4, [pc, #232]	; (e03c <_i2c_master_set_config+0x370>)
    df54:	2200      	movs	r2, #0
    df56:	4b3a      	ldr	r3, [pc, #232]	; (e040 <_i2c_master_set_config+0x374>)
    df58:	47a0      	blx	r4
    df5a:	0003      	movs	r3, r0
    df5c:	000c      	movs	r4, r1
    df5e:	001d      	movs	r5, r3
    df60:	0026      	movs	r6, r4
    df62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df64:	005a      	lsls	r2, r3, #1
    df66:	4b2f      	ldr	r3, [pc, #188]	; (e024 <_i2c_master_set_config+0x358>)
    df68:	0010      	movs	r0, r2
    df6a:	4798      	blx	r3
    df6c:	0002      	movs	r2, r0
    df6e:	000b      	movs	r3, r1
    df70:	4c34      	ldr	r4, [pc, #208]	; (e044 <_i2c_master_set_config+0x378>)
    df72:	0028      	movs	r0, r5
    df74:	0031      	movs	r1, r6
    df76:	47a0      	blx	r4
    df78:	0003      	movs	r3, r0
    df7a:	000c      	movs	r4, r1
    df7c:	0019      	movs	r1, r3
    df7e:	0022      	movs	r2, r4
    df80:	4b31      	ldr	r3, [pc, #196]	; (e048 <_i2c_master_set_config+0x37c>)
    df82:	0008      	movs	r0, r1
    df84:	0011      	movs	r1, r2
    df86:	4798      	blx	r3
    df88:	0003      	movs	r3, r0
    df8a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    df8c:	693b      	ldr	r3, [r7, #16]
    df8e:	689a      	ldr	r2, [r3, #8]
    df90:	2380      	movs	r3, #128	; 0x80
    df92:	049b      	lsls	r3, r3, #18
    df94:	429a      	cmp	r2, r3
    df96:	d16a      	bne.n	e06e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    df98:	4b22      	ldr	r3, [pc, #136]	; (e024 <_i2c_master_set_config+0x358>)
    df9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    df9c:	4798      	blx	r3
    df9e:	4c25      	ldr	r4, [pc, #148]	; (e034 <_i2c_master_set_config+0x368>)
    dfa0:	0002      	movs	r2, r0
    dfa2:	000b      	movs	r3, r1
    dfa4:	47a0      	blx	r4
    dfa6:	0003      	movs	r3, r0
    dfa8:	000c      	movs	r4, r1
    dfaa:	001d      	movs	r5, r3
    dfac:	0026      	movs	r6, r4
    dfae:	4b1d      	ldr	r3, [pc, #116]	; (e024 <_i2c_master_set_config+0x358>)
    dfb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    dfb2:	4798      	blx	r3
    dfb4:	4c1c      	ldr	r4, [pc, #112]	; (e028 <_i2c_master_set_config+0x35c>)
    dfb6:	2200      	movs	r2, #0
    dfb8:	4b24      	ldr	r3, [pc, #144]	; (e04c <_i2c_master_set_config+0x380>)
    dfba:	47a0      	blx	r4
    dfbc:	0003      	movs	r3, r0
    dfbe:	000c      	movs	r4, r1
    dfc0:	001a      	movs	r2, r3
    dfc2:	0023      	movs	r3, r4
    dfc4:	4c1f      	ldr	r4, [pc, #124]	; (e044 <_i2c_master_set_config+0x378>)
    dfc6:	0028      	movs	r0, r5
    dfc8:	0031      	movs	r1, r6
    dfca:	47a0      	blx	r4
    dfcc:	0003      	movs	r3, r0
    dfce:	000c      	movs	r4, r1
    dfd0:	0018      	movs	r0, r3
    dfd2:	0021      	movs	r1, r4
    dfd4:	4c19      	ldr	r4, [pc, #100]	; (e03c <_i2c_master_set_config+0x370>)
    dfd6:	2200      	movs	r2, #0
    dfd8:	4b19      	ldr	r3, [pc, #100]	; (e040 <_i2c_master_set_config+0x374>)
    dfda:	47a0      	blx	r4
    dfdc:	0003      	movs	r3, r0
    dfde:	000c      	movs	r4, r1
    dfe0:	0019      	movs	r1, r3
    dfe2:	0022      	movs	r2, r4
    dfe4:	4b18      	ldr	r3, [pc, #96]	; (e048 <_i2c_master_set_config+0x37c>)
    dfe6:	0008      	movs	r0, r1
    dfe8:	0011      	movs	r1, r2
    dfea:	4798      	blx	r3
    dfec:	0003      	movs	r3, r0
    dfee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    dff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    dff2:	2b00      	cmp	r3, #0
    dff4:	d02e      	beq.n	e054 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    dff6:	4b16      	ldr	r3, [pc, #88]	; (e050 <_i2c_master_set_config+0x384>)
    dff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    dffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dffc:	4798      	blx	r3
    dffe:	0003      	movs	r3, r0
    e000:	1e9a      	subs	r2, r3, #2
    e002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e004:	1ad3      	subs	r3, r2, r3
    e006:	653b      	str	r3, [r7, #80]	; 0x50
    e008:	e031      	b.n	e06e <_i2c_master_set_config+0x3a2>
    e00a:	46c0      	nop			; (mov r8, r8)
    e00c:	0000f22d 	.word	0x0000f22d
    e010:	0000dc3d 	.word	0x0000dc3d
    e014:	0000f071 	.word	0x0000f071
    e018:	00011145 	.word	0x00011145
    e01c:	0000dc65 	.word	0x0000dc65
    e020:	00010f7d 	.word	0x00010f7d
    e024:	000178b1 	.word	0x000178b1
    e028:	00016c59 	.word	0x00016c59
    e02c:	e826d695 	.word	0xe826d695
    e030:	3e112e0b 	.word	0x3e112e0b
    e034:	00015dd1 	.word	0x00015dd1
    e038:	40240000 	.word	0x40240000
    e03c:	00017159 	.word	0x00017159
    e040:	3ff00000 	.word	0x3ff00000
    e044:	000163f1 	.word	0x000163f1
    e048:	000177c5 	.word	0x000177c5
    e04c:	40080000 	.word	0x40080000
    e050:	000154a5 	.word	0x000154a5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e056:	005a      	lsls	r2, r3, #1
    e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e05a:	18d3      	adds	r3, r2, r3
    e05c:	1e5a      	subs	r2, r3, #1
    e05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e060:	0059      	lsls	r1, r3, #1
    e062:	4b1d      	ldr	r3, [pc, #116]	; (e0d8 <_i2c_master_set_config+0x40c>)
    e064:	0010      	movs	r0, r2
    e066:	4798      	blx	r3
    e068:	0003      	movs	r3, r0
    e06a:	3b01      	subs	r3, #1
    e06c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    e06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e070:	2bff      	cmp	r3, #255	; 0xff
    e072:	dc08      	bgt.n	e086 <_i2c_master_set_config+0x3ba>
    e074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e076:	2b00      	cmp	r3, #0
    e078:	db05      	blt.n	e086 <_i2c_master_set_config+0x3ba>
    e07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e07c:	2bff      	cmp	r3, #255	; 0xff
    e07e:	dc02      	bgt.n	e086 <_i2c_master_set_config+0x3ba>
    e080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e082:	2b00      	cmp	r3, #0
    e084:	da06      	bge.n	e094 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e086:	233b      	movs	r3, #59	; 0x3b
    e088:	2210      	movs	r2, #16
    e08a:	4694      	mov	ip, r2
    e08c:	44bc      	add	ip, r7
    e08e:	4463      	add	r3, ip
    e090:	2240      	movs	r2, #64	; 0x40
    e092:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    e094:	233b      	movs	r3, #59	; 0x3b
    e096:	2210      	movs	r2, #16
    e098:	4694      	mov	ip, r2
    e09a:	44bc      	add	ip, r7
    e09c:	4463      	add	r3, ip
    e09e:	781b      	ldrb	r3, [r3, #0]
    e0a0:	2b40      	cmp	r3, #64	; 0x40
    e0a2:	d00e      	beq.n	e0c2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    e0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0a6:	22ff      	movs	r2, #255	; 0xff
    e0a8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    e0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e0ac:	041b      	lsls	r3, r3, #16
    e0ae:	0019      	movs	r1, r3
    e0b0:	23ff      	movs	r3, #255	; 0xff
    e0b2:	041b      	lsls	r3, r3, #16
    e0b4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    e0b6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    e0b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    e0ba:	0612      	lsls	r2, r2, #24
    e0bc:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    e0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e0c0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    e0c2:	233b      	movs	r3, #59	; 0x3b
    e0c4:	2210      	movs	r2, #16
    e0c6:	4694      	mov	ip, r2
    e0c8:	44bc      	add	ip, r7
    e0ca:	4463      	add	r3, ip
    e0cc:	781b      	ldrb	r3, [r3, #0]
}
    e0ce:	0018      	movs	r0, r3
    e0d0:	46bd      	mov	sp, r7
    e0d2:	b017      	add	sp, #92	; 0x5c
    e0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0d6:	46c0      	nop			; (mov r8, r8)
    e0d8:	000154a5 	.word	0x000154a5

0000e0dc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    e0dc:	b590      	push	{r4, r7, lr}
    e0de:	b08b      	sub	sp, #44	; 0x2c
    e0e0:	af00      	add	r7, sp, #0
    e0e2:	60f8      	str	r0, [r7, #12]
    e0e4:	60b9      	str	r1, [r7, #8]
    e0e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    e0e8:	68fb      	ldr	r3, [r7, #12]
    e0ea:	68ba      	ldr	r2, [r7, #8]
    e0ec:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e0ee:	68fb      	ldr	r3, [r7, #12]
    e0f0:	681b      	ldr	r3, [r3, #0]
    e0f2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e0f4:	68fb      	ldr	r3, [r7, #12]
    e0f6:	681b      	ldr	r3, [r3, #0]
    e0f8:	0018      	movs	r0, r3
    e0fa:	4b3b      	ldr	r3, [pc, #236]	; (e1e8 <i2c_master_init+0x10c>)
    e0fc:	4798      	blx	r3
    e0fe:	0003      	movs	r3, r0
    e100:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    e102:	6a3b      	ldr	r3, [r7, #32]
    e104:	3302      	adds	r3, #2
    e106:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e108:	6a3b      	ldr	r3, [r7, #32]
    e10a:	3314      	adds	r3, #20
    e10c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    e10e:	2201      	movs	r2, #1
    e110:	69fb      	ldr	r3, [r7, #28]
    e112:	409a      	lsls	r2, r3
    e114:	0013      	movs	r3, r2
    e116:	0019      	movs	r1, r3
    e118:	2002      	movs	r0, #2
    e11a:	4b34      	ldr	r3, [pc, #208]	; (e1ec <i2c_master_init+0x110>)
    e11c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    e11e:	2314      	movs	r3, #20
    e120:	18fb      	adds	r3, r7, r3
    e122:	0018      	movs	r0, r3
    e124:	4b32      	ldr	r3, [pc, #200]	; (e1f0 <i2c_master_init+0x114>)
    e126:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    e128:	687b      	ldr	r3, [r7, #4]
    e12a:	7b1a      	ldrb	r2, [r3, #12]
    e12c:	2314      	movs	r3, #20
    e12e:	18fb      	adds	r3, r7, r3
    e130:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    e132:	69bb      	ldr	r3, [r7, #24]
    e134:	b2db      	uxtb	r3, r3
    e136:	2214      	movs	r2, #20
    e138:	18ba      	adds	r2, r7, r2
    e13a:	0011      	movs	r1, r2
    e13c:	0018      	movs	r0, r3
    e13e:	4b2d      	ldr	r3, [pc, #180]	; (e1f4 <i2c_master_init+0x118>)
    e140:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    e142:	69bb      	ldr	r3, [r7, #24]
    e144:	b2db      	uxtb	r3, r3
    e146:	0018      	movs	r0, r3
    e148:	4b2b      	ldr	r3, [pc, #172]	; (e1f8 <i2c_master_init+0x11c>)
    e14a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    e14c:	687b      	ldr	r3, [r7, #4]
    e14e:	7b1b      	ldrb	r3, [r3, #12]
    e150:	2100      	movs	r1, #0
    e152:	0018      	movs	r0, r3
    e154:	4b29      	ldr	r3, [pc, #164]	; (e1fc <i2c_master_init+0x120>)
    e156:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e15a:	681b      	ldr	r3, [r3, #0]
    e15c:	2202      	movs	r2, #2
    e15e:	4013      	ands	r3, r2
    e160:	d001      	beq.n	e166 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    e162:	231c      	movs	r3, #28
    e164:	e03b      	b.n	e1de <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e168:	681b      	ldr	r3, [r3, #0]
    e16a:	2201      	movs	r2, #1
    e16c:	4013      	ands	r3, r2
    e16e:	d001      	beq.n	e174 <i2c_master_init+0x98>
		return STATUS_BUSY;
    e170:	2305      	movs	r3, #5
    e172:	e034      	b.n	e1de <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    e174:	68fb      	ldr	r3, [r7, #12]
    e176:	681b      	ldr	r3, [r3, #0]
    e178:	2217      	movs	r2, #23
    e17a:	18bc      	adds	r4, r7, r2
    e17c:	0018      	movs	r0, r3
    e17e:	4b1a      	ldr	r3, [pc, #104]	; (e1e8 <i2c_master_init+0x10c>)
    e180:	4798      	blx	r3
    e182:	0003      	movs	r3, r0
    e184:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    e186:	4a1e      	ldr	r2, [pc, #120]	; (e200 <i2c_master_init+0x124>)
    e188:	2317      	movs	r3, #23
    e18a:	18fb      	adds	r3, r7, r3
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	0011      	movs	r1, r2
    e190:	0018      	movs	r0, r3
    e192:	4b1c      	ldr	r3, [pc, #112]	; (e204 <i2c_master_init+0x128>)
    e194:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    e196:	2317      	movs	r3, #23
    e198:	18fb      	adds	r3, r7, r3
    e19a:	781a      	ldrb	r2, [r3, #0]
    e19c:	4b1a      	ldr	r3, [pc, #104]	; (e208 <i2c_master_init+0x12c>)
    e19e:	0092      	lsls	r2, r2, #2
    e1a0:	68f9      	ldr	r1, [r7, #12]
    e1a2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    e1a4:	68fb      	ldr	r3, [r7, #12]
    e1a6:	2200      	movs	r2, #0
    e1a8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    e1aa:	68fb      	ldr	r3, [r7, #12]
    e1ac:	2200      	movs	r2, #0
    e1ae:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    e1b0:	68fb      	ldr	r3, [r7, #12]
    e1b2:	2200      	movs	r2, #0
    e1b4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    e1b6:	68fb      	ldr	r3, [r7, #12]
    e1b8:	2200      	movs	r2, #0
    e1ba:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    e1bc:	68fb      	ldr	r3, [r7, #12]
    e1be:	2225      	movs	r2, #37	; 0x25
    e1c0:	2100      	movs	r1, #0
    e1c2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    e1c4:	68fb      	ldr	r3, [r7, #12]
    e1c6:	2200      	movs	r2, #0
    e1c8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    e1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1cc:	2214      	movs	r2, #20
    e1ce:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    e1d0:	687a      	ldr	r2, [r7, #4]
    e1d2:	68fb      	ldr	r3, [r7, #12]
    e1d4:	0011      	movs	r1, r2
    e1d6:	0018      	movs	r0, r3
    e1d8:	4b0c      	ldr	r3, [pc, #48]	; (e20c <i2c_master_init+0x130>)
    e1da:	4798      	blx	r3
    e1dc:	0003      	movs	r3, r0
}
    e1de:	0018      	movs	r0, r3
    e1e0:	46bd      	mov	sp, r7
    e1e2:	b00b      	add	sp, #44	; 0x2c
    e1e4:	bd90      	pop	{r4, r7, pc}
    e1e6:	46c0      	nop			; (mov r8, r8)
    e1e8:	0000f22d 	.word	0x0000f22d
    e1ec:	0000dbe1 	.word	0x0000dbe1
    e1f0:	0000dbc9 	.word	0x0000dbc9
    e1f4:	00010e59 	.word	0x00010e59
    e1f8:	00010e9d 	.word	0x00010e9d
    e1fc:	0000efe5 	.word	0x0000efe5
    e200:	0000ea3d 	.word	0x0000ea3d
    e204:	0000fe75 	.word	0x0000fe75
    e208:	20000904 	.word	0x20000904
    e20c:	0000dccd 	.word	0x0000dccd

0000e210 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    e210:	b580      	push	{r7, lr}
    e212:	b084      	sub	sp, #16
    e214:	af00      	add	r7, sp, #0
    e216:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e218:	687b      	ldr	r3, [r7, #4]
    e21a:	681b      	ldr	r3, [r3, #0]
    e21c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    e21e:	68fb      	ldr	r3, [r7, #12]
    e220:	7e1b      	ldrb	r3, [r3, #24]
    e222:	b2db      	uxtb	r3, r3
    e224:	001a      	movs	r2, r3
    e226:	2302      	movs	r3, #2
    e228:	4013      	ands	r3, r2
    e22a:	d00b      	beq.n	e244 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    e22c:	68fb      	ldr	r3, [r7, #12]
    e22e:	2202      	movs	r2, #2
    e230:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    e232:	68fb      	ldr	r3, [r7, #12]
    e234:	8b5b      	ldrh	r3, [r3, #26]
    e236:	b29b      	uxth	r3, r3
    e238:	001a      	movs	r2, r3
    e23a:	2302      	movs	r3, #2
    e23c:	4013      	ands	r3, r2
    e23e:	d011      	beq.n	e264 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    e240:	2341      	movs	r3, #65	; 0x41
    e242:	e010      	b.n	e266 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    e244:	68fb      	ldr	r3, [r7, #12]
    e246:	8b5b      	ldrh	r3, [r3, #26]
    e248:	b29b      	uxth	r3, r3
    e24a:	001a      	movs	r2, r3
    e24c:	2304      	movs	r3, #4
    e24e:	4013      	ands	r3, r2
    e250:	d008      	beq.n	e264 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    e252:	68fb      	ldr	r3, [r7, #12]
    e254:	685b      	ldr	r3, [r3, #4]
    e256:	22c0      	movs	r2, #192	; 0xc0
    e258:	0292      	lsls	r2, r2, #10
    e25a:	431a      	orrs	r2, r3
    e25c:	68fb      	ldr	r3, [r7, #12]
    e25e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    e260:	2318      	movs	r3, #24
    e262:	e000      	b.n	e266 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    e264:	2300      	movs	r3, #0
}
    e266:	0018      	movs	r0, r3
    e268:	46bd      	mov	sp, r7
    e26a:	b004      	add	sp, #16
    e26c:	bd80      	pop	{r7, pc}

0000e26e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    e26e:	b580      	push	{r7, lr}
    e270:	b084      	sub	sp, #16
    e272:	af00      	add	r7, sp, #0
    e274:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e276:	687b      	ldr	r3, [r7, #4]
    e278:	681b      	ldr	r3, [r3, #0]
    e27a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    e27c:	230e      	movs	r3, #14
    e27e:	18fb      	adds	r3, r7, r3
    e280:	2200      	movs	r2, #0
    e282:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    e284:	e00f      	b.n	e2a6 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    e286:	230e      	movs	r3, #14
    e288:	18fb      	adds	r3, r7, r3
    e28a:	220e      	movs	r2, #14
    e28c:	18ba      	adds	r2, r7, r2
    e28e:	8812      	ldrh	r2, [r2, #0]
    e290:	3201      	adds	r2, #1
    e292:	801a      	strh	r2, [r3, #0]
    e294:	687b      	ldr	r3, [r7, #4]
    e296:	891b      	ldrh	r3, [r3, #8]
    e298:	220e      	movs	r2, #14
    e29a:	18ba      	adds	r2, r7, r2
    e29c:	8812      	ldrh	r2, [r2, #0]
    e29e:	429a      	cmp	r2, r3
    e2a0:	d301      	bcc.n	e2a6 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    e2a2:	2312      	movs	r3, #18
    e2a4:	e00e      	b.n	e2c4 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    e2a6:	68bb      	ldr	r3, [r7, #8]
    e2a8:	7e1b      	ldrb	r3, [r3, #24]
    e2aa:	b2db      	uxtb	r3, r3
    e2ac:	001a      	movs	r2, r3
    e2ae:	2301      	movs	r3, #1
    e2b0:	4013      	ands	r3, r2
    e2b2:	d106      	bne.n	e2c2 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    e2b4:	68bb      	ldr	r3, [r7, #8]
    e2b6:	7e1b      	ldrb	r3, [r3, #24]
    e2b8:	b2db      	uxtb	r3, r3
    e2ba:	001a      	movs	r2, r3
    e2bc:	2302      	movs	r3, #2
    e2be:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    e2c0:	d0e1      	beq.n	e286 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    e2c2:	2300      	movs	r3, #0
}
    e2c4:	0018      	movs	r0, r3
    e2c6:	46bd      	mov	sp, r7
    e2c8:	b004      	add	sp, #16
    e2ca:	bd80      	pop	{r7, pc}

0000e2cc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    e2cc:	b590      	push	{r4, r7, lr}
    e2ce:	b085      	sub	sp, #20
    e2d0:	af00      	add	r7, sp, #0
    e2d2:	6078      	str	r0, [r7, #4]
    e2d4:	000a      	movs	r2, r1
    e2d6:	1cfb      	adds	r3, r7, #3
    e2d8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e2da:	687b      	ldr	r3, [r7, #4]
    e2dc:	681b      	ldr	r3, [r3, #0]
    e2de:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    e2e0:	68fb      	ldr	r3, [r7, #12]
    e2e2:	685b      	ldr	r3, [r3, #4]
    e2e4:	2280      	movs	r2, #128	; 0x80
    e2e6:	02d2      	lsls	r2, r2, #11
    e2e8:	431a      	orrs	r2, r3
    e2ea:	68fb      	ldr	r3, [r7, #12]
    e2ec:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    e2ee:	1cfb      	adds	r3, r7, #3
    e2f0:	781a      	ldrb	r2, [r3, #0]
    e2f2:	68fb      	ldr	r3, [r7, #12]
    e2f4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    e2f6:	230b      	movs	r3, #11
    e2f8:	18fc      	adds	r4, r7, r3
    e2fa:	687b      	ldr	r3, [r7, #4]
    e2fc:	0018      	movs	r0, r3
    e2fe:	4b07      	ldr	r3, [pc, #28]	; (e31c <_i2c_master_send_hs_master_code+0x50>)
    e300:	4798      	blx	r3
    e302:	0003      	movs	r3, r0
    e304:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    e306:	68fb      	ldr	r3, [r7, #12]
    e308:	2201      	movs	r2, #1
    e30a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    e30c:	230b      	movs	r3, #11
    e30e:	18fb      	adds	r3, r7, r3
    e310:	781b      	ldrb	r3, [r3, #0]
}
    e312:	0018      	movs	r0, r3
    e314:	46bd      	mov	sp, r7
    e316:	b005      	add	sp, #20
    e318:	bd90      	pop	{r4, r7, pc}
    e31a:	46c0      	nop			; (mov r8, r8)
    e31c:	0000e26f 	.word	0x0000e26f

0000e320 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    e320:	b590      	push	{r4, r7, lr}
    e322:	b087      	sub	sp, #28
    e324:	af00      	add	r7, sp, #0
    e326:	6078      	str	r0, [r7, #4]
    e328:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e32a:	687b      	ldr	r3, [r7, #4]
    e32c:	681b      	ldr	r3, [r3, #0]
    e32e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    e330:	2314      	movs	r3, #20
    e332:	18fb      	adds	r3, r7, r3
    e334:	683a      	ldr	r2, [r7, #0]
    e336:	8852      	ldrh	r2, [r2, #2]
    e338:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    e33a:	2312      	movs	r3, #18
    e33c:	18fb      	adds	r3, r7, r3
    e33e:	2200      	movs	r2, #0
    e340:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    e342:	68fb      	ldr	r3, [r7, #12]
    e344:	681b      	ldr	r3, [r3, #0]
    e346:	011b      	lsls	r3, r3, #4
    e348:	0fdb      	lsrs	r3, r3, #31
    e34a:	b2db      	uxtb	r3, r3
    e34c:	001a      	movs	r2, r3
    e34e:	230b      	movs	r3, #11
    e350:	18fb      	adds	r3, r7, r3
    e352:	1e51      	subs	r1, r2, #1
    e354:	418a      	sbcs	r2, r1
    e356:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    e358:	683b      	ldr	r3, [r7, #0]
    e35a:	7a5b      	ldrb	r3, [r3, #9]
    e35c:	2b00      	cmp	r3, #0
    e35e:	d006      	beq.n	e36e <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    e360:	683b      	ldr	r3, [r7, #0]
    e362:	7a9a      	ldrb	r2, [r3, #10]
    e364:	687b      	ldr	r3, [r7, #4]
    e366:	0011      	movs	r1, r2
    e368:	0018      	movs	r0, r3
    e36a:	4b85      	ldr	r3, [pc, #532]	; (e580 <_i2c_master_read_packet+0x260>)
    e36c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    e36e:	68fb      	ldr	r3, [r7, #12]
    e370:	685b      	ldr	r3, [r3, #4]
    e372:	4a84      	ldr	r2, [pc, #528]	; (e584 <_i2c_master_read_packet+0x264>)
    e374:	401a      	ands	r2, r3
    e376:	68fb      	ldr	r3, [r7, #12]
    e378:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    e37a:	683b      	ldr	r3, [r7, #0]
    e37c:	7a1b      	ldrb	r3, [r3, #8]
    e37e:	2b00      	cmp	r3, #0
    e380:	d042      	beq.n	e408 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    e382:	683b      	ldr	r3, [r7, #0]
    e384:	881b      	ldrh	r3, [r3, #0]
    e386:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    e388:	683b      	ldr	r3, [r7, #0]
    e38a:	7a5b      	ldrb	r3, [r3, #9]
    e38c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    e38e:	4313      	orrs	r3, r2
    e390:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    e392:	2380      	movs	r3, #128	; 0x80
    e394:	021b      	lsls	r3, r3, #8
    e396:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    e398:	68fb      	ldr	r3, [r7, #12]
    e39a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    e39c:	2317      	movs	r3, #23
    e39e:	18fc      	adds	r4, r7, r3
    e3a0:	687b      	ldr	r3, [r7, #4]
    e3a2:	0018      	movs	r0, r3
    e3a4:	4b78      	ldr	r3, [pc, #480]	; (e588 <_i2c_master_read_packet+0x268>)
    e3a6:	4798      	blx	r3
    e3a8:	0003      	movs	r3, r0
    e3aa:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    e3ac:	68fb      	ldr	r3, [r7, #12]
    e3ae:	685b      	ldr	r3, [r3, #4]
    e3b0:	4a74      	ldr	r2, [pc, #464]	; (e584 <_i2c_master_read_packet+0x264>)
    e3b2:	401a      	ands	r2, r3
    e3b4:	68fb      	ldr	r3, [r7, #12]
    e3b6:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    e3b8:	2317      	movs	r3, #23
    e3ba:	18fb      	adds	r3, r7, r3
    e3bc:	781b      	ldrb	r3, [r3, #0]
    e3be:	2b00      	cmp	r3, #0
    e3c0:	d107      	bne.n	e3d2 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    e3c2:	2317      	movs	r3, #23
    e3c4:	18fc      	adds	r4, r7, r3
    e3c6:	687b      	ldr	r3, [r7, #4]
    e3c8:	0018      	movs	r0, r3
    e3ca:	4b70      	ldr	r3, [pc, #448]	; (e58c <_i2c_master_read_packet+0x26c>)
    e3cc:	4798      	blx	r3
    e3ce:	0003      	movs	r3, r0
    e3d0:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    e3d2:	2317      	movs	r3, #23
    e3d4:	18fb      	adds	r3, r7, r3
    e3d6:	781b      	ldrb	r3, [r3, #0]
    e3d8:	2b00      	cmp	r3, #0
    e3da:	d111      	bne.n	e400 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    e3dc:	683b      	ldr	r3, [r7, #0]
    e3de:	881b      	ldrh	r3, [r3, #0]
    e3e0:	0a1b      	lsrs	r3, r3, #8
    e3e2:	b29b      	uxth	r3, r3
    e3e4:	2278      	movs	r2, #120	; 0x78
    e3e6:	4313      	orrs	r3, r2
    e3e8:	b29b      	uxth	r3, r3
    e3ea:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    e3ec:	683b      	ldr	r3, [r7, #0]
    e3ee:	7a5b      	ldrb	r3, [r3, #9]
    e3f0:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    e3f2:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    e3f4:	2201      	movs	r2, #1
    e3f6:	4313      	orrs	r3, r2
    e3f8:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    e3fa:	68fb      	ldr	r3, [r7, #12]
    e3fc:	625a      	str	r2, [r3, #36]	; 0x24
    e3fe:	e00f      	b.n	e420 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    e400:	2317      	movs	r3, #23
    e402:	18fb      	adds	r3, r7, r3
    e404:	781b      	ldrb	r3, [r3, #0]
    e406:	e0b6      	b.n	e576 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    e408:	683b      	ldr	r3, [r7, #0]
    e40a:	881b      	ldrh	r3, [r3, #0]
    e40c:	005b      	lsls	r3, r3, #1
    e40e:	2201      	movs	r2, #1
    e410:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    e412:	683b      	ldr	r3, [r7, #0]
    e414:	7a5b      	ldrb	r3, [r3, #9]
    e416:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    e418:	4313      	orrs	r3, r2
    e41a:	001a      	movs	r2, r3
    e41c:	68fb      	ldr	r3, [r7, #12]
    e41e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    e420:	2317      	movs	r3, #23
    e422:	18fc      	adds	r4, r7, r3
    e424:	687b      	ldr	r3, [r7, #4]
    e426:	0018      	movs	r0, r3
    e428:	4b57      	ldr	r3, [pc, #348]	; (e588 <_i2c_master_read_packet+0x268>)
    e42a:	4798      	blx	r3
    e42c:	0003      	movs	r3, r0
    e42e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    e430:	230b      	movs	r3, #11
    e432:	18fb      	adds	r3, r7, r3
    e434:	781b      	ldrb	r3, [r3, #0]
    e436:	2b00      	cmp	r3, #0
    e438:	d00b      	beq.n	e452 <_i2c_master_read_packet+0x132>
    e43a:	683b      	ldr	r3, [r7, #0]
    e43c:	885b      	ldrh	r3, [r3, #2]
    e43e:	2b01      	cmp	r3, #1
    e440:	d107      	bne.n	e452 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    e442:	68fb      	ldr	r3, [r7, #12]
    e444:	685b      	ldr	r3, [r3, #4]
    e446:	2280      	movs	r2, #128	; 0x80
    e448:	02d2      	lsls	r2, r2, #11
    e44a:	431a      	orrs	r2, r3
    e44c:	68fb      	ldr	r3, [r7, #12]
    e44e:	605a      	str	r2, [r3, #4]
    e450:	e005      	b.n	e45e <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    e452:	68fb      	ldr	r3, [r7, #12]
    e454:	685b      	ldr	r3, [r3, #4]
    e456:	4a4b      	ldr	r2, [pc, #300]	; (e584 <_i2c_master_read_packet+0x264>)
    e458:	401a      	ands	r2, r3
    e45a:	68fb      	ldr	r3, [r7, #12]
    e45c:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    e45e:	2317      	movs	r3, #23
    e460:	18fb      	adds	r3, r7, r3
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	2b00      	cmp	r3, #0
    e466:	d107      	bne.n	e478 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    e468:	2317      	movs	r3, #23
    e46a:	18fc      	adds	r4, r7, r3
    e46c:	687b      	ldr	r3, [r7, #4]
    e46e:	0018      	movs	r0, r3
    e470:	4b46      	ldr	r3, [pc, #280]	; (e58c <_i2c_master_read_packet+0x26c>)
    e472:	4798      	blx	r3
    e474:	0003      	movs	r3, r0
    e476:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    e478:	2317      	movs	r3, #23
    e47a:	18fb      	adds	r3, r7, r3
    e47c:	781b      	ldrb	r3, [r3, #0]
    e47e:	2b00      	cmp	r3, #0
    e480:	d000      	beq.n	e484 <_i2c_master_read_packet+0x164>
    e482:	e075      	b.n	e570 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    e484:	e04b      	b.n	e51e <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    e486:	68fb      	ldr	r3, [r7, #12]
    e488:	8b5b      	ldrh	r3, [r3, #26]
    e48a:	b29b      	uxth	r3, r3
    e48c:	001a      	movs	r2, r3
    e48e:	2320      	movs	r3, #32
    e490:	4013      	ands	r3, r2
    e492:	d101      	bne.n	e498 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    e494:	2341      	movs	r3, #65	; 0x41
    e496:	e06e      	b.n	e576 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    e498:	687b      	ldr	r3, [r7, #4]
    e49a:	7adb      	ldrb	r3, [r3, #11]
    e49c:	2b00      	cmp	r3, #0
    e49e:	d01e      	beq.n	e4de <_i2c_master_read_packet+0x1be>
    e4a0:	230b      	movs	r3, #11
    e4a2:	18fb      	adds	r3, r7, r3
    e4a4:	781b      	ldrb	r3, [r3, #0]
    e4a6:	2201      	movs	r2, #1
    e4a8:	4053      	eors	r3, r2
    e4aa:	b2db      	uxtb	r3, r3
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d004      	beq.n	e4ba <_i2c_master_read_packet+0x19a>
    e4b0:	2314      	movs	r3, #20
    e4b2:	18fb      	adds	r3, r7, r3
    e4b4:	881b      	ldrh	r3, [r3, #0]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	d009      	beq.n	e4ce <_i2c_master_read_packet+0x1ae>
    e4ba:	230b      	movs	r3, #11
    e4bc:	18fb      	adds	r3, r7, r3
    e4be:	781b      	ldrb	r3, [r3, #0]
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	d00c      	beq.n	e4de <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    e4c4:	2314      	movs	r3, #20
    e4c6:	18fb      	adds	r3, r7, r3
    e4c8:	881b      	ldrh	r3, [r3, #0]
    e4ca:	2b01      	cmp	r3, #1
    e4cc:	d107      	bne.n	e4de <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    e4ce:	68fb      	ldr	r3, [r7, #12]
    e4d0:	685b      	ldr	r3, [r3, #4]
    e4d2:	2280      	movs	r2, #128	; 0x80
    e4d4:	02d2      	lsls	r2, r2, #11
    e4d6:	431a      	orrs	r2, r3
    e4d8:	68fb      	ldr	r3, [r7, #12]
    e4da:	605a      	str	r2, [r3, #4]
    e4dc:	e01a      	b.n	e514 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    e4de:	687b      	ldr	r3, [r7, #4]
    e4e0:	0018      	movs	r0, r3
    e4e2:	4b2b      	ldr	r3, [pc, #172]	; (e590 <_i2c_master_read_packet+0x270>)
    e4e4:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    e4e6:	683b      	ldr	r3, [r7, #0]
    e4e8:	685a      	ldr	r2, [r3, #4]
    e4ea:	2312      	movs	r3, #18
    e4ec:	18fb      	adds	r3, r7, r3
    e4ee:	881b      	ldrh	r3, [r3, #0]
    e4f0:	2112      	movs	r1, #18
    e4f2:	1879      	adds	r1, r7, r1
    e4f4:	1c58      	adds	r0, r3, #1
    e4f6:	8008      	strh	r0, [r1, #0]
    e4f8:	18d3      	adds	r3, r2, r3
    e4fa:	68fa      	ldr	r2, [r7, #12]
    e4fc:	2128      	movs	r1, #40	; 0x28
    e4fe:	5c52      	ldrb	r2, [r2, r1]
    e500:	b2d2      	uxtb	r2, r2
    e502:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    e504:	2317      	movs	r3, #23
    e506:	18fc      	adds	r4, r7, r3
    e508:	687b      	ldr	r3, [r7, #4]
    e50a:	0018      	movs	r0, r3
    e50c:	4b1e      	ldr	r3, [pc, #120]	; (e588 <_i2c_master_read_packet+0x268>)
    e50e:	4798      	blx	r3
    e510:	0003      	movs	r3, r0
    e512:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    e514:	2317      	movs	r3, #23
    e516:	18fb      	adds	r3, r7, r3
    e518:	781b      	ldrb	r3, [r3, #0]
    e51a:	2b00      	cmp	r3, #0
    e51c:	d109      	bne.n	e532 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    e51e:	2314      	movs	r3, #20
    e520:	18fb      	adds	r3, r7, r3
    e522:	881b      	ldrh	r3, [r3, #0]
    e524:	2214      	movs	r2, #20
    e526:	18ba      	adds	r2, r7, r2
    e528:	1e59      	subs	r1, r3, #1
    e52a:	8011      	strh	r1, [r2, #0]
    e52c:	2b00      	cmp	r3, #0
    e52e:	d1aa      	bne.n	e486 <_i2c_master_read_packet+0x166>
    e530:	e000      	b.n	e534 <_i2c_master_read_packet+0x214>
				break;
    e532:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    e534:	687b      	ldr	r3, [r7, #4]
    e536:	7a9b      	ldrb	r3, [r3, #10]
    e538:	2b00      	cmp	r3, #0
    e53a:	d00a      	beq.n	e552 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    e53c:	687b      	ldr	r3, [r7, #4]
    e53e:	0018      	movs	r0, r3
    e540:	4b13      	ldr	r3, [pc, #76]	; (e590 <_i2c_master_read_packet+0x270>)
    e542:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    e544:	68fb      	ldr	r3, [r7, #12]
    e546:	685b      	ldr	r3, [r3, #4]
    e548:	22c0      	movs	r2, #192	; 0xc0
    e54a:	0292      	lsls	r2, r2, #10
    e54c:	431a      	orrs	r2, r3
    e54e:	68fb      	ldr	r3, [r7, #12]
    e550:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    e552:	687b      	ldr	r3, [r7, #4]
    e554:	0018      	movs	r0, r3
    e556:	4b0e      	ldr	r3, [pc, #56]	; (e590 <_i2c_master_read_packet+0x270>)
    e558:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    e55a:	683b      	ldr	r3, [r7, #0]
    e55c:	685a      	ldr	r2, [r3, #4]
    e55e:	2312      	movs	r3, #18
    e560:	18fb      	adds	r3, r7, r3
    e562:	881b      	ldrh	r3, [r3, #0]
    e564:	18d3      	adds	r3, r2, r3
    e566:	68fa      	ldr	r2, [r7, #12]
    e568:	2128      	movs	r1, #40	; 0x28
    e56a:	5c52      	ldrb	r2, [r2, r1]
    e56c:	b2d2      	uxtb	r2, r2
    e56e:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    e570:	2317      	movs	r3, #23
    e572:	18fb      	adds	r3, r7, r3
    e574:	781b      	ldrb	r3, [r3, #0]
}
    e576:	0018      	movs	r0, r3
    e578:	46bd      	mov	sp, r7
    e57a:	b007      	add	sp, #28
    e57c:	bd90      	pop	{r4, r7, pc}
    e57e:	46c0      	nop			; (mov r8, r8)
    e580:	0000e2cd 	.word	0x0000e2cd
    e584:	fffbffff 	.word	0xfffbffff
    e588:	0000e26f 	.word	0x0000e26f
    e58c:	0000e211 	.word	0x0000e211
    e590:	0000dca9 	.word	0x0000dca9

0000e594 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    e594:	b580      	push	{r7, lr}
    e596:	b082      	sub	sp, #8
    e598:	af00      	add	r7, sp, #0
    e59a:	6078      	str	r0, [r7, #4]
    e59c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    e59e:	687b      	ldr	r3, [r7, #4]
    e5a0:	8b9b      	ldrh	r3, [r3, #28]
    e5a2:	b29b      	uxth	r3, r3
    e5a4:	2b00      	cmp	r3, #0
    e5a6:	d001      	beq.n	e5ac <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    e5a8:	2305      	movs	r3, #5
    e5aa:	e00c      	b.n	e5c6 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    e5ac:	687b      	ldr	r3, [r7, #4]
    e5ae:	2201      	movs	r2, #1
    e5b0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    e5b2:	687b      	ldr	r3, [r7, #4]
    e5b4:	2201      	movs	r2, #1
    e5b6:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    e5b8:	683a      	ldr	r2, [r7, #0]
    e5ba:	687b      	ldr	r3, [r7, #4]
    e5bc:	0011      	movs	r1, r2
    e5be:	0018      	movs	r0, r3
    e5c0:	4b03      	ldr	r3, [pc, #12]	; (e5d0 <i2c_master_read_packet_wait+0x3c>)
    e5c2:	4798      	blx	r3
    e5c4:	0003      	movs	r3, r0
}
    e5c6:	0018      	movs	r0, r3
    e5c8:	46bd      	mov	sp, r7
    e5ca:	b002      	add	sp, #8
    e5cc:	bd80      	pop	{r7, pc}
    e5ce:	46c0      	nop			; (mov r8, r8)
    e5d0:	0000e321 	.word	0x0000e321

0000e5d4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    e5d4:	b590      	push	{r4, r7, lr}
    e5d6:	b087      	sub	sp, #28
    e5d8:	af00      	add	r7, sp, #0
    e5da:	6078      	str	r0, [r7, #4]
    e5dc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e5de:	687b      	ldr	r3, [r7, #4]
    e5e0:	681b      	ldr	r3, [r3, #0]
    e5e2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    e5e4:	2314      	movs	r3, #20
    e5e6:	18fb      	adds	r3, r7, r3
    e5e8:	683a      	ldr	r2, [r7, #0]
    e5ea:	8852      	ldrh	r2, [r2, #2]
    e5ec:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	0018      	movs	r0, r3
    e5f2:	4b51      	ldr	r3, [pc, #324]	; (e738 <_i2c_master_write_packet+0x164>)
    e5f4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    e5f6:	683b      	ldr	r3, [r7, #0]
    e5f8:	7a5b      	ldrb	r3, [r3, #9]
    e5fa:	2b00      	cmp	r3, #0
    e5fc:	d006      	beq.n	e60c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    e5fe:	683b      	ldr	r3, [r7, #0]
    e600:	7a9a      	ldrb	r2, [r3, #10]
    e602:	687b      	ldr	r3, [r7, #4]
    e604:	0011      	movs	r1, r2
    e606:	0018      	movs	r0, r3
    e608:	4b4c      	ldr	r3, [pc, #304]	; (e73c <_i2c_master_write_packet+0x168>)
    e60a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    e60c:	68fb      	ldr	r3, [r7, #12]
    e60e:	685b      	ldr	r3, [r3, #4]
    e610:	4a4b      	ldr	r2, [pc, #300]	; (e740 <_i2c_master_write_packet+0x16c>)
    e612:	401a      	ands	r2, r3
    e614:	68fb      	ldr	r3, [r7, #12]
    e616:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    e618:	683b      	ldr	r3, [r7, #0]
    e61a:	7a1b      	ldrb	r3, [r3, #8]
    e61c:	2b00      	cmp	r3, #0
    e61e:	d00d      	beq.n	e63c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    e620:	683b      	ldr	r3, [r7, #0]
    e622:	881b      	ldrh	r3, [r3, #0]
    e624:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    e626:	683b      	ldr	r3, [r7, #0]
    e628:	7a5b      	ldrb	r3, [r3, #9]
    e62a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    e62c:	4313      	orrs	r3, r2
    e62e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    e630:	2380      	movs	r3, #128	; 0x80
    e632:	021b      	lsls	r3, r3, #8
    e634:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    e636:	68fb      	ldr	r3, [r7, #12]
    e638:	625a      	str	r2, [r3, #36]	; 0x24
    e63a:	e009      	b.n	e650 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    e63c:	683b      	ldr	r3, [r7, #0]
    e63e:	881b      	ldrh	r3, [r3, #0]
    e640:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    e642:	683b      	ldr	r3, [r7, #0]
    e644:	7a5b      	ldrb	r3, [r3, #9]
    e646:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    e648:	4313      	orrs	r3, r2
    e64a:	001a      	movs	r2, r3
    e64c:	68fb      	ldr	r3, [r7, #12]
    e64e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    e650:	2317      	movs	r3, #23
    e652:	18fc      	adds	r4, r7, r3
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	0018      	movs	r0, r3
    e658:	4b3a      	ldr	r3, [pc, #232]	; (e744 <_i2c_master_write_packet+0x170>)
    e65a:	4798      	blx	r3
    e65c:	0003      	movs	r3, r0
    e65e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    e660:	2317      	movs	r3, #23
    e662:	18fb      	adds	r3, r7, r3
    e664:	781b      	ldrb	r3, [r3, #0]
    e666:	2b00      	cmp	r3, #0
    e668:	d107      	bne.n	e67a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    e66a:	2317      	movs	r3, #23
    e66c:	18fc      	adds	r4, r7, r3
    e66e:	687b      	ldr	r3, [r7, #4]
    e670:	0018      	movs	r0, r3
    e672:	4b35      	ldr	r3, [pc, #212]	; (e748 <_i2c_master_write_packet+0x174>)
    e674:	4798      	blx	r3
    e676:	0003      	movs	r3, r0
    e678:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    e67a:	2317      	movs	r3, #23
    e67c:	18fb      	adds	r3, r7, r3
    e67e:	781b      	ldrb	r3, [r3, #0]
    e680:	2b00      	cmp	r3, #0
    e682:	d152      	bne.n	e72a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    e684:	2312      	movs	r3, #18
    e686:	18fb      	adds	r3, r7, r3
    e688:	2200      	movs	r2, #0
    e68a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    e68c:	e033      	b.n	e6f6 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    e68e:	68fb      	ldr	r3, [r7, #12]
    e690:	8b5b      	ldrh	r3, [r3, #26]
    e692:	b29b      	uxth	r3, r3
    e694:	001a      	movs	r2, r3
    e696:	2320      	movs	r3, #32
    e698:	4013      	ands	r3, r2
    e69a:	d101      	bne.n	e6a0 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    e69c:	2341      	movs	r3, #65	; 0x41
    e69e:	e047      	b.n	e730 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    e6a0:	687b      	ldr	r3, [r7, #4]
    e6a2:	0018      	movs	r0, r3
    e6a4:	4b24      	ldr	r3, [pc, #144]	; (e738 <_i2c_master_write_packet+0x164>)
    e6a6:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    e6a8:	683b      	ldr	r3, [r7, #0]
    e6aa:	685a      	ldr	r2, [r3, #4]
    e6ac:	2312      	movs	r3, #18
    e6ae:	18fb      	adds	r3, r7, r3
    e6b0:	881b      	ldrh	r3, [r3, #0]
    e6b2:	2112      	movs	r1, #18
    e6b4:	1879      	adds	r1, r7, r1
    e6b6:	1c58      	adds	r0, r3, #1
    e6b8:	8008      	strh	r0, [r1, #0]
    e6ba:	18d3      	adds	r3, r2, r3
    e6bc:	7819      	ldrb	r1, [r3, #0]
    e6be:	68fb      	ldr	r3, [r7, #12]
    e6c0:	2228      	movs	r2, #40	; 0x28
    e6c2:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    e6c4:	2317      	movs	r3, #23
    e6c6:	18fc      	adds	r4, r7, r3
    e6c8:	687b      	ldr	r3, [r7, #4]
    e6ca:	0018      	movs	r0, r3
    e6cc:	4b1d      	ldr	r3, [pc, #116]	; (e744 <_i2c_master_write_packet+0x170>)
    e6ce:	4798      	blx	r3
    e6d0:	0003      	movs	r3, r0
    e6d2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    e6d4:	2317      	movs	r3, #23
    e6d6:	18fb      	adds	r3, r7, r3
    e6d8:	781b      	ldrb	r3, [r3, #0]
    e6da:	2b00      	cmp	r3, #0
    e6dc:	d115      	bne.n	e70a <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    e6de:	68fb      	ldr	r3, [r7, #12]
    e6e0:	8b5b      	ldrh	r3, [r3, #26]
    e6e2:	b29b      	uxth	r3, r3
    e6e4:	001a      	movs	r2, r3
    e6e6:	2304      	movs	r3, #4
    e6e8:	4013      	ands	r3, r2
    e6ea:	d004      	beq.n	e6f6 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    e6ec:	2317      	movs	r3, #23
    e6ee:	18fb      	adds	r3, r7, r3
    e6f0:	221e      	movs	r2, #30
    e6f2:	701a      	strb	r2, [r3, #0]
				break;
    e6f4:	e00a      	b.n	e70c <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    e6f6:	2314      	movs	r3, #20
    e6f8:	18fb      	adds	r3, r7, r3
    e6fa:	881b      	ldrh	r3, [r3, #0]
    e6fc:	2214      	movs	r2, #20
    e6fe:	18ba      	adds	r2, r7, r2
    e700:	1e59      	subs	r1, r3, #1
    e702:	8011      	strh	r1, [r2, #0]
    e704:	2b00      	cmp	r3, #0
    e706:	d1c2      	bne.n	e68e <_i2c_master_write_packet+0xba>
    e708:	e000      	b.n	e70c <_i2c_master_write_packet+0x138>
				break;
    e70a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	7a9b      	ldrb	r3, [r3, #10]
    e710:	2b00      	cmp	r3, #0
    e712:	d00a      	beq.n	e72a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    e714:	687b      	ldr	r3, [r7, #4]
    e716:	0018      	movs	r0, r3
    e718:	4b07      	ldr	r3, [pc, #28]	; (e738 <_i2c_master_write_packet+0x164>)
    e71a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    e71c:	68fb      	ldr	r3, [r7, #12]
    e71e:	685b      	ldr	r3, [r3, #4]
    e720:	22c0      	movs	r2, #192	; 0xc0
    e722:	0292      	lsls	r2, r2, #10
    e724:	431a      	orrs	r2, r3
    e726:	68fb      	ldr	r3, [r7, #12]
    e728:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    e72a:	2317      	movs	r3, #23
    e72c:	18fb      	adds	r3, r7, r3
    e72e:	781b      	ldrb	r3, [r3, #0]
}
    e730:	0018      	movs	r0, r3
    e732:	46bd      	mov	sp, r7
    e734:	b007      	add	sp, #28
    e736:	bd90      	pop	{r4, r7, pc}
    e738:	0000dca9 	.word	0x0000dca9
    e73c:	0000e2cd 	.word	0x0000e2cd
    e740:	fffbffff 	.word	0xfffbffff
    e744:	0000e26f 	.word	0x0000e26f
    e748:	0000e211 	.word	0x0000e211

0000e74c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    e74c:	b580      	push	{r7, lr}
    e74e:	b082      	sub	sp, #8
    e750:	af00      	add	r7, sp, #0
    e752:	6078      	str	r0, [r7, #4]
    e754:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	8b9b      	ldrh	r3, [r3, #28]
    e75a:	b29b      	uxth	r3, r3
    e75c:	2b00      	cmp	r3, #0
    e75e:	d001      	beq.n	e764 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    e760:	2305      	movs	r3, #5
    e762:	e00c      	b.n	e77e <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    e764:	687b      	ldr	r3, [r7, #4]
    e766:	2201      	movs	r2, #1
    e768:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    e76a:	687b      	ldr	r3, [r7, #4]
    e76c:	2201      	movs	r2, #1
    e76e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    e770:	683a      	ldr	r2, [r7, #0]
    e772:	687b      	ldr	r3, [r7, #4]
    e774:	0011      	movs	r1, r2
    e776:	0018      	movs	r0, r3
    e778:	4b03      	ldr	r3, [pc, #12]	; (e788 <i2c_master_write_packet_wait+0x3c>)
    e77a:	4798      	blx	r3
    e77c:	0003      	movs	r3, r0
}
    e77e:	0018      	movs	r0, r3
    e780:	46bd      	mov	sp, r7
    e782:	b002      	add	sp, #8
    e784:	bd80      	pop	{r7, pc}
    e786:	46c0      	nop			; (mov r8, r8)
    e788:	0000e5d5 	.word	0x0000e5d5

0000e78c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    e78c:	b580      	push	{r7, lr}
    e78e:	b082      	sub	sp, #8
    e790:	af00      	add	r7, sp, #0
    e792:	6078      	str	r0, [r7, #4]
    e794:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    e796:	687b      	ldr	r3, [r7, #4]
    e798:	8b9b      	ldrh	r3, [r3, #28]
    e79a:	b29b      	uxth	r3, r3
    e79c:	2b00      	cmp	r3, #0
    e79e:	d001      	beq.n	e7a4 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    e7a0:	2305      	movs	r3, #5
    e7a2:	e00c      	b.n	e7be <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    e7a4:	687b      	ldr	r3, [r7, #4]
    e7a6:	2200      	movs	r2, #0
    e7a8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    e7aa:	687b      	ldr	r3, [r7, #4]
    e7ac:	2201      	movs	r2, #1
    e7ae:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    e7b0:	683a      	ldr	r2, [r7, #0]
    e7b2:	687b      	ldr	r3, [r7, #4]
    e7b4:	0011      	movs	r1, r2
    e7b6:	0018      	movs	r0, r3
    e7b8:	4b03      	ldr	r3, [pc, #12]	; (e7c8 <i2c_master_write_packet_wait_no_stop+0x3c>)
    e7ba:	4798      	blx	r3
    e7bc:	0003      	movs	r3, r0
}
    e7be:	0018      	movs	r0, r3
    e7c0:	46bd      	mov	sp, r7
    e7c2:	b002      	add	sp, #8
    e7c4:	bd80      	pop	{r7, pc}
    e7c6:	46c0      	nop			; (mov r8, r8)
    e7c8:	0000e5d5 	.word	0x0000e5d5

0000e7cc <i2c_master_is_syncing>:
{
    e7cc:	b580      	push	{r7, lr}
    e7ce:	b084      	sub	sp, #16
    e7d0:	af00      	add	r7, sp, #0
    e7d2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    e7d4:	687b      	ldr	r3, [r7, #4]
    e7d6:	681b      	ldr	r3, [r3, #0]
    e7d8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    e7da:	68fb      	ldr	r3, [r7, #12]
    e7dc:	69db      	ldr	r3, [r3, #28]
    e7de:	2207      	movs	r2, #7
    e7e0:	4013      	ands	r3, r2
    e7e2:	1e5a      	subs	r2, r3, #1
    e7e4:	4193      	sbcs	r3, r2
    e7e6:	b2db      	uxtb	r3, r3
}
    e7e8:	0018      	movs	r0, r3
    e7ea:	46bd      	mov	sp, r7
    e7ec:	b004      	add	sp, #16
    e7ee:	bd80      	pop	{r7, pc}

0000e7f0 <_i2c_master_wait_for_sync>:
{
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b082      	sub	sp, #8
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    e7f8:	46c0      	nop			; (mov r8, r8)
    e7fa:	687b      	ldr	r3, [r7, #4]
    e7fc:	0018      	movs	r0, r3
    e7fe:	4b04      	ldr	r3, [pc, #16]	; (e810 <_i2c_master_wait_for_sync+0x20>)
    e800:	4798      	blx	r3
    e802:	1e03      	subs	r3, r0, #0
    e804:	d1f9      	bne.n	e7fa <_i2c_master_wait_for_sync+0xa>
}
    e806:	46c0      	nop			; (mov r8, r8)
    e808:	46bd      	mov	sp, r7
    e80a:	b002      	add	sp, #8
    e80c:	bd80      	pop	{r7, pc}
    e80e:	46c0      	nop			; (mov r8, r8)
    e810:	0000e7cd 	.word	0x0000e7cd

0000e814 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    e814:	b580      	push	{r7, lr}
    e816:	b084      	sub	sp, #16
    e818:	af00      	add	r7, sp, #0
    e81a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e81c:	687b      	ldr	r3, [r7, #4]
    e81e:	681b      	ldr	r3, [r3, #0]
    e820:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    e822:	68fb      	ldr	r3, [r7, #12]
    e824:	681b      	ldr	r3, [r3, #0]
    e826:	011b      	lsls	r3, r3, #4
    e828:	0fdb      	lsrs	r3, r3, #31
    e82a:	b2db      	uxtb	r3, r3
    e82c:	001a      	movs	r2, r3
    e82e:	230b      	movs	r3, #11
    e830:	18fb      	adds	r3, r7, r3
    e832:	1e51      	subs	r1, r2, #1
    e834:	418a      	sbcs	r2, r1
    e836:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    e838:	2308      	movs	r3, #8
    e83a:	18fb      	adds	r3, r7, r3
    e83c:	687a      	ldr	r2, [r7, #4]
    e83e:	8b52      	ldrh	r2, [r2, #26]
    e840:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    e842:	687b      	ldr	r3, [r7, #4]
    e844:	8b9b      	ldrh	r3, [r3, #28]
    e846:	b29a      	uxth	r2, r3
    e848:	2308      	movs	r3, #8
    e84a:	18fb      	adds	r3, r7, r3
    e84c:	2108      	movs	r1, #8
    e84e:	1879      	adds	r1, r7, r1
    e850:	8809      	ldrh	r1, [r1, #0]
    e852:	1a8a      	subs	r2, r1, r2
    e854:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    e856:	687b      	ldr	r3, [r7, #4]
    e858:	8b9b      	ldrh	r3, [r3, #28]
    e85a:	b29b      	uxth	r3, r3
    e85c:	3b01      	subs	r3, #1
    e85e:	b29a      	uxth	r2, r3
    e860:	687b      	ldr	r3, [r7, #4]
    e862:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    e864:	230b      	movs	r3, #11
    e866:	18fb      	adds	r3, r7, r3
    e868:	781b      	ldrb	r3, [r3, #0]
    e86a:	2b00      	cmp	r3, #0
    e86c:	d010      	beq.n	e890 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    e86e:	687b      	ldr	r3, [r7, #4]
    e870:	7adb      	ldrb	r3, [r3, #11]
    e872:	2b00      	cmp	r3, #0
    e874:	d01c      	beq.n	e8b0 <_i2c_master_read+0x9c>
    e876:	687b      	ldr	r3, [r7, #4]
    e878:	8b9b      	ldrh	r3, [r3, #28]
    e87a:	b29b      	uxth	r3, r3
    e87c:	2b01      	cmp	r3, #1
    e87e:	d117      	bne.n	e8b0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    e880:	68fb      	ldr	r3, [r7, #12]
    e882:	685b      	ldr	r3, [r3, #4]
    e884:	2280      	movs	r2, #128	; 0x80
    e886:	02d2      	lsls	r2, r2, #11
    e888:	431a      	orrs	r2, r3
    e88a:	68fb      	ldr	r3, [r7, #12]
    e88c:	605a      	str	r2, [r3, #4]
    e88e:	e00f      	b.n	e8b0 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    e890:	687b      	ldr	r3, [r7, #4]
    e892:	7adb      	ldrb	r3, [r3, #11]
    e894:	2b00      	cmp	r3, #0
    e896:	d00b      	beq.n	e8b0 <_i2c_master_read+0x9c>
    e898:	687b      	ldr	r3, [r7, #4]
    e89a:	8b9b      	ldrh	r3, [r3, #28]
    e89c:	b29b      	uxth	r3, r3
    e89e:	2b00      	cmp	r3, #0
    e8a0:	d106      	bne.n	e8b0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    e8a2:	68fb      	ldr	r3, [r7, #12]
    e8a4:	685b      	ldr	r3, [r3, #4]
    e8a6:	2280      	movs	r2, #128	; 0x80
    e8a8:	02d2      	lsls	r2, r2, #11
    e8aa:	431a      	orrs	r2, r3
    e8ac:	68fb      	ldr	r3, [r7, #12]
    e8ae:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    e8b0:	687b      	ldr	r3, [r7, #4]
    e8b2:	8b9b      	ldrh	r3, [r3, #28]
    e8b4:	b29b      	uxth	r3, r3
    e8b6:	2b00      	cmp	r3, #0
    e8b8:	d10e      	bne.n	e8d8 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    e8ba:	687b      	ldr	r3, [r7, #4]
    e8bc:	7a9b      	ldrb	r3, [r3, #10]
    e8be:	2b00      	cmp	r3, #0
    e8c0:	d00a      	beq.n	e8d8 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    e8c2:	687b      	ldr	r3, [r7, #4]
    e8c4:	0018      	movs	r0, r3
    e8c6:	4b0e      	ldr	r3, [pc, #56]	; (e900 <_i2c_master_read+0xec>)
    e8c8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    e8ca:	68fb      	ldr	r3, [r7, #12]
    e8cc:	685b      	ldr	r3, [r3, #4]
    e8ce:	22c0      	movs	r2, #192	; 0xc0
    e8d0:	0292      	lsls	r2, r2, #10
    e8d2:	431a      	orrs	r2, r3
    e8d4:	68fb      	ldr	r3, [r7, #12]
    e8d6:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    e8d8:	687b      	ldr	r3, [r7, #4]
    e8da:	0018      	movs	r0, r3
    e8dc:	4b08      	ldr	r3, [pc, #32]	; (e900 <_i2c_master_read+0xec>)
    e8de:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    e8e0:	687b      	ldr	r3, [r7, #4]
    e8e2:	6a1a      	ldr	r2, [r3, #32]
    e8e4:	2308      	movs	r3, #8
    e8e6:	18fb      	adds	r3, r7, r3
    e8e8:	881b      	ldrh	r3, [r3, #0]
    e8ea:	18d3      	adds	r3, r2, r3
    e8ec:	68fa      	ldr	r2, [r7, #12]
    e8ee:	2128      	movs	r1, #40	; 0x28
    e8f0:	5c52      	ldrb	r2, [r2, r1]
    e8f2:	b2d2      	uxtb	r2, r2
    e8f4:	701a      	strb	r2, [r3, #0]
}
    e8f6:	46c0      	nop			; (mov r8, r8)
    e8f8:	46bd      	mov	sp, r7
    e8fa:	b004      	add	sp, #16
    e8fc:	bd80      	pop	{r7, pc}
    e8fe:	46c0      	nop			; (mov r8, r8)
    e900:	0000e7f1 	.word	0x0000e7f1

0000e904 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    e904:	b580      	push	{r7, lr}
    e906:	b084      	sub	sp, #16
    e908:	af00      	add	r7, sp, #0
    e90a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e90c:	687b      	ldr	r3, [r7, #4]
    e90e:	681b      	ldr	r3, [r3, #0]
    e910:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    e912:	68fb      	ldr	r3, [r7, #12]
    e914:	8b5b      	ldrh	r3, [r3, #26]
    e916:	b29b      	uxth	r3, r3
    e918:	001a      	movs	r2, r3
    e91a:	2304      	movs	r3, #4
    e91c:	4013      	ands	r3, r2
    e91e:	d004      	beq.n	e92a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    e920:	687b      	ldr	r3, [r7, #4]
    e922:	2225      	movs	r2, #37	; 0x25
    e924:	211e      	movs	r1, #30
    e926:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    e928:	e024      	b.n	e974 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    e92a:	230a      	movs	r3, #10
    e92c:	18fb      	adds	r3, r7, r3
    e92e:	687a      	ldr	r2, [r7, #4]
    e930:	8b52      	ldrh	r2, [r2, #26]
    e932:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    e934:	687b      	ldr	r3, [r7, #4]
    e936:	8b9b      	ldrh	r3, [r3, #28]
    e938:	b29a      	uxth	r2, r3
    e93a:	230a      	movs	r3, #10
    e93c:	18fb      	adds	r3, r7, r3
    e93e:	210a      	movs	r1, #10
    e940:	1879      	adds	r1, r7, r1
    e942:	8809      	ldrh	r1, [r1, #0]
    e944:	1a8a      	subs	r2, r1, r2
    e946:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    e948:	687b      	ldr	r3, [r7, #4]
    e94a:	8b9b      	ldrh	r3, [r3, #28]
    e94c:	b29b      	uxth	r3, r3
    e94e:	3b01      	subs	r3, #1
    e950:	b29a      	uxth	r2, r3
    e952:	687b      	ldr	r3, [r7, #4]
    e954:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    e956:	687b      	ldr	r3, [r7, #4]
    e958:	0018      	movs	r0, r3
    e95a:	4b08      	ldr	r3, [pc, #32]	; (e97c <_i2c_master_write+0x78>)
    e95c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    e95e:	687b      	ldr	r3, [r7, #4]
    e960:	6a1a      	ldr	r2, [r3, #32]
    e962:	230a      	movs	r3, #10
    e964:	18fb      	adds	r3, r7, r3
    e966:	881b      	ldrh	r3, [r3, #0]
    e968:	18d3      	adds	r3, r2, r3
    e96a:	781b      	ldrb	r3, [r3, #0]
    e96c:	b2d9      	uxtb	r1, r3
    e96e:	68fb      	ldr	r3, [r7, #12]
    e970:	2228      	movs	r2, #40	; 0x28
    e972:	5499      	strb	r1, [r3, r2]
}
    e974:	46bd      	mov	sp, r7
    e976:	b004      	add	sp, #16
    e978:	bd80      	pop	{r7, pc}
    e97a:	46c0      	nop			; (mov r8, r8)
    e97c:	0000e7f1 	.word	0x0000e7f1

0000e980 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    e980:	b580      	push	{r7, lr}
    e982:	b084      	sub	sp, #16
    e984:	af00      	add	r7, sp, #0
    e986:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e988:	687b      	ldr	r3, [r7, #4]
    e98a:	681b      	ldr	r3, [r3, #0]
    e98c:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    e98e:	68fb      	ldr	r3, [r7, #12]
    e990:	7e1b      	ldrb	r3, [r3, #24]
    e992:	b2db      	uxtb	r3, r3
    e994:	001a      	movs	r2, r3
    e996:	2301      	movs	r3, #1
    e998:	4013      	ands	r3, r2
    e99a:	d02b      	beq.n	e9f4 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    e99c:	68fb      	ldr	r3, [r7, #12]
    e99e:	2201      	movs	r2, #1
    e9a0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    e9a2:	68fb      	ldr	r3, [r7, #12]
    e9a4:	8b5b      	ldrh	r3, [r3, #26]
    e9a6:	b29b      	uxth	r3, r3
    e9a8:	001a      	movs	r2, r3
    e9aa:	2302      	movs	r3, #2
    e9ac:	4013      	ands	r3, r2
    e9ae:	d004      	beq.n	e9ba <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    e9b0:	687b      	ldr	r3, [r7, #4]
    e9b2:	2225      	movs	r2, #37	; 0x25
    e9b4:	2141      	movs	r1, #65	; 0x41
    e9b6:	5499      	strb	r1, [r3, r2]
    e9b8:	e01c      	b.n	e9f4 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    e9ba:	68fb      	ldr	r3, [r7, #12]
    e9bc:	8b5b      	ldrh	r3, [r3, #26]
    e9be:	b29b      	uxth	r3, r3
    e9c0:	001a      	movs	r2, r3
    e9c2:	2304      	movs	r3, #4
    e9c4:	4013      	ands	r3, r2
    e9c6:	d015      	beq.n	e9f4 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    e9c8:	687b      	ldr	r3, [r7, #4]
    e9ca:	2225      	movs	r2, #37	; 0x25
    e9cc:	2118      	movs	r1, #24
    e9ce:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    e9d0:	687b      	ldr	r3, [r7, #4]
    e9d2:	2200      	movs	r2, #0
    e9d4:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    e9d6:	687b      	ldr	r3, [r7, #4]
    e9d8:	7a9b      	ldrb	r3, [r3, #10]
    e9da:	2b00      	cmp	r3, #0
    e9dc:	d00a      	beq.n	e9f4 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    e9de:	687b      	ldr	r3, [r7, #4]
    e9e0:	0018      	movs	r0, r3
    e9e2:	4b13      	ldr	r3, [pc, #76]	; (ea30 <_i2c_master_async_address_response+0xb0>)
    e9e4:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    e9e6:	68fb      	ldr	r3, [r7, #12]
    e9e8:	685b      	ldr	r3, [r3, #4]
    e9ea:	22c0      	movs	r2, #192	; 0xc0
    e9ec:	0292      	lsls	r2, r2, #10
    e9ee:	431a      	orrs	r2, r3
    e9f0:	68fb      	ldr	r3, [r7, #12]
    e9f2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    e9f4:	687b      	ldr	r3, [r7, #4]
    e9f6:	8b9b      	ldrh	r3, [r3, #28]
    e9f8:	b29a      	uxth	r2, r3
    e9fa:	687b      	ldr	r3, [r7, #4]
    e9fc:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    e9fe:	687b      	ldr	r3, [r7, #4]
    ea00:	2225      	movs	r2, #37	; 0x25
    ea02:	5c9b      	ldrb	r3, [r3, r2]
    ea04:	b2db      	uxtb	r3, r3
    ea06:	2b05      	cmp	r3, #5
    ea08:	d10e      	bne.n	ea28 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    ea0a:	687b      	ldr	r3, [r7, #4]
    ea0c:	2224      	movs	r2, #36	; 0x24
    ea0e:	5c9b      	ldrb	r3, [r3, r2]
    ea10:	b2db      	uxtb	r3, r3
    ea12:	2b00      	cmp	r3, #0
    ea14:	d104      	bne.n	ea20 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    ea16:	687b      	ldr	r3, [r7, #4]
    ea18:	0018      	movs	r0, r3
    ea1a:	4b06      	ldr	r3, [pc, #24]	; (ea34 <_i2c_master_async_address_response+0xb4>)
    ea1c:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    ea1e:	e003      	b.n	ea28 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    ea20:	687b      	ldr	r3, [r7, #4]
    ea22:	0018      	movs	r0, r3
    ea24:	4b04      	ldr	r3, [pc, #16]	; (ea38 <_i2c_master_async_address_response+0xb8>)
    ea26:	4798      	blx	r3
}
    ea28:	46c0      	nop			; (mov r8, r8)
    ea2a:	46bd      	mov	sp, r7
    ea2c:	b004      	add	sp, #16
    ea2e:	bd80      	pop	{r7, pc}
    ea30:	0000e7f1 	.word	0x0000e7f1
    ea34:	0000e905 	.word	0x0000e905
    ea38:	0000e815 	.word	0x0000e815

0000ea3c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    ea3c:	b580      	push	{r7, lr}
    ea3e:	b086      	sub	sp, #24
    ea40:	af00      	add	r7, sp, #0
    ea42:	0002      	movs	r2, r0
    ea44:	1dfb      	adds	r3, r7, #7
    ea46:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    ea48:	1dfb      	adds	r3, r7, #7
    ea4a:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    ea4c:	4b93      	ldr	r3, [pc, #588]	; (ec9c <_i2c_master_interrupt_handler+0x260>)
    ea4e:	0092      	lsls	r2, r2, #2
    ea50:	58d3      	ldr	r3, [r2, r3]
    ea52:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    ea54:	697b      	ldr	r3, [r7, #20]
    ea56:	681b      	ldr	r3, [r3, #0]
    ea58:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    ea5a:	693b      	ldr	r3, [r7, #16]
    ea5c:	681b      	ldr	r3, [r3, #0]
    ea5e:	011b      	lsls	r3, r3, #4
    ea60:	0fdb      	lsrs	r3, r3, #31
    ea62:	b2db      	uxtb	r3, r3
    ea64:	001a      	movs	r2, r3
    ea66:	230f      	movs	r3, #15
    ea68:	18fb      	adds	r3, r7, r3
    ea6a:	1e51      	subs	r1, r2, #1
    ea6c:	418a      	sbcs	r2, r1
    ea6e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    ea70:	230e      	movs	r3, #14
    ea72:	18fb      	adds	r3, r7, r3
    ea74:	697a      	ldr	r2, [r7, #20]
    ea76:	7e52      	ldrb	r2, [r2, #25]
    ea78:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    ea7a:	697b      	ldr	r3, [r7, #20]
    ea7c:	7e1b      	ldrb	r3, [r3, #24]
    ea7e:	b2da      	uxtb	r2, r3
    ea80:	230e      	movs	r3, #14
    ea82:	18fb      	adds	r3, r7, r3
    ea84:	210e      	movs	r1, #14
    ea86:	1879      	adds	r1, r7, r1
    ea88:	7809      	ldrb	r1, [r1, #0]
    ea8a:	400a      	ands	r2, r1
    ea8c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    ea8e:	697b      	ldr	r3, [r7, #20]
    ea90:	8b5b      	ldrh	r3, [r3, #26]
    ea92:	b29b      	uxth	r3, r3
    ea94:	2b00      	cmp	r3, #0
    ea96:	d109      	bne.n	eaac <_i2c_master_interrupt_handler+0x70>
    ea98:	697b      	ldr	r3, [r7, #20]
    ea9a:	8b9b      	ldrh	r3, [r3, #28]
    ea9c:	b29b      	uxth	r3, r3
    ea9e:	2b00      	cmp	r3, #0
    eaa0:	d004      	beq.n	eaac <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    eaa2:	697b      	ldr	r3, [r7, #20]
    eaa4:	0018      	movs	r0, r3
    eaa6:	4b7e      	ldr	r3, [pc, #504]	; (eca0 <_i2c_master_interrupt_handler+0x264>)
    eaa8:	4798      	blx	r3
    eaaa:	e070      	b.n	eb8e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    eaac:	697b      	ldr	r3, [r7, #20]
    eaae:	8b5b      	ldrh	r3, [r3, #26]
    eab0:	b29b      	uxth	r3, r3
    eab2:	2b00      	cmp	r3, #0
    eab4:	d039      	beq.n	eb2a <_i2c_master_interrupt_handler+0xee>
    eab6:	697b      	ldr	r3, [r7, #20]
    eab8:	8b9b      	ldrh	r3, [r3, #28]
    eaba:	b29b      	uxth	r3, r3
    eabc:	2b00      	cmp	r3, #0
    eabe:	d134      	bne.n	eb2a <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    eac0:	697b      	ldr	r3, [r7, #20]
    eac2:	2225      	movs	r2, #37	; 0x25
    eac4:	5c9b      	ldrb	r3, [r3, r2]
    eac6:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    eac8:	2b05      	cmp	r3, #5
    eaca:	d12e      	bne.n	eb2a <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    eacc:	697b      	ldr	r3, [r7, #20]
    eace:	2224      	movs	r2, #36	; 0x24
    ead0:	5c9b      	ldrb	r3, [r3, r2]
    ead2:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    ead4:	2b00      	cmp	r3, #0
    ead6:	d128      	bne.n	eb2a <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    ead8:	693b      	ldr	r3, [r7, #16]
    eada:	2203      	movs	r2, #3
    eadc:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    eade:	697b      	ldr	r3, [r7, #20]
    eae0:	2200      	movs	r2, #0
    eae2:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    eae4:	697b      	ldr	r3, [r7, #20]
    eae6:	2225      	movs	r2, #37	; 0x25
    eae8:	2100      	movs	r1, #0
    eaea:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    eaec:	697b      	ldr	r3, [r7, #20]
    eaee:	7a9b      	ldrb	r3, [r3, #10]
    eaf0:	2b00      	cmp	r3, #0
    eaf2:	d00b      	beq.n	eb0c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    eaf4:	697b      	ldr	r3, [r7, #20]
    eaf6:	0018      	movs	r0, r3
    eaf8:	4b6a      	ldr	r3, [pc, #424]	; (eca4 <_i2c_master_interrupt_handler+0x268>)
    eafa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    eafc:	693b      	ldr	r3, [r7, #16]
    eafe:	685b      	ldr	r3, [r3, #4]
    eb00:	22c0      	movs	r2, #192	; 0xc0
    eb02:	0292      	lsls	r2, r2, #10
    eb04:	431a      	orrs	r2, r3
    eb06:	693b      	ldr	r3, [r7, #16]
    eb08:	605a      	str	r2, [r3, #4]
    eb0a:	e002      	b.n	eb12 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    eb0c:	693b      	ldr	r3, [r7, #16]
    eb0e:	2201      	movs	r2, #1
    eb10:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    eb12:	230e      	movs	r3, #14
    eb14:	18fb      	adds	r3, r7, r3
    eb16:	781b      	ldrb	r3, [r3, #0]
    eb18:	2201      	movs	r2, #1
    eb1a:	4013      	ands	r3, r2
    eb1c:	d037      	beq.n	eb8e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    eb1e:	697b      	ldr	r3, [r7, #20]
    eb20:	68db      	ldr	r3, [r3, #12]
    eb22:	697a      	ldr	r2, [r7, #20]
    eb24:	0010      	movs	r0, r2
    eb26:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    eb28:	e031      	b.n	eb8e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    eb2a:	697b      	ldr	r3, [r7, #20]
    eb2c:	8b5b      	ldrh	r3, [r3, #26]
    eb2e:	b29b      	uxth	r3, r3
    eb30:	2b00      	cmp	r3, #0
    eb32:	d02c      	beq.n	eb8e <_i2c_master_interrupt_handler+0x152>
    eb34:	697b      	ldr	r3, [r7, #20]
    eb36:	8b9b      	ldrh	r3, [r3, #28]
    eb38:	b29b      	uxth	r3, r3
    eb3a:	2b00      	cmp	r3, #0
    eb3c:	d027      	beq.n	eb8e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    eb3e:	693b      	ldr	r3, [r7, #16]
    eb40:	8b5b      	ldrh	r3, [r3, #26]
    eb42:	b29b      	uxth	r3, r3
    eb44:	001a      	movs	r2, r3
    eb46:	2320      	movs	r3, #32
    eb48:	4013      	ands	r3, r2
    eb4a:	d111      	bne.n	eb70 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    eb4c:	230f      	movs	r3, #15
    eb4e:	18fb      	adds	r3, r7, r3
    eb50:	781b      	ldrb	r3, [r3, #0]
    eb52:	2201      	movs	r2, #1
    eb54:	4053      	eors	r3, r2
    eb56:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    eb58:	2b00      	cmp	r3, #0
    eb5a:	d104      	bne.n	eb66 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    eb5c:	697b      	ldr	r3, [r7, #20]
    eb5e:	8b9b      	ldrh	r3, [r3, #28]
    eb60:	b29b      	uxth	r3, r3
    eb62:	2b01      	cmp	r3, #1
    eb64:	d004      	beq.n	eb70 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    eb66:	697b      	ldr	r3, [r7, #20]
    eb68:	2225      	movs	r2, #37	; 0x25
    eb6a:	2141      	movs	r1, #65	; 0x41
    eb6c:	5499      	strb	r1, [r3, r2]
    eb6e:	e00e      	b.n	eb8e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    eb70:	697b      	ldr	r3, [r7, #20]
    eb72:	2224      	movs	r2, #36	; 0x24
    eb74:	5c9b      	ldrb	r3, [r3, r2]
    eb76:	b2db      	uxtb	r3, r3
    eb78:	2b00      	cmp	r3, #0
    eb7a:	d104      	bne.n	eb86 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    eb7c:	697b      	ldr	r3, [r7, #20]
    eb7e:	0018      	movs	r0, r3
    eb80:	4b49      	ldr	r3, [pc, #292]	; (eca8 <_i2c_master_interrupt_handler+0x26c>)
    eb82:	4798      	blx	r3
    eb84:	e003      	b.n	eb8e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    eb86:	697b      	ldr	r3, [r7, #20]
    eb88:	0018      	movs	r0, r3
    eb8a:	4b48      	ldr	r3, [pc, #288]	; (ecac <_i2c_master_interrupt_handler+0x270>)
    eb8c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    eb8e:	697b      	ldr	r3, [r7, #20]
    eb90:	8b5b      	ldrh	r3, [r3, #26]
    eb92:	b29b      	uxth	r3, r3
    eb94:	2b00      	cmp	r3, #0
    eb96:	d047      	beq.n	ec28 <_i2c_master_interrupt_handler+0x1ec>
    eb98:	697b      	ldr	r3, [r7, #20]
    eb9a:	8b9b      	ldrh	r3, [r3, #28]
    eb9c:	b29b      	uxth	r3, r3
    eb9e:	2b00      	cmp	r3, #0
    eba0:	d142      	bne.n	ec28 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    eba2:	697b      	ldr	r3, [r7, #20]
    eba4:	2225      	movs	r2, #37	; 0x25
    eba6:	5c9b      	ldrb	r3, [r3, r2]
    eba8:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    ebaa:	2b05      	cmp	r3, #5
    ebac:	d13c      	bne.n	ec28 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    ebae:	697b      	ldr	r3, [r7, #20]
    ebb0:	2224      	movs	r2, #36	; 0x24
    ebb2:	5c9b      	ldrb	r3, [r3, r2]
    ebb4:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    ebb6:	2b01      	cmp	r3, #1
    ebb8:	d136      	bne.n	ec28 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    ebba:	693b      	ldr	r3, [r7, #16]
    ebbc:	7e1b      	ldrb	r3, [r3, #24]
    ebbe:	b2db      	uxtb	r3, r3
    ebc0:	001a      	movs	r2, r3
    ebc2:	2302      	movs	r3, #2
    ebc4:	4013      	ands	r3, r2
    ebc6:	d002      	beq.n	ebce <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    ebc8:	693b      	ldr	r3, [r7, #16]
    ebca:	2202      	movs	r2, #2
    ebcc:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    ebce:	693b      	ldr	r3, [r7, #16]
    ebd0:	2203      	movs	r2, #3
    ebd2:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    ebd4:	697b      	ldr	r3, [r7, #20]
    ebd6:	2200      	movs	r2, #0
    ebd8:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    ebda:	697b      	ldr	r3, [r7, #20]
    ebdc:	2225      	movs	r2, #37	; 0x25
    ebde:	2100      	movs	r1, #0
    ebe0:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    ebe2:	230e      	movs	r3, #14
    ebe4:	18fb      	adds	r3, r7, r3
    ebe6:	781b      	ldrb	r3, [r3, #0]
    ebe8:	2202      	movs	r2, #2
    ebea:	4013      	ands	r3, r2
    ebec:	d00b      	beq.n	ec06 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    ebee:	697b      	ldr	r3, [r7, #20]
    ebf0:	2224      	movs	r2, #36	; 0x24
    ebf2:	5c9b      	ldrb	r3, [r3, r2]
    ebf4:	b2db      	uxtb	r3, r3
    ebf6:	2b01      	cmp	r3, #1
    ebf8:	d105      	bne.n	ec06 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    ebfa:	697b      	ldr	r3, [r7, #20]
    ebfc:	691b      	ldr	r3, [r3, #16]
    ebfe:	697a      	ldr	r2, [r7, #20]
    ec00:	0010      	movs	r0, r2
    ec02:	4798      	blx	r3
    ec04:	e010      	b.n	ec28 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    ec06:	230e      	movs	r3, #14
    ec08:	18fb      	adds	r3, r7, r3
    ec0a:	781b      	ldrb	r3, [r3, #0]
    ec0c:	2201      	movs	r2, #1
    ec0e:	4013      	ands	r3, r2
    ec10:	d00a      	beq.n	ec28 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    ec12:	697b      	ldr	r3, [r7, #20]
    ec14:	2224      	movs	r2, #36	; 0x24
    ec16:	5c9b      	ldrb	r3, [r3, r2]
    ec18:	b2db      	uxtb	r3, r3
    ec1a:	2b00      	cmp	r3, #0
    ec1c:	d104      	bne.n	ec28 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    ec1e:	697b      	ldr	r3, [r7, #20]
    ec20:	68db      	ldr	r3, [r3, #12]
    ec22:	697a      	ldr	r2, [r7, #20]
    ec24:	0010      	movs	r0, r2
    ec26:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    ec28:	697b      	ldr	r3, [r7, #20]
    ec2a:	2225      	movs	r2, #37	; 0x25
    ec2c:	5c9b      	ldrb	r3, [r3, r2]
    ec2e:	b2db      	uxtb	r3, r3
    ec30:	2b05      	cmp	r3, #5
    ec32:	d02e      	beq.n	ec92 <_i2c_master_interrupt_handler+0x256>
    ec34:	697b      	ldr	r3, [r7, #20]
    ec36:	2225      	movs	r2, #37	; 0x25
    ec38:	5c9b      	ldrb	r3, [r3, r2]
    ec3a:	b2db      	uxtb	r3, r3
    ec3c:	2b00      	cmp	r3, #0
    ec3e:	d028      	beq.n	ec92 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    ec40:	693b      	ldr	r3, [r7, #16]
    ec42:	2203      	movs	r2, #3
    ec44:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    ec46:	697b      	ldr	r3, [r7, #20]
    ec48:	2200      	movs	r2, #0
    ec4a:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    ec4c:	697b      	ldr	r3, [r7, #20]
    ec4e:	2200      	movs	r2, #0
    ec50:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    ec52:	697b      	ldr	r3, [r7, #20]
    ec54:	2225      	movs	r2, #37	; 0x25
    ec56:	5c9b      	ldrb	r3, [r3, r2]
    ec58:	b2db      	uxtb	r3, r3
    ec5a:	2b41      	cmp	r3, #65	; 0x41
    ec5c:	d00e      	beq.n	ec7c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    ec5e:	697b      	ldr	r3, [r7, #20]
    ec60:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    ec62:	2b00      	cmp	r3, #0
    ec64:	d00a      	beq.n	ec7c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    ec66:	697b      	ldr	r3, [r7, #20]
    ec68:	0018      	movs	r0, r3
    ec6a:	4b0e      	ldr	r3, [pc, #56]	; (eca4 <_i2c_master_interrupt_handler+0x268>)
    ec6c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    ec6e:	693b      	ldr	r3, [r7, #16]
    ec70:	685b      	ldr	r3, [r3, #4]
    ec72:	22e0      	movs	r2, #224	; 0xe0
    ec74:	02d2      	lsls	r2, r2, #11
    ec76:	431a      	orrs	r2, r3
    ec78:	693b      	ldr	r3, [r7, #16]
    ec7a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    ec7c:	230e      	movs	r3, #14
    ec7e:	18fb      	adds	r3, r7, r3
    ec80:	781b      	ldrb	r3, [r3, #0]
    ec82:	2204      	movs	r2, #4
    ec84:	4013      	ands	r3, r2
    ec86:	d004      	beq.n	ec92 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    ec88:	697b      	ldr	r3, [r7, #20]
    ec8a:	695b      	ldr	r3, [r3, #20]
    ec8c:	697a      	ldr	r2, [r7, #20]
    ec8e:	0010      	movs	r0, r2
    ec90:	4798      	blx	r3
		}
	}
}
    ec92:	46c0      	nop			; (mov r8, r8)
    ec94:	46bd      	mov	sp, r7
    ec96:	b006      	add	sp, #24
    ec98:	bd80      	pop	{r7, pc}
    ec9a:	46c0      	nop			; (mov r8, r8)
    ec9c:	20000904 	.word	0x20000904
    eca0:	0000e981 	.word	0x0000e981
    eca4:	0000e7f1 	.word	0x0000e7f1
    eca8:	0000e905 	.word	0x0000e905
    ecac:	0000e815 	.word	0x0000e815

0000ecb0 <system_gclk_chan_get_config_defaults>:
{
    ecb0:	b580      	push	{r7, lr}
    ecb2:	b082      	sub	sp, #8
    ecb4:	af00      	add	r7, sp, #0
    ecb6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    ecb8:	687b      	ldr	r3, [r7, #4]
    ecba:	2200      	movs	r2, #0
    ecbc:	701a      	strb	r2, [r3, #0]
}
    ecbe:	46c0      	nop			; (mov r8, r8)
    ecc0:	46bd      	mov	sp, r7
    ecc2:	b002      	add	sp, #8
    ecc4:	bd80      	pop	{r7, pc}

0000ecc6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    ecc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecc8:	b08d      	sub	sp, #52	; 0x34
    ecca:	af00      	add	r7, sp, #0
    eccc:	60b8      	str	r0, [r7, #8]
    ecce:	60f9      	str	r1, [r7, #12]
    ecd0:	603a      	str	r2, [r7, #0]
    ecd2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    ecd4:	2300      	movs	r3, #0
    ecd6:	2400      	movs	r4, #0
    ecd8:	623b      	str	r3, [r7, #32]
    ecda:	627c      	str	r4, [r7, #36]	; 0x24
    ecdc:	2300      	movs	r3, #0
    ecde:	2400      	movs	r4, #0
    ece0:	61bb      	str	r3, [r7, #24]
    ece2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    ece4:	233f      	movs	r3, #63	; 0x3f
    ece6:	62fb      	str	r3, [r7, #44]	; 0x2c
    ece8:	e053      	b.n	ed92 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecec:	3b20      	subs	r3, #32
    ecee:	2b00      	cmp	r3, #0
    ecf0:	db04      	blt.n	ecfc <long_division+0x36>
    ecf2:	2201      	movs	r2, #1
    ecf4:	409a      	lsls	r2, r3
    ecf6:	0013      	movs	r3, r2
    ecf8:	617b      	str	r3, [r7, #20]
    ecfa:	e00b      	b.n	ed14 <long_division+0x4e>
    ecfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecfe:	2220      	movs	r2, #32
    ed00:	1ad3      	subs	r3, r2, r3
    ed02:	2201      	movs	r2, #1
    ed04:	40da      	lsrs	r2, r3
    ed06:	0013      	movs	r3, r2
    ed08:	2100      	movs	r1, #0
    ed0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ed0c:	4091      	lsls	r1, r2
    ed0e:	000a      	movs	r2, r1
    ed10:	4313      	orrs	r3, r2
    ed12:	617b      	str	r3, [r7, #20]
    ed14:	2201      	movs	r2, #1
    ed16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed18:	409a      	lsls	r2, r3
    ed1a:	0013      	movs	r3, r2
    ed1c:	613b      	str	r3, [r7, #16]

		r = r << 1;
    ed1e:	69bb      	ldr	r3, [r7, #24]
    ed20:	69fc      	ldr	r4, [r7, #28]
    ed22:	18db      	adds	r3, r3, r3
    ed24:	4164      	adcs	r4, r4
    ed26:	61bb      	str	r3, [r7, #24]
    ed28:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    ed2a:	68bb      	ldr	r3, [r7, #8]
    ed2c:	693a      	ldr	r2, [r7, #16]
    ed2e:	401a      	ands	r2, r3
    ed30:	0015      	movs	r5, r2
    ed32:	68fb      	ldr	r3, [r7, #12]
    ed34:	697a      	ldr	r2, [r7, #20]
    ed36:	401a      	ands	r2, r3
    ed38:	0016      	movs	r6, r2
    ed3a:	002b      	movs	r3, r5
    ed3c:	4333      	orrs	r3, r6
    ed3e:	d007      	beq.n	ed50 <long_division+0x8a>
			r |= 0x01;
    ed40:	69bb      	ldr	r3, [r7, #24]
    ed42:	2201      	movs	r2, #1
    ed44:	4313      	orrs	r3, r2
    ed46:	61bb      	str	r3, [r7, #24]
    ed48:	69fb      	ldr	r3, [r7, #28]
    ed4a:	2200      	movs	r2, #0
    ed4c:	4313      	orrs	r3, r2
    ed4e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    ed50:	687a      	ldr	r2, [r7, #4]
    ed52:	69fb      	ldr	r3, [r7, #28]
    ed54:	429a      	cmp	r2, r3
    ed56:	d819      	bhi.n	ed8c <long_division+0xc6>
    ed58:	687a      	ldr	r2, [r7, #4]
    ed5a:	69fb      	ldr	r3, [r7, #28]
    ed5c:	429a      	cmp	r2, r3
    ed5e:	d103      	bne.n	ed68 <long_division+0xa2>
    ed60:	683a      	ldr	r2, [r7, #0]
    ed62:	69bb      	ldr	r3, [r7, #24]
    ed64:	429a      	cmp	r2, r3
    ed66:	d811      	bhi.n	ed8c <long_division+0xc6>
			r = r - d;
    ed68:	69b9      	ldr	r1, [r7, #24]
    ed6a:	69fa      	ldr	r2, [r7, #28]
    ed6c:	683b      	ldr	r3, [r7, #0]
    ed6e:	687c      	ldr	r4, [r7, #4]
    ed70:	1ac9      	subs	r1, r1, r3
    ed72:	41a2      	sbcs	r2, r4
    ed74:	000b      	movs	r3, r1
    ed76:	0014      	movs	r4, r2
    ed78:	61bb      	str	r3, [r7, #24]
    ed7a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    ed7c:	6a3a      	ldr	r2, [r7, #32]
    ed7e:	693b      	ldr	r3, [r7, #16]
    ed80:	4313      	orrs	r3, r2
    ed82:	623b      	str	r3, [r7, #32]
    ed84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ed86:	697b      	ldr	r3, [r7, #20]
    ed88:	4313      	orrs	r3, r2
    ed8a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed8e:	3b01      	subs	r3, #1
    ed90:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed94:	2b00      	cmp	r3, #0
    ed96:	daa8      	bge.n	ecea <long_division+0x24>
		}
	}

	return q;
    ed98:	6a3b      	ldr	r3, [r7, #32]
    ed9a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    ed9c:	0018      	movs	r0, r3
    ed9e:	0021      	movs	r1, r4
    eda0:	46bd      	mov	sp, r7
    eda2:	b00d      	add	sp, #52	; 0x34
    eda4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000eda6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    eda6:	b580      	push	{r7, lr}
    eda8:	b086      	sub	sp, #24
    edaa:	af00      	add	r7, sp, #0
    edac:	60f8      	str	r0, [r7, #12]
    edae:	60b9      	str	r1, [r7, #8]
    edb0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    edb2:	2316      	movs	r3, #22
    edb4:	18fb      	adds	r3, r7, r3
    edb6:	2200      	movs	r2, #0
    edb8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    edba:	68bb      	ldr	r3, [r7, #8]
    edbc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    edbe:	68bb      	ldr	r3, [r7, #8]
    edc0:	085a      	lsrs	r2, r3, #1
    edc2:	68fb      	ldr	r3, [r7, #12]
    edc4:	429a      	cmp	r2, r3
    edc6:	d201      	bcs.n	edcc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    edc8:	2340      	movs	r3, #64	; 0x40
    edca:	e026      	b.n	ee1a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    edcc:	68bb      	ldr	r3, [r7, #8]
    edce:	085b      	lsrs	r3, r3, #1
    edd0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    edd2:	e00a      	b.n	edea <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    edd4:	693a      	ldr	r2, [r7, #16]
    edd6:	68fb      	ldr	r3, [r7, #12]
    edd8:	1ad3      	subs	r3, r2, r3
    edda:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    eddc:	2316      	movs	r3, #22
    edde:	18fb      	adds	r3, r7, r3
    ede0:	881a      	ldrh	r2, [r3, #0]
    ede2:	2316      	movs	r3, #22
    ede4:	18fb      	adds	r3, r7, r3
    ede6:	3201      	adds	r2, #1
    ede8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    edea:	693a      	ldr	r2, [r7, #16]
    edec:	68fb      	ldr	r3, [r7, #12]
    edee:	429a      	cmp	r2, r3
    edf0:	d2f0      	bcs.n	edd4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    edf2:	2316      	movs	r3, #22
    edf4:	18fb      	adds	r3, r7, r3
    edf6:	2216      	movs	r2, #22
    edf8:	18ba      	adds	r2, r7, r2
    edfa:	8812      	ldrh	r2, [r2, #0]
    edfc:	3a01      	subs	r2, #1
    edfe:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    ee00:	2316      	movs	r3, #22
    ee02:	18fb      	adds	r3, r7, r3
    ee04:	881b      	ldrh	r3, [r3, #0]
    ee06:	2bff      	cmp	r3, #255	; 0xff
    ee08:	d901      	bls.n	ee0e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ee0a:	2340      	movs	r3, #64	; 0x40
    ee0c:	e005      	b.n	ee1a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    ee0e:	687b      	ldr	r3, [r7, #4]
    ee10:	2216      	movs	r2, #22
    ee12:	18ba      	adds	r2, r7, r2
    ee14:	8812      	ldrh	r2, [r2, #0]
    ee16:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    ee18:	2300      	movs	r3, #0
	}
}
    ee1a:	0018      	movs	r0, r3
    ee1c:	46bd      	mov	sp, r7
    ee1e:	b006      	add	sp, #24
    ee20:	bd80      	pop	{r7, pc}
	...

0000ee24 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    ee24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee26:	b0a1      	sub	sp, #132	; 0x84
    ee28:	af00      	add	r7, sp, #0
    ee2a:	64f8      	str	r0, [r7, #76]	; 0x4c
    ee2c:	64b9      	str	r1, [r7, #72]	; 0x48
    ee2e:	647a      	str	r2, [r7, #68]	; 0x44
    ee30:	2243      	movs	r2, #67	; 0x43
    ee32:	18ba      	adds	r2, r7, r2
    ee34:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    ee36:	2300      	movs	r3, #0
    ee38:	2400      	movs	r4, #0
    ee3a:	673b      	str	r3, [r7, #112]	; 0x70
    ee3c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    ee3e:	2300      	movs	r3, #0
    ee40:	2400      	movs	r4, #0
    ee42:	66bb      	str	r3, [r7, #104]	; 0x68
    ee44:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    ee46:	2300      	movs	r3, #0
    ee48:	2400      	movs	r4, #0
    ee4a:	67bb      	str	r3, [r7, #120]	; 0x78
    ee4c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    ee4e:	2300      	movs	r3, #0
    ee50:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    ee52:	2358      	movs	r3, #88	; 0x58
    ee54:	2240      	movs	r2, #64	; 0x40
    ee56:	4694      	mov	ip, r2
    ee58:	44bc      	add	ip, r7
    ee5a:	4463      	add	r3, ip
    ee5c:	781a      	ldrb	r2, [r3, #0]
    ee5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ee60:	435a      	muls	r2, r3
    ee62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ee64:	429a      	cmp	r2, r3
    ee66:	d901      	bls.n	ee6c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ee68:	2340      	movs	r3, #64	; 0x40
    ee6a:	e0b3      	b.n	efd4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    ee6c:	2343      	movs	r3, #67	; 0x43
    ee6e:	18fb      	adds	r3, r7, r3
    ee70:	781b      	ldrb	r3, [r3, #0]
    ee72:	2b00      	cmp	r3, #0
    ee74:	d13d      	bne.n	eef2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    ee76:	2358      	movs	r3, #88	; 0x58
    ee78:	2240      	movs	r2, #64	; 0x40
    ee7a:	4694      	mov	ip, r2
    ee7c:	44bc      	add	ip, r7
    ee7e:	4463      	add	r3, ip
    ee80:	781b      	ldrb	r3, [r3, #0]
    ee82:	b2db      	uxtb	r3, r3
    ee84:	613b      	str	r3, [r7, #16]
    ee86:	2300      	movs	r3, #0
    ee88:	617b      	str	r3, [r7, #20]
    ee8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ee8c:	60bb      	str	r3, [r7, #8]
    ee8e:	2300      	movs	r3, #0
    ee90:	60fb      	str	r3, [r7, #12]
    ee92:	4c52      	ldr	r4, [pc, #328]	; (efdc <_sercom_get_async_baud_val+0x1b8>)
    ee94:	68ba      	ldr	r2, [r7, #8]
    ee96:	68fb      	ldr	r3, [r7, #12]
    ee98:	6938      	ldr	r0, [r7, #16]
    ee9a:	6979      	ldr	r1, [r7, #20]
    ee9c:	47a0      	blx	r4
    ee9e:	0003      	movs	r3, r0
    eea0:	000c      	movs	r4, r1
    eea2:	001b      	movs	r3, r3
    eea4:	65fb      	str	r3, [r7, #92]	; 0x5c
    eea6:	2300      	movs	r3, #0
    eea8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    eeaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    eeac:	603b      	str	r3, [r7, #0]
    eeae:	2300      	movs	r3, #0
    eeb0:	607b      	str	r3, [r7, #4]
    eeb2:	6db8      	ldr	r0, [r7, #88]	; 0x58
    eeb4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    eeb6:	683a      	ldr	r2, [r7, #0]
    eeb8:	687b      	ldr	r3, [r7, #4]
    eeba:	4c49      	ldr	r4, [pc, #292]	; (efe0 <_sercom_get_async_baud_val+0x1bc>)
    eebc:	47a0      	blx	r4
    eebe:	0003      	movs	r3, r0
    eec0:	000c      	movs	r4, r1
    eec2:	673b      	str	r3, [r7, #112]	; 0x70
    eec4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    eec6:	2100      	movs	r1, #0
    eec8:	2201      	movs	r2, #1
    eeca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    eecc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    eece:	1ac9      	subs	r1, r1, r3
    eed0:	41a2      	sbcs	r2, r4
    eed2:	000b      	movs	r3, r1
    eed4:	0014      	movs	r4, r2
    eed6:	66bb      	str	r3, [r7, #104]	; 0x68
    eed8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    eeda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    eedc:	0c1b      	lsrs	r3, r3, #16
    eede:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    eee0:	0416      	lsls	r6, r2, #16
    eee2:	431e      	orrs	r6, r3
    eee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    eee6:	041d      	lsls	r5, r3, #16
    eee8:	0033      	movs	r3, r6
    eeea:	67bb      	str	r3, [r7, #120]	; 0x78
    eeec:	2300      	movs	r3, #0
    eeee:	67fb      	str	r3, [r7, #124]	; 0x7c
    eef0:	e06a      	b.n	efc8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    eef2:	2343      	movs	r3, #67	; 0x43
    eef4:	18fb      	adds	r3, r7, r3
    eef6:	781b      	ldrb	r3, [r3, #0]
    eef8:	2b01      	cmp	r3, #1
    eefa:	d165      	bne.n	efc8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    eefc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    eefe:	633b      	str	r3, [r7, #48]	; 0x30
    ef00:	2300      	movs	r3, #0
    ef02:	637b      	str	r3, [r7, #52]	; 0x34
    ef04:	2358      	movs	r3, #88	; 0x58
    ef06:	2240      	movs	r2, #64	; 0x40
    ef08:	4694      	mov	ip, r2
    ef0a:	44bc      	add	ip, r7
    ef0c:	4463      	add	r3, ip
    ef0e:	781b      	ldrb	r3, [r3, #0]
    ef10:	b2db      	uxtb	r3, r3
    ef12:	62bb      	str	r3, [r7, #40]	; 0x28
    ef14:	2300      	movs	r3, #0
    ef16:	62fb      	str	r3, [r7, #44]	; 0x2c
    ef18:	4c30      	ldr	r4, [pc, #192]	; (efdc <_sercom_get_async_baud_val+0x1b8>)
    ef1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ef20:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ef22:	47a0      	blx	r4
    ef24:	0003      	movs	r3, r0
    ef26:	000c      	movs	r4, r1
    ef28:	65bb      	str	r3, [r7, #88]	; 0x58
    ef2a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    ef2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ef2e:	623b      	str	r3, [r7, #32]
    ef30:	2300      	movs	r3, #0
    ef32:	627b      	str	r3, [r7, #36]	; 0x24
    ef34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ef36:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    ef38:	001a      	movs	r2, r3
    ef3a:	0023      	movs	r3, r4
    ef3c:	6a38      	ldr	r0, [r7, #32]
    ef3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ef40:	4c27      	ldr	r4, [pc, #156]	; (efe0 <_sercom_get_async_baud_val+0x1bc>)
    ef42:	47a0      	blx	r4
    ef44:	0003      	movs	r3, r0
    ef46:	000c      	movs	r4, r1
    ef48:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    ef4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    ef4c:	2380      	movs	r3, #128	; 0x80
    ef4e:	019b      	lsls	r3, r3, #6
    ef50:	429a      	cmp	r2, r3
    ef52:	d901      	bls.n	ef58 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ef54:	2340      	movs	r3, #64	; 0x40
    ef56:	e03d      	b.n	efd4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    ef58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ef5a:	61bb      	str	r3, [r7, #24]
    ef5c:	2300      	movs	r3, #0
    ef5e:	61fb      	str	r3, [r7, #28]
    ef60:	69b9      	ldr	r1, [r7, #24]
    ef62:	69fa      	ldr	r2, [r7, #28]
    ef64:	000b      	movs	r3, r1
    ef66:	0f5b      	lsrs	r3, r3, #29
    ef68:	0010      	movs	r0, r2
    ef6a:	00c0      	lsls	r0, r0, #3
    ef6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    ef6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    ef70:	4318      	orrs	r0, r3
    ef72:	63f8      	str	r0, [r7, #60]	; 0x3c
    ef74:	000b      	movs	r3, r1
    ef76:	00db      	lsls	r3, r3, #3
    ef78:	63bb      	str	r3, [r7, #56]	; 0x38
    ef7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ef7c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    ef7e:	001a      	movs	r2, r3
    ef80:	0023      	movs	r3, r4
    ef82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    ef84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    ef86:	4c16      	ldr	r4, [pc, #88]	; (efe0 <_sercom_get_async_baud_val+0x1bc>)
    ef88:	47a0      	blx	r4
    ef8a:	0003      	movs	r3, r0
    ef8c:	000c      	movs	r4, r1
    ef8e:	65bb      	str	r3, [r7, #88]	; 0x58
    ef90:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    ef92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ef94:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    ef96:	b2d9      	uxtb	r1, r3
    ef98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ef9a:	b2db      	uxtb	r3, r3
    ef9c:	00db      	lsls	r3, r3, #3
    ef9e:	b2da      	uxtb	r2, r3
    efa0:	2317      	movs	r3, #23
    efa2:	2040      	movs	r0, #64	; 0x40
    efa4:	4684      	mov	ip, r0
    efa6:	44bc      	add	ip, r7
    efa8:	4463      	add	r3, ip
    efaa:	1a8a      	subs	r2, r1, r2
    efac:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    efae:	2317      	movs	r3, #23
    efb0:	2240      	movs	r2, #64	; 0x40
    efb2:	4694      	mov	ip, r2
    efb4:	44bc      	add	ip, r7
    efb6:	4463      	add	r3, ip
    efb8:	781b      	ldrb	r3, [r3, #0]
    efba:	035b      	lsls	r3, r3, #13
    efbc:	001a      	movs	r2, r3
    efbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    efc0:	4313      	orrs	r3, r2
    efc2:	67bb      	str	r3, [r7, #120]	; 0x78
    efc4:	2300      	movs	r3, #0
    efc6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    efc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    efca:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    efcc:	b29a      	uxth	r2, r3
    efce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    efd0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    efd2:	2300      	movs	r3, #0
}
    efd4:	0018      	movs	r0, r3
    efd6:	46bd      	mov	sp, r7
    efd8:	b021      	add	sp, #132	; 0x84
    efda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efdc:	0001580d 	.word	0x0001580d
    efe0:	0000ecc7 	.word	0x0000ecc7

0000efe4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    efe4:	b580      	push	{r7, lr}
    efe6:	b084      	sub	sp, #16
    efe8:	af00      	add	r7, sp, #0
    efea:	0002      	movs	r2, r0
    efec:	1dfb      	adds	r3, r7, #7
    efee:	701a      	strb	r2, [r3, #0]
    eff0:	1dbb      	adds	r3, r7, #6
    eff2:	1c0a      	adds	r2, r1, #0
    eff4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    eff6:	4b1a      	ldr	r3, [pc, #104]	; (f060 <sercom_set_gclk_generator+0x7c>)
    eff8:	781b      	ldrb	r3, [r3, #0]
    effa:	2201      	movs	r2, #1
    effc:	4053      	eors	r3, r2
    effe:	b2db      	uxtb	r3, r3
    f000:	2b00      	cmp	r3, #0
    f002:	d103      	bne.n	f00c <sercom_set_gclk_generator+0x28>
    f004:	1dbb      	adds	r3, r7, #6
    f006:	781b      	ldrb	r3, [r3, #0]
    f008:	2b00      	cmp	r3, #0
    f00a:	d01b      	beq.n	f044 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    f00c:	230c      	movs	r3, #12
    f00e:	18fb      	adds	r3, r7, r3
    f010:	0018      	movs	r0, r3
    f012:	4b14      	ldr	r3, [pc, #80]	; (f064 <sercom_set_gclk_generator+0x80>)
    f014:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    f016:	230c      	movs	r3, #12
    f018:	18fb      	adds	r3, r7, r3
    f01a:	1dfa      	adds	r2, r7, #7
    f01c:	7812      	ldrb	r2, [r2, #0]
    f01e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    f020:	230c      	movs	r3, #12
    f022:	18fb      	adds	r3, r7, r3
    f024:	0019      	movs	r1, r3
    f026:	2013      	movs	r0, #19
    f028:	4b0f      	ldr	r3, [pc, #60]	; (f068 <sercom_set_gclk_generator+0x84>)
    f02a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    f02c:	2013      	movs	r0, #19
    f02e:	4b0f      	ldr	r3, [pc, #60]	; (f06c <sercom_set_gclk_generator+0x88>)
    f030:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    f032:	4b0b      	ldr	r3, [pc, #44]	; (f060 <sercom_set_gclk_generator+0x7c>)
    f034:	1dfa      	adds	r2, r7, #7
    f036:	7812      	ldrb	r2, [r2, #0]
    f038:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    f03a:	4b09      	ldr	r3, [pc, #36]	; (f060 <sercom_set_gclk_generator+0x7c>)
    f03c:	2201      	movs	r2, #1
    f03e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    f040:	2300      	movs	r3, #0
    f042:	e008      	b.n	f056 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    f044:	4b06      	ldr	r3, [pc, #24]	; (f060 <sercom_set_gclk_generator+0x7c>)
    f046:	785b      	ldrb	r3, [r3, #1]
    f048:	1dfa      	adds	r2, r7, #7
    f04a:	7812      	ldrb	r2, [r2, #0]
    f04c:	429a      	cmp	r2, r3
    f04e:	d101      	bne.n	f054 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    f050:	2300      	movs	r3, #0
    f052:	e000      	b.n	f056 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    f054:	231d      	movs	r3, #29
}
    f056:	0018      	movs	r0, r3
    f058:	46bd      	mov	sp, r7
    f05a:	b004      	add	sp, #16
    f05c:	bd80      	pop	{r7, pc}
    f05e:	46c0      	nop			; (mov r8, r8)
    f060:	20000264 	.word	0x20000264
    f064:	0000ecb1 	.word	0x0000ecb1
    f068:	00010e59 	.word	0x00010e59
    f06c:	00010e9d 	.word	0x00010e9d

0000f070 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    f070:	b580      	push	{r7, lr}
    f072:	b082      	sub	sp, #8
    f074:	af00      	add	r7, sp, #0
    f076:	6078      	str	r0, [r7, #4]
    f078:	000a      	movs	r2, r1
    f07a:	1cfb      	adds	r3, r7, #3
    f07c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    f07e:	687b      	ldr	r3, [r7, #4]
    f080:	4a4d      	ldr	r2, [pc, #308]	; (f1b8 <_sercom_get_default_pad+0x148>)
    f082:	4293      	cmp	r3, r2
    f084:	d03f      	beq.n	f106 <_sercom_get_default_pad+0x96>
    f086:	4a4c      	ldr	r2, [pc, #304]	; (f1b8 <_sercom_get_default_pad+0x148>)
    f088:	4293      	cmp	r3, r2
    f08a:	d806      	bhi.n	f09a <_sercom_get_default_pad+0x2a>
    f08c:	4a4b      	ldr	r2, [pc, #300]	; (f1bc <_sercom_get_default_pad+0x14c>)
    f08e:	4293      	cmp	r3, r2
    f090:	d00f      	beq.n	f0b2 <_sercom_get_default_pad+0x42>
    f092:	4a4b      	ldr	r2, [pc, #300]	; (f1c0 <_sercom_get_default_pad+0x150>)
    f094:	4293      	cmp	r3, r2
    f096:	d021      	beq.n	f0dc <_sercom_get_default_pad+0x6c>
    f098:	e089      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f09a:	4a4a      	ldr	r2, [pc, #296]	; (f1c4 <_sercom_get_default_pad+0x154>)
    f09c:	4293      	cmp	r3, r2
    f09e:	d100      	bne.n	f0a2 <_sercom_get_default_pad+0x32>
    f0a0:	e05b      	b.n	f15a <_sercom_get_default_pad+0xea>
    f0a2:	4a49      	ldr	r2, [pc, #292]	; (f1c8 <_sercom_get_default_pad+0x158>)
    f0a4:	4293      	cmp	r3, r2
    f0a6:	d100      	bne.n	f0aa <_sercom_get_default_pad+0x3a>
    f0a8:	e06c      	b.n	f184 <_sercom_get_default_pad+0x114>
    f0aa:	4a48      	ldr	r2, [pc, #288]	; (f1cc <_sercom_get_default_pad+0x15c>)
    f0ac:	4293      	cmp	r3, r2
    f0ae:	d03f      	beq.n	f130 <_sercom_get_default_pad+0xc0>
    f0b0:	e07d      	b.n	f1ae <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f0b2:	1cfb      	adds	r3, r7, #3
    f0b4:	781b      	ldrb	r3, [r3, #0]
    f0b6:	2b01      	cmp	r3, #1
    f0b8:	d00a      	beq.n	f0d0 <_sercom_get_default_pad+0x60>
    f0ba:	dc02      	bgt.n	f0c2 <_sercom_get_default_pad+0x52>
    f0bc:	2b00      	cmp	r3, #0
    f0be:	d005      	beq.n	f0cc <_sercom_get_default_pad+0x5c>
    f0c0:	e075      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f0c2:	2b02      	cmp	r3, #2
    f0c4:	d006      	beq.n	f0d4 <_sercom_get_default_pad+0x64>
    f0c6:	2b03      	cmp	r3, #3
    f0c8:	d006      	beq.n	f0d8 <_sercom_get_default_pad+0x68>
    f0ca:	e070      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f0cc:	4b40      	ldr	r3, [pc, #256]	; (f1d0 <_sercom_get_default_pad+0x160>)
    f0ce:	e06f      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f0d0:	4b40      	ldr	r3, [pc, #256]	; (f1d4 <_sercom_get_default_pad+0x164>)
    f0d2:	e06d      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f0d4:	4b40      	ldr	r3, [pc, #256]	; (f1d8 <_sercom_get_default_pad+0x168>)
    f0d6:	e06b      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f0d8:	4b40      	ldr	r3, [pc, #256]	; (f1dc <_sercom_get_default_pad+0x16c>)
    f0da:	e069      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f0dc:	1cfb      	adds	r3, r7, #3
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	2b01      	cmp	r3, #1
    f0e2:	d00a      	beq.n	f0fa <_sercom_get_default_pad+0x8a>
    f0e4:	dc02      	bgt.n	f0ec <_sercom_get_default_pad+0x7c>
    f0e6:	2b00      	cmp	r3, #0
    f0e8:	d005      	beq.n	f0f6 <_sercom_get_default_pad+0x86>
    f0ea:	e060      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f0ec:	2b02      	cmp	r3, #2
    f0ee:	d006      	beq.n	f0fe <_sercom_get_default_pad+0x8e>
    f0f0:	2b03      	cmp	r3, #3
    f0f2:	d006      	beq.n	f102 <_sercom_get_default_pad+0x92>
    f0f4:	e05b      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f0f6:	2303      	movs	r3, #3
    f0f8:	e05a      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f0fa:	4b39      	ldr	r3, [pc, #228]	; (f1e0 <_sercom_get_default_pad+0x170>)
    f0fc:	e058      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f0fe:	4b39      	ldr	r3, [pc, #228]	; (f1e4 <_sercom_get_default_pad+0x174>)
    f100:	e056      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f102:	4b39      	ldr	r3, [pc, #228]	; (f1e8 <_sercom_get_default_pad+0x178>)
    f104:	e054      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f106:	1cfb      	adds	r3, r7, #3
    f108:	781b      	ldrb	r3, [r3, #0]
    f10a:	2b01      	cmp	r3, #1
    f10c:	d00a      	beq.n	f124 <_sercom_get_default_pad+0xb4>
    f10e:	dc02      	bgt.n	f116 <_sercom_get_default_pad+0xa6>
    f110:	2b00      	cmp	r3, #0
    f112:	d005      	beq.n	f120 <_sercom_get_default_pad+0xb0>
    f114:	e04b      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f116:	2b02      	cmp	r3, #2
    f118:	d006      	beq.n	f128 <_sercom_get_default_pad+0xb8>
    f11a:	2b03      	cmp	r3, #3
    f11c:	d006      	beq.n	f12c <_sercom_get_default_pad+0xbc>
    f11e:	e046      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f120:	4b32      	ldr	r3, [pc, #200]	; (f1ec <_sercom_get_default_pad+0x17c>)
    f122:	e045      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f124:	4b32      	ldr	r3, [pc, #200]	; (f1f0 <_sercom_get_default_pad+0x180>)
    f126:	e043      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f128:	4b32      	ldr	r3, [pc, #200]	; (f1f4 <_sercom_get_default_pad+0x184>)
    f12a:	e041      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f12c:	4b32      	ldr	r3, [pc, #200]	; (f1f8 <_sercom_get_default_pad+0x188>)
    f12e:	e03f      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f130:	1cfb      	adds	r3, r7, #3
    f132:	781b      	ldrb	r3, [r3, #0]
    f134:	2b01      	cmp	r3, #1
    f136:	d00a      	beq.n	f14e <_sercom_get_default_pad+0xde>
    f138:	dc02      	bgt.n	f140 <_sercom_get_default_pad+0xd0>
    f13a:	2b00      	cmp	r3, #0
    f13c:	d005      	beq.n	f14a <_sercom_get_default_pad+0xda>
    f13e:	e036      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f140:	2b02      	cmp	r3, #2
    f142:	d006      	beq.n	f152 <_sercom_get_default_pad+0xe2>
    f144:	2b03      	cmp	r3, #3
    f146:	d006      	beq.n	f156 <_sercom_get_default_pad+0xe6>
    f148:	e031      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f14a:	4b2c      	ldr	r3, [pc, #176]	; (f1fc <_sercom_get_default_pad+0x18c>)
    f14c:	e030      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f14e:	4b2c      	ldr	r3, [pc, #176]	; (f200 <_sercom_get_default_pad+0x190>)
    f150:	e02e      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f152:	4b2c      	ldr	r3, [pc, #176]	; (f204 <_sercom_get_default_pad+0x194>)
    f154:	e02c      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f156:	4b2c      	ldr	r3, [pc, #176]	; (f208 <_sercom_get_default_pad+0x198>)
    f158:	e02a      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f15a:	1cfb      	adds	r3, r7, #3
    f15c:	781b      	ldrb	r3, [r3, #0]
    f15e:	2b01      	cmp	r3, #1
    f160:	d00a      	beq.n	f178 <_sercom_get_default_pad+0x108>
    f162:	dc02      	bgt.n	f16a <_sercom_get_default_pad+0xfa>
    f164:	2b00      	cmp	r3, #0
    f166:	d005      	beq.n	f174 <_sercom_get_default_pad+0x104>
    f168:	e021      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f16a:	2b02      	cmp	r3, #2
    f16c:	d006      	beq.n	f17c <_sercom_get_default_pad+0x10c>
    f16e:	2b03      	cmp	r3, #3
    f170:	d006      	beq.n	f180 <_sercom_get_default_pad+0x110>
    f172:	e01c      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f174:	4b25      	ldr	r3, [pc, #148]	; (f20c <_sercom_get_default_pad+0x19c>)
    f176:	e01b      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f178:	4b25      	ldr	r3, [pc, #148]	; (f210 <_sercom_get_default_pad+0x1a0>)
    f17a:	e019      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f17c:	4b25      	ldr	r3, [pc, #148]	; (f214 <_sercom_get_default_pad+0x1a4>)
    f17e:	e017      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f180:	4b25      	ldr	r3, [pc, #148]	; (f218 <_sercom_get_default_pad+0x1a8>)
    f182:	e015      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f184:	1cfb      	adds	r3, r7, #3
    f186:	781b      	ldrb	r3, [r3, #0]
    f188:	2b01      	cmp	r3, #1
    f18a:	d00a      	beq.n	f1a2 <_sercom_get_default_pad+0x132>
    f18c:	dc02      	bgt.n	f194 <_sercom_get_default_pad+0x124>
    f18e:	2b00      	cmp	r3, #0
    f190:	d005      	beq.n	f19e <_sercom_get_default_pad+0x12e>
    f192:	e00c      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f194:	2b02      	cmp	r3, #2
    f196:	d006      	beq.n	f1a6 <_sercom_get_default_pad+0x136>
    f198:	2b03      	cmp	r3, #3
    f19a:	d006      	beq.n	f1aa <_sercom_get_default_pad+0x13a>
    f19c:	e007      	b.n	f1ae <_sercom_get_default_pad+0x13e>
    f19e:	4b1f      	ldr	r3, [pc, #124]	; (f21c <_sercom_get_default_pad+0x1ac>)
    f1a0:	e006      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f1a2:	4b1f      	ldr	r3, [pc, #124]	; (f220 <_sercom_get_default_pad+0x1b0>)
    f1a4:	e004      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f1a6:	4b1f      	ldr	r3, [pc, #124]	; (f224 <_sercom_get_default_pad+0x1b4>)
    f1a8:	e002      	b.n	f1b0 <_sercom_get_default_pad+0x140>
    f1aa:	4b1f      	ldr	r3, [pc, #124]	; (f228 <_sercom_get_default_pad+0x1b8>)
    f1ac:	e000      	b.n	f1b0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    f1ae:	2300      	movs	r3, #0
}
    f1b0:	0018      	movs	r0, r3
    f1b2:	46bd      	mov	sp, r7
    f1b4:	b002      	add	sp, #8
    f1b6:	bd80      	pop	{r7, pc}
    f1b8:	42001000 	.word	0x42001000
    f1bc:	42000800 	.word	0x42000800
    f1c0:	42000c00 	.word	0x42000c00
    f1c4:	42001800 	.word	0x42001800
    f1c8:	42001c00 	.word	0x42001c00
    f1cc:	42001400 	.word	0x42001400
    f1d0:	00040003 	.word	0x00040003
    f1d4:	00050003 	.word	0x00050003
    f1d8:	00060003 	.word	0x00060003
    f1dc:	00070003 	.word	0x00070003
    f1e0:	00010003 	.word	0x00010003
    f1e4:	001e0003 	.word	0x001e0003
    f1e8:	001f0003 	.word	0x001f0003
    f1ec:	00080003 	.word	0x00080003
    f1f0:	00090003 	.word	0x00090003
    f1f4:	000a0003 	.word	0x000a0003
    f1f8:	000b0003 	.word	0x000b0003
    f1fc:	00100003 	.word	0x00100003
    f200:	00110003 	.word	0x00110003
    f204:	00120003 	.word	0x00120003
    f208:	00130003 	.word	0x00130003
    f20c:	000c0003 	.word	0x000c0003
    f210:	000d0003 	.word	0x000d0003
    f214:	000e0003 	.word	0x000e0003
    f218:	000f0003 	.word	0x000f0003
    f21c:	00160003 	.word	0x00160003
    f220:	00170003 	.word	0x00170003
    f224:	00180003 	.word	0x00180003
    f228:	00190003 	.word	0x00190003

0000f22c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    f22c:	b590      	push	{r4, r7, lr}
    f22e:	b08b      	sub	sp, #44	; 0x2c
    f230:	af00      	add	r7, sp, #0
    f232:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    f234:	230c      	movs	r3, #12
    f236:	18fb      	adds	r3, r7, r3
    f238:	4a0f      	ldr	r2, [pc, #60]	; (f278 <_sercom_get_sercom_inst_index+0x4c>)
    f23a:	ca13      	ldmia	r2!, {r0, r1, r4}
    f23c:	c313      	stmia	r3!, {r0, r1, r4}
    f23e:	ca13      	ldmia	r2!, {r0, r1, r4}
    f240:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f242:	2300      	movs	r3, #0
    f244:	627b      	str	r3, [r7, #36]	; 0x24
    f246:	e00e      	b.n	f266 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    f248:	230c      	movs	r3, #12
    f24a:	18fb      	adds	r3, r7, r3
    f24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f24e:	0092      	lsls	r2, r2, #2
    f250:	58d3      	ldr	r3, [r2, r3]
    f252:	001a      	movs	r2, r3
    f254:	687b      	ldr	r3, [r7, #4]
    f256:	429a      	cmp	r2, r3
    f258:	d102      	bne.n	f260 <_sercom_get_sercom_inst_index+0x34>
			return i;
    f25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f25c:	b2db      	uxtb	r3, r3
    f25e:	e006      	b.n	f26e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f262:	3301      	adds	r3, #1
    f264:	627b      	str	r3, [r7, #36]	; 0x24
    f266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f268:	2b05      	cmp	r3, #5
    f26a:	d9ed      	bls.n	f248 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    f26c:	2300      	movs	r3, #0
}
    f26e:	0018      	movs	r0, r3
    f270:	46bd      	mov	sp, r7
    f272:	b00b      	add	sp, #44	; 0x2c
    f274:	bd90      	pop	{r4, r7, pc}
    f276:	46c0      	nop			; (mov r8, r8)
    f278:	00019e8c 	.word	0x00019e8c

0000f27c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    f27c:	b580      	push	{r7, lr}
    f27e:	b086      	sub	sp, #24
    f280:	af00      	add	r7, sp, #0
    f282:	60f8      	str	r0, [r7, #12]
    f284:	60b9      	str	r1, [r7, #8]
    f286:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    f288:	2300      	movs	r3, #0
    f28a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    f28c:	68fb      	ldr	r3, [r7, #12]
    f28e:	2b00      	cmp	r3, #0
    f290:	d012      	beq.n	f2b8 <_read+0x3c>
		return -1;
    f292:	2301      	movs	r3, #1
    f294:	425b      	negs	r3, r3
    f296:	e013      	b.n	f2c0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    f298:	4b0b      	ldr	r3, [pc, #44]	; (f2c8 <_read+0x4c>)
    f29a:	681a      	ldr	r2, [r3, #0]
    f29c:	4b0b      	ldr	r3, [pc, #44]	; (f2cc <_read+0x50>)
    f29e:	681b      	ldr	r3, [r3, #0]
    f2a0:	68b9      	ldr	r1, [r7, #8]
    f2a2:	0018      	movs	r0, r3
    f2a4:	4790      	blx	r2
		ptr++;
    f2a6:	68bb      	ldr	r3, [r7, #8]
    f2a8:	3301      	adds	r3, #1
    f2aa:	60bb      	str	r3, [r7, #8]
		nChars++;
    f2ac:	697b      	ldr	r3, [r7, #20]
    f2ae:	3301      	adds	r3, #1
    f2b0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    f2b2:	687b      	ldr	r3, [r7, #4]
    f2b4:	3b01      	subs	r3, #1
    f2b6:	607b      	str	r3, [r7, #4]
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	2b00      	cmp	r3, #0
    f2bc:	dcec      	bgt.n	f298 <_read+0x1c>
	}
	return nChars;
    f2be:	697b      	ldr	r3, [r7, #20]
}
    f2c0:	0018      	movs	r0, r3
    f2c2:	46bd      	mov	sp, r7
    f2c4:	b006      	add	sp, #24
    f2c6:	bd80      	pop	{r7, pc}
    f2c8:	200008f8 	.word	0x200008f8
    f2cc:	20000900 	.word	0x20000900

0000f2d0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    f2d0:	b580      	push	{r7, lr}
    f2d2:	b086      	sub	sp, #24
    f2d4:	af00      	add	r7, sp, #0
    f2d6:	60f8      	str	r0, [r7, #12]
    f2d8:	60b9      	str	r1, [r7, #8]
    f2da:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    f2dc:	2300      	movs	r3, #0
    f2de:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    f2e0:	68fb      	ldr	r3, [r7, #12]
    f2e2:	2b01      	cmp	r3, #1
    f2e4:	d01d      	beq.n	f322 <_write+0x52>
    f2e6:	68fb      	ldr	r3, [r7, #12]
    f2e8:	2b02      	cmp	r3, #2
    f2ea:	d01a      	beq.n	f322 <_write+0x52>
    f2ec:	68fb      	ldr	r3, [r7, #12]
    f2ee:	2b03      	cmp	r3, #3
    f2f0:	d017      	beq.n	f322 <_write+0x52>
		return -1;
    f2f2:	2301      	movs	r3, #1
    f2f4:	425b      	negs	r3, r3
    f2f6:	e018      	b.n	f32a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    f2f8:	4b0e      	ldr	r3, [pc, #56]	; (f334 <_write+0x64>)
    f2fa:	681a      	ldr	r2, [r3, #0]
    f2fc:	4b0e      	ldr	r3, [pc, #56]	; (f338 <_write+0x68>)
    f2fe:	6818      	ldr	r0, [r3, #0]
    f300:	68bb      	ldr	r3, [r7, #8]
    f302:	1c59      	adds	r1, r3, #1
    f304:	60b9      	str	r1, [r7, #8]
    f306:	781b      	ldrb	r3, [r3, #0]
    f308:	0019      	movs	r1, r3
    f30a:	4790      	blx	r2
    f30c:	1e03      	subs	r3, r0, #0
    f30e:	da02      	bge.n	f316 <_write+0x46>
			return -1;
    f310:	2301      	movs	r3, #1
    f312:	425b      	negs	r3, r3
    f314:	e009      	b.n	f32a <_write+0x5a>
		}
		++nChars;
    f316:	697b      	ldr	r3, [r7, #20]
    f318:	3301      	adds	r3, #1
    f31a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    f31c:	687b      	ldr	r3, [r7, #4]
    f31e:	3b01      	subs	r3, #1
    f320:	607b      	str	r3, [r7, #4]
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	2b00      	cmp	r3, #0
    f326:	d1e7      	bne.n	f2f8 <_write+0x28>
	}
	return nChars;
    f328:	697b      	ldr	r3, [r7, #20]
}
    f32a:	0018      	movs	r0, r3
    f32c:	46bd      	mov	sp, r7
    f32e:	b006      	add	sp, #24
    f330:	bd80      	pop	{r7, pc}
    f332:	46c0      	nop			; (mov r8, r8)
    f334:	200008fc 	.word	0x200008fc
    f338:	20000900 	.word	0x20000900

0000f33c <system_gclk_chan_get_config_defaults>:
{
    f33c:	b580      	push	{r7, lr}
    f33e:	b082      	sub	sp, #8
    f340:	af00      	add	r7, sp, #0
    f342:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    f344:	687b      	ldr	r3, [r7, #4]
    f346:	2200      	movs	r2, #0
    f348:	701a      	strb	r2, [r3, #0]
}
    f34a:	46c0      	nop			; (mov r8, r8)
    f34c:	46bd      	mov	sp, r7
    f34e:	b002      	add	sp, #8
    f350:	bd80      	pop	{r7, pc}
	...

0000f354 <system_apb_clock_set_mask>:
{
    f354:	b580      	push	{r7, lr}
    f356:	b082      	sub	sp, #8
    f358:	af00      	add	r7, sp, #0
    f35a:	0002      	movs	r2, r0
    f35c:	6039      	str	r1, [r7, #0]
    f35e:	1dfb      	adds	r3, r7, #7
    f360:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    f362:	1dfb      	adds	r3, r7, #7
    f364:	781b      	ldrb	r3, [r3, #0]
    f366:	2b01      	cmp	r3, #1
    f368:	d00a      	beq.n	f380 <system_apb_clock_set_mask+0x2c>
    f36a:	2b02      	cmp	r3, #2
    f36c:	d00f      	beq.n	f38e <system_apb_clock_set_mask+0x3a>
    f36e:	2b00      	cmp	r3, #0
    f370:	d114      	bne.n	f39c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    f372:	4b0e      	ldr	r3, [pc, #56]	; (f3ac <system_apb_clock_set_mask+0x58>)
    f374:	4a0d      	ldr	r2, [pc, #52]	; (f3ac <system_apb_clock_set_mask+0x58>)
    f376:	6991      	ldr	r1, [r2, #24]
    f378:	683a      	ldr	r2, [r7, #0]
    f37a:	430a      	orrs	r2, r1
    f37c:	619a      	str	r2, [r3, #24]
			break;
    f37e:	e00f      	b.n	f3a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    f380:	4b0a      	ldr	r3, [pc, #40]	; (f3ac <system_apb_clock_set_mask+0x58>)
    f382:	4a0a      	ldr	r2, [pc, #40]	; (f3ac <system_apb_clock_set_mask+0x58>)
    f384:	69d1      	ldr	r1, [r2, #28]
    f386:	683a      	ldr	r2, [r7, #0]
    f388:	430a      	orrs	r2, r1
    f38a:	61da      	str	r2, [r3, #28]
			break;
    f38c:	e008      	b.n	f3a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    f38e:	4b07      	ldr	r3, [pc, #28]	; (f3ac <system_apb_clock_set_mask+0x58>)
    f390:	4a06      	ldr	r2, [pc, #24]	; (f3ac <system_apb_clock_set_mask+0x58>)
    f392:	6a11      	ldr	r1, [r2, #32]
    f394:	683a      	ldr	r2, [r7, #0]
    f396:	430a      	orrs	r2, r1
    f398:	621a      	str	r2, [r3, #32]
			break;
    f39a:	e001      	b.n	f3a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    f39c:	2317      	movs	r3, #23
    f39e:	e000      	b.n	f3a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    f3a0:	2300      	movs	r3, #0
}
    f3a2:	0018      	movs	r0, r3
    f3a4:	46bd      	mov	sp, r7
    f3a6:	b002      	add	sp, #8
    f3a8:	bd80      	pop	{r7, pc}
    f3aa:	46c0      	nop			; (mov r8, r8)
    f3ac:	40000400 	.word	0x40000400

0000f3b0 <system_pinmux_get_config_defaults>:
{
    f3b0:	b580      	push	{r7, lr}
    f3b2:	b082      	sub	sp, #8
    f3b4:	af00      	add	r7, sp, #0
    f3b6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    f3b8:	687b      	ldr	r3, [r7, #4]
    f3ba:	2280      	movs	r2, #128	; 0x80
    f3bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f3be:	687b      	ldr	r3, [r7, #4]
    f3c0:	2200      	movs	r2, #0
    f3c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    f3c4:	687b      	ldr	r3, [r7, #4]
    f3c6:	2201      	movs	r2, #1
    f3c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    f3ca:	687b      	ldr	r3, [r7, #4]
    f3cc:	2200      	movs	r2, #0
    f3ce:	70da      	strb	r2, [r3, #3]
}
    f3d0:	46c0      	nop			; (mov r8, r8)
    f3d2:	46bd      	mov	sp, r7
    f3d4:	b002      	add	sp, #8
    f3d6:	bd80      	pop	{r7, pc}

0000f3d8 <system_is_debugger_present>:
{
    f3d8:	b580      	push	{r7, lr}
    f3da:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    f3dc:	4b05      	ldr	r3, [pc, #20]	; (f3f4 <system_is_debugger_present+0x1c>)
    f3de:	789b      	ldrb	r3, [r3, #2]
    f3e0:	b2db      	uxtb	r3, r3
    f3e2:	001a      	movs	r2, r3
    f3e4:	2302      	movs	r3, #2
    f3e6:	4013      	ands	r3, r2
    f3e8:	1e5a      	subs	r2, r3, #1
    f3ea:	4193      	sbcs	r3, r2
    f3ec:	b2db      	uxtb	r3, r3
}
    f3ee:	0018      	movs	r0, r3
    f3f0:	46bd      	mov	sp, r7
    f3f2:	bd80      	pop	{r7, pc}
    f3f4:	41002000 	.word	0x41002000

0000f3f8 <usart_is_syncing>:
{
    f3f8:	b580      	push	{r7, lr}
    f3fa:	b084      	sub	sp, #16
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    f400:	687b      	ldr	r3, [r7, #4]
    f402:	681b      	ldr	r3, [r3, #0]
    f404:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    f406:	68fb      	ldr	r3, [r7, #12]
    f408:	69db      	ldr	r3, [r3, #28]
    f40a:	1e5a      	subs	r2, r3, #1
    f40c:	4193      	sbcs	r3, r2
    f40e:	b2db      	uxtb	r3, r3
}
    f410:	0018      	movs	r0, r3
    f412:	46bd      	mov	sp, r7
    f414:	b004      	add	sp, #16
    f416:	bd80      	pop	{r7, pc}

0000f418 <_usart_wait_for_sync>:
{
    f418:	b580      	push	{r7, lr}
    f41a:	b082      	sub	sp, #8
    f41c:	af00      	add	r7, sp, #0
    f41e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    f420:	46c0      	nop			; (mov r8, r8)
    f422:	687b      	ldr	r3, [r7, #4]
    f424:	0018      	movs	r0, r3
    f426:	4b04      	ldr	r3, [pc, #16]	; (f438 <_usart_wait_for_sync+0x20>)
    f428:	4798      	blx	r3
    f42a:	1e03      	subs	r3, r0, #0
    f42c:	d1f9      	bne.n	f422 <_usart_wait_for_sync+0xa>
}
    f42e:	46c0      	nop			; (mov r8, r8)
    f430:	46bd      	mov	sp, r7
    f432:	b002      	add	sp, #8
    f434:	bd80      	pop	{r7, pc}
    f436:	46c0      	nop			; (mov r8, r8)
    f438:	0000f3f9 	.word	0x0000f3f9

0000f43c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    f43c:	b5b0      	push	{r4, r5, r7, lr}
    f43e:	b08c      	sub	sp, #48	; 0x30
    f440:	af02      	add	r7, sp, #8
    f442:	6078      	str	r0, [r7, #4]
    f444:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	681b      	ldr	r3, [r3, #0]
    f44a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f44c:	687b      	ldr	r3, [r7, #4]
    f44e:	681b      	ldr	r3, [r3, #0]
    f450:	0018      	movs	r0, r3
    f452:	4bab      	ldr	r3, [pc, #684]	; (f700 <_usart_set_config+0x2c4>)
    f454:	4798      	blx	r3
    f456:	0003      	movs	r3, r0
    f458:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f45a:	697b      	ldr	r3, [r7, #20]
    f45c:	3314      	adds	r3, #20
    f45e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    f460:	2300      	movs	r3, #0
    f462:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    f464:	2300      	movs	r3, #0
    f466:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    f468:	230a      	movs	r3, #10
    f46a:	18fb      	adds	r3, r7, r3
    f46c:	2200      	movs	r2, #0
    f46e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f470:	231f      	movs	r3, #31
    f472:	18fb      	adds	r3, r7, r3
    f474:	2200      	movs	r2, #0
    f476:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    f478:	231e      	movs	r3, #30
    f47a:	18fb      	adds	r3, r7, r3
    f47c:	2210      	movs	r2, #16
    f47e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    f480:	683b      	ldr	r3, [r7, #0]
    f482:	8a1b      	ldrh	r3, [r3, #16]
    f484:	2280      	movs	r2, #128	; 0x80
    f486:	01d2      	lsls	r2, r2, #7
    f488:	4293      	cmp	r3, r2
    f48a:	d01c      	beq.n	f4c6 <_usart_set_config+0x8a>
    f48c:	2280      	movs	r2, #128	; 0x80
    f48e:	01d2      	lsls	r2, r2, #7
    f490:	4293      	cmp	r3, r2
    f492:	dc06      	bgt.n	f4a2 <_usart_set_config+0x66>
    f494:	2b00      	cmp	r3, #0
    f496:	d00d      	beq.n	f4b4 <_usart_set_config+0x78>
    f498:	2280      	movs	r2, #128	; 0x80
    f49a:	0192      	lsls	r2, r2, #6
    f49c:	4293      	cmp	r3, r2
    f49e:	d024      	beq.n	f4ea <_usart_set_config+0xae>
    f4a0:	e035      	b.n	f50e <_usart_set_config+0xd2>
    f4a2:	22c0      	movs	r2, #192	; 0xc0
    f4a4:	01d2      	lsls	r2, r2, #7
    f4a6:	4293      	cmp	r3, r2
    f4a8:	d028      	beq.n	f4fc <_usart_set_config+0xc0>
    f4aa:	2280      	movs	r2, #128	; 0x80
    f4ac:	0212      	lsls	r2, r2, #8
    f4ae:	4293      	cmp	r3, r2
    f4b0:	d012      	beq.n	f4d8 <_usart_set_config+0x9c>
    f4b2:	e02c      	b.n	f50e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f4b4:	231f      	movs	r3, #31
    f4b6:	18fb      	adds	r3, r7, r3
    f4b8:	2200      	movs	r2, #0
    f4ba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    f4bc:	231e      	movs	r3, #30
    f4be:	18fb      	adds	r3, r7, r3
    f4c0:	2210      	movs	r2, #16
    f4c2:	701a      	strb	r2, [r3, #0]
			break;
    f4c4:	e023      	b.n	f50e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f4c6:	231f      	movs	r3, #31
    f4c8:	18fb      	adds	r3, r7, r3
    f4ca:	2200      	movs	r2, #0
    f4cc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    f4ce:	231e      	movs	r3, #30
    f4d0:	18fb      	adds	r3, r7, r3
    f4d2:	2208      	movs	r2, #8
    f4d4:	701a      	strb	r2, [r3, #0]
			break;
    f4d6:	e01a      	b.n	f50e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f4d8:	231f      	movs	r3, #31
    f4da:	18fb      	adds	r3, r7, r3
    f4dc:	2200      	movs	r2, #0
    f4de:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    f4e0:	231e      	movs	r3, #30
    f4e2:	18fb      	adds	r3, r7, r3
    f4e4:	2203      	movs	r2, #3
    f4e6:	701a      	strb	r2, [r3, #0]
			break;
    f4e8:	e011      	b.n	f50e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    f4ea:	231f      	movs	r3, #31
    f4ec:	18fb      	adds	r3, r7, r3
    f4ee:	2201      	movs	r2, #1
    f4f0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    f4f2:	231e      	movs	r3, #30
    f4f4:	18fb      	adds	r3, r7, r3
    f4f6:	2210      	movs	r2, #16
    f4f8:	701a      	strb	r2, [r3, #0]
			break;
    f4fa:	e008      	b.n	f50e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    f4fc:	231f      	movs	r3, #31
    f4fe:	18fb      	adds	r3, r7, r3
    f500:	2201      	movs	r2, #1
    f502:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    f504:	231e      	movs	r3, #30
    f506:	18fb      	adds	r3, r7, r3
    f508:	2208      	movs	r2, #8
    f50a:	701a      	strb	r2, [r3, #0]
			break;
    f50c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    f50e:	683b      	ldr	r3, [r7, #0]
    f510:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    f512:	683b      	ldr	r3, [r7, #0]
    f514:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    f516:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    f518:	683b      	ldr	r3, [r7, #0]
    f51a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    f51c:	4313      	orrs	r3, r2
		config->sample_rate |
    f51e:	683a      	ldr	r2, [r7, #0]
    f520:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    f522:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    f524:	683a      	ldr	r2, [r7, #0]
    f526:	7e12      	ldrb	r2, [r2, #24]
    f528:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    f52a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    f52c:	683a      	ldr	r2, [r7, #0]
    f52e:	2126      	movs	r1, #38	; 0x26
    f530:	5c52      	ldrb	r2, [r2, r1]
    f532:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    f534:	4313      	orrs	r3, r2
    f536:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    f538:	231d      	movs	r3, #29
    f53a:	18fb      	adds	r3, r7, r3
    f53c:	2200      	movs	r2, #0
    f53e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    f540:	683b      	ldr	r3, [r7, #0]
    f542:	685b      	ldr	r3, [r3, #4]
    f544:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    f546:	68fb      	ldr	r3, [r7, #12]
    f548:	2b00      	cmp	r3, #0
    f54a:	d01e      	beq.n	f58a <_usart_set_config+0x14e>
    f54c:	2280      	movs	r2, #128	; 0x80
    f54e:	0552      	lsls	r2, r2, #21
    f550:	4293      	cmp	r3, r2
    f552:	d14f      	bne.n	f5f4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    f554:	683b      	ldr	r3, [r7, #0]
    f556:	2227      	movs	r2, #39	; 0x27
    f558:	5c9b      	ldrb	r3, [r3, r2]
    f55a:	2201      	movs	r2, #1
    f55c:	4053      	eors	r3, r2
    f55e:	b2db      	uxtb	r3, r3
    f560:	2b00      	cmp	r3, #0
    f562:	d046      	beq.n	f5f2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    f564:	683b      	ldr	r3, [r7, #0]
    f566:	6a1d      	ldr	r5, [r3, #32]
    f568:	693b      	ldr	r3, [r7, #16]
    f56a:	b2db      	uxtb	r3, r3
    f56c:	0018      	movs	r0, r3
    f56e:	4b65      	ldr	r3, [pc, #404]	; (f704 <_usart_set_config+0x2c8>)
    f570:	4798      	blx	r3
    f572:	0001      	movs	r1, r0
    f574:	231d      	movs	r3, #29
    f576:	18fc      	adds	r4, r7, r3
    f578:	230a      	movs	r3, #10
    f57a:	18fb      	adds	r3, r7, r3
    f57c:	001a      	movs	r2, r3
    f57e:	0028      	movs	r0, r5
    f580:	4b61      	ldr	r3, [pc, #388]	; (f708 <_usart_set_config+0x2cc>)
    f582:	4798      	blx	r3
    f584:	0003      	movs	r3, r0
    f586:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    f588:	e033      	b.n	f5f2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    f58a:	683b      	ldr	r3, [r7, #0]
    f58c:	2227      	movs	r2, #39	; 0x27
    f58e:	5c9b      	ldrb	r3, [r3, r2]
    f590:	2b00      	cmp	r3, #0
    f592:	d014      	beq.n	f5be <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    f594:	683b      	ldr	r3, [r7, #0]
    f596:	6a18      	ldr	r0, [r3, #32]
    f598:	683b      	ldr	r3, [r7, #0]
    f59a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    f59c:	231d      	movs	r3, #29
    f59e:	18fc      	adds	r4, r7, r3
    f5a0:	231f      	movs	r3, #31
    f5a2:	18fb      	adds	r3, r7, r3
    f5a4:	781d      	ldrb	r5, [r3, #0]
    f5a6:	230a      	movs	r3, #10
    f5a8:	18fa      	adds	r2, r7, r3
    f5aa:	231e      	movs	r3, #30
    f5ac:	18fb      	adds	r3, r7, r3
    f5ae:	781b      	ldrb	r3, [r3, #0]
    f5b0:	9300      	str	r3, [sp, #0]
    f5b2:	002b      	movs	r3, r5
    f5b4:	4d55      	ldr	r5, [pc, #340]	; (f70c <_usart_set_config+0x2d0>)
    f5b6:	47a8      	blx	r5
    f5b8:	0003      	movs	r3, r0
    f5ba:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    f5bc:	e01a      	b.n	f5f4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    f5be:	683b      	ldr	r3, [r7, #0]
    f5c0:	6a1d      	ldr	r5, [r3, #32]
    f5c2:	693b      	ldr	r3, [r7, #16]
    f5c4:	b2db      	uxtb	r3, r3
    f5c6:	0018      	movs	r0, r3
    f5c8:	4b4e      	ldr	r3, [pc, #312]	; (f704 <_usart_set_config+0x2c8>)
    f5ca:	4798      	blx	r3
				status_code =
    f5cc:	231d      	movs	r3, #29
    f5ce:	18fc      	adds	r4, r7, r3
    f5d0:	231f      	movs	r3, #31
    f5d2:	18fb      	adds	r3, r7, r3
    f5d4:	7819      	ldrb	r1, [r3, #0]
    f5d6:	230a      	movs	r3, #10
    f5d8:	18fa      	adds	r2, r7, r3
    f5da:	231e      	movs	r3, #30
    f5dc:	18fb      	adds	r3, r7, r3
    f5de:	781b      	ldrb	r3, [r3, #0]
    f5e0:	9300      	str	r3, [sp, #0]
    f5e2:	000b      	movs	r3, r1
    f5e4:	0001      	movs	r1, r0
    f5e6:	0028      	movs	r0, r5
    f5e8:	4d48      	ldr	r5, [pc, #288]	; (f70c <_usart_set_config+0x2d0>)
    f5ea:	47a8      	blx	r5
    f5ec:	0003      	movs	r3, r0
    f5ee:	7023      	strb	r3, [r4, #0]
			break;
    f5f0:	e000      	b.n	f5f4 <_usart_set_config+0x1b8>
			break;
    f5f2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    f5f4:	231d      	movs	r3, #29
    f5f6:	18fb      	adds	r3, r7, r3
    f5f8:	781b      	ldrb	r3, [r3, #0]
    f5fa:	2b00      	cmp	r3, #0
    f5fc:	d003      	beq.n	f606 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    f5fe:	231d      	movs	r3, #29
    f600:	18fb      	adds	r3, r7, r3
    f602:	781b      	ldrb	r3, [r3, #0]
    f604:	e077      	b.n	f6f6 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    f606:	683b      	ldr	r3, [r7, #0]
    f608:	7e5b      	ldrb	r3, [r3, #25]
    f60a:	2b00      	cmp	r3, #0
    f60c:	d003      	beq.n	f616 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    f60e:	683b      	ldr	r3, [r7, #0]
    f610:	7e9a      	ldrb	r2, [r3, #26]
    f612:	69bb      	ldr	r3, [r7, #24]
    f614:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    f616:	687b      	ldr	r3, [r7, #4]
    f618:	0018      	movs	r0, r3
    f61a:	4b3d      	ldr	r3, [pc, #244]	; (f710 <_usart_set_config+0x2d4>)
    f61c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    f61e:	230a      	movs	r3, #10
    f620:	18fb      	adds	r3, r7, r3
    f622:	881a      	ldrh	r2, [r3, #0]
    f624:	69bb      	ldr	r3, [r7, #24]
    f626:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    f628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f62a:	68fb      	ldr	r3, [r7, #12]
    f62c:	4313      	orrs	r3, r2
    f62e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    f630:	683b      	ldr	r3, [r7, #0]
    f632:	2227      	movs	r2, #39	; 0x27
    f634:	5c9b      	ldrb	r3, [r3, r2]
    f636:	2201      	movs	r2, #1
    f638:	4053      	eors	r3, r2
    f63a:	b2db      	uxtb	r3, r3
    f63c:	2b00      	cmp	r3, #0
    f63e:	d003      	beq.n	f648 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    f640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f642:	2204      	movs	r2, #4
    f644:	4313      	orrs	r3, r2
    f646:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    f648:	683b      	ldr	r3, [r7, #0]
    f64a:	7e5b      	ldrb	r3, [r3, #25]
    f64c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    f64e:	683b      	ldr	r3, [r7, #0]
    f650:	7f1b      	ldrb	r3, [r3, #28]
    f652:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    f654:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    f656:	683b      	ldr	r3, [r7, #0]
    f658:	7f5b      	ldrb	r3, [r3, #29]
    f65a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    f65c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    f65e:	683b      	ldr	r3, [r7, #0]
    f660:	2124      	movs	r1, #36	; 0x24
    f662:	5c5b      	ldrb	r3, [r3, r1]
    f664:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    f666:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    f668:	683b      	ldr	r3, [r7, #0]
    f66a:	2125      	movs	r1, #37	; 0x25
    f66c:	5c5b      	ldrb	r3, [r3, r1]
    f66e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    f670:	4313      	orrs	r3, r2
	ctrlb =  
    f672:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    f674:	683b      	ldr	r3, [r7, #0]
    f676:	7a9b      	ldrb	r3, [r3, #10]
    f678:	001a      	movs	r2, r3
    f67a:	6a3b      	ldr	r3, [r7, #32]
    f67c:	4313      	orrs	r3, r2
    f67e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    f680:	683b      	ldr	r3, [r7, #0]
    f682:	7adb      	ldrb	r3, [r3, #11]
    f684:	001a      	movs	r2, r3
    f686:	6a3b      	ldr	r3, [r7, #32]
    f688:	4313      	orrs	r3, r2
    f68a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    f68c:	683b      	ldr	r3, [r7, #0]
    f68e:	891b      	ldrh	r3, [r3, #8]
    f690:	2bff      	cmp	r3, #255	; 0xff
    f692:	d00b      	beq.n	f6ac <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    f694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f696:	2280      	movs	r2, #128	; 0x80
    f698:	0452      	lsls	r2, r2, #17
    f69a:	4313      	orrs	r3, r2
    f69c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    f69e:	683b      	ldr	r3, [r7, #0]
    f6a0:	891b      	ldrh	r3, [r3, #8]
    f6a2:	001a      	movs	r2, r3
    f6a4:	6a3b      	ldr	r3, [r7, #32]
    f6a6:	4313      	orrs	r3, r2
    f6a8:	623b      	str	r3, [r7, #32]
    f6aa:	e008      	b.n	f6be <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    f6ac:	683b      	ldr	r3, [r7, #0]
    f6ae:	7edb      	ldrb	r3, [r3, #27]
    f6b0:	2b00      	cmp	r3, #0
    f6b2:	d004      	beq.n	f6be <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    f6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f6b6:	2280      	movs	r2, #128	; 0x80
    f6b8:	04d2      	lsls	r2, r2, #19
    f6ba:	4313      	orrs	r3, r2
    f6bc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    f6be:	683b      	ldr	r3, [r7, #0]
    f6c0:	222c      	movs	r2, #44	; 0x2c
    f6c2:	5c9b      	ldrb	r3, [r3, r2]
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	d103      	bne.n	f6d0 <_usart_set_config+0x294>
    f6c8:	4b12      	ldr	r3, [pc, #72]	; (f714 <_usart_set_config+0x2d8>)
    f6ca:	4798      	blx	r3
    f6cc:	1e03      	subs	r3, r0, #0
    f6ce:	d003      	beq.n	f6d8 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    f6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f6d2:	2280      	movs	r2, #128	; 0x80
    f6d4:	4313      	orrs	r3, r2
    f6d6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    f6d8:	687b      	ldr	r3, [r7, #4]
    f6da:	0018      	movs	r0, r3
    f6dc:	4b0c      	ldr	r3, [pc, #48]	; (f710 <_usart_set_config+0x2d4>)
    f6de:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    f6e0:	69bb      	ldr	r3, [r7, #24]
    f6e2:	6a3a      	ldr	r2, [r7, #32]
    f6e4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    f6e6:	687b      	ldr	r3, [r7, #4]
    f6e8:	0018      	movs	r0, r3
    f6ea:	4b09      	ldr	r3, [pc, #36]	; (f710 <_usart_set_config+0x2d4>)
    f6ec:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    f6ee:	69bb      	ldr	r3, [r7, #24]
    f6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f6f2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    f6f4:	2300      	movs	r3, #0
}
    f6f6:	0018      	movs	r0, r3
    f6f8:	46bd      	mov	sp, r7
    f6fa:	b00a      	add	sp, #40	; 0x28
    f6fc:	bdb0      	pop	{r4, r5, r7, pc}
    f6fe:	46c0      	nop			; (mov r8, r8)
    f700:	0000f22d 	.word	0x0000f22d
    f704:	00010f7d 	.word	0x00010f7d
    f708:	0000eda7 	.word	0x0000eda7
    f70c:	0000ee25 	.word	0x0000ee25
    f710:	0000f419 	.word	0x0000f419
    f714:	0000f3d9 	.word	0x0000f3d9

0000f718 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    f718:	b590      	push	{r4, r7, lr}
    f71a:	b093      	sub	sp, #76	; 0x4c
    f71c:	af00      	add	r7, sp, #0
    f71e:	60f8      	str	r0, [r7, #12]
    f720:	60b9      	str	r1, [r7, #8]
    f722:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    f724:	233b      	movs	r3, #59	; 0x3b
    f726:	18fb      	adds	r3, r7, r3
    f728:	2200      	movs	r2, #0
    f72a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    f72c:	68fb      	ldr	r3, [r7, #12]
    f72e:	68ba      	ldr	r2, [r7, #8]
    f730:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f732:	68fb      	ldr	r3, [r7, #12]
    f734:	681b      	ldr	r3, [r3, #0]
    f736:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f738:	68fb      	ldr	r3, [r7, #12]
    f73a:	681b      	ldr	r3, [r3, #0]
    f73c:	0018      	movs	r0, r3
    f73e:	4b86      	ldr	r3, [pc, #536]	; (f958 <usart_init+0x240>)
    f740:	4798      	blx	r3
    f742:	0003      	movs	r3, r0
    f744:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    f746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f748:	3302      	adds	r3, #2
    f74a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f74e:	3314      	adds	r3, #20
    f750:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    f752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f754:	681b      	ldr	r3, [r3, #0]
    f756:	2201      	movs	r2, #1
    f758:	4013      	ands	r3, r2
    f75a:	d001      	beq.n	f760 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    f75c:	2305      	movs	r3, #5
    f75e:	e0f6      	b.n	f94e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    f760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f762:	681b      	ldr	r3, [r3, #0]
    f764:	2202      	movs	r2, #2
    f766:	4013      	ands	r3, r2
    f768:	d001      	beq.n	f76e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    f76a:	231c      	movs	r3, #28
    f76c:	e0ef      	b.n	f94e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    f76e:	2201      	movs	r2, #1
    f770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f772:	409a      	lsls	r2, r3
    f774:	0013      	movs	r3, r2
    f776:	0019      	movs	r1, r3
    f778:	2002      	movs	r0, #2
    f77a:	4b78      	ldr	r3, [pc, #480]	; (f95c <usart_init+0x244>)
    f77c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    f77e:	2324      	movs	r3, #36	; 0x24
    f780:	18fb      	adds	r3, r7, r3
    f782:	0018      	movs	r0, r3
    f784:	4b76      	ldr	r3, [pc, #472]	; (f960 <usart_init+0x248>)
    f786:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    f788:	687b      	ldr	r3, [r7, #4]
    f78a:	222d      	movs	r2, #45	; 0x2d
    f78c:	5c9a      	ldrb	r2, [r3, r2]
    f78e:	2324      	movs	r3, #36	; 0x24
    f790:	18fb      	adds	r3, r7, r3
    f792:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    f794:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f796:	b2db      	uxtb	r3, r3
    f798:	2224      	movs	r2, #36	; 0x24
    f79a:	18ba      	adds	r2, r7, r2
    f79c:	0011      	movs	r1, r2
    f79e:	0018      	movs	r0, r3
    f7a0:	4b70      	ldr	r3, [pc, #448]	; (f964 <usart_init+0x24c>)
    f7a2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    f7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f7a6:	b2db      	uxtb	r3, r3
    f7a8:	0018      	movs	r0, r3
    f7aa:	4b6f      	ldr	r3, [pc, #444]	; (f968 <usart_init+0x250>)
    f7ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    f7ae:	687b      	ldr	r3, [r7, #4]
    f7b0:	222d      	movs	r2, #45	; 0x2d
    f7b2:	5c9b      	ldrb	r3, [r3, r2]
    f7b4:	2100      	movs	r1, #0
    f7b6:	0018      	movs	r0, r3
    f7b8:	4b6c      	ldr	r3, [pc, #432]	; (f96c <usart_init+0x254>)
    f7ba:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    f7bc:	687b      	ldr	r3, [r7, #4]
    f7be:	7ada      	ldrb	r2, [r3, #11]
    f7c0:	68fb      	ldr	r3, [r7, #12]
    f7c2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    f7c4:	687b      	ldr	r3, [r7, #4]
    f7c6:	2224      	movs	r2, #36	; 0x24
    f7c8:	5c9a      	ldrb	r2, [r3, r2]
    f7ca:	68fb      	ldr	r3, [r7, #12]
    f7cc:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    f7ce:	687b      	ldr	r3, [r7, #4]
    f7d0:	2225      	movs	r2, #37	; 0x25
    f7d2:	5c9a      	ldrb	r2, [r3, r2]
    f7d4:	68fb      	ldr	r3, [r7, #12]
    f7d6:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    f7d8:	687b      	ldr	r3, [r7, #4]
    f7da:	7eda      	ldrb	r2, [r3, #27]
    f7dc:	68fb      	ldr	r3, [r7, #12]
    f7de:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    f7e0:	687b      	ldr	r3, [r7, #4]
    f7e2:	7f1a      	ldrb	r2, [r3, #28]
    f7e4:	68fb      	ldr	r3, [r7, #12]
    f7e6:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    f7e8:	233b      	movs	r3, #59	; 0x3b
    f7ea:	18fc      	adds	r4, r7, r3
    f7ec:	687a      	ldr	r2, [r7, #4]
    f7ee:	68fb      	ldr	r3, [r7, #12]
    f7f0:	0011      	movs	r1, r2
    f7f2:	0018      	movs	r0, r3
    f7f4:	4b5e      	ldr	r3, [pc, #376]	; (f970 <usart_init+0x258>)
    f7f6:	4798      	blx	r3
    f7f8:	0003      	movs	r3, r0
    f7fa:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    f7fc:	233b      	movs	r3, #59	; 0x3b
    f7fe:	18fb      	adds	r3, r7, r3
    f800:	781b      	ldrb	r3, [r3, #0]
    f802:	2b00      	cmp	r3, #0
    f804:	d003      	beq.n	f80e <usart_init+0xf6>
		return status_code;
    f806:	233b      	movs	r3, #59	; 0x3b
    f808:	18fb      	adds	r3, r7, r3
    f80a:	781b      	ldrb	r3, [r3, #0]
    f80c:	e09f      	b.n	f94e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    f80e:	2320      	movs	r3, #32
    f810:	18fb      	adds	r3, r7, r3
    f812:	0018      	movs	r0, r3
    f814:	4b57      	ldr	r3, [pc, #348]	; (f974 <usart_init+0x25c>)
    f816:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f818:	2320      	movs	r3, #32
    f81a:	18fb      	adds	r3, r7, r3
    f81c:	2200      	movs	r2, #0
    f81e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    f820:	2320      	movs	r3, #32
    f822:	18fb      	adds	r3, r7, r3
    f824:	2200      	movs	r2, #0
    f826:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    f828:	687b      	ldr	r3, [r7, #4]
    f82a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    f82c:	2310      	movs	r3, #16
    f82e:	18fb      	adds	r3, r7, r3
    f830:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    f832:	687b      	ldr	r3, [r7, #4]
    f834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    f836:	2310      	movs	r3, #16
    f838:	18fb      	adds	r3, r7, r3
    f83a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    f83c:	687b      	ldr	r3, [r7, #4]
    f83e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    f840:	2310      	movs	r3, #16
    f842:	18fb      	adds	r3, r7, r3
    f844:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    f846:	687b      	ldr	r3, [r7, #4]
    f848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    f84a:	2310      	movs	r3, #16
    f84c:	18fb      	adds	r3, r7, r3
    f84e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    f850:	2347      	movs	r3, #71	; 0x47
    f852:	18fb      	adds	r3, r7, r3
    f854:	2200      	movs	r2, #0
    f856:	701a      	strb	r2, [r3, #0]
    f858:	e02c      	b.n	f8b4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    f85a:	2347      	movs	r3, #71	; 0x47
    f85c:	18fb      	adds	r3, r7, r3
    f85e:	781a      	ldrb	r2, [r3, #0]
    f860:	2310      	movs	r3, #16
    f862:	18fb      	adds	r3, r7, r3
    f864:	0092      	lsls	r2, r2, #2
    f866:	58d3      	ldr	r3, [r2, r3]
    f868:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    f86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f86c:	2b00      	cmp	r3, #0
    f86e:	d109      	bne.n	f884 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    f870:	2347      	movs	r3, #71	; 0x47
    f872:	18fb      	adds	r3, r7, r3
    f874:	781a      	ldrb	r2, [r3, #0]
    f876:	68bb      	ldr	r3, [r7, #8]
    f878:	0011      	movs	r1, r2
    f87a:	0018      	movs	r0, r3
    f87c:	4b3e      	ldr	r3, [pc, #248]	; (f978 <usart_init+0x260>)
    f87e:	4798      	blx	r3
    f880:	0003      	movs	r3, r0
    f882:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    f884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f886:	3301      	adds	r3, #1
    f888:	d00d      	beq.n	f8a6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    f88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f88c:	b2da      	uxtb	r2, r3
    f88e:	2320      	movs	r3, #32
    f890:	18fb      	adds	r3, r7, r3
    f892:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    f894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f896:	0c1b      	lsrs	r3, r3, #16
    f898:	b2db      	uxtb	r3, r3
    f89a:	2220      	movs	r2, #32
    f89c:	18ba      	adds	r2, r7, r2
    f89e:	0011      	movs	r1, r2
    f8a0:	0018      	movs	r0, r3
    f8a2:	4b36      	ldr	r3, [pc, #216]	; (f97c <usart_init+0x264>)
    f8a4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    f8a6:	2347      	movs	r3, #71	; 0x47
    f8a8:	18fb      	adds	r3, r7, r3
    f8aa:	781a      	ldrb	r2, [r3, #0]
    f8ac:	2347      	movs	r3, #71	; 0x47
    f8ae:	18fb      	adds	r3, r7, r3
    f8b0:	3201      	adds	r2, #1
    f8b2:	701a      	strb	r2, [r3, #0]
    f8b4:	2347      	movs	r3, #71	; 0x47
    f8b6:	18fb      	adds	r3, r7, r3
    f8b8:	781b      	ldrb	r3, [r3, #0]
    f8ba:	2b03      	cmp	r3, #3
    f8bc:	d9cd      	bls.n	f85a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    f8be:	2300      	movs	r3, #0
    f8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    f8c2:	e00a      	b.n	f8da <usart_init+0x1c2>
		module->callback[i]            = NULL;
    f8c4:	68fa      	ldr	r2, [r7, #12]
    f8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f8c8:	3302      	adds	r3, #2
    f8ca:	009b      	lsls	r3, r3, #2
    f8cc:	18d3      	adds	r3, r2, r3
    f8ce:	3304      	adds	r3, #4
    f8d0:	2200      	movs	r2, #0
    f8d2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    f8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f8d6:	3301      	adds	r3, #1
    f8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    f8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f8dc:	2b05      	cmp	r3, #5
    f8de:	d9f1      	bls.n	f8c4 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    f8e0:	68fb      	ldr	r3, [r7, #12]
    f8e2:	2200      	movs	r2, #0
    f8e4:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    f8e6:	68fb      	ldr	r3, [r7, #12]
    f8e8:	2200      	movs	r2, #0
    f8ea:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    f8ec:	68fb      	ldr	r3, [r7, #12]
    f8ee:	2200      	movs	r2, #0
    f8f0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    f8f2:	68fb      	ldr	r3, [r7, #12]
    f8f4:	2200      	movs	r2, #0
    f8f6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    f8f8:	68fb      	ldr	r3, [r7, #12]
    f8fa:	2230      	movs	r2, #48	; 0x30
    f8fc:	2100      	movs	r1, #0
    f8fe:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    f900:	68fb      	ldr	r3, [r7, #12]
    f902:	2231      	movs	r2, #49	; 0x31
    f904:	2100      	movs	r1, #0
    f906:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    f908:	68fb      	ldr	r3, [r7, #12]
    f90a:	2232      	movs	r2, #50	; 0x32
    f90c:	2100      	movs	r1, #0
    f90e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    f910:	68fb      	ldr	r3, [r7, #12]
    f912:	2233      	movs	r2, #51	; 0x33
    f914:	2100      	movs	r1, #0
    f916:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    f918:	68fb      	ldr	r3, [r7, #12]
    f91a:	681b      	ldr	r3, [r3, #0]
    f91c:	2227      	movs	r2, #39	; 0x27
    f91e:	18bc      	adds	r4, r7, r2
    f920:	0018      	movs	r0, r3
    f922:	4b0d      	ldr	r3, [pc, #52]	; (f958 <usart_init+0x240>)
    f924:	4798      	blx	r3
    f926:	0003      	movs	r3, r0
    f928:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    f92a:	4a15      	ldr	r2, [pc, #84]	; (f980 <usart_init+0x268>)
    f92c:	2327      	movs	r3, #39	; 0x27
    f92e:	18fb      	adds	r3, r7, r3
    f930:	781b      	ldrb	r3, [r3, #0]
    f932:	0011      	movs	r1, r2
    f934:	0018      	movs	r0, r3
    f936:	4b13      	ldr	r3, [pc, #76]	; (f984 <usart_init+0x26c>)
    f938:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    f93a:	2327      	movs	r3, #39	; 0x27
    f93c:	18fb      	adds	r3, r7, r3
    f93e:	781a      	ldrb	r2, [r3, #0]
    f940:	4b11      	ldr	r3, [pc, #68]	; (f988 <usart_init+0x270>)
    f942:	0092      	lsls	r2, r2, #2
    f944:	68f9      	ldr	r1, [r7, #12]
    f946:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    f948:	233b      	movs	r3, #59	; 0x3b
    f94a:	18fb      	adds	r3, r7, r3
    f94c:	781b      	ldrb	r3, [r3, #0]
}
    f94e:	0018      	movs	r0, r3
    f950:	46bd      	mov	sp, r7
    f952:	b013      	add	sp, #76	; 0x4c
    f954:	bd90      	pop	{r4, r7, pc}
    f956:	46c0      	nop			; (mov r8, r8)
    f958:	0000f22d 	.word	0x0000f22d
    f95c:	0000f355 	.word	0x0000f355
    f960:	0000f33d 	.word	0x0000f33d
    f964:	00010e59 	.word	0x00010e59
    f968:	00010e9d 	.word	0x00010e9d
    f96c:	0000efe5 	.word	0x0000efe5
    f970:	0000f43d 	.word	0x0000f43d
    f974:	0000f3b1 	.word	0x0000f3b1
    f978:	0000f071 	.word	0x0000f071
    f97c:	00011145 	.word	0x00011145
    f980:	0000fb21 	.word	0x0000fb21
    f984:	0000fe75 	.word	0x0000fe75
    f988:	20000904 	.word	0x20000904

0000f98c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    f98c:	b580      	push	{r7, lr}
    f98e:	b084      	sub	sp, #16
    f990:	af00      	add	r7, sp, #0
    f992:	6078      	str	r0, [r7, #4]
    f994:	000a      	movs	r2, r1
    f996:	1cbb      	adds	r3, r7, #2
    f998:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f99a:	687b      	ldr	r3, [r7, #4]
    f99c:	681b      	ldr	r3, [r3, #0]
    f99e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    f9a0:	687b      	ldr	r3, [r7, #4]
    f9a2:	79db      	ldrb	r3, [r3, #7]
    f9a4:	2201      	movs	r2, #1
    f9a6:	4053      	eors	r3, r2
    f9a8:	b2db      	uxtb	r3, r3
    f9aa:	2b00      	cmp	r3, #0
    f9ac:	d001      	beq.n	f9b2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    f9ae:	231c      	movs	r3, #28
    f9b0:	e017      	b.n	f9e2 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    f9b2:	687b      	ldr	r3, [r7, #4]
    f9b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    f9b6:	b29b      	uxth	r3, r3
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d001      	beq.n	f9c0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    f9bc:	2305      	movs	r3, #5
    f9be:	e010      	b.n	f9e2 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    f9c0:	687b      	ldr	r3, [r7, #4]
    f9c2:	0018      	movs	r0, r3
    f9c4:	4b09      	ldr	r3, [pc, #36]	; (f9ec <usart_write_wait+0x60>)
    f9c6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    f9c8:	68fb      	ldr	r3, [r7, #12]
    f9ca:	1cba      	adds	r2, r7, #2
    f9cc:	8812      	ldrh	r2, [r2, #0]
    f9ce:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    f9d0:	46c0      	nop			; (mov r8, r8)
    f9d2:	68fb      	ldr	r3, [r7, #12]
    f9d4:	7e1b      	ldrb	r3, [r3, #24]
    f9d6:	b2db      	uxtb	r3, r3
    f9d8:	001a      	movs	r2, r3
    f9da:	2302      	movs	r3, #2
    f9dc:	4013      	ands	r3, r2
    f9de:	d0f8      	beq.n	f9d2 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    f9e0:	2300      	movs	r3, #0
}
    f9e2:	0018      	movs	r0, r3
    f9e4:	46bd      	mov	sp, r7
    f9e6:	b004      	add	sp, #16
    f9e8:	bd80      	pop	{r7, pc}
    f9ea:	46c0      	nop			; (mov r8, r8)
    f9ec:	0000f419 	.word	0x0000f419

0000f9f0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    f9f0:	b580      	push	{r7, lr}
    f9f2:	b084      	sub	sp, #16
    f9f4:	af00      	add	r7, sp, #0
    f9f6:	6078      	str	r0, [r7, #4]
    f9f8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f9fa:	687b      	ldr	r3, [r7, #4]
    f9fc:	681b      	ldr	r3, [r3, #0]
    f9fe:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    fa00:	687b      	ldr	r3, [r7, #4]
    fa02:	799b      	ldrb	r3, [r3, #6]
    fa04:	2201      	movs	r2, #1
    fa06:	4053      	eors	r3, r2
    fa08:	b2db      	uxtb	r3, r3
    fa0a:	2b00      	cmp	r3, #0
    fa0c:	d001      	beq.n	fa12 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    fa0e:	231c      	movs	r3, #28
    fa10:	e05e      	b.n	fad0 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    fa12:	687b      	ldr	r3, [r7, #4]
    fa14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    fa16:	b29b      	uxth	r3, r3
    fa18:	2b00      	cmp	r3, #0
    fa1a:	d001      	beq.n	fa20 <usart_read_wait+0x30>
		return STATUS_BUSY;
    fa1c:	2305      	movs	r3, #5
    fa1e:	e057      	b.n	fad0 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    fa20:	68fb      	ldr	r3, [r7, #12]
    fa22:	7e1b      	ldrb	r3, [r3, #24]
    fa24:	b2db      	uxtb	r3, r3
    fa26:	001a      	movs	r2, r3
    fa28:	2304      	movs	r3, #4
    fa2a:	4013      	ands	r3, r2
    fa2c:	d101      	bne.n	fa32 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    fa2e:	2305      	movs	r3, #5
    fa30:	e04e      	b.n	fad0 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    fa32:	687b      	ldr	r3, [r7, #4]
    fa34:	0018      	movs	r0, r3
    fa36:	4b28      	ldr	r3, [pc, #160]	; (fad8 <usart_read_wait+0xe8>)
    fa38:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    fa3a:	68fb      	ldr	r3, [r7, #12]
    fa3c:	8b5b      	ldrh	r3, [r3, #26]
    fa3e:	b29b      	uxth	r3, r3
    fa40:	b2da      	uxtb	r2, r3
    fa42:	230b      	movs	r3, #11
    fa44:	18fb      	adds	r3, r7, r3
    fa46:	213f      	movs	r1, #63	; 0x3f
    fa48:	400a      	ands	r2, r1
    fa4a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    fa4c:	230b      	movs	r3, #11
    fa4e:	18fb      	adds	r3, r7, r3
    fa50:	781b      	ldrb	r3, [r3, #0]
    fa52:	2b00      	cmp	r3, #0
    fa54:	d036      	beq.n	fac4 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    fa56:	230b      	movs	r3, #11
    fa58:	18fb      	adds	r3, r7, r3
    fa5a:	781b      	ldrb	r3, [r3, #0]
    fa5c:	2202      	movs	r2, #2
    fa5e:	4013      	ands	r3, r2
    fa60:	d004      	beq.n	fa6c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    fa62:	68fb      	ldr	r3, [r7, #12]
    fa64:	2202      	movs	r2, #2
    fa66:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    fa68:	231a      	movs	r3, #26
    fa6a:	e031      	b.n	fad0 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    fa6c:	230b      	movs	r3, #11
    fa6e:	18fb      	adds	r3, r7, r3
    fa70:	781b      	ldrb	r3, [r3, #0]
    fa72:	2204      	movs	r2, #4
    fa74:	4013      	ands	r3, r2
    fa76:	d004      	beq.n	fa82 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    fa78:	68fb      	ldr	r3, [r7, #12]
    fa7a:	2204      	movs	r2, #4
    fa7c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    fa7e:	231e      	movs	r3, #30
    fa80:	e026      	b.n	fad0 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    fa82:	230b      	movs	r3, #11
    fa84:	18fb      	adds	r3, r7, r3
    fa86:	781b      	ldrb	r3, [r3, #0]
    fa88:	2201      	movs	r2, #1
    fa8a:	4013      	ands	r3, r2
    fa8c:	d004      	beq.n	fa98 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    fa8e:	68fb      	ldr	r3, [r7, #12]
    fa90:	2201      	movs	r2, #1
    fa92:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    fa94:	2313      	movs	r3, #19
    fa96:	e01b      	b.n	fad0 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    fa98:	230b      	movs	r3, #11
    fa9a:	18fb      	adds	r3, r7, r3
    fa9c:	781b      	ldrb	r3, [r3, #0]
    fa9e:	2210      	movs	r2, #16
    faa0:	4013      	ands	r3, r2
    faa2:	d004      	beq.n	faae <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    faa4:	68fb      	ldr	r3, [r7, #12]
    faa6:	2210      	movs	r2, #16
    faa8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    faaa:	2342      	movs	r3, #66	; 0x42
    faac:	e010      	b.n	fad0 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    faae:	230b      	movs	r3, #11
    fab0:	18fb      	adds	r3, r7, r3
    fab2:	781b      	ldrb	r3, [r3, #0]
    fab4:	2220      	movs	r2, #32
    fab6:	4013      	ands	r3, r2
    fab8:	d004      	beq.n	fac4 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    faba:	68fb      	ldr	r3, [r7, #12]
    fabc:	2220      	movs	r2, #32
    fabe:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    fac0:	2341      	movs	r3, #65	; 0x41
    fac2:	e005      	b.n	fad0 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    fac4:	68fb      	ldr	r3, [r7, #12]
    fac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    fac8:	b29a      	uxth	r2, r3
    faca:	683b      	ldr	r3, [r7, #0]
    facc:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    face:	2300      	movs	r3, #0
}
    fad0:	0018      	movs	r0, r3
    fad2:	46bd      	mov	sp, r7
    fad4:	b004      	add	sp, #16
    fad6:	bd80      	pop	{r7, pc}
    fad8:	0000f419 	.word	0x0000f419

0000fadc <usart_is_syncing>:
{
    fadc:	b580      	push	{r7, lr}
    fade:	b084      	sub	sp, #16
    fae0:	af00      	add	r7, sp, #0
    fae2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    fae4:	687b      	ldr	r3, [r7, #4]
    fae6:	681b      	ldr	r3, [r3, #0]
    fae8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    faea:	68fb      	ldr	r3, [r7, #12]
    faec:	69db      	ldr	r3, [r3, #28]
    faee:	1e5a      	subs	r2, r3, #1
    faf0:	4193      	sbcs	r3, r2
    faf2:	b2db      	uxtb	r3, r3
}
    faf4:	0018      	movs	r0, r3
    faf6:	46bd      	mov	sp, r7
    faf8:	b004      	add	sp, #16
    fafa:	bd80      	pop	{r7, pc}

0000fafc <_usart_wait_for_sync>:
{
    fafc:	b580      	push	{r7, lr}
    fafe:	b082      	sub	sp, #8
    fb00:	af00      	add	r7, sp, #0
    fb02:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    fb04:	46c0      	nop			; (mov r8, r8)
    fb06:	687b      	ldr	r3, [r7, #4]
    fb08:	0018      	movs	r0, r3
    fb0a:	4b04      	ldr	r3, [pc, #16]	; (fb1c <_usart_wait_for_sync+0x20>)
    fb0c:	4798      	blx	r3
    fb0e:	1e03      	subs	r3, r0, #0
    fb10:	d1f9      	bne.n	fb06 <_usart_wait_for_sync+0xa>
}
    fb12:	46c0      	nop			; (mov r8, r8)
    fb14:	46bd      	mov	sp, r7
    fb16:	b002      	add	sp, #8
    fb18:	bd80      	pop	{r7, pc}
    fb1a:	46c0      	nop			; (mov r8, r8)
    fb1c:	0000fadd 	.word	0x0000fadd

0000fb20 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    fb20:	b580      	push	{r7, lr}
    fb22:	b088      	sub	sp, #32
    fb24:	af00      	add	r7, sp, #0
    fb26:	0002      	movs	r2, r0
    fb28:	1dfb      	adds	r3, r7, #7
    fb2a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    fb2c:	1dfb      	adds	r3, r7, #7
    fb2e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    fb30:	4ba3      	ldr	r3, [pc, #652]	; (fdc0 <_usart_interrupt_handler+0x2a0>)
    fb32:	0092      	lsls	r2, r2, #2
    fb34:	58d3      	ldr	r3, [r2, r3]
    fb36:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    fb38:	69bb      	ldr	r3, [r7, #24]
    fb3a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    fb3c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    fb3e:	69bb      	ldr	r3, [r7, #24]
    fb40:	0018      	movs	r0, r3
    fb42:	4ba0      	ldr	r3, [pc, #640]	; (fdc4 <_usart_interrupt_handler+0x2a4>)
    fb44:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    fb46:	697b      	ldr	r3, [r7, #20]
    fb48:	7e1b      	ldrb	r3, [r3, #24]
    fb4a:	b2da      	uxtb	r2, r3
    fb4c:	2312      	movs	r3, #18
    fb4e:	18fb      	adds	r3, r7, r3
    fb50:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    fb52:	697b      	ldr	r3, [r7, #20]
    fb54:	7d9b      	ldrb	r3, [r3, #22]
    fb56:	b2db      	uxtb	r3, r3
    fb58:	b29a      	uxth	r2, r3
    fb5a:	2312      	movs	r3, #18
    fb5c:	18fb      	adds	r3, r7, r3
    fb5e:	2112      	movs	r1, #18
    fb60:	1879      	adds	r1, r7, r1
    fb62:	8809      	ldrh	r1, [r1, #0]
    fb64:	400a      	ands	r2, r1
    fb66:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    fb68:	69bb      	ldr	r3, [r7, #24]
    fb6a:	2230      	movs	r2, #48	; 0x30
    fb6c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    fb6e:	69ba      	ldr	r2, [r7, #24]
    fb70:	2131      	movs	r1, #49	; 0x31
    fb72:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    fb74:	4013      	ands	r3, r2
    fb76:	b2da      	uxtb	r2, r3
    fb78:	2310      	movs	r3, #16
    fb7a:	18fb      	adds	r3, r7, r3
    fb7c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    fb7e:	2312      	movs	r3, #18
    fb80:	18fb      	adds	r3, r7, r3
    fb82:	881b      	ldrh	r3, [r3, #0]
    fb84:	2201      	movs	r2, #1
    fb86:	4013      	ands	r3, r2
    fb88:	d044      	beq.n	fc14 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    fb8a:	69bb      	ldr	r3, [r7, #24]
    fb8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    fb8e:	b29b      	uxth	r3, r3
    fb90:	2b00      	cmp	r3, #0
    fb92:	d03c      	beq.n	fc0e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    fb94:	69bb      	ldr	r3, [r7, #24]
    fb96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fb98:	781b      	ldrb	r3, [r3, #0]
    fb9a:	b2da      	uxtb	r2, r3
    fb9c:	231c      	movs	r3, #28
    fb9e:	18fb      	adds	r3, r7, r3
    fba0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    fba2:	69bb      	ldr	r3, [r7, #24]
    fba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fba6:	1c5a      	adds	r2, r3, #1
    fba8:	69bb      	ldr	r3, [r7, #24]
    fbaa:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    fbac:	69bb      	ldr	r3, [r7, #24]
    fbae:	795b      	ldrb	r3, [r3, #5]
    fbb0:	2b01      	cmp	r3, #1
    fbb2:	d113      	bne.n	fbdc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    fbb4:	69bb      	ldr	r3, [r7, #24]
    fbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fbb8:	781b      	ldrb	r3, [r3, #0]
    fbba:	b2db      	uxtb	r3, r3
    fbbc:	021b      	lsls	r3, r3, #8
    fbbe:	b21a      	sxth	r2, r3
    fbc0:	231c      	movs	r3, #28
    fbc2:	18fb      	adds	r3, r7, r3
    fbc4:	2100      	movs	r1, #0
    fbc6:	5e5b      	ldrsh	r3, [r3, r1]
    fbc8:	4313      	orrs	r3, r2
    fbca:	b21a      	sxth	r2, r3
    fbcc:	231c      	movs	r3, #28
    fbce:	18fb      	adds	r3, r7, r3
    fbd0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    fbd2:	69bb      	ldr	r3, [r7, #24]
    fbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fbd6:	1c5a      	adds	r2, r3, #1
    fbd8:	69bb      	ldr	r3, [r7, #24]
    fbda:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    fbdc:	231c      	movs	r3, #28
    fbde:	18fb      	adds	r3, r7, r3
    fbe0:	881b      	ldrh	r3, [r3, #0]
    fbe2:	05db      	lsls	r3, r3, #23
    fbe4:	0ddb      	lsrs	r3, r3, #23
    fbe6:	b29a      	uxth	r2, r3
    fbe8:	697b      	ldr	r3, [r7, #20]
    fbea:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    fbec:	69bb      	ldr	r3, [r7, #24]
    fbee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    fbf0:	b29b      	uxth	r3, r3
    fbf2:	3b01      	subs	r3, #1
    fbf4:	b29b      	uxth	r3, r3
    fbf6:	69ba      	ldr	r2, [r7, #24]
    fbf8:	1c19      	adds	r1, r3, #0
    fbfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
    fbfc:	2b00      	cmp	r3, #0
    fbfe:	d109      	bne.n	fc14 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    fc00:	697b      	ldr	r3, [r7, #20]
    fc02:	2201      	movs	r2, #1
    fc04:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    fc06:	697b      	ldr	r3, [r7, #20]
    fc08:	2202      	movs	r2, #2
    fc0a:	759a      	strb	r2, [r3, #22]
    fc0c:	e002      	b.n	fc14 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    fc0e:	697b      	ldr	r3, [r7, #20]
    fc10:	2201      	movs	r2, #1
    fc12:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    fc14:	2312      	movs	r3, #18
    fc16:	18fb      	adds	r3, r7, r3
    fc18:	881b      	ldrh	r3, [r3, #0]
    fc1a:	2202      	movs	r2, #2
    fc1c:	4013      	ands	r3, r2
    fc1e:	d011      	beq.n	fc44 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    fc20:	697b      	ldr	r3, [r7, #20]
    fc22:	2202      	movs	r2, #2
    fc24:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    fc26:	69bb      	ldr	r3, [r7, #24]
    fc28:	2233      	movs	r2, #51	; 0x33
    fc2a:	2100      	movs	r1, #0
    fc2c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    fc2e:	2310      	movs	r3, #16
    fc30:	18fb      	adds	r3, r7, r3
    fc32:	881b      	ldrh	r3, [r3, #0]
    fc34:	2201      	movs	r2, #1
    fc36:	4013      	ands	r3, r2
    fc38:	d004      	beq.n	fc44 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    fc3a:	69bb      	ldr	r3, [r7, #24]
    fc3c:	68db      	ldr	r3, [r3, #12]
    fc3e:	69ba      	ldr	r2, [r7, #24]
    fc40:	0010      	movs	r0, r2
    fc42:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    fc44:	2312      	movs	r3, #18
    fc46:	18fb      	adds	r3, r7, r3
    fc48:	881b      	ldrh	r3, [r3, #0]
    fc4a:	2204      	movs	r2, #4
    fc4c:	4013      	ands	r3, r2
    fc4e:	d100      	bne.n	fc52 <_usart_interrupt_handler+0x132>
    fc50:	e0bd      	b.n	fdce <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    fc52:	69bb      	ldr	r3, [r7, #24]
    fc54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    fc56:	b29b      	uxth	r3, r3
    fc58:	2b00      	cmp	r3, #0
    fc5a:	d100      	bne.n	fc5e <_usart_interrupt_handler+0x13e>
    fc5c:	e0b4      	b.n	fdc8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    fc5e:	697b      	ldr	r3, [r7, #20]
    fc60:	8b5b      	ldrh	r3, [r3, #26]
    fc62:	b29b      	uxth	r3, r3
    fc64:	b2da      	uxtb	r2, r3
    fc66:	231f      	movs	r3, #31
    fc68:	18fb      	adds	r3, r7, r3
    fc6a:	213f      	movs	r1, #63	; 0x3f
    fc6c:	400a      	ands	r2, r1
    fc6e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    fc70:	231f      	movs	r3, #31
    fc72:	18fb      	adds	r3, r7, r3
    fc74:	781b      	ldrb	r3, [r3, #0]
    fc76:	2208      	movs	r2, #8
    fc78:	4013      	ands	r3, r2
    fc7a:	d007      	beq.n	fc8c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    fc7c:	231f      	movs	r3, #31
    fc7e:	18fb      	adds	r3, r7, r3
    fc80:	221f      	movs	r2, #31
    fc82:	18ba      	adds	r2, r7, r2
    fc84:	7812      	ldrb	r2, [r2, #0]
    fc86:	2108      	movs	r1, #8
    fc88:	438a      	bics	r2, r1
    fc8a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    fc8c:	231f      	movs	r3, #31
    fc8e:	18fb      	adds	r3, r7, r3
    fc90:	781b      	ldrb	r3, [r3, #0]
    fc92:	2b00      	cmp	r3, #0
    fc94:	d050      	beq.n	fd38 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    fc96:	231f      	movs	r3, #31
    fc98:	18fb      	adds	r3, r7, r3
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	2202      	movs	r2, #2
    fc9e:	4013      	ands	r3, r2
    fca0:	d007      	beq.n	fcb2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    fca2:	69bb      	ldr	r3, [r7, #24]
    fca4:	2232      	movs	r2, #50	; 0x32
    fca6:	211a      	movs	r1, #26
    fca8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    fcaa:	697b      	ldr	r3, [r7, #20]
    fcac:	2202      	movs	r2, #2
    fcae:	835a      	strh	r2, [r3, #26]
    fcb0:	e036      	b.n	fd20 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    fcb2:	231f      	movs	r3, #31
    fcb4:	18fb      	adds	r3, r7, r3
    fcb6:	781b      	ldrb	r3, [r3, #0]
    fcb8:	2204      	movs	r2, #4
    fcba:	4013      	ands	r3, r2
    fcbc:	d007      	beq.n	fcce <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    fcbe:	69bb      	ldr	r3, [r7, #24]
    fcc0:	2232      	movs	r2, #50	; 0x32
    fcc2:	211e      	movs	r1, #30
    fcc4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    fcc6:	697b      	ldr	r3, [r7, #20]
    fcc8:	2204      	movs	r2, #4
    fcca:	835a      	strh	r2, [r3, #26]
    fccc:	e028      	b.n	fd20 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    fcce:	231f      	movs	r3, #31
    fcd0:	18fb      	adds	r3, r7, r3
    fcd2:	781b      	ldrb	r3, [r3, #0]
    fcd4:	2201      	movs	r2, #1
    fcd6:	4013      	ands	r3, r2
    fcd8:	d007      	beq.n	fcea <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    fcda:	69bb      	ldr	r3, [r7, #24]
    fcdc:	2232      	movs	r2, #50	; 0x32
    fcde:	2113      	movs	r1, #19
    fce0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    fce2:	697b      	ldr	r3, [r7, #20]
    fce4:	2201      	movs	r2, #1
    fce6:	835a      	strh	r2, [r3, #26]
    fce8:	e01a      	b.n	fd20 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    fcea:	231f      	movs	r3, #31
    fcec:	18fb      	adds	r3, r7, r3
    fcee:	781b      	ldrb	r3, [r3, #0]
    fcf0:	2210      	movs	r2, #16
    fcf2:	4013      	ands	r3, r2
    fcf4:	d007      	beq.n	fd06 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    fcf6:	69bb      	ldr	r3, [r7, #24]
    fcf8:	2232      	movs	r2, #50	; 0x32
    fcfa:	2142      	movs	r1, #66	; 0x42
    fcfc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    fcfe:	697b      	ldr	r3, [r7, #20]
    fd00:	2210      	movs	r2, #16
    fd02:	835a      	strh	r2, [r3, #26]
    fd04:	e00c      	b.n	fd20 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    fd06:	231f      	movs	r3, #31
    fd08:	18fb      	adds	r3, r7, r3
    fd0a:	781b      	ldrb	r3, [r3, #0]
    fd0c:	2220      	movs	r2, #32
    fd0e:	4013      	ands	r3, r2
    fd10:	d006      	beq.n	fd20 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    fd12:	69bb      	ldr	r3, [r7, #24]
    fd14:	2232      	movs	r2, #50	; 0x32
    fd16:	2141      	movs	r1, #65	; 0x41
    fd18:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    fd1a:	697b      	ldr	r3, [r7, #20]
    fd1c:	2220      	movs	r2, #32
    fd1e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    fd20:	2310      	movs	r3, #16
    fd22:	18fb      	adds	r3, r7, r3
    fd24:	881b      	ldrh	r3, [r3, #0]
    fd26:	2204      	movs	r2, #4
    fd28:	4013      	ands	r3, r2
				if (callback_status
    fd2a:	d050      	beq.n	fdce <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    fd2c:	69bb      	ldr	r3, [r7, #24]
    fd2e:	695b      	ldr	r3, [r3, #20]
    fd30:	69ba      	ldr	r2, [r7, #24]
    fd32:	0010      	movs	r0, r2
    fd34:	4798      	blx	r3
    fd36:	e04a      	b.n	fdce <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    fd38:	697b      	ldr	r3, [r7, #20]
    fd3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    fd3c:	b29a      	uxth	r2, r3
    fd3e:	230e      	movs	r3, #14
    fd40:	18fb      	adds	r3, r7, r3
    fd42:	05d2      	lsls	r2, r2, #23
    fd44:	0dd2      	lsrs	r2, r2, #23
    fd46:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    fd48:	69bb      	ldr	r3, [r7, #24]
    fd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fd4c:	220e      	movs	r2, #14
    fd4e:	18ba      	adds	r2, r7, r2
    fd50:	8812      	ldrh	r2, [r2, #0]
    fd52:	b2d2      	uxtb	r2, r2
    fd54:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    fd56:	69bb      	ldr	r3, [r7, #24]
    fd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fd5a:	1c5a      	adds	r2, r3, #1
    fd5c:	69bb      	ldr	r3, [r7, #24]
    fd5e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    fd60:	69bb      	ldr	r3, [r7, #24]
    fd62:	795b      	ldrb	r3, [r3, #5]
    fd64:	2b01      	cmp	r3, #1
    fd66:	d10d      	bne.n	fd84 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    fd68:	69bb      	ldr	r3, [r7, #24]
    fd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fd6c:	220e      	movs	r2, #14
    fd6e:	18ba      	adds	r2, r7, r2
    fd70:	8812      	ldrh	r2, [r2, #0]
    fd72:	0a12      	lsrs	r2, r2, #8
    fd74:	b292      	uxth	r2, r2
    fd76:	b2d2      	uxtb	r2, r2
    fd78:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    fd7a:	69bb      	ldr	r3, [r7, #24]
    fd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fd7e:	1c5a      	adds	r2, r3, #1
    fd80:	69bb      	ldr	r3, [r7, #24]
    fd82:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    fd84:	69bb      	ldr	r3, [r7, #24]
    fd86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    fd88:	b29b      	uxth	r3, r3
    fd8a:	3b01      	subs	r3, #1
    fd8c:	b29b      	uxth	r3, r3
    fd8e:	69ba      	ldr	r2, [r7, #24]
    fd90:	1c19      	adds	r1, r3, #0
    fd92:	8591      	strh	r1, [r2, #44]	; 0x2c
    fd94:	2b00      	cmp	r3, #0
    fd96:	d11a      	bne.n	fdce <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    fd98:	697b      	ldr	r3, [r7, #20]
    fd9a:	2204      	movs	r2, #4
    fd9c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    fd9e:	69bb      	ldr	r3, [r7, #24]
    fda0:	2232      	movs	r2, #50	; 0x32
    fda2:	2100      	movs	r1, #0
    fda4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    fda6:	2310      	movs	r3, #16
    fda8:	18fb      	adds	r3, r7, r3
    fdaa:	881b      	ldrh	r3, [r3, #0]
    fdac:	2202      	movs	r2, #2
    fdae:	4013      	ands	r3, r2
					if (callback_status
    fdb0:	d00d      	beq.n	fdce <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    fdb2:	69bb      	ldr	r3, [r7, #24]
    fdb4:	691b      	ldr	r3, [r3, #16]
    fdb6:	69ba      	ldr	r2, [r7, #24]
    fdb8:	0010      	movs	r0, r2
    fdba:	4798      	blx	r3
    fdbc:	e007      	b.n	fdce <_usart_interrupt_handler+0x2ae>
    fdbe:	46c0      	nop			; (mov r8, r8)
    fdc0:	20000904 	.word	0x20000904
    fdc4:	0000fafd 	.word	0x0000fafd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    fdc8:	697b      	ldr	r3, [r7, #20]
    fdca:	2204      	movs	r2, #4
    fdcc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    fdce:	2312      	movs	r3, #18
    fdd0:	18fb      	adds	r3, r7, r3
    fdd2:	881b      	ldrh	r3, [r3, #0]
    fdd4:	2210      	movs	r2, #16
    fdd6:	4013      	ands	r3, r2
    fdd8:	d010      	beq.n	fdfc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    fdda:	697b      	ldr	r3, [r7, #20]
    fddc:	2210      	movs	r2, #16
    fdde:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    fde0:	697b      	ldr	r3, [r7, #20]
    fde2:	2210      	movs	r2, #16
    fde4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    fde6:	2310      	movs	r3, #16
    fde8:	18fb      	adds	r3, r7, r3
    fdea:	881b      	ldrh	r3, [r3, #0]
    fdec:	2210      	movs	r2, #16
    fdee:	4013      	ands	r3, r2
    fdf0:	d004      	beq.n	fdfc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    fdf2:	69bb      	ldr	r3, [r7, #24]
    fdf4:	69db      	ldr	r3, [r3, #28]
    fdf6:	69ba      	ldr	r2, [r7, #24]
    fdf8:	0010      	movs	r0, r2
    fdfa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    fdfc:	2312      	movs	r3, #18
    fdfe:	18fb      	adds	r3, r7, r3
    fe00:	881b      	ldrh	r3, [r3, #0]
    fe02:	2220      	movs	r2, #32
    fe04:	4013      	ands	r3, r2
    fe06:	d010      	beq.n	fe2a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    fe08:	697b      	ldr	r3, [r7, #20]
    fe0a:	2220      	movs	r2, #32
    fe0c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    fe0e:	697b      	ldr	r3, [r7, #20]
    fe10:	2220      	movs	r2, #32
    fe12:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    fe14:	2310      	movs	r3, #16
    fe16:	18fb      	adds	r3, r7, r3
    fe18:	881b      	ldrh	r3, [r3, #0]
    fe1a:	2208      	movs	r2, #8
    fe1c:	4013      	ands	r3, r2
    fe1e:	d004      	beq.n	fe2a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    fe20:	69bb      	ldr	r3, [r7, #24]
    fe22:	699b      	ldr	r3, [r3, #24]
    fe24:	69ba      	ldr	r2, [r7, #24]
    fe26:	0010      	movs	r0, r2
    fe28:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    fe2a:	2312      	movs	r3, #18
    fe2c:	18fb      	adds	r3, r7, r3
    fe2e:	881b      	ldrh	r3, [r3, #0]
    fe30:	2208      	movs	r2, #8
    fe32:	4013      	ands	r3, r2
    fe34:	d010      	beq.n	fe58 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    fe36:	697b      	ldr	r3, [r7, #20]
    fe38:	2208      	movs	r2, #8
    fe3a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    fe3c:	697b      	ldr	r3, [r7, #20]
    fe3e:	2208      	movs	r2, #8
    fe40:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    fe42:	2310      	movs	r3, #16
    fe44:	18fb      	adds	r3, r7, r3
    fe46:	881b      	ldrh	r3, [r3, #0]
    fe48:	2220      	movs	r2, #32
    fe4a:	4013      	ands	r3, r2
    fe4c:	d004      	beq.n	fe58 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    fe4e:	69bb      	ldr	r3, [r7, #24]
    fe50:	6a1b      	ldr	r3, [r3, #32]
    fe52:	69ba      	ldr	r2, [r7, #24]
    fe54:	0010      	movs	r0, r2
    fe56:	4798      	blx	r3
		}
	}
#endif
}
    fe58:	46c0      	nop			; (mov r8, r8)
    fe5a:	46bd      	mov	sp, r7
    fe5c:	b008      	add	sp, #32
    fe5e:	bd80      	pop	{r7, pc}

0000fe60 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    fe60:	b580      	push	{r7, lr}
    fe62:	b082      	sub	sp, #8
    fe64:	af00      	add	r7, sp, #0
    fe66:	0002      	movs	r2, r0
    fe68:	1dfb      	adds	r3, r7, #7
    fe6a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    fe6c:	46c0      	nop			; (mov r8, r8)
    fe6e:	46bd      	mov	sp, r7
    fe70:	b002      	add	sp, #8
    fe72:	bd80      	pop	{r7, pc}

0000fe74 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    fe74:	b580      	push	{r7, lr}
    fe76:	b084      	sub	sp, #16
    fe78:	af00      	add	r7, sp, #0
    fe7a:	0002      	movs	r2, r0
    fe7c:	6039      	str	r1, [r7, #0]
    fe7e:	1dfb      	adds	r3, r7, #7
    fe80:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    fe82:	4b13      	ldr	r3, [pc, #76]	; (fed0 <_sercom_set_handler+0x5c>)
    fe84:	781b      	ldrb	r3, [r3, #0]
    fe86:	2201      	movs	r2, #1
    fe88:	4053      	eors	r3, r2
    fe8a:	b2db      	uxtb	r3, r3
    fe8c:	2b00      	cmp	r3, #0
    fe8e:	d015      	beq.n	febc <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    fe90:	2300      	movs	r3, #0
    fe92:	60fb      	str	r3, [r7, #12]
    fe94:	e00c      	b.n	feb0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    fe96:	4b0f      	ldr	r3, [pc, #60]	; (fed4 <_sercom_set_handler+0x60>)
    fe98:	68fa      	ldr	r2, [r7, #12]
    fe9a:	0092      	lsls	r2, r2, #2
    fe9c:	490e      	ldr	r1, [pc, #56]	; (fed8 <_sercom_set_handler+0x64>)
    fe9e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    fea0:	4b0e      	ldr	r3, [pc, #56]	; (fedc <_sercom_set_handler+0x68>)
    fea2:	68fa      	ldr	r2, [r7, #12]
    fea4:	0092      	lsls	r2, r2, #2
    fea6:	2100      	movs	r1, #0
    fea8:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    feaa:	68fb      	ldr	r3, [r7, #12]
    feac:	3301      	adds	r3, #1
    feae:	60fb      	str	r3, [r7, #12]
    feb0:	68fb      	ldr	r3, [r7, #12]
    feb2:	2b05      	cmp	r3, #5
    feb4:	d9ef      	bls.n	fe96 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    feb6:	4b06      	ldr	r3, [pc, #24]	; (fed0 <_sercom_set_handler+0x5c>)
    feb8:	2201      	movs	r2, #1
    feba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    febc:	1dfb      	adds	r3, r7, #7
    febe:	781a      	ldrb	r2, [r3, #0]
    fec0:	4b04      	ldr	r3, [pc, #16]	; (fed4 <_sercom_set_handler+0x60>)
    fec2:	0092      	lsls	r2, r2, #2
    fec4:	6839      	ldr	r1, [r7, #0]
    fec6:	50d1      	str	r1, [r2, r3]
}
    fec8:	46c0      	nop			; (mov r8, r8)
    feca:	46bd      	mov	sp, r7
    fecc:	b004      	add	sp, #16
    fece:	bd80      	pop	{r7, pc}
    fed0:	20000266 	.word	0x20000266
    fed4:	20000268 	.word	0x20000268
    fed8:	0000fe61 	.word	0x0000fe61
    fedc:	20000904 	.word	0x20000904

0000fee0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    fee0:	b590      	push	{r4, r7, lr}
    fee2:	b085      	sub	sp, #20
    fee4:	af00      	add	r7, sp, #0
    fee6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    fee8:	2308      	movs	r3, #8
    feea:	18fb      	adds	r3, r7, r3
    feec:	4a0b      	ldr	r2, [pc, #44]	; (ff1c <_sercom_get_interrupt_vector+0x3c>)
    feee:	6811      	ldr	r1, [r2, #0]
    fef0:	6019      	str	r1, [r3, #0]
    fef2:	8892      	ldrh	r2, [r2, #4]
    fef4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    fef6:	230f      	movs	r3, #15
    fef8:	18fc      	adds	r4, r7, r3
    fefa:	687b      	ldr	r3, [r7, #4]
    fefc:	0018      	movs	r0, r3
    fefe:	4b08      	ldr	r3, [pc, #32]	; (ff20 <_sercom_get_interrupt_vector+0x40>)
    ff00:	4798      	blx	r3
    ff02:	0003      	movs	r3, r0
    ff04:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    ff06:	230f      	movs	r3, #15
    ff08:	18fb      	adds	r3, r7, r3
    ff0a:	781b      	ldrb	r3, [r3, #0]
    ff0c:	2208      	movs	r2, #8
    ff0e:	18ba      	adds	r2, r7, r2
    ff10:	5cd3      	ldrb	r3, [r2, r3]
    ff12:	b25b      	sxtb	r3, r3
}
    ff14:	0018      	movs	r0, r3
    ff16:	46bd      	mov	sp, r7
    ff18:	b005      	add	sp, #20
    ff1a:	bd90      	pop	{r4, r7, pc}
    ff1c:	00019ea4 	.word	0x00019ea4
    ff20:	0000f22d 	.word	0x0000f22d

0000ff24 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    ff24:	b580      	push	{r7, lr}
    ff26:	af00      	add	r7, sp, #0
    ff28:	4b03      	ldr	r3, [pc, #12]	; (ff38 <SERCOM0_Handler+0x14>)
    ff2a:	681b      	ldr	r3, [r3, #0]
    ff2c:	2000      	movs	r0, #0
    ff2e:	4798      	blx	r3
    ff30:	46c0      	nop			; (mov r8, r8)
    ff32:	46bd      	mov	sp, r7
    ff34:	bd80      	pop	{r7, pc}
    ff36:	46c0      	nop			; (mov r8, r8)
    ff38:	20000268 	.word	0x20000268

0000ff3c <SERCOM1_Handler>:
    ff3c:	b580      	push	{r7, lr}
    ff3e:	af00      	add	r7, sp, #0
    ff40:	4b03      	ldr	r3, [pc, #12]	; (ff50 <SERCOM1_Handler+0x14>)
    ff42:	685b      	ldr	r3, [r3, #4]
    ff44:	2001      	movs	r0, #1
    ff46:	4798      	blx	r3
    ff48:	46c0      	nop			; (mov r8, r8)
    ff4a:	46bd      	mov	sp, r7
    ff4c:	bd80      	pop	{r7, pc}
    ff4e:	46c0      	nop			; (mov r8, r8)
    ff50:	20000268 	.word	0x20000268

0000ff54 <SERCOM2_Handler>:
    ff54:	b580      	push	{r7, lr}
    ff56:	af00      	add	r7, sp, #0
    ff58:	4b03      	ldr	r3, [pc, #12]	; (ff68 <SERCOM2_Handler+0x14>)
    ff5a:	689b      	ldr	r3, [r3, #8]
    ff5c:	2002      	movs	r0, #2
    ff5e:	4798      	blx	r3
    ff60:	46c0      	nop			; (mov r8, r8)
    ff62:	46bd      	mov	sp, r7
    ff64:	bd80      	pop	{r7, pc}
    ff66:	46c0      	nop			; (mov r8, r8)
    ff68:	20000268 	.word	0x20000268

0000ff6c <SERCOM3_Handler>:
    ff6c:	b580      	push	{r7, lr}
    ff6e:	af00      	add	r7, sp, #0
    ff70:	4b03      	ldr	r3, [pc, #12]	; (ff80 <SERCOM3_Handler+0x14>)
    ff72:	68db      	ldr	r3, [r3, #12]
    ff74:	2003      	movs	r0, #3
    ff76:	4798      	blx	r3
    ff78:	46c0      	nop			; (mov r8, r8)
    ff7a:	46bd      	mov	sp, r7
    ff7c:	bd80      	pop	{r7, pc}
    ff7e:	46c0      	nop			; (mov r8, r8)
    ff80:	20000268 	.word	0x20000268

0000ff84 <SERCOM4_Handler>:
    ff84:	b580      	push	{r7, lr}
    ff86:	af00      	add	r7, sp, #0
    ff88:	4b03      	ldr	r3, [pc, #12]	; (ff98 <SERCOM4_Handler+0x14>)
    ff8a:	691b      	ldr	r3, [r3, #16]
    ff8c:	2004      	movs	r0, #4
    ff8e:	4798      	blx	r3
    ff90:	46c0      	nop			; (mov r8, r8)
    ff92:	46bd      	mov	sp, r7
    ff94:	bd80      	pop	{r7, pc}
    ff96:	46c0      	nop			; (mov r8, r8)
    ff98:	20000268 	.word	0x20000268

0000ff9c <SERCOM5_Handler>:
    ff9c:	b580      	push	{r7, lr}
    ff9e:	af00      	add	r7, sp, #0
    ffa0:	4b03      	ldr	r3, [pc, #12]	; (ffb0 <SERCOM5_Handler+0x14>)
    ffa2:	695b      	ldr	r3, [r3, #20]
    ffa4:	2005      	movs	r0, #5
    ffa6:	4798      	blx	r3
    ffa8:	46c0      	nop			; (mov r8, r8)
    ffaa:	46bd      	mov	sp, r7
    ffac:	bd80      	pop	{r7, pc}
    ffae:	46c0      	nop			; (mov r8, r8)
    ffb0:	20000268 	.word	0x20000268

0000ffb4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    ffb4:	b580      	push	{r7, lr}
    ffb6:	b082      	sub	sp, #8
    ffb8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    ffba:	4b10      	ldr	r3, [pc, #64]	; (fffc <cpu_irq_enter_critical+0x48>)
    ffbc:	681b      	ldr	r3, [r3, #0]
    ffbe:	2b00      	cmp	r3, #0
    ffc0:	d112      	bne.n	ffe8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ffc2:	f3ef 8310 	mrs	r3, PRIMASK
    ffc6:	607b      	str	r3, [r7, #4]
  return(result);
    ffc8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    ffca:	2b00      	cmp	r3, #0
    ffcc:	d109      	bne.n	ffe2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    ffce:	b672      	cpsid	i
    ffd0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    ffd4:	4b0a      	ldr	r3, [pc, #40]	; (10000 <cpu_irq_enter_critical+0x4c>)
    ffd6:	2200      	movs	r2, #0
    ffd8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    ffda:	4b0a      	ldr	r3, [pc, #40]	; (10004 <cpu_irq_enter_critical+0x50>)
    ffdc:	2201      	movs	r2, #1
    ffde:	701a      	strb	r2, [r3, #0]
    ffe0:	e002      	b.n	ffe8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    ffe2:	4b08      	ldr	r3, [pc, #32]	; (10004 <cpu_irq_enter_critical+0x50>)
    ffe4:	2200      	movs	r2, #0
    ffe6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    ffe8:	4b04      	ldr	r3, [pc, #16]	; (fffc <cpu_irq_enter_critical+0x48>)
    ffea:	681b      	ldr	r3, [r3, #0]
    ffec:	1c5a      	adds	r2, r3, #1
    ffee:	4b03      	ldr	r3, [pc, #12]	; (fffc <cpu_irq_enter_critical+0x48>)
    fff0:	601a      	str	r2, [r3, #0]
}
    fff2:	46c0      	nop			; (mov r8, r8)
    fff4:	46bd      	mov	sp, r7
    fff6:	b002      	add	sp, #8
    fff8:	bd80      	pop	{r7, pc}
    fffa:	46c0      	nop			; (mov r8, r8)
    fffc:	20000280 	.word	0x20000280
   10000:	20000014 	.word	0x20000014
   10004:	20000284 	.word	0x20000284

00010008 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   10008:	b580      	push	{r7, lr}
   1000a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   1000c:	4b0b      	ldr	r3, [pc, #44]	; (1003c <cpu_irq_leave_critical+0x34>)
   1000e:	681b      	ldr	r3, [r3, #0]
   10010:	1e5a      	subs	r2, r3, #1
   10012:	4b0a      	ldr	r3, [pc, #40]	; (1003c <cpu_irq_leave_critical+0x34>)
   10014:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   10016:	4b09      	ldr	r3, [pc, #36]	; (1003c <cpu_irq_leave_critical+0x34>)
   10018:	681b      	ldr	r3, [r3, #0]
   1001a:	2b00      	cmp	r3, #0
   1001c:	d10a      	bne.n	10034 <cpu_irq_leave_critical+0x2c>
   1001e:	4b08      	ldr	r3, [pc, #32]	; (10040 <cpu_irq_leave_critical+0x38>)
   10020:	781b      	ldrb	r3, [r3, #0]
   10022:	b2db      	uxtb	r3, r3
   10024:	2b00      	cmp	r3, #0
   10026:	d005      	beq.n	10034 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   10028:	4b06      	ldr	r3, [pc, #24]	; (10044 <cpu_irq_leave_critical+0x3c>)
   1002a:	2201      	movs	r2, #1
   1002c:	701a      	strb	r2, [r3, #0]
   1002e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10032:	b662      	cpsie	i
	}
}
   10034:	46c0      	nop			; (mov r8, r8)
   10036:	46bd      	mov	sp, r7
   10038:	bd80      	pop	{r7, pc}
   1003a:	46c0      	nop			; (mov r8, r8)
   1003c:	20000280 	.word	0x20000280
   10040:	20000284 	.word	0x20000284
   10044:	20000014 	.word	0x20000014

00010048 <system_pinmux_get_group_from_gpio_pin>:
{
   10048:	b580      	push	{r7, lr}
   1004a:	b084      	sub	sp, #16
   1004c:	af00      	add	r7, sp, #0
   1004e:	0002      	movs	r2, r0
   10050:	1dfb      	adds	r3, r7, #7
   10052:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   10054:	230f      	movs	r3, #15
   10056:	18fb      	adds	r3, r7, r3
   10058:	1dfa      	adds	r2, r7, #7
   1005a:	7812      	ldrb	r2, [r2, #0]
   1005c:	09d2      	lsrs	r2, r2, #7
   1005e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   10060:	230e      	movs	r3, #14
   10062:	18fb      	adds	r3, r7, r3
   10064:	1dfa      	adds	r2, r7, #7
   10066:	7812      	ldrb	r2, [r2, #0]
   10068:	0952      	lsrs	r2, r2, #5
   1006a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1006c:	4b0d      	ldr	r3, [pc, #52]	; (100a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1006e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   10070:	230f      	movs	r3, #15
   10072:	18fb      	adds	r3, r7, r3
   10074:	781b      	ldrb	r3, [r3, #0]
   10076:	2b00      	cmp	r3, #0
   10078:	d10f      	bne.n	1009a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1007a:	230f      	movs	r3, #15
   1007c:	18fb      	adds	r3, r7, r3
   1007e:	781b      	ldrb	r3, [r3, #0]
   10080:	009b      	lsls	r3, r3, #2
   10082:	2210      	movs	r2, #16
   10084:	4694      	mov	ip, r2
   10086:	44bc      	add	ip, r7
   10088:	4463      	add	r3, ip
   1008a:	3b08      	subs	r3, #8
   1008c:	681a      	ldr	r2, [r3, #0]
   1008e:	230e      	movs	r3, #14
   10090:	18fb      	adds	r3, r7, r3
   10092:	781b      	ldrb	r3, [r3, #0]
   10094:	01db      	lsls	r3, r3, #7
   10096:	18d3      	adds	r3, r2, r3
   10098:	e000      	b.n	1009c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1009a:	2300      	movs	r3, #0
}
   1009c:	0018      	movs	r0, r3
   1009e:	46bd      	mov	sp, r7
   100a0:	b004      	add	sp, #16
   100a2:	bd80      	pop	{r7, pc}
   100a4:	41004400 	.word	0x41004400

000100a8 <port_get_group_from_gpio_pin>:
{
   100a8:	b580      	push	{r7, lr}
   100aa:	b082      	sub	sp, #8
   100ac:	af00      	add	r7, sp, #0
   100ae:	0002      	movs	r2, r0
   100b0:	1dfb      	adds	r3, r7, #7
   100b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   100b4:	1dfb      	adds	r3, r7, #7
   100b6:	781b      	ldrb	r3, [r3, #0]
   100b8:	0018      	movs	r0, r3
   100ba:	4b03      	ldr	r3, [pc, #12]	; (100c8 <port_get_group_from_gpio_pin+0x20>)
   100bc:	4798      	blx	r3
   100be:	0003      	movs	r3, r0
}
   100c0:	0018      	movs	r0, r3
   100c2:	46bd      	mov	sp, r7
   100c4:	b002      	add	sp, #8
   100c6:	bd80      	pop	{r7, pc}
   100c8:	00010049 	.word	0x00010049

000100cc <port_get_config_defaults>:
{
   100cc:	b580      	push	{r7, lr}
   100ce:	b082      	sub	sp, #8
   100d0:	af00      	add	r7, sp, #0
   100d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   100d4:	687b      	ldr	r3, [r7, #4]
   100d6:	2200      	movs	r2, #0
   100d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   100da:	687b      	ldr	r3, [r7, #4]
   100dc:	2201      	movs	r2, #1
   100de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   100e0:	687b      	ldr	r3, [r7, #4]
   100e2:	2200      	movs	r2, #0
   100e4:	709a      	strb	r2, [r3, #2]
}
   100e6:	46c0      	nop			; (mov r8, r8)
   100e8:	46bd      	mov	sp, r7
   100ea:	b002      	add	sp, #8
   100ec:	bd80      	pop	{r7, pc}
	...

000100f0 <port_pin_set_output_level>:
{
   100f0:	b580      	push	{r7, lr}
   100f2:	b084      	sub	sp, #16
   100f4:	af00      	add	r7, sp, #0
   100f6:	0002      	movs	r2, r0
   100f8:	1dfb      	adds	r3, r7, #7
   100fa:	701a      	strb	r2, [r3, #0]
   100fc:	1dbb      	adds	r3, r7, #6
   100fe:	1c0a      	adds	r2, r1, #0
   10100:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   10102:	1dfb      	adds	r3, r7, #7
   10104:	781b      	ldrb	r3, [r3, #0]
   10106:	0018      	movs	r0, r3
   10108:	4b0d      	ldr	r3, [pc, #52]	; (10140 <port_pin_set_output_level+0x50>)
   1010a:	4798      	blx	r3
   1010c:	0003      	movs	r3, r0
   1010e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10110:	1dfb      	adds	r3, r7, #7
   10112:	781b      	ldrb	r3, [r3, #0]
   10114:	221f      	movs	r2, #31
   10116:	4013      	ands	r3, r2
   10118:	2201      	movs	r2, #1
   1011a:	409a      	lsls	r2, r3
   1011c:	0013      	movs	r3, r2
   1011e:	60bb      	str	r3, [r7, #8]
	if (level) {
   10120:	1dbb      	adds	r3, r7, #6
   10122:	781b      	ldrb	r3, [r3, #0]
   10124:	2b00      	cmp	r3, #0
   10126:	d003      	beq.n	10130 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   10128:	68fb      	ldr	r3, [r7, #12]
   1012a:	68ba      	ldr	r2, [r7, #8]
   1012c:	619a      	str	r2, [r3, #24]
}
   1012e:	e002      	b.n	10136 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   10130:	68fb      	ldr	r3, [r7, #12]
   10132:	68ba      	ldr	r2, [r7, #8]
   10134:	615a      	str	r2, [r3, #20]
}
   10136:	46c0      	nop			; (mov r8, r8)
   10138:	46bd      	mov	sp, r7
   1013a:	b004      	add	sp, #16
   1013c:	bd80      	pop	{r7, pc}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	000100a9 	.word	0x000100a9

00010144 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   10144:	b580      	push	{r7, lr}
   10146:	b082      	sub	sp, #8
   10148:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1014a:	1d3b      	adds	r3, r7, #4
   1014c:	0018      	movs	r0, r3
   1014e:	4b0e      	ldr	r3, [pc, #56]	; (10188 <system_board_init+0x44>)
   10150:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   10152:	1d3b      	adds	r3, r7, #4
   10154:	2201      	movs	r2, #1
   10156:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   10158:	1d3b      	adds	r3, r7, #4
   1015a:	0019      	movs	r1, r3
   1015c:	2017      	movs	r0, #23
   1015e:	4b0b      	ldr	r3, [pc, #44]	; (1018c <system_board_init+0x48>)
   10160:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   10162:	2101      	movs	r1, #1
   10164:	2017      	movs	r0, #23
   10166:	4b0a      	ldr	r3, [pc, #40]	; (10190 <system_board_init+0x4c>)
   10168:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1016a:	1d3b      	adds	r3, r7, #4
   1016c:	2200      	movs	r2, #0
   1016e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   10170:	1d3b      	adds	r3, r7, #4
   10172:	2201      	movs	r2, #1
   10174:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   10176:	1d3b      	adds	r3, r7, #4
   10178:	0019      	movs	r1, r3
   1017a:	2037      	movs	r0, #55	; 0x37
   1017c:	4b03      	ldr	r3, [pc, #12]	; (1018c <system_board_init+0x48>)
   1017e:	4798      	blx	r3
}
   10180:	46c0      	nop			; (mov r8, r8)
   10182:	46bd      	mov	sp, r7
   10184:	b002      	add	sp, #8
   10186:	bd80      	pop	{r7, pc}
   10188:	000100cd 	.word	0x000100cd
   1018c:	000101bd 	.word	0x000101bd
   10190:	000100f1 	.word	0x000100f1

00010194 <system_pinmux_get_config_defaults>:
{
   10194:	b580      	push	{r7, lr}
   10196:	b082      	sub	sp, #8
   10198:	af00      	add	r7, sp, #0
   1019a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1019c:	687b      	ldr	r3, [r7, #4]
   1019e:	2280      	movs	r2, #128	; 0x80
   101a0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   101a2:	687b      	ldr	r3, [r7, #4]
   101a4:	2200      	movs	r2, #0
   101a6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   101a8:	687b      	ldr	r3, [r7, #4]
   101aa:	2201      	movs	r2, #1
   101ac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   101ae:	687b      	ldr	r3, [r7, #4]
   101b0:	2200      	movs	r2, #0
   101b2:	70da      	strb	r2, [r3, #3]
}
   101b4:	46c0      	nop			; (mov r8, r8)
   101b6:	46bd      	mov	sp, r7
   101b8:	b002      	add	sp, #8
   101ba:	bd80      	pop	{r7, pc}

000101bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   101bc:	b580      	push	{r7, lr}
   101be:	b084      	sub	sp, #16
   101c0:	af00      	add	r7, sp, #0
   101c2:	0002      	movs	r2, r0
   101c4:	6039      	str	r1, [r7, #0]
   101c6:	1dfb      	adds	r3, r7, #7
   101c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   101ca:	230c      	movs	r3, #12
   101cc:	18fb      	adds	r3, r7, r3
   101ce:	0018      	movs	r0, r3
   101d0:	4b10      	ldr	r3, [pc, #64]	; (10214 <port_pin_set_config+0x58>)
   101d2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   101d4:	230c      	movs	r3, #12
   101d6:	18fb      	adds	r3, r7, r3
   101d8:	2280      	movs	r2, #128	; 0x80
   101da:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   101dc:	683b      	ldr	r3, [r7, #0]
   101de:	781a      	ldrb	r2, [r3, #0]
   101e0:	230c      	movs	r3, #12
   101e2:	18fb      	adds	r3, r7, r3
   101e4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   101e6:	683b      	ldr	r3, [r7, #0]
   101e8:	785a      	ldrb	r2, [r3, #1]
   101ea:	230c      	movs	r3, #12
   101ec:	18fb      	adds	r3, r7, r3
   101ee:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   101f0:	683b      	ldr	r3, [r7, #0]
   101f2:	789a      	ldrb	r2, [r3, #2]
   101f4:	230c      	movs	r3, #12
   101f6:	18fb      	adds	r3, r7, r3
   101f8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   101fa:	230c      	movs	r3, #12
   101fc:	18fa      	adds	r2, r7, r3
   101fe:	1dfb      	adds	r3, r7, #7
   10200:	781b      	ldrb	r3, [r3, #0]
   10202:	0011      	movs	r1, r2
   10204:	0018      	movs	r0, r3
   10206:	4b04      	ldr	r3, [pc, #16]	; (10218 <port_pin_set_config+0x5c>)
   10208:	4798      	blx	r3
}
   1020a:	46c0      	nop			; (mov r8, r8)
   1020c:	46bd      	mov	sp, r7
   1020e:	b004      	add	sp, #16
   10210:	bd80      	pop	{r7, pc}
   10212:	46c0      	nop			; (mov r8, r8)
   10214:	00010195 	.word	0x00010195
   10218:	00011145 	.word	0x00011145

0001021c <system_gclk_gen_get_config_defaults>:
{
   1021c:	b580      	push	{r7, lr}
   1021e:	b082      	sub	sp, #8
   10220:	af00      	add	r7, sp, #0
   10222:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   10224:	687b      	ldr	r3, [r7, #4]
   10226:	2201      	movs	r2, #1
   10228:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1022a:	687b      	ldr	r3, [r7, #4]
   1022c:	2200      	movs	r2, #0
   1022e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   10230:	687b      	ldr	r3, [r7, #4]
   10232:	2206      	movs	r2, #6
   10234:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   10236:	687b      	ldr	r3, [r7, #4]
   10238:	2200      	movs	r2, #0
   1023a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1023c:	687b      	ldr	r3, [r7, #4]
   1023e:	2200      	movs	r2, #0
   10240:	725a      	strb	r2, [r3, #9]
}
   10242:	46c0      	nop			; (mov r8, r8)
   10244:	46bd      	mov	sp, r7
   10246:	b002      	add	sp, #8
   10248:	bd80      	pop	{r7, pc}

0001024a <system_gclk_chan_get_config_defaults>:
{
   1024a:	b580      	push	{r7, lr}
   1024c:	b082      	sub	sp, #8
   1024e:	af00      	add	r7, sp, #0
   10250:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   10252:	687b      	ldr	r3, [r7, #4]
   10254:	2200      	movs	r2, #0
   10256:	701a      	strb	r2, [r3, #0]
}
   10258:	46c0      	nop			; (mov r8, r8)
   1025a:	46bd      	mov	sp, r7
   1025c:	b002      	add	sp, #8
   1025e:	bd80      	pop	{r7, pc}

00010260 <system_clock_source_xosc32k_get_config_defaults>:
{
   10260:	b580      	push	{r7, lr}
   10262:	b082      	sub	sp, #8
   10264:	af00      	add	r7, sp, #0
   10266:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   10268:	687b      	ldr	r3, [r7, #4]
   1026a:	2200      	movs	r2, #0
   1026c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   1026e:	687b      	ldr	r3, [r7, #4]
   10270:	2204      	movs	r2, #4
   10272:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   10274:	687b      	ldr	r3, [r7, #4]
   10276:	2200      	movs	r2, #0
   10278:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   1027a:	687b      	ldr	r3, [r7, #4]
   1027c:	2280      	movs	r2, #128	; 0x80
   1027e:	0212      	lsls	r2, r2, #8
   10280:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   10282:	687b      	ldr	r3, [r7, #4]
   10284:	2200      	movs	r2, #0
   10286:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   10288:	687b      	ldr	r3, [r7, #4]
   1028a:	2201      	movs	r2, #1
   1028c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   1028e:	687b      	ldr	r3, [r7, #4]
   10290:	2200      	movs	r2, #0
   10292:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   10294:	687b      	ldr	r3, [r7, #4]
   10296:	2201      	movs	r2, #1
   10298:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   1029a:	687b      	ldr	r3, [r7, #4]
   1029c:	2200      	movs	r2, #0
   1029e:	739a      	strb	r2, [r3, #14]
}
   102a0:	46c0      	nop			; (mov r8, r8)
   102a2:	46bd      	mov	sp, r7
   102a4:	b002      	add	sp, #8
   102a6:	bd80      	pop	{r7, pc}

000102a8 <system_clock_source_osc8m_get_config_defaults>:
{
   102a8:	b580      	push	{r7, lr}
   102aa:	b082      	sub	sp, #8
   102ac:	af00      	add	r7, sp, #0
   102ae:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   102b0:	687b      	ldr	r3, [r7, #4]
   102b2:	2203      	movs	r2, #3
   102b4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   102b6:	687b      	ldr	r3, [r7, #4]
   102b8:	2200      	movs	r2, #0
   102ba:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   102bc:	687b      	ldr	r3, [r7, #4]
   102be:	2201      	movs	r2, #1
   102c0:	709a      	strb	r2, [r3, #2]
}
   102c2:	46c0      	nop			; (mov r8, r8)
   102c4:	46bd      	mov	sp, r7
   102c6:	b002      	add	sp, #8
   102c8:	bd80      	pop	{r7, pc}

000102ca <system_clock_source_dfll_get_config_defaults>:
{
   102ca:	b580      	push	{r7, lr}
   102cc:	b082      	sub	sp, #8
   102ce:	af00      	add	r7, sp, #0
   102d0:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   102d2:	687b      	ldr	r3, [r7, #4]
   102d4:	2200      	movs	r2, #0
   102d6:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   102d8:	687b      	ldr	r3, [r7, #4]
   102da:	2200      	movs	r2, #0
   102dc:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   102de:	687b      	ldr	r3, [r7, #4]
   102e0:	2200      	movs	r2, #0
   102e2:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   102e4:	687b      	ldr	r3, [r7, #4]
   102e6:	2200      	movs	r2, #0
   102e8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   102ea:	687b      	ldr	r3, [r7, #4]
   102ec:	2200      	movs	r2, #0
   102ee:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   102f0:	687b      	ldr	r3, [r7, #4]
   102f2:	2201      	movs	r2, #1
   102f4:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   102f6:	687b      	ldr	r3, [r7, #4]
   102f8:	2207      	movs	r2, #7
   102fa:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   102fc:	687b      	ldr	r3, [r7, #4]
   102fe:	223f      	movs	r2, #63	; 0x3f
   10300:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   10302:	687b      	ldr	r3, [r7, #4]
   10304:	2201      	movs	r2, #1
   10306:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   10308:	687b      	ldr	r3, [r7, #4]
   1030a:	2201      	movs	r2, #1
   1030c:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   1030e:	687b      	ldr	r3, [r7, #4]
   10310:	2206      	movs	r2, #6
   10312:	821a      	strh	r2, [r3, #16]
}
   10314:	46c0      	nop			; (mov r8, r8)
   10316:	46bd      	mov	sp, r7
   10318:	b002      	add	sp, #8
   1031a:	bd80      	pop	{r7, pc}

0001031c <system_cpu_clock_set_divider>:
{
   1031c:	b580      	push	{r7, lr}
   1031e:	b082      	sub	sp, #8
   10320:	af00      	add	r7, sp, #0
   10322:	0002      	movs	r2, r0
   10324:	1dfb      	adds	r3, r7, #7
   10326:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   10328:	4a03      	ldr	r2, [pc, #12]	; (10338 <system_cpu_clock_set_divider+0x1c>)
   1032a:	1dfb      	adds	r3, r7, #7
   1032c:	781b      	ldrb	r3, [r3, #0]
   1032e:	7213      	strb	r3, [r2, #8]
}
   10330:	46c0      	nop			; (mov r8, r8)
   10332:	46bd      	mov	sp, r7
   10334:	b002      	add	sp, #8
   10336:	bd80      	pop	{r7, pc}
   10338:	40000400 	.word	0x40000400

0001033c <system_apb_clock_set_divider>:
{
   1033c:	b580      	push	{r7, lr}
   1033e:	b082      	sub	sp, #8
   10340:	af00      	add	r7, sp, #0
   10342:	0002      	movs	r2, r0
   10344:	1dfb      	adds	r3, r7, #7
   10346:	701a      	strb	r2, [r3, #0]
   10348:	1dbb      	adds	r3, r7, #6
   1034a:	1c0a      	adds	r2, r1, #0
   1034c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1034e:	1dfb      	adds	r3, r7, #7
   10350:	781b      	ldrb	r3, [r3, #0]
   10352:	2b01      	cmp	r3, #1
   10354:	d008      	beq.n	10368 <system_apb_clock_set_divider+0x2c>
   10356:	2b02      	cmp	r3, #2
   10358:	d00b      	beq.n	10372 <system_apb_clock_set_divider+0x36>
   1035a:	2b00      	cmp	r3, #0
   1035c:	d10e      	bne.n	1037c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   1035e:	4a0b      	ldr	r2, [pc, #44]	; (1038c <system_apb_clock_set_divider+0x50>)
   10360:	1dbb      	adds	r3, r7, #6
   10362:	781b      	ldrb	r3, [r3, #0]
   10364:	7253      	strb	r3, [r2, #9]
			break;
   10366:	e00b      	b.n	10380 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   10368:	4a08      	ldr	r2, [pc, #32]	; (1038c <system_apb_clock_set_divider+0x50>)
   1036a:	1dbb      	adds	r3, r7, #6
   1036c:	781b      	ldrb	r3, [r3, #0]
   1036e:	7293      	strb	r3, [r2, #10]
			break;
   10370:	e006      	b.n	10380 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   10372:	4a06      	ldr	r2, [pc, #24]	; (1038c <system_apb_clock_set_divider+0x50>)
   10374:	1dbb      	adds	r3, r7, #6
   10376:	781b      	ldrb	r3, [r3, #0]
   10378:	72d3      	strb	r3, [r2, #11]
			break;
   1037a:	e001      	b.n	10380 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   1037c:	2317      	movs	r3, #23
   1037e:	e000      	b.n	10382 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   10380:	2300      	movs	r3, #0
}
   10382:	0018      	movs	r0, r3
   10384:	46bd      	mov	sp, r7
   10386:	b002      	add	sp, #8
   10388:	bd80      	pop	{r7, pc}
   1038a:	46c0      	nop			; (mov r8, r8)
   1038c:	40000400 	.word	0x40000400

00010390 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   10390:	b580      	push	{r7, lr}
   10392:	b082      	sub	sp, #8
   10394:	af00      	add	r7, sp, #0
   10396:	0002      	movs	r2, r0
   10398:	1dfb      	adds	r3, r7, #7
   1039a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1039c:	4a08      	ldr	r2, [pc, #32]	; (103c0 <system_flash_set_waitstates+0x30>)
   1039e:	1dfb      	adds	r3, r7, #7
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	210f      	movs	r1, #15
   103a4:	400b      	ands	r3, r1
   103a6:	b2d9      	uxtb	r1, r3
   103a8:	6853      	ldr	r3, [r2, #4]
   103aa:	200f      	movs	r0, #15
   103ac:	4001      	ands	r1, r0
   103ae:	0049      	lsls	r1, r1, #1
   103b0:	201e      	movs	r0, #30
   103b2:	4383      	bics	r3, r0
   103b4:	430b      	orrs	r3, r1
   103b6:	6053      	str	r3, [r2, #4]
}
   103b8:	46c0      	nop			; (mov r8, r8)
   103ba:	46bd      	mov	sp, r7
   103bc:	b002      	add	sp, #8
   103be:	bd80      	pop	{r7, pc}
   103c0:	41004000 	.word	0x41004000

000103c4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   103c4:	b580      	push	{r7, lr}
   103c6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   103c8:	46c0      	nop			; (mov r8, r8)
   103ca:	4b04      	ldr	r3, [pc, #16]	; (103dc <_system_dfll_wait_for_sync+0x18>)
   103cc:	68db      	ldr	r3, [r3, #12]
   103ce:	2210      	movs	r2, #16
   103d0:	4013      	ands	r3, r2
   103d2:	d0fa      	beq.n	103ca <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   103d4:	46c0      	nop			; (mov r8, r8)
   103d6:	46bd      	mov	sp, r7
   103d8:	bd80      	pop	{r7, pc}
   103da:	46c0      	nop			; (mov r8, r8)
   103dc:	40000800 	.word	0x40000800

000103e0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   103e0:	b580      	push	{r7, lr}
   103e2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   103e4:	4b0c      	ldr	r3, [pc, #48]	; (10418 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   103e6:	2202      	movs	r2, #2
   103e8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   103ea:	4b0c      	ldr	r3, [pc, #48]	; (1041c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   103ec:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   103ee:	4a0a      	ldr	r2, [pc, #40]	; (10418 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   103f0:	4b0b      	ldr	r3, [pc, #44]	; (10420 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   103f2:	689b      	ldr	r3, [r3, #8]
   103f4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   103f6:	4a08      	ldr	r2, [pc, #32]	; (10418 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   103f8:	4b09      	ldr	r3, [pc, #36]	; (10420 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   103fa:	685b      	ldr	r3, [r3, #4]
   103fc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   103fe:	4b06      	ldr	r3, [pc, #24]	; (10418 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   10400:	2200      	movs	r2, #0
   10402:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   10404:	4b05      	ldr	r3, [pc, #20]	; (1041c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   10406:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   10408:	4a03      	ldr	r2, [pc, #12]	; (10418 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1040a:	4b05      	ldr	r3, [pc, #20]	; (10420 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1040c:	681b      	ldr	r3, [r3, #0]
   1040e:	b29b      	uxth	r3, r3
   10410:	8493      	strh	r3, [r2, #36]	; 0x24
}
   10412:	46c0      	nop			; (mov r8, r8)
   10414:	46bd      	mov	sp, r7
   10416:	bd80      	pop	{r7, pc}
   10418:	40000800 	.word	0x40000800
   1041c:	000103c5 	.word	0x000103c5
   10420:	20000288 	.word	0x20000288

00010424 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   10424:	b580      	push	{r7, lr}
   10426:	b082      	sub	sp, #8
   10428:	af00      	add	r7, sp, #0
   1042a:	0002      	movs	r2, r0
   1042c:	1dfb      	adds	r3, r7, #7
   1042e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   10430:	1dfb      	adds	r3, r7, #7
   10432:	781b      	ldrb	r3, [r3, #0]
   10434:	2b08      	cmp	r3, #8
   10436:	d840      	bhi.n	104ba <system_clock_source_get_hz+0x96>
   10438:	009a      	lsls	r2, r3, #2
   1043a:	4b22      	ldr	r3, [pc, #136]	; (104c4 <system_clock_source_get_hz+0xa0>)
   1043c:	18d3      	adds	r3, r2, r3
   1043e:	681b      	ldr	r3, [r3, #0]
   10440:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   10442:	4b21      	ldr	r3, [pc, #132]	; (104c8 <system_clock_source_get_hz+0xa4>)
   10444:	691b      	ldr	r3, [r3, #16]
   10446:	e039      	b.n	104bc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   10448:	4b20      	ldr	r3, [pc, #128]	; (104cc <system_clock_source_get_hz+0xa8>)
   1044a:	6a1b      	ldr	r3, [r3, #32]
   1044c:	059b      	lsls	r3, r3, #22
   1044e:	0f9b      	lsrs	r3, r3, #30
   10450:	b2db      	uxtb	r3, r3
   10452:	001a      	movs	r2, r3
   10454:	4b1e      	ldr	r3, [pc, #120]	; (104d0 <system_clock_source_get_hz+0xac>)
   10456:	40d3      	lsrs	r3, r2
   10458:	e030      	b.n	104bc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1045a:	2380      	movs	r3, #128	; 0x80
   1045c:	021b      	lsls	r3, r3, #8
   1045e:	e02d      	b.n	104bc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   10460:	2380      	movs	r3, #128	; 0x80
   10462:	021b      	lsls	r3, r3, #8
   10464:	e02a      	b.n	104bc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   10466:	4b18      	ldr	r3, [pc, #96]	; (104c8 <system_clock_source_get_hz+0xa4>)
   10468:	695b      	ldr	r3, [r3, #20]
   1046a:	e027      	b.n	104bc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1046c:	4b16      	ldr	r3, [pc, #88]	; (104c8 <system_clock_source_get_hz+0xa4>)
   1046e:	681b      	ldr	r3, [r3, #0]
   10470:	2202      	movs	r2, #2
   10472:	4013      	ands	r3, r2
   10474:	d101      	bne.n	1047a <system_clock_source_get_hz+0x56>
			return 0;
   10476:	2300      	movs	r3, #0
   10478:	e020      	b.n	104bc <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   1047a:	4b16      	ldr	r3, [pc, #88]	; (104d4 <system_clock_source_get_hz+0xb0>)
   1047c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   1047e:	4b12      	ldr	r3, [pc, #72]	; (104c8 <system_clock_source_get_hz+0xa4>)
   10480:	681b      	ldr	r3, [r3, #0]
   10482:	2204      	movs	r2, #4
   10484:	4013      	ands	r3, r2
   10486:	d009      	beq.n	1049c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10488:	2000      	movs	r0, #0
   1048a:	4b13      	ldr	r3, [pc, #76]	; (104d8 <system_clock_source_get_hz+0xb4>)
   1048c:	4798      	blx	r3
   1048e:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   10490:	4b0d      	ldr	r3, [pc, #52]	; (104c8 <system_clock_source_get_hz+0xa4>)
   10492:	689b      	ldr	r3, [r3, #8]
   10494:	041b      	lsls	r3, r3, #16
   10496:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10498:	4353      	muls	r3, r2
   1049a:	e00f      	b.n	104bc <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
   1049c:	4b0f      	ldr	r3, [pc, #60]	; (104dc <system_clock_source_get_hz+0xb8>)
   1049e:	e00d      	b.n	104bc <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   104a0:	4a0a      	ldr	r2, [pc, #40]	; (104cc <system_clock_source_get_hz+0xa8>)
   104a2:	2350      	movs	r3, #80	; 0x50
   104a4:	5cd3      	ldrb	r3, [r2, r3]
   104a6:	b2db      	uxtb	r3, r3
   104a8:	001a      	movs	r2, r3
   104aa:	2304      	movs	r3, #4
   104ac:	4013      	ands	r3, r2
   104ae:	d101      	bne.n	104b4 <system_clock_source_get_hz+0x90>
			return 0;
   104b0:	2300      	movs	r3, #0
   104b2:	e003      	b.n	104bc <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
   104b4:	4b04      	ldr	r3, [pc, #16]	; (104c8 <system_clock_source_get_hz+0xa4>)
   104b6:	68db      	ldr	r3, [r3, #12]
   104b8:	e000      	b.n	104bc <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
   104ba:	2300      	movs	r3, #0
	}
}
   104bc:	0018      	movs	r0, r3
   104be:	46bd      	mov	sp, r7
   104c0:	b002      	add	sp, #8
   104c2:	bd80      	pop	{r7, pc}
   104c4:	00019eac 	.word	0x00019eac
   104c8:	20000288 	.word	0x20000288
   104cc:	40000800 	.word	0x40000800
   104d0:	007a1200 	.word	0x007a1200
   104d4:	000103c5 	.word	0x000103c5
   104d8:	00010f7d 	.word	0x00010f7d
   104dc:	02dc6c00 	.word	0x02dc6c00

000104e0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   104e0:	b580      	push	{r7, lr}
   104e2:	b084      	sub	sp, #16
   104e4:	af00      	add	r7, sp, #0
   104e6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   104e8:	4b1a      	ldr	r3, [pc, #104]	; (10554 <system_clock_source_osc8m_set_config+0x74>)
   104ea:	6a1b      	ldr	r3, [r3, #32]
   104ec:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   104ee:	687b      	ldr	r3, [r7, #4]
   104f0:	781b      	ldrb	r3, [r3, #0]
   104f2:	1c1a      	adds	r2, r3, #0
   104f4:	2303      	movs	r3, #3
   104f6:	4013      	ands	r3, r2
   104f8:	b2da      	uxtb	r2, r3
   104fa:	230d      	movs	r3, #13
   104fc:	18fb      	adds	r3, r7, r3
   104fe:	2103      	movs	r1, #3
   10500:	400a      	ands	r2, r1
   10502:	0010      	movs	r0, r2
   10504:	781a      	ldrb	r2, [r3, #0]
   10506:	2103      	movs	r1, #3
   10508:	438a      	bics	r2, r1
   1050a:	1c11      	adds	r1, r2, #0
   1050c:	1c02      	adds	r2, r0, #0
   1050e:	430a      	orrs	r2, r1
   10510:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   10512:	687b      	ldr	r3, [r7, #4]
   10514:	789a      	ldrb	r2, [r3, #2]
   10516:	230c      	movs	r3, #12
   10518:	18fb      	adds	r3, r7, r3
   1051a:	01d0      	lsls	r0, r2, #7
   1051c:	781a      	ldrb	r2, [r3, #0]
   1051e:	217f      	movs	r1, #127	; 0x7f
   10520:	400a      	ands	r2, r1
   10522:	1c11      	adds	r1, r2, #0
   10524:	1c02      	adds	r2, r0, #0
   10526:	430a      	orrs	r2, r1
   10528:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1052a:	687b      	ldr	r3, [r7, #4]
   1052c:	785a      	ldrb	r2, [r3, #1]
   1052e:	230c      	movs	r3, #12
   10530:	18fb      	adds	r3, r7, r3
   10532:	2101      	movs	r1, #1
   10534:	400a      	ands	r2, r1
   10536:	0190      	lsls	r0, r2, #6
   10538:	781a      	ldrb	r2, [r3, #0]
   1053a:	2140      	movs	r1, #64	; 0x40
   1053c:	438a      	bics	r2, r1
   1053e:	1c11      	adds	r1, r2, #0
   10540:	1c02      	adds	r2, r0, #0
   10542:	430a      	orrs	r2, r1
   10544:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   10546:	4b03      	ldr	r3, [pc, #12]	; (10554 <system_clock_source_osc8m_set_config+0x74>)
   10548:	68fa      	ldr	r2, [r7, #12]
   1054a:	621a      	str	r2, [r3, #32]
}
   1054c:	46c0      	nop			; (mov r8, r8)
   1054e:	46bd      	mov	sp, r7
   10550:	b004      	add	sp, #16
   10552:	bd80      	pop	{r7, pc}
   10554:	40000800 	.word	0x40000800

00010558 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   10558:	b580      	push	{r7, lr}
   1055a:	b084      	sub	sp, #16
   1055c:	af00      	add	r7, sp, #0
   1055e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   10560:	4a43      	ldr	r2, [pc, #268]	; (10670 <system_clock_source_xosc32k_set_config+0x118>)
   10562:	230c      	movs	r3, #12
   10564:	18fb      	adds	r3, r7, r3
   10566:	8a92      	ldrh	r2, [r2, #20]
   10568:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   1056a:	687b      	ldr	r3, [r7, #4]
   1056c:	785b      	ldrb	r3, [r3, #1]
   1056e:	1c1a      	adds	r2, r3, #0
   10570:	2307      	movs	r3, #7
   10572:	4013      	ands	r3, r2
   10574:	b2da      	uxtb	r2, r3
   10576:	230c      	movs	r3, #12
   10578:	18fb      	adds	r3, r7, r3
   1057a:	2107      	movs	r1, #7
   1057c:	400a      	ands	r2, r1
   1057e:	0010      	movs	r0, r2
   10580:	785a      	ldrb	r2, [r3, #1]
   10582:	2107      	movs	r1, #7
   10584:	438a      	bics	r2, r1
   10586:	1c11      	adds	r1, r2, #0
   10588:	1c02      	adds	r2, r0, #0
   1058a:	430a      	orrs	r2, r1
   1058c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   1058e:	687b      	ldr	r3, [r7, #4]
   10590:	781b      	ldrb	r3, [r3, #0]
   10592:	2b00      	cmp	r3, #0
   10594:	d106      	bne.n	105a4 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   10596:	230c      	movs	r3, #12
   10598:	18fb      	adds	r3, r7, r3
   1059a:	781a      	ldrb	r2, [r3, #0]
   1059c:	2104      	movs	r1, #4
   1059e:	430a      	orrs	r2, r1
   105a0:	701a      	strb	r2, [r3, #0]
   105a2:	e005      	b.n	105b0 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   105a4:	230c      	movs	r3, #12
   105a6:	18fb      	adds	r3, r7, r3
   105a8:	781a      	ldrb	r2, [r3, #0]
   105aa:	2104      	movs	r1, #4
   105ac:	438a      	bics	r2, r1
   105ae:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   105b0:	687b      	ldr	r3, [r7, #4]
   105b2:	789a      	ldrb	r2, [r3, #2]
   105b4:	230c      	movs	r3, #12
   105b6:	18fb      	adds	r3, r7, r3
   105b8:	2101      	movs	r1, #1
   105ba:	400a      	ands	r2, r1
   105bc:	0150      	lsls	r0, r2, #5
   105be:	781a      	ldrb	r2, [r3, #0]
   105c0:	2120      	movs	r1, #32
   105c2:	438a      	bics	r2, r1
   105c4:	1c11      	adds	r1, r2, #0
   105c6:	1c02      	adds	r2, r0, #0
   105c8:	430a      	orrs	r2, r1
   105ca:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   105cc:	687b      	ldr	r3, [r7, #4]
   105ce:	78da      	ldrb	r2, [r3, #3]
   105d0:	230c      	movs	r3, #12
   105d2:	18fb      	adds	r3, r7, r3
   105d4:	2101      	movs	r1, #1
   105d6:	400a      	ands	r2, r1
   105d8:	0110      	lsls	r0, r2, #4
   105da:	781a      	ldrb	r2, [r3, #0]
   105dc:	2110      	movs	r1, #16
   105de:	438a      	bics	r2, r1
   105e0:	1c11      	adds	r1, r2, #0
   105e2:	1c02      	adds	r2, r0, #0
   105e4:	430a      	orrs	r2, r1
   105e6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   105e8:	687b      	ldr	r3, [r7, #4]
   105ea:	791a      	ldrb	r2, [r3, #4]
   105ec:	230c      	movs	r3, #12
   105ee:	18fb      	adds	r3, r7, r3
   105f0:	2101      	movs	r1, #1
   105f2:	400a      	ands	r2, r1
   105f4:	00d0      	lsls	r0, r2, #3
   105f6:	781a      	ldrb	r2, [r3, #0]
   105f8:	2108      	movs	r1, #8
   105fa:	438a      	bics	r2, r1
   105fc:	1c11      	adds	r1, r2, #0
   105fe:	1c02      	adds	r2, r0, #0
   10600:	430a      	orrs	r2, r1
   10602:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   10604:	687b      	ldr	r3, [r7, #4]
   10606:	7b5a      	ldrb	r2, [r3, #13]
   10608:	230c      	movs	r3, #12
   1060a:	18fb      	adds	r3, r7, r3
   1060c:	01d0      	lsls	r0, r2, #7
   1060e:	781a      	ldrb	r2, [r3, #0]
   10610:	217f      	movs	r1, #127	; 0x7f
   10612:	400a      	ands	r2, r1
   10614:	1c11      	adds	r1, r2, #0
   10616:	1c02      	adds	r2, r0, #0
   10618:	430a      	orrs	r2, r1
   1061a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1061c:	687b      	ldr	r3, [r7, #4]
   1061e:	7b1a      	ldrb	r2, [r3, #12]
   10620:	230c      	movs	r3, #12
   10622:	18fb      	adds	r3, r7, r3
   10624:	2101      	movs	r1, #1
   10626:	400a      	ands	r2, r1
   10628:	0190      	lsls	r0, r2, #6
   1062a:	781a      	ldrb	r2, [r3, #0]
   1062c:	2140      	movs	r1, #64	; 0x40
   1062e:	438a      	bics	r2, r1
   10630:	1c11      	adds	r1, r2, #0
   10632:	1c02      	adds	r2, r0, #0
   10634:	430a      	orrs	r2, r1
   10636:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   10638:	687b      	ldr	r3, [r7, #4]
   1063a:	7b9a      	ldrb	r2, [r3, #14]
   1063c:	230c      	movs	r3, #12
   1063e:	18fb      	adds	r3, r7, r3
   10640:	2101      	movs	r1, #1
   10642:	400a      	ands	r2, r1
   10644:	0110      	lsls	r0, r2, #4
   10646:	785a      	ldrb	r2, [r3, #1]
   10648:	2110      	movs	r1, #16
   1064a:	438a      	bics	r2, r1
   1064c:	1c11      	adds	r1, r2, #0
   1064e:	1c02      	adds	r2, r0, #0
   10650:	430a      	orrs	r2, r1
   10652:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   10654:	687b      	ldr	r3, [r7, #4]
   10656:	689a      	ldr	r2, [r3, #8]
   10658:	4b06      	ldr	r3, [pc, #24]	; (10674 <system_clock_source_xosc32k_set_config+0x11c>)
   1065a:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   1065c:	4a04      	ldr	r2, [pc, #16]	; (10670 <system_clock_source_xosc32k_set_config+0x118>)
   1065e:	230c      	movs	r3, #12
   10660:	18fb      	adds	r3, r7, r3
   10662:	881b      	ldrh	r3, [r3, #0]
   10664:	8293      	strh	r3, [r2, #20]
}
   10666:	46c0      	nop			; (mov r8, r8)
   10668:	46bd      	mov	sp, r7
   1066a:	b004      	add	sp, #16
   1066c:	bd80      	pop	{r7, pc}
   1066e:	46c0      	nop			; (mov r8, r8)
   10670:	40000800 	.word	0x40000800
   10674:	20000288 	.word	0x20000288

00010678 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   10678:	b580      	push	{r7, lr}
   1067a:	b082      	sub	sp, #8
   1067c:	af00      	add	r7, sp, #0
   1067e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   10680:	687b      	ldr	r3, [r7, #4]
   10682:	7a1b      	ldrb	r3, [r3, #8]
   10684:	029b      	lsls	r3, r3, #10
   10686:	041b      	lsls	r3, r3, #16
   10688:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   1068a:	687b      	ldr	r3, [r7, #4]
   1068c:	895b      	ldrh	r3, [r3, #10]
   1068e:	059b      	lsls	r3, r3, #22
   10690:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   10692:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   10694:	4b2a      	ldr	r3, [pc, #168]	; (10740 <system_clock_source_dfll_set_config+0xc8>)
   10696:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   10698:	687b      	ldr	r3, [r7, #4]
   1069a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   1069c:	687b      	ldr	r3, [r7, #4]
   1069e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   106a0:	4313      	orrs	r3, r2
   106a2:	b2db      	uxtb	r3, r3
   106a4:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   106a6:	687b      	ldr	r3, [r7, #4]
   106a8:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   106aa:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   106ac:	687a      	ldr	r2, [r7, #4]
   106ae:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   106b0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   106b2:	687b      	ldr	r3, [r7, #4]
   106b4:	785b      	ldrb	r3, [r3, #1]
   106b6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   106b8:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   106ba:	4b21      	ldr	r3, [pc, #132]	; (10740 <system_clock_source_dfll_set_config+0xc8>)
   106bc:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   106be:	687b      	ldr	r3, [r7, #4]
   106c0:	781b      	ldrb	r3, [r3, #0]
   106c2:	2b04      	cmp	r3, #4
   106c4:	d116      	bne.n	106f4 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   106c6:	687b      	ldr	r3, [r7, #4]
   106c8:	7b1b      	ldrb	r3, [r3, #12]
   106ca:	069b      	lsls	r3, r3, #26
   106cc:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   106ce:	687b      	ldr	r3, [r7, #4]
   106d0:	89db      	ldrh	r3, [r3, #14]
   106d2:	041b      	lsls	r3, r3, #16
   106d4:	0019      	movs	r1, r3
   106d6:	4b1b      	ldr	r3, [pc, #108]	; (10744 <system_clock_source_dfll_set_config+0xcc>)
   106d8:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   106da:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   106dc:	687a      	ldr	r2, [r7, #4]
   106de:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   106e0:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   106e2:	4b17      	ldr	r3, [pc, #92]	; (10740 <system_clock_source_dfll_set_config+0xc8>)
   106e4:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   106e6:	4b16      	ldr	r3, [pc, #88]	; (10740 <system_clock_source_dfll_set_config+0xc8>)
   106e8:	681b      	ldr	r3, [r3, #0]
   106ea:	687a      	ldr	r2, [r7, #4]
   106ec:	7812      	ldrb	r2, [r2, #0]
   106ee:	431a      	orrs	r2, r3
   106f0:	4b13      	ldr	r3, [pc, #76]	; (10740 <system_clock_source_dfll_set_config+0xc8>)
   106f2:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   106f4:	687b      	ldr	r3, [r7, #4]
   106f6:	781b      	ldrb	r3, [r3, #0]
   106f8:	2b20      	cmp	r3, #32
   106fa:	d11c      	bne.n	10736 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   106fc:	687b      	ldr	r3, [r7, #4]
   106fe:	7b1b      	ldrb	r3, [r3, #12]
   10700:	069b      	lsls	r3, r3, #26
   10702:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10704:	687b      	ldr	r3, [r7, #4]
   10706:	89db      	ldrh	r3, [r3, #14]
   10708:	041b      	lsls	r3, r3, #16
   1070a:	0019      	movs	r1, r3
   1070c:	4b0d      	ldr	r3, [pc, #52]	; (10744 <system_clock_source_dfll_set_config+0xcc>)
   1070e:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   10710:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   10712:	687a      	ldr	r2, [r7, #4]
   10714:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10716:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   10718:	4b09      	ldr	r3, [pc, #36]	; (10740 <system_clock_source_dfll_set_config+0xc8>)
   1071a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   1071c:	4b08      	ldr	r3, [pc, #32]	; (10740 <system_clock_source_dfll_set_config+0xc8>)
   1071e:	681b      	ldr	r3, [r3, #0]
   10720:	687a      	ldr	r2, [r7, #4]
   10722:	7812      	ldrb	r2, [r2, #0]
   10724:	2104      	movs	r1, #4
   10726:	430a      	orrs	r2, r1
   10728:	b2d2      	uxtb	r2, r2
   1072a:	4313      	orrs	r3, r2
   1072c:	2280      	movs	r2, #128	; 0x80
   1072e:	00d2      	lsls	r2, r2, #3
   10730:	431a      	orrs	r2, r3
   10732:	4b03      	ldr	r3, [pc, #12]	; (10740 <system_clock_source_dfll_set_config+0xc8>)
   10734:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   10736:	46c0      	nop			; (mov r8, r8)
   10738:	46bd      	mov	sp, r7
   1073a:	b002      	add	sp, #8
   1073c:	bd80      	pop	{r7, pc}
   1073e:	46c0      	nop			; (mov r8, r8)
   10740:	20000288 	.word	0x20000288
   10744:	03ff0000 	.word	0x03ff0000

00010748 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   10748:	b580      	push	{r7, lr}
   1074a:	b082      	sub	sp, #8
   1074c:	af00      	add	r7, sp, #0
   1074e:	0002      	movs	r2, r0
   10750:	1dfb      	adds	r3, r7, #7
   10752:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   10754:	1dfb      	adds	r3, r7, #7
   10756:	781b      	ldrb	r3, [r3, #0]
   10758:	2b08      	cmp	r3, #8
   1075a:	d83b      	bhi.n	107d4 <system_clock_source_enable+0x8c>
   1075c:	009a      	lsls	r2, r3, #2
   1075e:	4b21      	ldr	r3, [pc, #132]	; (107e4 <system_clock_source_enable+0x9c>)
   10760:	18d3      	adds	r3, r2, r3
   10762:	681b      	ldr	r3, [r3, #0]
   10764:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   10766:	4b20      	ldr	r3, [pc, #128]	; (107e8 <system_clock_source_enable+0xa0>)
   10768:	4a1f      	ldr	r2, [pc, #124]	; (107e8 <system_clock_source_enable+0xa0>)
   1076a:	6a12      	ldr	r2, [r2, #32]
   1076c:	2102      	movs	r1, #2
   1076e:	430a      	orrs	r2, r1
   10770:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   10772:	2300      	movs	r3, #0
   10774:	e031      	b.n	107da <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   10776:	4b1c      	ldr	r3, [pc, #112]	; (107e8 <system_clock_source_enable+0xa0>)
   10778:	4a1b      	ldr	r2, [pc, #108]	; (107e8 <system_clock_source_enable+0xa0>)
   1077a:	6992      	ldr	r2, [r2, #24]
   1077c:	2102      	movs	r1, #2
   1077e:	430a      	orrs	r2, r1
   10780:	619a      	str	r2, [r3, #24]
		break;
   10782:	e029      	b.n	107d8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   10784:	4a18      	ldr	r2, [pc, #96]	; (107e8 <system_clock_source_enable+0xa0>)
   10786:	4b18      	ldr	r3, [pc, #96]	; (107e8 <system_clock_source_enable+0xa0>)
   10788:	8a1b      	ldrh	r3, [r3, #16]
   1078a:	b29b      	uxth	r3, r3
   1078c:	2102      	movs	r1, #2
   1078e:	430b      	orrs	r3, r1
   10790:	b29b      	uxth	r3, r3
   10792:	8213      	strh	r3, [r2, #16]
		break;
   10794:	e020      	b.n	107d8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   10796:	4a14      	ldr	r2, [pc, #80]	; (107e8 <system_clock_source_enable+0xa0>)
   10798:	4b13      	ldr	r3, [pc, #76]	; (107e8 <system_clock_source_enable+0xa0>)
   1079a:	8a9b      	ldrh	r3, [r3, #20]
   1079c:	b29b      	uxth	r3, r3
   1079e:	2102      	movs	r1, #2
   107a0:	430b      	orrs	r3, r1
   107a2:	b29b      	uxth	r3, r3
   107a4:	8293      	strh	r3, [r2, #20]
		break;
   107a6:	e017      	b.n	107d8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   107a8:	4b10      	ldr	r3, [pc, #64]	; (107ec <system_clock_source_enable+0xa4>)
   107aa:	681b      	ldr	r3, [r3, #0]
   107ac:	2202      	movs	r2, #2
   107ae:	431a      	orrs	r2, r3
   107b0:	4b0e      	ldr	r3, [pc, #56]	; (107ec <system_clock_source_enable+0xa4>)
   107b2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   107b4:	4b0e      	ldr	r3, [pc, #56]	; (107f0 <system_clock_source_enable+0xa8>)
   107b6:	4798      	blx	r3
		break;
   107b8:	e00e      	b.n	107d8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   107ba:	4a0b      	ldr	r2, [pc, #44]	; (107e8 <system_clock_source_enable+0xa0>)
   107bc:	490a      	ldr	r1, [pc, #40]	; (107e8 <system_clock_source_enable+0xa0>)
   107be:	2344      	movs	r3, #68	; 0x44
   107c0:	5ccb      	ldrb	r3, [r1, r3]
   107c2:	b2db      	uxtb	r3, r3
   107c4:	2102      	movs	r1, #2
   107c6:	430b      	orrs	r3, r1
   107c8:	b2d9      	uxtb	r1, r3
   107ca:	2344      	movs	r3, #68	; 0x44
   107cc:	54d1      	strb	r1, [r2, r3]
		break;
   107ce:	e003      	b.n	107d8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   107d0:	2300      	movs	r3, #0
   107d2:	e002      	b.n	107da <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   107d4:	2317      	movs	r3, #23
   107d6:	e000      	b.n	107da <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   107d8:	2300      	movs	r3, #0
}
   107da:	0018      	movs	r0, r3
   107dc:	46bd      	mov	sp, r7
   107de:	b002      	add	sp, #8
   107e0:	bd80      	pop	{r7, pc}
   107e2:	46c0      	nop			; (mov r8, r8)
   107e4:	00019ed0 	.word	0x00019ed0
   107e8:	40000800 	.word	0x40000800
   107ec:	20000288 	.word	0x20000288
   107f0:	000103e1 	.word	0x000103e1

000107f4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   107f4:	b580      	push	{r7, lr}
   107f6:	b084      	sub	sp, #16
   107f8:	af00      	add	r7, sp, #0
   107fa:	0002      	movs	r2, r0
   107fc:	1dfb      	adds	r3, r7, #7
   107fe:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   10800:	2300      	movs	r3, #0
   10802:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   10804:	1dfb      	adds	r3, r7, #7
   10806:	781b      	ldrb	r3, [r3, #0]
   10808:	2b08      	cmp	r3, #8
   1080a:	d821      	bhi.n	10850 <system_clock_source_is_ready+0x5c>
   1080c:	009a      	lsls	r2, r3, #2
   1080e:	4b18      	ldr	r3, [pc, #96]	; (10870 <system_clock_source_is_ready+0x7c>)
   10810:	18d3      	adds	r3, r2, r3
   10812:	681b      	ldr	r3, [r3, #0]
   10814:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   10816:	2308      	movs	r3, #8
   10818:	60fb      	str	r3, [r7, #12]
		break;
   1081a:	e01b      	b.n	10854 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   1081c:	2304      	movs	r3, #4
   1081e:	60fb      	str	r3, [r7, #12]
		break;
   10820:	e018      	b.n	10854 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   10822:	2301      	movs	r3, #1
   10824:	60fb      	str	r3, [r7, #12]
		break;
   10826:	e015      	b.n	10854 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   10828:	2302      	movs	r3, #2
   1082a:	60fb      	str	r3, [r7, #12]
		break;
   1082c:	e012      	b.n	10854 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   1082e:	23d0      	movs	r3, #208	; 0xd0
   10830:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   10832:	e00f      	b.n	10854 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   10834:	4a0f      	ldr	r2, [pc, #60]	; (10874 <system_clock_source_is_ready+0x80>)
   10836:	2350      	movs	r3, #80	; 0x50
   10838:	5cd3      	ldrb	r3, [r2, r3]
   1083a:	b2db      	uxtb	r3, r3
   1083c:	001a      	movs	r2, r3
   1083e:	2303      	movs	r3, #3
   10840:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   10842:	3b03      	subs	r3, #3
   10844:	425a      	negs	r2, r3
   10846:	4153      	adcs	r3, r2
   10848:	b2db      	uxtb	r3, r3
   1084a:	e00c      	b.n	10866 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   1084c:	2301      	movs	r3, #1
   1084e:	e00a      	b.n	10866 <system_clock_source_is_ready+0x72>

	default:
		return false;
   10850:	2300      	movs	r3, #0
   10852:	e008      	b.n	10866 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   10854:	4b07      	ldr	r3, [pc, #28]	; (10874 <system_clock_source_is_ready+0x80>)
   10856:	68db      	ldr	r3, [r3, #12]
   10858:	68fa      	ldr	r2, [r7, #12]
   1085a:	401a      	ands	r2, r3
   1085c:	68fb      	ldr	r3, [r7, #12]
   1085e:	1ad3      	subs	r3, r2, r3
   10860:	425a      	negs	r2, r3
   10862:	4153      	adcs	r3, r2
   10864:	b2db      	uxtb	r3, r3
}
   10866:	0018      	movs	r0, r3
   10868:	46bd      	mov	sp, r7
   1086a:	b004      	add	sp, #16
   1086c:	bd80      	pop	{r7, pc}
   1086e:	46c0      	nop			; (mov r8, r8)
   10870:	00019ef4 	.word	0x00019ef4
   10874:	40000800 	.word	0x40000800

00010878 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   10878:	b580      	push	{r7, lr}
   1087a:	b082      	sub	sp, #8
   1087c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   1087e:	003b      	movs	r3, r7
   10880:	2202      	movs	r2, #2
   10882:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   10884:	2300      	movs	r3, #0
   10886:	607b      	str	r3, [r7, #4]
   10888:	e009      	b.n	1089e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1088a:	687b      	ldr	r3, [r7, #4]
   1088c:	b2db      	uxtb	r3, r3
   1088e:	003a      	movs	r2, r7
   10890:	0011      	movs	r1, r2
   10892:	0018      	movs	r0, r3
   10894:	4b05      	ldr	r3, [pc, #20]	; (108ac <_switch_peripheral_gclk+0x34>)
   10896:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   10898:	687b      	ldr	r3, [r7, #4]
   1089a:	3301      	adds	r3, #1
   1089c:	607b      	str	r3, [r7, #4]
   1089e:	687b      	ldr	r3, [r7, #4]
   108a0:	2b24      	cmp	r3, #36	; 0x24
   108a2:	d9f2      	bls.n	1088a <_switch_peripheral_gclk+0x12>
	}
}
   108a4:	46c0      	nop			; (mov r8, r8)
   108a6:	46bd      	mov	sp, r7
   108a8:	b002      	add	sp, #8
   108aa:	bd80      	pop	{r7, pc}
   108ac:	00010e59 	.word	0x00010e59

000108b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   108b0:	b580      	push	{r7, lr}
   108b2:	b0aa      	sub	sp, #168	; 0xa8
   108b4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   108b6:	4b87      	ldr	r3, [pc, #540]	; (10ad4 <system_clock_init+0x224>)
   108b8:	22c2      	movs	r2, #194	; 0xc2
   108ba:	00d2      	lsls	r2, r2, #3
   108bc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   108be:	2002      	movs	r0, #2
   108c0:	4b85      	ldr	r3, [pc, #532]	; (10ad8 <system_clock_init+0x228>)
   108c2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   108c4:	4b85      	ldr	r3, [pc, #532]	; (10adc <system_clock_init+0x22c>)
   108c6:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   108c8:	2394      	movs	r3, #148	; 0x94
   108ca:	18fb      	adds	r3, r7, r3
   108cc:	0018      	movs	r0, r3
   108ce:	4b84      	ldr	r3, [pc, #528]	; (10ae0 <system_clock_init+0x230>)
   108d0:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   108d2:	2394      	movs	r3, #148	; 0x94
   108d4:	18fb      	adds	r3, r7, r3
   108d6:	2280      	movs	r2, #128	; 0x80
   108d8:	0212      	lsls	r2, r2, #8
   108da:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   108dc:	2394      	movs	r3, #148	; 0x94
   108de:	18fb      	adds	r3, r7, r3
   108e0:	2200      	movs	r2, #0
   108e2:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   108e4:	2394      	movs	r3, #148	; 0x94
   108e6:	18fb      	adds	r3, r7, r3
   108e8:	2203      	movs	r2, #3
   108ea:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   108ec:	2394      	movs	r3, #148	; 0x94
   108ee:	18fb      	adds	r3, r7, r3
   108f0:	2200      	movs	r2, #0
   108f2:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   108f4:	2394      	movs	r3, #148	; 0x94
   108f6:	18fb      	adds	r3, r7, r3
   108f8:	2200      	movs	r2, #0
   108fa:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   108fc:	2394      	movs	r3, #148	; 0x94
   108fe:	18fb      	adds	r3, r7, r3
   10900:	2201      	movs	r2, #1
   10902:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   10904:	2394      	movs	r3, #148	; 0x94
   10906:	18fb      	adds	r3, r7, r3
   10908:	2200      	movs	r2, #0
   1090a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   1090c:	2394      	movs	r3, #148	; 0x94
   1090e:	18fb      	adds	r3, r7, r3
   10910:	2200      	movs	r2, #0
   10912:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   10914:	2394      	movs	r3, #148	; 0x94
   10916:	18fb      	adds	r3, r7, r3
   10918:	0018      	movs	r0, r3
   1091a:	4b72      	ldr	r3, [pc, #456]	; (10ae4 <system_clock_init+0x234>)
   1091c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   1091e:	2005      	movs	r0, #5
   10920:	4b71      	ldr	r3, [pc, #452]	; (10ae8 <system_clock_init+0x238>)
   10922:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   10924:	46c0      	nop			; (mov r8, r8)
   10926:	2005      	movs	r0, #5
   10928:	4b70      	ldr	r3, [pc, #448]	; (10aec <system_clock_init+0x23c>)
   1092a:	4798      	blx	r3
   1092c:	0003      	movs	r3, r0
   1092e:	001a      	movs	r2, r3
   10930:	2301      	movs	r3, #1
   10932:	4053      	eors	r3, r2
   10934:	b2db      	uxtb	r3, r3
   10936:	2b00      	cmp	r3, #0
   10938:	d1f5      	bne.n	10926 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   1093a:	4a66      	ldr	r2, [pc, #408]	; (10ad4 <system_clock_init+0x224>)
   1093c:	8a93      	ldrh	r3, [r2, #20]
   1093e:	2180      	movs	r1, #128	; 0x80
   10940:	430b      	orrs	r3, r1
   10942:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   10944:	2380      	movs	r3, #128	; 0x80
   10946:	18fb      	adds	r3, r7, r3
   10948:	0018      	movs	r0, r3
   1094a:	4b69      	ldr	r3, [pc, #420]	; (10af0 <system_clock_init+0x240>)
   1094c:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1094e:	2380      	movs	r3, #128	; 0x80
   10950:	18fb      	adds	r3, r7, r3
   10952:	2204      	movs	r2, #4
   10954:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   10956:	2380      	movs	r3, #128	; 0x80
   10958:	18fb      	adds	r3, r7, r3
   1095a:	2200      	movs	r2, #0
   1095c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   1095e:	4b65      	ldr	r3, [pc, #404]	; (10af4 <system_clock_init+0x244>)
   10960:	681b      	ldr	r3, [r3, #0]
   10962:	0e9b      	lsrs	r3, r3, #26
   10964:	22a4      	movs	r2, #164	; 0xa4
   10966:	18ba      	adds	r2, r7, r2
   10968:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   1096a:	23a4      	movs	r3, #164	; 0xa4
   1096c:	18fb      	adds	r3, r7, r3
   1096e:	681b      	ldr	r3, [r3, #0]
   10970:	2b3f      	cmp	r3, #63	; 0x3f
   10972:	d103      	bne.n	1097c <system_clock_init+0xcc>
		coarse = 0x1f;
   10974:	231f      	movs	r3, #31
   10976:	22a4      	movs	r2, #164	; 0xa4
   10978:	18ba      	adds	r2, r7, r2
   1097a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   1097c:	23a4      	movs	r3, #164	; 0xa4
   1097e:	18fb      	adds	r3, r7, r3
   10980:	681b      	ldr	r3, [r3, #0]
   10982:	b2da      	uxtb	r2, r3
   10984:	2380      	movs	r3, #128	; 0x80
   10986:	18fb      	adds	r3, r7, r3
   10988:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   1098a:	2380      	movs	r3, #128	; 0x80
   1098c:	18fb      	adds	r3, r7, r3
   1098e:	2200      	movs	r2, #0
   10990:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   10992:	2380      	movs	r3, #128	; 0x80
   10994:	18fb      	adds	r3, r7, r3
   10996:	2200      	movs	r2, #0
   10998:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   1099a:	2380      	movs	r3, #128	; 0x80
   1099c:	18fb      	adds	r3, r7, r3
   1099e:	2200      	movs	r2, #0
   109a0:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   109a2:	2380      	movs	r3, #128	; 0x80
   109a4:	18fb      	adds	r3, r7, r3
   109a6:	2200      	movs	r2, #0
   109a8:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   109aa:	2380      	movs	r3, #128	; 0x80
   109ac:	18fb      	adds	r3, r7, r3
   109ae:	4a52      	ldr	r2, [pc, #328]	; (10af8 <system_clock_init+0x248>)
   109b0:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   109b2:	2380      	movs	r3, #128	; 0x80
   109b4:	18fb      	adds	r3, r7, r3
   109b6:	2207      	movs	r2, #7
   109b8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   109ba:	2380      	movs	r3, #128	; 0x80
   109bc:	18fb      	adds	r3, r7, r3
   109be:	223f      	movs	r2, #63	; 0x3f
   109c0:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   109c2:	2380      	movs	r3, #128	; 0x80
   109c4:	18fb      	adds	r3, r7, r3
   109c6:	0018      	movs	r0, r3
   109c8:	4b4c      	ldr	r3, [pc, #304]	; (10afc <system_clock_init+0x24c>)
   109ca:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   109cc:	237c      	movs	r3, #124	; 0x7c
   109ce:	18fb      	adds	r3, r7, r3
   109d0:	0018      	movs	r0, r3
   109d2:	4b4b      	ldr	r3, [pc, #300]	; (10b00 <system_clock_init+0x250>)
   109d4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   109d6:	237c      	movs	r3, #124	; 0x7c
   109d8:	18fb      	adds	r3, r7, r3
   109da:	2200      	movs	r2, #0
   109dc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   109de:	237c      	movs	r3, #124	; 0x7c
   109e0:	18fb      	adds	r3, r7, r3
   109e2:	2201      	movs	r2, #1
   109e4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   109e6:	237c      	movs	r3, #124	; 0x7c
   109e8:	18fb      	adds	r3, r7, r3
   109ea:	2200      	movs	r2, #0
   109ec:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   109ee:	237c      	movs	r3, #124	; 0x7c
   109f0:	18fb      	adds	r3, r7, r3
   109f2:	0018      	movs	r0, r3
   109f4:	4b43      	ldr	r3, [pc, #268]	; (10b04 <system_clock_init+0x254>)
   109f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   109f8:	2006      	movs	r0, #6
   109fa:	4b3b      	ldr	r3, [pc, #236]	; (10ae8 <system_clock_init+0x238>)
   109fc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   109fe:	4b42      	ldr	r3, [pc, #264]	; (10b08 <system_clock_init+0x258>)
   10a00:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   10a02:	2364      	movs	r3, #100	; 0x64
   10a04:	18fb      	adds	r3, r7, r3
   10a06:	0018      	movs	r0, r3
   10a08:	4b40      	ldr	r3, [pc, #256]	; (10b0c <system_clock_init+0x25c>)
   10a0a:	4798      	blx	r3
   10a0c:	2364      	movs	r3, #100	; 0x64
   10a0e:	18fb      	adds	r3, r7, r3
   10a10:	2205      	movs	r2, #5
   10a12:	701a      	strb	r2, [r3, #0]
   10a14:	2364      	movs	r3, #100	; 0x64
   10a16:	18fb      	adds	r3, r7, r3
   10a18:	2201      	movs	r2, #1
   10a1a:	605a      	str	r2, [r3, #4]
   10a1c:	2364      	movs	r3, #100	; 0x64
   10a1e:	18fb      	adds	r3, r7, r3
   10a20:	2200      	movs	r2, #0
   10a22:	721a      	strb	r2, [r3, #8]
   10a24:	2364      	movs	r3, #100	; 0x64
   10a26:	18fb      	adds	r3, r7, r3
   10a28:	2200      	movs	r2, #0
   10a2a:	725a      	strb	r2, [r3, #9]
   10a2c:	2364      	movs	r3, #100	; 0x64
   10a2e:	18fb      	adds	r3, r7, r3
   10a30:	0019      	movs	r1, r3
   10a32:	2001      	movs	r0, #1
   10a34:	4b36      	ldr	r3, [pc, #216]	; (10b10 <system_clock_init+0x260>)
   10a36:	4798      	blx	r3
   10a38:	2001      	movs	r0, #1
   10a3a:	4b36      	ldr	r3, [pc, #216]	; (10b14 <system_clock_init+0x264>)
   10a3c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   10a3e:	230c      	movs	r3, #12
   10a40:	18fb      	adds	r3, r7, r3
   10a42:	0018      	movs	r0, r3
   10a44:	4b34      	ldr	r3, [pc, #208]	; (10b18 <system_clock_init+0x268>)
   10a46:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   10a48:	230c      	movs	r3, #12
   10a4a:	18fb      	adds	r3, r7, r3
   10a4c:	2201      	movs	r2, #1
   10a4e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   10a50:	230c      	movs	r3, #12
   10a52:	18fb      	adds	r3, r7, r3
   10a54:	0019      	movs	r1, r3
   10a56:	2000      	movs	r0, #0
   10a58:	4b30      	ldr	r3, [pc, #192]	; (10b1c <system_clock_init+0x26c>)
   10a5a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   10a5c:	2000      	movs	r0, #0
   10a5e:	4b30      	ldr	r3, [pc, #192]	; (10b20 <system_clock_init+0x270>)
   10a60:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   10a62:	2007      	movs	r0, #7
   10a64:	4b20      	ldr	r3, [pc, #128]	; (10ae8 <system_clock_init+0x238>)
   10a66:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   10a68:	46c0      	nop			; (mov r8, r8)
   10a6a:	2007      	movs	r0, #7
   10a6c:	4b1f      	ldr	r3, [pc, #124]	; (10aec <system_clock_init+0x23c>)
   10a6e:	4798      	blx	r3
   10a70:	0003      	movs	r3, r0
   10a72:	001a      	movs	r2, r3
   10a74:	2301      	movs	r3, #1
   10a76:	4053      	eors	r3, r2
   10a78:	b2db      	uxtb	r3, r3
   10a7a:	2b00      	cmp	r3, #0
   10a7c:	d1f5      	bne.n	10a6a <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   10a7e:	2000      	movs	r0, #0
   10a80:	4b28      	ldr	r3, [pc, #160]	; (10b24 <system_clock_init+0x274>)
   10a82:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   10a84:	2100      	movs	r1, #0
   10a86:	2000      	movs	r0, #0
   10a88:	4b27      	ldr	r3, [pc, #156]	; (10b28 <system_clock_init+0x278>)
   10a8a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   10a8c:	2100      	movs	r1, #0
   10a8e:	2001      	movs	r0, #1
   10a90:	4b25      	ldr	r3, [pc, #148]	; (10b28 <system_clock_init+0x278>)
   10a92:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   10a94:	2100      	movs	r1, #0
   10a96:	2002      	movs	r0, #2
   10a98:	4b23      	ldr	r3, [pc, #140]	; (10b28 <system_clock_init+0x278>)
   10a9a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   10a9c:	003b      	movs	r3, r7
   10a9e:	0018      	movs	r0, r3
   10aa0:	4b1a      	ldr	r3, [pc, #104]	; (10b0c <system_clock_init+0x25c>)
   10aa2:	4798      	blx	r3
   10aa4:	003b      	movs	r3, r7
   10aa6:	2207      	movs	r2, #7
   10aa8:	701a      	strb	r2, [r3, #0]
   10aaa:	003b      	movs	r3, r7
   10aac:	2201      	movs	r2, #1
   10aae:	605a      	str	r2, [r3, #4]
   10ab0:	003b      	movs	r3, r7
   10ab2:	2200      	movs	r2, #0
   10ab4:	721a      	strb	r2, [r3, #8]
   10ab6:	003b      	movs	r3, r7
   10ab8:	2200      	movs	r2, #0
   10aba:	725a      	strb	r2, [r3, #9]
   10abc:	003b      	movs	r3, r7
   10abe:	0019      	movs	r1, r3
   10ac0:	2000      	movs	r0, #0
   10ac2:	4b13      	ldr	r3, [pc, #76]	; (10b10 <system_clock_init+0x260>)
   10ac4:	4798      	blx	r3
   10ac6:	2000      	movs	r0, #0
   10ac8:	4b12      	ldr	r3, [pc, #72]	; (10b14 <system_clock_init+0x264>)
   10aca:	4798      	blx	r3
#endif
}
   10acc:	46c0      	nop			; (mov r8, r8)
   10ace:	46bd      	mov	sp, r7
   10ad0:	b02a      	add	sp, #168	; 0xa8
   10ad2:	bd80      	pop	{r7, pc}
   10ad4:	40000800 	.word	0x40000800
   10ad8:	00010391 	.word	0x00010391
   10adc:	00010879 	.word	0x00010879
   10ae0:	00010261 	.word	0x00010261
   10ae4:	00010559 	.word	0x00010559
   10ae8:	00010749 	.word	0x00010749
   10aec:	000107f5 	.word	0x000107f5
   10af0:	000102cb 	.word	0x000102cb
   10af4:	00806024 	.word	0x00806024
   10af8:	000005b9 	.word	0x000005b9
   10afc:	00010679 	.word	0x00010679
   10b00:	000102a9 	.word	0x000102a9
   10b04:	000104e1 	.word	0x000104e1
   10b08:	00010bd1 	.word	0x00010bd1
   10b0c:	0001021d 	.word	0x0001021d
   10b10:	00010c01 	.word	0x00010c01
   10b14:	00010d25 	.word	0x00010d25
   10b18:	0001024b 	.word	0x0001024b
   10b1c:	00010e59 	.word	0x00010e59
   10b20:	00010e9d 	.word	0x00010e9d
   10b24:	0001031d 	.word	0x0001031d
   10b28:	0001033d 	.word	0x0001033d

00010b2c <system_apb_clock_set_mask>:
{
   10b2c:	b580      	push	{r7, lr}
   10b2e:	b082      	sub	sp, #8
   10b30:	af00      	add	r7, sp, #0
   10b32:	0002      	movs	r2, r0
   10b34:	6039      	str	r1, [r7, #0]
   10b36:	1dfb      	adds	r3, r7, #7
   10b38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   10b3a:	1dfb      	adds	r3, r7, #7
   10b3c:	781b      	ldrb	r3, [r3, #0]
   10b3e:	2b01      	cmp	r3, #1
   10b40:	d00a      	beq.n	10b58 <system_apb_clock_set_mask+0x2c>
   10b42:	2b02      	cmp	r3, #2
   10b44:	d00f      	beq.n	10b66 <system_apb_clock_set_mask+0x3a>
   10b46:	2b00      	cmp	r3, #0
   10b48:	d114      	bne.n	10b74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   10b4a:	4b0e      	ldr	r3, [pc, #56]	; (10b84 <system_apb_clock_set_mask+0x58>)
   10b4c:	4a0d      	ldr	r2, [pc, #52]	; (10b84 <system_apb_clock_set_mask+0x58>)
   10b4e:	6991      	ldr	r1, [r2, #24]
   10b50:	683a      	ldr	r2, [r7, #0]
   10b52:	430a      	orrs	r2, r1
   10b54:	619a      	str	r2, [r3, #24]
			break;
   10b56:	e00f      	b.n	10b78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   10b58:	4b0a      	ldr	r3, [pc, #40]	; (10b84 <system_apb_clock_set_mask+0x58>)
   10b5a:	4a0a      	ldr	r2, [pc, #40]	; (10b84 <system_apb_clock_set_mask+0x58>)
   10b5c:	69d1      	ldr	r1, [r2, #28]
   10b5e:	683a      	ldr	r2, [r7, #0]
   10b60:	430a      	orrs	r2, r1
   10b62:	61da      	str	r2, [r3, #28]
			break;
   10b64:	e008      	b.n	10b78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   10b66:	4b07      	ldr	r3, [pc, #28]	; (10b84 <system_apb_clock_set_mask+0x58>)
   10b68:	4a06      	ldr	r2, [pc, #24]	; (10b84 <system_apb_clock_set_mask+0x58>)
   10b6a:	6a11      	ldr	r1, [r2, #32]
   10b6c:	683a      	ldr	r2, [r7, #0]
   10b6e:	430a      	orrs	r2, r1
   10b70:	621a      	str	r2, [r3, #32]
			break;
   10b72:	e001      	b.n	10b78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   10b74:	2317      	movs	r3, #23
   10b76:	e000      	b.n	10b7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   10b78:	2300      	movs	r3, #0
}
   10b7a:	0018      	movs	r0, r3
   10b7c:	46bd      	mov	sp, r7
   10b7e:	b002      	add	sp, #8
   10b80:	bd80      	pop	{r7, pc}
   10b82:	46c0      	nop			; (mov r8, r8)
   10b84:	40000400 	.word	0x40000400

00010b88 <system_interrupt_enter_critical_section>:
{
   10b88:	b580      	push	{r7, lr}
   10b8a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   10b8c:	4b02      	ldr	r3, [pc, #8]	; (10b98 <system_interrupt_enter_critical_section+0x10>)
   10b8e:	4798      	blx	r3
}
   10b90:	46c0      	nop			; (mov r8, r8)
   10b92:	46bd      	mov	sp, r7
   10b94:	bd80      	pop	{r7, pc}
   10b96:	46c0      	nop			; (mov r8, r8)
   10b98:	0000ffb5 	.word	0x0000ffb5

00010b9c <system_interrupt_leave_critical_section>:
{
   10b9c:	b580      	push	{r7, lr}
   10b9e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   10ba0:	4b02      	ldr	r3, [pc, #8]	; (10bac <system_interrupt_leave_critical_section+0x10>)
   10ba2:	4798      	blx	r3
}
   10ba4:	46c0      	nop			; (mov r8, r8)
   10ba6:	46bd      	mov	sp, r7
   10ba8:	bd80      	pop	{r7, pc}
   10baa:	46c0      	nop			; (mov r8, r8)
   10bac:	00010009 	.word	0x00010009

00010bb0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   10bb0:	b580      	push	{r7, lr}
   10bb2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10bb4:	4b05      	ldr	r3, [pc, #20]	; (10bcc <system_gclk_is_syncing+0x1c>)
   10bb6:	785b      	ldrb	r3, [r3, #1]
   10bb8:	b2db      	uxtb	r3, r3
   10bba:	b25b      	sxtb	r3, r3
   10bbc:	2b00      	cmp	r3, #0
   10bbe:	da01      	bge.n	10bc4 <system_gclk_is_syncing+0x14>
		return true;
   10bc0:	2301      	movs	r3, #1
   10bc2:	e000      	b.n	10bc6 <system_gclk_is_syncing+0x16>
	}

	return false;
   10bc4:	2300      	movs	r3, #0
}
   10bc6:	0018      	movs	r0, r3
   10bc8:	46bd      	mov	sp, r7
   10bca:	bd80      	pop	{r7, pc}
   10bcc:	40000c00 	.word	0x40000c00

00010bd0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   10bd0:	b580      	push	{r7, lr}
   10bd2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   10bd4:	2108      	movs	r1, #8
   10bd6:	2000      	movs	r0, #0
   10bd8:	4b07      	ldr	r3, [pc, #28]	; (10bf8 <system_gclk_init+0x28>)
   10bda:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   10bdc:	4b07      	ldr	r3, [pc, #28]	; (10bfc <system_gclk_init+0x2c>)
   10bde:	2201      	movs	r2, #1
   10be0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   10be2:	46c0      	nop			; (mov r8, r8)
   10be4:	4b05      	ldr	r3, [pc, #20]	; (10bfc <system_gclk_init+0x2c>)
   10be6:	781b      	ldrb	r3, [r3, #0]
   10be8:	b2db      	uxtb	r3, r3
   10bea:	001a      	movs	r2, r3
   10bec:	2301      	movs	r3, #1
   10bee:	4013      	ands	r3, r2
   10bf0:	d1f8      	bne.n	10be4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   10bf2:	46c0      	nop			; (mov r8, r8)
   10bf4:	46bd      	mov	sp, r7
   10bf6:	bd80      	pop	{r7, pc}
   10bf8:	00010b2d 	.word	0x00010b2d
   10bfc:	40000c00 	.word	0x40000c00

00010c00 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   10c00:	b580      	push	{r7, lr}
   10c02:	b086      	sub	sp, #24
   10c04:	af00      	add	r7, sp, #0
   10c06:	0002      	movs	r2, r0
   10c08:	6039      	str	r1, [r7, #0]
   10c0a:	1dfb      	adds	r3, r7, #7
   10c0c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   10c0e:	1dfb      	adds	r3, r7, #7
   10c10:	781b      	ldrb	r3, [r3, #0]
   10c12:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   10c14:	1dfb      	adds	r3, r7, #7
   10c16:	781b      	ldrb	r3, [r3, #0]
   10c18:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   10c1a:	683b      	ldr	r3, [r7, #0]
   10c1c:	781b      	ldrb	r3, [r3, #0]
   10c1e:	021b      	lsls	r3, r3, #8
   10c20:	001a      	movs	r2, r3
   10c22:	697b      	ldr	r3, [r7, #20]
   10c24:	4313      	orrs	r3, r2
   10c26:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   10c28:	683b      	ldr	r3, [r7, #0]
   10c2a:	785b      	ldrb	r3, [r3, #1]
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	d004      	beq.n	10c3a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   10c30:	697b      	ldr	r3, [r7, #20]
   10c32:	2280      	movs	r2, #128	; 0x80
   10c34:	02d2      	lsls	r2, r2, #11
   10c36:	4313      	orrs	r3, r2
   10c38:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   10c3a:	683b      	ldr	r3, [r7, #0]
   10c3c:	7a5b      	ldrb	r3, [r3, #9]
   10c3e:	2b00      	cmp	r3, #0
   10c40:	d004      	beq.n	10c4c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   10c42:	697b      	ldr	r3, [r7, #20]
   10c44:	2280      	movs	r2, #128	; 0x80
   10c46:	0312      	lsls	r2, r2, #12
   10c48:	4313      	orrs	r3, r2
   10c4a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   10c4c:	683b      	ldr	r3, [r7, #0]
   10c4e:	685b      	ldr	r3, [r3, #4]
   10c50:	2b01      	cmp	r3, #1
   10c52:	d92c      	bls.n	10cae <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   10c54:	683b      	ldr	r3, [r7, #0]
   10c56:	685a      	ldr	r2, [r3, #4]
   10c58:	683b      	ldr	r3, [r7, #0]
   10c5a:	685b      	ldr	r3, [r3, #4]
   10c5c:	3b01      	subs	r3, #1
   10c5e:	4013      	ands	r3, r2
   10c60:	d11a      	bne.n	10c98 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   10c62:	2300      	movs	r3, #0
   10c64:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   10c66:	2302      	movs	r3, #2
   10c68:	60bb      	str	r3, [r7, #8]
   10c6a:	e005      	b.n	10c78 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   10c6c:	68fb      	ldr	r3, [r7, #12]
   10c6e:	3301      	adds	r3, #1
   10c70:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   10c72:	68bb      	ldr	r3, [r7, #8]
   10c74:	005b      	lsls	r3, r3, #1
   10c76:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   10c78:	683b      	ldr	r3, [r7, #0]
   10c7a:	685a      	ldr	r2, [r3, #4]
   10c7c:	68bb      	ldr	r3, [r7, #8]
   10c7e:	429a      	cmp	r2, r3
   10c80:	d8f4      	bhi.n	10c6c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   10c82:	68fb      	ldr	r3, [r7, #12]
   10c84:	021b      	lsls	r3, r3, #8
   10c86:	693a      	ldr	r2, [r7, #16]
   10c88:	4313      	orrs	r3, r2
   10c8a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   10c8c:	697b      	ldr	r3, [r7, #20]
   10c8e:	2280      	movs	r2, #128	; 0x80
   10c90:	0352      	lsls	r2, r2, #13
   10c92:	4313      	orrs	r3, r2
   10c94:	617b      	str	r3, [r7, #20]
   10c96:	e00a      	b.n	10cae <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   10c98:	683b      	ldr	r3, [r7, #0]
   10c9a:	685b      	ldr	r3, [r3, #4]
   10c9c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   10c9e:	693a      	ldr	r2, [r7, #16]
   10ca0:	4313      	orrs	r3, r2
   10ca2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   10ca4:	697b      	ldr	r3, [r7, #20]
   10ca6:	2280      	movs	r2, #128	; 0x80
   10ca8:	0292      	lsls	r2, r2, #10
   10caa:	4313      	orrs	r3, r2
   10cac:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   10cae:	683b      	ldr	r3, [r7, #0]
   10cb0:	7a1b      	ldrb	r3, [r3, #8]
   10cb2:	2b00      	cmp	r3, #0
   10cb4:	d004      	beq.n	10cc0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   10cb6:	697b      	ldr	r3, [r7, #20]
   10cb8:	2280      	movs	r2, #128	; 0x80
   10cba:	0392      	lsls	r2, r2, #14
   10cbc:	4313      	orrs	r3, r2
   10cbe:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   10cc0:	46c0      	nop			; (mov r8, r8)
   10cc2:	4b13      	ldr	r3, [pc, #76]	; (10d10 <system_gclk_gen_set_config+0x110>)
   10cc4:	4798      	blx	r3
   10cc6:	1e03      	subs	r3, r0, #0
   10cc8:	d1fb      	bne.n	10cc2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   10cca:	4b12      	ldr	r3, [pc, #72]	; (10d14 <system_gclk_gen_set_config+0x114>)
   10ccc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   10cce:	4a12      	ldr	r2, [pc, #72]	; (10d18 <system_gclk_gen_set_config+0x118>)
   10cd0:	1dfb      	adds	r3, r7, #7
   10cd2:	781b      	ldrb	r3, [r3, #0]
   10cd4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   10cd6:	46c0      	nop			; (mov r8, r8)
   10cd8:	4b0d      	ldr	r3, [pc, #52]	; (10d10 <system_gclk_gen_set_config+0x110>)
   10cda:	4798      	blx	r3
   10cdc:	1e03      	subs	r3, r0, #0
   10cde:	d1fb      	bne.n	10cd8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   10ce0:	4b0e      	ldr	r3, [pc, #56]	; (10d1c <system_gclk_gen_set_config+0x11c>)
   10ce2:	693a      	ldr	r2, [r7, #16]
   10ce4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   10ce6:	46c0      	nop			; (mov r8, r8)
   10ce8:	4b09      	ldr	r3, [pc, #36]	; (10d10 <system_gclk_gen_set_config+0x110>)
   10cea:	4798      	blx	r3
   10cec:	1e03      	subs	r3, r0, #0
   10cee:	d1fb      	bne.n	10ce8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   10cf0:	4b0a      	ldr	r3, [pc, #40]	; (10d1c <system_gclk_gen_set_config+0x11c>)
   10cf2:	4a0a      	ldr	r2, [pc, #40]	; (10d1c <system_gclk_gen_set_config+0x11c>)
   10cf4:	6851      	ldr	r1, [r2, #4]
   10cf6:	2280      	movs	r2, #128	; 0x80
   10cf8:	0252      	lsls	r2, r2, #9
   10cfa:	4011      	ands	r1, r2
   10cfc:	697a      	ldr	r2, [r7, #20]
   10cfe:	430a      	orrs	r2, r1
   10d00:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   10d02:	4b07      	ldr	r3, [pc, #28]	; (10d20 <system_gclk_gen_set_config+0x120>)
   10d04:	4798      	blx	r3
}
   10d06:	46c0      	nop			; (mov r8, r8)
   10d08:	46bd      	mov	sp, r7
   10d0a:	b006      	add	sp, #24
   10d0c:	bd80      	pop	{r7, pc}
   10d0e:	46c0      	nop			; (mov r8, r8)
   10d10:	00010bb1 	.word	0x00010bb1
   10d14:	00010b89 	.word	0x00010b89
   10d18:	40000c08 	.word	0x40000c08
   10d1c:	40000c00 	.word	0x40000c00
   10d20:	00010b9d 	.word	0x00010b9d

00010d24 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   10d24:	b580      	push	{r7, lr}
   10d26:	b082      	sub	sp, #8
   10d28:	af00      	add	r7, sp, #0
   10d2a:	0002      	movs	r2, r0
   10d2c:	1dfb      	adds	r3, r7, #7
   10d2e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   10d30:	46c0      	nop			; (mov r8, r8)
   10d32:	4b0e      	ldr	r3, [pc, #56]	; (10d6c <system_gclk_gen_enable+0x48>)
   10d34:	4798      	blx	r3
   10d36:	1e03      	subs	r3, r0, #0
   10d38:	d1fb      	bne.n	10d32 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   10d3a:	4b0d      	ldr	r3, [pc, #52]	; (10d70 <system_gclk_gen_enable+0x4c>)
   10d3c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   10d3e:	4a0d      	ldr	r2, [pc, #52]	; (10d74 <system_gclk_gen_enable+0x50>)
   10d40:	1dfb      	adds	r3, r7, #7
   10d42:	781b      	ldrb	r3, [r3, #0]
   10d44:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   10d46:	46c0      	nop			; (mov r8, r8)
   10d48:	4b08      	ldr	r3, [pc, #32]	; (10d6c <system_gclk_gen_enable+0x48>)
   10d4a:	4798      	blx	r3
   10d4c:	1e03      	subs	r3, r0, #0
   10d4e:	d1fb      	bne.n	10d48 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   10d50:	4b09      	ldr	r3, [pc, #36]	; (10d78 <system_gclk_gen_enable+0x54>)
   10d52:	4a09      	ldr	r2, [pc, #36]	; (10d78 <system_gclk_gen_enable+0x54>)
   10d54:	6852      	ldr	r2, [r2, #4]
   10d56:	2180      	movs	r1, #128	; 0x80
   10d58:	0249      	lsls	r1, r1, #9
   10d5a:	430a      	orrs	r2, r1
   10d5c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   10d5e:	4b07      	ldr	r3, [pc, #28]	; (10d7c <system_gclk_gen_enable+0x58>)
   10d60:	4798      	blx	r3
}
   10d62:	46c0      	nop			; (mov r8, r8)
   10d64:	46bd      	mov	sp, r7
   10d66:	b002      	add	sp, #8
   10d68:	bd80      	pop	{r7, pc}
   10d6a:	46c0      	nop			; (mov r8, r8)
   10d6c:	00010bb1 	.word	0x00010bb1
   10d70:	00010b89 	.word	0x00010b89
   10d74:	40000c04 	.word	0x40000c04
   10d78:	40000c00 	.word	0x40000c00
   10d7c:	00010b9d 	.word	0x00010b9d

00010d80 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   10d80:	b580      	push	{r7, lr}
   10d82:	b086      	sub	sp, #24
   10d84:	af00      	add	r7, sp, #0
   10d86:	0002      	movs	r2, r0
   10d88:	1dfb      	adds	r3, r7, #7
   10d8a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   10d8c:	46c0      	nop			; (mov r8, r8)
   10d8e:	4b2a      	ldr	r3, [pc, #168]	; (10e38 <system_gclk_gen_get_hz+0xb8>)
   10d90:	4798      	blx	r3
   10d92:	1e03      	subs	r3, r0, #0
   10d94:	d1fb      	bne.n	10d8e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   10d96:	4b29      	ldr	r3, [pc, #164]	; (10e3c <system_gclk_gen_get_hz+0xbc>)
   10d98:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   10d9a:	4a29      	ldr	r2, [pc, #164]	; (10e40 <system_gclk_gen_get_hz+0xc0>)
   10d9c:	1dfb      	adds	r3, r7, #7
   10d9e:	781b      	ldrb	r3, [r3, #0]
   10da0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   10da2:	46c0      	nop			; (mov r8, r8)
   10da4:	4b24      	ldr	r3, [pc, #144]	; (10e38 <system_gclk_gen_get_hz+0xb8>)
   10da6:	4798      	blx	r3
   10da8:	1e03      	subs	r3, r0, #0
   10daa:	d1fb      	bne.n	10da4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   10dac:	4b25      	ldr	r3, [pc, #148]	; (10e44 <system_gclk_gen_get_hz+0xc4>)
   10dae:	685b      	ldr	r3, [r3, #4]
   10db0:	04db      	lsls	r3, r3, #19
   10db2:	0edb      	lsrs	r3, r3, #27
   10db4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   10db6:	0018      	movs	r0, r3
   10db8:	4b23      	ldr	r3, [pc, #140]	; (10e48 <system_gclk_gen_get_hz+0xc8>)
   10dba:	4798      	blx	r3
   10dbc:	0003      	movs	r3, r0
   10dbe:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   10dc0:	4a1f      	ldr	r2, [pc, #124]	; (10e40 <system_gclk_gen_get_hz+0xc0>)
   10dc2:	1dfb      	adds	r3, r7, #7
   10dc4:	781b      	ldrb	r3, [r3, #0]
   10dc6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   10dc8:	4b1e      	ldr	r3, [pc, #120]	; (10e44 <system_gclk_gen_get_hz+0xc4>)
   10dca:	685b      	ldr	r3, [r3, #4]
   10dcc:	02db      	lsls	r3, r3, #11
   10dce:	0fdb      	lsrs	r3, r3, #31
   10dd0:	b2da      	uxtb	r2, r3
   10dd2:	2313      	movs	r3, #19
   10dd4:	18fb      	adds	r3, r7, r3
   10dd6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   10dd8:	4a1c      	ldr	r2, [pc, #112]	; (10e4c <system_gclk_gen_get_hz+0xcc>)
   10dda:	1dfb      	adds	r3, r7, #7
   10ddc:	781b      	ldrb	r3, [r3, #0]
   10dde:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   10de0:	46c0      	nop			; (mov r8, r8)
   10de2:	4b15      	ldr	r3, [pc, #84]	; (10e38 <system_gclk_gen_get_hz+0xb8>)
   10de4:	4798      	blx	r3
   10de6:	1e03      	subs	r3, r0, #0
   10de8:	d1fb      	bne.n	10de2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   10dea:	4b16      	ldr	r3, [pc, #88]	; (10e44 <system_gclk_gen_get_hz+0xc4>)
   10dec:	689b      	ldr	r3, [r3, #8]
   10dee:	021b      	lsls	r3, r3, #8
   10df0:	0c1b      	lsrs	r3, r3, #16
   10df2:	b29b      	uxth	r3, r3
   10df4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   10df6:	4b16      	ldr	r3, [pc, #88]	; (10e50 <system_gclk_gen_get_hz+0xd0>)
   10df8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   10dfa:	2313      	movs	r3, #19
   10dfc:	18fb      	adds	r3, r7, r3
   10dfe:	781b      	ldrb	r3, [r3, #0]
   10e00:	2b00      	cmp	r3, #0
   10e02:	d109      	bne.n	10e18 <system_gclk_gen_get_hz+0x98>
   10e04:	68fb      	ldr	r3, [r7, #12]
   10e06:	2b01      	cmp	r3, #1
   10e08:	d906      	bls.n	10e18 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   10e0a:	4b12      	ldr	r3, [pc, #72]	; (10e54 <system_gclk_gen_get_hz+0xd4>)
   10e0c:	68f9      	ldr	r1, [r7, #12]
   10e0e:	6978      	ldr	r0, [r7, #20]
   10e10:	4798      	blx	r3
   10e12:	0003      	movs	r3, r0
   10e14:	617b      	str	r3, [r7, #20]
   10e16:	e00a      	b.n	10e2e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   10e18:	2313      	movs	r3, #19
   10e1a:	18fb      	adds	r3, r7, r3
   10e1c:	781b      	ldrb	r3, [r3, #0]
   10e1e:	2b00      	cmp	r3, #0
   10e20:	d005      	beq.n	10e2e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   10e22:	68fb      	ldr	r3, [r7, #12]
   10e24:	3301      	adds	r3, #1
   10e26:	697a      	ldr	r2, [r7, #20]
   10e28:	40da      	lsrs	r2, r3
   10e2a:	0013      	movs	r3, r2
   10e2c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   10e2e:	697b      	ldr	r3, [r7, #20]
}
   10e30:	0018      	movs	r0, r3
   10e32:	46bd      	mov	sp, r7
   10e34:	b006      	add	sp, #24
   10e36:	bd80      	pop	{r7, pc}
   10e38:	00010bb1 	.word	0x00010bb1
   10e3c:	00010b89 	.word	0x00010b89
   10e40:	40000c04 	.word	0x40000c04
   10e44:	40000c00 	.word	0x40000c00
   10e48:	00010425 	.word	0x00010425
   10e4c:	40000c08 	.word	0x40000c08
   10e50:	00010b9d 	.word	0x00010b9d
   10e54:	000154a5 	.word	0x000154a5

00010e58 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   10e58:	b580      	push	{r7, lr}
   10e5a:	b084      	sub	sp, #16
   10e5c:	af00      	add	r7, sp, #0
   10e5e:	0002      	movs	r2, r0
   10e60:	6039      	str	r1, [r7, #0]
   10e62:	1dfb      	adds	r3, r7, #7
   10e64:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   10e66:	1dfb      	adds	r3, r7, #7
   10e68:	781b      	ldrb	r3, [r3, #0]
   10e6a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   10e6c:	683b      	ldr	r3, [r7, #0]
   10e6e:	781b      	ldrb	r3, [r3, #0]
   10e70:	021b      	lsls	r3, r3, #8
   10e72:	001a      	movs	r2, r3
   10e74:	68fb      	ldr	r3, [r7, #12]
   10e76:	4313      	orrs	r3, r2
   10e78:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   10e7a:	1dfb      	adds	r3, r7, #7
   10e7c:	781b      	ldrb	r3, [r3, #0]
   10e7e:	0018      	movs	r0, r3
   10e80:	4b04      	ldr	r3, [pc, #16]	; (10e94 <system_gclk_chan_set_config+0x3c>)
   10e82:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   10e84:	4b04      	ldr	r3, [pc, #16]	; (10e98 <system_gclk_chan_set_config+0x40>)
   10e86:	68fa      	ldr	r2, [r7, #12]
   10e88:	b292      	uxth	r2, r2
   10e8a:	805a      	strh	r2, [r3, #2]
}
   10e8c:	46c0      	nop			; (mov r8, r8)
   10e8e:	46bd      	mov	sp, r7
   10e90:	b004      	add	sp, #16
   10e92:	bd80      	pop	{r7, pc}
   10e94:	00010ee5 	.word	0x00010ee5
   10e98:	40000c00 	.word	0x40000c00

00010e9c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   10e9c:	b580      	push	{r7, lr}
   10e9e:	b082      	sub	sp, #8
   10ea0:	af00      	add	r7, sp, #0
   10ea2:	0002      	movs	r2, r0
   10ea4:	1dfb      	adds	r3, r7, #7
   10ea6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   10ea8:	4b0a      	ldr	r3, [pc, #40]	; (10ed4 <system_gclk_chan_enable+0x38>)
   10eaa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10eac:	4a0a      	ldr	r2, [pc, #40]	; (10ed8 <system_gclk_chan_enable+0x3c>)
   10eae:	1dfb      	adds	r3, r7, #7
   10eb0:	781b      	ldrb	r3, [r3, #0]
   10eb2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   10eb4:	4909      	ldr	r1, [pc, #36]	; (10edc <system_gclk_chan_enable+0x40>)
   10eb6:	4b09      	ldr	r3, [pc, #36]	; (10edc <system_gclk_chan_enable+0x40>)
   10eb8:	885b      	ldrh	r3, [r3, #2]
   10eba:	b29b      	uxth	r3, r3
   10ebc:	2280      	movs	r2, #128	; 0x80
   10ebe:	01d2      	lsls	r2, r2, #7
   10ec0:	4313      	orrs	r3, r2
   10ec2:	b29b      	uxth	r3, r3
   10ec4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   10ec6:	4b06      	ldr	r3, [pc, #24]	; (10ee0 <system_gclk_chan_enable+0x44>)
   10ec8:	4798      	blx	r3
}
   10eca:	46c0      	nop			; (mov r8, r8)
   10ecc:	46bd      	mov	sp, r7
   10ece:	b002      	add	sp, #8
   10ed0:	bd80      	pop	{r7, pc}
   10ed2:	46c0      	nop			; (mov r8, r8)
   10ed4:	00010b89 	.word	0x00010b89
   10ed8:	40000c02 	.word	0x40000c02
   10edc:	40000c00 	.word	0x40000c00
   10ee0:	00010b9d 	.word	0x00010b9d

00010ee4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   10ee4:	b580      	push	{r7, lr}
   10ee6:	b084      	sub	sp, #16
   10ee8:	af00      	add	r7, sp, #0
   10eea:	0002      	movs	r2, r0
   10eec:	1dfb      	adds	r3, r7, #7
   10eee:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   10ef0:	4b1c      	ldr	r3, [pc, #112]	; (10f64 <system_gclk_chan_disable+0x80>)
   10ef2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10ef4:	4a1c      	ldr	r2, [pc, #112]	; (10f68 <system_gclk_chan_disable+0x84>)
   10ef6:	1dfb      	adds	r3, r7, #7
   10ef8:	781b      	ldrb	r3, [r3, #0]
   10efa:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   10efc:	4b1b      	ldr	r3, [pc, #108]	; (10f6c <system_gclk_chan_disable+0x88>)
   10efe:	885b      	ldrh	r3, [r3, #2]
   10f00:	051b      	lsls	r3, r3, #20
   10f02:	0f1b      	lsrs	r3, r3, #28
   10f04:	b2db      	uxtb	r3, r3
   10f06:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   10f08:	4a18      	ldr	r2, [pc, #96]	; (10f6c <system_gclk_chan_disable+0x88>)
   10f0a:	8853      	ldrh	r3, [r2, #2]
   10f0c:	4918      	ldr	r1, [pc, #96]	; (10f70 <system_gclk_chan_disable+0x8c>)
   10f0e:	400b      	ands	r3, r1
   10f10:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   10f12:	4a16      	ldr	r2, [pc, #88]	; (10f6c <system_gclk_chan_disable+0x88>)
   10f14:	4b15      	ldr	r3, [pc, #84]	; (10f6c <system_gclk_chan_disable+0x88>)
   10f16:	885b      	ldrh	r3, [r3, #2]
   10f18:	b29b      	uxth	r3, r3
   10f1a:	4916      	ldr	r1, [pc, #88]	; (10f74 <system_gclk_chan_disable+0x90>)
   10f1c:	400b      	ands	r3, r1
   10f1e:	b29b      	uxth	r3, r3
   10f20:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   10f22:	46c0      	nop			; (mov r8, r8)
   10f24:	4b11      	ldr	r3, [pc, #68]	; (10f6c <system_gclk_chan_disable+0x88>)
   10f26:	885b      	ldrh	r3, [r3, #2]
   10f28:	b29b      	uxth	r3, r3
   10f2a:	001a      	movs	r2, r3
   10f2c:	2380      	movs	r3, #128	; 0x80
   10f2e:	01db      	lsls	r3, r3, #7
   10f30:	4013      	ands	r3, r2
   10f32:	d1f7      	bne.n	10f24 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   10f34:	4a0d      	ldr	r2, [pc, #52]	; (10f6c <system_gclk_chan_disable+0x88>)
   10f36:	68fb      	ldr	r3, [r7, #12]
   10f38:	b2db      	uxtb	r3, r3
   10f3a:	1c19      	adds	r1, r3, #0
   10f3c:	230f      	movs	r3, #15
   10f3e:	400b      	ands	r3, r1
   10f40:	b2d9      	uxtb	r1, r3
   10f42:	8853      	ldrh	r3, [r2, #2]
   10f44:	1c08      	adds	r0, r1, #0
   10f46:	210f      	movs	r1, #15
   10f48:	4001      	ands	r1, r0
   10f4a:	0208      	lsls	r0, r1, #8
   10f4c:	4908      	ldr	r1, [pc, #32]	; (10f70 <system_gclk_chan_disable+0x8c>)
   10f4e:	400b      	ands	r3, r1
   10f50:	1c19      	adds	r1, r3, #0
   10f52:	1c03      	adds	r3, r0, #0
   10f54:	430b      	orrs	r3, r1
   10f56:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   10f58:	4b07      	ldr	r3, [pc, #28]	; (10f78 <system_gclk_chan_disable+0x94>)
   10f5a:	4798      	blx	r3
}
   10f5c:	46c0      	nop			; (mov r8, r8)
   10f5e:	46bd      	mov	sp, r7
   10f60:	b004      	add	sp, #16
   10f62:	bd80      	pop	{r7, pc}
   10f64:	00010b89 	.word	0x00010b89
   10f68:	40000c02 	.word	0x40000c02
   10f6c:	40000c00 	.word	0x40000c00
   10f70:	fffff0ff 	.word	0xfffff0ff
   10f74:	ffffbfff 	.word	0xffffbfff
   10f78:	00010b9d 	.word	0x00010b9d

00010f7c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   10f7c:	b580      	push	{r7, lr}
   10f7e:	b084      	sub	sp, #16
   10f80:	af00      	add	r7, sp, #0
   10f82:	0002      	movs	r2, r0
   10f84:	1dfb      	adds	r3, r7, #7
   10f86:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   10f88:	4b0d      	ldr	r3, [pc, #52]	; (10fc0 <system_gclk_chan_get_hz+0x44>)
   10f8a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10f8c:	4a0d      	ldr	r2, [pc, #52]	; (10fc4 <system_gclk_chan_get_hz+0x48>)
   10f8e:	1dfb      	adds	r3, r7, #7
   10f90:	781b      	ldrb	r3, [r3, #0]
   10f92:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   10f94:	4b0c      	ldr	r3, [pc, #48]	; (10fc8 <system_gclk_chan_get_hz+0x4c>)
   10f96:	885b      	ldrh	r3, [r3, #2]
   10f98:	051b      	lsls	r3, r3, #20
   10f9a:	0f1b      	lsrs	r3, r3, #28
   10f9c:	b2da      	uxtb	r2, r3
   10f9e:	230f      	movs	r3, #15
   10fa0:	18fb      	adds	r3, r7, r3
   10fa2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   10fa4:	4b09      	ldr	r3, [pc, #36]	; (10fcc <system_gclk_chan_get_hz+0x50>)
   10fa6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   10fa8:	230f      	movs	r3, #15
   10faa:	18fb      	adds	r3, r7, r3
   10fac:	781b      	ldrb	r3, [r3, #0]
   10fae:	0018      	movs	r0, r3
   10fb0:	4b07      	ldr	r3, [pc, #28]	; (10fd0 <system_gclk_chan_get_hz+0x54>)
   10fb2:	4798      	blx	r3
   10fb4:	0003      	movs	r3, r0
}
   10fb6:	0018      	movs	r0, r3
   10fb8:	46bd      	mov	sp, r7
   10fba:	b004      	add	sp, #16
   10fbc:	bd80      	pop	{r7, pc}
   10fbe:	46c0      	nop			; (mov r8, r8)
   10fc0:	00010b89 	.word	0x00010b89
   10fc4:	40000c02 	.word	0x40000c02
   10fc8:	40000c00 	.word	0x40000c00
   10fcc:	00010b9d 	.word	0x00010b9d
   10fd0:	00010d81 	.word	0x00010d81

00010fd4 <system_pinmux_get_group_from_gpio_pin>:
{
   10fd4:	b580      	push	{r7, lr}
   10fd6:	b084      	sub	sp, #16
   10fd8:	af00      	add	r7, sp, #0
   10fda:	0002      	movs	r2, r0
   10fdc:	1dfb      	adds	r3, r7, #7
   10fde:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   10fe0:	230f      	movs	r3, #15
   10fe2:	18fb      	adds	r3, r7, r3
   10fe4:	1dfa      	adds	r2, r7, #7
   10fe6:	7812      	ldrb	r2, [r2, #0]
   10fe8:	09d2      	lsrs	r2, r2, #7
   10fea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   10fec:	230e      	movs	r3, #14
   10fee:	18fb      	adds	r3, r7, r3
   10ff0:	1dfa      	adds	r2, r7, #7
   10ff2:	7812      	ldrb	r2, [r2, #0]
   10ff4:	0952      	lsrs	r2, r2, #5
   10ff6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   10ff8:	4b0d      	ldr	r3, [pc, #52]	; (11030 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   10ffa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   10ffc:	230f      	movs	r3, #15
   10ffe:	18fb      	adds	r3, r7, r3
   11000:	781b      	ldrb	r3, [r3, #0]
   11002:	2b00      	cmp	r3, #0
   11004:	d10f      	bne.n	11026 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11006:	230f      	movs	r3, #15
   11008:	18fb      	adds	r3, r7, r3
   1100a:	781b      	ldrb	r3, [r3, #0]
   1100c:	009b      	lsls	r3, r3, #2
   1100e:	2210      	movs	r2, #16
   11010:	4694      	mov	ip, r2
   11012:	44bc      	add	ip, r7
   11014:	4463      	add	r3, ip
   11016:	3b08      	subs	r3, #8
   11018:	681a      	ldr	r2, [r3, #0]
   1101a:	230e      	movs	r3, #14
   1101c:	18fb      	adds	r3, r7, r3
   1101e:	781b      	ldrb	r3, [r3, #0]
   11020:	01db      	lsls	r3, r3, #7
   11022:	18d3      	adds	r3, r2, r3
   11024:	e000      	b.n	11028 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   11026:	2300      	movs	r3, #0
}
   11028:	0018      	movs	r0, r3
   1102a:	46bd      	mov	sp, r7
   1102c:	b004      	add	sp, #16
   1102e:	bd80      	pop	{r7, pc}
   11030:	41004400 	.word	0x41004400

00011034 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   11034:	b580      	push	{r7, lr}
   11036:	b088      	sub	sp, #32
   11038:	af00      	add	r7, sp, #0
   1103a:	60f8      	str	r0, [r7, #12]
   1103c:	60b9      	str	r1, [r7, #8]
   1103e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   11040:	2300      	movs	r3, #0
   11042:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   11044:	687b      	ldr	r3, [r7, #4]
   11046:	78db      	ldrb	r3, [r3, #3]
   11048:	2201      	movs	r2, #1
   1104a:	4053      	eors	r3, r2
   1104c:	b2db      	uxtb	r3, r3
   1104e:	2b00      	cmp	r3, #0
   11050:	d035      	beq.n	110be <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   11052:	687b      	ldr	r3, [r7, #4]
   11054:	781b      	ldrb	r3, [r3, #0]
   11056:	2b80      	cmp	r3, #128	; 0x80
   11058:	d00b      	beq.n	11072 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   1105a:	69fb      	ldr	r3, [r7, #28]
   1105c:	2280      	movs	r2, #128	; 0x80
   1105e:	0252      	lsls	r2, r2, #9
   11060:	4313      	orrs	r3, r2
   11062:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   11064:	687b      	ldr	r3, [r7, #4]
   11066:	781b      	ldrb	r3, [r3, #0]
   11068:	061b      	lsls	r3, r3, #24
   1106a:	001a      	movs	r2, r3
   1106c:	69fb      	ldr	r3, [r7, #28]
   1106e:	4313      	orrs	r3, r2
   11070:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   11072:	687b      	ldr	r3, [r7, #4]
   11074:	785b      	ldrb	r3, [r3, #1]
   11076:	2b00      	cmp	r3, #0
   11078:	d003      	beq.n	11082 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1107a:	687b      	ldr	r3, [r7, #4]
   1107c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1107e:	2b02      	cmp	r3, #2
   11080:	d110      	bne.n	110a4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   11082:	69fb      	ldr	r3, [r7, #28]
   11084:	2280      	movs	r2, #128	; 0x80
   11086:	0292      	lsls	r2, r2, #10
   11088:	4313      	orrs	r3, r2
   1108a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1108c:	687b      	ldr	r3, [r7, #4]
   1108e:	789b      	ldrb	r3, [r3, #2]
   11090:	2b00      	cmp	r3, #0
   11092:	d004      	beq.n	1109e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   11094:	69fb      	ldr	r3, [r7, #28]
   11096:	2280      	movs	r2, #128	; 0x80
   11098:	02d2      	lsls	r2, r2, #11
   1109a:	4313      	orrs	r3, r2
   1109c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1109e:	68fb      	ldr	r3, [r7, #12]
   110a0:	68ba      	ldr	r2, [r7, #8]
   110a2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   110a4:	687b      	ldr	r3, [r7, #4]
   110a6:	785b      	ldrb	r3, [r3, #1]
   110a8:	2b01      	cmp	r3, #1
   110aa:	d003      	beq.n	110b4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   110ac:	687b      	ldr	r3, [r7, #4]
   110ae:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   110b0:	2b02      	cmp	r3, #2
   110b2:	d107      	bne.n	110c4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   110b4:	69fb      	ldr	r3, [r7, #28]
   110b6:	4a22      	ldr	r2, [pc, #136]	; (11140 <_system_pinmux_config+0x10c>)
   110b8:	4013      	ands	r3, r2
   110ba:	61fb      	str	r3, [r7, #28]
   110bc:	e002      	b.n	110c4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   110be:	68fb      	ldr	r3, [r7, #12]
   110c0:	68ba      	ldr	r2, [r7, #8]
   110c2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   110c4:	68bb      	ldr	r3, [r7, #8]
   110c6:	041b      	lsls	r3, r3, #16
   110c8:	0c1b      	lsrs	r3, r3, #16
   110ca:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   110cc:	68bb      	ldr	r3, [r7, #8]
   110ce:	0c1b      	lsrs	r3, r3, #16
   110d0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   110d2:	69ba      	ldr	r2, [r7, #24]
   110d4:	69fb      	ldr	r3, [r7, #28]
   110d6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   110d8:	22a0      	movs	r2, #160	; 0xa0
   110da:	05d2      	lsls	r2, r2, #23
   110dc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   110de:	68fb      	ldr	r3, [r7, #12]
   110e0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   110e2:	697a      	ldr	r2, [r7, #20]
   110e4:	69fb      	ldr	r3, [r7, #28]
   110e6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   110e8:	22d0      	movs	r2, #208	; 0xd0
   110ea:	0612      	lsls	r2, r2, #24
   110ec:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   110ee:	68fb      	ldr	r3, [r7, #12]
   110f0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   110f2:	687b      	ldr	r3, [r7, #4]
   110f4:	78db      	ldrb	r3, [r3, #3]
   110f6:	2201      	movs	r2, #1
   110f8:	4053      	eors	r3, r2
   110fa:	b2db      	uxtb	r3, r3
   110fc:	2b00      	cmp	r3, #0
   110fe:	d01a      	beq.n	11136 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   11100:	69fa      	ldr	r2, [r7, #28]
   11102:	2380      	movs	r3, #128	; 0x80
   11104:	02db      	lsls	r3, r3, #11
   11106:	4013      	ands	r3, r2
   11108:	d00a      	beq.n	11120 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1110a:	687b      	ldr	r3, [r7, #4]
   1110c:	789b      	ldrb	r3, [r3, #2]
   1110e:	2b01      	cmp	r3, #1
   11110:	d103      	bne.n	1111a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   11112:	68fb      	ldr	r3, [r7, #12]
   11114:	68ba      	ldr	r2, [r7, #8]
   11116:	619a      	str	r2, [r3, #24]
   11118:	e002      	b.n	11120 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   1111a:	68fb      	ldr	r3, [r7, #12]
   1111c:	68ba      	ldr	r2, [r7, #8]
   1111e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   11120:	687b      	ldr	r3, [r7, #4]
   11122:	785b      	ldrb	r3, [r3, #1]
   11124:	2b01      	cmp	r3, #1
   11126:	d003      	beq.n	11130 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   11128:	687b      	ldr	r3, [r7, #4]
   1112a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1112c:	2b02      	cmp	r3, #2
   1112e:	d102      	bne.n	11136 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   11130:	68fb      	ldr	r3, [r7, #12]
   11132:	68ba      	ldr	r2, [r7, #8]
   11134:	609a      	str	r2, [r3, #8]
		}
	}
}
   11136:	46c0      	nop			; (mov r8, r8)
   11138:	46bd      	mov	sp, r7
   1113a:	b008      	add	sp, #32
   1113c:	bd80      	pop	{r7, pc}
   1113e:	46c0      	nop			; (mov r8, r8)
   11140:	fffbffff 	.word	0xfffbffff

00011144 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   11144:	b580      	push	{r7, lr}
   11146:	b084      	sub	sp, #16
   11148:	af00      	add	r7, sp, #0
   1114a:	0002      	movs	r2, r0
   1114c:	6039      	str	r1, [r7, #0]
   1114e:	1dfb      	adds	r3, r7, #7
   11150:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11152:	1dfb      	adds	r3, r7, #7
   11154:	781b      	ldrb	r3, [r3, #0]
   11156:	0018      	movs	r0, r3
   11158:	4b0a      	ldr	r3, [pc, #40]	; (11184 <system_pinmux_pin_set_config+0x40>)
   1115a:	4798      	blx	r3
   1115c:	0003      	movs	r3, r0
   1115e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   11160:	1dfb      	adds	r3, r7, #7
   11162:	781b      	ldrb	r3, [r3, #0]
   11164:	221f      	movs	r2, #31
   11166:	4013      	ands	r3, r2
   11168:	2201      	movs	r2, #1
   1116a:	409a      	lsls	r2, r3
   1116c:	0013      	movs	r3, r2
   1116e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   11170:	683a      	ldr	r2, [r7, #0]
   11172:	68b9      	ldr	r1, [r7, #8]
   11174:	68fb      	ldr	r3, [r7, #12]
   11176:	0018      	movs	r0, r3
   11178:	4b03      	ldr	r3, [pc, #12]	; (11188 <system_pinmux_pin_set_config+0x44>)
   1117a:	4798      	blx	r3
}
   1117c:	46c0      	nop			; (mov r8, r8)
   1117e:	46bd      	mov	sp, r7
   11180:	b004      	add	sp, #16
   11182:	bd80      	pop	{r7, pc}
   11184:	00010fd5 	.word	0x00010fd5
   11188:	00011035 	.word	0x00011035

0001118c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   1118c:	b580      	push	{r7, lr}
   1118e:	af00      	add	r7, sp, #0
	return;
   11190:	46c0      	nop			; (mov r8, r8)
}
   11192:	46bd      	mov	sp, r7
   11194:	bd80      	pop	{r7, pc}
	...

00011198 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   11198:	b580      	push	{r7, lr}
   1119a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1119c:	4b06      	ldr	r3, [pc, #24]	; (111b8 <system_init+0x20>)
   1119e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   111a0:	4b06      	ldr	r3, [pc, #24]	; (111bc <system_init+0x24>)
   111a2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   111a4:	4b06      	ldr	r3, [pc, #24]	; (111c0 <system_init+0x28>)
   111a6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   111a8:	4b06      	ldr	r3, [pc, #24]	; (111c4 <system_init+0x2c>)
   111aa:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   111ac:	4b06      	ldr	r3, [pc, #24]	; (111c8 <system_init+0x30>)
   111ae:	4798      	blx	r3
}
   111b0:	46c0      	nop			; (mov r8, r8)
   111b2:	46bd      	mov	sp, r7
   111b4:	bd80      	pop	{r7, pc}
   111b6:	46c0      	nop			; (mov r8, r8)
   111b8:	000108b1 	.word	0x000108b1
   111bc:	00010145 	.word	0x00010145
   111c0:	0001118d 	.word	0x0001118d
   111c4:	00008e79 	.word	0x00008e79
   111c8:	0001118d 	.word	0x0001118d

000111cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   111cc:	b580      	push	{r7, lr}
   111ce:	b082      	sub	sp, #8
   111d0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   111d2:	4b2f      	ldr	r3, [pc, #188]	; (11290 <Reset_Handler+0xc4>)
   111d4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   111d6:	4b2f      	ldr	r3, [pc, #188]	; (11294 <Reset_Handler+0xc8>)
   111d8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   111da:	687a      	ldr	r2, [r7, #4]
   111dc:	683b      	ldr	r3, [r7, #0]
   111de:	429a      	cmp	r2, r3
   111e0:	d00c      	beq.n	111fc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   111e2:	e007      	b.n	111f4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   111e4:	683b      	ldr	r3, [r7, #0]
   111e6:	1d1a      	adds	r2, r3, #4
   111e8:	603a      	str	r2, [r7, #0]
   111ea:	687a      	ldr	r2, [r7, #4]
   111ec:	1d11      	adds	r1, r2, #4
   111ee:	6079      	str	r1, [r7, #4]
   111f0:	6812      	ldr	r2, [r2, #0]
   111f2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   111f4:	683a      	ldr	r2, [r7, #0]
   111f6:	4b28      	ldr	r3, [pc, #160]	; (11298 <Reset_Handler+0xcc>)
   111f8:	429a      	cmp	r2, r3
   111fa:	d3f3      	bcc.n	111e4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   111fc:	4b27      	ldr	r3, [pc, #156]	; (1129c <Reset_Handler+0xd0>)
   111fe:	603b      	str	r3, [r7, #0]
   11200:	e004      	b.n	1120c <Reset_Handler+0x40>
                *pDest++ = 0;
   11202:	683b      	ldr	r3, [r7, #0]
   11204:	1d1a      	adds	r2, r3, #4
   11206:	603a      	str	r2, [r7, #0]
   11208:	2200      	movs	r2, #0
   1120a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   1120c:	683a      	ldr	r2, [r7, #0]
   1120e:	4b24      	ldr	r3, [pc, #144]	; (112a0 <Reset_Handler+0xd4>)
   11210:	429a      	cmp	r2, r3
   11212:	d3f6      	bcc.n	11202 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   11214:	4b23      	ldr	r3, [pc, #140]	; (112a4 <Reset_Handler+0xd8>)
   11216:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   11218:	4b23      	ldr	r3, [pc, #140]	; (112a8 <Reset_Handler+0xdc>)
   1121a:	687a      	ldr	r2, [r7, #4]
   1121c:	21ff      	movs	r1, #255	; 0xff
   1121e:	438a      	bics	r2, r1
   11220:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   11222:	4a22      	ldr	r2, [pc, #136]	; (112ac <Reset_Handler+0xe0>)
   11224:	2390      	movs	r3, #144	; 0x90
   11226:	005b      	lsls	r3, r3, #1
   11228:	2102      	movs	r1, #2
   1122a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1122c:	4a20      	ldr	r2, [pc, #128]	; (112b0 <Reset_Handler+0xe4>)
   1122e:	78d3      	ldrb	r3, [r2, #3]
   11230:	2103      	movs	r1, #3
   11232:	438b      	bics	r3, r1
   11234:	1c19      	adds	r1, r3, #0
   11236:	2302      	movs	r3, #2
   11238:	430b      	orrs	r3, r1
   1123a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1123c:	4a1c      	ldr	r2, [pc, #112]	; (112b0 <Reset_Handler+0xe4>)
   1123e:	78d3      	ldrb	r3, [r2, #3]
   11240:	210c      	movs	r1, #12
   11242:	438b      	bics	r3, r1
   11244:	1c19      	adds	r1, r3, #0
   11246:	2308      	movs	r3, #8
   11248:	430b      	orrs	r3, r1
   1124a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   1124c:	4a19      	ldr	r2, [pc, #100]	; (112b4 <Reset_Handler+0xe8>)
   1124e:	7b93      	ldrb	r3, [r2, #14]
   11250:	2130      	movs	r1, #48	; 0x30
   11252:	438b      	bics	r3, r1
   11254:	1c19      	adds	r1, r3, #0
   11256:	2320      	movs	r3, #32
   11258:	430b      	orrs	r3, r1
   1125a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1125c:	4a15      	ldr	r2, [pc, #84]	; (112b4 <Reset_Handler+0xe8>)
   1125e:	7b93      	ldrb	r3, [r2, #14]
   11260:	210c      	movs	r1, #12
   11262:	438b      	bics	r3, r1
   11264:	1c19      	adds	r1, r3, #0
   11266:	2308      	movs	r3, #8
   11268:	430b      	orrs	r3, r1
   1126a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1126c:	4a11      	ldr	r2, [pc, #68]	; (112b4 <Reset_Handler+0xe8>)
   1126e:	7b93      	ldrb	r3, [r2, #14]
   11270:	2103      	movs	r1, #3
   11272:	438b      	bics	r3, r1
   11274:	1c19      	adds	r1, r3, #0
   11276:	2302      	movs	r3, #2
   11278:	430b      	orrs	r3, r1
   1127a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   1127c:	4a0e      	ldr	r2, [pc, #56]	; (112b8 <Reset_Handler+0xec>)
   1127e:	6853      	ldr	r3, [r2, #4]
   11280:	2180      	movs	r1, #128	; 0x80
   11282:	430b      	orrs	r3, r1
   11284:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   11286:	4b0d      	ldr	r3, [pc, #52]	; (112bc <Reset_Handler+0xf0>)
   11288:	4798      	blx	r3

        /* Branch to main function */
        main();
   1128a:	4b0d      	ldr	r3, [pc, #52]	; (112c0 <Reset_Handler+0xf4>)
   1128c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   1128e:	e7fe      	b.n	1128e <Reset_Handler+0xc2>
   11290:	0001a3b0 	.word	0x0001a3b0
   11294:	20000000 	.word	0x20000000
   11298:	200001e8 	.word	0x200001e8
   1129c:	200001e8 	.word	0x200001e8
   112a0:	20000920 	.word	0x20000920
   112a4:	00000000 	.word	0x00000000
   112a8:	e000ed00 	.word	0xe000ed00
   112ac:	41007000 	.word	0x41007000
   112b0:	41005000 	.word	0x41005000
   112b4:	41004800 	.word	0x41004800
   112b8:	41004000 	.word	0x41004000
   112bc:	0001245d 	.word	0x0001245d
   112c0:	00011a35 	.word	0x00011a35

000112c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   112c4:	b580      	push	{r7, lr}
   112c6:	af00      	add	r7, sp, #0
        while (1) {
   112c8:	e7fe      	b.n	112c8 <Dummy_Handler+0x4>
	...

000112cc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   112cc:	b580      	push	{r7, lr}
   112ce:	b084      	sub	sp, #16
   112d0:	af00      	add	r7, sp, #0
   112d2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   112d4:	4b0a      	ldr	r3, [pc, #40]	; (11300 <_sbrk+0x34>)
   112d6:	681b      	ldr	r3, [r3, #0]
   112d8:	2b00      	cmp	r3, #0
   112da:	d102      	bne.n	112e2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   112dc:	4b08      	ldr	r3, [pc, #32]	; (11300 <_sbrk+0x34>)
   112de:	4a09      	ldr	r2, [pc, #36]	; (11304 <_sbrk+0x38>)
   112e0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   112e2:	4b07      	ldr	r3, [pc, #28]	; (11300 <_sbrk+0x34>)
   112e4:	681b      	ldr	r3, [r3, #0]
   112e6:	60fb      	str	r3, [r7, #12]

	heap += incr;
   112e8:	4b05      	ldr	r3, [pc, #20]	; (11300 <_sbrk+0x34>)
   112ea:	681a      	ldr	r2, [r3, #0]
   112ec:	687b      	ldr	r3, [r7, #4]
   112ee:	18d2      	adds	r2, r2, r3
   112f0:	4b03      	ldr	r3, [pc, #12]	; (11300 <_sbrk+0x34>)
   112f2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   112f4:	68fb      	ldr	r3, [r7, #12]
}
   112f6:	0018      	movs	r0, r3
   112f8:	46bd      	mov	sp, r7
   112fa:	b004      	add	sp, #16
   112fc:	bd80      	pop	{r7, pc}
   112fe:	46c0      	nop			; (mov r8, r8)
   11300:	200002a0 	.word	0x200002a0
   11304:	20002920 	.word	0x20002920

00011308 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   11308:	b580      	push	{r7, lr}
   1130a:	b082      	sub	sp, #8
   1130c:	af00      	add	r7, sp, #0
   1130e:	6078      	str	r0, [r7, #4]
	return -1;
   11310:	2301      	movs	r3, #1
   11312:	425b      	negs	r3, r3
}
   11314:	0018      	movs	r0, r3
   11316:	46bd      	mov	sp, r7
   11318:	b002      	add	sp, #8
   1131a:	bd80      	pop	{r7, pc}

0001131c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   1131c:	b580      	push	{r7, lr}
   1131e:	b082      	sub	sp, #8
   11320:	af00      	add	r7, sp, #0
   11322:	6078      	str	r0, [r7, #4]
   11324:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   11326:	683b      	ldr	r3, [r7, #0]
   11328:	2280      	movs	r2, #128	; 0x80
   1132a:	0192      	lsls	r2, r2, #6
   1132c:	605a      	str	r2, [r3, #4]

	return 0;
   1132e:	2300      	movs	r3, #0
}
   11330:	0018      	movs	r0, r3
   11332:	46bd      	mov	sp, r7
   11334:	b002      	add	sp, #8
   11336:	bd80      	pop	{r7, pc}

00011338 <_isatty>:

extern int _isatty(int file)
{
   11338:	b580      	push	{r7, lr}
   1133a:	b082      	sub	sp, #8
   1133c:	af00      	add	r7, sp, #0
   1133e:	6078      	str	r0, [r7, #4]
	return 1;
   11340:	2301      	movs	r3, #1
}
   11342:	0018      	movs	r0, r3
   11344:	46bd      	mov	sp, r7
   11346:	b002      	add	sp, #8
   11348:	bd80      	pop	{r7, pc}

0001134a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   1134a:	b580      	push	{r7, lr}
   1134c:	b084      	sub	sp, #16
   1134e:	af00      	add	r7, sp, #0
   11350:	60f8      	str	r0, [r7, #12]
   11352:	60b9      	str	r1, [r7, #8]
   11354:	607a      	str	r2, [r7, #4]
	return 0;
   11356:	2300      	movs	r3, #0
}
   11358:	0018      	movs	r0, r3
   1135a:	46bd      	mov	sp, r7
   1135c:	b004      	add	sp, #16
   1135e:	bd80      	pop	{r7, pc}

00011360 <system_pinmux_get_group_from_gpio_pin>:
{
   11360:	b580      	push	{r7, lr}
   11362:	b084      	sub	sp, #16
   11364:	af00      	add	r7, sp, #0
   11366:	0002      	movs	r2, r0
   11368:	1dfb      	adds	r3, r7, #7
   1136a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1136c:	230f      	movs	r3, #15
   1136e:	18fb      	adds	r3, r7, r3
   11370:	1dfa      	adds	r2, r7, #7
   11372:	7812      	ldrb	r2, [r2, #0]
   11374:	09d2      	lsrs	r2, r2, #7
   11376:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11378:	230e      	movs	r3, #14
   1137a:	18fb      	adds	r3, r7, r3
   1137c:	1dfa      	adds	r2, r7, #7
   1137e:	7812      	ldrb	r2, [r2, #0]
   11380:	0952      	lsrs	r2, r2, #5
   11382:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11384:	4b0d      	ldr	r3, [pc, #52]	; (113bc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11386:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   11388:	230f      	movs	r3, #15
   1138a:	18fb      	adds	r3, r7, r3
   1138c:	781b      	ldrb	r3, [r3, #0]
   1138e:	2b00      	cmp	r3, #0
   11390:	d10f      	bne.n	113b2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11392:	230f      	movs	r3, #15
   11394:	18fb      	adds	r3, r7, r3
   11396:	781b      	ldrb	r3, [r3, #0]
   11398:	009b      	lsls	r3, r3, #2
   1139a:	2210      	movs	r2, #16
   1139c:	4694      	mov	ip, r2
   1139e:	44bc      	add	ip, r7
   113a0:	4463      	add	r3, ip
   113a2:	3b08      	subs	r3, #8
   113a4:	681a      	ldr	r2, [r3, #0]
   113a6:	230e      	movs	r3, #14
   113a8:	18fb      	adds	r3, r7, r3
   113aa:	781b      	ldrb	r3, [r3, #0]
   113ac:	01db      	lsls	r3, r3, #7
   113ae:	18d3      	adds	r3, r2, r3
   113b0:	e000      	b.n	113b4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   113b2:	2300      	movs	r3, #0
}
   113b4:	0018      	movs	r0, r3
   113b6:	46bd      	mov	sp, r7
   113b8:	b004      	add	sp, #16
   113ba:	bd80      	pop	{r7, pc}
   113bc:	41004400 	.word	0x41004400

000113c0 <adc_is_syncing>:
{
   113c0:	b580      	push	{r7, lr}
   113c2:	b084      	sub	sp, #16
   113c4:	af00      	add	r7, sp, #0
   113c6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   113c8:	687b      	ldr	r3, [r7, #4]
   113ca:	681b      	ldr	r3, [r3, #0]
   113cc:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   113ce:	68fb      	ldr	r3, [r7, #12]
   113d0:	7e5b      	ldrb	r3, [r3, #25]
   113d2:	b2db      	uxtb	r3, r3
   113d4:	b25b      	sxtb	r3, r3
   113d6:	2b00      	cmp	r3, #0
   113d8:	da01      	bge.n	113de <adc_is_syncing+0x1e>
		return true;
   113da:	2301      	movs	r3, #1
   113dc:	e000      	b.n	113e0 <adc_is_syncing+0x20>
	return false;
   113de:	2300      	movs	r3, #0
}
   113e0:	0018      	movs	r0, r3
   113e2:	46bd      	mov	sp, r7
   113e4:	b004      	add	sp, #16
   113e6:	bd80      	pop	{r7, pc}

000113e8 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   113e8:	b580      	push	{r7, lr}
   113ea:	b086      	sub	sp, #24
   113ec:	af00      	add	r7, sp, #0
   113ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   113f0:	687b      	ldr	r3, [r7, #4]
   113f2:	681b      	ldr	r3, [r3, #0]
   113f4:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   113f6:	693b      	ldr	r3, [r7, #16]
   113f8:	7e1b      	ldrb	r3, [r3, #24]
   113fa:	b2db      	uxtb	r3, r3
   113fc:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   113fe:	2300      	movs	r3, #0
   11400:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   11402:	68fb      	ldr	r3, [r7, #12]
   11404:	2201      	movs	r2, #1
   11406:	4013      	ands	r3, r2
   11408:	d003      	beq.n	11412 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   1140a:	697b      	ldr	r3, [r7, #20]
   1140c:	2201      	movs	r2, #1
   1140e:	4313      	orrs	r3, r2
   11410:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   11412:	68fb      	ldr	r3, [r7, #12]
   11414:	2204      	movs	r2, #4
   11416:	4013      	ands	r3, r2
   11418:	d003      	beq.n	11422 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   1141a:	697b      	ldr	r3, [r7, #20]
   1141c:	2202      	movs	r2, #2
   1141e:	4313      	orrs	r3, r2
   11420:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   11422:	68fb      	ldr	r3, [r7, #12]
   11424:	2202      	movs	r2, #2
   11426:	4013      	ands	r3, r2
   11428:	d003      	beq.n	11432 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   1142a:	697b      	ldr	r3, [r7, #20]
   1142c:	2204      	movs	r2, #4
   1142e:	4313      	orrs	r3, r2
   11430:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   11432:	697b      	ldr	r3, [r7, #20]
}
   11434:	0018      	movs	r0, r3
   11436:	46bd      	mov	sp, r7
   11438:	b006      	add	sp, #24
   1143a:	bd80      	pop	{r7, pc}

0001143c <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   1143c:	b580      	push	{r7, lr}
   1143e:	b084      	sub	sp, #16
   11440:	af00      	add	r7, sp, #0
   11442:	6078      	str	r0, [r7, #4]
   11444:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   11446:	687b      	ldr	r3, [r7, #4]
   11448:	681b      	ldr	r3, [r3, #0]
   1144a:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   1144c:	2300      	movs	r3, #0
   1144e:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   11450:	683b      	ldr	r3, [r7, #0]
   11452:	2201      	movs	r2, #1
   11454:	4013      	ands	r3, r2
   11456:	d003      	beq.n	11460 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   11458:	68fb      	ldr	r3, [r7, #12]
   1145a:	2201      	movs	r2, #1
   1145c:	4313      	orrs	r3, r2
   1145e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   11460:	683b      	ldr	r3, [r7, #0]
   11462:	2202      	movs	r2, #2
   11464:	4013      	ands	r3, r2
   11466:	d003      	beq.n	11470 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   11468:	68fb      	ldr	r3, [r7, #12]
   1146a:	2204      	movs	r2, #4
   1146c:	4313      	orrs	r3, r2
   1146e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   11470:	683b      	ldr	r3, [r7, #0]
   11472:	2204      	movs	r2, #4
   11474:	4013      	ands	r3, r2
   11476:	d003      	beq.n	11480 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   11478:	68fb      	ldr	r3, [r7, #12]
   1147a:	2202      	movs	r2, #2
   1147c:	4313      	orrs	r3, r2
   1147e:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   11480:	68fb      	ldr	r3, [r7, #12]
   11482:	b2da      	uxtb	r2, r3
   11484:	68bb      	ldr	r3, [r7, #8]
   11486:	761a      	strb	r2, [r3, #24]
}
   11488:	46c0      	nop			; (mov r8, r8)
   1148a:	46bd      	mov	sp, r7
   1148c:	b004      	add	sp, #16
   1148e:	bd80      	pop	{r7, pc}

00011490 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   11490:	b580      	push	{r7, lr}
   11492:	b084      	sub	sp, #16
   11494:	af00      	add	r7, sp, #0
   11496:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   11498:	687b      	ldr	r3, [r7, #4]
   1149a:	681b      	ldr	r3, [r3, #0]
   1149c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1149e:	46c0      	nop			; (mov r8, r8)
   114a0:	687b      	ldr	r3, [r7, #4]
   114a2:	0018      	movs	r0, r3
   114a4:	4b0e      	ldr	r3, [pc, #56]	; (114e0 <adc_enable+0x50>)
   114a6:	4798      	blx	r3
   114a8:	1e03      	subs	r3, r0, #0
   114aa:	d1f9      	bne.n	114a0 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   114ac:	68fb      	ldr	r3, [r7, #12]
   114ae:	220f      	movs	r2, #15
   114b0:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   114b2:	68fb      	ldr	r3, [r7, #12]
   114b4:	220f      	movs	r2, #15
   114b6:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   114b8:	68fb      	ldr	r3, [r7, #12]
   114ba:	781b      	ldrb	r3, [r3, #0]
   114bc:	b2db      	uxtb	r3, r3
   114be:	2202      	movs	r2, #2
   114c0:	4313      	orrs	r3, r2
   114c2:	b2da      	uxtb	r2, r3
   114c4:	68fb      	ldr	r3, [r7, #12]
   114c6:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   114c8:	46c0      	nop			; (mov r8, r8)
   114ca:	687b      	ldr	r3, [r7, #4]
   114cc:	0018      	movs	r0, r3
   114ce:	4b04      	ldr	r3, [pc, #16]	; (114e0 <adc_enable+0x50>)
   114d0:	4798      	blx	r3
   114d2:	1e03      	subs	r3, r0, #0
   114d4:	d1f9      	bne.n	114ca <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   114d6:	2300      	movs	r3, #0
}
   114d8:	0018      	movs	r0, r3
   114da:	46bd      	mov	sp, r7
   114dc:	b004      	add	sp, #16
   114de:	bd80      	pop	{r7, pc}
   114e0:	000113c1 	.word	0x000113c1

000114e4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   114e4:	b580      	push	{r7, lr}
   114e6:	b084      	sub	sp, #16
   114e8:	af00      	add	r7, sp, #0
   114ea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   114ec:	687b      	ldr	r3, [r7, #4]
   114ee:	681b      	ldr	r3, [r3, #0]
   114f0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   114f2:	46c0      	nop			; (mov r8, r8)
   114f4:	687b      	ldr	r3, [r7, #4]
   114f6:	0018      	movs	r0, r3
   114f8:	4b0b      	ldr	r3, [pc, #44]	; (11528 <adc_start_conversion+0x44>)
   114fa:	4798      	blx	r3
   114fc:	1e03      	subs	r3, r0, #0
   114fe:	d1f9      	bne.n	114f4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   11500:	68fb      	ldr	r3, [r7, #12]
   11502:	7b1b      	ldrb	r3, [r3, #12]
   11504:	b2db      	uxtb	r3, r3
   11506:	2202      	movs	r2, #2
   11508:	4313      	orrs	r3, r2
   1150a:	b2da      	uxtb	r2, r3
   1150c:	68fb      	ldr	r3, [r7, #12]
   1150e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   11510:	46c0      	nop			; (mov r8, r8)
   11512:	687b      	ldr	r3, [r7, #4]
   11514:	0018      	movs	r0, r3
   11516:	4b04      	ldr	r3, [pc, #16]	; (11528 <adc_start_conversion+0x44>)
   11518:	4798      	blx	r3
   1151a:	1e03      	subs	r3, r0, #0
   1151c:	d1f9      	bne.n	11512 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   1151e:	46c0      	nop			; (mov r8, r8)
   11520:	46bd      	mov	sp, r7
   11522:	b004      	add	sp, #16
   11524:	bd80      	pop	{r7, pc}
   11526:	46c0      	nop			; (mov r8, r8)
   11528:	000113c1 	.word	0x000113c1

0001152c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   1152c:	b580      	push	{r7, lr}
   1152e:	b084      	sub	sp, #16
   11530:	af00      	add	r7, sp, #0
   11532:	6078      	str	r0, [r7, #4]
   11534:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   11536:	687b      	ldr	r3, [r7, #4]
   11538:	0018      	movs	r0, r3
   1153a:	4b18      	ldr	r3, [pc, #96]	; (1159c <adc_read+0x70>)
   1153c:	4798      	blx	r3
   1153e:	0002      	movs	r2, r0
   11540:	2301      	movs	r3, #1
   11542:	4013      	ands	r3, r2
   11544:	d101      	bne.n	1154a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   11546:	2305      	movs	r3, #5
   11548:	e023      	b.n	11592 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   1154a:	687b      	ldr	r3, [r7, #4]
   1154c:	681b      	ldr	r3, [r3, #0]
   1154e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   11550:	46c0      	nop			; (mov r8, r8)
   11552:	687b      	ldr	r3, [r7, #4]
   11554:	0018      	movs	r0, r3
   11556:	4b12      	ldr	r3, [pc, #72]	; (115a0 <adc_read+0x74>)
   11558:	4798      	blx	r3
   1155a:	1e03      	subs	r3, r0, #0
   1155c:	d1f9      	bne.n	11552 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   1155e:	68fb      	ldr	r3, [r7, #12]
   11560:	8b5b      	ldrh	r3, [r3, #26]
   11562:	b29a      	uxth	r2, r3
   11564:	683b      	ldr	r3, [r7, #0]
   11566:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   11568:	687b      	ldr	r3, [r7, #4]
   1156a:	2101      	movs	r1, #1
   1156c:	0018      	movs	r0, r3
   1156e:	4b0d      	ldr	r3, [pc, #52]	; (115a4 <adc_read+0x78>)
   11570:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   11572:	687b      	ldr	r3, [r7, #4]
   11574:	0018      	movs	r0, r3
   11576:	4b09      	ldr	r3, [pc, #36]	; (1159c <adc_read+0x70>)
   11578:	4798      	blx	r3
   1157a:	0002      	movs	r2, r0
   1157c:	2304      	movs	r3, #4
   1157e:	4013      	ands	r3, r2
   11580:	d006      	beq.n	11590 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   11582:	687b      	ldr	r3, [r7, #4]
   11584:	2104      	movs	r1, #4
   11586:	0018      	movs	r0, r3
   11588:	4b06      	ldr	r3, [pc, #24]	; (115a4 <adc_read+0x78>)
   1158a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   1158c:	231e      	movs	r3, #30
   1158e:	e000      	b.n	11592 <adc_read+0x66>
	}

	return STATUS_OK;
   11590:	2300      	movs	r3, #0
}
   11592:	0018      	movs	r0, r3
   11594:	46bd      	mov	sp, r7
   11596:	b004      	add	sp, #16
   11598:	bd80      	pop	{r7, pc}
   1159a:	46c0      	nop			; (mov r8, r8)
   1159c:	000113e9 	.word	0x000113e9
   115a0:	000113c1 	.word	0x000113c1
   115a4:	0001143d 	.word	0x0001143d

000115a8 <port_get_group_from_gpio_pin>:
{
   115a8:	b580      	push	{r7, lr}
   115aa:	b082      	sub	sp, #8
   115ac:	af00      	add	r7, sp, #0
   115ae:	0002      	movs	r2, r0
   115b0:	1dfb      	adds	r3, r7, #7
   115b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   115b4:	1dfb      	adds	r3, r7, #7
   115b6:	781b      	ldrb	r3, [r3, #0]
   115b8:	0018      	movs	r0, r3
   115ba:	4b03      	ldr	r3, [pc, #12]	; (115c8 <port_get_group_from_gpio_pin+0x20>)
   115bc:	4798      	blx	r3
   115be:	0003      	movs	r3, r0
}
   115c0:	0018      	movs	r0, r3
   115c2:	46bd      	mov	sp, r7
   115c4:	b002      	add	sp, #8
   115c6:	bd80      	pop	{r7, pc}
   115c8:	00011361 	.word	0x00011361

000115cc <port_get_config_defaults>:
{
   115cc:	b580      	push	{r7, lr}
   115ce:	b082      	sub	sp, #8
   115d0:	af00      	add	r7, sp, #0
   115d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   115d4:	687b      	ldr	r3, [r7, #4]
   115d6:	2200      	movs	r2, #0
   115d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   115da:	687b      	ldr	r3, [r7, #4]
   115dc:	2201      	movs	r2, #1
   115de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   115e0:	687b      	ldr	r3, [r7, #4]
   115e2:	2200      	movs	r2, #0
   115e4:	709a      	strb	r2, [r3, #2]
}
   115e6:	46c0      	nop			; (mov r8, r8)
   115e8:	46bd      	mov	sp, r7
   115ea:	b002      	add	sp, #8
   115ec:	bd80      	pop	{r7, pc}
	...

000115f0 <port_pin_set_output_level>:
{
   115f0:	b580      	push	{r7, lr}
   115f2:	b084      	sub	sp, #16
   115f4:	af00      	add	r7, sp, #0
   115f6:	0002      	movs	r2, r0
   115f8:	1dfb      	adds	r3, r7, #7
   115fa:	701a      	strb	r2, [r3, #0]
   115fc:	1dbb      	adds	r3, r7, #6
   115fe:	1c0a      	adds	r2, r1, #0
   11600:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11602:	1dfb      	adds	r3, r7, #7
   11604:	781b      	ldrb	r3, [r3, #0]
   11606:	0018      	movs	r0, r3
   11608:	4b0d      	ldr	r3, [pc, #52]	; (11640 <port_pin_set_output_level+0x50>)
   1160a:	4798      	blx	r3
   1160c:	0003      	movs	r3, r0
   1160e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11610:	1dfb      	adds	r3, r7, #7
   11612:	781b      	ldrb	r3, [r3, #0]
   11614:	221f      	movs	r2, #31
   11616:	4013      	ands	r3, r2
   11618:	2201      	movs	r2, #1
   1161a:	409a      	lsls	r2, r3
   1161c:	0013      	movs	r3, r2
   1161e:	60bb      	str	r3, [r7, #8]
	if (level) {
   11620:	1dbb      	adds	r3, r7, #6
   11622:	781b      	ldrb	r3, [r3, #0]
   11624:	2b00      	cmp	r3, #0
   11626:	d003      	beq.n	11630 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11628:	68fb      	ldr	r3, [r7, #12]
   1162a:	68ba      	ldr	r2, [r7, #8]
   1162c:	619a      	str	r2, [r3, #24]
}
   1162e:	e002      	b.n	11636 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11630:	68fb      	ldr	r3, [r7, #12]
   11632:	68ba      	ldr	r2, [r7, #8]
   11634:	615a      	str	r2, [r3, #20]
}
   11636:	46c0      	nop			; (mov r8, r8)
   11638:	46bd      	mov	sp, r7
   1163a:	b004      	add	sp, #16
   1163c:	bd80      	pop	{r7, pc}
   1163e:	46c0      	nop			; (mov r8, r8)
   11640:	000115a9 	.word	0x000115a9

00011644 <get_moisture>:
/* Gets the moisture value from SEN13322
*
*/
//TODO Set reference value
float get_moisture(void)
{
   11644:	b580      	push	{r7, lr}
   11646:	b082      	sub	sp, #8
   11648:	af00      	add	r7, sp, #0
	// turn on sensor
	configure_port_pins_set(PIN_PA17);
   1164a:	2011      	movs	r0, #17
   1164c:	4b19      	ldr	r3, [pc, #100]	; (116b4 <get_moisture+0x70>)
   1164e:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA17, true);
   11650:	2101      	movs	r1, #1
   11652:	2011      	movs	r0, #17
   11654:	4b18      	ldr	r3, [pc, #96]	; (116b8 <get_moisture+0x74>)
   11656:	4798      	blx	r3
	
	delay_ms(500);
   11658:	23fa      	movs	r3, #250	; 0xfa
   1165a:	005b      	lsls	r3, r3, #1
   1165c:	0018      	movs	r0, r3
   1165e:	4b17      	ldr	r3, [pc, #92]	; (116bc <get_moisture+0x78>)
   11660:	4798      	blx	r3
	
	// read ADC
	uint16_t adc_result;
	adc_start_conversion(&adc_instance);
   11662:	4b17      	ldr	r3, [pc, #92]	; (116c0 <get_moisture+0x7c>)
   11664:	0018      	movs	r0, r3
   11666:	4b17      	ldr	r3, [pc, #92]	; (116c4 <get_moisture+0x80>)
   11668:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
   1166a:	1cba      	adds	r2, r7, #2
   1166c:	4b14      	ldr	r3, [pc, #80]	; (116c0 <get_moisture+0x7c>)
   1166e:	0011      	movs	r1, r2
   11670:	0018      	movs	r0, r3
   11672:	4b15      	ldr	r3, [pc, #84]	; (116c8 <get_moisture+0x84>)
   11674:	4798      	blx	r3
   11676:	0003      	movs	r3, r0
   11678:	2b05      	cmp	r3, #5
   1167a:	d0f6      	beq.n	1166a <get_moisture+0x26>
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
   1167c:	1cbb      	adds	r3, r7, #2
   1167e:	881b      	ldrh	r3, [r3, #0]
   11680:	001a      	movs	r2, r3
   11682:	4b12      	ldr	r3, [pc, #72]	; (116cc <get_moisture+0x88>)
   11684:	0010      	movs	r0, r2
   11686:	4798      	blx	r3
   11688:	1c02      	adds	r2, r0, #0
   1168a:	4b11      	ldr	r3, [pc, #68]	; (116d0 <get_moisture+0x8c>)
   1168c:	4911      	ldr	r1, [pc, #68]	; (116d4 <get_moisture+0x90>)
   1168e:	1c10      	adds	r0, r2, #0
   11690:	4798      	blx	r3
   11692:	1c03      	adds	r3, r0, #0
   11694:	1c1a      	adds	r2, r3, #0
   11696:	4b10      	ldr	r3, [pc, #64]	; (116d8 <get_moisture+0x94>)
   11698:	4910      	ldr	r1, [pc, #64]	; (116dc <get_moisture+0x98>)
   1169a:	1c10      	adds	r0, r2, #0
   1169c:	4798      	blx	r3
   1169e:	1c03      	adds	r3, r0, #0
   116a0:	607b      	str	r3, [r7, #4]
	
	//turn off sensor
	port_pin_set_output_level(PIN_PA17, false);
   116a2:	2100      	movs	r1, #0
   116a4:	2011      	movs	r0, #17
   116a6:	4b04      	ldr	r3, [pc, #16]	; (116b8 <get_moisture+0x74>)
   116a8:	4798      	blx	r3
	

	return moisture;
   116aa:	687b      	ldr	r3, [r7, #4]

	
}
   116ac:	1c18      	adds	r0, r3, #0
   116ae:	46bd      	mov	sp, r7
   116b0:	b002      	add	sp, #8
   116b2:	bd80      	pop	{r7, pc}
   116b4:	00011741 	.word	0x00011741
   116b8:	000115f1 	.word	0x000115f1
   116bc:	0000d3c9 	.word	0x0000d3c9
   116c0:	200008f0 	.word	0x200008f0
   116c4:	000114e5 	.word	0x000114e5
   116c8:	0001152d 	.word	0x0001152d
   116cc:	00015d31 	.word	0x00015d31
   116d0:	00015861 	.word	0x00015861
   116d4:	457ff000 	.word	0x457ff000
   116d8:	00015af1 	.word	0x00015af1
   116dc:	42c80000 	.word	0x42c80000

000116e0 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
   116e0:	b580      	push	{r7, lr}
   116e2:	b08e      	sub	sp, #56	; 0x38
   116e4:	af00      	add	r7, sp, #0
   116e6:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
   116e8:	2308      	movs	r3, #8
   116ea:	18fb      	adds	r3, r7, r3
   116ec:	0018      	movs	r0, r3
   116ee:	4b0f      	ldr	r3, [pc, #60]	; (1172c <configure_adc+0x4c>)
   116f0:	4798      	blx	r3
	config_adc.positive_input = pin;
   116f2:	687b      	ldr	r3, [r7, #4]
   116f4:	b2da      	uxtb	r2, r3
   116f6:	2308      	movs	r3, #8
   116f8:	18fb      	adds	r3, r7, r3
   116fa:	731a      	strb	r2, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
   116fc:	2308      	movs	r3, #8
   116fe:	18fb      	adds	r3, r7, r3
   11700:	2201      	movs	r2, #1
   11702:	705a      	strb	r2, [r3, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
   11704:	2308      	movs	r3, #8
   11706:	18fb      	adds	r3, r7, r3
   11708:	2280      	movs	r2, #128	; 0x80
   1170a:	0092      	lsls	r2, r2, #2
   1170c:	805a      	strh	r2, [r3, #2]
	adc_init(&adc_instance, ADC, &config_adc);
   1170e:	2308      	movs	r3, #8
   11710:	18fa      	adds	r2, r7, r3
   11712:	4907      	ldr	r1, [pc, #28]	; (11730 <configure_adc+0x50>)
   11714:	4b07      	ldr	r3, [pc, #28]	; (11734 <configure_adc+0x54>)
   11716:	0018      	movs	r0, r3
   11718:	4b07      	ldr	r3, [pc, #28]	; (11738 <configure_adc+0x58>)
   1171a:	4798      	blx	r3
	adc_enable(&adc_instance);
   1171c:	4b05      	ldr	r3, [pc, #20]	; (11734 <configure_adc+0x54>)
   1171e:	0018      	movs	r0, r3
   11720:	4b06      	ldr	r3, [pc, #24]	; (1173c <configure_adc+0x5c>)
   11722:	4798      	blx	r3
}
   11724:	46c0      	nop			; (mov r8, r8)
   11726:	46bd      	mov	sp, r7
   11728:	b00e      	add	sp, #56	; 0x38
   1172a:	bd80      	pop	{r7, pc}
   1172c:	0000d4fd 	.word	0x0000d4fd
   11730:	42004000 	.word	0x42004000
   11734:	200008f0 	.word	0x200008f0
   11738:	0000db4d 	.word	0x0000db4d
   1173c:	00011491 	.word	0x00011491

00011740 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
   11740:	b580      	push	{r7, lr}
   11742:	b084      	sub	sp, #16
   11744:	af00      	add	r7, sp, #0
   11746:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
   11748:	230c      	movs	r3, #12
   1174a:	18fb      	adds	r3, r7, r3
   1174c:	0018      	movs	r0, r3
   1174e:	4b09      	ldr	r3, [pc, #36]	; (11774 <configure_port_pins_set+0x34>)
   11750:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   11752:	230c      	movs	r3, #12
   11754:	18fb      	adds	r3, r7, r3
   11756:	2201      	movs	r2, #1
   11758:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(pin, &config_port_pin);
   1175a:	687b      	ldr	r3, [r7, #4]
   1175c:	b2db      	uxtb	r3, r3
   1175e:	220c      	movs	r2, #12
   11760:	18ba      	adds	r2, r7, r2
   11762:	0011      	movs	r1, r2
   11764:	0018      	movs	r0, r3
   11766:	4b04      	ldr	r3, [pc, #16]	; (11778 <configure_port_pins_set+0x38>)
   11768:	4798      	blx	r3
}
   1176a:	46c0      	nop			; (mov r8, r8)
   1176c:	46bd      	mov	sp, r7
   1176e:	b004      	add	sp, #16
   11770:	bd80      	pop	{r7, pc}
   11772:	46c0      	nop			; (mov r8, r8)
   11774:	000115cd 	.word	0x000115cd
   11778:	000101bd 	.word	0x000101bd

0001177c <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
   1177c:	b580      	push	{r7, lr}
   1177e:	b084      	sub	sp, #16
   11780:	af00      	add	r7, sp, #0
   11782:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
   11784:	230c      	movs	r3, #12
   11786:	18fb      	adds	r3, r7, r3
   11788:	0018      	movs	r0, r3
   1178a:	4b0b      	ldr	r3, [pc, #44]	; (117b8 <configure_port_pins_get+0x3c>)
   1178c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   1178e:	230c      	movs	r3, #12
   11790:	18fb      	adds	r3, r7, r3
   11792:	2200      	movs	r2, #0
   11794:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
   11796:	230c      	movs	r3, #12
   11798:	18fb      	adds	r3, r7, r3
   1179a:	2201      	movs	r2, #1
   1179c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(pin, &config_port_pin);
   1179e:	687b      	ldr	r3, [r7, #4]
   117a0:	b2db      	uxtb	r3, r3
   117a2:	220c      	movs	r2, #12
   117a4:	18ba      	adds	r2, r7, r2
   117a6:	0011      	movs	r1, r2
   117a8:	0018      	movs	r0, r3
   117aa:	4b04      	ldr	r3, [pc, #16]	; (117bc <configure_port_pins_get+0x40>)
   117ac:	4798      	blx	r3
}
   117ae:	46c0      	nop			; (mov r8, r8)
   117b0:	46bd      	mov	sp, r7
   117b2:	b004      	add	sp, #16
   117b4:	bd80      	pop	{r7, pc}
   117b6:	46c0      	nop			; (mov r8, r8)
   117b8:	000115cd 	.word	0x000115cd
   117bc:	000101bd 	.word	0x000101bd

000117c0 <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
   117c0:	b580      	push	{r7, lr}
   117c2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
   117c4:	2015      	movs	r0, #21
   117c6:	4b04      	ldr	r3, [pc, #16]	; (117d8 <led1_on+0x18>)
   117c8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, true);	
   117ca:	2101      	movs	r1, #1
   117cc:	2015      	movs	r0, #21
   117ce:	4b03      	ldr	r3, [pc, #12]	; (117dc <led1_on+0x1c>)
   117d0:	4798      	blx	r3
}
   117d2:	46c0      	nop			; (mov r8, r8)
   117d4:	46bd      	mov	sp, r7
   117d6:	bd80      	pop	{r7, pc}
   117d8:	00011741 	.word	0x00011741
   117dc:	000115f1 	.word	0x000115f1

000117e0 <led1_off>:

void led1_off(void)
{
   117e0:	b580      	push	{r7, lr}
   117e2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
   117e4:	2015      	movs	r0, #21
   117e6:	4b04      	ldr	r3, [pc, #16]	; (117f8 <led1_off+0x18>)
   117e8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, false);
   117ea:	2100      	movs	r1, #0
   117ec:	2015      	movs	r0, #21
   117ee:	4b03      	ldr	r3, [pc, #12]	; (117fc <led1_off+0x1c>)
   117f0:	4798      	blx	r3
}
   117f2:	46c0      	nop			; (mov r8, r8)
   117f4:	46bd      	mov	sp, r7
   117f6:	bd80      	pop	{r7, pc}
   117f8:	00011741 	.word	0x00011741
   117fc:	000115f1 	.word	0x000115f1

00011800 <led2_on>:

void led2_on(void)
{
   11800:	b580      	push	{r7, lr}
   11802:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
   11804:	2003      	movs	r0, #3
   11806:	4b04      	ldr	r3, [pc, #16]	; (11818 <led2_on+0x18>)
   11808:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, true);
   1180a:	2101      	movs	r1, #1
   1180c:	2003      	movs	r0, #3
   1180e:	4b03      	ldr	r3, [pc, #12]	; (1181c <led2_on+0x1c>)
   11810:	4798      	blx	r3
}
   11812:	46c0      	nop			; (mov r8, r8)
   11814:	46bd      	mov	sp, r7
   11816:	bd80      	pop	{r7, pc}
   11818:	00011741 	.word	0x00011741
   1181c:	000115f1 	.word	0x000115f1

00011820 <led2_off>:

void led2_off(void)
{
   11820:	b580      	push	{r7, lr}
   11822:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
   11824:	2003      	movs	r0, #3
   11826:	4b04      	ldr	r3, [pc, #16]	; (11838 <led2_off+0x18>)
   11828:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, false);
   1182a:	2100      	movs	r1, #0
   1182c:	2003      	movs	r0, #3
   1182e:	4b03      	ldr	r3, [pc, #12]	; (1183c <led2_off+0x1c>)
   11830:	4798      	blx	r3
}
   11832:	46c0      	nop			; (mov r8, r8)
   11834:	46bd      	mov	sp, r7
   11836:	bd80      	pop	{r7, pc}
   11838:	00011741 	.word	0x00011741
   1183c:	000115f1 	.word	0x000115f1

00011840 <relay1_enable>:
	configure_port_pins_set(PIN_PA20);
	port_pin_set_output_level(PIN_PA20, false);
}

void relay1_enable(void)
{
   11840:	b580      	push	{r7, lr}
   11842:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
   11844:	2022      	movs	r0, #34	; 0x22
   11846:	4b04      	ldr	r3, [pc, #16]	; (11858 <relay1_enable+0x18>)
   11848:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, true);
   1184a:	2101      	movs	r1, #1
   1184c:	2022      	movs	r0, #34	; 0x22
   1184e:	4b03      	ldr	r3, [pc, #12]	; (1185c <relay1_enable+0x1c>)
   11850:	4798      	blx	r3
}
   11852:	46c0      	nop			; (mov r8, r8)
   11854:	46bd      	mov	sp, r7
   11856:	bd80      	pop	{r7, pc}
   11858:	00011741 	.word	0x00011741
   1185c:	000115f1 	.word	0x000115f1

00011860 <relay1_disable>:

void relay1_disable(void)
{
   11860:	b580      	push	{r7, lr}
   11862:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
   11864:	2022      	movs	r0, #34	; 0x22
   11866:	4b04      	ldr	r3, [pc, #16]	; (11878 <relay1_disable+0x18>)
   11868:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, false);
   1186a:	2100      	movs	r1, #0
   1186c:	2022      	movs	r0, #34	; 0x22
   1186e:	4b03      	ldr	r3, [pc, #12]	; (1187c <relay1_disable+0x1c>)
   11870:	4798      	blx	r3
}
   11872:	46c0      	nop			; (mov r8, r8)
   11874:	46bd      	mov	sp, r7
   11876:	bd80      	pop	{r7, pc}
   11878:	00011741 	.word	0x00011741
   1187c:	000115f1 	.word	0x000115f1

00011880 <relay2_enable>:

void relay2_enable(void)
{
   11880:	b580      	push	{r7, lr}
   11882:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
   11884:	2023      	movs	r0, #35	; 0x23
   11886:	4b04      	ldr	r3, [pc, #16]	; (11898 <relay2_enable+0x18>)
   11888:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, true);
   1188a:	2101      	movs	r1, #1
   1188c:	2023      	movs	r0, #35	; 0x23
   1188e:	4b03      	ldr	r3, [pc, #12]	; (1189c <relay2_enable+0x1c>)
   11890:	4798      	blx	r3
}
   11892:	46c0      	nop			; (mov r8, r8)
   11894:	46bd      	mov	sp, r7
   11896:	bd80      	pop	{r7, pc}
   11898:	00011741 	.word	0x00011741
   1189c:	000115f1 	.word	0x000115f1

000118a0 <relay2_disable>:

void relay2_disable(void)
{
   118a0:	b580      	push	{r7, lr}
   118a2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
   118a4:	2023      	movs	r0, #35	; 0x23
   118a6:	4b04      	ldr	r3, [pc, #16]	; (118b8 <relay2_disable+0x18>)
   118a8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, false);
   118aa:	2100      	movs	r1, #0
   118ac:	2023      	movs	r0, #35	; 0x23
   118ae:	4b03      	ldr	r3, [pc, #12]	; (118bc <relay2_disable+0x1c>)
   118b0:	4798      	blx	r3
}
   118b2:	46c0      	nop			; (mov r8, r8)
   118b4:	46bd      	mov	sp, r7
   118b6:	bd80      	pop	{r7, pc}
   118b8:	00011741 	.word	0x00011741
   118bc:	000115f1 	.word	0x000115f1

000118c0 <gpio5_enable>:

void gpio5_enable(void)
{
   118c0:	b580      	push	{r7, lr}
   118c2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
   118c4:	2037      	movs	r0, #55	; 0x37
   118c6:	4b04      	ldr	r3, [pc, #16]	; (118d8 <gpio5_enable+0x18>)
   118c8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, true);
   118ca:	2101      	movs	r1, #1
   118cc:	2037      	movs	r0, #55	; 0x37
   118ce:	4b03      	ldr	r3, [pc, #12]	; (118dc <gpio5_enable+0x1c>)
   118d0:	4798      	blx	r3
}
   118d2:	46c0      	nop			; (mov r8, r8)
   118d4:	46bd      	mov	sp, r7
   118d6:	bd80      	pop	{r7, pc}
   118d8:	00011741 	.word	0x00011741
   118dc:	000115f1 	.word	0x000115f1

000118e0 <gpio5_disable>:

void gpio5_disable(void)
{
   118e0:	b580      	push	{r7, lr}
   118e2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
   118e4:	2037      	movs	r0, #55	; 0x37
   118e6:	4b04      	ldr	r3, [pc, #16]	; (118f8 <gpio5_disable+0x18>)
   118e8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, false);
   118ea:	2100      	movs	r1, #0
   118ec:	2037      	movs	r0, #55	; 0x37
   118ee:	4b03      	ldr	r3, [pc, #12]	; (118fc <gpio5_disable+0x1c>)
   118f0:	4798      	blx	r3
}
   118f2:	46c0      	nop			; (mov r8, r8)
   118f4:	46bd      	mov	sp, r7
   118f6:	bd80      	pop	{r7, pc}
   118f8:	00011741 	.word	0x00011741
   118fc:	000115f1 	.word	0x000115f1

00011900 <run_pump>:

	tcc_init(&tcc_instance_pwm, CONF_PWM_MODULE, &config_tcc);
	tcc_enable(&tcc_instance_pwm);
}

void run_pump(int duration) {
   11900:	b580      	push	{r7, lr}
   11902:	b082      	sub	sp, #8
   11904:	af00      	add	r7, sp, #0
   11906:	6078      	str	r0, [r7, #4]
	
	//boost_enable();
	gpio5_enable();
   11908:	4b0b      	ldr	r3, [pc, #44]	; (11938 <run_pump+0x38>)
   1190a:	4798      	blx	r3
	led1_on();	
   1190c:	4b0b      	ldr	r3, [pc, #44]	; (1193c <run_pump+0x3c>)
   1190e:	4798      	blx	r3
	
	delay_ms(duration); //duration of pump
   11910:	687b      	ldr	r3, [r7, #4]
   11912:	2b00      	cmp	r3, #0
   11914:	d004      	beq.n	11920 <run_pump+0x20>
   11916:	687b      	ldr	r3, [r7, #4]
   11918:	0018      	movs	r0, r3
   1191a:	4b09      	ldr	r3, [pc, #36]	; (11940 <run_pump+0x40>)
   1191c:	4798      	blx	r3
   1191e:	e002      	b.n	11926 <run_pump+0x26>
   11920:	2001      	movs	r0, #1
   11922:	4b08      	ldr	r3, [pc, #32]	; (11944 <run_pump+0x44>)
   11924:	4798      	blx	r3
	
	led1_off();
   11926:	4b08      	ldr	r3, [pc, #32]	; (11948 <run_pump+0x48>)
   11928:	4798      	blx	r3
	gpio5_disable();
   1192a:	4b08      	ldr	r3, [pc, #32]	; (1194c <run_pump+0x4c>)
   1192c:	4798      	blx	r3
	//boost_disable();
	
   1192e:	46c0      	nop			; (mov r8, r8)
   11930:	46bd      	mov	sp, r7
   11932:	b002      	add	sp, #8
   11934:	bd80      	pop	{r7, pc}
   11936:	46c0      	nop			; (mov r8, r8)
   11938:	000118c1 	.word	0x000118c1
   1193c:	000117c1 	.word	0x000117c1
   11940:	0000d3c9 	.word	0x0000d3c9
   11944:	0000d399 	.word	0x0000d399
   11948:	000117e1 	.word	0x000117e1
   1194c:	000118e1 	.word	0x000118e1

00011950 <system_pinmux_get_group_from_gpio_pin>:
{
   11950:	b580      	push	{r7, lr}
   11952:	b084      	sub	sp, #16
   11954:	af00      	add	r7, sp, #0
   11956:	0002      	movs	r2, r0
   11958:	1dfb      	adds	r3, r7, #7
   1195a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1195c:	230f      	movs	r3, #15
   1195e:	18fb      	adds	r3, r7, r3
   11960:	1dfa      	adds	r2, r7, #7
   11962:	7812      	ldrb	r2, [r2, #0]
   11964:	09d2      	lsrs	r2, r2, #7
   11966:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11968:	230e      	movs	r3, #14
   1196a:	18fb      	adds	r3, r7, r3
   1196c:	1dfa      	adds	r2, r7, #7
   1196e:	7812      	ldrb	r2, [r2, #0]
   11970:	0952      	lsrs	r2, r2, #5
   11972:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11974:	4b0d      	ldr	r3, [pc, #52]	; (119ac <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11976:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   11978:	230f      	movs	r3, #15
   1197a:	18fb      	adds	r3, r7, r3
   1197c:	781b      	ldrb	r3, [r3, #0]
   1197e:	2b00      	cmp	r3, #0
   11980:	d10f      	bne.n	119a2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11982:	230f      	movs	r3, #15
   11984:	18fb      	adds	r3, r7, r3
   11986:	781b      	ldrb	r3, [r3, #0]
   11988:	009b      	lsls	r3, r3, #2
   1198a:	2210      	movs	r2, #16
   1198c:	4694      	mov	ip, r2
   1198e:	44bc      	add	ip, r7
   11990:	4463      	add	r3, ip
   11992:	3b08      	subs	r3, #8
   11994:	681a      	ldr	r2, [r3, #0]
   11996:	230e      	movs	r3, #14
   11998:	18fb      	adds	r3, r7, r3
   1199a:	781b      	ldrb	r3, [r3, #0]
   1199c:	01db      	lsls	r3, r3, #7
   1199e:	18d3      	adds	r3, r2, r3
   119a0:	e000      	b.n	119a4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   119a2:	2300      	movs	r3, #0
}
   119a4:	0018      	movs	r0, r3
   119a6:	46bd      	mov	sp, r7
   119a8:	b004      	add	sp, #16
   119aa:	bd80      	pop	{r7, pc}
   119ac:	41004400 	.word	0x41004400

000119b0 <system_interrupt_enable_global>:
{
   119b0:	b580      	push	{r7, lr}
   119b2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   119b4:	4b04      	ldr	r3, [pc, #16]	; (119c8 <system_interrupt_enable_global+0x18>)
   119b6:	2201      	movs	r2, #1
   119b8:	701a      	strb	r2, [r3, #0]
   119ba:	f3bf 8f5f 	dmb	sy
   119be:	b662      	cpsie	i
}
   119c0:	46c0      	nop			; (mov r8, r8)
   119c2:	46bd      	mov	sp, r7
   119c4:	bd80      	pop	{r7, pc}
   119c6:	46c0      	nop			; (mov r8, r8)
   119c8:	20000014 	.word	0x20000014

000119cc <port_get_group_from_gpio_pin>:
{
   119cc:	b580      	push	{r7, lr}
   119ce:	b082      	sub	sp, #8
   119d0:	af00      	add	r7, sp, #0
   119d2:	0002      	movs	r2, r0
   119d4:	1dfb      	adds	r3, r7, #7
   119d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   119d8:	1dfb      	adds	r3, r7, #7
   119da:	781b      	ldrb	r3, [r3, #0]
   119dc:	0018      	movs	r0, r3
   119de:	4b03      	ldr	r3, [pc, #12]	; (119ec <port_get_group_from_gpio_pin+0x20>)
   119e0:	4798      	blx	r3
   119e2:	0003      	movs	r3, r0
}
   119e4:	0018      	movs	r0, r3
   119e6:	46bd      	mov	sp, r7
   119e8:	b002      	add	sp, #8
   119ea:	bd80      	pop	{r7, pc}
   119ec:	00011951 	.word	0x00011951

000119f0 <port_pin_get_input_level>:
{
   119f0:	b580      	push	{r7, lr}
   119f2:	b084      	sub	sp, #16
   119f4:	af00      	add	r7, sp, #0
   119f6:	0002      	movs	r2, r0
   119f8:	1dfb      	adds	r3, r7, #7
   119fa:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   119fc:	1dfb      	adds	r3, r7, #7
   119fe:	781b      	ldrb	r3, [r3, #0]
   11a00:	0018      	movs	r0, r3
   11a02:	4b0b      	ldr	r3, [pc, #44]	; (11a30 <port_pin_get_input_level+0x40>)
   11a04:	4798      	blx	r3
   11a06:	0003      	movs	r3, r0
   11a08:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11a0a:	1dfb      	adds	r3, r7, #7
   11a0c:	781b      	ldrb	r3, [r3, #0]
   11a0e:	221f      	movs	r2, #31
   11a10:	4013      	ands	r3, r2
   11a12:	2201      	movs	r2, #1
   11a14:	409a      	lsls	r2, r3
   11a16:	0013      	movs	r3, r2
   11a18:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   11a1a:	68fb      	ldr	r3, [r7, #12]
   11a1c:	6a1b      	ldr	r3, [r3, #32]
   11a1e:	68ba      	ldr	r2, [r7, #8]
   11a20:	4013      	ands	r3, r2
   11a22:	1e5a      	subs	r2, r3, #1
   11a24:	4193      	sbcs	r3, r2
   11a26:	b2db      	uxtb	r3, r3
}
   11a28:	0018      	movs	r0, r3
   11a2a:	46bd      	mov	sp, r7
   11a2c:	b004      	add	sp, #16
   11a2e:	bd80      	pop	{r7, pc}
   11a30:	000119cd 	.word	0x000119cd

00011a34 <main>:

extern char mqtt_buffer[MAIN_MQTT_BUFFER_SIZE];


int main(void)
{
   11a34:	b590      	push	{r4, r7, lr}
   11a36:	b089      	sub	sp, #36	; 0x24
   11a38:	af00      	add	r7, sp, #0
	uint32_t MQTTCounter = 0;	
   11a3a:	2300      	movs	r3, #0
   11a3c:	61fb      	str	r3, [r7, #28]
	int wifi_result = WIFI_SUCCESS;	    
   11a3e:	2300      	movs	r3, #0
   11a40:	61bb      	str	r3, [r7, #24]
	
	mqttfirmware_download = 0;
   11a42:	4b34      	ldr	r3, [pc, #208]	; (11b14 <main+0xe0>)
   11a44:	2200      	movs	r2, #0
   11a46:	701a      	strb	r2, [r3, #0]

	system_init();
   11a48:	4b33      	ldr	r3, [pc, #204]	; (11b18 <main+0xe4>)
   11a4a:	4798      	blx	r3
	system_interrupt_enable_global();
   11a4c:	4b33      	ldr	r3, [pc, #204]	; (11b1c <main+0xe8>)
   11a4e:	4798      	blx	r3
	delay_init();
   11a50:	4b33      	ldr	r3, [pc, #204]	; (11b20 <main+0xec>)
   11a52:	4798      	blx	r3
	configure_usart();
   11a54:	4b33      	ldr	r3, [pc, #204]	; (11b24 <main+0xf0>)
   11a56:	4798      	blx	r3
	wifi_config new_wifi_configuration;
	get_default_wifi_config(&new_wifi_configuration);
   11a58:	003b      	movs	r3, r7
   11a5a:	0018      	movs	r0, r3
   11a5c:	4b32      	ldr	r3, [pc, #200]	; (11b28 <main+0xf4>)
   11a5e:	4798      	blx	r3
	configure_wifi_module(&new_wifi_configuration);
   11a60:	003b      	movs	r3, r7
   11a62:	0018      	movs	r0, r3
   11a64:	4b31      	ldr	r3, [pc, #196]	; (11b2c <main+0xf8>)
   11a66:	4798      	blx	r3
	configure_mqtt();
   11a68:	4b31      	ldr	r3, [pc, #196]	; (11b30 <main+0xfc>)
   11a6a:	4798      	blx	r3
	//wifi_result = wifi_init();
	//
	//if (WIFI_SUCCESS != wifi_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
	//
	printf("Board initialized.\r\n");
   11a6c:	4b31      	ldr	r3, [pc, #196]	; (11b34 <main+0x100>)
   11a6e:	0018      	movs	r0, r3
   11a70:	4b31      	ldr	r3, [pc, #196]	; (11b38 <main+0x104>)
   11a72:	4798      	blx	r3
		//sw_timer_task(&swt_module_inst);
	//}
	//
	//
	//
	configure_adc(MOISTURE_ANA_PIN); //configure moisture sensor analog
   11a74:	2000      	movs	r0, #0
   11a76:	4b31      	ldr	r3, [pc, #196]	; (11b3c <main+0x108>)
   11a78:	4798      	blx	r3
	configure_i2c_hdc(); //config i2c
   11a7a:	4b31      	ldr	r3, [pc, #196]	; (11b40 <main+0x10c>)
   11a7c:	4798      	blx	r3
	configure_i2c_tsl2561(ADDR_FLOAT);
   11a7e:	2039      	movs	r0, #57	; 0x39
   11a80:	4b30      	ldr	r3, [pc, #192]	; (11b44 <main+0x110>)
   11a82:	4798      	blx	r3
	uint16_t dev_id = get_hdc_device_id();
   11a84:	2316      	movs	r3, #22
   11a86:	18fc      	adds	r4, r7, r3
   11a88:	4b2f      	ldr	r3, [pc, #188]	; (11b48 <main+0x114>)
   11a8a:	4798      	blx	r3
   11a8c:	0003      	movs	r3, r0
   11a8e:	8023      	strh	r3, [r4, #0]
	printf("dev id: 0x%02x\r\n", dev_id);
   11a90:	2316      	movs	r3, #22
   11a92:	18fb      	adds	r3, r7, r3
   11a94:	881a      	ldrh	r2, [r3, #0]
   11a96:	4b2d      	ldr	r3, [pc, #180]	; (11b4c <main+0x118>)
   11a98:	0011      	movs	r1, r2
   11a9a:	0018      	movs	r0, r3
   11a9c:	4b2c      	ldr	r3, [pc, #176]	; (11b50 <main+0x11c>)
   11a9e:	4798      	blx	r3

	//configure_i2c_callbacks_hdc();
	//configure_i2c_callbacks_tsl();
	
	configure_port_pins_get(PIN_PA11); //TODO: decide if this is necessary
   11aa0:	200b      	movs	r0, #11
   11aa2:	4b2c      	ldr	r3, [pc, #176]	; (11b54 <main+0x120>)
   11aa4:	4798      	blx	r3

	printf("Running as MQTT User: %s\r\n", MQTT_USER);
   11aa6:	4a2c      	ldr	r2, [pc, #176]	; (11b58 <main+0x124>)
   11aa8:	4b2c      	ldr	r3, [pc, #176]	; (11b5c <main+0x128>)
   11aaa:	0011      	movs	r1, r2
   11aac:	0018      	movs	r0, r3
   11aae:	4b28      	ldr	r3, [pc, #160]	; (11b50 <main+0x11c>)
   11ab0:	4798      	blx	r3
	
	led1_on(); //show that board is connected	
   11ab2:	4b2b      	ldr	r3, [pc, #172]	; (11b60 <main+0x12c>)
   11ab4:	4798      	blx	r3

	while (1) {
	
	    /* Handle pending events from network controller. */
	    m2m_wifi_handle_events(NULL);
   11ab6:	2000      	movs	r0, #0
   11ab8:	4b2a      	ldr	r3, [pc, #168]	; (11b64 <main+0x130>)
   11aba:	4798      	blx	r3
	    /* Checks the timer timeout. */
	    sw_timer_task(&swt_module_inst);		
   11abc:	4b2a      	ldr	r3, [pc, #168]	; (11b68 <main+0x134>)
   11abe:	0018      	movs	r0, r3
   11ac0:	4b2a      	ldr	r3, [pc, #168]	; (11b6c <main+0x138>)
   11ac2:	4798      	blx	r3
		
		if ((mqttfirmware_download == 1 || port_pin_get_input_level(PIN_PA11) == false))
   11ac4:	4b13      	ldr	r3, [pc, #76]	; (11b14 <main+0xe0>)
   11ac6:	781b      	ldrb	r3, [r3, #0]
   11ac8:	2b01      	cmp	r3, #1
   11aca:	d009      	beq.n	11ae0 <main+0xac>
   11acc:	200b      	movs	r0, #11
   11ace:	4b28      	ldr	r3, [pc, #160]	; (11b70 <main+0x13c>)
   11ad0:	4798      	blx	r3
   11ad2:	0003      	movs	r3, r0
   11ad4:	001a      	movs	r2, r3
   11ad6:	2301      	movs	r3, #1
   11ad8:	4053      	eors	r3, r2
   11ada:	b2db      	uxtb	r3, r3
   11adc:	2b00      	cmp	r3, #0
   11ade:	d009      	beq.n	11af4 <main+0xc0>
		{
			if(check_for_update()) {
   11ae0:	4b24      	ldr	r3, [pc, #144]	; (11b74 <main+0x140>)
   11ae2:	4798      	blx	r3
   11ae4:	1e03      	subs	r3, r0, #0
   11ae6:	d001      	beq.n	11aec <main+0xb8>
				download_firmware();
   11ae8:	4b23      	ldr	r3, [pc, #140]	; (11b78 <main+0x144>)
   11aea:	4798      	blx	r3
			}
			
			mqttfirmware_download = 0;
   11aec:	4b09      	ldr	r3, [pc, #36]	; (11b14 <main+0xe0>)
   11aee:	2200      	movs	r2, #0
   11af0:	701a      	strb	r2, [r3, #0]
   11af2:	e00b      	b.n	11b0c <main+0xd8>
		}
		
		else if ((MQTTCounter >= COUNTER_MAX))
   11af4:	69fb      	ldr	r3, [r7, #28]
   11af6:	4a21      	ldr	r2, [pc, #132]	; (11b7c <main+0x148>)
   11af8:	4293      	cmp	r3, r2
   11afa:	d907      	bls.n	11b0c <main+0xd8>
		{
			MQTTCounter = 0; //reset sensor counter
   11afc:	2300      	movs	r3, #0
   11afe:	61fb      	str	r3, [r7, #28]
			printf("Sending sensor values to Cloud.\r\n");			
   11b00:	4b1f      	ldr	r3, [pc, #124]	; (11b80 <main+0x14c>)
   11b02:	0018      	movs	r0, r3
   11b04:	4b0c      	ldr	r3, [pc, #48]	; (11b38 <main+0x104>)
   11b06:	4798      	blx	r3
			publish_sensor_values();			
   11b08:	4b1e      	ldr	r3, [pc, #120]	; (11b84 <main+0x150>)
   11b0a:	4798      	blx	r3
		}	
				
		++MQTTCounter;
   11b0c:	69fb      	ldr	r3, [r7, #28]
   11b0e:	3301      	adds	r3, #1
   11b10:	61fb      	str	r3, [r7, #28]
	    m2m_wifi_handle_events(NULL);
   11b12:	e7d0      	b.n	11ab6 <main+0x82>
   11b14:	2000080c 	.word	0x2000080c
   11b18:	00011199 	.word	0x00011199
   11b1c:	000119b1 	.word	0x000119b1
   11b20:	0000d341 	.word	0x0000d341
   11b24:	000003a1 	.word	0x000003a1
   11b28:	00002121 	.word	0x00002121
   11b2c:	00002161 	.word	0x00002161
   11b30:	0000d045 	.word	0x0000d045
   11b34:	00019f18 	.word	0x00019f18
   11b38:	0001308d 	.word	0x0001308d
   11b3c:	000116e1 	.word	0x000116e1
   11b40:	00000581 	.word	0x00000581
   11b44:	00000acd 	.word	0x00000acd
   11b48:	00000855 	.word	0x00000855
   11b4c:	00019f2c 	.word	0x00019f2c
   11b50:	00012f71 	.word	0x00012f71
   11b54:	0001177d 	.word	0x0001177d
   11b58:	00019f40 	.word	0x00019f40
   11b5c:	00019f4c 	.word	0x00019f4c
   11b60:	000117c1 	.word	0x000117c1
   11b64:	00004e8d 	.word	0x00004e8d
   11b68:	20000328 	.word	0x20000328
   11b6c:	0000cc31 	.word	0x0000cc31
   11b70:	000119f1 	.word	0x000119f1
   11b74:	00002289 	.word	0x00002289
   11b78:	000022fd 	.word	0x000022fd
   11b7c:	002dc6bf 	.word	0x002dc6bf
   11b80:	00019f68 	.word	0x00019f68
   11b84:	0000d0e9 	.word	0x0000d0e9

00011b88 <_hwerr_to_stderr>:
   11b88:	1c03      	adds	r3, r0, #0
   11b8a:	300e      	adds	r0, #14
   11b8c:	b500      	push	{lr}
   11b8e:	280e      	cmp	r0, #14
   11b90:	d819      	bhi.n	11bc6 <_hwerr_to_stderr+0x3e>
   11b92:	f003 fc7d 	bl	15490 <__gnu_thumb1_case_uqi>
   11b96:	1416      	.short	0x1416
   11b98:	1b181012 	.word	0x1b181012
   11b9c:	180c0e18 	.word	0x180c0e18
   11ba0:	1d0a0e0e 	.word	0x1d0a0e0e
   11ba4:	08          	.byte	0x08
   11ba5:	00          	.byte	0x00
   11ba6:	2000      	movs	r0, #0
   11ba8:	e014      	b.n	11bd4 <_hwerr_to_stderr+0x4c>
   11baa:	2070      	movs	r0, #112	; 0x70
   11bac:	e011      	b.n	11bd2 <_hwerr_to_stderr+0x4a>
   11bae:	2016      	movs	r0, #22
   11bb0:	e00f      	b.n	11bd2 <_hwerr_to_stderr+0x4a>
   11bb2:	200c      	movs	r0, #12
   11bb4:	e00d      	b.n	11bd2 <_hwerr_to_stderr+0x4a>
   11bb6:	2079      	movs	r0, #121	; 0x79
   11bb8:	e00b      	b.n	11bd2 <_hwerr_to_stderr+0x4a>
   11bba:	2068      	movs	r0, #104	; 0x68
   11bbc:	e009      	b.n	11bd2 <_hwerr_to_stderr+0x4a>
   11bbe:	200b      	movs	r0, #11
   11bc0:	e007      	b.n	11bd2 <_hwerr_to_stderr+0x4a>
   11bc2:	2010      	movs	r0, #16
   11bc4:	e005      	b.n	11bd2 <_hwerr_to_stderr+0x4a>
   11bc6:	2000      	movs	r0, #0
   11bc8:	4283      	cmp	r3, r0
   11bca:	da03      	bge.n	11bd4 <_hwerr_to_stderr+0x4c>
   11bcc:	2005      	movs	r0, #5
   11bce:	e000      	b.n	11bd2 <_hwerr_to_stderr+0x4a>
   11bd0:	2002      	movs	r0, #2
   11bd2:	4240      	negs	r0, r0
   11bd4:	bd00      	pop	{pc}
	...

00011bd8 <_mqtt_send_wait>:
   11bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11bda:	1c04      	adds	r4, r0, #0
   11bdc:	3443      	adds	r4, #67	; 0x43
   11bde:	7823      	ldrb	r3, [r4, #0]
   11be0:	1c05      	adds	r5, r0, #0
   11be2:	07d8      	lsls	r0, r3, #31
   11be4:	d51c      	bpl.n	11c20 <_mqtt_send_wait+0x48>
   11be6:	2604      	movs	r6, #4
   11be8:	4333      	orrs	r3, r6
   11bea:	7023      	strb	r3, [r4, #0]
   11bec:	2002      	movs	r0, #2
   11bee:	5628      	ldrsb	r0, [r5, r0]
   11bf0:	b292      	uxth	r2, r2
   11bf2:	2300      	movs	r3, #0
   11bf4:	4f0c      	ldr	r7, [pc, #48]	; (11c28 <_mqtt_send_wait+0x50>)
   11bf6:	47b8      	blx	r7
   11bf8:	2800      	cmp	r0, #0
   11bfa:	da05      	bge.n	11c08 <_mqtt_send_wait+0x30>
   11bfc:	7823      	ldrb	r3, [r4, #0]
   11bfe:	43b3      	bics	r3, r6
   11c00:	7023      	strb	r3, [r4, #0]
   11c02:	4b0a      	ldr	r3, [pc, #40]	; (11c2c <_mqtt_send_wait+0x54>)
   11c04:	4798      	blx	r3
   11c06:	e00d      	b.n	11c24 <_mqtt_send_wait+0x4c>
   11c08:	7822      	ldrb	r2, [r4, #0]
   11c0a:	2314      	movs	r3, #20
   11c0c:	4013      	ands	r3, r2
   11c0e:	2000      	movs	r0, #0
   11c10:	2b04      	cmp	r3, #4
   11c12:	d107      	bne.n	11c24 <_mqtt_send_wait+0x4c>
   11c14:	4b06      	ldr	r3, [pc, #24]	; (11c30 <_mqtt_send_wait+0x58>)
   11c16:	4798      	blx	r3
   11c18:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   11c1a:	4b06      	ldr	r3, [pc, #24]	; (11c34 <_mqtt_send_wait+0x5c>)
   11c1c:	4798      	blx	r3
   11c1e:	e7f3      	b.n	11c08 <_mqtt_send_wait+0x30>
   11c20:	2001      	movs	r0, #1
   11c22:	4240      	negs	r0, r0
   11c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c26:	46c0      	nop			; (mov r8, r8)
   11c28:	00008241 	.word	0x00008241
   11c2c:	00011b89 	.word	0x00011b89
   11c30:	00004e8d 	.word	0x00004e8d
   11c34:	0000cc31 	.word	0x0000cc31

00011c38 <mqtt_get_config_defaults>:
   11c38:	4b07      	ldr	r3, [pc, #28]	; (11c58 <mqtt_get_config_defaults+0x20>)
   11c3a:	2240      	movs	r2, #64	; 0x40
   11c3c:	8003      	strh	r3, [r0, #0]
   11c3e:	2396      	movs	r3, #150	; 0x96
   11c40:	009b      	lsls	r3, r3, #2
   11c42:	8103      	strh	r3, [r0, #8]
   11c44:	6102      	str	r2, [r0, #16]
   11c46:	2300      	movs	r3, #0
   11c48:	2220      	movs	r2, #32
   11c4a:	7083      	strb	r3, [r0, #2]
   11c4c:	6043      	str	r3, [r0, #4]
   11c4e:	60c3      	str	r3, [r0, #12]
   11c50:	6142      	str	r2, [r0, #20]
   11c52:	7603      	strb	r3, [r0, #24]
   11c54:	4770      	bx	lr
   11c56:	46c0      	nop			; (mov r8, r8)
   11c58:	0000075b 	.word	0x0000075b

00011c5c <mqtt_init>:
   11c5c:	b538      	push	{r3, r4, r5, lr}
   11c5e:	1c04      	adds	r4, r0, #0
   11c60:	1c0d      	adds	r5, r1, #0
   11c62:	2800      	cmp	r0, #0
   11c64:	d030      	beq.n	11cc8 <mqtt_init+0x6c>
   11c66:	2900      	cmp	r1, #0
   11c68:	d02e      	beq.n	11cc8 <mqtt_init+0x6c>
   11c6a:	690b      	ldr	r3, [r1, #16]
   11c6c:	2b00      	cmp	r3, #0
   11c6e:	d02b      	beq.n	11cc8 <mqtt_init+0x6c>
   11c70:	684b      	ldr	r3, [r1, #4]
   11c72:	2b00      	cmp	r3, #0
   11c74:	d028      	beq.n	11cc8 <mqtt_init+0x6c>
   11c76:	2100      	movs	r1, #0
   11c78:	2274      	movs	r2, #116	; 0x74
   11c7a:	4b16      	ldr	r3, [pc, #88]	; (11cd4 <mqtt_init+0x78>)
   11c7c:	4798      	blx	r3
   11c7e:	1c20      	adds	r0, r4, #0
   11c80:	4b15      	ldr	r3, [pc, #84]	; (11cd8 <mqtt_init+0x7c>)
   11c82:	3058      	adds	r0, #88	; 0x58
   11c84:	1c29      	adds	r1, r5, #0
   11c86:	221c      	movs	r2, #28
   11c88:	4798      	blx	r3
   11c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11c8c:	2b00      	cmp	r3, #0
   11c8e:	d10b      	bne.n	11ca8 <mqtt_init+0x4c>
   11c90:	6928      	ldr	r0, [r5, #16]
   11c92:	4b12      	ldr	r3, [pc, #72]	; (11cdc <mqtt_init+0x80>)
   11c94:	4798      	blx	r3
   11c96:	6660      	str	r0, [r4, #100]	; 0x64
   11c98:	2800      	cmp	r0, #0
   11c9a:	d017      	beq.n	11ccc <mqtt_init+0x70>
   11c9c:	1c23      	adds	r3, r4, #0
   11c9e:	3343      	adds	r3, #67	; 0x43
   11ca0:	781a      	ldrb	r2, [r3, #0]
   11ca2:	2120      	movs	r1, #32
   11ca4:	430a      	orrs	r2, r1
   11ca6:	701a      	strb	r2, [r3, #0]
   11ca8:	892a      	ldrh	r2, [r5, #8]
   11caa:	23fa      	movs	r3, #250	; 0xfa
   11cac:	005b      	lsls	r3, r3, #1
   11cae:	4353      	muls	r3, r2
   11cb0:	6868      	ldr	r0, [r5, #4]
   11cb2:	490b      	ldr	r1, [pc, #44]	; (11ce0 <mqtt_init+0x84>)
   11cb4:	1c22      	adds	r2, r4, #0
   11cb6:	4d0b      	ldr	r5, [pc, #44]	; (11ce4 <mqtt_init+0x88>)
   11cb8:	47a8      	blx	r5
   11cba:	1c03      	adds	r3, r0, #0
   11cbc:	6520      	str	r0, [r4, #80]	; 0x50
   11cbe:	2000      	movs	r0, #0
   11cc0:	4283      	cmp	r3, r0
   11cc2:	da05      	bge.n	11cd0 <mqtt_init+0x74>
   11cc4:	201c      	movs	r0, #28
   11cc6:	e002      	b.n	11cce <mqtt_init+0x72>
   11cc8:	2016      	movs	r0, #22
   11cca:	e000      	b.n	11cce <mqtt_init+0x72>
   11ccc:	200c      	movs	r0, #12
   11cce:	4240      	negs	r0, r0
   11cd0:	bd38      	pop	{r3, r4, r5, pc}
   11cd2:	46c0      	nop			; (mov r8, r8)
   11cd4:	0001252f 	.word	0x0001252f
   11cd8:	000124f9 	.word	0x000124f9
   11cdc:	000124ad 	.word	0x000124ad
   11ce0:	00012411 	.word	0x00012411
   11ce4:	0000cb25 	.word	0x0000cb25

00011ce8 <mqtt_register_callback>:
   11ce8:	2800      	cmp	r0, #0
   11cea:	d002      	beq.n	11cf2 <mqtt_register_callback+0xa>
   11cec:	6541      	str	r1, [r0, #84]	; 0x54
   11cee:	2000      	movs	r0, #0
   11cf0:	e001      	b.n	11cf6 <mqtt_register_callback+0xe>
   11cf2:	2016      	movs	r0, #22
   11cf4:	4240      	negs	r0, r0
   11cf6:	4770      	bx	lr

00011cf8 <mqtt_connect>:
   11cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cfa:	1c04      	adds	r4, r0, #0
   11cfc:	b089      	sub	sp, #36	; 0x24
   11cfe:	1c0d      	adds	r5, r1, #0
   11d00:	2800      	cmp	r0, #0
   11d02:	d051      	beq.n	11da8 <mqtt_connect+0xb0>
   11d04:	2900      	cmp	r1, #0
   11d06:	d04f      	beq.n	11da8 <mqtt_connect+0xb0>
   11d08:	1c08      	adds	r0, r1, #0
   11d0a:	4b39      	ldr	r3, [pc, #228]	; (11df0 <mqtt_connect+0xf8>)
   11d0c:	4798      	blx	r3
   11d0e:	2840      	cmp	r0, #64	; 0x40
   11d10:	d84c      	bhi.n	11dac <mqtt_connect+0xb4>
   11d12:	1c21      	adds	r1, r4, #0
   11d14:	3143      	adds	r1, #67	; 0x43
   11d16:	780b      	ldrb	r3, [r1, #0]
   11d18:	9101      	str	r1, [sp, #4]
   11d1a:	07db      	lsls	r3, r3, #31
   11d1c:	0fd9      	lsrs	r1, r3, #31
   11d1e:	466a      	mov	r2, sp
   11d20:	b2ce      	uxtb	r6, r1
   11d22:	1ce0      	adds	r0, r4, #3
   11d24:	7211      	strb	r1, [r2, #8]
   11d26:	2e00      	cmp	r6, #0
   11d28:	d142      	bne.n	11db0 <mqtt_connect+0xb8>
   11d2a:	2701      	movs	r7, #1
   11d2c:	1c29      	adds	r1, r5, #0
   11d2e:	4b31      	ldr	r3, [pc, #196]	; (11df4 <mqtt_connect+0xfc>)
   11d30:	8027      	strh	r7, [r4, #0]
   11d32:	4798      	blx	r3
   11d34:	9a01      	ldr	r2, [sp, #4]
   11d36:	2002      	movs	r0, #2
   11d38:	7813      	ldrb	r3, [r2, #0]
   11d3a:	9901      	ldr	r1, [sp, #4]
   11d3c:	43bb      	bics	r3, r7
   11d3e:	4383      	bics	r3, r0
   11d40:	22e3      	movs	r2, #227	; 0xe3
   11d42:	4013      	ands	r3, r2
   11d44:	466a      	mov	r2, sp
   11d46:	700b      	strb	r3, [r1, #0]
   11d48:	7a12      	ldrb	r2, [r2, #8]
   11d4a:	1c23      	adds	r3, r4, #0
   11d4c:	3348      	adds	r3, #72	; 0x48
   11d4e:	6466      	str	r6, [r4, #68]	; 0x44
   11d50:	701a      	strb	r2, [r3, #0]
   11d52:	7c9a      	ldrb	r2, [r3, #18]
   11d54:	805e      	strh	r6, [r3, #2]
   11d56:	1e53      	subs	r3, r2, #1
   11d58:	419a      	sbcs	r2, r3
   11d5a:	b2d2      	uxtb	r2, r2
   11d5c:	1c39      	adds	r1, r7, #0
   11d5e:	4b26      	ldr	r3, [pc, #152]	; (11df8 <mqtt_connect+0x100>)
   11d60:	4798      	blx	r3
   11d62:	70a0      	strb	r0, [r4, #2]
   11d64:	2800      	cmp	r0, #0
   11d66:	db25      	blt.n	11db4 <mqtt_connect+0xbc>
   11d68:	4b24      	ldr	r3, [pc, #144]	; (11dfc <mqtt_connect+0x104>)
   11d6a:	0080      	lsls	r0, r0, #2
   11d6c:	50c4      	str	r4, [r0, r3]
   11d6e:	1c2b      	adds	r3, r5, #0
   11d70:	781f      	ldrb	r7, [r3, #0]
   11d72:	2f00      	cmp	r7, #0
   11d74:	d026      	beq.n	11dc4 <mqtt_connect+0xcc>
   11d76:	2220      	movs	r2, #32
   11d78:	1c39      	adds	r1, r7, #0
   11d7a:	4391      	bics	r1, r2
   11d7c:	1c0a      	adds	r2, r1, #0
   11d7e:	3a41      	subs	r2, #65	; 0x41
   11d80:	b2d2      	uxtb	r2, r2
   11d82:	3301      	adds	r3, #1
   11d84:	2a05      	cmp	r2, #5
   11d86:	d90d      	bls.n	11da4 <mqtt_connect+0xac>
   11d88:	2f3a      	cmp	r7, #58	; 0x3a
   11d8a:	d00b      	beq.n	11da4 <mqtt_connect+0xac>
   11d8c:	2f2f      	cmp	r7, #47	; 0x2f
   11d8e:	d009      	beq.n	11da4 <mqtt_connect+0xac>
   11d90:	2f2e      	cmp	r7, #46	; 0x2e
   11d92:	d102      	bne.n	11d9a <mqtt_connect+0xa2>
   11d94:	2e00      	cmp	r6, #0
   11d96:	d0eb      	beq.n	11d70 <mqtt_connect+0x78>
   11d98:	e00f      	b.n	11dba <mqtt_connect+0xc2>
   11d9a:	2230      	movs	r2, #48	; 0x30
   11d9c:	4017      	ands	r7, r2
   11d9e:	4297      	cmp	r7, r2
   11da0:	d0e6      	beq.n	11d70 <mqtt_connect+0x78>
   11da2:	e00a      	b.n	11dba <mqtt_connect+0xc2>
   11da4:	2601      	movs	r6, #1
   11da6:	e7e3      	b.n	11d70 <mqtt_connect+0x78>
   11da8:	2016      	movs	r0, #22
   11daa:	e004      	b.n	11db6 <mqtt_connect+0xbe>
   11dac:	205b      	movs	r0, #91	; 0x5b
   11dae:	e002      	b.n	11db6 <mqtt_connect+0xbe>
   11db0:	2078      	movs	r0, #120	; 0x78
   11db2:	e000      	b.n	11db6 <mqtt_connect+0xbe>
   11db4:	201c      	movs	r0, #28
   11db6:	4240      	negs	r0, r0
   11db8:	e017      	b.n	11dea <mqtt_connect+0xf2>
   11dba:	1c28      	adds	r0, r5, #0
   11dbc:	4b10      	ldr	r3, [pc, #64]	; (11e00 <mqtt_connect+0x108>)
   11dbe:	4798      	blx	r3
   11dc0:	2000      	movs	r0, #0
   11dc2:	e012      	b.n	11dea <mqtt_connect+0xf2>
   11dc4:	466a      	mov	r2, sp
   11dc6:	2302      	movs	r3, #2
   11dc8:	8213      	strh	r3, [r2, #16]
   11dca:	1c23      	adds	r3, r4, #0
   11dcc:	3358      	adds	r3, #88	; 0x58
   11dce:	881b      	ldrh	r3, [r3, #0]
   11dd0:	1c28      	adds	r0, r5, #0
   11dd2:	ba5b      	rev16	r3, r3
   11dd4:	8253      	strh	r3, [r2, #18]
   11dd6:	4b0b      	ldr	r3, [pc, #44]	; (11e04 <mqtt_connect+0x10c>)
   11dd8:	4798      	blx	r3
   11dda:	9005      	str	r0, [sp, #20]
   11ddc:	2002      	movs	r0, #2
   11dde:	5620      	ldrsb	r0, [r4, r0]
   11de0:	a904      	add	r1, sp, #16
   11de2:	2210      	movs	r2, #16
   11de4:	4b08      	ldr	r3, [pc, #32]	; (11e08 <mqtt_connect+0x110>)
   11de6:	4798      	blx	r3
   11de8:	1c38      	adds	r0, r7, #0
   11dea:	b009      	add	sp, #36	; 0x24
   11dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11dee:	46c0      	nop			; (mov r8, r8)
   11df0:	000132d3 	.word	0x000132d3
   11df4:	00013289 	.word	0x00013289
   11df8:	00007f1d 	.word	0x00007f1d
   11dfc:	200002a4 	.word	0x200002a4
   11e00:	00008769 	.word	0x00008769
   11e04:	00008661 	.word	0x00008661
   11e08:	0000812d 	.word	0x0000812d

00011e0c <mqtt_connect_broker>:
   11e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e0e:	b095      	sub	sp, #84	; 0x54
   11e10:	af02      	add	r7, sp, #8
   11e12:	617b      	str	r3, [r7, #20]
   11e14:	1c3b      	adds	r3, r7, #0
   11e16:	3370      	adds	r3, #112	; 0x70
   11e18:	781b      	ldrb	r3, [r3, #0]
   11e1a:	1c05      	adds	r5, r0, #0
   11e1c:	60fb      	str	r3, [r7, #12]
   11e1e:	1c3b      	adds	r3, r7, #0
   11e20:	3374      	adds	r3, #116	; 0x74
   11e22:	781b      	ldrb	r3, [r3, #0]
   11e24:	6139      	str	r1, [r7, #16]
   11e26:	61fa      	str	r2, [r7, #28]
   11e28:	60bb      	str	r3, [r7, #8]
   11e2a:	2800      	cmp	r0, #0
   11e2c:	d101      	bne.n	11e32 <mqtt_connect_broker+0x26>
   11e2e:	2016      	movs	r0, #22
   11e30:	e129      	b.n	12086 <mqtt_connect_broker+0x27a>
   11e32:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   11e34:	4668      	mov	r0, sp
   11e36:	3307      	adds	r3, #7
   11e38:	08db      	lsrs	r3, r3, #3
   11e3a:	00db      	lsls	r3, r3, #3
   11e3c:	1ac0      	subs	r0, r0, r3
   11e3e:	4685      	mov	sp, r0
   11e40:	ac02      	add	r4, sp, #8
   11e42:	607c      	str	r4, [r7, #4]
   11e44:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   11e46:	2c00      	cmp	r4, #0
   11e48:	d0f1      	beq.n	11e2e <mqtt_connect_broker+0x22>
   11e4a:	1c2b      	adds	r3, r5, #0
   11e4c:	3343      	adds	r3, #67	; 0x43
   11e4e:	781b      	ldrb	r3, [r3, #0]
   11e50:	07d8      	lsls	r0, r3, #31
   11e52:	d400      	bmi.n	11e56 <mqtt_connect_broker+0x4a>
   11e54:	e112      	b.n	1207c <mqtt_connect_broker+0x270>
   11e56:	079a      	lsls	r2, r3, #30
   11e58:	d500      	bpl.n	11e5c <mqtt_connect_broker+0x50>
   11e5a:	e111      	b.n	12080 <mqtt_connect_broker+0x274>
   11e5c:	071c      	lsls	r4, r3, #28
   11e5e:	d40b      	bmi.n	11e78 <mqtt_connect_broker+0x6c>
   11e60:	4e8b      	ldr	r6, [pc, #556]	; (12090 <mqtt_connect_broker+0x284>)
   11e62:	6e38      	ldr	r0, [r7, #96]	; 0x60
   11e64:	47b0      	blx	r6
   11e66:	1c03      	adds	r3, r0, #0
   11e68:	61b8      	str	r0, [r7, #24]
   11e6a:	69f8      	ldr	r0, [r7, #28]
   11e6c:	330e      	adds	r3, #14
   11e6e:	1c34      	adds	r4, r6, #0
   11e70:	2800      	cmp	r0, #0
   11e72:	d113      	bne.n	11e9c <mqtt_connect_broker+0x90>
   11e74:	1c1e      	adds	r6, r3, #0
   11e76:	e01d      	b.n	11eb4 <mqtt_connect_broker+0xa8>
   11e78:	1c2b      	adds	r3, r5, #0
   11e7a:	3370      	adds	r3, #112	; 0x70
   11e7c:	781b      	ldrb	r3, [r3, #0]
   11e7e:	2b00      	cmp	r3, #0
   11e80:	d000      	beq.n	11e84 <mqtt_connect_broker+0x78>
   11e82:	e0ff      	b.n	12084 <mqtt_connect_broker+0x278>
   11e84:	1c2b      	adds	r3, r5, #0
   11e86:	3343      	adds	r3, #67	; 0x43
   11e88:	781b      	ldrb	r3, [r3, #0]
   11e8a:	071a      	lsls	r2, r3, #28
   11e8c:	d5e8      	bpl.n	11e60 <mqtt_connect_broker+0x54>
   11e8e:	4b81      	ldr	r3, [pc, #516]	; (12094 <mqtt_connect_broker+0x288>)
   11e90:	2000      	movs	r0, #0
   11e92:	4798      	blx	r3
   11e94:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   11e96:	4b80      	ldr	r3, [pc, #512]	; (12098 <mqtt_connect_broker+0x28c>)
   11e98:	4798      	blx	r3
   11e9a:	e7f3      	b.n	11e84 <mqtt_connect_broker+0x78>
   11e9c:	69f8      	ldr	r0, [r7, #28]
   11e9e:	47b0      	blx	r6
   11ea0:	69be      	ldr	r6, [r7, #24]
   11ea2:	697b      	ldr	r3, [r7, #20]
   11ea4:	3610      	adds	r6, #16
   11ea6:	1836      	adds	r6, r6, r0
   11ea8:	2b00      	cmp	r3, #0
   11eaa:	d003      	beq.n	11eb4 <mqtt_connect_broker+0xa8>
   11eac:	1c18      	adds	r0, r3, #0
   11eae:	47a0      	blx	r4
   11eb0:	3602      	adds	r6, #2
   11eb2:	1836      	adds	r6, r6, r0
   11eb4:	6e78      	ldr	r0, [r7, #100]	; 0x64
   11eb6:	2800      	cmp	r0, #0
   11eb8:	d007      	beq.n	11eca <mqtt_connect_broker+0xbe>
   11eba:	47a0      	blx	r4
   11ebc:	3602      	adds	r6, #2
   11ebe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   11ec0:	1830      	adds	r0, r6, r0
   11ec2:	1906      	adds	r6, r0, r4
   11ec4:	2c00      	cmp	r4, #0
   11ec6:	d100      	bne.n	11eca <mqtt_connect_broker+0xbe>
   11ec8:	1c06      	adds	r6, r0, #0
   11eca:	69fc      	ldr	r4, [r7, #28]
   11ecc:	2c00      	cmp	r4, #0
   11ece:	d006      	beq.n	11ede <mqtt_connect_broker+0xd2>
   11ed0:	24c0      	movs	r4, #192	; 0xc0
   11ed2:	61bc      	str	r4, [r7, #24]
   11ed4:	697c      	ldr	r4, [r7, #20]
   11ed6:	2c00      	cmp	r4, #0
   11ed8:	d103      	bne.n	11ee2 <mqtt_connect_broker+0xd6>
   11eda:	2480      	movs	r4, #128	; 0x80
   11edc:	e000      	b.n	11ee0 <mqtt_connect_broker+0xd4>
   11ede:	69fc      	ldr	r4, [r7, #28]
   11ee0:	61bc      	str	r4, [r7, #24]
   11ee2:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   11ee4:	2c00      	cmp	r4, #0
   11ee6:	d00f      	beq.n	11f08 <mqtt_connect_broker+0xfc>
   11ee8:	68bc      	ldr	r4, [r7, #8]
   11eea:	2c00      	cmp	r4, #0
   11eec:	d003      	beq.n	11ef6 <mqtt_connect_broker+0xea>
   11eee:	69bc      	ldr	r4, [r7, #24]
   11ef0:	2320      	movs	r3, #32
   11ef2:	431c      	orrs	r4, r3
   11ef4:	61bc      	str	r4, [r7, #24]
   11ef6:	68fc      	ldr	r4, [r7, #12]
   11ef8:	2303      	movs	r3, #3
   11efa:	4023      	ands	r3, r4
   11efc:	00db      	lsls	r3, r3, #3
   11efe:	69bc      	ldr	r4, [r7, #24]
   11f00:	2204      	movs	r2, #4
   11f02:	4313      	orrs	r3, r2
   11f04:	431c      	orrs	r4, r3
   11f06:	61bc      	str	r4, [r7, #24]
   11f08:	693c      	ldr	r4, [r7, #16]
   11f0a:	2c00      	cmp	r4, #0
   11f0c:	d003      	beq.n	11f16 <mqtt_connect_broker+0x10a>
   11f0e:	69bc      	ldr	r4, [r7, #24]
   11f10:	2302      	movs	r3, #2
   11f12:	431c      	orrs	r4, r3
   11f14:	61bc      	str	r4, [r7, #24]
   11f16:	1c2b      	adds	r3, r5, #0
   11f18:	3343      	adds	r3, #67	; 0x43
   11f1a:	781a      	ldrb	r2, [r3, #0]
   11f1c:	2108      	movs	r1, #8
   11f1e:	430a      	orrs	r2, r1
   11f20:	701a      	strb	r2, [r3, #0]
   11f22:	1c38      	adds	r0, r7, #0
   11f24:	9500      	str	r5, [sp, #0]
   11f26:	3020      	adds	r0, #32
   11f28:	6879      	ldr	r1, [r7, #4]
   11f2a:	4b5c      	ldr	r3, [pc, #368]	; (1209c <mqtt_connect_broker+0x290>)
   11f2c:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   11f2e:	4c5c      	ldr	r4, [pc, #368]	; (120a0 <mqtt_connect_broker+0x294>)
   11f30:	47a0      	blx	r4
   11f32:	1c38      	adds	r0, r7, #0
   11f34:	3020      	adds	r0, #32
   11f36:	2110      	movs	r1, #16
   11f38:	4b5a      	ldr	r3, [pc, #360]	; (120a4 <mqtt_connect_broker+0x298>)
   11f3a:	4798      	blx	r3
   11f3c:	2e80      	cmp	r6, #128	; 0x80
   11f3e:	dd09      	ble.n	11f54 <mqtt_connect_broker+0x148>
   11f40:	2180      	movs	r1, #128	; 0x80
   11f42:	4249      	negs	r1, r1
   11f44:	4331      	orrs	r1, r6
   11f46:	1c38      	adds	r0, r7, #0
   11f48:	b249      	sxtb	r1, r1
   11f4a:	3020      	adds	r0, #32
   11f4c:	4c55      	ldr	r4, [pc, #340]	; (120a4 <mqtt_connect_broker+0x298>)
   11f4e:	47a0      	blx	r4
   11f50:	11f6      	asrs	r6, r6, #7
   11f52:	e7f3      	b.n	11f3c <mqtt_connect_broker+0x130>
   11f54:	4b54      	ldr	r3, [pc, #336]	; (120a8 <mqtt_connect_broker+0x29c>)
   11f56:	401e      	ands	r6, r3
   11f58:	d504      	bpl.n	11f64 <mqtt_connect_broker+0x158>
   11f5a:	2380      	movs	r3, #128	; 0x80
   11f5c:	3e01      	subs	r6, #1
   11f5e:	425b      	negs	r3, r3
   11f60:	431e      	orrs	r6, r3
   11f62:	3601      	adds	r6, #1
   11f64:	1c38      	adds	r0, r7, #0
   11f66:	b271      	sxtb	r1, r6
   11f68:	3020      	adds	r0, #32
   11f6a:	4c4e      	ldr	r4, [pc, #312]	; (120a4 <mqtt_connect_broker+0x298>)
   11f6c:	47a0      	blx	r4
   11f6e:	1c38      	adds	r0, r7, #0
   11f70:	4c4e      	ldr	r4, [pc, #312]	; (120ac <mqtt_connect_broker+0x2a0>)
   11f72:	3020      	adds	r0, #32
   11f74:	2106      	movs	r1, #6
   11f76:	47a0      	blx	r4
   11f78:	1c38      	adds	r0, r7, #0
   11f7a:	4b4d      	ldr	r3, [pc, #308]	; (120b0 <mqtt_connect_broker+0x2a4>)
   11f7c:	3020      	adds	r0, #32
   11f7e:	494d      	ldr	r1, [pc, #308]	; (120b4 <mqtt_connect_broker+0x2a8>)
   11f80:	2206      	movs	r2, #6
   11f82:	4798      	blx	r3
   11f84:	1c38      	adds	r0, r7, #0
   11f86:	3020      	adds	r0, #32
   11f88:	2103      	movs	r1, #3
   11f8a:	4a46      	ldr	r2, [pc, #280]	; (120a4 <mqtt_connect_broker+0x298>)
   11f8c:	4790      	blx	r2
   11f8e:	69bb      	ldr	r3, [r7, #24]
   11f90:	1c38      	adds	r0, r7, #0
   11f92:	4a44      	ldr	r2, [pc, #272]	; (120a4 <mqtt_connect_broker+0x298>)
   11f94:	b259      	sxtb	r1, r3
   11f96:	3020      	adds	r0, #32
   11f98:	4790      	blx	r2
   11f9a:	1c2b      	adds	r3, r5, #0
   11f9c:	3360      	adds	r3, #96	; 0x60
   11f9e:	2000      	movs	r0, #0
   11fa0:	5e19      	ldrsh	r1, [r3, r0]
   11fa2:	1c38      	adds	r0, r7, #0
   11fa4:	3020      	adds	r0, #32
   11fa6:	47a0      	blx	r4
   11fa8:	4e39      	ldr	r6, [pc, #228]	; (12090 <mqtt_connect_broker+0x284>)
   11faa:	6e38      	ldr	r0, [r7, #96]	; 0x60
   11fac:	47b0      	blx	r6
   11fae:	b201      	sxth	r1, r0
   11fb0:	1c38      	adds	r0, r7, #0
   11fb2:	3020      	adds	r0, #32
   11fb4:	47a0      	blx	r4
   11fb6:	6e38      	ldr	r0, [r7, #96]	; 0x60
   11fb8:	47b0      	blx	r6
   11fba:	1c02      	adds	r2, r0, #0
   11fbc:	1c38      	adds	r0, r7, #0
   11fbe:	3020      	adds	r0, #32
   11fc0:	6e39      	ldr	r1, [r7, #96]	; 0x60
   11fc2:	4b3b      	ldr	r3, [pc, #236]	; (120b0 <mqtt_connect_broker+0x2a4>)
   11fc4:	4798      	blx	r3
   11fc6:	6e78      	ldr	r0, [r7, #100]	; 0x64
   11fc8:	2800      	cmp	r0, #0
   11fca:	d015      	beq.n	11ff8 <mqtt_connect_broker+0x1ec>
   11fcc:	47b0      	blx	r6
   11fce:	b201      	sxth	r1, r0
   11fd0:	1c38      	adds	r0, r7, #0
   11fd2:	3020      	adds	r0, #32
   11fd4:	47a0      	blx	r4
   11fd6:	6e78      	ldr	r0, [r7, #100]	; 0x64
   11fd8:	47b0      	blx	r6
   11fda:	1c02      	adds	r2, r0, #0
   11fdc:	1c38      	adds	r0, r7, #0
   11fde:	4c34      	ldr	r4, [pc, #208]	; (120b0 <mqtt_connect_broker+0x2a4>)
   11fe0:	3020      	adds	r0, #32
   11fe2:	6e79      	ldr	r1, [r7, #100]	; 0x64
   11fe4:	47a0      	blx	r4
   11fe6:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   11fe8:	2c00      	cmp	r4, #0
   11fea:	d005      	beq.n	11ff8 <mqtt_connect_broker+0x1ec>
   11fec:	1c38      	adds	r0, r7, #0
   11fee:	1c21      	adds	r1, r4, #0
   11ff0:	3020      	adds	r0, #32
   11ff2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   11ff4:	4c2e      	ldr	r4, [pc, #184]	; (120b0 <mqtt_connect_broker+0x2a4>)
   11ff6:	47a0      	blx	r4
   11ff8:	69fc      	ldr	r4, [r7, #28]
   11ffa:	2c00      	cmp	r4, #0
   11ffc:	d01f      	beq.n	1203e <mqtt_connect_broker+0x232>
   11ffe:	4e24      	ldr	r6, [pc, #144]	; (12090 <mqtt_connect_broker+0x284>)
   12000:	1c20      	adds	r0, r4, #0
   12002:	47b0      	blx	r6
   12004:	b201      	sxth	r1, r0
   12006:	1c38      	adds	r0, r7, #0
   12008:	3020      	adds	r0, #32
   1200a:	4c28      	ldr	r4, [pc, #160]	; (120ac <mqtt_connect_broker+0x2a0>)
   1200c:	47a0      	blx	r4
   1200e:	69f8      	ldr	r0, [r7, #28]
   12010:	47b0      	blx	r6
   12012:	1c02      	adds	r2, r0, #0
   12014:	1c38      	adds	r0, r7, #0
   12016:	3020      	adds	r0, #32
   12018:	69f9      	ldr	r1, [r7, #28]
   1201a:	4c25      	ldr	r4, [pc, #148]	; (120b0 <mqtt_connect_broker+0x2a4>)
   1201c:	47a0      	blx	r4
   1201e:	6978      	ldr	r0, [r7, #20]
   12020:	2800      	cmp	r0, #0
   12022:	d00c      	beq.n	1203e <mqtt_connect_broker+0x232>
   12024:	47b0      	blx	r6
   12026:	b201      	sxth	r1, r0
   12028:	1c38      	adds	r0, r7, #0
   1202a:	4a20      	ldr	r2, [pc, #128]	; (120ac <mqtt_connect_broker+0x2a0>)
   1202c:	3020      	adds	r0, #32
   1202e:	4790      	blx	r2
   12030:	6978      	ldr	r0, [r7, #20]
   12032:	47b0      	blx	r6
   12034:	1c02      	adds	r2, r0, #0
   12036:	1c38      	adds	r0, r7, #0
   12038:	3020      	adds	r0, #32
   1203a:	6979      	ldr	r1, [r7, #20]
   1203c:	47a0      	blx	r4
   1203e:	1c38      	adds	r0, r7, #0
   12040:	1c2c      	adds	r4, r5, #0
   12042:	3020      	adds	r0, #32
   12044:	4b1c      	ldr	r3, [pc, #112]	; (120b8 <mqtt_connect_broker+0x2ac>)
   12046:	3443      	adds	r4, #67	; 0x43
   12048:	4798      	blx	r3
   1204a:	7821      	ldrb	r1, [r4, #0]
   1204c:	0789      	lsls	r1, r1, #30
   1204e:	0fc9      	lsrs	r1, r1, #31
   12050:	2901      	cmp	r1, #1
   12052:	d10b      	bne.n	1206c <mqtt_connect_broker+0x260>
   12054:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   12056:	2a00      	cmp	r2, #0
   12058:	d108      	bne.n	1206c <mqtt_connect_broker+0x260>
   1205a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1205c:	2b00      	cmp	r3, #0
   1205e:	d005      	beq.n	1206c <mqtt_connect_broker+0x260>
   12060:	2034      	movs	r0, #52	; 0x34
   12062:	55c2      	strb	r2, [r0, r7]
   12064:	1c3a      	adds	r2, r7, #0
   12066:	1c28      	adds	r0, r5, #0
   12068:	3234      	adds	r2, #52	; 0x34
   1206a:	4798      	blx	r3
   1206c:	7823      	ldrb	r3, [r4, #0]
   1206e:	2202      	movs	r2, #2
   12070:	4313      	orrs	r3, r2
   12072:	2208      	movs	r2, #8
   12074:	4393      	bics	r3, r2
   12076:	7023      	strb	r3, [r4, #0]
   12078:	2000      	movs	r0, #0
   1207a:	e005      	b.n	12088 <mqtt_connect_broker+0x27c>
   1207c:	2080      	movs	r0, #128	; 0x80
   1207e:	e002      	b.n	12086 <mqtt_connect_broker+0x27a>
   12080:	2078      	movs	r0, #120	; 0x78
   12082:	e000      	b.n	12086 <mqtt_connect_broker+0x27a>
   12084:	200b      	movs	r0, #11
   12086:	4240      	negs	r0, r0
   12088:	46bd      	mov	sp, r7
   1208a:	b013      	add	sp, #76	; 0x4c
   1208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1208e:	46c0      	nop			; (mov r8, r8)
   12090:	000132d3 	.word	0x000132d3
   12094:	00004e8d 	.word	0x00004e8d
   12098:	0000cc31 	.word	0x0000cc31
   1209c:	00011bd9 	.word	0x00011bd9
   120a0:	0000c84d 	.word	0x0000c84d
   120a4:	0000c881 	.word	0x0000c881
   120a8:	8000007f 	.word	0x8000007f
   120ac:	0000c8cd 	.word	0x0000c8cd
   120b0:	0000c90d 	.word	0x0000c90d
   120b4:	00019f89 	.word	0x00019f89
   120b8:	0000c949 	.word	0x0000c949

000120bc <mqtt_publish>:
   120bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   120be:	b093      	sub	sp, #76	; 0x4c
   120c0:	af02      	add	r7, sp, #8
   120c2:	60fb      	str	r3, [r7, #12]
   120c4:	1c3b      	adds	r3, r7, #0
   120c6:	3358      	adds	r3, #88	; 0x58
   120c8:	781b      	ldrb	r3, [r3, #0]
   120ca:	1c04      	adds	r4, r0, #0
   120cc:	613b      	str	r3, [r7, #16]
   120ce:	1c3b      	adds	r3, r7, #0
   120d0:	335c      	adds	r3, #92	; 0x5c
   120d2:	781b      	ldrb	r3, [r3, #0]
   120d4:	6179      	str	r1, [r7, #20]
   120d6:	60ba      	str	r2, [r7, #8]
   120d8:	607b      	str	r3, [r7, #4]
   120da:	2800      	cmp	r0, #0
   120dc:	d101      	bne.n	120e2 <mqtt_publish+0x26>
   120de:	2516      	movs	r5, #22
   120e0:	e0a7      	b.n	12232 <mqtt_publish+0x176>
   120e2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   120e4:	466a      	mov	r2, sp
   120e6:	3307      	adds	r3, #7
   120e8:	08db      	lsrs	r3, r3, #3
   120ea:	00db      	lsls	r3, r3, #3
   120ec:	1ad2      	subs	r2, r2, r3
   120ee:	697b      	ldr	r3, [r7, #20]
   120f0:	4695      	mov	sp, r2
   120f2:	ae02      	add	r6, sp, #8
   120f4:	2b00      	cmp	r3, #0
   120f6:	d0f2      	beq.n	120de <mqtt_publish+0x22>
   120f8:	693a      	ldr	r2, [r7, #16]
   120fa:	2a02      	cmp	r2, #2
   120fc:	d8ef      	bhi.n	120de <mqtt_publish+0x22>
   120fe:	1c05      	adds	r5, r0, #0
   12100:	3543      	adds	r5, #67	; 0x43
   12102:	782b      	ldrb	r3, [r5, #0]
   12104:	079a      	lsls	r2, r3, #30
   12106:	d400      	bmi.n	1210a <mqtt_publish+0x4e>
   12108:	e090      	b.n	1222c <mqtt_publish+0x170>
   1210a:	071a      	lsls	r2, r3, #28
   1210c:	d40a      	bmi.n	12124 <mqtt_publish+0x68>
   1210e:	4b4b      	ldr	r3, [pc, #300]	; (1223c <mqtt_publish+0x180>)
   12110:	6978      	ldr	r0, [r7, #20]
   12112:	4798      	blx	r3
   12114:	68fd      	ldr	r5, [r7, #12]
   12116:	693b      	ldr	r3, [r7, #16]
   12118:	3502      	adds	r5, #2
   1211a:	182d      	adds	r5, r5, r0
   1211c:	2b00      	cmp	r3, #0
   1211e:	d011      	beq.n	12144 <mqtt_publish+0x88>
   12120:	3502      	adds	r5, #2
   12122:	e00f      	b.n	12144 <mqtt_publish+0x88>
   12124:	1c03      	adds	r3, r0, #0
   12126:	3370      	adds	r3, #112	; 0x70
   12128:	781b      	ldrb	r3, [r3, #0]
   1212a:	2b00      	cmp	r3, #0
   1212c:	d000      	beq.n	12130 <mqtt_publish+0x74>
   1212e:	e07f      	b.n	12230 <mqtt_publish+0x174>
   12130:	782b      	ldrb	r3, [r5, #0]
   12132:	071a      	lsls	r2, r3, #28
   12134:	d5eb      	bpl.n	1210e <mqtt_publish+0x52>
   12136:	4b42      	ldr	r3, [pc, #264]	; (12240 <mqtt_publish+0x184>)
   12138:	2000      	movs	r0, #0
   1213a:	4798      	blx	r3
   1213c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1213e:	4b41      	ldr	r3, [pc, #260]	; (12244 <mqtt_publish+0x188>)
   12140:	4798      	blx	r3
   12142:	e7f5      	b.n	12130 <mqtt_publish+0x74>
   12144:	1c23      	adds	r3, r4, #0
   12146:	3343      	adds	r3, #67	; 0x43
   12148:	781a      	ldrb	r2, [r3, #0]
   1214a:	2108      	movs	r1, #8
   1214c:	430a      	orrs	r2, r1
   1214e:	701a      	strb	r2, [r3, #0]
   12150:	1c38      	adds	r0, r7, #0
   12152:	9400      	str	r4, [sp, #0]
   12154:	1c31      	adds	r1, r6, #0
   12156:	302c      	adds	r0, #44	; 0x2c
   12158:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   1215a:	4b3b      	ldr	r3, [pc, #236]	; (12248 <mqtt_publish+0x18c>)
   1215c:	4e3b      	ldr	r6, [pc, #236]	; (1224c <mqtt_publish+0x190>)
   1215e:	47b0      	blx	r6
   12160:	687b      	ldr	r3, [r7, #4]
   12162:	2101      	movs	r1, #1
   12164:	4019      	ands	r1, r3
   12166:	2330      	movs	r3, #48	; 0x30
   12168:	4319      	orrs	r1, r3
   1216a:	693b      	ldr	r3, [r7, #16]
   1216c:	1c38      	adds	r0, r7, #0
   1216e:	005a      	lsls	r2, r3, #1
   12170:	2306      	movs	r3, #6
   12172:	4013      	ands	r3, r2
   12174:	4319      	orrs	r1, r3
   12176:	302c      	adds	r0, #44	; 0x2c
   12178:	4b35      	ldr	r3, [pc, #212]	; (12250 <mqtt_publish+0x194>)
   1217a:	4798      	blx	r3
   1217c:	4b34      	ldr	r3, [pc, #208]	; (12250 <mqtt_publish+0x194>)
   1217e:	2d80      	cmp	r5, #128	; 0x80
   12180:	dd08      	ble.n	12194 <mqtt_publish+0xd8>
   12182:	2180      	movs	r1, #128	; 0x80
   12184:	4249      	negs	r1, r1
   12186:	4329      	orrs	r1, r5
   12188:	1c38      	adds	r0, r7, #0
   1218a:	b249      	sxtb	r1, r1
   1218c:	302c      	adds	r0, #44	; 0x2c
   1218e:	4798      	blx	r3
   12190:	11ed      	asrs	r5, r5, #7
   12192:	e7f3      	b.n	1217c <mqtt_publish+0xc0>
   12194:	4a2f      	ldr	r2, [pc, #188]	; (12254 <mqtt_publish+0x198>)
   12196:	4015      	ands	r5, r2
   12198:	d504      	bpl.n	121a4 <mqtt_publish+0xe8>
   1219a:	2280      	movs	r2, #128	; 0x80
   1219c:	3d01      	subs	r5, #1
   1219e:	4252      	negs	r2, r2
   121a0:	4315      	orrs	r5, r2
   121a2:	3501      	adds	r5, #1
   121a4:	1c38      	adds	r0, r7, #0
   121a6:	b269      	sxtb	r1, r5
   121a8:	302c      	adds	r0, #44	; 0x2c
   121aa:	4798      	blx	r3
   121ac:	4e23      	ldr	r6, [pc, #140]	; (1223c <mqtt_publish+0x180>)
   121ae:	6978      	ldr	r0, [r7, #20]
   121b0:	47b0      	blx	r6
   121b2:	b201      	sxth	r1, r0
   121b4:	1c38      	adds	r0, r7, #0
   121b6:	302c      	adds	r0, #44	; 0x2c
   121b8:	4d27      	ldr	r5, [pc, #156]	; (12258 <mqtt_publish+0x19c>)
   121ba:	47a8      	blx	r5
   121bc:	6978      	ldr	r0, [r7, #20]
   121be:	47b0      	blx	r6
   121c0:	1c02      	adds	r2, r0, #0
   121c2:	1c38      	adds	r0, r7, #0
   121c4:	302c      	adds	r0, #44	; 0x2c
   121c6:	6979      	ldr	r1, [r7, #20]
   121c8:	4e24      	ldr	r6, [pc, #144]	; (1225c <mqtt_publish+0x1a0>)
   121ca:	47b0      	blx	r6
   121cc:	693a      	ldr	r2, [r7, #16]
   121ce:	2a00      	cmp	r2, #0
   121d0:	d006      	beq.n	121e0 <mqtt_publish+0x124>
   121d2:	8821      	ldrh	r1, [r4, #0]
   121d4:	1c38      	adds	r0, r7, #0
   121d6:	1c4b      	adds	r3, r1, #1
   121d8:	8023      	strh	r3, [r4, #0]
   121da:	b209      	sxth	r1, r1
   121dc:	302c      	adds	r0, #44	; 0x2c
   121de:	47a8      	blx	r5
   121e0:	8823      	ldrh	r3, [r4, #0]
   121e2:	2b00      	cmp	r3, #0
   121e4:	d101      	bne.n	121ea <mqtt_publish+0x12e>
   121e6:	2301      	movs	r3, #1
   121e8:	8023      	strh	r3, [r4, #0]
   121ea:	68bb      	ldr	r3, [r7, #8]
   121ec:	2b00      	cmp	r3, #0
   121ee:	d006      	beq.n	121fe <mqtt_publish+0x142>
   121f0:	68fa      	ldr	r2, [r7, #12]
   121f2:	2a00      	cmp	r2, #0
   121f4:	d003      	beq.n	121fe <mqtt_publish+0x142>
   121f6:	1c38      	adds	r0, r7, #0
   121f8:	302c      	adds	r0, #44	; 0x2c
   121fa:	1c19      	adds	r1, r3, #0
   121fc:	47b0      	blx	r6
   121fe:	1c38      	adds	r0, r7, #0
   12200:	4b17      	ldr	r3, [pc, #92]	; (12260 <mqtt_publish+0x1a4>)
   12202:	302c      	adds	r0, #44	; 0x2c
   12204:	4798      	blx	r3
   12206:	1c23      	adds	r3, r4, #0
   12208:	3343      	adds	r3, #67	; 0x43
   1220a:	781a      	ldrb	r2, [r3, #0]
   1220c:	2108      	movs	r1, #8
   1220e:	438a      	bics	r2, r1
   12210:	701a      	strb	r2, [r3, #0]
   12212:	693b      	ldr	r3, [r7, #16]
   12214:	2500      	movs	r5, #0
   12216:	42ab      	cmp	r3, r5
   12218:	d10c      	bne.n	12234 <mqtt_publish+0x178>
   1221a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1221c:	42ab      	cmp	r3, r5
   1221e:	d009      	beq.n	12234 <mqtt_publish+0x178>
   12220:	1c3a      	adds	r2, r7, #0
   12222:	1c20      	adds	r0, r4, #0
   12224:	2102      	movs	r1, #2
   12226:	3218      	adds	r2, #24
   12228:	4798      	blx	r3
   1222a:	e003      	b.n	12234 <mqtt_publish+0x178>
   1222c:	2580      	movs	r5, #128	; 0x80
   1222e:	e000      	b.n	12232 <mqtt_publish+0x176>
   12230:	250b      	movs	r5, #11
   12232:	426d      	negs	r5, r5
   12234:	1c28      	adds	r0, r5, #0
   12236:	46bd      	mov	sp, r7
   12238:	b011      	add	sp, #68	; 0x44
   1223a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1223c:	000132d3 	.word	0x000132d3
   12240:	00004e8d 	.word	0x00004e8d
   12244:	0000cc31 	.word	0x0000cc31
   12248:	00011bd9 	.word	0x00011bd9
   1224c:	0000c84d 	.word	0x0000c84d
   12250:	0000c881 	.word	0x0000c881
   12254:	8000007f 	.word	0x8000007f
   12258:	0000c8cd 	.word	0x0000c8cd
   1225c:	0000c90d 	.word	0x0000c90d
   12260:	0000c949 	.word	0x0000c949

00012264 <mqtt_subscribe>:
   12264:	b5f0      	push	{r4, r5, r6, r7, lr}
   12266:	b08d      	sub	sp, #52	; 0x34
   12268:	af02      	add	r7, sp, #8
   1226a:	1c04      	adds	r4, r0, #0
   1226c:	60b9      	str	r1, [r7, #8]
   1226e:	607a      	str	r2, [r7, #4]
   12270:	d101      	bne.n	12276 <mqtt_subscribe+0x12>
   12272:	2016      	movs	r0, #22
   12274:	e086      	b.n	12384 <mqtt_subscribe+0x120>
   12276:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   12278:	466a      	mov	r2, sp
   1227a:	3307      	adds	r3, #7
   1227c:	08db      	lsrs	r3, r3, #3
   1227e:	00db      	lsls	r3, r3, #3
   12280:	1ad2      	subs	r2, r2, r3
   12282:	4695      	mov	sp, r2
   12284:	ad02      	add	r5, sp, #8
   12286:	603d      	str	r5, [r7, #0]
   12288:	68bd      	ldr	r5, [r7, #8]
   1228a:	2d00      	cmp	r5, #0
   1228c:	d0f1      	beq.n	12272 <mqtt_subscribe+0xe>
   1228e:	687d      	ldr	r5, [r7, #4]
   12290:	2d02      	cmp	r5, #2
   12292:	d8ee      	bhi.n	12272 <mqtt_subscribe+0xe>
   12294:	1c05      	adds	r5, r0, #0
   12296:	3543      	adds	r5, #67	; 0x43
   12298:	782b      	ldrb	r3, [r5, #0]
   1229a:	079a      	lsls	r2, r3, #30
   1229c:	d56f      	bpl.n	1237e <mqtt_subscribe+0x11a>
   1229e:	071a      	lsls	r2, r3, #28
   122a0:	d41a      	bmi.n	122d8 <mqtt_subscribe+0x74>
   122a2:	68b8      	ldr	r0, [r7, #8]
   122a4:	4d39      	ldr	r5, [pc, #228]	; (1238c <mqtt_subscribe+0x128>)
   122a6:	47a8      	blx	r5
   122a8:	1c25      	adds	r5, r4, #0
   122aa:	3543      	adds	r5, #67	; 0x43
   122ac:	782b      	ldrb	r3, [r5, #0]
   122ae:	2208      	movs	r2, #8
   122b0:	4313      	orrs	r3, r2
   122b2:	702b      	strb	r3, [r5, #0]
   122b4:	60fd      	str	r5, [r7, #12]
   122b6:	1d46      	adds	r6, r0, #5
   122b8:	9400      	str	r4, [sp, #0]
   122ba:	1c38      	adds	r0, r7, #0
   122bc:	3014      	adds	r0, #20
   122be:	6839      	ldr	r1, [r7, #0]
   122c0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   122c2:	4b33      	ldr	r3, [pc, #204]	; (12390 <mqtt_subscribe+0x12c>)
   122c4:	4d33      	ldr	r5, [pc, #204]	; (12394 <mqtt_subscribe+0x130>)
   122c6:	47a8      	blx	r5
   122c8:	1c38      	adds	r0, r7, #0
   122ca:	217e      	movs	r1, #126	; 0x7e
   122cc:	3014      	adds	r0, #20
   122ce:	4249      	negs	r1, r1
   122d0:	4b31      	ldr	r3, [pc, #196]	; (12398 <mqtt_subscribe+0x134>)
   122d2:	4798      	blx	r3
   122d4:	4d2d      	ldr	r5, [pc, #180]	; (1238c <mqtt_subscribe+0x128>)
   122d6:	e00e      	b.n	122f6 <mqtt_subscribe+0x92>
   122d8:	1c03      	adds	r3, r0, #0
   122da:	3370      	adds	r3, #112	; 0x70
   122dc:	781b      	ldrb	r3, [r3, #0]
   122de:	2b00      	cmp	r3, #0
   122e0:	d14f      	bne.n	12382 <mqtt_subscribe+0x11e>
   122e2:	782b      	ldrb	r3, [r5, #0]
   122e4:	071a      	lsls	r2, r3, #28
   122e6:	d5dc      	bpl.n	122a2 <mqtt_subscribe+0x3e>
   122e8:	4b2c      	ldr	r3, [pc, #176]	; (1239c <mqtt_subscribe+0x138>)
   122ea:	2000      	movs	r0, #0
   122ec:	4798      	blx	r3
   122ee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   122f0:	4b2b      	ldr	r3, [pc, #172]	; (123a0 <mqtt_subscribe+0x13c>)
   122f2:	4798      	blx	r3
   122f4:	e7f5      	b.n	122e2 <mqtt_subscribe+0x7e>
   122f6:	4b28      	ldr	r3, [pc, #160]	; (12398 <mqtt_subscribe+0x134>)
   122f8:	2e80      	cmp	r6, #128	; 0x80
   122fa:	dd08      	ble.n	1230e <mqtt_subscribe+0xaa>
   122fc:	2180      	movs	r1, #128	; 0x80
   122fe:	4249      	negs	r1, r1
   12300:	4331      	orrs	r1, r6
   12302:	1c38      	adds	r0, r7, #0
   12304:	b249      	sxtb	r1, r1
   12306:	3014      	adds	r0, #20
   12308:	4798      	blx	r3
   1230a:	11f6      	asrs	r6, r6, #7
   1230c:	e7f3      	b.n	122f6 <mqtt_subscribe+0x92>
   1230e:	4925      	ldr	r1, [pc, #148]	; (123a4 <mqtt_subscribe+0x140>)
   12310:	4031      	ands	r1, r6
   12312:	d504      	bpl.n	1231e <mqtt_subscribe+0xba>
   12314:	2280      	movs	r2, #128	; 0x80
   12316:	3901      	subs	r1, #1
   12318:	4252      	negs	r2, r2
   1231a:	4311      	orrs	r1, r2
   1231c:	3101      	adds	r1, #1
   1231e:	1c38      	adds	r0, r7, #0
   12320:	b249      	sxtb	r1, r1
   12322:	3014      	adds	r0, #20
   12324:	4798      	blx	r3
   12326:	8821      	ldrh	r1, [r4, #0]
   12328:	1c38      	adds	r0, r7, #0
   1232a:	1c4b      	adds	r3, r1, #1
   1232c:	8023      	strh	r3, [r4, #0]
   1232e:	b209      	sxth	r1, r1
   12330:	3014      	adds	r0, #20
   12332:	4e1d      	ldr	r6, [pc, #116]	; (123a8 <mqtt_subscribe+0x144>)
   12334:	47b0      	blx	r6
   12336:	8823      	ldrh	r3, [r4, #0]
   12338:	2b00      	cmp	r3, #0
   1233a:	d101      	bne.n	12340 <mqtt_subscribe+0xdc>
   1233c:	2301      	movs	r3, #1
   1233e:	8023      	strh	r3, [r4, #0]
   12340:	68b8      	ldr	r0, [r7, #8]
   12342:	47a8      	blx	r5
   12344:	b201      	sxth	r1, r0
   12346:	1c38      	adds	r0, r7, #0
   12348:	3014      	adds	r0, #20
   1234a:	47b0      	blx	r6
   1234c:	68b8      	ldr	r0, [r7, #8]
   1234e:	47a8      	blx	r5
   12350:	1c02      	adds	r2, r0, #0
   12352:	1c38      	adds	r0, r7, #0
   12354:	3014      	adds	r0, #20
   12356:	68b9      	ldr	r1, [r7, #8]
   12358:	4b14      	ldr	r3, [pc, #80]	; (123ac <mqtt_subscribe+0x148>)
   1235a:	4798      	blx	r3
   1235c:	687d      	ldr	r5, [r7, #4]
   1235e:	1c38      	adds	r0, r7, #0
   12360:	b269      	sxtb	r1, r5
   12362:	3014      	adds	r0, #20
   12364:	4b0c      	ldr	r3, [pc, #48]	; (12398 <mqtt_subscribe+0x134>)
   12366:	4798      	blx	r3
   12368:	1c38      	adds	r0, r7, #0
   1236a:	3014      	adds	r0, #20
   1236c:	4b10      	ldr	r3, [pc, #64]	; (123b0 <mqtt_subscribe+0x14c>)
   1236e:	4798      	blx	r3
   12370:	68fd      	ldr	r5, [r7, #12]
   12372:	2208      	movs	r2, #8
   12374:	782b      	ldrb	r3, [r5, #0]
   12376:	2000      	movs	r0, #0
   12378:	4393      	bics	r3, r2
   1237a:	702b      	strb	r3, [r5, #0]
   1237c:	e003      	b.n	12386 <mqtt_subscribe+0x122>
   1237e:	2080      	movs	r0, #128	; 0x80
   12380:	e000      	b.n	12384 <mqtt_subscribe+0x120>
   12382:	200b      	movs	r0, #11
   12384:	4240      	negs	r0, r0
   12386:	46bd      	mov	sp, r7
   12388:	b00b      	add	sp, #44	; 0x2c
   1238a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1238c:	000132d3 	.word	0x000132d3
   12390:	00011bd9 	.word	0x00011bd9
   12394:	0000c84d 	.word	0x0000c84d
   12398:	0000c881 	.word	0x0000c881
   1239c:	00004e8d 	.word	0x00004e8d
   123a0:	0000cc31 	.word	0x0000cc31
   123a4:	8000007f 	.word	0x8000007f
   123a8:	0000c8cd 	.word	0x0000c8cd
   123ac:	0000c90d 	.word	0x0000c90d
   123b0:	0000c949 	.word	0x0000c949

000123b4 <_mqtt_ping>:
   123b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   123b6:	23c0      	movs	r3, #192	; 0xc0
   123b8:	a901      	add	r1, sp, #4
   123ba:	2500      	movs	r5, #0
   123bc:	700b      	strb	r3, [r1, #0]
   123be:	704d      	strb	r5, [r1, #1]
   123c0:	42a8      	cmp	r0, r5
   123c2:	d019      	beq.n	123f8 <_mqtt_ping+0x44>
   123c4:	1c04      	adds	r4, r0, #0
   123c6:	3443      	adds	r4, #67	; 0x43
   123c8:	7823      	ldrb	r3, [r4, #0]
   123ca:	079a      	lsls	r2, r3, #30
   123cc:	d516      	bpl.n	123fc <_mqtt_ping+0x48>
   123ce:	071a      	lsls	r2, r3, #28
   123d0:	d416      	bmi.n	12400 <_mqtt_ping+0x4c>
   123d2:	2608      	movs	r6, #8
   123d4:	4333      	orrs	r3, r6
   123d6:	7023      	strb	r3, [r4, #0]
   123d8:	7880      	ldrb	r0, [r0, #2]
   123da:	1c2b      	adds	r3, r5, #0
   123dc:	b240      	sxtb	r0, r0
   123de:	2202      	movs	r2, #2
   123e0:	4f09      	ldr	r7, [pc, #36]	; (12408 <_mqtt_ping+0x54>)
   123e2:	47b8      	blx	r7
   123e4:	1c2b      	adds	r3, r5, #0
   123e6:	42a8      	cmp	r0, r5
   123e8:	da0c      	bge.n	12404 <_mqtt_ping+0x50>
   123ea:	7823      	ldrb	r3, [r4, #0]
   123ec:	43b3      	bics	r3, r6
   123ee:	7023      	strb	r3, [r4, #0]
   123f0:	4b06      	ldr	r3, [pc, #24]	; (1240c <_mqtt_ping+0x58>)
   123f2:	4798      	blx	r3
   123f4:	1c03      	adds	r3, r0, #0
   123f6:	e005      	b.n	12404 <_mqtt_ping+0x50>
   123f8:	2316      	movs	r3, #22
   123fa:	e002      	b.n	12402 <_mqtt_ping+0x4e>
   123fc:	2380      	movs	r3, #128	; 0x80
   123fe:	e000      	b.n	12402 <_mqtt_ping+0x4e>
   12400:	230b      	movs	r3, #11
   12402:	425b      	negs	r3, r3
   12404:	1c18      	adds	r0, r3, #0
   12406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12408:	00008241 	.word	0x00008241
   1240c:	00011b89 	.word	0x00011b89

00012410 <mqtt_timer_callback>:
   12410:	b570      	push	{r4, r5, r6, lr}
   12412:	1c05      	adds	r5, r0, #0
   12414:	b086      	sub	sp, #24
   12416:	1c0e      	adds	r6, r1, #0
   12418:	1c14      	adds	r4, r2, #0
   1241a:	2800      	cmp	r0, #0
   1241c:	d012      	beq.n	12444 <mqtt_timer_callback+0x34>
   1241e:	2a00      	cmp	r2, #0
   12420:	d010      	beq.n	12444 <mqtt_timer_callback+0x34>
   12422:	1c10      	adds	r0, r2, #0
   12424:	4b08      	ldr	r3, [pc, #32]	; (12448 <mqtt_timer_callback+0x38>)
   12426:	4798      	blx	r3
   12428:	2800      	cmp	r0, #0
   1242a:	da04      	bge.n	12436 <mqtt_timer_callback+0x26>
   1242c:	1c28      	adds	r0, r5, #0
   1242e:	1c31      	adds	r1, r6, #0
   12430:	2200      	movs	r2, #0
   12432:	4b06      	ldr	r3, [pc, #24]	; (1244c <mqtt_timer_callback+0x3c>)
   12434:	e005      	b.n	12442 <mqtt_timer_callback+0x32>
   12436:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12438:	2b00      	cmp	r3, #0
   1243a:	d003      	beq.n	12444 <mqtt_timer_callback+0x34>
   1243c:	1c20      	adds	r0, r4, #0
   1243e:	2107      	movs	r1, #7
   12440:	aa01      	add	r2, sp, #4
   12442:	4798      	blx	r3
   12444:	b006      	add	sp, #24
   12446:	bd70      	pop	{r4, r5, r6, pc}
   12448:	000123b5 	.word	0x000123b5
   1244c:	0000cbb5 	.word	0x0000cbb5

00012450 <atoi>:
   12450:	b510      	push	{r4, lr}
   12452:	220a      	movs	r2, #10
   12454:	2100      	movs	r1, #0
   12456:	f000 fff3 	bl	13440 <strtol>
   1245a:	bd10      	pop	{r4, pc}

0001245c <__libc_init_array>:
   1245c:	b570      	push	{r4, r5, r6, lr}
   1245e:	2600      	movs	r6, #0
   12460:	4d0c      	ldr	r5, [pc, #48]	; (12494 <__libc_init_array+0x38>)
   12462:	4c0d      	ldr	r4, [pc, #52]	; (12498 <__libc_init_array+0x3c>)
   12464:	1b64      	subs	r4, r4, r5
   12466:	10a4      	asrs	r4, r4, #2
   12468:	42a6      	cmp	r6, r4
   1246a:	d109      	bne.n	12480 <__libc_init_array+0x24>
   1246c:	2600      	movs	r6, #0
   1246e:	f007 ff8f 	bl	1a390 <_init>
   12472:	4d0a      	ldr	r5, [pc, #40]	; (1249c <__libc_init_array+0x40>)
   12474:	4c0a      	ldr	r4, [pc, #40]	; (124a0 <__libc_init_array+0x44>)
   12476:	1b64      	subs	r4, r4, r5
   12478:	10a4      	asrs	r4, r4, #2
   1247a:	42a6      	cmp	r6, r4
   1247c:	d105      	bne.n	1248a <__libc_init_array+0x2e>
   1247e:	bd70      	pop	{r4, r5, r6, pc}
   12480:	00b3      	lsls	r3, r6, #2
   12482:	58eb      	ldr	r3, [r5, r3]
   12484:	4798      	blx	r3
   12486:	3601      	adds	r6, #1
   12488:	e7ee      	b.n	12468 <__libc_init_array+0xc>
   1248a:	00b3      	lsls	r3, r6, #2
   1248c:	58eb      	ldr	r3, [r5, r3]
   1248e:	4798      	blx	r3
   12490:	3601      	adds	r6, #1
   12492:	e7f2      	b.n	1247a <__libc_init_array+0x1e>
   12494:	0001a39c 	.word	0x0001a39c
   12498:	0001a39c 	.word	0x0001a39c
   1249c:	0001a39c 	.word	0x0001a39c
   124a0:	0001a3a0 	.word	0x0001a3a0

000124a4 <__locale_ctype_ptr_l>:
   124a4:	30ec      	adds	r0, #236	; 0xec
   124a6:	6800      	ldr	r0, [r0, #0]
   124a8:	4770      	bx	lr
	...

000124ac <malloc>:
   124ac:	b510      	push	{r4, lr}
   124ae:	4b03      	ldr	r3, [pc, #12]	; (124bc <malloc+0x10>)
   124b0:	0001      	movs	r1, r0
   124b2:	6818      	ldr	r0, [r3, #0]
   124b4:	f000 f88e 	bl	125d4 <_malloc_r>
   124b8:	bd10      	pop	{r4, pc}
   124ba:	46c0      	nop			; (mov r8, r8)
   124bc:	20000018 	.word	0x20000018

000124c0 <free>:
   124c0:	b510      	push	{r4, lr}
   124c2:	4b03      	ldr	r3, [pc, #12]	; (124d0 <free+0x10>)
   124c4:	0001      	movs	r1, r0
   124c6:	6818      	ldr	r0, [r3, #0]
   124c8:	f000 f83a 	bl	12540 <_free_r>
   124cc:	bd10      	pop	{r4, pc}
   124ce:	46c0      	nop			; (mov r8, r8)
   124d0:	20000018 	.word	0x20000018

000124d4 <__ascii_mbtowc>:
   124d4:	b082      	sub	sp, #8
   124d6:	2900      	cmp	r1, #0
   124d8:	d100      	bne.n	124dc <__ascii_mbtowc+0x8>
   124da:	a901      	add	r1, sp, #4
   124dc:	1e10      	subs	r0, r2, #0
   124de:	d006      	beq.n	124ee <__ascii_mbtowc+0x1a>
   124e0:	2b00      	cmp	r3, #0
   124e2:	d006      	beq.n	124f2 <__ascii_mbtowc+0x1e>
   124e4:	7813      	ldrb	r3, [r2, #0]
   124e6:	600b      	str	r3, [r1, #0]
   124e8:	7810      	ldrb	r0, [r2, #0]
   124ea:	1e43      	subs	r3, r0, #1
   124ec:	4198      	sbcs	r0, r3
   124ee:	b002      	add	sp, #8
   124f0:	4770      	bx	lr
   124f2:	2002      	movs	r0, #2
   124f4:	4240      	negs	r0, r0
   124f6:	e7fa      	b.n	124ee <__ascii_mbtowc+0x1a>

000124f8 <memcpy>:
   124f8:	2300      	movs	r3, #0
   124fa:	b510      	push	{r4, lr}
   124fc:	429a      	cmp	r2, r3
   124fe:	d100      	bne.n	12502 <memcpy+0xa>
   12500:	bd10      	pop	{r4, pc}
   12502:	5ccc      	ldrb	r4, [r1, r3]
   12504:	54c4      	strb	r4, [r0, r3]
   12506:	3301      	adds	r3, #1
   12508:	e7f8      	b.n	124fc <memcpy+0x4>

0001250a <memmove>:
   1250a:	b510      	push	{r4, lr}
   1250c:	4288      	cmp	r0, r1
   1250e:	d902      	bls.n	12516 <memmove+0xc>
   12510:	188b      	adds	r3, r1, r2
   12512:	4298      	cmp	r0, r3
   12514:	d308      	bcc.n	12528 <memmove+0x1e>
   12516:	2300      	movs	r3, #0
   12518:	429a      	cmp	r2, r3
   1251a:	d007      	beq.n	1252c <memmove+0x22>
   1251c:	5ccc      	ldrb	r4, [r1, r3]
   1251e:	54c4      	strb	r4, [r0, r3]
   12520:	3301      	adds	r3, #1
   12522:	e7f9      	b.n	12518 <memmove+0xe>
   12524:	5c8b      	ldrb	r3, [r1, r2]
   12526:	5483      	strb	r3, [r0, r2]
   12528:	3a01      	subs	r2, #1
   1252a:	d2fb      	bcs.n	12524 <memmove+0x1a>
   1252c:	bd10      	pop	{r4, pc}

0001252e <memset>:
   1252e:	0003      	movs	r3, r0
   12530:	1882      	adds	r2, r0, r2
   12532:	4293      	cmp	r3, r2
   12534:	d100      	bne.n	12538 <memset+0xa>
   12536:	4770      	bx	lr
   12538:	7019      	strb	r1, [r3, #0]
   1253a:	3301      	adds	r3, #1
   1253c:	e7f9      	b.n	12532 <memset+0x4>
	...

00012540 <_free_r>:
   12540:	b570      	push	{r4, r5, r6, lr}
   12542:	0005      	movs	r5, r0
   12544:	2900      	cmp	r1, #0
   12546:	d010      	beq.n	1256a <_free_r+0x2a>
   12548:	1f0c      	subs	r4, r1, #4
   1254a:	6823      	ldr	r3, [r4, #0]
   1254c:	2b00      	cmp	r3, #0
   1254e:	da00      	bge.n	12552 <_free_r+0x12>
   12550:	18e4      	adds	r4, r4, r3
   12552:	0028      	movs	r0, r5
   12554:	f002 f8dd 	bl	14712 <__malloc_lock>
   12558:	4a1d      	ldr	r2, [pc, #116]	; (125d0 <_free_r+0x90>)
   1255a:	6813      	ldr	r3, [r2, #0]
   1255c:	2b00      	cmp	r3, #0
   1255e:	d105      	bne.n	1256c <_free_r+0x2c>
   12560:	6063      	str	r3, [r4, #4]
   12562:	6014      	str	r4, [r2, #0]
   12564:	0028      	movs	r0, r5
   12566:	f002 f8d5 	bl	14714 <__malloc_unlock>
   1256a:	bd70      	pop	{r4, r5, r6, pc}
   1256c:	42a3      	cmp	r3, r4
   1256e:	d909      	bls.n	12584 <_free_r+0x44>
   12570:	6821      	ldr	r1, [r4, #0]
   12572:	1860      	adds	r0, r4, r1
   12574:	4283      	cmp	r3, r0
   12576:	d1f3      	bne.n	12560 <_free_r+0x20>
   12578:	6818      	ldr	r0, [r3, #0]
   1257a:	685b      	ldr	r3, [r3, #4]
   1257c:	1841      	adds	r1, r0, r1
   1257e:	6021      	str	r1, [r4, #0]
   12580:	e7ee      	b.n	12560 <_free_r+0x20>
   12582:	0013      	movs	r3, r2
   12584:	685a      	ldr	r2, [r3, #4]
   12586:	2a00      	cmp	r2, #0
   12588:	d001      	beq.n	1258e <_free_r+0x4e>
   1258a:	42a2      	cmp	r2, r4
   1258c:	d9f9      	bls.n	12582 <_free_r+0x42>
   1258e:	6819      	ldr	r1, [r3, #0]
   12590:	1858      	adds	r0, r3, r1
   12592:	42a0      	cmp	r0, r4
   12594:	d10b      	bne.n	125ae <_free_r+0x6e>
   12596:	6820      	ldr	r0, [r4, #0]
   12598:	1809      	adds	r1, r1, r0
   1259a:	1858      	adds	r0, r3, r1
   1259c:	6019      	str	r1, [r3, #0]
   1259e:	4282      	cmp	r2, r0
   125a0:	d1e0      	bne.n	12564 <_free_r+0x24>
   125a2:	6810      	ldr	r0, [r2, #0]
   125a4:	6852      	ldr	r2, [r2, #4]
   125a6:	1841      	adds	r1, r0, r1
   125a8:	6019      	str	r1, [r3, #0]
   125aa:	605a      	str	r2, [r3, #4]
   125ac:	e7da      	b.n	12564 <_free_r+0x24>
   125ae:	42a0      	cmp	r0, r4
   125b0:	d902      	bls.n	125b8 <_free_r+0x78>
   125b2:	230c      	movs	r3, #12
   125b4:	602b      	str	r3, [r5, #0]
   125b6:	e7d5      	b.n	12564 <_free_r+0x24>
   125b8:	6821      	ldr	r1, [r4, #0]
   125ba:	1860      	adds	r0, r4, r1
   125bc:	4282      	cmp	r2, r0
   125be:	d103      	bne.n	125c8 <_free_r+0x88>
   125c0:	6810      	ldr	r0, [r2, #0]
   125c2:	6852      	ldr	r2, [r2, #4]
   125c4:	1841      	adds	r1, r0, r1
   125c6:	6021      	str	r1, [r4, #0]
   125c8:	6062      	str	r2, [r4, #4]
   125ca:	605c      	str	r4, [r3, #4]
   125cc:	e7ca      	b.n	12564 <_free_r+0x24>
   125ce:	46c0      	nop			; (mov r8, r8)
   125d0:	200002c0 	.word	0x200002c0

000125d4 <_malloc_r>:
   125d4:	2303      	movs	r3, #3
   125d6:	b570      	push	{r4, r5, r6, lr}
   125d8:	1ccd      	adds	r5, r1, #3
   125da:	439d      	bics	r5, r3
   125dc:	3508      	adds	r5, #8
   125de:	0006      	movs	r6, r0
   125e0:	2d0c      	cmp	r5, #12
   125e2:	d21e      	bcs.n	12622 <_malloc_r+0x4e>
   125e4:	250c      	movs	r5, #12
   125e6:	42a9      	cmp	r1, r5
   125e8:	d81d      	bhi.n	12626 <_malloc_r+0x52>
   125ea:	0030      	movs	r0, r6
   125ec:	f002 f891 	bl	14712 <__malloc_lock>
   125f0:	4a25      	ldr	r2, [pc, #148]	; (12688 <_malloc_r+0xb4>)
   125f2:	6814      	ldr	r4, [r2, #0]
   125f4:	0021      	movs	r1, r4
   125f6:	2900      	cmp	r1, #0
   125f8:	d119      	bne.n	1262e <_malloc_r+0x5a>
   125fa:	4c24      	ldr	r4, [pc, #144]	; (1268c <_malloc_r+0xb8>)
   125fc:	6823      	ldr	r3, [r4, #0]
   125fe:	2b00      	cmp	r3, #0
   12600:	d103      	bne.n	1260a <_malloc_r+0x36>
   12602:	0030      	movs	r0, r6
   12604:	f000 fd4c 	bl	130a0 <_sbrk_r>
   12608:	6020      	str	r0, [r4, #0]
   1260a:	0029      	movs	r1, r5
   1260c:	0030      	movs	r0, r6
   1260e:	f000 fd47 	bl	130a0 <_sbrk_r>
   12612:	1c43      	adds	r3, r0, #1
   12614:	d12c      	bne.n	12670 <_malloc_r+0x9c>
   12616:	230c      	movs	r3, #12
   12618:	0030      	movs	r0, r6
   1261a:	6033      	str	r3, [r6, #0]
   1261c:	f002 f87a 	bl	14714 <__malloc_unlock>
   12620:	e003      	b.n	1262a <_malloc_r+0x56>
   12622:	2d00      	cmp	r5, #0
   12624:	dadf      	bge.n	125e6 <_malloc_r+0x12>
   12626:	230c      	movs	r3, #12
   12628:	6033      	str	r3, [r6, #0]
   1262a:	2000      	movs	r0, #0
   1262c:	bd70      	pop	{r4, r5, r6, pc}
   1262e:	680b      	ldr	r3, [r1, #0]
   12630:	1b5b      	subs	r3, r3, r5
   12632:	d41a      	bmi.n	1266a <_malloc_r+0x96>
   12634:	2b0b      	cmp	r3, #11
   12636:	d903      	bls.n	12640 <_malloc_r+0x6c>
   12638:	600b      	str	r3, [r1, #0]
   1263a:	18cc      	adds	r4, r1, r3
   1263c:	6025      	str	r5, [r4, #0]
   1263e:	e003      	b.n	12648 <_malloc_r+0x74>
   12640:	428c      	cmp	r4, r1
   12642:	d10e      	bne.n	12662 <_malloc_r+0x8e>
   12644:	6863      	ldr	r3, [r4, #4]
   12646:	6013      	str	r3, [r2, #0]
   12648:	0030      	movs	r0, r6
   1264a:	f002 f863 	bl	14714 <__malloc_unlock>
   1264e:	0020      	movs	r0, r4
   12650:	2207      	movs	r2, #7
   12652:	300b      	adds	r0, #11
   12654:	1d23      	adds	r3, r4, #4
   12656:	4390      	bics	r0, r2
   12658:	1ac3      	subs	r3, r0, r3
   1265a:	d0e7      	beq.n	1262c <_malloc_r+0x58>
   1265c:	425a      	negs	r2, r3
   1265e:	50e2      	str	r2, [r4, r3]
   12660:	e7e4      	b.n	1262c <_malloc_r+0x58>
   12662:	684b      	ldr	r3, [r1, #4]
   12664:	6063      	str	r3, [r4, #4]
   12666:	000c      	movs	r4, r1
   12668:	e7ee      	b.n	12648 <_malloc_r+0x74>
   1266a:	000c      	movs	r4, r1
   1266c:	6849      	ldr	r1, [r1, #4]
   1266e:	e7c2      	b.n	125f6 <_malloc_r+0x22>
   12670:	2303      	movs	r3, #3
   12672:	1cc4      	adds	r4, r0, #3
   12674:	439c      	bics	r4, r3
   12676:	42a0      	cmp	r0, r4
   12678:	d0e0      	beq.n	1263c <_malloc_r+0x68>
   1267a:	1a21      	subs	r1, r4, r0
   1267c:	0030      	movs	r0, r6
   1267e:	f000 fd0f 	bl	130a0 <_sbrk_r>
   12682:	1c43      	adds	r3, r0, #1
   12684:	d1da      	bne.n	1263c <_malloc_r+0x68>
   12686:	e7c6      	b.n	12616 <_malloc_r+0x42>
   12688:	200002c0 	.word	0x200002c0
   1268c:	200002c4 	.word	0x200002c4

00012690 <__cvt>:
   12690:	b5f0      	push	{r4, r5, r6, r7, lr}
   12692:	b08b      	sub	sp, #44	; 0x2c
   12694:	0014      	movs	r4, r2
   12696:	1e1d      	subs	r5, r3, #0
   12698:	9912      	ldr	r1, [sp, #72]	; 0x48
   1269a:	da53      	bge.n	12744 <__cvt+0xb4>
   1269c:	2480      	movs	r4, #128	; 0x80
   1269e:	0624      	lsls	r4, r4, #24
   126a0:	191b      	adds	r3, r3, r4
   126a2:	001d      	movs	r5, r3
   126a4:	0014      	movs	r4, r2
   126a6:	232d      	movs	r3, #45	; 0x2d
   126a8:	700b      	strb	r3, [r1, #0]
   126aa:	2320      	movs	r3, #32
   126ac:	9e14      	ldr	r6, [sp, #80]	; 0x50
   126ae:	2203      	movs	r2, #3
   126b0:	439e      	bics	r6, r3
   126b2:	2e46      	cmp	r6, #70	; 0x46
   126b4:	d007      	beq.n	126c6 <__cvt+0x36>
   126b6:	0033      	movs	r3, r6
   126b8:	3b45      	subs	r3, #69	; 0x45
   126ba:	4259      	negs	r1, r3
   126bc:	414b      	adcs	r3, r1
   126be:	9910      	ldr	r1, [sp, #64]	; 0x40
   126c0:	3a01      	subs	r2, #1
   126c2:	18cb      	adds	r3, r1, r3
   126c4:	9310      	str	r3, [sp, #64]	; 0x40
   126c6:	ab09      	add	r3, sp, #36	; 0x24
   126c8:	9304      	str	r3, [sp, #16]
   126ca:	ab08      	add	r3, sp, #32
   126cc:	9303      	str	r3, [sp, #12]
   126ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   126d0:	9200      	str	r2, [sp, #0]
   126d2:	9302      	str	r3, [sp, #8]
   126d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   126d6:	0022      	movs	r2, r4
   126d8:	9301      	str	r3, [sp, #4]
   126da:	002b      	movs	r3, r5
   126dc:	f001 f820 	bl	13720 <_dtoa_r>
   126e0:	0007      	movs	r7, r0
   126e2:	2e47      	cmp	r6, #71	; 0x47
   126e4:	d102      	bne.n	126ec <__cvt+0x5c>
   126e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   126e8:	07db      	lsls	r3, r3, #31
   126ea:	d524      	bpl.n	12736 <__cvt+0xa6>
   126ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   126ee:	18fb      	adds	r3, r7, r3
   126f0:	9307      	str	r3, [sp, #28]
   126f2:	2e46      	cmp	r6, #70	; 0x46
   126f4:	d114      	bne.n	12720 <__cvt+0x90>
   126f6:	783b      	ldrb	r3, [r7, #0]
   126f8:	2b30      	cmp	r3, #48	; 0x30
   126fa:	d10c      	bne.n	12716 <__cvt+0x86>
   126fc:	2200      	movs	r2, #0
   126fe:	2300      	movs	r3, #0
   12700:	0020      	movs	r0, r4
   12702:	0029      	movs	r1, r5
   12704:	f003 f854 	bl	157b0 <__aeabi_dcmpeq>
   12708:	2800      	cmp	r0, #0
   1270a:	d104      	bne.n	12716 <__cvt+0x86>
   1270c:	2301      	movs	r3, #1
   1270e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12710:	1a9b      	subs	r3, r3, r2
   12712:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12714:	6013      	str	r3, [r2, #0]
   12716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12718:	9a07      	ldr	r2, [sp, #28]
   1271a:	681b      	ldr	r3, [r3, #0]
   1271c:	18d3      	adds	r3, r2, r3
   1271e:	9307      	str	r3, [sp, #28]
   12720:	2200      	movs	r2, #0
   12722:	2300      	movs	r3, #0
   12724:	0020      	movs	r0, r4
   12726:	0029      	movs	r1, r5
   12728:	f003 f842 	bl	157b0 <__aeabi_dcmpeq>
   1272c:	2230      	movs	r2, #48	; 0x30
   1272e:	2800      	cmp	r0, #0
   12730:	d00d      	beq.n	1274e <__cvt+0xbe>
   12732:	9b07      	ldr	r3, [sp, #28]
   12734:	9309      	str	r3, [sp, #36]	; 0x24
   12736:	0038      	movs	r0, r7
   12738:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1273a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1273c:	1bdb      	subs	r3, r3, r7
   1273e:	6013      	str	r3, [r2, #0]
   12740:	b00b      	add	sp, #44	; 0x2c
   12742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12744:	2300      	movs	r3, #0
   12746:	e7af      	b.n	126a8 <__cvt+0x18>
   12748:	1c59      	adds	r1, r3, #1
   1274a:	9109      	str	r1, [sp, #36]	; 0x24
   1274c:	701a      	strb	r2, [r3, #0]
   1274e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12750:	9907      	ldr	r1, [sp, #28]
   12752:	4299      	cmp	r1, r3
   12754:	d8f8      	bhi.n	12748 <__cvt+0xb8>
   12756:	e7ee      	b.n	12736 <__cvt+0xa6>

00012758 <__exponent>:
   12758:	b5f0      	push	{r4, r5, r6, r7, lr}
   1275a:	232b      	movs	r3, #43	; 0x2b
   1275c:	b085      	sub	sp, #20
   1275e:	0007      	movs	r7, r0
   12760:	000c      	movs	r4, r1
   12762:	7002      	strb	r2, [r0, #0]
   12764:	1c86      	adds	r6, r0, #2
   12766:	2900      	cmp	r1, #0
   12768:	da01      	bge.n	1276e <__exponent+0x16>
   1276a:	232d      	movs	r3, #45	; 0x2d
   1276c:	424c      	negs	r4, r1
   1276e:	707b      	strb	r3, [r7, #1]
   12770:	2c09      	cmp	r4, #9
   12772:	dd23      	ble.n	127bc <__exponent+0x64>
   12774:	ab02      	add	r3, sp, #8
   12776:	1ddd      	adds	r5, r3, #7
   12778:	1e6b      	subs	r3, r5, #1
   1277a:	0020      	movs	r0, r4
   1277c:	210a      	movs	r1, #10
   1277e:	9301      	str	r3, [sp, #4]
   12780:	f003 f800 	bl	15784 <__aeabi_idivmod>
   12784:	1e6b      	subs	r3, r5, #1
   12786:	3130      	adds	r1, #48	; 0x30
   12788:	7019      	strb	r1, [r3, #0]
   1278a:	0020      	movs	r0, r4
   1278c:	210a      	movs	r1, #10
   1278e:	f002 ff13 	bl	155b8 <__divsi3>
   12792:	0004      	movs	r4, r0
   12794:	2809      	cmp	r0, #9
   12796:	dc0a      	bgt.n	127ae <__exponent+0x56>
   12798:	3d02      	subs	r5, #2
   1279a:	3430      	adds	r4, #48	; 0x30
   1279c:	702c      	strb	r4, [r5, #0]
   1279e:	ab02      	add	r3, sp, #8
   127a0:	3307      	adds	r3, #7
   127a2:	0030      	movs	r0, r6
   127a4:	42ab      	cmp	r3, r5
   127a6:	d804      	bhi.n	127b2 <__exponent+0x5a>
   127a8:	1bc0      	subs	r0, r0, r7
   127aa:	b005      	add	sp, #20
   127ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127ae:	9d01      	ldr	r5, [sp, #4]
   127b0:	e7e2      	b.n	12778 <__exponent+0x20>
   127b2:	782b      	ldrb	r3, [r5, #0]
   127b4:	3501      	adds	r5, #1
   127b6:	7033      	strb	r3, [r6, #0]
   127b8:	3601      	adds	r6, #1
   127ba:	e7f0      	b.n	1279e <__exponent+0x46>
   127bc:	2330      	movs	r3, #48	; 0x30
   127be:	18e4      	adds	r4, r4, r3
   127c0:	7033      	strb	r3, [r6, #0]
   127c2:	1cb0      	adds	r0, r6, #2
   127c4:	7074      	strb	r4, [r6, #1]
   127c6:	e7ef      	b.n	127a8 <__exponent+0x50>

000127c8 <_printf_float>:
   127c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   127ca:	b095      	sub	sp, #84	; 0x54
   127cc:	000c      	movs	r4, r1
   127ce:	920a      	str	r2, [sp, #40]	; 0x28
   127d0:	930b      	str	r3, [sp, #44]	; 0x2c
   127d2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   127d4:	9009      	str	r0, [sp, #36]	; 0x24
   127d6:	f001 ff19 	bl	1460c <_localeconv_r>
   127da:	6803      	ldr	r3, [r0, #0]
   127dc:	0018      	movs	r0, r3
   127de:	930d      	str	r3, [sp, #52]	; 0x34
   127e0:	f000 fd77 	bl	132d2 <strlen>
   127e4:	2300      	movs	r3, #0
   127e6:	9312      	str	r3, [sp, #72]	; 0x48
   127e8:	6823      	ldr	r3, [r4, #0]
   127ea:	900e      	str	r0, [sp, #56]	; 0x38
   127ec:	930c      	str	r3, [sp, #48]	; 0x30
   127ee:	990c      	ldr	r1, [sp, #48]	; 0x30
   127f0:	7e27      	ldrb	r7, [r4, #24]
   127f2:	682b      	ldr	r3, [r5, #0]
   127f4:	2207      	movs	r2, #7
   127f6:	05c9      	lsls	r1, r1, #23
   127f8:	d547      	bpl.n	1288a <_printf_float+0xc2>
   127fa:	189b      	adds	r3, r3, r2
   127fc:	4393      	bics	r3, r2
   127fe:	001a      	movs	r2, r3
   12800:	3208      	adds	r2, #8
   12802:	602a      	str	r2, [r5, #0]
   12804:	681a      	ldr	r2, [r3, #0]
   12806:	685b      	ldr	r3, [r3, #4]
   12808:	64a2      	str	r2, [r4, #72]	; 0x48
   1280a:	64e3      	str	r3, [r4, #76]	; 0x4c
   1280c:	2201      	movs	r2, #1
   1280e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   12810:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   12812:	006b      	lsls	r3, r5, #1
   12814:	085b      	lsrs	r3, r3, #1
   12816:	930f      	str	r3, [sp, #60]	; 0x3c
   12818:	4252      	negs	r2, r2
   1281a:	4ba7      	ldr	r3, [pc, #668]	; (12ab8 <_printf_float+0x2f0>)
   1281c:	0030      	movs	r0, r6
   1281e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12820:	f004 ffb0 	bl	17784 <__aeabi_dcmpun>
   12824:	2800      	cmp	r0, #0
   12826:	d000      	beq.n	1282a <_printf_float+0x62>
   12828:	e206      	b.n	12c38 <_printf_float+0x470>
   1282a:	2201      	movs	r2, #1
   1282c:	4ba2      	ldr	r3, [pc, #648]	; (12ab8 <_printf_float+0x2f0>)
   1282e:	4252      	negs	r2, r2
   12830:	0030      	movs	r0, r6
   12832:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12834:	f002 ffcc 	bl	157d0 <__aeabi_dcmple>
   12838:	2800      	cmp	r0, #0
   1283a:	d000      	beq.n	1283e <_printf_float+0x76>
   1283c:	e1fc      	b.n	12c38 <_printf_float+0x470>
   1283e:	2200      	movs	r2, #0
   12840:	2300      	movs	r3, #0
   12842:	0030      	movs	r0, r6
   12844:	0029      	movs	r1, r5
   12846:	f002 ffb9 	bl	157bc <__aeabi_dcmplt>
   1284a:	2800      	cmp	r0, #0
   1284c:	d003      	beq.n	12856 <_printf_float+0x8e>
   1284e:	0023      	movs	r3, r4
   12850:	222d      	movs	r2, #45	; 0x2d
   12852:	3343      	adds	r3, #67	; 0x43
   12854:	701a      	strb	r2, [r3, #0]
   12856:	4d99      	ldr	r5, [pc, #612]	; (12abc <_printf_float+0x2f4>)
   12858:	2f47      	cmp	r7, #71	; 0x47
   1285a:	d800      	bhi.n	1285e <_printf_float+0x96>
   1285c:	4d98      	ldr	r5, [pc, #608]	; (12ac0 <_printf_float+0x2f8>)
   1285e:	2303      	movs	r3, #3
   12860:	2600      	movs	r6, #0
   12862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12864:	6123      	str	r3, [r4, #16]
   12866:	3301      	adds	r3, #1
   12868:	439a      	bics	r2, r3
   1286a:	6022      	str	r2, [r4, #0]
   1286c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1286e:	aa13      	add	r2, sp, #76	; 0x4c
   12870:	9300      	str	r3, [sp, #0]
   12872:	0021      	movs	r1, r4
   12874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12876:	9809      	ldr	r0, [sp, #36]	; 0x24
   12878:	f000 f9f2 	bl	12c60 <_printf_common>
   1287c:	1c43      	adds	r3, r0, #1
   1287e:	d000      	beq.n	12882 <_printf_float+0xba>
   12880:	e09c      	b.n	129bc <_printf_float+0x1f4>
   12882:	2001      	movs	r0, #1
   12884:	4240      	negs	r0, r0
   12886:	b015      	add	sp, #84	; 0x54
   12888:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1288a:	3307      	adds	r3, #7
   1288c:	e7b6      	b.n	127fc <_printf_float+0x34>
   1288e:	2380      	movs	r3, #128	; 0x80
   12890:	6862      	ldr	r2, [r4, #4]
   12892:	00db      	lsls	r3, r3, #3
   12894:	1c51      	adds	r1, r2, #1
   12896:	d145      	bne.n	12924 <_printf_float+0x15c>
   12898:	3207      	adds	r2, #7
   1289a:	6062      	str	r2, [r4, #4]
   1289c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1289e:	2100      	movs	r1, #0
   128a0:	4313      	orrs	r3, r2
   128a2:	aa12      	add	r2, sp, #72	; 0x48
   128a4:	9205      	str	r2, [sp, #20]
   128a6:	aa11      	add	r2, sp, #68	; 0x44
   128a8:	9203      	str	r2, [sp, #12]
   128aa:	2223      	movs	r2, #35	; 0x23
   128ac:	6023      	str	r3, [r4, #0]
   128ae:	9106      	str	r1, [sp, #24]
   128b0:	9301      	str	r3, [sp, #4]
   128b2:	a908      	add	r1, sp, #32
   128b4:	6863      	ldr	r3, [r4, #4]
   128b6:	1852      	adds	r2, r2, r1
   128b8:	9202      	str	r2, [sp, #8]
   128ba:	9300      	str	r3, [sp, #0]
   128bc:	0032      	movs	r2, r6
   128be:	002b      	movs	r3, r5
   128c0:	9704      	str	r7, [sp, #16]
   128c2:	9809      	ldr	r0, [sp, #36]	; 0x24
   128c4:	f7ff fee4 	bl	12690 <__cvt>
   128c8:	2320      	movs	r3, #32
   128ca:	003a      	movs	r2, r7
   128cc:	0005      	movs	r5, r0
   128ce:	439a      	bics	r2, r3
   128d0:	2a47      	cmp	r2, #71	; 0x47
   128d2:	d107      	bne.n	128e4 <_printf_float+0x11c>
   128d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   128d6:	1cda      	adds	r2, r3, #3
   128d8:	db02      	blt.n	128e0 <_printf_float+0x118>
   128da:	6862      	ldr	r2, [r4, #4]
   128dc:	4293      	cmp	r3, r2
   128de:	dd5b      	ble.n	12998 <_printf_float+0x1d0>
   128e0:	3f02      	subs	r7, #2
   128e2:	b2ff      	uxtb	r7, r7
   128e4:	9911      	ldr	r1, [sp, #68]	; 0x44
   128e6:	2f65      	cmp	r7, #101	; 0x65
   128e8:	d83b      	bhi.n	12962 <_printf_float+0x19a>
   128ea:	0020      	movs	r0, r4
   128ec:	3901      	subs	r1, #1
   128ee:	003a      	movs	r2, r7
   128f0:	3050      	adds	r0, #80	; 0x50
   128f2:	9111      	str	r1, [sp, #68]	; 0x44
   128f4:	f7ff ff30 	bl	12758 <__exponent>
   128f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   128fa:	0006      	movs	r6, r0
   128fc:	1883      	adds	r3, r0, r2
   128fe:	6123      	str	r3, [r4, #16]
   12900:	2a01      	cmp	r2, #1
   12902:	dc02      	bgt.n	1290a <_printf_float+0x142>
   12904:	6822      	ldr	r2, [r4, #0]
   12906:	07d2      	lsls	r2, r2, #31
   12908:	d501      	bpl.n	1290e <_printf_float+0x146>
   1290a:	3301      	adds	r3, #1
   1290c:	6123      	str	r3, [r4, #16]
   1290e:	2323      	movs	r3, #35	; 0x23
   12910:	aa08      	add	r2, sp, #32
   12912:	189b      	adds	r3, r3, r2
   12914:	781b      	ldrb	r3, [r3, #0]
   12916:	2b00      	cmp	r3, #0
   12918:	d0a8      	beq.n	1286c <_printf_float+0xa4>
   1291a:	0023      	movs	r3, r4
   1291c:	222d      	movs	r2, #45	; 0x2d
   1291e:	3343      	adds	r3, #67	; 0x43
   12920:	701a      	strb	r2, [r3, #0]
   12922:	e7a3      	b.n	1286c <_printf_float+0xa4>
   12924:	2f67      	cmp	r7, #103	; 0x67
   12926:	d001      	beq.n	1292c <_printf_float+0x164>
   12928:	2f47      	cmp	r7, #71	; 0x47
   1292a:	d1b7      	bne.n	1289c <_printf_float+0xd4>
   1292c:	2a00      	cmp	r2, #0
   1292e:	d016      	beq.n	1295e <_printf_float+0x196>
   12930:	990c      	ldr	r1, [sp, #48]	; 0x30
   12932:	a808      	add	r0, sp, #32
   12934:	430b      	orrs	r3, r1
   12936:	2100      	movs	r1, #0
   12938:	9106      	str	r1, [sp, #24]
   1293a:	a912      	add	r1, sp, #72	; 0x48
   1293c:	9105      	str	r1, [sp, #20]
   1293e:	a911      	add	r1, sp, #68	; 0x44
   12940:	9103      	str	r1, [sp, #12]
   12942:	2123      	movs	r1, #35	; 0x23
   12944:	1809      	adds	r1, r1, r0
   12946:	6023      	str	r3, [r4, #0]
   12948:	9301      	str	r3, [sp, #4]
   1294a:	9200      	str	r2, [sp, #0]
   1294c:	002b      	movs	r3, r5
   1294e:	9704      	str	r7, [sp, #16]
   12950:	9102      	str	r1, [sp, #8]
   12952:	0032      	movs	r2, r6
   12954:	9809      	ldr	r0, [sp, #36]	; 0x24
   12956:	f7ff fe9b 	bl	12690 <__cvt>
   1295a:	0005      	movs	r5, r0
   1295c:	e7ba      	b.n	128d4 <_printf_float+0x10c>
   1295e:	2201      	movs	r2, #1
   12960:	e79b      	b.n	1289a <_printf_float+0xd2>
   12962:	2f66      	cmp	r7, #102	; 0x66
   12964:	d119      	bne.n	1299a <_printf_float+0x1d2>
   12966:	6863      	ldr	r3, [r4, #4]
   12968:	2900      	cmp	r1, #0
   1296a:	dd0c      	ble.n	12986 <_printf_float+0x1be>
   1296c:	6121      	str	r1, [r4, #16]
   1296e:	2b00      	cmp	r3, #0
   12970:	d102      	bne.n	12978 <_printf_float+0x1b0>
   12972:	6822      	ldr	r2, [r4, #0]
   12974:	07d2      	lsls	r2, r2, #31
   12976:	d502      	bpl.n	1297e <_printf_float+0x1b6>
   12978:	3301      	adds	r3, #1
   1297a:	185b      	adds	r3, r3, r1
   1297c:	6123      	str	r3, [r4, #16]
   1297e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12980:	2600      	movs	r6, #0
   12982:	65a3      	str	r3, [r4, #88]	; 0x58
   12984:	e7c3      	b.n	1290e <_printf_float+0x146>
   12986:	2b00      	cmp	r3, #0
   12988:	d103      	bne.n	12992 <_printf_float+0x1ca>
   1298a:	2201      	movs	r2, #1
   1298c:	6821      	ldr	r1, [r4, #0]
   1298e:	4211      	tst	r1, r2
   12990:	d000      	beq.n	12994 <_printf_float+0x1cc>
   12992:	1c9a      	adds	r2, r3, #2
   12994:	6122      	str	r2, [r4, #16]
   12996:	e7f2      	b.n	1297e <_printf_float+0x1b6>
   12998:	2767      	movs	r7, #103	; 0x67
   1299a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1299c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1299e:	4283      	cmp	r3, r0
   129a0:	db05      	blt.n	129ae <_printf_float+0x1e6>
   129a2:	6822      	ldr	r2, [r4, #0]
   129a4:	6123      	str	r3, [r4, #16]
   129a6:	07d2      	lsls	r2, r2, #31
   129a8:	d5e9      	bpl.n	1297e <_printf_float+0x1b6>
   129aa:	3301      	adds	r3, #1
   129ac:	e7e6      	b.n	1297c <_printf_float+0x1b4>
   129ae:	2201      	movs	r2, #1
   129b0:	2b00      	cmp	r3, #0
   129b2:	dc01      	bgt.n	129b8 <_printf_float+0x1f0>
   129b4:	1892      	adds	r2, r2, r2
   129b6:	1ad2      	subs	r2, r2, r3
   129b8:	1812      	adds	r2, r2, r0
   129ba:	e7eb      	b.n	12994 <_printf_float+0x1cc>
   129bc:	6822      	ldr	r2, [r4, #0]
   129be:	0553      	lsls	r3, r2, #21
   129c0:	d408      	bmi.n	129d4 <_printf_float+0x20c>
   129c2:	6923      	ldr	r3, [r4, #16]
   129c4:	002a      	movs	r2, r5
   129c6:	990a      	ldr	r1, [sp, #40]	; 0x28
   129c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   129ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   129cc:	47a8      	blx	r5
   129ce:	1c43      	adds	r3, r0, #1
   129d0:	d129      	bne.n	12a26 <_printf_float+0x25e>
   129d2:	e756      	b.n	12882 <_printf_float+0xba>
   129d4:	2f65      	cmp	r7, #101	; 0x65
   129d6:	d800      	bhi.n	129da <_printf_float+0x212>
   129d8:	e0dc      	b.n	12b94 <_printf_float+0x3cc>
   129da:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   129dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   129de:	2200      	movs	r2, #0
   129e0:	2300      	movs	r3, #0
   129e2:	f002 fee5 	bl	157b0 <__aeabi_dcmpeq>
   129e6:	2800      	cmp	r0, #0
   129e8:	d035      	beq.n	12a56 <_printf_float+0x28e>
   129ea:	2301      	movs	r3, #1
   129ec:	4a35      	ldr	r2, [pc, #212]	; (12ac4 <_printf_float+0x2fc>)
   129ee:	990a      	ldr	r1, [sp, #40]	; 0x28
   129f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   129f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   129f4:	47a8      	blx	r5
   129f6:	1c43      	adds	r3, r0, #1
   129f8:	d100      	bne.n	129fc <_printf_float+0x234>
   129fa:	e742      	b.n	12882 <_printf_float+0xba>
   129fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   129fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12a00:	4293      	cmp	r3, r2
   12a02:	db02      	blt.n	12a0a <_printf_float+0x242>
   12a04:	6823      	ldr	r3, [r4, #0]
   12a06:	07db      	lsls	r3, r3, #31
   12a08:	d50d      	bpl.n	12a26 <_printf_float+0x25e>
   12a0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   12a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12a0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12a10:	990a      	ldr	r1, [sp, #40]	; 0x28
   12a12:	9809      	ldr	r0, [sp, #36]	; 0x24
   12a14:	47a8      	blx	r5
   12a16:	2500      	movs	r5, #0
   12a18:	1c43      	adds	r3, r0, #1
   12a1a:	d100      	bne.n	12a1e <_printf_float+0x256>
   12a1c:	e731      	b.n	12882 <_printf_float+0xba>
   12a1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12a20:	3b01      	subs	r3, #1
   12a22:	429d      	cmp	r5, r3
   12a24:	db0b      	blt.n	12a3e <_printf_float+0x276>
   12a26:	6823      	ldr	r3, [r4, #0]
   12a28:	2500      	movs	r5, #0
   12a2a:	079b      	lsls	r3, r3, #30
   12a2c:	d500      	bpl.n	12a30 <_printf_float+0x268>
   12a2e:	e0fd      	b.n	12c2c <_printf_float+0x464>
   12a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12a32:	68e0      	ldr	r0, [r4, #12]
   12a34:	4298      	cmp	r0, r3
   12a36:	db00      	blt.n	12a3a <_printf_float+0x272>
   12a38:	e725      	b.n	12886 <_printf_float+0xbe>
   12a3a:	0018      	movs	r0, r3
   12a3c:	e723      	b.n	12886 <_printf_float+0xbe>
   12a3e:	0022      	movs	r2, r4
   12a40:	2301      	movs	r3, #1
   12a42:	321a      	adds	r2, #26
   12a44:	990a      	ldr	r1, [sp, #40]	; 0x28
   12a46:	9809      	ldr	r0, [sp, #36]	; 0x24
   12a48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12a4a:	47b0      	blx	r6
   12a4c:	1c43      	adds	r3, r0, #1
   12a4e:	d100      	bne.n	12a52 <_printf_float+0x28a>
   12a50:	e717      	b.n	12882 <_printf_float+0xba>
   12a52:	3501      	adds	r5, #1
   12a54:	e7e3      	b.n	12a1e <_printf_float+0x256>
   12a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12a58:	2b00      	cmp	r3, #0
   12a5a:	dc35      	bgt.n	12ac8 <_printf_float+0x300>
   12a5c:	2301      	movs	r3, #1
   12a5e:	4a19      	ldr	r2, [pc, #100]	; (12ac4 <_printf_float+0x2fc>)
   12a60:	990a      	ldr	r1, [sp, #40]	; 0x28
   12a62:	9809      	ldr	r0, [sp, #36]	; 0x24
   12a64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12a66:	47b0      	blx	r6
   12a68:	1c43      	adds	r3, r0, #1
   12a6a:	d100      	bne.n	12a6e <_printf_float+0x2a6>
   12a6c:	e709      	b.n	12882 <_printf_float+0xba>
   12a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12a70:	2b00      	cmp	r3, #0
   12a72:	d105      	bne.n	12a80 <_printf_float+0x2b8>
   12a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12a76:	2b00      	cmp	r3, #0
   12a78:	d102      	bne.n	12a80 <_printf_float+0x2b8>
   12a7a:	6823      	ldr	r3, [r4, #0]
   12a7c:	07db      	lsls	r3, r3, #31
   12a7e:	d5d2      	bpl.n	12a26 <_printf_float+0x25e>
   12a80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12a84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12a86:	990a      	ldr	r1, [sp, #40]	; 0x28
   12a88:	9809      	ldr	r0, [sp, #36]	; 0x24
   12a8a:	47b0      	blx	r6
   12a8c:	2600      	movs	r6, #0
   12a8e:	1c43      	adds	r3, r0, #1
   12a90:	d100      	bne.n	12a94 <_printf_float+0x2cc>
   12a92:	e6f6      	b.n	12882 <_printf_float+0xba>
   12a94:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12a96:	425b      	negs	r3, r3
   12a98:	429e      	cmp	r6, r3
   12a9a:	db01      	blt.n	12aa0 <_printf_float+0x2d8>
   12a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12a9e:	e791      	b.n	129c4 <_printf_float+0x1fc>
   12aa0:	0022      	movs	r2, r4
   12aa2:	2301      	movs	r3, #1
   12aa4:	321a      	adds	r2, #26
   12aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
   12aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
   12aaa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   12aac:	47b8      	blx	r7
   12aae:	1c43      	adds	r3, r0, #1
   12ab0:	d100      	bne.n	12ab4 <_printf_float+0x2ec>
   12ab2:	e6e6      	b.n	12882 <_printf_float+0xba>
   12ab4:	3601      	adds	r6, #1
   12ab6:	e7ed      	b.n	12a94 <_printf_float+0x2cc>
   12ab8:	7fefffff 	.word	0x7fefffff
   12abc:	00019fa2 	.word	0x00019fa2
   12ac0:	00019f9e 	.word	0x00019f9e
   12ac4:	00019fae 	.word	0x00019fae
   12ac8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   12aca:	9e12      	ldr	r6, [sp, #72]	; 0x48
   12acc:	429e      	cmp	r6, r3
   12ace:	dd00      	ble.n	12ad2 <_printf_float+0x30a>
   12ad0:	001e      	movs	r6, r3
   12ad2:	2e00      	cmp	r6, #0
   12ad4:	dc35      	bgt.n	12b42 <_printf_float+0x37a>
   12ad6:	2300      	movs	r3, #0
   12ad8:	930c      	str	r3, [sp, #48]	; 0x30
   12ada:	43f3      	mvns	r3, r6
   12adc:	17db      	asrs	r3, r3, #31
   12ade:	930f      	str	r3, [sp, #60]	; 0x3c
   12ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12ae2:	6da7      	ldr	r7, [r4, #88]	; 0x58
   12ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12ae6:	4033      	ands	r3, r6
   12ae8:	1afb      	subs	r3, r7, r3
   12aea:	429a      	cmp	r2, r3
   12aec:	db32      	blt.n	12b54 <_printf_float+0x38c>
   12aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12af0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12af2:	4293      	cmp	r3, r2
   12af4:	db3c      	blt.n	12b70 <_printf_float+0x3a8>
   12af6:	6823      	ldr	r3, [r4, #0]
   12af8:	07db      	lsls	r3, r3, #31
   12afa:	d439      	bmi.n	12b70 <_printf_float+0x3a8>
   12afc:	9e12      	ldr	r6, [sp, #72]	; 0x48
   12afe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12b00:	1bf3      	subs	r3, r6, r7
   12b02:	1ab6      	subs	r6, r6, r2
   12b04:	429e      	cmp	r6, r3
   12b06:	dd00      	ble.n	12b0a <_printf_float+0x342>
   12b08:	001e      	movs	r6, r3
   12b0a:	2e00      	cmp	r6, #0
   12b0c:	dc39      	bgt.n	12b82 <_printf_float+0x3ba>
   12b0e:	43f7      	mvns	r7, r6
   12b10:	2500      	movs	r5, #0
   12b12:	17fb      	asrs	r3, r7, #31
   12b14:	930c      	str	r3, [sp, #48]	; 0x30
   12b16:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12b18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12b1a:	990c      	ldr	r1, [sp, #48]	; 0x30
   12b1c:	1a9b      	subs	r3, r3, r2
   12b1e:	0032      	movs	r2, r6
   12b20:	400a      	ands	r2, r1
   12b22:	1a9b      	subs	r3, r3, r2
   12b24:	429d      	cmp	r5, r3
   12b26:	db00      	blt.n	12b2a <_printf_float+0x362>
   12b28:	e77d      	b.n	12a26 <_printf_float+0x25e>
   12b2a:	0022      	movs	r2, r4
   12b2c:	2301      	movs	r3, #1
   12b2e:	321a      	adds	r2, #26
   12b30:	990a      	ldr	r1, [sp, #40]	; 0x28
   12b32:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b34:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   12b36:	47b8      	blx	r7
   12b38:	1c43      	adds	r3, r0, #1
   12b3a:	d100      	bne.n	12b3e <_printf_float+0x376>
   12b3c:	e6a1      	b.n	12882 <_printf_float+0xba>
   12b3e:	3501      	adds	r5, #1
   12b40:	e7e9      	b.n	12b16 <_printf_float+0x34e>
   12b42:	0033      	movs	r3, r6
   12b44:	002a      	movs	r2, r5
   12b46:	990a      	ldr	r1, [sp, #40]	; 0x28
   12b48:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b4a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   12b4c:	47b8      	blx	r7
   12b4e:	1c43      	adds	r3, r0, #1
   12b50:	d1c1      	bne.n	12ad6 <_printf_float+0x30e>
   12b52:	e696      	b.n	12882 <_printf_float+0xba>
   12b54:	0022      	movs	r2, r4
   12b56:	2301      	movs	r3, #1
   12b58:	321a      	adds	r2, #26
   12b5a:	990a      	ldr	r1, [sp, #40]	; 0x28
   12b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b5e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   12b60:	47b8      	blx	r7
   12b62:	1c43      	adds	r3, r0, #1
   12b64:	d100      	bne.n	12b68 <_printf_float+0x3a0>
   12b66:	e68c      	b.n	12882 <_printf_float+0xba>
   12b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b6a:	3301      	adds	r3, #1
   12b6c:	930c      	str	r3, [sp, #48]	; 0x30
   12b6e:	e7b7      	b.n	12ae0 <_printf_float+0x318>
   12b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12b74:	990a      	ldr	r1, [sp, #40]	; 0x28
   12b76:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12b7a:	47b0      	blx	r6
   12b7c:	1c43      	adds	r3, r0, #1
   12b7e:	d1bd      	bne.n	12afc <_printf_float+0x334>
   12b80:	e67f      	b.n	12882 <_printf_float+0xba>
   12b82:	19ea      	adds	r2, r5, r7
   12b84:	0033      	movs	r3, r6
   12b86:	990a      	ldr	r1, [sp, #40]	; 0x28
   12b88:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   12b8c:	47a8      	blx	r5
   12b8e:	1c43      	adds	r3, r0, #1
   12b90:	d1bd      	bne.n	12b0e <_printf_float+0x346>
   12b92:	e676      	b.n	12882 <_printf_float+0xba>
   12b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12b96:	2b01      	cmp	r3, #1
   12b98:	dc02      	bgt.n	12ba0 <_printf_float+0x3d8>
   12b9a:	2301      	movs	r3, #1
   12b9c:	421a      	tst	r2, r3
   12b9e:	d038      	beq.n	12c12 <_printf_float+0x44a>
   12ba0:	2301      	movs	r3, #1
   12ba2:	002a      	movs	r2, r5
   12ba4:	990a      	ldr	r1, [sp, #40]	; 0x28
   12ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ba8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   12baa:	47b8      	blx	r7
   12bac:	1c43      	adds	r3, r0, #1
   12bae:	d100      	bne.n	12bb2 <_printf_float+0x3ea>
   12bb0:	e667      	b.n	12882 <_printf_float+0xba>
   12bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12bb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
   12bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
   12bba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   12bbc:	47b8      	blx	r7
   12bbe:	1c43      	adds	r3, r0, #1
   12bc0:	d100      	bne.n	12bc4 <_printf_float+0x3fc>
   12bc2:	e65e      	b.n	12882 <_printf_float+0xba>
   12bc4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   12bc6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   12bc8:	2200      	movs	r2, #0
   12bca:	2300      	movs	r3, #0
   12bcc:	f002 fdf0 	bl	157b0 <__aeabi_dcmpeq>
   12bd0:	2800      	cmp	r0, #0
   12bd2:	d008      	beq.n	12be6 <_printf_float+0x41e>
   12bd4:	2500      	movs	r5, #0
   12bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12bd8:	3b01      	subs	r3, #1
   12bda:	429d      	cmp	r5, r3
   12bdc:	db0d      	blt.n	12bfa <_printf_float+0x432>
   12bde:	0022      	movs	r2, r4
   12be0:	0033      	movs	r3, r6
   12be2:	3250      	adds	r2, #80	; 0x50
   12be4:	e6ef      	b.n	129c6 <_printf_float+0x1fe>
   12be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12be8:	1c6a      	adds	r2, r5, #1
   12bea:	3b01      	subs	r3, #1
   12bec:	990a      	ldr	r1, [sp, #40]	; 0x28
   12bee:	9809      	ldr	r0, [sp, #36]	; 0x24
   12bf0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   12bf2:	47a8      	blx	r5
   12bf4:	1c43      	adds	r3, r0, #1
   12bf6:	d1f2      	bne.n	12bde <_printf_float+0x416>
   12bf8:	e643      	b.n	12882 <_printf_float+0xba>
   12bfa:	0022      	movs	r2, r4
   12bfc:	2301      	movs	r3, #1
   12bfe:	321a      	adds	r2, #26
   12c00:	990a      	ldr	r1, [sp, #40]	; 0x28
   12c02:	9809      	ldr	r0, [sp, #36]	; 0x24
   12c04:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   12c06:	47b8      	blx	r7
   12c08:	1c43      	adds	r3, r0, #1
   12c0a:	d100      	bne.n	12c0e <_printf_float+0x446>
   12c0c:	e639      	b.n	12882 <_printf_float+0xba>
   12c0e:	3501      	adds	r5, #1
   12c10:	e7e1      	b.n	12bd6 <_printf_float+0x40e>
   12c12:	002a      	movs	r2, r5
   12c14:	e7ea      	b.n	12bec <_printf_float+0x424>
   12c16:	0022      	movs	r2, r4
   12c18:	2301      	movs	r3, #1
   12c1a:	3219      	adds	r2, #25
   12c1c:	990a      	ldr	r1, [sp, #40]	; 0x28
   12c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12c20:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12c22:	47b0      	blx	r6
   12c24:	1c43      	adds	r3, r0, #1
   12c26:	d100      	bne.n	12c2a <_printf_float+0x462>
   12c28:	e62b      	b.n	12882 <_printf_float+0xba>
   12c2a:	3501      	adds	r5, #1
   12c2c:	68e3      	ldr	r3, [r4, #12]
   12c2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12c30:	1a9b      	subs	r3, r3, r2
   12c32:	429d      	cmp	r5, r3
   12c34:	dbef      	blt.n	12c16 <_printf_float+0x44e>
   12c36:	e6fb      	b.n	12a30 <_printf_float+0x268>
   12c38:	0032      	movs	r2, r6
   12c3a:	002b      	movs	r3, r5
   12c3c:	0030      	movs	r0, r6
   12c3e:	0029      	movs	r1, r5
   12c40:	f004 fda0 	bl	17784 <__aeabi_dcmpun>
   12c44:	2800      	cmp	r0, #0
   12c46:	d100      	bne.n	12c4a <_printf_float+0x482>
   12c48:	e621      	b.n	1288e <_printf_float+0xc6>
   12c4a:	4d03      	ldr	r5, [pc, #12]	; (12c58 <_printf_float+0x490>)
   12c4c:	2f47      	cmp	r7, #71	; 0x47
   12c4e:	d900      	bls.n	12c52 <_printf_float+0x48a>
   12c50:	e605      	b.n	1285e <_printf_float+0x96>
   12c52:	4d02      	ldr	r5, [pc, #8]	; (12c5c <_printf_float+0x494>)
   12c54:	e603      	b.n	1285e <_printf_float+0x96>
   12c56:	46c0      	nop			; (mov r8, r8)
   12c58:	00019faa 	.word	0x00019faa
   12c5c:	00019fa6 	.word	0x00019fa6

00012c60 <_printf_common>:
   12c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12c62:	0015      	movs	r5, r2
   12c64:	9301      	str	r3, [sp, #4]
   12c66:	688a      	ldr	r2, [r1, #8]
   12c68:	690b      	ldr	r3, [r1, #16]
   12c6a:	9000      	str	r0, [sp, #0]
   12c6c:	000c      	movs	r4, r1
   12c6e:	4293      	cmp	r3, r2
   12c70:	da00      	bge.n	12c74 <_printf_common+0x14>
   12c72:	0013      	movs	r3, r2
   12c74:	0022      	movs	r2, r4
   12c76:	602b      	str	r3, [r5, #0]
   12c78:	3243      	adds	r2, #67	; 0x43
   12c7a:	7812      	ldrb	r2, [r2, #0]
   12c7c:	2a00      	cmp	r2, #0
   12c7e:	d001      	beq.n	12c84 <_printf_common+0x24>
   12c80:	3301      	adds	r3, #1
   12c82:	602b      	str	r3, [r5, #0]
   12c84:	6823      	ldr	r3, [r4, #0]
   12c86:	069b      	lsls	r3, r3, #26
   12c88:	d502      	bpl.n	12c90 <_printf_common+0x30>
   12c8a:	682b      	ldr	r3, [r5, #0]
   12c8c:	3302      	adds	r3, #2
   12c8e:	602b      	str	r3, [r5, #0]
   12c90:	2706      	movs	r7, #6
   12c92:	6823      	ldr	r3, [r4, #0]
   12c94:	401f      	ands	r7, r3
   12c96:	d027      	beq.n	12ce8 <_printf_common+0x88>
   12c98:	0023      	movs	r3, r4
   12c9a:	3343      	adds	r3, #67	; 0x43
   12c9c:	781b      	ldrb	r3, [r3, #0]
   12c9e:	1e5a      	subs	r2, r3, #1
   12ca0:	4193      	sbcs	r3, r2
   12ca2:	6822      	ldr	r2, [r4, #0]
   12ca4:	0692      	lsls	r2, r2, #26
   12ca6:	d430      	bmi.n	12d0a <_printf_common+0xaa>
   12ca8:	0022      	movs	r2, r4
   12caa:	9901      	ldr	r1, [sp, #4]
   12cac:	3243      	adds	r2, #67	; 0x43
   12cae:	9800      	ldr	r0, [sp, #0]
   12cb0:	9e08      	ldr	r6, [sp, #32]
   12cb2:	47b0      	blx	r6
   12cb4:	1c43      	adds	r3, r0, #1
   12cb6:	d025      	beq.n	12d04 <_printf_common+0xa4>
   12cb8:	2306      	movs	r3, #6
   12cba:	6820      	ldr	r0, [r4, #0]
   12cbc:	682a      	ldr	r2, [r5, #0]
   12cbe:	68e1      	ldr	r1, [r4, #12]
   12cc0:	4003      	ands	r3, r0
   12cc2:	2500      	movs	r5, #0
   12cc4:	2b04      	cmp	r3, #4
   12cc6:	d103      	bne.n	12cd0 <_printf_common+0x70>
   12cc8:	1a8d      	subs	r5, r1, r2
   12cca:	43eb      	mvns	r3, r5
   12ccc:	17db      	asrs	r3, r3, #31
   12cce:	401d      	ands	r5, r3
   12cd0:	68a3      	ldr	r3, [r4, #8]
   12cd2:	6922      	ldr	r2, [r4, #16]
   12cd4:	4293      	cmp	r3, r2
   12cd6:	dd01      	ble.n	12cdc <_printf_common+0x7c>
   12cd8:	1a9b      	subs	r3, r3, r2
   12cda:	18ed      	adds	r5, r5, r3
   12cdc:	2700      	movs	r7, #0
   12cde:	42bd      	cmp	r5, r7
   12ce0:	d120      	bne.n	12d24 <_printf_common+0xc4>
   12ce2:	2000      	movs	r0, #0
   12ce4:	e010      	b.n	12d08 <_printf_common+0xa8>
   12ce6:	3701      	adds	r7, #1
   12ce8:	68e3      	ldr	r3, [r4, #12]
   12cea:	682a      	ldr	r2, [r5, #0]
   12cec:	1a9b      	subs	r3, r3, r2
   12cee:	429f      	cmp	r7, r3
   12cf0:	dad2      	bge.n	12c98 <_printf_common+0x38>
   12cf2:	0022      	movs	r2, r4
   12cf4:	2301      	movs	r3, #1
   12cf6:	3219      	adds	r2, #25
   12cf8:	9901      	ldr	r1, [sp, #4]
   12cfa:	9800      	ldr	r0, [sp, #0]
   12cfc:	9e08      	ldr	r6, [sp, #32]
   12cfe:	47b0      	blx	r6
   12d00:	1c43      	adds	r3, r0, #1
   12d02:	d1f0      	bne.n	12ce6 <_printf_common+0x86>
   12d04:	2001      	movs	r0, #1
   12d06:	4240      	negs	r0, r0
   12d08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12d0a:	2030      	movs	r0, #48	; 0x30
   12d0c:	18e1      	adds	r1, r4, r3
   12d0e:	3143      	adds	r1, #67	; 0x43
   12d10:	7008      	strb	r0, [r1, #0]
   12d12:	0021      	movs	r1, r4
   12d14:	1c5a      	adds	r2, r3, #1
   12d16:	3145      	adds	r1, #69	; 0x45
   12d18:	7809      	ldrb	r1, [r1, #0]
   12d1a:	18a2      	adds	r2, r4, r2
   12d1c:	3243      	adds	r2, #67	; 0x43
   12d1e:	3302      	adds	r3, #2
   12d20:	7011      	strb	r1, [r2, #0]
   12d22:	e7c1      	b.n	12ca8 <_printf_common+0x48>
   12d24:	0022      	movs	r2, r4
   12d26:	2301      	movs	r3, #1
   12d28:	321a      	adds	r2, #26
   12d2a:	9901      	ldr	r1, [sp, #4]
   12d2c:	9800      	ldr	r0, [sp, #0]
   12d2e:	9e08      	ldr	r6, [sp, #32]
   12d30:	47b0      	blx	r6
   12d32:	1c43      	adds	r3, r0, #1
   12d34:	d0e6      	beq.n	12d04 <_printf_common+0xa4>
   12d36:	3701      	adds	r7, #1
   12d38:	e7d1      	b.n	12cde <_printf_common+0x7e>
	...

00012d3c <_printf_i>:
   12d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d3e:	b08b      	sub	sp, #44	; 0x2c
   12d40:	9206      	str	r2, [sp, #24]
   12d42:	000a      	movs	r2, r1
   12d44:	3243      	adds	r2, #67	; 0x43
   12d46:	9307      	str	r3, [sp, #28]
   12d48:	9005      	str	r0, [sp, #20]
   12d4a:	9204      	str	r2, [sp, #16]
   12d4c:	7e0a      	ldrb	r2, [r1, #24]
   12d4e:	000c      	movs	r4, r1
   12d50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12d52:	2a6e      	cmp	r2, #110	; 0x6e
   12d54:	d100      	bne.n	12d58 <_printf_i+0x1c>
   12d56:	e08f      	b.n	12e78 <_printf_i+0x13c>
   12d58:	d817      	bhi.n	12d8a <_printf_i+0x4e>
   12d5a:	2a63      	cmp	r2, #99	; 0x63
   12d5c:	d02c      	beq.n	12db8 <_printf_i+0x7c>
   12d5e:	d808      	bhi.n	12d72 <_printf_i+0x36>
   12d60:	2a00      	cmp	r2, #0
   12d62:	d100      	bne.n	12d66 <_printf_i+0x2a>
   12d64:	e099      	b.n	12e9a <_printf_i+0x15e>
   12d66:	2a58      	cmp	r2, #88	; 0x58
   12d68:	d054      	beq.n	12e14 <_printf_i+0xd8>
   12d6a:	0026      	movs	r6, r4
   12d6c:	3642      	adds	r6, #66	; 0x42
   12d6e:	7032      	strb	r2, [r6, #0]
   12d70:	e029      	b.n	12dc6 <_printf_i+0x8a>
   12d72:	2a64      	cmp	r2, #100	; 0x64
   12d74:	d001      	beq.n	12d7a <_printf_i+0x3e>
   12d76:	2a69      	cmp	r2, #105	; 0x69
   12d78:	d1f7      	bne.n	12d6a <_printf_i+0x2e>
   12d7a:	6821      	ldr	r1, [r4, #0]
   12d7c:	681a      	ldr	r2, [r3, #0]
   12d7e:	0608      	lsls	r0, r1, #24
   12d80:	d523      	bpl.n	12dca <_printf_i+0x8e>
   12d82:	1d11      	adds	r1, r2, #4
   12d84:	6019      	str	r1, [r3, #0]
   12d86:	6815      	ldr	r5, [r2, #0]
   12d88:	e025      	b.n	12dd6 <_printf_i+0x9a>
   12d8a:	2a73      	cmp	r2, #115	; 0x73
   12d8c:	d100      	bne.n	12d90 <_printf_i+0x54>
   12d8e:	e088      	b.n	12ea2 <_printf_i+0x166>
   12d90:	d808      	bhi.n	12da4 <_printf_i+0x68>
   12d92:	2a6f      	cmp	r2, #111	; 0x6f
   12d94:	d029      	beq.n	12dea <_printf_i+0xae>
   12d96:	2a70      	cmp	r2, #112	; 0x70
   12d98:	d1e7      	bne.n	12d6a <_printf_i+0x2e>
   12d9a:	2220      	movs	r2, #32
   12d9c:	6809      	ldr	r1, [r1, #0]
   12d9e:	430a      	orrs	r2, r1
   12da0:	6022      	str	r2, [r4, #0]
   12da2:	e003      	b.n	12dac <_printf_i+0x70>
   12da4:	2a75      	cmp	r2, #117	; 0x75
   12da6:	d020      	beq.n	12dea <_printf_i+0xae>
   12da8:	2a78      	cmp	r2, #120	; 0x78
   12daa:	d1de      	bne.n	12d6a <_printf_i+0x2e>
   12dac:	0022      	movs	r2, r4
   12dae:	2178      	movs	r1, #120	; 0x78
   12db0:	3245      	adds	r2, #69	; 0x45
   12db2:	7011      	strb	r1, [r2, #0]
   12db4:	4a6c      	ldr	r2, [pc, #432]	; (12f68 <_printf_i+0x22c>)
   12db6:	e030      	b.n	12e1a <_printf_i+0xde>
   12db8:	000e      	movs	r6, r1
   12dba:	681a      	ldr	r2, [r3, #0]
   12dbc:	3642      	adds	r6, #66	; 0x42
   12dbe:	1d11      	adds	r1, r2, #4
   12dc0:	6019      	str	r1, [r3, #0]
   12dc2:	6813      	ldr	r3, [r2, #0]
   12dc4:	7033      	strb	r3, [r6, #0]
   12dc6:	2301      	movs	r3, #1
   12dc8:	e079      	b.n	12ebe <_printf_i+0x182>
   12dca:	0649      	lsls	r1, r1, #25
   12dcc:	d5d9      	bpl.n	12d82 <_printf_i+0x46>
   12dce:	1d11      	adds	r1, r2, #4
   12dd0:	6019      	str	r1, [r3, #0]
   12dd2:	2300      	movs	r3, #0
   12dd4:	5ed5      	ldrsh	r5, [r2, r3]
   12dd6:	2d00      	cmp	r5, #0
   12dd8:	da03      	bge.n	12de2 <_printf_i+0xa6>
   12dda:	232d      	movs	r3, #45	; 0x2d
   12ddc:	9a04      	ldr	r2, [sp, #16]
   12dde:	426d      	negs	r5, r5
   12de0:	7013      	strb	r3, [r2, #0]
   12de2:	4b62      	ldr	r3, [pc, #392]	; (12f6c <_printf_i+0x230>)
   12de4:	270a      	movs	r7, #10
   12de6:	9303      	str	r3, [sp, #12]
   12de8:	e02f      	b.n	12e4a <_printf_i+0x10e>
   12dea:	6820      	ldr	r0, [r4, #0]
   12dec:	6819      	ldr	r1, [r3, #0]
   12dee:	0605      	lsls	r5, r0, #24
   12df0:	d503      	bpl.n	12dfa <_printf_i+0xbe>
   12df2:	1d08      	adds	r0, r1, #4
   12df4:	6018      	str	r0, [r3, #0]
   12df6:	680d      	ldr	r5, [r1, #0]
   12df8:	e005      	b.n	12e06 <_printf_i+0xca>
   12dfa:	0640      	lsls	r0, r0, #25
   12dfc:	d5f9      	bpl.n	12df2 <_printf_i+0xb6>
   12dfe:	680d      	ldr	r5, [r1, #0]
   12e00:	1d08      	adds	r0, r1, #4
   12e02:	6018      	str	r0, [r3, #0]
   12e04:	b2ad      	uxth	r5, r5
   12e06:	4b59      	ldr	r3, [pc, #356]	; (12f6c <_printf_i+0x230>)
   12e08:	2708      	movs	r7, #8
   12e0a:	9303      	str	r3, [sp, #12]
   12e0c:	2a6f      	cmp	r2, #111	; 0x6f
   12e0e:	d018      	beq.n	12e42 <_printf_i+0x106>
   12e10:	270a      	movs	r7, #10
   12e12:	e016      	b.n	12e42 <_printf_i+0x106>
   12e14:	3145      	adds	r1, #69	; 0x45
   12e16:	700a      	strb	r2, [r1, #0]
   12e18:	4a54      	ldr	r2, [pc, #336]	; (12f6c <_printf_i+0x230>)
   12e1a:	9203      	str	r2, [sp, #12]
   12e1c:	681a      	ldr	r2, [r3, #0]
   12e1e:	6821      	ldr	r1, [r4, #0]
   12e20:	1d10      	adds	r0, r2, #4
   12e22:	6018      	str	r0, [r3, #0]
   12e24:	6815      	ldr	r5, [r2, #0]
   12e26:	0608      	lsls	r0, r1, #24
   12e28:	d522      	bpl.n	12e70 <_printf_i+0x134>
   12e2a:	07cb      	lsls	r3, r1, #31
   12e2c:	d502      	bpl.n	12e34 <_printf_i+0xf8>
   12e2e:	2320      	movs	r3, #32
   12e30:	4319      	orrs	r1, r3
   12e32:	6021      	str	r1, [r4, #0]
   12e34:	2710      	movs	r7, #16
   12e36:	2d00      	cmp	r5, #0
   12e38:	d103      	bne.n	12e42 <_printf_i+0x106>
   12e3a:	2320      	movs	r3, #32
   12e3c:	6822      	ldr	r2, [r4, #0]
   12e3e:	439a      	bics	r2, r3
   12e40:	6022      	str	r2, [r4, #0]
   12e42:	0023      	movs	r3, r4
   12e44:	2200      	movs	r2, #0
   12e46:	3343      	adds	r3, #67	; 0x43
   12e48:	701a      	strb	r2, [r3, #0]
   12e4a:	6863      	ldr	r3, [r4, #4]
   12e4c:	60a3      	str	r3, [r4, #8]
   12e4e:	2b00      	cmp	r3, #0
   12e50:	db5c      	blt.n	12f0c <_printf_i+0x1d0>
   12e52:	2204      	movs	r2, #4
   12e54:	6821      	ldr	r1, [r4, #0]
   12e56:	4391      	bics	r1, r2
   12e58:	6021      	str	r1, [r4, #0]
   12e5a:	2d00      	cmp	r5, #0
   12e5c:	d158      	bne.n	12f10 <_printf_i+0x1d4>
   12e5e:	9e04      	ldr	r6, [sp, #16]
   12e60:	2b00      	cmp	r3, #0
   12e62:	d064      	beq.n	12f2e <_printf_i+0x1f2>
   12e64:	0026      	movs	r6, r4
   12e66:	9b03      	ldr	r3, [sp, #12]
   12e68:	3642      	adds	r6, #66	; 0x42
   12e6a:	781b      	ldrb	r3, [r3, #0]
   12e6c:	7033      	strb	r3, [r6, #0]
   12e6e:	e05e      	b.n	12f2e <_printf_i+0x1f2>
   12e70:	0648      	lsls	r0, r1, #25
   12e72:	d5da      	bpl.n	12e2a <_printf_i+0xee>
   12e74:	b2ad      	uxth	r5, r5
   12e76:	e7d8      	b.n	12e2a <_printf_i+0xee>
   12e78:	6809      	ldr	r1, [r1, #0]
   12e7a:	681a      	ldr	r2, [r3, #0]
   12e7c:	0608      	lsls	r0, r1, #24
   12e7e:	d505      	bpl.n	12e8c <_printf_i+0x150>
   12e80:	1d11      	adds	r1, r2, #4
   12e82:	6019      	str	r1, [r3, #0]
   12e84:	6813      	ldr	r3, [r2, #0]
   12e86:	6962      	ldr	r2, [r4, #20]
   12e88:	601a      	str	r2, [r3, #0]
   12e8a:	e006      	b.n	12e9a <_printf_i+0x15e>
   12e8c:	0649      	lsls	r1, r1, #25
   12e8e:	d5f7      	bpl.n	12e80 <_printf_i+0x144>
   12e90:	1d11      	adds	r1, r2, #4
   12e92:	6019      	str	r1, [r3, #0]
   12e94:	6813      	ldr	r3, [r2, #0]
   12e96:	8aa2      	ldrh	r2, [r4, #20]
   12e98:	801a      	strh	r2, [r3, #0]
   12e9a:	2300      	movs	r3, #0
   12e9c:	9e04      	ldr	r6, [sp, #16]
   12e9e:	6123      	str	r3, [r4, #16]
   12ea0:	e054      	b.n	12f4c <_printf_i+0x210>
   12ea2:	681a      	ldr	r2, [r3, #0]
   12ea4:	1d11      	adds	r1, r2, #4
   12ea6:	6019      	str	r1, [r3, #0]
   12ea8:	6816      	ldr	r6, [r2, #0]
   12eaa:	2100      	movs	r1, #0
   12eac:	6862      	ldr	r2, [r4, #4]
   12eae:	0030      	movs	r0, r6
   12eb0:	f001 fc24 	bl	146fc <memchr>
   12eb4:	2800      	cmp	r0, #0
   12eb6:	d001      	beq.n	12ebc <_printf_i+0x180>
   12eb8:	1b80      	subs	r0, r0, r6
   12eba:	6060      	str	r0, [r4, #4]
   12ebc:	6863      	ldr	r3, [r4, #4]
   12ebe:	6123      	str	r3, [r4, #16]
   12ec0:	2300      	movs	r3, #0
   12ec2:	9a04      	ldr	r2, [sp, #16]
   12ec4:	7013      	strb	r3, [r2, #0]
   12ec6:	e041      	b.n	12f4c <_printf_i+0x210>
   12ec8:	6923      	ldr	r3, [r4, #16]
   12eca:	0032      	movs	r2, r6
   12ecc:	9906      	ldr	r1, [sp, #24]
   12ece:	9805      	ldr	r0, [sp, #20]
   12ed0:	9d07      	ldr	r5, [sp, #28]
   12ed2:	47a8      	blx	r5
   12ed4:	1c43      	adds	r3, r0, #1
   12ed6:	d043      	beq.n	12f60 <_printf_i+0x224>
   12ed8:	6823      	ldr	r3, [r4, #0]
   12eda:	2500      	movs	r5, #0
   12edc:	079b      	lsls	r3, r3, #30
   12ede:	d40f      	bmi.n	12f00 <_printf_i+0x1c4>
   12ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ee2:	68e0      	ldr	r0, [r4, #12]
   12ee4:	4298      	cmp	r0, r3
   12ee6:	da3d      	bge.n	12f64 <_printf_i+0x228>
   12ee8:	0018      	movs	r0, r3
   12eea:	e03b      	b.n	12f64 <_printf_i+0x228>
   12eec:	0022      	movs	r2, r4
   12eee:	2301      	movs	r3, #1
   12ef0:	3219      	adds	r2, #25
   12ef2:	9906      	ldr	r1, [sp, #24]
   12ef4:	9805      	ldr	r0, [sp, #20]
   12ef6:	9e07      	ldr	r6, [sp, #28]
   12ef8:	47b0      	blx	r6
   12efa:	1c43      	adds	r3, r0, #1
   12efc:	d030      	beq.n	12f60 <_printf_i+0x224>
   12efe:	3501      	adds	r5, #1
   12f00:	68e3      	ldr	r3, [r4, #12]
   12f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12f04:	1a9b      	subs	r3, r3, r2
   12f06:	429d      	cmp	r5, r3
   12f08:	dbf0      	blt.n	12eec <_printf_i+0x1b0>
   12f0a:	e7e9      	b.n	12ee0 <_printf_i+0x1a4>
   12f0c:	2d00      	cmp	r5, #0
   12f0e:	d0a9      	beq.n	12e64 <_printf_i+0x128>
   12f10:	9e04      	ldr	r6, [sp, #16]
   12f12:	0028      	movs	r0, r5
   12f14:	0039      	movs	r1, r7
   12f16:	f002 fb4b 	bl	155b0 <__aeabi_uidivmod>
   12f1a:	9b03      	ldr	r3, [sp, #12]
   12f1c:	3e01      	subs	r6, #1
   12f1e:	5c5b      	ldrb	r3, [r3, r1]
   12f20:	0028      	movs	r0, r5
   12f22:	7033      	strb	r3, [r6, #0]
   12f24:	0039      	movs	r1, r7
   12f26:	f002 fabd 	bl	154a4 <__udivsi3>
   12f2a:	1e05      	subs	r5, r0, #0
   12f2c:	d1f1      	bne.n	12f12 <_printf_i+0x1d6>
   12f2e:	2f08      	cmp	r7, #8
   12f30:	d109      	bne.n	12f46 <_printf_i+0x20a>
   12f32:	6823      	ldr	r3, [r4, #0]
   12f34:	07db      	lsls	r3, r3, #31
   12f36:	d506      	bpl.n	12f46 <_printf_i+0x20a>
   12f38:	6863      	ldr	r3, [r4, #4]
   12f3a:	6922      	ldr	r2, [r4, #16]
   12f3c:	4293      	cmp	r3, r2
   12f3e:	dc02      	bgt.n	12f46 <_printf_i+0x20a>
   12f40:	2330      	movs	r3, #48	; 0x30
   12f42:	3e01      	subs	r6, #1
   12f44:	7033      	strb	r3, [r6, #0]
   12f46:	9b04      	ldr	r3, [sp, #16]
   12f48:	1b9b      	subs	r3, r3, r6
   12f4a:	6123      	str	r3, [r4, #16]
   12f4c:	9b07      	ldr	r3, [sp, #28]
   12f4e:	aa09      	add	r2, sp, #36	; 0x24
   12f50:	9300      	str	r3, [sp, #0]
   12f52:	0021      	movs	r1, r4
   12f54:	9b06      	ldr	r3, [sp, #24]
   12f56:	9805      	ldr	r0, [sp, #20]
   12f58:	f7ff fe82 	bl	12c60 <_printf_common>
   12f5c:	1c43      	adds	r3, r0, #1
   12f5e:	d1b3      	bne.n	12ec8 <_printf_i+0x18c>
   12f60:	2001      	movs	r0, #1
   12f62:	4240      	negs	r0, r0
   12f64:	b00b      	add	sp, #44	; 0x2c
   12f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f68:	00019fc1 	.word	0x00019fc1
   12f6c:	00019fb0 	.word	0x00019fb0

00012f70 <iprintf>:
   12f70:	b40f      	push	{r0, r1, r2, r3}
   12f72:	4b0b      	ldr	r3, [pc, #44]	; (12fa0 <iprintf+0x30>)
   12f74:	b513      	push	{r0, r1, r4, lr}
   12f76:	681c      	ldr	r4, [r3, #0]
   12f78:	2c00      	cmp	r4, #0
   12f7a:	d005      	beq.n	12f88 <iprintf+0x18>
   12f7c:	69a3      	ldr	r3, [r4, #24]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d102      	bne.n	12f88 <iprintf+0x18>
   12f82:	0020      	movs	r0, r4
   12f84:	f001 faac 	bl	144e0 <__sinit>
   12f88:	ab05      	add	r3, sp, #20
   12f8a:	9a04      	ldr	r2, [sp, #16]
   12f8c:	68a1      	ldr	r1, [r4, #8]
   12f8e:	0020      	movs	r0, r4
   12f90:	9301      	str	r3, [sp, #4]
   12f92:	f002 f83f 	bl	15014 <_vfiprintf_r>
   12f96:	bc16      	pop	{r1, r2, r4}
   12f98:	bc08      	pop	{r3}
   12f9a:	b004      	add	sp, #16
   12f9c:	4718      	bx	r3
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	20000018 	.word	0x20000018

00012fa4 <putchar>:
   12fa4:	4b08      	ldr	r3, [pc, #32]	; (12fc8 <putchar+0x24>)
   12fa6:	b570      	push	{r4, r5, r6, lr}
   12fa8:	681c      	ldr	r4, [r3, #0]
   12faa:	0005      	movs	r5, r0
   12fac:	2c00      	cmp	r4, #0
   12fae:	d005      	beq.n	12fbc <putchar+0x18>
   12fb0:	69a3      	ldr	r3, [r4, #24]
   12fb2:	2b00      	cmp	r3, #0
   12fb4:	d102      	bne.n	12fbc <putchar+0x18>
   12fb6:	0020      	movs	r0, r4
   12fb8:	f001 fa92 	bl	144e0 <__sinit>
   12fbc:	0029      	movs	r1, r5
   12fbe:	68a2      	ldr	r2, [r4, #8]
   12fc0:	0020      	movs	r0, r4
   12fc2:	f002 f943 	bl	1524c <_putc_r>
   12fc6:	bd70      	pop	{r4, r5, r6, pc}
   12fc8:	20000018 	.word	0x20000018

00012fcc <_puts_r>:
   12fcc:	b570      	push	{r4, r5, r6, lr}
   12fce:	0005      	movs	r5, r0
   12fd0:	000e      	movs	r6, r1
   12fd2:	2800      	cmp	r0, #0
   12fd4:	d004      	beq.n	12fe0 <_puts_r+0x14>
   12fd6:	6983      	ldr	r3, [r0, #24]
   12fd8:	2b00      	cmp	r3, #0
   12fda:	d101      	bne.n	12fe0 <_puts_r+0x14>
   12fdc:	f001 fa80 	bl	144e0 <__sinit>
   12fe0:	69ab      	ldr	r3, [r5, #24]
   12fe2:	68ac      	ldr	r4, [r5, #8]
   12fe4:	2b00      	cmp	r3, #0
   12fe6:	d102      	bne.n	12fee <_puts_r+0x22>
   12fe8:	0028      	movs	r0, r5
   12fea:	f001 fa79 	bl	144e0 <__sinit>
   12fee:	4b24      	ldr	r3, [pc, #144]	; (13080 <_puts_r+0xb4>)
   12ff0:	429c      	cmp	r4, r3
   12ff2:	d10f      	bne.n	13014 <_puts_r+0x48>
   12ff4:	686c      	ldr	r4, [r5, #4]
   12ff6:	89a3      	ldrh	r3, [r4, #12]
   12ff8:	071b      	lsls	r3, r3, #28
   12ffa:	d502      	bpl.n	13002 <_puts_r+0x36>
   12ffc:	6923      	ldr	r3, [r4, #16]
   12ffe:	2b00      	cmp	r3, #0
   13000:	d120      	bne.n	13044 <_puts_r+0x78>
   13002:	0021      	movs	r1, r4
   13004:	0028      	movs	r0, r5
   13006:	f000 fa91 	bl	1352c <__swsetup_r>
   1300a:	2800      	cmp	r0, #0
   1300c:	d01a      	beq.n	13044 <_puts_r+0x78>
   1300e:	2001      	movs	r0, #1
   13010:	4240      	negs	r0, r0
   13012:	bd70      	pop	{r4, r5, r6, pc}
   13014:	4b1b      	ldr	r3, [pc, #108]	; (13084 <_puts_r+0xb8>)
   13016:	429c      	cmp	r4, r3
   13018:	d101      	bne.n	1301e <_puts_r+0x52>
   1301a:	68ac      	ldr	r4, [r5, #8]
   1301c:	e7eb      	b.n	12ff6 <_puts_r+0x2a>
   1301e:	4b1a      	ldr	r3, [pc, #104]	; (13088 <_puts_r+0xbc>)
   13020:	429c      	cmp	r4, r3
   13022:	d1e8      	bne.n	12ff6 <_puts_r+0x2a>
   13024:	68ec      	ldr	r4, [r5, #12]
   13026:	e7e6      	b.n	12ff6 <_puts_r+0x2a>
   13028:	3b01      	subs	r3, #1
   1302a:	3601      	adds	r6, #1
   1302c:	60a3      	str	r3, [r4, #8]
   1302e:	2b00      	cmp	r3, #0
   13030:	da04      	bge.n	1303c <_puts_r+0x70>
   13032:	69a2      	ldr	r2, [r4, #24]
   13034:	4293      	cmp	r3, r2
   13036:	db16      	blt.n	13066 <_puts_r+0x9a>
   13038:	290a      	cmp	r1, #10
   1303a:	d014      	beq.n	13066 <_puts_r+0x9a>
   1303c:	6823      	ldr	r3, [r4, #0]
   1303e:	1c5a      	adds	r2, r3, #1
   13040:	6022      	str	r2, [r4, #0]
   13042:	7019      	strb	r1, [r3, #0]
   13044:	7831      	ldrb	r1, [r6, #0]
   13046:	68a3      	ldr	r3, [r4, #8]
   13048:	2900      	cmp	r1, #0
   1304a:	d1ed      	bne.n	13028 <_puts_r+0x5c>
   1304c:	3b01      	subs	r3, #1
   1304e:	60a3      	str	r3, [r4, #8]
   13050:	2b00      	cmp	r3, #0
   13052:	da0f      	bge.n	13074 <_puts_r+0xa8>
   13054:	0022      	movs	r2, r4
   13056:	310a      	adds	r1, #10
   13058:	0028      	movs	r0, r5
   1305a:	f000 fa05 	bl	13468 <__swbuf_r>
   1305e:	1c43      	adds	r3, r0, #1
   13060:	d0d5      	beq.n	1300e <_puts_r+0x42>
   13062:	200a      	movs	r0, #10
   13064:	e7d5      	b.n	13012 <_puts_r+0x46>
   13066:	0022      	movs	r2, r4
   13068:	0028      	movs	r0, r5
   1306a:	f000 f9fd 	bl	13468 <__swbuf_r>
   1306e:	1c43      	adds	r3, r0, #1
   13070:	d1e8      	bne.n	13044 <_puts_r+0x78>
   13072:	e7cc      	b.n	1300e <_puts_r+0x42>
   13074:	200a      	movs	r0, #10
   13076:	6823      	ldr	r3, [r4, #0]
   13078:	1c5a      	adds	r2, r3, #1
   1307a:	6022      	str	r2, [r4, #0]
   1307c:	7018      	strb	r0, [r3, #0]
   1307e:	e7c8      	b.n	13012 <_puts_r+0x46>
   13080:	0001a100 	.word	0x0001a100
   13084:	0001a120 	.word	0x0001a120
   13088:	0001a0e0 	.word	0x0001a0e0

0001308c <puts>:
   1308c:	b510      	push	{r4, lr}
   1308e:	4b03      	ldr	r3, [pc, #12]	; (1309c <puts+0x10>)
   13090:	0001      	movs	r1, r0
   13092:	6818      	ldr	r0, [r3, #0]
   13094:	f7ff ff9a 	bl	12fcc <_puts_r>
   13098:	bd10      	pop	{r4, pc}
   1309a:	46c0      	nop			; (mov r8, r8)
   1309c:	20000018 	.word	0x20000018

000130a0 <_sbrk_r>:
   130a0:	2300      	movs	r3, #0
   130a2:	b570      	push	{r4, r5, r6, lr}
   130a4:	4c06      	ldr	r4, [pc, #24]	; (130c0 <_sbrk_r+0x20>)
   130a6:	0005      	movs	r5, r0
   130a8:	0008      	movs	r0, r1
   130aa:	6023      	str	r3, [r4, #0]
   130ac:	f7fe f90e 	bl	112cc <_sbrk>
   130b0:	1c43      	adds	r3, r0, #1
   130b2:	d103      	bne.n	130bc <_sbrk_r+0x1c>
   130b4:	6823      	ldr	r3, [r4, #0]
   130b6:	2b00      	cmp	r3, #0
   130b8:	d000      	beq.n	130bc <_sbrk_r+0x1c>
   130ba:	602b      	str	r3, [r5, #0]
   130bc:	bd70      	pop	{r4, r5, r6, pc}
   130be:	46c0      	nop			; (mov r8, r8)
   130c0:	2000091c 	.word	0x2000091c

000130c4 <setbuf>:
   130c4:	424a      	negs	r2, r1
   130c6:	414a      	adcs	r2, r1
   130c8:	2380      	movs	r3, #128	; 0x80
   130ca:	b510      	push	{r4, lr}
   130cc:	0052      	lsls	r2, r2, #1
   130ce:	00db      	lsls	r3, r3, #3
   130d0:	f000 f802 	bl	130d8 <setvbuf>
   130d4:	bd10      	pop	{r4, pc}
	...

000130d8 <setvbuf>:
   130d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   130da:	001d      	movs	r5, r3
   130dc:	4b4f      	ldr	r3, [pc, #316]	; (1321c <setvbuf+0x144>)
   130de:	b085      	sub	sp, #20
   130e0:	681e      	ldr	r6, [r3, #0]
   130e2:	0004      	movs	r4, r0
   130e4:	000f      	movs	r7, r1
   130e6:	9200      	str	r2, [sp, #0]
   130e8:	2e00      	cmp	r6, #0
   130ea:	d005      	beq.n	130f8 <setvbuf+0x20>
   130ec:	69b3      	ldr	r3, [r6, #24]
   130ee:	2b00      	cmp	r3, #0
   130f0:	d102      	bne.n	130f8 <setvbuf+0x20>
   130f2:	0030      	movs	r0, r6
   130f4:	f001 f9f4 	bl	144e0 <__sinit>
   130f8:	4b49      	ldr	r3, [pc, #292]	; (13220 <setvbuf+0x148>)
   130fa:	429c      	cmp	r4, r3
   130fc:	d150      	bne.n	131a0 <setvbuf+0xc8>
   130fe:	6874      	ldr	r4, [r6, #4]
   13100:	9b00      	ldr	r3, [sp, #0]
   13102:	2b02      	cmp	r3, #2
   13104:	d005      	beq.n	13112 <setvbuf+0x3a>
   13106:	2b01      	cmp	r3, #1
   13108:	d900      	bls.n	1310c <setvbuf+0x34>
   1310a:	e084      	b.n	13216 <setvbuf+0x13e>
   1310c:	2d00      	cmp	r5, #0
   1310e:	da00      	bge.n	13112 <setvbuf+0x3a>
   13110:	e081      	b.n	13216 <setvbuf+0x13e>
   13112:	0021      	movs	r1, r4
   13114:	0030      	movs	r0, r6
   13116:	f001 f975 	bl	14404 <_fflush_r>
   1311a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1311c:	2900      	cmp	r1, #0
   1311e:	d008      	beq.n	13132 <setvbuf+0x5a>
   13120:	0023      	movs	r3, r4
   13122:	3344      	adds	r3, #68	; 0x44
   13124:	4299      	cmp	r1, r3
   13126:	d002      	beq.n	1312e <setvbuf+0x56>
   13128:	0030      	movs	r0, r6
   1312a:	f7ff fa09 	bl	12540 <_free_r>
   1312e:	2300      	movs	r3, #0
   13130:	6363      	str	r3, [r4, #52]	; 0x34
   13132:	2300      	movs	r3, #0
   13134:	61a3      	str	r3, [r4, #24]
   13136:	6063      	str	r3, [r4, #4]
   13138:	89a3      	ldrh	r3, [r4, #12]
   1313a:	061b      	lsls	r3, r3, #24
   1313c:	d503      	bpl.n	13146 <setvbuf+0x6e>
   1313e:	6921      	ldr	r1, [r4, #16]
   13140:	0030      	movs	r0, r6
   13142:	f7ff f9fd 	bl	12540 <_free_r>
   13146:	89a3      	ldrh	r3, [r4, #12]
   13148:	4a36      	ldr	r2, [pc, #216]	; (13224 <setvbuf+0x14c>)
   1314a:	4013      	ands	r3, r2
   1314c:	81a3      	strh	r3, [r4, #12]
   1314e:	9b00      	ldr	r3, [sp, #0]
   13150:	2b02      	cmp	r3, #2
   13152:	d05a      	beq.n	1320a <setvbuf+0x132>
   13154:	ab03      	add	r3, sp, #12
   13156:	aa02      	add	r2, sp, #8
   13158:	0021      	movs	r1, r4
   1315a:	0030      	movs	r0, r6
   1315c:	f001 fa62 	bl	14624 <__swhatbuf_r>
   13160:	89a3      	ldrh	r3, [r4, #12]
   13162:	4318      	orrs	r0, r3
   13164:	81a0      	strh	r0, [r4, #12]
   13166:	2d00      	cmp	r5, #0
   13168:	d124      	bne.n	131b4 <setvbuf+0xdc>
   1316a:	9d02      	ldr	r5, [sp, #8]
   1316c:	0028      	movs	r0, r5
   1316e:	f7ff f99d 	bl	124ac <malloc>
   13172:	9501      	str	r5, [sp, #4]
   13174:	1e07      	subs	r7, r0, #0
   13176:	d142      	bne.n	131fe <setvbuf+0x126>
   13178:	9b02      	ldr	r3, [sp, #8]
   1317a:	9301      	str	r3, [sp, #4]
   1317c:	42ab      	cmp	r3, r5
   1317e:	d139      	bne.n	131f4 <setvbuf+0x11c>
   13180:	2001      	movs	r0, #1
   13182:	4240      	negs	r0, r0
   13184:	2302      	movs	r3, #2
   13186:	89a2      	ldrh	r2, [r4, #12]
   13188:	4313      	orrs	r3, r2
   1318a:	81a3      	strh	r3, [r4, #12]
   1318c:	2300      	movs	r3, #0
   1318e:	60a3      	str	r3, [r4, #8]
   13190:	0023      	movs	r3, r4
   13192:	3347      	adds	r3, #71	; 0x47
   13194:	6023      	str	r3, [r4, #0]
   13196:	6123      	str	r3, [r4, #16]
   13198:	2301      	movs	r3, #1
   1319a:	6163      	str	r3, [r4, #20]
   1319c:	b005      	add	sp, #20
   1319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   131a0:	4b21      	ldr	r3, [pc, #132]	; (13228 <setvbuf+0x150>)
   131a2:	429c      	cmp	r4, r3
   131a4:	d101      	bne.n	131aa <setvbuf+0xd2>
   131a6:	68b4      	ldr	r4, [r6, #8]
   131a8:	e7aa      	b.n	13100 <setvbuf+0x28>
   131aa:	4b20      	ldr	r3, [pc, #128]	; (1322c <setvbuf+0x154>)
   131ac:	429c      	cmp	r4, r3
   131ae:	d1a7      	bne.n	13100 <setvbuf+0x28>
   131b0:	68f4      	ldr	r4, [r6, #12]
   131b2:	e7a5      	b.n	13100 <setvbuf+0x28>
   131b4:	2f00      	cmp	r7, #0
   131b6:	d0d9      	beq.n	1316c <setvbuf+0x94>
   131b8:	69b3      	ldr	r3, [r6, #24]
   131ba:	2b00      	cmp	r3, #0
   131bc:	d102      	bne.n	131c4 <setvbuf+0xec>
   131be:	0030      	movs	r0, r6
   131c0:	f001 f98e 	bl	144e0 <__sinit>
   131c4:	9b00      	ldr	r3, [sp, #0]
   131c6:	2b01      	cmp	r3, #1
   131c8:	d103      	bne.n	131d2 <setvbuf+0xfa>
   131ca:	89a3      	ldrh	r3, [r4, #12]
   131cc:	9a00      	ldr	r2, [sp, #0]
   131ce:	431a      	orrs	r2, r3
   131d0:	81a2      	strh	r2, [r4, #12]
   131d2:	2008      	movs	r0, #8
   131d4:	89a3      	ldrh	r3, [r4, #12]
   131d6:	6027      	str	r7, [r4, #0]
   131d8:	6127      	str	r7, [r4, #16]
   131da:	6165      	str	r5, [r4, #20]
   131dc:	4018      	ands	r0, r3
   131de:	d018      	beq.n	13212 <setvbuf+0x13a>
   131e0:	2001      	movs	r0, #1
   131e2:	4018      	ands	r0, r3
   131e4:	2300      	movs	r3, #0
   131e6:	4298      	cmp	r0, r3
   131e8:	d011      	beq.n	1320e <setvbuf+0x136>
   131ea:	426d      	negs	r5, r5
   131ec:	60a3      	str	r3, [r4, #8]
   131ee:	61a5      	str	r5, [r4, #24]
   131f0:	0018      	movs	r0, r3
   131f2:	e7d3      	b.n	1319c <setvbuf+0xc4>
   131f4:	9801      	ldr	r0, [sp, #4]
   131f6:	f7ff f959 	bl	124ac <malloc>
   131fa:	1e07      	subs	r7, r0, #0
   131fc:	d0c0      	beq.n	13180 <setvbuf+0xa8>
   131fe:	2380      	movs	r3, #128	; 0x80
   13200:	89a2      	ldrh	r2, [r4, #12]
   13202:	9d01      	ldr	r5, [sp, #4]
   13204:	4313      	orrs	r3, r2
   13206:	81a3      	strh	r3, [r4, #12]
   13208:	e7d6      	b.n	131b8 <setvbuf+0xe0>
   1320a:	2000      	movs	r0, #0
   1320c:	e7ba      	b.n	13184 <setvbuf+0xac>
   1320e:	60a5      	str	r5, [r4, #8]
   13210:	e7c4      	b.n	1319c <setvbuf+0xc4>
   13212:	60a0      	str	r0, [r4, #8]
   13214:	e7c2      	b.n	1319c <setvbuf+0xc4>
   13216:	2001      	movs	r0, #1
   13218:	4240      	negs	r0, r0
   1321a:	e7bf      	b.n	1319c <setvbuf+0xc4>
   1321c:	20000018 	.word	0x20000018
   13220:	0001a100 	.word	0x0001a100
   13224:	fffff35c 	.word	0xfffff35c
   13228:	0001a120 	.word	0x0001a120
   1322c:	0001a0e0 	.word	0x0001a0e0

00013230 <siprintf>:
   13230:	b40e      	push	{r1, r2, r3}
   13232:	b510      	push	{r4, lr}
   13234:	b09d      	sub	sp, #116	; 0x74
   13236:	a902      	add	r1, sp, #8
   13238:	9002      	str	r0, [sp, #8]
   1323a:	6108      	str	r0, [r1, #16]
   1323c:	480b      	ldr	r0, [pc, #44]	; (1326c <siprintf+0x3c>)
   1323e:	2482      	movs	r4, #130	; 0x82
   13240:	6088      	str	r0, [r1, #8]
   13242:	6148      	str	r0, [r1, #20]
   13244:	2001      	movs	r0, #1
   13246:	4240      	negs	r0, r0
   13248:	ab1f      	add	r3, sp, #124	; 0x7c
   1324a:	81c8      	strh	r0, [r1, #14]
   1324c:	4808      	ldr	r0, [pc, #32]	; (13270 <siprintf+0x40>)
   1324e:	cb04      	ldmia	r3!, {r2}
   13250:	00a4      	lsls	r4, r4, #2
   13252:	6800      	ldr	r0, [r0, #0]
   13254:	9301      	str	r3, [sp, #4]
   13256:	818c      	strh	r4, [r1, #12]
   13258:	f001 fdb0 	bl	14dbc <_svfiprintf_r>
   1325c:	2300      	movs	r3, #0
   1325e:	9a02      	ldr	r2, [sp, #8]
   13260:	7013      	strb	r3, [r2, #0]
   13262:	b01d      	add	sp, #116	; 0x74
   13264:	bc10      	pop	{r4}
   13266:	bc08      	pop	{r3}
   13268:	b003      	add	sp, #12
   1326a:	4718      	bx	r3
   1326c:	7fffffff 	.word	0x7fffffff
   13270:	20000018 	.word	0x20000018

00013274 <strcmp>:
   13274:	7802      	ldrb	r2, [r0, #0]
   13276:	780b      	ldrb	r3, [r1, #0]
   13278:	2a00      	cmp	r2, #0
   1327a:	d003      	beq.n	13284 <strcmp+0x10>
   1327c:	3001      	adds	r0, #1
   1327e:	3101      	adds	r1, #1
   13280:	429a      	cmp	r2, r3
   13282:	d0f7      	beq.n	13274 <strcmp>
   13284:	1ad0      	subs	r0, r2, r3
   13286:	4770      	bx	lr

00013288 <strcpy>:
   13288:	1c03      	adds	r3, r0, #0
   1328a:	780a      	ldrb	r2, [r1, #0]
   1328c:	3101      	adds	r1, #1
   1328e:	701a      	strb	r2, [r3, #0]
   13290:	3301      	adds	r3, #1
   13292:	2a00      	cmp	r2, #0
   13294:	d1f9      	bne.n	1328a <strcpy+0x2>
   13296:	4770      	bx	lr

00013298 <strdup>:
   13298:	b510      	push	{r4, lr}
   1329a:	4b03      	ldr	r3, [pc, #12]	; (132a8 <strdup+0x10>)
   1329c:	0001      	movs	r1, r0
   1329e:	6818      	ldr	r0, [r3, #0]
   132a0:	f000 f804 	bl	132ac <_strdup_r>
   132a4:	bd10      	pop	{r4, pc}
   132a6:	46c0      	nop			; (mov r8, r8)
   132a8:	20000018 	.word	0x20000018

000132ac <_strdup_r>:
   132ac:	b570      	push	{r4, r5, r6, lr}
   132ae:	0005      	movs	r5, r0
   132b0:	0008      	movs	r0, r1
   132b2:	000e      	movs	r6, r1
   132b4:	f000 f80d 	bl	132d2 <strlen>
   132b8:	1c44      	adds	r4, r0, #1
   132ba:	0021      	movs	r1, r4
   132bc:	0028      	movs	r0, r5
   132be:	f7ff f989 	bl	125d4 <_malloc_r>
   132c2:	1e05      	subs	r5, r0, #0
   132c4:	d003      	beq.n	132ce <_strdup_r+0x22>
   132c6:	0022      	movs	r2, r4
   132c8:	0031      	movs	r1, r6
   132ca:	f7ff f915 	bl	124f8 <memcpy>
   132ce:	0028      	movs	r0, r5
   132d0:	bd70      	pop	{r4, r5, r6, pc}

000132d2 <strlen>:
   132d2:	2300      	movs	r3, #0
   132d4:	5cc2      	ldrb	r2, [r0, r3]
   132d6:	3301      	adds	r3, #1
   132d8:	2a00      	cmp	r2, #0
   132da:	d1fb      	bne.n	132d4 <strlen+0x2>
   132dc:	1e58      	subs	r0, r3, #1
   132de:	4770      	bx	lr

000132e0 <strncmp>:
   132e0:	2300      	movs	r3, #0
   132e2:	b530      	push	{r4, r5, lr}
   132e4:	429a      	cmp	r2, r3
   132e6:	d00a      	beq.n	132fe <strncmp+0x1e>
   132e8:	3a01      	subs	r2, #1
   132ea:	5cc4      	ldrb	r4, [r0, r3]
   132ec:	5ccd      	ldrb	r5, [r1, r3]
   132ee:	42ac      	cmp	r4, r5
   132f0:	d104      	bne.n	132fc <strncmp+0x1c>
   132f2:	429a      	cmp	r2, r3
   132f4:	d002      	beq.n	132fc <strncmp+0x1c>
   132f6:	3301      	adds	r3, #1
   132f8:	2c00      	cmp	r4, #0
   132fa:	d1f6      	bne.n	132ea <strncmp+0xa>
   132fc:	1b63      	subs	r3, r4, r5
   132fe:	0018      	movs	r0, r3
   13300:	bd30      	pop	{r4, r5, pc}

00013302 <strstr>:
   13302:	b510      	push	{r4, lr}
   13304:	0002      	movs	r2, r0
   13306:	7800      	ldrb	r0, [r0, #0]
   13308:	2800      	cmp	r0, #0
   1330a:	d104      	bne.n	13316 <strstr+0x14>
   1330c:	7809      	ldrb	r1, [r1, #0]
   1330e:	2900      	cmp	r1, #0
   13310:	d00d      	beq.n	1332e <strstr+0x2c>
   13312:	bd10      	pop	{r4, pc}
   13314:	3201      	adds	r2, #1
   13316:	7810      	ldrb	r0, [r2, #0]
   13318:	2800      	cmp	r0, #0
   1331a:	d0fa      	beq.n	13312 <strstr+0x10>
   1331c:	2300      	movs	r3, #0
   1331e:	5cc8      	ldrb	r0, [r1, r3]
   13320:	2800      	cmp	r0, #0
   13322:	d004      	beq.n	1332e <strstr+0x2c>
   13324:	5cd4      	ldrb	r4, [r2, r3]
   13326:	4284      	cmp	r4, r0
   13328:	d1f4      	bne.n	13314 <strstr+0x12>
   1332a:	3301      	adds	r3, #1
   1332c:	e7f7      	b.n	1331e <strstr+0x1c>
   1332e:	0010      	movs	r0, r2
   13330:	e7ef      	b.n	13312 <strstr+0x10>
	...

00013334 <_strtol_l.isra.0>:
   13334:	b5f0      	push	{r4, r5, r6, r7, lr}
   13336:	001f      	movs	r7, r3
   13338:	000e      	movs	r6, r1
   1333a:	b087      	sub	sp, #28
   1333c:	9005      	str	r0, [sp, #20]
   1333e:	9103      	str	r1, [sp, #12]
   13340:	9202      	str	r2, [sp, #8]
   13342:	980c      	ldr	r0, [sp, #48]	; 0x30
   13344:	7834      	ldrb	r4, [r6, #0]
   13346:	f7ff f8ad 	bl	124a4 <__locale_ctype_ptr_l>
   1334a:	2208      	movs	r2, #8
   1334c:	1900      	adds	r0, r0, r4
   1334e:	7843      	ldrb	r3, [r0, #1]
   13350:	1c75      	adds	r5, r6, #1
   13352:	4013      	ands	r3, r2
   13354:	d10c      	bne.n	13370 <_strtol_l.isra.0+0x3c>
   13356:	2c2d      	cmp	r4, #45	; 0x2d
   13358:	d10c      	bne.n	13374 <_strtol_l.isra.0+0x40>
   1335a:	3301      	adds	r3, #1
   1335c:	782c      	ldrb	r4, [r5, #0]
   1335e:	9301      	str	r3, [sp, #4]
   13360:	1cb5      	adds	r5, r6, #2
   13362:	2f00      	cmp	r7, #0
   13364:	d00c      	beq.n	13380 <_strtol_l.isra.0+0x4c>
   13366:	2f10      	cmp	r7, #16
   13368:	d114      	bne.n	13394 <_strtol_l.isra.0+0x60>
   1336a:	2c30      	cmp	r4, #48	; 0x30
   1336c:	d00a      	beq.n	13384 <_strtol_l.isra.0+0x50>
   1336e:	e011      	b.n	13394 <_strtol_l.isra.0+0x60>
   13370:	002e      	movs	r6, r5
   13372:	e7e6      	b.n	13342 <_strtol_l.isra.0+0xe>
   13374:	9301      	str	r3, [sp, #4]
   13376:	2c2b      	cmp	r4, #43	; 0x2b
   13378:	d1f3      	bne.n	13362 <_strtol_l.isra.0+0x2e>
   1337a:	782c      	ldrb	r4, [r5, #0]
   1337c:	1cb5      	adds	r5, r6, #2
   1337e:	e7f0      	b.n	13362 <_strtol_l.isra.0+0x2e>
   13380:	2c30      	cmp	r4, #48	; 0x30
   13382:	d12f      	bne.n	133e4 <_strtol_l.isra.0+0xb0>
   13384:	2220      	movs	r2, #32
   13386:	782b      	ldrb	r3, [r5, #0]
   13388:	4393      	bics	r3, r2
   1338a:	2b58      	cmp	r3, #88	; 0x58
   1338c:	d151      	bne.n	13432 <_strtol_l.isra.0+0xfe>
   1338e:	2710      	movs	r7, #16
   13390:	786c      	ldrb	r4, [r5, #1]
   13392:	3502      	adds	r5, #2
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	4a29      	ldr	r2, [pc, #164]	; (1343c <_strtol_l.isra.0+0x108>)
   13398:	0039      	movs	r1, r7
   1339a:	189e      	adds	r6, r3, r2
   1339c:	0030      	movs	r0, r6
   1339e:	f002 f907 	bl	155b0 <__aeabi_uidivmod>
   133a2:	0030      	movs	r0, r6
   133a4:	9104      	str	r1, [sp, #16]
   133a6:	0039      	movs	r1, r7
   133a8:	f002 f87c 	bl	154a4 <__udivsi3>
   133ac:	2101      	movs	r1, #1
   133ae:	2300      	movs	r3, #0
   133b0:	4249      	negs	r1, r1
   133b2:	0002      	movs	r2, r0
   133b4:	468c      	mov	ip, r1
   133b6:	0018      	movs	r0, r3
   133b8:	0021      	movs	r1, r4
   133ba:	3930      	subs	r1, #48	; 0x30
   133bc:	2909      	cmp	r1, #9
   133be:	d813      	bhi.n	133e8 <_strtol_l.isra.0+0xb4>
   133c0:	000c      	movs	r4, r1
   133c2:	42a7      	cmp	r7, r4
   133c4:	dd1c      	ble.n	13400 <_strtol_l.isra.0+0xcc>
   133c6:	1c59      	adds	r1, r3, #1
   133c8:	d009      	beq.n	133de <_strtol_l.isra.0+0xaa>
   133ca:	4663      	mov	r3, ip
   133cc:	4282      	cmp	r2, r0
   133ce:	d306      	bcc.n	133de <_strtol_l.isra.0+0xaa>
   133d0:	d102      	bne.n	133d8 <_strtol_l.isra.0+0xa4>
   133d2:	9904      	ldr	r1, [sp, #16]
   133d4:	42a1      	cmp	r1, r4
   133d6:	db02      	blt.n	133de <_strtol_l.isra.0+0xaa>
   133d8:	2301      	movs	r3, #1
   133da:	4378      	muls	r0, r7
   133dc:	1820      	adds	r0, r4, r0
   133de:	782c      	ldrb	r4, [r5, #0]
   133e0:	3501      	adds	r5, #1
   133e2:	e7e9      	b.n	133b8 <_strtol_l.isra.0+0x84>
   133e4:	270a      	movs	r7, #10
   133e6:	e7d5      	b.n	13394 <_strtol_l.isra.0+0x60>
   133e8:	0021      	movs	r1, r4
   133ea:	3941      	subs	r1, #65	; 0x41
   133ec:	2919      	cmp	r1, #25
   133ee:	d801      	bhi.n	133f4 <_strtol_l.isra.0+0xc0>
   133f0:	3c37      	subs	r4, #55	; 0x37
   133f2:	e7e6      	b.n	133c2 <_strtol_l.isra.0+0x8e>
   133f4:	0021      	movs	r1, r4
   133f6:	3961      	subs	r1, #97	; 0x61
   133f8:	2919      	cmp	r1, #25
   133fa:	d801      	bhi.n	13400 <_strtol_l.isra.0+0xcc>
   133fc:	3c57      	subs	r4, #87	; 0x57
   133fe:	e7e0      	b.n	133c2 <_strtol_l.isra.0+0x8e>
   13400:	1c5a      	adds	r2, r3, #1
   13402:	d108      	bne.n	13416 <_strtol_l.isra.0+0xe2>
   13404:	9a05      	ldr	r2, [sp, #20]
   13406:	3323      	adds	r3, #35	; 0x23
   13408:	6013      	str	r3, [r2, #0]
   1340a:	9b02      	ldr	r3, [sp, #8]
   1340c:	0030      	movs	r0, r6
   1340e:	2b00      	cmp	r3, #0
   13410:	d10b      	bne.n	1342a <_strtol_l.isra.0+0xf6>
   13412:	b007      	add	sp, #28
   13414:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13416:	9a01      	ldr	r2, [sp, #4]
   13418:	2a00      	cmp	r2, #0
   1341a:	d000      	beq.n	1341e <_strtol_l.isra.0+0xea>
   1341c:	4240      	negs	r0, r0
   1341e:	9a02      	ldr	r2, [sp, #8]
   13420:	2a00      	cmp	r2, #0
   13422:	d0f6      	beq.n	13412 <_strtol_l.isra.0+0xde>
   13424:	9a03      	ldr	r2, [sp, #12]
   13426:	2b00      	cmp	r3, #0
   13428:	d000      	beq.n	1342c <_strtol_l.isra.0+0xf8>
   1342a:	1e6a      	subs	r2, r5, #1
   1342c:	9b02      	ldr	r3, [sp, #8]
   1342e:	601a      	str	r2, [r3, #0]
   13430:	e7ef      	b.n	13412 <_strtol_l.isra.0+0xde>
   13432:	2430      	movs	r4, #48	; 0x30
   13434:	2f00      	cmp	r7, #0
   13436:	d1ad      	bne.n	13394 <_strtol_l.isra.0+0x60>
   13438:	3708      	adds	r7, #8
   1343a:	e7ab      	b.n	13394 <_strtol_l.isra.0+0x60>
   1343c:	7fffffff 	.word	0x7fffffff

00013440 <strtol>:
   13440:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13442:	0013      	movs	r3, r2
   13444:	4a06      	ldr	r2, [pc, #24]	; (13460 <strtol+0x20>)
   13446:	0005      	movs	r5, r0
   13448:	6810      	ldr	r0, [r2, #0]
   1344a:	6a04      	ldr	r4, [r0, #32]
   1344c:	2c00      	cmp	r4, #0
   1344e:	d100      	bne.n	13452 <strtol+0x12>
   13450:	4c04      	ldr	r4, [pc, #16]	; (13464 <strtol+0x24>)
   13452:	000a      	movs	r2, r1
   13454:	9400      	str	r4, [sp, #0]
   13456:	0029      	movs	r1, r5
   13458:	f7ff ff6c 	bl	13334 <_strtol_l.isra.0>
   1345c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1345e:	46c0      	nop			; (mov r8, r8)
   13460:	20000018 	.word	0x20000018
   13464:	2000007c 	.word	0x2000007c

00013468 <__swbuf_r>:
   13468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1346a:	0005      	movs	r5, r0
   1346c:	000e      	movs	r6, r1
   1346e:	0014      	movs	r4, r2
   13470:	2800      	cmp	r0, #0
   13472:	d004      	beq.n	1347e <__swbuf_r+0x16>
   13474:	6983      	ldr	r3, [r0, #24]
   13476:	2b00      	cmp	r3, #0
   13478:	d101      	bne.n	1347e <__swbuf_r+0x16>
   1347a:	f001 f831 	bl	144e0 <__sinit>
   1347e:	4b22      	ldr	r3, [pc, #136]	; (13508 <__swbuf_r+0xa0>)
   13480:	429c      	cmp	r4, r3
   13482:	d12d      	bne.n	134e0 <__swbuf_r+0x78>
   13484:	686c      	ldr	r4, [r5, #4]
   13486:	69a3      	ldr	r3, [r4, #24]
   13488:	60a3      	str	r3, [r4, #8]
   1348a:	89a3      	ldrh	r3, [r4, #12]
   1348c:	071b      	lsls	r3, r3, #28
   1348e:	d531      	bpl.n	134f4 <__swbuf_r+0x8c>
   13490:	6923      	ldr	r3, [r4, #16]
   13492:	2b00      	cmp	r3, #0
   13494:	d02e      	beq.n	134f4 <__swbuf_r+0x8c>
   13496:	6823      	ldr	r3, [r4, #0]
   13498:	6922      	ldr	r2, [r4, #16]
   1349a:	b2f7      	uxtb	r7, r6
   1349c:	1a98      	subs	r0, r3, r2
   1349e:	6963      	ldr	r3, [r4, #20]
   134a0:	b2f6      	uxtb	r6, r6
   134a2:	4298      	cmp	r0, r3
   134a4:	db05      	blt.n	134b2 <__swbuf_r+0x4a>
   134a6:	0021      	movs	r1, r4
   134a8:	0028      	movs	r0, r5
   134aa:	f000 ffab 	bl	14404 <_fflush_r>
   134ae:	2800      	cmp	r0, #0
   134b0:	d126      	bne.n	13500 <__swbuf_r+0x98>
   134b2:	68a3      	ldr	r3, [r4, #8]
   134b4:	3001      	adds	r0, #1
   134b6:	3b01      	subs	r3, #1
   134b8:	60a3      	str	r3, [r4, #8]
   134ba:	6823      	ldr	r3, [r4, #0]
   134bc:	1c5a      	adds	r2, r3, #1
   134be:	6022      	str	r2, [r4, #0]
   134c0:	701f      	strb	r7, [r3, #0]
   134c2:	6963      	ldr	r3, [r4, #20]
   134c4:	4298      	cmp	r0, r3
   134c6:	d004      	beq.n	134d2 <__swbuf_r+0x6a>
   134c8:	89a3      	ldrh	r3, [r4, #12]
   134ca:	07db      	lsls	r3, r3, #31
   134cc:	d51a      	bpl.n	13504 <__swbuf_r+0x9c>
   134ce:	2e0a      	cmp	r6, #10
   134d0:	d118      	bne.n	13504 <__swbuf_r+0x9c>
   134d2:	0021      	movs	r1, r4
   134d4:	0028      	movs	r0, r5
   134d6:	f000 ff95 	bl	14404 <_fflush_r>
   134da:	2800      	cmp	r0, #0
   134dc:	d012      	beq.n	13504 <__swbuf_r+0x9c>
   134de:	e00f      	b.n	13500 <__swbuf_r+0x98>
   134e0:	4b0a      	ldr	r3, [pc, #40]	; (1350c <__swbuf_r+0xa4>)
   134e2:	429c      	cmp	r4, r3
   134e4:	d101      	bne.n	134ea <__swbuf_r+0x82>
   134e6:	68ac      	ldr	r4, [r5, #8]
   134e8:	e7cd      	b.n	13486 <__swbuf_r+0x1e>
   134ea:	4b09      	ldr	r3, [pc, #36]	; (13510 <__swbuf_r+0xa8>)
   134ec:	429c      	cmp	r4, r3
   134ee:	d1ca      	bne.n	13486 <__swbuf_r+0x1e>
   134f0:	68ec      	ldr	r4, [r5, #12]
   134f2:	e7c8      	b.n	13486 <__swbuf_r+0x1e>
   134f4:	0021      	movs	r1, r4
   134f6:	0028      	movs	r0, r5
   134f8:	f000 f818 	bl	1352c <__swsetup_r>
   134fc:	2800      	cmp	r0, #0
   134fe:	d0ca      	beq.n	13496 <__swbuf_r+0x2e>
   13500:	2601      	movs	r6, #1
   13502:	4276      	negs	r6, r6
   13504:	0030      	movs	r0, r6
   13506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13508:	0001a100 	.word	0x0001a100
   1350c:	0001a120 	.word	0x0001a120
   13510:	0001a0e0 	.word	0x0001a0e0

00013514 <__ascii_wctomb>:
   13514:	1e0b      	subs	r3, r1, #0
   13516:	d004      	beq.n	13522 <__ascii_wctomb+0xe>
   13518:	2aff      	cmp	r2, #255	; 0xff
   1351a:	d904      	bls.n	13526 <__ascii_wctomb+0x12>
   1351c:	238a      	movs	r3, #138	; 0x8a
   1351e:	6003      	str	r3, [r0, #0]
   13520:	3b8b      	subs	r3, #139	; 0x8b
   13522:	0018      	movs	r0, r3
   13524:	4770      	bx	lr
   13526:	700a      	strb	r2, [r1, #0]
   13528:	2301      	movs	r3, #1
   1352a:	e7fa      	b.n	13522 <__ascii_wctomb+0xe>

0001352c <__swsetup_r>:
   1352c:	4b36      	ldr	r3, [pc, #216]	; (13608 <__swsetup_r+0xdc>)
   1352e:	b570      	push	{r4, r5, r6, lr}
   13530:	681d      	ldr	r5, [r3, #0]
   13532:	0006      	movs	r6, r0
   13534:	000c      	movs	r4, r1
   13536:	2d00      	cmp	r5, #0
   13538:	d005      	beq.n	13546 <__swsetup_r+0x1a>
   1353a:	69ab      	ldr	r3, [r5, #24]
   1353c:	2b00      	cmp	r3, #0
   1353e:	d102      	bne.n	13546 <__swsetup_r+0x1a>
   13540:	0028      	movs	r0, r5
   13542:	f000 ffcd 	bl	144e0 <__sinit>
   13546:	4b31      	ldr	r3, [pc, #196]	; (1360c <__swsetup_r+0xe0>)
   13548:	429c      	cmp	r4, r3
   1354a:	d10f      	bne.n	1356c <__swsetup_r+0x40>
   1354c:	686c      	ldr	r4, [r5, #4]
   1354e:	230c      	movs	r3, #12
   13550:	5ee2      	ldrsh	r2, [r4, r3]
   13552:	b293      	uxth	r3, r2
   13554:	0719      	lsls	r1, r3, #28
   13556:	d42d      	bmi.n	135b4 <__swsetup_r+0x88>
   13558:	06d9      	lsls	r1, r3, #27
   1355a:	d411      	bmi.n	13580 <__swsetup_r+0x54>
   1355c:	2309      	movs	r3, #9
   1355e:	2001      	movs	r0, #1
   13560:	6033      	str	r3, [r6, #0]
   13562:	3337      	adds	r3, #55	; 0x37
   13564:	4313      	orrs	r3, r2
   13566:	81a3      	strh	r3, [r4, #12]
   13568:	4240      	negs	r0, r0
   1356a:	bd70      	pop	{r4, r5, r6, pc}
   1356c:	4b28      	ldr	r3, [pc, #160]	; (13610 <__swsetup_r+0xe4>)
   1356e:	429c      	cmp	r4, r3
   13570:	d101      	bne.n	13576 <__swsetup_r+0x4a>
   13572:	68ac      	ldr	r4, [r5, #8]
   13574:	e7eb      	b.n	1354e <__swsetup_r+0x22>
   13576:	4b27      	ldr	r3, [pc, #156]	; (13614 <__swsetup_r+0xe8>)
   13578:	429c      	cmp	r4, r3
   1357a:	d1e8      	bne.n	1354e <__swsetup_r+0x22>
   1357c:	68ec      	ldr	r4, [r5, #12]
   1357e:	e7e6      	b.n	1354e <__swsetup_r+0x22>
   13580:	075b      	lsls	r3, r3, #29
   13582:	d513      	bpl.n	135ac <__swsetup_r+0x80>
   13584:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13586:	2900      	cmp	r1, #0
   13588:	d008      	beq.n	1359c <__swsetup_r+0x70>
   1358a:	0023      	movs	r3, r4
   1358c:	3344      	adds	r3, #68	; 0x44
   1358e:	4299      	cmp	r1, r3
   13590:	d002      	beq.n	13598 <__swsetup_r+0x6c>
   13592:	0030      	movs	r0, r6
   13594:	f7fe ffd4 	bl	12540 <_free_r>
   13598:	2300      	movs	r3, #0
   1359a:	6363      	str	r3, [r4, #52]	; 0x34
   1359c:	2224      	movs	r2, #36	; 0x24
   1359e:	89a3      	ldrh	r3, [r4, #12]
   135a0:	4393      	bics	r3, r2
   135a2:	81a3      	strh	r3, [r4, #12]
   135a4:	2300      	movs	r3, #0
   135a6:	6063      	str	r3, [r4, #4]
   135a8:	6923      	ldr	r3, [r4, #16]
   135aa:	6023      	str	r3, [r4, #0]
   135ac:	2308      	movs	r3, #8
   135ae:	89a2      	ldrh	r2, [r4, #12]
   135b0:	4313      	orrs	r3, r2
   135b2:	81a3      	strh	r3, [r4, #12]
   135b4:	6923      	ldr	r3, [r4, #16]
   135b6:	2b00      	cmp	r3, #0
   135b8:	d10b      	bne.n	135d2 <__swsetup_r+0xa6>
   135ba:	21a0      	movs	r1, #160	; 0xa0
   135bc:	2280      	movs	r2, #128	; 0x80
   135be:	89a3      	ldrh	r3, [r4, #12]
   135c0:	0089      	lsls	r1, r1, #2
   135c2:	0092      	lsls	r2, r2, #2
   135c4:	400b      	ands	r3, r1
   135c6:	4293      	cmp	r3, r2
   135c8:	d003      	beq.n	135d2 <__swsetup_r+0xa6>
   135ca:	0021      	movs	r1, r4
   135cc:	0030      	movs	r0, r6
   135ce:	f001 f851 	bl	14674 <__smakebuf_r>
   135d2:	2301      	movs	r3, #1
   135d4:	89a2      	ldrh	r2, [r4, #12]
   135d6:	4013      	ands	r3, r2
   135d8:	d011      	beq.n	135fe <__swsetup_r+0xd2>
   135da:	2300      	movs	r3, #0
   135dc:	60a3      	str	r3, [r4, #8]
   135de:	6963      	ldr	r3, [r4, #20]
   135e0:	425b      	negs	r3, r3
   135e2:	61a3      	str	r3, [r4, #24]
   135e4:	2000      	movs	r0, #0
   135e6:	6923      	ldr	r3, [r4, #16]
   135e8:	4283      	cmp	r3, r0
   135ea:	d1be      	bne.n	1356a <__swsetup_r+0x3e>
   135ec:	230c      	movs	r3, #12
   135ee:	5ee2      	ldrsh	r2, [r4, r3]
   135f0:	0613      	lsls	r3, r2, #24
   135f2:	d5ba      	bpl.n	1356a <__swsetup_r+0x3e>
   135f4:	2340      	movs	r3, #64	; 0x40
   135f6:	4313      	orrs	r3, r2
   135f8:	81a3      	strh	r3, [r4, #12]
   135fa:	3801      	subs	r0, #1
   135fc:	e7b5      	b.n	1356a <__swsetup_r+0x3e>
   135fe:	0792      	lsls	r2, r2, #30
   13600:	d400      	bmi.n	13604 <__swsetup_r+0xd8>
   13602:	6963      	ldr	r3, [r4, #20]
   13604:	60a3      	str	r3, [r4, #8]
   13606:	e7ed      	b.n	135e4 <__swsetup_r+0xb8>
   13608:	20000018 	.word	0x20000018
   1360c:	0001a100 	.word	0x0001a100
   13610:	0001a120 	.word	0x0001a120
   13614:	0001a0e0 	.word	0x0001a0e0

00013618 <quorem>:
   13618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1361a:	6903      	ldr	r3, [r0, #16]
   1361c:	690c      	ldr	r4, [r1, #16]
   1361e:	b089      	sub	sp, #36	; 0x24
   13620:	0007      	movs	r7, r0
   13622:	9105      	str	r1, [sp, #20]
   13624:	2600      	movs	r6, #0
   13626:	429c      	cmp	r4, r3
   13628:	dc6d      	bgt.n	13706 <quorem+0xee>
   1362a:	000b      	movs	r3, r1
   1362c:	3c01      	subs	r4, #1
   1362e:	3314      	adds	r3, #20
   13630:	00a5      	lsls	r5, r4, #2
   13632:	9303      	str	r3, [sp, #12]
   13634:	195b      	adds	r3, r3, r5
   13636:	9304      	str	r3, [sp, #16]
   13638:	0003      	movs	r3, r0
   1363a:	3314      	adds	r3, #20
   1363c:	9302      	str	r3, [sp, #8]
   1363e:	195d      	adds	r5, r3, r5
   13640:	9b04      	ldr	r3, [sp, #16]
   13642:	6828      	ldr	r0, [r5, #0]
   13644:	681b      	ldr	r3, [r3, #0]
   13646:	1c59      	adds	r1, r3, #1
   13648:	9301      	str	r3, [sp, #4]
   1364a:	f001 ff2b 	bl	154a4 <__udivsi3>
   1364e:	9001      	str	r0, [sp, #4]
   13650:	42b0      	cmp	r0, r6
   13652:	d02d      	beq.n	136b0 <quorem+0x98>
   13654:	9b03      	ldr	r3, [sp, #12]
   13656:	9802      	ldr	r0, [sp, #8]
   13658:	469c      	mov	ip, r3
   1365a:	9606      	str	r6, [sp, #24]
   1365c:	4662      	mov	r2, ip
   1365e:	ca08      	ldmia	r2!, {r3}
   13660:	4694      	mov	ip, r2
   13662:	9a01      	ldr	r2, [sp, #4]
   13664:	b299      	uxth	r1, r3
   13666:	4351      	muls	r1, r2
   13668:	0c1b      	lsrs	r3, r3, #16
   1366a:	4353      	muls	r3, r2
   1366c:	1989      	adds	r1, r1, r6
   1366e:	0c0a      	lsrs	r2, r1, #16
   13670:	189b      	adds	r3, r3, r2
   13672:	9307      	str	r3, [sp, #28]
   13674:	8802      	ldrh	r2, [r0, #0]
   13676:	0c1e      	lsrs	r6, r3, #16
   13678:	9b06      	ldr	r3, [sp, #24]
   1367a:	b289      	uxth	r1, r1
   1367c:	18d2      	adds	r2, r2, r3
   1367e:	6803      	ldr	r3, [r0, #0]
   13680:	1a52      	subs	r2, r2, r1
   13682:	0c19      	lsrs	r1, r3, #16
   13684:	466b      	mov	r3, sp
   13686:	8b9b      	ldrh	r3, [r3, #28]
   13688:	1acb      	subs	r3, r1, r3
   1368a:	1411      	asrs	r1, r2, #16
   1368c:	185b      	adds	r3, r3, r1
   1368e:	1419      	asrs	r1, r3, #16
   13690:	b292      	uxth	r2, r2
   13692:	041b      	lsls	r3, r3, #16
   13694:	431a      	orrs	r2, r3
   13696:	9b04      	ldr	r3, [sp, #16]
   13698:	9106      	str	r1, [sp, #24]
   1369a:	c004      	stmia	r0!, {r2}
   1369c:	4563      	cmp	r3, ip
   1369e:	d2dd      	bcs.n	1365c <quorem+0x44>
   136a0:	682b      	ldr	r3, [r5, #0]
   136a2:	2b00      	cmp	r3, #0
   136a4:	d104      	bne.n	136b0 <quorem+0x98>
   136a6:	9b02      	ldr	r3, [sp, #8]
   136a8:	3d04      	subs	r5, #4
   136aa:	42ab      	cmp	r3, r5
   136ac:	d32e      	bcc.n	1370c <quorem+0xf4>
   136ae:	613c      	str	r4, [r7, #16]
   136b0:	9905      	ldr	r1, [sp, #20]
   136b2:	0038      	movs	r0, r7
   136b4:	f001 fa41 	bl	14b3a <__mcmp>
   136b8:	2800      	cmp	r0, #0
   136ba:	db23      	blt.n	13704 <quorem+0xec>
   136bc:	2500      	movs	r5, #0
   136be:	9b01      	ldr	r3, [sp, #4]
   136c0:	9802      	ldr	r0, [sp, #8]
   136c2:	3301      	adds	r3, #1
   136c4:	9903      	ldr	r1, [sp, #12]
   136c6:	9301      	str	r3, [sp, #4]
   136c8:	c908      	ldmia	r1!, {r3}
   136ca:	8802      	ldrh	r2, [r0, #0]
   136cc:	1955      	adds	r5, r2, r5
   136ce:	b29a      	uxth	r2, r3
   136d0:	1aaa      	subs	r2, r5, r2
   136d2:	6805      	ldr	r5, [r0, #0]
   136d4:	0c1b      	lsrs	r3, r3, #16
   136d6:	0c2d      	lsrs	r5, r5, #16
   136d8:	1aeb      	subs	r3, r5, r3
   136da:	1415      	asrs	r5, r2, #16
   136dc:	195b      	adds	r3, r3, r5
   136de:	141d      	asrs	r5, r3, #16
   136e0:	b292      	uxth	r2, r2
   136e2:	041b      	lsls	r3, r3, #16
   136e4:	4313      	orrs	r3, r2
   136e6:	c008      	stmia	r0!, {r3}
   136e8:	9b04      	ldr	r3, [sp, #16]
   136ea:	428b      	cmp	r3, r1
   136ec:	d2ec      	bcs.n	136c8 <quorem+0xb0>
   136ee:	9a02      	ldr	r2, [sp, #8]
   136f0:	00a3      	lsls	r3, r4, #2
   136f2:	18d3      	adds	r3, r2, r3
   136f4:	681a      	ldr	r2, [r3, #0]
   136f6:	2a00      	cmp	r2, #0
   136f8:	d104      	bne.n	13704 <quorem+0xec>
   136fa:	9a02      	ldr	r2, [sp, #8]
   136fc:	3b04      	subs	r3, #4
   136fe:	429a      	cmp	r2, r3
   13700:	d309      	bcc.n	13716 <quorem+0xfe>
   13702:	613c      	str	r4, [r7, #16]
   13704:	9e01      	ldr	r6, [sp, #4]
   13706:	0030      	movs	r0, r6
   13708:	b009      	add	sp, #36	; 0x24
   1370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1370c:	682b      	ldr	r3, [r5, #0]
   1370e:	2b00      	cmp	r3, #0
   13710:	d1cd      	bne.n	136ae <quorem+0x96>
   13712:	3c01      	subs	r4, #1
   13714:	e7c7      	b.n	136a6 <quorem+0x8e>
   13716:	681a      	ldr	r2, [r3, #0]
   13718:	2a00      	cmp	r2, #0
   1371a:	d1f2      	bne.n	13702 <quorem+0xea>
   1371c:	3c01      	subs	r4, #1
   1371e:	e7ec      	b.n	136fa <quorem+0xe2>

00013720 <_dtoa_r>:
   13720:	b5f0      	push	{r4, r5, r6, r7, lr}
   13722:	0016      	movs	r6, r2
   13724:	001f      	movs	r7, r3
   13726:	6a44      	ldr	r4, [r0, #36]	; 0x24
   13728:	b09d      	sub	sp, #116	; 0x74
   1372a:	9004      	str	r0, [sp, #16]
   1372c:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1372e:	9606      	str	r6, [sp, #24]
   13730:	9707      	str	r7, [sp, #28]
   13732:	2c00      	cmp	r4, #0
   13734:	d108      	bne.n	13748 <_dtoa_r+0x28>
   13736:	2010      	movs	r0, #16
   13738:	f7fe feb8 	bl	124ac <malloc>
   1373c:	9b04      	ldr	r3, [sp, #16]
   1373e:	6258      	str	r0, [r3, #36]	; 0x24
   13740:	6044      	str	r4, [r0, #4]
   13742:	6084      	str	r4, [r0, #8]
   13744:	6004      	str	r4, [r0, #0]
   13746:	60c4      	str	r4, [r0, #12]
   13748:	9b04      	ldr	r3, [sp, #16]
   1374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1374c:	6819      	ldr	r1, [r3, #0]
   1374e:	2900      	cmp	r1, #0
   13750:	d00b      	beq.n	1376a <_dtoa_r+0x4a>
   13752:	685a      	ldr	r2, [r3, #4]
   13754:	2301      	movs	r3, #1
   13756:	4093      	lsls	r3, r2
   13758:	604a      	str	r2, [r1, #4]
   1375a:	608b      	str	r3, [r1, #8]
   1375c:	9804      	ldr	r0, [sp, #16]
   1375e:	f001 f812 	bl	14786 <_Bfree>
   13762:	2200      	movs	r2, #0
   13764:	9b04      	ldr	r3, [sp, #16]
   13766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13768:	601a      	str	r2, [r3, #0]
   1376a:	9b07      	ldr	r3, [sp, #28]
   1376c:	2b00      	cmp	r3, #0
   1376e:	da1f      	bge.n	137b0 <_dtoa_r+0x90>
   13770:	2301      	movs	r3, #1
   13772:	602b      	str	r3, [r5, #0]
   13774:	007b      	lsls	r3, r7, #1
   13776:	085b      	lsrs	r3, r3, #1
   13778:	9307      	str	r3, [sp, #28]
   1377a:	9c07      	ldr	r4, [sp, #28]
   1377c:	4bb7      	ldr	r3, [pc, #732]	; (13a5c <_dtoa_r+0x33c>)
   1377e:	0022      	movs	r2, r4
   13780:	9319      	str	r3, [sp, #100]	; 0x64
   13782:	401a      	ands	r2, r3
   13784:	429a      	cmp	r2, r3
   13786:	d116      	bne.n	137b6 <_dtoa_r+0x96>
   13788:	4bb5      	ldr	r3, [pc, #724]	; (13a60 <_dtoa_r+0x340>)
   1378a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1378c:	6013      	str	r3, [r2, #0]
   1378e:	9b06      	ldr	r3, [sp, #24]
   13790:	2b00      	cmp	r3, #0
   13792:	d103      	bne.n	1379c <_dtoa_r+0x7c>
   13794:	0324      	lsls	r4, r4, #12
   13796:	d101      	bne.n	1379c <_dtoa_r+0x7c>
   13798:	f000 fd91 	bl	142be <_dtoa_r+0xb9e>
   1379c:	4bb1      	ldr	r3, [pc, #708]	; (13a64 <_dtoa_r+0x344>)
   1379e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   137a0:	930a      	str	r3, [sp, #40]	; 0x28
   137a2:	4bb1      	ldr	r3, [pc, #708]	; (13a68 <_dtoa_r+0x348>)
   137a4:	2a00      	cmp	r2, #0
   137a6:	d001      	beq.n	137ac <_dtoa_r+0x8c>
   137a8:	f000 fd8f 	bl	142ca <_dtoa_r+0xbaa>
   137ac:	f000 fd8f 	bl	142ce <_dtoa_r+0xbae>
   137b0:	2300      	movs	r3, #0
   137b2:	602b      	str	r3, [r5, #0]
   137b4:	e7e1      	b.n	1377a <_dtoa_r+0x5a>
   137b6:	9e06      	ldr	r6, [sp, #24]
   137b8:	9f07      	ldr	r7, [sp, #28]
   137ba:	2200      	movs	r2, #0
   137bc:	2300      	movs	r3, #0
   137be:	0030      	movs	r0, r6
   137c0:	0039      	movs	r1, r7
   137c2:	f001 fff5 	bl	157b0 <__aeabi_dcmpeq>
   137c6:	1e05      	subs	r5, r0, #0
   137c8:	d00e      	beq.n	137e8 <_dtoa_r+0xc8>
   137ca:	2301      	movs	r3, #1
   137cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   137ce:	6013      	str	r3, [r2, #0]
   137d0:	4ba6      	ldr	r3, [pc, #664]	; (13a6c <_dtoa_r+0x34c>)
   137d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   137d4:	930a      	str	r3, [sp, #40]	; 0x28
   137d6:	2a00      	cmp	r2, #0
   137d8:	d101      	bne.n	137de <_dtoa_r+0xbe>
   137da:	f000 fd78 	bl	142ce <_dtoa_r+0xbae>
   137de:	4aa4      	ldr	r2, [pc, #656]	; (13a70 <_dtoa_r+0x350>)
   137e0:	9926      	ldr	r1, [sp, #152]	; 0x98
   137e2:	600a      	str	r2, [r1, #0]
   137e4:	f000 fd73 	bl	142ce <_dtoa_r+0xbae>
   137e8:	ab1a      	add	r3, sp, #104	; 0x68
   137ea:	9301      	str	r3, [sp, #4]
   137ec:	ab1b      	add	r3, sp, #108	; 0x6c
   137ee:	9300      	str	r3, [sp, #0]
   137f0:	0032      	movs	r2, r6
   137f2:	003b      	movs	r3, r7
   137f4:	9804      	ldr	r0, [sp, #16]
   137f6:	f001 fa1d 	bl	14c34 <__d2b>
   137fa:	0063      	lsls	r3, r4, #1
   137fc:	9005      	str	r0, [sp, #20]
   137fe:	0d5b      	lsrs	r3, r3, #21
   13800:	d100      	bne.n	13804 <_dtoa_r+0xe4>
   13802:	e07f      	b.n	13904 <_dtoa_r+0x1e4>
   13804:	033a      	lsls	r2, r7, #12
   13806:	4c9b      	ldr	r4, [pc, #620]	; (13a74 <_dtoa_r+0x354>)
   13808:	0b12      	lsrs	r2, r2, #12
   1380a:	4314      	orrs	r4, r2
   1380c:	0021      	movs	r1, r4
   1380e:	4a9a      	ldr	r2, [pc, #616]	; (13a78 <_dtoa_r+0x358>)
   13810:	0030      	movs	r0, r6
   13812:	9518      	str	r5, [sp, #96]	; 0x60
   13814:	189e      	adds	r6, r3, r2
   13816:	2200      	movs	r2, #0
   13818:	4b98      	ldr	r3, [pc, #608]	; (13a7c <_dtoa_r+0x35c>)
   1381a:	f003 fc9d 	bl	17158 <__aeabi_dsub>
   1381e:	4a98      	ldr	r2, [pc, #608]	; (13a80 <_dtoa_r+0x360>)
   13820:	4b98      	ldr	r3, [pc, #608]	; (13a84 <_dtoa_r+0x364>)
   13822:	f003 fa19 	bl	16c58 <__aeabi_dmul>
   13826:	4a98      	ldr	r2, [pc, #608]	; (13a88 <_dtoa_r+0x368>)
   13828:	4b98      	ldr	r3, [pc, #608]	; (13a8c <_dtoa_r+0x36c>)
   1382a:	f002 fad1 	bl	15dd0 <__aeabi_dadd>
   1382e:	0004      	movs	r4, r0
   13830:	0030      	movs	r0, r6
   13832:	000d      	movs	r5, r1
   13834:	f003 fffa 	bl	1782c <__aeabi_i2d>
   13838:	4a95      	ldr	r2, [pc, #596]	; (13a90 <_dtoa_r+0x370>)
   1383a:	4b96      	ldr	r3, [pc, #600]	; (13a94 <_dtoa_r+0x374>)
   1383c:	f003 fa0c 	bl	16c58 <__aeabi_dmul>
   13840:	0002      	movs	r2, r0
   13842:	000b      	movs	r3, r1
   13844:	0020      	movs	r0, r4
   13846:	0029      	movs	r1, r5
   13848:	f002 fac2 	bl	15dd0 <__aeabi_dadd>
   1384c:	0004      	movs	r4, r0
   1384e:	000d      	movs	r5, r1
   13850:	f003 ffb8 	bl	177c4 <__aeabi_d2iz>
   13854:	2200      	movs	r2, #0
   13856:	9003      	str	r0, [sp, #12]
   13858:	2300      	movs	r3, #0
   1385a:	0020      	movs	r0, r4
   1385c:	0029      	movs	r1, r5
   1385e:	f001 ffad 	bl	157bc <__aeabi_dcmplt>
   13862:	2800      	cmp	r0, #0
   13864:	d00e      	beq.n	13884 <_dtoa_r+0x164>
   13866:	9803      	ldr	r0, [sp, #12]
   13868:	f003 ffe0 	bl	1782c <__aeabi_i2d>
   1386c:	000b      	movs	r3, r1
   1386e:	0002      	movs	r2, r0
   13870:	0029      	movs	r1, r5
   13872:	0020      	movs	r0, r4
   13874:	f001 ff9c 	bl	157b0 <__aeabi_dcmpeq>
   13878:	0003      	movs	r3, r0
   1387a:	4258      	negs	r0, r3
   1387c:	4158      	adcs	r0, r3
   1387e:	9b03      	ldr	r3, [sp, #12]
   13880:	1a1b      	subs	r3, r3, r0
   13882:	9303      	str	r3, [sp, #12]
   13884:	2301      	movs	r3, #1
   13886:	9316      	str	r3, [sp, #88]	; 0x58
   13888:	9b03      	ldr	r3, [sp, #12]
   1388a:	2b16      	cmp	r3, #22
   1388c:	d80f      	bhi.n	138ae <_dtoa_r+0x18e>
   1388e:	4982      	ldr	r1, [pc, #520]	; (13a98 <_dtoa_r+0x378>)
   13890:	00db      	lsls	r3, r3, #3
   13892:	18c9      	adds	r1, r1, r3
   13894:	6808      	ldr	r0, [r1, #0]
   13896:	6849      	ldr	r1, [r1, #4]
   13898:	9a06      	ldr	r2, [sp, #24]
   1389a:	9b07      	ldr	r3, [sp, #28]
   1389c:	f001 ffa2 	bl	157e4 <__aeabi_dcmpgt>
   138a0:	2800      	cmp	r0, #0
   138a2:	d04b      	beq.n	1393c <_dtoa_r+0x21c>
   138a4:	9b03      	ldr	r3, [sp, #12]
   138a6:	3b01      	subs	r3, #1
   138a8:	9303      	str	r3, [sp, #12]
   138aa:	2300      	movs	r3, #0
   138ac:	9316      	str	r3, [sp, #88]	; 0x58
   138ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   138b0:	1b9e      	subs	r6, r3, r6
   138b2:	2300      	movs	r3, #0
   138b4:	930b      	str	r3, [sp, #44]	; 0x2c
   138b6:	0033      	movs	r3, r6
   138b8:	3b01      	subs	r3, #1
   138ba:	930c      	str	r3, [sp, #48]	; 0x30
   138bc:	d504      	bpl.n	138c8 <_dtoa_r+0x1a8>
   138be:	2301      	movs	r3, #1
   138c0:	1b9b      	subs	r3, r3, r6
   138c2:	930b      	str	r3, [sp, #44]	; 0x2c
   138c4:	2300      	movs	r3, #0
   138c6:	930c      	str	r3, [sp, #48]	; 0x30
   138c8:	9b03      	ldr	r3, [sp, #12]
   138ca:	2b00      	cmp	r3, #0
   138cc:	db38      	blt.n	13940 <_dtoa_r+0x220>
   138ce:	9a03      	ldr	r2, [sp, #12]
   138d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   138d2:	4694      	mov	ip, r2
   138d4:	4463      	add	r3, ip
   138d6:	930c      	str	r3, [sp, #48]	; 0x30
   138d8:	2300      	movs	r3, #0
   138da:	920f      	str	r2, [sp, #60]	; 0x3c
   138dc:	9308      	str	r3, [sp, #32]
   138de:	9b22      	ldr	r3, [sp, #136]	; 0x88
   138e0:	2501      	movs	r5, #1
   138e2:	2b09      	cmp	r3, #9
   138e4:	d900      	bls.n	138e8 <_dtoa_r+0x1c8>
   138e6:	e091      	b.n	13a0c <_dtoa_r+0x2ec>
   138e8:	2b05      	cmp	r3, #5
   138ea:	dd02      	ble.n	138f2 <_dtoa_r+0x1d2>
   138ec:	2500      	movs	r5, #0
   138ee:	3b04      	subs	r3, #4
   138f0:	9322      	str	r3, [sp, #136]	; 0x88
   138f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   138f4:	1e98      	subs	r0, r3, #2
   138f6:	2803      	cmp	r0, #3
   138f8:	d900      	bls.n	138fc <_dtoa_r+0x1dc>
   138fa:	e091      	b.n	13a20 <_dtoa_r+0x300>
   138fc:	f001 fdc8 	bl	15490 <__gnu_thumb1_case_uqi>
   13900:	76298482 	.word	0x76298482
   13904:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13906:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13908:	189e      	adds	r6, r3, r2
   1390a:	4b64      	ldr	r3, [pc, #400]	; (13a9c <_dtoa_r+0x37c>)
   1390c:	18f2      	adds	r2, r6, r3
   1390e:	2a20      	cmp	r2, #32
   13910:	dd0f      	ble.n	13932 <_dtoa_r+0x212>
   13912:	4b63      	ldr	r3, [pc, #396]	; (13aa0 <_dtoa_r+0x380>)
   13914:	9806      	ldr	r0, [sp, #24]
   13916:	18f3      	adds	r3, r6, r3
   13918:	40d8      	lsrs	r0, r3
   1391a:	2340      	movs	r3, #64	; 0x40
   1391c:	1a9b      	subs	r3, r3, r2
   1391e:	409c      	lsls	r4, r3
   13920:	4320      	orrs	r0, r4
   13922:	f003 ffc5 	bl	178b0 <__aeabi_ui2d>
   13926:	2301      	movs	r3, #1
   13928:	4c5e      	ldr	r4, [pc, #376]	; (13aa4 <_dtoa_r+0x384>)
   1392a:	3e01      	subs	r6, #1
   1392c:	1909      	adds	r1, r1, r4
   1392e:	9318      	str	r3, [sp, #96]	; 0x60
   13930:	e771      	b.n	13816 <_dtoa_r+0xf6>
   13932:	2320      	movs	r3, #32
   13934:	9806      	ldr	r0, [sp, #24]
   13936:	1a9b      	subs	r3, r3, r2
   13938:	4098      	lsls	r0, r3
   1393a:	e7f2      	b.n	13922 <_dtoa_r+0x202>
   1393c:	9016      	str	r0, [sp, #88]	; 0x58
   1393e:	e7b6      	b.n	138ae <_dtoa_r+0x18e>
   13940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13942:	9a03      	ldr	r2, [sp, #12]
   13944:	1a9b      	subs	r3, r3, r2
   13946:	930b      	str	r3, [sp, #44]	; 0x2c
   13948:	4253      	negs	r3, r2
   1394a:	9308      	str	r3, [sp, #32]
   1394c:	2300      	movs	r3, #0
   1394e:	930f      	str	r3, [sp, #60]	; 0x3c
   13950:	e7c5      	b.n	138de <_dtoa_r+0x1be>
   13952:	2301      	movs	r3, #1
   13954:	930e      	str	r3, [sp, #56]	; 0x38
   13956:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13958:	2b00      	cmp	r3, #0
   1395a:	dd65      	ble.n	13a28 <_dtoa_r+0x308>
   1395c:	001f      	movs	r7, r3
   1395e:	930d      	str	r3, [sp, #52]	; 0x34
   13960:	9a04      	ldr	r2, [sp, #16]
   13962:	6a54      	ldr	r4, [r2, #36]	; 0x24
   13964:	2200      	movs	r2, #0
   13966:	6062      	str	r2, [r4, #4]
   13968:	3204      	adds	r2, #4
   1396a:	0011      	movs	r1, r2
   1396c:	3114      	adds	r1, #20
   1396e:	4299      	cmp	r1, r3
   13970:	d95f      	bls.n	13a32 <_dtoa_r+0x312>
   13972:	6861      	ldr	r1, [r4, #4]
   13974:	9804      	ldr	r0, [sp, #16]
   13976:	f000 fece 	bl	14716 <_Balloc>
   1397a:	9b04      	ldr	r3, [sp, #16]
   1397c:	6020      	str	r0, [r4, #0]
   1397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13980:	681b      	ldr	r3, [r3, #0]
   13982:	930a      	str	r3, [sp, #40]	; 0x28
   13984:	2f0e      	cmp	r7, #14
   13986:	d900      	bls.n	1398a <_dtoa_r+0x26a>
   13988:	e105      	b.n	13b96 <_dtoa_r+0x476>
   1398a:	2d00      	cmp	r5, #0
   1398c:	d100      	bne.n	13990 <_dtoa_r+0x270>
   1398e:	e102      	b.n	13b96 <_dtoa_r+0x476>
   13990:	9b06      	ldr	r3, [sp, #24]
   13992:	9c07      	ldr	r4, [sp, #28]
   13994:	9314      	str	r3, [sp, #80]	; 0x50
   13996:	9415      	str	r4, [sp, #84]	; 0x54
   13998:	9b03      	ldr	r3, [sp, #12]
   1399a:	2b00      	cmp	r3, #0
   1399c:	dc00      	bgt.n	139a0 <_dtoa_r+0x280>
   1399e:	e085      	b.n	13aac <_dtoa_r+0x38c>
   139a0:	001a      	movs	r2, r3
   139a2:	210f      	movs	r1, #15
   139a4:	4b3c      	ldr	r3, [pc, #240]	; (13a98 <_dtoa_r+0x378>)
   139a6:	400a      	ands	r2, r1
   139a8:	00d2      	lsls	r2, r2, #3
   139aa:	189b      	adds	r3, r3, r2
   139ac:	685c      	ldr	r4, [r3, #4]
   139ae:	681b      	ldr	r3, [r3, #0]
   139b0:	9310      	str	r3, [sp, #64]	; 0x40
   139b2:	9411      	str	r4, [sp, #68]	; 0x44
   139b4:	9b03      	ldr	r3, [sp, #12]
   139b6:	2402      	movs	r4, #2
   139b8:	111d      	asrs	r5, r3, #4
   139ba:	06eb      	lsls	r3, r5, #27
   139bc:	d50a      	bpl.n	139d4 <_dtoa_r+0x2b4>
   139be:	4b3a      	ldr	r3, [pc, #232]	; (13aa8 <_dtoa_r+0x388>)
   139c0:	400d      	ands	r5, r1
   139c2:	6a1a      	ldr	r2, [r3, #32]
   139c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   139c6:	9814      	ldr	r0, [sp, #80]	; 0x50
   139c8:	9915      	ldr	r1, [sp, #84]	; 0x54
   139ca:	f002 fd11 	bl	163f0 <__aeabi_ddiv>
   139ce:	9006      	str	r0, [sp, #24]
   139d0:	9107      	str	r1, [sp, #28]
   139d2:	3401      	adds	r4, #1
   139d4:	4e34      	ldr	r6, [pc, #208]	; (13aa8 <_dtoa_r+0x388>)
   139d6:	2d00      	cmp	r5, #0
   139d8:	d130      	bne.n	13a3c <_dtoa_r+0x31c>
   139da:	9a10      	ldr	r2, [sp, #64]	; 0x40
   139dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   139de:	9806      	ldr	r0, [sp, #24]
   139e0:	9907      	ldr	r1, [sp, #28]
   139e2:	f002 fd05 	bl	163f0 <__aeabi_ddiv>
   139e6:	9006      	str	r0, [sp, #24]
   139e8:	9107      	str	r1, [sp, #28]
   139ea:	e07a      	b.n	13ae2 <_dtoa_r+0x3c2>
   139ec:	2301      	movs	r3, #1
   139ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   139f0:	930e      	str	r3, [sp, #56]	; 0x38
   139f2:	4694      	mov	ip, r2
   139f4:	9b03      	ldr	r3, [sp, #12]
   139f6:	4463      	add	r3, ip
   139f8:	1c5f      	adds	r7, r3, #1
   139fa:	930d      	str	r3, [sp, #52]	; 0x34
   139fc:	1e3b      	subs	r3, r7, #0
   139fe:	dcaf      	bgt.n	13960 <_dtoa_r+0x240>
   13a00:	2301      	movs	r3, #1
   13a02:	e7ad      	b.n	13960 <_dtoa_r+0x240>
   13a04:	2300      	movs	r3, #0
   13a06:	e7a5      	b.n	13954 <_dtoa_r+0x234>
   13a08:	2300      	movs	r3, #0
   13a0a:	e7f0      	b.n	139ee <_dtoa_r+0x2ce>
   13a0c:	2300      	movs	r3, #0
   13a0e:	950e      	str	r5, [sp, #56]	; 0x38
   13a10:	9322      	str	r3, [sp, #136]	; 0x88
   13a12:	3b01      	subs	r3, #1
   13a14:	2200      	movs	r2, #0
   13a16:	930d      	str	r3, [sp, #52]	; 0x34
   13a18:	001f      	movs	r7, r3
   13a1a:	3313      	adds	r3, #19
   13a1c:	9223      	str	r2, [sp, #140]	; 0x8c
   13a1e:	e79f      	b.n	13960 <_dtoa_r+0x240>
   13a20:	2301      	movs	r3, #1
   13a22:	930e      	str	r3, [sp, #56]	; 0x38
   13a24:	3b02      	subs	r3, #2
   13a26:	e7f5      	b.n	13a14 <_dtoa_r+0x2f4>
   13a28:	2301      	movs	r3, #1
   13a2a:	930d      	str	r3, [sp, #52]	; 0x34
   13a2c:	001f      	movs	r7, r3
   13a2e:	001a      	movs	r2, r3
   13a30:	e7f4      	b.n	13a1c <_dtoa_r+0x2fc>
   13a32:	6861      	ldr	r1, [r4, #4]
   13a34:	0052      	lsls	r2, r2, #1
   13a36:	3101      	adds	r1, #1
   13a38:	6061      	str	r1, [r4, #4]
   13a3a:	e796      	b.n	1396a <_dtoa_r+0x24a>
   13a3c:	2301      	movs	r3, #1
   13a3e:	421d      	tst	r5, r3
   13a40:	d008      	beq.n	13a54 <_dtoa_r+0x334>
   13a42:	9810      	ldr	r0, [sp, #64]	; 0x40
   13a44:	9911      	ldr	r1, [sp, #68]	; 0x44
   13a46:	18e4      	adds	r4, r4, r3
   13a48:	6832      	ldr	r2, [r6, #0]
   13a4a:	6873      	ldr	r3, [r6, #4]
   13a4c:	f003 f904 	bl	16c58 <__aeabi_dmul>
   13a50:	9010      	str	r0, [sp, #64]	; 0x40
   13a52:	9111      	str	r1, [sp, #68]	; 0x44
   13a54:	106d      	asrs	r5, r5, #1
   13a56:	3608      	adds	r6, #8
   13a58:	e7bd      	b.n	139d6 <_dtoa_r+0x2b6>
   13a5a:	46c0      	nop			; (mov r8, r8)
   13a5c:	7ff00000 	.word	0x7ff00000
   13a60:	0000270f 	.word	0x0000270f
   13a64:	0001a0dc 	.word	0x0001a0dc
   13a68:	0001a0df 	.word	0x0001a0df
   13a6c:	00019fae 	.word	0x00019fae
   13a70:	00019faf 	.word	0x00019faf
   13a74:	3ff00000 	.word	0x3ff00000
   13a78:	fffffc01 	.word	0xfffffc01
   13a7c:	3ff80000 	.word	0x3ff80000
   13a80:	636f4361 	.word	0x636f4361
   13a84:	3fd287a7 	.word	0x3fd287a7
   13a88:	8b60c8b3 	.word	0x8b60c8b3
   13a8c:	3fc68a28 	.word	0x3fc68a28
   13a90:	509f79fb 	.word	0x509f79fb
   13a94:	3fd34413 	.word	0x3fd34413
   13a98:	0001a168 	.word	0x0001a168
   13a9c:	00000432 	.word	0x00000432
   13aa0:	00000412 	.word	0x00000412
   13aa4:	fe100000 	.word	0xfe100000
   13aa8:	0001a140 	.word	0x0001a140
   13aac:	9b03      	ldr	r3, [sp, #12]
   13aae:	2402      	movs	r4, #2
   13ab0:	2b00      	cmp	r3, #0
   13ab2:	d016      	beq.n	13ae2 <_dtoa_r+0x3c2>
   13ab4:	9814      	ldr	r0, [sp, #80]	; 0x50
   13ab6:	9915      	ldr	r1, [sp, #84]	; 0x54
   13ab8:	425d      	negs	r5, r3
   13aba:	230f      	movs	r3, #15
   13abc:	4aca      	ldr	r2, [pc, #808]	; (13de8 <_dtoa_r+0x6c8>)
   13abe:	402b      	ands	r3, r5
   13ac0:	00db      	lsls	r3, r3, #3
   13ac2:	18d3      	adds	r3, r2, r3
   13ac4:	681a      	ldr	r2, [r3, #0]
   13ac6:	685b      	ldr	r3, [r3, #4]
   13ac8:	f003 f8c6 	bl	16c58 <__aeabi_dmul>
   13acc:	2300      	movs	r3, #0
   13ace:	9006      	str	r0, [sp, #24]
   13ad0:	9107      	str	r1, [sp, #28]
   13ad2:	4ec6      	ldr	r6, [pc, #792]	; (13dec <_dtoa_r+0x6cc>)
   13ad4:	112d      	asrs	r5, r5, #4
   13ad6:	2d00      	cmp	r5, #0
   13ad8:	d000      	beq.n	13adc <_dtoa_r+0x3bc>
   13ada:	e08c      	b.n	13bf6 <_dtoa_r+0x4d6>
   13adc:	2b00      	cmp	r3, #0
   13ade:	d000      	beq.n	13ae2 <_dtoa_r+0x3c2>
   13ae0:	e781      	b.n	139e6 <_dtoa_r+0x2c6>
   13ae2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13ae4:	2b00      	cmp	r3, #0
   13ae6:	d100      	bne.n	13aea <_dtoa_r+0x3ca>
   13ae8:	e091      	b.n	13c0e <_dtoa_r+0x4ee>
   13aea:	9a06      	ldr	r2, [sp, #24]
   13aec:	9b07      	ldr	r3, [sp, #28]
   13aee:	9210      	str	r2, [sp, #64]	; 0x40
   13af0:	9311      	str	r3, [sp, #68]	; 0x44
   13af2:	9810      	ldr	r0, [sp, #64]	; 0x40
   13af4:	9911      	ldr	r1, [sp, #68]	; 0x44
   13af6:	2200      	movs	r2, #0
   13af8:	4bbd      	ldr	r3, [pc, #756]	; (13df0 <_dtoa_r+0x6d0>)
   13afa:	f001 fe5f 	bl	157bc <__aeabi_dcmplt>
   13afe:	2800      	cmp	r0, #0
   13b00:	d100      	bne.n	13b04 <_dtoa_r+0x3e4>
   13b02:	e084      	b.n	13c0e <_dtoa_r+0x4ee>
   13b04:	2f00      	cmp	r7, #0
   13b06:	d100      	bne.n	13b0a <_dtoa_r+0x3ea>
   13b08:	e081      	b.n	13c0e <_dtoa_r+0x4ee>
   13b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13b0c:	2b00      	cmp	r3, #0
   13b0e:	dd3e      	ble.n	13b8e <_dtoa_r+0x46e>
   13b10:	9810      	ldr	r0, [sp, #64]	; 0x40
   13b12:	9911      	ldr	r1, [sp, #68]	; 0x44
   13b14:	9b03      	ldr	r3, [sp, #12]
   13b16:	2200      	movs	r2, #0
   13b18:	1e5e      	subs	r6, r3, #1
   13b1a:	4bb6      	ldr	r3, [pc, #728]	; (13df4 <_dtoa_r+0x6d4>)
   13b1c:	f003 f89c 	bl	16c58 <__aeabi_dmul>
   13b20:	9006      	str	r0, [sp, #24]
   13b22:	9107      	str	r1, [sp, #28]
   13b24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13b26:	3401      	adds	r4, #1
   13b28:	0020      	movs	r0, r4
   13b2a:	f003 fe7f 	bl	1782c <__aeabi_i2d>
   13b2e:	9a06      	ldr	r2, [sp, #24]
   13b30:	9b07      	ldr	r3, [sp, #28]
   13b32:	f003 f891 	bl	16c58 <__aeabi_dmul>
   13b36:	2200      	movs	r2, #0
   13b38:	4baf      	ldr	r3, [pc, #700]	; (13df8 <_dtoa_r+0x6d8>)
   13b3a:	f002 f949 	bl	15dd0 <__aeabi_dadd>
   13b3e:	9012      	str	r0, [sp, #72]	; 0x48
   13b40:	9113      	str	r1, [sp, #76]	; 0x4c
   13b42:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13b44:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   13b46:	4aad      	ldr	r2, [pc, #692]	; (13dfc <_dtoa_r+0x6dc>)
   13b48:	9310      	str	r3, [sp, #64]	; 0x40
   13b4a:	9411      	str	r4, [sp, #68]	; 0x44
   13b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13b4e:	189c      	adds	r4, r3, r2
   13b50:	9411      	str	r4, [sp, #68]	; 0x44
   13b52:	2d00      	cmp	r5, #0
   13b54:	d15e      	bne.n	13c14 <_dtoa_r+0x4f4>
   13b56:	9806      	ldr	r0, [sp, #24]
   13b58:	9907      	ldr	r1, [sp, #28]
   13b5a:	2200      	movs	r2, #0
   13b5c:	4ba8      	ldr	r3, [pc, #672]	; (13e00 <_dtoa_r+0x6e0>)
   13b5e:	f003 fafb 	bl	17158 <__aeabi_dsub>
   13b62:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13b64:	0023      	movs	r3, r4
   13b66:	9006      	str	r0, [sp, #24]
   13b68:	9107      	str	r1, [sp, #28]
   13b6a:	f001 fe3b 	bl	157e4 <__aeabi_dcmpgt>
   13b6e:	2800      	cmp	r0, #0
   13b70:	d000      	beq.n	13b74 <_dtoa_r+0x454>
   13b72:	e301      	b.n	14178 <_dtoa_r+0xa58>
   13b74:	48a3      	ldr	r0, [pc, #652]	; (13e04 <_dtoa_r+0x6e4>)
   13b76:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13b78:	4684      	mov	ip, r0
   13b7a:	4461      	add	r1, ip
   13b7c:	000b      	movs	r3, r1
   13b7e:	9806      	ldr	r0, [sp, #24]
   13b80:	9907      	ldr	r1, [sp, #28]
   13b82:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13b84:	f001 fe1a 	bl	157bc <__aeabi_dcmplt>
   13b88:	2800      	cmp	r0, #0
   13b8a:	d000      	beq.n	13b8e <_dtoa_r+0x46e>
   13b8c:	e2e8      	b.n	14160 <_dtoa_r+0xa40>
   13b8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13b90:	9c15      	ldr	r4, [sp, #84]	; 0x54
   13b92:	9306      	str	r3, [sp, #24]
   13b94:	9407      	str	r4, [sp, #28]
   13b96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13b98:	2b00      	cmp	r3, #0
   13b9a:	da00      	bge.n	13b9e <_dtoa_r+0x47e>
   13b9c:	e157      	b.n	13e4e <_dtoa_r+0x72e>
   13b9e:	9a03      	ldr	r2, [sp, #12]
   13ba0:	2a0e      	cmp	r2, #14
   13ba2:	dd00      	ble.n	13ba6 <_dtoa_r+0x486>
   13ba4:	e153      	b.n	13e4e <_dtoa_r+0x72e>
   13ba6:	4b90      	ldr	r3, [pc, #576]	; (13de8 <_dtoa_r+0x6c8>)
   13ba8:	00d2      	lsls	r2, r2, #3
   13baa:	189b      	adds	r3, r3, r2
   13bac:	685c      	ldr	r4, [r3, #4]
   13bae:	681b      	ldr	r3, [r3, #0]
   13bb0:	9308      	str	r3, [sp, #32]
   13bb2:	9409      	str	r4, [sp, #36]	; 0x24
   13bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13bb6:	2b00      	cmp	r3, #0
   13bb8:	db00      	blt.n	13bbc <_dtoa_r+0x49c>
   13bba:	e0ce      	b.n	13d5a <_dtoa_r+0x63a>
   13bbc:	2f00      	cmp	r7, #0
   13bbe:	dd00      	ble.n	13bc2 <_dtoa_r+0x4a2>
   13bc0:	e0cb      	b.n	13d5a <_dtoa_r+0x63a>
   13bc2:	d000      	beq.n	13bc6 <_dtoa_r+0x4a6>
   13bc4:	e2cf      	b.n	14166 <_dtoa_r+0xa46>
   13bc6:	9808      	ldr	r0, [sp, #32]
   13bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
   13bca:	2200      	movs	r2, #0
   13bcc:	4b8c      	ldr	r3, [pc, #560]	; (13e00 <_dtoa_r+0x6e0>)
   13bce:	f003 f843 	bl	16c58 <__aeabi_dmul>
   13bd2:	9a06      	ldr	r2, [sp, #24]
   13bd4:	9b07      	ldr	r3, [sp, #28]
   13bd6:	f001 fe0f 	bl	157f8 <__aeabi_dcmpge>
   13bda:	003e      	movs	r6, r7
   13bdc:	9708      	str	r7, [sp, #32]
   13bde:	2800      	cmp	r0, #0
   13be0:	d000      	beq.n	13be4 <_dtoa_r+0x4c4>
   13be2:	e2a4      	b.n	1412e <_dtoa_r+0xa0e>
   13be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13be8:	1c5d      	adds	r5, r3, #1
   13bea:	2331      	movs	r3, #49	; 0x31
   13bec:	7013      	strb	r3, [r2, #0]
   13bee:	9b03      	ldr	r3, [sp, #12]
   13bf0:	3301      	adds	r3, #1
   13bf2:	9303      	str	r3, [sp, #12]
   13bf4:	e29f      	b.n	14136 <_dtoa_r+0xa16>
   13bf6:	2201      	movs	r2, #1
   13bf8:	4215      	tst	r5, r2
   13bfa:	d005      	beq.n	13c08 <_dtoa_r+0x4e8>
   13bfc:	18a4      	adds	r4, r4, r2
   13bfe:	6832      	ldr	r2, [r6, #0]
   13c00:	6873      	ldr	r3, [r6, #4]
   13c02:	f003 f829 	bl	16c58 <__aeabi_dmul>
   13c06:	2301      	movs	r3, #1
   13c08:	106d      	asrs	r5, r5, #1
   13c0a:	3608      	adds	r6, #8
   13c0c:	e763      	b.n	13ad6 <_dtoa_r+0x3b6>
   13c0e:	9e03      	ldr	r6, [sp, #12]
   13c10:	003d      	movs	r5, r7
   13c12:	e789      	b.n	13b28 <_dtoa_r+0x408>
   13c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13c16:	1e69      	subs	r1, r5, #1
   13c18:	1952      	adds	r2, r2, r5
   13c1a:	9217      	str	r2, [sp, #92]	; 0x5c
   13c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13c1e:	4b72      	ldr	r3, [pc, #456]	; (13de8 <_dtoa_r+0x6c8>)
   13c20:	00c9      	lsls	r1, r1, #3
   13c22:	2a00      	cmp	r2, #0
   13c24:	d04a      	beq.n	13cbc <_dtoa_r+0x59c>
   13c26:	185b      	adds	r3, r3, r1
   13c28:	681a      	ldr	r2, [r3, #0]
   13c2a:	685b      	ldr	r3, [r3, #4]
   13c2c:	2000      	movs	r0, #0
   13c2e:	4976      	ldr	r1, [pc, #472]	; (13e08 <_dtoa_r+0x6e8>)
   13c30:	f002 fbde 	bl	163f0 <__aeabi_ddiv>
   13c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13c38:	f003 fa8e 	bl	17158 <__aeabi_dsub>
   13c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c3e:	9010      	str	r0, [sp, #64]	; 0x40
   13c40:	9111      	str	r1, [sp, #68]	; 0x44
   13c42:	9312      	str	r3, [sp, #72]	; 0x48
   13c44:	9806      	ldr	r0, [sp, #24]
   13c46:	9907      	ldr	r1, [sp, #28]
   13c48:	f003 fdbc 	bl	177c4 <__aeabi_d2iz>
   13c4c:	0004      	movs	r4, r0
   13c4e:	f003 fded 	bl	1782c <__aeabi_i2d>
   13c52:	0002      	movs	r2, r0
   13c54:	000b      	movs	r3, r1
   13c56:	9806      	ldr	r0, [sp, #24]
   13c58:	9907      	ldr	r1, [sp, #28]
   13c5a:	f003 fa7d 	bl	17158 <__aeabi_dsub>
   13c5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13c60:	3430      	adds	r4, #48	; 0x30
   13c62:	1c5d      	adds	r5, r3, #1
   13c64:	701c      	strb	r4, [r3, #0]
   13c66:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13c6a:	9006      	str	r0, [sp, #24]
   13c6c:	9107      	str	r1, [sp, #28]
   13c6e:	f001 fda5 	bl	157bc <__aeabi_dcmplt>
   13c72:	2800      	cmp	r0, #0
   13c74:	d165      	bne.n	13d42 <_dtoa_r+0x622>
   13c76:	9a06      	ldr	r2, [sp, #24]
   13c78:	9b07      	ldr	r3, [sp, #28]
   13c7a:	2000      	movs	r0, #0
   13c7c:	495c      	ldr	r1, [pc, #368]	; (13df0 <_dtoa_r+0x6d0>)
   13c7e:	f003 fa6b 	bl	17158 <__aeabi_dsub>
   13c82:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13c84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13c86:	f001 fd99 	bl	157bc <__aeabi_dcmplt>
   13c8a:	2800      	cmp	r0, #0
   13c8c:	d000      	beq.n	13c90 <_dtoa_r+0x570>
   13c8e:	e0be      	b.n	13e0e <_dtoa_r+0x6ee>
   13c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13c92:	429d      	cmp	r5, r3
   13c94:	d100      	bne.n	13c98 <_dtoa_r+0x578>
   13c96:	e77a      	b.n	13b8e <_dtoa_r+0x46e>
   13c98:	9810      	ldr	r0, [sp, #64]	; 0x40
   13c9a:	9911      	ldr	r1, [sp, #68]	; 0x44
   13c9c:	2200      	movs	r2, #0
   13c9e:	4b55      	ldr	r3, [pc, #340]	; (13df4 <_dtoa_r+0x6d4>)
   13ca0:	f002 ffda 	bl	16c58 <__aeabi_dmul>
   13ca4:	2200      	movs	r2, #0
   13ca6:	9010      	str	r0, [sp, #64]	; 0x40
   13ca8:	9111      	str	r1, [sp, #68]	; 0x44
   13caa:	9806      	ldr	r0, [sp, #24]
   13cac:	9907      	ldr	r1, [sp, #28]
   13cae:	4b51      	ldr	r3, [pc, #324]	; (13df4 <_dtoa_r+0x6d4>)
   13cb0:	f002 ffd2 	bl	16c58 <__aeabi_dmul>
   13cb4:	9512      	str	r5, [sp, #72]	; 0x48
   13cb6:	9006      	str	r0, [sp, #24]
   13cb8:	9107      	str	r1, [sp, #28]
   13cba:	e7c3      	b.n	13c44 <_dtoa_r+0x524>
   13cbc:	1859      	adds	r1, r3, r1
   13cbe:	6808      	ldr	r0, [r1, #0]
   13cc0:	6849      	ldr	r1, [r1, #4]
   13cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13cc6:	f002 ffc7 	bl	16c58 <__aeabi_dmul>
   13cca:	9010      	str	r0, [sp, #64]	; 0x40
   13ccc:	9111      	str	r1, [sp, #68]	; 0x44
   13cce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13cd0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   13cd2:	9806      	ldr	r0, [sp, #24]
   13cd4:	9907      	ldr	r1, [sp, #28]
   13cd6:	f003 fd75 	bl	177c4 <__aeabi_d2iz>
   13cda:	9012      	str	r0, [sp, #72]	; 0x48
   13cdc:	f003 fda6 	bl	1782c <__aeabi_i2d>
   13ce0:	0002      	movs	r2, r0
   13ce2:	000b      	movs	r3, r1
   13ce4:	9806      	ldr	r0, [sp, #24]
   13ce6:	9907      	ldr	r1, [sp, #28]
   13ce8:	f003 fa36 	bl	17158 <__aeabi_dsub>
   13cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13cee:	9006      	str	r0, [sp, #24]
   13cf0:	9107      	str	r1, [sp, #28]
   13cf2:	3330      	adds	r3, #48	; 0x30
   13cf4:	7023      	strb	r3, [r4, #0]
   13cf6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13cf8:	3401      	adds	r4, #1
   13cfa:	2200      	movs	r2, #0
   13cfc:	42a3      	cmp	r3, r4
   13cfe:	d124      	bne.n	13d4a <_dtoa_r+0x62a>
   13d00:	4b41      	ldr	r3, [pc, #260]	; (13e08 <_dtoa_r+0x6e8>)
   13d02:	9810      	ldr	r0, [sp, #64]	; 0x40
   13d04:	9911      	ldr	r1, [sp, #68]	; 0x44
   13d06:	f002 f863 	bl	15dd0 <__aeabi_dadd>
   13d0a:	0002      	movs	r2, r0
   13d0c:	000b      	movs	r3, r1
   13d0e:	9806      	ldr	r0, [sp, #24]
   13d10:	9907      	ldr	r1, [sp, #28]
   13d12:	f001 fd67 	bl	157e4 <__aeabi_dcmpgt>
   13d16:	2800      	cmp	r0, #0
   13d18:	d000      	beq.n	13d1c <_dtoa_r+0x5fc>
   13d1a:	e078      	b.n	13e0e <_dtoa_r+0x6ee>
   13d1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13d20:	2000      	movs	r0, #0
   13d22:	4939      	ldr	r1, [pc, #228]	; (13e08 <_dtoa_r+0x6e8>)
   13d24:	f003 fa18 	bl	17158 <__aeabi_dsub>
   13d28:	0002      	movs	r2, r0
   13d2a:	000b      	movs	r3, r1
   13d2c:	9806      	ldr	r0, [sp, #24]
   13d2e:	9907      	ldr	r1, [sp, #28]
   13d30:	f001 fd44 	bl	157bc <__aeabi_dcmplt>
   13d34:	2800      	cmp	r0, #0
   13d36:	d100      	bne.n	13d3a <_dtoa_r+0x61a>
   13d38:	e729      	b.n	13b8e <_dtoa_r+0x46e>
   13d3a:	1e6b      	subs	r3, r5, #1
   13d3c:	781a      	ldrb	r2, [r3, #0]
   13d3e:	2a30      	cmp	r2, #48	; 0x30
   13d40:	d001      	beq.n	13d46 <_dtoa_r+0x626>
   13d42:	9603      	str	r6, [sp, #12]
   13d44:	e03f      	b.n	13dc6 <_dtoa_r+0x6a6>
   13d46:	001d      	movs	r5, r3
   13d48:	e7f7      	b.n	13d3a <_dtoa_r+0x61a>
   13d4a:	9806      	ldr	r0, [sp, #24]
   13d4c:	9907      	ldr	r1, [sp, #28]
   13d4e:	4b29      	ldr	r3, [pc, #164]	; (13df4 <_dtoa_r+0x6d4>)
   13d50:	f002 ff82 	bl	16c58 <__aeabi_dmul>
   13d54:	9006      	str	r0, [sp, #24]
   13d56:	9107      	str	r1, [sp, #28]
   13d58:	e7bb      	b.n	13cd2 <_dtoa_r+0x5b2>
   13d5a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   13d5c:	9a08      	ldr	r2, [sp, #32]
   13d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13d60:	9806      	ldr	r0, [sp, #24]
   13d62:	9907      	ldr	r1, [sp, #28]
   13d64:	f002 fb44 	bl	163f0 <__aeabi_ddiv>
   13d68:	f003 fd2c 	bl	177c4 <__aeabi_d2iz>
   13d6c:	0004      	movs	r4, r0
   13d6e:	f003 fd5d 	bl	1782c <__aeabi_i2d>
   13d72:	9a08      	ldr	r2, [sp, #32]
   13d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13d76:	f002 ff6f 	bl	16c58 <__aeabi_dmul>
   13d7a:	000b      	movs	r3, r1
   13d7c:	0002      	movs	r2, r0
   13d7e:	9806      	ldr	r0, [sp, #24]
   13d80:	9907      	ldr	r1, [sp, #28]
   13d82:	f003 f9e9 	bl	17158 <__aeabi_dsub>
   13d86:	0023      	movs	r3, r4
   13d88:	3330      	adds	r3, #48	; 0x30
   13d8a:	7033      	strb	r3, [r6, #0]
   13d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d8e:	1c75      	adds	r5, r6, #1
   13d90:	1aeb      	subs	r3, r5, r3
   13d92:	429f      	cmp	r7, r3
   13d94:	d14c      	bne.n	13e30 <_dtoa_r+0x710>
   13d96:	0002      	movs	r2, r0
   13d98:	000b      	movs	r3, r1
   13d9a:	f002 f819 	bl	15dd0 <__aeabi_dadd>
   13d9e:	0006      	movs	r6, r0
   13da0:	000f      	movs	r7, r1
   13da2:	0002      	movs	r2, r0
   13da4:	000b      	movs	r3, r1
   13da6:	9808      	ldr	r0, [sp, #32]
   13da8:	9909      	ldr	r1, [sp, #36]	; 0x24
   13daa:	f001 fd07 	bl	157bc <__aeabi_dcmplt>
   13dae:	2800      	cmp	r0, #0
   13db0:	d12c      	bne.n	13e0c <_dtoa_r+0x6ec>
   13db2:	9808      	ldr	r0, [sp, #32]
   13db4:	9909      	ldr	r1, [sp, #36]	; 0x24
   13db6:	0032      	movs	r2, r6
   13db8:	003b      	movs	r3, r7
   13dba:	f001 fcf9 	bl	157b0 <__aeabi_dcmpeq>
   13dbe:	2800      	cmp	r0, #0
   13dc0:	d001      	beq.n	13dc6 <_dtoa_r+0x6a6>
   13dc2:	07e3      	lsls	r3, r4, #31
   13dc4:	d422      	bmi.n	13e0c <_dtoa_r+0x6ec>
   13dc6:	9905      	ldr	r1, [sp, #20]
   13dc8:	9804      	ldr	r0, [sp, #16]
   13dca:	f000 fcdc 	bl	14786 <_Bfree>
   13dce:	2300      	movs	r3, #0
   13dd0:	702b      	strb	r3, [r5, #0]
   13dd2:	9b03      	ldr	r3, [sp, #12]
   13dd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13dd6:	3301      	adds	r3, #1
   13dd8:	6013      	str	r3, [r2, #0]
   13dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
   13ddc:	2b00      	cmp	r3, #0
   13dde:	d100      	bne.n	13de2 <_dtoa_r+0x6c2>
   13de0:	e275      	b.n	142ce <_dtoa_r+0xbae>
   13de2:	601d      	str	r5, [r3, #0]
   13de4:	e273      	b.n	142ce <_dtoa_r+0xbae>
   13de6:	46c0      	nop			; (mov r8, r8)
   13de8:	0001a168 	.word	0x0001a168
   13dec:	0001a140 	.word	0x0001a140
   13df0:	3ff00000 	.word	0x3ff00000
   13df4:	40240000 	.word	0x40240000
   13df8:	401c0000 	.word	0x401c0000
   13dfc:	fcc00000 	.word	0xfcc00000
   13e00:	40140000 	.word	0x40140000
   13e04:	7cc00000 	.word	0x7cc00000
   13e08:	3fe00000 	.word	0x3fe00000
   13e0c:	9e03      	ldr	r6, [sp, #12]
   13e0e:	1e6b      	subs	r3, r5, #1
   13e10:	781a      	ldrb	r2, [r3, #0]
   13e12:	2a39      	cmp	r2, #57	; 0x39
   13e14:	d106      	bne.n	13e24 <_dtoa_r+0x704>
   13e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13e18:	429a      	cmp	r2, r3
   13e1a:	d107      	bne.n	13e2c <_dtoa_r+0x70c>
   13e1c:	2330      	movs	r3, #48	; 0x30
   13e1e:	7013      	strb	r3, [r2, #0]
   13e20:	0013      	movs	r3, r2
   13e22:	3601      	adds	r6, #1
   13e24:	781a      	ldrb	r2, [r3, #0]
   13e26:	3201      	adds	r2, #1
   13e28:	701a      	strb	r2, [r3, #0]
   13e2a:	e78a      	b.n	13d42 <_dtoa_r+0x622>
   13e2c:	001d      	movs	r5, r3
   13e2e:	e7ee      	b.n	13e0e <_dtoa_r+0x6ee>
   13e30:	2200      	movs	r2, #0
   13e32:	4bcf      	ldr	r3, [pc, #828]	; (14170 <_dtoa_r+0xa50>)
   13e34:	f002 ff10 	bl	16c58 <__aeabi_dmul>
   13e38:	2200      	movs	r2, #0
   13e3a:	2300      	movs	r3, #0
   13e3c:	9006      	str	r0, [sp, #24]
   13e3e:	9107      	str	r1, [sp, #28]
   13e40:	002e      	movs	r6, r5
   13e42:	f001 fcb5 	bl	157b0 <__aeabi_dcmpeq>
   13e46:	2800      	cmp	r0, #0
   13e48:	d100      	bne.n	13e4c <_dtoa_r+0x72c>
   13e4a:	e787      	b.n	13d5c <_dtoa_r+0x63c>
   13e4c:	e7bb      	b.n	13dc6 <_dtoa_r+0x6a6>
   13e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13e50:	2a00      	cmp	r2, #0
   13e52:	d100      	bne.n	13e56 <_dtoa_r+0x736>
   13e54:	e087      	b.n	13f66 <_dtoa_r+0x846>
   13e56:	9a22      	ldr	r2, [sp, #136]	; 0x88
   13e58:	2a01      	cmp	r2, #1
   13e5a:	dc6e      	bgt.n	13f3a <_dtoa_r+0x81a>
   13e5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13e5e:	2a00      	cmp	r2, #0
   13e60:	d067      	beq.n	13f32 <_dtoa_r+0x812>
   13e62:	4ac4      	ldr	r2, [pc, #784]	; (14174 <_dtoa_r+0xa54>)
   13e64:	189b      	adds	r3, r3, r2
   13e66:	9d08      	ldr	r5, [sp, #32]
   13e68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13e6c:	2101      	movs	r1, #1
   13e6e:	18d2      	adds	r2, r2, r3
   13e70:	920b      	str	r2, [sp, #44]	; 0x2c
   13e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13e74:	9804      	ldr	r0, [sp, #16]
   13e76:	18d3      	adds	r3, r2, r3
   13e78:	930c      	str	r3, [sp, #48]	; 0x30
   13e7a:	f000 fd22 	bl	148c2 <__i2b>
   13e7e:	0006      	movs	r6, r0
   13e80:	2c00      	cmp	r4, #0
   13e82:	dd0e      	ble.n	13ea2 <_dtoa_r+0x782>
   13e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13e86:	2b00      	cmp	r3, #0
   13e88:	dd0b      	ble.n	13ea2 <_dtoa_r+0x782>
   13e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13e8c:	0023      	movs	r3, r4
   13e8e:	4294      	cmp	r4, r2
   13e90:	dd00      	ble.n	13e94 <_dtoa_r+0x774>
   13e92:	0013      	movs	r3, r2
   13e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13e96:	1ae4      	subs	r4, r4, r3
   13e98:	1ad2      	subs	r2, r2, r3
   13e9a:	920b      	str	r2, [sp, #44]	; 0x2c
   13e9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13e9e:	1ad3      	subs	r3, r2, r3
   13ea0:	930c      	str	r3, [sp, #48]	; 0x30
   13ea2:	9b08      	ldr	r3, [sp, #32]
   13ea4:	2b00      	cmp	r3, #0
   13ea6:	d01e      	beq.n	13ee6 <_dtoa_r+0x7c6>
   13ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13eaa:	2b00      	cmp	r3, #0
   13eac:	d05f      	beq.n	13f6e <_dtoa_r+0x84e>
   13eae:	2d00      	cmp	r5, #0
   13eb0:	dd11      	ble.n	13ed6 <_dtoa_r+0x7b6>
   13eb2:	0031      	movs	r1, r6
   13eb4:	002a      	movs	r2, r5
   13eb6:	9804      	ldr	r0, [sp, #16]
   13eb8:	f000 fd9c 	bl	149f4 <__pow5mult>
   13ebc:	9a05      	ldr	r2, [sp, #20]
   13ebe:	0001      	movs	r1, r0
   13ec0:	0006      	movs	r6, r0
   13ec2:	9804      	ldr	r0, [sp, #16]
   13ec4:	f000 fd06 	bl	148d4 <__multiply>
   13ec8:	9905      	ldr	r1, [sp, #20]
   13eca:	9010      	str	r0, [sp, #64]	; 0x40
   13ecc:	9804      	ldr	r0, [sp, #16]
   13ece:	f000 fc5a 	bl	14786 <_Bfree>
   13ed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13ed4:	9305      	str	r3, [sp, #20]
   13ed6:	9b08      	ldr	r3, [sp, #32]
   13ed8:	1b5a      	subs	r2, r3, r5
   13eda:	d004      	beq.n	13ee6 <_dtoa_r+0x7c6>
   13edc:	9905      	ldr	r1, [sp, #20]
   13ede:	9804      	ldr	r0, [sp, #16]
   13ee0:	f000 fd88 	bl	149f4 <__pow5mult>
   13ee4:	9005      	str	r0, [sp, #20]
   13ee6:	2101      	movs	r1, #1
   13ee8:	9804      	ldr	r0, [sp, #16]
   13eea:	f000 fcea 	bl	148c2 <__i2b>
   13eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13ef0:	9008      	str	r0, [sp, #32]
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	dd3d      	ble.n	13f72 <_dtoa_r+0x852>
   13ef6:	001a      	movs	r2, r3
   13ef8:	0001      	movs	r1, r0
   13efa:	9804      	ldr	r0, [sp, #16]
   13efc:	f000 fd7a 	bl	149f4 <__pow5mult>
   13f00:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13f02:	9008      	str	r0, [sp, #32]
   13f04:	2500      	movs	r5, #0
   13f06:	2b01      	cmp	r3, #1
   13f08:	dc3b      	bgt.n	13f82 <_dtoa_r+0x862>
   13f0a:	2500      	movs	r5, #0
   13f0c:	9b06      	ldr	r3, [sp, #24]
   13f0e:	42ab      	cmp	r3, r5
   13f10:	d133      	bne.n	13f7a <_dtoa_r+0x85a>
   13f12:	9b07      	ldr	r3, [sp, #28]
   13f14:	031b      	lsls	r3, r3, #12
   13f16:	42ab      	cmp	r3, r5
   13f18:	d12f      	bne.n	13f7a <_dtoa_r+0x85a>
   13f1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13f1c:	9a07      	ldr	r2, [sp, #28]
   13f1e:	4213      	tst	r3, r2
   13f20:	d02b      	beq.n	13f7a <_dtoa_r+0x85a>
   13f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f24:	3501      	adds	r5, #1
   13f26:	3301      	adds	r3, #1
   13f28:	930b      	str	r3, [sp, #44]	; 0x2c
   13f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13f2c:	3301      	adds	r3, #1
   13f2e:	930c      	str	r3, [sp, #48]	; 0x30
   13f30:	e023      	b.n	13f7a <_dtoa_r+0x85a>
   13f32:	2336      	movs	r3, #54	; 0x36
   13f34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13f36:	1a9b      	subs	r3, r3, r2
   13f38:	e795      	b.n	13e66 <_dtoa_r+0x746>
   13f3a:	9b08      	ldr	r3, [sp, #32]
   13f3c:	1e7d      	subs	r5, r7, #1
   13f3e:	42ab      	cmp	r3, r5
   13f40:	db06      	blt.n	13f50 <_dtoa_r+0x830>
   13f42:	1b5d      	subs	r5, r3, r5
   13f44:	2f00      	cmp	r7, #0
   13f46:	da0b      	bge.n	13f60 <_dtoa_r+0x840>
   13f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f4a:	1bdc      	subs	r4, r3, r7
   13f4c:	2300      	movs	r3, #0
   13f4e:	e78c      	b.n	13e6a <_dtoa_r+0x74a>
   13f50:	9b08      	ldr	r3, [sp, #32]
   13f52:	9508      	str	r5, [sp, #32]
   13f54:	1aea      	subs	r2, r5, r3
   13f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13f58:	2500      	movs	r5, #0
   13f5a:	189b      	adds	r3, r3, r2
   13f5c:	930f      	str	r3, [sp, #60]	; 0x3c
   13f5e:	e7f1      	b.n	13f44 <_dtoa_r+0x824>
   13f60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13f62:	003b      	movs	r3, r7
   13f64:	e781      	b.n	13e6a <_dtoa_r+0x74a>
   13f66:	9d08      	ldr	r5, [sp, #32]
   13f68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13f6a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13f6c:	e788      	b.n	13e80 <_dtoa_r+0x760>
   13f6e:	9a08      	ldr	r2, [sp, #32]
   13f70:	e7b4      	b.n	13edc <_dtoa_r+0x7bc>
   13f72:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13f74:	2500      	movs	r5, #0
   13f76:	2b01      	cmp	r3, #1
   13f78:	ddc7      	ble.n	13f0a <_dtoa_r+0x7ea>
   13f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13f7c:	2001      	movs	r0, #1
   13f7e:	2b00      	cmp	r3, #0
   13f80:	d00b      	beq.n	13f9a <_dtoa_r+0x87a>
   13f82:	9b08      	ldr	r3, [sp, #32]
   13f84:	9a08      	ldr	r2, [sp, #32]
   13f86:	691b      	ldr	r3, [r3, #16]
   13f88:	930f      	str	r3, [sp, #60]	; 0x3c
   13f8a:	3303      	adds	r3, #3
   13f8c:	009b      	lsls	r3, r3, #2
   13f8e:	18d3      	adds	r3, r2, r3
   13f90:	6858      	ldr	r0, [r3, #4]
   13f92:	f000 fc4d 	bl	14830 <__hi0bits>
   13f96:	2320      	movs	r3, #32
   13f98:	1a18      	subs	r0, r3, r0
   13f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13f9c:	18c0      	adds	r0, r0, r3
   13f9e:	231f      	movs	r3, #31
   13fa0:	4018      	ands	r0, r3
   13fa2:	d100      	bne.n	13fa6 <_dtoa_r+0x886>
   13fa4:	e0ab      	b.n	140fe <_dtoa_r+0x9de>
   13fa6:	3301      	adds	r3, #1
   13fa8:	1a1b      	subs	r3, r3, r0
   13faa:	2b04      	cmp	r3, #4
   13fac:	dc00      	bgt.n	13fb0 <_dtoa_r+0x890>
   13fae:	e09b      	b.n	140e8 <_dtoa_r+0x9c8>
   13fb0:	231c      	movs	r3, #28
   13fb2:	1a18      	subs	r0, r3, r0
   13fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fb6:	1824      	adds	r4, r4, r0
   13fb8:	181b      	adds	r3, r3, r0
   13fba:	930b      	str	r3, [sp, #44]	; 0x2c
   13fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13fbe:	181b      	adds	r3, r3, r0
   13fc0:	930c      	str	r3, [sp, #48]	; 0x30
   13fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fc4:	2b00      	cmp	r3, #0
   13fc6:	dd05      	ble.n	13fd4 <_dtoa_r+0x8b4>
   13fc8:	001a      	movs	r2, r3
   13fca:	9905      	ldr	r1, [sp, #20]
   13fcc:	9804      	ldr	r0, [sp, #16]
   13fce:	f000 fd63 	bl	14a98 <__lshift>
   13fd2:	9005      	str	r0, [sp, #20]
   13fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13fd6:	2b00      	cmp	r3, #0
   13fd8:	dd05      	ble.n	13fe6 <_dtoa_r+0x8c6>
   13fda:	001a      	movs	r2, r3
   13fdc:	9908      	ldr	r1, [sp, #32]
   13fde:	9804      	ldr	r0, [sp, #16]
   13fe0:	f000 fd5a 	bl	14a98 <__lshift>
   13fe4:	9008      	str	r0, [sp, #32]
   13fe6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13fe8:	2b00      	cmp	r3, #0
   13fea:	d100      	bne.n	13fee <_dtoa_r+0x8ce>
   13fec:	e089      	b.n	14102 <_dtoa_r+0x9e2>
   13fee:	9908      	ldr	r1, [sp, #32]
   13ff0:	9805      	ldr	r0, [sp, #20]
   13ff2:	f000 fda2 	bl	14b3a <__mcmp>
   13ff6:	2800      	cmp	r0, #0
   13ff8:	db00      	blt.n	13ffc <_dtoa_r+0x8dc>
   13ffa:	e082      	b.n	14102 <_dtoa_r+0x9e2>
   13ffc:	9b03      	ldr	r3, [sp, #12]
   13ffe:	220a      	movs	r2, #10
   14000:	3b01      	subs	r3, #1
   14002:	9303      	str	r3, [sp, #12]
   14004:	9905      	ldr	r1, [sp, #20]
   14006:	2300      	movs	r3, #0
   14008:	9804      	ldr	r0, [sp, #16]
   1400a:	f000 fbd5 	bl	147b8 <__multadd>
   1400e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14010:	9005      	str	r0, [sp, #20]
   14012:	2b00      	cmp	r3, #0
   14014:	d100      	bne.n	14018 <_dtoa_r+0x8f8>
   14016:	e15d      	b.n	142d4 <_dtoa_r+0xbb4>
   14018:	2300      	movs	r3, #0
   1401a:	0031      	movs	r1, r6
   1401c:	220a      	movs	r2, #10
   1401e:	9804      	ldr	r0, [sp, #16]
   14020:	f000 fbca 	bl	147b8 <__multadd>
   14024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14026:	0006      	movs	r6, r0
   14028:	2b00      	cmp	r3, #0
   1402a:	dc02      	bgt.n	14032 <_dtoa_r+0x912>
   1402c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1402e:	2b02      	cmp	r3, #2
   14030:	dc6d      	bgt.n	1410e <_dtoa_r+0x9ee>
   14032:	2c00      	cmp	r4, #0
   14034:	dd05      	ble.n	14042 <_dtoa_r+0x922>
   14036:	0031      	movs	r1, r6
   14038:	0022      	movs	r2, r4
   1403a:	9804      	ldr	r0, [sp, #16]
   1403c:	f000 fd2c 	bl	14a98 <__lshift>
   14040:	0006      	movs	r6, r0
   14042:	0030      	movs	r0, r6
   14044:	2d00      	cmp	r5, #0
   14046:	d011      	beq.n	1406c <_dtoa_r+0x94c>
   14048:	6871      	ldr	r1, [r6, #4]
   1404a:	9804      	ldr	r0, [sp, #16]
   1404c:	f000 fb63 	bl	14716 <_Balloc>
   14050:	0031      	movs	r1, r6
   14052:	0004      	movs	r4, r0
   14054:	6933      	ldr	r3, [r6, #16]
   14056:	310c      	adds	r1, #12
   14058:	1c9a      	adds	r2, r3, #2
   1405a:	0092      	lsls	r2, r2, #2
   1405c:	300c      	adds	r0, #12
   1405e:	f7fe fa4b 	bl	124f8 <memcpy>
   14062:	2201      	movs	r2, #1
   14064:	0021      	movs	r1, r4
   14066:	9804      	ldr	r0, [sp, #16]
   14068:	f000 fd16 	bl	14a98 <__lshift>
   1406c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1406e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14070:	3f01      	subs	r7, #1
   14072:	930b      	str	r3, [sp, #44]	; 0x2c
   14074:	19db      	adds	r3, r3, r7
   14076:	0037      	movs	r7, r6
   14078:	0006      	movs	r6, r0
   1407a:	930f      	str	r3, [sp, #60]	; 0x3c
   1407c:	9908      	ldr	r1, [sp, #32]
   1407e:	9805      	ldr	r0, [sp, #20]
   14080:	f7ff faca 	bl	13618 <quorem>
   14084:	0039      	movs	r1, r7
   14086:	900d      	str	r0, [sp, #52]	; 0x34
   14088:	0004      	movs	r4, r0
   1408a:	9805      	ldr	r0, [sp, #20]
   1408c:	f000 fd55 	bl	14b3a <__mcmp>
   14090:	0032      	movs	r2, r6
   14092:	900e      	str	r0, [sp, #56]	; 0x38
   14094:	9908      	ldr	r1, [sp, #32]
   14096:	9804      	ldr	r0, [sp, #16]
   14098:	f000 fd68 	bl	14b6c <__mdiff>
   1409c:	2301      	movs	r3, #1
   1409e:	930c      	str	r3, [sp, #48]	; 0x30
   140a0:	68c3      	ldr	r3, [r0, #12]
   140a2:	3430      	adds	r4, #48	; 0x30
   140a4:	0005      	movs	r5, r0
   140a6:	2b00      	cmp	r3, #0
   140a8:	d104      	bne.n	140b4 <_dtoa_r+0x994>
   140aa:	0001      	movs	r1, r0
   140ac:	9805      	ldr	r0, [sp, #20]
   140ae:	f000 fd44 	bl	14b3a <__mcmp>
   140b2:	900c      	str	r0, [sp, #48]	; 0x30
   140b4:	0029      	movs	r1, r5
   140b6:	9804      	ldr	r0, [sp, #16]
   140b8:	f000 fb65 	bl	14786 <_Bfree>
   140bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   140be:	9a22      	ldr	r2, [sp, #136]	; 0x88
   140c0:	4313      	orrs	r3, r2
   140c2:	d000      	beq.n	140c6 <_dtoa_r+0x9a6>
   140c4:	e089      	b.n	141da <_dtoa_r+0xaba>
   140c6:	9a06      	ldr	r2, [sp, #24]
   140c8:	3301      	adds	r3, #1
   140ca:	4213      	tst	r3, r2
   140cc:	d000      	beq.n	140d0 <_dtoa_r+0x9b0>
   140ce:	e084      	b.n	141da <_dtoa_r+0xaba>
   140d0:	2c39      	cmp	r4, #57	; 0x39
   140d2:	d100      	bne.n	140d6 <_dtoa_r+0x9b6>
   140d4:	e0a3      	b.n	1421e <_dtoa_r+0xafe>
   140d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   140d8:	2b00      	cmp	r3, #0
   140da:	dd01      	ble.n	140e0 <_dtoa_r+0x9c0>
   140dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   140de:	3431      	adds	r4, #49	; 0x31
   140e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140e2:	1c5d      	adds	r5, r3, #1
   140e4:	701c      	strb	r4, [r3, #0]
   140e6:	e027      	b.n	14138 <_dtoa_r+0xa18>
   140e8:	2b04      	cmp	r3, #4
   140ea:	d100      	bne.n	140ee <_dtoa_r+0x9ce>
   140ec:	e769      	b.n	13fc2 <_dtoa_r+0x8a2>
   140ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   140f0:	331c      	adds	r3, #28
   140f2:	18d2      	adds	r2, r2, r3
   140f4:	920b      	str	r2, [sp, #44]	; 0x2c
   140f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   140f8:	18e4      	adds	r4, r4, r3
   140fa:	18d3      	adds	r3, r2, r3
   140fc:	e760      	b.n	13fc0 <_dtoa_r+0x8a0>
   140fe:	0003      	movs	r3, r0
   14100:	e7f5      	b.n	140ee <_dtoa_r+0x9ce>
   14102:	2f00      	cmp	r7, #0
   14104:	dc3c      	bgt.n	14180 <_dtoa_r+0xa60>
   14106:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14108:	2b02      	cmp	r3, #2
   1410a:	dd39      	ble.n	14180 <_dtoa_r+0xa60>
   1410c:	970d      	str	r7, [sp, #52]	; 0x34
   1410e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14110:	2b00      	cmp	r3, #0
   14112:	d10c      	bne.n	1412e <_dtoa_r+0xa0e>
   14114:	9908      	ldr	r1, [sp, #32]
   14116:	2205      	movs	r2, #5
   14118:	9804      	ldr	r0, [sp, #16]
   1411a:	f000 fb4d 	bl	147b8 <__multadd>
   1411e:	9008      	str	r0, [sp, #32]
   14120:	0001      	movs	r1, r0
   14122:	9805      	ldr	r0, [sp, #20]
   14124:	f000 fd09 	bl	14b3a <__mcmp>
   14128:	2800      	cmp	r0, #0
   1412a:	dd00      	ble.n	1412e <_dtoa_r+0xa0e>
   1412c:	e55a      	b.n	13be4 <_dtoa_r+0x4c4>
   1412e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   14130:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14132:	43db      	mvns	r3, r3
   14134:	9303      	str	r3, [sp, #12]
   14136:	2700      	movs	r7, #0
   14138:	9908      	ldr	r1, [sp, #32]
   1413a:	9804      	ldr	r0, [sp, #16]
   1413c:	f000 fb23 	bl	14786 <_Bfree>
   14140:	2e00      	cmp	r6, #0
   14142:	d100      	bne.n	14146 <_dtoa_r+0xa26>
   14144:	e63f      	b.n	13dc6 <_dtoa_r+0x6a6>
   14146:	2f00      	cmp	r7, #0
   14148:	d005      	beq.n	14156 <_dtoa_r+0xa36>
   1414a:	42b7      	cmp	r7, r6
   1414c:	d003      	beq.n	14156 <_dtoa_r+0xa36>
   1414e:	0039      	movs	r1, r7
   14150:	9804      	ldr	r0, [sp, #16]
   14152:	f000 fb18 	bl	14786 <_Bfree>
   14156:	0031      	movs	r1, r6
   14158:	9804      	ldr	r0, [sp, #16]
   1415a:	f000 fb14 	bl	14786 <_Bfree>
   1415e:	e632      	b.n	13dc6 <_dtoa_r+0x6a6>
   14160:	9508      	str	r5, [sp, #32]
   14162:	002e      	movs	r6, r5
   14164:	e7e3      	b.n	1412e <_dtoa_r+0xa0e>
   14166:	2300      	movs	r3, #0
   14168:	9308      	str	r3, [sp, #32]
   1416a:	001e      	movs	r6, r3
   1416c:	e7df      	b.n	1412e <_dtoa_r+0xa0e>
   1416e:	46c0      	nop			; (mov r8, r8)
   14170:	40240000 	.word	0x40240000
   14174:	00000433 	.word	0x00000433
   14178:	9603      	str	r6, [sp, #12]
   1417a:	9508      	str	r5, [sp, #32]
   1417c:	002e      	movs	r6, r5
   1417e:	e531      	b.n	13be4 <_dtoa_r+0x4c4>
   14180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14182:	970d      	str	r7, [sp, #52]	; 0x34
   14184:	2b00      	cmp	r3, #0
   14186:	d000      	beq.n	1418a <_dtoa_r+0xa6a>
   14188:	e753      	b.n	14032 <_dtoa_r+0x912>
   1418a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1418c:	9908      	ldr	r1, [sp, #32]
   1418e:	9805      	ldr	r0, [sp, #20]
   14190:	f7ff fa42 	bl	13618 <quorem>
   14194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14196:	3030      	adds	r0, #48	; 0x30
   14198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1419a:	7028      	strb	r0, [r5, #0]
   1419c:	3501      	adds	r5, #1
   1419e:	0004      	movs	r4, r0
   141a0:	1aeb      	subs	r3, r5, r3
   141a2:	429a      	cmp	r2, r3
   141a4:	dc78      	bgt.n	14298 <_dtoa_r+0xb78>
   141a6:	1e15      	subs	r5, r2, #0
   141a8:	dc00      	bgt.n	141ac <_dtoa_r+0xa8c>
   141aa:	2501      	movs	r5, #1
   141ac:	2700      	movs	r7, #0
   141ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141b0:	195d      	adds	r5, r3, r5
   141b2:	9905      	ldr	r1, [sp, #20]
   141b4:	2201      	movs	r2, #1
   141b6:	9804      	ldr	r0, [sp, #16]
   141b8:	f000 fc6e 	bl	14a98 <__lshift>
   141bc:	9908      	ldr	r1, [sp, #32]
   141be:	9005      	str	r0, [sp, #20]
   141c0:	f000 fcbb 	bl	14b3a <__mcmp>
   141c4:	2800      	cmp	r0, #0
   141c6:	dc2f      	bgt.n	14228 <_dtoa_r+0xb08>
   141c8:	d101      	bne.n	141ce <_dtoa_r+0xaae>
   141ca:	07e3      	lsls	r3, r4, #31
   141cc:	d42c      	bmi.n	14228 <_dtoa_r+0xb08>
   141ce:	1e6b      	subs	r3, r5, #1
   141d0:	781a      	ldrb	r2, [r3, #0]
   141d2:	2a30      	cmp	r2, #48	; 0x30
   141d4:	d1b0      	bne.n	14138 <_dtoa_r+0xa18>
   141d6:	001d      	movs	r5, r3
   141d8:	e7f9      	b.n	141ce <_dtoa_r+0xaae>
   141da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   141dc:	2b00      	cmp	r3, #0
   141de:	db07      	blt.n	141f0 <_dtoa_r+0xad0>
   141e0:	001d      	movs	r5, r3
   141e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   141e4:	431d      	orrs	r5, r3
   141e6:	d126      	bne.n	14236 <_dtoa_r+0xb16>
   141e8:	2301      	movs	r3, #1
   141ea:	9a06      	ldr	r2, [sp, #24]
   141ec:	4213      	tst	r3, r2
   141ee:	d122      	bne.n	14236 <_dtoa_r+0xb16>
   141f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   141f2:	2b00      	cmp	r3, #0
   141f4:	dc00      	bgt.n	141f8 <_dtoa_r+0xad8>
   141f6:	e773      	b.n	140e0 <_dtoa_r+0x9c0>
   141f8:	9905      	ldr	r1, [sp, #20]
   141fa:	2201      	movs	r2, #1
   141fc:	9804      	ldr	r0, [sp, #16]
   141fe:	f000 fc4b 	bl	14a98 <__lshift>
   14202:	9908      	ldr	r1, [sp, #32]
   14204:	9005      	str	r0, [sp, #20]
   14206:	f000 fc98 	bl	14b3a <__mcmp>
   1420a:	2800      	cmp	r0, #0
   1420c:	dc04      	bgt.n	14218 <_dtoa_r+0xaf8>
   1420e:	d000      	beq.n	14212 <_dtoa_r+0xaf2>
   14210:	e766      	b.n	140e0 <_dtoa_r+0x9c0>
   14212:	07e3      	lsls	r3, r4, #31
   14214:	d400      	bmi.n	14218 <_dtoa_r+0xaf8>
   14216:	e763      	b.n	140e0 <_dtoa_r+0x9c0>
   14218:	2c39      	cmp	r4, #57	; 0x39
   1421a:	d000      	beq.n	1421e <_dtoa_r+0xafe>
   1421c:	e75e      	b.n	140dc <_dtoa_r+0x9bc>
   1421e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14222:	1c5d      	adds	r5, r3, #1
   14224:	2339      	movs	r3, #57	; 0x39
   14226:	7013      	strb	r3, [r2, #0]
   14228:	1e6b      	subs	r3, r5, #1
   1422a:	781a      	ldrb	r2, [r3, #0]
   1422c:	2a39      	cmp	r2, #57	; 0x39
   1422e:	d03b      	beq.n	142a8 <_dtoa_r+0xb88>
   14230:	3201      	adds	r2, #1
   14232:	701a      	strb	r2, [r3, #0]
   14234:	e780      	b.n	14138 <_dtoa_r+0xa18>
   14236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14238:	3301      	adds	r3, #1
   1423a:	930d      	str	r3, [sp, #52]	; 0x34
   1423c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1423e:	2b00      	cmp	r3, #0
   14240:	dd05      	ble.n	1424e <_dtoa_r+0xb2e>
   14242:	2c39      	cmp	r4, #57	; 0x39
   14244:	d0eb      	beq.n	1421e <_dtoa_r+0xafe>
   14246:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14248:	3401      	adds	r4, #1
   1424a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1424c:	e74a      	b.n	140e4 <_dtoa_r+0x9c4>
   1424e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14252:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14254:	701c      	strb	r4, [r3, #0]
   14256:	4293      	cmp	r3, r2
   14258:	d0ab      	beq.n	141b2 <_dtoa_r+0xa92>
   1425a:	2300      	movs	r3, #0
   1425c:	220a      	movs	r2, #10
   1425e:	9905      	ldr	r1, [sp, #20]
   14260:	9804      	ldr	r0, [sp, #16]
   14262:	f000 faa9 	bl	147b8 <__multadd>
   14266:	2300      	movs	r3, #0
   14268:	9005      	str	r0, [sp, #20]
   1426a:	220a      	movs	r2, #10
   1426c:	0039      	movs	r1, r7
   1426e:	9804      	ldr	r0, [sp, #16]
   14270:	42b7      	cmp	r7, r6
   14272:	d106      	bne.n	14282 <_dtoa_r+0xb62>
   14274:	f000 faa0 	bl	147b8 <__multadd>
   14278:	0007      	movs	r7, r0
   1427a:	0006      	movs	r6, r0
   1427c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1427e:	930b      	str	r3, [sp, #44]	; 0x2c
   14280:	e6fc      	b.n	1407c <_dtoa_r+0x95c>
   14282:	f000 fa99 	bl	147b8 <__multadd>
   14286:	0031      	movs	r1, r6
   14288:	0007      	movs	r7, r0
   1428a:	2300      	movs	r3, #0
   1428c:	220a      	movs	r2, #10
   1428e:	9804      	ldr	r0, [sp, #16]
   14290:	f000 fa92 	bl	147b8 <__multadd>
   14294:	0006      	movs	r6, r0
   14296:	e7f1      	b.n	1427c <_dtoa_r+0xb5c>
   14298:	2300      	movs	r3, #0
   1429a:	220a      	movs	r2, #10
   1429c:	9905      	ldr	r1, [sp, #20]
   1429e:	9804      	ldr	r0, [sp, #16]
   142a0:	f000 fa8a 	bl	147b8 <__multadd>
   142a4:	9005      	str	r0, [sp, #20]
   142a6:	e771      	b.n	1418c <_dtoa_r+0xa6c>
   142a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   142aa:	429a      	cmp	r2, r3
   142ac:	d105      	bne.n	142ba <_dtoa_r+0xb9a>
   142ae:	9b03      	ldr	r3, [sp, #12]
   142b0:	3301      	adds	r3, #1
   142b2:	9303      	str	r3, [sp, #12]
   142b4:	2331      	movs	r3, #49	; 0x31
   142b6:	7013      	strb	r3, [r2, #0]
   142b8:	e73e      	b.n	14138 <_dtoa_r+0xa18>
   142ba:	001d      	movs	r5, r3
   142bc:	e7b4      	b.n	14228 <_dtoa_r+0xb08>
   142be:	4b0a      	ldr	r3, [pc, #40]	; (142e8 <_dtoa_r+0xbc8>)
   142c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   142c2:	930a      	str	r3, [sp, #40]	; 0x28
   142c4:	4b09      	ldr	r3, [pc, #36]	; (142ec <_dtoa_r+0xbcc>)
   142c6:	2a00      	cmp	r2, #0
   142c8:	d001      	beq.n	142ce <_dtoa_r+0xbae>
   142ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
   142cc:	6013      	str	r3, [r2, #0]
   142ce:	980a      	ldr	r0, [sp, #40]	; 0x28
   142d0:	b01d      	add	sp, #116	; 0x74
   142d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   142d6:	2b00      	cmp	r3, #0
   142d8:	dd00      	ble.n	142dc <_dtoa_r+0xbbc>
   142da:	e756      	b.n	1418a <_dtoa_r+0xa6a>
   142dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   142de:	2b02      	cmp	r3, #2
   142e0:	dc00      	bgt.n	142e4 <_dtoa_r+0xbc4>
   142e2:	e752      	b.n	1418a <_dtoa_r+0xa6a>
   142e4:	e713      	b.n	1410e <_dtoa_r+0x9ee>
   142e6:	46c0      	nop			; (mov r8, r8)
   142e8:	0001a0d3 	.word	0x0001a0d3
   142ec:	0001a0db 	.word	0x0001a0db

000142f0 <__sflush_r>:
   142f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   142f2:	898a      	ldrh	r2, [r1, #12]
   142f4:	0005      	movs	r5, r0
   142f6:	000c      	movs	r4, r1
   142f8:	0713      	lsls	r3, r2, #28
   142fa:	d460      	bmi.n	143be <__sflush_r+0xce>
   142fc:	684b      	ldr	r3, [r1, #4]
   142fe:	2b00      	cmp	r3, #0
   14300:	dc04      	bgt.n	1430c <__sflush_r+0x1c>
   14302:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   14304:	2b00      	cmp	r3, #0
   14306:	dc01      	bgt.n	1430c <__sflush_r+0x1c>
   14308:	2000      	movs	r0, #0
   1430a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1430c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1430e:	2f00      	cmp	r7, #0
   14310:	d0fa      	beq.n	14308 <__sflush_r+0x18>
   14312:	2300      	movs	r3, #0
   14314:	682e      	ldr	r6, [r5, #0]
   14316:	602b      	str	r3, [r5, #0]
   14318:	2380      	movs	r3, #128	; 0x80
   1431a:	015b      	lsls	r3, r3, #5
   1431c:	401a      	ands	r2, r3
   1431e:	d034      	beq.n	1438a <__sflush_r+0x9a>
   14320:	6d60      	ldr	r0, [r4, #84]	; 0x54
   14322:	89a3      	ldrh	r3, [r4, #12]
   14324:	075b      	lsls	r3, r3, #29
   14326:	d506      	bpl.n	14336 <__sflush_r+0x46>
   14328:	6863      	ldr	r3, [r4, #4]
   1432a:	1ac0      	subs	r0, r0, r3
   1432c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1432e:	2b00      	cmp	r3, #0
   14330:	d001      	beq.n	14336 <__sflush_r+0x46>
   14332:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14334:	1ac0      	subs	r0, r0, r3
   14336:	0002      	movs	r2, r0
   14338:	6a21      	ldr	r1, [r4, #32]
   1433a:	2300      	movs	r3, #0
   1433c:	0028      	movs	r0, r5
   1433e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   14340:	47b8      	blx	r7
   14342:	89a1      	ldrh	r1, [r4, #12]
   14344:	1c43      	adds	r3, r0, #1
   14346:	d106      	bne.n	14356 <__sflush_r+0x66>
   14348:	682b      	ldr	r3, [r5, #0]
   1434a:	2b1d      	cmp	r3, #29
   1434c:	d831      	bhi.n	143b2 <__sflush_r+0xc2>
   1434e:	4a2c      	ldr	r2, [pc, #176]	; (14400 <__sflush_r+0x110>)
   14350:	40da      	lsrs	r2, r3
   14352:	07d3      	lsls	r3, r2, #31
   14354:	d52d      	bpl.n	143b2 <__sflush_r+0xc2>
   14356:	2300      	movs	r3, #0
   14358:	6063      	str	r3, [r4, #4]
   1435a:	6923      	ldr	r3, [r4, #16]
   1435c:	6023      	str	r3, [r4, #0]
   1435e:	04cb      	lsls	r3, r1, #19
   14360:	d505      	bpl.n	1436e <__sflush_r+0x7e>
   14362:	1c43      	adds	r3, r0, #1
   14364:	d102      	bne.n	1436c <__sflush_r+0x7c>
   14366:	682b      	ldr	r3, [r5, #0]
   14368:	2b00      	cmp	r3, #0
   1436a:	d100      	bne.n	1436e <__sflush_r+0x7e>
   1436c:	6560      	str	r0, [r4, #84]	; 0x54
   1436e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14370:	602e      	str	r6, [r5, #0]
   14372:	2900      	cmp	r1, #0
   14374:	d0c8      	beq.n	14308 <__sflush_r+0x18>
   14376:	0023      	movs	r3, r4
   14378:	3344      	adds	r3, #68	; 0x44
   1437a:	4299      	cmp	r1, r3
   1437c:	d002      	beq.n	14384 <__sflush_r+0x94>
   1437e:	0028      	movs	r0, r5
   14380:	f7fe f8de 	bl	12540 <_free_r>
   14384:	2000      	movs	r0, #0
   14386:	6360      	str	r0, [r4, #52]	; 0x34
   14388:	e7bf      	b.n	1430a <__sflush_r+0x1a>
   1438a:	2301      	movs	r3, #1
   1438c:	6a21      	ldr	r1, [r4, #32]
   1438e:	0028      	movs	r0, r5
   14390:	47b8      	blx	r7
   14392:	1c43      	adds	r3, r0, #1
   14394:	d1c5      	bne.n	14322 <__sflush_r+0x32>
   14396:	682b      	ldr	r3, [r5, #0]
   14398:	2b00      	cmp	r3, #0
   1439a:	d0c2      	beq.n	14322 <__sflush_r+0x32>
   1439c:	2b1d      	cmp	r3, #29
   1439e:	d001      	beq.n	143a4 <__sflush_r+0xb4>
   143a0:	2b16      	cmp	r3, #22
   143a2:	d101      	bne.n	143a8 <__sflush_r+0xb8>
   143a4:	602e      	str	r6, [r5, #0]
   143a6:	e7af      	b.n	14308 <__sflush_r+0x18>
   143a8:	2340      	movs	r3, #64	; 0x40
   143aa:	89a2      	ldrh	r2, [r4, #12]
   143ac:	4313      	orrs	r3, r2
   143ae:	81a3      	strh	r3, [r4, #12]
   143b0:	e7ab      	b.n	1430a <__sflush_r+0x1a>
   143b2:	2340      	movs	r3, #64	; 0x40
   143b4:	430b      	orrs	r3, r1
   143b6:	2001      	movs	r0, #1
   143b8:	81a3      	strh	r3, [r4, #12]
   143ba:	4240      	negs	r0, r0
   143bc:	e7a5      	b.n	1430a <__sflush_r+0x1a>
   143be:	690f      	ldr	r7, [r1, #16]
   143c0:	2f00      	cmp	r7, #0
   143c2:	d0a1      	beq.n	14308 <__sflush_r+0x18>
   143c4:	680b      	ldr	r3, [r1, #0]
   143c6:	600f      	str	r7, [r1, #0]
   143c8:	1bdb      	subs	r3, r3, r7
   143ca:	9301      	str	r3, [sp, #4]
   143cc:	2300      	movs	r3, #0
   143ce:	0792      	lsls	r2, r2, #30
   143d0:	d100      	bne.n	143d4 <__sflush_r+0xe4>
   143d2:	694b      	ldr	r3, [r1, #20]
   143d4:	60a3      	str	r3, [r4, #8]
   143d6:	9b01      	ldr	r3, [sp, #4]
   143d8:	2b00      	cmp	r3, #0
   143da:	dc00      	bgt.n	143de <__sflush_r+0xee>
   143dc:	e794      	b.n	14308 <__sflush_r+0x18>
   143de:	9b01      	ldr	r3, [sp, #4]
   143e0:	003a      	movs	r2, r7
   143e2:	6a21      	ldr	r1, [r4, #32]
   143e4:	0028      	movs	r0, r5
   143e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   143e8:	47b0      	blx	r6
   143ea:	2800      	cmp	r0, #0
   143ec:	dc03      	bgt.n	143f6 <__sflush_r+0x106>
   143ee:	2340      	movs	r3, #64	; 0x40
   143f0:	89a2      	ldrh	r2, [r4, #12]
   143f2:	4313      	orrs	r3, r2
   143f4:	e7df      	b.n	143b6 <__sflush_r+0xc6>
   143f6:	9b01      	ldr	r3, [sp, #4]
   143f8:	183f      	adds	r7, r7, r0
   143fa:	1a1b      	subs	r3, r3, r0
   143fc:	9301      	str	r3, [sp, #4]
   143fe:	e7ea      	b.n	143d6 <__sflush_r+0xe6>
   14400:	20400001 	.word	0x20400001

00014404 <_fflush_r>:
   14404:	690b      	ldr	r3, [r1, #16]
   14406:	b570      	push	{r4, r5, r6, lr}
   14408:	0005      	movs	r5, r0
   1440a:	000c      	movs	r4, r1
   1440c:	2b00      	cmp	r3, #0
   1440e:	d101      	bne.n	14414 <_fflush_r+0x10>
   14410:	2000      	movs	r0, #0
   14412:	bd70      	pop	{r4, r5, r6, pc}
   14414:	2800      	cmp	r0, #0
   14416:	d004      	beq.n	14422 <_fflush_r+0x1e>
   14418:	6983      	ldr	r3, [r0, #24]
   1441a:	2b00      	cmp	r3, #0
   1441c:	d101      	bne.n	14422 <_fflush_r+0x1e>
   1441e:	f000 f85f 	bl	144e0 <__sinit>
   14422:	4b0b      	ldr	r3, [pc, #44]	; (14450 <_fflush_r+0x4c>)
   14424:	429c      	cmp	r4, r3
   14426:	d109      	bne.n	1443c <_fflush_r+0x38>
   14428:	686c      	ldr	r4, [r5, #4]
   1442a:	220c      	movs	r2, #12
   1442c:	5ea3      	ldrsh	r3, [r4, r2]
   1442e:	2b00      	cmp	r3, #0
   14430:	d0ee      	beq.n	14410 <_fflush_r+0xc>
   14432:	0021      	movs	r1, r4
   14434:	0028      	movs	r0, r5
   14436:	f7ff ff5b 	bl	142f0 <__sflush_r>
   1443a:	e7ea      	b.n	14412 <_fflush_r+0xe>
   1443c:	4b05      	ldr	r3, [pc, #20]	; (14454 <_fflush_r+0x50>)
   1443e:	429c      	cmp	r4, r3
   14440:	d101      	bne.n	14446 <_fflush_r+0x42>
   14442:	68ac      	ldr	r4, [r5, #8]
   14444:	e7f1      	b.n	1442a <_fflush_r+0x26>
   14446:	4b04      	ldr	r3, [pc, #16]	; (14458 <_fflush_r+0x54>)
   14448:	429c      	cmp	r4, r3
   1444a:	d1ee      	bne.n	1442a <_fflush_r+0x26>
   1444c:	68ec      	ldr	r4, [r5, #12]
   1444e:	e7ec      	b.n	1442a <_fflush_r+0x26>
   14450:	0001a100 	.word	0x0001a100
   14454:	0001a120 	.word	0x0001a120
   14458:	0001a0e0 	.word	0x0001a0e0

0001445c <_cleanup_r>:
   1445c:	b510      	push	{r4, lr}
   1445e:	4902      	ldr	r1, [pc, #8]	; (14468 <_cleanup_r+0xc>)
   14460:	f000 f8b2 	bl	145c8 <_fwalk_reent>
   14464:	bd10      	pop	{r4, pc}
   14466:	46c0      	nop			; (mov r8, r8)
   14468:	00014405 	.word	0x00014405

0001446c <std.isra.0>:
   1446c:	2300      	movs	r3, #0
   1446e:	b510      	push	{r4, lr}
   14470:	0004      	movs	r4, r0
   14472:	6003      	str	r3, [r0, #0]
   14474:	6043      	str	r3, [r0, #4]
   14476:	6083      	str	r3, [r0, #8]
   14478:	8181      	strh	r1, [r0, #12]
   1447a:	6643      	str	r3, [r0, #100]	; 0x64
   1447c:	81c2      	strh	r2, [r0, #14]
   1447e:	6103      	str	r3, [r0, #16]
   14480:	6143      	str	r3, [r0, #20]
   14482:	6183      	str	r3, [r0, #24]
   14484:	0019      	movs	r1, r3
   14486:	2208      	movs	r2, #8
   14488:	305c      	adds	r0, #92	; 0x5c
   1448a:	f7fe f850 	bl	1252e <memset>
   1448e:	4b05      	ldr	r3, [pc, #20]	; (144a4 <std.isra.0+0x38>)
   14490:	6224      	str	r4, [r4, #32]
   14492:	6263      	str	r3, [r4, #36]	; 0x24
   14494:	4b04      	ldr	r3, [pc, #16]	; (144a8 <std.isra.0+0x3c>)
   14496:	62a3      	str	r3, [r4, #40]	; 0x28
   14498:	4b04      	ldr	r3, [pc, #16]	; (144ac <std.isra.0+0x40>)
   1449a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1449c:	4b04      	ldr	r3, [pc, #16]	; (144b0 <std.isra.0+0x44>)
   1449e:	6323      	str	r3, [r4, #48]	; 0x30
   144a0:	bd10      	pop	{r4, pc}
   144a2:	46c0      	nop			; (mov r8, r8)
   144a4:	000152b9 	.word	0x000152b9
   144a8:	000152e1 	.word	0x000152e1
   144ac:	00015319 	.word	0x00015319
   144b0:	00015345 	.word	0x00015345

000144b4 <__sfmoreglue>:
   144b4:	b570      	push	{r4, r5, r6, lr}
   144b6:	2568      	movs	r5, #104	; 0x68
   144b8:	1e4a      	subs	r2, r1, #1
   144ba:	4355      	muls	r5, r2
   144bc:	000e      	movs	r6, r1
   144be:	0029      	movs	r1, r5
   144c0:	3174      	adds	r1, #116	; 0x74
   144c2:	f7fe f887 	bl	125d4 <_malloc_r>
   144c6:	1e04      	subs	r4, r0, #0
   144c8:	d008      	beq.n	144dc <__sfmoreglue+0x28>
   144ca:	2100      	movs	r1, #0
   144cc:	002a      	movs	r2, r5
   144ce:	6001      	str	r1, [r0, #0]
   144d0:	6046      	str	r6, [r0, #4]
   144d2:	300c      	adds	r0, #12
   144d4:	60a0      	str	r0, [r4, #8]
   144d6:	3268      	adds	r2, #104	; 0x68
   144d8:	f7fe f829 	bl	1252e <memset>
   144dc:	0020      	movs	r0, r4
   144de:	bd70      	pop	{r4, r5, r6, pc}

000144e0 <__sinit>:
   144e0:	6983      	ldr	r3, [r0, #24]
   144e2:	b513      	push	{r0, r1, r4, lr}
   144e4:	0004      	movs	r4, r0
   144e6:	2b00      	cmp	r3, #0
   144e8:	d128      	bne.n	1453c <__sinit+0x5c>
   144ea:	6483      	str	r3, [r0, #72]	; 0x48
   144ec:	64c3      	str	r3, [r0, #76]	; 0x4c
   144ee:	6503      	str	r3, [r0, #80]	; 0x50
   144f0:	4b13      	ldr	r3, [pc, #76]	; (14540 <__sinit+0x60>)
   144f2:	4a14      	ldr	r2, [pc, #80]	; (14544 <__sinit+0x64>)
   144f4:	681b      	ldr	r3, [r3, #0]
   144f6:	6282      	str	r2, [r0, #40]	; 0x28
   144f8:	9301      	str	r3, [sp, #4]
   144fa:	4298      	cmp	r0, r3
   144fc:	d101      	bne.n	14502 <__sinit+0x22>
   144fe:	2301      	movs	r3, #1
   14500:	6183      	str	r3, [r0, #24]
   14502:	0020      	movs	r0, r4
   14504:	f000 f820 	bl	14548 <__sfp>
   14508:	6060      	str	r0, [r4, #4]
   1450a:	0020      	movs	r0, r4
   1450c:	f000 f81c 	bl	14548 <__sfp>
   14510:	60a0      	str	r0, [r4, #8]
   14512:	0020      	movs	r0, r4
   14514:	f000 f818 	bl	14548 <__sfp>
   14518:	2200      	movs	r2, #0
   1451a:	60e0      	str	r0, [r4, #12]
   1451c:	2104      	movs	r1, #4
   1451e:	6860      	ldr	r0, [r4, #4]
   14520:	f7ff ffa4 	bl	1446c <std.isra.0>
   14524:	2201      	movs	r2, #1
   14526:	2109      	movs	r1, #9
   14528:	68a0      	ldr	r0, [r4, #8]
   1452a:	f7ff ff9f 	bl	1446c <std.isra.0>
   1452e:	2202      	movs	r2, #2
   14530:	2112      	movs	r1, #18
   14532:	68e0      	ldr	r0, [r4, #12]
   14534:	f7ff ff9a 	bl	1446c <std.isra.0>
   14538:	2301      	movs	r3, #1
   1453a:	61a3      	str	r3, [r4, #24]
   1453c:	bd13      	pop	{r0, r1, r4, pc}
   1453e:	46c0      	nop			; (mov r8, r8)
   14540:	00019f90 	.word	0x00019f90
   14544:	0001445d 	.word	0x0001445d

00014548 <__sfp>:
   14548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1454a:	4b1e      	ldr	r3, [pc, #120]	; (145c4 <__sfp+0x7c>)
   1454c:	0007      	movs	r7, r0
   1454e:	681e      	ldr	r6, [r3, #0]
   14550:	69b3      	ldr	r3, [r6, #24]
   14552:	2b00      	cmp	r3, #0
   14554:	d102      	bne.n	1455c <__sfp+0x14>
   14556:	0030      	movs	r0, r6
   14558:	f7ff ffc2 	bl	144e0 <__sinit>
   1455c:	3648      	adds	r6, #72	; 0x48
   1455e:	68b4      	ldr	r4, [r6, #8]
   14560:	6873      	ldr	r3, [r6, #4]
   14562:	3b01      	subs	r3, #1
   14564:	d504      	bpl.n	14570 <__sfp+0x28>
   14566:	6833      	ldr	r3, [r6, #0]
   14568:	2b00      	cmp	r3, #0
   1456a:	d007      	beq.n	1457c <__sfp+0x34>
   1456c:	6836      	ldr	r6, [r6, #0]
   1456e:	e7f6      	b.n	1455e <__sfp+0x16>
   14570:	220c      	movs	r2, #12
   14572:	5ea5      	ldrsh	r5, [r4, r2]
   14574:	2d00      	cmp	r5, #0
   14576:	d00d      	beq.n	14594 <__sfp+0x4c>
   14578:	3468      	adds	r4, #104	; 0x68
   1457a:	e7f2      	b.n	14562 <__sfp+0x1a>
   1457c:	2104      	movs	r1, #4
   1457e:	0038      	movs	r0, r7
   14580:	f7ff ff98 	bl	144b4 <__sfmoreglue>
   14584:	6030      	str	r0, [r6, #0]
   14586:	2800      	cmp	r0, #0
   14588:	d1f0      	bne.n	1456c <__sfp+0x24>
   1458a:	230c      	movs	r3, #12
   1458c:	0004      	movs	r4, r0
   1458e:	603b      	str	r3, [r7, #0]
   14590:	0020      	movs	r0, r4
   14592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14594:	2301      	movs	r3, #1
   14596:	0020      	movs	r0, r4
   14598:	425b      	negs	r3, r3
   1459a:	81e3      	strh	r3, [r4, #14]
   1459c:	3302      	adds	r3, #2
   1459e:	81a3      	strh	r3, [r4, #12]
   145a0:	6665      	str	r5, [r4, #100]	; 0x64
   145a2:	6025      	str	r5, [r4, #0]
   145a4:	60a5      	str	r5, [r4, #8]
   145a6:	6065      	str	r5, [r4, #4]
   145a8:	6125      	str	r5, [r4, #16]
   145aa:	6165      	str	r5, [r4, #20]
   145ac:	61a5      	str	r5, [r4, #24]
   145ae:	2208      	movs	r2, #8
   145b0:	0029      	movs	r1, r5
   145b2:	305c      	adds	r0, #92	; 0x5c
   145b4:	f7fd ffbb 	bl	1252e <memset>
   145b8:	6365      	str	r5, [r4, #52]	; 0x34
   145ba:	63a5      	str	r5, [r4, #56]	; 0x38
   145bc:	64a5      	str	r5, [r4, #72]	; 0x48
   145be:	64e5      	str	r5, [r4, #76]	; 0x4c
   145c0:	e7e6      	b.n	14590 <__sfp+0x48>
   145c2:	46c0      	nop			; (mov r8, r8)
   145c4:	00019f90 	.word	0x00019f90

000145c8 <_fwalk_reent>:
   145c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   145ca:	0004      	movs	r4, r0
   145cc:	0007      	movs	r7, r0
   145ce:	2600      	movs	r6, #0
   145d0:	9101      	str	r1, [sp, #4]
   145d2:	3448      	adds	r4, #72	; 0x48
   145d4:	2c00      	cmp	r4, #0
   145d6:	d101      	bne.n	145dc <_fwalk_reent+0x14>
   145d8:	0030      	movs	r0, r6
   145da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   145dc:	6863      	ldr	r3, [r4, #4]
   145de:	68a5      	ldr	r5, [r4, #8]
   145e0:	9300      	str	r3, [sp, #0]
   145e2:	9b00      	ldr	r3, [sp, #0]
   145e4:	3b01      	subs	r3, #1
   145e6:	9300      	str	r3, [sp, #0]
   145e8:	d501      	bpl.n	145ee <_fwalk_reent+0x26>
   145ea:	6824      	ldr	r4, [r4, #0]
   145ec:	e7f2      	b.n	145d4 <_fwalk_reent+0xc>
   145ee:	89ab      	ldrh	r3, [r5, #12]
   145f0:	2b01      	cmp	r3, #1
   145f2:	d908      	bls.n	14606 <_fwalk_reent+0x3e>
   145f4:	220e      	movs	r2, #14
   145f6:	5eab      	ldrsh	r3, [r5, r2]
   145f8:	3301      	adds	r3, #1
   145fa:	d004      	beq.n	14606 <_fwalk_reent+0x3e>
   145fc:	0029      	movs	r1, r5
   145fe:	0038      	movs	r0, r7
   14600:	9b01      	ldr	r3, [sp, #4]
   14602:	4798      	blx	r3
   14604:	4306      	orrs	r6, r0
   14606:	3568      	adds	r5, #104	; 0x68
   14608:	e7eb      	b.n	145e2 <_fwalk_reent+0x1a>
	...

0001460c <_localeconv_r>:
   1460c:	4b03      	ldr	r3, [pc, #12]	; (1461c <_localeconv_r+0x10>)
   1460e:	681b      	ldr	r3, [r3, #0]
   14610:	6a18      	ldr	r0, [r3, #32]
   14612:	2800      	cmp	r0, #0
   14614:	d100      	bne.n	14618 <_localeconv_r+0xc>
   14616:	4802      	ldr	r0, [pc, #8]	; (14620 <_localeconv_r+0x14>)
   14618:	30f0      	adds	r0, #240	; 0xf0
   1461a:	4770      	bx	lr
   1461c:	20000018 	.word	0x20000018
   14620:	2000007c 	.word	0x2000007c

00014624 <__swhatbuf_r>:
   14624:	b570      	push	{r4, r5, r6, lr}
   14626:	000e      	movs	r6, r1
   14628:	001d      	movs	r5, r3
   1462a:	230e      	movs	r3, #14
   1462c:	5ec9      	ldrsh	r1, [r1, r3]
   1462e:	b090      	sub	sp, #64	; 0x40
   14630:	0014      	movs	r4, r2
   14632:	2900      	cmp	r1, #0
   14634:	da07      	bge.n	14646 <__swhatbuf_r+0x22>
   14636:	2300      	movs	r3, #0
   14638:	602b      	str	r3, [r5, #0]
   1463a:	89b3      	ldrh	r3, [r6, #12]
   1463c:	061b      	lsls	r3, r3, #24
   1463e:	d411      	bmi.n	14664 <__swhatbuf_r+0x40>
   14640:	2380      	movs	r3, #128	; 0x80
   14642:	00db      	lsls	r3, r3, #3
   14644:	e00f      	b.n	14666 <__swhatbuf_r+0x42>
   14646:	aa01      	add	r2, sp, #4
   14648:	f000 fea8 	bl	1539c <_fstat_r>
   1464c:	2800      	cmp	r0, #0
   1464e:	dbf2      	blt.n	14636 <__swhatbuf_r+0x12>
   14650:	22f0      	movs	r2, #240	; 0xf0
   14652:	9b02      	ldr	r3, [sp, #8]
   14654:	0212      	lsls	r2, r2, #8
   14656:	4013      	ands	r3, r2
   14658:	4a05      	ldr	r2, [pc, #20]	; (14670 <__swhatbuf_r+0x4c>)
   1465a:	189b      	adds	r3, r3, r2
   1465c:	425a      	negs	r2, r3
   1465e:	4153      	adcs	r3, r2
   14660:	602b      	str	r3, [r5, #0]
   14662:	e7ed      	b.n	14640 <__swhatbuf_r+0x1c>
   14664:	2340      	movs	r3, #64	; 0x40
   14666:	2000      	movs	r0, #0
   14668:	6023      	str	r3, [r4, #0]
   1466a:	b010      	add	sp, #64	; 0x40
   1466c:	bd70      	pop	{r4, r5, r6, pc}
   1466e:	46c0      	nop			; (mov r8, r8)
   14670:	ffffe000 	.word	0xffffe000

00014674 <__smakebuf_r>:
   14674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14676:	2602      	movs	r6, #2
   14678:	898b      	ldrh	r3, [r1, #12]
   1467a:	0005      	movs	r5, r0
   1467c:	000c      	movs	r4, r1
   1467e:	4233      	tst	r3, r6
   14680:	d006      	beq.n	14690 <__smakebuf_r+0x1c>
   14682:	0023      	movs	r3, r4
   14684:	3347      	adds	r3, #71	; 0x47
   14686:	6023      	str	r3, [r4, #0]
   14688:	6123      	str	r3, [r4, #16]
   1468a:	2301      	movs	r3, #1
   1468c:	6163      	str	r3, [r4, #20]
   1468e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   14690:	ab01      	add	r3, sp, #4
   14692:	466a      	mov	r2, sp
   14694:	f7ff ffc6 	bl	14624 <__swhatbuf_r>
   14698:	9900      	ldr	r1, [sp, #0]
   1469a:	0007      	movs	r7, r0
   1469c:	0028      	movs	r0, r5
   1469e:	f7fd ff99 	bl	125d4 <_malloc_r>
   146a2:	2800      	cmp	r0, #0
   146a4:	d108      	bne.n	146b8 <__smakebuf_r+0x44>
   146a6:	220c      	movs	r2, #12
   146a8:	5ea3      	ldrsh	r3, [r4, r2]
   146aa:	059a      	lsls	r2, r3, #22
   146ac:	d4ef      	bmi.n	1468e <__smakebuf_r+0x1a>
   146ae:	2203      	movs	r2, #3
   146b0:	4393      	bics	r3, r2
   146b2:	431e      	orrs	r6, r3
   146b4:	81a6      	strh	r6, [r4, #12]
   146b6:	e7e4      	b.n	14682 <__smakebuf_r+0xe>
   146b8:	4b0f      	ldr	r3, [pc, #60]	; (146f8 <__smakebuf_r+0x84>)
   146ba:	62ab      	str	r3, [r5, #40]	; 0x28
   146bc:	2380      	movs	r3, #128	; 0x80
   146be:	89a2      	ldrh	r2, [r4, #12]
   146c0:	6020      	str	r0, [r4, #0]
   146c2:	4313      	orrs	r3, r2
   146c4:	81a3      	strh	r3, [r4, #12]
   146c6:	9b00      	ldr	r3, [sp, #0]
   146c8:	6120      	str	r0, [r4, #16]
   146ca:	6163      	str	r3, [r4, #20]
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	2b00      	cmp	r3, #0
   146d0:	d00d      	beq.n	146ee <__smakebuf_r+0x7a>
   146d2:	230e      	movs	r3, #14
   146d4:	5ee1      	ldrsh	r1, [r4, r3]
   146d6:	0028      	movs	r0, r5
   146d8:	f000 fe72 	bl	153c0 <_isatty_r>
   146dc:	2800      	cmp	r0, #0
   146de:	d006      	beq.n	146ee <__smakebuf_r+0x7a>
   146e0:	2203      	movs	r2, #3
   146e2:	89a3      	ldrh	r3, [r4, #12]
   146e4:	4393      	bics	r3, r2
   146e6:	001a      	movs	r2, r3
   146e8:	2301      	movs	r3, #1
   146ea:	4313      	orrs	r3, r2
   146ec:	81a3      	strh	r3, [r4, #12]
   146ee:	89a0      	ldrh	r0, [r4, #12]
   146f0:	4338      	orrs	r0, r7
   146f2:	81a0      	strh	r0, [r4, #12]
   146f4:	e7cb      	b.n	1468e <__smakebuf_r+0x1a>
   146f6:	46c0      	nop			; (mov r8, r8)
   146f8:	0001445d 	.word	0x0001445d

000146fc <memchr>:
   146fc:	b2c9      	uxtb	r1, r1
   146fe:	1882      	adds	r2, r0, r2
   14700:	4290      	cmp	r0, r2
   14702:	d101      	bne.n	14708 <memchr+0xc>
   14704:	2000      	movs	r0, #0
   14706:	4770      	bx	lr
   14708:	7803      	ldrb	r3, [r0, #0]
   1470a:	428b      	cmp	r3, r1
   1470c:	d0fb      	beq.n	14706 <memchr+0xa>
   1470e:	3001      	adds	r0, #1
   14710:	e7f6      	b.n	14700 <memchr+0x4>

00014712 <__malloc_lock>:
   14712:	4770      	bx	lr

00014714 <__malloc_unlock>:
   14714:	4770      	bx	lr

00014716 <_Balloc>:
   14716:	b570      	push	{r4, r5, r6, lr}
   14718:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1471a:	0004      	movs	r4, r0
   1471c:	000d      	movs	r5, r1
   1471e:	2e00      	cmp	r6, #0
   14720:	d107      	bne.n	14732 <_Balloc+0x1c>
   14722:	2010      	movs	r0, #16
   14724:	f7fd fec2 	bl	124ac <malloc>
   14728:	6260      	str	r0, [r4, #36]	; 0x24
   1472a:	6046      	str	r6, [r0, #4]
   1472c:	6086      	str	r6, [r0, #8]
   1472e:	6006      	str	r6, [r0, #0]
   14730:	60c6      	str	r6, [r0, #12]
   14732:	6a66      	ldr	r6, [r4, #36]	; 0x24
   14734:	68f3      	ldr	r3, [r6, #12]
   14736:	2b00      	cmp	r3, #0
   14738:	d013      	beq.n	14762 <_Balloc+0x4c>
   1473a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1473c:	00aa      	lsls	r2, r5, #2
   1473e:	68db      	ldr	r3, [r3, #12]
   14740:	189b      	adds	r3, r3, r2
   14742:	6818      	ldr	r0, [r3, #0]
   14744:	2800      	cmp	r0, #0
   14746:	d118      	bne.n	1477a <_Balloc+0x64>
   14748:	2101      	movs	r1, #1
   1474a:	000e      	movs	r6, r1
   1474c:	40ae      	lsls	r6, r5
   1474e:	1d72      	adds	r2, r6, #5
   14750:	0092      	lsls	r2, r2, #2
   14752:	0020      	movs	r0, r4
   14754:	f000 fac2 	bl	14cdc <_calloc_r>
   14758:	2800      	cmp	r0, #0
   1475a:	d00c      	beq.n	14776 <_Balloc+0x60>
   1475c:	6045      	str	r5, [r0, #4]
   1475e:	6086      	str	r6, [r0, #8]
   14760:	e00d      	b.n	1477e <_Balloc+0x68>
   14762:	2221      	movs	r2, #33	; 0x21
   14764:	2104      	movs	r1, #4
   14766:	0020      	movs	r0, r4
   14768:	f000 fab8 	bl	14cdc <_calloc_r>
   1476c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1476e:	60f0      	str	r0, [r6, #12]
   14770:	68db      	ldr	r3, [r3, #12]
   14772:	2b00      	cmp	r3, #0
   14774:	d1e1      	bne.n	1473a <_Balloc+0x24>
   14776:	2000      	movs	r0, #0
   14778:	bd70      	pop	{r4, r5, r6, pc}
   1477a:	6802      	ldr	r2, [r0, #0]
   1477c:	601a      	str	r2, [r3, #0]
   1477e:	2300      	movs	r3, #0
   14780:	6103      	str	r3, [r0, #16]
   14782:	60c3      	str	r3, [r0, #12]
   14784:	e7f8      	b.n	14778 <_Balloc+0x62>

00014786 <_Bfree>:
   14786:	b570      	push	{r4, r5, r6, lr}
   14788:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1478a:	0006      	movs	r6, r0
   1478c:	000d      	movs	r5, r1
   1478e:	2c00      	cmp	r4, #0
   14790:	d107      	bne.n	147a2 <_Bfree+0x1c>
   14792:	2010      	movs	r0, #16
   14794:	f7fd fe8a 	bl	124ac <malloc>
   14798:	6270      	str	r0, [r6, #36]	; 0x24
   1479a:	6044      	str	r4, [r0, #4]
   1479c:	6084      	str	r4, [r0, #8]
   1479e:	6004      	str	r4, [r0, #0]
   147a0:	60c4      	str	r4, [r0, #12]
   147a2:	2d00      	cmp	r5, #0
   147a4:	d007      	beq.n	147b6 <_Bfree+0x30>
   147a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   147a8:	686a      	ldr	r2, [r5, #4]
   147aa:	68db      	ldr	r3, [r3, #12]
   147ac:	0092      	lsls	r2, r2, #2
   147ae:	189b      	adds	r3, r3, r2
   147b0:	681a      	ldr	r2, [r3, #0]
   147b2:	602a      	str	r2, [r5, #0]
   147b4:	601d      	str	r5, [r3, #0]
   147b6:	bd70      	pop	{r4, r5, r6, pc}

000147b8 <__multadd>:
   147b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   147ba:	001e      	movs	r6, r3
   147bc:	2314      	movs	r3, #20
   147be:	469c      	mov	ip, r3
   147c0:	0007      	movs	r7, r0
   147c2:	000c      	movs	r4, r1
   147c4:	2000      	movs	r0, #0
   147c6:	690d      	ldr	r5, [r1, #16]
   147c8:	448c      	add	ip, r1
   147ca:	4663      	mov	r3, ip
   147cc:	8819      	ldrh	r1, [r3, #0]
   147ce:	681b      	ldr	r3, [r3, #0]
   147d0:	4351      	muls	r1, r2
   147d2:	0c1b      	lsrs	r3, r3, #16
   147d4:	4353      	muls	r3, r2
   147d6:	1989      	adds	r1, r1, r6
   147d8:	0c0e      	lsrs	r6, r1, #16
   147da:	199b      	adds	r3, r3, r6
   147dc:	b289      	uxth	r1, r1
   147de:	0c1e      	lsrs	r6, r3, #16
   147e0:	041b      	lsls	r3, r3, #16
   147e2:	185b      	adds	r3, r3, r1
   147e4:	4661      	mov	r1, ip
   147e6:	3001      	adds	r0, #1
   147e8:	c108      	stmia	r1!, {r3}
   147ea:	468c      	mov	ip, r1
   147ec:	4285      	cmp	r5, r0
   147ee:	dcec      	bgt.n	147ca <__multadd+0x12>
   147f0:	2e00      	cmp	r6, #0
   147f2:	d01b      	beq.n	1482c <__multadd+0x74>
   147f4:	68a3      	ldr	r3, [r4, #8]
   147f6:	429d      	cmp	r5, r3
   147f8:	db12      	blt.n	14820 <__multadd+0x68>
   147fa:	6863      	ldr	r3, [r4, #4]
   147fc:	0038      	movs	r0, r7
   147fe:	1c59      	adds	r1, r3, #1
   14800:	f7ff ff89 	bl	14716 <_Balloc>
   14804:	0021      	movs	r1, r4
   14806:	6923      	ldr	r3, [r4, #16]
   14808:	9001      	str	r0, [sp, #4]
   1480a:	1c9a      	adds	r2, r3, #2
   1480c:	0092      	lsls	r2, r2, #2
   1480e:	310c      	adds	r1, #12
   14810:	300c      	adds	r0, #12
   14812:	f7fd fe71 	bl	124f8 <memcpy>
   14816:	0021      	movs	r1, r4
   14818:	0038      	movs	r0, r7
   1481a:	f7ff ffb4 	bl	14786 <_Bfree>
   1481e:	9c01      	ldr	r4, [sp, #4]
   14820:	1d2b      	adds	r3, r5, #4
   14822:	009b      	lsls	r3, r3, #2
   14824:	18e3      	adds	r3, r4, r3
   14826:	3501      	adds	r5, #1
   14828:	605e      	str	r6, [r3, #4]
   1482a:	6125      	str	r5, [r4, #16]
   1482c:	0020      	movs	r0, r4
   1482e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00014830 <__hi0bits>:
   14830:	0003      	movs	r3, r0
   14832:	0c02      	lsrs	r2, r0, #16
   14834:	2000      	movs	r0, #0
   14836:	4282      	cmp	r2, r0
   14838:	d101      	bne.n	1483e <__hi0bits+0xe>
   1483a:	041b      	lsls	r3, r3, #16
   1483c:	3010      	adds	r0, #16
   1483e:	0e1a      	lsrs	r2, r3, #24
   14840:	d101      	bne.n	14846 <__hi0bits+0x16>
   14842:	3008      	adds	r0, #8
   14844:	021b      	lsls	r3, r3, #8
   14846:	0f1a      	lsrs	r2, r3, #28
   14848:	d101      	bne.n	1484e <__hi0bits+0x1e>
   1484a:	3004      	adds	r0, #4
   1484c:	011b      	lsls	r3, r3, #4
   1484e:	0f9a      	lsrs	r2, r3, #30
   14850:	d101      	bne.n	14856 <__hi0bits+0x26>
   14852:	3002      	adds	r0, #2
   14854:	009b      	lsls	r3, r3, #2
   14856:	2b00      	cmp	r3, #0
   14858:	db03      	blt.n	14862 <__hi0bits+0x32>
   1485a:	3001      	adds	r0, #1
   1485c:	005b      	lsls	r3, r3, #1
   1485e:	d400      	bmi.n	14862 <__hi0bits+0x32>
   14860:	2020      	movs	r0, #32
   14862:	4770      	bx	lr

00014864 <__lo0bits>:
   14864:	2207      	movs	r2, #7
   14866:	6803      	ldr	r3, [r0, #0]
   14868:	b510      	push	{r4, lr}
   1486a:	0001      	movs	r1, r0
   1486c:	401a      	ands	r2, r3
   1486e:	d00d      	beq.n	1488c <__lo0bits+0x28>
   14870:	2401      	movs	r4, #1
   14872:	2000      	movs	r0, #0
   14874:	4223      	tst	r3, r4
   14876:	d105      	bne.n	14884 <__lo0bits+0x20>
   14878:	3002      	adds	r0, #2
   1487a:	4203      	tst	r3, r0
   1487c:	d003      	beq.n	14886 <__lo0bits+0x22>
   1487e:	40e3      	lsrs	r3, r4
   14880:	0020      	movs	r0, r4
   14882:	600b      	str	r3, [r1, #0]
   14884:	bd10      	pop	{r4, pc}
   14886:	089b      	lsrs	r3, r3, #2
   14888:	600b      	str	r3, [r1, #0]
   1488a:	e7fb      	b.n	14884 <__lo0bits+0x20>
   1488c:	b29c      	uxth	r4, r3
   1488e:	0010      	movs	r0, r2
   14890:	2c00      	cmp	r4, #0
   14892:	d101      	bne.n	14898 <__lo0bits+0x34>
   14894:	2010      	movs	r0, #16
   14896:	0c1b      	lsrs	r3, r3, #16
   14898:	b2da      	uxtb	r2, r3
   1489a:	2a00      	cmp	r2, #0
   1489c:	d101      	bne.n	148a2 <__lo0bits+0x3e>
   1489e:	3008      	adds	r0, #8
   148a0:	0a1b      	lsrs	r3, r3, #8
   148a2:	071a      	lsls	r2, r3, #28
   148a4:	d101      	bne.n	148aa <__lo0bits+0x46>
   148a6:	3004      	adds	r0, #4
   148a8:	091b      	lsrs	r3, r3, #4
   148aa:	079a      	lsls	r2, r3, #30
   148ac:	d101      	bne.n	148b2 <__lo0bits+0x4e>
   148ae:	3002      	adds	r0, #2
   148b0:	089b      	lsrs	r3, r3, #2
   148b2:	07da      	lsls	r2, r3, #31
   148b4:	d4e8      	bmi.n	14888 <__lo0bits+0x24>
   148b6:	085b      	lsrs	r3, r3, #1
   148b8:	d001      	beq.n	148be <__lo0bits+0x5a>
   148ba:	3001      	adds	r0, #1
   148bc:	e7e4      	b.n	14888 <__lo0bits+0x24>
   148be:	2020      	movs	r0, #32
   148c0:	e7e0      	b.n	14884 <__lo0bits+0x20>

000148c2 <__i2b>:
   148c2:	b510      	push	{r4, lr}
   148c4:	000c      	movs	r4, r1
   148c6:	2101      	movs	r1, #1
   148c8:	f7ff ff25 	bl	14716 <_Balloc>
   148cc:	2301      	movs	r3, #1
   148ce:	6144      	str	r4, [r0, #20]
   148d0:	6103      	str	r3, [r0, #16]
   148d2:	bd10      	pop	{r4, pc}

000148d4 <__multiply>:
   148d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   148d6:	690b      	ldr	r3, [r1, #16]
   148d8:	0015      	movs	r5, r2
   148da:	6912      	ldr	r2, [r2, #16]
   148dc:	b089      	sub	sp, #36	; 0x24
   148de:	000c      	movs	r4, r1
   148e0:	4293      	cmp	r3, r2
   148e2:	da01      	bge.n	148e8 <__multiply+0x14>
   148e4:	002c      	movs	r4, r5
   148e6:	000d      	movs	r5, r1
   148e8:	6927      	ldr	r7, [r4, #16]
   148ea:	692e      	ldr	r6, [r5, #16]
   148ec:	68a2      	ldr	r2, [r4, #8]
   148ee:	19bb      	adds	r3, r7, r6
   148f0:	6861      	ldr	r1, [r4, #4]
   148f2:	9301      	str	r3, [sp, #4]
   148f4:	4293      	cmp	r3, r2
   148f6:	dd00      	ble.n	148fa <__multiply+0x26>
   148f8:	3101      	adds	r1, #1
   148fa:	f7ff ff0c 	bl	14716 <_Balloc>
   148fe:	0003      	movs	r3, r0
   14900:	3314      	adds	r3, #20
   14902:	9300      	str	r3, [sp, #0]
   14904:	9a00      	ldr	r2, [sp, #0]
   14906:	19bb      	adds	r3, r7, r6
   14908:	4694      	mov	ip, r2
   1490a:	009b      	lsls	r3, r3, #2
   1490c:	449c      	add	ip, r3
   1490e:	0013      	movs	r3, r2
   14910:	2200      	movs	r2, #0
   14912:	9004      	str	r0, [sp, #16]
   14914:	4563      	cmp	r3, ip
   14916:	d31c      	bcc.n	14952 <__multiply+0x7e>
   14918:	002a      	movs	r2, r5
   1491a:	3414      	adds	r4, #20
   1491c:	00bf      	lsls	r7, r7, #2
   1491e:	19e3      	adds	r3, r4, r7
   14920:	3214      	adds	r2, #20
   14922:	00b6      	lsls	r6, r6, #2
   14924:	9305      	str	r3, [sp, #20]
   14926:	1993      	adds	r3, r2, r6
   14928:	9402      	str	r4, [sp, #8]
   1492a:	9306      	str	r3, [sp, #24]
   1492c:	9b06      	ldr	r3, [sp, #24]
   1492e:	429a      	cmp	r2, r3
   14930:	d311      	bcc.n	14956 <__multiply+0x82>
   14932:	9b01      	ldr	r3, [sp, #4]
   14934:	2b00      	cmp	r3, #0
   14936:	dd06      	ble.n	14946 <__multiply+0x72>
   14938:	2304      	movs	r3, #4
   1493a:	425b      	negs	r3, r3
   1493c:	449c      	add	ip, r3
   1493e:	4663      	mov	r3, ip
   14940:	681b      	ldr	r3, [r3, #0]
   14942:	2b00      	cmp	r3, #0
   14944:	d051      	beq.n	149ea <__multiply+0x116>
   14946:	9b04      	ldr	r3, [sp, #16]
   14948:	9a01      	ldr	r2, [sp, #4]
   1494a:	0018      	movs	r0, r3
   1494c:	611a      	str	r2, [r3, #16]
   1494e:	b009      	add	sp, #36	; 0x24
   14950:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14952:	c304      	stmia	r3!, {r2}
   14954:	e7de      	b.n	14914 <__multiply+0x40>
   14956:	8814      	ldrh	r4, [r2, #0]
   14958:	2c00      	cmp	r4, #0
   1495a:	d01e      	beq.n	1499a <__multiply+0xc6>
   1495c:	2600      	movs	r6, #0
   1495e:	9d00      	ldr	r5, [sp, #0]
   14960:	9f02      	ldr	r7, [sp, #8]
   14962:	cf01      	ldmia	r7!, {r0}
   14964:	9507      	str	r5, [sp, #28]
   14966:	cd08      	ldmia	r5!, {r3}
   14968:	9303      	str	r3, [sp, #12]
   1496a:	b283      	uxth	r3, r0
   1496c:	4363      	muls	r3, r4
   1496e:	0019      	movs	r1, r3
   14970:	466b      	mov	r3, sp
   14972:	0c00      	lsrs	r0, r0, #16
   14974:	899b      	ldrh	r3, [r3, #12]
   14976:	4360      	muls	r0, r4
   14978:	18cb      	adds	r3, r1, r3
   1497a:	9903      	ldr	r1, [sp, #12]
   1497c:	199b      	adds	r3, r3, r6
   1497e:	0c09      	lsrs	r1, r1, #16
   14980:	1841      	adds	r1, r0, r1
   14982:	0c18      	lsrs	r0, r3, #16
   14984:	1809      	adds	r1, r1, r0
   14986:	0c0e      	lsrs	r6, r1, #16
   14988:	b29b      	uxth	r3, r3
   1498a:	0409      	lsls	r1, r1, #16
   1498c:	430b      	orrs	r3, r1
   1498e:	9907      	ldr	r1, [sp, #28]
   14990:	600b      	str	r3, [r1, #0]
   14992:	9b05      	ldr	r3, [sp, #20]
   14994:	42bb      	cmp	r3, r7
   14996:	d8e4      	bhi.n	14962 <__multiply+0x8e>
   14998:	602e      	str	r6, [r5, #0]
   1499a:	6813      	ldr	r3, [r2, #0]
   1499c:	0c1b      	lsrs	r3, r3, #16
   1499e:	9303      	str	r3, [sp, #12]
   149a0:	d01e      	beq.n	149e0 <__multiply+0x10c>
   149a2:	2600      	movs	r6, #0
   149a4:	9b00      	ldr	r3, [sp, #0]
   149a6:	9c02      	ldr	r4, [sp, #8]
   149a8:	681b      	ldr	r3, [r3, #0]
   149aa:	9800      	ldr	r0, [sp, #0]
   149ac:	0007      	movs	r7, r0
   149ae:	8821      	ldrh	r1, [r4, #0]
   149b0:	9d03      	ldr	r5, [sp, #12]
   149b2:	b29b      	uxth	r3, r3
   149b4:	4369      	muls	r1, r5
   149b6:	c820      	ldmia	r0!, {r5}
   149b8:	0c2d      	lsrs	r5, r5, #16
   149ba:	1949      	adds	r1, r1, r5
   149bc:	198e      	adds	r6, r1, r6
   149be:	0431      	lsls	r1, r6, #16
   149c0:	430b      	orrs	r3, r1
   149c2:	603b      	str	r3, [r7, #0]
   149c4:	cc08      	ldmia	r4!, {r3}
   149c6:	9903      	ldr	r1, [sp, #12]
   149c8:	0c1b      	lsrs	r3, r3, #16
   149ca:	434b      	muls	r3, r1
   149cc:	6879      	ldr	r1, [r7, #4]
   149ce:	0c36      	lsrs	r6, r6, #16
   149d0:	b289      	uxth	r1, r1
   149d2:	185b      	adds	r3, r3, r1
   149d4:	9905      	ldr	r1, [sp, #20]
   149d6:	199b      	adds	r3, r3, r6
   149d8:	0c1e      	lsrs	r6, r3, #16
   149da:	42a1      	cmp	r1, r4
   149dc:	d8e6      	bhi.n	149ac <__multiply+0xd8>
   149de:	6003      	str	r3, [r0, #0]
   149e0:	9b00      	ldr	r3, [sp, #0]
   149e2:	3204      	adds	r2, #4
   149e4:	3304      	adds	r3, #4
   149e6:	9300      	str	r3, [sp, #0]
   149e8:	e7a0      	b.n	1492c <__multiply+0x58>
   149ea:	9b01      	ldr	r3, [sp, #4]
   149ec:	3b01      	subs	r3, #1
   149ee:	9301      	str	r3, [sp, #4]
   149f0:	e79f      	b.n	14932 <__multiply+0x5e>
	...

000149f4 <__pow5mult>:
   149f4:	2303      	movs	r3, #3
   149f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   149f8:	4013      	ands	r3, r2
   149fa:	0005      	movs	r5, r0
   149fc:	000e      	movs	r6, r1
   149fe:	0014      	movs	r4, r2
   14a00:	2b00      	cmp	r3, #0
   14a02:	d008      	beq.n	14a16 <__pow5mult+0x22>
   14a04:	4922      	ldr	r1, [pc, #136]	; (14a90 <__pow5mult+0x9c>)
   14a06:	3b01      	subs	r3, #1
   14a08:	009a      	lsls	r2, r3, #2
   14a0a:	5852      	ldr	r2, [r2, r1]
   14a0c:	2300      	movs	r3, #0
   14a0e:	0031      	movs	r1, r6
   14a10:	f7ff fed2 	bl	147b8 <__multadd>
   14a14:	0006      	movs	r6, r0
   14a16:	10a3      	asrs	r3, r4, #2
   14a18:	9301      	str	r3, [sp, #4]
   14a1a:	d036      	beq.n	14a8a <__pow5mult+0x96>
   14a1c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   14a1e:	2c00      	cmp	r4, #0
   14a20:	d107      	bne.n	14a32 <__pow5mult+0x3e>
   14a22:	2010      	movs	r0, #16
   14a24:	f7fd fd42 	bl	124ac <malloc>
   14a28:	6268      	str	r0, [r5, #36]	; 0x24
   14a2a:	6044      	str	r4, [r0, #4]
   14a2c:	6084      	str	r4, [r0, #8]
   14a2e:	6004      	str	r4, [r0, #0]
   14a30:	60c4      	str	r4, [r0, #12]
   14a32:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   14a34:	68bc      	ldr	r4, [r7, #8]
   14a36:	2c00      	cmp	r4, #0
   14a38:	d107      	bne.n	14a4a <__pow5mult+0x56>
   14a3a:	4916      	ldr	r1, [pc, #88]	; (14a94 <__pow5mult+0xa0>)
   14a3c:	0028      	movs	r0, r5
   14a3e:	f7ff ff40 	bl	148c2 <__i2b>
   14a42:	2300      	movs	r3, #0
   14a44:	0004      	movs	r4, r0
   14a46:	60b8      	str	r0, [r7, #8]
   14a48:	6003      	str	r3, [r0, #0]
   14a4a:	2201      	movs	r2, #1
   14a4c:	9b01      	ldr	r3, [sp, #4]
   14a4e:	4213      	tst	r3, r2
   14a50:	d00a      	beq.n	14a68 <__pow5mult+0x74>
   14a52:	0031      	movs	r1, r6
   14a54:	0022      	movs	r2, r4
   14a56:	0028      	movs	r0, r5
   14a58:	f7ff ff3c 	bl	148d4 <__multiply>
   14a5c:	0007      	movs	r7, r0
   14a5e:	0031      	movs	r1, r6
   14a60:	0028      	movs	r0, r5
   14a62:	f7ff fe90 	bl	14786 <_Bfree>
   14a66:	003e      	movs	r6, r7
   14a68:	9b01      	ldr	r3, [sp, #4]
   14a6a:	105b      	asrs	r3, r3, #1
   14a6c:	9301      	str	r3, [sp, #4]
   14a6e:	d00c      	beq.n	14a8a <__pow5mult+0x96>
   14a70:	6820      	ldr	r0, [r4, #0]
   14a72:	2800      	cmp	r0, #0
   14a74:	d107      	bne.n	14a86 <__pow5mult+0x92>
   14a76:	0022      	movs	r2, r4
   14a78:	0021      	movs	r1, r4
   14a7a:	0028      	movs	r0, r5
   14a7c:	f7ff ff2a 	bl	148d4 <__multiply>
   14a80:	2300      	movs	r3, #0
   14a82:	6020      	str	r0, [r4, #0]
   14a84:	6003      	str	r3, [r0, #0]
   14a86:	0004      	movs	r4, r0
   14a88:	e7df      	b.n	14a4a <__pow5mult+0x56>
   14a8a:	0030      	movs	r0, r6
   14a8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14a8e:	46c0      	nop			; (mov r8, r8)
   14a90:	0001a230 	.word	0x0001a230
   14a94:	00000271 	.word	0x00000271

00014a98 <__lshift>:
   14a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a9a:	000d      	movs	r5, r1
   14a9c:	0017      	movs	r7, r2
   14a9e:	692b      	ldr	r3, [r5, #16]
   14aa0:	1154      	asrs	r4, r2, #5
   14aa2:	b085      	sub	sp, #20
   14aa4:	18e3      	adds	r3, r4, r3
   14aa6:	9302      	str	r3, [sp, #8]
   14aa8:	3301      	adds	r3, #1
   14aaa:	9301      	str	r3, [sp, #4]
   14aac:	6849      	ldr	r1, [r1, #4]
   14aae:	68ab      	ldr	r3, [r5, #8]
   14ab0:	9003      	str	r0, [sp, #12]
   14ab2:	9a01      	ldr	r2, [sp, #4]
   14ab4:	4293      	cmp	r3, r2
   14ab6:	db34      	blt.n	14b22 <__lshift+0x8a>
   14ab8:	9803      	ldr	r0, [sp, #12]
   14aba:	f7ff fe2c 	bl	14716 <_Balloc>
   14abe:	2300      	movs	r3, #0
   14ac0:	0002      	movs	r2, r0
   14ac2:	0006      	movs	r6, r0
   14ac4:	0019      	movs	r1, r3
   14ac6:	3214      	adds	r2, #20
   14ac8:	42a3      	cmp	r3, r4
   14aca:	db2d      	blt.n	14b28 <__lshift+0x90>
   14acc:	43e3      	mvns	r3, r4
   14ace:	17db      	asrs	r3, r3, #31
   14ad0:	401c      	ands	r4, r3
   14ad2:	002b      	movs	r3, r5
   14ad4:	211f      	movs	r1, #31
   14ad6:	00a4      	lsls	r4, r4, #2
   14ad8:	1914      	adds	r4, r2, r4
   14ada:	692a      	ldr	r2, [r5, #16]
   14adc:	3314      	adds	r3, #20
   14ade:	0092      	lsls	r2, r2, #2
   14ae0:	189a      	adds	r2, r3, r2
   14ae2:	400f      	ands	r7, r1
   14ae4:	d024      	beq.n	14b30 <__lshift+0x98>
   14ae6:	3101      	adds	r1, #1
   14ae8:	1bc9      	subs	r1, r1, r7
   14aea:	468c      	mov	ip, r1
   14aec:	2100      	movs	r1, #0
   14aee:	6818      	ldr	r0, [r3, #0]
   14af0:	40b8      	lsls	r0, r7
   14af2:	4301      	orrs	r1, r0
   14af4:	4660      	mov	r0, ip
   14af6:	6021      	str	r1, [r4, #0]
   14af8:	cb02      	ldmia	r3!, {r1}
   14afa:	3404      	adds	r4, #4
   14afc:	40c1      	lsrs	r1, r0
   14afe:	429a      	cmp	r2, r3
   14b00:	d8f5      	bhi.n	14aee <__lshift+0x56>
   14b02:	6021      	str	r1, [r4, #0]
   14b04:	2900      	cmp	r1, #0
   14b06:	d002      	beq.n	14b0e <__lshift+0x76>
   14b08:	9b02      	ldr	r3, [sp, #8]
   14b0a:	3302      	adds	r3, #2
   14b0c:	9301      	str	r3, [sp, #4]
   14b0e:	9b01      	ldr	r3, [sp, #4]
   14b10:	9803      	ldr	r0, [sp, #12]
   14b12:	3b01      	subs	r3, #1
   14b14:	6133      	str	r3, [r6, #16]
   14b16:	0029      	movs	r1, r5
   14b18:	f7ff fe35 	bl	14786 <_Bfree>
   14b1c:	0030      	movs	r0, r6
   14b1e:	b005      	add	sp, #20
   14b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b22:	3101      	adds	r1, #1
   14b24:	005b      	lsls	r3, r3, #1
   14b26:	e7c4      	b.n	14ab2 <__lshift+0x1a>
   14b28:	0098      	lsls	r0, r3, #2
   14b2a:	5011      	str	r1, [r2, r0]
   14b2c:	3301      	adds	r3, #1
   14b2e:	e7cb      	b.n	14ac8 <__lshift+0x30>
   14b30:	cb02      	ldmia	r3!, {r1}
   14b32:	c402      	stmia	r4!, {r1}
   14b34:	429a      	cmp	r2, r3
   14b36:	d8fb      	bhi.n	14b30 <__lshift+0x98>
   14b38:	e7e9      	b.n	14b0e <__lshift+0x76>

00014b3a <__mcmp>:
   14b3a:	690a      	ldr	r2, [r1, #16]
   14b3c:	6903      	ldr	r3, [r0, #16]
   14b3e:	b530      	push	{r4, r5, lr}
   14b40:	1a9b      	subs	r3, r3, r2
   14b42:	d10e      	bne.n	14b62 <__mcmp+0x28>
   14b44:	0092      	lsls	r2, r2, #2
   14b46:	3014      	adds	r0, #20
   14b48:	3114      	adds	r1, #20
   14b4a:	1884      	adds	r4, r0, r2
   14b4c:	1889      	adds	r1, r1, r2
   14b4e:	3c04      	subs	r4, #4
   14b50:	3904      	subs	r1, #4
   14b52:	6822      	ldr	r2, [r4, #0]
   14b54:	680d      	ldr	r5, [r1, #0]
   14b56:	42aa      	cmp	r2, r5
   14b58:	d005      	beq.n	14b66 <__mcmp+0x2c>
   14b5a:	42aa      	cmp	r2, r5
   14b5c:	4192      	sbcs	r2, r2
   14b5e:	2301      	movs	r3, #1
   14b60:	4313      	orrs	r3, r2
   14b62:	0018      	movs	r0, r3
   14b64:	bd30      	pop	{r4, r5, pc}
   14b66:	42a0      	cmp	r0, r4
   14b68:	d3f1      	bcc.n	14b4e <__mcmp+0x14>
   14b6a:	e7fa      	b.n	14b62 <__mcmp+0x28>

00014b6c <__mdiff>:
   14b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b6e:	000d      	movs	r5, r1
   14b70:	b085      	sub	sp, #20
   14b72:	0007      	movs	r7, r0
   14b74:	0011      	movs	r1, r2
   14b76:	0028      	movs	r0, r5
   14b78:	0014      	movs	r4, r2
   14b7a:	f7ff ffde 	bl	14b3a <__mcmp>
   14b7e:	1e06      	subs	r6, r0, #0
   14b80:	d108      	bne.n	14b94 <__mdiff+0x28>
   14b82:	0001      	movs	r1, r0
   14b84:	0038      	movs	r0, r7
   14b86:	f7ff fdc6 	bl	14716 <_Balloc>
   14b8a:	2301      	movs	r3, #1
   14b8c:	6146      	str	r6, [r0, #20]
   14b8e:	6103      	str	r3, [r0, #16]
   14b90:	b005      	add	sp, #20
   14b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b94:	2301      	movs	r3, #1
   14b96:	9301      	str	r3, [sp, #4]
   14b98:	2800      	cmp	r0, #0
   14b9a:	db04      	blt.n	14ba6 <__mdiff+0x3a>
   14b9c:	0023      	movs	r3, r4
   14b9e:	002c      	movs	r4, r5
   14ba0:	001d      	movs	r5, r3
   14ba2:	2300      	movs	r3, #0
   14ba4:	9301      	str	r3, [sp, #4]
   14ba6:	6861      	ldr	r1, [r4, #4]
   14ba8:	0038      	movs	r0, r7
   14baa:	f7ff fdb4 	bl	14716 <_Balloc>
   14bae:	002f      	movs	r7, r5
   14bb0:	2200      	movs	r2, #0
   14bb2:	9b01      	ldr	r3, [sp, #4]
   14bb4:	6926      	ldr	r6, [r4, #16]
   14bb6:	60c3      	str	r3, [r0, #12]
   14bb8:	3414      	adds	r4, #20
   14bba:	00b3      	lsls	r3, r6, #2
   14bbc:	18e3      	adds	r3, r4, r3
   14bbe:	9302      	str	r3, [sp, #8]
   14bc0:	692b      	ldr	r3, [r5, #16]
   14bc2:	3714      	adds	r7, #20
   14bc4:	009b      	lsls	r3, r3, #2
   14bc6:	18fb      	adds	r3, r7, r3
   14bc8:	9303      	str	r3, [sp, #12]
   14bca:	0003      	movs	r3, r0
   14bcc:	4694      	mov	ip, r2
   14bce:	3314      	adds	r3, #20
   14bd0:	cc20      	ldmia	r4!, {r5}
   14bd2:	cf04      	ldmia	r7!, {r2}
   14bd4:	9201      	str	r2, [sp, #4]
   14bd6:	b2aa      	uxth	r2, r5
   14bd8:	4494      	add	ip, r2
   14bda:	466a      	mov	r2, sp
   14bdc:	4661      	mov	r1, ip
   14bde:	8892      	ldrh	r2, [r2, #4]
   14be0:	0c2d      	lsrs	r5, r5, #16
   14be2:	1a8a      	subs	r2, r1, r2
   14be4:	9901      	ldr	r1, [sp, #4]
   14be6:	0c09      	lsrs	r1, r1, #16
   14be8:	1a69      	subs	r1, r5, r1
   14bea:	1415      	asrs	r5, r2, #16
   14bec:	1949      	adds	r1, r1, r5
   14bee:	140d      	asrs	r5, r1, #16
   14bf0:	b292      	uxth	r2, r2
   14bf2:	0409      	lsls	r1, r1, #16
   14bf4:	430a      	orrs	r2, r1
   14bf6:	601a      	str	r2, [r3, #0]
   14bf8:	9a03      	ldr	r2, [sp, #12]
   14bfa:	46ac      	mov	ip, r5
   14bfc:	3304      	adds	r3, #4
   14bfe:	42ba      	cmp	r2, r7
   14c00:	d8e6      	bhi.n	14bd0 <__mdiff+0x64>
   14c02:	9902      	ldr	r1, [sp, #8]
   14c04:	001a      	movs	r2, r3
   14c06:	428c      	cmp	r4, r1
   14c08:	d305      	bcc.n	14c16 <__mdiff+0xaa>
   14c0a:	3a04      	subs	r2, #4
   14c0c:	6813      	ldr	r3, [r2, #0]
   14c0e:	2b00      	cmp	r3, #0
   14c10:	d00e      	beq.n	14c30 <__mdiff+0xc4>
   14c12:	6106      	str	r6, [r0, #16]
   14c14:	e7bc      	b.n	14b90 <__mdiff+0x24>
   14c16:	cc04      	ldmia	r4!, {r2}
   14c18:	b291      	uxth	r1, r2
   14c1a:	4461      	add	r1, ip
   14c1c:	140d      	asrs	r5, r1, #16
   14c1e:	0c12      	lsrs	r2, r2, #16
   14c20:	1952      	adds	r2, r2, r5
   14c22:	1415      	asrs	r5, r2, #16
   14c24:	b289      	uxth	r1, r1
   14c26:	0412      	lsls	r2, r2, #16
   14c28:	430a      	orrs	r2, r1
   14c2a:	46ac      	mov	ip, r5
   14c2c:	c304      	stmia	r3!, {r2}
   14c2e:	e7e8      	b.n	14c02 <__mdiff+0x96>
   14c30:	3e01      	subs	r6, #1
   14c32:	e7ea      	b.n	14c0a <__mdiff+0x9e>

00014c34 <__d2b>:
   14c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c36:	001d      	movs	r5, r3
   14c38:	2101      	movs	r1, #1
   14c3a:	9f08      	ldr	r7, [sp, #32]
   14c3c:	0014      	movs	r4, r2
   14c3e:	f7ff fd6a 	bl	14716 <_Balloc>
   14c42:	032b      	lsls	r3, r5, #12
   14c44:	006d      	lsls	r5, r5, #1
   14c46:	0006      	movs	r6, r0
   14c48:	0b1b      	lsrs	r3, r3, #12
   14c4a:	0d6d      	lsrs	r5, r5, #21
   14c4c:	d124      	bne.n	14c98 <__d2b+0x64>
   14c4e:	9301      	str	r3, [sp, #4]
   14c50:	2c00      	cmp	r4, #0
   14c52:	d027      	beq.n	14ca4 <__d2b+0x70>
   14c54:	4668      	mov	r0, sp
   14c56:	9400      	str	r4, [sp, #0]
   14c58:	f7ff fe04 	bl	14864 <__lo0bits>
   14c5c:	9c00      	ldr	r4, [sp, #0]
   14c5e:	2800      	cmp	r0, #0
   14c60:	d01e      	beq.n	14ca0 <__d2b+0x6c>
   14c62:	9b01      	ldr	r3, [sp, #4]
   14c64:	2120      	movs	r1, #32
   14c66:	001a      	movs	r2, r3
   14c68:	1a09      	subs	r1, r1, r0
   14c6a:	408a      	lsls	r2, r1
   14c6c:	40c3      	lsrs	r3, r0
   14c6e:	4322      	orrs	r2, r4
   14c70:	6172      	str	r2, [r6, #20]
   14c72:	9301      	str	r3, [sp, #4]
   14c74:	9c01      	ldr	r4, [sp, #4]
   14c76:	61b4      	str	r4, [r6, #24]
   14c78:	1e63      	subs	r3, r4, #1
   14c7a:	419c      	sbcs	r4, r3
   14c7c:	3401      	adds	r4, #1
   14c7e:	6134      	str	r4, [r6, #16]
   14c80:	2d00      	cmp	r5, #0
   14c82:	d018      	beq.n	14cb6 <__d2b+0x82>
   14c84:	4b12      	ldr	r3, [pc, #72]	; (14cd0 <__d2b+0x9c>)
   14c86:	18ed      	adds	r5, r5, r3
   14c88:	2335      	movs	r3, #53	; 0x35
   14c8a:	182d      	adds	r5, r5, r0
   14c8c:	603d      	str	r5, [r7, #0]
   14c8e:	1a18      	subs	r0, r3, r0
   14c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14c92:	6018      	str	r0, [r3, #0]
   14c94:	0030      	movs	r0, r6
   14c96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14c98:	2280      	movs	r2, #128	; 0x80
   14c9a:	0352      	lsls	r2, r2, #13
   14c9c:	4313      	orrs	r3, r2
   14c9e:	e7d6      	b.n	14c4e <__d2b+0x1a>
   14ca0:	6174      	str	r4, [r6, #20]
   14ca2:	e7e7      	b.n	14c74 <__d2b+0x40>
   14ca4:	a801      	add	r0, sp, #4
   14ca6:	f7ff fddd 	bl	14864 <__lo0bits>
   14caa:	2401      	movs	r4, #1
   14cac:	9b01      	ldr	r3, [sp, #4]
   14cae:	6134      	str	r4, [r6, #16]
   14cb0:	6173      	str	r3, [r6, #20]
   14cb2:	3020      	adds	r0, #32
   14cb4:	e7e4      	b.n	14c80 <__d2b+0x4c>
   14cb6:	4b07      	ldr	r3, [pc, #28]	; (14cd4 <__d2b+0xa0>)
   14cb8:	18c0      	adds	r0, r0, r3
   14cba:	4b07      	ldr	r3, [pc, #28]	; (14cd8 <__d2b+0xa4>)
   14cbc:	6038      	str	r0, [r7, #0]
   14cbe:	18e3      	adds	r3, r4, r3
   14cc0:	009b      	lsls	r3, r3, #2
   14cc2:	18f3      	adds	r3, r6, r3
   14cc4:	6958      	ldr	r0, [r3, #20]
   14cc6:	f7ff fdb3 	bl	14830 <__hi0bits>
   14cca:	0164      	lsls	r4, r4, #5
   14ccc:	1a20      	subs	r0, r4, r0
   14cce:	e7df      	b.n	14c90 <__d2b+0x5c>
   14cd0:	fffffbcd 	.word	0xfffffbcd
   14cd4:	fffffbce 	.word	0xfffffbce
   14cd8:	3fffffff 	.word	0x3fffffff

00014cdc <_calloc_r>:
   14cdc:	434a      	muls	r2, r1
   14cde:	b570      	push	{r4, r5, r6, lr}
   14ce0:	0011      	movs	r1, r2
   14ce2:	0014      	movs	r4, r2
   14ce4:	f7fd fc76 	bl	125d4 <_malloc_r>
   14ce8:	1e05      	subs	r5, r0, #0
   14cea:	d003      	beq.n	14cf4 <_calloc_r+0x18>
   14cec:	0022      	movs	r2, r4
   14cee:	2100      	movs	r1, #0
   14cf0:	f7fd fc1d 	bl	1252e <memset>
   14cf4:	0028      	movs	r0, r5
   14cf6:	bd70      	pop	{r4, r5, r6, pc}

00014cf8 <__ssputs_r>:
   14cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cfa:	688e      	ldr	r6, [r1, #8]
   14cfc:	b085      	sub	sp, #20
   14cfe:	0007      	movs	r7, r0
   14d00:	000c      	movs	r4, r1
   14d02:	9203      	str	r2, [sp, #12]
   14d04:	9301      	str	r3, [sp, #4]
   14d06:	429e      	cmp	r6, r3
   14d08:	d839      	bhi.n	14d7e <__ssputs_r+0x86>
   14d0a:	2390      	movs	r3, #144	; 0x90
   14d0c:	898a      	ldrh	r2, [r1, #12]
   14d0e:	00db      	lsls	r3, r3, #3
   14d10:	421a      	tst	r2, r3
   14d12:	d034      	beq.n	14d7e <__ssputs_r+0x86>
   14d14:	2503      	movs	r5, #3
   14d16:	6909      	ldr	r1, [r1, #16]
   14d18:	6823      	ldr	r3, [r4, #0]
   14d1a:	1a5b      	subs	r3, r3, r1
   14d1c:	9302      	str	r3, [sp, #8]
   14d1e:	6963      	ldr	r3, [r4, #20]
   14d20:	9802      	ldr	r0, [sp, #8]
   14d22:	435d      	muls	r5, r3
   14d24:	0feb      	lsrs	r3, r5, #31
   14d26:	195d      	adds	r5, r3, r5
   14d28:	9b01      	ldr	r3, [sp, #4]
   14d2a:	106d      	asrs	r5, r5, #1
   14d2c:	3301      	adds	r3, #1
   14d2e:	181b      	adds	r3, r3, r0
   14d30:	42ab      	cmp	r3, r5
   14d32:	d900      	bls.n	14d36 <__ssputs_r+0x3e>
   14d34:	001d      	movs	r5, r3
   14d36:	0553      	lsls	r3, r2, #21
   14d38:	d532      	bpl.n	14da0 <__ssputs_r+0xa8>
   14d3a:	0029      	movs	r1, r5
   14d3c:	0038      	movs	r0, r7
   14d3e:	f7fd fc49 	bl	125d4 <_malloc_r>
   14d42:	1e06      	subs	r6, r0, #0
   14d44:	d109      	bne.n	14d5a <__ssputs_r+0x62>
   14d46:	230c      	movs	r3, #12
   14d48:	603b      	str	r3, [r7, #0]
   14d4a:	2340      	movs	r3, #64	; 0x40
   14d4c:	2001      	movs	r0, #1
   14d4e:	89a2      	ldrh	r2, [r4, #12]
   14d50:	4240      	negs	r0, r0
   14d52:	4313      	orrs	r3, r2
   14d54:	81a3      	strh	r3, [r4, #12]
   14d56:	b005      	add	sp, #20
   14d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d5a:	9a02      	ldr	r2, [sp, #8]
   14d5c:	6921      	ldr	r1, [r4, #16]
   14d5e:	f7fd fbcb 	bl	124f8 <memcpy>
   14d62:	89a3      	ldrh	r3, [r4, #12]
   14d64:	4a14      	ldr	r2, [pc, #80]	; (14db8 <__ssputs_r+0xc0>)
   14d66:	401a      	ands	r2, r3
   14d68:	2380      	movs	r3, #128	; 0x80
   14d6a:	4313      	orrs	r3, r2
   14d6c:	81a3      	strh	r3, [r4, #12]
   14d6e:	9b02      	ldr	r3, [sp, #8]
   14d70:	6126      	str	r6, [r4, #16]
   14d72:	18f6      	adds	r6, r6, r3
   14d74:	6026      	str	r6, [r4, #0]
   14d76:	6165      	str	r5, [r4, #20]
   14d78:	9e01      	ldr	r6, [sp, #4]
   14d7a:	1aed      	subs	r5, r5, r3
   14d7c:	60a5      	str	r5, [r4, #8]
   14d7e:	9b01      	ldr	r3, [sp, #4]
   14d80:	42b3      	cmp	r3, r6
   14d82:	d200      	bcs.n	14d86 <__ssputs_r+0x8e>
   14d84:	001e      	movs	r6, r3
   14d86:	0032      	movs	r2, r6
   14d88:	9903      	ldr	r1, [sp, #12]
   14d8a:	6820      	ldr	r0, [r4, #0]
   14d8c:	f7fd fbbd 	bl	1250a <memmove>
   14d90:	68a3      	ldr	r3, [r4, #8]
   14d92:	2000      	movs	r0, #0
   14d94:	1b9b      	subs	r3, r3, r6
   14d96:	60a3      	str	r3, [r4, #8]
   14d98:	6823      	ldr	r3, [r4, #0]
   14d9a:	199e      	adds	r6, r3, r6
   14d9c:	6026      	str	r6, [r4, #0]
   14d9e:	e7da      	b.n	14d56 <__ssputs_r+0x5e>
   14da0:	002a      	movs	r2, r5
   14da2:	0038      	movs	r0, r7
   14da4:	f000 fb32 	bl	1540c <_realloc_r>
   14da8:	1e06      	subs	r6, r0, #0
   14daa:	d1e0      	bne.n	14d6e <__ssputs_r+0x76>
   14dac:	6921      	ldr	r1, [r4, #16]
   14dae:	0038      	movs	r0, r7
   14db0:	f7fd fbc6 	bl	12540 <_free_r>
   14db4:	e7c7      	b.n	14d46 <__ssputs_r+0x4e>
   14db6:	46c0      	nop			; (mov r8, r8)
   14db8:	fffffb7f 	.word	0xfffffb7f

00014dbc <_svfiprintf_r>:
   14dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dbe:	b09f      	sub	sp, #124	; 0x7c
   14dc0:	9002      	str	r0, [sp, #8]
   14dc2:	9305      	str	r3, [sp, #20]
   14dc4:	898b      	ldrh	r3, [r1, #12]
   14dc6:	000f      	movs	r7, r1
   14dc8:	0016      	movs	r6, r2
   14dca:	061b      	lsls	r3, r3, #24
   14dcc:	d511      	bpl.n	14df2 <_svfiprintf_r+0x36>
   14dce:	690b      	ldr	r3, [r1, #16]
   14dd0:	2b00      	cmp	r3, #0
   14dd2:	d10e      	bne.n	14df2 <_svfiprintf_r+0x36>
   14dd4:	2140      	movs	r1, #64	; 0x40
   14dd6:	f7fd fbfd 	bl	125d4 <_malloc_r>
   14dda:	6038      	str	r0, [r7, #0]
   14ddc:	6138      	str	r0, [r7, #16]
   14dde:	2800      	cmp	r0, #0
   14de0:	d105      	bne.n	14dee <_svfiprintf_r+0x32>
   14de2:	230c      	movs	r3, #12
   14de4:	9a02      	ldr	r2, [sp, #8]
   14de6:	3801      	subs	r0, #1
   14de8:	6013      	str	r3, [r2, #0]
   14dea:	b01f      	add	sp, #124	; 0x7c
   14dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14dee:	2340      	movs	r3, #64	; 0x40
   14df0:	617b      	str	r3, [r7, #20]
   14df2:	2300      	movs	r3, #0
   14df4:	ad06      	add	r5, sp, #24
   14df6:	616b      	str	r3, [r5, #20]
   14df8:	3320      	adds	r3, #32
   14dfa:	766b      	strb	r3, [r5, #25]
   14dfc:	3310      	adds	r3, #16
   14dfe:	76ab      	strb	r3, [r5, #26]
   14e00:	0034      	movs	r4, r6
   14e02:	7823      	ldrb	r3, [r4, #0]
   14e04:	2b00      	cmp	r3, #0
   14e06:	d147      	bne.n	14e98 <_svfiprintf_r+0xdc>
   14e08:	1ba3      	subs	r3, r4, r6
   14e0a:	9304      	str	r3, [sp, #16]
   14e0c:	d00d      	beq.n	14e2a <_svfiprintf_r+0x6e>
   14e0e:	1ba3      	subs	r3, r4, r6
   14e10:	0032      	movs	r2, r6
   14e12:	0039      	movs	r1, r7
   14e14:	9802      	ldr	r0, [sp, #8]
   14e16:	f7ff ff6f 	bl	14cf8 <__ssputs_r>
   14e1a:	1c43      	adds	r3, r0, #1
   14e1c:	d100      	bne.n	14e20 <_svfiprintf_r+0x64>
   14e1e:	e0b5      	b.n	14f8c <_svfiprintf_r+0x1d0>
   14e20:	696a      	ldr	r2, [r5, #20]
   14e22:	9b04      	ldr	r3, [sp, #16]
   14e24:	4694      	mov	ip, r2
   14e26:	4463      	add	r3, ip
   14e28:	616b      	str	r3, [r5, #20]
   14e2a:	7823      	ldrb	r3, [r4, #0]
   14e2c:	2b00      	cmp	r3, #0
   14e2e:	d100      	bne.n	14e32 <_svfiprintf_r+0x76>
   14e30:	e0ac      	b.n	14f8c <_svfiprintf_r+0x1d0>
   14e32:	2201      	movs	r2, #1
   14e34:	2300      	movs	r3, #0
   14e36:	4252      	negs	r2, r2
   14e38:	606a      	str	r2, [r5, #4]
   14e3a:	a902      	add	r1, sp, #8
   14e3c:	3254      	adds	r2, #84	; 0x54
   14e3e:	1852      	adds	r2, r2, r1
   14e40:	3401      	adds	r4, #1
   14e42:	602b      	str	r3, [r5, #0]
   14e44:	60eb      	str	r3, [r5, #12]
   14e46:	60ab      	str	r3, [r5, #8]
   14e48:	7013      	strb	r3, [r2, #0]
   14e4a:	65ab      	str	r3, [r5, #88]	; 0x58
   14e4c:	4e58      	ldr	r6, [pc, #352]	; (14fb0 <_svfiprintf_r+0x1f4>)
   14e4e:	2205      	movs	r2, #5
   14e50:	7821      	ldrb	r1, [r4, #0]
   14e52:	0030      	movs	r0, r6
   14e54:	f7ff fc52 	bl	146fc <memchr>
   14e58:	1c62      	adds	r2, r4, #1
   14e5a:	2800      	cmp	r0, #0
   14e5c:	d120      	bne.n	14ea0 <_svfiprintf_r+0xe4>
   14e5e:	6829      	ldr	r1, [r5, #0]
   14e60:	06cb      	lsls	r3, r1, #27
   14e62:	d504      	bpl.n	14e6e <_svfiprintf_r+0xb2>
   14e64:	2353      	movs	r3, #83	; 0x53
   14e66:	ae02      	add	r6, sp, #8
   14e68:	3020      	adds	r0, #32
   14e6a:	199b      	adds	r3, r3, r6
   14e6c:	7018      	strb	r0, [r3, #0]
   14e6e:	070b      	lsls	r3, r1, #28
   14e70:	d504      	bpl.n	14e7c <_svfiprintf_r+0xc0>
   14e72:	2353      	movs	r3, #83	; 0x53
   14e74:	202b      	movs	r0, #43	; 0x2b
   14e76:	ae02      	add	r6, sp, #8
   14e78:	199b      	adds	r3, r3, r6
   14e7a:	7018      	strb	r0, [r3, #0]
   14e7c:	7823      	ldrb	r3, [r4, #0]
   14e7e:	2b2a      	cmp	r3, #42	; 0x2a
   14e80:	d016      	beq.n	14eb0 <_svfiprintf_r+0xf4>
   14e82:	2000      	movs	r0, #0
   14e84:	210a      	movs	r1, #10
   14e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14e88:	7822      	ldrb	r2, [r4, #0]
   14e8a:	3a30      	subs	r2, #48	; 0x30
   14e8c:	2a09      	cmp	r2, #9
   14e8e:	d955      	bls.n	14f3c <_svfiprintf_r+0x180>
   14e90:	2800      	cmp	r0, #0
   14e92:	d015      	beq.n	14ec0 <_svfiprintf_r+0x104>
   14e94:	9309      	str	r3, [sp, #36]	; 0x24
   14e96:	e013      	b.n	14ec0 <_svfiprintf_r+0x104>
   14e98:	2b25      	cmp	r3, #37	; 0x25
   14e9a:	d0b5      	beq.n	14e08 <_svfiprintf_r+0x4c>
   14e9c:	3401      	adds	r4, #1
   14e9e:	e7b0      	b.n	14e02 <_svfiprintf_r+0x46>
   14ea0:	2301      	movs	r3, #1
   14ea2:	1b80      	subs	r0, r0, r6
   14ea4:	4083      	lsls	r3, r0
   14ea6:	6829      	ldr	r1, [r5, #0]
   14ea8:	0014      	movs	r4, r2
   14eaa:	430b      	orrs	r3, r1
   14eac:	602b      	str	r3, [r5, #0]
   14eae:	e7cd      	b.n	14e4c <_svfiprintf_r+0x90>
   14eb0:	9b05      	ldr	r3, [sp, #20]
   14eb2:	1d18      	adds	r0, r3, #4
   14eb4:	681b      	ldr	r3, [r3, #0]
   14eb6:	9005      	str	r0, [sp, #20]
   14eb8:	2b00      	cmp	r3, #0
   14eba:	db39      	blt.n	14f30 <_svfiprintf_r+0x174>
   14ebc:	9309      	str	r3, [sp, #36]	; 0x24
   14ebe:	0014      	movs	r4, r2
   14ec0:	7823      	ldrb	r3, [r4, #0]
   14ec2:	2b2e      	cmp	r3, #46	; 0x2e
   14ec4:	d10b      	bne.n	14ede <_svfiprintf_r+0x122>
   14ec6:	7863      	ldrb	r3, [r4, #1]
   14ec8:	1c62      	adds	r2, r4, #1
   14eca:	2b2a      	cmp	r3, #42	; 0x2a
   14ecc:	d13e      	bne.n	14f4c <_svfiprintf_r+0x190>
   14ece:	9b05      	ldr	r3, [sp, #20]
   14ed0:	3402      	adds	r4, #2
   14ed2:	1d1a      	adds	r2, r3, #4
   14ed4:	681b      	ldr	r3, [r3, #0]
   14ed6:	9205      	str	r2, [sp, #20]
   14ed8:	2b00      	cmp	r3, #0
   14eda:	db34      	blt.n	14f46 <_svfiprintf_r+0x18a>
   14edc:	9307      	str	r3, [sp, #28]
   14ede:	4e35      	ldr	r6, [pc, #212]	; (14fb4 <_svfiprintf_r+0x1f8>)
   14ee0:	7821      	ldrb	r1, [r4, #0]
   14ee2:	2203      	movs	r2, #3
   14ee4:	0030      	movs	r0, r6
   14ee6:	f7ff fc09 	bl	146fc <memchr>
   14eea:	2800      	cmp	r0, #0
   14eec:	d006      	beq.n	14efc <_svfiprintf_r+0x140>
   14eee:	2340      	movs	r3, #64	; 0x40
   14ef0:	1b80      	subs	r0, r0, r6
   14ef2:	4083      	lsls	r3, r0
   14ef4:	682a      	ldr	r2, [r5, #0]
   14ef6:	3401      	adds	r4, #1
   14ef8:	4313      	orrs	r3, r2
   14efa:	602b      	str	r3, [r5, #0]
   14efc:	7821      	ldrb	r1, [r4, #0]
   14efe:	2206      	movs	r2, #6
   14f00:	482d      	ldr	r0, [pc, #180]	; (14fb8 <_svfiprintf_r+0x1fc>)
   14f02:	1c66      	adds	r6, r4, #1
   14f04:	7629      	strb	r1, [r5, #24]
   14f06:	f7ff fbf9 	bl	146fc <memchr>
   14f0a:	2800      	cmp	r0, #0
   14f0c:	d046      	beq.n	14f9c <_svfiprintf_r+0x1e0>
   14f0e:	4b2b      	ldr	r3, [pc, #172]	; (14fbc <_svfiprintf_r+0x200>)
   14f10:	2b00      	cmp	r3, #0
   14f12:	d12f      	bne.n	14f74 <_svfiprintf_r+0x1b8>
   14f14:	6829      	ldr	r1, [r5, #0]
   14f16:	9b05      	ldr	r3, [sp, #20]
   14f18:	2207      	movs	r2, #7
   14f1a:	05c9      	lsls	r1, r1, #23
   14f1c:	d528      	bpl.n	14f70 <_svfiprintf_r+0x1b4>
   14f1e:	189b      	adds	r3, r3, r2
   14f20:	4393      	bics	r3, r2
   14f22:	3308      	adds	r3, #8
   14f24:	9305      	str	r3, [sp, #20]
   14f26:	696b      	ldr	r3, [r5, #20]
   14f28:	9a03      	ldr	r2, [sp, #12]
   14f2a:	189b      	adds	r3, r3, r2
   14f2c:	616b      	str	r3, [r5, #20]
   14f2e:	e767      	b.n	14e00 <_svfiprintf_r+0x44>
   14f30:	425b      	negs	r3, r3
   14f32:	60eb      	str	r3, [r5, #12]
   14f34:	2302      	movs	r3, #2
   14f36:	430b      	orrs	r3, r1
   14f38:	602b      	str	r3, [r5, #0]
   14f3a:	e7c0      	b.n	14ebe <_svfiprintf_r+0x102>
   14f3c:	434b      	muls	r3, r1
   14f3e:	3401      	adds	r4, #1
   14f40:	189b      	adds	r3, r3, r2
   14f42:	2001      	movs	r0, #1
   14f44:	e7a0      	b.n	14e88 <_svfiprintf_r+0xcc>
   14f46:	2301      	movs	r3, #1
   14f48:	425b      	negs	r3, r3
   14f4a:	e7c7      	b.n	14edc <_svfiprintf_r+0x120>
   14f4c:	2300      	movs	r3, #0
   14f4e:	0014      	movs	r4, r2
   14f50:	200a      	movs	r0, #10
   14f52:	001a      	movs	r2, r3
   14f54:	606b      	str	r3, [r5, #4]
   14f56:	7821      	ldrb	r1, [r4, #0]
   14f58:	3930      	subs	r1, #48	; 0x30
   14f5a:	2909      	cmp	r1, #9
   14f5c:	d903      	bls.n	14f66 <_svfiprintf_r+0x1aa>
   14f5e:	2b00      	cmp	r3, #0
   14f60:	d0bd      	beq.n	14ede <_svfiprintf_r+0x122>
   14f62:	9207      	str	r2, [sp, #28]
   14f64:	e7bb      	b.n	14ede <_svfiprintf_r+0x122>
   14f66:	4342      	muls	r2, r0
   14f68:	3401      	adds	r4, #1
   14f6a:	1852      	adds	r2, r2, r1
   14f6c:	2301      	movs	r3, #1
   14f6e:	e7f2      	b.n	14f56 <_svfiprintf_r+0x19a>
   14f70:	3307      	adds	r3, #7
   14f72:	e7d5      	b.n	14f20 <_svfiprintf_r+0x164>
   14f74:	ab05      	add	r3, sp, #20
   14f76:	9300      	str	r3, [sp, #0]
   14f78:	003a      	movs	r2, r7
   14f7a:	4b11      	ldr	r3, [pc, #68]	; (14fc0 <_svfiprintf_r+0x204>)
   14f7c:	0029      	movs	r1, r5
   14f7e:	9802      	ldr	r0, [sp, #8]
   14f80:	f7fd fc22 	bl	127c8 <_printf_float>
   14f84:	9003      	str	r0, [sp, #12]
   14f86:	9b03      	ldr	r3, [sp, #12]
   14f88:	3301      	adds	r3, #1
   14f8a:	d1cc      	bne.n	14f26 <_svfiprintf_r+0x16a>
   14f8c:	89bb      	ldrh	r3, [r7, #12]
   14f8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14f90:	065b      	lsls	r3, r3, #25
   14f92:	d400      	bmi.n	14f96 <_svfiprintf_r+0x1da>
   14f94:	e729      	b.n	14dea <_svfiprintf_r+0x2e>
   14f96:	2001      	movs	r0, #1
   14f98:	4240      	negs	r0, r0
   14f9a:	e726      	b.n	14dea <_svfiprintf_r+0x2e>
   14f9c:	ab05      	add	r3, sp, #20
   14f9e:	9300      	str	r3, [sp, #0]
   14fa0:	003a      	movs	r2, r7
   14fa2:	4b07      	ldr	r3, [pc, #28]	; (14fc0 <_svfiprintf_r+0x204>)
   14fa4:	0029      	movs	r1, r5
   14fa6:	9802      	ldr	r0, [sp, #8]
   14fa8:	f7fd fec8 	bl	12d3c <_printf_i>
   14fac:	e7ea      	b.n	14f84 <_svfiprintf_r+0x1c8>
   14fae:	46c0      	nop			; (mov r8, r8)
   14fb0:	0001a23c 	.word	0x0001a23c
   14fb4:	0001a242 	.word	0x0001a242
   14fb8:	0001a246 	.word	0x0001a246
   14fbc:	000127c9 	.word	0x000127c9
   14fc0:	00014cf9 	.word	0x00014cf9

00014fc4 <__sfputc_r>:
   14fc4:	6893      	ldr	r3, [r2, #8]
   14fc6:	b510      	push	{r4, lr}
   14fc8:	3b01      	subs	r3, #1
   14fca:	6093      	str	r3, [r2, #8]
   14fcc:	2b00      	cmp	r3, #0
   14fce:	da05      	bge.n	14fdc <__sfputc_r+0x18>
   14fd0:	6994      	ldr	r4, [r2, #24]
   14fd2:	42a3      	cmp	r3, r4
   14fd4:	db08      	blt.n	14fe8 <__sfputc_r+0x24>
   14fd6:	b2cb      	uxtb	r3, r1
   14fd8:	2b0a      	cmp	r3, #10
   14fda:	d005      	beq.n	14fe8 <__sfputc_r+0x24>
   14fdc:	6813      	ldr	r3, [r2, #0]
   14fde:	1c58      	adds	r0, r3, #1
   14fe0:	6010      	str	r0, [r2, #0]
   14fe2:	7019      	strb	r1, [r3, #0]
   14fe4:	b2c8      	uxtb	r0, r1
   14fe6:	bd10      	pop	{r4, pc}
   14fe8:	f7fe fa3e 	bl	13468 <__swbuf_r>
   14fec:	e7fb      	b.n	14fe6 <__sfputc_r+0x22>

00014fee <__sfputs_r>:
   14fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ff0:	0006      	movs	r6, r0
   14ff2:	000f      	movs	r7, r1
   14ff4:	0014      	movs	r4, r2
   14ff6:	18d5      	adds	r5, r2, r3
   14ff8:	42ac      	cmp	r4, r5
   14ffa:	d101      	bne.n	15000 <__sfputs_r+0x12>
   14ffc:	2000      	movs	r0, #0
   14ffe:	e007      	b.n	15010 <__sfputs_r+0x22>
   15000:	7821      	ldrb	r1, [r4, #0]
   15002:	003a      	movs	r2, r7
   15004:	0030      	movs	r0, r6
   15006:	f7ff ffdd 	bl	14fc4 <__sfputc_r>
   1500a:	3401      	adds	r4, #1
   1500c:	1c43      	adds	r3, r0, #1
   1500e:	d1f3      	bne.n	14ff8 <__sfputs_r+0xa>
   15010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00015014 <_vfiprintf_r>:
   15014:	b5f0      	push	{r4, r5, r6, r7, lr}
   15016:	b09f      	sub	sp, #124	; 0x7c
   15018:	0006      	movs	r6, r0
   1501a:	000f      	movs	r7, r1
   1501c:	0014      	movs	r4, r2
   1501e:	9305      	str	r3, [sp, #20]
   15020:	2800      	cmp	r0, #0
   15022:	d004      	beq.n	1502e <_vfiprintf_r+0x1a>
   15024:	6983      	ldr	r3, [r0, #24]
   15026:	2b00      	cmp	r3, #0
   15028:	d101      	bne.n	1502e <_vfiprintf_r+0x1a>
   1502a:	f7ff fa59 	bl	144e0 <__sinit>
   1502e:	4b7f      	ldr	r3, [pc, #508]	; (1522c <_vfiprintf_r+0x218>)
   15030:	429f      	cmp	r7, r3
   15032:	d15c      	bne.n	150ee <_vfiprintf_r+0xda>
   15034:	6877      	ldr	r7, [r6, #4]
   15036:	89bb      	ldrh	r3, [r7, #12]
   15038:	071b      	lsls	r3, r3, #28
   1503a:	d562      	bpl.n	15102 <_vfiprintf_r+0xee>
   1503c:	693b      	ldr	r3, [r7, #16]
   1503e:	2b00      	cmp	r3, #0
   15040:	d05f      	beq.n	15102 <_vfiprintf_r+0xee>
   15042:	2300      	movs	r3, #0
   15044:	ad06      	add	r5, sp, #24
   15046:	616b      	str	r3, [r5, #20]
   15048:	3320      	adds	r3, #32
   1504a:	766b      	strb	r3, [r5, #25]
   1504c:	3310      	adds	r3, #16
   1504e:	76ab      	strb	r3, [r5, #26]
   15050:	9402      	str	r4, [sp, #8]
   15052:	9c02      	ldr	r4, [sp, #8]
   15054:	7823      	ldrb	r3, [r4, #0]
   15056:	2b00      	cmp	r3, #0
   15058:	d15d      	bne.n	15116 <_vfiprintf_r+0x102>
   1505a:	9b02      	ldr	r3, [sp, #8]
   1505c:	1ae3      	subs	r3, r4, r3
   1505e:	9304      	str	r3, [sp, #16]
   15060:	d00d      	beq.n	1507e <_vfiprintf_r+0x6a>
   15062:	9b04      	ldr	r3, [sp, #16]
   15064:	9a02      	ldr	r2, [sp, #8]
   15066:	0039      	movs	r1, r7
   15068:	0030      	movs	r0, r6
   1506a:	f7ff ffc0 	bl	14fee <__sfputs_r>
   1506e:	1c43      	adds	r3, r0, #1
   15070:	d100      	bne.n	15074 <_vfiprintf_r+0x60>
   15072:	e0cc      	b.n	1520e <_vfiprintf_r+0x1fa>
   15074:	696a      	ldr	r2, [r5, #20]
   15076:	9b04      	ldr	r3, [sp, #16]
   15078:	4694      	mov	ip, r2
   1507a:	4463      	add	r3, ip
   1507c:	616b      	str	r3, [r5, #20]
   1507e:	7823      	ldrb	r3, [r4, #0]
   15080:	2b00      	cmp	r3, #0
   15082:	d100      	bne.n	15086 <_vfiprintf_r+0x72>
   15084:	e0c3      	b.n	1520e <_vfiprintf_r+0x1fa>
   15086:	2201      	movs	r2, #1
   15088:	2300      	movs	r3, #0
   1508a:	4252      	negs	r2, r2
   1508c:	606a      	str	r2, [r5, #4]
   1508e:	a902      	add	r1, sp, #8
   15090:	3254      	adds	r2, #84	; 0x54
   15092:	1852      	adds	r2, r2, r1
   15094:	3401      	adds	r4, #1
   15096:	602b      	str	r3, [r5, #0]
   15098:	60eb      	str	r3, [r5, #12]
   1509a:	60ab      	str	r3, [r5, #8]
   1509c:	7013      	strb	r3, [r2, #0]
   1509e:	65ab      	str	r3, [r5, #88]	; 0x58
   150a0:	7821      	ldrb	r1, [r4, #0]
   150a2:	2205      	movs	r2, #5
   150a4:	4862      	ldr	r0, [pc, #392]	; (15230 <_vfiprintf_r+0x21c>)
   150a6:	f7ff fb29 	bl	146fc <memchr>
   150aa:	1c63      	adds	r3, r4, #1
   150ac:	469c      	mov	ip, r3
   150ae:	2800      	cmp	r0, #0
   150b0:	d135      	bne.n	1511e <_vfiprintf_r+0x10a>
   150b2:	6829      	ldr	r1, [r5, #0]
   150b4:	06cb      	lsls	r3, r1, #27
   150b6:	d504      	bpl.n	150c2 <_vfiprintf_r+0xae>
   150b8:	2353      	movs	r3, #83	; 0x53
   150ba:	aa02      	add	r2, sp, #8
   150bc:	3020      	adds	r0, #32
   150be:	189b      	adds	r3, r3, r2
   150c0:	7018      	strb	r0, [r3, #0]
   150c2:	070b      	lsls	r3, r1, #28
   150c4:	d504      	bpl.n	150d0 <_vfiprintf_r+0xbc>
   150c6:	2353      	movs	r3, #83	; 0x53
   150c8:	202b      	movs	r0, #43	; 0x2b
   150ca:	aa02      	add	r2, sp, #8
   150cc:	189b      	adds	r3, r3, r2
   150ce:	7018      	strb	r0, [r3, #0]
   150d0:	7823      	ldrb	r3, [r4, #0]
   150d2:	2b2a      	cmp	r3, #42	; 0x2a
   150d4:	d02c      	beq.n	15130 <_vfiprintf_r+0x11c>
   150d6:	2000      	movs	r0, #0
   150d8:	210a      	movs	r1, #10
   150da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   150dc:	7822      	ldrb	r2, [r4, #0]
   150de:	3a30      	subs	r2, #48	; 0x30
   150e0:	2a09      	cmp	r2, #9
   150e2:	d800      	bhi.n	150e6 <_vfiprintf_r+0xd2>
   150e4:	e06b      	b.n	151be <_vfiprintf_r+0x1aa>
   150e6:	2800      	cmp	r0, #0
   150e8:	d02a      	beq.n	15140 <_vfiprintf_r+0x12c>
   150ea:	9309      	str	r3, [sp, #36]	; 0x24
   150ec:	e028      	b.n	15140 <_vfiprintf_r+0x12c>
   150ee:	4b51      	ldr	r3, [pc, #324]	; (15234 <_vfiprintf_r+0x220>)
   150f0:	429f      	cmp	r7, r3
   150f2:	d101      	bne.n	150f8 <_vfiprintf_r+0xe4>
   150f4:	68b7      	ldr	r7, [r6, #8]
   150f6:	e79e      	b.n	15036 <_vfiprintf_r+0x22>
   150f8:	4b4f      	ldr	r3, [pc, #316]	; (15238 <_vfiprintf_r+0x224>)
   150fa:	429f      	cmp	r7, r3
   150fc:	d19b      	bne.n	15036 <_vfiprintf_r+0x22>
   150fe:	68f7      	ldr	r7, [r6, #12]
   15100:	e799      	b.n	15036 <_vfiprintf_r+0x22>
   15102:	0039      	movs	r1, r7
   15104:	0030      	movs	r0, r6
   15106:	f7fe fa11 	bl	1352c <__swsetup_r>
   1510a:	2800      	cmp	r0, #0
   1510c:	d099      	beq.n	15042 <_vfiprintf_r+0x2e>
   1510e:	2001      	movs	r0, #1
   15110:	4240      	negs	r0, r0
   15112:	b01f      	add	sp, #124	; 0x7c
   15114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15116:	2b25      	cmp	r3, #37	; 0x25
   15118:	d09f      	beq.n	1505a <_vfiprintf_r+0x46>
   1511a:	3401      	adds	r4, #1
   1511c:	e79a      	b.n	15054 <_vfiprintf_r+0x40>
   1511e:	4b44      	ldr	r3, [pc, #272]	; (15230 <_vfiprintf_r+0x21c>)
   15120:	6829      	ldr	r1, [r5, #0]
   15122:	1ac0      	subs	r0, r0, r3
   15124:	2301      	movs	r3, #1
   15126:	4083      	lsls	r3, r0
   15128:	430b      	orrs	r3, r1
   1512a:	602b      	str	r3, [r5, #0]
   1512c:	4664      	mov	r4, ip
   1512e:	e7b7      	b.n	150a0 <_vfiprintf_r+0x8c>
   15130:	9b05      	ldr	r3, [sp, #20]
   15132:	1d18      	adds	r0, r3, #4
   15134:	681b      	ldr	r3, [r3, #0]
   15136:	9005      	str	r0, [sp, #20]
   15138:	2b00      	cmp	r3, #0
   1513a:	db3a      	blt.n	151b2 <_vfiprintf_r+0x19e>
   1513c:	9309      	str	r3, [sp, #36]	; 0x24
   1513e:	4664      	mov	r4, ip
   15140:	7823      	ldrb	r3, [r4, #0]
   15142:	2b2e      	cmp	r3, #46	; 0x2e
   15144:	d10b      	bne.n	1515e <_vfiprintf_r+0x14a>
   15146:	7863      	ldrb	r3, [r4, #1]
   15148:	1c62      	adds	r2, r4, #1
   1514a:	2b2a      	cmp	r3, #42	; 0x2a
   1514c:	d13f      	bne.n	151ce <_vfiprintf_r+0x1ba>
   1514e:	9b05      	ldr	r3, [sp, #20]
   15150:	3402      	adds	r4, #2
   15152:	1d1a      	adds	r2, r3, #4
   15154:	681b      	ldr	r3, [r3, #0]
   15156:	9205      	str	r2, [sp, #20]
   15158:	2b00      	cmp	r3, #0
   1515a:	db35      	blt.n	151c8 <_vfiprintf_r+0x1b4>
   1515c:	9307      	str	r3, [sp, #28]
   1515e:	7821      	ldrb	r1, [r4, #0]
   15160:	2203      	movs	r2, #3
   15162:	4836      	ldr	r0, [pc, #216]	; (1523c <_vfiprintf_r+0x228>)
   15164:	f7ff faca 	bl	146fc <memchr>
   15168:	2800      	cmp	r0, #0
   1516a:	d007      	beq.n	1517c <_vfiprintf_r+0x168>
   1516c:	4b33      	ldr	r3, [pc, #204]	; (1523c <_vfiprintf_r+0x228>)
   1516e:	682a      	ldr	r2, [r5, #0]
   15170:	1ac0      	subs	r0, r0, r3
   15172:	2340      	movs	r3, #64	; 0x40
   15174:	4083      	lsls	r3, r0
   15176:	4313      	orrs	r3, r2
   15178:	602b      	str	r3, [r5, #0]
   1517a:	3401      	adds	r4, #1
   1517c:	7821      	ldrb	r1, [r4, #0]
   1517e:	1c63      	adds	r3, r4, #1
   15180:	2206      	movs	r2, #6
   15182:	482f      	ldr	r0, [pc, #188]	; (15240 <_vfiprintf_r+0x22c>)
   15184:	9302      	str	r3, [sp, #8]
   15186:	7629      	strb	r1, [r5, #24]
   15188:	f7ff fab8 	bl	146fc <memchr>
   1518c:	2800      	cmp	r0, #0
   1518e:	d044      	beq.n	1521a <_vfiprintf_r+0x206>
   15190:	4b2c      	ldr	r3, [pc, #176]	; (15244 <_vfiprintf_r+0x230>)
   15192:	2b00      	cmp	r3, #0
   15194:	d12f      	bne.n	151f6 <_vfiprintf_r+0x1e2>
   15196:	6829      	ldr	r1, [r5, #0]
   15198:	9b05      	ldr	r3, [sp, #20]
   1519a:	2207      	movs	r2, #7
   1519c:	05c9      	lsls	r1, r1, #23
   1519e:	d528      	bpl.n	151f2 <_vfiprintf_r+0x1de>
   151a0:	189b      	adds	r3, r3, r2
   151a2:	4393      	bics	r3, r2
   151a4:	3308      	adds	r3, #8
   151a6:	9305      	str	r3, [sp, #20]
   151a8:	696b      	ldr	r3, [r5, #20]
   151aa:	9a03      	ldr	r2, [sp, #12]
   151ac:	189b      	adds	r3, r3, r2
   151ae:	616b      	str	r3, [r5, #20]
   151b0:	e74f      	b.n	15052 <_vfiprintf_r+0x3e>
   151b2:	425b      	negs	r3, r3
   151b4:	60eb      	str	r3, [r5, #12]
   151b6:	2302      	movs	r3, #2
   151b8:	430b      	orrs	r3, r1
   151ba:	602b      	str	r3, [r5, #0]
   151bc:	e7bf      	b.n	1513e <_vfiprintf_r+0x12a>
   151be:	434b      	muls	r3, r1
   151c0:	3401      	adds	r4, #1
   151c2:	189b      	adds	r3, r3, r2
   151c4:	2001      	movs	r0, #1
   151c6:	e789      	b.n	150dc <_vfiprintf_r+0xc8>
   151c8:	2301      	movs	r3, #1
   151ca:	425b      	negs	r3, r3
   151cc:	e7c6      	b.n	1515c <_vfiprintf_r+0x148>
   151ce:	2300      	movs	r3, #0
   151d0:	0014      	movs	r4, r2
   151d2:	200a      	movs	r0, #10
   151d4:	001a      	movs	r2, r3
   151d6:	606b      	str	r3, [r5, #4]
   151d8:	7821      	ldrb	r1, [r4, #0]
   151da:	3930      	subs	r1, #48	; 0x30
   151dc:	2909      	cmp	r1, #9
   151de:	d903      	bls.n	151e8 <_vfiprintf_r+0x1d4>
   151e0:	2b00      	cmp	r3, #0
   151e2:	d0bc      	beq.n	1515e <_vfiprintf_r+0x14a>
   151e4:	9207      	str	r2, [sp, #28]
   151e6:	e7ba      	b.n	1515e <_vfiprintf_r+0x14a>
   151e8:	4342      	muls	r2, r0
   151ea:	3401      	adds	r4, #1
   151ec:	1852      	adds	r2, r2, r1
   151ee:	2301      	movs	r3, #1
   151f0:	e7f2      	b.n	151d8 <_vfiprintf_r+0x1c4>
   151f2:	3307      	adds	r3, #7
   151f4:	e7d5      	b.n	151a2 <_vfiprintf_r+0x18e>
   151f6:	ab05      	add	r3, sp, #20
   151f8:	9300      	str	r3, [sp, #0]
   151fa:	003a      	movs	r2, r7
   151fc:	4b12      	ldr	r3, [pc, #72]	; (15248 <_vfiprintf_r+0x234>)
   151fe:	0029      	movs	r1, r5
   15200:	0030      	movs	r0, r6
   15202:	f7fd fae1 	bl	127c8 <_printf_float>
   15206:	9003      	str	r0, [sp, #12]
   15208:	9b03      	ldr	r3, [sp, #12]
   1520a:	3301      	adds	r3, #1
   1520c:	d1cc      	bne.n	151a8 <_vfiprintf_r+0x194>
   1520e:	89bb      	ldrh	r3, [r7, #12]
   15210:	065b      	lsls	r3, r3, #25
   15212:	d500      	bpl.n	15216 <_vfiprintf_r+0x202>
   15214:	e77b      	b.n	1510e <_vfiprintf_r+0xfa>
   15216:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15218:	e77b      	b.n	15112 <_vfiprintf_r+0xfe>
   1521a:	ab05      	add	r3, sp, #20
   1521c:	9300      	str	r3, [sp, #0]
   1521e:	003a      	movs	r2, r7
   15220:	4b09      	ldr	r3, [pc, #36]	; (15248 <_vfiprintf_r+0x234>)
   15222:	0029      	movs	r1, r5
   15224:	0030      	movs	r0, r6
   15226:	f7fd fd89 	bl	12d3c <_printf_i>
   1522a:	e7ec      	b.n	15206 <_vfiprintf_r+0x1f2>
   1522c:	0001a100 	.word	0x0001a100
   15230:	0001a23c 	.word	0x0001a23c
   15234:	0001a120 	.word	0x0001a120
   15238:	0001a0e0 	.word	0x0001a0e0
   1523c:	0001a242 	.word	0x0001a242
   15240:	0001a246 	.word	0x0001a246
   15244:	000127c9 	.word	0x000127c9
   15248:	00014fef 	.word	0x00014fef

0001524c <_putc_r>:
   1524c:	b570      	push	{r4, r5, r6, lr}
   1524e:	0006      	movs	r6, r0
   15250:	000d      	movs	r5, r1
   15252:	0014      	movs	r4, r2
   15254:	2800      	cmp	r0, #0
   15256:	d004      	beq.n	15262 <_putc_r+0x16>
   15258:	6983      	ldr	r3, [r0, #24]
   1525a:	2b00      	cmp	r3, #0
   1525c:	d101      	bne.n	15262 <_putc_r+0x16>
   1525e:	f7ff f93f 	bl	144e0 <__sinit>
   15262:	4b12      	ldr	r3, [pc, #72]	; (152ac <_putc_r+0x60>)
   15264:	429c      	cmp	r4, r3
   15266:	d111      	bne.n	1528c <_putc_r+0x40>
   15268:	6874      	ldr	r4, [r6, #4]
   1526a:	68a3      	ldr	r3, [r4, #8]
   1526c:	3b01      	subs	r3, #1
   1526e:	60a3      	str	r3, [r4, #8]
   15270:	2b00      	cmp	r3, #0
   15272:	da05      	bge.n	15280 <_putc_r+0x34>
   15274:	69a2      	ldr	r2, [r4, #24]
   15276:	4293      	cmp	r3, r2
   15278:	db12      	blt.n	152a0 <_putc_r+0x54>
   1527a:	b2eb      	uxtb	r3, r5
   1527c:	2b0a      	cmp	r3, #10
   1527e:	d00f      	beq.n	152a0 <_putc_r+0x54>
   15280:	6823      	ldr	r3, [r4, #0]
   15282:	b2e8      	uxtb	r0, r5
   15284:	1c5a      	adds	r2, r3, #1
   15286:	6022      	str	r2, [r4, #0]
   15288:	701d      	strb	r5, [r3, #0]
   1528a:	bd70      	pop	{r4, r5, r6, pc}
   1528c:	4b08      	ldr	r3, [pc, #32]	; (152b0 <_putc_r+0x64>)
   1528e:	429c      	cmp	r4, r3
   15290:	d101      	bne.n	15296 <_putc_r+0x4a>
   15292:	68b4      	ldr	r4, [r6, #8]
   15294:	e7e9      	b.n	1526a <_putc_r+0x1e>
   15296:	4b07      	ldr	r3, [pc, #28]	; (152b4 <_putc_r+0x68>)
   15298:	429c      	cmp	r4, r3
   1529a:	d1e6      	bne.n	1526a <_putc_r+0x1e>
   1529c:	68f4      	ldr	r4, [r6, #12]
   1529e:	e7e4      	b.n	1526a <_putc_r+0x1e>
   152a0:	0022      	movs	r2, r4
   152a2:	0029      	movs	r1, r5
   152a4:	0030      	movs	r0, r6
   152a6:	f7fe f8df 	bl	13468 <__swbuf_r>
   152aa:	e7ee      	b.n	1528a <_putc_r+0x3e>
   152ac:	0001a100 	.word	0x0001a100
   152b0:	0001a120 	.word	0x0001a120
   152b4:	0001a0e0 	.word	0x0001a0e0

000152b8 <__sread>:
   152b8:	b570      	push	{r4, r5, r6, lr}
   152ba:	000c      	movs	r4, r1
   152bc:	250e      	movs	r5, #14
   152be:	5f49      	ldrsh	r1, [r1, r5]
   152c0:	f000 f8ca 	bl	15458 <_read_r>
   152c4:	2800      	cmp	r0, #0
   152c6:	db03      	blt.n	152d0 <__sread+0x18>
   152c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   152ca:	181b      	adds	r3, r3, r0
   152cc:	6563      	str	r3, [r4, #84]	; 0x54
   152ce:	bd70      	pop	{r4, r5, r6, pc}
   152d0:	89a3      	ldrh	r3, [r4, #12]
   152d2:	4a02      	ldr	r2, [pc, #8]	; (152dc <__sread+0x24>)
   152d4:	4013      	ands	r3, r2
   152d6:	81a3      	strh	r3, [r4, #12]
   152d8:	e7f9      	b.n	152ce <__sread+0x16>
   152da:	46c0      	nop			; (mov r8, r8)
   152dc:	ffffefff 	.word	0xffffefff

000152e0 <__swrite>:
   152e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152e2:	001f      	movs	r7, r3
   152e4:	898b      	ldrh	r3, [r1, #12]
   152e6:	0005      	movs	r5, r0
   152e8:	000c      	movs	r4, r1
   152ea:	0016      	movs	r6, r2
   152ec:	05db      	lsls	r3, r3, #23
   152ee:	d505      	bpl.n	152fc <__swrite+0x1c>
   152f0:	230e      	movs	r3, #14
   152f2:	5ec9      	ldrsh	r1, [r1, r3]
   152f4:	2200      	movs	r2, #0
   152f6:	2302      	movs	r3, #2
   152f8:	f000 f874 	bl	153e4 <_lseek_r>
   152fc:	89a3      	ldrh	r3, [r4, #12]
   152fe:	4a05      	ldr	r2, [pc, #20]	; (15314 <__swrite+0x34>)
   15300:	0028      	movs	r0, r5
   15302:	4013      	ands	r3, r2
   15304:	81a3      	strh	r3, [r4, #12]
   15306:	0032      	movs	r2, r6
   15308:	230e      	movs	r3, #14
   1530a:	5ee1      	ldrsh	r1, [r4, r3]
   1530c:	003b      	movs	r3, r7
   1530e:	f000 f81f 	bl	15350 <_write_r>
   15312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15314:	ffffefff 	.word	0xffffefff

00015318 <__sseek>:
   15318:	b570      	push	{r4, r5, r6, lr}
   1531a:	000c      	movs	r4, r1
   1531c:	250e      	movs	r5, #14
   1531e:	5f49      	ldrsh	r1, [r1, r5]
   15320:	f000 f860 	bl	153e4 <_lseek_r>
   15324:	89a3      	ldrh	r3, [r4, #12]
   15326:	1c42      	adds	r2, r0, #1
   15328:	d103      	bne.n	15332 <__sseek+0x1a>
   1532a:	4a05      	ldr	r2, [pc, #20]	; (15340 <__sseek+0x28>)
   1532c:	4013      	ands	r3, r2
   1532e:	81a3      	strh	r3, [r4, #12]
   15330:	bd70      	pop	{r4, r5, r6, pc}
   15332:	2280      	movs	r2, #128	; 0x80
   15334:	0152      	lsls	r2, r2, #5
   15336:	4313      	orrs	r3, r2
   15338:	81a3      	strh	r3, [r4, #12]
   1533a:	6560      	str	r0, [r4, #84]	; 0x54
   1533c:	e7f8      	b.n	15330 <__sseek+0x18>
   1533e:	46c0      	nop			; (mov r8, r8)
   15340:	ffffefff 	.word	0xffffefff

00015344 <__sclose>:
   15344:	b510      	push	{r4, lr}
   15346:	230e      	movs	r3, #14
   15348:	5ec9      	ldrsh	r1, [r1, r3]
   1534a:	f000 f815 	bl	15378 <_close_r>
   1534e:	bd10      	pop	{r4, pc}

00015350 <_write_r>:
   15350:	b570      	push	{r4, r5, r6, lr}
   15352:	0005      	movs	r5, r0
   15354:	0008      	movs	r0, r1
   15356:	0011      	movs	r1, r2
   15358:	2200      	movs	r2, #0
   1535a:	4c06      	ldr	r4, [pc, #24]	; (15374 <_write_r+0x24>)
   1535c:	6022      	str	r2, [r4, #0]
   1535e:	001a      	movs	r2, r3
   15360:	f7f9 ffb6 	bl	f2d0 <_write>
   15364:	1c43      	adds	r3, r0, #1
   15366:	d103      	bne.n	15370 <_write_r+0x20>
   15368:	6823      	ldr	r3, [r4, #0]
   1536a:	2b00      	cmp	r3, #0
   1536c:	d000      	beq.n	15370 <_write_r+0x20>
   1536e:	602b      	str	r3, [r5, #0]
   15370:	bd70      	pop	{r4, r5, r6, pc}
   15372:	46c0      	nop			; (mov r8, r8)
   15374:	2000091c 	.word	0x2000091c

00015378 <_close_r>:
   15378:	2300      	movs	r3, #0
   1537a:	b570      	push	{r4, r5, r6, lr}
   1537c:	4c06      	ldr	r4, [pc, #24]	; (15398 <_close_r+0x20>)
   1537e:	0005      	movs	r5, r0
   15380:	0008      	movs	r0, r1
   15382:	6023      	str	r3, [r4, #0]
   15384:	f7fb ffc0 	bl	11308 <_close>
   15388:	1c43      	adds	r3, r0, #1
   1538a:	d103      	bne.n	15394 <_close_r+0x1c>
   1538c:	6823      	ldr	r3, [r4, #0]
   1538e:	2b00      	cmp	r3, #0
   15390:	d000      	beq.n	15394 <_close_r+0x1c>
   15392:	602b      	str	r3, [r5, #0]
   15394:	bd70      	pop	{r4, r5, r6, pc}
   15396:	46c0      	nop			; (mov r8, r8)
   15398:	2000091c 	.word	0x2000091c

0001539c <_fstat_r>:
   1539c:	2300      	movs	r3, #0
   1539e:	b570      	push	{r4, r5, r6, lr}
   153a0:	4c06      	ldr	r4, [pc, #24]	; (153bc <_fstat_r+0x20>)
   153a2:	0005      	movs	r5, r0
   153a4:	0008      	movs	r0, r1
   153a6:	0011      	movs	r1, r2
   153a8:	6023      	str	r3, [r4, #0]
   153aa:	f7fb ffb7 	bl	1131c <_fstat>
   153ae:	1c43      	adds	r3, r0, #1
   153b0:	d103      	bne.n	153ba <_fstat_r+0x1e>
   153b2:	6823      	ldr	r3, [r4, #0]
   153b4:	2b00      	cmp	r3, #0
   153b6:	d000      	beq.n	153ba <_fstat_r+0x1e>
   153b8:	602b      	str	r3, [r5, #0]
   153ba:	bd70      	pop	{r4, r5, r6, pc}
   153bc:	2000091c 	.word	0x2000091c

000153c0 <_isatty_r>:
   153c0:	2300      	movs	r3, #0
   153c2:	b570      	push	{r4, r5, r6, lr}
   153c4:	4c06      	ldr	r4, [pc, #24]	; (153e0 <_isatty_r+0x20>)
   153c6:	0005      	movs	r5, r0
   153c8:	0008      	movs	r0, r1
   153ca:	6023      	str	r3, [r4, #0]
   153cc:	f7fb ffb4 	bl	11338 <_isatty>
   153d0:	1c43      	adds	r3, r0, #1
   153d2:	d103      	bne.n	153dc <_isatty_r+0x1c>
   153d4:	6823      	ldr	r3, [r4, #0]
   153d6:	2b00      	cmp	r3, #0
   153d8:	d000      	beq.n	153dc <_isatty_r+0x1c>
   153da:	602b      	str	r3, [r5, #0]
   153dc:	bd70      	pop	{r4, r5, r6, pc}
   153de:	46c0      	nop			; (mov r8, r8)
   153e0:	2000091c 	.word	0x2000091c

000153e4 <_lseek_r>:
   153e4:	b570      	push	{r4, r5, r6, lr}
   153e6:	0005      	movs	r5, r0
   153e8:	0008      	movs	r0, r1
   153ea:	0011      	movs	r1, r2
   153ec:	2200      	movs	r2, #0
   153ee:	4c06      	ldr	r4, [pc, #24]	; (15408 <_lseek_r+0x24>)
   153f0:	6022      	str	r2, [r4, #0]
   153f2:	001a      	movs	r2, r3
   153f4:	f7fb ffa9 	bl	1134a <_lseek>
   153f8:	1c43      	adds	r3, r0, #1
   153fa:	d103      	bne.n	15404 <_lseek_r+0x20>
   153fc:	6823      	ldr	r3, [r4, #0]
   153fe:	2b00      	cmp	r3, #0
   15400:	d000      	beq.n	15404 <_lseek_r+0x20>
   15402:	602b      	str	r3, [r5, #0]
   15404:	bd70      	pop	{r4, r5, r6, pc}
   15406:	46c0      	nop			; (mov r8, r8)
   15408:	2000091c 	.word	0x2000091c

0001540c <_realloc_r>:
   1540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1540e:	0007      	movs	r7, r0
   15410:	000d      	movs	r5, r1
   15412:	0016      	movs	r6, r2
   15414:	2900      	cmp	r1, #0
   15416:	d105      	bne.n	15424 <_realloc_r+0x18>
   15418:	0011      	movs	r1, r2
   1541a:	f7fd f8db 	bl	125d4 <_malloc_r>
   1541e:	0004      	movs	r4, r0
   15420:	0020      	movs	r0, r4
   15422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15424:	2a00      	cmp	r2, #0
   15426:	d103      	bne.n	15430 <_realloc_r+0x24>
   15428:	f7fd f88a 	bl	12540 <_free_r>
   1542c:	0034      	movs	r4, r6
   1542e:	e7f7      	b.n	15420 <_realloc_r+0x14>
   15430:	f000 f826 	bl	15480 <_malloc_usable_size_r>
   15434:	002c      	movs	r4, r5
   15436:	4286      	cmp	r6, r0
   15438:	d9f2      	bls.n	15420 <_realloc_r+0x14>
   1543a:	0031      	movs	r1, r6
   1543c:	0038      	movs	r0, r7
   1543e:	f7fd f8c9 	bl	125d4 <_malloc_r>
   15442:	1e04      	subs	r4, r0, #0
   15444:	d0ec      	beq.n	15420 <_realloc_r+0x14>
   15446:	0029      	movs	r1, r5
   15448:	0032      	movs	r2, r6
   1544a:	f7fd f855 	bl	124f8 <memcpy>
   1544e:	0029      	movs	r1, r5
   15450:	0038      	movs	r0, r7
   15452:	f7fd f875 	bl	12540 <_free_r>
   15456:	e7e3      	b.n	15420 <_realloc_r+0x14>

00015458 <_read_r>:
   15458:	b570      	push	{r4, r5, r6, lr}
   1545a:	0005      	movs	r5, r0
   1545c:	0008      	movs	r0, r1
   1545e:	0011      	movs	r1, r2
   15460:	2200      	movs	r2, #0
   15462:	4c06      	ldr	r4, [pc, #24]	; (1547c <_read_r+0x24>)
   15464:	6022      	str	r2, [r4, #0]
   15466:	001a      	movs	r2, r3
   15468:	f7f9 ff08 	bl	f27c <_read>
   1546c:	1c43      	adds	r3, r0, #1
   1546e:	d103      	bne.n	15478 <_read_r+0x20>
   15470:	6823      	ldr	r3, [r4, #0]
   15472:	2b00      	cmp	r3, #0
   15474:	d000      	beq.n	15478 <_read_r+0x20>
   15476:	602b      	str	r3, [r5, #0]
   15478:	bd70      	pop	{r4, r5, r6, pc}
   1547a:	46c0      	nop			; (mov r8, r8)
   1547c:	2000091c 	.word	0x2000091c

00015480 <_malloc_usable_size_r>:
   15480:	1f0b      	subs	r3, r1, #4
   15482:	681b      	ldr	r3, [r3, #0]
   15484:	1f18      	subs	r0, r3, #4
   15486:	2b00      	cmp	r3, #0
   15488:	da01      	bge.n	1548e <_malloc_usable_size_r+0xe>
   1548a:	580b      	ldr	r3, [r1, r0]
   1548c:	18c0      	adds	r0, r0, r3
   1548e:	4770      	bx	lr

00015490 <__gnu_thumb1_case_uqi>:
   15490:	b402      	push	{r1}
   15492:	4671      	mov	r1, lr
   15494:	0849      	lsrs	r1, r1, #1
   15496:	0049      	lsls	r1, r1, #1
   15498:	5c09      	ldrb	r1, [r1, r0]
   1549a:	0049      	lsls	r1, r1, #1
   1549c:	448e      	add	lr, r1
   1549e:	bc02      	pop	{r1}
   154a0:	4770      	bx	lr
   154a2:	46c0      	nop			; (mov r8, r8)

000154a4 <__udivsi3>:
   154a4:	2200      	movs	r2, #0
   154a6:	0843      	lsrs	r3, r0, #1
   154a8:	428b      	cmp	r3, r1
   154aa:	d374      	bcc.n	15596 <__udivsi3+0xf2>
   154ac:	0903      	lsrs	r3, r0, #4
   154ae:	428b      	cmp	r3, r1
   154b0:	d35f      	bcc.n	15572 <__udivsi3+0xce>
   154b2:	0a03      	lsrs	r3, r0, #8
   154b4:	428b      	cmp	r3, r1
   154b6:	d344      	bcc.n	15542 <__udivsi3+0x9e>
   154b8:	0b03      	lsrs	r3, r0, #12
   154ba:	428b      	cmp	r3, r1
   154bc:	d328      	bcc.n	15510 <__udivsi3+0x6c>
   154be:	0c03      	lsrs	r3, r0, #16
   154c0:	428b      	cmp	r3, r1
   154c2:	d30d      	bcc.n	154e0 <__udivsi3+0x3c>
   154c4:	22ff      	movs	r2, #255	; 0xff
   154c6:	0209      	lsls	r1, r1, #8
   154c8:	ba12      	rev	r2, r2
   154ca:	0c03      	lsrs	r3, r0, #16
   154cc:	428b      	cmp	r3, r1
   154ce:	d302      	bcc.n	154d6 <__udivsi3+0x32>
   154d0:	1212      	asrs	r2, r2, #8
   154d2:	0209      	lsls	r1, r1, #8
   154d4:	d065      	beq.n	155a2 <__udivsi3+0xfe>
   154d6:	0b03      	lsrs	r3, r0, #12
   154d8:	428b      	cmp	r3, r1
   154da:	d319      	bcc.n	15510 <__udivsi3+0x6c>
   154dc:	e000      	b.n	154e0 <__udivsi3+0x3c>
   154de:	0a09      	lsrs	r1, r1, #8
   154e0:	0bc3      	lsrs	r3, r0, #15
   154e2:	428b      	cmp	r3, r1
   154e4:	d301      	bcc.n	154ea <__udivsi3+0x46>
   154e6:	03cb      	lsls	r3, r1, #15
   154e8:	1ac0      	subs	r0, r0, r3
   154ea:	4152      	adcs	r2, r2
   154ec:	0b83      	lsrs	r3, r0, #14
   154ee:	428b      	cmp	r3, r1
   154f0:	d301      	bcc.n	154f6 <__udivsi3+0x52>
   154f2:	038b      	lsls	r3, r1, #14
   154f4:	1ac0      	subs	r0, r0, r3
   154f6:	4152      	adcs	r2, r2
   154f8:	0b43      	lsrs	r3, r0, #13
   154fa:	428b      	cmp	r3, r1
   154fc:	d301      	bcc.n	15502 <__udivsi3+0x5e>
   154fe:	034b      	lsls	r3, r1, #13
   15500:	1ac0      	subs	r0, r0, r3
   15502:	4152      	adcs	r2, r2
   15504:	0b03      	lsrs	r3, r0, #12
   15506:	428b      	cmp	r3, r1
   15508:	d301      	bcc.n	1550e <__udivsi3+0x6a>
   1550a:	030b      	lsls	r3, r1, #12
   1550c:	1ac0      	subs	r0, r0, r3
   1550e:	4152      	adcs	r2, r2
   15510:	0ac3      	lsrs	r3, r0, #11
   15512:	428b      	cmp	r3, r1
   15514:	d301      	bcc.n	1551a <__udivsi3+0x76>
   15516:	02cb      	lsls	r3, r1, #11
   15518:	1ac0      	subs	r0, r0, r3
   1551a:	4152      	adcs	r2, r2
   1551c:	0a83      	lsrs	r3, r0, #10
   1551e:	428b      	cmp	r3, r1
   15520:	d301      	bcc.n	15526 <__udivsi3+0x82>
   15522:	028b      	lsls	r3, r1, #10
   15524:	1ac0      	subs	r0, r0, r3
   15526:	4152      	adcs	r2, r2
   15528:	0a43      	lsrs	r3, r0, #9
   1552a:	428b      	cmp	r3, r1
   1552c:	d301      	bcc.n	15532 <__udivsi3+0x8e>
   1552e:	024b      	lsls	r3, r1, #9
   15530:	1ac0      	subs	r0, r0, r3
   15532:	4152      	adcs	r2, r2
   15534:	0a03      	lsrs	r3, r0, #8
   15536:	428b      	cmp	r3, r1
   15538:	d301      	bcc.n	1553e <__udivsi3+0x9a>
   1553a:	020b      	lsls	r3, r1, #8
   1553c:	1ac0      	subs	r0, r0, r3
   1553e:	4152      	adcs	r2, r2
   15540:	d2cd      	bcs.n	154de <__udivsi3+0x3a>
   15542:	09c3      	lsrs	r3, r0, #7
   15544:	428b      	cmp	r3, r1
   15546:	d301      	bcc.n	1554c <__udivsi3+0xa8>
   15548:	01cb      	lsls	r3, r1, #7
   1554a:	1ac0      	subs	r0, r0, r3
   1554c:	4152      	adcs	r2, r2
   1554e:	0983      	lsrs	r3, r0, #6
   15550:	428b      	cmp	r3, r1
   15552:	d301      	bcc.n	15558 <__udivsi3+0xb4>
   15554:	018b      	lsls	r3, r1, #6
   15556:	1ac0      	subs	r0, r0, r3
   15558:	4152      	adcs	r2, r2
   1555a:	0943      	lsrs	r3, r0, #5
   1555c:	428b      	cmp	r3, r1
   1555e:	d301      	bcc.n	15564 <__udivsi3+0xc0>
   15560:	014b      	lsls	r3, r1, #5
   15562:	1ac0      	subs	r0, r0, r3
   15564:	4152      	adcs	r2, r2
   15566:	0903      	lsrs	r3, r0, #4
   15568:	428b      	cmp	r3, r1
   1556a:	d301      	bcc.n	15570 <__udivsi3+0xcc>
   1556c:	010b      	lsls	r3, r1, #4
   1556e:	1ac0      	subs	r0, r0, r3
   15570:	4152      	adcs	r2, r2
   15572:	08c3      	lsrs	r3, r0, #3
   15574:	428b      	cmp	r3, r1
   15576:	d301      	bcc.n	1557c <__udivsi3+0xd8>
   15578:	00cb      	lsls	r3, r1, #3
   1557a:	1ac0      	subs	r0, r0, r3
   1557c:	4152      	adcs	r2, r2
   1557e:	0883      	lsrs	r3, r0, #2
   15580:	428b      	cmp	r3, r1
   15582:	d301      	bcc.n	15588 <__udivsi3+0xe4>
   15584:	008b      	lsls	r3, r1, #2
   15586:	1ac0      	subs	r0, r0, r3
   15588:	4152      	adcs	r2, r2
   1558a:	0843      	lsrs	r3, r0, #1
   1558c:	428b      	cmp	r3, r1
   1558e:	d301      	bcc.n	15594 <__udivsi3+0xf0>
   15590:	004b      	lsls	r3, r1, #1
   15592:	1ac0      	subs	r0, r0, r3
   15594:	4152      	adcs	r2, r2
   15596:	1a41      	subs	r1, r0, r1
   15598:	d200      	bcs.n	1559c <__udivsi3+0xf8>
   1559a:	4601      	mov	r1, r0
   1559c:	4152      	adcs	r2, r2
   1559e:	4610      	mov	r0, r2
   155a0:	4770      	bx	lr
   155a2:	e7ff      	b.n	155a4 <__udivsi3+0x100>
   155a4:	b501      	push	{r0, lr}
   155a6:	2000      	movs	r0, #0
   155a8:	f000 f8f0 	bl	1578c <__aeabi_idiv0>
   155ac:	bd02      	pop	{r1, pc}
   155ae:	46c0      	nop			; (mov r8, r8)

000155b0 <__aeabi_uidivmod>:
   155b0:	2900      	cmp	r1, #0
   155b2:	d0f7      	beq.n	155a4 <__udivsi3+0x100>
   155b4:	e776      	b.n	154a4 <__udivsi3>
   155b6:	4770      	bx	lr

000155b8 <__divsi3>:
   155b8:	4603      	mov	r3, r0
   155ba:	430b      	orrs	r3, r1
   155bc:	d47f      	bmi.n	156be <__divsi3+0x106>
   155be:	2200      	movs	r2, #0
   155c0:	0843      	lsrs	r3, r0, #1
   155c2:	428b      	cmp	r3, r1
   155c4:	d374      	bcc.n	156b0 <__divsi3+0xf8>
   155c6:	0903      	lsrs	r3, r0, #4
   155c8:	428b      	cmp	r3, r1
   155ca:	d35f      	bcc.n	1568c <__divsi3+0xd4>
   155cc:	0a03      	lsrs	r3, r0, #8
   155ce:	428b      	cmp	r3, r1
   155d0:	d344      	bcc.n	1565c <__divsi3+0xa4>
   155d2:	0b03      	lsrs	r3, r0, #12
   155d4:	428b      	cmp	r3, r1
   155d6:	d328      	bcc.n	1562a <__divsi3+0x72>
   155d8:	0c03      	lsrs	r3, r0, #16
   155da:	428b      	cmp	r3, r1
   155dc:	d30d      	bcc.n	155fa <__divsi3+0x42>
   155de:	22ff      	movs	r2, #255	; 0xff
   155e0:	0209      	lsls	r1, r1, #8
   155e2:	ba12      	rev	r2, r2
   155e4:	0c03      	lsrs	r3, r0, #16
   155e6:	428b      	cmp	r3, r1
   155e8:	d302      	bcc.n	155f0 <__divsi3+0x38>
   155ea:	1212      	asrs	r2, r2, #8
   155ec:	0209      	lsls	r1, r1, #8
   155ee:	d065      	beq.n	156bc <__divsi3+0x104>
   155f0:	0b03      	lsrs	r3, r0, #12
   155f2:	428b      	cmp	r3, r1
   155f4:	d319      	bcc.n	1562a <__divsi3+0x72>
   155f6:	e000      	b.n	155fa <__divsi3+0x42>
   155f8:	0a09      	lsrs	r1, r1, #8
   155fa:	0bc3      	lsrs	r3, r0, #15
   155fc:	428b      	cmp	r3, r1
   155fe:	d301      	bcc.n	15604 <__divsi3+0x4c>
   15600:	03cb      	lsls	r3, r1, #15
   15602:	1ac0      	subs	r0, r0, r3
   15604:	4152      	adcs	r2, r2
   15606:	0b83      	lsrs	r3, r0, #14
   15608:	428b      	cmp	r3, r1
   1560a:	d301      	bcc.n	15610 <__divsi3+0x58>
   1560c:	038b      	lsls	r3, r1, #14
   1560e:	1ac0      	subs	r0, r0, r3
   15610:	4152      	adcs	r2, r2
   15612:	0b43      	lsrs	r3, r0, #13
   15614:	428b      	cmp	r3, r1
   15616:	d301      	bcc.n	1561c <__divsi3+0x64>
   15618:	034b      	lsls	r3, r1, #13
   1561a:	1ac0      	subs	r0, r0, r3
   1561c:	4152      	adcs	r2, r2
   1561e:	0b03      	lsrs	r3, r0, #12
   15620:	428b      	cmp	r3, r1
   15622:	d301      	bcc.n	15628 <__divsi3+0x70>
   15624:	030b      	lsls	r3, r1, #12
   15626:	1ac0      	subs	r0, r0, r3
   15628:	4152      	adcs	r2, r2
   1562a:	0ac3      	lsrs	r3, r0, #11
   1562c:	428b      	cmp	r3, r1
   1562e:	d301      	bcc.n	15634 <__divsi3+0x7c>
   15630:	02cb      	lsls	r3, r1, #11
   15632:	1ac0      	subs	r0, r0, r3
   15634:	4152      	adcs	r2, r2
   15636:	0a83      	lsrs	r3, r0, #10
   15638:	428b      	cmp	r3, r1
   1563a:	d301      	bcc.n	15640 <__divsi3+0x88>
   1563c:	028b      	lsls	r3, r1, #10
   1563e:	1ac0      	subs	r0, r0, r3
   15640:	4152      	adcs	r2, r2
   15642:	0a43      	lsrs	r3, r0, #9
   15644:	428b      	cmp	r3, r1
   15646:	d301      	bcc.n	1564c <__divsi3+0x94>
   15648:	024b      	lsls	r3, r1, #9
   1564a:	1ac0      	subs	r0, r0, r3
   1564c:	4152      	adcs	r2, r2
   1564e:	0a03      	lsrs	r3, r0, #8
   15650:	428b      	cmp	r3, r1
   15652:	d301      	bcc.n	15658 <__divsi3+0xa0>
   15654:	020b      	lsls	r3, r1, #8
   15656:	1ac0      	subs	r0, r0, r3
   15658:	4152      	adcs	r2, r2
   1565a:	d2cd      	bcs.n	155f8 <__divsi3+0x40>
   1565c:	09c3      	lsrs	r3, r0, #7
   1565e:	428b      	cmp	r3, r1
   15660:	d301      	bcc.n	15666 <__divsi3+0xae>
   15662:	01cb      	lsls	r3, r1, #7
   15664:	1ac0      	subs	r0, r0, r3
   15666:	4152      	adcs	r2, r2
   15668:	0983      	lsrs	r3, r0, #6
   1566a:	428b      	cmp	r3, r1
   1566c:	d301      	bcc.n	15672 <__divsi3+0xba>
   1566e:	018b      	lsls	r3, r1, #6
   15670:	1ac0      	subs	r0, r0, r3
   15672:	4152      	adcs	r2, r2
   15674:	0943      	lsrs	r3, r0, #5
   15676:	428b      	cmp	r3, r1
   15678:	d301      	bcc.n	1567e <__divsi3+0xc6>
   1567a:	014b      	lsls	r3, r1, #5
   1567c:	1ac0      	subs	r0, r0, r3
   1567e:	4152      	adcs	r2, r2
   15680:	0903      	lsrs	r3, r0, #4
   15682:	428b      	cmp	r3, r1
   15684:	d301      	bcc.n	1568a <__divsi3+0xd2>
   15686:	010b      	lsls	r3, r1, #4
   15688:	1ac0      	subs	r0, r0, r3
   1568a:	4152      	adcs	r2, r2
   1568c:	08c3      	lsrs	r3, r0, #3
   1568e:	428b      	cmp	r3, r1
   15690:	d301      	bcc.n	15696 <__divsi3+0xde>
   15692:	00cb      	lsls	r3, r1, #3
   15694:	1ac0      	subs	r0, r0, r3
   15696:	4152      	adcs	r2, r2
   15698:	0883      	lsrs	r3, r0, #2
   1569a:	428b      	cmp	r3, r1
   1569c:	d301      	bcc.n	156a2 <__divsi3+0xea>
   1569e:	008b      	lsls	r3, r1, #2
   156a0:	1ac0      	subs	r0, r0, r3
   156a2:	4152      	adcs	r2, r2
   156a4:	0843      	lsrs	r3, r0, #1
   156a6:	428b      	cmp	r3, r1
   156a8:	d301      	bcc.n	156ae <__divsi3+0xf6>
   156aa:	004b      	lsls	r3, r1, #1
   156ac:	1ac0      	subs	r0, r0, r3
   156ae:	4152      	adcs	r2, r2
   156b0:	1a41      	subs	r1, r0, r1
   156b2:	d200      	bcs.n	156b6 <__divsi3+0xfe>
   156b4:	4601      	mov	r1, r0
   156b6:	4152      	adcs	r2, r2
   156b8:	4610      	mov	r0, r2
   156ba:	4770      	bx	lr
   156bc:	e05d      	b.n	1577a <__divsi3+0x1c2>
   156be:	0fca      	lsrs	r2, r1, #31
   156c0:	d000      	beq.n	156c4 <__divsi3+0x10c>
   156c2:	4249      	negs	r1, r1
   156c4:	1003      	asrs	r3, r0, #32
   156c6:	d300      	bcc.n	156ca <__divsi3+0x112>
   156c8:	4240      	negs	r0, r0
   156ca:	4053      	eors	r3, r2
   156cc:	2200      	movs	r2, #0
   156ce:	469c      	mov	ip, r3
   156d0:	0903      	lsrs	r3, r0, #4
   156d2:	428b      	cmp	r3, r1
   156d4:	d32d      	bcc.n	15732 <__divsi3+0x17a>
   156d6:	0a03      	lsrs	r3, r0, #8
   156d8:	428b      	cmp	r3, r1
   156da:	d312      	bcc.n	15702 <__divsi3+0x14a>
   156dc:	22fc      	movs	r2, #252	; 0xfc
   156de:	0189      	lsls	r1, r1, #6
   156e0:	ba12      	rev	r2, r2
   156e2:	0a03      	lsrs	r3, r0, #8
   156e4:	428b      	cmp	r3, r1
   156e6:	d30c      	bcc.n	15702 <__divsi3+0x14a>
   156e8:	0189      	lsls	r1, r1, #6
   156ea:	1192      	asrs	r2, r2, #6
   156ec:	428b      	cmp	r3, r1
   156ee:	d308      	bcc.n	15702 <__divsi3+0x14a>
   156f0:	0189      	lsls	r1, r1, #6
   156f2:	1192      	asrs	r2, r2, #6
   156f4:	428b      	cmp	r3, r1
   156f6:	d304      	bcc.n	15702 <__divsi3+0x14a>
   156f8:	0189      	lsls	r1, r1, #6
   156fa:	d03a      	beq.n	15772 <__divsi3+0x1ba>
   156fc:	1192      	asrs	r2, r2, #6
   156fe:	e000      	b.n	15702 <__divsi3+0x14a>
   15700:	0989      	lsrs	r1, r1, #6
   15702:	09c3      	lsrs	r3, r0, #7
   15704:	428b      	cmp	r3, r1
   15706:	d301      	bcc.n	1570c <__divsi3+0x154>
   15708:	01cb      	lsls	r3, r1, #7
   1570a:	1ac0      	subs	r0, r0, r3
   1570c:	4152      	adcs	r2, r2
   1570e:	0983      	lsrs	r3, r0, #6
   15710:	428b      	cmp	r3, r1
   15712:	d301      	bcc.n	15718 <__divsi3+0x160>
   15714:	018b      	lsls	r3, r1, #6
   15716:	1ac0      	subs	r0, r0, r3
   15718:	4152      	adcs	r2, r2
   1571a:	0943      	lsrs	r3, r0, #5
   1571c:	428b      	cmp	r3, r1
   1571e:	d301      	bcc.n	15724 <__divsi3+0x16c>
   15720:	014b      	lsls	r3, r1, #5
   15722:	1ac0      	subs	r0, r0, r3
   15724:	4152      	adcs	r2, r2
   15726:	0903      	lsrs	r3, r0, #4
   15728:	428b      	cmp	r3, r1
   1572a:	d301      	bcc.n	15730 <__divsi3+0x178>
   1572c:	010b      	lsls	r3, r1, #4
   1572e:	1ac0      	subs	r0, r0, r3
   15730:	4152      	adcs	r2, r2
   15732:	08c3      	lsrs	r3, r0, #3
   15734:	428b      	cmp	r3, r1
   15736:	d301      	bcc.n	1573c <__divsi3+0x184>
   15738:	00cb      	lsls	r3, r1, #3
   1573a:	1ac0      	subs	r0, r0, r3
   1573c:	4152      	adcs	r2, r2
   1573e:	0883      	lsrs	r3, r0, #2
   15740:	428b      	cmp	r3, r1
   15742:	d301      	bcc.n	15748 <__divsi3+0x190>
   15744:	008b      	lsls	r3, r1, #2
   15746:	1ac0      	subs	r0, r0, r3
   15748:	4152      	adcs	r2, r2
   1574a:	d2d9      	bcs.n	15700 <__divsi3+0x148>
   1574c:	0843      	lsrs	r3, r0, #1
   1574e:	428b      	cmp	r3, r1
   15750:	d301      	bcc.n	15756 <__divsi3+0x19e>
   15752:	004b      	lsls	r3, r1, #1
   15754:	1ac0      	subs	r0, r0, r3
   15756:	4152      	adcs	r2, r2
   15758:	1a41      	subs	r1, r0, r1
   1575a:	d200      	bcs.n	1575e <__divsi3+0x1a6>
   1575c:	4601      	mov	r1, r0
   1575e:	4663      	mov	r3, ip
   15760:	4152      	adcs	r2, r2
   15762:	105b      	asrs	r3, r3, #1
   15764:	4610      	mov	r0, r2
   15766:	d301      	bcc.n	1576c <__divsi3+0x1b4>
   15768:	4240      	negs	r0, r0
   1576a:	2b00      	cmp	r3, #0
   1576c:	d500      	bpl.n	15770 <__divsi3+0x1b8>
   1576e:	4249      	negs	r1, r1
   15770:	4770      	bx	lr
   15772:	4663      	mov	r3, ip
   15774:	105b      	asrs	r3, r3, #1
   15776:	d300      	bcc.n	1577a <__divsi3+0x1c2>
   15778:	4240      	negs	r0, r0
   1577a:	b501      	push	{r0, lr}
   1577c:	2000      	movs	r0, #0
   1577e:	f000 f805 	bl	1578c <__aeabi_idiv0>
   15782:	bd02      	pop	{r1, pc}

00015784 <__aeabi_idivmod>:
   15784:	2900      	cmp	r1, #0
   15786:	d0f8      	beq.n	1577a <__divsi3+0x1c2>
   15788:	e716      	b.n	155b8 <__divsi3>
   1578a:	4770      	bx	lr

0001578c <__aeabi_idiv0>:
   1578c:	4770      	bx	lr
   1578e:	46c0      	nop			; (mov r8, r8)

00015790 <__aeabi_cdrcmple>:
   15790:	4684      	mov	ip, r0
   15792:	1c10      	adds	r0, r2, #0
   15794:	4662      	mov	r2, ip
   15796:	468c      	mov	ip, r1
   15798:	1c19      	adds	r1, r3, #0
   1579a:	4663      	mov	r3, ip
   1579c:	e000      	b.n	157a0 <__aeabi_cdcmpeq>
   1579e:	46c0      	nop			; (mov r8, r8)

000157a0 <__aeabi_cdcmpeq>:
   157a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   157a2:	f001 f9f7 	bl	16b94 <__ledf2>
   157a6:	2800      	cmp	r0, #0
   157a8:	d401      	bmi.n	157ae <__aeabi_cdcmpeq+0xe>
   157aa:	2100      	movs	r1, #0
   157ac:	42c8      	cmn	r0, r1
   157ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000157b0 <__aeabi_dcmpeq>:
   157b0:	b510      	push	{r4, lr}
   157b2:	f001 f951 	bl	16a58 <__eqdf2>
   157b6:	4240      	negs	r0, r0
   157b8:	3001      	adds	r0, #1
   157ba:	bd10      	pop	{r4, pc}

000157bc <__aeabi_dcmplt>:
   157bc:	b510      	push	{r4, lr}
   157be:	f001 f9e9 	bl	16b94 <__ledf2>
   157c2:	2800      	cmp	r0, #0
   157c4:	db01      	blt.n	157ca <__aeabi_dcmplt+0xe>
   157c6:	2000      	movs	r0, #0
   157c8:	bd10      	pop	{r4, pc}
   157ca:	2001      	movs	r0, #1
   157cc:	bd10      	pop	{r4, pc}
   157ce:	46c0      	nop			; (mov r8, r8)

000157d0 <__aeabi_dcmple>:
   157d0:	b510      	push	{r4, lr}
   157d2:	f001 f9df 	bl	16b94 <__ledf2>
   157d6:	2800      	cmp	r0, #0
   157d8:	dd01      	ble.n	157de <__aeabi_dcmple+0xe>
   157da:	2000      	movs	r0, #0
   157dc:	bd10      	pop	{r4, pc}
   157de:	2001      	movs	r0, #1
   157e0:	bd10      	pop	{r4, pc}
   157e2:	46c0      	nop			; (mov r8, r8)

000157e4 <__aeabi_dcmpgt>:
   157e4:	b510      	push	{r4, lr}
   157e6:	f001 f971 	bl	16acc <__gedf2>
   157ea:	2800      	cmp	r0, #0
   157ec:	dc01      	bgt.n	157f2 <__aeabi_dcmpgt+0xe>
   157ee:	2000      	movs	r0, #0
   157f0:	bd10      	pop	{r4, pc}
   157f2:	2001      	movs	r0, #1
   157f4:	bd10      	pop	{r4, pc}
   157f6:	46c0      	nop			; (mov r8, r8)

000157f8 <__aeabi_dcmpge>:
   157f8:	b510      	push	{r4, lr}
   157fa:	f001 f967 	bl	16acc <__gedf2>
   157fe:	2800      	cmp	r0, #0
   15800:	da01      	bge.n	15806 <__aeabi_dcmpge+0xe>
   15802:	2000      	movs	r0, #0
   15804:	bd10      	pop	{r4, pc}
   15806:	2001      	movs	r0, #1
   15808:	bd10      	pop	{r4, pc}
   1580a:	46c0      	nop			; (mov r8, r8)

0001580c <__aeabi_lmul>:
   1580c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1580e:	46ce      	mov	lr, r9
   15810:	4647      	mov	r7, r8
   15812:	0415      	lsls	r5, r2, #16
   15814:	0c2d      	lsrs	r5, r5, #16
   15816:	002e      	movs	r6, r5
   15818:	b580      	push	{r7, lr}
   1581a:	0407      	lsls	r7, r0, #16
   1581c:	0c14      	lsrs	r4, r2, #16
   1581e:	0c3f      	lsrs	r7, r7, #16
   15820:	4699      	mov	r9, r3
   15822:	0c03      	lsrs	r3, r0, #16
   15824:	437e      	muls	r6, r7
   15826:	435d      	muls	r5, r3
   15828:	4367      	muls	r7, r4
   1582a:	4363      	muls	r3, r4
   1582c:	197f      	adds	r7, r7, r5
   1582e:	0c34      	lsrs	r4, r6, #16
   15830:	19e4      	adds	r4, r4, r7
   15832:	469c      	mov	ip, r3
   15834:	42a5      	cmp	r5, r4
   15836:	d903      	bls.n	15840 <__aeabi_lmul+0x34>
   15838:	2380      	movs	r3, #128	; 0x80
   1583a:	025b      	lsls	r3, r3, #9
   1583c:	4698      	mov	r8, r3
   1583e:	44c4      	add	ip, r8
   15840:	464b      	mov	r3, r9
   15842:	4351      	muls	r1, r2
   15844:	4343      	muls	r3, r0
   15846:	0436      	lsls	r6, r6, #16
   15848:	0c36      	lsrs	r6, r6, #16
   1584a:	0c25      	lsrs	r5, r4, #16
   1584c:	0424      	lsls	r4, r4, #16
   1584e:	4465      	add	r5, ip
   15850:	19a4      	adds	r4, r4, r6
   15852:	1859      	adds	r1, r3, r1
   15854:	1949      	adds	r1, r1, r5
   15856:	0020      	movs	r0, r4
   15858:	bc0c      	pop	{r2, r3}
   1585a:	4690      	mov	r8, r2
   1585c:	4699      	mov	r9, r3
   1585e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015860 <__aeabi_fdiv>:
   15860:	b5f0      	push	{r4, r5, r6, r7, lr}
   15862:	4657      	mov	r7, sl
   15864:	464e      	mov	r6, r9
   15866:	46de      	mov	lr, fp
   15868:	4645      	mov	r5, r8
   1586a:	b5e0      	push	{r5, r6, r7, lr}
   1586c:	0244      	lsls	r4, r0, #9
   1586e:	0043      	lsls	r3, r0, #1
   15870:	0fc6      	lsrs	r6, r0, #31
   15872:	b083      	sub	sp, #12
   15874:	1c0f      	adds	r7, r1, #0
   15876:	0a64      	lsrs	r4, r4, #9
   15878:	0e1b      	lsrs	r3, r3, #24
   1587a:	46b2      	mov	sl, r6
   1587c:	d053      	beq.n	15926 <__aeabi_fdiv+0xc6>
   1587e:	2bff      	cmp	r3, #255	; 0xff
   15880:	d027      	beq.n	158d2 <__aeabi_fdiv+0x72>
   15882:	2280      	movs	r2, #128	; 0x80
   15884:	00e4      	lsls	r4, r4, #3
   15886:	04d2      	lsls	r2, r2, #19
   15888:	4314      	orrs	r4, r2
   1588a:	227f      	movs	r2, #127	; 0x7f
   1588c:	4252      	negs	r2, r2
   1588e:	4690      	mov	r8, r2
   15890:	4498      	add	r8, r3
   15892:	2300      	movs	r3, #0
   15894:	4699      	mov	r9, r3
   15896:	469b      	mov	fp, r3
   15898:	027d      	lsls	r5, r7, #9
   1589a:	0078      	lsls	r0, r7, #1
   1589c:	0ffb      	lsrs	r3, r7, #31
   1589e:	0a6d      	lsrs	r5, r5, #9
   158a0:	0e00      	lsrs	r0, r0, #24
   158a2:	9300      	str	r3, [sp, #0]
   158a4:	d024      	beq.n	158f0 <__aeabi_fdiv+0x90>
   158a6:	28ff      	cmp	r0, #255	; 0xff
   158a8:	d046      	beq.n	15938 <__aeabi_fdiv+0xd8>
   158aa:	2380      	movs	r3, #128	; 0x80
   158ac:	2100      	movs	r1, #0
   158ae:	00ed      	lsls	r5, r5, #3
   158b0:	04db      	lsls	r3, r3, #19
   158b2:	431d      	orrs	r5, r3
   158b4:	387f      	subs	r0, #127	; 0x7f
   158b6:	4647      	mov	r7, r8
   158b8:	1a38      	subs	r0, r7, r0
   158ba:	464f      	mov	r7, r9
   158bc:	430f      	orrs	r7, r1
   158be:	00bf      	lsls	r7, r7, #2
   158c0:	46b9      	mov	r9, r7
   158c2:	0033      	movs	r3, r6
   158c4:	9a00      	ldr	r2, [sp, #0]
   158c6:	4f87      	ldr	r7, [pc, #540]	; (15ae4 <__aeabi_fdiv+0x284>)
   158c8:	4053      	eors	r3, r2
   158ca:	464a      	mov	r2, r9
   158cc:	58ba      	ldr	r2, [r7, r2]
   158ce:	9301      	str	r3, [sp, #4]
   158d0:	4697      	mov	pc, r2
   158d2:	2c00      	cmp	r4, #0
   158d4:	d14e      	bne.n	15974 <__aeabi_fdiv+0x114>
   158d6:	2308      	movs	r3, #8
   158d8:	4699      	mov	r9, r3
   158da:	33f7      	adds	r3, #247	; 0xf7
   158dc:	4698      	mov	r8, r3
   158de:	3bfd      	subs	r3, #253	; 0xfd
   158e0:	469b      	mov	fp, r3
   158e2:	027d      	lsls	r5, r7, #9
   158e4:	0078      	lsls	r0, r7, #1
   158e6:	0ffb      	lsrs	r3, r7, #31
   158e8:	0a6d      	lsrs	r5, r5, #9
   158ea:	0e00      	lsrs	r0, r0, #24
   158ec:	9300      	str	r3, [sp, #0]
   158ee:	d1da      	bne.n	158a6 <__aeabi_fdiv+0x46>
   158f0:	2d00      	cmp	r5, #0
   158f2:	d126      	bne.n	15942 <__aeabi_fdiv+0xe2>
   158f4:	2000      	movs	r0, #0
   158f6:	2101      	movs	r1, #1
   158f8:	0033      	movs	r3, r6
   158fa:	9a00      	ldr	r2, [sp, #0]
   158fc:	4f7a      	ldr	r7, [pc, #488]	; (15ae8 <__aeabi_fdiv+0x288>)
   158fe:	4053      	eors	r3, r2
   15900:	4642      	mov	r2, r8
   15902:	1a10      	subs	r0, r2, r0
   15904:	464a      	mov	r2, r9
   15906:	430a      	orrs	r2, r1
   15908:	0092      	lsls	r2, r2, #2
   1590a:	58ba      	ldr	r2, [r7, r2]
   1590c:	001d      	movs	r5, r3
   1590e:	4697      	mov	pc, r2
   15910:	9b00      	ldr	r3, [sp, #0]
   15912:	002c      	movs	r4, r5
   15914:	469a      	mov	sl, r3
   15916:	468b      	mov	fp, r1
   15918:	465b      	mov	r3, fp
   1591a:	2b02      	cmp	r3, #2
   1591c:	d131      	bne.n	15982 <__aeabi_fdiv+0x122>
   1591e:	4653      	mov	r3, sl
   15920:	21ff      	movs	r1, #255	; 0xff
   15922:	2400      	movs	r4, #0
   15924:	e038      	b.n	15998 <__aeabi_fdiv+0x138>
   15926:	2c00      	cmp	r4, #0
   15928:	d117      	bne.n	1595a <__aeabi_fdiv+0xfa>
   1592a:	2304      	movs	r3, #4
   1592c:	4699      	mov	r9, r3
   1592e:	2300      	movs	r3, #0
   15930:	4698      	mov	r8, r3
   15932:	3301      	adds	r3, #1
   15934:	469b      	mov	fp, r3
   15936:	e7af      	b.n	15898 <__aeabi_fdiv+0x38>
   15938:	20ff      	movs	r0, #255	; 0xff
   1593a:	2d00      	cmp	r5, #0
   1593c:	d10b      	bne.n	15956 <__aeabi_fdiv+0xf6>
   1593e:	2102      	movs	r1, #2
   15940:	e7da      	b.n	158f8 <__aeabi_fdiv+0x98>
   15942:	0028      	movs	r0, r5
   15944:	f002 f83e 	bl	179c4 <__clzsi2>
   15948:	1f43      	subs	r3, r0, #5
   1594a:	409d      	lsls	r5, r3
   1594c:	2376      	movs	r3, #118	; 0x76
   1594e:	425b      	negs	r3, r3
   15950:	1a18      	subs	r0, r3, r0
   15952:	2100      	movs	r1, #0
   15954:	e7af      	b.n	158b6 <__aeabi_fdiv+0x56>
   15956:	2103      	movs	r1, #3
   15958:	e7ad      	b.n	158b6 <__aeabi_fdiv+0x56>
   1595a:	0020      	movs	r0, r4
   1595c:	f002 f832 	bl	179c4 <__clzsi2>
   15960:	1f43      	subs	r3, r0, #5
   15962:	409c      	lsls	r4, r3
   15964:	2376      	movs	r3, #118	; 0x76
   15966:	425b      	negs	r3, r3
   15968:	1a1b      	subs	r3, r3, r0
   1596a:	4698      	mov	r8, r3
   1596c:	2300      	movs	r3, #0
   1596e:	4699      	mov	r9, r3
   15970:	469b      	mov	fp, r3
   15972:	e791      	b.n	15898 <__aeabi_fdiv+0x38>
   15974:	230c      	movs	r3, #12
   15976:	4699      	mov	r9, r3
   15978:	33f3      	adds	r3, #243	; 0xf3
   1597a:	4698      	mov	r8, r3
   1597c:	3bfc      	subs	r3, #252	; 0xfc
   1597e:	469b      	mov	fp, r3
   15980:	e78a      	b.n	15898 <__aeabi_fdiv+0x38>
   15982:	2b03      	cmp	r3, #3
   15984:	d100      	bne.n	15988 <__aeabi_fdiv+0x128>
   15986:	e0a5      	b.n	15ad4 <__aeabi_fdiv+0x274>
   15988:	4655      	mov	r5, sl
   1598a:	2b01      	cmp	r3, #1
   1598c:	d000      	beq.n	15990 <__aeabi_fdiv+0x130>
   1598e:	e081      	b.n	15a94 <__aeabi_fdiv+0x234>
   15990:	2301      	movs	r3, #1
   15992:	2100      	movs	r1, #0
   15994:	2400      	movs	r4, #0
   15996:	402b      	ands	r3, r5
   15998:	0264      	lsls	r4, r4, #9
   1599a:	05c9      	lsls	r1, r1, #23
   1599c:	0a60      	lsrs	r0, r4, #9
   1599e:	07db      	lsls	r3, r3, #31
   159a0:	4308      	orrs	r0, r1
   159a2:	4318      	orrs	r0, r3
   159a4:	b003      	add	sp, #12
   159a6:	bc3c      	pop	{r2, r3, r4, r5}
   159a8:	4690      	mov	r8, r2
   159aa:	4699      	mov	r9, r3
   159ac:	46a2      	mov	sl, r4
   159ae:	46ab      	mov	fp, r5
   159b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159b2:	2480      	movs	r4, #128	; 0x80
   159b4:	2300      	movs	r3, #0
   159b6:	03e4      	lsls	r4, r4, #15
   159b8:	21ff      	movs	r1, #255	; 0xff
   159ba:	e7ed      	b.n	15998 <__aeabi_fdiv+0x138>
   159bc:	21ff      	movs	r1, #255	; 0xff
   159be:	2400      	movs	r4, #0
   159c0:	e7ea      	b.n	15998 <__aeabi_fdiv+0x138>
   159c2:	2301      	movs	r3, #1
   159c4:	1a59      	subs	r1, r3, r1
   159c6:	291b      	cmp	r1, #27
   159c8:	dd66      	ble.n	15a98 <__aeabi_fdiv+0x238>
   159ca:	9a01      	ldr	r2, [sp, #4]
   159cc:	4013      	ands	r3, r2
   159ce:	2100      	movs	r1, #0
   159d0:	2400      	movs	r4, #0
   159d2:	e7e1      	b.n	15998 <__aeabi_fdiv+0x138>
   159d4:	2380      	movs	r3, #128	; 0x80
   159d6:	03db      	lsls	r3, r3, #15
   159d8:	421c      	tst	r4, r3
   159da:	d038      	beq.n	15a4e <__aeabi_fdiv+0x1ee>
   159dc:	421d      	tst	r5, r3
   159de:	d051      	beq.n	15a84 <__aeabi_fdiv+0x224>
   159e0:	431c      	orrs	r4, r3
   159e2:	0264      	lsls	r4, r4, #9
   159e4:	0a64      	lsrs	r4, r4, #9
   159e6:	0033      	movs	r3, r6
   159e8:	21ff      	movs	r1, #255	; 0xff
   159ea:	e7d5      	b.n	15998 <__aeabi_fdiv+0x138>
   159ec:	0163      	lsls	r3, r4, #5
   159ee:	016c      	lsls	r4, r5, #5
   159f0:	42a3      	cmp	r3, r4
   159f2:	d23b      	bcs.n	15a6c <__aeabi_fdiv+0x20c>
   159f4:	261b      	movs	r6, #27
   159f6:	2100      	movs	r1, #0
   159f8:	3801      	subs	r0, #1
   159fa:	2501      	movs	r5, #1
   159fc:	001f      	movs	r7, r3
   159fe:	0049      	lsls	r1, r1, #1
   15a00:	005b      	lsls	r3, r3, #1
   15a02:	2f00      	cmp	r7, #0
   15a04:	db01      	blt.n	15a0a <__aeabi_fdiv+0x1aa>
   15a06:	429c      	cmp	r4, r3
   15a08:	d801      	bhi.n	15a0e <__aeabi_fdiv+0x1ae>
   15a0a:	1b1b      	subs	r3, r3, r4
   15a0c:	4329      	orrs	r1, r5
   15a0e:	3e01      	subs	r6, #1
   15a10:	2e00      	cmp	r6, #0
   15a12:	d1f3      	bne.n	159fc <__aeabi_fdiv+0x19c>
   15a14:	001c      	movs	r4, r3
   15a16:	1e63      	subs	r3, r4, #1
   15a18:	419c      	sbcs	r4, r3
   15a1a:	430c      	orrs	r4, r1
   15a1c:	0001      	movs	r1, r0
   15a1e:	317f      	adds	r1, #127	; 0x7f
   15a20:	2900      	cmp	r1, #0
   15a22:	ddce      	ble.n	159c2 <__aeabi_fdiv+0x162>
   15a24:	0763      	lsls	r3, r4, #29
   15a26:	d004      	beq.n	15a32 <__aeabi_fdiv+0x1d2>
   15a28:	230f      	movs	r3, #15
   15a2a:	4023      	ands	r3, r4
   15a2c:	2b04      	cmp	r3, #4
   15a2e:	d000      	beq.n	15a32 <__aeabi_fdiv+0x1d2>
   15a30:	3404      	adds	r4, #4
   15a32:	0123      	lsls	r3, r4, #4
   15a34:	d503      	bpl.n	15a3e <__aeabi_fdiv+0x1de>
   15a36:	0001      	movs	r1, r0
   15a38:	4b2c      	ldr	r3, [pc, #176]	; (15aec <__aeabi_fdiv+0x28c>)
   15a3a:	3180      	adds	r1, #128	; 0x80
   15a3c:	401c      	ands	r4, r3
   15a3e:	29fe      	cmp	r1, #254	; 0xfe
   15a40:	dd0d      	ble.n	15a5e <__aeabi_fdiv+0x1fe>
   15a42:	2301      	movs	r3, #1
   15a44:	9a01      	ldr	r2, [sp, #4]
   15a46:	21ff      	movs	r1, #255	; 0xff
   15a48:	4013      	ands	r3, r2
   15a4a:	2400      	movs	r4, #0
   15a4c:	e7a4      	b.n	15998 <__aeabi_fdiv+0x138>
   15a4e:	2380      	movs	r3, #128	; 0x80
   15a50:	03db      	lsls	r3, r3, #15
   15a52:	431c      	orrs	r4, r3
   15a54:	0264      	lsls	r4, r4, #9
   15a56:	0a64      	lsrs	r4, r4, #9
   15a58:	0033      	movs	r3, r6
   15a5a:	21ff      	movs	r1, #255	; 0xff
   15a5c:	e79c      	b.n	15998 <__aeabi_fdiv+0x138>
   15a5e:	2301      	movs	r3, #1
   15a60:	9a01      	ldr	r2, [sp, #4]
   15a62:	01a4      	lsls	r4, r4, #6
   15a64:	0a64      	lsrs	r4, r4, #9
   15a66:	b2c9      	uxtb	r1, r1
   15a68:	4013      	ands	r3, r2
   15a6a:	e795      	b.n	15998 <__aeabi_fdiv+0x138>
   15a6c:	1b1b      	subs	r3, r3, r4
   15a6e:	261a      	movs	r6, #26
   15a70:	2101      	movs	r1, #1
   15a72:	e7c2      	b.n	159fa <__aeabi_fdiv+0x19a>
   15a74:	9b00      	ldr	r3, [sp, #0]
   15a76:	468b      	mov	fp, r1
   15a78:	469a      	mov	sl, r3
   15a7a:	2400      	movs	r4, #0
   15a7c:	e74c      	b.n	15918 <__aeabi_fdiv+0xb8>
   15a7e:	0263      	lsls	r3, r4, #9
   15a80:	d5e5      	bpl.n	15a4e <__aeabi_fdiv+0x1ee>
   15a82:	2500      	movs	r5, #0
   15a84:	2480      	movs	r4, #128	; 0x80
   15a86:	03e4      	lsls	r4, r4, #15
   15a88:	432c      	orrs	r4, r5
   15a8a:	0264      	lsls	r4, r4, #9
   15a8c:	0a64      	lsrs	r4, r4, #9
   15a8e:	9b00      	ldr	r3, [sp, #0]
   15a90:	21ff      	movs	r1, #255	; 0xff
   15a92:	e781      	b.n	15998 <__aeabi_fdiv+0x138>
   15a94:	9501      	str	r5, [sp, #4]
   15a96:	e7c1      	b.n	15a1c <__aeabi_fdiv+0x1bc>
   15a98:	0023      	movs	r3, r4
   15a9a:	2020      	movs	r0, #32
   15a9c:	40cb      	lsrs	r3, r1
   15a9e:	1a41      	subs	r1, r0, r1
   15aa0:	408c      	lsls	r4, r1
   15aa2:	1e61      	subs	r1, r4, #1
   15aa4:	418c      	sbcs	r4, r1
   15aa6:	431c      	orrs	r4, r3
   15aa8:	0763      	lsls	r3, r4, #29
   15aaa:	d004      	beq.n	15ab6 <__aeabi_fdiv+0x256>
   15aac:	230f      	movs	r3, #15
   15aae:	4023      	ands	r3, r4
   15ab0:	2b04      	cmp	r3, #4
   15ab2:	d000      	beq.n	15ab6 <__aeabi_fdiv+0x256>
   15ab4:	3404      	adds	r4, #4
   15ab6:	0163      	lsls	r3, r4, #5
   15ab8:	d505      	bpl.n	15ac6 <__aeabi_fdiv+0x266>
   15aba:	2301      	movs	r3, #1
   15abc:	9a01      	ldr	r2, [sp, #4]
   15abe:	2101      	movs	r1, #1
   15ac0:	4013      	ands	r3, r2
   15ac2:	2400      	movs	r4, #0
   15ac4:	e768      	b.n	15998 <__aeabi_fdiv+0x138>
   15ac6:	2301      	movs	r3, #1
   15ac8:	9a01      	ldr	r2, [sp, #4]
   15aca:	01a4      	lsls	r4, r4, #6
   15acc:	0a64      	lsrs	r4, r4, #9
   15ace:	4013      	ands	r3, r2
   15ad0:	2100      	movs	r1, #0
   15ad2:	e761      	b.n	15998 <__aeabi_fdiv+0x138>
   15ad4:	2380      	movs	r3, #128	; 0x80
   15ad6:	03db      	lsls	r3, r3, #15
   15ad8:	431c      	orrs	r4, r3
   15ada:	0264      	lsls	r4, r4, #9
   15adc:	0a64      	lsrs	r4, r4, #9
   15ade:	4653      	mov	r3, sl
   15ae0:	21ff      	movs	r1, #255	; 0xff
   15ae2:	e759      	b.n	15998 <__aeabi_fdiv+0x138>
   15ae4:	0001a250 	.word	0x0001a250
   15ae8:	0001a290 	.word	0x0001a290
   15aec:	f7ffffff 	.word	0xf7ffffff

00015af0 <__aeabi_fmul>:
   15af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15af2:	4657      	mov	r7, sl
   15af4:	464e      	mov	r6, r9
   15af6:	4645      	mov	r5, r8
   15af8:	46de      	mov	lr, fp
   15afa:	b5e0      	push	{r5, r6, r7, lr}
   15afc:	0247      	lsls	r7, r0, #9
   15afe:	0046      	lsls	r6, r0, #1
   15b00:	4688      	mov	r8, r1
   15b02:	0a7f      	lsrs	r7, r7, #9
   15b04:	0e36      	lsrs	r6, r6, #24
   15b06:	0fc4      	lsrs	r4, r0, #31
   15b08:	2e00      	cmp	r6, #0
   15b0a:	d047      	beq.n	15b9c <__aeabi_fmul+0xac>
   15b0c:	2eff      	cmp	r6, #255	; 0xff
   15b0e:	d024      	beq.n	15b5a <__aeabi_fmul+0x6a>
   15b10:	00fb      	lsls	r3, r7, #3
   15b12:	2780      	movs	r7, #128	; 0x80
   15b14:	04ff      	lsls	r7, r7, #19
   15b16:	431f      	orrs	r7, r3
   15b18:	2300      	movs	r3, #0
   15b1a:	4699      	mov	r9, r3
   15b1c:	469a      	mov	sl, r3
   15b1e:	3e7f      	subs	r6, #127	; 0x7f
   15b20:	4643      	mov	r3, r8
   15b22:	025d      	lsls	r5, r3, #9
   15b24:	0058      	lsls	r0, r3, #1
   15b26:	0fdb      	lsrs	r3, r3, #31
   15b28:	0a6d      	lsrs	r5, r5, #9
   15b2a:	0e00      	lsrs	r0, r0, #24
   15b2c:	4698      	mov	r8, r3
   15b2e:	d043      	beq.n	15bb8 <__aeabi_fmul+0xc8>
   15b30:	28ff      	cmp	r0, #255	; 0xff
   15b32:	d03b      	beq.n	15bac <__aeabi_fmul+0xbc>
   15b34:	00eb      	lsls	r3, r5, #3
   15b36:	2580      	movs	r5, #128	; 0x80
   15b38:	2200      	movs	r2, #0
   15b3a:	04ed      	lsls	r5, r5, #19
   15b3c:	431d      	orrs	r5, r3
   15b3e:	387f      	subs	r0, #127	; 0x7f
   15b40:	1836      	adds	r6, r6, r0
   15b42:	1c73      	adds	r3, r6, #1
   15b44:	4641      	mov	r1, r8
   15b46:	469b      	mov	fp, r3
   15b48:	464b      	mov	r3, r9
   15b4a:	4061      	eors	r1, r4
   15b4c:	4313      	orrs	r3, r2
   15b4e:	2b0f      	cmp	r3, #15
   15b50:	d864      	bhi.n	15c1c <__aeabi_fmul+0x12c>
   15b52:	4875      	ldr	r0, [pc, #468]	; (15d28 <__aeabi_fmul+0x238>)
   15b54:	009b      	lsls	r3, r3, #2
   15b56:	58c3      	ldr	r3, [r0, r3]
   15b58:	469f      	mov	pc, r3
   15b5a:	2f00      	cmp	r7, #0
   15b5c:	d142      	bne.n	15be4 <__aeabi_fmul+0xf4>
   15b5e:	2308      	movs	r3, #8
   15b60:	4699      	mov	r9, r3
   15b62:	3b06      	subs	r3, #6
   15b64:	26ff      	movs	r6, #255	; 0xff
   15b66:	469a      	mov	sl, r3
   15b68:	e7da      	b.n	15b20 <__aeabi_fmul+0x30>
   15b6a:	4641      	mov	r1, r8
   15b6c:	2a02      	cmp	r2, #2
   15b6e:	d028      	beq.n	15bc2 <__aeabi_fmul+0xd2>
   15b70:	2a03      	cmp	r2, #3
   15b72:	d100      	bne.n	15b76 <__aeabi_fmul+0x86>
   15b74:	e0ce      	b.n	15d14 <__aeabi_fmul+0x224>
   15b76:	2a01      	cmp	r2, #1
   15b78:	d000      	beq.n	15b7c <__aeabi_fmul+0x8c>
   15b7a:	e0ac      	b.n	15cd6 <__aeabi_fmul+0x1e6>
   15b7c:	4011      	ands	r1, r2
   15b7e:	2000      	movs	r0, #0
   15b80:	2200      	movs	r2, #0
   15b82:	b2cc      	uxtb	r4, r1
   15b84:	0240      	lsls	r0, r0, #9
   15b86:	05d2      	lsls	r2, r2, #23
   15b88:	0a40      	lsrs	r0, r0, #9
   15b8a:	07e4      	lsls	r4, r4, #31
   15b8c:	4310      	orrs	r0, r2
   15b8e:	4320      	orrs	r0, r4
   15b90:	bc3c      	pop	{r2, r3, r4, r5}
   15b92:	4690      	mov	r8, r2
   15b94:	4699      	mov	r9, r3
   15b96:	46a2      	mov	sl, r4
   15b98:	46ab      	mov	fp, r5
   15b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b9c:	2f00      	cmp	r7, #0
   15b9e:	d115      	bne.n	15bcc <__aeabi_fmul+0xdc>
   15ba0:	2304      	movs	r3, #4
   15ba2:	4699      	mov	r9, r3
   15ba4:	3b03      	subs	r3, #3
   15ba6:	2600      	movs	r6, #0
   15ba8:	469a      	mov	sl, r3
   15baa:	e7b9      	b.n	15b20 <__aeabi_fmul+0x30>
   15bac:	20ff      	movs	r0, #255	; 0xff
   15bae:	2202      	movs	r2, #2
   15bb0:	2d00      	cmp	r5, #0
   15bb2:	d0c5      	beq.n	15b40 <__aeabi_fmul+0x50>
   15bb4:	2203      	movs	r2, #3
   15bb6:	e7c3      	b.n	15b40 <__aeabi_fmul+0x50>
   15bb8:	2d00      	cmp	r5, #0
   15bba:	d119      	bne.n	15bf0 <__aeabi_fmul+0x100>
   15bbc:	2000      	movs	r0, #0
   15bbe:	2201      	movs	r2, #1
   15bc0:	e7be      	b.n	15b40 <__aeabi_fmul+0x50>
   15bc2:	2401      	movs	r4, #1
   15bc4:	22ff      	movs	r2, #255	; 0xff
   15bc6:	400c      	ands	r4, r1
   15bc8:	2000      	movs	r0, #0
   15bca:	e7db      	b.n	15b84 <__aeabi_fmul+0x94>
   15bcc:	0038      	movs	r0, r7
   15bce:	f001 fef9 	bl	179c4 <__clzsi2>
   15bd2:	2676      	movs	r6, #118	; 0x76
   15bd4:	1f43      	subs	r3, r0, #5
   15bd6:	409f      	lsls	r7, r3
   15bd8:	2300      	movs	r3, #0
   15bda:	4276      	negs	r6, r6
   15bdc:	1a36      	subs	r6, r6, r0
   15bde:	4699      	mov	r9, r3
   15be0:	469a      	mov	sl, r3
   15be2:	e79d      	b.n	15b20 <__aeabi_fmul+0x30>
   15be4:	230c      	movs	r3, #12
   15be6:	4699      	mov	r9, r3
   15be8:	3b09      	subs	r3, #9
   15bea:	26ff      	movs	r6, #255	; 0xff
   15bec:	469a      	mov	sl, r3
   15bee:	e797      	b.n	15b20 <__aeabi_fmul+0x30>
   15bf0:	0028      	movs	r0, r5
   15bf2:	f001 fee7 	bl	179c4 <__clzsi2>
   15bf6:	1f43      	subs	r3, r0, #5
   15bf8:	409d      	lsls	r5, r3
   15bfa:	2376      	movs	r3, #118	; 0x76
   15bfc:	425b      	negs	r3, r3
   15bfe:	1a18      	subs	r0, r3, r0
   15c00:	2200      	movs	r2, #0
   15c02:	e79d      	b.n	15b40 <__aeabi_fmul+0x50>
   15c04:	2080      	movs	r0, #128	; 0x80
   15c06:	2400      	movs	r4, #0
   15c08:	03c0      	lsls	r0, r0, #15
   15c0a:	22ff      	movs	r2, #255	; 0xff
   15c0c:	e7ba      	b.n	15b84 <__aeabi_fmul+0x94>
   15c0e:	003d      	movs	r5, r7
   15c10:	4652      	mov	r2, sl
   15c12:	e7ab      	b.n	15b6c <__aeabi_fmul+0x7c>
   15c14:	003d      	movs	r5, r7
   15c16:	0021      	movs	r1, r4
   15c18:	4652      	mov	r2, sl
   15c1a:	e7a7      	b.n	15b6c <__aeabi_fmul+0x7c>
   15c1c:	0c3b      	lsrs	r3, r7, #16
   15c1e:	469c      	mov	ip, r3
   15c20:	042a      	lsls	r2, r5, #16
   15c22:	0c12      	lsrs	r2, r2, #16
   15c24:	0c2b      	lsrs	r3, r5, #16
   15c26:	0014      	movs	r4, r2
   15c28:	4660      	mov	r0, ip
   15c2a:	4665      	mov	r5, ip
   15c2c:	043f      	lsls	r7, r7, #16
   15c2e:	0c3f      	lsrs	r7, r7, #16
   15c30:	437c      	muls	r4, r7
   15c32:	4342      	muls	r2, r0
   15c34:	435d      	muls	r5, r3
   15c36:	437b      	muls	r3, r7
   15c38:	0c27      	lsrs	r7, r4, #16
   15c3a:	189b      	adds	r3, r3, r2
   15c3c:	18ff      	adds	r7, r7, r3
   15c3e:	42ba      	cmp	r2, r7
   15c40:	d903      	bls.n	15c4a <__aeabi_fmul+0x15a>
   15c42:	2380      	movs	r3, #128	; 0x80
   15c44:	025b      	lsls	r3, r3, #9
   15c46:	469c      	mov	ip, r3
   15c48:	4465      	add	r5, ip
   15c4a:	0424      	lsls	r4, r4, #16
   15c4c:	043a      	lsls	r2, r7, #16
   15c4e:	0c24      	lsrs	r4, r4, #16
   15c50:	1912      	adds	r2, r2, r4
   15c52:	0193      	lsls	r3, r2, #6
   15c54:	1e5c      	subs	r4, r3, #1
   15c56:	41a3      	sbcs	r3, r4
   15c58:	0c3f      	lsrs	r7, r7, #16
   15c5a:	0e92      	lsrs	r2, r2, #26
   15c5c:	197d      	adds	r5, r7, r5
   15c5e:	431a      	orrs	r2, r3
   15c60:	01ad      	lsls	r5, r5, #6
   15c62:	4315      	orrs	r5, r2
   15c64:	012b      	lsls	r3, r5, #4
   15c66:	d504      	bpl.n	15c72 <__aeabi_fmul+0x182>
   15c68:	2301      	movs	r3, #1
   15c6a:	465e      	mov	r6, fp
   15c6c:	086a      	lsrs	r2, r5, #1
   15c6e:	401d      	ands	r5, r3
   15c70:	4315      	orrs	r5, r2
   15c72:	0032      	movs	r2, r6
   15c74:	327f      	adds	r2, #127	; 0x7f
   15c76:	2a00      	cmp	r2, #0
   15c78:	dd25      	ble.n	15cc6 <__aeabi_fmul+0x1d6>
   15c7a:	076b      	lsls	r3, r5, #29
   15c7c:	d004      	beq.n	15c88 <__aeabi_fmul+0x198>
   15c7e:	230f      	movs	r3, #15
   15c80:	402b      	ands	r3, r5
   15c82:	2b04      	cmp	r3, #4
   15c84:	d000      	beq.n	15c88 <__aeabi_fmul+0x198>
   15c86:	3504      	adds	r5, #4
   15c88:	012b      	lsls	r3, r5, #4
   15c8a:	d503      	bpl.n	15c94 <__aeabi_fmul+0x1a4>
   15c8c:	0032      	movs	r2, r6
   15c8e:	4b27      	ldr	r3, [pc, #156]	; (15d2c <__aeabi_fmul+0x23c>)
   15c90:	3280      	adds	r2, #128	; 0x80
   15c92:	401d      	ands	r5, r3
   15c94:	2afe      	cmp	r2, #254	; 0xfe
   15c96:	dc94      	bgt.n	15bc2 <__aeabi_fmul+0xd2>
   15c98:	2401      	movs	r4, #1
   15c9a:	01a8      	lsls	r0, r5, #6
   15c9c:	0a40      	lsrs	r0, r0, #9
   15c9e:	b2d2      	uxtb	r2, r2
   15ca0:	400c      	ands	r4, r1
   15ca2:	e76f      	b.n	15b84 <__aeabi_fmul+0x94>
   15ca4:	2080      	movs	r0, #128	; 0x80
   15ca6:	03c0      	lsls	r0, r0, #15
   15ca8:	4207      	tst	r7, r0
   15caa:	d007      	beq.n	15cbc <__aeabi_fmul+0x1cc>
   15cac:	4205      	tst	r5, r0
   15cae:	d105      	bne.n	15cbc <__aeabi_fmul+0x1cc>
   15cb0:	4328      	orrs	r0, r5
   15cb2:	0240      	lsls	r0, r0, #9
   15cb4:	0a40      	lsrs	r0, r0, #9
   15cb6:	4644      	mov	r4, r8
   15cb8:	22ff      	movs	r2, #255	; 0xff
   15cba:	e763      	b.n	15b84 <__aeabi_fmul+0x94>
   15cbc:	4338      	orrs	r0, r7
   15cbe:	0240      	lsls	r0, r0, #9
   15cc0:	0a40      	lsrs	r0, r0, #9
   15cc2:	22ff      	movs	r2, #255	; 0xff
   15cc4:	e75e      	b.n	15b84 <__aeabi_fmul+0x94>
   15cc6:	2401      	movs	r4, #1
   15cc8:	1aa3      	subs	r3, r4, r2
   15cca:	2b1b      	cmp	r3, #27
   15ccc:	dd05      	ble.n	15cda <__aeabi_fmul+0x1ea>
   15cce:	400c      	ands	r4, r1
   15cd0:	2200      	movs	r2, #0
   15cd2:	2000      	movs	r0, #0
   15cd4:	e756      	b.n	15b84 <__aeabi_fmul+0x94>
   15cd6:	465e      	mov	r6, fp
   15cd8:	e7cb      	b.n	15c72 <__aeabi_fmul+0x182>
   15cda:	002a      	movs	r2, r5
   15cdc:	2020      	movs	r0, #32
   15cde:	40da      	lsrs	r2, r3
   15ce0:	1ac3      	subs	r3, r0, r3
   15ce2:	409d      	lsls	r5, r3
   15ce4:	002b      	movs	r3, r5
   15ce6:	1e5d      	subs	r5, r3, #1
   15ce8:	41ab      	sbcs	r3, r5
   15cea:	4313      	orrs	r3, r2
   15cec:	075a      	lsls	r2, r3, #29
   15cee:	d004      	beq.n	15cfa <__aeabi_fmul+0x20a>
   15cf0:	220f      	movs	r2, #15
   15cf2:	401a      	ands	r2, r3
   15cf4:	2a04      	cmp	r2, #4
   15cf6:	d000      	beq.n	15cfa <__aeabi_fmul+0x20a>
   15cf8:	3304      	adds	r3, #4
   15cfa:	015a      	lsls	r2, r3, #5
   15cfc:	d504      	bpl.n	15d08 <__aeabi_fmul+0x218>
   15cfe:	2401      	movs	r4, #1
   15d00:	2201      	movs	r2, #1
   15d02:	400c      	ands	r4, r1
   15d04:	2000      	movs	r0, #0
   15d06:	e73d      	b.n	15b84 <__aeabi_fmul+0x94>
   15d08:	2401      	movs	r4, #1
   15d0a:	019b      	lsls	r3, r3, #6
   15d0c:	0a58      	lsrs	r0, r3, #9
   15d0e:	400c      	ands	r4, r1
   15d10:	2200      	movs	r2, #0
   15d12:	e737      	b.n	15b84 <__aeabi_fmul+0x94>
   15d14:	2080      	movs	r0, #128	; 0x80
   15d16:	2401      	movs	r4, #1
   15d18:	03c0      	lsls	r0, r0, #15
   15d1a:	4328      	orrs	r0, r5
   15d1c:	0240      	lsls	r0, r0, #9
   15d1e:	0a40      	lsrs	r0, r0, #9
   15d20:	400c      	ands	r4, r1
   15d22:	22ff      	movs	r2, #255	; 0xff
   15d24:	e72e      	b.n	15b84 <__aeabi_fmul+0x94>
   15d26:	46c0      	nop			; (mov r8, r8)
   15d28:	0001a2d0 	.word	0x0001a2d0
   15d2c:	f7ffffff 	.word	0xf7ffffff

00015d30 <__aeabi_i2f>:
   15d30:	b570      	push	{r4, r5, r6, lr}
   15d32:	2800      	cmp	r0, #0
   15d34:	d030      	beq.n	15d98 <__aeabi_i2f+0x68>
   15d36:	17c3      	asrs	r3, r0, #31
   15d38:	18c4      	adds	r4, r0, r3
   15d3a:	405c      	eors	r4, r3
   15d3c:	0fc5      	lsrs	r5, r0, #31
   15d3e:	0020      	movs	r0, r4
   15d40:	f001 fe40 	bl	179c4 <__clzsi2>
   15d44:	239e      	movs	r3, #158	; 0x9e
   15d46:	1a1b      	subs	r3, r3, r0
   15d48:	2b96      	cmp	r3, #150	; 0x96
   15d4a:	dc0d      	bgt.n	15d68 <__aeabi_i2f+0x38>
   15d4c:	2296      	movs	r2, #150	; 0x96
   15d4e:	1ad2      	subs	r2, r2, r3
   15d50:	4094      	lsls	r4, r2
   15d52:	002a      	movs	r2, r5
   15d54:	0264      	lsls	r4, r4, #9
   15d56:	0a64      	lsrs	r4, r4, #9
   15d58:	b2db      	uxtb	r3, r3
   15d5a:	0264      	lsls	r4, r4, #9
   15d5c:	05db      	lsls	r3, r3, #23
   15d5e:	0a60      	lsrs	r0, r4, #9
   15d60:	07d2      	lsls	r2, r2, #31
   15d62:	4318      	orrs	r0, r3
   15d64:	4310      	orrs	r0, r2
   15d66:	bd70      	pop	{r4, r5, r6, pc}
   15d68:	2b99      	cmp	r3, #153	; 0x99
   15d6a:	dc19      	bgt.n	15da0 <__aeabi_i2f+0x70>
   15d6c:	2299      	movs	r2, #153	; 0x99
   15d6e:	1ad2      	subs	r2, r2, r3
   15d70:	2a00      	cmp	r2, #0
   15d72:	dd29      	ble.n	15dc8 <__aeabi_i2f+0x98>
   15d74:	4094      	lsls	r4, r2
   15d76:	0022      	movs	r2, r4
   15d78:	4c14      	ldr	r4, [pc, #80]	; (15dcc <__aeabi_i2f+0x9c>)
   15d7a:	4014      	ands	r4, r2
   15d7c:	0751      	lsls	r1, r2, #29
   15d7e:	d004      	beq.n	15d8a <__aeabi_i2f+0x5a>
   15d80:	210f      	movs	r1, #15
   15d82:	400a      	ands	r2, r1
   15d84:	2a04      	cmp	r2, #4
   15d86:	d000      	beq.n	15d8a <__aeabi_i2f+0x5a>
   15d88:	3404      	adds	r4, #4
   15d8a:	0162      	lsls	r2, r4, #5
   15d8c:	d413      	bmi.n	15db6 <__aeabi_i2f+0x86>
   15d8e:	01a4      	lsls	r4, r4, #6
   15d90:	0a64      	lsrs	r4, r4, #9
   15d92:	b2db      	uxtb	r3, r3
   15d94:	002a      	movs	r2, r5
   15d96:	e7e0      	b.n	15d5a <__aeabi_i2f+0x2a>
   15d98:	2200      	movs	r2, #0
   15d9a:	2300      	movs	r3, #0
   15d9c:	2400      	movs	r4, #0
   15d9e:	e7dc      	b.n	15d5a <__aeabi_i2f+0x2a>
   15da0:	2205      	movs	r2, #5
   15da2:	0021      	movs	r1, r4
   15da4:	1a12      	subs	r2, r2, r0
   15da6:	40d1      	lsrs	r1, r2
   15da8:	22b9      	movs	r2, #185	; 0xb9
   15daa:	1ad2      	subs	r2, r2, r3
   15dac:	4094      	lsls	r4, r2
   15dae:	1e62      	subs	r2, r4, #1
   15db0:	4194      	sbcs	r4, r2
   15db2:	430c      	orrs	r4, r1
   15db4:	e7da      	b.n	15d6c <__aeabi_i2f+0x3c>
   15db6:	4b05      	ldr	r3, [pc, #20]	; (15dcc <__aeabi_i2f+0x9c>)
   15db8:	002a      	movs	r2, r5
   15dba:	401c      	ands	r4, r3
   15dbc:	239f      	movs	r3, #159	; 0x9f
   15dbe:	01a4      	lsls	r4, r4, #6
   15dc0:	1a1b      	subs	r3, r3, r0
   15dc2:	0a64      	lsrs	r4, r4, #9
   15dc4:	b2db      	uxtb	r3, r3
   15dc6:	e7c8      	b.n	15d5a <__aeabi_i2f+0x2a>
   15dc8:	0022      	movs	r2, r4
   15dca:	e7d5      	b.n	15d78 <__aeabi_i2f+0x48>
   15dcc:	fbffffff 	.word	0xfbffffff

00015dd0 <__aeabi_dadd>:
   15dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15dd2:	4645      	mov	r5, r8
   15dd4:	46de      	mov	lr, fp
   15dd6:	4657      	mov	r7, sl
   15dd8:	464e      	mov	r6, r9
   15dda:	030c      	lsls	r4, r1, #12
   15ddc:	b5e0      	push	{r5, r6, r7, lr}
   15dde:	004e      	lsls	r6, r1, #1
   15de0:	0fc9      	lsrs	r1, r1, #31
   15de2:	4688      	mov	r8, r1
   15de4:	000d      	movs	r5, r1
   15de6:	0a61      	lsrs	r1, r4, #9
   15de8:	0f44      	lsrs	r4, r0, #29
   15dea:	430c      	orrs	r4, r1
   15dec:	00c7      	lsls	r7, r0, #3
   15dee:	0319      	lsls	r1, r3, #12
   15df0:	0058      	lsls	r0, r3, #1
   15df2:	0fdb      	lsrs	r3, r3, #31
   15df4:	469b      	mov	fp, r3
   15df6:	0a4b      	lsrs	r3, r1, #9
   15df8:	0f51      	lsrs	r1, r2, #29
   15dfa:	430b      	orrs	r3, r1
   15dfc:	0d76      	lsrs	r6, r6, #21
   15dfe:	0d40      	lsrs	r0, r0, #21
   15e00:	0019      	movs	r1, r3
   15e02:	00d2      	lsls	r2, r2, #3
   15e04:	45d8      	cmp	r8, fp
   15e06:	d100      	bne.n	15e0a <__aeabi_dadd+0x3a>
   15e08:	e0ae      	b.n	15f68 <__aeabi_dadd+0x198>
   15e0a:	1a35      	subs	r5, r6, r0
   15e0c:	2d00      	cmp	r5, #0
   15e0e:	dc00      	bgt.n	15e12 <__aeabi_dadd+0x42>
   15e10:	e0f6      	b.n	16000 <__aeabi_dadd+0x230>
   15e12:	2800      	cmp	r0, #0
   15e14:	d10f      	bne.n	15e36 <__aeabi_dadd+0x66>
   15e16:	4313      	orrs	r3, r2
   15e18:	d100      	bne.n	15e1c <__aeabi_dadd+0x4c>
   15e1a:	e0db      	b.n	15fd4 <__aeabi_dadd+0x204>
   15e1c:	1e6b      	subs	r3, r5, #1
   15e1e:	2b00      	cmp	r3, #0
   15e20:	d000      	beq.n	15e24 <__aeabi_dadd+0x54>
   15e22:	e137      	b.n	16094 <__aeabi_dadd+0x2c4>
   15e24:	1aba      	subs	r2, r7, r2
   15e26:	4297      	cmp	r7, r2
   15e28:	41bf      	sbcs	r7, r7
   15e2a:	1a64      	subs	r4, r4, r1
   15e2c:	427f      	negs	r7, r7
   15e2e:	1be4      	subs	r4, r4, r7
   15e30:	2601      	movs	r6, #1
   15e32:	0017      	movs	r7, r2
   15e34:	e024      	b.n	15e80 <__aeabi_dadd+0xb0>
   15e36:	4bc6      	ldr	r3, [pc, #792]	; (16150 <__aeabi_dadd+0x380>)
   15e38:	429e      	cmp	r6, r3
   15e3a:	d04d      	beq.n	15ed8 <__aeabi_dadd+0x108>
   15e3c:	2380      	movs	r3, #128	; 0x80
   15e3e:	041b      	lsls	r3, r3, #16
   15e40:	4319      	orrs	r1, r3
   15e42:	2d38      	cmp	r5, #56	; 0x38
   15e44:	dd00      	ble.n	15e48 <__aeabi_dadd+0x78>
   15e46:	e107      	b.n	16058 <__aeabi_dadd+0x288>
   15e48:	2d1f      	cmp	r5, #31
   15e4a:	dd00      	ble.n	15e4e <__aeabi_dadd+0x7e>
   15e4c:	e138      	b.n	160c0 <__aeabi_dadd+0x2f0>
   15e4e:	2020      	movs	r0, #32
   15e50:	1b43      	subs	r3, r0, r5
   15e52:	469a      	mov	sl, r3
   15e54:	000b      	movs	r3, r1
   15e56:	4650      	mov	r0, sl
   15e58:	4083      	lsls	r3, r0
   15e5a:	4699      	mov	r9, r3
   15e5c:	0013      	movs	r3, r2
   15e5e:	4648      	mov	r0, r9
   15e60:	40eb      	lsrs	r3, r5
   15e62:	4318      	orrs	r0, r3
   15e64:	0003      	movs	r3, r0
   15e66:	4650      	mov	r0, sl
   15e68:	4082      	lsls	r2, r0
   15e6a:	1e50      	subs	r0, r2, #1
   15e6c:	4182      	sbcs	r2, r0
   15e6e:	40e9      	lsrs	r1, r5
   15e70:	431a      	orrs	r2, r3
   15e72:	1aba      	subs	r2, r7, r2
   15e74:	1a61      	subs	r1, r4, r1
   15e76:	4297      	cmp	r7, r2
   15e78:	41a4      	sbcs	r4, r4
   15e7a:	0017      	movs	r7, r2
   15e7c:	4264      	negs	r4, r4
   15e7e:	1b0c      	subs	r4, r1, r4
   15e80:	0223      	lsls	r3, r4, #8
   15e82:	d562      	bpl.n	15f4a <__aeabi_dadd+0x17a>
   15e84:	0264      	lsls	r4, r4, #9
   15e86:	0a65      	lsrs	r5, r4, #9
   15e88:	2d00      	cmp	r5, #0
   15e8a:	d100      	bne.n	15e8e <__aeabi_dadd+0xbe>
   15e8c:	e0df      	b.n	1604e <__aeabi_dadd+0x27e>
   15e8e:	0028      	movs	r0, r5
   15e90:	f001 fd98 	bl	179c4 <__clzsi2>
   15e94:	0003      	movs	r3, r0
   15e96:	3b08      	subs	r3, #8
   15e98:	2b1f      	cmp	r3, #31
   15e9a:	dd00      	ble.n	15e9e <__aeabi_dadd+0xce>
   15e9c:	e0d2      	b.n	16044 <__aeabi_dadd+0x274>
   15e9e:	2220      	movs	r2, #32
   15ea0:	003c      	movs	r4, r7
   15ea2:	1ad2      	subs	r2, r2, r3
   15ea4:	409d      	lsls	r5, r3
   15ea6:	40d4      	lsrs	r4, r2
   15ea8:	409f      	lsls	r7, r3
   15eaa:	4325      	orrs	r5, r4
   15eac:	429e      	cmp	r6, r3
   15eae:	dd00      	ble.n	15eb2 <__aeabi_dadd+0xe2>
   15eb0:	e0c4      	b.n	1603c <__aeabi_dadd+0x26c>
   15eb2:	1b9e      	subs	r6, r3, r6
   15eb4:	1c73      	adds	r3, r6, #1
   15eb6:	2b1f      	cmp	r3, #31
   15eb8:	dd00      	ble.n	15ebc <__aeabi_dadd+0xec>
   15eba:	e0f1      	b.n	160a0 <__aeabi_dadd+0x2d0>
   15ebc:	2220      	movs	r2, #32
   15ebe:	0038      	movs	r0, r7
   15ec0:	0029      	movs	r1, r5
   15ec2:	1ad2      	subs	r2, r2, r3
   15ec4:	40d8      	lsrs	r0, r3
   15ec6:	4091      	lsls	r1, r2
   15ec8:	4097      	lsls	r7, r2
   15eca:	002c      	movs	r4, r5
   15ecc:	4301      	orrs	r1, r0
   15ece:	1e78      	subs	r0, r7, #1
   15ed0:	4187      	sbcs	r7, r0
   15ed2:	40dc      	lsrs	r4, r3
   15ed4:	2600      	movs	r6, #0
   15ed6:	430f      	orrs	r7, r1
   15ed8:	077b      	lsls	r3, r7, #29
   15eda:	d009      	beq.n	15ef0 <__aeabi_dadd+0x120>
   15edc:	230f      	movs	r3, #15
   15ede:	403b      	ands	r3, r7
   15ee0:	2b04      	cmp	r3, #4
   15ee2:	d005      	beq.n	15ef0 <__aeabi_dadd+0x120>
   15ee4:	1d3b      	adds	r3, r7, #4
   15ee6:	42bb      	cmp	r3, r7
   15ee8:	41bf      	sbcs	r7, r7
   15eea:	427f      	negs	r7, r7
   15eec:	19e4      	adds	r4, r4, r7
   15eee:	001f      	movs	r7, r3
   15ef0:	0223      	lsls	r3, r4, #8
   15ef2:	d52c      	bpl.n	15f4e <__aeabi_dadd+0x17e>
   15ef4:	4b96      	ldr	r3, [pc, #600]	; (16150 <__aeabi_dadd+0x380>)
   15ef6:	3601      	adds	r6, #1
   15ef8:	429e      	cmp	r6, r3
   15efa:	d100      	bne.n	15efe <__aeabi_dadd+0x12e>
   15efc:	e09a      	b.n	16034 <__aeabi_dadd+0x264>
   15efe:	4645      	mov	r5, r8
   15f00:	4b94      	ldr	r3, [pc, #592]	; (16154 <__aeabi_dadd+0x384>)
   15f02:	08ff      	lsrs	r7, r7, #3
   15f04:	401c      	ands	r4, r3
   15f06:	0760      	lsls	r0, r4, #29
   15f08:	0576      	lsls	r6, r6, #21
   15f0a:	0264      	lsls	r4, r4, #9
   15f0c:	4307      	orrs	r7, r0
   15f0e:	0b24      	lsrs	r4, r4, #12
   15f10:	0d76      	lsrs	r6, r6, #21
   15f12:	2100      	movs	r1, #0
   15f14:	0324      	lsls	r4, r4, #12
   15f16:	0b23      	lsrs	r3, r4, #12
   15f18:	0d0c      	lsrs	r4, r1, #20
   15f1a:	4a8f      	ldr	r2, [pc, #572]	; (16158 <__aeabi_dadd+0x388>)
   15f1c:	0524      	lsls	r4, r4, #20
   15f1e:	431c      	orrs	r4, r3
   15f20:	4014      	ands	r4, r2
   15f22:	0533      	lsls	r3, r6, #20
   15f24:	4323      	orrs	r3, r4
   15f26:	005b      	lsls	r3, r3, #1
   15f28:	07ed      	lsls	r5, r5, #31
   15f2a:	085b      	lsrs	r3, r3, #1
   15f2c:	432b      	orrs	r3, r5
   15f2e:	0038      	movs	r0, r7
   15f30:	0019      	movs	r1, r3
   15f32:	bc3c      	pop	{r2, r3, r4, r5}
   15f34:	4690      	mov	r8, r2
   15f36:	4699      	mov	r9, r3
   15f38:	46a2      	mov	sl, r4
   15f3a:	46ab      	mov	fp, r5
   15f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f3e:	4664      	mov	r4, ip
   15f40:	4304      	orrs	r4, r0
   15f42:	d100      	bne.n	15f46 <__aeabi_dadd+0x176>
   15f44:	e211      	b.n	1636a <__aeabi_dadd+0x59a>
   15f46:	0004      	movs	r4, r0
   15f48:	4667      	mov	r7, ip
   15f4a:	077b      	lsls	r3, r7, #29
   15f4c:	d1c6      	bne.n	15edc <__aeabi_dadd+0x10c>
   15f4e:	4645      	mov	r5, r8
   15f50:	0760      	lsls	r0, r4, #29
   15f52:	08ff      	lsrs	r7, r7, #3
   15f54:	4307      	orrs	r7, r0
   15f56:	08e4      	lsrs	r4, r4, #3
   15f58:	4b7d      	ldr	r3, [pc, #500]	; (16150 <__aeabi_dadd+0x380>)
   15f5a:	429e      	cmp	r6, r3
   15f5c:	d030      	beq.n	15fc0 <__aeabi_dadd+0x1f0>
   15f5e:	0324      	lsls	r4, r4, #12
   15f60:	0576      	lsls	r6, r6, #21
   15f62:	0b24      	lsrs	r4, r4, #12
   15f64:	0d76      	lsrs	r6, r6, #21
   15f66:	e7d4      	b.n	15f12 <__aeabi_dadd+0x142>
   15f68:	1a33      	subs	r3, r6, r0
   15f6a:	469a      	mov	sl, r3
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	dd78      	ble.n	16062 <__aeabi_dadd+0x292>
   15f70:	2800      	cmp	r0, #0
   15f72:	d031      	beq.n	15fd8 <__aeabi_dadd+0x208>
   15f74:	4876      	ldr	r0, [pc, #472]	; (16150 <__aeabi_dadd+0x380>)
   15f76:	4286      	cmp	r6, r0
   15f78:	d0ae      	beq.n	15ed8 <__aeabi_dadd+0x108>
   15f7a:	2080      	movs	r0, #128	; 0x80
   15f7c:	0400      	lsls	r0, r0, #16
   15f7e:	4301      	orrs	r1, r0
   15f80:	4653      	mov	r3, sl
   15f82:	2b38      	cmp	r3, #56	; 0x38
   15f84:	dc00      	bgt.n	15f88 <__aeabi_dadd+0x1b8>
   15f86:	e0e9      	b.n	1615c <__aeabi_dadd+0x38c>
   15f88:	430a      	orrs	r2, r1
   15f8a:	1e51      	subs	r1, r2, #1
   15f8c:	418a      	sbcs	r2, r1
   15f8e:	2100      	movs	r1, #0
   15f90:	19d2      	adds	r2, r2, r7
   15f92:	42ba      	cmp	r2, r7
   15f94:	41bf      	sbcs	r7, r7
   15f96:	1909      	adds	r1, r1, r4
   15f98:	427c      	negs	r4, r7
   15f9a:	0017      	movs	r7, r2
   15f9c:	190c      	adds	r4, r1, r4
   15f9e:	0223      	lsls	r3, r4, #8
   15fa0:	d5d3      	bpl.n	15f4a <__aeabi_dadd+0x17a>
   15fa2:	4b6b      	ldr	r3, [pc, #428]	; (16150 <__aeabi_dadd+0x380>)
   15fa4:	3601      	adds	r6, #1
   15fa6:	429e      	cmp	r6, r3
   15fa8:	d100      	bne.n	15fac <__aeabi_dadd+0x1dc>
   15faa:	e13a      	b.n	16222 <__aeabi_dadd+0x452>
   15fac:	2001      	movs	r0, #1
   15fae:	4b69      	ldr	r3, [pc, #420]	; (16154 <__aeabi_dadd+0x384>)
   15fb0:	401c      	ands	r4, r3
   15fb2:	087b      	lsrs	r3, r7, #1
   15fb4:	4007      	ands	r7, r0
   15fb6:	431f      	orrs	r7, r3
   15fb8:	07e0      	lsls	r0, r4, #31
   15fba:	4307      	orrs	r7, r0
   15fbc:	0864      	lsrs	r4, r4, #1
   15fbe:	e78b      	b.n	15ed8 <__aeabi_dadd+0x108>
   15fc0:	0023      	movs	r3, r4
   15fc2:	433b      	orrs	r3, r7
   15fc4:	d100      	bne.n	15fc8 <__aeabi_dadd+0x1f8>
   15fc6:	e1cb      	b.n	16360 <__aeabi_dadd+0x590>
   15fc8:	2280      	movs	r2, #128	; 0x80
   15fca:	0312      	lsls	r2, r2, #12
   15fcc:	4314      	orrs	r4, r2
   15fce:	0324      	lsls	r4, r4, #12
   15fd0:	0b24      	lsrs	r4, r4, #12
   15fd2:	e79e      	b.n	15f12 <__aeabi_dadd+0x142>
   15fd4:	002e      	movs	r6, r5
   15fd6:	e77f      	b.n	15ed8 <__aeabi_dadd+0x108>
   15fd8:	0008      	movs	r0, r1
   15fda:	4310      	orrs	r0, r2
   15fdc:	d100      	bne.n	15fe0 <__aeabi_dadd+0x210>
   15fde:	e0b4      	b.n	1614a <__aeabi_dadd+0x37a>
   15fe0:	1e58      	subs	r0, r3, #1
   15fe2:	2800      	cmp	r0, #0
   15fe4:	d000      	beq.n	15fe8 <__aeabi_dadd+0x218>
   15fe6:	e0de      	b.n	161a6 <__aeabi_dadd+0x3d6>
   15fe8:	18ba      	adds	r2, r7, r2
   15fea:	42ba      	cmp	r2, r7
   15fec:	419b      	sbcs	r3, r3
   15fee:	1864      	adds	r4, r4, r1
   15ff0:	425b      	negs	r3, r3
   15ff2:	18e4      	adds	r4, r4, r3
   15ff4:	0017      	movs	r7, r2
   15ff6:	2601      	movs	r6, #1
   15ff8:	0223      	lsls	r3, r4, #8
   15ffa:	d5a6      	bpl.n	15f4a <__aeabi_dadd+0x17a>
   15ffc:	2602      	movs	r6, #2
   15ffe:	e7d5      	b.n	15fac <__aeabi_dadd+0x1dc>
   16000:	2d00      	cmp	r5, #0
   16002:	d16e      	bne.n	160e2 <__aeabi_dadd+0x312>
   16004:	1c70      	adds	r0, r6, #1
   16006:	0540      	lsls	r0, r0, #21
   16008:	0d40      	lsrs	r0, r0, #21
   1600a:	2801      	cmp	r0, #1
   1600c:	dc00      	bgt.n	16010 <__aeabi_dadd+0x240>
   1600e:	e0f9      	b.n	16204 <__aeabi_dadd+0x434>
   16010:	1ab8      	subs	r0, r7, r2
   16012:	4684      	mov	ip, r0
   16014:	4287      	cmp	r7, r0
   16016:	4180      	sbcs	r0, r0
   16018:	1ae5      	subs	r5, r4, r3
   1601a:	4240      	negs	r0, r0
   1601c:	1a2d      	subs	r5, r5, r0
   1601e:	0228      	lsls	r0, r5, #8
   16020:	d400      	bmi.n	16024 <__aeabi_dadd+0x254>
   16022:	e089      	b.n	16138 <__aeabi_dadd+0x368>
   16024:	1bd7      	subs	r7, r2, r7
   16026:	42ba      	cmp	r2, r7
   16028:	4192      	sbcs	r2, r2
   1602a:	1b1c      	subs	r4, r3, r4
   1602c:	4252      	negs	r2, r2
   1602e:	1aa5      	subs	r5, r4, r2
   16030:	46d8      	mov	r8, fp
   16032:	e729      	b.n	15e88 <__aeabi_dadd+0xb8>
   16034:	4645      	mov	r5, r8
   16036:	2400      	movs	r4, #0
   16038:	2700      	movs	r7, #0
   1603a:	e76a      	b.n	15f12 <__aeabi_dadd+0x142>
   1603c:	4c45      	ldr	r4, [pc, #276]	; (16154 <__aeabi_dadd+0x384>)
   1603e:	1af6      	subs	r6, r6, r3
   16040:	402c      	ands	r4, r5
   16042:	e749      	b.n	15ed8 <__aeabi_dadd+0x108>
   16044:	003d      	movs	r5, r7
   16046:	3828      	subs	r0, #40	; 0x28
   16048:	4085      	lsls	r5, r0
   1604a:	2700      	movs	r7, #0
   1604c:	e72e      	b.n	15eac <__aeabi_dadd+0xdc>
   1604e:	0038      	movs	r0, r7
   16050:	f001 fcb8 	bl	179c4 <__clzsi2>
   16054:	3020      	adds	r0, #32
   16056:	e71d      	b.n	15e94 <__aeabi_dadd+0xc4>
   16058:	430a      	orrs	r2, r1
   1605a:	1e51      	subs	r1, r2, #1
   1605c:	418a      	sbcs	r2, r1
   1605e:	2100      	movs	r1, #0
   16060:	e707      	b.n	15e72 <__aeabi_dadd+0xa2>
   16062:	2b00      	cmp	r3, #0
   16064:	d000      	beq.n	16068 <__aeabi_dadd+0x298>
   16066:	e0f3      	b.n	16250 <__aeabi_dadd+0x480>
   16068:	1c70      	adds	r0, r6, #1
   1606a:	0543      	lsls	r3, r0, #21
   1606c:	0d5b      	lsrs	r3, r3, #21
   1606e:	2b01      	cmp	r3, #1
   16070:	dc00      	bgt.n	16074 <__aeabi_dadd+0x2a4>
   16072:	e0ad      	b.n	161d0 <__aeabi_dadd+0x400>
   16074:	4b36      	ldr	r3, [pc, #216]	; (16150 <__aeabi_dadd+0x380>)
   16076:	4298      	cmp	r0, r3
   16078:	d100      	bne.n	1607c <__aeabi_dadd+0x2ac>
   1607a:	e0d1      	b.n	16220 <__aeabi_dadd+0x450>
   1607c:	18ba      	adds	r2, r7, r2
   1607e:	42ba      	cmp	r2, r7
   16080:	41bf      	sbcs	r7, r7
   16082:	1864      	adds	r4, r4, r1
   16084:	427f      	negs	r7, r7
   16086:	19e4      	adds	r4, r4, r7
   16088:	07e7      	lsls	r7, r4, #31
   1608a:	0852      	lsrs	r2, r2, #1
   1608c:	4317      	orrs	r7, r2
   1608e:	0864      	lsrs	r4, r4, #1
   16090:	0006      	movs	r6, r0
   16092:	e721      	b.n	15ed8 <__aeabi_dadd+0x108>
   16094:	482e      	ldr	r0, [pc, #184]	; (16150 <__aeabi_dadd+0x380>)
   16096:	4285      	cmp	r5, r0
   16098:	d100      	bne.n	1609c <__aeabi_dadd+0x2cc>
   1609a:	e093      	b.n	161c4 <__aeabi_dadd+0x3f4>
   1609c:	001d      	movs	r5, r3
   1609e:	e6d0      	b.n	15e42 <__aeabi_dadd+0x72>
   160a0:	0029      	movs	r1, r5
   160a2:	3e1f      	subs	r6, #31
   160a4:	40f1      	lsrs	r1, r6
   160a6:	2b20      	cmp	r3, #32
   160a8:	d100      	bne.n	160ac <__aeabi_dadd+0x2dc>
   160aa:	e08d      	b.n	161c8 <__aeabi_dadd+0x3f8>
   160ac:	2240      	movs	r2, #64	; 0x40
   160ae:	1ad3      	subs	r3, r2, r3
   160b0:	409d      	lsls	r5, r3
   160b2:	432f      	orrs	r7, r5
   160b4:	1e7d      	subs	r5, r7, #1
   160b6:	41af      	sbcs	r7, r5
   160b8:	2400      	movs	r4, #0
   160ba:	430f      	orrs	r7, r1
   160bc:	2600      	movs	r6, #0
   160be:	e744      	b.n	15f4a <__aeabi_dadd+0x17a>
   160c0:	002b      	movs	r3, r5
   160c2:	0008      	movs	r0, r1
   160c4:	3b20      	subs	r3, #32
   160c6:	40d8      	lsrs	r0, r3
   160c8:	0003      	movs	r3, r0
   160ca:	2d20      	cmp	r5, #32
   160cc:	d100      	bne.n	160d0 <__aeabi_dadd+0x300>
   160ce:	e07d      	b.n	161cc <__aeabi_dadd+0x3fc>
   160d0:	2040      	movs	r0, #64	; 0x40
   160d2:	1b45      	subs	r5, r0, r5
   160d4:	40a9      	lsls	r1, r5
   160d6:	430a      	orrs	r2, r1
   160d8:	1e51      	subs	r1, r2, #1
   160da:	418a      	sbcs	r2, r1
   160dc:	2100      	movs	r1, #0
   160de:	431a      	orrs	r2, r3
   160e0:	e6c7      	b.n	15e72 <__aeabi_dadd+0xa2>
   160e2:	2e00      	cmp	r6, #0
   160e4:	d050      	beq.n	16188 <__aeabi_dadd+0x3b8>
   160e6:	4e1a      	ldr	r6, [pc, #104]	; (16150 <__aeabi_dadd+0x380>)
   160e8:	42b0      	cmp	r0, r6
   160ea:	d057      	beq.n	1619c <__aeabi_dadd+0x3cc>
   160ec:	2680      	movs	r6, #128	; 0x80
   160ee:	426b      	negs	r3, r5
   160f0:	4699      	mov	r9, r3
   160f2:	0436      	lsls	r6, r6, #16
   160f4:	4334      	orrs	r4, r6
   160f6:	464b      	mov	r3, r9
   160f8:	2b38      	cmp	r3, #56	; 0x38
   160fa:	dd00      	ble.n	160fe <__aeabi_dadd+0x32e>
   160fc:	e0d6      	b.n	162ac <__aeabi_dadd+0x4dc>
   160fe:	2b1f      	cmp	r3, #31
   16100:	dd00      	ble.n	16104 <__aeabi_dadd+0x334>
   16102:	e135      	b.n	16370 <__aeabi_dadd+0x5a0>
   16104:	2620      	movs	r6, #32
   16106:	1af5      	subs	r5, r6, r3
   16108:	0026      	movs	r6, r4
   1610a:	40ae      	lsls	r6, r5
   1610c:	46b2      	mov	sl, r6
   1610e:	003e      	movs	r6, r7
   16110:	40de      	lsrs	r6, r3
   16112:	46ac      	mov	ip, r5
   16114:	0035      	movs	r5, r6
   16116:	4656      	mov	r6, sl
   16118:	432e      	orrs	r6, r5
   1611a:	4665      	mov	r5, ip
   1611c:	40af      	lsls	r7, r5
   1611e:	1e7d      	subs	r5, r7, #1
   16120:	41af      	sbcs	r7, r5
   16122:	40dc      	lsrs	r4, r3
   16124:	4337      	orrs	r7, r6
   16126:	1bd7      	subs	r7, r2, r7
   16128:	42ba      	cmp	r2, r7
   1612a:	4192      	sbcs	r2, r2
   1612c:	1b0c      	subs	r4, r1, r4
   1612e:	4252      	negs	r2, r2
   16130:	1aa4      	subs	r4, r4, r2
   16132:	0006      	movs	r6, r0
   16134:	46d8      	mov	r8, fp
   16136:	e6a3      	b.n	15e80 <__aeabi_dadd+0xb0>
   16138:	4664      	mov	r4, ip
   1613a:	4667      	mov	r7, ip
   1613c:	432c      	orrs	r4, r5
   1613e:	d000      	beq.n	16142 <__aeabi_dadd+0x372>
   16140:	e6a2      	b.n	15e88 <__aeabi_dadd+0xb8>
   16142:	2500      	movs	r5, #0
   16144:	2600      	movs	r6, #0
   16146:	2700      	movs	r7, #0
   16148:	e706      	b.n	15f58 <__aeabi_dadd+0x188>
   1614a:	001e      	movs	r6, r3
   1614c:	e6c4      	b.n	15ed8 <__aeabi_dadd+0x108>
   1614e:	46c0      	nop			; (mov r8, r8)
   16150:	000007ff 	.word	0x000007ff
   16154:	ff7fffff 	.word	0xff7fffff
   16158:	800fffff 	.word	0x800fffff
   1615c:	2b1f      	cmp	r3, #31
   1615e:	dc63      	bgt.n	16228 <__aeabi_dadd+0x458>
   16160:	2020      	movs	r0, #32
   16162:	1ac3      	subs	r3, r0, r3
   16164:	0008      	movs	r0, r1
   16166:	4098      	lsls	r0, r3
   16168:	469c      	mov	ip, r3
   1616a:	4683      	mov	fp, r0
   1616c:	4653      	mov	r3, sl
   1616e:	0010      	movs	r0, r2
   16170:	40d8      	lsrs	r0, r3
   16172:	0003      	movs	r3, r0
   16174:	4658      	mov	r0, fp
   16176:	4318      	orrs	r0, r3
   16178:	4663      	mov	r3, ip
   1617a:	409a      	lsls	r2, r3
   1617c:	1e53      	subs	r3, r2, #1
   1617e:	419a      	sbcs	r2, r3
   16180:	4653      	mov	r3, sl
   16182:	4302      	orrs	r2, r0
   16184:	40d9      	lsrs	r1, r3
   16186:	e703      	b.n	15f90 <__aeabi_dadd+0x1c0>
   16188:	0026      	movs	r6, r4
   1618a:	433e      	orrs	r6, r7
   1618c:	d006      	beq.n	1619c <__aeabi_dadd+0x3cc>
   1618e:	43eb      	mvns	r3, r5
   16190:	4699      	mov	r9, r3
   16192:	2b00      	cmp	r3, #0
   16194:	d0c7      	beq.n	16126 <__aeabi_dadd+0x356>
   16196:	4e94      	ldr	r6, [pc, #592]	; (163e8 <__aeabi_dadd+0x618>)
   16198:	42b0      	cmp	r0, r6
   1619a:	d1ac      	bne.n	160f6 <__aeabi_dadd+0x326>
   1619c:	000c      	movs	r4, r1
   1619e:	0017      	movs	r7, r2
   161a0:	0006      	movs	r6, r0
   161a2:	46d8      	mov	r8, fp
   161a4:	e698      	b.n	15ed8 <__aeabi_dadd+0x108>
   161a6:	4b90      	ldr	r3, [pc, #576]	; (163e8 <__aeabi_dadd+0x618>)
   161a8:	459a      	cmp	sl, r3
   161aa:	d00b      	beq.n	161c4 <__aeabi_dadd+0x3f4>
   161ac:	4682      	mov	sl, r0
   161ae:	e6e7      	b.n	15f80 <__aeabi_dadd+0x1b0>
   161b0:	2800      	cmp	r0, #0
   161b2:	d000      	beq.n	161b6 <__aeabi_dadd+0x3e6>
   161b4:	e09e      	b.n	162f4 <__aeabi_dadd+0x524>
   161b6:	0018      	movs	r0, r3
   161b8:	4310      	orrs	r0, r2
   161ba:	d100      	bne.n	161be <__aeabi_dadd+0x3ee>
   161bc:	e0e9      	b.n	16392 <__aeabi_dadd+0x5c2>
   161be:	001c      	movs	r4, r3
   161c0:	0017      	movs	r7, r2
   161c2:	46d8      	mov	r8, fp
   161c4:	4e88      	ldr	r6, [pc, #544]	; (163e8 <__aeabi_dadd+0x618>)
   161c6:	e687      	b.n	15ed8 <__aeabi_dadd+0x108>
   161c8:	2500      	movs	r5, #0
   161ca:	e772      	b.n	160b2 <__aeabi_dadd+0x2e2>
   161cc:	2100      	movs	r1, #0
   161ce:	e782      	b.n	160d6 <__aeabi_dadd+0x306>
   161d0:	0023      	movs	r3, r4
   161d2:	433b      	orrs	r3, r7
   161d4:	2e00      	cmp	r6, #0
   161d6:	d000      	beq.n	161da <__aeabi_dadd+0x40a>
   161d8:	e0ab      	b.n	16332 <__aeabi_dadd+0x562>
   161da:	2b00      	cmp	r3, #0
   161dc:	d100      	bne.n	161e0 <__aeabi_dadd+0x410>
   161de:	e0e7      	b.n	163b0 <__aeabi_dadd+0x5e0>
   161e0:	000b      	movs	r3, r1
   161e2:	4313      	orrs	r3, r2
   161e4:	d100      	bne.n	161e8 <__aeabi_dadd+0x418>
   161e6:	e677      	b.n	15ed8 <__aeabi_dadd+0x108>
   161e8:	18ba      	adds	r2, r7, r2
   161ea:	42ba      	cmp	r2, r7
   161ec:	41bf      	sbcs	r7, r7
   161ee:	1864      	adds	r4, r4, r1
   161f0:	427f      	negs	r7, r7
   161f2:	19e4      	adds	r4, r4, r7
   161f4:	0223      	lsls	r3, r4, #8
   161f6:	d400      	bmi.n	161fa <__aeabi_dadd+0x42a>
   161f8:	e0f2      	b.n	163e0 <__aeabi_dadd+0x610>
   161fa:	4b7c      	ldr	r3, [pc, #496]	; (163ec <__aeabi_dadd+0x61c>)
   161fc:	0017      	movs	r7, r2
   161fe:	401c      	ands	r4, r3
   16200:	0006      	movs	r6, r0
   16202:	e669      	b.n	15ed8 <__aeabi_dadd+0x108>
   16204:	0020      	movs	r0, r4
   16206:	4338      	orrs	r0, r7
   16208:	2e00      	cmp	r6, #0
   1620a:	d1d1      	bne.n	161b0 <__aeabi_dadd+0x3e0>
   1620c:	2800      	cmp	r0, #0
   1620e:	d15b      	bne.n	162c8 <__aeabi_dadd+0x4f8>
   16210:	001c      	movs	r4, r3
   16212:	4314      	orrs	r4, r2
   16214:	d100      	bne.n	16218 <__aeabi_dadd+0x448>
   16216:	e0a8      	b.n	1636a <__aeabi_dadd+0x59a>
   16218:	001c      	movs	r4, r3
   1621a:	0017      	movs	r7, r2
   1621c:	46d8      	mov	r8, fp
   1621e:	e65b      	b.n	15ed8 <__aeabi_dadd+0x108>
   16220:	0006      	movs	r6, r0
   16222:	2400      	movs	r4, #0
   16224:	2700      	movs	r7, #0
   16226:	e697      	b.n	15f58 <__aeabi_dadd+0x188>
   16228:	4650      	mov	r0, sl
   1622a:	000b      	movs	r3, r1
   1622c:	3820      	subs	r0, #32
   1622e:	40c3      	lsrs	r3, r0
   16230:	4699      	mov	r9, r3
   16232:	4653      	mov	r3, sl
   16234:	2b20      	cmp	r3, #32
   16236:	d100      	bne.n	1623a <__aeabi_dadd+0x46a>
   16238:	e095      	b.n	16366 <__aeabi_dadd+0x596>
   1623a:	2340      	movs	r3, #64	; 0x40
   1623c:	4650      	mov	r0, sl
   1623e:	1a1b      	subs	r3, r3, r0
   16240:	4099      	lsls	r1, r3
   16242:	430a      	orrs	r2, r1
   16244:	1e51      	subs	r1, r2, #1
   16246:	418a      	sbcs	r2, r1
   16248:	464b      	mov	r3, r9
   1624a:	2100      	movs	r1, #0
   1624c:	431a      	orrs	r2, r3
   1624e:	e69f      	b.n	15f90 <__aeabi_dadd+0x1c0>
   16250:	2e00      	cmp	r6, #0
   16252:	d130      	bne.n	162b6 <__aeabi_dadd+0x4e6>
   16254:	0026      	movs	r6, r4
   16256:	433e      	orrs	r6, r7
   16258:	d067      	beq.n	1632a <__aeabi_dadd+0x55a>
   1625a:	43db      	mvns	r3, r3
   1625c:	469a      	mov	sl, r3
   1625e:	2b00      	cmp	r3, #0
   16260:	d01c      	beq.n	1629c <__aeabi_dadd+0x4cc>
   16262:	4e61      	ldr	r6, [pc, #388]	; (163e8 <__aeabi_dadd+0x618>)
   16264:	42b0      	cmp	r0, r6
   16266:	d060      	beq.n	1632a <__aeabi_dadd+0x55a>
   16268:	4653      	mov	r3, sl
   1626a:	2b38      	cmp	r3, #56	; 0x38
   1626c:	dd00      	ble.n	16270 <__aeabi_dadd+0x4a0>
   1626e:	e096      	b.n	1639e <__aeabi_dadd+0x5ce>
   16270:	2b1f      	cmp	r3, #31
   16272:	dd00      	ble.n	16276 <__aeabi_dadd+0x4a6>
   16274:	e09f      	b.n	163b6 <__aeabi_dadd+0x5e6>
   16276:	2620      	movs	r6, #32
   16278:	1af3      	subs	r3, r6, r3
   1627a:	0026      	movs	r6, r4
   1627c:	409e      	lsls	r6, r3
   1627e:	469c      	mov	ip, r3
   16280:	46b3      	mov	fp, r6
   16282:	4653      	mov	r3, sl
   16284:	003e      	movs	r6, r7
   16286:	40de      	lsrs	r6, r3
   16288:	0033      	movs	r3, r6
   1628a:	465e      	mov	r6, fp
   1628c:	431e      	orrs	r6, r3
   1628e:	4663      	mov	r3, ip
   16290:	409f      	lsls	r7, r3
   16292:	1e7b      	subs	r3, r7, #1
   16294:	419f      	sbcs	r7, r3
   16296:	4653      	mov	r3, sl
   16298:	40dc      	lsrs	r4, r3
   1629a:	4337      	orrs	r7, r6
   1629c:	18bf      	adds	r7, r7, r2
   1629e:	4297      	cmp	r7, r2
   162a0:	4192      	sbcs	r2, r2
   162a2:	1864      	adds	r4, r4, r1
   162a4:	4252      	negs	r2, r2
   162a6:	18a4      	adds	r4, r4, r2
   162a8:	0006      	movs	r6, r0
   162aa:	e678      	b.n	15f9e <__aeabi_dadd+0x1ce>
   162ac:	4327      	orrs	r7, r4
   162ae:	1e7c      	subs	r4, r7, #1
   162b0:	41a7      	sbcs	r7, r4
   162b2:	2400      	movs	r4, #0
   162b4:	e737      	b.n	16126 <__aeabi_dadd+0x356>
   162b6:	4e4c      	ldr	r6, [pc, #304]	; (163e8 <__aeabi_dadd+0x618>)
   162b8:	42b0      	cmp	r0, r6
   162ba:	d036      	beq.n	1632a <__aeabi_dadd+0x55a>
   162bc:	2680      	movs	r6, #128	; 0x80
   162be:	425b      	negs	r3, r3
   162c0:	0436      	lsls	r6, r6, #16
   162c2:	469a      	mov	sl, r3
   162c4:	4334      	orrs	r4, r6
   162c6:	e7cf      	b.n	16268 <__aeabi_dadd+0x498>
   162c8:	0018      	movs	r0, r3
   162ca:	4310      	orrs	r0, r2
   162cc:	d100      	bne.n	162d0 <__aeabi_dadd+0x500>
   162ce:	e603      	b.n	15ed8 <__aeabi_dadd+0x108>
   162d0:	1ab8      	subs	r0, r7, r2
   162d2:	4684      	mov	ip, r0
   162d4:	4567      	cmp	r7, ip
   162d6:	41ad      	sbcs	r5, r5
   162d8:	1ae0      	subs	r0, r4, r3
   162da:	426d      	negs	r5, r5
   162dc:	1b40      	subs	r0, r0, r5
   162de:	0205      	lsls	r5, r0, #8
   162e0:	d400      	bmi.n	162e4 <__aeabi_dadd+0x514>
   162e2:	e62c      	b.n	15f3e <__aeabi_dadd+0x16e>
   162e4:	1bd7      	subs	r7, r2, r7
   162e6:	42ba      	cmp	r2, r7
   162e8:	4192      	sbcs	r2, r2
   162ea:	1b1c      	subs	r4, r3, r4
   162ec:	4252      	negs	r2, r2
   162ee:	1aa4      	subs	r4, r4, r2
   162f0:	46d8      	mov	r8, fp
   162f2:	e5f1      	b.n	15ed8 <__aeabi_dadd+0x108>
   162f4:	0018      	movs	r0, r3
   162f6:	4310      	orrs	r0, r2
   162f8:	d100      	bne.n	162fc <__aeabi_dadd+0x52c>
   162fa:	e763      	b.n	161c4 <__aeabi_dadd+0x3f4>
   162fc:	08f8      	lsrs	r0, r7, #3
   162fe:	0767      	lsls	r7, r4, #29
   16300:	4307      	orrs	r7, r0
   16302:	2080      	movs	r0, #128	; 0x80
   16304:	08e4      	lsrs	r4, r4, #3
   16306:	0300      	lsls	r0, r0, #12
   16308:	4204      	tst	r4, r0
   1630a:	d008      	beq.n	1631e <__aeabi_dadd+0x54e>
   1630c:	08dd      	lsrs	r5, r3, #3
   1630e:	4205      	tst	r5, r0
   16310:	d105      	bne.n	1631e <__aeabi_dadd+0x54e>
   16312:	08d2      	lsrs	r2, r2, #3
   16314:	0759      	lsls	r1, r3, #29
   16316:	4311      	orrs	r1, r2
   16318:	000f      	movs	r7, r1
   1631a:	002c      	movs	r4, r5
   1631c:	46d8      	mov	r8, fp
   1631e:	0f7b      	lsrs	r3, r7, #29
   16320:	00e4      	lsls	r4, r4, #3
   16322:	431c      	orrs	r4, r3
   16324:	00ff      	lsls	r7, r7, #3
   16326:	4e30      	ldr	r6, [pc, #192]	; (163e8 <__aeabi_dadd+0x618>)
   16328:	e5d6      	b.n	15ed8 <__aeabi_dadd+0x108>
   1632a:	000c      	movs	r4, r1
   1632c:	0017      	movs	r7, r2
   1632e:	0006      	movs	r6, r0
   16330:	e5d2      	b.n	15ed8 <__aeabi_dadd+0x108>
   16332:	2b00      	cmp	r3, #0
   16334:	d038      	beq.n	163a8 <__aeabi_dadd+0x5d8>
   16336:	000b      	movs	r3, r1
   16338:	4313      	orrs	r3, r2
   1633a:	d100      	bne.n	1633e <__aeabi_dadd+0x56e>
   1633c:	e742      	b.n	161c4 <__aeabi_dadd+0x3f4>
   1633e:	08f8      	lsrs	r0, r7, #3
   16340:	0767      	lsls	r7, r4, #29
   16342:	4307      	orrs	r7, r0
   16344:	2080      	movs	r0, #128	; 0x80
   16346:	08e4      	lsrs	r4, r4, #3
   16348:	0300      	lsls	r0, r0, #12
   1634a:	4204      	tst	r4, r0
   1634c:	d0e7      	beq.n	1631e <__aeabi_dadd+0x54e>
   1634e:	08cb      	lsrs	r3, r1, #3
   16350:	4203      	tst	r3, r0
   16352:	d1e4      	bne.n	1631e <__aeabi_dadd+0x54e>
   16354:	08d2      	lsrs	r2, r2, #3
   16356:	0749      	lsls	r1, r1, #29
   16358:	4311      	orrs	r1, r2
   1635a:	000f      	movs	r7, r1
   1635c:	001c      	movs	r4, r3
   1635e:	e7de      	b.n	1631e <__aeabi_dadd+0x54e>
   16360:	2700      	movs	r7, #0
   16362:	2400      	movs	r4, #0
   16364:	e5d5      	b.n	15f12 <__aeabi_dadd+0x142>
   16366:	2100      	movs	r1, #0
   16368:	e76b      	b.n	16242 <__aeabi_dadd+0x472>
   1636a:	2500      	movs	r5, #0
   1636c:	2700      	movs	r7, #0
   1636e:	e5f3      	b.n	15f58 <__aeabi_dadd+0x188>
   16370:	464e      	mov	r6, r9
   16372:	0025      	movs	r5, r4
   16374:	3e20      	subs	r6, #32
   16376:	40f5      	lsrs	r5, r6
   16378:	464b      	mov	r3, r9
   1637a:	002e      	movs	r6, r5
   1637c:	2b20      	cmp	r3, #32
   1637e:	d02d      	beq.n	163dc <__aeabi_dadd+0x60c>
   16380:	2540      	movs	r5, #64	; 0x40
   16382:	1aed      	subs	r5, r5, r3
   16384:	40ac      	lsls	r4, r5
   16386:	4327      	orrs	r7, r4
   16388:	1e7c      	subs	r4, r7, #1
   1638a:	41a7      	sbcs	r7, r4
   1638c:	2400      	movs	r4, #0
   1638e:	4337      	orrs	r7, r6
   16390:	e6c9      	b.n	16126 <__aeabi_dadd+0x356>
   16392:	2480      	movs	r4, #128	; 0x80
   16394:	2500      	movs	r5, #0
   16396:	0324      	lsls	r4, r4, #12
   16398:	4e13      	ldr	r6, [pc, #76]	; (163e8 <__aeabi_dadd+0x618>)
   1639a:	2700      	movs	r7, #0
   1639c:	e5dc      	b.n	15f58 <__aeabi_dadd+0x188>
   1639e:	4327      	orrs	r7, r4
   163a0:	1e7c      	subs	r4, r7, #1
   163a2:	41a7      	sbcs	r7, r4
   163a4:	2400      	movs	r4, #0
   163a6:	e779      	b.n	1629c <__aeabi_dadd+0x4cc>
   163a8:	000c      	movs	r4, r1
   163aa:	0017      	movs	r7, r2
   163ac:	4e0e      	ldr	r6, [pc, #56]	; (163e8 <__aeabi_dadd+0x618>)
   163ae:	e593      	b.n	15ed8 <__aeabi_dadd+0x108>
   163b0:	000c      	movs	r4, r1
   163b2:	0017      	movs	r7, r2
   163b4:	e590      	b.n	15ed8 <__aeabi_dadd+0x108>
   163b6:	4656      	mov	r6, sl
   163b8:	0023      	movs	r3, r4
   163ba:	3e20      	subs	r6, #32
   163bc:	40f3      	lsrs	r3, r6
   163be:	4699      	mov	r9, r3
   163c0:	4653      	mov	r3, sl
   163c2:	2b20      	cmp	r3, #32
   163c4:	d00e      	beq.n	163e4 <__aeabi_dadd+0x614>
   163c6:	2340      	movs	r3, #64	; 0x40
   163c8:	4656      	mov	r6, sl
   163ca:	1b9b      	subs	r3, r3, r6
   163cc:	409c      	lsls	r4, r3
   163ce:	4327      	orrs	r7, r4
   163d0:	1e7c      	subs	r4, r7, #1
   163d2:	41a7      	sbcs	r7, r4
   163d4:	464b      	mov	r3, r9
   163d6:	2400      	movs	r4, #0
   163d8:	431f      	orrs	r7, r3
   163da:	e75f      	b.n	1629c <__aeabi_dadd+0x4cc>
   163dc:	2400      	movs	r4, #0
   163de:	e7d2      	b.n	16386 <__aeabi_dadd+0x5b6>
   163e0:	0017      	movs	r7, r2
   163e2:	e5b2      	b.n	15f4a <__aeabi_dadd+0x17a>
   163e4:	2400      	movs	r4, #0
   163e6:	e7f2      	b.n	163ce <__aeabi_dadd+0x5fe>
   163e8:	000007ff 	.word	0x000007ff
   163ec:	ff7fffff 	.word	0xff7fffff

000163f0 <__aeabi_ddiv>:
   163f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   163f2:	4657      	mov	r7, sl
   163f4:	4645      	mov	r5, r8
   163f6:	46de      	mov	lr, fp
   163f8:	464e      	mov	r6, r9
   163fa:	b5e0      	push	{r5, r6, r7, lr}
   163fc:	004c      	lsls	r4, r1, #1
   163fe:	030e      	lsls	r6, r1, #12
   16400:	b087      	sub	sp, #28
   16402:	4683      	mov	fp, r0
   16404:	4692      	mov	sl, r2
   16406:	001d      	movs	r5, r3
   16408:	4680      	mov	r8, r0
   1640a:	0b36      	lsrs	r6, r6, #12
   1640c:	0d64      	lsrs	r4, r4, #21
   1640e:	0fcf      	lsrs	r7, r1, #31
   16410:	2c00      	cmp	r4, #0
   16412:	d04f      	beq.n	164b4 <__aeabi_ddiv+0xc4>
   16414:	4b6f      	ldr	r3, [pc, #444]	; (165d4 <__aeabi_ddiv+0x1e4>)
   16416:	429c      	cmp	r4, r3
   16418:	d035      	beq.n	16486 <__aeabi_ddiv+0x96>
   1641a:	2380      	movs	r3, #128	; 0x80
   1641c:	0f42      	lsrs	r2, r0, #29
   1641e:	041b      	lsls	r3, r3, #16
   16420:	00f6      	lsls	r6, r6, #3
   16422:	4313      	orrs	r3, r2
   16424:	4333      	orrs	r3, r6
   16426:	4699      	mov	r9, r3
   16428:	00c3      	lsls	r3, r0, #3
   1642a:	4698      	mov	r8, r3
   1642c:	4b6a      	ldr	r3, [pc, #424]	; (165d8 <__aeabi_ddiv+0x1e8>)
   1642e:	2600      	movs	r6, #0
   16430:	469c      	mov	ip, r3
   16432:	2300      	movs	r3, #0
   16434:	4464      	add	r4, ip
   16436:	9303      	str	r3, [sp, #12]
   16438:	032b      	lsls	r3, r5, #12
   1643a:	0b1b      	lsrs	r3, r3, #12
   1643c:	469b      	mov	fp, r3
   1643e:	006b      	lsls	r3, r5, #1
   16440:	0fed      	lsrs	r5, r5, #31
   16442:	4650      	mov	r0, sl
   16444:	0d5b      	lsrs	r3, r3, #21
   16446:	9501      	str	r5, [sp, #4]
   16448:	d05e      	beq.n	16508 <__aeabi_ddiv+0x118>
   1644a:	4a62      	ldr	r2, [pc, #392]	; (165d4 <__aeabi_ddiv+0x1e4>)
   1644c:	4293      	cmp	r3, r2
   1644e:	d053      	beq.n	164f8 <__aeabi_ddiv+0x108>
   16450:	465a      	mov	r2, fp
   16452:	00d1      	lsls	r1, r2, #3
   16454:	2280      	movs	r2, #128	; 0x80
   16456:	0f40      	lsrs	r0, r0, #29
   16458:	0412      	lsls	r2, r2, #16
   1645a:	4302      	orrs	r2, r0
   1645c:	430a      	orrs	r2, r1
   1645e:	4693      	mov	fp, r2
   16460:	4652      	mov	r2, sl
   16462:	00d1      	lsls	r1, r2, #3
   16464:	4a5c      	ldr	r2, [pc, #368]	; (165d8 <__aeabi_ddiv+0x1e8>)
   16466:	4694      	mov	ip, r2
   16468:	2200      	movs	r2, #0
   1646a:	4463      	add	r3, ip
   1646c:	0038      	movs	r0, r7
   1646e:	4068      	eors	r0, r5
   16470:	4684      	mov	ip, r0
   16472:	9002      	str	r0, [sp, #8]
   16474:	1ae4      	subs	r4, r4, r3
   16476:	4316      	orrs	r6, r2
   16478:	2e0f      	cmp	r6, #15
   1647a:	d900      	bls.n	1647e <__aeabi_ddiv+0x8e>
   1647c:	e0b4      	b.n	165e8 <__aeabi_ddiv+0x1f8>
   1647e:	4b57      	ldr	r3, [pc, #348]	; (165dc <__aeabi_ddiv+0x1ec>)
   16480:	00b6      	lsls	r6, r6, #2
   16482:	599b      	ldr	r3, [r3, r6]
   16484:	469f      	mov	pc, r3
   16486:	0003      	movs	r3, r0
   16488:	4333      	orrs	r3, r6
   1648a:	4699      	mov	r9, r3
   1648c:	d16c      	bne.n	16568 <__aeabi_ddiv+0x178>
   1648e:	2300      	movs	r3, #0
   16490:	4698      	mov	r8, r3
   16492:	3302      	adds	r3, #2
   16494:	2608      	movs	r6, #8
   16496:	9303      	str	r3, [sp, #12]
   16498:	e7ce      	b.n	16438 <__aeabi_ddiv+0x48>
   1649a:	46cb      	mov	fp, r9
   1649c:	4641      	mov	r1, r8
   1649e:	9a03      	ldr	r2, [sp, #12]
   164a0:	9701      	str	r7, [sp, #4]
   164a2:	2a02      	cmp	r2, #2
   164a4:	d165      	bne.n	16572 <__aeabi_ddiv+0x182>
   164a6:	9b01      	ldr	r3, [sp, #4]
   164a8:	4c4a      	ldr	r4, [pc, #296]	; (165d4 <__aeabi_ddiv+0x1e4>)
   164aa:	469c      	mov	ip, r3
   164ac:	2300      	movs	r3, #0
   164ae:	2200      	movs	r2, #0
   164b0:	4698      	mov	r8, r3
   164b2:	e06b      	b.n	1658c <__aeabi_ddiv+0x19c>
   164b4:	0003      	movs	r3, r0
   164b6:	4333      	orrs	r3, r6
   164b8:	4699      	mov	r9, r3
   164ba:	d04e      	beq.n	1655a <__aeabi_ddiv+0x16a>
   164bc:	2e00      	cmp	r6, #0
   164be:	d100      	bne.n	164c2 <__aeabi_ddiv+0xd2>
   164c0:	e1bc      	b.n	1683c <__aeabi_ddiv+0x44c>
   164c2:	0030      	movs	r0, r6
   164c4:	f001 fa7e 	bl	179c4 <__clzsi2>
   164c8:	0003      	movs	r3, r0
   164ca:	3b0b      	subs	r3, #11
   164cc:	2b1c      	cmp	r3, #28
   164ce:	dd00      	ble.n	164d2 <__aeabi_ddiv+0xe2>
   164d0:	e1ac      	b.n	1682c <__aeabi_ddiv+0x43c>
   164d2:	221d      	movs	r2, #29
   164d4:	1ad3      	subs	r3, r2, r3
   164d6:	465a      	mov	r2, fp
   164d8:	0001      	movs	r1, r0
   164da:	40da      	lsrs	r2, r3
   164dc:	3908      	subs	r1, #8
   164de:	408e      	lsls	r6, r1
   164e0:	0013      	movs	r3, r2
   164e2:	4333      	orrs	r3, r6
   164e4:	4699      	mov	r9, r3
   164e6:	465b      	mov	r3, fp
   164e8:	408b      	lsls	r3, r1
   164ea:	4698      	mov	r8, r3
   164ec:	2300      	movs	r3, #0
   164ee:	4c3c      	ldr	r4, [pc, #240]	; (165e0 <__aeabi_ddiv+0x1f0>)
   164f0:	2600      	movs	r6, #0
   164f2:	1a24      	subs	r4, r4, r0
   164f4:	9303      	str	r3, [sp, #12]
   164f6:	e79f      	b.n	16438 <__aeabi_ddiv+0x48>
   164f8:	4651      	mov	r1, sl
   164fa:	465a      	mov	r2, fp
   164fc:	4311      	orrs	r1, r2
   164fe:	d129      	bne.n	16554 <__aeabi_ddiv+0x164>
   16500:	2200      	movs	r2, #0
   16502:	4693      	mov	fp, r2
   16504:	3202      	adds	r2, #2
   16506:	e7b1      	b.n	1646c <__aeabi_ddiv+0x7c>
   16508:	4659      	mov	r1, fp
   1650a:	4301      	orrs	r1, r0
   1650c:	d01e      	beq.n	1654c <__aeabi_ddiv+0x15c>
   1650e:	465b      	mov	r3, fp
   16510:	2b00      	cmp	r3, #0
   16512:	d100      	bne.n	16516 <__aeabi_ddiv+0x126>
   16514:	e19e      	b.n	16854 <__aeabi_ddiv+0x464>
   16516:	4658      	mov	r0, fp
   16518:	f001 fa54 	bl	179c4 <__clzsi2>
   1651c:	0003      	movs	r3, r0
   1651e:	3b0b      	subs	r3, #11
   16520:	2b1c      	cmp	r3, #28
   16522:	dd00      	ble.n	16526 <__aeabi_ddiv+0x136>
   16524:	e18f      	b.n	16846 <__aeabi_ddiv+0x456>
   16526:	0002      	movs	r2, r0
   16528:	4659      	mov	r1, fp
   1652a:	3a08      	subs	r2, #8
   1652c:	4091      	lsls	r1, r2
   1652e:	468b      	mov	fp, r1
   16530:	211d      	movs	r1, #29
   16532:	1acb      	subs	r3, r1, r3
   16534:	4651      	mov	r1, sl
   16536:	40d9      	lsrs	r1, r3
   16538:	000b      	movs	r3, r1
   1653a:	4659      	mov	r1, fp
   1653c:	430b      	orrs	r3, r1
   1653e:	4651      	mov	r1, sl
   16540:	469b      	mov	fp, r3
   16542:	4091      	lsls	r1, r2
   16544:	4b26      	ldr	r3, [pc, #152]	; (165e0 <__aeabi_ddiv+0x1f0>)
   16546:	2200      	movs	r2, #0
   16548:	1a1b      	subs	r3, r3, r0
   1654a:	e78f      	b.n	1646c <__aeabi_ddiv+0x7c>
   1654c:	2300      	movs	r3, #0
   1654e:	2201      	movs	r2, #1
   16550:	469b      	mov	fp, r3
   16552:	e78b      	b.n	1646c <__aeabi_ddiv+0x7c>
   16554:	4651      	mov	r1, sl
   16556:	2203      	movs	r2, #3
   16558:	e788      	b.n	1646c <__aeabi_ddiv+0x7c>
   1655a:	2300      	movs	r3, #0
   1655c:	4698      	mov	r8, r3
   1655e:	3301      	adds	r3, #1
   16560:	2604      	movs	r6, #4
   16562:	2400      	movs	r4, #0
   16564:	9303      	str	r3, [sp, #12]
   16566:	e767      	b.n	16438 <__aeabi_ddiv+0x48>
   16568:	2303      	movs	r3, #3
   1656a:	46b1      	mov	r9, r6
   1656c:	9303      	str	r3, [sp, #12]
   1656e:	260c      	movs	r6, #12
   16570:	e762      	b.n	16438 <__aeabi_ddiv+0x48>
   16572:	2a03      	cmp	r2, #3
   16574:	d100      	bne.n	16578 <__aeabi_ddiv+0x188>
   16576:	e25c      	b.n	16a32 <__aeabi_ddiv+0x642>
   16578:	9b01      	ldr	r3, [sp, #4]
   1657a:	2a01      	cmp	r2, #1
   1657c:	d000      	beq.n	16580 <__aeabi_ddiv+0x190>
   1657e:	e1e4      	b.n	1694a <__aeabi_ddiv+0x55a>
   16580:	4013      	ands	r3, r2
   16582:	469c      	mov	ip, r3
   16584:	2300      	movs	r3, #0
   16586:	2400      	movs	r4, #0
   16588:	2200      	movs	r2, #0
   1658a:	4698      	mov	r8, r3
   1658c:	2100      	movs	r1, #0
   1658e:	0312      	lsls	r2, r2, #12
   16590:	0b13      	lsrs	r3, r2, #12
   16592:	0d0a      	lsrs	r2, r1, #20
   16594:	0512      	lsls	r2, r2, #20
   16596:	431a      	orrs	r2, r3
   16598:	0523      	lsls	r3, r4, #20
   1659a:	4c12      	ldr	r4, [pc, #72]	; (165e4 <__aeabi_ddiv+0x1f4>)
   1659c:	4640      	mov	r0, r8
   1659e:	4022      	ands	r2, r4
   165a0:	4313      	orrs	r3, r2
   165a2:	4662      	mov	r2, ip
   165a4:	005b      	lsls	r3, r3, #1
   165a6:	07d2      	lsls	r2, r2, #31
   165a8:	085b      	lsrs	r3, r3, #1
   165aa:	4313      	orrs	r3, r2
   165ac:	0019      	movs	r1, r3
   165ae:	b007      	add	sp, #28
   165b0:	bc3c      	pop	{r2, r3, r4, r5}
   165b2:	4690      	mov	r8, r2
   165b4:	4699      	mov	r9, r3
   165b6:	46a2      	mov	sl, r4
   165b8:	46ab      	mov	fp, r5
   165ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   165bc:	2300      	movs	r3, #0
   165be:	2280      	movs	r2, #128	; 0x80
   165c0:	469c      	mov	ip, r3
   165c2:	0312      	lsls	r2, r2, #12
   165c4:	4698      	mov	r8, r3
   165c6:	4c03      	ldr	r4, [pc, #12]	; (165d4 <__aeabi_ddiv+0x1e4>)
   165c8:	e7e0      	b.n	1658c <__aeabi_ddiv+0x19c>
   165ca:	2300      	movs	r3, #0
   165cc:	4c01      	ldr	r4, [pc, #4]	; (165d4 <__aeabi_ddiv+0x1e4>)
   165ce:	2200      	movs	r2, #0
   165d0:	4698      	mov	r8, r3
   165d2:	e7db      	b.n	1658c <__aeabi_ddiv+0x19c>
   165d4:	000007ff 	.word	0x000007ff
   165d8:	fffffc01 	.word	0xfffffc01
   165dc:	0001a310 	.word	0x0001a310
   165e0:	fffffc0d 	.word	0xfffffc0d
   165e4:	800fffff 	.word	0x800fffff
   165e8:	45d9      	cmp	r9, fp
   165ea:	d900      	bls.n	165ee <__aeabi_ddiv+0x1fe>
   165ec:	e139      	b.n	16862 <__aeabi_ddiv+0x472>
   165ee:	d100      	bne.n	165f2 <__aeabi_ddiv+0x202>
   165f0:	e134      	b.n	1685c <__aeabi_ddiv+0x46c>
   165f2:	2300      	movs	r3, #0
   165f4:	4646      	mov	r6, r8
   165f6:	464d      	mov	r5, r9
   165f8:	469a      	mov	sl, r3
   165fa:	3c01      	subs	r4, #1
   165fc:	465b      	mov	r3, fp
   165fe:	0e0a      	lsrs	r2, r1, #24
   16600:	021b      	lsls	r3, r3, #8
   16602:	431a      	orrs	r2, r3
   16604:	020b      	lsls	r3, r1, #8
   16606:	0c17      	lsrs	r7, r2, #16
   16608:	9303      	str	r3, [sp, #12]
   1660a:	0413      	lsls	r3, r2, #16
   1660c:	0c1b      	lsrs	r3, r3, #16
   1660e:	0039      	movs	r1, r7
   16610:	0028      	movs	r0, r5
   16612:	4690      	mov	r8, r2
   16614:	9301      	str	r3, [sp, #4]
   16616:	f7fe ff45 	bl	154a4 <__udivsi3>
   1661a:	0002      	movs	r2, r0
   1661c:	9b01      	ldr	r3, [sp, #4]
   1661e:	4683      	mov	fp, r0
   16620:	435a      	muls	r2, r3
   16622:	0028      	movs	r0, r5
   16624:	0039      	movs	r1, r7
   16626:	4691      	mov	r9, r2
   16628:	f7fe ffc2 	bl	155b0 <__aeabi_uidivmod>
   1662c:	0c35      	lsrs	r5, r6, #16
   1662e:	0409      	lsls	r1, r1, #16
   16630:	430d      	orrs	r5, r1
   16632:	45a9      	cmp	r9, r5
   16634:	d90d      	bls.n	16652 <__aeabi_ddiv+0x262>
   16636:	465b      	mov	r3, fp
   16638:	4445      	add	r5, r8
   1663a:	3b01      	subs	r3, #1
   1663c:	45a8      	cmp	r8, r5
   1663e:	d900      	bls.n	16642 <__aeabi_ddiv+0x252>
   16640:	e13a      	b.n	168b8 <__aeabi_ddiv+0x4c8>
   16642:	45a9      	cmp	r9, r5
   16644:	d800      	bhi.n	16648 <__aeabi_ddiv+0x258>
   16646:	e137      	b.n	168b8 <__aeabi_ddiv+0x4c8>
   16648:	2302      	movs	r3, #2
   1664a:	425b      	negs	r3, r3
   1664c:	469c      	mov	ip, r3
   1664e:	4445      	add	r5, r8
   16650:	44e3      	add	fp, ip
   16652:	464b      	mov	r3, r9
   16654:	1aeb      	subs	r3, r5, r3
   16656:	0039      	movs	r1, r7
   16658:	0018      	movs	r0, r3
   1665a:	9304      	str	r3, [sp, #16]
   1665c:	f7fe ff22 	bl	154a4 <__udivsi3>
   16660:	9b01      	ldr	r3, [sp, #4]
   16662:	0005      	movs	r5, r0
   16664:	4343      	muls	r3, r0
   16666:	0039      	movs	r1, r7
   16668:	9804      	ldr	r0, [sp, #16]
   1666a:	4699      	mov	r9, r3
   1666c:	f7fe ffa0 	bl	155b0 <__aeabi_uidivmod>
   16670:	0433      	lsls	r3, r6, #16
   16672:	0409      	lsls	r1, r1, #16
   16674:	0c1b      	lsrs	r3, r3, #16
   16676:	430b      	orrs	r3, r1
   16678:	4599      	cmp	r9, r3
   1667a:	d909      	bls.n	16690 <__aeabi_ddiv+0x2a0>
   1667c:	4443      	add	r3, r8
   1667e:	1e6a      	subs	r2, r5, #1
   16680:	4598      	cmp	r8, r3
   16682:	d900      	bls.n	16686 <__aeabi_ddiv+0x296>
   16684:	e11a      	b.n	168bc <__aeabi_ddiv+0x4cc>
   16686:	4599      	cmp	r9, r3
   16688:	d800      	bhi.n	1668c <__aeabi_ddiv+0x29c>
   1668a:	e117      	b.n	168bc <__aeabi_ddiv+0x4cc>
   1668c:	3d02      	subs	r5, #2
   1668e:	4443      	add	r3, r8
   16690:	464a      	mov	r2, r9
   16692:	1a9b      	subs	r3, r3, r2
   16694:	465a      	mov	r2, fp
   16696:	0412      	lsls	r2, r2, #16
   16698:	432a      	orrs	r2, r5
   1669a:	9903      	ldr	r1, [sp, #12]
   1669c:	4693      	mov	fp, r2
   1669e:	0c10      	lsrs	r0, r2, #16
   166a0:	0c0a      	lsrs	r2, r1, #16
   166a2:	4691      	mov	r9, r2
   166a4:	0409      	lsls	r1, r1, #16
   166a6:	465a      	mov	r2, fp
   166a8:	0c09      	lsrs	r1, r1, #16
   166aa:	464e      	mov	r6, r9
   166ac:	000d      	movs	r5, r1
   166ae:	0412      	lsls	r2, r2, #16
   166b0:	0c12      	lsrs	r2, r2, #16
   166b2:	4345      	muls	r5, r0
   166b4:	9105      	str	r1, [sp, #20]
   166b6:	4351      	muls	r1, r2
   166b8:	4372      	muls	r2, r6
   166ba:	4370      	muls	r0, r6
   166bc:	1952      	adds	r2, r2, r5
   166be:	0c0e      	lsrs	r6, r1, #16
   166c0:	18b2      	adds	r2, r6, r2
   166c2:	4295      	cmp	r5, r2
   166c4:	d903      	bls.n	166ce <__aeabi_ddiv+0x2de>
   166c6:	2580      	movs	r5, #128	; 0x80
   166c8:	026d      	lsls	r5, r5, #9
   166ca:	46ac      	mov	ip, r5
   166cc:	4460      	add	r0, ip
   166ce:	0c15      	lsrs	r5, r2, #16
   166d0:	0409      	lsls	r1, r1, #16
   166d2:	0412      	lsls	r2, r2, #16
   166d4:	0c09      	lsrs	r1, r1, #16
   166d6:	1828      	adds	r0, r5, r0
   166d8:	1852      	adds	r2, r2, r1
   166da:	4283      	cmp	r3, r0
   166dc:	d200      	bcs.n	166e0 <__aeabi_ddiv+0x2f0>
   166de:	e0ce      	b.n	1687e <__aeabi_ddiv+0x48e>
   166e0:	d100      	bne.n	166e4 <__aeabi_ddiv+0x2f4>
   166e2:	e0c8      	b.n	16876 <__aeabi_ddiv+0x486>
   166e4:	1a1d      	subs	r5, r3, r0
   166e6:	4653      	mov	r3, sl
   166e8:	1a9e      	subs	r6, r3, r2
   166ea:	45b2      	cmp	sl, r6
   166ec:	4192      	sbcs	r2, r2
   166ee:	4252      	negs	r2, r2
   166f0:	1aab      	subs	r3, r5, r2
   166f2:	469a      	mov	sl, r3
   166f4:	4598      	cmp	r8, r3
   166f6:	d100      	bne.n	166fa <__aeabi_ddiv+0x30a>
   166f8:	e117      	b.n	1692a <__aeabi_ddiv+0x53a>
   166fa:	0039      	movs	r1, r7
   166fc:	0018      	movs	r0, r3
   166fe:	f7fe fed1 	bl	154a4 <__udivsi3>
   16702:	9b01      	ldr	r3, [sp, #4]
   16704:	0005      	movs	r5, r0
   16706:	4343      	muls	r3, r0
   16708:	0039      	movs	r1, r7
   1670a:	4650      	mov	r0, sl
   1670c:	9304      	str	r3, [sp, #16]
   1670e:	f7fe ff4f 	bl	155b0 <__aeabi_uidivmod>
   16712:	9804      	ldr	r0, [sp, #16]
   16714:	040b      	lsls	r3, r1, #16
   16716:	0c31      	lsrs	r1, r6, #16
   16718:	4319      	orrs	r1, r3
   1671a:	4288      	cmp	r0, r1
   1671c:	d909      	bls.n	16732 <__aeabi_ddiv+0x342>
   1671e:	4441      	add	r1, r8
   16720:	1e6b      	subs	r3, r5, #1
   16722:	4588      	cmp	r8, r1
   16724:	d900      	bls.n	16728 <__aeabi_ddiv+0x338>
   16726:	e107      	b.n	16938 <__aeabi_ddiv+0x548>
   16728:	4288      	cmp	r0, r1
   1672a:	d800      	bhi.n	1672e <__aeabi_ddiv+0x33e>
   1672c:	e104      	b.n	16938 <__aeabi_ddiv+0x548>
   1672e:	3d02      	subs	r5, #2
   16730:	4441      	add	r1, r8
   16732:	9b04      	ldr	r3, [sp, #16]
   16734:	1acb      	subs	r3, r1, r3
   16736:	0018      	movs	r0, r3
   16738:	0039      	movs	r1, r7
   1673a:	9304      	str	r3, [sp, #16]
   1673c:	f7fe feb2 	bl	154a4 <__udivsi3>
   16740:	9b01      	ldr	r3, [sp, #4]
   16742:	4682      	mov	sl, r0
   16744:	4343      	muls	r3, r0
   16746:	0039      	movs	r1, r7
   16748:	9804      	ldr	r0, [sp, #16]
   1674a:	9301      	str	r3, [sp, #4]
   1674c:	f7fe ff30 	bl	155b0 <__aeabi_uidivmod>
   16750:	9801      	ldr	r0, [sp, #4]
   16752:	040b      	lsls	r3, r1, #16
   16754:	0431      	lsls	r1, r6, #16
   16756:	0c09      	lsrs	r1, r1, #16
   16758:	4319      	orrs	r1, r3
   1675a:	4288      	cmp	r0, r1
   1675c:	d90d      	bls.n	1677a <__aeabi_ddiv+0x38a>
   1675e:	4653      	mov	r3, sl
   16760:	4441      	add	r1, r8
   16762:	3b01      	subs	r3, #1
   16764:	4588      	cmp	r8, r1
   16766:	d900      	bls.n	1676a <__aeabi_ddiv+0x37a>
   16768:	e0e8      	b.n	1693c <__aeabi_ddiv+0x54c>
   1676a:	4288      	cmp	r0, r1
   1676c:	d800      	bhi.n	16770 <__aeabi_ddiv+0x380>
   1676e:	e0e5      	b.n	1693c <__aeabi_ddiv+0x54c>
   16770:	2302      	movs	r3, #2
   16772:	425b      	negs	r3, r3
   16774:	469c      	mov	ip, r3
   16776:	4441      	add	r1, r8
   16778:	44e2      	add	sl, ip
   1677a:	9b01      	ldr	r3, [sp, #4]
   1677c:	042d      	lsls	r5, r5, #16
   1677e:	1ace      	subs	r6, r1, r3
   16780:	4651      	mov	r1, sl
   16782:	4329      	orrs	r1, r5
   16784:	9d05      	ldr	r5, [sp, #20]
   16786:	464f      	mov	r7, r9
   16788:	002a      	movs	r2, r5
   1678a:	040b      	lsls	r3, r1, #16
   1678c:	0c08      	lsrs	r0, r1, #16
   1678e:	0c1b      	lsrs	r3, r3, #16
   16790:	435a      	muls	r2, r3
   16792:	4345      	muls	r5, r0
   16794:	437b      	muls	r3, r7
   16796:	4378      	muls	r0, r7
   16798:	195b      	adds	r3, r3, r5
   1679a:	0c17      	lsrs	r7, r2, #16
   1679c:	18fb      	adds	r3, r7, r3
   1679e:	429d      	cmp	r5, r3
   167a0:	d903      	bls.n	167aa <__aeabi_ddiv+0x3ba>
   167a2:	2580      	movs	r5, #128	; 0x80
   167a4:	026d      	lsls	r5, r5, #9
   167a6:	46ac      	mov	ip, r5
   167a8:	4460      	add	r0, ip
   167aa:	0c1d      	lsrs	r5, r3, #16
   167ac:	0412      	lsls	r2, r2, #16
   167ae:	041b      	lsls	r3, r3, #16
   167b0:	0c12      	lsrs	r2, r2, #16
   167b2:	1828      	adds	r0, r5, r0
   167b4:	189b      	adds	r3, r3, r2
   167b6:	4286      	cmp	r6, r0
   167b8:	d200      	bcs.n	167bc <__aeabi_ddiv+0x3cc>
   167ba:	e093      	b.n	168e4 <__aeabi_ddiv+0x4f4>
   167bc:	d100      	bne.n	167c0 <__aeabi_ddiv+0x3d0>
   167be:	e08e      	b.n	168de <__aeabi_ddiv+0x4ee>
   167c0:	2301      	movs	r3, #1
   167c2:	4319      	orrs	r1, r3
   167c4:	4ba0      	ldr	r3, [pc, #640]	; (16a48 <__aeabi_ddiv+0x658>)
   167c6:	18e3      	adds	r3, r4, r3
   167c8:	2b00      	cmp	r3, #0
   167ca:	dc00      	bgt.n	167ce <__aeabi_ddiv+0x3de>
   167cc:	e099      	b.n	16902 <__aeabi_ddiv+0x512>
   167ce:	074a      	lsls	r2, r1, #29
   167d0:	d000      	beq.n	167d4 <__aeabi_ddiv+0x3e4>
   167d2:	e09e      	b.n	16912 <__aeabi_ddiv+0x522>
   167d4:	465a      	mov	r2, fp
   167d6:	01d2      	lsls	r2, r2, #7
   167d8:	d506      	bpl.n	167e8 <__aeabi_ddiv+0x3f8>
   167da:	465a      	mov	r2, fp
   167dc:	4b9b      	ldr	r3, [pc, #620]	; (16a4c <__aeabi_ddiv+0x65c>)
   167de:	401a      	ands	r2, r3
   167e0:	2380      	movs	r3, #128	; 0x80
   167e2:	4693      	mov	fp, r2
   167e4:	00db      	lsls	r3, r3, #3
   167e6:	18e3      	adds	r3, r4, r3
   167e8:	4a99      	ldr	r2, [pc, #612]	; (16a50 <__aeabi_ddiv+0x660>)
   167ea:	4293      	cmp	r3, r2
   167ec:	dd68      	ble.n	168c0 <__aeabi_ddiv+0x4d0>
   167ee:	2301      	movs	r3, #1
   167f0:	9a02      	ldr	r2, [sp, #8]
   167f2:	4c98      	ldr	r4, [pc, #608]	; (16a54 <__aeabi_ddiv+0x664>)
   167f4:	401a      	ands	r2, r3
   167f6:	2300      	movs	r3, #0
   167f8:	4694      	mov	ip, r2
   167fa:	4698      	mov	r8, r3
   167fc:	2200      	movs	r2, #0
   167fe:	e6c5      	b.n	1658c <__aeabi_ddiv+0x19c>
   16800:	2280      	movs	r2, #128	; 0x80
   16802:	464b      	mov	r3, r9
   16804:	0312      	lsls	r2, r2, #12
   16806:	4213      	tst	r3, r2
   16808:	d00a      	beq.n	16820 <__aeabi_ddiv+0x430>
   1680a:	465b      	mov	r3, fp
   1680c:	4213      	tst	r3, r2
   1680e:	d106      	bne.n	1681e <__aeabi_ddiv+0x42e>
   16810:	431a      	orrs	r2, r3
   16812:	0312      	lsls	r2, r2, #12
   16814:	0b12      	lsrs	r2, r2, #12
   16816:	46ac      	mov	ip, r5
   16818:	4688      	mov	r8, r1
   1681a:	4c8e      	ldr	r4, [pc, #568]	; (16a54 <__aeabi_ddiv+0x664>)
   1681c:	e6b6      	b.n	1658c <__aeabi_ddiv+0x19c>
   1681e:	464b      	mov	r3, r9
   16820:	431a      	orrs	r2, r3
   16822:	0312      	lsls	r2, r2, #12
   16824:	0b12      	lsrs	r2, r2, #12
   16826:	46bc      	mov	ip, r7
   16828:	4c8a      	ldr	r4, [pc, #552]	; (16a54 <__aeabi_ddiv+0x664>)
   1682a:	e6af      	b.n	1658c <__aeabi_ddiv+0x19c>
   1682c:	0003      	movs	r3, r0
   1682e:	465a      	mov	r2, fp
   16830:	3b28      	subs	r3, #40	; 0x28
   16832:	409a      	lsls	r2, r3
   16834:	2300      	movs	r3, #0
   16836:	4691      	mov	r9, r2
   16838:	4698      	mov	r8, r3
   1683a:	e657      	b.n	164ec <__aeabi_ddiv+0xfc>
   1683c:	4658      	mov	r0, fp
   1683e:	f001 f8c1 	bl	179c4 <__clzsi2>
   16842:	3020      	adds	r0, #32
   16844:	e640      	b.n	164c8 <__aeabi_ddiv+0xd8>
   16846:	0003      	movs	r3, r0
   16848:	4652      	mov	r2, sl
   1684a:	3b28      	subs	r3, #40	; 0x28
   1684c:	409a      	lsls	r2, r3
   1684e:	2100      	movs	r1, #0
   16850:	4693      	mov	fp, r2
   16852:	e677      	b.n	16544 <__aeabi_ddiv+0x154>
   16854:	f001 f8b6 	bl	179c4 <__clzsi2>
   16858:	3020      	adds	r0, #32
   1685a:	e65f      	b.n	1651c <__aeabi_ddiv+0x12c>
   1685c:	4588      	cmp	r8, r1
   1685e:	d200      	bcs.n	16862 <__aeabi_ddiv+0x472>
   16860:	e6c7      	b.n	165f2 <__aeabi_ddiv+0x202>
   16862:	464b      	mov	r3, r9
   16864:	07de      	lsls	r6, r3, #31
   16866:	085d      	lsrs	r5, r3, #1
   16868:	4643      	mov	r3, r8
   1686a:	085b      	lsrs	r3, r3, #1
   1686c:	431e      	orrs	r6, r3
   1686e:	4643      	mov	r3, r8
   16870:	07db      	lsls	r3, r3, #31
   16872:	469a      	mov	sl, r3
   16874:	e6c2      	b.n	165fc <__aeabi_ddiv+0x20c>
   16876:	2500      	movs	r5, #0
   16878:	4592      	cmp	sl, r2
   1687a:	d300      	bcc.n	1687e <__aeabi_ddiv+0x48e>
   1687c:	e733      	b.n	166e6 <__aeabi_ddiv+0x2f6>
   1687e:	9e03      	ldr	r6, [sp, #12]
   16880:	4659      	mov	r1, fp
   16882:	46b4      	mov	ip, r6
   16884:	44e2      	add	sl, ip
   16886:	45b2      	cmp	sl, r6
   16888:	41ad      	sbcs	r5, r5
   1688a:	426d      	negs	r5, r5
   1688c:	4445      	add	r5, r8
   1688e:	18eb      	adds	r3, r5, r3
   16890:	3901      	subs	r1, #1
   16892:	4598      	cmp	r8, r3
   16894:	d207      	bcs.n	168a6 <__aeabi_ddiv+0x4b6>
   16896:	4298      	cmp	r0, r3
   16898:	d900      	bls.n	1689c <__aeabi_ddiv+0x4ac>
   1689a:	e07f      	b.n	1699c <__aeabi_ddiv+0x5ac>
   1689c:	d100      	bne.n	168a0 <__aeabi_ddiv+0x4b0>
   1689e:	e0bc      	b.n	16a1a <__aeabi_ddiv+0x62a>
   168a0:	1a1d      	subs	r5, r3, r0
   168a2:	468b      	mov	fp, r1
   168a4:	e71f      	b.n	166e6 <__aeabi_ddiv+0x2f6>
   168a6:	4598      	cmp	r8, r3
   168a8:	d1fa      	bne.n	168a0 <__aeabi_ddiv+0x4b0>
   168aa:	9d03      	ldr	r5, [sp, #12]
   168ac:	4555      	cmp	r5, sl
   168ae:	d9f2      	bls.n	16896 <__aeabi_ddiv+0x4a6>
   168b0:	4643      	mov	r3, r8
   168b2:	468b      	mov	fp, r1
   168b4:	1a1d      	subs	r5, r3, r0
   168b6:	e716      	b.n	166e6 <__aeabi_ddiv+0x2f6>
   168b8:	469b      	mov	fp, r3
   168ba:	e6ca      	b.n	16652 <__aeabi_ddiv+0x262>
   168bc:	0015      	movs	r5, r2
   168be:	e6e7      	b.n	16690 <__aeabi_ddiv+0x2a0>
   168c0:	465a      	mov	r2, fp
   168c2:	08c9      	lsrs	r1, r1, #3
   168c4:	0752      	lsls	r2, r2, #29
   168c6:	430a      	orrs	r2, r1
   168c8:	055b      	lsls	r3, r3, #21
   168ca:	4690      	mov	r8, r2
   168cc:	0d5c      	lsrs	r4, r3, #21
   168ce:	465a      	mov	r2, fp
   168d0:	2301      	movs	r3, #1
   168d2:	9902      	ldr	r1, [sp, #8]
   168d4:	0252      	lsls	r2, r2, #9
   168d6:	4019      	ands	r1, r3
   168d8:	0b12      	lsrs	r2, r2, #12
   168da:	468c      	mov	ip, r1
   168dc:	e656      	b.n	1658c <__aeabi_ddiv+0x19c>
   168de:	2b00      	cmp	r3, #0
   168e0:	d100      	bne.n	168e4 <__aeabi_ddiv+0x4f4>
   168e2:	e76f      	b.n	167c4 <__aeabi_ddiv+0x3d4>
   168e4:	4446      	add	r6, r8
   168e6:	1e4a      	subs	r2, r1, #1
   168e8:	45b0      	cmp	r8, r6
   168ea:	d929      	bls.n	16940 <__aeabi_ddiv+0x550>
   168ec:	0011      	movs	r1, r2
   168ee:	4286      	cmp	r6, r0
   168f0:	d000      	beq.n	168f4 <__aeabi_ddiv+0x504>
   168f2:	e765      	b.n	167c0 <__aeabi_ddiv+0x3d0>
   168f4:	9a03      	ldr	r2, [sp, #12]
   168f6:	4293      	cmp	r3, r2
   168f8:	d000      	beq.n	168fc <__aeabi_ddiv+0x50c>
   168fa:	e761      	b.n	167c0 <__aeabi_ddiv+0x3d0>
   168fc:	e762      	b.n	167c4 <__aeabi_ddiv+0x3d4>
   168fe:	2101      	movs	r1, #1
   16900:	4249      	negs	r1, r1
   16902:	2001      	movs	r0, #1
   16904:	1ac2      	subs	r2, r0, r3
   16906:	2a38      	cmp	r2, #56	; 0x38
   16908:	dd21      	ble.n	1694e <__aeabi_ddiv+0x55e>
   1690a:	9b02      	ldr	r3, [sp, #8]
   1690c:	4003      	ands	r3, r0
   1690e:	469c      	mov	ip, r3
   16910:	e638      	b.n	16584 <__aeabi_ddiv+0x194>
   16912:	220f      	movs	r2, #15
   16914:	400a      	ands	r2, r1
   16916:	2a04      	cmp	r2, #4
   16918:	d100      	bne.n	1691c <__aeabi_ddiv+0x52c>
   1691a:	e75b      	b.n	167d4 <__aeabi_ddiv+0x3e4>
   1691c:	000a      	movs	r2, r1
   1691e:	1d11      	adds	r1, r2, #4
   16920:	4291      	cmp	r1, r2
   16922:	4192      	sbcs	r2, r2
   16924:	4252      	negs	r2, r2
   16926:	4493      	add	fp, r2
   16928:	e754      	b.n	167d4 <__aeabi_ddiv+0x3e4>
   1692a:	4b47      	ldr	r3, [pc, #284]	; (16a48 <__aeabi_ddiv+0x658>)
   1692c:	18e3      	adds	r3, r4, r3
   1692e:	2b00      	cmp	r3, #0
   16930:	dde5      	ble.n	168fe <__aeabi_ddiv+0x50e>
   16932:	2201      	movs	r2, #1
   16934:	4252      	negs	r2, r2
   16936:	e7f2      	b.n	1691e <__aeabi_ddiv+0x52e>
   16938:	001d      	movs	r5, r3
   1693a:	e6fa      	b.n	16732 <__aeabi_ddiv+0x342>
   1693c:	469a      	mov	sl, r3
   1693e:	e71c      	b.n	1677a <__aeabi_ddiv+0x38a>
   16940:	42b0      	cmp	r0, r6
   16942:	d839      	bhi.n	169b8 <__aeabi_ddiv+0x5c8>
   16944:	d06e      	beq.n	16a24 <__aeabi_ddiv+0x634>
   16946:	0011      	movs	r1, r2
   16948:	e73a      	b.n	167c0 <__aeabi_ddiv+0x3d0>
   1694a:	9302      	str	r3, [sp, #8]
   1694c:	e73a      	b.n	167c4 <__aeabi_ddiv+0x3d4>
   1694e:	2a1f      	cmp	r2, #31
   16950:	dc3c      	bgt.n	169cc <__aeabi_ddiv+0x5dc>
   16952:	2320      	movs	r3, #32
   16954:	1a9b      	subs	r3, r3, r2
   16956:	000c      	movs	r4, r1
   16958:	4658      	mov	r0, fp
   1695a:	4099      	lsls	r1, r3
   1695c:	4098      	lsls	r0, r3
   1695e:	1e4b      	subs	r3, r1, #1
   16960:	4199      	sbcs	r1, r3
   16962:	465b      	mov	r3, fp
   16964:	40d4      	lsrs	r4, r2
   16966:	40d3      	lsrs	r3, r2
   16968:	4320      	orrs	r0, r4
   1696a:	4308      	orrs	r0, r1
   1696c:	001a      	movs	r2, r3
   1696e:	0743      	lsls	r3, r0, #29
   16970:	d009      	beq.n	16986 <__aeabi_ddiv+0x596>
   16972:	230f      	movs	r3, #15
   16974:	4003      	ands	r3, r0
   16976:	2b04      	cmp	r3, #4
   16978:	d005      	beq.n	16986 <__aeabi_ddiv+0x596>
   1697a:	0001      	movs	r1, r0
   1697c:	1d08      	adds	r0, r1, #4
   1697e:	4288      	cmp	r0, r1
   16980:	419b      	sbcs	r3, r3
   16982:	425b      	negs	r3, r3
   16984:	18d2      	adds	r2, r2, r3
   16986:	0213      	lsls	r3, r2, #8
   16988:	d53a      	bpl.n	16a00 <__aeabi_ddiv+0x610>
   1698a:	2301      	movs	r3, #1
   1698c:	9a02      	ldr	r2, [sp, #8]
   1698e:	2401      	movs	r4, #1
   16990:	401a      	ands	r2, r3
   16992:	2300      	movs	r3, #0
   16994:	4694      	mov	ip, r2
   16996:	4698      	mov	r8, r3
   16998:	2200      	movs	r2, #0
   1699a:	e5f7      	b.n	1658c <__aeabi_ddiv+0x19c>
   1699c:	2102      	movs	r1, #2
   1699e:	4249      	negs	r1, r1
   169a0:	468c      	mov	ip, r1
   169a2:	9d03      	ldr	r5, [sp, #12]
   169a4:	44e3      	add	fp, ip
   169a6:	46ac      	mov	ip, r5
   169a8:	44e2      	add	sl, ip
   169aa:	45aa      	cmp	sl, r5
   169ac:	41ad      	sbcs	r5, r5
   169ae:	426d      	negs	r5, r5
   169b0:	4445      	add	r5, r8
   169b2:	18ed      	adds	r5, r5, r3
   169b4:	1a2d      	subs	r5, r5, r0
   169b6:	e696      	b.n	166e6 <__aeabi_ddiv+0x2f6>
   169b8:	1e8a      	subs	r2, r1, #2
   169ba:	9903      	ldr	r1, [sp, #12]
   169bc:	004d      	lsls	r5, r1, #1
   169be:	428d      	cmp	r5, r1
   169c0:	4189      	sbcs	r1, r1
   169c2:	4249      	negs	r1, r1
   169c4:	4441      	add	r1, r8
   169c6:	1876      	adds	r6, r6, r1
   169c8:	9503      	str	r5, [sp, #12]
   169ca:	e78f      	b.n	168ec <__aeabi_ddiv+0x4fc>
   169cc:	201f      	movs	r0, #31
   169ce:	4240      	negs	r0, r0
   169d0:	1ac3      	subs	r3, r0, r3
   169d2:	4658      	mov	r0, fp
   169d4:	40d8      	lsrs	r0, r3
   169d6:	0003      	movs	r3, r0
   169d8:	2a20      	cmp	r2, #32
   169da:	d028      	beq.n	16a2e <__aeabi_ddiv+0x63e>
   169dc:	2040      	movs	r0, #64	; 0x40
   169de:	465d      	mov	r5, fp
   169e0:	1a82      	subs	r2, r0, r2
   169e2:	4095      	lsls	r5, r2
   169e4:	4329      	orrs	r1, r5
   169e6:	1e4a      	subs	r2, r1, #1
   169e8:	4191      	sbcs	r1, r2
   169ea:	4319      	orrs	r1, r3
   169ec:	2307      	movs	r3, #7
   169ee:	2200      	movs	r2, #0
   169f0:	400b      	ands	r3, r1
   169f2:	d009      	beq.n	16a08 <__aeabi_ddiv+0x618>
   169f4:	230f      	movs	r3, #15
   169f6:	2200      	movs	r2, #0
   169f8:	400b      	ands	r3, r1
   169fa:	0008      	movs	r0, r1
   169fc:	2b04      	cmp	r3, #4
   169fe:	d1bd      	bne.n	1697c <__aeabi_ddiv+0x58c>
   16a00:	0001      	movs	r1, r0
   16a02:	0753      	lsls	r3, r2, #29
   16a04:	0252      	lsls	r2, r2, #9
   16a06:	0b12      	lsrs	r2, r2, #12
   16a08:	08c9      	lsrs	r1, r1, #3
   16a0a:	4319      	orrs	r1, r3
   16a0c:	2301      	movs	r3, #1
   16a0e:	4688      	mov	r8, r1
   16a10:	9902      	ldr	r1, [sp, #8]
   16a12:	2400      	movs	r4, #0
   16a14:	4019      	ands	r1, r3
   16a16:	468c      	mov	ip, r1
   16a18:	e5b8      	b.n	1658c <__aeabi_ddiv+0x19c>
   16a1a:	4552      	cmp	r2, sl
   16a1c:	d8be      	bhi.n	1699c <__aeabi_ddiv+0x5ac>
   16a1e:	468b      	mov	fp, r1
   16a20:	2500      	movs	r5, #0
   16a22:	e660      	b.n	166e6 <__aeabi_ddiv+0x2f6>
   16a24:	9d03      	ldr	r5, [sp, #12]
   16a26:	429d      	cmp	r5, r3
   16a28:	d3c6      	bcc.n	169b8 <__aeabi_ddiv+0x5c8>
   16a2a:	0011      	movs	r1, r2
   16a2c:	e762      	b.n	168f4 <__aeabi_ddiv+0x504>
   16a2e:	2500      	movs	r5, #0
   16a30:	e7d8      	b.n	169e4 <__aeabi_ddiv+0x5f4>
   16a32:	2280      	movs	r2, #128	; 0x80
   16a34:	465b      	mov	r3, fp
   16a36:	0312      	lsls	r2, r2, #12
   16a38:	431a      	orrs	r2, r3
   16a3a:	9b01      	ldr	r3, [sp, #4]
   16a3c:	0312      	lsls	r2, r2, #12
   16a3e:	0b12      	lsrs	r2, r2, #12
   16a40:	469c      	mov	ip, r3
   16a42:	4688      	mov	r8, r1
   16a44:	4c03      	ldr	r4, [pc, #12]	; (16a54 <__aeabi_ddiv+0x664>)
   16a46:	e5a1      	b.n	1658c <__aeabi_ddiv+0x19c>
   16a48:	000003ff 	.word	0x000003ff
   16a4c:	feffffff 	.word	0xfeffffff
   16a50:	000007fe 	.word	0x000007fe
   16a54:	000007ff 	.word	0x000007ff

00016a58 <__eqdf2>:
   16a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a5a:	464f      	mov	r7, r9
   16a5c:	4646      	mov	r6, r8
   16a5e:	46d6      	mov	lr, sl
   16a60:	005c      	lsls	r4, r3, #1
   16a62:	b5c0      	push	{r6, r7, lr}
   16a64:	031f      	lsls	r7, r3, #12
   16a66:	0fdb      	lsrs	r3, r3, #31
   16a68:	469a      	mov	sl, r3
   16a6a:	4b17      	ldr	r3, [pc, #92]	; (16ac8 <__eqdf2+0x70>)
   16a6c:	030e      	lsls	r6, r1, #12
   16a6e:	004d      	lsls	r5, r1, #1
   16a70:	4684      	mov	ip, r0
   16a72:	4680      	mov	r8, r0
   16a74:	0b36      	lsrs	r6, r6, #12
   16a76:	0d6d      	lsrs	r5, r5, #21
   16a78:	0fc9      	lsrs	r1, r1, #31
   16a7a:	4691      	mov	r9, r2
   16a7c:	0b3f      	lsrs	r7, r7, #12
   16a7e:	0d64      	lsrs	r4, r4, #21
   16a80:	2001      	movs	r0, #1
   16a82:	429d      	cmp	r5, r3
   16a84:	d008      	beq.n	16a98 <__eqdf2+0x40>
   16a86:	429c      	cmp	r4, r3
   16a88:	d001      	beq.n	16a8e <__eqdf2+0x36>
   16a8a:	42a5      	cmp	r5, r4
   16a8c:	d00b      	beq.n	16aa6 <__eqdf2+0x4e>
   16a8e:	bc1c      	pop	{r2, r3, r4}
   16a90:	4690      	mov	r8, r2
   16a92:	4699      	mov	r9, r3
   16a94:	46a2      	mov	sl, r4
   16a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a98:	4663      	mov	r3, ip
   16a9a:	4333      	orrs	r3, r6
   16a9c:	d1f7      	bne.n	16a8e <__eqdf2+0x36>
   16a9e:	42ac      	cmp	r4, r5
   16aa0:	d1f5      	bne.n	16a8e <__eqdf2+0x36>
   16aa2:	433a      	orrs	r2, r7
   16aa4:	d1f3      	bne.n	16a8e <__eqdf2+0x36>
   16aa6:	2001      	movs	r0, #1
   16aa8:	42be      	cmp	r6, r7
   16aaa:	d1f0      	bne.n	16a8e <__eqdf2+0x36>
   16aac:	45c8      	cmp	r8, r9
   16aae:	d1ee      	bne.n	16a8e <__eqdf2+0x36>
   16ab0:	4551      	cmp	r1, sl
   16ab2:	d007      	beq.n	16ac4 <__eqdf2+0x6c>
   16ab4:	2d00      	cmp	r5, #0
   16ab6:	d1ea      	bne.n	16a8e <__eqdf2+0x36>
   16ab8:	4663      	mov	r3, ip
   16aba:	431e      	orrs	r6, r3
   16abc:	0030      	movs	r0, r6
   16abe:	1e46      	subs	r6, r0, #1
   16ac0:	41b0      	sbcs	r0, r6
   16ac2:	e7e4      	b.n	16a8e <__eqdf2+0x36>
   16ac4:	2000      	movs	r0, #0
   16ac6:	e7e2      	b.n	16a8e <__eqdf2+0x36>
   16ac8:	000007ff 	.word	0x000007ff

00016acc <__gedf2>:
   16acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ace:	4645      	mov	r5, r8
   16ad0:	46de      	mov	lr, fp
   16ad2:	4657      	mov	r7, sl
   16ad4:	464e      	mov	r6, r9
   16ad6:	b5e0      	push	{r5, r6, r7, lr}
   16ad8:	031f      	lsls	r7, r3, #12
   16ada:	0b3d      	lsrs	r5, r7, #12
   16adc:	4f2c      	ldr	r7, [pc, #176]	; (16b90 <__gedf2+0xc4>)
   16ade:	030e      	lsls	r6, r1, #12
   16ae0:	004c      	lsls	r4, r1, #1
   16ae2:	46ab      	mov	fp, r5
   16ae4:	005d      	lsls	r5, r3, #1
   16ae6:	4684      	mov	ip, r0
   16ae8:	0b36      	lsrs	r6, r6, #12
   16aea:	0d64      	lsrs	r4, r4, #21
   16aec:	0fc9      	lsrs	r1, r1, #31
   16aee:	4690      	mov	r8, r2
   16af0:	0d6d      	lsrs	r5, r5, #21
   16af2:	0fdb      	lsrs	r3, r3, #31
   16af4:	42bc      	cmp	r4, r7
   16af6:	d02a      	beq.n	16b4e <__gedf2+0x82>
   16af8:	4f25      	ldr	r7, [pc, #148]	; (16b90 <__gedf2+0xc4>)
   16afa:	42bd      	cmp	r5, r7
   16afc:	d02d      	beq.n	16b5a <__gedf2+0x8e>
   16afe:	2c00      	cmp	r4, #0
   16b00:	d10f      	bne.n	16b22 <__gedf2+0x56>
   16b02:	4330      	orrs	r0, r6
   16b04:	0007      	movs	r7, r0
   16b06:	4681      	mov	r9, r0
   16b08:	4278      	negs	r0, r7
   16b0a:	4178      	adcs	r0, r7
   16b0c:	b2c0      	uxtb	r0, r0
   16b0e:	2d00      	cmp	r5, #0
   16b10:	d117      	bne.n	16b42 <__gedf2+0x76>
   16b12:	465f      	mov	r7, fp
   16b14:	433a      	orrs	r2, r7
   16b16:	d114      	bne.n	16b42 <__gedf2+0x76>
   16b18:	464b      	mov	r3, r9
   16b1a:	2000      	movs	r0, #0
   16b1c:	2b00      	cmp	r3, #0
   16b1e:	d00a      	beq.n	16b36 <__gedf2+0x6a>
   16b20:	e006      	b.n	16b30 <__gedf2+0x64>
   16b22:	2d00      	cmp	r5, #0
   16b24:	d102      	bne.n	16b2c <__gedf2+0x60>
   16b26:	4658      	mov	r0, fp
   16b28:	4302      	orrs	r2, r0
   16b2a:	d001      	beq.n	16b30 <__gedf2+0x64>
   16b2c:	4299      	cmp	r1, r3
   16b2e:	d018      	beq.n	16b62 <__gedf2+0x96>
   16b30:	4248      	negs	r0, r1
   16b32:	2101      	movs	r1, #1
   16b34:	4308      	orrs	r0, r1
   16b36:	bc3c      	pop	{r2, r3, r4, r5}
   16b38:	4690      	mov	r8, r2
   16b3a:	4699      	mov	r9, r3
   16b3c:	46a2      	mov	sl, r4
   16b3e:	46ab      	mov	fp, r5
   16b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b42:	2800      	cmp	r0, #0
   16b44:	d0f2      	beq.n	16b2c <__gedf2+0x60>
   16b46:	2001      	movs	r0, #1
   16b48:	3b01      	subs	r3, #1
   16b4a:	4318      	orrs	r0, r3
   16b4c:	e7f3      	b.n	16b36 <__gedf2+0x6a>
   16b4e:	0037      	movs	r7, r6
   16b50:	4307      	orrs	r7, r0
   16b52:	d0d1      	beq.n	16af8 <__gedf2+0x2c>
   16b54:	2002      	movs	r0, #2
   16b56:	4240      	negs	r0, r0
   16b58:	e7ed      	b.n	16b36 <__gedf2+0x6a>
   16b5a:	465f      	mov	r7, fp
   16b5c:	4317      	orrs	r7, r2
   16b5e:	d0ce      	beq.n	16afe <__gedf2+0x32>
   16b60:	e7f8      	b.n	16b54 <__gedf2+0x88>
   16b62:	42ac      	cmp	r4, r5
   16b64:	dce4      	bgt.n	16b30 <__gedf2+0x64>
   16b66:	da03      	bge.n	16b70 <__gedf2+0xa4>
   16b68:	1e48      	subs	r0, r1, #1
   16b6a:	2101      	movs	r1, #1
   16b6c:	4308      	orrs	r0, r1
   16b6e:	e7e2      	b.n	16b36 <__gedf2+0x6a>
   16b70:	455e      	cmp	r6, fp
   16b72:	d8dd      	bhi.n	16b30 <__gedf2+0x64>
   16b74:	d006      	beq.n	16b84 <__gedf2+0xb8>
   16b76:	2000      	movs	r0, #0
   16b78:	455e      	cmp	r6, fp
   16b7a:	d2dc      	bcs.n	16b36 <__gedf2+0x6a>
   16b7c:	2301      	movs	r3, #1
   16b7e:	1e48      	subs	r0, r1, #1
   16b80:	4318      	orrs	r0, r3
   16b82:	e7d8      	b.n	16b36 <__gedf2+0x6a>
   16b84:	45c4      	cmp	ip, r8
   16b86:	d8d3      	bhi.n	16b30 <__gedf2+0x64>
   16b88:	2000      	movs	r0, #0
   16b8a:	45c4      	cmp	ip, r8
   16b8c:	d3f6      	bcc.n	16b7c <__gedf2+0xb0>
   16b8e:	e7d2      	b.n	16b36 <__gedf2+0x6a>
   16b90:	000007ff 	.word	0x000007ff

00016b94 <__ledf2>:
   16b94:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b96:	464e      	mov	r6, r9
   16b98:	4645      	mov	r5, r8
   16b9a:	46de      	mov	lr, fp
   16b9c:	4657      	mov	r7, sl
   16b9e:	005c      	lsls	r4, r3, #1
   16ba0:	b5e0      	push	{r5, r6, r7, lr}
   16ba2:	031f      	lsls	r7, r3, #12
   16ba4:	0fdb      	lsrs	r3, r3, #31
   16ba6:	4699      	mov	r9, r3
   16ba8:	4b2a      	ldr	r3, [pc, #168]	; (16c54 <__ledf2+0xc0>)
   16baa:	030e      	lsls	r6, r1, #12
   16bac:	004d      	lsls	r5, r1, #1
   16bae:	0fc9      	lsrs	r1, r1, #31
   16bb0:	4684      	mov	ip, r0
   16bb2:	0b36      	lsrs	r6, r6, #12
   16bb4:	0d6d      	lsrs	r5, r5, #21
   16bb6:	468b      	mov	fp, r1
   16bb8:	4690      	mov	r8, r2
   16bba:	0b3f      	lsrs	r7, r7, #12
   16bbc:	0d64      	lsrs	r4, r4, #21
   16bbe:	429d      	cmp	r5, r3
   16bc0:	d020      	beq.n	16c04 <__ledf2+0x70>
   16bc2:	4b24      	ldr	r3, [pc, #144]	; (16c54 <__ledf2+0xc0>)
   16bc4:	429c      	cmp	r4, r3
   16bc6:	d022      	beq.n	16c0e <__ledf2+0x7a>
   16bc8:	2d00      	cmp	r5, #0
   16bca:	d112      	bne.n	16bf2 <__ledf2+0x5e>
   16bcc:	4330      	orrs	r0, r6
   16bce:	4243      	negs	r3, r0
   16bd0:	4143      	adcs	r3, r0
   16bd2:	b2db      	uxtb	r3, r3
   16bd4:	2c00      	cmp	r4, #0
   16bd6:	d01f      	beq.n	16c18 <__ledf2+0x84>
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d00c      	beq.n	16bf6 <__ledf2+0x62>
   16bdc:	464b      	mov	r3, r9
   16bde:	2001      	movs	r0, #1
   16be0:	3b01      	subs	r3, #1
   16be2:	4303      	orrs	r3, r0
   16be4:	0018      	movs	r0, r3
   16be6:	bc3c      	pop	{r2, r3, r4, r5}
   16be8:	4690      	mov	r8, r2
   16bea:	4699      	mov	r9, r3
   16bec:	46a2      	mov	sl, r4
   16bee:	46ab      	mov	fp, r5
   16bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16bf2:	2c00      	cmp	r4, #0
   16bf4:	d016      	beq.n	16c24 <__ledf2+0x90>
   16bf6:	45cb      	cmp	fp, r9
   16bf8:	d017      	beq.n	16c2a <__ledf2+0x96>
   16bfa:	465b      	mov	r3, fp
   16bfc:	4259      	negs	r1, r3
   16bfe:	2301      	movs	r3, #1
   16c00:	430b      	orrs	r3, r1
   16c02:	e7ef      	b.n	16be4 <__ledf2+0x50>
   16c04:	0031      	movs	r1, r6
   16c06:	2302      	movs	r3, #2
   16c08:	4301      	orrs	r1, r0
   16c0a:	d1eb      	bne.n	16be4 <__ledf2+0x50>
   16c0c:	e7d9      	b.n	16bc2 <__ledf2+0x2e>
   16c0e:	0039      	movs	r1, r7
   16c10:	2302      	movs	r3, #2
   16c12:	4311      	orrs	r1, r2
   16c14:	d1e6      	bne.n	16be4 <__ledf2+0x50>
   16c16:	e7d7      	b.n	16bc8 <__ledf2+0x34>
   16c18:	433a      	orrs	r2, r7
   16c1a:	d1dd      	bne.n	16bd8 <__ledf2+0x44>
   16c1c:	2300      	movs	r3, #0
   16c1e:	2800      	cmp	r0, #0
   16c20:	d0e0      	beq.n	16be4 <__ledf2+0x50>
   16c22:	e7ea      	b.n	16bfa <__ledf2+0x66>
   16c24:	433a      	orrs	r2, r7
   16c26:	d1e6      	bne.n	16bf6 <__ledf2+0x62>
   16c28:	e7e7      	b.n	16bfa <__ledf2+0x66>
   16c2a:	42a5      	cmp	r5, r4
   16c2c:	dce5      	bgt.n	16bfa <__ledf2+0x66>
   16c2e:	db05      	blt.n	16c3c <__ledf2+0xa8>
   16c30:	42be      	cmp	r6, r7
   16c32:	d8e2      	bhi.n	16bfa <__ledf2+0x66>
   16c34:	d007      	beq.n	16c46 <__ledf2+0xb2>
   16c36:	2300      	movs	r3, #0
   16c38:	42be      	cmp	r6, r7
   16c3a:	d2d3      	bcs.n	16be4 <__ledf2+0x50>
   16c3c:	4659      	mov	r1, fp
   16c3e:	2301      	movs	r3, #1
   16c40:	3901      	subs	r1, #1
   16c42:	430b      	orrs	r3, r1
   16c44:	e7ce      	b.n	16be4 <__ledf2+0x50>
   16c46:	45c4      	cmp	ip, r8
   16c48:	d8d7      	bhi.n	16bfa <__ledf2+0x66>
   16c4a:	2300      	movs	r3, #0
   16c4c:	45c4      	cmp	ip, r8
   16c4e:	d3f5      	bcc.n	16c3c <__ledf2+0xa8>
   16c50:	e7c8      	b.n	16be4 <__ledf2+0x50>
   16c52:	46c0      	nop			; (mov r8, r8)
   16c54:	000007ff 	.word	0x000007ff

00016c58 <__aeabi_dmul>:
   16c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c5a:	4657      	mov	r7, sl
   16c5c:	4645      	mov	r5, r8
   16c5e:	46de      	mov	lr, fp
   16c60:	464e      	mov	r6, r9
   16c62:	b5e0      	push	{r5, r6, r7, lr}
   16c64:	030c      	lsls	r4, r1, #12
   16c66:	4698      	mov	r8, r3
   16c68:	004e      	lsls	r6, r1, #1
   16c6a:	0b23      	lsrs	r3, r4, #12
   16c6c:	b087      	sub	sp, #28
   16c6e:	0007      	movs	r7, r0
   16c70:	4692      	mov	sl, r2
   16c72:	469b      	mov	fp, r3
   16c74:	0d76      	lsrs	r6, r6, #21
   16c76:	0fcd      	lsrs	r5, r1, #31
   16c78:	2e00      	cmp	r6, #0
   16c7a:	d06b      	beq.n	16d54 <__aeabi_dmul+0xfc>
   16c7c:	4b6d      	ldr	r3, [pc, #436]	; (16e34 <__aeabi_dmul+0x1dc>)
   16c7e:	429e      	cmp	r6, r3
   16c80:	d035      	beq.n	16cee <__aeabi_dmul+0x96>
   16c82:	2480      	movs	r4, #128	; 0x80
   16c84:	465b      	mov	r3, fp
   16c86:	0f42      	lsrs	r2, r0, #29
   16c88:	0424      	lsls	r4, r4, #16
   16c8a:	00db      	lsls	r3, r3, #3
   16c8c:	4314      	orrs	r4, r2
   16c8e:	431c      	orrs	r4, r3
   16c90:	00c3      	lsls	r3, r0, #3
   16c92:	4699      	mov	r9, r3
   16c94:	4b68      	ldr	r3, [pc, #416]	; (16e38 <__aeabi_dmul+0x1e0>)
   16c96:	46a3      	mov	fp, r4
   16c98:	469c      	mov	ip, r3
   16c9a:	2300      	movs	r3, #0
   16c9c:	2700      	movs	r7, #0
   16c9e:	4466      	add	r6, ip
   16ca0:	9302      	str	r3, [sp, #8]
   16ca2:	4643      	mov	r3, r8
   16ca4:	031c      	lsls	r4, r3, #12
   16ca6:	005a      	lsls	r2, r3, #1
   16ca8:	0fdb      	lsrs	r3, r3, #31
   16caa:	4650      	mov	r0, sl
   16cac:	0b24      	lsrs	r4, r4, #12
   16cae:	0d52      	lsrs	r2, r2, #21
   16cb0:	4698      	mov	r8, r3
   16cb2:	d100      	bne.n	16cb6 <__aeabi_dmul+0x5e>
   16cb4:	e076      	b.n	16da4 <__aeabi_dmul+0x14c>
   16cb6:	4b5f      	ldr	r3, [pc, #380]	; (16e34 <__aeabi_dmul+0x1dc>)
   16cb8:	429a      	cmp	r2, r3
   16cba:	d06d      	beq.n	16d98 <__aeabi_dmul+0x140>
   16cbc:	2380      	movs	r3, #128	; 0x80
   16cbe:	0f41      	lsrs	r1, r0, #29
   16cc0:	041b      	lsls	r3, r3, #16
   16cc2:	430b      	orrs	r3, r1
   16cc4:	495c      	ldr	r1, [pc, #368]	; (16e38 <__aeabi_dmul+0x1e0>)
   16cc6:	00e4      	lsls	r4, r4, #3
   16cc8:	468c      	mov	ip, r1
   16cca:	431c      	orrs	r4, r3
   16ccc:	00c3      	lsls	r3, r0, #3
   16cce:	2000      	movs	r0, #0
   16cd0:	4462      	add	r2, ip
   16cd2:	4641      	mov	r1, r8
   16cd4:	18b6      	adds	r6, r6, r2
   16cd6:	4069      	eors	r1, r5
   16cd8:	1c72      	adds	r2, r6, #1
   16cda:	9101      	str	r1, [sp, #4]
   16cdc:	4694      	mov	ip, r2
   16cde:	4307      	orrs	r7, r0
   16ce0:	2f0f      	cmp	r7, #15
   16ce2:	d900      	bls.n	16ce6 <__aeabi_dmul+0x8e>
   16ce4:	e0b0      	b.n	16e48 <__aeabi_dmul+0x1f0>
   16ce6:	4a55      	ldr	r2, [pc, #340]	; (16e3c <__aeabi_dmul+0x1e4>)
   16ce8:	00bf      	lsls	r7, r7, #2
   16cea:	59d2      	ldr	r2, [r2, r7]
   16cec:	4697      	mov	pc, r2
   16cee:	465b      	mov	r3, fp
   16cf0:	4303      	orrs	r3, r0
   16cf2:	4699      	mov	r9, r3
   16cf4:	d000      	beq.n	16cf8 <__aeabi_dmul+0xa0>
   16cf6:	e087      	b.n	16e08 <__aeabi_dmul+0x1b0>
   16cf8:	2300      	movs	r3, #0
   16cfa:	469b      	mov	fp, r3
   16cfc:	3302      	adds	r3, #2
   16cfe:	2708      	movs	r7, #8
   16d00:	9302      	str	r3, [sp, #8]
   16d02:	e7ce      	b.n	16ca2 <__aeabi_dmul+0x4a>
   16d04:	4642      	mov	r2, r8
   16d06:	9201      	str	r2, [sp, #4]
   16d08:	2802      	cmp	r0, #2
   16d0a:	d067      	beq.n	16ddc <__aeabi_dmul+0x184>
   16d0c:	2803      	cmp	r0, #3
   16d0e:	d100      	bne.n	16d12 <__aeabi_dmul+0xba>
   16d10:	e20e      	b.n	17130 <__aeabi_dmul+0x4d8>
   16d12:	2801      	cmp	r0, #1
   16d14:	d000      	beq.n	16d18 <__aeabi_dmul+0xc0>
   16d16:	e162      	b.n	16fde <__aeabi_dmul+0x386>
   16d18:	2300      	movs	r3, #0
   16d1a:	2400      	movs	r4, #0
   16d1c:	2200      	movs	r2, #0
   16d1e:	4699      	mov	r9, r3
   16d20:	9901      	ldr	r1, [sp, #4]
   16d22:	4001      	ands	r1, r0
   16d24:	b2cd      	uxtb	r5, r1
   16d26:	2100      	movs	r1, #0
   16d28:	0312      	lsls	r2, r2, #12
   16d2a:	0d0b      	lsrs	r3, r1, #20
   16d2c:	0b12      	lsrs	r2, r2, #12
   16d2e:	051b      	lsls	r3, r3, #20
   16d30:	4313      	orrs	r3, r2
   16d32:	4a43      	ldr	r2, [pc, #268]	; (16e40 <__aeabi_dmul+0x1e8>)
   16d34:	0524      	lsls	r4, r4, #20
   16d36:	4013      	ands	r3, r2
   16d38:	431c      	orrs	r4, r3
   16d3a:	0064      	lsls	r4, r4, #1
   16d3c:	07ed      	lsls	r5, r5, #31
   16d3e:	0864      	lsrs	r4, r4, #1
   16d40:	432c      	orrs	r4, r5
   16d42:	4648      	mov	r0, r9
   16d44:	0021      	movs	r1, r4
   16d46:	b007      	add	sp, #28
   16d48:	bc3c      	pop	{r2, r3, r4, r5}
   16d4a:	4690      	mov	r8, r2
   16d4c:	4699      	mov	r9, r3
   16d4e:	46a2      	mov	sl, r4
   16d50:	46ab      	mov	fp, r5
   16d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d54:	4303      	orrs	r3, r0
   16d56:	4699      	mov	r9, r3
   16d58:	d04f      	beq.n	16dfa <__aeabi_dmul+0x1a2>
   16d5a:	465b      	mov	r3, fp
   16d5c:	2b00      	cmp	r3, #0
   16d5e:	d100      	bne.n	16d62 <__aeabi_dmul+0x10a>
   16d60:	e189      	b.n	17076 <__aeabi_dmul+0x41e>
   16d62:	4658      	mov	r0, fp
   16d64:	f000 fe2e 	bl	179c4 <__clzsi2>
   16d68:	0003      	movs	r3, r0
   16d6a:	3b0b      	subs	r3, #11
   16d6c:	2b1c      	cmp	r3, #28
   16d6e:	dd00      	ble.n	16d72 <__aeabi_dmul+0x11a>
   16d70:	e17a      	b.n	17068 <__aeabi_dmul+0x410>
   16d72:	221d      	movs	r2, #29
   16d74:	1ad3      	subs	r3, r2, r3
   16d76:	003a      	movs	r2, r7
   16d78:	0001      	movs	r1, r0
   16d7a:	465c      	mov	r4, fp
   16d7c:	40da      	lsrs	r2, r3
   16d7e:	3908      	subs	r1, #8
   16d80:	408c      	lsls	r4, r1
   16d82:	0013      	movs	r3, r2
   16d84:	408f      	lsls	r7, r1
   16d86:	4323      	orrs	r3, r4
   16d88:	469b      	mov	fp, r3
   16d8a:	46b9      	mov	r9, r7
   16d8c:	2300      	movs	r3, #0
   16d8e:	4e2d      	ldr	r6, [pc, #180]	; (16e44 <__aeabi_dmul+0x1ec>)
   16d90:	2700      	movs	r7, #0
   16d92:	1a36      	subs	r6, r6, r0
   16d94:	9302      	str	r3, [sp, #8]
   16d96:	e784      	b.n	16ca2 <__aeabi_dmul+0x4a>
   16d98:	4653      	mov	r3, sl
   16d9a:	4323      	orrs	r3, r4
   16d9c:	d12a      	bne.n	16df4 <__aeabi_dmul+0x19c>
   16d9e:	2400      	movs	r4, #0
   16da0:	2002      	movs	r0, #2
   16da2:	e796      	b.n	16cd2 <__aeabi_dmul+0x7a>
   16da4:	4653      	mov	r3, sl
   16da6:	4323      	orrs	r3, r4
   16da8:	d020      	beq.n	16dec <__aeabi_dmul+0x194>
   16daa:	2c00      	cmp	r4, #0
   16dac:	d100      	bne.n	16db0 <__aeabi_dmul+0x158>
   16dae:	e157      	b.n	17060 <__aeabi_dmul+0x408>
   16db0:	0020      	movs	r0, r4
   16db2:	f000 fe07 	bl	179c4 <__clzsi2>
   16db6:	0003      	movs	r3, r0
   16db8:	3b0b      	subs	r3, #11
   16dba:	2b1c      	cmp	r3, #28
   16dbc:	dd00      	ble.n	16dc0 <__aeabi_dmul+0x168>
   16dbe:	e149      	b.n	17054 <__aeabi_dmul+0x3fc>
   16dc0:	211d      	movs	r1, #29
   16dc2:	1acb      	subs	r3, r1, r3
   16dc4:	4651      	mov	r1, sl
   16dc6:	0002      	movs	r2, r0
   16dc8:	40d9      	lsrs	r1, r3
   16dca:	4653      	mov	r3, sl
   16dcc:	3a08      	subs	r2, #8
   16dce:	4094      	lsls	r4, r2
   16dd0:	4093      	lsls	r3, r2
   16dd2:	430c      	orrs	r4, r1
   16dd4:	4a1b      	ldr	r2, [pc, #108]	; (16e44 <__aeabi_dmul+0x1ec>)
   16dd6:	1a12      	subs	r2, r2, r0
   16dd8:	2000      	movs	r0, #0
   16dda:	e77a      	b.n	16cd2 <__aeabi_dmul+0x7a>
   16ddc:	2501      	movs	r5, #1
   16dde:	9b01      	ldr	r3, [sp, #4]
   16de0:	4c14      	ldr	r4, [pc, #80]	; (16e34 <__aeabi_dmul+0x1dc>)
   16de2:	401d      	ands	r5, r3
   16de4:	2300      	movs	r3, #0
   16de6:	2200      	movs	r2, #0
   16de8:	4699      	mov	r9, r3
   16dea:	e79c      	b.n	16d26 <__aeabi_dmul+0xce>
   16dec:	2400      	movs	r4, #0
   16dee:	2200      	movs	r2, #0
   16df0:	2001      	movs	r0, #1
   16df2:	e76e      	b.n	16cd2 <__aeabi_dmul+0x7a>
   16df4:	4653      	mov	r3, sl
   16df6:	2003      	movs	r0, #3
   16df8:	e76b      	b.n	16cd2 <__aeabi_dmul+0x7a>
   16dfa:	2300      	movs	r3, #0
   16dfc:	469b      	mov	fp, r3
   16dfe:	3301      	adds	r3, #1
   16e00:	2704      	movs	r7, #4
   16e02:	2600      	movs	r6, #0
   16e04:	9302      	str	r3, [sp, #8]
   16e06:	e74c      	b.n	16ca2 <__aeabi_dmul+0x4a>
   16e08:	2303      	movs	r3, #3
   16e0a:	4681      	mov	r9, r0
   16e0c:	270c      	movs	r7, #12
   16e0e:	9302      	str	r3, [sp, #8]
   16e10:	e747      	b.n	16ca2 <__aeabi_dmul+0x4a>
   16e12:	2280      	movs	r2, #128	; 0x80
   16e14:	2300      	movs	r3, #0
   16e16:	2500      	movs	r5, #0
   16e18:	0312      	lsls	r2, r2, #12
   16e1a:	4699      	mov	r9, r3
   16e1c:	4c05      	ldr	r4, [pc, #20]	; (16e34 <__aeabi_dmul+0x1dc>)
   16e1e:	e782      	b.n	16d26 <__aeabi_dmul+0xce>
   16e20:	465c      	mov	r4, fp
   16e22:	464b      	mov	r3, r9
   16e24:	9802      	ldr	r0, [sp, #8]
   16e26:	e76f      	b.n	16d08 <__aeabi_dmul+0xb0>
   16e28:	465c      	mov	r4, fp
   16e2a:	464b      	mov	r3, r9
   16e2c:	9501      	str	r5, [sp, #4]
   16e2e:	9802      	ldr	r0, [sp, #8]
   16e30:	e76a      	b.n	16d08 <__aeabi_dmul+0xb0>
   16e32:	46c0      	nop			; (mov r8, r8)
   16e34:	000007ff 	.word	0x000007ff
   16e38:	fffffc01 	.word	0xfffffc01
   16e3c:	0001a350 	.word	0x0001a350
   16e40:	800fffff 	.word	0x800fffff
   16e44:	fffffc0d 	.word	0xfffffc0d
   16e48:	464a      	mov	r2, r9
   16e4a:	4649      	mov	r1, r9
   16e4c:	0c17      	lsrs	r7, r2, #16
   16e4e:	0c1a      	lsrs	r2, r3, #16
   16e50:	041b      	lsls	r3, r3, #16
   16e52:	0c1b      	lsrs	r3, r3, #16
   16e54:	0408      	lsls	r0, r1, #16
   16e56:	0019      	movs	r1, r3
   16e58:	0c00      	lsrs	r0, r0, #16
   16e5a:	4341      	muls	r1, r0
   16e5c:	0015      	movs	r5, r2
   16e5e:	4688      	mov	r8, r1
   16e60:	0019      	movs	r1, r3
   16e62:	437d      	muls	r5, r7
   16e64:	4379      	muls	r1, r7
   16e66:	9503      	str	r5, [sp, #12]
   16e68:	4689      	mov	r9, r1
   16e6a:	0029      	movs	r1, r5
   16e6c:	0015      	movs	r5, r2
   16e6e:	4345      	muls	r5, r0
   16e70:	444d      	add	r5, r9
   16e72:	9502      	str	r5, [sp, #8]
   16e74:	4645      	mov	r5, r8
   16e76:	0c2d      	lsrs	r5, r5, #16
   16e78:	46aa      	mov	sl, r5
   16e7a:	9d02      	ldr	r5, [sp, #8]
   16e7c:	4455      	add	r5, sl
   16e7e:	45a9      	cmp	r9, r5
   16e80:	d906      	bls.n	16e90 <__aeabi_dmul+0x238>
   16e82:	468a      	mov	sl, r1
   16e84:	2180      	movs	r1, #128	; 0x80
   16e86:	0249      	lsls	r1, r1, #9
   16e88:	4689      	mov	r9, r1
   16e8a:	44ca      	add	sl, r9
   16e8c:	4651      	mov	r1, sl
   16e8e:	9103      	str	r1, [sp, #12]
   16e90:	0c29      	lsrs	r1, r5, #16
   16e92:	9104      	str	r1, [sp, #16]
   16e94:	4641      	mov	r1, r8
   16e96:	0409      	lsls	r1, r1, #16
   16e98:	042d      	lsls	r5, r5, #16
   16e9a:	0c09      	lsrs	r1, r1, #16
   16e9c:	4688      	mov	r8, r1
   16e9e:	0029      	movs	r1, r5
   16ea0:	0c25      	lsrs	r5, r4, #16
   16ea2:	0424      	lsls	r4, r4, #16
   16ea4:	4441      	add	r1, r8
   16ea6:	0c24      	lsrs	r4, r4, #16
   16ea8:	9105      	str	r1, [sp, #20]
   16eaa:	0021      	movs	r1, r4
   16eac:	4341      	muls	r1, r0
   16eae:	4688      	mov	r8, r1
   16eb0:	0021      	movs	r1, r4
   16eb2:	4379      	muls	r1, r7
   16eb4:	468a      	mov	sl, r1
   16eb6:	4368      	muls	r0, r5
   16eb8:	4641      	mov	r1, r8
   16eba:	4450      	add	r0, sl
   16ebc:	4681      	mov	r9, r0
   16ebe:	0c08      	lsrs	r0, r1, #16
   16ec0:	4448      	add	r0, r9
   16ec2:	436f      	muls	r7, r5
   16ec4:	4582      	cmp	sl, r0
   16ec6:	d903      	bls.n	16ed0 <__aeabi_dmul+0x278>
   16ec8:	2180      	movs	r1, #128	; 0x80
   16eca:	0249      	lsls	r1, r1, #9
   16ecc:	4689      	mov	r9, r1
   16ece:	444f      	add	r7, r9
   16ed0:	0c01      	lsrs	r1, r0, #16
   16ed2:	4689      	mov	r9, r1
   16ed4:	0039      	movs	r1, r7
   16ed6:	4449      	add	r1, r9
   16ed8:	9102      	str	r1, [sp, #8]
   16eda:	4641      	mov	r1, r8
   16edc:	040f      	lsls	r7, r1, #16
   16ede:	9904      	ldr	r1, [sp, #16]
   16ee0:	0c3f      	lsrs	r7, r7, #16
   16ee2:	4688      	mov	r8, r1
   16ee4:	0400      	lsls	r0, r0, #16
   16ee6:	19c0      	adds	r0, r0, r7
   16ee8:	4480      	add	r8, r0
   16eea:	4641      	mov	r1, r8
   16eec:	9104      	str	r1, [sp, #16]
   16eee:	4659      	mov	r1, fp
   16ef0:	0c0f      	lsrs	r7, r1, #16
   16ef2:	0409      	lsls	r1, r1, #16
   16ef4:	0c09      	lsrs	r1, r1, #16
   16ef6:	4688      	mov	r8, r1
   16ef8:	4359      	muls	r1, r3
   16efa:	468a      	mov	sl, r1
   16efc:	0039      	movs	r1, r7
   16efe:	4351      	muls	r1, r2
   16f00:	4689      	mov	r9, r1
   16f02:	4641      	mov	r1, r8
   16f04:	434a      	muls	r2, r1
   16f06:	4651      	mov	r1, sl
   16f08:	0c09      	lsrs	r1, r1, #16
   16f0a:	468b      	mov	fp, r1
   16f0c:	437b      	muls	r3, r7
   16f0e:	18d2      	adds	r2, r2, r3
   16f10:	445a      	add	r2, fp
   16f12:	4293      	cmp	r3, r2
   16f14:	d903      	bls.n	16f1e <__aeabi_dmul+0x2c6>
   16f16:	2380      	movs	r3, #128	; 0x80
   16f18:	025b      	lsls	r3, r3, #9
   16f1a:	469b      	mov	fp, r3
   16f1c:	44d9      	add	r9, fp
   16f1e:	4651      	mov	r1, sl
   16f20:	0409      	lsls	r1, r1, #16
   16f22:	0c09      	lsrs	r1, r1, #16
   16f24:	468a      	mov	sl, r1
   16f26:	4641      	mov	r1, r8
   16f28:	4361      	muls	r1, r4
   16f2a:	437c      	muls	r4, r7
   16f2c:	0c13      	lsrs	r3, r2, #16
   16f2e:	0412      	lsls	r2, r2, #16
   16f30:	444b      	add	r3, r9
   16f32:	4452      	add	r2, sl
   16f34:	46a1      	mov	r9, r4
   16f36:	468a      	mov	sl, r1
   16f38:	003c      	movs	r4, r7
   16f3a:	4641      	mov	r1, r8
   16f3c:	436c      	muls	r4, r5
   16f3e:	434d      	muls	r5, r1
   16f40:	4651      	mov	r1, sl
   16f42:	444d      	add	r5, r9
   16f44:	0c0f      	lsrs	r7, r1, #16
   16f46:	197d      	adds	r5, r7, r5
   16f48:	45a9      	cmp	r9, r5
   16f4a:	d903      	bls.n	16f54 <__aeabi_dmul+0x2fc>
   16f4c:	2180      	movs	r1, #128	; 0x80
   16f4e:	0249      	lsls	r1, r1, #9
   16f50:	4688      	mov	r8, r1
   16f52:	4444      	add	r4, r8
   16f54:	9f04      	ldr	r7, [sp, #16]
   16f56:	9903      	ldr	r1, [sp, #12]
   16f58:	46b8      	mov	r8, r7
   16f5a:	4441      	add	r1, r8
   16f5c:	468b      	mov	fp, r1
   16f5e:	4583      	cmp	fp, r0
   16f60:	4180      	sbcs	r0, r0
   16f62:	4241      	negs	r1, r0
   16f64:	4688      	mov	r8, r1
   16f66:	4651      	mov	r1, sl
   16f68:	0408      	lsls	r0, r1, #16
   16f6a:	042f      	lsls	r7, r5, #16
   16f6c:	0c00      	lsrs	r0, r0, #16
   16f6e:	183f      	adds	r7, r7, r0
   16f70:	4658      	mov	r0, fp
   16f72:	9902      	ldr	r1, [sp, #8]
   16f74:	1810      	adds	r0, r2, r0
   16f76:	4689      	mov	r9, r1
   16f78:	4290      	cmp	r0, r2
   16f7a:	4192      	sbcs	r2, r2
   16f7c:	444f      	add	r7, r9
   16f7e:	46ba      	mov	sl, r7
   16f80:	4252      	negs	r2, r2
   16f82:	4699      	mov	r9, r3
   16f84:	4693      	mov	fp, r2
   16f86:	44c2      	add	sl, r8
   16f88:	44d1      	add	r9, sl
   16f8a:	44cb      	add	fp, r9
   16f8c:	428f      	cmp	r7, r1
   16f8e:	41bf      	sbcs	r7, r7
   16f90:	45c2      	cmp	sl, r8
   16f92:	4189      	sbcs	r1, r1
   16f94:	4599      	cmp	r9, r3
   16f96:	419b      	sbcs	r3, r3
   16f98:	4593      	cmp	fp, r2
   16f9a:	4192      	sbcs	r2, r2
   16f9c:	427f      	negs	r7, r7
   16f9e:	4249      	negs	r1, r1
   16fa0:	0c2d      	lsrs	r5, r5, #16
   16fa2:	4252      	negs	r2, r2
   16fa4:	430f      	orrs	r7, r1
   16fa6:	425b      	negs	r3, r3
   16fa8:	4313      	orrs	r3, r2
   16faa:	197f      	adds	r7, r7, r5
   16fac:	18ff      	adds	r7, r7, r3
   16fae:	465b      	mov	r3, fp
   16fb0:	193c      	adds	r4, r7, r4
   16fb2:	0ddb      	lsrs	r3, r3, #23
   16fb4:	9a05      	ldr	r2, [sp, #20]
   16fb6:	0264      	lsls	r4, r4, #9
   16fb8:	431c      	orrs	r4, r3
   16fba:	0243      	lsls	r3, r0, #9
   16fbc:	4313      	orrs	r3, r2
   16fbe:	1e5d      	subs	r5, r3, #1
   16fc0:	41ab      	sbcs	r3, r5
   16fc2:	465a      	mov	r2, fp
   16fc4:	0dc0      	lsrs	r0, r0, #23
   16fc6:	4303      	orrs	r3, r0
   16fc8:	0252      	lsls	r2, r2, #9
   16fca:	4313      	orrs	r3, r2
   16fcc:	01e2      	lsls	r2, r4, #7
   16fce:	d556      	bpl.n	1707e <__aeabi_dmul+0x426>
   16fd0:	2001      	movs	r0, #1
   16fd2:	085a      	lsrs	r2, r3, #1
   16fd4:	4003      	ands	r3, r0
   16fd6:	4313      	orrs	r3, r2
   16fd8:	07e2      	lsls	r2, r4, #31
   16fda:	4313      	orrs	r3, r2
   16fdc:	0864      	lsrs	r4, r4, #1
   16fde:	485a      	ldr	r0, [pc, #360]	; (17148 <__aeabi_dmul+0x4f0>)
   16fe0:	4460      	add	r0, ip
   16fe2:	2800      	cmp	r0, #0
   16fe4:	dd4d      	ble.n	17082 <__aeabi_dmul+0x42a>
   16fe6:	075a      	lsls	r2, r3, #29
   16fe8:	d009      	beq.n	16ffe <__aeabi_dmul+0x3a6>
   16fea:	220f      	movs	r2, #15
   16fec:	401a      	ands	r2, r3
   16fee:	2a04      	cmp	r2, #4
   16ff0:	d005      	beq.n	16ffe <__aeabi_dmul+0x3a6>
   16ff2:	1d1a      	adds	r2, r3, #4
   16ff4:	429a      	cmp	r2, r3
   16ff6:	419b      	sbcs	r3, r3
   16ff8:	425b      	negs	r3, r3
   16ffa:	18e4      	adds	r4, r4, r3
   16ffc:	0013      	movs	r3, r2
   16ffe:	01e2      	lsls	r2, r4, #7
   17000:	d504      	bpl.n	1700c <__aeabi_dmul+0x3b4>
   17002:	2080      	movs	r0, #128	; 0x80
   17004:	4a51      	ldr	r2, [pc, #324]	; (1714c <__aeabi_dmul+0x4f4>)
   17006:	00c0      	lsls	r0, r0, #3
   17008:	4014      	ands	r4, r2
   1700a:	4460      	add	r0, ip
   1700c:	4a50      	ldr	r2, [pc, #320]	; (17150 <__aeabi_dmul+0x4f8>)
   1700e:	4290      	cmp	r0, r2
   17010:	dd00      	ble.n	17014 <__aeabi_dmul+0x3bc>
   17012:	e6e3      	b.n	16ddc <__aeabi_dmul+0x184>
   17014:	2501      	movs	r5, #1
   17016:	08db      	lsrs	r3, r3, #3
   17018:	0762      	lsls	r2, r4, #29
   1701a:	431a      	orrs	r2, r3
   1701c:	0264      	lsls	r4, r4, #9
   1701e:	9b01      	ldr	r3, [sp, #4]
   17020:	4691      	mov	r9, r2
   17022:	0b22      	lsrs	r2, r4, #12
   17024:	0544      	lsls	r4, r0, #21
   17026:	0d64      	lsrs	r4, r4, #21
   17028:	401d      	ands	r5, r3
   1702a:	e67c      	b.n	16d26 <__aeabi_dmul+0xce>
   1702c:	2280      	movs	r2, #128	; 0x80
   1702e:	4659      	mov	r1, fp
   17030:	0312      	lsls	r2, r2, #12
   17032:	4211      	tst	r1, r2
   17034:	d008      	beq.n	17048 <__aeabi_dmul+0x3f0>
   17036:	4214      	tst	r4, r2
   17038:	d106      	bne.n	17048 <__aeabi_dmul+0x3f0>
   1703a:	4322      	orrs	r2, r4
   1703c:	0312      	lsls	r2, r2, #12
   1703e:	0b12      	lsrs	r2, r2, #12
   17040:	4645      	mov	r5, r8
   17042:	4699      	mov	r9, r3
   17044:	4c43      	ldr	r4, [pc, #268]	; (17154 <__aeabi_dmul+0x4fc>)
   17046:	e66e      	b.n	16d26 <__aeabi_dmul+0xce>
   17048:	465b      	mov	r3, fp
   1704a:	431a      	orrs	r2, r3
   1704c:	0312      	lsls	r2, r2, #12
   1704e:	0b12      	lsrs	r2, r2, #12
   17050:	4c40      	ldr	r4, [pc, #256]	; (17154 <__aeabi_dmul+0x4fc>)
   17052:	e668      	b.n	16d26 <__aeabi_dmul+0xce>
   17054:	0003      	movs	r3, r0
   17056:	4654      	mov	r4, sl
   17058:	3b28      	subs	r3, #40	; 0x28
   1705a:	409c      	lsls	r4, r3
   1705c:	2300      	movs	r3, #0
   1705e:	e6b9      	b.n	16dd4 <__aeabi_dmul+0x17c>
   17060:	f000 fcb0 	bl	179c4 <__clzsi2>
   17064:	3020      	adds	r0, #32
   17066:	e6a6      	b.n	16db6 <__aeabi_dmul+0x15e>
   17068:	0003      	movs	r3, r0
   1706a:	3b28      	subs	r3, #40	; 0x28
   1706c:	409f      	lsls	r7, r3
   1706e:	2300      	movs	r3, #0
   17070:	46bb      	mov	fp, r7
   17072:	4699      	mov	r9, r3
   17074:	e68a      	b.n	16d8c <__aeabi_dmul+0x134>
   17076:	f000 fca5 	bl	179c4 <__clzsi2>
   1707a:	3020      	adds	r0, #32
   1707c:	e674      	b.n	16d68 <__aeabi_dmul+0x110>
   1707e:	46b4      	mov	ip, r6
   17080:	e7ad      	b.n	16fde <__aeabi_dmul+0x386>
   17082:	2501      	movs	r5, #1
   17084:	1a2a      	subs	r2, r5, r0
   17086:	2a38      	cmp	r2, #56	; 0x38
   17088:	dd06      	ble.n	17098 <__aeabi_dmul+0x440>
   1708a:	9b01      	ldr	r3, [sp, #4]
   1708c:	2400      	movs	r4, #0
   1708e:	401d      	ands	r5, r3
   17090:	2300      	movs	r3, #0
   17092:	2200      	movs	r2, #0
   17094:	4699      	mov	r9, r3
   17096:	e646      	b.n	16d26 <__aeabi_dmul+0xce>
   17098:	2a1f      	cmp	r2, #31
   1709a:	dc21      	bgt.n	170e0 <__aeabi_dmul+0x488>
   1709c:	2520      	movs	r5, #32
   1709e:	0020      	movs	r0, r4
   170a0:	1aad      	subs	r5, r5, r2
   170a2:	001e      	movs	r6, r3
   170a4:	40ab      	lsls	r3, r5
   170a6:	40a8      	lsls	r0, r5
   170a8:	40d6      	lsrs	r6, r2
   170aa:	1e5d      	subs	r5, r3, #1
   170ac:	41ab      	sbcs	r3, r5
   170ae:	4330      	orrs	r0, r6
   170b0:	4318      	orrs	r0, r3
   170b2:	40d4      	lsrs	r4, r2
   170b4:	0743      	lsls	r3, r0, #29
   170b6:	d009      	beq.n	170cc <__aeabi_dmul+0x474>
   170b8:	230f      	movs	r3, #15
   170ba:	4003      	ands	r3, r0
   170bc:	2b04      	cmp	r3, #4
   170be:	d005      	beq.n	170cc <__aeabi_dmul+0x474>
   170c0:	0003      	movs	r3, r0
   170c2:	1d18      	adds	r0, r3, #4
   170c4:	4298      	cmp	r0, r3
   170c6:	419b      	sbcs	r3, r3
   170c8:	425b      	negs	r3, r3
   170ca:	18e4      	adds	r4, r4, r3
   170cc:	0223      	lsls	r3, r4, #8
   170ce:	d521      	bpl.n	17114 <__aeabi_dmul+0x4bc>
   170d0:	2501      	movs	r5, #1
   170d2:	9b01      	ldr	r3, [sp, #4]
   170d4:	2401      	movs	r4, #1
   170d6:	401d      	ands	r5, r3
   170d8:	2300      	movs	r3, #0
   170da:	2200      	movs	r2, #0
   170dc:	4699      	mov	r9, r3
   170de:	e622      	b.n	16d26 <__aeabi_dmul+0xce>
   170e0:	251f      	movs	r5, #31
   170e2:	0021      	movs	r1, r4
   170e4:	426d      	negs	r5, r5
   170e6:	1a28      	subs	r0, r5, r0
   170e8:	40c1      	lsrs	r1, r0
   170ea:	0008      	movs	r0, r1
   170ec:	2a20      	cmp	r2, #32
   170ee:	d01d      	beq.n	1712c <__aeabi_dmul+0x4d4>
   170f0:	355f      	adds	r5, #95	; 0x5f
   170f2:	1aaa      	subs	r2, r5, r2
   170f4:	4094      	lsls	r4, r2
   170f6:	4323      	orrs	r3, r4
   170f8:	1e5c      	subs	r4, r3, #1
   170fa:	41a3      	sbcs	r3, r4
   170fc:	2507      	movs	r5, #7
   170fe:	4303      	orrs	r3, r0
   17100:	401d      	ands	r5, r3
   17102:	2200      	movs	r2, #0
   17104:	2d00      	cmp	r5, #0
   17106:	d009      	beq.n	1711c <__aeabi_dmul+0x4c4>
   17108:	220f      	movs	r2, #15
   1710a:	2400      	movs	r4, #0
   1710c:	401a      	ands	r2, r3
   1710e:	0018      	movs	r0, r3
   17110:	2a04      	cmp	r2, #4
   17112:	d1d6      	bne.n	170c2 <__aeabi_dmul+0x46a>
   17114:	0003      	movs	r3, r0
   17116:	0765      	lsls	r5, r4, #29
   17118:	0264      	lsls	r4, r4, #9
   1711a:	0b22      	lsrs	r2, r4, #12
   1711c:	08db      	lsrs	r3, r3, #3
   1711e:	432b      	orrs	r3, r5
   17120:	2501      	movs	r5, #1
   17122:	4699      	mov	r9, r3
   17124:	9b01      	ldr	r3, [sp, #4]
   17126:	2400      	movs	r4, #0
   17128:	401d      	ands	r5, r3
   1712a:	e5fc      	b.n	16d26 <__aeabi_dmul+0xce>
   1712c:	2400      	movs	r4, #0
   1712e:	e7e2      	b.n	170f6 <__aeabi_dmul+0x49e>
   17130:	2280      	movs	r2, #128	; 0x80
   17132:	2501      	movs	r5, #1
   17134:	0312      	lsls	r2, r2, #12
   17136:	4322      	orrs	r2, r4
   17138:	9901      	ldr	r1, [sp, #4]
   1713a:	0312      	lsls	r2, r2, #12
   1713c:	0b12      	lsrs	r2, r2, #12
   1713e:	400d      	ands	r5, r1
   17140:	4699      	mov	r9, r3
   17142:	4c04      	ldr	r4, [pc, #16]	; (17154 <__aeabi_dmul+0x4fc>)
   17144:	e5ef      	b.n	16d26 <__aeabi_dmul+0xce>
   17146:	46c0      	nop			; (mov r8, r8)
   17148:	000003ff 	.word	0x000003ff
   1714c:	feffffff 	.word	0xfeffffff
   17150:	000007fe 	.word	0x000007fe
   17154:	000007ff 	.word	0x000007ff

00017158 <__aeabi_dsub>:
   17158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1715a:	4646      	mov	r6, r8
   1715c:	46d6      	mov	lr, sl
   1715e:	464f      	mov	r7, r9
   17160:	030c      	lsls	r4, r1, #12
   17162:	b5c0      	push	{r6, r7, lr}
   17164:	0fcd      	lsrs	r5, r1, #31
   17166:	004e      	lsls	r6, r1, #1
   17168:	0a61      	lsrs	r1, r4, #9
   1716a:	0f44      	lsrs	r4, r0, #29
   1716c:	430c      	orrs	r4, r1
   1716e:	00c1      	lsls	r1, r0, #3
   17170:	0058      	lsls	r0, r3, #1
   17172:	0d40      	lsrs	r0, r0, #21
   17174:	4684      	mov	ip, r0
   17176:	468a      	mov	sl, r1
   17178:	000f      	movs	r7, r1
   1717a:	0319      	lsls	r1, r3, #12
   1717c:	0f50      	lsrs	r0, r2, #29
   1717e:	0a49      	lsrs	r1, r1, #9
   17180:	4301      	orrs	r1, r0
   17182:	48c6      	ldr	r0, [pc, #792]	; (1749c <__aeabi_dsub+0x344>)
   17184:	0d76      	lsrs	r6, r6, #21
   17186:	46a8      	mov	r8, r5
   17188:	0fdb      	lsrs	r3, r3, #31
   1718a:	00d2      	lsls	r2, r2, #3
   1718c:	4584      	cmp	ip, r0
   1718e:	d100      	bne.n	17192 <__aeabi_dsub+0x3a>
   17190:	e0d8      	b.n	17344 <__aeabi_dsub+0x1ec>
   17192:	2001      	movs	r0, #1
   17194:	4043      	eors	r3, r0
   17196:	42ab      	cmp	r3, r5
   17198:	d100      	bne.n	1719c <__aeabi_dsub+0x44>
   1719a:	e0a6      	b.n	172ea <__aeabi_dsub+0x192>
   1719c:	4660      	mov	r0, ip
   1719e:	1a35      	subs	r5, r6, r0
   171a0:	2d00      	cmp	r5, #0
   171a2:	dc00      	bgt.n	171a6 <__aeabi_dsub+0x4e>
   171a4:	e105      	b.n	173b2 <__aeabi_dsub+0x25a>
   171a6:	2800      	cmp	r0, #0
   171a8:	d110      	bne.n	171cc <__aeabi_dsub+0x74>
   171aa:	000b      	movs	r3, r1
   171ac:	4313      	orrs	r3, r2
   171ae:	d100      	bne.n	171b2 <__aeabi_dsub+0x5a>
   171b0:	e0d7      	b.n	17362 <__aeabi_dsub+0x20a>
   171b2:	1e6b      	subs	r3, r5, #1
   171b4:	2b00      	cmp	r3, #0
   171b6:	d000      	beq.n	171ba <__aeabi_dsub+0x62>
   171b8:	e14b      	b.n	17452 <__aeabi_dsub+0x2fa>
   171ba:	4653      	mov	r3, sl
   171bc:	1a9f      	subs	r7, r3, r2
   171be:	45ba      	cmp	sl, r7
   171c0:	4180      	sbcs	r0, r0
   171c2:	1a64      	subs	r4, r4, r1
   171c4:	4240      	negs	r0, r0
   171c6:	1a24      	subs	r4, r4, r0
   171c8:	2601      	movs	r6, #1
   171ca:	e01e      	b.n	1720a <__aeabi_dsub+0xb2>
   171cc:	4bb3      	ldr	r3, [pc, #716]	; (1749c <__aeabi_dsub+0x344>)
   171ce:	429e      	cmp	r6, r3
   171d0:	d048      	beq.n	17264 <__aeabi_dsub+0x10c>
   171d2:	2380      	movs	r3, #128	; 0x80
   171d4:	041b      	lsls	r3, r3, #16
   171d6:	4319      	orrs	r1, r3
   171d8:	2d38      	cmp	r5, #56	; 0x38
   171da:	dd00      	ble.n	171de <__aeabi_dsub+0x86>
   171dc:	e119      	b.n	17412 <__aeabi_dsub+0x2ba>
   171de:	2d1f      	cmp	r5, #31
   171e0:	dd00      	ble.n	171e4 <__aeabi_dsub+0x8c>
   171e2:	e14c      	b.n	1747e <__aeabi_dsub+0x326>
   171e4:	2320      	movs	r3, #32
   171e6:	000f      	movs	r7, r1
   171e8:	1b5b      	subs	r3, r3, r5
   171ea:	0010      	movs	r0, r2
   171ec:	409a      	lsls	r2, r3
   171ee:	409f      	lsls	r7, r3
   171f0:	40e8      	lsrs	r0, r5
   171f2:	1e53      	subs	r3, r2, #1
   171f4:	419a      	sbcs	r2, r3
   171f6:	40e9      	lsrs	r1, r5
   171f8:	4307      	orrs	r7, r0
   171fa:	4317      	orrs	r7, r2
   171fc:	4653      	mov	r3, sl
   171fe:	1bdf      	subs	r7, r3, r7
   17200:	1a61      	subs	r1, r4, r1
   17202:	45ba      	cmp	sl, r7
   17204:	41a4      	sbcs	r4, r4
   17206:	4264      	negs	r4, r4
   17208:	1b0c      	subs	r4, r1, r4
   1720a:	0223      	lsls	r3, r4, #8
   1720c:	d400      	bmi.n	17210 <__aeabi_dsub+0xb8>
   1720e:	e0c5      	b.n	1739c <__aeabi_dsub+0x244>
   17210:	0264      	lsls	r4, r4, #9
   17212:	0a65      	lsrs	r5, r4, #9
   17214:	2d00      	cmp	r5, #0
   17216:	d100      	bne.n	1721a <__aeabi_dsub+0xc2>
   17218:	e0f6      	b.n	17408 <__aeabi_dsub+0x2b0>
   1721a:	0028      	movs	r0, r5
   1721c:	f000 fbd2 	bl	179c4 <__clzsi2>
   17220:	0003      	movs	r3, r0
   17222:	3b08      	subs	r3, #8
   17224:	2b1f      	cmp	r3, #31
   17226:	dd00      	ble.n	1722a <__aeabi_dsub+0xd2>
   17228:	e0e9      	b.n	173fe <__aeabi_dsub+0x2a6>
   1722a:	2220      	movs	r2, #32
   1722c:	003c      	movs	r4, r7
   1722e:	1ad2      	subs	r2, r2, r3
   17230:	409d      	lsls	r5, r3
   17232:	40d4      	lsrs	r4, r2
   17234:	409f      	lsls	r7, r3
   17236:	4325      	orrs	r5, r4
   17238:	429e      	cmp	r6, r3
   1723a:	dd00      	ble.n	1723e <__aeabi_dsub+0xe6>
   1723c:	e0db      	b.n	173f6 <__aeabi_dsub+0x29e>
   1723e:	1b9e      	subs	r6, r3, r6
   17240:	1c73      	adds	r3, r6, #1
   17242:	2b1f      	cmp	r3, #31
   17244:	dd00      	ble.n	17248 <__aeabi_dsub+0xf0>
   17246:	e10a      	b.n	1745e <__aeabi_dsub+0x306>
   17248:	2220      	movs	r2, #32
   1724a:	0038      	movs	r0, r7
   1724c:	1ad2      	subs	r2, r2, r3
   1724e:	0029      	movs	r1, r5
   17250:	4097      	lsls	r7, r2
   17252:	002c      	movs	r4, r5
   17254:	4091      	lsls	r1, r2
   17256:	40d8      	lsrs	r0, r3
   17258:	1e7a      	subs	r2, r7, #1
   1725a:	4197      	sbcs	r7, r2
   1725c:	40dc      	lsrs	r4, r3
   1725e:	2600      	movs	r6, #0
   17260:	4301      	orrs	r1, r0
   17262:	430f      	orrs	r7, r1
   17264:	077b      	lsls	r3, r7, #29
   17266:	d009      	beq.n	1727c <__aeabi_dsub+0x124>
   17268:	230f      	movs	r3, #15
   1726a:	403b      	ands	r3, r7
   1726c:	2b04      	cmp	r3, #4
   1726e:	d005      	beq.n	1727c <__aeabi_dsub+0x124>
   17270:	1d3b      	adds	r3, r7, #4
   17272:	42bb      	cmp	r3, r7
   17274:	41bf      	sbcs	r7, r7
   17276:	427f      	negs	r7, r7
   17278:	19e4      	adds	r4, r4, r7
   1727a:	001f      	movs	r7, r3
   1727c:	0223      	lsls	r3, r4, #8
   1727e:	d525      	bpl.n	172cc <__aeabi_dsub+0x174>
   17280:	4b86      	ldr	r3, [pc, #536]	; (1749c <__aeabi_dsub+0x344>)
   17282:	3601      	adds	r6, #1
   17284:	429e      	cmp	r6, r3
   17286:	d100      	bne.n	1728a <__aeabi_dsub+0x132>
   17288:	e0af      	b.n	173ea <__aeabi_dsub+0x292>
   1728a:	4b85      	ldr	r3, [pc, #532]	; (174a0 <__aeabi_dsub+0x348>)
   1728c:	2501      	movs	r5, #1
   1728e:	401c      	ands	r4, r3
   17290:	4643      	mov	r3, r8
   17292:	0762      	lsls	r2, r4, #29
   17294:	08ff      	lsrs	r7, r7, #3
   17296:	0264      	lsls	r4, r4, #9
   17298:	0576      	lsls	r6, r6, #21
   1729a:	4317      	orrs	r7, r2
   1729c:	0b24      	lsrs	r4, r4, #12
   1729e:	0d76      	lsrs	r6, r6, #21
   172a0:	401d      	ands	r5, r3
   172a2:	2100      	movs	r1, #0
   172a4:	0324      	lsls	r4, r4, #12
   172a6:	0b23      	lsrs	r3, r4, #12
   172a8:	0d0c      	lsrs	r4, r1, #20
   172aa:	4a7e      	ldr	r2, [pc, #504]	; (174a4 <__aeabi_dsub+0x34c>)
   172ac:	0524      	lsls	r4, r4, #20
   172ae:	431c      	orrs	r4, r3
   172b0:	4014      	ands	r4, r2
   172b2:	0533      	lsls	r3, r6, #20
   172b4:	4323      	orrs	r3, r4
   172b6:	005b      	lsls	r3, r3, #1
   172b8:	07ed      	lsls	r5, r5, #31
   172ba:	085b      	lsrs	r3, r3, #1
   172bc:	432b      	orrs	r3, r5
   172be:	0038      	movs	r0, r7
   172c0:	0019      	movs	r1, r3
   172c2:	bc1c      	pop	{r2, r3, r4}
   172c4:	4690      	mov	r8, r2
   172c6:	4699      	mov	r9, r3
   172c8:	46a2      	mov	sl, r4
   172ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172cc:	2501      	movs	r5, #1
   172ce:	4643      	mov	r3, r8
   172d0:	0762      	lsls	r2, r4, #29
   172d2:	08ff      	lsrs	r7, r7, #3
   172d4:	4317      	orrs	r7, r2
   172d6:	08e4      	lsrs	r4, r4, #3
   172d8:	401d      	ands	r5, r3
   172da:	4b70      	ldr	r3, [pc, #448]	; (1749c <__aeabi_dsub+0x344>)
   172dc:	429e      	cmp	r6, r3
   172de:	d036      	beq.n	1734e <__aeabi_dsub+0x1f6>
   172e0:	0324      	lsls	r4, r4, #12
   172e2:	0576      	lsls	r6, r6, #21
   172e4:	0b24      	lsrs	r4, r4, #12
   172e6:	0d76      	lsrs	r6, r6, #21
   172e8:	e7db      	b.n	172a2 <__aeabi_dsub+0x14a>
   172ea:	4663      	mov	r3, ip
   172ec:	1af3      	subs	r3, r6, r3
   172ee:	2b00      	cmp	r3, #0
   172f0:	dc00      	bgt.n	172f4 <__aeabi_dsub+0x19c>
   172f2:	e094      	b.n	1741e <__aeabi_dsub+0x2c6>
   172f4:	4660      	mov	r0, ip
   172f6:	2800      	cmp	r0, #0
   172f8:	d035      	beq.n	17366 <__aeabi_dsub+0x20e>
   172fa:	4868      	ldr	r0, [pc, #416]	; (1749c <__aeabi_dsub+0x344>)
   172fc:	4286      	cmp	r6, r0
   172fe:	d0b1      	beq.n	17264 <__aeabi_dsub+0x10c>
   17300:	2780      	movs	r7, #128	; 0x80
   17302:	043f      	lsls	r7, r7, #16
   17304:	4339      	orrs	r1, r7
   17306:	2b38      	cmp	r3, #56	; 0x38
   17308:	dc00      	bgt.n	1730c <__aeabi_dsub+0x1b4>
   1730a:	e0fd      	b.n	17508 <__aeabi_dsub+0x3b0>
   1730c:	430a      	orrs	r2, r1
   1730e:	0017      	movs	r7, r2
   17310:	2100      	movs	r1, #0
   17312:	1e7a      	subs	r2, r7, #1
   17314:	4197      	sbcs	r7, r2
   17316:	4457      	add	r7, sl
   17318:	4557      	cmp	r7, sl
   1731a:	4180      	sbcs	r0, r0
   1731c:	1909      	adds	r1, r1, r4
   1731e:	4244      	negs	r4, r0
   17320:	190c      	adds	r4, r1, r4
   17322:	0223      	lsls	r3, r4, #8
   17324:	d53a      	bpl.n	1739c <__aeabi_dsub+0x244>
   17326:	4b5d      	ldr	r3, [pc, #372]	; (1749c <__aeabi_dsub+0x344>)
   17328:	3601      	adds	r6, #1
   1732a:	429e      	cmp	r6, r3
   1732c:	d100      	bne.n	17330 <__aeabi_dsub+0x1d8>
   1732e:	e14b      	b.n	175c8 <__aeabi_dsub+0x470>
   17330:	2201      	movs	r2, #1
   17332:	4b5b      	ldr	r3, [pc, #364]	; (174a0 <__aeabi_dsub+0x348>)
   17334:	401c      	ands	r4, r3
   17336:	087b      	lsrs	r3, r7, #1
   17338:	4017      	ands	r7, r2
   1733a:	431f      	orrs	r7, r3
   1733c:	07e2      	lsls	r2, r4, #31
   1733e:	4317      	orrs	r7, r2
   17340:	0864      	lsrs	r4, r4, #1
   17342:	e78f      	b.n	17264 <__aeabi_dsub+0x10c>
   17344:	0008      	movs	r0, r1
   17346:	4310      	orrs	r0, r2
   17348:	d000      	beq.n	1734c <__aeabi_dsub+0x1f4>
   1734a:	e724      	b.n	17196 <__aeabi_dsub+0x3e>
   1734c:	e721      	b.n	17192 <__aeabi_dsub+0x3a>
   1734e:	0023      	movs	r3, r4
   17350:	433b      	orrs	r3, r7
   17352:	d100      	bne.n	17356 <__aeabi_dsub+0x1fe>
   17354:	e1b9      	b.n	176ca <__aeabi_dsub+0x572>
   17356:	2280      	movs	r2, #128	; 0x80
   17358:	0312      	lsls	r2, r2, #12
   1735a:	4314      	orrs	r4, r2
   1735c:	0324      	lsls	r4, r4, #12
   1735e:	0b24      	lsrs	r4, r4, #12
   17360:	e79f      	b.n	172a2 <__aeabi_dsub+0x14a>
   17362:	002e      	movs	r6, r5
   17364:	e77e      	b.n	17264 <__aeabi_dsub+0x10c>
   17366:	0008      	movs	r0, r1
   17368:	4310      	orrs	r0, r2
   1736a:	d100      	bne.n	1736e <__aeabi_dsub+0x216>
   1736c:	e0ca      	b.n	17504 <__aeabi_dsub+0x3ac>
   1736e:	1e58      	subs	r0, r3, #1
   17370:	4684      	mov	ip, r0
   17372:	2800      	cmp	r0, #0
   17374:	d000      	beq.n	17378 <__aeabi_dsub+0x220>
   17376:	e0e7      	b.n	17548 <__aeabi_dsub+0x3f0>
   17378:	4452      	add	r2, sl
   1737a:	4552      	cmp	r2, sl
   1737c:	4180      	sbcs	r0, r0
   1737e:	1864      	adds	r4, r4, r1
   17380:	4240      	negs	r0, r0
   17382:	1824      	adds	r4, r4, r0
   17384:	0017      	movs	r7, r2
   17386:	2601      	movs	r6, #1
   17388:	0223      	lsls	r3, r4, #8
   1738a:	d507      	bpl.n	1739c <__aeabi_dsub+0x244>
   1738c:	2602      	movs	r6, #2
   1738e:	e7cf      	b.n	17330 <__aeabi_dsub+0x1d8>
   17390:	4664      	mov	r4, ip
   17392:	432c      	orrs	r4, r5
   17394:	d100      	bne.n	17398 <__aeabi_dsub+0x240>
   17396:	e1b3      	b.n	17700 <__aeabi_dsub+0x5a8>
   17398:	002c      	movs	r4, r5
   1739a:	4667      	mov	r7, ip
   1739c:	077b      	lsls	r3, r7, #29
   1739e:	d000      	beq.n	173a2 <__aeabi_dsub+0x24a>
   173a0:	e762      	b.n	17268 <__aeabi_dsub+0x110>
   173a2:	0763      	lsls	r3, r4, #29
   173a4:	08ff      	lsrs	r7, r7, #3
   173a6:	431f      	orrs	r7, r3
   173a8:	2501      	movs	r5, #1
   173aa:	4643      	mov	r3, r8
   173ac:	08e4      	lsrs	r4, r4, #3
   173ae:	401d      	ands	r5, r3
   173b0:	e793      	b.n	172da <__aeabi_dsub+0x182>
   173b2:	2d00      	cmp	r5, #0
   173b4:	d178      	bne.n	174a8 <__aeabi_dsub+0x350>
   173b6:	1c75      	adds	r5, r6, #1
   173b8:	056d      	lsls	r5, r5, #21
   173ba:	0d6d      	lsrs	r5, r5, #21
   173bc:	2d01      	cmp	r5, #1
   173be:	dc00      	bgt.n	173c2 <__aeabi_dsub+0x26a>
   173c0:	e0f2      	b.n	175a8 <__aeabi_dsub+0x450>
   173c2:	4650      	mov	r0, sl
   173c4:	1a80      	subs	r0, r0, r2
   173c6:	4582      	cmp	sl, r0
   173c8:	41bf      	sbcs	r7, r7
   173ca:	1a65      	subs	r5, r4, r1
   173cc:	427f      	negs	r7, r7
   173ce:	1bed      	subs	r5, r5, r7
   173d0:	4684      	mov	ip, r0
   173d2:	0228      	lsls	r0, r5, #8
   173d4:	d400      	bmi.n	173d8 <__aeabi_dsub+0x280>
   173d6:	e08c      	b.n	174f2 <__aeabi_dsub+0x39a>
   173d8:	4650      	mov	r0, sl
   173da:	1a17      	subs	r7, r2, r0
   173dc:	42ba      	cmp	r2, r7
   173de:	4192      	sbcs	r2, r2
   173e0:	1b0c      	subs	r4, r1, r4
   173e2:	4255      	negs	r5, r2
   173e4:	1b65      	subs	r5, r4, r5
   173e6:	4698      	mov	r8, r3
   173e8:	e714      	b.n	17214 <__aeabi_dsub+0xbc>
   173ea:	2501      	movs	r5, #1
   173ec:	4643      	mov	r3, r8
   173ee:	2400      	movs	r4, #0
   173f0:	401d      	ands	r5, r3
   173f2:	2700      	movs	r7, #0
   173f4:	e755      	b.n	172a2 <__aeabi_dsub+0x14a>
   173f6:	4c2a      	ldr	r4, [pc, #168]	; (174a0 <__aeabi_dsub+0x348>)
   173f8:	1af6      	subs	r6, r6, r3
   173fa:	402c      	ands	r4, r5
   173fc:	e732      	b.n	17264 <__aeabi_dsub+0x10c>
   173fe:	003d      	movs	r5, r7
   17400:	3828      	subs	r0, #40	; 0x28
   17402:	4085      	lsls	r5, r0
   17404:	2700      	movs	r7, #0
   17406:	e717      	b.n	17238 <__aeabi_dsub+0xe0>
   17408:	0038      	movs	r0, r7
   1740a:	f000 fadb 	bl	179c4 <__clzsi2>
   1740e:	3020      	adds	r0, #32
   17410:	e706      	b.n	17220 <__aeabi_dsub+0xc8>
   17412:	430a      	orrs	r2, r1
   17414:	0017      	movs	r7, r2
   17416:	2100      	movs	r1, #0
   17418:	1e7a      	subs	r2, r7, #1
   1741a:	4197      	sbcs	r7, r2
   1741c:	e6ee      	b.n	171fc <__aeabi_dsub+0xa4>
   1741e:	2b00      	cmp	r3, #0
   17420:	d000      	beq.n	17424 <__aeabi_dsub+0x2cc>
   17422:	e0e5      	b.n	175f0 <__aeabi_dsub+0x498>
   17424:	1c73      	adds	r3, r6, #1
   17426:	469c      	mov	ip, r3
   17428:	055b      	lsls	r3, r3, #21
   1742a:	0d5b      	lsrs	r3, r3, #21
   1742c:	2b01      	cmp	r3, #1
   1742e:	dc00      	bgt.n	17432 <__aeabi_dsub+0x2da>
   17430:	e09f      	b.n	17572 <__aeabi_dsub+0x41a>
   17432:	4b1a      	ldr	r3, [pc, #104]	; (1749c <__aeabi_dsub+0x344>)
   17434:	459c      	cmp	ip, r3
   17436:	d100      	bne.n	1743a <__aeabi_dsub+0x2e2>
   17438:	e0c5      	b.n	175c6 <__aeabi_dsub+0x46e>
   1743a:	4452      	add	r2, sl
   1743c:	4552      	cmp	r2, sl
   1743e:	4180      	sbcs	r0, r0
   17440:	1864      	adds	r4, r4, r1
   17442:	4240      	negs	r0, r0
   17444:	1824      	adds	r4, r4, r0
   17446:	07e7      	lsls	r7, r4, #31
   17448:	0852      	lsrs	r2, r2, #1
   1744a:	4317      	orrs	r7, r2
   1744c:	0864      	lsrs	r4, r4, #1
   1744e:	4666      	mov	r6, ip
   17450:	e708      	b.n	17264 <__aeabi_dsub+0x10c>
   17452:	4812      	ldr	r0, [pc, #72]	; (1749c <__aeabi_dsub+0x344>)
   17454:	4285      	cmp	r5, r0
   17456:	d100      	bne.n	1745a <__aeabi_dsub+0x302>
   17458:	e085      	b.n	17566 <__aeabi_dsub+0x40e>
   1745a:	001d      	movs	r5, r3
   1745c:	e6bc      	b.n	171d8 <__aeabi_dsub+0x80>
   1745e:	0029      	movs	r1, r5
   17460:	3e1f      	subs	r6, #31
   17462:	40f1      	lsrs	r1, r6
   17464:	2b20      	cmp	r3, #32
   17466:	d100      	bne.n	1746a <__aeabi_dsub+0x312>
   17468:	e07f      	b.n	1756a <__aeabi_dsub+0x412>
   1746a:	2240      	movs	r2, #64	; 0x40
   1746c:	1ad3      	subs	r3, r2, r3
   1746e:	409d      	lsls	r5, r3
   17470:	432f      	orrs	r7, r5
   17472:	1e7d      	subs	r5, r7, #1
   17474:	41af      	sbcs	r7, r5
   17476:	2400      	movs	r4, #0
   17478:	430f      	orrs	r7, r1
   1747a:	2600      	movs	r6, #0
   1747c:	e78e      	b.n	1739c <__aeabi_dsub+0x244>
   1747e:	002b      	movs	r3, r5
   17480:	000f      	movs	r7, r1
   17482:	3b20      	subs	r3, #32
   17484:	40df      	lsrs	r7, r3
   17486:	2d20      	cmp	r5, #32
   17488:	d071      	beq.n	1756e <__aeabi_dsub+0x416>
   1748a:	2340      	movs	r3, #64	; 0x40
   1748c:	1b5d      	subs	r5, r3, r5
   1748e:	40a9      	lsls	r1, r5
   17490:	430a      	orrs	r2, r1
   17492:	1e51      	subs	r1, r2, #1
   17494:	418a      	sbcs	r2, r1
   17496:	2100      	movs	r1, #0
   17498:	4317      	orrs	r7, r2
   1749a:	e6af      	b.n	171fc <__aeabi_dsub+0xa4>
   1749c:	000007ff 	.word	0x000007ff
   174a0:	ff7fffff 	.word	0xff7fffff
   174a4:	800fffff 	.word	0x800fffff
   174a8:	2e00      	cmp	r6, #0
   174aa:	d03e      	beq.n	1752a <__aeabi_dsub+0x3d2>
   174ac:	4eb3      	ldr	r6, [pc, #716]	; (1777c <__aeabi_dsub+0x624>)
   174ae:	45b4      	cmp	ip, r6
   174b0:	d045      	beq.n	1753e <__aeabi_dsub+0x3e6>
   174b2:	2680      	movs	r6, #128	; 0x80
   174b4:	0436      	lsls	r6, r6, #16
   174b6:	426d      	negs	r5, r5
   174b8:	4334      	orrs	r4, r6
   174ba:	2d38      	cmp	r5, #56	; 0x38
   174bc:	dd00      	ble.n	174c0 <__aeabi_dsub+0x368>
   174be:	e0a8      	b.n	17612 <__aeabi_dsub+0x4ba>
   174c0:	2d1f      	cmp	r5, #31
   174c2:	dd00      	ble.n	174c6 <__aeabi_dsub+0x36e>
   174c4:	e11f      	b.n	17706 <__aeabi_dsub+0x5ae>
   174c6:	2620      	movs	r6, #32
   174c8:	0027      	movs	r7, r4
   174ca:	4650      	mov	r0, sl
   174cc:	1b76      	subs	r6, r6, r5
   174ce:	40b7      	lsls	r7, r6
   174d0:	40e8      	lsrs	r0, r5
   174d2:	4307      	orrs	r7, r0
   174d4:	4650      	mov	r0, sl
   174d6:	40b0      	lsls	r0, r6
   174d8:	1e46      	subs	r6, r0, #1
   174da:	41b0      	sbcs	r0, r6
   174dc:	40ec      	lsrs	r4, r5
   174de:	4338      	orrs	r0, r7
   174e0:	1a17      	subs	r7, r2, r0
   174e2:	42ba      	cmp	r2, r7
   174e4:	4192      	sbcs	r2, r2
   174e6:	1b0c      	subs	r4, r1, r4
   174e8:	4252      	negs	r2, r2
   174ea:	1aa4      	subs	r4, r4, r2
   174ec:	4666      	mov	r6, ip
   174ee:	4698      	mov	r8, r3
   174f0:	e68b      	b.n	1720a <__aeabi_dsub+0xb2>
   174f2:	4664      	mov	r4, ip
   174f4:	4667      	mov	r7, ip
   174f6:	432c      	orrs	r4, r5
   174f8:	d000      	beq.n	174fc <__aeabi_dsub+0x3a4>
   174fa:	e68b      	b.n	17214 <__aeabi_dsub+0xbc>
   174fc:	2500      	movs	r5, #0
   174fe:	2600      	movs	r6, #0
   17500:	2700      	movs	r7, #0
   17502:	e6ea      	b.n	172da <__aeabi_dsub+0x182>
   17504:	001e      	movs	r6, r3
   17506:	e6ad      	b.n	17264 <__aeabi_dsub+0x10c>
   17508:	2b1f      	cmp	r3, #31
   1750a:	dc60      	bgt.n	175ce <__aeabi_dsub+0x476>
   1750c:	2720      	movs	r7, #32
   1750e:	1af8      	subs	r0, r7, r3
   17510:	000f      	movs	r7, r1
   17512:	4684      	mov	ip, r0
   17514:	4087      	lsls	r7, r0
   17516:	0010      	movs	r0, r2
   17518:	40d8      	lsrs	r0, r3
   1751a:	4307      	orrs	r7, r0
   1751c:	4660      	mov	r0, ip
   1751e:	4082      	lsls	r2, r0
   17520:	1e50      	subs	r0, r2, #1
   17522:	4182      	sbcs	r2, r0
   17524:	40d9      	lsrs	r1, r3
   17526:	4317      	orrs	r7, r2
   17528:	e6f5      	b.n	17316 <__aeabi_dsub+0x1be>
   1752a:	0026      	movs	r6, r4
   1752c:	4650      	mov	r0, sl
   1752e:	4306      	orrs	r6, r0
   17530:	d005      	beq.n	1753e <__aeabi_dsub+0x3e6>
   17532:	43ed      	mvns	r5, r5
   17534:	2d00      	cmp	r5, #0
   17536:	d0d3      	beq.n	174e0 <__aeabi_dsub+0x388>
   17538:	4e90      	ldr	r6, [pc, #576]	; (1777c <__aeabi_dsub+0x624>)
   1753a:	45b4      	cmp	ip, r6
   1753c:	d1bd      	bne.n	174ba <__aeabi_dsub+0x362>
   1753e:	000c      	movs	r4, r1
   17540:	0017      	movs	r7, r2
   17542:	4666      	mov	r6, ip
   17544:	4698      	mov	r8, r3
   17546:	e68d      	b.n	17264 <__aeabi_dsub+0x10c>
   17548:	488c      	ldr	r0, [pc, #560]	; (1777c <__aeabi_dsub+0x624>)
   1754a:	4283      	cmp	r3, r0
   1754c:	d00b      	beq.n	17566 <__aeabi_dsub+0x40e>
   1754e:	4663      	mov	r3, ip
   17550:	e6d9      	b.n	17306 <__aeabi_dsub+0x1ae>
   17552:	2d00      	cmp	r5, #0
   17554:	d000      	beq.n	17558 <__aeabi_dsub+0x400>
   17556:	e096      	b.n	17686 <__aeabi_dsub+0x52e>
   17558:	0008      	movs	r0, r1
   1755a:	4310      	orrs	r0, r2
   1755c:	d100      	bne.n	17560 <__aeabi_dsub+0x408>
   1755e:	e0e2      	b.n	17726 <__aeabi_dsub+0x5ce>
   17560:	000c      	movs	r4, r1
   17562:	0017      	movs	r7, r2
   17564:	4698      	mov	r8, r3
   17566:	4e85      	ldr	r6, [pc, #532]	; (1777c <__aeabi_dsub+0x624>)
   17568:	e67c      	b.n	17264 <__aeabi_dsub+0x10c>
   1756a:	2500      	movs	r5, #0
   1756c:	e780      	b.n	17470 <__aeabi_dsub+0x318>
   1756e:	2100      	movs	r1, #0
   17570:	e78e      	b.n	17490 <__aeabi_dsub+0x338>
   17572:	0023      	movs	r3, r4
   17574:	4650      	mov	r0, sl
   17576:	4303      	orrs	r3, r0
   17578:	2e00      	cmp	r6, #0
   1757a:	d000      	beq.n	1757e <__aeabi_dsub+0x426>
   1757c:	e0a8      	b.n	176d0 <__aeabi_dsub+0x578>
   1757e:	2b00      	cmp	r3, #0
   17580:	d100      	bne.n	17584 <__aeabi_dsub+0x42c>
   17582:	e0de      	b.n	17742 <__aeabi_dsub+0x5ea>
   17584:	000b      	movs	r3, r1
   17586:	4313      	orrs	r3, r2
   17588:	d100      	bne.n	1758c <__aeabi_dsub+0x434>
   1758a:	e66b      	b.n	17264 <__aeabi_dsub+0x10c>
   1758c:	4452      	add	r2, sl
   1758e:	4552      	cmp	r2, sl
   17590:	4180      	sbcs	r0, r0
   17592:	1864      	adds	r4, r4, r1
   17594:	4240      	negs	r0, r0
   17596:	1824      	adds	r4, r4, r0
   17598:	0017      	movs	r7, r2
   1759a:	0223      	lsls	r3, r4, #8
   1759c:	d400      	bmi.n	175a0 <__aeabi_dsub+0x448>
   1759e:	e6fd      	b.n	1739c <__aeabi_dsub+0x244>
   175a0:	4b77      	ldr	r3, [pc, #476]	; (17780 <__aeabi_dsub+0x628>)
   175a2:	4666      	mov	r6, ip
   175a4:	401c      	ands	r4, r3
   175a6:	e65d      	b.n	17264 <__aeabi_dsub+0x10c>
   175a8:	0025      	movs	r5, r4
   175aa:	4650      	mov	r0, sl
   175ac:	4305      	orrs	r5, r0
   175ae:	2e00      	cmp	r6, #0
   175b0:	d1cf      	bne.n	17552 <__aeabi_dsub+0x3fa>
   175b2:	2d00      	cmp	r5, #0
   175b4:	d14f      	bne.n	17656 <__aeabi_dsub+0x4fe>
   175b6:	000c      	movs	r4, r1
   175b8:	4314      	orrs	r4, r2
   175ba:	d100      	bne.n	175be <__aeabi_dsub+0x466>
   175bc:	e0a0      	b.n	17700 <__aeabi_dsub+0x5a8>
   175be:	000c      	movs	r4, r1
   175c0:	0017      	movs	r7, r2
   175c2:	4698      	mov	r8, r3
   175c4:	e64e      	b.n	17264 <__aeabi_dsub+0x10c>
   175c6:	4666      	mov	r6, ip
   175c8:	2400      	movs	r4, #0
   175ca:	2700      	movs	r7, #0
   175cc:	e685      	b.n	172da <__aeabi_dsub+0x182>
   175ce:	001f      	movs	r7, r3
   175d0:	0008      	movs	r0, r1
   175d2:	3f20      	subs	r7, #32
   175d4:	40f8      	lsrs	r0, r7
   175d6:	0007      	movs	r7, r0
   175d8:	2b20      	cmp	r3, #32
   175da:	d100      	bne.n	175de <__aeabi_dsub+0x486>
   175dc:	e08e      	b.n	176fc <__aeabi_dsub+0x5a4>
   175de:	2040      	movs	r0, #64	; 0x40
   175e0:	1ac3      	subs	r3, r0, r3
   175e2:	4099      	lsls	r1, r3
   175e4:	430a      	orrs	r2, r1
   175e6:	1e51      	subs	r1, r2, #1
   175e8:	418a      	sbcs	r2, r1
   175ea:	2100      	movs	r1, #0
   175ec:	4317      	orrs	r7, r2
   175ee:	e692      	b.n	17316 <__aeabi_dsub+0x1be>
   175f0:	2e00      	cmp	r6, #0
   175f2:	d114      	bne.n	1761e <__aeabi_dsub+0x4c6>
   175f4:	0026      	movs	r6, r4
   175f6:	4650      	mov	r0, sl
   175f8:	4306      	orrs	r6, r0
   175fa:	d062      	beq.n	176c2 <__aeabi_dsub+0x56a>
   175fc:	43db      	mvns	r3, r3
   175fe:	2b00      	cmp	r3, #0
   17600:	d15c      	bne.n	176bc <__aeabi_dsub+0x564>
   17602:	1887      	adds	r7, r0, r2
   17604:	4297      	cmp	r7, r2
   17606:	4192      	sbcs	r2, r2
   17608:	1864      	adds	r4, r4, r1
   1760a:	4252      	negs	r2, r2
   1760c:	18a4      	adds	r4, r4, r2
   1760e:	4666      	mov	r6, ip
   17610:	e687      	b.n	17322 <__aeabi_dsub+0x1ca>
   17612:	4650      	mov	r0, sl
   17614:	4320      	orrs	r0, r4
   17616:	1e44      	subs	r4, r0, #1
   17618:	41a0      	sbcs	r0, r4
   1761a:	2400      	movs	r4, #0
   1761c:	e760      	b.n	174e0 <__aeabi_dsub+0x388>
   1761e:	4e57      	ldr	r6, [pc, #348]	; (1777c <__aeabi_dsub+0x624>)
   17620:	45b4      	cmp	ip, r6
   17622:	d04e      	beq.n	176c2 <__aeabi_dsub+0x56a>
   17624:	2680      	movs	r6, #128	; 0x80
   17626:	0436      	lsls	r6, r6, #16
   17628:	425b      	negs	r3, r3
   1762a:	4334      	orrs	r4, r6
   1762c:	2b38      	cmp	r3, #56	; 0x38
   1762e:	dd00      	ble.n	17632 <__aeabi_dsub+0x4da>
   17630:	e07f      	b.n	17732 <__aeabi_dsub+0x5da>
   17632:	2b1f      	cmp	r3, #31
   17634:	dd00      	ble.n	17638 <__aeabi_dsub+0x4e0>
   17636:	e08b      	b.n	17750 <__aeabi_dsub+0x5f8>
   17638:	2620      	movs	r6, #32
   1763a:	0027      	movs	r7, r4
   1763c:	4650      	mov	r0, sl
   1763e:	1af6      	subs	r6, r6, r3
   17640:	40b7      	lsls	r7, r6
   17642:	40d8      	lsrs	r0, r3
   17644:	4307      	orrs	r7, r0
   17646:	4650      	mov	r0, sl
   17648:	40b0      	lsls	r0, r6
   1764a:	1e46      	subs	r6, r0, #1
   1764c:	41b0      	sbcs	r0, r6
   1764e:	4307      	orrs	r7, r0
   17650:	40dc      	lsrs	r4, r3
   17652:	18bf      	adds	r7, r7, r2
   17654:	e7d6      	b.n	17604 <__aeabi_dsub+0x4ac>
   17656:	000d      	movs	r5, r1
   17658:	4315      	orrs	r5, r2
   1765a:	d100      	bne.n	1765e <__aeabi_dsub+0x506>
   1765c:	e602      	b.n	17264 <__aeabi_dsub+0x10c>
   1765e:	4650      	mov	r0, sl
   17660:	1a80      	subs	r0, r0, r2
   17662:	4582      	cmp	sl, r0
   17664:	41bf      	sbcs	r7, r7
   17666:	1a65      	subs	r5, r4, r1
   17668:	427f      	negs	r7, r7
   1766a:	1bed      	subs	r5, r5, r7
   1766c:	4684      	mov	ip, r0
   1766e:	0228      	lsls	r0, r5, #8
   17670:	d400      	bmi.n	17674 <__aeabi_dsub+0x51c>
   17672:	e68d      	b.n	17390 <__aeabi_dsub+0x238>
   17674:	4650      	mov	r0, sl
   17676:	1a17      	subs	r7, r2, r0
   17678:	42ba      	cmp	r2, r7
   1767a:	4192      	sbcs	r2, r2
   1767c:	1b0c      	subs	r4, r1, r4
   1767e:	4252      	negs	r2, r2
   17680:	1aa4      	subs	r4, r4, r2
   17682:	4698      	mov	r8, r3
   17684:	e5ee      	b.n	17264 <__aeabi_dsub+0x10c>
   17686:	000d      	movs	r5, r1
   17688:	4315      	orrs	r5, r2
   1768a:	d100      	bne.n	1768e <__aeabi_dsub+0x536>
   1768c:	e76b      	b.n	17566 <__aeabi_dsub+0x40e>
   1768e:	4650      	mov	r0, sl
   17690:	0767      	lsls	r7, r4, #29
   17692:	08c0      	lsrs	r0, r0, #3
   17694:	4307      	orrs	r7, r0
   17696:	2080      	movs	r0, #128	; 0x80
   17698:	08e4      	lsrs	r4, r4, #3
   1769a:	0300      	lsls	r0, r0, #12
   1769c:	4204      	tst	r4, r0
   1769e:	d007      	beq.n	176b0 <__aeabi_dsub+0x558>
   176a0:	08cd      	lsrs	r5, r1, #3
   176a2:	4205      	tst	r5, r0
   176a4:	d104      	bne.n	176b0 <__aeabi_dsub+0x558>
   176a6:	002c      	movs	r4, r5
   176a8:	4698      	mov	r8, r3
   176aa:	08d7      	lsrs	r7, r2, #3
   176ac:	0749      	lsls	r1, r1, #29
   176ae:	430f      	orrs	r7, r1
   176b0:	0f7b      	lsrs	r3, r7, #29
   176b2:	00e4      	lsls	r4, r4, #3
   176b4:	431c      	orrs	r4, r3
   176b6:	00ff      	lsls	r7, r7, #3
   176b8:	4e30      	ldr	r6, [pc, #192]	; (1777c <__aeabi_dsub+0x624>)
   176ba:	e5d3      	b.n	17264 <__aeabi_dsub+0x10c>
   176bc:	4e2f      	ldr	r6, [pc, #188]	; (1777c <__aeabi_dsub+0x624>)
   176be:	45b4      	cmp	ip, r6
   176c0:	d1b4      	bne.n	1762c <__aeabi_dsub+0x4d4>
   176c2:	000c      	movs	r4, r1
   176c4:	0017      	movs	r7, r2
   176c6:	4666      	mov	r6, ip
   176c8:	e5cc      	b.n	17264 <__aeabi_dsub+0x10c>
   176ca:	2700      	movs	r7, #0
   176cc:	2400      	movs	r4, #0
   176ce:	e5e8      	b.n	172a2 <__aeabi_dsub+0x14a>
   176d0:	2b00      	cmp	r3, #0
   176d2:	d039      	beq.n	17748 <__aeabi_dsub+0x5f0>
   176d4:	000b      	movs	r3, r1
   176d6:	4313      	orrs	r3, r2
   176d8:	d100      	bne.n	176dc <__aeabi_dsub+0x584>
   176da:	e744      	b.n	17566 <__aeabi_dsub+0x40e>
   176dc:	08c0      	lsrs	r0, r0, #3
   176de:	0767      	lsls	r7, r4, #29
   176e0:	4307      	orrs	r7, r0
   176e2:	2080      	movs	r0, #128	; 0x80
   176e4:	08e4      	lsrs	r4, r4, #3
   176e6:	0300      	lsls	r0, r0, #12
   176e8:	4204      	tst	r4, r0
   176ea:	d0e1      	beq.n	176b0 <__aeabi_dsub+0x558>
   176ec:	08cb      	lsrs	r3, r1, #3
   176ee:	4203      	tst	r3, r0
   176f0:	d1de      	bne.n	176b0 <__aeabi_dsub+0x558>
   176f2:	08d7      	lsrs	r7, r2, #3
   176f4:	0749      	lsls	r1, r1, #29
   176f6:	430f      	orrs	r7, r1
   176f8:	001c      	movs	r4, r3
   176fa:	e7d9      	b.n	176b0 <__aeabi_dsub+0x558>
   176fc:	2100      	movs	r1, #0
   176fe:	e771      	b.n	175e4 <__aeabi_dsub+0x48c>
   17700:	2500      	movs	r5, #0
   17702:	2700      	movs	r7, #0
   17704:	e5e9      	b.n	172da <__aeabi_dsub+0x182>
   17706:	002e      	movs	r6, r5
   17708:	0027      	movs	r7, r4
   1770a:	3e20      	subs	r6, #32
   1770c:	40f7      	lsrs	r7, r6
   1770e:	2d20      	cmp	r5, #32
   17710:	d02f      	beq.n	17772 <__aeabi_dsub+0x61a>
   17712:	2640      	movs	r6, #64	; 0x40
   17714:	1b75      	subs	r5, r6, r5
   17716:	40ac      	lsls	r4, r5
   17718:	4650      	mov	r0, sl
   1771a:	4320      	orrs	r0, r4
   1771c:	1e44      	subs	r4, r0, #1
   1771e:	41a0      	sbcs	r0, r4
   17720:	2400      	movs	r4, #0
   17722:	4338      	orrs	r0, r7
   17724:	e6dc      	b.n	174e0 <__aeabi_dsub+0x388>
   17726:	2480      	movs	r4, #128	; 0x80
   17728:	2500      	movs	r5, #0
   1772a:	0324      	lsls	r4, r4, #12
   1772c:	4e13      	ldr	r6, [pc, #76]	; (1777c <__aeabi_dsub+0x624>)
   1772e:	2700      	movs	r7, #0
   17730:	e5d3      	b.n	172da <__aeabi_dsub+0x182>
   17732:	4650      	mov	r0, sl
   17734:	4320      	orrs	r0, r4
   17736:	0007      	movs	r7, r0
   17738:	1e78      	subs	r0, r7, #1
   1773a:	4187      	sbcs	r7, r0
   1773c:	2400      	movs	r4, #0
   1773e:	18bf      	adds	r7, r7, r2
   17740:	e760      	b.n	17604 <__aeabi_dsub+0x4ac>
   17742:	000c      	movs	r4, r1
   17744:	0017      	movs	r7, r2
   17746:	e58d      	b.n	17264 <__aeabi_dsub+0x10c>
   17748:	000c      	movs	r4, r1
   1774a:	0017      	movs	r7, r2
   1774c:	4e0b      	ldr	r6, [pc, #44]	; (1777c <__aeabi_dsub+0x624>)
   1774e:	e589      	b.n	17264 <__aeabi_dsub+0x10c>
   17750:	001e      	movs	r6, r3
   17752:	0027      	movs	r7, r4
   17754:	3e20      	subs	r6, #32
   17756:	40f7      	lsrs	r7, r6
   17758:	2b20      	cmp	r3, #32
   1775a:	d00c      	beq.n	17776 <__aeabi_dsub+0x61e>
   1775c:	2640      	movs	r6, #64	; 0x40
   1775e:	1af3      	subs	r3, r6, r3
   17760:	409c      	lsls	r4, r3
   17762:	4650      	mov	r0, sl
   17764:	4320      	orrs	r0, r4
   17766:	1e44      	subs	r4, r0, #1
   17768:	41a0      	sbcs	r0, r4
   1776a:	4307      	orrs	r7, r0
   1776c:	2400      	movs	r4, #0
   1776e:	18bf      	adds	r7, r7, r2
   17770:	e748      	b.n	17604 <__aeabi_dsub+0x4ac>
   17772:	2400      	movs	r4, #0
   17774:	e7d0      	b.n	17718 <__aeabi_dsub+0x5c0>
   17776:	2400      	movs	r4, #0
   17778:	e7f3      	b.n	17762 <__aeabi_dsub+0x60a>
   1777a:	46c0      	nop			; (mov r8, r8)
   1777c:	000007ff 	.word	0x000007ff
   17780:	ff7fffff 	.word	0xff7fffff

00017784 <__aeabi_dcmpun>:
   17784:	b570      	push	{r4, r5, r6, lr}
   17786:	4e0e      	ldr	r6, [pc, #56]	; (177c0 <__aeabi_dcmpun+0x3c>)
   17788:	030d      	lsls	r5, r1, #12
   1778a:	031c      	lsls	r4, r3, #12
   1778c:	0049      	lsls	r1, r1, #1
   1778e:	005b      	lsls	r3, r3, #1
   17790:	0b2d      	lsrs	r5, r5, #12
   17792:	0d49      	lsrs	r1, r1, #21
   17794:	0b24      	lsrs	r4, r4, #12
   17796:	0d5b      	lsrs	r3, r3, #21
   17798:	42b1      	cmp	r1, r6
   1779a:	d004      	beq.n	177a6 <__aeabi_dcmpun+0x22>
   1779c:	4908      	ldr	r1, [pc, #32]	; (177c0 <__aeabi_dcmpun+0x3c>)
   1779e:	2000      	movs	r0, #0
   177a0:	428b      	cmp	r3, r1
   177a2:	d008      	beq.n	177b6 <__aeabi_dcmpun+0x32>
   177a4:	bd70      	pop	{r4, r5, r6, pc}
   177a6:	4305      	orrs	r5, r0
   177a8:	2001      	movs	r0, #1
   177aa:	2d00      	cmp	r5, #0
   177ac:	d1fa      	bne.n	177a4 <__aeabi_dcmpun+0x20>
   177ae:	4904      	ldr	r1, [pc, #16]	; (177c0 <__aeabi_dcmpun+0x3c>)
   177b0:	2000      	movs	r0, #0
   177b2:	428b      	cmp	r3, r1
   177b4:	d1f6      	bne.n	177a4 <__aeabi_dcmpun+0x20>
   177b6:	4314      	orrs	r4, r2
   177b8:	0020      	movs	r0, r4
   177ba:	1e44      	subs	r4, r0, #1
   177bc:	41a0      	sbcs	r0, r4
   177be:	e7f1      	b.n	177a4 <__aeabi_dcmpun+0x20>
   177c0:	000007ff 	.word	0x000007ff

000177c4 <__aeabi_d2iz>:
   177c4:	b530      	push	{r4, r5, lr}
   177c6:	4d13      	ldr	r5, [pc, #76]	; (17814 <__aeabi_d2iz+0x50>)
   177c8:	030a      	lsls	r2, r1, #12
   177ca:	004b      	lsls	r3, r1, #1
   177cc:	0b12      	lsrs	r2, r2, #12
   177ce:	0d5b      	lsrs	r3, r3, #21
   177d0:	0fc9      	lsrs	r1, r1, #31
   177d2:	2400      	movs	r4, #0
   177d4:	42ab      	cmp	r3, r5
   177d6:	dd10      	ble.n	177fa <__aeabi_d2iz+0x36>
   177d8:	4c0f      	ldr	r4, [pc, #60]	; (17818 <__aeabi_d2iz+0x54>)
   177da:	42a3      	cmp	r3, r4
   177dc:	dc0f      	bgt.n	177fe <__aeabi_d2iz+0x3a>
   177de:	2480      	movs	r4, #128	; 0x80
   177e0:	4d0e      	ldr	r5, [pc, #56]	; (1781c <__aeabi_d2iz+0x58>)
   177e2:	0364      	lsls	r4, r4, #13
   177e4:	4322      	orrs	r2, r4
   177e6:	1aed      	subs	r5, r5, r3
   177e8:	2d1f      	cmp	r5, #31
   177ea:	dd0b      	ble.n	17804 <__aeabi_d2iz+0x40>
   177ec:	480c      	ldr	r0, [pc, #48]	; (17820 <__aeabi_d2iz+0x5c>)
   177ee:	1ac3      	subs	r3, r0, r3
   177f0:	40da      	lsrs	r2, r3
   177f2:	4254      	negs	r4, r2
   177f4:	2900      	cmp	r1, #0
   177f6:	d100      	bne.n	177fa <__aeabi_d2iz+0x36>
   177f8:	0014      	movs	r4, r2
   177fa:	0020      	movs	r0, r4
   177fc:	bd30      	pop	{r4, r5, pc}
   177fe:	4b09      	ldr	r3, [pc, #36]	; (17824 <__aeabi_d2iz+0x60>)
   17800:	18cc      	adds	r4, r1, r3
   17802:	e7fa      	b.n	177fa <__aeabi_d2iz+0x36>
   17804:	4c08      	ldr	r4, [pc, #32]	; (17828 <__aeabi_d2iz+0x64>)
   17806:	40e8      	lsrs	r0, r5
   17808:	46a4      	mov	ip, r4
   1780a:	4463      	add	r3, ip
   1780c:	409a      	lsls	r2, r3
   1780e:	4302      	orrs	r2, r0
   17810:	e7ef      	b.n	177f2 <__aeabi_d2iz+0x2e>
   17812:	46c0      	nop			; (mov r8, r8)
   17814:	000003fe 	.word	0x000003fe
   17818:	0000041d 	.word	0x0000041d
   1781c:	00000433 	.word	0x00000433
   17820:	00000413 	.word	0x00000413
   17824:	7fffffff 	.word	0x7fffffff
   17828:	fffffbed 	.word	0xfffffbed

0001782c <__aeabi_i2d>:
   1782c:	b570      	push	{r4, r5, r6, lr}
   1782e:	2800      	cmp	r0, #0
   17830:	d030      	beq.n	17894 <__aeabi_i2d+0x68>
   17832:	17c3      	asrs	r3, r0, #31
   17834:	18c4      	adds	r4, r0, r3
   17836:	405c      	eors	r4, r3
   17838:	0fc5      	lsrs	r5, r0, #31
   1783a:	0020      	movs	r0, r4
   1783c:	f000 f8c2 	bl	179c4 <__clzsi2>
   17840:	4b17      	ldr	r3, [pc, #92]	; (178a0 <__aeabi_i2d+0x74>)
   17842:	4a18      	ldr	r2, [pc, #96]	; (178a4 <__aeabi_i2d+0x78>)
   17844:	1a1b      	subs	r3, r3, r0
   17846:	1ad2      	subs	r2, r2, r3
   17848:	2a1f      	cmp	r2, #31
   1784a:	dd18      	ble.n	1787e <__aeabi_i2d+0x52>
   1784c:	4a16      	ldr	r2, [pc, #88]	; (178a8 <__aeabi_i2d+0x7c>)
   1784e:	1ad2      	subs	r2, r2, r3
   17850:	4094      	lsls	r4, r2
   17852:	2200      	movs	r2, #0
   17854:	0324      	lsls	r4, r4, #12
   17856:	055b      	lsls	r3, r3, #21
   17858:	0b24      	lsrs	r4, r4, #12
   1785a:	0d5b      	lsrs	r3, r3, #21
   1785c:	2100      	movs	r1, #0
   1785e:	0010      	movs	r0, r2
   17860:	0324      	lsls	r4, r4, #12
   17862:	0d0a      	lsrs	r2, r1, #20
   17864:	0b24      	lsrs	r4, r4, #12
   17866:	0512      	lsls	r2, r2, #20
   17868:	4322      	orrs	r2, r4
   1786a:	4c10      	ldr	r4, [pc, #64]	; (178ac <__aeabi_i2d+0x80>)
   1786c:	051b      	lsls	r3, r3, #20
   1786e:	4022      	ands	r2, r4
   17870:	4313      	orrs	r3, r2
   17872:	005b      	lsls	r3, r3, #1
   17874:	07ed      	lsls	r5, r5, #31
   17876:	085b      	lsrs	r3, r3, #1
   17878:	432b      	orrs	r3, r5
   1787a:	0019      	movs	r1, r3
   1787c:	bd70      	pop	{r4, r5, r6, pc}
   1787e:	0021      	movs	r1, r4
   17880:	4091      	lsls	r1, r2
   17882:	000a      	movs	r2, r1
   17884:	210b      	movs	r1, #11
   17886:	1a08      	subs	r0, r1, r0
   17888:	40c4      	lsrs	r4, r0
   1788a:	055b      	lsls	r3, r3, #21
   1788c:	0324      	lsls	r4, r4, #12
   1788e:	0b24      	lsrs	r4, r4, #12
   17890:	0d5b      	lsrs	r3, r3, #21
   17892:	e7e3      	b.n	1785c <__aeabi_i2d+0x30>
   17894:	2500      	movs	r5, #0
   17896:	2300      	movs	r3, #0
   17898:	2400      	movs	r4, #0
   1789a:	2200      	movs	r2, #0
   1789c:	e7de      	b.n	1785c <__aeabi_i2d+0x30>
   1789e:	46c0      	nop			; (mov r8, r8)
   178a0:	0000041e 	.word	0x0000041e
   178a4:	00000433 	.word	0x00000433
   178a8:	00000413 	.word	0x00000413
   178ac:	800fffff 	.word	0x800fffff

000178b0 <__aeabi_ui2d>:
   178b0:	b510      	push	{r4, lr}
   178b2:	1e04      	subs	r4, r0, #0
   178b4:	d028      	beq.n	17908 <__aeabi_ui2d+0x58>
   178b6:	f000 f885 	bl	179c4 <__clzsi2>
   178ba:	4b15      	ldr	r3, [pc, #84]	; (17910 <__aeabi_ui2d+0x60>)
   178bc:	4a15      	ldr	r2, [pc, #84]	; (17914 <__aeabi_ui2d+0x64>)
   178be:	1a1b      	subs	r3, r3, r0
   178c0:	1ad2      	subs	r2, r2, r3
   178c2:	2a1f      	cmp	r2, #31
   178c4:	dd15      	ble.n	178f2 <__aeabi_ui2d+0x42>
   178c6:	4a14      	ldr	r2, [pc, #80]	; (17918 <__aeabi_ui2d+0x68>)
   178c8:	1ad2      	subs	r2, r2, r3
   178ca:	4094      	lsls	r4, r2
   178cc:	2200      	movs	r2, #0
   178ce:	0324      	lsls	r4, r4, #12
   178d0:	055b      	lsls	r3, r3, #21
   178d2:	0b24      	lsrs	r4, r4, #12
   178d4:	0d5b      	lsrs	r3, r3, #21
   178d6:	2100      	movs	r1, #0
   178d8:	0010      	movs	r0, r2
   178da:	0324      	lsls	r4, r4, #12
   178dc:	0d0a      	lsrs	r2, r1, #20
   178de:	0b24      	lsrs	r4, r4, #12
   178e0:	0512      	lsls	r2, r2, #20
   178e2:	4322      	orrs	r2, r4
   178e4:	4c0d      	ldr	r4, [pc, #52]	; (1791c <__aeabi_ui2d+0x6c>)
   178e6:	051b      	lsls	r3, r3, #20
   178e8:	4022      	ands	r2, r4
   178ea:	4313      	orrs	r3, r2
   178ec:	005b      	lsls	r3, r3, #1
   178ee:	0859      	lsrs	r1, r3, #1
   178f0:	bd10      	pop	{r4, pc}
   178f2:	0021      	movs	r1, r4
   178f4:	4091      	lsls	r1, r2
   178f6:	000a      	movs	r2, r1
   178f8:	210b      	movs	r1, #11
   178fa:	1a08      	subs	r0, r1, r0
   178fc:	40c4      	lsrs	r4, r0
   178fe:	055b      	lsls	r3, r3, #21
   17900:	0324      	lsls	r4, r4, #12
   17902:	0b24      	lsrs	r4, r4, #12
   17904:	0d5b      	lsrs	r3, r3, #21
   17906:	e7e6      	b.n	178d6 <__aeabi_ui2d+0x26>
   17908:	2300      	movs	r3, #0
   1790a:	2400      	movs	r4, #0
   1790c:	2200      	movs	r2, #0
   1790e:	e7e2      	b.n	178d6 <__aeabi_ui2d+0x26>
   17910:	0000041e 	.word	0x0000041e
   17914:	00000433 	.word	0x00000433
   17918:	00000413 	.word	0x00000413
   1791c:	800fffff 	.word	0x800fffff

00017920 <__aeabi_f2d>:
   17920:	0041      	lsls	r1, r0, #1
   17922:	0e09      	lsrs	r1, r1, #24
   17924:	1c4b      	adds	r3, r1, #1
   17926:	b570      	push	{r4, r5, r6, lr}
   17928:	b2db      	uxtb	r3, r3
   1792a:	0246      	lsls	r6, r0, #9
   1792c:	0a75      	lsrs	r5, r6, #9
   1792e:	0fc4      	lsrs	r4, r0, #31
   17930:	2b01      	cmp	r3, #1
   17932:	dd14      	ble.n	1795e <__aeabi_f2d+0x3e>
   17934:	23e0      	movs	r3, #224	; 0xe0
   17936:	009b      	lsls	r3, r3, #2
   17938:	076d      	lsls	r5, r5, #29
   1793a:	0b36      	lsrs	r6, r6, #12
   1793c:	18cb      	adds	r3, r1, r3
   1793e:	2100      	movs	r1, #0
   17940:	0d0a      	lsrs	r2, r1, #20
   17942:	0028      	movs	r0, r5
   17944:	0512      	lsls	r2, r2, #20
   17946:	4d1c      	ldr	r5, [pc, #112]	; (179b8 <__aeabi_f2d+0x98>)
   17948:	4332      	orrs	r2, r6
   1794a:	055b      	lsls	r3, r3, #21
   1794c:	402a      	ands	r2, r5
   1794e:	085b      	lsrs	r3, r3, #1
   17950:	4313      	orrs	r3, r2
   17952:	005b      	lsls	r3, r3, #1
   17954:	07e4      	lsls	r4, r4, #31
   17956:	085b      	lsrs	r3, r3, #1
   17958:	4323      	orrs	r3, r4
   1795a:	0019      	movs	r1, r3
   1795c:	bd70      	pop	{r4, r5, r6, pc}
   1795e:	2900      	cmp	r1, #0
   17960:	d114      	bne.n	1798c <__aeabi_f2d+0x6c>
   17962:	2d00      	cmp	r5, #0
   17964:	d01e      	beq.n	179a4 <__aeabi_f2d+0x84>
   17966:	0028      	movs	r0, r5
   17968:	f000 f82c 	bl	179c4 <__clzsi2>
   1796c:	280a      	cmp	r0, #10
   1796e:	dc1c      	bgt.n	179aa <__aeabi_f2d+0x8a>
   17970:	230b      	movs	r3, #11
   17972:	002a      	movs	r2, r5
   17974:	1a1b      	subs	r3, r3, r0
   17976:	40da      	lsrs	r2, r3
   17978:	0003      	movs	r3, r0
   1797a:	3315      	adds	r3, #21
   1797c:	409d      	lsls	r5, r3
   1797e:	4b0f      	ldr	r3, [pc, #60]	; (179bc <__aeabi_f2d+0x9c>)
   17980:	0312      	lsls	r2, r2, #12
   17982:	1a1b      	subs	r3, r3, r0
   17984:	055b      	lsls	r3, r3, #21
   17986:	0b16      	lsrs	r6, r2, #12
   17988:	0d5b      	lsrs	r3, r3, #21
   1798a:	e7d8      	b.n	1793e <__aeabi_f2d+0x1e>
   1798c:	2d00      	cmp	r5, #0
   1798e:	d006      	beq.n	1799e <__aeabi_f2d+0x7e>
   17990:	0b32      	lsrs	r2, r6, #12
   17992:	2680      	movs	r6, #128	; 0x80
   17994:	0336      	lsls	r6, r6, #12
   17996:	076d      	lsls	r5, r5, #29
   17998:	4316      	orrs	r6, r2
   1799a:	4b09      	ldr	r3, [pc, #36]	; (179c0 <__aeabi_f2d+0xa0>)
   1799c:	e7cf      	b.n	1793e <__aeabi_f2d+0x1e>
   1799e:	4b08      	ldr	r3, [pc, #32]	; (179c0 <__aeabi_f2d+0xa0>)
   179a0:	2600      	movs	r6, #0
   179a2:	e7cc      	b.n	1793e <__aeabi_f2d+0x1e>
   179a4:	2300      	movs	r3, #0
   179a6:	2600      	movs	r6, #0
   179a8:	e7c9      	b.n	1793e <__aeabi_f2d+0x1e>
   179aa:	0003      	movs	r3, r0
   179ac:	002a      	movs	r2, r5
   179ae:	3b0b      	subs	r3, #11
   179b0:	409a      	lsls	r2, r3
   179b2:	2500      	movs	r5, #0
   179b4:	e7e3      	b.n	1797e <__aeabi_f2d+0x5e>
   179b6:	46c0      	nop			; (mov r8, r8)
   179b8:	800fffff 	.word	0x800fffff
   179bc:	00000389 	.word	0x00000389
   179c0:	000007ff 	.word	0x000007ff

000179c4 <__clzsi2>:
   179c4:	211c      	movs	r1, #28
   179c6:	2301      	movs	r3, #1
   179c8:	041b      	lsls	r3, r3, #16
   179ca:	4298      	cmp	r0, r3
   179cc:	d301      	bcc.n	179d2 <__clzsi2+0xe>
   179ce:	0c00      	lsrs	r0, r0, #16
   179d0:	3910      	subs	r1, #16
   179d2:	0a1b      	lsrs	r3, r3, #8
   179d4:	4298      	cmp	r0, r3
   179d6:	d301      	bcc.n	179dc <__clzsi2+0x18>
   179d8:	0a00      	lsrs	r0, r0, #8
   179da:	3908      	subs	r1, #8
   179dc:	091b      	lsrs	r3, r3, #4
   179de:	4298      	cmp	r0, r3
   179e0:	d301      	bcc.n	179e6 <__clzsi2+0x22>
   179e2:	0900      	lsrs	r0, r0, #4
   179e4:	3904      	subs	r1, #4
   179e6:	a202      	add	r2, pc, #8	; (adr r2, 179f0 <__clzsi2+0x2c>)
   179e8:	5c10      	ldrb	r0, [r2, r0]
   179ea:	1840      	adds	r0, r0, r1
   179ec:	4770      	bx	lr
   179ee:	46c0      	nop			; (mov r8, r8)
   179f0:	02020304 	.word	0x02020304
   179f4:	01010101 	.word	0x01010101
	...
   17a00:	6c696166 	.word	0x6c696166
   17a04:	74206465 	.word	0x74206465
   17a08:	6e69206f 	.word	0x6e69206f
   17a0c:	61697469 	.word	0x61697469
   17a10:	657a696c 	.word	0x657a696c
   17a14:	43444820 	.word	0x43444820
   17a18:	30383031 	.word	0x30383031
   17a1c:	69726420 	.word	0x69726420
   17a20:	2e726576 	.word	0x2e726576
   17a24:	0000000d 	.word	0x0000000d
   17a28:	61746164 	.word	0x61746164
   17a2c:	63617020 	.word	0x63617020
   17a30:	3a74656b 	.word	0x3a74656b
   17a34:	25783020 	.word	0x25783020
   17a38:	20783230 	.word	0x20783230
   17a3c:	30257830 	.word	0x30257830
   17a40:	30207832 	.word	0x30207832
   17a44:	32302578 	.word	0x32302578
   17a48:	000a0d78 	.word	0x000a0d78
   17a4c:	6f727265 	.word	0x6f727265
   17a50:	72742072 	.word	0x72742072
   17a54:	676e6979 	.word	0x676e6979
   17a58:	206f7420 	.word	0x206f7420
   17a5c:	20746573 	.word	0x20746573
   17a60:	6f736572 	.word	0x6f736572
   17a64:	6974756c 	.word	0x6974756c
   17a68:	0d216e6f 	.word	0x0d216e6f
   17a6c:	00000000 	.word	0x00000000
   17a70:	6c696166 	.word	0x6c696166
   17a74:	74206465 	.word	0x74206465
   17a78:	0973206f 	.word	0x0973206f
   17a7c:	20646e65 	.word	0x20646e65
   17a80:	69676572 	.word	0x69676572
   17a84:	72657473 	.word	0x72657473
   17a88:	71657220 	.word	0x71657220
   17a8c:	74736575 	.word	0x74736575
   17a90:	726f6620 	.word	0x726f6620
   17a94:	6d6f6320 	.word	0x6d6f6320
   17a98:	646e616d 	.word	0x646e616d
   17a9c:	25783020 	.word	0x25783020
   17aa0:	21783230 	.word	0x21783230
   17aa4:	00000a0d 	.word	0x00000a0d
   17aa8:	6c696166 	.word	0x6c696166
   17aac:	74206465 	.word	0x74206465
   17ab0:	6572206f 	.word	0x6572206f
   17ab4:	76696563 	.word	0x76696563
   17ab8:	79622065 	.word	0x79622065
   17abc:	20736574 	.word	0x20736574
   17ac0:	20726f66 	.word	0x20726f66
   17ac4:	6d6d6f63 	.word	0x6d6d6f63
   17ac8:	20646e61 	.word	0x20646e61
   17acc:	30257830 	.word	0x30257830
   17ad0:	0d217832 	.word	0x0d217832
   17ad4:	0000000a 	.word	0x0000000a
   17ad8:	6c696166 	.word	0x6c696166
   17adc:	74206465 	.word	0x74206465
   17ae0:	6e69206f 	.word	0x6e69206f
   17ae4:	61697469 	.word	0x61697469
   17ae8:	657a696c 	.word	0x657a696c
   17aec:	4c535420 	.word	0x4c535420
   17af0:	31363532 	.word	0x31363532
   17af4:	69726420 	.word	0x69726420
   17af8:	2e726576 	.word	0x2e726576
   17afc:	0000000d 	.word	0x0000000d
   17b00:	6c696166 	.word	0x6c696166
   17b04:	74206465 	.word	0x74206465
   17b08:	6573206f 	.word	0x6573206f
   17b0c:	7220646e 	.word	0x7220646e
   17b10:	73696765 	.word	0x73696765
   17b14:	20726574 	.word	0x20726574
   17b18:	75716572 	.word	0x75716572
   17b1c:	20747365 	.word	0x20747365
   17b20:	20726f66 	.word	0x20726f66
   17b24:	6d6d6f63 	.word	0x6d6d6f63
   17b28:	20646e61 	.word	0x20646e61
   17b2c:	30257830 	.word	0x30257830
   17b30:	0d217832 	.word	0x0d217832
   17b34:	0000000a 	.word	0x0000000a
   17b38:	6c696166 	.word	0x6c696166
   17b3c:	74206465 	.word	0x74206465
   17b40:	6572206f 	.word	0x6572206f
   17b44:	76696563 	.word	0x76696563
   17b48:	79622065 	.word	0x79622065
   17b4c:	20736574 	.word	0x20736574
   17b50:	20726f66 	.word	0x20726f66
   17b54:	6d6d6f63 	.word	0x6d6d6f63
   17b58:	20646e61 	.word	0x20646e61
   17b5c:	30257830 	.word	0x30257830
   17b60:	0d217832 	.word	0x0d217832
   17b64:	0000000a 	.word	0x0000000a
   17b68:	5f746567 	.word	0x5f746567
   17b6c:	3a78756c 	.word	0x3a78756c
   17b70:	4c535420 	.word	0x4c535420
   17b74:	31363532 	.word	0x31363532
   17b78:	67696c20 	.word	0x67696c20
   17b7c:	69207468 	.word	0x69207468
   17b80:	61732073 	.word	0x61732073
   17b84:	61727574 	.word	0x61727574
   17b88:	00646574 	.word	0x00646574
   17b8c:	72617473 	.word	0x72617473
   17b90:	6f645f74 	.word	0x6f645f74
   17b94:	6f6c6e77 	.word	0x6f6c6e77
   17b98:	203a6461 	.word	0x203a6461
   17b9c:	20434d4d 	.word	0x20434d4d
   17ba0:	726f7473 	.word	0x726f7473
   17ba4:	20656761 	.word	0x20656761
   17ba8:	20746f6e 	.word	0x20746f6e
   17bac:	64616572 	.word	0x64616572
   17bb0:	000d2e79 	.word	0x000d2e79
   17bb4:	72617473 	.word	0x72617473
   17bb8:	6f645f74 	.word	0x6f645f74
   17bbc:	6f6c6e77 	.word	0x6f6c6e77
   17bc0:	203a6461 	.word	0x203a6461
   17bc4:	462d6957 	.word	0x462d6957
   17bc8:	73692069 	.word	0x73692069
   17bcc:	746f6e20 	.word	0x746f6e20
   17bd0:	6e6f6320 	.word	0x6e6f6320
   17bd4:	7463656e 	.word	0x7463656e
   17bd8:	0d2e6465 	.word	0x0d2e6465
   17bdc:	00000000 	.word	0x00000000
   17be0:	72617473 	.word	0x72617473
   17be4:	6f645f74 	.word	0x6f645f74
   17be8:	6f6c6e77 	.word	0x6f6c6e77
   17bec:	203a6461 	.word	0x203a6461
   17bf0:	75716572 	.word	0x75716572
   17bf4:	20747365 	.word	0x20747365
   17bf8:	73207369 	.word	0x73207369
   17bfc:	20746e65 	.word	0x20746e65
   17c00:	65726c61 	.word	0x65726c61
   17c04:	2e796461 	.word	0x2e796461
   17c08:	0000000d 	.word	0x0000000d
   17c0c:	72617473 	.word	0x72617473
   17c10:	6f645f74 	.word	0x6f645f74
   17c14:	6f6c6e77 	.word	0x6f6c6e77
   17c18:	203a6461 	.word	0x203a6461
   17c1c:	6e6e7572 	.word	0x6e6e7572
   17c20:	20676e69 	.word	0x20676e69
   17c24:	6e776f64 	.word	0x6e776f64
   17c28:	64616f6c 	.word	0x64616f6c
   17c2c:	726c6120 	.word	0x726c6120
   17c30:	79646165 	.word	0x79646165
   17c34:	00000d2e 	.word	0x00000d2e
   17c38:	72617473 	.word	0x72617473
   17c3c:	6f645f74 	.word	0x6f645f74
   17c40:	6f6c6e77 	.word	0x6f6c6e77
   17c44:	5b206461 	.word	0x5b206461
   17c48:	5f544f4e 	.word	0x5f544f4e
   17c4c:	43454843 	.word	0x43454843
   17c50:	5d44454b 	.word	0x5d44454b
   17c54:	6573203a 	.word	0x6573203a
   17c58:	6e69646e 	.word	0x6e69646e
   17c5c:	54482067 	.word	0x54482067
   17c60:	72205054 	.word	0x72205054
   17c64:	65757165 	.word	0x65757165
   17c68:	66207473 	.word	0x66207473
   17c6c:	6820726f 	.word	0x6820726f
   17c70:	65646165 	.word	0x65646165
   17c74:	00000d72 	.word	0x00000d72
   17c78:	72617473 	.word	0x72617473
   17c7c:	6f645f74 	.word	0x6f645f74
   17c80:	6f6c6e77 	.word	0x6f6c6e77
   17c84:	5b206461 	.word	0x5b206461
   17c88:	41445055 	.word	0x41445055
   17c8c:	415f4554 	.word	0x415f4554
   17c90:	4c494156 	.word	0x4c494156
   17c94:	454c4241 	.word	0x454c4241
   17c98:	73203a5d 	.word	0x73203a5d
   17c9c:	69646e65 	.word	0x69646e65
   17ca0:	4820676e 	.word	0x4820676e
   17ca4:	20505454 	.word	0x20505454
   17ca8:	75716572 	.word	0x75716572
   17cac:	20747365 	.word	0x20747365
   17cb0:	20726f66 	.word	0x20726f66
   17cb4:	6d726966 	.word	0x6d726966
   17cb8:	65726177 	.word	0x65726177
   17cbc:	0000000d 	.word	0x0000000d
   17cc0:	72617473 	.word	0x72617473
   17cc4:	6f645f74 	.word	0x6f645f74
   17cc8:	6f6c6e77 	.word	0x6f6c6e77
   17ccc:	203a6461 	.word	0x203a6461
   17cd0:	75206f6e 	.word	0x75206f6e
   17cd4:	74616470 	.word	0x74616470
   17cd8:	76612065 	.word	0x76612065
   17cdc:	616c6961 	.word	0x616c6961
   17ce0:	0d656c62 	.word	0x0d656c62
   17ce4:	00000000 	.word	0x00000000
   17ce8:	74697277 	.word	0x74697277
   17cec:	69665f65 	.word	0x69665f65
   17cf0:	61776d72 	.word	0x61776d72
   17cf4:	6d5f6572 	.word	0x6d5f6572
   17cf8:	64617465 	.word	0x64617465
   17cfc:	3a617461 	.word	0x3a617461
   17d00:	756f6320 	.word	0x756f6320
   17d04:	6e20646c 	.word	0x6e20646c
   17d08:	7720746f 	.word	0x7720746f
   17d0c:	65746972 	.word	0x65746972
   17d10:	206f7420 	.word	0x206f7420
   17d14:	73616c66 	.word	0x73616c66
   17d18:	000d2168 	.word	0x000d2168
   17d1c:	61647075 	.word	0x61647075
   17d20:	625f6574 	.word	0x625f6574
   17d24:	5f746f6f 	.word	0x5f746f6f
   17d28:	74617473 	.word	0x74617473
   17d2c:	203a7375 	.word	0x203a7375
   17d30:	5f776f72 	.word	0x5f776f72
   17d34:	655f6f74 	.word	0x655f6f74
   17d38:	65736172 	.word	0x65736172
   17d3c:	6425203a 	.word	0x6425203a
   17d40:	00000a0d 	.word	0x00000a0d
   17d44:	61647075 	.word	0x61647075
   17d48:	625f6574 	.word	0x625f6574
   17d4c:	5f746f6f 	.word	0x5f746f6f
   17d50:	74617473 	.word	0x74617473
   17d54:	203a7375 	.word	0x203a7375
   17d58:	65676170 	.word	0x65676170
   17d5c:	5f6f745f 	.word	0x5f6f745f
   17d60:	74697277 	.word	0x74697277
   17d64:	25203a65 	.word	0x25203a65
   17d68:	000a0d64 	.word	0x000a0d64
   17d6c:	61647075 	.word	0x61647075
   17d70:	625f6574 	.word	0x625f6574
   17d74:	5f746f6f 	.word	0x5f746f6f
   17d78:	74617473 	.word	0x74617473
   17d7c:	203a7375 	.word	0x203a7375
   17d80:	5f776f72 	.word	0x5f776f72
   17d84:	72646461 	.word	0x72646461
   17d88:	3a737365 	.word	0x3a737365
   17d8c:	0d642520 	.word	0x0d642520
   17d90:	0000000a 	.word	0x0000000a
   17d94:	61647075 	.word	0x61647075
   17d98:	625f6574 	.word	0x625f6574
   17d9c:	5f746f6f 	.word	0x5f746f6f
   17da0:	74617473 	.word	0x74617473
   17da4:	203a7375 	.word	0x203a7375
   17da8:	65676170 	.word	0x65676170
   17dac:	66666f5f 	.word	0x66666f5f
   17db0:	3a746573 	.word	0x3a746573
   17db4:	0d642520 	.word	0x0d642520
   17db8:	0000000a 	.word	0x0000000a
   17dbc:	3a776f72 	.word	0x3a776f72
   17dc0:	34302520 	.word	0x34302520
   17dc4:	000a0d78 	.word	0x000a0d78
   17dc8:	61647075 	.word	0x61647075
   17dcc:	625f6574 	.word	0x625f6574
   17dd0:	5f746f6f 	.word	0x5f746f6f
   17dd4:	74617473 	.word	0x74617473
   17dd8:	77207375 	.word	0x77207375
   17ddc:	65746972 	.word	0x65746972
   17de0:	6f6f625f 	.word	0x6f6f625f
   17de4:	69732e74 	.word	0x69732e74
   17de8:	74616e67 	.word	0x74616e67
   17dec:	3a657275 	.word	0x3a657275
   17df0:	32302520 	.word	0x32302520
   17df4:	000a0d78 	.word	0x000a0d78
   17df8:	72617473 	.word	0x72617473
   17dfc:	676e6974 	.word	0x676e6974
   17e00:	65657320 	.word	0x65657320
   17e04:	25203a64 	.word	0x25203a64
   17e08:	0d783430 	.word	0x0d783430
   17e0c:	0000000a 	.word	0x0000000a
   17e10:	69726576 	.word	0x69726576
   17e14:	665f7966 	.word	0x665f7966
   17e18:	6873616c 	.word	0x6873616c
   17e1c:	7265203a 	.word	0x7265203a
   17e20:	20726f72 	.word	0x20726f72
   17e24:	69797274 	.word	0x69797274
   17e28:	7420676e 	.word	0x7420676e
   17e2c:	6572206f 	.word	0x6572206f
   17e30:	65206461 	.word	0x65206461
   17e34:	72657478 	.word	0x72657478
   17e38:	206c616e 	.word	0x206c616e
   17e3c:	73616c66 	.word	0x73616c66
   17e40:	25202e68 	.word	0x25202e68
   17e44:	00000064 	.word	0x00000064
   17e48:	202e6425 	.word	0x202e6425
   17e4c:	69726576 	.word	0x69726576
   17e50:	665f7966 	.word	0x665f7966
   17e54:	6873616c 	.word	0x6873616c
   17e58:	7263203a 	.word	0x7263203a
   17e5c:	61765f63 	.word	0x61765f63
   17e60:	25203a6c 	.word	0x25203a6c
   17e64:	000a0d64 	.word	0x000a0d64
   17e68:	69726576 	.word	0x69726576
   17e6c:	665f7966 	.word	0x665f7966
   17e70:	6873616c 	.word	0x6873616c
   17e74:	6572203a 	.word	0x6572203a
   17e78:	6e69616d 	.word	0x6e69616d
   17e7c:	20676e69 	.word	0x20676e69
   17e80:	65747962 	.word	0x65747962
   17e84:	64252073 	.word	0x64252073
   17e88:	00000a0d 	.word	0x00000a0d
   17e8c:	69726576 	.word	0x69726576
   17e90:	665f7966 	.word	0x665f7966
   17e94:	6873616c 	.word	0x6873616c
   17e98:	6163203a 	.word	0x6163203a
   17e9c:	6c75636c 	.word	0x6c75636c
   17ea0:	64657461 	.word	0x64657461
   17ea4:	63726320 	.word	0x63726320
   17ea8:	76203233 	.word	0x76203233
   17eac:	203a6c61 	.word	0x203a6c61
   17eb0:	0a0d6425 	.word	0x0a0d6425
   17eb4:	00000000 	.word	0x00000000
   17eb8:	5f315746 	.word	0x5f315746
   17ebc:	53415245 	.word	0x53415245
   17ec0:	44415f45 	.word	0x44415f45
   17ec4:	203a5244 	.word	0x203a5244
   17ec8:	0a0d6425 	.word	0x0a0d6425
   17ecc:	00000000 	.word	0x00000000
   17ed0:	726f7473 	.word	0x726f7473
   17ed4:	69665f65 	.word	0x69665f65
   17ed8:	705f656c 	.word	0x705f656c
   17edc:	656b6361 	.word	0x656b6361
   17ee0:	4e203a74 	.word	0x4e203a74
   17ee4:	6c66206f 	.word	0x6c66206f
   17ee8:	20687361 	.word	0x20687361
   17eec:	70696863 	.word	0x70696863
   17ef0:	00000d2e 	.word	0x00000d2e
   17ef4:	726f7473 	.word	0x726f7473
   17ef8:	69665f65 	.word	0x69665f65
   17efc:	705f656c 	.word	0x705f656c
   17f00:	656b6361 	.word	0x656b6361
   17f04:	65203a74 	.word	0x65203a74
   17f08:	726f7272 	.word	0x726f7272
   17f0c:	656c6320 	.word	0x656c6320
   17f10:	6e697261 	.word	0x6e697261
   17f14:	65732067 	.word	0x65732067
   17f18:	726f7463 	.word	0x726f7463
   17f1c:	6f727020 	.word	0x6f727020
   17f20:	74636574 	.word	0x74636574
   17f24:	20746120 	.word	0x20746120
   17f28:	72646461 	.word	0x72646461
   17f2c:	20737365 	.word	0x20737365
   17f30:	0d206425 	.word	0x0d206425
   17f34:	0000000a 	.word	0x0000000a
   17f38:	726f7473 	.word	0x726f7473
   17f3c:	69665f65 	.word	0x69665f65
   17f40:	705f656c 	.word	0x705f656c
   17f44:	656b6361 	.word	0x656b6361
   17f48:	65203a74 	.word	0x65203a74
   17f4c:	726f7272 	.word	0x726f7272
   17f50:	61726520 	.word	0x61726520
   17f54:	676e6973 	.word	0x676e6973
   17f58:	63657320 	.word	0x63657320
   17f5c:	20726f74 	.word	0x20726f74
   17f60:	61207461 	.word	0x61207461
   17f64:	65726464 	.word	0x65726464
   17f68:	25207373 	.word	0x25207373
   17f6c:	0a0d2064 	.word	0x0a0d2064
   17f70:	00000000 	.word	0x00000000
   17f74:	2077656e 	.word	0x2077656e
   17f78:	6d726966 	.word	0x6d726966
   17f7c:	65726177 	.word	0x65726177
   17f80:	72657620 	.word	0x72657620
   17f84:	6e6f6973 	.word	0x6e6f6973
   17f88:	6425203a 	.word	0x6425203a
   17f8c:	00000a0d 	.word	0x00000a0d
   17f90:	2077656e 	.word	0x2077656e
   17f94:	6d726966 	.word	0x6d726966
   17f98:	65726177 	.word	0x65726177
   17f9c:	65686320 	.word	0x65686320
   17fa0:	75736b63 	.word	0x75736b63
   17fa4:	25203a6d 	.word	0x25203a6d
   17fa8:	0d783430 	.word	0x0d783430
   17fac:	0000000a 	.word	0x0000000a
   17fb0:	726f7473 	.word	0x726f7473
   17fb4:	69665f65 	.word	0x69665f65
   17fb8:	705f656c 	.word	0x705f656c
   17fbc:	656b6361 	.word	0x656b6361
   17fc0:	65203a74 	.word	0x65203a74
   17fc4:	7974706d 	.word	0x7974706d
   17fc8:	74616420 	.word	0x74616420
   17fcc:	000d2e61 	.word	0x000d2e61
   17fd0:	726f7473 	.word	0x726f7473
   17fd4:	69665f65 	.word	0x69665f65
   17fd8:	705f656c 	.word	0x705f656c
   17fdc:	656b6361 	.word	0x656b6361
   17fe0:	555b2074 	.word	0x555b2074
   17fe4:	54414450 	.word	0x54414450
   17fe8:	48435f45 	.word	0x48435f45
   17fec:	5d4b4345 	.word	0x5d4b4345
   17ff0:	6966203a 	.word	0x6966203a
   17ff4:	5b20656c 	.word	0x5b20656c
   17ff8:	62206425 	.word	0x62206425
   17ffc:	73657479 	.word	0x73657479
   18000:	6f64205d 	.word	0x6f64205d
   18004:	6e207365 	.word	0x6e207365
   18008:	6d20746f 	.word	0x6d20746f
   1800c:	68637461 	.word	0x68637461
   18010:	61656820 	.word	0x61656820
   18014:	20726564 	.word	0x20726564
   18018:	2064255b 	.word	0x2064255b
   1801c:	65747962 	.word	0x65747962
   18020:	73205d73 	.word	0x73205d73
   18024:	0d657a69 	.word	0x0d657a69
   18028:	0000000a 	.word	0x0000000a
   1802c:	72617473 	.word	0x72617473
   18030:	676e6974 	.word	0x676e6974
   18034:	6c617620 	.word	0x6c617620
   18038:	0000203a 	.word	0x0000203a
   1803c:	726f7473 	.word	0x726f7473
   18040:	69665f65 	.word	0x69665f65
   18044:	705f656c 	.word	0x705f656c
   18048:	656b6361 	.word	0x656b6361
   1804c:	65203a74 	.word	0x65203a74
   18050:	726f7272 	.word	0x726f7272
   18054:	69727720 	.word	0x69727720
   18058:	676e6974 	.word	0x676e6974
   1805c:	776f7220 	.word	0x776f7220
   18060:	20746120 	.word	0x20746120
   18064:	72646461 	.word	0x72646461
   18068:	20737365 	.word	0x20737365
   1806c:	0d206425 	.word	0x0d206425
   18070:	0000000a 	.word	0x0000000a
   18074:	726f7473 	.word	0x726f7473
   18078:	69665f65 	.word	0x69665f65
   1807c:	705f656c 	.word	0x705f656c
   18080:	656b6361 	.word	0x656b6361
   18084:	72203a74 	.word	0x72203a74
   18088:	69656365 	.word	0x69656365
   1808c:	5b646576 	.word	0x5b646576
   18090:	5d756c25 	.word	0x5d756c25
   18094:	6966202c 	.word	0x6966202c
   18098:	7320656c 	.word	0x7320656c
   1809c:	5b657a69 	.word	0x5b657a69
   180a0:	5d756c25 	.word	0x5d756c25
   180a4:	00000a0d 	.word	0x00000a0d
   180a8:	726f7473 	.word	0x726f7473
   180ac:	69665f65 	.word	0x69665f65
   180b0:	705f656c 	.word	0x705f656c
   180b4:	656b6361 	.word	0x656b6361
   180b8:	66203a74 	.word	0x66203a74
   180bc:	20656c69 	.word	0x20656c69
   180c0:	6e776f64 	.word	0x6e776f64
   180c4:	64616f6c 	.word	0x64616f6c
   180c8:	73206465 	.word	0x73206465
   180cc:	65636375 	.word	0x65636375
   180d0:	75667373 	.word	0x75667373
   180d4:	2e796c6c 	.word	0x2e796c6c
   180d8:	0000000d 	.word	0x0000000d
   180dc:	726f7473 	.word	0x726f7473
   180e0:	69665f65 	.word	0x69665f65
   180e4:	705f656c 	.word	0x705f656c
   180e8:	656b6361 	.word	0x656b6361
   180ec:	66203a74 	.word	0x66203a74
   180f0:	6873616c 	.word	0x6873616c
   180f4:	63757320 	.word	0x63757320
   180f8:	73736563 	.word	0x73736563
   180fc:	6c6c7566 	.word	0x6c6c7566
   18100:	72772079 	.word	0x72772079
   18104:	65747469 	.word	0x65747469
   18108:	6977206e 	.word	0x6977206e
   1810c:	6e206874 	.word	0x6e206874
   18110:	7265206f 	.word	0x7265206f
   18114:	73726f72 	.word	0x73726f72
   18118:	0000000d 	.word	0x0000000d
   1811c:	726f7473 	.word	0x726f7473
   18120:	69665f65 	.word	0x69665f65
   18124:	705f656c 	.word	0x705f656c
   18128:	656b6361 	.word	0x656b6361
   1812c:	66203a74 	.word	0x66203a74
   18130:	6873616c 	.word	0x6873616c
   18134:	726f6320 	.word	0x726f6320
   18138:	74707572 	.word	0x74707572
   1813c:	0d2e6465 	.word	0x0d2e6465
   18140:	00000000 	.word	0x00000000
   18144:	726f7473 	.word	0x726f7473
   18148:	69665f65 	.word	0x69665f65
   1814c:	705f656c 	.word	0x705f656c
   18150:	656b6361 	.word	0x656b6361
   18154:	66203a74 	.word	0x66203a74
   18158:	20656c69 	.word	0x20656c69
   1815c:	63656863 	.word	0x63656863
   18160:	6d75736b 	.word	0x6d75736b
   18164:	6f642073 	.word	0x6f642073
   18168:	2074276e 	.word	0x2074276e
   1816c:	6374616d 	.word	0x6374616d
   18170:	0a0d2e68 	.word	0x0a0d2e68
   18174:	70784520 	.word	0x70784520
   18178:	65746365 	.word	0x65746365
   1817c:	68632064 	.word	0x68632064
   18180:	736b6365 	.word	0x736b6365
   18184:	25206d75 	.word	0x25206d75
   18188:	0d783430 	.word	0x0d783430
   1818c:	6552200a 	.word	0x6552200a
   18190:	76696563 	.word	0x76696563
   18194:	63206465 	.word	0x63206465
   18198:	6b636568 	.word	0x6b636568
   1819c:	206d7573 	.word	0x206d7573
   181a0:	78343025 	.word	0x78343025
   181a4:	00000a0d 	.word	0x00000a0d
   181a8:	70747468 	.word	0x70747468
   181ac:	696c635f 	.word	0x696c635f
   181b0:	5f746e65 	.word	0x5f746e65
   181b4:	6c6c6163 	.word	0x6c6c6163
   181b8:	6b636162 	.word	0x6b636162
   181bc:	5448203a 	.word	0x5448203a
   181c0:	63205054 	.word	0x63205054
   181c4:	6e65696c 	.word	0x6e65696c
   181c8:	6f732074 	.word	0x6f732074
   181cc:	74656b63 	.word	0x74656b63
   181d0:	6e6f6320 	.word	0x6e6f6320
   181d4:	7463656e 	.word	0x7463656e
   181d8:	0d2e6465 	.word	0x0d2e6465
   181dc:	00000000 	.word	0x00000000
   181e0:	70747468 	.word	0x70747468
   181e4:	696c635f 	.word	0x696c635f
   181e8:	5f746e65 	.word	0x5f746e65
   181ec:	6c6c6163 	.word	0x6c6c6163
   181f0:	6b636162 	.word	0x6b636162
   181f4:	6572203a 	.word	0x6572203a
   181f8:	73657571 	.word	0x73657571
   181fc:	6f632074 	.word	0x6f632074
   18200:	656c706d 	.word	0x656c706d
   18204:	2e646574 	.word	0x2e646574
   18208:	0000000d 	.word	0x0000000d
   1820c:	70747468 	.word	0x70747468
   18210:	696c635f 	.word	0x696c635f
   18214:	5f746e65 	.word	0x5f746e65
   18218:	6c6c6163 	.word	0x6c6c6163
   1821c:	6b636162 	.word	0x6b636162
   18220:	6572203a 	.word	0x6572203a
   18224:	76696563 	.word	0x76696563
   18228:	72206465 	.word	0x72206465
   1822c:	6f707365 	.word	0x6f707365
   18230:	2065736e 	.word	0x2065736e
   18234:	64207525 	.word	0x64207525
   18238:	20617461 	.word	0x20617461
   1823c:	657a6973 	.word	0x657a6973
   18240:	0d752520 	.word	0x0d752520
   18244:	0000000a 	.word	0x0000000a
   18248:	70747468 	.word	0x70747468
   1824c:	696c635f 	.word	0x696c635f
   18250:	5f746e65 	.word	0x5f746e65
   18254:	6c6c6163 	.word	0x6c6c6163
   18258:	6b636162 	.word	0x6b636162
   1825c:	6964203a 	.word	0x6964203a
   18260:	6e6f6373 	.word	0x6e6f6373
   18264:	7463656e 	.word	0x7463656e
   18268:	206e6f69 	.word	0x206e6f69
   1826c:	73616572 	.word	0x73616572
   18270:	253a6e6f 	.word	0x253a6e6f
   18274:	000a0d64 	.word	0x000a0d64
   18278:	666e6f63 	.word	0x666e6f63
   1827c:	72756769 	.word	0x72756769
   18280:	74685f65 	.word	0x74685f65
   18284:	635f7074 	.word	0x635f7074
   18288:	6e65696c 	.word	0x6e65696c
   1828c:	48203a74 	.word	0x48203a74
   18290:	20505454 	.word	0x20505454
   18294:	65696c63 	.word	0x65696c63
   18298:	6920746e 	.word	0x6920746e
   1829c:	6974696e 	.word	0x6974696e
   182a0:	7a696c61 	.word	0x7a696c61
   182a4:	6f697461 	.word	0x6f697461
   182a8:	6166206e 	.word	0x6166206e
   182ac:	64656c69 	.word	0x64656c69
   182b0:	72282021 	.word	0x72282021
   182b4:	25207365 	.word	0x25207365
   182b8:	0a0d2964 	.word	0x0a0d2964
   182bc:	00000000 	.word	0x00000000
   182c0:	6f736572 	.word	0x6f736572
   182c4:	5f65766c 	.word	0x5f65766c
   182c8:	203a6263 	.word	0x203a6263
   182cc:	49207325 	.word	0x49207325
   182d0:	64612050 	.word	0x64612050
   182d4:	73657264 	.word	0x73657264
   182d8:	73692073 	.word	0x73692073
   182dc:	2e642520 	.word	0x2e642520
   182e0:	252e6425 	.word	0x252e6425
   182e4:	64252e64 	.word	0x64252e64
   182e8:	0a0d0a0d 	.word	0x0a0d0a0d
   182ec:	00000000 	.word	0x00000000
   182f0:	69666977 	.word	0x69666977
   182f4:	6c61635f 	.word	0x6c61635f
   182f8:	6361626c 	.word	0x6361626c
   182fc:	4d5b206b 	.word	0x4d5b206b
   18300:	575f4d32 	.word	0x575f4d32
   18304:	5f494649 	.word	0x5f494649
   18308:	50534552 	.word	0x50534552
   1830c:	4e4f435f 	.word	0x4e4f435f
   18310:	4154535f 	.word	0x4154535f
   18314:	435f4554 	.word	0x435f4554
   18318:	474e4148 	.word	0x474e4148
   1831c:	3a5d4445 	.word	0x3a5d4445
   18320:	6e6f6320 	.word	0x6e6f6320
   18324:	7463656e 	.word	0x7463656e
   18328:	0d2e6465 	.word	0x0d2e6465
   1832c:	00000000 	.word	0x00000000
   18330:	69666977 	.word	0x69666977
   18334:	6c61635f 	.word	0x6c61635f
   18338:	6361626c 	.word	0x6361626c
   1833c:	4d5b206b 	.word	0x4d5b206b
   18340:	575f4d32 	.word	0x575f4d32
   18344:	5f494649 	.word	0x5f494649
   18348:	50534552 	.word	0x50534552
   1834c:	4e4f435f 	.word	0x4e4f435f
   18350:	4154535f 	.word	0x4154535f
   18354:	435f4554 	.word	0x435f4554
   18358:	474e4148 	.word	0x474e4148
   1835c:	205d4445 	.word	0x205d4445
   18360:	63736964 	.word	0x63736964
   18364:	656e6e6f 	.word	0x656e6e6f
   18368:	64657463 	.word	0x64657463
   1836c:	00000d2e 	.word	0x00000d2e
   18370:	69666977 	.word	0x69666977
   18374:	6c61635f 	.word	0x6c61635f
   18378:	6361626c 	.word	0x6361626c
   1837c:	4d5b206b 	.word	0x4d5b206b
   18380:	575f4d32 	.word	0x575f4d32
   18384:	5f494649 	.word	0x5f494649
   18388:	5f514552 	.word	0x5f514552
   1838c:	50434844 	.word	0x50434844
   18390:	4e4f435f 	.word	0x4e4f435f
   18394:	203a5d46 	.word	0x203a5d46
   18398:	61205049 	.word	0x61205049
   1839c:	65726464 	.word	0x65726464
   183a0:	69207373 	.word	0x69207373
   183a4:	75252073 	.word	0x75252073
   183a8:	2e75252e 	.word	0x2e75252e
   183ac:	252e7525 	.word	0x252e7525
   183b0:	000a0d75 	.word	0x000a0d75
   183b4:	69666977 	.word	0x69666977
   183b8:	6c61635f 	.word	0x6c61635f
   183bc:	6361626c 	.word	0x6361626c
   183c0:	645b206b 	.word	0x645b206b
   183c4:	75616665 	.word	0x75616665
   183c8:	3a5d746c 	.word	0x3a5d746c
   183cc:	52524520 	.word	0x52524520
   183d0:	6520524f 	.word	0x6520524f
   183d4:	25207476 	.word	0x25207476
   183d8:	000a0d64 	.word	0x000a0d64
   183dc:	50726941 	.word	0x50726941
   183e0:	4e6e6e65 	.word	0x4e6e6e65
   183e4:	442d7465 	.word	0x442d7465
   183e8:	63697665 	.word	0x63697665
   183ec:	00000065 	.word	0x00000065
   183f0:	6e6e6570 	.word	0x6e6e6570
   183f4:	30343731 	.word	0x30343731
   183f8:	69666977 	.word	0x69666977
   183fc:	00000000 	.word	0x00000000
   18400:	70747468 	.word	0x70747468
   18404:	772f2f3a 	.word	0x772f2f3a
   18408:	732e7777 	.word	0x732e7777
   1840c:	2e736165 	.word	0x2e736165
   18410:	6e657075 	.word	0x6e657075
   18414:	64652e6e 	.word	0x64652e6e
   18418:	777e2f75 	.word	0x777e2f75
   1841c:	68637261 	.word	0x68637261
   18420:	652f7265 	.word	0x652f7265
   18424:	31356573 	.word	0x31356573
   18428:	656d2f36 	.word	0x656d2f36
   1842c:	61646174 	.word	0x61646174
   18430:	622e6174 	.word	0x622e6174
   18434:	00006e69 	.word	0x00006e69
   18438:	70747468 	.word	0x70747468
   1843c:	772f2f3a 	.word	0x772f2f3a
   18440:	732e7777 	.word	0x732e7777
   18444:	2e736165 	.word	0x2e736165
   18448:	6e657075 	.word	0x6e657075
   1844c:	64652e6e 	.word	0x64652e6e
   18450:	777e2f75 	.word	0x777e2f75
   18454:	68637261 	.word	0x68637261
   18458:	652f7265 	.word	0x652f7265
   1845c:	31356573 	.word	0x31356573
   18460:	65742f36 	.word	0x65742f36
   18464:	662d7473 	.word	0x662d7473
   18468:	776d7269 	.word	0x776d7269
   1846c:	2e657261 	.word	0x2e657261
   18470:	006e6962 	.word	0x006e6962
   18474:	6c696166 	.word	0x6c696166
   18478:	74206465 	.word	0x74206465
   1847c:	6e69206f 	.word	0x6e69206f
   18480:	61697469 	.word	0x61697469
   18484:	657a696c 	.word	0x657a696c
   18488:	66697720 	.word	0x66697720
   1848c:	61702069 	.word	0x61702069
   18490:	656d6172 	.word	0x656d6172
   18494:	73726574 	.word	0x73726574
   18498:	0000000d 	.word	0x0000000d
   1849c:	202d2d2d 	.word	0x202d2d2d
   184a0:	636c6557 	.word	0x636c6557
   184a4:	20656d6f 	.word	0x20656d6f
   184a8:	41206f74 	.word	0x41206f74
   184ac:	4e495754 	.word	0x4e495754
   184b0:	35312043 	.word	0x35312043
   184b4:	43203030 	.word	0x43203030
   184b8:	656e6e6f 	.word	0x656e6e6f
   184bc:	6f697463 	.word	0x6f697463
   184c0:	6554206e 	.word	0x6554206e
   184c4:	2d207473 	.word	0x2d207473
   184c8:	000d2d2d 	.word	0x000d2d2d
   184cc:	6e69616d 	.word	0x6e69616d
   184d0:	6f63203a 	.word	0x6f63203a
   184d4:	63656e6e 	.word	0x63656e6e
   184d8:	676e6974 	.word	0x676e6974
   184dc:	206f7420 	.word	0x206f7420
   184e0:	69466957 	.word	0x69466957
   184e4:	20504120 	.word	0x20504120
   184e8:	2e2e7325 	.word	0x2e2e7325
   184ec:	000a0d2e 	.word	0x000a0d2e
   184f0:	63637573 	.word	0x63637573
   184f4:	66737365 	.word	0x66737365
   184f8:	796c6c75 	.word	0x796c6c75
   184fc:	6e6f6320 	.word	0x6e6f6320
   18500:	7463656e 	.word	0x7463656e
   18504:	00006465 	.word	0x00006465
   18508:	00001dba 	.word	0x00001dba
   1850c:	00001dc4 	.word	0x00001dc4
   18510:	00001dd4 	.word	0x00001dd4
   18514:	00001e22 	.word	0x00001e22
   18518:	00001e34 	.word	0x00001e34
   1851c:	00002612 	.word	0x00002612
   18520:	00002616 	.word	0x00002616
   18524:	0000261a 	.word	0x0000261a
   18528:	0000261e 	.word	0x0000261e
   1852c:	00002622 	.word	0x00002622
   18530:	00002626 	.word	0x00002626
   18534:	0000262a 	.word	0x0000262a
   18538:	0000262e 	.word	0x0000262e
   1853c:	00002632 	.word	0x00002632
   18540:	00002636 	.word	0x00002636
   18544:	0000268e 	.word	0x0000268e
   18548:	00002694 	.word	0x00002694
   1854c:	0000269a 	.word	0x0000269a
   18550:	000026a0 	.word	0x000026a0
   18554:	000026a0 	.word	0x000026a0
   18558:	000026a6 	.word	0x000026a6
   1855c:	000026a6 	.word	0x000026a6
   18560:	000026a6 	.word	0x000026a6
   18564:	000026ac 	.word	0x000026ac
   18568:	000026b2 	.word	0x000026b2
   1856c:	50504128 	.word	0x50504128
   18570:	52452829 	.word	0x52452829
   18574:	255b2952 	.word	0x255b2952
   18578:	255b5d73 	.word	0x255b5d73
   1857c:	00005d64 	.word	0x00005d64
   18580:	61766e69 	.word	0x61766e69
   18584:	6564696c 	.word	0x6564696c
   18588:	636f6920 	.word	0x636f6920
   1858c:	6320746c 	.word	0x6320746c
   18590:	0000646d 	.word	0x0000646d

00018594 <__FUNCTION__.15082>:
   18594:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   185a4:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   185b4:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   185c4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   185d4:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   185e4:	74207075 63206568 00706968 66696828     up the chip.(hif
   185f4:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   18604:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   18614:	66696828 64612029 73657264 75622073     (hif) address bu
   18624:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   18634:	70757272 20646574 6b636170 53207465     rrupted packet S
   18644:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   18654:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   18664:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   18674:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   18684:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   18694:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   186a4:	73696765 65726574 00000064 2061744f     egistered...Ota 
   186b4:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   186c4:	69676572 72657473 00006465 70797243     registered..Cryp
   186d4:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   186e4:	7220746f 73696765 65726574 00000064     ot registered...
   186f4:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   18704:	6f6e2073 65722074 74736967 64657265     s not registered
   18714:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   18724:	72672064 2070756f 00004449 66696828     d group ID..(hif
   18734:	6f682029 61207473 64207070 276e6469     ) host app didn'
   18744:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   18754:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   18764:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   18774:	61462029 2065736c 65746e69 70757272     ) False interrup
   18784:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   18794:	74206c69 6552206f 69206461 7265746e     il to Read inter
   187a4:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   187b4:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   187c4:	746e6920 75727265 25207470 72742064      interrupt %d tr
   187d4:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   187e4:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   187f4:	72612064 656d7567 0000746e 20505041     d argument..APP 
   18804:	75716552 65747365 69532064 6920657a     Requested Size i
   18814:	616c2073 72656772 61687420 6874206e     s larger than th
   18824:	65722065 65766963 75622064 72656666     e recived buffer
   18834:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   18844:	00000000 20505041 75716552 65747365     ....APP Requeste
   18854:	64412064 73657264 65622073 646e6f79     d Address beyond
   18864:	65687420 63657220 64657669 66756220      the recived buf
   18874:	20726566 72646461 20737365 20646e61     fer address and 
   18884:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   18894:	0000000a 000048a0 00004870 00004868     .....H..pH..hH..
   188a4:	00004880 00004878 00004898 00004888     .H..xH...H...H..
   188b4:	00004890                                .H..

000188b8 <__FUNCTION__.13073>:
   188b8:	5f666968 646e6573 00000000              hif_send....

000188c4 <__FUNCTION__.13083>:
   188c4:	5f666968 00727369                       hif_isr.

000188cc <__FUNCTION__.13089>:
   188cc:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000188dc <__FUNCTION__.13101>:
   188dc:	5f666968 65636572 00657669              hif_receive.

000188e8 <__FUNCTION__.13117>:
   188e8:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   188f8:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   18908:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   18918:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   18928:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   18938:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   18948:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   18958:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   18968:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   18978:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   18988:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   18998:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   189a8:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   189b8:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   189c8:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   189d8:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   189e8:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   189f8:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   18a08:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   18a18:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   18a28:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   18a38:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   18a48:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   18a58:	73747365 72657020 61637320 6c73206e     ests per scan sl
   18a68:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   18a78:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   18a88:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   18a98:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   18aa8:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   18ab8:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   18ac8:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   18ad8:	6e694d20 69726420 20726576 20726576      Min driver ver 
   18ae8:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   18af8:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   18b08:	0000000a 313a3030 39343a32 00000000     ....00:12:49....
   18b18:	20727041 32203432 00383130 76697244     Apr 24 2018.Driv
   18b28:	62207265 746c6975 20746120 25097325     er built at %s.%
   18b38:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   18b48:	7277616d 65562065 6f697372 0000006e     mawre Version...
   18b58:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   18b68:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   18b78:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   18b88:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   18b98:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   18ba8:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   18bb8:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   18bc8:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   18bd8:	53502074 656b204b 656c2079 6874676e     t PSK key length
   18be8:	00000000 65646e75 656e6966 65732064     ....undefined se
   18bf8:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   18c08:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   18c18:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   18c28:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   18c38:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   18c48:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   18c58:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   18c68:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   18c78:	66754220 20726566 65637865 64656465      Buffer exceeded
   18c88:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   18c98:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   18ca8:	00000000                                ....

00018cac <__FUNCTION__.13052>:
   18cac:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00018cb8 <__FUNCTION__.13081>:
   18cb8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00018cc8 <__FUNCTION__.13109>:
   18cc8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   18cd8:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   18ce8:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   18cf8:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   18d08:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   18d18:	20656874 70696863 00000000 50504128     the chip....(APP
   18d28:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   18d38:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   18d48:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   18d58:	6c616974 00657a69                       tialize.

00018d60 <__FUNCTION__.12915>:
   18d60:	70696863 6b61775f 00000065              chip_wake...

00018d6c <__FUNCTION__.12964>:
   18d6c:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   18d7c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   18d8c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   18d9c:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   18dac:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   18dbc:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   18dcc:	6e65206f 656c6261 746e6920 75727265     o enable interru
   18ddc:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   18dec:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   18dfc:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   18e0c:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   18e1c:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   18e2c:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   18e3c:	75622074 00000073                       t bus...

00018e44 <__FUNCTION__.12962>:
   18e44:	645f6d6e 695f7672 0074696e              nm_drv_init.

00018e50 <__FUNCTION__.12969>:
   18e50:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00018e60 <crc7_syndrome_table>:
   18e60:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   18e70:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   18e80:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   18e90:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   18ea0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   18eb0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   18ec0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   18ed0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   18ee0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   18ef0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   18f00:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   18f10:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   18f20:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   18f30:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   18f40:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   18f50:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   18f60:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   18f70:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   18f80:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   18f90:	73756220 72726520 2e2e726f 0000002e      bus error......
   18fa0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18fb0:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   18fc0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18fd0:	61642064 72206174 6f707365 2065736e     d data response 
   18fe0:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   18ff0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19000:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   19010:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   19020:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19030:	656c6961 61642064 72206174 6f707365     ailed data respo
   19040:	2065736e 64616572 7562202c 72652073     nse read, bus er
   19050:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   19060:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   19070:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   19080:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   19090:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   190a0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   190b0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   190c0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   190d0:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   190e0:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   190f0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   19100:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   19110:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   19120:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19130:	656c6961 61642064 62206174 6b636f6c     ailed data block
   19140:	69727720 202c6574 20737562 6f727265      write, bus erro
   19150:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   19160:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   19170:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   19180:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   19190:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   191a0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   191b0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   191c0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   191d0:	65722064 6e6f7073 202c6573 74697277     d response, writ
   191e0:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   191f0:	00000000 65736552 6e612074 65722064     ....Reset and re
   19200:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   19210:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19220:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   19230:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   19240:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   19250:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   19260:	69727720 62206574 6b636f6c 30252820      write block (%0
   19270:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   19280:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   19290:	61746164 69727720 2e2e6574 0000002e     data write......
   192a0:	65736552 6e612074 65722064 20797274     Reset and retry 
   192b0:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   192c0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   192d0:	72202c64 20646165 20676572 38302528     d, read reg (%08
   192e0:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   192f0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   19300:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   19310:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   19320:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   19330:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   19340:	6e612074 65722064 20797274 25206425     t and retry %d %
   19350:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   19360:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   19370:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   19380:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19390:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   193a0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   193b0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   193c0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   193d0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   193e0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   193f0:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   19400:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   19410:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   19420:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   19430:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19440:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   19450:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   19460:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19470:	6e692064 6e726574 77206c61 65746972     d internal write
   19480:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   19490:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   194a0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   194b0:	64692070 002e2e2e 0000645c 0000645c     p id....\d..\d..
   194c0:	000064ec 000063b0 000063f6 00006418     .d...c...c...d..
   194d0:	0000649e 0000649e 00006558 00006384     .d...d..Xe...c..
   194e0:	000065b2 000065b2 000065b2 000065b2     .e...e...e...e..
   194f0:	0000643a                                :d..

000194f4 <__FUNCTION__.12268>:
   194f4:	5f697073 00646d63                       spi_cmd.

000194fc <__FUNCTION__.12275>:
   194fc:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001950c <__FUNCTION__.12284>:
   1950c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00019518 <__FUNCTION__.12300>:
   19518:	5f697073 61746164 6165725f 00000064     spi_data_read...

00019528 <__FUNCTION__.12315>:
   19528:	5f697073 61746164 6972775f 00006574     spi_data_write..

00019538 <__FUNCTION__.12327>:
   19538:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00019548 <__FUNCTION__.12338>:
   19548:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00019558 <__FUNCTION__.12350>:
   19558:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00019568 <__FUNCTION__.12363>:
   19568:	735f6d6e 725f6970 00646165              nm_spi_read.

00019574 <__FUNCTION__.12384>:
   19574:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   19584:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   19594:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   195a4:	25207465 65732064 6f697373 4449206e     et %d session ID
   195b4:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   195c4:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   195d4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   195e4:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   195f4:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   19604:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   19614:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   19624:	204c5353 6b636f53 00007465 000091cc     SSL Socket......
   19634:	000091cc 000091c0 000091cc 000091c0     ................
   19644:	0000919a 0000919a 000091cc 000091cc     ................
   19654:	000091cc 000091cc 000091cc 000091cc     ................
   19664:	000091cc 000091cc 000091cc 000091cc     ................
   19674:	000091cc 000091cc 000091cc 000091cc     ................
   19684:	000091cc 000091cc 000091cc 000091cc     ................
   19694:	000091cc 000091cc 000091cc 000091cc     ................
   196a4:	000091cc 000091cc 000091cc 000091cc     ................
   196b4:	000091cc 000091cc 000091cc 000091cc     ................
   196c4:	000091cc 000091cc 000091cc 000091cc     ................
   196d4:	000091cc 000091cc 000091cc 000091cc     ................
   196e4:	000091cc 000091cc 000091cc 000091cc     ................
   196f4:	000091cc 000091cc 000091cc 000091cc     ................
   19704:	000091cc 000091cc 000091cc 000091cc     ................
   19714:	000091cc 000091cc 000091cc 000091cc     ................
   19724:	000091cc 000091cc 000091cc 000091c0     ................
   19734:	000091c0 000091d6 000091d6 000091d6     ................
   19744:	000091d6                                ....

00019748 <tcc_modules>:
   19748:	42002000 42002400 42002800              . .B.$.B.(.B

00019754 <_tcc_gclk_ids>:
   19754:	001b1a1a                                ....

00019758 <_tcc_apbcmasks>:
   19758:	00000100 00000200 00000400              ............

00019764 <_tcc_maxs>:
   19764:	00ffffff 00ffffff 0000ffff              ............

00019770 <_tcc_cc_nums>:
   19770:	00020204                                ....

00019774 <_tcc_ow_nums>:
   19774:	00020408                                ....

00019778 <_tcc_intflag>:
   19778:	00000001 00000002 00000004 00000008     ................
   19788:	00001000 00002000 00004000 00008000     ..... ...@......
   19798:	00010000 00020000 00040000 00080000     ................
   197a8:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   197b8:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   197c8:	20544547 00000000 54534f50 00000020     GET ....POST ...
   197d8:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   197e8:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   197f8:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   19808:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   19818:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   19828:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   19838:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   19848:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   19858:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   19868:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   19878:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   19888:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   19898:	676e654c 203a6874 00000000 33323130     Length: ....0123
   198a8:	37363534 62613938 66656463 6e617254     456789abcdefTran
   198b8:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   198c8:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   198d8:	50545448 0000002f 00000d31 0000b1fa     HTTP/...1.......
   198e8:	0000b1f4 0000b1ee 0000b1e8 0000b200     ................
   198f8:	0000b1e2 0000b200 0000b1dc 0000b1d6     ................
   19908:	0000b200 0000b1d0 0000b1d0 0000b1ca     ................
   19918:	0000b1c4 0000b1be 42002000 42002400     ......... .B.$.B
   19928:	42002800                                .(.B

0001992c <main_mqtt_broker>:
   1992c:	74656564 6165732e 70752e73 2e6e6e65     deet.seas.upenn.
   1993c:	00756465 462d6957 6f632069 63656e6e     edu.Wi-Fi connec
   1994c:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
   1995c:	6e6f6373 7463656e 000d6465 6e6e6570     sconnected..penn
   1996c:	30343731 69666977 00000000 50726941     1740wifi....AirP
   1997c:	4e6e6e65 442d7465 63697665 00000065     ennNet-Device...
   1998c:	462d6957 50492069 20736920 252e7525     Wi-Fi IP is %u.%
   1999c:	75252e75 0d75252e 0000000a 6d726966     u.%u.%u.....firm
   199ac:	65726177 0000002f 6e6e6f43 20746365     ware/...Connect 
   199bc:	6c696166 206f7420 76726573 25287265     fail to server(%
   199cc:	20212973 72746572 74692079 74756120     s)! retry it aut
   199dc:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   199ec:	2f30672f 706d7570 7269662f 7261776d     /g0/pump/firmwar
   199fc:	00232f65 2f30672f 616c6572 662f3179     e/#./g0/relay1/f
   19a0c:	776d7269 2f657261 00000023 2f30672f     irmware/#.../g0/
   19a1c:	616c6572 662f3279 776d7269 2f657261     relay2/firmware/
   19a2c:	00000023 2f30672f 2f64656c 6d726966     #.../g0/led/firm
   19a3c:	65726177 0000232f 2f30672f 72677075     ware/#../g0/upgr
   19a4c:	2f656461 6d726966 65726177 0000232f     ade/firmware/#..
   19a5c:	2f30672f 73726576 2f6e6f69 6d726966     /g0/version/firm
   19a6c:	65726177 0000232f 70657250 74617261     ware/#..Preparat
   19a7c:	206e6f69 4d20666f 20545451 20736168     ion of MQTT has 
   19a8c:	6e656562 6d6f6320 74656c70 0d2e6465     been completed..
   19a9c:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   19aac:	6c636564 64656e69 756f7920 63612072     declined your ac
   19abc:	73736563 72652021 20726f72 65646f63     cess! error code
   19acc:	0d642520 0000000a 2f30672f 706d7570      %d...../g0/pump
   19adc:	7269662f 7261776d 00002f65 3e207325     /firmware/..%s >
   19aec:	0000203e 2f30672f 616c6572 662f3179     > ../g0/relay1/f
   19afc:	776d7269 2f657261 00000000 00006e6f     irmware/....on..
   19b0c:	0066666f 2f30672f 2f64656c 6d726966     off./g0/led/firm
   19b1c:	65726177 0000002f 2f30672f 616c6572     ware/.../g0/rela
   19b2c:	662f3279 776d7269 2f657261 00000000     y2/firmware/....
   19b3c:	2f30672f 72677075 2f656461 6d726966     /g0/upgrade/firm
   19b4c:	65726177 0000002f 6e6b6e55 206e776f     ware/...Unknown 
   19b5c:	69706f74 25203a63 00000073 0000000d     topic: %s.......
   19b6c:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
   19b7c:	00000d64 656d6954 6e652072 656c6261     d...Timer enable
   19b8c:	000d2e64 5454514d 696e6920 6c616974     d...MQTT initial
   19b9c:	74617a69 206e6f69 6c696166 202e6465     ization failed. 
   19bac:	6f727245 6f632072 69206564 25282073     Error code is (%
   19bbc:	0a0d2964 00000000 5454514d 67657220     d)......MQTT reg
   19bcc:	65747369 61632072 61626c6c 66206b63     ister callback f
   19bdc:	656c6961 45202e64 726f7272 646f6320     ailed. Error cod
   19bec:	73692065 64252820 000a0d29 5454514d     e is (%d)...MQTT
   19bfc:	6e6f4320 75676966 2e646572 0000000d      Configured.....
   19c0c:	74696e49 696c6169 676e697a 0d2e2e2e     Initializing....
   19c1c:	00000000 6e69616d 326d203a 69775f6d     ....main: m2m_wi
   19c2c:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
   19c3c:	2821726f 0d296425 0000000a 6e69616d     or!(%d).....main
   19c4c:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   19c5c:	6c6c6163 63757320 73736563 64252821     call success!(%d
   19c6c:	000a0d29 6b636f53 20737465 74696e69     )...Sockets init
   19c7c:	696c6169 2e64657a 0000000d 2f30672f     ialized...../g0/
   19c8c:	73726576 2f6e6f69 6d726966 65726177     version/firmware
   19c9c:	0000002f 6c627550 69687369 7620676e     /...Publishing v
   19cac:	69737265 74206e6f 7325206f 00000a0d     ersion to %s....
   19cbc:	2e302e30 00000030 706d6554 74617265     0.0.0...Temperat
   19ccc:	3a657275 0d662520 0000000a 696d7548     ure: %f.....Humi
   19cdc:	79746964 6625203a 00000a0d 00006625     dity: %f....%f..
   19cec:	2f30672f 706d6574 7269662f 7261776d     /g0/temp/firmwar
   19cfc:	00002f65 2f30672f 2f6d7568 6d726966     e/../g0/hum/firm
   19d0c:	65726177 0000002f 3a78754c 0d642520     ware/...Lux: %d.
   19d1c:	0000000a 00006425 2f30672f 2f78756c     ....%d../g0/lux/
   19d2c:	6d726966 65726177 0000002f 73696f4d     firmware/...Mois
   19d3c:	65727574 2e25203a 0d663230 0000000a     ture: %.02f.....
   19d4c:	32302e25 00000066 2f30672f 73696f6d     %.02f.../g0/mois
   19d5c:	69662f74 61776d72 002f6572 00000002     t/firmware/.....
   19d6c:	00000003 00000028 00000029 00000004     ....(...).......
   19d7c:	00000005 00000006 00000007 0000ffff     ................
   19d8c:	0000ffff 00000022 00000023 0000ffff     ...."...#.......
   19d9c:	0000ffff 0000ffff 0000ffff 00000008     ................
   19dac:	00000009 0000000a 0000000b 0000d7be     ................
   19dbc:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19dcc:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19ddc:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19dec:	0000d7c4 0000d7c4 0000d7c4 0000d79c     ................
   19dfc:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19e0c:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19e1c:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19e2c:	0000d7c4 0000d7c4 0000d7c4 0000d7b8     ................
   19e3c:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19e4c:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19e5c:	0000d7c4 0000d7c4 0000d7c4 0000d7c4     ................
   19e6c:	0000d7c4 0000d7c4 0000d7c4 0000d7b2     ................
   19e7c:	0000d75a 0000d770 0000d786 0000d740     Z...p.......@...
   19e8c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   19e9c:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   19eac:	00010442 000104ba 000104ba 00010460     B...........`...
   19ebc:	0001045a 00010466 00010448 0001046c     Z...f...H...l...
   19ecc:	000104a0 00010784 000107d4 000107d4     ................
   19edc:	000107d0 00010776 00010796 00010766     ....v.......f...
   19eec:	000107a8 000107ba 00010822 00010850     ........"...P...
   19efc:	00010850 0001084c 0001081c 00010828     P...L.......(...
   19f0c:	00010816 0001082e 00010834 72616f42     ........4...Boar
   19f1c:	6e692064 61697469 657a696c 000d2e64     d initialized...
   19f2c:	20766564 203a6469 30257830 0a0d7832     dev id: 0x%02x..
   19f3c:	00000000 6d726966 65726177 0000002f     ....firmware/...
   19f4c:	6e6e7552 20676e69 4d207361 20545451     Running as MQTT 
   19f5c:	72657355 7325203a 00000a0d 646e6553     User: %s....Send
   19f6c:	20676e69 736e6573 7620726f 65756c61     ing sensor value
   19f7c:	6f742073 6f6c4320 0d2e6475 49514d00     s to Cloud...MQI
   19f8c:	00706473                                sdp.

00019f90 <_global_impure_ptr>:
   19f90:	2000001c 4f500043 00584953 4e49002e     ... C.POSIX...IN
   19fa0:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
   19fb0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   19fc0:	32313000 36353433 61393837 65646362     .0123456789abcde
   19fd0:	20000066                                         f.

00019fd2 <_ctype_>:
   19fd2:	20202000 20202020 28282020 20282828     .         ((((( 
   19fe2:	20202020 20202020 20202020 20202020                     
   19ff2:	10108820 10101010 10101010 10101010      ...............
   1a002:	04040410 04040404 10040404 10101010     ................
   1a012:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1a022:	01010101 01010101 01010101 10101010     ................
   1a032:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1a042:	02020202 02020202 02020202 10101010     ................
   1a052:	00000020 00000000 00000000 00000000      ...............
	...
   1a0d2:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

0001a0e0 <__sf_fake_stderr>:
	...

0001a100 <__sf_fake_stdin>:
	...

0001a120 <__sf_fake_stdout>:
	...

0001a140 <__mprec_bigtens>:
   1a140:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1a150:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1a160:	7f73bf3c 75154fdd                       <.s..O.u

0001a168 <__mprec_tens>:
   1a168:	00000000 3ff00000 00000000 40240000     .......?......$@
   1a178:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1a188:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1a198:	00000000 412e8480 00000000 416312d0     .......A......cA
   1a1a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1a1b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1a1c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1a1d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1a1e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1a1f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1a208:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1a218:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1a228:	79d99db4 44ea7843                       ...yCx.D

0001a230 <p05.6047>:
   1a230:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   1a240:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
   1a250:	000159ec 000159bc 000159ce 00015910     .Y...Y...Y...Y..
   1a260:	000159ce 000159b2 000159ce 00015910     .Y...Y...Y...Y..
   1a270:	000159bc 000159bc 000159b2 00015910     .Y...Y...Y...Y..
   1a280:	00015918 00015918 00015918 000159d4     .Y...Y...Y...Y..
   1a290:	000159bc 000159bc 00015990 00015a74     .Y...Y...Y..tZ..
   1a2a0:	00015990 000159b2 00015990 00015a74     .Y...Y...Y..tZ..
   1a2b0:	000159bc 000159bc 000159b2 00015a74     .Y...Y...Y..tZ..
   1a2c0:	00015918 00015918 00015918 00015a7e     .Y...Y...Y..~Z..
   1a2d0:	00015c1c 00015b6c 00015b6c 00015b6a     .\..l[..l[..j[..
   1a2e0:	00015c0e 00015c0e 00015c04 00015b6a     .\...\...\..j[..
   1a2f0:	00015c0e 00015c04 00015c0e 00015b6a     .\...\...\..j[..
   1a300:	00015c14 00015c14 00015c14 00015ca4     .\...\...\...\..
   1a310:	000165e8 000165ca 00016584 000164a2     .e...e...e...d..
   1a320:	00016584 000165bc 00016584 000164a2     .e...e...e...d..
   1a330:	000165ca 000165ca 000165bc 000164a2     .e...e...e...d..
   1a340:	0001649a 0001649a 0001649a 00016800     .d...d...d...h..
   1a350:	00016e48 00016d08 00016d08 00016d04     Hn...m...m...m..
   1a360:	00016e20 00016e20 00016e12 00016d04      n.. n...n...m..
   1a370:	00016e20 00016e12 00016e20 00016d04      n...n.. n...m..
   1a380:	00016e28 00016e28 00016e28 0001702c     (n..(n..(n..,p..

0001a390 <_init>:
   1a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a392:	46c0      	nop			; (mov r8, r8)
   1a394:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a396:	bc08      	pop	{r3}
   1a398:	469e      	mov	lr, r3
   1a39a:	4770      	bx	lr

0001a39c <__init_array_start>:
   1a39c:	000000dd 	.word	0x000000dd

0001a3a0 <_fini>:
   1a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a3a2:	46c0      	nop			; (mov r8, r8)
   1a3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a3a6:	bc08      	pop	{r3}
   1a3a8:	469e      	mov	lr, r3
   1a3aa:	4770      	bx	lr

0001a3ac <__fini_array_start>:
   1a3ac:	000000b5 	.word	0x000000b5
