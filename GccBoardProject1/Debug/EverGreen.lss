
EverGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000153b8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000210  20000000  000153b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000540  20000210  000155c8  00030210  2**2
                  ALLOC
  3 .stack        00002000  20000750  00015b08  00030210  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
  6 .debug_info   0008055d  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000082d9  00000000  00000000  000b085f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000889e  00000000  00000000  000b8b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f8  00000000  00000000  000c13d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001618  00000000  00000000  000c2bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000123b7  00000000  00000000  000c41e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00023cf1  00000000  00000000  000d659d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00099053  00000000  00000000  000fa28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006438  00000000  00000000  001932e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * @temperature :  floating point temperature result, unit is ?C
 * @humidity    :  floating point humidity result, unit is RH%
 * Returns status.
 */
int hdc1080_measure(double *temperature, double *humidity)
{
       0:	50 27 00 20 8d c7 00 00 85 c8 00 00 85 c8 00 00     P'. ............
	...
	uint8_t temp_res = HDC1080_T_RES_14;
	uint8_t humidres = HDC1080_RH_RES_14;
	uint8_t heater = 0; //heater off
	
	
	error = hdc1080_read_reg(10, HDC1080_CONFIG, &r);
      2c:	85 c8 00 00 00 00 00 00 00 00 00 00 85 c8 00 00     ................
	if (error != STAT_OK) {
      3c:	85 c8 00 00 85 c8 00 00 85 c8 00 00 85 c8 00 00     ................
		printf("HDC Read Config Error\r\n");
		return error;
	}

	r |= temp_res<<10;
      4c:	85 c8 00 00 19 5c 00 00 85 c8 00 00 85 c8 00 00     .....\..........
      5c:	85 c8 00 00 85 c8 00 00 e5 b4 00 00 fd b4 00 00     ................
	r |= humidres<<8;
      6c:	15 b5 00 00 2d b5 00 00 45 b5 00 00 5d b5 00 00     ....-...E...]...
      7c:	61 77 00 00 75 77 00 00 89 77 00 00 85 c8 00 00     aw..uw...w......
	r |= 1<<12;     // mode = 1;
      8c:	85 c8 00 00 85 c8 00 00 00 00 00 00 00 00 00 00     ................
	r |= heater<<13;
      9c:	85 c8 00 00 85 c8 00 00 85 c8 00 00 85 c8 00 00     ................
      ac:	85 c8 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
	
	
	// write config
	error = hdc1080_write_reg(HDC1080_CONFIG, r);
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
	if (error != STAT_OK) {
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
		printf("HDC Write Config Error\r\n");
      d0:	20000210 	.word	0x20000210
      d4:	00000000 	.word	0x00000000
		return error;
      d8:	000153b8 	.word	0x000153b8

000000dc <frame_dummy>:
	}
	

	error = hdc1080_read_reg(150, HDC1080_TEMPERATURE, &r);
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
	if (error != STAT_OK) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
		printf("HDC Read Temp Error\r\n");
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
		return error;
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
	}
	tmp = (double)r;
     100:	00000000 	.word	0x00000000
     104:	20000214 	.word	0x20000214
     108:	000153b8 	.word	0x000153b8
     10c:	000153b8 	.word	0x000153b8
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     174:	b580      	push	{r7, lr}
     176:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     178:	4b04      	ldr	r3, [pc, #16]	; (18c <system_interrupt_enable_global+0x18>)
     17a:	2201      	movs	r2, #1
     17c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     17e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     182:	b662      	cpsie	i
}
     184:	46c0      	nop			; (mov r8, r8)
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	20000030 	.word	0x20000030

00000190 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     190:	b580      	push	{r7, lr}
     192:	b082      	sub	sp, #8
     194:	af00      	add	r7, sp, #0
     196:	0002      	movs	r2, r0
     198:	1dfb      	adds	r3, r7, #7
     19a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     19c:	1dfb      	adds	r3, r7, #7
     19e:	781b      	ldrb	r3, [r3, #0]
     1a0:	0018      	movs	r0, r3
     1a2:	4b03      	ldr	r3, [pc, #12]	; (1b0 <port_get_group_from_gpio_pin+0x20>)
     1a4:	4798      	blx	r3
     1a6:	0003      	movs	r3, r0
}
     1a8:	0018      	movs	r0, r3
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}
     1b0:	00000115 	.word	0x00000115

000001b4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b082      	sub	sp, #8
     1b8:	af00      	add	r7, sp, #0
     1ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2200      	movs	r2, #0
     1c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2201      	movs	r2, #1
     1c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	2200      	movs	r2, #0
     1cc:	709a      	strb	r2, [r3, #2]
}
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	46bd      	mov	sp, r7
     1d2:	b002      	add	sp, #8
     1d4:	bd80      	pop	{r7, pc}
	...

000001d8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b084      	sub	sp, #16
     1dc:	af00      	add	r7, sp, #0
     1de:	0002      	movs	r2, r0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
     1e4:	1dbb      	adds	r3, r7, #6
     1e6:	1c0a      	adds	r2, r1, #0
     1e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ea:	1dfb      	adds	r3, r7, #7
     1ec:	781b      	ldrb	r3, [r3, #0]
     1ee:	0018      	movs	r0, r3
     1f0:	4b0d      	ldr	r3, [pc, #52]	; (228 <port_pin_set_output_level+0x50>)
     1f2:	4798      	blx	r3
     1f4:	0003      	movs	r3, r0
     1f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	781b      	ldrb	r3, [r3, #0]
     1fc:	221f      	movs	r2, #31
     1fe:	4013      	ands	r3, r2
     200:	2201      	movs	r2, #1
     202:	409a      	lsls	r2, r3
     204:	0013      	movs	r3, r2
     206:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     208:	1dbb      	adds	r3, r7, #6
     20a:	781b      	ldrb	r3, [r3, #0]
     20c:	2b00      	cmp	r3, #0
     20e:	d003      	beq.n	218 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     210:	68fb      	ldr	r3, [r7, #12]
     212:	68ba      	ldr	r2, [r7, #8]
     214:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     216:	e002      	b.n	21e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     218:	68fb      	ldr	r3, [r7, #12]
     21a:	68ba      	ldr	r2, [r7, #8]
     21c:	615a      	str	r2, [r3, #20]
}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46bd      	mov	sp, r7
     222:	b004      	add	sp, #16
     224:	bd80      	pop	{r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	00000191 	.word	0x00000191

0000022c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     22c:	b580      	push	{r7, lr}
     22e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     230:	4b04      	ldr	r3, [pc, #16]	; (244 <chip_isr+0x18>)
     232:	681b      	ldr	r3, [r3, #0]
     234:	2b00      	cmp	r3, #0
     236:	d002      	beq.n	23e <chip_isr+0x12>
		gpfIsr();
     238:	4b02      	ldr	r3, [pc, #8]	; (244 <chip_isr+0x18>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	4798      	blx	r3
	}
}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46bd      	mov	sp, r7
     242:	bd80      	pop	{r7, pc}
     244:	2000022c 	.word	0x2000022c

00000248 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     24e:	1d3b      	adds	r3, r7, #4
     250:	0018      	movs	r0, r3
     252:	4b10      	ldr	r3, [pc, #64]	; (294 <init_chip_pins+0x4c>)
     254:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     256:	1d3b      	adds	r3, r7, #4
     258:	2201      	movs	r2, #1
     25a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     25c:	1d3b      	adds	r3, r7, #4
     25e:	0019      	movs	r1, r3
     260:	201b      	movs	r0, #27
     262:	4b0d      	ldr	r3, [pc, #52]	; (298 <init_chip_pins+0x50>)
     264:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     266:	1d3b      	adds	r3, r7, #4
     268:	0019      	movs	r1, r3
     26a:	201c      	movs	r0, #28
     26c:	4b0a      	ldr	r3, [pc, #40]	; (298 <init_chip_pins+0x50>)
     26e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     270:	1d3b      	adds	r3, r7, #4
     272:	0019      	movs	r1, r3
     274:	2028      	movs	r0, #40	; 0x28
     276:	4b08      	ldr	r3, [pc, #32]	; (298 <init_chip_pins+0x50>)
     278:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     27a:	2100      	movs	r1, #0
     27c:	201c      	movs	r0, #28
     27e:	4b07      	ldr	r3, [pc, #28]	; (29c <init_chip_pins+0x54>)
     280:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     282:	2100      	movs	r1, #0
     284:	201b      	movs	r0, #27
     286:	4b05      	ldr	r3, [pc, #20]	; (29c <init_chip_pins+0x54>)
     288:	4798      	blx	r3
}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	46bd      	mov	sp, r7
     28e:	b002      	add	sp, #8
     290:	bd80      	pop	{r7, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	000001b5 	.word	0x000001b5
     298:	0000b77d 	.word	0x0000b77d
     29c:	000001d9 	.word	0x000001d9

000002a0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     2a4:	4b0c      	ldr	r3, [pc, #48]	; (2d8 <nm_bsp_init+0x38>)
     2a6:	2200      	movs	r2, #0
     2a8:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     2aa:	4b0c      	ldr	r3, [pc, #48]	; (2dc <nm_bsp_init+0x3c>)
     2ac:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     2ae:	4b0c      	ldr	r3, [pc, #48]	; (2e0 <nm_bsp_init+0x40>)
     2b0:	681b      	ldr	r3, [r3, #0]
     2b2:	2201      	movs	r2, #1
     2b4:	4013      	ands	r3, r2
     2b6:	d004      	beq.n	2c2 <nm_bsp_init+0x22>
     2b8:	4b09      	ldr	r3, [pc, #36]	; (2e0 <nm_bsp_init+0x40>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	2202      	movs	r2, #2
     2be:	4013      	ands	r3, r2
     2c0:	d101      	bne.n	2c6 <nm_bsp_init+0x26>
	    delay_init();
     2c2:	4b08      	ldr	r3, [pc, #32]	; (2e4 <nm_bsp_init+0x44>)
     2c4:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <nm_bsp_init+0x48>)
     2c8:	4798      	blx	r3

	system_interrupt_enable_global();
     2ca:	4b08      	ldr	r3, [pc, #32]	; (2ec <nm_bsp_init+0x4c>)
     2cc:	4798      	blx	r3

	return M2M_SUCCESS;
     2ce:	2300      	movs	r3, #0
}
     2d0:	0018      	movs	r0, r3
     2d2:	46bd      	mov	sp, r7
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	2000022c 	.word	0x2000022c
     2dc:	00000249 	.word	0x00000249
     2e0:	e000e010 	.word	0xe000e010
     2e4:	00008761 	.word	0x00008761
     2e8:	000002f1 	.word	0x000002f1
     2ec:	00000175 	.word	0x00000175

000002f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     2f4:	2100      	movs	r1, #0
     2f6:	201c      	movs	r0, #28
     2f8:	4b0b      	ldr	r3, [pc, #44]	; (328 <nm_bsp_reset+0x38>)
     2fa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     2fc:	2100      	movs	r1, #0
     2fe:	201b      	movs	r0, #27
     300:	4b09      	ldr	r3, [pc, #36]	; (328 <nm_bsp_reset+0x38>)
     302:	4798      	blx	r3
	nm_bsp_sleep(1);
     304:	2001      	movs	r0, #1
     306:	4b09      	ldr	r3, [pc, #36]	; (32c <nm_bsp_reset+0x3c>)
     308:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     30a:	2101      	movs	r1, #1
     30c:	201c      	movs	r0, #28
     30e:	4b06      	ldr	r3, [pc, #24]	; (328 <nm_bsp_reset+0x38>)
     310:	4798      	blx	r3
	nm_bsp_sleep(10);
     312:	200a      	movs	r0, #10
     314:	4b05      	ldr	r3, [pc, #20]	; (32c <nm_bsp_reset+0x3c>)
     316:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     318:	2101      	movs	r1, #1
     31a:	201b      	movs	r0, #27
     31c:	4b02      	ldr	r3, [pc, #8]	; (328 <nm_bsp_reset+0x38>)
     31e:	4798      	blx	r3
}
     320:	46c0      	nop			; (mov r8, r8)
     322:	46bd      	mov	sp, r7
     324:	bd80      	pop	{r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	000001d9 	.word	0x000001d9
     32c:	00000331 	.word	0x00000331

00000330 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     330:	b580      	push	{r7, lr}
     332:	b082      	sub	sp, #8
     334:	af00      	add	r7, sp, #0
     336:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     338:	e002      	b.n	340 <nm_bsp_sleep+0x10>
		delay_ms(1);
     33a:	2001      	movs	r0, #1
     33c:	4b05      	ldr	r3, [pc, #20]	; (354 <nm_bsp_sleep+0x24>)
     33e:	4798      	blx	r3
	while (u32TimeMsec--) {
     340:	687b      	ldr	r3, [r7, #4]
     342:	1e5a      	subs	r2, r3, #1
     344:	607a      	str	r2, [r7, #4]
     346:	2b00      	cmp	r3, #0
     348:	d1f7      	bne.n	33a <nm_bsp_sleep+0xa>
	}
}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	46bd      	mov	sp, r7
     34e:	b002      	add	sp, #8
     350:	bd80      	pop	{r7, pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	000087e9 	.word	0x000087e9

00000358 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     358:	b580      	push	{r7, lr}
     35a:	b086      	sub	sp, #24
     35c:	af00      	add	r7, sp, #0
     35e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     360:	4b15      	ldr	r3, [pc, #84]	; (3b8 <nm_bsp_register_isr+0x60>)
     362:	687a      	ldr	r2, [r7, #4]
     364:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     366:	230c      	movs	r3, #12
     368:	18fb      	adds	r3, r7, r3
     36a:	0018      	movs	r0, r3
     36c:	4b13      	ldr	r3, [pc, #76]	; (3bc <nm_bsp_register_isr+0x64>)
     36e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     370:	230c      	movs	r3, #12
     372:	18fb      	adds	r3, r7, r3
     374:	2229      	movs	r2, #41	; 0x29
     376:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     378:	230c      	movs	r3, #12
     37a:	18fb      	adds	r3, r7, r3
     37c:	2200      	movs	r2, #0
     37e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     380:	230c      	movs	r3, #12
     382:	18fb      	adds	r3, r7, r3
     384:	2201      	movs	r2, #1
     386:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     388:	230c      	movs	r3, #12
     38a:	18fb      	adds	r3, r7, r3
     38c:	2202      	movs	r2, #2
     38e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     390:	230c      	movs	r3, #12
     392:	18fb      	adds	r3, r7, r3
     394:	0019      	movs	r1, r3
     396:	2009      	movs	r0, #9
     398:	4b09      	ldr	r3, [pc, #36]	; (3c0 <nm_bsp_register_isr+0x68>)
     39a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     39c:	4b09      	ldr	r3, [pc, #36]	; (3c4 <nm_bsp_register_isr+0x6c>)
     39e:	2200      	movs	r2, #0
     3a0:	2109      	movs	r1, #9
     3a2:	0018      	movs	r0, r3
     3a4:	4b08      	ldr	r3, [pc, #32]	; (3c8 <nm_bsp_register_isr+0x70>)
     3a6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3a8:	2100      	movs	r1, #0
     3aa:	2009      	movs	r0, #9
     3ac:	4b07      	ldr	r3, [pc, #28]	; (3cc <nm_bsp_register_isr+0x74>)
     3ae:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     3b0:	46c0      	nop			; (mov r8, r8)
     3b2:	46bd      	mov	sp, r7
     3b4:	b006      	add	sp, #24
     3b6:	bd80      	pop	{r7, pc}
     3b8:	2000022c 	.word	0x2000022c
     3bc:	00005f25 	.word	0x00005f25
     3c0:	00005f59 	.word	0x00005f59
     3c4:	0000022d 	.word	0x0000022d
     3c8:	00005b25 	.word	0x00005b25
     3cc:	00005b89 	.word	0x00005b89

000003d0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b082      	sub	sp, #8
     3d4:	af00      	add	r7, sp, #0
     3d6:	0002      	movs	r2, r0
     3d8:	1dfb      	adds	r3, r7, #7
     3da:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     3dc:	1dfb      	adds	r3, r7, #7
     3de:	781b      	ldrb	r3, [r3, #0]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d004      	beq.n	3ee <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3e4:	2100      	movs	r1, #0
     3e6:	2009      	movs	r0, #9
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <nm_bsp_interrupt_ctrl+0x30>)
     3ea:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     3ec:	e003      	b.n	3f6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     3ee:	2100      	movs	r1, #0
     3f0:	2009      	movs	r0, #9
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <nm_bsp_interrupt_ctrl+0x34>)
     3f4:	4798      	blx	r3
}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	46bd      	mov	sp, r7
     3fa:	b002      	add	sp, #8
     3fc:	bd80      	pop	{r7, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	00005b89 	.word	0x00005b89
     404:	00005bd1 	.word	0x00005bd1

00000408 <system_pinmux_get_group_from_gpio_pin>:
{
     408:	b580      	push	{r7, lr}
     40a:	b084      	sub	sp, #16
     40c:	af00      	add	r7, sp, #0
     40e:	0002      	movs	r2, r0
     410:	1dfb      	adds	r3, r7, #7
     412:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     414:	230f      	movs	r3, #15
     416:	18fb      	adds	r3, r7, r3
     418:	1dfa      	adds	r2, r7, #7
     41a:	7812      	ldrb	r2, [r2, #0]
     41c:	09d2      	lsrs	r2, r2, #7
     41e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     420:	230e      	movs	r3, #14
     422:	18fb      	adds	r3, r7, r3
     424:	1dfa      	adds	r2, r7, #7
     426:	7812      	ldrb	r2, [r2, #0]
     428:	0952      	lsrs	r2, r2, #5
     42a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     42c:	4b0d      	ldr	r3, [pc, #52]	; (464 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     42e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     430:	230f      	movs	r3, #15
     432:	18fb      	adds	r3, r7, r3
     434:	781b      	ldrb	r3, [r3, #0]
     436:	2b00      	cmp	r3, #0
     438:	d10f      	bne.n	45a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     43a:	230f      	movs	r3, #15
     43c:	18fb      	adds	r3, r7, r3
     43e:	781b      	ldrb	r3, [r3, #0]
     440:	009b      	lsls	r3, r3, #2
     442:	2210      	movs	r2, #16
     444:	4694      	mov	ip, r2
     446:	44bc      	add	ip, r7
     448:	4463      	add	r3, ip
     44a:	3b08      	subs	r3, #8
     44c:	681a      	ldr	r2, [r3, #0]
     44e:	230e      	movs	r3, #14
     450:	18fb      	adds	r3, r7, r3
     452:	781b      	ldrb	r3, [r3, #0]
     454:	01db      	lsls	r3, r3, #7
     456:	18d3      	adds	r3, r2, r3
     458:	e000      	b.n	45c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     45a:	2300      	movs	r3, #0
}
     45c:	0018      	movs	r0, r3
     45e:	46bd      	mov	sp, r7
     460:	b004      	add	sp, #16
     462:	bd80      	pop	{r7, pc}
     464:	41004400 	.word	0x41004400

00000468 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	0002      	movs	r2, r0
     470:	1dfb      	adds	r3, r7, #7
     472:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     474:	4b06      	ldr	r3, [pc, #24]	; (490 <system_interrupt_enable+0x28>)
     476:	1dfa      	adds	r2, r7, #7
     478:	7812      	ldrb	r2, [r2, #0]
     47a:	0011      	movs	r1, r2
     47c:	221f      	movs	r2, #31
     47e:	400a      	ands	r2, r1
     480:	2101      	movs	r1, #1
     482:	4091      	lsls	r1, r2
     484:	000a      	movs	r2, r1
     486:	601a      	str	r2, [r3, #0]
}
     488:	46c0      	nop			; (mov r8, r8)
     48a:	46bd      	mov	sp, r7
     48c:	b002      	add	sp, #8
     48e:	bd80      	pop	{r7, pc}
     490:	e000e100 	.word	0xe000e100

00000494 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     494:	b580      	push	{r7, lr}
     496:	b082      	sub	sp, #8
     498:	af00      	add	r7, sp, #0
     49a:	0002      	movs	r2, r0
     49c:	1dfb      	adds	r3, r7, #7
     49e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4a0:	4a07      	ldr	r2, [pc, #28]	; (4c0 <system_interrupt_disable+0x2c>)
     4a2:	1dfb      	adds	r3, r7, #7
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	0019      	movs	r1, r3
     4a8:	231f      	movs	r3, #31
     4aa:	400b      	ands	r3, r1
     4ac:	2101      	movs	r1, #1
     4ae:	4099      	lsls	r1, r3
     4b0:	000b      	movs	r3, r1
     4b2:	0019      	movs	r1, r3
     4b4:	2380      	movs	r3, #128	; 0x80
     4b6:	50d1      	str	r1, [r2, r3]
}
     4b8:	46c0      	nop			; (mov r8, r8)
     4ba:	46bd      	mov	sp, r7
     4bc:	b002      	add	sp, #8
     4be:	bd80      	pop	{r7, pc}
     4c0:	e000e100 	.word	0xe000e100

000004c4 <port_get_group_from_gpio_pin>:
{
     4c4:	b580      	push	{r7, lr}
     4c6:	b082      	sub	sp, #8
     4c8:	af00      	add	r7, sp, #0
     4ca:	0002      	movs	r2, r0
     4cc:	1dfb      	adds	r3, r7, #7
     4ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     4d0:	1dfb      	adds	r3, r7, #7
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	0018      	movs	r0, r3
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <port_get_group_from_gpio_pin+0x20>)
     4d8:	4798      	blx	r3
     4da:	0003      	movs	r3, r0
}
     4dc:	0018      	movs	r0, r3
     4de:	46bd      	mov	sp, r7
     4e0:	b002      	add	sp, #8
     4e2:	bd80      	pop	{r7, pc}
     4e4:	00000409 	.word	0x00000409

000004e8 <port_get_config_defaults>:
{
     4e8:	b580      	push	{r7, lr}
     4ea:	b082      	sub	sp, #8
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	2200      	movs	r2, #0
     4f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	2201      	movs	r2, #1
     4fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	2200      	movs	r2, #0
     500:	709a      	strb	r2, [r3, #2]
}
     502:	46c0      	nop			; (mov r8, r8)
     504:	46bd      	mov	sp, r7
     506:	b002      	add	sp, #8
     508:	bd80      	pop	{r7, pc}
	...

0000050c <port_pin_set_output_level>:
{
     50c:	b580      	push	{r7, lr}
     50e:	b084      	sub	sp, #16
     510:	af00      	add	r7, sp, #0
     512:	0002      	movs	r2, r0
     514:	1dfb      	adds	r3, r7, #7
     516:	701a      	strb	r2, [r3, #0]
     518:	1dbb      	adds	r3, r7, #6
     51a:	1c0a      	adds	r2, r1, #0
     51c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     51e:	1dfb      	adds	r3, r7, #7
     520:	781b      	ldrb	r3, [r3, #0]
     522:	0018      	movs	r0, r3
     524:	4b0d      	ldr	r3, [pc, #52]	; (55c <port_pin_set_output_level+0x50>)
     526:	4798      	blx	r3
     528:	0003      	movs	r3, r0
     52a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     52c:	1dfb      	adds	r3, r7, #7
     52e:	781b      	ldrb	r3, [r3, #0]
     530:	221f      	movs	r2, #31
     532:	4013      	ands	r3, r2
     534:	2201      	movs	r2, #1
     536:	409a      	lsls	r2, r3
     538:	0013      	movs	r3, r2
     53a:	60bb      	str	r3, [r7, #8]
	if (level) {
     53c:	1dbb      	adds	r3, r7, #6
     53e:	781b      	ldrb	r3, [r3, #0]
     540:	2b00      	cmp	r3, #0
     542:	d003      	beq.n	54c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     544:	68fb      	ldr	r3, [r7, #12]
     546:	68ba      	ldr	r2, [r7, #8]
     548:	619a      	str	r2, [r3, #24]
}
     54a:	e002      	b.n	552 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     54c:	68fb      	ldr	r3, [r7, #12]
     54e:	68ba      	ldr	r2, [r7, #8]
     550:	615a      	str	r2, [r3, #20]
}
     552:	46c0      	nop			; (mov r8, r8)
     554:	46bd      	mov	sp, r7
     556:	b004      	add	sp, #16
     558:	bd80      	pop	{r7, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	000004c5 	.word	0x000004c5

00000560 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     560:	b580      	push	{r7, lr}
     562:	b084      	sub	sp, #16
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     568:	687b      	ldr	r3, [r7, #4]
     56a:	681b      	ldr	r3, [r3, #0]
     56c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	69db      	ldr	r3, [r3, #28]
     572:	1e5a      	subs	r2, r3, #1
     574:	4193      	sbcs	r3, r2
     576:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     578:	0018      	movs	r0, r3
     57a:	46bd      	mov	sp, r7
     57c:	b004      	add	sp, #16
     57e:	bd80      	pop	{r7, pc}

00000580 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     580:	b580      	push	{r7, lr}
     582:	b082      	sub	sp, #8
     584:	af00      	add	r7, sp, #0
     586:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     588:	687b      	ldr	r3, [r7, #4]
     58a:	2201      	movs	r2, #1
     58c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     58e:	687b      	ldr	r3, [r7, #4]
     590:	2200      	movs	r2, #0
     592:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     594:	687b      	ldr	r3, [r7, #4]
     596:	2200      	movs	r2, #0
     598:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	22c0      	movs	r2, #192	; 0xc0
     59e:	0392      	lsls	r2, r2, #14
     5a0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	2200      	movs	r2, #0
     5a6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	2200      	movs	r2, #0
     5ac:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	2201      	movs	r2, #1
     5b2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     5b4:	687b      	ldr	r3, [r7, #4]
     5b6:	2201      	movs	r2, #1
     5b8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	2200      	movs	r2, #0
     5be:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	2224      	movs	r2, #36	; 0x24
     5c4:	2100      	movs	r1, #0
     5c6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	3318      	adds	r3, #24
     5cc:	220c      	movs	r2, #12
     5ce:	2100      	movs	r1, #0
     5d0:	0018      	movs	r0, r3
     5d2:	4b0a      	ldr	r3, [pc, #40]	; (5fc <spi_get_config_defaults+0x7c>)
     5d4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	4a09      	ldr	r2, [pc, #36]	; (600 <spi_get_config_defaults+0x80>)
     5da:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	2200      	movs	r2, #0
     5e0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	2200      	movs	r2, #0
     5e6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     5e8:	687b      	ldr	r3, [r7, #4]
     5ea:	2200      	movs	r2, #0
     5ec:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	2200      	movs	r2, #0
     5f2:	635a      	str	r2, [r3, #52]	; 0x34

};
     5f4:	46c0      	nop			; (mov r8, r8)
     5f6:	46bd      	mov	sp, r7
     5f8:	b002      	add	sp, #8
     5fa:	bd80      	pop	{r7, pc}
     5fc:	0000e587 	.word	0x0000e587
     600:	000186a0 	.word	0x000186a0

00000604 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     604:	b580      	push	{r7, lr}
     606:	b082      	sub	sp, #8
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     60c:	687b      	ldr	r3, [r7, #4]
     60e:	220a      	movs	r2, #10
     610:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     612:	687b      	ldr	r3, [r7, #4]
     614:	2200      	movs	r2, #0
     616:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     618:	687b      	ldr	r3, [r7, #4]
     61a:	2200      	movs	r2, #0
     61c:	709a      	strb	r2, [r3, #2]
}
     61e:	46c0      	nop			; (mov r8, r8)
     620:	46bd      	mov	sp, r7
     622:	b002      	add	sp, #8
     624:	bd80      	pop	{r7, pc}
	...

00000628 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     628:	b580      	push	{r7, lr}
     62a:	b084      	sub	sp, #16
     62c:	af00      	add	r7, sp, #0
     62e:	6078      	str	r0, [r7, #4]
     630:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     632:	683b      	ldr	r3, [r7, #0]
     634:	781a      	ldrb	r2, [r3, #0]
     636:	687b      	ldr	r3, [r7, #4]
     638:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	785a      	ldrb	r2, [r3, #1]
     63e:	687b      	ldr	r3, [r7, #4]
     640:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     642:	683b      	ldr	r3, [r7, #0]
     644:	789a      	ldrb	r2, [r3, #2]
     646:	687b      	ldr	r3, [r7, #4]
     648:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     64a:	230c      	movs	r3, #12
     64c:	18fb      	adds	r3, r7, r3
     64e:	0018      	movs	r0, r3
     650:	4b0b      	ldr	r3, [pc, #44]	; (680 <spi_attach_slave+0x58>)
     652:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     654:	230c      	movs	r3, #12
     656:	18fb      	adds	r3, r7, r3
     658:	2201      	movs	r2, #1
     65a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	781b      	ldrb	r3, [r3, #0]
     660:	220c      	movs	r2, #12
     662:	18ba      	adds	r2, r7, r2
     664:	0011      	movs	r1, r2
     666:	0018      	movs	r0, r3
     668:	4b06      	ldr	r3, [pc, #24]	; (684 <spi_attach_slave+0x5c>)
     66a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	781b      	ldrb	r3, [r3, #0]
     670:	2101      	movs	r1, #1
     672:	0018      	movs	r0, r3
     674:	4b04      	ldr	r3, [pc, #16]	; (688 <spi_attach_slave+0x60>)
     676:	4798      	blx	r3
}
     678:	46c0      	nop			; (mov r8, r8)
     67a:	46bd      	mov	sp, r7
     67c:	b004      	add	sp, #16
     67e:	bd80      	pop	{r7, pc}
     680:	000004e9 	.word	0x000004e9
     684:	0000b77d 	.word	0x0000b77d
     688:	0000050d 	.word	0x0000050d

0000068c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     68c:	b580      	push	{r7, lr}
     68e:	b084      	sub	sp, #16
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     694:	687b      	ldr	r3, [r7, #4]
     696:	681b      	ldr	r3, [r3, #0]
     698:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	681b      	ldr	r3, [r3, #0]
     69e:	0018      	movs	r0, r3
     6a0:	4b0b      	ldr	r3, [pc, #44]	; (6d0 <spi_enable+0x44>)
     6a2:	4798      	blx	r3
     6a4:	0003      	movs	r3, r0
     6a6:	0018      	movs	r0, r3
     6a8:	4b0a      	ldr	r3, [pc, #40]	; (6d4 <spi_enable+0x48>)
     6aa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     6ac:	46c0      	nop			; (mov r8, r8)
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	0018      	movs	r0, r3
     6b2:	4b09      	ldr	r3, [pc, #36]	; (6d8 <spi_enable+0x4c>)
     6b4:	4798      	blx	r3
     6b6:	1e03      	subs	r3, r0, #0
     6b8:	d1f9      	bne.n	6ae <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	681b      	ldr	r3, [r3, #0]
     6be:	2202      	movs	r2, #2
     6c0:	431a      	orrs	r2, r3
     6c2:	68fb      	ldr	r3, [r7, #12]
     6c4:	601a      	str	r2, [r3, #0]
}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	46bd      	mov	sp, r7
     6ca:	b004      	add	sp, #16
     6cc:	bd80      	pop	{r7, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	0000b4a1 	.word	0x0000b4a1
     6d4:	00000469 	.word	0x00000469
     6d8:	00000561 	.word	0x00000561

000006dc <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     6dc:	b580      	push	{r7, lr}
     6de:	b084      	sub	sp, #16
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	0018      	movs	r0, r3
     6f0:	4b0e      	ldr	r3, [pc, #56]	; (72c <spi_disable+0x50>)
     6f2:	4798      	blx	r3
     6f4:	0003      	movs	r3, r0
     6f6:	0018      	movs	r0, r3
     6f8:	4b0d      	ldr	r3, [pc, #52]	; (730 <spi_disable+0x54>)
     6fa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     6fc:	46c0      	nop			; (mov r8, r8)
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	0018      	movs	r0, r3
     702:	4b0c      	ldr	r3, [pc, #48]	; (734 <spi_disable+0x58>)
     704:	4798      	blx	r3
     706:	1e03      	subs	r3, r0, #0
     708:	d1f9      	bne.n	6fe <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     70a:	68fb      	ldr	r3, [r7, #12]
     70c:	228f      	movs	r2, #143	; 0x8f
     70e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     710:	68fb      	ldr	r3, [r7, #12]
     712:	228f      	movs	r2, #143	; 0x8f
     714:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     716:	68fb      	ldr	r3, [r7, #12]
     718:	681b      	ldr	r3, [r3, #0]
     71a:	2202      	movs	r2, #2
     71c:	4393      	bics	r3, r2
     71e:	001a      	movs	r2, r3
     720:	68fb      	ldr	r3, [r7, #12]
     722:	601a      	str	r2, [r3, #0]
}
     724:	46c0      	nop			; (mov r8, r8)
     726:	46bd      	mov	sp, r7
     728:	b004      	add	sp, #16
     72a:	bd80      	pop	{r7, pc}
     72c:	0000b4a1 	.word	0x0000b4a1
     730:	00000495 	.word	0x00000495
     734:	00000561 	.word	0x00000561

00000738 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     738:	b580      	push	{r7, lr}
     73a:	b084      	sub	sp, #16
     73c:	af00      	add	r7, sp, #0
     73e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     740:	687b      	ldr	r3, [r7, #4]
     742:	681b      	ldr	r3, [r3, #0]
     744:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     746:	68fb      	ldr	r3, [r7, #12]
     748:	7e1b      	ldrb	r3, [r3, #24]
     74a:	b2db      	uxtb	r3, r3
     74c:	001a      	movs	r2, r3
     74e:	2302      	movs	r3, #2
     750:	4013      	ands	r3, r2
     752:	1e5a      	subs	r2, r3, #1
     754:	4193      	sbcs	r3, r2
     756:	b2db      	uxtb	r3, r3
}
     758:	0018      	movs	r0, r3
     75a:	46bd      	mov	sp, r7
     75c:	b004      	add	sp, #16
     75e:	bd80      	pop	{r7, pc}

00000760 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     760:	b580      	push	{r7, lr}
     762:	b084      	sub	sp, #16
     764:	af00      	add	r7, sp, #0
     766:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     768:	687b      	ldr	r3, [r7, #4]
     76a:	681b      	ldr	r3, [r3, #0]
     76c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     76e:	68fb      	ldr	r3, [r7, #12]
     770:	7e1b      	ldrb	r3, [r3, #24]
     772:	b2db      	uxtb	r3, r3
     774:	001a      	movs	r2, r3
     776:	2301      	movs	r3, #1
     778:	4013      	ands	r3, r2
     77a:	1e5a      	subs	r2, r3, #1
     77c:	4193      	sbcs	r3, r2
     77e:	b2db      	uxtb	r3, r3
}
     780:	0018      	movs	r0, r3
     782:	46bd      	mov	sp, r7
     784:	b004      	add	sp, #16
     786:	bd80      	pop	{r7, pc}

00000788 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     788:	b580      	push	{r7, lr}
     78a:	b084      	sub	sp, #16
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     790:	687b      	ldr	r3, [r7, #4]
     792:	681b      	ldr	r3, [r3, #0]
     794:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     796:	68fb      	ldr	r3, [r7, #12]
     798:	7e1b      	ldrb	r3, [r3, #24]
     79a:	b2db      	uxtb	r3, r3
     79c:	001a      	movs	r2, r3
     79e:	2304      	movs	r3, #4
     7a0:	4013      	ands	r3, r2
     7a2:	1e5a      	subs	r2, r3, #1
     7a4:	4193      	sbcs	r3, r2
     7a6:	b2db      	uxtb	r3, r3
}
     7a8:	0018      	movs	r0, r3
     7aa:	46bd      	mov	sp, r7
     7ac:	b004      	add	sp, #16
     7ae:	bd80      	pop	{r7, pc}

000007b0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     7b0:	b580      	push	{r7, lr}
     7b2:	b084      	sub	sp, #16
     7b4:	af00      	add	r7, sp, #0
     7b6:	6078      	str	r0, [r7, #4]
     7b8:	000a      	movs	r2, r1
     7ba:	1cbb      	adds	r3, r7, #2
     7bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	681b      	ldr	r3, [r3, #0]
     7c2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	0018      	movs	r0, r3
     7c8:	4b0a      	ldr	r3, [pc, #40]	; (7f4 <spi_write+0x44>)
     7ca:	4798      	blx	r3
     7cc:	0003      	movs	r3, r0
     7ce:	001a      	movs	r2, r3
     7d0:	2301      	movs	r3, #1
     7d2:	4053      	eors	r3, r2
     7d4:	b2db      	uxtb	r3, r3
     7d6:	2b00      	cmp	r3, #0
     7d8:	d001      	beq.n	7de <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     7da:	2305      	movs	r3, #5
     7dc:	e006      	b.n	7ec <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     7de:	1cbb      	adds	r3, r7, #2
     7e0:	881b      	ldrh	r3, [r3, #0]
     7e2:	05db      	lsls	r3, r3, #23
     7e4:	0dda      	lsrs	r2, r3, #23
     7e6:	68fb      	ldr	r3, [r7, #12]
     7e8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     7ea:	2300      	movs	r3, #0
}
     7ec:	0018      	movs	r0, r3
     7ee:	46bd      	mov	sp, r7
     7f0:	b004      	add	sp, #16
     7f2:	bd80      	pop	{r7, pc}
     7f4:	00000761 	.word	0x00000761

000007f8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
     800:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     802:	687b      	ldr	r3, [r7, #4]
     804:	681b      	ldr	r3, [r3, #0]
     806:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     808:	687b      	ldr	r3, [r7, #4]
     80a:	0018      	movs	r0, r3
     80c:	4b1b      	ldr	r3, [pc, #108]	; (87c <spi_read+0x84>)
     80e:	4798      	blx	r3
     810:	0003      	movs	r3, r0
     812:	001a      	movs	r2, r3
     814:	2301      	movs	r3, #1
     816:	4053      	eors	r3, r2
     818:	b2db      	uxtb	r3, r3
     81a:	2b00      	cmp	r3, #0
     81c:	d001      	beq.n	822 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     81e:	2310      	movs	r3, #16
     820:	e027      	b.n	872 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     822:	230f      	movs	r3, #15
     824:	18fb      	adds	r3, r7, r3
     826:	2200      	movs	r2, #0
     828:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     82a:	68bb      	ldr	r3, [r7, #8]
     82c:	8b5b      	ldrh	r3, [r3, #26]
     82e:	b29b      	uxth	r3, r3
     830:	001a      	movs	r2, r3
     832:	2304      	movs	r3, #4
     834:	4013      	ands	r3, r2
     836:	d006      	beq.n	846 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     838:	230f      	movs	r3, #15
     83a:	18fb      	adds	r3, r7, r3
     83c:	221e      	movs	r2, #30
     83e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     840:	68bb      	ldr	r3, [r7, #8]
     842:	2204      	movs	r2, #4
     844:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     846:	687b      	ldr	r3, [r7, #4]
     848:	799b      	ldrb	r3, [r3, #6]
     84a:	2b01      	cmp	r3, #1
     84c:	d108      	bne.n	860 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     84e:	68bb      	ldr	r3, [r7, #8]
     850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     852:	b29b      	uxth	r3, r3
     854:	05db      	lsls	r3, r3, #23
     856:	0ddb      	lsrs	r3, r3, #23
     858:	b29a      	uxth	r2, r3
     85a:	683b      	ldr	r3, [r7, #0]
     85c:	801a      	strh	r2, [r3, #0]
     85e:	e005      	b.n	86c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     860:	68bb      	ldr	r3, [r7, #8]
     862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     864:	b2db      	uxtb	r3, r3
     866:	b29a      	uxth	r2, r3
     868:	683b      	ldr	r3, [r7, #0]
     86a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     86c:	230f      	movs	r3, #15
     86e:	18fb      	adds	r3, r7, r3
     870:	781b      	ldrb	r3, [r3, #0]
}
     872:	0018      	movs	r0, r3
     874:	46bd      	mov	sp, r7
     876:	b004      	add	sp, #16
     878:	bd80      	pop	{r7, pc}
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	00000789 	.word	0x00000789

00000880 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     880:	b580      	push	{r7, lr}
     882:	b086      	sub	sp, #24
     884:	af00      	add	r7, sp, #0
     886:	60f8      	str	r0, [r7, #12]
     888:	60b9      	str	r1, [r7, #8]
     88a:	1dbb      	adds	r3, r7, #6
     88c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     88e:	2313      	movs	r3, #19
     890:	18fb      	adds	r3, r7, r3
     892:	2200      	movs	r2, #0
     894:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     896:	2317      	movs	r3, #23
     898:	18fb      	adds	r3, r7, r3
     89a:	2200      	movs	r2, #0
     89c:	701a      	strb	r2, [r3, #0]
     89e:	2316      	movs	r3, #22
     8a0:	18fb      	adds	r3, r7, r3
     8a2:	2200      	movs	r2, #0
     8a4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     8a6:	2314      	movs	r3, #20
     8a8:	18fb      	adds	r3, r7, r3
     8aa:	2200      	movs	r2, #0
     8ac:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     8ae:	2310      	movs	r3, #16
     8b0:	18fb      	adds	r3, r7, r3
     8b2:	2200      	movs	r2, #0
     8b4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     8b6:	68bb      	ldr	r3, [r7, #8]
     8b8:	2b00      	cmp	r3, #0
     8ba:	d102      	bne.n	8c2 <spi_rw+0x42>
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	2b00      	cmp	r3, #0
     8c0:	d003      	beq.n	8ca <spi_rw+0x4a>
     8c2:	1dbb      	adds	r3, r7, #6
     8c4:	881b      	ldrh	r3, [r3, #0]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d102      	bne.n	8d0 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
     8ca:	230f      	movs	r3, #15
     8cc:	425b      	negs	r3, r3
     8ce:	e07e      	b.n	9ce <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	2b00      	cmp	r3, #0
     8d4:	d106      	bne.n	8e4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
     8d6:	2313      	movs	r3, #19
     8d8:	18fb      	adds	r3, r7, r3
     8da:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     8dc:	2317      	movs	r3, #23
     8de:	18fb      	adds	r3, r7, r3
     8e0:	2201      	movs	r2, #1
     8e2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
     8e4:	68bb      	ldr	r3, [r7, #8]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d106      	bne.n	8f8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
     8ea:	2313      	movs	r3, #19
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     8f0:	2316      	movs	r3, #22
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	2201      	movs	r2, #1
     8f6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
     8f8:	4937      	ldr	r1, [pc, #220]	; (9d8 <spi_rw+0x158>)
     8fa:	4b38      	ldr	r3, [pc, #224]	; (9dc <spi_rw+0x15c>)
     8fc:	2201      	movs	r2, #1
     8fe:	0018      	movs	r0, r3
     900:	4b37      	ldr	r3, [pc, #220]	; (9e0 <spi_rw+0x160>)
     902:	4798      	blx	r3

	while (u16Sz) {
     904:	e04c      	b.n	9a0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
     906:	68fb      	ldr	r3, [r7, #12]
     908:	781a      	ldrb	r2, [r3, #0]
     90a:	2314      	movs	r3, #20
     90c:	18fb      	adds	r3, r7, r3
     90e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     910:	46c0      	nop			; (mov r8, r8)
     912:	4b32      	ldr	r3, [pc, #200]	; (9dc <spi_rw+0x15c>)
     914:	0018      	movs	r0, r3
     916:	4b33      	ldr	r3, [pc, #204]	; (9e4 <spi_rw+0x164>)
     918:	4798      	blx	r3
     91a:	0003      	movs	r3, r0
     91c:	001a      	movs	r2, r3
     91e:	2301      	movs	r3, #1
     920:	4053      	eors	r3, r2
     922:	b2db      	uxtb	r3, r3
     924:	2b00      	cmp	r3, #0
     926:	d1f4      	bne.n	912 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     928:	46c0      	nop			; (mov r8, r8)
     92a:	2314      	movs	r3, #20
     92c:	18fb      	adds	r3, r7, r3
     92e:	881a      	ldrh	r2, [r3, #0]
     930:	4b2a      	ldr	r3, [pc, #168]	; (9dc <spi_rw+0x15c>)
     932:	0011      	movs	r1, r2
     934:	0018      	movs	r0, r3
     936:	4b2c      	ldr	r3, [pc, #176]	; (9e8 <spi_rw+0x168>)
     938:	4798      	blx	r3
     93a:	1e03      	subs	r3, r0, #0
     93c:	d1f5      	bne.n	92a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     93e:	46c0      	nop			; (mov r8, r8)
     940:	4b26      	ldr	r3, [pc, #152]	; (9dc <spi_rw+0x15c>)
     942:	0018      	movs	r0, r3
     944:	4b29      	ldr	r3, [pc, #164]	; (9ec <spi_rw+0x16c>)
     946:	4798      	blx	r3
     948:	0003      	movs	r3, r0
     94a:	001a      	movs	r2, r3
     94c:	2301      	movs	r3, #1
     94e:	4053      	eors	r3, r2
     950:	b2db      	uxtb	r3, r3
     952:	2b00      	cmp	r3, #0
     954:	d1f4      	bne.n	940 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     956:	46c0      	nop			; (mov r8, r8)
     958:	2310      	movs	r3, #16
     95a:	18fa      	adds	r2, r7, r3
     95c:	4b1f      	ldr	r3, [pc, #124]	; (9dc <spi_rw+0x15c>)
     95e:	0011      	movs	r1, r2
     960:	0018      	movs	r0, r3
     962:	4b23      	ldr	r3, [pc, #140]	; (9f0 <spi_rw+0x170>)
     964:	4798      	blx	r3
     966:	1e03      	subs	r3, r0, #0
     968:	d1f6      	bne.n	958 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
     96a:	2310      	movs	r3, #16
     96c:	18fb      	adds	r3, r7, r3
     96e:	881b      	ldrh	r3, [r3, #0]
     970:	b2da      	uxtb	r2, r3
     972:	68bb      	ldr	r3, [r7, #8]
     974:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
     976:	1dbb      	adds	r3, r7, #6
     978:	881a      	ldrh	r2, [r3, #0]
     97a:	1dbb      	adds	r3, r7, #6
     97c:	3a01      	subs	r2, #1
     97e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     980:	2316      	movs	r3, #22
     982:	18fb      	adds	r3, r7, r3
     984:	781b      	ldrb	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d102      	bne.n	990 <spi_rw+0x110>
			pu8Miso++;
     98a:	68bb      	ldr	r3, [r7, #8]
     98c:	3301      	adds	r3, #1
     98e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     990:	2317      	movs	r3, #23
     992:	18fb      	adds	r3, r7, r3
     994:	781b      	ldrb	r3, [r3, #0]
     996:	2b00      	cmp	r3, #0
     998:	d102      	bne.n	9a0 <spi_rw+0x120>
			pu8Mosi++;
     99a:	68fb      	ldr	r3, [r7, #12]
     99c:	3301      	adds	r3, #1
     99e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
     9a0:	1dbb      	adds	r3, r7, #6
     9a2:	881b      	ldrh	r3, [r3, #0]
     9a4:	2b00      	cmp	r3, #0
     9a6:	d1ae      	bne.n	906 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
     9a8:	46c0      	nop			; (mov r8, r8)
     9aa:	4b0c      	ldr	r3, [pc, #48]	; (9dc <spi_rw+0x15c>)
     9ac:	0018      	movs	r0, r3
     9ae:	4b11      	ldr	r3, [pc, #68]	; (9f4 <spi_rw+0x174>)
     9b0:	4798      	blx	r3
     9b2:	0003      	movs	r3, r0
     9b4:	001a      	movs	r2, r3
     9b6:	2301      	movs	r3, #1
     9b8:	4053      	eors	r3, r2
     9ba:	b2db      	uxtb	r3, r3
     9bc:	2b00      	cmp	r3, #0
     9be:	d1f4      	bne.n	9aa <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <spi_rw+0x158>)
     9c2:	4b06      	ldr	r3, [pc, #24]	; (9dc <spi_rw+0x15c>)
     9c4:	2200      	movs	r2, #0
     9c6:	0018      	movs	r0, r3
     9c8:	4b05      	ldr	r3, [pc, #20]	; (9e0 <spi_rw+0x160>)
     9ca:	4798      	blx	r3

	return M2M_SUCCESS;
     9cc:	2300      	movs	r3, #0
}
     9ce:	0018      	movs	r0, r3
     9d0:	46bd      	mov	sp, r7
     9d2:	b006      	add	sp, #24
     9d4:	bd80      	pop	{r7, pc}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	200002cc 	.word	0x200002cc
     9dc:	200002d0 	.word	0x200002d0
     9e0:	000066a9 	.word	0x000066a9
     9e4:	00000761 	.word	0x00000761
     9e8:	000007b1 	.word	0x000007b1
     9ec:	00000789 	.word	0x00000789
     9f0:	000007f9 	.word	0x000007f9
     9f4:	00000739 	.word	0x00000739

000009f8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	b092      	sub	sp, #72	; 0x48
     9fc:	af00      	add	r7, sp, #0
     9fe:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     a00:	2347      	movs	r3, #71	; 0x47
     a02:	18fb      	adds	r3, r7, r3
     a04:	2200      	movs	r2, #0
     a06:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     a08:	2308      	movs	r3, #8
     a0a:	18fb      	adds	r3, r7, r3
     a0c:	0018      	movs	r0, r3
     a0e:	4b26      	ldr	r3, [pc, #152]	; (aa8 <nm_bus_init+0xb0>)
     a10:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     a12:	2308      	movs	r3, #8
     a14:	18fb      	adds	r3, r7, r3
     a16:	220e      	movs	r2, #14
     a18:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     a1a:	2308      	movs	r3, #8
     a1c:	18fa      	adds	r2, r7, r3
     a1e:	4b23      	ldr	r3, [pc, #140]	; (aac <nm_bus_init+0xb4>)
     a20:	0011      	movs	r1, r2
     a22:	0018      	movs	r0, r3
     a24:	4b22      	ldr	r3, [pc, #136]	; (ab0 <nm_bus_init+0xb8>)
     a26:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     a28:	230c      	movs	r3, #12
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	0018      	movs	r0, r3
     a2e:	4b21      	ldr	r3, [pc, #132]	; (ab4 <nm_bus_init+0xbc>)
     a30:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     a32:	230c      	movs	r3, #12
     a34:	18fb      	adds	r3, r7, r3
     a36:	22c0      	movs	r2, #192	; 0xc0
     a38:	0392      	lsls	r2, r2, #14
     a3a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     a3c:	230c      	movs	r3, #12
     a3e:	18fb      	adds	r3, r7, r3
     a40:	4a1d      	ldr	r2, [pc, #116]	; (ab8 <nm_bus_init+0xc0>)
     a42:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     a44:	230c      	movs	r3, #12
     a46:	18fb      	adds	r3, r7, r3
     a48:	4a1c      	ldr	r2, [pc, #112]	; (abc <nm_bus_init+0xc4>)
     a4a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     a4c:	230c      	movs	r3, #12
     a4e:	18fb      	adds	r3, r7, r3
     a50:	2201      	movs	r2, #1
     a52:	4252      	negs	r2, r2
     a54:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     a56:	230c      	movs	r3, #12
     a58:	18fb      	adds	r3, r7, r3
     a5a:	4a19      	ldr	r2, [pc, #100]	; (ac0 <nm_bus_init+0xc8>)
     a5c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     a5e:	230c      	movs	r3, #12
     a60:	18fb      	adds	r3, r7, r3
     a62:	2200      	movs	r2, #0
     a64:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     a66:	230c      	movs	r3, #12
     a68:	18fb      	adds	r3, r7, r3
     a6a:	4a16      	ldr	r2, [pc, #88]	; (ac4 <nm_bus_init+0xcc>)
     a6c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     a6e:	230c      	movs	r3, #12
     a70:	18fa      	adds	r2, r7, r3
     a72:	4915      	ldr	r1, [pc, #84]	; (ac8 <nm_bus_init+0xd0>)
     a74:	4b15      	ldr	r3, [pc, #84]	; (acc <nm_bus_init+0xd4>)
     a76:	0018      	movs	r0, r3
     a78:	4b15      	ldr	r3, [pc, #84]	; (ad0 <nm_bus_init+0xd8>)
     a7a:	4798      	blx	r3
     a7c:	1e03      	subs	r3, r0, #0
     a7e:	d002      	beq.n	a86 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
     a80:	2306      	movs	r3, #6
     a82:	425b      	negs	r3, r3
     a84:	e00c      	b.n	aa0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
     a86:	4b11      	ldr	r3, [pc, #68]	; (acc <nm_bus_init+0xd4>)
     a88:	0018      	movs	r0, r3
     a8a:	4b12      	ldr	r3, [pc, #72]	; (ad4 <nm_bus_init+0xdc>)
     a8c:	4798      	blx	r3

	nm_bsp_reset();
     a8e:	4b12      	ldr	r3, [pc, #72]	; (ad8 <nm_bus_init+0xe0>)
     a90:	4798      	blx	r3
	nm_bsp_sleep(1);
     a92:	2001      	movs	r0, #1
     a94:	4b11      	ldr	r3, [pc, #68]	; (adc <nm_bus_init+0xe4>)
     a96:	4798      	blx	r3
#endif
	return result;
     a98:	2347      	movs	r3, #71	; 0x47
     a9a:	18fb      	adds	r3, r7, r3
     a9c:	781b      	ldrb	r3, [r3, #0]
     a9e:	b25b      	sxtb	r3, r3
}
     aa0:	0018      	movs	r0, r3
     aa2:	46bd      	mov	sp, r7
     aa4:	b012      	add	sp, #72	; 0x48
     aa6:	bd80      	pop	{r7, pc}
     aa8:	00000605 	.word	0x00000605
     aac:	200002cc 	.word	0x200002cc
     ab0:	00000629 	.word	0x00000629
     ab4:	00000581 	.word	0x00000581
     ab8:	000c0002 	.word	0x000c0002
     abc:	000d0002 	.word	0x000d0002
     ac0:	000f0002 	.word	0x000f0002
     ac4:	00b71b00 	.word	0x00b71b00
     ac8:	42001000 	.word	0x42001000
     acc:	200002d0 	.word	0x200002d0
     ad0:	00006519 	.word	0x00006519
     ad4:	0000068d 	.word	0x0000068d
     ad8:	000002f1 	.word	0x000002f1
     adc:	00000331 	.word	0x00000331

00000ae0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     ae0:	b590      	push	{r4, r7, lr}
     ae2:	b085      	sub	sp, #20
     ae4:	af00      	add	r7, sp, #0
     ae6:	0002      	movs	r2, r0
     ae8:	6039      	str	r1, [r7, #0]
     aea:	1dfb      	adds	r3, r7, #7
     aec:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     aee:	230f      	movs	r3, #15
     af0:	18fb      	adds	r3, r7, r3
     af2:	2200      	movs	r2, #0
     af4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     af6:	1dfb      	adds	r3, r7, #7
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	2b03      	cmp	r3, #3
     afc:	d10f      	bne.n	b1e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     afe:	683b      	ldr	r3, [r7, #0]
     b00:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     b02:	68bb      	ldr	r3, [r7, #8]
     b04:	6818      	ldr	r0, [r3, #0]
     b06:	68bb      	ldr	r3, [r7, #8]
     b08:	6859      	ldr	r1, [r3, #4]
     b0a:	68bb      	ldr	r3, [r7, #8]
     b0c:	891b      	ldrh	r3, [r3, #8]
     b0e:	220f      	movs	r2, #15
     b10:	18bc      	adds	r4, r7, r2
     b12:	001a      	movs	r2, r3
     b14:	4b10      	ldr	r3, [pc, #64]	; (b58 <nm_bus_ioctl+0x78>)
     b16:	4798      	blx	r3
     b18:	0003      	movs	r3, r0
     b1a:	7023      	strb	r3, [r4, #0]
		}
		break;
     b1c:	e013      	b.n	b46 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
     b1e:	230f      	movs	r3, #15
     b20:	18fb      	adds	r3, r7, r3
     b22:	22ff      	movs	r2, #255	; 0xff
     b24:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     b26:	230e      	movs	r3, #14
     b28:	33ff      	adds	r3, #255	; 0xff
     b2a:	001a      	movs	r2, r3
     b2c:	490b      	ldr	r1, [pc, #44]	; (b5c <nm_bus_ioctl+0x7c>)
     b2e:	4b0c      	ldr	r3, [pc, #48]	; (b60 <nm_bus_ioctl+0x80>)
     b30:	0018      	movs	r0, r3
     b32:	4b0c      	ldr	r3, [pc, #48]	; (b64 <nm_bus_ioctl+0x84>)
     b34:	4798      	blx	r3
     b36:	4b0c      	ldr	r3, [pc, #48]	; (b68 <nm_bus_ioctl+0x88>)
     b38:	0018      	movs	r0, r3
     b3a:	4b0c      	ldr	r3, [pc, #48]	; (b6c <nm_bus_ioctl+0x8c>)
     b3c:	4798      	blx	r3
     b3e:	200d      	movs	r0, #13
     b40:	4b0b      	ldr	r3, [pc, #44]	; (b70 <nm_bus_ioctl+0x90>)
     b42:	4798      	blx	r3
			break;
     b44:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     b46:	230f      	movs	r3, #15
     b48:	18fb      	adds	r3, r7, r3
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	b25b      	sxtb	r3, r3
}
     b4e:	0018      	movs	r0, r3
     b50:	46bd      	mov	sp, r7
     b52:	b005      	add	sp, #20
     b54:	bd90      	pop	{r4, r7, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	00000881 	.word	0x00000881
     b5c:	000138e0 	.word	0x000138e0
     b60:	000138b8 	.word	0x000138b8
     b64:	0000efc9 	.word	0x0000efc9
     b68:	000138cc 	.word	0x000138cc
     b6c:	0000f0e5 	.word	0x0000f0e5
     b70:	0000effd 	.word	0x0000effd

00000b74 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     b74:	b580      	push	{r7, lr}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     b7a:	1dfb      	adds	r3, r7, #7
     b7c:	2200      	movs	r2, #0
     b7e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     b80:	1d3b      	adds	r3, r7, #4
     b82:	0018      	movs	r0, r3
     b84:	4b13      	ldr	r3, [pc, #76]	; (bd4 <nm_bus_deinit+0x60>)
     b86:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     b88:	1d3b      	adds	r3, r7, #4
     b8a:	2200      	movs	r2, #0
     b8c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     b8e:	1d3b      	adds	r3, r7, #4
     b90:	2200      	movs	r2, #0
     b92:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
     b94:	4b10      	ldr	r3, [pc, #64]	; (bd8 <nm_bus_deinit+0x64>)
     b96:	0018      	movs	r0, r3
     b98:	4b10      	ldr	r3, [pc, #64]	; (bdc <nm_bus_deinit+0x68>)
     b9a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     b9c:	1d3b      	adds	r3, r7, #4
     b9e:	0019      	movs	r1, r3
     ba0:	200c      	movs	r0, #12
     ba2:	4b0f      	ldr	r3, [pc, #60]	; (be0 <nm_bus_deinit+0x6c>)
     ba4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     ba6:	1d3b      	adds	r3, r7, #4
     ba8:	0019      	movs	r1, r3
     baa:	200f      	movs	r0, #15
     bac:	4b0c      	ldr	r3, [pc, #48]	; (be0 <nm_bus_deinit+0x6c>)
     bae:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     bb0:	1d3b      	adds	r3, r7, #4
     bb2:	0019      	movs	r1, r3
     bb4:	200d      	movs	r0, #13
     bb6:	4b0a      	ldr	r3, [pc, #40]	; (be0 <nm_bus_deinit+0x6c>)
     bb8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     bba:	1d3b      	adds	r3, r7, #4
     bbc:	0019      	movs	r1, r3
     bbe:	200e      	movs	r0, #14
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <nm_bus_deinit+0x6c>)
     bc2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
     bc4:	1dfb      	adds	r3, r7, #7
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	b25b      	sxtb	r3, r3
}
     bca:	0018      	movs	r0, r3
     bcc:	46bd      	mov	sp, r7
     bce:	b002      	add	sp, #8
     bd0:	bd80      	pop	{r7, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	000004e9 	.word	0x000004e9
     bd8:	200002d0 	.word	0x200002d0
     bdc:	000006dd 	.word	0x000006dd
     be0:	0000b77d 	.word	0x0000b77d

00000be4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     be4:	b580      	push	{r7, lr}
     be6:	b084      	sub	sp, #16
     be8:	af00      	add	r7, sp, #0
     bea:	60f8      	str	r0, [r7, #12]
     bec:	60b9      	str	r1, [r7, #8]
     bee:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     bf0:	687b      	ldr	r3, [r7, #4]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d010      	beq.n	c18 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     bf6:	68bb      	ldr	r3, [r7, #8]
     bf8:	781a      	ldrb	r2, [r3, #0]
     bfa:	68fb      	ldr	r3, [r7, #12]
     bfc:	701a      	strb	r2, [r3, #0]
		pDst++;
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	3301      	adds	r3, #1
     c02:	60fb      	str	r3, [r7, #12]
		pSrc++;
     c04:	68bb      	ldr	r3, [r7, #8]
     c06:	3301      	adds	r3, #1
     c08:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     c0a:	687b      	ldr	r3, [r7, #4]
     c0c:	3b01      	subs	r3, #1
     c0e:	607b      	str	r3, [r7, #4]
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	2b00      	cmp	r3, #0
     c14:	d1ef      	bne.n	bf6 <m2m_memcpy+0x12>
     c16:	e000      	b.n	c1a <m2m_memcpy+0x36>
	if(sz == 0) return;
     c18:	46c0      	nop			; (mov r8, r8)
}
     c1a:	46bd      	mov	sp, r7
     c1c:	b004      	add	sp, #16
     c1e:	bd80      	pop	{r7, pc}

00000c20 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     c20:	b580      	push	{r7, lr}
     c22:	b084      	sub	sp, #16
     c24:	af00      	add	r7, sp, #0
     c26:	60f8      	str	r0, [r7, #12]
     c28:	607a      	str	r2, [r7, #4]
     c2a:	230b      	movs	r3, #11
     c2c:	18fb      	adds	r3, r7, r3
     c2e:	1c0a      	adds	r2, r1, #0
     c30:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	2b00      	cmp	r3, #0
     c36:	d00e      	beq.n	c56 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     c38:	68fb      	ldr	r3, [r7, #12]
     c3a:	220b      	movs	r2, #11
     c3c:	18ba      	adds	r2, r7, r2
     c3e:	7812      	ldrb	r2, [r2, #0]
     c40:	701a      	strb	r2, [r3, #0]
		pBuf++;
     c42:	68fb      	ldr	r3, [r7, #12]
     c44:	3301      	adds	r3, #1
     c46:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	3b01      	subs	r3, #1
     c4c:	607b      	str	r3, [r7, #4]
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	2b00      	cmp	r3, #0
     c52:	d1f1      	bne.n	c38 <m2m_memset+0x18>
     c54:	e000      	b.n	c58 <m2m_memset+0x38>
	if(sz == 0) return;
     c56:	46c0      	nop			; (mov r8, r8)
}
     c58:	46bd      	mov	sp, r7
     c5a:	b004      	add	sp, #16
     c5c:	bd80      	pop	{r7, pc}

00000c5e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     c5e:	b580      	push	{r7, lr}
     c60:	b084      	sub	sp, #16
     c62:	af00      	add	r7, sp, #0
     c64:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     c66:	230e      	movs	r3, #14
     c68:	18fb      	adds	r3, r7, r3
     c6a:	2200      	movs	r2, #0
     c6c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     c6e:	e009      	b.n	c84 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     c70:	230e      	movs	r3, #14
     c72:	18fb      	adds	r3, r7, r3
     c74:	881a      	ldrh	r2, [r3, #0]
     c76:	230e      	movs	r3, #14
     c78:	18fb      	adds	r3, r7, r3
     c7a:	3201      	adds	r2, #1
     c7c:	801a      	strh	r2, [r3, #0]
		pcStr++;
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	3301      	adds	r3, #1
     c82:	607b      	str	r3, [r7, #4]
	while(*pcStr)
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	2b00      	cmp	r3, #0
     c8a:	d1f1      	bne.n	c70 <m2m_strlen+0x12>
	}
	return u16StrLen;
     c8c:	230e      	movs	r3, #14
     c8e:	18fb      	adds	r3, r7, r3
     c90:	881b      	ldrh	r3, [r3, #0]
}
     c92:	0018      	movs	r0, r3
     c94:	46bd      	mov	sp, r7
     c96:	b004      	add	sp, #16
     c98:	bd80      	pop	{r7, pc}
	...

00000c9c <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
     c9c:	b580      	push	{r7, lr}
     c9e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
     ca0:	4b04      	ldr	r3, [pc, #16]	; (cb4 <isr+0x18>)
     ca2:	78db      	ldrb	r3, [r3, #3]
     ca4:	b2db      	uxtb	r3, r3
     ca6:	3301      	adds	r3, #1
     ca8:	b2da      	uxtb	r2, r3
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <isr+0x18>)
     cac:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	46bd      	mov	sp, r7
     cb2:	bd80      	pop	{r7, pc}
     cb4:	2000030c 	.word	0x2000030c

00000cb8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     cb8:	b590      	push	{r4, r7, lr}
     cba:	b083      	sub	sp, #12
     cbc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     cbe:	1dfb      	adds	r3, r7, #7
     cc0:	2200      	movs	r2, #0
     cc2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
     cc4:	4b14      	ldr	r3, [pc, #80]	; (d18 <hif_set_rx_done+0x60>)
     cc6:	2200      	movs	r2, #0
     cc8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     cca:	2001      	movs	r0, #1
     ccc:	4b13      	ldr	r3, [pc, #76]	; (d1c <hif_set_rx_done+0x64>)
     cce:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     cd0:	1dfc      	adds	r4, r7, #7
     cd2:	003b      	movs	r3, r7
     cd4:	4a12      	ldr	r2, [pc, #72]	; (d20 <hif_set_rx_done+0x68>)
     cd6:	0019      	movs	r1, r3
     cd8:	0010      	movs	r0, r2
     cda:	4b12      	ldr	r3, [pc, #72]	; (d24 <hif_set_rx_done+0x6c>)
     cdc:	4798      	blx	r3
     cde:	0003      	movs	r3, r0
     ce0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     ce2:	1dfb      	adds	r3, r7, #7
     ce4:	781b      	ldrb	r3, [r3, #0]
     ce6:	b25b      	sxtb	r3, r3
     ce8:	2b00      	cmp	r3, #0
     cea:	d10d      	bne.n	d08 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
     cec:	683b      	ldr	r3, [r7, #0]
     cee:	2202      	movs	r2, #2
     cf0:	4313      	orrs	r3, r2
     cf2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     cf4:	683b      	ldr	r3, [r7, #0]
     cf6:	1dfc      	adds	r4, r7, #7
     cf8:	4a09      	ldr	r2, [pc, #36]	; (d20 <hif_set_rx_done+0x68>)
     cfa:	0019      	movs	r1, r3
     cfc:	0010      	movs	r0, r2
     cfe:	4b0a      	ldr	r3, [pc, #40]	; (d28 <hif_set_rx_done+0x70>)
     d00:	4798      	blx	r3
     d02:	0003      	movs	r3, r0
     d04:	7023      	strb	r3, [r4, #0]
     d06:	e000      	b.n	d0a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
     d08:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     d0a:	1dfb      	adds	r3, r7, #7
     d0c:	781b      	ldrb	r3, [r3, #0]
     d0e:	b25b      	sxtb	r3, r3

}
     d10:	0018      	movs	r0, r3
     d12:	46bd      	mov	sp, r7
     d14:	b003      	add	sp, #12
     d16:	bd90      	pop	{r4, r7, pc}
     d18:	2000030c 	.word	0x2000030c
     d1c:	000003d1 	.word	0x000003d1
     d20:	00001070 	.word	0x00001070
     d24:	00002c5d 	.word	0x00002c5d
     d28:	00002c81 	.word	0x00002c81

00000d2c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     d2c:	b580      	push	{r7, lr}
     d2e:	b082      	sub	sp, #8
     d30:	af00      	add	r7, sp, #0
     d32:	603a      	str	r2, [r7, #0]
     d34:	1dfb      	adds	r3, r7, #7
     d36:	1c02      	adds	r2, r0, #0
     d38:	701a      	strb	r2, [r3, #0]
     d3a:	1d3b      	adds	r3, r7, #4
     d3c:	1c0a      	adds	r2, r1, #0
     d3e:	801a      	strh	r2, [r3, #0]


}
     d40:	46c0      	nop			; (mov r8, r8)
     d42:	46bd      	mov	sp, r7
     d44:	b002      	add	sp, #8
     d46:	bd80      	pop	{r7, pc}

00000d48 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     d48:	b590      	push	{r4, r7, lr}
     d4a:	b083      	sub	sp, #12
     d4c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     d4e:	1dfb      	adds	r3, r7, #7
     d50:	2200      	movs	r2, #0
     d52:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
     d54:	4b16      	ldr	r3, [pc, #88]	; (db0 <hif_chip_wake+0x68>)
     d56:	789b      	ldrb	r3, [r3, #2]
     d58:	b2db      	uxtb	r3, r3
     d5a:	2b00      	cmp	r3, #0
     d5c:	d003      	beq.n	d66 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     d5e:	1dfb      	adds	r3, r7, #7
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	b25b      	sxtb	r3, r3
     d64:	e01f      	b.n	da6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     d66:	4b12      	ldr	r3, [pc, #72]	; (db0 <hif_chip_wake+0x68>)
     d68:	785b      	ldrb	r3, [r3, #1]
     d6a:	b2db      	uxtb	r3, r3
     d6c:	2b00      	cmp	r3, #0
     d6e:	d10e      	bne.n	d8e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     d70:	4b0f      	ldr	r3, [pc, #60]	; (db0 <hif_chip_wake+0x68>)
     d72:	781b      	ldrb	r3, [r3, #0]
     d74:	b2db      	uxtb	r3, r3
     d76:	2b00      	cmp	r3, #0
     d78:	d009      	beq.n	d8e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
     d7a:	1dfc      	adds	r4, r7, #7
     d7c:	4b0d      	ldr	r3, [pc, #52]	; (db4 <hif_chip_wake+0x6c>)
     d7e:	4798      	blx	r3
     d80:	0003      	movs	r3, r0
     d82:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     d84:	1dfb      	adds	r3, r7, #7
     d86:	781b      	ldrb	r3, [r3, #0]
     d88:	b25b      	sxtb	r3, r3
     d8a:	2b00      	cmp	r3, #0
     d8c:	d107      	bne.n	d9e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     d8e:	4b08      	ldr	r3, [pc, #32]	; (db0 <hif_chip_wake+0x68>)
     d90:	785b      	ldrb	r3, [r3, #1]
     d92:	b2db      	uxtb	r3, r3
     d94:	3301      	adds	r3, #1
     d96:	b2da      	uxtb	r2, r3
     d98:	4b05      	ldr	r3, [pc, #20]	; (db0 <hif_chip_wake+0x68>)
     d9a:	705a      	strb	r2, [r3, #1]
     d9c:	e000      	b.n	da0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
     d9e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
     da0:	1dfb      	adds	r3, r7, #7
     da2:	781b      	ldrb	r3, [r3, #0]
     da4:	b25b      	sxtb	r3, r3
}
     da6:	0018      	movs	r0, r3
     da8:	46bd      	mov	sp, r7
     daa:	b003      	add	sp, #12
     dac:	bd90      	pop	{r4, r7, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	2000030c 	.word	0x2000030c
     db4:	00002731 	.word	0x00002731

00000db8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
     db8:	b580      	push	{r7, lr}
     dba:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
     dbc:	4b07      	ldr	r3, [pc, #28]	; (ddc <hif_chip_sleep_sc+0x24>)
     dbe:	785b      	ldrb	r3, [r3, #1]
     dc0:	b2db      	uxtb	r3, r3
     dc2:	2b00      	cmp	r3, #0
     dc4:	d006      	beq.n	dd4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
     dc6:	4b05      	ldr	r3, [pc, #20]	; (ddc <hif_chip_sleep_sc+0x24>)
     dc8:	785b      	ldrb	r3, [r3, #1]
     dca:	b2db      	uxtb	r3, r3
     dcc:	3b01      	subs	r3, #1
     dce:	b2da      	uxtb	r2, r3
     dd0:	4b02      	ldr	r3, [pc, #8]	; (ddc <hif_chip_sleep_sc+0x24>)
     dd2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
     dd4:	2300      	movs	r3, #0
}
     dd6:	0018      	movs	r0, r3
     dd8:	46bd      	mov	sp, r7
     dda:	bd80      	pop	{r7, pc}
     ddc:	2000030c 	.word	0x2000030c

00000de0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     de0:	b590      	push	{r4, r7, lr}
     de2:	b083      	sub	sp, #12
     de4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     de6:	1dfb      	adds	r3, r7, #7
     de8:	2200      	movs	r2, #0
     dea:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
     dec:	4b10      	ldr	r3, [pc, #64]	; (e30 <hif_chip_sleep+0x50>)
     dee:	785b      	ldrb	r3, [r3, #1]
     df0:	b2db      	uxtb	r3, r3
     df2:	2b00      	cmp	r3, #0
     df4:	d006      	beq.n	e04 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
     df6:	4b0e      	ldr	r3, [pc, #56]	; (e30 <hif_chip_sleep+0x50>)
     df8:	785b      	ldrb	r3, [r3, #1]
     dfa:	b2db      	uxtb	r3, r3
     dfc:	3b01      	subs	r3, #1
     dfe:	b2da      	uxtb	r2, r3
     e00:	4b0b      	ldr	r3, [pc, #44]	; (e30 <hif_chip_sleep+0x50>)
     e02:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     e04:	4b0a      	ldr	r3, [pc, #40]	; (e30 <hif_chip_sleep+0x50>)
     e06:	785b      	ldrb	r3, [r3, #1]
     e08:	b2db      	uxtb	r3, r3
     e0a:	2b00      	cmp	r3, #0
     e0c:	d109      	bne.n	e22 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     e0e:	4b08      	ldr	r3, [pc, #32]	; (e30 <hif_chip_sleep+0x50>)
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	b2db      	uxtb	r3, r3
     e14:	2b00      	cmp	r3, #0
     e16:	d004      	beq.n	e22 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
     e18:	1dfc      	adds	r4, r7, #7
     e1a:	4b06      	ldr	r3, [pc, #24]	; (e34 <hif_chip_sleep+0x54>)
     e1c:	4798      	blx	r3
     e1e:	0003      	movs	r3, r0
     e20:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
     e22:	1dfb      	adds	r3, r7, #7
     e24:	781b      	ldrb	r3, [r3, #0]
     e26:	b25b      	sxtb	r3, r3
}
     e28:	0018      	movs	r0, r3
     e2a:	46bd      	mov	sp, r7
     e2c:	b003      	add	sp, #12
     e2e:	bd90      	pop	{r4, r7, pc}
     e30:	2000030c 	.word	0x2000030c
     e34:	00002659 	.word	0x00002659

00000e38 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     e38:	b580      	push	{r7, lr}
     e3a:	b082      	sub	sp, #8
     e3c:	af00      	add	r7, sp, #0
     e3e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     e40:	4b09      	ldr	r3, [pc, #36]	; (e68 <hif_init+0x30>)
     e42:	2228      	movs	r2, #40	; 0x28
     e44:	2100      	movs	r1, #0
     e46:	0018      	movs	r0, r3
     e48:	4b08      	ldr	r3, [pc, #32]	; (e6c <hif_init+0x34>)
     e4a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     e4c:	4b08      	ldr	r3, [pc, #32]	; (e70 <hif_init+0x38>)
     e4e:	0018      	movs	r0, r3
     e50:	4b08      	ldr	r3, [pc, #32]	; (e74 <hif_init+0x3c>)
     e52:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     e54:	4b08      	ldr	r3, [pc, #32]	; (e78 <hif_init+0x40>)
     e56:	0019      	movs	r1, r3
     e58:	2003      	movs	r0, #3
     e5a:	4b08      	ldr	r3, [pc, #32]	; (e7c <hif_init+0x44>)
     e5c:	4798      	blx	r3
	return M2M_SUCCESS;
     e5e:	2300      	movs	r3, #0
}
     e60:	0018      	movs	r0, r3
     e62:	46bd      	mov	sp, r7
     e64:	b002      	add	sp, #8
     e66:	bd80      	pop	{r7, pc}
     e68:	2000030c 	.word	0x2000030c
     e6c:	00000c21 	.word	0x00000c21
     e70:	00000c9d 	.word	0x00000c9d
     e74:	00000359 	.word	0x00000359
     e78:	00000d2d 	.word	0x00000d2d
     e7c:	000018f5 	.word	0x000018f5

00000e80 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     e80:	b590      	push	{r4, r7, lr}
     e82:	b089      	sub	sp, #36	; 0x24
     e84:	af00      	add	r7, sp, #0
     e86:	0004      	movs	r4, r0
     e88:	0008      	movs	r0, r1
     e8a:	603a      	str	r2, [r7, #0]
     e8c:	0019      	movs	r1, r3
     e8e:	1dfb      	adds	r3, r7, #7
     e90:	1c22      	adds	r2, r4, #0
     e92:	701a      	strb	r2, [r3, #0]
     e94:	1dbb      	adds	r3, r7, #6
     e96:	1c02      	adds	r2, r0, #0
     e98:	701a      	strb	r2, [r3, #0]
     e9a:	1d3b      	adds	r3, r7, #4
     e9c:	1c0a      	adds	r2, r1, #0
     e9e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     ea0:	231f      	movs	r3, #31
     ea2:	18fb      	adds	r3, r7, r3
     ea4:	22ff      	movs	r2, #255	; 0xff
     ea6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     ea8:	1dbb      	adds	r3, r7, #6
     eaa:	781b      	ldrb	r3, [r3, #0]
     eac:	227f      	movs	r2, #127	; 0x7f
     eae:	4013      	ands	r3, r2
     eb0:	b2da      	uxtb	r2, r3
     eb2:	2318      	movs	r3, #24
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     eb8:	2318      	movs	r3, #24
     eba:	18fb      	adds	r3, r7, r3
     ebc:	1dfa      	adds	r2, r7, #7
     ebe:	7812      	ldrb	r2, [r2, #0]
     ec0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     ec2:	2318      	movs	r3, #24
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	2208      	movs	r2, #8
     ec8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ecc:	2b00      	cmp	r3, #0
     ece:	d011      	beq.n	ef4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     ed0:	2318      	movs	r3, #24
     ed2:	18fb      	adds	r3, r7, r3
     ed4:	885b      	ldrh	r3, [r3, #2]
     ed6:	b29a      	uxth	r2, r3
     ed8:	2338      	movs	r3, #56	; 0x38
     eda:	18f9      	adds	r1, r7, r3
     edc:	2334      	movs	r3, #52	; 0x34
     ede:	18fb      	adds	r3, r7, r3
     ee0:	8809      	ldrh	r1, [r1, #0]
     ee2:	881b      	ldrh	r3, [r3, #0]
     ee4:	18cb      	adds	r3, r1, r3
     ee6:	b29b      	uxth	r3, r3
     ee8:	18d3      	adds	r3, r2, r3
     eea:	b29a      	uxth	r2, r3
     eec:	2318      	movs	r3, #24
     eee:	18fb      	adds	r3, r7, r3
     ef0:	805a      	strh	r2, [r3, #2]
     ef2:	e00a      	b.n	f0a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     ef4:	2318      	movs	r3, #24
     ef6:	18fb      	adds	r3, r7, r3
     ef8:	885b      	ldrh	r3, [r3, #2]
     efa:	b29a      	uxth	r2, r3
     efc:	1d3b      	adds	r3, r7, #4
     efe:	881b      	ldrh	r3, [r3, #0]
     f00:	18d3      	adds	r3, r2, r3
     f02:	b29a      	uxth	r2, r3
     f04:	2318      	movs	r3, #24
     f06:	18fb      	adds	r3, r7, r3
     f08:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     f0a:	231f      	movs	r3, #31
     f0c:	18fc      	adds	r4, r7, r3
     f0e:	4bb0      	ldr	r3, [pc, #704]	; (11d0 <hif_send+0x350>)
     f10:	4798      	blx	r3
     f12:	0003      	movs	r3, r0
     f14:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     f16:	231f      	movs	r3, #31
     f18:	18fb      	adds	r3, r7, r3
     f1a:	781b      	ldrb	r3, [r3, #0]
     f1c:	b25b      	sxtb	r3, r3
     f1e:	2b00      	cmp	r3, #0
     f20:	d000      	beq.n	f24 <hif_send+0xa4>
     f22:	e127      	b.n	1174 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
     f24:	2300      	movs	r3, #0
     f26:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     f28:	230e      	movs	r3, #14
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	2200      	movs	r2, #0
     f2e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     f30:	2300      	movs	r3, #0
     f32:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     f34:	1dfb      	adds	r3, r7, #7
     f36:	781a      	ldrb	r2, [r3, #0]
     f38:	697b      	ldr	r3, [r7, #20]
     f3a:	4313      	orrs	r3, r2
     f3c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     f3e:	1dbb      	adds	r3, r7, #6
     f40:	781b      	ldrb	r3, [r3, #0]
     f42:	021a      	lsls	r2, r3, #8
     f44:	697b      	ldr	r3, [r7, #20]
     f46:	4313      	orrs	r3, r2
     f48:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
     f4a:	2318      	movs	r3, #24
     f4c:	18fb      	adds	r3, r7, r3
     f4e:	885b      	ldrh	r3, [r3, #2]
     f50:	b29b      	uxth	r3, r3
     f52:	041a      	lsls	r2, r3, #16
     f54:	697b      	ldr	r3, [r7, #20]
     f56:	4313      	orrs	r3, r2
     f58:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     f5a:	697b      	ldr	r3, [r7, #20]
     f5c:	221f      	movs	r2, #31
     f5e:	18bc      	adds	r4, r7, r2
     f60:	4a9c      	ldr	r2, [pc, #624]	; (11d4 <hif_send+0x354>)
     f62:	0019      	movs	r1, r3
     f64:	0010      	movs	r0, r2
     f66:	4b9c      	ldr	r3, [pc, #624]	; (11d8 <hif_send+0x358>)
     f68:	4798      	blx	r3
     f6a:	0003      	movs	r3, r0
     f6c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     f6e:	231f      	movs	r3, #31
     f70:	18fb      	adds	r3, r7, r3
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	b25b      	sxtb	r3, r3
     f76:	2b00      	cmp	r3, #0
     f78:	d000      	beq.n	f7c <hif_send+0xfc>
     f7a:	e115      	b.n	11a8 <hif_send+0x328>

		reg = 0UL;
     f7c:	2300      	movs	r3, #0
     f7e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
     f80:	697b      	ldr	r3, [r7, #20]
     f82:	2202      	movs	r2, #2
     f84:	4313      	orrs	r3, r2
     f86:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     f88:	697b      	ldr	r3, [r7, #20]
     f8a:	221f      	movs	r2, #31
     f8c:	18bc      	adds	r4, r7, r2
     f8e:	4a93      	ldr	r2, [pc, #588]	; (11dc <hif_send+0x35c>)
     f90:	0019      	movs	r1, r3
     f92:	0010      	movs	r0, r2
     f94:	4b90      	ldr	r3, [pc, #576]	; (11d8 <hif_send+0x358>)
     f96:	4798      	blx	r3
     f98:	0003      	movs	r3, r0
     f9a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     f9c:	231f      	movs	r3, #31
     f9e:	18fb      	adds	r3, r7, r3
     fa0:	781b      	ldrb	r3, [r3, #0]
     fa2:	b25b      	sxtb	r3, r3
     fa4:	2b00      	cmp	r3, #0
     fa6:	d000      	beq.n	faa <hif_send+0x12a>
     fa8:	e100      	b.n	11ac <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     faa:	2300      	movs	r3, #0
     fac:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     fae:	230e      	movs	r3, #14
     fb0:	18fb      	adds	r3, r7, r3
     fb2:	2200      	movs	r2, #0
     fb4:	801a      	strh	r2, [r3, #0]
     fb6:	e04f      	b.n	1058 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     fb8:	231f      	movs	r3, #31
     fba:	18fc      	adds	r4, r7, r3
     fbc:	2314      	movs	r3, #20
     fbe:	18fb      	adds	r3, r7, r3
     fc0:	4a86      	ldr	r2, [pc, #536]	; (11dc <hif_send+0x35c>)
     fc2:	0019      	movs	r1, r3
     fc4:	0010      	movs	r0, r2
     fc6:	4b86      	ldr	r3, [pc, #536]	; (11e0 <hif_send+0x360>)
     fc8:	4798      	blx	r3
     fca:	0003      	movs	r3, r0
     fcc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
     fce:	231f      	movs	r3, #31
     fd0:	18fb      	adds	r3, r7, r3
     fd2:	781b      	ldrb	r3, [r3, #0]
     fd4:	b25b      	sxtb	r3, r3
     fd6:	2b00      	cmp	r3, #0
     fd8:	d146      	bne.n	1068 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
     fda:	230e      	movs	r3, #14
     fdc:	18fb      	adds	r3, r7, r3
     fde:	881b      	ldrh	r3, [r3, #0]
     fe0:	b29a      	uxth	r2, r3
     fe2:	23f4      	movs	r3, #244	; 0xf4
     fe4:	33ff      	adds	r3, #255	; 0xff
     fe6:	429a      	cmp	r2, r3
     fe8:	d915      	bls.n	1016 <hif_send+0x196>
				if(cnt < 501) {
     fea:	230e      	movs	r3, #14
     fec:	18fb      	adds	r3, r7, r3
     fee:	881b      	ldrh	r3, [r3, #0]
     ff0:	b29a      	uxth	r2, r3
     ff2:	23fa      	movs	r3, #250	; 0xfa
     ff4:	005b      	lsls	r3, r3, #1
     ff6:	429a      	cmp	r2, r3
     ff8:	d80a      	bhi.n	1010 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
     ffa:	4b7a      	ldr	r3, [pc, #488]	; (11e4 <hif_send+0x364>)
     ffc:	0018      	movs	r0, r3
     ffe:	4b7a      	ldr	r3, [pc, #488]	; (11e8 <hif_send+0x368>)
    1000:	4798      	blx	r3
    1002:	4b7a      	ldr	r3, [pc, #488]	; (11ec <hif_send+0x36c>)
    1004:	0018      	movs	r0, r3
    1006:	4b7a      	ldr	r3, [pc, #488]	; (11f0 <hif_send+0x370>)
    1008:	4798      	blx	r3
    100a:	200d      	movs	r0, #13
    100c:	4b79      	ldr	r3, [pc, #484]	; (11f4 <hif_send+0x374>)
    100e:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    1010:	2001      	movs	r0, #1
    1012:	4b79      	ldr	r3, [pc, #484]	; (11f8 <hif_send+0x378>)
    1014:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    1016:	697b      	ldr	r3, [r7, #20]
    1018:	2202      	movs	r2, #2
    101a:	4013      	ands	r3, r2
    101c:	d113      	bne.n	1046 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    101e:	231f      	movs	r3, #31
    1020:	18fc      	adds	r4, r7, r3
    1022:	2310      	movs	r3, #16
    1024:	18fb      	adds	r3, r7, r3
    1026:	4a75      	ldr	r2, [pc, #468]	; (11fc <hif_send+0x37c>)
    1028:	0019      	movs	r1, r3
    102a:	0010      	movs	r0, r2
    102c:	4b6c      	ldr	r3, [pc, #432]	; (11e0 <hif_send+0x360>)
    102e:	4798      	blx	r3
    1030:	0003      	movs	r3, r0
    1032:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    1034:	231f      	movs	r3, #31
    1036:	18fb      	adds	r3, r7, r3
    1038:	781b      	ldrb	r3, [r3, #0]
    103a:	b25b      	sxtb	r3, r3
    103c:	2b00      	cmp	r3, #0
    103e:	d015      	beq.n	106c <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1040:	2300      	movs	r3, #0
    1042:	613b      	str	r3, [r7, #16]
					goto ERR1;
    1044:	e0b9      	b.n	11ba <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    1046:	230e      	movs	r3, #14
    1048:	18fb      	adds	r3, r7, r3
    104a:	881b      	ldrh	r3, [r3, #0]
    104c:	b29b      	uxth	r3, r3
    104e:	3301      	adds	r3, #1
    1050:	b29a      	uxth	r2, r3
    1052:	230e      	movs	r3, #14
    1054:	18fb      	adds	r3, r7, r3
    1056:	801a      	strh	r2, [r3, #0]
    1058:	230e      	movs	r3, #14
    105a:	18fb      	adds	r3, r7, r3
    105c:	881b      	ldrh	r3, [r3, #0]
    105e:	b29b      	uxth	r3, r3
    1060:	4a67      	ldr	r2, [pc, #412]	; (1200 <hif_send+0x380>)
    1062:	4293      	cmp	r3, r2
    1064:	d9a8      	bls.n	fb8 <hif_send+0x138>
    1066:	e002      	b.n	106e <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    1068:	46c0      	nop			; (mov r8, r8)
    106a:	e000      	b.n	106e <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    106c:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    106e:	693b      	ldr	r3, [r7, #16]
    1070:	2b00      	cmp	r3, #0
    1072:	d100      	bne.n	1076 <hif_send+0x1f6>
    1074:	e073      	b.n	115e <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    1076:	693b      	ldr	r3, [r7, #16]
    1078:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    107a:	2318      	movs	r3, #24
    107c:	18fb      	adds	r3, r7, r3
    107e:	885b      	ldrh	r3, [r3, #2]
    1080:	b29a      	uxth	r2, r3
    1082:	2318      	movs	r3, #24
    1084:	18fb      	adds	r3, r7, r3
    1086:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1088:	68bb      	ldr	r3, [r7, #8]
    108a:	221f      	movs	r2, #31
    108c:	18bc      	adds	r4, r7, r2
    108e:	2218      	movs	r2, #24
    1090:	18b9      	adds	r1, r7, r2
    1092:	2208      	movs	r2, #8
    1094:	0018      	movs	r0, r3
    1096:	4b5b      	ldr	r3, [pc, #364]	; (1204 <hif_send+0x384>)
    1098:	4798      	blx	r3
    109a:	0003      	movs	r3, r0
    109c:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    109e:	231f      	movs	r3, #31
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	781b      	ldrb	r3, [r3, #0]
    10a4:	b25b      	sxtb	r3, r3
    10a6:	2b00      	cmp	r3, #0
    10a8:	d000      	beq.n	10ac <hif_send+0x22c>
    10aa:	e081      	b.n	11b0 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    10ac:	68bb      	ldr	r3, [r7, #8]
    10ae:	3308      	adds	r3, #8
    10b0:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    10b2:	683b      	ldr	r3, [r7, #0]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d015      	beq.n	10e4 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    10b8:	68b8      	ldr	r0, [r7, #8]
    10ba:	1d3b      	adds	r3, r7, #4
    10bc:	881a      	ldrh	r2, [r3, #0]
    10be:	231f      	movs	r3, #31
    10c0:	18fc      	adds	r4, r7, r3
    10c2:	683b      	ldr	r3, [r7, #0]
    10c4:	0019      	movs	r1, r3
    10c6:	4b4f      	ldr	r3, [pc, #316]	; (1204 <hif_send+0x384>)
    10c8:	4798      	blx	r3
    10ca:	0003      	movs	r3, r0
    10cc:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    10ce:	231f      	movs	r3, #31
    10d0:	18fb      	adds	r3, r7, r3
    10d2:	781b      	ldrb	r3, [r3, #0]
    10d4:	b25b      	sxtb	r3, r3
    10d6:	2b00      	cmp	r3, #0
    10d8:	d16c      	bne.n	11b4 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    10da:	1d3b      	adds	r3, r7, #4
    10dc:	881a      	ldrh	r2, [r3, #0]
    10de:	68bb      	ldr	r3, [r7, #8]
    10e0:	18d3      	adds	r3, r2, r3
    10e2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    10e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10e6:	2b00      	cmp	r3, #0
    10e8:	d021      	beq.n	112e <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    10ea:	2338      	movs	r3, #56	; 0x38
    10ec:	18fb      	adds	r3, r7, r3
    10ee:	881a      	ldrh	r2, [r3, #0]
    10f0:	1d3b      	adds	r3, r7, #4
    10f2:	881b      	ldrh	r3, [r3, #0]
    10f4:	1ad3      	subs	r3, r2, r3
    10f6:	001a      	movs	r2, r3
    10f8:	68bb      	ldr	r3, [r7, #8]
    10fa:	18d3      	adds	r3, r2, r3
    10fc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    10fe:	68b8      	ldr	r0, [r7, #8]
    1100:	2334      	movs	r3, #52	; 0x34
    1102:	18fb      	adds	r3, r7, r3
    1104:	881a      	ldrh	r2, [r3, #0]
    1106:	231f      	movs	r3, #31
    1108:	18fc      	adds	r4, r7, r3
    110a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    110c:	0019      	movs	r1, r3
    110e:	4b3d      	ldr	r3, [pc, #244]	; (1204 <hif_send+0x384>)
    1110:	4798      	blx	r3
    1112:	0003      	movs	r3, r0
    1114:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    1116:	231f      	movs	r3, #31
    1118:	18fb      	adds	r3, r7, r3
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	b25b      	sxtb	r3, r3
    111e:	2b00      	cmp	r3, #0
    1120:	d14a      	bne.n	11b8 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    1122:	2334      	movs	r3, #52	; 0x34
    1124:	18fb      	adds	r3, r7, r3
    1126:	881a      	ldrh	r2, [r3, #0]
    1128:	68bb      	ldr	r3, [r7, #8]
    112a:	18d3      	adds	r3, r2, r3
    112c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    112e:	693b      	ldr	r3, [r7, #16]
    1130:	009b      	lsls	r3, r3, #2
    1132:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    1134:	697b      	ldr	r3, [r7, #20]
    1136:	2202      	movs	r2, #2
    1138:	4313      	orrs	r3, r2
    113a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    113c:	697b      	ldr	r3, [r7, #20]
    113e:	221f      	movs	r2, #31
    1140:	18bc      	adds	r4, r7, r2
    1142:	4a31      	ldr	r2, [pc, #196]	; (1208 <hif_send+0x388>)
    1144:	0019      	movs	r1, r3
    1146:	0010      	movs	r0, r2
    1148:	4b23      	ldr	r3, [pc, #140]	; (11d8 <hif_send+0x358>)
    114a:	4798      	blx	r3
    114c:	0003      	movs	r3, r0
    114e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1150:	231f      	movs	r3, #31
    1152:	18fb      	adds	r3, r7, r3
    1154:	781b      	ldrb	r3, [r3, #0]
    1156:	b25b      	sxtb	r3, r3
    1158:	2b00      	cmp	r3, #0
    115a:	d01a      	beq.n	1192 <hif_send+0x312>
    115c:	e02d      	b.n	11ba <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    115e:	231f      	movs	r3, #31
    1160:	18fc      	adds	r4, r7, r3
    1162:	4b2a      	ldr	r3, [pc, #168]	; (120c <hif_send+0x38c>)
    1164:	4798      	blx	r3
    1166:	0003      	movs	r3, r0
    1168:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    116a:	231f      	movs	r3, #31
    116c:	18fb      	adds	r3, r7, r3
    116e:	22fd      	movs	r2, #253	; 0xfd
    1170:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    1172:	e024      	b.n	11be <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1174:	23cb      	movs	r3, #203	; 0xcb
    1176:	005a      	lsls	r2, r3, #1
    1178:	4925      	ldr	r1, [pc, #148]	; (1210 <hif_send+0x390>)
    117a:	4b26      	ldr	r3, [pc, #152]	; (1214 <hif_send+0x394>)
    117c:	0018      	movs	r0, r3
    117e:	4b1a      	ldr	r3, [pc, #104]	; (11e8 <hif_send+0x368>)
    1180:	4798      	blx	r3
    1182:	4b25      	ldr	r3, [pc, #148]	; (1218 <hif_send+0x398>)
    1184:	0018      	movs	r0, r3
    1186:	4b1a      	ldr	r3, [pc, #104]	; (11f0 <hif_send+0x370>)
    1188:	4798      	blx	r3
    118a:	200d      	movs	r0, #13
    118c:	4b19      	ldr	r3, [pc, #100]	; (11f4 <hif_send+0x374>)
    118e:	4798      	blx	r3
		goto ERR2;
    1190:	e015      	b.n	11be <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    1192:	231f      	movs	r3, #31
    1194:	18fc      	adds	r4, r7, r3
    1196:	4b1d      	ldr	r3, [pc, #116]	; (120c <hif_send+0x38c>)
    1198:	4798      	blx	r3
    119a:	0003      	movs	r3, r0
    119c:	7023      	strb	r3, [r4, #0]
	return ret;
    119e:	231f      	movs	r3, #31
    11a0:	18fb      	adds	r3, r7, r3
    11a2:	781b      	ldrb	r3, [r3, #0]
    11a4:	b25b      	sxtb	r3, r3
    11a6:	e00e      	b.n	11c6 <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    11a8:	46c0      	nop			; (mov r8, r8)
    11aa:	e006      	b.n	11ba <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    11ac:	46c0      	nop			; (mov r8, r8)
    11ae:	e004      	b.n	11ba <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    11b0:	46c0      	nop			; (mov r8, r8)
    11b2:	e002      	b.n	11ba <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    11b4:	46c0      	nop			; (mov r8, r8)
    11b6:	e000      	b.n	11ba <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    11b8:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    11ba:	4b18      	ldr	r3, [pc, #96]	; (121c <hif_send+0x39c>)
    11bc:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    11be:	231f      	movs	r3, #31
    11c0:	18fb      	adds	r3, r7, r3
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	b25b      	sxtb	r3, r3
}
    11c6:	0018      	movs	r0, r3
    11c8:	46bd      	mov	sp, r7
    11ca:	b009      	add	sp, #36	; 0x24
    11cc:	bd90      	pop	{r4, r7, pc}
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	00000d49 	.word	0x00000d49
    11d4:	0000108c 	.word	0x0000108c
    11d8:	00002c81 	.word	0x00002c81
    11dc:	00001078 	.word	0x00001078
    11e0:	00002c5d 	.word	0x00002c5d
    11e4:	000138f0 	.word	0x000138f0
    11e8:	0000efc9 	.word	0x0000efc9
    11ec:	000138fc 	.word	0x000138fc
    11f0:	0000f0e5 	.word	0x0000f0e5
    11f4:	0000effd 	.word	0x0000effd
    11f8:	00000331 	.word	0x00000331
    11fc:	00150400 	.word	0x00150400
    1200:	000003e7 	.word	0x000003e7
    1204:	00002dc9 	.word	0x00002dc9
    1208:	0000106c 	.word	0x0000106c
    120c:	00000de1 	.word	0x00000de1
    1210:	00013c04 	.word	0x00013c04
    1214:	0001390c 	.word	0x0001390c
    1218:	00013920 	.word	0x00013920
    121c:	00000db9 	.word	0x00000db9

00001220 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1220:	b590      	push	{r4, r7, lr}
    1222:	b087      	sub	sp, #28
    1224:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    1226:	230f      	movs	r3, #15
    1228:	18fb      	adds	r3, r7, r3
    122a:	2200      	movs	r2, #0
    122c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    122e:	230f      	movs	r3, #15
    1230:	18fc      	adds	r4, r7, r3
    1232:	2308      	movs	r3, #8
    1234:	18fb      	adds	r3, r7, r3
    1236:	4ad6      	ldr	r2, [pc, #856]	; (1590 <hif_isr+0x370>)
    1238:	0019      	movs	r1, r3
    123a:	0010      	movs	r0, r2
    123c:	4bd5      	ldr	r3, [pc, #852]	; (1594 <hif_isr+0x374>)
    123e:	4798      	blx	r3
    1240:	0003      	movs	r3, r0
    1242:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1244:	230f      	movs	r3, #15
    1246:	18fb      	adds	r3, r7, r3
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	b25b      	sxtb	r3, r3
    124c:	2b00      	cmp	r3, #0
    124e:	d000      	beq.n	1252 <hif_isr+0x32>
    1250:	e217      	b.n	1682 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    1252:	68bb      	ldr	r3, [r7, #8]
    1254:	2201      	movs	r2, #1
    1256:	4013      	ands	r3, r2
    1258:	d100      	bne.n	125c <hif_isr+0x3c>
    125a:	e1fd      	b.n	1658 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    125c:	2000      	movs	r0, #0
    125e:	4bce      	ldr	r3, [pc, #824]	; (1598 <hif_isr+0x378>)
    1260:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    1262:	68bb      	ldr	r3, [r7, #8]
    1264:	2201      	movs	r2, #1
    1266:	4393      	bics	r3, r2
    1268:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    126a:	68bb      	ldr	r3, [r7, #8]
    126c:	220f      	movs	r2, #15
    126e:	18bc      	adds	r4, r7, r2
    1270:	4ac7      	ldr	r2, [pc, #796]	; (1590 <hif_isr+0x370>)
    1272:	0019      	movs	r1, r3
    1274:	0010      	movs	r0, r2
    1276:	4bc9      	ldr	r3, [pc, #804]	; (159c <hif_isr+0x37c>)
    1278:	4798      	blx	r3
    127a:	0003      	movs	r3, r0
    127c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    127e:	230f      	movs	r3, #15
    1280:	18fb      	adds	r3, r7, r3
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	b25b      	sxtb	r3, r3
    1286:	2b00      	cmp	r3, #0
    1288:	d000      	beq.n	128c <hif_isr+0x6c>
    128a:	e208      	b.n	169e <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    128c:	4bc4      	ldr	r3, [pc, #784]	; (15a0 <hif_isr+0x380>)
    128e:	2201      	movs	r2, #1
    1290:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1292:	68bb      	ldr	r3, [r7, #8]
    1294:	089b      	lsrs	r3, r3, #2
    1296:	b29a      	uxth	r2, r3
    1298:	230c      	movs	r3, #12
    129a:	18fb      	adds	r3, r7, r3
    129c:	0512      	lsls	r2, r2, #20
    129e:	0d12      	lsrs	r2, r2, #20
    12a0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    12a2:	230c      	movs	r3, #12
    12a4:	18fb      	adds	r3, r7, r3
    12a6:	881b      	ldrh	r3, [r3, #0]
    12a8:	2b00      	cmp	r3, #0
    12aa:	d100      	bne.n	12ae <hif_isr+0x8e>
    12ac:	e1c1      	b.n	1632 <hif_isr+0x412>
				uint32 address = 0;
    12ae:	2300      	movs	r3, #0
    12b0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    12b2:	230f      	movs	r3, #15
    12b4:	18fc      	adds	r4, r7, r3
    12b6:	003b      	movs	r3, r7
    12b8:	4aba      	ldr	r2, [pc, #744]	; (15a4 <hif_isr+0x384>)
    12ba:	0019      	movs	r1, r3
    12bc:	0010      	movs	r0, r2
    12be:	4bb5      	ldr	r3, [pc, #724]	; (1594 <hif_isr+0x374>)
    12c0:	4798      	blx	r3
    12c2:	0003      	movs	r3, r0
    12c4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    12c6:	230f      	movs	r3, #15
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	b25b      	sxtb	r3, r3
    12ce:	2b00      	cmp	r3, #0
    12d0:	d012      	beq.n	12f8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    12d2:	23c8      	movs	r3, #200	; 0xc8
    12d4:	33ff      	adds	r3, #255	; 0xff
    12d6:	001a      	movs	r2, r3
    12d8:	49b3      	ldr	r1, [pc, #716]	; (15a8 <hif_isr+0x388>)
    12da:	4bb4      	ldr	r3, [pc, #720]	; (15ac <hif_isr+0x38c>)
    12dc:	0018      	movs	r0, r3
    12de:	4bb4      	ldr	r3, [pc, #720]	; (15b0 <hif_isr+0x390>)
    12e0:	4798      	blx	r3
    12e2:	4bb4      	ldr	r3, [pc, #720]	; (15b4 <hif_isr+0x394>)
    12e4:	0018      	movs	r0, r3
    12e6:	4bb4      	ldr	r3, [pc, #720]	; (15b8 <hif_isr+0x398>)
    12e8:	4798      	blx	r3
    12ea:	200d      	movs	r0, #13
    12ec:	4bb3      	ldr	r3, [pc, #716]	; (15bc <hif_isr+0x39c>)
    12ee:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    12f0:	2001      	movs	r0, #1
    12f2:	4ba9      	ldr	r3, [pc, #676]	; (1598 <hif_isr+0x378>)
    12f4:	4798      	blx	r3
					goto ERR1;
    12f6:	e1d3      	b.n	16a0 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    12f8:	683a      	ldr	r2, [r7, #0]
    12fa:	4ba9      	ldr	r3, [pc, #676]	; (15a0 <hif_isr+0x380>)
    12fc:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    12fe:	230c      	movs	r3, #12
    1300:	18fb      	adds	r3, r7, r3
    1302:	881a      	ldrh	r2, [r3, #0]
    1304:	4ba6      	ldr	r3, [pc, #664]	; (15a0 <hif_isr+0x380>)
    1306:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1308:	683b      	ldr	r3, [r7, #0]
    130a:	220f      	movs	r2, #15
    130c:	18bc      	adds	r4, r7, r2
    130e:	1d39      	adds	r1, r7, #4
    1310:	2204      	movs	r2, #4
    1312:	0018      	movs	r0, r3
    1314:	4baa      	ldr	r3, [pc, #680]	; (15c0 <hif_isr+0x3a0>)
    1316:	4798      	blx	r3
    1318:	0003      	movs	r3, r0
    131a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    131c:	1d3b      	adds	r3, r7, #4
    131e:	885b      	ldrh	r3, [r3, #2]
    1320:	b29a      	uxth	r2, r3
    1322:	1d3b      	adds	r3, r7, #4
    1324:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    1326:	230f      	movs	r3, #15
    1328:	18fb      	adds	r3, r7, r3
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	b25b      	sxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	d012      	beq.n	1358 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    1332:	23d2      	movs	r3, #210	; 0xd2
    1334:	33ff      	adds	r3, #255	; 0xff
    1336:	001a      	movs	r2, r3
    1338:	499b      	ldr	r1, [pc, #620]	; (15a8 <hif_isr+0x388>)
    133a:	4b9c      	ldr	r3, [pc, #624]	; (15ac <hif_isr+0x38c>)
    133c:	0018      	movs	r0, r3
    133e:	4b9c      	ldr	r3, [pc, #624]	; (15b0 <hif_isr+0x390>)
    1340:	4798      	blx	r3
    1342:	4ba0      	ldr	r3, [pc, #640]	; (15c4 <hif_isr+0x3a4>)
    1344:	0018      	movs	r0, r3
    1346:	4b9c      	ldr	r3, [pc, #624]	; (15b8 <hif_isr+0x398>)
    1348:	4798      	blx	r3
    134a:	200d      	movs	r0, #13
    134c:	4b9b      	ldr	r3, [pc, #620]	; (15bc <hif_isr+0x39c>)
    134e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1350:	2001      	movs	r0, #1
    1352:	4b91      	ldr	r3, [pc, #580]	; (1598 <hif_isr+0x378>)
    1354:	4798      	blx	r3
					goto ERR1;
    1356:	e1a3      	b.n	16a0 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    1358:	1d3b      	adds	r3, r7, #4
    135a:	885b      	ldrh	r3, [r3, #2]
    135c:	b29b      	uxth	r3, r3
    135e:	220c      	movs	r2, #12
    1360:	18ba      	adds	r2, r7, r2
    1362:	8812      	ldrh	r2, [r2, #0]
    1364:	429a      	cmp	r2, r3
    1366:	d02d      	beq.n	13c4 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    1368:	230c      	movs	r3, #12
    136a:	18fb      	adds	r3, r7, r3
    136c:	881b      	ldrh	r3, [r3, #0]
    136e:	1d3a      	adds	r2, r7, #4
    1370:	8852      	ldrh	r2, [r2, #2]
    1372:	b292      	uxth	r2, r2
    1374:	1a9b      	subs	r3, r3, r2
    1376:	2b04      	cmp	r3, #4
    1378:	dd24      	ble.n	13c4 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    137a:	23ed      	movs	r3, #237	; 0xed
    137c:	005a      	lsls	r2, r3, #1
    137e:	498a      	ldr	r1, [pc, #552]	; (15a8 <hif_isr+0x388>)
    1380:	4b8a      	ldr	r3, [pc, #552]	; (15ac <hif_isr+0x38c>)
    1382:	0018      	movs	r0, r3
    1384:	4b8a      	ldr	r3, [pc, #552]	; (15b0 <hif_isr+0x390>)
    1386:	4798      	blx	r3
    1388:	230c      	movs	r3, #12
    138a:	18fb      	adds	r3, r7, r3
    138c:	8819      	ldrh	r1, [r3, #0]
    138e:	1d3b      	adds	r3, r7, #4
    1390:	885b      	ldrh	r3, [r3, #2]
    1392:	b29b      	uxth	r3, r3
    1394:	001a      	movs	r2, r3
    1396:	1d3b      	adds	r3, r7, #4
    1398:	781b      	ldrb	r3, [r3, #0]
    139a:	b2db      	uxtb	r3, r3
    139c:	001c      	movs	r4, r3
    139e:	1d3b      	adds	r3, r7, #4
    13a0:	785b      	ldrb	r3, [r3, #1]
    13a2:	b2db      	uxtb	r3, r3
    13a4:	4888      	ldr	r0, [pc, #544]	; (15c8 <hif_isr+0x3a8>)
    13a6:	9300      	str	r3, [sp, #0]
    13a8:	0023      	movs	r3, r4
    13aa:	4c81      	ldr	r4, [pc, #516]	; (15b0 <hif_isr+0x390>)
    13ac:	47a0      	blx	r4
    13ae:	200d      	movs	r0, #13
    13b0:	4b82      	ldr	r3, [pc, #520]	; (15bc <hif_isr+0x39c>)
    13b2:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    13b4:	2001      	movs	r0, #1
    13b6:	4b78      	ldr	r3, [pc, #480]	; (1598 <hif_isr+0x378>)
    13b8:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    13ba:	230f      	movs	r3, #15
    13bc:	18fb      	adds	r3, r7, r3
    13be:	22fa      	movs	r2, #250	; 0xfa
    13c0:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    13c2:	e16d      	b.n	16a0 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    13c4:	1d3b      	adds	r3, r7, #4
    13c6:	781b      	ldrb	r3, [r3, #0]
    13c8:	b2db      	uxtb	r3, r3
    13ca:	2b01      	cmp	r3, #1
    13cc:	d120      	bne.n	1410 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    13ce:	4b74      	ldr	r3, [pc, #464]	; (15a0 <hif_isr+0x380>)
    13d0:	68db      	ldr	r3, [r3, #12]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d00d      	beq.n	13f2 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    13d6:	4b72      	ldr	r3, [pc, #456]	; (15a0 <hif_isr+0x380>)
    13d8:	68db      	ldr	r3, [r3, #12]
    13da:	1d3a      	adds	r2, r7, #4
    13dc:	7852      	ldrb	r2, [r2, #1]
    13de:	b2d0      	uxtb	r0, r2
    13e0:	1d3a      	adds	r2, r7, #4
    13e2:	8852      	ldrh	r2, [r2, #2]
    13e4:	b292      	uxth	r2, r2
    13e6:	3a08      	subs	r2, #8
    13e8:	b291      	uxth	r1, r2
    13ea:	683a      	ldr	r2, [r7, #0]
    13ec:	3208      	adds	r2, #8
    13ee:	4798      	blx	r3
    13f0:	e0fe      	b.n	15f0 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    13f2:	23f3      	movs	r3, #243	; 0xf3
    13f4:	005a      	lsls	r2, r3, #1
    13f6:	496c      	ldr	r1, [pc, #432]	; (15a8 <hif_isr+0x388>)
    13f8:	4b6c      	ldr	r3, [pc, #432]	; (15ac <hif_isr+0x38c>)
    13fa:	0018      	movs	r0, r3
    13fc:	4b6c      	ldr	r3, [pc, #432]	; (15b0 <hif_isr+0x390>)
    13fe:	4798      	blx	r3
    1400:	4b72      	ldr	r3, [pc, #456]	; (15cc <hif_isr+0x3ac>)
    1402:	0018      	movs	r0, r3
    1404:	4b6c      	ldr	r3, [pc, #432]	; (15b8 <hif_isr+0x398>)
    1406:	4798      	blx	r3
    1408:	200d      	movs	r0, #13
    140a:	4b6c      	ldr	r3, [pc, #432]	; (15bc <hif_isr+0x39c>)
    140c:	4798      	blx	r3
    140e:	e0ef      	b.n	15f0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1410:	1d3b      	adds	r3, r7, #4
    1412:	781b      	ldrb	r3, [r3, #0]
    1414:	b2db      	uxtb	r3, r3
    1416:	2b02      	cmp	r3, #2
    1418:	d120      	bne.n	145c <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    141a:	4b61      	ldr	r3, [pc, #388]	; (15a0 <hif_isr+0x380>)
    141c:	691b      	ldr	r3, [r3, #16]
    141e:	2b00      	cmp	r3, #0
    1420:	d00d      	beq.n	143e <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1422:	4b5f      	ldr	r3, [pc, #380]	; (15a0 <hif_isr+0x380>)
    1424:	691b      	ldr	r3, [r3, #16]
    1426:	1d3a      	adds	r2, r7, #4
    1428:	7852      	ldrb	r2, [r2, #1]
    142a:	b2d0      	uxtb	r0, r2
    142c:	1d3a      	adds	r2, r7, #4
    142e:	8852      	ldrh	r2, [r2, #2]
    1430:	b292      	uxth	r2, r2
    1432:	3a08      	subs	r2, #8
    1434:	b291      	uxth	r1, r2
    1436:	683a      	ldr	r2, [r7, #0]
    1438:	3208      	adds	r2, #8
    143a:	4798      	blx	r3
    143c:	e0d8      	b.n	15f0 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    143e:	23f7      	movs	r3, #247	; 0xf7
    1440:	005a      	lsls	r2, r3, #1
    1442:	4959      	ldr	r1, [pc, #356]	; (15a8 <hif_isr+0x388>)
    1444:	4b59      	ldr	r3, [pc, #356]	; (15ac <hif_isr+0x38c>)
    1446:	0018      	movs	r0, r3
    1448:	4b59      	ldr	r3, [pc, #356]	; (15b0 <hif_isr+0x390>)
    144a:	4798      	blx	r3
    144c:	4b60      	ldr	r3, [pc, #384]	; (15d0 <hif_isr+0x3b0>)
    144e:	0018      	movs	r0, r3
    1450:	4b59      	ldr	r3, [pc, #356]	; (15b8 <hif_isr+0x398>)
    1452:	4798      	blx	r3
    1454:	200d      	movs	r0, #13
    1456:	4b59      	ldr	r3, [pc, #356]	; (15bc <hif_isr+0x39c>)
    1458:	4798      	blx	r3
    145a:	e0c9      	b.n	15f0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    145c:	1d3b      	adds	r3, r7, #4
    145e:	781b      	ldrb	r3, [r3, #0]
    1460:	b2db      	uxtb	r3, r3
    1462:	2b04      	cmp	r3, #4
    1464:	d120      	bne.n	14a8 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    1466:	4b4e      	ldr	r3, [pc, #312]	; (15a0 <hif_isr+0x380>)
    1468:	695b      	ldr	r3, [r3, #20]
    146a:	2b00      	cmp	r3, #0
    146c:	d00d      	beq.n	148a <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    146e:	4b4c      	ldr	r3, [pc, #304]	; (15a0 <hif_isr+0x380>)
    1470:	695b      	ldr	r3, [r3, #20]
    1472:	1d3a      	adds	r2, r7, #4
    1474:	7852      	ldrb	r2, [r2, #1]
    1476:	b2d0      	uxtb	r0, r2
    1478:	1d3a      	adds	r2, r7, #4
    147a:	8852      	ldrh	r2, [r2, #2]
    147c:	b292      	uxth	r2, r2
    147e:	3a08      	subs	r2, #8
    1480:	b291      	uxth	r1, r2
    1482:	683a      	ldr	r2, [r7, #0]
    1484:	3208      	adds	r2, #8
    1486:	4798      	blx	r3
    1488:	e0b2      	b.n	15f0 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    148a:	23fb      	movs	r3, #251	; 0xfb
    148c:	005a      	lsls	r2, r3, #1
    148e:	4946      	ldr	r1, [pc, #280]	; (15a8 <hif_isr+0x388>)
    1490:	4b46      	ldr	r3, [pc, #280]	; (15ac <hif_isr+0x38c>)
    1492:	0018      	movs	r0, r3
    1494:	4b46      	ldr	r3, [pc, #280]	; (15b0 <hif_isr+0x390>)
    1496:	4798      	blx	r3
    1498:	4b4e      	ldr	r3, [pc, #312]	; (15d4 <hif_isr+0x3b4>)
    149a:	0018      	movs	r0, r3
    149c:	4b46      	ldr	r3, [pc, #280]	; (15b8 <hif_isr+0x398>)
    149e:	4798      	blx	r3
    14a0:	200d      	movs	r0, #13
    14a2:	4b46      	ldr	r3, [pc, #280]	; (15bc <hif_isr+0x39c>)
    14a4:	4798      	blx	r3
    14a6:	e0a3      	b.n	15f0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    14a8:	1d3b      	adds	r3, r7, #4
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	b2db      	uxtb	r3, r3
    14ae:	2b06      	cmp	r3, #6
    14b0:	d11f      	bne.n	14f2 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    14b2:	4b3b      	ldr	r3, [pc, #236]	; (15a0 <hif_isr+0x380>)
    14b4:	6a1b      	ldr	r3, [r3, #32]
    14b6:	2b00      	cmp	r3, #0
    14b8:	d00d      	beq.n	14d6 <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    14ba:	4b39      	ldr	r3, [pc, #228]	; (15a0 <hif_isr+0x380>)
    14bc:	6a1b      	ldr	r3, [r3, #32]
    14be:	1d3a      	adds	r2, r7, #4
    14c0:	7852      	ldrb	r2, [r2, #1]
    14c2:	b2d0      	uxtb	r0, r2
    14c4:	1d3a      	adds	r2, r7, #4
    14c6:	8852      	ldrh	r2, [r2, #2]
    14c8:	b292      	uxth	r2, r2
    14ca:	3a08      	subs	r2, #8
    14cc:	b291      	uxth	r1, r2
    14ce:	683a      	ldr	r2, [r7, #0]
    14d0:	3208      	adds	r2, #8
    14d2:	4798      	blx	r3
    14d4:	e08c      	b.n	15f0 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    14d6:	4a40      	ldr	r2, [pc, #256]	; (15d8 <hif_isr+0x3b8>)
    14d8:	4933      	ldr	r1, [pc, #204]	; (15a8 <hif_isr+0x388>)
    14da:	4b34      	ldr	r3, [pc, #208]	; (15ac <hif_isr+0x38c>)
    14dc:	0018      	movs	r0, r3
    14de:	4b34      	ldr	r3, [pc, #208]	; (15b0 <hif_isr+0x390>)
    14e0:	4798      	blx	r3
    14e2:	4b3e      	ldr	r3, [pc, #248]	; (15dc <hif_isr+0x3bc>)
    14e4:	0018      	movs	r0, r3
    14e6:	4b34      	ldr	r3, [pc, #208]	; (15b8 <hif_isr+0x398>)
    14e8:	4798      	blx	r3
    14ea:	200d      	movs	r0, #13
    14ec:	4b33      	ldr	r3, [pc, #204]	; (15bc <hif_isr+0x39c>)
    14ee:	4798      	blx	r3
    14f0:	e07e      	b.n	15f0 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    14f2:	1d3b      	adds	r3, r7, #4
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	b2db      	uxtb	r3, r3
    14f8:	2b07      	cmp	r3, #7
    14fa:	d11f      	bne.n	153c <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    14fc:	4b28      	ldr	r3, [pc, #160]	; (15a0 <hif_isr+0x380>)
    14fe:	699b      	ldr	r3, [r3, #24]
    1500:	2b00      	cmp	r3, #0
    1502:	d00d      	beq.n	1520 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1504:	4b26      	ldr	r3, [pc, #152]	; (15a0 <hif_isr+0x380>)
    1506:	699b      	ldr	r3, [r3, #24]
    1508:	1d3a      	adds	r2, r7, #4
    150a:	7852      	ldrb	r2, [r2, #1]
    150c:	b2d0      	uxtb	r0, r2
    150e:	1d3a      	adds	r2, r7, #4
    1510:	8852      	ldrh	r2, [r2, #2]
    1512:	b292      	uxth	r2, r2
    1514:	3a08      	subs	r2, #8
    1516:	b291      	uxth	r1, r2
    1518:	683a      	ldr	r2, [r7, #0]
    151a:	3208      	adds	r2, #8
    151c:	4798      	blx	r3
    151e:	e067      	b.n	15f0 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    1520:	4a2f      	ldr	r2, [pc, #188]	; (15e0 <hif_isr+0x3c0>)
    1522:	4921      	ldr	r1, [pc, #132]	; (15a8 <hif_isr+0x388>)
    1524:	4b21      	ldr	r3, [pc, #132]	; (15ac <hif_isr+0x38c>)
    1526:	0018      	movs	r0, r3
    1528:	4b21      	ldr	r3, [pc, #132]	; (15b0 <hif_isr+0x390>)
    152a:	4798      	blx	r3
    152c:	4b2d      	ldr	r3, [pc, #180]	; (15e4 <hif_isr+0x3c4>)
    152e:	0018      	movs	r0, r3
    1530:	4b21      	ldr	r3, [pc, #132]	; (15b8 <hif_isr+0x398>)
    1532:	4798      	blx	r3
    1534:	200d      	movs	r0, #13
    1536:	4b21      	ldr	r3, [pc, #132]	; (15bc <hif_isr+0x39c>)
    1538:	4798      	blx	r3
    153a:	e059      	b.n	15f0 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    153c:	1d3b      	adds	r3, r7, #4
    153e:	781b      	ldrb	r3, [r3, #0]
    1540:	b2db      	uxtb	r3, r3
    1542:	2b05      	cmp	r3, #5
    1544:	d111      	bne.n	156a <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    1546:	4b16      	ldr	r3, [pc, #88]	; (15a0 <hif_isr+0x380>)
    1548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    154a:	2b00      	cmp	r3, #0
    154c:	d050      	beq.n	15f0 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    154e:	4b14      	ldr	r3, [pc, #80]	; (15a0 <hif_isr+0x380>)
    1550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1552:	1d3a      	adds	r2, r7, #4
    1554:	7852      	ldrb	r2, [r2, #1]
    1556:	b2d0      	uxtb	r0, r2
    1558:	1d3a      	adds	r2, r7, #4
    155a:	8852      	ldrh	r2, [r2, #2]
    155c:	b292      	uxth	r2, r2
    155e:	3a08      	subs	r2, #8
    1560:	b291      	uxth	r1, r2
    1562:	683a      	ldr	r2, [r7, #0]
    1564:	3208      	adds	r2, #8
    1566:	4798      	blx	r3
    1568:	e042      	b.n	15f0 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    156a:	4a1f      	ldr	r2, [pc, #124]	; (15e8 <hif_isr+0x3c8>)
    156c:	490e      	ldr	r1, [pc, #56]	; (15a8 <hif_isr+0x388>)
    156e:	4b0f      	ldr	r3, [pc, #60]	; (15ac <hif_isr+0x38c>)
    1570:	0018      	movs	r0, r3
    1572:	4b0f      	ldr	r3, [pc, #60]	; (15b0 <hif_isr+0x390>)
    1574:	4798      	blx	r3
    1576:	4b1d      	ldr	r3, [pc, #116]	; (15ec <hif_isr+0x3cc>)
    1578:	0018      	movs	r0, r3
    157a:	4b0f      	ldr	r3, [pc, #60]	; (15b8 <hif_isr+0x398>)
    157c:	4798      	blx	r3
    157e:	200d      	movs	r0, #13
    1580:	4b0e      	ldr	r3, [pc, #56]	; (15bc <hif_isr+0x39c>)
    1582:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1584:	230f      	movs	r3, #15
    1586:	18fb      	adds	r3, r7, r3
    1588:	22fa      	movs	r2, #250	; 0xfa
    158a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    158c:	e088      	b.n	16a0 <hif_isr+0x480>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	00001070 	.word	0x00001070
    1594:	00002c5d 	.word	0x00002c5d
    1598:	000003d1 	.word	0x000003d1
    159c:	00002c81 	.word	0x00002c81
    15a0:	2000030c 	.word	0x2000030c
    15a4:	00001084 	.word	0x00001084
    15a8:	00013c10 	.word	0x00013c10
    15ac:	0001390c 	.word	0x0001390c
    15b0:	0000efc9 	.word	0x0000efc9
    15b4:	0001393c 	.word	0x0001393c
    15b8:	0000f0e5 	.word	0x0000f0e5
    15bc:	0000effd 	.word	0x0000effd
    15c0:	00002cd1 	.word	0x00002cd1
    15c4:	00013960 	.word	0x00013960
    15c8:	00013978 	.word	0x00013978
    15cc:	000139b8 	.word	0x000139b8
    15d0:	000139d8 	.word	0x000139d8
    15d4:	000139fc 	.word	0x000139fc
    15d8:	000001ff 	.word	0x000001ff
    15dc:	00013a1c 	.word	0x00013a1c
    15e0:	00000206 	.word	0x00000206
    15e4:	00013a40 	.word	0x00013a40
    15e8:	0000020f 	.word	0x0000020f
    15ec:	00013a64 	.word	0x00013a64
				}
				if(gstrHifCxt.u8HifRXDone)
    15f0:	4b2f      	ldr	r3, [pc, #188]	; (16b0 <hif_isr+0x490>)
    15f2:	789b      	ldrb	r3, [r3, #2]
    15f4:	b2db      	uxtb	r3, r3
    15f6:	2b00      	cmp	r3, #0
    15f8:	d052      	beq.n	16a0 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    15fa:	4a2e      	ldr	r2, [pc, #184]	; (16b4 <hif_isr+0x494>)
    15fc:	492e      	ldr	r1, [pc, #184]	; (16b8 <hif_isr+0x498>)
    15fe:	4b2f      	ldr	r3, [pc, #188]	; (16bc <hif_isr+0x49c>)
    1600:	0018      	movs	r0, r3
    1602:	4b2f      	ldr	r3, [pc, #188]	; (16c0 <hif_isr+0x4a0>)
    1604:	4798      	blx	r3
    1606:	1d3b      	adds	r3, r7, #4
    1608:	781b      	ldrb	r3, [r3, #0]
    160a:	b2db      	uxtb	r3, r3
    160c:	0019      	movs	r1, r3
    160e:	1d3b      	adds	r3, r7, #4
    1610:	785b      	ldrb	r3, [r3, #1]
    1612:	b2db      	uxtb	r3, r3
    1614:	001a      	movs	r2, r3
    1616:	4b2b      	ldr	r3, [pc, #172]	; (16c4 <hif_isr+0x4a4>)
    1618:	0018      	movs	r0, r3
    161a:	4b29      	ldr	r3, [pc, #164]	; (16c0 <hif_isr+0x4a0>)
    161c:	4798      	blx	r3
    161e:	200d      	movs	r0, #13
    1620:	4b29      	ldr	r3, [pc, #164]	; (16c8 <hif_isr+0x4a8>)
    1622:	4798      	blx	r3
					ret = hif_set_rx_done();
    1624:	230f      	movs	r3, #15
    1626:	18fc      	adds	r4, r7, r3
    1628:	4b28      	ldr	r3, [pc, #160]	; (16cc <hif_isr+0x4ac>)
    162a:	4798      	blx	r3
    162c:	0003      	movs	r3, r0
    162e:	7023      	strb	r3, [r4, #0]
    1630:	e036      	b.n	16a0 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    1632:	2387      	movs	r3, #135	; 0x87
    1634:	009a      	lsls	r2, r3, #2
    1636:	4920      	ldr	r1, [pc, #128]	; (16b8 <hif_isr+0x498>)
    1638:	4b20      	ldr	r3, [pc, #128]	; (16bc <hif_isr+0x49c>)
    163a:	0018      	movs	r0, r3
    163c:	4b20      	ldr	r3, [pc, #128]	; (16c0 <hif_isr+0x4a0>)
    163e:	4798      	blx	r3
    1640:	4b23      	ldr	r3, [pc, #140]	; (16d0 <hif_isr+0x4b0>)
    1642:	0018      	movs	r0, r3
    1644:	4b23      	ldr	r3, [pc, #140]	; (16d4 <hif_isr+0x4b4>)
    1646:	4798      	blx	r3
    1648:	200d      	movs	r0, #13
    164a:	4b1f      	ldr	r3, [pc, #124]	; (16c8 <hif_isr+0x4a8>)
    164c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    164e:	230f      	movs	r3, #15
    1650:	18fb      	adds	r3, r7, r3
    1652:	22fe      	movs	r2, #254	; 0xfe
    1654:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    1656:	e023      	b.n	16a0 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    1658:	2389      	movs	r3, #137	; 0x89
    165a:	009a      	lsls	r2, r3, #2
    165c:	4916      	ldr	r1, [pc, #88]	; (16b8 <hif_isr+0x498>)
    165e:	4b17      	ldr	r3, [pc, #92]	; (16bc <hif_isr+0x49c>)
    1660:	0018      	movs	r0, r3
    1662:	4b17      	ldr	r3, [pc, #92]	; (16c0 <hif_isr+0x4a0>)
    1664:	4798      	blx	r3
    1666:	68ba      	ldr	r2, [r7, #8]
    1668:	4b1b      	ldr	r3, [pc, #108]	; (16d8 <hif_isr+0x4b8>)
    166a:	0011      	movs	r1, r2
    166c:	0018      	movs	r0, r3
    166e:	4b14      	ldr	r3, [pc, #80]	; (16c0 <hif_isr+0x4a0>)
    1670:	4798      	blx	r3
    1672:	200d      	movs	r0, #13
    1674:	4b14      	ldr	r3, [pc, #80]	; (16c8 <hif_isr+0x4a8>)
    1676:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1678:	230f      	movs	r3, #15
    167a:	18fb      	adds	r3, r7, r3
    167c:	22f4      	movs	r2, #244	; 0xf4
    167e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1680:	e00e      	b.n	16a0 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1682:	4a16      	ldr	r2, [pc, #88]	; (16dc <hif_isr+0x4bc>)
    1684:	490c      	ldr	r1, [pc, #48]	; (16b8 <hif_isr+0x498>)
    1686:	4b0d      	ldr	r3, [pc, #52]	; (16bc <hif_isr+0x49c>)
    1688:	0018      	movs	r0, r3
    168a:	4b0d      	ldr	r3, [pc, #52]	; (16c0 <hif_isr+0x4a0>)
    168c:	4798      	blx	r3
    168e:	4b14      	ldr	r3, [pc, #80]	; (16e0 <hif_isr+0x4c0>)
    1690:	0018      	movs	r0, r3
    1692:	4b10      	ldr	r3, [pc, #64]	; (16d4 <hif_isr+0x4b4>)
    1694:	4798      	blx	r3
    1696:	200d      	movs	r0, #13
    1698:	4b0b      	ldr	r3, [pc, #44]	; (16c8 <hif_isr+0x4a8>)
    169a:	4798      	blx	r3
		goto ERR1;
    169c:	e000      	b.n	16a0 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    169e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    16a0:	230f      	movs	r3, #15
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	b25b      	sxtb	r3, r3
}
    16a8:	0018      	movs	r0, r3
    16aa:	46bd      	mov	sp, r7
    16ac:	b005      	add	sp, #20
    16ae:	bd90      	pop	{r4, r7, pc}
    16b0:	2000030c 	.word	0x2000030c
    16b4:	00000215 	.word	0x00000215
    16b8:	00013c10 	.word	0x00013c10
    16bc:	0001390c 	.word	0x0001390c
    16c0:	0000efc9 	.word	0x0000efc9
    16c4:	00013a7c 	.word	0x00013a7c
    16c8:	0000effd 	.word	0x0000effd
    16cc:	00000cb9 	.word	0x00000cb9
    16d0:	00013aa8 	.word	0x00013aa8
    16d4:	0000f0e5 	.word	0x0000f0e5
    16d8:	00013abc 	.word	0x00013abc
    16dc:	0000022d 	.word	0x0000022d
    16e0:	00013ad8 	.word	0x00013ad8

000016e4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    16e4:	b590      	push	{r4, r7, lr}
    16e6:	b083      	sub	sp, #12
    16e8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    16ea:	1dfb      	adds	r3, r7, #7
    16ec:	2200      	movs	r2, #0
    16ee:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    16f0:	e023      	b.n	173a <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    16f2:	4b18      	ldr	r3, [pc, #96]	; (1754 <hif_handle_isr+0x70>)
    16f4:	78db      	ldrb	r3, [r3, #3]
    16f6:	b2db      	uxtb	r3, r3
    16f8:	3b01      	subs	r3, #1
    16fa:	b2da      	uxtb	r2, r3
    16fc:	4b15      	ldr	r3, [pc, #84]	; (1754 <hif_handle_isr+0x70>)
    16fe:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    1700:	1dfc      	adds	r4, r7, #7
    1702:	4b15      	ldr	r3, [pc, #84]	; (1758 <hif_handle_isr+0x74>)
    1704:	4798      	blx	r3
    1706:	0003      	movs	r3, r0
    1708:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    170a:	1dfb      	adds	r3, r7, #7
    170c:	781b      	ldrb	r3, [r3, #0]
    170e:	b25b      	sxtb	r3, r3
    1710:	2b00      	cmp	r3, #0
    1712:	d100      	bne.n	1716 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    1714:	e011      	b.n	173a <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1716:	4a11      	ldr	r2, [pc, #68]	; (175c <hif_handle_isr+0x78>)
    1718:	4911      	ldr	r1, [pc, #68]	; (1760 <hif_handle_isr+0x7c>)
    171a:	4b12      	ldr	r3, [pc, #72]	; (1764 <hif_handle_isr+0x80>)
    171c:	0018      	movs	r0, r3
    171e:	4b12      	ldr	r3, [pc, #72]	; (1768 <hif_handle_isr+0x84>)
    1720:	4798      	blx	r3
    1722:	1dfb      	adds	r3, r7, #7
    1724:	2200      	movs	r2, #0
    1726:	569a      	ldrsb	r2, [r3, r2]
    1728:	4b10      	ldr	r3, [pc, #64]	; (176c <hif_handle_isr+0x88>)
    172a:	0011      	movs	r1, r2
    172c:	0018      	movs	r0, r3
    172e:	4b0e      	ldr	r3, [pc, #56]	; (1768 <hif_handle_isr+0x84>)
    1730:	4798      	blx	r3
    1732:	200d      	movs	r0, #13
    1734:	4b0e      	ldr	r3, [pc, #56]	; (1770 <hif_handle_isr+0x8c>)
    1736:	4798      	blx	r3
			ret = hif_isr();
    1738:	e7e2      	b.n	1700 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    173a:	4b06      	ldr	r3, [pc, #24]	; (1754 <hif_handle_isr+0x70>)
    173c:	78db      	ldrb	r3, [r3, #3]
    173e:	b2db      	uxtb	r3, r3
    1740:	2b00      	cmp	r3, #0
    1742:	d1d6      	bne.n	16f2 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    1744:	1dfb      	adds	r3, r7, #7
    1746:	781b      	ldrb	r3, [r3, #0]
    1748:	b25b      	sxtb	r3, r3
}
    174a:	0018      	movs	r0, r3
    174c:	46bd      	mov	sp, r7
    174e:	b003      	add	sp, #12
    1750:	bd90      	pop	{r4, r7, pc}
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	2000030c 	.word	0x2000030c
    1758:	00001221 	.word	0x00001221
    175c:	0000024a 	.word	0x0000024a
    1760:	00013c18 	.word	0x00013c18
    1764:	0001390c 	.word	0x0001390c
    1768:	0000efc9 	.word	0x0000efc9
    176c:	00013afc 	.word	0x00013afc
    1770:	0000effd 	.word	0x0000effd

00001774 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1774:	b590      	push	{r4, r7, lr}
    1776:	b087      	sub	sp, #28
    1778:	af00      	add	r7, sp, #0
    177a:	60f8      	str	r0, [r7, #12]
    177c:	60b9      	str	r1, [r7, #8]
    177e:	0019      	movs	r1, r3
    1780:	1dbb      	adds	r3, r7, #6
    1782:	801a      	strh	r2, [r3, #0]
    1784:	1d7b      	adds	r3, r7, #5
    1786:	1c0a      	adds	r2, r1, #0
    1788:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    178a:	2317      	movs	r3, #23
    178c:	18fb      	adds	r3, r7, r3
    178e:	2200      	movs	r2, #0
    1790:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1792:	68fb      	ldr	r3, [r7, #12]
    1794:	2b00      	cmp	r3, #0
    1796:	d006      	beq.n	17a6 <hif_receive+0x32>
    1798:	68bb      	ldr	r3, [r7, #8]
    179a:	2b00      	cmp	r3, #0
    179c:	d003      	beq.n	17a6 <hif_receive+0x32>
    179e:	1dbb      	adds	r3, r7, #6
    17a0:	881b      	ldrh	r3, [r3, #0]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d11c      	bne.n	17e0 <hif_receive+0x6c>
	{
		if(isDone)
    17a6:	1d7b      	adds	r3, r7, #5
    17a8:	781b      	ldrb	r3, [r3, #0]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d006      	beq.n	17bc <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    17ae:	2317      	movs	r3, #23
    17b0:	18fc      	adds	r4, r7, r3
    17b2:	4b42      	ldr	r3, [pc, #264]	; (18bc <hif_receive+0x148>)
    17b4:	4798      	blx	r3
    17b6:	0003      	movs	r3, r0
    17b8:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    17ba:	e077      	b.n	18ac <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    17bc:	2317      	movs	r3, #23
    17be:	18fb      	adds	r3, r7, r3
    17c0:	22f4      	movs	r2, #244	; 0xf4
    17c2:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    17c4:	4a3e      	ldr	r2, [pc, #248]	; (18c0 <hif_receive+0x14c>)
    17c6:	493f      	ldr	r1, [pc, #252]	; (18c4 <hif_receive+0x150>)
    17c8:	4b3f      	ldr	r3, [pc, #252]	; (18c8 <hif_receive+0x154>)
    17ca:	0018      	movs	r0, r3
    17cc:	4b3f      	ldr	r3, [pc, #252]	; (18cc <hif_receive+0x158>)
    17ce:	4798      	blx	r3
    17d0:	4b3f      	ldr	r3, [pc, #252]	; (18d0 <hif_receive+0x15c>)
    17d2:	0018      	movs	r0, r3
    17d4:	4b3f      	ldr	r3, [pc, #252]	; (18d4 <hif_receive+0x160>)
    17d6:	4798      	blx	r3
    17d8:	200d      	movs	r0, #13
    17da:	4b3f      	ldr	r3, [pc, #252]	; (18d8 <hif_receive+0x164>)
    17dc:	4798      	blx	r3
		goto ERR1;
    17de:	e065      	b.n	18ac <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    17e0:	1dbb      	adds	r3, r7, #6
    17e2:	881a      	ldrh	r2, [r3, #0]
    17e4:	4b3d      	ldr	r3, [pc, #244]	; (18dc <hif_receive+0x168>)
    17e6:	689b      	ldr	r3, [r3, #8]
    17e8:	429a      	cmp	r2, r3
    17ea:	d915      	bls.n	1818 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    17ec:	2317      	movs	r3, #23
    17ee:	18fb      	adds	r3, r7, r3
    17f0:	22f4      	movs	r2, #244	; 0xf4
    17f2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    17f4:	4a3a      	ldr	r2, [pc, #232]	; (18e0 <hif_receive+0x16c>)
    17f6:	4933      	ldr	r1, [pc, #204]	; (18c4 <hif_receive+0x150>)
    17f8:	4b33      	ldr	r3, [pc, #204]	; (18c8 <hif_receive+0x154>)
    17fa:	0018      	movs	r0, r3
    17fc:	4b33      	ldr	r3, [pc, #204]	; (18cc <hif_receive+0x158>)
    17fe:	4798      	blx	r3
    1800:	1dbb      	adds	r3, r7, #6
    1802:	8819      	ldrh	r1, [r3, #0]
    1804:	4b35      	ldr	r3, [pc, #212]	; (18dc <hif_receive+0x168>)
    1806:	689a      	ldr	r2, [r3, #8]
    1808:	4b36      	ldr	r3, [pc, #216]	; (18e4 <hif_receive+0x170>)
    180a:	0018      	movs	r0, r3
    180c:	4b2f      	ldr	r3, [pc, #188]	; (18cc <hif_receive+0x158>)
    180e:	4798      	blx	r3
    1810:	200d      	movs	r0, #13
    1812:	4b31      	ldr	r3, [pc, #196]	; (18d8 <hif_receive+0x164>)
    1814:	4798      	blx	r3
		goto ERR1;
    1816:	e049      	b.n	18ac <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1818:	4b30      	ldr	r3, [pc, #192]	; (18dc <hif_receive+0x168>)
    181a:	685a      	ldr	r2, [r3, #4]
    181c:	68fb      	ldr	r3, [r7, #12]
    181e:	429a      	cmp	r2, r3
    1820:	d80a      	bhi.n	1838 <hif_receive+0xc4>
    1822:	1dbb      	adds	r3, r7, #6
    1824:	881a      	ldrh	r2, [r3, #0]
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	18d2      	adds	r2, r2, r3
    182a:	4b2c      	ldr	r3, [pc, #176]	; (18dc <hif_receive+0x168>)
    182c:	6859      	ldr	r1, [r3, #4]
    182e:	4b2b      	ldr	r3, [pc, #172]	; (18dc <hif_receive+0x168>)
    1830:	689b      	ldr	r3, [r3, #8]
    1832:	18cb      	adds	r3, r1, r3
    1834:	429a      	cmp	r2, r3
    1836:	d911      	bls.n	185c <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    1838:	2317      	movs	r3, #23
    183a:	18fb      	adds	r3, r7, r3
    183c:	22f4      	movs	r2, #244	; 0xf4
    183e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1840:	4a29      	ldr	r2, [pc, #164]	; (18e8 <hif_receive+0x174>)
    1842:	4920      	ldr	r1, [pc, #128]	; (18c4 <hif_receive+0x150>)
    1844:	4b20      	ldr	r3, [pc, #128]	; (18c8 <hif_receive+0x154>)
    1846:	0018      	movs	r0, r3
    1848:	4b20      	ldr	r3, [pc, #128]	; (18cc <hif_receive+0x158>)
    184a:	4798      	blx	r3
    184c:	4b27      	ldr	r3, [pc, #156]	; (18ec <hif_receive+0x178>)
    184e:	0018      	movs	r0, r3
    1850:	4b20      	ldr	r3, [pc, #128]	; (18d4 <hif_receive+0x160>)
    1852:	4798      	blx	r3
    1854:	200d      	movs	r0, #13
    1856:	4b20      	ldr	r3, [pc, #128]	; (18d8 <hif_receive+0x164>)
    1858:	4798      	blx	r3
		goto ERR1;
    185a:	e027      	b.n	18ac <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    185c:	1dbb      	adds	r3, r7, #6
    185e:	881a      	ldrh	r2, [r3, #0]
    1860:	2317      	movs	r3, #23
    1862:	18fc      	adds	r4, r7, r3
    1864:	68b9      	ldr	r1, [r7, #8]
    1866:	68fb      	ldr	r3, [r7, #12]
    1868:	0018      	movs	r0, r3
    186a:	4b21      	ldr	r3, [pc, #132]	; (18f0 <hif_receive+0x17c>)
    186c:	4798      	blx	r3
    186e:	0003      	movs	r3, r0
    1870:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1872:	2317      	movs	r3, #23
    1874:	18fb      	adds	r3, r7, r3
    1876:	781b      	ldrb	r3, [r3, #0]
    1878:	b25b      	sxtb	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	d115      	bne.n	18aa <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    187e:	4b17      	ldr	r3, [pc, #92]	; (18dc <hif_receive+0x168>)
    1880:	685a      	ldr	r2, [r3, #4]
    1882:	4b16      	ldr	r3, [pc, #88]	; (18dc <hif_receive+0x168>)
    1884:	689b      	ldr	r3, [r3, #8]
    1886:	18d2      	adds	r2, r2, r3
    1888:	1dbb      	adds	r3, r7, #6
    188a:	8819      	ldrh	r1, [r3, #0]
    188c:	68fb      	ldr	r3, [r7, #12]
    188e:	18cb      	adds	r3, r1, r3
    1890:	429a      	cmp	r2, r3
    1892:	d003      	beq.n	189c <hif_receive+0x128>
    1894:	1d7b      	adds	r3, r7, #5
    1896:	781b      	ldrb	r3, [r3, #0]
    1898:	2b00      	cmp	r3, #0
    189a:	d007      	beq.n	18ac <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    189c:	2317      	movs	r3, #23
    189e:	18fc      	adds	r4, r7, r3
    18a0:	4b06      	ldr	r3, [pc, #24]	; (18bc <hif_receive+0x148>)
    18a2:	4798      	blx	r3
    18a4:	0003      	movs	r3, r0
    18a6:	7023      	strb	r3, [r4, #0]
    18a8:	e000      	b.n	18ac <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    18aa:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    18ac:	2317      	movs	r3, #23
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	781b      	ldrb	r3, [r3, #0]
    18b2:	b25b      	sxtb	r3, r3
}
    18b4:	0018      	movs	r0, r3
    18b6:	46bd      	mov	sp, r7
    18b8:	b007      	add	sp, #28
    18ba:	bd90      	pop	{r4, r7, pc}
    18bc:	00000cb9 	.word	0x00000cb9
    18c0:	0000026b 	.word	0x0000026b
    18c4:	00013c28 	.word	0x00013c28
    18c8:	0001390c 	.word	0x0001390c
    18cc:	0000efc9 	.word	0x0000efc9
    18d0:	00013b2c 	.word	0x00013b2c
    18d4:	0000f0e5 	.word	0x0000f0e5
    18d8:	0000effd 	.word	0x0000effd
    18dc:	2000030c 	.word	0x2000030c
    18e0:	00000273 	.word	0x00000273
    18e4:	00013b4c 	.word	0x00013b4c
    18e8:	00000279 	.word	0x00000279
    18ec:	00013b94 	.word	0x00013b94
    18f0:	00002cd1 	.word	0x00002cd1

000018f4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    18f4:	b580      	push	{r7, lr}
    18f6:	b084      	sub	sp, #16
    18f8:	af00      	add	r7, sp, #0
    18fa:	0002      	movs	r2, r0
    18fc:	6039      	str	r1, [r7, #0]
    18fe:	1dfb      	adds	r3, r7, #7
    1900:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    1902:	230f      	movs	r3, #15
    1904:	18fb      	adds	r3, r7, r3
    1906:	2200      	movs	r2, #0
    1908:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    190a:	1dfb      	adds	r3, r7, #7
    190c:	781b      	ldrb	r3, [r3, #0]
    190e:	2b07      	cmp	r3, #7
    1910:	d820      	bhi.n	1954 <hif_register_cb+0x60>
    1912:	009a      	lsls	r2, r3, #2
    1914:	4b1e      	ldr	r3, [pc, #120]	; (1990 <hif_register_cb+0x9c>)
    1916:	18d3      	adds	r3, r2, r3
    1918:	681b      	ldr	r3, [r3, #0]
    191a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    191c:	4b1d      	ldr	r3, [pc, #116]	; (1994 <hif_register_cb+0xa0>)
    191e:	683a      	ldr	r2, [r7, #0]
    1920:	611a      	str	r2, [r3, #16]
			break;
    1922:	e02c      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    1924:	4b1b      	ldr	r3, [pc, #108]	; (1994 <hif_register_cb+0xa0>)
    1926:	683a      	ldr	r2, [r7, #0]
    1928:	60da      	str	r2, [r3, #12]
			break;
    192a:	e028      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    192c:	4b19      	ldr	r3, [pc, #100]	; (1994 <hif_register_cb+0xa0>)
    192e:	683a      	ldr	r2, [r7, #0]
    1930:	615a      	str	r2, [r3, #20]
			break;
    1932:	e024      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    1934:	4b17      	ldr	r3, [pc, #92]	; (1994 <hif_register_cb+0xa0>)
    1936:	683a      	ldr	r2, [r7, #0]
    1938:	61da      	str	r2, [r3, #28]
			break;
    193a:	e020      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    193c:	4b15      	ldr	r3, [pc, #84]	; (1994 <hif_register_cb+0xa0>)
    193e:	683a      	ldr	r2, [r7, #0]
    1940:	621a      	str	r2, [r3, #32]
			break;
    1942:	e01c      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    1944:	4b13      	ldr	r3, [pc, #76]	; (1994 <hif_register_cb+0xa0>)
    1946:	683a      	ldr	r2, [r7, #0]
    1948:	619a      	str	r2, [r3, #24]
			break;
    194a:	e018      	b.n	197e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    194c:	4b11      	ldr	r3, [pc, #68]	; (1994 <hif_register_cb+0xa0>)
    194e:	683a      	ldr	r2, [r7, #0]
    1950:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1952:	e014      	b.n	197e <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1954:	4a10      	ldr	r2, [pc, #64]	; (1998 <hif_register_cb+0xa4>)
    1956:	4911      	ldr	r1, [pc, #68]	; (199c <hif_register_cb+0xa8>)
    1958:	4b11      	ldr	r3, [pc, #68]	; (19a0 <hif_register_cb+0xac>)
    195a:	0018      	movs	r0, r3
    195c:	4b11      	ldr	r3, [pc, #68]	; (19a4 <hif_register_cb+0xb0>)
    195e:	4798      	blx	r3
    1960:	1dfb      	adds	r3, r7, #7
    1962:	781a      	ldrb	r2, [r3, #0]
    1964:	4b10      	ldr	r3, [pc, #64]	; (19a8 <hif_register_cb+0xb4>)
    1966:	0011      	movs	r1, r2
    1968:	0018      	movs	r0, r3
    196a:	4b0e      	ldr	r3, [pc, #56]	; (19a4 <hif_register_cb+0xb0>)
    196c:	4798      	blx	r3
    196e:	200d      	movs	r0, #13
    1970:	4b0e      	ldr	r3, [pc, #56]	; (19ac <hif_register_cb+0xb8>)
    1972:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1974:	230f      	movs	r3, #15
    1976:	18fb      	adds	r3, r7, r3
    1978:	22f4      	movs	r2, #244	; 0xf4
    197a:	701a      	strb	r2, [r3, #0]
			break;
    197c:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    197e:	230f      	movs	r3, #15
    1980:	18fb      	adds	r3, r7, r3
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	b25b      	sxtb	r3, r3
}
    1986:	0018      	movs	r0, r3
    1988:	46bd      	mov	sp, r7
    198a:	b004      	add	sp, #16
    198c:	bd80      	pop	{r7, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	00013be4 	.word	0x00013be4
    1994:	2000030c 	.word	0x2000030c
    1998:	000002b1 	.word	0x000002b1
    199c:	00013c34 	.word	0x00013c34
    19a0:	0001390c 	.word	0x0001390c
    19a4:	0000efc9 	.word	0x0000efc9
    19a8:	00013bd8 	.word	0x00013bd8
    19ac:	0000effd 	.word	0x0000effd

000019b0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    19b0:	b590      	push	{r4, r7, lr}
    19b2:	b0ad      	sub	sp, #180	; 0xb4
    19b4:	af02      	add	r7, sp, #8
    19b6:	603a      	str	r2, [r7, #0]
    19b8:	1dfb      	adds	r3, r7, #7
    19ba:	1c02      	adds	r2, r0, #0
    19bc:	701a      	strb	r2, [r3, #0]
    19be:	1d3b      	adds	r3, r7, #4
    19c0:	1c0a      	adds	r2, r1, #0
    19c2:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    19c4:	1dfb      	adds	r3, r7, #7
    19c6:	781b      	ldrb	r3, [r3, #0]
    19c8:	2b2c      	cmp	r3, #44	; 0x2c
    19ca:	d116      	bne.n	19fa <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    19cc:	239c      	movs	r3, #156	; 0x9c
    19ce:	18f9      	adds	r1, r7, r3
    19d0:	6838      	ldr	r0, [r7, #0]
    19d2:	2300      	movs	r3, #0
    19d4:	2204      	movs	r2, #4
    19d6:	4cc6      	ldr	r4, [pc, #792]	; (1cf0 <m2m_wifi_cb+0x340>)
    19d8:	47a0      	blx	r4
    19da:	1e03      	subs	r3, r0, #0
    19dc:	d000      	beq.n	19e0 <m2m_wifi_cb+0x30>
    19de:	e1aa      	b.n	1d36 <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    19e0:	4bc4      	ldr	r3, [pc, #784]	; (1cf4 <m2m_wifi_cb+0x344>)
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	2b00      	cmp	r3, #0
    19e6:	d100      	bne.n	19ea <m2m_wifi_cb+0x3a>
    19e8:	e1a5      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    19ea:	4bc2      	ldr	r3, [pc, #776]	; (1cf4 <m2m_wifi_cb+0x344>)
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	229c      	movs	r2, #156	; 0x9c
    19f0:	18ba      	adds	r2, r7, r2
    19f2:	0011      	movs	r1, r2
    19f4:	202c      	movs	r0, #44	; 0x2c
    19f6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    19f8:	e19d      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    19fa:	1dfb      	adds	r3, r7, #7
    19fc:	781b      	ldrb	r3, [r3, #0]
    19fe:	2b1b      	cmp	r3, #27
    1a00:	d116      	bne.n	1a30 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1a02:	2394      	movs	r3, #148	; 0x94
    1a04:	18f9      	adds	r1, r7, r3
    1a06:	6838      	ldr	r0, [r7, #0]
    1a08:	2300      	movs	r3, #0
    1a0a:	2208      	movs	r2, #8
    1a0c:	4cb8      	ldr	r4, [pc, #736]	; (1cf0 <m2m_wifi_cb+0x340>)
    1a0e:	47a0      	blx	r4
    1a10:	1e03      	subs	r3, r0, #0
    1a12:	d000      	beq.n	1a16 <m2m_wifi_cb+0x66>
    1a14:	e18f      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1a16:	4bb7      	ldr	r3, [pc, #732]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a18:	681b      	ldr	r3, [r3, #0]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d100      	bne.n	1a20 <m2m_wifi_cb+0x70>
    1a1e:	e18a      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1a20:	4bb4      	ldr	r3, [pc, #720]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	2294      	movs	r2, #148	; 0x94
    1a26:	18ba      	adds	r2, r7, r2
    1a28:	0011      	movs	r1, r2
    1a2a:	201b      	movs	r0, #27
    1a2c:	4798      	blx	r3
}
    1a2e:	e182      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1a30:	1dfb      	adds	r3, r7, #7
    1a32:	781b      	ldrb	r3, [r3, #0]
    1a34:	2b06      	cmp	r3, #6
    1a36:	d116      	bne.n	1a66 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1a38:	2308      	movs	r3, #8
    1a3a:	18f9      	adds	r1, r7, r3
    1a3c:	6838      	ldr	r0, [r7, #0]
    1a3e:	2301      	movs	r3, #1
    1a40:	2230      	movs	r2, #48	; 0x30
    1a42:	4cab      	ldr	r4, [pc, #684]	; (1cf0 <m2m_wifi_cb+0x340>)
    1a44:	47a0      	blx	r4
    1a46:	1e03      	subs	r3, r0, #0
    1a48:	d000      	beq.n	1a4c <m2m_wifi_cb+0x9c>
    1a4a:	e174      	b.n	1d36 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1a4c:	4ba9      	ldr	r3, [pc, #676]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	2b00      	cmp	r3, #0
    1a52:	d100      	bne.n	1a56 <m2m_wifi_cb+0xa6>
    1a54:	e16f      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1a56:	4ba7      	ldr	r3, [pc, #668]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a58:	681b      	ldr	r3, [r3, #0]
    1a5a:	2208      	movs	r2, #8
    1a5c:	18ba      	adds	r2, r7, r2
    1a5e:	0011      	movs	r1, r2
    1a60:	2006      	movs	r0, #6
    1a62:	4798      	blx	r3
}
    1a64:	e167      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1a66:	1dfb      	adds	r3, r7, #7
    1a68:	781b      	ldrb	r3, [r3, #0]
    1a6a:	2b0e      	cmp	r3, #14
    1a6c:	d100      	bne.n	1a70 <m2m_wifi_cb+0xc0>
    1a6e:	e162      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	2b32      	cmp	r3, #50	; 0x32
    1a76:	d116      	bne.n	1aa6 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1a78:	2380      	movs	r3, #128	; 0x80
    1a7a:	18f9      	adds	r1, r7, r3
    1a7c:	6838      	ldr	r0, [r7, #0]
    1a7e:	2300      	movs	r3, #0
    1a80:	2214      	movs	r2, #20
    1a82:	4c9b      	ldr	r4, [pc, #620]	; (1cf0 <m2m_wifi_cb+0x340>)
    1a84:	47a0      	blx	r4
    1a86:	1e03      	subs	r3, r0, #0
    1a88:	d000      	beq.n	1a8c <m2m_wifi_cb+0xdc>
    1a8a:	e154      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1a8c:	4b99      	ldr	r3, [pc, #612]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d100      	bne.n	1a96 <m2m_wifi_cb+0xe6>
    1a94:	e14f      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1a96:	4b97      	ldr	r3, [pc, #604]	; (1cf4 <m2m_wifi_cb+0x344>)
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	2280      	movs	r2, #128	; 0x80
    1a9c:	18ba      	adds	r2, r7, r2
    1a9e:	0011      	movs	r1, r2
    1aa0:	2032      	movs	r0, #50	; 0x32
    1aa2:	4798      	blx	r3
}
    1aa4:	e147      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1aa6:	1dfb      	adds	r3, r7, #7
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	2b2f      	cmp	r3, #47	; 0x2f
    1aac:	d11d      	bne.n	1aea <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1aae:	2308      	movs	r3, #8
    1ab0:	18fb      	adds	r3, r7, r3
    1ab2:	2264      	movs	r2, #100	; 0x64
    1ab4:	2100      	movs	r1, #0
    1ab6:	0018      	movs	r0, r3
    1ab8:	4b8f      	ldr	r3, [pc, #572]	; (1cf8 <m2m_wifi_cb+0x348>)
    1aba:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1abc:	2308      	movs	r3, #8
    1abe:	18f9      	adds	r1, r7, r3
    1ac0:	6838      	ldr	r0, [r7, #0]
    1ac2:	2300      	movs	r3, #0
    1ac4:	2264      	movs	r2, #100	; 0x64
    1ac6:	4c8a      	ldr	r4, [pc, #552]	; (1cf0 <m2m_wifi_cb+0x340>)
    1ac8:	47a0      	blx	r4
    1aca:	1e03      	subs	r3, r0, #0
    1acc:	d000      	beq.n	1ad0 <m2m_wifi_cb+0x120>
    1ace:	e132      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1ad0:	4b88      	ldr	r3, [pc, #544]	; (1cf4 <m2m_wifi_cb+0x344>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d100      	bne.n	1ada <m2m_wifi_cb+0x12a>
    1ad8:	e12d      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1ada:	4b86      	ldr	r3, [pc, #536]	; (1cf4 <m2m_wifi_cb+0x344>)
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	2208      	movs	r2, #8
    1ae0:	18ba      	adds	r2, r7, r2
    1ae2:	0011      	movs	r1, r2
    1ae4:	202f      	movs	r0, #47	; 0x2f
    1ae6:	4798      	blx	r3
}
    1ae8:	e125      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1aea:	1dfb      	adds	r3, r7, #7
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	2b34      	cmp	r3, #52	; 0x34
    1af0:	d12e      	bne.n	1b50 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1af2:	237c      	movs	r3, #124	; 0x7c
    1af4:	18f9      	adds	r1, r7, r3
    1af6:	6838      	ldr	r0, [r7, #0]
    1af8:	2300      	movs	r3, #0
    1afa:	2204      	movs	r2, #4
    1afc:	4c7c      	ldr	r4, [pc, #496]	; (1cf0 <m2m_wifi_cb+0x340>)
    1afe:	47a0      	blx	r4
    1b00:	1e03      	subs	r3, r0, #0
    1b02:	d000      	beq.n	1b06 <m2m_wifi_cb+0x156>
    1b04:	e117      	b.n	1d36 <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1b06:	4b7d      	ldr	r3, [pc, #500]	; (1cfc <m2m_wifi_cb+0x34c>)
    1b08:	0018      	movs	r0, r3
    1b0a:	4b7d      	ldr	r3, [pc, #500]	; (1d00 <m2m_wifi_cb+0x350>)
    1b0c:	4798      	blx	r3
    1b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b10:	0e1b      	lsrs	r3, r3, #24
    1b12:	b2db      	uxtb	r3, r3
    1b14:	0019      	movs	r1, r3
    1b16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b18:	0c1b      	lsrs	r3, r3, #16
    1b1a:	b2db      	uxtb	r3, r3
    1b1c:	001a      	movs	r2, r3
    1b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b20:	0a1b      	lsrs	r3, r3, #8
    1b22:	b2db      	uxtb	r3, r3
    1b24:	001c      	movs	r4, r3
    1b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b28:	b2db      	uxtb	r3, r3
    1b2a:	4876      	ldr	r0, [pc, #472]	; (1d04 <m2m_wifi_cb+0x354>)
    1b2c:	9300      	str	r3, [sp, #0]
    1b2e:	0023      	movs	r3, r4
    1b30:	4c73      	ldr	r4, [pc, #460]	; (1d00 <m2m_wifi_cb+0x350>)
    1b32:	47a0      	blx	r4
    1b34:	200d      	movs	r0, #13
    1b36:	4b74      	ldr	r3, [pc, #464]	; (1d08 <m2m_wifi_cb+0x358>)
    1b38:	4798      	blx	r3
			if (gpfAppWifiCb)
    1b3a:	4b6e      	ldr	r3, [pc, #440]	; (1cf4 <m2m_wifi_cb+0x344>)
    1b3c:	681b      	ldr	r3, [r3, #0]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d100      	bne.n	1b44 <m2m_wifi_cb+0x194>
    1b42:	e0f8      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1b44:	4b6b      	ldr	r3, [pc, #428]	; (1cf4 <m2m_wifi_cb+0x344>)
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	2100      	movs	r1, #0
    1b4a:	2034      	movs	r0, #52	; 0x34
    1b4c:	4798      	blx	r3
}
    1b4e:	e0f2      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1b50:	1dfb      	adds	r3, r7, #7
    1b52:	781b      	ldrb	r3, [r3, #0]
    1b54:	2b11      	cmp	r3, #17
    1b56:	d11e      	bne.n	1b96 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    1b58:	4b6c      	ldr	r3, [pc, #432]	; (1d0c <m2m_wifi_cb+0x35c>)
    1b5a:	2200      	movs	r2, #0
    1b5c:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1b5e:	2378      	movs	r3, #120	; 0x78
    1b60:	18f9      	adds	r1, r7, r3
    1b62:	6838      	ldr	r0, [r7, #0]
    1b64:	2300      	movs	r3, #0
    1b66:	2204      	movs	r2, #4
    1b68:	4c61      	ldr	r4, [pc, #388]	; (1cf0 <m2m_wifi_cb+0x340>)
    1b6a:	47a0      	blx	r4
    1b6c:	1e03      	subs	r3, r0, #0
    1b6e:	d000      	beq.n	1b72 <m2m_wifi_cb+0x1c2>
    1b70:	e0e1      	b.n	1d36 <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    1b72:	2378      	movs	r3, #120	; 0x78
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	781a      	ldrb	r2, [r3, #0]
    1b78:	4b65      	ldr	r3, [pc, #404]	; (1d10 <m2m_wifi_cb+0x360>)
    1b7a:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1b7c:	4b5d      	ldr	r3, [pc, #372]	; (1cf4 <m2m_wifi_cb+0x344>)
    1b7e:	681b      	ldr	r3, [r3, #0]
    1b80:	2b00      	cmp	r3, #0
    1b82:	d100      	bne.n	1b86 <m2m_wifi_cb+0x1d6>
    1b84:	e0d7      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1b86:	4b5b      	ldr	r3, [pc, #364]	; (1cf4 <m2m_wifi_cb+0x344>)
    1b88:	681b      	ldr	r3, [r3, #0]
    1b8a:	2278      	movs	r2, #120	; 0x78
    1b8c:	18ba      	adds	r2, r7, r2
    1b8e:	0011      	movs	r1, r2
    1b90:	2011      	movs	r0, #17
    1b92:	4798      	blx	r3
}
    1b94:	e0cf      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1b96:	1dfb      	adds	r3, r7, #7
    1b98:	781b      	ldrb	r3, [r3, #0]
    1b9a:	2b13      	cmp	r3, #19
    1b9c:	d116      	bne.n	1bcc <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1b9e:	2308      	movs	r3, #8
    1ba0:	18f9      	adds	r1, r7, r3
    1ba2:	6838      	ldr	r0, [r7, #0]
    1ba4:	2300      	movs	r3, #0
    1ba6:	222c      	movs	r2, #44	; 0x2c
    1ba8:	4c51      	ldr	r4, [pc, #324]	; (1cf0 <m2m_wifi_cb+0x340>)
    1baa:	47a0      	blx	r4
    1bac:	1e03      	subs	r3, r0, #0
    1bae:	d000      	beq.n	1bb2 <m2m_wifi_cb+0x202>
    1bb0:	e0c1      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1bb2:	4b50      	ldr	r3, [pc, #320]	; (1cf4 <m2m_wifi_cb+0x344>)
    1bb4:	681b      	ldr	r3, [r3, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d100      	bne.n	1bbc <m2m_wifi_cb+0x20c>
    1bba:	e0bc      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1bbc:	4b4d      	ldr	r3, [pc, #308]	; (1cf4 <m2m_wifi_cb+0x344>)
    1bbe:	681b      	ldr	r3, [r3, #0]
    1bc0:	2208      	movs	r2, #8
    1bc2:	18ba      	adds	r2, r7, r2
    1bc4:	0011      	movs	r1, r2
    1bc6:	2013      	movs	r0, #19
    1bc8:	4798      	blx	r3
}
    1bca:	e0b4      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1bcc:	1dfb      	adds	r3, r7, #7
    1bce:	781b      	ldrb	r3, [r3, #0]
    1bd0:	2b04      	cmp	r3, #4
    1bd2:	d116      	bne.n	1c02 <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1bd4:	23a0      	movs	r3, #160	; 0xa0
    1bd6:	18f9      	adds	r1, r7, r3
    1bd8:	6838      	ldr	r0, [r7, #0]
    1bda:	2300      	movs	r3, #0
    1bdc:	2204      	movs	r2, #4
    1bde:	4c44      	ldr	r4, [pc, #272]	; (1cf0 <m2m_wifi_cb+0x340>)
    1be0:	47a0      	blx	r4
    1be2:	1e03      	subs	r3, r0, #0
    1be4:	d000      	beq.n	1be8 <m2m_wifi_cb+0x238>
    1be6:	e0a6      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1be8:	4b42      	ldr	r3, [pc, #264]	; (1cf4 <m2m_wifi_cb+0x344>)
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	2b00      	cmp	r3, #0
    1bee:	d100      	bne.n	1bf2 <m2m_wifi_cb+0x242>
    1bf0:	e0a1      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1bf2:	4b40      	ldr	r3, [pc, #256]	; (1cf4 <m2m_wifi_cb+0x344>)
    1bf4:	681b      	ldr	r3, [r3, #0]
    1bf6:	22a0      	movs	r2, #160	; 0xa0
    1bf8:	18ba      	adds	r2, r7, r2
    1bfa:	0011      	movs	r1, r2
    1bfc:	2004      	movs	r0, #4
    1bfe:	4798      	blx	r3
}
    1c00:	e099      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1c02:	1dfb      	adds	r3, r7, #7
    1c04:	781b      	ldrb	r3, [r3, #0]
    1c06:	2b65      	cmp	r3, #101	; 0x65
    1c08:	d116      	bne.n	1c38 <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c0a:	23a0      	movs	r3, #160	; 0xa0
    1c0c:	18f9      	adds	r1, r7, r3
    1c0e:	6838      	ldr	r0, [r7, #0]
    1c10:	2300      	movs	r3, #0
    1c12:	2204      	movs	r2, #4
    1c14:	4c36      	ldr	r4, [pc, #216]	; (1cf0 <m2m_wifi_cb+0x340>)
    1c16:	47a0      	blx	r4
    1c18:	1e03      	subs	r3, r0, #0
    1c1a:	d000      	beq.n	1c1e <m2m_wifi_cb+0x26e>
    1c1c:	e08b      	b.n	1d36 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1c1e:	4b35      	ldr	r3, [pc, #212]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c20:	681b      	ldr	r3, [r3, #0]
    1c22:	2b00      	cmp	r3, #0
    1c24:	d100      	bne.n	1c28 <m2m_wifi_cb+0x278>
    1c26:	e086      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1c28:	4b32      	ldr	r3, [pc, #200]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	22a0      	movs	r2, #160	; 0xa0
    1c2e:	18ba      	adds	r2, r7, r2
    1c30:	0011      	movs	r1, r2
    1c32:	2065      	movs	r0, #101	; 0x65
    1c34:	4798      	blx	r3
}
    1c36:	e07e      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1c38:	1dfb      	adds	r3, r7, #7
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	2b09      	cmp	r3, #9
    1c3e:	d116      	bne.n	1c6e <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1c40:	2308      	movs	r3, #8
    1c42:	18f9      	adds	r1, r7, r3
    1c44:	6838      	ldr	r0, [r7, #0]
    1c46:	2301      	movs	r3, #1
    1c48:	2264      	movs	r2, #100	; 0x64
    1c4a:	4c29      	ldr	r4, [pc, #164]	; (1cf0 <m2m_wifi_cb+0x340>)
    1c4c:	47a0      	blx	r4
    1c4e:	1e03      	subs	r3, r0, #0
    1c50:	d000      	beq.n	1c54 <m2m_wifi_cb+0x2a4>
    1c52:	e070      	b.n	1d36 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1c54:	4b27      	ldr	r3, [pc, #156]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d100      	bne.n	1c5e <m2m_wifi_cb+0x2ae>
    1c5c:	e06b      	b.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1c5e:	4b25      	ldr	r3, [pc, #148]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c60:	681b      	ldr	r3, [r3, #0]
    1c62:	2208      	movs	r2, #8
    1c64:	18ba      	adds	r2, r7, r2
    1c66:	0011      	movs	r1, r2
    1c68:	2009      	movs	r0, #9
    1c6a:	4798      	blx	r3
}
    1c6c:	e063      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1c6e:	1dfb      	adds	r3, r7, #7
    1c70:	781b      	ldrb	r3, [r3, #0]
    1c72:	2b2a      	cmp	r3, #42	; 0x2a
    1c74:	d114      	bne.n	1ca0 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1c76:	2374      	movs	r3, #116	; 0x74
    1c78:	18f9      	adds	r1, r7, r3
    1c7a:	6838      	ldr	r0, [r7, #0]
    1c7c:	2301      	movs	r3, #1
    1c7e:	2204      	movs	r2, #4
    1c80:	4c1b      	ldr	r4, [pc, #108]	; (1cf0 <m2m_wifi_cb+0x340>)
    1c82:	47a0      	blx	r4
    1c84:	1e03      	subs	r3, r0, #0
    1c86:	d156      	bne.n	1d36 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1c88:	4b1a      	ldr	r3, [pc, #104]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d052      	beq.n	1d36 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1c90:	4b18      	ldr	r3, [pc, #96]	; (1cf4 <m2m_wifi_cb+0x344>)
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	2274      	movs	r2, #116	; 0x74
    1c96:	18ba      	adds	r2, r7, r2
    1c98:	0011      	movs	r1, r2
    1c9a:	202a      	movs	r0, #42	; 0x2a
    1c9c:	4798      	blx	r3
}
    1c9e:	e04a      	b.n	1d36 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1ca0:	1dfb      	adds	r3, r7, #7
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	2b20      	cmp	r3, #32
    1ca6:	d135      	bne.n	1d14 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1ca8:	236c      	movs	r3, #108	; 0x6c
    1caa:	18f9      	adds	r1, r7, r3
    1cac:	6838      	ldr	r0, [r7, #0]
    1cae:	2300      	movs	r3, #0
    1cb0:	2208      	movs	r2, #8
    1cb2:	4c0f      	ldr	r4, [pc, #60]	; (1cf0 <m2m_wifi_cb+0x340>)
    1cb4:	47a0      	blx	r4
    1cb6:	1e03      	subs	r3, r0, #0
    1cb8:	d13d      	bne.n	1d36 <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1cba:	683b      	ldr	r3, [r7, #0]
    1cbc:	3308      	adds	r3, #8
    1cbe:	0018      	movs	r0, r3
    1cc0:	236c      	movs	r3, #108	; 0x6c
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	6819      	ldr	r1, [r3, #0]
    1cc6:	236c      	movs	r3, #108	; 0x6c
    1cc8:	18fb      	adds	r3, r7, r3
    1cca:	889a      	ldrh	r2, [r3, #4]
    1ccc:	2301      	movs	r3, #1
    1cce:	4c08      	ldr	r4, [pc, #32]	; (1cf0 <m2m_wifi_cb+0x340>)
    1cd0:	47a0      	blx	r4
    1cd2:	1e03      	subs	r3, r0, #0
    1cd4:	d12f      	bne.n	1d36 <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    1cd6:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <m2m_wifi_cb+0x344>)
    1cd8:	681b      	ldr	r3, [r3, #0]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d02b      	beq.n	1d36 <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1cde:	4b05      	ldr	r3, [pc, #20]	; (1cf4 <m2m_wifi_cb+0x344>)
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	226c      	movs	r2, #108	; 0x6c
    1ce4:	18ba      	adds	r2, r7, r2
    1ce6:	0011      	movs	r1, r2
    1ce8:	2020      	movs	r0, #32
    1cea:	4798      	blx	r3
}
    1cec:	e023      	b.n	1d36 <m2m_wifi_cb+0x386>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	00001775 	.word	0x00001775
    1cf4:	20000234 	.word	0x20000234
    1cf8:	00000c21 	.word	0x00000c21
    1cfc:	00013c44 	.word	0x00013c44
    1d00:	0000efc9 	.word	0x0000efc9
    1d04:	00013c50 	.word	0x00013c50
    1d08:	0000effd 	.word	0x0000effd
    1d0c:	20000231 	.word	0x20000231
    1d10:	20000230 	.word	0x20000230
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1d14:	2395      	movs	r3, #149	; 0x95
    1d16:	005a      	lsls	r2, r3, #1
    1d18:	4909      	ldr	r1, [pc, #36]	; (1d40 <m2m_wifi_cb+0x390>)
    1d1a:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <m2m_wifi_cb+0x394>)
    1d1c:	0018      	movs	r0, r3
    1d1e:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <m2m_wifi_cb+0x398>)
    1d20:	4798      	blx	r3
    1d22:	1dfb      	adds	r3, r7, #7
    1d24:	781a      	ldrb	r2, [r3, #0]
    1d26:	4b09      	ldr	r3, [pc, #36]	; (1d4c <m2m_wifi_cb+0x39c>)
    1d28:	0011      	movs	r1, r2
    1d2a:	0018      	movs	r0, r3
    1d2c:	4b06      	ldr	r3, [pc, #24]	; (1d48 <m2m_wifi_cb+0x398>)
    1d2e:	4798      	blx	r3
    1d30:	200d      	movs	r0, #13
    1d32:	4b07      	ldr	r3, [pc, #28]	; (1d50 <m2m_wifi_cb+0x3a0>)
    1d34:	4798      	blx	r3
}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	46bd      	mov	sp, r7
    1d3a:	b02b      	add	sp, #172	; 0xac
    1d3c:	bd90      	pop	{r4, r7, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	00013ff8 	.word	0x00013ff8
    1d44:	00013c70 	.word	0x00013c70
    1d48:	0000efc9 	.word	0x0000efc9
    1d4c:	00013c84 	.word	0x00013c84
    1d50:	0000effd 	.word	0x0000effd

00001d54 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1d54:	b590      	push	{r4, r7, lr}
    1d56:	b091      	sub	sp, #68	; 0x44
    1d58:	af02      	add	r7, sp, #8
    1d5a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    1d5c:	2337      	movs	r3, #55	; 0x37
    1d5e:	18fb      	adds	r3, r7, r3
    1d60:	2200      	movs	r2, #0
    1d62:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1d64:	230b      	movs	r3, #11
    1d66:	18fb      	adds	r3, r7, r3
    1d68:	2201      	movs	r2, #1
    1d6a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d104      	bne.n	1d7c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1d72:	2337      	movs	r3, #55	; 0x37
    1d74:	18fb      	adds	r3, r7, r3
    1d76:	22f4      	movs	r2, #244	; 0xf4
    1d78:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    1d7a:	e0ad      	b.n	1ed8 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	681a      	ldr	r2, [r3, #0]
    1d80:	4b59      	ldr	r3, [pc, #356]	; (1ee8 <m2m_wifi_init+0x194>)
    1d82:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1d84:	4b59      	ldr	r3, [pc, #356]	; (1eec <m2m_wifi_init+0x198>)
    1d86:	2200      	movs	r2, #0
    1d88:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1d8a:	2337      	movs	r3, #55	; 0x37
    1d8c:	18fc      	adds	r4, r7, r3
    1d8e:	230b      	movs	r3, #11
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	0018      	movs	r0, r3
    1d94:	4b56      	ldr	r3, [pc, #344]	; (1ef0 <m2m_wifi_init+0x19c>)
    1d96:	4798      	blx	r3
    1d98:	0003      	movs	r3, r0
    1d9a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1d9c:	2337      	movs	r3, #55	; 0x37
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	b25b      	sxtb	r3, r3
    1da4:	2b00      	cmp	r3, #0
    1da6:	d000      	beq.n	1daa <m2m_wifi_init+0x56>
    1da8:	e093      	b.n	1ed2 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1daa:	2337      	movs	r3, #55	; 0x37
    1dac:	18fc      	adds	r4, r7, r3
    1dae:	2000      	movs	r0, #0
    1db0:	4b50      	ldr	r3, [pc, #320]	; (1ef4 <m2m_wifi_init+0x1a0>)
    1db2:	4798      	blx	r3
    1db4:	0003      	movs	r3, r0
    1db6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1db8:	2337      	movs	r3, #55	; 0x37
    1dba:	18fb      	adds	r3, r7, r3
    1dbc:	781b      	ldrb	r3, [r3, #0]
    1dbe:	b25b      	sxtb	r3, r3
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d000      	beq.n	1dc6 <m2m_wifi_init+0x72>
    1dc4:	e080      	b.n	1ec8 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1dc6:	4b4c      	ldr	r3, [pc, #304]	; (1ef8 <m2m_wifi_init+0x1a4>)
    1dc8:	0019      	movs	r1, r3
    1dca:	2001      	movs	r0, #1
    1dcc:	4b4b      	ldr	r3, [pc, #300]	; (1efc <m2m_wifi_init+0x1a8>)
    1dce:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    1dd0:	2337      	movs	r3, #55	; 0x37
    1dd2:	18fc      	adds	r4, r7, r3
    1dd4:	230c      	movs	r3, #12
    1dd6:	18fb      	adds	r3, r7, r3
    1dd8:	0018      	movs	r0, r3
    1dda:	4b49      	ldr	r3, [pc, #292]	; (1f00 <m2m_wifi_init+0x1ac>)
    1ddc:	4798      	blx	r3
    1dde:	0003      	movs	r3, r0
    1de0:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1de2:	4b48      	ldr	r3, [pc, #288]	; (1f04 <m2m_wifi_init+0x1b0>)
    1de4:	0018      	movs	r0, r3
    1de6:	4b48      	ldr	r3, [pc, #288]	; (1f08 <m2m_wifi_init+0x1b4>)
    1de8:	4798      	blx	r3
    1dea:	230c      	movs	r3, #12
    1dec:	18fb      	adds	r3, r7, r3
    1dee:	791b      	ldrb	r3, [r3, #4]
    1df0:	0019      	movs	r1, r3
    1df2:	230c      	movs	r3, #12
    1df4:	18fb      	adds	r3, r7, r3
    1df6:	795b      	ldrb	r3, [r3, #5]
    1df8:	001a      	movs	r2, r3
    1dfa:	230c      	movs	r3, #12
    1dfc:	18fb      	adds	r3, r7, r3
    1dfe:	799b      	ldrb	r3, [r3, #6]
    1e00:	001c      	movs	r4, r3
    1e02:	230c      	movs	r3, #12
    1e04:	18fb      	adds	r3, r7, r3
    1e06:	8c1b      	ldrh	r3, [r3, #32]
    1e08:	4840      	ldr	r0, [pc, #256]	; (1f0c <m2m_wifi_init+0x1b8>)
    1e0a:	9300      	str	r3, [sp, #0]
    1e0c:	0023      	movs	r3, r4
    1e0e:	4c3e      	ldr	r4, [pc, #248]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e10:	47a0      	blx	r4
    1e12:	200d      	movs	r0, #13
    1e14:	4b3e      	ldr	r3, [pc, #248]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e16:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1e18:	4b3a      	ldr	r3, [pc, #232]	; (1f04 <m2m_wifi_init+0x1b0>)
    1e1a:	0018      	movs	r0, r3
    1e1c:	4b3a      	ldr	r3, [pc, #232]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e1e:	4798      	blx	r3
    1e20:	230c      	movs	r3, #12
    1e22:	18fb      	adds	r3, r7, r3
    1e24:	3316      	adds	r3, #22
    1e26:	001a      	movs	r2, r3
    1e28:	230c      	movs	r3, #12
    1e2a:	18fb      	adds	r3, r7, r3
    1e2c:	330a      	adds	r3, #10
    1e2e:	0019      	movs	r1, r3
    1e30:	4b38      	ldr	r3, [pc, #224]	; (1f14 <m2m_wifi_init+0x1c0>)
    1e32:	0018      	movs	r0, r3
    1e34:	4b34      	ldr	r3, [pc, #208]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e36:	4798      	blx	r3
    1e38:	200d      	movs	r0, #13
    1e3a:	4b35      	ldr	r3, [pc, #212]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e3c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1e3e:	4b31      	ldr	r3, [pc, #196]	; (1f04 <m2m_wifi_init+0x1b0>)
    1e40:	0018      	movs	r0, r3
    1e42:	4b31      	ldr	r3, [pc, #196]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e44:	4798      	blx	r3
    1e46:	230c      	movs	r3, #12
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	79db      	ldrb	r3, [r3, #7]
    1e4c:	0019      	movs	r1, r3
    1e4e:	230c      	movs	r3, #12
    1e50:	18fb      	adds	r3, r7, r3
    1e52:	7a1b      	ldrb	r3, [r3, #8]
    1e54:	001a      	movs	r2, r3
    1e56:	230c      	movs	r3, #12
    1e58:	18fb      	adds	r3, r7, r3
    1e5a:	7a5b      	ldrb	r3, [r3, #9]
    1e5c:	482e      	ldr	r0, [pc, #184]	; (1f18 <m2m_wifi_init+0x1c4>)
    1e5e:	4c2a      	ldr	r4, [pc, #168]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e60:	47a0      	blx	r4
    1e62:	200d      	movs	r0, #13
    1e64:	4b2a      	ldr	r3, [pc, #168]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e66:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1e68:	4b26      	ldr	r3, [pc, #152]	; (1f04 <m2m_wifi_init+0x1b0>)
    1e6a:	0018      	movs	r0, r3
    1e6c:	4b26      	ldr	r3, [pc, #152]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e6e:	4798      	blx	r3
    1e70:	482a      	ldr	r0, [pc, #168]	; (1f1c <m2m_wifi_init+0x1c8>)
    1e72:	2302      	movs	r3, #2
    1e74:	2205      	movs	r2, #5
    1e76:	2113      	movs	r1, #19
    1e78:	4c23      	ldr	r4, [pc, #140]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e7a:	47a0      	blx	r4
    1e7c:	200d      	movs	r0, #13
    1e7e:	4b24      	ldr	r3, [pc, #144]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e80:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1e82:	4b20      	ldr	r3, [pc, #128]	; (1f04 <m2m_wifi_init+0x1b0>)
    1e84:	0018      	movs	r0, r3
    1e86:	4b20      	ldr	r3, [pc, #128]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e88:	4798      	blx	r3
    1e8a:	4a25      	ldr	r2, [pc, #148]	; (1f20 <m2m_wifi_init+0x1cc>)
    1e8c:	4925      	ldr	r1, [pc, #148]	; (1f24 <m2m_wifi_init+0x1d0>)
    1e8e:	4b26      	ldr	r3, [pc, #152]	; (1f28 <m2m_wifi_init+0x1d4>)
    1e90:	0018      	movs	r0, r3
    1e92:	4b1d      	ldr	r3, [pc, #116]	; (1f08 <m2m_wifi_init+0x1b4>)
    1e94:	4798      	blx	r3
    1e96:	200d      	movs	r0, #13
    1e98:	4b1d      	ldr	r3, [pc, #116]	; (1f10 <m2m_wifi_init+0x1bc>)
    1e9a:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1e9c:	2337      	movs	r3, #55	; 0x37
    1e9e:	18fb      	adds	r3, r7, r3
    1ea0:	781b      	ldrb	r3, [r3, #0]
    1ea2:	b25b      	sxtb	r3, r3
    1ea4:	330d      	adds	r3, #13
    1ea6:	d116      	bne.n	1ed6 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    1ea8:	23ee      	movs	r3, #238	; 0xee
    1eaa:	33ff      	adds	r3, #255	; 0xff
    1eac:	001a      	movs	r2, r3
    1eae:	491f      	ldr	r1, [pc, #124]	; (1f2c <m2m_wifi_init+0x1d8>)
    1eb0:	4b1f      	ldr	r3, [pc, #124]	; (1f30 <m2m_wifi_init+0x1dc>)
    1eb2:	0018      	movs	r0, r3
    1eb4:	4b14      	ldr	r3, [pc, #80]	; (1f08 <m2m_wifi_init+0x1b4>)
    1eb6:	4798      	blx	r3
    1eb8:	4b1e      	ldr	r3, [pc, #120]	; (1f34 <m2m_wifi_init+0x1e0>)
    1eba:	0018      	movs	r0, r3
    1ebc:	4b1e      	ldr	r3, [pc, #120]	; (1f38 <m2m_wifi_init+0x1e4>)
    1ebe:	4798      	blx	r3
    1ec0:	200d      	movs	r0, #13
    1ec2:	4b13      	ldr	r3, [pc, #76]	; (1f10 <m2m_wifi_init+0x1bc>)
    1ec4:	4798      	blx	r3
	}

	goto _EXIT0;
    1ec6:	e006      	b.n	1ed6 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1ec8:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    1eca:	2000      	movs	r0, #0
    1ecc:	4b1b      	ldr	r3, [pc, #108]	; (1f3c <m2m_wifi_init+0x1e8>)
    1ece:	4798      	blx	r3
    1ed0:	e002      	b.n	1ed8 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	e000      	b.n	1ed8 <m2m_wifi_init+0x184>
	goto _EXIT0;
    1ed6:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    1ed8:	2337      	movs	r3, #55	; 0x37
    1eda:	18fb      	adds	r3, r7, r3
    1edc:	781b      	ldrb	r3, [r3, #0]
    1ede:	b25b      	sxtb	r3, r3
}
    1ee0:	0018      	movs	r0, r3
    1ee2:	46bd      	mov	sp, r7
    1ee4:	b00f      	add	sp, #60	; 0x3c
    1ee6:	bd90      	pop	{r4, r7, pc}
    1ee8:	20000234 	.word	0x20000234
    1eec:	20000231 	.word	0x20000231
    1ef0:	00003061 	.word	0x00003061
    1ef4:	00000e39 	.word	0x00000e39
    1ef8:	000019b1 	.word	0x000019b1
    1efc:	000018f5 	.word	0x000018f5
    1f00:	00002e95 	.word	0x00002e95
    1f04:	00013c44 	.word	0x00013c44
    1f08:	0000efc9 	.word	0x0000efc9
    1f0c:	00013dd8 	.word	0x00013dd8
    1f10:	0000effd 	.word	0x0000effd
    1f14:	00013e00 	.word	0x00013e00
    1f18:	00013e1c 	.word	0x00013e1c
    1f1c:	00013e40 	.word	0x00013e40
    1f20:	00013e58 	.word	0x00013e58
    1f24:	00013e64 	.word	0x00013e64
    1f28:	00013e70 	.word	0x00013e70
    1f2c:	00014004 	.word	0x00014004
    1f30:	00013c70 	.word	0x00013c70
    1f34:	00013e88 	.word	0x00013e88
    1f38:	0000f0e5 	.word	0x0000f0e5
    1f3c:	000031f5 	.word	0x000031f5

00001f40 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1f40:	b580      	push	{r7, lr}
    1f42:	b082      	sub	sp, #8
    1f44:	af00      	add	r7, sp, #0
    1f46:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    1f48:	4b03      	ldr	r3, [pc, #12]	; (1f58 <m2m_wifi_handle_events+0x18>)
    1f4a:	4798      	blx	r3
    1f4c:	0003      	movs	r3, r0
}
    1f4e:	0018      	movs	r0, r3
    1f50:	46bd      	mov	sp, r7
    1f52:	b002      	add	sp, #8
    1f54:	bd80      	pop	{r7, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	000016e5 	.word	0x000016e5

00001f5c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    1f5c:	b590      	push	{r4, r7, lr}
    1f5e:	b087      	sub	sp, #28
    1f60:	af02      	add	r7, sp, #8
    1f62:	60f8      	str	r0, [r7, #12]
    1f64:	0008      	movs	r0, r1
    1f66:	0011      	movs	r1, r2
    1f68:	607b      	str	r3, [r7, #4]
    1f6a:	230b      	movs	r3, #11
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	1c02      	adds	r2, r0, #0
    1f70:	701a      	strb	r2, [r3, #0]
    1f72:	230a      	movs	r3, #10
    1f74:	18fb      	adds	r3, r7, r3
    1f76:	1c0a      	adds	r2, r1, #0
    1f78:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1f7a:	687c      	ldr	r4, [r7, #4]
    1f7c:	230a      	movs	r3, #10
    1f7e:	18fb      	adds	r3, r7, r3
    1f80:	781a      	ldrb	r2, [r3, #0]
    1f82:	230b      	movs	r3, #11
    1f84:	18fb      	adds	r3, r7, r3
    1f86:	7819      	ldrb	r1, [r3, #0]
    1f88:	68f8      	ldr	r0, [r7, #12]
    1f8a:	2300      	movs	r3, #0
    1f8c:	9301      	str	r3, [sp, #4]
    1f8e:	2320      	movs	r3, #32
    1f90:	18fb      	adds	r3, r7, r3
    1f92:	881b      	ldrh	r3, [r3, #0]
    1f94:	9300      	str	r3, [sp, #0]
    1f96:	0023      	movs	r3, r4
    1f98:	4c03      	ldr	r4, [pc, #12]	; (1fa8 <m2m_wifi_connect+0x4c>)
    1f9a:	47a0      	blx	r4
    1f9c:	0003      	movs	r3, r0
}
    1f9e:	0018      	movs	r0, r3
    1fa0:	46bd      	mov	sp, r7
    1fa2:	b005      	add	sp, #20
    1fa4:	bd90      	pop	{r4, r7, pc}
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	00001fad 	.word	0x00001fad

00001fac <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1fac:	b5b0      	push	{r4, r5, r7, lr}
    1fae:	b0aa      	sub	sp, #168	; 0xa8
    1fb0:	af04      	add	r7, sp, #16
    1fb2:	60f8      	str	r0, [r7, #12]
    1fb4:	0008      	movs	r0, r1
    1fb6:	0011      	movs	r1, r2
    1fb8:	607b      	str	r3, [r7, #4]
    1fba:	230b      	movs	r3, #11
    1fbc:	18fb      	adds	r3, r7, r3
    1fbe:	1c02      	adds	r2, r0, #0
    1fc0:	701a      	strb	r2, [r3, #0]
    1fc2:	230a      	movs	r3, #10
    1fc4:	18fb      	adds	r3, r7, r3
    1fc6:	1c0a      	adds	r2, r1, #0
    1fc8:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    1fca:	2397      	movs	r3, #151	; 0x97
    1fcc:	18fb      	adds	r3, r7, r3
    1fce:	2200      	movs	r2, #0
    1fd0:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1fd2:	230a      	movs	r3, #10
    1fd4:	18fb      	adds	r3, r7, r3
    1fd6:	781b      	ldrb	r3, [r3, #0]
    1fd8:	2b01      	cmp	r3, #1
    1fda:	d100      	bne.n	1fde <m2m_wifi_connect_sc+0x32>
    1fdc:	e083      	b.n	20e6 <STACK_SIZE+0xe6>
	{
		if(pvAuthInfo == NULL)
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d111      	bne.n	2008 <STACK_SIZE+0x8>
		{
			M2M_ERR("Key is not valid\n");
    1fe4:	4adb      	ldr	r2, [pc, #876]	; (2354 <STACK_SIZE+0x354>)
    1fe6:	49dc      	ldr	r1, [pc, #880]	; (2358 <STACK_SIZE+0x358>)
    1fe8:	4bdc      	ldr	r3, [pc, #880]	; (235c <STACK_SIZE+0x35c>)
    1fea:	0018      	movs	r0, r3
    1fec:	4bdc      	ldr	r3, [pc, #880]	; (2360 <STACK_SIZE+0x360>)
    1fee:	4798      	blx	r3
    1ff0:	4bdc      	ldr	r3, [pc, #880]	; (2364 <STACK_SIZE+0x364>)
    1ff2:	0018      	movs	r0, r3
    1ff4:	4bdc      	ldr	r3, [pc, #880]	; (2368 <STACK_SIZE+0x368>)
    1ff6:	4798      	blx	r3
    1ff8:	200d      	movs	r0, #13
    1ffa:	4bdc      	ldr	r3, [pc, #880]	; (236c <STACK_SIZE+0x36c>)
    1ffc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ffe:	2397      	movs	r3, #151	; 0x97
    2000:	18fb      	adds	r3, r7, r3
    2002:	22f4      	movs	r2, #244	; 0xf4
    2004:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2006:	e1f5      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2008:	230a      	movs	r3, #10
    200a:	18fb      	adds	r3, r7, r3
    200c:	781b      	ldrb	r3, [r3, #0]
    200e:	2b02      	cmp	r3, #2
    2010:	d169      	bne.n	20e6 <STACK_SIZE+0xe6>
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	0018      	movs	r0, r3
    2016:	4bd6      	ldr	r3, [pc, #856]	; (2370 <STACK_SIZE+0x370>)
    2018:	4798      	blx	r3
    201a:	0003      	movs	r3, r0
    201c:	2b40      	cmp	r3, #64	; 0x40
    201e:	d162      	bne.n	20e6 <STACK_SIZE+0xe6>
		{
			uint8 i = 0;
    2020:	2396      	movs	r3, #150	; 0x96
    2022:	18fb      	adds	r3, r7, r3
    2024:	2200      	movs	r2, #0
    2026:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	2290      	movs	r2, #144	; 0x90
    202c:	18ba      	adds	r2, r7, r2
    202e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    2030:	e054      	b.n	20dc <STACK_SIZE+0xdc>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    2032:	2396      	movs	r3, #150	; 0x96
    2034:	18fb      	adds	r3, r7, r3
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	2290      	movs	r2, #144	; 0x90
    203a:	18ba      	adds	r2, r7, r2
    203c:	6812      	ldr	r2, [r2, #0]
    203e:	18d3      	adds	r3, r2, r3
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	2b2f      	cmp	r3, #47	; 0x2f
    2044:	d931      	bls.n	20aa <STACK_SIZE+0xaa>
    2046:	2396      	movs	r3, #150	; 0x96
    2048:	18fb      	adds	r3, r7, r3
    204a:	781b      	ldrb	r3, [r3, #0]
    204c:	2290      	movs	r2, #144	; 0x90
    204e:	18ba      	adds	r2, r7, r2
    2050:	6812      	ldr	r2, [r2, #0]
    2052:	18d3      	adds	r3, r2, r3
    2054:	781b      	ldrb	r3, [r3, #0]
    2056:	2b39      	cmp	r3, #57	; 0x39
    2058:	d909      	bls.n	206e <STACK_SIZE+0x6e>
    205a:	2396      	movs	r3, #150	; 0x96
    205c:	18fb      	adds	r3, r7, r3
    205e:	781b      	ldrb	r3, [r3, #0]
    2060:	2290      	movs	r2, #144	; 0x90
    2062:	18ba      	adds	r2, r7, r2
    2064:	6812      	ldr	r2, [r2, #0]
    2066:	18d3      	adds	r3, r2, r3
    2068:	781b      	ldrb	r3, [r3, #0]
    206a:	2b40      	cmp	r3, #64	; 0x40
    206c:	d91d      	bls.n	20aa <STACK_SIZE+0xaa>
    206e:	2396      	movs	r3, #150	; 0x96
    2070:	18fb      	adds	r3, r7, r3
    2072:	781b      	ldrb	r3, [r3, #0]
    2074:	2290      	movs	r2, #144	; 0x90
    2076:	18ba      	adds	r2, r7, r2
    2078:	6812      	ldr	r2, [r2, #0]
    207a:	18d3      	adds	r3, r2, r3
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	2b46      	cmp	r3, #70	; 0x46
    2080:	d909      	bls.n	2096 <STACK_SIZE+0x96>
    2082:	2396      	movs	r3, #150	; 0x96
    2084:	18fb      	adds	r3, r7, r3
    2086:	781b      	ldrb	r3, [r3, #0]
    2088:	2290      	movs	r2, #144	; 0x90
    208a:	18ba      	adds	r2, r7, r2
    208c:	6812      	ldr	r2, [r2, #0]
    208e:	18d3      	adds	r3, r2, r3
    2090:	781b      	ldrb	r3, [r3, #0]
    2092:	2b60      	cmp	r3, #96	; 0x60
    2094:	d909      	bls.n	20aa <STACK_SIZE+0xaa>
    2096:	2396      	movs	r3, #150	; 0x96
    2098:	18fb      	adds	r3, r7, r3
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	2290      	movs	r2, #144	; 0x90
    209e:	18ba      	adds	r2, r7, r2
    20a0:	6812      	ldr	r2, [r2, #0]
    20a2:	18d3      	adds	r3, r2, r3
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	2b66      	cmp	r3, #102	; 0x66
    20a8:	d911      	bls.n	20ce <STACK_SIZE+0xce>
				{
					M2M_ERR("Invalid Key\n");
    20aa:	4ab2      	ldr	r2, [pc, #712]	; (2374 <STACK_SIZE+0x374>)
    20ac:	49aa      	ldr	r1, [pc, #680]	; (2358 <STACK_SIZE+0x358>)
    20ae:	4bab      	ldr	r3, [pc, #684]	; (235c <STACK_SIZE+0x35c>)
    20b0:	0018      	movs	r0, r3
    20b2:	4bab      	ldr	r3, [pc, #684]	; (2360 <STACK_SIZE+0x360>)
    20b4:	4798      	blx	r3
    20b6:	4bb0      	ldr	r3, [pc, #704]	; (2378 <STACK_SIZE+0x378>)
    20b8:	0018      	movs	r0, r3
    20ba:	4bab      	ldr	r3, [pc, #684]	; (2368 <STACK_SIZE+0x368>)
    20bc:	4798      	blx	r3
    20be:	200d      	movs	r0, #13
    20c0:	4baa      	ldr	r3, [pc, #680]	; (236c <STACK_SIZE+0x36c>)
    20c2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    20c4:	2397      	movs	r3, #151	; 0x97
    20c6:	18fb      	adds	r3, r7, r3
    20c8:	22f4      	movs	r2, #244	; 0xf4
    20ca:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    20cc:	e192      	b.n	23f4 <STACK_SIZE+0x3f4>
				}
				i++;
    20ce:	2396      	movs	r3, #150	; 0x96
    20d0:	18fb      	adds	r3, r7, r3
    20d2:	781a      	ldrb	r2, [r3, #0]
    20d4:	2396      	movs	r3, #150	; 0x96
    20d6:	18fb      	adds	r3, r7, r3
    20d8:	3201      	adds	r2, #1
    20da:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    20dc:	2396      	movs	r3, #150	; 0x96
    20de:	18fb      	adds	r3, r7, r3
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	2b3f      	cmp	r3, #63	; 0x3f
    20e4:	d9a5      	bls.n	2032 <STACK_SIZE+0x32>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    20e6:	230b      	movs	r3, #11
    20e8:	18fb      	adds	r3, r7, r3
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d004      	beq.n	20fa <STACK_SIZE+0xfa>
    20f0:	230b      	movs	r3, #11
    20f2:	18fb      	adds	r3, r7, r3
    20f4:	781b      	ldrb	r3, [r3, #0]
    20f6:	2b20      	cmp	r3, #32
    20f8:	d911      	bls.n	211e <STACK_SIZE+0x11e>
	{
		M2M_ERR("SSID LEN INVALID\n");
    20fa:	4aa0      	ldr	r2, [pc, #640]	; (237c <STACK_SIZE+0x37c>)
    20fc:	4996      	ldr	r1, [pc, #600]	; (2358 <STACK_SIZE+0x358>)
    20fe:	4b97      	ldr	r3, [pc, #604]	; (235c <STACK_SIZE+0x35c>)
    2100:	0018      	movs	r0, r3
    2102:	4b97      	ldr	r3, [pc, #604]	; (2360 <STACK_SIZE+0x360>)
    2104:	4798      	blx	r3
    2106:	4b9e      	ldr	r3, [pc, #632]	; (2380 <STACK_SIZE+0x380>)
    2108:	0018      	movs	r0, r3
    210a:	4b97      	ldr	r3, [pc, #604]	; (2368 <STACK_SIZE+0x368>)
    210c:	4798      	blx	r3
    210e:	200d      	movs	r0, #13
    2110:	4b96      	ldr	r3, [pc, #600]	; (236c <STACK_SIZE+0x36c>)
    2112:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2114:	2397      	movs	r3, #151	; 0x97
    2116:	18fb      	adds	r3, r7, r3
    2118:	22f4      	movs	r2, #244	; 0xf4
    211a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    211c:	e16a      	b.n	23f4 <STACK_SIZE+0x3f4>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    211e:	23a8      	movs	r3, #168	; 0xa8
    2120:	18fb      	adds	r3, r7, r3
    2122:	881b      	ldrh	r3, [r3, #0]
    2124:	2b00      	cmp	r3, #0
    2126:	d004      	beq.n	2132 <STACK_SIZE+0x132>
    2128:	23a8      	movs	r3, #168	; 0xa8
    212a:	18fb      	adds	r3, r7, r3
    212c:	881b      	ldrh	r3, [r3, #0]
    212e:	2b0e      	cmp	r3, #14
    2130:	d916      	bls.n	2160 <STACK_SIZE+0x160>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2132:	23a8      	movs	r3, #168	; 0xa8
    2134:	18fb      	adds	r3, r7, r3
    2136:	881b      	ldrh	r3, [r3, #0]
    2138:	2bff      	cmp	r3, #255	; 0xff
    213a:	d011      	beq.n	2160 <STACK_SIZE+0x160>
		{
			M2M_ERR("CH INVALID\n");
    213c:	4a91      	ldr	r2, [pc, #580]	; (2384 <STACK_SIZE+0x384>)
    213e:	4986      	ldr	r1, [pc, #536]	; (2358 <STACK_SIZE+0x358>)
    2140:	4b86      	ldr	r3, [pc, #536]	; (235c <STACK_SIZE+0x35c>)
    2142:	0018      	movs	r0, r3
    2144:	4b86      	ldr	r3, [pc, #536]	; (2360 <STACK_SIZE+0x360>)
    2146:	4798      	blx	r3
    2148:	4b8f      	ldr	r3, [pc, #572]	; (2388 <STACK_SIZE+0x388>)
    214a:	0018      	movs	r0, r3
    214c:	4b86      	ldr	r3, [pc, #536]	; (2368 <STACK_SIZE+0x368>)
    214e:	4798      	blx	r3
    2150:	200d      	movs	r0, #13
    2152:	4b86      	ldr	r3, [pc, #536]	; (236c <STACK_SIZE+0x36c>)
    2154:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2156:	2397      	movs	r3, #151	; 0x97
    2158:	18fb      	adds	r3, r7, r3
    215a:	22f4      	movs	r2, #244	; 0xf4
    215c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    215e:	e149      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2160:	230b      	movs	r3, #11
    2162:	18fb      	adds	r3, r7, r3
    2164:	781a      	ldrb	r2, [r3, #0]
    2166:	68f9      	ldr	r1, [r7, #12]
    2168:	2314      	movs	r3, #20
    216a:	18fb      	adds	r3, r7, r3
    216c:	3346      	adds	r3, #70	; 0x46
    216e:	0018      	movs	r0, r3
    2170:	4b86      	ldr	r3, [pc, #536]	; (238c <STACK_SIZE+0x38c>)
    2172:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2174:	230b      	movs	r3, #11
    2176:	18fb      	adds	r3, r7, r3
    2178:	781b      	ldrb	r3, [r3, #0]
    217a:	2214      	movs	r2, #20
    217c:	18ba      	adds	r2, r7, r2
    217e:	2146      	movs	r1, #70	; 0x46
    2180:	18d3      	adds	r3, r2, r3
    2182:	185b      	adds	r3, r3, r1
    2184:	2200      	movs	r2, #0
    2186:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    2188:	2314      	movs	r3, #20
    218a:	18fb      	adds	r3, r7, r3
    218c:	22a8      	movs	r2, #168	; 0xa8
    218e:	18ba      	adds	r2, r7, r2
    2190:	2144      	movs	r1, #68	; 0x44
    2192:	8812      	ldrh	r2, [r2, #0]
    2194:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2196:	23ac      	movs	r3, #172	; 0xac
    2198:	18fb      	adds	r3, r7, r3
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	1e5a      	subs	r2, r3, #1
    219e:	4193      	sbcs	r3, r2
    21a0:	b2db      	uxtb	r3, r3
    21a2:	0019      	movs	r1, r3
    21a4:	2314      	movs	r3, #20
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	2267      	movs	r2, #103	; 0x67
    21aa:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    21ac:	2314      	movs	r3, #20
    21ae:	18fb      	adds	r3, r7, r3
    21b0:	228c      	movs	r2, #140	; 0x8c
    21b2:	18ba      	adds	r2, r7, r2
    21b4:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    21b6:	238c      	movs	r3, #140	; 0x8c
    21b8:	18fb      	adds	r3, r7, r3
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	220a      	movs	r2, #10
    21be:	18ba      	adds	r2, r7, r2
    21c0:	2141      	movs	r1, #65	; 0x41
    21c2:	7812      	ldrb	r2, [r2, #0]
    21c4:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    21c6:	230a      	movs	r3, #10
    21c8:	18fb      	adds	r3, r7, r3
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	2b03      	cmp	r3, #3
    21ce:	d000      	beq.n	21d2 <STACK_SIZE+0x1d2>
    21d0:	e07b      	b.n	22ca <STACK_SIZE+0x2ca>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	2288      	movs	r2, #136	; 0x88
    21d6:	18ba      	adds	r2, r7, r2
    21d8:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    21da:	238c      	movs	r3, #140	; 0x8c
    21dc:	18fb      	adds	r3, r7, r3
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	2284      	movs	r2, #132	; 0x84
    21e2:	18ba      	adds	r2, r7, r2
    21e4:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    21e6:	2388      	movs	r3, #136	; 0x88
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	681b      	ldr	r3, [r3, #0]
    21ec:	781b      	ldrb	r3, [r3, #0]
    21ee:	3b01      	subs	r3, #1
    21f0:	b2da      	uxtb	r2, r3
    21f2:	2384      	movs	r3, #132	; 0x84
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	681b      	ldr	r3, [r3, #0]
    21f8:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    21fa:	2384      	movs	r3, #132	; 0x84
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	681b      	ldr	r3, [r3, #0]
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	2b03      	cmp	r3, #3
    2204:	d917      	bls.n	2236 <STACK_SIZE+0x236>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    2206:	4a62      	ldr	r2, [pc, #392]	; (2390 <STACK_SIZE+0x390>)
    2208:	4953      	ldr	r1, [pc, #332]	; (2358 <STACK_SIZE+0x358>)
    220a:	4b54      	ldr	r3, [pc, #336]	; (235c <STACK_SIZE+0x35c>)
    220c:	0018      	movs	r0, r3
    220e:	4b54      	ldr	r3, [pc, #336]	; (2360 <STACK_SIZE+0x360>)
    2210:	4798      	blx	r3
    2212:	2384      	movs	r3, #132	; 0x84
    2214:	18fb      	adds	r3, r7, r3
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	001a      	movs	r2, r3
    221c:	4b5d      	ldr	r3, [pc, #372]	; (2394 <STACK_SIZE+0x394>)
    221e:	0011      	movs	r1, r2
    2220:	0018      	movs	r0, r3
    2222:	4b4f      	ldr	r3, [pc, #316]	; (2360 <STACK_SIZE+0x360>)
    2224:	4798      	blx	r3
    2226:	200d      	movs	r0, #13
    2228:	4b50      	ldr	r3, [pc, #320]	; (236c <STACK_SIZE+0x36c>)
    222a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    222c:	2397      	movs	r3, #151	; 0x97
    222e:	18fb      	adds	r3, r7, r3
    2230:	22f4      	movs	r2, #244	; 0xf4
    2232:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2234:	e0de      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2236:	2388      	movs	r3, #136	; 0x88
    2238:	18fb      	adds	r3, r7, r3
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	785b      	ldrb	r3, [r3, #1]
    223e:	3b01      	subs	r3, #1
    2240:	b2da      	uxtb	r2, r3
    2242:	2384      	movs	r3, #132	; 0x84
    2244:	18fb      	adds	r3, r7, r3
    2246:	681b      	ldr	r3, [r3, #0]
    2248:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    224a:	2384      	movs	r3, #132	; 0x84
    224c:	18fb      	adds	r3, r7, r3
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	785b      	ldrb	r3, [r3, #1]
    2252:	2b0a      	cmp	r3, #10
    2254:	d01e      	beq.n	2294 <STACK_SIZE+0x294>
    2256:	2384      	movs	r3, #132	; 0x84
    2258:	18fb      	adds	r3, r7, r3
    225a:	681b      	ldr	r3, [r3, #0]
    225c:	785b      	ldrb	r3, [r3, #1]
    225e:	2b1a      	cmp	r3, #26
    2260:	d018      	beq.n	2294 <STACK_SIZE+0x294>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2262:	2396      	movs	r3, #150	; 0x96
    2264:	009a      	lsls	r2, r3, #2
    2266:	493c      	ldr	r1, [pc, #240]	; (2358 <STACK_SIZE+0x358>)
    2268:	4b3c      	ldr	r3, [pc, #240]	; (235c <STACK_SIZE+0x35c>)
    226a:	0018      	movs	r0, r3
    226c:	4b3c      	ldr	r3, [pc, #240]	; (2360 <STACK_SIZE+0x360>)
    226e:	4798      	blx	r3
    2270:	2384      	movs	r3, #132	; 0x84
    2272:	18fb      	adds	r3, r7, r3
    2274:	681b      	ldr	r3, [r3, #0]
    2276:	785b      	ldrb	r3, [r3, #1]
    2278:	001a      	movs	r2, r3
    227a:	4b47      	ldr	r3, [pc, #284]	; (2398 <STACK_SIZE+0x398>)
    227c:	0011      	movs	r1, r2
    227e:	0018      	movs	r0, r3
    2280:	4b37      	ldr	r3, [pc, #220]	; (2360 <STACK_SIZE+0x360>)
    2282:	4798      	blx	r3
    2284:	200d      	movs	r0, #13
    2286:	4b39      	ldr	r3, [pc, #228]	; (236c <STACK_SIZE+0x36c>)
    2288:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    228a:	2397      	movs	r3, #151	; 0x97
    228c:	18fb      	adds	r3, r7, r3
    228e:	22f4      	movs	r2, #244	; 0xf4
    2290:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2292:	e0af      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    2294:	2384      	movs	r3, #132	; 0x84
    2296:	18fb      	adds	r3, r7, r3
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	1c98      	adds	r0, r3, #2
    229c:	2388      	movs	r3, #136	; 0x88
    229e:	18fb      	adds	r3, r7, r3
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	1c99      	adds	r1, r3, #2
    22a4:	2388      	movs	r3, #136	; 0x88
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	785b      	ldrb	r3, [r3, #1]
    22ac:	001a      	movs	r2, r3
    22ae:	4b37      	ldr	r3, [pc, #220]	; (238c <STACK_SIZE+0x38c>)
    22b0:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    22b2:	2388      	movs	r3, #136	; 0x88
    22b4:	18fb      	adds	r3, r7, r3
    22b6:	681b      	ldr	r3, [r3, #0]
    22b8:	785b      	ldrb	r3, [r3, #1]
    22ba:	001a      	movs	r2, r3
    22bc:	2384      	movs	r3, #132	; 0x84
    22be:	18fb      	adds	r3, r7, r3
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	189b      	adds	r3, r3, r2
    22c4:	2200      	movs	r2, #0
    22c6:	709a      	strb	r2, [r3, #2]
    22c8:	e083      	b.n	23d2 <STACK_SIZE+0x3d2>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    22ca:	230a      	movs	r3, #10
    22cc:	18fb      	adds	r3, r7, r3
    22ce:	781b      	ldrb	r3, [r3, #0]
    22d0:	2b02      	cmp	r3, #2
    22d2:	d130      	bne.n	2336 <STACK_SIZE+0x336>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    22d4:	2382      	movs	r3, #130	; 0x82
    22d6:	18fc      	adds	r4, r7, r3
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	0018      	movs	r0, r3
    22dc:	4b24      	ldr	r3, [pc, #144]	; (2370 <STACK_SIZE+0x370>)
    22de:	4798      	blx	r3
    22e0:	0003      	movs	r3, r0
    22e2:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    22e4:	2382      	movs	r3, #130	; 0x82
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	881b      	ldrh	r3, [r3, #0]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d004      	beq.n	22f8 <STACK_SIZE+0x2f8>
    22ee:	2382      	movs	r3, #130	; 0x82
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	881b      	ldrh	r3, [r3, #0]
    22f4:	2b40      	cmp	r3, #64	; 0x40
    22f6:	d911      	bls.n	231c <STACK_SIZE+0x31c>
		{
			M2M_ERR("Incorrect PSK key length\n");
    22f8:	4a28      	ldr	r2, [pc, #160]	; (239c <STACK_SIZE+0x39c>)
    22fa:	4917      	ldr	r1, [pc, #92]	; (2358 <STACK_SIZE+0x358>)
    22fc:	4b17      	ldr	r3, [pc, #92]	; (235c <STACK_SIZE+0x35c>)
    22fe:	0018      	movs	r0, r3
    2300:	4b17      	ldr	r3, [pc, #92]	; (2360 <STACK_SIZE+0x360>)
    2302:	4798      	blx	r3
    2304:	4b26      	ldr	r3, [pc, #152]	; (23a0 <STACK_SIZE+0x3a0>)
    2306:	0018      	movs	r0, r3
    2308:	4b17      	ldr	r3, [pc, #92]	; (2368 <STACK_SIZE+0x368>)
    230a:	4798      	blx	r3
    230c:	200d      	movs	r0, #13
    230e:	4b17      	ldr	r3, [pc, #92]	; (236c <STACK_SIZE+0x36c>)
    2310:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2312:	2397      	movs	r3, #151	; 0x97
    2314:	18fb      	adds	r3, r7, r3
    2316:	22f4      	movs	r2, #244	; 0xf4
    2318:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    231a:	e06b      	b.n	23f4 <STACK_SIZE+0x3f4>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    231c:	238c      	movs	r3, #140	; 0x8c
    231e:	18fb      	adds	r3, r7, r3
    2320:	6818      	ldr	r0, [r3, #0]
    2322:	2382      	movs	r3, #130	; 0x82
    2324:	18fb      	adds	r3, r7, r3
    2326:	881b      	ldrh	r3, [r3, #0]
    2328:	3301      	adds	r3, #1
    232a:	001a      	movs	r2, r3
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	0019      	movs	r1, r3
    2330:	4b16      	ldr	r3, [pc, #88]	; (238c <STACK_SIZE+0x38c>)
    2332:	4798      	blx	r3
    2334:	e04d      	b.n	23d2 <STACK_SIZE+0x3d2>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    2336:	230a      	movs	r3, #10
    2338:	18fb      	adds	r3, r7, r3
    233a:	781b      	ldrb	r3, [r3, #0]
    233c:	2b04      	cmp	r3, #4
    233e:	d131      	bne.n	23a4 <STACK_SIZE+0x3a4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2340:	238c      	movs	r3, #140	; 0x8c
    2342:	18fb      	adds	r3, r7, r3
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	6879      	ldr	r1, [r7, #4]
    2348:	223e      	movs	r2, #62	; 0x3e
    234a:	0018      	movs	r0, r3
    234c:	4b0f      	ldr	r3, [pc, #60]	; (238c <STACK_SIZE+0x38c>)
    234e:	4798      	blx	r3
    2350:	e03f      	b.n	23d2 <STACK_SIZE+0x3d2>
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	0000021b 	.word	0x0000021b
    2358:	00014014 	.word	0x00014014
    235c:	00013c70 	.word	0x00013c70
    2360:	0000efc9 	.word	0x0000efc9
    2364:	00013ea4 	.word	0x00013ea4
    2368:	0000f0e5 	.word	0x0000f0e5
    236c:	0000effd 	.word	0x0000effd
    2370:	00000c5f 	.word	0x00000c5f
    2374:	00000227 	.word	0x00000227
    2378:	00013eb8 	.word	0x00013eb8
    237c:	00000231 	.word	0x00000231
    2380:	00013ec4 	.word	0x00013ec4
    2384:	0000023a 	.word	0x0000023a
    2388:	00013ed8 	.word	0x00013ed8
    238c:	00000be5 	.word	0x00000be5
    2390:	00000251 	.word	0x00000251
    2394:	00013ee4 	.word	0x00013ee4
    2398:	00013f00 	.word	0x00013f00
    239c:	00000267 	.word	0x00000267
    23a0:	00013f1c 	.word	0x00013f1c
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    23a4:	230a      	movs	r3, #10
    23a6:	18fb      	adds	r3, r7, r3
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	2b01      	cmp	r3, #1
    23ac:	d011      	beq.n	23d2 <STACK_SIZE+0x3d2>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    23ae:	4a15      	ldr	r2, [pc, #84]	; (2404 <STACK_SIZE+0x404>)
    23b0:	4915      	ldr	r1, [pc, #84]	; (2408 <STACK_SIZE+0x408>)
    23b2:	4b16      	ldr	r3, [pc, #88]	; (240c <STACK_SIZE+0x40c>)
    23b4:	0018      	movs	r0, r3
    23b6:	4b16      	ldr	r3, [pc, #88]	; (2410 <STACK_SIZE+0x410>)
    23b8:	4798      	blx	r3
    23ba:	4b16      	ldr	r3, [pc, #88]	; (2414 <STACK_SIZE+0x414>)
    23bc:	0018      	movs	r0, r3
    23be:	4b16      	ldr	r3, [pc, #88]	; (2418 <STACK_SIZE+0x418>)
    23c0:	4798      	blx	r3
    23c2:	200d      	movs	r0, #13
    23c4:	4b15      	ldr	r3, [pc, #84]	; (241c <STACK_SIZE+0x41c>)
    23c6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    23c8:	2397      	movs	r3, #151	; 0x97
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	22f4      	movs	r2, #244	; 0xf4
    23ce:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    23d0:	e010      	b.n	23f4 <STACK_SIZE+0x3f4>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    23d2:	2397      	movs	r3, #151	; 0x97
    23d4:	18fc      	adds	r4, r7, r3
    23d6:	2314      	movs	r3, #20
    23d8:	18fa      	adds	r2, r7, r3
    23da:	2300      	movs	r3, #0
    23dc:	9302      	str	r3, [sp, #8]
    23de:	2300      	movs	r3, #0
    23e0:	9301      	str	r3, [sp, #4]
    23e2:	2300      	movs	r3, #0
    23e4:	9300      	str	r3, [sp, #0]
    23e6:	236c      	movs	r3, #108	; 0x6c
    23e8:	2128      	movs	r1, #40	; 0x28
    23ea:	2001      	movs	r0, #1
    23ec:	4d0c      	ldr	r5, [pc, #48]	; (2420 <STACK_SIZE+0x420>)
    23ee:	47a8      	blx	r5
    23f0:	0003      	movs	r3, r0
    23f2:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    23f4:	2397      	movs	r3, #151	; 0x97
    23f6:	18fb      	adds	r3, r7, r3
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	b25b      	sxtb	r3, r3
}
    23fc:	0018      	movs	r0, r3
    23fe:	46bd      	mov	sp, r7
    2400:	b026      	add	sp, #152	; 0x98
    2402:	bdb0      	pop	{r4, r5, r7, pc}
    2404:	00000277 	.word	0x00000277
    2408:	00014014 	.word	0x00014014
    240c:	00013c70 	.word	0x00013c70
    2410:	0000efc9 	.word	0x0000efc9
    2414:	00013f38 	.word	0x00013f38
    2418:	0000f0e5 	.word	0x0000f0e5
    241c:	0000effd 	.word	0x0000effd
    2420:	00000e81 	.word	0x00000e81

00002424 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    2424:	b580      	push	{r7, lr}
    2426:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    2428:	2300      	movs	r3, #0
}
    242a:	0018      	movs	r0, r3
    242c:	46bd      	mov	sp, r7
    242e:	bd80      	pop	{r7, pc}

00002430 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2430:	b590      	push	{r4, r7, lr}
    2432:	b087      	sub	sp, #28
    2434:	af00      	add	r7, sp, #0
    2436:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2438:	2317      	movs	r3, #23
    243a:	18fb      	adds	r3, r7, r3
    243c:	2200      	movs	r2, #0
    243e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2440:	687b      	ldr	r3, [r7, #4]
    2442:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2444:	693b      	ldr	r3, [r7, #16]
    2446:	2280      	movs	r2, #128	; 0x80
    2448:	0052      	lsls	r2, r2, #1
    244a:	4313      	orrs	r3, r2
    244c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    244e:	693a      	ldr	r2, [r7, #16]
    2450:	23a5      	movs	r3, #165	; 0xa5
    2452:	015b      	lsls	r3, r3, #5
    2454:	0011      	movs	r1, r2
    2456:	0018      	movs	r0, r3
    2458:	4b12      	ldr	r3, [pc, #72]	; (24a4 <chip_apply_conf+0x74>)
    245a:	4798      	blx	r3
		if(val32 != 0) {		
    245c:	693b      	ldr	r3, [r7, #16]
    245e:	2b00      	cmp	r3, #0
    2460:	d018      	beq.n	2494 <chip_apply_conf+0x64>
			uint32 reg = 0;
    2462:	2300      	movs	r3, #0
    2464:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2466:	2317      	movs	r3, #23
    2468:	18fc      	adds	r4, r7, r3
    246a:	230c      	movs	r3, #12
    246c:	18fa      	adds	r2, r7, r3
    246e:	23a5      	movs	r3, #165	; 0xa5
    2470:	015b      	lsls	r3, r3, #5
    2472:	0011      	movs	r1, r2
    2474:	0018      	movs	r0, r3
    2476:	4b0c      	ldr	r3, [pc, #48]	; (24a8 <chip_apply_conf+0x78>)
    2478:	4798      	blx	r3
    247a:	0003      	movs	r3, r0
    247c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    247e:	2317      	movs	r3, #23
    2480:	18fb      	adds	r3, r7, r3
    2482:	781b      	ldrb	r3, [r3, #0]
    2484:	b25b      	sxtb	r3, r3
    2486:	2b00      	cmp	r3, #0
    2488:	d1e1      	bne.n	244e <chip_apply_conf+0x1e>
				if(reg == val32)
    248a:	68fa      	ldr	r2, [r7, #12]
    248c:	693b      	ldr	r3, [r7, #16]
    248e:	429a      	cmp	r2, r3
    2490:	d002      	beq.n	2498 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    2492:	e7dc      	b.n	244e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    2494:	46c0      	nop			; (mov r8, r8)
    2496:	e000      	b.n	249a <chip_apply_conf+0x6a>
					break;
    2498:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    249a:	2300      	movs	r3, #0
}
    249c:	0018      	movs	r0, r3
    249e:	46bd      	mov	sp, r7
    24a0:	b007      	add	sp, #28
    24a2:	bd90      	pop	{r4, r7, pc}
    24a4:	00002c81 	.word	0x00002c81
    24a8:	00002c5d 	.word	0x00002c5d

000024ac <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    24ac:	b590      	push	{r4, r7, lr}
    24ae:	b083      	sub	sp, #12
    24b0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    24b2:	2300      	movs	r3, #0
    24b4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    24b6:	1dfb      	adds	r3, r7, #7
    24b8:	2200      	movs	r2, #0
    24ba:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    24bc:	1dfc      	adds	r4, r7, #7
    24be:	003b      	movs	r3, r7
    24c0:	4a24      	ldr	r2, [pc, #144]	; (2554 <enable_interrupts+0xa8>)
    24c2:	0019      	movs	r1, r3
    24c4:	0010      	movs	r0, r2
    24c6:	4b24      	ldr	r3, [pc, #144]	; (2558 <enable_interrupts+0xac>)
    24c8:	4798      	blx	r3
    24ca:	0003      	movs	r3, r0
    24cc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    24ce:	1dfb      	adds	r3, r7, #7
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	b25b      	sxtb	r3, r3
    24d4:	2b00      	cmp	r3, #0
    24d6:	d131      	bne.n	253c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    24d8:	683b      	ldr	r3, [r7, #0]
    24da:	2280      	movs	r2, #128	; 0x80
    24dc:	0052      	lsls	r2, r2, #1
    24de:	4313      	orrs	r3, r2
    24e0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    24e2:	683b      	ldr	r3, [r7, #0]
    24e4:	1dfc      	adds	r4, r7, #7
    24e6:	4a1b      	ldr	r2, [pc, #108]	; (2554 <enable_interrupts+0xa8>)
    24e8:	0019      	movs	r1, r3
    24ea:	0010      	movs	r0, r2
    24ec:	4b1b      	ldr	r3, [pc, #108]	; (255c <enable_interrupts+0xb0>)
    24ee:	4798      	blx	r3
    24f0:	0003      	movs	r3, r0
    24f2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    24f4:	1dfb      	adds	r3, r7, #7
    24f6:	781b      	ldrb	r3, [r3, #0]
    24f8:	b25b      	sxtb	r3, r3
    24fa:	2b00      	cmp	r3, #0
    24fc:	d120      	bne.n	2540 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    24fe:	1dfc      	adds	r4, r7, #7
    2500:	003a      	movs	r2, r7
    2502:	23d0      	movs	r3, #208	; 0xd0
    2504:	015b      	lsls	r3, r3, #5
    2506:	0011      	movs	r1, r2
    2508:	0018      	movs	r0, r3
    250a:	4b13      	ldr	r3, [pc, #76]	; (2558 <enable_interrupts+0xac>)
    250c:	4798      	blx	r3
    250e:	0003      	movs	r3, r0
    2510:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2512:	1dfb      	adds	r3, r7, #7
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	b25b      	sxtb	r3, r3
    2518:	2b00      	cmp	r3, #0
    251a:	d113      	bne.n	2544 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    251c:	683b      	ldr	r3, [r7, #0]
    251e:	2280      	movs	r2, #128	; 0x80
    2520:	0252      	lsls	r2, r2, #9
    2522:	4313      	orrs	r3, r2
    2524:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2526:	683a      	ldr	r2, [r7, #0]
    2528:	1dfc      	adds	r4, r7, #7
    252a:	23d0      	movs	r3, #208	; 0xd0
    252c:	015b      	lsls	r3, r3, #5
    252e:	0011      	movs	r1, r2
    2530:	0018      	movs	r0, r3
    2532:	4b0a      	ldr	r3, [pc, #40]	; (255c <enable_interrupts+0xb0>)
    2534:	4798      	blx	r3
    2536:	0003      	movs	r3, r0
    2538:	7023      	strb	r3, [r4, #0]
    253a:	e004      	b.n	2546 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    253c:	46c0      	nop			; (mov r8, r8)
    253e:	e002      	b.n	2546 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2540:	46c0      	nop			; (mov r8, r8)
    2542:	e000      	b.n	2546 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2544:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    2546:	1dfb      	adds	r3, r7, #7
    2548:	781b      	ldrb	r3, [r3, #0]
    254a:	b25b      	sxtb	r3, r3
}
    254c:	0018      	movs	r0, r3
    254e:	46bd      	mov	sp, r7
    2550:	b003      	add	sp, #12
    2552:	bd90      	pop	{r4, r7, pc}
    2554:	00001408 	.word	0x00001408
    2558:	00002c5d 	.word	0x00002c5d
    255c:	00002c81 	.word	0x00002c81

00002560 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2560:	b580      	push	{r7, lr}
    2562:	b082      	sub	sp, #8
    2564:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    2566:	4b32      	ldr	r3, [pc, #200]	; (2630 <nmi_get_chipid+0xd0>)
    2568:	681b      	ldr	r3, [r3, #0]
    256a:	2b00      	cmp	r3, #0
    256c:	d159      	bne.n	2622 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    256e:	4a30      	ldr	r2, [pc, #192]	; (2630 <nmi_get_chipid+0xd0>)
    2570:	2380      	movs	r3, #128	; 0x80
    2572:	015b      	lsls	r3, r3, #5
    2574:	0011      	movs	r1, r2
    2576:	0018      	movs	r0, r3
    2578:	4b2e      	ldr	r3, [pc, #184]	; (2634 <nmi_get_chipid+0xd4>)
    257a:	4798      	blx	r3
    257c:	1e03      	subs	r3, r0, #0
    257e:	d004      	beq.n	258a <nmi_get_chipid+0x2a>
			chipid = 0;
    2580:	4b2b      	ldr	r3, [pc, #172]	; (2630 <nmi_get_chipid+0xd0>)
    2582:	2200      	movs	r2, #0
    2584:	601a      	str	r2, [r3, #0]
			return 0;
    2586:	2300      	movs	r3, #0
    2588:	e04d      	b.n	2626 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    258a:	1d3b      	adds	r3, r7, #4
    258c:	4a2a      	ldr	r2, [pc, #168]	; (2638 <nmi_get_chipid+0xd8>)
    258e:	0019      	movs	r1, r3
    2590:	0010      	movs	r0, r2
    2592:	4b28      	ldr	r3, [pc, #160]	; (2634 <nmi_get_chipid+0xd4>)
    2594:	4798      	blx	r3
    2596:	1e03      	subs	r3, r0, #0
    2598:	d004      	beq.n	25a4 <nmi_get_chipid+0x44>
			chipid = 0;
    259a:	4b25      	ldr	r3, [pc, #148]	; (2630 <nmi_get_chipid+0xd0>)
    259c:	2200      	movs	r2, #0
    259e:	601a      	str	r2, [r3, #0]
			return 0;
    25a0:	2300      	movs	r3, #0
    25a2:	e040      	b.n	2626 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    25a4:	4b22      	ldr	r3, [pc, #136]	; (2630 <nmi_get_chipid+0xd0>)
    25a6:	681b      	ldr	r3, [r3, #0]
    25a8:	4a24      	ldr	r2, [pc, #144]	; (263c <nmi_get_chipid+0xdc>)
    25aa:	4293      	cmp	r3, r2
    25ac:	d106      	bne.n	25bc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    25ae:	687b      	ldr	r3, [r7, #4]
    25b0:	2b01      	cmp	r3, #1
    25b2:	d029      	beq.n	2608 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    25b4:	4b1e      	ldr	r3, [pc, #120]	; (2630 <nmi_get_chipid+0xd0>)
    25b6:	4a22      	ldr	r2, [pc, #136]	; (2640 <nmi_get_chipid+0xe0>)
    25b8:	601a      	str	r2, [r3, #0]
    25ba:	e025      	b.n	2608 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    25bc:	4b1c      	ldr	r3, [pc, #112]	; (2630 <nmi_get_chipid+0xd0>)
    25be:	681b      	ldr	r3, [r3, #0]
    25c0:	4a20      	ldr	r2, [pc, #128]	; (2644 <nmi_get_chipid+0xe4>)
    25c2:	4293      	cmp	r3, r2
    25c4:	d10d      	bne.n	25e2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	2b03      	cmp	r3, #3
    25ca:	d01d      	beq.n	2608 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	2b04      	cmp	r3, #4
    25d0:	d103      	bne.n	25da <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    25d2:	4b17      	ldr	r3, [pc, #92]	; (2630 <nmi_get_chipid+0xd0>)
    25d4:	4a1c      	ldr	r2, [pc, #112]	; (2648 <nmi_get_chipid+0xe8>)
    25d6:	601a      	str	r2, [r3, #0]
    25d8:	e016      	b.n	2608 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    25da:	4b15      	ldr	r3, [pc, #84]	; (2630 <nmi_get_chipid+0xd0>)
    25dc:	4a1b      	ldr	r2, [pc, #108]	; (264c <nmi_get_chipid+0xec>)
    25de:	601a      	str	r2, [r3, #0]
    25e0:	e012      	b.n	2608 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    25e2:	4b13      	ldr	r3, [pc, #76]	; (2630 <nmi_get_chipid+0xd0>)
    25e4:	681b      	ldr	r3, [r3, #0]
    25e6:	4a1a      	ldr	r2, [pc, #104]	; (2650 <nmi_get_chipid+0xf0>)
    25e8:	4293      	cmp	r3, r2
    25ea:	d10d      	bne.n	2608 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    25ec:	4a10      	ldr	r2, [pc, #64]	; (2630 <nmi_get_chipid+0xd0>)
    25ee:	23ec      	movs	r3, #236	; 0xec
    25f0:	039b      	lsls	r3, r3, #14
    25f2:	0011      	movs	r1, r2
    25f4:	0018      	movs	r0, r3
    25f6:	4b0f      	ldr	r3, [pc, #60]	; (2634 <nmi_get_chipid+0xd4>)
    25f8:	4798      	blx	r3
    25fa:	1e03      	subs	r3, r0, #0
    25fc:	d004      	beq.n	2608 <nmi_get_chipid+0xa8>
			chipid = 0;
    25fe:	4b0c      	ldr	r3, [pc, #48]	; (2630 <nmi_get_chipid+0xd0>)
    2600:	2200      	movs	r2, #0
    2602:	601a      	str	r2, [r3, #0]
			return 0;
    2604:	2300      	movs	r3, #0
    2606:	e00e      	b.n	2626 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    2608:	4b09      	ldr	r3, [pc, #36]	; (2630 <nmi_get_chipid+0xd0>)
    260a:	681b      	ldr	r3, [r3, #0]
    260c:	4a11      	ldr	r2, [pc, #68]	; (2654 <nmi_get_chipid+0xf4>)
    260e:	401a      	ands	r2, r3
    2610:	4b07      	ldr	r3, [pc, #28]	; (2630 <nmi_get_chipid+0xd0>)
    2612:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    2614:	4b06      	ldr	r3, [pc, #24]	; (2630 <nmi_get_chipid+0xd0>)
    2616:	681b      	ldr	r3, [r3, #0]
    2618:	22a0      	movs	r2, #160	; 0xa0
    261a:	02d2      	lsls	r2, r2, #11
    261c:	431a      	orrs	r2, r3
    261e:	4b04      	ldr	r3, [pc, #16]	; (2630 <nmi_get_chipid+0xd0>)
    2620:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    2622:	4b03      	ldr	r3, [pc, #12]	; (2630 <nmi_get_chipid+0xd0>)
    2624:	681b      	ldr	r3, [r3, #0]
}
    2626:	0018      	movs	r0, r3
    2628:	46bd      	mov	sp, r7
    262a:	b002      	add	sp, #8
    262c:	bd80      	pop	{r7, pc}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	20000238 	.word	0x20000238
    2634:	00002c5d 	.word	0x00002c5d
    2638:	000013f4 	.word	0x000013f4
    263c:	001002a0 	.word	0x001002a0
    2640:	001002a1 	.word	0x001002a1
    2644:	001002b0 	.word	0x001002b0
    2648:	001002b1 	.word	0x001002b1
    264c:	001002b2 	.word	0x001002b2
    2650:	001000f0 	.word	0x001000f0
    2654:	fff0ffff 	.word	0xfff0ffff

00002658 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2658:	b590      	push	{r4, r7, lr}
    265a:	b083      	sub	sp, #12
    265c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    265e:	1dfb      	adds	r3, r7, #7
    2660:	2200      	movs	r2, #0
    2662:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2664:	1dfc      	adds	r4, r7, #7
    2666:	003b      	movs	r3, r7
    2668:	0019      	movs	r1, r3
    266a:	2010      	movs	r0, #16
    266c:	4b2e      	ldr	r3, [pc, #184]	; (2728 <chip_sleep+0xd0>)
    266e:	4798      	blx	r3
    2670:	0003      	movs	r3, r0
    2672:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    2674:	1dfb      	adds	r3, r7, #7
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	b25b      	sxtb	r3, r3
    267a:	2b00      	cmp	r3, #0
    267c:	d145      	bne.n	270a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    267e:	683b      	ldr	r3, [r7, #0]
    2680:	2201      	movs	r2, #1
    2682:	4013      	ands	r3, r2
    2684:	d000      	beq.n	2688 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2686:	e7ed      	b.n	2664 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    2688:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    268a:	1dfc      	adds	r4, r7, #7
    268c:	003b      	movs	r3, r7
    268e:	0019      	movs	r1, r3
    2690:	2001      	movs	r0, #1
    2692:	4b25      	ldr	r3, [pc, #148]	; (2728 <chip_sleep+0xd0>)
    2694:	4798      	blx	r3
    2696:	0003      	movs	r3, r0
    2698:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    269a:	1dfb      	adds	r3, r7, #7
    269c:	781b      	ldrb	r3, [r3, #0]
    269e:	b25b      	sxtb	r3, r3
    26a0:	2b00      	cmp	r3, #0
    26a2:	d134      	bne.n	270e <chip_sleep+0xb6>
	if(reg & NBIT1)
    26a4:	683b      	ldr	r3, [r7, #0]
    26a6:	2202      	movs	r2, #2
    26a8:	4013      	ands	r3, r2
    26aa:	d010      	beq.n	26ce <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    26ac:	683b      	ldr	r3, [r7, #0]
    26ae:	2202      	movs	r2, #2
    26b0:	4393      	bics	r3, r2
    26b2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    26b4:	683b      	ldr	r3, [r7, #0]
    26b6:	1dfc      	adds	r4, r7, #7
    26b8:	0019      	movs	r1, r3
    26ba:	2001      	movs	r0, #1
    26bc:	4b1b      	ldr	r3, [pc, #108]	; (272c <chip_sleep+0xd4>)
    26be:	4798      	blx	r3
    26c0:	0003      	movs	r3, r0
    26c2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    26c4:	1dfb      	adds	r3, r7, #7
    26c6:	781b      	ldrb	r3, [r3, #0]
    26c8:	b25b      	sxtb	r3, r3
    26ca:	2b00      	cmp	r3, #0
    26cc:	d121      	bne.n	2712 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    26ce:	1dfc      	adds	r4, r7, #7
    26d0:	003b      	movs	r3, r7
    26d2:	0019      	movs	r1, r3
    26d4:	200b      	movs	r0, #11
    26d6:	4b14      	ldr	r3, [pc, #80]	; (2728 <chip_sleep+0xd0>)
    26d8:	4798      	blx	r3
    26da:	0003      	movs	r3, r0
    26dc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    26de:	1dfb      	adds	r3, r7, #7
    26e0:	781b      	ldrb	r3, [r3, #0]
    26e2:	b25b      	sxtb	r3, r3
    26e4:	2b00      	cmp	r3, #0
    26e6:	d116      	bne.n	2716 <chip_sleep+0xbe>
	if(reg & NBIT0)
    26e8:	683b      	ldr	r3, [r7, #0]
    26ea:	2201      	movs	r2, #1
    26ec:	4013      	ands	r3, r2
    26ee:	d013      	beq.n	2718 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	2201      	movs	r2, #1
    26f4:	4393      	bics	r3, r2
    26f6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    26f8:	683b      	ldr	r3, [r7, #0]
    26fa:	1dfc      	adds	r4, r7, #7
    26fc:	0019      	movs	r1, r3
    26fe:	200b      	movs	r0, #11
    2700:	4b0a      	ldr	r3, [pc, #40]	; (272c <chip_sleep+0xd4>)
    2702:	4798      	blx	r3
    2704:	0003      	movs	r3, r0
    2706:	7023      	strb	r3, [r4, #0]
    2708:	e006      	b.n	2718 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	e004      	b.n	2718 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	e002      	b.n	2718 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	e000      	b.n	2718 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2716:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    2718:	1dfb      	adds	r3, r7, #7
    271a:	781b      	ldrb	r3, [r3, #0]
    271c:	b25b      	sxtb	r3, r3
}
    271e:	0018      	movs	r0, r3
    2720:	46bd      	mov	sp, r7
    2722:	b003      	add	sp, #12
    2724:	bd90      	pop	{r4, r7, pc}
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	00002c5d 	.word	0x00002c5d
    272c:	00002c81 	.word	0x00002c81

00002730 <chip_wake>:
sint8 chip_wake(void)
{
    2730:	b590      	push	{r4, r7, lr}
    2732:	b085      	sub	sp, #20
    2734:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2736:	230f      	movs	r3, #15
    2738:	18fb      	adds	r3, r7, r3
    273a:	2200      	movs	r2, #0
    273c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    273e:	2300      	movs	r3, #0
    2740:	607b      	str	r3, [r7, #4]
    2742:	2300      	movs	r3, #0
    2744:	603b      	str	r3, [r7, #0]
    2746:	2300      	movs	r3, #0
    2748:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    274a:	230f      	movs	r3, #15
    274c:	18fc      	adds	r4, r7, r3
    274e:	1d3b      	adds	r3, r7, #4
    2750:	0019      	movs	r1, r3
    2752:	200b      	movs	r0, #11
    2754:	4b4c      	ldr	r3, [pc, #304]	; (2888 <chip_wake+0x158>)
    2756:	4798      	blx	r3
    2758:	0003      	movs	r3, r0
    275a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    275c:	230f      	movs	r3, #15
    275e:	18fb      	adds	r3, r7, r3
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	b25b      	sxtb	r3, r3
    2764:	2b00      	cmp	r3, #0
    2766:	d000      	beq.n	276a <chip_wake+0x3a>
    2768:	e07f      	b.n	286a <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	2201      	movs	r2, #1
    276e:	4013      	ands	r3, r2
    2770:	d110      	bne.n	2794 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	2201      	movs	r2, #1
    2776:	4313      	orrs	r3, r2
    2778:	220f      	movs	r2, #15
    277a:	18bc      	adds	r4, r7, r2
    277c:	0019      	movs	r1, r3
    277e:	200b      	movs	r0, #11
    2780:	4b42      	ldr	r3, [pc, #264]	; (288c <chip_wake+0x15c>)
    2782:	4798      	blx	r3
    2784:	0003      	movs	r3, r0
    2786:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2788:	230f      	movs	r3, #15
    278a:	18fb      	adds	r3, r7, r3
    278c:	781b      	ldrb	r3, [r3, #0]
    278e:	b25b      	sxtb	r3, r3
    2790:	2b00      	cmp	r3, #0
    2792:	d16c      	bne.n	286e <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2794:	230f      	movs	r3, #15
    2796:	18fc      	adds	r4, r7, r3
    2798:	1d3b      	adds	r3, r7, #4
    279a:	0019      	movs	r1, r3
    279c:	2001      	movs	r0, #1
    279e:	4b3a      	ldr	r3, [pc, #232]	; (2888 <chip_wake+0x158>)
    27a0:	4798      	blx	r3
    27a2:	0003      	movs	r3, r0
    27a4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27a6:	230f      	movs	r3, #15
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	781b      	ldrb	r3, [r3, #0]
    27ac:	b25b      	sxtb	r3, r3
    27ae:	2b00      	cmp	r3, #0
    27b0:	d15f      	bne.n	2872 <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	2202      	movs	r2, #2
    27b6:	4013      	ands	r3, r2
    27b8:	d110      	bne.n	27dc <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	2202      	movs	r2, #2
    27be:	4313      	orrs	r3, r2
    27c0:	220f      	movs	r2, #15
    27c2:	18bc      	adds	r4, r7, r2
    27c4:	0019      	movs	r1, r3
    27c6:	2001      	movs	r0, #1
    27c8:	4b30      	ldr	r3, [pc, #192]	; (288c <chip_wake+0x15c>)
    27ca:	4798      	blx	r3
    27cc:	0003      	movs	r3, r0
    27ce:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    27d0:	230f      	movs	r3, #15
    27d2:	18fb      	adds	r3, r7, r3
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	b25b      	sxtb	r3, r3
    27d8:	2b00      	cmp	r3, #0
    27da:	d14c      	bne.n	2876 <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    27dc:	230f      	movs	r3, #15
    27de:	18fc      	adds	r4, r7, r3
    27e0:	003b      	movs	r3, r7
    27e2:	0019      	movs	r1, r3
    27e4:	200f      	movs	r0, #15
    27e6:	4b28      	ldr	r3, [pc, #160]	; (2888 <chip_wake+0x158>)
    27e8:	4798      	blx	r3
    27ea:	0003      	movs	r3, r0
    27ec:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    27ee:	230f      	movs	r3, #15
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	b25b      	sxtb	r3, r3
    27f6:	2b00      	cmp	r3, #0
    27f8:	d013      	beq.n	2822 <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    27fa:	23aa      	movs	r3, #170	; 0xaa
    27fc:	005a      	lsls	r2, r3, #1
    27fe:	4924      	ldr	r1, [pc, #144]	; (2890 <chip_wake+0x160>)
    2800:	4b24      	ldr	r3, [pc, #144]	; (2894 <chip_wake+0x164>)
    2802:	0018      	movs	r0, r3
    2804:	4b24      	ldr	r3, [pc, #144]	; (2898 <chip_wake+0x168>)
    2806:	4798      	blx	r3
    2808:	230f      	movs	r3, #15
    280a:	18fb      	adds	r3, r7, r3
    280c:	2100      	movs	r1, #0
    280e:	5659      	ldrsb	r1, [r3, r1]
    2810:	683a      	ldr	r2, [r7, #0]
    2812:	4b22      	ldr	r3, [pc, #136]	; (289c <chip_wake+0x16c>)
    2814:	0018      	movs	r0, r3
    2816:	4b20      	ldr	r3, [pc, #128]	; (2898 <chip_wake+0x168>)
    2818:	4798      	blx	r3
    281a:	200d      	movs	r0, #13
    281c:	4b20      	ldr	r3, [pc, #128]	; (28a0 <chip_wake+0x170>)
    281e:	4798      	blx	r3
			goto _WAKE_EXIT;
    2820:	e02a      	b.n	2878 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    2822:	683b      	ldr	r3, [r7, #0]
    2824:	2204      	movs	r2, #4
    2826:	4013      	ands	r3, r2
    2828:	d11b      	bne.n	2862 <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    282a:	2002      	movs	r0, #2
    282c:	4b1d      	ldr	r3, [pc, #116]	; (28a4 <chip_wake+0x174>)
    282e:	4798      	blx	r3
		trials++;
    2830:	68bb      	ldr	r3, [r7, #8]
    2832:	3301      	adds	r3, #1
    2834:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2836:	68bb      	ldr	r3, [r7, #8]
    2838:	2b04      	cmp	r3, #4
    283a:	d9cf      	bls.n	27dc <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    283c:	23af      	movs	r3, #175	; 0xaf
    283e:	005a      	lsls	r2, r3, #1
    2840:	4913      	ldr	r1, [pc, #76]	; (2890 <chip_wake+0x160>)
    2842:	4b14      	ldr	r3, [pc, #80]	; (2894 <chip_wake+0x164>)
    2844:	0018      	movs	r0, r3
    2846:	4b14      	ldr	r3, [pc, #80]	; (2898 <chip_wake+0x168>)
    2848:	4798      	blx	r3
    284a:	4b17      	ldr	r3, [pc, #92]	; (28a8 <chip_wake+0x178>)
    284c:	0018      	movs	r0, r3
    284e:	4b17      	ldr	r3, [pc, #92]	; (28ac <chip_wake+0x17c>)
    2850:	4798      	blx	r3
    2852:	200d      	movs	r0, #13
    2854:	4b12      	ldr	r3, [pc, #72]	; (28a0 <chip_wake+0x170>)
    2856:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2858:	230f      	movs	r3, #15
    285a:	18fb      	adds	r3, r7, r3
    285c:	22fc      	movs	r2, #252	; 0xfc
    285e:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    2860:	e00a      	b.n	2878 <chip_wake+0x148>
			break;
    2862:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    2864:	4b12      	ldr	r3, [pc, #72]	; (28b0 <chip_wake+0x180>)
    2866:	4798      	blx	r3
    2868:	e006      	b.n	2878 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	e004      	b.n	2878 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	e002      	b.n	2878 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	e000      	b.n	2878 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2876:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    2878:	230f      	movs	r3, #15
    287a:	18fb      	adds	r3, r7, r3
    287c:	781b      	ldrb	r3, [r3, #0]
    287e:	b25b      	sxtb	r3, r3
}
    2880:	0018      	movs	r0, r3
    2882:	46bd      	mov	sp, r7
    2884:	b005      	add	sp, #20
    2886:	bd90      	pop	{r4, r7, pc}
    2888:	00002c5d 	.word	0x00002c5d
    288c:	00002c81 	.word	0x00002c81
    2890:	000140ac 	.word	0x000140ac
    2894:	00014028 	.word	0x00014028
    2898:	0000efc9 	.word	0x0000efc9
    289c:	0001403c 	.word	0x0001403c
    28a0:	0000effd 	.word	0x0000effd
    28a4:	00000331 	.word	0x00000331
    28a8:	00014054 	.word	0x00014054
    28ac:	0000f0e5 	.word	0x0000f0e5
    28b0:	00002c1d 	.word	0x00002c1d

000028b4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b088      	sub	sp, #32
    28b8:	af00      	add	r7, sp, #0
    28ba:	0002      	movs	r2, r0
    28bc:	1dfb      	adds	r3, r7, #7
    28be:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    28c0:	2313      	movs	r3, #19
    28c2:	18fb      	adds	r3, r7, r3
    28c4:	2200      	movs	r2, #0
    28c6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    28c8:	2300      	movs	r3, #0
    28ca:	61fb      	str	r3, [r7, #28]
    28cc:	2300      	movs	r3, #0
    28ce:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    28d0:	2300      	movs	r3, #0
    28d2:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    28d4:	4b4a      	ldr	r3, [pc, #296]	; (2a00 <wait_for_bootrom+0x14c>)
    28d6:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    28d8:	2300      	movs	r3, #0
    28da:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28dc:	4b49      	ldr	r3, [pc, #292]	; (2a04 <wait_for_bootrom+0x150>)
    28de:	0018      	movs	r0, r3
    28e0:	4b49      	ldr	r3, [pc, #292]	; (2a08 <wait_for_bootrom+0x154>)
    28e2:	4798      	blx	r3
    28e4:	0003      	movs	r3, r0
    28e6:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    28e8:	69fb      	ldr	r3, [r7, #28]
    28ea:	2b00      	cmp	r3, #0
    28ec:	db03      	blt.n	28f6 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    28ee:	2001      	movs	r0, #1
    28f0:	4b46      	ldr	r3, [pc, #280]	; (2a0c <wait_for_bootrom+0x158>)
    28f2:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28f4:	e7f2      	b.n	28dc <wait_for_bootrom+0x28>
			break;
    28f6:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    28f8:	4b45      	ldr	r3, [pc, #276]	; (2a10 <wait_for_bootrom+0x15c>)
    28fa:	0018      	movs	r0, r3
    28fc:	4b42      	ldr	r3, [pc, #264]	; (2a08 <wait_for_bootrom+0x154>)
    28fe:	4798      	blx	r3
    2900:	0003      	movs	r3, r0
    2902:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    2904:	69fb      	ldr	r3, [r7, #28]
    2906:	2201      	movs	r2, #1
    2908:	4013      	ands	r3, r2
    290a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    290c:	69fb      	ldr	r3, [r7, #28]
    290e:	2b00      	cmp	r3, #0
    2910:	d112      	bne.n	2938 <wait_for_bootrom+0x84>
	{
		reg = 0;
    2912:	2300      	movs	r3, #0
    2914:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    2916:	e00b      	b.n	2930 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    2918:	2001      	movs	r0, #1
    291a:	4b3c      	ldr	r3, [pc, #240]	; (2a0c <wait_for_bootrom+0x158>)
    291c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    291e:	4b3d      	ldr	r3, [pc, #244]	; (2a14 <wait_for_bootrom+0x160>)
    2920:	0018      	movs	r0, r3
    2922:	4b39      	ldr	r3, [pc, #228]	; (2a08 <wait_for_bootrom+0x154>)
    2924:	4798      	blx	r3
    2926:	0003      	movs	r3, r0
    2928:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    292a:	69bb      	ldr	r3, [r7, #24]
    292c:	3301      	adds	r3, #1
    292e:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    2930:	69fb      	ldr	r3, [r7, #28]
    2932:	4a39      	ldr	r2, [pc, #228]	; (2a18 <wait_for_bootrom+0x164>)
    2934:	4293      	cmp	r3, r2
    2936:	d1ef      	bne.n	2918 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2938:	1dfb      	adds	r3, r7, #7
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	2b02      	cmp	r3, #2
    293e:	d10d      	bne.n	295c <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2940:	4a36      	ldr	r2, [pc, #216]	; (2a1c <wait_for_bootrom+0x168>)
    2942:	4b37      	ldr	r3, [pc, #220]	; (2a20 <wait_for_bootrom+0x16c>)
    2944:	0011      	movs	r1, r2
    2946:	0018      	movs	r0, r3
    2948:	4b36      	ldr	r3, [pc, #216]	; (2a24 <wait_for_bootrom+0x170>)
    294a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    294c:	2380      	movs	r3, #128	; 0x80
    294e:	035b      	lsls	r3, r3, #13
    2950:	4a35      	ldr	r2, [pc, #212]	; (2a28 <wait_for_bootrom+0x174>)
    2952:	0019      	movs	r1, r3
    2954:	0010      	movs	r0, r2
    2956:	4b33      	ldr	r3, [pc, #204]	; (2a24 <wait_for_bootrom+0x170>)
    2958:	4798      	blx	r3
    295a:	e022      	b.n	29a2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    295c:	1dfb      	adds	r3, r7, #7
    295e:	781b      	ldrb	r3, [r3, #0]
    2960:	2b03      	cmp	r3, #3
    2962:	d10b      	bne.n	297c <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2964:	4a2d      	ldr	r2, [pc, #180]	; (2a1c <wait_for_bootrom+0x168>)
    2966:	4b2e      	ldr	r3, [pc, #184]	; (2a20 <wait_for_bootrom+0x16c>)
    2968:	0011      	movs	r1, r2
    296a:	0018      	movs	r0, r3
    296c:	4b2d      	ldr	r3, [pc, #180]	; (2a24 <wait_for_bootrom+0x170>)
    296e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2970:	4b2d      	ldr	r3, [pc, #180]	; (2a28 <wait_for_bootrom+0x174>)
    2972:	2100      	movs	r1, #0
    2974:	0018      	movs	r0, r3
    2976:	4b2b      	ldr	r3, [pc, #172]	; (2a24 <wait_for_bootrom+0x170>)
    2978:	4798      	blx	r3
    297a:	e012      	b.n	29a2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    297c:	1dfb      	adds	r3, r7, #7
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	2b04      	cmp	r3, #4
    2982:	d108      	bne.n	2996 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2984:	2380      	movs	r3, #128	; 0x80
    2986:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	4a27      	ldr	r2, [pc, #156]	; (2a28 <wait_for_bootrom+0x174>)
    298c:	0019      	movs	r1, r3
    298e:	0010      	movs	r0, r2
    2990:	4b24      	ldr	r3, [pc, #144]	; (2a24 <wait_for_bootrom+0x170>)
    2992:	4798      	blx	r3
    2994:	e005      	b.n	29a2 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2996:	68fb      	ldr	r3, [r7, #12]
    2998:	4a23      	ldr	r2, [pc, #140]	; (2a28 <wait_for_bootrom+0x174>)
    299a:	0019      	movs	r1, r3
    299c:	0010      	movs	r0, r2
    299e:	4b21      	ldr	r3, [pc, #132]	; (2a24 <wait_for_bootrom+0x170>)
    29a0:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    29a2:	4b22      	ldr	r3, [pc, #136]	; (2a2c <wait_for_bootrom+0x178>)
    29a4:	4798      	blx	r3
    29a6:	0003      	movs	r3, r0
    29a8:	051b      	lsls	r3, r3, #20
    29aa:	0d1b      	lsrs	r3, r3, #20
    29ac:	4a20      	ldr	r2, [pc, #128]	; (2a30 <wait_for_bootrom+0x17c>)
    29ae:	4293      	cmp	r3, r2
    29b0:	d906      	bls.n	29c0 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    29b2:	697b      	ldr	r3, [r7, #20]
    29b4:	2202      	movs	r2, #2
    29b6:	4313      	orrs	r3, r2
    29b8:	0018      	movs	r0, r3
    29ba:	4b1e      	ldr	r3, [pc, #120]	; (2a34 <wait_for_bootrom+0x180>)
    29bc:	4798      	blx	r3
    29be:	e003      	b.n	29c8 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    29c0:	697b      	ldr	r3, [r7, #20]
    29c2:	0018      	movs	r0, r3
    29c4:	4b1b      	ldr	r3, [pc, #108]	; (2a34 <wait_for_bootrom+0x180>)
    29c6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    29c8:	4b1b      	ldr	r3, [pc, #108]	; (2a38 <wait_for_bootrom+0x184>)
    29ca:	0018      	movs	r0, r3
    29cc:	4b1b      	ldr	r3, [pc, #108]	; (2a3c <wait_for_bootrom+0x188>)
    29ce:	4798      	blx	r3
    29d0:	68fa      	ldr	r2, [r7, #12]
    29d2:	4b1b      	ldr	r3, [pc, #108]	; (2a40 <wait_for_bootrom+0x18c>)
    29d4:	0011      	movs	r1, r2
    29d6:	0018      	movs	r0, r3
    29d8:	4b18      	ldr	r3, [pc, #96]	; (2a3c <wait_for_bootrom+0x188>)
    29da:	4798      	blx	r3
    29dc:	200d      	movs	r0, #13
    29de:	4b19      	ldr	r3, [pc, #100]	; (2a44 <wait_for_bootrom+0x190>)
    29e0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    29e2:	4a19      	ldr	r2, [pc, #100]	; (2a48 <wait_for_bootrom+0x194>)
    29e4:	4b0b      	ldr	r3, [pc, #44]	; (2a14 <wait_for_bootrom+0x160>)
    29e6:	0011      	movs	r1, r2
    29e8:	0018      	movs	r0, r3
    29ea:	4b0e      	ldr	r3, [pc, #56]	; (2a24 <wait_for_bootrom+0x170>)
    29ec:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    29ee:	2313      	movs	r3, #19
    29f0:	18fb      	adds	r3, r7, r3
    29f2:	781b      	ldrb	r3, [r3, #0]
    29f4:	b25b      	sxtb	r3, r3
}
    29f6:	0018      	movs	r0, r3
    29f8:	46bd      	mov	sp, r7
    29fa:	b008      	add	sp, #32
    29fc:	bd80      	pop	{r7, pc}
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	13521352 	.word	0x13521352
    2a04:	00001014 	.word	0x00001014
    2a08:	00002c3d 	.word	0x00002c3d
    2a0c:	00000331 	.word	0x00000331
    2a10:	000207bc 	.word	0x000207bc
    2a14:	000c000c 	.word	0x000c000c
    2a18:	10add09e 	.word	0x10add09e
    2a1c:	3c1cd57d 	.word	0x3c1cd57d
    2a20:	000207ac 	.word	0x000207ac
    2a24:	00002c81 	.word	0x00002c81
    2a28:	0000108c 	.word	0x0000108c
    2a2c:	00002561 	.word	0x00002561
    2a30:	0000039f 	.word	0x0000039f
    2a34:	00002431 	.word	0x00002431
    2a38:	00014070 	.word	0x00014070
    2a3c:	0000efc9 	.word	0x0000efc9
    2a40:	0001407c 	.word	0x0001407c
    2a44:	0000effd 	.word	0x0000effd
    2a48:	ef522f61 	.word	0xef522f61

00002a4c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b088      	sub	sp, #32
    2a50:	af00      	add	r7, sp, #0
    2a52:	0002      	movs	r2, r0
    2a54:	1dfb      	adds	r3, r7, #7
    2a56:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2a58:	231f      	movs	r3, #31
    2a5a:	18fb      	adds	r3, r7, r3
    2a5c:	2200      	movs	r2, #0
    2a5e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2a60:	2300      	movs	r3, #0
    2a62:	61bb      	str	r3, [r7, #24]
    2a64:	2300      	movs	r3, #0
    2a66:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    2a68:	2301      	movs	r3, #1
    2a6a:	425b      	negs	r3, r3
    2a6c:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    2a6e:	4b1d      	ldr	r3, [pc, #116]	; (2ae4 <wait_for_firmware_start+0x98>)
    2a70:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2a72:	4b1d      	ldr	r3, [pc, #116]	; (2ae8 <wait_for_firmware_start+0x9c>)
    2a74:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2a76:	1dfb      	adds	r3, r7, #7
    2a78:	781b      	ldrb	r3, [r3, #0]
    2a7a:	2b02      	cmp	r3, #2
    2a7c:	d003      	beq.n	2a86 <wait_for_firmware_start+0x3a>
    2a7e:	1dfb      	adds	r3, r7, #7
    2a80:	781b      	ldrb	r3, [r3, #0]
    2a82:	2b03      	cmp	r3, #3
    2a84:	d119      	bne.n	2aba <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    2a86:	4b19      	ldr	r3, [pc, #100]	; (2aec <wait_for_firmware_start+0xa0>)
    2a88:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2a8a:	4b19      	ldr	r3, [pc, #100]	; (2af0 <wait_for_firmware_start+0xa4>)
    2a8c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2a8e:	e014      	b.n	2aba <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2a90:	2002      	movs	r0, #2
    2a92:	4b18      	ldr	r3, [pc, #96]	; (2af4 <wait_for_firmware_start+0xa8>)
    2a94:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2a96:	68fb      	ldr	r3, [r7, #12]
    2a98:	0018      	movs	r0, r3
    2a9a:	4b17      	ldr	r3, [pc, #92]	; (2af8 <wait_for_firmware_start+0xac>)
    2a9c:	4798      	blx	r3
    2a9e:	0003      	movs	r3, r0
    2aa0:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    2aa2:	697b      	ldr	r3, [r7, #20]
    2aa4:	3301      	adds	r3, #1
    2aa6:	617b      	str	r3, [r7, #20]
    2aa8:	697a      	ldr	r2, [r7, #20]
    2aaa:	693b      	ldr	r3, [r7, #16]
    2aac:	429a      	cmp	r2, r3
    2aae:	d304      	bcc.n	2aba <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2ab0:	231f      	movs	r3, #31
    2ab2:	18fb      	adds	r3, r7, r3
    2ab4:	22fb      	movs	r2, #251	; 0xfb
    2ab6:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2ab8:	e00c      	b.n	2ad4 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    2aba:	68ba      	ldr	r2, [r7, #8]
    2abc:	69bb      	ldr	r3, [r7, #24]
    2abe:	429a      	cmp	r2, r3
    2ac0:	d1e6      	bne.n	2a90 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2ac2:	68bb      	ldr	r3, [r7, #8]
    2ac4:	4a08      	ldr	r2, [pc, #32]	; (2ae8 <wait_for_firmware_start+0x9c>)
    2ac6:	4293      	cmp	r3, r2
    2ac8:	d104      	bne.n	2ad4 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2aca:	4b06      	ldr	r3, [pc, #24]	; (2ae4 <wait_for_firmware_start+0x98>)
    2acc:	2100      	movs	r1, #0
    2ace:	0018      	movs	r0, r3
    2ad0:	4b0a      	ldr	r3, [pc, #40]	; (2afc <wait_for_firmware_start+0xb0>)
    2ad2:	4798      	blx	r3
	}
ERR:
	return ret;
    2ad4:	231f      	movs	r3, #31
    2ad6:	18fb      	adds	r3, r7, r3
    2ad8:	781b      	ldrb	r3, [r3, #0]
    2ada:	b25b      	sxtb	r3, r3
}
    2adc:	0018      	movs	r0, r3
    2ade:	46bd      	mov	sp, r7
    2ae0:	b008      	add	sp, #32
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	0000108c 	.word	0x0000108c
    2ae8:	02532636 	.word	0x02532636
    2aec:	000207ac 	.word	0x000207ac
    2af0:	d75dc1c3 	.word	0xd75dc1c3
    2af4:	00000331 	.word	0x00000331
    2af8:	00002c3d 	.word	0x00002c3d
    2afc:	00002c81 	.word	0x00002c81

00002b00 <chip_deinit>:

sint8 chip_deinit(void)
{
    2b00:	b590      	push	{r4, r7, lr}
    2b02:	b083      	sub	sp, #12
    2b04:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2b06:	2300      	movs	r3, #0
    2b08:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2b0a:	1dfc      	adds	r4, r7, #7
    2b0c:	003a      	movs	r2, r7
    2b0e:	23a0      	movs	r3, #160	; 0xa0
    2b10:	015b      	lsls	r3, r3, #5
    2b12:	0011      	movs	r1, r2
    2b14:	0018      	movs	r0, r3
    2b16:	4b1f      	ldr	r3, [pc, #124]	; (2b94 <chip_deinit+0x94>)
    2b18:	4798      	blx	r3
    2b1a:	0003      	movs	r3, r0
    2b1c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2b1e:	1dfb      	adds	r3, r7, #7
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	b25b      	sxtb	r3, r3
    2b24:	2b00      	cmp	r3, #0
    2b26:	d00d      	beq.n	2b44 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    2b28:	4a1b      	ldr	r2, [pc, #108]	; (2b98 <chip_deinit+0x98>)
    2b2a:	491c      	ldr	r1, [pc, #112]	; (2b9c <chip_deinit+0x9c>)
    2b2c:	4b1c      	ldr	r3, [pc, #112]	; (2ba0 <chip_deinit+0xa0>)
    2b2e:	0018      	movs	r0, r3
    2b30:	4b1c      	ldr	r3, [pc, #112]	; (2ba4 <chip_deinit+0xa4>)
    2b32:	4798      	blx	r3
    2b34:	4b1c      	ldr	r3, [pc, #112]	; (2ba8 <chip_deinit+0xa8>)
    2b36:	0018      	movs	r0, r3
    2b38:	4b1c      	ldr	r3, [pc, #112]	; (2bac <chip_deinit+0xac>)
    2b3a:	4798      	blx	r3
    2b3c:	200d      	movs	r0, #13
    2b3e:	4b1c      	ldr	r3, [pc, #112]	; (2bb0 <chip_deinit+0xb0>)
    2b40:	4798      	blx	r3
		goto ERR1;
    2b42:	e020      	b.n	2b86 <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    2b44:	683b      	ldr	r3, [r7, #0]
    2b46:	4a1b      	ldr	r2, [pc, #108]	; (2bb4 <chip_deinit+0xb4>)
    2b48:	4013      	ands	r3, r2
    2b4a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2b4c:	683a      	ldr	r2, [r7, #0]
    2b4e:	1dfc      	adds	r4, r7, #7
    2b50:	23a0      	movs	r3, #160	; 0xa0
    2b52:	015b      	lsls	r3, r3, #5
    2b54:	0011      	movs	r1, r2
    2b56:	0018      	movs	r0, r3
    2b58:	4b17      	ldr	r3, [pc, #92]	; (2bb8 <chip_deinit+0xb8>)
    2b5a:	4798      	blx	r3
    2b5c:	0003      	movs	r3, r0
    2b5e:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2b60:	1dfb      	adds	r3, r7, #7
    2b62:	781b      	ldrb	r3, [r3, #0]
    2b64:	b25b      	sxtb	r3, r3
    2b66:	2b00      	cmp	r3, #0
    2b68:	d00d      	beq.n	2b86 <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    2b6a:	4a14      	ldr	r2, [pc, #80]	; (2bbc <chip_deinit+0xbc>)
    2b6c:	490b      	ldr	r1, [pc, #44]	; (2b9c <chip_deinit+0x9c>)
    2b6e:	4b0c      	ldr	r3, [pc, #48]	; (2ba0 <chip_deinit+0xa0>)
    2b70:	0018      	movs	r0, r3
    2b72:	4b0c      	ldr	r3, [pc, #48]	; (2ba4 <chip_deinit+0xa4>)
    2b74:	4798      	blx	r3
    2b76:	4b0c      	ldr	r3, [pc, #48]	; (2ba8 <chip_deinit+0xa8>)
    2b78:	0018      	movs	r0, r3
    2b7a:	4b0c      	ldr	r3, [pc, #48]	; (2bac <chip_deinit+0xac>)
    2b7c:	4798      	blx	r3
    2b7e:	200d      	movs	r0, #13
    2b80:	4b0b      	ldr	r3, [pc, #44]	; (2bb0 <chip_deinit+0xb0>)
    2b82:	4798      	blx	r3
		goto ERR1;
    2b84:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    2b86:	1dfb      	adds	r3, r7, #7
    2b88:	781b      	ldrb	r3, [r3, #0]
    2b8a:	b25b      	sxtb	r3, r3
}
    2b8c:	0018      	movs	r0, r3
    2b8e:	46bd      	mov	sp, r7
    2b90:	b003      	add	sp, #12
    2b92:	bd90      	pop	{r4, r7, pc}
    2b94:	00002c5d 	.word	0x00002c5d
    2b98:	00000205 	.word	0x00000205
    2b9c:	000140b8 	.word	0x000140b8
    2ba0:	00014028 	.word	0x00014028
    2ba4:	0000efc9 	.word	0x0000efc9
    2ba8:	00014094 	.word	0x00014094
    2bac:	0000f0e5 	.word	0x0000f0e5
    2bb0:	0000effd 	.word	0x0000effd
    2bb4:	fffffbff 	.word	0xfffffbff
    2bb8:	00002c81 	.word	0x00002c81
    2bbc:	0000020b 	.word	0x0000020b

00002bc0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2bc0:	b590      	push	{r4, r7, lr}
    2bc2:	b085      	sub	sp, #20
    2bc4:	af00      	add	r7, sp, #0
    2bc6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2bc8:	230f      	movs	r3, #15
    2bca:	18fb      	adds	r3, r7, r3
    2bcc:	2200      	movs	r2, #0
    2bce:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    2bd0:	230f      	movs	r3, #15
    2bd2:	18fc      	adds	r4, r7, r3
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	0018      	movs	r0, r3
    2bd8:	4b05      	ldr	r3, [pc, #20]	; (2bf0 <nm_bus_iface_init+0x30>)
    2bda:	4798      	blx	r3
    2bdc:	0003      	movs	r3, r0
    2bde:	7023      	strb	r3, [r4, #0]
	return ret;
    2be0:	230f      	movs	r3, #15
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	781b      	ldrb	r3, [r3, #0]
    2be6:	b25b      	sxtb	r3, r3
}
    2be8:	0018      	movs	r0, r3
    2bea:	46bd      	mov	sp, r7
    2bec:	b005      	add	sp, #20
    2bee:	bd90      	pop	{r4, r7, pc}
    2bf0:	000009f9 	.word	0x000009f9

00002bf4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2bf4:	b590      	push	{r4, r7, lr}
    2bf6:	b083      	sub	sp, #12
    2bf8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2bfa:	1dfb      	adds	r3, r7, #7
    2bfc:	2200      	movs	r2, #0
    2bfe:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    2c00:	1dfc      	adds	r4, r7, #7
    2c02:	4b05      	ldr	r3, [pc, #20]	; (2c18 <nm_bus_iface_deinit+0x24>)
    2c04:	4798      	blx	r3
    2c06:	0003      	movs	r3, r0
    2c08:	7023      	strb	r3, [r4, #0]

	return ret;
    2c0a:	1dfb      	adds	r3, r7, #7
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	b25b      	sxtb	r3, r3
}
    2c10:	0018      	movs	r0, r3
    2c12:	46bd      	mov	sp, r7
    2c14:	b003      	add	sp, #12
    2c16:	bd90      	pop	{r4, r7, pc}
    2c18:	00000b75 	.word	0x00000b75

00002c1c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2c1c:	b580      	push	{r7, lr}
    2c1e:	b082      	sub	sp, #8
    2c20:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2c22:	1dfb      	adds	r3, r7, #7
    2c24:	2200      	movs	r2, #0
    2c26:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2c28:	4b03      	ldr	r3, [pc, #12]	; (2c38 <nm_bus_reset+0x1c>)
    2c2a:	4798      	blx	r3
    2c2c:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2c2e:	0018      	movs	r0, r3
    2c30:	46bd      	mov	sp, r7
    2c32:	b002      	add	sp, #8
    2c34:	bd80      	pop	{r7, pc}
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	00004505 	.word	0x00004505

00002c3c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b082      	sub	sp, #8
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	0018      	movs	r0, r3
    2c48:	4b03      	ldr	r3, [pc, #12]	; (2c58 <nm_read_reg+0x1c>)
    2c4a:	4798      	blx	r3
    2c4c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2c4e:	0018      	movs	r0, r3
    2c50:	46bd      	mov	sp, r7
    2c52:	b002      	add	sp, #8
    2c54:	bd80      	pop	{r7, pc}
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	00004699 	.word	0x00004699

00002c5c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b082      	sub	sp, #8
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
    2c64:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2c66:	683a      	ldr	r2, [r7, #0]
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	0011      	movs	r1, r2
    2c6c:	0018      	movs	r0, r3
    2c6e:	4b03      	ldr	r3, [pc, #12]	; (2c7c <nm_read_reg_with_ret+0x20>)
    2c70:	4798      	blx	r3
    2c72:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2c74:	0018      	movs	r0, r3
    2c76:	46bd      	mov	sp, r7
    2c78:	b002      	add	sp, #8
    2c7a:	bd80      	pop	{r7, pc}
    2c7c:	000046bd 	.word	0x000046bd

00002c80 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b082      	sub	sp, #8
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2c8a:	683a      	ldr	r2, [r7, #0]
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	0011      	movs	r1, r2
    2c90:	0018      	movs	r0, r3
    2c92:	4b03      	ldr	r3, [pc, #12]	; (2ca0 <nm_write_reg+0x20>)
    2c94:	4798      	blx	r3
    2c96:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2c98:	0018      	movs	r0, r3
    2c9a:	46bd      	mov	sp, r7
    2c9c:	b002      	add	sp, #8
    2c9e:	bd80      	pop	{r7, pc}
    2ca0:	0000470d 	.word	0x0000470d

00002ca4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2ca4:	b580      	push	{r7, lr}
    2ca6:	b084      	sub	sp, #16
    2ca8:	af00      	add	r7, sp, #0
    2caa:	60f8      	str	r0, [r7, #12]
    2cac:	60b9      	str	r1, [r7, #8]
    2cae:	1dbb      	adds	r3, r7, #6
    2cb0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2cb2:	1dbb      	adds	r3, r7, #6
    2cb4:	881a      	ldrh	r2, [r3, #0]
    2cb6:	68b9      	ldr	r1, [r7, #8]
    2cb8:	68fb      	ldr	r3, [r7, #12]
    2cba:	0018      	movs	r0, r3
    2cbc:	4b03      	ldr	r3, [pc, #12]	; (2ccc <p_nm_read_block+0x28>)
    2cbe:	4798      	blx	r3
    2cc0:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2cc2:	0018      	movs	r0, r3
    2cc4:	46bd      	mov	sp, r7
    2cc6:	b004      	add	sp, #16
    2cc8:	bd80      	pop	{r7, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	0000475d 	.word	0x0000475d

00002cd0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2cd0:	b580      	push	{r7, lr}
    2cd2:	b086      	sub	sp, #24
    2cd4:	af00      	add	r7, sp, #0
    2cd6:	60f8      	str	r0, [r7, #12]
    2cd8:	60b9      	str	r1, [r7, #8]
    2cda:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2cdc:	4b2d      	ldr	r3, [pc, #180]	; (2d94 <nm_read_block+0xc4>)
    2cde:	881a      	ldrh	r2, [r3, #0]
    2ce0:	2310      	movs	r3, #16
    2ce2:	18fb      	adds	r3, r7, r3
    2ce4:	3a08      	subs	r2, #8
    2ce6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2ce8:	2300      	movs	r3, #0
    2cea:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2cec:	2313      	movs	r3, #19
    2cee:	18fb      	adds	r3, r7, r3
    2cf0:	2200      	movs	r2, #0
    2cf2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2cf4:	2310      	movs	r3, #16
    2cf6:	18fb      	adds	r3, r7, r3
    2cf8:	881a      	ldrh	r2, [r3, #0]
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	429a      	cmp	r2, r3
    2cfe:	d313      	bcc.n	2d28 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2d00:	68ba      	ldr	r2, [r7, #8]
    2d02:	697b      	ldr	r3, [r7, #20]
    2d04:	18d1      	adds	r1, r2, r3
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	b29a      	uxth	r2, r3
    2d0a:	68fb      	ldr	r3, [r7, #12]
    2d0c:	0018      	movs	r0, r3
    2d0e:	4b22      	ldr	r3, [pc, #136]	; (2d98 <nm_read_block+0xc8>)
    2d10:	4798      	blx	r3
    2d12:	0003      	movs	r3, r0
    2d14:	b2da      	uxtb	r2, r3
    2d16:	2313      	movs	r3, #19
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	781b      	ldrb	r3, [r3, #0]
    2d1c:	18d3      	adds	r3, r2, r3
    2d1e:	b2da      	uxtb	r2, r3
    2d20:	2313      	movs	r3, #19
    2d22:	18fb      	adds	r3, r7, r3
    2d24:	701a      	strb	r2, [r3, #0]
			break;
    2d26:	e02d      	b.n	2d84 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2d28:	68ba      	ldr	r2, [r7, #8]
    2d2a:	697b      	ldr	r3, [r7, #20]
    2d2c:	18d1      	adds	r1, r2, r3
    2d2e:	2310      	movs	r3, #16
    2d30:	18fb      	adds	r3, r7, r3
    2d32:	881a      	ldrh	r2, [r3, #0]
    2d34:	68fb      	ldr	r3, [r7, #12]
    2d36:	0018      	movs	r0, r3
    2d38:	4b17      	ldr	r3, [pc, #92]	; (2d98 <nm_read_block+0xc8>)
    2d3a:	4798      	blx	r3
    2d3c:	0003      	movs	r3, r0
    2d3e:	b2da      	uxtb	r2, r3
    2d40:	2313      	movs	r3, #19
    2d42:	18fb      	adds	r3, r7, r3
    2d44:	781b      	ldrb	r3, [r3, #0]
    2d46:	18d3      	adds	r3, r2, r3
    2d48:	b2da      	uxtb	r2, r3
    2d4a:	2313      	movs	r3, #19
    2d4c:	18fb      	adds	r3, r7, r3
    2d4e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2d50:	2313      	movs	r3, #19
    2d52:	18fb      	adds	r3, r7, r3
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	b25b      	sxtb	r3, r3
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d112      	bne.n	2d82 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2d5c:	2310      	movs	r3, #16
    2d5e:	18fb      	adds	r3, r7, r3
    2d60:	881b      	ldrh	r3, [r3, #0]
    2d62:	687a      	ldr	r2, [r7, #4]
    2d64:	1ad3      	subs	r3, r2, r3
    2d66:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2d68:	2310      	movs	r3, #16
    2d6a:	18fb      	adds	r3, r7, r3
    2d6c:	881b      	ldrh	r3, [r3, #0]
    2d6e:	697a      	ldr	r2, [r7, #20]
    2d70:	18d3      	adds	r3, r2, r3
    2d72:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2d74:	2310      	movs	r3, #16
    2d76:	18fb      	adds	r3, r7, r3
    2d78:	881b      	ldrh	r3, [r3, #0]
    2d7a:	68fa      	ldr	r2, [r7, #12]
    2d7c:	18d3      	adds	r3, r2, r3
    2d7e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2d80:	e7b8      	b.n	2cf4 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2d82:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2d84:	2313      	movs	r3, #19
    2d86:	18fb      	adds	r3, r7, r3
    2d88:	781b      	ldrb	r3, [r3, #0]
    2d8a:	b25b      	sxtb	r3, r3
}
    2d8c:	0018      	movs	r0, r3
    2d8e:	46bd      	mov	sp, r7
    2d90:	b006      	add	sp, #24
    2d92:	bd80      	pop	{r7, pc}
    2d94:	20000000 	.word	0x20000000
    2d98:	00002ca5 	.word	0x00002ca5

00002d9c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b084      	sub	sp, #16
    2da0:	af00      	add	r7, sp, #0
    2da2:	60f8      	str	r0, [r7, #12]
    2da4:	60b9      	str	r1, [r7, #8]
    2da6:	1dbb      	adds	r3, r7, #6
    2da8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2daa:	1dbb      	adds	r3, r7, #6
    2dac:	881a      	ldrh	r2, [r3, #0]
    2dae:	68b9      	ldr	r1, [r7, #8]
    2db0:	68fb      	ldr	r3, [r7, #12]
    2db2:	0018      	movs	r0, r3
    2db4:	4b03      	ldr	r3, [pc, #12]	; (2dc4 <p_nm_write_block+0x28>)
    2db6:	4798      	blx	r3
    2db8:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2dba:	0018      	movs	r0, r3
    2dbc:	46bd      	mov	sp, r7
    2dbe:	b004      	add	sp, #16
    2dc0:	bd80      	pop	{r7, pc}
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	000047b5 	.word	0x000047b5

00002dc8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2dc8:	b580      	push	{r7, lr}
    2dca:	b086      	sub	sp, #24
    2dcc:	af00      	add	r7, sp, #0
    2dce:	60f8      	str	r0, [r7, #12]
    2dd0:	60b9      	str	r1, [r7, #8]
    2dd2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2dd4:	4b2d      	ldr	r3, [pc, #180]	; (2e8c <nm_write_block+0xc4>)
    2dd6:	881a      	ldrh	r2, [r3, #0]
    2dd8:	2310      	movs	r3, #16
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	3a08      	subs	r2, #8
    2dde:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2de0:	2300      	movs	r3, #0
    2de2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2de4:	2313      	movs	r3, #19
    2de6:	18fb      	adds	r3, r7, r3
    2de8:	2200      	movs	r2, #0
    2dea:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2dec:	2310      	movs	r3, #16
    2dee:	18fb      	adds	r3, r7, r3
    2df0:	881a      	ldrh	r2, [r3, #0]
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	429a      	cmp	r2, r3
    2df6:	d313      	bcc.n	2e20 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2df8:	68ba      	ldr	r2, [r7, #8]
    2dfa:	697b      	ldr	r3, [r7, #20]
    2dfc:	18d1      	adds	r1, r2, r3
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	b29a      	uxth	r2, r3
    2e02:	68fb      	ldr	r3, [r7, #12]
    2e04:	0018      	movs	r0, r3
    2e06:	4b22      	ldr	r3, [pc, #136]	; (2e90 <nm_write_block+0xc8>)
    2e08:	4798      	blx	r3
    2e0a:	0003      	movs	r3, r0
    2e0c:	b2da      	uxtb	r2, r3
    2e0e:	2313      	movs	r3, #19
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	18d3      	adds	r3, r2, r3
    2e16:	b2da      	uxtb	r2, r3
    2e18:	2313      	movs	r3, #19
    2e1a:	18fb      	adds	r3, r7, r3
    2e1c:	701a      	strb	r2, [r3, #0]
			break;
    2e1e:	e02d      	b.n	2e7c <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2e20:	68ba      	ldr	r2, [r7, #8]
    2e22:	697b      	ldr	r3, [r7, #20]
    2e24:	18d1      	adds	r1, r2, r3
    2e26:	2310      	movs	r3, #16
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	881a      	ldrh	r2, [r3, #0]
    2e2c:	68fb      	ldr	r3, [r7, #12]
    2e2e:	0018      	movs	r0, r3
    2e30:	4b17      	ldr	r3, [pc, #92]	; (2e90 <nm_write_block+0xc8>)
    2e32:	4798      	blx	r3
    2e34:	0003      	movs	r3, r0
    2e36:	b2da      	uxtb	r2, r3
    2e38:	2313      	movs	r3, #19
    2e3a:	18fb      	adds	r3, r7, r3
    2e3c:	781b      	ldrb	r3, [r3, #0]
    2e3e:	18d3      	adds	r3, r2, r3
    2e40:	b2da      	uxtb	r2, r3
    2e42:	2313      	movs	r3, #19
    2e44:	18fb      	adds	r3, r7, r3
    2e46:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2e48:	2313      	movs	r3, #19
    2e4a:	18fb      	adds	r3, r7, r3
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	b25b      	sxtb	r3, r3
    2e50:	2b00      	cmp	r3, #0
    2e52:	d112      	bne.n	2e7a <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2e54:	2310      	movs	r3, #16
    2e56:	18fb      	adds	r3, r7, r3
    2e58:	881b      	ldrh	r3, [r3, #0]
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	1ad3      	subs	r3, r2, r3
    2e5e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2e60:	2310      	movs	r3, #16
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	881b      	ldrh	r3, [r3, #0]
    2e66:	697a      	ldr	r2, [r7, #20]
    2e68:	18d3      	adds	r3, r2, r3
    2e6a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2e6c:	2310      	movs	r3, #16
    2e6e:	18fb      	adds	r3, r7, r3
    2e70:	881b      	ldrh	r3, [r3, #0]
    2e72:	68fa      	ldr	r2, [r7, #12]
    2e74:	18d3      	adds	r3, r2, r3
    2e76:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2e78:	e7b8      	b.n	2dec <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2e7a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2e7c:	2313      	movs	r3, #19
    2e7e:	18fb      	adds	r3, r7, r3
    2e80:	781b      	ldrb	r3, [r3, #0]
    2e82:	b25b      	sxtb	r3, r3
}
    2e84:	0018      	movs	r0, r3
    2e86:	46bd      	mov	sp, r7
    2e88:	b006      	add	sp, #24
    2e8a:	bd80      	pop	{r7, pc}
    2e8c:	20000000 	.word	0x20000000
    2e90:	00002d9d 	.word	0x00002d9d

00002e94 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2e94:	b590      	push	{r4, r7, lr}
    2e96:	b089      	sub	sp, #36	; 0x24
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2e9c:	2300      	movs	r3, #0
    2e9e:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    2ea0:	231f      	movs	r3, #31
    2ea2:	18fb      	adds	r3, r7, r3
    2ea4:	2200      	movs	r2, #0
    2ea6:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    2ea8:	230c      	movs	r3, #12
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	0018      	movs	r0, r3
    2eae:	2308      	movs	r3, #8
    2eb0:	001a      	movs	r2, r3
    2eb2:	2100      	movs	r1, #0
    2eb4:	4b64      	ldr	r3, [pc, #400]	; (3048 <nm_get_firmware_full_info+0x1b4>)
    2eb6:	4798      	blx	r3
	if (pstrRev != NULL)
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d100      	bne.n	2ec0 <nm_get_firmware_full_info+0x2c>
    2ebe:	e0ba      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	2228      	movs	r2, #40	; 0x28
    2ec4:	2100      	movs	r1, #0
    2ec6:	0018      	movs	r0, r3
    2ec8:	4b60      	ldr	r3, [pc, #384]	; (304c <nm_get_firmware_full_info+0x1b8>)
    2eca:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2ecc:	231f      	movs	r3, #31
    2ece:	18fc      	adds	r4, r7, r3
    2ed0:	2314      	movs	r3, #20
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	4a5e      	ldr	r2, [pc, #376]	; (3050 <nm_get_firmware_full_info+0x1bc>)
    2ed6:	0019      	movs	r1, r3
    2ed8:	0010      	movs	r0, r2
    2eda:	4b5e      	ldr	r3, [pc, #376]	; (3054 <nm_get_firmware_full_info+0x1c0>)
    2edc:	4798      	blx	r3
    2ede:	0003      	movs	r3, r0
    2ee0:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    2ee2:	231f      	movs	r3, #31
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	b25b      	sxtb	r3, r3
    2eea:	2b00      	cmp	r3, #0
    2eec:	d000      	beq.n	2ef0 <nm_get_firmware_full_info+0x5c>
    2eee:	e0a2      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    2ef0:	697b      	ldr	r3, [r7, #20]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d100      	bne.n	2ef8 <nm_get_firmware_full_info+0x64>
    2ef6:	e09a      	b.n	302e <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2ef8:	697b      	ldr	r3, [r7, #20]
    2efa:	22c0      	movs	r2, #192	; 0xc0
    2efc:	0292      	lsls	r2, r2, #10
    2efe:	4313      	orrs	r3, r2
    2f00:	221f      	movs	r2, #31
    2f02:	18bc      	adds	r4, r7, r2
    2f04:	220c      	movs	r2, #12
    2f06:	18b9      	adds	r1, r7, r2
    2f08:	2208      	movs	r2, #8
    2f0a:	0018      	movs	r0, r3
    2f0c:	4b52      	ldr	r3, [pc, #328]	; (3058 <nm_get_firmware_full_info+0x1c4>)
    2f0e:	4798      	blx	r3
    2f10:	0003      	movs	r3, r0
    2f12:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    2f14:	231f      	movs	r3, #31
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	781b      	ldrb	r3, [r3, #0]
    2f1a:	b25b      	sxtb	r3, r3
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d000      	beq.n	2f22 <nm_get_firmware_full_info+0x8e>
    2f20:	e089      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    2f22:	230c      	movs	r3, #12
    2f24:	18fb      	adds	r3, r7, r3
    2f26:	685b      	ldr	r3, [r3, #4]
    2f28:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    2f2a:	697b      	ldr	r3, [r7, #20]
    2f2c:	041b      	lsls	r3, r3, #16
    2f2e:	0c1b      	lsrs	r3, r3, #16
    2f30:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    2f32:	697b      	ldr	r3, [r7, #20]
    2f34:	2b00      	cmp	r3, #0
    2f36:	d100      	bne.n	2f3a <nm_get_firmware_full_info+0xa6>
    2f38:	e074      	b.n	3024 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2f3a:	697b      	ldr	r3, [r7, #20]
    2f3c:	22c0      	movs	r2, #192	; 0xc0
    2f3e:	0292      	lsls	r2, r2, #10
    2f40:	4313      	orrs	r3, r2
    2f42:	221f      	movs	r2, #31
    2f44:	18bc      	adds	r4, r7, r2
    2f46:	6879      	ldr	r1, [r7, #4]
    2f48:	2228      	movs	r2, #40	; 0x28
    2f4a:	0018      	movs	r0, r3
    2f4c:	4b42      	ldr	r3, [pc, #264]	; (3058 <nm_get_firmware_full_info+0x1c4>)
    2f4e:	4798      	blx	r3
    2f50:	0003      	movs	r3, r0
    2f52:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    2f54:	231f      	movs	r3, #31
    2f56:	18fb      	adds	r3, r7, r3
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	b25b      	sxtb	r3, r3
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d16a      	bne.n	3036 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	791b      	ldrb	r3, [r3, #4]
    2f64:	021b      	lsls	r3, r3, #8
    2f66:	b21a      	sxth	r2, r3
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	795b      	ldrb	r3, [r3, #5]
    2f6c:	011b      	lsls	r3, r3, #4
    2f6e:	b21b      	sxth	r3, r3
    2f70:	21ff      	movs	r1, #255	; 0xff
    2f72:	400b      	ands	r3, r1
    2f74:	b21b      	sxth	r3, r3
    2f76:	4313      	orrs	r3, r2
    2f78:	b21a      	sxth	r2, r3
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	799b      	ldrb	r3, [r3, #6]
    2f7e:	b21b      	sxth	r3, r3
    2f80:	210f      	movs	r1, #15
    2f82:	400b      	ands	r3, r1
    2f84:	b21b      	sxth	r3, r3
    2f86:	4313      	orrs	r3, r2
    2f88:	b21a      	sxth	r2, r3
    2f8a:	231c      	movs	r3, #28
    2f8c:	18fb      	adds	r3, r7, r3
    2f8e:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    2f90:	231a      	movs	r3, #26
    2f92:	18fb      	adds	r3, r7, r3
    2f94:	4a31      	ldr	r2, [pc, #196]	; (305c <nm_get_firmware_full_info+0x1c8>)
    2f96:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	79db      	ldrb	r3, [r3, #7]
    2f9c:	021b      	lsls	r3, r3, #8
    2f9e:	b21a      	sxth	r2, r3
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	7a1b      	ldrb	r3, [r3, #8]
    2fa4:	011b      	lsls	r3, r3, #4
    2fa6:	b21b      	sxth	r3, r3
    2fa8:	21ff      	movs	r1, #255	; 0xff
    2faa:	400b      	ands	r3, r1
    2fac:	b21b      	sxth	r3, r3
    2fae:	4313      	orrs	r3, r2
    2fb0:	b21a      	sxth	r2, r3
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	7a5b      	ldrb	r3, [r3, #9]
    2fb6:	b21b      	sxth	r3, r3
    2fb8:	210f      	movs	r1, #15
    2fba:	400b      	ands	r3, r1
    2fbc:	b21b      	sxth	r3, r3
    2fbe:	4313      	orrs	r3, r2
    2fc0:	b21a      	sxth	r2, r3
    2fc2:	2318      	movs	r3, #24
    2fc4:	18fb      	adds	r3, r7, r3
    2fc6:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2fc8:	231c      	movs	r3, #28
    2fca:	18fb      	adds	r3, r7, r3
    2fcc:	881b      	ldrh	r3, [r3, #0]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d009      	beq.n	2fe6 <nm_get_firmware_full_info+0x152>
    2fd2:	2318      	movs	r3, #24
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	881b      	ldrh	r3, [r3, #0]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d004      	beq.n	2fe6 <nm_get_firmware_full_info+0x152>
    2fdc:	2318      	movs	r3, #24
    2fde:	18fb      	adds	r3, r7, r3
    2fe0:	881b      	ldrh	r3, [r3, #0]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d104      	bne.n	2ff0 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    2fe6:	231f      	movs	r3, #31
    2fe8:	18fb      	adds	r3, r7, r3
    2fea:	22f4      	movs	r2, #244	; 0xf4
    2fec:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    2fee:	e022      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2ff0:	231a      	movs	r3, #26
    2ff2:	18fa      	adds	r2, r7, r3
    2ff4:	2318      	movs	r3, #24
    2ff6:	18fb      	adds	r3, r7, r3
    2ff8:	8812      	ldrh	r2, [r2, #0]
    2ffa:	881b      	ldrh	r3, [r3, #0]
    2ffc:	429a      	cmp	r2, r3
    2ffe:	d204      	bcs.n	300a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    3000:	231f      	movs	r3, #31
    3002:	18fb      	adds	r3, r7, r3
    3004:	22f3      	movs	r2, #243	; 0xf3
    3006:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3008:	e015      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    300a:	231a      	movs	r3, #26
    300c:	18fa      	adds	r2, r7, r3
    300e:	231c      	movs	r3, #28
    3010:	18fb      	adds	r3, r7, r3
    3012:	8812      	ldrh	r2, [r2, #0]
    3014:	881b      	ldrh	r3, [r3, #0]
    3016:	429a      	cmp	r2, r3
    3018:	d90d      	bls.n	3036 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    301a:	231f      	movs	r3, #31
    301c:	18fb      	adds	r3, r7, r3
    301e:	22f3      	movs	r2, #243	; 0xf3
    3020:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3022:	e008      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    3024:	231f      	movs	r3, #31
    3026:	18fb      	adds	r3, r7, r3
    3028:	22f4      	movs	r2, #244	; 0xf4
    302a:	701a      	strb	r2, [r3, #0]
    302c:	e003      	b.n	3036 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    302e:	231f      	movs	r3, #31
    3030:	18fb      	adds	r3, r7, r3
    3032:	22f4      	movs	r2, #244	; 0xf4
    3034:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    3036:	231f      	movs	r3, #31
    3038:	18fb      	adds	r3, r7, r3
    303a:	781b      	ldrb	r3, [r3, #0]
    303c:	b25b      	sxtb	r3, r3
}
    303e:	0018      	movs	r0, r3
    3040:	46bd      	mov	sp, r7
    3042:	b009      	add	sp, #36	; 0x24
    3044:	bd90      	pop	{r4, r7, pc}
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	0000e587 	.word	0x0000e587
    304c:	00000c21 	.word	0x00000c21
    3050:	000c0008 	.word	0x000c0008
    3054:	00002c5d 	.word	0x00002c5d
    3058:	00002cd1 	.word	0x00002cd1
    305c:	00001352 	.word	0x00001352

00003060 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3060:	b590      	push	{r4, r7, lr}
    3062:	b085      	sub	sp, #20
    3064:	af00      	add	r7, sp, #0
    3066:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3068:	230f      	movs	r3, #15
    306a:	18fb      	adds	r3, r7, r3
    306c:	2200      	movs	r2, #0
    306e:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    3070:	687b      	ldr	r3, [r7, #4]
    3072:	2b00      	cmp	r3, #0
    3074:	d013      	beq.n	309e <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    3076:	230e      	movs	r3, #14
    3078:	18fb      	adds	r3, r7, r3
    307a:	687a      	ldr	r2, [r7, #4]
    307c:	7812      	ldrb	r2, [r2, #0]
    307e:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3080:	230e      	movs	r3, #14
    3082:	18fb      	adds	r3, r7, r3
    3084:	781b      	ldrb	r3, [r3, #0]
    3086:	2b00      	cmp	r3, #0
    3088:	d004      	beq.n	3094 <nm_drv_init+0x34>
    308a:	230e      	movs	r3, #14
    308c:	18fb      	adds	r3, r7, r3
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	2b04      	cmp	r3, #4
    3092:	d908      	bls.n	30a6 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    3094:	230e      	movs	r3, #14
    3096:	18fb      	adds	r3, r7, r3
    3098:	2201      	movs	r2, #1
    309a:	701a      	strb	r2, [r3, #0]
    309c:	e003      	b.n	30a6 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    309e:	230e      	movs	r3, #14
    30a0:	18fb      	adds	r3, r7, r3
    30a2:	2201      	movs	r2, #1
    30a4:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    30a6:	230f      	movs	r3, #15
    30a8:	18fc      	adds	r4, r7, r3
    30aa:	2000      	movs	r0, #0
    30ac:	4b41      	ldr	r3, [pc, #260]	; (31b4 <nm_drv_init+0x154>)
    30ae:	4798      	blx	r3
    30b0:	0003      	movs	r3, r0
    30b2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    30b4:	230f      	movs	r3, #15
    30b6:	18fb      	adds	r3, r7, r3
    30b8:	781b      	ldrb	r3, [r3, #0]
    30ba:	b25b      	sxtb	r3, r3
    30bc:	2b00      	cmp	r3, #0
    30be:	d00f      	beq.n	30e0 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    30c0:	2328      	movs	r3, #40	; 0x28
    30c2:	33ff      	adds	r3, #255	; 0xff
    30c4:	001a      	movs	r2, r3
    30c6:	493c      	ldr	r1, [pc, #240]	; (31b8 <nm_drv_init+0x158>)
    30c8:	4b3c      	ldr	r3, [pc, #240]	; (31bc <nm_drv_init+0x15c>)
    30ca:	0018      	movs	r0, r3
    30cc:	4b3c      	ldr	r3, [pc, #240]	; (31c0 <nm_drv_init+0x160>)
    30ce:	4798      	blx	r3
    30d0:	4b3c      	ldr	r3, [pc, #240]	; (31c4 <nm_drv_init+0x164>)
    30d2:	0018      	movs	r0, r3
    30d4:	4b3c      	ldr	r3, [pc, #240]	; (31c8 <nm_drv_init+0x168>)
    30d6:	4798      	blx	r3
    30d8:	200d      	movs	r0, #13
    30da:	4b3c      	ldr	r3, [pc, #240]	; (31cc <nm_drv_init+0x16c>)
    30dc:	4798      	blx	r3
		goto ERR1;
    30de:	e060      	b.n	31a2 <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    30e0:	4b3b      	ldr	r3, [pc, #236]	; (31d0 <nm_drv_init+0x170>)
    30e2:	0018      	movs	r0, r3
    30e4:	4b36      	ldr	r3, [pc, #216]	; (31c0 <nm_drv_init+0x160>)
    30e6:	4798      	blx	r3
    30e8:	4b3a      	ldr	r3, [pc, #232]	; (31d4 <nm_drv_init+0x174>)
    30ea:	4798      	blx	r3
    30ec:	0002      	movs	r2, r0
    30ee:	4b3a      	ldr	r3, [pc, #232]	; (31d8 <nm_drv_init+0x178>)
    30f0:	0011      	movs	r1, r2
    30f2:	0018      	movs	r0, r3
    30f4:	4b32      	ldr	r3, [pc, #200]	; (31c0 <nm_drv_init+0x160>)
    30f6:	4798      	blx	r3
    30f8:	200d      	movs	r0, #13
    30fa:	4b34      	ldr	r3, [pc, #208]	; (31cc <nm_drv_init+0x16c>)
    30fc:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    30fe:	4b37      	ldr	r3, [pc, #220]	; (31dc <nm_drv_init+0x17c>)
    3100:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    3102:	230f      	movs	r3, #15
    3104:	18fc      	adds	r4, r7, r3
    3106:	230e      	movs	r3, #14
    3108:	18fb      	adds	r3, r7, r3
    310a:	781b      	ldrb	r3, [r3, #0]
    310c:	0018      	movs	r0, r3
    310e:	4b34      	ldr	r3, [pc, #208]	; (31e0 <nm_drv_init+0x180>)
    3110:	4798      	blx	r3
    3112:	0003      	movs	r3, r0
    3114:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3116:	230f      	movs	r3, #15
    3118:	18fb      	adds	r3, r7, r3
    311a:	781b      	ldrb	r3, [r3, #0]
    311c:	b25b      	sxtb	r3, r3
    311e:	2b00      	cmp	r3, #0
    3120:	d13a      	bne.n	3198 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    3122:	230f      	movs	r3, #15
    3124:	18fc      	adds	r4, r7, r3
    3126:	230e      	movs	r3, #14
    3128:	18fb      	adds	r3, r7, r3
    312a:	781b      	ldrb	r3, [r3, #0]
    312c:	0018      	movs	r0, r3
    312e:	4b2d      	ldr	r3, [pc, #180]	; (31e4 <nm_drv_init+0x184>)
    3130:	4798      	blx	r3
    3132:	0003      	movs	r3, r0
    3134:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3136:	230f      	movs	r3, #15
    3138:	18fb      	adds	r3, r7, r3
    313a:	781b      	ldrb	r3, [r3, #0]
    313c:	b25b      	sxtb	r3, r3
    313e:	2b00      	cmp	r3, #0
    3140:	d12c      	bne.n	319c <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    3142:	230e      	movs	r3, #14
    3144:	18fb      	adds	r3, r7, r3
    3146:	781b      	ldrb	r3, [r3, #0]
    3148:	2b02      	cmp	r3, #2
    314a:	d02a      	beq.n	31a2 <nm_drv_init+0x142>
    314c:	230e      	movs	r3, #14
    314e:	18fb      	adds	r3, r7, r3
    3150:	781b      	ldrb	r3, [r3, #0]
    3152:	2b03      	cmp	r3, #3
    3154:	d025      	beq.n	31a2 <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    3156:	230f      	movs	r3, #15
    3158:	18fc      	adds	r4, r7, r3
    315a:	4b23      	ldr	r3, [pc, #140]	; (31e8 <nm_drv_init+0x188>)
    315c:	4798      	blx	r3
    315e:	0003      	movs	r3, r0
    3160:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3162:	230f      	movs	r3, #15
    3164:	18fb      	adds	r3, r7, r3
    3166:	781b      	ldrb	r3, [r3, #0]
    3168:	b25b      	sxtb	r3, r3
    316a:	2b00      	cmp	r3, #0
    316c:	d00f      	beq.n	318e <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    316e:	2356      	movs	r3, #86	; 0x56
    3170:	33ff      	adds	r3, #255	; 0xff
    3172:	001a      	movs	r2, r3
    3174:	4910      	ldr	r1, [pc, #64]	; (31b8 <nm_drv_init+0x158>)
    3176:	4b11      	ldr	r3, [pc, #68]	; (31bc <nm_drv_init+0x15c>)
    3178:	0018      	movs	r0, r3
    317a:	4b11      	ldr	r3, [pc, #68]	; (31c0 <nm_drv_init+0x160>)
    317c:	4798      	blx	r3
    317e:	4b1b      	ldr	r3, [pc, #108]	; (31ec <nm_drv_init+0x18c>)
    3180:	0018      	movs	r0, r3
    3182:	4b11      	ldr	r3, [pc, #68]	; (31c8 <nm_drv_init+0x168>)
    3184:	4798      	blx	r3
    3186:	200d      	movs	r0, #13
    3188:	4b10      	ldr	r3, [pc, #64]	; (31cc <nm_drv_init+0x16c>)
    318a:	4798      	blx	r3
		goto ERR2;
    318c:	e007      	b.n	319e <nm_drv_init+0x13e>
	}
	return ret;
    318e:	230f      	movs	r3, #15
    3190:	18fb      	adds	r3, r7, r3
    3192:	781b      	ldrb	r3, [r3, #0]
    3194:	b25b      	sxtb	r3, r3
    3196:	e008      	b.n	31aa <nm_drv_init+0x14a>
		goto ERR2;
    3198:	46c0      	nop			; (mov r8, r8)
    319a:	e000      	b.n	319e <nm_drv_init+0x13e>
		goto ERR2;
    319c:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    319e:	4b14      	ldr	r3, [pc, #80]	; (31f0 <nm_drv_init+0x190>)
    31a0:	4798      	blx	r3
ERR1:
	return ret;
    31a2:	230f      	movs	r3, #15
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	b25b      	sxtb	r3, r3
}
    31aa:	0018      	movs	r0, r3
    31ac:	46bd      	mov	sp, r7
    31ae:	b005      	add	sp, #20
    31b0:	bd90      	pop	{r4, r7, pc}
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	00002bc1 	.word	0x00002bc1
    31b8:	00014190 	.word	0x00014190
    31bc:	000140c4 	.word	0x000140c4
    31c0:	0000efc9 	.word	0x0000efc9
    31c4:	000140d8 	.word	0x000140d8
    31c8:	0000f0e5 	.word	0x0000f0e5
    31cc:	0000effd 	.word	0x0000effd
    31d0:	000140f4 	.word	0x000140f4
    31d4:	00002561 	.word	0x00002561
    31d8:	00014100 	.word	0x00014100
    31dc:	00004535 	.word	0x00004535
    31e0:	000028b5 	.word	0x000028b5
    31e4:	00002a4d 	.word	0x00002a4d
    31e8:	000024ad 	.word	0x000024ad
    31ec:	00014110 	.word	0x00014110
    31f0:	00002bf5 	.word	0x00002bf5

000031f4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    31f4:	b590      	push	{r4, r7, lr}
    31f6:	b085      	sub	sp, #20
    31f8:	af00      	add	r7, sp, #0
    31fa:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    31fc:	230f      	movs	r3, #15
    31fe:	18fc      	adds	r4, r7, r3
    3200:	4b2d      	ldr	r3, [pc, #180]	; (32b8 <nm_drv_deinit+0xc4>)
    3202:	4798      	blx	r3
    3204:	0003      	movs	r3, r0
    3206:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3208:	230f      	movs	r3, #15
    320a:	18fb      	adds	r3, r7, r3
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	b25b      	sxtb	r3, r3
    3210:	2b00      	cmp	r3, #0
    3212:	d00e      	beq.n	3232 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    3214:	23b6      	movs	r3, #182	; 0xb6
    3216:	005a      	lsls	r2, r3, #1
    3218:	4928      	ldr	r1, [pc, #160]	; (32bc <nm_drv_deinit+0xc8>)
    321a:	4b29      	ldr	r3, [pc, #164]	; (32c0 <nm_drv_deinit+0xcc>)
    321c:	0018      	movs	r0, r3
    321e:	4b29      	ldr	r3, [pc, #164]	; (32c4 <nm_drv_deinit+0xd0>)
    3220:	4798      	blx	r3
    3222:	4b29      	ldr	r3, [pc, #164]	; (32c8 <nm_drv_deinit+0xd4>)
    3224:	0018      	movs	r0, r3
    3226:	4b29      	ldr	r3, [pc, #164]	; (32cc <nm_drv_deinit+0xd8>)
    3228:	4798      	blx	r3
    322a:	200d      	movs	r0, #13
    322c:	4b28      	ldr	r3, [pc, #160]	; (32d0 <nm_drv_deinit+0xdc>)
    322e:	4798      	blx	r3
		goto ERR1;
    3230:	e03a      	b.n	32a8 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    3232:	230f      	movs	r3, #15
    3234:	18fc      	adds	r4, r7, r3
    3236:	2000      	movs	r0, #0
    3238:	4b26      	ldr	r3, [pc, #152]	; (32d4 <nm_drv_deinit+0xe0>)
    323a:	4798      	blx	r3
    323c:	0003      	movs	r3, r0
    323e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3240:	230f      	movs	r3, #15
    3242:	18fb      	adds	r3, r7, r3
    3244:	781b      	ldrb	r3, [r3, #0]
    3246:	b25b      	sxtb	r3, r3
    3248:	2b00      	cmp	r3, #0
    324a:	d00f      	beq.n	326c <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    324c:	2374      	movs	r3, #116	; 0x74
    324e:	33ff      	adds	r3, #255	; 0xff
    3250:	001a      	movs	r2, r3
    3252:	491a      	ldr	r1, [pc, #104]	; (32bc <nm_drv_deinit+0xc8>)
    3254:	4b1a      	ldr	r3, [pc, #104]	; (32c0 <nm_drv_deinit+0xcc>)
    3256:	0018      	movs	r0, r3
    3258:	4b1a      	ldr	r3, [pc, #104]	; (32c4 <nm_drv_deinit+0xd0>)
    325a:	4798      	blx	r3
    325c:	4b1e      	ldr	r3, [pc, #120]	; (32d8 <nm_drv_deinit+0xe4>)
    325e:	0018      	movs	r0, r3
    3260:	4b1a      	ldr	r3, [pc, #104]	; (32cc <nm_drv_deinit+0xd8>)
    3262:	4798      	blx	r3
    3264:	200d      	movs	r0, #13
    3266:	4b1a      	ldr	r3, [pc, #104]	; (32d0 <nm_drv_deinit+0xdc>)
    3268:	4798      	blx	r3
		goto ERR1;
    326a:	e01d      	b.n	32a8 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    326c:	230f      	movs	r3, #15
    326e:	18fc      	adds	r4, r7, r3
    3270:	4b1a      	ldr	r3, [pc, #104]	; (32dc <nm_drv_deinit+0xe8>)
    3272:	4798      	blx	r3
    3274:	0003      	movs	r3, r0
    3276:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3278:	230f      	movs	r3, #15
    327a:	18fb      	adds	r3, r7, r3
    327c:	781b      	ldrb	r3, [r3, #0]
    327e:	b25b      	sxtb	r3, r3
    3280:	2b00      	cmp	r3, #0
    3282:	d00f      	beq.n	32a4 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3284:	237a      	movs	r3, #122	; 0x7a
    3286:	33ff      	adds	r3, #255	; 0xff
    3288:	001a      	movs	r2, r3
    328a:	490c      	ldr	r1, [pc, #48]	; (32bc <nm_drv_deinit+0xc8>)
    328c:	4b0c      	ldr	r3, [pc, #48]	; (32c0 <nm_drv_deinit+0xcc>)
    328e:	0018      	movs	r0, r3
    3290:	4b0c      	ldr	r3, [pc, #48]	; (32c4 <nm_drv_deinit+0xd0>)
    3292:	4798      	blx	r3
    3294:	4b12      	ldr	r3, [pc, #72]	; (32e0 <nm_drv_deinit+0xec>)
    3296:	0018      	movs	r0, r3
    3298:	4b0c      	ldr	r3, [pc, #48]	; (32cc <nm_drv_deinit+0xd8>)
    329a:	4798      	blx	r3
    329c:	200d      	movs	r0, #13
    329e:	4b0c      	ldr	r3, [pc, #48]	; (32d0 <nm_drv_deinit+0xdc>)
    32a0:	4798      	blx	r3
		goto ERR1;
    32a2:	e001      	b.n	32a8 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    32a4:	4b0f      	ldr	r3, [pc, #60]	; (32e4 <nm_drv_deinit+0xf0>)
    32a6:	4798      	blx	r3
#endif

ERR1:
	return ret;
    32a8:	230f      	movs	r3, #15
    32aa:	18fb      	adds	r3, r7, r3
    32ac:	781b      	ldrb	r3, [r3, #0]
    32ae:	b25b      	sxtb	r3, r3
}
    32b0:	0018      	movs	r0, r3
    32b2:	46bd      	mov	sp, r7
    32b4:	b005      	add	sp, #20
    32b6:	bd90      	pop	{r4, r7, pc}
    32b8:	00002b01 	.word	0x00002b01
    32bc:	0001419c 	.word	0x0001419c
    32c0:	000140c4 	.word	0x000140c4
    32c4:	0000efc9 	.word	0x0000efc9
    32c8:	00014130 	.word	0x00014130
    32cc:	0000f0e5 	.word	0x0000f0e5
    32d0:	0000effd 	.word	0x0000effd
    32d4:	0000598d 	.word	0x0000598d
    32d8:	00014150 	.word	0x00014150
    32dc:	00002bf5 	.word	0x00002bf5
    32e0:	00014174 	.word	0x00014174
    32e4:	00004681 	.word	0x00004681

000032e8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b086      	sub	sp, #24
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
    32f0:	000a      	movs	r2, r1
    32f2:	1cbb      	adds	r3, r7, #2
    32f4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    32f6:	230c      	movs	r3, #12
    32f8:	18fb      	adds	r3, r7, r3
    32fa:	2200      	movs	r2, #0
    32fc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    32fe:	230c      	movs	r3, #12
    3300:	18fb      	adds	r3, r7, r3
    3302:	687a      	ldr	r2, [r7, #4]
    3304:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3306:	230c      	movs	r3, #12
    3308:	18fb      	adds	r3, r7, r3
    330a:	1cba      	adds	r2, r7, #2
    330c:	8812      	ldrh	r2, [r2, #0]
    330e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3310:	230c      	movs	r3, #12
    3312:	18fb      	adds	r3, r7, r3
    3314:	0019      	movs	r1, r3
    3316:	2003      	movs	r0, #3
    3318:	4b03      	ldr	r3, [pc, #12]	; (3328 <nmi_spi_read+0x40>)
    331a:	4798      	blx	r3
    331c:	0003      	movs	r3, r0
}
    331e:	0018      	movs	r0, r3
    3320:	46bd      	mov	sp, r7
    3322:	b006      	add	sp, #24
    3324:	bd80      	pop	{r7, pc}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	00000ae1 	.word	0x00000ae1

0000332c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    332c:	b580      	push	{r7, lr}
    332e:	b086      	sub	sp, #24
    3330:	af00      	add	r7, sp, #0
    3332:	6078      	str	r0, [r7, #4]
    3334:	000a      	movs	r2, r1
    3336:	1cbb      	adds	r3, r7, #2
    3338:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    333a:	230c      	movs	r3, #12
    333c:	18fb      	adds	r3, r7, r3
    333e:	687a      	ldr	r2, [r7, #4]
    3340:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    3342:	230c      	movs	r3, #12
    3344:	18fb      	adds	r3, r7, r3
    3346:	2200      	movs	r2, #0
    3348:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    334a:	230c      	movs	r3, #12
    334c:	18fb      	adds	r3, r7, r3
    334e:	1cba      	adds	r2, r7, #2
    3350:	8812      	ldrh	r2, [r2, #0]
    3352:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3354:	230c      	movs	r3, #12
    3356:	18fb      	adds	r3, r7, r3
    3358:	0019      	movs	r1, r3
    335a:	2003      	movs	r0, #3
    335c:	4b03      	ldr	r3, [pc, #12]	; (336c <nmi_spi_write+0x40>)
    335e:	4798      	blx	r3
    3360:	0003      	movs	r3, r0
}
    3362:	0018      	movs	r0, r3
    3364:	46bd      	mov	sp, r7
    3366:	b006      	add	sp, #24
    3368:	bd80      	pop	{r7, pc}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	00000ae1 	.word	0x00000ae1

00003370 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    3370:	b580      	push	{r7, lr}
    3372:	b082      	sub	sp, #8
    3374:	af00      	add	r7, sp, #0
    3376:	0002      	movs	r2, r0
    3378:	1dfb      	adds	r3, r7, #7
    337a:	701a      	strb	r2, [r3, #0]
    337c:	1dbb      	adds	r3, r7, #6
    337e:	1c0a      	adds	r2, r1, #0
    3380:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    3382:	1dfb      	adds	r3, r7, #7
    3384:	781b      	ldrb	r3, [r3, #0]
    3386:	005a      	lsls	r2, r3, #1
    3388:	1dbb      	adds	r3, r7, #6
    338a:	781b      	ldrb	r3, [r3, #0]
    338c:	4053      	eors	r3, r2
    338e:	4a03      	ldr	r2, [pc, #12]	; (339c <crc7_byte+0x2c>)
    3390:	5cd3      	ldrb	r3, [r2, r3]
}
    3392:	0018      	movs	r0, r3
    3394:	46bd      	mov	sp, r7
    3396:	b002      	add	sp, #8
    3398:	bd80      	pop	{r7, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	000141ac 	.word	0x000141ac

000033a0 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    33a0:	b590      	push	{r4, r7, lr}
    33a2:	b085      	sub	sp, #20
    33a4:	af00      	add	r7, sp, #0
    33a6:	60b9      	str	r1, [r7, #8]
    33a8:	607a      	str	r2, [r7, #4]
    33aa:	230f      	movs	r3, #15
    33ac:	18fb      	adds	r3, r7, r3
    33ae:	1c02      	adds	r2, r0, #0
    33b0:	701a      	strb	r2, [r3, #0]
	while (len--)
    33b2:	e00e      	b.n	33d2 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    33b4:	68bb      	ldr	r3, [r7, #8]
    33b6:	1c5a      	adds	r2, r3, #1
    33b8:	60ba      	str	r2, [r7, #8]
    33ba:	781a      	ldrb	r2, [r3, #0]
    33bc:	230f      	movs	r3, #15
    33be:	18fc      	adds	r4, r7, r3
    33c0:	230f      	movs	r3, #15
    33c2:	18fb      	adds	r3, r7, r3
    33c4:	781b      	ldrb	r3, [r3, #0]
    33c6:	0011      	movs	r1, r2
    33c8:	0018      	movs	r0, r3
    33ca:	4b08      	ldr	r3, [pc, #32]	; (33ec <crc7+0x4c>)
    33cc:	4798      	blx	r3
    33ce:	0003      	movs	r3, r0
    33d0:	7023      	strb	r3, [r4, #0]
	while (len--)
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	1e5a      	subs	r2, r3, #1
    33d6:	607a      	str	r2, [r7, #4]
    33d8:	2b00      	cmp	r3, #0
    33da:	d1eb      	bne.n	33b4 <crc7+0x14>
	return crc;
    33dc:	230f      	movs	r3, #15
    33de:	18fb      	adds	r3, r7, r3
    33e0:	781b      	ldrb	r3, [r3, #0]
}
    33e2:	0018      	movs	r0, r3
    33e4:	46bd      	mov	sp, r7
    33e6:	b005      	add	sp, #20
    33e8:	bd90      	pop	{r4, r7, pc}
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	00003371 	.word	0x00003371

000033f0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    33f0:	b590      	push	{r4, r7, lr}
    33f2:	b089      	sub	sp, #36	; 0x24
    33f4:	af00      	add	r7, sp, #0
    33f6:	60b9      	str	r1, [r7, #8]
    33f8:	607a      	str	r2, [r7, #4]
    33fa:	603b      	str	r3, [r7, #0]
    33fc:	230f      	movs	r3, #15
    33fe:	18fb      	adds	r3, r7, r3
    3400:	1c02      	adds	r2, r0, #0
    3402:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    3404:	231f      	movs	r3, #31
    3406:	18fb      	adds	r3, r7, r3
    3408:	2205      	movs	r2, #5
    340a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    340c:	231e      	movs	r3, #30
    340e:	18fb      	adds	r3, r7, r3
    3410:	2201      	movs	r2, #1
    3412:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    3414:	2314      	movs	r3, #20
    3416:	18fb      	adds	r3, r7, r3
    3418:	220f      	movs	r2, #15
    341a:	18ba      	adds	r2, r7, r2
    341c:	7812      	ldrb	r2, [r2, #0]
    341e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    3420:	230f      	movs	r3, #15
    3422:	18fb      	adds	r3, r7, r3
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	3bc1      	subs	r3, #193	; 0xc1
    3428:	2b0e      	cmp	r3, #14
    342a:	d900      	bls.n	342e <spi_cmd+0x3e>
    342c:	e11b      	b.n	3666 <spi_cmd+0x276>
    342e:	009a      	lsls	r2, r3, #2
    3430:	4bb6      	ldr	r3, [pc, #728]	; (370c <spi_cmd+0x31c>)
    3432:	18d3      	adds	r3, r2, r3
    3434:	681b      	ldr	r3, [r3, #0]
    3436:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    3438:	68bb      	ldr	r3, [r7, #8]
    343a:	0c1b      	lsrs	r3, r3, #16
    343c:	b2da      	uxtb	r2, r3
    343e:	2314      	movs	r3, #20
    3440:	18fb      	adds	r3, r7, r3
    3442:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3444:	68bb      	ldr	r3, [r7, #8]
    3446:	0a1b      	lsrs	r3, r3, #8
    3448:	b2da      	uxtb	r2, r3
    344a:	2314      	movs	r3, #20
    344c:	18fb      	adds	r3, r7, r3
    344e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3450:	68bb      	ldr	r3, [r7, #8]
    3452:	b2da      	uxtb	r2, r3
    3454:	2314      	movs	r3, #20
    3456:	18fb      	adds	r3, r7, r3
    3458:	70da      	strb	r2, [r3, #3]
		len = 5;
    345a:	231f      	movs	r3, #31
    345c:	18fb      	adds	r3, r7, r3
    345e:	2205      	movs	r2, #5
    3460:	701a      	strb	r2, [r3, #0]
		break;
    3462:	e105      	b.n	3670 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    3464:	68bb      	ldr	r3, [r7, #8]
    3466:	0a1b      	lsrs	r3, r3, #8
    3468:	b2da      	uxtb	r2, r3
    346a:	2314      	movs	r3, #20
    346c:	18fb      	adds	r3, r7, r3
    346e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3470:	2330      	movs	r3, #48	; 0x30
    3472:	18fb      	adds	r3, r7, r3
    3474:	781b      	ldrb	r3, [r3, #0]
    3476:	2b00      	cmp	r3, #0
    3478:	d009      	beq.n	348e <spi_cmd+0x9e>
    347a:	2314      	movs	r3, #20
    347c:	18fb      	adds	r3, r7, r3
    347e:	785b      	ldrb	r3, [r3, #1]
    3480:	2280      	movs	r2, #128	; 0x80
    3482:	4252      	negs	r2, r2
    3484:	4313      	orrs	r3, r2
    3486:	b2da      	uxtb	r2, r3
    3488:	2314      	movs	r3, #20
    348a:	18fb      	adds	r3, r7, r3
    348c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    348e:	68bb      	ldr	r3, [r7, #8]
    3490:	b2da      	uxtb	r2, r3
    3492:	2314      	movs	r3, #20
    3494:	18fb      	adds	r3, r7, r3
    3496:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3498:	2314      	movs	r3, #20
    349a:	18fb      	adds	r3, r7, r3
    349c:	2200      	movs	r2, #0
    349e:	70da      	strb	r2, [r3, #3]
		len = 5;
    34a0:	231f      	movs	r3, #31
    34a2:	18fb      	adds	r3, r7, r3
    34a4:	2205      	movs	r2, #5
    34a6:	701a      	strb	r2, [r3, #0]
		break;
    34a8:	e0e2      	b.n	3670 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    34aa:	2314      	movs	r3, #20
    34ac:	18fb      	adds	r3, r7, r3
    34ae:	2200      	movs	r2, #0
    34b0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    34b2:	2314      	movs	r3, #20
    34b4:	18fb      	adds	r3, r7, r3
    34b6:	2200      	movs	r2, #0
    34b8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    34ba:	2314      	movs	r3, #20
    34bc:	18fb      	adds	r3, r7, r3
    34be:	2200      	movs	r2, #0
    34c0:	70da      	strb	r2, [r3, #3]
		len = 5;
    34c2:	231f      	movs	r3, #31
    34c4:	18fb      	adds	r3, r7, r3
    34c6:	2205      	movs	r2, #5
    34c8:	701a      	strb	r2, [r3, #0]
		break;
    34ca:	e0d1      	b.n	3670 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    34cc:	2314      	movs	r3, #20
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	2200      	movs	r2, #0
    34d2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    34d4:	2314      	movs	r3, #20
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	2200      	movs	r2, #0
    34da:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    34dc:	2314      	movs	r3, #20
    34de:	18fb      	adds	r3, r7, r3
    34e0:	2200      	movs	r2, #0
    34e2:	70da      	strb	r2, [r3, #3]
		len = 5;
    34e4:	231f      	movs	r3, #31
    34e6:	18fb      	adds	r3, r7, r3
    34e8:	2205      	movs	r2, #5
    34ea:	701a      	strb	r2, [r3, #0]
		break;
    34ec:	e0c0      	b.n	3670 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    34ee:	2314      	movs	r3, #20
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	22ff      	movs	r2, #255	; 0xff
    34f4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    34f6:	2314      	movs	r3, #20
    34f8:	18fb      	adds	r3, r7, r3
    34fa:	22ff      	movs	r2, #255	; 0xff
    34fc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    34fe:	2314      	movs	r3, #20
    3500:	18fb      	adds	r3, r7, r3
    3502:	22ff      	movs	r2, #255	; 0xff
    3504:	70da      	strb	r2, [r3, #3]
		len = 5;
    3506:	231f      	movs	r3, #31
    3508:	18fb      	adds	r3, r7, r3
    350a:	2205      	movs	r2, #5
    350c:	701a      	strb	r2, [r3, #0]
		break;
    350e:	e0af      	b.n	3670 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3510:	68bb      	ldr	r3, [r7, #8]
    3512:	0c1b      	lsrs	r3, r3, #16
    3514:	b2da      	uxtb	r2, r3
    3516:	2314      	movs	r3, #20
    3518:	18fb      	adds	r3, r7, r3
    351a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    351c:	68bb      	ldr	r3, [r7, #8]
    351e:	0a1b      	lsrs	r3, r3, #8
    3520:	b2da      	uxtb	r2, r3
    3522:	2314      	movs	r3, #20
    3524:	18fb      	adds	r3, r7, r3
    3526:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3528:	68bb      	ldr	r3, [r7, #8]
    352a:	b2da      	uxtb	r2, r3
    352c:	2314      	movs	r3, #20
    352e:	18fb      	adds	r3, r7, r3
    3530:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    3532:	683b      	ldr	r3, [r7, #0]
    3534:	0a1b      	lsrs	r3, r3, #8
    3536:	b2da      	uxtb	r2, r3
    3538:	2314      	movs	r3, #20
    353a:	18fb      	adds	r3, r7, r3
    353c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    353e:	683b      	ldr	r3, [r7, #0]
    3540:	b2da      	uxtb	r2, r3
    3542:	2314      	movs	r3, #20
    3544:	18fb      	adds	r3, r7, r3
    3546:	715a      	strb	r2, [r3, #5]
		len = 7;
    3548:	231f      	movs	r3, #31
    354a:	18fb      	adds	r3, r7, r3
    354c:	2207      	movs	r2, #7
    354e:	701a      	strb	r2, [r3, #0]
		break;
    3550:	e08e      	b.n	3670 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    3552:	68bb      	ldr	r3, [r7, #8]
    3554:	0c1b      	lsrs	r3, r3, #16
    3556:	b2da      	uxtb	r2, r3
    3558:	2314      	movs	r3, #20
    355a:	18fb      	adds	r3, r7, r3
    355c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    355e:	68bb      	ldr	r3, [r7, #8]
    3560:	0a1b      	lsrs	r3, r3, #8
    3562:	b2da      	uxtb	r2, r3
    3564:	2314      	movs	r3, #20
    3566:	18fb      	adds	r3, r7, r3
    3568:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    356a:	68bb      	ldr	r3, [r7, #8]
    356c:	b2da      	uxtb	r2, r3
    356e:	2314      	movs	r3, #20
    3570:	18fb      	adds	r3, r7, r3
    3572:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    3574:	683b      	ldr	r3, [r7, #0]
    3576:	0c1b      	lsrs	r3, r3, #16
    3578:	b2da      	uxtb	r2, r3
    357a:	2314      	movs	r3, #20
    357c:	18fb      	adds	r3, r7, r3
    357e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    3580:	683b      	ldr	r3, [r7, #0]
    3582:	0a1b      	lsrs	r3, r3, #8
    3584:	b2da      	uxtb	r2, r3
    3586:	2314      	movs	r3, #20
    3588:	18fb      	adds	r3, r7, r3
    358a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    358c:	683b      	ldr	r3, [r7, #0]
    358e:	b2da      	uxtb	r2, r3
    3590:	2314      	movs	r3, #20
    3592:	18fb      	adds	r3, r7, r3
    3594:	719a      	strb	r2, [r3, #6]
		len = 8;
    3596:	231f      	movs	r3, #31
    3598:	18fb      	adds	r3, r7, r3
    359a:	2208      	movs	r2, #8
    359c:	701a      	strb	r2, [r3, #0]
		break;
    359e:	e067      	b.n	3670 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    35a0:	68bb      	ldr	r3, [r7, #8]
    35a2:	0a1b      	lsrs	r3, r3, #8
    35a4:	b2da      	uxtb	r2, r3
    35a6:	2314      	movs	r3, #20
    35a8:	18fb      	adds	r3, r7, r3
    35aa:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    35ac:	2330      	movs	r3, #48	; 0x30
    35ae:	18fb      	adds	r3, r7, r3
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	2b00      	cmp	r3, #0
    35b4:	d009      	beq.n	35ca <spi_cmd+0x1da>
    35b6:	2314      	movs	r3, #20
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	785b      	ldrb	r3, [r3, #1]
    35bc:	2280      	movs	r2, #128	; 0x80
    35be:	4252      	negs	r2, r2
    35c0:	4313      	orrs	r3, r2
    35c2:	b2da      	uxtb	r2, r3
    35c4:	2314      	movs	r3, #20
    35c6:	18fb      	adds	r3, r7, r3
    35c8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    35ca:	68bb      	ldr	r3, [r7, #8]
    35cc:	b2da      	uxtb	r2, r3
    35ce:	2314      	movs	r3, #20
    35d0:	18fb      	adds	r3, r7, r3
    35d2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	0e1b      	lsrs	r3, r3, #24
    35d8:	b2da      	uxtb	r2, r3
    35da:	2314      	movs	r3, #20
    35dc:	18fb      	adds	r3, r7, r3
    35de:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	0c1b      	lsrs	r3, r3, #16
    35e4:	b2da      	uxtb	r2, r3
    35e6:	2314      	movs	r3, #20
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	0a1b      	lsrs	r3, r3, #8
    35f0:	b2da      	uxtb	r2, r3
    35f2:	2314      	movs	r3, #20
    35f4:	18fb      	adds	r3, r7, r3
    35f6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	b2da      	uxtb	r2, r3
    35fc:	2314      	movs	r3, #20
    35fe:	18fb      	adds	r3, r7, r3
    3600:	719a      	strb	r2, [r3, #6]
		len = 8;
    3602:	231f      	movs	r3, #31
    3604:	18fb      	adds	r3, r7, r3
    3606:	2208      	movs	r2, #8
    3608:	701a      	strb	r2, [r3, #0]
		break;
    360a:	e031      	b.n	3670 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    360c:	68bb      	ldr	r3, [r7, #8]
    360e:	0c1b      	lsrs	r3, r3, #16
    3610:	b2da      	uxtb	r2, r3
    3612:	2314      	movs	r3, #20
    3614:	18fb      	adds	r3, r7, r3
    3616:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3618:	68bb      	ldr	r3, [r7, #8]
    361a:	0a1b      	lsrs	r3, r3, #8
    361c:	b2da      	uxtb	r2, r3
    361e:	2314      	movs	r3, #20
    3620:	18fb      	adds	r3, r7, r3
    3622:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    3624:	68bb      	ldr	r3, [r7, #8]
    3626:	b2da      	uxtb	r2, r3
    3628:	2314      	movs	r3, #20
    362a:	18fb      	adds	r3, r7, r3
    362c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	0e1b      	lsrs	r3, r3, #24
    3632:	b2da      	uxtb	r2, r3
    3634:	2314      	movs	r3, #20
    3636:	18fb      	adds	r3, r7, r3
    3638:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	0c1b      	lsrs	r3, r3, #16
    363e:	b2da      	uxtb	r2, r3
    3640:	2314      	movs	r3, #20
    3642:	18fb      	adds	r3, r7, r3
    3644:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	0a1b      	lsrs	r3, r3, #8
    364a:	b2da      	uxtb	r2, r3
    364c:	2314      	movs	r3, #20
    364e:	18fb      	adds	r3, r7, r3
    3650:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	b2da      	uxtb	r2, r3
    3656:	2314      	movs	r3, #20
    3658:	18fb      	adds	r3, r7, r3
    365a:	71da      	strb	r2, [r3, #7]
		len = 9;
    365c:	231f      	movs	r3, #31
    365e:	18fb      	adds	r3, r7, r3
    3660:	2209      	movs	r2, #9
    3662:	701a      	strb	r2, [r3, #0]
		break;
    3664:	e004      	b.n	3670 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    3666:	231e      	movs	r3, #30
    3668:	18fb      	adds	r3, r7, r3
    366a:	2200      	movs	r2, #0
    366c:	701a      	strb	r2, [r3, #0]
		break;
    366e:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3670:	231e      	movs	r3, #30
    3672:	18fb      	adds	r3, r7, r3
    3674:	781b      	ldrb	r3, [r3, #0]
    3676:	b25b      	sxtb	r3, r3
    3678:	2b00      	cmp	r3, #0
    367a:	d03f      	beq.n	36fc <spi_cmd+0x30c>
		if (!gu8Crc_off)
    367c:	4b24      	ldr	r3, [pc, #144]	; (3710 <spi_cmd+0x320>)
    367e:	781b      	ldrb	r3, [r3, #0]
    3680:	2b00      	cmp	r3, #0
    3682:	d115      	bne.n	36b0 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3684:	231f      	movs	r3, #31
    3686:	18fb      	adds	r3, r7, r3
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	1e5c      	subs	r4, r3, #1
    368c:	231f      	movs	r3, #31
    368e:	18fb      	adds	r3, r7, r3
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	3b01      	subs	r3, #1
    3694:	001a      	movs	r2, r3
    3696:	2314      	movs	r3, #20
    3698:	18fb      	adds	r3, r7, r3
    369a:	0019      	movs	r1, r3
    369c:	207f      	movs	r0, #127	; 0x7f
    369e:	4b1d      	ldr	r3, [pc, #116]	; (3714 <spi_cmd+0x324>)
    36a0:	4798      	blx	r3
    36a2:	0003      	movs	r3, r0
    36a4:	18db      	adds	r3, r3, r3
    36a6:	b2da      	uxtb	r2, r3
    36a8:	2314      	movs	r3, #20
    36aa:	18fb      	adds	r3, r7, r3
    36ac:	551a      	strb	r2, [r3, r4]
    36ae:	e006      	b.n	36be <spi_cmd+0x2ce>
		else
			len-=1;
    36b0:	231f      	movs	r3, #31
    36b2:	18fb      	adds	r3, r7, r3
    36b4:	221f      	movs	r2, #31
    36b6:	18ba      	adds	r2, r7, r2
    36b8:	7812      	ldrb	r2, [r2, #0]
    36ba:	3a01      	subs	r2, #1
    36bc:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    36be:	231f      	movs	r3, #31
    36c0:	18fb      	adds	r3, r7, r3
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	b29a      	uxth	r2, r3
    36c6:	2314      	movs	r3, #20
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	0011      	movs	r1, r2
    36cc:	0018      	movs	r0, r3
    36ce:	4b12      	ldr	r3, [pc, #72]	; (3718 <spi_cmd+0x328>)
    36d0:	4798      	blx	r3
    36d2:	1e03      	subs	r3, r0, #0
    36d4:	d012      	beq.n	36fc <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    36d6:	2328      	movs	r3, #40	; 0x28
    36d8:	33ff      	adds	r3, #255	; 0xff
    36da:	001a      	movs	r2, r3
    36dc:	490f      	ldr	r1, [pc, #60]	; (371c <spi_cmd+0x32c>)
    36de:	4b10      	ldr	r3, [pc, #64]	; (3720 <spi_cmd+0x330>)
    36e0:	0018      	movs	r0, r3
    36e2:	4b10      	ldr	r3, [pc, #64]	; (3724 <spi_cmd+0x334>)
    36e4:	4798      	blx	r3
    36e6:	4b10      	ldr	r3, [pc, #64]	; (3728 <spi_cmd+0x338>)
    36e8:	0018      	movs	r0, r3
    36ea:	4b10      	ldr	r3, [pc, #64]	; (372c <spi_cmd+0x33c>)
    36ec:	4798      	blx	r3
    36ee:	200d      	movs	r0, #13
    36f0:	4b0f      	ldr	r3, [pc, #60]	; (3730 <spi_cmd+0x340>)
    36f2:	4798      	blx	r3
			result = N_FAIL;
    36f4:	231e      	movs	r3, #30
    36f6:	18fb      	adds	r3, r7, r3
    36f8:	2200      	movs	r2, #0
    36fa:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    36fc:	231e      	movs	r3, #30
    36fe:	18fb      	adds	r3, r7, r3
    3700:	781b      	ldrb	r3, [r3, #0]
    3702:	b25b      	sxtb	r3, r3
}
    3704:	0018      	movs	r0, r3
    3706:	46bd      	mov	sp, r7
    3708:	b009      	add	sp, #36	; 0x24
    370a:	bd90      	pop	{r4, r7, pc}
    370c:	00014804 	.word	0x00014804
    3710:	2000023c 	.word	0x2000023c
    3714:	000033a1 	.word	0x000033a1
    3718:	0000332d 	.word	0x0000332d
    371c:	00014840 	.word	0x00014840
    3720:	000142ac 	.word	0x000142ac
    3724:	0000efc9 	.word	0x0000efc9
    3728:	000142c0 	.word	0x000142c0
    372c:	0000f0e5 	.word	0x0000f0e5
    3730:	0000effd 	.word	0x0000effd

00003734 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    3734:	b590      	push	{r4, r7, lr}
    3736:	b085      	sub	sp, #20
    3738:	af00      	add	r7, sp, #0
    373a:	0002      	movs	r2, r0
    373c:	1dfb      	adds	r3, r7, #7
    373e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    3740:	230e      	movs	r3, #14
    3742:	18fb      	adds	r3, r7, r3
    3744:	2201      	movs	r2, #1
    3746:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    3748:	4b31      	ldr	r3, [pc, #196]	; (3810 <spi_data_rsp+0xdc>)
    374a:	781b      	ldrb	r3, [r3, #0]
    374c:	2b00      	cmp	r3, #0
    374e:	d104      	bne.n	375a <spi_data_rsp+0x26>
		len = 2;
    3750:	230f      	movs	r3, #15
    3752:	18fb      	adds	r3, r7, r3
    3754:	2202      	movs	r2, #2
    3756:	701a      	strb	r2, [r3, #0]
    3758:	e003      	b.n	3762 <spi_data_rsp+0x2e>
	else
		len = 3;
    375a:	230f      	movs	r3, #15
    375c:	18fb      	adds	r3, r7, r3
    375e:	2203      	movs	r2, #3
    3760:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3762:	230f      	movs	r3, #15
    3764:	18fb      	adds	r3, r7, r3
    3766:	781b      	ldrb	r3, [r3, #0]
    3768:	b29a      	uxth	r2, r3
    376a:	2308      	movs	r3, #8
    376c:	18fb      	adds	r3, r7, r3
    376e:	0011      	movs	r1, r2
    3770:	0018      	movs	r0, r3
    3772:	4b28      	ldr	r3, [pc, #160]	; (3814 <spi_data_rsp+0xe0>)
    3774:	4798      	blx	r3
    3776:	1e03      	subs	r3, r0, #0
    3778:	d013      	beq.n	37a2 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    377a:	233c      	movs	r3, #60	; 0x3c
    377c:	33ff      	adds	r3, #255	; 0xff
    377e:	001a      	movs	r2, r3
    3780:	4925      	ldr	r1, [pc, #148]	; (3818 <spi_data_rsp+0xe4>)
    3782:	4b26      	ldr	r3, [pc, #152]	; (381c <spi_data_rsp+0xe8>)
    3784:	0018      	movs	r0, r3
    3786:	4b26      	ldr	r3, [pc, #152]	; (3820 <spi_data_rsp+0xec>)
    3788:	4798      	blx	r3
    378a:	4b26      	ldr	r3, [pc, #152]	; (3824 <spi_data_rsp+0xf0>)
    378c:	0018      	movs	r0, r3
    378e:	4b26      	ldr	r3, [pc, #152]	; (3828 <spi_data_rsp+0xf4>)
    3790:	4798      	blx	r3
    3792:	200d      	movs	r0, #13
    3794:	4b25      	ldr	r3, [pc, #148]	; (382c <spi_data_rsp+0xf8>)
    3796:	4798      	blx	r3
		result = N_FAIL;
    3798:	230e      	movs	r3, #14
    379a:	18fb      	adds	r3, r7, r3
    379c:	2200      	movs	r2, #0
    379e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    37a0:	e02e      	b.n	3800 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    37a2:	230f      	movs	r3, #15
    37a4:	18fb      	adds	r3, r7, r3
    37a6:	781b      	ldrb	r3, [r3, #0]
    37a8:	3b01      	subs	r3, #1
    37aa:	2208      	movs	r2, #8
    37ac:	18ba      	adds	r2, r7, r2
    37ae:	5cd3      	ldrb	r3, [r2, r3]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d108      	bne.n	37c6 <spi_data_rsp+0x92>
    37b4:	230f      	movs	r3, #15
    37b6:	18fb      	adds	r3, r7, r3
    37b8:	781b      	ldrb	r3, [r3, #0]
    37ba:	3b02      	subs	r3, #2
    37bc:	2208      	movs	r2, #8
    37be:	18ba      	adds	r2, r7, r2
    37c0:	5cd3      	ldrb	r3, [r2, r3]
    37c2:	2bc3      	cmp	r3, #195	; 0xc3
    37c4:	d01c      	beq.n	3800 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    37c6:	23a1      	movs	r3, #161	; 0xa1
    37c8:	005a      	lsls	r2, r3, #1
    37ca:	4913      	ldr	r1, [pc, #76]	; (3818 <spi_data_rsp+0xe4>)
    37cc:	4b13      	ldr	r3, [pc, #76]	; (381c <spi_data_rsp+0xe8>)
    37ce:	0018      	movs	r0, r3
    37d0:	4b13      	ldr	r3, [pc, #76]	; (3820 <spi_data_rsp+0xec>)
    37d2:	4798      	blx	r3
    37d4:	2308      	movs	r3, #8
    37d6:	18fb      	adds	r3, r7, r3
    37d8:	781b      	ldrb	r3, [r3, #0]
    37da:	0019      	movs	r1, r3
    37dc:	2308      	movs	r3, #8
    37de:	18fb      	adds	r3, r7, r3
    37e0:	785b      	ldrb	r3, [r3, #1]
    37e2:	001a      	movs	r2, r3
    37e4:	2308      	movs	r3, #8
    37e6:	18fb      	adds	r3, r7, r3
    37e8:	789b      	ldrb	r3, [r3, #2]
    37ea:	4811      	ldr	r0, [pc, #68]	; (3830 <spi_data_rsp+0xfc>)
    37ec:	4c0c      	ldr	r4, [pc, #48]	; (3820 <spi_data_rsp+0xec>)
    37ee:	47a0      	blx	r4
    37f0:	200d      	movs	r0, #13
    37f2:	4b0e      	ldr	r3, [pc, #56]	; (382c <spi_data_rsp+0xf8>)
    37f4:	4798      	blx	r3
		result = N_FAIL;
    37f6:	230e      	movs	r3, #14
    37f8:	18fb      	adds	r3, r7, r3
    37fa:	2200      	movs	r2, #0
    37fc:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    37fe:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    3800:	230e      	movs	r3, #14
    3802:	18fb      	adds	r3, r7, r3
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	b25b      	sxtb	r3, r3
}
    3808:	0018      	movs	r0, r3
    380a:	46bd      	mov	sp, r7
    380c:	b005      	add	sp, #20
    380e:	bd90      	pop	{r4, r7, pc}
    3810:	2000023c 	.word	0x2000023c
    3814:	000032e9 	.word	0x000032e9
    3818:	00014848 	.word	0x00014848
    381c:	000142ac 	.word	0x000142ac
    3820:	0000efc9 	.word	0x0000efc9
    3824:	000142ec 	.word	0x000142ec
    3828:	0000f0e5 	.word	0x0000f0e5
    382c:	0000effd 	.word	0x0000effd
    3830:	0001430c 	.word	0x0001430c

00003834 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	0002      	movs	r2, r0
    383c:	1dfb      	adds	r3, r7, #7
    383e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    3840:	230f      	movs	r3, #15
    3842:	18fb      	adds	r3, r7, r3
    3844:	2201      	movs	r2, #1
    3846:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3848:	1dfb      	adds	r3, r7, #7
    384a:	781b      	ldrb	r3, [r3, #0]
    384c:	2bcf      	cmp	r3, #207	; 0xcf
    384e:	d007      	beq.n	3860 <spi_cmd_rsp+0x2c>
    3850:	1dfb      	adds	r3, r7, #7
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	2bc5      	cmp	r3, #197	; 0xc5
    3856:	d003      	beq.n	3860 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    3858:	1dfb      	adds	r3, r7, #7
    385a:	781b      	ldrb	r3, [r3, #0]
    385c:	2bc6      	cmp	r3, #198	; 0xc6
    385e:	d10c      	bne.n	387a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3860:	230d      	movs	r3, #13
    3862:	18fb      	adds	r3, r7, r3
    3864:	2101      	movs	r1, #1
    3866:	0018      	movs	r0, r3
    3868:	4b39      	ldr	r3, [pc, #228]	; (3950 <spi_cmd_rsp+0x11c>)
    386a:	4798      	blx	r3
    386c:	1e03      	subs	r3, r0, #0
    386e:	d004      	beq.n	387a <spi_cmd_rsp+0x46>
			result = N_FAIL;
    3870:	230f      	movs	r3, #15
    3872:	18fb      	adds	r3, r7, r3
    3874:	2200      	movs	r2, #0
    3876:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3878:	e061      	b.n	393e <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    387a:	230e      	movs	r3, #14
    387c:	18fb      	adds	r3, r7, r3
    387e:	220a      	movs	r2, #10
    3880:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3882:	230d      	movs	r3, #13
    3884:	18fb      	adds	r3, r7, r3
    3886:	2101      	movs	r1, #1
    3888:	0018      	movs	r0, r3
    388a:	4b31      	ldr	r3, [pc, #196]	; (3950 <spi_cmd_rsp+0x11c>)
    388c:	4798      	blx	r3
    388e:	1e03      	subs	r3, r0, #0
    3890:	d012      	beq.n	38b8 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3892:	23b1      	movs	r3, #177	; 0xb1
    3894:	005a      	lsls	r2, r3, #1
    3896:	492f      	ldr	r1, [pc, #188]	; (3954 <spi_cmd_rsp+0x120>)
    3898:	4b2f      	ldr	r3, [pc, #188]	; (3958 <spi_cmd_rsp+0x124>)
    389a:	0018      	movs	r0, r3
    389c:	4b2f      	ldr	r3, [pc, #188]	; (395c <spi_cmd_rsp+0x128>)
    389e:	4798      	blx	r3
    38a0:	4b2f      	ldr	r3, [pc, #188]	; (3960 <spi_cmd_rsp+0x12c>)
    38a2:	0018      	movs	r0, r3
    38a4:	4b2f      	ldr	r3, [pc, #188]	; (3964 <spi_cmd_rsp+0x130>)
    38a6:	4798      	blx	r3
    38a8:	200d      	movs	r0, #13
    38aa:	4b2f      	ldr	r3, [pc, #188]	; (3968 <spi_cmd_rsp+0x134>)
    38ac:	4798      	blx	r3
			result = N_FAIL;
    38ae:	230f      	movs	r3, #15
    38b0:	18fb      	adds	r3, r7, r3
    38b2:	2200      	movs	r2, #0
    38b4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    38b6:	e042      	b.n	393e <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    38b8:	230d      	movs	r3, #13
    38ba:	18fb      	adds	r3, r7, r3
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	1dfa      	adds	r2, r7, #7
    38c0:	7812      	ldrb	r2, [r2, #0]
    38c2:	429a      	cmp	r2, r3
    38c4:	d00b      	beq.n	38de <spi_cmd_rsp+0xaa>
    38c6:	230e      	movs	r3, #14
    38c8:	18fb      	adds	r3, r7, r3
    38ca:	781b      	ldrb	r3, [r3, #0]
    38cc:	b25b      	sxtb	r3, r3
    38ce:	b2da      	uxtb	r2, r3
    38d0:	3a01      	subs	r2, #1
    38d2:	b2d1      	uxtb	r1, r2
    38d4:	220e      	movs	r2, #14
    38d6:	18ba      	adds	r2, r7, r2
    38d8:	7011      	strb	r1, [r2, #0]
    38da:	2b00      	cmp	r3, #0
    38dc:	dcd1      	bgt.n	3882 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    38de:	230e      	movs	r3, #14
    38e0:	18fb      	adds	r3, r7, r3
    38e2:	220a      	movs	r2, #10
    38e4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    38e6:	230d      	movs	r3, #13
    38e8:	18fb      	adds	r3, r7, r3
    38ea:	2101      	movs	r1, #1
    38ec:	0018      	movs	r0, r3
    38ee:	4b18      	ldr	r3, [pc, #96]	; (3950 <spi_cmd_rsp+0x11c>)
    38f0:	4798      	blx	r3
    38f2:	1e03      	subs	r3, r0, #0
    38f4:	d012      	beq.n	391c <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    38f6:	23b8      	movs	r3, #184	; 0xb8
    38f8:	005a      	lsls	r2, r3, #1
    38fa:	4916      	ldr	r1, [pc, #88]	; (3954 <spi_cmd_rsp+0x120>)
    38fc:	4b16      	ldr	r3, [pc, #88]	; (3958 <spi_cmd_rsp+0x124>)
    38fe:	0018      	movs	r0, r3
    3900:	4b16      	ldr	r3, [pc, #88]	; (395c <spi_cmd_rsp+0x128>)
    3902:	4798      	blx	r3
    3904:	4b16      	ldr	r3, [pc, #88]	; (3960 <spi_cmd_rsp+0x12c>)
    3906:	0018      	movs	r0, r3
    3908:	4b16      	ldr	r3, [pc, #88]	; (3964 <spi_cmd_rsp+0x130>)
    390a:	4798      	blx	r3
    390c:	200d      	movs	r0, #13
    390e:	4b16      	ldr	r3, [pc, #88]	; (3968 <spi_cmd_rsp+0x134>)
    3910:	4798      	blx	r3
			result = N_FAIL;
    3912:	230f      	movs	r3, #15
    3914:	18fb      	adds	r3, r7, r3
    3916:	2200      	movs	r2, #0
    3918:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    391a:	e010      	b.n	393e <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    391c:	230d      	movs	r3, #13
    391e:	18fb      	adds	r3, r7, r3
    3920:	781b      	ldrb	r3, [r3, #0]
    3922:	2b00      	cmp	r3, #0
    3924:	d00b      	beq.n	393e <spi_cmd_rsp+0x10a>
    3926:	230e      	movs	r3, #14
    3928:	18fb      	adds	r3, r7, r3
    392a:	781b      	ldrb	r3, [r3, #0]
    392c:	b25b      	sxtb	r3, r3
    392e:	b2da      	uxtb	r2, r3
    3930:	3a01      	subs	r2, #1
    3932:	b2d1      	uxtb	r1, r2
    3934:	220e      	movs	r2, #14
    3936:	18ba      	adds	r2, r7, r2
    3938:	7011      	strb	r1, [r2, #0]
    393a:	2b00      	cmp	r3, #0
    393c:	dcd3      	bgt.n	38e6 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    393e:	230f      	movs	r3, #15
    3940:	18fb      	adds	r3, r7, r3
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	b25b      	sxtb	r3, r3
}
    3946:	0018      	movs	r0, r3
    3948:	46bd      	mov	sp, r7
    394a:	b004      	add	sp, #16
    394c:	bd80      	pop	{r7, pc}
    394e:	46c0      	nop			; (mov r8, r8)
    3950:	000032e9 	.word	0x000032e9
    3954:	00014858 	.word	0x00014858
    3958:	000142ac 	.word	0x000142ac
    395c:	0000efc9 	.word	0x0000efc9
    3960:	0001433c 	.word	0x0001433c
    3964:	0000f0e5 	.word	0x0000f0e5
    3968:	0000effd 	.word	0x0000effd

0000396c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    396c:	b580      	push	{r7, lr}
    396e:	b086      	sub	sp, #24
    3970:	af00      	add	r7, sp, #0
    3972:	6078      	str	r0, [r7, #4]
    3974:	0008      	movs	r0, r1
    3976:	0011      	movs	r1, r2
    3978:	1cbb      	adds	r3, r7, #2
    397a:	1c02      	adds	r2, r0, #0
    397c:	801a      	strh	r2, [r3, #0]
    397e:	1c7b      	adds	r3, r7, #1
    3980:	1c0a      	adds	r2, r1, #0
    3982:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    3984:	2311      	movs	r3, #17
    3986:	18fb      	adds	r3, r7, r3
    3988:	2201      	movs	r2, #1
    398a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    398c:	2314      	movs	r3, #20
    398e:	18fb      	adds	r3, r7, r3
    3990:	2200      	movs	r2, #0
    3992:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3994:	1cbb      	adds	r3, r7, #2
    3996:	881a      	ldrh	r2, [r3, #0]
    3998:	2380      	movs	r3, #128	; 0x80
    399a:	019b      	lsls	r3, r3, #6
    399c:	429a      	cmp	r2, r3
    399e:	d805      	bhi.n	39ac <spi_data_read+0x40>
			nbytes = sz;
    39a0:	2312      	movs	r3, #18
    39a2:	18fb      	adds	r3, r7, r3
    39a4:	1cba      	adds	r2, r7, #2
    39a6:	8812      	ldrh	r2, [r2, #0]
    39a8:	801a      	strh	r2, [r3, #0]
    39aa:	e004      	b.n	39b6 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    39ac:	2312      	movs	r3, #18
    39ae:	18fb      	adds	r3, r7, r3
    39b0:	2280      	movs	r2, #128	; 0x80
    39b2:	0192      	lsls	r2, r2, #6
    39b4:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    39b6:	2316      	movs	r3, #22
    39b8:	18fb      	adds	r3, r7, r3
    39ba:	220a      	movs	r2, #10
    39bc:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    39be:	230b      	movs	r3, #11
    39c0:	18fb      	adds	r3, r7, r3
    39c2:	2101      	movs	r1, #1
    39c4:	0018      	movs	r0, r3
    39c6:	4b5c      	ldr	r3, [pc, #368]	; (3b38 <spi_data_read+0x1cc>)
    39c8:	4798      	blx	r3
    39ca:	1e03      	subs	r3, r0, #0
    39cc:	d011      	beq.n	39f2 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    39ce:	4a5b      	ldr	r2, [pc, #364]	; (3b3c <spi_data_read+0x1d0>)
    39d0:	495b      	ldr	r1, [pc, #364]	; (3b40 <spi_data_read+0x1d4>)
    39d2:	4b5c      	ldr	r3, [pc, #368]	; (3b44 <spi_data_read+0x1d8>)
    39d4:	0018      	movs	r0, r3
    39d6:	4b5c      	ldr	r3, [pc, #368]	; (3b48 <spi_data_read+0x1dc>)
    39d8:	4798      	blx	r3
    39da:	4b5c      	ldr	r3, [pc, #368]	; (3b4c <spi_data_read+0x1e0>)
    39dc:	0018      	movs	r0, r3
    39de:	4b5c      	ldr	r3, [pc, #368]	; (3b50 <spi_data_read+0x1e4>)
    39e0:	4798      	blx	r3
    39e2:	200d      	movs	r0, #13
    39e4:	4b5b      	ldr	r3, [pc, #364]	; (3b54 <spi_data_read+0x1e8>)
    39e6:	4798      	blx	r3
				result = N_FAIL;
    39e8:	2311      	movs	r3, #17
    39ea:	18fb      	adds	r3, r7, r3
    39ec:	2200      	movs	r2, #0
    39ee:	701a      	strb	r2, [r3, #0]
				break;
    39f0:	e017      	b.n	3a22 <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    39f2:	230b      	movs	r3, #11
    39f4:	18fb      	adds	r3, r7, r3
    39f6:	781b      	ldrb	r3, [r3, #0]
    39f8:	091b      	lsrs	r3, r3, #4
    39fa:	b2db      	uxtb	r3, r3
    39fc:	001a      	movs	r2, r3
    39fe:	230f      	movs	r3, #15
    3a00:	4013      	ands	r3, r2
    3a02:	2b0f      	cmp	r3, #15
    3a04:	d00c      	beq.n	3a20 <spi_data_read+0xb4>
				break;
		} while (retry--);
    3a06:	2316      	movs	r3, #22
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	2200      	movs	r2, #0
    3a0c:	5e9b      	ldrsh	r3, [r3, r2]
    3a0e:	b29a      	uxth	r2, r3
    3a10:	3a01      	subs	r2, #1
    3a12:	b291      	uxth	r1, r2
    3a14:	2216      	movs	r2, #22
    3a16:	18ba      	adds	r2, r7, r2
    3a18:	8011      	strh	r1, [r2, #0]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	d1cf      	bne.n	39be <spi_data_read+0x52>
    3a1e:	e000      	b.n	3a22 <spi_data_read+0xb6>
				break;
    3a20:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    3a22:	2311      	movs	r3, #17
    3a24:	18fb      	adds	r3, r7, r3
    3a26:	781b      	ldrb	r3, [r3, #0]
    3a28:	b25b      	sxtb	r3, r3
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d100      	bne.n	3a30 <spi_data_read+0xc4>
    3a2e:	e079      	b.n	3b24 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    3a30:	2316      	movs	r3, #22
    3a32:	18fb      	adds	r3, r7, r3
    3a34:	2200      	movs	r2, #0
    3a36:	5e9b      	ldrsh	r3, [r3, r2]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	dc16      	bgt.n	3a6a <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3a3c:	4a46      	ldr	r2, [pc, #280]	; (3b58 <spi_data_read+0x1ec>)
    3a3e:	4940      	ldr	r1, [pc, #256]	; (3b40 <spi_data_read+0x1d4>)
    3a40:	4b40      	ldr	r3, [pc, #256]	; (3b44 <spi_data_read+0x1d8>)
    3a42:	0018      	movs	r0, r3
    3a44:	4b40      	ldr	r3, [pc, #256]	; (3b48 <spi_data_read+0x1dc>)
    3a46:	4798      	blx	r3
    3a48:	230b      	movs	r3, #11
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	781b      	ldrb	r3, [r3, #0]
    3a4e:	001a      	movs	r2, r3
    3a50:	4b42      	ldr	r3, [pc, #264]	; (3b5c <spi_data_read+0x1f0>)
    3a52:	0011      	movs	r1, r2
    3a54:	0018      	movs	r0, r3
    3a56:	4b3c      	ldr	r3, [pc, #240]	; (3b48 <spi_data_read+0x1dc>)
    3a58:	4798      	blx	r3
    3a5a:	200d      	movs	r0, #13
    3a5c:	4b3d      	ldr	r3, [pc, #244]	; (3b54 <spi_data_read+0x1e8>)
    3a5e:	4798      	blx	r3
			result = N_FAIL;
    3a60:	2311      	movs	r3, #17
    3a62:	18fb      	adds	r3, r7, r3
    3a64:	2200      	movs	r2, #0
    3a66:	701a      	strb	r2, [r3, #0]
			break;
    3a68:	e05d      	b.n	3b26 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3a6a:	2314      	movs	r3, #20
    3a6c:	18fb      	adds	r3, r7, r3
    3a6e:	2200      	movs	r2, #0
    3a70:	5e9b      	ldrsh	r3, [r3, r2]
    3a72:	687a      	ldr	r2, [r7, #4]
    3a74:	18d2      	adds	r2, r2, r3
    3a76:	2312      	movs	r3, #18
    3a78:	18fb      	adds	r3, r7, r3
    3a7a:	881b      	ldrh	r3, [r3, #0]
    3a7c:	0019      	movs	r1, r3
    3a7e:	0010      	movs	r0, r2
    3a80:	4b2d      	ldr	r3, [pc, #180]	; (3b38 <spi_data_read+0x1cc>)
    3a82:	4798      	blx	r3
    3a84:	1e03      	subs	r3, r0, #0
    3a86:	d012      	beq.n	3aae <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3a88:	23c5      	movs	r3, #197	; 0xc5
    3a8a:	009a      	lsls	r2, r3, #2
    3a8c:	492c      	ldr	r1, [pc, #176]	; (3b40 <spi_data_read+0x1d4>)
    3a8e:	4b2d      	ldr	r3, [pc, #180]	; (3b44 <spi_data_read+0x1d8>)
    3a90:	0018      	movs	r0, r3
    3a92:	4b2d      	ldr	r3, [pc, #180]	; (3b48 <spi_data_read+0x1dc>)
    3a94:	4798      	blx	r3
    3a96:	4b32      	ldr	r3, [pc, #200]	; (3b60 <spi_data_read+0x1f4>)
    3a98:	0018      	movs	r0, r3
    3a9a:	4b2d      	ldr	r3, [pc, #180]	; (3b50 <spi_data_read+0x1e4>)
    3a9c:	4798      	blx	r3
    3a9e:	200d      	movs	r0, #13
    3aa0:	4b2c      	ldr	r3, [pc, #176]	; (3b54 <spi_data_read+0x1e8>)
    3aa2:	4798      	blx	r3
			result = N_FAIL;
    3aa4:	2311      	movs	r3, #17
    3aa6:	18fb      	adds	r3, r7, r3
    3aa8:	2200      	movs	r2, #0
    3aaa:	701a      	strb	r2, [r3, #0]
			break;
    3aac:	e03b      	b.n	3b26 <spi_data_read+0x1ba>
		}
		if(!clockless)
    3aae:	1c7b      	adds	r3, r7, #1
    3ab0:	781b      	ldrb	r3, [r3, #0]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d11d      	bne.n	3af2 <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3ab6:	4b2b      	ldr	r3, [pc, #172]	; (3b64 <spi_data_read+0x1f8>)
    3ab8:	781b      	ldrb	r3, [r3, #0]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d119      	bne.n	3af2 <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3abe:	230c      	movs	r3, #12
    3ac0:	18fb      	adds	r3, r7, r3
    3ac2:	2102      	movs	r1, #2
    3ac4:	0018      	movs	r0, r3
    3ac6:	4b1c      	ldr	r3, [pc, #112]	; (3b38 <spi_data_read+0x1cc>)
    3ac8:	4798      	blx	r3
    3aca:	1e03      	subs	r3, r0, #0
    3acc:	d011      	beq.n	3af2 <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3ace:	4a26      	ldr	r2, [pc, #152]	; (3b68 <spi_data_read+0x1fc>)
    3ad0:	491b      	ldr	r1, [pc, #108]	; (3b40 <spi_data_read+0x1d4>)
    3ad2:	4b1c      	ldr	r3, [pc, #112]	; (3b44 <spi_data_read+0x1d8>)
    3ad4:	0018      	movs	r0, r3
    3ad6:	4b1c      	ldr	r3, [pc, #112]	; (3b48 <spi_data_read+0x1dc>)
    3ad8:	4798      	blx	r3
    3ada:	4b24      	ldr	r3, [pc, #144]	; (3b6c <spi_data_read+0x200>)
    3adc:	0018      	movs	r0, r3
    3ade:	4b1c      	ldr	r3, [pc, #112]	; (3b50 <spi_data_read+0x1e4>)
    3ae0:	4798      	blx	r3
    3ae2:	200d      	movs	r0, #13
    3ae4:	4b1b      	ldr	r3, [pc, #108]	; (3b54 <spi_data_read+0x1e8>)
    3ae6:	4798      	blx	r3
					result = N_FAIL;
    3ae8:	2311      	movs	r3, #17
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	2200      	movs	r2, #0
    3aee:	701a      	strb	r2, [r3, #0]
					break;
    3af0:	e019      	b.n	3b26 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    3af2:	2314      	movs	r3, #20
    3af4:	18fb      	adds	r3, r7, r3
    3af6:	881a      	ldrh	r2, [r3, #0]
    3af8:	2312      	movs	r3, #18
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	881b      	ldrh	r3, [r3, #0]
    3afe:	18d3      	adds	r3, r2, r3
    3b00:	b29a      	uxth	r2, r3
    3b02:	2314      	movs	r3, #20
    3b04:	18fb      	adds	r3, r7, r3
    3b06:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3b08:	2312      	movs	r3, #18
    3b0a:	18fb      	adds	r3, r7, r3
    3b0c:	881a      	ldrh	r2, [r3, #0]
    3b0e:	1cbb      	adds	r3, r7, #2
    3b10:	1cb9      	adds	r1, r7, #2
    3b12:	8809      	ldrh	r1, [r1, #0]
    3b14:	1a8a      	subs	r2, r1, r2
    3b16:	801a      	strh	r2, [r3, #0]

	} while (sz);
    3b18:	1cbb      	adds	r3, r7, #2
    3b1a:	881b      	ldrh	r3, [r3, #0]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d000      	beq.n	3b22 <spi_data_read+0x1b6>
    3b20:	e738      	b.n	3994 <spi_data_read+0x28>
    3b22:	e000      	b.n	3b26 <spi_data_read+0x1ba>
			break;
    3b24:	46c0      	nop			; (mov r8, r8)

	return result;
    3b26:	2311      	movs	r3, #17
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	781b      	ldrb	r3, [r3, #0]
    3b2c:	b25b      	sxtb	r3, r3
}
    3b2e:	0018      	movs	r0, r3
    3b30:	46bd      	mov	sp, r7
    3b32:	b006      	add	sp, #24
    3b34:	bd80      	pop	{r7, pc}
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	000032e9 	.word	0x000032e9
    3b3c:	000002ff 	.word	0x000002ff
    3b40:	00014864 	.word	0x00014864
    3b44:	000142ac 	.word	0x000142ac
    3b48:	0000efc9 	.word	0x0000efc9
    3b4c:	00014370 	.word	0x00014370
    3b50:	0000f0e5 	.word	0x0000f0e5
    3b54:	0000effd 	.word	0x0000effd
    3b58:	0000030b 	.word	0x0000030b
    3b5c:	000143a4 	.word	0x000143a4
    3b60:	000143d4 	.word	0x000143d4
    3b64:	2000023c 	.word	0x2000023c
    3b68:	0000031f 	.word	0x0000031f
    3b6c:	00014404 	.word	0x00014404

00003b70 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3b70:	b580      	push	{r7, lr}
    3b72:	b086      	sub	sp, #24
    3b74:	af00      	add	r7, sp, #0
    3b76:	6078      	str	r0, [r7, #4]
    3b78:	000a      	movs	r2, r1
    3b7a:	1cbb      	adds	r3, r7, #2
    3b7c:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3b7e:	2313      	movs	r3, #19
    3b80:	18fb      	adds	r3, r7, r3
    3b82:	2201      	movs	r2, #1
    3b84:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    3b86:	230c      	movs	r3, #12
    3b88:	18fb      	adds	r3, r7, r3
    3b8a:	2200      	movs	r2, #0
    3b8c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3b8e:	2316      	movs	r3, #22
    3b90:	18fb      	adds	r3, r7, r3
    3b92:	2200      	movs	r2, #0
    3b94:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3b96:	1cbb      	adds	r3, r7, #2
    3b98:	881a      	ldrh	r2, [r3, #0]
    3b9a:	2380      	movs	r3, #128	; 0x80
    3b9c:	019b      	lsls	r3, r3, #6
    3b9e:	429a      	cmp	r2, r3
    3ba0:	d805      	bhi.n	3bae <spi_data_write+0x3e>
			nbytes = sz;
    3ba2:	2314      	movs	r3, #20
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	1cba      	adds	r2, r7, #2
    3ba8:	8812      	ldrh	r2, [r2, #0]
    3baa:	801a      	strh	r2, [r3, #0]
    3bac:	e004      	b.n	3bb8 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3bae:	2314      	movs	r3, #20
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	2280      	movs	r2, #128	; 0x80
    3bb4:	0192      	lsls	r2, r2, #6
    3bb6:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3bb8:	2311      	movs	r3, #17
    3bba:	18fb      	adds	r3, r7, r3
    3bbc:	22f0      	movs	r2, #240	; 0xf0
    3bbe:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3bc0:	2316      	movs	r3, #22
    3bc2:	18fb      	adds	r3, r7, r3
    3bc4:	2200      	movs	r2, #0
    3bc6:	5e9b      	ldrsh	r3, [r3, r2]
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d10f      	bne.n	3bec <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    3bcc:	1cbb      	adds	r3, r7, #2
    3bce:	881a      	ldrh	r2, [r3, #0]
    3bd0:	2380      	movs	r3, #128	; 0x80
    3bd2:	019b      	lsls	r3, r3, #6
    3bd4:	429a      	cmp	r2, r3
    3bd6:	d804      	bhi.n	3be2 <spi_data_write+0x72>
				order = 0x3;
    3bd8:	2312      	movs	r3, #18
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	2203      	movs	r2, #3
    3bde:	701a      	strb	r2, [r3, #0]
    3be0:	e013      	b.n	3c0a <spi_data_write+0x9a>
			else
				order = 0x1;
    3be2:	2312      	movs	r3, #18
    3be4:	18fb      	adds	r3, r7, r3
    3be6:	2201      	movs	r2, #1
    3be8:	701a      	strb	r2, [r3, #0]
    3bea:	e00e      	b.n	3c0a <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    3bec:	1cbb      	adds	r3, r7, #2
    3bee:	881a      	ldrh	r2, [r3, #0]
    3bf0:	2380      	movs	r3, #128	; 0x80
    3bf2:	019b      	lsls	r3, r3, #6
    3bf4:	429a      	cmp	r2, r3
    3bf6:	d804      	bhi.n	3c02 <spi_data_write+0x92>
				order = 0x3;
    3bf8:	2312      	movs	r3, #18
    3bfa:	18fb      	adds	r3, r7, r3
    3bfc:	2203      	movs	r2, #3
    3bfe:	701a      	strb	r2, [r3, #0]
    3c00:	e003      	b.n	3c0a <spi_data_write+0x9a>
			else
				order = 0x2;
    3c02:	2312      	movs	r3, #18
    3c04:	18fb      	adds	r3, r7, r3
    3c06:	2202      	movs	r2, #2
    3c08:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    3c0a:	2311      	movs	r3, #17
    3c0c:	18fb      	adds	r3, r7, r3
    3c0e:	781a      	ldrb	r2, [r3, #0]
    3c10:	2312      	movs	r3, #18
    3c12:	18fb      	adds	r3, r7, r3
    3c14:	781b      	ldrb	r3, [r3, #0]
    3c16:	4313      	orrs	r3, r2
    3c18:	b2da      	uxtb	r2, r3
    3c1a:	2311      	movs	r3, #17
    3c1c:	18fb      	adds	r3, r7, r3
    3c1e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3c20:	2311      	movs	r3, #17
    3c22:	18fb      	adds	r3, r7, r3
    3c24:	2101      	movs	r1, #1
    3c26:	0018      	movs	r0, r3
    3c28:	4b3a      	ldr	r3, [pc, #232]	; (3d14 <spi_data_write+0x1a4>)
    3c2a:	4798      	blx	r3
    3c2c:	1e03      	subs	r3, r0, #0
    3c2e:	d012      	beq.n	3c56 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3c30:	23d4      	movs	r3, #212	; 0xd4
    3c32:	009a      	lsls	r2, r3, #2
    3c34:	4938      	ldr	r1, [pc, #224]	; (3d18 <spi_data_write+0x1a8>)
    3c36:	4b39      	ldr	r3, [pc, #228]	; (3d1c <spi_data_write+0x1ac>)
    3c38:	0018      	movs	r0, r3
    3c3a:	4b39      	ldr	r3, [pc, #228]	; (3d20 <spi_data_write+0x1b0>)
    3c3c:	4798      	blx	r3
    3c3e:	4b39      	ldr	r3, [pc, #228]	; (3d24 <spi_data_write+0x1b4>)
    3c40:	0018      	movs	r0, r3
    3c42:	4b39      	ldr	r3, [pc, #228]	; (3d28 <spi_data_write+0x1b8>)
    3c44:	4798      	blx	r3
    3c46:	200d      	movs	r0, #13
    3c48:	4b38      	ldr	r3, [pc, #224]	; (3d2c <spi_data_write+0x1bc>)
    3c4a:	4798      	blx	r3
			result = N_FAIL;
    3c4c:	2313      	movs	r3, #19
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	2200      	movs	r2, #0
    3c52:	701a      	strb	r2, [r3, #0]
			break;
    3c54:	e056      	b.n	3d04 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3c56:	2316      	movs	r3, #22
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	2200      	movs	r2, #0
    3c5c:	5e9b      	ldrsh	r3, [r3, r2]
    3c5e:	687a      	ldr	r2, [r7, #4]
    3c60:	18d2      	adds	r2, r2, r3
    3c62:	2314      	movs	r3, #20
    3c64:	18fb      	adds	r3, r7, r3
    3c66:	881b      	ldrh	r3, [r3, #0]
    3c68:	0019      	movs	r1, r3
    3c6a:	0010      	movs	r0, r2
    3c6c:	4b29      	ldr	r3, [pc, #164]	; (3d14 <spi_data_write+0x1a4>)
    3c6e:	4798      	blx	r3
    3c70:	1e03      	subs	r3, r0, #0
    3c72:	d011      	beq.n	3c98 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3c74:	4a2e      	ldr	r2, [pc, #184]	; (3d30 <spi_data_write+0x1c0>)
    3c76:	4928      	ldr	r1, [pc, #160]	; (3d18 <spi_data_write+0x1a8>)
    3c78:	4b28      	ldr	r3, [pc, #160]	; (3d1c <spi_data_write+0x1ac>)
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b28      	ldr	r3, [pc, #160]	; (3d20 <spi_data_write+0x1b0>)
    3c7e:	4798      	blx	r3
    3c80:	4b2c      	ldr	r3, [pc, #176]	; (3d34 <spi_data_write+0x1c4>)
    3c82:	0018      	movs	r0, r3
    3c84:	4b28      	ldr	r3, [pc, #160]	; (3d28 <spi_data_write+0x1b8>)
    3c86:	4798      	blx	r3
    3c88:	200d      	movs	r0, #13
    3c8a:	4b28      	ldr	r3, [pc, #160]	; (3d2c <spi_data_write+0x1bc>)
    3c8c:	4798      	blx	r3
			result = N_FAIL;
    3c8e:	2313      	movs	r3, #19
    3c90:	18fb      	adds	r3, r7, r3
    3c92:	2200      	movs	r2, #0
    3c94:	701a      	strb	r2, [r3, #0]
			break;
    3c96:	e035      	b.n	3d04 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    3c98:	4b27      	ldr	r3, [pc, #156]	; (3d38 <spi_data_write+0x1c8>)
    3c9a:	781b      	ldrb	r3, [r3, #0]
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d119      	bne.n	3cd4 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3ca0:	230c      	movs	r3, #12
    3ca2:	18fb      	adds	r3, r7, r3
    3ca4:	2102      	movs	r1, #2
    3ca6:	0018      	movs	r0, r3
    3ca8:	4b1a      	ldr	r3, [pc, #104]	; (3d14 <spi_data_write+0x1a4>)
    3caa:	4798      	blx	r3
    3cac:	1e03      	subs	r3, r0, #0
    3cae:	d011      	beq.n	3cd4 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3cb0:	4a22      	ldr	r2, [pc, #136]	; (3d3c <spi_data_write+0x1cc>)
    3cb2:	4919      	ldr	r1, [pc, #100]	; (3d18 <spi_data_write+0x1a8>)
    3cb4:	4b19      	ldr	r3, [pc, #100]	; (3d1c <spi_data_write+0x1ac>)
    3cb6:	0018      	movs	r0, r3
    3cb8:	4b19      	ldr	r3, [pc, #100]	; (3d20 <spi_data_write+0x1b0>)
    3cba:	4798      	blx	r3
    3cbc:	4b20      	ldr	r3, [pc, #128]	; (3d40 <spi_data_write+0x1d0>)
    3cbe:	0018      	movs	r0, r3
    3cc0:	4b19      	ldr	r3, [pc, #100]	; (3d28 <spi_data_write+0x1b8>)
    3cc2:	4798      	blx	r3
    3cc4:	200d      	movs	r0, #13
    3cc6:	4b19      	ldr	r3, [pc, #100]	; (3d2c <spi_data_write+0x1bc>)
    3cc8:	4798      	blx	r3
				result = N_FAIL;
    3cca:	2313      	movs	r3, #19
    3ccc:	18fb      	adds	r3, r7, r3
    3cce:	2200      	movs	r2, #0
    3cd0:	701a      	strb	r2, [r3, #0]
				break;
    3cd2:	e017      	b.n	3d04 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    3cd4:	2316      	movs	r3, #22
    3cd6:	18fb      	adds	r3, r7, r3
    3cd8:	881a      	ldrh	r2, [r3, #0]
    3cda:	2314      	movs	r3, #20
    3cdc:	18fb      	adds	r3, r7, r3
    3cde:	881b      	ldrh	r3, [r3, #0]
    3ce0:	18d3      	adds	r3, r2, r3
    3ce2:	b29a      	uxth	r2, r3
    3ce4:	2316      	movs	r3, #22
    3ce6:	18fb      	adds	r3, r7, r3
    3ce8:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3cea:	1cbb      	adds	r3, r7, #2
    3cec:	1cb9      	adds	r1, r7, #2
    3cee:	2214      	movs	r2, #20
    3cf0:	18ba      	adds	r2, r7, r2
    3cf2:	8809      	ldrh	r1, [r1, #0]
    3cf4:	8812      	ldrh	r2, [r2, #0]
    3cf6:	1a8a      	subs	r2, r1, r2
    3cf8:	801a      	strh	r2, [r3, #0]
	} while (sz);
    3cfa:	1cbb      	adds	r3, r7, #2
    3cfc:	881b      	ldrh	r3, [r3, #0]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d000      	beq.n	3d04 <spi_data_write+0x194>
    3d02:	e748      	b.n	3b96 <spi_data_write+0x26>


	return result;
    3d04:	2313      	movs	r3, #19
    3d06:	18fb      	adds	r3, r7, r3
    3d08:	781b      	ldrb	r3, [r3, #0]
    3d0a:	b25b      	sxtb	r3, r3
}
    3d0c:	0018      	movs	r0, r3
    3d0e:	46bd      	mov	sp, r7
    3d10:	b006      	add	sp, #24
    3d12:	bd80      	pop	{r7, pc}
    3d14:	0000332d 	.word	0x0000332d
    3d18:	00014874 	.word	0x00014874
    3d1c:	000142ac 	.word	0x000142ac
    3d20:	0000efc9 	.word	0x0000efc9
    3d24:	00014438 	.word	0x00014438
    3d28:	0000f0e5 	.word	0x0000f0e5
    3d2c:	0000effd 	.word	0x0000effd
    3d30:	00000359 	.word	0x00000359
    3d34:	00014470 	.word	0x00014470
    3d38:	2000023c 	.word	0x2000023c
    3d3c:	00000363 	.word	0x00000363
    3d40:	000144a4 	.word	0x000144a4

00003d44 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3d44:	b5b0      	push	{r4, r5, r7, lr}
    3d46:	b086      	sub	sp, #24
    3d48:	af02      	add	r7, sp, #8
    3d4a:	6078      	str	r0, [r7, #4]
    3d4c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    3d4e:	230f      	movs	r3, #15
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	220a      	movs	r2, #10
    3d54:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3d56:	230e      	movs	r3, #14
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	2201      	movs	r2, #1
    3d5c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    3d5e:	230d      	movs	r3, #13
    3d60:	18fb      	adds	r3, r7, r3
    3d62:	22c9      	movs	r2, #201	; 0xc9
    3d64:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    3d66:	230c      	movs	r3, #12
    3d68:	18fb      	adds	r3, r7, r3
    3d6a:	2200      	movs	r2, #0
    3d6c:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	2b30      	cmp	r3, #48	; 0x30
    3d72:	d808      	bhi.n	3d86 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    3d74:	230d      	movs	r3, #13
    3d76:	18fb      	adds	r3, r7, r3
    3d78:	22c3      	movs	r2, #195	; 0xc3
    3d7a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    3d7c:	230c      	movs	r3, #12
    3d7e:	18fb      	adds	r3, r7, r3
    3d80:	2201      	movs	r2, #1
    3d82:	701a      	strb	r2, [r3, #0]
    3d84:	e007      	b.n	3d96 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    3d86:	230d      	movs	r3, #13
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	22c9      	movs	r2, #201	; 0xc9
    3d8c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    3d8e:	230c      	movs	r3, #12
    3d90:	18fb      	adds	r3, r7, r3
    3d92:	2200      	movs	r2, #0
    3d94:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3d96:	230e      	movs	r3, #14
    3d98:	18fc      	adds	r4, r7, r3
    3d9a:	683a      	ldr	r2, [r7, #0]
    3d9c:	6879      	ldr	r1, [r7, #4]
    3d9e:	230d      	movs	r3, #13
    3da0:	18fb      	adds	r3, r7, r3
    3da2:	7818      	ldrb	r0, [r3, #0]
    3da4:	230c      	movs	r3, #12
    3da6:	18fb      	adds	r3, r7, r3
    3da8:	781b      	ldrb	r3, [r3, #0]
    3daa:	9300      	str	r3, [sp, #0]
    3dac:	2304      	movs	r3, #4
    3dae:	4d3c      	ldr	r5, [pc, #240]	; (3ea0 <spi_write_reg+0x15c>)
    3db0:	47a8      	blx	r5
    3db2:	0003      	movs	r3, r0
    3db4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3db6:	230e      	movs	r3, #14
    3db8:	18fb      	adds	r3, r7, r3
    3dba:	781b      	ldrb	r3, [r3, #0]
    3dbc:	b25b      	sxtb	r3, r3
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	d00f      	beq.n	3de2 <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3dc2:	4a38      	ldr	r2, [pc, #224]	; (3ea4 <spi_write_reg+0x160>)
    3dc4:	4938      	ldr	r1, [pc, #224]	; (3ea8 <spi_write_reg+0x164>)
    3dc6:	4b39      	ldr	r3, [pc, #228]	; (3eac <spi_write_reg+0x168>)
    3dc8:	0018      	movs	r0, r3
    3dca:	4b39      	ldr	r3, [pc, #228]	; (3eb0 <spi_write_reg+0x16c>)
    3dcc:	4798      	blx	r3
    3dce:	687a      	ldr	r2, [r7, #4]
    3dd0:	4b38      	ldr	r3, [pc, #224]	; (3eb4 <spi_write_reg+0x170>)
    3dd2:	0011      	movs	r1, r2
    3dd4:	0018      	movs	r0, r3
    3dd6:	4b36      	ldr	r3, [pc, #216]	; (3eb0 <spi_write_reg+0x16c>)
    3dd8:	4798      	blx	r3
    3dda:	200d      	movs	r0, #13
    3ddc:	4b36      	ldr	r3, [pc, #216]	; (3eb8 <spi_write_reg+0x174>)
    3dde:	4798      	blx	r3
		goto _FAIL_;
    3de0:	e020      	b.n	3e24 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    3de2:	230e      	movs	r3, #14
    3de4:	18fc      	adds	r4, r7, r3
    3de6:	230d      	movs	r3, #13
    3de8:	18fb      	adds	r3, r7, r3
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	0018      	movs	r0, r3
    3dee:	4b33      	ldr	r3, [pc, #204]	; (3ebc <spi_write_reg+0x178>)
    3df0:	4798      	blx	r3
    3df2:	0003      	movs	r3, r0
    3df4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3df6:	230e      	movs	r3, #14
    3df8:	18fb      	adds	r3, r7, r3
    3dfa:	781b      	ldrb	r3, [r3, #0]
    3dfc:	b25b      	sxtb	r3, r3
    3dfe:	2b01      	cmp	r3, #1
    3e00:	d010      	beq.n	3e24 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3e02:	23e7      	movs	r3, #231	; 0xe7
    3e04:	009a      	lsls	r2, r3, #2
    3e06:	4928      	ldr	r1, [pc, #160]	; (3ea8 <spi_write_reg+0x164>)
    3e08:	4b28      	ldr	r3, [pc, #160]	; (3eac <spi_write_reg+0x168>)
    3e0a:	0018      	movs	r0, r3
    3e0c:	4b28      	ldr	r3, [pc, #160]	; (3eb0 <spi_write_reg+0x16c>)
    3e0e:	4798      	blx	r3
    3e10:	687a      	ldr	r2, [r7, #4]
    3e12:	4b2b      	ldr	r3, [pc, #172]	; (3ec0 <spi_write_reg+0x17c>)
    3e14:	0011      	movs	r1, r2
    3e16:	0018      	movs	r0, r3
    3e18:	4b25      	ldr	r3, [pc, #148]	; (3eb0 <spi_write_reg+0x16c>)
    3e1a:	4798      	blx	r3
    3e1c:	200d      	movs	r0, #13
    3e1e:	4b26      	ldr	r3, [pc, #152]	; (3eb8 <spi_write_reg+0x174>)
    3e20:	4798      	blx	r3
		goto _FAIL_;
    3e22:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    3e24:	230e      	movs	r3, #14
    3e26:	18fb      	adds	r3, r7, r3
    3e28:	781b      	ldrb	r3, [r3, #0]
    3e2a:	b25b      	sxtb	r3, r3
    3e2c:	2b01      	cmp	r3, #1
    3e2e:	d02e      	beq.n	3e8e <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    3e30:	2001      	movs	r0, #1
    3e32:	4b24      	ldr	r3, [pc, #144]	; (3ec4 <spi_write_reg+0x180>)
    3e34:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3e36:	2300      	movs	r3, #0
    3e38:	9300      	str	r3, [sp, #0]
    3e3a:	2300      	movs	r3, #0
    3e3c:	2200      	movs	r2, #0
    3e3e:	2100      	movs	r1, #0
    3e40:	20cf      	movs	r0, #207	; 0xcf
    3e42:	4c17      	ldr	r4, [pc, #92]	; (3ea0 <spi_write_reg+0x15c>)
    3e44:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    3e46:	20cf      	movs	r0, #207	; 0xcf
    3e48:	4b1c      	ldr	r3, [pc, #112]	; (3ebc <spi_write_reg+0x178>)
    3e4a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3e4c:	4a1e      	ldr	r2, [pc, #120]	; (3ec8 <spi_write_reg+0x184>)
    3e4e:	4916      	ldr	r1, [pc, #88]	; (3ea8 <spi_write_reg+0x164>)
    3e50:	4b16      	ldr	r3, [pc, #88]	; (3eac <spi_write_reg+0x168>)
    3e52:	0018      	movs	r0, r3
    3e54:	4b16      	ldr	r3, [pc, #88]	; (3eb0 <spi_write_reg+0x16c>)
    3e56:	4798      	blx	r3
    3e58:	230f      	movs	r3, #15
    3e5a:	18fb      	adds	r3, r7, r3
    3e5c:	7819      	ldrb	r1, [r3, #0]
    3e5e:	683b      	ldr	r3, [r7, #0]
    3e60:	687a      	ldr	r2, [r7, #4]
    3e62:	481a      	ldr	r0, [pc, #104]	; (3ecc <spi_write_reg+0x188>)
    3e64:	4c12      	ldr	r4, [pc, #72]	; (3eb0 <spi_write_reg+0x16c>)
    3e66:	47a0      	blx	r4
    3e68:	200d      	movs	r0, #13
    3e6a:	4b13      	ldr	r3, [pc, #76]	; (3eb8 <spi_write_reg+0x174>)
    3e6c:	4798      	blx	r3
		nm_bsp_sleep(1);
    3e6e:	2001      	movs	r0, #1
    3e70:	4b14      	ldr	r3, [pc, #80]	; (3ec4 <spi_write_reg+0x180>)
    3e72:	4798      	blx	r3
		retry--;
    3e74:	230f      	movs	r3, #15
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	781a      	ldrb	r2, [r3, #0]
    3e7a:	230f      	movs	r3, #15
    3e7c:	18fb      	adds	r3, r7, r3
    3e7e:	3a01      	subs	r2, #1
    3e80:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    3e82:	230f      	movs	r3, #15
    3e84:	18fb      	adds	r3, r7, r3
    3e86:	781b      	ldrb	r3, [r3, #0]
    3e88:	2b00      	cmp	r3, #0
    3e8a:	d000      	beq.n	3e8e <spi_write_reg+0x14a>
    3e8c:	e76f      	b.n	3d6e <spi_write_reg+0x2a>
	}

	return result;
    3e8e:	230e      	movs	r3, #14
    3e90:	18fb      	adds	r3, r7, r3
    3e92:	781b      	ldrb	r3, [r3, #0]
    3e94:	b25b      	sxtb	r3, r3
}
    3e96:	0018      	movs	r0, r3
    3e98:	46bd      	mov	sp, r7
    3e9a:	b004      	add	sp, #16
    3e9c:	bdb0      	pop	{r4, r5, r7, pc}
    3e9e:	46c0      	nop			; (mov r8, r8)
    3ea0:	000033f1 	.word	0x000033f1
    3ea4:	00000396 	.word	0x00000396
    3ea8:	00014884 	.word	0x00014884
    3eac:	000142ac 	.word	0x000142ac
    3eb0:	0000efc9 	.word	0x0000efc9
    3eb4:	000144dc 	.word	0x000144dc
    3eb8:	0000effd 	.word	0x0000effd
    3ebc:	00003835 	.word	0x00003835
    3ec0:	00014508 	.word	0x00014508
    3ec4:	00000331 	.word	0x00000331
    3ec8:	000003af 	.word	0x000003af
    3ecc:	00014540 	.word	0x00014540

00003ed0 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    3ed0:	b5b0      	push	{r4, r5, r7, lr}
    3ed2:	b088      	sub	sp, #32
    3ed4:	af02      	add	r7, sp, #8
    3ed6:	60f8      	str	r0, [r7, #12]
    3ed8:	60b9      	str	r1, [r7, #8]
    3eda:	1dbb      	adds	r3, r7, #6
    3edc:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    3ede:	2316      	movs	r3, #22
    3ee0:	18fb      	adds	r3, r7, r3
    3ee2:	220a      	movs	r2, #10
    3ee4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    3ee6:	2315      	movs	r3, #21
    3ee8:	18fb      	adds	r3, r7, r3
    3eea:	22c7      	movs	r2, #199	; 0xc7
    3eec:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    3eee:	1dbb      	adds	r3, r7, #6
    3ef0:	881b      	ldrh	r3, [r3, #0]
    3ef2:	2b01      	cmp	r3, #1
    3ef4:	d102      	bne.n	3efc <nm_spi_write+0x2c>
		size = 2;
    3ef6:	1dbb      	adds	r3, r7, #6
    3ef8:	2202      	movs	r2, #2
    3efa:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    3efc:	1dbb      	adds	r3, r7, #6
    3efe:	881a      	ldrh	r2, [r3, #0]
    3f00:	2317      	movs	r3, #23
    3f02:	18fc      	adds	r4, r7, r3
    3f04:	68f9      	ldr	r1, [r7, #12]
    3f06:	2315      	movs	r3, #21
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	7818      	ldrb	r0, [r3, #0]
    3f0c:	2300      	movs	r3, #0
    3f0e:	9300      	str	r3, [sp, #0]
    3f10:	0013      	movs	r3, r2
    3f12:	2200      	movs	r2, #0
    3f14:	4d5b      	ldr	r5, [pc, #364]	; (4084 <nm_spi_write+0x1b4>)
    3f16:	47a8      	blx	r5
    3f18:	0003      	movs	r3, r0
    3f1a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3f1c:	2317      	movs	r3, #23
    3f1e:	18fb      	adds	r3, r7, r3
    3f20:	781b      	ldrb	r3, [r3, #0]
    3f22:	b25b      	sxtb	r3, r3
    3f24:	2b01      	cmp	r3, #1
    3f26:	d00f      	beq.n	3f48 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3f28:	4a57      	ldr	r2, [pc, #348]	; (4088 <nm_spi_write+0x1b8>)
    3f2a:	4958      	ldr	r1, [pc, #352]	; (408c <nm_spi_write+0x1bc>)
    3f2c:	4b58      	ldr	r3, [pc, #352]	; (4090 <nm_spi_write+0x1c0>)
    3f2e:	0018      	movs	r0, r3
    3f30:	4b58      	ldr	r3, [pc, #352]	; (4094 <nm_spi_write+0x1c4>)
    3f32:	4798      	blx	r3
    3f34:	68fa      	ldr	r2, [r7, #12]
    3f36:	4b58      	ldr	r3, [pc, #352]	; (4098 <nm_spi_write+0x1c8>)
    3f38:	0011      	movs	r1, r2
    3f3a:	0018      	movs	r0, r3
    3f3c:	4b55      	ldr	r3, [pc, #340]	; (4094 <nm_spi_write+0x1c4>)
    3f3e:	4798      	blx	r3
    3f40:	200d      	movs	r0, #13
    3f42:	4b56      	ldr	r3, [pc, #344]	; (409c <nm_spi_write+0x1cc>)
    3f44:	4798      	blx	r3
		goto _FAIL_;
    3f46:	e05f      	b.n	4008 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    3f48:	2317      	movs	r3, #23
    3f4a:	18fc      	adds	r4, r7, r3
    3f4c:	2315      	movs	r3, #21
    3f4e:	18fb      	adds	r3, r7, r3
    3f50:	781b      	ldrb	r3, [r3, #0]
    3f52:	0018      	movs	r0, r3
    3f54:	4b52      	ldr	r3, [pc, #328]	; (40a0 <nm_spi_write+0x1d0>)
    3f56:	4798      	blx	r3
    3f58:	0003      	movs	r3, r0
    3f5a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3f5c:	2317      	movs	r3, #23
    3f5e:	18fb      	adds	r3, r7, r3
    3f60:	781b      	ldrb	r3, [r3, #0]
    3f62:	b25b      	sxtb	r3, r3
    3f64:	2b01      	cmp	r3, #1
    3f66:	d010      	beq.n	3f8a <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    3f68:	23f4      	movs	r3, #244	; 0xf4
    3f6a:	009a      	lsls	r2, r3, #2
    3f6c:	4947      	ldr	r1, [pc, #284]	; (408c <nm_spi_write+0x1bc>)
    3f6e:	4b48      	ldr	r3, [pc, #288]	; (4090 <nm_spi_write+0x1c0>)
    3f70:	0018      	movs	r0, r3
    3f72:	4b48      	ldr	r3, [pc, #288]	; (4094 <nm_spi_write+0x1c4>)
    3f74:	4798      	blx	r3
    3f76:	68fa      	ldr	r2, [r7, #12]
    3f78:	4b4a      	ldr	r3, [pc, #296]	; (40a4 <nm_spi_write+0x1d4>)
    3f7a:	0011      	movs	r1, r2
    3f7c:	0018      	movs	r0, r3
    3f7e:	4b45      	ldr	r3, [pc, #276]	; (4094 <nm_spi_write+0x1c4>)
    3f80:	4798      	blx	r3
    3f82:	200d      	movs	r0, #13
    3f84:	4b45      	ldr	r3, [pc, #276]	; (409c <nm_spi_write+0x1cc>)
    3f86:	4798      	blx	r3
		goto _FAIL_;
    3f88:	e03e      	b.n	4008 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    3f8a:	2317      	movs	r3, #23
    3f8c:	18fc      	adds	r4, r7, r3
    3f8e:	1dbb      	adds	r3, r7, #6
    3f90:	881a      	ldrh	r2, [r3, #0]
    3f92:	68bb      	ldr	r3, [r7, #8]
    3f94:	0011      	movs	r1, r2
    3f96:	0018      	movs	r0, r3
    3f98:	4b43      	ldr	r3, [pc, #268]	; (40a8 <nm_spi_write+0x1d8>)
    3f9a:	4798      	blx	r3
    3f9c:	0003      	movs	r3, r0
    3f9e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fa0:	2317      	movs	r3, #23
    3fa2:	18fb      	adds	r3, r7, r3
    3fa4:	781b      	ldrb	r3, [r3, #0]
    3fa6:	b25b      	sxtb	r3, r3
    3fa8:	2b01      	cmp	r3, #1
    3faa:	d00e      	beq.n	3fca <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3fac:	23f8      	movs	r3, #248	; 0xf8
    3fae:	009a      	lsls	r2, r3, #2
    3fb0:	4936      	ldr	r1, [pc, #216]	; (408c <nm_spi_write+0x1bc>)
    3fb2:	4b37      	ldr	r3, [pc, #220]	; (4090 <nm_spi_write+0x1c0>)
    3fb4:	0018      	movs	r0, r3
    3fb6:	4b37      	ldr	r3, [pc, #220]	; (4094 <nm_spi_write+0x1c4>)
    3fb8:	4798      	blx	r3
    3fba:	4b3c      	ldr	r3, [pc, #240]	; (40ac <nm_spi_write+0x1dc>)
    3fbc:	0018      	movs	r0, r3
    3fbe:	4b3c      	ldr	r3, [pc, #240]	; (40b0 <nm_spi_write+0x1e0>)
    3fc0:	4798      	blx	r3
    3fc2:	200d      	movs	r0, #13
    3fc4:	4b35      	ldr	r3, [pc, #212]	; (409c <nm_spi_write+0x1cc>)
    3fc6:	4798      	blx	r3
		goto _FAIL_;
    3fc8:	e01e      	b.n	4008 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    3fca:	2317      	movs	r3, #23
    3fcc:	18fc      	adds	r4, r7, r3
    3fce:	2315      	movs	r3, #21
    3fd0:	18fb      	adds	r3, r7, r3
    3fd2:	781b      	ldrb	r3, [r3, #0]
    3fd4:	0018      	movs	r0, r3
    3fd6:	4b37      	ldr	r3, [pc, #220]	; (40b4 <nm_spi_write+0x1e4>)
    3fd8:	4798      	blx	r3
    3fda:	0003      	movs	r3, r0
    3fdc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fde:	2317      	movs	r3, #23
    3fe0:	18fb      	adds	r3, r7, r3
    3fe2:	781b      	ldrb	r3, [r3, #0]
    3fe4:	b25b      	sxtb	r3, r3
    3fe6:	2b01      	cmp	r3, #1
    3fe8:	d00e      	beq.n	4008 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3fea:	23fa      	movs	r3, #250	; 0xfa
    3fec:	009a      	lsls	r2, r3, #2
    3fee:	4927      	ldr	r1, [pc, #156]	; (408c <nm_spi_write+0x1bc>)
    3ff0:	4b27      	ldr	r3, [pc, #156]	; (4090 <nm_spi_write+0x1c0>)
    3ff2:	0018      	movs	r0, r3
    3ff4:	4b27      	ldr	r3, [pc, #156]	; (4094 <nm_spi_write+0x1c4>)
    3ff6:	4798      	blx	r3
    3ff8:	4b2c      	ldr	r3, [pc, #176]	; (40ac <nm_spi_write+0x1dc>)
    3ffa:	0018      	movs	r0, r3
    3ffc:	4b2c      	ldr	r3, [pc, #176]	; (40b0 <nm_spi_write+0x1e0>)
    3ffe:	4798      	blx	r3
    4000:	200d      	movs	r0, #13
    4002:	4b26      	ldr	r3, [pc, #152]	; (409c <nm_spi_write+0x1cc>)
    4004:	4798      	blx	r3
		goto _FAIL_;
    4006:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    4008:	2317      	movs	r3, #23
    400a:	18fb      	adds	r3, r7, r3
    400c:	781b      	ldrb	r3, [r3, #0]
    400e:	b25b      	sxtb	r3, r3
    4010:	2b01      	cmp	r3, #1
    4012:	d02f      	beq.n	4074 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    4014:	2001      	movs	r0, #1
    4016:	4b28      	ldr	r3, [pc, #160]	; (40b8 <nm_spi_write+0x1e8>)
    4018:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    401a:	2300      	movs	r3, #0
    401c:	9300      	str	r3, [sp, #0]
    401e:	2300      	movs	r3, #0
    4020:	2200      	movs	r2, #0
    4022:	2100      	movs	r1, #0
    4024:	20cf      	movs	r0, #207	; 0xcf
    4026:	4c17      	ldr	r4, [pc, #92]	; (4084 <nm_spi_write+0x1b4>)
    4028:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    402a:	20cf      	movs	r0, #207	; 0xcf
    402c:	4b1c      	ldr	r3, [pc, #112]	; (40a0 <nm_spi_write+0x1d0>)
    402e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4030:	4a22      	ldr	r2, [pc, #136]	; (40bc <nm_spi_write+0x1ec>)
    4032:	4916      	ldr	r1, [pc, #88]	; (408c <nm_spi_write+0x1bc>)
    4034:	4b16      	ldr	r3, [pc, #88]	; (4090 <nm_spi_write+0x1c0>)
    4036:	0018      	movs	r0, r3
    4038:	4b16      	ldr	r3, [pc, #88]	; (4094 <nm_spi_write+0x1c4>)
    403a:	4798      	blx	r3
    403c:	2316      	movs	r3, #22
    403e:	18fb      	adds	r3, r7, r3
    4040:	7819      	ldrb	r1, [r3, #0]
    4042:	1dbb      	adds	r3, r7, #6
    4044:	881b      	ldrh	r3, [r3, #0]
    4046:	68fa      	ldr	r2, [r7, #12]
    4048:	481d      	ldr	r0, [pc, #116]	; (40c0 <nm_spi_write+0x1f0>)
    404a:	4c12      	ldr	r4, [pc, #72]	; (4094 <nm_spi_write+0x1c4>)
    404c:	47a0      	blx	r4
    404e:	200d      	movs	r0, #13
    4050:	4b12      	ldr	r3, [pc, #72]	; (409c <nm_spi_write+0x1cc>)
    4052:	4798      	blx	r3
		nm_bsp_sleep(1);
    4054:	2001      	movs	r0, #1
    4056:	4b18      	ldr	r3, [pc, #96]	; (40b8 <nm_spi_write+0x1e8>)
    4058:	4798      	blx	r3
		retry--;
    405a:	2316      	movs	r3, #22
    405c:	18fb      	adds	r3, r7, r3
    405e:	781a      	ldrb	r2, [r3, #0]
    4060:	2316      	movs	r3, #22
    4062:	18fb      	adds	r3, r7, r3
    4064:	3a01      	subs	r2, #1
    4066:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4068:	2316      	movs	r3, #22
    406a:	18fb      	adds	r3, r7, r3
    406c:	781b      	ldrb	r3, [r3, #0]
    406e:	2b00      	cmp	r3, #0
    4070:	d000      	beq.n	4074 <nm_spi_write+0x1a4>
    4072:	e73c      	b.n	3eee <nm_spi_write+0x1e>
	}


	return result;
    4074:	2317      	movs	r3, #23
    4076:	18fb      	adds	r3, r7, r3
    4078:	781b      	ldrb	r3, [r3, #0]
    407a:	b25b      	sxtb	r3, r3
}
    407c:	0018      	movs	r0, r3
    407e:	46bd      	mov	sp, r7
    4080:	b006      	add	sp, #24
    4082:	bdb0      	pop	{r4, r5, r7, pc}
    4084:	000033f1 	.word	0x000033f1
    4088:	000003ca 	.word	0x000003ca
    408c:	00014894 	.word	0x00014894
    4090:	000142ac 	.word	0x000142ac
    4094:	0000efc9 	.word	0x0000efc9
    4098:	0001455c 	.word	0x0001455c
    409c:	0000effd 	.word	0x0000effd
    40a0:	00003835 	.word	0x00003835
    40a4:	0001458c 	.word	0x0001458c
    40a8:	00003b71 	.word	0x00003b71
    40ac:	000145c4 	.word	0x000145c4
    40b0:	0000f0e5 	.word	0x0000f0e5
    40b4:	00003735 	.word	0x00003735
    40b8:	00000331 	.word	0x00000331
    40bc:	000003f2 	.word	0x000003f2
    40c0:	000145ec 	.word	0x000145ec

000040c4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    40c4:	b5b0      	push	{r4, r5, r7, lr}
    40c6:	b086      	sub	sp, #24
    40c8:	af02      	add	r7, sp, #8
    40ca:	6078      	str	r0, [r7, #4]
    40cc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    40ce:	230f      	movs	r3, #15
    40d0:	18fb      	adds	r3, r7, r3
    40d2:	220a      	movs	r2, #10
    40d4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    40d6:	230e      	movs	r3, #14
    40d8:	18fb      	adds	r3, r7, r3
    40da:	2201      	movs	r2, #1
    40dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    40de:	230d      	movs	r3, #13
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	22ca      	movs	r2, #202	; 0xca
    40e4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    40e6:	230c      	movs	r3, #12
    40e8:	18fb      	adds	r3, r7, r3
    40ea:	2200      	movs	r2, #0
    40ec:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	2bff      	cmp	r3, #255	; 0xff
    40f2:	d808      	bhi.n	4106 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    40f4:	230d      	movs	r3, #13
    40f6:	18fb      	adds	r3, r7, r3
    40f8:	22c4      	movs	r2, #196	; 0xc4
    40fa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    40fc:	230c      	movs	r3, #12
    40fe:	18fb      	adds	r3, r7, r3
    4100:	2201      	movs	r2, #1
    4102:	701a      	strb	r2, [r3, #0]
    4104:	e007      	b.n	4116 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    4106:	230d      	movs	r3, #13
    4108:	18fb      	adds	r3, r7, r3
    410a:	22ca      	movs	r2, #202	; 0xca
    410c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    410e:	230c      	movs	r3, #12
    4110:	18fb      	adds	r3, r7, r3
    4112:	2200      	movs	r2, #0
    4114:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    4116:	230e      	movs	r3, #14
    4118:	18fc      	adds	r4, r7, r3
    411a:	6879      	ldr	r1, [r7, #4]
    411c:	230d      	movs	r3, #13
    411e:	18fb      	adds	r3, r7, r3
    4120:	7818      	ldrb	r0, [r3, #0]
    4122:	230c      	movs	r3, #12
    4124:	18fb      	adds	r3, r7, r3
    4126:	781b      	ldrb	r3, [r3, #0]
    4128:	9300      	str	r3, [sp, #0]
    412a:	2304      	movs	r3, #4
    412c:	2200      	movs	r2, #0
    412e:	4d56      	ldr	r5, [pc, #344]	; (4288 <spi_read_reg+0x1c4>)
    4130:	47a8      	blx	r5
    4132:	0003      	movs	r3, r0
    4134:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4136:	230e      	movs	r3, #14
    4138:	18fb      	adds	r3, r7, r3
    413a:	781b      	ldrb	r3, [r3, #0]
    413c:	b25b      	sxtb	r3, r3
    413e:	2b01      	cmp	r3, #1
    4140:	d00f      	beq.n	4162 <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    4142:	4a52      	ldr	r2, [pc, #328]	; (428c <spi_read_reg+0x1c8>)
    4144:	4952      	ldr	r1, [pc, #328]	; (4290 <spi_read_reg+0x1cc>)
    4146:	4b53      	ldr	r3, [pc, #332]	; (4294 <spi_read_reg+0x1d0>)
    4148:	0018      	movs	r0, r3
    414a:	4b53      	ldr	r3, [pc, #332]	; (4298 <spi_read_reg+0x1d4>)
    414c:	4798      	blx	r3
    414e:	687a      	ldr	r2, [r7, #4]
    4150:	4b52      	ldr	r3, [pc, #328]	; (429c <spi_read_reg+0x1d8>)
    4152:	0011      	movs	r1, r2
    4154:	0018      	movs	r0, r3
    4156:	4b50      	ldr	r3, [pc, #320]	; (4298 <spi_read_reg+0x1d4>)
    4158:	4798      	blx	r3
    415a:	200d      	movs	r0, #13
    415c:	4b50      	ldr	r3, [pc, #320]	; (42a0 <spi_read_reg+0x1dc>)
    415e:	4798      	blx	r3
		goto _FAIL_;
    4160:	e055      	b.n	420e <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    4162:	230e      	movs	r3, #14
    4164:	18fc      	adds	r4, r7, r3
    4166:	230d      	movs	r3, #13
    4168:	18fb      	adds	r3, r7, r3
    416a:	781b      	ldrb	r3, [r3, #0]
    416c:	0018      	movs	r0, r3
    416e:	4b4d      	ldr	r3, [pc, #308]	; (42a4 <spi_read_reg+0x1e0>)
    4170:	4798      	blx	r3
    4172:	0003      	movs	r3, r0
    4174:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4176:	230e      	movs	r3, #14
    4178:	18fb      	adds	r3, r7, r3
    417a:	781b      	ldrb	r3, [r3, #0]
    417c:	b25b      	sxtb	r3, r3
    417e:	2b01      	cmp	r3, #1
    4180:	d00f      	beq.n	41a2 <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    4182:	4a49      	ldr	r2, [pc, #292]	; (42a8 <spi_read_reg+0x1e4>)
    4184:	4942      	ldr	r1, [pc, #264]	; (4290 <spi_read_reg+0x1cc>)
    4186:	4b43      	ldr	r3, [pc, #268]	; (4294 <spi_read_reg+0x1d0>)
    4188:	0018      	movs	r0, r3
    418a:	4b43      	ldr	r3, [pc, #268]	; (4298 <spi_read_reg+0x1d4>)
    418c:	4798      	blx	r3
    418e:	687a      	ldr	r2, [r7, #4]
    4190:	4b46      	ldr	r3, [pc, #280]	; (42ac <spi_read_reg+0x1e8>)
    4192:	0011      	movs	r1, r2
    4194:	0018      	movs	r0, r3
    4196:	4b40      	ldr	r3, [pc, #256]	; (4298 <spi_read_reg+0x1d4>)
    4198:	4798      	blx	r3
    419a:	200d      	movs	r0, #13
    419c:	4b40      	ldr	r3, [pc, #256]	; (42a0 <spi_read_reg+0x1dc>)
    419e:	4798      	blx	r3
		goto _FAIL_;
    41a0:	e035      	b.n	420e <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    41a2:	230e      	movs	r3, #14
    41a4:	18fc      	adds	r4, r7, r3
    41a6:	230c      	movs	r3, #12
    41a8:	18fb      	adds	r3, r7, r3
    41aa:	781a      	ldrb	r2, [r3, #0]
    41ac:	2308      	movs	r3, #8
    41ae:	18fb      	adds	r3, r7, r3
    41b0:	2104      	movs	r1, #4
    41b2:	0018      	movs	r0, r3
    41b4:	4b3e      	ldr	r3, [pc, #248]	; (42b0 <spi_read_reg+0x1ec>)
    41b6:	4798      	blx	r3
    41b8:	0003      	movs	r3, r0
    41ba:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    41bc:	230e      	movs	r3, #14
    41be:	18fb      	adds	r3, r7, r3
    41c0:	781b      	ldrb	r3, [r3, #0]
    41c2:	b25b      	sxtb	r3, r3
    41c4:	2b01      	cmp	r3, #1
    41c6:	d00d      	beq.n	41e4 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    41c8:	4a3a      	ldr	r2, [pc, #232]	; (42b4 <spi_read_reg+0x1f0>)
    41ca:	4931      	ldr	r1, [pc, #196]	; (4290 <spi_read_reg+0x1cc>)
    41cc:	4b31      	ldr	r3, [pc, #196]	; (4294 <spi_read_reg+0x1d0>)
    41ce:	0018      	movs	r0, r3
    41d0:	4b31      	ldr	r3, [pc, #196]	; (4298 <spi_read_reg+0x1d4>)
    41d2:	4798      	blx	r3
    41d4:	4b38      	ldr	r3, [pc, #224]	; (42b8 <spi_read_reg+0x1f4>)
    41d6:	0018      	movs	r0, r3
    41d8:	4b38      	ldr	r3, [pc, #224]	; (42bc <spi_read_reg+0x1f8>)
    41da:	4798      	blx	r3
    41dc:	200d      	movs	r0, #13
    41de:	4b30      	ldr	r3, [pc, #192]	; (42a0 <spi_read_reg+0x1dc>)
    41e0:	4798      	blx	r3
		goto _FAIL_;
    41e2:	e014      	b.n	420e <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    41e4:	2308      	movs	r3, #8
    41e6:	18fb      	adds	r3, r7, r3
    41e8:	781b      	ldrb	r3, [r3, #0]
    41ea:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    41ec:	2308      	movs	r3, #8
    41ee:	18fb      	adds	r3, r7, r3
    41f0:	785b      	ldrb	r3, [r3, #1]
    41f2:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    41f4:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    41f6:	2308      	movs	r3, #8
    41f8:	18fb      	adds	r3, r7, r3
    41fa:	789b      	ldrb	r3, [r3, #2]
    41fc:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    41fe:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    4200:	2308      	movs	r3, #8
    4202:	18fb      	adds	r3, r7, r3
    4204:	78db      	ldrb	r3, [r3, #3]
    4206:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    4208:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    420a:	683b      	ldr	r3, [r7, #0]
    420c:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    420e:	230e      	movs	r3, #14
    4210:	18fb      	adds	r3, r7, r3
    4212:	781b      	ldrb	r3, [r3, #0]
    4214:	b25b      	sxtb	r3, r3
    4216:	2b01      	cmp	r3, #1
    4218:	d02e      	beq.n	4278 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    421a:	2001      	movs	r0, #1
    421c:	4b28      	ldr	r3, [pc, #160]	; (42c0 <spi_read_reg+0x1fc>)
    421e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4220:	2300      	movs	r3, #0
    4222:	9300      	str	r3, [sp, #0]
    4224:	2300      	movs	r3, #0
    4226:	2200      	movs	r2, #0
    4228:	2100      	movs	r1, #0
    422a:	20cf      	movs	r0, #207	; 0xcf
    422c:	4c16      	ldr	r4, [pc, #88]	; (4288 <spi_read_reg+0x1c4>)
    422e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4230:	20cf      	movs	r0, #207	; 0xcf
    4232:	4b1c      	ldr	r3, [pc, #112]	; (42a4 <spi_read_reg+0x1e0>)
    4234:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    4236:	4a23      	ldr	r2, [pc, #140]	; (42c4 <spi_read_reg+0x200>)
    4238:	4915      	ldr	r1, [pc, #84]	; (4290 <spi_read_reg+0x1cc>)
    423a:	4b16      	ldr	r3, [pc, #88]	; (4294 <spi_read_reg+0x1d0>)
    423c:	0018      	movs	r0, r3
    423e:	4b16      	ldr	r3, [pc, #88]	; (4298 <spi_read_reg+0x1d4>)
    4240:	4798      	blx	r3
    4242:	230f      	movs	r3, #15
    4244:	18fb      	adds	r3, r7, r3
    4246:	7819      	ldrb	r1, [r3, #0]
    4248:	687a      	ldr	r2, [r7, #4]
    424a:	4b1f      	ldr	r3, [pc, #124]	; (42c8 <spi_read_reg+0x204>)
    424c:	0018      	movs	r0, r3
    424e:	4b12      	ldr	r3, [pc, #72]	; (4298 <spi_read_reg+0x1d4>)
    4250:	4798      	blx	r3
    4252:	200d      	movs	r0, #13
    4254:	4b12      	ldr	r3, [pc, #72]	; (42a0 <spi_read_reg+0x1dc>)
    4256:	4798      	blx	r3
		nm_bsp_sleep(1);
    4258:	2001      	movs	r0, #1
    425a:	4b19      	ldr	r3, [pc, #100]	; (42c0 <spi_read_reg+0x1fc>)
    425c:	4798      	blx	r3
		retry--;
    425e:	230f      	movs	r3, #15
    4260:	18fb      	adds	r3, r7, r3
    4262:	781a      	ldrb	r2, [r3, #0]
    4264:	230f      	movs	r3, #15
    4266:	18fb      	adds	r3, r7, r3
    4268:	3a01      	subs	r2, #1
    426a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    426c:	230f      	movs	r3, #15
    426e:	18fb      	adds	r3, r7, r3
    4270:	781b      	ldrb	r3, [r3, #0]
    4272:	2b00      	cmp	r3, #0
    4274:	d000      	beq.n	4278 <spi_read_reg+0x1b4>
    4276:	e73a      	b.n	40ee <spi_read_reg+0x2a>
	}
		
	return result;
    4278:	230e      	movs	r3, #14
    427a:	18fb      	adds	r3, r7, r3
    427c:	781b      	ldrb	r3, [r3, #0]
    427e:	b25b      	sxtb	r3, r3
}
    4280:	0018      	movs	r0, r3
    4282:	46bd      	mov	sp, r7
    4284:	b004      	add	sp, #16
    4286:	bdb0      	pop	{r4, r5, r7, pc}
    4288:	000033f1 	.word	0x000033f1
    428c:	00000417 	.word	0x00000417
    4290:	000148a4 	.word	0x000148a4
    4294:	000142ac 	.word	0x000142ac
    4298:	0000efc9 	.word	0x0000efc9
    429c:	00014608 	.word	0x00014608
    42a0:	0000effd 	.word	0x0000effd
    42a4:	00003835 	.word	0x00003835
    42a8:	0000041d 	.word	0x0000041d
    42ac:	00014634 	.word	0x00014634
    42b0:	0000396d 	.word	0x0000396d
    42b4:	00000424 	.word	0x00000424
    42b8:	00014668 	.word	0x00014668
    42bc:	0000f0e5 	.word	0x0000f0e5
    42c0:	00000331 	.word	0x00000331
    42c4:	0000043c 	.word	0x0000043c
    42c8:	00014688 	.word	0x00014688

000042cc <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    42cc:	b5b0      	push	{r4, r5, r7, lr}
    42ce:	b088      	sub	sp, #32
    42d0:	af02      	add	r7, sp, #8
    42d2:	60f8      	str	r0, [r7, #12]
    42d4:	60b9      	str	r1, [r7, #8]
    42d6:	1dbb      	adds	r3, r7, #6
    42d8:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    42da:	2314      	movs	r3, #20
    42dc:	18fb      	adds	r3, r7, r3
    42de:	22c8      	movs	r2, #200	; 0xc8
    42e0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    42e2:	2316      	movs	r3, #22
    42e4:	18fb      	adds	r3, r7, r3
    42e6:	220a      	movs	r2, #10
    42e8:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    42ea:	2315      	movs	r3, #21
    42ec:	18fb      	adds	r3, r7, r3
    42ee:	2200      	movs	r2, #0
    42f0:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    42f2:	1dbb      	adds	r3, r7, #6
    42f4:	881b      	ldrh	r3, [r3, #0]
    42f6:	2b01      	cmp	r3, #1
    42f8:	d106      	bne.n	4308 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    42fa:	1dbb      	adds	r3, r7, #6
    42fc:	2202      	movs	r2, #2
    42fe:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    4300:	2315      	movs	r3, #21
    4302:	18fb      	adds	r3, r7, r3
    4304:	2201      	movs	r2, #1
    4306:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    4308:	1dbb      	adds	r3, r7, #6
    430a:	881a      	ldrh	r2, [r3, #0]
    430c:	2317      	movs	r3, #23
    430e:	18fc      	adds	r4, r7, r3
    4310:	68f9      	ldr	r1, [r7, #12]
    4312:	2314      	movs	r3, #20
    4314:	18fb      	adds	r3, r7, r3
    4316:	7818      	ldrb	r0, [r3, #0]
    4318:	2300      	movs	r3, #0
    431a:	9300      	str	r3, [sp, #0]
    431c:	0013      	movs	r3, r2
    431e:	2200      	movs	r2, #0
    4320:	4d56      	ldr	r5, [pc, #344]	; (447c <nm_spi_read+0x1b0>)
    4322:	47a8      	blx	r5
    4324:	0003      	movs	r3, r0
    4326:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4328:	2317      	movs	r3, #23
    432a:	18fb      	adds	r3, r7, r3
    432c:	781b      	ldrb	r3, [r3, #0]
    432e:	b25b      	sxtb	r3, r3
    4330:	2b01      	cmp	r3, #1
    4332:	d00f      	beq.n	4354 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    4334:	4a52      	ldr	r2, [pc, #328]	; (4480 <nm_spi_read+0x1b4>)
    4336:	4953      	ldr	r1, [pc, #332]	; (4484 <nm_spi_read+0x1b8>)
    4338:	4b53      	ldr	r3, [pc, #332]	; (4488 <nm_spi_read+0x1bc>)
    433a:	0018      	movs	r0, r3
    433c:	4b53      	ldr	r3, [pc, #332]	; (448c <nm_spi_read+0x1c0>)
    433e:	4798      	blx	r3
    4340:	68fa      	ldr	r2, [r7, #12]
    4342:	4b53      	ldr	r3, [pc, #332]	; (4490 <nm_spi_read+0x1c4>)
    4344:	0011      	movs	r1, r2
    4346:	0018      	movs	r0, r3
    4348:	4b50      	ldr	r3, [pc, #320]	; (448c <nm_spi_read+0x1c0>)
    434a:	4798      	blx	r3
    434c:	200d      	movs	r0, #13
    434e:	4b51      	ldr	r3, [pc, #324]	; (4494 <nm_spi_read+0x1c8>)
    4350:	4798      	blx	r3
		goto _FAIL_;
    4352:	e055      	b.n	4400 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    4354:	2317      	movs	r3, #23
    4356:	18fc      	adds	r4, r7, r3
    4358:	2314      	movs	r3, #20
    435a:	18fb      	adds	r3, r7, r3
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	0018      	movs	r0, r3
    4360:	4b4d      	ldr	r3, [pc, #308]	; (4498 <nm_spi_read+0x1cc>)
    4362:	4798      	blx	r3
    4364:	0003      	movs	r3, r0
    4366:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4368:	2317      	movs	r3, #23
    436a:	18fb      	adds	r3, r7, r3
    436c:	781b      	ldrb	r3, [r3, #0]
    436e:	b25b      	sxtb	r3, r3
    4370:	2b01      	cmp	r3, #1
    4372:	d00f      	beq.n	4394 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    4374:	4a49      	ldr	r2, [pc, #292]	; (449c <nm_spi_read+0x1d0>)
    4376:	4943      	ldr	r1, [pc, #268]	; (4484 <nm_spi_read+0x1b8>)
    4378:	4b43      	ldr	r3, [pc, #268]	; (4488 <nm_spi_read+0x1bc>)
    437a:	0018      	movs	r0, r3
    437c:	4b43      	ldr	r3, [pc, #268]	; (448c <nm_spi_read+0x1c0>)
    437e:	4798      	blx	r3
    4380:	68fa      	ldr	r2, [r7, #12]
    4382:	4b47      	ldr	r3, [pc, #284]	; (44a0 <nm_spi_read+0x1d4>)
    4384:	0011      	movs	r1, r2
    4386:	0018      	movs	r0, r3
    4388:	4b40      	ldr	r3, [pc, #256]	; (448c <nm_spi_read+0x1c0>)
    438a:	4798      	blx	r3
    438c:	200d      	movs	r0, #13
    438e:	4b41      	ldr	r3, [pc, #260]	; (4494 <nm_spi_read+0x1c8>)
    4390:	4798      	blx	r3
		goto _FAIL_;
    4392:	e035      	b.n	4400 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    4394:	2315      	movs	r3, #21
    4396:	18fb      	adds	r3, r7, r3
    4398:	781b      	ldrb	r3, [r3, #0]
    439a:	2b00      	cmp	r3, #0
    439c:	d011      	beq.n	43c2 <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    439e:	2317      	movs	r3, #23
    43a0:	18fc      	adds	r4, r7, r3
    43a2:	1dbb      	adds	r3, r7, #6
    43a4:	8819      	ldrh	r1, [r3, #0]
    43a6:	2310      	movs	r3, #16
    43a8:	18fb      	adds	r3, r7, r3
    43aa:	2200      	movs	r2, #0
    43ac:	0018      	movs	r0, r3
    43ae:	4b3d      	ldr	r3, [pc, #244]	; (44a4 <nm_spi_read+0x1d8>)
    43b0:	4798      	blx	r3
    43b2:	0003      	movs	r3, r0
    43b4:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    43b6:	2310      	movs	r3, #16
    43b8:	18fb      	adds	r3, r7, r3
    43ba:	781a      	ldrb	r2, [r3, #0]
    43bc:	68bb      	ldr	r3, [r7, #8]
    43be:	701a      	strb	r2, [r3, #0]
    43c0:	e00a      	b.n	43d8 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    43c2:	2317      	movs	r3, #23
    43c4:	18fc      	adds	r4, r7, r3
    43c6:	1dbb      	adds	r3, r7, #6
    43c8:	8819      	ldrh	r1, [r3, #0]
    43ca:	68bb      	ldr	r3, [r7, #8]
    43cc:	2200      	movs	r2, #0
    43ce:	0018      	movs	r0, r3
    43d0:	4b34      	ldr	r3, [pc, #208]	; (44a4 <nm_spi_read+0x1d8>)
    43d2:	4798      	blx	r3
    43d4:	0003      	movs	r3, r0
    43d6:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    43d8:	2317      	movs	r3, #23
    43da:	18fb      	adds	r3, r7, r3
    43dc:	781b      	ldrb	r3, [r3, #0]
    43de:	b25b      	sxtb	r3, r3
    43e0:	2b01      	cmp	r3, #1
    43e2:	d00d      	beq.n	4400 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    43e4:	4a30      	ldr	r2, [pc, #192]	; (44a8 <nm_spi_read+0x1dc>)
    43e6:	4927      	ldr	r1, [pc, #156]	; (4484 <nm_spi_read+0x1b8>)
    43e8:	4b27      	ldr	r3, [pc, #156]	; (4488 <nm_spi_read+0x1bc>)
    43ea:	0018      	movs	r0, r3
    43ec:	4b27      	ldr	r3, [pc, #156]	; (448c <nm_spi_read+0x1c0>)
    43ee:	4798      	blx	r3
    43f0:	4b2e      	ldr	r3, [pc, #184]	; (44ac <nm_spi_read+0x1e0>)
    43f2:	0018      	movs	r0, r3
    43f4:	4b2e      	ldr	r3, [pc, #184]	; (44b0 <nm_spi_read+0x1e4>)
    43f6:	4798      	blx	r3
    43f8:	200d      	movs	r0, #13
    43fa:	4b26      	ldr	r3, [pc, #152]	; (4494 <nm_spi_read+0x1c8>)
    43fc:	4798      	blx	r3
		goto _FAIL_;
    43fe:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    4400:	2317      	movs	r3, #23
    4402:	18fb      	adds	r3, r7, r3
    4404:	781b      	ldrb	r3, [r3, #0]
    4406:	b25b      	sxtb	r3, r3
    4408:	2b01      	cmp	r3, #1
    440a:	d02f      	beq.n	446c <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    440c:	2001      	movs	r0, #1
    440e:	4b29      	ldr	r3, [pc, #164]	; (44b4 <nm_spi_read+0x1e8>)
    4410:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4412:	2300      	movs	r3, #0
    4414:	9300      	str	r3, [sp, #0]
    4416:	2300      	movs	r3, #0
    4418:	2200      	movs	r2, #0
    441a:	2100      	movs	r1, #0
    441c:	20cf      	movs	r0, #207	; 0xcf
    441e:	4c17      	ldr	r4, [pc, #92]	; (447c <nm_spi_read+0x1b0>)
    4420:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4422:	20cf      	movs	r0, #207	; 0xcf
    4424:	4b1c      	ldr	r3, [pc, #112]	; (4498 <nm_spi_read+0x1cc>)
    4426:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4428:	4a23      	ldr	r2, [pc, #140]	; (44b8 <nm_spi_read+0x1ec>)
    442a:	4916      	ldr	r1, [pc, #88]	; (4484 <nm_spi_read+0x1b8>)
    442c:	4b16      	ldr	r3, [pc, #88]	; (4488 <nm_spi_read+0x1bc>)
    442e:	0018      	movs	r0, r3
    4430:	4b16      	ldr	r3, [pc, #88]	; (448c <nm_spi_read+0x1c0>)
    4432:	4798      	blx	r3
    4434:	2316      	movs	r3, #22
    4436:	18fb      	adds	r3, r7, r3
    4438:	7819      	ldrb	r1, [r3, #0]
    443a:	1dbb      	adds	r3, r7, #6
    443c:	881b      	ldrh	r3, [r3, #0]
    443e:	68fa      	ldr	r2, [r7, #12]
    4440:	481e      	ldr	r0, [pc, #120]	; (44bc <nm_spi_read+0x1f0>)
    4442:	4c12      	ldr	r4, [pc, #72]	; (448c <nm_spi_read+0x1c0>)
    4444:	47a0      	blx	r4
    4446:	200d      	movs	r0, #13
    4448:	4b12      	ldr	r3, [pc, #72]	; (4494 <nm_spi_read+0x1c8>)
    444a:	4798      	blx	r3
		nm_bsp_sleep(1);
    444c:	2001      	movs	r0, #1
    444e:	4b19      	ldr	r3, [pc, #100]	; (44b4 <nm_spi_read+0x1e8>)
    4450:	4798      	blx	r3
		retry--;
    4452:	2316      	movs	r3, #22
    4454:	18fb      	adds	r3, r7, r3
    4456:	781a      	ldrb	r2, [r3, #0]
    4458:	2316      	movs	r3, #22
    445a:	18fb      	adds	r3, r7, r3
    445c:	3a01      	subs	r2, #1
    445e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4460:	2316      	movs	r3, #22
    4462:	18fb      	adds	r3, r7, r3
    4464:	781b      	ldrb	r3, [r3, #0]
    4466:	2b00      	cmp	r3, #0
    4468:	d000      	beq.n	446c <nm_spi_read+0x1a0>
    446a:	e742      	b.n	42f2 <nm_spi_read+0x26>
	}

	return result;
    446c:	2317      	movs	r3, #23
    446e:	18fb      	adds	r3, r7, r3
    4470:	781b      	ldrb	r3, [r3, #0]
    4472:	b25b      	sxtb	r3, r3
}
    4474:	0018      	movs	r0, r3
    4476:	46bd      	mov	sp, r7
    4478:	b006      	add	sp, #24
    447a:	bdb0      	pop	{r4, r5, r7, pc}
    447c:	000033f1 	.word	0x000033f1
    4480:	0000045d 	.word	0x0000045d
    4484:	000148b4 	.word	0x000148b4
    4488:	000142ac 	.word	0x000142ac
    448c:	0000efc9 	.word	0x0000efc9
    4490:	000146a0 	.word	0x000146a0
    4494:	0000effd 	.word	0x0000effd
    4498:	00003835 	.word	0x00003835
    449c:	00000463 	.word	0x00000463
    44a0:	000146d0 	.word	0x000146d0
    44a4:	0000396d 	.word	0x0000396d
    44a8:	00000473 	.word	0x00000473
    44ac:	00014708 	.word	0x00014708
    44b0:	0000f0e5 	.word	0x0000f0e5
    44b4:	00000331 	.word	0x00000331
    44b8:	00000484 	.word	0x00000484
    44bc:	000145ec 	.word	0x000145ec

000044c0 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b082      	sub	sp, #8
    44c4:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    44c6:	4b0c      	ldr	r3, [pc, #48]	; (44f8 <spi_init_pkt_sz+0x38>)
    44c8:	0018      	movs	r0, r3
    44ca:	4b0c      	ldr	r3, [pc, #48]	; (44fc <spi_init_pkt_sz+0x3c>)
    44cc:	4798      	blx	r3
    44ce:	0003      	movs	r3, r0
    44d0:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	2270      	movs	r2, #112	; 0x70
    44d6:	4393      	bics	r3, r2
    44d8:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	2250      	movs	r2, #80	; 0x50
    44de:	4313      	orrs	r3, r2
    44e0:	607b      	str	r3, [r7, #4]
    44e2:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    44e4:	687b      	ldr	r3, [r7, #4]
    44e6:	4a04      	ldr	r2, [pc, #16]	; (44f8 <spi_init_pkt_sz+0x38>)
    44e8:	0019      	movs	r1, r3
    44ea:	0010      	movs	r0, r2
    44ec:	4b04      	ldr	r3, [pc, #16]	; (4500 <spi_init_pkt_sz+0x40>)
    44ee:	4798      	blx	r3
}
    44f0:	46c0      	nop			; (mov r8, r8)
    44f2:	46bd      	mov	sp, r7
    44f4:	b002      	add	sp, #8
    44f6:	bd80      	pop	{r7, pc}
    44f8:	0000e824 	.word	0x0000e824
    44fc:	00004699 	.word	0x00004699
    4500:	0000470d 	.word	0x0000470d

00004504 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    4504:	b590      	push	{r4, r7, lr}
    4506:	b083      	sub	sp, #12
    4508:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    450a:	2300      	movs	r3, #0
    450c:	9300      	str	r3, [sp, #0]
    450e:	2300      	movs	r3, #0
    4510:	2200      	movs	r2, #0
    4512:	2100      	movs	r1, #0
    4514:	20cf      	movs	r0, #207	; 0xcf
    4516:	4c05      	ldr	r4, [pc, #20]	; (452c <nm_spi_reset+0x28>)
    4518:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    451a:	20cf      	movs	r0, #207	; 0xcf
    451c:	4b04      	ldr	r3, [pc, #16]	; (4530 <nm_spi_reset+0x2c>)
    451e:	4798      	blx	r3
	return M2M_SUCCESS;
    4520:	2300      	movs	r3, #0
}
    4522:	0018      	movs	r0, r3
    4524:	46bd      	mov	sp, r7
    4526:	b001      	add	sp, #4
    4528:	bd90      	pop	{r4, r7, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	000033f1 	.word	0x000033f1
    4530:	00003835 	.word	0x00003835

00004534 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    4534:	b580      	push	{r7, lr}
    4536:	b082      	sub	sp, #8
    4538:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    453a:	2300      	movs	r3, #0
    453c:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    453e:	4b3e      	ldr	r3, [pc, #248]	; (4638 <nm_spi_init+0x104>)
    4540:	2200      	movs	r2, #0
    4542:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4544:	003b      	movs	r3, r7
    4546:	4a3d      	ldr	r2, [pc, #244]	; (463c <nm_spi_init+0x108>)
    4548:	0019      	movs	r1, r3
    454a:	0010      	movs	r0, r2
    454c:	4b3c      	ldr	r3, [pc, #240]	; (4640 <nm_spi_init+0x10c>)
    454e:	4798      	blx	r3
    4550:	1e03      	subs	r3, r0, #0
    4552:	d126      	bne.n	45a2 <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    4554:	4b38      	ldr	r3, [pc, #224]	; (4638 <nm_spi_init+0x104>)
    4556:	2201      	movs	r2, #1
    4558:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    455a:	4a3a      	ldr	r2, [pc, #232]	; (4644 <nm_spi_init+0x110>)
    455c:	493a      	ldr	r1, [pc, #232]	; (4648 <nm_spi_init+0x114>)
    455e:	4b3b      	ldr	r3, [pc, #236]	; (464c <nm_spi_init+0x118>)
    4560:	0018      	movs	r0, r3
    4562:	4b3b      	ldr	r3, [pc, #236]	; (4650 <nm_spi_init+0x11c>)
    4564:	4798      	blx	r3
    4566:	4b3b      	ldr	r3, [pc, #236]	; (4654 <nm_spi_init+0x120>)
    4568:	0018      	movs	r0, r3
    456a:	4b3b      	ldr	r3, [pc, #236]	; (4658 <nm_spi_init+0x124>)
    456c:	4798      	blx	r3
    456e:	200d      	movs	r0, #13
    4570:	4b3a      	ldr	r3, [pc, #232]	; (465c <nm_spi_init+0x128>)
    4572:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    4574:	003b      	movs	r3, r7
    4576:	4a31      	ldr	r2, [pc, #196]	; (463c <nm_spi_init+0x108>)
    4578:	0019      	movs	r1, r3
    457a:	0010      	movs	r0, r2
    457c:	4b30      	ldr	r3, [pc, #192]	; (4640 <nm_spi_init+0x10c>)
    457e:	4798      	blx	r3
    4580:	1e03      	subs	r3, r0, #0
    4582:	d10e      	bne.n	45a2 <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    4584:	4a36      	ldr	r2, [pc, #216]	; (4660 <nm_spi_init+0x12c>)
    4586:	4930      	ldr	r1, [pc, #192]	; (4648 <nm_spi_init+0x114>)
    4588:	4b30      	ldr	r3, [pc, #192]	; (464c <nm_spi_init+0x118>)
    458a:	0018      	movs	r0, r3
    458c:	4b30      	ldr	r3, [pc, #192]	; (4650 <nm_spi_init+0x11c>)
    458e:	4798      	blx	r3
    4590:	4b34      	ldr	r3, [pc, #208]	; (4664 <nm_spi_init+0x130>)
    4592:	0018      	movs	r0, r3
    4594:	4b30      	ldr	r3, [pc, #192]	; (4658 <nm_spi_init+0x124>)
    4596:	4798      	blx	r3
    4598:	200d      	movs	r0, #13
    459a:	4b30      	ldr	r3, [pc, #192]	; (465c <nm_spi_init+0x128>)
    459c:	4798      	blx	r3
			return 0;
    459e:	2300      	movs	r3, #0
    45a0:	e045      	b.n	462e <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    45a2:	4b25      	ldr	r3, [pc, #148]	; (4638 <nm_spi_init+0x104>)
    45a4:	781b      	ldrb	r3, [r3, #0]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d125      	bne.n	45f6 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    45aa:	683b      	ldr	r3, [r7, #0]
    45ac:	220c      	movs	r2, #12
    45ae:	4393      	bics	r3, r2
    45b0:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    45b2:	683b      	ldr	r3, [r7, #0]
    45b4:	2270      	movs	r2, #112	; 0x70
    45b6:	4393      	bics	r3, r2
    45b8:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    45ba:	683b      	ldr	r3, [r7, #0]
    45bc:	2250      	movs	r2, #80	; 0x50
    45be:	4313      	orrs	r3, r2
    45c0:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    45c2:	683b      	ldr	r3, [r7, #0]
    45c4:	4a1d      	ldr	r2, [pc, #116]	; (463c <nm_spi_init+0x108>)
    45c6:	0019      	movs	r1, r3
    45c8:	0010      	movs	r0, r2
    45ca:	4b27      	ldr	r3, [pc, #156]	; (4668 <nm_spi_init+0x134>)
    45cc:	4798      	blx	r3
    45ce:	1e03      	subs	r3, r0, #0
    45d0:	d10e      	bne.n	45f0 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    45d2:	4a26      	ldr	r2, [pc, #152]	; (466c <nm_spi_init+0x138>)
    45d4:	491c      	ldr	r1, [pc, #112]	; (4648 <nm_spi_init+0x114>)
    45d6:	4b1d      	ldr	r3, [pc, #116]	; (464c <nm_spi_init+0x118>)
    45d8:	0018      	movs	r0, r3
    45da:	4b1d      	ldr	r3, [pc, #116]	; (4650 <nm_spi_init+0x11c>)
    45dc:	4798      	blx	r3
    45de:	4b24      	ldr	r3, [pc, #144]	; (4670 <nm_spi_init+0x13c>)
    45e0:	0018      	movs	r0, r3
    45e2:	4b1d      	ldr	r3, [pc, #116]	; (4658 <nm_spi_init+0x124>)
    45e4:	4798      	blx	r3
    45e6:	200d      	movs	r0, #13
    45e8:	4b1c      	ldr	r3, [pc, #112]	; (465c <nm_spi_init+0x128>)
    45ea:	4798      	blx	r3
			return 0;
    45ec:	2300      	movs	r3, #0
    45ee:	e01e      	b.n	462e <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    45f0:	4b11      	ldr	r3, [pc, #68]	; (4638 <nm_spi_init+0x104>)
    45f2:	2201      	movs	r2, #1
    45f4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    45f6:	1d3a      	adds	r2, r7, #4
    45f8:	2380      	movs	r3, #128	; 0x80
    45fa:	015b      	lsls	r3, r3, #5
    45fc:	0011      	movs	r1, r2
    45fe:	0018      	movs	r0, r3
    4600:	4b0f      	ldr	r3, [pc, #60]	; (4640 <nm_spi_init+0x10c>)
    4602:	4798      	blx	r3
    4604:	1e03      	subs	r3, r0, #0
    4606:	d10f      	bne.n	4628 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    4608:	4a1a      	ldr	r2, [pc, #104]	; (4674 <nm_spi_init+0x140>)
    460a:	490f      	ldr	r1, [pc, #60]	; (4648 <nm_spi_init+0x114>)
    460c:	4b0f      	ldr	r3, [pc, #60]	; (464c <nm_spi_init+0x118>)
    460e:	0018      	movs	r0, r3
    4610:	4b0f      	ldr	r3, [pc, #60]	; (4650 <nm_spi_init+0x11c>)
    4612:	4798      	blx	r3
    4614:	4b18      	ldr	r3, [pc, #96]	; (4678 <nm_spi_init+0x144>)
    4616:	0018      	movs	r0, r3
    4618:	4b0f      	ldr	r3, [pc, #60]	; (4658 <nm_spi_init+0x124>)
    461a:	4798      	blx	r3
    461c:	200d      	movs	r0, #13
    461e:	4b0f      	ldr	r3, [pc, #60]	; (465c <nm_spi_init+0x128>)
    4620:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    4622:	2306      	movs	r3, #6
    4624:	425b      	negs	r3, r3
    4626:	e002      	b.n	462e <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    4628:	4b14      	ldr	r3, [pc, #80]	; (467c <nm_spi_init+0x148>)
    462a:	4798      	blx	r3


	return M2M_SUCCESS;
    462c:	2300      	movs	r3, #0
}
    462e:	0018      	movs	r0, r3
    4630:	46bd      	mov	sp, r7
    4632:	b002      	add	sp, #8
    4634:	bd80      	pop	{r7, pc}
    4636:	46c0      	nop			; (mov r8, r8)
    4638:	2000023c 	.word	0x2000023c
    463c:	0000e824 	.word	0x0000e824
    4640:	000040c5 	.word	0x000040c5
    4644:	000004c7 	.word	0x000004c7
    4648:	000148c0 	.word	0x000148c0
    464c:	000142ac 	.word	0x000142ac
    4650:	0000efc9 	.word	0x0000efc9
    4654:	00014730 	.word	0x00014730
    4658:	0000f0e5 	.word	0x0000f0e5
    465c:	0000effd 	.word	0x0000effd
    4660:	000004ca 	.word	0x000004ca
    4664:	00014780 	.word	0x00014780
    4668:	00003d45 	.word	0x00003d45
    466c:	000004d4 	.word	0x000004d4
    4670:	000147ac 	.word	0x000147ac
    4674:	000004de 	.word	0x000004de
    4678:	000147e0 	.word	0x000147e0
    467c:	000044c1 	.word	0x000044c1

00004680 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    4680:	b580      	push	{r7, lr}
    4682:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4684:	4b03      	ldr	r3, [pc, #12]	; (4694 <nm_spi_deinit+0x14>)
    4686:	2200      	movs	r2, #0
    4688:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    468a:	2300      	movs	r3, #0
}
    468c:	0018      	movs	r0, r3
    468e:	46bd      	mov	sp, r7
    4690:	bd80      	pop	{r7, pc}
    4692:	46c0      	nop			; (mov r8, r8)
    4694:	2000023c 	.word	0x2000023c

00004698 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4698:	b580      	push	{r7, lr}
    469a:	b084      	sub	sp, #16
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    46a0:	230c      	movs	r3, #12
    46a2:	18fa      	adds	r2, r7, r3
    46a4:	687b      	ldr	r3, [r7, #4]
    46a6:	0011      	movs	r1, r2
    46a8:	0018      	movs	r0, r3
    46aa:	4b03      	ldr	r3, [pc, #12]	; (46b8 <nm_spi_read_reg+0x20>)
    46ac:	4798      	blx	r3

	return u32Val;
    46ae:	68fb      	ldr	r3, [r7, #12]
}
    46b0:	0018      	movs	r0, r3
    46b2:	46bd      	mov	sp, r7
    46b4:	b004      	add	sp, #16
    46b6:	bd80      	pop	{r7, pc}
    46b8:	000040c5 	.word	0x000040c5

000046bc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    46bc:	b590      	push	{r4, r7, lr}
    46be:	b085      	sub	sp, #20
    46c0:	af00      	add	r7, sp, #0
    46c2:	6078      	str	r0, [r7, #4]
    46c4:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    46c6:	230f      	movs	r3, #15
    46c8:	18fc      	adds	r4, r7, r3
    46ca:	683a      	ldr	r2, [r7, #0]
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	0011      	movs	r1, r2
    46d0:	0018      	movs	r0, r3
    46d2:	4b0d      	ldr	r3, [pc, #52]	; (4708 <nm_spi_read_reg_with_ret+0x4c>)
    46d4:	4798      	blx	r3
    46d6:	0003      	movs	r3, r0
    46d8:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    46da:	230f      	movs	r3, #15
    46dc:	18fb      	adds	r3, r7, r3
    46de:	781b      	ldrb	r3, [r3, #0]
    46e0:	b25b      	sxtb	r3, r3
    46e2:	2b01      	cmp	r3, #1
    46e4:	d104      	bne.n	46f0 <nm_spi_read_reg_with_ret+0x34>
    46e6:	230f      	movs	r3, #15
    46e8:	18fb      	adds	r3, r7, r3
    46ea:	2200      	movs	r2, #0
    46ec:	701a      	strb	r2, [r3, #0]
    46ee:	e003      	b.n	46f8 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    46f0:	230f      	movs	r3, #15
    46f2:	18fb      	adds	r3, r7, r3
    46f4:	22fa      	movs	r2, #250	; 0xfa
    46f6:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    46f8:	230f      	movs	r3, #15
    46fa:	18fb      	adds	r3, r7, r3
    46fc:	781b      	ldrb	r3, [r3, #0]
    46fe:	b25b      	sxtb	r3, r3
}
    4700:	0018      	movs	r0, r3
    4702:	46bd      	mov	sp, r7
    4704:	b005      	add	sp, #20
    4706:	bd90      	pop	{r4, r7, pc}
    4708:	000040c5 	.word	0x000040c5

0000470c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    470c:	b590      	push	{r4, r7, lr}
    470e:	b085      	sub	sp, #20
    4710:	af00      	add	r7, sp, #0
    4712:	6078      	str	r0, [r7, #4]
    4714:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    4716:	230f      	movs	r3, #15
    4718:	18fc      	adds	r4, r7, r3
    471a:	683a      	ldr	r2, [r7, #0]
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	0011      	movs	r1, r2
    4720:	0018      	movs	r0, r3
    4722:	4b0d      	ldr	r3, [pc, #52]	; (4758 <nm_spi_write_reg+0x4c>)
    4724:	4798      	blx	r3
    4726:	0003      	movs	r3, r0
    4728:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    472a:	230f      	movs	r3, #15
    472c:	18fb      	adds	r3, r7, r3
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	b25b      	sxtb	r3, r3
    4732:	2b01      	cmp	r3, #1
    4734:	d104      	bne.n	4740 <nm_spi_write_reg+0x34>
    4736:	230f      	movs	r3, #15
    4738:	18fb      	adds	r3, r7, r3
    473a:	2200      	movs	r2, #0
    473c:	701a      	strb	r2, [r3, #0]
    473e:	e003      	b.n	4748 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4740:	230f      	movs	r3, #15
    4742:	18fb      	adds	r3, r7, r3
    4744:	22fa      	movs	r2, #250	; 0xfa
    4746:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4748:	230f      	movs	r3, #15
    474a:	18fb      	adds	r3, r7, r3
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	b25b      	sxtb	r3, r3
}
    4750:	0018      	movs	r0, r3
    4752:	46bd      	mov	sp, r7
    4754:	b005      	add	sp, #20
    4756:	bd90      	pop	{r4, r7, pc}
    4758:	00003d45 	.word	0x00003d45

0000475c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    475c:	b590      	push	{r4, r7, lr}
    475e:	b087      	sub	sp, #28
    4760:	af00      	add	r7, sp, #0
    4762:	60f8      	str	r0, [r7, #12]
    4764:	60b9      	str	r1, [r7, #8]
    4766:	1dbb      	adds	r3, r7, #6
    4768:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    476a:	2317      	movs	r3, #23
    476c:	18fc      	adds	r4, r7, r3
    476e:	1dbb      	adds	r3, r7, #6
    4770:	881a      	ldrh	r2, [r3, #0]
    4772:	68b9      	ldr	r1, [r7, #8]
    4774:	68fb      	ldr	r3, [r7, #12]
    4776:	0018      	movs	r0, r3
    4778:	4b0d      	ldr	r3, [pc, #52]	; (47b0 <nm_spi_read_block+0x54>)
    477a:	4798      	blx	r3
    477c:	0003      	movs	r3, r0
    477e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4780:	2317      	movs	r3, #23
    4782:	18fb      	adds	r3, r7, r3
    4784:	781b      	ldrb	r3, [r3, #0]
    4786:	b25b      	sxtb	r3, r3
    4788:	2b01      	cmp	r3, #1
    478a:	d104      	bne.n	4796 <nm_spi_read_block+0x3a>
    478c:	2317      	movs	r3, #23
    478e:	18fb      	adds	r3, r7, r3
    4790:	2200      	movs	r2, #0
    4792:	701a      	strb	r2, [r3, #0]
    4794:	e003      	b.n	479e <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4796:	2317      	movs	r3, #23
    4798:	18fb      	adds	r3, r7, r3
    479a:	22fa      	movs	r2, #250	; 0xfa
    479c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    479e:	2317      	movs	r3, #23
    47a0:	18fb      	adds	r3, r7, r3
    47a2:	781b      	ldrb	r3, [r3, #0]
    47a4:	b25b      	sxtb	r3, r3
}
    47a6:	0018      	movs	r0, r3
    47a8:	46bd      	mov	sp, r7
    47aa:	b007      	add	sp, #28
    47ac:	bd90      	pop	{r4, r7, pc}
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	000042cd 	.word	0x000042cd

000047b4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    47b4:	b590      	push	{r4, r7, lr}
    47b6:	b087      	sub	sp, #28
    47b8:	af00      	add	r7, sp, #0
    47ba:	60f8      	str	r0, [r7, #12]
    47bc:	60b9      	str	r1, [r7, #8]
    47be:	1dbb      	adds	r3, r7, #6
    47c0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    47c2:	2317      	movs	r3, #23
    47c4:	18fc      	adds	r4, r7, r3
    47c6:	1dbb      	adds	r3, r7, #6
    47c8:	881a      	ldrh	r2, [r3, #0]
    47ca:	68b9      	ldr	r1, [r7, #8]
    47cc:	68fb      	ldr	r3, [r7, #12]
    47ce:	0018      	movs	r0, r3
    47d0:	4b0d      	ldr	r3, [pc, #52]	; (4808 <nm_spi_write_block+0x54>)
    47d2:	4798      	blx	r3
    47d4:	0003      	movs	r3, r0
    47d6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    47d8:	2317      	movs	r3, #23
    47da:	18fb      	adds	r3, r7, r3
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	b25b      	sxtb	r3, r3
    47e0:	2b01      	cmp	r3, #1
    47e2:	d104      	bne.n	47ee <nm_spi_write_block+0x3a>
    47e4:	2317      	movs	r3, #23
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	2200      	movs	r2, #0
    47ea:	701a      	strb	r2, [r3, #0]
    47ec:	e003      	b.n	47f6 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    47ee:	2317      	movs	r3, #23
    47f0:	18fb      	adds	r3, r7, r3
    47f2:	22fa      	movs	r2, #250	; 0xfa
    47f4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    47f6:	2317      	movs	r3, #23
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	b25b      	sxtb	r3, r3
}
    47fe:	0018      	movs	r0, r3
    4800:	46bd      	mov	sp, r7
    4802:	b007      	add	sp, #28
    4804:	bd90      	pop	{r4, r7, pc}
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	00003ed1 	.word	0x00003ed1

0000480c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    480c:	b590      	push	{r4, r7, lr}
    480e:	b089      	sub	sp, #36	; 0x24
    4810:	af00      	add	r7, sp, #0
    4812:	60b9      	str	r1, [r7, #8]
    4814:	0011      	movs	r1, r2
    4816:	607b      	str	r3, [r7, #4]
    4818:	230f      	movs	r3, #15
    481a:	18fb      	adds	r3, r7, r3
    481c:	1c02      	adds	r2, r0, #0
    481e:	701a      	strb	r2, [r3, #0]
    4820:	230e      	movs	r3, #14
    4822:	18fb      	adds	r3, r7, r3
    4824:	1c0a      	adds	r2, r1, #0
    4826:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    4828:	2330      	movs	r3, #48	; 0x30
    482a:	18fb      	adds	r3, r7, r3
    482c:	881b      	ldrh	r3, [r3, #0]
    482e:	2b00      	cmp	r3, #0
    4830:	d100      	bne.n	4834 <Socket_ReadSocketData+0x28>
    4832:	e0d6      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
    4834:	230f      	movs	r3, #15
    4836:	18fb      	adds	r3, r7, r3
    4838:	2200      	movs	r2, #0
    483a:	569a      	ldrsb	r2, [r3, r2]
    483c:	4b6b      	ldr	r3, [pc, #428]	; (49ec <Socket_ReadSocketData+0x1e0>)
    483e:	0112      	lsls	r2, r2, #4
    4840:	58d3      	ldr	r3, [r2, r3]
    4842:	2b00      	cmp	r3, #0
    4844:	d100      	bne.n	4848 <Socket_ReadSocketData+0x3c>
    4846:	e0cc      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
    4848:	230f      	movs	r3, #15
    484a:	18fb      	adds	r3, r7, r3
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	b25b      	sxtb	r3, r3
    4850:	4a66      	ldr	r2, [pc, #408]	; (49ec <Socket_ReadSocketData+0x1e0>)
    4852:	011b      	lsls	r3, r3, #4
    4854:	18d3      	adds	r3, r2, r3
    4856:	3304      	adds	r3, #4
    4858:	881b      	ldrh	r3, [r3, #0]
    485a:	b29b      	uxth	r3, r3
    485c:	2b00      	cmp	r3, #0
    485e:	d100      	bne.n	4862 <Socket_ReadSocketData+0x56>
    4860:	e0bf      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
    4862:	230f      	movs	r3, #15
    4864:	18fb      	adds	r3, r7, r3
    4866:	781b      	ldrb	r3, [r3, #0]
    4868:	b25b      	sxtb	r3, r3
    486a:	4a60      	ldr	r2, [pc, #384]	; (49ec <Socket_ReadSocketData+0x1e0>)
    486c:	011b      	lsls	r3, r3, #4
    486e:	18d3      	adds	r3, r2, r3
    4870:	330a      	adds	r3, #10
    4872:	781b      	ldrb	r3, [r3, #0]
    4874:	b2db      	uxtb	r3, r3
    4876:	2b01      	cmp	r3, #1
    4878:	d000      	beq.n	487c <Socket_ReadSocketData+0x70>
    487a:	e0b2      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    4880:	68bb      	ldr	r3, [r7, #8]
    4882:	2230      	movs	r2, #48	; 0x30
    4884:	18ba      	adds	r2, r7, r2
    4886:	8812      	ldrh	r2, [r2, #0]
    4888:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    488a:	2319      	movs	r3, #25
    488c:	18fb      	adds	r3, r7, r3
    488e:	2201      	movs	r2, #1
    4890:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    4892:	231a      	movs	r3, #26
    4894:	18fb      	adds	r3, r7, r3
    4896:	2230      	movs	r2, #48	; 0x30
    4898:	18ba      	adds	r2, r7, r2
    489a:	8812      	ldrh	r2, [r2, #0]
    489c:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    489e:	230f      	movs	r3, #15
    48a0:	18fb      	adds	r3, r7, r3
    48a2:	781b      	ldrb	r3, [r3, #0]
    48a4:	b25b      	sxtb	r3, r3
    48a6:	4a51      	ldr	r2, [pc, #324]	; (49ec <Socket_ReadSocketData+0x1e0>)
    48a8:	011b      	lsls	r3, r3, #4
    48aa:	18d3      	adds	r3, r2, r3
    48ac:	3304      	adds	r3, #4
    48ae:	881b      	ldrh	r3, [r3, #0]
    48b0:	b29b      	uxth	r3, r3
    48b2:	221a      	movs	r2, #26
    48b4:	18ba      	adds	r2, r7, r2
    48b6:	8812      	ldrh	r2, [r2, #0]
    48b8:	1ad3      	subs	r3, r2, r3
    48ba:	b29a      	uxth	r2, r3
    48bc:	2316      	movs	r3, #22
    48be:	18fb      	adds	r3, r7, r3
    48c0:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    48c2:	2316      	movs	r3, #22
    48c4:	18fb      	adds	r3, r7, r3
    48c6:	2200      	movs	r2, #0
    48c8:	5e9b      	ldrsh	r3, [r3, r2]
    48ca:	2b00      	cmp	r3, #0
    48cc:	dd0f      	ble.n	48ee <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    48ce:	2319      	movs	r3, #25
    48d0:	18fb      	adds	r3, r7, r3
    48d2:	2200      	movs	r2, #0
    48d4:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    48d6:	230f      	movs	r3, #15
    48d8:	18fb      	adds	r3, r7, r3
    48da:	2200      	movs	r2, #0
    48dc:	569a      	ldrsb	r2, [r3, r2]
    48de:	231a      	movs	r3, #26
    48e0:	18fb      	adds	r3, r7, r3
    48e2:	4942      	ldr	r1, [pc, #264]	; (49ec <Socket_ReadSocketData+0x1e0>)
    48e4:	0112      	lsls	r2, r2, #4
    48e6:	188a      	adds	r2, r1, r2
    48e8:	3204      	adds	r2, #4
    48ea:	8812      	ldrh	r2, [r2, #0]
    48ec:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    48ee:	230f      	movs	r3, #15
    48f0:	18fb      	adds	r3, r7, r3
    48f2:	2200      	movs	r2, #0
    48f4:	569a      	ldrsb	r2, [r3, r2]
    48f6:	4b3d      	ldr	r3, [pc, #244]	; (49ec <Socket_ReadSocketData+0x1e0>)
    48f8:	0112      	lsls	r2, r2, #4
    48fa:	58d1      	ldr	r1, [r2, r3]
    48fc:	2319      	movs	r3, #25
    48fe:	18fb      	adds	r3, r7, r3
    4900:	781c      	ldrb	r4, [r3, #0]
    4902:	231a      	movs	r3, #26
    4904:	18fb      	adds	r3, r7, r3
    4906:	881a      	ldrh	r2, [r3, #0]
    4908:	69f8      	ldr	r0, [r7, #28]
    490a:	0023      	movs	r3, r4
    490c:	4c38      	ldr	r4, [pc, #224]	; (49f0 <Socket_ReadSocketData+0x1e4>)
    490e:	47a0      	blx	r4
    4910:	1e03      	subs	r3, r0, #0
    4912:	d14f      	bne.n	49b4 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    4914:	230f      	movs	r3, #15
    4916:	18fb      	adds	r3, r7, r3
    4918:	2200      	movs	r2, #0
    491a:	569a      	ldrsb	r2, [r3, r2]
    491c:	4b33      	ldr	r3, [pc, #204]	; (49ec <Socket_ReadSocketData+0x1e0>)
    491e:	0112      	lsls	r2, r2, #4
    4920:	58d2      	ldr	r2, [r2, r3]
    4922:	68bb      	ldr	r3, [r7, #8]
    4924:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    4926:	231a      	movs	r3, #26
    4928:	18fb      	adds	r3, r7, r3
    492a:	2200      	movs	r2, #0
    492c:	5e9a      	ldrsh	r2, [r3, r2]
    492e:	68bb      	ldr	r3, [r7, #8]
    4930:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    4932:	68bb      	ldr	r3, [r7, #8]
    4934:	88da      	ldrh	r2, [r3, #6]
    4936:	231a      	movs	r3, #26
    4938:	18fb      	adds	r3, r7, r3
    493a:	881b      	ldrh	r3, [r3, #0]
    493c:	1ad3      	subs	r3, r2, r3
    493e:	b29a      	uxth	r2, r3
    4940:	68bb      	ldr	r3, [r7, #8]
    4942:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    4944:	4b2b      	ldr	r3, [pc, #172]	; (49f4 <Socket_ReadSocketData+0x1e8>)
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	2b00      	cmp	r3, #0
    494a:	d00b      	beq.n	4964 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    494c:	4b29      	ldr	r3, [pc, #164]	; (49f4 <Socket_ReadSocketData+0x1e8>)
    494e:	681b      	ldr	r3, [r3, #0]
    4950:	68bc      	ldr	r4, [r7, #8]
    4952:	220e      	movs	r2, #14
    4954:	18ba      	adds	r2, r7, r2
    4956:	7811      	ldrb	r1, [r2, #0]
    4958:	220f      	movs	r2, #15
    495a:	18ba      	adds	r2, r7, r2
    495c:	2000      	movs	r0, #0
    495e:	5610      	ldrsb	r0, [r2, r0]
    4960:	0022      	movs	r2, r4
    4962:	4798      	blx	r3

				u16ReadCount -= u16Read;
    4964:	2330      	movs	r3, #48	; 0x30
    4966:	18f9      	adds	r1, r7, r3
    4968:	2330      	movs	r3, #48	; 0x30
    496a:	18fa      	adds	r2, r7, r3
    496c:	231a      	movs	r3, #26
    496e:	18fb      	adds	r3, r7, r3
    4970:	8812      	ldrh	r2, [r2, #0]
    4972:	881b      	ldrh	r3, [r3, #0]
    4974:	1ad3      	subs	r3, r2, r3
    4976:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    4978:	231a      	movs	r3, #26
    497a:	18fb      	adds	r3, r7, r3
    497c:	881b      	ldrh	r3, [r3, #0]
    497e:	69fa      	ldr	r2, [r7, #28]
    4980:	18d3      	adds	r3, r2, r3
    4982:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    4984:	230f      	movs	r3, #15
    4986:	18fb      	adds	r3, r7, r3
    4988:	781b      	ldrb	r3, [r3, #0]
    498a:	b25b      	sxtb	r3, r3
    498c:	4a17      	ldr	r2, [pc, #92]	; (49ec <Socket_ReadSocketData+0x1e0>)
    498e:	011b      	lsls	r3, r3, #4
    4990:	18d3      	adds	r3, r2, r3
    4992:	330a      	adds	r3, #10
    4994:	781b      	ldrb	r3, [r3, #0]
    4996:	b2db      	uxtb	r3, r3
    4998:	2b00      	cmp	r3, #0
    499a:	d11b      	bne.n	49d4 <Socket_ReadSocketData+0x1c8>
    499c:	2330      	movs	r3, #48	; 0x30
    499e:	18fb      	adds	r3, r7, r3
    49a0:	881b      	ldrh	r3, [r3, #0]
    49a2:	2b00      	cmp	r3, #0
    49a4:	d016      	beq.n	49d4 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    49a6:	2301      	movs	r3, #1
    49a8:	2200      	movs	r2, #0
    49aa:	2100      	movs	r1, #0
    49ac:	2000      	movs	r0, #0
    49ae:	4c10      	ldr	r4, [pc, #64]	; (49f0 <Socket_ReadSocketData+0x1e4>)
    49b0:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    49b2:	e016      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    49b4:	4b10      	ldr	r3, [pc, #64]	; (49f8 <Socket_ReadSocketData+0x1ec>)
    49b6:	0018      	movs	r0, r3
    49b8:	4b10      	ldr	r3, [pc, #64]	; (49fc <Socket_ReadSocketData+0x1f0>)
    49ba:	4798      	blx	r3
    49bc:	2330      	movs	r3, #48	; 0x30
    49be:	18fb      	adds	r3, r7, r3
    49c0:	881a      	ldrh	r2, [r3, #0]
    49c2:	4b0f      	ldr	r3, [pc, #60]	; (4a00 <Socket_ReadSocketData+0x1f4>)
    49c4:	0011      	movs	r1, r2
    49c6:	0018      	movs	r0, r3
    49c8:	4b0c      	ldr	r3, [pc, #48]	; (49fc <Socket_ReadSocketData+0x1f0>)
    49ca:	4798      	blx	r3
    49cc:	200d      	movs	r0, #13
    49ce:	4b0d      	ldr	r3, [pc, #52]	; (4a04 <Socket_ReadSocketData+0x1f8>)
    49d0:	4798      	blx	r3
				break;
    49d2:	e006      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    49d4:	2330      	movs	r3, #48	; 0x30
    49d6:	18fb      	adds	r3, r7, r3
    49d8:	881b      	ldrh	r3, [r3, #0]
    49da:	2b00      	cmp	r3, #0
    49dc:	d000      	beq.n	49e0 <Socket_ReadSocketData+0x1d4>
    49de:	e754      	b.n	488a <Socket_ReadSocketData+0x7e>
	}
}
    49e0:	e7ff      	b.n	49e2 <Socket_ReadSocketData+0x1d6>
    49e2:	46c0      	nop			; (mov r8, r8)
    49e4:	46bd      	mov	sp, r7
    49e6:	b009      	add	sp, #36	; 0x24
    49e8:	bd90      	pop	{r4, r7, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	20000338 	.word	0x20000338
    49f0:	00001775 	.word	0x00001775
    49f4:	200003e8 	.word	0x200003e8
    49f8:	000148cc 	.word	0x000148cc
    49fc:	0000efc9 	.word	0x0000efc9
    4a00:	000148d8 	.word	0x000148d8
    4a04:	0000effd 	.word	0x0000effd

00004a08 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    4a08:	b590      	push	{r4, r7, lr}
    4a0a:	b0bb      	sub	sp, #236	; 0xec
    4a0c:	af02      	add	r7, sp, #8
    4a0e:	603a      	str	r2, [r7, #0]
    4a10:	1dfb      	adds	r3, r7, #7
    4a12:	1c02      	adds	r2, r0, #0
    4a14:	701a      	strb	r2, [r3, #0]
    4a16:	1d3b      	adds	r3, r7, #4
    4a18:	1c0a      	adds	r2, r1, #0
    4a1a:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    4a1c:	1dfb      	adds	r3, r7, #7
    4a1e:	781b      	ldrb	r3, [r3, #0]
    4a20:	2b41      	cmp	r3, #65	; 0x41
    4a22:	d003      	beq.n	4a2c <m2m_ip_cb+0x24>
    4a24:	1dfb      	adds	r3, r7, #7
    4a26:	781b      	ldrb	r3, [r3, #0]
    4a28:	2b54      	cmp	r3, #84	; 0x54
    4a2a:	d120      	bne.n	4a6e <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    4a2c:	23cc      	movs	r3, #204	; 0xcc
    4a2e:	18f9      	adds	r1, r7, r3
    4a30:	6838      	ldr	r0, [r7, #0]
    4a32:	2300      	movs	r3, #0
    4a34:	2204      	movs	r2, #4
    4a36:	4c98      	ldr	r4, [pc, #608]	; (4c98 <m2m_ip_cb+0x290>)
    4a38:	47a0      	blx	r4
    4a3a:	1e03      	subs	r3, r0, #0
    4a3c:	d000      	beq.n	4a40 <m2m_ip_cb+0x38>
    4a3e:	e275      	b.n	4f2c <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    4a40:	23cc      	movs	r3, #204	; 0xcc
    4a42:	18fb      	adds	r3, r7, r3
    4a44:	2201      	movs	r2, #1
    4a46:	569a      	ldrsb	r2, [r3, r2]
    4a48:	23c8      	movs	r3, #200	; 0xc8
    4a4a:	18fb      	adds	r3, r7, r3
    4a4c:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4a4e:	4b93      	ldr	r3, [pc, #588]	; (4c9c <m2m_ip_cb+0x294>)
    4a50:	681b      	ldr	r3, [r3, #0]
    4a52:	2b00      	cmp	r3, #0
    4a54:	d100      	bne.n	4a58 <m2m_ip_cb+0x50>
    4a56:	e269      	b.n	4f2c <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    4a58:	4b90      	ldr	r3, [pc, #576]	; (4c9c <m2m_ip_cb+0x294>)
    4a5a:	681b      	ldr	r3, [r3, #0]
    4a5c:	22cc      	movs	r2, #204	; 0xcc
    4a5e:	18ba      	adds	r2, r7, r2
    4a60:	2000      	movs	r0, #0
    4a62:	5610      	ldrsb	r0, [r2, r0]
    4a64:	22c8      	movs	r2, #200	; 0xc8
    4a66:	18ba      	adds	r2, r7, r2
    4a68:	2101      	movs	r1, #1
    4a6a:	4798      	blx	r3
	{
    4a6c:	e25e      	b.n	4f2c <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    4a6e:	1dfb      	adds	r3, r7, #7
    4a70:	781b      	ldrb	r3, [r3, #0]
    4a72:	2b42      	cmp	r3, #66	; 0x42
    4a74:	d120      	bne.n	4ab8 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4a76:	23c4      	movs	r3, #196	; 0xc4
    4a78:	18f9      	adds	r1, r7, r3
    4a7a:	6838      	ldr	r0, [r7, #0]
    4a7c:	2300      	movs	r3, #0
    4a7e:	2204      	movs	r2, #4
    4a80:	4c85      	ldr	r4, [pc, #532]	; (4c98 <m2m_ip_cb+0x290>)
    4a82:	47a0      	blx	r4
    4a84:	1e03      	subs	r3, r0, #0
    4a86:	d000      	beq.n	4a8a <m2m_ip_cb+0x82>
    4a88:	e257      	b.n	4f3a <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    4a8a:	23c4      	movs	r3, #196	; 0xc4
    4a8c:	18fb      	adds	r3, r7, r3
    4a8e:	2201      	movs	r2, #1
    4a90:	569a      	ldrsb	r2, [r3, r2]
    4a92:	23c0      	movs	r3, #192	; 0xc0
    4a94:	18fb      	adds	r3, r7, r3
    4a96:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4a98:	4b80      	ldr	r3, [pc, #512]	; (4c9c <m2m_ip_cb+0x294>)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	2b00      	cmp	r3, #0
    4a9e:	d100      	bne.n	4aa2 <m2m_ip_cb+0x9a>
    4aa0:	e24b      	b.n	4f3a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4aa2:	4b7e      	ldr	r3, [pc, #504]	; (4c9c <m2m_ip_cb+0x294>)
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	22c4      	movs	r2, #196	; 0xc4
    4aa8:	18ba      	adds	r2, r7, r2
    4aaa:	2000      	movs	r0, #0
    4aac:	5610      	ldrsb	r0, [r2, r0]
    4aae:	22c0      	movs	r2, #192	; 0xc0
    4ab0:	18ba      	adds	r2, r7, r2
    4ab2:	2102      	movs	r1, #2
    4ab4:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4ab6:	e240      	b.n	4f3a <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4ab8:	1dfb      	adds	r3, r7, #7
    4aba:	781b      	ldrb	r3, [r3, #0]
    4abc:	2b43      	cmp	r3, #67	; 0x43
    4abe:	d000      	beq.n	4ac2 <m2m_ip_cb+0xba>
    4ac0:	e086      	b.n	4bd0 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4ac2:	23b4      	movs	r3, #180	; 0xb4
    4ac4:	18f9      	adds	r1, r7, r3
    4ac6:	6838      	ldr	r0, [r7, #0]
    4ac8:	2300      	movs	r3, #0
    4aca:	220c      	movs	r2, #12
    4acc:	4c72      	ldr	r4, [pc, #456]	; (4c98 <m2m_ip_cb+0x290>)
    4ace:	47a0      	blx	r4
    4ad0:	1e03      	subs	r3, r0, #0
    4ad2:	d000      	beq.n	4ad6 <m2m_ip_cb+0xce>
    4ad4:	e231      	b.n	4f3a <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    4ad6:	23b4      	movs	r3, #180	; 0xb4
    4ad8:	18fb      	adds	r3, r7, r3
    4ada:	7a5b      	ldrb	r3, [r3, #9]
    4adc:	b25b      	sxtb	r3, r3
    4ade:	2b00      	cmp	r3, #0
    4ae0:	db4f      	blt.n	4b82 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    4ae2:	23b4      	movs	r3, #180	; 0xb4
    4ae4:	18fb      	adds	r3, r7, r3
    4ae6:	7a5b      	ldrb	r3, [r3, #9]
    4ae8:	b25b      	sxtb	r3, r3
    4aea:	0018      	movs	r0, r3
    4aec:	23b4      	movs	r3, #180	; 0xb4
    4aee:	18fb      	adds	r3, r7, r3
    4af0:	7a1b      	ldrb	r3, [r3, #8]
    4af2:	b25b      	sxtb	r3, r3
    4af4:	4a6a      	ldr	r2, [pc, #424]	; (4ca0 <m2m_ip_cb+0x298>)
    4af6:	011b      	lsls	r3, r3, #4
    4af8:	18d3      	adds	r3, r2, r3
    4afa:	330b      	adds	r3, #11
    4afc:	781b      	ldrb	r3, [r3, #0]
    4afe:	b2d9      	uxtb	r1, r3
    4b00:	4a67      	ldr	r2, [pc, #412]	; (4ca0 <m2m_ip_cb+0x298>)
    4b02:	0103      	lsls	r3, r0, #4
    4b04:	18d3      	adds	r3, r2, r3
    4b06:	330b      	adds	r3, #11
    4b08:	1c0a      	adds	r2, r1, #0
    4b0a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    4b0c:	23b4      	movs	r3, #180	; 0xb4
    4b0e:	18fb      	adds	r3, r7, r3
    4b10:	7a5b      	ldrb	r3, [r3, #9]
    4b12:	b25b      	sxtb	r3, r3
    4b14:	4a62      	ldr	r2, [pc, #392]	; (4ca0 <m2m_ip_cb+0x298>)
    4b16:	011b      	lsls	r3, r3, #4
    4b18:	18d3      	adds	r3, r2, r3
    4b1a:	330a      	adds	r3, #10
    4b1c:	2201      	movs	r2, #1
    4b1e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4b20:	23b4      	movs	r3, #180	; 0xb4
    4b22:	18fb      	adds	r3, r7, r3
    4b24:	7a5b      	ldrb	r3, [r3, #9]
    4b26:	b25b      	sxtb	r3, r3
    4b28:	0018      	movs	r0, r3
    4b2a:	23b4      	movs	r3, #180	; 0xb4
    4b2c:	18fb      	adds	r3, r7, r3
    4b2e:	895b      	ldrh	r3, [r3, #10]
    4b30:	3b08      	subs	r3, #8
    4b32:	b299      	uxth	r1, r3
    4b34:	4a5a      	ldr	r2, [pc, #360]	; (4ca0 <m2m_ip_cb+0x298>)
    4b36:	0103      	lsls	r3, r0, #4
    4b38:	18d3      	adds	r3, r2, r3
    4b3a:	3308      	adds	r3, #8
    4b3c:	1c0a      	adds	r2, r1, #0
    4b3e:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    4b40:	4b58      	ldr	r3, [pc, #352]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b42:	881b      	ldrh	r3, [r3, #0]
    4b44:	b29b      	uxth	r3, r3
    4b46:	3301      	adds	r3, #1
    4b48:	b29a      	uxth	r2, r3
    4b4a:	4b56      	ldr	r3, [pc, #344]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b4c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    4b4e:	4b55      	ldr	r3, [pc, #340]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b50:	881b      	ldrh	r3, [r3, #0]
    4b52:	b29b      	uxth	r3, r3
    4b54:	2b00      	cmp	r3, #0
    4b56:	d106      	bne.n	4b66 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    4b58:	4b52      	ldr	r3, [pc, #328]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b5a:	881b      	ldrh	r3, [r3, #0]
    4b5c:	b29b      	uxth	r3, r3
    4b5e:	3301      	adds	r3, #1
    4b60:	b29a      	uxth	r2, r3
    4b62:	4b50      	ldr	r3, [pc, #320]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b64:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    4b66:	23b4      	movs	r3, #180	; 0xb4
    4b68:	18fb      	adds	r3, r7, r3
    4b6a:	7a5b      	ldrb	r3, [r3, #9]
    4b6c:	b25b      	sxtb	r3, r3
    4b6e:	0018      	movs	r0, r3
    4b70:	4b4c      	ldr	r3, [pc, #304]	; (4ca4 <m2m_ip_cb+0x29c>)
    4b72:	881b      	ldrh	r3, [r3, #0]
    4b74:	b299      	uxth	r1, r3
    4b76:	4a4a      	ldr	r2, [pc, #296]	; (4ca0 <m2m_ip_cb+0x298>)
    4b78:	0103      	lsls	r3, r0, #4
    4b7a:	18d3      	adds	r3, r2, r3
    4b7c:	3306      	adds	r3, #6
    4b7e:	1c0a      	adds	r2, r1, #0
    4b80:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    4b82:	23b4      	movs	r3, #180	; 0xb4
    4b84:	18fb      	adds	r3, r7, r3
    4b86:	2209      	movs	r2, #9
    4b88:	569a      	ldrsb	r2, [r3, r2]
    4b8a:	23a0      	movs	r3, #160	; 0xa0
    4b8c:	18fb      	adds	r3, r7, r3
    4b8e:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    4b90:	23a0      	movs	r3, #160	; 0xa0
    4b92:	18fb      	adds	r3, r7, r3
    4b94:	2202      	movs	r2, #2
    4b96:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    4b98:	23b4      	movs	r3, #180	; 0xb4
    4b9a:	18fb      	adds	r3, r7, r3
    4b9c:	885a      	ldrh	r2, [r3, #2]
    4b9e:	23a0      	movs	r3, #160	; 0xa0
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    4ba4:	23b4      	movs	r3, #180	; 0xb4
    4ba6:	18fb      	adds	r3, r7, r3
    4ba8:	685a      	ldr	r2, [r3, #4]
    4baa:	23a0      	movs	r3, #160	; 0xa0
    4bac:	18fb      	adds	r3, r7, r3
    4bae:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    4bb0:	4b3a      	ldr	r3, [pc, #232]	; (4c9c <m2m_ip_cb+0x294>)
    4bb2:	681b      	ldr	r3, [r3, #0]
    4bb4:	2b00      	cmp	r3, #0
    4bb6:	d100      	bne.n	4bba <m2m_ip_cb+0x1b2>
    4bb8:	e1bf      	b.n	4f3a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4bba:	4b38      	ldr	r3, [pc, #224]	; (4c9c <m2m_ip_cb+0x294>)
    4bbc:	681b      	ldr	r3, [r3, #0]
    4bbe:	22b4      	movs	r2, #180	; 0xb4
    4bc0:	18ba      	adds	r2, r7, r2
    4bc2:	2008      	movs	r0, #8
    4bc4:	5610      	ldrsb	r0, [r2, r0]
    4bc6:	22a0      	movs	r2, #160	; 0xa0
    4bc8:	18ba      	adds	r2, r7, r2
    4bca:	2104      	movs	r1, #4
    4bcc:	4798      	blx	r3
}
    4bce:	e1b4      	b.n	4f3a <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    4bd0:	1dfb      	adds	r3, r7, #7
    4bd2:	781b      	ldrb	r3, [r3, #0]
    4bd4:	2b44      	cmp	r3, #68	; 0x44
    4bd6:	d003      	beq.n	4be0 <m2m_ip_cb+0x1d8>
    4bd8:	1dfb      	adds	r3, r7, #7
    4bda:	781b      	ldrb	r3, [r3, #0]
    4bdc:	2b4b      	cmp	r3, #75	; 0x4b
    4bde:	d13d      	bne.n	4c5c <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    4be0:	239c      	movs	r3, #156	; 0x9c
    4be2:	18f9      	adds	r1, r7, r3
    4be4:	6838      	ldr	r0, [r7, #0]
    4be6:	2300      	movs	r3, #0
    4be8:	2204      	movs	r2, #4
    4bea:	4c2b      	ldr	r4, [pc, #172]	; (4c98 <m2m_ip_cb+0x290>)
    4bec:	47a0      	blx	r4
    4bee:	1e03      	subs	r3, r0, #0
    4bf0:	d000      	beq.n	4bf4 <m2m_ip_cb+0x1ec>
    4bf2:	e19d      	b.n	4f30 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    4bf4:	239c      	movs	r3, #156	; 0x9c
    4bf6:	18fb      	adds	r3, r7, r3
    4bf8:	2200      	movs	r2, #0
    4bfa:	569a      	ldrsb	r2, [r3, r2]
    4bfc:	2398      	movs	r3, #152	; 0x98
    4bfe:	18fb      	adds	r3, r7, r3
    4c00:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    4c02:	239c      	movs	r3, #156	; 0x9c
    4c04:	18fb      	adds	r3, r7, r3
    4c06:	2201      	movs	r2, #1
    4c08:	569a      	ldrsb	r2, [r3, r2]
    4c0a:	2398      	movs	r3, #152	; 0x98
    4c0c:	18fb      	adds	r3, r7, r3
    4c0e:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4c10:	239c      	movs	r3, #156	; 0x9c
    4c12:	18fb      	adds	r3, r7, r3
    4c14:	785b      	ldrb	r3, [r3, #1]
    4c16:	b25b      	sxtb	r3, r3
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d10f      	bne.n	4c3c <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4c1c:	239c      	movs	r3, #156	; 0x9c
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	b25b      	sxtb	r3, r3
    4c24:	0018      	movs	r0, r3
    4c26:	239c      	movs	r3, #156	; 0x9c
    4c28:	18fb      	adds	r3, r7, r3
    4c2a:	885b      	ldrh	r3, [r3, #2]
    4c2c:	3b08      	subs	r3, #8
    4c2e:	b299      	uxth	r1, r3
    4c30:	4a1b      	ldr	r2, [pc, #108]	; (4ca0 <m2m_ip_cb+0x298>)
    4c32:	0103      	lsls	r3, r0, #4
    4c34:	18d3      	adds	r3, r2, r3
    4c36:	3308      	adds	r3, #8
    4c38:	1c0a      	adds	r2, r1, #0
    4c3a:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    4c3c:	4b17      	ldr	r3, [pc, #92]	; (4c9c <m2m_ip_cb+0x294>)
    4c3e:	681b      	ldr	r3, [r3, #0]
    4c40:	2b00      	cmp	r3, #0
    4c42:	d100      	bne.n	4c46 <m2m_ip_cb+0x23e>
    4c44:	e174      	b.n	4f30 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    4c46:	4b15      	ldr	r3, [pc, #84]	; (4c9c <m2m_ip_cb+0x294>)
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	229c      	movs	r2, #156	; 0x9c
    4c4c:	18ba      	adds	r2, r7, r2
    4c4e:	2000      	movs	r0, #0
    4c50:	5610      	ldrsb	r0, [r2, r0]
    4c52:	2298      	movs	r2, #152	; 0x98
    4c54:	18ba      	adds	r2, r7, r2
    4c56:	2105      	movs	r1, #5
    4c58:	4798      	blx	r3
	{
    4c5a:	e169      	b.n	4f30 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    4c5c:	1dfb      	adds	r3, r7, #7
    4c5e:	781b      	ldrb	r3, [r3, #0]
    4c60:	2b4a      	cmp	r3, #74	; 0x4a
    4c62:	d123      	bne.n	4cac <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    4c64:	230c      	movs	r3, #12
    4c66:	18f9      	adds	r1, r7, r3
    4c68:	6838      	ldr	r0, [r7, #0]
    4c6a:	2300      	movs	r3, #0
    4c6c:	2244      	movs	r2, #68	; 0x44
    4c6e:	4c0a      	ldr	r4, [pc, #40]	; (4c98 <m2m_ip_cb+0x290>)
    4c70:	47a0      	blx	r4
    4c72:	1e03      	subs	r3, r0, #0
    4c74:	d000      	beq.n	4c78 <m2m_ip_cb+0x270>
    4c76:	e160      	b.n	4f3a <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    4c78:	4b0b      	ldr	r3, [pc, #44]	; (4ca8 <m2m_ip_cb+0x2a0>)
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d100      	bne.n	4c82 <m2m_ip_cb+0x27a>
    4c80:	e15b      	b.n	4f3a <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    4c82:	4b09      	ldr	r3, [pc, #36]	; (4ca8 <m2m_ip_cb+0x2a0>)
    4c84:	681a      	ldr	r2, [r3, #0]
    4c86:	230c      	movs	r3, #12
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4c8c:	230c      	movs	r3, #12
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	0018      	movs	r0, r3
    4c92:	4790      	blx	r2
}
    4c94:	e151      	b.n	4f3a <m2m_ip_cb+0x532>
    4c96:	46c0      	nop			; (mov r8, r8)
    4c98:	00001775 	.word	0x00001775
    4c9c:	200003e8 	.word	0x200003e8
    4ca0:	20000338 	.word	0x20000338
    4ca4:	2000023e 	.word	0x2000023e
    4ca8:	200003f0 	.word	0x200003f0
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    4cac:	1dfb      	adds	r3, r7, #7
    4cae:	781b      	ldrb	r3, [r3, #0]
    4cb0:	2b46      	cmp	r3, #70	; 0x46
    4cb2:	d008      	beq.n	4cc6 <m2m_ip_cb+0x2be>
    4cb4:	1dfb      	adds	r3, r7, #7
    4cb6:	781b      	ldrb	r3, [r3, #0]
    4cb8:	2b48      	cmp	r3, #72	; 0x48
    4cba:	d004      	beq.n	4cc6 <m2m_ip_cb+0x2be>
    4cbc:	1dfb      	adds	r3, r7, #7
    4cbe:	781b      	ldrb	r3, [r3, #0]
    4cc0:	2b4d      	cmp	r3, #77	; 0x4d
    4cc2:	d000      	beq.n	4cc6 <m2m_ip_cb+0x2be>
    4cc4:	e0b4      	b.n	4e30 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    4cc6:	23df      	movs	r3, #223	; 0xdf
    4cc8:	18fb      	adds	r3, r7, r3
    4cca:	2206      	movs	r2, #6
    4ccc:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    4cce:	1dfb      	adds	r3, r7, #7
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	2b48      	cmp	r3, #72	; 0x48
    4cd4:	d103      	bne.n	4cde <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    4cd6:	23df      	movs	r3, #223	; 0xdf
    4cd8:	18fb      	adds	r3, r7, r3
    4cda:	2209      	movs	r2, #9
    4cdc:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    4cde:	23d8      	movs	r3, #216	; 0xd8
    4ce0:	18fb      	adds	r3, r7, r3
    4ce2:	2210      	movs	r2, #16
    4ce4:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    4ce6:	23d8      	movs	r3, #216	; 0xd8
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	881a      	ldrh	r2, [r3, #0]
    4cec:	2388      	movs	r3, #136	; 0x88
    4cee:	18f9      	adds	r1, r7, r3
    4cf0:	6838      	ldr	r0, [r7, #0]
    4cf2:	2300      	movs	r3, #0
    4cf4:	4c93      	ldr	r4, [pc, #588]	; (4f44 <m2m_ip_cb+0x53c>)
    4cf6:	47a0      	blx	r4
    4cf8:	1e03      	subs	r3, r0, #0
    4cfa:	d000      	beq.n	4cfe <m2m_ip_cb+0x2f6>
    4cfc:	e11a      	b.n	4f34 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    4cfe:	23d6      	movs	r3, #214	; 0xd6
    4d00:	18fb      	adds	r3, r7, r3
    4d02:	2200      	movs	r2, #0
    4d04:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    4d06:	23d5      	movs	r3, #213	; 0xd5
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	2288      	movs	r2, #136	; 0x88
    4d0c:	18ba      	adds	r2, r7, r2
    4d0e:	7b12      	ldrb	r2, [r2, #12]
    4d10:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    4d12:	23d6      	movs	r3, #214	; 0xd6
    4d14:	18fb      	adds	r3, r7, r3
    4d16:	2288      	movs	r2, #136	; 0x88
    4d18:	18ba      	adds	r2, r7, r2
    4d1a:	89d2      	ldrh	r2, [r2, #14]
    4d1c:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    4d1e:	23d5      	movs	r3, #213	; 0xd5
    4d20:	18fb      	adds	r3, r7, r3
    4d22:	781b      	ldrb	r3, [r3, #0]
    4d24:	b25b      	sxtb	r3, r3
    4d26:	4a88      	ldr	r2, [pc, #544]	; (4f48 <m2m_ip_cb+0x540>)
    4d28:	011b      	lsls	r3, r3, #4
    4d2a:	18d3      	adds	r3, r2, r3
    4d2c:	330c      	adds	r3, #12
    4d2e:	2200      	movs	r2, #0
    4d30:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    4d32:	23d2      	movs	r3, #210	; 0xd2
    4d34:	18fb      	adds	r3, r7, r3
    4d36:	2288      	movs	r2, #136	; 0x88
    4d38:	18ba      	adds	r2, r7, r2
    4d3a:	8912      	ldrh	r2, [r2, #8]
    4d3c:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    4d3e:	23d0      	movs	r3, #208	; 0xd0
    4d40:	18fb      	adds	r3, r7, r3
    4d42:	2288      	movs	r2, #136	; 0x88
    4d44:	18ba      	adds	r2, r7, r2
    4d46:	8952      	ldrh	r2, [r2, #10]
    4d48:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    4d4a:	2388      	movs	r3, #136	; 0x88
    4d4c:	18fb      	adds	r3, r7, r3
    4d4e:	885a      	ldrh	r2, [r3, #2]
    4d50:	2370      	movs	r3, #112	; 0x70
    4d52:	18fb      	adds	r3, r7, r3
    4d54:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    4d56:	2388      	movs	r3, #136	; 0x88
    4d58:	18fb      	adds	r3, r7, r3
    4d5a:	685a      	ldr	r2, [r3, #4]
    4d5c:	2370      	movs	r3, #112	; 0x70
    4d5e:	18fb      	adds	r3, r7, r3
    4d60:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4d62:	23d5      	movs	r3, #213	; 0xd5
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	781b      	ldrb	r3, [r3, #0]
    4d68:	b25b      	sxtb	r3, r3
    4d6a:	4a77      	ldr	r2, [pc, #476]	; (4f48 <m2m_ip_cb+0x540>)
    4d6c:	011b      	lsls	r3, r3, #4
    4d6e:	18d3      	adds	r3, r2, r3
    4d70:	3306      	adds	r3, #6
    4d72:	881b      	ldrh	r3, [r3, #0]
    4d74:	b29b      	uxth	r3, r3
    4d76:	22d6      	movs	r2, #214	; 0xd6
    4d78:	18ba      	adds	r2, r7, r2
    4d7a:	8812      	ldrh	r2, [r2, #0]
    4d7c:	429a      	cmp	r2, r3
    4d7e:	d148      	bne.n	4e12 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    4d80:	23d2      	movs	r3, #210	; 0xd2
    4d82:	18fb      	adds	r3, r7, r3
    4d84:	2200      	movs	r2, #0
    4d86:	5e9b      	ldrsh	r3, [r3, r2]
    4d88:	2b00      	cmp	r3, #0
    4d8a:	dd25      	ble.n	4dd8 <m2m_ip_cb+0x3d0>
    4d8c:	23d2      	movs	r3, #210	; 0xd2
    4d8e:	18fb      	adds	r3, r7, r3
    4d90:	2200      	movs	r2, #0
    4d92:	5e9a      	ldrsh	r2, [r3, r2]
    4d94:	1d3b      	adds	r3, r7, #4
    4d96:	881b      	ldrh	r3, [r3, #0]
    4d98:	429a      	cmp	r2, r3
    4d9a:	da1d      	bge.n	4dd8 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    4d9c:	23d0      	movs	r3, #208	; 0xd0
    4d9e:	18fb      	adds	r3, r7, r3
    4da0:	881b      	ldrh	r3, [r3, #0]
    4da2:	683a      	ldr	r2, [r7, #0]
    4da4:	18d3      	adds	r3, r2, r3
    4da6:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    4da8:	23d8      	movs	r3, #216	; 0xd8
    4daa:	18fb      	adds	r3, r7, r3
    4dac:	22d2      	movs	r2, #210	; 0xd2
    4dae:	18ba      	adds	r2, r7, r2
    4db0:	8812      	ldrh	r2, [r2, #0]
    4db2:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    4db4:	683c      	ldr	r4, [r7, #0]
    4db6:	23df      	movs	r3, #223	; 0xdf
    4db8:	18fb      	adds	r3, r7, r3
    4dba:	781a      	ldrb	r2, [r3, #0]
    4dbc:	2370      	movs	r3, #112	; 0x70
    4dbe:	18f9      	adds	r1, r7, r3
    4dc0:	23d5      	movs	r3, #213	; 0xd5
    4dc2:	18fb      	adds	r3, r7, r3
    4dc4:	2000      	movs	r0, #0
    4dc6:	5618      	ldrsb	r0, [r3, r0]
    4dc8:	23d8      	movs	r3, #216	; 0xd8
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	881b      	ldrh	r3, [r3, #0]
    4dce:	9300      	str	r3, [sp, #0]
    4dd0:	0023      	movs	r3, r4
    4dd2:	4c5e      	ldr	r4, [pc, #376]	; (4f4c <m2m_ip_cb+0x544>)
    4dd4:	47a0      	blx	r4
	{
    4dd6:	e0ad      	b.n	4f34 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    4dd8:	2370      	movs	r3, #112	; 0x70
    4dda:	18fb      	adds	r3, r7, r3
    4ddc:	22d2      	movs	r2, #210	; 0xd2
    4dde:	18ba      	adds	r2, r7, r2
    4de0:	8812      	ldrh	r2, [r2, #0]
    4de2:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    4de4:	2370      	movs	r3, #112	; 0x70
    4de6:	18fb      	adds	r3, r7, r3
    4de8:	2200      	movs	r2, #0
    4dea:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    4dec:	4b58      	ldr	r3, [pc, #352]	; (4f50 <m2m_ip_cb+0x548>)
    4dee:	681b      	ldr	r3, [r3, #0]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d100      	bne.n	4df6 <m2m_ip_cb+0x3ee>
    4df4:	e09e      	b.n	4f34 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    4df6:	4b56      	ldr	r3, [pc, #344]	; (4f50 <m2m_ip_cb+0x548>)
    4df8:	681b      	ldr	r3, [r3, #0]
    4dfa:	2270      	movs	r2, #112	; 0x70
    4dfc:	18bc      	adds	r4, r7, r2
    4dfe:	22df      	movs	r2, #223	; 0xdf
    4e00:	18ba      	adds	r2, r7, r2
    4e02:	7811      	ldrb	r1, [r2, #0]
    4e04:	22d5      	movs	r2, #213	; 0xd5
    4e06:	18ba      	adds	r2, r7, r2
    4e08:	2000      	movs	r0, #0
    4e0a:	5610      	ldrsb	r0, [r2, r0]
    4e0c:	0022      	movs	r2, r4
    4e0e:	4798      	blx	r3
	{
    4e10:	e090      	b.n	4f34 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    4e12:	23d8      	movs	r3, #216	; 0xd8
    4e14:	18fa      	adds	r2, r7, r3
    4e16:	1d3b      	adds	r3, r7, #4
    4e18:	8812      	ldrh	r2, [r2, #0]
    4e1a:	881b      	ldrh	r3, [r3, #0]
    4e1c:	429a      	cmp	r2, r3
    4e1e:	d300      	bcc.n	4e22 <m2m_ip_cb+0x41a>
    4e20:	e088      	b.n	4f34 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4e22:	2301      	movs	r3, #1
    4e24:	2200      	movs	r2, #0
    4e26:	2100      	movs	r1, #0
    4e28:	2000      	movs	r0, #0
    4e2a:	4c46      	ldr	r4, [pc, #280]	; (4f44 <m2m_ip_cb+0x53c>)
    4e2c:	47a0      	blx	r4
	{
    4e2e:	e081      	b.n	4f34 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4e30:	1dfb      	adds	r3, r7, #7
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	2b45      	cmp	r3, #69	; 0x45
    4e36:	d007      	beq.n	4e48 <m2m_ip_cb+0x440>
    4e38:	1dfb      	adds	r3, r7, #7
    4e3a:	781b      	ldrb	r3, [r3, #0]
    4e3c:	2b47      	cmp	r3, #71	; 0x47
    4e3e:	d003      	beq.n	4e48 <m2m_ip_cb+0x440>
    4e40:	1dfb      	adds	r3, r7, #7
    4e42:	781b      	ldrb	r3, [r3, #0]
    4e44:	2b4c      	cmp	r3, #76	; 0x4c
    4e46:	d14c      	bne.n	4ee2 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4e48:	23de      	movs	r3, #222	; 0xde
    4e4a:	18fb      	adds	r3, r7, r3
    4e4c:	2207      	movs	r2, #7
    4e4e:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    4e50:	1dfb      	adds	r3, r7, #7
    4e52:	781b      	ldrb	r3, [r3, #0]
    4e54:	2b47      	cmp	r3, #71	; 0x47
    4e56:	d103      	bne.n	4e60 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    4e58:	23de      	movs	r3, #222	; 0xde
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	2208      	movs	r2, #8
    4e5e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    4e60:	2364      	movs	r3, #100	; 0x64
    4e62:	18f9      	adds	r1, r7, r3
    4e64:	6838      	ldr	r0, [r7, #0]
    4e66:	2300      	movs	r3, #0
    4e68:	2208      	movs	r2, #8
    4e6a:	4c36      	ldr	r4, [pc, #216]	; (4f44 <m2m_ip_cb+0x53c>)
    4e6c:	47a0      	blx	r4
    4e6e:	1e03      	subs	r3, r0, #0
    4e70:	d162      	bne.n	4f38 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    4e72:	23dc      	movs	r3, #220	; 0xdc
    4e74:	18fb      	adds	r3, r7, r3
    4e76:	2200      	movs	r2, #0
    4e78:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    4e7a:	23db      	movs	r3, #219	; 0xdb
    4e7c:	18fb      	adds	r3, r7, r3
    4e7e:	2264      	movs	r2, #100	; 0x64
    4e80:	18ba      	adds	r2, r7, r2
    4e82:	7812      	ldrb	r2, [r2, #0]
    4e84:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    4e86:	23dc      	movs	r3, #220	; 0xdc
    4e88:	18fb      	adds	r3, r7, r3
    4e8a:	2264      	movs	r2, #100	; 0x64
    4e8c:	18ba      	adds	r2, r7, r2
    4e8e:	8892      	ldrh	r2, [r2, #4]
    4e90:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    4e92:	2364      	movs	r3, #100	; 0x64
    4e94:	18fb      	adds	r3, r7, r3
    4e96:	2202      	movs	r2, #2
    4e98:	5e9a      	ldrsh	r2, [r3, r2]
    4e9a:	236e      	movs	r3, #110	; 0x6e
    4e9c:	18fb      	adds	r3, r7, r3
    4e9e:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4ea0:	23db      	movs	r3, #219	; 0xdb
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	781b      	ldrb	r3, [r3, #0]
    4ea6:	b25b      	sxtb	r3, r3
    4ea8:	4a27      	ldr	r2, [pc, #156]	; (4f48 <m2m_ip_cb+0x540>)
    4eaa:	011b      	lsls	r3, r3, #4
    4eac:	18d3      	adds	r3, r2, r3
    4eae:	3306      	adds	r3, #6
    4eb0:	881b      	ldrh	r3, [r3, #0]
    4eb2:	b29b      	uxth	r3, r3
    4eb4:	22dc      	movs	r2, #220	; 0xdc
    4eb6:	18ba      	adds	r2, r7, r2
    4eb8:	8812      	ldrh	r2, [r2, #0]
    4eba:	429a      	cmp	r2, r3
    4ebc:	d13c      	bne.n	4f38 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    4ebe:	4b24      	ldr	r3, [pc, #144]	; (4f50 <m2m_ip_cb+0x548>)
    4ec0:	681b      	ldr	r3, [r3, #0]
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d038      	beq.n	4f38 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    4ec6:	4b22      	ldr	r3, [pc, #136]	; (4f50 <m2m_ip_cb+0x548>)
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	226e      	movs	r2, #110	; 0x6e
    4ecc:	18bc      	adds	r4, r7, r2
    4ece:	22de      	movs	r2, #222	; 0xde
    4ed0:	18ba      	adds	r2, r7, r2
    4ed2:	7811      	ldrb	r1, [r2, #0]
    4ed4:	22db      	movs	r2, #219	; 0xdb
    4ed6:	18ba      	adds	r2, r7, r2
    4ed8:	2000      	movs	r0, #0
    4eda:	5610      	ldrsb	r0, [r2, r0]
    4edc:	0022      	movs	r2, r4
    4ede:	4798      	blx	r3
	{
    4ee0:	e02a      	b.n	4f38 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    4ee2:	1dfb      	adds	r3, r7, #7
    4ee4:	781b      	ldrb	r3, [r3, #0]
    4ee6:	2b52      	cmp	r3, #82	; 0x52
    4ee8:	d127      	bne.n	4f3a <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    4eea:	2350      	movs	r3, #80	; 0x50
    4eec:	18f9      	adds	r1, r7, r3
    4eee:	6838      	ldr	r0, [r7, #0]
    4ef0:	2301      	movs	r3, #1
    4ef2:	2214      	movs	r2, #20
    4ef4:	4c13      	ldr	r4, [pc, #76]	; (4f44 <m2m_ip_cb+0x53c>)
    4ef6:	47a0      	blx	r4
    4ef8:	1e03      	subs	r3, r0, #0
    4efa:	d11e      	bne.n	4f3a <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    4efc:	2350      	movs	r3, #80	; 0x50
    4efe:	18fb      	adds	r3, r7, r3
    4f00:	685b      	ldr	r3, [r3, #4]
    4f02:	001a      	movs	r2, r3
    4f04:	4b13      	ldr	r3, [pc, #76]	; (4f54 <m2m_ip_cb+0x54c>)
    4f06:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    4f08:	4b12      	ldr	r3, [pc, #72]	; (4f54 <m2m_ip_cb+0x54c>)
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d014      	beq.n	4f3a <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    4f10:	4b10      	ldr	r3, [pc, #64]	; (4f54 <m2m_ip_cb+0x54c>)
    4f12:	681c      	ldr	r4, [r3, #0]
    4f14:	2350      	movs	r3, #80	; 0x50
    4f16:	18fb      	adds	r3, r7, r3
    4f18:	6818      	ldr	r0, [r3, #0]
    4f1a:	2350      	movs	r3, #80	; 0x50
    4f1c:	18fb      	adds	r3, r7, r3
    4f1e:	6899      	ldr	r1, [r3, #8]
    4f20:	2350      	movs	r3, #80	; 0x50
    4f22:	18fb      	adds	r3, r7, r3
    4f24:	7c1b      	ldrb	r3, [r3, #16]
    4f26:	001a      	movs	r2, r3
    4f28:	47a0      	blx	r4
}
    4f2a:	e006      	b.n	4f3a <m2m_ip_cb+0x532>
	{
    4f2c:	46c0      	nop			; (mov r8, r8)
    4f2e:	e004      	b.n	4f3a <m2m_ip_cb+0x532>
	{
    4f30:	46c0      	nop			; (mov r8, r8)
    4f32:	e002      	b.n	4f3a <m2m_ip_cb+0x532>
	{
    4f34:	46c0      	nop			; (mov r8, r8)
    4f36:	e000      	b.n	4f3a <m2m_ip_cb+0x532>
	{
    4f38:	46c0      	nop			; (mov r8, r8)
}
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	46bd      	mov	sp, r7
    4f3e:	b039      	add	sp, #228	; 0xe4
    4f40:	bd90      	pop	{r4, r7, pc}
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	00001775 	.word	0x00001775
    4f48:	20000338 	.word	0x20000338
    4f4c:	0000480d 	.word	0x0000480d
    4f50:	200003e8 	.word	0x200003e8
    4f54:	200003ec 	.word	0x200003ec

00004f58 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    4f58:	b580      	push	{r7, lr}
    4f5a:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    4f5c:	4b0c      	ldr	r3, [pc, #48]	; (4f90 <socketInit+0x38>)
    4f5e:	781b      	ldrb	r3, [r3, #0]
    4f60:	b2db      	uxtb	r3, r3
    4f62:	2b00      	cmp	r3, #0
    4f64:	d110      	bne.n	4f88 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    4f66:	4b0b      	ldr	r3, [pc, #44]	; (4f94 <socketInit+0x3c>)
    4f68:	22b0      	movs	r2, #176	; 0xb0
    4f6a:	2100      	movs	r1, #0
    4f6c:	0018      	movs	r0, r3
    4f6e:	4b0a      	ldr	r3, [pc, #40]	; (4f98 <socketInit+0x40>)
    4f70:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    4f72:	4b0a      	ldr	r3, [pc, #40]	; (4f9c <socketInit+0x44>)
    4f74:	0019      	movs	r1, r3
    4f76:	2002      	movs	r0, #2
    4f78:	4b09      	ldr	r3, [pc, #36]	; (4fa0 <socketInit+0x48>)
    4f7a:	4798      	blx	r3
		gbSocketInit	= 1;
    4f7c:	4b04      	ldr	r3, [pc, #16]	; (4f90 <socketInit+0x38>)
    4f7e:	2201      	movs	r2, #1
    4f80:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    4f82:	4b08      	ldr	r3, [pc, #32]	; (4fa4 <socketInit+0x4c>)
    4f84:	2200      	movs	r2, #0
    4f86:	801a      	strh	r2, [r3, #0]
	}
}
    4f88:	46c0      	nop			; (mov r8, r8)
    4f8a:	46bd      	mov	sp, r7
    4f8c:	bd80      	pop	{r7, pc}
    4f8e:	46c0      	nop			; (mov r8, r8)
    4f90:	20000240 	.word	0x20000240
    4f94:	20000338 	.word	0x20000338
    4f98:	00000c21 	.word	0x00000c21
    4f9c:	00004a09 	.word	0x00004a09
    4fa0:	000018f5 	.word	0x000018f5
    4fa4:	2000023e 	.word	0x2000023e

00004fa8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    4fa8:	b580      	push	{r7, lr}
    4faa:	b082      	sub	sp, #8
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
    4fb0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    4fb2:	4b05      	ldr	r3, [pc, #20]	; (4fc8 <registerSocketCallback+0x20>)
    4fb4:	687a      	ldr	r2, [r7, #4]
    4fb6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    4fb8:	4b04      	ldr	r3, [pc, #16]	; (4fcc <registerSocketCallback+0x24>)
    4fba:	683a      	ldr	r2, [r7, #0]
    4fbc:	601a      	str	r2, [r3, #0]
}
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	46bd      	mov	sp, r7
    4fc2:	b002      	add	sp, #8
    4fc4:	bd80      	pop	{r7, pc}
    4fc6:	46c0      	nop			; (mov r8, r8)
    4fc8:	200003e8 	.word	0x200003e8
    4fcc:	200003f0 	.word	0x200003f0

00004fd0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    4fd0:	b590      	push	{r4, r7, lr}
    4fd2:	b08d      	sub	sp, #52	; 0x34
    4fd4:	af04      	add	r7, sp, #16
    4fd6:	0004      	movs	r4, r0
    4fd8:	0008      	movs	r0, r1
    4fda:	0011      	movs	r1, r2
    4fdc:	1dbb      	adds	r3, r7, #6
    4fde:	1c22      	adds	r2, r4, #0
    4fe0:	801a      	strh	r2, [r3, #0]
    4fe2:	1d7b      	adds	r3, r7, #5
    4fe4:	1c02      	adds	r2, r0, #0
    4fe6:	701a      	strb	r2, [r3, #0]
    4fe8:	1d3b      	adds	r3, r7, #4
    4fea:	1c0a      	adds	r2, r1, #0
    4fec:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    4fee:	231f      	movs	r3, #31
    4ff0:	18fb      	adds	r3, r7, r3
    4ff2:	22ff      	movs	r2, #255	; 0xff
    4ff4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    4ff6:	1dbb      	adds	r3, r7, #6
    4ff8:	881b      	ldrh	r3, [r3, #0]
    4ffa:	2b02      	cmp	r3, #2
    4ffc:	d000      	beq.n	5000 <socket+0x30>
    4ffe:	e0cd      	b.n	519c <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    5000:	1d7b      	adds	r3, r7, #5
    5002:	781b      	ldrb	r3, [r3, #0]
    5004:	2b01      	cmp	r3, #1
    5006:	d135      	bne.n	5074 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    5008:	231e      	movs	r3, #30
    500a:	18fb      	adds	r3, r7, r3
    500c:	2200      	movs	r2, #0
    500e:	701a      	strb	r2, [r3, #0]
    5010:	e02a      	b.n	5068 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    5012:	2317      	movs	r3, #23
    5014:	18fb      	adds	r3, r7, r3
    5016:	4a65      	ldr	r2, [pc, #404]	; (51ac <socket+0x1dc>)
    5018:	7812      	ldrb	r2, [r2, #0]
    501a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    501c:	4b63      	ldr	r3, [pc, #396]	; (51ac <socket+0x1dc>)
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	b2db      	uxtb	r3, r3
    5022:	011a      	lsls	r2, r3, #4
    5024:	4b62      	ldr	r3, [pc, #392]	; (51b0 <socket+0x1e0>)
    5026:	18d3      	adds	r3, r2, r3
    5028:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    502a:	4b60      	ldr	r3, [pc, #384]	; (51ac <socket+0x1dc>)
    502c:	781b      	ldrb	r3, [r3, #0]
    502e:	b2db      	uxtb	r3, r3
    5030:	1c5a      	adds	r2, r3, #1
    5032:	4b60      	ldr	r3, [pc, #384]	; (51b4 <socket+0x1e4>)
    5034:	2107      	movs	r1, #7
    5036:	0010      	movs	r0, r2
    5038:	4798      	blx	r3
    503a:	000b      	movs	r3, r1
    503c:	b2da      	uxtb	r2, r3
    503e:	4b5b      	ldr	r3, [pc, #364]	; (51ac <socket+0x1dc>)
    5040:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    5042:	69bb      	ldr	r3, [r7, #24]
    5044:	7a9b      	ldrb	r3, [r3, #10]
    5046:	b2db      	uxtb	r3, r3
    5048:	2b00      	cmp	r3, #0
    504a:	d106      	bne.n	505a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    504c:	231f      	movs	r3, #31
    504e:	18fb      	adds	r3, r7, r3
    5050:	2217      	movs	r2, #23
    5052:	18ba      	adds	r2, r7, r2
    5054:	7812      	ldrb	r2, [r2, #0]
    5056:	701a      	strb	r2, [r3, #0]
					break;
    5058:	e04c      	b.n	50f4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    505a:	231e      	movs	r3, #30
    505c:	18fb      	adds	r3, r7, r3
    505e:	781a      	ldrb	r2, [r3, #0]
    5060:	231e      	movs	r3, #30
    5062:	18fb      	adds	r3, r7, r3
    5064:	3201      	adds	r2, #1
    5066:	701a      	strb	r2, [r3, #0]
    5068:	231e      	movs	r3, #30
    506a:	18fb      	adds	r3, r7, r3
    506c:	781b      	ldrb	r3, [r3, #0]
    506e:	2b06      	cmp	r3, #6
    5070:	d9cf      	bls.n	5012 <socket+0x42>
    5072:	e03f      	b.n	50f4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    5074:	1d7b      	adds	r3, r7, #5
    5076:	781b      	ldrb	r3, [r3, #0]
    5078:	2b02      	cmp	r3, #2
    507a:	d13b      	bne.n	50f4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    507c:	4b4e      	ldr	r3, [pc, #312]	; (51b8 <socket+0x1e8>)
    507e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    5080:	231e      	movs	r3, #30
    5082:	18fb      	adds	r3, r7, r3
    5084:	2200      	movs	r2, #0
    5086:	701a      	strb	r2, [r3, #0]
    5088:	e02f      	b.n	50ea <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    508a:	2317      	movs	r3, #23
    508c:	18fb      	adds	r3, r7, r3
    508e:	4a4b      	ldr	r2, [pc, #300]	; (51bc <socket+0x1ec>)
    5090:	7812      	ldrb	r2, [r2, #0]
    5092:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    5094:	4b49      	ldr	r3, [pc, #292]	; (51bc <socket+0x1ec>)
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	b2db      	uxtb	r3, r3
    509a:	011b      	lsls	r3, r3, #4
    509c:	693a      	ldr	r2, [r7, #16]
    509e:	18d3      	adds	r3, r2, r3
    50a0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    50a2:	4b46      	ldr	r3, [pc, #280]	; (51bc <socket+0x1ec>)
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	b2db      	uxtb	r3, r3
    50a8:	3301      	adds	r3, #1
    50aa:	4a45      	ldr	r2, [pc, #276]	; (51c0 <socket+0x1f0>)
    50ac:	4013      	ands	r3, r2
    50ae:	d504      	bpl.n	50ba <socket+0xea>
    50b0:	3b01      	subs	r3, #1
    50b2:	2204      	movs	r2, #4
    50b4:	4252      	negs	r2, r2
    50b6:	4313      	orrs	r3, r2
    50b8:	3301      	adds	r3, #1
    50ba:	b2da      	uxtb	r2, r3
    50bc:	4b3f      	ldr	r3, [pc, #252]	; (51bc <socket+0x1ec>)
    50be:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    50c0:	69bb      	ldr	r3, [r7, #24]
    50c2:	7a9b      	ldrb	r3, [r3, #10]
    50c4:	b2db      	uxtb	r3, r3
    50c6:	2b00      	cmp	r3, #0
    50c8:	d108      	bne.n	50dc <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    50ca:	2317      	movs	r3, #23
    50cc:	18fb      	adds	r3, r7, r3
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	3307      	adds	r3, #7
    50d2:	b2da      	uxtb	r2, r3
    50d4:	231f      	movs	r3, #31
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	701a      	strb	r2, [r3, #0]
					break;
    50da:	e00b      	b.n	50f4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    50dc:	231e      	movs	r3, #30
    50de:	18fb      	adds	r3, r7, r3
    50e0:	781a      	ldrb	r2, [r3, #0]
    50e2:	231e      	movs	r3, #30
    50e4:	18fb      	adds	r3, r7, r3
    50e6:	3201      	adds	r2, #1
    50e8:	701a      	strb	r2, [r3, #0]
    50ea:	231e      	movs	r3, #30
    50ec:	18fb      	adds	r3, r7, r3
    50ee:	781b      	ldrb	r3, [r3, #0]
    50f0:	2b03      	cmp	r3, #3
    50f2:	d9ca      	bls.n	508a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    50f4:	231f      	movs	r3, #31
    50f6:	18fb      	adds	r3, r7, r3
    50f8:	781b      	ldrb	r3, [r3, #0]
    50fa:	2b7f      	cmp	r3, #127	; 0x7f
    50fc:	d84e      	bhi.n	519c <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    50fe:	69bb      	ldr	r3, [r7, #24]
    5100:	2210      	movs	r2, #16
    5102:	2100      	movs	r1, #0
    5104:	0018      	movs	r0, r3
    5106:	4b2f      	ldr	r3, [pc, #188]	; (51c4 <socket+0x1f4>)
    5108:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    510a:	69bb      	ldr	r3, [r7, #24]
    510c:	2201      	movs	r2, #1
    510e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    5110:	4b2d      	ldr	r3, [pc, #180]	; (51c8 <socket+0x1f8>)
    5112:	881b      	ldrh	r3, [r3, #0]
    5114:	b29b      	uxth	r3, r3
    5116:	3301      	adds	r3, #1
    5118:	b29a      	uxth	r2, r3
    511a:	4b2b      	ldr	r3, [pc, #172]	; (51c8 <socket+0x1f8>)
    511c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    511e:	4b2a      	ldr	r3, [pc, #168]	; (51c8 <socket+0x1f8>)
    5120:	881b      	ldrh	r3, [r3, #0]
    5122:	b29b      	uxth	r3, r3
    5124:	2b00      	cmp	r3, #0
    5126:	d106      	bne.n	5136 <socket+0x166>
				++gu16SessionID;
    5128:	4b27      	ldr	r3, [pc, #156]	; (51c8 <socket+0x1f8>)
    512a:	881b      	ldrh	r3, [r3, #0]
    512c:	b29b      	uxth	r3, r3
    512e:	3301      	adds	r3, #1
    5130:	b29a      	uxth	r2, r3
    5132:	4b25      	ldr	r3, [pc, #148]	; (51c8 <socket+0x1f8>)
    5134:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    5136:	4b24      	ldr	r3, [pc, #144]	; (51c8 <socket+0x1f8>)
    5138:	881b      	ldrh	r3, [r3, #0]
    513a:	b29a      	uxth	r2, r3
    513c:	69bb      	ldr	r3, [r7, #24]
    513e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    5140:	4b22      	ldr	r3, [pc, #136]	; (51cc <socket+0x1fc>)
    5142:	0018      	movs	r0, r3
    5144:	4b22      	ldr	r3, [pc, #136]	; (51d0 <socket+0x200>)
    5146:	4798      	blx	r3
    5148:	231f      	movs	r3, #31
    514a:	18fb      	adds	r3, r7, r3
    514c:	2100      	movs	r1, #0
    514e:	5659      	ldrsb	r1, [r3, r1]
    5150:	4b1d      	ldr	r3, [pc, #116]	; (51c8 <socket+0x1f8>)
    5152:	881b      	ldrh	r3, [r3, #0]
    5154:	b29b      	uxth	r3, r3
    5156:	001a      	movs	r2, r3
    5158:	4b1e      	ldr	r3, [pc, #120]	; (51d4 <socket+0x204>)
    515a:	0018      	movs	r0, r3
    515c:	4b1c      	ldr	r3, [pc, #112]	; (51d0 <socket+0x200>)
    515e:	4798      	blx	r3
    5160:	200d      	movs	r0, #13
    5162:	4b1d      	ldr	r3, [pc, #116]	; (51d8 <socket+0x208>)
    5164:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    5166:	1d3b      	adds	r3, r7, #4
    5168:	781b      	ldrb	r3, [r3, #0]
    516a:	2201      	movs	r2, #1
    516c:	4013      	ands	r3, r2
    516e:	d015      	beq.n	519c <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    5170:	230c      	movs	r3, #12
    5172:	18fb      	adds	r3, r7, r3
    5174:	221f      	movs	r2, #31
    5176:	18ba      	adds	r2, r7, r2
    5178:	7812      	ldrb	r2, [r2, #0]
    517a:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    517c:	69bb      	ldr	r3, [r7, #24]
    517e:	2221      	movs	r2, #33	; 0x21
    5180:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    5182:	230c      	movs	r3, #12
    5184:	18fa      	adds	r2, r7, r3
    5186:	2300      	movs	r3, #0
    5188:	9302      	str	r3, [sp, #8]
    518a:	2300      	movs	r3, #0
    518c:	9301      	str	r3, [sp, #4]
    518e:	2300      	movs	r3, #0
    5190:	9300      	str	r3, [sp, #0]
    5192:	2304      	movs	r3, #4
    5194:	2150      	movs	r1, #80	; 0x50
    5196:	2002      	movs	r0, #2
    5198:	4c10      	ldr	r4, [pc, #64]	; (51dc <socket+0x20c>)
    519a:	47a0      	blx	r4
			}
		}
	}
	return sock;
    519c:	231f      	movs	r3, #31
    519e:	18fb      	adds	r3, r7, r3
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	b25b      	sxtb	r3, r3
}
    51a4:	0018      	movs	r0, r3
    51a6:	46bd      	mov	sp, r7
    51a8:	b009      	add	sp, #36	; 0x24
    51aa:	bd90      	pop	{r4, r7, pc}
    51ac:	20000241 	.word	0x20000241
    51b0:	20000338 	.word	0x20000338
    51b4:	0001163d 	.word	0x0001163d
    51b8:	200003a8 	.word	0x200003a8
    51bc:	20000242 	.word	0x20000242
    51c0:	80000003 	.word	0x80000003
    51c4:	00000c21 	.word	0x00000c21
    51c8:	2000023e 	.word	0x2000023e
    51cc:	000148cc 	.word	0x000148cc
    51d0:	0000efc9 	.word	0x0000efc9
    51d4:	000148ec 	.word	0x000148ec
    51d8:	0000effd 	.word	0x0000effd
    51dc:	00000e81 	.word	0x00000e81

000051e0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    51e0:	b5b0      	push	{r4, r5, r7, lr}
    51e2:	b08a      	sub	sp, #40	; 0x28
    51e4:	af04      	add	r7, sp, #16
    51e6:	6039      	str	r1, [r7, #0]
    51e8:	0011      	movs	r1, r2
    51ea:	1dfb      	adds	r3, r7, #7
    51ec:	1c02      	adds	r2, r0, #0
    51ee:	701a      	strb	r2, [r3, #0]
    51f0:	1dbb      	adds	r3, r7, #6
    51f2:	1c0a      	adds	r2, r1, #0
    51f4:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    51f6:	2317      	movs	r3, #23
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	22fa      	movs	r2, #250	; 0xfa
    51fc:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    51fe:	1dfb      	adds	r3, r7, #7
    5200:	781b      	ldrb	r3, [r3, #0]
    5202:	2b7f      	cmp	r3, #127	; 0x7f
    5204:	d867      	bhi.n	52d6 <connect+0xf6>
    5206:	683b      	ldr	r3, [r7, #0]
    5208:	2b00      	cmp	r3, #0
    520a:	d064      	beq.n	52d6 <connect+0xf6>
    520c:	1dfb      	adds	r3, r7, #7
    520e:	781b      	ldrb	r3, [r3, #0]
    5210:	b25b      	sxtb	r3, r3
    5212:	4a35      	ldr	r2, [pc, #212]	; (52e8 <connect+0x108>)
    5214:	011b      	lsls	r3, r3, #4
    5216:	18d3      	adds	r3, r2, r3
    5218:	330a      	adds	r3, #10
    521a:	781b      	ldrb	r3, [r3, #0]
    521c:	b2db      	uxtb	r3, r3
    521e:	2b01      	cmp	r3, #1
    5220:	d159      	bne.n	52d6 <connect+0xf6>
    5222:	1dbb      	adds	r3, r7, #6
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	2b00      	cmp	r3, #0
    5228:	d055      	beq.n	52d6 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    522a:	2316      	movs	r3, #22
    522c:	18fb      	adds	r3, r7, r3
    522e:	2244      	movs	r2, #68	; 0x44
    5230:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    5232:	1dfb      	adds	r3, r7, #7
    5234:	781b      	ldrb	r3, [r3, #0]
    5236:	b25b      	sxtb	r3, r3
    5238:	4a2b      	ldr	r2, [pc, #172]	; (52e8 <connect+0x108>)
    523a:	011b      	lsls	r3, r3, #4
    523c:	18d3      	adds	r3, r2, r3
    523e:	330b      	adds	r3, #11
    5240:	781b      	ldrb	r3, [r3, #0]
    5242:	b2db      	uxtb	r3, r3
    5244:	001a      	movs	r2, r3
    5246:	2301      	movs	r3, #1
    5248:	4013      	ands	r3, r2
    524a:	d00f      	beq.n	526c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    524c:	2316      	movs	r3, #22
    524e:	18fb      	adds	r3, r7, r3
    5250:	224b      	movs	r2, #75	; 0x4b
    5252:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    5254:	1dfb      	adds	r3, r7, #7
    5256:	781b      	ldrb	r3, [r3, #0]
    5258:	b25b      	sxtb	r3, r3
    525a:	4a23      	ldr	r2, [pc, #140]	; (52e8 <connect+0x108>)
    525c:	011b      	lsls	r3, r3, #4
    525e:	18d3      	adds	r3, r2, r3
    5260:	330b      	adds	r3, #11
    5262:	781b      	ldrb	r3, [r3, #0]
    5264:	b2da      	uxtb	r2, r3
    5266:	2308      	movs	r3, #8
    5268:	18fb      	adds	r3, r7, r3
    526a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    526c:	2308      	movs	r3, #8
    526e:	18fb      	adds	r3, r7, r3
    5270:	1dfa      	adds	r2, r7, #7
    5272:	7812      	ldrb	r2, [r2, #0]
    5274:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    5276:	6839      	ldr	r1, [r7, #0]
    5278:	2308      	movs	r3, #8
    527a:	18fb      	adds	r3, r7, r3
    527c:	2208      	movs	r2, #8
    527e:	0018      	movs	r0, r3
    5280:	4b1a      	ldr	r3, [pc, #104]	; (52ec <connect+0x10c>)
    5282:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    5284:	1dfb      	adds	r3, r7, #7
    5286:	781b      	ldrb	r3, [r3, #0]
    5288:	b25b      	sxtb	r3, r3
    528a:	4a17      	ldr	r2, [pc, #92]	; (52e8 <connect+0x108>)
    528c:	011b      	lsls	r3, r3, #4
    528e:	18d3      	adds	r3, r2, r3
    5290:	3306      	adds	r3, #6
    5292:	881b      	ldrh	r3, [r3, #0]
    5294:	b29a      	uxth	r2, r3
    5296:	2308      	movs	r3, #8
    5298:	18fb      	adds	r3, r7, r3
    529a:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    529c:	2317      	movs	r3, #23
    529e:	18fc      	adds	r4, r7, r3
    52a0:	2308      	movs	r3, #8
    52a2:	18fa      	adds	r2, r7, r3
    52a4:	2316      	movs	r3, #22
    52a6:	18fb      	adds	r3, r7, r3
    52a8:	7819      	ldrb	r1, [r3, #0]
    52aa:	2300      	movs	r3, #0
    52ac:	9302      	str	r3, [sp, #8]
    52ae:	2300      	movs	r3, #0
    52b0:	9301      	str	r3, [sp, #4]
    52b2:	2300      	movs	r3, #0
    52b4:	9300      	str	r3, [sp, #0]
    52b6:	230c      	movs	r3, #12
    52b8:	2002      	movs	r0, #2
    52ba:	4d0d      	ldr	r5, [pc, #52]	; (52f0 <connect+0x110>)
    52bc:	47a8      	blx	r5
    52be:	0003      	movs	r3, r0
    52c0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    52c2:	2317      	movs	r3, #23
    52c4:	18fb      	adds	r3, r7, r3
    52c6:	781b      	ldrb	r3, [r3, #0]
    52c8:	b25b      	sxtb	r3, r3
    52ca:	2b00      	cmp	r3, #0
    52cc:	d003      	beq.n	52d6 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    52ce:	2317      	movs	r3, #23
    52d0:	18fb      	adds	r3, r7, r3
    52d2:	22f7      	movs	r2, #247	; 0xf7
    52d4:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    52d6:	2317      	movs	r3, #23
    52d8:	18fb      	adds	r3, r7, r3
    52da:	781b      	ldrb	r3, [r3, #0]
    52dc:	b25b      	sxtb	r3, r3
}
    52de:	0018      	movs	r0, r3
    52e0:	46bd      	mov	sp, r7
    52e2:	b006      	add	sp, #24
    52e4:	bdb0      	pop	{r4, r5, r7, pc}
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	20000338 	.word	0x20000338
    52ec:	00000be5 	.word	0x00000be5
    52f0:	00000e81 	.word	0x00000e81

000052f4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    52f4:	b590      	push	{r4, r7, lr}
    52f6:	b08f      	sub	sp, #60	; 0x3c
    52f8:	af04      	add	r7, sp, #16
    52fa:	0004      	movs	r4, r0
    52fc:	60b9      	str	r1, [r7, #8]
    52fe:	0010      	movs	r0, r2
    5300:	0019      	movs	r1, r3
    5302:	230f      	movs	r3, #15
    5304:	18fb      	adds	r3, r7, r3
    5306:	1c22      	adds	r2, r4, #0
    5308:	701a      	strb	r2, [r3, #0]
    530a:	230c      	movs	r3, #12
    530c:	18fb      	adds	r3, r7, r3
    530e:	1c02      	adds	r2, r0, #0
    5310:	801a      	strh	r2, [r3, #0]
    5312:	1dbb      	adds	r3, r7, #6
    5314:	1c0a      	adds	r2, r1, #0
    5316:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5318:	2326      	movs	r3, #38	; 0x26
    531a:	18fb      	adds	r3, r7, r3
    531c:	2206      	movs	r2, #6
    531e:	4252      	negs	r2, r2
    5320:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    5322:	230f      	movs	r3, #15
    5324:	18fb      	adds	r3, r7, r3
    5326:	781b      	ldrb	r3, [r3, #0]
    5328:	2b7f      	cmp	r3, #127	; 0x7f
    532a:	d900      	bls.n	532e <send+0x3a>
    532c:	e087      	b.n	543e <send+0x14a>
    532e:	68bb      	ldr	r3, [r7, #8]
    5330:	2b00      	cmp	r3, #0
    5332:	d100      	bne.n	5336 <send+0x42>
    5334:	e083      	b.n	543e <send+0x14a>
    5336:	230c      	movs	r3, #12
    5338:	18fb      	adds	r3, r7, r3
    533a:	881a      	ldrh	r2, [r3, #0]
    533c:	23af      	movs	r3, #175	; 0xaf
    533e:	00db      	lsls	r3, r3, #3
    5340:	429a      	cmp	r2, r3
    5342:	d900      	bls.n	5346 <send+0x52>
    5344:	e07b      	b.n	543e <send+0x14a>
    5346:	230f      	movs	r3, #15
    5348:	18fb      	adds	r3, r7, r3
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	b25b      	sxtb	r3, r3
    534e:	4a40      	ldr	r2, [pc, #256]	; (5450 <send+0x15c>)
    5350:	011b      	lsls	r3, r3, #4
    5352:	18d3      	adds	r3, r2, r3
    5354:	330a      	adds	r3, #10
    5356:	781b      	ldrb	r3, [r3, #0]
    5358:	b2db      	uxtb	r3, r3
    535a:	2b01      	cmp	r3, #1
    535c:	d16f      	bne.n	543e <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    535e:	2323      	movs	r3, #35	; 0x23
    5360:	18fb      	adds	r3, r7, r3
    5362:	2245      	movs	r2, #69	; 0x45
    5364:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    5366:	2324      	movs	r3, #36	; 0x24
    5368:	18fb      	adds	r3, r7, r3
    536a:	2250      	movs	r2, #80	; 0x50
    536c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    536e:	2310      	movs	r3, #16
    5370:	18fb      	adds	r3, r7, r3
    5372:	220f      	movs	r2, #15
    5374:	18ba      	adds	r2, r7, r2
    5376:	7812      	ldrb	r2, [r2, #0]
    5378:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    537a:	2310      	movs	r3, #16
    537c:	18fb      	adds	r3, r7, r3
    537e:	220c      	movs	r2, #12
    5380:	18ba      	adds	r2, r7, r2
    5382:	8812      	ldrh	r2, [r2, #0]
    5384:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    5386:	230f      	movs	r3, #15
    5388:	18fb      	adds	r3, r7, r3
    538a:	781b      	ldrb	r3, [r3, #0]
    538c:	b25b      	sxtb	r3, r3
    538e:	4a30      	ldr	r2, [pc, #192]	; (5450 <send+0x15c>)
    5390:	011b      	lsls	r3, r3, #4
    5392:	18d3      	adds	r3, r2, r3
    5394:	3306      	adds	r3, #6
    5396:	881b      	ldrh	r3, [r3, #0]
    5398:	b29a      	uxth	r2, r3
    539a:	2310      	movs	r3, #16
    539c:	18fb      	adds	r3, r7, r3
    539e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    53a0:	230f      	movs	r3, #15
    53a2:	18fb      	adds	r3, r7, r3
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	b25b      	sxtb	r3, r3
    53a8:	2b06      	cmp	r3, #6
    53aa:	dd03      	ble.n	53b4 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    53ac:	2324      	movs	r3, #36	; 0x24
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	2244      	movs	r2, #68	; 0x44
    53b2:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    53b4:	230f      	movs	r3, #15
    53b6:	18fb      	adds	r3, r7, r3
    53b8:	781b      	ldrb	r3, [r3, #0]
    53ba:	b25b      	sxtb	r3, r3
    53bc:	4a24      	ldr	r2, [pc, #144]	; (5450 <send+0x15c>)
    53be:	011b      	lsls	r3, r3, #4
    53c0:	18d3      	adds	r3, r2, r3
    53c2:	330b      	adds	r3, #11
    53c4:	781b      	ldrb	r3, [r3, #0]
    53c6:	b2db      	uxtb	r3, r3
    53c8:	001a      	movs	r2, r3
    53ca:	2301      	movs	r3, #1
    53cc:	4013      	ands	r3, r2
    53ce:	d00f      	beq.n	53f0 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    53d0:	2323      	movs	r3, #35	; 0x23
    53d2:	18fb      	adds	r3, r7, r3
    53d4:	224c      	movs	r2, #76	; 0x4c
    53d6:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    53d8:	230f      	movs	r3, #15
    53da:	18fb      	adds	r3, r7, r3
    53dc:	2200      	movs	r2, #0
    53de:	569a      	ldrsb	r2, [r3, r2]
    53e0:	2324      	movs	r3, #36	; 0x24
    53e2:	18fb      	adds	r3, r7, r3
    53e4:	491a      	ldr	r1, [pc, #104]	; (5450 <send+0x15c>)
    53e6:	0112      	lsls	r2, r2, #4
    53e8:	188a      	adds	r2, r1, r2
    53ea:	3208      	adds	r2, #8
    53ec:	8812      	ldrh	r2, [r2, #0]
    53ee:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    53f0:	2323      	movs	r3, #35	; 0x23
    53f2:	18fb      	adds	r3, r7, r3
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	2280      	movs	r2, #128	; 0x80
    53f8:	4252      	negs	r2, r2
    53fa:	4313      	orrs	r3, r2
    53fc:	b2d9      	uxtb	r1, r3
    53fe:	2310      	movs	r3, #16
    5400:	18fa      	adds	r2, r7, r3
    5402:	2324      	movs	r3, #36	; 0x24
    5404:	18fb      	adds	r3, r7, r3
    5406:	881b      	ldrh	r3, [r3, #0]
    5408:	9302      	str	r3, [sp, #8]
    540a:	230c      	movs	r3, #12
    540c:	18fb      	adds	r3, r7, r3
    540e:	881b      	ldrh	r3, [r3, #0]
    5410:	9301      	str	r3, [sp, #4]
    5412:	68bb      	ldr	r3, [r7, #8]
    5414:	9300      	str	r3, [sp, #0]
    5416:	2310      	movs	r3, #16
    5418:	2002      	movs	r0, #2
    541a:	4c0e      	ldr	r4, [pc, #56]	; (5454 <send+0x160>)
    541c:	47a0      	blx	r4
    541e:	0003      	movs	r3, r0
    5420:	001a      	movs	r2, r3
    5422:	2326      	movs	r3, #38	; 0x26
    5424:	18fb      	adds	r3, r7, r3
    5426:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    5428:	2326      	movs	r3, #38	; 0x26
    542a:	18fb      	adds	r3, r7, r3
    542c:	2200      	movs	r2, #0
    542e:	5e9b      	ldrsh	r3, [r3, r2]
    5430:	2b00      	cmp	r3, #0
    5432:	d004      	beq.n	543e <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    5434:	2326      	movs	r3, #38	; 0x26
    5436:	18fb      	adds	r3, r7, r3
    5438:	220e      	movs	r2, #14
    543a:	4252      	negs	r2, r2
    543c:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    543e:	2326      	movs	r3, #38	; 0x26
    5440:	18fb      	adds	r3, r7, r3
    5442:	2200      	movs	r2, #0
    5444:	5e9b      	ldrsh	r3, [r3, r2]
}
    5446:	0018      	movs	r0, r3
    5448:	46bd      	mov	sp, r7
    544a:	b00b      	add	sp, #44	; 0x2c
    544c:	bd90      	pop	{r4, r7, pc}
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	20000338 	.word	0x20000338
    5454:	00000e81 	.word	0x00000e81

00005458 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    5458:	b590      	push	{r4, r7, lr}
    545a:	b08d      	sub	sp, #52	; 0x34
    545c:	af04      	add	r7, sp, #16
    545e:	60b9      	str	r1, [r7, #8]
    5460:	0011      	movs	r1, r2
    5462:	607b      	str	r3, [r7, #4]
    5464:	230f      	movs	r3, #15
    5466:	18fb      	adds	r3, r7, r3
    5468:	1c02      	adds	r2, r0, #0
    546a:	701a      	strb	r2, [r3, #0]
    546c:	230c      	movs	r3, #12
    546e:	18fb      	adds	r3, r7, r3
    5470:	1c0a      	adds	r2, r1, #0
    5472:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5474:	231e      	movs	r3, #30
    5476:	18fb      	adds	r3, r7, r3
    5478:	2206      	movs	r2, #6
    547a:	4252      	negs	r2, r2
    547c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    547e:	230f      	movs	r3, #15
    5480:	18fb      	adds	r3, r7, r3
    5482:	781b      	ldrb	r3, [r3, #0]
    5484:	2b7f      	cmp	r3, #127	; 0x7f
    5486:	d900      	bls.n	548a <recv+0x32>
    5488:	e099      	b.n	55be <recv+0x166>
    548a:	68bb      	ldr	r3, [r7, #8]
    548c:	2b00      	cmp	r3, #0
    548e:	d100      	bne.n	5492 <recv+0x3a>
    5490:	e095      	b.n	55be <recv+0x166>
    5492:	230c      	movs	r3, #12
    5494:	18fb      	adds	r3, r7, r3
    5496:	881b      	ldrh	r3, [r3, #0]
    5498:	2b00      	cmp	r3, #0
    549a:	d100      	bne.n	549e <recv+0x46>
    549c:	e08f      	b.n	55be <recv+0x166>
    549e:	230f      	movs	r3, #15
    54a0:	18fb      	adds	r3, r7, r3
    54a2:	781b      	ldrb	r3, [r3, #0]
    54a4:	b25b      	sxtb	r3, r3
    54a6:	4a4a      	ldr	r2, [pc, #296]	; (55d0 <recv+0x178>)
    54a8:	011b      	lsls	r3, r3, #4
    54aa:	18d3      	adds	r3, r2, r3
    54ac:	330a      	adds	r3, #10
    54ae:	781b      	ldrb	r3, [r3, #0]
    54b0:	b2db      	uxtb	r3, r3
    54b2:	2b01      	cmp	r3, #1
    54b4:	d000      	beq.n	54b8 <recv+0x60>
    54b6:	e082      	b.n	55be <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    54b8:	231e      	movs	r3, #30
    54ba:	18fb      	adds	r3, r7, r3
    54bc:	2200      	movs	r2, #0
    54be:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    54c0:	230f      	movs	r3, #15
    54c2:	18fb      	adds	r3, r7, r3
    54c4:	2200      	movs	r2, #0
    54c6:	569a      	ldrsb	r2, [r3, r2]
    54c8:	4b41      	ldr	r3, [pc, #260]	; (55d0 <recv+0x178>)
    54ca:	0112      	lsls	r2, r2, #4
    54cc:	68b9      	ldr	r1, [r7, #8]
    54ce:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    54d0:	230f      	movs	r3, #15
    54d2:	18fb      	adds	r3, r7, r3
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	b25b      	sxtb	r3, r3
    54d8:	4a3d      	ldr	r2, [pc, #244]	; (55d0 <recv+0x178>)
    54da:	011b      	lsls	r3, r3, #4
    54dc:	18d3      	adds	r3, r2, r3
    54de:	3304      	adds	r3, #4
    54e0:	220c      	movs	r2, #12
    54e2:	18ba      	adds	r2, r7, r2
    54e4:	8812      	ldrh	r2, [r2, #0]
    54e6:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    54e8:	230f      	movs	r3, #15
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	781b      	ldrb	r3, [r3, #0]
    54ee:	b25b      	sxtb	r3, r3
    54f0:	4a37      	ldr	r2, [pc, #220]	; (55d0 <recv+0x178>)
    54f2:	011b      	lsls	r3, r3, #4
    54f4:	18d3      	adds	r3, r2, r3
    54f6:	330c      	adds	r3, #12
    54f8:	781b      	ldrb	r3, [r3, #0]
    54fa:	b2db      	uxtb	r3, r3
    54fc:	2b00      	cmp	r3, #0
    54fe:	d15e      	bne.n	55be <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    5500:	231d      	movs	r3, #29
    5502:	18fb      	adds	r3, r7, r3
    5504:	2246      	movs	r2, #70	; 0x46
    5506:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    5508:	230f      	movs	r3, #15
    550a:	18fb      	adds	r3, r7, r3
    550c:	781b      	ldrb	r3, [r3, #0]
    550e:	b25b      	sxtb	r3, r3
    5510:	4a2f      	ldr	r2, [pc, #188]	; (55d0 <recv+0x178>)
    5512:	011b      	lsls	r3, r3, #4
    5514:	18d3      	adds	r3, r2, r3
    5516:	330c      	adds	r3, #12
    5518:	2201      	movs	r2, #1
    551a:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    551c:	230f      	movs	r3, #15
    551e:	18fb      	adds	r3, r7, r3
    5520:	781b      	ldrb	r3, [r3, #0]
    5522:	b25b      	sxtb	r3, r3
    5524:	4a2a      	ldr	r2, [pc, #168]	; (55d0 <recv+0x178>)
    5526:	011b      	lsls	r3, r3, #4
    5528:	18d3      	adds	r3, r2, r3
    552a:	330b      	adds	r3, #11
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	b2db      	uxtb	r3, r3
    5530:	001a      	movs	r2, r3
    5532:	2301      	movs	r3, #1
    5534:	4013      	ands	r3, r2
    5536:	d003      	beq.n	5540 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    5538:	231d      	movs	r3, #29
    553a:	18fb      	adds	r3, r7, r3
    553c:	224d      	movs	r2, #77	; 0x4d
    553e:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	2b00      	cmp	r3, #0
    5544:	d105      	bne.n	5552 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    5546:	2314      	movs	r3, #20
    5548:	18fb      	adds	r3, r7, r3
    554a:	2201      	movs	r2, #1
    554c:	4252      	negs	r2, r2
    554e:	601a      	str	r2, [r3, #0]
    5550:	e003      	b.n	555a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    5552:	2314      	movs	r3, #20
    5554:	18fb      	adds	r3, r7, r3
    5556:	687a      	ldr	r2, [r7, #4]
    5558:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    555a:	2314      	movs	r3, #20
    555c:	18fb      	adds	r3, r7, r3
    555e:	220f      	movs	r2, #15
    5560:	18ba      	adds	r2, r7, r2
    5562:	7812      	ldrb	r2, [r2, #0]
    5564:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    5566:	230f      	movs	r3, #15
    5568:	18fb      	adds	r3, r7, r3
    556a:	781b      	ldrb	r3, [r3, #0]
    556c:	b25b      	sxtb	r3, r3
    556e:	4a18      	ldr	r2, [pc, #96]	; (55d0 <recv+0x178>)
    5570:	011b      	lsls	r3, r3, #4
    5572:	18d3      	adds	r3, r2, r3
    5574:	3306      	adds	r3, #6
    5576:	881b      	ldrh	r3, [r3, #0]
    5578:	b29a      	uxth	r2, r3
    557a:	2314      	movs	r3, #20
    557c:	18fb      	adds	r3, r7, r3
    557e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5580:	2314      	movs	r3, #20
    5582:	18fa      	adds	r2, r7, r3
    5584:	231d      	movs	r3, #29
    5586:	18fb      	adds	r3, r7, r3
    5588:	7819      	ldrb	r1, [r3, #0]
    558a:	2300      	movs	r3, #0
    558c:	9302      	str	r3, [sp, #8]
    558e:	2300      	movs	r3, #0
    5590:	9301      	str	r3, [sp, #4]
    5592:	2300      	movs	r3, #0
    5594:	9300      	str	r3, [sp, #0]
    5596:	2308      	movs	r3, #8
    5598:	2002      	movs	r0, #2
    559a:	4c0e      	ldr	r4, [pc, #56]	; (55d4 <recv+0x17c>)
    559c:	47a0      	blx	r4
    559e:	0003      	movs	r3, r0
    55a0:	001a      	movs	r2, r3
    55a2:	231e      	movs	r3, #30
    55a4:	18fb      	adds	r3, r7, r3
    55a6:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    55a8:	231e      	movs	r3, #30
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	2200      	movs	r2, #0
    55ae:	5e9b      	ldrsh	r3, [r3, r2]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d004      	beq.n	55be <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    55b4:	231e      	movs	r3, #30
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	220e      	movs	r2, #14
    55ba:	4252      	negs	r2, r2
    55bc:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    55be:	231e      	movs	r3, #30
    55c0:	18fb      	adds	r3, r7, r3
    55c2:	2200      	movs	r2, #0
    55c4:	5e9b      	ldrsh	r3, [r3, r2]
}
    55c6:	0018      	movs	r0, r3
    55c8:	46bd      	mov	sp, r7
    55ca:	b009      	add	sp, #36	; 0x24
    55cc:	bd90      	pop	{r4, r7, pc}
    55ce:	46c0      	nop			; (mov r8, r8)
    55d0:	20000338 	.word	0x20000338
    55d4:	00000e81 	.word	0x00000e81

000055d8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    55d8:	b5b0      	push	{r4, r5, r7, lr}
    55da:	b088      	sub	sp, #32
    55dc:	af04      	add	r7, sp, #16
    55de:	0002      	movs	r2, r0
    55e0:	1dfb      	adds	r3, r7, #7
    55e2:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    55e4:	230f      	movs	r3, #15
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	22fa      	movs	r2, #250	; 0xfa
    55ea:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    55ec:	4b42      	ldr	r3, [pc, #264]	; (56f8 <close+0x120>)
    55ee:	0018      	movs	r0, r3
    55f0:	4b42      	ldr	r3, [pc, #264]	; (56fc <close+0x124>)
    55f2:	4798      	blx	r3
    55f4:	1dfb      	adds	r3, r7, #7
    55f6:	2200      	movs	r2, #0
    55f8:	569a      	ldrsb	r2, [r3, r2]
    55fa:	4b41      	ldr	r3, [pc, #260]	; (5700 <close+0x128>)
    55fc:	0011      	movs	r1, r2
    55fe:	0018      	movs	r0, r3
    5600:	4b3e      	ldr	r3, [pc, #248]	; (56fc <close+0x124>)
    5602:	4798      	blx	r3
    5604:	200d      	movs	r0, #13
    5606:	4b3f      	ldr	r3, [pc, #252]	; (5704 <close+0x12c>)
    5608:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    560a:	1dfb      	adds	r3, r7, #7
    560c:	781b      	ldrb	r3, [r3, #0]
    560e:	2b7f      	cmp	r3, #127	; 0x7f
    5610:	d86a      	bhi.n	56e8 <close+0x110>
    5612:	1dfb      	adds	r3, r7, #7
    5614:	781b      	ldrb	r3, [r3, #0]
    5616:	b25b      	sxtb	r3, r3
    5618:	4a3b      	ldr	r2, [pc, #236]	; (5708 <close+0x130>)
    561a:	011b      	lsls	r3, r3, #4
    561c:	18d3      	adds	r3, r2, r3
    561e:	330a      	adds	r3, #10
    5620:	781b      	ldrb	r3, [r3, #0]
    5622:	b2db      	uxtb	r3, r3
    5624:	2b01      	cmp	r3, #1
    5626:	d15f      	bne.n	56e8 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    5628:	230e      	movs	r3, #14
    562a:	18fb      	adds	r3, r7, r3
    562c:	2249      	movs	r2, #73	; 0x49
    562e:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    5630:	2308      	movs	r3, #8
    5632:	18fb      	adds	r3, r7, r3
    5634:	1dfa      	adds	r2, r7, #7
    5636:	7812      	ldrb	r2, [r2, #0]
    5638:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    563a:	1dfb      	adds	r3, r7, #7
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	b25b      	sxtb	r3, r3
    5640:	4a31      	ldr	r2, [pc, #196]	; (5708 <close+0x130>)
    5642:	011b      	lsls	r3, r3, #4
    5644:	18d3      	adds	r3, r2, r3
    5646:	3306      	adds	r3, #6
    5648:	881b      	ldrh	r3, [r3, #0]
    564a:	b29a      	uxth	r2, r3
    564c:	2308      	movs	r3, #8
    564e:	18fb      	adds	r3, r7, r3
    5650:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    5652:	1dfb      	adds	r3, r7, #7
    5654:	781b      	ldrb	r3, [r3, #0]
    5656:	b25b      	sxtb	r3, r3
    5658:	4a2b      	ldr	r2, [pc, #172]	; (5708 <close+0x130>)
    565a:	011b      	lsls	r3, r3, #4
    565c:	18d3      	adds	r3, r2, r3
    565e:	330a      	adds	r3, #10
    5660:	2200      	movs	r2, #0
    5662:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5664:	1dfb      	adds	r3, r7, #7
    5666:	781b      	ldrb	r3, [r3, #0]
    5668:	b25b      	sxtb	r3, r3
    566a:	4a27      	ldr	r2, [pc, #156]	; (5708 <close+0x130>)
    566c:	011b      	lsls	r3, r3, #4
    566e:	18d3      	adds	r3, r2, r3
    5670:	3306      	adds	r3, #6
    5672:	2200      	movs	r2, #0
    5674:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5676:	1dfb      	adds	r3, r7, #7
    5678:	781b      	ldrb	r3, [r3, #0]
    567a:	b25b      	sxtb	r3, r3
    567c:	4a22      	ldr	r2, [pc, #136]	; (5708 <close+0x130>)
    567e:	011b      	lsls	r3, r3, #4
    5680:	18d3      	adds	r3, r2, r3
    5682:	330b      	adds	r3, #11
    5684:	781b      	ldrb	r3, [r3, #0]
    5686:	b2db      	uxtb	r3, r3
    5688:	001a      	movs	r2, r3
    568a:	2301      	movs	r3, #1
    568c:	4013      	ands	r3, r2
    568e:	d003      	beq.n	5698 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5690:	230e      	movs	r3, #14
    5692:	18fb      	adds	r3, r7, r3
    5694:	224e      	movs	r2, #78	; 0x4e
    5696:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5698:	230f      	movs	r3, #15
    569a:	18fc      	adds	r4, r7, r3
    569c:	2308      	movs	r3, #8
    569e:	18fa      	adds	r2, r7, r3
    56a0:	230e      	movs	r3, #14
    56a2:	18fb      	adds	r3, r7, r3
    56a4:	7819      	ldrb	r1, [r3, #0]
    56a6:	2300      	movs	r3, #0
    56a8:	9302      	str	r3, [sp, #8]
    56aa:	2300      	movs	r3, #0
    56ac:	9301      	str	r3, [sp, #4]
    56ae:	2300      	movs	r3, #0
    56b0:	9300      	str	r3, [sp, #0]
    56b2:	2304      	movs	r3, #4
    56b4:	2002      	movs	r0, #2
    56b6:	4d15      	ldr	r5, [pc, #84]	; (570c <close+0x134>)
    56b8:	47a8      	blx	r5
    56ba:	0003      	movs	r3, r0
    56bc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    56be:	230f      	movs	r3, #15
    56c0:	18fb      	adds	r3, r7, r3
    56c2:	781b      	ldrb	r3, [r3, #0]
    56c4:	b25b      	sxtb	r3, r3
    56c6:	2b00      	cmp	r3, #0
    56c8:	d003      	beq.n	56d2 <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    56ca:	230f      	movs	r3, #15
    56cc:	18fb      	adds	r3, r7, r3
    56ce:	22f7      	movs	r2, #247	; 0xf7
    56d0:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    56d2:	1dfb      	adds	r3, r7, #7
    56d4:	781b      	ldrb	r3, [r3, #0]
    56d6:	b25b      	sxtb	r3, r3
    56d8:	011a      	lsls	r2, r3, #4
    56da:	4b0b      	ldr	r3, [pc, #44]	; (5708 <close+0x130>)
    56dc:	18d3      	adds	r3, r2, r3
    56de:	2210      	movs	r2, #16
    56e0:	2100      	movs	r1, #0
    56e2:	0018      	movs	r0, r3
    56e4:	4b0a      	ldr	r3, [pc, #40]	; (5710 <close+0x138>)
    56e6:	4798      	blx	r3
	}
	return s8Ret;
    56e8:	230f      	movs	r3, #15
    56ea:	18fb      	adds	r3, r7, r3
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	b25b      	sxtb	r3, r3
}
    56f0:	0018      	movs	r0, r3
    56f2:	46bd      	mov	sp, r7
    56f4:	b004      	add	sp, #16
    56f6:	bdb0      	pop	{r4, r5, r7, pc}
    56f8:	000148cc 	.word	0x000148cc
    56fc:	0000efc9 	.word	0x0000efc9
    5700:	00014908 	.word	0x00014908
    5704:	0000effd 	.word	0x0000effd
    5708:	20000338 	.word	0x20000338
    570c:	00000e81 	.word	0x00000e81
    5710:	00000c21 	.word	0x00000c21

00005714 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    5714:	b580      	push	{r7, lr}
    5716:	b086      	sub	sp, #24
    5718:	af00      	add	r7, sp, #0
    571a:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    571c:	2300      	movs	r3, #0
    571e:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    5720:	2317      	movs	r3, #23
    5722:	18fb      	adds	r3, r7, r3
    5724:	2200      	movs	r2, #0
    5726:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    5728:	2316      	movs	r3, #22
    572a:	18fb      	adds	r3, r7, r3
    572c:	2200      	movs	r2, #0
    572e:	701a      	strb	r2, [r3, #0]
    5730:	e060      	b.n	57f4 <nmi_inet_addr+0xe0>
	{
		j = 0;
    5732:	2315      	movs	r3, #21
    5734:	18fb      	adds	r3, r7, r3
    5736:	2200      	movs	r2, #0
    5738:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    573a:	2314      	movs	r3, #20
    573c:	18fb      	adds	r3, r7, r3
    573e:	687a      	ldr	r2, [r7, #4]
    5740:	7812      	ldrb	r2, [r2, #0]
    5742:	701a      	strb	r2, [r3, #0]
			++j;
    5744:	2315      	movs	r3, #21
    5746:	18fb      	adds	r3, r7, r3
    5748:	2215      	movs	r2, #21
    574a:	18ba      	adds	r2, r7, r2
    574c:	7812      	ldrb	r2, [r2, #0]
    574e:	3201      	adds	r2, #1
    5750:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    5752:	2315      	movs	r3, #21
    5754:	18fb      	adds	r3, r7, r3
    5756:	781b      	ldrb	r3, [r3, #0]
    5758:	2b04      	cmp	r3, #4
    575a:	d901      	bls.n	5760 <nmi_inet_addr+0x4c>
			{
				return 0;
    575c:	2300      	movs	r3, #0
    575e:	e057      	b.n	5810 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    5760:	2314      	movs	r3, #20
    5762:	18fb      	adds	r3, r7, r3
    5764:	781b      	ldrb	r3, [r3, #0]
    5766:	2b2e      	cmp	r3, #46	; 0x2e
    5768:	d004      	beq.n	5774 <nmi_inet_addr+0x60>
    576a:	2314      	movs	r3, #20
    576c:	18fb      	adds	r3, r7, r3
    576e:	781b      	ldrb	r3, [r3, #0]
    5770:	2b00      	cmp	r3, #0
    5772:	d10d      	bne.n	5790 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    5774:	2316      	movs	r3, #22
    5776:	18fb      	adds	r3, r7, r3
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	220c      	movs	r2, #12
    577c:	18ba      	adds	r2, r7, r2
    577e:	2117      	movs	r1, #23
    5780:	1879      	adds	r1, r7, r1
    5782:	7809      	ldrb	r1, [r1, #0]
    5784:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    5786:	2317      	movs	r3, #23
    5788:	18fb      	adds	r3, r7, r3
    578a:	2200      	movs	r2, #0
    578c:	701a      	strb	r2, [r3, #0]
    578e:	e01d      	b.n	57cc <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    5790:	2314      	movs	r3, #20
    5792:	18fb      	adds	r3, r7, r3
    5794:	781b      	ldrb	r3, [r3, #0]
    5796:	2b2f      	cmp	r3, #47	; 0x2f
    5798:	d916      	bls.n	57c8 <nmi_inet_addr+0xb4>
    579a:	2314      	movs	r3, #20
    579c:	18fb      	adds	r3, r7, r3
    579e:	781b      	ldrb	r3, [r3, #0]
    57a0:	2b39      	cmp	r3, #57	; 0x39
    57a2:	d811      	bhi.n	57c8 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    57a4:	2317      	movs	r3, #23
    57a6:	18fb      	adds	r3, r7, r3
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	1c1a      	adds	r2, r3, #0
    57ac:	0092      	lsls	r2, r2, #2
    57ae:	18d3      	adds	r3, r2, r3
    57b0:	18db      	adds	r3, r3, r3
    57b2:	b2da      	uxtb	r2, r3
    57b4:	2314      	movs	r3, #20
    57b6:	18fb      	adds	r3, r7, r3
    57b8:	781b      	ldrb	r3, [r3, #0]
    57ba:	18d3      	adds	r3, r2, r3
    57bc:	b2da      	uxtb	r2, r3
    57be:	2317      	movs	r3, #23
    57c0:	18fb      	adds	r3, r7, r3
    57c2:	3a30      	subs	r2, #48	; 0x30
    57c4:	701a      	strb	r2, [r3, #0]
    57c6:	e001      	b.n	57cc <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    57c8:	2300      	movs	r3, #0
    57ca:	e021      	b.n	5810 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	3301      	adds	r3, #1
    57d0:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    57d2:	2314      	movs	r3, #20
    57d4:	18fb      	adds	r3, r7, r3
    57d6:	781b      	ldrb	r3, [r3, #0]
    57d8:	2b2e      	cmp	r3, #46	; 0x2e
    57da:	d004      	beq.n	57e6 <nmi_inet_addr+0xd2>
    57dc:	2314      	movs	r3, #20
    57de:	18fb      	adds	r3, r7, r3
    57e0:	781b      	ldrb	r3, [r3, #0]
    57e2:	2b00      	cmp	r3, #0
    57e4:	d1a9      	bne.n	573a <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    57e6:	2316      	movs	r3, #22
    57e8:	18fb      	adds	r3, r7, r3
    57ea:	2216      	movs	r2, #22
    57ec:	18ba      	adds	r2, r7, r2
    57ee:	7812      	ldrb	r2, [r2, #0]
    57f0:	3201      	adds	r2, #1
    57f2:	701a      	strb	r2, [r3, #0]
    57f4:	2316      	movs	r3, #22
    57f6:	18fb      	adds	r3, r7, r3
    57f8:	781b      	ldrb	r3, [r3, #0]
    57fa:	2b03      	cmp	r3, #3
    57fc:	d999      	bls.n	5732 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    57fe:	230c      	movs	r3, #12
    5800:	18f9      	adds	r1, r7, r3
    5802:	2310      	movs	r3, #16
    5804:	18fb      	adds	r3, r7, r3
    5806:	2204      	movs	r2, #4
    5808:	0018      	movs	r0, r3
    580a:	4b03      	ldr	r3, [pc, #12]	; (5818 <nmi_inet_addr+0x104>)
    580c:	4798      	blx	r3
	return u32IP;
    580e:	693b      	ldr	r3, [r7, #16]
}
    5810:	0018      	movs	r0, r3
    5812:	46bd      	mov	sp, r7
    5814:	b006      	add	sp, #24
    5816:	bd80      	pop	{r7, pc}
    5818:	00000be5 	.word	0x00000be5

0000581c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    581c:	b5b0      	push	{r4, r5, r7, lr}
    581e:	b088      	sub	sp, #32
    5820:	af04      	add	r7, sp, #16
    5822:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    5824:	230f      	movs	r3, #15
    5826:	18fb      	adds	r3, r7, r3
    5828:	22fa      	movs	r2, #250	; 0xfa
    582a:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    582c:	687b      	ldr	r3, [r7, #4]
    582e:	0018      	movs	r0, r3
    5830:	4b14      	ldr	r3, [pc, #80]	; (5884 <gethostbyname+0x68>)
    5832:	4798      	blx	r3
    5834:	0003      	movs	r3, r0
    5836:	001a      	movs	r2, r3
    5838:	230e      	movs	r3, #14
    583a:	18fb      	adds	r3, r7, r3
    583c:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    583e:	230e      	movs	r3, #14
    5840:	18fb      	adds	r3, r7, r3
    5842:	781b      	ldrb	r3, [r3, #0]
    5844:	2b40      	cmp	r3, #64	; 0x40
    5846:	d815      	bhi.n	5874 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    5848:	230e      	movs	r3, #14
    584a:	18fb      	adds	r3, r7, r3
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	b29b      	uxth	r3, r3
    5850:	3301      	adds	r3, #1
    5852:	b299      	uxth	r1, r3
    5854:	230f      	movs	r3, #15
    5856:	18fc      	adds	r4, r7, r3
    5858:	687a      	ldr	r2, [r7, #4]
    585a:	2300      	movs	r3, #0
    585c:	9302      	str	r3, [sp, #8]
    585e:	2300      	movs	r3, #0
    5860:	9301      	str	r3, [sp, #4]
    5862:	2300      	movs	r3, #0
    5864:	9300      	str	r3, [sp, #0]
    5866:	000b      	movs	r3, r1
    5868:	214a      	movs	r1, #74	; 0x4a
    586a:	2002      	movs	r0, #2
    586c:	4d06      	ldr	r5, [pc, #24]	; (5888 <gethostbyname+0x6c>)
    586e:	47a8      	blx	r5
    5870:	0003      	movs	r3, r0
    5872:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    5874:	230f      	movs	r3, #15
    5876:	18fb      	adds	r3, r7, r3
    5878:	781b      	ldrb	r3, [r3, #0]
    587a:	b25b      	sxtb	r3, r3
}
    587c:	0018      	movs	r0, r3
    587e:	46bd      	mov	sp, r7
    5880:	b004      	add	sp, #16
    5882:	bdb0      	pop	{r4, r5, r7, pc}
    5884:	00000c5f 	.word	0x00000c5f
    5888:	00000e81 	.word	0x00000e81

0000588c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    588c:	b580      	push	{r7, lr}
    588e:	b082      	sub	sp, #8
    5890:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5892:	003b      	movs	r3, r7
    5894:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	22b9      	movs	r2, #185	; 0xb9
    589a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    589c:	4b13      	ldr	r3, [pc, #76]	; (58ec <spi_flash_enter_low_power_mode+0x60>)
    589e:	2100      	movs	r1, #0
    58a0:	0018      	movs	r0, r3
    58a2:	4b13      	ldr	r3, [pc, #76]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58a4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	781b      	ldrb	r3, [r3, #0]
    58aa:	001a      	movs	r2, r3
    58ac:	4b11      	ldr	r3, [pc, #68]	; (58f4 <spi_flash_enter_low_power_mode+0x68>)
    58ae:	0011      	movs	r1, r2
    58b0:	0018      	movs	r0, r3
    58b2:	4b0f      	ldr	r3, [pc, #60]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58b4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    58b6:	4b10      	ldr	r3, [pc, #64]	; (58f8 <spi_flash_enter_low_power_mode+0x6c>)
    58b8:	2101      	movs	r1, #1
    58ba:	0018      	movs	r0, r3
    58bc:	4b0c      	ldr	r3, [pc, #48]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58be:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    58c0:	4b0e      	ldr	r3, [pc, #56]	; (58fc <spi_flash_enter_low_power_mode+0x70>)
    58c2:	2100      	movs	r1, #0
    58c4:	0018      	movs	r0, r3
    58c6:	4b0a      	ldr	r3, [pc, #40]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58c8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    58ca:	4b0d      	ldr	r3, [pc, #52]	; (5900 <spi_flash_enter_low_power_mode+0x74>)
    58cc:	2181      	movs	r1, #129	; 0x81
    58ce:	0018      	movs	r0, r3
    58d0:	4b07      	ldr	r3, [pc, #28]	; (58f0 <spi_flash_enter_low_power_mode+0x64>)
    58d2:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    58d4:	46c0      	nop			; (mov r8, r8)
    58d6:	4b0b      	ldr	r3, [pc, #44]	; (5904 <spi_flash_enter_low_power_mode+0x78>)
    58d8:	0018      	movs	r0, r3
    58da:	4b0b      	ldr	r3, [pc, #44]	; (5908 <spi_flash_enter_low_power_mode+0x7c>)
    58dc:	4798      	blx	r3
    58de:	0003      	movs	r3, r0
    58e0:	2b01      	cmp	r3, #1
    58e2:	d1f8      	bne.n	58d6 <spi_flash_enter_low_power_mode+0x4a>
}
    58e4:	46c0      	nop			; (mov r8, r8)
    58e6:	46bd      	mov	sp, r7
    58e8:	b002      	add	sp, #8
    58ea:	bd80      	pop	{r7, pc}
    58ec:	00010208 	.word	0x00010208
    58f0:	00002c81 	.word	0x00002c81
    58f4:	0001020c 	.word	0x0001020c
    58f8:	00010214 	.word	0x00010214
    58fc:	0001021c 	.word	0x0001021c
    5900:	00010204 	.word	0x00010204
    5904:	00010218 	.word	0x00010218
    5908:	00002c3d 	.word	0x00002c3d

0000590c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    590c:	b580      	push	{r7, lr}
    590e:	b082      	sub	sp, #8
    5910:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5912:	003b      	movs	r3, r7
    5914:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    5916:	687b      	ldr	r3, [r7, #4]
    5918:	22ab      	movs	r2, #171	; 0xab
    591a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    591c:	4b13      	ldr	r3, [pc, #76]	; (596c <spi_flash_leave_low_power_mode+0x60>)
    591e:	2100      	movs	r1, #0
    5920:	0018      	movs	r0, r3
    5922:	4b13      	ldr	r3, [pc, #76]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    5924:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	001a      	movs	r2, r3
    592c:	4b11      	ldr	r3, [pc, #68]	; (5974 <spi_flash_leave_low_power_mode+0x68>)
    592e:	0011      	movs	r1, r2
    5930:	0018      	movs	r0, r3
    5932:	4b0f      	ldr	r3, [pc, #60]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    5934:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5936:	4b10      	ldr	r3, [pc, #64]	; (5978 <spi_flash_leave_low_power_mode+0x6c>)
    5938:	2101      	movs	r1, #1
    593a:	0018      	movs	r0, r3
    593c:	4b0c      	ldr	r3, [pc, #48]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    593e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5940:	4b0e      	ldr	r3, [pc, #56]	; (597c <spi_flash_leave_low_power_mode+0x70>)
    5942:	2100      	movs	r1, #0
    5944:	0018      	movs	r0, r3
    5946:	4b0a      	ldr	r3, [pc, #40]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    5948:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    594a:	4b0d      	ldr	r3, [pc, #52]	; (5980 <spi_flash_leave_low_power_mode+0x74>)
    594c:	2181      	movs	r1, #129	; 0x81
    594e:	0018      	movs	r0, r3
    5950:	4b07      	ldr	r3, [pc, #28]	; (5970 <spi_flash_leave_low_power_mode+0x64>)
    5952:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5954:	46c0      	nop			; (mov r8, r8)
    5956:	4b0b      	ldr	r3, [pc, #44]	; (5984 <spi_flash_leave_low_power_mode+0x78>)
    5958:	0018      	movs	r0, r3
    595a:	4b0b      	ldr	r3, [pc, #44]	; (5988 <spi_flash_leave_low_power_mode+0x7c>)
    595c:	4798      	blx	r3
    595e:	0003      	movs	r3, r0
    5960:	2b01      	cmp	r3, #1
    5962:	d1f8      	bne.n	5956 <spi_flash_leave_low_power_mode+0x4a>
}
    5964:	46c0      	nop			; (mov r8, r8)
    5966:	46bd      	mov	sp, r7
    5968:	b002      	add	sp, #8
    596a:	bd80      	pop	{r7, pc}
    596c:	00010208 	.word	0x00010208
    5970:	00002c81 	.word	0x00002c81
    5974:	0001020c 	.word	0x0001020c
    5978:	00010214 	.word	0x00010214
    597c:	0001021c 	.word	0x0001021c
    5980:	00010204 	.word	0x00010204
    5984:	00010218 	.word	0x00010218
    5988:	00002c3d 	.word	0x00002c3d

0000598c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    598c:	b590      	push	{r4, r7, lr}
    598e:	b085      	sub	sp, #20
    5990:	af00      	add	r7, sp, #0
    5992:	0002      	movs	r2, r0
    5994:	1dfb      	adds	r3, r7, #7
    5996:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    5998:	230f      	movs	r3, #15
    599a:	18fb      	adds	r3, r7, r3
    599c:	2200      	movs	r2, #0
    599e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    59a0:	4b24      	ldr	r3, [pc, #144]	; (5a34 <spi_flash_enable+0xa8>)
    59a2:	4798      	blx	r3
    59a4:	0003      	movs	r3, r0
    59a6:	051b      	lsls	r3, r3, #20
    59a8:	0d1b      	lsrs	r3, r3, #20
    59aa:	4a23      	ldr	r2, [pc, #140]	; (5a38 <spi_flash_enable+0xac>)
    59ac:	4293      	cmp	r3, r2
    59ae:	d938      	bls.n	5a22 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    59b0:	230f      	movs	r3, #15
    59b2:	18fc      	adds	r4, r7, r3
    59b4:	2308      	movs	r3, #8
    59b6:	18fb      	adds	r3, r7, r3
    59b8:	4a20      	ldr	r2, [pc, #128]	; (5a3c <spi_flash_enable+0xb0>)
    59ba:	0019      	movs	r1, r3
    59bc:	0010      	movs	r0, r2
    59be:	4b20      	ldr	r3, [pc, #128]	; (5a40 <spi_flash_enable+0xb4>)
    59c0:	4798      	blx	r3
    59c2:	0003      	movs	r3, r0
    59c4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    59c6:	230f      	movs	r3, #15
    59c8:	18fb      	adds	r3, r7, r3
    59ca:	781b      	ldrb	r3, [r3, #0]
    59cc:	b25b      	sxtb	r3, r3
    59ce:	2b00      	cmp	r3, #0
    59d0:	d126      	bne.n	5a20 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    59d2:	68bb      	ldr	r3, [r7, #8]
    59d4:	4a1b      	ldr	r2, [pc, #108]	; (5a44 <spi_flash_enable+0xb8>)
    59d6:	4013      	ands	r3, r2
    59d8:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    59da:	68bb      	ldr	r3, [r7, #8]
    59dc:	4a1a      	ldr	r2, [pc, #104]	; (5a48 <spi_flash_enable+0xbc>)
    59de:	4313      	orrs	r3, r2
    59e0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    59e2:	68bb      	ldr	r3, [r7, #8]
    59e4:	4a15      	ldr	r2, [pc, #84]	; (5a3c <spi_flash_enable+0xb0>)
    59e6:	0019      	movs	r1, r3
    59e8:	0010      	movs	r0, r2
    59ea:	4b18      	ldr	r3, [pc, #96]	; (5a4c <spi_flash_enable+0xc0>)
    59ec:	4798      	blx	r3
		if(enable) {
    59ee:	1dfb      	adds	r3, r7, #7
    59f0:	781b      	ldrb	r3, [r3, #0]
    59f2:	2b00      	cmp	r3, #0
    59f4:	d002      	beq.n	59fc <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    59f6:	4b16      	ldr	r3, [pc, #88]	; (5a50 <spi_flash_enable+0xc4>)
    59f8:	4798      	blx	r3
    59fa:	e001      	b.n	5a00 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    59fc:	4b15      	ldr	r3, [pc, #84]	; (5a54 <spi_flash_enable+0xc8>)
    59fe:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5a00:	68bb      	ldr	r3, [r7, #8]
    5a02:	4a10      	ldr	r2, [pc, #64]	; (5a44 <spi_flash_enable+0xb8>)
    5a04:	4013      	ands	r3, r2
    5a06:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5a08:	68bb      	ldr	r3, [r7, #8]
    5a0a:	2280      	movs	r2, #128	; 0x80
    5a0c:	0252      	lsls	r2, r2, #9
    5a0e:	4313      	orrs	r3, r2
    5a10:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5a12:	68bb      	ldr	r3, [r7, #8]
    5a14:	4a09      	ldr	r2, [pc, #36]	; (5a3c <spi_flash_enable+0xb0>)
    5a16:	0019      	movs	r1, r3
    5a18:	0010      	movs	r0, r2
    5a1a:	4b0c      	ldr	r3, [pc, #48]	; (5a4c <spi_flash_enable+0xc0>)
    5a1c:	4798      	blx	r3
    5a1e:	e000      	b.n	5a22 <spi_flash_enable+0x96>
			goto ERR1;
    5a20:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    5a22:	230f      	movs	r3, #15
    5a24:	18fb      	adds	r3, r7, r3
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	b25b      	sxtb	r3, r3
}
    5a2a:	0018      	movs	r0, r3
    5a2c:	46bd      	mov	sp, r7
    5a2e:	b005      	add	sp, #20
    5a30:	bd90      	pop	{r4, r7, pc}
    5a32:	46c0      	nop			; (mov r8, r8)
    5a34:	00002561 	.word	0x00002561
    5a38:	0000039f 	.word	0x0000039f
    5a3c:	00001410 	.word	0x00001410
    5a40:	00002c5d 	.word	0x00002c5d
    5a44:	f8888fff 	.word	0xf8888fff
    5a48:	01111000 	.word	0x01111000
    5a4c:	00002c81 	.word	0x00002c81
    5a50:	0000590d 	.word	0x0000590d
    5a54:	0000588d 	.word	0x0000588d

00005a58 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5a58:	b580      	push	{r7, lr}
    5a5a:	b084      	sub	sp, #16
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	0002      	movs	r2, r0
    5a60:	1dfb      	adds	r3, r7, #7
    5a62:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5a64:	230f      	movs	r3, #15
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	1dfa      	adds	r2, r7, #7
    5a6a:	7812      	ldrb	r2, [r2, #0]
    5a6c:	0952      	lsrs	r2, r2, #5
    5a6e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5a70:	230f      	movs	r3, #15
    5a72:	18fb      	adds	r3, r7, r3
    5a74:	781b      	ldrb	r3, [r3, #0]
    5a76:	2b00      	cmp	r3, #0
    5a78:	d10c      	bne.n	5a94 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5a7a:	4b09      	ldr	r3, [pc, #36]	; (5aa0 <_extint_get_eic_from_channel+0x48>)
    5a7c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    5a7e:	230f      	movs	r3, #15
    5a80:	18fb      	adds	r3, r7, r3
    5a82:	781b      	ldrb	r3, [r3, #0]
    5a84:	009b      	lsls	r3, r3, #2
    5a86:	2210      	movs	r2, #16
    5a88:	4694      	mov	ip, r2
    5a8a:	44bc      	add	ip, r7
    5a8c:	4463      	add	r3, ip
    5a8e:	3b08      	subs	r3, #8
    5a90:	681b      	ldr	r3, [r3, #0]
    5a92:	e000      	b.n	5a96 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    5a94:	2300      	movs	r3, #0
	}
}
    5a96:	0018      	movs	r0, r3
    5a98:	46bd      	mov	sp, r7
    5a9a:	b004      	add	sp, #16
    5a9c:	bd80      	pop	{r7, pc}
    5a9e:	46c0      	nop			; (mov r8, r8)
    5aa0:	40001800 	.word	0x40001800

00005aa4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b084      	sub	sp, #16
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	0002      	movs	r2, r0
    5aac:	1dfb      	adds	r3, r7, #7
    5aae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5ab0:	1dfb      	adds	r3, r7, #7
    5ab2:	781b      	ldrb	r3, [r3, #0]
    5ab4:	0018      	movs	r0, r3
    5ab6:	4b0b      	ldr	r3, [pc, #44]	; (5ae4 <extint_chan_is_detected+0x40>)
    5ab8:	4798      	blx	r3
    5aba:	0003      	movs	r3, r0
    5abc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5abe:	1dfb      	adds	r3, r7, #7
    5ac0:	781b      	ldrb	r3, [r3, #0]
    5ac2:	221f      	movs	r2, #31
    5ac4:	4013      	ands	r3, r2
    5ac6:	2201      	movs	r2, #1
    5ac8:	409a      	lsls	r2, r3
    5aca:	0013      	movs	r3, r2
    5acc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	691b      	ldr	r3, [r3, #16]
    5ad2:	68ba      	ldr	r2, [r7, #8]
    5ad4:	4013      	ands	r3, r2
    5ad6:	1e5a      	subs	r2, r3, #1
    5ad8:	4193      	sbcs	r3, r2
    5ada:	b2db      	uxtb	r3, r3
}
    5adc:	0018      	movs	r0, r3
    5ade:	46bd      	mov	sp, r7
    5ae0:	b004      	add	sp, #16
    5ae2:	bd80      	pop	{r7, pc}
    5ae4:	00005a59 	.word	0x00005a59

00005ae8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b084      	sub	sp, #16
    5aec:	af00      	add	r7, sp, #0
    5aee:	0002      	movs	r2, r0
    5af0:	1dfb      	adds	r3, r7, #7
    5af2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5af4:	1dfb      	adds	r3, r7, #7
    5af6:	781b      	ldrb	r3, [r3, #0]
    5af8:	0018      	movs	r0, r3
    5afa:	4b09      	ldr	r3, [pc, #36]	; (5b20 <extint_chan_clear_detected+0x38>)
    5afc:	4798      	blx	r3
    5afe:	0003      	movs	r3, r0
    5b00:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5b02:	1dfb      	adds	r3, r7, #7
    5b04:	781b      	ldrb	r3, [r3, #0]
    5b06:	221f      	movs	r2, #31
    5b08:	4013      	ands	r3, r2
    5b0a:	2201      	movs	r2, #1
    5b0c:	409a      	lsls	r2, r3
    5b0e:	0013      	movs	r3, r2
    5b10:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    5b12:	68fb      	ldr	r3, [r7, #12]
    5b14:	68ba      	ldr	r2, [r7, #8]
    5b16:	611a      	str	r2, [r3, #16]
}
    5b18:	46c0      	nop			; (mov r8, r8)
    5b1a:	46bd      	mov	sp, r7
    5b1c:	b004      	add	sp, #16
    5b1e:	bd80      	pop	{r7, pc}
    5b20:	00005a59 	.word	0x00005a59

00005b24 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	b082      	sub	sp, #8
    5b28:	af00      	add	r7, sp, #0
    5b2a:	6078      	str	r0, [r7, #4]
    5b2c:	0008      	movs	r0, r1
    5b2e:	0011      	movs	r1, r2
    5b30:	1cfb      	adds	r3, r7, #3
    5b32:	1c02      	adds	r2, r0, #0
    5b34:	701a      	strb	r2, [r3, #0]
    5b36:	1cbb      	adds	r3, r7, #2
    5b38:	1c0a      	adds	r2, r1, #0
    5b3a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    5b3c:	1cbb      	adds	r3, r7, #2
    5b3e:	781b      	ldrb	r3, [r3, #0]
    5b40:	2b00      	cmp	r3, #0
    5b42:	d001      	beq.n	5b48 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5b44:	2317      	movs	r3, #23
    5b46:	e019      	b.n	5b7c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    5b48:	1cfb      	adds	r3, r7, #3
    5b4a:	781a      	ldrb	r2, [r3, #0]
    5b4c:	4b0d      	ldr	r3, [pc, #52]	; (5b84 <extint_register_callback+0x60>)
    5b4e:	0092      	lsls	r2, r2, #2
    5b50:	58d3      	ldr	r3, [r2, r3]
    5b52:	2b00      	cmp	r3, #0
    5b54:	d107      	bne.n	5b66 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    5b56:	1cfb      	adds	r3, r7, #3
    5b58:	781a      	ldrb	r2, [r3, #0]
    5b5a:	4b0a      	ldr	r3, [pc, #40]	; (5b84 <extint_register_callback+0x60>)
    5b5c:	0092      	lsls	r2, r2, #2
    5b5e:	6879      	ldr	r1, [r7, #4]
    5b60:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    5b62:	2300      	movs	r3, #0
    5b64:	e00a      	b.n	5b7c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    5b66:	1cfb      	adds	r3, r7, #3
    5b68:	781a      	ldrb	r2, [r3, #0]
    5b6a:	4b06      	ldr	r3, [pc, #24]	; (5b84 <extint_register_callback+0x60>)
    5b6c:	0092      	lsls	r2, r2, #2
    5b6e:	58d2      	ldr	r2, [r2, r3]
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	429a      	cmp	r2, r3
    5b74:	d101      	bne.n	5b7a <extint_register_callback+0x56>
		return STATUS_OK;
    5b76:	2300      	movs	r3, #0
    5b78:	e000      	b.n	5b7c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    5b7a:	231d      	movs	r3, #29
}
    5b7c:	0018      	movs	r0, r3
    5b7e:	46bd      	mov	sp, r7
    5b80:	b002      	add	sp, #8
    5b82:	bd80      	pop	{r7, pc}
    5b84:	200003f8 	.word	0x200003f8

00005b88 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	b084      	sub	sp, #16
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	0002      	movs	r2, r0
    5b90:	1dfb      	adds	r3, r7, #7
    5b92:	701a      	strb	r2, [r3, #0]
    5b94:	1dbb      	adds	r3, r7, #6
    5b96:	1c0a      	adds	r2, r1, #0
    5b98:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5b9a:	1dbb      	adds	r3, r7, #6
    5b9c:	781b      	ldrb	r3, [r3, #0]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d10e      	bne.n	5bc0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5ba2:	1dfb      	adds	r3, r7, #7
    5ba4:	781b      	ldrb	r3, [r3, #0]
    5ba6:	0018      	movs	r0, r3
    5ba8:	4b08      	ldr	r3, [pc, #32]	; (5bcc <extint_chan_enable_callback+0x44>)
    5baa:	4798      	blx	r3
    5bac:	0003      	movs	r3, r0
    5bae:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    5bb0:	1dfb      	adds	r3, r7, #7
    5bb2:	781b      	ldrb	r3, [r3, #0]
    5bb4:	2201      	movs	r2, #1
    5bb6:	409a      	lsls	r2, r3
    5bb8:	68fb      	ldr	r3, [r7, #12]
    5bba:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5bbc:	2300      	movs	r3, #0
    5bbe:	e000      	b.n	5bc2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5bc0:	2317      	movs	r3, #23
}
    5bc2:	0018      	movs	r0, r3
    5bc4:	46bd      	mov	sp, r7
    5bc6:	b004      	add	sp, #16
    5bc8:	bd80      	pop	{r7, pc}
    5bca:	46c0      	nop			; (mov r8, r8)
    5bcc:	00005a59 	.word	0x00005a59

00005bd0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	b084      	sub	sp, #16
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	0002      	movs	r2, r0
    5bd8:	1dfb      	adds	r3, r7, #7
    5bda:	701a      	strb	r2, [r3, #0]
    5bdc:	1dbb      	adds	r3, r7, #6
    5bde:	1c0a      	adds	r2, r1, #0
    5be0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5be2:	1dbb      	adds	r3, r7, #6
    5be4:	781b      	ldrb	r3, [r3, #0]
    5be6:	2b00      	cmp	r3, #0
    5be8:	d10e      	bne.n	5c08 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5bea:	1dfb      	adds	r3, r7, #7
    5bec:	781b      	ldrb	r3, [r3, #0]
    5bee:	0018      	movs	r0, r3
    5bf0:	4b08      	ldr	r3, [pc, #32]	; (5c14 <extint_chan_disable_callback+0x44>)
    5bf2:	4798      	blx	r3
    5bf4:	0003      	movs	r3, r0
    5bf6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    5bf8:	1dfb      	adds	r3, r7, #7
    5bfa:	781b      	ldrb	r3, [r3, #0]
    5bfc:	2201      	movs	r2, #1
    5bfe:	409a      	lsls	r2, r3
    5c00:	68fb      	ldr	r3, [r7, #12]
    5c02:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5c04:	2300      	movs	r3, #0
    5c06:	e000      	b.n	5c0a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5c08:	2317      	movs	r3, #23
}
    5c0a:	0018      	movs	r0, r3
    5c0c:	46bd      	mov	sp, r7
    5c0e:	b004      	add	sp, #16
    5c10:	bd80      	pop	{r7, pc}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	00005a59 	.word	0x00005a59

00005c18 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5c18:	b580      	push	{r7, lr}
    5c1a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5c1c:	4b15      	ldr	r3, [pc, #84]	; (5c74 <EIC_Handler+0x5c>)
    5c1e:	2200      	movs	r2, #0
    5c20:	701a      	strb	r2, [r3, #0]
    5c22:	e020      	b.n	5c66 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    5c24:	4b13      	ldr	r3, [pc, #76]	; (5c74 <EIC_Handler+0x5c>)
    5c26:	781b      	ldrb	r3, [r3, #0]
    5c28:	0018      	movs	r0, r3
    5c2a:	4b13      	ldr	r3, [pc, #76]	; (5c78 <EIC_Handler+0x60>)
    5c2c:	4798      	blx	r3
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d013      	beq.n	5c5a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    5c32:	4b10      	ldr	r3, [pc, #64]	; (5c74 <EIC_Handler+0x5c>)
    5c34:	781b      	ldrb	r3, [r3, #0]
    5c36:	0018      	movs	r0, r3
    5c38:	4b10      	ldr	r3, [pc, #64]	; (5c7c <EIC_Handler+0x64>)
    5c3a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5c3c:	4b0d      	ldr	r3, [pc, #52]	; (5c74 <EIC_Handler+0x5c>)
    5c3e:	781b      	ldrb	r3, [r3, #0]
    5c40:	001a      	movs	r2, r3
    5c42:	4b0f      	ldr	r3, [pc, #60]	; (5c80 <EIC_Handler+0x68>)
    5c44:	0092      	lsls	r2, r2, #2
    5c46:	58d3      	ldr	r3, [r2, r3]
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d006      	beq.n	5c5a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5c4c:	4b09      	ldr	r3, [pc, #36]	; (5c74 <EIC_Handler+0x5c>)
    5c4e:	781b      	ldrb	r3, [r3, #0]
    5c50:	001a      	movs	r2, r3
    5c52:	4b0b      	ldr	r3, [pc, #44]	; (5c80 <EIC_Handler+0x68>)
    5c54:	0092      	lsls	r2, r2, #2
    5c56:	58d3      	ldr	r3, [r2, r3]
    5c58:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5c5a:	4b06      	ldr	r3, [pc, #24]	; (5c74 <EIC_Handler+0x5c>)
    5c5c:	781b      	ldrb	r3, [r3, #0]
    5c5e:	3301      	adds	r3, #1
    5c60:	b2da      	uxtb	r2, r3
    5c62:	4b04      	ldr	r3, [pc, #16]	; (5c74 <EIC_Handler+0x5c>)
    5c64:	701a      	strb	r2, [r3, #0]
    5c66:	4b03      	ldr	r3, [pc, #12]	; (5c74 <EIC_Handler+0x5c>)
    5c68:	781b      	ldrb	r3, [r3, #0]
    5c6a:	2b0f      	cmp	r3, #15
    5c6c:	d9da      	bls.n	5c24 <EIC_Handler+0xc>
			}
		}
	}
}
    5c6e:	46c0      	nop			; (mov r8, r8)
    5c70:	46bd      	mov	sp, r7
    5c72:	bd80      	pop	{r7, pc}
    5c74:	200003f4 	.word	0x200003f4
    5c78:	00005aa5 	.word	0x00005aa5
    5c7c:	00005ae9 	.word	0x00005ae9
    5c80:	200003f8 	.word	0x200003f8

00005c84 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5c84:	b580      	push	{r7, lr}
    5c86:	b082      	sub	sp, #8
    5c88:	af00      	add	r7, sp, #0
    5c8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	2200      	movs	r2, #0
    5c90:	701a      	strb	r2, [r3, #0]
}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	46bd      	mov	sp, r7
    5c96:	b002      	add	sp, #8
    5c98:	bd80      	pop	{r7, pc}
	...

00005c9c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5c9c:	b580      	push	{r7, lr}
    5c9e:	b082      	sub	sp, #8
    5ca0:	af00      	add	r7, sp, #0
    5ca2:	0002      	movs	r2, r0
    5ca4:	6039      	str	r1, [r7, #0]
    5ca6:	1dfb      	adds	r3, r7, #7
    5ca8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5caa:	1dfb      	adds	r3, r7, #7
    5cac:	781b      	ldrb	r3, [r3, #0]
    5cae:	2b01      	cmp	r3, #1
    5cb0:	d00a      	beq.n	5cc8 <system_apb_clock_set_mask+0x2c>
    5cb2:	2b02      	cmp	r3, #2
    5cb4:	d00f      	beq.n	5cd6 <system_apb_clock_set_mask+0x3a>
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d114      	bne.n	5ce4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5cba:	4b0e      	ldr	r3, [pc, #56]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cbc:	4a0d      	ldr	r2, [pc, #52]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cbe:	6991      	ldr	r1, [r2, #24]
    5cc0:	683a      	ldr	r2, [r7, #0]
    5cc2:	430a      	orrs	r2, r1
    5cc4:	619a      	str	r2, [r3, #24]
			break;
    5cc6:	e00f      	b.n	5ce8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5cc8:	4b0a      	ldr	r3, [pc, #40]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cca:	4a0a      	ldr	r2, [pc, #40]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5ccc:	69d1      	ldr	r1, [r2, #28]
    5cce:	683a      	ldr	r2, [r7, #0]
    5cd0:	430a      	orrs	r2, r1
    5cd2:	61da      	str	r2, [r3, #28]
			break;
    5cd4:	e008      	b.n	5ce8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5cd6:	4b07      	ldr	r3, [pc, #28]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cd8:	4a06      	ldr	r2, [pc, #24]	; (5cf4 <system_apb_clock_set_mask+0x58>)
    5cda:	6a11      	ldr	r1, [r2, #32]
    5cdc:	683a      	ldr	r2, [r7, #0]
    5cde:	430a      	orrs	r2, r1
    5ce0:	621a      	str	r2, [r3, #32]
			break;
    5ce2:	e001      	b.n	5ce8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5ce4:	2317      	movs	r3, #23
    5ce6:	e000      	b.n	5cea <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5ce8:	2300      	movs	r3, #0
}
    5cea:	0018      	movs	r0, r3
    5cec:	46bd      	mov	sp, r7
    5cee:	b002      	add	sp, #8
    5cf0:	bd80      	pop	{r7, pc}
    5cf2:	46c0      	nop			; (mov r8, r8)
    5cf4:	40000400 	.word	0x40000400

00005cf8 <system_pinmux_get_config_defaults>:
{
    5cf8:	b580      	push	{r7, lr}
    5cfa:	b082      	sub	sp, #8
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	2280      	movs	r2, #128	; 0x80
    5d04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d06:	687b      	ldr	r3, [r7, #4]
    5d08:	2200      	movs	r2, #0
    5d0a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d0c:	687b      	ldr	r3, [r7, #4]
    5d0e:	2201      	movs	r2, #1
    5d10:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	2200      	movs	r2, #0
    5d16:	70da      	strb	r2, [r3, #3]
}
    5d18:	46c0      	nop			; (mov r8, r8)
    5d1a:	46bd      	mov	sp, r7
    5d1c:	b002      	add	sp, #8
    5d1e:	bd80      	pop	{r7, pc}

00005d20 <system_interrupt_enable>:
{
    5d20:	b580      	push	{r7, lr}
    5d22:	b082      	sub	sp, #8
    5d24:	af00      	add	r7, sp, #0
    5d26:	0002      	movs	r2, r0
    5d28:	1dfb      	adds	r3, r7, #7
    5d2a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5d2c:	4b06      	ldr	r3, [pc, #24]	; (5d48 <system_interrupt_enable+0x28>)
    5d2e:	1dfa      	adds	r2, r7, #7
    5d30:	7812      	ldrb	r2, [r2, #0]
    5d32:	0011      	movs	r1, r2
    5d34:	221f      	movs	r2, #31
    5d36:	400a      	ands	r2, r1
    5d38:	2101      	movs	r1, #1
    5d3a:	4091      	lsls	r1, r2
    5d3c:	000a      	movs	r2, r1
    5d3e:	601a      	str	r2, [r3, #0]
}
    5d40:	46c0      	nop			; (mov r8, r8)
    5d42:	46bd      	mov	sp, r7
    5d44:	b002      	add	sp, #8
    5d46:	bd80      	pop	{r7, pc}
    5d48:	e000e100 	.word	0xe000e100

00005d4c <_extint_get_eic_from_channel>:
{
    5d4c:	b580      	push	{r7, lr}
    5d4e:	b084      	sub	sp, #16
    5d50:	af00      	add	r7, sp, #0
    5d52:	0002      	movs	r2, r0
    5d54:	1dfb      	adds	r3, r7, #7
    5d56:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5d58:	230f      	movs	r3, #15
    5d5a:	18fb      	adds	r3, r7, r3
    5d5c:	1dfa      	adds	r2, r7, #7
    5d5e:	7812      	ldrb	r2, [r2, #0]
    5d60:	0952      	lsrs	r2, r2, #5
    5d62:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    5d64:	230f      	movs	r3, #15
    5d66:	18fb      	adds	r3, r7, r3
    5d68:	781b      	ldrb	r3, [r3, #0]
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d10c      	bne.n	5d88 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5d6e:	4b09      	ldr	r3, [pc, #36]	; (5d94 <_extint_get_eic_from_channel+0x48>)
    5d70:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    5d72:	230f      	movs	r3, #15
    5d74:	18fb      	adds	r3, r7, r3
    5d76:	781b      	ldrb	r3, [r3, #0]
    5d78:	009b      	lsls	r3, r3, #2
    5d7a:	2210      	movs	r2, #16
    5d7c:	4694      	mov	ip, r2
    5d7e:	44bc      	add	ip, r7
    5d80:	4463      	add	r3, ip
    5d82:	3b08      	subs	r3, #8
    5d84:	681b      	ldr	r3, [r3, #0]
    5d86:	e000      	b.n	5d8a <_extint_get_eic_from_channel+0x3e>
		return NULL;
    5d88:	2300      	movs	r3, #0
}
    5d8a:	0018      	movs	r0, r3
    5d8c:	46bd      	mov	sp, r7
    5d8e:	b004      	add	sp, #16
    5d90:	bd80      	pop	{r7, pc}
    5d92:	46c0      	nop			; (mov r8, r8)
    5d94:	40001800 	.word	0x40001800

00005d98 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b082      	sub	sp, #8
    5d9c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5d9e:	4b0f      	ldr	r3, [pc, #60]	; (5ddc <extint_is_syncing+0x44>)
    5da0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5da2:	2300      	movs	r3, #0
    5da4:	607b      	str	r3, [r7, #4]
    5da6:	e011      	b.n	5dcc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	009b      	lsls	r3, r3, #2
    5dac:	2208      	movs	r2, #8
    5dae:	4694      	mov	ip, r2
    5db0:	44bc      	add	ip, r7
    5db2:	4463      	add	r3, ip
    5db4:	3b08      	subs	r3, #8
    5db6:	681b      	ldr	r3, [r3, #0]
    5db8:	785b      	ldrb	r3, [r3, #1]
    5dba:	b2db      	uxtb	r3, r3
    5dbc:	b25b      	sxtb	r3, r3
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	da01      	bge.n	5dc6 <extint_is_syncing+0x2e>
			return true;
    5dc2:	2301      	movs	r3, #1
    5dc4:	e006      	b.n	5dd4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5dc6:	687b      	ldr	r3, [r7, #4]
    5dc8:	3301      	adds	r3, #1
    5dca:	607b      	str	r3, [r7, #4]
    5dcc:	687b      	ldr	r3, [r7, #4]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d0ea      	beq.n	5da8 <extint_is_syncing+0x10>
		}
	}
	return false;
    5dd2:	2300      	movs	r3, #0
}
    5dd4:	0018      	movs	r0, r3
    5dd6:	46bd      	mov	sp, r7
    5dd8:	b002      	add	sp, #8
    5dda:	bd80      	pop	{r7, pc}
    5ddc:	40001800 	.word	0x40001800

00005de0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5de6:	4b2d      	ldr	r3, [pc, #180]	; (5e9c <_system_extint_init+0xbc>)
    5de8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    5dea:	2140      	movs	r1, #64	; 0x40
    5dec:	2000      	movs	r0, #0
    5dee:	4b2c      	ldr	r3, [pc, #176]	; (5ea0 <_system_extint_init+0xc0>)
    5df0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5df2:	003b      	movs	r3, r7
    5df4:	0018      	movs	r0, r3
    5df6:	4b2b      	ldr	r3, [pc, #172]	; (5ea4 <_system_extint_init+0xc4>)
    5df8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    5dfa:	003b      	movs	r3, r7
    5dfc:	2200      	movs	r2, #0
    5dfe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    5e00:	003b      	movs	r3, r7
    5e02:	0019      	movs	r1, r3
    5e04:	2005      	movs	r0, #5
    5e06:	4b28      	ldr	r3, [pc, #160]	; (5ea8 <_system_extint_init+0xc8>)
    5e08:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    5e0a:	2005      	movs	r0, #5
    5e0c:	4b27      	ldr	r3, [pc, #156]	; (5eac <_system_extint_init+0xcc>)
    5e0e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5e10:	2300      	movs	r3, #0
    5e12:	60fb      	str	r3, [r7, #12]
    5e14:	e018      	b.n	5e48 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5e16:	68fb      	ldr	r3, [r7, #12]
    5e18:	009b      	lsls	r3, r3, #2
    5e1a:	2210      	movs	r2, #16
    5e1c:	4694      	mov	ip, r2
    5e1e:	44bc      	add	ip, r7
    5e20:	4463      	add	r3, ip
    5e22:	3b0c      	subs	r3, #12
    5e24:	681a      	ldr	r2, [r3, #0]
    5e26:	68fb      	ldr	r3, [r7, #12]
    5e28:	009b      	lsls	r3, r3, #2
    5e2a:	2110      	movs	r1, #16
    5e2c:	468c      	mov	ip, r1
    5e2e:	44bc      	add	ip, r7
    5e30:	4463      	add	r3, ip
    5e32:	3b0c      	subs	r3, #12
    5e34:	681b      	ldr	r3, [r3, #0]
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	b2db      	uxtb	r3, r3
    5e3a:	2101      	movs	r1, #1
    5e3c:	430b      	orrs	r3, r1
    5e3e:	b2db      	uxtb	r3, r3
    5e40:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5e42:	68fb      	ldr	r3, [r7, #12]
    5e44:	3301      	adds	r3, #1
    5e46:	60fb      	str	r3, [r7, #12]
    5e48:	68fb      	ldr	r3, [r7, #12]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d0e3      	beq.n	5e16 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    5e4e:	46c0      	nop			; (mov r8, r8)
    5e50:	4b17      	ldr	r3, [pc, #92]	; (5eb0 <_system_extint_init+0xd0>)
    5e52:	4798      	blx	r3
    5e54:	1e03      	subs	r3, r0, #0
    5e56:	d1fb      	bne.n	5e50 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5e58:	230b      	movs	r3, #11
    5e5a:	18fb      	adds	r3, r7, r3
    5e5c:	2200      	movs	r2, #0
    5e5e:	701a      	strb	r2, [r3, #0]
    5e60:	e00d      	b.n	5e7e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    5e62:	230b      	movs	r3, #11
    5e64:	18fb      	adds	r3, r7, r3
    5e66:	781a      	ldrb	r2, [r3, #0]
    5e68:	4b12      	ldr	r3, [pc, #72]	; (5eb4 <_system_extint_init+0xd4>)
    5e6a:	0092      	lsls	r2, r2, #2
    5e6c:	2100      	movs	r1, #0
    5e6e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5e70:	230b      	movs	r3, #11
    5e72:	18fb      	adds	r3, r7, r3
    5e74:	781a      	ldrb	r2, [r3, #0]
    5e76:	230b      	movs	r3, #11
    5e78:	18fb      	adds	r3, r7, r3
    5e7a:	3201      	adds	r2, #1
    5e7c:	701a      	strb	r2, [r3, #0]
    5e7e:	230b      	movs	r3, #11
    5e80:	18fb      	adds	r3, r7, r3
    5e82:	781b      	ldrb	r3, [r3, #0]
    5e84:	2b0f      	cmp	r3, #15
    5e86:	d9ec      	bls.n	5e62 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    5e88:	2004      	movs	r0, #4
    5e8a:	4b0b      	ldr	r3, [pc, #44]	; (5eb8 <_system_extint_init+0xd8>)
    5e8c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    5e8e:	4b0b      	ldr	r3, [pc, #44]	; (5ebc <_system_extint_init+0xdc>)
    5e90:	4798      	blx	r3
}
    5e92:	46c0      	nop			; (mov r8, r8)
    5e94:	46bd      	mov	sp, r7
    5e96:	b004      	add	sp, #16
    5e98:	bd80      	pop	{r7, pc}
    5e9a:	46c0      	nop			; (mov r8, r8)
    5e9c:	40001800 	.word	0x40001800
    5ea0:	00005c9d 	.word	0x00005c9d
    5ea4:	00005c85 	.word	0x00005c85
    5ea8:	0000c419 	.word	0x0000c419
    5eac:	0000c45d 	.word	0x0000c45d
    5eb0:	00005d99 	.word	0x00005d99
    5eb4:	200003f8 	.word	0x200003f8
    5eb8:	00005d21 	.word	0x00005d21
    5ebc:	00005ec1 	.word	0x00005ec1

00005ec0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    5ec0:	b580      	push	{r7, lr}
    5ec2:	b082      	sub	sp, #8
    5ec4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5ec6:	4b15      	ldr	r3, [pc, #84]	; (5f1c <_extint_enable+0x5c>)
    5ec8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5eca:	2300      	movs	r3, #0
    5ecc:	607b      	str	r3, [r7, #4]
    5ece:	e018      	b.n	5f02 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	009b      	lsls	r3, r3, #2
    5ed4:	2208      	movs	r2, #8
    5ed6:	4694      	mov	ip, r2
    5ed8:	44bc      	add	ip, r7
    5eda:	4463      	add	r3, ip
    5edc:	3b08      	subs	r3, #8
    5ede:	681a      	ldr	r2, [r3, #0]
    5ee0:	687b      	ldr	r3, [r7, #4]
    5ee2:	009b      	lsls	r3, r3, #2
    5ee4:	2108      	movs	r1, #8
    5ee6:	468c      	mov	ip, r1
    5ee8:	44bc      	add	ip, r7
    5eea:	4463      	add	r3, ip
    5eec:	3b08      	subs	r3, #8
    5eee:	681b      	ldr	r3, [r3, #0]
    5ef0:	781b      	ldrb	r3, [r3, #0]
    5ef2:	b2db      	uxtb	r3, r3
    5ef4:	2102      	movs	r1, #2
    5ef6:	430b      	orrs	r3, r1
    5ef8:	b2db      	uxtb	r3, r3
    5efa:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5efc:	687b      	ldr	r3, [r7, #4]
    5efe:	3301      	adds	r3, #1
    5f00:	607b      	str	r3, [r7, #4]
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	2b00      	cmp	r3, #0
    5f06:	d0e3      	beq.n	5ed0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    5f08:	46c0      	nop			; (mov r8, r8)
    5f0a:	4b05      	ldr	r3, [pc, #20]	; (5f20 <_extint_enable+0x60>)
    5f0c:	4798      	blx	r3
    5f0e:	1e03      	subs	r3, r0, #0
    5f10:	d1fb      	bne.n	5f0a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	46bd      	mov	sp, r7
    5f16:	b002      	add	sp, #8
    5f18:	bd80      	pop	{r7, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	40001800 	.word	0x40001800
    5f20:	00005d99 	.word	0x00005d99

00005f24 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    5f24:	b580      	push	{r7, lr}
    5f26:	b082      	sub	sp, #8
    5f28:	af00      	add	r7, sp, #0
    5f2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	2200      	movs	r2, #0
    5f30:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    5f32:	687b      	ldr	r3, [r7, #4]
    5f34:	2200      	movs	r2, #0
    5f36:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	2201      	movs	r2, #1
    5f3c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    5f3e:	687b      	ldr	r3, [r7, #4]
    5f40:	2201      	movs	r2, #1
    5f42:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	2200      	movs	r2, #0
    5f48:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    5f4a:	687b      	ldr	r3, [r7, #4]
    5f4c:	2202      	movs	r2, #2
    5f4e:	72da      	strb	r2, [r3, #11]
}
    5f50:	46c0      	nop			; (mov r8, r8)
    5f52:	46bd      	mov	sp, r7
    5f54:	b002      	add	sp, #8
    5f56:	bd80      	pop	{r7, pc}

00005f58 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    5f58:	b580      	push	{r7, lr}
    5f5a:	b086      	sub	sp, #24
    5f5c:	af00      	add	r7, sp, #0
    5f5e:	0002      	movs	r2, r0
    5f60:	6039      	str	r1, [r7, #0]
    5f62:	1dfb      	adds	r3, r7, #7
    5f64:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    5f66:	2308      	movs	r3, #8
    5f68:	18fb      	adds	r3, r7, r3
    5f6a:	0018      	movs	r0, r3
    5f6c:	4b36      	ldr	r3, [pc, #216]	; (6048 <extint_chan_set_config+0xf0>)
    5f6e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	685b      	ldr	r3, [r3, #4]
    5f74:	b2da      	uxtb	r2, r3
    5f76:	2308      	movs	r3, #8
    5f78:	18fb      	adds	r3, r7, r3
    5f7a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5f7c:	2308      	movs	r3, #8
    5f7e:	18fb      	adds	r3, r7, r3
    5f80:	2200      	movs	r2, #0
    5f82:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    5f84:	683b      	ldr	r3, [r7, #0]
    5f86:	7a1a      	ldrb	r2, [r3, #8]
    5f88:	2308      	movs	r3, #8
    5f8a:	18fb      	adds	r3, r7, r3
    5f8c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    5f8e:	683b      	ldr	r3, [r7, #0]
    5f90:	681b      	ldr	r3, [r3, #0]
    5f92:	b2db      	uxtb	r3, r3
    5f94:	2208      	movs	r2, #8
    5f96:	18ba      	adds	r2, r7, r2
    5f98:	0011      	movs	r1, r2
    5f9a:	0018      	movs	r0, r3
    5f9c:	4b2b      	ldr	r3, [pc, #172]	; (604c <extint_chan_set_config+0xf4>)
    5f9e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    5fa0:	1dfb      	adds	r3, r7, #7
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	0018      	movs	r0, r3
    5fa6:	4b2a      	ldr	r3, [pc, #168]	; (6050 <extint_chan_set_config+0xf8>)
    5fa8:	4798      	blx	r3
    5faa:	0003      	movs	r3, r0
    5fac:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    5fae:	1dfb      	adds	r3, r7, #7
    5fb0:	781b      	ldrb	r3, [r3, #0]
    5fb2:	2207      	movs	r2, #7
    5fb4:	4013      	ands	r3, r2
    5fb6:	009b      	lsls	r3, r3, #2
    5fb8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    5fba:	683b      	ldr	r3, [r7, #0]
    5fbc:	7adb      	ldrb	r3, [r3, #11]
    5fbe:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    5fc0:	683b      	ldr	r3, [r7, #0]
    5fc2:	7a9b      	ldrb	r3, [r3, #10]
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d003      	beq.n	5fd0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    5fc8:	697b      	ldr	r3, [r7, #20]
    5fca:	2208      	movs	r2, #8
    5fcc:	4313      	orrs	r3, r2
    5fce:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    5fd0:	1dfb      	adds	r3, r7, #7
    5fd2:	781b      	ldrb	r3, [r3, #0]
    5fd4:	08db      	lsrs	r3, r3, #3
    5fd6:	b2db      	uxtb	r3, r3
    5fd8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    5fda:	1dfb      	adds	r3, r7, #7
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	08db      	lsrs	r3, r3, #3
    5fe0:	b2db      	uxtb	r3, r3
    5fe2:	001a      	movs	r2, r3
    5fe4:	693b      	ldr	r3, [r7, #16]
    5fe6:	3206      	adds	r2, #6
    5fe8:	0092      	lsls	r2, r2, #2
    5fea:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    5fec:	210f      	movs	r1, #15
    5fee:	68fa      	ldr	r2, [r7, #12]
    5ff0:	4091      	lsls	r1, r2
    5ff2:	000a      	movs	r2, r1
    5ff4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    5ff6:	401a      	ands	r2, r3
			(new_config << config_pos);
    5ff8:	6979      	ldr	r1, [r7, #20]
    5ffa:	68fb      	ldr	r3, [r7, #12]
    5ffc:	4099      	lsls	r1, r3
    5ffe:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6000:	431a      	orrs	r2, r3
    6002:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6004:	693b      	ldr	r3, [r7, #16]
    6006:	1d82      	adds	r2, r0, #6
    6008:	0092      	lsls	r2, r2, #2
    600a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    600c:	683b      	ldr	r3, [r7, #0]
    600e:	7a5b      	ldrb	r3, [r3, #9]
    6010:	2b00      	cmp	r3, #0
    6012:	d00a      	beq.n	602a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    6014:	693b      	ldr	r3, [r7, #16]
    6016:	695a      	ldr	r2, [r3, #20]
    6018:	1dfb      	adds	r3, r7, #7
    601a:	781b      	ldrb	r3, [r3, #0]
    601c:	2101      	movs	r1, #1
    601e:	4099      	lsls	r1, r3
    6020:	000b      	movs	r3, r1
    6022:	431a      	orrs	r2, r3
    6024:	693b      	ldr	r3, [r7, #16]
    6026:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    6028:	e00a      	b.n	6040 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    602a:	693b      	ldr	r3, [r7, #16]
    602c:	695b      	ldr	r3, [r3, #20]
    602e:	1dfa      	adds	r2, r7, #7
    6030:	7812      	ldrb	r2, [r2, #0]
    6032:	2101      	movs	r1, #1
    6034:	4091      	lsls	r1, r2
    6036:	000a      	movs	r2, r1
    6038:	43d2      	mvns	r2, r2
    603a:	401a      	ands	r2, r3
    603c:	693b      	ldr	r3, [r7, #16]
    603e:	615a      	str	r2, [r3, #20]
}
    6040:	46c0      	nop			; (mov r8, r8)
    6042:	46bd      	mov	sp, r7
    6044:	b006      	add	sp, #24
    6046:	bd80      	pop	{r7, pc}
    6048:	00005cf9 	.word	0x00005cf9
    604c:	0000c705 	.word	0x0000c705
    6050:	00005d4d 	.word	0x00005d4d

00006054 <system_pinmux_get_config_defaults>:
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
    605a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    605c:	687b      	ldr	r3, [r7, #4]
    605e:	2280      	movs	r2, #128	; 0x80
    6060:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6062:	687b      	ldr	r3, [r7, #4]
    6064:	2200      	movs	r2, #0
    6066:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	2201      	movs	r2, #1
    606c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    606e:	687b      	ldr	r3, [r7, #4]
    6070:	2200      	movs	r2, #0
    6072:	70da      	strb	r2, [r3, #3]
}
    6074:	46c0      	nop			; (mov r8, r8)
    6076:	46bd      	mov	sp, r7
    6078:	b002      	add	sp, #8
    607a:	bd80      	pop	{r7, pc}

0000607c <system_pinmux_get_group_from_gpio_pin>:
{
    607c:	b580      	push	{r7, lr}
    607e:	b084      	sub	sp, #16
    6080:	af00      	add	r7, sp, #0
    6082:	0002      	movs	r2, r0
    6084:	1dfb      	adds	r3, r7, #7
    6086:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6088:	230f      	movs	r3, #15
    608a:	18fb      	adds	r3, r7, r3
    608c:	1dfa      	adds	r2, r7, #7
    608e:	7812      	ldrb	r2, [r2, #0]
    6090:	09d2      	lsrs	r2, r2, #7
    6092:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6094:	230e      	movs	r3, #14
    6096:	18fb      	adds	r3, r7, r3
    6098:	1dfa      	adds	r2, r7, #7
    609a:	7812      	ldrb	r2, [r2, #0]
    609c:	0952      	lsrs	r2, r2, #5
    609e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    60a0:	4b0d      	ldr	r3, [pc, #52]	; (60d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    60a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    60a4:	230f      	movs	r3, #15
    60a6:	18fb      	adds	r3, r7, r3
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d10f      	bne.n	60ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    60ae:	230f      	movs	r3, #15
    60b0:	18fb      	adds	r3, r7, r3
    60b2:	781b      	ldrb	r3, [r3, #0]
    60b4:	009b      	lsls	r3, r3, #2
    60b6:	2210      	movs	r2, #16
    60b8:	4694      	mov	ip, r2
    60ba:	44bc      	add	ip, r7
    60bc:	4463      	add	r3, ip
    60be:	3b08      	subs	r3, #8
    60c0:	681a      	ldr	r2, [r3, #0]
    60c2:	230e      	movs	r3, #14
    60c4:	18fb      	adds	r3, r7, r3
    60c6:	781b      	ldrb	r3, [r3, #0]
    60c8:	01db      	lsls	r3, r3, #7
    60ca:	18d3      	adds	r3, r2, r3
    60cc:	e000      	b.n	60d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    60ce:	2300      	movs	r3, #0
}
    60d0:	0018      	movs	r0, r3
    60d2:	46bd      	mov	sp, r7
    60d4:	b004      	add	sp, #16
    60d6:	bd80      	pop	{r7, pc}
    60d8:	41004400 	.word	0x41004400

000060dc <port_get_group_from_gpio_pin>:
{
    60dc:	b580      	push	{r7, lr}
    60de:	b082      	sub	sp, #8
    60e0:	af00      	add	r7, sp, #0
    60e2:	0002      	movs	r2, r0
    60e4:	1dfb      	adds	r3, r7, #7
    60e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    60e8:	1dfb      	adds	r3, r7, #7
    60ea:	781b      	ldrb	r3, [r3, #0]
    60ec:	0018      	movs	r0, r3
    60ee:	4b03      	ldr	r3, [pc, #12]	; (60fc <port_get_group_from_gpio_pin+0x20>)
    60f0:	4798      	blx	r3
    60f2:	0003      	movs	r3, r0
}
    60f4:	0018      	movs	r0, r3
    60f6:	46bd      	mov	sp, r7
    60f8:	b002      	add	sp, #8
    60fa:	bd80      	pop	{r7, pc}
    60fc:	0000607d 	.word	0x0000607d

00006100 <port_pin_set_output_level>:
{
    6100:	b580      	push	{r7, lr}
    6102:	b084      	sub	sp, #16
    6104:	af00      	add	r7, sp, #0
    6106:	0002      	movs	r2, r0
    6108:	1dfb      	adds	r3, r7, #7
    610a:	701a      	strb	r2, [r3, #0]
    610c:	1dbb      	adds	r3, r7, #6
    610e:	1c0a      	adds	r2, r1, #0
    6110:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6112:	1dfb      	adds	r3, r7, #7
    6114:	781b      	ldrb	r3, [r3, #0]
    6116:	0018      	movs	r0, r3
    6118:	4b0d      	ldr	r3, [pc, #52]	; (6150 <port_pin_set_output_level+0x50>)
    611a:	4798      	blx	r3
    611c:	0003      	movs	r3, r0
    611e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6120:	1dfb      	adds	r3, r7, #7
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	221f      	movs	r2, #31
    6126:	4013      	ands	r3, r2
    6128:	2201      	movs	r2, #1
    612a:	409a      	lsls	r2, r3
    612c:	0013      	movs	r3, r2
    612e:	60bb      	str	r3, [r7, #8]
	if (level) {
    6130:	1dbb      	adds	r3, r7, #6
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	2b00      	cmp	r3, #0
    6136:	d003      	beq.n	6140 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6138:	68fb      	ldr	r3, [r7, #12]
    613a:	68ba      	ldr	r2, [r7, #8]
    613c:	619a      	str	r2, [r3, #24]
}
    613e:	e002      	b.n	6146 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6140:	68fb      	ldr	r3, [r7, #12]
    6142:	68ba      	ldr	r2, [r7, #8]
    6144:	615a      	str	r2, [r3, #20]
}
    6146:	46c0      	nop			; (mov r8, r8)
    6148:	46bd      	mov	sp, r7
    614a:	b004      	add	sp, #16
    614c:	bd80      	pop	{r7, pc}
    614e:	46c0      	nop			; (mov r8, r8)
    6150:	000060dd 	.word	0x000060dd

00006154 <system_gclk_chan_get_config_defaults>:
{
    6154:	b580      	push	{r7, lr}
    6156:	b082      	sub	sp, #8
    6158:	af00      	add	r7, sp, #0
    615a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	2200      	movs	r2, #0
    6160:	701a      	strb	r2, [r3, #0]
}
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	46bd      	mov	sp, r7
    6166:	b002      	add	sp, #8
    6168:	bd80      	pop	{r7, pc}
	...

0000616c <system_apb_clock_set_mask>:
{
    616c:	b580      	push	{r7, lr}
    616e:	b082      	sub	sp, #8
    6170:	af00      	add	r7, sp, #0
    6172:	0002      	movs	r2, r0
    6174:	6039      	str	r1, [r7, #0]
    6176:	1dfb      	adds	r3, r7, #7
    6178:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    617a:	1dfb      	adds	r3, r7, #7
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	2b01      	cmp	r3, #1
    6180:	d00a      	beq.n	6198 <system_apb_clock_set_mask+0x2c>
    6182:	2b02      	cmp	r3, #2
    6184:	d00f      	beq.n	61a6 <system_apb_clock_set_mask+0x3a>
    6186:	2b00      	cmp	r3, #0
    6188:	d114      	bne.n	61b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    618a:	4b0e      	ldr	r3, [pc, #56]	; (61c4 <system_apb_clock_set_mask+0x58>)
    618c:	4a0d      	ldr	r2, [pc, #52]	; (61c4 <system_apb_clock_set_mask+0x58>)
    618e:	6991      	ldr	r1, [r2, #24]
    6190:	683a      	ldr	r2, [r7, #0]
    6192:	430a      	orrs	r2, r1
    6194:	619a      	str	r2, [r3, #24]
			break;
    6196:	e00f      	b.n	61b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6198:	4b0a      	ldr	r3, [pc, #40]	; (61c4 <system_apb_clock_set_mask+0x58>)
    619a:	4a0a      	ldr	r2, [pc, #40]	; (61c4 <system_apb_clock_set_mask+0x58>)
    619c:	69d1      	ldr	r1, [r2, #28]
    619e:	683a      	ldr	r2, [r7, #0]
    61a0:	430a      	orrs	r2, r1
    61a2:	61da      	str	r2, [r3, #28]
			break;
    61a4:	e008      	b.n	61b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    61a6:	4b07      	ldr	r3, [pc, #28]	; (61c4 <system_apb_clock_set_mask+0x58>)
    61a8:	4a06      	ldr	r2, [pc, #24]	; (61c4 <system_apb_clock_set_mask+0x58>)
    61aa:	6a11      	ldr	r1, [r2, #32]
    61ac:	683a      	ldr	r2, [r7, #0]
    61ae:	430a      	orrs	r2, r1
    61b0:	621a      	str	r2, [r3, #32]
			break;
    61b2:	e001      	b.n	61b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    61b4:	2317      	movs	r3, #23
    61b6:	e000      	b.n	61ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    61b8:	2300      	movs	r3, #0
}
    61ba:	0018      	movs	r0, r3
    61bc:	46bd      	mov	sp, r7
    61be:	b002      	add	sp, #8
    61c0:	bd80      	pop	{r7, pc}
    61c2:	46c0      	nop			; (mov r8, r8)
    61c4:	40000400 	.word	0x40000400

000061c8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    61c8:	b580      	push	{r7, lr}
    61ca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    61cc:	4b05      	ldr	r3, [pc, #20]	; (61e4 <system_is_debugger_present+0x1c>)
    61ce:	789b      	ldrb	r3, [r3, #2]
    61d0:	b2db      	uxtb	r3, r3
    61d2:	001a      	movs	r2, r3
    61d4:	2302      	movs	r3, #2
    61d6:	4013      	ands	r3, r2
    61d8:	1e5a      	subs	r2, r3, #1
    61da:	4193      	sbcs	r3, r2
    61dc:	b2db      	uxtb	r3, r3
}
    61de:	0018      	movs	r0, r3
    61e0:	46bd      	mov	sp, r7
    61e2:	bd80      	pop	{r7, pc}
    61e4:	41002000 	.word	0x41002000

000061e8 <spi_is_ready_to_write>:
{
    61e8:	b580      	push	{r7, lr}
    61ea:	b084      	sub	sp, #16
    61ec:	af00      	add	r7, sp, #0
    61ee:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	681b      	ldr	r3, [r3, #0]
    61f4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    61f6:	68fb      	ldr	r3, [r7, #12]
    61f8:	7e1b      	ldrb	r3, [r3, #24]
    61fa:	b2db      	uxtb	r3, r3
    61fc:	001a      	movs	r2, r3
    61fe:	2301      	movs	r3, #1
    6200:	4013      	ands	r3, r2
    6202:	1e5a      	subs	r2, r3, #1
    6204:	4193      	sbcs	r3, r2
    6206:	b2db      	uxtb	r3, r3
}
    6208:	0018      	movs	r0, r3
    620a:	46bd      	mov	sp, r7
    620c:	b004      	add	sp, #16
    620e:	bd80      	pop	{r7, pc}

00006210 <spi_is_ready_to_read>:
{
    6210:	b580      	push	{r7, lr}
    6212:	b084      	sub	sp, #16
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	681b      	ldr	r3, [r3, #0]
    621c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    621e:	68fb      	ldr	r3, [r7, #12]
    6220:	7e1b      	ldrb	r3, [r3, #24]
    6222:	b2db      	uxtb	r3, r3
    6224:	001a      	movs	r2, r3
    6226:	2304      	movs	r3, #4
    6228:	4013      	ands	r3, r2
    622a:	1e5a      	subs	r2, r3, #1
    622c:	4193      	sbcs	r3, r2
    622e:	b2db      	uxtb	r3, r3
}
    6230:	0018      	movs	r0, r3
    6232:	46bd      	mov	sp, r7
    6234:	b004      	add	sp, #16
    6236:	bd80      	pop	{r7, pc}

00006238 <spi_write>:
{
    6238:	b580      	push	{r7, lr}
    623a:	b084      	sub	sp, #16
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	000a      	movs	r2, r1
    6242:	1cbb      	adds	r3, r7, #2
    6244:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6246:	687b      	ldr	r3, [r7, #4]
    6248:	681b      	ldr	r3, [r3, #0]
    624a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	0018      	movs	r0, r3
    6250:	4b0a      	ldr	r3, [pc, #40]	; (627c <spi_write+0x44>)
    6252:	4798      	blx	r3
    6254:	0003      	movs	r3, r0
    6256:	001a      	movs	r2, r3
    6258:	2301      	movs	r3, #1
    625a:	4053      	eors	r3, r2
    625c:	b2db      	uxtb	r3, r3
    625e:	2b00      	cmp	r3, #0
    6260:	d001      	beq.n	6266 <spi_write+0x2e>
		return STATUS_BUSY;
    6262:	2305      	movs	r3, #5
    6264:	e006      	b.n	6274 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6266:	1cbb      	adds	r3, r7, #2
    6268:	881b      	ldrh	r3, [r3, #0]
    626a:	05db      	lsls	r3, r3, #23
    626c:	0dda      	lsrs	r2, r3, #23
    626e:	68fb      	ldr	r3, [r7, #12]
    6270:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    6272:	2300      	movs	r3, #0
}
    6274:	0018      	movs	r0, r3
    6276:	46bd      	mov	sp, r7
    6278:	b004      	add	sp, #16
    627a:	bd80      	pop	{r7, pc}
    627c:	000061e9 	.word	0x000061e9

00006280 <spi_read>:
{
    6280:	b580      	push	{r7, lr}
    6282:	b084      	sub	sp, #16
    6284:	af00      	add	r7, sp, #0
    6286:	6078      	str	r0, [r7, #4]
    6288:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	681b      	ldr	r3, [r3, #0]
    628e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	0018      	movs	r0, r3
    6294:	4b1b      	ldr	r3, [pc, #108]	; (6304 <spi_read+0x84>)
    6296:	4798      	blx	r3
    6298:	0003      	movs	r3, r0
    629a:	001a      	movs	r2, r3
    629c:	2301      	movs	r3, #1
    629e:	4053      	eors	r3, r2
    62a0:	b2db      	uxtb	r3, r3
    62a2:	2b00      	cmp	r3, #0
    62a4:	d001      	beq.n	62aa <spi_read+0x2a>
		return STATUS_ERR_IO;
    62a6:	2310      	movs	r3, #16
    62a8:	e027      	b.n	62fa <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    62aa:	230f      	movs	r3, #15
    62ac:	18fb      	adds	r3, r7, r3
    62ae:	2200      	movs	r2, #0
    62b0:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    62b2:	68bb      	ldr	r3, [r7, #8]
    62b4:	8b5b      	ldrh	r3, [r3, #26]
    62b6:	b29b      	uxth	r3, r3
    62b8:	001a      	movs	r2, r3
    62ba:	2304      	movs	r3, #4
    62bc:	4013      	ands	r3, r2
    62be:	d006      	beq.n	62ce <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    62c0:	230f      	movs	r3, #15
    62c2:	18fb      	adds	r3, r7, r3
    62c4:	221e      	movs	r2, #30
    62c6:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    62c8:	68bb      	ldr	r3, [r7, #8]
    62ca:	2204      	movs	r2, #4
    62cc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	799b      	ldrb	r3, [r3, #6]
    62d2:	2b01      	cmp	r3, #1
    62d4:	d108      	bne.n	62e8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    62d6:	68bb      	ldr	r3, [r7, #8]
    62d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62da:	b29b      	uxth	r3, r3
    62dc:	05db      	lsls	r3, r3, #23
    62de:	0ddb      	lsrs	r3, r3, #23
    62e0:	b29a      	uxth	r2, r3
    62e2:	683b      	ldr	r3, [r7, #0]
    62e4:	801a      	strh	r2, [r3, #0]
    62e6:	e005      	b.n	62f4 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    62e8:	68bb      	ldr	r3, [r7, #8]
    62ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62ec:	b2db      	uxtb	r3, r3
    62ee:	b29a      	uxth	r2, r3
    62f0:	683b      	ldr	r3, [r7, #0]
    62f2:	801a      	strh	r2, [r3, #0]
	return retval;
    62f4:	230f      	movs	r3, #15
    62f6:	18fb      	adds	r3, r7, r3
    62f8:	781b      	ldrb	r3, [r3, #0]
}
    62fa:	0018      	movs	r0, r3
    62fc:	46bd      	mov	sp, r7
    62fe:	b004      	add	sp, #16
    6300:	bd80      	pop	{r7, pc}
    6302:	46c0      	nop			; (mov r8, r8)
    6304:	00006211 	.word	0x00006211

00006308 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    6308:	b590      	push	{r4, r7, lr}
    630a:	b093      	sub	sp, #76	; 0x4c
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
    6310:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	681b      	ldr	r3, [r3, #0]
    6316:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    631e:	231c      	movs	r3, #28
    6320:	18fb      	adds	r3, r7, r3
    6322:	0018      	movs	r0, r3
    6324:	4b75      	ldr	r3, [pc, #468]	; (64fc <_spi_set_config+0x1f4>)
    6326:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6328:	231c      	movs	r3, #28
    632a:	18fb      	adds	r3, r7, r3
    632c:	2200      	movs	r2, #0
    632e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    6330:	683b      	ldr	r3, [r7, #0]
    6332:	781b      	ldrb	r3, [r3, #0]
    6334:	2b00      	cmp	r3, #0
    6336:	d103      	bne.n	6340 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6338:	231c      	movs	r3, #28
    633a:	18fb      	adds	r3, r7, r3
    633c:	2200      	movs	r2, #0
    633e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6340:	683b      	ldr	r3, [r7, #0]
    6342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    6344:	230c      	movs	r3, #12
    6346:	18fb      	adds	r3, r7, r3
    6348:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    634a:	683b      	ldr	r3, [r7, #0]
    634c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    634e:	230c      	movs	r3, #12
    6350:	18fb      	adds	r3, r7, r3
    6352:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6354:	683b      	ldr	r3, [r7, #0]
    6356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    6358:	230c      	movs	r3, #12
    635a:	18fb      	adds	r3, r7, r3
    635c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    635e:	683b      	ldr	r3, [r7, #0]
    6360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6362:	230c      	movs	r3, #12
    6364:	18fb      	adds	r3, r7, r3
    6366:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6368:	2347      	movs	r3, #71	; 0x47
    636a:	18fb      	adds	r3, r7, r3
    636c:	2200      	movs	r2, #0
    636e:	701a      	strb	r2, [r3, #0]
    6370:	e02c      	b.n	63cc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6372:	2347      	movs	r3, #71	; 0x47
    6374:	18fb      	adds	r3, r7, r3
    6376:	781a      	ldrb	r2, [r3, #0]
    6378:	230c      	movs	r3, #12
    637a:	18fb      	adds	r3, r7, r3
    637c:	0092      	lsls	r2, r2, #2
    637e:	58d3      	ldr	r3, [r2, r3]
    6380:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6384:	2b00      	cmp	r3, #0
    6386:	d109      	bne.n	639c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6388:	2347      	movs	r3, #71	; 0x47
    638a:	18fb      	adds	r3, r7, r3
    638c:	781a      	ldrb	r2, [r3, #0]
    638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6390:	0011      	movs	r1, r2
    6392:	0018      	movs	r0, r3
    6394:	4b5a      	ldr	r3, [pc, #360]	; (6500 <_spi_set_config+0x1f8>)
    6396:	4798      	blx	r3
    6398:	0003      	movs	r3, r0
    639a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    639e:	3301      	adds	r3, #1
    63a0:	d00d      	beq.n	63be <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    63a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63a4:	b2da      	uxtb	r2, r3
    63a6:	231c      	movs	r3, #28
    63a8:	18fb      	adds	r3, r7, r3
    63aa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    63ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63ae:	0c1b      	lsrs	r3, r3, #16
    63b0:	b2db      	uxtb	r3, r3
    63b2:	221c      	movs	r2, #28
    63b4:	18ba      	adds	r2, r7, r2
    63b6:	0011      	movs	r1, r2
    63b8:	0018      	movs	r0, r3
    63ba:	4b52      	ldr	r3, [pc, #328]	; (6504 <_spi_set_config+0x1fc>)
    63bc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    63be:	2347      	movs	r3, #71	; 0x47
    63c0:	18fb      	adds	r3, r7, r3
    63c2:	781a      	ldrb	r2, [r3, #0]
    63c4:	2347      	movs	r3, #71	; 0x47
    63c6:	18fb      	adds	r3, r7, r3
    63c8:	3201      	adds	r2, #1
    63ca:	701a      	strb	r2, [r3, #0]
    63cc:	2347      	movs	r3, #71	; 0x47
    63ce:	18fb      	adds	r3, r7, r3
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	2b03      	cmp	r3, #3
    63d4:	d9cd      	bls.n	6372 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    63d6:	683b      	ldr	r3, [r7, #0]
    63d8:	781a      	ldrb	r2, [r3, #0]
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    63de:	683b      	ldr	r3, [r7, #0]
    63e0:	7c1a      	ldrb	r2, [r3, #16]
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    63e6:	683b      	ldr	r3, [r7, #0]
    63e8:	7c9a      	ldrb	r2, [r3, #18]
    63ea:	687b      	ldr	r3, [r7, #4]
    63ec:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    63ee:	683b      	ldr	r3, [r7, #0]
    63f0:	7d1a      	ldrb	r2, [r3, #20]
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    63f6:	230a      	movs	r3, #10
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	2200      	movs	r2, #0
    63fc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    63fe:	2300      	movs	r3, #0
    6400:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    6402:	2300      	movs	r3, #0
    6404:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    6406:	683b      	ldr	r3, [r7, #0]
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	2b01      	cmp	r3, #1
    640c:	d129      	bne.n	6462 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	681b      	ldr	r3, [r3, #0]
    6412:	0018      	movs	r0, r3
    6414:	4b3c      	ldr	r3, [pc, #240]	; (6508 <_spi_set_config+0x200>)
    6416:	4798      	blx	r3
    6418:	0003      	movs	r3, r0
    641a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    641e:	3314      	adds	r3, #20
    6420:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6422:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6424:	b2db      	uxtb	r3, r3
    6426:	0018      	movs	r0, r3
    6428:	4b38      	ldr	r3, [pc, #224]	; (650c <_spi_set_config+0x204>)
    642a:	4798      	blx	r3
    642c:	0003      	movs	r3, r0
    642e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    6430:	683b      	ldr	r3, [r7, #0]
    6432:	699b      	ldr	r3, [r3, #24]
    6434:	2223      	movs	r2, #35	; 0x23
    6436:	18bc      	adds	r4, r7, r2
    6438:	220a      	movs	r2, #10
    643a:	18ba      	adds	r2, r7, r2
    643c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    643e:	0018      	movs	r0, r3
    6440:	4b33      	ldr	r3, [pc, #204]	; (6510 <_spi_set_config+0x208>)
    6442:	4798      	blx	r3
    6444:	0003      	movs	r3, r0
    6446:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    6448:	2323      	movs	r3, #35	; 0x23
    644a:	18fb      	adds	r3, r7, r3
    644c:	781b      	ldrb	r3, [r3, #0]
    644e:	2b00      	cmp	r3, #0
    6450:	d001      	beq.n	6456 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    6452:	2317      	movs	r3, #23
    6454:	e04e      	b.n	64f4 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    6456:	230a      	movs	r3, #10
    6458:	18fb      	adds	r3, r7, r3
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	b2da      	uxtb	r2, r3
    645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6460:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    6462:	683b      	ldr	r3, [r7, #0]
    6464:	685b      	ldr	r3, [r3, #4]
    6466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6468:	4313      	orrs	r3, r2
    646a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    646c:	683b      	ldr	r3, [r7, #0]
    646e:	689b      	ldr	r3, [r3, #8]
    6470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6472:	4313      	orrs	r3, r2
    6474:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    6476:	683b      	ldr	r3, [r7, #0]
    6478:	68db      	ldr	r3, [r3, #12]
    647a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    647c:	4313      	orrs	r3, r2
    647e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    6480:	683b      	ldr	r3, [r7, #0]
    6482:	7c1b      	ldrb	r3, [r3, #16]
    6484:	001a      	movs	r2, r3
    6486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6488:	4313      	orrs	r3, r2
    648a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    648c:	683b      	ldr	r3, [r7, #0]
    648e:	7c5b      	ldrb	r3, [r3, #17]
    6490:	2b00      	cmp	r3, #0
    6492:	d103      	bne.n	649c <_spi_set_config+0x194>
    6494:	4b1f      	ldr	r3, [pc, #124]	; (6514 <_spi_set_config+0x20c>)
    6496:	4798      	blx	r3
    6498:	1e03      	subs	r3, r0, #0
    649a:	d003      	beq.n	64a4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    649e:	2280      	movs	r2, #128	; 0x80
    64a0:	4313      	orrs	r3, r2
    64a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    64a4:	683b      	ldr	r3, [r7, #0]
    64a6:	7c9b      	ldrb	r3, [r3, #18]
    64a8:	2b00      	cmp	r3, #0
    64aa:	d004      	beq.n	64b6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    64ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    64ae:	2280      	movs	r2, #128	; 0x80
    64b0:	0292      	lsls	r2, r2, #10
    64b2:	4313      	orrs	r3, r2
    64b4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    64b6:	683b      	ldr	r3, [r7, #0]
    64b8:	7cdb      	ldrb	r3, [r3, #19]
    64ba:	2b00      	cmp	r3, #0
    64bc:	d004      	beq.n	64c8 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    64be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    64c0:	2280      	movs	r2, #128	; 0x80
    64c2:	0092      	lsls	r2, r2, #2
    64c4:	4313      	orrs	r3, r2
    64c6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    64c8:	683b      	ldr	r3, [r7, #0]
    64ca:	7d1b      	ldrb	r3, [r3, #20]
    64cc:	2b00      	cmp	r3, #0
    64ce:	d004      	beq.n	64da <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    64d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    64d2:	2280      	movs	r2, #128	; 0x80
    64d4:	0192      	lsls	r2, r2, #6
    64d6:	4313      	orrs	r3, r2
    64d8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    64da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    64dc:	681a      	ldr	r2, [r3, #0]
    64de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    64e0:	431a      	orrs	r2, r3
    64e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    64e4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    64e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    64e8:	685a      	ldr	r2, [r3, #4]
    64ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    64ec:	431a      	orrs	r2, r3
    64ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    64f0:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    64f2:	2300      	movs	r3, #0
}
    64f4:	0018      	movs	r0, r3
    64f6:	46bd      	mov	sp, r7
    64f8:	b013      	add	sp, #76	; 0x4c
    64fa:	bd90      	pop	{r4, r7, pc}
    64fc:	00006055 	.word	0x00006055
    6500:	0000a631 	.word	0x0000a631
    6504:	0000c705 	.word	0x0000c705
    6508:	0000a7ed 	.word	0x0000a7ed
    650c:	0000c53d 	.word	0x0000c53d
    6510:	0000a367 	.word	0x0000a367
    6514:	000061c9 	.word	0x000061c9

00006518 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6518:	b590      	push	{r4, r7, lr}
    651a:	b08b      	sub	sp, #44	; 0x2c
    651c:	af00      	add	r7, sp, #0
    651e:	60f8      	str	r0, [r7, #12]
    6520:	60b9      	str	r1, [r7, #8]
    6522:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6524:	68fb      	ldr	r3, [r7, #12]
    6526:	68ba      	ldr	r2, [r7, #8]
    6528:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    652a:	68fb      	ldr	r3, [r7, #12]
    652c:	681b      	ldr	r3, [r3, #0]
    652e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6530:	6a3b      	ldr	r3, [r7, #32]
    6532:	681b      	ldr	r3, [r3, #0]
    6534:	2202      	movs	r2, #2
    6536:	4013      	ands	r3, r2
    6538:	d001      	beq.n	653e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    653a:	231c      	movs	r3, #28
    653c:	e09c      	b.n	6678 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    653e:	6a3b      	ldr	r3, [r7, #32]
    6540:	681b      	ldr	r3, [r3, #0]
    6542:	2201      	movs	r2, #1
    6544:	4013      	ands	r3, r2
    6546:	d001      	beq.n	654c <spi_init+0x34>
		return STATUS_BUSY;
    6548:	2305      	movs	r3, #5
    654a:	e095      	b.n	6678 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    654c:	68fb      	ldr	r3, [r7, #12]
    654e:	681b      	ldr	r3, [r3, #0]
    6550:	0018      	movs	r0, r3
    6552:	4b4b      	ldr	r3, [pc, #300]	; (6680 <spi_init+0x168>)
    6554:	4798      	blx	r3
    6556:	0003      	movs	r3, r0
    6558:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    655a:	69fb      	ldr	r3, [r7, #28]
    655c:	3302      	adds	r3, #2
    655e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6560:	69fb      	ldr	r3, [r7, #28]
    6562:	3314      	adds	r3, #20
    6564:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6566:	2201      	movs	r2, #1
    6568:	69bb      	ldr	r3, [r7, #24]
    656a:	409a      	lsls	r2, r3
    656c:	0013      	movs	r3, r2
    656e:	0019      	movs	r1, r3
    6570:	2002      	movs	r0, #2
    6572:	4b44      	ldr	r3, [pc, #272]	; (6684 <spi_init+0x16c>)
    6574:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6576:	2310      	movs	r3, #16
    6578:	18fb      	adds	r3, r7, r3
    657a:	0018      	movs	r0, r3
    657c:	4b42      	ldr	r3, [pc, #264]	; (6688 <spi_init+0x170>)
    657e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6580:	687b      	ldr	r3, [r7, #4]
    6582:	2224      	movs	r2, #36	; 0x24
    6584:	5c9a      	ldrb	r2, [r3, r2]
    6586:	2310      	movs	r3, #16
    6588:	18fb      	adds	r3, r7, r3
    658a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    658c:	697b      	ldr	r3, [r7, #20]
    658e:	b2db      	uxtb	r3, r3
    6590:	2210      	movs	r2, #16
    6592:	18ba      	adds	r2, r7, r2
    6594:	0011      	movs	r1, r2
    6596:	0018      	movs	r0, r3
    6598:	4b3c      	ldr	r3, [pc, #240]	; (668c <spi_init+0x174>)
    659a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    659c:	697b      	ldr	r3, [r7, #20]
    659e:	b2db      	uxtb	r3, r3
    65a0:	0018      	movs	r0, r3
    65a2:	4b3b      	ldr	r3, [pc, #236]	; (6690 <spi_init+0x178>)
    65a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	2224      	movs	r2, #36	; 0x24
    65aa:	5c9b      	ldrb	r3, [r3, r2]
    65ac:	2100      	movs	r1, #0
    65ae:	0018      	movs	r0, r3
    65b0:	4b38      	ldr	r3, [pc, #224]	; (6694 <spi_init+0x17c>)
    65b2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    65b4:	687b      	ldr	r3, [r7, #4]
    65b6:	781b      	ldrb	r3, [r3, #0]
    65b8:	2b01      	cmp	r3, #1
    65ba:	d105      	bne.n	65c8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    65bc:	6a3b      	ldr	r3, [r7, #32]
    65be:	681b      	ldr	r3, [r3, #0]
    65c0:	220c      	movs	r2, #12
    65c2:	431a      	orrs	r2, r3
    65c4:	6a3b      	ldr	r3, [r7, #32]
    65c6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    65c8:	2327      	movs	r3, #39	; 0x27
    65ca:	18fb      	adds	r3, r7, r3
    65cc:	2200      	movs	r2, #0
    65ce:	701a      	strb	r2, [r3, #0]
    65d0:	e010      	b.n	65f4 <spi_init+0xdc>
		module->callback[i]        = NULL;
    65d2:	2327      	movs	r3, #39	; 0x27
    65d4:	18fb      	adds	r3, r7, r3
    65d6:	781b      	ldrb	r3, [r3, #0]
    65d8:	68fa      	ldr	r2, [r7, #12]
    65da:	3302      	adds	r3, #2
    65dc:	009b      	lsls	r3, r3, #2
    65de:	18d3      	adds	r3, r2, r3
    65e0:	3304      	adds	r3, #4
    65e2:	2200      	movs	r2, #0
    65e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    65e6:	2327      	movs	r3, #39	; 0x27
    65e8:	18fb      	adds	r3, r7, r3
    65ea:	781a      	ldrb	r2, [r3, #0]
    65ec:	2327      	movs	r3, #39	; 0x27
    65ee:	18fb      	adds	r3, r7, r3
    65f0:	3201      	adds	r2, #1
    65f2:	701a      	strb	r2, [r3, #0]
    65f4:	2327      	movs	r3, #39	; 0x27
    65f6:	18fb      	adds	r3, r7, r3
    65f8:	781b      	ldrb	r3, [r3, #0]
    65fa:	2b06      	cmp	r3, #6
    65fc:	d9e9      	bls.n	65d2 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    65fe:	68fb      	ldr	r3, [r7, #12]
    6600:	2200      	movs	r2, #0
    6602:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    6604:	68fb      	ldr	r3, [r7, #12]
    6606:	2200      	movs	r2, #0
    6608:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    660a:	68fb      	ldr	r3, [r7, #12]
    660c:	2200      	movs	r2, #0
    660e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    6610:	68fb      	ldr	r3, [r7, #12]
    6612:	2200      	movs	r2, #0
    6614:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    6616:	68fb      	ldr	r3, [r7, #12]
    6618:	2236      	movs	r2, #54	; 0x36
    661a:	2100      	movs	r1, #0
    661c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    661e:	68fb      	ldr	r3, [r7, #12]
    6620:	2237      	movs	r2, #55	; 0x37
    6622:	2100      	movs	r1, #0
    6624:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    6626:	68fb      	ldr	r3, [r7, #12]
    6628:	2238      	movs	r2, #56	; 0x38
    662a:	2100      	movs	r1, #0
    662c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    662e:	68fb      	ldr	r3, [r7, #12]
    6630:	2203      	movs	r2, #3
    6632:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    6634:	68fb      	ldr	r3, [r7, #12]
    6636:	2200      	movs	r2, #0
    6638:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    663a:	68fb      	ldr	r3, [r7, #12]
    663c:	681b      	ldr	r3, [r3, #0]
    663e:	2213      	movs	r2, #19
    6640:	18bc      	adds	r4, r7, r2
    6642:	0018      	movs	r0, r3
    6644:	4b0e      	ldr	r3, [pc, #56]	; (6680 <spi_init+0x168>)
    6646:	4798      	blx	r3
    6648:	0003      	movs	r3, r0
    664a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    664c:	4a12      	ldr	r2, [pc, #72]	; (6698 <spi_init+0x180>)
    664e:	2313      	movs	r3, #19
    6650:	18fb      	adds	r3, r7, r3
    6652:	781b      	ldrb	r3, [r3, #0]
    6654:	0011      	movs	r1, r2
    6656:	0018      	movs	r0, r3
    6658:	4b10      	ldr	r3, [pc, #64]	; (669c <spi_init+0x184>)
    665a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    665c:	2313      	movs	r3, #19
    665e:	18fb      	adds	r3, r7, r3
    6660:	781a      	ldrb	r2, [r3, #0]
    6662:	4b0f      	ldr	r3, [pc, #60]	; (66a0 <spi_init+0x188>)
    6664:	0092      	lsls	r2, r2, #2
    6666:	68f9      	ldr	r1, [r7, #12]
    6668:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    666a:	687a      	ldr	r2, [r7, #4]
    666c:	68fb      	ldr	r3, [r7, #12]
    666e:	0011      	movs	r1, r2
    6670:	0018      	movs	r0, r3
    6672:	4b0c      	ldr	r3, [pc, #48]	; (66a4 <spi_init+0x18c>)
    6674:	4798      	blx	r3
    6676:	0003      	movs	r3, r0
}
    6678:	0018      	movs	r0, r3
    667a:	46bd      	mov	sp, r7
    667c:	b00b      	add	sp, #44	; 0x2c
    667e:	bd90      	pop	{r4, r7, pc}
    6680:	0000a7ed 	.word	0x0000a7ed
    6684:	0000616d 	.word	0x0000616d
    6688:	00006155 	.word	0x00006155
    668c:	0000c419 	.word	0x0000c419
    6690:	0000c45d 	.word	0x0000c45d
    6694:	0000a5a5 	.word	0x0000a5a5
    6698:	000068f1 	.word	0x000068f1
    669c:	0000b435 	.word	0x0000b435
    66a0:	200006b8 	.word	0x200006b8
    66a4:	00006309 	.word	0x00006309

000066a8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    66a8:	b580      	push	{r7, lr}
    66aa:	b086      	sub	sp, #24
    66ac:	af00      	add	r7, sp, #0
    66ae:	60f8      	str	r0, [r7, #12]
    66b0:	60b9      	str	r1, [r7, #8]
    66b2:	1dfb      	adds	r3, r7, #7
    66b4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    66b6:	68fb      	ldr	r3, [r7, #12]
    66b8:	795b      	ldrb	r3, [r3, #5]
    66ba:	2b01      	cmp	r3, #1
    66bc:	d001      	beq.n	66c2 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    66be:	2315      	movs	r3, #21
    66c0:	e05c      	b.n	677c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    66c2:	68fb      	ldr	r3, [r7, #12]
    66c4:	7a1b      	ldrb	r3, [r3, #8]
    66c6:	2201      	movs	r2, #1
    66c8:	4053      	eors	r3, r2
    66ca:	b2db      	uxtb	r3, r3
    66cc:	2b00      	cmp	r3, #0
    66ce:	d054      	beq.n	677a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    66d0:	1dfb      	adds	r3, r7, #7
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	2b00      	cmp	r3, #0
    66d6:	d04a      	beq.n	676e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    66d8:	68bb      	ldr	r3, [r7, #8]
    66da:	785b      	ldrb	r3, [r3, #1]
    66dc:	2b00      	cmp	r3, #0
    66de:	d03f      	beq.n	6760 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    66e0:	68fb      	ldr	r3, [r7, #12]
    66e2:	0018      	movs	r0, r3
    66e4:	4b27      	ldr	r3, [pc, #156]	; (6784 <spi_select_slave+0xdc>)
    66e6:	4798      	blx	r3
    66e8:	0003      	movs	r3, r0
    66ea:	001a      	movs	r2, r3
    66ec:	2301      	movs	r3, #1
    66ee:	4053      	eors	r3, r2
    66f0:	b2db      	uxtb	r3, r3
    66f2:	2b00      	cmp	r3, #0
    66f4:	d007      	beq.n	6706 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    66f6:	68bb      	ldr	r3, [r7, #8]
    66f8:	781b      	ldrb	r3, [r3, #0]
    66fa:	2101      	movs	r1, #1
    66fc:	0018      	movs	r0, r3
    66fe:	4b22      	ldr	r3, [pc, #136]	; (6788 <spi_select_slave+0xe0>)
    6700:	4798      	blx	r3
					return STATUS_BUSY;
    6702:	2305      	movs	r3, #5
    6704:	e03a      	b.n	677c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    6706:	68bb      	ldr	r3, [r7, #8]
    6708:	781b      	ldrb	r3, [r3, #0]
    670a:	2100      	movs	r1, #0
    670c:	0018      	movs	r0, r3
    670e:	4b1e      	ldr	r3, [pc, #120]	; (6788 <spi_select_slave+0xe0>)
    6710:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    6712:	68bb      	ldr	r3, [r7, #8]
    6714:	789b      	ldrb	r3, [r3, #2]
    6716:	b29a      	uxth	r2, r3
    6718:	68fb      	ldr	r3, [r7, #12]
    671a:	0011      	movs	r1, r2
    671c:	0018      	movs	r0, r3
    671e:	4b1b      	ldr	r3, [pc, #108]	; (678c <spi_select_slave+0xe4>)
    6720:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    6722:	68fb      	ldr	r3, [r7, #12]
    6724:	79db      	ldrb	r3, [r3, #7]
    6726:	2201      	movs	r2, #1
    6728:	4053      	eors	r3, r2
    672a:	b2db      	uxtb	r3, r3
    672c:	2b00      	cmp	r3, #0
    672e:	d024      	beq.n	677a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    6730:	46c0      	nop			; (mov r8, r8)
    6732:	68fb      	ldr	r3, [r7, #12]
    6734:	0018      	movs	r0, r3
    6736:	4b16      	ldr	r3, [pc, #88]	; (6790 <spi_select_slave+0xe8>)
    6738:	4798      	blx	r3
    673a:	0003      	movs	r3, r0
    673c:	001a      	movs	r2, r3
    673e:	2301      	movs	r3, #1
    6740:	4053      	eors	r3, r2
    6742:	b2db      	uxtb	r3, r3
    6744:	2b00      	cmp	r3, #0
    6746:	d1f4      	bne.n	6732 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    6748:	2316      	movs	r3, #22
    674a:	18fb      	adds	r3, r7, r3
    674c:	2200      	movs	r2, #0
    674e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    6750:	2316      	movs	r3, #22
    6752:	18fa      	adds	r2, r7, r3
    6754:	68fb      	ldr	r3, [r7, #12]
    6756:	0011      	movs	r1, r2
    6758:	0018      	movs	r0, r3
    675a:	4b0e      	ldr	r3, [pc, #56]	; (6794 <spi_select_slave+0xec>)
    675c:	4798      	blx	r3
    675e:	e00c      	b.n	677a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    6760:	68bb      	ldr	r3, [r7, #8]
    6762:	781b      	ldrb	r3, [r3, #0]
    6764:	2100      	movs	r1, #0
    6766:	0018      	movs	r0, r3
    6768:	4b07      	ldr	r3, [pc, #28]	; (6788 <spi_select_slave+0xe0>)
    676a:	4798      	blx	r3
    676c:	e005      	b.n	677a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    676e:	68bb      	ldr	r3, [r7, #8]
    6770:	781b      	ldrb	r3, [r3, #0]
    6772:	2101      	movs	r1, #1
    6774:	0018      	movs	r0, r3
    6776:	4b04      	ldr	r3, [pc, #16]	; (6788 <spi_select_slave+0xe0>)
    6778:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    677a:	2300      	movs	r3, #0
}
    677c:	0018      	movs	r0, r3
    677e:	46bd      	mov	sp, r7
    6780:	b006      	add	sp, #24
    6782:	bd80      	pop	{r7, pc}
    6784:	000061e9 	.word	0x000061e9
    6788:	00006101 	.word	0x00006101
    678c:	00006239 	.word	0x00006239
    6790:	00006211 	.word	0x00006211
    6794:	00006281 	.word	0x00006281

00006798 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    6798:	b580      	push	{r7, lr}
    679a:	b084      	sub	sp, #16
    679c:	af00      	add	r7, sp, #0
    679e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    67a0:	687b      	ldr	r3, [r7, #4]
    67a2:	681b      	ldr	r3, [r3, #0]
    67a4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    67a6:	687b      	ldr	r3, [r7, #4]
    67a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    67aa:	781b      	ldrb	r3, [r3, #0]
    67ac:	b2da      	uxtb	r2, r3
    67ae:	230e      	movs	r3, #14
    67b0:	18fb      	adds	r3, r7, r3
    67b2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    67b8:	1c5a      	adds	r2, r3, #1
    67ba:	687b      	ldr	r3, [r7, #4]
    67bc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    67be:	687b      	ldr	r3, [r7, #4]
    67c0:	799b      	ldrb	r3, [r3, #6]
    67c2:	2b01      	cmp	r3, #1
    67c4:	d113      	bne.n	67ee <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    67c6:	687b      	ldr	r3, [r7, #4]
    67c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	b2db      	uxtb	r3, r3
    67ce:	021b      	lsls	r3, r3, #8
    67d0:	b21a      	sxth	r2, r3
    67d2:	230e      	movs	r3, #14
    67d4:	18fb      	adds	r3, r7, r3
    67d6:	2100      	movs	r1, #0
    67d8:	5e5b      	ldrsh	r3, [r3, r1]
    67da:	4313      	orrs	r3, r2
    67dc:	b21a      	sxth	r2, r3
    67de:	230e      	movs	r3, #14
    67e0:	18fb      	adds	r3, r7, r3
    67e2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    67e8:	1c5a      	adds	r2, r3, #1
    67ea:	687b      	ldr	r3, [r7, #4]
    67ec:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    67ee:	230e      	movs	r3, #14
    67f0:	18fb      	adds	r3, r7, r3
    67f2:	881b      	ldrh	r3, [r3, #0]
    67f4:	05db      	lsls	r3, r3, #23
    67f6:	0dda      	lsrs	r2, r3, #23
    67f8:	68bb      	ldr	r3, [r7, #8]
    67fa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    6800:	b29b      	uxth	r3, r3
    6802:	3b01      	subs	r3, #1
    6804:	b29a      	uxth	r2, r3
    6806:	687b      	ldr	r3, [r7, #4]
    6808:	869a      	strh	r2, [r3, #52]	; 0x34
}
    680a:	46c0      	nop			; (mov r8, r8)
    680c:	46bd      	mov	sp, r7
    680e:	b004      	add	sp, #16
    6810:	bd80      	pop	{r7, pc}
	...

00006814 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    6814:	b580      	push	{r7, lr}
    6816:	b084      	sub	sp, #16
    6818:	af00      	add	r7, sp, #0
    681a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    681c:	687b      	ldr	r3, [r7, #4]
    681e:	681b      	ldr	r3, [r3, #0]
    6820:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    6822:	4b08      	ldr	r3, [pc, #32]	; (6844 <_spi_write_dummy+0x30>)
    6824:	881b      	ldrh	r3, [r3, #0]
    6826:	001a      	movs	r2, r3
    6828:	68fb      	ldr	r3, [r7, #12]
    682a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    682c:	687b      	ldr	r3, [r7, #4]
    682e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    6830:	b29b      	uxth	r3, r3
    6832:	3b01      	subs	r3, #1
    6834:	b29a      	uxth	r2, r3
    6836:	687b      	ldr	r3, [r7, #4]
    6838:	865a      	strh	r2, [r3, #50]	; 0x32
}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	46bd      	mov	sp, r7
    683e:	b004      	add	sp, #16
    6840:	bd80      	pop	{r7, pc}
    6842:	46c0      	nop			; (mov r8, r8)
    6844:	20000438 	.word	0x20000438

00006848 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    6848:	b580      	push	{r7, lr}
    684a:	b084      	sub	sp, #16
    684c:	af00      	add	r7, sp, #0
    684e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	681b      	ldr	r3, [r3, #0]
    6854:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    6856:	230a      	movs	r3, #10
    6858:	18fb      	adds	r3, r7, r3
    685a:	2200      	movs	r2, #0
    685c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    685e:	68fb      	ldr	r3, [r7, #12]
    6860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6862:	230a      	movs	r3, #10
    6864:	18fb      	adds	r3, r7, r3
    6866:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    6868:	687b      	ldr	r3, [r7, #4]
    686a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    686c:	b29b      	uxth	r3, r3
    686e:	3b01      	subs	r3, #1
    6870:	b29a      	uxth	r2, r3
    6872:	687b      	ldr	r3, [r7, #4]
    6874:	865a      	strh	r2, [r3, #50]	; 0x32
}
    6876:	46c0      	nop			; (mov r8, r8)
    6878:	46bd      	mov	sp, r7
    687a:	b004      	add	sp, #16
    687c:	bd80      	pop	{r7, pc}

0000687e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    687e:	b580      	push	{r7, lr}
    6880:	b084      	sub	sp, #16
    6882:	af00      	add	r7, sp, #0
    6884:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	681b      	ldr	r3, [r3, #0]
    688a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    688c:	68fb      	ldr	r3, [r7, #12]
    688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6890:	b29a      	uxth	r2, r3
    6892:	230a      	movs	r3, #10
    6894:	18fb      	adds	r3, r7, r3
    6896:	05d2      	lsls	r2, r2, #23
    6898:	0dd2      	lsrs	r2, r2, #23
    689a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    689c:	687b      	ldr	r3, [r7, #4]
    689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68a0:	220a      	movs	r2, #10
    68a2:	18ba      	adds	r2, r7, r2
    68a4:	8812      	ldrh	r2, [r2, #0]
    68a6:	b2d2      	uxtb	r2, r2
    68a8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    68aa:	687b      	ldr	r3, [r7, #4]
    68ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68ae:	1c5a      	adds	r2, r3, #1
    68b0:	687b      	ldr	r3, [r7, #4]
    68b2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    68b4:	687b      	ldr	r3, [r7, #4]
    68b6:	799b      	ldrb	r3, [r3, #6]
    68b8:	2b01      	cmp	r3, #1
    68ba:	d10d      	bne.n	68d8 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68c0:	220a      	movs	r2, #10
    68c2:	18ba      	adds	r2, r7, r2
    68c4:	8812      	ldrh	r2, [r2, #0]
    68c6:	0a12      	lsrs	r2, r2, #8
    68c8:	b292      	uxth	r2, r2
    68ca:	b2d2      	uxtb	r2, r2
    68cc:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    68ce:	687b      	ldr	r3, [r7, #4]
    68d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68d2:	1c5a      	adds	r2, r3, #1
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    68dc:	b29b      	uxth	r3, r3
    68de:	3b01      	subs	r3, #1
    68e0:	b29a      	uxth	r2, r3
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	861a      	strh	r2, [r3, #48]	; 0x30
}
    68e6:	46c0      	nop			; (mov r8, r8)
    68e8:	46bd      	mov	sp, r7
    68ea:	b004      	add	sp, #16
    68ec:	bd80      	pop	{r7, pc}
	...

000068f0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b086      	sub	sp, #24
    68f4:	af00      	add	r7, sp, #0
    68f6:	0002      	movs	r2, r0
    68f8:	1dfb      	adds	r3, r7, #7
    68fa:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    68fc:	1dfb      	adds	r3, r7, #7
    68fe:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    6900:	4b96      	ldr	r3, [pc, #600]	; (6b5c <_spi_interrupt_handler+0x26c>)
    6902:	0092      	lsls	r2, r2, #2
    6904:	58d3      	ldr	r3, [r2, r3]
    6906:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6908:	697b      	ldr	r3, [r7, #20]
    690a:	681b      	ldr	r3, [r3, #0]
    690c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    690e:	697b      	ldr	r3, [r7, #20]
    6910:	2237      	movs	r2, #55	; 0x37
    6912:	5c9a      	ldrb	r2, [r3, r2]
    6914:	697b      	ldr	r3, [r7, #20]
    6916:	2136      	movs	r1, #54	; 0x36
    6918:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    691a:	230f      	movs	r3, #15
    691c:	18fb      	adds	r3, r7, r3
    691e:	400a      	ands	r2, r1
    6920:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    6922:	693b      	ldr	r3, [r7, #16]
    6924:	7e1b      	ldrb	r3, [r3, #24]
    6926:	b2da      	uxtb	r2, r3
    6928:	230c      	movs	r3, #12
    692a:	18fb      	adds	r3, r7, r3
    692c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    692e:	693b      	ldr	r3, [r7, #16]
    6930:	7d9b      	ldrb	r3, [r3, #22]
    6932:	b2db      	uxtb	r3, r3
    6934:	b29a      	uxth	r2, r3
    6936:	230c      	movs	r3, #12
    6938:	18fb      	adds	r3, r7, r3
    693a:	210c      	movs	r1, #12
    693c:	1879      	adds	r1, r7, r1
    693e:	8809      	ldrh	r1, [r1, #0]
    6940:	400a      	ands	r2, r1
    6942:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    6944:	230c      	movs	r3, #12
    6946:	18fb      	adds	r3, r7, r3
    6948:	881b      	ldrh	r3, [r3, #0]
    694a:	2201      	movs	r2, #1
    694c:	4013      	ands	r3, r2
    694e:	d038      	beq.n	69c2 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    6950:	697b      	ldr	r3, [r7, #20]
    6952:	795b      	ldrb	r3, [r3, #5]
    6954:	2b01      	cmp	r3, #1
    6956:	d110      	bne.n	697a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    6958:	697b      	ldr	r3, [r7, #20]
    695a:	7a5b      	ldrb	r3, [r3, #9]
    695c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    695e:	2b00      	cmp	r3, #0
    6960:	d10b      	bne.n	697a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    6962:	697b      	ldr	r3, [r7, #20]
    6964:	0018      	movs	r0, r3
    6966:	4b7e      	ldr	r3, [pc, #504]	; (6b60 <_spi_interrupt_handler+0x270>)
    6968:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    696a:	697b      	ldr	r3, [r7, #20]
    696c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    696e:	b29b      	uxth	r3, r3
    6970:	2b00      	cmp	r3, #0
    6972:	d102      	bne.n	697a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    6974:	693b      	ldr	r3, [r7, #16]
    6976:	2201      	movs	r2, #1
    6978:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    697a:	697b      	ldr	r3, [r7, #20]
    697c:	795b      	ldrb	r3, [r3, #5]
		if (0
    697e:	2b01      	cmp	r3, #1
    6980:	d11f      	bne.n	69c2 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    6982:	697b      	ldr	r3, [r7, #20]
    6984:	7a5b      	ldrb	r3, [r3, #9]
    6986:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    6988:	2b00      	cmp	r3, #0
    698a:	d01a      	beq.n	69c2 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    698c:	697b      	ldr	r3, [r7, #20]
    698e:	0018      	movs	r0, r3
    6990:	4b74      	ldr	r3, [pc, #464]	; (6b64 <_spi_interrupt_handler+0x274>)
    6992:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    6994:	697b      	ldr	r3, [r7, #20]
    6996:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    6998:	b29b      	uxth	r3, r3
    699a:	2b00      	cmp	r3, #0
    699c:	d111      	bne.n	69c2 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    699e:	693b      	ldr	r3, [r7, #16]
    69a0:	2201      	movs	r2, #1
    69a2:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    69a4:	697b      	ldr	r3, [r7, #20]
    69a6:	7a5b      	ldrb	r3, [r3, #9]
    69a8:	b2db      	uxtb	r3, r3
    69aa:	2b01      	cmp	r3, #1
    69ac:	d109      	bne.n	69c2 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    69ae:	697b      	ldr	r3, [r7, #20]
    69b0:	79db      	ldrb	r3, [r3, #7]
    69b2:	2201      	movs	r2, #1
    69b4:	4053      	eors	r3, r2
    69b6:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    69b8:	2b00      	cmp	r3, #0
    69ba:	d002      	beq.n	69c2 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    69bc:	693b      	ldr	r3, [r7, #16]
    69be:	2202      	movs	r2, #2
    69c0:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    69c2:	230c      	movs	r3, #12
    69c4:	18fb      	adds	r3, r7, r3
    69c6:	881b      	ldrh	r3, [r3, #0]
    69c8:	2204      	movs	r2, #4
    69ca:	4013      	ands	r3, r2
    69cc:	d100      	bne.n	69d0 <_spi_interrupt_handler+0xe0>
    69ce:	e07e      	b.n	6ace <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    69d0:	693b      	ldr	r3, [r7, #16]
    69d2:	8b5b      	ldrh	r3, [r3, #26]
    69d4:	b29b      	uxth	r3, r3
    69d6:	001a      	movs	r2, r3
    69d8:	2304      	movs	r3, #4
    69da:	4013      	ands	r3, r2
    69dc:	d022      	beq.n	6a24 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    69de:	697b      	ldr	r3, [r7, #20]
    69e0:	7a5b      	ldrb	r3, [r3, #9]
    69e2:	b2db      	uxtb	r3, r3
    69e4:	2b01      	cmp	r3, #1
    69e6:	d014      	beq.n	6a12 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    69e8:	697b      	ldr	r3, [r7, #20]
    69ea:	2238      	movs	r2, #56	; 0x38
    69ec:	211e      	movs	r1, #30
    69ee:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    69f0:	697b      	ldr	r3, [r7, #20]
    69f2:	2203      	movs	r2, #3
    69f4:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    69f6:	693b      	ldr	r3, [r7, #16]
    69f8:	2205      	movs	r2, #5
    69fa:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    69fc:	230f      	movs	r3, #15
    69fe:	18fb      	adds	r3, r7, r3
    6a00:	781b      	ldrb	r3, [r3, #0]
    6a02:	2208      	movs	r2, #8
    6a04:	4013      	ands	r3, r2
    6a06:	d004      	beq.n	6a12 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    6a08:	697b      	ldr	r3, [r7, #20]
    6a0a:	699b      	ldr	r3, [r3, #24]
    6a0c:	697a      	ldr	r2, [r7, #20]
    6a0e:	0010      	movs	r0, r2
    6a10:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    6a12:	693b      	ldr	r3, [r7, #16]
    6a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6a16:	230a      	movs	r3, #10
    6a18:	18fb      	adds	r3, r7, r3
    6a1a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6a1c:	693b      	ldr	r3, [r7, #16]
    6a1e:	2204      	movs	r2, #4
    6a20:	835a      	strh	r2, [r3, #26]
    6a22:	e054      	b.n	6ace <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    6a24:	697b      	ldr	r3, [r7, #20]
    6a26:	7a5b      	ldrb	r3, [r3, #9]
    6a28:	b2db      	uxtb	r3, r3
    6a2a:	2b01      	cmp	r3, #1
    6a2c:	d11e      	bne.n	6a6c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    6a2e:	697b      	ldr	r3, [r7, #20]
    6a30:	0018      	movs	r0, r3
    6a32:	4b4d      	ldr	r3, [pc, #308]	; (6b68 <_spi_interrupt_handler+0x278>)
    6a34:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    6a36:	697b      	ldr	r3, [r7, #20]
    6a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    6a3a:	b29b      	uxth	r3, r3
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d146      	bne.n	6ace <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    6a40:	693b      	ldr	r3, [r7, #16]
    6a42:	2204      	movs	r2, #4
    6a44:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    6a46:	697b      	ldr	r3, [r7, #20]
    6a48:	2238      	movs	r2, #56	; 0x38
    6a4a:	2100      	movs	r1, #0
    6a4c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    6a4e:	697b      	ldr	r3, [r7, #20]
    6a50:	2203      	movs	r2, #3
    6a52:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    6a54:	230f      	movs	r3, #15
    6a56:	18fb      	adds	r3, r7, r3
    6a58:	781b      	ldrb	r3, [r3, #0]
    6a5a:	2201      	movs	r2, #1
    6a5c:	4013      	ands	r3, r2
    6a5e:	d036      	beq.n	6ace <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    6a60:	697b      	ldr	r3, [r7, #20]
    6a62:	68db      	ldr	r3, [r3, #12]
    6a64:	697a      	ldr	r2, [r7, #20]
    6a66:	0010      	movs	r0, r2
    6a68:	4798      	blx	r3
    6a6a:	e030      	b.n	6ace <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    6a6c:	697b      	ldr	r3, [r7, #20]
    6a6e:	0018      	movs	r0, r3
    6a70:	4b3e      	ldr	r3, [pc, #248]	; (6b6c <_spi_interrupt_handler+0x27c>)
    6a72:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    6a74:	697b      	ldr	r3, [r7, #20]
    6a76:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    6a78:	b29b      	uxth	r3, r3
    6a7a:	2b00      	cmp	r3, #0
    6a7c:	d127      	bne.n	6ace <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    6a7e:	697b      	ldr	r3, [r7, #20]
    6a80:	2238      	movs	r2, #56	; 0x38
    6a82:	2100      	movs	r1, #0
    6a84:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    6a86:	693b      	ldr	r3, [r7, #16]
    6a88:	2204      	movs	r2, #4
    6a8a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    6a8c:	697b      	ldr	r3, [r7, #20]
    6a8e:	7a5b      	ldrb	r3, [r3, #9]
    6a90:	b2db      	uxtb	r3, r3
    6a92:	2b02      	cmp	r3, #2
    6a94:	d10b      	bne.n	6aae <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    6a96:	230f      	movs	r3, #15
    6a98:	18fb      	adds	r3, r7, r3
    6a9a:	781b      	ldrb	r3, [r3, #0]
    6a9c:	2204      	movs	r2, #4
    6a9e:	4013      	ands	r3, r2
    6aa0:	d015      	beq.n	6ace <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    6aa2:	697b      	ldr	r3, [r7, #20]
    6aa4:	695b      	ldr	r3, [r3, #20]
    6aa6:	697a      	ldr	r2, [r7, #20]
    6aa8:	0010      	movs	r0, r2
    6aaa:	4798      	blx	r3
    6aac:	e00f      	b.n	6ace <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    6aae:	697b      	ldr	r3, [r7, #20]
    6ab0:	7a5b      	ldrb	r3, [r3, #9]
    6ab2:	b2db      	uxtb	r3, r3
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d10a      	bne.n	6ace <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    6ab8:	230f      	movs	r3, #15
    6aba:	18fb      	adds	r3, r7, r3
    6abc:	781b      	ldrb	r3, [r3, #0]
    6abe:	2202      	movs	r2, #2
    6ac0:	4013      	ands	r3, r2
    6ac2:	d004      	beq.n	6ace <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    6ac4:	697b      	ldr	r3, [r7, #20]
    6ac6:	691b      	ldr	r3, [r3, #16]
    6ac8:	697a      	ldr	r2, [r7, #20]
    6aca:	0010      	movs	r0, r2
    6acc:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    6ace:	230c      	movs	r3, #12
    6ad0:	18fb      	adds	r3, r7, r3
    6ad2:	881b      	ldrh	r3, [r3, #0]
    6ad4:	2202      	movs	r2, #2
    6ad6:	4013      	ands	r3, r2
    6ad8:	d024      	beq.n	6b24 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    6ada:	697b      	ldr	r3, [r7, #20]
    6adc:	795b      	ldrb	r3, [r3, #5]
    6ade:	2b01      	cmp	r3, #1
    6ae0:	d120      	bne.n	6b24 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    6ae2:	697b      	ldr	r3, [r7, #20]
    6ae4:	7a5b      	ldrb	r3, [r3, #9]
    6ae6:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    6ae8:	2b01      	cmp	r3, #1
    6aea:	d11b      	bne.n	6b24 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    6aec:	697b      	ldr	r3, [r7, #20]
    6aee:	79db      	ldrb	r3, [r3, #7]
    6af0:	2201      	movs	r2, #1
    6af2:	4053      	eors	r3, r2
    6af4:	b2db      	uxtb	r3, r3
    6af6:	2b00      	cmp	r3, #0
    6af8:	d014      	beq.n	6b24 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6afa:	693b      	ldr	r3, [r7, #16]
    6afc:	2202      	movs	r2, #2
    6afe:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    6b00:	697b      	ldr	r3, [r7, #20]
    6b02:	2203      	movs	r2, #3
    6b04:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    6b06:	697b      	ldr	r3, [r7, #20]
    6b08:	2238      	movs	r2, #56	; 0x38
    6b0a:	2100      	movs	r1, #0
    6b0c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    6b0e:	230f      	movs	r3, #15
    6b10:	18fb      	adds	r3, r7, r3
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	2201      	movs	r2, #1
    6b16:	4013      	ands	r3, r2
    6b18:	d004      	beq.n	6b24 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    6b1a:	697b      	ldr	r3, [r7, #20]
    6b1c:	68db      	ldr	r3, [r3, #12]
    6b1e:	697a      	ldr	r2, [r7, #20]
    6b20:	0010      	movs	r0, r2
    6b22:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    6b24:	230c      	movs	r3, #12
    6b26:	18fb      	adds	r3, r7, r3
    6b28:	881b      	ldrh	r3, [r3, #0]
    6b2a:	2280      	movs	r2, #128	; 0x80
    6b2c:	4013      	ands	r3, r2
    6b2e:	d010      	beq.n	6b52 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    6b30:	693b      	ldr	r3, [r7, #16]
    6b32:	2280      	movs	r2, #128	; 0x80
    6b34:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    6b36:	693b      	ldr	r3, [r7, #16]
    6b38:	2280      	movs	r2, #128	; 0x80
    6b3a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    6b3c:	230f      	movs	r3, #15
    6b3e:	18fb      	adds	r3, r7, r3
    6b40:	781b      	ldrb	r3, [r3, #0]
    6b42:	2240      	movs	r2, #64	; 0x40
    6b44:	4013      	ands	r3, r2
    6b46:	d004      	beq.n	6b52 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    6b48:	697b      	ldr	r3, [r7, #20]
    6b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b4c:	697a      	ldr	r2, [r7, #20]
    6b4e:	0010      	movs	r0, r2
    6b50:	4798      	blx	r3
		}
	}
#  endif
}
    6b52:	46c0      	nop			; (mov r8, r8)
    6b54:	46bd      	mov	sp, r7
    6b56:	b006      	add	sp, #24
    6b58:	bd80      	pop	{r7, pc}
    6b5a:	46c0      	nop			; (mov r8, r8)
    6b5c:	200006b8 	.word	0x200006b8
    6b60:	00006815 	.word	0x00006815
    6b64:	00006799 	.word	0x00006799
    6b68:	00006849 	.word	0x00006849
    6b6c:	0000687f 	.word	0x0000687f

00006b70 <system_gclk_chan_get_config_defaults>:
{
    6b70:	b580      	push	{r7, lr}
    6b72:	b082      	sub	sp, #8
    6b74:	af00      	add	r7, sp, #0
    6b76:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6b78:	687b      	ldr	r3, [r7, #4]
    6b7a:	2200      	movs	r2, #0
    6b7c:	701a      	strb	r2, [r3, #0]
}
    6b7e:	46c0      	nop			; (mov r8, r8)
    6b80:	46bd      	mov	sp, r7
    6b82:	b002      	add	sp, #8
    6b84:	bd80      	pop	{r7, pc}
	...

00006b88 <system_apb_clock_set_mask>:
{
    6b88:	b580      	push	{r7, lr}
    6b8a:	b082      	sub	sp, #8
    6b8c:	af00      	add	r7, sp, #0
    6b8e:	0002      	movs	r2, r0
    6b90:	6039      	str	r1, [r7, #0]
    6b92:	1dfb      	adds	r3, r7, #7
    6b94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6b96:	1dfb      	adds	r3, r7, #7
    6b98:	781b      	ldrb	r3, [r3, #0]
    6b9a:	2b01      	cmp	r3, #1
    6b9c:	d00a      	beq.n	6bb4 <system_apb_clock_set_mask+0x2c>
    6b9e:	2b02      	cmp	r3, #2
    6ba0:	d00f      	beq.n	6bc2 <system_apb_clock_set_mask+0x3a>
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	d114      	bne.n	6bd0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6ba6:	4b0e      	ldr	r3, [pc, #56]	; (6be0 <system_apb_clock_set_mask+0x58>)
    6ba8:	4a0d      	ldr	r2, [pc, #52]	; (6be0 <system_apb_clock_set_mask+0x58>)
    6baa:	6991      	ldr	r1, [r2, #24]
    6bac:	683a      	ldr	r2, [r7, #0]
    6bae:	430a      	orrs	r2, r1
    6bb0:	619a      	str	r2, [r3, #24]
			break;
    6bb2:	e00f      	b.n	6bd4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6bb4:	4b0a      	ldr	r3, [pc, #40]	; (6be0 <system_apb_clock_set_mask+0x58>)
    6bb6:	4a0a      	ldr	r2, [pc, #40]	; (6be0 <system_apb_clock_set_mask+0x58>)
    6bb8:	69d1      	ldr	r1, [r2, #28]
    6bba:	683a      	ldr	r2, [r7, #0]
    6bbc:	430a      	orrs	r2, r1
    6bbe:	61da      	str	r2, [r3, #28]
			break;
    6bc0:	e008      	b.n	6bd4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6bc2:	4b07      	ldr	r3, [pc, #28]	; (6be0 <system_apb_clock_set_mask+0x58>)
    6bc4:	4a06      	ldr	r2, [pc, #24]	; (6be0 <system_apb_clock_set_mask+0x58>)
    6bc6:	6a11      	ldr	r1, [r2, #32]
    6bc8:	683a      	ldr	r2, [r7, #0]
    6bca:	430a      	orrs	r2, r1
    6bcc:	621a      	str	r2, [r3, #32]
			break;
    6bce:	e001      	b.n	6bd4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6bd0:	2317      	movs	r3, #23
    6bd2:	e000      	b.n	6bd6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6bd4:	2300      	movs	r3, #0
}
    6bd6:	0018      	movs	r0, r3
    6bd8:	46bd      	mov	sp, r7
    6bda:	b002      	add	sp, #8
    6bdc:	bd80      	pop	{r7, pc}
    6bde:	46c0      	nop			; (mov r8, r8)
    6be0:	40000400 	.word	0x40000400

00006be4 <system_pinmux_get_config_defaults>:
{
    6be4:	b580      	push	{r7, lr}
    6be6:	b082      	sub	sp, #8
    6be8:	af00      	add	r7, sp, #0
    6bea:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	2280      	movs	r2, #128	; 0x80
    6bf0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	2200      	movs	r2, #0
    6bf6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	2201      	movs	r2, #1
    6bfc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	2200      	movs	r2, #0
    6c02:	70da      	strb	r2, [r3, #3]
}
    6c04:	46c0      	nop			; (mov r8, r8)
    6c06:	46bd      	mov	sp, r7
    6c08:	b002      	add	sp, #8
    6c0a:	bd80      	pop	{r7, pc}

00006c0c <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    6c0c:	b580      	push	{r7, lr}
    6c0e:	b084      	sub	sp, #16
    6c10:	af00      	add	r7, sp, #0
    6c12:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    6c14:	2300      	movs	r3, #0
    6c16:	60fb      	str	r3, [r7, #12]
    6c18:	e00c      	b.n	6c34 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    6c1a:	4b0a      	ldr	r3, [pc, #40]	; (6c44 <_tcc_get_inst_index+0x38>)
    6c1c:	68fa      	ldr	r2, [r7, #12]
    6c1e:	0092      	lsls	r2, r2, #2
    6c20:	58d2      	ldr	r2, [r2, r3]
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	429a      	cmp	r2, r3
    6c26:	d102      	bne.n	6c2e <_tcc_get_inst_index+0x22>
			return i;
    6c28:	68fb      	ldr	r3, [r7, #12]
    6c2a:	b2db      	uxtb	r3, r3
    6c2c:	e006      	b.n	6c3c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    6c2e:	68fb      	ldr	r3, [r7, #12]
    6c30:	3301      	adds	r3, #1
    6c32:	60fb      	str	r3, [r7, #12]
    6c34:	68fb      	ldr	r3, [r7, #12]
    6c36:	2b02      	cmp	r3, #2
    6c38:	d9ef      	bls.n	6c1a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6c3a:	2300      	movs	r3, #0
}
    6c3c:	0018      	movs	r0, r3
    6c3e:	46bd      	mov	sp, r7
    6c40:	b004      	add	sp, #16
    6c42:	bd80      	pop	{r7, pc}
    6c44:	0001497c 	.word	0x0001497c

00006c48 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    6c48:	b590      	push	{r4, r7, lr}
    6c4a:	b085      	sub	sp, #20
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	6078      	str	r0, [r7, #4]
    6c50:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    6c52:	230f      	movs	r3, #15
    6c54:	18fc      	adds	r4, r7, r3
    6c56:	683b      	ldr	r3, [r7, #0]
    6c58:	0018      	movs	r0, r3
    6c5a:	4bad      	ldr	r3, [pc, #692]	; (6f10 <tcc_get_config_defaults+0x2c8>)
    6c5c:	4798      	blx	r3
    6c5e:	0003      	movs	r3, r0
    6c60:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    6c62:	687b      	ldr	r3, [r7, #4]
    6c64:	2200      	movs	r2, #0
    6c66:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    6c68:	230f      	movs	r3, #15
    6c6a:	18fb      	adds	r3, r7, r3
    6c6c:	781a      	ldrb	r2, [r3, #0]
    6c6e:	4ba9      	ldr	r3, [pc, #676]	; (6f14 <tcc_get_config_defaults+0x2cc>)
    6c70:	0092      	lsls	r2, r2, #2
    6c72:	58d2      	ldr	r2, [r2, r3]
    6c74:	687b      	ldr	r3, [r7, #4]
    6c76:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	2200      	movs	r2, #0
    6c7c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	2200      	movs	r2, #0
    6c82:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    6c84:	687b      	ldr	r3, [r7, #4]
    6c86:	2200      	movs	r2, #0
    6c88:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    6c8a:	687b      	ldr	r3, [r7, #4]
    6c8c:	2200      	movs	r2, #0
    6c8e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	2200      	movs	r2, #0
    6c94:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	2200      	movs	r2, #0
    6c9a:	61da      	str	r2, [r3, #28]
    6c9c:	687b      	ldr	r3, [r7, #4]
    6c9e:	2200      	movs	r2, #0
    6ca0:	621a      	str	r2, [r3, #32]
    6ca2:	687b      	ldr	r3, [r7, #4]
    6ca4:	2200      	movs	r2, #0
    6ca6:	625a      	str	r2, [r3, #36]	; 0x24
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	2200      	movs	r2, #0
    6cac:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6cae:	687b      	ldr	r3, [r7, #4]
    6cb0:	2200      	movs	r2, #0
    6cb2:	751a      	strb	r2, [r3, #20]
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	2200      	movs	r2, #0
    6cb8:	755a      	strb	r2, [r3, #21]
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	2200      	movs	r2, #0
    6cbe:	759a      	strb	r2, [r3, #22]
    6cc0:	687b      	ldr	r3, [r7, #4]
    6cc2:	2200      	movs	r2, #0
    6cc4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	2200      	movs	r2, #0
    6cca:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	2200      	movs	r2, #0
    6cd0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6cd2:	687b      	ldr	r3, [r7, #4]
    6cd4:	2200      	movs	r2, #0
    6cd6:	741a      	strb	r2, [r3, #16]
    6cd8:	687b      	ldr	r3, [r7, #4]
    6cda:	2200      	movs	r2, #0
    6cdc:	745a      	strb	r2, [r3, #17]
    6cde:	687b      	ldr	r3, [r7, #4]
    6ce0:	2200      	movs	r2, #0
    6ce2:	749a      	strb	r2, [r3, #18]
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	2200      	movs	r2, #0
    6ce8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    6cea:	687b      	ldr	r3, [r7, #4]
    6cec:	222c      	movs	r2, #44	; 0x2c
    6cee:	2100      	movs	r1, #0
    6cf0:	5499      	strb	r1, [r3, r2]
    6cf2:	687b      	ldr	r3, [r7, #4]
    6cf4:	222d      	movs	r2, #45	; 0x2d
    6cf6:	2100      	movs	r1, #0
    6cf8:	5499      	strb	r1, [r3, r2]
    6cfa:	687b      	ldr	r3, [r7, #4]
    6cfc:	222e      	movs	r2, #46	; 0x2e
    6cfe:	2100      	movs	r1, #0
    6d00:	5499      	strb	r1, [r3, r2]
    6d02:	687b      	ldr	r3, [r7, #4]
    6d04:	222f      	movs	r2, #47	; 0x2f
    6d06:	2100      	movs	r1, #0
    6d08:	5499      	strb	r1, [r3, r2]
    6d0a:	687b      	ldr	r3, [r7, #4]
    6d0c:	2230      	movs	r2, #48	; 0x30
    6d0e:	2100      	movs	r1, #0
    6d10:	5499      	strb	r1, [r3, r2]
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	2231      	movs	r2, #49	; 0x31
    6d16:	2100      	movs	r1, #0
    6d18:	5499      	strb	r1, [r3, r2]
    6d1a:	687b      	ldr	r3, [r7, #4]
    6d1c:	2232      	movs	r2, #50	; 0x32
    6d1e:	2100      	movs	r1, #0
    6d20:	5499      	strb	r1, [r3, r2]
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	2233      	movs	r2, #51	; 0x33
    6d26:	2100      	movs	r1, #0
    6d28:	5499      	strb	r1, [r3, r2]
    6d2a:	687b      	ldr	r3, [r7, #4]
    6d2c:	2234      	movs	r2, #52	; 0x34
    6d2e:	2100      	movs	r1, #0
    6d30:	5499      	strb	r1, [r3, r2]
    6d32:	687b      	ldr	r3, [r7, #4]
    6d34:	2235      	movs	r2, #53	; 0x35
    6d36:	2100      	movs	r1, #0
    6d38:	5499      	strb	r1, [r3, r2]
    6d3a:	687b      	ldr	r3, [r7, #4]
    6d3c:	2236      	movs	r2, #54	; 0x36
    6d3e:	2100      	movs	r1, #0
    6d40:	5499      	strb	r1, [r3, r2]
    6d42:	687b      	ldr	r3, [r7, #4]
    6d44:	2237      	movs	r2, #55	; 0x37
    6d46:	2100      	movs	r1, #0
    6d48:	5499      	strb	r1, [r3, r2]
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	2238      	movs	r2, #56	; 0x38
    6d4e:	2100      	movs	r1, #0
    6d50:	5499      	strb	r1, [r3, r2]
    6d52:	687b      	ldr	r3, [r7, #4]
    6d54:	2239      	movs	r2, #57	; 0x39
    6d56:	2100      	movs	r1, #0
    6d58:	5499      	strb	r1, [r3, r2]
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	223a      	movs	r2, #58	; 0x3a
    6d5e:	2100      	movs	r1, #0
    6d60:	5499      	strb	r1, [r3, r2]
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	223b      	movs	r2, #59	; 0x3b
    6d66:	2100      	movs	r1, #0
    6d68:	5499      	strb	r1, [r3, r2]
    6d6a:	687b      	ldr	r3, [r7, #4]
    6d6c:	223c      	movs	r2, #60	; 0x3c
    6d6e:	2100      	movs	r1, #0
    6d70:	5499      	strb	r1, [r3, r2]
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	223d      	movs	r2, #61	; 0x3d
    6d76:	2100      	movs	r1, #0
    6d78:	5499      	strb	r1, [r3, r2]
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	223e      	movs	r2, #62	; 0x3e
    6d7e:	2100      	movs	r1, #0
    6d80:	5499      	strb	r1, [r3, r2]
    6d82:	687b      	ldr	r3, [r7, #4]
    6d84:	223f      	movs	r2, #63	; 0x3f
    6d86:	2100      	movs	r1, #0
    6d88:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    6d8a:	687b      	ldr	r3, [r7, #4]
    6d8c:	2240      	movs	r2, #64	; 0x40
    6d8e:	2100      	movs	r1, #0
    6d90:	5499      	strb	r1, [r3, r2]
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	2241      	movs	r2, #65	; 0x41
    6d96:	2100      	movs	r1, #0
    6d98:	5499      	strb	r1, [r3, r2]
    6d9a:	687b      	ldr	r3, [r7, #4]
    6d9c:	2242      	movs	r2, #66	; 0x42
    6d9e:	2100      	movs	r1, #0
    6da0:	5499      	strb	r1, [r3, r2]
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	2243      	movs	r2, #67	; 0x43
    6da6:	2100      	movs	r1, #0
    6da8:	5499      	strb	r1, [r3, r2]
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	2244      	movs	r2, #68	; 0x44
    6dae:	2100      	movs	r1, #0
    6db0:	5499      	strb	r1, [r3, r2]
    6db2:	687b      	ldr	r3, [r7, #4]
    6db4:	2245      	movs	r2, #69	; 0x45
    6db6:	2100      	movs	r1, #0
    6db8:	5499      	strb	r1, [r3, r2]
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	2246      	movs	r2, #70	; 0x46
    6dbe:	2100      	movs	r1, #0
    6dc0:	5499      	strb	r1, [r3, r2]
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	2247      	movs	r2, #71	; 0x47
    6dc6:	2100      	movs	r1, #0
    6dc8:	5499      	strb	r1, [r3, r2]
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	2248      	movs	r2, #72	; 0x48
    6dce:	2100      	movs	r1, #0
    6dd0:	5499      	strb	r1, [r3, r2]
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	2249      	movs	r2, #73	; 0x49
    6dd6:	2100      	movs	r1, #0
    6dd8:	5499      	strb	r1, [r3, r2]
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	224a      	movs	r2, #74	; 0x4a
    6dde:	2100      	movs	r1, #0
    6de0:	5499      	strb	r1, [r3, r2]
    6de2:	687b      	ldr	r3, [r7, #4]
    6de4:	224b      	movs	r2, #75	; 0x4b
    6de6:	2100      	movs	r1, #0
    6de8:	5499      	strb	r1, [r3, r2]
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	224c      	movs	r2, #76	; 0x4c
    6dee:	2100      	movs	r1, #0
    6df0:	5499      	strb	r1, [r3, r2]
    6df2:	687b      	ldr	r3, [r7, #4]
    6df4:	224d      	movs	r2, #77	; 0x4d
    6df6:	2100      	movs	r1, #0
    6df8:	5499      	strb	r1, [r3, r2]
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	224e      	movs	r2, #78	; 0x4e
    6dfe:	2100      	movs	r1, #0
    6e00:	5499      	strb	r1, [r3, r2]
    6e02:	687b      	ldr	r3, [r7, #4]
    6e04:	224f      	movs	r2, #79	; 0x4f
    6e06:	2100      	movs	r1, #0
    6e08:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	2250      	movs	r2, #80	; 0x50
    6e0e:	2100      	movs	r1, #0
    6e10:	5499      	strb	r1, [r3, r2]
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	2251      	movs	r2, #81	; 0x51
    6e16:	2100      	movs	r1, #0
    6e18:	5499      	strb	r1, [r3, r2]
    6e1a:	687b      	ldr	r3, [r7, #4]
    6e1c:	2252      	movs	r2, #82	; 0x52
    6e1e:	2100      	movs	r1, #0
    6e20:	5499      	strb	r1, [r3, r2]
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	2253      	movs	r2, #83	; 0x53
    6e26:	2100      	movs	r1, #0
    6e28:	5499      	strb	r1, [r3, r2]
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	2254      	movs	r2, #84	; 0x54
    6e2e:	2100      	movs	r1, #0
    6e30:	5499      	strb	r1, [r3, r2]
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	2255      	movs	r2, #85	; 0x55
    6e36:	2100      	movs	r1, #0
    6e38:	5499      	strb	r1, [r3, r2]
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	2256      	movs	r2, #86	; 0x56
    6e3e:	2100      	movs	r1, #0
    6e40:	5499      	strb	r1, [r3, r2]
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	2257      	movs	r2, #87	; 0x57
    6e46:	2100      	movs	r1, #0
    6e48:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	2298      	movs	r2, #152	; 0x98
    6e4e:	2100      	movs	r1, #0
    6e50:	5499      	strb	r1, [r3, r2]
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	2200      	movs	r2, #0
    6e56:	659a      	str	r2, [r3, #88]	; 0x58
    6e58:	687b      	ldr	r3, [r7, #4]
    6e5a:	2200      	movs	r2, #0
    6e5c:	679a      	str	r2, [r3, #120]	; 0x78
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	2299      	movs	r2, #153	; 0x99
    6e62:	2100      	movs	r1, #0
    6e64:	5499      	strb	r1, [r3, r2]
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	2200      	movs	r2, #0
    6e6a:	65da      	str	r2, [r3, #92]	; 0x5c
    6e6c:	687b      	ldr	r3, [r7, #4]
    6e6e:	2200      	movs	r2, #0
    6e70:	67da      	str	r2, [r3, #124]	; 0x7c
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	229a      	movs	r2, #154	; 0x9a
    6e76:	2100      	movs	r1, #0
    6e78:	5499      	strb	r1, [r3, r2]
    6e7a:	687b      	ldr	r3, [r7, #4]
    6e7c:	2200      	movs	r2, #0
    6e7e:	661a      	str	r2, [r3, #96]	; 0x60
    6e80:	687b      	ldr	r3, [r7, #4]
    6e82:	2280      	movs	r2, #128	; 0x80
    6e84:	2100      	movs	r1, #0
    6e86:	5099      	str	r1, [r3, r2]
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	229b      	movs	r2, #155	; 0x9b
    6e8c:	2100      	movs	r1, #0
    6e8e:	5499      	strb	r1, [r3, r2]
    6e90:	687b      	ldr	r3, [r7, #4]
    6e92:	2200      	movs	r2, #0
    6e94:	665a      	str	r2, [r3, #100]	; 0x64
    6e96:	687b      	ldr	r3, [r7, #4]
    6e98:	2284      	movs	r2, #132	; 0x84
    6e9a:	2100      	movs	r1, #0
    6e9c:	5099      	str	r1, [r3, r2]
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	229c      	movs	r2, #156	; 0x9c
    6ea2:	2100      	movs	r1, #0
    6ea4:	5499      	strb	r1, [r3, r2]
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	2200      	movs	r2, #0
    6eaa:	669a      	str	r2, [r3, #104]	; 0x68
    6eac:	687b      	ldr	r3, [r7, #4]
    6eae:	2288      	movs	r2, #136	; 0x88
    6eb0:	2100      	movs	r1, #0
    6eb2:	5099      	str	r1, [r3, r2]
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	229d      	movs	r2, #157	; 0x9d
    6eb8:	2100      	movs	r1, #0
    6eba:	5499      	strb	r1, [r3, r2]
    6ebc:	687b      	ldr	r3, [r7, #4]
    6ebe:	2200      	movs	r2, #0
    6ec0:	66da      	str	r2, [r3, #108]	; 0x6c
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	228c      	movs	r2, #140	; 0x8c
    6ec6:	2100      	movs	r1, #0
    6ec8:	5099      	str	r1, [r3, r2]
    6eca:	687b      	ldr	r3, [r7, #4]
    6ecc:	229e      	movs	r2, #158	; 0x9e
    6ece:	2100      	movs	r1, #0
    6ed0:	5499      	strb	r1, [r3, r2]
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	2200      	movs	r2, #0
    6ed6:	671a      	str	r2, [r3, #112]	; 0x70
    6ed8:	687b      	ldr	r3, [r7, #4]
    6eda:	2290      	movs	r2, #144	; 0x90
    6edc:	2100      	movs	r1, #0
    6ede:	5099      	str	r1, [r3, r2]
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	229f      	movs	r2, #159	; 0x9f
    6ee4:	2100      	movs	r1, #0
    6ee6:	5499      	strb	r1, [r3, r2]
    6ee8:	687b      	ldr	r3, [r7, #4]
    6eea:	2200      	movs	r2, #0
    6eec:	675a      	str	r2, [r3, #116]	; 0x74
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	2294      	movs	r2, #148	; 0x94
    6ef2:	2100      	movs	r1, #0
    6ef4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    6ef6:	687b      	ldr	r3, [r7, #4]
    6ef8:	22a0      	movs	r2, #160	; 0xa0
    6efa:	2101      	movs	r1, #1
    6efc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    6efe:	687b      	ldr	r3, [r7, #4]
    6f00:	22a1      	movs	r2, #161	; 0xa1
    6f02:	2100      	movs	r1, #0
    6f04:	5499      	strb	r1, [r3, r2]
}
    6f06:	46c0      	nop			; (mov r8, r8)
    6f08:	46bd      	mov	sp, r7
    6f0a:	b005      	add	sp, #20
    6f0c:	bd90      	pop	{r4, r7, pc}
    6f0e:	46c0      	nop			; (mov r8, r8)
    6f10:	00006c0d 	.word	0x00006c0d
    6f14:	00014998 	.word	0x00014998

00006f18 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    6f18:	b580      	push	{r7, lr}
    6f1a:	b086      	sub	sp, #24
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	60b9      	str	r1, [r7, #8]
    6f20:	607a      	str	r2, [r7, #4]
    6f22:	230f      	movs	r3, #15
    6f24:	18fb      	adds	r3, r7, r3
    6f26:	1c02      	adds	r2, r0, #0
    6f28:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    6f2a:	2300      	movs	r3, #0
    6f2c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6f2e:	2300      	movs	r3, #0
    6f30:	613b      	str	r3, [r7, #16]
    6f32:	e01d      	b.n	6f70 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    6f34:	68ba      	ldr	r2, [r7, #8]
    6f36:	693b      	ldr	r3, [r7, #16]
    6f38:	18d3      	adds	r3, r2, r3
    6f3a:	3310      	adds	r3, #16
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	2b01      	cmp	r3, #1
    6f40:	d113      	bne.n	6f6a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    6f42:	230f      	movs	r3, #15
    6f44:	18fb      	adds	r3, r7, r3
    6f46:	781b      	ldrb	r3, [r3, #0]
    6f48:	4a1b      	ldr	r2, [pc, #108]	; (6fb8 <_tcc_build_ctrla+0xa0>)
    6f4a:	5cd3      	ldrb	r3, [r2, r3]
    6f4c:	001a      	movs	r2, r3
    6f4e:	693b      	ldr	r3, [r7, #16]
    6f50:	429a      	cmp	r2, r3
    6f52:	da01      	bge.n	6f58 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    6f54:	2317      	movs	r3, #23
    6f56:	e02a      	b.n	6fae <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    6f58:	2380      	movs	r3, #128	; 0x80
    6f5a:	045a      	lsls	r2, r3, #17
    6f5c:	693b      	ldr	r3, [r7, #16]
    6f5e:	409a      	lsls	r2, r3
    6f60:	0013      	movs	r3, r2
    6f62:	001a      	movs	r2, r3
    6f64:	697b      	ldr	r3, [r7, #20]
    6f66:	4313      	orrs	r3, r2
    6f68:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6f6a:	693b      	ldr	r3, [r7, #16]
    6f6c:	3301      	adds	r3, #1
    6f6e:	613b      	str	r3, [r7, #16]
    6f70:	693b      	ldr	r3, [r7, #16]
    6f72:	2b03      	cmp	r3, #3
    6f74:	ddde      	ble.n	6f34 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    6f76:	68bb      	ldr	r3, [r7, #8]
    6f78:	22a1      	movs	r2, #161	; 0xa1
    6f7a:	5c9b      	ldrb	r3, [r3, r2]
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d004      	beq.n	6f8a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    6f80:	697b      	ldr	r3, [r7, #20]
    6f82:	2280      	movs	r2, #128	; 0x80
    6f84:	0112      	lsls	r2, r2, #4
    6f86:	4313      	orrs	r3, r2
    6f88:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6f8a:	68bb      	ldr	r3, [r7, #8]
    6f8c:	7b1b      	ldrb	r3, [r3, #12]
    6f8e:	031b      	lsls	r3, r3, #12
    6f90:	001a      	movs	r2, r3
    6f92:	697b      	ldr	r3, [r7, #20]
    6f94:	4313      	orrs	r3, r2
    6f96:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6f98:	68bb      	ldr	r3, [r7, #8]
    6f9a:	7adb      	ldrb	r3, [r3, #11]
    6f9c:	021b      	lsls	r3, r3, #8
    6f9e:	001a      	movs	r2, r3
    6fa0:	697b      	ldr	r3, [r7, #20]
    6fa2:	4313      	orrs	r3, r2
    6fa4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    6fa6:	687b      	ldr	r3, [r7, #4]
    6fa8:	697a      	ldr	r2, [r7, #20]
    6faa:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    6fac:	2300      	movs	r3, #0
}
    6fae:	0018      	movs	r0, r3
    6fb0:	46bd      	mov	sp, r7
    6fb2:	b006      	add	sp, #24
    6fb4:	bd80      	pop	{r7, pc}
    6fb6:	46c0      	nop			; (mov r8, r8)
    6fb8:	000149a4 	.word	0x000149a4

00006fbc <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    6fbc:	b580      	push	{r7, lr}
    6fbe:	b086      	sub	sp, #24
    6fc0:	af00      	add	r7, sp, #0
    6fc2:	60b9      	str	r1, [r7, #8]
    6fc4:	607a      	str	r2, [r7, #4]
    6fc6:	230f      	movs	r3, #15
    6fc8:	18fb      	adds	r3, r7, r3
    6fca:	1c02      	adds	r2, r0, #0
    6fcc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    6fce:	2317      	movs	r3, #23
    6fd0:	18fb      	adds	r3, r7, r3
    6fd2:	2200      	movs	r2, #0
    6fd4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    6fd6:	68bb      	ldr	r3, [r7, #8]
    6fd8:	7a1b      	ldrb	r3, [r3, #8]
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d007      	beq.n	6fee <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    6fde:	2317      	movs	r3, #23
    6fe0:	18fb      	adds	r3, r7, r3
    6fe2:	2217      	movs	r2, #23
    6fe4:	18ba      	adds	r2, r7, r2
    6fe6:	7812      	ldrb	r2, [r2, #0]
    6fe8:	2104      	movs	r1, #4
    6fea:	430a      	orrs	r2, r1
    6fec:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    6fee:	68bb      	ldr	r3, [r7, #8]
    6ff0:	7a5b      	ldrb	r3, [r3, #9]
    6ff2:	2b01      	cmp	r3, #1
    6ff4:	d107      	bne.n	7006 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    6ff6:	2317      	movs	r3, #23
    6ff8:	18fb      	adds	r3, r7, r3
    6ffa:	2217      	movs	r2, #23
    6ffc:	18ba      	adds	r2, r7, r2
    6ffe:	7812      	ldrb	r2, [r2, #0]
    7000:	2101      	movs	r1, #1
    7002:	430a      	orrs	r2, r1
    7004:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	2217      	movs	r2, #23
    700a:	18ba      	adds	r2, r7, r2
    700c:	7812      	ldrb	r2, [r2, #0]
    700e:	701a      	strb	r2, [r3, #0]
}
    7010:	46c0      	nop			; (mov r8, r8)
    7012:	46bd      	mov	sp, r7
    7014:	b006      	add	sp, #24
    7016:	bd80      	pop	{r7, pc}

00007018 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    7018:	b580      	push	{r7, lr}
    701a:	b088      	sub	sp, #32
    701c:	af00      	add	r7, sp, #0
    701e:	60b9      	str	r1, [r7, #8]
    7020:	607a      	str	r2, [r7, #4]
    7022:	230f      	movs	r3, #15
    7024:	18fb      	adds	r3, r7, r3
    7026:	1c02      	adds	r2, r0, #0
    7028:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    702a:	230f      	movs	r3, #15
    702c:	18fb      	adds	r3, r7, r3
    702e:	781a      	ldrb	r2, [r3, #0]
    7030:	231b      	movs	r3, #27
    7032:	18fb      	adds	r3, r7, r3
    7034:	493e      	ldr	r1, [pc, #248]	; (7130 <_tcc_build_faults+0x118>)
    7036:	5c8a      	ldrb	r2, [r1, r2]
    7038:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    703a:	2300      	movs	r3, #0
    703c:	61fb      	str	r3, [r7, #28]
    703e:	e06e      	b.n	711e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    7040:	69fa      	ldr	r2, [r7, #28]
    7042:	0013      	movs	r3, r2
    7044:	009b      	lsls	r3, r3, #2
    7046:	189b      	adds	r3, r3, r2
    7048:	005b      	lsls	r3, r3, #1
    704a:	3328      	adds	r3, #40	; 0x28
    704c:	68ba      	ldr	r2, [r7, #8]
    704e:	18d3      	adds	r3, r2, r3
    7050:	3304      	adds	r3, #4
    7052:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    7054:	697b      	ldr	r3, [r7, #20]
    7056:	7a5b      	ldrb	r3, [r3, #9]
    7058:	221b      	movs	r2, #27
    705a:	18ba      	adds	r2, r7, r2
    705c:	7812      	ldrb	r2, [r2, #0]
    705e:	429a      	cmp	r2, r3
    7060:	d801      	bhi.n	7066 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    7062:	2317      	movs	r3, #23
    7064:	e05f      	b.n	7126 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    7066:	697b      	ldr	r3, [r7, #20]
    7068:	781b      	ldrb	r3, [r3, #0]
    706a:	2b0f      	cmp	r3, #15
    706c:	d901      	bls.n	7072 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    706e:	2317      	movs	r3, #23
    7070:	e059      	b.n	7126 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7072:	697b      	ldr	r3, [r7, #20]
    7074:	781b      	ldrb	r3, [r3, #0]
    7076:	061b      	lsls	r3, r3, #24
    7078:	001a      	movs	r2, r3
    707a:	23f0      	movs	r3, #240	; 0xf0
    707c:	051b      	lsls	r3, r3, #20
    707e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    7080:	697b      	ldr	r3, [r7, #20]
    7082:	785b      	ldrb	r3, [r3, #1]
    7084:	041b      	lsls	r3, r3, #16
    7086:	0019      	movs	r1, r3
    7088:	23ff      	movs	r3, #255	; 0xff
    708a:	041b      	lsls	r3, r3, #16
    708c:	400b      	ands	r3, r1
    708e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    7090:	697b      	ldr	r3, [r7, #20]
    7092:	789b      	ldrb	r3, [r3, #2]
    7094:	2b00      	cmp	r3, #0
    7096:	d001      	beq.n	709c <_tcc_build_faults+0x84>
    7098:	2380      	movs	r3, #128	; 0x80
    709a:	e000      	b.n	709e <_tcc_build_faults+0x86>
    709c:	2300      	movs	r3, #0
    709e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    70a0:	697b      	ldr	r3, [r7, #20]
    70a2:	78db      	ldrb	r3, [r3, #3]
    70a4:	2b00      	cmp	r3, #0
    70a6:	d001      	beq.n	70ac <_tcc_build_faults+0x94>
    70a8:	2308      	movs	r3, #8
    70aa:	e000      	b.n	70ae <_tcc_build_faults+0x96>
    70ac:	2300      	movs	r3, #0
    70ae:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    70b0:	697b      	ldr	r3, [r7, #20]
    70b2:	791b      	ldrb	r3, [r3, #4]
    70b4:	2b00      	cmp	r3, #0
    70b6:	d001      	beq.n	70bc <_tcc_build_faults+0xa4>
    70b8:	2310      	movs	r3, #16
    70ba:	e000      	b.n	70be <_tcc_build_faults+0xa6>
    70bc:	2300      	movs	r3, #0
    70be:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    70c0:	697b      	ldr	r3, [r7, #20]
    70c2:	795b      	ldrb	r3, [r3, #5]
    70c4:	0019      	movs	r1, r3
    70c6:	2303      	movs	r3, #3
    70c8:	400b      	ands	r3, r1
    70ca:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    70cc:	697b      	ldr	r3, [r7, #20]
    70ce:	799b      	ldrb	r3, [r3, #6]
    70d0:	015b      	lsls	r3, r3, #5
    70d2:	0019      	movs	r1, r3
    70d4:	2360      	movs	r3, #96	; 0x60
    70d6:	400b      	ands	r3, r1
    70d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    70da:	697b      	ldr	r3, [r7, #20]
    70dc:	79db      	ldrb	r3, [r3, #7]
    70de:	021b      	lsls	r3, r3, #8
    70e0:	0019      	movs	r1, r3
    70e2:	23c0      	movs	r3, #192	; 0xc0
    70e4:	009b      	lsls	r3, r3, #2
    70e6:	400b      	ands	r3, r1
    70e8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    70ea:	697b      	ldr	r3, [r7, #20]
    70ec:	7a1b      	ldrb	r3, [r3, #8]
    70ee:	031b      	lsls	r3, r3, #12
    70f0:	0019      	movs	r1, r3
    70f2:	23e0      	movs	r3, #224	; 0xe0
    70f4:	01db      	lsls	r3, r3, #7
    70f6:	400b      	ands	r3, r1
    70f8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    70fa:	697b      	ldr	r3, [r7, #20]
    70fc:	7a5b      	ldrb	r3, [r3, #9]
    70fe:	029b      	lsls	r3, r3, #10
    7100:	0019      	movs	r1, r3
    7102:	23c0      	movs	r3, #192	; 0xc0
    7104:	011b      	lsls	r3, r3, #4
    7106:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7108:	4313      	orrs	r3, r2
    710a:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    710c:	69fb      	ldr	r3, [r7, #28]
    710e:	009b      	lsls	r3, r3, #2
    7110:	687a      	ldr	r2, [r7, #4]
    7112:	18d3      	adds	r3, r2, r3
    7114:	693a      	ldr	r2, [r7, #16]
    7116:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    7118:	69fb      	ldr	r3, [r7, #28]
    711a:	3301      	adds	r3, #1
    711c:	61fb      	str	r3, [r7, #28]
    711e:	69fb      	ldr	r3, [r7, #28]
    7120:	2b01      	cmp	r3, #1
    7122:	dd8d      	ble.n	7040 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    7124:	2300      	movs	r3, #0
}
    7126:	0018      	movs	r0, r3
    7128:	46bd      	mov	sp, r7
    712a:	b008      	add	sp, #32
    712c:	bd80      	pop	{r7, pc}
    712e:	46c0      	nop			; (mov r8, r8)
    7130:	000149a4 	.word	0x000149a4

00007134 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    7134:	b580      	push	{r7, lr}
    7136:	b088      	sub	sp, #32
    7138:	af00      	add	r7, sp, #0
    713a:	60b9      	str	r1, [r7, #8]
    713c:	607a      	str	r2, [r7, #4]
    713e:	230f      	movs	r3, #15
    7140:	18fb      	adds	r3, r7, r3
    7142:	1c02      	adds	r2, r0, #0
    7144:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    7146:	230f      	movs	r3, #15
    7148:	18fb      	adds	r3, r7, r3
    714a:	781a      	ldrb	r2, [r3, #0]
    714c:	2317      	movs	r3, #23
    714e:	18fb      	adds	r3, r7, r3
    7150:	492d      	ldr	r1, [pc, #180]	; (7208 <_tcc_build_drvctrl+0xd4>)
    7152:	5c8a      	ldrb	r2, [r1, r2]
    7154:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    7156:	2300      	movs	r3, #0
    7158:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    715a:	2300      	movs	r3, #0
    715c:	61fb      	str	r3, [r7, #28]
    715e:	e048      	b.n	71f2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    7160:	68ba      	ldr	r2, [r7, #8]
    7162:	2150      	movs	r1, #80	; 0x50
    7164:	69fb      	ldr	r3, [r7, #28]
    7166:	18d3      	adds	r3, r2, r3
    7168:	185b      	adds	r3, r3, r1
    716a:	781b      	ldrb	r3, [r3, #0]
    716c:	2b00      	cmp	r3, #0
    716e:	d010      	beq.n	7192 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    7170:	2317      	movs	r3, #23
    7172:	18fb      	adds	r3, r7, r3
    7174:	781a      	ldrb	r2, [r3, #0]
    7176:	69fb      	ldr	r3, [r7, #28]
    7178:	429a      	cmp	r2, r3
    717a:	d801      	bhi.n	7180 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    717c:	2317      	movs	r3, #23
    717e:	e03f      	b.n	7200 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    7180:	2380      	movs	r3, #128	; 0x80
    7182:	025a      	lsls	r2, r3, #9
    7184:	69fb      	ldr	r3, [r7, #28]
    7186:	409a      	lsls	r2, r3
    7188:	0013      	movs	r3, r2
    718a:	001a      	movs	r2, r3
    718c:	69bb      	ldr	r3, [r7, #24]
    718e:	4313      	orrs	r3, r2
    7190:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    7192:	68ba      	ldr	r2, [r7, #8]
    7194:	69fb      	ldr	r3, [r7, #28]
    7196:	331c      	adds	r3, #28
    7198:	005b      	lsls	r3, r3, #1
    719a:	18d3      	adds	r3, r2, r3
    719c:	3309      	adds	r3, #9
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	2b00      	cmp	r3, #0
    71a2:	d023      	beq.n	71ec <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    71a4:	2317      	movs	r3, #23
    71a6:	18fb      	adds	r3, r7, r3
    71a8:	781a      	ldrb	r2, [r3, #0]
    71aa:	69fb      	ldr	r3, [r7, #28]
    71ac:	429a      	cmp	r2, r3
    71ae:	d801      	bhi.n	71b4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    71b0:	2317      	movs	r3, #23
    71b2:	e025      	b.n	7200 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    71b4:	68ba      	ldr	r2, [r7, #8]
    71b6:	69fb      	ldr	r3, [r7, #28]
    71b8:	331c      	adds	r3, #28
    71ba:	005b      	lsls	r3, r3, #1
    71bc:	18d3      	adds	r3, r2, r3
    71be:	3309      	adds	r3, #9
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	2b02      	cmp	r3, #2
    71c4:	d10a      	bne.n	71dc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    71c6:	2302      	movs	r3, #2
    71c8:	33ff      	adds	r3, #255	; 0xff
    71ca:	001a      	movs	r2, r3
    71cc:	69fb      	ldr	r3, [r7, #28]
    71ce:	409a      	lsls	r2, r3
    71d0:	0013      	movs	r3, r2
    71d2:	001a      	movs	r2, r3
    71d4:	69bb      	ldr	r3, [r7, #24]
    71d6:	4313      	orrs	r3, r2
    71d8:	61bb      	str	r3, [r7, #24]
    71da:	e007      	b.n	71ec <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    71dc:	2201      	movs	r2, #1
    71de:	69fb      	ldr	r3, [r7, #28]
    71e0:	409a      	lsls	r2, r3
    71e2:	0013      	movs	r3, r2
    71e4:	001a      	movs	r2, r3
    71e6:	69bb      	ldr	r3, [r7, #24]
    71e8:	4313      	orrs	r3, r2
    71ea:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    71ec:	69fb      	ldr	r3, [r7, #28]
    71ee:	3301      	adds	r3, #1
    71f0:	61fb      	str	r3, [r7, #28]
    71f2:	69fb      	ldr	r3, [r7, #28]
    71f4:	2b07      	cmp	r3, #7
    71f6:	d9b3      	bls.n	7160 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	69ba      	ldr	r2, [r7, #24]
    71fc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    71fe:	2300      	movs	r3, #0
}
    7200:	0018      	movs	r0, r3
    7202:	46bd      	mov	sp, r7
    7204:	b008      	add	sp, #32
    7206:	bd80      	pop	{r7, pc}
    7208:	000149a8 	.word	0x000149a8

0000720c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    720c:	b580      	push	{r7, lr}
    720e:	b088      	sub	sp, #32
    7210:	af00      	add	r7, sp, #0
    7212:	60b9      	str	r1, [r7, #8]
    7214:	607a      	str	r2, [r7, #4]
    7216:	230f      	movs	r3, #15
    7218:	18fb      	adds	r3, r7, r3
    721a:	1c02      	adds	r2, r0, #0
    721c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    721e:	230f      	movs	r3, #15
    7220:	18fb      	adds	r3, r7, r3
    7222:	781a      	ldrb	r2, [r3, #0]
    7224:	2317      	movs	r3, #23
    7226:	18fb      	adds	r3, r7, r3
    7228:	491d      	ldr	r1, [pc, #116]	; (72a0 <_tcc_build_waves+0x94>)
    722a:	5c8a      	ldrb	r2, [r1, r2]
    722c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    722e:	68bb      	ldr	r3, [r7, #8]
    7230:	3310      	adds	r3, #16
    7232:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    7234:	693b      	ldr	r3, [r7, #16]
    7236:	7a5b      	ldrb	r3, [r3, #9]
    7238:	011b      	lsls	r3, r3, #4
    723a:	001a      	movs	r2, r3
    723c:	2330      	movs	r3, #48	; 0x30
    723e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    7240:	693b      	ldr	r3, [r7, #16]
    7242:	7a1b      	ldrb	r3, [r3, #8]
    7244:	0019      	movs	r1, r3
    7246:	2307      	movs	r3, #7
    7248:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    724a:	4313      	orrs	r3, r2
    724c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    724e:	2300      	movs	r3, #0
    7250:	61fb      	str	r3, [r7, #28]
    7252:	e01a      	b.n	728a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    7254:	693a      	ldr	r2, [r7, #16]
    7256:	69fb      	ldr	r3, [r7, #28]
    7258:	18d3      	adds	r3, r2, r3
    725a:	3304      	adds	r3, #4
    725c:	781b      	ldrb	r3, [r3, #0]
    725e:	2b00      	cmp	r3, #0
    7260:	d010      	beq.n	7284 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    7262:	2317      	movs	r3, #23
    7264:	18fb      	adds	r3, r7, r3
    7266:	781a      	ldrb	r2, [r3, #0]
    7268:	69fb      	ldr	r3, [r7, #28]
    726a:	429a      	cmp	r2, r3
    726c:	dc01      	bgt.n	7272 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    726e:	2317      	movs	r3, #23
    7270:	e012      	b.n	7298 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    7272:	2380      	movs	r3, #128	; 0x80
    7274:	025a      	lsls	r2, r3, #9
    7276:	69fb      	ldr	r3, [r7, #28]
    7278:	409a      	lsls	r2, r3
    727a:	0013      	movs	r3, r2
    727c:	001a      	movs	r2, r3
    727e:	69bb      	ldr	r3, [r7, #24]
    7280:	4313      	orrs	r3, r2
    7282:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    7284:	69fb      	ldr	r3, [r7, #28]
    7286:	3301      	adds	r3, #1
    7288:	61fb      	str	r3, [r7, #28]
    728a:	69fb      	ldr	r3, [r7, #28]
    728c:	2b03      	cmp	r3, #3
    728e:	dde1      	ble.n	7254 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    7290:	687b      	ldr	r3, [r7, #4]
    7292:	69ba      	ldr	r2, [r7, #24]
    7294:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    7296:	2300      	movs	r3, #0
}
    7298:	0018      	movs	r0, r3
    729a:	46bd      	mov	sp, r7
    729c:	b008      	add	sp, #32
    729e:	bd80      	pop	{r7, pc}
    72a0:	000149a4 	.word	0x000149a4

000072a4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    72a4:	b590      	push	{r4, r7, lr}
    72a6:	b091      	sub	sp, #68	; 0x44
    72a8:	af00      	add	r7, sp, #0
    72aa:	60f8      	str	r0, [r7, #12]
    72ac:	60b9      	str	r1, [r7, #8]
    72ae:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    72b0:	233b      	movs	r3, #59	; 0x3b
    72b2:	18fc      	adds	r4, r7, r3
    72b4:	68bb      	ldr	r3, [r7, #8]
    72b6:	0018      	movs	r0, r3
    72b8:	4bc4      	ldr	r3, [pc, #784]	; (75cc <tcc_init+0x328>)
    72ba:	4798      	blx	r3
    72bc:	0003      	movs	r3, r0
    72be:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    72c0:	233b      	movs	r3, #59	; 0x3b
    72c2:	18fb      	adds	r3, r7, r3
    72c4:	781a      	ldrb	r2, [r3, #0]
    72c6:	4bc2      	ldr	r3, [pc, #776]	; (75d0 <tcc_init+0x32c>)
    72c8:	0092      	lsls	r2, r2, #2
    72ca:	58d3      	ldr	r3, [r2, r3]
    72cc:	0019      	movs	r1, r3
    72ce:	2002      	movs	r0, #2
    72d0:	4bc0      	ldr	r3, [pc, #768]	; (75d4 <tcc_init+0x330>)
    72d2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    72d4:	68bb      	ldr	r3, [r7, #8]
    72d6:	681b      	ldr	r3, [r3, #0]
    72d8:	2202      	movs	r2, #2
    72da:	4013      	ands	r3, r2
    72dc:	d001      	beq.n	72e2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    72de:	231c      	movs	r3, #28
    72e0:	e1be      	b.n	7660 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    72e2:	68bb      	ldr	r3, [r7, #8]
    72e4:	681b      	ldr	r3, [r3, #0]
    72e6:	2201      	movs	r2, #1
    72e8:	4013      	ands	r3, r2
    72ea:	d001      	beq.n	72f0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    72ec:	231c      	movs	r3, #28
    72ee:	e1b7      	b.n	7660 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    72f0:	233b      	movs	r3, #59	; 0x3b
    72f2:	18fb      	adds	r3, r7, r3
    72f4:	781a      	ldrb	r2, [r3, #0]
    72f6:	4bb8      	ldr	r3, [pc, #736]	; (75d8 <tcc_init+0x334>)
    72f8:	0092      	lsls	r2, r2, #2
    72fa:	58d3      	ldr	r3, [r2, r3]
    72fc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    72fe:	687b      	ldr	r3, [r7, #4]
    7300:	681a      	ldr	r2, [r3, #0]
    7302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7304:	429a      	cmp	r2, r3
    7306:	d804      	bhi.n	7312 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	685a      	ldr	r2, [r3, #4]
    730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    730e:	429a      	cmp	r2, r3
    7310:	d901      	bls.n	7316 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    7312:	2317      	movs	r3, #23
    7314:	e1a4      	b.n	7660 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    7316:	2300      	movs	r3, #0
    7318:	63fb      	str	r3, [r7, #60]	; 0x3c
    731a:	e00e      	b.n	733a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    731c:	687a      	ldr	r2, [r7, #4]
    731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7320:	3306      	adds	r3, #6
    7322:	009b      	lsls	r3, r3, #2
    7324:	18d3      	adds	r3, r2, r3
    7326:	3304      	adds	r3, #4
    7328:	681a      	ldr	r2, [r3, #0]
    732a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    732c:	429a      	cmp	r2, r3
    732e:	d901      	bls.n	7334 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    7330:	2317      	movs	r3, #23
    7332:	e195      	b.n	7660 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    7334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7336:	3301      	adds	r3, #1
    7338:	63fb      	str	r3, [r7, #60]	; 0x3c
    733a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    733c:	2b03      	cmp	r3, #3
    733e:	dded      	ble.n	731c <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7340:	2300      	movs	r3, #0
    7342:	63fb      	str	r3, [r7, #60]	; 0x3c
    7344:	e019      	b.n	737a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    7346:	687a      	ldr	r2, [r7, #4]
    7348:	2198      	movs	r1, #152	; 0x98
    734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    734c:	18d3      	adds	r3, r2, r3
    734e:	185b      	adds	r3, r3, r1
    7350:	781b      	ldrb	r3, [r3, #0]
    7352:	2201      	movs	r2, #1
    7354:	4053      	eors	r3, r2
    7356:	b2db      	uxtb	r3, r3
    7358:	2b00      	cmp	r3, #0
    735a:	d10a      	bne.n	7372 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    735c:	233b      	movs	r3, #59	; 0x3b
    735e:	18fb      	adds	r3, r7, r3
    7360:	781b      	ldrb	r3, [r3, #0]
    7362:	4a9e      	ldr	r2, [pc, #632]	; (75dc <tcc_init+0x338>)
    7364:	5cd3      	ldrb	r3, [r2, r3]
    7366:	001a      	movs	r2, r3
    7368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    736a:	429a      	cmp	r2, r3
    736c:	dc02      	bgt.n	7374 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    736e:	2317      	movs	r3, #23
    7370:	e176      	b.n	7660 <tcc_init+0x3bc>
			continue;
    7372:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7376:	3301      	adds	r3, #1
    7378:	63fb      	str	r3, [r7, #60]	; 0x3c
    737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    737c:	2b07      	cmp	r3, #7
    737e:	dde2      	ble.n	7346 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    7380:	2300      	movs	r3, #0
    7382:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    7384:	2333      	movs	r3, #51	; 0x33
    7386:	18fc      	adds	r4, r7, r3
    7388:	232c      	movs	r3, #44	; 0x2c
    738a:	18fa      	adds	r2, r7, r3
    738c:	6879      	ldr	r1, [r7, #4]
    738e:	233b      	movs	r3, #59	; 0x3b
    7390:	18fb      	adds	r3, r7, r3
    7392:	781b      	ldrb	r3, [r3, #0]
    7394:	0018      	movs	r0, r3
    7396:	4b92      	ldr	r3, [pc, #584]	; (75e0 <tcc_init+0x33c>)
    7398:	4798      	blx	r3
    739a:	0003      	movs	r3, r0
    739c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    739e:	2333      	movs	r3, #51	; 0x33
    73a0:	18fb      	adds	r3, r7, r3
    73a2:	781b      	ldrb	r3, [r3, #0]
    73a4:	2b00      	cmp	r3, #0
    73a6:	d003      	beq.n	73b0 <tcc_init+0x10c>
		return status;
    73a8:	2333      	movs	r3, #51	; 0x33
    73aa:	18fb      	adds	r3, r7, r3
    73ac:	781b      	ldrb	r3, [r3, #0]
    73ae:	e157      	b.n	7660 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    73b0:	232b      	movs	r3, #43	; 0x2b
    73b2:	18fa      	adds	r2, r7, r3
    73b4:	6879      	ldr	r1, [r7, #4]
    73b6:	233b      	movs	r3, #59	; 0x3b
    73b8:	18fb      	adds	r3, r7, r3
    73ba:	781b      	ldrb	r3, [r3, #0]
    73bc:	0018      	movs	r0, r3
    73be:	4b89      	ldr	r3, [pc, #548]	; (75e4 <tcc_init+0x340>)
    73c0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    73c2:	2333      	movs	r3, #51	; 0x33
    73c4:	18fc      	adds	r4, r7, r3
    73c6:	2320      	movs	r3, #32
    73c8:	18fa      	adds	r2, r7, r3
    73ca:	6879      	ldr	r1, [r7, #4]
    73cc:	233b      	movs	r3, #59	; 0x3b
    73ce:	18fb      	adds	r3, r7, r3
    73d0:	781b      	ldrb	r3, [r3, #0]
    73d2:	0018      	movs	r0, r3
    73d4:	4b84      	ldr	r3, [pc, #528]	; (75e8 <tcc_init+0x344>)
    73d6:	4798      	blx	r3
    73d8:	0003      	movs	r3, r0
    73da:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    73dc:	2333      	movs	r3, #51	; 0x33
    73de:	18fb      	adds	r3, r7, r3
    73e0:	781b      	ldrb	r3, [r3, #0]
    73e2:	2b00      	cmp	r3, #0
    73e4:	d003      	beq.n	73ee <tcc_init+0x14a>
		return status;
    73e6:	2333      	movs	r3, #51	; 0x33
    73e8:	18fb      	adds	r3, r7, r3
    73ea:	781b      	ldrb	r3, [r3, #0]
    73ec:	e138      	b.n	7660 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    73ee:	2300      	movs	r3, #0
    73f0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    73f2:	2333      	movs	r3, #51	; 0x33
    73f4:	18fc      	adds	r4, r7, r3
    73f6:	231c      	movs	r3, #28
    73f8:	18fa      	adds	r2, r7, r3
    73fa:	6879      	ldr	r1, [r7, #4]
    73fc:	233b      	movs	r3, #59	; 0x3b
    73fe:	18fb      	adds	r3, r7, r3
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	0018      	movs	r0, r3
    7404:	4b79      	ldr	r3, [pc, #484]	; (75ec <tcc_init+0x348>)
    7406:	4798      	blx	r3
    7408:	0003      	movs	r3, r0
    740a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    740c:	2333      	movs	r3, #51	; 0x33
    740e:	18fb      	adds	r3, r7, r3
    7410:	781b      	ldrb	r3, [r3, #0]
    7412:	2b00      	cmp	r3, #0
    7414:	d003      	beq.n	741e <tcc_init+0x17a>
		return status;
    7416:	2333      	movs	r3, #51	; 0x33
    7418:	18fb      	adds	r3, r7, r3
    741a:	781b      	ldrb	r3, [r3, #0]
    741c:	e120      	b.n	7660 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    741e:	2333      	movs	r3, #51	; 0x33
    7420:	18fc      	adds	r4, r7, r3
    7422:	2318      	movs	r3, #24
    7424:	18fa      	adds	r2, r7, r3
    7426:	6879      	ldr	r1, [r7, #4]
    7428:	233b      	movs	r3, #59	; 0x3b
    742a:	18fb      	adds	r3, r7, r3
    742c:	781b      	ldrb	r3, [r3, #0]
    742e:	0018      	movs	r0, r3
    7430:	4b6f      	ldr	r3, [pc, #444]	; (75f0 <tcc_init+0x34c>)
    7432:	4798      	blx	r3
    7434:	0003      	movs	r3, r0
    7436:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    7438:	2333      	movs	r3, #51	; 0x33
    743a:	18fb      	adds	r3, r7, r3
    743c:	781b      	ldrb	r3, [r3, #0]
    743e:	2b00      	cmp	r3, #0
    7440:	d003      	beq.n	744a <tcc_init+0x1a6>
		return status;
    7442:	2333      	movs	r3, #51	; 0x33
    7444:	18fb      	adds	r3, r7, r3
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	e10a      	b.n	7660 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    744a:	2300      	movs	r3, #0
    744c:	63fb      	str	r3, [r7, #60]	; 0x3c
    744e:	e009      	b.n	7464 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    7450:	68fa      	ldr	r2, [r7, #12]
    7452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7454:	009b      	lsls	r3, r3, #2
    7456:	18d3      	adds	r3, r2, r3
    7458:	3304      	adds	r3, #4
    745a:	2200      	movs	r2, #0
    745c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    745e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7460:	3301      	adds	r3, #1
    7462:	63fb      	str	r3, [r7, #60]	; 0x3c
    7464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7466:	2b0b      	cmp	r3, #11
    7468:	ddf2      	ble.n	7450 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    746a:	68fb      	ldr	r3, [r7, #12]
    746c:	2200      	movs	r2, #0
    746e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    7470:	68fb      	ldr	r3, [r7, #12]
    7472:	2200      	movs	r2, #0
    7474:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    7476:	233b      	movs	r3, #59	; 0x3b
    7478:	18fb      	adds	r3, r7, r3
    747a:	781a      	ldrb	r2, [r3, #0]
    747c:	4b5d      	ldr	r3, [pc, #372]	; (75f4 <tcc_init+0x350>)
    747e:	0092      	lsls	r2, r2, #2
    7480:	68f9      	ldr	r1, [r7, #12]
    7482:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    7484:	68fb      	ldr	r3, [r7, #12]
    7486:	68ba      	ldr	r2, [r7, #8]
    7488:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	22a0      	movs	r2, #160	; 0xa0
    748e:	5c99      	ldrb	r1, [r3, r2]
    7490:	68fb      	ldr	r3, [r7, #12]
    7492:	223c      	movs	r2, #60	; 0x3c
    7494:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    7496:	2314      	movs	r3, #20
    7498:	18fb      	adds	r3, r7, r3
    749a:	0018      	movs	r0, r3
    749c:	4b56      	ldr	r3, [pc, #344]	; (75f8 <tcc_init+0x354>)
    749e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    74a0:	687b      	ldr	r3, [r7, #4]
    74a2:	7a9a      	ldrb	r2, [r3, #10]
    74a4:	2314      	movs	r3, #20
    74a6:	18fb      	adds	r3, r7, r3
    74a8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    74aa:	233b      	movs	r3, #59	; 0x3b
    74ac:	18fb      	adds	r3, r7, r3
    74ae:	781b      	ldrb	r3, [r3, #0]
    74b0:	4a52      	ldr	r2, [pc, #328]	; (75fc <tcc_init+0x358>)
    74b2:	5cd3      	ldrb	r3, [r2, r3]
    74b4:	2214      	movs	r2, #20
    74b6:	18ba      	adds	r2, r7, r2
    74b8:	0011      	movs	r1, r2
    74ba:	0018      	movs	r0, r3
    74bc:	4b50      	ldr	r3, [pc, #320]	; (7600 <tcc_init+0x35c>)
    74be:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    74c0:	233b      	movs	r3, #59	; 0x3b
    74c2:	18fb      	adds	r3, r7, r3
    74c4:	781b      	ldrb	r3, [r3, #0]
    74c6:	4a4d      	ldr	r2, [pc, #308]	; (75fc <tcc_init+0x358>)
    74c8:	5cd3      	ldrb	r3, [r2, r3]
    74ca:	0018      	movs	r0, r3
    74cc:	4b4d      	ldr	r3, [pc, #308]	; (7604 <tcc_init+0x360>)
    74ce:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    74d0:	2300      	movs	r3, #0
    74d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    74d4:	e02d      	b.n	7532 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    74d6:	687a      	ldr	r2, [r7, #4]
    74d8:	2198      	movs	r1, #152	; 0x98
    74da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    74dc:	18d3      	adds	r3, r2, r3
    74de:	185b      	adds	r3, r3, r1
    74e0:	781b      	ldrb	r3, [r3, #0]
    74e2:	2201      	movs	r2, #1
    74e4:	4053      	eors	r3, r2
    74e6:	b2db      	uxtb	r3, r3
    74e8:	2b00      	cmp	r3, #0
    74ea:	d11e      	bne.n	752a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    74ec:	2310      	movs	r3, #16
    74ee:	18fb      	adds	r3, r7, r3
    74f0:	0018      	movs	r0, r3
    74f2:	4b45      	ldr	r3, [pc, #276]	; (7608 <tcc_init+0x364>)
    74f4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    74f6:	687b      	ldr	r3, [r7, #4]
    74f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    74fa:	321e      	adds	r2, #30
    74fc:	0092      	lsls	r2, r2, #2
    74fe:	58d3      	ldr	r3, [r2, r3]
    7500:	b2da      	uxtb	r2, r3
    7502:	2310      	movs	r3, #16
    7504:	18fb      	adds	r3, r7, r3
    7506:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    7508:	2310      	movs	r3, #16
    750a:	18fb      	adds	r3, r7, r3
    750c:	2201      	movs	r2, #1
    750e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    7510:	687b      	ldr	r3, [r7, #4]
    7512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7514:	3216      	adds	r2, #22
    7516:	0092      	lsls	r2, r2, #2
    7518:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    751a:	b2db      	uxtb	r3, r3
    751c:	2210      	movs	r2, #16
    751e:	18ba      	adds	r2, r7, r2
    7520:	0011      	movs	r1, r2
    7522:	0018      	movs	r0, r3
    7524:	4b39      	ldr	r3, [pc, #228]	; (760c <tcc_init+0x368>)
    7526:	4798      	blx	r3
    7528:	e000      	b.n	752c <tcc_init+0x288>
			continue;
    752a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    752c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    752e:	3301      	adds	r3, #1
    7530:	63fb      	str	r3, [r7, #60]	; 0x3c
    7532:	233b      	movs	r3, #59	; 0x3b
    7534:	18fb      	adds	r3, r7, r3
    7536:	781b      	ldrb	r3, [r3, #0]
    7538:	4a28      	ldr	r2, [pc, #160]	; (75dc <tcc_init+0x338>)
    753a:	5cd3      	ldrb	r3, [r2, r3]
    753c:	001a      	movs	r2, r3
    753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7540:	429a      	cmp	r2, r3
    7542:	dcc8      	bgt.n	74d6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    7544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7546:	68bb      	ldr	r3, [r7, #8]
    7548:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    754a:	46c0      	nop			; (mov r8, r8)
    754c:	68bb      	ldr	r3, [r7, #8]
    754e:	689b      	ldr	r3, [r3, #8]
    7550:	2204      	movs	r2, #4
    7552:	4013      	ands	r3, r2
    7554:	d1fa      	bne.n	754c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    7556:	68bb      	ldr	r3, [r7, #8]
    7558:	22ff      	movs	r2, #255	; 0xff
    755a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    755c:	46c0      	nop			; (mov r8, r8)
    755e:	68bb      	ldr	r3, [r7, #8]
    7560:	689b      	ldr	r3, [r3, #8]
    7562:	2204      	movs	r2, #4
    7564:	4013      	ands	r3, r2
    7566:	d1fa      	bne.n	755e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    7568:	232b      	movs	r3, #43	; 0x2b
    756a:	18fb      	adds	r3, r7, r3
    756c:	781a      	ldrb	r2, [r3, #0]
    756e:	68bb      	ldr	r3, [r7, #8]
    7570:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    7572:	2320      	movs	r3, #32
    7574:	18fb      	adds	r3, r7, r3
    7576:	681a      	ldr	r2, [r3, #0]
    7578:	68bb      	ldr	r3, [r7, #8]
    757a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    757c:	2320      	movs	r3, #32
    757e:	18fb      	adds	r3, r7, r3
    7580:	685a      	ldr	r2, [r3, #4]
    7582:	68bb      	ldr	r3, [r7, #8]
    7584:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    7586:	69fa      	ldr	r2, [r7, #28]
    7588:	68bb      	ldr	r3, [r7, #8]
    758a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    758c:	46c0      	nop			; (mov r8, r8)
    758e:	68bb      	ldr	r3, [r7, #8]
    7590:	689b      	ldr	r3, [r3, #8]
    7592:	4a1f      	ldr	r2, [pc, #124]	; (7610 <tcc_init+0x36c>)
    7594:	4013      	ands	r3, r2
    7596:	d1fa      	bne.n	758e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    7598:	69ba      	ldr	r2, [r7, #24]
    759a:	68bb      	ldr	r3, [r7, #8]
    759c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    759e:	46c0      	nop			; (mov r8, r8)
    75a0:	68bb      	ldr	r3, [r7, #8]
    75a2:	689b      	ldr	r3, [r3, #8]
    75a4:	2210      	movs	r2, #16
    75a6:	4013      	ands	r3, r2
    75a8:	d1fa      	bne.n	75a0 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    75aa:	687b      	ldr	r3, [r7, #4]
    75ac:	681a      	ldr	r2, [r3, #0]
    75ae:	68bb      	ldr	r3, [r7, #8]
    75b0:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    75b2:	46c0      	nop			; (mov r8, r8)
    75b4:	68bb      	ldr	r3, [r7, #8]
    75b6:	689b      	ldr	r3, [r3, #8]
    75b8:	4a16      	ldr	r2, [pc, #88]	; (7614 <tcc_init+0x370>)
    75ba:	4013      	ands	r3, r2
    75bc:	d1fa      	bne.n	75b4 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    75be:	687b      	ldr	r3, [r7, #4]
    75c0:	685a      	ldr	r2, [r3, #4]
    75c2:	68bb      	ldr	r3, [r7, #8]
    75c4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    75c6:	2300      	movs	r3, #0
    75c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    75ca:	e03f      	b.n	764c <tcc_init+0x3a8>
    75cc:	00006c0d 	.word	0x00006c0d
    75d0:	0001498c 	.word	0x0001498c
    75d4:	00006b89 	.word	0x00006b89
    75d8:	00014998 	.word	0x00014998
    75dc:	000149a8 	.word	0x000149a8
    75e0:	00006f19 	.word	0x00006f19
    75e4:	00006fbd 	.word	0x00006fbd
    75e8:	00007019 	.word	0x00007019
    75ec:	00007135 	.word	0x00007135
    75f0:	0000720d 	.word	0x0000720d
    75f4:	2000043c 	.word	0x2000043c
    75f8:	00006b71 	.word	0x00006b71
    75fc:	00014988 	.word	0x00014988
    7600:	0000c419 	.word	0x0000c419
    7604:	0000c45d 	.word	0x0000c45d
    7608:	00006be5 	.word	0x00006be5
    760c:	0000c705 	.word	0x0000c705
    7610:	00020040 	.word	0x00020040
    7614:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    7618:	46c0      	nop			; (mov r8, r8)
    761a:	68bb      	ldr	r3, [r7, #8]
    761c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    761e:	4912      	ldr	r1, [pc, #72]	; (7668 <tcc_init+0x3c4>)
    7620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7622:	4091      	lsls	r1, r2
    7624:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    7626:	4013      	ands	r3, r2
    7628:	d1f7      	bne.n	761a <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    762a:	687a      	ldr	r2, [r7, #4]
    762c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    762e:	3306      	adds	r3, #6
    7630:	009b      	lsls	r3, r3, #2
    7632:	18d3      	adds	r3, r2, r3
    7634:	3304      	adds	r3, #4
    7636:	681a      	ldr	r2, [r3, #0]
    7638:	68b9      	ldr	r1, [r7, #8]
    763a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    763c:	3310      	adds	r3, #16
    763e:	009b      	lsls	r3, r3, #2
    7640:	18cb      	adds	r3, r1, r3
    7642:	3304      	adds	r3, #4
    7644:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    7646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7648:	3301      	adds	r3, #1
    764a:	63fb      	str	r3, [r7, #60]	; 0x3c
    764c:	233b      	movs	r3, #59	; 0x3b
    764e:	18fb      	adds	r3, r7, r3
    7650:	781b      	ldrb	r3, [r3, #0]
    7652:	4a06      	ldr	r2, [pc, #24]	; (766c <tcc_init+0x3c8>)
    7654:	5cd3      	ldrb	r3, [r2, r3]
    7656:	001a      	movs	r2, r3
    7658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    765a:	429a      	cmp	r2, r3
    765c:	dcdc      	bgt.n	7618 <tcc_init+0x374>
	}

	return STATUS_OK;
    765e:	2300      	movs	r3, #0
}
    7660:	0018      	movs	r0, r3
    7662:	46bd      	mov	sp, r7
    7664:	b011      	add	sp, #68	; 0x44
    7666:	bd90      	pop	{r4, r7, pc}
    7668:	00080100 	.word	0x00080100
    766c:	000149a4 	.word	0x000149a4

00007670 <system_interrupt_enable>:
{
    7670:	b580      	push	{r7, lr}
    7672:	b082      	sub	sp, #8
    7674:	af00      	add	r7, sp, #0
    7676:	0002      	movs	r2, r0
    7678:	1dfb      	adds	r3, r7, #7
    767a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    767c:	4b06      	ldr	r3, [pc, #24]	; (7698 <system_interrupt_enable+0x28>)
    767e:	1dfa      	adds	r2, r7, #7
    7680:	7812      	ldrb	r2, [r2, #0]
    7682:	0011      	movs	r1, r2
    7684:	221f      	movs	r2, #31
    7686:	400a      	ands	r2, r1
    7688:	2101      	movs	r1, #1
    768a:	4091      	lsls	r1, r2
    768c:	000a      	movs	r2, r1
    768e:	601a      	str	r2, [r3, #0]
}
    7690:	46c0      	nop			; (mov r8, r8)
    7692:	46bd      	mov	sp, r7
    7694:	b002      	add	sp, #8
    7696:	bd80      	pop	{r7, pc}
    7698:	e000e100 	.word	0xe000e100

0000769c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    769c:	b580      	push	{r7, lr}
    769e:	b082      	sub	sp, #8
    76a0:	af00      	add	r7, sp, #0
    76a2:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    76a4:	4a04      	ldr	r2, [pc, #16]	; (76b8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    76a6:	687b      	ldr	r3, [r7, #4]
    76a8:	18d3      	adds	r3, r2, r3
    76aa:	781b      	ldrb	r3, [r3, #0]
    76ac:	b25b      	sxtb	r3, r3
}
    76ae:	0018      	movs	r0, r3
    76b0:	46bd      	mov	sp, r7
    76b2:	b002      	add	sp, #8
    76b4:	bd80      	pop	{r7, pc}
    76b6:	46c0      	nop			; (mov r8, r8)
    76b8:	20000004 	.word	0x20000004

000076bc <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    76bc:	b580      	push	{r7, lr}
    76be:	b084      	sub	sp, #16
    76c0:	af00      	add	r7, sp, #0
    76c2:	60f8      	str	r0, [r7, #12]
    76c4:	60b9      	str	r1, [r7, #8]
    76c6:	1dfb      	adds	r3, r7, #7
    76c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    76ca:	1dfb      	adds	r3, r7, #7
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	68fa      	ldr	r2, [r7, #12]
    76d0:	009b      	lsls	r3, r3, #2
    76d2:	18d3      	adds	r3, r2, r3
    76d4:	3304      	adds	r3, #4
    76d6:	68ba      	ldr	r2, [r7, #8]
    76d8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    76da:	68fb      	ldr	r3, [r7, #12]
    76dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    76de:	1dfb      	adds	r3, r7, #7
    76e0:	7819      	ldrb	r1, [r3, #0]
    76e2:	4b05      	ldr	r3, [pc, #20]	; (76f8 <tcc_register_callback+0x3c>)
    76e4:	0089      	lsls	r1, r1, #2
    76e6:	58cb      	ldr	r3, [r1, r3]
    76e8:	431a      	orrs	r2, r3
    76ea:	68fb      	ldr	r3, [r7, #12]
    76ec:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    76ee:	2300      	movs	r3, #0
}
    76f0:	0018      	movs	r0, r3
    76f2:	46bd      	mov	sp, r7
    76f4:	b004      	add	sp, #16
    76f6:	bd80      	pop	{r7, pc}
    76f8:	000149ac 	.word	0x000149ac

000076fc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    76fc:	b580      	push	{r7, lr}
    76fe:	b082      	sub	sp, #8
    7700:	af00      	add	r7, sp, #0
    7702:	6078      	str	r0, [r7, #4]
    7704:	000a      	movs	r2, r1
    7706:	1cfb      	adds	r3, r7, #3
    7708:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    770a:	687b      	ldr	r3, [r7, #4]
    770c:	681b      	ldr	r3, [r3, #0]
    770e:	0018      	movs	r0, r3
    7710:	4b0f      	ldr	r3, [pc, #60]	; (7750 <tcc_enable_callback+0x54>)
    7712:	4798      	blx	r3
    7714:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    7716:	0018      	movs	r0, r3
    7718:	4b0e      	ldr	r3, [pc, #56]	; (7754 <tcc_enable_callback+0x58>)
    771a:	4798      	blx	r3
    771c:	0003      	movs	r3, r0
    771e:	0018      	movs	r0, r3
    7720:	4b0d      	ldr	r3, [pc, #52]	; (7758 <tcc_enable_callback+0x5c>)
    7722:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    7724:	687b      	ldr	r3, [r7, #4]
    7726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7728:	1cfb      	adds	r3, r7, #3
    772a:	7819      	ldrb	r1, [r3, #0]
    772c:	4b0b      	ldr	r3, [pc, #44]	; (775c <tcc_enable_callback+0x60>)
    772e:	0089      	lsls	r1, r1, #2
    7730:	58cb      	ldr	r3, [r1, r3]
    7732:	431a      	orrs	r2, r3
    7734:	687b      	ldr	r3, [r7, #4]
    7736:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    7738:	687b      	ldr	r3, [r7, #4]
    773a:	681b      	ldr	r3, [r3, #0]
    773c:	1cfa      	adds	r2, r7, #3
    773e:	7811      	ldrb	r1, [r2, #0]
    7740:	4a06      	ldr	r2, [pc, #24]	; (775c <tcc_enable_callback+0x60>)
    7742:	0089      	lsls	r1, r1, #2
    7744:	588a      	ldr	r2, [r1, r2]
    7746:	629a      	str	r2, [r3, #40]	; 0x28
}
    7748:	46c0      	nop			; (mov r8, r8)
    774a:	46bd      	mov	sp, r7
    774c:	b002      	add	sp, #8
    774e:	bd80      	pop	{r7, pc}
    7750:	00006c0d 	.word	0x00006c0d
    7754:	0000769d 	.word	0x0000769d
    7758:	00007671 	.word	0x00007671
    775c:	000149ac 	.word	0x000149ac

00007760 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    7760:	b580      	push	{r7, lr}
    7762:	af00      	add	r7, sp, #0
    7764:	2000      	movs	r0, #0
    7766:	4b02      	ldr	r3, [pc, #8]	; (7770 <TCC0_Handler+0x10>)
    7768:	4798      	blx	r3
    776a:	46c0      	nop			; (mov r8, r8)
    776c:	46bd      	mov	sp, r7
    776e:	bd80      	pop	{r7, pc}
    7770:	0000779d 	.word	0x0000779d

00007774 <TCC1_Handler>:
    7774:	b580      	push	{r7, lr}
    7776:	af00      	add	r7, sp, #0
    7778:	2001      	movs	r0, #1
    777a:	4b02      	ldr	r3, [pc, #8]	; (7784 <TCC1_Handler+0x10>)
    777c:	4798      	blx	r3
    777e:	46c0      	nop			; (mov r8, r8)
    7780:	46bd      	mov	sp, r7
    7782:	bd80      	pop	{r7, pc}
    7784:	0000779d 	.word	0x0000779d

00007788 <TCC2_Handler>:
    7788:	b580      	push	{r7, lr}
    778a:	af00      	add	r7, sp, #0
    778c:	2002      	movs	r0, #2
    778e:	4b02      	ldr	r3, [pc, #8]	; (7798 <TCC2_Handler+0x10>)
    7790:	4798      	blx	r3
    7792:	46c0      	nop			; (mov r8, r8)
    7794:	46bd      	mov	sp, r7
    7796:	bd80      	pop	{r7, pc}
    7798:	0000779d 	.word	0x0000779d

0000779c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    779c:	b580      	push	{r7, lr}
    779e:	b086      	sub	sp, #24
    77a0:	af00      	add	r7, sp, #0
    77a2:	0002      	movs	r2, r0
    77a4:	1dfb      	adds	r3, r7, #7
    77a6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    77a8:	1dfb      	adds	r3, r7, #7
    77aa:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    77ac:	4b18      	ldr	r3, [pc, #96]	; (7810 <_tcc_interrupt_handler+0x74>)
    77ae:	0092      	lsls	r2, r2, #2
    77b0:	58d3      	ldr	r3, [r2, r3]
    77b2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    77b4:	693b      	ldr	r3, [r7, #16]
    77b6:	681b      	ldr	r3, [r3, #0]
    77b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    77ba:	693b      	ldr	r3, [r7, #16]
    77bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    77be:	401a      	ands	r2, r3
			module->enable_callback_mask);
    77c0:	693b      	ldr	r3, [r7, #16]
    77c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    77c4:	4013      	ands	r3, r2
    77c6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    77c8:	2300      	movs	r3, #0
    77ca:	617b      	str	r3, [r7, #20]
    77cc:	e019      	b.n	7802 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    77ce:	4b11      	ldr	r3, [pc, #68]	; (7814 <_tcc_interrupt_handler+0x78>)
    77d0:	697a      	ldr	r2, [r7, #20]
    77d2:	0092      	lsls	r2, r2, #2
    77d4:	58d3      	ldr	r3, [r2, r3]
    77d6:	68fa      	ldr	r2, [r7, #12]
    77d8:	4013      	ands	r3, r2
    77da:	d00f      	beq.n	77fc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    77dc:	693a      	ldr	r2, [r7, #16]
    77de:	697b      	ldr	r3, [r7, #20]
    77e0:	009b      	lsls	r3, r3, #2
    77e2:	18d3      	adds	r3, r2, r3
    77e4:	3304      	adds	r3, #4
    77e6:	681b      	ldr	r3, [r3, #0]
    77e8:	693a      	ldr	r2, [r7, #16]
    77ea:	0010      	movs	r0, r2
    77ec:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    77ee:	693b      	ldr	r3, [r7, #16]
    77f0:	681b      	ldr	r3, [r3, #0]
    77f2:	4a08      	ldr	r2, [pc, #32]	; (7814 <_tcc_interrupt_handler+0x78>)
    77f4:	6979      	ldr	r1, [r7, #20]
    77f6:	0089      	lsls	r1, r1, #2
    77f8:	588a      	ldr	r2, [r1, r2]
    77fa:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    77fc:	697b      	ldr	r3, [r7, #20]
    77fe:	3301      	adds	r3, #1
    7800:	617b      	str	r3, [r7, #20]
    7802:	697b      	ldr	r3, [r7, #20]
    7804:	2b0b      	cmp	r3, #11
    7806:	dde2      	ble.n	77ce <_tcc_interrupt_handler+0x32>
		}
	}
}
    7808:	46c0      	nop			; (mov r8, r8)
    780a:	46bd      	mov	sp, r7
    780c:	b006      	add	sp, #24
    780e:	bd80      	pop	{r7, pc}
    7810:	2000043c 	.word	0x2000043c
    7814:	000149ac 	.word	0x000149ac

00007818 <stream_writer_init>:
#include "iot/stream_writer.h"
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    7818:	b580      	push	{r7, lr}
    781a:	b084      	sub	sp, #16
    781c:	af00      	add	r7, sp, #0
    781e:	60f8      	str	r0, [r7, #12]
    7820:	60b9      	str	r1, [r7, #8]
    7822:	607a      	str	r2, [r7, #4]
    7824:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    7826:	68fb      	ldr	r3, [r7, #12]
    7828:	687a      	ldr	r2, [r7, #4]
    782a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    782c:	68fb      	ldr	r3, [r7, #12]
    782e:	68ba      	ldr	r2, [r7, #8]
    7830:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    7832:	68fb      	ldr	r3, [r7, #12]
    7834:	2200      	movs	r2, #0
    7836:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    7838:	68fb      	ldr	r3, [r7, #12]
    783a:	683a      	ldr	r2, [r7, #0]
    783c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    783e:	68fb      	ldr	r3, [r7, #12]
    7840:	69ba      	ldr	r2, [r7, #24]
    7842:	60da      	str	r2, [r3, #12]
}
    7844:	46c0      	nop			; (mov r8, r8)
    7846:	46bd      	mov	sp, r7
    7848:	b004      	add	sp, #16
    784a:	bd80      	pop	{r7, pc}

0000784c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    784c:	b580      	push	{r7, lr}
    784e:	b084      	sub	sp, #16
    7850:	af00      	add	r7, sp, #0
    7852:	6078      	str	r0, [r7, #4]
    7854:	000a      	movs	r2, r1
    7856:	1cfb      	adds	r3, r7, #3
    7858:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    785a:	687b      	ldr	r3, [r7, #4]
    785c:	681a      	ldr	r2, [r3, #0]
    785e:	687b      	ldr	r3, [r7, #4]
    7860:	685b      	ldr	r3, [r3, #4]
    7862:	1ad3      	subs	r3, r2, r3
    7864:	60fb      	str	r3, [r7, #12]

	if (remain < 1) {
    7866:	68fb      	ldr	r3, [r7, #12]
    7868:	2b00      	cmp	r3, #0
    786a:	dc03      	bgt.n	7874 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    786c:	687b      	ldr	r3, [r7, #4]
    786e:	0018      	movs	r0, r3
    7870:	4b08      	ldr	r3, [pc, #32]	; (7894 <stream_writer_send_8+0x48>)
    7872:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    7874:	687b      	ldr	r3, [r7, #4]
    7876:	6919      	ldr	r1, [r3, #16]
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	685b      	ldr	r3, [r3, #4]
    787c:	1c58      	adds	r0, r3, #1
    787e:	687a      	ldr	r2, [r7, #4]
    7880:	6050      	str	r0, [r2, #4]
    7882:	18cb      	adds	r3, r1, r3
    7884:	1cfa      	adds	r2, r7, #3
    7886:	7812      	ldrb	r2, [r2, #0]
    7888:	701a      	strb	r2, [r3, #0]
}
    788a:	46c0      	nop			; (mov r8, r8)
    788c:	46bd      	mov	sp, r7
    788e:	b004      	add	sp, #16
    7890:	bd80      	pop	{r7, pc}
    7892:	46c0      	nop			; (mov r8, r8)
    7894:	00007915 	.word	0x00007915

00007898 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    7898:	b580      	push	{r7, lr}
    789a:	b082      	sub	sp, #8
    789c:	af00      	add	r7, sp, #0
    789e:	6078      	str	r0, [r7, #4]
    78a0:	000a      	movs	r2, r1
    78a2:	1cbb      	adds	r3, r7, #2
    78a4:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    78a6:	1cbb      	adds	r3, r7, #2
    78a8:	2200      	movs	r2, #0
    78aa:	5e9b      	ldrsh	r3, [r3, r2]
    78ac:	121b      	asrs	r3, r3, #8
    78ae:	b21b      	sxth	r3, r3
    78b0:	b25a      	sxtb	r2, r3
    78b2:	687b      	ldr	r3, [r7, #4]
    78b4:	0011      	movs	r1, r2
    78b6:	0018      	movs	r0, r3
    78b8:	4b06      	ldr	r3, [pc, #24]	; (78d4 <stream_writer_send_16BE+0x3c>)
    78ba:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
    78bc:	1cbb      	adds	r3, r7, #2
    78be:	881b      	ldrh	r3, [r3, #0]
    78c0:	b25a      	sxtb	r2, r3
    78c2:	687b      	ldr	r3, [r7, #4]
    78c4:	0011      	movs	r1, r2
    78c6:	0018      	movs	r0, r3
    78c8:	4b02      	ldr	r3, [pc, #8]	; (78d4 <stream_writer_send_16BE+0x3c>)
    78ca:	4798      	blx	r3
}
    78cc:	46c0      	nop			; (mov r8, r8)
    78ce:	46bd      	mov	sp, r7
    78d0:	b002      	add	sp, #8
    78d2:	bd80      	pop	{r7, pc}
    78d4:	0000784d 	.word	0x0000784d

000078d8 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    78d8:	b580      	push	{r7, lr}
    78da:	b084      	sub	sp, #16
    78dc:	af00      	add	r7, sp, #0
    78de:	60f8      	str	r0, [r7, #12]
    78e0:	60b9      	str	r1, [r7, #8]
    78e2:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    78e4:	e00d      	b.n	7902 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    78e6:	68bb      	ldr	r3, [r7, #8]
    78e8:	781b      	ldrb	r3, [r3, #0]
    78ea:	b25a      	sxtb	r2, r3
    78ec:	68fb      	ldr	r3, [r7, #12]
    78ee:	0011      	movs	r1, r2
    78f0:	0018      	movs	r0, r3
    78f2:	4b07      	ldr	r3, [pc, #28]	; (7910 <stream_writer_send_buffer+0x38>)
    78f4:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    78f6:	687b      	ldr	r3, [r7, #4]
    78f8:	3b01      	subs	r3, #1
    78fa:	607b      	str	r3, [r7, #4]
    78fc:	68bb      	ldr	r3, [r7, #8]
    78fe:	3301      	adds	r3, #1
    7900:	60bb      	str	r3, [r7, #8]
    7902:	687b      	ldr	r3, [r7, #4]
    7904:	2b00      	cmp	r3, #0
    7906:	d1ee      	bne.n	78e6 <stream_writer_send_buffer+0xe>
	}
}
    7908:	46c0      	nop			; (mov r8, r8)
    790a:	46bd      	mov	sp, r7
    790c:	b004      	add	sp, #16
    790e:	bd80      	pop	{r7, pc}
    7910:	0000784d 	.word	0x0000784d

00007914 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    7914:	b590      	push	{r4, r7, lr}
    7916:	b083      	sub	sp, #12
    7918:	af00      	add	r7, sp, #0
    791a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	685b      	ldr	r3, [r3, #4]
    7920:	2b00      	cmp	r3, #0
    7922:	d00c      	beq.n	793e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    7924:	687b      	ldr	r3, [r7, #4]
    7926:	689c      	ldr	r4, [r3, #8]
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	68d8      	ldr	r0, [r3, #12]
    792c:	687b      	ldr	r3, [r7, #4]
    792e:	6919      	ldr	r1, [r3, #16]
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	685b      	ldr	r3, [r3, #4]
    7934:	001a      	movs	r2, r3
    7936:	47a0      	blx	r4
		writer->written = 0;
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	2200      	movs	r2, #0
    793c:	605a      	str	r2, [r3, #4]
	}
}
    793e:	46c0      	nop			; (mov r8, r8)
    7940:	46bd      	mov	sp, r7
    7942:	b003      	add	sp, #12
    7944:	bd90      	pop	{r4, r7, pc}
	...

00007948 <system_cpu_clock_get_hz>:
{
    7948:	b580      	push	{r7, lr}
    794a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    794c:	2000      	movs	r0, #0
    794e:	4b05      	ldr	r3, [pc, #20]	; (7964 <system_cpu_clock_get_hz+0x1c>)
    7950:	4798      	blx	r3
    7952:	0002      	movs	r2, r0
    7954:	4b04      	ldr	r3, [pc, #16]	; (7968 <system_cpu_clock_get_hz+0x20>)
    7956:	7a1b      	ldrb	r3, [r3, #8]
    7958:	b2db      	uxtb	r3, r3
    795a:	40da      	lsrs	r2, r3
    795c:	0013      	movs	r3, r2
}
    795e:	0018      	movs	r0, r3
    7960:	46bd      	mov	sp, r7
    7962:	bd80      	pop	{r7, pc}
    7964:	0000c341 	.word	0x0000c341
    7968:	40000400 	.word	0x40000400

0000796c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    796c:	b580      	push	{r7, lr}
    796e:	b084      	sub	sp, #16
    7970:	af00      	add	r7, sp, #0
    7972:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    7974:	687b      	ldr	r3, [r7, #4]
    7976:	681b      	ldr	r3, [r3, #0]
    7978:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    797a:	46c0      	nop			; (mov r8, r8)
    797c:	68fb      	ldr	r3, [r7, #12]
    797e:	689b      	ldr	r3, [r3, #8]
    7980:	2202      	movs	r2, #2
    7982:	4013      	ands	r3, r2
    7984:	d1fa      	bne.n	797c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7986:	68fb      	ldr	r3, [r7, #12]
    7988:	681b      	ldr	r3, [r3, #0]
    798a:	2202      	movs	r2, #2
    798c:	431a      	orrs	r2, r3
    798e:	68fb      	ldr	r3, [r7, #12]
    7990:	601a      	str	r2, [r3, #0]
}
    7992:	46c0      	nop			; (mov r8, r8)
    7994:	46bd      	mov	sp, r7
    7996:	b004      	add	sp, #16
    7998:	bd80      	pop	{r7, pc}
	...

0000799c <sw_timer_tcc_callback>:
 * This function performs to the increasing the tick count.
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    799c:	b580      	push	{r7, lr}
    799e:	b082      	sub	sp, #8
    79a0:	af00      	add	r7, sp, #0
    79a2:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    79a4:	4b04      	ldr	r3, [pc, #16]	; (79b8 <sw_timer_tcc_callback+0x1c>)
    79a6:	681b      	ldr	r3, [r3, #0]
    79a8:	1c5a      	adds	r2, r3, #1
    79aa:	4b03      	ldr	r3, [pc, #12]	; (79b8 <sw_timer_tcc_callback+0x1c>)
    79ac:	601a      	str	r2, [r3, #0]
}
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	46bd      	mov	sp, r7
    79b2:	b002      	add	sp, #8
    79b4:	bd80      	pop	{r7, pc}
    79b6:	46c0      	nop			; (mov r8, r8)
    79b8:	20000244 	.word	0x20000244

000079bc <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    79bc:	b580      	push	{r7, lr}
    79be:	b082      	sub	sp, #8
    79c0:	af00      	add	r7, sp, #0
    79c2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	2264      	movs	r2, #100	; 0x64
    79c8:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    79ca:	687b      	ldr	r3, [r7, #4]
    79cc:	2200      	movs	r2, #0
    79ce:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	2200      	movs	r2, #0
    79d4:	705a      	strb	r2, [r3, #1]
}
    79d6:	46c0      	nop			; (mov r8, r8)
    79d8:	46bd      	mov	sp, r7
    79da:	b002      	add	sp, #8
    79dc:	bd80      	pop	{r7, pc}
	...

000079e0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    79e0:	b590      	push	{r4, r7, lr}
    79e2:	b0b1      	sub	sp, #196	; 0xc4
    79e4:	af00      	add	r7, sp, #0
    79e6:	6078      	str	r0, [r7, #4]
    79e8:	6039      	str	r1, [r7, #0]
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    79ea:	230c      	movs	r3, #12
    79ec:	18fb      	adds	r3, r7, r3
    79ee:	4a2e      	ldr	r2, [pc, #184]	; (7aa8 <sw_timer_init+0xc8>)
    79f0:	ca13      	ldmia	r2!, {r0, r1, r4}
    79f2:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    79f4:	683b      	ldr	r3, [r7, #0]
    79f6:	885b      	ldrh	r3, [r3, #2]
    79f8:	001a      	movs	r2, r3
    79fa:	687b      	ldr	r3, [r7, #4]
    79fc:	655a      	str	r2, [r3, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    79fe:	687b      	ldr	r3, [r7, #4]
    7a00:	3314      	adds	r3, #20
    7a02:	22bc      	movs	r2, #188	; 0xbc
    7a04:	18ba      	adds	r2, r7, r2
    7a06:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    7a08:	683b      	ldr	r3, [r7, #0]
    7a0a:	781b      	ldrb	r3, [r3, #0]
    7a0c:	001a      	movs	r2, r3
    7a0e:	230c      	movs	r3, #12
    7a10:	18fb      	adds	r3, r7, r3
    7a12:	0092      	lsls	r2, r2, #2
    7a14:	58d2      	ldr	r2, [r2, r3]
    7a16:	2318      	movs	r3, #24
    7a18:	18fb      	adds	r3, r7, r3
    7a1a:	0011      	movs	r1, r2
    7a1c:	0018      	movs	r0, r3
    7a1e:	4b23      	ldr	r3, [pc, #140]	; (7aac <sw_timer_init+0xcc>)
    7a20:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    7a22:	4b23      	ldr	r3, [pc, #140]	; (7ab0 <sw_timer_init+0xd0>)
    7a24:	4798      	blx	r3
    7a26:	0004      	movs	r4, r0
    7a28:	683b      	ldr	r3, [r7, #0]
    7a2a:	885b      	ldrh	r3, [r3, #2]
    7a2c:	001a      	movs	r2, r3
    7a2e:	4b21      	ldr	r3, [pc, #132]	; (7ab4 <sw_timer_init+0xd4>)
    7a30:	0011      	movs	r1, r2
    7a32:	22fa      	movs	r2, #250	; 0xfa
    7a34:	0210      	lsls	r0, r2, #8
    7a36:	4798      	blx	r3
    7a38:	0003      	movs	r3, r0
    7a3a:	001a      	movs	r2, r3
    7a3c:	4b1e      	ldr	r3, [pc, #120]	; (7ab8 <sw_timer_init+0xd8>)
    7a3e:	0011      	movs	r1, r2
    7a40:	0020      	movs	r0, r4
    7a42:	4798      	blx	r3
    7a44:	0003      	movs	r3, r0
    7a46:	001a      	movs	r2, r3
    7a48:	2318      	movs	r3, #24
    7a4a:	18fb      	adds	r3, r7, r3
    7a4c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    7a4e:	2318      	movs	r3, #24
    7a50:	18fb      	adds	r3, r7, r3
    7a52:	2205      	movs	r2, #5
    7a54:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    7a56:	683b      	ldr	r3, [r7, #0]
    7a58:	781b      	ldrb	r3, [r3, #0]
    7a5a:	001a      	movs	r2, r3
    7a5c:	230c      	movs	r3, #12
    7a5e:	18fb      	adds	r3, r7, r3
    7a60:	0092      	lsls	r2, r2, #2
    7a62:	58d1      	ldr	r1, [r2, r3]
    7a64:	2318      	movs	r3, #24
    7a66:	18fa      	adds	r2, r7, r3
    7a68:	23bc      	movs	r3, #188	; 0xbc
    7a6a:	18fb      	adds	r3, r7, r3
    7a6c:	681b      	ldr	r3, [r3, #0]
    7a6e:	0018      	movs	r0, r3
    7a70:	4b12      	ldr	r3, [pc, #72]	; (7abc <sw_timer_init+0xdc>)
    7a72:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    7a74:	683b      	ldr	r3, [r7, #0]
    7a76:	785b      	ldrb	r3, [r3, #1]
    7a78:	3308      	adds	r3, #8
    7a7a:	b2da      	uxtb	r2, r3
    7a7c:	4910      	ldr	r1, [pc, #64]	; (7ac0 <sw_timer_init+0xe0>)
    7a7e:	23bc      	movs	r3, #188	; 0xbc
    7a80:	18fb      	adds	r3, r7, r3
    7a82:	681b      	ldr	r3, [r3, #0]
    7a84:	0018      	movs	r0, r3
    7a86:	4b0f      	ldr	r3, [pc, #60]	; (7ac4 <sw_timer_init+0xe4>)
    7a88:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    7a8a:	683b      	ldr	r3, [r7, #0]
    7a8c:	785b      	ldrb	r3, [r3, #1]
    7a8e:	3308      	adds	r3, #8
    7a90:	b2da      	uxtb	r2, r3
    7a92:	23bc      	movs	r3, #188	; 0xbc
    7a94:	18fb      	adds	r3, r7, r3
    7a96:	681b      	ldr	r3, [r3, #0]
    7a98:	0011      	movs	r1, r2
    7a9a:	0018      	movs	r0, r3
    7a9c:	4b0a      	ldr	r3, [pc, #40]	; (7ac8 <sw_timer_init+0xe8>)
    7a9e:	4798      	blx	r3
}
    7aa0:	46c0      	nop			; (mov r8, r8)
    7aa2:	46bd      	mov	sp, r7
    7aa4:	b031      	add	sp, #196	; 0xc4
    7aa6:	bd90      	pop	{r4, r7, pc}
    7aa8:	000149dc 	.word	0x000149dc
    7aac:	00006c49 	.word	0x00006c49
    7ab0:	00007949 	.word	0x00007949
    7ab4:	00011471 	.word	0x00011471
    7ab8:	0001135d 	.word	0x0001135d
    7abc:	000072a5 	.word	0x000072a5
    7ac0:	0000799d 	.word	0x0000799d
    7ac4:	000076bd 	.word	0x000076bd
    7ac8:	000076fd 	.word	0x000076fd

00007acc <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    7acc:	b580      	push	{r7, lr}
    7ace:	b084      	sub	sp, #16
    7ad0:	af00      	add	r7, sp, #0
    7ad2:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;

	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;
    7ad4:	687b      	ldr	r3, [r7, #4]
    7ad6:	3314      	adds	r3, #20
    7ad8:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    7ada:	68fb      	ldr	r3, [r7, #12]
    7adc:	0018      	movs	r0, r3
    7ade:	4b03      	ldr	r3, [pc, #12]	; (7aec <sw_timer_enable+0x20>)
    7ae0:	4798      	blx	r3
}
    7ae2:	46c0      	nop			; (mov r8, r8)
    7ae4:	46bd      	mov	sp, r7
    7ae6:	b004      	add	sp, #16
    7ae8:	bd80      	pop	{r7, pc}
    7aea:	46c0      	nop			; (mov r8, r8)
    7aec:	0000796d 	.word	0x0000796d

00007af0 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    7af0:	b580      	push	{r7, lr}
    7af2:	b086      	sub	sp, #24
    7af4:	af00      	add	r7, sp, #0
    7af6:	60f8      	str	r0, [r7, #12]
    7af8:	60b9      	str	r1, [r7, #8]
    7afa:	607a      	str	r2, [r7, #4]
    7afc:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    7afe:	2300      	movs	r3, #0
    7b00:	617b      	str	r3, [r7, #20]
    7b02:	e032      	b.n	7b6a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    7b04:	68f9      	ldr	r1, [r7, #12]
    7b06:	697a      	ldr	r2, [r7, #20]
    7b08:	0013      	movs	r3, r2
    7b0a:	009b      	lsls	r3, r3, #2
    7b0c:	189b      	adds	r3, r3, r2
    7b0e:	009b      	lsls	r3, r3, #2
    7b10:	5c5b      	ldrb	r3, [r3, r1]
    7b12:	07db      	lsls	r3, r3, #31
    7b14:	0fdb      	lsrs	r3, r3, #31
    7b16:	b2db      	uxtb	r3, r3
    7b18:	2b00      	cmp	r3, #0
    7b1a:	d123      	bne.n	7b64 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    7b1c:	697a      	ldr	r2, [r7, #20]
    7b1e:	0013      	movs	r3, r2
    7b20:	009b      	lsls	r3, r3, #2
    7b22:	189b      	adds	r3, r3, r2
    7b24:	009b      	lsls	r3, r3, #2
    7b26:	68fa      	ldr	r2, [r7, #12]
    7b28:	18d3      	adds	r3, r2, r3
    7b2a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    7b2c:	693b      	ldr	r3, [r7, #16]
    7b2e:	68ba      	ldr	r2, [r7, #8]
    7b30:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    7b32:	693b      	ldr	r3, [r7, #16]
    7b34:	781a      	ldrb	r2, [r3, #0]
    7b36:	2102      	movs	r1, #2
    7b38:	438a      	bics	r2, r1
    7b3a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    7b3c:	693b      	ldr	r3, [r7, #16]
    7b3e:	687a      	ldr	r2, [r7, #4]
    7b40:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    7b42:	68fb      	ldr	r3, [r7, #12]
    7b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7b46:	4b0d      	ldr	r3, [pc, #52]	; (7b7c <sw_timer_register_callback+0x8c>)
    7b48:	0011      	movs	r1, r2
    7b4a:	6838      	ldr	r0, [r7, #0]
    7b4c:	4798      	blx	r3
    7b4e:	0003      	movs	r3, r0
    7b50:	001a      	movs	r2, r3
    7b52:	693b      	ldr	r3, [r7, #16]
    7b54:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    7b56:	693b      	ldr	r3, [r7, #16]
    7b58:	781a      	ldrb	r2, [r3, #0]
    7b5a:	2101      	movs	r1, #1
    7b5c:	430a      	orrs	r2, r1
    7b5e:	701a      	strb	r2, [r3, #0]
			return index;
    7b60:	697b      	ldr	r3, [r7, #20]
    7b62:	e007      	b.n	7b74 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    7b64:	697b      	ldr	r3, [r7, #20]
    7b66:	3301      	adds	r3, #1
    7b68:	617b      	str	r3, [r7, #20]
    7b6a:	697b      	ldr	r3, [r7, #20]
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	ddc9      	ble.n	7b04 <sw_timer_register_callback+0x14>
		}
	}

	return -1;
    7b70:	2301      	movs	r3, #1
    7b72:	425b      	negs	r3, r3
}
    7b74:	0018      	movs	r0, r3
    7b76:	46bd      	mov	sp, r7
    7b78:	b006      	add	sp, #24
    7b7a:	bd80      	pop	{r7, pc}
    7b7c:	0001135d 	.word	0x0001135d

00007b80 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    7b80:	b580      	push	{r7, lr}
    7b82:	b086      	sub	sp, #24
    7b84:	af00      	add	r7, sp, #0
    7b86:	60f8      	str	r0, [r7, #12]
    7b88:	60b9      	str	r1, [r7, #8]
    7b8a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    7b8c:	68ba      	ldr	r2, [r7, #8]
    7b8e:	0013      	movs	r3, r2
    7b90:	009b      	lsls	r3, r3, #2
    7b92:	189b      	adds	r3, r3, r2
    7b94:	009b      	lsls	r3, r3, #2
    7b96:	68fa      	ldr	r2, [r7, #12]
    7b98:	18d3      	adds	r3, r2, r3
    7b9a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    7b9c:	697b      	ldr	r3, [r7, #20]
    7b9e:	781a      	ldrb	r2, [r3, #0]
    7ba0:	2102      	movs	r1, #2
    7ba2:	430a      	orrs	r2, r1
    7ba4:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    7ba6:	68fb      	ldr	r3, [r7, #12]
    7ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7baa:	4b07      	ldr	r3, [pc, #28]	; (7bc8 <sw_timer_enable_callback+0x48>)
    7bac:	0011      	movs	r1, r2
    7bae:	6878      	ldr	r0, [r7, #4]
    7bb0:	4798      	blx	r3
    7bb2:	0003      	movs	r3, r0
    7bb4:	001a      	movs	r2, r3
    7bb6:	4b05      	ldr	r3, [pc, #20]	; (7bcc <sw_timer_enable_callback+0x4c>)
    7bb8:	681b      	ldr	r3, [r3, #0]
    7bba:	18d2      	adds	r2, r2, r3
    7bbc:	697b      	ldr	r3, [r7, #20]
    7bbe:	611a      	str	r2, [r3, #16]
}
    7bc0:	46c0      	nop			; (mov r8, r8)
    7bc2:	46bd      	mov	sp, r7
    7bc4:	b006      	add	sp, #24
    7bc6:	bd80      	pop	{r7, pc}
    7bc8:	0001135d 	.word	0x0001135d
    7bcc:	20000244 	.word	0x20000244

00007bd0 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    7bd0:	b580      	push	{r7, lr}
    7bd2:	b084      	sub	sp, #16
    7bd4:	af00      	add	r7, sp, #0
    7bd6:	6078      	str	r0, [r7, #4]
    7bd8:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    7bda:	683a      	ldr	r2, [r7, #0]
    7bdc:	0013      	movs	r3, r2
    7bde:	009b      	lsls	r3, r3, #2
    7be0:	189b      	adds	r3, r3, r2
    7be2:	009b      	lsls	r3, r3, #2
    7be4:	687a      	ldr	r2, [r7, #4]
    7be6:	18d3      	adds	r3, r2, r3
    7be8:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    7bea:	68fb      	ldr	r3, [r7, #12]
    7bec:	781a      	ldrb	r2, [r3, #0]
    7bee:	2102      	movs	r1, #2
    7bf0:	438a      	bics	r2, r1
    7bf2:	701a      	strb	r2, [r3, #0]
}
    7bf4:	46c0      	nop			; (mov r8, r8)
    7bf6:	46bd      	mov	sp, r7
    7bf8:	b004      	add	sp, #16
    7bfa:	bd80      	pop	{r7, pc}

00007bfc <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    7bfc:	b590      	push	{r4, r7, lr}
    7bfe:	b085      	sub	sp, #20
    7c00:	af00      	add	r7, sp, #0
    7c02:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    7c04:	2300      	movs	r3, #0
    7c06:	60fb      	str	r3, [r7, #12]
    7c08:	e053      	b.n	7cb2 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    7c0a:	6879      	ldr	r1, [r7, #4]
    7c0c:	68fa      	ldr	r2, [r7, #12]
    7c0e:	0013      	movs	r3, r2
    7c10:	009b      	lsls	r3, r3, #2
    7c12:	189b      	adds	r3, r3, r2
    7c14:	009b      	lsls	r3, r3, #2
    7c16:	5c5b      	ldrb	r3, [r3, r1]
    7c18:	07db      	lsls	r3, r3, #31
    7c1a:	0fdb      	lsrs	r3, r3, #31
    7c1c:	b2db      	uxtb	r3, r3
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d044      	beq.n	7cac <sw_timer_task+0xb0>
    7c22:	6879      	ldr	r1, [r7, #4]
    7c24:	68fa      	ldr	r2, [r7, #12]
    7c26:	0013      	movs	r3, r2
    7c28:	009b      	lsls	r3, r3, #2
    7c2a:	189b      	adds	r3, r3, r2
    7c2c:	009b      	lsls	r3, r3, #2
    7c2e:	5c5b      	ldrb	r3, [r3, r1]
    7c30:	079b      	lsls	r3, r3, #30
    7c32:	0fdb      	lsrs	r3, r3, #31
    7c34:	b2db      	uxtb	r3, r3
    7c36:	2b00      	cmp	r3, #0
    7c38:	d038      	beq.n	7cac <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    7c3a:	68fa      	ldr	r2, [r7, #12]
    7c3c:	0013      	movs	r3, r2
    7c3e:	009b      	lsls	r3, r3, #2
    7c40:	189b      	adds	r3, r3, r2
    7c42:	009b      	lsls	r3, r3, #2
    7c44:	687a      	ldr	r2, [r7, #4]
    7c46:	18d3      	adds	r3, r2, r3
    7c48:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    7c4a:	68bb      	ldr	r3, [r7, #8]
    7c4c:	691a      	ldr	r2, [r3, #16]
    7c4e:	4b1c      	ldr	r3, [pc, #112]	; (7cc0 <sw_timer_task+0xc4>)
    7c50:	681b      	ldr	r3, [r3, #0]
    7c52:	1ad3      	subs	r3, r2, r3
    7c54:	d52a      	bpl.n	7cac <sw_timer_task+0xb0>
    7c56:	68bb      	ldr	r3, [r7, #8]
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	2204      	movs	r2, #4
    7c5c:	4013      	ands	r3, r2
    7c5e:	b2db      	uxtb	r3, r3
    7c60:	2b00      	cmp	r3, #0
    7c62:	d123      	bne.n	7cac <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    7c64:	68bb      	ldr	r3, [r7, #8]
    7c66:	781a      	ldrb	r2, [r3, #0]
    7c68:	2104      	movs	r1, #4
    7c6a:	430a      	orrs	r2, r1
    7c6c:	701a      	strb	r2, [r3, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    7c6e:	68bb      	ldr	r3, [r7, #8]
    7c70:	685c      	ldr	r4, [r3, #4]
    7c72:	68bb      	ldr	r3, [r7, #8]
    7c74:	689a      	ldr	r2, [r3, #8]
    7c76:	68bb      	ldr	r3, [r7, #8]
    7c78:	68db      	ldr	r3, [r3, #12]
    7c7a:	68f9      	ldr	r1, [r7, #12]
    7c7c:	6878      	ldr	r0, [r7, #4]
    7c7e:	47a0      	blx	r4
				/* Timer was expired. */
				if (handler->period > 0) {
    7c80:	68bb      	ldr	r3, [r7, #8]
    7c82:	68db      	ldr	r3, [r3, #12]
    7c84:	2b00      	cmp	r3, #0
    7c86:	d007      	beq.n	7c98 <sw_timer_task+0x9c>
					handler->expire_time = sw_timer_tick + handler->period;
    7c88:	68bb      	ldr	r3, [r7, #8]
    7c8a:	68da      	ldr	r2, [r3, #12]
    7c8c:	4b0c      	ldr	r3, [pc, #48]	; (7cc0 <sw_timer_task+0xc4>)
    7c8e:	681b      	ldr	r3, [r3, #0]
    7c90:	18d2      	adds	r2, r2, r3
    7c92:	68bb      	ldr	r3, [r7, #8]
    7c94:	611a      	str	r2, [r3, #16]
    7c96:	e004      	b.n	7ca2 <sw_timer_task+0xa6>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    7c98:	68bb      	ldr	r3, [r7, #8]
    7c9a:	781a      	ldrb	r2, [r3, #0]
    7c9c:	2102      	movs	r1, #2
    7c9e:	438a      	bics	r2, r1
    7ca0:	701a      	strb	r2, [r3, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    7ca2:	68bb      	ldr	r3, [r7, #8]
    7ca4:	781a      	ldrb	r2, [r3, #0]
    7ca6:	2104      	movs	r1, #4
    7ca8:	438a      	bics	r2, r1
    7caa:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    7cac:	68fb      	ldr	r3, [r7, #12]
    7cae:	3301      	adds	r3, #1
    7cb0:	60fb      	str	r3, [r7, #12]
    7cb2:	68fb      	ldr	r3, [r7, #12]
    7cb4:	2b00      	cmp	r3, #0
    7cb6:	dda8      	ble.n	7c0a <sw_timer_task+0xe>
			}
		}
	}

}
    7cb8:	46c0      	nop			; (mov r8, r8)
    7cba:	46bd      	mov	sp, r7
    7cbc:	b005      	add	sp, #20
    7cbe:	bd90      	pop	{r4, r7, pc}
    7cc0:	20000244 	.word	0x20000244

00007cc4 <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
    7cc4:	b590      	push	{r4, r7, lr}
    7cc6:	b087      	sub	sp, #28
    7cc8:	af02      	add	r7, sp, #8
    7cca:	0002      	movs	r2, r0
    7ccc:	6039      	str	r1, [r7, #0]
    7cce:	1dfb      	adds	r3, r7, #7
    7cd0:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
    7cd2:	1dfb      	adds	r3, r7, #7
    7cd4:	781b      	ldrb	r3, [r3, #0]
    7cd6:	2b2c      	cmp	r3, #44	; 0x2c
    7cd8:	d002      	beq.n	7ce0 <wifi_callback+0x1c>
    7cda:	2b32      	cmp	r3, #50	; 0x32
    7cdc:	d024      	beq.n	7d28 <wifi_callback+0x64>
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
		wifi_connected = 1; 
		break;

	default:
		break;
    7cde:	e043      	b.n	7d68 <wifi_callback+0xa4>
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
    7ce0:	683b      	ldr	r3, [r7, #0]
    7ce2:	60fb      	str	r3, [r7, #12]
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    7ce4:	68fb      	ldr	r3, [r7, #12]
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	2b01      	cmp	r3, #1
    7cea:	d106      	bne.n	7cfa <wifi_callback+0x36>
			printf("Wi-Fi connected\r\n");
    7cec:	4b20      	ldr	r3, [pc, #128]	; (7d70 <wifi_callback+0xac>)
    7cee:	0018      	movs	r0, r3
    7cf0:	4b20      	ldr	r3, [pc, #128]	; (7d74 <wifi_callback+0xb0>)
    7cf2:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    7cf4:	4b20      	ldr	r3, [pc, #128]	; (7d78 <wifi_callback+0xb4>)
    7cf6:	4798      	blx	r3
		break;
    7cf8:	e035      	b.n	7d66 <wifi_callback+0xa2>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    7cfa:	68fb      	ldr	r3, [r7, #12]
    7cfc:	781b      	ldrb	r3, [r3, #0]
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d131      	bne.n	7d66 <wifi_callback+0xa2>
			printf("Wi-Fi disconnected\r\n");
    7d02:	4b1e      	ldr	r3, [pc, #120]	; (7d7c <wifi_callback+0xb8>)
    7d04:	0018      	movs	r0, r3
    7d06:	4b1b      	ldr	r3, [pc, #108]	; (7d74 <wifi_callback+0xb0>)
    7d08:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    7d0a:	4a1d      	ldr	r2, [pc, #116]	; (7d80 <wifi_callback+0xbc>)
    7d0c:	481d      	ldr	r0, [pc, #116]	; (7d84 <wifi_callback+0xc0>)
    7d0e:	23ff      	movs	r3, #255	; 0xff
    7d10:	9300      	str	r3, [sp, #0]
    7d12:	0013      	movs	r3, r2
    7d14:	2202      	movs	r2, #2
    7d16:	2112      	movs	r1, #18
    7d18:	4c1b      	ldr	r4, [pc, #108]	; (7d88 <wifi_callback+0xc4>)
    7d1a:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    7d1c:	4b1b      	ldr	r3, [pc, #108]	; (7d8c <wifi_callback+0xc8>)
    7d1e:	2101      	movs	r1, #1
    7d20:	0018      	movs	r0, r3
    7d22:	4b1b      	ldr	r3, [pc, #108]	; (7d90 <wifi_callback+0xcc>)
    7d24:	4798      	blx	r3
		break;
    7d26:	e01e      	b.n	7d66 <wifi_callback+0xa2>
		msg_ip_addr = (uint8 *)msg_data;
    7d28:	683b      	ldr	r3, [r7, #0]
    7d2a:	60bb      	str	r3, [r7, #8]
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    7d2c:	68bb      	ldr	r3, [r7, #8]
    7d2e:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    7d30:	0019      	movs	r1, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    7d32:	68bb      	ldr	r3, [r7, #8]
    7d34:	3301      	adds	r3, #1
    7d36:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    7d38:	001a      	movs	r2, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    7d3a:	68bb      	ldr	r3, [r7, #8]
    7d3c:	3302      	adds	r3, #2
    7d3e:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    7d40:	001c      	movs	r4, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    7d42:	68bb      	ldr	r3, [r7, #8]
    7d44:	3303      	adds	r3, #3
    7d46:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    7d48:	4812      	ldr	r0, [pc, #72]	; (7d94 <wifi_callback+0xd0>)
    7d4a:	9300      	str	r3, [sp, #0]
    7d4c:	0023      	movs	r3, r4
    7d4e:	4c12      	ldr	r4, [pc, #72]	; (7d98 <wifi_callback+0xd4>)
    7d50:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    7d52:	4a12      	ldr	r2, [pc, #72]	; (7d9c <wifi_callback+0xd8>)
    7d54:	4b0d      	ldr	r3, [pc, #52]	; (7d8c <wifi_callback+0xc8>)
    7d56:	0011      	movs	r1, r2
    7d58:	0018      	movs	r0, r3
    7d5a:	4b11      	ldr	r3, [pc, #68]	; (7da0 <wifi_callback+0xdc>)
    7d5c:	4798      	blx	r3
		wifi_connected = 1; 
    7d5e:	4b11      	ldr	r3, [pc, #68]	; (7da4 <wifi_callback+0xe0>)
    7d60:	2201      	movs	r2, #1
    7d62:	601a      	str	r2, [r3, #0]
		break;
    7d64:	e000      	b.n	7d68 <wifi_callback+0xa4>
		break;
    7d66:	46c0      	nop			; (mov r8, r8)
	}
}
    7d68:	46c0      	nop			; (mov r8, r8)
    7d6a:	46bd      	mov	sp, r7
    7d6c:	b005      	add	sp, #20
    7d6e:	bd90      	pop	{r4, r7, pc}
    7d70:	000149fc 	.word	0x000149fc
    7d74:	0000f0e5 	.word	0x0000f0e5
    7d78:	00002425 	.word	0x00002425
    7d7c:	00014a10 	.word	0x00014a10
    7d80:	00014a24 	.word	0x00014a24
    7d84:	00014a34 	.word	0x00014a34
    7d88:	00001f5d 	.word	0x00001f5d
    7d8c:	20000638 	.word	0x20000638
    7d90:	0000e091 	.word	0x0000e091
    7d94:	00014a48 	.word	0x00014a48
    7d98:	0000efc9 	.word	0x0000efc9
    7d9c:	000149e8 	.word	0x000149e8
    7da0:	0000d885 	.word	0x0000d885
    7da4:	2000024c 	.word	0x2000024c

00007da8 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    7da8:	b580      	push	{r7, lr}
    7daa:	b082      	sub	sp, #8
    7dac:	af00      	add	r7, sp, #0
    7dae:	603a      	str	r2, [r7, #0]
    7db0:	1dfb      	adds	r3, r7, #7
    7db2:	1c02      	adds	r2, r0, #0
    7db4:	701a      	strb	r2, [r3, #0]
    7db6:	1dbb      	adds	r3, r7, #6
    7db8:	1c0a      	adds	r2, r1, #0
    7dba:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    7dbc:	683a      	ldr	r2, [r7, #0]
    7dbe:	1dbb      	adds	r3, r7, #6
    7dc0:	7819      	ldrb	r1, [r3, #0]
    7dc2:	1dfb      	adds	r3, r7, #7
    7dc4:	781b      	ldrb	r3, [r3, #0]
    7dc6:	b25b      	sxtb	r3, r3
    7dc8:	0018      	movs	r0, r3
    7dca:	4b03      	ldr	r3, [pc, #12]	; (7dd8 <socket_event_handler+0x30>)
    7dcc:	4798      	blx	r3
}
    7dce:	46c0      	nop			; (mov r8, r8)
    7dd0:	46bd      	mov	sp, r7
    7dd2:	b002      	add	sp, #8
    7dd4:	bd80      	pop	{r7, pc}
    7dd6:	46c0      	nop			; (mov r8, r8)
    7dd8:	0000e3d1 	.word	0x0000e3d1

00007ddc <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    7ddc:	b580      	push	{r7, lr}
    7dde:	b082      	sub	sp, #8
    7de0:	af00      	add	r7, sp, #0
    7de2:	6078      	str	r0, [r7, #4]
    7de4:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    7de6:	683a      	ldr	r2, [r7, #0]
    7de8:	687b      	ldr	r3, [r7, #4]
    7dea:	0011      	movs	r1, r2
    7dec:	0018      	movs	r0, r3
    7dee:	4b03      	ldr	r3, [pc, #12]	; (7dfc <socket_resolve_handler+0x20>)
    7df0:	4798      	blx	r3
}
    7df2:	46c0      	nop			; (mov r8, r8)
    7df4:	46bd      	mov	sp, r7
    7df6:	b002      	add	sp, #8
    7df8:	bd80      	pop	{r7, pc}
    7dfa:	46c0      	nop			; (mov r8, r8)
    7dfc:	0000d831 	.word	0x0000d831

00007e00 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    7e00:	b590      	push	{r4, r7, lr}
    7e02:	b08d      	sub	sp, #52	; 0x34
    7e04:	af06      	add	r7, sp, #24
    7e06:	60f8      	str	r0, [r7, #12]
    7e08:	60b9      	str	r1, [r7, #8]
    7e0a:	607a      	str	r2, [r7, #4]
	switch (type) {
    7e0c:	68bb      	ldr	r3, [r7, #8]
    7e0e:	2b01      	cmp	r3, #1
    7e10:	d030      	beq.n	7e74 <mqtt_callback+0x74>
    7e12:	dc02      	bgt.n	7e1a <mqtt_callback+0x1a>
    7e14:	2b00      	cmp	r3, #0
    7e16:	d006      	beq.n	7e26 <mqtt_callback+0x26>
	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer */
		printf("MQTT disconnected\r\n");
		break;
	}
}
    7e18:	e15a      	b.n	80d0 <mqtt_callback+0x2d0>
	switch (type) {
    7e1a:	2b05      	cmp	r3, #5
    7e1c:	d100      	bne.n	7e20 <mqtt_callback+0x20>
    7e1e:	e151      	b.n	80c4 <mqtt_callback+0x2c4>
    7e20:	2b06      	cmp	r3, #6
    7e22:	d063      	beq.n	7eec <mqtt_callback+0xec>
}
    7e24:	e154      	b.n	80d0 <mqtt_callback+0x2d0>
		if (data->sock_connected.result >= 0) {
    7e26:	687b      	ldr	r3, [r7, #4]
    7e28:	681b      	ldr	r3, [r3, #0]
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	db15      	blt.n	7e5a <mqtt_callback+0x5a>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, MQTT_USER, NULL, NULL, 0, 0, 0);
    7e2e:	68f8      	ldr	r0, [r7, #12]
    7e30:	2300      	movs	r3, #0
    7e32:	9305      	str	r3, [sp, #20]
    7e34:	2300      	movs	r3, #0
    7e36:	9304      	str	r3, [sp, #16]
    7e38:	2300      	movs	r3, #0
    7e3a:	9303      	str	r3, [sp, #12]
    7e3c:	2300      	movs	r3, #0
    7e3e:	9302      	str	r3, [sp, #8]
    7e40:	2300      	movs	r3, #0
    7e42:	9301      	str	r3, [sp, #4]
    7e44:	4ba4      	ldr	r3, [pc, #656]	; (80d8 <mqtt_callback+0x2d8>)
    7e46:	9300      	str	r3, [sp, #0]
    7e48:	2300      	movs	r3, #0
    7e4a:	2200      	movs	r2, #0
    7e4c:	2101      	movs	r1, #1
    7e4e:	4ca3      	ldr	r4, [pc, #652]	; (80dc <mqtt_callback+0x2dc>)
    7e50:	47a0      	blx	r4
			mqtt_connected = 1;
    7e52:	4ba3      	ldr	r3, [pc, #652]	; (80e0 <mqtt_callback+0x2e0>)
    7e54:	2201      	movs	r2, #1
    7e56:	601a      	str	r2, [r3, #0]
	break;
    7e58:	e13a      	b.n	80d0 <mqtt_callback+0x2d0>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    7e5a:	4aa2      	ldr	r2, [pc, #648]	; (80e4 <mqtt_callback+0x2e4>)
    7e5c:	4ba2      	ldr	r3, [pc, #648]	; (80e8 <mqtt_callback+0x2e8>)
    7e5e:	0011      	movs	r1, r2
    7e60:	0018      	movs	r0, r3
    7e62:	4ba2      	ldr	r3, [pc, #648]	; (80ec <mqtt_callback+0x2ec>)
    7e64:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    7e66:	4a9f      	ldr	r2, [pc, #636]	; (80e4 <mqtt_callback+0x2e4>)
    7e68:	68fb      	ldr	r3, [r7, #12]
    7e6a:	0011      	movs	r1, r2
    7e6c:	0018      	movs	r0, r3
    7e6e:	4ba0      	ldr	r3, [pc, #640]	; (80f0 <mqtt_callback+0x2f0>)
    7e70:	4798      	blx	r3
	break;
    7e72:	e12d      	b.n	80d0 <mqtt_callback+0x2d0>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    7e74:	687b      	ldr	r3, [r7, #4]
    7e76:	781b      	ldrb	r3, [r3, #0]
    7e78:	2b00      	cmp	r3, #0
    7e7a:	d12e      	bne.n	7eda <mqtt_callback+0xda>
			  module_inst->busy = 0;
    7e7c:	68fb      	ldr	r3, [r7, #12]
    7e7e:	2243      	movs	r2, #67	; 0x43
    7e80:	5c99      	ldrb	r1, [r3, r2]
    7e82:	2008      	movs	r0, #8
    7e84:	4381      	bics	r1, r0
    7e86:	5499      	strb	r1, [r3, r2]
			  mqtt_subscribe(module_inst, PUMP_TOPIC "#", 0);
    7e88:	499a      	ldr	r1, [pc, #616]	; (80f4 <mqtt_callback+0x2f4>)
    7e8a:	68fb      	ldr	r3, [r7, #12]
    7e8c:	2200      	movs	r2, #0
    7e8e:	0018      	movs	r0, r3
    7e90:	4b99      	ldr	r3, [pc, #612]	; (80f8 <mqtt_callback+0x2f8>)
    7e92:	4798      	blx	r3
			  mqtt_subscribe(module_inst, RELAY1_TOPIC "#", 0);
    7e94:	4999      	ldr	r1, [pc, #612]	; (80fc <mqtt_callback+0x2fc>)
    7e96:	68fb      	ldr	r3, [r7, #12]
    7e98:	2200      	movs	r2, #0
    7e9a:	0018      	movs	r0, r3
    7e9c:	4b96      	ldr	r3, [pc, #600]	; (80f8 <mqtt_callback+0x2f8>)
    7e9e:	4798      	blx	r3
			  mqtt_subscribe(module_inst, RELAY2_TOPIC "#", 0);
    7ea0:	4997      	ldr	r1, [pc, #604]	; (8100 <mqtt_callback+0x300>)
    7ea2:	68fb      	ldr	r3, [r7, #12]
    7ea4:	2200      	movs	r2, #0
    7ea6:	0018      	movs	r0, r3
    7ea8:	4b93      	ldr	r3, [pc, #588]	; (80f8 <mqtt_callback+0x2f8>)
    7eaa:	4798      	blx	r3
			  mqtt_subscribe(module_inst, LED_TOPIC "#", 0);
    7eac:	4995      	ldr	r1, [pc, #596]	; (8104 <mqtt_callback+0x304>)
    7eae:	68fb      	ldr	r3, [r7, #12]
    7eb0:	2200      	movs	r2, #0
    7eb2:	0018      	movs	r0, r3
    7eb4:	4b90      	ldr	r3, [pc, #576]	; (80f8 <mqtt_callback+0x2f8>)
    7eb6:	4798      	blx	r3
			  mqtt_subscribe(module_inst, UPGRADE_TOPIC "#", 0);
    7eb8:	4993      	ldr	r1, [pc, #588]	; (8108 <mqtt_callback+0x308>)
    7eba:	68fb      	ldr	r3, [r7, #12]
    7ebc:	2200      	movs	r2, #0
    7ebe:	0018      	movs	r0, r3
    7ec0:	4b8d      	ldr	r3, [pc, #564]	; (80f8 <mqtt_callback+0x2f8>)
    7ec2:	4798      	blx	r3
			  mqtt_subscribe(module_inst, VERSION_TOPIC "#", 0);
    7ec4:	4991      	ldr	r1, [pc, #580]	; (810c <mqtt_callback+0x30c>)
    7ec6:	68fb      	ldr	r3, [r7, #12]
    7ec8:	2200      	movs	r2, #0
    7eca:	0018      	movs	r0, r3
    7ecc:	4b8a      	ldr	r3, [pc, #552]	; (80f8 <mqtt_callback+0x2f8>)
    7ece:	4798      	blx	r3
			printf("Preparation of MQTT has been completed.\r\n");
    7ed0:	4b8f      	ldr	r3, [pc, #572]	; (8110 <mqtt_callback+0x310>)
    7ed2:	0018      	movs	r0, r3
    7ed4:	4b8f      	ldr	r3, [pc, #572]	; (8114 <mqtt_callback+0x314>)
    7ed6:	4798      	blx	r3
		break;
    7ed8:	e0fa      	b.n	80d0 <mqtt_callback+0x2d0>
			printf("MQTT broker declined your access! error code %d\r\n", data->connected.result);
    7eda:	687b      	ldr	r3, [r7, #4]
    7edc:	781b      	ldrb	r3, [r3, #0]
    7ede:	001a      	movs	r2, r3
    7ee0:	4b8d      	ldr	r3, [pc, #564]	; (8118 <mqtt_callback+0x318>)
    7ee2:	0011      	movs	r1, r2
    7ee4:	0018      	movs	r0, r3
    7ee6:	4b81      	ldr	r3, [pc, #516]	; (80ec <mqtt_callback+0x2ec>)
    7ee8:	4798      	blx	r3
		break;
    7eea:	e0f1      	b.n	80d0 <mqtt_callback+0x2d0>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL)
    7eec:	687b      	ldr	r3, [r7, #4]
    7eee:	681b      	ldr	r3, [r3, #0]
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	d100      	bne.n	7ef6 <mqtt_callback+0xf6>
    7ef4:	e0eb      	b.n	80ce <mqtt_callback+0x2ce>
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	689b      	ldr	r3, [r3, #8]
    7efa:	2b00      	cmp	r3, #0
    7efc:	d100      	bne.n	7f00 <mqtt_callback+0x100>
    7efe:	e0e6      	b.n	80ce <mqtt_callback+0x2ce>
			if (strncmp(data->recv_publish.topic, PUMP_TOPIC, strlen(PUMP_TOPIC)) == 0)
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	681b      	ldr	r3, [r3, #0]
    7f04:	4985      	ldr	r1, [pc, #532]	; (811c <mqtt_callback+0x31c>)
    7f06:	2209      	movs	r2, #9
    7f08:	0018      	movs	r0, r3
    7f0a:	4b85      	ldr	r3, [pc, #532]	; (8120 <mqtt_callback+0x320>)
    7f0c:	4798      	blx	r3
    7f0e:	1e03      	subs	r3, r0, #0
    7f10:	d10a      	bne.n	7f28 <mqtt_callback+0x128>
				printf("%s >> ", PUMP_TOPIC);
    7f12:	4a82      	ldr	r2, [pc, #520]	; (811c <mqtt_callback+0x31c>)
    7f14:	4b83      	ldr	r3, [pc, #524]	; (8124 <mqtt_callback+0x324>)
    7f16:	0011      	movs	r1, r2
    7f18:	0018      	movs	r0, r3
    7f1a:	4b74      	ldr	r3, [pc, #464]	; (80ec <mqtt_callback+0x2ec>)
    7f1c:	4798      	blx	r3
				run_pump(10000);
    7f1e:	4b82      	ldr	r3, [pc, #520]	; (8128 <mqtt_callback+0x328>)
    7f20:	0018      	movs	r0, r3
    7f22:	4b82      	ldr	r3, [pc, #520]	; (812c <mqtt_callback+0x32c>)
    7f24:	4798      	blx	r3
    7f26:	e0c1      	b.n	80ac <mqtt_callback+0x2ac>
			else if (strncmp(data->recv_publish.topic, RELAY1_TOPIC, strlen(RELAY1_TOPIC)) == 0)
    7f28:	687b      	ldr	r3, [r7, #4]
    7f2a:	681b      	ldr	r3, [r3, #0]
    7f2c:	4980      	ldr	r1, [pc, #512]	; (8130 <mqtt_callback+0x330>)
    7f2e:	220b      	movs	r2, #11
    7f30:	0018      	movs	r0, r3
    7f32:	4b7b      	ldr	r3, [pc, #492]	; (8120 <mqtt_callback+0x320>)
    7f34:	4798      	blx	r3
    7f36:	1e03      	subs	r3, r0, #0
    7f38:	d122      	bne.n	7f80 <mqtt_callback+0x180>
				printf("%s >> ", RELAY1_TOPIC);
    7f3a:	4a7d      	ldr	r2, [pc, #500]	; (8130 <mqtt_callback+0x330>)
    7f3c:	4b79      	ldr	r3, [pc, #484]	; (8124 <mqtt_callback+0x324>)
    7f3e:	0011      	movs	r1, r2
    7f40:	0018      	movs	r0, r3
    7f42:	4b6a      	ldr	r3, [pc, #424]	; (80ec <mqtt_callback+0x2ec>)
    7f44:	4798      	blx	r3
				if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    7f46:	687b      	ldr	r3, [r7, #4]
    7f48:	6899      	ldr	r1, [r3, #8]
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	68db      	ldr	r3, [r3, #12]
    7f4e:	001a      	movs	r2, r3
    7f50:	4b78      	ldr	r3, [pc, #480]	; (8134 <mqtt_callback+0x334>)
    7f52:	0018      	movs	r0, r3
    7f54:	4b72      	ldr	r3, [pc, #456]	; (8120 <mqtt_callback+0x320>)
    7f56:	4798      	blx	r3
    7f58:	1e03      	subs	r3, r0, #0
    7f5a:	d102      	bne.n	7f62 <mqtt_callback+0x162>
					relay1_enable();
    7f5c:	4b76      	ldr	r3, [pc, #472]	; (8138 <mqtt_callback+0x338>)
    7f5e:	4798      	blx	r3
    7f60:	e0a4      	b.n	80ac <mqtt_callback+0x2ac>
				else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    7f62:	687b      	ldr	r3, [r7, #4]
    7f64:	6899      	ldr	r1, [r3, #8]
    7f66:	687b      	ldr	r3, [r7, #4]
    7f68:	68db      	ldr	r3, [r3, #12]
    7f6a:	001a      	movs	r2, r3
    7f6c:	4b73      	ldr	r3, [pc, #460]	; (813c <mqtt_callback+0x33c>)
    7f6e:	0018      	movs	r0, r3
    7f70:	4b6b      	ldr	r3, [pc, #428]	; (8120 <mqtt_callback+0x320>)
    7f72:	4798      	blx	r3
    7f74:	1e03      	subs	r3, r0, #0
    7f76:	d000      	beq.n	7f7a <mqtt_callback+0x17a>
    7f78:	e098      	b.n	80ac <mqtt_callback+0x2ac>
					relay1_disable();
    7f7a:	4b71      	ldr	r3, [pc, #452]	; (8140 <mqtt_callback+0x340>)
    7f7c:	4798      	blx	r3
    7f7e:	e095      	b.n	80ac <mqtt_callback+0x2ac>
			else if (strncmp(data->recv_publish.topic, LED_TOPIC, strlen(LED_TOPIC)) == 0)
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	681b      	ldr	r3, [r3, #0]
    7f84:	496f      	ldr	r1, [pc, #444]	; (8144 <mqtt_callback+0x344>)
    7f86:	2208      	movs	r2, #8
    7f88:	0018      	movs	r0, r3
    7f8a:	4b65      	ldr	r3, [pc, #404]	; (8120 <mqtt_callback+0x320>)
    7f8c:	4798      	blx	r3
    7f8e:	1e03      	subs	r3, r0, #0
    7f90:	d122      	bne.n	7fd8 <mqtt_callback+0x1d8>
				printf("%s >> ", LED_TOPIC);
    7f92:	4a6c      	ldr	r2, [pc, #432]	; (8144 <mqtt_callback+0x344>)
    7f94:	4b63      	ldr	r3, [pc, #396]	; (8124 <mqtt_callback+0x324>)
    7f96:	0011      	movs	r1, r2
    7f98:	0018      	movs	r0, r3
    7f9a:	4b54      	ldr	r3, [pc, #336]	; (80ec <mqtt_callback+0x2ec>)
    7f9c:	4798      	blx	r3
				if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    7f9e:	687b      	ldr	r3, [r7, #4]
    7fa0:	6899      	ldr	r1, [r3, #8]
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	68db      	ldr	r3, [r3, #12]
    7fa6:	001a      	movs	r2, r3
    7fa8:	4b62      	ldr	r3, [pc, #392]	; (8134 <mqtt_callback+0x334>)
    7faa:	0018      	movs	r0, r3
    7fac:	4b5c      	ldr	r3, [pc, #368]	; (8120 <mqtt_callback+0x320>)
    7fae:	4798      	blx	r3
    7fb0:	1e03      	subs	r3, r0, #0
    7fb2:	d102      	bne.n	7fba <mqtt_callback+0x1ba>
					led2_on();
    7fb4:	4b64      	ldr	r3, [pc, #400]	; (8148 <mqtt_callback+0x348>)
    7fb6:	4798      	blx	r3
    7fb8:	e078      	b.n	80ac <mqtt_callback+0x2ac>
				else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    7fba:	687b      	ldr	r3, [r7, #4]
    7fbc:	6899      	ldr	r1, [r3, #8]
    7fbe:	687b      	ldr	r3, [r7, #4]
    7fc0:	68db      	ldr	r3, [r3, #12]
    7fc2:	001a      	movs	r2, r3
    7fc4:	4b5d      	ldr	r3, [pc, #372]	; (813c <mqtt_callback+0x33c>)
    7fc6:	0018      	movs	r0, r3
    7fc8:	4b55      	ldr	r3, [pc, #340]	; (8120 <mqtt_callback+0x320>)
    7fca:	4798      	blx	r3
    7fcc:	1e03      	subs	r3, r0, #0
    7fce:	d000      	beq.n	7fd2 <mqtt_callback+0x1d2>
    7fd0:	e06c      	b.n	80ac <mqtt_callback+0x2ac>
					led2_off();
    7fd2:	4b5e      	ldr	r3, [pc, #376]	; (814c <mqtt_callback+0x34c>)
    7fd4:	4798      	blx	r3
    7fd6:	e069      	b.n	80ac <mqtt_callback+0x2ac>
			else if (strncmp(data->recv_publish.topic, RELAY2_TOPIC, strlen(RELAY2_TOPIC)) == 0)
    7fd8:	687b      	ldr	r3, [r7, #4]
    7fda:	681b      	ldr	r3, [r3, #0]
    7fdc:	495c      	ldr	r1, [pc, #368]	; (8150 <mqtt_callback+0x350>)
    7fde:	220b      	movs	r2, #11
    7fe0:	0018      	movs	r0, r3
    7fe2:	4b4f      	ldr	r3, [pc, #316]	; (8120 <mqtt_callback+0x320>)
    7fe4:	4798      	blx	r3
    7fe6:	1e03      	subs	r3, r0, #0
    7fe8:	d121      	bne.n	802e <mqtt_callback+0x22e>
				printf("%s >> ", RELAY2_TOPIC);
    7fea:	4a59      	ldr	r2, [pc, #356]	; (8150 <mqtt_callback+0x350>)
    7fec:	4b4d      	ldr	r3, [pc, #308]	; (8124 <mqtt_callback+0x324>)
    7fee:	0011      	movs	r1, r2
    7ff0:	0018      	movs	r0, r3
    7ff2:	4b3e      	ldr	r3, [pc, #248]	; (80ec <mqtt_callback+0x2ec>)
    7ff4:	4798      	blx	r3
				if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    7ff6:	687b      	ldr	r3, [r7, #4]
    7ff8:	6899      	ldr	r1, [r3, #8]
    7ffa:	687b      	ldr	r3, [r7, #4]
    7ffc:	68db      	ldr	r3, [r3, #12]
    7ffe:	001a      	movs	r2, r3
    8000:	4b4c      	ldr	r3, [pc, #304]	; (8134 <mqtt_callback+0x334>)
    8002:	0018      	movs	r0, r3
    8004:	4b46      	ldr	r3, [pc, #280]	; (8120 <mqtt_callback+0x320>)
    8006:	4798      	blx	r3
    8008:	1e03      	subs	r3, r0, #0
    800a:	d102      	bne.n	8012 <mqtt_callback+0x212>
					relay2_enable();
    800c:	4b51      	ldr	r3, [pc, #324]	; (8154 <mqtt_callback+0x354>)
    800e:	4798      	blx	r3
    8010:	e04c      	b.n	80ac <mqtt_callback+0x2ac>
				else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    8012:	687b      	ldr	r3, [r7, #4]
    8014:	6899      	ldr	r1, [r3, #8]
    8016:	687b      	ldr	r3, [r7, #4]
    8018:	68db      	ldr	r3, [r3, #12]
    801a:	001a      	movs	r2, r3
    801c:	4b47      	ldr	r3, [pc, #284]	; (813c <mqtt_callback+0x33c>)
    801e:	0018      	movs	r0, r3
    8020:	4b3f      	ldr	r3, [pc, #252]	; (8120 <mqtt_callback+0x320>)
    8022:	4798      	blx	r3
    8024:	1e03      	subs	r3, r0, #0
    8026:	d141      	bne.n	80ac <mqtt_callback+0x2ac>
					relay2_disable();
    8028:	4b4b      	ldr	r3, [pc, #300]	; (8158 <mqtt_callback+0x358>)
    802a:	4798      	blx	r3
    802c:	e03e      	b.n	80ac <mqtt_callback+0x2ac>
			else if (strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) == 0)
    802e:	687b      	ldr	r3, [r7, #4]
    8030:	681b      	ldr	r3, [r3, #0]
    8032:	494a      	ldr	r1, [pc, #296]	; (815c <mqtt_callback+0x35c>)
    8034:	220c      	movs	r2, #12
    8036:	0018      	movs	r0, r3
    8038:	4b39      	ldr	r3, [pc, #228]	; (8120 <mqtt_callback+0x320>)
    803a:	4798      	blx	r3
    803c:	1e03      	subs	r3, r0, #0
    803e:	d109      	bne.n	8054 <mqtt_callback+0x254>
				printf("%s >> ", UPGRADE_TOPIC);
    8040:	4a46      	ldr	r2, [pc, #280]	; (815c <mqtt_callback+0x35c>)
    8042:	4b38      	ldr	r3, [pc, #224]	; (8124 <mqtt_callback+0x324>)
    8044:	0011      	movs	r1, r2
    8046:	0018      	movs	r0, r3
    8048:	4b28      	ldr	r3, [pc, #160]	; (80ec <mqtt_callback+0x2ec>)
    804a:	4798      	blx	r3
				RcvDownloadFwCmdByMQTT = 1;
    804c:	4b44      	ldr	r3, [pc, #272]	; (8160 <mqtt_callback+0x360>)
    804e:	2201      	movs	r2, #1
    8050:	701a      	strb	r2, [r3, #0]
    8052:	e02b      	b.n	80ac <mqtt_callback+0x2ac>
			else if (strncmp(data->recv_publish.topic, VERSION_TOPIC, strlen(VERSION_TOPIC)) == 0)
    8054:	687b      	ldr	r3, [r7, #4]
    8056:	681b      	ldr	r3, [r3, #0]
    8058:	4942      	ldr	r1, [pc, #264]	; (8164 <mqtt_callback+0x364>)
    805a:	220c      	movs	r2, #12
    805c:	0018      	movs	r0, r3
    805e:	4b30      	ldr	r3, [pc, #192]	; (8120 <mqtt_callback+0x320>)
    8060:	4798      	blx	r3
    8062:	1e03      	subs	r3, r0, #0
    8064:	d109      	bne.n	807a <mqtt_callback+0x27a>
				printf("%s >> ", VERSION_TOPIC);
    8066:	4a3f      	ldr	r2, [pc, #252]	; (8164 <mqtt_callback+0x364>)
    8068:	4b2e      	ldr	r3, [pc, #184]	; (8124 <mqtt_callback+0x324>)
    806a:	0011      	movs	r1, r2
    806c:	0018      	movs	r0, r3
    806e:	4b1f      	ldr	r3, [pc, #124]	; (80ec <mqtt_callback+0x2ec>)
    8070:	4798      	blx	r3
				RequestVersionByMQTT = 1;
    8072:	4b3d      	ldr	r3, [pc, #244]	; (8168 <mqtt_callback+0x368>)
    8074:	2201      	movs	r2, #1
    8076:	701a      	strb	r2, [r3, #0]
    8078:	e018      	b.n	80ac <mqtt_callback+0x2ac>
				printf("Unknown topic: %s", data->recv_publish.topic);
    807a:	687b      	ldr	r3, [r7, #4]
    807c:	681a      	ldr	r2, [r3, #0]
    807e:	4b3b      	ldr	r3, [pc, #236]	; (816c <mqtt_callback+0x36c>)
    8080:	0011      	movs	r1, r2
    8082:	0018      	movs	r0, r3
    8084:	4b19      	ldr	r3, [pc, #100]	; (80ec <mqtt_callback+0x2ec>)
    8086:	4798      	blx	r3
			for (uint8_t i; i < data->recv_publish.msg_size; i++)
    8088:	e010      	b.n	80ac <mqtt_callback+0x2ac>
				printf("%c", data->recv_publish.msg[i]);
    808a:	687b      	ldr	r3, [r7, #4]
    808c:	689a      	ldr	r2, [r3, #8]
    808e:	2317      	movs	r3, #23
    8090:	18fb      	adds	r3, r7, r3
    8092:	781b      	ldrb	r3, [r3, #0]
    8094:	18d3      	adds	r3, r2, r3
    8096:	781b      	ldrb	r3, [r3, #0]
    8098:	0018      	movs	r0, r3
    809a:	4b35      	ldr	r3, [pc, #212]	; (8170 <mqtt_callback+0x370>)
    809c:	4798      	blx	r3
			for (uint8_t i; i < data->recv_publish.msg_size; i++)
    809e:	2317      	movs	r3, #23
    80a0:	18fb      	adds	r3, r7, r3
    80a2:	781a      	ldrb	r2, [r3, #0]
    80a4:	2317      	movs	r3, #23
    80a6:	18fb      	adds	r3, r7, r3
    80a8:	3201      	adds	r2, #1
    80aa:	701a      	strb	r2, [r3, #0]
    80ac:	2317      	movs	r3, #23
    80ae:	18fb      	adds	r3, r7, r3
    80b0:	781a      	ldrb	r2, [r3, #0]
    80b2:	687b      	ldr	r3, [r7, #4]
    80b4:	68db      	ldr	r3, [r3, #12]
    80b6:	429a      	cmp	r2, r3
    80b8:	dbe7      	blt.n	808a <mqtt_callback+0x28a>
			printf("\r\n");
    80ba:	4b2e      	ldr	r3, [pc, #184]	; (8174 <mqtt_callback+0x374>)
    80bc:	0018      	movs	r0, r3
    80be:	4b15      	ldr	r3, [pc, #84]	; (8114 <mqtt_callback+0x314>)
    80c0:	4798      	blx	r3
		break;
    80c2:	e004      	b.n	80ce <mqtt_callback+0x2ce>
		printf("MQTT disconnected\r\n");
    80c4:	4b2c      	ldr	r3, [pc, #176]	; (8178 <mqtt_callback+0x378>)
    80c6:	0018      	movs	r0, r3
    80c8:	4b12      	ldr	r3, [pc, #72]	; (8114 <mqtt_callback+0x314>)
    80ca:	4798      	blx	r3
		break;
    80cc:	e000      	b.n	80d0 <mqtt_callback+0x2d0>
		break;
    80ce:	46c0      	nop			; (mov r8, r8)
}
    80d0:	46c0      	nop			; (mov r8, r8)
    80d2:	46bd      	mov	sp, r7
    80d4:	b007      	add	sp, #28
    80d6:	bd90      	pop	{r4, r7, pc}
    80d8:	00014a64 	.word	0x00014a64
    80dc:	0000d999 	.word	0x0000d999
    80e0:	20000250 	.word	0x20000250
    80e4:	000149e8 	.word	0x000149e8
    80e8:	00014a70 	.word	0x00014a70
    80ec:	0000efc9 	.word	0x0000efc9
    80f0:	0000d885 	.word	0x0000d885
    80f4:	00014aa8 	.word	0x00014aa8
    80f8:	0000ddf1 	.word	0x0000ddf1
    80fc:	00014ab4 	.word	0x00014ab4
    8100:	00014ac4 	.word	0x00014ac4
    8104:	00014ad4 	.word	0x00014ad4
    8108:	00014ae0 	.word	0x00014ae0
    810c:	00014af0 	.word	0x00014af0
    8110:	00014b00 	.word	0x00014b00
    8114:	0000f0e5 	.word	0x0000f0e5
    8118:	00014b2c 	.word	0x00014b2c
    811c:	00014b60 	.word	0x00014b60
    8120:	0000f2ff 	.word	0x0000f2ff
    8124:	00014b6c 	.word	0x00014b6c
    8128:	00002710 	.word	0x00002710
    812c:	0000d431 	.word	0x0000d431
    8130:	00014b74 	.word	0x00014b74
    8134:	00014b80 	.word	0x00014b80
    8138:	0000d371 	.word	0x0000d371
    813c:	00014b84 	.word	0x00014b84
    8140:	0000d391 	.word	0x0000d391
    8144:	00014b88 	.word	0x00014b88
    8148:	0000d331 	.word	0x0000d331
    814c:	0000d351 	.word	0x0000d351
    8150:	00014b94 	.word	0x00014b94
    8154:	0000d3b1 	.word	0x0000d3b1
    8158:	0000d3d1 	.word	0x0000d3d1
    815c:	00014ba0 	.word	0x00014ba0
    8160:	20000248 	.word	0x20000248
    8164:	00014bb0 	.word	0x00014bb0
    8168:	20000249 	.word	0x20000249
    816c:	00014bc0 	.word	0x00014bc0
    8170:	0000effd 	.word	0x0000effd
    8174:	00014bd4 	.word	0x00014bd4
    8178:	00014bd8 	.word	0x00014bd8

0000817c <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    817c:	b580      	push	{r7, lr}
    817e:	b082      	sub	sp, #8
    8180:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    8182:	1d3b      	adds	r3, r7, #4
    8184:	0018      	movs	r0, r3
    8186:	4b0a      	ldr	r3, [pc, #40]	; (81b0 <configure_timer+0x34>)
    8188:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    818a:	1d3a      	adds	r2, r7, #4
    818c:	4b09      	ldr	r3, [pc, #36]	; (81b4 <configure_timer+0x38>)
    818e:	0011      	movs	r1, r2
    8190:	0018      	movs	r0, r3
    8192:	4b09      	ldr	r3, [pc, #36]	; (81b8 <configure_timer+0x3c>)
    8194:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    8196:	4b07      	ldr	r3, [pc, #28]	; (81b4 <configure_timer+0x38>)
    8198:	0018      	movs	r0, r3
    819a:	4b08      	ldr	r3, [pc, #32]	; (81bc <configure_timer+0x40>)
    819c:	4798      	blx	r3
	printf("Timer enabled.\r\n");
    819e:	4b08      	ldr	r3, [pc, #32]	; (81c0 <configure_timer+0x44>)
    81a0:	0018      	movs	r0, r3
    81a2:	4b08      	ldr	r3, [pc, #32]	; (81c4 <configure_timer+0x48>)
    81a4:	4798      	blx	r3
}
    81a6:	46c0      	nop			; (mov r8, r8)
    81a8:	46bd      	mov	sp, r7
    81aa:	b002      	add	sp, #8
    81ac:	bd80      	pop	{r7, pc}
    81ae:	46c0      	nop			; (mov r8, r8)
    81b0:	000079bd 	.word	0x000079bd
    81b4:	200005e0 	.word	0x200005e0
    81b8:	000079e1 	.word	0x000079e1
    81bc:	00007acd 	.word	0x00007acd
    81c0:	00014bec 	.word	0x00014bec
    81c4:	0000f0e5 	.word	0x0000f0e5

000081c8 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    81c8:	b580      	push	{r7, lr}
    81ca:	b088      	sub	sp, #32
    81cc:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    81ce:	003b      	movs	r3, r7
    81d0:	0018      	movs	r0, r3
    81d2:	4b1b      	ldr	r3, [pc, #108]	; (8240 <configure_mqtt+0x78>)
    81d4:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    81d6:	003b      	movs	r3, r7
    81d8:	4a1a      	ldr	r2, [pc, #104]	; (8244 <configure_mqtt+0x7c>)
    81da:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    81dc:	003b      	movs	r3, r7
    81de:	4a1a      	ldr	r2, [pc, #104]	; (8248 <configure_mqtt+0x80>)
    81e0:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    81e2:	003b      	movs	r3, r7
    81e4:	2280      	movs	r2, #128	; 0x80
    81e6:	611a      	str	r2, [r3, #16]
	mqtt_conf.port = CLOUD_PORT;
    81e8:	003b      	movs	r3, r7
    81ea:	4a18      	ldr	r2, [pc, #96]	; (824c <configure_mqtt+0x84>)
    81ec:	801a      	strh	r2, [r3, #0]
	//cloudmqtt port 11353

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    81ee:	003a      	movs	r2, r7
    81f0:	4b17      	ldr	r3, [pc, #92]	; (8250 <configure_mqtt+0x88>)
    81f2:	0011      	movs	r1, r2
    81f4:	0018      	movs	r0, r3
    81f6:	4b17      	ldr	r3, [pc, #92]	; (8254 <configure_mqtt+0x8c>)
    81f8:	4798      	blx	r3
    81fa:	0003      	movs	r3, r0
    81fc:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    81fe:	69fb      	ldr	r3, [r7, #28]
    8200:	2b00      	cmp	r3, #0
    8202:	da06      	bge.n	8212 <configure_mqtt+0x4a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    8204:	69fa      	ldr	r2, [r7, #28]
    8206:	4b14      	ldr	r3, [pc, #80]	; (8258 <configure_mqtt+0x90>)
    8208:	0011      	movs	r1, r2
    820a:	0018      	movs	r0, r3
    820c:	4b13      	ldr	r3, [pc, #76]	; (825c <configure_mqtt+0x94>)
    820e:	4798      	blx	r3
		while (1) {
    8210:	e7fe      	b.n	8210 <configure_mqtt+0x48>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    8212:	4a13      	ldr	r2, [pc, #76]	; (8260 <configure_mqtt+0x98>)
    8214:	4b0e      	ldr	r3, [pc, #56]	; (8250 <configure_mqtt+0x88>)
    8216:	0011      	movs	r1, r2
    8218:	0018      	movs	r0, r3
    821a:	4b12      	ldr	r3, [pc, #72]	; (8264 <configure_mqtt+0x9c>)
    821c:	4798      	blx	r3
    821e:	0003      	movs	r3, r0
    8220:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    8222:	69fb      	ldr	r3, [r7, #28]
    8224:	2b00      	cmp	r3, #0
    8226:	da06      	bge.n	8236 <configure_mqtt+0x6e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    8228:	69fa      	ldr	r2, [r7, #28]
    822a:	4b0f      	ldr	r3, [pc, #60]	; (8268 <configure_mqtt+0xa0>)
    822c:	0011      	movs	r1, r2
    822e:	0018      	movs	r0, r3
    8230:	4b0a      	ldr	r3, [pc, #40]	; (825c <configure_mqtt+0x94>)
    8232:	4798      	blx	r3
		while (1) {
    8234:	e7fe      	b.n	8234 <configure_mqtt+0x6c>
		}
	}
}
    8236:	46c0      	nop			; (mov r8, r8)
    8238:	46bd      	mov	sp, r7
    823a:	b008      	add	sp, #32
    823c:	bd80      	pop	{r7, pc}
    823e:	46c0      	nop			; (mov r8, r8)
    8240:	0000d771 	.word	0x0000d771
    8244:	200005e0 	.word	0x200005e0
    8248:	20000560 	.word	0x20000560
    824c:	0000075b 	.word	0x0000075b
    8250:	20000638 	.word	0x20000638
    8254:	0000d795 	.word	0x0000d795
    8258:	00014bfc 	.word	0x00014bfc
    825c:	0000efc9 	.word	0x0000efc9
    8260:	00007e01 	.word	0x00007e01
    8264:	0000d821 	.word	0x0000d821
    8268:	00014c30 	.word	0x00014c30

0000826c <wifi_init>:

int wifi_init(void) 
{
    826c:	b590      	push	{r4, r7, lr}
    826e:	b089      	sub	sp, #36	; 0x24
    8270:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the Timer. */
	configure_timer();
    8272:	4b25      	ldr	r3, [pc, #148]	; (8308 <wifi_init+0x9c>)
    8274:	4798      	blx	r3

	/* Initialize the MQTT service. */
	configure_mqtt();
    8276:	4b25      	ldr	r3, [pc, #148]	; (830c <wifi_init+0xa0>)
    8278:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    827a:	4b25      	ldr	r3, [pc, #148]	; (8310 <wifi_init+0xa4>)
    827c:	4798      	blx	r3
	
	printf("MQTT Configured.\r\n");
    827e:	4b25      	ldr	r3, [pc, #148]	; (8314 <wifi_init+0xa8>)
    8280:	0018      	movs	r0, r3
    8282:	4b25      	ldr	r3, [pc, #148]	; (8318 <wifi_init+0xac>)
    8284:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    8286:	1d3b      	adds	r3, r7, #4
    8288:	2218      	movs	r2, #24
    828a:	2100      	movs	r1, #0
    828c:	0018      	movs	r0, r3
    828e:	4b23      	ldr	r3, [pc, #140]	; (831c <wifi_init+0xb0>)
    8290:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    8292:	1d3b      	adds	r3, r7, #4
    8294:	4a22      	ldr	r2, [pc, #136]	; (8320 <wifi_init+0xb4>)
    8296:	601a      	str	r2, [r3, #0]
	printf("Initializing...\r\n");
    8298:	4b22      	ldr	r3, [pc, #136]	; (8324 <wifi_init+0xb8>)
    829a:	0018      	movs	r0, r3
    829c:	4b1e      	ldr	r3, [pc, #120]	; (8318 <wifi_init+0xac>)
    829e:	4798      	blx	r3
	ret = m2m_wifi_init(&param);
    82a0:	231f      	movs	r3, #31
    82a2:	18fc      	adds	r4, r7, r3
    82a4:	1d3b      	adds	r3, r7, #4
    82a6:	0018      	movs	r0, r3
    82a8:	4b1f      	ldr	r3, [pc, #124]	; (8328 <wifi_init+0xbc>)
    82aa:	4798      	blx	r3
    82ac:	0003      	movs	r3, r0
    82ae:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    82b0:	231f      	movs	r3, #31
    82b2:	18fb      	adds	r3, r7, r3
    82b4:	781b      	ldrb	r3, [r3, #0]
    82b6:	b25b      	sxtb	r3, r3
    82b8:	2b00      	cmp	r3, #0
    82ba:	d00a      	beq.n	82d2 <wifi_init+0x66>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    82bc:	231f      	movs	r3, #31
    82be:	18fb      	adds	r3, r7, r3
    82c0:	2200      	movs	r2, #0
    82c2:	569a      	ldrsb	r2, [r3, r2]
    82c4:	4b19      	ldr	r3, [pc, #100]	; (832c <wifi_init+0xc0>)
    82c6:	0011      	movs	r1, r2
    82c8:	0018      	movs	r0, r3
    82ca:	4b19      	ldr	r3, [pc, #100]	; (8330 <wifi_init+0xc4>)
    82cc:	4798      	blx	r3
		return 1;
    82ce:	2301      	movs	r3, #1
    82d0:	e015      	b.n	82fe <wifi_init+0x92>
	} 
		printf("main: m2m_wifi_init call success!(%d)\r\n", ret);
    82d2:	231f      	movs	r3, #31
    82d4:	18fb      	adds	r3, r7, r3
    82d6:	2200      	movs	r2, #0
    82d8:	569a      	ldrsb	r2, [r3, r2]
    82da:	4b16      	ldr	r3, [pc, #88]	; (8334 <wifi_init+0xc8>)
    82dc:	0011      	movs	r1, r2
    82de:	0018      	movs	r0, r3
    82e0:	4b13      	ldr	r3, [pc, #76]	; (8330 <wifi_init+0xc4>)
    82e2:	4798      	blx	r3
	
	/* Initialize socket interface. */
	socketInit();
    82e4:	4b14      	ldr	r3, [pc, #80]	; (8338 <wifi_init+0xcc>)
    82e6:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    82e8:	4a14      	ldr	r2, [pc, #80]	; (833c <wifi_init+0xd0>)
    82ea:	4b15      	ldr	r3, [pc, #84]	; (8340 <wifi_init+0xd4>)
    82ec:	0011      	movs	r1, r2
    82ee:	0018      	movs	r0, r3
    82f0:	4b14      	ldr	r3, [pc, #80]	; (8344 <wifi_init+0xd8>)
    82f2:	4798      	blx	r3
	printf("Sockets initialized.\r\n");
    82f4:	4b14      	ldr	r3, [pc, #80]	; (8348 <wifi_init+0xdc>)
    82f6:	0018      	movs	r0, r3
    82f8:	4b07      	ldr	r3, [pc, #28]	; (8318 <wifi_init+0xac>)
    82fa:	4798      	blx	r3
	
	return 0;
    82fc:	2300      	movs	r3, #0
}
    82fe:	0018      	movs	r0, r3
    8300:	46bd      	mov	sp, r7
    8302:	b009      	add	sp, #36	; 0x24
    8304:	bd90      	pop	{r4, r7, pc}
    8306:	46c0      	nop			; (mov r8, r8)
    8308:	0000817d 	.word	0x0000817d
    830c:	000081c9 	.word	0x000081c9
    8310:	000002a1 	.word	0x000002a1
    8314:	00014c64 	.word	0x00014c64
    8318:	0000f0e5 	.word	0x0000f0e5
    831c:	0000e587 	.word	0x0000e587
    8320:	00007cc5 	.word	0x00007cc5
    8324:	00014c78 	.word	0x00014c78
    8328:	00001d55 	.word	0x00001d55
    832c:	00014c8c 	.word	0x00014c8c
    8330:	0000efc9 	.word	0x0000efc9
    8334:	00014cb4 	.word	0x00014cb4
    8338:	00004f59 	.word	0x00004f59
    833c:	00007ddd 	.word	0x00007ddd
    8340:	00007da9 	.word	0x00007da9
    8344:	00004fa9 	.word	0x00004fa9
    8348:	00014cdc 	.word	0x00014cdc

0000834c <write8>:

int is_init = false;


void write8(uint8_t reg, uint8_t value)
{
    834c:	b580      	push	{r7, lr}
    834e:	b086      	sub	sp, #24
    8350:	af00      	add	r7, sp, #0
    8352:	0002      	movs	r2, r0
    8354:	1dfb      	adds	r3, r7, #7
    8356:	701a      	strb	r2, [r3, #0]
    8358:	1dbb      	adds	r3, r7, #6
    835a:	1c0a      	adds	r2, r1, #0
    835c:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    835e:	4b19      	ldr	r3, [pc, #100]	; (83c4 <write8+0x78>)
    8360:	681b      	ldr	r3, [r3, #0]
    8362:	2b00      	cmp	r3, #0
    8364:	d029      	beq.n	83ba <write8+0x6e>
		uint8_t write_buffer[2] = {reg, value};
    8366:	230c      	movs	r3, #12
    8368:	18fb      	adds	r3, r7, r3
    836a:	1dfa      	adds	r2, r7, #7
    836c:	7812      	ldrb	r2, [r2, #0]
    836e:	701a      	strb	r2, [r3, #0]
    8370:	230c      	movs	r3, #12
    8372:	18fb      	adds	r3, r7, r3
    8374:	1dba      	adds	r2, r7, #6
    8376:	7812      	ldrb	r2, [r2, #0]
    8378:	705a      	strb	r2, [r3, #1]
		wr_packet.address = TSL2561_ADDR_FLOAT;
    837a:	4b13      	ldr	r3, [pc, #76]	; (83c8 <write8+0x7c>)
    837c:	2239      	movs	r2, #57	; 0x39
    837e:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 2;
    8380:	4b11      	ldr	r3, [pc, #68]	; (83c8 <write8+0x7c>)
    8382:	2202      	movs	r2, #2
    8384:	805a      	strh	r2, [r3, #2]
		wr_packet.data = write_buffer;
    8386:	4b10      	ldr	r3, [pc, #64]	; (83c8 <write8+0x7c>)
    8388:	220c      	movs	r2, #12
    838a:	18ba      	adds	r2, r7, r2
    838c:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    838e:	2300      	movs	r3, #0
    8390:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    8392:	23fa      	movs	r3, #250	; 0xfa
    8394:	009b      	lsls	r3, r3, #2
    8396:	613b      	str	r3, [r7, #16]
		
		while (i2c_master_write_packet_wait(&i2c_tsl_instance, &wr_packet) !=
    8398:	e005      	b.n	83a6 <write8+0x5a>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    839a:	697b      	ldr	r3, [r7, #20]
    839c:	1c5a      	adds	r2, r3, #1
    839e:	617a      	str	r2, [r7, #20]
    83a0:	693a      	ldr	r2, [r7, #16]
    83a2:	4293      	cmp	r3, r2
    83a4:	d008      	beq.n	83b8 <write8+0x6c>
		while (i2c_master_write_packet_wait(&i2c_tsl_instance, &wr_packet) !=
    83a6:	4a08      	ldr	r2, [pc, #32]	; (83c8 <write8+0x7c>)
    83a8:	4b08      	ldr	r3, [pc, #32]	; (83cc <write8+0x80>)
    83aa:	0011      	movs	r1, r2
    83ac:	0018      	movs	r0, r3
    83ae:	4b08      	ldr	r3, [pc, #32]	; (83d0 <write8+0x84>)
    83b0:	4798      	blx	r3
    83b2:	1e03      	subs	r3, r0, #0
    83b4:	d1f1      	bne.n	839a <write8+0x4e>
				break;
			}
		}
		
	}
}
    83b6:	e000      	b.n	83ba <write8+0x6e>
				break;
    83b8:	46c0      	nop			; (mov r8, r8)
}
    83ba:	46c0      	nop			; (mov r8, r8)
    83bc:	46bd      	mov	sp, r7
    83be:	b006      	add	sp, #24
    83c0:	bd80      	pop	{r7, pc}
    83c2:	46c0      	nop			; (mov r8, r8)
    83c4:	2000025c 	.word	0x2000025c
    83c8:	20000010 	.word	0x20000010
    83cc:	2000047c 	.word	0x2000047c
    83d0:	00009b6d 	.word	0x00009b6d

000083d4 <enable>:

void enable(void)
{
    83d4:	b580      	push	{r7, lr}
    83d6:	af00      	add	r7, sp, #0
	/* Enable the device by setting the control bit to 0x03 */
	write8((TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL), TSL2561_CONTROL_POWERON);
    83d8:	2103      	movs	r1, #3
    83da:	2080      	movs	r0, #128	; 0x80
    83dc:	4b02      	ldr	r3, [pc, #8]	; (83e8 <enable+0x14>)
    83de:	4798      	blx	r3
}
    83e0:	46c0      	nop			; (mov r8, r8)
    83e2:	46bd      	mov	sp, r7
    83e4:	bd80      	pop	{r7, pc}
    83e6:	46c0      	nop			; (mov r8, r8)
    83e8:	0000834d 	.word	0x0000834d

000083ec <disable>:

void disable(void)
{
    83ec:	b580      	push	{r7, lr}
    83ee:	af00      	add	r7, sp, #0
	/* Turn the device off to save power */
	write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL, TSL2561_CONTROL_POWEROFF);
    83f0:	2100      	movs	r1, #0
    83f2:	2080      	movs	r0, #128	; 0x80
    83f4:	4b02      	ldr	r3, [pc, #8]	; (8400 <disable+0x14>)
    83f6:	4798      	blx	r3
}
    83f8:	46c0      	nop			; (mov r8, r8)
    83fa:	46bd      	mov	sp, r7
    83fc:	bd80      	pop	{r7, pc}
    83fe:	46c0      	nop			; (mov r8, r8)
    8400:	0000834d 	.word	0x0000834d

00008404 <read8_reg>:

uint8_t read8_reg(uint8_t reg) {
    8404:	b580      	push	{r7, lr}
    8406:	b086      	sub	sp, #24
    8408:	af00      	add	r7, sp, #0
    840a:	0002      	movs	r2, r0
    840c:	1dfb      	adds	r3, r7, #7
    840e:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    8410:	4b1a      	ldr	r3, [pc, #104]	; (847c <read8_reg+0x78>)
    8412:	681b      	ldr	r3, [r3, #0]
    8414:	2b00      	cmp	r3, #0
    8416:	d02c      	beq.n	8472 <read8_reg+0x6e>
		enable();
    8418:	4b19      	ldr	r3, [pc, #100]	; (8480 <read8_reg+0x7c>)
    841a:	4798      	blx	r3
		uint8_t read_buffer[2];
		read_buffer[0] = reg;
    841c:	230c      	movs	r3, #12
    841e:	18fb      	adds	r3, r7, r3
    8420:	1dfa      	adds	r2, r7, #7
    8422:	7812      	ldrb	r2, [r2, #0]
    8424:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
    8426:	4b17      	ldr	r3, [pc, #92]	; (8484 <read8_reg+0x80>)
    8428:	2239      	movs	r2, #57	; 0x39
    842a:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 2;
    842c:	4b15      	ldr	r3, [pc, #84]	; (8484 <read8_reg+0x80>)
    842e:	2202      	movs	r2, #2
    8430:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
    8432:	4b14      	ldr	r3, [pc, #80]	; (8484 <read8_reg+0x80>)
    8434:	220c      	movs	r2, #12
    8436:	18ba      	adds	r2, r7, r2
    8438:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    843a:	2300      	movs	r3, #0
    843c:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    843e:	23fa      	movs	r3, #250	; 0xfa
    8440:	009b      	lsls	r3, r3, #2
    8442:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    8444:	e005      	b.n	8452 <read8_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    8446:	697b      	ldr	r3, [r7, #20]
    8448:	1c5a      	adds	r2, r3, #1
    844a:	617a      	str	r2, [r7, #20]
    844c:	693a      	ldr	r2, [r7, #16]
    844e:	4293      	cmp	r3, r2
    8450:	d008      	beq.n	8464 <read8_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    8452:	4a0c      	ldr	r2, [pc, #48]	; (8484 <read8_reg+0x80>)
    8454:	4b0c      	ldr	r3, [pc, #48]	; (8488 <read8_reg+0x84>)
    8456:	0011      	movs	r1, r2
    8458:	0018      	movs	r0, r3
    845a:	4b0c      	ldr	r3, [pc, #48]	; (848c <read8_reg+0x88>)
    845c:	4798      	blx	r3
    845e:	1e03      	subs	r3, r0, #0
    8460:	d1f1      	bne.n	8446 <read8_reg+0x42>
    8462:	e000      	b.n	8466 <read8_reg+0x62>
				break;
    8464:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		disable();
    8466:	4b0a      	ldr	r3, [pc, #40]	; (8490 <read8_reg+0x8c>)
    8468:	4798      	blx	r3
		return read_buffer[1];
    846a:	230c      	movs	r3, #12
    846c:	18fb      	adds	r3, r7, r3
    846e:	785b      	ldrb	r3, [r3, #1]
    8470:	e000      	b.n	8474 <read8_reg+0x70>
	}
	return 0;
    8472:	2300      	movs	r3, #0
}
    8474:	0018      	movs	r0, r3
    8476:	46bd      	mov	sp, r7
    8478:	b006      	add	sp, #24
    847a:	bd80      	pop	{r7, pc}
    847c:	2000025c 	.word	0x2000025c
    8480:	000083d5 	.word	0x000083d5
    8484:	2000001c 	.word	0x2000001c
    8488:	2000047c 	.word	0x2000047c
    848c:	000099b5 	.word	0x000099b5
    8490:	000083ed 	.word	0x000083ed

00008494 <read16_reg>:

uint16_t read16_reg(uint8_t reg) {
    8494:	b580      	push	{r7, lr}
    8496:	b086      	sub	sp, #24
    8498:	af00      	add	r7, sp, #0
    849a:	0002      	movs	r2, r0
    849c:	1dfb      	adds	r3, r7, #7
    849e:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    84a0:	4b28      	ldr	r3, [pc, #160]	; (8544 <read16_reg+0xb0>)
    84a2:	681b      	ldr	r3, [r3, #0]
    84a4:	2b00      	cmp	r3, #0
    84a6:	d047      	beq.n	8538 <read16_reg+0xa4>
		enable();
    84a8:	4b27      	ldr	r3, [pc, #156]	; (8548 <read16_reg+0xb4>)
    84aa:	4798      	blx	r3
		uint8_t read_buffer[3];
		read_buffer[0] = reg;
    84ac:	2308      	movs	r3, #8
    84ae:	18fb      	adds	r3, r7, r3
    84b0:	1dfa      	adds	r2, r7, #7
    84b2:	7812      	ldrb	r2, [r2, #0]
    84b4:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
    84b6:	4b25      	ldr	r3, [pc, #148]	; (854c <read16_reg+0xb8>)
    84b8:	2239      	movs	r2, #57	; 0x39
    84ba:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 3;
    84bc:	4b23      	ldr	r3, [pc, #140]	; (854c <read16_reg+0xb8>)
    84be:	2203      	movs	r2, #3
    84c0:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
    84c2:	4b22      	ldr	r3, [pc, #136]	; (854c <read16_reg+0xb8>)
    84c4:	2208      	movs	r2, #8
    84c6:	18ba      	adds	r2, r7, r2
    84c8:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    84ca:	2300      	movs	r3, #0
    84cc:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    84ce:	23fa      	movs	r3, #250	; 0xfa
    84d0:	009b      	lsls	r3, r3, #2
    84d2:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    84d4:	e005      	b.n	84e2 <read16_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    84d6:	697b      	ldr	r3, [r7, #20]
    84d8:	1c5a      	adds	r2, r3, #1
    84da:	617a      	str	r2, [r7, #20]
    84dc:	693a      	ldr	r2, [r7, #16]
    84de:	4293      	cmp	r3, r2
    84e0:	d008      	beq.n	84f4 <read16_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    84e2:	4a1a      	ldr	r2, [pc, #104]	; (854c <read16_reg+0xb8>)
    84e4:	4b1a      	ldr	r3, [pc, #104]	; (8550 <read16_reg+0xbc>)
    84e6:	0011      	movs	r1, r2
    84e8:	0018      	movs	r0, r3
    84ea:	4b1a      	ldr	r3, [pc, #104]	; (8554 <read16_reg+0xc0>)
    84ec:	4798      	blx	r3
    84ee:	1e03      	subs	r3, r0, #0
    84f0:	d1f1      	bne.n	84d6 <read16_reg+0x42>
    84f2:	e000      	b.n	84f6 <read16_reg+0x62>
				break;
    84f4:	46c0      	nop			; (mov r8, r8)
			}
		}
		uint8_t t = read_buffer[1];
    84f6:	230f      	movs	r3, #15
    84f8:	18fb      	adds	r3, r7, r3
    84fa:	2208      	movs	r2, #8
    84fc:	18ba      	adds	r2, r7, r2
    84fe:	7852      	ldrb	r2, [r2, #1]
    8500:	701a      	strb	r2, [r3, #0]
		uint8_t x = read_buffer[2];
    8502:	230e      	movs	r3, #14
    8504:	18fb      	adds	r3, r7, r3
    8506:	2208      	movs	r2, #8
    8508:	18ba      	adds	r2, r7, r2
    850a:	7892      	ldrb	r2, [r2, #2]
    850c:	701a      	strb	r2, [r3, #0]
		x <<= 8;
    850e:	230e      	movs	r3, #14
    8510:	18fb      	adds	r3, r7, r3
    8512:	2200      	movs	r2, #0
    8514:	701a      	strb	r2, [r3, #0]
		x |= t;
    8516:	230e      	movs	r3, #14
    8518:	18fb      	adds	r3, r7, r3
    851a:	220e      	movs	r2, #14
    851c:	18b9      	adds	r1, r7, r2
    851e:	220f      	movs	r2, #15
    8520:	18ba      	adds	r2, r7, r2
    8522:	7809      	ldrb	r1, [r1, #0]
    8524:	7812      	ldrb	r2, [r2, #0]
    8526:	430a      	orrs	r2, r1
    8528:	701a      	strb	r2, [r3, #0]
		disable();
    852a:	4b0b      	ldr	r3, [pc, #44]	; (8558 <read16_reg+0xc4>)
    852c:	4798      	blx	r3
		return x;
    852e:	230e      	movs	r3, #14
    8530:	18fb      	adds	r3, r7, r3
    8532:	781b      	ldrb	r3, [r3, #0]
    8534:	b29b      	uxth	r3, r3
    8536:	e000      	b.n	853a <read16_reg+0xa6>
	}
	return 0;
    8538:	2300      	movs	r3, #0
}
    853a:	0018      	movs	r0, r3
    853c:	46bd      	mov	sp, r7
    853e:	b006      	add	sp, #24
    8540:	bd80      	pop	{r7, pc}
    8542:	46c0      	nop			; (mov r8, r8)
    8544:	2000025c 	.word	0x2000025c
    8548:	000083d5 	.word	0x000083d5
    854c:	2000001c 	.word	0x2000001c
    8550:	2000047c 	.word	0x2000047c
    8554:	000099b5 	.word	0x000099b5
    8558:	000083ed 	.word	0x000083ed

0000855c <tsl2561_init>:

int tsl2561_init() {
    855c:	b590      	push	{r4, r7, lr}
    855e:	b083      	sub	sp, #12
    8560:	af00      	add	r7, sp, #0
	if(is_init) {
    8562:	4b0d      	ldr	r3, [pc, #52]	; (8598 <tsl2561_init+0x3c>)
    8564:	681b      	ldr	r3, [r3, #0]
    8566:	2b00      	cmp	r3, #0
    8568:	d001      	beq.n	856e <tsl2561_init+0x12>
		return 1;
    856a:	2301      	movs	r3, #1
    856c:	e010      	b.n	8590 <tsl2561_init+0x34>
	}
	is_init = true;
    856e:	4b0a      	ldr	r3, [pc, #40]	; (8598 <tsl2561_init+0x3c>)
    8570:	2201      	movs	r2, #1
    8572:	601a      	str	r2, [r3, #0]
	  uint8_t x = read8_reg(TSL2561_REGISTER_ID);
    8574:	1dfc      	adds	r4, r7, #7
    8576:	200a      	movs	r0, #10
    8578:	4b08      	ldr	r3, [pc, #32]	; (859c <tsl2561_init+0x40>)
    857a:	4798      	blx	r3
    857c:	0003      	movs	r3, r0
    857e:	7023      	strb	r3, [r4, #0]
	  if (x & 0xF0 != 0x10) { // ID code for TSL2561
    8580:	1dfb      	adds	r3, r7, #7
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	2201      	movs	r2, #1
    8586:	4013      	ands	r3, r2
    8588:	d001      	beq.n	858e <tsl2561_init+0x32>
		  return 0;
    858a:	2300      	movs	r3, #0
    858c:	e000      	b.n	8590 <tsl2561_init+0x34>
	  }
	  return 1;
    858e:	2301      	movs	r3, #1
	
}
    8590:	0018      	movs	r0, r3
    8592:	46bd      	mov	sp, r7
    8594:	b003      	add	sp, #12
    8596:	bd90      	pop	{r4, r7, pc}
    8598:	2000025c 	.word	0x2000025c
    859c:	00008405 	.word	0x00008405

000085a0 <calculateLux>:

int calculateLux(uint16_t broadband, uint16_t ir) {
    85a0:	b580      	push	{r7, lr}
    85a2:	b08c      	sub	sp, #48	; 0x30
    85a4:	af00      	add	r7, sp, #0
    85a6:	0002      	movs	r2, r0
    85a8:	1dbb      	adds	r3, r7, #6
    85aa:	801a      	strh	r2, [r3, #0]
    85ac:	1d3b      	adds	r3, r7, #4
    85ae:	1c0a      	adds	r2, r1, #0
    85b0:	801a      	strh	r2, [r3, #0]

	/* Make sure the sensor isn't saturated! */
	uint16_t clipThreshold;

	/* Return 65536 lux if the sensor is saturated */
	if ((broadband > clipThreshold) || (ir > clipThreshold))
    85b2:	1dba      	adds	r2, r7, #6
    85b4:	2322      	movs	r3, #34	; 0x22
    85b6:	18fb      	adds	r3, r7, r3
    85b8:	8812      	ldrh	r2, [r2, #0]
    85ba:	881b      	ldrh	r3, [r3, #0]
    85bc:	429a      	cmp	r2, r3
    85be:	d806      	bhi.n	85ce <calculateLux+0x2e>
    85c0:	1d3a      	adds	r2, r7, #4
    85c2:	2322      	movs	r3, #34	; 0x22
    85c4:	18fb      	adds	r3, r7, r3
    85c6:	8812      	ldrh	r2, [r2, #0]
    85c8:	881b      	ldrh	r3, [r3, #0]
    85ca:	429a      	cmp	r2, r3
    85cc:	d902      	bls.n	85d4 <calculateLux+0x34>
	{
		return 65536;
    85ce:	2380      	movs	r3, #128	; 0x80
    85d0:	025b      	lsls	r3, r3, #9
    85d2:	e07b      	b.n	86cc <calculateLux+0x12c>
	}

	/* Scale the channel values */
	channel0 = (broadband * chScale) >> TSL2561_LUX_CHSCALE;
    85d4:	1dbb      	adds	r3, r7, #6
    85d6:	881b      	ldrh	r3, [r3, #0]
    85d8:	69fa      	ldr	r2, [r7, #28]
    85da:	4353      	muls	r3, r2
    85dc:	0a9b      	lsrs	r3, r3, #10
    85de:	61bb      	str	r3, [r7, #24]
	channel1 = (ir * chScale) >> TSL2561_LUX_CHSCALE;
    85e0:	1d3b      	adds	r3, r7, #4
    85e2:	881b      	ldrh	r3, [r3, #0]
    85e4:	69fa      	ldr	r2, [r7, #28]
    85e6:	4353      	muls	r3, r2
    85e8:	0a9b      	lsrs	r3, r3, #10
    85ea:	617b      	str	r3, [r7, #20]

	/* Find the ratio of the channel values (Channel1/Channel0) */
	unsigned long ratio1 = 0;
    85ec:	2300      	movs	r3, #0
    85ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (channel0 != 0) ratio1 = (channel1 << (TSL2561_LUX_RATIOSCALE+1)) / channel0;
    85f0:	69bb      	ldr	r3, [r7, #24]
    85f2:	2b00      	cmp	r3, #0
    85f4:	d007      	beq.n	8606 <calculateLux+0x66>
    85f6:	697b      	ldr	r3, [r7, #20]
    85f8:	029a      	lsls	r2, r3, #10
    85fa:	4b36      	ldr	r3, [pc, #216]	; (86d4 <calculateLux+0x134>)
    85fc:	69b9      	ldr	r1, [r7, #24]
    85fe:	0010      	movs	r0, r2
    8600:	4798      	blx	r3
    8602:	0003      	movs	r3, r0
    8604:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* round the ratio value */
	unsigned long ratio = (ratio1 + 1) >> 1;
    8606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8608:	3301      	adds	r3, #1
    860a:	085b      	lsrs	r3, r3, #1
    860c:	613b      	str	r3, [r7, #16]
	else if (ratio <= TSL2561_LUX_K7C)
	{b=TSL2561_LUX_B7C; m=TSL2561_LUX_M7C;}
	else if (ratio > TSL2561_LUX_K8C)
	{b=TSL2561_LUX_B8C; m=TSL2561_LUX_M8C;}
	#else
	if ((ratio >= 0) && (ratio <= TSL2561_LUX_K1T))
    860e:	693b      	ldr	r3, [r7, #16]
    8610:	2b40      	cmp	r3, #64	; 0x40
    8612:	d806      	bhi.n	8622 <calculateLux+0x82>
	{b=TSL2561_LUX_B1T; m=TSL2561_LUX_M1T;}
    8614:	23f9      	movs	r3, #249	; 0xf9
    8616:	005b      	lsls	r3, r3, #1
    8618:	62bb      	str	r3, [r7, #40]	; 0x28
    861a:	23df      	movs	r3, #223	; 0xdf
    861c:	005b      	lsls	r3, r3, #1
    861e:	627b      	str	r3, [r7, #36]	; 0x24
    8620:	e042      	b.n	86a8 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K2T)
    8622:	693b      	ldr	r3, [r7, #16]
    8624:	2b80      	cmp	r3, #128	; 0x80
    8626:	d805      	bhi.n	8634 <calculateLux+0x94>
	{b=TSL2561_LUX_B2T; m=TSL2561_LUX_M2T;}
    8628:	2385      	movs	r3, #133	; 0x85
    862a:	009b      	lsls	r3, r3, #2
    862c:	62bb      	str	r3, [r7, #40]	; 0x28
    862e:	4b2a      	ldr	r3, [pc, #168]	; (86d8 <calculateLux+0x138>)
    8630:	627b      	str	r3, [r7, #36]	; 0x24
    8632:	e039      	b.n	86a8 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K3T)
    8634:	693b      	ldr	r3, [r7, #16]
    8636:	2bc0      	cmp	r3, #192	; 0xc0
    8638:	d804      	bhi.n	8644 <calculateLux+0xa4>
	{b=TSL2561_LUX_B3T; m=TSL2561_LUX_M3T;}
    863a:	4b28      	ldr	r3, [pc, #160]	; (86dc <calculateLux+0x13c>)
    863c:	62bb      	str	r3, [r7, #40]	; 0x28
    863e:	4b28      	ldr	r3, [pc, #160]	; (86e0 <calculateLux+0x140>)
    8640:	627b      	str	r3, [r7, #36]	; 0x24
    8642:	e031      	b.n	86a8 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K4T)
    8644:	693a      	ldr	r2, [r7, #16]
    8646:	2380      	movs	r3, #128	; 0x80
    8648:	005b      	lsls	r3, r3, #1
    864a:	429a      	cmp	r2, r3
    864c:	d805      	bhi.n	865a <calculateLux+0xba>
	{b=TSL2561_LUX_B4T; m=TSL2561_LUX_M4T;}
    864e:	239c      	movs	r3, #156	; 0x9c
    8650:	009b      	lsls	r3, r3, #2
    8652:	62bb      	str	r3, [r7, #40]	; 0x28
    8654:	4b23      	ldr	r3, [pc, #140]	; (86e4 <calculateLux+0x144>)
    8656:	627b      	str	r3, [r7, #36]	; 0x24
    8658:	e026      	b.n	86a8 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K5T)
    865a:	693a      	ldr	r2, [r7, #16]
    865c:	239c      	movs	r3, #156	; 0x9c
    865e:	005b      	lsls	r3, r3, #1
    8660:	429a      	cmp	r2, r3
    8662:	d806      	bhi.n	8672 <calculateLux+0xd2>
	{b=TSL2561_LUX_B5T; m=TSL2561_LUX_M5T;}
    8664:	2370      	movs	r3, #112	; 0x70
    8666:	33ff      	adds	r3, #255	; 0xff
    8668:	62bb      	str	r3, [r7, #40]	; 0x28
    866a:	23fe      	movs	r3, #254	; 0xfe
    866c:	005b      	lsls	r3, r3, #1
    866e:	627b      	str	r3, [r7, #36]	; 0x24
    8670:	e01a      	b.n	86a8 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K6T)
    8672:	693a      	ldr	r2, [r7, #16]
    8674:	23cd      	movs	r3, #205	; 0xcd
    8676:	005b      	lsls	r3, r3, #1
    8678:	429a      	cmp	r2, r3
    867a:	d804      	bhi.n	8686 <calculateLux+0xe6>
	{b=TSL2561_LUX_B6T; m=TSL2561_LUX_M6T;}
    867c:	23d2      	movs	r3, #210	; 0xd2
    867e:	62bb      	str	r3, [r7, #40]	; 0x28
    8680:	23fb      	movs	r3, #251	; 0xfb
    8682:	627b      	str	r3, [r7, #36]	; 0x24
    8684:	e010      	b.n	86a8 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K7T)
    8686:	693b      	ldr	r3, [r7, #16]
    8688:	4a17      	ldr	r2, [pc, #92]	; (86e8 <calculateLux+0x148>)
    868a:	4293      	cmp	r3, r2
    868c:	d804      	bhi.n	8698 <calculateLux+0xf8>
	{b=TSL2561_LUX_B7T; m=TSL2561_LUX_M7T;}
    868e:	2318      	movs	r3, #24
    8690:	62bb      	str	r3, [r7, #40]	; 0x28
    8692:	2312      	movs	r3, #18
    8694:	627b      	str	r3, [r7, #36]	; 0x24
    8696:	e007      	b.n	86a8 <calculateLux+0x108>
	else if (ratio > TSL2561_LUX_K8T)
    8698:	693b      	ldr	r3, [r7, #16]
    869a:	4a13      	ldr	r2, [pc, #76]	; (86e8 <calculateLux+0x148>)
    869c:	4293      	cmp	r3, r2
    869e:	d903      	bls.n	86a8 <calculateLux+0x108>
	{b=TSL2561_LUX_B8T; m=TSL2561_LUX_M8T;}
    86a0:	2300      	movs	r3, #0
    86a2:	62bb      	str	r3, [r7, #40]	; 0x28
    86a4:	2300      	movs	r3, #0
    86a6:	627b      	str	r3, [r7, #36]	; 0x24
	#endif

	unsigned long temp;
	temp = ((channel0 * b) - (channel1 * m));
    86a8:	69bb      	ldr	r3, [r7, #24]
    86aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    86ac:	435a      	muls	r2, r3
    86ae:	697b      	ldr	r3, [r7, #20]
    86b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    86b2:	434b      	muls	r3, r1
    86b4:	1ad3      	subs	r3, r2, r3
    86b6:	60fb      	str	r3, [r7, #12]

	/* Do not allow negative lux value */
	if (temp < 0) temp = 0;

	/* Round lsb (2^(LUX_SCALE-1)) */
	temp += (1 << (TSL2561_LUX_LUXSCALE-1));
    86b8:	68fb      	ldr	r3, [r7, #12]
    86ba:	2280      	movs	r2, #128	; 0x80
    86bc:	0192      	lsls	r2, r2, #6
    86be:	4694      	mov	ip, r2
    86c0:	4463      	add	r3, ip
    86c2:	60fb      	str	r3, [r7, #12]

	/* Strip off fractional portion */
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
    86c4:	68fb      	ldr	r3, [r7, #12]
    86c6:	0b9b      	lsrs	r3, r3, #14
    86c8:	60bb      	str	r3, [r7, #8]

	/* Signal I2C had no errors */
	return lux;
    86ca:	68bb      	ldr	r3, [r7, #8]
}
    86cc:	0018      	movs	r0, r3
    86ce:	46bd      	mov	sp, r7
    86d0:	b00c      	add	sp, #48	; 0x30
    86d2:	bd80      	pop	{r7, pc}
    86d4:	0001135d 	.word	0x0001135d
    86d8:	000002d1 	.word	0x000002d1
    86dc:	0000023f 	.word	0x0000023f
    86e0:	0000037b 	.word	0x0000037b
    86e4:	000003fe 	.word	0x000003fe
    86e8:	0000029a 	.word	0x0000029a

000086ec <getLuminosity>:

int getLuminosity() {
    86ec:	b590      	push	{r4, r7, lr}
    86ee:	b083      	sub	sp, #12
    86f0:	af00      	add	r7, sp, #0
	/* Reads a two byte value from channel 0 (visible + infrared) */
	uint16_t broadband = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN0_LOW));
    86f2:	1dbc      	adds	r4, r7, #6
    86f4:	20ac      	movs	r0, #172	; 0xac
    86f6:	4b0b      	ldr	r3, [pc, #44]	; (8724 <getLuminosity+0x38>)
    86f8:	4798      	blx	r3
    86fa:	0003      	movs	r3, r0
    86fc:	8023      	strh	r3, [r4, #0]

	/* Reads a two byte value from channel 1 (infrared) */
	uint16_t ir = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW));
    86fe:	1d3c      	adds	r4, r7, #4
    8700:	20ae      	movs	r0, #174	; 0xae
    8702:	4b08      	ldr	r3, [pc, #32]	; (8724 <getLuminosity+0x38>)
    8704:	4798      	blx	r3
    8706:	0003      	movs	r3, r0
    8708:	8023      	strh	r3, [r4, #0]
	
	return calculateLux(broadband, ir);
    870a:	1d3b      	adds	r3, r7, #4
    870c:	881a      	ldrh	r2, [r3, #0]
    870e:	1dbb      	adds	r3, r7, #6
    8710:	881b      	ldrh	r3, [r3, #0]
    8712:	0011      	movs	r1, r2
    8714:	0018      	movs	r0, r3
    8716:	4b04      	ldr	r3, [pc, #16]	; (8728 <getLuminosity+0x3c>)
    8718:	4798      	blx	r3
    871a:	0003      	movs	r3, r0
}
    871c:	0018      	movs	r0, r3
    871e:	46bd      	mov	sp, r7
    8720:	b003      	add	sp, #12
    8722:	bd90      	pop	{r4, r7, pc}
    8724:	00008495 	.word	0x00008495
    8728:	000085a1 	.word	0x000085a1

0000872c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    872c:	b580      	push	{r7, lr}
    872e:	b082      	sub	sp, #8
    8730:	af00      	add	r7, sp, #0
    8732:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    8734:	687b      	ldr	r3, [r7, #4]
    8736:	2b00      	cmp	r3, #0
    8738:	d00c      	beq.n	8754 <delay_cycles+0x28>
		SysTick->LOAD = n;
    873a:	4b08      	ldr	r3, [pc, #32]	; (875c <delay_cycles+0x30>)
    873c:	687a      	ldr	r2, [r7, #4]
    873e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    8740:	4b06      	ldr	r3, [pc, #24]	; (875c <delay_cycles+0x30>)
    8742:	2200      	movs	r2, #0
    8744:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8746:	46c0      	nop			; (mov r8, r8)
    8748:	4b04      	ldr	r3, [pc, #16]	; (875c <delay_cycles+0x30>)
    874a:	681a      	ldr	r2, [r3, #0]
    874c:	2380      	movs	r3, #128	; 0x80
    874e:	025b      	lsls	r3, r3, #9
    8750:	4013      	ands	r3, r2
    8752:	d0f9      	beq.n	8748 <delay_cycles+0x1c>
		};
	}
}
    8754:	46c0      	nop			; (mov r8, r8)
    8756:	46bd      	mov	sp, r7
    8758:	b002      	add	sp, #8
    875a:	bd80      	pop	{r7, pc}
    875c:	e000e010 	.word	0xe000e010

00008760 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    8760:	b580      	push	{r7, lr}
    8762:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    8764:	2000      	movs	r0, #0
    8766:	4b0f      	ldr	r3, [pc, #60]	; (87a4 <delay_init+0x44>)
    8768:	4798      	blx	r3
    876a:	0002      	movs	r2, r0
    876c:	4b0e      	ldr	r3, [pc, #56]	; (87a8 <delay_init+0x48>)
    876e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    8770:	4b0d      	ldr	r3, [pc, #52]	; (87a8 <delay_init+0x48>)
    8772:	6818      	ldr	r0, [r3, #0]
    8774:	4b0d      	ldr	r3, [pc, #52]	; (87ac <delay_init+0x4c>)
    8776:	22fa      	movs	r2, #250	; 0xfa
    8778:	0091      	lsls	r1, r2, #2
    877a:	4798      	blx	r3
    877c:	0003      	movs	r3, r0
    877e:	001a      	movs	r2, r3
    8780:	4b09      	ldr	r3, [pc, #36]	; (87a8 <delay_init+0x48>)
    8782:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    8784:	4b08      	ldr	r3, [pc, #32]	; (87a8 <delay_init+0x48>)
    8786:	6818      	ldr	r0, [r3, #0]
    8788:	4b08      	ldr	r3, [pc, #32]	; (87ac <delay_init+0x4c>)
    878a:	22fa      	movs	r2, #250	; 0xfa
    878c:	0091      	lsls	r1, r2, #2
    878e:	4798      	blx	r3
    8790:	0003      	movs	r3, r0
    8792:	001a      	movs	r2, r3
    8794:	4b06      	ldr	r3, [pc, #24]	; (87b0 <delay_init+0x50>)
    8796:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    8798:	4b06      	ldr	r3, [pc, #24]	; (87b4 <delay_init+0x54>)
    879a:	2205      	movs	r2, #5
    879c:	601a      	str	r2, [r3, #0]
}
    879e:	46c0      	nop			; (mov r8, r8)
    87a0:	46bd      	mov	sp, r7
    87a2:	bd80      	pop	{r7, pc}
    87a4:	0000c341 	.word	0x0000c341
    87a8:	20000028 	.word	0x20000028
    87ac:	0001135d 	.word	0x0001135d
    87b0:	2000002c 	.word	0x2000002c
    87b4:	e000e010 	.word	0xe000e010

000087b8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    87b8:	b580      	push	{r7, lr}
    87ba:	b082      	sub	sp, #8
    87bc:	af00      	add	r7, sp, #0
    87be:	6078      	str	r0, [r7, #4]
	while (n--) {
    87c0:	e004      	b.n	87cc <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    87c2:	4b07      	ldr	r3, [pc, #28]	; (87e0 <delay_cycles_us+0x28>)
    87c4:	681b      	ldr	r3, [r3, #0]
    87c6:	0018      	movs	r0, r3
    87c8:	4b06      	ldr	r3, [pc, #24]	; (87e4 <delay_cycles_us+0x2c>)
    87ca:	4798      	blx	r3
	while (n--) {
    87cc:	687b      	ldr	r3, [r7, #4]
    87ce:	1e5a      	subs	r2, r3, #1
    87d0:	607a      	str	r2, [r7, #4]
    87d2:	2b00      	cmp	r3, #0
    87d4:	d1f5      	bne.n	87c2 <delay_cycles_us+0xa>
	}
}
    87d6:	46c0      	nop			; (mov r8, r8)
    87d8:	46bd      	mov	sp, r7
    87da:	b002      	add	sp, #8
    87dc:	bd80      	pop	{r7, pc}
    87de:	46c0      	nop			; (mov r8, r8)
    87e0:	2000002c 	.word	0x2000002c
    87e4:	0000872d 	.word	0x0000872d

000087e8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    87e8:	b580      	push	{r7, lr}
    87ea:	b082      	sub	sp, #8
    87ec:	af00      	add	r7, sp, #0
    87ee:	6078      	str	r0, [r7, #4]
	while (n--) {
    87f0:	e004      	b.n	87fc <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    87f2:	4b07      	ldr	r3, [pc, #28]	; (8810 <delay_cycles_ms+0x28>)
    87f4:	681b      	ldr	r3, [r3, #0]
    87f6:	0018      	movs	r0, r3
    87f8:	4b06      	ldr	r3, [pc, #24]	; (8814 <delay_cycles_ms+0x2c>)
    87fa:	4798      	blx	r3
	while (n--) {
    87fc:	687b      	ldr	r3, [r7, #4]
    87fe:	1e5a      	subs	r2, r3, #1
    8800:	607a      	str	r2, [r7, #4]
    8802:	2b00      	cmp	r3, #0
    8804:	d1f5      	bne.n	87f2 <delay_cycles_ms+0xa>
	}
}
    8806:	46c0      	nop			; (mov r8, r8)
    8808:	46bd      	mov	sp, r7
    880a:	b002      	add	sp, #8
    880c:	bd80      	pop	{r7, pc}
    880e:	46c0      	nop			; (mov r8, r8)
    8810:	20000028 	.word	0x20000028
    8814:	0000872d 	.word	0x0000872d

00008818 <system_gclk_chan_get_config_defaults>:
{
    8818:	b580      	push	{r7, lr}
    881a:	b082      	sub	sp, #8
    881c:	af00      	add	r7, sp, #0
    881e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8820:	687b      	ldr	r3, [r7, #4]
    8822:	2200      	movs	r2, #0
    8824:	701a      	strb	r2, [r3, #0]
}
    8826:	46c0      	nop			; (mov r8, r8)
    8828:	46bd      	mov	sp, r7
    882a:	b002      	add	sp, #8
    882c:	bd80      	pop	{r7, pc}
	...

00008830 <system_apb_clock_set_mask>:
{
    8830:	b580      	push	{r7, lr}
    8832:	b082      	sub	sp, #8
    8834:	af00      	add	r7, sp, #0
    8836:	0002      	movs	r2, r0
    8838:	6039      	str	r1, [r7, #0]
    883a:	1dfb      	adds	r3, r7, #7
    883c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    883e:	1dfb      	adds	r3, r7, #7
    8840:	781b      	ldrb	r3, [r3, #0]
    8842:	2b01      	cmp	r3, #1
    8844:	d00a      	beq.n	885c <system_apb_clock_set_mask+0x2c>
    8846:	2b02      	cmp	r3, #2
    8848:	d00f      	beq.n	886a <system_apb_clock_set_mask+0x3a>
    884a:	2b00      	cmp	r3, #0
    884c:	d114      	bne.n	8878 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    884e:	4b0e      	ldr	r3, [pc, #56]	; (8888 <system_apb_clock_set_mask+0x58>)
    8850:	4a0d      	ldr	r2, [pc, #52]	; (8888 <system_apb_clock_set_mask+0x58>)
    8852:	6991      	ldr	r1, [r2, #24]
    8854:	683a      	ldr	r2, [r7, #0]
    8856:	430a      	orrs	r2, r1
    8858:	619a      	str	r2, [r3, #24]
			break;
    885a:	e00f      	b.n	887c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    885c:	4b0a      	ldr	r3, [pc, #40]	; (8888 <system_apb_clock_set_mask+0x58>)
    885e:	4a0a      	ldr	r2, [pc, #40]	; (8888 <system_apb_clock_set_mask+0x58>)
    8860:	69d1      	ldr	r1, [r2, #28]
    8862:	683a      	ldr	r2, [r7, #0]
    8864:	430a      	orrs	r2, r1
    8866:	61da      	str	r2, [r3, #28]
			break;
    8868:	e008      	b.n	887c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    886a:	4b07      	ldr	r3, [pc, #28]	; (8888 <system_apb_clock_set_mask+0x58>)
    886c:	4a06      	ldr	r2, [pc, #24]	; (8888 <system_apb_clock_set_mask+0x58>)
    886e:	6a11      	ldr	r1, [r2, #32]
    8870:	683a      	ldr	r2, [r7, #0]
    8872:	430a      	orrs	r2, r1
    8874:	621a      	str	r2, [r3, #32]
			break;
    8876:	e001      	b.n	887c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    8878:	2317      	movs	r3, #23
    887a:	e000      	b.n	887e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    887c:	2300      	movs	r3, #0
}
    887e:	0018      	movs	r0, r3
    8880:	46bd      	mov	sp, r7
    8882:	b002      	add	sp, #8
    8884:	bd80      	pop	{r7, pc}
    8886:	46c0      	nop			; (mov r8, r8)
    8888:	40000400 	.word	0x40000400

0000888c <system_pinmux_get_config_defaults>:
{
    888c:	b580      	push	{r7, lr}
    888e:	b082      	sub	sp, #8
    8890:	af00      	add	r7, sp, #0
    8892:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8894:	687b      	ldr	r3, [r7, #4]
    8896:	2280      	movs	r2, #128	; 0x80
    8898:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    889a:	687b      	ldr	r3, [r7, #4]
    889c:	2200      	movs	r2, #0
    889e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    88a0:	687b      	ldr	r3, [r7, #4]
    88a2:	2201      	movs	r2, #1
    88a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    88a6:	687b      	ldr	r3, [r7, #4]
    88a8:	2200      	movs	r2, #0
    88aa:	70da      	strb	r2, [r3, #3]
}
    88ac:	46c0      	nop			; (mov r8, r8)
    88ae:	46bd      	mov	sp, r7
    88b0:	b002      	add	sp, #8
    88b2:	bd80      	pop	{r7, pc}

000088b4 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    88b4:	b580      	push	{r7, lr}
    88b6:	b082      	sub	sp, #8
    88b8:	af00      	add	r7, sp, #0
    88ba:	0002      	movs	r2, r0
    88bc:	1dfb      	adds	r3, r7, #7
    88be:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    88c0:	1dfb      	adds	r3, r7, #7
    88c2:	781b      	ldrb	r3, [r3, #0]
    88c4:	2b00      	cmp	r3, #0
    88c6:	d002      	beq.n	88ce <system_voltage_reference_enable+0x1a>
    88c8:	2b01      	cmp	r3, #1
    88ca:	d007      	beq.n	88dc <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    88cc:	e00d      	b.n	88ea <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    88ce:	4b08      	ldr	r3, [pc, #32]	; (88f0 <system_voltage_reference_enable+0x3c>)
    88d0:	4a07      	ldr	r2, [pc, #28]	; (88f0 <system_voltage_reference_enable+0x3c>)
    88d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
    88d4:	2102      	movs	r1, #2
    88d6:	430a      	orrs	r2, r1
    88d8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    88da:	e006      	b.n	88ea <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    88dc:	4b04      	ldr	r3, [pc, #16]	; (88f0 <system_voltage_reference_enable+0x3c>)
    88de:	4a04      	ldr	r2, [pc, #16]	; (88f0 <system_voltage_reference_enable+0x3c>)
    88e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
    88e2:	2104      	movs	r1, #4
    88e4:	430a      	orrs	r2, r1
    88e6:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    88e8:	46c0      	nop			; (mov r8, r8)
	}
}
    88ea:	46bd      	mov	sp, r7
    88ec:	b002      	add	sp, #8
    88ee:	bd80      	pop	{r7, pc}
    88f0:	40000800 	.word	0x40000800

000088f4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    88f4:	b580      	push	{r7, lr}
    88f6:	b084      	sub	sp, #16
    88f8:	af00      	add	r7, sp, #0
    88fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    88fc:	687b      	ldr	r3, [r7, #4]
    88fe:	681b      	ldr	r3, [r3, #0]
    8900:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8902:	68fb      	ldr	r3, [r7, #12]
    8904:	7e5b      	ldrb	r3, [r3, #25]
    8906:	b2db      	uxtb	r3, r3
    8908:	b25b      	sxtb	r3, r3
    890a:	2b00      	cmp	r3, #0
    890c:	da01      	bge.n	8912 <adc_is_syncing+0x1e>
		return true;
    890e:	2301      	movs	r3, #1
    8910:	e000      	b.n	8914 <adc_is_syncing+0x20>
	}

	return false;
    8912:	2300      	movs	r3, #0
}
    8914:	0018      	movs	r0, r3
    8916:	46bd      	mov	sp, r7
    8918:	b004      	add	sp, #16
    891a:	bd80      	pop	{r7, pc}

0000891c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    891c:	b580      	push	{r7, lr}
    891e:	b082      	sub	sp, #8
    8920:	af00      	add	r7, sp, #0
    8922:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    8924:	687b      	ldr	r3, [r7, #4]
    8926:	2200      	movs	r2, #0
    8928:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	2200      	movs	r2, #0
    892e:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    8930:	687b      	ldr	r3, [r7, #4]
    8932:	2200      	movs	r2, #0
    8934:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	2200      	movs	r2, #0
    893a:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	2200      	movs	r2, #0
    8940:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    8942:	687b      	ldr	r3, [r7, #4]
    8944:	2200      	movs	r2, #0
    8946:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    8948:	687b      	ldr	r3, [r7, #4]
    894a:	2200      	movs	r2, #0
    894c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    894e:	687b      	ldr	r3, [r7, #4]
    8950:	2200      	movs	r2, #0
    8952:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    8954:	687b      	ldr	r3, [r7, #4]
    8956:	2200      	movs	r2, #0
    8958:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    895a:	687b      	ldr	r3, [r7, #4]
    895c:	22c0      	movs	r2, #192	; 0xc0
    895e:	0152      	lsls	r2, r2, #5
    8960:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    8962:	687b      	ldr	r3, [r7, #4]
    8964:	2200      	movs	r2, #0
    8966:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    8968:	687b      	ldr	r3, [r7, #4]
    896a:	2200      	movs	r2, #0
    896c:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    896e:	687b      	ldr	r3, [r7, #4]
    8970:	2200      	movs	r2, #0
    8972:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    8974:	687b      	ldr	r3, [r7, #4]
    8976:	2200      	movs	r2, #0
    8978:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    897a:	687b      	ldr	r3, [r7, #4]
    897c:	2200      	movs	r2, #0
    897e:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    8980:	687b      	ldr	r3, [r7, #4]
    8982:	222a      	movs	r2, #42	; 0x2a
    8984:	2100      	movs	r1, #0
    8986:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    8988:	687b      	ldr	r3, [r7, #4]
    898a:	2200      	movs	r2, #0
    898c:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    898e:	687b      	ldr	r3, [r7, #4]
    8990:	2200      	movs	r2, #0
    8992:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    8994:	687b      	ldr	r3, [r7, #4]
    8996:	2224      	movs	r2, #36	; 0x24
    8998:	2100      	movs	r1, #0
    899a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    899c:	687b      	ldr	r3, [r7, #4]
    899e:	2200      	movs	r2, #0
    89a0:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    89a2:	687b      	ldr	r3, [r7, #4]
    89a4:	2200      	movs	r2, #0
    89a6:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    89a8:	687b      	ldr	r3, [r7, #4]
    89aa:	2200      	movs	r2, #0
    89ac:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    89ae:	687b      	ldr	r3, [r7, #4]
    89b0:	222b      	movs	r2, #43	; 0x2b
    89b2:	2100      	movs	r1, #0
    89b4:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    89b6:	687b      	ldr	r3, [r7, #4]
    89b8:	222c      	movs	r2, #44	; 0x2c
    89ba:	2100      	movs	r1, #0
    89bc:	5499      	strb	r1, [r3, r2]
}
    89be:	46c0      	nop			; (mov r8, r8)
    89c0:	46bd      	mov	sp, r7
    89c2:	b002      	add	sp, #8
    89c4:	bd80      	pop	{r7, pc}
	...

000089c8 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    89c8:	b580      	push	{r7, lr}
    89ca:	b098      	sub	sp, #96	; 0x60
    89cc:	af00      	add	r7, sp, #0
    89ce:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    89d0:	230c      	movs	r3, #12
    89d2:	18fa      	adds	r2, r7, r3
    89d4:	4b15      	ldr	r3, [pc, #84]	; (8a2c <_adc_configure_ain_pin+0x64>)
    89d6:	0010      	movs	r0, r2
    89d8:	0019      	movs	r1, r3
    89da:	2350      	movs	r3, #80	; 0x50
    89dc:	001a      	movs	r2, r3
    89de:	4b14      	ldr	r3, [pc, #80]	; (8a30 <_adc_configure_ain_pin+0x68>)
    89e0:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    89e2:	4b14      	ldr	r3, [pc, #80]	; (8a34 <_adc_configure_ain_pin+0x6c>)
    89e4:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    89e6:	687b      	ldr	r3, [r7, #4]
    89e8:	2b13      	cmp	r3, #19
    89ea:	d81a      	bhi.n	8a22 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    89ec:	230c      	movs	r3, #12
    89ee:	18fb      	adds	r3, r7, r3
    89f0:	687a      	ldr	r2, [r7, #4]
    89f2:	0092      	lsls	r2, r2, #2
    89f4:	58d3      	ldr	r3, [r2, r3]
    89f6:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    89f8:	2308      	movs	r3, #8
    89fa:	18fb      	adds	r3, r7, r3
    89fc:	0018      	movs	r0, r3
    89fe:	4b0e      	ldr	r3, [pc, #56]	; (8a38 <_adc_configure_ain_pin+0x70>)
    8a00:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    8a02:	2308      	movs	r3, #8
    8a04:	18fb      	adds	r3, r7, r3
    8a06:	2200      	movs	r2, #0
    8a08:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    8a0a:	2308      	movs	r3, #8
    8a0c:	18fb      	adds	r3, r7, r3
    8a0e:	2201      	movs	r2, #1
    8a10:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    8a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8a14:	b2db      	uxtb	r3, r3
    8a16:	2208      	movs	r2, #8
    8a18:	18ba      	adds	r2, r7, r2
    8a1a:	0011      	movs	r1, r2
    8a1c:	0018      	movs	r0, r3
    8a1e:	4b07      	ldr	r3, [pc, #28]	; (8a3c <_adc_configure_ain_pin+0x74>)
    8a20:	4798      	blx	r3
	}
}
    8a22:	46c0      	nop			; (mov r8, r8)
    8a24:	46bd      	mov	sp, r7
    8a26:	b018      	add	sp, #96	; 0x60
    8a28:	bd80      	pop	{r7, pc}
    8a2a:	46c0      	nop			; (mov r8, r8)
    8a2c:	00014cf4 	.word	0x00014cf4
    8a30:	0000e551 	.word	0x0000e551
    8a34:	0000ffff 	.word	0x0000ffff
    8a38:	0000888d 	.word	0x0000888d
    8a3c:	0000c705 	.word	0x0000c705

00008a40 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    8a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a42:	b089      	sub	sp, #36	; 0x24
    8a44:	af00      	add	r7, sp, #0
    8a46:	6078      	str	r0, [r7, #4]
    8a48:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    8a4a:	231f      	movs	r3, #31
    8a4c:	18fb      	adds	r3, r7, r3
    8a4e:	2200      	movs	r2, #0
    8a50:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    8a52:	2310      	movs	r3, #16
    8a54:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    8a56:	2317      	movs	r3, #23
    8a58:	18fb      	adds	r3, r7, r3
    8a5a:	2200      	movs	r2, #0
    8a5c:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    8a5e:	687b      	ldr	r3, [r7, #4]
    8a60:	681b      	ldr	r3, [r3, #0]
    8a62:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8a64:	230c      	movs	r3, #12
    8a66:	18fb      	adds	r3, r7, r3
    8a68:	0018      	movs	r0, r3
    8a6a:	4bce      	ldr	r3, [pc, #824]	; (8da4 <_adc_set_config+0x364>)
    8a6c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    8a6e:	683b      	ldr	r3, [r7, #0]
    8a70:	781a      	ldrb	r2, [r3, #0]
    8a72:	230c      	movs	r3, #12
    8a74:	18fb      	adds	r3, r7, r3
    8a76:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    8a78:	230c      	movs	r3, #12
    8a7a:	18fb      	adds	r3, r7, r3
    8a7c:	0019      	movs	r1, r3
    8a7e:	201e      	movs	r0, #30
    8a80:	4bc9      	ldr	r3, [pc, #804]	; (8da8 <_adc_set_config+0x368>)
    8a82:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    8a84:	201e      	movs	r0, #30
    8a86:	4bc9      	ldr	r3, [pc, #804]	; (8dac <_adc_set_config+0x36c>)
    8a88:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    8a8a:	683b      	ldr	r3, [r7, #0]
    8a8c:	222c      	movs	r2, #44	; 0x2c
    8a8e:	5c9b      	ldrb	r3, [r3, r2]
    8a90:	2b00      	cmp	r3, #0
    8a92:	d040      	beq.n	8b16 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    8a94:	2316      	movs	r3, #22
    8a96:	18fb      	adds	r3, r7, r3
    8a98:	683a      	ldr	r2, [r7, #0]
    8a9a:	212b      	movs	r1, #43	; 0x2b
    8a9c:	5c52      	ldrb	r2, [r2, r1]
    8a9e:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    8aa0:	683b      	ldr	r3, [r7, #0]
    8aa2:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    8aa4:	2315      	movs	r3, #21
    8aa6:	18fb      	adds	r3, r7, r3
    8aa8:	2216      	movs	r2, #22
    8aaa:	18ba      	adds	r2, r7, r2
    8aac:	7812      	ldrb	r2, [r2, #0]
    8aae:	188a      	adds	r2, r1, r2
    8ab0:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    8ab2:	683b      	ldr	r3, [r7, #0]
    8ab4:	222c      	movs	r2, #44	; 0x2c
    8ab6:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    8ab8:	230f      	movs	r3, #15
    8aba:	18fb      	adds	r3, r7, r3
    8abc:	2215      	movs	r2, #21
    8abe:	18ba      	adds	r2, r7, r2
    8ac0:	7812      	ldrb	r2, [r2, #0]
    8ac2:	188a      	adds	r2, r1, r2
    8ac4:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    8ac6:	e018      	b.n	8afa <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    8ac8:	2316      	movs	r3, #22
    8aca:	18fb      	adds	r3, r7, r3
    8acc:	781b      	ldrb	r3, [r3, #0]
    8ace:	220f      	movs	r2, #15
    8ad0:	4013      	ands	r3, r2
    8ad2:	683a      	ldr	r2, [r7, #0]
    8ad4:	7b12      	ldrb	r2, [r2, #12]
    8ad6:	189b      	adds	r3, r3, r2
    8ad8:	0018      	movs	r0, r3
    8ada:	4bb5      	ldr	r3, [pc, #724]	; (8db0 <_adc_set_config+0x370>)
    8adc:	4798      	blx	r3
			start_pin++;
    8ade:	2315      	movs	r3, #21
    8ae0:	18fb      	adds	r3, r7, r3
    8ae2:	781a      	ldrb	r2, [r3, #0]
    8ae4:	2315      	movs	r3, #21
    8ae6:	18fb      	adds	r3, r7, r3
    8ae8:	3201      	adds	r2, #1
    8aea:	701a      	strb	r2, [r3, #0]
			offset++;
    8aec:	2316      	movs	r3, #22
    8aee:	18fb      	adds	r3, r7, r3
    8af0:	781a      	ldrb	r2, [r3, #0]
    8af2:	2316      	movs	r3, #22
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	3201      	adds	r2, #1
    8af8:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    8afa:	2315      	movs	r3, #21
    8afc:	18fa      	adds	r2, r7, r3
    8afe:	230f      	movs	r3, #15
    8b00:	18fb      	adds	r3, r7, r3
    8b02:	7812      	ldrb	r2, [r2, #0]
    8b04:	781b      	ldrb	r3, [r3, #0]
    8b06:	429a      	cmp	r2, r3
    8b08:	d3de      	bcc.n	8ac8 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    8b0a:	683b      	ldr	r3, [r7, #0]
    8b0c:	89db      	ldrh	r3, [r3, #14]
    8b0e:	0018      	movs	r0, r3
    8b10:	4ba7      	ldr	r3, [pc, #668]	; (8db0 <_adc_set_config+0x370>)
    8b12:	4798      	blx	r3
    8b14:	e009      	b.n	8b2a <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    8b16:	683b      	ldr	r3, [r7, #0]
    8b18:	7b1b      	ldrb	r3, [r3, #12]
    8b1a:	0018      	movs	r0, r3
    8b1c:	4ba4      	ldr	r3, [pc, #656]	; (8db0 <_adc_set_config+0x370>)
    8b1e:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    8b20:	683b      	ldr	r3, [r7, #0]
    8b22:	89db      	ldrh	r3, [r3, #14]
    8b24:	0018      	movs	r0, r3
    8b26:	4ba2      	ldr	r3, [pc, #648]	; (8db0 <_adc_set_config+0x370>)
    8b28:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    8b2a:	683b      	ldr	r3, [r7, #0]
    8b2c:	7d5b      	ldrb	r3, [r3, #21]
    8b2e:	009b      	lsls	r3, r3, #2
    8b30:	b2da      	uxtb	r2, r3
    8b32:	693b      	ldr	r3, [r7, #16]
    8b34:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    8b36:	683b      	ldr	r3, [r7, #0]
    8b38:	7d9b      	ldrb	r3, [r3, #22]
    8b3a:	01db      	lsls	r3, r3, #7
    8b3c:	b25a      	sxtb	r2, r3
			(config->reference);
    8b3e:	683b      	ldr	r3, [r7, #0]
    8b40:	785b      	ldrb	r3, [r3, #1]
    8b42:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    8b44:	4313      	orrs	r3, r2
    8b46:	b25b      	sxtb	r3, r3
    8b48:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    8b4a:	693b      	ldr	r3, [r7, #16]
    8b4c:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    8b4e:	683b      	ldr	r3, [r7, #0]
    8b50:	791b      	ldrb	r3, [r3, #4]
    8b52:	2b34      	cmp	r3, #52	; 0x34
    8b54:	d846      	bhi.n	8be4 <_adc_set_config+0x1a4>
    8b56:	009a      	lsls	r2, r3, #2
    8b58:	4b96      	ldr	r3, [pc, #600]	; (8db4 <_adc_set_config+0x374>)
    8b5a:	18d3      	adds	r3, r2, r3
    8b5c:	681b      	ldr	r3, [r3, #0]
    8b5e:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    8b60:	231f      	movs	r3, #31
    8b62:	18fb      	adds	r3, r7, r3
    8b64:	683a      	ldr	r2, [r7, #0]
    8b66:	7c52      	ldrb	r2, [r2, #17]
    8b68:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    8b6a:	2317      	movs	r3, #23
    8b6c:	18fb      	adds	r3, r7, r3
    8b6e:	683a      	ldr	r2, [r7, #0]
    8b70:	7c12      	ldrb	r2, [r2, #16]
    8b72:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8b74:	2310      	movs	r3, #16
    8b76:	61bb      	str	r3, [r7, #24]
		break;
    8b78:	e036      	b.n	8be8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    8b7a:	231f      	movs	r3, #31
    8b7c:	18fb      	adds	r3, r7, r3
    8b7e:	2201      	movs	r2, #1
    8b80:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    8b82:	2317      	movs	r3, #23
    8b84:	18fb      	adds	r3, r7, r3
    8b86:	2202      	movs	r2, #2
    8b88:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8b8a:	2310      	movs	r3, #16
    8b8c:	61bb      	str	r3, [r7, #24]
		break;
    8b8e:	e02b      	b.n	8be8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    8b90:	231f      	movs	r3, #31
    8b92:	18fb      	adds	r3, r7, r3
    8b94:	2202      	movs	r2, #2
    8b96:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    8b98:	2317      	movs	r3, #23
    8b9a:	18fb      	adds	r3, r7, r3
    8b9c:	2204      	movs	r2, #4
    8b9e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8ba0:	2310      	movs	r3, #16
    8ba2:	61bb      	str	r3, [r7, #24]
		break;
    8ba4:	e020      	b.n	8be8 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    8ba6:	231f      	movs	r3, #31
    8ba8:	18fb      	adds	r3, r7, r3
    8baa:	2201      	movs	r2, #1
    8bac:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    8bae:	2317      	movs	r3, #23
    8bb0:	18fb      	adds	r3, r7, r3
    8bb2:	2206      	movs	r2, #6
    8bb4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8bb6:	2310      	movs	r3, #16
    8bb8:	61bb      	str	r3, [r7, #24]
		break;
    8bba:	e015      	b.n	8be8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    8bbc:	231f      	movs	r3, #31
    8bbe:	18fb      	adds	r3, r7, r3
    8bc0:	2200      	movs	r2, #0
    8bc2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    8bc4:	2317      	movs	r3, #23
    8bc6:	18fb      	adds	r3, r7, r3
    8bc8:	2208      	movs	r2, #8
    8bca:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8bcc:	2310      	movs	r3, #16
    8bce:	61bb      	str	r3, [r7, #24]
		break;
    8bd0:	e00a      	b.n	8be8 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    8bd2:	2330      	movs	r3, #48	; 0x30
    8bd4:	61bb      	str	r3, [r7, #24]
		break;
    8bd6:	e007      	b.n	8be8 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    8bd8:	2320      	movs	r3, #32
    8bda:	61bb      	str	r3, [r7, #24]
		break;
    8bdc:	e004      	b.n	8be8 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    8bde:	2300      	movs	r3, #0
    8be0:	61bb      	str	r3, [r7, #24]
		break;
    8be2:	e001      	b.n	8be8 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    8be4:	2317      	movs	r3, #23
    8be6:	e1ae      	b.n	8f46 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    8be8:	231f      	movs	r3, #31
    8bea:	18fb      	adds	r3, r7, r3
    8bec:	781b      	ldrb	r3, [r3, #0]
    8bee:	011b      	lsls	r3, r3, #4
    8bf0:	b2db      	uxtb	r3, r3
    8bf2:	2270      	movs	r2, #112	; 0x70
    8bf4:	4013      	ands	r3, r2
    8bf6:	b2da      	uxtb	r2, r3
    8bf8:	2317      	movs	r3, #23
    8bfa:	18fb      	adds	r3, r7, r3
    8bfc:	781b      	ldrb	r3, [r3, #0]
    8bfe:	4313      	orrs	r3, r2
    8c00:	b2da      	uxtb	r2, r3
    8c02:	693b      	ldr	r3, [r7, #16]
    8c04:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    8c06:	683b      	ldr	r3, [r7, #0]
    8c08:	7ddb      	ldrb	r3, [r3, #23]
    8c0a:	2b3f      	cmp	r3, #63	; 0x3f
    8c0c:	d901      	bls.n	8c12 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    8c0e:	2317      	movs	r3, #23
    8c10:	e199      	b.n	8f46 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    8c12:	683b      	ldr	r3, [r7, #0]
    8c14:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    8c16:	693b      	ldr	r3, [r7, #16]
    8c18:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    8c1a:	46c0      	nop			; (mov r8, r8)
    8c1c:	687b      	ldr	r3, [r7, #4]
    8c1e:	0018      	movs	r0, r3
    8c20:	4b65      	ldr	r3, [pc, #404]	; (8db8 <_adc_set_config+0x378>)
    8c22:	4798      	blx	r3
    8c24:	1e03      	subs	r3, r0, #0
    8c26:	d1f9      	bne.n	8c1c <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    8c28:	683b      	ldr	r3, [r7, #0]
    8c2a:	885a      	ldrh	r2, [r3, #2]
    8c2c:	69bb      	ldr	r3, [r7, #24]
    8c2e:	b29b      	uxth	r3, r3
    8c30:	4313      	orrs	r3, r2
    8c32:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    8c34:	683b      	ldr	r3, [r7, #0]
    8c36:	2124      	movs	r1, #36	; 0x24
    8c38:	5c5b      	ldrb	r3, [r3, r1]
    8c3a:	b29b      	uxth	r3, r3
    8c3c:	00db      	lsls	r3, r3, #3
    8c3e:	b29b      	uxth	r3, r3
			resolution |
    8c40:	4313      	orrs	r3, r2
    8c42:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    8c44:	683b      	ldr	r3, [r7, #0]
    8c46:	7d1b      	ldrb	r3, [r3, #20]
    8c48:	b29b      	uxth	r3, r3
    8c4a:	009b      	lsls	r3, r3, #2
    8c4c:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    8c4e:	4313      	orrs	r3, r2
    8c50:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    8c52:	683b      	ldr	r3, [r7, #0]
    8c54:	7c9b      	ldrb	r3, [r3, #18]
    8c56:	b29b      	uxth	r3, r3
    8c58:	18db      	adds	r3, r3, r3
    8c5a:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    8c5c:	4313      	orrs	r3, r2
    8c5e:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    8c60:	683b      	ldr	r3, [r7, #0]
    8c62:	7cdb      	ldrb	r3, [r3, #19]
    8c64:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    8c66:	4313      	orrs	r3, r2
    8c68:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    8c6a:	693b      	ldr	r3, [r7, #16]
    8c6c:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    8c6e:	683b      	ldr	r3, [r7, #0]
    8c70:	7e1b      	ldrb	r3, [r3, #24]
    8c72:	2b00      	cmp	r3, #0
    8c74:	d100      	bne.n	8c78 <_adc_set_config+0x238>
    8c76:	e0c4      	b.n	8e02 <_adc_set_config+0x3c2>
		switch (resolution) {
    8c78:	69bb      	ldr	r3, [r7, #24]
    8c7a:	2b10      	cmp	r3, #16
    8c7c:	d100      	bne.n	8c80 <_adc_set_config+0x240>
    8c7e:	e076      	b.n	8d6e <_adc_set_config+0x32e>
    8c80:	d802      	bhi.n	8c88 <_adc_set_config+0x248>
    8c82:	2b00      	cmp	r3, #0
    8c84:	d04d      	beq.n	8d22 <_adc_set_config+0x2e2>
    8c86:	e0bc      	b.n	8e02 <_adc_set_config+0x3c2>
    8c88:	2b20      	cmp	r3, #32
    8c8a:	d023      	beq.n	8cd4 <_adc_set_config+0x294>
    8c8c:	2b30      	cmp	r3, #48	; 0x30
    8c8e:	d000      	beq.n	8c92 <_adc_set_config+0x252>
    8c90:	e0b7      	b.n	8e02 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    8c92:	683b      	ldr	r3, [r7, #0]
    8c94:	7cdb      	ldrb	r3, [r3, #19]
    8c96:	2b00      	cmp	r3, #0
    8c98:	d011      	beq.n	8cbe <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    8c9a:	683b      	ldr	r3, [r7, #0]
    8c9c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    8c9e:	2b7f      	cmp	r3, #127	; 0x7f
    8ca0:	dc0b      	bgt.n	8cba <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    8ca2:	683b      	ldr	r3, [r7, #0]
    8ca4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    8ca6:	3380      	adds	r3, #128	; 0x80
    8ca8:	db07      	blt.n	8cba <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    8caa:	683b      	ldr	r3, [r7, #0]
    8cac:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    8cae:	2b7f      	cmp	r3, #127	; 0x7f
    8cb0:	dc03      	bgt.n	8cba <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    8cb2:	683b      	ldr	r3, [r7, #0]
    8cb4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    8cb6:	3380      	adds	r3, #128	; 0x80
    8cb8:	da01      	bge.n	8cbe <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8cba:	2317      	movs	r3, #23
    8cbc:	e143      	b.n	8f46 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    8cbe:	683b      	ldr	r3, [r7, #0]
    8cc0:	69db      	ldr	r3, [r3, #28]
    8cc2:	2bff      	cmp	r3, #255	; 0xff
    8cc4:	dc04      	bgt.n	8cd0 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    8cc6:	683b      	ldr	r3, [r7, #0]
    8cc8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    8cca:	2bff      	cmp	r3, #255	; 0xff
    8ccc:	dc00      	bgt.n	8cd0 <_adc_set_config+0x290>
    8cce:	e091      	b.n	8df4 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8cd0:	2317      	movs	r3, #23
    8cd2:	e138      	b.n	8f46 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    8cd4:	683b      	ldr	r3, [r7, #0]
    8cd6:	7cdb      	ldrb	r3, [r3, #19]
    8cd8:	2b00      	cmp	r3, #0
    8cda:	d015      	beq.n	8d08 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    8cdc:	683b      	ldr	r3, [r7, #0]
    8cde:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    8ce0:	4a36      	ldr	r2, [pc, #216]	; (8dbc <_adc_set_config+0x37c>)
    8ce2:	4293      	cmp	r3, r2
    8ce4:	dc0e      	bgt.n	8d04 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    8ce6:	683b      	ldr	r3, [r7, #0]
    8ce8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    8cea:	4a35      	ldr	r2, [pc, #212]	; (8dc0 <_adc_set_config+0x380>)
    8cec:	4293      	cmp	r3, r2
    8cee:	db09      	blt.n	8d04 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    8cf0:	683b      	ldr	r3, [r7, #0]
    8cf2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    8cf4:	4a31      	ldr	r2, [pc, #196]	; (8dbc <_adc_set_config+0x37c>)
    8cf6:	4293      	cmp	r3, r2
    8cf8:	dc04      	bgt.n	8d04 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    8cfa:	683b      	ldr	r3, [r7, #0]
    8cfc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    8cfe:	4a30      	ldr	r2, [pc, #192]	; (8dc0 <_adc_set_config+0x380>)
    8d00:	4293      	cmp	r3, r2
    8d02:	da01      	bge.n	8d08 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8d04:	2317      	movs	r3, #23
    8d06:	e11e      	b.n	8f46 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    8d08:	683b      	ldr	r3, [r7, #0]
    8d0a:	69db      	ldr	r3, [r3, #28]
    8d0c:	4a2d      	ldr	r2, [pc, #180]	; (8dc4 <_adc_set_config+0x384>)
    8d0e:	4293      	cmp	r3, r2
    8d10:	dc05      	bgt.n	8d1e <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    8d12:	683b      	ldr	r3, [r7, #0]
    8d14:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    8d16:	4a2b      	ldr	r2, [pc, #172]	; (8dc4 <_adc_set_config+0x384>)
    8d18:	4293      	cmp	r3, r2
    8d1a:	dc00      	bgt.n	8d1e <_adc_set_config+0x2de>
    8d1c:	e06c      	b.n	8df8 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8d1e:	2317      	movs	r3, #23
    8d20:	e111      	b.n	8f46 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    8d22:	683b      	ldr	r3, [r7, #0]
    8d24:	7cdb      	ldrb	r3, [r3, #19]
    8d26:	2b00      	cmp	r3, #0
    8d28:	d015      	beq.n	8d56 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    8d2a:	683b      	ldr	r3, [r7, #0]
    8d2c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    8d2e:	4a26      	ldr	r2, [pc, #152]	; (8dc8 <_adc_set_config+0x388>)
    8d30:	4293      	cmp	r3, r2
    8d32:	dc0e      	bgt.n	8d52 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    8d34:	683b      	ldr	r3, [r7, #0]
    8d36:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    8d38:	4a24      	ldr	r2, [pc, #144]	; (8dcc <_adc_set_config+0x38c>)
    8d3a:	4293      	cmp	r3, r2
    8d3c:	db09      	blt.n	8d52 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    8d3e:	683b      	ldr	r3, [r7, #0]
    8d40:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    8d42:	4a21      	ldr	r2, [pc, #132]	; (8dc8 <_adc_set_config+0x388>)
    8d44:	4293      	cmp	r3, r2
    8d46:	dc04      	bgt.n	8d52 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    8d48:	683b      	ldr	r3, [r7, #0]
    8d4a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    8d4c:	4a1f      	ldr	r2, [pc, #124]	; (8dcc <_adc_set_config+0x38c>)
    8d4e:	4293      	cmp	r3, r2
    8d50:	da01      	bge.n	8d56 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8d52:	2317      	movs	r3, #23
    8d54:	e0f7      	b.n	8f46 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    8d56:	683b      	ldr	r3, [r7, #0]
    8d58:	69db      	ldr	r3, [r3, #28]
    8d5a:	4a1d      	ldr	r2, [pc, #116]	; (8dd0 <_adc_set_config+0x390>)
    8d5c:	4293      	cmp	r3, r2
    8d5e:	dc04      	bgt.n	8d6a <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    8d60:	683b      	ldr	r3, [r7, #0]
    8d62:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    8d64:	4a1a      	ldr	r2, [pc, #104]	; (8dd0 <_adc_set_config+0x390>)
    8d66:	4293      	cmp	r3, r2
    8d68:	dd48      	ble.n	8dfc <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8d6a:	2317      	movs	r3, #23
    8d6c:	e0eb      	b.n	8f46 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    8d6e:	683b      	ldr	r3, [r7, #0]
    8d70:	7cdb      	ldrb	r3, [r3, #19]
    8d72:	2b00      	cmp	r3, #0
    8d74:	d032      	beq.n	8ddc <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    8d76:	683b      	ldr	r3, [r7, #0]
    8d78:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    8d7a:	4a16      	ldr	r2, [pc, #88]	; (8dd4 <_adc_set_config+0x394>)
    8d7c:	4293      	cmp	r3, r2
    8d7e:	dc0e      	bgt.n	8d9e <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    8d80:	683b      	ldr	r3, [r7, #0]
    8d82:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    8d84:	4a14      	ldr	r2, [pc, #80]	; (8dd8 <_adc_set_config+0x398>)
    8d86:	4293      	cmp	r3, r2
    8d88:	db09      	blt.n	8d9e <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    8d8a:	683b      	ldr	r3, [r7, #0]
    8d8c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    8d8e:	4a11      	ldr	r2, [pc, #68]	; (8dd4 <_adc_set_config+0x394>)
    8d90:	4293      	cmp	r3, r2
    8d92:	dc04      	bgt.n	8d9e <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    8d94:	683b      	ldr	r3, [r7, #0]
    8d96:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    8d98:	4a0f      	ldr	r2, [pc, #60]	; (8dd8 <_adc_set_config+0x398>)
    8d9a:	4293      	cmp	r3, r2
    8d9c:	da1e      	bge.n	8ddc <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8d9e:	2317      	movs	r3, #23
    8da0:	e0d1      	b.n	8f46 <_adc_set_config+0x506>
    8da2:	46c0      	nop			; (mov r8, r8)
    8da4:	00008819 	.word	0x00008819
    8da8:	0000c419 	.word	0x0000c419
    8dac:	0000c45d 	.word	0x0000c45d
    8db0:	000089c9 	.word	0x000089c9
    8db4:	00014d44 	.word	0x00014d44
    8db8:	000088f5 	.word	0x000088f5
    8dbc:	000001ff 	.word	0x000001ff
    8dc0:	fffffe00 	.word	0xfffffe00
    8dc4:	000003ff 	.word	0x000003ff
    8dc8:	000007ff 	.word	0x000007ff
    8dcc:	fffff800 	.word	0xfffff800
    8dd0:	00000fff 	.word	0x00000fff
    8dd4:	00007fff 	.word	0x00007fff
    8dd8:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    8ddc:	683b      	ldr	r3, [r7, #0]
    8dde:	69db      	ldr	r3, [r3, #28]
    8de0:	4a5b      	ldr	r2, [pc, #364]	; (8f50 <_adc_set_config+0x510>)
    8de2:	4293      	cmp	r3, r2
    8de4:	dc04      	bgt.n	8df0 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    8de6:	683b      	ldr	r3, [r7, #0]
    8de8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    8dea:	4a59      	ldr	r2, [pc, #356]	; (8f50 <_adc_set_config+0x510>)
    8dec:	4293      	cmp	r3, r2
    8dee:	dd07      	ble.n	8e00 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8df0:	2317      	movs	r3, #23
    8df2:	e0a8      	b.n	8f46 <_adc_set_config+0x506>
			break;
    8df4:	46c0      	nop			; (mov r8, r8)
    8df6:	e004      	b.n	8e02 <_adc_set_config+0x3c2>
			break;
    8df8:	46c0      	nop			; (mov r8, r8)
    8dfa:	e002      	b.n	8e02 <_adc_set_config+0x3c2>
			break;
    8dfc:	46c0      	nop			; (mov r8, r8)
    8dfe:	e000      	b.n	8e02 <_adc_set_config+0x3c2>
			}
			break;
    8e00:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    8e02:	46c0      	nop			; (mov r8, r8)
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	0018      	movs	r0, r3
    8e08:	4b52      	ldr	r3, [pc, #328]	; (8f54 <_adc_set_config+0x514>)
    8e0a:	4798      	blx	r3
    8e0c:	1e03      	subs	r3, r0, #0
    8e0e:	d1f9      	bne.n	8e04 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    8e10:	683b      	ldr	r3, [r7, #0]
    8e12:	7e1a      	ldrb	r2, [r3, #24]
    8e14:	693b      	ldr	r3, [r7, #16]
    8e16:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    8e18:	46c0      	nop			; (mov r8, r8)
    8e1a:	687b      	ldr	r3, [r7, #4]
    8e1c:	0018      	movs	r0, r3
    8e1e:	4b4d      	ldr	r3, [pc, #308]	; (8f54 <_adc_set_config+0x514>)
    8e20:	4798      	blx	r3
    8e22:	1e03      	subs	r3, r0, #0
    8e24:	d1f9      	bne.n	8e1a <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    8e26:	683b      	ldr	r3, [r7, #0]
    8e28:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    8e2a:	b29a      	uxth	r2, r3
    8e2c:	693b      	ldr	r3, [r7, #16]
    8e2e:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    8e30:	46c0      	nop			; (mov r8, r8)
    8e32:	687b      	ldr	r3, [r7, #4]
    8e34:	0018      	movs	r0, r3
    8e36:	4b47      	ldr	r3, [pc, #284]	; (8f54 <_adc_set_config+0x514>)
    8e38:	4798      	blx	r3
    8e3a:	1e03      	subs	r3, r0, #0
    8e3c:	d1f9      	bne.n	8e32 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    8e3e:	683b      	ldr	r3, [r7, #0]
    8e40:	6a1b      	ldr	r3, [r3, #32]
    8e42:	b29a      	uxth	r2, r3
    8e44:	693b      	ldr	r3, [r7, #16]
    8e46:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    8e48:	2314      	movs	r3, #20
    8e4a:	18fb      	adds	r3, r7, r3
    8e4c:	683a      	ldr	r2, [r7, #0]
    8e4e:	212c      	movs	r1, #44	; 0x2c
    8e50:	5c52      	ldrb	r2, [r2, r1]
    8e52:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    8e54:	2314      	movs	r3, #20
    8e56:	18fb      	adds	r3, r7, r3
    8e58:	781b      	ldrb	r3, [r3, #0]
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d006      	beq.n	8e6c <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    8e5e:	2314      	movs	r3, #20
    8e60:	18fb      	adds	r3, r7, r3
    8e62:	781a      	ldrb	r2, [r3, #0]
    8e64:	2314      	movs	r3, #20
    8e66:	18fb      	adds	r3, r7, r3
    8e68:	3a01      	subs	r2, #1
    8e6a:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    8e6c:	2314      	movs	r3, #20
    8e6e:	18fb      	adds	r3, r7, r3
    8e70:	781b      	ldrb	r3, [r3, #0]
    8e72:	2b0f      	cmp	r3, #15
    8e74:	d804      	bhi.n	8e80 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    8e76:	683b      	ldr	r3, [r7, #0]
    8e78:	222b      	movs	r2, #43	; 0x2b
    8e7a:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    8e7c:	2b0f      	cmp	r3, #15
    8e7e:	d901      	bls.n	8e84 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    8e80:	2317      	movs	r3, #23
    8e82:	e060      	b.n	8f46 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    8e84:	46c0      	nop			; (mov r8, r8)
    8e86:	687b      	ldr	r3, [r7, #4]
    8e88:	0018      	movs	r0, r3
    8e8a:	4b32      	ldr	r3, [pc, #200]	; (8f54 <_adc_set_config+0x514>)
    8e8c:	4798      	blx	r3
    8e8e:	1e03      	subs	r3, r0, #0
    8e90:	d1f9      	bne.n	8e86 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    8e92:	683b      	ldr	r3, [r7, #0]
    8e94:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    8e96:	683a      	ldr	r2, [r7, #0]
    8e98:	212b      	movs	r1, #43	; 0x2b
    8e9a:	5c52      	ldrb	r2, [r2, r1]
    8e9c:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    8e9e:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    8ea0:	2214      	movs	r2, #20
    8ea2:	18ba      	adds	r2, r7, r2
    8ea4:	7812      	ldrb	r2, [r2, #0]
    8ea6:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    8ea8:	4313      	orrs	r3, r2
			config->negative_input |
    8eaa:	683a      	ldr	r2, [r7, #0]
    8eac:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    8eae:	4313      	orrs	r3, r2
			config->positive_input;
    8eb0:	683a      	ldr	r2, [r7, #0]
    8eb2:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    8eb4:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    8eb6:	693b      	ldr	r3, [r7, #16]
    8eb8:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    8eba:	683b      	ldr	r3, [r7, #0]
    8ebc:	222a      	movs	r2, #42	; 0x2a
    8ebe:	5c9a      	ldrb	r2, [r3, r2]
    8ec0:	693b      	ldr	r3, [r7, #16]
    8ec2:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    8ec4:	693b      	ldr	r3, [r7, #16]
    8ec6:	220f      	movs	r2, #15
    8ec8:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    8eca:	683b      	ldr	r3, [r7, #0]
    8ecc:	2224      	movs	r2, #36	; 0x24
    8ece:	5c9b      	ldrb	r3, [r3, r2]
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d01e      	beq.n	8f12 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    8ed4:	683b      	ldr	r3, [r7, #0]
    8ed6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    8ed8:	4a1f      	ldr	r2, [pc, #124]	; (8f58 <_adc_set_config+0x518>)
    8eda:	4293      	cmp	r3, r2
    8edc:	d901      	bls.n	8ee2 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    8ede:	2317      	movs	r3, #23
    8ee0:	e031      	b.n	8f46 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    8ee2:	683b      	ldr	r3, [r7, #0]
    8ee4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    8ee6:	693b      	ldr	r3, [r7, #16]
    8ee8:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    8eea:	683b      	ldr	r3, [r7, #0]
    8eec:	2228      	movs	r2, #40	; 0x28
    8eee:	5e9b      	ldrsh	r3, [r3, r2]
    8ef0:	4a1a      	ldr	r2, [pc, #104]	; (8f5c <_adc_set_config+0x51c>)
    8ef2:	4293      	cmp	r3, r2
    8ef4:	dc05      	bgt.n	8f02 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    8ef6:	683b      	ldr	r3, [r7, #0]
    8ef8:	2228      	movs	r2, #40	; 0x28
    8efa:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    8efc:	4a18      	ldr	r2, [pc, #96]	; (8f60 <_adc_set_config+0x520>)
    8efe:	4293      	cmp	r3, r2
    8f00:	da01      	bge.n	8f06 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    8f02:	2317      	movs	r3, #23
    8f04:	e01f      	b.n	8f46 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    8f06:	683b      	ldr	r3, [r7, #0]
    8f08:	2228      	movs	r2, #40	; 0x28
    8f0a:	5e9b      	ldrsh	r3, [r3, r2]
    8f0c:	b29a      	uxth	r2, r3
    8f0e:	693b      	ldr	r3, [r7, #16]
    8f10:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    8f12:	4b14      	ldr	r3, [pc, #80]	; (8f64 <_adc_set_config+0x524>)
    8f14:	681b      	ldr	r3, [r3, #0]
    8f16:	08db      	lsrs	r3, r3, #3
    8f18:	b29b      	uxth	r3, r3
    8f1a:	021b      	lsls	r3, r3, #8
    8f1c:	b29a      	uxth	r2, r3
    8f1e:	23e0      	movs	r3, #224	; 0xe0
    8f20:	00db      	lsls	r3, r3, #3
    8f22:	4013      	ands	r3, r2
    8f24:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    8f26:	4b10      	ldr	r3, [pc, #64]	; (8f68 <_adc_set_config+0x528>)
    8f28:	685c      	ldr	r4, [r3, #4]
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	0161      	lsls	r1, r4, #5
    8f2e:	0edd      	lsrs	r5, r3, #27
    8f30:	430d      	orrs	r5, r1
    8f32:	0ee6      	lsrs	r6, r4, #27
    8f34:	b2ab      	uxth	r3, r5
    8f36:	21ff      	movs	r1, #255	; 0xff
    8f38:	400b      	ands	r3, r1
    8f3a:	b29b      	uxth	r3, r3
			) |
    8f3c:	4313      	orrs	r3, r2
    8f3e:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    8f40:	693b      	ldr	r3, [r7, #16]
    8f42:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    8f44:	2300      	movs	r3, #0
}
    8f46:	0018      	movs	r0, r3
    8f48:	46bd      	mov	sp, r7
    8f4a:	b009      	add	sp, #36	; 0x24
    8f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f4e:	46c0      	nop			; (mov r8, r8)
    8f50:	0000ffff 	.word	0x0000ffff
    8f54:	000088f5 	.word	0x000088f5
    8f58:	00000fff 	.word	0x00000fff
    8f5c:	000007ff 	.word	0x000007ff
    8f60:	fffff800 	.word	0xfffff800
    8f64:	00806024 	.word	0x00806024
    8f68:	00806020 	.word	0x00806020

00008f6c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    8f6c:	b580      	push	{r7, lr}
    8f6e:	b084      	sub	sp, #16
    8f70:	af00      	add	r7, sp, #0
    8f72:	60f8      	str	r0, [r7, #12]
    8f74:	60b9      	str	r1, [r7, #8]
    8f76:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    8f78:	68fb      	ldr	r3, [r7, #12]
    8f7a:	68ba      	ldr	r2, [r7, #8]
    8f7c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    8f7e:	2380      	movs	r3, #128	; 0x80
    8f80:	025b      	lsls	r3, r3, #9
    8f82:	0019      	movs	r1, r3
    8f84:	2002      	movs	r0, #2
    8f86:	4b15      	ldr	r3, [pc, #84]	; (8fdc <adc_init+0x70>)
    8f88:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    8f8a:	68bb      	ldr	r3, [r7, #8]
    8f8c:	781b      	ldrb	r3, [r3, #0]
    8f8e:	b2db      	uxtb	r3, r3
    8f90:	001a      	movs	r2, r3
    8f92:	2301      	movs	r3, #1
    8f94:	4013      	ands	r3, r2
    8f96:	d001      	beq.n	8f9c <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    8f98:	2305      	movs	r3, #5
    8f9a:	e01a      	b.n	8fd2 <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    8f9c:	68bb      	ldr	r3, [r7, #8]
    8f9e:	781b      	ldrb	r3, [r3, #0]
    8fa0:	b2db      	uxtb	r3, r3
    8fa2:	001a      	movs	r2, r3
    8fa4:	2302      	movs	r3, #2
    8fa6:	4013      	ands	r3, r2
    8fa8:	d001      	beq.n	8fae <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    8faa:	231c      	movs	r3, #28
    8fac:	e011      	b.n	8fd2 <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    8fae:	687b      	ldr	r3, [r7, #4]
    8fb0:	785a      	ldrb	r2, [r3, #1]
    8fb2:	68fb      	ldr	r3, [r7, #12]
    8fb4:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    8fb6:	68fb      	ldr	r3, [r7, #12]
    8fb8:	791b      	ldrb	r3, [r3, #4]
    8fba:	2b00      	cmp	r3, #0
    8fbc:	d102      	bne.n	8fc4 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    8fbe:	2001      	movs	r0, #1
    8fc0:	4b07      	ldr	r3, [pc, #28]	; (8fe0 <adc_init+0x74>)
    8fc2:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    8fc4:	687a      	ldr	r2, [r7, #4]
    8fc6:	68fb      	ldr	r3, [r7, #12]
    8fc8:	0011      	movs	r1, r2
    8fca:	0018      	movs	r0, r3
    8fcc:	4b05      	ldr	r3, [pc, #20]	; (8fe4 <adc_init+0x78>)
    8fce:	4798      	blx	r3
    8fd0:	0003      	movs	r3, r0
}
    8fd2:	0018      	movs	r0, r3
    8fd4:	46bd      	mov	sp, r7
    8fd6:	b004      	add	sp, #16
    8fd8:	bd80      	pop	{r7, pc}
    8fda:	46c0      	nop			; (mov r8, r8)
    8fdc:	00008831 	.word	0x00008831
    8fe0:	000088b5 	.word	0x000088b5
    8fe4:	00008a41 	.word	0x00008a41

00008fe8 <system_gclk_chan_get_config_defaults>:
{
    8fe8:	b580      	push	{r7, lr}
    8fea:	b082      	sub	sp, #8
    8fec:	af00      	add	r7, sp, #0
    8fee:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8ff0:	687b      	ldr	r3, [r7, #4]
    8ff2:	2200      	movs	r2, #0
    8ff4:	701a      	strb	r2, [r3, #0]
}
    8ff6:	46c0      	nop			; (mov r8, r8)
    8ff8:	46bd      	mov	sp, r7
    8ffa:	b002      	add	sp, #8
    8ffc:	bd80      	pop	{r7, pc}
	...

00009000 <system_apb_clock_set_mask>:
{
    9000:	b580      	push	{r7, lr}
    9002:	b082      	sub	sp, #8
    9004:	af00      	add	r7, sp, #0
    9006:	0002      	movs	r2, r0
    9008:	6039      	str	r1, [r7, #0]
    900a:	1dfb      	adds	r3, r7, #7
    900c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    900e:	1dfb      	adds	r3, r7, #7
    9010:	781b      	ldrb	r3, [r3, #0]
    9012:	2b01      	cmp	r3, #1
    9014:	d00a      	beq.n	902c <system_apb_clock_set_mask+0x2c>
    9016:	2b02      	cmp	r3, #2
    9018:	d00f      	beq.n	903a <system_apb_clock_set_mask+0x3a>
    901a:	2b00      	cmp	r3, #0
    901c:	d114      	bne.n	9048 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    901e:	4b0e      	ldr	r3, [pc, #56]	; (9058 <system_apb_clock_set_mask+0x58>)
    9020:	4a0d      	ldr	r2, [pc, #52]	; (9058 <system_apb_clock_set_mask+0x58>)
    9022:	6991      	ldr	r1, [r2, #24]
    9024:	683a      	ldr	r2, [r7, #0]
    9026:	430a      	orrs	r2, r1
    9028:	619a      	str	r2, [r3, #24]
			break;
    902a:	e00f      	b.n	904c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    902c:	4b0a      	ldr	r3, [pc, #40]	; (9058 <system_apb_clock_set_mask+0x58>)
    902e:	4a0a      	ldr	r2, [pc, #40]	; (9058 <system_apb_clock_set_mask+0x58>)
    9030:	69d1      	ldr	r1, [r2, #28]
    9032:	683a      	ldr	r2, [r7, #0]
    9034:	430a      	orrs	r2, r1
    9036:	61da      	str	r2, [r3, #28]
			break;
    9038:	e008      	b.n	904c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    903a:	4b07      	ldr	r3, [pc, #28]	; (9058 <system_apb_clock_set_mask+0x58>)
    903c:	4a06      	ldr	r2, [pc, #24]	; (9058 <system_apb_clock_set_mask+0x58>)
    903e:	6a11      	ldr	r1, [r2, #32]
    9040:	683a      	ldr	r2, [r7, #0]
    9042:	430a      	orrs	r2, r1
    9044:	621a      	str	r2, [r3, #32]
			break;
    9046:	e001      	b.n	904c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    9048:	2317      	movs	r3, #23
    904a:	e000      	b.n	904e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    904c:	2300      	movs	r3, #0
}
    904e:	0018      	movs	r0, r3
    9050:	46bd      	mov	sp, r7
    9052:	b002      	add	sp, #8
    9054:	bd80      	pop	{r7, pc}
    9056:	46c0      	nop			; (mov r8, r8)
    9058:	40000400 	.word	0x40000400

0000905c <system_pinmux_get_config_defaults>:
{
    905c:	b580      	push	{r7, lr}
    905e:	b082      	sub	sp, #8
    9060:	af00      	add	r7, sp, #0
    9062:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	2280      	movs	r2, #128	; 0x80
    9068:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    906a:	687b      	ldr	r3, [r7, #4]
    906c:	2200      	movs	r2, #0
    906e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9070:	687b      	ldr	r3, [r7, #4]
    9072:	2201      	movs	r2, #1
    9074:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9076:	687b      	ldr	r3, [r7, #4]
    9078:	2200      	movs	r2, #0
    907a:	70da      	strb	r2, [r3, #3]
}
    907c:	46c0      	nop			; (mov r8, r8)
    907e:	46bd      	mov	sp, r7
    9080:	b002      	add	sp, #8
    9082:	bd80      	pop	{r7, pc}

00009084 <system_is_debugger_present>:
{
    9084:	b580      	push	{r7, lr}
    9086:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    9088:	4b05      	ldr	r3, [pc, #20]	; (90a0 <system_is_debugger_present+0x1c>)
    908a:	789b      	ldrb	r3, [r3, #2]
    908c:	b2db      	uxtb	r3, r3
    908e:	001a      	movs	r2, r3
    9090:	2302      	movs	r3, #2
    9092:	4013      	ands	r3, r2
    9094:	1e5a      	subs	r2, r3, #1
    9096:	4193      	sbcs	r3, r2
    9098:	b2db      	uxtb	r3, r3
}
    909a:	0018      	movs	r0, r3
    909c:	46bd      	mov	sp, r7
    909e:	bd80      	pop	{r7, pc}
    90a0:	41002000 	.word	0x41002000

000090a4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    90a4:	b580      	push	{r7, lr}
    90a6:	b084      	sub	sp, #16
    90a8:	af00      	add	r7, sp, #0
    90aa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	681b      	ldr	r3, [r3, #0]
    90b0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    90b2:	68fb      	ldr	r3, [r7, #12]
    90b4:	69db      	ldr	r3, [r3, #28]
    90b6:	2207      	movs	r2, #7
    90b8:	4013      	ands	r3, r2
    90ba:	1e5a      	subs	r2, r3, #1
    90bc:	4193      	sbcs	r3, r2
    90be:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    90c0:	0018      	movs	r0, r3
    90c2:	46bd      	mov	sp, r7
    90c4:	b004      	add	sp, #16
    90c6:	bd80      	pop	{r7, pc}

000090c8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    90c8:	b580      	push	{r7, lr}
    90ca:	b082      	sub	sp, #8
    90cc:	af00      	add	r7, sp, #0
    90ce:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    90d0:	46c0      	nop			; (mov r8, r8)
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	0018      	movs	r0, r3
    90d6:	4b04      	ldr	r3, [pc, #16]	; (90e8 <_i2c_master_wait_for_sync+0x20>)
    90d8:	4798      	blx	r3
    90da:	1e03      	subs	r3, r0, #0
    90dc:	d1f9      	bne.n	90d2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    90de:	46c0      	nop			; (mov r8, r8)
    90e0:	46bd      	mov	sp, r7
    90e2:	b002      	add	sp, #8
    90e4:	bd80      	pop	{r7, pc}
    90e6:	46c0      	nop			; (mov r8, r8)
    90e8:	000090a5 	.word	0x000090a5

000090ec <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    90ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    90ee:	b097      	sub	sp, #92	; 0x5c
    90f0:	af00      	add	r7, sp, #0
    90f2:	6178      	str	r0, [r7, #20]
    90f4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    90f6:	2300      	movs	r3, #0
    90f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    90fa:	2300      	movs	r3, #0
    90fc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    90fe:	2300      	movs	r3, #0
    9100:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    9102:	233b      	movs	r3, #59	; 0x3b
    9104:	2210      	movs	r2, #16
    9106:	4694      	mov	ip, r2
    9108:	44bc      	add	ip, r7
    910a:	4463      	add	r3, ip
    910c:	2200      	movs	r2, #0
    910e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9110:	697b      	ldr	r3, [r7, #20]
    9112:	681b      	ldr	r3, [r3, #0]
    9114:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    9116:	697b      	ldr	r3, [r7, #20]
    9118:	681b      	ldr	r3, [r3, #0]
    911a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    911c:	2323      	movs	r3, #35	; 0x23
    911e:	2210      	movs	r2, #16
    9120:	18ba      	adds	r2, r7, r2
    9122:	18d4      	adds	r4, r2, r3
    9124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9126:	0018      	movs	r0, r3
    9128:	4bc0      	ldr	r3, [pc, #768]	; (942c <_i2c_master_set_config+0x340>)
    912a:	4798      	blx	r3
    912c:	0003      	movs	r3, r0
    912e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    9130:	230c      	movs	r3, #12
    9132:	2210      	movs	r2, #16
    9134:	4694      	mov	ip, r2
    9136:	44bc      	add	ip, r7
    9138:	4463      	add	r3, ip
    913a:	0018      	movs	r0, r3
    913c:	4bbc      	ldr	r3, [pc, #752]	; (9430 <_i2c_master_set_config+0x344>)
    913e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    9140:	693b      	ldr	r3, [r7, #16]
    9142:	69db      	ldr	r3, [r3, #28]
    9144:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    9146:	693b      	ldr	r3, [r7, #16]
    9148:	6a1b      	ldr	r3, [r3, #32]
    914a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    914c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    914e:	2b00      	cmp	r3, #0
    9150:	d106      	bne.n	9160 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    9152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9154:	2100      	movs	r1, #0
    9156:	0018      	movs	r0, r3
    9158:	4bb6      	ldr	r3, [pc, #728]	; (9434 <_i2c_master_set_config+0x348>)
    915a:	4798      	blx	r3
    915c:	0003      	movs	r3, r0
    915e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    9160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9162:	b2da      	uxtb	r2, r3
    9164:	230c      	movs	r3, #12
    9166:	2110      	movs	r1, #16
    9168:	468c      	mov	ip, r1
    916a:	44bc      	add	ip, r7
    916c:	4463      	add	r3, ip
    916e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    9170:	230c      	movs	r3, #12
    9172:	2210      	movs	r2, #16
    9174:	4694      	mov	ip, r2
    9176:	44bc      	add	ip, r7
    9178:	4463      	add	r3, ip
    917a:	2202      	movs	r2, #2
    917c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    917e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9180:	0c1b      	lsrs	r3, r3, #16
    9182:	b2db      	uxtb	r3, r3
    9184:	220c      	movs	r2, #12
    9186:	2110      	movs	r1, #16
    9188:	468c      	mov	ip, r1
    918a:	44bc      	add	ip, r7
    918c:	4462      	add	r2, ip
    918e:	0011      	movs	r1, r2
    9190:	0018      	movs	r0, r3
    9192:	4ba9      	ldr	r3, [pc, #676]	; (9438 <_i2c_master_set_config+0x34c>)
    9194:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    9196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9198:	2b00      	cmp	r3, #0
    919a:	d106      	bne.n	91aa <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    919c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    919e:	2101      	movs	r1, #1
    91a0:	0018      	movs	r0, r3
    91a2:	4ba4      	ldr	r3, [pc, #656]	; (9434 <_i2c_master_set_config+0x348>)
    91a4:	4798      	blx	r3
    91a6:	0003      	movs	r3, r0
    91a8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    91aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    91ac:	b2da      	uxtb	r2, r3
    91ae:	230c      	movs	r3, #12
    91b0:	2110      	movs	r1, #16
    91b2:	468c      	mov	ip, r1
    91b4:	44bc      	add	ip, r7
    91b6:	4463      	add	r3, ip
    91b8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    91ba:	230c      	movs	r3, #12
    91bc:	2210      	movs	r2, #16
    91be:	4694      	mov	ip, r2
    91c0:	44bc      	add	ip, r7
    91c2:	4463      	add	r3, ip
    91c4:	2202      	movs	r2, #2
    91c6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    91c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    91ca:	0c1b      	lsrs	r3, r3, #16
    91cc:	b2db      	uxtb	r3, r3
    91ce:	220c      	movs	r2, #12
    91d0:	2110      	movs	r1, #16
    91d2:	468c      	mov	ip, r1
    91d4:	44bc      	add	ip, r7
    91d6:	4462      	add	r2, ip
    91d8:	0011      	movs	r1, r2
    91da:	0018      	movs	r0, r3
    91dc:	4b96      	ldr	r3, [pc, #600]	; (9438 <_i2c_master_set_config+0x34c>)
    91de:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    91e0:	693b      	ldr	r3, [r7, #16]
    91e2:	8a9a      	ldrh	r2, [r3, #20]
    91e4:	697b      	ldr	r3, [r7, #20]
    91e6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    91e8:	693b      	ldr	r3, [r7, #16]
    91ea:	8ada      	ldrh	r2, [r3, #22]
    91ec:	697b      	ldr	r3, [r7, #20]
    91ee:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    91f0:	693b      	ldr	r3, [r7, #16]
    91f2:	7e1b      	ldrb	r3, [r3, #24]
    91f4:	2b00      	cmp	r3, #0
    91f6:	d103      	bne.n	9200 <_i2c_master_set_config+0x114>
    91f8:	4b90      	ldr	r3, [pc, #576]	; (943c <_i2c_master_set_config+0x350>)
    91fa:	4798      	blx	r3
    91fc:	1e03      	subs	r3, r0, #0
    91fe:	d002      	beq.n	9206 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    9200:	2380      	movs	r3, #128	; 0x80
    9202:	657b      	str	r3, [r7, #84]	; 0x54
    9204:	e001      	b.n	920a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    9206:	2300      	movs	r3, #0
    9208:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    920a:	693b      	ldr	r3, [r7, #16]
    920c:	691b      	ldr	r3, [r3, #16]
    920e:	2b00      	cmp	r3, #0
    9210:	d004      	beq.n	921c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    9212:	693b      	ldr	r3, [r7, #16]
    9214:	691b      	ldr	r3, [r3, #16]
    9216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9218:	4313      	orrs	r3, r2
    921a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    921c:	693b      	ldr	r3, [r7, #16]
    921e:	689b      	ldr	r3, [r3, #8]
    9220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9222:	4313      	orrs	r3, r2
    9224:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    9226:	693b      	ldr	r3, [r7, #16]
    9228:	2224      	movs	r2, #36	; 0x24
    922a:	5c9b      	ldrb	r3, [r3, r2]
    922c:	2b00      	cmp	r3, #0
    922e:	d004      	beq.n	923a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    9230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9232:	2280      	movs	r2, #128	; 0x80
    9234:	05d2      	lsls	r2, r2, #23
    9236:	4313      	orrs	r3, r2
    9238:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    923a:	693b      	ldr	r3, [r7, #16]
    923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    923e:	2b00      	cmp	r3, #0
    9240:	d004      	beq.n	924c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    9242:	693b      	ldr	r3, [r7, #16]
    9244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9248:	4313      	orrs	r3, r2
    924a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    924c:	693b      	ldr	r3, [r7, #16]
    924e:	222c      	movs	r2, #44	; 0x2c
    9250:	5c9b      	ldrb	r3, [r3, r2]
    9252:	2b00      	cmp	r3, #0
    9254:	d105      	bne.n	9262 <_i2c_master_set_config+0x176>
    9256:	693b      	ldr	r3, [r7, #16]
    9258:	689a      	ldr	r2, [r3, #8]
    925a:	2380      	movs	r3, #128	; 0x80
    925c:	049b      	lsls	r3, r3, #18
    925e:	429a      	cmp	r2, r3
    9260:	d104      	bne.n	926c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    9262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9264:	2280      	movs	r2, #128	; 0x80
    9266:	0512      	lsls	r2, r2, #20
    9268:	4313      	orrs	r3, r2
    926a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    926c:	693b      	ldr	r3, [r7, #16]
    926e:	222d      	movs	r2, #45	; 0x2d
    9270:	5c9b      	ldrb	r3, [r3, r2]
    9272:	2b00      	cmp	r3, #0
    9274:	d004      	beq.n	9280 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    9276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9278:	2280      	movs	r2, #128	; 0x80
    927a:	0412      	lsls	r2, r2, #16
    927c:	4313      	orrs	r3, r2
    927e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    9280:	693b      	ldr	r3, [r7, #16]
    9282:	222e      	movs	r2, #46	; 0x2e
    9284:	5c9b      	ldrb	r3, [r3, r2]
    9286:	2b00      	cmp	r3, #0
    9288:	d004      	beq.n	9294 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    928a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    928c:	2280      	movs	r2, #128	; 0x80
    928e:	03d2      	lsls	r2, r2, #15
    9290:	4313      	orrs	r3, r2
    9292:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    9294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9296:	681a      	ldr	r2, [r3, #0]
    9298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    929a:	431a      	orrs	r2, r3
    929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    929e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    92a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    92a2:	2280      	movs	r2, #128	; 0x80
    92a4:	0052      	lsls	r2, r2, #1
    92a6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    92a8:	2323      	movs	r3, #35	; 0x23
    92aa:	2210      	movs	r2, #16
    92ac:	4694      	mov	ip, r2
    92ae:	44bc      	add	ip, r7
    92b0:	4463      	add	r3, ip
    92b2:	781b      	ldrb	r3, [r3, #0]
    92b4:	3314      	adds	r3, #20
    92b6:	b2db      	uxtb	r3, r3
    92b8:	0018      	movs	r0, r3
    92ba:	4b61      	ldr	r3, [pc, #388]	; (9440 <_i2c_master_set_config+0x354>)
    92bc:	4798      	blx	r3
    92be:	0003      	movs	r3, r0
    92c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    92c2:	693b      	ldr	r3, [r7, #16]
    92c4:	681b      	ldr	r3, [r3, #0]
    92c6:	22fa      	movs	r2, #250	; 0xfa
    92c8:	0092      	lsls	r2, r2, #2
    92ca:	4353      	muls	r3, r2
    92cc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    92ce:	693b      	ldr	r3, [r7, #16]
    92d0:	685b      	ldr	r3, [r3, #4]
    92d2:	22fa      	movs	r2, #250	; 0xfa
    92d4:	0092      	lsls	r2, r2, #2
    92d6:	4353      	muls	r3, r2
    92d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    92da:	693b      	ldr	r3, [r7, #16]
    92dc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    92de:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    92e0:	4b58      	ldr	r3, [pc, #352]	; (9444 <_i2c_master_set_config+0x358>)
    92e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    92e4:	4798      	blx	r3
    92e6:	0005      	movs	r5, r0
    92e8:	000e      	movs	r6, r1
    92ea:	4b56      	ldr	r3, [pc, #344]	; (9444 <_i2c_master_set_config+0x358>)
    92ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    92ee:	4798      	blx	r3
    92f0:	60b8      	str	r0, [r7, #8]
    92f2:	60f9      	str	r1, [r7, #12]
    92f4:	4b53      	ldr	r3, [pc, #332]	; (9444 <_i2c_master_set_config+0x358>)
    92f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    92f8:	4798      	blx	r3
    92fa:	4c53      	ldr	r4, [pc, #332]	; (9448 <_i2c_master_set_config+0x35c>)
    92fc:	4a53      	ldr	r2, [pc, #332]	; (944c <_i2c_master_set_config+0x360>)
    92fe:	4b54      	ldr	r3, [pc, #336]	; (9450 <_i2c_master_set_config+0x364>)
    9300:	47a0      	blx	r4
    9302:	0003      	movs	r3, r0
    9304:	000c      	movs	r4, r1
    9306:	603b      	str	r3, [r7, #0]
    9308:	607c      	str	r4, [r7, #4]
    930a:	4b4e      	ldr	r3, [pc, #312]	; (9444 <_i2c_master_set_config+0x358>)
    930c:	6a38      	ldr	r0, [r7, #32]
    930e:	4798      	blx	r3
    9310:	0002      	movs	r2, r0
    9312:	000b      	movs	r3, r1
    9314:	4c4c      	ldr	r4, [pc, #304]	; (9448 <_i2c_master_set_config+0x35c>)
    9316:	6838      	ldr	r0, [r7, #0]
    9318:	6879      	ldr	r1, [r7, #4]
    931a:	47a0      	blx	r4
    931c:	0003      	movs	r3, r0
    931e:	000c      	movs	r4, r1
    9320:	0018      	movs	r0, r3
    9322:	0021      	movs	r1, r4
    9324:	4c4b      	ldr	r4, [pc, #300]	; (9454 <_i2c_master_set_config+0x368>)
    9326:	2200      	movs	r2, #0
    9328:	4b4b      	ldr	r3, [pc, #300]	; (9458 <_i2c_master_set_config+0x36c>)
    932a:	47a0      	blx	r4
    932c:	0003      	movs	r3, r0
    932e:	000c      	movs	r4, r1
    9330:	001a      	movs	r2, r3
    9332:	0023      	movs	r3, r4
    9334:	4c44      	ldr	r4, [pc, #272]	; (9448 <_i2c_master_set_config+0x35c>)
    9336:	68b8      	ldr	r0, [r7, #8]
    9338:	68f9      	ldr	r1, [r7, #12]
    933a:	47a0      	blx	r4
    933c:	0003      	movs	r3, r0
    933e:	000c      	movs	r4, r1
    9340:	001a      	movs	r2, r3
    9342:	0023      	movs	r3, r4
    9344:	4c45      	ldr	r4, [pc, #276]	; (945c <_i2c_master_set_config+0x370>)
    9346:	0028      	movs	r0, r5
    9348:	0031      	movs	r1, r6
    934a:	47a0      	blx	r4
    934c:	0003      	movs	r3, r0
    934e:	000c      	movs	r4, r1
    9350:	001d      	movs	r5, r3
    9352:	0026      	movs	r6, r4
    9354:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9356:	005a      	lsls	r2, r3, #1
    9358:	4b3a      	ldr	r3, [pc, #232]	; (9444 <_i2c_master_set_config+0x358>)
    935a:	0010      	movs	r0, r2
    935c:	4798      	blx	r3
    935e:	0002      	movs	r2, r0
    9360:	000b      	movs	r3, r1
    9362:	4c3c      	ldr	r4, [pc, #240]	; (9454 <_i2c_master_set_config+0x368>)
    9364:	0028      	movs	r0, r5
    9366:	0031      	movs	r1, r6
    9368:	47a0      	blx	r4
    936a:	0003      	movs	r3, r0
    936c:	000c      	movs	r4, r1
    936e:	0018      	movs	r0, r3
    9370:	0021      	movs	r1, r4
    9372:	4c3a      	ldr	r4, [pc, #232]	; (945c <_i2c_master_set_config+0x370>)
    9374:	2200      	movs	r2, #0
    9376:	4b3a      	ldr	r3, [pc, #232]	; (9460 <_i2c_master_set_config+0x374>)
    9378:	47a0      	blx	r4
    937a:	0003      	movs	r3, r0
    937c:	000c      	movs	r4, r1
    937e:	001d      	movs	r5, r3
    9380:	0026      	movs	r6, r4
    9382:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9384:	005a      	lsls	r2, r3, #1
    9386:	4b2f      	ldr	r3, [pc, #188]	; (9444 <_i2c_master_set_config+0x358>)
    9388:	0010      	movs	r0, r2
    938a:	4798      	blx	r3
    938c:	0002      	movs	r2, r0
    938e:	000b      	movs	r3, r1
    9390:	4c34      	ldr	r4, [pc, #208]	; (9464 <_i2c_master_set_config+0x378>)
    9392:	0028      	movs	r0, r5
    9394:	0031      	movs	r1, r6
    9396:	47a0      	blx	r4
    9398:	0003      	movs	r3, r0
    939a:	000c      	movs	r4, r1
    939c:	0019      	movs	r1, r3
    939e:	0022      	movs	r2, r4
    93a0:	4b31      	ldr	r3, [pc, #196]	; (9468 <_i2c_master_set_config+0x37c>)
    93a2:	0008      	movs	r0, r1
    93a4:	0011      	movs	r1, r2
    93a6:	4798      	blx	r3
    93a8:	0003      	movs	r3, r0
    93aa:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    93ac:	693b      	ldr	r3, [r7, #16]
    93ae:	689a      	ldr	r2, [r3, #8]
    93b0:	2380      	movs	r3, #128	; 0x80
    93b2:	049b      	lsls	r3, r3, #18
    93b4:	429a      	cmp	r2, r3
    93b6:	d16a      	bne.n	948e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    93b8:	4b22      	ldr	r3, [pc, #136]	; (9444 <_i2c_master_set_config+0x358>)
    93ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    93bc:	4798      	blx	r3
    93be:	4c25      	ldr	r4, [pc, #148]	; (9454 <_i2c_master_set_config+0x368>)
    93c0:	0002      	movs	r2, r0
    93c2:	000b      	movs	r3, r1
    93c4:	47a0      	blx	r4
    93c6:	0003      	movs	r3, r0
    93c8:	000c      	movs	r4, r1
    93ca:	001d      	movs	r5, r3
    93cc:	0026      	movs	r6, r4
    93ce:	4b1d      	ldr	r3, [pc, #116]	; (9444 <_i2c_master_set_config+0x358>)
    93d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    93d2:	4798      	blx	r3
    93d4:	4c1c      	ldr	r4, [pc, #112]	; (9448 <_i2c_master_set_config+0x35c>)
    93d6:	2200      	movs	r2, #0
    93d8:	4b24      	ldr	r3, [pc, #144]	; (946c <_i2c_master_set_config+0x380>)
    93da:	47a0      	blx	r4
    93dc:	0003      	movs	r3, r0
    93de:	000c      	movs	r4, r1
    93e0:	001a      	movs	r2, r3
    93e2:	0023      	movs	r3, r4
    93e4:	4c1f      	ldr	r4, [pc, #124]	; (9464 <_i2c_master_set_config+0x378>)
    93e6:	0028      	movs	r0, r5
    93e8:	0031      	movs	r1, r6
    93ea:	47a0      	blx	r4
    93ec:	0003      	movs	r3, r0
    93ee:	000c      	movs	r4, r1
    93f0:	0018      	movs	r0, r3
    93f2:	0021      	movs	r1, r4
    93f4:	4c19      	ldr	r4, [pc, #100]	; (945c <_i2c_master_set_config+0x370>)
    93f6:	2200      	movs	r2, #0
    93f8:	4b19      	ldr	r3, [pc, #100]	; (9460 <_i2c_master_set_config+0x374>)
    93fa:	47a0      	blx	r4
    93fc:	0003      	movs	r3, r0
    93fe:	000c      	movs	r4, r1
    9400:	0019      	movs	r1, r3
    9402:	0022      	movs	r2, r4
    9404:	4b18      	ldr	r3, [pc, #96]	; (9468 <_i2c_master_set_config+0x37c>)
    9406:	0008      	movs	r0, r1
    9408:	0011      	movs	r1, r2
    940a:	4798      	blx	r3
    940c:	0003      	movs	r3, r0
    940e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    9410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9412:	2b00      	cmp	r3, #0
    9414:	d02e      	beq.n	9474 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    9416:	4b16      	ldr	r3, [pc, #88]	; (9470 <_i2c_master_set_config+0x384>)
    9418:	6a79      	ldr	r1, [r7, #36]	; 0x24
    941a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    941c:	4798      	blx	r3
    941e:	0003      	movs	r3, r0
    9420:	1e9a      	subs	r2, r3, #2
    9422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9424:	1ad3      	subs	r3, r2, r3
    9426:	653b      	str	r3, [r7, #80]	; 0x50
    9428:	e031      	b.n	948e <_i2c_master_set_config+0x3a2>
    942a:	46c0      	nop			; (mov r8, r8)
    942c:	0000a7ed 	.word	0x0000a7ed
    9430:	0000905d 	.word	0x0000905d
    9434:	0000a631 	.word	0x0000a631
    9438:	0000c705 	.word	0x0000c705
    943c:	00009085 	.word	0x00009085
    9440:	0000c53d 	.word	0x0000c53d
    9444:	00013769 	.word	0x00013769
    9448:	00012b11 	.word	0x00012b11
    944c:	e826d695 	.word	0xe826d695
    9450:	3e112e0b 	.word	0x3e112e0b
    9454:	00011c89 	.word	0x00011c89
    9458:	40240000 	.word	0x40240000
    945c:	00013011 	.word	0x00013011
    9460:	3ff00000 	.word	0x3ff00000
    9464:	000122a9 	.word	0x000122a9
    9468:	0001367d 	.word	0x0001367d
    946c:	40080000 	.word	0x40080000
    9470:	0001135d 	.word	0x0001135d
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    9474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9476:	005a      	lsls	r2, r3, #1
    9478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    947a:	18d3      	adds	r3, r2, r3
    947c:	1e5a      	subs	r2, r3, #1
    947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9480:	0059      	lsls	r1, r3, #1
    9482:	4b1d      	ldr	r3, [pc, #116]	; (94f8 <_i2c_master_set_config+0x40c>)
    9484:	0010      	movs	r0, r2
    9486:	4798      	blx	r3
    9488:	0003      	movs	r3, r0
    948a:	3b01      	subs	r3, #1
    948c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    948e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9490:	2bff      	cmp	r3, #255	; 0xff
    9492:	dc08      	bgt.n	94a6 <_i2c_master_set_config+0x3ba>
    9494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9496:	2b00      	cmp	r3, #0
    9498:	db05      	blt.n	94a6 <_i2c_master_set_config+0x3ba>
    949a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    949c:	2bff      	cmp	r3, #255	; 0xff
    949e:	dc02      	bgt.n	94a6 <_i2c_master_set_config+0x3ba>
    94a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    94a2:	2b00      	cmp	r3, #0
    94a4:	da06      	bge.n	94b4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    94a6:	233b      	movs	r3, #59	; 0x3b
    94a8:	2210      	movs	r2, #16
    94aa:	4694      	mov	ip, r2
    94ac:	44bc      	add	ip, r7
    94ae:	4463      	add	r3, ip
    94b0:	2240      	movs	r2, #64	; 0x40
    94b2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    94b4:	233b      	movs	r3, #59	; 0x3b
    94b6:	2210      	movs	r2, #16
    94b8:	4694      	mov	ip, r2
    94ba:	44bc      	add	ip, r7
    94bc:	4463      	add	r3, ip
    94be:	781b      	ldrb	r3, [r3, #0]
    94c0:	2b40      	cmp	r3, #64	; 0x40
    94c2:	d00e      	beq.n	94e2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    94c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    94c6:	22ff      	movs	r2, #255	; 0xff
    94c8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    94ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    94cc:	041b      	lsls	r3, r3, #16
    94ce:	0019      	movs	r1, r3
    94d0:	23ff      	movs	r3, #255	; 0xff
    94d2:	041b      	lsls	r3, r3, #16
    94d4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    94d6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    94d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    94da:	0612      	lsls	r2, r2, #24
    94dc:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    94de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    94e0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    94e2:	233b      	movs	r3, #59	; 0x3b
    94e4:	2210      	movs	r2, #16
    94e6:	4694      	mov	ip, r2
    94e8:	44bc      	add	ip, r7
    94ea:	4463      	add	r3, ip
    94ec:	781b      	ldrb	r3, [r3, #0]
}
    94ee:	0018      	movs	r0, r3
    94f0:	46bd      	mov	sp, r7
    94f2:	b017      	add	sp, #92	; 0x5c
    94f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94f6:	46c0      	nop			; (mov r8, r8)
    94f8:	0001135d 	.word	0x0001135d

000094fc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    94fc:	b590      	push	{r4, r7, lr}
    94fe:	b08b      	sub	sp, #44	; 0x2c
    9500:	af00      	add	r7, sp, #0
    9502:	60f8      	str	r0, [r7, #12]
    9504:	60b9      	str	r1, [r7, #8]
    9506:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    9508:	68fb      	ldr	r3, [r7, #12]
    950a:	68ba      	ldr	r2, [r7, #8]
    950c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    950e:	68fb      	ldr	r3, [r7, #12]
    9510:	681b      	ldr	r3, [r3, #0]
    9512:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9514:	68fb      	ldr	r3, [r7, #12]
    9516:	681b      	ldr	r3, [r3, #0]
    9518:	0018      	movs	r0, r3
    951a:	4b3b      	ldr	r3, [pc, #236]	; (9608 <i2c_master_init+0x10c>)
    951c:	4798      	blx	r3
    951e:	0003      	movs	r3, r0
    9520:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    9522:	6a3b      	ldr	r3, [r7, #32]
    9524:	3302      	adds	r3, #2
    9526:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9528:	6a3b      	ldr	r3, [r7, #32]
    952a:	3314      	adds	r3, #20
    952c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    952e:	2201      	movs	r2, #1
    9530:	69fb      	ldr	r3, [r7, #28]
    9532:	409a      	lsls	r2, r3
    9534:	0013      	movs	r3, r2
    9536:	0019      	movs	r1, r3
    9538:	2002      	movs	r0, #2
    953a:	4b34      	ldr	r3, [pc, #208]	; (960c <i2c_master_init+0x110>)
    953c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    953e:	2314      	movs	r3, #20
    9540:	18fb      	adds	r3, r7, r3
    9542:	0018      	movs	r0, r3
    9544:	4b32      	ldr	r3, [pc, #200]	; (9610 <i2c_master_init+0x114>)
    9546:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    9548:	687b      	ldr	r3, [r7, #4]
    954a:	7b1a      	ldrb	r2, [r3, #12]
    954c:	2314      	movs	r3, #20
    954e:	18fb      	adds	r3, r7, r3
    9550:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    9552:	69bb      	ldr	r3, [r7, #24]
    9554:	b2db      	uxtb	r3, r3
    9556:	2214      	movs	r2, #20
    9558:	18ba      	adds	r2, r7, r2
    955a:	0011      	movs	r1, r2
    955c:	0018      	movs	r0, r3
    955e:	4b2d      	ldr	r3, [pc, #180]	; (9614 <i2c_master_init+0x118>)
    9560:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9562:	69bb      	ldr	r3, [r7, #24]
    9564:	b2db      	uxtb	r3, r3
    9566:	0018      	movs	r0, r3
    9568:	4b2b      	ldr	r3, [pc, #172]	; (9618 <i2c_master_init+0x11c>)
    956a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    956c:	687b      	ldr	r3, [r7, #4]
    956e:	7b1b      	ldrb	r3, [r3, #12]
    9570:	2100      	movs	r1, #0
    9572:	0018      	movs	r0, r3
    9574:	4b29      	ldr	r3, [pc, #164]	; (961c <i2c_master_init+0x120>)
    9576:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    9578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    957a:	681b      	ldr	r3, [r3, #0]
    957c:	2202      	movs	r2, #2
    957e:	4013      	ands	r3, r2
    9580:	d001      	beq.n	9586 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    9582:	231c      	movs	r3, #28
    9584:	e03b      	b.n	95fe <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    9586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9588:	681b      	ldr	r3, [r3, #0]
    958a:	2201      	movs	r2, #1
    958c:	4013      	ands	r3, r2
    958e:	d001      	beq.n	9594 <i2c_master_init+0x98>
		return STATUS_BUSY;
    9590:	2305      	movs	r3, #5
    9592:	e034      	b.n	95fe <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    9594:	68fb      	ldr	r3, [r7, #12]
    9596:	681b      	ldr	r3, [r3, #0]
    9598:	2217      	movs	r2, #23
    959a:	18bc      	adds	r4, r7, r2
    959c:	0018      	movs	r0, r3
    959e:	4b1a      	ldr	r3, [pc, #104]	; (9608 <i2c_master_init+0x10c>)
    95a0:	4798      	blx	r3
    95a2:	0003      	movs	r3, r0
    95a4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    95a6:	4a1e      	ldr	r2, [pc, #120]	; (9620 <i2c_master_init+0x124>)
    95a8:	2317      	movs	r3, #23
    95aa:	18fb      	adds	r3, r7, r3
    95ac:	781b      	ldrb	r3, [r3, #0]
    95ae:	0011      	movs	r1, r2
    95b0:	0018      	movs	r0, r3
    95b2:	4b1c      	ldr	r3, [pc, #112]	; (9624 <i2c_master_init+0x128>)
    95b4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    95b6:	2317      	movs	r3, #23
    95b8:	18fb      	adds	r3, r7, r3
    95ba:	781a      	ldrb	r2, [r3, #0]
    95bc:	4b1a      	ldr	r3, [pc, #104]	; (9628 <i2c_master_init+0x12c>)
    95be:	0092      	lsls	r2, r2, #2
    95c0:	68f9      	ldr	r1, [r7, #12]
    95c2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    95c4:	68fb      	ldr	r3, [r7, #12]
    95c6:	2200      	movs	r2, #0
    95c8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    95ca:	68fb      	ldr	r3, [r7, #12]
    95cc:	2200      	movs	r2, #0
    95ce:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    95d0:	68fb      	ldr	r3, [r7, #12]
    95d2:	2200      	movs	r2, #0
    95d4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    95d6:	68fb      	ldr	r3, [r7, #12]
    95d8:	2200      	movs	r2, #0
    95da:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    95dc:	68fb      	ldr	r3, [r7, #12]
    95de:	2225      	movs	r2, #37	; 0x25
    95e0:	2100      	movs	r1, #0
    95e2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    95e4:	68fb      	ldr	r3, [r7, #12]
    95e6:	2200      	movs	r2, #0
    95e8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    95ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    95ec:	2214      	movs	r2, #20
    95ee:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    95f0:	687a      	ldr	r2, [r7, #4]
    95f2:	68fb      	ldr	r3, [r7, #12]
    95f4:	0011      	movs	r1, r2
    95f6:	0018      	movs	r0, r3
    95f8:	4b0c      	ldr	r3, [pc, #48]	; (962c <i2c_master_init+0x130>)
    95fa:	4798      	blx	r3
    95fc:	0003      	movs	r3, r0
}
    95fe:	0018      	movs	r0, r3
    9600:	46bd      	mov	sp, r7
    9602:	b00b      	add	sp, #44	; 0x2c
    9604:	bd90      	pop	{r4, r7, pc}
    9606:	46c0      	nop			; (mov r8, r8)
    9608:	0000a7ed 	.word	0x0000a7ed
    960c:	00009001 	.word	0x00009001
    9610:	00008fe9 	.word	0x00008fe9
    9614:	0000c419 	.word	0x0000c419
    9618:	0000c45d 	.word	0x0000c45d
    961c:	0000a5a5 	.word	0x0000a5a5
    9620:	00009ffd 	.word	0x00009ffd
    9624:	0000b435 	.word	0x0000b435
    9628:	200006b8 	.word	0x200006b8
    962c:	000090ed 	.word	0x000090ed

00009630 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    9630:	b580      	push	{r7, lr}
    9632:	b084      	sub	sp, #16
    9634:	af00      	add	r7, sp, #0
    9636:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9638:	687b      	ldr	r3, [r7, #4]
    963a:	681b      	ldr	r3, [r3, #0]
    963c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    963e:	68fb      	ldr	r3, [r7, #12]
    9640:	7e1b      	ldrb	r3, [r3, #24]
    9642:	b2db      	uxtb	r3, r3
    9644:	001a      	movs	r2, r3
    9646:	2302      	movs	r3, #2
    9648:	4013      	ands	r3, r2
    964a:	d00b      	beq.n	9664 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    964c:	68fb      	ldr	r3, [r7, #12]
    964e:	2202      	movs	r2, #2
    9650:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    9652:	68fb      	ldr	r3, [r7, #12]
    9654:	8b5b      	ldrh	r3, [r3, #26]
    9656:	b29b      	uxth	r3, r3
    9658:	001a      	movs	r2, r3
    965a:	2302      	movs	r3, #2
    965c:	4013      	ands	r3, r2
    965e:	d011      	beq.n	9684 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    9660:	2341      	movs	r3, #65	; 0x41
    9662:	e010      	b.n	9686 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    9664:	68fb      	ldr	r3, [r7, #12]
    9666:	8b5b      	ldrh	r3, [r3, #26]
    9668:	b29b      	uxth	r3, r3
    966a:	001a      	movs	r2, r3
    966c:	2304      	movs	r3, #4
    966e:	4013      	ands	r3, r2
    9670:	d008      	beq.n	9684 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9672:	68fb      	ldr	r3, [r7, #12]
    9674:	685b      	ldr	r3, [r3, #4]
    9676:	22c0      	movs	r2, #192	; 0xc0
    9678:	0292      	lsls	r2, r2, #10
    967a:	431a      	orrs	r2, r3
    967c:	68fb      	ldr	r3, [r7, #12]
    967e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    9680:	2318      	movs	r3, #24
    9682:	e000      	b.n	9686 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    9684:	2300      	movs	r3, #0
}
    9686:	0018      	movs	r0, r3
    9688:	46bd      	mov	sp, r7
    968a:	b004      	add	sp, #16
    968c:	bd80      	pop	{r7, pc}

0000968e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    968e:	b580      	push	{r7, lr}
    9690:	b084      	sub	sp, #16
    9692:	af00      	add	r7, sp, #0
    9694:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	681b      	ldr	r3, [r3, #0]
    969a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    969c:	230e      	movs	r3, #14
    969e:	18fb      	adds	r3, r7, r3
    96a0:	2200      	movs	r2, #0
    96a2:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    96a4:	e00f      	b.n	96c6 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    96a6:	230e      	movs	r3, #14
    96a8:	18fb      	adds	r3, r7, r3
    96aa:	220e      	movs	r2, #14
    96ac:	18ba      	adds	r2, r7, r2
    96ae:	8812      	ldrh	r2, [r2, #0]
    96b0:	3201      	adds	r2, #1
    96b2:	801a      	strh	r2, [r3, #0]
    96b4:	687b      	ldr	r3, [r7, #4]
    96b6:	891b      	ldrh	r3, [r3, #8]
    96b8:	220e      	movs	r2, #14
    96ba:	18ba      	adds	r2, r7, r2
    96bc:	8812      	ldrh	r2, [r2, #0]
    96be:	429a      	cmp	r2, r3
    96c0:	d301      	bcc.n	96c6 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    96c2:	2312      	movs	r3, #18
    96c4:	e00e      	b.n	96e4 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    96c6:	68bb      	ldr	r3, [r7, #8]
    96c8:	7e1b      	ldrb	r3, [r3, #24]
    96ca:	b2db      	uxtb	r3, r3
    96cc:	001a      	movs	r2, r3
    96ce:	2301      	movs	r3, #1
    96d0:	4013      	ands	r3, r2
    96d2:	d106      	bne.n	96e2 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    96d4:	68bb      	ldr	r3, [r7, #8]
    96d6:	7e1b      	ldrb	r3, [r3, #24]
    96d8:	b2db      	uxtb	r3, r3
    96da:	001a      	movs	r2, r3
    96dc:	2302      	movs	r3, #2
    96de:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    96e0:	d0e1      	beq.n	96a6 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    96e2:	2300      	movs	r3, #0
}
    96e4:	0018      	movs	r0, r3
    96e6:	46bd      	mov	sp, r7
    96e8:	b004      	add	sp, #16
    96ea:	bd80      	pop	{r7, pc}

000096ec <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    96ec:	b590      	push	{r4, r7, lr}
    96ee:	b085      	sub	sp, #20
    96f0:	af00      	add	r7, sp, #0
    96f2:	6078      	str	r0, [r7, #4]
    96f4:	000a      	movs	r2, r1
    96f6:	1cfb      	adds	r3, r7, #3
    96f8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    96fa:	687b      	ldr	r3, [r7, #4]
    96fc:	681b      	ldr	r3, [r3, #0]
    96fe:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9700:	68fb      	ldr	r3, [r7, #12]
    9702:	685b      	ldr	r3, [r3, #4]
    9704:	2280      	movs	r2, #128	; 0x80
    9706:	02d2      	lsls	r2, r2, #11
    9708:	431a      	orrs	r2, r3
    970a:	68fb      	ldr	r3, [r7, #12]
    970c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    970e:	1cfb      	adds	r3, r7, #3
    9710:	781a      	ldrb	r2, [r3, #0]
    9712:	68fb      	ldr	r3, [r7, #12]
    9714:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    9716:	230b      	movs	r3, #11
    9718:	18fc      	adds	r4, r7, r3
    971a:	687b      	ldr	r3, [r7, #4]
    971c:	0018      	movs	r0, r3
    971e:	4b07      	ldr	r3, [pc, #28]	; (973c <_i2c_master_send_hs_master_code+0x50>)
    9720:	4798      	blx	r3
    9722:	0003      	movs	r3, r0
    9724:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    9726:	68fb      	ldr	r3, [r7, #12]
    9728:	2201      	movs	r2, #1
    972a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    972c:	230b      	movs	r3, #11
    972e:	18fb      	adds	r3, r7, r3
    9730:	781b      	ldrb	r3, [r3, #0]
}
    9732:	0018      	movs	r0, r3
    9734:	46bd      	mov	sp, r7
    9736:	b005      	add	sp, #20
    9738:	bd90      	pop	{r4, r7, pc}
    973a:	46c0      	nop			; (mov r8, r8)
    973c:	0000968f 	.word	0x0000968f

00009740 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9740:	b590      	push	{r4, r7, lr}
    9742:	b087      	sub	sp, #28
    9744:	af00      	add	r7, sp, #0
    9746:	6078      	str	r0, [r7, #4]
    9748:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    974a:	687b      	ldr	r3, [r7, #4]
    974c:	681b      	ldr	r3, [r3, #0]
    974e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    9750:	2314      	movs	r3, #20
    9752:	18fb      	adds	r3, r7, r3
    9754:	683a      	ldr	r2, [r7, #0]
    9756:	8852      	ldrh	r2, [r2, #2]
    9758:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    975a:	2312      	movs	r3, #18
    975c:	18fb      	adds	r3, r7, r3
    975e:	2200      	movs	r2, #0
    9760:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    9762:	68fb      	ldr	r3, [r7, #12]
    9764:	681b      	ldr	r3, [r3, #0]
    9766:	011b      	lsls	r3, r3, #4
    9768:	0fdb      	lsrs	r3, r3, #31
    976a:	b2db      	uxtb	r3, r3
    976c:	001a      	movs	r2, r3
    976e:	230b      	movs	r3, #11
    9770:	18fb      	adds	r3, r7, r3
    9772:	1e51      	subs	r1, r2, #1
    9774:	418a      	sbcs	r2, r1
    9776:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    9778:	683b      	ldr	r3, [r7, #0]
    977a:	7a5b      	ldrb	r3, [r3, #9]
    977c:	2b00      	cmp	r3, #0
    977e:	d006      	beq.n	978e <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    9780:	683b      	ldr	r3, [r7, #0]
    9782:	7a9a      	ldrb	r2, [r3, #10]
    9784:	687b      	ldr	r3, [r7, #4]
    9786:	0011      	movs	r1, r2
    9788:	0018      	movs	r0, r3
    978a:	4b85      	ldr	r3, [pc, #532]	; (99a0 <_i2c_master_read_packet+0x260>)
    978c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    978e:	68fb      	ldr	r3, [r7, #12]
    9790:	685b      	ldr	r3, [r3, #4]
    9792:	4a84      	ldr	r2, [pc, #528]	; (99a4 <_i2c_master_read_packet+0x264>)
    9794:	401a      	ands	r2, r3
    9796:	68fb      	ldr	r3, [r7, #12]
    9798:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    979a:	683b      	ldr	r3, [r7, #0]
    979c:	7a1b      	ldrb	r3, [r3, #8]
    979e:	2b00      	cmp	r3, #0
    97a0:	d042      	beq.n	9828 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    97a2:	683b      	ldr	r3, [r7, #0]
    97a4:	881b      	ldrh	r3, [r3, #0]
    97a6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    97a8:	683b      	ldr	r3, [r7, #0]
    97aa:	7a5b      	ldrb	r3, [r3, #9]
    97ac:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    97ae:	4313      	orrs	r3, r2
    97b0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    97b2:	2380      	movs	r3, #128	; 0x80
    97b4:	021b      	lsls	r3, r3, #8
    97b6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    97b8:	68fb      	ldr	r3, [r7, #12]
    97ba:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    97bc:	2317      	movs	r3, #23
    97be:	18fc      	adds	r4, r7, r3
    97c0:	687b      	ldr	r3, [r7, #4]
    97c2:	0018      	movs	r0, r3
    97c4:	4b78      	ldr	r3, [pc, #480]	; (99a8 <_i2c_master_read_packet+0x268>)
    97c6:	4798      	blx	r3
    97c8:	0003      	movs	r3, r0
    97ca:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    97cc:	68fb      	ldr	r3, [r7, #12]
    97ce:	685b      	ldr	r3, [r3, #4]
    97d0:	4a74      	ldr	r2, [pc, #464]	; (99a4 <_i2c_master_read_packet+0x264>)
    97d2:	401a      	ands	r2, r3
    97d4:	68fb      	ldr	r3, [r7, #12]
    97d6:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    97d8:	2317      	movs	r3, #23
    97da:	18fb      	adds	r3, r7, r3
    97dc:	781b      	ldrb	r3, [r3, #0]
    97de:	2b00      	cmp	r3, #0
    97e0:	d107      	bne.n	97f2 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    97e2:	2317      	movs	r3, #23
    97e4:	18fc      	adds	r4, r7, r3
    97e6:	687b      	ldr	r3, [r7, #4]
    97e8:	0018      	movs	r0, r3
    97ea:	4b70      	ldr	r3, [pc, #448]	; (99ac <_i2c_master_read_packet+0x26c>)
    97ec:	4798      	blx	r3
    97ee:	0003      	movs	r3, r0
    97f0:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    97f2:	2317      	movs	r3, #23
    97f4:	18fb      	adds	r3, r7, r3
    97f6:	781b      	ldrb	r3, [r3, #0]
    97f8:	2b00      	cmp	r3, #0
    97fa:	d111      	bne.n	9820 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    97fc:	683b      	ldr	r3, [r7, #0]
    97fe:	881b      	ldrh	r3, [r3, #0]
    9800:	0a1b      	lsrs	r3, r3, #8
    9802:	b29b      	uxth	r3, r3
    9804:	2278      	movs	r2, #120	; 0x78
    9806:	4313      	orrs	r3, r2
    9808:	b29b      	uxth	r3, r3
    980a:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    980c:	683b      	ldr	r3, [r7, #0]
    980e:	7a5b      	ldrb	r3, [r3, #9]
    9810:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    9812:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9814:	2201      	movs	r2, #1
    9816:	4313      	orrs	r3, r2
    9818:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    981a:	68fb      	ldr	r3, [r7, #12]
    981c:	625a      	str	r2, [r3, #36]	; 0x24
    981e:	e00f      	b.n	9840 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    9820:	2317      	movs	r3, #23
    9822:	18fb      	adds	r3, r7, r3
    9824:	781b      	ldrb	r3, [r3, #0]
    9826:	e0b6      	b.n	9996 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    9828:	683b      	ldr	r3, [r7, #0]
    982a:	881b      	ldrh	r3, [r3, #0]
    982c:	005b      	lsls	r3, r3, #1
    982e:	2201      	movs	r2, #1
    9830:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    9832:	683b      	ldr	r3, [r7, #0]
    9834:	7a5b      	ldrb	r3, [r3, #9]
    9836:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    9838:	4313      	orrs	r3, r2
    983a:	001a      	movs	r2, r3
    983c:	68fb      	ldr	r3, [r7, #12]
    983e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    9840:	2317      	movs	r3, #23
    9842:	18fc      	adds	r4, r7, r3
    9844:	687b      	ldr	r3, [r7, #4]
    9846:	0018      	movs	r0, r3
    9848:	4b57      	ldr	r3, [pc, #348]	; (99a8 <_i2c_master_read_packet+0x268>)
    984a:	4798      	blx	r3
    984c:	0003      	movs	r3, r0
    984e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    9850:	230b      	movs	r3, #11
    9852:	18fb      	adds	r3, r7, r3
    9854:	781b      	ldrb	r3, [r3, #0]
    9856:	2b00      	cmp	r3, #0
    9858:	d00b      	beq.n	9872 <_i2c_master_read_packet+0x132>
    985a:	683b      	ldr	r3, [r7, #0]
    985c:	885b      	ldrh	r3, [r3, #2]
    985e:	2b01      	cmp	r3, #1
    9860:	d107      	bne.n	9872 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9862:	68fb      	ldr	r3, [r7, #12]
    9864:	685b      	ldr	r3, [r3, #4]
    9866:	2280      	movs	r2, #128	; 0x80
    9868:	02d2      	lsls	r2, r2, #11
    986a:	431a      	orrs	r2, r3
    986c:	68fb      	ldr	r3, [r7, #12]
    986e:	605a      	str	r2, [r3, #4]
    9870:	e005      	b.n	987e <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    9872:	68fb      	ldr	r3, [r7, #12]
    9874:	685b      	ldr	r3, [r3, #4]
    9876:	4a4b      	ldr	r2, [pc, #300]	; (99a4 <_i2c_master_read_packet+0x264>)
    9878:	401a      	ands	r2, r3
    987a:	68fb      	ldr	r3, [r7, #12]
    987c:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    987e:	2317      	movs	r3, #23
    9880:	18fb      	adds	r3, r7, r3
    9882:	781b      	ldrb	r3, [r3, #0]
    9884:	2b00      	cmp	r3, #0
    9886:	d107      	bne.n	9898 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    9888:	2317      	movs	r3, #23
    988a:	18fc      	adds	r4, r7, r3
    988c:	687b      	ldr	r3, [r7, #4]
    988e:	0018      	movs	r0, r3
    9890:	4b46      	ldr	r3, [pc, #280]	; (99ac <_i2c_master_read_packet+0x26c>)
    9892:	4798      	blx	r3
    9894:	0003      	movs	r3, r0
    9896:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    9898:	2317      	movs	r3, #23
    989a:	18fb      	adds	r3, r7, r3
    989c:	781b      	ldrb	r3, [r3, #0]
    989e:	2b00      	cmp	r3, #0
    98a0:	d000      	beq.n	98a4 <_i2c_master_read_packet+0x164>
    98a2:	e075      	b.n	9990 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    98a4:	e04b      	b.n	993e <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    98a6:	68fb      	ldr	r3, [r7, #12]
    98a8:	8b5b      	ldrh	r3, [r3, #26]
    98aa:	b29b      	uxth	r3, r3
    98ac:	001a      	movs	r2, r3
    98ae:	2320      	movs	r3, #32
    98b0:	4013      	ands	r3, r2
    98b2:	d101      	bne.n	98b8 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    98b4:	2341      	movs	r3, #65	; 0x41
    98b6:	e06e      	b.n	9996 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    98b8:	687b      	ldr	r3, [r7, #4]
    98ba:	7adb      	ldrb	r3, [r3, #11]
    98bc:	2b00      	cmp	r3, #0
    98be:	d01e      	beq.n	98fe <_i2c_master_read_packet+0x1be>
    98c0:	230b      	movs	r3, #11
    98c2:	18fb      	adds	r3, r7, r3
    98c4:	781b      	ldrb	r3, [r3, #0]
    98c6:	2201      	movs	r2, #1
    98c8:	4053      	eors	r3, r2
    98ca:	b2db      	uxtb	r3, r3
    98cc:	2b00      	cmp	r3, #0
    98ce:	d004      	beq.n	98da <_i2c_master_read_packet+0x19a>
    98d0:	2314      	movs	r3, #20
    98d2:	18fb      	adds	r3, r7, r3
    98d4:	881b      	ldrh	r3, [r3, #0]
    98d6:	2b00      	cmp	r3, #0
    98d8:	d009      	beq.n	98ee <_i2c_master_read_packet+0x1ae>
    98da:	230b      	movs	r3, #11
    98dc:	18fb      	adds	r3, r7, r3
    98de:	781b      	ldrb	r3, [r3, #0]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d00c      	beq.n	98fe <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    98e4:	2314      	movs	r3, #20
    98e6:	18fb      	adds	r3, r7, r3
    98e8:	881b      	ldrh	r3, [r3, #0]
    98ea:	2b01      	cmp	r3, #1
    98ec:	d107      	bne.n	98fe <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    98ee:	68fb      	ldr	r3, [r7, #12]
    98f0:	685b      	ldr	r3, [r3, #4]
    98f2:	2280      	movs	r2, #128	; 0x80
    98f4:	02d2      	lsls	r2, r2, #11
    98f6:	431a      	orrs	r2, r3
    98f8:	68fb      	ldr	r3, [r7, #12]
    98fa:	605a      	str	r2, [r3, #4]
    98fc:	e01a      	b.n	9934 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    98fe:	687b      	ldr	r3, [r7, #4]
    9900:	0018      	movs	r0, r3
    9902:	4b2b      	ldr	r3, [pc, #172]	; (99b0 <_i2c_master_read_packet+0x270>)
    9904:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    9906:	683b      	ldr	r3, [r7, #0]
    9908:	685a      	ldr	r2, [r3, #4]
    990a:	2312      	movs	r3, #18
    990c:	18fb      	adds	r3, r7, r3
    990e:	881b      	ldrh	r3, [r3, #0]
    9910:	2112      	movs	r1, #18
    9912:	1879      	adds	r1, r7, r1
    9914:	1c58      	adds	r0, r3, #1
    9916:	8008      	strh	r0, [r1, #0]
    9918:	18d3      	adds	r3, r2, r3
    991a:	68fa      	ldr	r2, [r7, #12]
    991c:	2128      	movs	r1, #40	; 0x28
    991e:	5c52      	ldrb	r2, [r2, r1]
    9920:	b2d2      	uxtb	r2, r2
    9922:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    9924:	2317      	movs	r3, #23
    9926:	18fc      	adds	r4, r7, r3
    9928:	687b      	ldr	r3, [r7, #4]
    992a:	0018      	movs	r0, r3
    992c:	4b1e      	ldr	r3, [pc, #120]	; (99a8 <_i2c_master_read_packet+0x268>)
    992e:	4798      	blx	r3
    9930:	0003      	movs	r3, r0
    9932:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    9934:	2317      	movs	r3, #23
    9936:	18fb      	adds	r3, r7, r3
    9938:	781b      	ldrb	r3, [r3, #0]
    993a:	2b00      	cmp	r3, #0
    993c:	d109      	bne.n	9952 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    993e:	2314      	movs	r3, #20
    9940:	18fb      	adds	r3, r7, r3
    9942:	881b      	ldrh	r3, [r3, #0]
    9944:	2214      	movs	r2, #20
    9946:	18ba      	adds	r2, r7, r2
    9948:	1e59      	subs	r1, r3, #1
    994a:	8011      	strh	r1, [r2, #0]
    994c:	2b00      	cmp	r3, #0
    994e:	d1aa      	bne.n	98a6 <_i2c_master_read_packet+0x166>
    9950:	e000      	b.n	9954 <_i2c_master_read_packet+0x214>
				break;
    9952:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    9954:	687b      	ldr	r3, [r7, #4]
    9956:	7a9b      	ldrb	r3, [r3, #10]
    9958:	2b00      	cmp	r3, #0
    995a:	d00a      	beq.n	9972 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    995c:	687b      	ldr	r3, [r7, #4]
    995e:	0018      	movs	r0, r3
    9960:	4b13      	ldr	r3, [pc, #76]	; (99b0 <_i2c_master_read_packet+0x270>)
    9962:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9964:	68fb      	ldr	r3, [r7, #12]
    9966:	685b      	ldr	r3, [r3, #4]
    9968:	22c0      	movs	r2, #192	; 0xc0
    996a:	0292      	lsls	r2, r2, #10
    996c:	431a      	orrs	r2, r3
    996e:	68fb      	ldr	r3, [r7, #12]
    9970:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    9972:	687b      	ldr	r3, [r7, #4]
    9974:	0018      	movs	r0, r3
    9976:	4b0e      	ldr	r3, [pc, #56]	; (99b0 <_i2c_master_read_packet+0x270>)
    9978:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    997a:	683b      	ldr	r3, [r7, #0]
    997c:	685a      	ldr	r2, [r3, #4]
    997e:	2312      	movs	r3, #18
    9980:	18fb      	adds	r3, r7, r3
    9982:	881b      	ldrh	r3, [r3, #0]
    9984:	18d3      	adds	r3, r2, r3
    9986:	68fa      	ldr	r2, [r7, #12]
    9988:	2128      	movs	r1, #40	; 0x28
    998a:	5c52      	ldrb	r2, [r2, r1]
    998c:	b2d2      	uxtb	r2, r2
    998e:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    9990:	2317      	movs	r3, #23
    9992:	18fb      	adds	r3, r7, r3
    9994:	781b      	ldrb	r3, [r3, #0]
}
    9996:	0018      	movs	r0, r3
    9998:	46bd      	mov	sp, r7
    999a:	b007      	add	sp, #28
    999c:	bd90      	pop	{r4, r7, pc}
    999e:	46c0      	nop			; (mov r8, r8)
    99a0:	000096ed 	.word	0x000096ed
    99a4:	fffbffff 	.word	0xfffbffff
    99a8:	0000968f 	.word	0x0000968f
    99ac:	00009631 	.word	0x00009631
    99b0:	000090c9 	.word	0x000090c9

000099b4 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    99b4:	b580      	push	{r7, lr}
    99b6:	b082      	sub	sp, #8
    99b8:	af00      	add	r7, sp, #0
    99ba:	6078      	str	r0, [r7, #4]
    99bc:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    99be:	687b      	ldr	r3, [r7, #4]
    99c0:	8b9b      	ldrh	r3, [r3, #28]
    99c2:	b29b      	uxth	r3, r3
    99c4:	2b00      	cmp	r3, #0
    99c6:	d001      	beq.n	99cc <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    99c8:	2305      	movs	r3, #5
    99ca:	e00c      	b.n	99e6 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	2201      	movs	r2, #1
    99d0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    99d2:	687b      	ldr	r3, [r7, #4]
    99d4:	2201      	movs	r2, #1
    99d6:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    99d8:	683a      	ldr	r2, [r7, #0]
    99da:	687b      	ldr	r3, [r7, #4]
    99dc:	0011      	movs	r1, r2
    99de:	0018      	movs	r0, r3
    99e0:	4b03      	ldr	r3, [pc, #12]	; (99f0 <i2c_master_read_packet_wait+0x3c>)
    99e2:	4798      	blx	r3
    99e4:	0003      	movs	r3, r0
}
    99e6:	0018      	movs	r0, r3
    99e8:	46bd      	mov	sp, r7
    99ea:	b002      	add	sp, #8
    99ec:	bd80      	pop	{r7, pc}
    99ee:	46c0      	nop			; (mov r8, r8)
    99f0:	00009741 	.word	0x00009741

000099f4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    99f4:	b590      	push	{r4, r7, lr}
    99f6:	b087      	sub	sp, #28
    99f8:	af00      	add	r7, sp, #0
    99fa:	6078      	str	r0, [r7, #4]
    99fc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	681b      	ldr	r3, [r3, #0]
    9a02:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    9a04:	2314      	movs	r3, #20
    9a06:	18fb      	adds	r3, r7, r3
    9a08:	683a      	ldr	r2, [r7, #0]
    9a0a:	8852      	ldrh	r2, [r2, #2]
    9a0c:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    9a0e:	687b      	ldr	r3, [r7, #4]
    9a10:	0018      	movs	r0, r3
    9a12:	4b51      	ldr	r3, [pc, #324]	; (9b58 <_i2c_master_write_packet+0x164>)
    9a14:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    9a16:	683b      	ldr	r3, [r7, #0]
    9a18:	7a5b      	ldrb	r3, [r3, #9]
    9a1a:	2b00      	cmp	r3, #0
    9a1c:	d006      	beq.n	9a2c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    9a1e:	683b      	ldr	r3, [r7, #0]
    9a20:	7a9a      	ldrb	r2, [r3, #10]
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	0011      	movs	r1, r2
    9a26:	0018      	movs	r0, r3
    9a28:	4b4c      	ldr	r3, [pc, #304]	; (9b5c <_i2c_master_write_packet+0x168>)
    9a2a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9a2c:	68fb      	ldr	r3, [r7, #12]
    9a2e:	685b      	ldr	r3, [r3, #4]
    9a30:	4a4b      	ldr	r2, [pc, #300]	; (9b60 <_i2c_master_write_packet+0x16c>)
    9a32:	401a      	ands	r2, r3
    9a34:	68fb      	ldr	r3, [r7, #12]
    9a36:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    9a38:	683b      	ldr	r3, [r7, #0]
    9a3a:	7a1b      	ldrb	r3, [r3, #8]
    9a3c:	2b00      	cmp	r3, #0
    9a3e:	d00d      	beq.n	9a5c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9a40:	683b      	ldr	r3, [r7, #0]
    9a42:	881b      	ldrh	r3, [r3, #0]
    9a44:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9a46:	683b      	ldr	r3, [r7, #0]
    9a48:	7a5b      	ldrb	r3, [r3, #9]
    9a4a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9a4c:	4313      	orrs	r3, r2
    9a4e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9a50:	2380      	movs	r3, #128	; 0x80
    9a52:	021b      	lsls	r3, r3, #8
    9a54:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9a56:	68fb      	ldr	r3, [r7, #12]
    9a58:	625a      	str	r2, [r3, #36]	; 0x24
    9a5a:	e009      	b.n	9a70 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9a5c:	683b      	ldr	r3, [r7, #0]
    9a5e:	881b      	ldrh	r3, [r3, #0]
    9a60:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    9a62:	683b      	ldr	r3, [r7, #0]
    9a64:	7a5b      	ldrb	r3, [r3, #9]
    9a66:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    9a68:	4313      	orrs	r3, r2
    9a6a:	001a      	movs	r2, r3
    9a6c:	68fb      	ldr	r3, [r7, #12]
    9a6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    9a70:	2317      	movs	r3, #23
    9a72:	18fc      	adds	r4, r7, r3
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	0018      	movs	r0, r3
    9a78:	4b3a      	ldr	r3, [pc, #232]	; (9b64 <_i2c_master_write_packet+0x170>)
    9a7a:	4798      	blx	r3
    9a7c:	0003      	movs	r3, r0
    9a7e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    9a80:	2317      	movs	r3, #23
    9a82:	18fb      	adds	r3, r7, r3
    9a84:	781b      	ldrb	r3, [r3, #0]
    9a86:	2b00      	cmp	r3, #0
    9a88:	d107      	bne.n	9a9a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    9a8a:	2317      	movs	r3, #23
    9a8c:	18fc      	adds	r4, r7, r3
    9a8e:	687b      	ldr	r3, [r7, #4]
    9a90:	0018      	movs	r0, r3
    9a92:	4b35      	ldr	r3, [pc, #212]	; (9b68 <_i2c_master_write_packet+0x174>)
    9a94:	4798      	blx	r3
    9a96:	0003      	movs	r3, r0
    9a98:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    9a9a:	2317      	movs	r3, #23
    9a9c:	18fb      	adds	r3, r7, r3
    9a9e:	781b      	ldrb	r3, [r3, #0]
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d152      	bne.n	9b4a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    9aa4:	2312      	movs	r3, #18
    9aa6:	18fb      	adds	r3, r7, r3
    9aa8:	2200      	movs	r2, #0
    9aaa:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    9aac:	e033      	b.n	9b16 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    9aae:	68fb      	ldr	r3, [r7, #12]
    9ab0:	8b5b      	ldrh	r3, [r3, #26]
    9ab2:	b29b      	uxth	r3, r3
    9ab4:	001a      	movs	r2, r3
    9ab6:	2320      	movs	r3, #32
    9ab8:	4013      	ands	r3, r2
    9aba:	d101      	bne.n	9ac0 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    9abc:	2341      	movs	r3, #65	; 0x41
    9abe:	e047      	b.n	9b50 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    9ac0:	687b      	ldr	r3, [r7, #4]
    9ac2:	0018      	movs	r0, r3
    9ac4:	4b24      	ldr	r3, [pc, #144]	; (9b58 <_i2c_master_write_packet+0x164>)
    9ac6:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    9ac8:	683b      	ldr	r3, [r7, #0]
    9aca:	685a      	ldr	r2, [r3, #4]
    9acc:	2312      	movs	r3, #18
    9ace:	18fb      	adds	r3, r7, r3
    9ad0:	881b      	ldrh	r3, [r3, #0]
    9ad2:	2112      	movs	r1, #18
    9ad4:	1879      	adds	r1, r7, r1
    9ad6:	1c58      	adds	r0, r3, #1
    9ad8:	8008      	strh	r0, [r1, #0]
    9ada:	18d3      	adds	r3, r2, r3
    9adc:	7819      	ldrb	r1, [r3, #0]
    9ade:	68fb      	ldr	r3, [r7, #12]
    9ae0:	2228      	movs	r2, #40	; 0x28
    9ae2:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    9ae4:	2317      	movs	r3, #23
    9ae6:	18fc      	adds	r4, r7, r3
    9ae8:	687b      	ldr	r3, [r7, #4]
    9aea:	0018      	movs	r0, r3
    9aec:	4b1d      	ldr	r3, [pc, #116]	; (9b64 <_i2c_master_write_packet+0x170>)
    9aee:	4798      	blx	r3
    9af0:	0003      	movs	r3, r0
    9af2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    9af4:	2317      	movs	r3, #23
    9af6:	18fb      	adds	r3, r7, r3
    9af8:	781b      	ldrb	r3, [r3, #0]
    9afa:	2b00      	cmp	r3, #0
    9afc:	d115      	bne.n	9b2a <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    9afe:	68fb      	ldr	r3, [r7, #12]
    9b00:	8b5b      	ldrh	r3, [r3, #26]
    9b02:	b29b      	uxth	r3, r3
    9b04:	001a      	movs	r2, r3
    9b06:	2304      	movs	r3, #4
    9b08:	4013      	ands	r3, r2
    9b0a:	d004      	beq.n	9b16 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    9b0c:	2317      	movs	r3, #23
    9b0e:	18fb      	adds	r3, r7, r3
    9b10:	221e      	movs	r2, #30
    9b12:	701a      	strb	r2, [r3, #0]
				break;
    9b14:	e00a      	b.n	9b2c <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    9b16:	2314      	movs	r3, #20
    9b18:	18fb      	adds	r3, r7, r3
    9b1a:	881b      	ldrh	r3, [r3, #0]
    9b1c:	2214      	movs	r2, #20
    9b1e:	18ba      	adds	r2, r7, r2
    9b20:	1e59      	subs	r1, r3, #1
    9b22:	8011      	strh	r1, [r2, #0]
    9b24:	2b00      	cmp	r3, #0
    9b26:	d1c2      	bne.n	9aae <_i2c_master_write_packet+0xba>
    9b28:	e000      	b.n	9b2c <_i2c_master_write_packet+0x138>
				break;
    9b2a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    9b2c:	687b      	ldr	r3, [r7, #4]
    9b2e:	7a9b      	ldrb	r3, [r3, #10]
    9b30:	2b00      	cmp	r3, #0
    9b32:	d00a      	beq.n	9b4a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    9b34:	687b      	ldr	r3, [r7, #4]
    9b36:	0018      	movs	r0, r3
    9b38:	4b07      	ldr	r3, [pc, #28]	; (9b58 <_i2c_master_write_packet+0x164>)
    9b3a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9b3c:	68fb      	ldr	r3, [r7, #12]
    9b3e:	685b      	ldr	r3, [r3, #4]
    9b40:	22c0      	movs	r2, #192	; 0xc0
    9b42:	0292      	lsls	r2, r2, #10
    9b44:	431a      	orrs	r2, r3
    9b46:	68fb      	ldr	r3, [r7, #12]
    9b48:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    9b4a:	2317      	movs	r3, #23
    9b4c:	18fb      	adds	r3, r7, r3
    9b4e:	781b      	ldrb	r3, [r3, #0]
}
    9b50:	0018      	movs	r0, r3
    9b52:	46bd      	mov	sp, r7
    9b54:	b007      	add	sp, #28
    9b56:	bd90      	pop	{r4, r7, pc}
    9b58:	000090c9 	.word	0x000090c9
    9b5c:	000096ed 	.word	0x000096ed
    9b60:	fffbffff 	.word	0xfffbffff
    9b64:	0000968f 	.word	0x0000968f
    9b68:	00009631 	.word	0x00009631

00009b6c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9b6c:	b580      	push	{r7, lr}
    9b6e:	b082      	sub	sp, #8
    9b70:	af00      	add	r7, sp, #0
    9b72:	6078      	str	r0, [r7, #4]
    9b74:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    9b76:	687b      	ldr	r3, [r7, #4]
    9b78:	8b9b      	ldrh	r3, [r3, #28]
    9b7a:	b29b      	uxth	r3, r3
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d001      	beq.n	9b84 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    9b80:	2305      	movs	r3, #5
    9b82:	e00c      	b.n	9b9e <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    9b84:	687b      	ldr	r3, [r7, #4]
    9b86:	2201      	movs	r2, #1
    9b88:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    9b8a:	687b      	ldr	r3, [r7, #4]
    9b8c:	2201      	movs	r2, #1
    9b8e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    9b90:	683a      	ldr	r2, [r7, #0]
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	0011      	movs	r1, r2
    9b96:	0018      	movs	r0, r3
    9b98:	4b03      	ldr	r3, [pc, #12]	; (9ba8 <i2c_master_write_packet_wait+0x3c>)
    9b9a:	4798      	blx	r3
    9b9c:	0003      	movs	r3, r0
}
    9b9e:	0018      	movs	r0, r3
    9ba0:	46bd      	mov	sp, r7
    9ba2:	b002      	add	sp, #8
    9ba4:	bd80      	pop	{r7, pc}
    9ba6:	46c0      	nop			; (mov r8, r8)
    9ba8:	000099f5 	.word	0x000099f5

00009bac <i2c_master_is_syncing>:
{
    9bac:	b580      	push	{r7, lr}
    9bae:	b084      	sub	sp, #16
    9bb0:	af00      	add	r7, sp, #0
    9bb2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    9bb4:	687b      	ldr	r3, [r7, #4]
    9bb6:	681b      	ldr	r3, [r3, #0]
    9bb8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    9bba:	68fb      	ldr	r3, [r7, #12]
    9bbc:	69db      	ldr	r3, [r3, #28]
    9bbe:	2207      	movs	r2, #7
    9bc0:	4013      	ands	r3, r2
    9bc2:	1e5a      	subs	r2, r3, #1
    9bc4:	4193      	sbcs	r3, r2
    9bc6:	b2db      	uxtb	r3, r3
}
    9bc8:	0018      	movs	r0, r3
    9bca:	46bd      	mov	sp, r7
    9bcc:	b004      	add	sp, #16
    9bce:	bd80      	pop	{r7, pc}

00009bd0 <_i2c_master_wait_for_sync>:
{
    9bd0:	b580      	push	{r7, lr}
    9bd2:	b082      	sub	sp, #8
    9bd4:	af00      	add	r7, sp, #0
    9bd6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    9bd8:	46c0      	nop			; (mov r8, r8)
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	0018      	movs	r0, r3
    9bde:	4b04      	ldr	r3, [pc, #16]	; (9bf0 <_i2c_master_wait_for_sync+0x20>)
    9be0:	4798      	blx	r3
    9be2:	1e03      	subs	r3, r0, #0
    9be4:	d1f9      	bne.n	9bda <_i2c_master_wait_for_sync+0xa>
}
    9be6:	46c0      	nop			; (mov r8, r8)
    9be8:	46bd      	mov	sp, r7
    9bea:	b002      	add	sp, #8
    9bec:	bd80      	pop	{r7, pc}
    9bee:	46c0      	nop			; (mov r8, r8)
    9bf0:	00009bad 	.word	0x00009bad

00009bf4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    9bf4:	b580      	push	{r7, lr}
    9bf6:	b084      	sub	sp, #16
    9bf8:	af00      	add	r7, sp, #0
    9bfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9bfc:	687b      	ldr	r3, [r7, #4]
    9bfe:	681b      	ldr	r3, [r3, #0]
    9c00:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    9c02:	68fb      	ldr	r3, [r7, #12]
    9c04:	681b      	ldr	r3, [r3, #0]
    9c06:	011b      	lsls	r3, r3, #4
    9c08:	0fdb      	lsrs	r3, r3, #31
    9c0a:	b2db      	uxtb	r3, r3
    9c0c:	001a      	movs	r2, r3
    9c0e:	230b      	movs	r3, #11
    9c10:	18fb      	adds	r3, r7, r3
    9c12:	1e51      	subs	r1, r2, #1
    9c14:	418a      	sbcs	r2, r1
    9c16:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    9c18:	2308      	movs	r3, #8
    9c1a:	18fb      	adds	r3, r7, r3
    9c1c:	687a      	ldr	r2, [r7, #4]
    9c1e:	8b52      	ldrh	r2, [r2, #26]
    9c20:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	8b9b      	ldrh	r3, [r3, #28]
    9c26:	b29a      	uxth	r2, r3
    9c28:	2308      	movs	r3, #8
    9c2a:	18fb      	adds	r3, r7, r3
    9c2c:	2108      	movs	r1, #8
    9c2e:	1879      	adds	r1, r7, r1
    9c30:	8809      	ldrh	r1, [r1, #0]
    9c32:	1a8a      	subs	r2, r1, r2
    9c34:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	8b9b      	ldrh	r3, [r3, #28]
    9c3a:	b29b      	uxth	r3, r3
    9c3c:	3b01      	subs	r3, #1
    9c3e:	b29a      	uxth	r2, r3
    9c40:	687b      	ldr	r3, [r7, #4]
    9c42:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    9c44:	230b      	movs	r3, #11
    9c46:	18fb      	adds	r3, r7, r3
    9c48:	781b      	ldrb	r3, [r3, #0]
    9c4a:	2b00      	cmp	r3, #0
    9c4c:	d010      	beq.n	9c70 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    9c4e:	687b      	ldr	r3, [r7, #4]
    9c50:	7adb      	ldrb	r3, [r3, #11]
    9c52:	2b00      	cmp	r3, #0
    9c54:	d01c      	beq.n	9c90 <_i2c_master_read+0x9c>
    9c56:	687b      	ldr	r3, [r7, #4]
    9c58:	8b9b      	ldrh	r3, [r3, #28]
    9c5a:	b29b      	uxth	r3, r3
    9c5c:	2b01      	cmp	r3, #1
    9c5e:	d117      	bne.n	9c90 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9c60:	68fb      	ldr	r3, [r7, #12]
    9c62:	685b      	ldr	r3, [r3, #4]
    9c64:	2280      	movs	r2, #128	; 0x80
    9c66:	02d2      	lsls	r2, r2, #11
    9c68:	431a      	orrs	r2, r3
    9c6a:	68fb      	ldr	r3, [r7, #12]
    9c6c:	605a      	str	r2, [r3, #4]
    9c6e:	e00f      	b.n	9c90 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    9c70:	687b      	ldr	r3, [r7, #4]
    9c72:	7adb      	ldrb	r3, [r3, #11]
    9c74:	2b00      	cmp	r3, #0
    9c76:	d00b      	beq.n	9c90 <_i2c_master_read+0x9c>
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	8b9b      	ldrh	r3, [r3, #28]
    9c7c:	b29b      	uxth	r3, r3
    9c7e:	2b00      	cmp	r3, #0
    9c80:	d106      	bne.n	9c90 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9c82:	68fb      	ldr	r3, [r7, #12]
    9c84:	685b      	ldr	r3, [r3, #4]
    9c86:	2280      	movs	r2, #128	; 0x80
    9c88:	02d2      	lsls	r2, r2, #11
    9c8a:	431a      	orrs	r2, r3
    9c8c:	68fb      	ldr	r3, [r7, #12]
    9c8e:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    9c90:	687b      	ldr	r3, [r7, #4]
    9c92:	8b9b      	ldrh	r3, [r3, #28]
    9c94:	b29b      	uxth	r3, r3
    9c96:	2b00      	cmp	r3, #0
    9c98:	d10e      	bne.n	9cb8 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    9c9a:	687b      	ldr	r3, [r7, #4]
    9c9c:	7a9b      	ldrb	r3, [r3, #10]
    9c9e:	2b00      	cmp	r3, #0
    9ca0:	d00a      	beq.n	9cb8 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	0018      	movs	r0, r3
    9ca6:	4b0e      	ldr	r3, [pc, #56]	; (9ce0 <_i2c_master_read+0xec>)
    9ca8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9caa:	68fb      	ldr	r3, [r7, #12]
    9cac:	685b      	ldr	r3, [r3, #4]
    9cae:	22c0      	movs	r2, #192	; 0xc0
    9cb0:	0292      	lsls	r2, r2, #10
    9cb2:	431a      	orrs	r2, r3
    9cb4:	68fb      	ldr	r3, [r7, #12]
    9cb6:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    9cb8:	687b      	ldr	r3, [r7, #4]
    9cba:	0018      	movs	r0, r3
    9cbc:	4b08      	ldr	r3, [pc, #32]	; (9ce0 <_i2c_master_read+0xec>)
    9cbe:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    9cc0:	687b      	ldr	r3, [r7, #4]
    9cc2:	6a1a      	ldr	r2, [r3, #32]
    9cc4:	2308      	movs	r3, #8
    9cc6:	18fb      	adds	r3, r7, r3
    9cc8:	881b      	ldrh	r3, [r3, #0]
    9cca:	18d3      	adds	r3, r2, r3
    9ccc:	68fa      	ldr	r2, [r7, #12]
    9cce:	2128      	movs	r1, #40	; 0x28
    9cd0:	5c52      	ldrb	r2, [r2, r1]
    9cd2:	b2d2      	uxtb	r2, r2
    9cd4:	701a      	strb	r2, [r3, #0]
}
    9cd6:	46c0      	nop			; (mov r8, r8)
    9cd8:	46bd      	mov	sp, r7
    9cda:	b004      	add	sp, #16
    9cdc:	bd80      	pop	{r7, pc}
    9cde:	46c0      	nop			; (mov r8, r8)
    9ce0:	00009bd1 	.word	0x00009bd1

00009ce4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    9ce4:	b580      	push	{r7, lr}
    9ce6:	b084      	sub	sp, #16
    9ce8:	af00      	add	r7, sp, #0
    9cea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9cec:	687b      	ldr	r3, [r7, #4]
    9cee:	681b      	ldr	r3, [r3, #0]
    9cf0:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    9cf2:	68fb      	ldr	r3, [r7, #12]
    9cf4:	8b5b      	ldrh	r3, [r3, #26]
    9cf6:	b29b      	uxth	r3, r3
    9cf8:	001a      	movs	r2, r3
    9cfa:	2304      	movs	r3, #4
    9cfc:	4013      	ands	r3, r2
    9cfe:	d004      	beq.n	9d0a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    9d00:	687b      	ldr	r3, [r7, #4]
    9d02:	2225      	movs	r2, #37	; 0x25
    9d04:	211e      	movs	r1, #30
    9d06:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    9d08:	e024      	b.n	9d54 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    9d0a:	230a      	movs	r3, #10
    9d0c:	18fb      	adds	r3, r7, r3
    9d0e:	687a      	ldr	r2, [r7, #4]
    9d10:	8b52      	ldrh	r2, [r2, #26]
    9d12:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	8b9b      	ldrh	r3, [r3, #28]
    9d18:	b29a      	uxth	r2, r3
    9d1a:	230a      	movs	r3, #10
    9d1c:	18fb      	adds	r3, r7, r3
    9d1e:	210a      	movs	r1, #10
    9d20:	1879      	adds	r1, r7, r1
    9d22:	8809      	ldrh	r1, [r1, #0]
    9d24:	1a8a      	subs	r2, r1, r2
    9d26:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    9d28:	687b      	ldr	r3, [r7, #4]
    9d2a:	8b9b      	ldrh	r3, [r3, #28]
    9d2c:	b29b      	uxth	r3, r3
    9d2e:	3b01      	subs	r3, #1
    9d30:	b29a      	uxth	r2, r3
    9d32:	687b      	ldr	r3, [r7, #4]
    9d34:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	0018      	movs	r0, r3
    9d3a:	4b08      	ldr	r3, [pc, #32]	; (9d5c <_i2c_master_write+0x78>)
    9d3c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	6a1a      	ldr	r2, [r3, #32]
    9d42:	230a      	movs	r3, #10
    9d44:	18fb      	adds	r3, r7, r3
    9d46:	881b      	ldrh	r3, [r3, #0]
    9d48:	18d3      	adds	r3, r2, r3
    9d4a:	781b      	ldrb	r3, [r3, #0]
    9d4c:	b2d9      	uxtb	r1, r3
    9d4e:	68fb      	ldr	r3, [r7, #12]
    9d50:	2228      	movs	r2, #40	; 0x28
    9d52:	5499      	strb	r1, [r3, r2]
}
    9d54:	46bd      	mov	sp, r7
    9d56:	b004      	add	sp, #16
    9d58:	bd80      	pop	{r7, pc}
    9d5a:	46c0      	nop			; (mov r8, r8)
    9d5c:	00009bd1 	.word	0x00009bd1

00009d60 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    9d60:	b580      	push	{r7, lr}
    9d62:	b084      	sub	sp, #16
    9d64:	af00      	add	r7, sp, #0
    9d66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9d68:	687b      	ldr	r3, [r7, #4]
    9d6a:	681b      	ldr	r3, [r3, #0]
    9d6c:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    9d6e:	68fb      	ldr	r3, [r7, #12]
    9d70:	7e1b      	ldrb	r3, [r3, #24]
    9d72:	b2db      	uxtb	r3, r3
    9d74:	001a      	movs	r2, r3
    9d76:	2301      	movs	r3, #1
    9d78:	4013      	ands	r3, r2
    9d7a:	d02b      	beq.n	9dd4 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    9d7c:	68fb      	ldr	r3, [r7, #12]
    9d7e:	2201      	movs	r2, #1
    9d80:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    9d82:	68fb      	ldr	r3, [r7, #12]
    9d84:	8b5b      	ldrh	r3, [r3, #26]
    9d86:	b29b      	uxth	r3, r3
    9d88:	001a      	movs	r2, r3
    9d8a:	2302      	movs	r3, #2
    9d8c:	4013      	ands	r3, r2
    9d8e:	d004      	beq.n	9d9a <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	2225      	movs	r2, #37	; 0x25
    9d94:	2141      	movs	r1, #65	; 0x41
    9d96:	5499      	strb	r1, [r3, r2]
    9d98:	e01c      	b.n	9dd4 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    9d9a:	68fb      	ldr	r3, [r7, #12]
    9d9c:	8b5b      	ldrh	r3, [r3, #26]
    9d9e:	b29b      	uxth	r3, r3
    9da0:	001a      	movs	r2, r3
    9da2:	2304      	movs	r3, #4
    9da4:	4013      	ands	r3, r2
    9da6:	d015      	beq.n	9dd4 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    9da8:	687b      	ldr	r3, [r7, #4]
    9daa:	2225      	movs	r2, #37	; 0x25
    9dac:	2118      	movs	r1, #24
    9dae:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    9db0:	687b      	ldr	r3, [r7, #4]
    9db2:	2200      	movs	r2, #0
    9db4:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    9db6:	687b      	ldr	r3, [r7, #4]
    9db8:	7a9b      	ldrb	r3, [r3, #10]
    9dba:	2b00      	cmp	r3, #0
    9dbc:	d00a      	beq.n	9dd4 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    9dbe:	687b      	ldr	r3, [r7, #4]
    9dc0:	0018      	movs	r0, r3
    9dc2:	4b13      	ldr	r3, [pc, #76]	; (9e10 <_i2c_master_async_address_response+0xb0>)
    9dc4:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    9dc6:	68fb      	ldr	r3, [r7, #12]
    9dc8:	685b      	ldr	r3, [r3, #4]
    9dca:	22c0      	movs	r2, #192	; 0xc0
    9dcc:	0292      	lsls	r2, r2, #10
    9dce:	431a      	orrs	r2, r3
    9dd0:	68fb      	ldr	r3, [r7, #12]
    9dd2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    9dd4:	687b      	ldr	r3, [r7, #4]
    9dd6:	8b9b      	ldrh	r3, [r3, #28]
    9dd8:	b29a      	uxth	r2, r3
    9dda:	687b      	ldr	r3, [r7, #4]
    9ddc:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    9dde:	687b      	ldr	r3, [r7, #4]
    9de0:	2225      	movs	r2, #37	; 0x25
    9de2:	5c9b      	ldrb	r3, [r3, r2]
    9de4:	b2db      	uxtb	r3, r3
    9de6:	2b05      	cmp	r3, #5
    9de8:	d10e      	bne.n	9e08 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    9dea:	687b      	ldr	r3, [r7, #4]
    9dec:	2224      	movs	r2, #36	; 0x24
    9dee:	5c9b      	ldrb	r3, [r3, r2]
    9df0:	b2db      	uxtb	r3, r3
    9df2:	2b00      	cmp	r3, #0
    9df4:	d104      	bne.n	9e00 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    9df6:	687b      	ldr	r3, [r7, #4]
    9df8:	0018      	movs	r0, r3
    9dfa:	4b06      	ldr	r3, [pc, #24]	; (9e14 <_i2c_master_async_address_response+0xb4>)
    9dfc:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    9dfe:	e003      	b.n	9e08 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    9e00:	687b      	ldr	r3, [r7, #4]
    9e02:	0018      	movs	r0, r3
    9e04:	4b04      	ldr	r3, [pc, #16]	; (9e18 <_i2c_master_async_address_response+0xb8>)
    9e06:	4798      	blx	r3
}
    9e08:	46c0      	nop			; (mov r8, r8)
    9e0a:	46bd      	mov	sp, r7
    9e0c:	b004      	add	sp, #16
    9e0e:	bd80      	pop	{r7, pc}
    9e10:	00009bd1 	.word	0x00009bd1
    9e14:	00009ce5 	.word	0x00009ce5
    9e18:	00009bf5 	.word	0x00009bf5

00009e1c <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b084      	sub	sp, #16
    9e20:	af00      	add	r7, sp, #0
    9e22:	60f8      	str	r0, [r7, #12]
    9e24:	60b9      	str	r1, [r7, #8]
    9e26:	1dfb      	adds	r3, r7, #7
    9e28:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    9e2a:	1dfb      	adds	r3, r7, #7
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	68fa      	ldr	r2, [r7, #12]
    9e30:	3302      	adds	r3, #2
    9e32:	009b      	lsls	r3, r3, #2
    9e34:	18d3      	adds	r3, r2, r3
    9e36:	3304      	adds	r3, #4
    9e38:	68ba      	ldr	r2, [r7, #8]
    9e3a:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    9e3c:	68fb      	ldr	r3, [r7, #12]
    9e3e:	7e1b      	ldrb	r3, [r3, #24]
    9e40:	b2db      	uxtb	r3, r3
    9e42:	b25a      	sxtb	r2, r3
    9e44:	1dfb      	adds	r3, r7, #7
    9e46:	781b      	ldrb	r3, [r3, #0]
    9e48:	2101      	movs	r1, #1
    9e4a:	4099      	lsls	r1, r3
    9e4c:	000b      	movs	r3, r1
    9e4e:	b25b      	sxtb	r3, r3
    9e50:	4313      	orrs	r3, r2
    9e52:	b25b      	sxtb	r3, r3
    9e54:	b2da      	uxtb	r2, r3
    9e56:	68fb      	ldr	r3, [r7, #12]
    9e58:	761a      	strb	r2, [r3, #24]
}
    9e5a:	46c0      	nop			; (mov r8, r8)
    9e5c:	46bd      	mov	sp, r7
    9e5e:	b004      	add	sp, #16
    9e60:	bd80      	pop	{r7, pc}
	...

00009e64 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9e64:	b590      	push	{r4, r7, lr}
    9e66:	b087      	sub	sp, #28
    9e68:	af00      	add	r7, sp, #0
    9e6a:	6078      	str	r0, [r7, #4]
    9e6c:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9e6e:	687b      	ldr	r3, [r7, #4]
    9e70:	681b      	ldr	r3, [r3, #0]
    9e72:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    9e74:	683b      	ldr	r3, [r7, #0]
    9e76:	685a      	ldr	r2, [r3, #4]
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    9e7c:	683b      	ldr	r3, [r7, #0]
    9e7e:	885a      	ldrh	r2, [r3, #2]
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    9e84:	687b      	ldr	r3, [r7, #4]
    9e86:	2224      	movs	r2, #36	; 0x24
    9e88:	2101      	movs	r1, #1
    9e8a:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    9e8c:	687b      	ldr	r3, [r7, #4]
    9e8e:	2225      	movs	r2, #37	; 0x25
    9e90:	2105      	movs	r1, #5
    9e92:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    9e94:	693b      	ldr	r3, [r7, #16]
    9e96:	681b      	ldr	r3, [r3, #0]
    9e98:	011b      	lsls	r3, r3, #4
    9e9a:	0fdb      	lsrs	r3, r3, #31
    9e9c:	b2db      	uxtb	r3, r3
    9e9e:	001a      	movs	r2, r3
    9ea0:	230f      	movs	r3, #15
    9ea2:	18fb      	adds	r3, r7, r3
    9ea4:	1e51      	subs	r1, r2, #1
    9ea6:	418a      	sbcs	r2, r1
    9ea8:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    9eaa:	683b      	ldr	r3, [r7, #0]
    9eac:	7a5b      	ldrb	r3, [r3, #9]
    9eae:	2b00      	cmp	r3, #0
    9eb0:	d006      	beq.n	9ec0 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    9eb2:	683b      	ldr	r3, [r7, #0]
    9eb4:	7a9a      	ldrb	r2, [r3, #10]
    9eb6:	687b      	ldr	r3, [r7, #4]
    9eb8:	0011      	movs	r1, r2
    9eba:	0018      	movs	r0, r3
    9ebc:	4b3b      	ldr	r3, [pc, #236]	; (9fac <_i2c_master_read_packet+0x148>)
    9ebe:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    9ec0:	230f      	movs	r3, #15
    9ec2:	18fb      	adds	r3, r7, r3
    9ec4:	781b      	ldrb	r3, [r3, #0]
    9ec6:	2b00      	cmp	r3, #0
    9ec8:	d00b      	beq.n	9ee2 <_i2c_master_read_packet+0x7e>
    9eca:	683b      	ldr	r3, [r7, #0]
    9ecc:	885b      	ldrh	r3, [r3, #2]
    9ece:	2b01      	cmp	r3, #1
    9ed0:	d107      	bne.n	9ee2 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9ed2:	693b      	ldr	r3, [r7, #16]
    9ed4:	685b      	ldr	r3, [r3, #4]
    9ed6:	2280      	movs	r2, #128	; 0x80
    9ed8:	02d2      	lsls	r2, r2, #11
    9eda:	431a      	orrs	r2, r3
    9edc:	693b      	ldr	r3, [r7, #16]
    9ede:	605a      	str	r2, [r3, #4]
    9ee0:	e005      	b.n	9eee <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9ee2:	693b      	ldr	r3, [r7, #16]
    9ee4:	685b      	ldr	r3, [r3, #4]
    9ee6:	4a32      	ldr	r2, [pc, #200]	; (9fb0 <_i2c_master_read_packet+0x14c>)
    9ee8:	401a      	ands	r2, r3
    9eea:	693b      	ldr	r3, [r7, #16]
    9eec:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    9eee:	683b      	ldr	r3, [r7, #0]
    9ef0:	7a1b      	ldrb	r3, [r3, #8]
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d045      	beq.n	9f82 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    9ef6:	683b      	ldr	r3, [r7, #0]
    9ef8:	881b      	ldrh	r3, [r3, #0]
    9efa:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9efc:	683b      	ldr	r3, [r7, #0]
    9efe:	7a5b      	ldrb	r3, [r3, #9]
    9f00:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    9f02:	4313      	orrs	r3, r2
    9f04:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9f06:	2380      	movs	r3, #128	; 0x80
    9f08:	021b      	lsls	r3, r3, #8
    9f0a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    9f0c:	693b      	ldr	r3, [r7, #16]
    9f0e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    9f10:	2317      	movs	r3, #23
    9f12:	18fc      	adds	r4, r7, r3
    9f14:	687b      	ldr	r3, [r7, #4]
    9f16:	0018      	movs	r0, r3
    9f18:	4b26      	ldr	r3, [pc, #152]	; (9fb4 <_i2c_master_read_packet+0x150>)
    9f1a:	4798      	blx	r3
    9f1c:	0003      	movs	r3, r0
    9f1e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9f20:	693b      	ldr	r3, [r7, #16]
    9f22:	685b      	ldr	r3, [r3, #4]
    9f24:	4a22      	ldr	r2, [pc, #136]	; (9fb0 <_i2c_master_read_packet+0x14c>)
    9f26:	401a      	ands	r2, r3
    9f28:	693b      	ldr	r3, [r7, #16]
    9f2a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    9f2c:	2317      	movs	r3, #23
    9f2e:	18fb      	adds	r3, r7, r3
    9f30:	781b      	ldrb	r3, [r3, #0]
    9f32:	2b00      	cmp	r3, #0
    9f34:	d107      	bne.n	9f46 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    9f36:	2317      	movs	r3, #23
    9f38:	18fc      	adds	r4, r7, r3
    9f3a:	687b      	ldr	r3, [r7, #4]
    9f3c:	0018      	movs	r0, r3
    9f3e:	4b1e      	ldr	r3, [pc, #120]	; (9fb8 <_i2c_master_read_packet+0x154>)
    9f40:	4798      	blx	r3
    9f42:	0003      	movs	r3, r0
    9f44:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    9f46:	2317      	movs	r3, #23
    9f48:	18fb      	adds	r3, r7, r3
    9f4a:	781b      	ldrb	r3, [r3, #0]
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d114      	bne.n	9f7a <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    9f50:	693b      	ldr	r3, [r7, #16]
    9f52:	2203      	movs	r2, #3
    9f54:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    9f56:	683b      	ldr	r3, [r7, #0]
    9f58:	881b      	ldrh	r3, [r3, #0]
    9f5a:	0a1b      	lsrs	r3, r3, #8
    9f5c:	b29b      	uxth	r3, r3
    9f5e:	2278      	movs	r2, #120	; 0x78
    9f60:	4313      	orrs	r3, r2
    9f62:	b29b      	uxth	r3, r3
    9f64:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9f66:	683b      	ldr	r3, [r7, #0]
    9f68:	7a5b      	ldrb	r3, [r3, #9]
    9f6a:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    9f6c:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    9f6e:	2201      	movs	r2, #1
    9f70:	4313      	orrs	r3, r2
    9f72:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    9f74:	693b      	ldr	r3, [r7, #16]
    9f76:	625a      	str	r2, [r3, #36]	; 0x24
    9f78:	e012      	b.n	9fa0 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    9f7a:	2317      	movs	r3, #23
    9f7c:	18fb      	adds	r3, r7, r3
    9f7e:	781b      	ldrb	r3, [r3, #0]
    9f80:	e00f      	b.n	9fa2 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    9f82:	693b      	ldr	r3, [r7, #16]
    9f84:	2203      	movs	r2, #3
    9f86:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    9f88:	683b      	ldr	r3, [r7, #0]
    9f8a:	881b      	ldrh	r3, [r3, #0]
    9f8c:	005b      	lsls	r3, r3, #1
    9f8e:	2201      	movs	r2, #1
    9f90:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    9f92:	683b      	ldr	r3, [r7, #0]
    9f94:	7a5b      	ldrb	r3, [r3, #9]
    9f96:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    9f98:	4313      	orrs	r3, r2
    9f9a:	001a      	movs	r2, r3
    9f9c:	693b      	ldr	r3, [r7, #16]
    9f9e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    9fa0:	2300      	movs	r3, #0
}
    9fa2:	0018      	movs	r0, r3
    9fa4:	46bd      	mov	sp, r7
    9fa6:	b007      	add	sp, #28
    9fa8:	bd90      	pop	{r4, r7, pc}
    9faa:	46c0      	nop			; (mov r8, r8)
    9fac:	000096ed 	.word	0x000096ed
    9fb0:	fffbffff 	.word	0xfffbffff
    9fb4:	0000968f 	.word	0x0000968f
    9fb8:	00009631 	.word	0x00009631

00009fbc <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    9fbc:	b580      	push	{r7, lr}
    9fbe:	b082      	sub	sp, #8
    9fc0:	af00      	add	r7, sp, #0
    9fc2:	6078      	str	r0, [r7, #4]
    9fc4:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    9fc6:	687b      	ldr	r3, [r7, #4]
    9fc8:	8b9b      	ldrh	r3, [r3, #28]
    9fca:	b29b      	uxth	r3, r3
    9fcc:	2b00      	cmp	r3, #0
    9fce:	d001      	beq.n	9fd4 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    9fd0:	2305      	movs	r3, #5
    9fd2:	e00c      	b.n	9fee <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    9fd4:	687b      	ldr	r3, [r7, #4]
    9fd6:	2201      	movs	r2, #1
    9fd8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    9fda:	687b      	ldr	r3, [r7, #4]
    9fdc:	2201      	movs	r2, #1
    9fde:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    9fe0:	683a      	ldr	r2, [r7, #0]
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	0011      	movs	r1, r2
    9fe6:	0018      	movs	r0, r3
    9fe8:	4b03      	ldr	r3, [pc, #12]	; (9ff8 <i2c_master_read_packet_job+0x3c>)
    9fea:	4798      	blx	r3
    9fec:	0003      	movs	r3, r0
}
    9fee:	0018      	movs	r0, r3
    9ff0:	46bd      	mov	sp, r7
    9ff2:	b002      	add	sp, #8
    9ff4:	bd80      	pop	{r7, pc}
    9ff6:	46c0      	nop			; (mov r8, r8)
    9ff8:	00009e65 	.word	0x00009e65

00009ffc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    9ffc:	b580      	push	{r7, lr}
    9ffe:	b086      	sub	sp, #24
    a000:	af00      	add	r7, sp, #0
    a002:	0002      	movs	r2, r0
    a004:	1dfb      	adds	r3, r7, #7
    a006:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    a008:	1dfb      	adds	r3, r7, #7
    a00a:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    a00c:	4b93      	ldr	r3, [pc, #588]	; (a25c <_i2c_master_interrupt_handler+0x260>)
    a00e:	0092      	lsls	r2, r2, #2
    a010:	58d3      	ldr	r3, [r2, r3]
    a012:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a014:	697b      	ldr	r3, [r7, #20]
    a016:	681b      	ldr	r3, [r3, #0]
    a018:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    a01a:	693b      	ldr	r3, [r7, #16]
    a01c:	681b      	ldr	r3, [r3, #0]
    a01e:	011b      	lsls	r3, r3, #4
    a020:	0fdb      	lsrs	r3, r3, #31
    a022:	b2db      	uxtb	r3, r3
    a024:	001a      	movs	r2, r3
    a026:	230f      	movs	r3, #15
    a028:	18fb      	adds	r3, r7, r3
    a02a:	1e51      	subs	r1, r2, #1
    a02c:	418a      	sbcs	r2, r1
    a02e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    a030:	230e      	movs	r3, #14
    a032:	18fb      	adds	r3, r7, r3
    a034:	697a      	ldr	r2, [r7, #20]
    a036:	7e52      	ldrb	r2, [r2, #25]
    a038:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    a03a:	697b      	ldr	r3, [r7, #20]
    a03c:	7e1b      	ldrb	r3, [r3, #24]
    a03e:	b2da      	uxtb	r2, r3
    a040:	230e      	movs	r3, #14
    a042:	18fb      	adds	r3, r7, r3
    a044:	210e      	movs	r1, #14
    a046:	1879      	adds	r1, r7, r1
    a048:	7809      	ldrb	r1, [r1, #0]
    a04a:	400a      	ands	r2, r1
    a04c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    a04e:	697b      	ldr	r3, [r7, #20]
    a050:	8b5b      	ldrh	r3, [r3, #26]
    a052:	b29b      	uxth	r3, r3
    a054:	2b00      	cmp	r3, #0
    a056:	d109      	bne.n	a06c <_i2c_master_interrupt_handler+0x70>
    a058:	697b      	ldr	r3, [r7, #20]
    a05a:	8b9b      	ldrh	r3, [r3, #28]
    a05c:	b29b      	uxth	r3, r3
    a05e:	2b00      	cmp	r3, #0
    a060:	d004      	beq.n	a06c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    a062:	697b      	ldr	r3, [r7, #20]
    a064:	0018      	movs	r0, r3
    a066:	4b7e      	ldr	r3, [pc, #504]	; (a260 <_i2c_master_interrupt_handler+0x264>)
    a068:	4798      	blx	r3
    a06a:	e070      	b.n	a14e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a06c:	697b      	ldr	r3, [r7, #20]
    a06e:	8b5b      	ldrh	r3, [r3, #26]
    a070:	b29b      	uxth	r3, r3
    a072:	2b00      	cmp	r3, #0
    a074:	d039      	beq.n	a0ea <_i2c_master_interrupt_handler+0xee>
    a076:	697b      	ldr	r3, [r7, #20]
    a078:	8b9b      	ldrh	r3, [r3, #28]
    a07a:	b29b      	uxth	r3, r3
    a07c:	2b00      	cmp	r3, #0
    a07e:	d134      	bne.n	a0ea <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    a080:	697b      	ldr	r3, [r7, #20]
    a082:	2225      	movs	r2, #37	; 0x25
    a084:	5c9b      	ldrb	r3, [r3, r2]
    a086:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a088:	2b05      	cmp	r3, #5
    a08a:	d12e      	bne.n	a0ea <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    a08c:	697b      	ldr	r3, [r7, #20]
    a08e:	2224      	movs	r2, #36	; 0x24
    a090:	5c9b      	ldrb	r3, [r3, r2]
    a092:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    a094:	2b00      	cmp	r3, #0
    a096:	d128      	bne.n	a0ea <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    a098:	693b      	ldr	r3, [r7, #16]
    a09a:	2203      	movs	r2, #3
    a09c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    a09e:	697b      	ldr	r3, [r7, #20]
    a0a0:	2200      	movs	r2, #0
    a0a2:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    a0a4:	697b      	ldr	r3, [r7, #20]
    a0a6:	2225      	movs	r2, #37	; 0x25
    a0a8:	2100      	movs	r1, #0
    a0aa:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    a0ac:	697b      	ldr	r3, [r7, #20]
    a0ae:	7a9b      	ldrb	r3, [r3, #10]
    a0b0:	2b00      	cmp	r3, #0
    a0b2:	d00b      	beq.n	a0cc <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    a0b4:	697b      	ldr	r3, [r7, #20]
    a0b6:	0018      	movs	r0, r3
    a0b8:	4b6a      	ldr	r3, [pc, #424]	; (a264 <_i2c_master_interrupt_handler+0x268>)
    a0ba:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a0bc:	693b      	ldr	r3, [r7, #16]
    a0be:	685b      	ldr	r3, [r3, #4]
    a0c0:	22c0      	movs	r2, #192	; 0xc0
    a0c2:	0292      	lsls	r2, r2, #10
    a0c4:	431a      	orrs	r2, r3
    a0c6:	693b      	ldr	r3, [r7, #16]
    a0c8:	605a      	str	r2, [r3, #4]
    a0ca:	e002      	b.n	a0d2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    a0cc:	693b      	ldr	r3, [r7, #16]
    a0ce:	2201      	movs	r2, #1
    a0d0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    a0d2:	230e      	movs	r3, #14
    a0d4:	18fb      	adds	r3, r7, r3
    a0d6:	781b      	ldrb	r3, [r3, #0]
    a0d8:	2201      	movs	r2, #1
    a0da:	4013      	ands	r3, r2
    a0dc:	d037      	beq.n	a14e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    a0de:	697b      	ldr	r3, [r7, #20]
    a0e0:	68db      	ldr	r3, [r3, #12]
    a0e2:	697a      	ldr	r2, [r7, #20]
    a0e4:	0010      	movs	r0, r2
    a0e6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    a0e8:	e031      	b.n	a14e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    a0ea:	697b      	ldr	r3, [r7, #20]
    a0ec:	8b5b      	ldrh	r3, [r3, #26]
    a0ee:	b29b      	uxth	r3, r3
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d02c      	beq.n	a14e <_i2c_master_interrupt_handler+0x152>
    a0f4:	697b      	ldr	r3, [r7, #20]
    a0f6:	8b9b      	ldrh	r3, [r3, #28]
    a0f8:	b29b      	uxth	r3, r3
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d027      	beq.n	a14e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    a0fe:	693b      	ldr	r3, [r7, #16]
    a100:	8b5b      	ldrh	r3, [r3, #26]
    a102:	b29b      	uxth	r3, r3
    a104:	001a      	movs	r2, r3
    a106:	2320      	movs	r3, #32
    a108:	4013      	ands	r3, r2
    a10a:	d111      	bne.n	a130 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    a10c:	230f      	movs	r3, #15
    a10e:	18fb      	adds	r3, r7, r3
    a110:	781b      	ldrb	r3, [r3, #0]
    a112:	2201      	movs	r2, #1
    a114:	4053      	eors	r3, r2
    a116:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    a118:	2b00      	cmp	r3, #0
    a11a:	d104      	bne.n	a126 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    a11c:	697b      	ldr	r3, [r7, #20]
    a11e:	8b9b      	ldrh	r3, [r3, #28]
    a120:	b29b      	uxth	r3, r3
    a122:	2b01      	cmp	r3, #1
    a124:	d004      	beq.n	a130 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    a126:	697b      	ldr	r3, [r7, #20]
    a128:	2225      	movs	r2, #37	; 0x25
    a12a:	2141      	movs	r1, #65	; 0x41
    a12c:	5499      	strb	r1, [r3, r2]
    a12e:	e00e      	b.n	a14e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    a130:	697b      	ldr	r3, [r7, #20]
    a132:	2224      	movs	r2, #36	; 0x24
    a134:	5c9b      	ldrb	r3, [r3, r2]
    a136:	b2db      	uxtb	r3, r3
    a138:	2b00      	cmp	r3, #0
    a13a:	d104      	bne.n	a146 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    a13c:	697b      	ldr	r3, [r7, #20]
    a13e:	0018      	movs	r0, r3
    a140:	4b49      	ldr	r3, [pc, #292]	; (a268 <_i2c_master_interrupt_handler+0x26c>)
    a142:	4798      	blx	r3
    a144:	e003      	b.n	a14e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    a146:	697b      	ldr	r3, [r7, #20]
    a148:	0018      	movs	r0, r3
    a14a:	4b48      	ldr	r3, [pc, #288]	; (a26c <_i2c_master_interrupt_handler+0x270>)
    a14c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a14e:	697b      	ldr	r3, [r7, #20]
    a150:	8b5b      	ldrh	r3, [r3, #26]
    a152:	b29b      	uxth	r3, r3
    a154:	2b00      	cmp	r3, #0
    a156:	d047      	beq.n	a1e8 <_i2c_master_interrupt_handler+0x1ec>
    a158:	697b      	ldr	r3, [r7, #20]
    a15a:	8b9b      	ldrh	r3, [r3, #28]
    a15c:	b29b      	uxth	r3, r3
    a15e:	2b00      	cmp	r3, #0
    a160:	d142      	bne.n	a1e8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    a162:	697b      	ldr	r3, [r7, #20]
    a164:	2225      	movs	r2, #37	; 0x25
    a166:	5c9b      	ldrb	r3, [r3, r2]
    a168:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a16a:	2b05      	cmp	r3, #5
    a16c:	d13c      	bne.n	a1e8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    a16e:	697b      	ldr	r3, [r7, #20]
    a170:	2224      	movs	r2, #36	; 0x24
    a172:	5c9b      	ldrb	r3, [r3, r2]
    a174:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    a176:	2b01      	cmp	r3, #1
    a178:	d136      	bne.n	a1e8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    a17a:	693b      	ldr	r3, [r7, #16]
    a17c:	7e1b      	ldrb	r3, [r3, #24]
    a17e:	b2db      	uxtb	r3, r3
    a180:	001a      	movs	r2, r3
    a182:	2302      	movs	r3, #2
    a184:	4013      	ands	r3, r2
    a186:	d002      	beq.n	a18e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a188:	693b      	ldr	r3, [r7, #16]
    a18a:	2202      	movs	r2, #2
    a18c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    a18e:	693b      	ldr	r3, [r7, #16]
    a190:	2203      	movs	r2, #3
    a192:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    a194:	697b      	ldr	r3, [r7, #20]
    a196:	2200      	movs	r2, #0
    a198:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    a19a:	697b      	ldr	r3, [r7, #20]
    a19c:	2225      	movs	r2, #37	; 0x25
    a19e:	2100      	movs	r1, #0
    a1a0:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    a1a2:	230e      	movs	r3, #14
    a1a4:	18fb      	adds	r3, r7, r3
    a1a6:	781b      	ldrb	r3, [r3, #0]
    a1a8:	2202      	movs	r2, #2
    a1aa:	4013      	ands	r3, r2
    a1ac:	d00b      	beq.n	a1c6 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    a1ae:	697b      	ldr	r3, [r7, #20]
    a1b0:	2224      	movs	r2, #36	; 0x24
    a1b2:	5c9b      	ldrb	r3, [r3, r2]
    a1b4:	b2db      	uxtb	r3, r3
    a1b6:	2b01      	cmp	r3, #1
    a1b8:	d105      	bne.n	a1c6 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    a1ba:	697b      	ldr	r3, [r7, #20]
    a1bc:	691b      	ldr	r3, [r3, #16]
    a1be:	697a      	ldr	r2, [r7, #20]
    a1c0:	0010      	movs	r0, r2
    a1c2:	4798      	blx	r3
    a1c4:	e010      	b.n	a1e8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    a1c6:	230e      	movs	r3, #14
    a1c8:	18fb      	adds	r3, r7, r3
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	2201      	movs	r2, #1
    a1ce:	4013      	ands	r3, r2
    a1d0:	d00a      	beq.n	a1e8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    a1d2:	697b      	ldr	r3, [r7, #20]
    a1d4:	2224      	movs	r2, #36	; 0x24
    a1d6:	5c9b      	ldrb	r3, [r3, r2]
    a1d8:	b2db      	uxtb	r3, r3
    a1da:	2b00      	cmp	r3, #0
    a1dc:	d104      	bne.n	a1e8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    a1de:	697b      	ldr	r3, [r7, #20]
    a1e0:	68db      	ldr	r3, [r3, #12]
    a1e2:	697a      	ldr	r2, [r7, #20]
    a1e4:	0010      	movs	r0, r2
    a1e6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    a1e8:	697b      	ldr	r3, [r7, #20]
    a1ea:	2225      	movs	r2, #37	; 0x25
    a1ec:	5c9b      	ldrb	r3, [r3, r2]
    a1ee:	b2db      	uxtb	r3, r3
    a1f0:	2b05      	cmp	r3, #5
    a1f2:	d02e      	beq.n	a252 <_i2c_master_interrupt_handler+0x256>
    a1f4:	697b      	ldr	r3, [r7, #20]
    a1f6:	2225      	movs	r2, #37	; 0x25
    a1f8:	5c9b      	ldrb	r3, [r3, r2]
    a1fa:	b2db      	uxtb	r3, r3
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	d028      	beq.n	a252 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    a200:	693b      	ldr	r3, [r7, #16]
    a202:	2203      	movs	r2, #3
    a204:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    a206:	697b      	ldr	r3, [r7, #20]
    a208:	2200      	movs	r2, #0
    a20a:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    a20c:	697b      	ldr	r3, [r7, #20]
    a20e:	2200      	movs	r2, #0
    a210:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    a212:	697b      	ldr	r3, [r7, #20]
    a214:	2225      	movs	r2, #37	; 0x25
    a216:	5c9b      	ldrb	r3, [r3, r2]
    a218:	b2db      	uxtb	r3, r3
    a21a:	2b41      	cmp	r3, #65	; 0x41
    a21c:	d00e      	beq.n	a23c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    a21e:	697b      	ldr	r3, [r7, #20]
    a220:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    a222:	2b00      	cmp	r3, #0
    a224:	d00a      	beq.n	a23c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    a226:	697b      	ldr	r3, [r7, #20]
    a228:	0018      	movs	r0, r3
    a22a:	4b0e      	ldr	r3, [pc, #56]	; (a264 <_i2c_master_interrupt_handler+0x268>)
    a22c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    a22e:	693b      	ldr	r3, [r7, #16]
    a230:	685b      	ldr	r3, [r3, #4]
    a232:	22e0      	movs	r2, #224	; 0xe0
    a234:	02d2      	lsls	r2, r2, #11
    a236:	431a      	orrs	r2, r3
    a238:	693b      	ldr	r3, [r7, #16]
    a23a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    a23c:	230e      	movs	r3, #14
    a23e:	18fb      	adds	r3, r7, r3
    a240:	781b      	ldrb	r3, [r3, #0]
    a242:	2204      	movs	r2, #4
    a244:	4013      	ands	r3, r2
    a246:	d004      	beq.n	a252 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    a248:	697b      	ldr	r3, [r7, #20]
    a24a:	695b      	ldr	r3, [r3, #20]
    a24c:	697a      	ldr	r2, [r7, #20]
    a24e:	0010      	movs	r0, r2
    a250:	4798      	blx	r3
		}
	}
}
    a252:	46c0      	nop			; (mov r8, r8)
    a254:	46bd      	mov	sp, r7
    a256:	b006      	add	sp, #24
    a258:	bd80      	pop	{r7, pc}
    a25a:	46c0      	nop			; (mov r8, r8)
    a25c:	200006b8 	.word	0x200006b8
    a260:	00009d61 	.word	0x00009d61
    a264:	00009bd1 	.word	0x00009bd1
    a268:	00009ce5 	.word	0x00009ce5
    a26c:	00009bf5 	.word	0x00009bf5

0000a270 <system_gclk_chan_get_config_defaults>:
{
    a270:	b580      	push	{r7, lr}
    a272:	b082      	sub	sp, #8
    a274:	af00      	add	r7, sp, #0
    a276:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a278:	687b      	ldr	r3, [r7, #4]
    a27a:	2200      	movs	r2, #0
    a27c:	701a      	strb	r2, [r3, #0]
}
    a27e:	46c0      	nop			; (mov r8, r8)
    a280:	46bd      	mov	sp, r7
    a282:	b002      	add	sp, #8
    a284:	bd80      	pop	{r7, pc}

0000a286 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    a286:	b5f0      	push	{r4, r5, r6, r7, lr}
    a288:	b08d      	sub	sp, #52	; 0x34
    a28a:	af00      	add	r7, sp, #0
    a28c:	60b8      	str	r0, [r7, #8]
    a28e:	60f9      	str	r1, [r7, #12]
    a290:	603a      	str	r2, [r7, #0]
    a292:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    a294:	2300      	movs	r3, #0
    a296:	2400      	movs	r4, #0
    a298:	623b      	str	r3, [r7, #32]
    a29a:	627c      	str	r4, [r7, #36]	; 0x24
    a29c:	2300      	movs	r3, #0
    a29e:	2400      	movs	r4, #0
    a2a0:	61bb      	str	r3, [r7, #24]
    a2a2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    a2a4:	233f      	movs	r3, #63	; 0x3f
    a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a2a8:	e053      	b.n	a352 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2ac:	3b20      	subs	r3, #32
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	db04      	blt.n	a2bc <long_division+0x36>
    a2b2:	2201      	movs	r2, #1
    a2b4:	409a      	lsls	r2, r3
    a2b6:	0013      	movs	r3, r2
    a2b8:	617b      	str	r3, [r7, #20]
    a2ba:	e00b      	b.n	a2d4 <long_division+0x4e>
    a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2be:	2220      	movs	r2, #32
    a2c0:	1ad3      	subs	r3, r2, r3
    a2c2:	2201      	movs	r2, #1
    a2c4:	40da      	lsrs	r2, r3
    a2c6:	0013      	movs	r3, r2
    a2c8:	2100      	movs	r1, #0
    a2ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a2cc:	4091      	lsls	r1, r2
    a2ce:	000a      	movs	r2, r1
    a2d0:	4313      	orrs	r3, r2
    a2d2:	617b      	str	r3, [r7, #20]
    a2d4:	2201      	movs	r2, #1
    a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2d8:	409a      	lsls	r2, r3
    a2da:	0013      	movs	r3, r2
    a2dc:	613b      	str	r3, [r7, #16]

		r = r << 1;
    a2de:	69bb      	ldr	r3, [r7, #24]
    a2e0:	69fc      	ldr	r4, [r7, #28]
    a2e2:	18db      	adds	r3, r3, r3
    a2e4:	4164      	adcs	r4, r4
    a2e6:	61bb      	str	r3, [r7, #24]
    a2e8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    a2ea:	68bb      	ldr	r3, [r7, #8]
    a2ec:	693a      	ldr	r2, [r7, #16]
    a2ee:	401a      	ands	r2, r3
    a2f0:	0015      	movs	r5, r2
    a2f2:	68fb      	ldr	r3, [r7, #12]
    a2f4:	697a      	ldr	r2, [r7, #20]
    a2f6:	401a      	ands	r2, r3
    a2f8:	0016      	movs	r6, r2
    a2fa:	002b      	movs	r3, r5
    a2fc:	4333      	orrs	r3, r6
    a2fe:	d007      	beq.n	a310 <long_division+0x8a>
			r |= 0x01;
    a300:	69bb      	ldr	r3, [r7, #24]
    a302:	2201      	movs	r2, #1
    a304:	4313      	orrs	r3, r2
    a306:	61bb      	str	r3, [r7, #24]
    a308:	69fb      	ldr	r3, [r7, #28]
    a30a:	2200      	movs	r2, #0
    a30c:	4313      	orrs	r3, r2
    a30e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    a310:	687a      	ldr	r2, [r7, #4]
    a312:	69fb      	ldr	r3, [r7, #28]
    a314:	429a      	cmp	r2, r3
    a316:	d819      	bhi.n	a34c <long_division+0xc6>
    a318:	687a      	ldr	r2, [r7, #4]
    a31a:	69fb      	ldr	r3, [r7, #28]
    a31c:	429a      	cmp	r2, r3
    a31e:	d103      	bne.n	a328 <long_division+0xa2>
    a320:	683a      	ldr	r2, [r7, #0]
    a322:	69bb      	ldr	r3, [r7, #24]
    a324:	429a      	cmp	r2, r3
    a326:	d811      	bhi.n	a34c <long_division+0xc6>
			r = r - d;
    a328:	69b9      	ldr	r1, [r7, #24]
    a32a:	69fa      	ldr	r2, [r7, #28]
    a32c:	683b      	ldr	r3, [r7, #0]
    a32e:	687c      	ldr	r4, [r7, #4]
    a330:	1ac9      	subs	r1, r1, r3
    a332:	41a2      	sbcs	r2, r4
    a334:	000b      	movs	r3, r1
    a336:	0014      	movs	r4, r2
    a338:	61bb      	str	r3, [r7, #24]
    a33a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    a33c:	6a3a      	ldr	r2, [r7, #32]
    a33e:	693b      	ldr	r3, [r7, #16]
    a340:	4313      	orrs	r3, r2
    a342:	623b      	str	r3, [r7, #32]
    a344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a346:	697b      	ldr	r3, [r7, #20]
    a348:	4313      	orrs	r3, r2
    a34a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a34e:	3b01      	subs	r3, #1
    a350:	62fb      	str	r3, [r7, #44]	; 0x2c
    a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a354:	2b00      	cmp	r3, #0
    a356:	daa8      	bge.n	a2aa <long_division+0x24>
		}
	}

	return q;
    a358:	6a3b      	ldr	r3, [r7, #32]
    a35a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    a35c:	0018      	movs	r0, r3
    a35e:	0021      	movs	r1, r4
    a360:	46bd      	mov	sp, r7
    a362:	b00d      	add	sp, #52	; 0x34
    a364:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a366 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    a366:	b580      	push	{r7, lr}
    a368:	b086      	sub	sp, #24
    a36a:	af00      	add	r7, sp, #0
    a36c:	60f8      	str	r0, [r7, #12]
    a36e:	60b9      	str	r1, [r7, #8]
    a370:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    a372:	2316      	movs	r3, #22
    a374:	18fb      	adds	r3, r7, r3
    a376:	2200      	movs	r2, #0
    a378:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    a37a:	68bb      	ldr	r3, [r7, #8]
    a37c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    a37e:	68bb      	ldr	r3, [r7, #8]
    a380:	085a      	lsrs	r2, r3, #1
    a382:	68fb      	ldr	r3, [r7, #12]
    a384:	429a      	cmp	r2, r3
    a386:	d201      	bcs.n	a38c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a388:	2340      	movs	r3, #64	; 0x40
    a38a:	e026      	b.n	a3da <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    a38c:	68bb      	ldr	r3, [r7, #8]
    a38e:	085b      	lsrs	r3, r3, #1
    a390:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    a392:	e00a      	b.n	a3aa <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    a394:	693a      	ldr	r2, [r7, #16]
    a396:	68fb      	ldr	r3, [r7, #12]
    a398:	1ad3      	subs	r3, r2, r3
    a39a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    a39c:	2316      	movs	r3, #22
    a39e:	18fb      	adds	r3, r7, r3
    a3a0:	881a      	ldrh	r2, [r3, #0]
    a3a2:	2316      	movs	r3, #22
    a3a4:	18fb      	adds	r3, r7, r3
    a3a6:	3201      	adds	r2, #1
    a3a8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    a3aa:	693a      	ldr	r2, [r7, #16]
    a3ac:	68fb      	ldr	r3, [r7, #12]
    a3ae:	429a      	cmp	r2, r3
    a3b0:	d2f0      	bcs.n	a394 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    a3b2:	2316      	movs	r3, #22
    a3b4:	18fb      	adds	r3, r7, r3
    a3b6:	2216      	movs	r2, #22
    a3b8:	18ba      	adds	r2, r7, r2
    a3ba:	8812      	ldrh	r2, [r2, #0]
    a3bc:	3a01      	subs	r2, #1
    a3be:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    a3c0:	2316      	movs	r3, #22
    a3c2:	18fb      	adds	r3, r7, r3
    a3c4:	881b      	ldrh	r3, [r3, #0]
    a3c6:	2bff      	cmp	r3, #255	; 0xff
    a3c8:	d901      	bls.n	a3ce <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a3ca:	2340      	movs	r3, #64	; 0x40
    a3cc:	e005      	b.n	a3da <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    a3ce:	687b      	ldr	r3, [r7, #4]
    a3d0:	2216      	movs	r2, #22
    a3d2:	18ba      	adds	r2, r7, r2
    a3d4:	8812      	ldrh	r2, [r2, #0]
    a3d6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    a3d8:	2300      	movs	r3, #0
	}
}
    a3da:	0018      	movs	r0, r3
    a3dc:	46bd      	mov	sp, r7
    a3de:	b006      	add	sp, #24
    a3e0:	bd80      	pop	{r7, pc}
	...

0000a3e4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3e6:	b0a1      	sub	sp, #132	; 0x84
    a3e8:	af00      	add	r7, sp, #0
    a3ea:	64f8      	str	r0, [r7, #76]	; 0x4c
    a3ec:	64b9      	str	r1, [r7, #72]	; 0x48
    a3ee:	647a      	str	r2, [r7, #68]	; 0x44
    a3f0:	2243      	movs	r2, #67	; 0x43
    a3f2:	18ba      	adds	r2, r7, r2
    a3f4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    a3f6:	2300      	movs	r3, #0
    a3f8:	2400      	movs	r4, #0
    a3fa:	673b      	str	r3, [r7, #112]	; 0x70
    a3fc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    a3fe:	2300      	movs	r3, #0
    a400:	2400      	movs	r4, #0
    a402:	66bb      	str	r3, [r7, #104]	; 0x68
    a404:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    a406:	2300      	movs	r3, #0
    a408:	2400      	movs	r4, #0
    a40a:	67bb      	str	r3, [r7, #120]	; 0x78
    a40c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    a40e:	2300      	movs	r3, #0
    a410:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    a412:	2358      	movs	r3, #88	; 0x58
    a414:	2240      	movs	r2, #64	; 0x40
    a416:	4694      	mov	ip, r2
    a418:	44bc      	add	ip, r7
    a41a:	4463      	add	r3, ip
    a41c:	781a      	ldrb	r2, [r3, #0]
    a41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a420:	435a      	muls	r2, r3
    a422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a424:	429a      	cmp	r2, r3
    a426:	d901      	bls.n	a42c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a428:	2340      	movs	r3, #64	; 0x40
    a42a:	e0b3      	b.n	a594 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    a42c:	2343      	movs	r3, #67	; 0x43
    a42e:	18fb      	adds	r3, r7, r3
    a430:	781b      	ldrb	r3, [r3, #0]
    a432:	2b00      	cmp	r3, #0
    a434:	d13d      	bne.n	a4b2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    a436:	2358      	movs	r3, #88	; 0x58
    a438:	2240      	movs	r2, #64	; 0x40
    a43a:	4694      	mov	ip, r2
    a43c:	44bc      	add	ip, r7
    a43e:	4463      	add	r3, ip
    a440:	781b      	ldrb	r3, [r3, #0]
    a442:	b2db      	uxtb	r3, r3
    a444:	613b      	str	r3, [r7, #16]
    a446:	2300      	movs	r3, #0
    a448:	617b      	str	r3, [r7, #20]
    a44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a44c:	60bb      	str	r3, [r7, #8]
    a44e:	2300      	movs	r3, #0
    a450:	60fb      	str	r3, [r7, #12]
    a452:	4c52      	ldr	r4, [pc, #328]	; (a59c <_sercom_get_async_baud_val+0x1b8>)
    a454:	68ba      	ldr	r2, [r7, #8]
    a456:	68fb      	ldr	r3, [r7, #12]
    a458:	6938      	ldr	r0, [r7, #16]
    a45a:	6979      	ldr	r1, [r7, #20]
    a45c:	47a0      	blx	r4
    a45e:	0003      	movs	r3, r0
    a460:	000c      	movs	r4, r1
    a462:	001b      	movs	r3, r3
    a464:	65fb      	str	r3, [r7, #92]	; 0x5c
    a466:	2300      	movs	r3, #0
    a468:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    a46a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a46c:	603b      	str	r3, [r7, #0]
    a46e:	2300      	movs	r3, #0
    a470:	607b      	str	r3, [r7, #4]
    a472:	6db8      	ldr	r0, [r7, #88]	; 0x58
    a474:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    a476:	683a      	ldr	r2, [r7, #0]
    a478:	687b      	ldr	r3, [r7, #4]
    a47a:	4c49      	ldr	r4, [pc, #292]	; (a5a0 <_sercom_get_async_baud_val+0x1bc>)
    a47c:	47a0      	blx	r4
    a47e:	0003      	movs	r3, r0
    a480:	000c      	movs	r4, r1
    a482:	673b      	str	r3, [r7, #112]	; 0x70
    a484:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    a486:	2100      	movs	r1, #0
    a488:	2201      	movs	r2, #1
    a48a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    a48c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    a48e:	1ac9      	subs	r1, r1, r3
    a490:	41a2      	sbcs	r2, r4
    a492:	000b      	movs	r3, r1
    a494:	0014      	movs	r4, r2
    a496:	66bb      	str	r3, [r7, #104]	; 0x68
    a498:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    a49a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a49c:	0c1b      	lsrs	r3, r3, #16
    a49e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    a4a0:	0416      	lsls	r6, r2, #16
    a4a2:	431e      	orrs	r6, r3
    a4a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a4a6:	041d      	lsls	r5, r3, #16
    a4a8:	0033      	movs	r3, r6
    a4aa:	67bb      	str	r3, [r7, #120]	; 0x78
    a4ac:	2300      	movs	r3, #0
    a4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    a4b0:	e06a      	b.n	a588 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    a4b2:	2343      	movs	r3, #67	; 0x43
    a4b4:	18fb      	adds	r3, r7, r3
    a4b6:	781b      	ldrb	r3, [r3, #0]
    a4b8:	2b01      	cmp	r3, #1
    a4ba:	d165      	bne.n	a588 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    a4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a4be:	633b      	str	r3, [r7, #48]	; 0x30
    a4c0:	2300      	movs	r3, #0
    a4c2:	637b      	str	r3, [r7, #52]	; 0x34
    a4c4:	2358      	movs	r3, #88	; 0x58
    a4c6:	2240      	movs	r2, #64	; 0x40
    a4c8:	4694      	mov	ip, r2
    a4ca:	44bc      	add	ip, r7
    a4cc:	4463      	add	r3, ip
    a4ce:	781b      	ldrb	r3, [r3, #0]
    a4d0:	b2db      	uxtb	r3, r3
    a4d2:	62bb      	str	r3, [r7, #40]	; 0x28
    a4d4:	2300      	movs	r3, #0
    a4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a4d8:	4c30      	ldr	r4, [pc, #192]	; (a59c <_sercom_get_async_baud_val+0x1b8>)
    a4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4de:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a4e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    a4e2:	47a0      	blx	r4
    a4e4:	0003      	movs	r3, r0
    a4e6:	000c      	movs	r4, r1
    a4e8:	65bb      	str	r3, [r7, #88]	; 0x58
    a4ea:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    a4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a4ee:	623b      	str	r3, [r7, #32]
    a4f0:	2300      	movs	r3, #0
    a4f2:	627b      	str	r3, [r7, #36]	; 0x24
    a4f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a4f6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a4f8:	001a      	movs	r2, r3
    a4fa:	0023      	movs	r3, r4
    a4fc:	6a38      	ldr	r0, [r7, #32]
    a4fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a500:	4c27      	ldr	r4, [pc, #156]	; (a5a0 <_sercom_get_async_baud_val+0x1bc>)
    a502:	47a0      	blx	r4
    a504:	0003      	movs	r3, r0
    a506:	000c      	movs	r4, r1
    a508:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    a50a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    a50c:	2380      	movs	r3, #128	; 0x80
    a50e:	019b      	lsls	r3, r3, #6
    a510:	429a      	cmp	r2, r3
    a512:	d901      	bls.n	a518 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a514:	2340      	movs	r3, #64	; 0x40
    a516:	e03d      	b.n	a594 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    a518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a51a:	61bb      	str	r3, [r7, #24]
    a51c:	2300      	movs	r3, #0
    a51e:	61fb      	str	r3, [r7, #28]
    a520:	69b9      	ldr	r1, [r7, #24]
    a522:	69fa      	ldr	r2, [r7, #28]
    a524:	000b      	movs	r3, r1
    a526:	0f5b      	lsrs	r3, r3, #29
    a528:	0010      	movs	r0, r2
    a52a:	00c0      	lsls	r0, r0, #3
    a52c:	63f8      	str	r0, [r7, #60]	; 0x3c
    a52e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    a530:	4318      	orrs	r0, r3
    a532:	63f8      	str	r0, [r7, #60]	; 0x3c
    a534:	000b      	movs	r3, r1
    a536:	00db      	lsls	r3, r3, #3
    a538:	63bb      	str	r3, [r7, #56]	; 0x38
    a53a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a53c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a53e:	001a      	movs	r2, r3
    a540:	0023      	movs	r3, r4
    a542:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    a544:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    a546:	4c16      	ldr	r4, [pc, #88]	; (a5a0 <_sercom_get_async_baud_val+0x1bc>)
    a548:	47a0      	blx	r4
    a54a:	0003      	movs	r3, r0
    a54c:	000c      	movs	r4, r1
    a54e:	65bb      	str	r3, [r7, #88]	; 0x58
    a550:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    a552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a554:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    a556:	b2d9      	uxtb	r1, r3
    a558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a55a:	b2db      	uxtb	r3, r3
    a55c:	00db      	lsls	r3, r3, #3
    a55e:	b2da      	uxtb	r2, r3
    a560:	2317      	movs	r3, #23
    a562:	2040      	movs	r0, #64	; 0x40
    a564:	4684      	mov	ip, r0
    a566:	44bc      	add	ip, r7
    a568:	4463      	add	r3, ip
    a56a:	1a8a      	subs	r2, r1, r2
    a56c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    a56e:	2317      	movs	r3, #23
    a570:	2240      	movs	r2, #64	; 0x40
    a572:	4694      	mov	ip, r2
    a574:	44bc      	add	ip, r7
    a576:	4463      	add	r3, ip
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	035b      	lsls	r3, r3, #13
    a57c:	001a      	movs	r2, r3
    a57e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    a580:	4313      	orrs	r3, r2
    a582:	67bb      	str	r3, [r7, #120]	; 0x78
    a584:	2300      	movs	r3, #0
    a586:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    a588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    a58a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    a58c:	b29a      	uxth	r2, r3
    a58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a590:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    a592:	2300      	movs	r3, #0
}
    a594:	0018      	movs	r0, r3
    a596:	46bd      	mov	sp, r7
    a598:	b021      	add	sp, #132	; 0x84
    a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a59c:	000116c5 	.word	0x000116c5
    a5a0:	0000a287 	.word	0x0000a287

0000a5a4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    a5a4:	b580      	push	{r7, lr}
    a5a6:	b084      	sub	sp, #16
    a5a8:	af00      	add	r7, sp, #0
    a5aa:	0002      	movs	r2, r0
    a5ac:	1dfb      	adds	r3, r7, #7
    a5ae:	701a      	strb	r2, [r3, #0]
    a5b0:	1dbb      	adds	r3, r7, #6
    a5b2:	1c0a      	adds	r2, r1, #0
    a5b4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    a5b6:	4b1a      	ldr	r3, [pc, #104]	; (a620 <sercom_set_gclk_generator+0x7c>)
    a5b8:	781b      	ldrb	r3, [r3, #0]
    a5ba:	2201      	movs	r2, #1
    a5bc:	4053      	eors	r3, r2
    a5be:	b2db      	uxtb	r3, r3
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d103      	bne.n	a5cc <sercom_set_gclk_generator+0x28>
    a5c4:	1dbb      	adds	r3, r7, #6
    a5c6:	781b      	ldrb	r3, [r3, #0]
    a5c8:	2b00      	cmp	r3, #0
    a5ca:	d01b      	beq.n	a604 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a5cc:	230c      	movs	r3, #12
    a5ce:	18fb      	adds	r3, r7, r3
    a5d0:	0018      	movs	r0, r3
    a5d2:	4b14      	ldr	r3, [pc, #80]	; (a624 <sercom_set_gclk_generator+0x80>)
    a5d4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    a5d6:	230c      	movs	r3, #12
    a5d8:	18fb      	adds	r3, r7, r3
    a5da:	1dfa      	adds	r2, r7, #7
    a5dc:	7812      	ldrb	r2, [r2, #0]
    a5de:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    a5e0:	230c      	movs	r3, #12
    a5e2:	18fb      	adds	r3, r7, r3
    a5e4:	0019      	movs	r1, r3
    a5e6:	2013      	movs	r0, #19
    a5e8:	4b0f      	ldr	r3, [pc, #60]	; (a628 <sercom_set_gclk_generator+0x84>)
    a5ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    a5ec:	2013      	movs	r0, #19
    a5ee:	4b0f      	ldr	r3, [pc, #60]	; (a62c <sercom_set_gclk_generator+0x88>)
    a5f0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    a5f2:	4b0b      	ldr	r3, [pc, #44]	; (a620 <sercom_set_gclk_generator+0x7c>)
    a5f4:	1dfa      	adds	r2, r7, #7
    a5f6:	7812      	ldrb	r2, [r2, #0]
    a5f8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    a5fa:	4b09      	ldr	r3, [pc, #36]	; (a620 <sercom_set_gclk_generator+0x7c>)
    a5fc:	2201      	movs	r2, #1
    a5fe:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    a600:	2300      	movs	r3, #0
    a602:	e008      	b.n	a616 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    a604:	4b06      	ldr	r3, [pc, #24]	; (a620 <sercom_set_gclk_generator+0x7c>)
    a606:	785b      	ldrb	r3, [r3, #1]
    a608:	1dfa      	adds	r2, r7, #7
    a60a:	7812      	ldrb	r2, [r2, #0]
    a60c:	429a      	cmp	r2, r3
    a60e:	d101      	bne.n	a614 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    a610:	2300      	movs	r3, #0
    a612:	e000      	b.n	a616 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    a614:	231d      	movs	r3, #29
}
    a616:	0018      	movs	r0, r3
    a618:	46bd      	mov	sp, r7
    a61a:	b004      	add	sp, #16
    a61c:	bd80      	pop	{r7, pc}
    a61e:	46c0      	nop			; (mov r8, r8)
    a620:	20000260 	.word	0x20000260
    a624:	0000a271 	.word	0x0000a271
    a628:	0000c419 	.word	0x0000c419
    a62c:	0000c45d 	.word	0x0000c45d

0000a630 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    a630:	b580      	push	{r7, lr}
    a632:	b082      	sub	sp, #8
    a634:	af00      	add	r7, sp, #0
    a636:	6078      	str	r0, [r7, #4]
    a638:	000a      	movs	r2, r1
    a63a:	1cfb      	adds	r3, r7, #3
    a63c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    a63e:	687b      	ldr	r3, [r7, #4]
    a640:	4a4d      	ldr	r2, [pc, #308]	; (a778 <_sercom_get_default_pad+0x148>)
    a642:	4293      	cmp	r3, r2
    a644:	d03f      	beq.n	a6c6 <_sercom_get_default_pad+0x96>
    a646:	4a4c      	ldr	r2, [pc, #304]	; (a778 <_sercom_get_default_pad+0x148>)
    a648:	4293      	cmp	r3, r2
    a64a:	d806      	bhi.n	a65a <_sercom_get_default_pad+0x2a>
    a64c:	4a4b      	ldr	r2, [pc, #300]	; (a77c <_sercom_get_default_pad+0x14c>)
    a64e:	4293      	cmp	r3, r2
    a650:	d00f      	beq.n	a672 <_sercom_get_default_pad+0x42>
    a652:	4a4b      	ldr	r2, [pc, #300]	; (a780 <_sercom_get_default_pad+0x150>)
    a654:	4293      	cmp	r3, r2
    a656:	d021      	beq.n	a69c <_sercom_get_default_pad+0x6c>
    a658:	e089      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a65a:	4a4a      	ldr	r2, [pc, #296]	; (a784 <_sercom_get_default_pad+0x154>)
    a65c:	4293      	cmp	r3, r2
    a65e:	d100      	bne.n	a662 <_sercom_get_default_pad+0x32>
    a660:	e05b      	b.n	a71a <_sercom_get_default_pad+0xea>
    a662:	4a49      	ldr	r2, [pc, #292]	; (a788 <_sercom_get_default_pad+0x158>)
    a664:	4293      	cmp	r3, r2
    a666:	d100      	bne.n	a66a <_sercom_get_default_pad+0x3a>
    a668:	e06c      	b.n	a744 <_sercom_get_default_pad+0x114>
    a66a:	4a48      	ldr	r2, [pc, #288]	; (a78c <_sercom_get_default_pad+0x15c>)
    a66c:	4293      	cmp	r3, r2
    a66e:	d03f      	beq.n	a6f0 <_sercom_get_default_pad+0xc0>
    a670:	e07d      	b.n	a76e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a672:	1cfb      	adds	r3, r7, #3
    a674:	781b      	ldrb	r3, [r3, #0]
    a676:	2b01      	cmp	r3, #1
    a678:	d00a      	beq.n	a690 <_sercom_get_default_pad+0x60>
    a67a:	dc02      	bgt.n	a682 <_sercom_get_default_pad+0x52>
    a67c:	2b00      	cmp	r3, #0
    a67e:	d005      	beq.n	a68c <_sercom_get_default_pad+0x5c>
    a680:	e075      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a682:	2b02      	cmp	r3, #2
    a684:	d006      	beq.n	a694 <_sercom_get_default_pad+0x64>
    a686:	2b03      	cmp	r3, #3
    a688:	d006      	beq.n	a698 <_sercom_get_default_pad+0x68>
    a68a:	e070      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a68c:	4b40      	ldr	r3, [pc, #256]	; (a790 <_sercom_get_default_pad+0x160>)
    a68e:	e06f      	b.n	a770 <_sercom_get_default_pad+0x140>
    a690:	4b40      	ldr	r3, [pc, #256]	; (a794 <_sercom_get_default_pad+0x164>)
    a692:	e06d      	b.n	a770 <_sercom_get_default_pad+0x140>
    a694:	4b40      	ldr	r3, [pc, #256]	; (a798 <_sercom_get_default_pad+0x168>)
    a696:	e06b      	b.n	a770 <_sercom_get_default_pad+0x140>
    a698:	4b40      	ldr	r3, [pc, #256]	; (a79c <_sercom_get_default_pad+0x16c>)
    a69a:	e069      	b.n	a770 <_sercom_get_default_pad+0x140>
    a69c:	1cfb      	adds	r3, r7, #3
    a69e:	781b      	ldrb	r3, [r3, #0]
    a6a0:	2b01      	cmp	r3, #1
    a6a2:	d00a      	beq.n	a6ba <_sercom_get_default_pad+0x8a>
    a6a4:	dc02      	bgt.n	a6ac <_sercom_get_default_pad+0x7c>
    a6a6:	2b00      	cmp	r3, #0
    a6a8:	d005      	beq.n	a6b6 <_sercom_get_default_pad+0x86>
    a6aa:	e060      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a6ac:	2b02      	cmp	r3, #2
    a6ae:	d006      	beq.n	a6be <_sercom_get_default_pad+0x8e>
    a6b0:	2b03      	cmp	r3, #3
    a6b2:	d006      	beq.n	a6c2 <_sercom_get_default_pad+0x92>
    a6b4:	e05b      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a6b6:	2303      	movs	r3, #3
    a6b8:	e05a      	b.n	a770 <_sercom_get_default_pad+0x140>
    a6ba:	4b39      	ldr	r3, [pc, #228]	; (a7a0 <_sercom_get_default_pad+0x170>)
    a6bc:	e058      	b.n	a770 <_sercom_get_default_pad+0x140>
    a6be:	4b39      	ldr	r3, [pc, #228]	; (a7a4 <_sercom_get_default_pad+0x174>)
    a6c0:	e056      	b.n	a770 <_sercom_get_default_pad+0x140>
    a6c2:	4b39      	ldr	r3, [pc, #228]	; (a7a8 <_sercom_get_default_pad+0x178>)
    a6c4:	e054      	b.n	a770 <_sercom_get_default_pad+0x140>
    a6c6:	1cfb      	adds	r3, r7, #3
    a6c8:	781b      	ldrb	r3, [r3, #0]
    a6ca:	2b01      	cmp	r3, #1
    a6cc:	d00a      	beq.n	a6e4 <_sercom_get_default_pad+0xb4>
    a6ce:	dc02      	bgt.n	a6d6 <_sercom_get_default_pad+0xa6>
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d005      	beq.n	a6e0 <_sercom_get_default_pad+0xb0>
    a6d4:	e04b      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a6d6:	2b02      	cmp	r3, #2
    a6d8:	d006      	beq.n	a6e8 <_sercom_get_default_pad+0xb8>
    a6da:	2b03      	cmp	r3, #3
    a6dc:	d006      	beq.n	a6ec <_sercom_get_default_pad+0xbc>
    a6de:	e046      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a6e0:	4b32      	ldr	r3, [pc, #200]	; (a7ac <_sercom_get_default_pad+0x17c>)
    a6e2:	e045      	b.n	a770 <_sercom_get_default_pad+0x140>
    a6e4:	4b32      	ldr	r3, [pc, #200]	; (a7b0 <_sercom_get_default_pad+0x180>)
    a6e6:	e043      	b.n	a770 <_sercom_get_default_pad+0x140>
    a6e8:	4b32      	ldr	r3, [pc, #200]	; (a7b4 <_sercom_get_default_pad+0x184>)
    a6ea:	e041      	b.n	a770 <_sercom_get_default_pad+0x140>
    a6ec:	4b32      	ldr	r3, [pc, #200]	; (a7b8 <_sercom_get_default_pad+0x188>)
    a6ee:	e03f      	b.n	a770 <_sercom_get_default_pad+0x140>
    a6f0:	1cfb      	adds	r3, r7, #3
    a6f2:	781b      	ldrb	r3, [r3, #0]
    a6f4:	2b01      	cmp	r3, #1
    a6f6:	d00a      	beq.n	a70e <_sercom_get_default_pad+0xde>
    a6f8:	dc02      	bgt.n	a700 <_sercom_get_default_pad+0xd0>
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d005      	beq.n	a70a <_sercom_get_default_pad+0xda>
    a6fe:	e036      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a700:	2b02      	cmp	r3, #2
    a702:	d006      	beq.n	a712 <_sercom_get_default_pad+0xe2>
    a704:	2b03      	cmp	r3, #3
    a706:	d006      	beq.n	a716 <_sercom_get_default_pad+0xe6>
    a708:	e031      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a70a:	4b2c      	ldr	r3, [pc, #176]	; (a7bc <_sercom_get_default_pad+0x18c>)
    a70c:	e030      	b.n	a770 <_sercom_get_default_pad+0x140>
    a70e:	4b2c      	ldr	r3, [pc, #176]	; (a7c0 <_sercom_get_default_pad+0x190>)
    a710:	e02e      	b.n	a770 <_sercom_get_default_pad+0x140>
    a712:	4b2c      	ldr	r3, [pc, #176]	; (a7c4 <_sercom_get_default_pad+0x194>)
    a714:	e02c      	b.n	a770 <_sercom_get_default_pad+0x140>
    a716:	4b2c      	ldr	r3, [pc, #176]	; (a7c8 <_sercom_get_default_pad+0x198>)
    a718:	e02a      	b.n	a770 <_sercom_get_default_pad+0x140>
    a71a:	1cfb      	adds	r3, r7, #3
    a71c:	781b      	ldrb	r3, [r3, #0]
    a71e:	2b01      	cmp	r3, #1
    a720:	d00a      	beq.n	a738 <_sercom_get_default_pad+0x108>
    a722:	dc02      	bgt.n	a72a <_sercom_get_default_pad+0xfa>
    a724:	2b00      	cmp	r3, #0
    a726:	d005      	beq.n	a734 <_sercom_get_default_pad+0x104>
    a728:	e021      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a72a:	2b02      	cmp	r3, #2
    a72c:	d006      	beq.n	a73c <_sercom_get_default_pad+0x10c>
    a72e:	2b03      	cmp	r3, #3
    a730:	d006      	beq.n	a740 <_sercom_get_default_pad+0x110>
    a732:	e01c      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a734:	4b25      	ldr	r3, [pc, #148]	; (a7cc <_sercom_get_default_pad+0x19c>)
    a736:	e01b      	b.n	a770 <_sercom_get_default_pad+0x140>
    a738:	4b25      	ldr	r3, [pc, #148]	; (a7d0 <_sercom_get_default_pad+0x1a0>)
    a73a:	e019      	b.n	a770 <_sercom_get_default_pad+0x140>
    a73c:	4b25      	ldr	r3, [pc, #148]	; (a7d4 <_sercom_get_default_pad+0x1a4>)
    a73e:	e017      	b.n	a770 <_sercom_get_default_pad+0x140>
    a740:	4b25      	ldr	r3, [pc, #148]	; (a7d8 <_sercom_get_default_pad+0x1a8>)
    a742:	e015      	b.n	a770 <_sercom_get_default_pad+0x140>
    a744:	1cfb      	adds	r3, r7, #3
    a746:	781b      	ldrb	r3, [r3, #0]
    a748:	2b01      	cmp	r3, #1
    a74a:	d00a      	beq.n	a762 <_sercom_get_default_pad+0x132>
    a74c:	dc02      	bgt.n	a754 <_sercom_get_default_pad+0x124>
    a74e:	2b00      	cmp	r3, #0
    a750:	d005      	beq.n	a75e <_sercom_get_default_pad+0x12e>
    a752:	e00c      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a754:	2b02      	cmp	r3, #2
    a756:	d006      	beq.n	a766 <_sercom_get_default_pad+0x136>
    a758:	2b03      	cmp	r3, #3
    a75a:	d006      	beq.n	a76a <_sercom_get_default_pad+0x13a>
    a75c:	e007      	b.n	a76e <_sercom_get_default_pad+0x13e>
    a75e:	4b1f      	ldr	r3, [pc, #124]	; (a7dc <_sercom_get_default_pad+0x1ac>)
    a760:	e006      	b.n	a770 <_sercom_get_default_pad+0x140>
    a762:	4b1f      	ldr	r3, [pc, #124]	; (a7e0 <_sercom_get_default_pad+0x1b0>)
    a764:	e004      	b.n	a770 <_sercom_get_default_pad+0x140>
    a766:	4b1f      	ldr	r3, [pc, #124]	; (a7e4 <_sercom_get_default_pad+0x1b4>)
    a768:	e002      	b.n	a770 <_sercom_get_default_pad+0x140>
    a76a:	4b1f      	ldr	r3, [pc, #124]	; (a7e8 <_sercom_get_default_pad+0x1b8>)
    a76c:	e000      	b.n	a770 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    a76e:	2300      	movs	r3, #0
}
    a770:	0018      	movs	r0, r3
    a772:	46bd      	mov	sp, r7
    a774:	b002      	add	sp, #8
    a776:	bd80      	pop	{r7, pc}
    a778:	42001000 	.word	0x42001000
    a77c:	42000800 	.word	0x42000800
    a780:	42000c00 	.word	0x42000c00
    a784:	42001800 	.word	0x42001800
    a788:	42001c00 	.word	0x42001c00
    a78c:	42001400 	.word	0x42001400
    a790:	00040003 	.word	0x00040003
    a794:	00050003 	.word	0x00050003
    a798:	00060003 	.word	0x00060003
    a79c:	00070003 	.word	0x00070003
    a7a0:	00010003 	.word	0x00010003
    a7a4:	001e0003 	.word	0x001e0003
    a7a8:	001f0003 	.word	0x001f0003
    a7ac:	00080003 	.word	0x00080003
    a7b0:	00090003 	.word	0x00090003
    a7b4:	000a0003 	.word	0x000a0003
    a7b8:	000b0003 	.word	0x000b0003
    a7bc:	00100003 	.word	0x00100003
    a7c0:	00110003 	.word	0x00110003
    a7c4:	00120003 	.word	0x00120003
    a7c8:	00130003 	.word	0x00130003
    a7cc:	000c0003 	.word	0x000c0003
    a7d0:	000d0003 	.word	0x000d0003
    a7d4:	000e0003 	.word	0x000e0003
    a7d8:	000f0003 	.word	0x000f0003
    a7dc:	00160003 	.word	0x00160003
    a7e0:	00170003 	.word	0x00170003
    a7e4:	00180003 	.word	0x00180003
    a7e8:	00190003 	.word	0x00190003

0000a7ec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    a7ec:	b590      	push	{r4, r7, lr}
    a7ee:	b08b      	sub	sp, #44	; 0x2c
    a7f0:	af00      	add	r7, sp, #0
    a7f2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    a7f4:	230c      	movs	r3, #12
    a7f6:	18fb      	adds	r3, r7, r3
    a7f8:	4a0f      	ldr	r2, [pc, #60]	; (a838 <_sercom_get_sercom_inst_index+0x4c>)
    a7fa:	ca13      	ldmia	r2!, {r0, r1, r4}
    a7fc:	c313      	stmia	r3!, {r0, r1, r4}
    a7fe:	ca13      	ldmia	r2!, {r0, r1, r4}
    a800:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a802:	2300      	movs	r3, #0
    a804:	627b      	str	r3, [r7, #36]	; 0x24
    a806:	e00e      	b.n	a826 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    a808:	230c      	movs	r3, #12
    a80a:	18fb      	adds	r3, r7, r3
    a80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a80e:	0092      	lsls	r2, r2, #2
    a810:	58d3      	ldr	r3, [r2, r3]
    a812:	001a      	movs	r2, r3
    a814:	687b      	ldr	r3, [r7, #4]
    a816:	429a      	cmp	r2, r3
    a818:	d102      	bne.n	a820 <_sercom_get_sercom_inst_index+0x34>
			return i;
    a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a81c:	b2db      	uxtb	r3, r3
    a81e:	e006      	b.n	a82e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a822:	3301      	adds	r3, #1
    a824:	627b      	str	r3, [r7, #36]	; 0x24
    a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a828:	2b05      	cmp	r3, #5
    a82a:	d9ed      	bls.n	a808 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    a82c:	2300      	movs	r3, #0
}
    a82e:	0018      	movs	r0, r3
    a830:	46bd      	mov	sp, r7
    a832:	b00b      	add	sp, #44	; 0x2c
    a834:	bd90      	pop	{r4, r7, pc}
    a836:	46c0      	nop			; (mov r8, r8)
    a838:	00014e18 	.word	0x00014e18

0000a83c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    a83c:	b580      	push	{r7, lr}
    a83e:	b086      	sub	sp, #24
    a840:	af00      	add	r7, sp, #0
    a842:	60f8      	str	r0, [r7, #12]
    a844:	60b9      	str	r1, [r7, #8]
    a846:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    a848:	2300      	movs	r3, #0
    a84a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    a84c:	68fb      	ldr	r3, [r7, #12]
    a84e:	2b00      	cmp	r3, #0
    a850:	d012      	beq.n	a878 <_read+0x3c>
		return -1;
    a852:	2301      	movs	r3, #1
    a854:	425b      	negs	r3, r3
    a856:	e013      	b.n	a880 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    a858:	4b0b      	ldr	r3, [pc, #44]	; (a888 <_read+0x4c>)
    a85a:	681a      	ldr	r2, [r3, #0]
    a85c:	4b0b      	ldr	r3, [pc, #44]	; (a88c <_read+0x50>)
    a85e:	681b      	ldr	r3, [r3, #0]
    a860:	68b9      	ldr	r1, [r7, #8]
    a862:	0018      	movs	r0, r3
    a864:	4790      	blx	r2
		ptr++;
    a866:	68bb      	ldr	r3, [r7, #8]
    a868:	3301      	adds	r3, #1
    a86a:	60bb      	str	r3, [r7, #8]
		nChars++;
    a86c:	697b      	ldr	r3, [r7, #20]
    a86e:	3301      	adds	r3, #1
    a870:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    a872:	687b      	ldr	r3, [r7, #4]
    a874:	3b01      	subs	r3, #1
    a876:	607b      	str	r3, [r7, #4]
    a878:	687b      	ldr	r3, [r7, #4]
    a87a:	2b00      	cmp	r3, #0
    a87c:	dcec      	bgt.n	a858 <_read+0x1c>
	}
	return nChars;
    a87e:	697b      	ldr	r3, [r7, #20]
}
    a880:	0018      	movs	r0, r3
    a882:	46bd      	mov	sp, r7
    a884:	b006      	add	sp, #24
    a886:	bd80      	pop	{r7, pc}
    a888:	200006ac 	.word	0x200006ac
    a88c:	200006b4 	.word	0x200006b4

0000a890 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    a890:	b580      	push	{r7, lr}
    a892:	b086      	sub	sp, #24
    a894:	af00      	add	r7, sp, #0
    a896:	60f8      	str	r0, [r7, #12]
    a898:	60b9      	str	r1, [r7, #8]
    a89a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    a89c:	2300      	movs	r3, #0
    a89e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    a8a0:	68fb      	ldr	r3, [r7, #12]
    a8a2:	2b01      	cmp	r3, #1
    a8a4:	d01d      	beq.n	a8e2 <_write+0x52>
    a8a6:	68fb      	ldr	r3, [r7, #12]
    a8a8:	2b02      	cmp	r3, #2
    a8aa:	d01a      	beq.n	a8e2 <_write+0x52>
    a8ac:	68fb      	ldr	r3, [r7, #12]
    a8ae:	2b03      	cmp	r3, #3
    a8b0:	d017      	beq.n	a8e2 <_write+0x52>
		return -1;
    a8b2:	2301      	movs	r3, #1
    a8b4:	425b      	negs	r3, r3
    a8b6:	e018      	b.n	a8ea <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    a8b8:	4b0e      	ldr	r3, [pc, #56]	; (a8f4 <_write+0x64>)
    a8ba:	681a      	ldr	r2, [r3, #0]
    a8bc:	4b0e      	ldr	r3, [pc, #56]	; (a8f8 <_write+0x68>)
    a8be:	6818      	ldr	r0, [r3, #0]
    a8c0:	68bb      	ldr	r3, [r7, #8]
    a8c2:	1c59      	adds	r1, r3, #1
    a8c4:	60b9      	str	r1, [r7, #8]
    a8c6:	781b      	ldrb	r3, [r3, #0]
    a8c8:	0019      	movs	r1, r3
    a8ca:	4790      	blx	r2
    a8cc:	1e03      	subs	r3, r0, #0
    a8ce:	da02      	bge.n	a8d6 <_write+0x46>
			return -1;
    a8d0:	2301      	movs	r3, #1
    a8d2:	425b      	negs	r3, r3
    a8d4:	e009      	b.n	a8ea <_write+0x5a>
		}
		++nChars;
    a8d6:	697b      	ldr	r3, [r7, #20]
    a8d8:	3301      	adds	r3, #1
    a8da:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    a8dc:	687b      	ldr	r3, [r7, #4]
    a8de:	3b01      	subs	r3, #1
    a8e0:	607b      	str	r3, [r7, #4]
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d1e7      	bne.n	a8b8 <_write+0x28>
	}
	return nChars;
    a8e8:	697b      	ldr	r3, [r7, #20]
}
    a8ea:	0018      	movs	r0, r3
    a8ec:	46bd      	mov	sp, r7
    a8ee:	b006      	add	sp, #24
    a8f0:	bd80      	pop	{r7, pc}
    a8f2:	46c0      	nop			; (mov r8, r8)
    a8f4:	200006b0 	.word	0x200006b0
    a8f8:	200006b4 	.word	0x200006b4

0000a8fc <system_gclk_chan_get_config_defaults>:
{
    a8fc:	b580      	push	{r7, lr}
    a8fe:	b082      	sub	sp, #8
    a900:	af00      	add	r7, sp, #0
    a902:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a904:	687b      	ldr	r3, [r7, #4]
    a906:	2200      	movs	r2, #0
    a908:	701a      	strb	r2, [r3, #0]
}
    a90a:	46c0      	nop			; (mov r8, r8)
    a90c:	46bd      	mov	sp, r7
    a90e:	b002      	add	sp, #8
    a910:	bd80      	pop	{r7, pc}
	...

0000a914 <system_apb_clock_set_mask>:
{
    a914:	b580      	push	{r7, lr}
    a916:	b082      	sub	sp, #8
    a918:	af00      	add	r7, sp, #0
    a91a:	0002      	movs	r2, r0
    a91c:	6039      	str	r1, [r7, #0]
    a91e:	1dfb      	adds	r3, r7, #7
    a920:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a922:	1dfb      	adds	r3, r7, #7
    a924:	781b      	ldrb	r3, [r3, #0]
    a926:	2b01      	cmp	r3, #1
    a928:	d00a      	beq.n	a940 <system_apb_clock_set_mask+0x2c>
    a92a:	2b02      	cmp	r3, #2
    a92c:	d00f      	beq.n	a94e <system_apb_clock_set_mask+0x3a>
    a92e:	2b00      	cmp	r3, #0
    a930:	d114      	bne.n	a95c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    a932:	4b0e      	ldr	r3, [pc, #56]	; (a96c <system_apb_clock_set_mask+0x58>)
    a934:	4a0d      	ldr	r2, [pc, #52]	; (a96c <system_apb_clock_set_mask+0x58>)
    a936:	6991      	ldr	r1, [r2, #24]
    a938:	683a      	ldr	r2, [r7, #0]
    a93a:	430a      	orrs	r2, r1
    a93c:	619a      	str	r2, [r3, #24]
			break;
    a93e:	e00f      	b.n	a960 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    a940:	4b0a      	ldr	r3, [pc, #40]	; (a96c <system_apb_clock_set_mask+0x58>)
    a942:	4a0a      	ldr	r2, [pc, #40]	; (a96c <system_apb_clock_set_mask+0x58>)
    a944:	69d1      	ldr	r1, [r2, #28]
    a946:	683a      	ldr	r2, [r7, #0]
    a948:	430a      	orrs	r2, r1
    a94a:	61da      	str	r2, [r3, #28]
			break;
    a94c:	e008      	b.n	a960 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    a94e:	4b07      	ldr	r3, [pc, #28]	; (a96c <system_apb_clock_set_mask+0x58>)
    a950:	4a06      	ldr	r2, [pc, #24]	; (a96c <system_apb_clock_set_mask+0x58>)
    a952:	6a11      	ldr	r1, [r2, #32]
    a954:	683a      	ldr	r2, [r7, #0]
    a956:	430a      	orrs	r2, r1
    a958:	621a      	str	r2, [r3, #32]
			break;
    a95a:	e001      	b.n	a960 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    a95c:	2317      	movs	r3, #23
    a95e:	e000      	b.n	a962 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    a960:	2300      	movs	r3, #0
}
    a962:	0018      	movs	r0, r3
    a964:	46bd      	mov	sp, r7
    a966:	b002      	add	sp, #8
    a968:	bd80      	pop	{r7, pc}
    a96a:	46c0      	nop			; (mov r8, r8)
    a96c:	40000400 	.word	0x40000400

0000a970 <system_pinmux_get_config_defaults>:
{
    a970:	b580      	push	{r7, lr}
    a972:	b082      	sub	sp, #8
    a974:	af00      	add	r7, sp, #0
    a976:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a978:	687b      	ldr	r3, [r7, #4]
    a97a:	2280      	movs	r2, #128	; 0x80
    a97c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a97e:	687b      	ldr	r3, [r7, #4]
    a980:	2200      	movs	r2, #0
    a982:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a984:	687b      	ldr	r3, [r7, #4]
    a986:	2201      	movs	r2, #1
    a988:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a98a:	687b      	ldr	r3, [r7, #4]
    a98c:	2200      	movs	r2, #0
    a98e:	70da      	strb	r2, [r3, #3]
}
    a990:	46c0      	nop			; (mov r8, r8)
    a992:	46bd      	mov	sp, r7
    a994:	b002      	add	sp, #8
    a996:	bd80      	pop	{r7, pc}

0000a998 <system_is_debugger_present>:
{
    a998:	b580      	push	{r7, lr}
    a99a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    a99c:	4b05      	ldr	r3, [pc, #20]	; (a9b4 <system_is_debugger_present+0x1c>)
    a99e:	789b      	ldrb	r3, [r3, #2]
    a9a0:	b2db      	uxtb	r3, r3
    a9a2:	001a      	movs	r2, r3
    a9a4:	2302      	movs	r3, #2
    a9a6:	4013      	ands	r3, r2
    a9a8:	1e5a      	subs	r2, r3, #1
    a9aa:	4193      	sbcs	r3, r2
    a9ac:	b2db      	uxtb	r3, r3
}
    a9ae:	0018      	movs	r0, r3
    a9b0:	46bd      	mov	sp, r7
    a9b2:	bd80      	pop	{r7, pc}
    a9b4:	41002000 	.word	0x41002000

0000a9b8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b084      	sub	sp, #16
    a9bc:	af00      	add	r7, sp, #0
    a9be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a9c0:	687b      	ldr	r3, [r7, #4]
    a9c2:	681b      	ldr	r3, [r3, #0]
    a9c4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a9c6:	68fb      	ldr	r3, [r7, #12]
    a9c8:	69db      	ldr	r3, [r3, #28]
    a9ca:	1e5a      	subs	r2, r3, #1
    a9cc:	4193      	sbcs	r3, r2
    a9ce:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a9d0:	0018      	movs	r0, r3
    a9d2:	46bd      	mov	sp, r7
    a9d4:	b004      	add	sp, #16
    a9d6:	bd80      	pop	{r7, pc}

0000a9d8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a9d8:	b580      	push	{r7, lr}
    a9da:	b082      	sub	sp, #8
    a9dc:	af00      	add	r7, sp, #0
    a9de:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    a9e0:	46c0      	nop			; (mov r8, r8)
    a9e2:	687b      	ldr	r3, [r7, #4]
    a9e4:	0018      	movs	r0, r3
    a9e6:	4b04      	ldr	r3, [pc, #16]	; (a9f8 <_usart_wait_for_sync+0x20>)
    a9e8:	4798      	blx	r3
    a9ea:	1e03      	subs	r3, r0, #0
    a9ec:	d1f9      	bne.n	a9e2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a9ee:	46c0      	nop			; (mov r8, r8)
    a9f0:	46bd      	mov	sp, r7
    a9f2:	b002      	add	sp, #8
    a9f4:	bd80      	pop	{r7, pc}
    a9f6:	46c0      	nop			; (mov r8, r8)
    a9f8:	0000a9b9 	.word	0x0000a9b9

0000a9fc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    a9fc:	b5b0      	push	{r4, r5, r7, lr}
    a9fe:	b08c      	sub	sp, #48	; 0x30
    aa00:	af02      	add	r7, sp, #8
    aa02:	6078      	str	r0, [r7, #4]
    aa04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    aa06:	687b      	ldr	r3, [r7, #4]
    aa08:	681b      	ldr	r3, [r3, #0]
    aa0a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    aa0c:	687b      	ldr	r3, [r7, #4]
    aa0e:	681b      	ldr	r3, [r3, #0]
    aa10:	0018      	movs	r0, r3
    aa12:	4bab      	ldr	r3, [pc, #684]	; (acc0 <_usart_set_config+0x2c4>)
    aa14:	4798      	blx	r3
    aa16:	0003      	movs	r3, r0
    aa18:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    aa1a:	697b      	ldr	r3, [r7, #20]
    aa1c:	3314      	adds	r3, #20
    aa1e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    aa20:	2300      	movs	r3, #0
    aa22:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    aa24:	2300      	movs	r3, #0
    aa26:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    aa28:	230a      	movs	r3, #10
    aa2a:	18fb      	adds	r3, r7, r3
    aa2c:	2200      	movs	r2, #0
    aa2e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    aa30:	231f      	movs	r3, #31
    aa32:	18fb      	adds	r3, r7, r3
    aa34:	2200      	movs	r2, #0
    aa36:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    aa38:	231e      	movs	r3, #30
    aa3a:	18fb      	adds	r3, r7, r3
    aa3c:	2210      	movs	r2, #16
    aa3e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    aa40:	683b      	ldr	r3, [r7, #0]
    aa42:	8a1b      	ldrh	r3, [r3, #16]
    aa44:	2280      	movs	r2, #128	; 0x80
    aa46:	01d2      	lsls	r2, r2, #7
    aa48:	4293      	cmp	r3, r2
    aa4a:	d01c      	beq.n	aa86 <_usart_set_config+0x8a>
    aa4c:	2280      	movs	r2, #128	; 0x80
    aa4e:	01d2      	lsls	r2, r2, #7
    aa50:	4293      	cmp	r3, r2
    aa52:	dc06      	bgt.n	aa62 <_usart_set_config+0x66>
    aa54:	2b00      	cmp	r3, #0
    aa56:	d00d      	beq.n	aa74 <_usart_set_config+0x78>
    aa58:	2280      	movs	r2, #128	; 0x80
    aa5a:	0192      	lsls	r2, r2, #6
    aa5c:	4293      	cmp	r3, r2
    aa5e:	d024      	beq.n	aaaa <_usart_set_config+0xae>
    aa60:	e035      	b.n	aace <_usart_set_config+0xd2>
    aa62:	22c0      	movs	r2, #192	; 0xc0
    aa64:	01d2      	lsls	r2, r2, #7
    aa66:	4293      	cmp	r3, r2
    aa68:	d028      	beq.n	aabc <_usart_set_config+0xc0>
    aa6a:	2280      	movs	r2, #128	; 0x80
    aa6c:	0212      	lsls	r2, r2, #8
    aa6e:	4293      	cmp	r3, r2
    aa70:	d012      	beq.n	aa98 <_usart_set_config+0x9c>
    aa72:	e02c      	b.n	aace <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    aa74:	231f      	movs	r3, #31
    aa76:	18fb      	adds	r3, r7, r3
    aa78:	2200      	movs	r2, #0
    aa7a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    aa7c:	231e      	movs	r3, #30
    aa7e:	18fb      	adds	r3, r7, r3
    aa80:	2210      	movs	r2, #16
    aa82:	701a      	strb	r2, [r3, #0]
			break;
    aa84:	e023      	b.n	aace <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    aa86:	231f      	movs	r3, #31
    aa88:	18fb      	adds	r3, r7, r3
    aa8a:	2200      	movs	r2, #0
    aa8c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    aa8e:	231e      	movs	r3, #30
    aa90:	18fb      	adds	r3, r7, r3
    aa92:	2208      	movs	r2, #8
    aa94:	701a      	strb	r2, [r3, #0]
			break;
    aa96:	e01a      	b.n	aace <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    aa98:	231f      	movs	r3, #31
    aa9a:	18fb      	adds	r3, r7, r3
    aa9c:	2200      	movs	r2, #0
    aa9e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    aaa0:	231e      	movs	r3, #30
    aaa2:	18fb      	adds	r3, r7, r3
    aaa4:	2203      	movs	r2, #3
    aaa6:	701a      	strb	r2, [r3, #0]
			break;
    aaa8:	e011      	b.n	aace <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    aaaa:	231f      	movs	r3, #31
    aaac:	18fb      	adds	r3, r7, r3
    aaae:	2201      	movs	r2, #1
    aab0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    aab2:	231e      	movs	r3, #30
    aab4:	18fb      	adds	r3, r7, r3
    aab6:	2210      	movs	r2, #16
    aab8:	701a      	strb	r2, [r3, #0]
			break;
    aaba:	e008      	b.n	aace <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    aabc:	231f      	movs	r3, #31
    aabe:	18fb      	adds	r3, r7, r3
    aac0:	2201      	movs	r2, #1
    aac2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    aac4:	231e      	movs	r3, #30
    aac6:	18fb      	adds	r3, r7, r3
    aac8:	2208      	movs	r2, #8
    aaca:	701a      	strb	r2, [r3, #0]
			break;
    aacc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    aace:	683b      	ldr	r3, [r7, #0]
    aad0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    aad2:	683b      	ldr	r3, [r7, #0]
    aad4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    aad6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    aad8:	683b      	ldr	r3, [r7, #0]
    aada:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    aadc:	4313      	orrs	r3, r2
		config->sample_rate |
    aade:	683a      	ldr	r2, [r7, #0]
    aae0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    aae2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    aae4:	683a      	ldr	r2, [r7, #0]
    aae6:	7e12      	ldrb	r2, [r2, #24]
    aae8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    aaea:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    aaec:	683a      	ldr	r2, [r7, #0]
    aaee:	2126      	movs	r1, #38	; 0x26
    aaf0:	5c52      	ldrb	r2, [r2, r1]
    aaf2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    aaf4:	4313      	orrs	r3, r2
    aaf6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    aaf8:	231d      	movs	r3, #29
    aafa:	18fb      	adds	r3, r7, r3
    aafc:	2200      	movs	r2, #0
    aafe:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    ab00:	683b      	ldr	r3, [r7, #0]
    ab02:	685b      	ldr	r3, [r3, #4]
    ab04:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    ab06:	68fb      	ldr	r3, [r7, #12]
    ab08:	2b00      	cmp	r3, #0
    ab0a:	d01e      	beq.n	ab4a <_usart_set_config+0x14e>
    ab0c:	2280      	movs	r2, #128	; 0x80
    ab0e:	0552      	lsls	r2, r2, #21
    ab10:	4293      	cmp	r3, r2
    ab12:	d14f      	bne.n	abb4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    ab14:	683b      	ldr	r3, [r7, #0]
    ab16:	2227      	movs	r2, #39	; 0x27
    ab18:	5c9b      	ldrb	r3, [r3, r2]
    ab1a:	2201      	movs	r2, #1
    ab1c:	4053      	eors	r3, r2
    ab1e:	b2db      	uxtb	r3, r3
    ab20:	2b00      	cmp	r3, #0
    ab22:	d046      	beq.n	abb2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    ab24:	683b      	ldr	r3, [r7, #0]
    ab26:	6a1d      	ldr	r5, [r3, #32]
    ab28:	693b      	ldr	r3, [r7, #16]
    ab2a:	b2db      	uxtb	r3, r3
    ab2c:	0018      	movs	r0, r3
    ab2e:	4b65      	ldr	r3, [pc, #404]	; (acc4 <_usart_set_config+0x2c8>)
    ab30:	4798      	blx	r3
    ab32:	0001      	movs	r1, r0
    ab34:	231d      	movs	r3, #29
    ab36:	18fc      	adds	r4, r7, r3
    ab38:	230a      	movs	r3, #10
    ab3a:	18fb      	adds	r3, r7, r3
    ab3c:	001a      	movs	r2, r3
    ab3e:	0028      	movs	r0, r5
    ab40:	4b61      	ldr	r3, [pc, #388]	; (acc8 <_usart_set_config+0x2cc>)
    ab42:	4798      	blx	r3
    ab44:	0003      	movs	r3, r0
    ab46:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    ab48:	e033      	b.n	abb2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    ab4a:	683b      	ldr	r3, [r7, #0]
    ab4c:	2227      	movs	r2, #39	; 0x27
    ab4e:	5c9b      	ldrb	r3, [r3, r2]
    ab50:	2b00      	cmp	r3, #0
    ab52:	d014      	beq.n	ab7e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    ab54:	683b      	ldr	r3, [r7, #0]
    ab56:	6a18      	ldr	r0, [r3, #32]
    ab58:	683b      	ldr	r3, [r7, #0]
    ab5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    ab5c:	231d      	movs	r3, #29
    ab5e:	18fc      	adds	r4, r7, r3
    ab60:	231f      	movs	r3, #31
    ab62:	18fb      	adds	r3, r7, r3
    ab64:	781d      	ldrb	r5, [r3, #0]
    ab66:	230a      	movs	r3, #10
    ab68:	18fa      	adds	r2, r7, r3
    ab6a:	231e      	movs	r3, #30
    ab6c:	18fb      	adds	r3, r7, r3
    ab6e:	781b      	ldrb	r3, [r3, #0]
    ab70:	9300      	str	r3, [sp, #0]
    ab72:	002b      	movs	r3, r5
    ab74:	4d55      	ldr	r5, [pc, #340]	; (accc <_usart_set_config+0x2d0>)
    ab76:	47a8      	blx	r5
    ab78:	0003      	movs	r3, r0
    ab7a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    ab7c:	e01a      	b.n	abb4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    ab7e:	683b      	ldr	r3, [r7, #0]
    ab80:	6a1d      	ldr	r5, [r3, #32]
    ab82:	693b      	ldr	r3, [r7, #16]
    ab84:	b2db      	uxtb	r3, r3
    ab86:	0018      	movs	r0, r3
    ab88:	4b4e      	ldr	r3, [pc, #312]	; (acc4 <_usart_set_config+0x2c8>)
    ab8a:	4798      	blx	r3
				status_code =
    ab8c:	231d      	movs	r3, #29
    ab8e:	18fc      	adds	r4, r7, r3
    ab90:	231f      	movs	r3, #31
    ab92:	18fb      	adds	r3, r7, r3
    ab94:	7819      	ldrb	r1, [r3, #0]
    ab96:	230a      	movs	r3, #10
    ab98:	18fa      	adds	r2, r7, r3
    ab9a:	231e      	movs	r3, #30
    ab9c:	18fb      	adds	r3, r7, r3
    ab9e:	781b      	ldrb	r3, [r3, #0]
    aba0:	9300      	str	r3, [sp, #0]
    aba2:	000b      	movs	r3, r1
    aba4:	0001      	movs	r1, r0
    aba6:	0028      	movs	r0, r5
    aba8:	4d48      	ldr	r5, [pc, #288]	; (accc <_usart_set_config+0x2d0>)
    abaa:	47a8      	blx	r5
    abac:	0003      	movs	r3, r0
    abae:	7023      	strb	r3, [r4, #0]
			break;
    abb0:	e000      	b.n	abb4 <_usart_set_config+0x1b8>
			break;
    abb2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    abb4:	231d      	movs	r3, #29
    abb6:	18fb      	adds	r3, r7, r3
    abb8:	781b      	ldrb	r3, [r3, #0]
    abba:	2b00      	cmp	r3, #0
    abbc:	d003      	beq.n	abc6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    abbe:	231d      	movs	r3, #29
    abc0:	18fb      	adds	r3, r7, r3
    abc2:	781b      	ldrb	r3, [r3, #0]
    abc4:	e077      	b.n	acb6 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    abc6:	683b      	ldr	r3, [r7, #0]
    abc8:	7e5b      	ldrb	r3, [r3, #25]
    abca:	2b00      	cmp	r3, #0
    abcc:	d003      	beq.n	abd6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    abce:	683b      	ldr	r3, [r7, #0]
    abd0:	7e9a      	ldrb	r2, [r3, #26]
    abd2:	69bb      	ldr	r3, [r7, #24]
    abd4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    abd6:	687b      	ldr	r3, [r7, #4]
    abd8:	0018      	movs	r0, r3
    abda:	4b3d      	ldr	r3, [pc, #244]	; (acd0 <_usart_set_config+0x2d4>)
    abdc:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    abde:	230a      	movs	r3, #10
    abe0:	18fb      	adds	r3, r7, r3
    abe2:	881a      	ldrh	r2, [r3, #0]
    abe4:	69bb      	ldr	r3, [r7, #24]
    abe6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    abe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    abea:	68fb      	ldr	r3, [r7, #12]
    abec:	4313      	orrs	r3, r2
    abee:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    abf0:	683b      	ldr	r3, [r7, #0]
    abf2:	2227      	movs	r2, #39	; 0x27
    abf4:	5c9b      	ldrb	r3, [r3, r2]
    abf6:	2201      	movs	r2, #1
    abf8:	4053      	eors	r3, r2
    abfa:	b2db      	uxtb	r3, r3
    abfc:	2b00      	cmp	r3, #0
    abfe:	d003      	beq.n	ac08 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac02:	2204      	movs	r2, #4
    ac04:	4313      	orrs	r3, r2
    ac06:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ac08:	683b      	ldr	r3, [r7, #0]
    ac0a:	7e5b      	ldrb	r3, [r3, #25]
    ac0c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ac0e:	683b      	ldr	r3, [r7, #0]
    ac10:	7f1b      	ldrb	r3, [r3, #28]
    ac12:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ac14:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ac16:	683b      	ldr	r3, [r7, #0]
    ac18:	7f5b      	ldrb	r3, [r3, #29]
    ac1a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ac1c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ac1e:	683b      	ldr	r3, [r7, #0]
    ac20:	2124      	movs	r1, #36	; 0x24
    ac22:	5c5b      	ldrb	r3, [r3, r1]
    ac24:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ac26:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    ac28:	683b      	ldr	r3, [r7, #0]
    ac2a:	2125      	movs	r1, #37	; 0x25
    ac2c:	5c5b      	ldrb	r3, [r3, r1]
    ac2e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ac30:	4313      	orrs	r3, r2
	ctrlb =  
    ac32:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    ac34:	683b      	ldr	r3, [r7, #0]
    ac36:	7a9b      	ldrb	r3, [r3, #10]
    ac38:	001a      	movs	r2, r3
    ac3a:	6a3b      	ldr	r3, [r7, #32]
    ac3c:	4313      	orrs	r3, r2
    ac3e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    ac40:	683b      	ldr	r3, [r7, #0]
    ac42:	7adb      	ldrb	r3, [r3, #11]
    ac44:	001a      	movs	r2, r3
    ac46:	6a3b      	ldr	r3, [r7, #32]
    ac48:	4313      	orrs	r3, r2
    ac4a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    ac4c:	683b      	ldr	r3, [r7, #0]
    ac4e:	891b      	ldrh	r3, [r3, #8]
    ac50:	2bff      	cmp	r3, #255	; 0xff
    ac52:	d00b      	beq.n	ac6c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac56:	2280      	movs	r2, #128	; 0x80
    ac58:	0452      	lsls	r2, r2, #17
    ac5a:	4313      	orrs	r3, r2
    ac5c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    ac5e:	683b      	ldr	r3, [r7, #0]
    ac60:	891b      	ldrh	r3, [r3, #8]
    ac62:	001a      	movs	r2, r3
    ac64:	6a3b      	ldr	r3, [r7, #32]
    ac66:	4313      	orrs	r3, r2
    ac68:	623b      	str	r3, [r7, #32]
    ac6a:	e008      	b.n	ac7e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    ac6c:	683b      	ldr	r3, [r7, #0]
    ac6e:	7edb      	ldrb	r3, [r3, #27]
    ac70:	2b00      	cmp	r3, #0
    ac72:	d004      	beq.n	ac7e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac76:	2280      	movs	r2, #128	; 0x80
    ac78:	04d2      	lsls	r2, r2, #19
    ac7a:	4313      	orrs	r3, r2
    ac7c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    ac7e:	683b      	ldr	r3, [r7, #0]
    ac80:	222c      	movs	r2, #44	; 0x2c
    ac82:	5c9b      	ldrb	r3, [r3, r2]
    ac84:	2b00      	cmp	r3, #0
    ac86:	d103      	bne.n	ac90 <_usart_set_config+0x294>
    ac88:	4b12      	ldr	r3, [pc, #72]	; (acd4 <_usart_set_config+0x2d8>)
    ac8a:	4798      	blx	r3
    ac8c:	1e03      	subs	r3, r0, #0
    ac8e:	d003      	beq.n	ac98 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac92:	2280      	movs	r2, #128	; 0x80
    ac94:	4313      	orrs	r3, r2
    ac96:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	0018      	movs	r0, r3
    ac9c:	4b0c      	ldr	r3, [pc, #48]	; (acd0 <_usart_set_config+0x2d4>)
    ac9e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    aca0:	69bb      	ldr	r3, [r7, #24]
    aca2:	6a3a      	ldr	r2, [r7, #32]
    aca4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    aca6:	687b      	ldr	r3, [r7, #4]
    aca8:	0018      	movs	r0, r3
    acaa:	4b09      	ldr	r3, [pc, #36]	; (acd0 <_usart_set_config+0x2d4>)
    acac:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    acae:	69bb      	ldr	r3, [r7, #24]
    acb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    acb2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    acb4:	2300      	movs	r3, #0
}
    acb6:	0018      	movs	r0, r3
    acb8:	46bd      	mov	sp, r7
    acba:	b00a      	add	sp, #40	; 0x28
    acbc:	bdb0      	pop	{r4, r5, r7, pc}
    acbe:	46c0      	nop			; (mov r8, r8)
    acc0:	0000a7ed 	.word	0x0000a7ed
    acc4:	0000c53d 	.word	0x0000c53d
    acc8:	0000a367 	.word	0x0000a367
    accc:	0000a3e5 	.word	0x0000a3e5
    acd0:	0000a9d9 	.word	0x0000a9d9
    acd4:	0000a999 	.word	0x0000a999

0000acd8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    acd8:	b590      	push	{r4, r7, lr}
    acda:	b093      	sub	sp, #76	; 0x4c
    acdc:	af00      	add	r7, sp, #0
    acde:	60f8      	str	r0, [r7, #12]
    ace0:	60b9      	str	r1, [r7, #8]
    ace2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    ace4:	233b      	movs	r3, #59	; 0x3b
    ace6:	18fb      	adds	r3, r7, r3
    ace8:	2200      	movs	r2, #0
    acea:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    acec:	68fb      	ldr	r3, [r7, #12]
    acee:	68ba      	ldr	r2, [r7, #8]
    acf0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    acf2:	68fb      	ldr	r3, [r7, #12]
    acf4:	681b      	ldr	r3, [r3, #0]
    acf6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    acf8:	68fb      	ldr	r3, [r7, #12]
    acfa:	681b      	ldr	r3, [r3, #0]
    acfc:	0018      	movs	r0, r3
    acfe:	4b86      	ldr	r3, [pc, #536]	; (af18 <usart_init+0x240>)
    ad00:	4798      	blx	r3
    ad02:	0003      	movs	r3, r0
    ad04:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad08:	3302      	adds	r3, #2
    ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad0e:	3314      	adds	r3, #20
    ad10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    ad12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ad14:	681b      	ldr	r3, [r3, #0]
    ad16:	2201      	movs	r2, #1
    ad18:	4013      	ands	r3, r2
    ad1a:	d001      	beq.n	ad20 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    ad1c:	2305      	movs	r3, #5
    ad1e:	e0f6      	b.n	af0e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ad22:	681b      	ldr	r3, [r3, #0]
    ad24:	2202      	movs	r2, #2
    ad26:	4013      	ands	r3, r2
    ad28:	d001      	beq.n	ad2e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    ad2a:	231c      	movs	r3, #28
    ad2c:	e0ef      	b.n	af0e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    ad2e:	2201      	movs	r2, #1
    ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad32:	409a      	lsls	r2, r3
    ad34:	0013      	movs	r3, r2
    ad36:	0019      	movs	r1, r3
    ad38:	2002      	movs	r0, #2
    ad3a:	4b78      	ldr	r3, [pc, #480]	; (af1c <usart_init+0x244>)
    ad3c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    ad3e:	2324      	movs	r3, #36	; 0x24
    ad40:	18fb      	adds	r3, r7, r3
    ad42:	0018      	movs	r0, r3
    ad44:	4b76      	ldr	r3, [pc, #472]	; (af20 <usart_init+0x248>)
    ad46:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    ad48:	687b      	ldr	r3, [r7, #4]
    ad4a:	222d      	movs	r2, #45	; 0x2d
    ad4c:	5c9a      	ldrb	r2, [r3, r2]
    ad4e:	2324      	movs	r3, #36	; 0x24
    ad50:	18fb      	adds	r3, r7, r3
    ad52:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ad56:	b2db      	uxtb	r3, r3
    ad58:	2224      	movs	r2, #36	; 0x24
    ad5a:	18ba      	adds	r2, r7, r2
    ad5c:	0011      	movs	r1, r2
    ad5e:	0018      	movs	r0, r3
    ad60:	4b70      	ldr	r3, [pc, #448]	; (af24 <usart_init+0x24c>)
    ad62:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ad66:	b2db      	uxtb	r3, r3
    ad68:	0018      	movs	r0, r3
    ad6a:	4b6f      	ldr	r3, [pc, #444]	; (af28 <usart_init+0x250>)
    ad6c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    ad6e:	687b      	ldr	r3, [r7, #4]
    ad70:	222d      	movs	r2, #45	; 0x2d
    ad72:	5c9b      	ldrb	r3, [r3, r2]
    ad74:	2100      	movs	r1, #0
    ad76:	0018      	movs	r0, r3
    ad78:	4b6c      	ldr	r3, [pc, #432]	; (af2c <usart_init+0x254>)
    ad7a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    ad7c:	687b      	ldr	r3, [r7, #4]
    ad7e:	7ada      	ldrb	r2, [r3, #11]
    ad80:	68fb      	ldr	r3, [r7, #12]
    ad82:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    ad84:	687b      	ldr	r3, [r7, #4]
    ad86:	2224      	movs	r2, #36	; 0x24
    ad88:	5c9a      	ldrb	r2, [r3, r2]
    ad8a:	68fb      	ldr	r3, [r7, #12]
    ad8c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    ad8e:	687b      	ldr	r3, [r7, #4]
    ad90:	2225      	movs	r2, #37	; 0x25
    ad92:	5c9a      	ldrb	r2, [r3, r2]
    ad94:	68fb      	ldr	r3, [r7, #12]
    ad96:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    ad98:	687b      	ldr	r3, [r7, #4]
    ad9a:	7eda      	ldrb	r2, [r3, #27]
    ad9c:	68fb      	ldr	r3, [r7, #12]
    ad9e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    ada0:	687b      	ldr	r3, [r7, #4]
    ada2:	7f1a      	ldrb	r2, [r3, #28]
    ada4:	68fb      	ldr	r3, [r7, #12]
    ada6:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    ada8:	233b      	movs	r3, #59	; 0x3b
    adaa:	18fc      	adds	r4, r7, r3
    adac:	687a      	ldr	r2, [r7, #4]
    adae:	68fb      	ldr	r3, [r7, #12]
    adb0:	0011      	movs	r1, r2
    adb2:	0018      	movs	r0, r3
    adb4:	4b5e      	ldr	r3, [pc, #376]	; (af30 <usart_init+0x258>)
    adb6:	4798      	blx	r3
    adb8:	0003      	movs	r3, r0
    adba:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    adbc:	233b      	movs	r3, #59	; 0x3b
    adbe:	18fb      	adds	r3, r7, r3
    adc0:	781b      	ldrb	r3, [r3, #0]
    adc2:	2b00      	cmp	r3, #0
    adc4:	d003      	beq.n	adce <usart_init+0xf6>
		return status_code;
    adc6:	233b      	movs	r3, #59	; 0x3b
    adc8:	18fb      	adds	r3, r7, r3
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	e09f      	b.n	af0e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    adce:	2320      	movs	r3, #32
    add0:	18fb      	adds	r3, r7, r3
    add2:	0018      	movs	r0, r3
    add4:	4b57      	ldr	r3, [pc, #348]	; (af34 <usart_init+0x25c>)
    add6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    add8:	2320      	movs	r3, #32
    adda:	18fb      	adds	r3, r7, r3
    addc:	2200      	movs	r2, #0
    adde:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    ade0:	2320      	movs	r3, #32
    ade2:	18fb      	adds	r3, r7, r3
    ade4:	2200      	movs	r2, #0
    ade6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    ade8:	687b      	ldr	r3, [r7, #4]
    adea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    adec:	2310      	movs	r3, #16
    adee:	18fb      	adds	r3, r7, r3
    adf0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    adf2:	687b      	ldr	r3, [r7, #4]
    adf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    adf6:	2310      	movs	r3, #16
    adf8:	18fb      	adds	r3, r7, r3
    adfa:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    adfc:	687b      	ldr	r3, [r7, #4]
    adfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    ae00:	2310      	movs	r3, #16
    ae02:	18fb      	adds	r3, r7, r3
    ae04:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    ae06:	687b      	ldr	r3, [r7, #4]
    ae08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    ae0a:	2310      	movs	r3, #16
    ae0c:	18fb      	adds	r3, r7, r3
    ae0e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    ae10:	2347      	movs	r3, #71	; 0x47
    ae12:	18fb      	adds	r3, r7, r3
    ae14:	2200      	movs	r2, #0
    ae16:	701a      	strb	r2, [r3, #0]
    ae18:	e02c      	b.n	ae74 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    ae1a:	2347      	movs	r3, #71	; 0x47
    ae1c:	18fb      	adds	r3, r7, r3
    ae1e:	781a      	ldrb	r2, [r3, #0]
    ae20:	2310      	movs	r3, #16
    ae22:	18fb      	adds	r3, r7, r3
    ae24:	0092      	lsls	r2, r2, #2
    ae26:	58d3      	ldr	r3, [r2, r3]
    ae28:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    ae2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d109      	bne.n	ae44 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    ae30:	2347      	movs	r3, #71	; 0x47
    ae32:	18fb      	adds	r3, r7, r3
    ae34:	781a      	ldrb	r2, [r3, #0]
    ae36:	68bb      	ldr	r3, [r7, #8]
    ae38:	0011      	movs	r1, r2
    ae3a:	0018      	movs	r0, r3
    ae3c:	4b3e      	ldr	r3, [pc, #248]	; (af38 <usart_init+0x260>)
    ae3e:	4798      	blx	r3
    ae40:	0003      	movs	r3, r0
    ae42:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    ae44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ae46:	3301      	adds	r3, #1
    ae48:	d00d      	beq.n	ae66 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    ae4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ae4c:	b2da      	uxtb	r2, r3
    ae4e:	2320      	movs	r3, #32
    ae50:	18fb      	adds	r3, r7, r3
    ae52:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    ae54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ae56:	0c1b      	lsrs	r3, r3, #16
    ae58:	b2db      	uxtb	r3, r3
    ae5a:	2220      	movs	r2, #32
    ae5c:	18ba      	adds	r2, r7, r2
    ae5e:	0011      	movs	r1, r2
    ae60:	0018      	movs	r0, r3
    ae62:	4b36      	ldr	r3, [pc, #216]	; (af3c <usart_init+0x264>)
    ae64:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    ae66:	2347      	movs	r3, #71	; 0x47
    ae68:	18fb      	adds	r3, r7, r3
    ae6a:	781a      	ldrb	r2, [r3, #0]
    ae6c:	2347      	movs	r3, #71	; 0x47
    ae6e:	18fb      	adds	r3, r7, r3
    ae70:	3201      	adds	r2, #1
    ae72:	701a      	strb	r2, [r3, #0]
    ae74:	2347      	movs	r3, #71	; 0x47
    ae76:	18fb      	adds	r3, r7, r3
    ae78:	781b      	ldrb	r3, [r3, #0]
    ae7a:	2b03      	cmp	r3, #3
    ae7c:	d9cd      	bls.n	ae1a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    ae7e:	2300      	movs	r3, #0
    ae80:	63fb      	str	r3, [r7, #60]	; 0x3c
    ae82:	e00a      	b.n	ae9a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    ae84:	68fa      	ldr	r2, [r7, #12]
    ae86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae88:	3302      	adds	r3, #2
    ae8a:	009b      	lsls	r3, r3, #2
    ae8c:	18d3      	adds	r3, r2, r3
    ae8e:	3304      	adds	r3, #4
    ae90:	2200      	movs	r2, #0
    ae92:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    ae94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae96:	3301      	adds	r3, #1
    ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
    ae9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae9c:	2b05      	cmp	r3, #5
    ae9e:	d9f1      	bls.n	ae84 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    aea0:	68fb      	ldr	r3, [r7, #12]
    aea2:	2200      	movs	r2, #0
    aea4:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    aea6:	68fb      	ldr	r3, [r7, #12]
    aea8:	2200      	movs	r2, #0
    aeaa:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    aeac:	68fb      	ldr	r3, [r7, #12]
    aeae:	2200      	movs	r2, #0
    aeb0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    aeb2:	68fb      	ldr	r3, [r7, #12]
    aeb4:	2200      	movs	r2, #0
    aeb6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    aeb8:	68fb      	ldr	r3, [r7, #12]
    aeba:	2230      	movs	r2, #48	; 0x30
    aebc:	2100      	movs	r1, #0
    aebe:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    aec0:	68fb      	ldr	r3, [r7, #12]
    aec2:	2231      	movs	r2, #49	; 0x31
    aec4:	2100      	movs	r1, #0
    aec6:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    aec8:	68fb      	ldr	r3, [r7, #12]
    aeca:	2232      	movs	r2, #50	; 0x32
    aecc:	2100      	movs	r1, #0
    aece:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    aed0:	68fb      	ldr	r3, [r7, #12]
    aed2:	2233      	movs	r2, #51	; 0x33
    aed4:	2100      	movs	r1, #0
    aed6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    aed8:	68fb      	ldr	r3, [r7, #12]
    aeda:	681b      	ldr	r3, [r3, #0]
    aedc:	2227      	movs	r2, #39	; 0x27
    aede:	18bc      	adds	r4, r7, r2
    aee0:	0018      	movs	r0, r3
    aee2:	4b0d      	ldr	r3, [pc, #52]	; (af18 <usart_init+0x240>)
    aee4:	4798      	blx	r3
    aee6:	0003      	movs	r3, r0
    aee8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    aeea:	4a15      	ldr	r2, [pc, #84]	; (af40 <usart_init+0x268>)
    aeec:	2327      	movs	r3, #39	; 0x27
    aeee:	18fb      	adds	r3, r7, r3
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	0011      	movs	r1, r2
    aef4:	0018      	movs	r0, r3
    aef6:	4b13      	ldr	r3, [pc, #76]	; (af44 <usart_init+0x26c>)
    aef8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    aefa:	2327      	movs	r3, #39	; 0x27
    aefc:	18fb      	adds	r3, r7, r3
    aefe:	781a      	ldrb	r2, [r3, #0]
    af00:	4b11      	ldr	r3, [pc, #68]	; (af48 <usart_init+0x270>)
    af02:	0092      	lsls	r2, r2, #2
    af04:	68f9      	ldr	r1, [r7, #12]
    af06:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    af08:	233b      	movs	r3, #59	; 0x3b
    af0a:	18fb      	adds	r3, r7, r3
    af0c:	781b      	ldrb	r3, [r3, #0]
}
    af0e:	0018      	movs	r0, r3
    af10:	46bd      	mov	sp, r7
    af12:	b013      	add	sp, #76	; 0x4c
    af14:	bd90      	pop	{r4, r7, pc}
    af16:	46c0      	nop			; (mov r8, r8)
    af18:	0000a7ed 	.word	0x0000a7ed
    af1c:	0000a915 	.word	0x0000a915
    af20:	0000a8fd 	.word	0x0000a8fd
    af24:	0000c419 	.word	0x0000c419
    af28:	0000c45d 	.word	0x0000c45d
    af2c:	0000a5a5 	.word	0x0000a5a5
    af30:	0000a9fd 	.word	0x0000a9fd
    af34:	0000a971 	.word	0x0000a971
    af38:	0000a631 	.word	0x0000a631
    af3c:	0000c705 	.word	0x0000c705
    af40:	0000b0e1 	.word	0x0000b0e1
    af44:	0000b435 	.word	0x0000b435
    af48:	200006b8 	.word	0x200006b8

0000af4c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    af4c:	b580      	push	{r7, lr}
    af4e:	b084      	sub	sp, #16
    af50:	af00      	add	r7, sp, #0
    af52:	6078      	str	r0, [r7, #4]
    af54:	000a      	movs	r2, r1
    af56:	1cbb      	adds	r3, r7, #2
    af58:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    af5a:	687b      	ldr	r3, [r7, #4]
    af5c:	681b      	ldr	r3, [r3, #0]
    af5e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    af60:	687b      	ldr	r3, [r7, #4]
    af62:	79db      	ldrb	r3, [r3, #7]
    af64:	2201      	movs	r2, #1
    af66:	4053      	eors	r3, r2
    af68:	b2db      	uxtb	r3, r3
    af6a:	2b00      	cmp	r3, #0
    af6c:	d001      	beq.n	af72 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    af6e:	231c      	movs	r3, #28
    af70:	e017      	b.n	afa2 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    af72:	687b      	ldr	r3, [r7, #4]
    af74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    af76:	b29b      	uxth	r3, r3
    af78:	2b00      	cmp	r3, #0
    af7a:	d001      	beq.n	af80 <usart_write_wait+0x34>
		return STATUS_BUSY;
    af7c:	2305      	movs	r3, #5
    af7e:	e010      	b.n	afa2 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    af80:	687b      	ldr	r3, [r7, #4]
    af82:	0018      	movs	r0, r3
    af84:	4b09      	ldr	r3, [pc, #36]	; (afac <usart_write_wait+0x60>)
    af86:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    af88:	68fb      	ldr	r3, [r7, #12]
    af8a:	1cba      	adds	r2, r7, #2
    af8c:	8812      	ldrh	r2, [r2, #0]
    af8e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    af90:	46c0      	nop			; (mov r8, r8)
    af92:	68fb      	ldr	r3, [r7, #12]
    af94:	7e1b      	ldrb	r3, [r3, #24]
    af96:	b2db      	uxtb	r3, r3
    af98:	001a      	movs	r2, r3
    af9a:	2302      	movs	r3, #2
    af9c:	4013      	ands	r3, r2
    af9e:	d0f8      	beq.n	af92 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    afa0:	2300      	movs	r3, #0
}
    afa2:	0018      	movs	r0, r3
    afa4:	46bd      	mov	sp, r7
    afa6:	b004      	add	sp, #16
    afa8:	bd80      	pop	{r7, pc}
    afaa:	46c0      	nop			; (mov r8, r8)
    afac:	0000a9d9 	.word	0x0000a9d9

0000afb0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    afb0:	b580      	push	{r7, lr}
    afb2:	b084      	sub	sp, #16
    afb4:	af00      	add	r7, sp, #0
    afb6:	6078      	str	r0, [r7, #4]
    afb8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    afba:	687b      	ldr	r3, [r7, #4]
    afbc:	681b      	ldr	r3, [r3, #0]
    afbe:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    afc0:	687b      	ldr	r3, [r7, #4]
    afc2:	799b      	ldrb	r3, [r3, #6]
    afc4:	2201      	movs	r2, #1
    afc6:	4053      	eors	r3, r2
    afc8:	b2db      	uxtb	r3, r3
    afca:	2b00      	cmp	r3, #0
    afcc:	d001      	beq.n	afd2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    afce:	231c      	movs	r3, #28
    afd0:	e05e      	b.n	b090 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    afd2:	687b      	ldr	r3, [r7, #4]
    afd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    afd6:	b29b      	uxth	r3, r3
    afd8:	2b00      	cmp	r3, #0
    afda:	d001      	beq.n	afe0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    afdc:	2305      	movs	r3, #5
    afde:	e057      	b.n	b090 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    afe0:	68fb      	ldr	r3, [r7, #12]
    afe2:	7e1b      	ldrb	r3, [r3, #24]
    afe4:	b2db      	uxtb	r3, r3
    afe6:	001a      	movs	r2, r3
    afe8:	2304      	movs	r3, #4
    afea:	4013      	ands	r3, r2
    afec:	d101      	bne.n	aff2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    afee:	2305      	movs	r3, #5
    aff0:	e04e      	b.n	b090 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    aff2:	687b      	ldr	r3, [r7, #4]
    aff4:	0018      	movs	r0, r3
    aff6:	4b28      	ldr	r3, [pc, #160]	; (b098 <usart_read_wait+0xe8>)
    aff8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    affa:	68fb      	ldr	r3, [r7, #12]
    affc:	8b5b      	ldrh	r3, [r3, #26]
    affe:	b29b      	uxth	r3, r3
    b000:	b2da      	uxtb	r2, r3
    b002:	230b      	movs	r3, #11
    b004:	18fb      	adds	r3, r7, r3
    b006:	213f      	movs	r1, #63	; 0x3f
    b008:	400a      	ands	r2, r1
    b00a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    b00c:	230b      	movs	r3, #11
    b00e:	18fb      	adds	r3, r7, r3
    b010:	781b      	ldrb	r3, [r3, #0]
    b012:	2b00      	cmp	r3, #0
    b014:	d036      	beq.n	b084 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    b016:	230b      	movs	r3, #11
    b018:	18fb      	adds	r3, r7, r3
    b01a:	781b      	ldrb	r3, [r3, #0]
    b01c:	2202      	movs	r2, #2
    b01e:	4013      	ands	r3, r2
    b020:	d004      	beq.n	b02c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    b022:	68fb      	ldr	r3, [r7, #12]
    b024:	2202      	movs	r2, #2
    b026:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    b028:	231a      	movs	r3, #26
    b02a:	e031      	b.n	b090 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    b02c:	230b      	movs	r3, #11
    b02e:	18fb      	adds	r3, r7, r3
    b030:	781b      	ldrb	r3, [r3, #0]
    b032:	2204      	movs	r2, #4
    b034:	4013      	ands	r3, r2
    b036:	d004      	beq.n	b042 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    b038:	68fb      	ldr	r3, [r7, #12]
    b03a:	2204      	movs	r2, #4
    b03c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    b03e:	231e      	movs	r3, #30
    b040:	e026      	b.n	b090 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    b042:	230b      	movs	r3, #11
    b044:	18fb      	adds	r3, r7, r3
    b046:	781b      	ldrb	r3, [r3, #0]
    b048:	2201      	movs	r2, #1
    b04a:	4013      	ands	r3, r2
    b04c:	d004      	beq.n	b058 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    b04e:	68fb      	ldr	r3, [r7, #12]
    b050:	2201      	movs	r2, #1
    b052:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    b054:	2313      	movs	r3, #19
    b056:	e01b      	b.n	b090 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    b058:	230b      	movs	r3, #11
    b05a:	18fb      	adds	r3, r7, r3
    b05c:	781b      	ldrb	r3, [r3, #0]
    b05e:	2210      	movs	r2, #16
    b060:	4013      	ands	r3, r2
    b062:	d004      	beq.n	b06e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    b064:	68fb      	ldr	r3, [r7, #12]
    b066:	2210      	movs	r2, #16
    b068:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    b06a:	2342      	movs	r3, #66	; 0x42
    b06c:	e010      	b.n	b090 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    b06e:	230b      	movs	r3, #11
    b070:	18fb      	adds	r3, r7, r3
    b072:	781b      	ldrb	r3, [r3, #0]
    b074:	2220      	movs	r2, #32
    b076:	4013      	ands	r3, r2
    b078:	d004      	beq.n	b084 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    b07a:	68fb      	ldr	r3, [r7, #12]
    b07c:	2220      	movs	r2, #32
    b07e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    b080:	2341      	movs	r3, #65	; 0x41
    b082:	e005      	b.n	b090 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    b084:	68fb      	ldr	r3, [r7, #12]
    b086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b088:	b29a      	uxth	r2, r3
    b08a:	683b      	ldr	r3, [r7, #0]
    b08c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    b08e:	2300      	movs	r3, #0
}
    b090:	0018      	movs	r0, r3
    b092:	46bd      	mov	sp, r7
    b094:	b004      	add	sp, #16
    b096:	bd80      	pop	{r7, pc}
    b098:	0000a9d9 	.word	0x0000a9d9

0000b09c <usart_is_syncing>:
{
    b09c:	b580      	push	{r7, lr}
    b09e:	b084      	sub	sp, #16
    b0a0:	af00      	add	r7, sp, #0
    b0a2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	681b      	ldr	r3, [r3, #0]
    b0a8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    b0aa:	68fb      	ldr	r3, [r7, #12]
    b0ac:	69db      	ldr	r3, [r3, #28]
    b0ae:	1e5a      	subs	r2, r3, #1
    b0b0:	4193      	sbcs	r3, r2
    b0b2:	b2db      	uxtb	r3, r3
}
    b0b4:	0018      	movs	r0, r3
    b0b6:	46bd      	mov	sp, r7
    b0b8:	b004      	add	sp, #16
    b0ba:	bd80      	pop	{r7, pc}

0000b0bc <_usart_wait_for_sync>:
{
    b0bc:	b580      	push	{r7, lr}
    b0be:	b082      	sub	sp, #8
    b0c0:	af00      	add	r7, sp, #0
    b0c2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    b0c4:	46c0      	nop			; (mov r8, r8)
    b0c6:	687b      	ldr	r3, [r7, #4]
    b0c8:	0018      	movs	r0, r3
    b0ca:	4b04      	ldr	r3, [pc, #16]	; (b0dc <_usart_wait_for_sync+0x20>)
    b0cc:	4798      	blx	r3
    b0ce:	1e03      	subs	r3, r0, #0
    b0d0:	d1f9      	bne.n	b0c6 <_usart_wait_for_sync+0xa>
}
    b0d2:	46c0      	nop			; (mov r8, r8)
    b0d4:	46bd      	mov	sp, r7
    b0d6:	b002      	add	sp, #8
    b0d8:	bd80      	pop	{r7, pc}
    b0da:	46c0      	nop			; (mov r8, r8)
    b0dc:	0000b09d 	.word	0x0000b09d

0000b0e0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    b0e0:	b580      	push	{r7, lr}
    b0e2:	b088      	sub	sp, #32
    b0e4:	af00      	add	r7, sp, #0
    b0e6:	0002      	movs	r2, r0
    b0e8:	1dfb      	adds	r3, r7, #7
    b0ea:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    b0ec:	1dfb      	adds	r3, r7, #7
    b0ee:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    b0f0:	4ba3      	ldr	r3, [pc, #652]	; (b380 <_usart_interrupt_handler+0x2a0>)
    b0f2:	0092      	lsls	r2, r2, #2
    b0f4:	58d3      	ldr	r3, [r2, r3]
    b0f6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    b0f8:	69bb      	ldr	r3, [r7, #24]
    b0fa:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    b0fc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    b0fe:	69bb      	ldr	r3, [r7, #24]
    b100:	0018      	movs	r0, r3
    b102:	4ba0      	ldr	r3, [pc, #640]	; (b384 <_usart_interrupt_handler+0x2a4>)
    b104:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    b106:	697b      	ldr	r3, [r7, #20]
    b108:	7e1b      	ldrb	r3, [r3, #24]
    b10a:	b2da      	uxtb	r2, r3
    b10c:	2312      	movs	r3, #18
    b10e:	18fb      	adds	r3, r7, r3
    b110:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    b112:	697b      	ldr	r3, [r7, #20]
    b114:	7d9b      	ldrb	r3, [r3, #22]
    b116:	b2db      	uxtb	r3, r3
    b118:	b29a      	uxth	r2, r3
    b11a:	2312      	movs	r3, #18
    b11c:	18fb      	adds	r3, r7, r3
    b11e:	2112      	movs	r1, #18
    b120:	1879      	adds	r1, r7, r1
    b122:	8809      	ldrh	r1, [r1, #0]
    b124:	400a      	ands	r2, r1
    b126:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    b128:	69bb      	ldr	r3, [r7, #24]
    b12a:	2230      	movs	r2, #48	; 0x30
    b12c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    b12e:	69ba      	ldr	r2, [r7, #24]
    b130:	2131      	movs	r1, #49	; 0x31
    b132:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    b134:	4013      	ands	r3, r2
    b136:	b2da      	uxtb	r2, r3
    b138:	2310      	movs	r3, #16
    b13a:	18fb      	adds	r3, r7, r3
    b13c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    b13e:	2312      	movs	r3, #18
    b140:	18fb      	adds	r3, r7, r3
    b142:	881b      	ldrh	r3, [r3, #0]
    b144:	2201      	movs	r2, #1
    b146:	4013      	ands	r3, r2
    b148:	d044      	beq.n	b1d4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    b14a:	69bb      	ldr	r3, [r7, #24]
    b14c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b14e:	b29b      	uxth	r3, r3
    b150:	2b00      	cmp	r3, #0
    b152:	d03c      	beq.n	b1ce <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    b154:	69bb      	ldr	r3, [r7, #24]
    b156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b158:	781b      	ldrb	r3, [r3, #0]
    b15a:	b2da      	uxtb	r2, r3
    b15c:	231c      	movs	r3, #28
    b15e:	18fb      	adds	r3, r7, r3
    b160:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    b162:	69bb      	ldr	r3, [r7, #24]
    b164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b166:	1c5a      	adds	r2, r3, #1
    b168:	69bb      	ldr	r3, [r7, #24]
    b16a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    b16c:	69bb      	ldr	r3, [r7, #24]
    b16e:	795b      	ldrb	r3, [r3, #5]
    b170:	2b01      	cmp	r3, #1
    b172:	d113      	bne.n	b19c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    b174:	69bb      	ldr	r3, [r7, #24]
    b176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b178:	781b      	ldrb	r3, [r3, #0]
    b17a:	b2db      	uxtb	r3, r3
    b17c:	021b      	lsls	r3, r3, #8
    b17e:	b21a      	sxth	r2, r3
    b180:	231c      	movs	r3, #28
    b182:	18fb      	adds	r3, r7, r3
    b184:	2100      	movs	r1, #0
    b186:	5e5b      	ldrsh	r3, [r3, r1]
    b188:	4313      	orrs	r3, r2
    b18a:	b21a      	sxth	r2, r3
    b18c:	231c      	movs	r3, #28
    b18e:	18fb      	adds	r3, r7, r3
    b190:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    b192:	69bb      	ldr	r3, [r7, #24]
    b194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b196:	1c5a      	adds	r2, r3, #1
    b198:	69bb      	ldr	r3, [r7, #24]
    b19a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    b19c:	231c      	movs	r3, #28
    b19e:	18fb      	adds	r3, r7, r3
    b1a0:	881b      	ldrh	r3, [r3, #0]
    b1a2:	05db      	lsls	r3, r3, #23
    b1a4:	0ddb      	lsrs	r3, r3, #23
    b1a6:	b29a      	uxth	r2, r3
    b1a8:	697b      	ldr	r3, [r7, #20]
    b1aa:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    b1ac:	69bb      	ldr	r3, [r7, #24]
    b1ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b1b0:	b29b      	uxth	r3, r3
    b1b2:	3b01      	subs	r3, #1
    b1b4:	b29b      	uxth	r3, r3
    b1b6:	69ba      	ldr	r2, [r7, #24]
    b1b8:	1c19      	adds	r1, r3, #0
    b1ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
    b1bc:	2b00      	cmp	r3, #0
    b1be:	d109      	bne.n	b1d4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b1c0:	697b      	ldr	r3, [r7, #20]
    b1c2:	2201      	movs	r2, #1
    b1c4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    b1c6:	697b      	ldr	r3, [r7, #20]
    b1c8:	2202      	movs	r2, #2
    b1ca:	759a      	strb	r2, [r3, #22]
    b1cc:	e002      	b.n	b1d4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b1ce:	697b      	ldr	r3, [r7, #20]
    b1d0:	2201      	movs	r2, #1
    b1d2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    b1d4:	2312      	movs	r3, #18
    b1d6:	18fb      	adds	r3, r7, r3
    b1d8:	881b      	ldrh	r3, [r3, #0]
    b1da:	2202      	movs	r2, #2
    b1dc:	4013      	ands	r3, r2
    b1de:	d011      	beq.n	b204 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    b1e0:	697b      	ldr	r3, [r7, #20]
    b1e2:	2202      	movs	r2, #2
    b1e4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    b1e6:	69bb      	ldr	r3, [r7, #24]
    b1e8:	2233      	movs	r2, #51	; 0x33
    b1ea:	2100      	movs	r1, #0
    b1ec:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    b1ee:	2310      	movs	r3, #16
    b1f0:	18fb      	adds	r3, r7, r3
    b1f2:	881b      	ldrh	r3, [r3, #0]
    b1f4:	2201      	movs	r2, #1
    b1f6:	4013      	ands	r3, r2
    b1f8:	d004      	beq.n	b204 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    b1fa:	69bb      	ldr	r3, [r7, #24]
    b1fc:	68db      	ldr	r3, [r3, #12]
    b1fe:	69ba      	ldr	r2, [r7, #24]
    b200:	0010      	movs	r0, r2
    b202:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    b204:	2312      	movs	r3, #18
    b206:	18fb      	adds	r3, r7, r3
    b208:	881b      	ldrh	r3, [r3, #0]
    b20a:	2204      	movs	r2, #4
    b20c:	4013      	ands	r3, r2
    b20e:	d100      	bne.n	b212 <_usart_interrupt_handler+0x132>
    b210:	e0bd      	b.n	b38e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    b212:	69bb      	ldr	r3, [r7, #24]
    b214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b216:	b29b      	uxth	r3, r3
    b218:	2b00      	cmp	r3, #0
    b21a:	d100      	bne.n	b21e <_usart_interrupt_handler+0x13e>
    b21c:	e0b4      	b.n	b388 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    b21e:	697b      	ldr	r3, [r7, #20]
    b220:	8b5b      	ldrh	r3, [r3, #26]
    b222:	b29b      	uxth	r3, r3
    b224:	b2da      	uxtb	r2, r3
    b226:	231f      	movs	r3, #31
    b228:	18fb      	adds	r3, r7, r3
    b22a:	213f      	movs	r1, #63	; 0x3f
    b22c:	400a      	ands	r2, r1
    b22e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    b230:	231f      	movs	r3, #31
    b232:	18fb      	adds	r3, r7, r3
    b234:	781b      	ldrb	r3, [r3, #0]
    b236:	2208      	movs	r2, #8
    b238:	4013      	ands	r3, r2
    b23a:	d007      	beq.n	b24c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    b23c:	231f      	movs	r3, #31
    b23e:	18fb      	adds	r3, r7, r3
    b240:	221f      	movs	r2, #31
    b242:	18ba      	adds	r2, r7, r2
    b244:	7812      	ldrb	r2, [r2, #0]
    b246:	2108      	movs	r1, #8
    b248:	438a      	bics	r2, r1
    b24a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    b24c:	231f      	movs	r3, #31
    b24e:	18fb      	adds	r3, r7, r3
    b250:	781b      	ldrb	r3, [r3, #0]
    b252:	2b00      	cmp	r3, #0
    b254:	d050      	beq.n	b2f8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    b256:	231f      	movs	r3, #31
    b258:	18fb      	adds	r3, r7, r3
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	2202      	movs	r2, #2
    b25e:	4013      	ands	r3, r2
    b260:	d007      	beq.n	b272 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    b262:	69bb      	ldr	r3, [r7, #24]
    b264:	2232      	movs	r2, #50	; 0x32
    b266:	211a      	movs	r1, #26
    b268:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    b26a:	697b      	ldr	r3, [r7, #20]
    b26c:	2202      	movs	r2, #2
    b26e:	835a      	strh	r2, [r3, #26]
    b270:	e036      	b.n	b2e0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    b272:	231f      	movs	r3, #31
    b274:	18fb      	adds	r3, r7, r3
    b276:	781b      	ldrb	r3, [r3, #0]
    b278:	2204      	movs	r2, #4
    b27a:	4013      	ands	r3, r2
    b27c:	d007      	beq.n	b28e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    b27e:	69bb      	ldr	r3, [r7, #24]
    b280:	2232      	movs	r2, #50	; 0x32
    b282:	211e      	movs	r1, #30
    b284:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    b286:	697b      	ldr	r3, [r7, #20]
    b288:	2204      	movs	r2, #4
    b28a:	835a      	strh	r2, [r3, #26]
    b28c:	e028      	b.n	b2e0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    b28e:	231f      	movs	r3, #31
    b290:	18fb      	adds	r3, r7, r3
    b292:	781b      	ldrb	r3, [r3, #0]
    b294:	2201      	movs	r2, #1
    b296:	4013      	ands	r3, r2
    b298:	d007      	beq.n	b2aa <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    b29a:	69bb      	ldr	r3, [r7, #24]
    b29c:	2232      	movs	r2, #50	; 0x32
    b29e:	2113      	movs	r1, #19
    b2a0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    b2a2:	697b      	ldr	r3, [r7, #20]
    b2a4:	2201      	movs	r2, #1
    b2a6:	835a      	strh	r2, [r3, #26]
    b2a8:	e01a      	b.n	b2e0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    b2aa:	231f      	movs	r3, #31
    b2ac:	18fb      	adds	r3, r7, r3
    b2ae:	781b      	ldrb	r3, [r3, #0]
    b2b0:	2210      	movs	r2, #16
    b2b2:	4013      	ands	r3, r2
    b2b4:	d007      	beq.n	b2c6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    b2b6:	69bb      	ldr	r3, [r7, #24]
    b2b8:	2232      	movs	r2, #50	; 0x32
    b2ba:	2142      	movs	r1, #66	; 0x42
    b2bc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    b2be:	697b      	ldr	r3, [r7, #20]
    b2c0:	2210      	movs	r2, #16
    b2c2:	835a      	strh	r2, [r3, #26]
    b2c4:	e00c      	b.n	b2e0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    b2c6:	231f      	movs	r3, #31
    b2c8:	18fb      	adds	r3, r7, r3
    b2ca:	781b      	ldrb	r3, [r3, #0]
    b2cc:	2220      	movs	r2, #32
    b2ce:	4013      	ands	r3, r2
    b2d0:	d006      	beq.n	b2e0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    b2d2:	69bb      	ldr	r3, [r7, #24]
    b2d4:	2232      	movs	r2, #50	; 0x32
    b2d6:	2141      	movs	r1, #65	; 0x41
    b2d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    b2da:	697b      	ldr	r3, [r7, #20]
    b2dc:	2220      	movs	r2, #32
    b2de:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    b2e0:	2310      	movs	r3, #16
    b2e2:	18fb      	adds	r3, r7, r3
    b2e4:	881b      	ldrh	r3, [r3, #0]
    b2e6:	2204      	movs	r2, #4
    b2e8:	4013      	ands	r3, r2
				if (callback_status
    b2ea:	d050      	beq.n	b38e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    b2ec:	69bb      	ldr	r3, [r7, #24]
    b2ee:	695b      	ldr	r3, [r3, #20]
    b2f0:	69ba      	ldr	r2, [r7, #24]
    b2f2:	0010      	movs	r0, r2
    b2f4:	4798      	blx	r3
    b2f6:	e04a      	b.n	b38e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    b2f8:	697b      	ldr	r3, [r7, #20]
    b2fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b2fc:	b29a      	uxth	r2, r3
    b2fe:	230e      	movs	r3, #14
    b300:	18fb      	adds	r3, r7, r3
    b302:	05d2      	lsls	r2, r2, #23
    b304:	0dd2      	lsrs	r2, r2, #23
    b306:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    b308:	69bb      	ldr	r3, [r7, #24]
    b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b30c:	220e      	movs	r2, #14
    b30e:	18ba      	adds	r2, r7, r2
    b310:	8812      	ldrh	r2, [r2, #0]
    b312:	b2d2      	uxtb	r2, r2
    b314:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    b316:	69bb      	ldr	r3, [r7, #24]
    b318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b31a:	1c5a      	adds	r2, r3, #1
    b31c:	69bb      	ldr	r3, [r7, #24]
    b31e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    b320:	69bb      	ldr	r3, [r7, #24]
    b322:	795b      	ldrb	r3, [r3, #5]
    b324:	2b01      	cmp	r3, #1
    b326:	d10d      	bne.n	b344 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    b328:	69bb      	ldr	r3, [r7, #24]
    b32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b32c:	220e      	movs	r2, #14
    b32e:	18ba      	adds	r2, r7, r2
    b330:	8812      	ldrh	r2, [r2, #0]
    b332:	0a12      	lsrs	r2, r2, #8
    b334:	b292      	uxth	r2, r2
    b336:	b2d2      	uxtb	r2, r2
    b338:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    b33a:	69bb      	ldr	r3, [r7, #24]
    b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b33e:	1c5a      	adds	r2, r3, #1
    b340:	69bb      	ldr	r3, [r7, #24]
    b342:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    b344:	69bb      	ldr	r3, [r7, #24]
    b346:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b348:	b29b      	uxth	r3, r3
    b34a:	3b01      	subs	r3, #1
    b34c:	b29b      	uxth	r3, r3
    b34e:	69ba      	ldr	r2, [r7, #24]
    b350:	1c19      	adds	r1, r3, #0
    b352:	8591      	strh	r1, [r2, #44]	; 0x2c
    b354:	2b00      	cmp	r3, #0
    b356:	d11a      	bne.n	b38e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    b358:	697b      	ldr	r3, [r7, #20]
    b35a:	2204      	movs	r2, #4
    b35c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    b35e:	69bb      	ldr	r3, [r7, #24]
    b360:	2232      	movs	r2, #50	; 0x32
    b362:	2100      	movs	r1, #0
    b364:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    b366:	2310      	movs	r3, #16
    b368:	18fb      	adds	r3, r7, r3
    b36a:	881b      	ldrh	r3, [r3, #0]
    b36c:	2202      	movs	r2, #2
    b36e:	4013      	ands	r3, r2
					if (callback_status
    b370:	d00d      	beq.n	b38e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    b372:	69bb      	ldr	r3, [r7, #24]
    b374:	691b      	ldr	r3, [r3, #16]
    b376:	69ba      	ldr	r2, [r7, #24]
    b378:	0010      	movs	r0, r2
    b37a:	4798      	blx	r3
    b37c:	e007      	b.n	b38e <_usart_interrupt_handler+0x2ae>
    b37e:	46c0      	nop			; (mov r8, r8)
    b380:	200006b8 	.word	0x200006b8
    b384:	0000b0bd 	.word	0x0000b0bd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    b388:	697b      	ldr	r3, [r7, #20]
    b38a:	2204      	movs	r2, #4
    b38c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    b38e:	2312      	movs	r3, #18
    b390:	18fb      	adds	r3, r7, r3
    b392:	881b      	ldrh	r3, [r3, #0]
    b394:	2210      	movs	r2, #16
    b396:	4013      	ands	r3, r2
    b398:	d010      	beq.n	b3bc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    b39a:	697b      	ldr	r3, [r7, #20]
    b39c:	2210      	movs	r2, #16
    b39e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    b3a0:	697b      	ldr	r3, [r7, #20]
    b3a2:	2210      	movs	r2, #16
    b3a4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    b3a6:	2310      	movs	r3, #16
    b3a8:	18fb      	adds	r3, r7, r3
    b3aa:	881b      	ldrh	r3, [r3, #0]
    b3ac:	2210      	movs	r2, #16
    b3ae:	4013      	ands	r3, r2
    b3b0:	d004      	beq.n	b3bc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    b3b2:	69bb      	ldr	r3, [r7, #24]
    b3b4:	69db      	ldr	r3, [r3, #28]
    b3b6:	69ba      	ldr	r2, [r7, #24]
    b3b8:	0010      	movs	r0, r2
    b3ba:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    b3bc:	2312      	movs	r3, #18
    b3be:	18fb      	adds	r3, r7, r3
    b3c0:	881b      	ldrh	r3, [r3, #0]
    b3c2:	2220      	movs	r2, #32
    b3c4:	4013      	ands	r3, r2
    b3c6:	d010      	beq.n	b3ea <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    b3c8:	697b      	ldr	r3, [r7, #20]
    b3ca:	2220      	movs	r2, #32
    b3cc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    b3ce:	697b      	ldr	r3, [r7, #20]
    b3d0:	2220      	movs	r2, #32
    b3d2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    b3d4:	2310      	movs	r3, #16
    b3d6:	18fb      	adds	r3, r7, r3
    b3d8:	881b      	ldrh	r3, [r3, #0]
    b3da:	2208      	movs	r2, #8
    b3dc:	4013      	ands	r3, r2
    b3de:	d004      	beq.n	b3ea <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    b3e0:	69bb      	ldr	r3, [r7, #24]
    b3e2:	699b      	ldr	r3, [r3, #24]
    b3e4:	69ba      	ldr	r2, [r7, #24]
    b3e6:	0010      	movs	r0, r2
    b3e8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    b3ea:	2312      	movs	r3, #18
    b3ec:	18fb      	adds	r3, r7, r3
    b3ee:	881b      	ldrh	r3, [r3, #0]
    b3f0:	2208      	movs	r2, #8
    b3f2:	4013      	ands	r3, r2
    b3f4:	d010      	beq.n	b418 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    b3f6:	697b      	ldr	r3, [r7, #20]
    b3f8:	2208      	movs	r2, #8
    b3fa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    b3fc:	697b      	ldr	r3, [r7, #20]
    b3fe:	2208      	movs	r2, #8
    b400:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    b402:	2310      	movs	r3, #16
    b404:	18fb      	adds	r3, r7, r3
    b406:	881b      	ldrh	r3, [r3, #0]
    b408:	2220      	movs	r2, #32
    b40a:	4013      	ands	r3, r2
    b40c:	d004      	beq.n	b418 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    b40e:	69bb      	ldr	r3, [r7, #24]
    b410:	6a1b      	ldr	r3, [r3, #32]
    b412:	69ba      	ldr	r2, [r7, #24]
    b414:	0010      	movs	r0, r2
    b416:	4798      	blx	r3
		}
	}
#endif
}
    b418:	46c0      	nop			; (mov r8, r8)
    b41a:	46bd      	mov	sp, r7
    b41c:	b008      	add	sp, #32
    b41e:	bd80      	pop	{r7, pc}

0000b420 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    b420:	b580      	push	{r7, lr}
    b422:	b082      	sub	sp, #8
    b424:	af00      	add	r7, sp, #0
    b426:	0002      	movs	r2, r0
    b428:	1dfb      	adds	r3, r7, #7
    b42a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    b42c:	46c0      	nop			; (mov r8, r8)
    b42e:	46bd      	mov	sp, r7
    b430:	b002      	add	sp, #8
    b432:	bd80      	pop	{r7, pc}

0000b434 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    b434:	b580      	push	{r7, lr}
    b436:	b084      	sub	sp, #16
    b438:	af00      	add	r7, sp, #0
    b43a:	0002      	movs	r2, r0
    b43c:	6039      	str	r1, [r7, #0]
    b43e:	1dfb      	adds	r3, r7, #7
    b440:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    b442:	4b13      	ldr	r3, [pc, #76]	; (b490 <_sercom_set_handler+0x5c>)
    b444:	781b      	ldrb	r3, [r3, #0]
    b446:	2201      	movs	r2, #1
    b448:	4053      	eors	r3, r2
    b44a:	b2db      	uxtb	r3, r3
    b44c:	2b00      	cmp	r3, #0
    b44e:	d015      	beq.n	b47c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b450:	2300      	movs	r3, #0
    b452:	60fb      	str	r3, [r7, #12]
    b454:	e00c      	b.n	b470 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    b456:	4b0f      	ldr	r3, [pc, #60]	; (b494 <_sercom_set_handler+0x60>)
    b458:	68fa      	ldr	r2, [r7, #12]
    b45a:	0092      	lsls	r2, r2, #2
    b45c:	490e      	ldr	r1, [pc, #56]	; (b498 <_sercom_set_handler+0x64>)
    b45e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    b460:	4b0e      	ldr	r3, [pc, #56]	; (b49c <_sercom_set_handler+0x68>)
    b462:	68fa      	ldr	r2, [r7, #12]
    b464:	0092      	lsls	r2, r2, #2
    b466:	2100      	movs	r1, #0
    b468:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b46a:	68fb      	ldr	r3, [r7, #12]
    b46c:	3301      	adds	r3, #1
    b46e:	60fb      	str	r3, [r7, #12]
    b470:	68fb      	ldr	r3, [r7, #12]
    b472:	2b05      	cmp	r3, #5
    b474:	d9ef      	bls.n	b456 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    b476:	4b06      	ldr	r3, [pc, #24]	; (b490 <_sercom_set_handler+0x5c>)
    b478:	2201      	movs	r2, #1
    b47a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    b47c:	1dfb      	adds	r3, r7, #7
    b47e:	781a      	ldrb	r2, [r3, #0]
    b480:	4b04      	ldr	r3, [pc, #16]	; (b494 <_sercom_set_handler+0x60>)
    b482:	0092      	lsls	r2, r2, #2
    b484:	6839      	ldr	r1, [r7, #0]
    b486:	50d1      	str	r1, [r2, r3]
}
    b488:	46c0      	nop			; (mov r8, r8)
    b48a:	46bd      	mov	sp, r7
    b48c:	b004      	add	sp, #16
    b48e:	bd80      	pop	{r7, pc}
    b490:	20000262 	.word	0x20000262
    b494:	20000264 	.word	0x20000264
    b498:	0000b421 	.word	0x0000b421
    b49c:	200006b8 	.word	0x200006b8

0000b4a0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    b4a0:	b590      	push	{r4, r7, lr}
    b4a2:	b085      	sub	sp, #20
    b4a4:	af00      	add	r7, sp, #0
    b4a6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    b4a8:	2308      	movs	r3, #8
    b4aa:	18fb      	adds	r3, r7, r3
    b4ac:	4a0b      	ldr	r2, [pc, #44]	; (b4dc <_sercom_get_interrupt_vector+0x3c>)
    b4ae:	6811      	ldr	r1, [r2, #0]
    b4b0:	6019      	str	r1, [r3, #0]
    b4b2:	8892      	ldrh	r2, [r2, #4]
    b4b4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    b4b6:	230f      	movs	r3, #15
    b4b8:	18fc      	adds	r4, r7, r3
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	0018      	movs	r0, r3
    b4be:	4b08      	ldr	r3, [pc, #32]	; (b4e0 <_sercom_get_interrupt_vector+0x40>)
    b4c0:	4798      	blx	r3
    b4c2:	0003      	movs	r3, r0
    b4c4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    b4c6:	230f      	movs	r3, #15
    b4c8:	18fb      	adds	r3, r7, r3
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	2208      	movs	r2, #8
    b4ce:	18ba      	adds	r2, r7, r2
    b4d0:	5cd3      	ldrb	r3, [r2, r3]
    b4d2:	b25b      	sxtb	r3, r3
}
    b4d4:	0018      	movs	r0, r3
    b4d6:	46bd      	mov	sp, r7
    b4d8:	b005      	add	sp, #20
    b4da:	bd90      	pop	{r4, r7, pc}
    b4dc:	00014e30 	.word	0x00014e30
    b4e0:	0000a7ed 	.word	0x0000a7ed

0000b4e4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    b4e4:	b580      	push	{r7, lr}
    b4e6:	af00      	add	r7, sp, #0
    b4e8:	4b03      	ldr	r3, [pc, #12]	; (b4f8 <SERCOM0_Handler+0x14>)
    b4ea:	681b      	ldr	r3, [r3, #0]
    b4ec:	2000      	movs	r0, #0
    b4ee:	4798      	blx	r3
    b4f0:	46c0      	nop			; (mov r8, r8)
    b4f2:	46bd      	mov	sp, r7
    b4f4:	bd80      	pop	{r7, pc}
    b4f6:	46c0      	nop			; (mov r8, r8)
    b4f8:	20000264 	.word	0x20000264

0000b4fc <SERCOM1_Handler>:
    b4fc:	b580      	push	{r7, lr}
    b4fe:	af00      	add	r7, sp, #0
    b500:	4b03      	ldr	r3, [pc, #12]	; (b510 <SERCOM1_Handler+0x14>)
    b502:	685b      	ldr	r3, [r3, #4]
    b504:	2001      	movs	r0, #1
    b506:	4798      	blx	r3
    b508:	46c0      	nop			; (mov r8, r8)
    b50a:	46bd      	mov	sp, r7
    b50c:	bd80      	pop	{r7, pc}
    b50e:	46c0      	nop			; (mov r8, r8)
    b510:	20000264 	.word	0x20000264

0000b514 <SERCOM2_Handler>:
    b514:	b580      	push	{r7, lr}
    b516:	af00      	add	r7, sp, #0
    b518:	4b03      	ldr	r3, [pc, #12]	; (b528 <SERCOM2_Handler+0x14>)
    b51a:	689b      	ldr	r3, [r3, #8]
    b51c:	2002      	movs	r0, #2
    b51e:	4798      	blx	r3
    b520:	46c0      	nop			; (mov r8, r8)
    b522:	46bd      	mov	sp, r7
    b524:	bd80      	pop	{r7, pc}
    b526:	46c0      	nop			; (mov r8, r8)
    b528:	20000264 	.word	0x20000264

0000b52c <SERCOM3_Handler>:
    b52c:	b580      	push	{r7, lr}
    b52e:	af00      	add	r7, sp, #0
    b530:	4b03      	ldr	r3, [pc, #12]	; (b540 <SERCOM3_Handler+0x14>)
    b532:	68db      	ldr	r3, [r3, #12]
    b534:	2003      	movs	r0, #3
    b536:	4798      	blx	r3
    b538:	46c0      	nop			; (mov r8, r8)
    b53a:	46bd      	mov	sp, r7
    b53c:	bd80      	pop	{r7, pc}
    b53e:	46c0      	nop			; (mov r8, r8)
    b540:	20000264 	.word	0x20000264

0000b544 <SERCOM4_Handler>:
    b544:	b580      	push	{r7, lr}
    b546:	af00      	add	r7, sp, #0
    b548:	4b03      	ldr	r3, [pc, #12]	; (b558 <SERCOM4_Handler+0x14>)
    b54a:	691b      	ldr	r3, [r3, #16]
    b54c:	2004      	movs	r0, #4
    b54e:	4798      	blx	r3
    b550:	46c0      	nop			; (mov r8, r8)
    b552:	46bd      	mov	sp, r7
    b554:	bd80      	pop	{r7, pc}
    b556:	46c0      	nop			; (mov r8, r8)
    b558:	20000264 	.word	0x20000264

0000b55c <SERCOM5_Handler>:
    b55c:	b580      	push	{r7, lr}
    b55e:	af00      	add	r7, sp, #0
    b560:	4b03      	ldr	r3, [pc, #12]	; (b570 <SERCOM5_Handler+0x14>)
    b562:	695b      	ldr	r3, [r3, #20]
    b564:	2005      	movs	r0, #5
    b566:	4798      	blx	r3
    b568:	46c0      	nop			; (mov r8, r8)
    b56a:	46bd      	mov	sp, r7
    b56c:	bd80      	pop	{r7, pc}
    b56e:	46c0      	nop			; (mov r8, r8)
    b570:	20000264 	.word	0x20000264

0000b574 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    b574:	b580      	push	{r7, lr}
    b576:	b082      	sub	sp, #8
    b578:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    b57a:	4b10      	ldr	r3, [pc, #64]	; (b5bc <cpu_irq_enter_critical+0x48>)
    b57c:	681b      	ldr	r3, [r3, #0]
    b57e:	2b00      	cmp	r3, #0
    b580:	d112      	bne.n	b5a8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b582:	f3ef 8310 	mrs	r3, PRIMASK
    b586:	607b      	str	r3, [r7, #4]
  return(result);
    b588:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    b58a:	2b00      	cmp	r3, #0
    b58c:	d109      	bne.n	b5a2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    b58e:	b672      	cpsid	i
    b590:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    b594:	4b0a      	ldr	r3, [pc, #40]	; (b5c0 <cpu_irq_enter_critical+0x4c>)
    b596:	2200      	movs	r2, #0
    b598:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    b59a:	4b0a      	ldr	r3, [pc, #40]	; (b5c4 <cpu_irq_enter_critical+0x50>)
    b59c:	2201      	movs	r2, #1
    b59e:	701a      	strb	r2, [r3, #0]
    b5a0:	e002      	b.n	b5a8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    b5a2:	4b08      	ldr	r3, [pc, #32]	; (b5c4 <cpu_irq_enter_critical+0x50>)
    b5a4:	2200      	movs	r2, #0
    b5a6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    b5a8:	4b04      	ldr	r3, [pc, #16]	; (b5bc <cpu_irq_enter_critical+0x48>)
    b5aa:	681b      	ldr	r3, [r3, #0]
    b5ac:	1c5a      	adds	r2, r3, #1
    b5ae:	4b03      	ldr	r3, [pc, #12]	; (b5bc <cpu_irq_enter_critical+0x48>)
    b5b0:	601a      	str	r2, [r3, #0]
}
    b5b2:	46c0      	nop			; (mov r8, r8)
    b5b4:	46bd      	mov	sp, r7
    b5b6:	b002      	add	sp, #8
    b5b8:	bd80      	pop	{r7, pc}
    b5ba:	46c0      	nop			; (mov r8, r8)
    b5bc:	2000027c 	.word	0x2000027c
    b5c0:	20000030 	.word	0x20000030
    b5c4:	20000280 	.word	0x20000280

0000b5c8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    b5c8:	b580      	push	{r7, lr}
    b5ca:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    b5cc:	4b0b      	ldr	r3, [pc, #44]	; (b5fc <cpu_irq_leave_critical+0x34>)
    b5ce:	681b      	ldr	r3, [r3, #0]
    b5d0:	1e5a      	subs	r2, r3, #1
    b5d2:	4b0a      	ldr	r3, [pc, #40]	; (b5fc <cpu_irq_leave_critical+0x34>)
    b5d4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    b5d6:	4b09      	ldr	r3, [pc, #36]	; (b5fc <cpu_irq_leave_critical+0x34>)
    b5d8:	681b      	ldr	r3, [r3, #0]
    b5da:	2b00      	cmp	r3, #0
    b5dc:	d10a      	bne.n	b5f4 <cpu_irq_leave_critical+0x2c>
    b5de:	4b08      	ldr	r3, [pc, #32]	; (b600 <cpu_irq_leave_critical+0x38>)
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	b2db      	uxtb	r3, r3
    b5e4:	2b00      	cmp	r3, #0
    b5e6:	d005      	beq.n	b5f4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    b5e8:	4b06      	ldr	r3, [pc, #24]	; (b604 <cpu_irq_leave_critical+0x3c>)
    b5ea:	2201      	movs	r2, #1
    b5ec:	701a      	strb	r2, [r3, #0]
    b5ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b5f2:	b662      	cpsie	i
	}
}
    b5f4:	46c0      	nop			; (mov r8, r8)
    b5f6:	46bd      	mov	sp, r7
    b5f8:	bd80      	pop	{r7, pc}
    b5fa:	46c0      	nop			; (mov r8, r8)
    b5fc:	2000027c 	.word	0x2000027c
    b600:	20000280 	.word	0x20000280
    b604:	20000030 	.word	0x20000030

0000b608 <system_pinmux_get_group_from_gpio_pin>:
{
    b608:	b580      	push	{r7, lr}
    b60a:	b084      	sub	sp, #16
    b60c:	af00      	add	r7, sp, #0
    b60e:	0002      	movs	r2, r0
    b610:	1dfb      	adds	r3, r7, #7
    b612:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b614:	230f      	movs	r3, #15
    b616:	18fb      	adds	r3, r7, r3
    b618:	1dfa      	adds	r2, r7, #7
    b61a:	7812      	ldrb	r2, [r2, #0]
    b61c:	09d2      	lsrs	r2, r2, #7
    b61e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b620:	230e      	movs	r3, #14
    b622:	18fb      	adds	r3, r7, r3
    b624:	1dfa      	adds	r2, r7, #7
    b626:	7812      	ldrb	r2, [r2, #0]
    b628:	0952      	lsrs	r2, r2, #5
    b62a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b62c:	4b0d      	ldr	r3, [pc, #52]	; (b664 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b62e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    b630:	230f      	movs	r3, #15
    b632:	18fb      	adds	r3, r7, r3
    b634:	781b      	ldrb	r3, [r3, #0]
    b636:	2b00      	cmp	r3, #0
    b638:	d10f      	bne.n	b65a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b63a:	230f      	movs	r3, #15
    b63c:	18fb      	adds	r3, r7, r3
    b63e:	781b      	ldrb	r3, [r3, #0]
    b640:	009b      	lsls	r3, r3, #2
    b642:	2210      	movs	r2, #16
    b644:	4694      	mov	ip, r2
    b646:	44bc      	add	ip, r7
    b648:	4463      	add	r3, ip
    b64a:	3b08      	subs	r3, #8
    b64c:	681a      	ldr	r2, [r3, #0]
    b64e:	230e      	movs	r3, #14
    b650:	18fb      	adds	r3, r7, r3
    b652:	781b      	ldrb	r3, [r3, #0]
    b654:	01db      	lsls	r3, r3, #7
    b656:	18d3      	adds	r3, r2, r3
    b658:	e000      	b.n	b65c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    b65a:	2300      	movs	r3, #0
}
    b65c:	0018      	movs	r0, r3
    b65e:	46bd      	mov	sp, r7
    b660:	b004      	add	sp, #16
    b662:	bd80      	pop	{r7, pc}
    b664:	41004400 	.word	0x41004400

0000b668 <port_get_group_from_gpio_pin>:
{
    b668:	b580      	push	{r7, lr}
    b66a:	b082      	sub	sp, #8
    b66c:	af00      	add	r7, sp, #0
    b66e:	0002      	movs	r2, r0
    b670:	1dfb      	adds	r3, r7, #7
    b672:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b674:	1dfb      	adds	r3, r7, #7
    b676:	781b      	ldrb	r3, [r3, #0]
    b678:	0018      	movs	r0, r3
    b67a:	4b03      	ldr	r3, [pc, #12]	; (b688 <port_get_group_from_gpio_pin+0x20>)
    b67c:	4798      	blx	r3
    b67e:	0003      	movs	r3, r0
}
    b680:	0018      	movs	r0, r3
    b682:	46bd      	mov	sp, r7
    b684:	b002      	add	sp, #8
    b686:	bd80      	pop	{r7, pc}
    b688:	0000b609 	.word	0x0000b609

0000b68c <port_get_config_defaults>:
{
    b68c:	b580      	push	{r7, lr}
    b68e:	b082      	sub	sp, #8
    b690:	af00      	add	r7, sp, #0
    b692:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    b694:	687b      	ldr	r3, [r7, #4]
    b696:	2200      	movs	r2, #0
    b698:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b69a:	687b      	ldr	r3, [r7, #4]
    b69c:	2201      	movs	r2, #1
    b69e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    b6a0:	687b      	ldr	r3, [r7, #4]
    b6a2:	2200      	movs	r2, #0
    b6a4:	709a      	strb	r2, [r3, #2]
}
    b6a6:	46c0      	nop			; (mov r8, r8)
    b6a8:	46bd      	mov	sp, r7
    b6aa:	b002      	add	sp, #8
    b6ac:	bd80      	pop	{r7, pc}
	...

0000b6b0 <port_pin_set_output_level>:
{
    b6b0:	b580      	push	{r7, lr}
    b6b2:	b084      	sub	sp, #16
    b6b4:	af00      	add	r7, sp, #0
    b6b6:	0002      	movs	r2, r0
    b6b8:	1dfb      	adds	r3, r7, #7
    b6ba:	701a      	strb	r2, [r3, #0]
    b6bc:	1dbb      	adds	r3, r7, #6
    b6be:	1c0a      	adds	r2, r1, #0
    b6c0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    b6c2:	1dfb      	adds	r3, r7, #7
    b6c4:	781b      	ldrb	r3, [r3, #0]
    b6c6:	0018      	movs	r0, r3
    b6c8:	4b0d      	ldr	r3, [pc, #52]	; (b700 <port_pin_set_output_level+0x50>)
    b6ca:	4798      	blx	r3
    b6cc:	0003      	movs	r3, r0
    b6ce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b6d0:	1dfb      	adds	r3, r7, #7
    b6d2:	781b      	ldrb	r3, [r3, #0]
    b6d4:	221f      	movs	r2, #31
    b6d6:	4013      	ands	r3, r2
    b6d8:	2201      	movs	r2, #1
    b6da:	409a      	lsls	r2, r3
    b6dc:	0013      	movs	r3, r2
    b6de:	60bb      	str	r3, [r7, #8]
	if (level) {
    b6e0:	1dbb      	adds	r3, r7, #6
    b6e2:	781b      	ldrb	r3, [r3, #0]
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d003      	beq.n	b6f0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    b6e8:	68fb      	ldr	r3, [r7, #12]
    b6ea:	68ba      	ldr	r2, [r7, #8]
    b6ec:	619a      	str	r2, [r3, #24]
}
    b6ee:	e002      	b.n	b6f6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    b6f0:	68fb      	ldr	r3, [r7, #12]
    b6f2:	68ba      	ldr	r2, [r7, #8]
    b6f4:	615a      	str	r2, [r3, #20]
}
    b6f6:	46c0      	nop			; (mov r8, r8)
    b6f8:	46bd      	mov	sp, r7
    b6fa:	b004      	add	sp, #16
    b6fc:	bd80      	pop	{r7, pc}
    b6fe:	46c0      	nop			; (mov r8, r8)
    b700:	0000b669 	.word	0x0000b669

0000b704 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    b704:	b580      	push	{r7, lr}
    b706:	b082      	sub	sp, #8
    b708:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    b70a:	1d3b      	adds	r3, r7, #4
    b70c:	0018      	movs	r0, r3
    b70e:	4b0e      	ldr	r3, [pc, #56]	; (b748 <system_board_init+0x44>)
    b710:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b712:	1d3b      	adds	r3, r7, #4
    b714:	2201      	movs	r2, #1
    b716:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    b718:	1d3b      	adds	r3, r7, #4
    b71a:	0019      	movs	r1, r3
    b71c:	2017      	movs	r0, #23
    b71e:	4b0b      	ldr	r3, [pc, #44]	; (b74c <system_board_init+0x48>)
    b720:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    b722:	2101      	movs	r1, #1
    b724:	2017      	movs	r0, #23
    b726:	4b0a      	ldr	r3, [pc, #40]	; (b750 <system_board_init+0x4c>)
    b728:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    b72a:	1d3b      	adds	r3, r7, #4
    b72c:	2200      	movs	r2, #0
    b72e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    b730:	1d3b      	adds	r3, r7, #4
    b732:	2201      	movs	r2, #1
    b734:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    b736:	1d3b      	adds	r3, r7, #4
    b738:	0019      	movs	r1, r3
    b73a:	2037      	movs	r0, #55	; 0x37
    b73c:	4b03      	ldr	r3, [pc, #12]	; (b74c <system_board_init+0x48>)
    b73e:	4798      	blx	r3
}
    b740:	46c0      	nop			; (mov r8, r8)
    b742:	46bd      	mov	sp, r7
    b744:	b002      	add	sp, #8
    b746:	bd80      	pop	{r7, pc}
    b748:	0000b68d 	.word	0x0000b68d
    b74c:	0000b77d 	.word	0x0000b77d
    b750:	0000b6b1 	.word	0x0000b6b1

0000b754 <system_pinmux_get_config_defaults>:
{
    b754:	b580      	push	{r7, lr}
    b756:	b082      	sub	sp, #8
    b758:	af00      	add	r7, sp, #0
    b75a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b75c:	687b      	ldr	r3, [r7, #4]
    b75e:	2280      	movs	r2, #128	; 0x80
    b760:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b762:	687b      	ldr	r3, [r7, #4]
    b764:	2200      	movs	r2, #0
    b766:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b768:	687b      	ldr	r3, [r7, #4]
    b76a:	2201      	movs	r2, #1
    b76c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b76e:	687b      	ldr	r3, [r7, #4]
    b770:	2200      	movs	r2, #0
    b772:	70da      	strb	r2, [r3, #3]
}
    b774:	46c0      	nop			; (mov r8, r8)
    b776:	46bd      	mov	sp, r7
    b778:	b002      	add	sp, #8
    b77a:	bd80      	pop	{r7, pc}

0000b77c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    b77c:	b580      	push	{r7, lr}
    b77e:	b084      	sub	sp, #16
    b780:	af00      	add	r7, sp, #0
    b782:	0002      	movs	r2, r0
    b784:	6039      	str	r1, [r7, #0]
    b786:	1dfb      	adds	r3, r7, #7
    b788:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    b78a:	230c      	movs	r3, #12
    b78c:	18fb      	adds	r3, r7, r3
    b78e:	0018      	movs	r0, r3
    b790:	4b10      	ldr	r3, [pc, #64]	; (b7d4 <port_pin_set_config+0x58>)
    b792:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    b794:	230c      	movs	r3, #12
    b796:	18fb      	adds	r3, r7, r3
    b798:	2280      	movs	r2, #128	; 0x80
    b79a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    b79c:	683b      	ldr	r3, [r7, #0]
    b79e:	781a      	ldrb	r2, [r3, #0]
    b7a0:	230c      	movs	r3, #12
    b7a2:	18fb      	adds	r3, r7, r3
    b7a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    b7a6:	683b      	ldr	r3, [r7, #0]
    b7a8:	785a      	ldrb	r2, [r3, #1]
    b7aa:	230c      	movs	r3, #12
    b7ac:	18fb      	adds	r3, r7, r3
    b7ae:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    b7b0:	683b      	ldr	r3, [r7, #0]
    b7b2:	789a      	ldrb	r2, [r3, #2]
    b7b4:	230c      	movs	r3, #12
    b7b6:	18fb      	adds	r3, r7, r3
    b7b8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    b7ba:	230c      	movs	r3, #12
    b7bc:	18fa      	adds	r2, r7, r3
    b7be:	1dfb      	adds	r3, r7, #7
    b7c0:	781b      	ldrb	r3, [r3, #0]
    b7c2:	0011      	movs	r1, r2
    b7c4:	0018      	movs	r0, r3
    b7c6:	4b04      	ldr	r3, [pc, #16]	; (b7d8 <port_pin_set_config+0x5c>)
    b7c8:	4798      	blx	r3
}
    b7ca:	46c0      	nop			; (mov r8, r8)
    b7cc:	46bd      	mov	sp, r7
    b7ce:	b004      	add	sp, #16
    b7d0:	bd80      	pop	{r7, pc}
    b7d2:	46c0      	nop			; (mov r8, r8)
    b7d4:	0000b755 	.word	0x0000b755
    b7d8:	0000c705 	.word	0x0000c705

0000b7dc <system_gclk_gen_get_config_defaults>:
{
    b7dc:	b580      	push	{r7, lr}
    b7de:	b082      	sub	sp, #8
    b7e0:	af00      	add	r7, sp, #0
    b7e2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    b7e4:	687b      	ldr	r3, [r7, #4]
    b7e6:	2201      	movs	r2, #1
    b7e8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    b7ea:	687b      	ldr	r3, [r7, #4]
    b7ec:	2200      	movs	r2, #0
    b7ee:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    b7f0:	687b      	ldr	r3, [r7, #4]
    b7f2:	2206      	movs	r2, #6
    b7f4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    b7f6:	687b      	ldr	r3, [r7, #4]
    b7f8:	2200      	movs	r2, #0
    b7fa:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    b7fc:	687b      	ldr	r3, [r7, #4]
    b7fe:	2200      	movs	r2, #0
    b800:	725a      	strb	r2, [r3, #9]
}
    b802:	46c0      	nop			; (mov r8, r8)
    b804:	46bd      	mov	sp, r7
    b806:	b002      	add	sp, #8
    b808:	bd80      	pop	{r7, pc}

0000b80a <system_gclk_chan_get_config_defaults>:
{
    b80a:	b580      	push	{r7, lr}
    b80c:	b082      	sub	sp, #8
    b80e:	af00      	add	r7, sp, #0
    b810:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    b812:	687b      	ldr	r3, [r7, #4]
    b814:	2200      	movs	r2, #0
    b816:	701a      	strb	r2, [r3, #0]
}
    b818:	46c0      	nop			; (mov r8, r8)
    b81a:	46bd      	mov	sp, r7
    b81c:	b002      	add	sp, #8
    b81e:	bd80      	pop	{r7, pc}

0000b820 <system_clock_source_xosc32k_get_config_defaults>:
{
    b820:	b580      	push	{r7, lr}
    b822:	b082      	sub	sp, #8
    b824:	af00      	add	r7, sp, #0
    b826:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    b828:	687b      	ldr	r3, [r7, #4]
    b82a:	2200      	movs	r2, #0
    b82c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    b82e:	687b      	ldr	r3, [r7, #4]
    b830:	2204      	movs	r2, #4
    b832:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    b834:	687b      	ldr	r3, [r7, #4]
    b836:	2200      	movs	r2, #0
    b838:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    b83a:	687b      	ldr	r3, [r7, #4]
    b83c:	2280      	movs	r2, #128	; 0x80
    b83e:	0212      	lsls	r2, r2, #8
    b840:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    b842:	687b      	ldr	r3, [r7, #4]
    b844:	2200      	movs	r2, #0
    b846:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    b848:	687b      	ldr	r3, [r7, #4]
    b84a:	2201      	movs	r2, #1
    b84c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    b84e:	687b      	ldr	r3, [r7, #4]
    b850:	2200      	movs	r2, #0
    b852:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    b854:	687b      	ldr	r3, [r7, #4]
    b856:	2201      	movs	r2, #1
    b858:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    b85a:	687b      	ldr	r3, [r7, #4]
    b85c:	2200      	movs	r2, #0
    b85e:	739a      	strb	r2, [r3, #14]
}
    b860:	46c0      	nop			; (mov r8, r8)
    b862:	46bd      	mov	sp, r7
    b864:	b002      	add	sp, #8
    b866:	bd80      	pop	{r7, pc}

0000b868 <system_clock_source_osc8m_get_config_defaults>:
{
    b868:	b580      	push	{r7, lr}
    b86a:	b082      	sub	sp, #8
    b86c:	af00      	add	r7, sp, #0
    b86e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    b870:	687b      	ldr	r3, [r7, #4]
    b872:	2203      	movs	r2, #3
    b874:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    b876:	687b      	ldr	r3, [r7, #4]
    b878:	2200      	movs	r2, #0
    b87a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    b87c:	687b      	ldr	r3, [r7, #4]
    b87e:	2201      	movs	r2, #1
    b880:	709a      	strb	r2, [r3, #2]
}
    b882:	46c0      	nop			; (mov r8, r8)
    b884:	46bd      	mov	sp, r7
    b886:	b002      	add	sp, #8
    b888:	bd80      	pop	{r7, pc}

0000b88a <system_clock_source_dfll_get_config_defaults>:
{
    b88a:	b580      	push	{r7, lr}
    b88c:	b082      	sub	sp, #8
    b88e:	af00      	add	r7, sp, #0
    b890:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    b892:	687b      	ldr	r3, [r7, #4]
    b894:	2200      	movs	r2, #0
    b896:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    b898:	687b      	ldr	r3, [r7, #4]
    b89a:	2200      	movs	r2, #0
    b89c:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    b89e:	687b      	ldr	r3, [r7, #4]
    b8a0:	2200      	movs	r2, #0
    b8a2:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    b8a4:	687b      	ldr	r3, [r7, #4]
    b8a6:	2200      	movs	r2, #0
    b8a8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    b8aa:	687b      	ldr	r3, [r7, #4]
    b8ac:	2200      	movs	r2, #0
    b8ae:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    b8b0:	687b      	ldr	r3, [r7, #4]
    b8b2:	2201      	movs	r2, #1
    b8b4:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    b8b6:	687b      	ldr	r3, [r7, #4]
    b8b8:	2207      	movs	r2, #7
    b8ba:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    b8bc:	687b      	ldr	r3, [r7, #4]
    b8be:	223f      	movs	r2, #63	; 0x3f
    b8c0:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    b8c2:	687b      	ldr	r3, [r7, #4]
    b8c4:	2201      	movs	r2, #1
    b8c6:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    b8c8:	687b      	ldr	r3, [r7, #4]
    b8ca:	2201      	movs	r2, #1
    b8cc:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    b8ce:	687b      	ldr	r3, [r7, #4]
    b8d0:	2206      	movs	r2, #6
    b8d2:	821a      	strh	r2, [r3, #16]
}
    b8d4:	46c0      	nop			; (mov r8, r8)
    b8d6:	46bd      	mov	sp, r7
    b8d8:	b002      	add	sp, #8
    b8da:	bd80      	pop	{r7, pc}

0000b8dc <system_cpu_clock_set_divider>:
{
    b8dc:	b580      	push	{r7, lr}
    b8de:	b082      	sub	sp, #8
    b8e0:	af00      	add	r7, sp, #0
    b8e2:	0002      	movs	r2, r0
    b8e4:	1dfb      	adds	r3, r7, #7
    b8e6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    b8e8:	4a03      	ldr	r2, [pc, #12]	; (b8f8 <system_cpu_clock_set_divider+0x1c>)
    b8ea:	1dfb      	adds	r3, r7, #7
    b8ec:	781b      	ldrb	r3, [r3, #0]
    b8ee:	7213      	strb	r3, [r2, #8]
}
    b8f0:	46c0      	nop			; (mov r8, r8)
    b8f2:	46bd      	mov	sp, r7
    b8f4:	b002      	add	sp, #8
    b8f6:	bd80      	pop	{r7, pc}
    b8f8:	40000400 	.word	0x40000400

0000b8fc <system_apb_clock_set_divider>:
{
    b8fc:	b580      	push	{r7, lr}
    b8fe:	b082      	sub	sp, #8
    b900:	af00      	add	r7, sp, #0
    b902:	0002      	movs	r2, r0
    b904:	1dfb      	adds	r3, r7, #7
    b906:	701a      	strb	r2, [r3, #0]
    b908:	1dbb      	adds	r3, r7, #6
    b90a:	1c0a      	adds	r2, r1, #0
    b90c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b90e:	1dfb      	adds	r3, r7, #7
    b910:	781b      	ldrb	r3, [r3, #0]
    b912:	2b01      	cmp	r3, #1
    b914:	d008      	beq.n	b928 <system_apb_clock_set_divider+0x2c>
    b916:	2b02      	cmp	r3, #2
    b918:	d00b      	beq.n	b932 <system_apb_clock_set_divider+0x36>
    b91a:	2b00      	cmp	r3, #0
    b91c:	d10e      	bne.n	b93c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    b91e:	4a0b      	ldr	r2, [pc, #44]	; (b94c <system_apb_clock_set_divider+0x50>)
    b920:	1dbb      	adds	r3, r7, #6
    b922:	781b      	ldrb	r3, [r3, #0]
    b924:	7253      	strb	r3, [r2, #9]
			break;
    b926:	e00b      	b.n	b940 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    b928:	4a08      	ldr	r2, [pc, #32]	; (b94c <system_apb_clock_set_divider+0x50>)
    b92a:	1dbb      	adds	r3, r7, #6
    b92c:	781b      	ldrb	r3, [r3, #0]
    b92e:	7293      	strb	r3, [r2, #10]
			break;
    b930:	e006      	b.n	b940 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    b932:	4a06      	ldr	r2, [pc, #24]	; (b94c <system_apb_clock_set_divider+0x50>)
    b934:	1dbb      	adds	r3, r7, #6
    b936:	781b      	ldrb	r3, [r3, #0]
    b938:	72d3      	strb	r3, [r2, #11]
			break;
    b93a:	e001      	b.n	b940 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    b93c:	2317      	movs	r3, #23
    b93e:	e000      	b.n	b942 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    b940:	2300      	movs	r3, #0
}
    b942:	0018      	movs	r0, r3
    b944:	46bd      	mov	sp, r7
    b946:	b002      	add	sp, #8
    b948:	bd80      	pop	{r7, pc}
    b94a:	46c0      	nop			; (mov r8, r8)
    b94c:	40000400 	.word	0x40000400

0000b950 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    b950:	b580      	push	{r7, lr}
    b952:	b082      	sub	sp, #8
    b954:	af00      	add	r7, sp, #0
    b956:	0002      	movs	r2, r0
    b958:	1dfb      	adds	r3, r7, #7
    b95a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    b95c:	4a08      	ldr	r2, [pc, #32]	; (b980 <system_flash_set_waitstates+0x30>)
    b95e:	1dfb      	adds	r3, r7, #7
    b960:	781b      	ldrb	r3, [r3, #0]
    b962:	210f      	movs	r1, #15
    b964:	400b      	ands	r3, r1
    b966:	b2d9      	uxtb	r1, r3
    b968:	6853      	ldr	r3, [r2, #4]
    b96a:	200f      	movs	r0, #15
    b96c:	4001      	ands	r1, r0
    b96e:	0049      	lsls	r1, r1, #1
    b970:	201e      	movs	r0, #30
    b972:	4383      	bics	r3, r0
    b974:	430b      	orrs	r3, r1
    b976:	6053      	str	r3, [r2, #4]
}
    b978:	46c0      	nop			; (mov r8, r8)
    b97a:	46bd      	mov	sp, r7
    b97c:	b002      	add	sp, #8
    b97e:	bd80      	pop	{r7, pc}
    b980:	41004000 	.word	0x41004000

0000b984 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    b984:	b580      	push	{r7, lr}
    b986:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    b988:	46c0      	nop			; (mov r8, r8)
    b98a:	4b04      	ldr	r3, [pc, #16]	; (b99c <_system_dfll_wait_for_sync+0x18>)
    b98c:	68db      	ldr	r3, [r3, #12]
    b98e:	2210      	movs	r2, #16
    b990:	4013      	ands	r3, r2
    b992:	d0fa      	beq.n	b98a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    b994:	46c0      	nop			; (mov r8, r8)
    b996:	46bd      	mov	sp, r7
    b998:	bd80      	pop	{r7, pc}
    b99a:	46c0      	nop			; (mov r8, r8)
    b99c:	40000800 	.word	0x40000800

0000b9a0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    b9a0:	b580      	push	{r7, lr}
    b9a2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    b9a4:	4b0c      	ldr	r3, [pc, #48]	; (b9d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b9a6:	2202      	movs	r2, #2
    b9a8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    b9aa:	4b0c      	ldr	r3, [pc, #48]	; (b9dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    b9ac:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    b9ae:	4a0a      	ldr	r2, [pc, #40]	; (b9d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b9b0:	4b0b      	ldr	r3, [pc, #44]	; (b9e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b9b2:	689b      	ldr	r3, [r3, #8]
    b9b4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    b9b6:	4a08      	ldr	r2, [pc, #32]	; (b9d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b9b8:	4b09      	ldr	r3, [pc, #36]	; (b9e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b9ba:	685b      	ldr	r3, [r3, #4]
    b9bc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    b9be:	4b06      	ldr	r3, [pc, #24]	; (b9d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b9c0:	2200      	movs	r2, #0
    b9c2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    b9c4:	4b05      	ldr	r3, [pc, #20]	; (b9dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    b9c6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    b9c8:	4a03      	ldr	r2, [pc, #12]	; (b9d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b9ca:	4b05      	ldr	r3, [pc, #20]	; (b9e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b9cc:	681b      	ldr	r3, [r3, #0]
    b9ce:	b29b      	uxth	r3, r3
    b9d0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    b9d2:	46c0      	nop			; (mov r8, r8)
    b9d4:	46bd      	mov	sp, r7
    b9d6:	bd80      	pop	{r7, pc}
    b9d8:	40000800 	.word	0x40000800
    b9dc:	0000b985 	.word	0x0000b985
    b9e0:	20000284 	.word	0x20000284

0000b9e4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    b9e4:	b580      	push	{r7, lr}
    b9e6:	b082      	sub	sp, #8
    b9e8:	af00      	add	r7, sp, #0
    b9ea:	0002      	movs	r2, r0
    b9ec:	1dfb      	adds	r3, r7, #7
    b9ee:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    b9f0:	1dfb      	adds	r3, r7, #7
    b9f2:	781b      	ldrb	r3, [r3, #0]
    b9f4:	2b08      	cmp	r3, #8
    b9f6:	d840      	bhi.n	ba7a <system_clock_source_get_hz+0x96>
    b9f8:	009a      	lsls	r2, r3, #2
    b9fa:	4b22      	ldr	r3, [pc, #136]	; (ba84 <system_clock_source_get_hz+0xa0>)
    b9fc:	18d3      	adds	r3, r2, r3
    b9fe:	681b      	ldr	r3, [r3, #0]
    ba00:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    ba02:	4b21      	ldr	r3, [pc, #132]	; (ba88 <system_clock_source_get_hz+0xa4>)
    ba04:	691b      	ldr	r3, [r3, #16]
    ba06:	e039      	b.n	ba7c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    ba08:	4b20      	ldr	r3, [pc, #128]	; (ba8c <system_clock_source_get_hz+0xa8>)
    ba0a:	6a1b      	ldr	r3, [r3, #32]
    ba0c:	059b      	lsls	r3, r3, #22
    ba0e:	0f9b      	lsrs	r3, r3, #30
    ba10:	b2db      	uxtb	r3, r3
    ba12:	001a      	movs	r2, r3
    ba14:	4b1e      	ldr	r3, [pc, #120]	; (ba90 <system_clock_source_get_hz+0xac>)
    ba16:	40d3      	lsrs	r3, r2
    ba18:	e030      	b.n	ba7c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    ba1a:	2380      	movs	r3, #128	; 0x80
    ba1c:	021b      	lsls	r3, r3, #8
    ba1e:	e02d      	b.n	ba7c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    ba20:	2380      	movs	r3, #128	; 0x80
    ba22:	021b      	lsls	r3, r3, #8
    ba24:	e02a      	b.n	ba7c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    ba26:	4b18      	ldr	r3, [pc, #96]	; (ba88 <system_clock_source_get_hz+0xa4>)
    ba28:	695b      	ldr	r3, [r3, #20]
    ba2a:	e027      	b.n	ba7c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    ba2c:	4b16      	ldr	r3, [pc, #88]	; (ba88 <system_clock_source_get_hz+0xa4>)
    ba2e:	681b      	ldr	r3, [r3, #0]
    ba30:	2202      	movs	r2, #2
    ba32:	4013      	ands	r3, r2
    ba34:	d101      	bne.n	ba3a <system_clock_source_get_hz+0x56>
			return 0;
    ba36:	2300      	movs	r3, #0
    ba38:	e020      	b.n	ba7c <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    ba3a:	4b16      	ldr	r3, [pc, #88]	; (ba94 <system_clock_source_get_hz+0xb0>)
    ba3c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    ba3e:	4b12      	ldr	r3, [pc, #72]	; (ba88 <system_clock_source_get_hz+0xa4>)
    ba40:	681b      	ldr	r3, [r3, #0]
    ba42:	2204      	movs	r2, #4
    ba44:	4013      	ands	r3, r2
    ba46:	d009      	beq.n	ba5c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    ba48:	2000      	movs	r0, #0
    ba4a:	4b13      	ldr	r3, [pc, #76]	; (ba98 <system_clock_source_get_hz+0xb4>)
    ba4c:	4798      	blx	r3
    ba4e:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    ba50:	4b0d      	ldr	r3, [pc, #52]	; (ba88 <system_clock_source_get_hz+0xa4>)
    ba52:	689b      	ldr	r3, [r3, #8]
    ba54:	041b      	lsls	r3, r3, #16
    ba56:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    ba58:	4353      	muls	r3, r2
    ba5a:	e00f      	b.n	ba7c <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    ba5c:	4b0f      	ldr	r3, [pc, #60]	; (ba9c <system_clock_source_get_hz+0xb8>)
    ba5e:	e00d      	b.n	ba7c <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    ba60:	4a0a      	ldr	r2, [pc, #40]	; (ba8c <system_clock_source_get_hz+0xa8>)
    ba62:	2350      	movs	r3, #80	; 0x50
    ba64:	5cd3      	ldrb	r3, [r2, r3]
    ba66:	b2db      	uxtb	r3, r3
    ba68:	001a      	movs	r2, r3
    ba6a:	2304      	movs	r3, #4
    ba6c:	4013      	ands	r3, r2
    ba6e:	d101      	bne.n	ba74 <system_clock_source_get_hz+0x90>
			return 0;
    ba70:	2300      	movs	r3, #0
    ba72:	e003      	b.n	ba7c <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    ba74:	4b04      	ldr	r3, [pc, #16]	; (ba88 <system_clock_source_get_hz+0xa4>)
    ba76:	68db      	ldr	r3, [r3, #12]
    ba78:	e000      	b.n	ba7c <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    ba7a:	2300      	movs	r3, #0
	}
}
    ba7c:	0018      	movs	r0, r3
    ba7e:	46bd      	mov	sp, r7
    ba80:	b002      	add	sp, #8
    ba82:	bd80      	pop	{r7, pc}
    ba84:	00014e38 	.word	0x00014e38
    ba88:	20000284 	.word	0x20000284
    ba8c:	40000800 	.word	0x40000800
    ba90:	007a1200 	.word	0x007a1200
    ba94:	0000b985 	.word	0x0000b985
    ba98:	0000c53d 	.word	0x0000c53d
    ba9c:	02dc6c00 	.word	0x02dc6c00

0000baa0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    baa0:	b580      	push	{r7, lr}
    baa2:	b084      	sub	sp, #16
    baa4:	af00      	add	r7, sp, #0
    baa6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    baa8:	4b1a      	ldr	r3, [pc, #104]	; (bb14 <system_clock_source_osc8m_set_config+0x74>)
    baaa:	6a1b      	ldr	r3, [r3, #32]
    baac:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    baae:	687b      	ldr	r3, [r7, #4]
    bab0:	781b      	ldrb	r3, [r3, #0]
    bab2:	1c1a      	adds	r2, r3, #0
    bab4:	2303      	movs	r3, #3
    bab6:	4013      	ands	r3, r2
    bab8:	b2da      	uxtb	r2, r3
    baba:	230d      	movs	r3, #13
    babc:	18fb      	adds	r3, r7, r3
    babe:	2103      	movs	r1, #3
    bac0:	400a      	ands	r2, r1
    bac2:	0010      	movs	r0, r2
    bac4:	781a      	ldrb	r2, [r3, #0]
    bac6:	2103      	movs	r1, #3
    bac8:	438a      	bics	r2, r1
    baca:	1c11      	adds	r1, r2, #0
    bacc:	1c02      	adds	r2, r0, #0
    bace:	430a      	orrs	r2, r1
    bad0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    bad2:	687b      	ldr	r3, [r7, #4]
    bad4:	789a      	ldrb	r2, [r3, #2]
    bad6:	230c      	movs	r3, #12
    bad8:	18fb      	adds	r3, r7, r3
    bada:	01d0      	lsls	r0, r2, #7
    badc:	781a      	ldrb	r2, [r3, #0]
    bade:	217f      	movs	r1, #127	; 0x7f
    bae0:	400a      	ands	r2, r1
    bae2:	1c11      	adds	r1, r2, #0
    bae4:	1c02      	adds	r2, r0, #0
    bae6:	430a      	orrs	r2, r1
    bae8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    baea:	687b      	ldr	r3, [r7, #4]
    baec:	785a      	ldrb	r2, [r3, #1]
    baee:	230c      	movs	r3, #12
    baf0:	18fb      	adds	r3, r7, r3
    baf2:	2101      	movs	r1, #1
    baf4:	400a      	ands	r2, r1
    baf6:	0190      	lsls	r0, r2, #6
    baf8:	781a      	ldrb	r2, [r3, #0]
    bafa:	2140      	movs	r1, #64	; 0x40
    bafc:	438a      	bics	r2, r1
    bafe:	1c11      	adds	r1, r2, #0
    bb00:	1c02      	adds	r2, r0, #0
    bb02:	430a      	orrs	r2, r1
    bb04:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    bb06:	4b03      	ldr	r3, [pc, #12]	; (bb14 <system_clock_source_osc8m_set_config+0x74>)
    bb08:	68fa      	ldr	r2, [r7, #12]
    bb0a:	621a      	str	r2, [r3, #32]
}
    bb0c:	46c0      	nop			; (mov r8, r8)
    bb0e:	46bd      	mov	sp, r7
    bb10:	b004      	add	sp, #16
    bb12:	bd80      	pop	{r7, pc}
    bb14:	40000800 	.word	0x40000800

0000bb18 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    bb18:	b580      	push	{r7, lr}
    bb1a:	b084      	sub	sp, #16
    bb1c:	af00      	add	r7, sp, #0
    bb1e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    bb20:	4a43      	ldr	r2, [pc, #268]	; (bc30 <system_clock_source_xosc32k_set_config+0x118>)
    bb22:	230c      	movs	r3, #12
    bb24:	18fb      	adds	r3, r7, r3
    bb26:	8a92      	ldrh	r2, [r2, #20]
    bb28:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    bb2a:	687b      	ldr	r3, [r7, #4]
    bb2c:	785b      	ldrb	r3, [r3, #1]
    bb2e:	1c1a      	adds	r2, r3, #0
    bb30:	2307      	movs	r3, #7
    bb32:	4013      	ands	r3, r2
    bb34:	b2da      	uxtb	r2, r3
    bb36:	230c      	movs	r3, #12
    bb38:	18fb      	adds	r3, r7, r3
    bb3a:	2107      	movs	r1, #7
    bb3c:	400a      	ands	r2, r1
    bb3e:	0010      	movs	r0, r2
    bb40:	785a      	ldrb	r2, [r3, #1]
    bb42:	2107      	movs	r1, #7
    bb44:	438a      	bics	r2, r1
    bb46:	1c11      	adds	r1, r2, #0
    bb48:	1c02      	adds	r2, r0, #0
    bb4a:	430a      	orrs	r2, r1
    bb4c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    bb4e:	687b      	ldr	r3, [r7, #4]
    bb50:	781b      	ldrb	r3, [r3, #0]
    bb52:	2b00      	cmp	r3, #0
    bb54:	d106      	bne.n	bb64 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    bb56:	230c      	movs	r3, #12
    bb58:	18fb      	adds	r3, r7, r3
    bb5a:	781a      	ldrb	r2, [r3, #0]
    bb5c:	2104      	movs	r1, #4
    bb5e:	430a      	orrs	r2, r1
    bb60:	701a      	strb	r2, [r3, #0]
    bb62:	e005      	b.n	bb70 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    bb64:	230c      	movs	r3, #12
    bb66:	18fb      	adds	r3, r7, r3
    bb68:	781a      	ldrb	r2, [r3, #0]
    bb6a:	2104      	movs	r1, #4
    bb6c:	438a      	bics	r2, r1
    bb6e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    bb70:	687b      	ldr	r3, [r7, #4]
    bb72:	789a      	ldrb	r2, [r3, #2]
    bb74:	230c      	movs	r3, #12
    bb76:	18fb      	adds	r3, r7, r3
    bb78:	2101      	movs	r1, #1
    bb7a:	400a      	ands	r2, r1
    bb7c:	0150      	lsls	r0, r2, #5
    bb7e:	781a      	ldrb	r2, [r3, #0]
    bb80:	2120      	movs	r1, #32
    bb82:	438a      	bics	r2, r1
    bb84:	1c11      	adds	r1, r2, #0
    bb86:	1c02      	adds	r2, r0, #0
    bb88:	430a      	orrs	r2, r1
    bb8a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    bb8c:	687b      	ldr	r3, [r7, #4]
    bb8e:	78da      	ldrb	r2, [r3, #3]
    bb90:	230c      	movs	r3, #12
    bb92:	18fb      	adds	r3, r7, r3
    bb94:	2101      	movs	r1, #1
    bb96:	400a      	ands	r2, r1
    bb98:	0110      	lsls	r0, r2, #4
    bb9a:	781a      	ldrb	r2, [r3, #0]
    bb9c:	2110      	movs	r1, #16
    bb9e:	438a      	bics	r2, r1
    bba0:	1c11      	adds	r1, r2, #0
    bba2:	1c02      	adds	r2, r0, #0
    bba4:	430a      	orrs	r2, r1
    bba6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    bba8:	687b      	ldr	r3, [r7, #4]
    bbaa:	791a      	ldrb	r2, [r3, #4]
    bbac:	230c      	movs	r3, #12
    bbae:	18fb      	adds	r3, r7, r3
    bbb0:	2101      	movs	r1, #1
    bbb2:	400a      	ands	r2, r1
    bbb4:	00d0      	lsls	r0, r2, #3
    bbb6:	781a      	ldrb	r2, [r3, #0]
    bbb8:	2108      	movs	r1, #8
    bbba:	438a      	bics	r2, r1
    bbbc:	1c11      	adds	r1, r2, #0
    bbbe:	1c02      	adds	r2, r0, #0
    bbc0:	430a      	orrs	r2, r1
    bbc2:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    bbc4:	687b      	ldr	r3, [r7, #4]
    bbc6:	7b5a      	ldrb	r2, [r3, #13]
    bbc8:	230c      	movs	r3, #12
    bbca:	18fb      	adds	r3, r7, r3
    bbcc:	01d0      	lsls	r0, r2, #7
    bbce:	781a      	ldrb	r2, [r3, #0]
    bbd0:	217f      	movs	r1, #127	; 0x7f
    bbd2:	400a      	ands	r2, r1
    bbd4:	1c11      	adds	r1, r2, #0
    bbd6:	1c02      	adds	r2, r0, #0
    bbd8:	430a      	orrs	r2, r1
    bbda:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    bbdc:	687b      	ldr	r3, [r7, #4]
    bbde:	7b1a      	ldrb	r2, [r3, #12]
    bbe0:	230c      	movs	r3, #12
    bbe2:	18fb      	adds	r3, r7, r3
    bbe4:	2101      	movs	r1, #1
    bbe6:	400a      	ands	r2, r1
    bbe8:	0190      	lsls	r0, r2, #6
    bbea:	781a      	ldrb	r2, [r3, #0]
    bbec:	2140      	movs	r1, #64	; 0x40
    bbee:	438a      	bics	r2, r1
    bbf0:	1c11      	adds	r1, r2, #0
    bbf2:	1c02      	adds	r2, r0, #0
    bbf4:	430a      	orrs	r2, r1
    bbf6:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    bbf8:	687b      	ldr	r3, [r7, #4]
    bbfa:	7b9a      	ldrb	r2, [r3, #14]
    bbfc:	230c      	movs	r3, #12
    bbfe:	18fb      	adds	r3, r7, r3
    bc00:	2101      	movs	r1, #1
    bc02:	400a      	ands	r2, r1
    bc04:	0110      	lsls	r0, r2, #4
    bc06:	785a      	ldrb	r2, [r3, #1]
    bc08:	2110      	movs	r1, #16
    bc0a:	438a      	bics	r2, r1
    bc0c:	1c11      	adds	r1, r2, #0
    bc0e:	1c02      	adds	r2, r0, #0
    bc10:	430a      	orrs	r2, r1
    bc12:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    bc14:	687b      	ldr	r3, [r7, #4]
    bc16:	689a      	ldr	r2, [r3, #8]
    bc18:	4b06      	ldr	r3, [pc, #24]	; (bc34 <system_clock_source_xosc32k_set_config+0x11c>)
    bc1a:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    bc1c:	4a04      	ldr	r2, [pc, #16]	; (bc30 <system_clock_source_xosc32k_set_config+0x118>)
    bc1e:	230c      	movs	r3, #12
    bc20:	18fb      	adds	r3, r7, r3
    bc22:	881b      	ldrh	r3, [r3, #0]
    bc24:	8293      	strh	r3, [r2, #20]
}
    bc26:	46c0      	nop			; (mov r8, r8)
    bc28:	46bd      	mov	sp, r7
    bc2a:	b004      	add	sp, #16
    bc2c:	bd80      	pop	{r7, pc}
    bc2e:	46c0      	nop			; (mov r8, r8)
    bc30:	40000800 	.word	0x40000800
    bc34:	20000284 	.word	0x20000284

0000bc38 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    bc38:	b580      	push	{r7, lr}
    bc3a:	b082      	sub	sp, #8
    bc3c:	af00      	add	r7, sp, #0
    bc3e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    bc40:	687b      	ldr	r3, [r7, #4]
    bc42:	7a1b      	ldrb	r3, [r3, #8]
    bc44:	029b      	lsls	r3, r3, #10
    bc46:	041b      	lsls	r3, r3, #16
    bc48:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    bc4a:	687b      	ldr	r3, [r7, #4]
    bc4c:	895b      	ldrh	r3, [r3, #10]
    bc4e:	059b      	lsls	r3, r3, #22
    bc50:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    bc52:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    bc54:	4b2a      	ldr	r3, [pc, #168]	; (bd00 <system_clock_source_dfll_set_config+0xc8>)
    bc56:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    bc58:	687b      	ldr	r3, [r7, #4]
    bc5a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    bc5c:	687b      	ldr	r3, [r7, #4]
    bc5e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    bc60:	4313      	orrs	r3, r2
    bc62:	b2db      	uxtb	r3, r3
    bc64:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    bc66:	687b      	ldr	r3, [r7, #4]
    bc68:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    bc6a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    bc6c:	687a      	ldr	r2, [r7, #4]
    bc6e:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    bc70:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    bc72:	687b      	ldr	r3, [r7, #4]
    bc74:	785b      	ldrb	r3, [r3, #1]
    bc76:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    bc78:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    bc7a:	4b21      	ldr	r3, [pc, #132]	; (bd00 <system_clock_source_dfll_set_config+0xc8>)
    bc7c:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    bc7e:	687b      	ldr	r3, [r7, #4]
    bc80:	781b      	ldrb	r3, [r3, #0]
    bc82:	2b04      	cmp	r3, #4
    bc84:	d116      	bne.n	bcb4 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bc86:	687b      	ldr	r3, [r7, #4]
    bc88:	7b1b      	ldrb	r3, [r3, #12]
    bc8a:	069b      	lsls	r3, r3, #26
    bc8c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bc8e:	687b      	ldr	r3, [r7, #4]
    bc90:	89db      	ldrh	r3, [r3, #14]
    bc92:	041b      	lsls	r3, r3, #16
    bc94:	0019      	movs	r1, r3
    bc96:	4b1b      	ldr	r3, [pc, #108]	; (bd04 <system_clock_source_dfll_set_config+0xcc>)
    bc98:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bc9a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    bc9c:	687a      	ldr	r2, [r7, #4]
    bc9e:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bca0:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    bca2:	4b17      	ldr	r3, [pc, #92]	; (bd00 <system_clock_source_dfll_set_config+0xc8>)
    bca4:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    bca6:	4b16      	ldr	r3, [pc, #88]	; (bd00 <system_clock_source_dfll_set_config+0xc8>)
    bca8:	681b      	ldr	r3, [r3, #0]
    bcaa:	687a      	ldr	r2, [r7, #4]
    bcac:	7812      	ldrb	r2, [r2, #0]
    bcae:	431a      	orrs	r2, r3
    bcb0:	4b13      	ldr	r3, [pc, #76]	; (bd00 <system_clock_source_dfll_set_config+0xc8>)
    bcb2:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    bcb4:	687b      	ldr	r3, [r7, #4]
    bcb6:	781b      	ldrb	r3, [r3, #0]
    bcb8:	2b20      	cmp	r3, #32
    bcba:	d11c      	bne.n	bcf6 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bcbc:	687b      	ldr	r3, [r7, #4]
    bcbe:	7b1b      	ldrb	r3, [r3, #12]
    bcc0:	069b      	lsls	r3, r3, #26
    bcc2:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bcc4:	687b      	ldr	r3, [r7, #4]
    bcc6:	89db      	ldrh	r3, [r3, #14]
    bcc8:	041b      	lsls	r3, r3, #16
    bcca:	0019      	movs	r1, r3
    bccc:	4b0d      	ldr	r3, [pc, #52]	; (bd04 <system_clock_source_dfll_set_config+0xcc>)
    bcce:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    bcd0:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    bcd2:	687a      	ldr	r2, [r7, #4]
    bcd4:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    bcd6:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    bcd8:	4b09      	ldr	r3, [pc, #36]	; (bd00 <system_clock_source_dfll_set_config+0xc8>)
    bcda:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    bcdc:	4b08      	ldr	r3, [pc, #32]	; (bd00 <system_clock_source_dfll_set_config+0xc8>)
    bcde:	681b      	ldr	r3, [r3, #0]
    bce0:	687a      	ldr	r2, [r7, #4]
    bce2:	7812      	ldrb	r2, [r2, #0]
    bce4:	2104      	movs	r1, #4
    bce6:	430a      	orrs	r2, r1
    bce8:	b2d2      	uxtb	r2, r2
    bcea:	4313      	orrs	r3, r2
    bcec:	2280      	movs	r2, #128	; 0x80
    bcee:	00d2      	lsls	r2, r2, #3
    bcf0:	431a      	orrs	r2, r3
    bcf2:	4b03      	ldr	r3, [pc, #12]	; (bd00 <system_clock_source_dfll_set_config+0xc8>)
    bcf4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    bcf6:	46c0      	nop			; (mov r8, r8)
    bcf8:	46bd      	mov	sp, r7
    bcfa:	b002      	add	sp, #8
    bcfc:	bd80      	pop	{r7, pc}
    bcfe:	46c0      	nop			; (mov r8, r8)
    bd00:	20000284 	.word	0x20000284
    bd04:	03ff0000 	.word	0x03ff0000

0000bd08 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    bd08:	b580      	push	{r7, lr}
    bd0a:	b082      	sub	sp, #8
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	0002      	movs	r2, r0
    bd10:	1dfb      	adds	r3, r7, #7
    bd12:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    bd14:	1dfb      	adds	r3, r7, #7
    bd16:	781b      	ldrb	r3, [r3, #0]
    bd18:	2b08      	cmp	r3, #8
    bd1a:	d83b      	bhi.n	bd94 <system_clock_source_enable+0x8c>
    bd1c:	009a      	lsls	r2, r3, #2
    bd1e:	4b21      	ldr	r3, [pc, #132]	; (bda4 <system_clock_source_enable+0x9c>)
    bd20:	18d3      	adds	r3, r2, r3
    bd22:	681b      	ldr	r3, [r3, #0]
    bd24:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    bd26:	4b20      	ldr	r3, [pc, #128]	; (bda8 <system_clock_source_enable+0xa0>)
    bd28:	4a1f      	ldr	r2, [pc, #124]	; (bda8 <system_clock_source_enable+0xa0>)
    bd2a:	6a12      	ldr	r2, [r2, #32]
    bd2c:	2102      	movs	r1, #2
    bd2e:	430a      	orrs	r2, r1
    bd30:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    bd32:	2300      	movs	r3, #0
    bd34:	e031      	b.n	bd9a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    bd36:	4b1c      	ldr	r3, [pc, #112]	; (bda8 <system_clock_source_enable+0xa0>)
    bd38:	4a1b      	ldr	r2, [pc, #108]	; (bda8 <system_clock_source_enable+0xa0>)
    bd3a:	6992      	ldr	r2, [r2, #24]
    bd3c:	2102      	movs	r1, #2
    bd3e:	430a      	orrs	r2, r1
    bd40:	619a      	str	r2, [r3, #24]
		break;
    bd42:	e029      	b.n	bd98 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    bd44:	4a18      	ldr	r2, [pc, #96]	; (bda8 <system_clock_source_enable+0xa0>)
    bd46:	4b18      	ldr	r3, [pc, #96]	; (bda8 <system_clock_source_enable+0xa0>)
    bd48:	8a1b      	ldrh	r3, [r3, #16]
    bd4a:	b29b      	uxth	r3, r3
    bd4c:	2102      	movs	r1, #2
    bd4e:	430b      	orrs	r3, r1
    bd50:	b29b      	uxth	r3, r3
    bd52:	8213      	strh	r3, [r2, #16]
		break;
    bd54:	e020      	b.n	bd98 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    bd56:	4a14      	ldr	r2, [pc, #80]	; (bda8 <system_clock_source_enable+0xa0>)
    bd58:	4b13      	ldr	r3, [pc, #76]	; (bda8 <system_clock_source_enable+0xa0>)
    bd5a:	8a9b      	ldrh	r3, [r3, #20]
    bd5c:	b29b      	uxth	r3, r3
    bd5e:	2102      	movs	r1, #2
    bd60:	430b      	orrs	r3, r1
    bd62:	b29b      	uxth	r3, r3
    bd64:	8293      	strh	r3, [r2, #20]
		break;
    bd66:	e017      	b.n	bd98 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    bd68:	4b10      	ldr	r3, [pc, #64]	; (bdac <system_clock_source_enable+0xa4>)
    bd6a:	681b      	ldr	r3, [r3, #0]
    bd6c:	2202      	movs	r2, #2
    bd6e:	431a      	orrs	r2, r3
    bd70:	4b0e      	ldr	r3, [pc, #56]	; (bdac <system_clock_source_enable+0xa4>)
    bd72:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    bd74:	4b0e      	ldr	r3, [pc, #56]	; (bdb0 <system_clock_source_enable+0xa8>)
    bd76:	4798      	blx	r3
		break;
    bd78:	e00e      	b.n	bd98 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    bd7a:	4a0b      	ldr	r2, [pc, #44]	; (bda8 <system_clock_source_enable+0xa0>)
    bd7c:	490a      	ldr	r1, [pc, #40]	; (bda8 <system_clock_source_enable+0xa0>)
    bd7e:	2344      	movs	r3, #68	; 0x44
    bd80:	5ccb      	ldrb	r3, [r1, r3]
    bd82:	b2db      	uxtb	r3, r3
    bd84:	2102      	movs	r1, #2
    bd86:	430b      	orrs	r3, r1
    bd88:	b2d9      	uxtb	r1, r3
    bd8a:	2344      	movs	r3, #68	; 0x44
    bd8c:	54d1      	strb	r1, [r2, r3]
		break;
    bd8e:	e003      	b.n	bd98 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    bd90:	2300      	movs	r3, #0
    bd92:	e002      	b.n	bd9a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    bd94:	2317      	movs	r3, #23
    bd96:	e000      	b.n	bd9a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    bd98:	2300      	movs	r3, #0
}
    bd9a:	0018      	movs	r0, r3
    bd9c:	46bd      	mov	sp, r7
    bd9e:	b002      	add	sp, #8
    bda0:	bd80      	pop	{r7, pc}
    bda2:	46c0      	nop			; (mov r8, r8)
    bda4:	00014e5c 	.word	0x00014e5c
    bda8:	40000800 	.word	0x40000800
    bdac:	20000284 	.word	0x20000284
    bdb0:	0000b9a1 	.word	0x0000b9a1

0000bdb4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    bdb4:	b580      	push	{r7, lr}
    bdb6:	b084      	sub	sp, #16
    bdb8:	af00      	add	r7, sp, #0
    bdba:	0002      	movs	r2, r0
    bdbc:	1dfb      	adds	r3, r7, #7
    bdbe:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    bdc0:	2300      	movs	r3, #0
    bdc2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    bdc4:	1dfb      	adds	r3, r7, #7
    bdc6:	781b      	ldrb	r3, [r3, #0]
    bdc8:	2b08      	cmp	r3, #8
    bdca:	d821      	bhi.n	be10 <system_clock_source_is_ready+0x5c>
    bdcc:	009a      	lsls	r2, r3, #2
    bdce:	4b18      	ldr	r3, [pc, #96]	; (be30 <system_clock_source_is_ready+0x7c>)
    bdd0:	18d3      	adds	r3, r2, r3
    bdd2:	681b      	ldr	r3, [r3, #0]
    bdd4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    bdd6:	2308      	movs	r3, #8
    bdd8:	60fb      	str	r3, [r7, #12]
		break;
    bdda:	e01b      	b.n	be14 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    bddc:	2304      	movs	r3, #4
    bdde:	60fb      	str	r3, [r7, #12]
		break;
    bde0:	e018      	b.n	be14 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    bde2:	2301      	movs	r3, #1
    bde4:	60fb      	str	r3, [r7, #12]
		break;
    bde6:	e015      	b.n	be14 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    bde8:	2302      	movs	r3, #2
    bdea:	60fb      	str	r3, [r7, #12]
		break;
    bdec:	e012      	b.n	be14 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    bdee:	23d0      	movs	r3, #208	; 0xd0
    bdf0:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    bdf2:	e00f      	b.n	be14 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    bdf4:	4a0f      	ldr	r2, [pc, #60]	; (be34 <system_clock_source_is_ready+0x80>)
    bdf6:	2350      	movs	r3, #80	; 0x50
    bdf8:	5cd3      	ldrb	r3, [r2, r3]
    bdfa:	b2db      	uxtb	r3, r3
    bdfc:	001a      	movs	r2, r3
    bdfe:	2303      	movs	r3, #3
    be00:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    be02:	3b03      	subs	r3, #3
    be04:	425a      	negs	r2, r3
    be06:	4153      	adcs	r3, r2
    be08:	b2db      	uxtb	r3, r3
    be0a:	e00c      	b.n	be26 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    be0c:	2301      	movs	r3, #1
    be0e:	e00a      	b.n	be26 <system_clock_source_is_ready+0x72>

	default:
		return false;
    be10:	2300      	movs	r3, #0
    be12:	e008      	b.n	be26 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    be14:	4b07      	ldr	r3, [pc, #28]	; (be34 <system_clock_source_is_ready+0x80>)
    be16:	68db      	ldr	r3, [r3, #12]
    be18:	68fa      	ldr	r2, [r7, #12]
    be1a:	401a      	ands	r2, r3
    be1c:	68fb      	ldr	r3, [r7, #12]
    be1e:	1ad3      	subs	r3, r2, r3
    be20:	425a      	negs	r2, r3
    be22:	4153      	adcs	r3, r2
    be24:	b2db      	uxtb	r3, r3
}
    be26:	0018      	movs	r0, r3
    be28:	46bd      	mov	sp, r7
    be2a:	b004      	add	sp, #16
    be2c:	bd80      	pop	{r7, pc}
    be2e:	46c0      	nop			; (mov r8, r8)
    be30:	00014e80 	.word	0x00014e80
    be34:	40000800 	.word	0x40000800

0000be38 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    be38:	b580      	push	{r7, lr}
    be3a:	b082      	sub	sp, #8
    be3c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    be3e:	003b      	movs	r3, r7
    be40:	2202      	movs	r2, #2
    be42:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    be44:	2300      	movs	r3, #0
    be46:	607b      	str	r3, [r7, #4]
    be48:	e009      	b.n	be5e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    be4a:	687b      	ldr	r3, [r7, #4]
    be4c:	b2db      	uxtb	r3, r3
    be4e:	003a      	movs	r2, r7
    be50:	0011      	movs	r1, r2
    be52:	0018      	movs	r0, r3
    be54:	4b05      	ldr	r3, [pc, #20]	; (be6c <_switch_peripheral_gclk+0x34>)
    be56:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    be58:	687b      	ldr	r3, [r7, #4]
    be5a:	3301      	adds	r3, #1
    be5c:	607b      	str	r3, [r7, #4]
    be5e:	687b      	ldr	r3, [r7, #4]
    be60:	2b24      	cmp	r3, #36	; 0x24
    be62:	d9f2      	bls.n	be4a <_switch_peripheral_gclk+0x12>
	}
}
    be64:	46c0      	nop			; (mov r8, r8)
    be66:	46bd      	mov	sp, r7
    be68:	b002      	add	sp, #8
    be6a:	bd80      	pop	{r7, pc}
    be6c:	0000c419 	.word	0x0000c419

0000be70 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    be70:	b580      	push	{r7, lr}
    be72:	b0aa      	sub	sp, #168	; 0xa8
    be74:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    be76:	4b87      	ldr	r3, [pc, #540]	; (c094 <system_clock_init+0x224>)
    be78:	22c2      	movs	r2, #194	; 0xc2
    be7a:	00d2      	lsls	r2, r2, #3
    be7c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    be7e:	2002      	movs	r0, #2
    be80:	4b85      	ldr	r3, [pc, #532]	; (c098 <system_clock_init+0x228>)
    be82:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    be84:	4b85      	ldr	r3, [pc, #532]	; (c09c <system_clock_init+0x22c>)
    be86:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    be88:	2394      	movs	r3, #148	; 0x94
    be8a:	18fb      	adds	r3, r7, r3
    be8c:	0018      	movs	r0, r3
    be8e:	4b84      	ldr	r3, [pc, #528]	; (c0a0 <system_clock_init+0x230>)
    be90:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    be92:	2394      	movs	r3, #148	; 0x94
    be94:	18fb      	adds	r3, r7, r3
    be96:	2280      	movs	r2, #128	; 0x80
    be98:	0212      	lsls	r2, r2, #8
    be9a:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    be9c:	2394      	movs	r3, #148	; 0x94
    be9e:	18fb      	adds	r3, r7, r3
    bea0:	2200      	movs	r2, #0
    bea2:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    bea4:	2394      	movs	r3, #148	; 0x94
    bea6:	18fb      	adds	r3, r7, r3
    bea8:	2203      	movs	r2, #3
    beaa:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    beac:	2394      	movs	r3, #148	; 0x94
    beae:	18fb      	adds	r3, r7, r3
    beb0:	2200      	movs	r2, #0
    beb2:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    beb4:	2394      	movs	r3, #148	; 0x94
    beb6:	18fb      	adds	r3, r7, r3
    beb8:	2200      	movs	r2, #0
    beba:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    bebc:	2394      	movs	r3, #148	; 0x94
    bebe:	18fb      	adds	r3, r7, r3
    bec0:	2201      	movs	r2, #1
    bec2:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    bec4:	2394      	movs	r3, #148	; 0x94
    bec6:	18fb      	adds	r3, r7, r3
    bec8:	2200      	movs	r2, #0
    beca:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    becc:	2394      	movs	r3, #148	; 0x94
    bece:	18fb      	adds	r3, r7, r3
    bed0:	2200      	movs	r2, #0
    bed2:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    bed4:	2394      	movs	r3, #148	; 0x94
    bed6:	18fb      	adds	r3, r7, r3
    bed8:	0018      	movs	r0, r3
    beda:	4b72      	ldr	r3, [pc, #456]	; (c0a4 <system_clock_init+0x234>)
    bedc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    bede:	2005      	movs	r0, #5
    bee0:	4b71      	ldr	r3, [pc, #452]	; (c0a8 <system_clock_init+0x238>)
    bee2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    bee4:	46c0      	nop			; (mov r8, r8)
    bee6:	2005      	movs	r0, #5
    bee8:	4b70      	ldr	r3, [pc, #448]	; (c0ac <system_clock_init+0x23c>)
    beea:	4798      	blx	r3
    beec:	0003      	movs	r3, r0
    beee:	001a      	movs	r2, r3
    bef0:	2301      	movs	r3, #1
    bef2:	4053      	eors	r3, r2
    bef4:	b2db      	uxtb	r3, r3
    bef6:	2b00      	cmp	r3, #0
    bef8:	d1f5      	bne.n	bee6 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    befa:	4a66      	ldr	r2, [pc, #408]	; (c094 <system_clock_init+0x224>)
    befc:	8a93      	ldrh	r3, [r2, #20]
    befe:	2180      	movs	r1, #128	; 0x80
    bf00:	430b      	orrs	r3, r1
    bf02:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    bf04:	2380      	movs	r3, #128	; 0x80
    bf06:	18fb      	adds	r3, r7, r3
    bf08:	0018      	movs	r0, r3
    bf0a:	4b69      	ldr	r3, [pc, #420]	; (c0b0 <system_clock_init+0x240>)
    bf0c:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    bf0e:	2380      	movs	r3, #128	; 0x80
    bf10:	18fb      	adds	r3, r7, r3
    bf12:	2204      	movs	r2, #4
    bf14:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    bf16:	2380      	movs	r3, #128	; 0x80
    bf18:	18fb      	adds	r3, r7, r3
    bf1a:	2200      	movs	r2, #0
    bf1c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    bf1e:	4b65      	ldr	r3, [pc, #404]	; (c0b4 <system_clock_init+0x244>)
    bf20:	681b      	ldr	r3, [r3, #0]
    bf22:	0e9b      	lsrs	r3, r3, #26
    bf24:	22a4      	movs	r2, #164	; 0xa4
    bf26:	18ba      	adds	r2, r7, r2
    bf28:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    bf2a:	23a4      	movs	r3, #164	; 0xa4
    bf2c:	18fb      	adds	r3, r7, r3
    bf2e:	681b      	ldr	r3, [r3, #0]
    bf30:	2b3f      	cmp	r3, #63	; 0x3f
    bf32:	d103      	bne.n	bf3c <system_clock_init+0xcc>
		coarse = 0x1f;
    bf34:	231f      	movs	r3, #31
    bf36:	22a4      	movs	r2, #164	; 0xa4
    bf38:	18ba      	adds	r2, r7, r2
    bf3a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    bf3c:	23a4      	movs	r3, #164	; 0xa4
    bf3e:	18fb      	adds	r3, r7, r3
    bf40:	681b      	ldr	r3, [r3, #0]
    bf42:	b2da      	uxtb	r2, r3
    bf44:	2380      	movs	r3, #128	; 0x80
    bf46:	18fb      	adds	r3, r7, r3
    bf48:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    bf4a:	2380      	movs	r3, #128	; 0x80
    bf4c:	18fb      	adds	r3, r7, r3
    bf4e:	2200      	movs	r2, #0
    bf50:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    bf52:	2380      	movs	r3, #128	; 0x80
    bf54:	18fb      	adds	r3, r7, r3
    bf56:	2200      	movs	r2, #0
    bf58:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    bf5a:	2380      	movs	r3, #128	; 0x80
    bf5c:	18fb      	adds	r3, r7, r3
    bf5e:	2200      	movs	r2, #0
    bf60:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    bf62:	2380      	movs	r3, #128	; 0x80
    bf64:	18fb      	adds	r3, r7, r3
    bf66:	2200      	movs	r2, #0
    bf68:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    bf6a:	2380      	movs	r3, #128	; 0x80
    bf6c:	18fb      	adds	r3, r7, r3
    bf6e:	4a52      	ldr	r2, [pc, #328]	; (c0b8 <system_clock_init+0x248>)
    bf70:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    bf72:	2380      	movs	r3, #128	; 0x80
    bf74:	18fb      	adds	r3, r7, r3
    bf76:	2207      	movs	r2, #7
    bf78:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    bf7a:	2380      	movs	r3, #128	; 0x80
    bf7c:	18fb      	adds	r3, r7, r3
    bf7e:	223f      	movs	r2, #63	; 0x3f
    bf80:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    bf82:	2380      	movs	r3, #128	; 0x80
    bf84:	18fb      	adds	r3, r7, r3
    bf86:	0018      	movs	r0, r3
    bf88:	4b4c      	ldr	r3, [pc, #304]	; (c0bc <system_clock_init+0x24c>)
    bf8a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    bf8c:	237c      	movs	r3, #124	; 0x7c
    bf8e:	18fb      	adds	r3, r7, r3
    bf90:	0018      	movs	r0, r3
    bf92:	4b4b      	ldr	r3, [pc, #300]	; (c0c0 <system_clock_init+0x250>)
    bf94:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    bf96:	237c      	movs	r3, #124	; 0x7c
    bf98:	18fb      	adds	r3, r7, r3
    bf9a:	2200      	movs	r2, #0
    bf9c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    bf9e:	237c      	movs	r3, #124	; 0x7c
    bfa0:	18fb      	adds	r3, r7, r3
    bfa2:	2201      	movs	r2, #1
    bfa4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    bfa6:	237c      	movs	r3, #124	; 0x7c
    bfa8:	18fb      	adds	r3, r7, r3
    bfaa:	2200      	movs	r2, #0
    bfac:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    bfae:	237c      	movs	r3, #124	; 0x7c
    bfb0:	18fb      	adds	r3, r7, r3
    bfb2:	0018      	movs	r0, r3
    bfb4:	4b43      	ldr	r3, [pc, #268]	; (c0c4 <system_clock_init+0x254>)
    bfb6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    bfb8:	2006      	movs	r0, #6
    bfba:	4b3b      	ldr	r3, [pc, #236]	; (c0a8 <system_clock_init+0x238>)
    bfbc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    bfbe:	4b42      	ldr	r3, [pc, #264]	; (c0c8 <system_clock_init+0x258>)
    bfc0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    bfc2:	2364      	movs	r3, #100	; 0x64
    bfc4:	18fb      	adds	r3, r7, r3
    bfc6:	0018      	movs	r0, r3
    bfc8:	4b40      	ldr	r3, [pc, #256]	; (c0cc <system_clock_init+0x25c>)
    bfca:	4798      	blx	r3
    bfcc:	2364      	movs	r3, #100	; 0x64
    bfce:	18fb      	adds	r3, r7, r3
    bfd0:	2205      	movs	r2, #5
    bfd2:	701a      	strb	r2, [r3, #0]
    bfd4:	2364      	movs	r3, #100	; 0x64
    bfd6:	18fb      	adds	r3, r7, r3
    bfd8:	2201      	movs	r2, #1
    bfda:	605a      	str	r2, [r3, #4]
    bfdc:	2364      	movs	r3, #100	; 0x64
    bfde:	18fb      	adds	r3, r7, r3
    bfe0:	2200      	movs	r2, #0
    bfe2:	721a      	strb	r2, [r3, #8]
    bfe4:	2364      	movs	r3, #100	; 0x64
    bfe6:	18fb      	adds	r3, r7, r3
    bfe8:	2200      	movs	r2, #0
    bfea:	725a      	strb	r2, [r3, #9]
    bfec:	2364      	movs	r3, #100	; 0x64
    bfee:	18fb      	adds	r3, r7, r3
    bff0:	0019      	movs	r1, r3
    bff2:	2001      	movs	r0, #1
    bff4:	4b36      	ldr	r3, [pc, #216]	; (c0d0 <system_clock_init+0x260>)
    bff6:	4798      	blx	r3
    bff8:	2001      	movs	r0, #1
    bffa:	4b36      	ldr	r3, [pc, #216]	; (c0d4 <system_clock_init+0x264>)
    bffc:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    bffe:	230c      	movs	r3, #12
    c000:	18fb      	adds	r3, r7, r3
    c002:	0018      	movs	r0, r3
    c004:	4b34      	ldr	r3, [pc, #208]	; (c0d8 <system_clock_init+0x268>)
    c006:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    c008:	230c      	movs	r3, #12
    c00a:	18fb      	adds	r3, r7, r3
    c00c:	2201      	movs	r2, #1
    c00e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    c010:	230c      	movs	r3, #12
    c012:	18fb      	adds	r3, r7, r3
    c014:	0019      	movs	r1, r3
    c016:	2000      	movs	r0, #0
    c018:	4b30      	ldr	r3, [pc, #192]	; (c0dc <system_clock_init+0x26c>)
    c01a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    c01c:	2000      	movs	r0, #0
    c01e:	4b30      	ldr	r3, [pc, #192]	; (c0e0 <system_clock_init+0x270>)
    c020:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    c022:	2007      	movs	r0, #7
    c024:	4b20      	ldr	r3, [pc, #128]	; (c0a8 <system_clock_init+0x238>)
    c026:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    c028:	46c0      	nop			; (mov r8, r8)
    c02a:	2007      	movs	r0, #7
    c02c:	4b1f      	ldr	r3, [pc, #124]	; (c0ac <system_clock_init+0x23c>)
    c02e:	4798      	blx	r3
    c030:	0003      	movs	r3, r0
    c032:	001a      	movs	r2, r3
    c034:	2301      	movs	r3, #1
    c036:	4053      	eors	r3, r2
    c038:	b2db      	uxtb	r3, r3
    c03a:	2b00      	cmp	r3, #0
    c03c:	d1f5      	bne.n	c02a <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    c03e:	2000      	movs	r0, #0
    c040:	4b28      	ldr	r3, [pc, #160]	; (c0e4 <system_clock_init+0x274>)
    c042:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    c044:	2100      	movs	r1, #0
    c046:	2000      	movs	r0, #0
    c048:	4b27      	ldr	r3, [pc, #156]	; (c0e8 <system_clock_init+0x278>)
    c04a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    c04c:	2100      	movs	r1, #0
    c04e:	2001      	movs	r0, #1
    c050:	4b25      	ldr	r3, [pc, #148]	; (c0e8 <system_clock_init+0x278>)
    c052:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    c054:	2100      	movs	r1, #0
    c056:	2002      	movs	r0, #2
    c058:	4b23      	ldr	r3, [pc, #140]	; (c0e8 <system_clock_init+0x278>)
    c05a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    c05c:	003b      	movs	r3, r7
    c05e:	0018      	movs	r0, r3
    c060:	4b1a      	ldr	r3, [pc, #104]	; (c0cc <system_clock_init+0x25c>)
    c062:	4798      	blx	r3
    c064:	003b      	movs	r3, r7
    c066:	2207      	movs	r2, #7
    c068:	701a      	strb	r2, [r3, #0]
    c06a:	003b      	movs	r3, r7
    c06c:	2201      	movs	r2, #1
    c06e:	605a      	str	r2, [r3, #4]
    c070:	003b      	movs	r3, r7
    c072:	2200      	movs	r2, #0
    c074:	721a      	strb	r2, [r3, #8]
    c076:	003b      	movs	r3, r7
    c078:	2200      	movs	r2, #0
    c07a:	725a      	strb	r2, [r3, #9]
    c07c:	003b      	movs	r3, r7
    c07e:	0019      	movs	r1, r3
    c080:	2000      	movs	r0, #0
    c082:	4b13      	ldr	r3, [pc, #76]	; (c0d0 <system_clock_init+0x260>)
    c084:	4798      	blx	r3
    c086:	2000      	movs	r0, #0
    c088:	4b12      	ldr	r3, [pc, #72]	; (c0d4 <system_clock_init+0x264>)
    c08a:	4798      	blx	r3
#endif
}
    c08c:	46c0      	nop			; (mov r8, r8)
    c08e:	46bd      	mov	sp, r7
    c090:	b02a      	add	sp, #168	; 0xa8
    c092:	bd80      	pop	{r7, pc}
    c094:	40000800 	.word	0x40000800
    c098:	0000b951 	.word	0x0000b951
    c09c:	0000be39 	.word	0x0000be39
    c0a0:	0000b821 	.word	0x0000b821
    c0a4:	0000bb19 	.word	0x0000bb19
    c0a8:	0000bd09 	.word	0x0000bd09
    c0ac:	0000bdb5 	.word	0x0000bdb5
    c0b0:	0000b88b 	.word	0x0000b88b
    c0b4:	00806024 	.word	0x00806024
    c0b8:	000005b9 	.word	0x000005b9
    c0bc:	0000bc39 	.word	0x0000bc39
    c0c0:	0000b869 	.word	0x0000b869
    c0c4:	0000baa1 	.word	0x0000baa1
    c0c8:	0000c191 	.word	0x0000c191
    c0cc:	0000b7dd 	.word	0x0000b7dd
    c0d0:	0000c1c1 	.word	0x0000c1c1
    c0d4:	0000c2e5 	.word	0x0000c2e5
    c0d8:	0000b80b 	.word	0x0000b80b
    c0dc:	0000c419 	.word	0x0000c419
    c0e0:	0000c45d 	.word	0x0000c45d
    c0e4:	0000b8dd 	.word	0x0000b8dd
    c0e8:	0000b8fd 	.word	0x0000b8fd

0000c0ec <system_apb_clock_set_mask>:
{
    c0ec:	b580      	push	{r7, lr}
    c0ee:	b082      	sub	sp, #8
    c0f0:	af00      	add	r7, sp, #0
    c0f2:	0002      	movs	r2, r0
    c0f4:	6039      	str	r1, [r7, #0]
    c0f6:	1dfb      	adds	r3, r7, #7
    c0f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c0fa:	1dfb      	adds	r3, r7, #7
    c0fc:	781b      	ldrb	r3, [r3, #0]
    c0fe:	2b01      	cmp	r3, #1
    c100:	d00a      	beq.n	c118 <system_apb_clock_set_mask+0x2c>
    c102:	2b02      	cmp	r3, #2
    c104:	d00f      	beq.n	c126 <system_apb_clock_set_mask+0x3a>
    c106:	2b00      	cmp	r3, #0
    c108:	d114      	bne.n	c134 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c10a:	4b0e      	ldr	r3, [pc, #56]	; (c144 <system_apb_clock_set_mask+0x58>)
    c10c:	4a0d      	ldr	r2, [pc, #52]	; (c144 <system_apb_clock_set_mask+0x58>)
    c10e:	6991      	ldr	r1, [r2, #24]
    c110:	683a      	ldr	r2, [r7, #0]
    c112:	430a      	orrs	r2, r1
    c114:	619a      	str	r2, [r3, #24]
			break;
    c116:	e00f      	b.n	c138 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c118:	4b0a      	ldr	r3, [pc, #40]	; (c144 <system_apb_clock_set_mask+0x58>)
    c11a:	4a0a      	ldr	r2, [pc, #40]	; (c144 <system_apb_clock_set_mask+0x58>)
    c11c:	69d1      	ldr	r1, [r2, #28]
    c11e:	683a      	ldr	r2, [r7, #0]
    c120:	430a      	orrs	r2, r1
    c122:	61da      	str	r2, [r3, #28]
			break;
    c124:	e008      	b.n	c138 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c126:	4b07      	ldr	r3, [pc, #28]	; (c144 <system_apb_clock_set_mask+0x58>)
    c128:	4a06      	ldr	r2, [pc, #24]	; (c144 <system_apb_clock_set_mask+0x58>)
    c12a:	6a11      	ldr	r1, [r2, #32]
    c12c:	683a      	ldr	r2, [r7, #0]
    c12e:	430a      	orrs	r2, r1
    c130:	621a      	str	r2, [r3, #32]
			break;
    c132:	e001      	b.n	c138 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c134:	2317      	movs	r3, #23
    c136:	e000      	b.n	c13a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c138:	2300      	movs	r3, #0
}
    c13a:	0018      	movs	r0, r3
    c13c:	46bd      	mov	sp, r7
    c13e:	b002      	add	sp, #8
    c140:	bd80      	pop	{r7, pc}
    c142:	46c0      	nop			; (mov r8, r8)
    c144:	40000400 	.word	0x40000400

0000c148 <system_interrupt_enter_critical_section>:
{
    c148:	b580      	push	{r7, lr}
    c14a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    c14c:	4b02      	ldr	r3, [pc, #8]	; (c158 <system_interrupt_enter_critical_section+0x10>)
    c14e:	4798      	blx	r3
}
    c150:	46c0      	nop			; (mov r8, r8)
    c152:	46bd      	mov	sp, r7
    c154:	bd80      	pop	{r7, pc}
    c156:	46c0      	nop			; (mov r8, r8)
    c158:	0000b575 	.word	0x0000b575

0000c15c <system_interrupt_leave_critical_section>:
{
    c15c:	b580      	push	{r7, lr}
    c15e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    c160:	4b02      	ldr	r3, [pc, #8]	; (c16c <system_interrupt_leave_critical_section+0x10>)
    c162:	4798      	blx	r3
}
    c164:	46c0      	nop			; (mov r8, r8)
    c166:	46bd      	mov	sp, r7
    c168:	bd80      	pop	{r7, pc}
    c16a:	46c0      	nop			; (mov r8, r8)
    c16c:	0000b5c9 	.word	0x0000b5c9

0000c170 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    c170:	b580      	push	{r7, lr}
    c172:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c174:	4b05      	ldr	r3, [pc, #20]	; (c18c <system_gclk_is_syncing+0x1c>)
    c176:	785b      	ldrb	r3, [r3, #1]
    c178:	b2db      	uxtb	r3, r3
    c17a:	b25b      	sxtb	r3, r3
    c17c:	2b00      	cmp	r3, #0
    c17e:	da01      	bge.n	c184 <system_gclk_is_syncing+0x14>
		return true;
    c180:	2301      	movs	r3, #1
    c182:	e000      	b.n	c186 <system_gclk_is_syncing+0x16>
	}

	return false;
    c184:	2300      	movs	r3, #0
}
    c186:	0018      	movs	r0, r3
    c188:	46bd      	mov	sp, r7
    c18a:	bd80      	pop	{r7, pc}
    c18c:	40000c00 	.word	0x40000c00

0000c190 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    c190:	b580      	push	{r7, lr}
    c192:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    c194:	2108      	movs	r1, #8
    c196:	2000      	movs	r0, #0
    c198:	4b07      	ldr	r3, [pc, #28]	; (c1b8 <system_gclk_init+0x28>)
    c19a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    c19c:	4b07      	ldr	r3, [pc, #28]	; (c1bc <system_gclk_init+0x2c>)
    c19e:	2201      	movs	r2, #1
    c1a0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    c1a2:	46c0      	nop			; (mov r8, r8)
    c1a4:	4b05      	ldr	r3, [pc, #20]	; (c1bc <system_gclk_init+0x2c>)
    c1a6:	781b      	ldrb	r3, [r3, #0]
    c1a8:	b2db      	uxtb	r3, r3
    c1aa:	001a      	movs	r2, r3
    c1ac:	2301      	movs	r3, #1
    c1ae:	4013      	ands	r3, r2
    c1b0:	d1f8      	bne.n	c1a4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    c1b2:	46c0      	nop			; (mov r8, r8)
    c1b4:	46bd      	mov	sp, r7
    c1b6:	bd80      	pop	{r7, pc}
    c1b8:	0000c0ed 	.word	0x0000c0ed
    c1bc:	40000c00 	.word	0x40000c00

0000c1c0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    c1c0:	b580      	push	{r7, lr}
    c1c2:	b086      	sub	sp, #24
    c1c4:	af00      	add	r7, sp, #0
    c1c6:	0002      	movs	r2, r0
    c1c8:	6039      	str	r1, [r7, #0]
    c1ca:	1dfb      	adds	r3, r7, #7
    c1cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    c1ce:	1dfb      	adds	r3, r7, #7
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    c1d4:	1dfb      	adds	r3, r7, #7
    c1d6:	781b      	ldrb	r3, [r3, #0]
    c1d8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    c1da:	683b      	ldr	r3, [r7, #0]
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	021b      	lsls	r3, r3, #8
    c1e0:	001a      	movs	r2, r3
    c1e2:	697b      	ldr	r3, [r7, #20]
    c1e4:	4313      	orrs	r3, r2
    c1e6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    c1e8:	683b      	ldr	r3, [r7, #0]
    c1ea:	785b      	ldrb	r3, [r3, #1]
    c1ec:	2b00      	cmp	r3, #0
    c1ee:	d004      	beq.n	c1fa <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    c1f0:	697b      	ldr	r3, [r7, #20]
    c1f2:	2280      	movs	r2, #128	; 0x80
    c1f4:	02d2      	lsls	r2, r2, #11
    c1f6:	4313      	orrs	r3, r2
    c1f8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    c1fa:	683b      	ldr	r3, [r7, #0]
    c1fc:	7a5b      	ldrb	r3, [r3, #9]
    c1fe:	2b00      	cmp	r3, #0
    c200:	d004      	beq.n	c20c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    c202:	697b      	ldr	r3, [r7, #20]
    c204:	2280      	movs	r2, #128	; 0x80
    c206:	0312      	lsls	r2, r2, #12
    c208:	4313      	orrs	r3, r2
    c20a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    c20c:	683b      	ldr	r3, [r7, #0]
    c20e:	685b      	ldr	r3, [r3, #4]
    c210:	2b01      	cmp	r3, #1
    c212:	d92c      	bls.n	c26e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    c214:	683b      	ldr	r3, [r7, #0]
    c216:	685a      	ldr	r2, [r3, #4]
    c218:	683b      	ldr	r3, [r7, #0]
    c21a:	685b      	ldr	r3, [r3, #4]
    c21c:	3b01      	subs	r3, #1
    c21e:	4013      	ands	r3, r2
    c220:	d11a      	bne.n	c258 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    c222:	2300      	movs	r3, #0
    c224:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    c226:	2302      	movs	r3, #2
    c228:	60bb      	str	r3, [r7, #8]
    c22a:	e005      	b.n	c238 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    c22c:	68fb      	ldr	r3, [r7, #12]
    c22e:	3301      	adds	r3, #1
    c230:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    c232:	68bb      	ldr	r3, [r7, #8]
    c234:	005b      	lsls	r3, r3, #1
    c236:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    c238:	683b      	ldr	r3, [r7, #0]
    c23a:	685a      	ldr	r2, [r3, #4]
    c23c:	68bb      	ldr	r3, [r7, #8]
    c23e:	429a      	cmp	r2, r3
    c240:	d8f4      	bhi.n	c22c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    c242:	68fb      	ldr	r3, [r7, #12]
    c244:	021b      	lsls	r3, r3, #8
    c246:	693a      	ldr	r2, [r7, #16]
    c248:	4313      	orrs	r3, r2
    c24a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    c24c:	697b      	ldr	r3, [r7, #20]
    c24e:	2280      	movs	r2, #128	; 0x80
    c250:	0352      	lsls	r2, r2, #13
    c252:	4313      	orrs	r3, r2
    c254:	617b      	str	r3, [r7, #20]
    c256:	e00a      	b.n	c26e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    c258:	683b      	ldr	r3, [r7, #0]
    c25a:	685b      	ldr	r3, [r3, #4]
    c25c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    c25e:	693a      	ldr	r2, [r7, #16]
    c260:	4313      	orrs	r3, r2
    c262:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    c264:	697b      	ldr	r3, [r7, #20]
    c266:	2280      	movs	r2, #128	; 0x80
    c268:	0292      	lsls	r2, r2, #10
    c26a:	4313      	orrs	r3, r2
    c26c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    c26e:	683b      	ldr	r3, [r7, #0]
    c270:	7a1b      	ldrb	r3, [r3, #8]
    c272:	2b00      	cmp	r3, #0
    c274:	d004      	beq.n	c280 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    c276:	697b      	ldr	r3, [r7, #20]
    c278:	2280      	movs	r2, #128	; 0x80
    c27a:	0392      	lsls	r2, r2, #14
    c27c:	4313      	orrs	r3, r2
    c27e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    c280:	46c0      	nop			; (mov r8, r8)
    c282:	4b13      	ldr	r3, [pc, #76]	; (c2d0 <system_gclk_gen_set_config+0x110>)
    c284:	4798      	blx	r3
    c286:	1e03      	subs	r3, r0, #0
    c288:	d1fb      	bne.n	c282 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c28a:	4b12      	ldr	r3, [pc, #72]	; (c2d4 <system_gclk_gen_set_config+0x114>)
    c28c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c28e:	4a12      	ldr	r2, [pc, #72]	; (c2d8 <system_gclk_gen_set_config+0x118>)
    c290:	1dfb      	adds	r3, r7, #7
    c292:	781b      	ldrb	r3, [r3, #0]
    c294:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    c296:	46c0      	nop			; (mov r8, r8)
    c298:	4b0d      	ldr	r3, [pc, #52]	; (c2d0 <system_gclk_gen_set_config+0x110>)
    c29a:	4798      	blx	r3
    c29c:	1e03      	subs	r3, r0, #0
    c29e:	d1fb      	bne.n	c298 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    c2a0:	4b0e      	ldr	r3, [pc, #56]	; (c2dc <system_gclk_gen_set_config+0x11c>)
    c2a2:	693a      	ldr	r2, [r7, #16]
    c2a4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    c2a6:	46c0      	nop			; (mov r8, r8)
    c2a8:	4b09      	ldr	r3, [pc, #36]	; (c2d0 <system_gclk_gen_set_config+0x110>)
    c2aa:	4798      	blx	r3
    c2ac:	1e03      	subs	r3, r0, #0
    c2ae:	d1fb      	bne.n	c2a8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    c2b0:	4b0a      	ldr	r3, [pc, #40]	; (c2dc <system_gclk_gen_set_config+0x11c>)
    c2b2:	4a0a      	ldr	r2, [pc, #40]	; (c2dc <system_gclk_gen_set_config+0x11c>)
    c2b4:	6851      	ldr	r1, [r2, #4]
    c2b6:	2280      	movs	r2, #128	; 0x80
    c2b8:	0252      	lsls	r2, r2, #9
    c2ba:	4011      	ands	r1, r2
    c2bc:	697a      	ldr	r2, [r7, #20]
    c2be:	430a      	orrs	r2, r1
    c2c0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c2c2:	4b07      	ldr	r3, [pc, #28]	; (c2e0 <system_gclk_gen_set_config+0x120>)
    c2c4:	4798      	blx	r3
}
    c2c6:	46c0      	nop			; (mov r8, r8)
    c2c8:	46bd      	mov	sp, r7
    c2ca:	b006      	add	sp, #24
    c2cc:	bd80      	pop	{r7, pc}
    c2ce:	46c0      	nop			; (mov r8, r8)
    c2d0:	0000c171 	.word	0x0000c171
    c2d4:	0000c149 	.word	0x0000c149
    c2d8:	40000c08 	.word	0x40000c08
    c2dc:	40000c00 	.word	0x40000c00
    c2e0:	0000c15d 	.word	0x0000c15d

0000c2e4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    c2e4:	b580      	push	{r7, lr}
    c2e6:	b082      	sub	sp, #8
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	0002      	movs	r2, r0
    c2ec:	1dfb      	adds	r3, r7, #7
    c2ee:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c2f0:	46c0      	nop			; (mov r8, r8)
    c2f2:	4b0e      	ldr	r3, [pc, #56]	; (c32c <system_gclk_gen_enable+0x48>)
    c2f4:	4798      	blx	r3
    c2f6:	1e03      	subs	r3, r0, #0
    c2f8:	d1fb      	bne.n	c2f2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c2fa:	4b0d      	ldr	r3, [pc, #52]	; (c330 <system_gclk_gen_enable+0x4c>)
    c2fc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c2fe:	4a0d      	ldr	r2, [pc, #52]	; (c334 <system_gclk_gen_enable+0x50>)
    c300:	1dfb      	adds	r3, r7, #7
    c302:	781b      	ldrb	r3, [r3, #0]
    c304:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c306:	46c0      	nop			; (mov r8, r8)
    c308:	4b08      	ldr	r3, [pc, #32]	; (c32c <system_gclk_gen_enable+0x48>)
    c30a:	4798      	blx	r3
    c30c:	1e03      	subs	r3, r0, #0
    c30e:	d1fb      	bne.n	c308 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    c310:	4b09      	ldr	r3, [pc, #36]	; (c338 <system_gclk_gen_enable+0x54>)
    c312:	4a09      	ldr	r2, [pc, #36]	; (c338 <system_gclk_gen_enable+0x54>)
    c314:	6852      	ldr	r2, [r2, #4]
    c316:	2180      	movs	r1, #128	; 0x80
    c318:	0249      	lsls	r1, r1, #9
    c31a:	430a      	orrs	r2, r1
    c31c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c31e:	4b07      	ldr	r3, [pc, #28]	; (c33c <system_gclk_gen_enable+0x58>)
    c320:	4798      	blx	r3
}
    c322:	46c0      	nop			; (mov r8, r8)
    c324:	46bd      	mov	sp, r7
    c326:	b002      	add	sp, #8
    c328:	bd80      	pop	{r7, pc}
    c32a:	46c0      	nop			; (mov r8, r8)
    c32c:	0000c171 	.word	0x0000c171
    c330:	0000c149 	.word	0x0000c149
    c334:	40000c04 	.word	0x40000c04
    c338:	40000c00 	.word	0x40000c00
    c33c:	0000c15d 	.word	0x0000c15d

0000c340 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    c340:	b580      	push	{r7, lr}
    c342:	b086      	sub	sp, #24
    c344:	af00      	add	r7, sp, #0
    c346:	0002      	movs	r2, r0
    c348:	1dfb      	adds	r3, r7, #7
    c34a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c34c:	46c0      	nop			; (mov r8, r8)
    c34e:	4b2a      	ldr	r3, [pc, #168]	; (c3f8 <system_gclk_gen_get_hz+0xb8>)
    c350:	4798      	blx	r3
    c352:	1e03      	subs	r3, r0, #0
    c354:	d1fb      	bne.n	c34e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c356:	4b29      	ldr	r3, [pc, #164]	; (c3fc <system_gclk_gen_get_hz+0xbc>)
    c358:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c35a:	4a29      	ldr	r2, [pc, #164]	; (c400 <system_gclk_gen_get_hz+0xc0>)
    c35c:	1dfb      	adds	r3, r7, #7
    c35e:	781b      	ldrb	r3, [r3, #0]
    c360:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c362:	46c0      	nop			; (mov r8, r8)
    c364:	4b24      	ldr	r3, [pc, #144]	; (c3f8 <system_gclk_gen_get_hz+0xb8>)
    c366:	4798      	blx	r3
    c368:	1e03      	subs	r3, r0, #0
    c36a:	d1fb      	bne.n	c364 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    c36c:	4b25      	ldr	r3, [pc, #148]	; (c404 <system_gclk_gen_get_hz+0xc4>)
    c36e:	685b      	ldr	r3, [r3, #4]
    c370:	04db      	lsls	r3, r3, #19
    c372:	0edb      	lsrs	r3, r3, #27
    c374:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    c376:	0018      	movs	r0, r3
    c378:	4b23      	ldr	r3, [pc, #140]	; (c408 <system_gclk_gen_get_hz+0xc8>)
    c37a:	4798      	blx	r3
    c37c:	0003      	movs	r3, r0
    c37e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c380:	4a1f      	ldr	r2, [pc, #124]	; (c400 <system_gclk_gen_get_hz+0xc0>)
    c382:	1dfb      	adds	r3, r7, #7
    c384:	781b      	ldrb	r3, [r3, #0]
    c386:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    c388:	4b1e      	ldr	r3, [pc, #120]	; (c404 <system_gclk_gen_get_hz+0xc4>)
    c38a:	685b      	ldr	r3, [r3, #4]
    c38c:	02db      	lsls	r3, r3, #11
    c38e:	0fdb      	lsrs	r3, r3, #31
    c390:	b2da      	uxtb	r2, r3
    c392:	2313      	movs	r3, #19
    c394:	18fb      	adds	r3, r7, r3
    c396:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c398:	4a1c      	ldr	r2, [pc, #112]	; (c40c <system_gclk_gen_get_hz+0xcc>)
    c39a:	1dfb      	adds	r3, r7, #7
    c39c:	781b      	ldrb	r3, [r3, #0]
    c39e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c3a0:	46c0      	nop			; (mov r8, r8)
    c3a2:	4b15      	ldr	r3, [pc, #84]	; (c3f8 <system_gclk_gen_get_hz+0xb8>)
    c3a4:	4798      	blx	r3
    c3a6:	1e03      	subs	r3, r0, #0
    c3a8:	d1fb      	bne.n	c3a2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    c3aa:	4b16      	ldr	r3, [pc, #88]	; (c404 <system_gclk_gen_get_hz+0xc4>)
    c3ac:	689b      	ldr	r3, [r3, #8]
    c3ae:	021b      	lsls	r3, r3, #8
    c3b0:	0c1b      	lsrs	r3, r3, #16
    c3b2:	b29b      	uxth	r3, r3
    c3b4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    c3b6:	4b16      	ldr	r3, [pc, #88]	; (c410 <system_gclk_gen_get_hz+0xd0>)
    c3b8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    c3ba:	2313      	movs	r3, #19
    c3bc:	18fb      	adds	r3, r7, r3
    c3be:	781b      	ldrb	r3, [r3, #0]
    c3c0:	2b00      	cmp	r3, #0
    c3c2:	d109      	bne.n	c3d8 <system_gclk_gen_get_hz+0x98>
    c3c4:	68fb      	ldr	r3, [r7, #12]
    c3c6:	2b01      	cmp	r3, #1
    c3c8:	d906      	bls.n	c3d8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    c3ca:	4b12      	ldr	r3, [pc, #72]	; (c414 <system_gclk_gen_get_hz+0xd4>)
    c3cc:	68f9      	ldr	r1, [r7, #12]
    c3ce:	6978      	ldr	r0, [r7, #20]
    c3d0:	4798      	blx	r3
    c3d2:	0003      	movs	r3, r0
    c3d4:	617b      	str	r3, [r7, #20]
    c3d6:	e00a      	b.n	c3ee <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    c3d8:	2313      	movs	r3, #19
    c3da:	18fb      	adds	r3, r7, r3
    c3dc:	781b      	ldrb	r3, [r3, #0]
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d005      	beq.n	c3ee <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    c3e2:	68fb      	ldr	r3, [r7, #12]
    c3e4:	3301      	adds	r3, #1
    c3e6:	697a      	ldr	r2, [r7, #20]
    c3e8:	40da      	lsrs	r2, r3
    c3ea:	0013      	movs	r3, r2
    c3ec:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    c3ee:	697b      	ldr	r3, [r7, #20]
}
    c3f0:	0018      	movs	r0, r3
    c3f2:	46bd      	mov	sp, r7
    c3f4:	b006      	add	sp, #24
    c3f6:	bd80      	pop	{r7, pc}
    c3f8:	0000c171 	.word	0x0000c171
    c3fc:	0000c149 	.word	0x0000c149
    c400:	40000c04 	.word	0x40000c04
    c404:	40000c00 	.word	0x40000c00
    c408:	0000b9e5 	.word	0x0000b9e5
    c40c:	40000c08 	.word	0x40000c08
    c410:	0000c15d 	.word	0x0000c15d
    c414:	0001135d 	.word	0x0001135d

0000c418 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    c418:	b580      	push	{r7, lr}
    c41a:	b084      	sub	sp, #16
    c41c:	af00      	add	r7, sp, #0
    c41e:	0002      	movs	r2, r0
    c420:	6039      	str	r1, [r7, #0]
    c422:	1dfb      	adds	r3, r7, #7
    c424:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    c426:	1dfb      	adds	r3, r7, #7
    c428:	781b      	ldrb	r3, [r3, #0]
    c42a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    c42c:	683b      	ldr	r3, [r7, #0]
    c42e:	781b      	ldrb	r3, [r3, #0]
    c430:	021b      	lsls	r3, r3, #8
    c432:	001a      	movs	r2, r3
    c434:	68fb      	ldr	r3, [r7, #12]
    c436:	4313      	orrs	r3, r2
    c438:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    c43a:	1dfb      	adds	r3, r7, #7
    c43c:	781b      	ldrb	r3, [r3, #0]
    c43e:	0018      	movs	r0, r3
    c440:	4b04      	ldr	r3, [pc, #16]	; (c454 <system_gclk_chan_set_config+0x3c>)
    c442:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    c444:	4b04      	ldr	r3, [pc, #16]	; (c458 <system_gclk_chan_set_config+0x40>)
    c446:	68fa      	ldr	r2, [r7, #12]
    c448:	b292      	uxth	r2, r2
    c44a:	805a      	strh	r2, [r3, #2]
}
    c44c:	46c0      	nop			; (mov r8, r8)
    c44e:	46bd      	mov	sp, r7
    c450:	b004      	add	sp, #16
    c452:	bd80      	pop	{r7, pc}
    c454:	0000c4a5 	.word	0x0000c4a5
    c458:	40000c00 	.word	0x40000c00

0000c45c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    c45c:	b580      	push	{r7, lr}
    c45e:	b082      	sub	sp, #8
    c460:	af00      	add	r7, sp, #0
    c462:	0002      	movs	r2, r0
    c464:	1dfb      	adds	r3, r7, #7
    c466:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c468:	4b0a      	ldr	r3, [pc, #40]	; (c494 <system_gclk_chan_enable+0x38>)
    c46a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c46c:	4a0a      	ldr	r2, [pc, #40]	; (c498 <system_gclk_chan_enable+0x3c>)
    c46e:	1dfb      	adds	r3, r7, #7
    c470:	781b      	ldrb	r3, [r3, #0]
    c472:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    c474:	4909      	ldr	r1, [pc, #36]	; (c49c <system_gclk_chan_enable+0x40>)
    c476:	4b09      	ldr	r3, [pc, #36]	; (c49c <system_gclk_chan_enable+0x40>)
    c478:	885b      	ldrh	r3, [r3, #2]
    c47a:	b29b      	uxth	r3, r3
    c47c:	2280      	movs	r2, #128	; 0x80
    c47e:	01d2      	lsls	r2, r2, #7
    c480:	4313      	orrs	r3, r2
    c482:	b29b      	uxth	r3, r3
    c484:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    c486:	4b06      	ldr	r3, [pc, #24]	; (c4a0 <system_gclk_chan_enable+0x44>)
    c488:	4798      	blx	r3
}
    c48a:	46c0      	nop			; (mov r8, r8)
    c48c:	46bd      	mov	sp, r7
    c48e:	b002      	add	sp, #8
    c490:	bd80      	pop	{r7, pc}
    c492:	46c0      	nop			; (mov r8, r8)
    c494:	0000c149 	.word	0x0000c149
    c498:	40000c02 	.word	0x40000c02
    c49c:	40000c00 	.word	0x40000c00
    c4a0:	0000c15d 	.word	0x0000c15d

0000c4a4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    c4a4:	b580      	push	{r7, lr}
    c4a6:	b084      	sub	sp, #16
    c4a8:	af00      	add	r7, sp, #0
    c4aa:	0002      	movs	r2, r0
    c4ac:	1dfb      	adds	r3, r7, #7
    c4ae:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c4b0:	4b1c      	ldr	r3, [pc, #112]	; (c524 <system_gclk_chan_disable+0x80>)
    c4b2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c4b4:	4a1c      	ldr	r2, [pc, #112]	; (c528 <system_gclk_chan_disable+0x84>)
    c4b6:	1dfb      	adds	r3, r7, #7
    c4b8:	781b      	ldrb	r3, [r3, #0]
    c4ba:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    c4bc:	4b1b      	ldr	r3, [pc, #108]	; (c52c <system_gclk_chan_disable+0x88>)
    c4be:	885b      	ldrh	r3, [r3, #2]
    c4c0:	051b      	lsls	r3, r3, #20
    c4c2:	0f1b      	lsrs	r3, r3, #28
    c4c4:	b2db      	uxtb	r3, r3
    c4c6:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    c4c8:	4a18      	ldr	r2, [pc, #96]	; (c52c <system_gclk_chan_disable+0x88>)
    c4ca:	8853      	ldrh	r3, [r2, #2]
    c4cc:	4918      	ldr	r1, [pc, #96]	; (c530 <system_gclk_chan_disable+0x8c>)
    c4ce:	400b      	ands	r3, r1
    c4d0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    c4d2:	4a16      	ldr	r2, [pc, #88]	; (c52c <system_gclk_chan_disable+0x88>)
    c4d4:	4b15      	ldr	r3, [pc, #84]	; (c52c <system_gclk_chan_disable+0x88>)
    c4d6:	885b      	ldrh	r3, [r3, #2]
    c4d8:	b29b      	uxth	r3, r3
    c4da:	4916      	ldr	r1, [pc, #88]	; (c534 <system_gclk_chan_disable+0x90>)
    c4dc:	400b      	ands	r3, r1
    c4de:	b29b      	uxth	r3, r3
    c4e0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    c4e2:	46c0      	nop			; (mov r8, r8)
    c4e4:	4b11      	ldr	r3, [pc, #68]	; (c52c <system_gclk_chan_disable+0x88>)
    c4e6:	885b      	ldrh	r3, [r3, #2]
    c4e8:	b29b      	uxth	r3, r3
    c4ea:	001a      	movs	r2, r3
    c4ec:	2380      	movs	r3, #128	; 0x80
    c4ee:	01db      	lsls	r3, r3, #7
    c4f0:	4013      	ands	r3, r2
    c4f2:	d1f7      	bne.n	c4e4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    c4f4:	4a0d      	ldr	r2, [pc, #52]	; (c52c <system_gclk_chan_disable+0x88>)
    c4f6:	68fb      	ldr	r3, [r7, #12]
    c4f8:	b2db      	uxtb	r3, r3
    c4fa:	1c19      	adds	r1, r3, #0
    c4fc:	230f      	movs	r3, #15
    c4fe:	400b      	ands	r3, r1
    c500:	b2d9      	uxtb	r1, r3
    c502:	8853      	ldrh	r3, [r2, #2]
    c504:	1c08      	adds	r0, r1, #0
    c506:	210f      	movs	r1, #15
    c508:	4001      	ands	r1, r0
    c50a:	0208      	lsls	r0, r1, #8
    c50c:	4908      	ldr	r1, [pc, #32]	; (c530 <system_gclk_chan_disable+0x8c>)
    c50e:	400b      	ands	r3, r1
    c510:	1c19      	adds	r1, r3, #0
    c512:	1c03      	adds	r3, r0, #0
    c514:	430b      	orrs	r3, r1
    c516:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    c518:	4b07      	ldr	r3, [pc, #28]	; (c538 <system_gclk_chan_disable+0x94>)
    c51a:	4798      	blx	r3
}
    c51c:	46c0      	nop			; (mov r8, r8)
    c51e:	46bd      	mov	sp, r7
    c520:	b004      	add	sp, #16
    c522:	bd80      	pop	{r7, pc}
    c524:	0000c149 	.word	0x0000c149
    c528:	40000c02 	.word	0x40000c02
    c52c:	40000c00 	.word	0x40000c00
    c530:	fffff0ff 	.word	0xfffff0ff
    c534:	ffffbfff 	.word	0xffffbfff
    c538:	0000c15d 	.word	0x0000c15d

0000c53c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    c53c:	b580      	push	{r7, lr}
    c53e:	b084      	sub	sp, #16
    c540:	af00      	add	r7, sp, #0
    c542:	0002      	movs	r2, r0
    c544:	1dfb      	adds	r3, r7, #7
    c546:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    c548:	4b0d      	ldr	r3, [pc, #52]	; (c580 <system_gclk_chan_get_hz+0x44>)
    c54a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c54c:	4a0d      	ldr	r2, [pc, #52]	; (c584 <system_gclk_chan_get_hz+0x48>)
    c54e:	1dfb      	adds	r3, r7, #7
    c550:	781b      	ldrb	r3, [r3, #0]
    c552:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    c554:	4b0c      	ldr	r3, [pc, #48]	; (c588 <system_gclk_chan_get_hz+0x4c>)
    c556:	885b      	ldrh	r3, [r3, #2]
    c558:	051b      	lsls	r3, r3, #20
    c55a:	0f1b      	lsrs	r3, r3, #28
    c55c:	b2da      	uxtb	r2, r3
    c55e:	230f      	movs	r3, #15
    c560:	18fb      	adds	r3, r7, r3
    c562:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    c564:	4b09      	ldr	r3, [pc, #36]	; (c58c <system_gclk_chan_get_hz+0x50>)
    c566:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    c568:	230f      	movs	r3, #15
    c56a:	18fb      	adds	r3, r7, r3
    c56c:	781b      	ldrb	r3, [r3, #0]
    c56e:	0018      	movs	r0, r3
    c570:	4b07      	ldr	r3, [pc, #28]	; (c590 <system_gclk_chan_get_hz+0x54>)
    c572:	4798      	blx	r3
    c574:	0003      	movs	r3, r0
}
    c576:	0018      	movs	r0, r3
    c578:	46bd      	mov	sp, r7
    c57a:	b004      	add	sp, #16
    c57c:	bd80      	pop	{r7, pc}
    c57e:	46c0      	nop			; (mov r8, r8)
    c580:	0000c149 	.word	0x0000c149
    c584:	40000c02 	.word	0x40000c02
    c588:	40000c00 	.word	0x40000c00
    c58c:	0000c15d 	.word	0x0000c15d
    c590:	0000c341 	.word	0x0000c341

0000c594 <system_pinmux_get_group_from_gpio_pin>:
{
    c594:	b580      	push	{r7, lr}
    c596:	b084      	sub	sp, #16
    c598:	af00      	add	r7, sp, #0
    c59a:	0002      	movs	r2, r0
    c59c:	1dfb      	adds	r3, r7, #7
    c59e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c5a0:	230f      	movs	r3, #15
    c5a2:	18fb      	adds	r3, r7, r3
    c5a4:	1dfa      	adds	r2, r7, #7
    c5a6:	7812      	ldrb	r2, [r2, #0]
    c5a8:	09d2      	lsrs	r2, r2, #7
    c5aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c5ac:	230e      	movs	r3, #14
    c5ae:	18fb      	adds	r3, r7, r3
    c5b0:	1dfa      	adds	r2, r7, #7
    c5b2:	7812      	ldrb	r2, [r2, #0]
    c5b4:	0952      	lsrs	r2, r2, #5
    c5b6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c5b8:	4b0d      	ldr	r3, [pc, #52]	; (c5f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c5ba:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c5bc:	230f      	movs	r3, #15
    c5be:	18fb      	adds	r3, r7, r3
    c5c0:	781b      	ldrb	r3, [r3, #0]
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	d10f      	bne.n	c5e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c5c6:	230f      	movs	r3, #15
    c5c8:	18fb      	adds	r3, r7, r3
    c5ca:	781b      	ldrb	r3, [r3, #0]
    c5cc:	009b      	lsls	r3, r3, #2
    c5ce:	2210      	movs	r2, #16
    c5d0:	4694      	mov	ip, r2
    c5d2:	44bc      	add	ip, r7
    c5d4:	4463      	add	r3, ip
    c5d6:	3b08      	subs	r3, #8
    c5d8:	681a      	ldr	r2, [r3, #0]
    c5da:	230e      	movs	r3, #14
    c5dc:	18fb      	adds	r3, r7, r3
    c5de:	781b      	ldrb	r3, [r3, #0]
    c5e0:	01db      	lsls	r3, r3, #7
    c5e2:	18d3      	adds	r3, r2, r3
    c5e4:	e000      	b.n	c5e8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c5e6:	2300      	movs	r3, #0
}
    c5e8:	0018      	movs	r0, r3
    c5ea:	46bd      	mov	sp, r7
    c5ec:	b004      	add	sp, #16
    c5ee:	bd80      	pop	{r7, pc}
    c5f0:	41004400 	.word	0x41004400

0000c5f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    c5f4:	b580      	push	{r7, lr}
    c5f6:	b088      	sub	sp, #32
    c5f8:	af00      	add	r7, sp, #0
    c5fa:	60f8      	str	r0, [r7, #12]
    c5fc:	60b9      	str	r1, [r7, #8]
    c5fe:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    c600:	2300      	movs	r3, #0
    c602:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    c604:	687b      	ldr	r3, [r7, #4]
    c606:	78db      	ldrb	r3, [r3, #3]
    c608:	2201      	movs	r2, #1
    c60a:	4053      	eors	r3, r2
    c60c:	b2db      	uxtb	r3, r3
    c60e:	2b00      	cmp	r3, #0
    c610:	d035      	beq.n	c67e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    c612:	687b      	ldr	r3, [r7, #4]
    c614:	781b      	ldrb	r3, [r3, #0]
    c616:	2b80      	cmp	r3, #128	; 0x80
    c618:	d00b      	beq.n	c632 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    c61a:	69fb      	ldr	r3, [r7, #28]
    c61c:	2280      	movs	r2, #128	; 0x80
    c61e:	0252      	lsls	r2, r2, #9
    c620:	4313      	orrs	r3, r2
    c622:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    c624:	687b      	ldr	r3, [r7, #4]
    c626:	781b      	ldrb	r3, [r3, #0]
    c628:	061b      	lsls	r3, r3, #24
    c62a:	001a      	movs	r2, r3
    c62c:	69fb      	ldr	r3, [r7, #28]
    c62e:	4313      	orrs	r3, r2
    c630:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	785b      	ldrb	r3, [r3, #1]
    c636:	2b00      	cmp	r3, #0
    c638:	d003      	beq.n	c642 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c63a:	687b      	ldr	r3, [r7, #4]
    c63c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c63e:	2b02      	cmp	r3, #2
    c640:	d110      	bne.n	c664 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    c642:	69fb      	ldr	r3, [r7, #28]
    c644:	2280      	movs	r2, #128	; 0x80
    c646:	0292      	lsls	r2, r2, #10
    c648:	4313      	orrs	r3, r2
    c64a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    c64c:	687b      	ldr	r3, [r7, #4]
    c64e:	789b      	ldrb	r3, [r3, #2]
    c650:	2b00      	cmp	r3, #0
    c652:	d004      	beq.n	c65e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    c654:	69fb      	ldr	r3, [r7, #28]
    c656:	2280      	movs	r2, #128	; 0x80
    c658:	02d2      	lsls	r2, r2, #11
    c65a:	4313      	orrs	r3, r2
    c65c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    c65e:	68fb      	ldr	r3, [r7, #12]
    c660:	68ba      	ldr	r2, [r7, #8]
    c662:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c664:	687b      	ldr	r3, [r7, #4]
    c666:	785b      	ldrb	r3, [r3, #1]
    c668:	2b01      	cmp	r3, #1
    c66a:	d003      	beq.n	c674 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c66c:	687b      	ldr	r3, [r7, #4]
    c66e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c670:	2b02      	cmp	r3, #2
    c672:	d107      	bne.n	c684 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    c674:	69fb      	ldr	r3, [r7, #28]
    c676:	4a22      	ldr	r2, [pc, #136]	; (c700 <_system_pinmux_config+0x10c>)
    c678:	4013      	ands	r3, r2
    c67a:	61fb      	str	r3, [r7, #28]
    c67c:	e002      	b.n	c684 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    c67e:	68fb      	ldr	r3, [r7, #12]
    c680:	68ba      	ldr	r2, [r7, #8]
    c682:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    c684:	68bb      	ldr	r3, [r7, #8]
    c686:	041b      	lsls	r3, r3, #16
    c688:	0c1b      	lsrs	r3, r3, #16
    c68a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    c68c:	68bb      	ldr	r3, [r7, #8]
    c68e:	0c1b      	lsrs	r3, r3, #16
    c690:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c692:	69ba      	ldr	r2, [r7, #24]
    c694:	69fb      	ldr	r3, [r7, #28]
    c696:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    c698:	22a0      	movs	r2, #160	; 0xa0
    c69a:	05d2      	lsls	r2, r2, #23
    c69c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c69e:	68fb      	ldr	r3, [r7, #12]
    c6a0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c6a2:	697a      	ldr	r2, [r7, #20]
    c6a4:	69fb      	ldr	r3, [r7, #28]
    c6a6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    c6a8:	22d0      	movs	r2, #208	; 0xd0
    c6aa:	0612      	lsls	r2, r2, #24
    c6ac:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c6ae:	68fb      	ldr	r3, [r7, #12]
    c6b0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    c6b2:	687b      	ldr	r3, [r7, #4]
    c6b4:	78db      	ldrb	r3, [r3, #3]
    c6b6:	2201      	movs	r2, #1
    c6b8:	4053      	eors	r3, r2
    c6ba:	b2db      	uxtb	r3, r3
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d01a      	beq.n	c6f6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    c6c0:	69fa      	ldr	r2, [r7, #28]
    c6c2:	2380      	movs	r3, #128	; 0x80
    c6c4:	02db      	lsls	r3, r3, #11
    c6c6:	4013      	ands	r3, r2
    c6c8:	d00a      	beq.n	c6e0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    c6ca:	687b      	ldr	r3, [r7, #4]
    c6cc:	789b      	ldrb	r3, [r3, #2]
    c6ce:	2b01      	cmp	r3, #1
    c6d0:	d103      	bne.n	c6da <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    c6d2:	68fb      	ldr	r3, [r7, #12]
    c6d4:	68ba      	ldr	r2, [r7, #8]
    c6d6:	619a      	str	r2, [r3, #24]
    c6d8:	e002      	b.n	c6e0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    c6da:	68fb      	ldr	r3, [r7, #12]
    c6dc:	68ba      	ldr	r2, [r7, #8]
    c6de:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c6e0:	687b      	ldr	r3, [r7, #4]
    c6e2:	785b      	ldrb	r3, [r3, #1]
    c6e4:	2b01      	cmp	r3, #1
    c6e6:	d003      	beq.n	c6f0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    c6e8:	687b      	ldr	r3, [r7, #4]
    c6ea:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c6ec:	2b02      	cmp	r3, #2
    c6ee:	d102      	bne.n	c6f6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    c6f0:	68fb      	ldr	r3, [r7, #12]
    c6f2:	68ba      	ldr	r2, [r7, #8]
    c6f4:	609a      	str	r2, [r3, #8]
		}
	}
}
    c6f6:	46c0      	nop			; (mov r8, r8)
    c6f8:	46bd      	mov	sp, r7
    c6fa:	b008      	add	sp, #32
    c6fc:	bd80      	pop	{r7, pc}
    c6fe:	46c0      	nop			; (mov r8, r8)
    c700:	fffbffff 	.word	0xfffbffff

0000c704 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    c704:	b580      	push	{r7, lr}
    c706:	b084      	sub	sp, #16
    c708:	af00      	add	r7, sp, #0
    c70a:	0002      	movs	r2, r0
    c70c:	6039      	str	r1, [r7, #0]
    c70e:	1dfb      	adds	r3, r7, #7
    c710:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c712:	1dfb      	adds	r3, r7, #7
    c714:	781b      	ldrb	r3, [r3, #0]
    c716:	0018      	movs	r0, r3
    c718:	4b0a      	ldr	r3, [pc, #40]	; (c744 <system_pinmux_pin_set_config+0x40>)
    c71a:	4798      	blx	r3
    c71c:	0003      	movs	r3, r0
    c71e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    c720:	1dfb      	adds	r3, r7, #7
    c722:	781b      	ldrb	r3, [r3, #0]
    c724:	221f      	movs	r2, #31
    c726:	4013      	ands	r3, r2
    c728:	2201      	movs	r2, #1
    c72a:	409a      	lsls	r2, r3
    c72c:	0013      	movs	r3, r2
    c72e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    c730:	683a      	ldr	r2, [r7, #0]
    c732:	68b9      	ldr	r1, [r7, #8]
    c734:	68fb      	ldr	r3, [r7, #12]
    c736:	0018      	movs	r0, r3
    c738:	4b03      	ldr	r3, [pc, #12]	; (c748 <system_pinmux_pin_set_config+0x44>)
    c73a:	4798      	blx	r3
}
    c73c:	46c0      	nop			; (mov r8, r8)
    c73e:	46bd      	mov	sp, r7
    c740:	b004      	add	sp, #16
    c742:	bd80      	pop	{r7, pc}
    c744:	0000c595 	.word	0x0000c595
    c748:	0000c5f5 	.word	0x0000c5f5

0000c74c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    c74c:	b580      	push	{r7, lr}
    c74e:	af00      	add	r7, sp, #0
	return;
    c750:	46c0      	nop			; (mov r8, r8)
}
    c752:	46bd      	mov	sp, r7
    c754:	bd80      	pop	{r7, pc}
	...

0000c758 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    c758:	b580      	push	{r7, lr}
    c75a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    c75c:	4b06      	ldr	r3, [pc, #24]	; (c778 <system_init+0x20>)
    c75e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    c760:	4b06      	ldr	r3, [pc, #24]	; (c77c <system_init+0x24>)
    c762:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    c764:	4b06      	ldr	r3, [pc, #24]	; (c780 <system_init+0x28>)
    c766:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    c768:	4b06      	ldr	r3, [pc, #24]	; (c784 <system_init+0x2c>)
    c76a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    c76c:	4b06      	ldr	r3, [pc, #24]	; (c788 <system_init+0x30>)
    c76e:	4798      	blx	r3
}
    c770:	46c0      	nop			; (mov r8, r8)
    c772:	46bd      	mov	sp, r7
    c774:	bd80      	pop	{r7, pc}
    c776:	46c0      	nop			; (mov r8, r8)
    c778:	0000be71 	.word	0x0000be71
    c77c:	0000b705 	.word	0x0000b705
    c780:	0000c74d 	.word	0x0000c74d
    c784:	00005de1 	.word	0x00005de1
    c788:	0000c74d 	.word	0x0000c74d

0000c78c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    c78c:	b580      	push	{r7, lr}
    c78e:	b082      	sub	sp, #8
    c790:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    c792:	4b2f      	ldr	r3, [pc, #188]	; (c850 <Reset_Handler+0xc4>)
    c794:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    c796:	4b2f      	ldr	r3, [pc, #188]	; (c854 <Reset_Handler+0xc8>)
    c798:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    c79a:	687a      	ldr	r2, [r7, #4]
    c79c:	683b      	ldr	r3, [r7, #0]
    c79e:	429a      	cmp	r2, r3
    c7a0:	d00c      	beq.n	c7bc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    c7a2:	e007      	b.n	c7b4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    c7a4:	683b      	ldr	r3, [r7, #0]
    c7a6:	1d1a      	adds	r2, r3, #4
    c7a8:	603a      	str	r2, [r7, #0]
    c7aa:	687a      	ldr	r2, [r7, #4]
    c7ac:	1d11      	adds	r1, r2, #4
    c7ae:	6079      	str	r1, [r7, #4]
    c7b0:	6812      	ldr	r2, [r2, #0]
    c7b2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    c7b4:	683a      	ldr	r2, [r7, #0]
    c7b6:	4b28      	ldr	r3, [pc, #160]	; (c858 <Reset_Handler+0xcc>)
    c7b8:	429a      	cmp	r2, r3
    c7ba:	d3f3      	bcc.n	c7a4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    c7bc:	4b27      	ldr	r3, [pc, #156]	; (c85c <Reset_Handler+0xd0>)
    c7be:	603b      	str	r3, [r7, #0]
    c7c0:	e004      	b.n	c7cc <Reset_Handler+0x40>
                *pDest++ = 0;
    c7c2:	683b      	ldr	r3, [r7, #0]
    c7c4:	1d1a      	adds	r2, r3, #4
    c7c6:	603a      	str	r2, [r7, #0]
    c7c8:	2200      	movs	r2, #0
    c7ca:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    c7cc:	683a      	ldr	r2, [r7, #0]
    c7ce:	4b24      	ldr	r3, [pc, #144]	; (c860 <Reset_Handler+0xd4>)
    c7d0:	429a      	cmp	r2, r3
    c7d2:	d3f6      	bcc.n	c7c2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    c7d4:	4b23      	ldr	r3, [pc, #140]	; (c864 <Reset_Handler+0xd8>)
    c7d6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    c7d8:	4b23      	ldr	r3, [pc, #140]	; (c868 <Reset_Handler+0xdc>)
    c7da:	687a      	ldr	r2, [r7, #4]
    c7dc:	21ff      	movs	r1, #255	; 0xff
    c7de:	438a      	bics	r2, r1
    c7e0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    c7e2:	4a22      	ldr	r2, [pc, #136]	; (c86c <Reset_Handler+0xe0>)
    c7e4:	2390      	movs	r3, #144	; 0x90
    c7e6:	005b      	lsls	r3, r3, #1
    c7e8:	2102      	movs	r1, #2
    c7ea:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    c7ec:	4a20      	ldr	r2, [pc, #128]	; (c870 <Reset_Handler+0xe4>)
    c7ee:	78d3      	ldrb	r3, [r2, #3]
    c7f0:	2103      	movs	r1, #3
    c7f2:	438b      	bics	r3, r1
    c7f4:	1c19      	adds	r1, r3, #0
    c7f6:	2302      	movs	r3, #2
    c7f8:	430b      	orrs	r3, r1
    c7fa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    c7fc:	4a1c      	ldr	r2, [pc, #112]	; (c870 <Reset_Handler+0xe4>)
    c7fe:	78d3      	ldrb	r3, [r2, #3]
    c800:	210c      	movs	r1, #12
    c802:	438b      	bics	r3, r1
    c804:	1c19      	adds	r1, r3, #0
    c806:	2308      	movs	r3, #8
    c808:	430b      	orrs	r3, r1
    c80a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    c80c:	4a19      	ldr	r2, [pc, #100]	; (c874 <Reset_Handler+0xe8>)
    c80e:	7b93      	ldrb	r3, [r2, #14]
    c810:	2130      	movs	r1, #48	; 0x30
    c812:	438b      	bics	r3, r1
    c814:	1c19      	adds	r1, r3, #0
    c816:	2320      	movs	r3, #32
    c818:	430b      	orrs	r3, r1
    c81a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    c81c:	4a15      	ldr	r2, [pc, #84]	; (c874 <Reset_Handler+0xe8>)
    c81e:	7b93      	ldrb	r3, [r2, #14]
    c820:	210c      	movs	r1, #12
    c822:	438b      	bics	r3, r1
    c824:	1c19      	adds	r1, r3, #0
    c826:	2308      	movs	r3, #8
    c828:	430b      	orrs	r3, r1
    c82a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    c82c:	4a11      	ldr	r2, [pc, #68]	; (c874 <Reset_Handler+0xe8>)
    c82e:	7b93      	ldrb	r3, [r2, #14]
    c830:	2103      	movs	r1, #3
    c832:	438b      	bics	r3, r1
    c834:	1c19      	adds	r1, r3, #0
    c836:	2302      	movs	r3, #2
    c838:	430b      	orrs	r3, r1
    c83a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    c83c:	4a0e      	ldr	r2, [pc, #56]	; (c878 <Reset_Handler+0xec>)
    c83e:	6853      	ldr	r3, [r2, #4]
    c840:	2180      	movs	r1, #128	; 0x80
    c842:	430b      	orrs	r3, r1
    c844:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    c846:	4b0d      	ldr	r3, [pc, #52]	; (c87c <Reset_Handler+0xf0>)
    c848:	4798      	blx	r3

        /* Branch to main function */
        main();
    c84a:	4b0d      	ldr	r3, [pc, #52]	; (c880 <Reset_Handler+0xf4>)
    c84c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    c84e:	e7fe      	b.n	c84e <Reset_Handler+0xc2>
    c850:	000153b8 	.word	0x000153b8
    c854:	20000000 	.word	0x20000000
    c858:	20000210 	.word	0x20000210
    c85c:	20000210 	.word	0x20000210
    c860:	20000750 	.word	0x20000750
    c864:	00000000 	.word	0x00000000
    c868:	e000ed00 	.word	0xe000ed00
    c86c:	41007000 	.word	0x41007000
    c870:	41005000 	.word	0x41005000
    c874:	41004800 	.word	0x41004800
    c878:	41004000 	.word	0x41004000
    c87c:	0000e4d1 	.word	0x0000e4d1
    c880:	0000d48d 	.word	0x0000d48d

0000c884 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    c884:	b580      	push	{r7, lr}
    c886:	af00      	add	r7, sp, #0
        while (1) {
    c888:	e7fe      	b.n	c888 <Dummy_Handler+0x4>
	...

0000c88c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    c88c:	b580      	push	{r7, lr}
    c88e:	b084      	sub	sp, #16
    c890:	af00      	add	r7, sp, #0
    c892:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    c894:	4b0a      	ldr	r3, [pc, #40]	; (c8c0 <_sbrk+0x34>)
    c896:	681b      	ldr	r3, [r3, #0]
    c898:	2b00      	cmp	r3, #0
    c89a:	d102      	bne.n	c8a2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    c89c:	4b08      	ldr	r3, [pc, #32]	; (c8c0 <_sbrk+0x34>)
    c89e:	4a09      	ldr	r2, [pc, #36]	; (c8c4 <_sbrk+0x38>)
    c8a0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    c8a2:	4b07      	ldr	r3, [pc, #28]	; (c8c0 <_sbrk+0x34>)
    c8a4:	681b      	ldr	r3, [r3, #0]
    c8a6:	60fb      	str	r3, [r7, #12]

	heap += incr;
    c8a8:	4b05      	ldr	r3, [pc, #20]	; (c8c0 <_sbrk+0x34>)
    c8aa:	681a      	ldr	r2, [r3, #0]
    c8ac:	687b      	ldr	r3, [r7, #4]
    c8ae:	18d2      	adds	r2, r2, r3
    c8b0:	4b03      	ldr	r3, [pc, #12]	; (c8c0 <_sbrk+0x34>)
    c8b2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    c8b4:	68fb      	ldr	r3, [r7, #12]
}
    c8b6:	0018      	movs	r0, r3
    c8b8:	46bd      	mov	sp, r7
    c8ba:	b004      	add	sp, #16
    c8bc:	bd80      	pop	{r7, pc}
    c8be:	46c0      	nop			; (mov r8, r8)
    c8c0:	2000029c 	.word	0x2000029c
    c8c4:	20002750 	.word	0x20002750

0000c8c8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    c8c8:	b580      	push	{r7, lr}
    c8ca:	b082      	sub	sp, #8
    c8cc:	af00      	add	r7, sp, #0
    c8ce:	6078      	str	r0, [r7, #4]
	return -1;
    c8d0:	2301      	movs	r3, #1
    c8d2:	425b      	negs	r3, r3
}
    c8d4:	0018      	movs	r0, r3
    c8d6:	46bd      	mov	sp, r7
    c8d8:	b002      	add	sp, #8
    c8da:	bd80      	pop	{r7, pc}

0000c8dc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    c8dc:	b580      	push	{r7, lr}
    c8de:	b082      	sub	sp, #8
    c8e0:	af00      	add	r7, sp, #0
    c8e2:	6078      	str	r0, [r7, #4]
    c8e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    c8e6:	683b      	ldr	r3, [r7, #0]
    c8e8:	2280      	movs	r2, #128	; 0x80
    c8ea:	0192      	lsls	r2, r2, #6
    c8ec:	605a      	str	r2, [r3, #4]

	return 0;
    c8ee:	2300      	movs	r3, #0
}
    c8f0:	0018      	movs	r0, r3
    c8f2:	46bd      	mov	sp, r7
    c8f4:	b002      	add	sp, #8
    c8f6:	bd80      	pop	{r7, pc}

0000c8f8 <_isatty>:

extern int _isatty(int file)
{
    c8f8:	b580      	push	{r7, lr}
    c8fa:	b082      	sub	sp, #8
    c8fc:	af00      	add	r7, sp, #0
    c8fe:	6078      	str	r0, [r7, #4]
	return 1;
    c900:	2301      	movs	r3, #1
}
    c902:	0018      	movs	r0, r3
    c904:	46bd      	mov	sp, r7
    c906:	b002      	add	sp, #8
    c908:	bd80      	pop	{r7, pc}

0000c90a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    c90a:	b580      	push	{r7, lr}
    c90c:	b084      	sub	sp, #16
    c90e:	af00      	add	r7, sp, #0
    c910:	60f8      	str	r0, [r7, #12]
    c912:	60b9      	str	r1, [r7, #8]
    c914:	607a      	str	r2, [r7, #4]
	return 0;
    c916:	2300      	movs	r3, #0
}
    c918:	0018      	movs	r0, r3
    c91a:	46bd      	mov	sp, r7
    c91c:	b004      	add	sp, #16
    c91e:	bd80      	pop	{r7, pc}

0000c920 <system_pinmux_get_group_from_gpio_pin>:
{
    c920:	b580      	push	{r7, lr}
    c922:	b084      	sub	sp, #16
    c924:	af00      	add	r7, sp, #0
    c926:	0002      	movs	r2, r0
    c928:	1dfb      	adds	r3, r7, #7
    c92a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c92c:	230f      	movs	r3, #15
    c92e:	18fb      	adds	r3, r7, r3
    c930:	1dfa      	adds	r2, r7, #7
    c932:	7812      	ldrb	r2, [r2, #0]
    c934:	09d2      	lsrs	r2, r2, #7
    c936:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c938:	230e      	movs	r3, #14
    c93a:	18fb      	adds	r3, r7, r3
    c93c:	1dfa      	adds	r2, r7, #7
    c93e:	7812      	ldrb	r2, [r2, #0]
    c940:	0952      	lsrs	r2, r2, #5
    c942:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c944:	4b0d      	ldr	r3, [pc, #52]	; (c97c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c946:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c948:	230f      	movs	r3, #15
    c94a:	18fb      	adds	r3, r7, r3
    c94c:	781b      	ldrb	r3, [r3, #0]
    c94e:	2b00      	cmp	r3, #0
    c950:	d10f      	bne.n	c972 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c952:	230f      	movs	r3, #15
    c954:	18fb      	adds	r3, r7, r3
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	009b      	lsls	r3, r3, #2
    c95a:	2210      	movs	r2, #16
    c95c:	4694      	mov	ip, r2
    c95e:	44bc      	add	ip, r7
    c960:	4463      	add	r3, ip
    c962:	3b08      	subs	r3, #8
    c964:	681a      	ldr	r2, [r3, #0]
    c966:	230e      	movs	r3, #14
    c968:	18fb      	adds	r3, r7, r3
    c96a:	781b      	ldrb	r3, [r3, #0]
    c96c:	01db      	lsls	r3, r3, #7
    c96e:	18d3      	adds	r3, r2, r3
    c970:	e000      	b.n	c974 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c972:	2300      	movs	r3, #0
}
    c974:	0018      	movs	r0, r3
    c976:	46bd      	mov	sp, r7
    c978:	b004      	add	sp, #16
    c97a:	bd80      	pop	{r7, pc}
    c97c:	41004400 	.word	0x41004400

0000c980 <adc_is_syncing>:
{
    c980:	b580      	push	{r7, lr}
    c982:	b084      	sub	sp, #16
    c984:	af00      	add	r7, sp, #0
    c986:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    c988:	687b      	ldr	r3, [r7, #4]
    c98a:	681b      	ldr	r3, [r3, #0]
    c98c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c98e:	68fb      	ldr	r3, [r7, #12]
    c990:	7e5b      	ldrb	r3, [r3, #25]
    c992:	b2db      	uxtb	r3, r3
    c994:	b25b      	sxtb	r3, r3
    c996:	2b00      	cmp	r3, #0
    c998:	da01      	bge.n	c99e <adc_is_syncing+0x1e>
		return true;
    c99a:	2301      	movs	r3, #1
    c99c:	e000      	b.n	c9a0 <adc_is_syncing+0x20>
	return false;
    c99e:	2300      	movs	r3, #0
}
    c9a0:	0018      	movs	r0, r3
    c9a2:	46bd      	mov	sp, r7
    c9a4:	b004      	add	sp, #16
    c9a6:	bd80      	pop	{r7, pc}

0000c9a8 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    c9a8:	b580      	push	{r7, lr}
    c9aa:	b086      	sub	sp, #24
    c9ac:	af00      	add	r7, sp, #0
    c9ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c9b0:	687b      	ldr	r3, [r7, #4]
    c9b2:	681b      	ldr	r3, [r3, #0]
    c9b4:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    c9b6:	693b      	ldr	r3, [r7, #16]
    c9b8:	7e1b      	ldrb	r3, [r3, #24]
    c9ba:	b2db      	uxtb	r3, r3
    c9bc:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    c9be:	2300      	movs	r3, #0
    c9c0:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    c9c2:	68fb      	ldr	r3, [r7, #12]
    c9c4:	2201      	movs	r2, #1
    c9c6:	4013      	ands	r3, r2
    c9c8:	d003      	beq.n	c9d2 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    c9ca:	697b      	ldr	r3, [r7, #20]
    c9cc:	2201      	movs	r2, #1
    c9ce:	4313      	orrs	r3, r2
    c9d0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    c9d2:	68fb      	ldr	r3, [r7, #12]
    c9d4:	2204      	movs	r2, #4
    c9d6:	4013      	ands	r3, r2
    c9d8:	d003      	beq.n	c9e2 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    c9da:	697b      	ldr	r3, [r7, #20]
    c9dc:	2202      	movs	r2, #2
    c9de:	4313      	orrs	r3, r2
    c9e0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    c9e2:	68fb      	ldr	r3, [r7, #12]
    c9e4:	2202      	movs	r2, #2
    c9e6:	4013      	ands	r3, r2
    c9e8:	d003      	beq.n	c9f2 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    c9ea:	697b      	ldr	r3, [r7, #20]
    c9ec:	2204      	movs	r2, #4
    c9ee:	4313      	orrs	r3, r2
    c9f0:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    c9f2:	697b      	ldr	r3, [r7, #20]
}
    c9f4:	0018      	movs	r0, r3
    c9f6:	46bd      	mov	sp, r7
    c9f8:	b006      	add	sp, #24
    c9fa:	bd80      	pop	{r7, pc}

0000c9fc <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    c9fc:	b580      	push	{r7, lr}
    c9fe:	b084      	sub	sp, #16
    ca00:	af00      	add	r7, sp, #0
    ca02:	6078      	str	r0, [r7, #4]
    ca04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    ca06:	687b      	ldr	r3, [r7, #4]
    ca08:	681b      	ldr	r3, [r3, #0]
    ca0a:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    ca0c:	2300      	movs	r3, #0
    ca0e:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    ca10:	683b      	ldr	r3, [r7, #0]
    ca12:	2201      	movs	r2, #1
    ca14:	4013      	ands	r3, r2
    ca16:	d003      	beq.n	ca20 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    ca18:	68fb      	ldr	r3, [r7, #12]
    ca1a:	2201      	movs	r2, #1
    ca1c:	4313      	orrs	r3, r2
    ca1e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    ca20:	683b      	ldr	r3, [r7, #0]
    ca22:	2202      	movs	r2, #2
    ca24:	4013      	ands	r3, r2
    ca26:	d003      	beq.n	ca30 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    ca28:	68fb      	ldr	r3, [r7, #12]
    ca2a:	2204      	movs	r2, #4
    ca2c:	4313      	orrs	r3, r2
    ca2e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    ca30:	683b      	ldr	r3, [r7, #0]
    ca32:	2204      	movs	r2, #4
    ca34:	4013      	ands	r3, r2
    ca36:	d003      	beq.n	ca40 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    ca38:	68fb      	ldr	r3, [r7, #12]
    ca3a:	2202      	movs	r2, #2
    ca3c:	4313      	orrs	r3, r2
    ca3e:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    ca40:	68fb      	ldr	r3, [r7, #12]
    ca42:	b2da      	uxtb	r2, r3
    ca44:	68bb      	ldr	r3, [r7, #8]
    ca46:	761a      	strb	r2, [r3, #24]
}
    ca48:	46c0      	nop			; (mov r8, r8)
    ca4a:	46bd      	mov	sp, r7
    ca4c:	b004      	add	sp, #16
    ca4e:	bd80      	pop	{r7, pc}

0000ca50 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    ca50:	b580      	push	{r7, lr}
    ca52:	b084      	sub	sp, #16
    ca54:	af00      	add	r7, sp, #0
    ca56:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	681b      	ldr	r3, [r3, #0]
    ca5c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    ca5e:	46c0      	nop			; (mov r8, r8)
    ca60:	687b      	ldr	r3, [r7, #4]
    ca62:	0018      	movs	r0, r3
    ca64:	4b0e      	ldr	r3, [pc, #56]	; (caa0 <adc_enable+0x50>)
    ca66:	4798      	blx	r3
    ca68:	1e03      	subs	r3, r0, #0
    ca6a:	d1f9      	bne.n	ca60 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    ca6c:	68fb      	ldr	r3, [r7, #12]
    ca6e:	220f      	movs	r2, #15
    ca70:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    ca72:	68fb      	ldr	r3, [r7, #12]
    ca74:	220f      	movs	r2, #15
    ca76:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    ca78:	68fb      	ldr	r3, [r7, #12]
    ca7a:	781b      	ldrb	r3, [r3, #0]
    ca7c:	b2db      	uxtb	r3, r3
    ca7e:	2202      	movs	r2, #2
    ca80:	4313      	orrs	r3, r2
    ca82:	b2da      	uxtb	r2, r3
    ca84:	68fb      	ldr	r3, [r7, #12]
    ca86:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    ca88:	46c0      	nop			; (mov r8, r8)
    ca8a:	687b      	ldr	r3, [r7, #4]
    ca8c:	0018      	movs	r0, r3
    ca8e:	4b04      	ldr	r3, [pc, #16]	; (caa0 <adc_enable+0x50>)
    ca90:	4798      	blx	r3
    ca92:	1e03      	subs	r3, r0, #0
    ca94:	d1f9      	bne.n	ca8a <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    ca96:	2300      	movs	r3, #0
}
    ca98:	0018      	movs	r0, r3
    ca9a:	46bd      	mov	sp, r7
    ca9c:	b004      	add	sp, #16
    ca9e:	bd80      	pop	{r7, pc}
    caa0:	0000c981 	.word	0x0000c981

0000caa4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    caa4:	b580      	push	{r7, lr}
    caa6:	b084      	sub	sp, #16
    caa8:	af00      	add	r7, sp, #0
    caaa:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    caac:	687b      	ldr	r3, [r7, #4]
    caae:	681b      	ldr	r3, [r3, #0]
    cab0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    cab2:	46c0      	nop			; (mov r8, r8)
    cab4:	687b      	ldr	r3, [r7, #4]
    cab6:	0018      	movs	r0, r3
    cab8:	4b0b      	ldr	r3, [pc, #44]	; (cae8 <adc_start_conversion+0x44>)
    caba:	4798      	blx	r3
    cabc:	1e03      	subs	r3, r0, #0
    cabe:	d1f9      	bne.n	cab4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    cac0:	68fb      	ldr	r3, [r7, #12]
    cac2:	7b1b      	ldrb	r3, [r3, #12]
    cac4:	b2db      	uxtb	r3, r3
    cac6:	2202      	movs	r2, #2
    cac8:	4313      	orrs	r3, r2
    caca:	b2da      	uxtb	r2, r3
    cacc:	68fb      	ldr	r3, [r7, #12]
    cace:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    cad0:	46c0      	nop			; (mov r8, r8)
    cad2:	687b      	ldr	r3, [r7, #4]
    cad4:	0018      	movs	r0, r3
    cad6:	4b04      	ldr	r3, [pc, #16]	; (cae8 <adc_start_conversion+0x44>)
    cad8:	4798      	blx	r3
    cada:	1e03      	subs	r3, r0, #0
    cadc:	d1f9      	bne.n	cad2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    cade:	46c0      	nop			; (mov r8, r8)
    cae0:	46bd      	mov	sp, r7
    cae2:	b004      	add	sp, #16
    cae4:	bd80      	pop	{r7, pc}
    cae6:	46c0      	nop			; (mov r8, r8)
    cae8:	0000c981 	.word	0x0000c981

0000caec <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    caec:	b580      	push	{r7, lr}
    caee:	b084      	sub	sp, #16
    caf0:	af00      	add	r7, sp, #0
    caf2:	6078      	str	r0, [r7, #4]
    caf4:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    caf6:	687b      	ldr	r3, [r7, #4]
    caf8:	0018      	movs	r0, r3
    cafa:	4b18      	ldr	r3, [pc, #96]	; (cb5c <adc_read+0x70>)
    cafc:	4798      	blx	r3
    cafe:	0002      	movs	r2, r0
    cb00:	2301      	movs	r3, #1
    cb02:	4013      	ands	r3, r2
    cb04:	d101      	bne.n	cb0a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    cb06:	2305      	movs	r3, #5
    cb08:	e023      	b.n	cb52 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    cb0a:	687b      	ldr	r3, [r7, #4]
    cb0c:	681b      	ldr	r3, [r3, #0]
    cb0e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    cb10:	46c0      	nop			; (mov r8, r8)
    cb12:	687b      	ldr	r3, [r7, #4]
    cb14:	0018      	movs	r0, r3
    cb16:	4b12      	ldr	r3, [pc, #72]	; (cb60 <adc_read+0x74>)
    cb18:	4798      	blx	r3
    cb1a:	1e03      	subs	r3, r0, #0
    cb1c:	d1f9      	bne.n	cb12 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    cb1e:	68fb      	ldr	r3, [r7, #12]
    cb20:	8b5b      	ldrh	r3, [r3, #26]
    cb22:	b29a      	uxth	r2, r3
    cb24:	683b      	ldr	r3, [r7, #0]
    cb26:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    cb28:	687b      	ldr	r3, [r7, #4]
    cb2a:	2101      	movs	r1, #1
    cb2c:	0018      	movs	r0, r3
    cb2e:	4b0d      	ldr	r3, [pc, #52]	; (cb64 <adc_read+0x78>)
    cb30:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    cb32:	687b      	ldr	r3, [r7, #4]
    cb34:	0018      	movs	r0, r3
    cb36:	4b09      	ldr	r3, [pc, #36]	; (cb5c <adc_read+0x70>)
    cb38:	4798      	blx	r3
    cb3a:	0002      	movs	r2, r0
    cb3c:	2304      	movs	r3, #4
    cb3e:	4013      	ands	r3, r2
    cb40:	d006      	beq.n	cb50 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    cb42:	687b      	ldr	r3, [r7, #4]
    cb44:	2104      	movs	r1, #4
    cb46:	0018      	movs	r0, r3
    cb48:	4b06      	ldr	r3, [pc, #24]	; (cb64 <adc_read+0x78>)
    cb4a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    cb4c:	231e      	movs	r3, #30
    cb4e:	e000      	b.n	cb52 <adc_read+0x66>
	}

	return STATUS_OK;
    cb50:	2300      	movs	r3, #0
}
    cb52:	0018      	movs	r0, r3
    cb54:	46bd      	mov	sp, r7
    cb56:	b004      	add	sp, #16
    cb58:	bd80      	pop	{r7, pc}
    cb5a:	46c0      	nop			; (mov r8, r8)
    cb5c:	0000c9a9 	.word	0x0000c9a9
    cb60:	0000c981 	.word	0x0000c981
    cb64:	0000c9fd 	.word	0x0000c9fd

0000cb68 <system_interrupt_enable>:
{
    cb68:	b580      	push	{r7, lr}
    cb6a:	b082      	sub	sp, #8
    cb6c:	af00      	add	r7, sp, #0
    cb6e:	0002      	movs	r2, r0
    cb70:	1dfb      	adds	r3, r7, #7
    cb72:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cb74:	4b06      	ldr	r3, [pc, #24]	; (cb90 <system_interrupt_enable+0x28>)
    cb76:	1dfa      	adds	r2, r7, #7
    cb78:	7812      	ldrb	r2, [r2, #0]
    cb7a:	0011      	movs	r1, r2
    cb7c:	221f      	movs	r2, #31
    cb7e:	400a      	ands	r2, r1
    cb80:	2101      	movs	r1, #1
    cb82:	4091      	lsls	r1, r2
    cb84:	000a      	movs	r2, r1
    cb86:	601a      	str	r2, [r3, #0]
}
    cb88:	46c0      	nop			; (mov r8, r8)
    cb8a:	46bd      	mov	sp, r7
    cb8c:	b002      	add	sp, #8
    cb8e:	bd80      	pop	{r7, pc}
    cb90:	e000e100 	.word	0xe000e100

0000cb94 <i2c_master_is_syncing>:
{
    cb94:	b580      	push	{r7, lr}
    cb96:	b084      	sub	sp, #16
    cb98:	af00      	add	r7, sp, #0
    cb9a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    cb9c:	687b      	ldr	r3, [r7, #4]
    cb9e:	681b      	ldr	r3, [r3, #0]
    cba0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    cba2:	68fb      	ldr	r3, [r7, #12]
    cba4:	69db      	ldr	r3, [r3, #28]
    cba6:	2207      	movs	r2, #7
    cba8:	4013      	ands	r3, r2
    cbaa:	1e5a      	subs	r2, r3, #1
    cbac:	4193      	sbcs	r3, r2
    cbae:	b2db      	uxtb	r3, r3
}
    cbb0:	0018      	movs	r0, r3
    cbb2:	46bd      	mov	sp, r7
    cbb4:	b004      	add	sp, #16
    cbb6:	bd80      	pop	{r7, pc}

0000cbb8 <_i2c_master_wait_for_sync>:
{
    cbb8:	b580      	push	{r7, lr}
    cbba:	b082      	sub	sp, #8
    cbbc:	af00      	add	r7, sp, #0
    cbbe:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    cbc0:	46c0      	nop			; (mov r8, r8)
    cbc2:	687b      	ldr	r3, [r7, #4]
    cbc4:	0018      	movs	r0, r3
    cbc6:	4b04      	ldr	r3, [pc, #16]	; (cbd8 <_i2c_master_wait_for_sync+0x20>)
    cbc8:	4798      	blx	r3
    cbca:	1e03      	subs	r3, r0, #0
    cbcc:	d1f9      	bne.n	cbc2 <_i2c_master_wait_for_sync+0xa>
}
    cbce:	46c0      	nop			; (mov r8, r8)
    cbd0:	46bd      	mov	sp, r7
    cbd2:	b002      	add	sp, #8
    cbd4:	bd80      	pop	{r7, pc}
    cbd6:	46c0      	nop			; (mov r8, r8)
    cbd8:	0000cb95 	.word	0x0000cb95

0000cbdc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    cbdc:	b580      	push	{r7, lr}
    cbde:	b082      	sub	sp, #8
    cbe0:	af00      	add	r7, sp, #0
    cbe2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    cbe4:	687b      	ldr	r3, [r7, #4]
    cbe6:	2264      	movs	r2, #100	; 0x64
    cbe8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    cbea:	687b      	ldr	r3, [r7, #4]
    cbec:	4a1b      	ldr	r2, [pc, #108]	; (cc5c <i2c_master_get_config_defaults+0x80>)
    cbee:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	2200      	movs	r2, #0
    cbf4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    cbf6:	687b      	ldr	r3, [r7, #4]
    cbf8:	2200      	movs	r2, #0
    cbfa:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    cbfc:	687b      	ldr	r3, [r7, #4]
    cbfe:	2200      	movs	r2, #0
    cc00:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    cc02:	687b      	ldr	r3, [r7, #4]
    cc04:	2280      	movs	r2, #128	; 0x80
    cc06:	0392      	lsls	r2, r2, #14
    cc08:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    cc0a:	687b      	ldr	r3, [r7, #4]
    cc0c:	2201      	movs	r2, #1
    cc0e:	4252      	negs	r2, r2
    cc10:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    cc12:	687b      	ldr	r3, [r7, #4]
    cc14:	2201      	movs	r2, #1
    cc16:	4252      	negs	r2, r2
    cc18:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    cc1a:	687b      	ldr	r3, [r7, #4]
    cc1c:	2200      	movs	r2, #0
    cc1e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    cc20:	687b      	ldr	r3, [r7, #4]
    cc22:	2200      	movs	r2, #0
    cc24:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    cc26:	687b      	ldr	r3, [r7, #4]
    cc28:	2224      	movs	r2, #36	; 0x24
    cc2a:	2100      	movs	r1, #0
    cc2c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    cc2e:	687b      	ldr	r3, [r7, #4]
    cc30:	2200      	movs	r2, #0
    cc32:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    cc34:	687b      	ldr	r3, [r7, #4]
    cc36:	222c      	movs	r2, #44	; 0x2c
    cc38:	2100      	movs	r1, #0
    cc3a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    cc3c:	687b      	ldr	r3, [r7, #4]
    cc3e:	222d      	movs	r2, #45	; 0x2d
    cc40:	2100      	movs	r1, #0
    cc42:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    cc44:	687b      	ldr	r3, [r7, #4]
    cc46:	222e      	movs	r2, #46	; 0x2e
    cc48:	2100      	movs	r1, #0
    cc4a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    cc4c:	687b      	ldr	r3, [r7, #4]
    cc4e:	22d7      	movs	r2, #215	; 0xd7
    cc50:	861a      	strh	r2, [r3, #48]	; 0x30
}
    cc52:	46c0      	nop			; (mov r8, r8)
    cc54:	46bd      	mov	sp, r7
    cc56:	b002      	add	sp, #8
    cc58:	bd80      	pop	{r7, pc}
    cc5a:	46c0      	nop			; (mov r8, r8)
    cc5c:	00000d48 	.word	0x00000d48

0000cc60 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    cc60:	b580      	push	{r7, lr}
    cc62:	b084      	sub	sp, #16
    cc64:	af00      	add	r7, sp, #0
    cc66:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    cc68:	687b      	ldr	r3, [r7, #4]
    cc6a:	681b      	ldr	r3, [r3, #0]
    cc6c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    cc6e:	2300      	movs	r3, #0
    cc70:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    cc72:	687b      	ldr	r3, [r7, #4]
    cc74:	0018      	movs	r0, r3
    cc76:	4b14      	ldr	r3, [pc, #80]	; (ccc8 <i2c_master_enable+0x68>)
    cc78:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    cc7a:	68bb      	ldr	r3, [r7, #8]
    cc7c:	681b      	ldr	r3, [r3, #0]
    cc7e:	2202      	movs	r2, #2
    cc80:	431a      	orrs	r2, r3
    cc82:	68bb      	ldr	r3, [r7, #8]
    cc84:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cc86:	687b      	ldr	r3, [r7, #4]
    cc88:	681b      	ldr	r3, [r3, #0]
    cc8a:	0018      	movs	r0, r3
    cc8c:	4b0f      	ldr	r3, [pc, #60]	; (cccc <i2c_master_enable+0x6c>)
    cc8e:	4798      	blx	r3
    cc90:	0003      	movs	r3, r0
    cc92:	0018      	movs	r0, r3
    cc94:	4b0e      	ldr	r3, [pc, #56]	; (ccd0 <i2c_master_enable+0x70>)
    cc96:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    cc98:	e00c      	b.n	ccb4 <i2c_master_enable+0x54>
		timeout_counter++;
    cc9a:	68fb      	ldr	r3, [r7, #12]
    cc9c:	3301      	adds	r3, #1
    cc9e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    cca0:	687b      	ldr	r3, [r7, #4]
    cca2:	88db      	ldrh	r3, [r3, #6]
    cca4:	001a      	movs	r2, r3
    cca6:	68fb      	ldr	r3, [r7, #12]
    cca8:	429a      	cmp	r2, r3
    ccaa:	d803      	bhi.n	ccb4 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    ccac:	68bb      	ldr	r3, [r7, #8]
    ccae:	2210      	movs	r2, #16
    ccb0:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    ccb2:	e006      	b.n	ccc2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    ccb4:	68bb      	ldr	r3, [r7, #8]
    ccb6:	8b5b      	ldrh	r3, [r3, #26]
    ccb8:	b29b      	uxth	r3, r3
    ccba:	001a      	movs	r2, r3
    ccbc:	2310      	movs	r3, #16
    ccbe:	4013      	ands	r3, r2
    ccc0:	d0eb      	beq.n	cc9a <i2c_master_enable+0x3a>
		}
	}
}
    ccc2:	46bd      	mov	sp, r7
    ccc4:	b004      	add	sp, #16
    ccc6:	bd80      	pop	{r7, pc}
    ccc8:	0000cbb9 	.word	0x0000cbb9
    cccc:	0000b4a1 	.word	0x0000b4a1
    ccd0:	0000cb69 	.word	0x0000cb69

0000ccd4 <port_get_group_from_gpio_pin>:
{
    ccd4:	b580      	push	{r7, lr}
    ccd6:	b082      	sub	sp, #8
    ccd8:	af00      	add	r7, sp, #0
    ccda:	0002      	movs	r2, r0
    ccdc:	1dfb      	adds	r3, r7, #7
    ccde:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cce0:	1dfb      	adds	r3, r7, #7
    cce2:	781b      	ldrb	r3, [r3, #0]
    cce4:	0018      	movs	r0, r3
    cce6:	4b03      	ldr	r3, [pc, #12]	; (ccf4 <port_get_group_from_gpio_pin+0x20>)
    cce8:	4798      	blx	r3
    ccea:	0003      	movs	r3, r0
}
    ccec:	0018      	movs	r0, r3
    ccee:	46bd      	mov	sp, r7
    ccf0:	b002      	add	sp, #8
    ccf2:	bd80      	pop	{r7, pc}
    ccf4:	0000c921 	.word	0x0000c921

0000ccf8 <port_get_config_defaults>:
{
    ccf8:	b580      	push	{r7, lr}
    ccfa:	b082      	sub	sp, #8
    ccfc:	af00      	add	r7, sp, #0
    ccfe:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    cd00:	687b      	ldr	r3, [r7, #4]
    cd02:	2200      	movs	r2, #0
    cd04:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    cd06:	687b      	ldr	r3, [r7, #4]
    cd08:	2201      	movs	r2, #1
    cd0a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    cd0c:	687b      	ldr	r3, [r7, #4]
    cd0e:	2200      	movs	r2, #0
    cd10:	709a      	strb	r2, [r3, #2]
}
    cd12:	46c0      	nop			; (mov r8, r8)
    cd14:	46bd      	mov	sp, r7
    cd16:	b002      	add	sp, #8
    cd18:	bd80      	pop	{r7, pc}
	...

0000cd1c <port_pin_set_output_level>:
{
    cd1c:	b580      	push	{r7, lr}
    cd1e:	b084      	sub	sp, #16
    cd20:	af00      	add	r7, sp, #0
    cd22:	0002      	movs	r2, r0
    cd24:	1dfb      	adds	r3, r7, #7
    cd26:	701a      	strb	r2, [r3, #0]
    cd28:	1dbb      	adds	r3, r7, #6
    cd2a:	1c0a      	adds	r2, r1, #0
    cd2c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    cd2e:	1dfb      	adds	r3, r7, #7
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	0018      	movs	r0, r3
    cd34:	4b0d      	ldr	r3, [pc, #52]	; (cd6c <port_pin_set_output_level+0x50>)
    cd36:	4798      	blx	r3
    cd38:	0003      	movs	r3, r0
    cd3a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cd3c:	1dfb      	adds	r3, r7, #7
    cd3e:	781b      	ldrb	r3, [r3, #0]
    cd40:	221f      	movs	r2, #31
    cd42:	4013      	ands	r3, r2
    cd44:	2201      	movs	r2, #1
    cd46:	409a      	lsls	r2, r3
    cd48:	0013      	movs	r3, r2
    cd4a:	60bb      	str	r3, [r7, #8]
	if (level) {
    cd4c:	1dbb      	adds	r3, r7, #6
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	2b00      	cmp	r3, #0
    cd52:	d003      	beq.n	cd5c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    cd54:	68fb      	ldr	r3, [r7, #12]
    cd56:	68ba      	ldr	r2, [r7, #8]
    cd58:	619a      	str	r2, [r3, #24]
}
    cd5a:	e002      	b.n	cd62 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    cd5c:	68fb      	ldr	r3, [r7, #12]
    cd5e:	68ba      	ldr	r2, [r7, #8]
    cd60:	615a      	str	r2, [r3, #20]
}
    cd62:	46c0      	nop			; (mov r8, r8)
    cd64:	46bd      	mov	sp, r7
    cd66:	b004      	add	sp, #16
    cd68:	bd80      	pop	{r7, pc}
    cd6a:	46c0      	nop			; (mov r8, r8)
    cd6c:	0000ccd5 	.word	0x0000ccd5

0000cd70 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b082      	sub	sp, #8
    cd74:	af00      	add	r7, sp, #0
    cd76:	6078      	str	r0, [r7, #4]
    cd78:	000a      	movs	r2, r1
    cd7a:	1cfb      	adds	r3, r7, #3
    cd7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    cd7e:	687b      	ldr	r3, [r7, #4]
    cd80:	7e5b      	ldrb	r3, [r3, #25]
    cd82:	b2db      	uxtb	r3, r3
    cd84:	b25a      	sxtb	r2, r3
    cd86:	1cfb      	adds	r3, r7, #3
    cd88:	781b      	ldrb	r3, [r3, #0]
    cd8a:	2101      	movs	r1, #1
    cd8c:	4099      	lsls	r1, r3
    cd8e:	000b      	movs	r3, r1
    cd90:	b25b      	sxtb	r3, r3
    cd92:	4313      	orrs	r3, r2
    cd94:	b25b      	sxtb	r3, r3
    cd96:	b2da      	uxtb	r2, r3
    cd98:	687b      	ldr	r3, [r7, #4]
    cd9a:	765a      	strb	r2, [r3, #25]
}
    cd9c:	46c0      	nop			; (mov r8, r8)
    cd9e:	46bd      	mov	sp, r7
    cda0:	b002      	add	sp, #8
    cda2:	bd80      	pop	{r7, pc}

0000cda4 <usart_is_syncing>:
{
    cda4:	b580      	push	{r7, lr}
    cda6:	b084      	sub	sp, #16
    cda8:	af00      	add	r7, sp, #0
    cdaa:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    cdac:	687b      	ldr	r3, [r7, #4]
    cdae:	681b      	ldr	r3, [r3, #0]
    cdb0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    cdb2:	68fb      	ldr	r3, [r7, #12]
    cdb4:	69db      	ldr	r3, [r3, #28]
    cdb6:	1e5a      	subs	r2, r3, #1
    cdb8:	4193      	sbcs	r3, r2
    cdba:	b2db      	uxtb	r3, r3
}
    cdbc:	0018      	movs	r0, r3
    cdbe:	46bd      	mov	sp, r7
    cdc0:	b004      	add	sp, #16
    cdc2:	bd80      	pop	{r7, pc}

0000cdc4 <_usart_wait_for_sync>:
{
    cdc4:	b580      	push	{r7, lr}
    cdc6:	b082      	sub	sp, #8
    cdc8:	af00      	add	r7, sp, #0
    cdca:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    cdcc:	46c0      	nop			; (mov r8, r8)
    cdce:	687b      	ldr	r3, [r7, #4]
    cdd0:	0018      	movs	r0, r3
    cdd2:	4b04      	ldr	r3, [pc, #16]	; (cde4 <_usart_wait_for_sync+0x20>)
    cdd4:	4798      	blx	r3
    cdd6:	1e03      	subs	r3, r0, #0
    cdd8:	d1f9      	bne.n	cdce <_usart_wait_for_sync+0xa>
}
    cdda:	46c0      	nop			; (mov r8, r8)
    cddc:	46bd      	mov	sp, r7
    cdde:	b002      	add	sp, #8
    cde0:	bd80      	pop	{r7, pc}
    cde2:	46c0      	nop			; (mov r8, r8)
    cde4:	0000cda5 	.word	0x0000cda5

0000cde8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    cde8:	b580      	push	{r7, lr}
    cdea:	b082      	sub	sp, #8
    cdec:	af00      	add	r7, sp, #0
    cdee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    cdf0:	687b      	ldr	r3, [r7, #4]
    cdf2:	2280      	movs	r2, #128	; 0x80
    cdf4:	05d2      	lsls	r2, r2, #23
    cdf6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    cdf8:	687b      	ldr	r3, [r7, #4]
    cdfa:	2200      	movs	r2, #0
    cdfc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    cdfe:	687b      	ldr	r3, [r7, #4]
    ce00:	22ff      	movs	r2, #255	; 0xff
    ce02:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    ce04:	687b      	ldr	r3, [r7, #4]
    ce06:	2200      	movs	r2, #0
    ce08:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ce0a:	687b      	ldr	r3, [r7, #4]
    ce0c:	2200      	movs	r2, #0
    ce0e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    ce10:	687b      	ldr	r3, [r7, #4]
    ce12:	2296      	movs	r2, #150	; 0x96
    ce14:	0192      	lsls	r2, r2, #6
    ce16:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    ce18:	687b      	ldr	r3, [r7, #4]
    ce1a:	2224      	movs	r2, #36	; 0x24
    ce1c:	2101      	movs	r1, #1
    ce1e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    ce20:	687b      	ldr	r3, [r7, #4]
    ce22:	2225      	movs	r2, #37	; 0x25
    ce24:	2101      	movs	r1, #1
    ce26:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    ce28:	687b      	ldr	r3, [r7, #4]
    ce2a:	2226      	movs	r2, #38	; 0x26
    ce2c:	2100      	movs	r1, #0
    ce2e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    ce30:	687b      	ldr	r3, [r7, #4]
    ce32:	2227      	movs	r2, #39	; 0x27
    ce34:	2100      	movs	r1, #0
    ce36:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    ce38:	687b      	ldr	r3, [r7, #4]
    ce3a:	2200      	movs	r2, #0
    ce3c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    ce3e:	687b      	ldr	r3, [r7, #4]
    ce40:	2288      	movs	r2, #136	; 0x88
    ce42:	0352      	lsls	r2, r2, #13
    ce44:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    ce46:	687b      	ldr	r3, [r7, #4]
    ce48:	222c      	movs	r2, #44	; 0x2c
    ce4a:	2100      	movs	r1, #0
    ce4c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    ce4e:	687b      	ldr	r3, [r7, #4]
    ce50:	222d      	movs	r2, #45	; 0x2d
    ce52:	2100      	movs	r1, #0
    ce54:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    ce56:	687b      	ldr	r3, [r7, #4]
    ce58:	2200      	movs	r2, #0
    ce5a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    ce5c:	687b      	ldr	r3, [r7, #4]
    ce5e:	2200      	movs	r2, #0
    ce60:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    ce62:	687b      	ldr	r3, [r7, #4]
    ce64:	2200      	movs	r2, #0
    ce66:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    ce68:	687b      	ldr	r3, [r7, #4]
    ce6a:	2200      	movs	r2, #0
    ce6c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    ce6e:	687b      	ldr	r3, [r7, #4]
    ce70:	2200      	movs	r2, #0
    ce72:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    ce74:	687b      	ldr	r3, [r7, #4]
    ce76:	2200      	movs	r2, #0
    ce78:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    ce7a:	687b      	ldr	r3, [r7, #4]
    ce7c:	2200      	movs	r2, #0
    ce7e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    ce80:	687b      	ldr	r3, [r7, #4]
    ce82:	2200      	movs	r2, #0
    ce84:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    ce86:	687b      	ldr	r3, [r7, #4]
    ce88:	2200      	movs	r2, #0
    ce8a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    ce8c:	687b      	ldr	r3, [r7, #4]
    ce8e:	2200      	movs	r2, #0
    ce90:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    ce92:	687b      	ldr	r3, [r7, #4]
    ce94:	2213      	movs	r2, #19
    ce96:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    ce98:	687b      	ldr	r3, [r7, #4]
    ce9a:	2200      	movs	r2, #0
    ce9c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    ce9e:	46c0      	nop			; (mov r8, r8)
    cea0:	46bd      	mov	sp, r7
    cea2:	b002      	add	sp, #8
    cea4:	bd80      	pop	{r7, pc}
	...

0000cea8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    cea8:	b580      	push	{r7, lr}
    ceaa:	b084      	sub	sp, #16
    ceac:	af00      	add	r7, sp, #0
    ceae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ceb0:	687b      	ldr	r3, [r7, #4]
    ceb2:	681b      	ldr	r3, [r3, #0]
    ceb4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ceb6:	687b      	ldr	r3, [r7, #4]
    ceb8:	681b      	ldr	r3, [r3, #0]
    ceba:	0018      	movs	r0, r3
    cebc:	4b09      	ldr	r3, [pc, #36]	; (cee4 <usart_enable+0x3c>)
    cebe:	4798      	blx	r3
    cec0:	0003      	movs	r3, r0
    cec2:	0018      	movs	r0, r3
    cec4:	4b08      	ldr	r3, [pc, #32]	; (cee8 <usart_enable+0x40>)
    cec6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    cec8:	687b      	ldr	r3, [r7, #4]
    ceca:	0018      	movs	r0, r3
    cecc:	4b07      	ldr	r3, [pc, #28]	; (ceec <usart_enable+0x44>)
    cece:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    ced0:	68fb      	ldr	r3, [r7, #12]
    ced2:	681b      	ldr	r3, [r3, #0]
    ced4:	2202      	movs	r2, #2
    ced6:	431a      	orrs	r2, r3
    ced8:	68fb      	ldr	r3, [r7, #12]
    ceda:	601a      	str	r2, [r3, #0]
}
    cedc:	46c0      	nop			; (mov r8, r8)
    cede:	46bd      	mov	sp, r7
    cee0:	b004      	add	sp, #16
    cee2:	bd80      	pop	{r7, pc}
    cee4:	0000b4a1 	.word	0x0000b4a1
    cee8:	0000cb69 	.word	0x0000cb69
    ceec:	0000cdc5 	.word	0x0000cdc5

0000cef0 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    cef0:	b580      	push	{r7, lr}
    cef2:	b084      	sub	sp, #16
    cef4:	af00      	add	r7, sp, #0
    cef6:	60f8      	str	r0, [r7, #12]
    cef8:	60b9      	str	r1, [r7, #8]
    cefa:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    cefc:	687a      	ldr	r2, [r7, #4]
    cefe:	68b9      	ldr	r1, [r7, #8]
    cf00:	68fb      	ldr	r3, [r7, #12]
    cf02:	0018      	movs	r0, r3
    cf04:	4b05      	ldr	r3, [pc, #20]	; (cf1c <usart_serial_init+0x2c>)
    cf06:	4798      	blx	r3
    cf08:	1e03      	subs	r3, r0, #0
    cf0a:	d101      	bne.n	cf10 <usart_serial_init+0x20>
		return true;
    cf0c:	2301      	movs	r3, #1
    cf0e:	e000      	b.n	cf12 <usart_serial_init+0x22>
	}
	else {
		return false;
    cf10:	2300      	movs	r3, #0
	}
}
    cf12:	0018      	movs	r0, r3
    cf14:	46bd      	mov	sp, r7
    cf16:	b004      	add	sp, #16
    cf18:	bd80      	pop	{r7, pc}
    cf1a:	46c0      	nop			; (mov r8, r8)
    cf1c:	0000acd9 	.word	0x0000acd9

0000cf20 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    cf20:	b580      	push	{r7, lr}
    cf22:	b082      	sub	sp, #8
    cf24:	af00      	add	r7, sp, #0
    cf26:	6078      	str	r0, [r7, #4]
    cf28:	000a      	movs	r2, r1
    cf2a:	1cfb      	adds	r3, r7, #3
    cf2c:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    cf2e:	46c0      	nop			; (mov r8, r8)
    cf30:	1cfb      	adds	r3, r7, #3
    cf32:	781b      	ldrb	r3, [r3, #0]
    cf34:	b29a      	uxth	r2, r3
    cf36:	687b      	ldr	r3, [r7, #4]
    cf38:	0011      	movs	r1, r2
    cf3a:	0018      	movs	r0, r3
    cf3c:	4b04      	ldr	r3, [pc, #16]	; (cf50 <usart_serial_putchar+0x30>)
    cf3e:	4798      	blx	r3
    cf40:	1e03      	subs	r3, r0, #0
    cf42:	d1f5      	bne.n	cf30 <usart_serial_putchar+0x10>

	return STATUS_OK;
    cf44:	2300      	movs	r3, #0
}
    cf46:	0018      	movs	r0, r3
    cf48:	46bd      	mov	sp, r7
    cf4a:	b002      	add	sp, #8
    cf4c:	bd80      	pop	{r7, pc}
    cf4e:	46c0      	nop			; (mov r8, r8)
    cf50:	0000af4d 	.word	0x0000af4d

0000cf54 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    cf54:	b580      	push	{r7, lr}
    cf56:	b084      	sub	sp, #16
    cf58:	af00      	add	r7, sp, #0
    cf5a:	6078      	str	r0, [r7, #4]
    cf5c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    cf5e:	230e      	movs	r3, #14
    cf60:	18fb      	adds	r3, r7, r3
    cf62:	2200      	movs	r2, #0
    cf64:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    cf66:	46c0      	nop			; (mov r8, r8)
    cf68:	230e      	movs	r3, #14
    cf6a:	18fa      	adds	r2, r7, r3
    cf6c:	687b      	ldr	r3, [r7, #4]
    cf6e:	0011      	movs	r1, r2
    cf70:	0018      	movs	r0, r3
    cf72:	4b07      	ldr	r3, [pc, #28]	; (cf90 <usart_serial_getchar+0x3c>)
    cf74:	4798      	blx	r3
    cf76:	1e03      	subs	r3, r0, #0
    cf78:	d1f6      	bne.n	cf68 <usart_serial_getchar+0x14>

	*c = temp;
    cf7a:	230e      	movs	r3, #14
    cf7c:	18fb      	adds	r3, r7, r3
    cf7e:	881b      	ldrh	r3, [r3, #0]
    cf80:	b2da      	uxtb	r2, r3
    cf82:	683b      	ldr	r3, [r7, #0]
    cf84:	701a      	strb	r2, [r3, #0]
}
    cf86:	46c0      	nop			; (mov r8, r8)
    cf88:	46bd      	mov	sp, r7
    cf8a:	b004      	add	sp, #16
    cf8c:	bd80      	pop	{r7, pc}
    cf8e:	46c0      	nop			; (mov r8, r8)
    cf90:	0000afb1 	.word	0x0000afb1

0000cf94 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    cf94:	b580      	push	{r7, lr}
    cf96:	b084      	sub	sp, #16
    cf98:	af00      	add	r7, sp, #0
    cf9a:	60f8      	str	r0, [r7, #12]
    cf9c:	60b9      	str	r1, [r7, #8]
    cf9e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    cfa0:	4b10      	ldr	r3, [pc, #64]	; (cfe4 <stdio_serial_init+0x50>)
    cfa2:	68fa      	ldr	r2, [r7, #12]
    cfa4:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    cfa6:	4b10      	ldr	r3, [pc, #64]	; (cfe8 <stdio_serial_init+0x54>)
    cfa8:	4a10      	ldr	r2, [pc, #64]	; (cfec <stdio_serial_init+0x58>)
    cfaa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    cfac:	4b10      	ldr	r3, [pc, #64]	; (cff0 <stdio_serial_init+0x5c>)
    cfae:	4a11      	ldr	r2, [pc, #68]	; (cff4 <stdio_serial_init+0x60>)
    cfb0:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    cfb2:	687a      	ldr	r2, [r7, #4]
    cfb4:	68b9      	ldr	r1, [r7, #8]
    cfb6:	68fb      	ldr	r3, [r7, #12]
    cfb8:	0018      	movs	r0, r3
    cfba:	4b0f      	ldr	r3, [pc, #60]	; (cff8 <stdio_serial_init+0x64>)
    cfbc:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    cfbe:	4b0f      	ldr	r3, [pc, #60]	; (cffc <stdio_serial_init+0x68>)
    cfc0:	681b      	ldr	r3, [r3, #0]
    cfc2:	689b      	ldr	r3, [r3, #8]
    cfc4:	2100      	movs	r1, #0
    cfc6:	0018      	movs	r0, r3
    cfc8:	4b0d      	ldr	r3, [pc, #52]	; (d000 <stdio_serial_init+0x6c>)
    cfca:	4798      	blx	r3
	setbuf(stdin, NULL);
    cfcc:	4b0b      	ldr	r3, [pc, #44]	; (cffc <stdio_serial_init+0x68>)
    cfce:	681b      	ldr	r3, [r3, #0]
    cfd0:	685b      	ldr	r3, [r3, #4]
    cfd2:	2100      	movs	r1, #0
    cfd4:	0018      	movs	r0, r3
    cfd6:	4b0a      	ldr	r3, [pc, #40]	; (d000 <stdio_serial_init+0x6c>)
    cfd8:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    cfda:	46c0      	nop			; (mov r8, r8)
    cfdc:	46bd      	mov	sp, r7
    cfde:	b004      	add	sp, #16
    cfe0:	bd80      	pop	{r7, pc}
    cfe2:	46c0      	nop			; (mov r8, r8)
    cfe4:	200006b4 	.word	0x200006b4
    cfe8:	200006b0 	.word	0x200006b0
    cfec:	0000cf21 	.word	0x0000cf21
    cff0:	200006ac 	.word	0x200006ac
    cff4:	0000cf55 	.word	0x0000cf55
    cff8:	0000cef1 	.word	0x0000cef1
    cffc:	20000040 	.word	0x20000040
    d000:	0000f11d 	.word	0x0000f11d

0000d004 <get_moisture>:
/* Gets the moisture value from SEN13322
*
*/
//TODO Set reference value
float get_moisture(void)
{
    d004:	b580      	push	{r7, lr}
    d006:	b082      	sub	sp, #8
    d008:	af00      	add	r7, sp, #0
	// turn on sensor
	configure_port_pins_set(PIN_PA17);
    d00a:	2011      	movs	r0, #17
    d00c:	4b19      	ldr	r3, [pc, #100]	; (d074 <get_moisture+0x70>)
    d00e:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA17, true);
    d010:	2101      	movs	r1, #1
    d012:	2011      	movs	r0, #17
    d014:	4b18      	ldr	r3, [pc, #96]	; (d078 <get_moisture+0x74>)
    d016:	4798      	blx	r3
	
	delay_ms(500);
    d018:	23fa      	movs	r3, #250	; 0xfa
    d01a:	005b      	lsls	r3, r3, #1
    d01c:	0018      	movs	r0, r3
    d01e:	4b17      	ldr	r3, [pc, #92]	; (d07c <get_moisture+0x78>)
    d020:	4798      	blx	r3
	
	// read ADC
	uint16_t adc_result;
	adc_start_conversion(&adc_instance);
    d022:	4b17      	ldr	r3, [pc, #92]	; (d080 <get_moisture+0x7c>)
    d024:	0018      	movs	r0, r3
    d026:	4b17      	ldr	r3, [pc, #92]	; (d084 <get_moisture+0x80>)
    d028:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    d02a:	1cba      	adds	r2, r7, #2
    d02c:	4b14      	ldr	r3, [pc, #80]	; (d080 <get_moisture+0x7c>)
    d02e:	0011      	movs	r1, r2
    d030:	0018      	movs	r0, r3
    d032:	4b15      	ldr	r3, [pc, #84]	; (d088 <get_moisture+0x84>)
    d034:	4798      	blx	r3
    d036:	0003      	movs	r3, r0
    d038:	2b05      	cmp	r3, #5
    d03a:	d0f6      	beq.n	d02a <get_moisture+0x26>
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
    d03c:	1cbb      	adds	r3, r7, #2
    d03e:	881b      	ldrh	r3, [r3, #0]
    d040:	001a      	movs	r2, r3
    d042:	4b12      	ldr	r3, [pc, #72]	; (d08c <get_moisture+0x88>)
    d044:	0010      	movs	r0, r2
    d046:	4798      	blx	r3
    d048:	1c02      	adds	r2, r0, #0
    d04a:	4b11      	ldr	r3, [pc, #68]	; (d090 <get_moisture+0x8c>)
    d04c:	4911      	ldr	r1, [pc, #68]	; (d094 <get_moisture+0x90>)
    d04e:	1c10      	adds	r0, r2, #0
    d050:	4798      	blx	r3
    d052:	1c03      	adds	r3, r0, #0
    d054:	1c1a      	adds	r2, r3, #0
    d056:	4b10      	ldr	r3, [pc, #64]	; (d098 <get_moisture+0x94>)
    d058:	4910      	ldr	r1, [pc, #64]	; (d09c <get_moisture+0x98>)
    d05a:	1c10      	adds	r0, r2, #0
    d05c:	4798      	blx	r3
    d05e:	1c03      	adds	r3, r0, #0
    d060:	607b      	str	r3, [r7, #4]
	
	//turn off sensor
	port_pin_set_output_level(PIN_PA17, false);
    d062:	2100      	movs	r1, #0
    d064:	2011      	movs	r0, #17
    d066:	4b04      	ldr	r3, [pc, #16]	; (d078 <get_moisture+0x74>)
    d068:	4798      	blx	r3
	

	return moisture;
    d06a:	687b      	ldr	r3, [r7, #4]

	
}
    d06c:	1c18      	adds	r0, r3, #0
    d06e:	46bd      	mov	sp, r7
    d070:	b002      	add	sp, #8
    d072:	bd80      	pop	{r7, pc}
    d074:	0000d2f5 	.word	0x0000d2f5
    d078:	0000cd1d 	.word	0x0000cd1d
    d07c:	000087e9 	.word	0x000087e9
    d080:	20000558 	.word	0x20000558
    d084:	0000caa5 	.word	0x0000caa5
    d088:	0000caed 	.word	0x0000caed
    d08c:	00011be9 	.word	0x00011be9
    d090:	00011719 	.word	0x00011719
    d094:	457ff000 	.word	0x457ff000
    d098:	000119a9 	.word	0x000119a9
    d09c:	42c80000 	.word	0x42c80000

0000d0a0 <configure_i2c_temp>:
 *      @li Pin SDA: PA08 //TODO: CONFIRM
 *      @li Pin SCL: PA09 //TODO: CONFIRM
 *      @li Clock Generator: @ref GCLK_GENERATOR_0
 */
void configure_i2c_temp(void)
{
    d0a0:	b580      	push	{r7, lr}
    d0a2:	b08e      	sub	sp, #56	; 0x38
    d0a4:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    d0a6:	1d3b      	adds	r3, r7, #4
    d0a8:	0018      	movs	r0, r3
    d0aa:	4b10      	ldr	r3, [pc, #64]	; (d0ec <configure_i2c_temp+0x4c>)
    d0ac:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    d0ae:	1d3b      	adds	r3, r7, #4
    d0b0:	2201      	movs	r2, #1
    d0b2:	4252      	negs	r2, r2
    d0b4:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    d0b6:	1d3b      	adds	r3, r7, #4
    d0b8:	4a0d      	ldr	r2, [pc, #52]	; (d0f0 <configure_i2c_temp+0x50>)
    d0ba:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    d0bc:	1d3b      	adds	r3, r7, #4
    d0be:	4a0d      	ldr	r2, [pc, #52]	; (d0f4 <configure_i2c_temp+0x54>)
    d0c0:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    d0c2:	1d3b      	adds	r3, r7, #4
    d0c4:	2200      	movs	r2, #0
    d0c6:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_hdc_instance, CONF_I2C_MASTER_MODULE_TEMP, &config_i2c_master) != STATUS_OK);
    d0c8:	46c0      	nop			; (mov r8, r8)
    d0ca:	1d3a      	adds	r2, r7, #4
    d0cc:	490a      	ldr	r1, [pc, #40]	; (d0f8 <configure_i2c_temp+0x58>)
    d0ce:	4b0b      	ldr	r3, [pc, #44]	; (d0fc <configure_i2c_temp+0x5c>)
    d0d0:	0018      	movs	r0, r3
    d0d2:	4b0b      	ldr	r3, [pc, #44]	; (d100 <configure_i2c_temp+0x60>)
    d0d4:	4798      	blx	r3
    d0d6:	1e03      	subs	r3, r0, #0
    d0d8:	d1f7      	bne.n	d0ca <configure_i2c_temp+0x2a>
	i2c_master_enable(&i2c_hdc_instance);
    d0da:	4b08      	ldr	r3, [pc, #32]	; (d0fc <configure_i2c_temp+0x5c>)
    d0dc:	0018      	movs	r0, r3
    d0de:	4b09      	ldr	r3, [pc, #36]	; (d104 <configure_i2c_temp+0x64>)
    d0e0:	4798      	blx	r3
}
    d0e2:	46c0      	nop			; (mov r8, r8)
    d0e4:	46bd      	mov	sp, r7
    d0e6:	b00e      	add	sp, #56	; 0x38
    d0e8:	bd80      	pop	{r7, pc}
    d0ea:	46c0      	nop			; (mov r8, r8)
    d0ec:	0000cbdd 	.word	0x0000cbdd
    d0f0:	00160002 	.word	0x00160002
    d0f4:	00170002 	.word	0x00170002
    d0f8:	42001400 	.word	0x42001400
    d0fc:	200004f0 	.word	0x200004f0
    d100:	000094fd 	.word	0x000094fd
    d104:	0000cc61 	.word	0x0000cc61

0000d108 <configure_i2c_lux>:

void configure_i2c_lux(void)
{
    d108:	b580      	push	{r7, lr}
    d10a:	b08e      	sub	sp, #56	; 0x38
    d10c:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    d10e:	1d3b      	adds	r3, r7, #4
    d110:	0018      	movs	r0, r3
    d112:	4b10      	ldr	r3, [pc, #64]	; (d154 <configure_i2c_lux+0x4c>)
    d114:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    d116:	1d3b      	adds	r3, r7, #4
    d118:	2201      	movs	r2, #1
    d11a:	4252      	negs	r2, r2
    d11c:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    d11e:	1d3b      	adds	r3, r7, #4
    d120:	4a0d      	ldr	r2, [pc, #52]	; (d158 <configure_i2c_lux+0x50>)
    d122:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    d124:	1d3b      	adds	r3, r7, #4
    d126:	4a0d      	ldr	r2, [pc, #52]	; (d15c <configure_i2c_lux+0x54>)
    d128:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    d12a:	1d3b      	adds	r3, r7, #4
    d12c:	2200      	movs	r2, #0
    d12e:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_tsl_instance, CONF_I2C_MASTER_MODULE_LUX, &config_i2c_master) != STATUS_OK);
    d130:	46c0      	nop			; (mov r8, r8)
    d132:	1d3a      	adds	r2, r7, #4
    d134:	490a      	ldr	r1, [pc, #40]	; (d160 <configure_i2c_lux+0x58>)
    d136:	4b0b      	ldr	r3, [pc, #44]	; (d164 <configure_i2c_lux+0x5c>)
    d138:	0018      	movs	r0, r3
    d13a:	4b0b      	ldr	r3, [pc, #44]	; (d168 <configure_i2c_lux+0x60>)
    d13c:	4798      	blx	r3
    d13e:	1e03      	subs	r3, r0, #0
    d140:	d1f7      	bne.n	d132 <configure_i2c_lux+0x2a>
	i2c_master_enable(&i2c_tsl_instance);
    d142:	4b08      	ldr	r3, [pc, #32]	; (d164 <configure_i2c_lux+0x5c>)
    d144:	0018      	movs	r0, r3
    d146:	4b09      	ldr	r3, [pc, #36]	; (d16c <configure_i2c_lux+0x64>)
    d148:	4798      	blx	r3
}
    d14a:	46c0      	nop			; (mov r8, r8)
    d14c:	46bd      	mov	sp, r7
    d14e:	b00e      	add	sp, #56	; 0x38
    d150:	bd80      	pop	{r7, pc}
    d152:	46c0      	nop			; (mov r8, r8)
    d154:	0000cbdd 	.word	0x0000cbdd
    d158:	00080002 	.word	0x00080002
    d15c:	00090002 	.word	0x00090002
    d160:	42000800 	.word	0x42000800
    d164:	2000047c 	.word	0x2000047c
    d168:	000094fd 	.word	0x000094fd
    d16c:	0000cc61 	.word	0x0000cc61

0000d170 <i2c_write_complete_callback_hdc>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback_hdc(struct i2c_master_module *const module)
{
    d170:	b580      	push	{r7, lr}
    d172:	b082      	sub	sp, #8
    d174:	af00      	add	r7, sp, #0
    d176:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_hdc_instance, &rd_packet);
    d178:	4a04      	ldr	r2, [pc, #16]	; (d18c <i2c_write_complete_callback_hdc+0x1c>)
    d17a:	4b05      	ldr	r3, [pc, #20]	; (d190 <i2c_write_complete_callback_hdc+0x20>)
    d17c:	0011      	movs	r1, r2
    d17e:	0018      	movs	r0, r3
    d180:	4b04      	ldr	r3, [pc, #16]	; (d194 <i2c_write_complete_callback_hdc+0x24>)
    d182:	4798      	blx	r3
}
    d184:	46c0      	nop			; (mov r8, r8)
    d186:	46bd      	mov	sp, r7
    d188:	b002      	add	sp, #8
    d18a:	bd80      	pop	{r7, pc}
    d18c:	20000034 	.word	0x20000034
    d190:	200004f0 	.word	0x200004f0
    d194:	00009fbd 	.word	0x00009fbd

0000d198 <i2c_write_complete_callback_tsl>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback_tsl(struct i2c_master_module *const module)
{
    d198:	b580      	push	{r7, lr}
    d19a:	b082      	sub	sp, #8
    d19c:	af00      	add	r7, sp, #0
    d19e:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_tsl_instance, &rd_packet);
    d1a0:	4a04      	ldr	r2, [pc, #16]	; (d1b4 <i2c_write_complete_callback_tsl+0x1c>)
    d1a2:	4b05      	ldr	r3, [pc, #20]	; (d1b8 <i2c_write_complete_callback_tsl+0x20>)
    d1a4:	0011      	movs	r1, r2
    d1a6:	0018      	movs	r0, r3
    d1a8:	4b04      	ldr	r3, [pc, #16]	; (d1bc <i2c_write_complete_callback_tsl+0x24>)
    d1aa:	4798      	blx	r3
}
    d1ac:	46c0      	nop			; (mov r8, r8)
    d1ae:	46bd      	mov	sp, r7
    d1b0:	b002      	add	sp, #8
    d1b2:	bd80      	pop	{r7, pc}
    d1b4:	20000034 	.word	0x20000034
    d1b8:	2000047c 	.word	0x2000047c
    d1bc:	00009fbd 	.word	0x00009fbd

0000d1c0 <configure_i2c_callbacks_hdc>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks_hdc(void)
{
    d1c0:	b580      	push	{r7, lr}
    d1c2:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_hdc_instance, i2c_write_complete_callback_hdc,
    d1c4:	4906      	ldr	r1, [pc, #24]	; (d1e0 <configure_i2c_callbacks_hdc+0x20>)
    d1c6:	4b07      	ldr	r3, [pc, #28]	; (d1e4 <configure_i2c_callbacks_hdc+0x24>)
    d1c8:	2200      	movs	r2, #0
    d1ca:	0018      	movs	r0, r3
    d1cc:	4b06      	ldr	r3, [pc, #24]	; (d1e8 <configure_i2c_callbacks_hdc+0x28>)
    d1ce:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_hdc_instance,
    d1d0:	4b04      	ldr	r3, [pc, #16]	; (d1e4 <configure_i2c_callbacks_hdc+0x24>)
    d1d2:	2100      	movs	r1, #0
    d1d4:	0018      	movs	r0, r3
    d1d6:	4b05      	ldr	r3, [pc, #20]	; (d1ec <configure_i2c_callbacks_hdc+0x2c>)
    d1d8:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    d1da:	46c0      	nop			; (mov r8, r8)
    d1dc:	46bd      	mov	sp, r7
    d1de:	bd80      	pop	{r7, pc}
    d1e0:	0000d171 	.word	0x0000d171
    d1e4:	200004f0 	.word	0x200004f0
    d1e8:	00009e1d 	.word	0x00009e1d
    d1ec:	0000cd71 	.word	0x0000cd71

0000d1f0 <configure_i2c_callbacks_tsl>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks_tsl(void)
{
    d1f0:	b580      	push	{r7, lr}
    d1f2:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_tsl_instance, i2c_write_complete_callback_tsl,
    d1f4:	4906      	ldr	r1, [pc, #24]	; (d210 <configure_i2c_callbacks_tsl+0x20>)
    d1f6:	4b07      	ldr	r3, [pc, #28]	; (d214 <configure_i2c_callbacks_tsl+0x24>)
    d1f8:	2200      	movs	r2, #0
    d1fa:	0018      	movs	r0, r3
    d1fc:	4b06      	ldr	r3, [pc, #24]	; (d218 <configure_i2c_callbacks_tsl+0x28>)
    d1fe:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_tsl_instance,
    d200:	4b04      	ldr	r3, [pc, #16]	; (d214 <configure_i2c_callbacks_tsl+0x24>)
    d202:	2100      	movs	r1, #0
    d204:	0018      	movs	r0, r3
    d206:	4b05      	ldr	r3, [pc, #20]	; (d21c <configure_i2c_callbacks_tsl+0x2c>)
    d208:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    d20a:	46c0      	nop			; (mov r8, r8)
    d20c:	46bd      	mov	sp, r7
    d20e:	bd80      	pop	{r7, pc}
    d210:	0000d199 	.word	0x0000d199
    d214:	2000047c 	.word	0x2000047c
    d218:	00009e1d 	.word	0x00009e1d
    d21c:	0000cd71 	.word	0x0000cd71

0000d220 <configure_usart>:
 *      @li RX Pin: PA20
 *      @li TX Pin: PA21
 *      @li SERCOM: SERCOM3
 */
void configure_usart(void)
{
    d220:	b580      	push	{r7, lr}
    d222:	b090      	sub	sp, #64	; 0x40
    d224:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
    d226:	003b      	movs	r3, r7
    d228:	0018      	movs	r0, r3
    d22a:	4b13      	ldr	r3, [pc, #76]	; (d278 <configure_usart+0x58>)
    d22c:	4798      	blx	r3
	config_usart.baudrate = 9600;
    d22e:	003b      	movs	r3, r7
    d230:	2296      	movs	r2, #150	; 0x96
    d232:	0192      	lsls	r2, r2, #6
    d234:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    d236:	003b      	movs	r3, r7
    d238:	22c4      	movs	r2, #196	; 0xc4
    d23a:	0392      	lsls	r2, r2, #14
    d23c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    d23e:	003b      	movs	r3, r7
    d240:	2201      	movs	r2, #1
    d242:	4252      	negs	r2, r2
    d244:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    d246:	003b      	movs	r3, r7
    d248:	2201      	movs	r2, #1
    d24a:	4252      	negs	r2, r2
    d24c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    d24e:	003b      	movs	r3, r7
    d250:	4a0a      	ldr	r2, [pc, #40]	; (d27c <configure_usart+0x5c>)
    d252:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    d254:	003b      	movs	r3, r7
    d256:	4a0a      	ldr	r2, [pc, #40]	; (d280 <configure_usart+0x60>)
    d258:	63da      	str	r2, [r3, #60]	; 0x3c
	//config_usart.pinmux_pad0 = PINMUX_UNUSED;
	//config_usart.pinmux_pad1 = PINMUX_UNUSED;
	//config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
	//config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    d25a:	003a      	movs	r2, r7
    d25c:	4909      	ldr	r1, [pc, #36]	; (d284 <configure_usart+0x64>)
    d25e:	4b0a      	ldr	r3, [pc, #40]	; (d288 <configure_usart+0x68>)
    d260:	0018      	movs	r0, r3
    d262:	4b0a      	ldr	r3, [pc, #40]	; (d28c <configure_usart+0x6c>)
    d264:	4798      	blx	r3

	usart_enable(&usart_instance);
    d266:	4b08      	ldr	r3, [pc, #32]	; (d288 <configure_usart+0x68>)
    d268:	0018      	movs	r0, r3
    d26a:	4b09      	ldr	r3, [pc, #36]	; (d290 <configure_usart+0x70>)
    d26c:	4798      	blx	r3
}
    d26e:	46c0      	nop			; (mov r8, r8)
    d270:	46bd      	mov	sp, r7
    d272:	b010      	add	sp, #64	; 0x40
    d274:	bd80      	pop	{r7, pc}
    d276:	46c0      	nop			; (mov r8, r8)
    d278:	0000cde9 	.word	0x0000cde9
    d27c:	002a0003 	.word	0x002a0003
    d280:	002b0003 	.word	0x002b0003
    d284:	42001800 	.word	0x42001800
    d288:	20000448 	.word	0x20000448
    d28c:	0000cf95 	.word	0x0000cf95
    d290:	0000cea9 	.word	0x0000cea9

0000d294 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    d294:	b580      	push	{r7, lr}
    d296:	b08e      	sub	sp, #56	; 0x38
    d298:	af00      	add	r7, sp, #0
    d29a:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    d29c:	2308      	movs	r3, #8
    d29e:	18fb      	adds	r3, r7, r3
    d2a0:	0018      	movs	r0, r3
    d2a2:	4b0f      	ldr	r3, [pc, #60]	; (d2e0 <configure_adc+0x4c>)
    d2a4:	4798      	blx	r3
	config_adc.positive_input = pin;
    d2a6:	687b      	ldr	r3, [r7, #4]
    d2a8:	b2da      	uxtb	r2, r3
    d2aa:	2308      	movs	r3, #8
    d2ac:	18fb      	adds	r3, r7, r3
    d2ae:	731a      	strb	r2, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    d2b0:	2308      	movs	r3, #8
    d2b2:	18fb      	adds	r3, r7, r3
    d2b4:	2201      	movs	r2, #1
    d2b6:	705a      	strb	r2, [r3, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    d2b8:	2308      	movs	r3, #8
    d2ba:	18fb      	adds	r3, r7, r3
    d2bc:	2280      	movs	r2, #128	; 0x80
    d2be:	0092      	lsls	r2, r2, #2
    d2c0:	805a      	strh	r2, [r3, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    d2c2:	2308      	movs	r3, #8
    d2c4:	18fa      	adds	r2, r7, r3
    d2c6:	4907      	ldr	r1, [pc, #28]	; (d2e4 <configure_adc+0x50>)
    d2c8:	4b07      	ldr	r3, [pc, #28]	; (d2e8 <configure_adc+0x54>)
    d2ca:	0018      	movs	r0, r3
    d2cc:	4b07      	ldr	r3, [pc, #28]	; (d2ec <configure_adc+0x58>)
    d2ce:	4798      	blx	r3
	adc_enable(&adc_instance);
    d2d0:	4b05      	ldr	r3, [pc, #20]	; (d2e8 <configure_adc+0x54>)
    d2d2:	0018      	movs	r0, r3
    d2d4:	4b06      	ldr	r3, [pc, #24]	; (d2f0 <configure_adc+0x5c>)
    d2d6:	4798      	blx	r3
}
    d2d8:	46c0      	nop			; (mov r8, r8)
    d2da:	46bd      	mov	sp, r7
    d2dc:	b00e      	add	sp, #56	; 0x38
    d2de:	bd80      	pop	{r7, pc}
    d2e0:	0000891d 	.word	0x0000891d
    d2e4:	42004000 	.word	0x42004000
    d2e8:	20000558 	.word	0x20000558
    d2ec:	00008f6d 	.word	0x00008f6d
    d2f0:	0000ca51 	.word	0x0000ca51

0000d2f4 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    d2f4:	b580      	push	{r7, lr}
    d2f6:	b084      	sub	sp, #16
    d2f8:	af00      	add	r7, sp, #0
    d2fa:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    d2fc:	230c      	movs	r3, #12
    d2fe:	18fb      	adds	r3, r7, r3
    d300:	0018      	movs	r0, r3
    d302:	4b09      	ldr	r3, [pc, #36]	; (d328 <configure_port_pins_set+0x34>)
    d304:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    d306:	230c      	movs	r3, #12
    d308:	18fb      	adds	r3, r7, r3
    d30a:	2201      	movs	r2, #1
    d30c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(pin, &config_port_pin);
    d30e:	687b      	ldr	r3, [r7, #4]
    d310:	b2db      	uxtb	r3, r3
    d312:	220c      	movs	r2, #12
    d314:	18ba      	adds	r2, r7, r2
    d316:	0011      	movs	r1, r2
    d318:	0018      	movs	r0, r3
    d31a:	4b04      	ldr	r3, [pc, #16]	; (d32c <configure_port_pins_set+0x38>)
    d31c:	4798      	blx	r3
}
    d31e:	46c0      	nop			; (mov r8, r8)
    d320:	46bd      	mov	sp, r7
    d322:	b004      	add	sp, #16
    d324:	bd80      	pop	{r7, pc}
    d326:	46c0      	nop			; (mov r8, r8)
    d328:	0000ccf9 	.word	0x0000ccf9
    d32c:	0000b77d 	.word	0x0000b77d

0000d330 <led2_on>:
	configure_port_pins_set(PIN_PA21);
	port_pin_set_output_level(PIN_PA21, false);
}

void led2_on(void)
{
    d330:	b580      	push	{r7, lr}
    d332:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
    d334:	2003      	movs	r0, #3
    d336:	4b04      	ldr	r3, [pc, #16]	; (d348 <led2_on+0x18>)
    d338:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, true);
    d33a:	2101      	movs	r1, #1
    d33c:	2003      	movs	r0, #3
    d33e:	4b03      	ldr	r3, [pc, #12]	; (d34c <led2_on+0x1c>)
    d340:	4798      	blx	r3
}
    d342:	46c0      	nop			; (mov r8, r8)
    d344:	46bd      	mov	sp, r7
    d346:	bd80      	pop	{r7, pc}
    d348:	0000d2f5 	.word	0x0000d2f5
    d34c:	0000cd1d 	.word	0x0000cd1d

0000d350 <led2_off>:

void led2_off(void)
{
    d350:	b580      	push	{r7, lr}
    d352:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
    d354:	2003      	movs	r0, #3
    d356:	4b04      	ldr	r3, [pc, #16]	; (d368 <led2_off+0x18>)
    d358:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, false);
    d35a:	2100      	movs	r1, #0
    d35c:	2003      	movs	r0, #3
    d35e:	4b03      	ldr	r3, [pc, #12]	; (d36c <led2_off+0x1c>)
    d360:	4798      	blx	r3
}
    d362:	46c0      	nop			; (mov r8, r8)
    d364:	46bd      	mov	sp, r7
    d366:	bd80      	pop	{r7, pc}
    d368:	0000d2f5 	.word	0x0000d2f5
    d36c:	0000cd1d 	.word	0x0000cd1d

0000d370 <relay1_enable>:
	configure_port_pins_set(PIN_PA20);
	port_pin_set_output_level(PIN_PA20, false);
}

void relay1_enable(void)
{
    d370:	b580      	push	{r7, lr}
    d372:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
    d374:	2022      	movs	r0, #34	; 0x22
    d376:	4b04      	ldr	r3, [pc, #16]	; (d388 <relay1_enable+0x18>)
    d378:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, true);
    d37a:	2101      	movs	r1, #1
    d37c:	2022      	movs	r0, #34	; 0x22
    d37e:	4b03      	ldr	r3, [pc, #12]	; (d38c <relay1_enable+0x1c>)
    d380:	4798      	blx	r3
}
    d382:	46c0      	nop			; (mov r8, r8)
    d384:	46bd      	mov	sp, r7
    d386:	bd80      	pop	{r7, pc}
    d388:	0000d2f5 	.word	0x0000d2f5
    d38c:	0000cd1d 	.word	0x0000cd1d

0000d390 <relay1_disable>:

void relay1_disable(void)
{
    d390:	b580      	push	{r7, lr}
    d392:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
    d394:	2022      	movs	r0, #34	; 0x22
    d396:	4b04      	ldr	r3, [pc, #16]	; (d3a8 <relay1_disable+0x18>)
    d398:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, false);
    d39a:	2100      	movs	r1, #0
    d39c:	2022      	movs	r0, #34	; 0x22
    d39e:	4b03      	ldr	r3, [pc, #12]	; (d3ac <relay1_disable+0x1c>)
    d3a0:	4798      	blx	r3
}
    d3a2:	46c0      	nop			; (mov r8, r8)
    d3a4:	46bd      	mov	sp, r7
    d3a6:	bd80      	pop	{r7, pc}
    d3a8:	0000d2f5 	.word	0x0000d2f5
    d3ac:	0000cd1d 	.word	0x0000cd1d

0000d3b0 <relay2_enable>:

void relay2_enable(void)
{
    d3b0:	b580      	push	{r7, lr}
    d3b2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
    d3b4:	2023      	movs	r0, #35	; 0x23
    d3b6:	4b04      	ldr	r3, [pc, #16]	; (d3c8 <relay2_enable+0x18>)
    d3b8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, true);
    d3ba:	2101      	movs	r1, #1
    d3bc:	2023      	movs	r0, #35	; 0x23
    d3be:	4b03      	ldr	r3, [pc, #12]	; (d3cc <relay2_enable+0x1c>)
    d3c0:	4798      	blx	r3
}
    d3c2:	46c0      	nop			; (mov r8, r8)
    d3c4:	46bd      	mov	sp, r7
    d3c6:	bd80      	pop	{r7, pc}
    d3c8:	0000d2f5 	.word	0x0000d2f5
    d3cc:	0000cd1d 	.word	0x0000cd1d

0000d3d0 <relay2_disable>:

void relay2_disable(void)
{
    d3d0:	b580      	push	{r7, lr}
    d3d2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
    d3d4:	2023      	movs	r0, #35	; 0x23
    d3d6:	4b04      	ldr	r3, [pc, #16]	; (d3e8 <relay2_disable+0x18>)
    d3d8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, false);
    d3da:	2100      	movs	r1, #0
    d3dc:	2023      	movs	r0, #35	; 0x23
    d3de:	4b03      	ldr	r3, [pc, #12]	; (d3ec <relay2_disable+0x1c>)
    d3e0:	4798      	blx	r3
}
    d3e2:	46c0      	nop			; (mov r8, r8)
    d3e4:	46bd      	mov	sp, r7
    d3e6:	bd80      	pop	{r7, pc}
    d3e8:	0000d2f5 	.word	0x0000d2f5
    d3ec:	0000cd1d 	.word	0x0000cd1d

0000d3f0 <gpio5_enable>:

void gpio5_enable(void)
{
    d3f0:	b580      	push	{r7, lr}
    d3f2:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
    d3f4:	2037      	movs	r0, #55	; 0x37
    d3f6:	4b04      	ldr	r3, [pc, #16]	; (d408 <gpio5_enable+0x18>)
    d3f8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, true);
    d3fa:	2101      	movs	r1, #1
    d3fc:	2037      	movs	r0, #55	; 0x37
    d3fe:	4b03      	ldr	r3, [pc, #12]	; (d40c <gpio5_enable+0x1c>)
    d400:	4798      	blx	r3
}
    d402:	46c0      	nop			; (mov r8, r8)
    d404:	46bd      	mov	sp, r7
    d406:	bd80      	pop	{r7, pc}
    d408:	0000d2f5 	.word	0x0000d2f5
    d40c:	0000cd1d 	.word	0x0000cd1d

0000d410 <gpio5_disable>:

void gpio5_disable(void)
{
    d410:	b580      	push	{r7, lr}
    d412:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
    d414:	2037      	movs	r0, #55	; 0x37
    d416:	4b04      	ldr	r3, [pc, #16]	; (d428 <gpio5_disable+0x18>)
    d418:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, false);
    d41a:	2100      	movs	r1, #0
    d41c:	2037      	movs	r0, #55	; 0x37
    d41e:	4b03      	ldr	r3, [pc, #12]	; (d42c <gpio5_disable+0x1c>)
    d420:	4798      	blx	r3
}
    d422:	46c0      	nop			; (mov r8, r8)
    d424:	46bd      	mov	sp, r7
    d426:	bd80      	pop	{r7, pc}
    d428:	0000d2f5 	.word	0x0000d2f5
    d42c:	0000cd1d 	.word	0x0000cd1d

0000d430 <run_pump>:

	tcc_init(&tcc_instance_pwm, CONF_PWM_MODULE, &config_tcc);
	tcc_enable(&tcc_instance_pwm);
}

void run_pump(int duration) {
    d430:	b580      	push	{r7, lr}
    d432:	b082      	sub	sp, #8
    d434:	af00      	add	r7, sp, #0
    d436:	6078      	str	r0, [r7, #4]
	
	//boost_enable();
	gpio5_enable();
    d438:	4b09      	ldr	r3, [pc, #36]	; (d460 <run_pump+0x30>)
    d43a:	4798      	blx	r3
// 		{
// 			ramp_tcc_pwm(0xFFFF*i);
// 			delay_ms(2000);
// 		}
		
	delay_ms(duration); //duration of pump
    d43c:	687b      	ldr	r3, [r7, #4]
    d43e:	2b00      	cmp	r3, #0
    d440:	d004      	beq.n	d44c <run_pump+0x1c>
    d442:	687b      	ldr	r3, [r7, #4]
    d444:	0018      	movs	r0, r3
    d446:	4b07      	ldr	r3, [pc, #28]	; (d464 <run_pump+0x34>)
    d448:	4798      	blx	r3
    d44a:	e002      	b.n	d452 <run_pump+0x22>
    d44c:	2001      	movs	r0, #1
    d44e:	4b06      	ldr	r3, [pc, #24]	; (d468 <run_pump+0x38>)
    d450:	4798      	blx	r3
	
	//tcc_disable(&tcc_instance_pwm);
	gpio5_disable();
    d452:	4b06      	ldr	r3, [pc, #24]	; (d46c <run_pump+0x3c>)
    d454:	4798      	blx	r3
	//boost_disable();
	
    d456:	46c0      	nop			; (mov r8, r8)
    d458:	46bd      	mov	sp, r7
    d45a:	b002      	add	sp, #8
    d45c:	bd80      	pop	{r7, pc}
    d45e:	46c0      	nop			; (mov r8, r8)
    d460:	0000d3f1 	.word	0x0000d3f1
    d464:	000087e9 	.word	0x000087e9
    d468:	000087b9 	.word	0x000087b9
    d46c:	0000d411 	.word	0x0000d411

0000d470 <system_interrupt_enable_global>:
{
    d470:	b580      	push	{r7, lr}
    d472:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    d474:	4b04      	ldr	r3, [pc, #16]	; (d488 <system_interrupt_enable_global+0x18>)
    d476:	2201      	movs	r2, #1
    d478:	701a      	strb	r2, [r3, #0]
    d47a:	f3bf 8f5f 	dmb	sy
    d47e:	b662      	cpsie	i
}
    d480:	46c0      	nop			; (mov r8, r8)
    d482:	46bd      	mov	sp, r7
    d484:	bd80      	pop	{r7, pc}
    d486:	46c0      	nop			; (mov r8, r8)
    d488:	20000030 	.word	0x20000030

0000d48c <main>:
	}
}


int main(void)
{
    d48c:	b590      	push	{r4, r7, lr}
    d48e:	b099      	sub	sp, #100	; 0x64
    d490:	af02      	add	r7, sp, #8
	uint32_t MQTTCounter = 0;
    d492:	2300      	movs	r3, #0
    d494:	657b      	str	r3, [r7, #84]	; 0x54
	
	int wifi_result = SUCCESS;
    d496:	2300      	movs	r3, #0
    d498:	64fb      	str	r3, [r7, #76]	; 0x4c
	    
	uint8_t mqtt_send_buffer[MQTT_SEND_BUFFER_SIZE];


	system_init();
    d49a:	4b5e      	ldr	r3, [pc, #376]	; (d614 <main+0x188>)
    d49c:	4798      	blx	r3
	system_interrupt_enable_global();
    d49e:	4b5e      	ldr	r3, [pc, #376]	; (d618 <main+0x18c>)
    d4a0:	4798      	blx	r3
	delay_init();
    d4a2:	4b5e      	ldr	r3, [pc, #376]	; (d61c <main+0x190>)
    d4a4:	4798      	blx	r3
	configure_usart();
    d4a6:	4b5e      	ldr	r3, [pc, #376]	; (d620 <main+0x194>)
    d4a8:	4798      	blx	r3
	
	wifi_result = wifi_init();
    d4aa:	4b5e      	ldr	r3, [pc, #376]	; (d624 <main+0x198>)
    d4ac:	4798      	blx	r3
    d4ae:	0003      	movs	r3, r0
    d4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	
	if (SUCCESS != wifi_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
    d4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	d003      	beq.n	d4c0 <main+0x34>
    d4b8:	4b5b      	ldr	r3, [pc, #364]	; (d628 <main+0x19c>)
    d4ba:	0018      	movs	r0, r3
    d4bc:	4b5b      	ldr	r3, [pc, #364]	; (d62c <main+0x1a0>)
    d4be:	4798      	blx	r3
	
	printf("Board initialized.\r\n");
    d4c0:	4b5b      	ldr	r3, [pc, #364]	; (d630 <main+0x1a4>)
    d4c2:	0018      	movs	r0, r3
    d4c4:	4b59      	ldr	r3, [pc, #356]	; (d62c <main+0x1a0>)
    d4c6:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    d4c8:	4a5a      	ldr	r2, [pc, #360]	; (d634 <main+0x1a8>)
    d4ca:	485b      	ldr	r0, [pc, #364]	; (d638 <main+0x1ac>)
    d4cc:	23ff      	movs	r3, #255	; 0xff
    d4ce:	9300      	str	r3, [sp, #0]
    d4d0:	0013      	movs	r3, r2
    d4d2:	2202      	movs	r2, #2
    d4d4:	2112      	movs	r1, #18
    d4d6:	4c59      	ldr	r4, [pc, #356]	; (d63c <main+0x1b0>)
    d4d8:	47a0      	blx	r4
	MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	
	while(!(wifi_connected)) {		
    d4da:	e006      	b.n	d4ea <main+0x5e>
		    /* Handle pending events from network controller. */
		    m2m_wifi_handle_events(NULL);
    d4dc:	2000      	movs	r0, #0
    d4de:	4b58      	ldr	r3, [pc, #352]	; (d640 <main+0x1b4>)
    d4e0:	4798      	blx	r3
		    /* Checks the timer timeout. */
		    sw_timer_task(&swt_module_inst);
    d4e2:	4b58      	ldr	r3, [pc, #352]	; (d644 <main+0x1b8>)
    d4e4:	0018      	movs	r0, r3
    d4e6:	4b58      	ldr	r3, [pc, #352]	; (d648 <main+0x1bc>)
    d4e8:	4798      	blx	r3
	while(!(wifi_connected)) {		
    d4ea:	4b58      	ldr	r3, [pc, #352]	; (d64c <main+0x1c0>)
    d4ec:	681b      	ldr	r3, [r3, #0]
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	d0f4      	beq.n	d4dc <main+0x50>
	}
	
	while(!(mqtt_connected)) {
    d4f2:	e006      	b.n	d502 <main+0x76>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    d4f4:	2000      	movs	r0, #0
    d4f6:	4b52      	ldr	r3, [pc, #328]	; (d640 <main+0x1b4>)
    d4f8:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    d4fa:	4b52      	ldr	r3, [pc, #328]	; (d644 <main+0x1b8>)
    d4fc:	0018      	movs	r0, r3
    d4fe:	4b52      	ldr	r3, [pc, #328]	; (d648 <main+0x1bc>)
    d500:	4798      	blx	r3
	while(!(mqtt_connected)) {
    d502:	4b53      	ldr	r3, [pc, #332]	; (d650 <main+0x1c4>)
    d504:	681b      	ldr	r3, [r3, #0]
    d506:	2b00      	cmp	r3, #0
    d508:	d0f4      	beq.n	d4f4 <main+0x68>
	}
	
	
	
	configure_adc(MOISTURE_ANA_PIN); //configure moisture sensor analog
    d50a:	2000      	movs	r0, #0
    d50c:	4b51      	ldr	r3, [pc, #324]	; (d654 <main+0x1c8>)
    d50e:	4798      	blx	r3
	configure_i2c_temp(); //config i2c
    d510:	4b51      	ldr	r3, [pc, #324]	; (d658 <main+0x1cc>)
    d512:	4798      	blx	r3
	configure_i2c_lux();
    d514:	4b51      	ldr	r3, [pc, #324]	; (d65c <main+0x1d0>)
    d516:	4798      	blx	r3
	configure_i2c_callbacks_hdc();
    d518:	4b51      	ldr	r3, [pc, #324]	; (d660 <main+0x1d4>)
    d51a:	4798      	blx	r3
	configure_i2c_callbacks_tsl();
    d51c:	4b51      	ldr	r3, [pc, #324]	; (d664 <main+0x1d8>)
    d51e:	4798      	blx	r3
	
	
		
	for (int i = 0; i < MAX_ARGS; i++)
    d520:	2300      	movs	r3, #0
    d522:	653b      	str	r3, [r7, #80]	; 0x50
    d524:	e00b      	b.n	d53e <main+0xb2>
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    d526:	2019      	movs	r0, #25
    d528:	4b4f      	ldr	r3, [pc, #316]	; (d668 <main+0x1dc>)
    d52a:	4798      	blx	r3
    d52c:	0003      	movs	r3, r0
    d52e:	0019      	movs	r1, r3
    d530:	4b4e      	ldr	r3, [pc, #312]	; (d66c <main+0x1e0>)
    d532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    d534:	0092      	lsls	r2, r2, #2
    d536:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < MAX_ARGS; i++)
    d538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d53a:	3301      	adds	r3, #1
    d53c:	653b      	str	r3, [r7, #80]	; 0x50
    d53e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d540:	2b03      	cmp	r3, #3
    d542:	ddf0      	ble.n	d526 <main+0x9a>

	//TODO: print version information
	printf("Welcome to the Evergreen CLI.\r\n");
    d544:	4b4a      	ldr	r3, [pc, #296]	; (d670 <main+0x1e4>)
    d546:	0018      	movs	r0, r3
    d548:	4b38      	ldr	r3, [pc, #224]	; (d62c <main+0x1a0>)
    d54a:	4798      	blx	r3
	printf("> ");
    d54c:	4b49      	ldr	r3, [pc, #292]	; (d674 <main+0x1e8>)
    d54e:	0018      	movs	r0, r3
    d550:	4b49      	ldr	r3, [pc, #292]	; (d678 <main+0x1ec>)
    d552:	4798      	blx	r3
	while (1) {
	
	    /* Handle pending events from network controller. */
	    m2m_wifi_handle_events(NULL);
    d554:	2000      	movs	r0, #0
    d556:	4b3a      	ldr	r3, [pc, #232]	; (d640 <main+0x1b4>)
    d558:	4798      	blx	r3
	    /* Checks the timer timeout. */
	    sw_timer_task(&swt_module_inst);
    d55a:	4b3a      	ldr	r3, [pc, #232]	; (d644 <main+0x1b8>)
    d55c:	0018      	movs	r0, r3
    d55e:	4b3a      	ldr	r3, [pc, #232]	; (d648 <main+0x1bc>)
    d560:	4798      	blx	r3
// 		{
// // 			FetchFirmwareFromServer();
// 			RcvDownloadFwCmdByMQTT = 0;
		//} TODO? IMPLEMENT FIRMWARE OVER MQTT
		
		if (MQTTCounter >= 3000000)
    d562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d564:	4a45      	ldr	r2, [pc, #276]	; (d67c <main+0x1f0>)
    d566:	4293      	cmp	r3, r2
    d568:	d950      	bls.n	d60c <main+0x180>
		{
			MQTTCounter = 0; //reset sensor counter
    d56a:	2300      	movs	r3, #0
    d56c:	657b      	str	r3, [r7, #84]	; 0x54

			printf("Sending sensor values to Cloud.\r\n");
    d56e:	4b44      	ldr	r3, [pc, #272]	; (d680 <main+0x1f4>)
    d570:	0018      	movs	r0, r3
    d572:	4b2e      	ldr	r3, [pc, #184]	; (d62c <main+0x1a0>)
    d574:	4798      	blx	r3
// 			mqtt_publish(&mqtt_inst, HUMIDITY_TOPIC, mqtt_send_buffer, sizeof(humidity), 1, 0);
			
			
			//lux
			
			tsl2561_init();
    d576:	4b43      	ldr	r3, [pc, #268]	; (d684 <main+0x1f8>)
    d578:	4798      	blx	r3
			uint32_t lux_value = getLuminosity();			
    d57a:	4b43      	ldr	r3, [pc, #268]	; (d688 <main+0x1fc>)
    d57c:	4798      	blx	r3
    d57e:	0003      	movs	r3, r0
    d580:	64bb      	str	r3, [r7, #72]	; 0x48
			
			printf("Lux: %d\r\n", lux_value);
    d582:	6cba      	ldr	r2, [r7, #72]	; 0x48
    d584:	4b41      	ldr	r3, [pc, #260]	; (d68c <main+0x200>)
    d586:	0011      	movs	r1, r2
    d588:	0018      	movs	r0, r3
    d58a:	4b3b      	ldr	r3, [pc, #236]	; (d678 <main+0x1ec>)
    d58c:	4798      	blx	r3
			
			memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    d58e:	1d3b      	adds	r3, r7, #4
    d590:	2240      	movs	r2, #64	; 0x40
    d592:	2100      	movs	r1, #0
    d594:	0018      	movs	r0, r3
    d596:	4b3e      	ldr	r3, [pc, #248]	; (d690 <main+0x204>)
    d598:	4798      	blx	r3
			sprintf(mqtt_send_buffer, "%d", lux_value);
    d59a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    d59c:	493d      	ldr	r1, [pc, #244]	; (d694 <main+0x208>)
    d59e:	1d3b      	adds	r3, r7, #4
    d5a0:	0018      	movs	r0, r3
    d5a2:	4b3d      	ldr	r3, [pc, #244]	; (d698 <main+0x20c>)
    d5a4:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, LUX_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    d5a6:	1d3b      	adds	r3, r7, #4
    d5a8:	0018      	movs	r0, r3
    d5aa:	4b3c      	ldr	r3, [pc, #240]	; (d69c <main+0x210>)
    d5ac:	4798      	blx	r3
    d5ae:	0004      	movs	r4, r0
    d5b0:	1d3a      	adds	r2, r7, #4
    d5b2:	493b      	ldr	r1, [pc, #236]	; (d6a0 <main+0x214>)
    d5b4:	483b      	ldr	r0, [pc, #236]	; (d6a4 <main+0x218>)
    d5b6:	2300      	movs	r3, #0
    d5b8:	9301      	str	r3, [sp, #4]
    d5ba:	2300      	movs	r3, #0
    d5bc:	9300      	str	r3, [sp, #0]
    d5be:	0023      	movs	r3, r4
    d5c0:	4c39      	ldr	r4, [pc, #228]	; (d6a8 <main+0x21c>)
    d5c2:	47a0      	blx	r4
				
			
			//moisture
			float m_value = get_moisture();		
    d5c4:	4b39      	ldr	r3, [pc, #228]	; (d6ac <main+0x220>)
    d5c6:	4798      	blx	r3
    d5c8:	1c03      	adds	r3, r0, #0
    d5ca:	647b      	str	r3, [r7, #68]	; 0x44
			
			printf("Moisture: %.02f\r\n", m_value);	
    d5cc:	4b38      	ldr	r3, [pc, #224]	; (d6b0 <main+0x224>)
    d5ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
    d5d0:	4798      	blx	r3
    d5d2:	0003      	movs	r3, r0
    d5d4:	000c      	movs	r4, r1
    d5d6:	4937      	ldr	r1, [pc, #220]	; (d6b4 <main+0x228>)
    d5d8:	001a      	movs	r2, r3
    d5da:	0023      	movs	r3, r4
    d5dc:	0008      	movs	r0, r1
    d5de:	4926      	ldr	r1, [pc, #152]	; (d678 <main+0x1ec>)
    d5e0:	4788      	blx	r1
			
			sprintf(mqtt_send_buffer, "%.02f", m_value);
    d5e2:	4b33      	ldr	r3, [pc, #204]	; (d6b0 <main+0x224>)
    d5e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
    d5e6:	4798      	blx	r3
    d5e8:	0003      	movs	r3, r0
    d5ea:	000c      	movs	r4, r1
    d5ec:	4932      	ldr	r1, [pc, #200]	; (d6b8 <main+0x22c>)
    d5ee:	1d38      	adds	r0, r7, #4
    d5f0:	001a      	movs	r2, r3
    d5f2:	0023      	movs	r3, r4
    d5f4:	4c28      	ldr	r4, [pc, #160]	; (d698 <main+0x20c>)
    d5f6:	47a0      	blx	r4
			mqtt_publish(&mqtt_inst, MOISTURE_TOPIC, mqtt_send_buffer, sizeof(m_value), 1, 0);
    d5f8:	1d3a      	adds	r2, r7, #4
    d5fa:	4930      	ldr	r1, [pc, #192]	; (d6bc <main+0x230>)
    d5fc:	4829      	ldr	r0, [pc, #164]	; (d6a4 <main+0x218>)
    d5fe:	2300      	movs	r3, #0
    d600:	9301      	str	r3, [sp, #4]
    d602:	2301      	movs	r3, #1
    d604:	9300      	str	r3, [sp, #0]
    d606:	2304      	movs	r3, #4
    d608:	4c27      	ldr	r4, [pc, #156]	; (d6a8 <main+0x21c>)
    d60a:	47a0      	blx	r4
// 				argc = 0;
// 				printf("> ");
// 			}
// 		}
		//printf("%ul\r\n", MQTTCounter);
		++MQTTCounter;
    d60c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d60e:	3301      	adds	r3, #1
    d610:	657b      	str	r3, [r7, #84]	; 0x54
	    m2m_wifi_handle_events(NULL);
    d612:	e79f      	b.n	d554 <main+0xc8>
    d614:	0000c759 	.word	0x0000c759
    d618:	0000d471 	.word	0x0000d471
    d61c:	00008761 	.word	0x00008761
    d620:	0000d221 	.word	0x0000d221
    d624:	0000826d 	.word	0x0000826d
    d628:	00014ea8 	.word	0x00014ea8
    d62c:	0000f0e5 	.word	0x0000f0e5
    d630:	00014ecc 	.word	0x00014ecc
    d634:	00014ee0 	.word	0x00014ee0
    d638:	00014ef0 	.word	0x00014ef0
    d63c:	00001f5d 	.word	0x00001f5d
    d640:	00001f41 	.word	0x00001f41
    d644:	200005e0 	.word	0x200005e0
    d648:	00007bfd 	.word	0x00007bfd
    d64c:	2000024c 	.word	0x2000024c
    d650:	20000250 	.word	0x20000250
    d654:	0000d295 	.word	0x0000d295
    d658:	0000d0a1 	.word	0x0000d0a1
    d65c:	0000d109 	.word	0x0000d109
    d660:	0000d1c1 	.word	0x0000d1c1
    d664:	0000d1f1 	.word	0x0000d1f1
    d668:	0000e519 	.word	0x0000e519
    d66c:	200006d0 	.word	0x200006d0
    d670:	00014f04 	.word	0x00014f04
    d674:	00014f24 	.word	0x00014f24
    d678:	0000efc9 	.word	0x0000efc9
    d67c:	002dc6bf 	.word	0x002dc6bf
    d680:	00014f28 	.word	0x00014f28
    d684:	0000855d 	.word	0x0000855d
    d688:	000086ed 	.word	0x000086ed
    d68c:	00014f4c 	.word	0x00014f4c
    d690:	0000e587 	.word	0x0000e587
    d694:	00014f58 	.word	0x00014f58
    d698:	0000f289 	.word	0x0000f289
    d69c:	0000f2f1 	.word	0x0000f2f1
    d6a0:	00014f5c 	.word	0x00014f5c
    d6a4:	20000638 	.word	0x20000638
    d6a8:	0000dc49 	.word	0x0000dc49
    d6ac:	0000d005 	.word	0x0000d005
    d6b0:	000137d9 	.word	0x000137d9
    d6b4:	00014f68 	.word	0x00014f68
    d6b8:	00014f7c 	.word	0x00014f7c
    d6bc:	00014f84 	.word	0x00014f84

0000d6c0 <_hwerr_to_stderr>:
    d6c0:	1c03      	adds	r3, r0, #0
    d6c2:	300e      	adds	r0, #14
    d6c4:	b500      	push	{lr}
    d6c6:	280e      	cmp	r0, #14
    d6c8:	d819      	bhi.n	d6fe <_hwerr_to_stderr+0x3e>
    d6ca:	f003 fe3d 	bl	11348 <__gnu_thumb1_case_uqi>
    d6ce:	1416      	.short	0x1416
    d6d0:	1b181012 	.word	0x1b181012
    d6d4:	180c0e18 	.word	0x180c0e18
    d6d8:	1d0a0e0e 	.word	0x1d0a0e0e
    d6dc:	08          	.byte	0x08
    d6dd:	00          	.byte	0x00
    d6de:	2000      	movs	r0, #0
    d6e0:	e014      	b.n	d70c <_hwerr_to_stderr+0x4c>
    d6e2:	2070      	movs	r0, #112	; 0x70
    d6e4:	e011      	b.n	d70a <_hwerr_to_stderr+0x4a>
    d6e6:	2016      	movs	r0, #22
    d6e8:	e00f      	b.n	d70a <_hwerr_to_stderr+0x4a>
    d6ea:	200c      	movs	r0, #12
    d6ec:	e00d      	b.n	d70a <_hwerr_to_stderr+0x4a>
    d6ee:	2079      	movs	r0, #121	; 0x79
    d6f0:	e00b      	b.n	d70a <_hwerr_to_stderr+0x4a>
    d6f2:	2068      	movs	r0, #104	; 0x68
    d6f4:	e009      	b.n	d70a <_hwerr_to_stderr+0x4a>
    d6f6:	200b      	movs	r0, #11
    d6f8:	e007      	b.n	d70a <_hwerr_to_stderr+0x4a>
    d6fa:	2010      	movs	r0, #16
    d6fc:	e005      	b.n	d70a <_hwerr_to_stderr+0x4a>
    d6fe:	2000      	movs	r0, #0
    d700:	4283      	cmp	r3, r0
    d702:	da03      	bge.n	d70c <_hwerr_to_stderr+0x4c>
    d704:	2005      	movs	r0, #5
    d706:	e000      	b.n	d70a <_hwerr_to_stderr+0x4a>
    d708:	2002      	movs	r0, #2
    d70a:	4240      	negs	r0, r0
    d70c:	bd00      	pop	{pc}
	...

0000d710 <_mqtt_send_wait>:
    d710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d712:	1c04      	adds	r4, r0, #0
    d714:	3443      	adds	r4, #67	; 0x43
    d716:	7823      	ldrb	r3, [r4, #0]
    d718:	1c05      	adds	r5, r0, #0
    d71a:	07d8      	lsls	r0, r3, #31
    d71c:	d51c      	bpl.n	d758 <_mqtt_send_wait+0x48>
    d71e:	2604      	movs	r6, #4
    d720:	4333      	orrs	r3, r6
    d722:	7023      	strb	r3, [r4, #0]
    d724:	2002      	movs	r0, #2
    d726:	5628      	ldrsb	r0, [r5, r0]
    d728:	b292      	uxth	r2, r2
    d72a:	2300      	movs	r3, #0
    d72c:	4f0c      	ldr	r7, [pc, #48]	; (d760 <_mqtt_send_wait+0x50>)
    d72e:	47b8      	blx	r7
    d730:	2800      	cmp	r0, #0
    d732:	da05      	bge.n	d740 <_mqtt_send_wait+0x30>
    d734:	7823      	ldrb	r3, [r4, #0]
    d736:	43b3      	bics	r3, r6
    d738:	7023      	strb	r3, [r4, #0]
    d73a:	4b0a      	ldr	r3, [pc, #40]	; (d764 <_mqtt_send_wait+0x54>)
    d73c:	4798      	blx	r3
    d73e:	e00d      	b.n	d75c <_mqtt_send_wait+0x4c>
    d740:	7822      	ldrb	r2, [r4, #0]
    d742:	2314      	movs	r3, #20
    d744:	4013      	ands	r3, r2
    d746:	2000      	movs	r0, #0
    d748:	2b04      	cmp	r3, #4
    d74a:	d107      	bne.n	d75c <_mqtt_send_wait+0x4c>
    d74c:	4b06      	ldr	r3, [pc, #24]	; (d768 <_mqtt_send_wait+0x58>)
    d74e:	4798      	blx	r3
    d750:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    d752:	4b06      	ldr	r3, [pc, #24]	; (d76c <_mqtt_send_wait+0x5c>)
    d754:	4798      	blx	r3
    d756:	e7f3      	b.n	d740 <_mqtt_send_wait+0x30>
    d758:	2001      	movs	r0, #1
    d75a:	4240      	negs	r0, r0
    d75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d75e:	46c0      	nop			; (mov r8, r8)
    d760:	000052f5 	.word	0x000052f5
    d764:	0000d6c1 	.word	0x0000d6c1
    d768:	00001f41 	.word	0x00001f41
    d76c:	00007bfd 	.word	0x00007bfd

0000d770 <mqtt_get_config_defaults>:
    d770:	4b07      	ldr	r3, [pc, #28]	; (d790 <mqtt_get_config_defaults+0x20>)
    d772:	2240      	movs	r2, #64	; 0x40
    d774:	8003      	strh	r3, [r0, #0]
    d776:	2396      	movs	r3, #150	; 0x96
    d778:	009b      	lsls	r3, r3, #2
    d77a:	8103      	strh	r3, [r0, #8]
    d77c:	6102      	str	r2, [r0, #16]
    d77e:	2300      	movs	r3, #0
    d780:	2220      	movs	r2, #32
    d782:	7083      	strb	r3, [r0, #2]
    d784:	6043      	str	r3, [r0, #4]
    d786:	60c3      	str	r3, [r0, #12]
    d788:	6142      	str	r2, [r0, #20]
    d78a:	7603      	strb	r3, [r0, #24]
    d78c:	4770      	bx	lr
    d78e:	46c0      	nop			; (mov r8, r8)
    d790:	0000075b 	.word	0x0000075b

0000d794 <mqtt_init>:
    d794:	b538      	push	{r3, r4, r5, lr}
    d796:	1c04      	adds	r4, r0, #0
    d798:	1c0d      	adds	r5, r1, #0
    d79a:	2800      	cmp	r0, #0
    d79c:	d030      	beq.n	d800 <mqtt_init+0x6c>
    d79e:	2900      	cmp	r1, #0
    d7a0:	d02e      	beq.n	d800 <mqtt_init+0x6c>
    d7a2:	690b      	ldr	r3, [r1, #16]
    d7a4:	2b00      	cmp	r3, #0
    d7a6:	d02b      	beq.n	d800 <mqtt_init+0x6c>
    d7a8:	684b      	ldr	r3, [r1, #4]
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	d028      	beq.n	d800 <mqtt_init+0x6c>
    d7ae:	2100      	movs	r1, #0
    d7b0:	2274      	movs	r2, #116	; 0x74
    d7b2:	4b16      	ldr	r3, [pc, #88]	; (d80c <mqtt_init+0x78>)
    d7b4:	4798      	blx	r3
    d7b6:	1c20      	adds	r0, r4, #0
    d7b8:	4b15      	ldr	r3, [pc, #84]	; (d810 <mqtt_init+0x7c>)
    d7ba:	3058      	adds	r0, #88	; 0x58
    d7bc:	1c29      	adds	r1, r5, #0
    d7be:	221c      	movs	r2, #28
    d7c0:	4798      	blx	r3
    d7c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d7c4:	2b00      	cmp	r3, #0
    d7c6:	d10b      	bne.n	d7e0 <mqtt_init+0x4c>
    d7c8:	6928      	ldr	r0, [r5, #16]
    d7ca:	4b12      	ldr	r3, [pc, #72]	; (d814 <mqtt_init+0x80>)
    d7cc:	4798      	blx	r3
    d7ce:	6660      	str	r0, [r4, #100]	; 0x64
    d7d0:	2800      	cmp	r0, #0
    d7d2:	d017      	beq.n	d804 <mqtt_init+0x70>
    d7d4:	1c23      	adds	r3, r4, #0
    d7d6:	3343      	adds	r3, #67	; 0x43
    d7d8:	781a      	ldrb	r2, [r3, #0]
    d7da:	2120      	movs	r1, #32
    d7dc:	430a      	orrs	r2, r1
    d7de:	701a      	strb	r2, [r3, #0]
    d7e0:	892a      	ldrh	r2, [r5, #8]
    d7e2:	23fa      	movs	r3, #250	; 0xfa
    d7e4:	005b      	lsls	r3, r3, #1
    d7e6:	4353      	muls	r3, r2
    d7e8:	6868      	ldr	r0, [r5, #4]
    d7ea:	490b      	ldr	r1, [pc, #44]	; (d818 <mqtt_init+0x84>)
    d7ec:	1c22      	adds	r2, r4, #0
    d7ee:	4d0b      	ldr	r5, [pc, #44]	; (d81c <mqtt_init+0x88>)
    d7f0:	47a8      	blx	r5
    d7f2:	1c03      	adds	r3, r0, #0
    d7f4:	6520      	str	r0, [r4, #80]	; 0x50
    d7f6:	2000      	movs	r0, #0
    d7f8:	4283      	cmp	r3, r0
    d7fa:	da05      	bge.n	d808 <mqtt_init+0x74>
    d7fc:	201c      	movs	r0, #28
    d7fe:	e002      	b.n	d806 <mqtt_init+0x72>
    d800:	2016      	movs	r0, #22
    d802:	e000      	b.n	d806 <mqtt_init+0x72>
    d804:	200c      	movs	r0, #12
    d806:	4240      	negs	r0, r0
    d808:	bd38      	pop	{r3, r4, r5, pc}
    d80a:	46c0      	nop			; (mov r8, r8)
    d80c:	0000e587 	.word	0x0000e587
    d810:	0000e551 	.word	0x0000e551
    d814:	0000e519 	.word	0x0000e519
    d818:	0000df9d 	.word	0x0000df9d
    d81c:	00007af1 	.word	0x00007af1

0000d820 <mqtt_register_callback>:
    d820:	2800      	cmp	r0, #0
    d822:	d002      	beq.n	d82a <mqtt_register_callback+0xa>
    d824:	6541      	str	r1, [r0, #84]	; 0x54
    d826:	2000      	movs	r0, #0
    d828:	e001      	b.n	d82e <mqtt_register_callback+0xe>
    d82a:	2016      	movs	r0, #22
    d82c:	4240      	negs	r0, r0
    d82e:	4770      	bx	lr

0000d830 <mqtt_socket_resolve_handler>:
    d830:	b5f0      	push	{r4, r5, r6, r7, lr}
    d832:	1c06      	adds	r6, r0, #0
    d834:	b085      	sub	sp, #20
    d836:	1c0f      	adds	r7, r1, #0
    d838:	2400      	movs	r4, #0
    d83a:	4b0f      	ldr	r3, [pc, #60]	; (d878 <mqtt_socket_resolve_handler+0x48>)
    d83c:	58e5      	ldr	r5, [r4, r3]
    d83e:	2d00      	cmp	r5, #0
    d840:	d015      	beq.n	d86e <mqtt_socket_resolve_handler+0x3e>
    d842:	1ce9      	adds	r1, r5, #3
    d844:	1c30      	adds	r0, r6, #0
    d846:	4b0d      	ldr	r3, [pc, #52]	; (d87c <mqtt_socket_resolve_handler+0x4c>)
    d848:	4798      	blx	r3
    d84a:	2800      	cmp	r0, #0
    d84c:	d10f      	bne.n	d86e <mqtt_socket_resolve_handler+0x3e>
    d84e:	466a      	mov	r2, sp
    d850:	2302      	movs	r3, #2
    d852:	8013      	strh	r3, [r2, #0]
    d854:	1c2b      	adds	r3, r5, #0
    d856:	3358      	adds	r3, #88	; 0x58
    d858:	881b      	ldrh	r3, [r3, #0]
    d85a:	9701      	str	r7, [sp, #4]
    d85c:	ba5b      	rev16	r3, r3
    d85e:	8053      	strh	r3, [r2, #2]
    d860:	2002      	movs	r0, #2
    d862:	5628      	ldrsb	r0, [r5, r0]
    d864:	4669      	mov	r1, sp
    d866:	2210      	movs	r2, #16
    d868:	4b05      	ldr	r3, [pc, #20]	; (d880 <mqtt_socket_resolve_handler+0x50>)
    d86a:	4798      	blx	r3
    d86c:	e002      	b.n	d874 <mqtt_socket_resolve_handler+0x44>
    d86e:	3404      	adds	r4, #4
    d870:	2c1c      	cmp	r4, #28
    d872:	d1e2      	bne.n	d83a <mqtt_socket_resolve_handler+0xa>
    d874:	b005      	add	sp, #20
    d876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d878:	200002a8 	.word	0x200002a8
    d87c:	0000f2cd 	.word	0x0000f2cd
    d880:	000051e1 	.word	0x000051e1

0000d884 <mqtt_connect>:
    d884:	b5f0      	push	{r4, r5, r6, r7, lr}
    d886:	1c04      	adds	r4, r0, #0
    d888:	b089      	sub	sp, #36	; 0x24
    d88a:	1c0d      	adds	r5, r1, #0
    d88c:	2800      	cmp	r0, #0
    d88e:	d051      	beq.n	d934 <mqtt_connect+0xb0>
    d890:	2900      	cmp	r1, #0
    d892:	d04f      	beq.n	d934 <mqtt_connect+0xb0>
    d894:	1c08      	adds	r0, r1, #0
    d896:	4b39      	ldr	r3, [pc, #228]	; (d97c <mqtt_connect+0xf8>)
    d898:	4798      	blx	r3
    d89a:	2840      	cmp	r0, #64	; 0x40
    d89c:	d84c      	bhi.n	d938 <mqtt_connect+0xb4>
    d89e:	1c21      	adds	r1, r4, #0
    d8a0:	3143      	adds	r1, #67	; 0x43
    d8a2:	780b      	ldrb	r3, [r1, #0]
    d8a4:	9101      	str	r1, [sp, #4]
    d8a6:	07db      	lsls	r3, r3, #31
    d8a8:	0fd9      	lsrs	r1, r3, #31
    d8aa:	466a      	mov	r2, sp
    d8ac:	b2ce      	uxtb	r6, r1
    d8ae:	1ce0      	adds	r0, r4, #3
    d8b0:	7211      	strb	r1, [r2, #8]
    d8b2:	2e00      	cmp	r6, #0
    d8b4:	d142      	bne.n	d93c <mqtt_connect+0xb8>
    d8b6:	2701      	movs	r7, #1
    d8b8:	1c29      	adds	r1, r5, #0
    d8ba:	4b31      	ldr	r3, [pc, #196]	; (d980 <mqtt_connect+0xfc>)
    d8bc:	8027      	strh	r7, [r4, #0]
    d8be:	4798      	blx	r3
    d8c0:	9a01      	ldr	r2, [sp, #4]
    d8c2:	2002      	movs	r0, #2
    d8c4:	7813      	ldrb	r3, [r2, #0]
    d8c6:	9901      	ldr	r1, [sp, #4]
    d8c8:	43bb      	bics	r3, r7
    d8ca:	4383      	bics	r3, r0
    d8cc:	22e3      	movs	r2, #227	; 0xe3
    d8ce:	4013      	ands	r3, r2
    d8d0:	466a      	mov	r2, sp
    d8d2:	700b      	strb	r3, [r1, #0]
    d8d4:	7a12      	ldrb	r2, [r2, #8]
    d8d6:	1c23      	adds	r3, r4, #0
    d8d8:	3348      	adds	r3, #72	; 0x48
    d8da:	6466      	str	r6, [r4, #68]	; 0x44
    d8dc:	701a      	strb	r2, [r3, #0]
    d8de:	7c9a      	ldrb	r2, [r3, #18]
    d8e0:	805e      	strh	r6, [r3, #2]
    d8e2:	1e53      	subs	r3, r2, #1
    d8e4:	419a      	sbcs	r2, r3
    d8e6:	b2d2      	uxtb	r2, r2
    d8e8:	1c39      	adds	r1, r7, #0
    d8ea:	4b26      	ldr	r3, [pc, #152]	; (d984 <mqtt_connect+0x100>)
    d8ec:	4798      	blx	r3
    d8ee:	70a0      	strb	r0, [r4, #2]
    d8f0:	2800      	cmp	r0, #0
    d8f2:	db25      	blt.n	d940 <mqtt_connect+0xbc>
    d8f4:	4b24      	ldr	r3, [pc, #144]	; (d988 <mqtt_connect+0x104>)
    d8f6:	0080      	lsls	r0, r0, #2
    d8f8:	50c4      	str	r4, [r0, r3]
    d8fa:	1c2b      	adds	r3, r5, #0
    d8fc:	781f      	ldrb	r7, [r3, #0]
    d8fe:	2f00      	cmp	r7, #0
    d900:	d026      	beq.n	d950 <mqtt_connect+0xcc>
    d902:	2220      	movs	r2, #32
    d904:	1c39      	adds	r1, r7, #0
    d906:	4391      	bics	r1, r2
    d908:	1c0a      	adds	r2, r1, #0
    d90a:	3a41      	subs	r2, #65	; 0x41
    d90c:	b2d2      	uxtb	r2, r2
    d90e:	3301      	adds	r3, #1
    d910:	2a05      	cmp	r2, #5
    d912:	d90d      	bls.n	d930 <mqtt_connect+0xac>
    d914:	2f3a      	cmp	r7, #58	; 0x3a
    d916:	d00b      	beq.n	d930 <mqtt_connect+0xac>
    d918:	2f2f      	cmp	r7, #47	; 0x2f
    d91a:	d009      	beq.n	d930 <mqtt_connect+0xac>
    d91c:	2f2e      	cmp	r7, #46	; 0x2e
    d91e:	d102      	bne.n	d926 <mqtt_connect+0xa2>
    d920:	2e00      	cmp	r6, #0
    d922:	d0eb      	beq.n	d8fc <mqtt_connect+0x78>
    d924:	e00f      	b.n	d946 <mqtt_connect+0xc2>
    d926:	2230      	movs	r2, #48	; 0x30
    d928:	4017      	ands	r7, r2
    d92a:	4297      	cmp	r7, r2
    d92c:	d0e6      	beq.n	d8fc <mqtt_connect+0x78>
    d92e:	e00a      	b.n	d946 <mqtt_connect+0xc2>
    d930:	2601      	movs	r6, #1
    d932:	e7e3      	b.n	d8fc <mqtt_connect+0x78>
    d934:	2016      	movs	r0, #22
    d936:	e004      	b.n	d942 <mqtt_connect+0xbe>
    d938:	205b      	movs	r0, #91	; 0x5b
    d93a:	e002      	b.n	d942 <mqtt_connect+0xbe>
    d93c:	2078      	movs	r0, #120	; 0x78
    d93e:	e000      	b.n	d942 <mqtt_connect+0xbe>
    d940:	201c      	movs	r0, #28
    d942:	4240      	negs	r0, r0
    d944:	e017      	b.n	d976 <mqtt_connect+0xf2>
    d946:	1c28      	adds	r0, r5, #0
    d948:	4b10      	ldr	r3, [pc, #64]	; (d98c <mqtt_connect+0x108>)
    d94a:	4798      	blx	r3
    d94c:	2000      	movs	r0, #0
    d94e:	e012      	b.n	d976 <mqtt_connect+0xf2>
    d950:	466a      	mov	r2, sp
    d952:	2302      	movs	r3, #2
    d954:	8213      	strh	r3, [r2, #16]
    d956:	1c23      	adds	r3, r4, #0
    d958:	3358      	adds	r3, #88	; 0x58
    d95a:	881b      	ldrh	r3, [r3, #0]
    d95c:	1c28      	adds	r0, r5, #0
    d95e:	ba5b      	rev16	r3, r3
    d960:	8253      	strh	r3, [r2, #18]
    d962:	4b0b      	ldr	r3, [pc, #44]	; (d990 <mqtt_connect+0x10c>)
    d964:	4798      	blx	r3
    d966:	9005      	str	r0, [sp, #20]
    d968:	2002      	movs	r0, #2
    d96a:	5620      	ldrsb	r0, [r4, r0]
    d96c:	a904      	add	r1, sp, #16
    d96e:	2210      	movs	r2, #16
    d970:	4b08      	ldr	r3, [pc, #32]	; (d994 <mqtt_connect+0x110>)
    d972:	4798      	blx	r3
    d974:	1c38      	adds	r0, r7, #0
    d976:	b009      	add	sp, #36	; 0x24
    d978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d97a:	46c0      	nop			; (mov r8, r8)
    d97c:	0000f2f1 	.word	0x0000f2f1
    d980:	0000f2e1 	.word	0x0000f2e1
    d984:	00004fd1 	.word	0x00004fd1
    d988:	200002a8 	.word	0x200002a8
    d98c:	0000581d 	.word	0x0000581d
    d990:	00005715 	.word	0x00005715
    d994:	000051e1 	.word	0x000051e1

0000d998 <mqtt_connect_broker>:
    d998:	b5f0      	push	{r4, r5, r6, r7, lr}
    d99a:	b095      	sub	sp, #84	; 0x54
    d99c:	af02      	add	r7, sp, #8
    d99e:	617b      	str	r3, [r7, #20]
    d9a0:	1c3b      	adds	r3, r7, #0
    d9a2:	3370      	adds	r3, #112	; 0x70
    d9a4:	781b      	ldrb	r3, [r3, #0]
    d9a6:	1c05      	adds	r5, r0, #0
    d9a8:	60fb      	str	r3, [r7, #12]
    d9aa:	1c3b      	adds	r3, r7, #0
    d9ac:	3374      	adds	r3, #116	; 0x74
    d9ae:	781b      	ldrb	r3, [r3, #0]
    d9b0:	6139      	str	r1, [r7, #16]
    d9b2:	61fa      	str	r2, [r7, #28]
    d9b4:	60bb      	str	r3, [r7, #8]
    d9b6:	2800      	cmp	r0, #0
    d9b8:	d101      	bne.n	d9be <mqtt_connect_broker+0x26>
    d9ba:	2016      	movs	r0, #22
    d9bc:	e129      	b.n	dc12 <mqtt_connect_broker+0x27a>
    d9be:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    d9c0:	4668      	mov	r0, sp
    d9c2:	3307      	adds	r3, #7
    d9c4:	08db      	lsrs	r3, r3, #3
    d9c6:	00db      	lsls	r3, r3, #3
    d9c8:	1ac0      	subs	r0, r0, r3
    d9ca:	4685      	mov	sp, r0
    d9cc:	ac02      	add	r4, sp, #8
    d9ce:	607c      	str	r4, [r7, #4]
    d9d0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    d9d2:	2c00      	cmp	r4, #0
    d9d4:	d0f1      	beq.n	d9ba <mqtt_connect_broker+0x22>
    d9d6:	1c2b      	adds	r3, r5, #0
    d9d8:	3343      	adds	r3, #67	; 0x43
    d9da:	781b      	ldrb	r3, [r3, #0]
    d9dc:	07d8      	lsls	r0, r3, #31
    d9de:	d400      	bmi.n	d9e2 <mqtt_connect_broker+0x4a>
    d9e0:	e112      	b.n	dc08 <mqtt_connect_broker+0x270>
    d9e2:	079a      	lsls	r2, r3, #30
    d9e4:	d500      	bpl.n	d9e8 <mqtt_connect_broker+0x50>
    d9e6:	e111      	b.n	dc0c <mqtt_connect_broker+0x274>
    d9e8:	071c      	lsls	r4, r3, #28
    d9ea:	d40b      	bmi.n	da04 <mqtt_connect_broker+0x6c>
    d9ec:	4e8b      	ldr	r6, [pc, #556]	; (dc1c <mqtt_connect_broker+0x284>)
    d9ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
    d9f0:	47b0      	blx	r6
    d9f2:	1c03      	adds	r3, r0, #0
    d9f4:	61b8      	str	r0, [r7, #24]
    d9f6:	69f8      	ldr	r0, [r7, #28]
    d9f8:	330e      	adds	r3, #14
    d9fa:	1c34      	adds	r4, r6, #0
    d9fc:	2800      	cmp	r0, #0
    d9fe:	d113      	bne.n	da28 <mqtt_connect_broker+0x90>
    da00:	1c1e      	adds	r6, r3, #0
    da02:	e01d      	b.n	da40 <mqtt_connect_broker+0xa8>
    da04:	1c2b      	adds	r3, r5, #0
    da06:	3370      	adds	r3, #112	; 0x70
    da08:	781b      	ldrb	r3, [r3, #0]
    da0a:	2b00      	cmp	r3, #0
    da0c:	d000      	beq.n	da10 <mqtt_connect_broker+0x78>
    da0e:	e0ff      	b.n	dc10 <mqtt_connect_broker+0x278>
    da10:	1c2b      	adds	r3, r5, #0
    da12:	3343      	adds	r3, #67	; 0x43
    da14:	781b      	ldrb	r3, [r3, #0]
    da16:	071a      	lsls	r2, r3, #28
    da18:	d5e8      	bpl.n	d9ec <mqtt_connect_broker+0x54>
    da1a:	4b81      	ldr	r3, [pc, #516]	; (dc20 <mqtt_connect_broker+0x288>)
    da1c:	2000      	movs	r0, #0
    da1e:	4798      	blx	r3
    da20:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    da22:	4b80      	ldr	r3, [pc, #512]	; (dc24 <mqtt_connect_broker+0x28c>)
    da24:	4798      	blx	r3
    da26:	e7f3      	b.n	da10 <mqtt_connect_broker+0x78>
    da28:	69f8      	ldr	r0, [r7, #28]
    da2a:	47b0      	blx	r6
    da2c:	69be      	ldr	r6, [r7, #24]
    da2e:	697b      	ldr	r3, [r7, #20]
    da30:	3610      	adds	r6, #16
    da32:	1836      	adds	r6, r6, r0
    da34:	2b00      	cmp	r3, #0
    da36:	d003      	beq.n	da40 <mqtt_connect_broker+0xa8>
    da38:	1c18      	adds	r0, r3, #0
    da3a:	47a0      	blx	r4
    da3c:	3602      	adds	r6, #2
    da3e:	1836      	adds	r6, r6, r0
    da40:	6e78      	ldr	r0, [r7, #100]	; 0x64
    da42:	2800      	cmp	r0, #0
    da44:	d007      	beq.n	da56 <mqtt_connect_broker+0xbe>
    da46:	47a0      	blx	r4
    da48:	3602      	adds	r6, #2
    da4a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    da4c:	1830      	adds	r0, r6, r0
    da4e:	1906      	adds	r6, r0, r4
    da50:	2c00      	cmp	r4, #0
    da52:	d100      	bne.n	da56 <mqtt_connect_broker+0xbe>
    da54:	1c06      	adds	r6, r0, #0
    da56:	69fc      	ldr	r4, [r7, #28]
    da58:	2c00      	cmp	r4, #0
    da5a:	d006      	beq.n	da6a <mqtt_connect_broker+0xd2>
    da5c:	24c0      	movs	r4, #192	; 0xc0
    da5e:	61bc      	str	r4, [r7, #24]
    da60:	697c      	ldr	r4, [r7, #20]
    da62:	2c00      	cmp	r4, #0
    da64:	d103      	bne.n	da6e <mqtt_connect_broker+0xd6>
    da66:	2480      	movs	r4, #128	; 0x80
    da68:	e000      	b.n	da6c <mqtt_connect_broker+0xd4>
    da6a:	69fc      	ldr	r4, [r7, #28]
    da6c:	61bc      	str	r4, [r7, #24]
    da6e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    da70:	2c00      	cmp	r4, #0
    da72:	d00f      	beq.n	da94 <mqtt_connect_broker+0xfc>
    da74:	68bc      	ldr	r4, [r7, #8]
    da76:	2c00      	cmp	r4, #0
    da78:	d003      	beq.n	da82 <mqtt_connect_broker+0xea>
    da7a:	69bc      	ldr	r4, [r7, #24]
    da7c:	2320      	movs	r3, #32
    da7e:	431c      	orrs	r4, r3
    da80:	61bc      	str	r4, [r7, #24]
    da82:	68fc      	ldr	r4, [r7, #12]
    da84:	2303      	movs	r3, #3
    da86:	4023      	ands	r3, r4
    da88:	00db      	lsls	r3, r3, #3
    da8a:	69bc      	ldr	r4, [r7, #24]
    da8c:	2204      	movs	r2, #4
    da8e:	4313      	orrs	r3, r2
    da90:	431c      	orrs	r4, r3
    da92:	61bc      	str	r4, [r7, #24]
    da94:	693c      	ldr	r4, [r7, #16]
    da96:	2c00      	cmp	r4, #0
    da98:	d003      	beq.n	daa2 <mqtt_connect_broker+0x10a>
    da9a:	69bc      	ldr	r4, [r7, #24]
    da9c:	2302      	movs	r3, #2
    da9e:	431c      	orrs	r4, r3
    daa0:	61bc      	str	r4, [r7, #24]
    daa2:	1c2b      	adds	r3, r5, #0
    daa4:	3343      	adds	r3, #67	; 0x43
    daa6:	781a      	ldrb	r2, [r3, #0]
    daa8:	2108      	movs	r1, #8
    daaa:	430a      	orrs	r2, r1
    daac:	701a      	strb	r2, [r3, #0]
    daae:	1c38      	adds	r0, r7, #0
    dab0:	9500      	str	r5, [sp, #0]
    dab2:	3020      	adds	r0, #32
    dab4:	6879      	ldr	r1, [r7, #4]
    dab6:	4b5c      	ldr	r3, [pc, #368]	; (dc28 <mqtt_connect_broker+0x290>)
    dab8:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    daba:	4c5c      	ldr	r4, [pc, #368]	; (dc2c <mqtt_connect_broker+0x294>)
    dabc:	47a0      	blx	r4
    dabe:	1c38      	adds	r0, r7, #0
    dac0:	3020      	adds	r0, #32
    dac2:	2110      	movs	r1, #16
    dac4:	4b5a      	ldr	r3, [pc, #360]	; (dc30 <mqtt_connect_broker+0x298>)
    dac6:	4798      	blx	r3
    dac8:	2e80      	cmp	r6, #128	; 0x80
    daca:	dd09      	ble.n	dae0 <mqtt_connect_broker+0x148>
    dacc:	2180      	movs	r1, #128	; 0x80
    dace:	4249      	negs	r1, r1
    dad0:	4331      	orrs	r1, r6
    dad2:	1c38      	adds	r0, r7, #0
    dad4:	b249      	sxtb	r1, r1
    dad6:	3020      	adds	r0, #32
    dad8:	4c55      	ldr	r4, [pc, #340]	; (dc30 <mqtt_connect_broker+0x298>)
    dada:	47a0      	blx	r4
    dadc:	11f6      	asrs	r6, r6, #7
    dade:	e7f3      	b.n	dac8 <mqtt_connect_broker+0x130>
    dae0:	4b54      	ldr	r3, [pc, #336]	; (dc34 <mqtt_connect_broker+0x29c>)
    dae2:	401e      	ands	r6, r3
    dae4:	d504      	bpl.n	daf0 <mqtt_connect_broker+0x158>
    dae6:	2380      	movs	r3, #128	; 0x80
    dae8:	3e01      	subs	r6, #1
    daea:	425b      	negs	r3, r3
    daec:	431e      	orrs	r6, r3
    daee:	3601      	adds	r6, #1
    daf0:	1c38      	adds	r0, r7, #0
    daf2:	b271      	sxtb	r1, r6
    daf4:	3020      	adds	r0, #32
    daf6:	4c4e      	ldr	r4, [pc, #312]	; (dc30 <mqtt_connect_broker+0x298>)
    daf8:	47a0      	blx	r4
    dafa:	1c38      	adds	r0, r7, #0
    dafc:	4c4e      	ldr	r4, [pc, #312]	; (dc38 <mqtt_connect_broker+0x2a0>)
    dafe:	3020      	adds	r0, #32
    db00:	2106      	movs	r1, #6
    db02:	47a0      	blx	r4
    db04:	1c38      	adds	r0, r7, #0
    db06:	4b4d      	ldr	r3, [pc, #308]	; (dc3c <mqtt_connect_broker+0x2a4>)
    db08:	3020      	adds	r0, #32
    db0a:	494d      	ldr	r1, [pc, #308]	; (dc40 <mqtt_connect_broker+0x2a8>)
    db0c:	2206      	movs	r2, #6
    db0e:	4798      	blx	r3
    db10:	1c38      	adds	r0, r7, #0
    db12:	3020      	adds	r0, #32
    db14:	2103      	movs	r1, #3
    db16:	4a46      	ldr	r2, [pc, #280]	; (dc30 <mqtt_connect_broker+0x298>)
    db18:	4790      	blx	r2
    db1a:	69bb      	ldr	r3, [r7, #24]
    db1c:	1c38      	adds	r0, r7, #0
    db1e:	4a44      	ldr	r2, [pc, #272]	; (dc30 <mqtt_connect_broker+0x298>)
    db20:	b259      	sxtb	r1, r3
    db22:	3020      	adds	r0, #32
    db24:	4790      	blx	r2
    db26:	1c2b      	adds	r3, r5, #0
    db28:	3360      	adds	r3, #96	; 0x60
    db2a:	2000      	movs	r0, #0
    db2c:	5e19      	ldrsh	r1, [r3, r0]
    db2e:	1c38      	adds	r0, r7, #0
    db30:	3020      	adds	r0, #32
    db32:	47a0      	blx	r4
    db34:	4e39      	ldr	r6, [pc, #228]	; (dc1c <mqtt_connect_broker+0x284>)
    db36:	6e38      	ldr	r0, [r7, #96]	; 0x60
    db38:	47b0      	blx	r6
    db3a:	b201      	sxth	r1, r0
    db3c:	1c38      	adds	r0, r7, #0
    db3e:	3020      	adds	r0, #32
    db40:	47a0      	blx	r4
    db42:	6e38      	ldr	r0, [r7, #96]	; 0x60
    db44:	47b0      	blx	r6
    db46:	1c02      	adds	r2, r0, #0
    db48:	1c38      	adds	r0, r7, #0
    db4a:	3020      	adds	r0, #32
    db4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    db4e:	4b3b      	ldr	r3, [pc, #236]	; (dc3c <mqtt_connect_broker+0x2a4>)
    db50:	4798      	blx	r3
    db52:	6e78      	ldr	r0, [r7, #100]	; 0x64
    db54:	2800      	cmp	r0, #0
    db56:	d015      	beq.n	db84 <mqtt_connect_broker+0x1ec>
    db58:	47b0      	blx	r6
    db5a:	b201      	sxth	r1, r0
    db5c:	1c38      	adds	r0, r7, #0
    db5e:	3020      	adds	r0, #32
    db60:	47a0      	blx	r4
    db62:	6e78      	ldr	r0, [r7, #100]	; 0x64
    db64:	47b0      	blx	r6
    db66:	1c02      	adds	r2, r0, #0
    db68:	1c38      	adds	r0, r7, #0
    db6a:	4c34      	ldr	r4, [pc, #208]	; (dc3c <mqtt_connect_broker+0x2a4>)
    db6c:	3020      	adds	r0, #32
    db6e:	6e79      	ldr	r1, [r7, #100]	; 0x64
    db70:	47a0      	blx	r4
    db72:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    db74:	2c00      	cmp	r4, #0
    db76:	d005      	beq.n	db84 <mqtt_connect_broker+0x1ec>
    db78:	1c38      	adds	r0, r7, #0
    db7a:	1c21      	adds	r1, r4, #0
    db7c:	3020      	adds	r0, #32
    db7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    db80:	4c2e      	ldr	r4, [pc, #184]	; (dc3c <mqtt_connect_broker+0x2a4>)
    db82:	47a0      	blx	r4
    db84:	69fc      	ldr	r4, [r7, #28]
    db86:	2c00      	cmp	r4, #0
    db88:	d01f      	beq.n	dbca <mqtt_connect_broker+0x232>
    db8a:	4e24      	ldr	r6, [pc, #144]	; (dc1c <mqtt_connect_broker+0x284>)
    db8c:	1c20      	adds	r0, r4, #0
    db8e:	47b0      	blx	r6
    db90:	b201      	sxth	r1, r0
    db92:	1c38      	adds	r0, r7, #0
    db94:	3020      	adds	r0, #32
    db96:	4c28      	ldr	r4, [pc, #160]	; (dc38 <mqtt_connect_broker+0x2a0>)
    db98:	47a0      	blx	r4
    db9a:	69f8      	ldr	r0, [r7, #28]
    db9c:	47b0      	blx	r6
    db9e:	1c02      	adds	r2, r0, #0
    dba0:	1c38      	adds	r0, r7, #0
    dba2:	3020      	adds	r0, #32
    dba4:	69f9      	ldr	r1, [r7, #28]
    dba6:	4c25      	ldr	r4, [pc, #148]	; (dc3c <mqtt_connect_broker+0x2a4>)
    dba8:	47a0      	blx	r4
    dbaa:	6978      	ldr	r0, [r7, #20]
    dbac:	2800      	cmp	r0, #0
    dbae:	d00c      	beq.n	dbca <mqtt_connect_broker+0x232>
    dbb0:	47b0      	blx	r6
    dbb2:	b201      	sxth	r1, r0
    dbb4:	1c38      	adds	r0, r7, #0
    dbb6:	4a20      	ldr	r2, [pc, #128]	; (dc38 <mqtt_connect_broker+0x2a0>)
    dbb8:	3020      	adds	r0, #32
    dbba:	4790      	blx	r2
    dbbc:	6978      	ldr	r0, [r7, #20]
    dbbe:	47b0      	blx	r6
    dbc0:	1c02      	adds	r2, r0, #0
    dbc2:	1c38      	adds	r0, r7, #0
    dbc4:	3020      	adds	r0, #32
    dbc6:	6979      	ldr	r1, [r7, #20]
    dbc8:	47a0      	blx	r4
    dbca:	1c38      	adds	r0, r7, #0
    dbcc:	1c2c      	adds	r4, r5, #0
    dbce:	3020      	adds	r0, #32
    dbd0:	4b1c      	ldr	r3, [pc, #112]	; (dc44 <mqtt_connect_broker+0x2ac>)
    dbd2:	3443      	adds	r4, #67	; 0x43
    dbd4:	4798      	blx	r3
    dbd6:	7821      	ldrb	r1, [r4, #0]
    dbd8:	0789      	lsls	r1, r1, #30
    dbda:	0fc9      	lsrs	r1, r1, #31
    dbdc:	2901      	cmp	r1, #1
    dbde:	d10b      	bne.n	dbf8 <mqtt_connect_broker+0x260>
    dbe0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    dbe2:	2a00      	cmp	r2, #0
    dbe4:	d108      	bne.n	dbf8 <mqtt_connect_broker+0x260>
    dbe6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    dbe8:	2b00      	cmp	r3, #0
    dbea:	d005      	beq.n	dbf8 <mqtt_connect_broker+0x260>
    dbec:	2034      	movs	r0, #52	; 0x34
    dbee:	55c2      	strb	r2, [r0, r7]
    dbf0:	1c3a      	adds	r2, r7, #0
    dbf2:	1c28      	adds	r0, r5, #0
    dbf4:	3234      	adds	r2, #52	; 0x34
    dbf6:	4798      	blx	r3
    dbf8:	7823      	ldrb	r3, [r4, #0]
    dbfa:	2202      	movs	r2, #2
    dbfc:	4313      	orrs	r3, r2
    dbfe:	2208      	movs	r2, #8
    dc00:	4393      	bics	r3, r2
    dc02:	7023      	strb	r3, [r4, #0]
    dc04:	2000      	movs	r0, #0
    dc06:	e005      	b.n	dc14 <mqtt_connect_broker+0x27c>
    dc08:	2080      	movs	r0, #128	; 0x80
    dc0a:	e002      	b.n	dc12 <mqtt_connect_broker+0x27a>
    dc0c:	2078      	movs	r0, #120	; 0x78
    dc0e:	e000      	b.n	dc12 <mqtt_connect_broker+0x27a>
    dc10:	200b      	movs	r0, #11
    dc12:	4240      	negs	r0, r0
    dc14:	46bd      	mov	sp, r7
    dc16:	b013      	add	sp, #76	; 0x4c
    dc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc1a:	46c0      	nop			; (mov r8, r8)
    dc1c:	0000f2f1 	.word	0x0000f2f1
    dc20:	00001f41 	.word	0x00001f41
    dc24:	00007bfd 	.word	0x00007bfd
    dc28:	0000d711 	.word	0x0000d711
    dc2c:	00007819 	.word	0x00007819
    dc30:	0000784d 	.word	0x0000784d
    dc34:	8000007f 	.word	0x8000007f
    dc38:	00007899 	.word	0x00007899
    dc3c:	000078d9 	.word	0x000078d9
    dc40:	00014f8f 	.word	0x00014f8f
    dc44:	00007915 	.word	0x00007915

0000dc48 <mqtt_publish>:
    dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc4a:	b093      	sub	sp, #76	; 0x4c
    dc4c:	af02      	add	r7, sp, #8
    dc4e:	60fb      	str	r3, [r7, #12]
    dc50:	1c3b      	adds	r3, r7, #0
    dc52:	3358      	adds	r3, #88	; 0x58
    dc54:	781b      	ldrb	r3, [r3, #0]
    dc56:	1c04      	adds	r4, r0, #0
    dc58:	613b      	str	r3, [r7, #16]
    dc5a:	1c3b      	adds	r3, r7, #0
    dc5c:	335c      	adds	r3, #92	; 0x5c
    dc5e:	781b      	ldrb	r3, [r3, #0]
    dc60:	6179      	str	r1, [r7, #20]
    dc62:	60ba      	str	r2, [r7, #8]
    dc64:	607b      	str	r3, [r7, #4]
    dc66:	2800      	cmp	r0, #0
    dc68:	d101      	bne.n	dc6e <mqtt_publish+0x26>
    dc6a:	2516      	movs	r5, #22
    dc6c:	e0a7      	b.n	ddbe <mqtt_publish+0x176>
    dc6e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    dc70:	466a      	mov	r2, sp
    dc72:	3307      	adds	r3, #7
    dc74:	08db      	lsrs	r3, r3, #3
    dc76:	00db      	lsls	r3, r3, #3
    dc78:	1ad2      	subs	r2, r2, r3
    dc7a:	697b      	ldr	r3, [r7, #20]
    dc7c:	4695      	mov	sp, r2
    dc7e:	ae02      	add	r6, sp, #8
    dc80:	2b00      	cmp	r3, #0
    dc82:	d0f2      	beq.n	dc6a <mqtt_publish+0x22>
    dc84:	693a      	ldr	r2, [r7, #16]
    dc86:	2a02      	cmp	r2, #2
    dc88:	d8ef      	bhi.n	dc6a <mqtt_publish+0x22>
    dc8a:	1c05      	adds	r5, r0, #0
    dc8c:	3543      	adds	r5, #67	; 0x43
    dc8e:	782b      	ldrb	r3, [r5, #0]
    dc90:	079a      	lsls	r2, r3, #30
    dc92:	d400      	bmi.n	dc96 <mqtt_publish+0x4e>
    dc94:	e090      	b.n	ddb8 <mqtt_publish+0x170>
    dc96:	071a      	lsls	r2, r3, #28
    dc98:	d40a      	bmi.n	dcb0 <mqtt_publish+0x68>
    dc9a:	4b4b      	ldr	r3, [pc, #300]	; (ddc8 <mqtt_publish+0x180>)
    dc9c:	6978      	ldr	r0, [r7, #20]
    dc9e:	4798      	blx	r3
    dca0:	68fd      	ldr	r5, [r7, #12]
    dca2:	693b      	ldr	r3, [r7, #16]
    dca4:	3502      	adds	r5, #2
    dca6:	182d      	adds	r5, r5, r0
    dca8:	2b00      	cmp	r3, #0
    dcaa:	d011      	beq.n	dcd0 <mqtt_publish+0x88>
    dcac:	3502      	adds	r5, #2
    dcae:	e00f      	b.n	dcd0 <mqtt_publish+0x88>
    dcb0:	1c03      	adds	r3, r0, #0
    dcb2:	3370      	adds	r3, #112	; 0x70
    dcb4:	781b      	ldrb	r3, [r3, #0]
    dcb6:	2b00      	cmp	r3, #0
    dcb8:	d000      	beq.n	dcbc <mqtt_publish+0x74>
    dcba:	e07f      	b.n	ddbc <mqtt_publish+0x174>
    dcbc:	782b      	ldrb	r3, [r5, #0]
    dcbe:	071a      	lsls	r2, r3, #28
    dcc0:	d5eb      	bpl.n	dc9a <mqtt_publish+0x52>
    dcc2:	4b42      	ldr	r3, [pc, #264]	; (ddcc <mqtt_publish+0x184>)
    dcc4:	2000      	movs	r0, #0
    dcc6:	4798      	blx	r3
    dcc8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    dcca:	4b41      	ldr	r3, [pc, #260]	; (ddd0 <mqtt_publish+0x188>)
    dccc:	4798      	blx	r3
    dcce:	e7f5      	b.n	dcbc <mqtt_publish+0x74>
    dcd0:	1c23      	adds	r3, r4, #0
    dcd2:	3343      	adds	r3, #67	; 0x43
    dcd4:	781a      	ldrb	r2, [r3, #0]
    dcd6:	2108      	movs	r1, #8
    dcd8:	430a      	orrs	r2, r1
    dcda:	701a      	strb	r2, [r3, #0]
    dcdc:	1c38      	adds	r0, r7, #0
    dcde:	9400      	str	r4, [sp, #0]
    dce0:	1c31      	adds	r1, r6, #0
    dce2:	302c      	adds	r0, #44	; 0x2c
    dce4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    dce6:	4b3b      	ldr	r3, [pc, #236]	; (ddd4 <mqtt_publish+0x18c>)
    dce8:	4e3b      	ldr	r6, [pc, #236]	; (ddd8 <mqtt_publish+0x190>)
    dcea:	47b0      	blx	r6
    dcec:	687b      	ldr	r3, [r7, #4]
    dcee:	2101      	movs	r1, #1
    dcf0:	4019      	ands	r1, r3
    dcf2:	2330      	movs	r3, #48	; 0x30
    dcf4:	4319      	orrs	r1, r3
    dcf6:	693b      	ldr	r3, [r7, #16]
    dcf8:	1c38      	adds	r0, r7, #0
    dcfa:	005a      	lsls	r2, r3, #1
    dcfc:	2306      	movs	r3, #6
    dcfe:	4013      	ands	r3, r2
    dd00:	4319      	orrs	r1, r3
    dd02:	302c      	adds	r0, #44	; 0x2c
    dd04:	4b35      	ldr	r3, [pc, #212]	; (dddc <mqtt_publish+0x194>)
    dd06:	4798      	blx	r3
    dd08:	4b34      	ldr	r3, [pc, #208]	; (dddc <mqtt_publish+0x194>)
    dd0a:	2d80      	cmp	r5, #128	; 0x80
    dd0c:	dd08      	ble.n	dd20 <mqtt_publish+0xd8>
    dd0e:	2180      	movs	r1, #128	; 0x80
    dd10:	4249      	negs	r1, r1
    dd12:	4329      	orrs	r1, r5
    dd14:	1c38      	adds	r0, r7, #0
    dd16:	b249      	sxtb	r1, r1
    dd18:	302c      	adds	r0, #44	; 0x2c
    dd1a:	4798      	blx	r3
    dd1c:	11ed      	asrs	r5, r5, #7
    dd1e:	e7f3      	b.n	dd08 <mqtt_publish+0xc0>
    dd20:	4a2f      	ldr	r2, [pc, #188]	; (dde0 <mqtt_publish+0x198>)
    dd22:	4015      	ands	r5, r2
    dd24:	d504      	bpl.n	dd30 <mqtt_publish+0xe8>
    dd26:	2280      	movs	r2, #128	; 0x80
    dd28:	3d01      	subs	r5, #1
    dd2a:	4252      	negs	r2, r2
    dd2c:	4315      	orrs	r5, r2
    dd2e:	3501      	adds	r5, #1
    dd30:	1c38      	adds	r0, r7, #0
    dd32:	b269      	sxtb	r1, r5
    dd34:	302c      	adds	r0, #44	; 0x2c
    dd36:	4798      	blx	r3
    dd38:	4e23      	ldr	r6, [pc, #140]	; (ddc8 <mqtt_publish+0x180>)
    dd3a:	6978      	ldr	r0, [r7, #20]
    dd3c:	47b0      	blx	r6
    dd3e:	b201      	sxth	r1, r0
    dd40:	1c38      	adds	r0, r7, #0
    dd42:	302c      	adds	r0, #44	; 0x2c
    dd44:	4d27      	ldr	r5, [pc, #156]	; (dde4 <mqtt_publish+0x19c>)
    dd46:	47a8      	blx	r5
    dd48:	6978      	ldr	r0, [r7, #20]
    dd4a:	47b0      	blx	r6
    dd4c:	1c02      	adds	r2, r0, #0
    dd4e:	1c38      	adds	r0, r7, #0
    dd50:	302c      	adds	r0, #44	; 0x2c
    dd52:	6979      	ldr	r1, [r7, #20]
    dd54:	4e24      	ldr	r6, [pc, #144]	; (dde8 <mqtt_publish+0x1a0>)
    dd56:	47b0      	blx	r6
    dd58:	693a      	ldr	r2, [r7, #16]
    dd5a:	2a00      	cmp	r2, #0
    dd5c:	d006      	beq.n	dd6c <mqtt_publish+0x124>
    dd5e:	8821      	ldrh	r1, [r4, #0]
    dd60:	1c38      	adds	r0, r7, #0
    dd62:	1c4b      	adds	r3, r1, #1
    dd64:	8023      	strh	r3, [r4, #0]
    dd66:	b209      	sxth	r1, r1
    dd68:	302c      	adds	r0, #44	; 0x2c
    dd6a:	47a8      	blx	r5
    dd6c:	8823      	ldrh	r3, [r4, #0]
    dd6e:	2b00      	cmp	r3, #0
    dd70:	d101      	bne.n	dd76 <mqtt_publish+0x12e>
    dd72:	2301      	movs	r3, #1
    dd74:	8023      	strh	r3, [r4, #0]
    dd76:	68bb      	ldr	r3, [r7, #8]
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d006      	beq.n	dd8a <mqtt_publish+0x142>
    dd7c:	68fa      	ldr	r2, [r7, #12]
    dd7e:	2a00      	cmp	r2, #0
    dd80:	d003      	beq.n	dd8a <mqtt_publish+0x142>
    dd82:	1c38      	adds	r0, r7, #0
    dd84:	302c      	adds	r0, #44	; 0x2c
    dd86:	1c19      	adds	r1, r3, #0
    dd88:	47b0      	blx	r6
    dd8a:	1c38      	adds	r0, r7, #0
    dd8c:	4b17      	ldr	r3, [pc, #92]	; (ddec <mqtt_publish+0x1a4>)
    dd8e:	302c      	adds	r0, #44	; 0x2c
    dd90:	4798      	blx	r3
    dd92:	1c23      	adds	r3, r4, #0
    dd94:	3343      	adds	r3, #67	; 0x43
    dd96:	781a      	ldrb	r2, [r3, #0]
    dd98:	2108      	movs	r1, #8
    dd9a:	438a      	bics	r2, r1
    dd9c:	701a      	strb	r2, [r3, #0]
    dd9e:	693b      	ldr	r3, [r7, #16]
    dda0:	2500      	movs	r5, #0
    dda2:	42ab      	cmp	r3, r5
    dda4:	d10c      	bne.n	ddc0 <mqtt_publish+0x178>
    dda6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    dda8:	42ab      	cmp	r3, r5
    ddaa:	d009      	beq.n	ddc0 <mqtt_publish+0x178>
    ddac:	1c3a      	adds	r2, r7, #0
    ddae:	1c20      	adds	r0, r4, #0
    ddb0:	2102      	movs	r1, #2
    ddb2:	3218      	adds	r2, #24
    ddb4:	4798      	blx	r3
    ddb6:	e003      	b.n	ddc0 <mqtt_publish+0x178>
    ddb8:	2580      	movs	r5, #128	; 0x80
    ddba:	e000      	b.n	ddbe <mqtt_publish+0x176>
    ddbc:	250b      	movs	r5, #11
    ddbe:	426d      	negs	r5, r5
    ddc0:	1c28      	adds	r0, r5, #0
    ddc2:	46bd      	mov	sp, r7
    ddc4:	b011      	add	sp, #68	; 0x44
    ddc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddc8:	0000f2f1 	.word	0x0000f2f1
    ddcc:	00001f41 	.word	0x00001f41
    ddd0:	00007bfd 	.word	0x00007bfd
    ddd4:	0000d711 	.word	0x0000d711
    ddd8:	00007819 	.word	0x00007819
    dddc:	0000784d 	.word	0x0000784d
    dde0:	8000007f 	.word	0x8000007f
    dde4:	00007899 	.word	0x00007899
    dde8:	000078d9 	.word	0x000078d9
    ddec:	00007915 	.word	0x00007915

0000ddf0 <mqtt_subscribe>:
    ddf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddf2:	b08d      	sub	sp, #52	; 0x34
    ddf4:	af02      	add	r7, sp, #8
    ddf6:	1c04      	adds	r4, r0, #0
    ddf8:	60b9      	str	r1, [r7, #8]
    ddfa:	607a      	str	r2, [r7, #4]
    ddfc:	d101      	bne.n	de02 <mqtt_subscribe+0x12>
    ddfe:	2016      	movs	r0, #22
    de00:	e086      	b.n	df10 <mqtt_subscribe+0x120>
    de02:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    de04:	466a      	mov	r2, sp
    de06:	3307      	adds	r3, #7
    de08:	08db      	lsrs	r3, r3, #3
    de0a:	00db      	lsls	r3, r3, #3
    de0c:	1ad2      	subs	r2, r2, r3
    de0e:	4695      	mov	sp, r2
    de10:	ad02      	add	r5, sp, #8
    de12:	603d      	str	r5, [r7, #0]
    de14:	68bd      	ldr	r5, [r7, #8]
    de16:	2d00      	cmp	r5, #0
    de18:	d0f1      	beq.n	ddfe <mqtt_subscribe+0xe>
    de1a:	687d      	ldr	r5, [r7, #4]
    de1c:	2d02      	cmp	r5, #2
    de1e:	d8ee      	bhi.n	ddfe <mqtt_subscribe+0xe>
    de20:	1c05      	adds	r5, r0, #0
    de22:	3543      	adds	r5, #67	; 0x43
    de24:	782b      	ldrb	r3, [r5, #0]
    de26:	079a      	lsls	r2, r3, #30
    de28:	d56f      	bpl.n	df0a <mqtt_subscribe+0x11a>
    de2a:	071a      	lsls	r2, r3, #28
    de2c:	d41a      	bmi.n	de64 <mqtt_subscribe+0x74>
    de2e:	68b8      	ldr	r0, [r7, #8]
    de30:	4d39      	ldr	r5, [pc, #228]	; (df18 <mqtt_subscribe+0x128>)
    de32:	47a8      	blx	r5
    de34:	1c25      	adds	r5, r4, #0
    de36:	3543      	adds	r5, #67	; 0x43
    de38:	782b      	ldrb	r3, [r5, #0]
    de3a:	2208      	movs	r2, #8
    de3c:	4313      	orrs	r3, r2
    de3e:	702b      	strb	r3, [r5, #0]
    de40:	60fd      	str	r5, [r7, #12]
    de42:	1d46      	adds	r6, r0, #5
    de44:	9400      	str	r4, [sp, #0]
    de46:	1c38      	adds	r0, r7, #0
    de48:	3014      	adds	r0, #20
    de4a:	6839      	ldr	r1, [r7, #0]
    de4c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    de4e:	4b33      	ldr	r3, [pc, #204]	; (df1c <mqtt_subscribe+0x12c>)
    de50:	4d33      	ldr	r5, [pc, #204]	; (df20 <mqtt_subscribe+0x130>)
    de52:	47a8      	blx	r5
    de54:	1c38      	adds	r0, r7, #0
    de56:	217e      	movs	r1, #126	; 0x7e
    de58:	3014      	adds	r0, #20
    de5a:	4249      	negs	r1, r1
    de5c:	4b31      	ldr	r3, [pc, #196]	; (df24 <mqtt_subscribe+0x134>)
    de5e:	4798      	blx	r3
    de60:	4d2d      	ldr	r5, [pc, #180]	; (df18 <mqtt_subscribe+0x128>)
    de62:	e00e      	b.n	de82 <mqtt_subscribe+0x92>
    de64:	1c03      	adds	r3, r0, #0
    de66:	3370      	adds	r3, #112	; 0x70
    de68:	781b      	ldrb	r3, [r3, #0]
    de6a:	2b00      	cmp	r3, #0
    de6c:	d14f      	bne.n	df0e <mqtt_subscribe+0x11e>
    de6e:	782b      	ldrb	r3, [r5, #0]
    de70:	071a      	lsls	r2, r3, #28
    de72:	d5dc      	bpl.n	de2e <mqtt_subscribe+0x3e>
    de74:	4b2c      	ldr	r3, [pc, #176]	; (df28 <mqtt_subscribe+0x138>)
    de76:	2000      	movs	r0, #0
    de78:	4798      	blx	r3
    de7a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    de7c:	4b2b      	ldr	r3, [pc, #172]	; (df2c <mqtt_subscribe+0x13c>)
    de7e:	4798      	blx	r3
    de80:	e7f5      	b.n	de6e <mqtt_subscribe+0x7e>
    de82:	4b28      	ldr	r3, [pc, #160]	; (df24 <mqtt_subscribe+0x134>)
    de84:	2e80      	cmp	r6, #128	; 0x80
    de86:	dd08      	ble.n	de9a <mqtt_subscribe+0xaa>
    de88:	2180      	movs	r1, #128	; 0x80
    de8a:	4249      	negs	r1, r1
    de8c:	4331      	orrs	r1, r6
    de8e:	1c38      	adds	r0, r7, #0
    de90:	b249      	sxtb	r1, r1
    de92:	3014      	adds	r0, #20
    de94:	4798      	blx	r3
    de96:	11f6      	asrs	r6, r6, #7
    de98:	e7f3      	b.n	de82 <mqtt_subscribe+0x92>
    de9a:	4925      	ldr	r1, [pc, #148]	; (df30 <mqtt_subscribe+0x140>)
    de9c:	4031      	ands	r1, r6
    de9e:	d504      	bpl.n	deaa <mqtt_subscribe+0xba>
    dea0:	2280      	movs	r2, #128	; 0x80
    dea2:	3901      	subs	r1, #1
    dea4:	4252      	negs	r2, r2
    dea6:	4311      	orrs	r1, r2
    dea8:	3101      	adds	r1, #1
    deaa:	1c38      	adds	r0, r7, #0
    deac:	b249      	sxtb	r1, r1
    deae:	3014      	adds	r0, #20
    deb0:	4798      	blx	r3
    deb2:	8821      	ldrh	r1, [r4, #0]
    deb4:	1c38      	adds	r0, r7, #0
    deb6:	1c4b      	adds	r3, r1, #1
    deb8:	8023      	strh	r3, [r4, #0]
    deba:	b209      	sxth	r1, r1
    debc:	3014      	adds	r0, #20
    debe:	4e1d      	ldr	r6, [pc, #116]	; (df34 <mqtt_subscribe+0x144>)
    dec0:	47b0      	blx	r6
    dec2:	8823      	ldrh	r3, [r4, #0]
    dec4:	2b00      	cmp	r3, #0
    dec6:	d101      	bne.n	decc <mqtt_subscribe+0xdc>
    dec8:	2301      	movs	r3, #1
    deca:	8023      	strh	r3, [r4, #0]
    decc:	68b8      	ldr	r0, [r7, #8]
    dece:	47a8      	blx	r5
    ded0:	b201      	sxth	r1, r0
    ded2:	1c38      	adds	r0, r7, #0
    ded4:	3014      	adds	r0, #20
    ded6:	47b0      	blx	r6
    ded8:	68b8      	ldr	r0, [r7, #8]
    deda:	47a8      	blx	r5
    dedc:	1c02      	adds	r2, r0, #0
    dede:	1c38      	adds	r0, r7, #0
    dee0:	3014      	adds	r0, #20
    dee2:	68b9      	ldr	r1, [r7, #8]
    dee4:	4b14      	ldr	r3, [pc, #80]	; (df38 <mqtt_subscribe+0x148>)
    dee6:	4798      	blx	r3
    dee8:	687d      	ldr	r5, [r7, #4]
    deea:	1c38      	adds	r0, r7, #0
    deec:	b269      	sxtb	r1, r5
    deee:	3014      	adds	r0, #20
    def0:	4b0c      	ldr	r3, [pc, #48]	; (df24 <mqtt_subscribe+0x134>)
    def2:	4798      	blx	r3
    def4:	1c38      	adds	r0, r7, #0
    def6:	3014      	adds	r0, #20
    def8:	4b10      	ldr	r3, [pc, #64]	; (df3c <mqtt_subscribe+0x14c>)
    defa:	4798      	blx	r3
    defc:	68fd      	ldr	r5, [r7, #12]
    defe:	2208      	movs	r2, #8
    df00:	782b      	ldrb	r3, [r5, #0]
    df02:	2000      	movs	r0, #0
    df04:	4393      	bics	r3, r2
    df06:	702b      	strb	r3, [r5, #0]
    df08:	e003      	b.n	df12 <mqtt_subscribe+0x122>
    df0a:	2080      	movs	r0, #128	; 0x80
    df0c:	e000      	b.n	df10 <mqtt_subscribe+0x120>
    df0e:	200b      	movs	r0, #11
    df10:	4240      	negs	r0, r0
    df12:	46bd      	mov	sp, r7
    df14:	b00b      	add	sp, #44	; 0x2c
    df16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df18:	0000f2f1 	.word	0x0000f2f1
    df1c:	0000d711 	.word	0x0000d711
    df20:	00007819 	.word	0x00007819
    df24:	0000784d 	.word	0x0000784d
    df28:	00001f41 	.word	0x00001f41
    df2c:	00007bfd 	.word	0x00007bfd
    df30:	8000007f 	.word	0x8000007f
    df34:	00007899 	.word	0x00007899
    df38:	000078d9 	.word	0x000078d9
    df3c:	00007915 	.word	0x00007915

0000df40 <_mqtt_ping>:
    df40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df42:	23c0      	movs	r3, #192	; 0xc0
    df44:	a901      	add	r1, sp, #4
    df46:	2500      	movs	r5, #0
    df48:	700b      	strb	r3, [r1, #0]
    df4a:	704d      	strb	r5, [r1, #1]
    df4c:	42a8      	cmp	r0, r5
    df4e:	d019      	beq.n	df84 <_mqtt_ping+0x44>
    df50:	1c04      	adds	r4, r0, #0
    df52:	3443      	adds	r4, #67	; 0x43
    df54:	7823      	ldrb	r3, [r4, #0]
    df56:	079a      	lsls	r2, r3, #30
    df58:	d516      	bpl.n	df88 <_mqtt_ping+0x48>
    df5a:	071a      	lsls	r2, r3, #28
    df5c:	d416      	bmi.n	df8c <_mqtt_ping+0x4c>
    df5e:	2608      	movs	r6, #8
    df60:	4333      	orrs	r3, r6
    df62:	7023      	strb	r3, [r4, #0]
    df64:	7880      	ldrb	r0, [r0, #2]
    df66:	1c2b      	adds	r3, r5, #0
    df68:	b240      	sxtb	r0, r0
    df6a:	2202      	movs	r2, #2
    df6c:	4f09      	ldr	r7, [pc, #36]	; (df94 <_mqtt_ping+0x54>)
    df6e:	47b8      	blx	r7
    df70:	1c2b      	adds	r3, r5, #0
    df72:	42a8      	cmp	r0, r5
    df74:	da0c      	bge.n	df90 <_mqtt_ping+0x50>
    df76:	7823      	ldrb	r3, [r4, #0]
    df78:	43b3      	bics	r3, r6
    df7a:	7023      	strb	r3, [r4, #0]
    df7c:	4b06      	ldr	r3, [pc, #24]	; (df98 <_mqtt_ping+0x58>)
    df7e:	4798      	blx	r3
    df80:	1c03      	adds	r3, r0, #0
    df82:	e005      	b.n	df90 <_mqtt_ping+0x50>
    df84:	2316      	movs	r3, #22
    df86:	e002      	b.n	df8e <_mqtt_ping+0x4e>
    df88:	2380      	movs	r3, #128	; 0x80
    df8a:	e000      	b.n	df8e <_mqtt_ping+0x4e>
    df8c:	230b      	movs	r3, #11
    df8e:	425b      	negs	r3, r3
    df90:	1c18      	adds	r0, r3, #0
    df92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    df94:	000052f5 	.word	0x000052f5
    df98:	0000d6c1 	.word	0x0000d6c1

0000df9c <mqtt_timer_callback>:
    df9c:	b570      	push	{r4, r5, r6, lr}
    df9e:	1c05      	adds	r5, r0, #0
    dfa0:	b086      	sub	sp, #24
    dfa2:	1c0e      	adds	r6, r1, #0
    dfa4:	1c14      	adds	r4, r2, #0
    dfa6:	2800      	cmp	r0, #0
    dfa8:	d012      	beq.n	dfd0 <mqtt_timer_callback+0x34>
    dfaa:	2a00      	cmp	r2, #0
    dfac:	d010      	beq.n	dfd0 <mqtt_timer_callback+0x34>
    dfae:	1c10      	adds	r0, r2, #0
    dfb0:	4b08      	ldr	r3, [pc, #32]	; (dfd4 <mqtt_timer_callback+0x38>)
    dfb2:	4798      	blx	r3
    dfb4:	2800      	cmp	r0, #0
    dfb6:	da04      	bge.n	dfc2 <mqtt_timer_callback+0x26>
    dfb8:	1c28      	adds	r0, r5, #0
    dfba:	1c31      	adds	r1, r6, #0
    dfbc:	2200      	movs	r2, #0
    dfbe:	4b06      	ldr	r3, [pc, #24]	; (dfd8 <mqtt_timer_callback+0x3c>)
    dfc0:	e005      	b.n	dfce <mqtt_timer_callback+0x32>
    dfc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	d003      	beq.n	dfd0 <mqtt_timer_callback+0x34>
    dfc8:	1c20      	adds	r0, r4, #0
    dfca:	2107      	movs	r1, #7
    dfcc:	aa01      	add	r2, sp, #4
    dfce:	4798      	blx	r3
    dfd0:	b006      	add	sp, #24
    dfd2:	bd70      	pop	{r4, r5, r6, pc}
    dfd4:	0000df41 	.word	0x0000df41
    dfd8:	00007b81 	.word	0x00007b81

0000dfdc <_mqtt_puback>:
    dfdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dfde:	2302      	movs	r3, #2
    dfe0:	ac01      	add	r4, sp, #4
    dfe2:	2700      	movs	r7, #0
    dfe4:	7063      	strb	r3, [r4, #1]
    dfe6:	42b8      	cmp	r0, r7
    dfe8:	d01e      	beq.n	e028 <_mqtt_puback+0x4c>
    dfea:	1c05      	adds	r5, r0, #0
    dfec:	3543      	adds	r5, #67	; 0x43
    dfee:	782b      	ldrb	r3, [r5, #0]
    dff0:	079e      	lsls	r6, r3, #30
    dff2:	d51b      	bpl.n	e02c <_mqtt_puback+0x50>
    dff4:	071e      	lsls	r6, r3, #28
    dff6:	d41b      	bmi.n	e030 <_mqtt_puback+0x54>
    dff8:	2608      	movs	r6, #8
    dffa:	4333      	orrs	r3, r6
    dffc:	702b      	strb	r3, [r5, #0]
    dffe:	7880      	ldrb	r0, [r0, #2]
    e000:	7021      	strb	r1, [r4, #0]
    e002:	0a11      	lsrs	r1, r2, #8
    e004:	70a1      	strb	r1, [r4, #2]
    e006:	70e2      	strb	r2, [r4, #3]
    e008:	1c21      	adds	r1, r4, #0
    e00a:	1c3b      	adds	r3, r7, #0
    e00c:	b240      	sxtb	r0, r0
    e00e:	2204      	movs	r2, #4
    e010:	4c09      	ldr	r4, [pc, #36]	; (e038 <_mqtt_puback+0x5c>)
    e012:	47a0      	blx	r4
    e014:	1c3b      	adds	r3, r7, #0
    e016:	42b8      	cmp	r0, r7
    e018:	da0c      	bge.n	e034 <_mqtt_puback+0x58>
    e01a:	782b      	ldrb	r3, [r5, #0]
    e01c:	43b3      	bics	r3, r6
    e01e:	702b      	strb	r3, [r5, #0]
    e020:	4b06      	ldr	r3, [pc, #24]	; (e03c <_mqtt_puback+0x60>)
    e022:	4798      	blx	r3
    e024:	1c03      	adds	r3, r0, #0
    e026:	e005      	b.n	e034 <_mqtt_puback+0x58>
    e028:	2316      	movs	r3, #22
    e02a:	e002      	b.n	e032 <_mqtt_puback+0x56>
    e02c:	2380      	movs	r3, #128	; 0x80
    e02e:	e000      	b.n	e032 <_mqtt_puback+0x56>
    e030:	230b      	movs	r3, #11
    e032:	425b      	negs	r3, r3
    e034:	1c18      	adds	r0, r3, #0
    e036:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e038:	000052f5 	.word	0x000052f5
    e03c:	0000d6c1 	.word	0x0000d6c1

0000e040 <mqtt_clear_conn>:
    e040:	b530      	push	{r4, r5, lr}
    e042:	1c04      	adds	r4, r0, #0
    e044:	b087      	sub	sp, #28
    e046:	2800      	cmp	r0, #0
    e048:	d01c      	beq.n	e084 <mqtt_clear_conn+0x44>
    e04a:	2002      	movs	r0, #2
    e04c:	4b0e      	ldr	r3, [pc, #56]	; (e088 <mqtt_clear_conn+0x48>)
    e04e:	5620      	ldrsb	r0, [r4, r0]
    e050:	4798      	blx	r3
    e052:	1c23      	adds	r3, r4, #0
    e054:	3343      	adds	r3, #67	; 0x43
    e056:	781a      	ldrb	r2, [r3, #0]
    e058:	21fc      	movs	r1, #252	; 0xfc
    e05a:	0795      	lsls	r5, r2, #30
    e05c:	400a      	ands	r2, r1
    e05e:	701a      	strb	r2, [r3, #0]
    e060:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e062:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    e064:	9301      	str	r3, [sp, #4]
    e066:	2300      	movs	r3, #0
    e068:	64e3      	str	r3, [r4, #76]	; 0x4c
    e06a:	6d21      	ldr	r1, [r4, #80]	; 0x50
    e06c:	4b07      	ldr	r3, [pc, #28]	; (e08c <mqtt_clear_conn+0x4c>)
    e06e:	4798      	blx	r3
    e070:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e072:	0fed      	lsrs	r5, r5, #31
    e074:	2b00      	cmp	r3, #0
    e076:	d005      	beq.n	e084 <mqtt_clear_conn+0x44>
    e078:	2d00      	cmp	r5, #0
    e07a:	d003      	beq.n	e084 <mqtt_clear_conn+0x44>
    e07c:	1c20      	adds	r0, r4, #0
    e07e:	2105      	movs	r1, #5
    e080:	aa01      	add	r2, sp, #4
    e082:	4798      	blx	r3
    e084:	b007      	add	sp, #28
    e086:	bd30      	pop	{r4, r5, pc}
    e088:	000055d9 	.word	0x000055d9
    e08c:	00007bd1 	.word	0x00007bd1

0000e090 <mqtt_disconnect>:
    e090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e092:	23e0      	movs	r3, #224	; 0xe0
    e094:	ae01      	add	r6, sp, #4
    e096:	2700      	movs	r7, #0
    e098:	1c05      	adds	r5, r0, #0
    e09a:	7033      	strb	r3, [r6, #0]
    e09c:	7077      	strb	r7, [r6, #1]
    e09e:	42b8      	cmp	r0, r7
    e0a0:	d036      	beq.n	e110 <mqtt_disconnect+0x80>
    e0a2:	1c04      	adds	r4, r0, #0
    e0a4:	3443      	adds	r4, #67	; 0x43
    e0a6:	7823      	ldrb	r3, [r4, #0]
    e0a8:	079a      	lsls	r2, r3, #30
    e0aa:	d533      	bpl.n	e114 <mqtt_disconnect+0x84>
    e0ac:	42b9      	cmp	r1, r7
    e0ae:	d12b      	bne.n	e108 <mqtt_disconnect+0x78>
    e0b0:	071a      	lsls	r2, r3, #28
    e0b2:	d414      	bmi.n	e0de <mqtt_disconnect+0x4e>
    e0b4:	7823      	ldrb	r3, [r4, #0]
    e0b6:	2210      	movs	r2, #16
    e0b8:	4313      	orrs	r3, r2
    e0ba:	2708      	movs	r7, #8
    e0bc:	433b      	orrs	r3, r7
    e0be:	7023      	strb	r3, [r4, #0]
    e0c0:	2002      	movs	r0, #2
    e0c2:	5628      	ldrsb	r0, [r5, r0]
    e0c4:	1c31      	adds	r1, r6, #0
    e0c6:	2202      	movs	r2, #2
    e0c8:	2300      	movs	r3, #0
    e0ca:	4d15      	ldr	r5, [pc, #84]	; (e120 <mqtt_disconnect+0x90>)
    e0cc:	47a8      	blx	r5
    e0ce:	2800      	cmp	r0, #0
    e0d0:	da14      	bge.n	e0fc <mqtt_disconnect+0x6c>
    e0d2:	7823      	ldrb	r3, [r4, #0]
    e0d4:	43bb      	bics	r3, r7
    e0d6:	7023      	strb	r3, [r4, #0]
    e0d8:	4b12      	ldr	r3, [pc, #72]	; (e124 <mqtt_disconnect+0x94>)
    e0da:	4798      	blx	r3
    e0dc:	e01e      	b.n	e11c <mqtt_disconnect+0x8c>
    e0de:	1c03      	adds	r3, r0, #0
    e0e0:	3370      	adds	r3, #112	; 0x70
    e0e2:	781b      	ldrb	r3, [r3, #0]
    e0e4:	2b00      	cmp	r3, #0
    e0e6:	d117      	bne.n	e118 <mqtt_disconnect+0x88>
    e0e8:	7823      	ldrb	r3, [r4, #0]
    e0ea:	071a      	lsls	r2, r3, #28
    e0ec:	d5e2      	bpl.n	e0b4 <mqtt_disconnect+0x24>
    e0ee:	4b0e      	ldr	r3, [pc, #56]	; (e128 <mqtt_disconnect+0x98>)
    e0f0:	2000      	movs	r0, #0
    e0f2:	4798      	blx	r3
    e0f4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    e0f6:	4b0d      	ldr	r3, [pc, #52]	; (e12c <mqtt_disconnect+0x9c>)
    e0f8:	4798      	blx	r3
    e0fa:	e7f5      	b.n	e0e8 <mqtt_disconnect+0x58>
    e0fc:	7823      	ldrb	r3, [r4, #0]
    e0fe:	2202      	movs	r2, #2
    e100:	4393      	bics	r3, r2
    e102:	7023      	strb	r3, [r4, #0]
    e104:	2000      	movs	r0, #0
    e106:	e009      	b.n	e11c <mqtt_disconnect+0x8c>
    e108:	4b09      	ldr	r3, [pc, #36]	; (e130 <mqtt_disconnect+0xa0>)
    e10a:	4798      	blx	r3
    e10c:	1c38      	adds	r0, r7, #0
    e10e:	e005      	b.n	e11c <mqtt_disconnect+0x8c>
    e110:	2016      	movs	r0, #22
    e112:	e002      	b.n	e11a <mqtt_disconnect+0x8a>
    e114:	2080      	movs	r0, #128	; 0x80
    e116:	e000      	b.n	e11a <mqtt_disconnect+0x8a>
    e118:	200b      	movs	r0, #11
    e11a:	4240      	negs	r0, r0
    e11c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e11e:	46c0      	nop			; (mov r8, r8)
    e120:	000052f5 	.word	0x000052f5
    e124:	0000d6c1 	.word	0x0000d6c1
    e128:	00001f41 	.word	0x00001f41
    e12c:	00007bfd 	.word	0x00007bfd
    e130:	0000e041 	.word	0x0000e041

0000e134 <_mqtt_recv_handler>:
    e134:	b5f0      	push	{r4, r5, r6, r7, lr}
    e136:	1c04      	adds	r4, r0, #0
    e138:	6e40      	ldr	r0, [r0, #100]	; 0x64
    e13a:	230f      	movs	r3, #15
    e13c:	7802      	ldrb	r2, [r0, #0]
    e13e:	b087      	sub	sp, #28
    e140:	1c15      	adds	r5, r2, #0
    e142:	439d      	bics	r5, r3
    e144:	2d50      	cmp	r5, #80	; 0x50
    e146:	d100      	bne.n	e14a <_mqtt_recv_handler+0x16>
    e148:	e098      	b.n	e27c <_mqtt_recv_handler+0x148>
    e14a:	d808      	bhi.n	e15e <_mqtt_recv_handler+0x2a>
    e14c:	2d30      	cmp	r5, #48	; 0x30
    e14e:	d03f      	beq.n	e1d0 <_mqtt_recv_handler+0x9c>
    e150:	2d40      	cmp	r5, #64	; 0x40
    e152:	d100      	bne.n	e156 <_mqtt_recv_handler+0x22>
    e154:	e0b3      	b.n	e2be <_mqtt_recv_handler+0x18a>
    e156:	2d20      	cmp	r5, #32
    e158:	d000      	beq.n	e15c <_mqtt_recv_handler+0x28>
    e15a:	e0c3      	b.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e15c:	e00e      	b.n	e17c <_mqtt_recv_handler+0x48>
    e15e:	2d70      	cmp	r5, #112	; 0x70
    e160:	d100      	bne.n	e164 <_mqtt_recv_handler+0x30>
    e162:	e0ac      	b.n	e2be <_mqtt_recv_handler+0x18a>
    e164:	d803      	bhi.n	e16e <_mqtt_recv_handler+0x3a>
    e166:	2d60      	cmp	r5, #96	; 0x60
    e168:	d100      	bne.n	e16c <_mqtt_recv_handler+0x38>
    e16a:	e096      	b.n	e29a <_mqtt_recv_handler+0x166>
    e16c:	e0ba      	b.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e16e:	2d90      	cmp	r5, #144	; 0x90
    e170:	d100      	bne.n	e174 <_mqtt_recv_handler+0x40>
    e172:	e0aa      	b.n	e2ca <_mqtt_recv_handler+0x196>
    e174:	2db0      	cmp	r5, #176	; 0xb0
    e176:	d100      	bne.n	e17a <_mqtt_recv_handler+0x46>
    e178:	e0ad      	b.n	e2d6 <_mqtt_recv_handler+0x1a2>
    e17a:	e0b3      	b.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e17c:	aa01      	add	r2, sp, #4
    e17e:	2303      	movs	r3, #3
    e180:	2901      	cmp	r1, #1
    e182:	d900      	bls.n	e186 <_mqtt_recv_handler+0x52>
    e184:	78c3      	ldrb	r3, [r0, #3]
    e186:	7013      	strb	r3, [r2, #0]
    e188:	7813      	ldrb	r3, [r2, #0]
    e18a:	2b00      	cmp	r3, #0
    e18c:	d00d      	beq.n	e1aa <_mqtt_recv_handler+0x76>
    e18e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e190:	2b00      	cmp	r3, #0
    e192:	d002      	beq.n	e19a <_mqtt_recv_handler+0x66>
    e194:	1c20      	adds	r0, r4, #0
    e196:	2101      	movs	r1, #1
    e198:	4798      	blx	r3
    e19a:	236f      	movs	r3, #111	; 0x6f
    e19c:	425b      	negs	r3, r3
    e19e:	64e3      	str	r3, [r4, #76]	; 0x4c
    e1a0:	1c20      	adds	r0, r4, #0
    e1a2:	2100      	movs	r1, #0
    e1a4:	4b50      	ldr	r3, [pc, #320]	; (e2e8 <_mqtt_recv_handler+0x1b4>)
    e1a6:	4798      	blx	r3
    e1a8:	e09c      	b.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e1aa:	1c23      	adds	r3, r4, #0
    e1ac:	3343      	adds	r3, #67	; 0x43
    e1ae:	7819      	ldrb	r1, [r3, #0]
    e1b0:	0789      	lsls	r1, r1, #30
    e1b2:	0fc9      	lsrs	r1, r1, #31
    e1b4:	d105      	bne.n	e1c2 <_mqtt_recv_handler+0x8e>
    e1b6:	781a      	ldrb	r2, [r3, #0]
    e1b8:	64e1      	str	r1, [r4, #76]	; 0x4c
    e1ba:	2102      	movs	r1, #2
    e1bc:	430a      	orrs	r2, r1
    e1be:	701a      	strb	r2, [r3, #0]
    e1c0:	e090      	b.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e1c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e1c4:	2b00      	cmp	r3, #0
    e1c6:	d100      	bne.n	e1ca <_mqtt_recv_handler+0x96>
    e1c8:	e08c      	b.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e1ca:	1c20      	adds	r0, r4, #0
    e1cc:	2101      	movs	r1, #1
    e1ce:	e088      	b.n	e2e2 <_mqtt_recv_handler+0x1ae>
    e1d0:	ad01      	add	r5, sp, #4
    e1d2:	0713      	lsls	r3, r2, #28
    e1d4:	7c2a      	ldrb	r2, [r5, #16]
    e1d6:	0fdb      	lsrs	r3, r3, #31
    e1d8:	2604      	movs	r6, #4
    e1da:	009b      	lsls	r3, r3, #2
    e1dc:	43b2      	bics	r2, r6
    e1de:	431a      	orrs	r2, r3
    e1e0:	742a      	strb	r2, [r5, #16]
    e1e2:	7807      	ldrb	r7, [r0, #0]
    e1e4:	2303      	movs	r3, #3
    e1e6:	b2d2      	uxtb	r2, r2
    e1e8:	087f      	lsrs	r7, r7, #1
    e1ea:	439a      	bics	r2, r3
    e1ec:	401f      	ands	r7, r3
    e1ee:	1c13      	adds	r3, r2, #0
    e1f0:	433b      	orrs	r3, r7
    e1f2:	742b      	strb	r3, [r5, #16]
    e1f4:	1c43      	adds	r3, r0, #1
    e1f6:	7818      	ldrb	r0, [r3, #0]
    e1f8:	1c5a      	adds	r2, r3, #1
    e1fa:	287f      	cmp	r0, #127	; 0x7f
    e1fc:	d901      	bls.n	e202 <_mqtt_recv_handler+0xce>
    e1fe:	1c13      	adds	r3, r2, #0
    e200:	e7f9      	b.n	e1f6 <_mqtt_recv_handler+0xc2>
    e202:	7858      	ldrb	r0, [r3, #1]
    e204:	789e      	ldrb	r6, [r3, #2]
    e206:	0200      	lsls	r0, r0, #8
    e208:	4330      	orrs	r0, r6
    e20a:	3303      	adds	r3, #3
    e20c:	2600      	movs	r6, #0
    e20e:	6068      	str	r0, [r5, #4]
    e210:	9301      	str	r3, [sp, #4]
    e212:	1818      	adds	r0, r3, r0
    e214:	42b7      	cmp	r7, r6
    e216:	d004      	beq.n	e222 <_mqtt_recv_handler+0xee>
    e218:	7806      	ldrb	r6, [r0, #0]
    e21a:	7843      	ldrb	r3, [r0, #1]
    e21c:	0236      	lsls	r6, r6, #8
    e21e:	431e      	orrs	r6, r3
    e220:	3002      	adds	r0, #2
    e222:	1851      	adds	r1, r2, r1
    e224:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e226:	60a8      	str	r0, [r5, #8]
    e228:	1a08      	subs	r0, r1, r0
    e22a:	60e8      	str	r0, [r5, #12]
    e22c:	2b00      	cmp	r3, #0
    e22e:	d003      	beq.n	e238 <_mqtt_recv_handler+0x104>
    e230:	1c20      	adds	r0, r4, #0
    e232:	2106      	movs	r1, #6
    e234:	1c2a      	adds	r2, r5, #0
    e236:	4798      	blx	r3
    e238:	7c2b      	ldrb	r3, [r5, #16]
    e23a:	079b      	lsls	r3, r3, #30
    e23c:	0f9b      	lsrs	r3, r3, #30
    e23e:	2b01      	cmp	r3, #1
    e240:	d10b      	bne.n	e25a <_mqtt_recv_handler+0x126>
    e242:	b2b6      	uxth	r6, r6
    e244:	1c20      	adds	r0, r4, #0
    e246:	2140      	movs	r1, #64	; 0x40
    e248:	1c32      	adds	r2, r6, #0
    e24a:	4b28      	ldr	r3, [pc, #160]	; (e2ec <_mqtt_recv_handler+0x1b8>)
    e24c:	4798      	blx	r3
    e24e:	2800      	cmp	r0, #0
    e250:	d048      	beq.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e252:	1c23      	adds	r3, r4, #0
    e254:	3348      	adds	r3, #72	; 0x48
    e256:	2240      	movs	r2, #64	; 0x40
    e258:	e00c      	b.n	e274 <_mqtt_recv_handler+0x140>
    e25a:	2b02      	cmp	r3, #2
    e25c:	d142      	bne.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e25e:	b2b6      	uxth	r6, r6
    e260:	1c20      	adds	r0, r4, #0
    e262:	2150      	movs	r1, #80	; 0x50
    e264:	1c32      	adds	r2, r6, #0
    e266:	4b21      	ldr	r3, [pc, #132]	; (e2ec <_mqtt_recv_handler+0x1b8>)
    e268:	4798      	blx	r3
    e26a:	2800      	cmp	r0, #0
    e26c:	d03a      	beq.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e26e:	1c23      	adds	r3, r4, #0
    e270:	3348      	adds	r3, #72	; 0x48
    e272:	2250      	movs	r2, #80	; 0x50
    e274:	344a      	adds	r4, #74	; 0x4a
    e276:	701a      	strb	r2, [r3, #0]
    e278:	8026      	strh	r6, [r4, #0]
    e27a:	e033      	b.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e27c:	7885      	ldrb	r5, [r0, #2]
    e27e:	78c3      	ldrb	r3, [r0, #3]
    e280:	022d      	lsls	r5, r5, #8
    e282:	431d      	orrs	r5, r3
    e284:	1c20      	adds	r0, r4, #0
    e286:	2162      	movs	r1, #98	; 0x62
    e288:	1c2a      	adds	r2, r5, #0
    e28a:	4b18      	ldr	r3, [pc, #96]	; (e2ec <_mqtt_recv_handler+0x1b8>)
    e28c:	4798      	blx	r3
    e28e:	2800      	cmp	r0, #0
    e290:	d028      	beq.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e292:	1c23      	adds	r3, r4, #0
    e294:	3348      	adds	r3, #72	; 0x48
    e296:	2260      	movs	r2, #96	; 0x60
    e298:	e00d      	b.n	e2b6 <_mqtt_recv_handler+0x182>
    e29a:	7885      	ldrb	r5, [r0, #2]
    e29c:	78c3      	ldrb	r3, [r0, #3]
    e29e:	022d      	lsls	r5, r5, #8
    e2a0:	431d      	orrs	r5, r3
    e2a2:	1c20      	adds	r0, r4, #0
    e2a4:	2170      	movs	r1, #112	; 0x70
    e2a6:	1c2a      	adds	r2, r5, #0
    e2a8:	4b10      	ldr	r3, [pc, #64]	; (e2ec <_mqtt_recv_handler+0x1b8>)
    e2aa:	4798      	blx	r3
    e2ac:	2800      	cmp	r0, #0
    e2ae:	d019      	beq.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e2b0:	1c23      	adds	r3, r4, #0
    e2b2:	3348      	adds	r3, #72	; 0x48
    e2b4:	2270      	movs	r2, #112	; 0x70
    e2b6:	344a      	adds	r4, #74	; 0x4a
    e2b8:	701a      	strb	r2, [r3, #0]
    e2ba:	8025      	strh	r5, [r4, #0]
    e2bc:	e012      	b.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e2be:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e2c0:	2b00      	cmp	r3, #0
    e2c2:	d00f      	beq.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e2c4:	1c20      	adds	r0, r4, #0
    e2c6:	2102      	movs	r1, #2
    e2c8:	e00a      	b.n	e2e0 <_mqtt_recv_handler+0x1ac>
    e2ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	d009      	beq.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e2d0:	1c20      	adds	r0, r4, #0
    e2d2:	2103      	movs	r1, #3
    e2d4:	e004      	b.n	e2e0 <_mqtt_recv_handler+0x1ac>
    e2d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e2d8:	2b00      	cmp	r3, #0
    e2da:	d003      	beq.n	e2e4 <_mqtt_recv_handler+0x1b0>
    e2dc:	1c20      	adds	r0, r4, #0
    e2de:	2104      	movs	r1, #4
    e2e0:	aa01      	add	r2, sp, #4
    e2e2:	4798      	blx	r3
    e2e4:	b007      	add	sp, #28
    e2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2e8:	0000e091 	.word	0x0000e091
    e2ec:	0000dfdd 	.word	0x0000dfdd

0000e2f0 <mqtt_recv_packet>:
    e2f0:	b538      	push	{r3, r4, r5, lr}
    e2f2:	1e04      	subs	r4, r0, #0
    e2f4:	d017      	beq.n	e326 <mqtt_recv_packet+0x36>
    e2f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e2f8:	6e83      	ldr	r3, [r0, #104]	; 0x68
    e2fa:	429a      	cmp	r2, r3
    e2fc:	d906      	bls.n	e30c <mqtt_recv_packet+0x1c>
    e2fe:	238b      	movs	r3, #139	; 0x8b
    e300:	425b      	negs	r3, r3
    e302:	64c3      	str	r3, [r0, #76]	; 0x4c
    e304:	2100      	movs	r1, #0
    e306:	4b08      	ldr	r3, [pc, #32]	; (e328 <mqtt_recv_packet+0x38>)
    e308:	4798      	blx	r3
    e30a:	e00c      	b.n	e326 <mqtt_recv_packet+0x36>
    e30c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e30e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e310:	2002      	movs	r0, #2
    e312:	1899      	adds	r1, r3, r2
    e314:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e316:	5620      	ldrsb	r0, [r4, r0]
    e318:	1a9a      	subs	r2, r3, r2
    e31a:	b292      	uxth	r2, r2
    e31c:	2300      	movs	r3, #0
    e31e:	4d03      	ldr	r5, [pc, #12]	; (e32c <mqtt_recv_packet+0x3c>)
    e320:	47a8      	blx	r5
    e322:	2800      	cmp	r0, #0
    e324:	d1f2      	bne.n	e30c <mqtt_recv_packet+0x1c>
    e326:	bd38      	pop	{r3, r4, r5, pc}
    e328:	0000e091 	.word	0x0000e091
    e32c:	00005459 	.word	0x00005459

0000e330 <mqtt_recved_packet>:
    e330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e332:	1e04      	subs	r4, r0, #0
    e334:	d042      	beq.n	e3bc <mqtt_recved_packet+0x8c>
    e336:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e338:	6e67      	ldr	r7, [r4, #100]	; 0x64
    e33a:	18ca      	adds	r2, r1, r3
    e33c:	2301      	movs	r3, #1
    e33e:	9701      	str	r7, [sp, #4]
    e340:	6462      	str	r2, [r4, #68]	; 0x44
    e342:	2600      	movs	r6, #0
    e344:	1c1d      	adds	r5, r3, #0
    e346:	42a9      	cmp	r1, r5
    e348:	dc03      	bgt.n	e352 <mqtt_recved_packet+0x22>
    e34a:	1c20      	adds	r0, r4, #0
    e34c:	4b1c      	ldr	r3, [pc, #112]	; (e3c0 <mqtt_recved_packet+0x90>)
    e34e:	4798      	blx	r3
    e350:	e034      	b.n	e3bc <mqtt_recved_packet+0x8c>
    e352:	9f01      	ldr	r7, [sp, #4]
    e354:	5d78      	ldrb	r0, [r7, r5]
    e356:	01df      	lsls	r7, r3, #7
    e358:	46bc      	mov	ip, r7
    e35a:	2d03      	cmp	r5, #3
    e35c:	d101      	bne.n	e362 <mqtt_recved_packet+0x32>
    e35e:	234d      	movs	r3, #77	; 0x4d
    e360:	e00e      	b.n	e380 <mqtt_recved_packet+0x50>
    e362:	277f      	movs	r7, #127	; 0x7f
    e364:	4007      	ands	r7, r0
    e366:	437b      	muls	r3, r7
    e368:	b240      	sxtb	r0, r0
    e36a:	3501      	adds	r5, #1
    e36c:	18f6      	adds	r6, r6, r3
    e36e:	2800      	cmp	r0, #0
    e370:	da01      	bge.n	e376 <mqtt_recved_packet+0x46>
    e372:	4663      	mov	r3, ip
    e374:	e7e7      	b.n	e346 <mqtt_recved_packet+0x16>
    e376:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e378:	19af      	adds	r7, r5, r6
    e37a:	429f      	cmp	r7, r3
    e37c:	d907      	bls.n	e38e <mqtt_recved_packet+0x5e>
    e37e:	238b      	movs	r3, #139	; 0x8b
    e380:	425b      	negs	r3, r3
    e382:	64e3      	str	r3, [r4, #76]	; 0x4c
    e384:	1c20      	adds	r0, r4, #0
    e386:	2100      	movs	r1, #0
    e388:	4b0e      	ldr	r3, [pc, #56]	; (e3c4 <mqtt_recved_packet+0x94>)
    e38a:	4798      	blx	r3
    e38c:	e016      	b.n	e3bc <mqtt_recved_packet+0x8c>
    e38e:	42ba      	cmp	r2, r7
    e390:	d314      	bcc.n	e3bc <mqtt_recved_packet+0x8c>
    e392:	4b0d      	ldr	r3, [pc, #52]	; (e3c8 <mqtt_recved_packet+0x98>)
    e394:	1c20      	adds	r0, r4, #0
    e396:	1c31      	adds	r1, r6, #0
    e398:	4798      	blx	r3
    e39a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e39c:	42bb      	cmp	r3, r7
    e39e:	d102      	bne.n	e3a6 <mqtt_recved_packet+0x76>
    e3a0:	2300      	movs	r3, #0
    e3a2:	6463      	str	r3, [r4, #68]	; 0x44
    e3a4:	e00a      	b.n	e3bc <mqtt_recved_packet+0x8c>
    e3a6:	1b9e      	subs	r6, r3, r6
    e3a8:	9b01      	ldr	r3, [sp, #4]
    e3aa:	1b75      	subs	r5, r6, r5
    e3ac:	19d9      	adds	r1, r3, r7
    e3ae:	1c18      	adds	r0, r3, #0
    e3b0:	1c2a      	adds	r2, r5, #0
    e3b2:	4b06      	ldr	r3, [pc, #24]	; (e3cc <mqtt_recved_packet+0x9c>)
    e3b4:	4798      	blx	r3
    e3b6:	6465      	str	r5, [r4, #68]	; 0x44
    e3b8:	2100      	movs	r1, #0
    e3ba:	e7bc      	b.n	e336 <mqtt_recved_packet+0x6>
    e3bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e3be:	46c0      	nop			; (mov r8, r8)
    e3c0:	0000e2f1 	.word	0x0000e2f1
    e3c4:	0000e091 	.word	0x0000e091
    e3c8:	0000e135 	.word	0x0000e135
    e3cc:	0000e563 	.word	0x0000e563

0000e3d0 <mqtt_socket_event_handler>:
    e3d0:	b570      	push	{r4, r5, r6, lr}
    e3d2:	4d37      	ldr	r5, [pc, #220]	; (e4b0 <mqtt_socket_event_handler+0xe0>)
    e3d4:	0086      	lsls	r6, r0, #2
    e3d6:	5974      	ldr	r4, [r6, r5]
    e3d8:	b086      	sub	sp, #24
    e3da:	2c00      	cmp	r4, #0
    e3dc:	d066      	beq.n	e4ac <mqtt_socket_event_handler+0xdc>
    e3de:	2906      	cmp	r1, #6
    e3e0:	d02b      	beq.n	e43a <mqtt_socket_event_handler+0x6a>
    e3e2:	2907      	cmp	r1, #7
    e3e4:	d039      	beq.n	e45a <mqtt_socket_event_handler+0x8a>
    e3e6:	2905      	cmp	r1, #5
    e3e8:	d160      	bne.n	e4ac <mqtt_socket_event_handler+0xdc>
    e3ea:	2001      	movs	r0, #1
    e3ec:	5610      	ldrsb	r0, [r2, r0]
    e3ee:	4b31      	ldr	r3, [pc, #196]	; (e4b4 <mqtt_socket_event_handler+0xe4>)
    e3f0:	4798      	blx	r3
    e3f2:	9001      	str	r0, [sp, #4]
    e3f4:	2800      	cmp	r0, #0
    e3f6:	da06      	bge.n	e406 <mqtt_socket_event_handler+0x36>
    e3f8:	2002      	movs	r0, #2
    e3fa:	4b2f      	ldr	r3, [pc, #188]	; (e4b8 <mqtt_socket_event_handler+0xe8>)
    e3fc:	5620      	ldrsb	r0, [r4, r0]
    e3fe:	4798      	blx	r3
    e400:	2300      	movs	r3, #0
    e402:	5173      	str	r3, [r6, r5]
    e404:	e011      	b.n	e42a <mqtt_socket_event_handler+0x5a>
    e406:	1c23      	adds	r3, r4, #0
    e408:	3343      	adds	r3, #67	; 0x43
    e40a:	781a      	ldrb	r2, [r3, #0]
    e40c:	2101      	movs	r1, #1
    e40e:	430a      	orrs	r2, r1
    e410:	701a      	strb	r2, [r3, #0]
    e412:	331d      	adds	r3, #29
    e414:	881b      	ldrh	r3, [r3, #0]
    e416:	2b00      	cmp	r3, #0
    e418:	d004      	beq.n	e424 <mqtt_socket_event_handler+0x54>
    e41a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    e41c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    e41e:	2200      	movs	r2, #0
    e420:	4b26      	ldr	r3, [pc, #152]	; (e4bc <mqtt_socket_event_handler+0xec>)
    e422:	4798      	blx	r3
    e424:	1c20      	adds	r0, r4, #0
    e426:	4b26      	ldr	r3, [pc, #152]	; (e4c0 <mqtt_socket_event_handler+0xf0>)
    e428:	4798      	blx	r3
    e42a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e42c:	2b00      	cmp	r3, #0
    e42e:	d03d      	beq.n	e4ac <mqtt_socket_event_handler+0xdc>
    e430:	1c20      	adds	r0, r4, #0
    e432:	2100      	movs	r1, #0
    e434:	aa01      	add	r2, sp, #4
    e436:	4798      	blx	r3
    e438:	e038      	b.n	e4ac <mqtt_socket_event_handler+0xdc>
    e43a:	2304      	movs	r3, #4
    e43c:	5ed1      	ldrsh	r1, [r2, r3]
    e43e:	2900      	cmp	r1, #0
    e440:	dd03      	ble.n	e44a <mqtt_socket_event_handler+0x7a>
    e442:	1c20      	adds	r0, r4, #0
    e444:	4b1f      	ldr	r3, [pc, #124]	; (e4c4 <mqtt_socket_event_handler+0xf4>)
    e446:	4798      	blx	r3
    e448:	e003      	b.n	e452 <mqtt_socket_event_handler+0x82>
    e44a:	1c0b      	adds	r3, r1, #0
    e44c:	1c08      	adds	r0, r1, #0
    e44e:	330d      	adds	r3, #13
    e450:	d11a      	bne.n	e488 <mqtt_socket_event_handler+0xb8>
    e452:	4b1b      	ldr	r3, [pc, #108]	; (e4c0 <mqtt_socket_event_handler+0xf0>)
    e454:	1c20      	adds	r0, r4, #0
    e456:	4798      	blx	r3
    e458:	e028      	b.n	e4ac <mqtt_socket_event_handler+0xdc>
    e45a:	1c23      	adds	r3, r4, #0
    e45c:	3343      	adds	r3, #67	; 0x43
    e45e:	8810      	ldrh	r0, [r2, #0]
    e460:	781a      	ldrb	r2, [r3, #0]
    e462:	0751      	lsls	r1, r2, #29
    e464:	d402      	bmi.n	e46c <mqtt_socket_event_handler+0x9c>
    e466:	2108      	movs	r1, #8
    e468:	438a      	bics	r2, r1
    e46a:	701a      	strb	r2, [r3, #0]
    e46c:	781a      	ldrb	r2, [r3, #0]
    e46e:	2104      	movs	r1, #4
    e470:	438a      	bics	r2, r1
    e472:	701a      	strb	r2, [r3, #0]
    e474:	06d3      	lsls	r3, r2, #27
    e476:	0fde      	lsrs	r6, r3, #31
    e478:	b200      	sxth	r0, r0
    e47a:	2b00      	cmp	r3, #0
    e47c:	db02      	blt.n	e484 <mqtt_socket_event_handler+0xb4>
    e47e:	2800      	cmp	r0, #0
    e480:	da08      	bge.n	e494 <mqtt_socket_event_handler+0xc4>
    e482:	e001      	b.n	e488 <mqtt_socket_event_handler+0xb8>
    e484:	2800      	cmp	r0, #0
    e486:	da02      	bge.n	e48e <mqtt_socket_event_handler+0xbe>
    e488:	4b0a      	ldr	r3, [pc, #40]	; (e4b4 <mqtt_socket_event_handler+0xe4>)
    e48a:	4798      	blx	r3
    e48c:	64e0      	str	r0, [r4, #76]	; 0x4c
    e48e:	1c20      	adds	r0, r4, #0
    e490:	4b0d      	ldr	r3, [pc, #52]	; (e4c8 <mqtt_socket_event_handler+0xf8>)
    e492:	e7e0      	b.n	e456 <mqtt_socket_event_handler+0x86>
    e494:	1c25      	adds	r5, r4, #0
    e496:	3548      	adds	r5, #72	; 0x48
    e498:	7829      	ldrb	r1, [r5, #0]
    e49a:	2900      	cmp	r1, #0
    e49c:	d006      	beq.n	e4ac <mqtt_socket_event_handler+0xdc>
    e49e:	1c23      	adds	r3, r4, #0
    e4a0:	334a      	adds	r3, #74	; 0x4a
    e4a2:	881a      	ldrh	r2, [r3, #0]
    e4a4:	1c20      	adds	r0, r4, #0
    e4a6:	4b09      	ldr	r3, [pc, #36]	; (e4cc <mqtt_socket_event_handler+0xfc>)
    e4a8:	4798      	blx	r3
    e4aa:	702e      	strb	r6, [r5, #0]
    e4ac:	b006      	add	sp, #24
    e4ae:	bd70      	pop	{r4, r5, r6, pc}
    e4b0:	200002a8 	.word	0x200002a8
    e4b4:	0000d6c1 	.word	0x0000d6c1
    e4b8:	000055d9 	.word	0x000055d9
    e4bc:	00007b81 	.word	0x00007b81
    e4c0:	0000e2f1 	.word	0x0000e2f1
    e4c4:	0000e331 	.word	0x0000e331
    e4c8:	0000e041 	.word	0x0000e041
    e4cc:	0000dfdd 	.word	0x0000dfdd

0000e4d0 <__libc_init_array>:
    e4d0:	b570      	push	{r4, r5, r6, lr}
    e4d2:	2600      	movs	r6, #0
    e4d4:	4d0c      	ldr	r5, [pc, #48]	; (e508 <__libc_init_array+0x38>)
    e4d6:	4c0d      	ldr	r4, [pc, #52]	; (e50c <__libc_init_array+0x3c>)
    e4d8:	1b64      	subs	r4, r4, r5
    e4da:	10a4      	asrs	r4, r4, #2
    e4dc:	42a6      	cmp	r6, r4
    e4de:	d109      	bne.n	e4f4 <__libc_init_array+0x24>
    e4e0:	2600      	movs	r6, #0
    e4e2:	f006 ff59 	bl	15398 <_init>
    e4e6:	4d0a      	ldr	r5, [pc, #40]	; (e510 <__libc_init_array+0x40>)
    e4e8:	4c0a      	ldr	r4, [pc, #40]	; (e514 <__libc_init_array+0x44>)
    e4ea:	1b64      	subs	r4, r4, r5
    e4ec:	10a4      	asrs	r4, r4, #2
    e4ee:	42a6      	cmp	r6, r4
    e4f0:	d105      	bne.n	e4fe <__libc_init_array+0x2e>
    e4f2:	bd70      	pop	{r4, r5, r6, pc}
    e4f4:	00b3      	lsls	r3, r6, #2
    e4f6:	58eb      	ldr	r3, [r5, r3]
    e4f8:	4798      	blx	r3
    e4fa:	3601      	adds	r6, #1
    e4fc:	e7ee      	b.n	e4dc <__libc_init_array+0xc>
    e4fe:	00b3      	lsls	r3, r6, #2
    e500:	58eb      	ldr	r3, [r5, r3]
    e502:	4798      	blx	r3
    e504:	3601      	adds	r6, #1
    e506:	e7f2      	b.n	e4ee <__libc_init_array+0x1e>
    e508:	000153a4 	.word	0x000153a4
    e50c:	000153a4 	.word	0x000153a4
    e510:	000153a4 	.word	0x000153a4
    e514:	000153a8 	.word	0x000153a8

0000e518 <malloc>:
    e518:	b510      	push	{r4, lr}
    e51a:	4b03      	ldr	r3, [pc, #12]	; (e528 <malloc+0x10>)
    e51c:	0001      	movs	r1, r0
    e51e:	6818      	ldr	r0, [r3, #0]
    e520:	f000 f884 	bl	e62c <_malloc_r>
    e524:	bd10      	pop	{r4, pc}
    e526:	46c0      	nop			; (mov r8, r8)
    e528:	20000040 	.word	0x20000040

0000e52c <__ascii_mbtowc>:
    e52c:	b082      	sub	sp, #8
    e52e:	2900      	cmp	r1, #0
    e530:	d100      	bne.n	e534 <__ascii_mbtowc+0x8>
    e532:	a901      	add	r1, sp, #4
    e534:	1e10      	subs	r0, r2, #0
    e536:	d006      	beq.n	e546 <__ascii_mbtowc+0x1a>
    e538:	2b00      	cmp	r3, #0
    e53a:	d006      	beq.n	e54a <__ascii_mbtowc+0x1e>
    e53c:	7813      	ldrb	r3, [r2, #0]
    e53e:	600b      	str	r3, [r1, #0]
    e540:	7810      	ldrb	r0, [r2, #0]
    e542:	1e43      	subs	r3, r0, #1
    e544:	4198      	sbcs	r0, r3
    e546:	b002      	add	sp, #8
    e548:	4770      	bx	lr
    e54a:	2002      	movs	r0, #2
    e54c:	4240      	negs	r0, r0
    e54e:	e7fa      	b.n	e546 <__ascii_mbtowc+0x1a>

0000e550 <memcpy>:
    e550:	2300      	movs	r3, #0
    e552:	b510      	push	{r4, lr}
    e554:	429a      	cmp	r2, r3
    e556:	d100      	bne.n	e55a <memcpy+0xa>
    e558:	bd10      	pop	{r4, pc}
    e55a:	5ccc      	ldrb	r4, [r1, r3]
    e55c:	54c4      	strb	r4, [r0, r3]
    e55e:	3301      	adds	r3, #1
    e560:	e7f8      	b.n	e554 <memcpy+0x4>

0000e562 <memmove>:
    e562:	b510      	push	{r4, lr}
    e564:	4288      	cmp	r0, r1
    e566:	d902      	bls.n	e56e <memmove+0xc>
    e568:	188b      	adds	r3, r1, r2
    e56a:	4298      	cmp	r0, r3
    e56c:	d308      	bcc.n	e580 <memmove+0x1e>
    e56e:	2300      	movs	r3, #0
    e570:	429a      	cmp	r2, r3
    e572:	d007      	beq.n	e584 <memmove+0x22>
    e574:	5ccc      	ldrb	r4, [r1, r3]
    e576:	54c4      	strb	r4, [r0, r3]
    e578:	3301      	adds	r3, #1
    e57a:	e7f9      	b.n	e570 <memmove+0xe>
    e57c:	5c8b      	ldrb	r3, [r1, r2]
    e57e:	5483      	strb	r3, [r0, r2]
    e580:	3a01      	subs	r2, #1
    e582:	d2fb      	bcs.n	e57c <memmove+0x1a>
    e584:	bd10      	pop	{r4, pc}

0000e586 <memset>:
    e586:	0003      	movs	r3, r0
    e588:	1882      	adds	r2, r0, r2
    e58a:	4293      	cmp	r3, r2
    e58c:	d100      	bne.n	e590 <memset+0xa>
    e58e:	4770      	bx	lr
    e590:	7019      	strb	r1, [r3, #0]
    e592:	3301      	adds	r3, #1
    e594:	e7f9      	b.n	e58a <memset+0x4>
	...

0000e598 <_free_r>:
    e598:	b570      	push	{r4, r5, r6, lr}
    e59a:	0005      	movs	r5, r0
    e59c:	2900      	cmp	r1, #0
    e59e:	d010      	beq.n	e5c2 <_free_r+0x2a>
    e5a0:	1f0c      	subs	r4, r1, #4
    e5a2:	6823      	ldr	r3, [r4, #0]
    e5a4:	2b00      	cmp	r3, #0
    e5a6:	da00      	bge.n	e5aa <_free_r+0x12>
    e5a8:	18e4      	adds	r4, r4, r3
    e5aa:	0028      	movs	r0, r5
    e5ac:	f002 f80d 	bl	105ca <__malloc_lock>
    e5b0:	4a1d      	ldr	r2, [pc, #116]	; (e628 <_free_r+0x90>)
    e5b2:	6813      	ldr	r3, [r2, #0]
    e5b4:	2b00      	cmp	r3, #0
    e5b6:	d105      	bne.n	e5c4 <_free_r+0x2c>
    e5b8:	6063      	str	r3, [r4, #4]
    e5ba:	6014      	str	r4, [r2, #0]
    e5bc:	0028      	movs	r0, r5
    e5be:	f002 f805 	bl	105cc <__malloc_unlock>
    e5c2:	bd70      	pop	{r4, r5, r6, pc}
    e5c4:	42a3      	cmp	r3, r4
    e5c6:	d909      	bls.n	e5dc <_free_r+0x44>
    e5c8:	6821      	ldr	r1, [r4, #0]
    e5ca:	1860      	adds	r0, r4, r1
    e5cc:	4283      	cmp	r3, r0
    e5ce:	d1f3      	bne.n	e5b8 <_free_r+0x20>
    e5d0:	6818      	ldr	r0, [r3, #0]
    e5d2:	685b      	ldr	r3, [r3, #4]
    e5d4:	1841      	adds	r1, r0, r1
    e5d6:	6021      	str	r1, [r4, #0]
    e5d8:	e7ee      	b.n	e5b8 <_free_r+0x20>
    e5da:	0013      	movs	r3, r2
    e5dc:	685a      	ldr	r2, [r3, #4]
    e5de:	2a00      	cmp	r2, #0
    e5e0:	d001      	beq.n	e5e6 <_free_r+0x4e>
    e5e2:	42a2      	cmp	r2, r4
    e5e4:	d9f9      	bls.n	e5da <_free_r+0x42>
    e5e6:	6819      	ldr	r1, [r3, #0]
    e5e8:	1858      	adds	r0, r3, r1
    e5ea:	42a0      	cmp	r0, r4
    e5ec:	d10b      	bne.n	e606 <_free_r+0x6e>
    e5ee:	6820      	ldr	r0, [r4, #0]
    e5f0:	1809      	adds	r1, r1, r0
    e5f2:	1858      	adds	r0, r3, r1
    e5f4:	6019      	str	r1, [r3, #0]
    e5f6:	4282      	cmp	r2, r0
    e5f8:	d1e0      	bne.n	e5bc <_free_r+0x24>
    e5fa:	6810      	ldr	r0, [r2, #0]
    e5fc:	6852      	ldr	r2, [r2, #4]
    e5fe:	1841      	adds	r1, r0, r1
    e600:	6019      	str	r1, [r3, #0]
    e602:	605a      	str	r2, [r3, #4]
    e604:	e7da      	b.n	e5bc <_free_r+0x24>
    e606:	42a0      	cmp	r0, r4
    e608:	d902      	bls.n	e610 <_free_r+0x78>
    e60a:	230c      	movs	r3, #12
    e60c:	602b      	str	r3, [r5, #0]
    e60e:	e7d5      	b.n	e5bc <_free_r+0x24>
    e610:	6821      	ldr	r1, [r4, #0]
    e612:	1860      	adds	r0, r4, r1
    e614:	4282      	cmp	r2, r0
    e616:	d103      	bne.n	e620 <_free_r+0x88>
    e618:	6810      	ldr	r0, [r2, #0]
    e61a:	6852      	ldr	r2, [r2, #4]
    e61c:	1841      	adds	r1, r0, r1
    e61e:	6021      	str	r1, [r4, #0]
    e620:	6062      	str	r2, [r4, #4]
    e622:	605c      	str	r4, [r3, #4]
    e624:	e7ca      	b.n	e5bc <_free_r+0x24>
    e626:	46c0      	nop			; (mov r8, r8)
    e628:	200002c4 	.word	0x200002c4

0000e62c <_malloc_r>:
    e62c:	2303      	movs	r3, #3
    e62e:	b570      	push	{r4, r5, r6, lr}
    e630:	1ccd      	adds	r5, r1, #3
    e632:	439d      	bics	r5, r3
    e634:	3508      	adds	r5, #8
    e636:	0006      	movs	r6, r0
    e638:	2d0c      	cmp	r5, #12
    e63a:	d21e      	bcs.n	e67a <_malloc_r+0x4e>
    e63c:	250c      	movs	r5, #12
    e63e:	42a9      	cmp	r1, r5
    e640:	d81d      	bhi.n	e67e <_malloc_r+0x52>
    e642:	0030      	movs	r0, r6
    e644:	f001 ffc1 	bl	105ca <__malloc_lock>
    e648:	4a25      	ldr	r2, [pc, #148]	; (e6e0 <_malloc_r+0xb4>)
    e64a:	6814      	ldr	r4, [r2, #0]
    e64c:	0021      	movs	r1, r4
    e64e:	2900      	cmp	r1, #0
    e650:	d119      	bne.n	e686 <_malloc_r+0x5a>
    e652:	4c24      	ldr	r4, [pc, #144]	; (e6e4 <_malloc_r+0xb8>)
    e654:	6823      	ldr	r3, [r4, #0]
    e656:	2b00      	cmp	r3, #0
    e658:	d103      	bne.n	e662 <_malloc_r+0x36>
    e65a:	0030      	movs	r0, r6
    e65c:	f000 fd4c 	bl	f0f8 <_sbrk_r>
    e660:	6020      	str	r0, [r4, #0]
    e662:	0029      	movs	r1, r5
    e664:	0030      	movs	r0, r6
    e666:	f000 fd47 	bl	f0f8 <_sbrk_r>
    e66a:	1c43      	adds	r3, r0, #1
    e66c:	d12c      	bne.n	e6c8 <_malloc_r+0x9c>
    e66e:	230c      	movs	r3, #12
    e670:	0030      	movs	r0, r6
    e672:	6033      	str	r3, [r6, #0]
    e674:	f001 ffaa 	bl	105cc <__malloc_unlock>
    e678:	e003      	b.n	e682 <_malloc_r+0x56>
    e67a:	2d00      	cmp	r5, #0
    e67c:	dadf      	bge.n	e63e <_malloc_r+0x12>
    e67e:	230c      	movs	r3, #12
    e680:	6033      	str	r3, [r6, #0]
    e682:	2000      	movs	r0, #0
    e684:	bd70      	pop	{r4, r5, r6, pc}
    e686:	680b      	ldr	r3, [r1, #0]
    e688:	1b5b      	subs	r3, r3, r5
    e68a:	d41a      	bmi.n	e6c2 <_malloc_r+0x96>
    e68c:	2b0b      	cmp	r3, #11
    e68e:	d903      	bls.n	e698 <_malloc_r+0x6c>
    e690:	600b      	str	r3, [r1, #0]
    e692:	18cc      	adds	r4, r1, r3
    e694:	6025      	str	r5, [r4, #0]
    e696:	e003      	b.n	e6a0 <_malloc_r+0x74>
    e698:	428c      	cmp	r4, r1
    e69a:	d10e      	bne.n	e6ba <_malloc_r+0x8e>
    e69c:	6863      	ldr	r3, [r4, #4]
    e69e:	6013      	str	r3, [r2, #0]
    e6a0:	0030      	movs	r0, r6
    e6a2:	f001 ff93 	bl	105cc <__malloc_unlock>
    e6a6:	0020      	movs	r0, r4
    e6a8:	2207      	movs	r2, #7
    e6aa:	300b      	adds	r0, #11
    e6ac:	1d23      	adds	r3, r4, #4
    e6ae:	4390      	bics	r0, r2
    e6b0:	1ac3      	subs	r3, r0, r3
    e6b2:	d0e7      	beq.n	e684 <_malloc_r+0x58>
    e6b4:	425a      	negs	r2, r3
    e6b6:	50e2      	str	r2, [r4, r3]
    e6b8:	e7e4      	b.n	e684 <_malloc_r+0x58>
    e6ba:	684b      	ldr	r3, [r1, #4]
    e6bc:	6063      	str	r3, [r4, #4]
    e6be:	000c      	movs	r4, r1
    e6c0:	e7ee      	b.n	e6a0 <_malloc_r+0x74>
    e6c2:	000c      	movs	r4, r1
    e6c4:	6849      	ldr	r1, [r1, #4]
    e6c6:	e7c2      	b.n	e64e <_malloc_r+0x22>
    e6c8:	2303      	movs	r3, #3
    e6ca:	1cc4      	adds	r4, r0, #3
    e6cc:	439c      	bics	r4, r3
    e6ce:	42a0      	cmp	r0, r4
    e6d0:	d0e0      	beq.n	e694 <_malloc_r+0x68>
    e6d2:	1a21      	subs	r1, r4, r0
    e6d4:	0030      	movs	r0, r6
    e6d6:	f000 fd0f 	bl	f0f8 <_sbrk_r>
    e6da:	1c43      	adds	r3, r0, #1
    e6dc:	d1da      	bne.n	e694 <_malloc_r+0x68>
    e6de:	e7c6      	b.n	e66e <_malloc_r+0x42>
    e6e0:	200002c4 	.word	0x200002c4
    e6e4:	200002c8 	.word	0x200002c8

0000e6e8 <__cvt>:
    e6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6ea:	b08b      	sub	sp, #44	; 0x2c
    e6ec:	0014      	movs	r4, r2
    e6ee:	1e1d      	subs	r5, r3, #0
    e6f0:	9912      	ldr	r1, [sp, #72]	; 0x48
    e6f2:	da53      	bge.n	e79c <__cvt+0xb4>
    e6f4:	2480      	movs	r4, #128	; 0x80
    e6f6:	0624      	lsls	r4, r4, #24
    e6f8:	191b      	adds	r3, r3, r4
    e6fa:	001d      	movs	r5, r3
    e6fc:	0014      	movs	r4, r2
    e6fe:	232d      	movs	r3, #45	; 0x2d
    e700:	700b      	strb	r3, [r1, #0]
    e702:	2320      	movs	r3, #32
    e704:	9e14      	ldr	r6, [sp, #80]	; 0x50
    e706:	2203      	movs	r2, #3
    e708:	439e      	bics	r6, r3
    e70a:	2e46      	cmp	r6, #70	; 0x46
    e70c:	d007      	beq.n	e71e <__cvt+0x36>
    e70e:	0033      	movs	r3, r6
    e710:	3b45      	subs	r3, #69	; 0x45
    e712:	4259      	negs	r1, r3
    e714:	414b      	adcs	r3, r1
    e716:	9910      	ldr	r1, [sp, #64]	; 0x40
    e718:	3a01      	subs	r2, #1
    e71a:	18cb      	adds	r3, r1, r3
    e71c:	9310      	str	r3, [sp, #64]	; 0x40
    e71e:	ab09      	add	r3, sp, #36	; 0x24
    e720:	9304      	str	r3, [sp, #16]
    e722:	ab08      	add	r3, sp, #32
    e724:	9303      	str	r3, [sp, #12]
    e726:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e728:	9200      	str	r2, [sp, #0]
    e72a:	9302      	str	r3, [sp, #8]
    e72c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e72e:	0022      	movs	r2, r4
    e730:	9301      	str	r3, [sp, #4]
    e732:	002b      	movs	r3, r5
    e734:	f000 ff50 	bl	f5d8 <_dtoa_r>
    e738:	0007      	movs	r7, r0
    e73a:	2e47      	cmp	r6, #71	; 0x47
    e73c:	d102      	bne.n	e744 <__cvt+0x5c>
    e73e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e740:	07db      	lsls	r3, r3, #31
    e742:	d524      	bpl.n	e78e <__cvt+0xa6>
    e744:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e746:	18fb      	adds	r3, r7, r3
    e748:	9307      	str	r3, [sp, #28]
    e74a:	2e46      	cmp	r6, #70	; 0x46
    e74c:	d114      	bne.n	e778 <__cvt+0x90>
    e74e:	783b      	ldrb	r3, [r7, #0]
    e750:	2b30      	cmp	r3, #48	; 0x30
    e752:	d10c      	bne.n	e76e <__cvt+0x86>
    e754:	2200      	movs	r2, #0
    e756:	2300      	movs	r3, #0
    e758:	0020      	movs	r0, r4
    e75a:	0029      	movs	r1, r5
    e75c:	f002 ff84 	bl	11668 <__aeabi_dcmpeq>
    e760:	2800      	cmp	r0, #0
    e762:	d104      	bne.n	e76e <__cvt+0x86>
    e764:	2301      	movs	r3, #1
    e766:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e768:	1a9b      	subs	r3, r3, r2
    e76a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e76c:	6013      	str	r3, [r2, #0]
    e76e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e770:	9a07      	ldr	r2, [sp, #28]
    e772:	681b      	ldr	r3, [r3, #0]
    e774:	18d3      	adds	r3, r2, r3
    e776:	9307      	str	r3, [sp, #28]
    e778:	2200      	movs	r2, #0
    e77a:	2300      	movs	r3, #0
    e77c:	0020      	movs	r0, r4
    e77e:	0029      	movs	r1, r5
    e780:	f002 ff72 	bl	11668 <__aeabi_dcmpeq>
    e784:	2230      	movs	r2, #48	; 0x30
    e786:	2800      	cmp	r0, #0
    e788:	d00d      	beq.n	e7a6 <__cvt+0xbe>
    e78a:	9b07      	ldr	r3, [sp, #28]
    e78c:	9309      	str	r3, [sp, #36]	; 0x24
    e78e:	0038      	movs	r0, r7
    e790:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e792:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e794:	1bdb      	subs	r3, r3, r7
    e796:	6013      	str	r3, [r2, #0]
    e798:	b00b      	add	sp, #44	; 0x2c
    e79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e79c:	2300      	movs	r3, #0
    e79e:	e7af      	b.n	e700 <__cvt+0x18>
    e7a0:	1c59      	adds	r1, r3, #1
    e7a2:	9109      	str	r1, [sp, #36]	; 0x24
    e7a4:	701a      	strb	r2, [r3, #0]
    e7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e7a8:	9907      	ldr	r1, [sp, #28]
    e7aa:	4299      	cmp	r1, r3
    e7ac:	d8f8      	bhi.n	e7a0 <__cvt+0xb8>
    e7ae:	e7ee      	b.n	e78e <__cvt+0xa6>

0000e7b0 <__exponent>:
    e7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7b2:	232b      	movs	r3, #43	; 0x2b
    e7b4:	b085      	sub	sp, #20
    e7b6:	0007      	movs	r7, r0
    e7b8:	000c      	movs	r4, r1
    e7ba:	7002      	strb	r2, [r0, #0]
    e7bc:	1c86      	adds	r6, r0, #2
    e7be:	2900      	cmp	r1, #0
    e7c0:	da01      	bge.n	e7c6 <__exponent+0x16>
    e7c2:	232d      	movs	r3, #45	; 0x2d
    e7c4:	424c      	negs	r4, r1
    e7c6:	707b      	strb	r3, [r7, #1]
    e7c8:	2c09      	cmp	r4, #9
    e7ca:	dd23      	ble.n	e814 <__exponent+0x64>
    e7cc:	ab02      	add	r3, sp, #8
    e7ce:	1ddd      	adds	r5, r3, #7
    e7d0:	1e6b      	subs	r3, r5, #1
    e7d2:	0020      	movs	r0, r4
    e7d4:	210a      	movs	r1, #10
    e7d6:	9301      	str	r3, [sp, #4]
    e7d8:	f002 ff30 	bl	1163c <__aeabi_idivmod>
    e7dc:	1e6b      	subs	r3, r5, #1
    e7de:	3130      	adds	r1, #48	; 0x30
    e7e0:	7019      	strb	r1, [r3, #0]
    e7e2:	0020      	movs	r0, r4
    e7e4:	210a      	movs	r1, #10
    e7e6:	f002 fe43 	bl	11470 <__divsi3>
    e7ea:	0004      	movs	r4, r0
    e7ec:	2809      	cmp	r0, #9
    e7ee:	dc0a      	bgt.n	e806 <__exponent+0x56>
    e7f0:	3d02      	subs	r5, #2
    e7f2:	3430      	adds	r4, #48	; 0x30
    e7f4:	702c      	strb	r4, [r5, #0]
    e7f6:	ab02      	add	r3, sp, #8
    e7f8:	3307      	adds	r3, #7
    e7fa:	0030      	movs	r0, r6
    e7fc:	42ab      	cmp	r3, r5
    e7fe:	d804      	bhi.n	e80a <__exponent+0x5a>
    e800:	1bc0      	subs	r0, r0, r7
    e802:	b005      	add	sp, #20
    e804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e806:	9d01      	ldr	r5, [sp, #4]
    e808:	e7e2      	b.n	e7d0 <__exponent+0x20>
    e80a:	782b      	ldrb	r3, [r5, #0]
    e80c:	3501      	adds	r5, #1
    e80e:	7033      	strb	r3, [r6, #0]
    e810:	3601      	adds	r6, #1
    e812:	e7f0      	b.n	e7f6 <__exponent+0x46>
    e814:	2330      	movs	r3, #48	; 0x30
    e816:	18e4      	adds	r4, r4, r3
    e818:	7033      	strb	r3, [r6, #0]
    e81a:	1cb0      	adds	r0, r6, #2
    e81c:	7074      	strb	r4, [r6, #1]
    e81e:	e7ef      	b.n	e800 <__exponent+0x50>

0000e820 <_printf_float>:
    e820:	b5f0      	push	{r4, r5, r6, r7, lr}
    e822:	b095      	sub	sp, #84	; 0x54
    e824:	000c      	movs	r4, r1
    e826:	920a      	str	r2, [sp, #40]	; 0x28
    e828:	930b      	str	r3, [sp, #44]	; 0x2c
    e82a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    e82c:	9009      	str	r0, [sp, #36]	; 0x24
    e82e:	f001 fe49 	bl	104c4 <_localeconv_r>
    e832:	6803      	ldr	r3, [r0, #0]
    e834:	0018      	movs	r0, r3
    e836:	930d      	str	r3, [sp, #52]	; 0x34
    e838:	f000 fd5a 	bl	f2f0 <strlen>
    e83c:	2300      	movs	r3, #0
    e83e:	9312      	str	r3, [sp, #72]	; 0x48
    e840:	6823      	ldr	r3, [r4, #0]
    e842:	900e      	str	r0, [sp, #56]	; 0x38
    e844:	930c      	str	r3, [sp, #48]	; 0x30
    e846:	990c      	ldr	r1, [sp, #48]	; 0x30
    e848:	7e27      	ldrb	r7, [r4, #24]
    e84a:	682b      	ldr	r3, [r5, #0]
    e84c:	2207      	movs	r2, #7
    e84e:	05c9      	lsls	r1, r1, #23
    e850:	d547      	bpl.n	e8e2 <_printf_float+0xc2>
    e852:	189b      	adds	r3, r3, r2
    e854:	4393      	bics	r3, r2
    e856:	001a      	movs	r2, r3
    e858:	3208      	adds	r2, #8
    e85a:	602a      	str	r2, [r5, #0]
    e85c:	681a      	ldr	r2, [r3, #0]
    e85e:	685b      	ldr	r3, [r3, #4]
    e860:	64a2      	str	r2, [r4, #72]	; 0x48
    e862:	64e3      	str	r3, [r4, #76]	; 0x4c
    e864:	2201      	movs	r2, #1
    e866:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    e868:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    e86a:	006b      	lsls	r3, r5, #1
    e86c:	085b      	lsrs	r3, r3, #1
    e86e:	930f      	str	r3, [sp, #60]	; 0x3c
    e870:	4252      	negs	r2, r2
    e872:	4ba7      	ldr	r3, [pc, #668]	; (eb10 <_printf_float+0x2f0>)
    e874:	0030      	movs	r0, r6
    e876:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e878:	f004 fee0 	bl	1363c <__aeabi_dcmpun>
    e87c:	2800      	cmp	r0, #0
    e87e:	d000      	beq.n	e882 <_printf_float+0x62>
    e880:	e206      	b.n	ec90 <_printf_float+0x470>
    e882:	2201      	movs	r2, #1
    e884:	4ba2      	ldr	r3, [pc, #648]	; (eb10 <_printf_float+0x2f0>)
    e886:	4252      	negs	r2, r2
    e888:	0030      	movs	r0, r6
    e88a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e88c:	f002 fefc 	bl	11688 <__aeabi_dcmple>
    e890:	2800      	cmp	r0, #0
    e892:	d000      	beq.n	e896 <_printf_float+0x76>
    e894:	e1fc      	b.n	ec90 <_printf_float+0x470>
    e896:	2200      	movs	r2, #0
    e898:	2300      	movs	r3, #0
    e89a:	0030      	movs	r0, r6
    e89c:	0029      	movs	r1, r5
    e89e:	f002 fee9 	bl	11674 <__aeabi_dcmplt>
    e8a2:	2800      	cmp	r0, #0
    e8a4:	d003      	beq.n	e8ae <_printf_float+0x8e>
    e8a6:	0023      	movs	r3, r4
    e8a8:	222d      	movs	r2, #45	; 0x2d
    e8aa:	3343      	adds	r3, #67	; 0x43
    e8ac:	701a      	strb	r2, [r3, #0]
    e8ae:	4d99      	ldr	r5, [pc, #612]	; (eb14 <_printf_float+0x2f4>)
    e8b0:	2f47      	cmp	r7, #71	; 0x47
    e8b2:	d800      	bhi.n	e8b6 <_printf_float+0x96>
    e8b4:	4d98      	ldr	r5, [pc, #608]	; (eb18 <_printf_float+0x2f8>)
    e8b6:	2303      	movs	r3, #3
    e8b8:	2600      	movs	r6, #0
    e8ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e8bc:	6123      	str	r3, [r4, #16]
    e8be:	3301      	adds	r3, #1
    e8c0:	439a      	bics	r2, r3
    e8c2:	6022      	str	r2, [r4, #0]
    e8c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8c6:	aa13      	add	r2, sp, #76	; 0x4c
    e8c8:	9300      	str	r3, [sp, #0]
    e8ca:	0021      	movs	r1, r4
    e8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e8ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    e8d0:	f000 f9f2 	bl	ecb8 <_printf_common>
    e8d4:	1c43      	adds	r3, r0, #1
    e8d6:	d000      	beq.n	e8da <_printf_float+0xba>
    e8d8:	e09c      	b.n	ea14 <_printf_float+0x1f4>
    e8da:	2001      	movs	r0, #1
    e8dc:	4240      	negs	r0, r0
    e8de:	b015      	add	sp, #84	; 0x54
    e8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8e2:	3307      	adds	r3, #7
    e8e4:	e7b6      	b.n	e854 <_printf_float+0x34>
    e8e6:	2380      	movs	r3, #128	; 0x80
    e8e8:	6862      	ldr	r2, [r4, #4]
    e8ea:	00db      	lsls	r3, r3, #3
    e8ec:	1c51      	adds	r1, r2, #1
    e8ee:	d145      	bne.n	e97c <_printf_float+0x15c>
    e8f0:	3207      	adds	r2, #7
    e8f2:	6062      	str	r2, [r4, #4]
    e8f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e8f6:	2100      	movs	r1, #0
    e8f8:	4313      	orrs	r3, r2
    e8fa:	aa12      	add	r2, sp, #72	; 0x48
    e8fc:	9205      	str	r2, [sp, #20]
    e8fe:	aa11      	add	r2, sp, #68	; 0x44
    e900:	9203      	str	r2, [sp, #12]
    e902:	2223      	movs	r2, #35	; 0x23
    e904:	6023      	str	r3, [r4, #0]
    e906:	9106      	str	r1, [sp, #24]
    e908:	9301      	str	r3, [sp, #4]
    e90a:	a908      	add	r1, sp, #32
    e90c:	6863      	ldr	r3, [r4, #4]
    e90e:	1852      	adds	r2, r2, r1
    e910:	9202      	str	r2, [sp, #8]
    e912:	9300      	str	r3, [sp, #0]
    e914:	0032      	movs	r2, r6
    e916:	002b      	movs	r3, r5
    e918:	9704      	str	r7, [sp, #16]
    e91a:	9809      	ldr	r0, [sp, #36]	; 0x24
    e91c:	f7ff fee4 	bl	e6e8 <__cvt>
    e920:	2320      	movs	r3, #32
    e922:	003a      	movs	r2, r7
    e924:	0005      	movs	r5, r0
    e926:	439a      	bics	r2, r3
    e928:	2a47      	cmp	r2, #71	; 0x47
    e92a:	d107      	bne.n	e93c <_printf_float+0x11c>
    e92c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e92e:	1cda      	adds	r2, r3, #3
    e930:	db02      	blt.n	e938 <_printf_float+0x118>
    e932:	6862      	ldr	r2, [r4, #4]
    e934:	4293      	cmp	r3, r2
    e936:	dd5b      	ble.n	e9f0 <_printf_float+0x1d0>
    e938:	3f02      	subs	r7, #2
    e93a:	b2ff      	uxtb	r7, r7
    e93c:	9911      	ldr	r1, [sp, #68]	; 0x44
    e93e:	2f65      	cmp	r7, #101	; 0x65
    e940:	d83b      	bhi.n	e9ba <_printf_float+0x19a>
    e942:	0020      	movs	r0, r4
    e944:	3901      	subs	r1, #1
    e946:	003a      	movs	r2, r7
    e948:	3050      	adds	r0, #80	; 0x50
    e94a:	9111      	str	r1, [sp, #68]	; 0x44
    e94c:	f7ff ff30 	bl	e7b0 <__exponent>
    e950:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e952:	0006      	movs	r6, r0
    e954:	1883      	adds	r3, r0, r2
    e956:	6123      	str	r3, [r4, #16]
    e958:	2a01      	cmp	r2, #1
    e95a:	dc02      	bgt.n	e962 <_printf_float+0x142>
    e95c:	6822      	ldr	r2, [r4, #0]
    e95e:	07d2      	lsls	r2, r2, #31
    e960:	d501      	bpl.n	e966 <_printf_float+0x146>
    e962:	3301      	adds	r3, #1
    e964:	6123      	str	r3, [r4, #16]
    e966:	2323      	movs	r3, #35	; 0x23
    e968:	aa08      	add	r2, sp, #32
    e96a:	189b      	adds	r3, r3, r2
    e96c:	781b      	ldrb	r3, [r3, #0]
    e96e:	2b00      	cmp	r3, #0
    e970:	d0a8      	beq.n	e8c4 <_printf_float+0xa4>
    e972:	0023      	movs	r3, r4
    e974:	222d      	movs	r2, #45	; 0x2d
    e976:	3343      	adds	r3, #67	; 0x43
    e978:	701a      	strb	r2, [r3, #0]
    e97a:	e7a3      	b.n	e8c4 <_printf_float+0xa4>
    e97c:	2f67      	cmp	r7, #103	; 0x67
    e97e:	d001      	beq.n	e984 <_printf_float+0x164>
    e980:	2f47      	cmp	r7, #71	; 0x47
    e982:	d1b7      	bne.n	e8f4 <_printf_float+0xd4>
    e984:	2a00      	cmp	r2, #0
    e986:	d016      	beq.n	e9b6 <_printf_float+0x196>
    e988:	990c      	ldr	r1, [sp, #48]	; 0x30
    e98a:	a808      	add	r0, sp, #32
    e98c:	430b      	orrs	r3, r1
    e98e:	2100      	movs	r1, #0
    e990:	9106      	str	r1, [sp, #24]
    e992:	a912      	add	r1, sp, #72	; 0x48
    e994:	9105      	str	r1, [sp, #20]
    e996:	a911      	add	r1, sp, #68	; 0x44
    e998:	9103      	str	r1, [sp, #12]
    e99a:	2123      	movs	r1, #35	; 0x23
    e99c:	1809      	adds	r1, r1, r0
    e99e:	6023      	str	r3, [r4, #0]
    e9a0:	9301      	str	r3, [sp, #4]
    e9a2:	9200      	str	r2, [sp, #0]
    e9a4:	002b      	movs	r3, r5
    e9a6:	9704      	str	r7, [sp, #16]
    e9a8:	9102      	str	r1, [sp, #8]
    e9aa:	0032      	movs	r2, r6
    e9ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    e9ae:	f7ff fe9b 	bl	e6e8 <__cvt>
    e9b2:	0005      	movs	r5, r0
    e9b4:	e7ba      	b.n	e92c <_printf_float+0x10c>
    e9b6:	2201      	movs	r2, #1
    e9b8:	e79b      	b.n	e8f2 <_printf_float+0xd2>
    e9ba:	2f66      	cmp	r7, #102	; 0x66
    e9bc:	d119      	bne.n	e9f2 <_printf_float+0x1d2>
    e9be:	6863      	ldr	r3, [r4, #4]
    e9c0:	2900      	cmp	r1, #0
    e9c2:	dd0c      	ble.n	e9de <_printf_float+0x1be>
    e9c4:	6121      	str	r1, [r4, #16]
    e9c6:	2b00      	cmp	r3, #0
    e9c8:	d102      	bne.n	e9d0 <_printf_float+0x1b0>
    e9ca:	6822      	ldr	r2, [r4, #0]
    e9cc:	07d2      	lsls	r2, r2, #31
    e9ce:	d502      	bpl.n	e9d6 <_printf_float+0x1b6>
    e9d0:	3301      	adds	r3, #1
    e9d2:	185b      	adds	r3, r3, r1
    e9d4:	6123      	str	r3, [r4, #16]
    e9d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e9d8:	2600      	movs	r6, #0
    e9da:	65a3      	str	r3, [r4, #88]	; 0x58
    e9dc:	e7c3      	b.n	e966 <_printf_float+0x146>
    e9de:	2b00      	cmp	r3, #0
    e9e0:	d103      	bne.n	e9ea <_printf_float+0x1ca>
    e9e2:	2201      	movs	r2, #1
    e9e4:	6821      	ldr	r1, [r4, #0]
    e9e6:	4211      	tst	r1, r2
    e9e8:	d000      	beq.n	e9ec <_printf_float+0x1cc>
    e9ea:	1c9a      	adds	r2, r3, #2
    e9ec:	6122      	str	r2, [r4, #16]
    e9ee:	e7f2      	b.n	e9d6 <_printf_float+0x1b6>
    e9f0:	2767      	movs	r7, #103	; 0x67
    e9f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e9f4:	9812      	ldr	r0, [sp, #72]	; 0x48
    e9f6:	4283      	cmp	r3, r0
    e9f8:	db05      	blt.n	ea06 <_printf_float+0x1e6>
    e9fa:	6822      	ldr	r2, [r4, #0]
    e9fc:	6123      	str	r3, [r4, #16]
    e9fe:	07d2      	lsls	r2, r2, #31
    ea00:	d5e9      	bpl.n	e9d6 <_printf_float+0x1b6>
    ea02:	3301      	adds	r3, #1
    ea04:	e7e6      	b.n	e9d4 <_printf_float+0x1b4>
    ea06:	2201      	movs	r2, #1
    ea08:	2b00      	cmp	r3, #0
    ea0a:	dc01      	bgt.n	ea10 <_printf_float+0x1f0>
    ea0c:	1892      	adds	r2, r2, r2
    ea0e:	1ad2      	subs	r2, r2, r3
    ea10:	1812      	adds	r2, r2, r0
    ea12:	e7eb      	b.n	e9ec <_printf_float+0x1cc>
    ea14:	6822      	ldr	r2, [r4, #0]
    ea16:	0553      	lsls	r3, r2, #21
    ea18:	d408      	bmi.n	ea2c <_printf_float+0x20c>
    ea1a:	6923      	ldr	r3, [r4, #16]
    ea1c:	002a      	movs	r2, r5
    ea1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ea20:	9809      	ldr	r0, [sp, #36]	; 0x24
    ea22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ea24:	47a8      	blx	r5
    ea26:	1c43      	adds	r3, r0, #1
    ea28:	d129      	bne.n	ea7e <_printf_float+0x25e>
    ea2a:	e756      	b.n	e8da <_printf_float+0xba>
    ea2c:	2f65      	cmp	r7, #101	; 0x65
    ea2e:	d800      	bhi.n	ea32 <_printf_float+0x212>
    ea30:	e0dc      	b.n	ebec <_printf_float+0x3cc>
    ea32:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ea34:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ea36:	2200      	movs	r2, #0
    ea38:	2300      	movs	r3, #0
    ea3a:	f002 fe15 	bl	11668 <__aeabi_dcmpeq>
    ea3e:	2800      	cmp	r0, #0
    ea40:	d035      	beq.n	eaae <_printf_float+0x28e>
    ea42:	2301      	movs	r3, #1
    ea44:	4a35      	ldr	r2, [pc, #212]	; (eb1c <_printf_float+0x2fc>)
    ea46:	990a      	ldr	r1, [sp, #40]	; 0x28
    ea48:	9809      	ldr	r0, [sp, #36]	; 0x24
    ea4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ea4c:	47a8      	blx	r5
    ea4e:	1c43      	adds	r3, r0, #1
    ea50:	d100      	bne.n	ea54 <_printf_float+0x234>
    ea52:	e742      	b.n	e8da <_printf_float+0xba>
    ea54:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ea56:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ea58:	4293      	cmp	r3, r2
    ea5a:	db02      	blt.n	ea62 <_printf_float+0x242>
    ea5c:	6823      	ldr	r3, [r4, #0]
    ea5e:	07db      	lsls	r3, r3, #31
    ea60:	d50d      	bpl.n	ea7e <_printf_float+0x25e>
    ea62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ea64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ea68:	990a      	ldr	r1, [sp, #40]	; 0x28
    ea6a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ea6c:	47a8      	blx	r5
    ea6e:	2500      	movs	r5, #0
    ea70:	1c43      	adds	r3, r0, #1
    ea72:	d100      	bne.n	ea76 <_printf_float+0x256>
    ea74:	e731      	b.n	e8da <_printf_float+0xba>
    ea76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ea78:	3b01      	subs	r3, #1
    ea7a:	429d      	cmp	r5, r3
    ea7c:	db0b      	blt.n	ea96 <_printf_float+0x276>
    ea7e:	6823      	ldr	r3, [r4, #0]
    ea80:	2500      	movs	r5, #0
    ea82:	079b      	lsls	r3, r3, #30
    ea84:	d500      	bpl.n	ea88 <_printf_float+0x268>
    ea86:	e0fd      	b.n	ec84 <_printf_float+0x464>
    ea88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ea8a:	68e0      	ldr	r0, [r4, #12]
    ea8c:	4298      	cmp	r0, r3
    ea8e:	db00      	blt.n	ea92 <_printf_float+0x272>
    ea90:	e725      	b.n	e8de <_printf_float+0xbe>
    ea92:	0018      	movs	r0, r3
    ea94:	e723      	b.n	e8de <_printf_float+0xbe>
    ea96:	0022      	movs	r2, r4
    ea98:	2301      	movs	r3, #1
    ea9a:	321a      	adds	r2, #26
    ea9c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ea9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    eaa0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    eaa2:	47b0      	blx	r6
    eaa4:	1c43      	adds	r3, r0, #1
    eaa6:	d100      	bne.n	eaaa <_printf_float+0x28a>
    eaa8:	e717      	b.n	e8da <_printf_float+0xba>
    eaaa:	3501      	adds	r5, #1
    eaac:	e7e3      	b.n	ea76 <_printf_float+0x256>
    eaae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eab0:	2b00      	cmp	r3, #0
    eab2:	dc35      	bgt.n	eb20 <_printf_float+0x300>
    eab4:	2301      	movs	r3, #1
    eab6:	4a19      	ldr	r2, [pc, #100]	; (eb1c <_printf_float+0x2fc>)
    eab8:	990a      	ldr	r1, [sp, #40]	; 0x28
    eaba:	9809      	ldr	r0, [sp, #36]	; 0x24
    eabc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    eabe:	47b0      	blx	r6
    eac0:	1c43      	adds	r3, r0, #1
    eac2:	d100      	bne.n	eac6 <_printf_float+0x2a6>
    eac4:	e709      	b.n	e8da <_printf_float+0xba>
    eac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eac8:	2b00      	cmp	r3, #0
    eaca:	d105      	bne.n	ead8 <_printf_float+0x2b8>
    eacc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eace:	2b00      	cmp	r3, #0
    ead0:	d102      	bne.n	ead8 <_printf_float+0x2b8>
    ead2:	6823      	ldr	r3, [r4, #0]
    ead4:	07db      	lsls	r3, r3, #31
    ead6:	d5d2      	bpl.n	ea7e <_printf_float+0x25e>
    ead8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    eada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eadc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    eade:	990a      	ldr	r1, [sp, #40]	; 0x28
    eae0:	9809      	ldr	r0, [sp, #36]	; 0x24
    eae2:	47b0      	blx	r6
    eae4:	2600      	movs	r6, #0
    eae6:	1c43      	adds	r3, r0, #1
    eae8:	d100      	bne.n	eaec <_printf_float+0x2cc>
    eaea:	e6f6      	b.n	e8da <_printf_float+0xba>
    eaec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eaee:	425b      	negs	r3, r3
    eaf0:	429e      	cmp	r6, r3
    eaf2:	db01      	blt.n	eaf8 <_printf_float+0x2d8>
    eaf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eaf6:	e791      	b.n	ea1c <_printf_float+0x1fc>
    eaf8:	0022      	movs	r2, r4
    eafa:	2301      	movs	r3, #1
    eafc:	321a      	adds	r2, #26
    eafe:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb00:	9809      	ldr	r0, [sp, #36]	; 0x24
    eb02:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    eb04:	47b8      	blx	r7
    eb06:	1c43      	adds	r3, r0, #1
    eb08:	d100      	bne.n	eb0c <_printf_float+0x2ec>
    eb0a:	e6e6      	b.n	e8da <_printf_float+0xba>
    eb0c:	3601      	adds	r6, #1
    eb0e:	e7ed      	b.n	eaec <_printf_float+0x2cc>
    eb10:	7fefffff 	.word	0x7fefffff
    eb14:	00014faa 	.word	0x00014faa
    eb18:	00014fa6 	.word	0x00014fa6
    eb1c:	00014fb6 	.word	0x00014fb6
    eb20:	6da3      	ldr	r3, [r4, #88]	; 0x58
    eb22:	9e12      	ldr	r6, [sp, #72]	; 0x48
    eb24:	429e      	cmp	r6, r3
    eb26:	dd00      	ble.n	eb2a <_printf_float+0x30a>
    eb28:	001e      	movs	r6, r3
    eb2a:	2e00      	cmp	r6, #0
    eb2c:	dc35      	bgt.n	eb9a <_printf_float+0x37a>
    eb2e:	2300      	movs	r3, #0
    eb30:	930c      	str	r3, [sp, #48]	; 0x30
    eb32:	43f3      	mvns	r3, r6
    eb34:	17db      	asrs	r3, r3, #31
    eb36:	930f      	str	r3, [sp, #60]	; 0x3c
    eb38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eb3a:	6da7      	ldr	r7, [r4, #88]	; 0x58
    eb3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    eb3e:	4033      	ands	r3, r6
    eb40:	1afb      	subs	r3, r7, r3
    eb42:	429a      	cmp	r2, r3
    eb44:	db32      	blt.n	ebac <_printf_float+0x38c>
    eb46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eb48:	9a12      	ldr	r2, [sp, #72]	; 0x48
    eb4a:	4293      	cmp	r3, r2
    eb4c:	db3c      	blt.n	ebc8 <_printf_float+0x3a8>
    eb4e:	6823      	ldr	r3, [r4, #0]
    eb50:	07db      	lsls	r3, r3, #31
    eb52:	d439      	bmi.n	ebc8 <_printf_float+0x3a8>
    eb54:	9e12      	ldr	r6, [sp, #72]	; 0x48
    eb56:	9a11      	ldr	r2, [sp, #68]	; 0x44
    eb58:	1bf3      	subs	r3, r6, r7
    eb5a:	1ab6      	subs	r6, r6, r2
    eb5c:	429e      	cmp	r6, r3
    eb5e:	dd00      	ble.n	eb62 <_printf_float+0x342>
    eb60:	001e      	movs	r6, r3
    eb62:	2e00      	cmp	r6, #0
    eb64:	dc39      	bgt.n	ebda <_printf_float+0x3ba>
    eb66:	43f7      	mvns	r7, r6
    eb68:	2500      	movs	r5, #0
    eb6a:	17fb      	asrs	r3, r7, #31
    eb6c:	930c      	str	r3, [sp, #48]	; 0x30
    eb6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    eb70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb72:	990c      	ldr	r1, [sp, #48]	; 0x30
    eb74:	1a9b      	subs	r3, r3, r2
    eb76:	0032      	movs	r2, r6
    eb78:	400a      	ands	r2, r1
    eb7a:	1a9b      	subs	r3, r3, r2
    eb7c:	429d      	cmp	r5, r3
    eb7e:	db00      	blt.n	eb82 <_printf_float+0x362>
    eb80:	e77d      	b.n	ea7e <_printf_float+0x25e>
    eb82:	0022      	movs	r2, r4
    eb84:	2301      	movs	r3, #1
    eb86:	321a      	adds	r2, #26
    eb88:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    eb8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    eb8e:	47b8      	blx	r7
    eb90:	1c43      	adds	r3, r0, #1
    eb92:	d100      	bne.n	eb96 <_printf_float+0x376>
    eb94:	e6a1      	b.n	e8da <_printf_float+0xba>
    eb96:	3501      	adds	r5, #1
    eb98:	e7e9      	b.n	eb6e <_printf_float+0x34e>
    eb9a:	0033      	movs	r3, r6
    eb9c:	002a      	movs	r2, r5
    eb9e:	990a      	ldr	r1, [sp, #40]	; 0x28
    eba0:	9809      	ldr	r0, [sp, #36]	; 0x24
    eba2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    eba4:	47b8      	blx	r7
    eba6:	1c43      	adds	r3, r0, #1
    eba8:	d1c1      	bne.n	eb2e <_printf_float+0x30e>
    ebaa:	e696      	b.n	e8da <_printf_float+0xba>
    ebac:	0022      	movs	r2, r4
    ebae:	2301      	movs	r3, #1
    ebb0:	321a      	adds	r2, #26
    ebb2:	990a      	ldr	r1, [sp, #40]	; 0x28
    ebb4:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebb6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ebb8:	47b8      	blx	r7
    ebba:	1c43      	adds	r3, r0, #1
    ebbc:	d100      	bne.n	ebc0 <_printf_float+0x3a0>
    ebbe:	e68c      	b.n	e8da <_printf_float+0xba>
    ebc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ebc2:	3301      	adds	r3, #1
    ebc4:	930c      	str	r3, [sp, #48]	; 0x30
    ebc6:	e7b7      	b.n	eb38 <_printf_float+0x318>
    ebc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ebca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ebcc:	990a      	ldr	r1, [sp, #40]	; 0x28
    ebce:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebd0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ebd2:	47b0      	blx	r6
    ebd4:	1c43      	adds	r3, r0, #1
    ebd6:	d1bd      	bne.n	eb54 <_printf_float+0x334>
    ebd8:	e67f      	b.n	e8da <_printf_float+0xba>
    ebda:	19ea      	adds	r2, r5, r7
    ebdc:	0033      	movs	r3, r6
    ebde:	990a      	ldr	r1, [sp, #40]	; 0x28
    ebe0:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebe2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ebe4:	47a8      	blx	r5
    ebe6:	1c43      	adds	r3, r0, #1
    ebe8:	d1bd      	bne.n	eb66 <_printf_float+0x346>
    ebea:	e676      	b.n	e8da <_printf_float+0xba>
    ebec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ebee:	2b01      	cmp	r3, #1
    ebf0:	dc02      	bgt.n	ebf8 <_printf_float+0x3d8>
    ebf2:	2301      	movs	r3, #1
    ebf4:	421a      	tst	r2, r3
    ebf6:	d038      	beq.n	ec6a <_printf_float+0x44a>
    ebf8:	2301      	movs	r3, #1
    ebfa:	002a      	movs	r2, r5
    ebfc:	990a      	ldr	r1, [sp, #40]	; 0x28
    ebfe:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec00:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ec02:	47b8      	blx	r7
    ec04:	1c43      	adds	r3, r0, #1
    ec06:	d100      	bne.n	ec0a <_printf_float+0x3ea>
    ec08:	e667      	b.n	e8da <_printf_float+0xba>
    ec0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ec0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ec0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ec10:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ec14:	47b8      	blx	r7
    ec16:	1c43      	adds	r3, r0, #1
    ec18:	d100      	bne.n	ec1c <_printf_float+0x3fc>
    ec1a:	e65e      	b.n	e8da <_printf_float+0xba>
    ec1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ec1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ec20:	2200      	movs	r2, #0
    ec22:	2300      	movs	r3, #0
    ec24:	f002 fd20 	bl	11668 <__aeabi_dcmpeq>
    ec28:	2800      	cmp	r0, #0
    ec2a:	d008      	beq.n	ec3e <_printf_float+0x41e>
    ec2c:	2500      	movs	r5, #0
    ec2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ec30:	3b01      	subs	r3, #1
    ec32:	429d      	cmp	r5, r3
    ec34:	db0d      	blt.n	ec52 <_printf_float+0x432>
    ec36:	0022      	movs	r2, r4
    ec38:	0033      	movs	r3, r6
    ec3a:	3250      	adds	r2, #80	; 0x50
    ec3c:	e6ef      	b.n	ea1e <_printf_float+0x1fe>
    ec3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ec40:	1c6a      	adds	r2, r5, #1
    ec42:	3b01      	subs	r3, #1
    ec44:	990a      	ldr	r1, [sp, #40]	; 0x28
    ec46:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ec4a:	47a8      	blx	r5
    ec4c:	1c43      	adds	r3, r0, #1
    ec4e:	d1f2      	bne.n	ec36 <_printf_float+0x416>
    ec50:	e643      	b.n	e8da <_printf_float+0xba>
    ec52:	0022      	movs	r2, r4
    ec54:	2301      	movs	r3, #1
    ec56:	321a      	adds	r2, #26
    ec58:	990a      	ldr	r1, [sp, #40]	; 0x28
    ec5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec5c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ec5e:	47b8      	blx	r7
    ec60:	1c43      	adds	r3, r0, #1
    ec62:	d100      	bne.n	ec66 <_printf_float+0x446>
    ec64:	e639      	b.n	e8da <_printf_float+0xba>
    ec66:	3501      	adds	r5, #1
    ec68:	e7e1      	b.n	ec2e <_printf_float+0x40e>
    ec6a:	002a      	movs	r2, r5
    ec6c:	e7ea      	b.n	ec44 <_printf_float+0x424>
    ec6e:	0022      	movs	r2, r4
    ec70:	2301      	movs	r3, #1
    ec72:	3219      	adds	r2, #25
    ec74:	990a      	ldr	r1, [sp, #40]	; 0x28
    ec76:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ec7a:	47b0      	blx	r6
    ec7c:	1c43      	adds	r3, r0, #1
    ec7e:	d100      	bne.n	ec82 <_printf_float+0x462>
    ec80:	e62b      	b.n	e8da <_printf_float+0xba>
    ec82:	3501      	adds	r5, #1
    ec84:	68e3      	ldr	r3, [r4, #12]
    ec86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ec88:	1a9b      	subs	r3, r3, r2
    ec8a:	429d      	cmp	r5, r3
    ec8c:	dbef      	blt.n	ec6e <_printf_float+0x44e>
    ec8e:	e6fb      	b.n	ea88 <_printf_float+0x268>
    ec90:	0032      	movs	r2, r6
    ec92:	002b      	movs	r3, r5
    ec94:	0030      	movs	r0, r6
    ec96:	0029      	movs	r1, r5
    ec98:	f004 fcd0 	bl	1363c <__aeabi_dcmpun>
    ec9c:	2800      	cmp	r0, #0
    ec9e:	d100      	bne.n	eca2 <_printf_float+0x482>
    eca0:	e621      	b.n	e8e6 <_printf_float+0xc6>
    eca2:	4d03      	ldr	r5, [pc, #12]	; (ecb0 <_printf_float+0x490>)
    eca4:	2f47      	cmp	r7, #71	; 0x47
    eca6:	d900      	bls.n	ecaa <_printf_float+0x48a>
    eca8:	e605      	b.n	e8b6 <_printf_float+0x96>
    ecaa:	4d02      	ldr	r5, [pc, #8]	; (ecb4 <_printf_float+0x494>)
    ecac:	e603      	b.n	e8b6 <_printf_float+0x96>
    ecae:	46c0      	nop			; (mov r8, r8)
    ecb0:	00014fb2 	.word	0x00014fb2
    ecb4:	00014fae 	.word	0x00014fae

0000ecb8 <_printf_common>:
    ecb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ecba:	0015      	movs	r5, r2
    ecbc:	9301      	str	r3, [sp, #4]
    ecbe:	688a      	ldr	r2, [r1, #8]
    ecc0:	690b      	ldr	r3, [r1, #16]
    ecc2:	9000      	str	r0, [sp, #0]
    ecc4:	000c      	movs	r4, r1
    ecc6:	4293      	cmp	r3, r2
    ecc8:	da00      	bge.n	eccc <_printf_common+0x14>
    ecca:	0013      	movs	r3, r2
    eccc:	0022      	movs	r2, r4
    ecce:	602b      	str	r3, [r5, #0]
    ecd0:	3243      	adds	r2, #67	; 0x43
    ecd2:	7812      	ldrb	r2, [r2, #0]
    ecd4:	2a00      	cmp	r2, #0
    ecd6:	d001      	beq.n	ecdc <_printf_common+0x24>
    ecd8:	3301      	adds	r3, #1
    ecda:	602b      	str	r3, [r5, #0]
    ecdc:	6823      	ldr	r3, [r4, #0]
    ecde:	069b      	lsls	r3, r3, #26
    ece0:	d502      	bpl.n	ece8 <_printf_common+0x30>
    ece2:	682b      	ldr	r3, [r5, #0]
    ece4:	3302      	adds	r3, #2
    ece6:	602b      	str	r3, [r5, #0]
    ece8:	2706      	movs	r7, #6
    ecea:	6823      	ldr	r3, [r4, #0]
    ecec:	401f      	ands	r7, r3
    ecee:	d027      	beq.n	ed40 <_printf_common+0x88>
    ecf0:	0023      	movs	r3, r4
    ecf2:	3343      	adds	r3, #67	; 0x43
    ecf4:	781b      	ldrb	r3, [r3, #0]
    ecf6:	1e5a      	subs	r2, r3, #1
    ecf8:	4193      	sbcs	r3, r2
    ecfa:	6822      	ldr	r2, [r4, #0]
    ecfc:	0692      	lsls	r2, r2, #26
    ecfe:	d430      	bmi.n	ed62 <_printf_common+0xaa>
    ed00:	0022      	movs	r2, r4
    ed02:	9901      	ldr	r1, [sp, #4]
    ed04:	3243      	adds	r2, #67	; 0x43
    ed06:	9800      	ldr	r0, [sp, #0]
    ed08:	9e08      	ldr	r6, [sp, #32]
    ed0a:	47b0      	blx	r6
    ed0c:	1c43      	adds	r3, r0, #1
    ed0e:	d025      	beq.n	ed5c <_printf_common+0xa4>
    ed10:	2306      	movs	r3, #6
    ed12:	6820      	ldr	r0, [r4, #0]
    ed14:	682a      	ldr	r2, [r5, #0]
    ed16:	68e1      	ldr	r1, [r4, #12]
    ed18:	4003      	ands	r3, r0
    ed1a:	2500      	movs	r5, #0
    ed1c:	2b04      	cmp	r3, #4
    ed1e:	d103      	bne.n	ed28 <_printf_common+0x70>
    ed20:	1a8d      	subs	r5, r1, r2
    ed22:	43eb      	mvns	r3, r5
    ed24:	17db      	asrs	r3, r3, #31
    ed26:	401d      	ands	r5, r3
    ed28:	68a3      	ldr	r3, [r4, #8]
    ed2a:	6922      	ldr	r2, [r4, #16]
    ed2c:	4293      	cmp	r3, r2
    ed2e:	dd01      	ble.n	ed34 <_printf_common+0x7c>
    ed30:	1a9b      	subs	r3, r3, r2
    ed32:	18ed      	adds	r5, r5, r3
    ed34:	2700      	movs	r7, #0
    ed36:	42bd      	cmp	r5, r7
    ed38:	d120      	bne.n	ed7c <_printf_common+0xc4>
    ed3a:	2000      	movs	r0, #0
    ed3c:	e010      	b.n	ed60 <_printf_common+0xa8>
    ed3e:	3701      	adds	r7, #1
    ed40:	68e3      	ldr	r3, [r4, #12]
    ed42:	682a      	ldr	r2, [r5, #0]
    ed44:	1a9b      	subs	r3, r3, r2
    ed46:	429f      	cmp	r7, r3
    ed48:	dad2      	bge.n	ecf0 <_printf_common+0x38>
    ed4a:	0022      	movs	r2, r4
    ed4c:	2301      	movs	r3, #1
    ed4e:	3219      	adds	r2, #25
    ed50:	9901      	ldr	r1, [sp, #4]
    ed52:	9800      	ldr	r0, [sp, #0]
    ed54:	9e08      	ldr	r6, [sp, #32]
    ed56:	47b0      	blx	r6
    ed58:	1c43      	adds	r3, r0, #1
    ed5a:	d1f0      	bne.n	ed3e <_printf_common+0x86>
    ed5c:	2001      	movs	r0, #1
    ed5e:	4240      	negs	r0, r0
    ed60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ed62:	2030      	movs	r0, #48	; 0x30
    ed64:	18e1      	adds	r1, r4, r3
    ed66:	3143      	adds	r1, #67	; 0x43
    ed68:	7008      	strb	r0, [r1, #0]
    ed6a:	0021      	movs	r1, r4
    ed6c:	1c5a      	adds	r2, r3, #1
    ed6e:	3145      	adds	r1, #69	; 0x45
    ed70:	7809      	ldrb	r1, [r1, #0]
    ed72:	18a2      	adds	r2, r4, r2
    ed74:	3243      	adds	r2, #67	; 0x43
    ed76:	3302      	adds	r3, #2
    ed78:	7011      	strb	r1, [r2, #0]
    ed7a:	e7c1      	b.n	ed00 <_printf_common+0x48>
    ed7c:	0022      	movs	r2, r4
    ed7e:	2301      	movs	r3, #1
    ed80:	321a      	adds	r2, #26
    ed82:	9901      	ldr	r1, [sp, #4]
    ed84:	9800      	ldr	r0, [sp, #0]
    ed86:	9e08      	ldr	r6, [sp, #32]
    ed88:	47b0      	blx	r6
    ed8a:	1c43      	adds	r3, r0, #1
    ed8c:	d0e6      	beq.n	ed5c <_printf_common+0xa4>
    ed8e:	3701      	adds	r7, #1
    ed90:	e7d1      	b.n	ed36 <_printf_common+0x7e>
	...

0000ed94 <_printf_i>:
    ed94:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed96:	b08b      	sub	sp, #44	; 0x2c
    ed98:	9206      	str	r2, [sp, #24]
    ed9a:	000a      	movs	r2, r1
    ed9c:	3243      	adds	r2, #67	; 0x43
    ed9e:	9307      	str	r3, [sp, #28]
    eda0:	9005      	str	r0, [sp, #20]
    eda2:	9204      	str	r2, [sp, #16]
    eda4:	7e0a      	ldrb	r2, [r1, #24]
    eda6:	000c      	movs	r4, r1
    eda8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    edaa:	2a6e      	cmp	r2, #110	; 0x6e
    edac:	d100      	bne.n	edb0 <_printf_i+0x1c>
    edae:	e08f      	b.n	eed0 <_printf_i+0x13c>
    edb0:	d817      	bhi.n	ede2 <_printf_i+0x4e>
    edb2:	2a63      	cmp	r2, #99	; 0x63
    edb4:	d02c      	beq.n	ee10 <_printf_i+0x7c>
    edb6:	d808      	bhi.n	edca <_printf_i+0x36>
    edb8:	2a00      	cmp	r2, #0
    edba:	d100      	bne.n	edbe <_printf_i+0x2a>
    edbc:	e099      	b.n	eef2 <_printf_i+0x15e>
    edbe:	2a58      	cmp	r2, #88	; 0x58
    edc0:	d054      	beq.n	ee6c <_printf_i+0xd8>
    edc2:	0026      	movs	r6, r4
    edc4:	3642      	adds	r6, #66	; 0x42
    edc6:	7032      	strb	r2, [r6, #0]
    edc8:	e029      	b.n	ee1e <_printf_i+0x8a>
    edca:	2a64      	cmp	r2, #100	; 0x64
    edcc:	d001      	beq.n	edd2 <_printf_i+0x3e>
    edce:	2a69      	cmp	r2, #105	; 0x69
    edd0:	d1f7      	bne.n	edc2 <_printf_i+0x2e>
    edd2:	6821      	ldr	r1, [r4, #0]
    edd4:	681a      	ldr	r2, [r3, #0]
    edd6:	0608      	lsls	r0, r1, #24
    edd8:	d523      	bpl.n	ee22 <_printf_i+0x8e>
    edda:	1d11      	adds	r1, r2, #4
    eddc:	6019      	str	r1, [r3, #0]
    edde:	6815      	ldr	r5, [r2, #0]
    ede0:	e025      	b.n	ee2e <_printf_i+0x9a>
    ede2:	2a73      	cmp	r2, #115	; 0x73
    ede4:	d100      	bne.n	ede8 <_printf_i+0x54>
    ede6:	e088      	b.n	eefa <_printf_i+0x166>
    ede8:	d808      	bhi.n	edfc <_printf_i+0x68>
    edea:	2a6f      	cmp	r2, #111	; 0x6f
    edec:	d029      	beq.n	ee42 <_printf_i+0xae>
    edee:	2a70      	cmp	r2, #112	; 0x70
    edf0:	d1e7      	bne.n	edc2 <_printf_i+0x2e>
    edf2:	2220      	movs	r2, #32
    edf4:	6809      	ldr	r1, [r1, #0]
    edf6:	430a      	orrs	r2, r1
    edf8:	6022      	str	r2, [r4, #0]
    edfa:	e003      	b.n	ee04 <_printf_i+0x70>
    edfc:	2a75      	cmp	r2, #117	; 0x75
    edfe:	d020      	beq.n	ee42 <_printf_i+0xae>
    ee00:	2a78      	cmp	r2, #120	; 0x78
    ee02:	d1de      	bne.n	edc2 <_printf_i+0x2e>
    ee04:	0022      	movs	r2, r4
    ee06:	2178      	movs	r1, #120	; 0x78
    ee08:	3245      	adds	r2, #69	; 0x45
    ee0a:	7011      	strb	r1, [r2, #0]
    ee0c:	4a6c      	ldr	r2, [pc, #432]	; (efc0 <_printf_i+0x22c>)
    ee0e:	e030      	b.n	ee72 <_printf_i+0xde>
    ee10:	000e      	movs	r6, r1
    ee12:	681a      	ldr	r2, [r3, #0]
    ee14:	3642      	adds	r6, #66	; 0x42
    ee16:	1d11      	adds	r1, r2, #4
    ee18:	6019      	str	r1, [r3, #0]
    ee1a:	6813      	ldr	r3, [r2, #0]
    ee1c:	7033      	strb	r3, [r6, #0]
    ee1e:	2301      	movs	r3, #1
    ee20:	e079      	b.n	ef16 <_printf_i+0x182>
    ee22:	0649      	lsls	r1, r1, #25
    ee24:	d5d9      	bpl.n	edda <_printf_i+0x46>
    ee26:	1d11      	adds	r1, r2, #4
    ee28:	6019      	str	r1, [r3, #0]
    ee2a:	2300      	movs	r3, #0
    ee2c:	5ed5      	ldrsh	r5, [r2, r3]
    ee2e:	2d00      	cmp	r5, #0
    ee30:	da03      	bge.n	ee3a <_printf_i+0xa6>
    ee32:	232d      	movs	r3, #45	; 0x2d
    ee34:	9a04      	ldr	r2, [sp, #16]
    ee36:	426d      	negs	r5, r5
    ee38:	7013      	strb	r3, [r2, #0]
    ee3a:	4b62      	ldr	r3, [pc, #392]	; (efc4 <_printf_i+0x230>)
    ee3c:	270a      	movs	r7, #10
    ee3e:	9303      	str	r3, [sp, #12]
    ee40:	e02f      	b.n	eea2 <_printf_i+0x10e>
    ee42:	6820      	ldr	r0, [r4, #0]
    ee44:	6819      	ldr	r1, [r3, #0]
    ee46:	0605      	lsls	r5, r0, #24
    ee48:	d503      	bpl.n	ee52 <_printf_i+0xbe>
    ee4a:	1d08      	adds	r0, r1, #4
    ee4c:	6018      	str	r0, [r3, #0]
    ee4e:	680d      	ldr	r5, [r1, #0]
    ee50:	e005      	b.n	ee5e <_printf_i+0xca>
    ee52:	0640      	lsls	r0, r0, #25
    ee54:	d5f9      	bpl.n	ee4a <_printf_i+0xb6>
    ee56:	680d      	ldr	r5, [r1, #0]
    ee58:	1d08      	adds	r0, r1, #4
    ee5a:	6018      	str	r0, [r3, #0]
    ee5c:	b2ad      	uxth	r5, r5
    ee5e:	4b59      	ldr	r3, [pc, #356]	; (efc4 <_printf_i+0x230>)
    ee60:	2708      	movs	r7, #8
    ee62:	9303      	str	r3, [sp, #12]
    ee64:	2a6f      	cmp	r2, #111	; 0x6f
    ee66:	d018      	beq.n	ee9a <_printf_i+0x106>
    ee68:	270a      	movs	r7, #10
    ee6a:	e016      	b.n	ee9a <_printf_i+0x106>
    ee6c:	3145      	adds	r1, #69	; 0x45
    ee6e:	700a      	strb	r2, [r1, #0]
    ee70:	4a54      	ldr	r2, [pc, #336]	; (efc4 <_printf_i+0x230>)
    ee72:	9203      	str	r2, [sp, #12]
    ee74:	681a      	ldr	r2, [r3, #0]
    ee76:	6821      	ldr	r1, [r4, #0]
    ee78:	1d10      	adds	r0, r2, #4
    ee7a:	6018      	str	r0, [r3, #0]
    ee7c:	6815      	ldr	r5, [r2, #0]
    ee7e:	0608      	lsls	r0, r1, #24
    ee80:	d522      	bpl.n	eec8 <_printf_i+0x134>
    ee82:	07cb      	lsls	r3, r1, #31
    ee84:	d502      	bpl.n	ee8c <_printf_i+0xf8>
    ee86:	2320      	movs	r3, #32
    ee88:	4319      	orrs	r1, r3
    ee8a:	6021      	str	r1, [r4, #0]
    ee8c:	2710      	movs	r7, #16
    ee8e:	2d00      	cmp	r5, #0
    ee90:	d103      	bne.n	ee9a <_printf_i+0x106>
    ee92:	2320      	movs	r3, #32
    ee94:	6822      	ldr	r2, [r4, #0]
    ee96:	439a      	bics	r2, r3
    ee98:	6022      	str	r2, [r4, #0]
    ee9a:	0023      	movs	r3, r4
    ee9c:	2200      	movs	r2, #0
    ee9e:	3343      	adds	r3, #67	; 0x43
    eea0:	701a      	strb	r2, [r3, #0]
    eea2:	6863      	ldr	r3, [r4, #4]
    eea4:	60a3      	str	r3, [r4, #8]
    eea6:	2b00      	cmp	r3, #0
    eea8:	db5c      	blt.n	ef64 <_printf_i+0x1d0>
    eeaa:	2204      	movs	r2, #4
    eeac:	6821      	ldr	r1, [r4, #0]
    eeae:	4391      	bics	r1, r2
    eeb0:	6021      	str	r1, [r4, #0]
    eeb2:	2d00      	cmp	r5, #0
    eeb4:	d158      	bne.n	ef68 <_printf_i+0x1d4>
    eeb6:	9e04      	ldr	r6, [sp, #16]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d064      	beq.n	ef86 <_printf_i+0x1f2>
    eebc:	0026      	movs	r6, r4
    eebe:	9b03      	ldr	r3, [sp, #12]
    eec0:	3642      	adds	r6, #66	; 0x42
    eec2:	781b      	ldrb	r3, [r3, #0]
    eec4:	7033      	strb	r3, [r6, #0]
    eec6:	e05e      	b.n	ef86 <_printf_i+0x1f2>
    eec8:	0648      	lsls	r0, r1, #25
    eeca:	d5da      	bpl.n	ee82 <_printf_i+0xee>
    eecc:	b2ad      	uxth	r5, r5
    eece:	e7d8      	b.n	ee82 <_printf_i+0xee>
    eed0:	6809      	ldr	r1, [r1, #0]
    eed2:	681a      	ldr	r2, [r3, #0]
    eed4:	0608      	lsls	r0, r1, #24
    eed6:	d505      	bpl.n	eee4 <_printf_i+0x150>
    eed8:	1d11      	adds	r1, r2, #4
    eeda:	6019      	str	r1, [r3, #0]
    eedc:	6813      	ldr	r3, [r2, #0]
    eede:	6962      	ldr	r2, [r4, #20]
    eee0:	601a      	str	r2, [r3, #0]
    eee2:	e006      	b.n	eef2 <_printf_i+0x15e>
    eee4:	0649      	lsls	r1, r1, #25
    eee6:	d5f7      	bpl.n	eed8 <_printf_i+0x144>
    eee8:	1d11      	adds	r1, r2, #4
    eeea:	6019      	str	r1, [r3, #0]
    eeec:	6813      	ldr	r3, [r2, #0]
    eeee:	8aa2      	ldrh	r2, [r4, #20]
    eef0:	801a      	strh	r2, [r3, #0]
    eef2:	2300      	movs	r3, #0
    eef4:	9e04      	ldr	r6, [sp, #16]
    eef6:	6123      	str	r3, [r4, #16]
    eef8:	e054      	b.n	efa4 <_printf_i+0x210>
    eefa:	681a      	ldr	r2, [r3, #0]
    eefc:	1d11      	adds	r1, r2, #4
    eefe:	6019      	str	r1, [r3, #0]
    ef00:	6816      	ldr	r6, [r2, #0]
    ef02:	2100      	movs	r1, #0
    ef04:	6862      	ldr	r2, [r4, #4]
    ef06:	0030      	movs	r0, r6
    ef08:	f001 fb54 	bl	105b4 <memchr>
    ef0c:	2800      	cmp	r0, #0
    ef0e:	d001      	beq.n	ef14 <_printf_i+0x180>
    ef10:	1b80      	subs	r0, r0, r6
    ef12:	6060      	str	r0, [r4, #4]
    ef14:	6863      	ldr	r3, [r4, #4]
    ef16:	6123      	str	r3, [r4, #16]
    ef18:	2300      	movs	r3, #0
    ef1a:	9a04      	ldr	r2, [sp, #16]
    ef1c:	7013      	strb	r3, [r2, #0]
    ef1e:	e041      	b.n	efa4 <_printf_i+0x210>
    ef20:	6923      	ldr	r3, [r4, #16]
    ef22:	0032      	movs	r2, r6
    ef24:	9906      	ldr	r1, [sp, #24]
    ef26:	9805      	ldr	r0, [sp, #20]
    ef28:	9d07      	ldr	r5, [sp, #28]
    ef2a:	47a8      	blx	r5
    ef2c:	1c43      	adds	r3, r0, #1
    ef2e:	d043      	beq.n	efb8 <_printf_i+0x224>
    ef30:	6823      	ldr	r3, [r4, #0]
    ef32:	2500      	movs	r5, #0
    ef34:	079b      	lsls	r3, r3, #30
    ef36:	d40f      	bmi.n	ef58 <_printf_i+0x1c4>
    ef38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef3a:	68e0      	ldr	r0, [r4, #12]
    ef3c:	4298      	cmp	r0, r3
    ef3e:	da3d      	bge.n	efbc <_printf_i+0x228>
    ef40:	0018      	movs	r0, r3
    ef42:	e03b      	b.n	efbc <_printf_i+0x228>
    ef44:	0022      	movs	r2, r4
    ef46:	2301      	movs	r3, #1
    ef48:	3219      	adds	r2, #25
    ef4a:	9906      	ldr	r1, [sp, #24]
    ef4c:	9805      	ldr	r0, [sp, #20]
    ef4e:	9e07      	ldr	r6, [sp, #28]
    ef50:	47b0      	blx	r6
    ef52:	1c43      	adds	r3, r0, #1
    ef54:	d030      	beq.n	efb8 <_printf_i+0x224>
    ef56:	3501      	adds	r5, #1
    ef58:	68e3      	ldr	r3, [r4, #12]
    ef5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef5c:	1a9b      	subs	r3, r3, r2
    ef5e:	429d      	cmp	r5, r3
    ef60:	dbf0      	blt.n	ef44 <_printf_i+0x1b0>
    ef62:	e7e9      	b.n	ef38 <_printf_i+0x1a4>
    ef64:	2d00      	cmp	r5, #0
    ef66:	d0a9      	beq.n	eebc <_printf_i+0x128>
    ef68:	9e04      	ldr	r6, [sp, #16]
    ef6a:	0028      	movs	r0, r5
    ef6c:	0039      	movs	r1, r7
    ef6e:	f002 fa7b 	bl	11468 <__aeabi_uidivmod>
    ef72:	9b03      	ldr	r3, [sp, #12]
    ef74:	3e01      	subs	r6, #1
    ef76:	5c5b      	ldrb	r3, [r3, r1]
    ef78:	0028      	movs	r0, r5
    ef7a:	7033      	strb	r3, [r6, #0]
    ef7c:	0039      	movs	r1, r7
    ef7e:	f002 f9ed 	bl	1135c <__udivsi3>
    ef82:	1e05      	subs	r5, r0, #0
    ef84:	d1f1      	bne.n	ef6a <_printf_i+0x1d6>
    ef86:	2f08      	cmp	r7, #8
    ef88:	d109      	bne.n	ef9e <_printf_i+0x20a>
    ef8a:	6823      	ldr	r3, [r4, #0]
    ef8c:	07db      	lsls	r3, r3, #31
    ef8e:	d506      	bpl.n	ef9e <_printf_i+0x20a>
    ef90:	6863      	ldr	r3, [r4, #4]
    ef92:	6922      	ldr	r2, [r4, #16]
    ef94:	4293      	cmp	r3, r2
    ef96:	dc02      	bgt.n	ef9e <_printf_i+0x20a>
    ef98:	2330      	movs	r3, #48	; 0x30
    ef9a:	3e01      	subs	r6, #1
    ef9c:	7033      	strb	r3, [r6, #0]
    ef9e:	9b04      	ldr	r3, [sp, #16]
    efa0:	1b9b      	subs	r3, r3, r6
    efa2:	6123      	str	r3, [r4, #16]
    efa4:	9b07      	ldr	r3, [sp, #28]
    efa6:	aa09      	add	r2, sp, #36	; 0x24
    efa8:	9300      	str	r3, [sp, #0]
    efaa:	0021      	movs	r1, r4
    efac:	9b06      	ldr	r3, [sp, #24]
    efae:	9805      	ldr	r0, [sp, #20]
    efb0:	f7ff fe82 	bl	ecb8 <_printf_common>
    efb4:	1c43      	adds	r3, r0, #1
    efb6:	d1b3      	bne.n	ef20 <_printf_i+0x18c>
    efb8:	2001      	movs	r0, #1
    efba:	4240      	negs	r0, r0
    efbc:	b00b      	add	sp, #44	; 0x2c
    efbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efc0:	00014fc9 	.word	0x00014fc9
    efc4:	00014fb8 	.word	0x00014fb8

0000efc8 <iprintf>:
    efc8:	b40f      	push	{r0, r1, r2, r3}
    efca:	4b0b      	ldr	r3, [pc, #44]	; (eff8 <iprintf+0x30>)
    efcc:	b513      	push	{r0, r1, r4, lr}
    efce:	681c      	ldr	r4, [r3, #0]
    efd0:	2c00      	cmp	r4, #0
    efd2:	d005      	beq.n	efe0 <iprintf+0x18>
    efd4:	69a3      	ldr	r3, [r4, #24]
    efd6:	2b00      	cmp	r3, #0
    efd8:	d102      	bne.n	efe0 <iprintf+0x18>
    efda:	0020      	movs	r0, r4
    efdc:	f001 f9dc 	bl	10398 <__sinit>
    efe0:	ab05      	add	r3, sp, #20
    efe2:	9a04      	ldr	r2, [sp, #16]
    efe4:	68a1      	ldr	r1, [r4, #8]
    efe6:	0020      	movs	r0, r4
    efe8:	9301      	str	r3, [sp, #4]
    efea:	f001 ff6f 	bl	10ecc <_vfiprintf_r>
    efee:	bc16      	pop	{r1, r2, r4}
    eff0:	bc08      	pop	{r3}
    eff2:	b004      	add	sp, #16
    eff4:	4718      	bx	r3
    eff6:	46c0      	nop			; (mov r8, r8)
    eff8:	20000040 	.word	0x20000040

0000effc <putchar>:
    effc:	4b08      	ldr	r3, [pc, #32]	; (f020 <putchar+0x24>)
    effe:	b570      	push	{r4, r5, r6, lr}
    f000:	681c      	ldr	r4, [r3, #0]
    f002:	0005      	movs	r5, r0
    f004:	2c00      	cmp	r4, #0
    f006:	d005      	beq.n	f014 <putchar+0x18>
    f008:	69a3      	ldr	r3, [r4, #24]
    f00a:	2b00      	cmp	r3, #0
    f00c:	d102      	bne.n	f014 <putchar+0x18>
    f00e:	0020      	movs	r0, r4
    f010:	f001 f9c2 	bl	10398 <__sinit>
    f014:	0029      	movs	r1, r5
    f016:	68a2      	ldr	r2, [r4, #8]
    f018:	0020      	movs	r0, r4
    f01a:	f002 f873 	bl	11104 <_putc_r>
    f01e:	bd70      	pop	{r4, r5, r6, pc}
    f020:	20000040 	.word	0x20000040

0000f024 <_puts_r>:
    f024:	b570      	push	{r4, r5, r6, lr}
    f026:	0005      	movs	r5, r0
    f028:	000e      	movs	r6, r1
    f02a:	2800      	cmp	r0, #0
    f02c:	d004      	beq.n	f038 <_puts_r+0x14>
    f02e:	6983      	ldr	r3, [r0, #24]
    f030:	2b00      	cmp	r3, #0
    f032:	d101      	bne.n	f038 <_puts_r+0x14>
    f034:	f001 f9b0 	bl	10398 <__sinit>
    f038:	69ab      	ldr	r3, [r5, #24]
    f03a:	68ac      	ldr	r4, [r5, #8]
    f03c:	2b00      	cmp	r3, #0
    f03e:	d102      	bne.n	f046 <_puts_r+0x22>
    f040:	0028      	movs	r0, r5
    f042:	f001 f9a9 	bl	10398 <__sinit>
    f046:	4b24      	ldr	r3, [pc, #144]	; (f0d8 <_puts_r+0xb4>)
    f048:	429c      	cmp	r4, r3
    f04a:	d10f      	bne.n	f06c <_puts_r+0x48>
    f04c:	686c      	ldr	r4, [r5, #4]
    f04e:	89a3      	ldrh	r3, [r4, #12]
    f050:	071b      	lsls	r3, r3, #28
    f052:	d502      	bpl.n	f05a <_puts_r+0x36>
    f054:	6923      	ldr	r3, [r4, #16]
    f056:	2b00      	cmp	r3, #0
    f058:	d120      	bne.n	f09c <_puts_r+0x78>
    f05a:	0021      	movs	r1, r4
    f05c:	0028      	movs	r0, r5
    f05e:	f000 f9c1 	bl	f3e4 <__swsetup_r>
    f062:	2800      	cmp	r0, #0
    f064:	d01a      	beq.n	f09c <_puts_r+0x78>
    f066:	2001      	movs	r0, #1
    f068:	4240      	negs	r0, r0
    f06a:	bd70      	pop	{r4, r5, r6, pc}
    f06c:	4b1b      	ldr	r3, [pc, #108]	; (f0dc <_puts_r+0xb8>)
    f06e:	429c      	cmp	r4, r3
    f070:	d101      	bne.n	f076 <_puts_r+0x52>
    f072:	68ac      	ldr	r4, [r5, #8]
    f074:	e7eb      	b.n	f04e <_puts_r+0x2a>
    f076:	4b1a      	ldr	r3, [pc, #104]	; (f0e0 <_puts_r+0xbc>)
    f078:	429c      	cmp	r4, r3
    f07a:	d1e8      	bne.n	f04e <_puts_r+0x2a>
    f07c:	68ec      	ldr	r4, [r5, #12]
    f07e:	e7e6      	b.n	f04e <_puts_r+0x2a>
    f080:	3b01      	subs	r3, #1
    f082:	3601      	adds	r6, #1
    f084:	60a3      	str	r3, [r4, #8]
    f086:	2b00      	cmp	r3, #0
    f088:	da04      	bge.n	f094 <_puts_r+0x70>
    f08a:	69a2      	ldr	r2, [r4, #24]
    f08c:	4293      	cmp	r3, r2
    f08e:	db16      	blt.n	f0be <_puts_r+0x9a>
    f090:	290a      	cmp	r1, #10
    f092:	d014      	beq.n	f0be <_puts_r+0x9a>
    f094:	6823      	ldr	r3, [r4, #0]
    f096:	1c5a      	adds	r2, r3, #1
    f098:	6022      	str	r2, [r4, #0]
    f09a:	7019      	strb	r1, [r3, #0]
    f09c:	7831      	ldrb	r1, [r6, #0]
    f09e:	68a3      	ldr	r3, [r4, #8]
    f0a0:	2900      	cmp	r1, #0
    f0a2:	d1ed      	bne.n	f080 <_puts_r+0x5c>
    f0a4:	3b01      	subs	r3, #1
    f0a6:	60a3      	str	r3, [r4, #8]
    f0a8:	2b00      	cmp	r3, #0
    f0aa:	da0f      	bge.n	f0cc <_puts_r+0xa8>
    f0ac:	0022      	movs	r2, r4
    f0ae:	310a      	adds	r1, #10
    f0b0:	0028      	movs	r0, r5
    f0b2:	f000 f935 	bl	f320 <__swbuf_r>
    f0b6:	1c43      	adds	r3, r0, #1
    f0b8:	d0d5      	beq.n	f066 <_puts_r+0x42>
    f0ba:	200a      	movs	r0, #10
    f0bc:	e7d5      	b.n	f06a <_puts_r+0x46>
    f0be:	0022      	movs	r2, r4
    f0c0:	0028      	movs	r0, r5
    f0c2:	f000 f92d 	bl	f320 <__swbuf_r>
    f0c6:	1c43      	adds	r3, r0, #1
    f0c8:	d1e8      	bne.n	f09c <_puts_r+0x78>
    f0ca:	e7cc      	b.n	f066 <_puts_r+0x42>
    f0cc:	200a      	movs	r0, #10
    f0ce:	6823      	ldr	r3, [r4, #0]
    f0d0:	1c5a      	adds	r2, r3, #1
    f0d2:	6022      	str	r2, [r4, #0]
    f0d4:	7018      	strb	r0, [r3, #0]
    f0d6:	e7c8      	b.n	f06a <_puts_r+0x46>
    f0d8:	00015108 	.word	0x00015108
    f0dc:	00015128 	.word	0x00015128
    f0e0:	000150e8 	.word	0x000150e8

0000f0e4 <puts>:
    f0e4:	b510      	push	{r4, lr}
    f0e6:	4b03      	ldr	r3, [pc, #12]	; (f0f4 <puts+0x10>)
    f0e8:	0001      	movs	r1, r0
    f0ea:	6818      	ldr	r0, [r3, #0]
    f0ec:	f7ff ff9a 	bl	f024 <_puts_r>
    f0f0:	bd10      	pop	{r4, pc}
    f0f2:	46c0      	nop			; (mov r8, r8)
    f0f4:	20000040 	.word	0x20000040

0000f0f8 <_sbrk_r>:
    f0f8:	2300      	movs	r3, #0
    f0fa:	b570      	push	{r4, r5, r6, lr}
    f0fc:	4c06      	ldr	r4, [pc, #24]	; (f118 <_sbrk_r+0x20>)
    f0fe:	0005      	movs	r5, r0
    f100:	0008      	movs	r0, r1
    f102:	6023      	str	r3, [r4, #0]
    f104:	f7fd fbc2 	bl	c88c <_sbrk>
    f108:	1c43      	adds	r3, r0, #1
    f10a:	d103      	bne.n	f114 <_sbrk_r+0x1c>
    f10c:	6823      	ldr	r3, [r4, #0]
    f10e:	2b00      	cmp	r3, #0
    f110:	d000      	beq.n	f114 <_sbrk_r+0x1c>
    f112:	602b      	str	r3, [r5, #0]
    f114:	bd70      	pop	{r4, r5, r6, pc}
    f116:	46c0      	nop			; (mov r8, r8)
    f118:	2000074c 	.word	0x2000074c

0000f11c <setbuf>:
    f11c:	424a      	negs	r2, r1
    f11e:	414a      	adcs	r2, r1
    f120:	2380      	movs	r3, #128	; 0x80
    f122:	b510      	push	{r4, lr}
    f124:	0052      	lsls	r2, r2, #1
    f126:	00db      	lsls	r3, r3, #3
    f128:	f000 f802 	bl	f130 <setvbuf>
    f12c:	bd10      	pop	{r4, pc}
	...

0000f130 <setvbuf>:
    f130:	b5f0      	push	{r4, r5, r6, r7, lr}
    f132:	001d      	movs	r5, r3
    f134:	4b4f      	ldr	r3, [pc, #316]	; (f274 <setvbuf+0x144>)
    f136:	b085      	sub	sp, #20
    f138:	681e      	ldr	r6, [r3, #0]
    f13a:	0004      	movs	r4, r0
    f13c:	000f      	movs	r7, r1
    f13e:	9200      	str	r2, [sp, #0]
    f140:	2e00      	cmp	r6, #0
    f142:	d005      	beq.n	f150 <setvbuf+0x20>
    f144:	69b3      	ldr	r3, [r6, #24]
    f146:	2b00      	cmp	r3, #0
    f148:	d102      	bne.n	f150 <setvbuf+0x20>
    f14a:	0030      	movs	r0, r6
    f14c:	f001 f924 	bl	10398 <__sinit>
    f150:	4b49      	ldr	r3, [pc, #292]	; (f278 <setvbuf+0x148>)
    f152:	429c      	cmp	r4, r3
    f154:	d150      	bne.n	f1f8 <setvbuf+0xc8>
    f156:	6874      	ldr	r4, [r6, #4]
    f158:	9b00      	ldr	r3, [sp, #0]
    f15a:	2b02      	cmp	r3, #2
    f15c:	d005      	beq.n	f16a <setvbuf+0x3a>
    f15e:	2b01      	cmp	r3, #1
    f160:	d900      	bls.n	f164 <setvbuf+0x34>
    f162:	e084      	b.n	f26e <setvbuf+0x13e>
    f164:	2d00      	cmp	r5, #0
    f166:	da00      	bge.n	f16a <setvbuf+0x3a>
    f168:	e081      	b.n	f26e <setvbuf+0x13e>
    f16a:	0021      	movs	r1, r4
    f16c:	0030      	movs	r0, r6
    f16e:	f001 f8a5 	bl	102bc <_fflush_r>
    f172:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f174:	2900      	cmp	r1, #0
    f176:	d008      	beq.n	f18a <setvbuf+0x5a>
    f178:	0023      	movs	r3, r4
    f17a:	3344      	adds	r3, #68	; 0x44
    f17c:	4299      	cmp	r1, r3
    f17e:	d002      	beq.n	f186 <setvbuf+0x56>
    f180:	0030      	movs	r0, r6
    f182:	f7ff fa09 	bl	e598 <_free_r>
    f186:	2300      	movs	r3, #0
    f188:	6363      	str	r3, [r4, #52]	; 0x34
    f18a:	2300      	movs	r3, #0
    f18c:	61a3      	str	r3, [r4, #24]
    f18e:	6063      	str	r3, [r4, #4]
    f190:	89a3      	ldrh	r3, [r4, #12]
    f192:	061b      	lsls	r3, r3, #24
    f194:	d503      	bpl.n	f19e <setvbuf+0x6e>
    f196:	6921      	ldr	r1, [r4, #16]
    f198:	0030      	movs	r0, r6
    f19a:	f7ff f9fd 	bl	e598 <_free_r>
    f19e:	89a3      	ldrh	r3, [r4, #12]
    f1a0:	4a36      	ldr	r2, [pc, #216]	; (f27c <setvbuf+0x14c>)
    f1a2:	4013      	ands	r3, r2
    f1a4:	81a3      	strh	r3, [r4, #12]
    f1a6:	9b00      	ldr	r3, [sp, #0]
    f1a8:	2b02      	cmp	r3, #2
    f1aa:	d05a      	beq.n	f262 <setvbuf+0x132>
    f1ac:	ab03      	add	r3, sp, #12
    f1ae:	aa02      	add	r2, sp, #8
    f1b0:	0021      	movs	r1, r4
    f1b2:	0030      	movs	r0, r6
    f1b4:	f001 f992 	bl	104dc <__swhatbuf_r>
    f1b8:	89a3      	ldrh	r3, [r4, #12]
    f1ba:	4318      	orrs	r0, r3
    f1bc:	81a0      	strh	r0, [r4, #12]
    f1be:	2d00      	cmp	r5, #0
    f1c0:	d124      	bne.n	f20c <setvbuf+0xdc>
    f1c2:	9d02      	ldr	r5, [sp, #8]
    f1c4:	0028      	movs	r0, r5
    f1c6:	f7ff f9a7 	bl	e518 <malloc>
    f1ca:	9501      	str	r5, [sp, #4]
    f1cc:	1e07      	subs	r7, r0, #0
    f1ce:	d142      	bne.n	f256 <setvbuf+0x126>
    f1d0:	9b02      	ldr	r3, [sp, #8]
    f1d2:	9301      	str	r3, [sp, #4]
    f1d4:	42ab      	cmp	r3, r5
    f1d6:	d139      	bne.n	f24c <setvbuf+0x11c>
    f1d8:	2001      	movs	r0, #1
    f1da:	4240      	negs	r0, r0
    f1dc:	2302      	movs	r3, #2
    f1de:	89a2      	ldrh	r2, [r4, #12]
    f1e0:	4313      	orrs	r3, r2
    f1e2:	81a3      	strh	r3, [r4, #12]
    f1e4:	2300      	movs	r3, #0
    f1e6:	60a3      	str	r3, [r4, #8]
    f1e8:	0023      	movs	r3, r4
    f1ea:	3347      	adds	r3, #71	; 0x47
    f1ec:	6023      	str	r3, [r4, #0]
    f1ee:	6123      	str	r3, [r4, #16]
    f1f0:	2301      	movs	r3, #1
    f1f2:	6163      	str	r3, [r4, #20]
    f1f4:	b005      	add	sp, #20
    f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1f8:	4b21      	ldr	r3, [pc, #132]	; (f280 <setvbuf+0x150>)
    f1fa:	429c      	cmp	r4, r3
    f1fc:	d101      	bne.n	f202 <setvbuf+0xd2>
    f1fe:	68b4      	ldr	r4, [r6, #8]
    f200:	e7aa      	b.n	f158 <setvbuf+0x28>
    f202:	4b20      	ldr	r3, [pc, #128]	; (f284 <setvbuf+0x154>)
    f204:	429c      	cmp	r4, r3
    f206:	d1a7      	bne.n	f158 <setvbuf+0x28>
    f208:	68f4      	ldr	r4, [r6, #12]
    f20a:	e7a5      	b.n	f158 <setvbuf+0x28>
    f20c:	2f00      	cmp	r7, #0
    f20e:	d0d9      	beq.n	f1c4 <setvbuf+0x94>
    f210:	69b3      	ldr	r3, [r6, #24]
    f212:	2b00      	cmp	r3, #0
    f214:	d102      	bne.n	f21c <setvbuf+0xec>
    f216:	0030      	movs	r0, r6
    f218:	f001 f8be 	bl	10398 <__sinit>
    f21c:	9b00      	ldr	r3, [sp, #0]
    f21e:	2b01      	cmp	r3, #1
    f220:	d103      	bne.n	f22a <setvbuf+0xfa>
    f222:	89a3      	ldrh	r3, [r4, #12]
    f224:	9a00      	ldr	r2, [sp, #0]
    f226:	431a      	orrs	r2, r3
    f228:	81a2      	strh	r2, [r4, #12]
    f22a:	2008      	movs	r0, #8
    f22c:	89a3      	ldrh	r3, [r4, #12]
    f22e:	6027      	str	r7, [r4, #0]
    f230:	6127      	str	r7, [r4, #16]
    f232:	6165      	str	r5, [r4, #20]
    f234:	4018      	ands	r0, r3
    f236:	d018      	beq.n	f26a <setvbuf+0x13a>
    f238:	2001      	movs	r0, #1
    f23a:	4018      	ands	r0, r3
    f23c:	2300      	movs	r3, #0
    f23e:	4298      	cmp	r0, r3
    f240:	d011      	beq.n	f266 <setvbuf+0x136>
    f242:	426d      	negs	r5, r5
    f244:	60a3      	str	r3, [r4, #8]
    f246:	61a5      	str	r5, [r4, #24]
    f248:	0018      	movs	r0, r3
    f24a:	e7d3      	b.n	f1f4 <setvbuf+0xc4>
    f24c:	9801      	ldr	r0, [sp, #4]
    f24e:	f7ff f963 	bl	e518 <malloc>
    f252:	1e07      	subs	r7, r0, #0
    f254:	d0c0      	beq.n	f1d8 <setvbuf+0xa8>
    f256:	2380      	movs	r3, #128	; 0x80
    f258:	89a2      	ldrh	r2, [r4, #12]
    f25a:	9d01      	ldr	r5, [sp, #4]
    f25c:	4313      	orrs	r3, r2
    f25e:	81a3      	strh	r3, [r4, #12]
    f260:	e7d6      	b.n	f210 <setvbuf+0xe0>
    f262:	2000      	movs	r0, #0
    f264:	e7ba      	b.n	f1dc <setvbuf+0xac>
    f266:	60a5      	str	r5, [r4, #8]
    f268:	e7c4      	b.n	f1f4 <setvbuf+0xc4>
    f26a:	60a0      	str	r0, [r4, #8]
    f26c:	e7c2      	b.n	f1f4 <setvbuf+0xc4>
    f26e:	2001      	movs	r0, #1
    f270:	4240      	negs	r0, r0
    f272:	e7bf      	b.n	f1f4 <setvbuf+0xc4>
    f274:	20000040 	.word	0x20000040
    f278:	00015108 	.word	0x00015108
    f27c:	fffff35c 	.word	0xfffff35c
    f280:	00015128 	.word	0x00015128
    f284:	000150e8 	.word	0x000150e8

0000f288 <siprintf>:
    f288:	b40e      	push	{r1, r2, r3}
    f28a:	b510      	push	{r4, lr}
    f28c:	b09d      	sub	sp, #116	; 0x74
    f28e:	a902      	add	r1, sp, #8
    f290:	9002      	str	r0, [sp, #8]
    f292:	6108      	str	r0, [r1, #16]
    f294:	480b      	ldr	r0, [pc, #44]	; (f2c4 <siprintf+0x3c>)
    f296:	2482      	movs	r4, #130	; 0x82
    f298:	6088      	str	r0, [r1, #8]
    f29a:	6148      	str	r0, [r1, #20]
    f29c:	2001      	movs	r0, #1
    f29e:	4240      	negs	r0, r0
    f2a0:	ab1f      	add	r3, sp, #124	; 0x7c
    f2a2:	81c8      	strh	r0, [r1, #14]
    f2a4:	4808      	ldr	r0, [pc, #32]	; (f2c8 <siprintf+0x40>)
    f2a6:	cb04      	ldmia	r3!, {r2}
    f2a8:	00a4      	lsls	r4, r4, #2
    f2aa:	6800      	ldr	r0, [r0, #0]
    f2ac:	9301      	str	r3, [sp, #4]
    f2ae:	818c      	strh	r4, [r1, #12]
    f2b0:	f001 fce0 	bl	10c74 <_svfiprintf_r>
    f2b4:	2300      	movs	r3, #0
    f2b6:	9a02      	ldr	r2, [sp, #8]
    f2b8:	7013      	strb	r3, [r2, #0]
    f2ba:	b01d      	add	sp, #116	; 0x74
    f2bc:	bc10      	pop	{r4}
    f2be:	bc08      	pop	{r3}
    f2c0:	b003      	add	sp, #12
    f2c2:	4718      	bx	r3
    f2c4:	7fffffff 	.word	0x7fffffff
    f2c8:	20000040 	.word	0x20000040

0000f2cc <strcmp>:
    f2cc:	7802      	ldrb	r2, [r0, #0]
    f2ce:	780b      	ldrb	r3, [r1, #0]
    f2d0:	2a00      	cmp	r2, #0
    f2d2:	d003      	beq.n	f2dc <strcmp+0x10>
    f2d4:	3001      	adds	r0, #1
    f2d6:	3101      	adds	r1, #1
    f2d8:	429a      	cmp	r2, r3
    f2da:	d0f7      	beq.n	f2cc <strcmp>
    f2dc:	1ad0      	subs	r0, r2, r3
    f2de:	4770      	bx	lr

0000f2e0 <strcpy>:
    f2e0:	1c03      	adds	r3, r0, #0
    f2e2:	780a      	ldrb	r2, [r1, #0]
    f2e4:	3101      	adds	r1, #1
    f2e6:	701a      	strb	r2, [r3, #0]
    f2e8:	3301      	adds	r3, #1
    f2ea:	2a00      	cmp	r2, #0
    f2ec:	d1f9      	bne.n	f2e2 <strcpy+0x2>
    f2ee:	4770      	bx	lr

0000f2f0 <strlen>:
    f2f0:	2300      	movs	r3, #0
    f2f2:	5cc2      	ldrb	r2, [r0, r3]
    f2f4:	3301      	adds	r3, #1
    f2f6:	2a00      	cmp	r2, #0
    f2f8:	d1fb      	bne.n	f2f2 <strlen+0x2>
    f2fa:	1e58      	subs	r0, r3, #1
    f2fc:	4770      	bx	lr

0000f2fe <strncmp>:
    f2fe:	2300      	movs	r3, #0
    f300:	b530      	push	{r4, r5, lr}
    f302:	429a      	cmp	r2, r3
    f304:	d00a      	beq.n	f31c <strncmp+0x1e>
    f306:	3a01      	subs	r2, #1
    f308:	5cc4      	ldrb	r4, [r0, r3]
    f30a:	5ccd      	ldrb	r5, [r1, r3]
    f30c:	42ac      	cmp	r4, r5
    f30e:	d104      	bne.n	f31a <strncmp+0x1c>
    f310:	429a      	cmp	r2, r3
    f312:	d002      	beq.n	f31a <strncmp+0x1c>
    f314:	3301      	adds	r3, #1
    f316:	2c00      	cmp	r4, #0
    f318:	d1f6      	bne.n	f308 <strncmp+0xa>
    f31a:	1b63      	subs	r3, r4, r5
    f31c:	0018      	movs	r0, r3
    f31e:	bd30      	pop	{r4, r5, pc}

0000f320 <__swbuf_r>:
    f320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f322:	0005      	movs	r5, r0
    f324:	000e      	movs	r6, r1
    f326:	0014      	movs	r4, r2
    f328:	2800      	cmp	r0, #0
    f32a:	d004      	beq.n	f336 <__swbuf_r+0x16>
    f32c:	6983      	ldr	r3, [r0, #24]
    f32e:	2b00      	cmp	r3, #0
    f330:	d101      	bne.n	f336 <__swbuf_r+0x16>
    f332:	f001 f831 	bl	10398 <__sinit>
    f336:	4b22      	ldr	r3, [pc, #136]	; (f3c0 <__swbuf_r+0xa0>)
    f338:	429c      	cmp	r4, r3
    f33a:	d12d      	bne.n	f398 <__swbuf_r+0x78>
    f33c:	686c      	ldr	r4, [r5, #4]
    f33e:	69a3      	ldr	r3, [r4, #24]
    f340:	60a3      	str	r3, [r4, #8]
    f342:	89a3      	ldrh	r3, [r4, #12]
    f344:	071b      	lsls	r3, r3, #28
    f346:	d531      	bpl.n	f3ac <__swbuf_r+0x8c>
    f348:	6923      	ldr	r3, [r4, #16]
    f34a:	2b00      	cmp	r3, #0
    f34c:	d02e      	beq.n	f3ac <__swbuf_r+0x8c>
    f34e:	6823      	ldr	r3, [r4, #0]
    f350:	6922      	ldr	r2, [r4, #16]
    f352:	b2f7      	uxtb	r7, r6
    f354:	1a98      	subs	r0, r3, r2
    f356:	6963      	ldr	r3, [r4, #20]
    f358:	b2f6      	uxtb	r6, r6
    f35a:	4298      	cmp	r0, r3
    f35c:	db05      	blt.n	f36a <__swbuf_r+0x4a>
    f35e:	0021      	movs	r1, r4
    f360:	0028      	movs	r0, r5
    f362:	f000 ffab 	bl	102bc <_fflush_r>
    f366:	2800      	cmp	r0, #0
    f368:	d126      	bne.n	f3b8 <__swbuf_r+0x98>
    f36a:	68a3      	ldr	r3, [r4, #8]
    f36c:	3001      	adds	r0, #1
    f36e:	3b01      	subs	r3, #1
    f370:	60a3      	str	r3, [r4, #8]
    f372:	6823      	ldr	r3, [r4, #0]
    f374:	1c5a      	adds	r2, r3, #1
    f376:	6022      	str	r2, [r4, #0]
    f378:	701f      	strb	r7, [r3, #0]
    f37a:	6963      	ldr	r3, [r4, #20]
    f37c:	4298      	cmp	r0, r3
    f37e:	d004      	beq.n	f38a <__swbuf_r+0x6a>
    f380:	89a3      	ldrh	r3, [r4, #12]
    f382:	07db      	lsls	r3, r3, #31
    f384:	d51a      	bpl.n	f3bc <__swbuf_r+0x9c>
    f386:	2e0a      	cmp	r6, #10
    f388:	d118      	bne.n	f3bc <__swbuf_r+0x9c>
    f38a:	0021      	movs	r1, r4
    f38c:	0028      	movs	r0, r5
    f38e:	f000 ff95 	bl	102bc <_fflush_r>
    f392:	2800      	cmp	r0, #0
    f394:	d012      	beq.n	f3bc <__swbuf_r+0x9c>
    f396:	e00f      	b.n	f3b8 <__swbuf_r+0x98>
    f398:	4b0a      	ldr	r3, [pc, #40]	; (f3c4 <__swbuf_r+0xa4>)
    f39a:	429c      	cmp	r4, r3
    f39c:	d101      	bne.n	f3a2 <__swbuf_r+0x82>
    f39e:	68ac      	ldr	r4, [r5, #8]
    f3a0:	e7cd      	b.n	f33e <__swbuf_r+0x1e>
    f3a2:	4b09      	ldr	r3, [pc, #36]	; (f3c8 <__swbuf_r+0xa8>)
    f3a4:	429c      	cmp	r4, r3
    f3a6:	d1ca      	bne.n	f33e <__swbuf_r+0x1e>
    f3a8:	68ec      	ldr	r4, [r5, #12]
    f3aa:	e7c8      	b.n	f33e <__swbuf_r+0x1e>
    f3ac:	0021      	movs	r1, r4
    f3ae:	0028      	movs	r0, r5
    f3b0:	f000 f818 	bl	f3e4 <__swsetup_r>
    f3b4:	2800      	cmp	r0, #0
    f3b6:	d0ca      	beq.n	f34e <__swbuf_r+0x2e>
    f3b8:	2601      	movs	r6, #1
    f3ba:	4276      	negs	r6, r6
    f3bc:	0030      	movs	r0, r6
    f3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3c0:	00015108 	.word	0x00015108
    f3c4:	00015128 	.word	0x00015128
    f3c8:	000150e8 	.word	0x000150e8

0000f3cc <__ascii_wctomb>:
    f3cc:	1e0b      	subs	r3, r1, #0
    f3ce:	d004      	beq.n	f3da <__ascii_wctomb+0xe>
    f3d0:	2aff      	cmp	r2, #255	; 0xff
    f3d2:	d904      	bls.n	f3de <__ascii_wctomb+0x12>
    f3d4:	238a      	movs	r3, #138	; 0x8a
    f3d6:	6003      	str	r3, [r0, #0]
    f3d8:	3b8b      	subs	r3, #139	; 0x8b
    f3da:	0018      	movs	r0, r3
    f3dc:	4770      	bx	lr
    f3de:	700a      	strb	r2, [r1, #0]
    f3e0:	2301      	movs	r3, #1
    f3e2:	e7fa      	b.n	f3da <__ascii_wctomb+0xe>

0000f3e4 <__swsetup_r>:
    f3e4:	4b36      	ldr	r3, [pc, #216]	; (f4c0 <__swsetup_r+0xdc>)
    f3e6:	b570      	push	{r4, r5, r6, lr}
    f3e8:	681d      	ldr	r5, [r3, #0]
    f3ea:	0006      	movs	r6, r0
    f3ec:	000c      	movs	r4, r1
    f3ee:	2d00      	cmp	r5, #0
    f3f0:	d005      	beq.n	f3fe <__swsetup_r+0x1a>
    f3f2:	69ab      	ldr	r3, [r5, #24]
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d102      	bne.n	f3fe <__swsetup_r+0x1a>
    f3f8:	0028      	movs	r0, r5
    f3fa:	f000 ffcd 	bl	10398 <__sinit>
    f3fe:	4b31      	ldr	r3, [pc, #196]	; (f4c4 <__swsetup_r+0xe0>)
    f400:	429c      	cmp	r4, r3
    f402:	d10f      	bne.n	f424 <__swsetup_r+0x40>
    f404:	686c      	ldr	r4, [r5, #4]
    f406:	230c      	movs	r3, #12
    f408:	5ee2      	ldrsh	r2, [r4, r3]
    f40a:	b293      	uxth	r3, r2
    f40c:	0719      	lsls	r1, r3, #28
    f40e:	d42d      	bmi.n	f46c <__swsetup_r+0x88>
    f410:	06d9      	lsls	r1, r3, #27
    f412:	d411      	bmi.n	f438 <__swsetup_r+0x54>
    f414:	2309      	movs	r3, #9
    f416:	2001      	movs	r0, #1
    f418:	6033      	str	r3, [r6, #0]
    f41a:	3337      	adds	r3, #55	; 0x37
    f41c:	4313      	orrs	r3, r2
    f41e:	81a3      	strh	r3, [r4, #12]
    f420:	4240      	negs	r0, r0
    f422:	bd70      	pop	{r4, r5, r6, pc}
    f424:	4b28      	ldr	r3, [pc, #160]	; (f4c8 <__swsetup_r+0xe4>)
    f426:	429c      	cmp	r4, r3
    f428:	d101      	bne.n	f42e <__swsetup_r+0x4a>
    f42a:	68ac      	ldr	r4, [r5, #8]
    f42c:	e7eb      	b.n	f406 <__swsetup_r+0x22>
    f42e:	4b27      	ldr	r3, [pc, #156]	; (f4cc <__swsetup_r+0xe8>)
    f430:	429c      	cmp	r4, r3
    f432:	d1e8      	bne.n	f406 <__swsetup_r+0x22>
    f434:	68ec      	ldr	r4, [r5, #12]
    f436:	e7e6      	b.n	f406 <__swsetup_r+0x22>
    f438:	075b      	lsls	r3, r3, #29
    f43a:	d513      	bpl.n	f464 <__swsetup_r+0x80>
    f43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f43e:	2900      	cmp	r1, #0
    f440:	d008      	beq.n	f454 <__swsetup_r+0x70>
    f442:	0023      	movs	r3, r4
    f444:	3344      	adds	r3, #68	; 0x44
    f446:	4299      	cmp	r1, r3
    f448:	d002      	beq.n	f450 <__swsetup_r+0x6c>
    f44a:	0030      	movs	r0, r6
    f44c:	f7ff f8a4 	bl	e598 <_free_r>
    f450:	2300      	movs	r3, #0
    f452:	6363      	str	r3, [r4, #52]	; 0x34
    f454:	2224      	movs	r2, #36	; 0x24
    f456:	89a3      	ldrh	r3, [r4, #12]
    f458:	4393      	bics	r3, r2
    f45a:	81a3      	strh	r3, [r4, #12]
    f45c:	2300      	movs	r3, #0
    f45e:	6063      	str	r3, [r4, #4]
    f460:	6923      	ldr	r3, [r4, #16]
    f462:	6023      	str	r3, [r4, #0]
    f464:	2308      	movs	r3, #8
    f466:	89a2      	ldrh	r2, [r4, #12]
    f468:	4313      	orrs	r3, r2
    f46a:	81a3      	strh	r3, [r4, #12]
    f46c:	6923      	ldr	r3, [r4, #16]
    f46e:	2b00      	cmp	r3, #0
    f470:	d10b      	bne.n	f48a <__swsetup_r+0xa6>
    f472:	21a0      	movs	r1, #160	; 0xa0
    f474:	2280      	movs	r2, #128	; 0x80
    f476:	89a3      	ldrh	r3, [r4, #12]
    f478:	0089      	lsls	r1, r1, #2
    f47a:	0092      	lsls	r2, r2, #2
    f47c:	400b      	ands	r3, r1
    f47e:	4293      	cmp	r3, r2
    f480:	d003      	beq.n	f48a <__swsetup_r+0xa6>
    f482:	0021      	movs	r1, r4
    f484:	0030      	movs	r0, r6
    f486:	f001 f851 	bl	1052c <__smakebuf_r>
    f48a:	2301      	movs	r3, #1
    f48c:	89a2      	ldrh	r2, [r4, #12]
    f48e:	4013      	ands	r3, r2
    f490:	d011      	beq.n	f4b6 <__swsetup_r+0xd2>
    f492:	2300      	movs	r3, #0
    f494:	60a3      	str	r3, [r4, #8]
    f496:	6963      	ldr	r3, [r4, #20]
    f498:	425b      	negs	r3, r3
    f49a:	61a3      	str	r3, [r4, #24]
    f49c:	2000      	movs	r0, #0
    f49e:	6923      	ldr	r3, [r4, #16]
    f4a0:	4283      	cmp	r3, r0
    f4a2:	d1be      	bne.n	f422 <__swsetup_r+0x3e>
    f4a4:	230c      	movs	r3, #12
    f4a6:	5ee2      	ldrsh	r2, [r4, r3]
    f4a8:	0613      	lsls	r3, r2, #24
    f4aa:	d5ba      	bpl.n	f422 <__swsetup_r+0x3e>
    f4ac:	2340      	movs	r3, #64	; 0x40
    f4ae:	4313      	orrs	r3, r2
    f4b0:	81a3      	strh	r3, [r4, #12]
    f4b2:	3801      	subs	r0, #1
    f4b4:	e7b5      	b.n	f422 <__swsetup_r+0x3e>
    f4b6:	0792      	lsls	r2, r2, #30
    f4b8:	d400      	bmi.n	f4bc <__swsetup_r+0xd8>
    f4ba:	6963      	ldr	r3, [r4, #20]
    f4bc:	60a3      	str	r3, [r4, #8]
    f4be:	e7ed      	b.n	f49c <__swsetup_r+0xb8>
    f4c0:	20000040 	.word	0x20000040
    f4c4:	00015108 	.word	0x00015108
    f4c8:	00015128 	.word	0x00015128
    f4cc:	000150e8 	.word	0x000150e8

0000f4d0 <quorem>:
    f4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4d2:	6903      	ldr	r3, [r0, #16]
    f4d4:	690c      	ldr	r4, [r1, #16]
    f4d6:	b089      	sub	sp, #36	; 0x24
    f4d8:	0007      	movs	r7, r0
    f4da:	9105      	str	r1, [sp, #20]
    f4dc:	2600      	movs	r6, #0
    f4de:	429c      	cmp	r4, r3
    f4e0:	dc6d      	bgt.n	f5be <quorem+0xee>
    f4e2:	000b      	movs	r3, r1
    f4e4:	3c01      	subs	r4, #1
    f4e6:	3314      	adds	r3, #20
    f4e8:	00a5      	lsls	r5, r4, #2
    f4ea:	9303      	str	r3, [sp, #12]
    f4ec:	195b      	adds	r3, r3, r5
    f4ee:	9304      	str	r3, [sp, #16]
    f4f0:	0003      	movs	r3, r0
    f4f2:	3314      	adds	r3, #20
    f4f4:	9302      	str	r3, [sp, #8]
    f4f6:	195d      	adds	r5, r3, r5
    f4f8:	9b04      	ldr	r3, [sp, #16]
    f4fa:	6828      	ldr	r0, [r5, #0]
    f4fc:	681b      	ldr	r3, [r3, #0]
    f4fe:	1c59      	adds	r1, r3, #1
    f500:	9301      	str	r3, [sp, #4]
    f502:	f001 ff2b 	bl	1135c <__udivsi3>
    f506:	9001      	str	r0, [sp, #4]
    f508:	42b0      	cmp	r0, r6
    f50a:	d02d      	beq.n	f568 <quorem+0x98>
    f50c:	9b03      	ldr	r3, [sp, #12]
    f50e:	9802      	ldr	r0, [sp, #8]
    f510:	469c      	mov	ip, r3
    f512:	9606      	str	r6, [sp, #24]
    f514:	4662      	mov	r2, ip
    f516:	ca08      	ldmia	r2!, {r3}
    f518:	4694      	mov	ip, r2
    f51a:	9a01      	ldr	r2, [sp, #4]
    f51c:	b299      	uxth	r1, r3
    f51e:	4351      	muls	r1, r2
    f520:	0c1b      	lsrs	r3, r3, #16
    f522:	4353      	muls	r3, r2
    f524:	1989      	adds	r1, r1, r6
    f526:	0c0a      	lsrs	r2, r1, #16
    f528:	189b      	adds	r3, r3, r2
    f52a:	9307      	str	r3, [sp, #28]
    f52c:	8802      	ldrh	r2, [r0, #0]
    f52e:	0c1e      	lsrs	r6, r3, #16
    f530:	9b06      	ldr	r3, [sp, #24]
    f532:	b289      	uxth	r1, r1
    f534:	18d2      	adds	r2, r2, r3
    f536:	6803      	ldr	r3, [r0, #0]
    f538:	1a52      	subs	r2, r2, r1
    f53a:	0c19      	lsrs	r1, r3, #16
    f53c:	466b      	mov	r3, sp
    f53e:	8b9b      	ldrh	r3, [r3, #28]
    f540:	1acb      	subs	r3, r1, r3
    f542:	1411      	asrs	r1, r2, #16
    f544:	185b      	adds	r3, r3, r1
    f546:	1419      	asrs	r1, r3, #16
    f548:	b292      	uxth	r2, r2
    f54a:	041b      	lsls	r3, r3, #16
    f54c:	431a      	orrs	r2, r3
    f54e:	9b04      	ldr	r3, [sp, #16]
    f550:	9106      	str	r1, [sp, #24]
    f552:	c004      	stmia	r0!, {r2}
    f554:	4563      	cmp	r3, ip
    f556:	d2dd      	bcs.n	f514 <quorem+0x44>
    f558:	682b      	ldr	r3, [r5, #0]
    f55a:	2b00      	cmp	r3, #0
    f55c:	d104      	bne.n	f568 <quorem+0x98>
    f55e:	9b02      	ldr	r3, [sp, #8]
    f560:	3d04      	subs	r5, #4
    f562:	42ab      	cmp	r3, r5
    f564:	d32e      	bcc.n	f5c4 <quorem+0xf4>
    f566:	613c      	str	r4, [r7, #16]
    f568:	9905      	ldr	r1, [sp, #20]
    f56a:	0038      	movs	r0, r7
    f56c:	f001 fa41 	bl	109f2 <__mcmp>
    f570:	2800      	cmp	r0, #0
    f572:	db23      	blt.n	f5bc <quorem+0xec>
    f574:	2500      	movs	r5, #0
    f576:	9b01      	ldr	r3, [sp, #4]
    f578:	9802      	ldr	r0, [sp, #8]
    f57a:	3301      	adds	r3, #1
    f57c:	9903      	ldr	r1, [sp, #12]
    f57e:	9301      	str	r3, [sp, #4]
    f580:	c908      	ldmia	r1!, {r3}
    f582:	8802      	ldrh	r2, [r0, #0]
    f584:	1955      	adds	r5, r2, r5
    f586:	b29a      	uxth	r2, r3
    f588:	1aaa      	subs	r2, r5, r2
    f58a:	6805      	ldr	r5, [r0, #0]
    f58c:	0c1b      	lsrs	r3, r3, #16
    f58e:	0c2d      	lsrs	r5, r5, #16
    f590:	1aeb      	subs	r3, r5, r3
    f592:	1415      	asrs	r5, r2, #16
    f594:	195b      	adds	r3, r3, r5
    f596:	141d      	asrs	r5, r3, #16
    f598:	b292      	uxth	r2, r2
    f59a:	041b      	lsls	r3, r3, #16
    f59c:	4313      	orrs	r3, r2
    f59e:	c008      	stmia	r0!, {r3}
    f5a0:	9b04      	ldr	r3, [sp, #16]
    f5a2:	428b      	cmp	r3, r1
    f5a4:	d2ec      	bcs.n	f580 <quorem+0xb0>
    f5a6:	9a02      	ldr	r2, [sp, #8]
    f5a8:	00a3      	lsls	r3, r4, #2
    f5aa:	18d3      	adds	r3, r2, r3
    f5ac:	681a      	ldr	r2, [r3, #0]
    f5ae:	2a00      	cmp	r2, #0
    f5b0:	d104      	bne.n	f5bc <quorem+0xec>
    f5b2:	9a02      	ldr	r2, [sp, #8]
    f5b4:	3b04      	subs	r3, #4
    f5b6:	429a      	cmp	r2, r3
    f5b8:	d309      	bcc.n	f5ce <quorem+0xfe>
    f5ba:	613c      	str	r4, [r7, #16]
    f5bc:	9e01      	ldr	r6, [sp, #4]
    f5be:	0030      	movs	r0, r6
    f5c0:	b009      	add	sp, #36	; 0x24
    f5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5c4:	682b      	ldr	r3, [r5, #0]
    f5c6:	2b00      	cmp	r3, #0
    f5c8:	d1cd      	bne.n	f566 <quorem+0x96>
    f5ca:	3c01      	subs	r4, #1
    f5cc:	e7c7      	b.n	f55e <quorem+0x8e>
    f5ce:	681a      	ldr	r2, [r3, #0]
    f5d0:	2a00      	cmp	r2, #0
    f5d2:	d1f2      	bne.n	f5ba <quorem+0xea>
    f5d4:	3c01      	subs	r4, #1
    f5d6:	e7ec      	b.n	f5b2 <quorem+0xe2>

0000f5d8 <_dtoa_r>:
    f5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5da:	0016      	movs	r6, r2
    f5dc:	001f      	movs	r7, r3
    f5de:	6a44      	ldr	r4, [r0, #36]	; 0x24
    f5e0:	b09d      	sub	sp, #116	; 0x74
    f5e2:	9004      	str	r0, [sp, #16]
    f5e4:	9d25      	ldr	r5, [sp, #148]	; 0x94
    f5e6:	9606      	str	r6, [sp, #24]
    f5e8:	9707      	str	r7, [sp, #28]
    f5ea:	2c00      	cmp	r4, #0
    f5ec:	d108      	bne.n	f600 <_dtoa_r+0x28>
    f5ee:	2010      	movs	r0, #16
    f5f0:	f7fe ff92 	bl	e518 <malloc>
    f5f4:	9b04      	ldr	r3, [sp, #16]
    f5f6:	6258      	str	r0, [r3, #36]	; 0x24
    f5f8:	6044      	str	r4, [r0, #4]
    f5fa:	6084      	str	r4, [r0, #8]
    f5fc:	6004      	str	r4, [r0, #0]
    f5fe:	60c4      	str	r4, [r0, #12]
    f600:	9b04      	ldr	r3, [sp, #16]
    f602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f604:	6819      	ldr	r1, [r3, #0]
    f606:	2900      	cmp	r1, #0
    f608:	d00b      	beq.n	f622 <_dtoa_r+0x4a>
    f60a:	685a      	ldr	r2, [r3, #4]
    f60c:	2301      	movs	r3, #1
    f60e:	4093      	lsls	r3, r2
    f610:	604a      	str	r2, [r1, #4]
    f612:	608b      	str	r3, [r1, #8]
    f614:	9804      	ldr	r0, [sp, #16]
    f616:	f001 f812 	bl	1063e <_Bfree>
    f61a:	2200      	movs	r2, #0
    f61c:	9b04      	ldr	r3, [sp, #16]
    f61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f620:	601a      	str	r2, [r3, #0]
    f622:	9b07      	ldr	r3, [sp, #28]
    f624:	2b00      	cmp	r3, #0
    f626:	da1f      	bge.n	f668 <_dtoa_r+0x90>
    f628:	2301      	movs	r3, #1
    f62a:	602b      	str	r3, [r5, #0]
    f62c:	007b      	lsls	r3, r7, #1
    f62e:	085b      	lsrs	r3, r3, #1
    f630:	9307      	str	r3, [sp, #28]
    f632:	9c07      	ldr	r4, [sp, #28]
    f634:	4bb7      	ldr	r3, [pc, #732]	; (f914 <_dtoa_r+0x33c>)
    f636:	0022      	movs	r2, r4
    f638:	9319      	str	r3, [sp, #100]	; 0x64
    f63a:	401a      	ands	r2, r3
    f63c:	429a      	cmp	r2, r3
    f63e:	d116      	bne.n	f66e <_dtoa_r+0x96>
    f640:	4bb5      	ldr	r3, [pc, #724]	; (f918 <_dtoa_r+0x340>)
    f642:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f644:	6013      	str	r3, [r2, #0]
    f646:	9b06      	ldr	r3, [sp, #24]
    f648:	2b00      	cmp	r3, #0
    f64a:	d103      	bne.n	f654 <_dtoa_r+0x7c>
    f64c:	0324      	lsls	r4, r4, #12
    f64e:	d101      	bne.n	f654 <_dtoa_r+0x7c>
    f650:	f000 fd91 	bl	10176 <_dtoa_r+0xb9e>
    f654:	4bb1      	ldr	r3, [pc, #708]	; (f91c <_dtoa_r+0x344>)
    f656:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f658:	930a      	str	r3, [sp, #40]	; 0x28
    f65a:	4bb1      	ldr	r3, [pc, #708]	; (f920 <_dtoa_r+0x348>)
    f65c:	2a00      	cmp	r2, #0
    f65e:	d001      	beq.n	f664 <_dtoa_r+0x8c>
    f660:	f000 fd8f 	bl	10182 <_dtoa_r+0xbaa>
    f664:	f000 fd8f 	bl	10186 <_dtoa_r+0xbae>
    f668:	2300      	movs	r3, #0
    f66a:	602b      	str	r3, [r5, #0]
    f66c:	e7e1      	b.n	f632 <_dtoa_r+0x5a>
    f66e:	9e06      	ldr	r6, [sp, #24]
    f670:	9f07      	ldr	r7, [sp, #28]
    f672:	2200      	movs	r2, #0
    f674:	2300      	movs	r3, #0
    f676:	0030      	movs	r0, r6
    f678:	0039      	movs	r1, r7
    f67a:	f001 fff5 	bl	11668 <__aeabi_dcmpeq>
    f67e:	1e05      	subs	r5, r0, #0
    f680:	d00e      	beq.n	f6a0 <_dtoa_r+0xc8>
    f682:	2301      	movs	r3, #1
    f684:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f686:	6013      	str	r3, [r2, #0]
    f688:	4ba6      	ldr	r3, [pc, #664]	; (f924 <_dtoa_r+0x34c>)
    f68a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f68c:	930a      	str	r3, [sp, #40]	; 0x28
    f68e:	2a00      	cmp	r2, #0
    f690:	d101      	bne.n	f696 <_dtoa_r+0xbe>
    f692:	f000 fd78 	bl	10186 <_dtoa_r+0xbae>
    f696:	4aa4      	ldr	r2, [pc, #656]	; (f928 <_dtoa_r+0x350>)
    f698:	9926      	ldr	r1, [sp, #152]	; 0x98
    f69a:	600a      	str	r2, [r1, #0]
    f69c:	f000 fd73 	bl	10186 <_dtoa_r+0xbae>
    f6a0:	ab1a      	add	r3, sp, #104	; 0x68
    f6a2:	9301      	str	r3, [sp, #4]
    f6a4:	ab1b      	add	r3, sp, #108	; 0x6c
    f6a6:	9300      	str	r3, [sp, #0]
    f6a8:	0032      	movs	r2, r6
    f6aa:	003b      	movs	r3, r7
    f6ac:	9804      	ldr	r0, [sp, #16]
    f6ae:	f001 fa1d 	bl	10aec <__d2b>
    f6b2:	0063      	lsls	r3, r4, #1
    f6b4:	9005      	str	r0, [sp, #20]
    f6b6:	0d5b      	lsrs	r3, r3, #21
    f6b8:	d100      	bne.n	f6bc <_dtoa_r+0xe4>
    f6ba:	e07f      	b.n	f7bc <_dtoa_r+0x1e4>
    f6bc:	033a      	lsls	r2, r7, #12
    f6be:	4c9b      	ldr	r4, [pc, #620]	; (f92c <_dtoa_r+0x354>)
    f6c0:	0b12      	lsrs	r2, r2, #12
    f6c2:	4314      	orrs	r4, r2
    f6c4:	0021      	movs	r1, r4
    f6c6:	4a9a      	ldr	r2, [pc, #616]	; (f930 <_dtoa_r+0x358>)
    f6c8:	0030      	movs	r0, r6
    f6ca:	9518      	str	r5, [sp, #96]	; 0x60
    f6cc:	189e      	adds	r6, r3, r2
    f6ce:	2200      	movs	r2, #0
    f6d0:	4b98      	ldr	r3, [pc, #608]	; (f934 <_dtoa_r+0x35c>)
    f6d2:	f003 fc9d 	bl	13010 <__aeabi_dsub>
    f6d6:	4a98      	ldr	r2, [pc, #608]	; (f938 <_dtoa_r+0x360>)
    f6d8:	4b98      	ldr	r3, [pc, #608]	; (f93c <_dtoa_r+0x364>)
    f6da:	f003 fa19 	bl	12b10 <__aeabi_dmul>
    f6de:	4a98      	ldr	r2, [pc, #608]	; (f940 <_dtoa_r+0x368>)
    f6e0:	4b98      	ldr	r3, [pc, #608]	; (f944 <_dtoa_r+0x36c>)
    f6e2:	f002 fad1 	bl	11c88 <__aeabi_dadd>
    f6e6:	0004      	movs	r4, r0
    f6e8:	0030      	movs	r0, r6
    f6ea:	000d      	movs	r5, r1
    f6ec:	f003 fffa 	bl	136e4 <__aeabi_i2d>
    f6f0:	4a95      	ldr	r2, [pc, #596]	; (f948 <_dtoa_r+0x370>)
    f6f2:	4b96      	ldr	r3, [pc, #600]	; (f94c <_dtoa_r+0x374>)
    f6f4:	f003 fa0c 	bl	12b10 <__aeabi_dmul>
    f6f8:	0002      	movs	r2, r0
    f6fa:	000b      	movs	r3, r1
    f6fc:	0020      	movs	r0, r4
    f6fe:	0029      	movs	r1, r5
    f700:	f002 fac2 	bl	11c88 <__aeabi_dadd>
    f704:	0004      	movs	r4, r0
    f706:	000d      	movs	r5, r1
    f708:	f003 ffb8 	bl	1367c <__aeabi_d2iz>
    f70c:	2200      	movs	r2, #0
    f70e:	9003      	str	r0, [sp, #12]
    f710:	2300      	movs	r3, #0
    f712:	0020      	movs	r0, r4
    f714:	0029      	movs	r1, r5
    f716:	f001 ffad 	bl	11674 <__aeabi_dcmplt>
    f71a:	2800      	cmp	r0, #0
    f71c:	d00e      	beq.n	f73c <_dtoa_r+0x164>
    f71e:	9803      	ldr	r0, [sp, #12]
    f720:	f003 ffe0 	bl	136e4 <__aeabi_i2d>
    f724:	000b      	movs	r3, r1
    f726:	0002      	movs	r2, r0
    f728:	0029      	movs	r1, r5
    f72a:	0020      	movs	r0, r4
    f72c:	f001 ff9c 	bl	11668 <__aeabi_dcmpeq>
    f730:	0003      	movs	r3, r0
    f732:	4258      	negs	r0, r3
    f734:	4158      	adcs	r0, r3
    f736:	9b03      	ldr	r3, [sp, #12]
    f738:	1a1b      	subs	r3, r3, r0
    f73a:	9303      	str	r3, [sp, #12]
    f73c:	2301      	movs	r3, #1
    f73e:	9316      	str	r3, [sp, #88]	; 0x58
    f740:	9b03      	ldr	r3, [sp, #12]
    f742:	2b16      	cmp	r3, #22
    f744:	d80f      	bhi.n	f766 <_dtoa_r+0x18e>
    f746:	4982      	ldr	r1, [pc, #520]	; (f950 <_dtoa_r+0x378>)
    f748:	00db      	lsls	r3, r3, #3
    f74a:	18c9      	adds	r1, r1, r3
    f74c:	6808      	ldr	r0, [r1, #0]
    f74e:	6849      	ldr	r1, [r1, #4]
    f750:	9a06      	ldr	r2, [sp, #24]
    f752:	9b07      	ldr	r3, [sp, #28]
    f754:	f001 ffa2 	bl	1169c <__aeabi_dcmpgt>
    f758:	2800      	cmp	r0, #0
    f75a:	d04b      	beq.n	f7f4 <_dtoa_r+0x21c>
    f75c:	9b03      	ldr	r3, [sp, #12]
    f75e:	3b01      	subs	r3, #1
    f760:	9303      	str	r3, [sp, #12]
    f762:	2300      	movs	r3, #0
    f764:	9316      	str	r3, [sp, #88]	; 0x58
    f766:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f768:	1b9e      	subs	r6, r3, r6
    f76a:	2300      	movs	r3, #0
    f76c:	930b      	str	r3, [sp, #44]	; 0x2c
    f76e:	0033      	movs	r3, r6
    f770:	3b01      	subs	r3, #1
    f772:	930c      	str	r3, [sp, #48]	; 0x30
    f774:	d504      	bpl.n	f780 <_dtoa_r+0x1a8>
    f776:	2301      	movs	r3, #1
    f778:	1b9b      	subs	r3, r3, r6
    f77a:	930b      	str	r3, [sp, #44]	; 0x2c
    f77c:	2300      	movs	r3, #0
    f77e:	930c      	str	r3, [sp, #48]	; 0x30
    f780:	9b03      	ldr	r3, [sp, #12]
    f782:	2b00      	cmp	r3, #0
    f784:	db38      	blt.n	f7f8 <_dtoa_r+0x220>
    f786:	9a03      	ldr	r2, [sp, #12]
    f788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f78a:	4694      	mov	ip, r2
    f78c:	4463      	add	r3, ip
    f78e:	930c      	str	r3, [sp, #48]	; 0x30
    f790:	2300      	movs	r3, #0
    f792:	920f      	str	r2, [sp, #60]	; 0x3c
    f794:	9308      	str	r3, [sp, #32]
    f796:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f798:	2501      	movs	r5, #1
    f79a:	2b09      	cmp	r3, #9
    f79c:	d900      	bls.n	f7a0 <_dtoa_r+0x1c8>
    f79e:	e091      	b.n	f8c4 <_dtoa_r+0x2ec>
    f7a0:	2b05      	cmp	r3, #5
    f7a2:	dd02      	ble.n	f7aa <_dtoa_r+0x1d2>
    f7a4:	2500      	movs	r5, #0
    f7a6:	3b04      	subs	r3, #4
    f7a8:	9322      	str	r3, [sp, #136]	; 0x88
    f7aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f7ac:	1e98      	subs	r0, r3, #2
    f7ae:	2803      	cmp	r0, #3
    f7b0:	d900      	bls.n	f7b4 <_dtoa_r+0x1dc>
    f7b2:	e091      	b.n	f8d8 <_dtoa_r+0x300>
    f7b4:	f001 fdc8 	bl	11348 <__gnu_thumb1_case_uqi>
    f7b8:	76298482 	.word	0x76298482
    f7bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f7be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f7c0:	189e      	adds	r6, r3, r2
    f7c2:	4b64      	ldr	r3, [pc, #400]	; (f954 <_dtoa_r+0x37c>)
    f7c4:	18f2      	adds	r2, r6, r3
    f7c6:	2a20      	cmp	r2, #32
    f7c8:	dd0f      	ble.n	f7ea <_dtoa_r+0x212>
    f7ca:	4b63      	ldr	r3, [pc, #396]	; (f958 <_dtoa_r+0x380>)
    f7cc:	9806      	ldr	r0, [sp, #24]
    f7ce:	18f3      	adds	r3, r6, r3
    f7d0:	40d8      	lsrs	r0, r3
    f7d2:	2340      	movs	r3, #64	; 0x40
    f7d4:	1a9b      	subs	r3, r3, r2
    f7d6:	409c      	lsls	r4, r3
    f7d8:	4320      	orrs	r0, r4
    f7da:	f003 ffc5 	bl	13768 <__aeabi_ui2d>
    f7de:	2301      	movs	r3, #1
    f7e0:	4c5e      	ldr	r4, [pc, #376]	; (f95c <_dtoa_r+0x384>)
    f7e2:	3e01      	subs	r6, #1
    f7e4:	1909      	adds	r1, r1, r4
    f7e6:	9318      	str	r3, [sp, #96]	; 0x60
    f7e8:	e771      	b.n	f6ce <_dtoa_r+0xf6>
    f7ea:	2320      	movs	r3, #32
    f7ec:	9806      	ldr	r0, [sp, #24]
    f7ee:	1a9b      	subs	r3, r3, r2
    f7f0:	4098      	lsls	r0, r3
    f7f2:	e7f2      	b.n	f7da <_dtoa_r+0x202>
    f7f4:	9016      	str	r0, [sp, #88]	; 0x58
    f7f6:	e7b6      	b.n	f766 <_dtoa_r+0x18e>
    f7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7fa:	9a03      	ldr	r2, [sp, #12]
    f7fc:	1a9b      	subs	r3, r3, r2
    f7fe:	930b      	str	r3, [sp, #44]	; 0x2c
    f800:	4253      	negs	r3, r2
    f802:	9308      	str	r3, [sp, #32]
    f804:	2300      	movs	r3, #0
    f806:	930f      	str	r3, [sp, #60]	; 0x3c
    f808:	e7c5      	b.n	f796 <_dtoa_r+0x1be>
    f80a:	2301      	movs	r3, #1
    f80c:	930e      	str	r3, [sp, #56]	; 0x38
    f80e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f810:	2b00      	cmp	r3, #0
    f812:	dd65      	ble.n	f8e0 <_dtoa_r+0x308>
    f814:	001f      	movs	r7, r3
    f816:	930d      	str	r3, [sp, #52]	; 0x34
    f818:	9a04      	ldr	r2, [sp, #16]
    f81a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    f81c:	2200      	movs	r2, #0
    f81e:	6062      	str	r2, [r4, #4]
    f820:	3204      	adds	r2, #4
    f822:	0011      	movs	r1, r2
    f824:	3114      	adds	r1, #20
    f826:	4299      	cmp	r1, r3
    f828:	d95f      	bls.n	f8ea <_dtoa_r+0x312>
    f82a:	6861      	ldr	r1, [r4, #4]
    f82c:	9804      	ldr	r0, [sp, #16]
    f82e:	f000 fece 	bl	105ce <_Balloc>
    f832:	9b04      	ldr	r3, [sp, #16]
    f834:	6020      	str	r0, [r4, #0]
    f836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f838:	681b      	ldr	r3, [r3, #0]
    f83a:	930a      	str	r3, [sp, #40]	; 0x28
    f83c:	2f0e      	cmp	r7, #14
    f83e:	d900      	bls.n	f842 <_dtoa_r+0x26a>
    f840:	e105      	b.n	fa4e <_dtoa_r+0x476>
    f842:	2d00      	cmp	r5, #0
    f844:	d100      	bne.n	f848 <_dtoa_r+0x270>
    f846:	e102      	b.n	fa4e <_dtoa_r+0x476>
    f848:	9b06      	ldr	r3, [sp, #24]
    f84a:	9c07      	ldr	r4, [sp, #28]
    f84c:	9314      	str	r3, [sp, #80]	; 0x50
    f84e:	9415      	str	r4, [sp, #84]	; 0x54
    f850:	9b03      	ldr	r3, [sp, #12]
    f852:	2b00      	cmp	r3, #0
    f854:	dc00      	bgt.n	f858 <_dtoa_r+0x280>
    f856:	e085      	b.n	f964 <_dtoa_r+0x38c>
    f858:	001a      	movs	r2, r3
    f85a:	210f      	movs	r1, #15
    f85c:	4b3c      	ldr	r3, [pc, #240]	; (f950 <_dtoa_r+0x378>)
    f85e:	400a      	ands	r2, r1
    f860:	00d2      	lsls	r2, r2, #3
    f862:	189b      	adds	r3, r3, r2
    f864:	685c      	ldr	r4, [r3, #4]
    f866:	681b      	ldr	r3, [r3, #0]
    f868:	9310      	str	r3, [sp, #64]	; 0x40
    f86a:	9411      	str	r4, [sp, #68]	; 0x44
    f86c:	9b03      	ldr	r3, [sp, #12]
    f86e:	2402      	movs	r4, #2
    f870:	111d      	asrs	r5, r3, #4
    f872:	06eb      	lsls	r3, r5, #27
    f874:	d50a      	bpl.n	f88c <_dtoa_r+0x2b4>
    f876:	4b3a      	ldr	r3, [pc, #232]	; (f960 <_dtoa_r+0x388>)
    f878:	400d      	ands	r5, r1
    f87a:	6a1a      	ldr	r2, [r3, #32]
    f87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f87e:	9814      	ldr	r0, [sp, #80]	; 0x50
    f880:	9915      	ldr	r1, [sp, #84]	; 0x54
    f882:	f002 fd11 	bl	122a8 <__aeabi_ddiv>
    f886:	9006      	str	r0, [sp, #24]
    f888:	9107      	str	r1, [sp, #28]
    f88a:	3401      	adds	r4, #1
    f88c:	4e34      	ldr	r6, [pc, #208]	; (f960 <_dtoa_r+0x388>)
    f88e:	2d00      	cmp	r5, #0
    f890:	d130      	bne.n	f8f4 <_dtoa_r+0x31c>
    f892:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f894:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f896:	9806      	ldr	r0, [sp, #24]
    f898:	9907      	ldr	r1, [sp, #28]
    f89a:	f002 fd05 	bl	122a8 <__aeabi_ddiv>
    f89e:	9006      	str	r0, [sp, #24]
    f8a0:	9107      	str	r1, [sp, #28]
    f8a2:	e07a      	b.n	f99a <_dtoa_r+0x3c2>
    f8a4:	2301      	movs	r3, #1
    f8a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    f8a8:	930e      	str	r3, [sp, #56]	; 0x38
    f8aa:	4694      	mov	ip, r2
    f8ac:	9b03      	ldr	r3, [sp, #12]
    f8ae:	4463      	add	r3, ip
    f8b0:	1c5f      	adds	r7, r3, #1
    f8b2:	930d      	str	r3, [sp, #52]	; 0x34
    f8b4:	1e3b      	subs	r3, r7, #0
    f8b6:	dcaf      	bgt.n	f818 <_dtoa_r+0x240>
    f8b8:	2301      	movs	r3, #1
    f8ba:	e7ad      	b.n	f818 <_dtoa_r+0x240>
    f8bc:	2300      	movs	r3, #0
    f8be:	e7a5      	b.n	f80c <_dtoa_r+0x234>
    f8c0:	2300      	movs	r3, #0
    f8c2:	e7f0      	b.n	f8a6 <_dtoa_r+0x2ce>
    f8c4:	2300      	movs	r3, #0
    f8c6:	950e      	str	r5, [sp, #56]	; 0x38
    f8c8:	9322      	str	r3, [sp, #136]	; 0x88
    f8ca:	3b01      	subs	r3, #1
    f8cc:	2200      	movs	r2, #0
    f8ce:	930d      	str	r3, [sp, #52]	; 0x34
    f8d0:	001f      	movs	r7, r3
    f8d2:	3313      	adds	r3, #19
    f8d4:	9223      	str	r2, [sp, #140]	; 0x8c
    f8d6:	e79f      	b.n	f818 <_dtoa_r+0x240>
    f8d8:	2301      	movs	r3, #1
    f8da:	930e      	str	r3, [sp, #56]	; 0x38
    f8dc:	3b02      	subs	r3, #2
    f8de:	e7f5      	b.n	f8cc <_dtoa_r+0x2f4>
    f8e0:	2301      	movs	r3, #1
    f8e2:	930d      	str	r3, [sp, #52]	; 0x34
    f8e4:	001f      	movs	r7, r3
    f8e6:	001a      	movs	r2, r3
    f8e8:	e7f4      	b.n	f8d4 <_dtoa_r+0x2fc>
    f8ea:	6861      	ldr	r1, [r4, #4]
    f8ec:	0052      	lsls	r2, r2, #1
    f8ee:	3101      	adds	r1, #1
    f8f0:	6061      	str	r1, [r4, #4]
    f8f2:	e796      	b.n	f822 <_dtoa_r+0x24a>
    f8f4:	2301      	movs	r3, #1
    f8f6:	421d      	tst	r5, r3
    f8f8:	d008      	beq.n	f90c <_dtoa_r+0x334>
    f8fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    f8fc:	9911      	ldr	r1, [sp, #68]	; 0x44
    f8fe:	18e4      	adds	r4, r4, r3
    f900:	6832      	ldr	r2, [r6, #0]
    f902:	6873      	ldr	r3, [r6, #4]
    f904:	f003 f904 	bl	12b10 <__aeabi_dmul>
    f908:	9010      	str	r0, [sp, #64]	; 0x40
    f90a:	9111      	str	r1, [sp, #68]	; 0x44
    f90c:	106d      	asrs	r5, r5, #1
    f90e:	3608      	adds	r6, #8
    f910:	e7bd      	b.n	f88e <_dtoa_r+0x2b6>
    f912:	46c0      	nop			; (mov r8, r8)
    f914:	7ff00000 	.word	0x7ff00000
    f918:	0000270f 	.word	0x0000270f
    f91c:	000150e4 	.word	0x000150e4
    f920:	000150e7 	.word	0x000150e7
    f924:	00014fb6 	.word	0x00014fb6
    f928:	00014fb7 	.word	0x00014fb7
    f92c:	3ff00000 	.word	0x3ff00000
    f930:	fffffc01 	.word	0xfffffc01
    f934:	3ff80000 	.word	0x3ff80000
    f938:	636f4361 	.word	0x636f4361
    f93c:	3fd287a7 	.word	0x3fd287a7
    f940:	8b60c8b3 	.word	0x8b60c8b3
    f944:	3fc68a28 	.word	0x3fc68a28
    f948:	509f79fb 	.word	0x509f79fb
    f94c:	3fd34413 	.word	0x3fd34413
    f950:	00015170 	.word	0x00015170
    f954:	00000432 	.word	0x00000432
    f958:	00000412 	.word	0x00000412
    f95c:	fe100000 	.word	0xfe100000
    f960:	00015148 	.word	0x00015148
    f964:	9b03      	ldr	r3, [sp, #12]
    f966:	2402      	movs	r4, #2
    f968:	2b00      	cmp	r3, #0
    f96a:	d016      	beq.n	f99a <_dtoa_r+0x3c2>
    f96c:	9814      	ldr	r0, [sp, #80]	; 0x50
    f96e:	9915      	ldr	r1, [sp, #84]	; 0x54
    f970:	425d      	negs	r5, r3
    f972:	230f      	movs	r3, #15
    f974:	4aca      	ldr	r2, [pc, #808]	; (fca0 <_dtoa_r+0x6c8>)
    f976:	402b      	ands	r3, r5
    f978:	00db      	lsls	r3, r3, #3
    f97a:	18d3      	adds	r3, r2, r3
    f97c:	681a      	ldr	r2, [r3, #0]
    f97e:	685b      	ldr	r3, [r3, #4]
    f980:	f003 f8c6 	bl	12b10 <__aeabi_dmul>
    f984:	2300      	movs	r3, #0
    f986:	9006      	str	r0, [sp, #24]
    f988:	9107      	str	r1, [sp, #28]
    f98a:	4ec6      	ldr	r6, [pc, #792]	; (fca4 <_dtoa_r+0x6cc>)
    f98c:	112d      	asrs	r5, r5, #4
    f98e:	2d00      	cmp	r5, #0
    f990:	d000      	beq.n	f994 <_dtoa_r+0x3bc>
    f992:	e08c      	b.n	faae <_dtoa_r+0x4d6>
    f994:	2b00      	cmp	r3, #0
    f996:	d000      	beq.n	f99a <_dtoa_r+0x3c2>
    f998:	e781      	b.n	f89e <_dtoa_r+0x2c6>
    f99a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f99c:	2b00      	cmp	r3, #0
    f99e:	d100      	bne.n	f9a2 <_dtoa_r+0x3ca>
    f9a0:	e091      	b.n	fac6 <_dtoa_r+0x4ee>
    f9a2:	9a06      	ldr	r2, [sp, #24]
    f9a4:	9b07      	ldr	r3, [sp, #28]
    f9a6:	9210      	str	r2, [sp, #64]	; 0x40
    f9a8:	9311      	str	r3, [sp, #68]	; 0x44
    f9aa:	9810      	ldr	r0, [sp, #64]	; 0x40
    f9ac:	9911      	ldr	r1, [sp, #68]	; 0x44
    f9ae:	2200      	movs	r2, #0
    f9b0:	4bbd      	ldr	r3, [pc, #756]	; (fca8 <_dtoa_r+0x6d0>)
    f9b2:	f001 fe5f 	bl	11674 <__aeabi_dcmplt>
    f9b6:	2800      	cmp	r0, #0
    f9b8:	d100      	bne.n	f9bc <_dtoa_r+0x3e4>
    f9ba:	e084      	b.n	fac6 <_dtoa_r+0x4ee>
    f9bc:	2f00      	cmp	r7, #0
    f9be:	d100      	bne.n	f9c2 <_dtoa_r+0x3ea>
    f9c0:	e081      	b.n	fac6 <_dtoa_r+0x4ee>
    f9c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f9c4:	2b00      	cmp	r3, #0
    f9c6:	dd3e      	ble.n	fa46 <_dtoa_r+0x46e>
    f9c8:	9810      	ldr	r0, [sp, #64]	; 0x40
    f9ca:	9911      	ldr	r1, [sp, #68]	; 0x44
    f9cc:	9b03      	ldr	r3, [sp, #12]
    f9ce:	2200      	movs	r2, #0
    f9d0:	1e5e      	subs	r6, r3, #1
    f9d2:	4bb6      	ldr	r3, [pc, #728]	; (fcac <_dtoa_r+0x6d4>)
    f9d4:	f003 f89c 	bl	12b10 <__aeabi_dmul>
    f9d8:	9006      	str	r0, [sp, #24]
    f9da:	9107      	str	r1, [sp, #28]
    f9dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f9de:	3401      	adds	r4, #1
    f9e0:	0020      	movs	r0, r4
    f9e2:	f003 fe7f 	bl	136e4 <__aeabi_i2d>
    f9e6:	9a06      	ldr	r2, [sp, #24]
    f9e8:	9b07      	ldr	r3, [sp, #28]
    f9ea:	f003 f891 	bl	12b10 <__aeabi_dmul>
    f9ee:	2200      	movs	r2, #0
    f9f0:	4baf      	ldr	r3, [pc, #700]	; (fcb0 <_dtoa_r+0x6d8>)
    f9f2:	f002 f949 	bl	11c88 <__aeabi_dadd>
    f9f6:	9012      	str	r0, [sp, #72]	; 0x48
    f9f8:	9113      	str	r1, [sp, #76]	; 0x4c
    f9fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f9fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    f9fe:	4aad      	ldr	r2, [pc, #692]	; (fcb4 <_dtoa_r+0x6dc>)
    fa00:	9310      	str	r3, [sp, #64]	; 0x40
    fa02:	9411      	str	r4, [sp, #68]	; 0x44
    fa04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fa06:	189c      	adds	r4, r3, r2
    fa08:	9411      	str	r4, [sp, #68]	; 0x44
    fa0a:	2d00      	cmp	r5, #0
    fa0c:	d15e      	bne.n	facc <_dtoa_r+0x4f4>
    fa0e:	9806      	ldr	r0, [sp, #24]
    fa10:	9907      	ldr	r1, [sp, #28]
    fa12:	2200      	movs	r2, #0
    fa14:	4ba8      	ldr	r3, [pc, #672]	; (fcb8 <_dtoa_r+0x6e0>)
    fa16:	f003 fafb 	bl	13010 <__aeabi_dsub>
    fa1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fa1c:	0023      	movs	r3, r4
    fa1e:	9006      	str	r0, [sp, #24]
    fa20:	9107      	str	r1, [sp, #28]
    fa22:	f001 fe3b 	bl	1169c <__aeabi_dcmpgt>
    fa26:	2800      	cmp	r0, #0
    fa28:	d000      	beq.n	fa2c <_dtoa_r+0x454>
    fa2a:	e301      	b.n	10030 <_dtoa_r+0xa58>
    fa2c:	48a3      	ldr	r0, [pc, #652]	; (fcbc <_dtoa_r+0x6e4>)
    fa2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fa30:	4684      	mov	ip, r0
    fa32:	4461      	add	r1, ip
    fa34:	000b      	movs	r3, r1
    fa36:	9806      	ldr	r0, [sp, #24]
    fa38:	9907      	ldr	r1, [sp, #28]
    fa3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fa3c:	f001 fe1a 	bl	11674 <__aeabi_dcmplt>
    fa40:	2800      	cmp	r0, #0
    fa42:	d000      	beq.n	fa46 <_dtoa_r+0x46e>
    fa44:	e2e8      	b.n	10018 <_dtoa_r+0xa40>
    fa46:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fa48:	9c15      	ldr	r4, [sp, #84]	; 0x54
    fa4a:	9306      	str	r3, [sp, #24]
    fa4c:	9407      	str	r4, [sp, #28]
    fa4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fa50:	2b00      	cmp	r3, #0
    fa52:	da00      	bge.n	fa56 <_dtoa_r+0x47e>
    fa54:	e157      	b.n	fd06 <_dtoa_r+0x72e>
    fa56:	9a03      	ldr	r2, [sp, #12]
    fa58:	2a0e      	cmp	r2, #14
    fa5a:	dd00      	ble.n	fa5e <_dtoa_r+0x486>
    fa5c:	e153      	b.n	fd06 <_dtoa_r+0x72e>
    fa5e:	4b90      	ldr	r3, [pc, #576]	; (fca0 <_dtoa_r+0x6c8>)
    fa60:	00d2      	lsls	r2, r2, #3
    fa62:	189b      	adds	r3, r3, r2
    fa64:	685c      	ldr	r4, [r3, #4]
    fa66:	681b      	ldr	r3, [r3, #0]
    fa68:	9308      	str	r3, [sp, #32]
    fa6a:	9409      	str	r4, [sp, #36]	; 0x24
    fa6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fa6e:	2b00      	cmp	r3, #0
    fa70:	db00      	blt.n	fa74 <_dtoa_r+0x49c>
    fa72:	e0ce      	b.n	fc12 <_dtoa_r+0x63a>
    fa74:	2f00      	cmp	r7, #0
    fa76:	dd00      	ble.n	fa7a <_dtoa_r+0x4a2>
    fa78:	e0cb      	b.n	fc12 <_dtoa_r+0x63a>
    fa7a:	d000      	beq.n	fa7e <_dtoa_r+0x4a6>
    fa7c:	e2cf      	b.n	1001e <_dtoa_r+0xa46>
    fa7e:	9808      	ldr	r0, [sp, #32]
    fa80:	9909      	ldr	r1, [sp, #36]	; 0x24
    fa82:	2200      	movs	r2, #0
    fa84:	4b8c      	ldr	r3, [pc, #560]	; (fcb8 <_dtoa_r+0x6e0>)
    fa86:	f003 f843 	bl	12b10 <__aeabi_dmul>
    fa8a:	9a06      	ldr	r2, [sp, #24]
    fa8c:	9b07      	ldr	r3, [sp, #28]
    fa8e:	f001 fe0f 	bl	116b0 <__aeabi_dcmpge>
    fa92:	003e      	movs	r6, r7
    fa94:	9708      	str	r7, [sp, #32]
    fa96:	2800      	cmp	r0, #0
    fa98:	d000      	beq.n	fa9c <_dtoa_r+0x4c4>
    fa9a:	e2a4      	b.n	ffe6 <_dtoa_r+0xa0e>
    fa9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    faa0:	1c5d      	adds	r5, r3, #1
    faa2:	2331      	movs	r3, #49	; 0x31
    faa4:	7013      	strb	r3, [r2, #0]
    faa6:	9b03      	ldr	r3, [sp, #12]
    faa8:	3301      	adds	r3, #1
    faaa:	9303      	str	r3, [sp, #12]
    faac:	e29f      	b.n	ffee <_dtoa_r+0xa16>
    faae:	2201      	movs	r2, #1
    fab0:	4215      	tst	r5, r2
    fab2:	d005      	beq.n	fac0 <_dtoa_r+0x4e8>
    fab4:	18a4      	adds	r4, r4, r2
    fab6:	6832      	ldr	r2, [r6, #0]
    fab8:	6873      	ldr	r3, [r6, #4]
    faba:	f003 f829 	bl	12b10 <__aeabi_dmul>
    fabe:	2301      	movs	r3, #1
    fac0:	106d      	asrs	r5, r5, #1
    fac2:	3608      	adds	r6, #8
    fac4:	e763      	b.n	f98e <_dtoa_r+0x3b6>
    fac6:	9e03      	ldr	r6, [sp, #12]
    fac8:	003d      	movs	r5, r7
    faca:	e789      	b.n	f9e0 <_dtoa_r+0x408>
    facc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    face:	1e69      	subs	r1, r5, #1
    fad0:	1952      	adds	r2, r2, r5
    fad2:	9217      	str	r2, [sp, #92]	; 0x5c
    fad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fad6:	4b72      	ldr	r3, [pc, #456]	; (fca0 <_dtoa_r+0x6c8>)
    fad8:	00c9      	lsls	r1, r1, #3
    fada:	2a00      	cmp	r2, #0
    fadc:	d04a      	beq.n	fb74 <_dtoa_r+0x59c>
    fade:	185b      	adds	r3, r3, r1
    fae0:	681a      	ldr	r2, [r3, #0]
    fae2:	685b      	ldr	r3, [r3, #4]
    fae4:	2000      	movs	r0, #0
    fae6:	4976      	ldr	r1, [pc, #472]	; (fcc0 <_dtoa_r+0x6e8>)
    fae8:	f002 fbde 	bl	122a8 <__aeabi_ddiv>
    faec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    faee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    faf0:	f003 fa8e 	bl	13010 <__aeabi_dsub>
    faf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    faf6:	9010      	str	r0, [sp, #64]	; 0x40
    faf8:	9111      	str	r1, [sp, #68]	; 0x44
    fafa:	9312      	str	r3, [sp, #72]	; 0x48
    fafc:	9806      	ldr	r0, [sp, #24]
    fafe:	9907      	ldr	r1, [sp, #28]
    fb00:	f003 fdbc 	bl	1367c <__aeabi_d2iz>
    fb04:	0004      	movs	r4, r0
    fb06:	f003 fded 	bl	136e4 <__aeabi_i2d>
    fb0a:	0002      	movs	r2, r0
    fb0c:	000b      	movs	r3, r1
    fb0e:	9806      	ldr	r0, [sp, #24]
    fb10:	9907      	ldr	r1, [sp, #28]
    fb12:	f003 fa7d 	bl	13010 <__aeabi_dsub>
    fb16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fb18:	3430      	adds	r4, #48	; 0x30
    fb1a:	1c5d      	adds	r5, r3, #1
    fb1c:	701c      	strb	r4, [r3, #0]
    fb1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fb22:	9006      	str	r0, [sp, #24]
    fb24:	9107      	str	r1, [sp, #28]
    fb26:	f001 fda5 	bl	11674 <__aeabi_dcmplt>
    fb2a:	2800      	cmp	r0, #0
    fb2c:	d165      	bne.n	fbfa <_dtoa_r+0x622>
    fb2e:	9a06      	ldr	r2, [sp, #24]
    fb30:	9b07      	ldr	r3, [sp, #28]
    fb32:	2000      	movs	r0, #0
    fb34:	495c      	ldr	r1, [pc, #368]	; (fca8 <_dtoa_r+0x6d0>)
    fb36:	f003 fa6b 	bl	13010 <__aeabi_dsub>
    fb3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fb3e:	f001 fd99 	bl	11674 <__aeabi_dcmplt>
    fb42:	2800      	cmp	r0, #0
    fb44:	d000      	beq.n	fb48 <_dtoa_r+0x570>
    fb46:	e0be      	b.n	fcc6 <_dtoa_r+0x6ee>
    fb48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fb4a:	429d      	cmp	r5, r3
    fb4c:	d100      	bne.n	fb50 <_dtoa_r+0x578>
    fb4e:	e77a      	b.n	fa46 <_dtoa_r+0x46e>
    fb50:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb52:	9911      	ldr	r1, [sp, #68]	; 0x44
    fb54:	2200      	movs	r2, #0
    fb56:	4b55      	ldr	r3, [pc, #340]	; (fcac <_dtoa_r+0x6d4>)
    fb58:	f002 ffda 	bl	12b10 <__aeabi_dmul>
    fb5c:	2200      	movs	r2, #0
    fb5e:	9010      	str	r0, [sp, #64]	; 0x40
    fb60:	9111      	str	r1, [sp, #68]	; 0x44
    fb62:	9806      	ldr	r0, [sp, #24]
    fb64:	9907      	ldr	r1, [sp, #28]
    fb66:	4b51      	ldr	r3, [pc, #324]	; (fcac <_dtoa_r+0x6d4>)
    fb68:	f002 ffd2 	bl	12b10 <__aeabi_dmul>
    fb6c:	9512      	str	r5, [sp, #72]	; 0x48
    fb6e:	9006      	str	r0, [sp, #24]
    fb70:	9107      	str	r1, [sp, #28]
    fb72:	e7c3      	b.n	fafc <_dtoa_r+0x524>
    fb74:	1859      	adds	r1, r3, r1
    fb76:	6808      	ldr	r0, [r1, #0]
    fb78:	6849      	ldr	r1, [r1, #4]
    fb7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fb7e:	f002 ffc7 	bl	12b10 <__aeabi_dmul>
    fb82:	9010      	str	r0, [sp, #64]	; 0x40
    fb84:	9111      	str	r1, [sp, #68]	; 0x44
    fb86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fb88:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    fb8a:	9806      	ldr	r0, [sp, #24]
    fb8c:	9907      	ldr	r1, [sp, #28]
    fb8e:	f003 fd75 	bl	1367c <__aeabi_d2iz>
    fb92:	9012      	str	r0, [sp, #72]	; 0x48
    fb94:	f003 fda6 	bl	136e4 <__aeabi_i2d>
    fb98:	0002      	movs	r2, r0
    fb9a:	000b      	movs	r3, r1
    fb9c:	9806      	ldr	r0, [sp, #24]
    fb9e:	9907      	ldr	r1, [sp, #28]
    fba0:	f003 fa36 	bl	13010 <__aeabi_dsub>
    fba4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fba6:	9006      	str	r0, [sp, #24]
    fba8:	9107      	str	r1, [sp, #28]
    fbaa:	3330      	adds	r3, #48	; 0x30
    fbac:	7023      	strb	r3, [r4, #0]
    fbae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fbb0:	3401      	adds	r4, #1
    fbb2:	2200      	movs	r2, #0
    fbb4:	42a3      	cmp	r3, r4
    fbb6:	d124      	bne.n	fc02 <_dtoa_r+0x62a>
    fbb8:	4b41      	ldr	r3, [pc, #260]	; (fcc0 <_dtoa_r+0x6e8>)
    fbba:	9810      	ldr	r0, [sp, #64]	; 0x40
    fbbc:	9911      	ldr	r1, [sp, #68]	; 0x44
    fbbe:	f002 f863 	bl	11c88 <__aeabi_dadd>
    fbc2:	0002      	movs	r2, r0
    fbc4:	000b      	movs	r3, r1
    fbc6:	9806      	ldr	r0, [sp, #24]
    fbc8:	9907      	ldr	r1, [sp, #28]
    fbca:	f001 fd67 	bl	1169c <__aeabi_dcmpgt>
    fbce:	2800      	cmp	r0, #0
    fbd0:	d000      	beq.n	fbd4 <_dtoa_r+0x5fc>
    fbd2:	e078      	b.n	fcc6 <_dtoa_r+0x6ee>
    fbd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fbd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fbd8:	2000      	movs	r0, #0
    fbda:	4939      	ldr	r1, [pc, #228]	; (fcc0 <_dtoa_r+0x6e8>)
    fbdc:	f003 fa18 	bl	13010 <__aeabi_dsub>
    fbe0:	0002      	movs	r2, r0
    fbe2:	000b      	movs	r3, r1
    fbe4:	9806      	ldr	r0, [sp, #24]
    fbe6:	9907      	ldr	r1, [sp, #28]
    fbe8:	f001 fd44 	bl	11674 <__aeabi_dcmplt>
    fbec:	2800      	cmp	r0, #0
    fbee:	d100      	bne.n	fbf2 <_dtoa_r+0x61a>
    fbf0:	e729      	b.n	fa46 <_dtoa_r+0x46e>
    fbf2:	1e6b      	subs	r3, r5, #1
    fbf4:	781a      	ldrb	r2, [r3, #0]
    fbf6:	2a30      	cmp	r2, #48	; 0x30
    fbf8:	d001      	beq.n	fbfe <_dtoa_r+0x626>
    fbfa:	9603      	str	r6, [sp, #12]
    fbfc:	e03f      	b.n	fc7e <_dtoa_r+0x6a6>
    fbfe:	001d      	movs	r5, r3
    fc00:	e7f7      	b.n	fbf2 <_dtoa_r+0x61a>
    fc02:	9806      	ldr	r0, [sp, #24]
    fc04:	9907      	ldr	r1, [sp, #28]
    fc06:	4b29      	ldr	r3, [pc, #164]	; (fcac <_dtoa_r+0x6d4>)
    fc08:	f002 ff82 	bl	12b10 <__aeabi_dmul>
    fc0c:	9006      	str	r0, [sp, #24]
    fc0e:	9107      	str	r1, [sp, #28]
    fc10:	e7bb      	b.n	fb8a <_dtoa_r+0x5b2>
    fc12:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    fc14:	9a08      	ldr	r2, [sp, #32]
    fc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc18:	9806      	ldr	r0, [sp, #24]
    fc1a:	9907      	ldr	r1, [sp, #28]
    fc1c:	f002 fb44 	bl	122a8 <__aeabi_ddiv>
    fc20:	f003 fd2c 	bl	1367c <__aeabi_d2iz>
    fc24:	0004      	movs	r4, r0
    fc26:	f003 fd5d 	bl	136e4 <__aeabi_i2d>
    fc2a:	9a08      	ldr	r2, [sp, #32]
    fc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc2e:	f002 ff6f 	bl	12b10 <__aeabi_dmul>
    fc32:	000b      	movs	r3, r1
    fc34:	0002      	movs	r2, r0
    fc36:	9806      	ldr	r0, [sp, #24]
    fc38:	9907      	ldr	r1, [sp, #28]
    fc3a:	f003 f9e9 	bl	13010 <__aeabi_dsub>
    fc3e:	0023      	movs	r3, r4
    fc40:	3330      	adds	r3, #48	; 0x30
    fc42:	7033      	strb	r3, [r6, #0]
    fc44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc46:	1c75      	adds	r5, r6, #1
    fc48:	1aeb      	subs	r3, r5, r3
    fc4a:	429f      	cmp	r7, r3
    fc4c:	d14c      	bne.n	fce8 <_dtoa_r+0x710>
    fc4e:	0002      	movs	r2, r0
    fc50:	000b      	movs	r3, r1
    fc52:	f002 f819 	bl	11c88 <__aeabi_dadd>
    fc56:	0006      	movs	r6, r0
    fc58:	000f      	movs	r7, r1
    fc5a:	0002      	movs	r2, r0
    fc5c:	000b      	movs	r3, r1
    fc5e:	9808      	ldr	r0, [sp, #32]
    fc60:	9909      	ldr	r1, [sp, #36]	; 0x24
    fc62:	f001 fd07 	bl	11674 <__aeabi_dcmplt>
    fc66:	2800      	cmp	r0, #0
    fc68:	d12c      	bne.n	fcc4 <_dtoa_r+0x6ec>
    fc6a:	9808      	ldr	r0, [sp, #32]
    fc6c:	9909      	ldr	r1, [sp, #36]	; 0x24
    fc6e:	0032      	movs	r2, r6
    fc70:	003b      	movs	r3, r7
    fc72:	f001 fcf9 	bl	11668 <__aeabi_dcmpeq>
    fc76:	2800      	cmp	r0, #0
    fc78:	d001      	beq.n	fc7e <_dtoa_r+0x6a6>
    fc7a:	07e3      	lsls	r3, r4, #31
    fc7c:	d422      	bmi.n	fcc4 <_dtoa_r+0x6ec>
    fc7e:	9905      	ldr	r1, [sp, #20]
    fc80:	9804      	ldr	r0, [sp, #16]
    fc82:	f000 fcdc 	bl	1063e <_Bfree>
    fc86:	2300      	movs	r3, #0
    fc88:	702b      	strb	r3, [r5, #0]
    fc8a:	9b03      	ldr	r3, [sp, #12]
    fc8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    fc8e:	3301      	adds	r3, #1
    fc90:	6013      	str	r3, [r2, #0]
    fc92:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fc94:	2b00      	cmp	r3, #0
    fc96:	d100      	bne.n	fc9a <_dtoa_r+0x6c2>
    fc98:	e275      	b.n	10186 <_dtoa_r+0xbae>
    fc9a:	601d      	str	r5, [r3, #0]
    fc9c:	e273      	b.n	10186 <_dtoa_r+0xbae>
    fc9e:	46c0      	nop			; (mov r8, r8)
    fca0:	00015170 	.word	0x00015170
    fca4:	00015148 	.word	0x00015148
    fca8:	3ff00000 	.word	0x3ff00000
    fcac:	40240000 	.word	0x40240000
    fcb0:	401c0000 	.word	0x401c0000
    fcb4:	fcc00000 	.word	0xfcc00000
    fcb8:	40140000 	.word	0x40140000
    fcbc:	7cc00000 	.word	0x7cc00000
    fcc0:	3fe00000 	.word	0x3fe00000
    fcc4:	9e03      	ldr	r6, [sp, #12]
    fcc6:	1e6b      	subs	r3, r5, #1
    fcc8:	781a      	ldrb	r2, [r3, #0]
    fcca:	2a39      	cmp	r2, #57	; 0x39
    fccc:	d106      	bne.n	fcdc <_dtoa_r+0x704>
    fcce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fcd0:	429a      	cmp	r2, r3
    fcd2:	d107      	bne.n	fce4 <_dtoa_r+0x70c>
    fcd4:	2330      	movs	r3, #48	; 0x30
    fcd6:	7013      	strb	r3, [r2, #0]
    fcd8:	0013      	movs	r3, r2
    fcda:	3601      	adds	r6, #1
    fcdc:	781a      	ldrb	r2, [r3, #0]
    fcde:	3201      	adds	r2, #1
    fce0:	701a      	strb	r2, [r3, #0]
    fce2:	e78a      	b.n	fbfa <_dtoa_r+0x622>
    fce4:	001d      	movs	r5, r3
    fce6:	e7ee      	b.n	fcc6 <_dtoa_r+0x6ee>
    fce8:	2200      	movs	r2, #0
    fcea:	4bcf      	ldr	r3, [pc, #828]	; (10028 <_dtoa_r+0xa50>)
    fcec:	f002 ff10 	bl	12b10 <__aeabi_dmul>
    fcf0:	2200      	movs	r2, #0
    fcf2:	2300      	movs	r3, #0
    fcf4:	9006      	str	r0, [sp, #24]
    fcf6:	9107      	str	r1, [sp, #28]
    fcf8:	002e      	movs	r6, r5
    fcfa:	f001 fcb5 	bl	11668 <__aeabi_dcmpeq>
    fcfe:	2800      	cmp	r0, #0
    fd00:	d100      	bne.n	fd04 <_dtoa_r+0x72c>
    fd02:	e787      	b.n	fc14 <_dtoa_r+0x63c>
    fd04:	e7bb      	b.n	fc7e <_dtoa_r+0x6a6>
    fd06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fd08:	2a00      	cmp	r2, #0
    fd0a:	d100      	bne.n	fd0e <_dtoa_r+0x736>
    fd0c:	e087      	b.n	fe1e <_dtoa_r+0x846>
    fd0e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    fd10:	2a01      	cmp	r2, #1
    fd12:	dc6e      	bgt.n	fdf2 <_dtoa_r+0x81a>
    fd14:	9a18      	ldr	r2, [sp, #96]	; 0x60
    fd16:	2a00      	cmp	r2, #0
    fd18:	d067      	beq.n	fdea <_dtoa_r+0x812>
    fd1a:	4ac4      	ldr	r2, [pc, #784]	; (1002c <_dtoa_r+0xa54>)
    fd1c:	189b      	adds	r3, r3, r2
    fd1e:	9d08      	ldr	r5, [sp, #32]
    fd20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    fd22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fd24:	2101      	movs	r1, #1
    fd26:	18d2      	adds	r2, r2, r3
    fd28:	920b      	str	r2, [sp, #44]	; 0x2c
    fd2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fd2c:	9804      	ldr	r0, [sp, #16]
    fd2e:	18d3      	adds	r3, r2, r3
    fd30:	930c      	str	r3, [sp, #48]	; 0x30
    fd32:	f000 fd22 	bl	1077a <__i2b>
    fd36:	0006      	movs	r6, r0
    fd38:	2c00      	cmp	r4, #0
    fd3a:	dd0e      	ble.n	fd5a <_dtoa_r+0x782>
    fd3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd3e:	2b00      	cmp	r3, #0
    fd40:	dd0b      	ble.n	fd5a <_dtoa_r+0x782>
    fd42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fd44:	0023      	movs	r3, r4
    fd46:	4294      	cmp	r4, r2
    fd48:	dd00      	ble.n	fd4c <_dtoa_r+0x774>
    fd4a:	0013      	movs	r3, r2
    fd4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fd4e:	1ae4      	subs	r4, r4, r3
    fd50:	1ad2      	subs	r2, r2, r3
    fd52:	920b      	str	r2, [sp, #44]	; 0x2c
    fd54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fd56:	1ad3      	subs	r3, r2, r3
    fd58:	930c      	str	r3, [sp, #48]	; 0x30
    fd5a:	9b08      	ldr	r3, [sp, #32]
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	d01e      	beq.n	fd9e <_dtoa_r+0x7c6>
    fd60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd62:	2b00      	cmp	r3, #0
    fd64:	d05f      	beq.n	fe26 <_dtoa_r+0x84e>
    fd66:	2d00      	cmp	r5, #0
    fd68:	dd11      	ble.n	fd8e <_dtoa_r+0x7b6>
    fd6a:	0031      	movs	r1, r6
    fd6c:	002a      	movs	r2, r5
    fd6e:	9804      	ldr	r0, [sp, #16]
    fd70:	f000 fd9c 	bl	108ac <__pow5mult>
    fd74:	9a05      	ldr	r2, [sp, #20]
    fd76:	0001      	movs	r1, r0
    fd78:	0006      	movs	r6, r0
    fd7a:	9804      	ldr	r0, [sp, #16]
    fd7c:	f000 fd06 	bl	1078c <__multiply>
    fd80:	9905      	ldr	r1, [sp, #20]
    fd82:	9010      	str	r0, [sp, #64]	; 0x40
    fd84:	9804      	ldr	r0, [sp, #16]
    fd86:	f000 fc5a 	bl	1063e <_Bfree>
    fd8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fd8c:	9305      	str	r3, [sp, #20]
    fd8e:	9b08      	ldr	r3, [sp, #32]
    fd90:	1b5a      	subs	r2, r3, r5
    fd92:	d004      	beq.n	fd9e <_dtoa_r+0x7c6>
    fd94:	9905      	ldr	r1, [sp, #20]
    fd96:	9804      	ldr	r0, [sp, #16]
    fd98:	f000 fd88 	bl	108ac <__pow5mult>
    fd9c:	9005      	str	r0, [sp, #20]
    fd9e:	2101      	movs	r1, #1
    fda0:	9804      	ldr	r0, [sp, #16]
    fda2:	f000 fcea 	bl	1077a <__i2b>
    fda6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fda8:	9008      	str	r0, [sp, #32]
    fdaa:	2b00      	cmp	r3, #0
    fdac:	dd3d      	ble.n	fe2a <_dtoa_r+0x852>
    fdae:	001a      	movs	r2, r3
    fdb0:	0001      	movs	r1, r0
    fdb2:	9804      	ldr	r0, [sp, #16]
    fdb4:	f000 fd7a 	bl	108ac <__pow5mult>
    fdb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fdba:	9008      	str	r0, [sp, #32]
    fdbc:	2500      	movs	r5, #0
    fdbe:	2b01      	cmp	r3, #1
    fdc0:	dc3b      	bgt.n	fe3a <_dtoa_r+0x862>
    fdc2:	2500      	movs	r5, #0
    fdc4:	9b06      	ldr	r3, [sp, #24]
    fdc6:	42ab      	cmp	r3, r5
    fdc8:	d133      	bne.n	fe32 <_dtoa_r+0x85a>
    fdca:	9b07      	ldr	r3, [sp, #28]
    fdcc:	031b      	lsls	r3, r3, #12
    fdce:	42ab      	cmp	r3, r5
    fdd0:	d12f      	bne.n	fe32 <_dtoa_r+0x85a>
    fdd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fdd4:	9a07      	ldr	r2, [sp, #28]
    fdd6:	4213      	tst	r3, r2
    fdd8:	d02b      	beq.n	fe32 <_dtoa_r+0x85a>
    fdda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fddc:	3501      	adds	r5, #1
    fdde:	3301      	adds	r3, #1
    fde0:	930b      	str	r3, [sp, #44]	; 0x2c
    fde2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fde4:	3301      	adds	r3, #1
    fde6:	930c      	str	r3, [sp, #48]	; 0x30
    fde8:	e023      	b.n	fe32 <_dtoa_r+0x85a>
    fdea:	2336      	movs	r3, #54	; 0x36
    fdec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fdee:	1a9b      	subs	r3, r3, r2
    fdf0:	e795      	b.n	fd1e <_dtoa_r+0x746>
    fdf2:	9b08      	ldr	r3, [sp, #32]
    fdf4:	1e7d      	subs	r5, r7, #1
    fdf6:	42ab      	cmp	r3, r5
    fdf8:	db06      	blt.n	fe08 <_dtoa_r+0x830>
    fdfa:	1b5d      	subs	r5, r3, r5
    fdfc:	2f00      	cmp	r7, #0
    fdfe:	da0b      	bge.n	fe18 <_dtoa_r+0x840>
    fe00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe02:	1bdc      	subs	r4, r3, r7
    fe04:	2300      	movs	r3, #0
    fe06:	e78c      	b.n	fd22 <_dtoa_r+0x74a>
    fe08:	9b08      	ldr	r3, [sp, #32]
    fe0a:	9508      	str	r5, [sp, #32]
    fe0c:	1aea      	subs	r2, r5, r3
    fe0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fe10:	2500      	movs	r5, #0
    fe12:	189b      	adds	r3, r3, r2
    fe14:	930f      	str	r3, [sp, #60]	; 0x3c
    fe16:	e7f1      	b.n	fdfc <_dtoa_r+0x824>
    fe18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    fe1a:	003b      	movs	r3, r7
    fe1c:	e781      	b.n	fd22 <_dtoa_r+0x74a>
    fe1e:	9d08      	ldr	r5, [sp, #32]
    fe20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    fe22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    fe24:	e788      	b.n	fd38 <_dtoa_r+0x760>
    fe26:	9a08      	ldr	r2, [sp, #32]
    fe28:	e7b4      	b.n	fd94 <_dtoa_r+0x7bc>
    fe2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fe2c:	2500      	movs	r5, #0
    fe2e:	2b01      	cmp	r3, #1
    fe30:	ddc7      	ble.n	fdc2 <_dtoa_r+0x7ea>
    fe32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fe34:	2001      	movs	r0, #1
    fe36:	2b00      	cmp	r3, #0
    fe38:	d00b      	beq.n	fe52 <_dtoa_r+0x87a>
    fe3a:	9b08      	ldr	r3, [sp, #32]
    fe3c:	9a08      	ldr	r2, [sp, #32]
    fe3e:	691b      	ldr	r3, [r3, #16]
    fe40:	930f      	str	r3, [sp, #60]	; 0x3c
    fe42:	3303      	adds	r3, #3
    fe44:	009b      	lsls	r3, r3, #2
    fe46:	18d3      	adds	r3, r2, r3
    fe48:	6858      	ldr	r0, [r3, #4]
    fe4a:	f000 fc4d 	bl	106e8 <__hi0bits>
    fe4e:	2320      	movs	r3, #32
    fe50:	1a18      	subs	r0, r3, r0
    fe52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe54:	18c0      	adds	r0, r0, r3
    fe56:	231f      	movs	r3, #31
    fe58:	4018      	ands	r0, r3
    fe5a:	d100      	bne.n	fe5e <_dtoa_r+0x886>
    fe5c:	e0ab      	b.n	ffb6 <_dtoa_r+0x9de>
    fe5e:	3301      	adds	r3, #1
    fe60:	1a1b      	subs	r3, r3, r0
    fe62:	2b04      	cmp	r3, #4
    fe64:	dc00      	bgt.n	fe68 <_dtoa_r+0x890>
    fe66:	e09b      	b.n	ffa0 <_dtoa_r+0x9c8>
    fe68:	231c      	movs	r3, #28
    fe6a:	1a18      	subs	r0, r3, r0
    fe6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe6e:	1824      	adds	r4, r4, r0
    fe70:	181b      	adds	r3, r3, r0
    fe72:	930b      	str	r3, [sp, #44]	; 0x2c
    fe74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe76:	181b      	adds	r3, r3, r0
    fe78:	930c      	str	r3, [sp, #48]	; 0x30
    fe7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe7c:	2b00      	cmp	r3, #0
    fe7e:	dd05      	ble.n	fe8c <_dtoa_r+0x8b4>
    fe80:	001a      	movs	r2, r3
    fe82:	9905      	ldr	r1, [sp, #20]
    fe84:	9804      	ldr	r0, [sp, #16]
    fe86:	f000 fd63 	bl	10950 <__lshift>
    fe8a:	9005      	str	r0, [sp, #20]
    fe8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe8e:	2b00      	cmp	r3, #0
    fe90:	dd05      	ble.n	fe9e <_dtoa_r+0x8c6>
    fe92:	001a      	movs	r2, r3
    fe94:	9908      	ldr	r1, [sp, #32]
    fe96:	9804      	ldr	r0, [sp, #16]
    fe98:	f000 fd5a 	bl	10950 <__lshift>
    fe9c:	9008      	str	r0, [sp, #32]
    fe9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fea0:	2b00      	cmp	r3, #0
    fea2:	d100      	bne.n	fea6 <_dtoa_r+0x8ce>
    fea4:	e089      	b.n	ffba <_dtoa_r+0x9e2>
    fea6:	9908      	ldr	r1, [sp, #32]
    fea8:	9805      	ldr	r0, [sp, #20]
    feaa:	f000 fda2 	bl	109f2 <__mcmp>
    feae:	2800      	cmp	r0, #0
    feb0:	db00      	blt.n	feb4 <_dtoa_r+0x8dc>
    feb2:	e082      	b.n	ffba <_dtoa_r+0x9e2>
    feb4:	9b03      	ldr	r3, [sp, #12]
    feb6:	220a      	movs	r2, #10
    feb8:	3b01      	subs	r3, #1
    feba:	9303      	str	r3, [sp, #12]
    febc:	9905      	ldr	r1, [sp, #20]
    febe:	2300      	movs	r3, #0
    fec0:	9804      	ldr	r0, [sp, #16]
    fec2:	f000 fbd5 	bl	10670 <__multadd>
    fec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fec8:	9005      	str	r0, [sp, #20]
    feca:	2b00      	cmp	r3, #0
    fecc:	d100      	bne.n	fed0 <_dtoa_r+0x8f8>
    fece:	e15d      	b.n	1018c <_dtoa_r+0xbb4>
    fed0:	2300      	movs	r3, #0
    fed2:	0031      	movs	r1, r6
    fed4:	220a      	movs	r2, #10
    fed6:	9804      	ldr	r0, [sp, #16]
    fed8:	f000 fbca 	bl	10670 <__multadd>
    fedc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fede:	0006      	movs	r6, r0
    fee0:	2b00      	cmp	r3, #0
    fee2:	dc02      	bgt.n	feea <_dtoa_r+0x912>
    fee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fee6:	2b02      	cmp	r3, #2
    fee8:	dc6d      	bgt.n	ffc6 <_dtoa_r+0x9ee>
    feea:	2c00      	cmp	r4, #0
    feec:	dd05      	ble.n	fefa <_dtoa_r+0x922>
    feee:	0031      	movs	r1, r6
    fef0:	0022      	movs	r2, r4
    fef2:	9804      	ldr	r0, [sp, #16]
    fef4:	f000 fd2c 	bl	10950 <__lshift>
    fef8:	0006      	movs	r6, r0
    fefa:	0030      	movs	r0, r6
    fefc:	2d00      	cmp	r5, #0
    fefe:	d011      	beq.n	ff24 <_dtoa_r+0x94c>
    ff00:	6871      	ldr	r1, [r6, #4]
    ff02:	9804      	ldr	r0, [sp, #16]
    ff04:	f000 fb63 	bl	105ce <_Balloc>
    ff08:	0031      	movs	r1, r6
    ff0a:	0004      	movs	r4, r0
    ff0c:	6933      	ldr	r3, [r6, #16]
    ff0e:	310c      	adds	r1, #12
    ff10:	1c9a      	adds	r2, r3, #2
    ff12:	0092      	lsls	r2, r2, #2
    ff14:	300c      	adds	r0, #12
    ff16:	f7fe fb1b 	bl	e550 <memcpy>
    ff1a:	2201      	movs	r2, #1
    ff1c:	0021      	movs	r1, r4
    ff1e:	9804      	ldr	r0, [sp, #16]
    ff20:	f000 fd16 	bl	10950 <__lshift>
    ff24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    ff26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff28:	3f01      	subs	r7, #1
    ff2a:	930b      	str	r3, [sp, #44]	; 0x2c
    ff2c:	19db      	adds	r3, r3, r7
    ff2e:	0037      	movs	r7, r6
    ff30:	0006      	movs	r6, r0
    ff32:	930f      	str	r3, [sp, #60]	; 0x3c
    ff34:	9908      	ldr	r1, [sp, #32]
    ff36:	9805      	ldr	r0, [sp, #20]
    ff38:	f7ff faca 	bl	f4d0 <quorem>
    ff3c:	0039      	movs	r1, r7
    ff3e:	900d      	str	r0, [sp, #52]	; 0x34
    ff40:	0004      	movs	r4, r0
    ff42:	9805      	ldr	r0, [sp, #20]
    ff44:	f000 fd55 	bl	109f2 <__mcmp>
    ff48:	0032      	movs	r2, r6
    ff4a:	900e      	str	r0, [sp, #56]	; 0x38
    ff4c:	9908      	ldr	r1, [sp, #32]
    ff4e:	9804      	ldr	r0, [sp, #16]
    ff50:	f000 fd68 	bl	10a24 <__mdiff>
    ff54:	2301      	movs	r3, #1
    ff56:	930c      	str	r3, [sp, #48]	; 0x30
    ff58:	68c3      	ldr	r3, [r0, #12]
    ff5a:	3430      	adds	r4, #48	; 0x30
    ff5c:	0005      	movs	r5, r0
    ff5e:	2b00      	cmp	r3, #0
    ff60:	d104      	bne.n	ff6c <_dtoa_r+0x994>
    ff62:	0001      	movs	r1, r0
    ff64:	9805      	ldr	r0, [sp, #20]
    ff66:	f000 fd44 	bl	109f2 <__mcmp>
    ff6a:	900c      	str	r0, [sp, #48]	; 0x30
    ff6c:	0029      	movs	r1, r5
    ff6e:	9804      	ldr	r0, [sp, #16]
    ff70:	f000 fb65 	bl	1063e <_Bfree>
    ff74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ff76:	9a22      	ldr	r2, [sp, #136]	; 0x88
    ff78:	4313      	orrs	r3, r2
    ff7a:	d000      	beq.n	ff7e <_dtoa_r+0x9a6>
    ff7c:	e089      	b.n	10092 <_dtoa_r+0xaba>
    ff7e:	9a06      	ldr	r2, [sp, #24]
    ff80:	3301      	adds	r3, #1
    ff82:	4213      	tst	r3, r2
    ff84:	d000      	beq.n	ff88 <_dtoa_r+0x9b0>
    ff86:	e084      	b.n	10092 <_dtoa_r+0xaba>
    ff88:	2c39      	cmp	r4, #57	; 0x39
    ff8a:	d100      	bne.n	ff8e <_dtoa_r+0x9b6>
    ff8c:	e0a3      	b.n	100d6 <_dtoa_r+0xafe>
    ff8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff90:	2b00      	cmp	r3, #0
    ff92:	dd01      	ble.n	ff98 <_dtoa_r+0x9c0>
    ff94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    ff96:	3431      	adds	r4, #49	; 0x31
    ff98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ff9a:	1c5d      	adds	r5, r3, #1
    ff9c:	701c      	strb	r4, [r3, #0]
    ff9e:	e027      	b.n	fff0 <_dtoa_r+0xa18>
    ffa0:	2b04      	cmp	r3, #4
    ffa2:	d100      	bne.n	ffa6 <_dtoa_r+0x9ce>
    ffa4:	e769      	b.n	fe7a <_dtoa_r+0x8a2>
    ffa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ffa8:	331c      	adds	r3, #28
    ffaa:	18d2      	adds	r2, r2, r3
    ffac:	920b      	str	r2, [sp, #44]	; 0x2c
    ffae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ffb0:	18e4      	adds	r4, r4, r3
    ffb2:	18d3      	adds	r3, r2, r3
    ffb4:	e760      	b.n	fe78 <_dtoa_r+0x8a0>
    ffb6:	0003      	movs	r3, r0
    ffb8:	e7f5      	b.n	ffa6 <_dtoa_r+0x9ce>
    ffba:	2f00      	cmp	r7, #0
    ffbc:	dc3c      	bgt.n	10038 <_dtoa_r+0xa60>
    ffbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffc0:	2b02      	cmp	r3, #2
    ffc2:	dd39      	ble.n	10038 <_dtoa_r+0xa60>
    ffc4:	970d      	str	r7, [sp, #52]	; 0x34
    ffc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ffc8:	2b00      	cmp	r3, #0
    ffca:	d10c      	bne.n	ffe6 <_dtoa_r+0xa0e>
    ffcc:	9908      	ldr	r1, [sp, #32]
    ffce:	2205      	movs	r2, #5
    ffd0:	9804      	ldr	r0, [sp, #16]
    ffd2:	f000 fb4d 	bl	10670 <__multadd>
    ffd6:	9008      	str	r0, [sp, #32]
    ffd8:	0001      	movs	r1, r0
    ffda:	9805      	ldr	r0, [sp, #20]
    ffdc:	f000 fd09 	bl	109f2 <__mcmp>
    ffe0:	2800      	cmp	r0, #0
    ffe2:	dd00      	ble.n	ffe6 <_dtoa_r+0xa0e>
    ffe4:	e55a      	b.n	fa9c <_dtoa_r+0x4c4>
    ffe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ffe8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ffea:	43db      	mvns	r3, r3
    ffec:	9303      	str	r3, [sp, #12]
    ffee:	2700      	movs	r7, #0
    fff0:	9908      	ldr	r1, [sp, #32]
    fff2:	9804      	ldr	r0, [sp, #16]
    fff4:	f000 fb23 	bl	1063e <_Bfree>
    fff8:	2e00      	cmp	r6, #0
    fffa:	d100      	bne.n	fffe <_dtoa_r+0xa26>
    fffc:	e63f      	b.n	fc7e <_dtoa_r+0x6a6>
    fffe:	2f00      	cmp	r7, #0
   10000:	d005      	beq.n	1000e <_dtoa_r+0xa36>
   10002:	42b7      	cmp	r7, r6
   10004:	d003      	beq.n	1000e <_dtoa_r+0xa36>
   10006:	0039      	movs	r1, r7
   10008:	9804      	ldr	r0, [sp, #16]
   1000a:	f000 fb18 	bl	1063e <_Bfree>
   1000e:	0031      	movs	r1, r6
   10010:	9804      	ldr	r0, [sp, #16]
   10012:	f000 fb14 	bl	1063e <_Bfree>
   10016:	e632      	b.n	fc7e <_dtoa_r+0x6a6>
   10018:	9508      	str	r5, [sp, #32]
   1001a:	002e      	movs	r6, r5
   1001c:	e7e3      	b.n	ffe6 <_dtoa_r+0xa0e>
   1001e:	2300      	movs	r3, #0
   10020:	9308      	str	r3, [sp, #32]
   10022:	001e      	movs	r6, r3
   10024:	e7df      	b.n	ffe6 <_dtoa_r+0xa0e>
   10026:	46c0      	nop			; (mov r8, r8)
   10028:	40240000 	.word	0x40240000
   1002c:	00000433 	.word	0x00000433
   10030:	9603      	str	r6, [sp, #12]
   10032:	9508      	str	r5, [sp, #32]
   10034:	002e      	movs	r6, r5
   10036:	e531      	b.n	fa9c <_dtoa_r+0x4c4>
   10038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1003a:	970d      	str	r7, [sp, #52]	; 0x34
   1003c:	2b00      	cmp	r3, #0
   1003e:	d000      	beq.n	10042 <_dtoa_r+0xa6a>
   10040:	e753      	b.n	feea <_dtoa_r+0x912>
   10042:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10044:	9908      	ldr	r1, [sp, #32]
   10046:	9805      	ldr	r0, [sp, #20]
   10048:	f7ff fa42 	bl	f4d0 <quorem>
   1004c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1004e:	3030      	adds	r0, #48	; 0x30
   10050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10052:	7028      	strb	r0, [r5, #0]
   10054:	3501      	adds	r5, #1
   10056:	0004      	movs	r4, r0
   10058:	1aeb      	subs	r3, r5, r3
   1005a:	429a      	cmp	r2, r3
   1005c:	dc78      	bgt.n	10150 <_dtoa_r+0xb78>
   1005e:	1e15      	subs	r5, r2, #0
   10060:	dc00      	bgt.n	10064 <_dtoa_r+0xa8c>
   10062:	2501      	movs	r5, #1
   10064:	2700      	movs	r7, #0
   10066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10068:	195d      	adds	r5, r3, r5
   1006a:	9905      	ldr	r1, [sp, #20]
   1006c:	2201      	movs	r2, #1
   1006e:	9804      	ldr	r0, [sp, #16]
   10070:	f000 fc6e 	bl	10950 <__lshift>
   10074:	9908      	ldr	r1, [sp, #32]
   10076:	9005      	str	r0, [sp, #20]
   10078:	f000 fcbb 	bl	109f2 <__mcmp>
   1007c:	2800      	cmp	r0, #0
   1007e:	dc2f      	bgt.n	100e0 <_dtoa_r+0xb08>
   10080:	d101      	bne.n	10086 <_dtoa_r+0xaae>
   10082:	07e3      	lsls	r3, r4, #31
   10084:	d42c      	bmi.n	100e0 <_dtoa_r+0xb08>
   10086:	1e6b      	subs	r3, r5, #1
   10088:	781a      	ldrb	r2, [r3, #0]
   1008a:	2a30      	cmp	r2, #48	; 0x30
   1008c:	d1b0      	bne.n	fff0 <_dtoa_r+0xa18>
   1008e:	001d      	movs	r5, r3
   10090:	e7f9      	b.n	10086 <_dtoa_r+0xaae>
   10092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10094:	2b00      	cmp	r3, #0
   10096:	db07      	blt.n	100a8 <_dtoa_r+0xad0>
   10098:	001d      	movs	r5, r3
   1009a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1009c:	431d      	orrs	r5, r3
   1009e:	d126      	bne.n	100ee <_dtoa_r+0xb16>
   100a0:	2301      	movs	r3, #1
   100a2:	9a06      	ldr	r2, [sp, #24]
   100a4:	4213      	tst	r3, r2
   100a6:	d122      	bne.n	100ee <_dtoa_r+0xb16>
   100a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   100aa:	2b00      	cmp	r3, #0
   100ac:	dc00      	bgt.n	100b0 <_dtoa_r+0xad8>
   100ae:	e773      	b.n	ff98 <_dtoa_r+0x9c0>
   100b0:	9905      	ldr	r1, [sp, #20]
   100b2:	2201      	movs	r2, #1
   100b4:	9804      	ldr	r0, [sp, #16]
   100b6:	f000 fc4b 	bl	10950 <__lshift>
   100ba:	9908      	ldr	r1, [sp, #32]
   100bc:	9005      	str	r0, [sp, #20]
   100be:	f000 fc98 	bl	109f2 <__mcmp>
   100c2:	2800      	cmp	r0, #0
   100c4:	dc04      	bgt.n	100d0 <_dtoa_r+0xaf8>
   100c6:	d000      	beq.n	100ca <_dtoa_r+0xaf2>
   100c8:	e766      	b.n	ff98 <_dtoa_r+0x9c0>
   100ca:	07e3      	lsls	r3, r4, #31
   100cc:	d400      	bmi.n	100d0 <_dtoa_r+0xaf8>
   100ce:	e763      	b.n	ff98 <_dtoa_r+0x9c0>
   100d0:	2c39      	cmp	r4, #57	; 0x39
   100d2:	d000      	beq.n	100d6 <_dtoa_r+0xafe>
   100d4:	e75e      	b.n	ff94 <_dtoa_r+0x9bc>
   100d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   100d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   100da:	1c5d      	adds	r5, r3, #1
   100dc:	2339      	movs	r3, #57	; 0x39
   100de:	7013      	strb	r3, [r2, #0]
   100e0:	1e6b      	subs	r3, r5, #1
   100e2:	781a      	ldrb	r2, [r3, #0]
   100e4:	2a39      	cmp	r2, #57	; 0x39
   100e6:	d03b      	beq.n	10160 <_dtoa_r+0xb88>
   100e8:	3201      	adds	r2, #1
   100ea:	701a      	strb	r2, [r3, #0]
   100ec:	e780      	b.n	fff0 <_dtoa_r+0xa18>
   100ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   100f0:	3301      	adds	r3, #1
   100f2:	930d      	str	r3, [sp, #52]	; 0x34
   100f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   100f6:	2b00      	cmp	r3, #0
   100f8:	dd05      	ble.n	10106 <_dtoa_r+0xb2e>
   100fa:	2c39      	cmp	r4, #57	; 0x39
   100fc:	d0eb      	beq.n	100d6 <_dtoa_r+0xafe>
   100fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10100:	3401      	adds	r4, #1
   10102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10104:	e74a      	b.n	ff9c <_dtoa_r+0x9c4>
   10106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1010a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1010c:	701c      	strb	r4, [r3, #0]
   1010e:	4293      	cmp	r3, r2
   10110:	d0ab      	beq.n	1006a <_dtoa_r+0xa92>
   10112:	2300      	movs	r3, #0
   10114:	220a      	movs	r2, #10
   10116:	9905      	ldr	r1, [sp, #20]
   10118:	9804      	ldr	r0, [sp, #16]
   1011a:	f000 faa9 	bl	10670 <__multadd>
   1011e:	2300      	movs	r3, #0
   10120:	9005      	str	r0, [sp, #20]
   10122:	220a      	movs	r2, #10
   10124:	0039      	movs	r1, r7
   10126:	9804      	ldr	r0, [sp, #16]
   10128:	42b7      	cmp	r7, r6
   1012a:	d106      	bne.n	1013a <_dtoa_r+0xb62>
   1012c:	f000 faa0 	bl	10670 <__multadd>
   10130:	0007      	movs	r7, r0
   10132:	0006      	movs	r6, r0
   10134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10136:	930b      	str	r3, [sp, #44]	; 0x2c
   10138:	e6fc      	b.n	ff34 <_dtoa_r+0x95c>
   1013a:	f000 fa99 	bl	10670 <__multadd>
   1013e:	0031      	movs	r1, r6
   10140:	0007      	movs	r7, r0
   10142:	2300      	movs	r3, #0
   10144:	220a      	movs	r2, #10
   10146:	9804      	ldr	r0, [sp, #16]
   10148:	f000 fa92 	bl	10670 <__multadd>
   1014c:	0006      	movs	r6, r0
   1014e:	e7f1      	b.n	10134 <_dtoa_r+0xb5c>
   10150:	2300      	movs	r3, #0
   10152:	220a      	movs	r2, #10
   10154:	9905      	ldr	r1, [sp, #20]
   10156:	9804      	ldr	r0, [sp, #16]
   10158:	f000 fa8a 	bl	10670 <__multadd>
   1015c:	9005      	str	r0, [sp, #20]
   1015e:	e771      	b.n	10044 <_dtoa_r+0xa6c>
   10160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10162:	429a      	cmp	r2, r3
   10164:	d105      	bne.n	10172 <_dtoa_r+0xb9a>
   10166:	9b03      	ldr	r3, [sp, #12]
   10168:	3301      	adds	r3, #1
   1016a:	9303      	str	r3, [sp, #12]
   1016c:	2331      	movs	r3, #49	; 0x31
   1016e:	7013      	strb	r3, [r2, #0]
   10170:	e73e      	b.n	fff0 <_dtoa_r+0xa18>
   10172:	001d      	movs	r5, r3
   10174:	e7b4      	b.n	100e0 <_dtoa_r+0xb08>
   10176:	4b0a      	ldr	r3, [pc, #40]	; (101a0 <_dtoa_r+0xbc8>)
   10178:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1017a:	930a      	str	r3, [sp, #40]	; 0x28
   1017c:	4b09      	ldr	r3, [pc, #36]	; (101a4 <_dtoa_r+0xbcc>)
   1017e:	2a00      	cmp	r2, #0
   10180:	d001      	beq.n	10186 <_dtoa_r+0xbae>
   10182:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10184:	6013      	str	r3, [r2, #0]
   10186:	980a      	ldr	r0, [sp, #40]	; 0x28
   10188:	b01d      	add	sp, #116	; 0x74
   1018a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1018c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1018e:	2b00      	cmp	r3, #0
   10190:	dd00      	ble.n	10194 <_dtoa_r+0xbbc>
   10192:	e756      	b.n	10042 <_dtoa_r+0xa6a>
   10194:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10196:	2b02      	cmp	r3, #2
   10198:	dc00      	bgt.n	1019c <_dtoa_r+0xbc4>
   1019a:	e752      	b.n	10042 <_dtoa_r+0xa6a>
   1019c:	e713      	b.n	ffc6 <_dtoa_r+0x9ee>
   1019e:	46c0      	nop			; (mov r8, r8)
   101a0:	000150db 	.word	0x000150db
   101a4:	000150e3 	.word	0x000150e3

000101a8 <__sflush_r>:
   101a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   101aa:	898a      	ldrh	r2, [r1, #12]
   101ac:	0005      	movs	r5, r0
   101ae:	000c      	movs	r4, r1
   101b0:	0713      	lsls	r3, r2, #28
   101b2:	d460      	bmi.n	10276 <__sflush_r+0xce>
   101b4:	684b      	ldr	r3, [r1, #4]
   101b6:	2b00      	cmp	r3, #0
   101b8:	dc04      	bgt.n	101c4 <__sflush_r+0x1c>
   101ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   101bc:	2b00      	cmp	r3, #0
   101be:	dc01      	bgt.n	101c4 <__sflush_r+0x1c>
   101c0:	2000      	movs	r0, #0
   101c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   101c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   101c6:	2f00      	cmp	r7, #0
   101c8:	d0fa      	beq.n	101c0 <__sflush_r+0x18>
   101ca:	2300      	movs	r3, #0
   101cc:	682e      	ldr	r6, [r5, #0]
   101ce:	602b      	str	r3, [r5, #0]
   101d0:	2380      	movs	r3, #128	; 0x80
   101d2:	015b      	lsls	r3, r3, #5
   101d4:	401a      	ands	r2, r3
   101d6:	d034      	beq.n	10242 <__sflush_r+0x9a>
   101d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   101da:	89a3      	ldrh	r3, [r4, #12]
   101dc:	075b      	lsls	r3, r3, #29
   101de:	d506      	bpl.n	101ee <__sflush_r+0x46>
   101e0:	6863      	ldr	r3, [r4, #4]
   101e2:	1ac0      	subs	r0, r0, r3
   101e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   101e6:	2b00      	cmp	r3, #0
   101e8:	d001      	beq.n	101ee <__sflush_r+0x46>
   101ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
   101ec:	1ac0      	subs	r0, r0, r3
   101ee:	0002      	movs	r2, r0
   101f0:	6a21      	ldr	r1, [r4, #32]
   101f2:	2300      	movs	r3, #0
   101f4:	0028      	movs	r0, r5
   101f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   101f8:	47b8      	blx	r7
   101fa:	89a1      	ldrh	r1, [r4, #12]
   101fc:	1c43      	adds	r3, r0, #1
   101fe:	d106      	bne.n	1020e <__sflush_r+0x66>
   10200:	682b      	ldr	r3, [r5, #0]
   10202:	2b1d      	cmp	r3, #29
   10204:	d831      	bhi.n	1026a <__sflush_r+0xc2>
   10206:	4a2c      	ldr	r2, [pc, #176]	; (102b8 <__sflush_r+0x110>)
   10208:	40da      	lsrs	r2, r3
   1020a:	07d3      	lsls	r3, r2, #31
   1020c:	d52d      	bpl.n	1026a <__sflush_r+0xc2>
   1020e:	2300      	movs	r3, #0
   10210:	6063      	str	r3, [r4, #4]
   10212:	6923      	ldr	r3, [r4, #16]
   10214:	6023      	str	r3, [r4, #0]
   10216:	04cb      	lsls	r3, r1, #19
   10218:	d505      	bpl.n	10226 <__sflush_r+0x7e>
   1021a:	1c43      	adds	r3, r0, #1
   1021c:	d102      	bne.n	10224 <__sflush_r+0x7c>
   1021e:	682b      	ldr	r3, [r5, #0]
   10220:	2b00      	cmp	r3, #0
   10222:	d100      	bne.n	10226 <__sflush_r+0x7e>
   10224:	6560      	str	r0, [r4, #84]	; 0x54
   10226:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10228:	602e      	str	r6, [r5, #0]
   1022a:	2900      	cmp	r1, #0
   1022c:	d0c8      	beq.n	101c0 <__sflush_r+0x18>
   1022e:	0023      	movs	r3, r4
   10230:	3344      	adds	r3, #68	; 0x44
   10232:	4299      	cmp	r1, r3
   10234:	d002      	beq.n	1023c <__sflush_r+0x94>
   10236:	0028      	movs	r0, r5
   10238:	f7fe f9ae 	bl	e598 <_free_r>
   1023c:	2000      	movs	r0, #0
   1023e:	6360      	str	r0, [r4, #52]	; 0x34
   10240:	e7bf      	b.n	101c2 <__sflush_r+0x1a>
   10242:	2301      	movs	r3, #1
   10244:	6a21      	ldr	r1, [r4, #32]
   10246:	0028      	movs	r0, r5
   10248:	47b8      	blx	r7
   1024a:	1c43      	adds	r3, r0, #1
   1024c:	d1c5      	bne.n	101da <__sflush_r+0x32>
   1024e:	682b      	ldr	r3, [r5, #0]
   10250:	2b00      	cmp	r3, #0
   10252:	d0c2      	beq.n	101da <__sflush_r+0x32>
   10254:	2b1d      	cmp	r3, #29
   10256:	d001      	beq.n	1025c <__sflush_r+0xb4>
   10258:	2b16      	cmp	r3, #22
   1025a:	d101      	bne.n	10260 <__sflush_r+0xb8>
   1025c:	602e      	str	r6, [r5, #0]
   1025e:	e7af      	b.n	101c0 <__sflush_r+0x18>
   10260:	2340      	movs	r3, #64	; 0x40
   10262:	89a2      	ldrh	r2, [r4, #12]
   10264:	4313      	orrs	r3, r2
   10266:	81a3      	strh	r3, [r4, #12]
   10268:	e7ab      	b.n	101c2 <__sflush_r+0x1a>
   1026a:	2340      	movs	r3, #64	; 0x40
   1026c:	430b      	orrs	r3, r1
   1026e:	2001      	movs	r0, #1
   10270:	81a3      	strh	r3, [r4, #12]
   10272:	4240      	negs	r0, r0
   10274:	e7a5      	b.n	101c2 <__sflush_r+0x1a>
   10276:	690f      	ldr	r7, [r1, #16]
   10278:	2f00      	cmp	r7, #0
   1027a:	d0a1      	beq.n	101c0 <__sflush_r+0x18>
   1027c:	680b      	ldr	r3, [r1, #0]
   1027e:	600f      	str	r7, [r1, #0]
   10280:	1bdb      	subs	r3, r3, r7
   10282:	9301      	str	r3, [sp, #4]
   10284:	2300      	movs	r3, #0
   10286:	0792      	lsls	r2, r2, #30
   10288:	d100      	bne.n	1028c <__sflush_r+0xe4>
   1028a:	694b      	ldr	r3, [r1, #20]
   1028c:	60a3      	str	r3, [r4, #8]
   1028e:	9b01      	ldr	r3, [sp, #4]
   10290:	2b00      	cmp	r3, #0
   10292:	dc00      	bgt.n	10296 <__sflush_r+0xee>
   10294:	e794      	b.n	101c0 <__sflush_r+0x18>
   10296:	9b01      	ldr	r3, [sp, #4]
   10298:	003a      	movs	r2, r7
   1029a:	6a21      	ldr	r1, [r4, #32]
   1029c:	0028      	movs	r0, r5
   1029e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   102a0:	47b0      	blx	r6
   102a2:	2800      	cmp	r0, #0
   102a4:	dc03      	bgt.n	102ae <__sflush_r+0x106>
   102a6:	2340      	movs	r3, #64	; 0x40
   102a8:	89a2      	ldrh	r2, [r4, #12]
   102aa:	4313      	orrs	r3, r2
   102ac:	e7df      	b.n	1026e <__sflush_r+0xc6>
   102ae:	9b01      	ldr	r3, [sp, #4]
   102b0:	183f      	adds	r7, r7, r0
   102b2:	1a1b      	subs	r3, r3, r0
   102b4:	9301      	str	r3, [sp, #4]
   102b6:	e7ea      	b.n	1028e <__sflush_r+0xe6>
   102b8:	20400001 	.word	0x20400001

000102bc <_fflush_r>:
   102bc:	690b      	ldr	r3, [r1, #16]
   102be:	b570      	push	{r4, r5, r6, lr}
   102c0:	0005      	movs	r5, r0
   102c2:	000c      	movs	r4, r1
   102c4:	2b00      	cmp	r3, #0
   102c6:	d101      	bne.n	102cc <_fflush_r+0x10>
   102c8:	2000      	movs	r0, #0
   102ca:	bd70      	pop	{r4, r5, r6, pc}
   102cc:	2800      	cmp	r0, #0
   102ce:	d004      	beq.n	102da <_fflush_r+0x1e>
   102d0:	6983      	ldr	r3, [r0, #24]
   102d2:	2b00      	cmp	r3, #0
   102d4:	d101      	bne.n	102da <_fflush_r+0x1e>
   102d6:	f000 f85f 	bl	10398 <__sinit>
   102da:	4b0b      	ldr	r3, [pc, #44]	; (10308 <_fflush_r+0x4c>)
   102dc:	429c      	cmp	r4, r3
   102de:	d109      	bne.n	102f4 <_fflush_r+0x38>
   102e0:	686c      	ldr	r4, [r5, #4]
   102e2:	220c      	movs	r2, #12
   102e4:	5ea3      	ldrsh	r3, [r4, r2]
   102e6:	2b00      	cmp	r3, #0
   102e8:	d0ee      	beq.n	102c8 <_fflush_r+0xc>
   102ea:	0021      	movs	r1, r4
   102ec:	0028      	movs	r0, r5
   102ee:	f7ff ff5b 	bl	101a8 <__sflush_r>
   102f2:	e7ea      	b.n	102ca <_fflush_r+0xe>
   102f4:	4b05      	ldr	r3, [pc, #20]	; (1030c <_fflush_r+0x50>)
   102f6:	429c      	cmp	r4, r3
   102f8:	d101      	bne.n	102fe <_fflush_r+0x42>
   102fa:	68ac      	ldr	r4, [r5, #8]
   102fc:	e7f1      	b.n	102e2 <_fflush_r+0x26>
   102fe:	4b04      	ldr	r3, [pc, #16]	; (10310 <_fflush_r+0x54>)
   10300:	429c      	cmp	r4, r3
   10302:	d1ee      	bne.n	102e2 <_fflush_r+0x26>
   10304:	68ec      	ldr	r4, [r5, #12]
   10306:	e7ec      	b.n	102e2 <_fflush_r+0x26>
   10308:	00015108 	.word	0x00015108
   1030c:	00015128 	.word	0x00015128
   10310:	000150e8 	.word	0x000150e8

00010314 <_cleanup_r>:
   10314:	b510      	push	{r4, lr}
   10316:	4902      	ldr	r1, [pc, #8]	; (10320 <_cleanup_r+0xc>)
   10318:	f000 f8b2 	bl	10480 <_fwalk_reent>
   1031c:	bd10      	pop	{r4, pc}
   1031e:	46c0      	nop			; (mov r8, r8)
   10320:	000102bd 	.word	0x000102bd

00010324 <std.isra.0>:
   10324:	2300      	movs	r3, #0
   10326:	b510      	push	{r4, lr}
   10328:	0004      	movs	r4, r0
   1032a:	6003      	str	r3, [r0, #0]
   1032c:	6043      	str	r3, [r0, #4]
   1032e:	6083      	str	r3, [r0, #8]
   10330:	8181      	strh	r1, [r0, #12]
   10332:	6643      	str	r3, [r0, #100]	; 0x64
   10334:	81c2      	strh	r2, [r0, #14]
   10336:	6103      	str	r3, [r0, #16]
   10338:	6143      	str	r3, [r0, #20]
   1033a:	6183      	str	r3, [r0, #24]
   1033c:	0019      	movs	r1, r3
   1033e:	2208      	movs	r2, #8
   10340:	305c      	adds	r0, #92	; 0x5c
   10342:	f7fe f920 	bl	e586 <memset>
   10346:	4b05      	ldr	r3, [pc, #20]	; (1035c <std.isra.0+0x38>)
   10348:	6224      	str	r4, [r4, #32]
   1034a:	6263      	str	r3, [r4, #36]	; 0x24
   1034c:	4b04      	ldr	r3, [pc, #16]	; (10360 <std.isra.0+0x3c>)
   1034e:	62a3      	str	r3, [r4, #40]	; 0x28
   10350:	4b04      	ldr	r3, [pc, #16]	; (10364 <std.isra.0+0x40>)
   10352:	62e3      	str	r3, [r4, #44]	; 0x2c
   10354:	4b04      	ldr	r3, [pc, #16]	; (10368 <std.isra.0+0x44>)
   10356:	6323      	str	r3, [r4, #48]	; 0x30
   10358:	bd10      	pop	{r4, pc}
   1035a:	46c0      	nop			; (mov r8, r8)
   1035c:	00011171 	.word	0x00011171
   10360:	00011199 	.word	0x00011199
   10364:	000111d1 	.word	0x000111d1
   10368:	000111fd 	.word	0x000111fd

0001036c <__sfmoreglue>:
   1036c:	b570      	push	{r4, r5, r6, lr}
   1036e:	2568      	movs	r5, #104	; 0x68
   10370:	1e4a      	subs	r2, r1, #1
   10372:	4355      	muls	r5, r2
   10374:	000e      	movs	r6, r1
   10376:	0029      	movs	r1, r5
   10378:	3174      	adds	r1, #116	; 0x74
   1037a:	f7fe f957 	bl	e62c <_malloc_r>
   1037e:	1e04      	subs	r4, r0, #0
   10380:	d008      	beq.n	10394 <__sfmoreglue+0x28>
   10382:	2100      	movs	r1, #0
   10384:	002a      	movs	r2, r5
   10386:	6001      	str	r1, [r0, #0]
   10388:	6046      	str	r6, [r0, #4]
   1038a:	300c      	adds	r0, #12
   1038c:	60a0      	str	r0, [r4, #8]
   1038e:	3268      	adds	r2, #104	; 0x68
   10390:	f7fe f8f9 	bl	e586 <memset>
   10394:	0020      	movs	r0, r4
   10396:	bd70      	pop	{r4, r5, r6, pc}

00010398 <__sinit>:
   10398:	6983      	ldr	r3, [r0, #24]
   1039a:	b513      	push	{r0, r1, r4, lr}
   1039c:	0004      	movs	r4, r0
   1039e:	2b00      	cmp	r3, #0
   103a0:	d128      	bne.n	103f4 <__sinit+0x5c>
   103a2:	6483      	str	r3, [r0, #72]	; 0x48
   103a4:	64c3      	str	r3, [r0, #76]	; 0x4c
   103a6:	6503      	str	r3, [r0, #80]	; 0x50
   103a8:	4b13      	ldr	r3, [pc, #76]	; (103f8 <__sinit+0x60>)
   103aa:	4a14      	ldr	r2, [pc, #80]	; (103fc <__sinit+0x64>)
   103ac:	681b      	ldr	r3, [r3, #0]
   103ae:	6282      	str	r2, [r0, #40]	; 0x28
   103b0:	9301      	str	r3, [sp, #4]
   103b2:	4298      	cmp	r0, r3
   103b4:	d101      	bne.n	103ba <__sinit+0x22>
   103b6:	2301      	movs	r3, #1
   103b8:	6183      	str	r3, [r0, #24]
   103ba:	0020      	movs	r0, r4
   103bc:	f000 f820 	bl	10400 <__sfp>
   103c0:	6060      	str	r0, [r4, #4]
   103c2:	0020      	movs	r0, r4
   103c4:	f000 f81c 	bl	10400 <__sfp>
   103c8:	60a0      	str	r0, [r4, #8]
   103ca:	0020      	movs	r0, r4
   103cc:	f000 f818 	bl	10400 <__sfp>
   103d0:	2200      	movs	r2, #0
   103d2:	60e0      	str	r0, [r4, #12]
   103d4:	2104      	movs	r1, #4
   103d6:	6860      	ldr	r0, [r4, #4]
   103d8:	f7ff ffa4 	bl	10324 <std.isra.0>
   103dc:	2201      	movs	r2, #1
   103de:	2109      	movs	r1, #9
   103e0:	68a0      	ldr	r0, [r4, #8]
   103e2:	f7ff ff9f 	bl	10324 <std.isra.0>
   103e6:	2202      	movs	r2, #2
   103e8:	2112      	movs	r1, #18
   103ea:	68e0      	ldr	r0, [r4, #12]
   103ec:	f7ff ff9a 	bl	10324 <std.isra.0>
   103f0:	2301      	movs	r3, #1
   103f2:	61a3      	str	r3, [r4, #24]
   103f4:	bd13      	pop	{r0, r1, r4, pc}
   103f6:	46c0      	nop			; (mov r8, r8)
   103f8:	00014f98 	.word	0x00014f98
   103fc:	00010315 	.word	0x00010315

00010400 <__sfp>:
   10400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10402:	4b1e      	ldr	r3, [pc, #120]	; (1047c <__sfp+0x7c>)
   10404:	0007      	movs	r7, r0
   10406:	681e      	ldr	r6, [r3, #0]
   10408:	69b3      	ldr	r3, [r6, #24]
   1040a:	2b00      	cmp	r3, #0
   1040c:	d102      	bne.n	10414 <__sfp+0x14>
   1040e:	0030      	movs	r0, r6
   10410:	f7ff ffc2 	bl	10398 <__sinit>
   10414:	3648      	adds	r6, #72	; 0x48
   10416:	68b4      	ldr	r4, [r6, #8]
   10418:	6873      	ldr	r3, [r6, #4]
   1041a:	3b01      	subs	r3, #1
   1041c:	d504      	bpl.n	10428 <__sfp+0x28>
   1041e:	6833      	ldr	r3, [r6, #0]
   10420:	2b00      	cmp	r3, #0
   10422:	d007      	beq.n	10434 <__sfp+0x34>
   10424:	6836      	ldr	r6, [r6, #0]
   10426:	e7f6      	b.n	10416 <__sfp+0x16>
   10428:	220c      	movs	r2, #12
   1042a:	5ea5      	ldrsh	r5, [r4, r2]
   1042c:	2d00      	cmp	r5, #0
   1042e:	d00d      	beq.n	1044c <__sfp+0x4c>
   10430:	3468      	adds	r4, #104	; 0x68
   10432:	e7f2      	b.n	1041a <__sfp+0x1a>
   10434:	2104      	movs	r1, #4
   10436:	0038      	movs	r0, r7
   10438:	f7ff ff98 	bl	1036c <__sfmoreglue>
   1043c:	6030      	str	r0, [r6, #0]
   1043e:	2800      	cmp	r0, #0
   10440:	d1f0      	bne.n	10424 <__sfp+0x24>
   10442:	230c      	movs	r3, #12
   10444:	0004      	movs	r4, r0
   10446:	603b      	str	r3, [r7, #0]
   10448:	0020      	movs	r0, r4
   1044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1044c:	2301      	movs	r3, #1
   1044e:	0020      	movs	r0, r4
   10450:	425b      	negs	r3, r3
   10452:	81e3      	strh	r3, [r4, #14]
   10454:	3302      	adds	r3, #2
   10456:	81a3      	strh	r3, [r4, #12]
   10458:	6665      	str	r5, [r4, #100]	; 0x64
   1045a:	6025      	str	r5, [r4, #0]
   1045c:	60a5      	str	r5, [r4, #8]
   1045e:	6065      	str	r5, [r4, #4]
   10460:	6125      	str	r5, [r4, #16]
   10462:	6165      	str	r5, [r4, #20]
   10464:	61a5      	str	r5, [r4, #24]
   10466:	2208      	movs	r2, #8
   10468:	0029      	movs	r1, r5
   1046a:	305c      	adds	r0, #92	; 0x5c
   1046c:	f7fe f88b 	bl	e586 <memset>
   10470:	6365      	str	r5, [r4, #52]	; 0x34
   10472:	63a5      	str	r5, [r4, #56]	; 0x38
   10474:	64a5      	str	r5, [r4, #72]	; 0x48
   10476:	64e5      	str	r5, [r4, #76]	; 0x4c
   10478:	e7e6      	b.n	10448 <__sfp+0x48>
   1047a:	46c0      	nop			; (mov r8, r8)
   1047c:	00014f98 	.word	0x00014f98

00010480 <_fwalk_reent>:
   10480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10482:	0004      	movs	r4, r0
   10484:	0007      	movs	r7, r0
   10486:	2600      	movs	r6, #0
   10488:	9101      	str	r1, [sp, #4]
   1048a:	3448      	adds	r4, #72	; 0x48
   1048c:	2c00      	cmp	r4, #0
   1048e:	d101      	bne.n	10494 <_fwalk_reent+0x14>
   10490:	0030      	movs	r0, r6
   10492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10494:	6863      	ldr	r3, [r4, #4]
   10496:	68a5      	ldr	r5, [r4, #8]
   10498:	9300      	str	r3, [sp, #0]
   1049a:	9b00      	ldr	r3, [sp, #0]
   1049c:	3b01      	subs	r3, #1
   1049e:	9300      	str	r3, [sp, #0]
   104a0:	d501      	bpl.n	104a6 <_fwalk_reent+0x26>
   104a2:	6824      	ldr	r4, [r4, #0]
   104a4:	e7f2      	b.n	1048c <_fwalk_reent+0xc>
   104a6:	89ab      	ldrh	r3, [r5, #12]
   104a8:	2b01      	cmp	r3, #1
   104aa:	d908      	bls.n	104be <_fwalk_reent+0x3e>
   104ac:	220e      	movs	r2, #14
   104ae:	5eab      	ldrsh	r3, [r5, r2]
   104b0:	3301      	adds	r3, #1
   104b2:	d004      	beq.n	104be <_fwalk_reent+0x3e>
   104b4:	0029      	movs	r1, r5
   104b6:	0038      	movs	r0, r7
   104b8:	9b01      	ldr	r3, [sp, #4]
   104ba:	4798      	blx	r3
   104bc:	4306      	orrs	r6, r0
   104be:	3568      	adds	r5, #104	; 0x68
   104c0:	e7eb      	b.n	1049a <_fwalk_reent+0x1a>
	...

000104c4 <_localeconv_r>:
   104c4:	4b03      	ldr	r3, [pc, #12]	; (104d4 <_localeconv_r+0x10>)
   104c6:	681b      	ldr	r3, [r3, #0]
   104c8:	6a18      	ldr	r0, [r3, #32]
   104ca:	2800      	cmp	r0, #0
   104cc:	d100      	bne.n	104d0 <_localeconv_r+0xc>
   104ce:	4802      	ldr	r0, [pc, #8]	; (104d8 <_localeconv_r+0x14>)
   104d0:	30f0      	adds	r0, #240	; 0xf0
   104d2:	4770      	bx	lr
   104d4:	20000040 	.word	0x20000040
   104d8:	200000a4 	.word	0x200000a4

000104dc <__swhatbuf_r>:
   104dc:	b570      	push	{r4, r5, r6, lr}
   104de:	000e      	movs	r6, r1
   104e0:	001d      	movs	r5, r3
   104e2:	230e      	movs	r3, #14
   104e4:	5ec9      	ldrsh	r1, [r1, r3]
   104e6:	b090      	sub	sp, #64	; 0x40
   104e8:	0014      	movs	r4, r2
   104ea:	2900      	cmp	r1, #0
   104ec:	da07      	bge.n	104fe <__swhatbuf_r+0x22>
   104ee:	2300      	movs	r3, #0
   104f0:	602b      	str	r3, [r5, #0]
   104f2:	89b3      	ldrh	r3, [r6, #12]
   104f4:	061b      	lsls	r3, r3, #24
   104f6:	d411      	bmi.n	1051c <__swhatbuf_r+0x40>
   104f8:	2380      	movs	r3, #128	; 0x80
   104fa:	00db      	lsls	r3, r3, #3
   104fc:	e00f      	b.n	1051e <__swhatbuf_r+0x42>
   104fe:	aa01      	add	r2, sp, #4
   10500:	f000 fea8 	bl	11254 <_fstat_r>
   10504:	2800      	cmp	r0, #0
   10506:	dbf2      	blt.n	104ee <__swhatbuf_r+0x12>
   10508:	22f0      	movs	r2, #240	; 0xf0
   1050a:	9b02      	ldr	r3, [sp, #8]
   1050c:	0212      	lsls	r2, r2, #8
   1050e:	4013      	ands	r3, r2
   10510:	4a05      	ldr	r2, [pc, #20]	; (10528 <__swhatbuf_r+0x4c>)
   10512:	189b      	adds	r3, r3, r2
   10514:	425a      	negs	r2, r3
   10516:	4153      	adcs	r3, r2
   10518:	602b      	str	r3, [r5, #0]
   1051a:	e7ed      	b.n	104f8 <__swhatbuf_r+0x1c>
   1051c:	2340      	movs	r3, #64	; 0x40
   1051e:	2000      	movs	r0, #0
   10520:	6023      	str	r3, [r4, #0]
   10522:	b010      	add	sp, #64	; 0x40
   10524:	bd70      	pop	{r4, r5, r6, pc}
   10526:	46c0      	nop			; (mov r8, r8)
   10528:	ffffe000 	.word	0xffffe000

0001052c <__smakebuf_r>:
   1052c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1052e:	2602      	movs	r6, #2
   10530:	898b      	ldrh	r3, [r1, #12]
   10532:	0005      	movs	r5, r0
   10534:	000c      	movs	r4, r1
   10536:	4233      	tst	r3, r6
   10538:	d006      	beq.n	10548 <__smakebuf_r+0x1c>
   1053a:	0023      	movs	r3, r4
   1053c:	3347      	adds	r3, #71	; 0x47
   1053e:	6023      	str	r3, [r4, #0]
   10540:	6123      	str	r3, [r4, #16]
   10542:	2301      	movs	r3, #1
   10544:	6163      	str	r3, [r4, #20]
   10546:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10548:	ab01      	add	r3, sp, #4
   1054a:	466a      	mov	r2, sp
   1054c:	f7ff ffc6 	bl	104dc <__swhatbuf_r>
   10550:	9900      	ldr	r1, [sp, #0]
   10552:	0007      	movs	r7, r0
   10554:	0028      	movs	r0, r5
   10556:	f7fe f869 	bl	e62c <_malloc_r>
   1055a:	2800      	cmp	r0, #0
   1055c:	d108      	bne.n	10570 <__smakebuf_r+0x44>
   1055e:	220c      	movs	r2, #12
   10560:	5ea3      	ldrsh	r3, [r4, r2]
   10562:	059a      	lsls	r2, r3, #22
   10564:	d4ef      	bmi.n	10546 <__smakebuf_r+0x1a>
   10566:	2203      	movs	r2, #3
   10568:	4393      	bics	r3, r2
   1056a:	431e      	orrs	r6, r3
   1056c:	81a6      	strh	r6, [r4, #12]
   1056e:	e7e4      	b.n	1053a <__smakebuf_r+0xe>
   10570:	4b0f      	ldr	r3, [pc, #60]	; (105b0 <__smakebuf_r+0x84>)
   10572:	62ab      	str	r3, [r5, #40]	; 0x28
   10574:	2380      	movs	r3, #128	; 0x80
   10576:	89a2      	ldrh	r2, [r4, #12]
   10578:	6020      	str	r0, [r4, #0]
   1057a:	4313      	orrs	r3, r2
   1057c:	81a3      	strh	r3, [r4, #12]
   1057e:	9b00      	ldr	r3, [sp, #0]
   10580:	6120      	str	r0, [r4, #16]
   10582:	6163      	str	r3, [r4, #20]
   10584:	9b01      	ldr	r3, [sp, #4]
   10586:	2b00      	cmp	r3, #0
   10588:	d00d      	beq.n	105a6 <__smakebuf_r+0x7a>
   1058a:	230e      	movs	r3, #14
   1058c:	5ee1      	ldrsh	r1, [r4, r3]
   1058e:	0028      	movs	r0, r5
   10590:	f000 fe72 	bl	11278 <_isatty_r>
   10594:	2800      	cmp	r0, #0
   10596:	d006      	beq.n	105a6 <__smakebuf_r+0x7a>
   10598:	2203      	movs	r2, #3
   1059a:	89a3      	ldrh	r3, [r4, #12]
   1059c:	4393      	bics	r3, r2
   1059e:	001a      	movs	r2, r3
   105a0:	2301      	movs	r3, #1
   105a2:	4313      	orrs	r3, r2
   105a4:	81a3      	strh	r3, [r4, #12]
   105a6:	89a0      	ldrh	r0, [r4, #12]
   105a8:	4338      	orrs	r0, r7
   105aa:	81a0      	strh	r0, [r4, #12]
   105ac:	e7cb      	b.n	10546 <__smakebuf_r+0x1a>
   105ae:	46c0      	nop			; (mov r8, r8)
   105b0:	00010315 	.word	0x00010315

000105b4 <memchr>:
   105b4:	b2c9      	uxtb	r1, r1
   105b6:	1882      	adds	r2, r0, r2
   105b8:	4290      	cmp	r0, r2
   105ba:	d101      	bne.n	105c0 <memchr+0xc>
   105bc:	2000      	movs	r0, #0
   105be:	4770      	bx	lr
   105c0:	7803      	ldrb	r3, [r0, #0]
   105c2:	428b      	cmp	r3, r1
   105c4:	d0fb      	beq.n	105be <memchr+0xa>
   105c6:	3001      	adds	r0, #1
   105c8:	e7f6      	b.n	105b8 <memchr+0x4>

000105ca <__malloc_lock>:
   105ca:	4770      	bx	lr

000105cc <__malloc_unlock>:
   105cc:	4770      	bx	lr

000105ce <_Balloc>:
   105ce:	b570      	push	{r4, r5, r6, lr}
   105d0:	6a46      	ldr	r6, [r0, #36]	; 0x24
   105d2:	0004      	movs	r4, r0
   105d4:	000d      	movs	r5, r1
   105d6:	2e00      	cmp	r6, #0
   105d8:	d107      	bne.n	105ea <_Balloc+0x1c>
   105da:	2010      	movs	r0, #16
   105dc:	f7fd ff9c 	bl	e518 <malloc>
   105e0:	6260      	str	r0, [r4, #36]	; 0x24
   105e2:	6046      	str	r6, [r0, #4]
   105e4:	6086      	str	r6, [r0, #8]
   105e6:	6006      	str	r6, [r0, #0]
   105e8:	60c6      	str	r6, [r0, #12]
   105ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
   105ec:	68f3      	ldr	r3, [r6, #12]
   105ee:	2b00      	cmp	r3, #0
   105f0:	d013      	beq.n	1061a <_Balloc+0x4c>
   105f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   105f4:	00aa      	lsls	r2, r5, #2
   105f6:	68db      	ldr	r3, [r3, #12]
   105f8:	189b      	adds	r3, r3, r2
   105fa:	6818      	ldr	r0, [r3, #0]
   105fc:	2800      	cmp	r0, #0
   105fe:	d118      	bne.n	10632 <_Balloc+0x64>
   10600:	2101      	movs	r1, #1
   10602:	000e      	movs	r6, r1
   10604:	40ae      	lsls	r6, r5
   10606:	1d72      	adds	r2, r6, #5
   10608:	0092      	lsls	r2, r2, #2
   1060a:	0020      	movs	r0, r4
   1060c:	f000 fac2 	bl	10b94 <_calloc_r>
   10610:	2800      	cmp	r0, #0
   10612:	d00c      	beq.n	1062e <_Balloc+0x60>
   10614:	6045      	str	r5, [r0, #4]
   10616:	6086      	str	r6, [r0, #8]
   10618:	e00d      	b.n	10636 <_Balloc+0x68>
   1061a:	2221      	movs	r2, #33	; 0x21
   1061c:	2104      	movs	r1, #4
   1061e:	0020      	movs	r0, r4
   10620:	f000 fab8 	bl	10b94 <_calloc_r>
   10624:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10626:	60f0      	str	r0, [r6, #12]
   10628:	68db      	ldr	r3, [r3, #12]
   1062a:	2b00      	cmp	r3, #0
   1062c:	d1e1      	bne.n	105f2 <_Balloc+0x24>
   1062e:	2000      	movs	r0, #0
   10630:	bd70      	pop	{r4, r5, r6, pc}
   10632:	6802      	ldr	r2, [r0, #0]
   10634:	601a      	str	r2, [r3, #0]
   10636:	2300      	movs	r3, #0
   10638:	6103      	str	r3, [r0, #16]
   1063a:	60c3      	str	r3, [r0, #12]
   1063c:	e7f8      	b.n	10630 <_Balloc+0x62>

0001063e <_Bfree>:
   1063e:	b570      	push	{r4, r5, r6, lr}
   10640:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10642:	0006      	movs	r6, r0
   10644:	000d      	movs	r5, r1
   10646:	2c00      	cmp	r4, #0
   10648:	d107      	bne.n	1065a <_Bfree+0x1c>
   1064a:	2010      	movs	r0, #16
   1064c:	f7fd ff64 	bl	e518 <malloc>
   10650:	6270      	str	r0, [r6, #36]	; 0x24
   10652:	6044      	str	r4, [r0, #4]
   10654:	6084      	str	r4, [r0, #8]
   10656:	6004      	str	r4, [r0, #0]
   10658:	60c4      	str	r4, [r0, #12]
   1065a:	2d00      	cmp	r5, #0
   1065c:	d007      	beq.n	1066e <_Bfree+0x30>
   1065e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10660:	686a      	ldr	r2, [r5, #4]
   10662:	68db      	ldr	r3, [r3, #12]
   10664:	0092      	lsls	r2, r2, #2
   10666:	189b      	adds	r3, r3, r2
   10668:	681a      	ldr	r2, [r3, #0]
   1066a:	602a      	str	r2, [r5, #0]
   1066c:	601d      	str	r5, [r3, #0]
   1066e:	bd70      	pop	{r4, r5, r6, pc}

00010670 <__multadd>:
   10670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10672:	001e      	movs	r6, r3
   10674:	2314      	movs	r3, #20
   10676:	469c      	mov	ip, r3
   10678:	0007      	movs	r7, r0
   1067a:	000c      	movs	r4, r1
   1067c:	2000      	movs	r0, #0
   1067e:	690d      	ldr	r5, [r1, #16]
   10680:	448c      	add	ip, r1
   10682:	4663      	mov	r3, ip
   10684:	8819      	ldrh	r1, [r3, #0]
   10686:	681b      	ldr	r3, [r3, #0]
   10688:	4351      	muls	r1, r2
   1068a:	0c1b      	lsrs	r3, r3, #16
   1068c:	4353      	muls	r3, r2
   1068e:	1989      	adds	r1, r1, r6
   10690:	0c0e      	lsrs	r6, r1, #16
   10692:	199b      	adds	r3, r3, r6
   10694:	b289      	uxth	r1, r1
   10696:	0c1e      	lsrs	r6, r3, #16
   10698:	041b      	lsls	r3, r3, #16
   1069a:	185b      	adds	r3, r3, r1
   1069c:	4661      	mov	r1, ip
   1069e:	3001      	adds	r0, #1
   106a0:	c108      	stmia	r1!, {r3}
   106a2:	468c      	mov	ip, r1
   106a4:	4285      	cmp	r5, r0
   106a6:	dcec      	bgt.n	10682 <__multadd+0x12>
   106a8:	2e00      	cmp	r6, #0
   106aa:	d01b      	beq.n	106e4 <__multadd+0x74>
   106ac:	68a3      	ldr	r3, [r4, #8]
   106ae:	429d      	cmp	r5, r3
   106b0:	db12      	blt.n	106d8 <__multadd+0x68>
   106b2:	6863      	ldr	r3, [r4, #4]
   106b4:	0038      	movs	r0, r7
   106b6:	1c59      	adds	r1, r3, #1
   106b8:	f7ff ff89 	bl	105ce <_Balloc>
   106bc:	0021      	movs	r1, r4
   106be:	6923      	ldr	r3, [r4, #16]
   106c0:	9001      	str	r0, [sp, #4]
   106c2:	1c9a      	adds	r2, r3, #2
   106c4:	0092      	lsls	r2, r2, #2
   106c6:	310c      	adds	r1, #12
   106c8:	300c      	adds	r0, #12
   106ca:	f7fd ff41 	bl	e550 <memcpy>
   106ce:	0021      	movs	r1, r4
   106d0:	0038      	movs	r0, r7
   106d2:	f7ff ffb4 	bl	1063e <_Bfree>
   106d6:	9c01      	ldr	r4, [sp, #4]
   106d8:	1d2b      	adds	r3, r5, #4
   106da:	009b      	lsls	r3, r3, #2
   106dc:	18e3      	adds	r3, r4, r3
   106de:	3501      	adds	r5, #1
   106e0:	605e      	str	r6, [r3, #4]
   106e2:	6125      	str	r5, [r4, #16]
   106e4:	0020      	movs	r0, r4
   106e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000106e8 <__hi0bits>:
   106e8:	0003      	movs	r3, r0
   106ea:	0c02      	lsrs	r2, r0, #16
   106ec:	2000      	movs	r0, #0
   106ee:	4282      	cmp	r2, r0
   106f0:	d101      	bne.n	106f6 <__hi0bits+0xe>
   106f2:	041b      	lsls	r3, r3, #16
   106f4:	3010      	adds	r0, #16
   106f6:	0e1a      	lsrs	r2, r3, #24
   106f8:	d101      	bne.n	106fe <__hi0bits+0x16>
   106fa:	3008      	adds	r0, #8
   106fc:	021b      	lsls	r3, r3, #8
   106fe:	0f1a      	lsrs	r2, r3, #28
   10700:	d101      	bne.n	10706 <__hi0bits+0x1e>
   10702:	3004      	adds	r0, #4
   10704:	011b      	lsls	r3, r3, #4
   10706:	0f9a      	lsrs	r2, r3, #30
   10708:	d101      	bne.n	1070e <__hi0bits+0x26>
   1070a:	3002      	adds	r0, #2
   1070c:	009b      	lsls	r3, r3, #2
   1070e:	2b00      	cmp	r3, #0
   10710:	db03      	blt.n	1071a <__hi0bits+0x32>
   10712:	3001      	adds	r0, #1
   10714:	005b      	lsls	r3, r3, #1
   10716:	d400      	bmi.n	1071a <__hi0bits+0x32>
   10718:	2020      	movs	r0, #32
   1071a:	4770      	bx	lr

0001071c <__lo0bits>:
   1071c:	2207      	movs	r2, #7
   1071e:	6803      	ldr	r3, [r0, #0]
   10720:	b510      	push	{r4, lr}
   10722:	0001      	movs	r1, r0
   10724:	401a      	ands	r2, r3
   10726:	d00d      	beq.n	10744 <__lo0bits+0x28>
   10728:	2401      	movs	r4, #1
   1072a:	2000      	movs	r0, #0
   1072c:	4223      	tst	r3, r4
   1072e:	d105      	bne.n	1073c <__lo0bits+0x20>
   10730:	3002      	adds	r0, #2
   10732:	4203      	tst	r3, r0
   10734:	d003      	beq.n	1073e <__lo0bits+0x22>
   10736:	40e3      	lsrs	r3, r4
   10738:	0020      	movs	r0, r4
   1073a:	600b      	str	r3, [r1, #0]
   1073c:	bd10      	pop	{r4, pc}
   1073e:	089b      	lsrs	r3, r3, #2
   10740:	600b      	str	r3, [r1, #0]
   10742:	e7fb      	b.n	1073c <__lo0bits+0x20>
   10744:	b29c      	uxth	r4, r3
   10746:	0010      	movs	r0, r2
   10748:	2c00      	cmp	r4, #0
   1074a:	d101      	bne.n	10750 <__lo0bits+0x34>
   1074c:	2010      	movs	r0, #16
   1074e:	0c1b      	lsrs	r3, r3, #16
   10750:	b2da      	uxtb	r2, r3
   10752:	2a00      	cmp	r2, #0
   10754:	d101      	bne.n	1075a <__lo0bits+0x3e>
   10756:	3008      	adds	r0, #8
   10758:	0a1b      	lsrs	r3, r3, #8
   1075a:	071a      	lsls	r2, r3, #28
   1075c:	d101      	bne.n	10762 <__lo0bits+0x46>
   1075e:	3004      	adds	r0, #4
   10760:	091b      	lsrs	r3, r3, #4
   10762:	079a      	lsls	r2, r3, #30
   10764:	d101      	bne.n	1076a <__lo0bits+0x4e>
   10766:	3002      	adds	r0, #2
   10768:	089b      	lsrs	r3, r3, #2
   1076a:	07da      	lsls	r2, r3, #31
   1076c:	d4e8      	bmi.n	10740 <__lo0bits+0x24>
   1076e:	085b      	lsrs	r3, r3, #1
   10770:	d001      	beq.n	10776 <__lo0bits+0x5a>
   10772:	3001      	adds	r0, #1
   10774:	e7e4      	b.n	10740 <__lo0bits+0x24>
   10776:	2020      	movs	r0, #32
   10778:	e7e0      	b.n	1073c <__lo0bits+0x20>

0001077a <__i2b>:
   1077a:	b510      	push	{r4, lr}
   1077c:	000c      	movs	r4, r1
   1077e:	2101      	movs	r1, #1
   10780:	f7ff ff25 	bl	105ce <_Balloc>
   10784:	2301      	movs	r3, #1
   10786:	6144      	str	r4, [r0, #20]
   10788:	6103      	str	r3, [r0, #16]
   1078a:	bd10      	pop	{r4, pc}

0001078c <__multiply>:
   1078c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1078e:	690b      	ldr	r3, [r1, #16]
   10790:	0015      	movs	r5, r2
   10792:	6912      	ldr	r2, [r2, #16]
   10794:	b089      	sub	sp, #36	; 0x24
   10796:	000c      	movs	r4, r1
   10798:	4293      	cmp	r3, r2
   1079a:	da01      	bge.n	107a0 <__multiply+0x14>
   1079c:	002c      	movs	r4, r5
   1079e:	000d      	movs	r5, r1
   107a0:	6927      	ldr	r7, [r4, #16]
   107a2:	692e      	ldr	r6, [r5, #16]
   107a4:	68a2      	ldr	r2, [r4, #8]
   107a6:	19bb      	adds	r3, r7, r6
   107a8:	6861      	ldr	r1, [r4, #4]
   107aa:	9301      	str	r3, [sp, #4]
   107ac:	4293      	cmp	r3, r2
   107ae:	dd00      	ble.n	107b2 <__multiply+0x26>
   107b0:	3101      	adds	r1, #1
   107b2:	f7ff ff0c 	bl	105ce <_Balloc>
   107b6:	0003      	movs	r3, r0
   107b8:	3314      	adds	r3, #20
   107ba:	9300      	str	r3, [sp, #0]
   107bc:	9a00      	ldr	r2, [sp, #0]
   107be:	19bb      	adds	r3, r7, r6
   107c0:	4694      	mov	ip, r2
   107c2:	009b      	lsls	r3, r3, #2
   107c4:	449c      	add	ip, r3
   107c6:	0013      	movs	r3, r2
   107c8:	2200      	movs	r2, #0
   107ca:	9004      	str	r0, [sp, #16]
   107cc:	4563      	cmp	r3, ip
   107ce:	d31c      	bcc.n	1080a <__multiply+0x7e>
   107d0:	002a      	movs	r2, r5
   107d2:	3414      	adds	r4, #20
   107d4:	00bf      	lsls	r7, r7, #2
   107d6:	19e3      	adds	r3, r4, r7
   107d8:	3214      	adds	r2, #20
   107da:	00b6      	lsls	r6, r6, #2
   107dc:	9305      	str	r3, [sp, #20]
   107de:	1993      	adds	r3, r2, r6
   107e0:	9402      	str	r4, [sp, #8]
   107e2:	9306      	str	r3, [sp, #24]
   107e4:	9b06      	ldr	r3, [sp, #24]
   107e6:	429a      	cmp	r2, r3
   107e8:	d311      	bcc.n	1080e <__multiply+0x82>
   107ea:	9b01      	ldr	r3, [sp, #4]
   107ec:	2b00      	cmp	r3, #0
   107ee:	dd06      	ble.n	107fe <__multiply+0x72>
   107f0:	2304      	movs	r3, #4
   107f2:	425b      	negs	r3, r3
   107f4:	449c      	add	ip, r3
   107f6:	4663      	mov	r3, ip
   107f8:	681b      	ldr	r3, [r3, #0]
   107fa:	2b00      	cmp	r3, #0
   107fc:	d051      	beq.n	108a2 <__multiply+0x116>
   107fe:	9b04      	ldr	r3, [sp, #16]
   10800:	9a01      	ldr	r2, [sp, #4]
   10802:	0018      	movs	r0, r3
   10804:	611a      	str	r2, [r3, #16]
   10806:	b009      	add	sp, #36	; 0x24
   10808:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1080a:	c304      	stmia	r3!, {r2}
   1080c:	e7de      	b.n	107cc <__multiply+0x40>
   1080e:	8814      	ldrh	r4, [r2, #0]
   10810:	2c00      	cmp	r4, #0
   10812:	d01e      	beq.n	10852 <__multiply+0xc6>
   10814:	2600      	movs	r6, #0
   10816:	9d00      	ldr	r5, [sp, #0]
   10818:	9f02      	ldr	r7, [sp, #8]
   1081a:	cf01      	ldmia	r7!, {r0}
   1081c:	9507      	str	r5, [sp, #28]
   1081e:	cd08      	ldmia	r5!, {r3}
   10820:	9303      	str	r3, [sp, #12]
   10822:	b283      	uxth	r3, r0
   10824:	4363      	muls	r3, r4
   10826:	0019      	movs	r1, r3
   10828:	466b      	mov	r3, sp
   1082a:	0c00      	lsrs	r0, r0, #16
   1082c:	899b      	ldrh	r3, [r3, #12]
   1082e:	4360      	muls	r0, r4
   10830:	18cb      	adds	r3, r1, r3
   10832:	9903      	ldr	r1, [sp, #12]
   10834:	199b      	adds	r3, r3, r6
   10836:	0c09      	lsrs	r1, r1, #16
   10838:	1841      	adds	r1, r0, r1
   1083a:	0c18      	lsrs	r0, r3, #16
   1083c:	1809      	adds	r1, r1, r0
   1083e:	0c0e      	lsrs	r6, r1, #16
   10840:	b29b      	uxth	r3, r3
   10842:	0409      	lsls	r1, r1, #16
   10844:	430b      	orrs	r3, r1
   10846:	9907      	ldr	r1, [sp, #28]
   10848:	600b      	str	r3, [r1, #0]
   1084a:	9b05      	ldr	r3, [sp, #20]
   1084c:	42bb      	cmp	r3, r7
   1084e:	d8e4      	bhi.n	1081a <__multiply+0x8e>
   10850:	602e      	str	r6, [r5, #0]
   10852:	6813      	ldr	r3, [r2, #0]
   10854:	0c1b      	lsrs	r3, r3, #16
   10856:	9303      	str	r3, [sp, #12]
   10858:	d01e      	beq.n	10898 <__multiply+0x10c>
   1085a:	2600      	movs	r6, #0
   1085c:	9b00      	ldr	r3, [sp, #0]
   1085e:	9c02      	ldr	r4, [sp, #8]
   10860:	681b      	ldr	r3, [r3, #0]
   10862:	9800      	ldr	r0, [sp, #0]
   10864:	0007      	movs	r7, r0
   10866:	8821      	ldrh	r1, [r4, #0]
   10868:	9d03      	ldr	r5, [sp, #12]
   1086a:	b29b      	uxth	r3, r3
   1086c:	4369      	muls	r1, r5
   1086e:	c820      	ldmia	r0!, {r5}
   10870:	0c2d      	lsrs	r5, r5, #16
   10872:	1949      	adds	r1, r1, r5
   10874:	198e      	adds	r6, r1, r6
   10876:	0431      	lsls	r1, r6, #16
   10878:	430b      	orrs	r3, r1
   1087a:	603b      	str	r3, [r7, #0]
   1087c:	cc08      	ldmia	r4!, {r3}
   1087e:	9903      	ldr	r1, [sp, #12]
   10880:	0c1b      	lsrs	r3, r3, #16
   10882:	434b      	muls	r3, r1
   10884:	6879      	ldr	r1, [r7, #4]
   10886:	0c36      	lsrs	r6, r6, #16
   10888:	b289      	uxth	r1, r1
   1088a:	185b      	adds	r3, r3, r1
   1088c:	9905      	ldr	r1, [sp, #20]
   1088e:	199b      	adds	r3, r3, r6
   10890:	0c1e      	lsrs	r6, r3, #16
   10892:	42a1      	cmp	r1, r4
   10894:	d8e6      	bhi.n	10864 <__multiply+0xd8>
   10896:	6003      	str	r3, [r0, #0]
   10898:	9b00      	ldr	r3, [sp, #0]
   1089a:	3204      	adds	r2, #4
   1089c:	3304      	adds	r3, #4
   1089e:	9300      	str	r3, [sp, #0]
   108a0:	e7a0      	b.n	107e4 <__multiply+0x58>
   108a2:	9b01      	ldr	r3, [sp, #4]
   108a4:	3b01      	subs	r3, #1
   108a6:	9301      	str	r3, [sp, #4]
   108a8:	e79f      	b.n	107ea <__multiply+0x5e>
	...

000108ac <__pow5mult>:
   108ac:	2303      	movs	r3, #3
   108ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   108b0:	4013      	ands	r3, r2
   108b2:	0005      	movs	r5, r0
   108b4:	000e      	movs	r6, r1
   108b6:	0014      	movs	r4, r2
   108b8:	2b00      	cmp	r3, #0
   108ba:	d008      	beq.n	108ce <__pow5mult+0x22>
   108bc:	4922      	ldr	r1, [pc, #136]	; (10948 <__pow5mult+0x9c>)
   108be:	3b01      	subs	r3, #1
   108c0:	009a      	lsls	r2, r3, #2
   108c2:	5852      	ldr	r2, [r2, r1]
   108c4:	2300      	movs	r3, #0
   108c6:	0031      	movs	r1, r6
   108c8:	f7ff fed2 	bl	10670 <__multadd>
   108cc:	0006      	movs	r6, r0
   108ce:	10a3      	asrs	r3, r4, #2
   108d0:	9301      	str	r3, [sp, #4]
   108d2:	d036      	beq.n	10942 <__pow5mult+0x96>
   108d4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   108d6:	2c00      	cmp	r4, #0
   108d8:	d107      	bne.n	108ea <__pow5mult+0x3e>
   108da:	2010      	movs	r0, #16
   108dc:	f7fd fe1c 	bl	e518 <malloc>
   108e0:	6268      	str	r0, [r5, #36]	; 0x24
   108e2:	6044      	str	r4, [r0, #4]
   108e4:	6084      	str	r4, [r0, #8]
   108e6:	6004      	str	r4, [r0, #0]
   108e8:	60c4      	str	r4, [r0, #12]
   108ea:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   108ec:	68bc      	ldr	r4, [r7, #8]
   108ee:	2c00      	cmp	r4, #0
   108f0:	d107      	bne.n	10902 <__pow5mult+0x56>
   108f2:	4916      	ldr	r1, [pc, #88]	; (1094c <__pow5mult+0xa0>)
   108f4:	0028      	movs	r0, r5
   108f6:	f7ff ff40 	bl	1077a <__i2b>
   108fa:	2300      	movs	r3, #0
   108fc:	0004      	movs	r4, r0
   108fe:	60b8      	str	r0, [r7, #8]
   10900:	6003      	str	r3, [r0, #0]
   10902:	2201      	movs	r2, #1
   10904:	9b01      	ldr	r3, [sp, #4]
   10906:	4213      	tst	r3, r2
   10908:	d00a      	beq.n	10920 <__pow5mult+0x74>
   1090a:	0031      	movs	r1, r6
   1090c:	0022      	movs	r2, r4
   1090e:	0028      	movs	r0, r5
   10910:	f7ff ff3c 	bl	1078c <__multiply>
   10914:	0007      	movs	r7, r0
   10916:	0031      	movs	r1, r6
   10918:	0028      	movs	r0, r5
   1091a:	f7ff fe90 	bl	1063e <_Bfree>
   1091e:	003e      	movs	r6, r7
   10920:	9b01      	ldr	r3, [sp, #4]
   10922:	105b      	asrs	r3, r3, #1
   10924:	9301      	str	r3, [sp, #4]
   10926:	d00c      	beq.n	10942 <__pow5mult+0x96>
   10928:	6820      	ldr	r0, [r4, #0]
   1092a:	2800      	cmp	r0, #0
   1092c:	d107      	bne.n	1093e <__pow5mult+0x92>
   1092e:	0022      	movs	r2, r4
   10930:	0021      	movs	r1, r4
   10932:	0028      	movs	r0, r5
   10934:	f7ff ff2a 	bl	1078c <__multiply>
   10938:	2300      	movs	r3, #0
   1093a:	6020      	str	r0, [r4, #0]
   1093c:	6003      	str	r3, [r0, #0]
   1093e:	0004      	movs	r4, r0
   10940:	e7df      	b.n	10902 <__pow5mult+0x56>
   10942:	0030      	movs	r0, r6
   10944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10946:	46c0      	nop			; (mov r8, r8)
   10948:	00015238 	.word	0x00015238
   1094c:	00000271 	.word	0x00000271

00010950 <__lshift>:
   10950:	b5f0      	push	{r4, r5, r6, r7, lr}
   10952:	000d      	movs	r5, r1
   10954:	0017      	movs	r7, r2
   10956:	692b      	ldr	r3, [r5, #16]
   10958:	1154      	asrs	r4, r2, #5
   1095a:	b085      	sub	sp, #20
   1095c:	18e3      	adds	r3, r4, r3
   1095e:	9302      	str	r3, [sp, #8]
   10960:	3301      	adds	r3, #1
   10962:	9301      	str	r3, [sp, #4]
   10964:	6849      	ldr	r1, [r1, #4]
   10966:	68ab      	ldr	r3, [r5, #8]
   10968:	9003      	str	r0, [sp, #12]
   1096a:	9a01      	ldr	r2, [sp, #4]
   1096c:	4293      	cmp	r3, r2
   1096e:	db34      	blt.n	109da <__lshift+0x8a>
   10970:	9803      	ldr	r0, [sp, #12]
   10972:	f7ff fe2c 	bl	105ce <_Balloc>
   10976:	2300      	movs	r3, #0
   10978:	0002      	movs	r2, r0
   1097a:	0006      	movs	r6, r0
   1097c:	0019      	movs	r1, r3
   1097e:	3214      	adds	r2, #20
   10980:	42a3      	cmp	r3, r4
   10982:	db2d      	blt.n	109e0 <__lshift+0x90>
   10984:	43e3      	mvns	r3, r4
   10986:	17db      	asrs	r3, r3, #31
   10988:	401c      	ands	r4, r3
   1098a:	002b      	movs	r3, r5
   1098c:	211f      	movs	r1, #31
   1098e:	00a4      	lsls	r4, r4, #2
   10990:	1914      	adds	r4, r2, r4
   10992:	692a      	ldr	r2, [r5, #16]
   10994:	3314      	adds	r3, #20
   10996:	0092      	lsls	r2, r2, #2
   10998:	189a      	adds	r2, r3, r2
   1099a:	400f      	ands	r7, r1
   1099c:	d024      	beq.n	109e8 <__lshift+0x98>
   1099e:	3101      	adds	r1, #1
   109a0:	1bc9      	subs	r1, r1, r7
   109a2:	468c      	mov	ip, r1
   109a4:	2100      	movs	r1, #0
   109a6:	6818      	ldr	r0, [r3, #0]
   109a8:	40b8      	lsls	r0, r7
   109aa:	4301      	orrs	r1, r0
   109ac:	4660      	mov	r0, ip
   109ae:	6021      	str	r1, [r4, #0]
   109b0:	cb02      	ldmia	r3!, {r1}
   109b2:	3404      	adds	r4, #4
   109b4:	40c1      	lsrs	r1, r0
   109b6:	429a      	cmp	r2, r3
   109b8:	d8f5      	bhi.n	109a6 <__lshift+0x56>
   109ba:	6021      	str	r1, [r4, #0]
   109bc:	2900      	cmp	r1, #0
   109be:	d002      	beq.n	109c6 <__lshift+0x76>
   109c0:	9b02      	ldr	r3, [sp, #8]
   109c2:	3302      	adds	r3, #2
   109c4:	9301      	str	r3, [sp, #4]
   109c6:	9b01      	ldr	r3, [sp, #4]
   109c8:	9803      	ldr	r0, [sp, #12]
   109ca:	3b01      	subs	r3, #1
   109cc:	6133      	str	r3, [r6, #16]
   109ce:	0029      	movs	r1, r5
   109d0:	f7ff fe35 	bl	1063e <_Bfree>
   109d4:	0030      	movs	r0, r6
   109d6:	b005      	add	sp, #20
   109d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109da:	3101      	adds	r1, #1
   109dc:	005b      	lsls	r3, r3, #1
   109de:	e7c4      	b.n	1096a <__lshift+0x1a>
   109e0:	0098      	lsls	r0, r3, #2
   109e2:	5011      	str	r1, [r2, r0]
   109e4:	3301      	adds	r3, #1
   109e6:	e7cb      	b.n	10980 <__lshift+0x30>
   109e8:	cb02      	ldmia	r3!, {r1}
   109ea:	c402      	stmia	r4!, {r1}
   109ec:	429a      	cmp	r2, r3
   109ee:	d8fb      	bhi.n	109e8 <__lshift+0x98>
   109f0:	e7e9      	b.n	109c6 <__lshift+0x76>

000109f2 <__mcmp>:
   109f2:	690a      	ldr	r2, [r1, #16]
   109f4:	6903      	ldr	r3, [r0, #16]
   109f6:	b530      	push	{r4, r5, lr}
   109f8:	1a9b      	subs	r3, r3, r2
   109fa:	d10e      	bne.n	10a1a <__mcmp+0x28>
   109fc:	0092      	lsls	r2, r2, #2
   109fe:	3014      	adds	r0, #20
   10a00:	3114      	adds	r1, #20
   10a02:	1884      	adds	r4, r0, r2
   10a04:	1889      	adds	r1, r1, r2
   10a06:	3c04      	subs	r4, #4
   10a08:	3904      	subs	r1, #4
   10a0a:	6822      	ldr	r2, [r4, #0]
   10a0c:	680d      	ldr	r5, [r1, #0]
   10a0e:	42aa      	cmp	r2, r5
   10a10:	d005      	beq.n	10a1e <__mcmp+0x2c>
   10a12:	42aa      	cmp	r2, r5
   10a14:	4192      	sbcs	r2, r2
   10a16:	2301      	movs	r3, #1
   10a18:	4313      	orrs	r3, r2
   10a1a:	0018      	movs	r0, r3
   10a1c:	bd30      	pop	{r4, r5, pc}
   10a1e:	42a0      	cmp	r0, r4
   10a20:	d3f1      	bcc.n	10a06 <__mcmp+0x14>
   10a22:	e7fa      	b.n	10a1a <__mcmp+0x28>

00010a24 <__mdiff>:
   10a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a26:	000d      	movs	r5, r1
   10a28:	b085      	sub	sp, #20
   10a2a:	0007      	movs	r7, r0
   10a2c:	0011      	movs	r1, r2
   10a2e:	0028      	movs	r0, r5
   10a30:	0014      	movs	r4, r2
   10a32:	f7ff ffde 	bl	109f2 <__mcmp>
   10a36:	1e06      	subs	r6, r0, #0
   10a38:	d108      	bne.n	10a4c <__mdiff+0x28>
   10a3a:	0001      	movs	r1, r0
   10a3c:	0038      	movs	r0, r7
   10a3e:	f7ff fdc6 	bl	105ce <_Balloc>
   10a42:	2301      	movs	r3, #1
   10a44:	6146      	str	r6, [r0, #20]
   10a46:	6103      	str	r3, [r0, #16]
   10a48:	b005      	add	sp, #20
   10a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a4c:	2301      	movs	r3, #1
   10a4e:	9301      	str	r3, [sp, #4]
   10a50:	2800      	cmp	r0, #0
   10a52:	db04      	blt.n	10a5e <__mdiff+0x3a>
   10a54:	0023      	movs	r3, r4
   10a56:	002c      	movs	r4, r5
   10a58:	001d      	movs	r5, r3
   10a5a:	2300      	movs	r3, #0
   10a5c:	9301      	str	r3, [sp, #4]
   10a5e:	6861      	ldr	r1, [r4, #4]
   10a60:	0038      	movs	r0, r7
   10a62:	f7ff fdb4 	bl	105ce <_Balloc>
   10a66:	002f      	movs	r7, r5
   10a68:	2200      	movs	r2, #0
   10a6a:	9b01      	ldr	r3, [sp, #4]
   10a6c:	6926      	ldr	r6, [r4, #16]
   10a6e:	60c3      	str	r3, [r0, #12]
   10a70:	3414      	adds	r4, #20
   10a72:	00b3      	lsls	r3, r6, #2
   10a74:	18e3      	adds	r3, r4, r3
   10a76:	9302      	str	r3, [sp, #8]
   10a78:	692b      	ldr	r3, [r5, #16]
   10a7a:	3714      	adds	r7, #20
   10a7c:	009b      	lsls	r3, r3, #2
   10a7e:	18fb      	adds	r3, r7, r3
   10a80:	9303      	str	r3, [sp, #12]
   10a82:	0003      	movs	r3, r0
   10a84:	4694      	mov	ip, r2
   10a86:	3314      	adds	r3, #20
   10a88:	cc20      	ldmia	r4!, {r5}
   10a8a:	cf04      	ldmia	r7!, {r2}
   10a8c:	9201      	str	r2, [sp, #4]
   10a8e:	b2aa      	uxth	r2, r5
   10a90:	4494      	add	ip, r2
   10a92:	466a      	mov	r2, sp
   10a94:	4661      	mov	r1, ip
   10a96:	8892      	ldrh	r2, [r2, #4]
   10a98:	0c2d      	lsrs	r5, r5, #16
   10a9a:	1a8a      	subs	r2, r1, r2
   10a9c:	9901      	ldr	r1, [sp, #4]
   10a9e:	0c09      	lsrs	r1, r1, #16
   10aa0:	1a69      	subs	r1, r5, r1
   10aa2:	1415      	asrs	r5, r2, #16
   10aa4:	1949      	adds	r1, r1, r5
   10aa6:	140d      	asrs	r5, r1, #16
   10aa8:	b292      	uxth	r2, r2
   10aaa:	0409      	lsls	r1, r1, #16
   10aac:	430a      	orrs	r2, r1
   10aae:	601a      	str	r2, [r3, #0]
   10ab0:	9a03      	ldr	r2, [sp, #12]
   10ab2:	46ac      	mov	ip, r5
   10ab4:	3304      	adds	r3, #4
   10ab6:	42ba      	cmp	r2, r7
   10ab8:	d8e6      	bhi.n	10a88 <__mdiff+0x64>
   10aba:	9902      	ldr	r1, [sp, #8]
   10abc:	001a      	movs	r2, r3
   10abe:	428c      	cmp	r4, r1
   10ac0:	d305      	bcc.n	10ace <__mdiff+0xaa>
   10ac2:	3a04      	subs	r2, #4
   10ac4:	6813      	ldr	r3, [r2, #0]
   10ac6:	2b00      	cmp	r3, #0
   10ac8:	d00e      	beq.n	10ae8 <__mdiff+0xc4>
   10aca:	6106      	str	r6, [r0, #16]
   10acc:	e7bc      	b.n	10a48 <__mdiff+0x24>
   10ace:	cc04      	ldmia	r4!, {r2}
   10ad0:	b291      	uxth	r1, r2
   10ad2:	4461      	add	r1, ip
   10ad4:	140d      	asrs	r5, r1, #16
   10ad6:	0c12      	lsrs	r2, r2, #16
   10ad8:	1952      	adds	r2, r2, r5
   10ada:	1415      	asrs	r5, r2, #16
   10adc:	b289      	uxth	r1, r1
   10ade:	0412      	lsls	r2, r2, #16
   10ae0:	430a      	orrs	r2, r1
   10ae2:	46ac      	mov	ip, r5
   10ae4:	c304      	stmia	r3!, {r2}
   10ae6:	e7e8      	b.n	10aba <__mdiff+0x96>
   10ae8:	3e01      	subs	r6, #1
   10aea:	e7ea      	b.n	10ac2 <__mdiff+0x9e>

00010aec <__d2b>:
   10aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10aee:	001d      	movs	r5, r3
   10af0:	2101      	movs	r1, #1
   10af2:	9f08      	ldr	r7, [sp, #32]
   10af4:	0014      	movs	r4, r2
   10af6:	f7ff fd6a 	bl	105ce <_Balloc>
   10afa:	032b      	lsls	r3, r5, #12
   10afc:	006d      	lsls	r5, r5, #1
   10afe:	0006      	movs	r6, r0
   10b00:	0b1b      	lsrs	r3, r3, #12
   10b02:	0d6d      	lsrs	r5, r5, #21
   10b04:	d124      	bne.n	10b50 <__d2b+0x64>
   10b06:	9301      	str	r3, [sp, #4]
   10b08:	2c00      	cmp	r4, #0
   10b0a:	d027      	beq.n	10b5c <__d2b+0x70>
   10b0c:	4668      	mov	r0, sp
   10b0e:	9400      	str	r4, [sp, #0]
   10b10:	f7ff fe04 	bl	1071c <__lo0bits>
   10b14:	9c00      	ldr	r4, [sp, #0]
   10b16:	2800      	cmp	r0, #0
   10b18:	d01e      	beq.n	10b58 <__d2b+0x6c>
   10b1a:	9b01      	ldr	r3, [sp, #4]
   10b1c:	2120      	movs	r1, #32
   10b1e:	001a      	movs	r2, r3
   10b20:	1a09      	subs	r1, r1, r0
   10b22:	408a      	lsls	r2, r1
   10b24:	40c3      	lsrs	r3, r0
   10b26:	4322      	orrs	r2, r4
   10b28:	6172      	str	r2, [r6, #20]
   10b2a:	9301      	str	r3, [sp, #4]
   10b2c:	9c01      	ldr	r4, [sp, #4]
   10b2e:	61b4      	str	r4, [r6, #24]
   10b30:	1e63      	subs	r3, r4, #1
   10b32:	419c      	sbcs	r4, r3
   10b34:	3401      	adds	r4, #1
   10b36:	6134      	str	r4, [r6, #16]
   10b38:	2d00      	cmp	r5, #0
   10b3a:	d018      	beq.n	10b6e <__d2b+0x82>
   10b3c:	4b12      	ldr	r3, [pc, #72]	; (10b88 <__d2b+0x9c>)
   10b3e:	18ed      	adds	r5, r5, r3
   10b40:	2335      	movs	r3, #53	; 0x35
   10b42:	182d      	adds	r5, r5, r0
   10b44:	603d      	str	r5, [r7, #0]
   10b46:	1a18      	subs	r0, r3, r0
   10b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10b4a:	6018      	str	r0, [r3, #0]
   10b4c:	0030      	movs	r0, r6
   10b4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10b50:	2280      	movs	r2, #128	; 0x80
   10b52:	0352      	lsls	r2, r2, #13
   10b54:	4313      	orrs	r3, r2
   10b56:	e7d6      	b.n	10b06 <__d2b+0x1a>
   10b58:	6174      	str	r4, [r6, #20]
   10b5a:	e7e7      	b.n	10b2c <__d2b+0x40>
   10b5c:	a801      	add	r0, sp, #4
   10b5e:	f7ff fddd 	bl	1071c <__lo0bits>
   10b62:	2401      	movs	r4, #1
   10b64:	9b01      	ldr	r3, [sp, #4]
   10b66:	6134      	str	r4, [r6, #16]
   10b68:	6173      	str	r3, [r6, #20]
   10b6a:	3020      	adds	r0, #32
   10b6c:	e7e4      	b.n	10b38 <__d2b+0x4c>
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <__d2b+0xa0>)
   10b70:	18c0      	adds	r0, r0, r3
   10b72:	4b07      	ldr	r3, [pc, #28]	; (10b90 <__d2b+0xa4>)
   10b74:	6038      	str	r0, [r7, #0]
   10b76:	18e3      	adds	r3, r4, r3
   10b78:	009b      	lsls	r3, r3, #2
   10b7a:	18f3      	adds	r3, r6, r3
   10b7c:	6958      	ldr	r0, [r3, #20]
   10b7e:	f7ff fdb3 	bl	106e8 <__hi0bits>
   10b82:	0164      	lsls	r4, r4, #5
   10b84:	1a20      	subs	r0, r4, r0
   10b86:	e7df      	b.n	10b48 <__d2b+0x5c>
   10b88:	fffffbcd 	.word	0xfffffbcd
   10b8c:	fffffbce 	.word	0xfffffbce
   10b90:	3fffffff 	.word	0x3fffffff

00010b94 <_calloc_r>:
   10b94:	434a      	muls	r2, r1
   10b96:	b570      	push	{r4, r5, r6, lr}
   10b98:	0011      	movs	r1, r2
   10b9a:	0014      	movs	r4, r2
   10b9c:	f7fd fd46 	bl	e62c <_malloc_r>
   10ba0:	1e05      	subs	r5, r0, #0
   10ba2:	d003      	beq.n	10bac <_calloc_r+0x18>
   10ba4:	0022      	movs	r2, r4
   10ba6:	2100      	movs	r1, #0
   10ba8:	f7fd fced 	bl	e586 <memset>
   10bac:	0028      	movs	r0, r5
   10bae:	bd70      	pop	{r4, r5, r6, pc}

00010bb0 <__ssputs_r>:
   10bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bb2:	688e      	ldr	r6, [r1, #8]
   10bb4:	b085      	sub	sp, #20
   10bb6:	0007      	movs	r7, r0
   10bb8:	000c      	movs	r4, r1
   10bba:	9203      	str	r2, [sp, #12]
   10bbc:	9301      	str	r3, [sp, #4]
   10bbe:	429e      	cmp	r6, r3
   10bc0:	d839      	bhi.n	10c36 <__ssputs_r+0x86>
   10bc2:	2390      	movs	r3, #144	; 0x90
   10bc4:	898a      	ldrh	r2, [r1, #12]
   10bc6:	00db      	lsls	r3, r3, #3
   10bc8:	421a      	tst	r2, r3
   10bca:	d034      	beq.n	10c36 <__ssputs_r+0x86>
   10bcc:	2503      	movs	r5, #3
   10bce:	6909      	ldr	r1, [r1, #16]
   10bd0:	6823      	ldr	r3, [r4, #0]
   10bd2:	1a5b      	subs	r3, r3, r1
   10bd4:	9302      	str	r3, [sp, #8]
   10bd6:	6963      	ldr	r3, [r4, #20]
   10bd8:	9802      	ldr	r0, [sp, #8]
   10bda:	435d      	muls	r5, r3
   10bdc:	0feb      	lsrs	r3, r5, #31
   10bde:	195d      	adds	r5, r3, r5
   10be0:	9b01      	ldr	r3, [sp, #4]
   10be2:	106d      	asrs	r5, r5, #1
   10be4:	3301      	adds	r3, #1
   10be6:	181b      	adds	r3, r3, r0
   10be8:	42ab      	cmp	r3, r5
   10bea:	d900      	bls.n	10bee <__ssputs_r+0x3e>
   10bec:	001d      	movs	r5, r3
   10bee:	0553      	lsls	r3, r2, #21
   10bf0:	d532      	bpl.n	10c58 <__ssputs_r+0xa8>
   10bf2:	0029      	movs	r1, r5
   10bf4:	0038      	movs	r0, r7
   10bf6:	f7fd fd19 	bl	e62c <_malloc_r>
   10bfa:	1e06      	subs	r6, r0, #0
   10bfc:	d109      	bne.n	10c12 <__ssputs_r+0x62>
   10bfe:	230c      	movs	r3, #12
   10c00:	603b      	str	r3, [r7, #0]
   10c02:	2340      	movs	r3, #64	; 0x40
   10c04:	2001      	movs	r0, #1
   10c06:	89a2      	ldrh	r2, [r4, #12]
   10c08:	4240      	negs	r0, r0
   10c0a:	4313      	orrs	r3, r2
   10c0c:	81a3      	strh	r3, [r4, #12]
   10c0e:	b005      	add	sp, #20
   10c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c12:	9a02      	ldr	r2, [sp, #8]
   10c14:	6921      	ldr	r1, [r4, #16]
   10c16:	f7fd fc9b 	bl	e550 <memcpy>
   10c1a:	89a3      	ldrh	r3, [r4, #12]
   10c1c:	4a14      	ldr	r2, [pc, #80]	; (10c70 <__ssputs_r+0xc0>)
   10c1e:	401a      	ands	r2, r3
   10c20:	2380      	movs	r3, #128	; 0x80
   10c22:	4313      	orrs	r3, r2
   10c24:	81a3      	strh	r3, [r4, #12]
   10c26:	9b02      	ldr	r3, [sp, #8]
   10c28:	6126      	str	r6, [r4, #16]
   10c2a:	18f6      	adds	r6, r6, r3
   10c2c:	6026      	str	r6, [r4, #0]
   10c2e:	6165      	str	r5, [r4, #20]
   10c30:	9e01      	ldr	r6, [sp, #4]
   10c32:	1aed      	subs	r5, r5, r3
   10c34:	60a5      	str	r5, [r4, #8]
   10c36:	9b01      	ldr	r3, [sp, #4]
   10c38:	42b3      	cmp	r3, r6
   10c3a:	d200      	bcs.n	10c3e <__ssputs_r+0x8e>
   10c3c:	001e      	movs	r6, r3
   10c3e:	0032      	movs	r2, r6
   10c40:	9903      	ldr	r1, [sp, #12]
   10c42:	6820      	ldr	r0, [r4, #0]
   10c44:	f7fd fc8d 	bl	e562 <memmove>
   10c48:	68a3      	ldr	r3, [r4, #8]
   10c4a:	2000      	movs	r0, #0
   10c4c:	1b9b      	subs	r3, r3, r6
   10c4e:	60a3      	str	r3, [r4, #8]
   10c50:	6823      	ldr	r3, [r4, #0]
   10c52:	199e      	adds	r6, r3, r6
   10c54:	6026      	str	r6, [r4, #0]
   10c56:	e7da      	b.n	10c0e <__ssputs_r+0x5e>
   10c58:	002a      	movs	r2, r5
   10c5a:	0038      	movs	r0, r7
   10c5c:	f000 fb32 	bl	112c4 <_realloc_r>
   10c60:	1e06      	subs	r6, r0, #0
   10c62:	d1e0      	bne.n	10c26 <__ssputs_r+0x76>
   10c64:	6921      	ldr	r1, [r4, #16]
   10c66:	0038      	movs	r0, r7
   10c68:	f7fd fc96 	bl	e598 <_free_r>
   10c6c:	e7c7      	b.n	10bfe <__ssputs_r+0x4e>
   10c6e:	46c0      	nop			; (mov r8, r8)
   10c70:	fffffb7f 	.word	0xfffffb7f

00010c74 <_svfiprintf_r>:
   10c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c76:	b09f      	sub	sp, #124	; 0x7c
   10c78:	9002      	str	r0, [sp, #8]
   10c7a:	9305      	str	r3, [sp, #20]
   10c7c:	898b      	ldrh	r3, [r1, #12]
   10c7e:	000f      	movs	r7, r1
   10c80:	0016      	movs	r6, r2
   10c82:	061b      	lsls	r3, r3, #24
   10c84:	d511      	bpl.n	10caa <_svfiprintf_r+0x36>
   10c86:	690b      	ldr	r3, [r1, #16]
   10c88:	2b00      	cmp	r3, #0
   10c8a:	d10e      	bne.n	10caa <_svfiprintf_r+0x36>
   10c8c:	2140      	movs	r1, #64	; 0x40
   10c8e:	f7fd fccd 	bl	e62c <_malloc_r>
   10c92:	6038      	str	r0, [r7, #0]
   10c94:	6138      	str	r0, [r7, #16]
   10c96:	2800      	cmp	r0, #0
   10c98:	d105      	bne.n	10ca6 <_svfiprintf_r+0x32>
   10c9a:	230c      	movs	r3, #12
   10c9c:	9a02      	ldr	r2, [sp, #8]
   10c9e:	3801      	subs	r0, #1
   10ca0:	6013      	str	r3, [r2, #0]
   10ca2:	b01f      	add	sp, #124	; 0x7c
   10ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ca6:	2340      	movs	r3, #64	; 0x40
   10ca8:	617b      	str	r3, [r7, #20]
   10caa:	2300      	movs	r3, #0
   10cac:	ad06      	add	r5, sp, #24
   10cae:	616b      	str	r3, [r5, #20]
   10cb0:	3320      	adds	r3, #32
   10cb2:	766b      	strb	r3, [r5, #25]
   10cb4:	3310      	adds	r3, #16
   10cb6:	76ab      	strb	r3, [r5, #26]
   10cb8:	0034      	movs	r4, r6
   10cba:	7823      	ldrb	r3, [r4, #0]
   10cbc:	2b00      	cmp	r3, #0
   10cbe:	d147      	bne.n	10d50 <_svfiprintf_r+0xdc>
   10cc0:	1ba3      	subs	r3, r4, r6
   10cc2:	9304      	str	r3, [sp, #16]
   10cc4:	d00d      	beq.n	10ce2 <_svfiprintf_r+0x6e>
   10cc6:	1ba3      	subs	r3, r4, r6
   10cc8:	0032      	movs	r2, r6
   10cca:	0039      	movs	r1, r7
   10ccc:	9802      	ldr	r0, [sp, #8]
   10cce:	f7ff ff6f 	bl	10bb0 <__ssputs_r>
   10cd2:	1c43      	adds	r3, r0, #1
   10cd4:	d100      	bne.n	10cd8 <_svfiprintf_r+0x64>
   10cd6:	e0b5      	b.n	10e44 <_svfiprintf_r+0x1d0>
   10cd8:	696a      	ldr	r2, [r5, #20]
   10cda:	9b04      	ldr	r3, [sp, #16]
   10cdc:	4694      	mov	ip, r2
   10cde:	4463      	add	r3, ip
   10ce0:	616b      	str	r3, [r5, #20]
   10ce2:	7823      	ldrb	r3, [r4, #0]
   10ce4:	2b00      	cmp	r3, #0
   10ce6:	d100      	bne.n	10cea <_svfiprintf_r+0x76>
   10ce8:	e0ac      	b.n	10e44 <_svfiprintf_r+0x1d0>
   10cea:	2201      	movs	r2, #1
   10cec:	2300      	movs	r3, #0
   10cee:	4252      	negs	r2, r2
   10cf0:	606a      	str	r2, [r5, #4]
   10cf2:	a902      	add	r1, sp, #8
   10cf4:	3254      	adds	r2, #84	; 0x54
   10cf6:	1852      	adds	r2, r2, r1
   10cf8:	3401      	adds	r4, #1
   10cfa:	602b      	str	r3, [r5, #0]
   10cfc:	60eb      	str	r3, [r5, #12]
   10cfe:	60ab      	str	r3, [r5, #8]
   10d00:	7013      	strb	r3, [r2, #0]
   10d02:	65ab      	str	r3, [r5, #88]	; 0x58
   10d04:	4e58      	ldr	r6, [pc, #352]	; (10e68 <_svfiprintf_r+0x1f4>)
   10d06:	2205      	movs	r2, #5
   10d08:	7821      	ldrb	r1, [r4, #0]
   10d0a:	0030      	movs	r0, r6
   10d0c:	f7ff fc52 	bl	105b4 <memchr>
   10d10:	1c62      	adds	r2, r4, #1
   10d12:	2800      	cmp	r0, #0
   10d14:	d120      	bne.n	10d58 <_svfiprintf_r+0xe4>
   10d16:	6829      	ldr	r1, [r5, #0]
   10d18:	06cb      	lsls	r3, r1, #27
   10d1a:	d504      	bpl.n	10d26 <_svfiprintf_r+0xb2>
   10d1c:	2353      	movs	r3, #83	; 0x53
   10d1e:	ae02      	add	r6, sp, #8
   10d20:	3020      	adds	r0, #32
   10d22:	199b      	adds	r3, r3, r6
   10d24:	7018      	strb	r0, [r3, #0]
   10d26:	070b      	lsls	r3, r1, #28
   10d28:	d504      	bpl.n	10d34 <_svfiprintf_r+0xc0>
   10d2a:	2353      	movs	r3, #83	; 0x53
   10d2c:	202b      	movs	r0, #43	; 0x2b
   10d2e:	ae02      	add	r6, sp, #8
   10d30:	199b      	adds	r3, r3, r6
   10d32:	7018      	strb	r0, [r3, #0]
   10d34:	7823      	ldrb	r3, [r4, #0]
   10d36:	2b2a      	cmp	r3, #42	; 0x2a
   10d38:	d016      	beq.n	10d68 <_svfiprintf_r+0xf4>
   10d3a:	2000      	movs	r0, #0
   10d3c:	210a      	movs	r1, #10
   10d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d40:	7822      	ldrb	r2, [r4, #0]
   10d42:	3a30      	subs	r2, #48	; 0x30
   10d44:	2a09      	cmp	r2, #9
   10d46:	d955      	bls.n	10df4 <_svfiprintf_r+0x180>
   10d48:	2800      	cmp	r0, #0
   10d4a:	d015      	beq.n	10d78 <_svfiprintf_r+0x104>
   10d4c:	9309      	str	r3, [sp, #36]	; 0x24
   10d4e:	e013      	b.n	10d78 <_svfiprintf_r+0x104>
   10d50:	2b25      	cmp	r3, #37	; 0x25
   10d52:	d0b5      	beq.n	10cc0 <_svfiprintf_r+0x4c>
   10d54:	3401      	adds	r4, #1
   10d56:	e7b0      	b.n	10cba <_svfiprintf_r+0x46>
   10d58:	2301      	movs	r3, #1
   10d5a:	1b80      	subs	r0, r0, r6
   10d5c:	4083      	lsls	r3, r0
   10d5e:	6829      	ldr	r1, [r5, #0]
   10d60:	0014      	movs	r4, r2
   10d62:	430b      	orrs	r3, r1
   10d64:	602b      	str	r3, [r5, #0]
   10d66:	e7cd      	b.n	10d04 <_svfiprintf_r+0x90>
   10d68:	9b05      	ldr	r3, [sp, #20]
   10d6a:	1d18      	adds	r0, r3, #4
   10d6c:	681b      	ldr	r3, [r3, #0]
   10d6e:	9005      	str	r0, [sp, #20]
   10d70:	2b00      	cmp	r3, #0
   10d72:	db39      	blt.n	10de8 <_svfiprintf_r+0x174>
   10d74:	9309      	str	r3, [sp, #36]	; 0x24
   10d76:	0014      	movs	r4, r2
   10d78:	7823      	ldrb	r3, [r4, #0]
   10d7a:	2b2e      	cmp	r3, #46	; 0x2e
   10d7c:	d10b      	bne.n	10d96 <_svfiprintf_r+0x122>
   10d7e:	7863      	ldrb	r3, [r4, #1]
   10d80:	1c62      	adds	r2, r4, #1
   10d82:	2b2a      	cmp	r3, #42	; 0x2a
   10d84:	d13e      	bne.n	10e04 <_svfiprintf_r+0x190>
   10d86:	9b05      	ldr	r3, [sp, #20]
   10d88:	3402      	adds	r4, #2
   10d8a:	1d1a      	adds	r2, r3, #4
   10d8c:	681b      	ldr	r3, [r3, #0]
   10d8e:	9205      	str	r2, [sp, #20]
   10d90:	2b00      	cmp	r3, #0
   10d92:	db34      	blt.n	10dfe <_svfiprintf_r+0x18a>
   10d94:	9307      	str	r3, [sp, #28]
   10d96:	4e35      	ldr	r6, [pc, #212]	; (10e6c <_svfiprintf_r+0x1f8>)
   10d98:	7821      	ldrb	r1, [r4, #0]
   10d9a:	2203      	movs	r2, #3
   10d9c:	0030      	movs	r0, r6
   10d9e:	f7ff fc09 	bl	105b4 <memchr>
   10da2:	2800      	cmp	r0, #0
   10da4:	d006      	beq.n	10db4 <_svfiprintf_r+0x140>
   10da6:	2340      	movs	r3, #64	; 0x40
   10da8:	1b80      	subs	r0, r0, r6
   10daa:	4083      	lsls	r3, r0
   10dac:	682a      	ldr	r2, [r5, #0]
   10dae:	3401      	adds	r4, #1
   10db0:	4313      	orrs	r3, r2
   10db2:	602b      	str	r3, [r5, #0]
   10db4:	7821      	ldrb	r1, [r4, #0]
   10db6:	2206      	movs	r2, #6
   10db8:	482d      	ldr	r0, [pc, #180]	; (10e70 <_svfiprintf_r+0x1fc>)
   10dba:	1c66      	adds	r6, r4, #1
   10dbc:	7629      	strb	r1, [r5, #24]
   10dbe:	f7ff fbf9 	bl	105b4 <memchr>
   10dc2:	2800      	cmp	r0, #0
   10dc4:	d046      	beq.n	10e54 <_svfiprintf_r+0x1e0>
   10dc6:	4b2b      	ldr	r3, [pc, #172]	; (10e74 <_svfiprintf_r+0x200>)
   10dc8:	2b00      	cmp	r3, #0
   10dca:	d12f      	bne.n	10e2c <_svfiprintf_r+0x1b8>
   10dcc:	6829      	ldr	r1, [r5, #0]
   10dce:	9b05      	ldr	r3, [sp, #20]
   10dd0:	2207      	movs	r2, #7
   10dd2:	05c9      	lsls	r1, r1, #23
   10dd4:	d528      	bpl.n	10e28 <_svfiprintf_r+0x1b4>
   10dd6:	189b      	adds	r3, r3, r2
   10dd8:	4393      	bics	r3, r2
   10dda:	3308      	adds	r3, #8
   10ddc:	9305      	str	r3, [sp, #20]
   10dde:	696b      	ldr	r3, [r5, #20]
   10de0:	9a03      	ldr	r2, [sp, #12]
   10de2:	189b      	adds	r3, r3, r2
   10de4:	616b      	str	r3, [r5, #20]
   10de6:	e767      	b.n	10cb8 <_svfiprintf_r+0x44>
   10de8:	425b      	negs	r3, r3
   10dea:	60eb      	str	r3, [r5, #12]
   10dec:	2302      	movs	r3, #2
   10dee:	430b      	orrs	r3, r1
   10df0:	602b      	str	r3, [r5, #0]
   10df2:	e7c0      	b.n	10d76 <_svfiprintf_r+0x102>
   10df4:	434b      	muls	r3, r1
   10df6:	3401      	adds	r4, #1
   10df8:	189b      	adds	r3, r3, r2
   10dfa:	2001      	movs	r0, #1
   10dfc:	e7a0      	b.n	10d40 <_svfiprintf_r+0xcc>
   10dfe:	2301      	movs	r3, #1
   10e00:	425b      	negs	r3, r3
   10e02:	e7c7      	b.n	10d94 <_svfiprintf_r+0x120>
   10e04:	2300      	movs	r3, #0
   10e06:	0014      	movs	r4, r2
   10e08:	200a      	movs	r0, #10
   10e0a:	001a      	movs	r2, r3
   10e0c:	606b      	str	r3, [r5, #4]
   10e0e:	7821      	ldrb	r1, [r4, #0]
   10e10:	3930      	subs	r1, #48	; 0x30
   10e12:	2909      	cmp	r1, #9
   10e14:	d903      	bls.n	10e1e <_svfiprintf_r+0x1aa>
   10e16:	2b00      	cmp	r3, #0
   10e18:	d0bd      	beq.n	10d96 <_svfiprintf_r+0x122>
   10e1a:	9207      	str	r2, [sp, #28]
   10e1c:	e7bb      	b.n	10d96 <_svfiprintf_r+0x122>
   10e1e:	4342      	muls	r2, r0
   10e20:	3401      	adds	r4, #1
   10e22:	1852      	adds	r2, r2, r1
   10e24:	2301      	movs	r3, #1
   10e26:	e7f2      	b.n	10e0e <_svfiprintf_r+0x19a>
   10e28:	3307      	adds	r3, #7
   10e2a:	e7d5      	b.n	10dd8 <_svfiprintf_r+0x164>
   10e2c:	ab05      	add	r3, sp, #20
   10e2e:	9300      	str	r3, [sp, #0]
   10e30:	003a      	movs	r2, r7
   10e32:	4b11      	ldr	r3, [pc, #68]	; (10e78 <_svfiprintf_r+0x204>)
   10e34:	0029      	movs	r1, r5
   10e36:	9802      	ldr	r0, [sp, #8]
   10e38:	f7fd fcf2 	bl	e820 <_printf_float>
   10e3c:	9003      	str	r0, [sp, #12]
   10e3e:	9b03      	ldr	r3, [sp, #12]
   10e40:	3301      	adds	r3, #1
   10e42:	d1cc      	bne.n	10dde <_svfiprintf_r+0x16a>
   10e44:	89bb      	ldrh	r3, [r7, #12]
   10e46:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10e48:	065b      	lsls	r3, r3, #25
   10e4a:	d400      	bmi.n	10e4e <_svfiprintf_r+0x1da>
   10e4c:	e729      	b.n	10ca2 <_svfiprintf_r+0x2e>
   10e4e:	2001      	movs	r0, #1
   10e50:	4240      	negs	r0, r0
   10e52:	e726      	b.n	10ca2 <_svfiprintf_r+0x2e>
   10e54:	ab05      	add	r3, sp, #20
   10e56:	9300      	str	r3, [sp, #0]
   10e58:	003a      	movs	r2, r7
   10e5a:	4b07      	ldr	r3, [pc, #28]	; (10e78 <_svfiprintf_r+0x204>)
   10e5c:	0029      	movs	r1, r5
   10e5e:	9802      	ldr	r0, [sp, #8]
   10e60:	f7fd ff98 	bl	ed94 <_printf_i>
   10e64:	e7ea      	b.n	10e3c <_svfiprintf_r+0x1c8>
   10e66:	46c0      	nop			; (mov r8, r8)
   10e68:	00015244 	.word	0x00015244
   10e6c:	0001524a 	.word	0x0001524a
   10e70:	0001524e 	.word	0x0001524e
   10e74:	0000e821 	.word	0x0000e821
   10e78:	00010bb1 	.word	0x00010bb1

00010e7c <__sfputc_r>:
   10e7c:	6893      	ldr	r3, [r2, #8]
   10e7e:	b510      	push	{r4, lr}
   10e80:	3b01      	subs	r3, #1
   10e82:	6093      	str	r3, [r2, #8]
   10e84:	2b00      	cmp	r3, #0
   10e86:	da05      	bge.n	10e94 <__sfputc_r+0x18>
   10e88:	6994      	ldr	r4, [r2, #24]
   10e8a:	42a3      	cmp	r3, r4
   10e8c:	db08      	blt.n	10ea0 <__sfputc_r+0x24>
   10e8e:	b2cb      	uxtb	r3, r1
   10e90:	2b0a      	cmp	r3, #10
   10e92:	d005      	beq.n	10ea0 <__sfputc_r+0x24>
   10e94:	6813      	ldr	r3, [r2, #0]
   10e96:	1c58      	adds	r0, r3, #1
   10e98:	6010      	str	r0, [r2, #0]
   10e9a:	7019      	strb	r1, [r3, #0]
   10e9c:	b2c8      	uxtb	r0, r1
   10e9e:	bd10      	pop	{r4, pc}
   10ea0:	f7fe fa3e 	bl	f320 <__swbuf_r>
   10ea4:	e7fb      	b.n	10e9e <__sfputc_r+0x22>

00010ea6 <__sfputs_r>:
   10ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ea8:	0006      	movs	r6, r0
   10eaa:	000f      	movs	r7, r1
   10eac:	0014      	movs	r4, r2
   10eae:	18d5      	adds	r5, r2, r3
   10eb0:	42ac      	cmp	r4, r5
   10eb2:	d101      	bne.n	10eb8 <__sfputs_r+0x12>
   10eb4:	2000      	movs	r0, #0
   10eb6:	e007      	b.n	10ec8 <__sfputs_r+0x22>
   10eb8:	7821      	ldrb	r1, [r4, #0]
   10eba:	003a      	movs	r2, r7
   10ebc:	0030      	movs	r0, r6
   10ebe:	f7ff ffdd 	bl	10e7c <__sfputc_r>
   10ec2:	3401      	adds	r4, #1
   10ec4:	1c43      	adds	r3, r0, #1
   10ec6:	d1f3      	bne.n	10eb0 <__sfputs_r+0xa>
   10ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00010ecc <_vfiprintf_r>:
   10ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ece:	b09f      	sub	sp, #124	; 0x7c
   10ed0:	0006      	movs	r6, r0
   10ed2:	000f      	movs	r7, r1
   10ed4:	0014      	movs	r4, r2
   10ed6:	9305      	str	r3, [sp, #20]
   10ed8:	2800      	cmp	r0, #0
   10eda:	d004      	beq.n	10ee6 <_vfiprintf_r+0x1a>
   10edc:	6983      	ldr	r3, [r0, #24]
   10ede:	2b00      	cmp	r3, #0
   10ee0:	d101      	bne.n	10ee6 <_vfiprintf_r+0x1a>
   10ee2:	f7ff fa59 	bl	10398 <__sinit>
   10ee6:	4b7f      	ldr	r3, [pc, #508]	; (110e4 <_vfiprintf_r+0x218>)
   10ee8:	429f      	cmp	r7, r3
   10eea:	d15c      	bne.n	10fa6 <_vfiprintf_r+0xda>
   10eec:	6877      	ldr	r7, [r6, #4]
   10eee:	89bb      	ldrh	r3, [r7, #12]
   10ef0:	071b      	lsls	r3, r3, #28
   10ef2:	d562      	bpl.n	10fba <_vfiprintf_r+0xee>
   10ef4:	693b      	ldr	r3, [r7, #16]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	d05f      	beq.n	10fba <_vfiprintf_r+0xee>
   10efa:	2300      	movs	r3, #0
   10efc:	ad06      	add	r5, sp, #24
   10efe:	616b      	str	r3, [r5, #20]
   10f00:	3320      	adds	r3, #32
   10f02:	766b      	strb	r3, [r5, #25]
   10f04:	3310      	adds	r3, #16
   10f06:	76ab      	strb	r3, [r5, #26]
   10f08:	9402      	str	r4, [sp, #8]
   10f0a:	9c02      	ldr	r4, [sp, #8]
   10f0c:	7823      	ldrb	r3, [r4, #0]
   10f0e:	2b00      	cmp	r3, #0
   10f10:	d15d      	bne.n	10fce <_vfiprintf_r+0x102>
   10f12:	9b02      	ldr	r3, [sp, #8]
   10f14:	1ae3      	subs	r3, r4, r3
   10f16:	9304      	str	r3, [sp, #16]
   10f18:	d00d      	beq.n	10f36 <_vfiprintf_r+0x6a>
   10f1a:	9b04      	ldr	r3, [sp, #16]
   10f1c:	9a02      	ldr	r2, [sp, #8]
   10f1e:	0039      	movs	r1, r7
   10f20:	0030      	movs	r0, r6
   10f22:	f7ff ffc0 	bl	10ea6 <__sfputs_r>
   10f26:	1c43      	adds	r3, r0, #1
   10f28:	d100      	bne.n	10f2c <_vfiprintf_r+0x60>
   10f2a:	e0cc      	b.n	110c6 <_vfiprintf_r+0x1fa>
   10f2c:	696a      	ldr	r2, [r5, #20]
   10f2e:	9b04      	ldr	r3, [sp, #16]
   10f30:	4694      	mov	ip, r2
   10f32:	4463      	add	r3, ip
   10f34:	616b      	str	r3, [r5, #20]
   10f36:	7823      	ldrb	r3, [r4, #0]
   10f38:	2b00      	cmp	r3, #0
   10f3a:	d100      	bne.n	10f3e <_vfiprintf_r+0x72>
   10f3c:	e0c3      	b.n	110c6 <_vfiprintf_r+0x1fa>
   10f3e:	2201      	movs	r2, #1
   10f40:	2300      	movs	r3, #0
   10f42:	4252      	negs	r2, r2
   10f44:	606a      	str	r2, [r5, #4]
   10f46:	a902      	add	r1, sp, #8
   10f48:	3254      	adds	r2, #84	; 0x54
   10f4a:	1852      	adds	r2, r2, r1
   10f4c:	3401      	adds	r4, #1
   10f4e:	602b      	str	r3, [r5, #0]
   10f50:	60eb      	str	r3, [r5, #12]
   10f52:	60ab      	str	r3, [r5, #8]
   10f54:	7013      	strb	r3, [r2, #0]
   10f56:	65ab      	str	r3, [r5, #88]	; 0x58
   10f58:	7821      	ldrb	r1, [r4, #0]
   10f5a:	2205      	movs	r2, #5
   10f5c:	4862      	ldr	r0, [pc, #392]	; (110e8 <_vfiprintf_r+0x21c>)
   10f5e:	f7ff fb29 	bl	105b4 <memchr>
   10f62:	1c63      	adds	r3, r4, #1
   10f64:	469c      	mov	ip, r3
   10f66:	2800      	cmp	r0, #0
   10f68:	d135      	bne.n	10fd6 <_vfiprintf_r+0x10a>
   10f6a:	6829      	ldr	r1, [r5, #0]
   10f6c:	06cb      	lsls	r3, r1, #27
   10f6e:	d504      	bpl.n	10f7a <_vfiprintf_r+0xae>
   10f70:	2353      	movs	r3, #83	; 0x53
   10f72:	aa02      	add	r2, sp, #8
   10f74:	3020      	adds	r0, #32
   10f76:	189b      	adds	r3, r3, r2
   10f78:	7018      	strb	r0, [r3, #0]
   10f7a:	070b      	lsls	r3, r1, #28
   10f7c:	d504      	bpl.n	10f88 <_vfiprintf_r+0xbc>
   10f7e:	2353      	movs	r3, #83	; 0x53
   10f80:	202b      	movs	r0, #43	; 0x2b
   10f82:	aa02      	add	r2, sp, #8
   10f84:	189b      	adds	r3, r3, r2
   10f86:	7018      	strb	r0, [r3, #0]
   10f88:	7823      	ldrb	r3, [r4, #0]
   10f8a:	2b2a      	cmp	r3, #42	; 0x2a
   10f8c:	d02c      	beq.n	10fe8 <_vfiprintf_r+0x11c>
   10f8e:	2000      	movs	r0, #0
   10f90:	210a      	movs	r1, #10
   10f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f94:	7822      	ldrb	r2, [r4, #0]
   10f96:	3a30      	subs	r2, #48	; 0x30
   10f98:	2a09      	cmp	r2, #9
   10f9a:	d800      	bhi.n	10f9e <_vfiprintf_r+0xd2>
   10f9c:	e06b      	b.n	11076 <_vfiprintf_r+0x1aa>
   10f9e:	2800      	cmp	r0, #0
   10fa0:	d02a      	beq.n	10ff8 <_vfiprintf_r+0x12c>
   10fa2:	9309      	str	r3, [sp, #36]	; 0x24
   10fa4:	e028      	b.n	10ff8 <_vfiprintf_r+0x12c>
   10fa6:	4b51      	ldr	r3, [pc, #324]	; (110ec <_vfiprintf_r+0x220>)
   10fa8:	429f      	cmp	r7, r3
   10faa:	d101      	bne.n	10fb0 <_vfiprintf_r+0xe4>
   10fac:	68b7      	ldr	r7, [r6, #8]
   10fae:	e79e      	b.n	10eee <_vfiprintf_r+0x22>
   10fb0:	4b4f      	ldr	r3, [pc, #316]	; (110f0 <_vfiprintf_r+0x224>)
   10fb2:	429f      	cmp	r7, r3
   10fb4:	d19b      	bne.n	10eee <_vfiprintf_r+0x22>
   10fb6:	68f7      	ldr	r7, [r6, #12]
   10fb8:	e799      	b.n	10eee <_vfiprintf_r+0x22>
   10fba:	0039      	movs	r1, r7
   10fbc:	0030      	movs	r0, r6
   10fbe:	f7fe fa11 	bl	f3e4 <__swsetup_r>
   10fc2:	2800      	cmp	r0, #0
   10fc4:	d099      	beq.n	10efa <_vfiprintf_r+0x2e>
   10fc6:	2001      	movs	r0, #1
   10fc8:	4240      	negs	r0, r0
   10fca:	b01f      	add	sp, #124	; 0x7c
   10fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fce:	2b25      	cmp	r3, #37	; 0x25
   10fd0:	d09f      	beq.n	10f12 <_vfiprintf_r+0x46>
   10fd2:	3401      	adds	r4, #1
   10fd4:	e79a      	b.n	10f0c <_vfiprintf_r+0x40>
   10fd6:	4b44      	ldr	r3, [pc, #272]	; (110e8 <_vfiprintf_r+0x21c>)
   10fd8:	6829      	ldr	r1, [r5, #0]
   10fda:	1ac0      	subs	r0, r0, r3
   10fdc:	2301      	movs	r3, #1
   10fde:	4083      	lsls	r3, r0
   10fe0:	430b      	orrs	r3, r1
   10fe2:	602b      	str	r3, [r5, #0]
   10fe4:	4664      	mov	r4, ip
   10fe6:	e7b7      	b.n	10f58 <_vfiprintf_r+0x8c>
   10fe8:	9b05      	ldr	r3, [sp, #20]
   10fea:	1d18      	adds	r0, r3, #4
   10fec:	681b      	ldr	r3, [r3, #0]
   10fee:	9005      	str	r0, [sp, #20]
   10ff0:	2b00      	cmp	r3, #0
   10ff2:	db3a      	blt.n	1106a <_vfiprintf_r+0x19e>
   10ff4:	9309      	str	r3, [sp, #36]	; 0x24
   10ff6:	4664      	mov	r4, ip
   10ff8:	7823      	ldrb	r3, [r4, #0]
   10ffa:	2b2e      	cmp	r3, #46	; 0x2e
   10ffc:	d10b      	bne.n	11016 <_vfiprintf_r+0x14a>
   10ffe:	7863      	ldrb	r3, [r4, #1]
   11000:	1c62      	adds	r2, r4, #1
   11002:	2b2a      	cmp	r3, #42	; 0x2a
   11004:	d13f      	bne.n	11086 <_vfiprintf_r+0x1ba>
   11006:	9b05      	ldr	r3, [sp, #20]
   11008:	3402      	adds	r4, #2
   1100a:	1d1a      	adds	r2, r3, #4
   1100c:	681b      	ldr	r3, [r3, #0]
   1100e:	9205      	str	r2, [sp, #20]
   11010:	2b00      	cmp	r3, #0
   11012:	db35      	blt.n	11080 <_vfiprintf_r+0x1b4>
   11014:	9307      	str	r3, [sp, #28]
   11016:	7821      	ldrb	r1, [r4, #0]
   11018:	2203      	movs	r2, #3
   1101a:	4836      	ldr	r0, [pc, #216]	; (110f4 <_vfiprintf_r+0x228>)
   1101c:	f7ff faca 	bl	105b4 <memchr>
   11020:	2800      	cmp	r0, #0
   11022:	d007      	beq.n	11034 <_vfiprintf_r+0x168>
   11024:	4b33      	ldr	r3, [pc, #204]	; (110f4 <_vfiprintf_r+0x228>)
   11026:	682a      	ldr	r2, [r5, #0]
   11028:	1ac0      	subs	r0, r0, r3
   1102a:	2340      	movs	r3, #64	; 0x40
   1102c:	4083      	lsls	r3, r0
   1102e:	4313      	orrs	r3, r2
   11030:	602b      	str	r3, [r5, #0]
   11032:	3401      	adds	r4, #1
   11034:	7821      	ldrb	r1, [r4, #0]
   11036:	1c63      	adds	r3, r4, #1
   11038:	2206      	movs	r2, #6
   1103a:	482f      	ldr	r0, [pc, #188]	; (110f8 <_vfiprintf_r+0x22c>)
   1103c:	9302      	str	r3, [sp, #8]
   1103e:	7629      	strb	r1, [r5, #24]
   11040:	f7ff fab8 	bl	105b4 <memchr>
   11044:	2800      	cmp	r0, #0
   11046:	d044      	beq.n	110d2 <_vfiprintf_r+0x206>
   11048:	4b2c      	ldr	r3, [pc, #176]	; (110fc <_vfiprintf_r+0x230>)
   1104a:	2b00      	cmp	r3, #0
   1104c:	d12f      	bne.n	110ae <_vfiprintf_r+0x1e2>
   1104e:	6829      	ldr	r1, [r5, #0]
   11050:	9b05      	ldr	r3, [sp, #20]
   11052:	2207      	movs	r2, #7
   11054:	05c9      	lsls	r1, r1, #23
   11056:	d528      	bpl.n	110aa <_vfiprintf_r+0x1de>
   11058:	189b      	adds	r3, r3, r2
   1105a:	4393      	bics	r3, r2
   1105c:	3308      	adds	r3, #8
   1105e:	9305      	str	r3, [sp, #20]
   11060:	696b      	ldr	r3, [r5, #20]
   11062:	9a03      	ldr	r2, [sp, #12]
   11064:	189b      	adds	r3, r3, r2
   11066:	616b      	str	r3, [r5, #20]
   11068:	e74f      	b.n	10f0a <_vfiprintf_r+0x3e>
   1106a:	425b      	negs	r3, r3
   1106c:	60eb      	str	r3, [r5, #12]
   1106e:	2302      	movs	r3, #2
   11070:	430b      	orrs	r3, r1
   11072:	602b      	str	r3, [r5, #0]
   11074:	e7bf      	b.n	10ff6 <_vfiprintf_r+0x12a>
   11076:	434b      	muls	r3, r1
   11078:	3401      	adds	r4, #1
   1107a:	189b      	adds	r3, r3, r2
   1107c:	2001      	movs	r0, #1
   1107e:	e789      	b.n	10f94 <_vfiprintf_r+0xc8>
   11080:	2301      	movs	r3, #1
   11082:	425b      	negs	r3, r3
   11084:	e7c6      	b.n	11014 <_vfiprintf_r+0x148>
   11086:	2300      	movs	r3, #0
   11088:	0014      	movs	r4, r2
   1108a:	200a      	movs	r0, #10
   1108c:	001a      	movs	r2, r3
   1108e:	606b      	str	r3, [r5, #4]
   11090:	7821      	ldrb	r1, [r4, #0]
   11092:	3930      	subs	r1, #48	; 0x30
   11094:	2909      	cmp	r1, #9
   11096:	d903      	bls.n	110a0 <_vfiprintf_r+0x1d4>
   11098:	2b00      	cmp	r3, #0
   1109a:	d0bc      	beq.n	11016 <_vfiprintf_r+0x14a>
   1109c:	9207      	str	r2, [sp, #28]
   1109e:	e7ba      	b.n	11016 <_vfiprintf_r+0x14a>
   110a0:	4342      	muls	r2, r0
   110a2:	3401      	adds	r4, #1
   110a4:	1852      	adds	r2, r2, r1
   110a6:	2301      	movs	r3, #1
   110a8:	e7f2      	b.n	11090 <_vfiprintf_r+0x1c4>
   110aa:	3307      	adds	r3, #7
   110ac:	e7d5      	b.n	1105a <_vfiprintf_r+0x18e>
   110ae:	ab05      	add	r3, sp, #20
   110b0:	9300      	str	r3, [sp, #0]
   110b2:	003a      	movs	r2, r7
   110b4:	4b12      	ldr	r3, [pc, #72]	; (11100 <_vfiprintf_r+0x234>)
   110b6:	0029      	movs	r1, r5
   110b8:	0030      	movs	r0, r6
   110ba:	f7fd fbb1 	bl	e820 <_printf_float>
   110be:	9003      	str	r0, [sp, #12]
   110c0:	9b03      	ldr	r3, [sp, #12]
   110c2:	3301      	adds	r3, #1
   110c4:	d1cc      	bne.n	11060 <_vfiprintf_r+0x194>
   110c6:	89bb      	ldrh	r3, [r7, #12]
   110c8:	065b      	lsls	r3, r3, #25
   110ca:	d500      	bpl.n	110ce <_vfiprintf_r+0x202>
   110cc:	e77b      	b.n	10fc6 <_vfiprintf_r+0xfa>
   110ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
   110d0:	e77b      	b.n	10fca <_vfiprintf_r+0xfe>
   110d2:	ab05      	add	r3, sp, #20
   110d4:	9300      	str	r3, [sp, #0]
   110d6:	003a      	movs	r2, r7
   110d8:	4b09      	ldr	r3, [pc, #36]	; (11100 <_vfiprintf_r+0x234>)
   110da:	0029      	movs	r1, r5
   110dc:	0030      	movs	r0, r6
   110de:	f7fd fe59 	bl	ed94 <_printf_i>
   110e2:	e7ec      	b.n	110be <_vfiprintf_r+0x1f2>
   110e4:	00015108 	.word	0x00015108
   110e8:	00015244 	.word	0x00015244
   110ec:	00015128 	.word	0x00015128
   110f0:	000150e8 	.word	0x000150e8
   110f4:	0001524a 	.word	0x0001524a
   110f8:	0001524e 	.word	0x0001524e
   110fc:	0000e821 	.word	0x0000e821
   11100:	00010ea7 	.word	0x00010ea7

00011104 <_putc_r>:
   11104:	b570      	push	{r4, r5, r6, lr}
   11106:	0006      	movs	r6, r0
   11108:	000d      	movs	r5, r1
   1110a:	0014      	movs	r4, r2
   1110c:	2800      	cmp	r0, #0
   1110e:	d004      	beq.n	1111a <_putc_r+0x16>
   11110:	6983      	ldr	r3, [r0, #24]
   11112:	2b00      	cmp	r3, #0
   11114:	d101      	bne.n	1111a <_putc_r+0x16>
   11116:	f7ff f93f 	bl	10398 <__sinit>
   1111a:	4b12      	ldr	r3, [pc, #72]	; (11164 <_putc_r+0x60>)
   1111c:	429c      	cmp	r4, r3
   1111e:	d111      	bne.n	11144 <_putc_r+0x40>
   11120:	6874      	ldr	r4, [r6, #4]
   11122:	68a3      	ldr	r3, [r4, #8]
   11124:	3b01      	subs	r3, #1
   11126:	60a3      	str	r3, [r4, #8]
   11128:	2b00      	cmp	r3, #0
   1112a:	da05      	bge.n	11138 <_putc_r+0x34>
   1112c:	69a2      	ldr	r2, [r4, #24]
   1112e:	4293      	cmp	r3, r2
   11130:	db12      	blt.n	11158 <_putc_r+0x54>
   11132:	b2eb      	uxtb	r3, r5
   11134:	2b0a      	cmp	r3, #10
   11136:	d00f      	beq.n	11158 <_putc_r+0x54>
   11138:	6823      	ldr	r3, [r4, #0]
   1113a:	b2e8      	uxtb	r0, r5
   1113c:	1c5a      	adds	r2, r3, #1
   1113e:	6022      	str	r2, [r4, #0]
   11140:	701d      	strb	r5, [r3, #0]
   11142:	bd70      	pop	{r4, r5, r6, pc}
   11144:	4b08      	ldr	r3, [pc, #32]	; (11168 <_putc_r+0x64>)
   11146:	429c      	cmp	r4, r3
   11148:	d101      	bne.n	1114e <_putc_r+0x4a>
   1114a:	68b4      	ldr	r4, [r6, #8]
   1114c:	e7e9      	b.n	11122 <_putc_r+0x1e>
   1114e:	4b07      	ldr	r3, [pc, #28]	; (1116c <_putc_r+0x68>)
   11150:	429c      	cmp	r4, r3
   11152:	d1e6      	bne.n	11122 <_putc_r+0x1e>
   11154:	68f4      	ldr	r4, [r6, #12]
   11156:	e7e4      	b.n	11122 <_putc_r+0x1e>
   11158:	0022      	movs	r2, r4
   1115a:	0029      	movs	r1, r5
   1115c:	0030      	movs	r0, r6
   1115e:	f7fe f8df 	bl	f320 <__swbuf_r>
   11162:	e7ee      	b.n	11142 <_putc_r+0x3e>
   11164:	00015108 	.word	0x00015108
   11168:	00015128 	.word	0x00015128
   1116c:	000150e8 	.word	0x000150e8

00011170 <__sread>:
   11170:	b570      	push	{r4, r5, r6, lr}
   11172:	000c      	movs	r4, r1
   11174:	250e      	movs	r5, #14
   11176:	5f49      	ldrsh	r1, [r1, r5]
   11178:	f000 f8ca 	bl	11310 <_read_r>
   1117c:	2800      	cmp	r0, #0
   1117e:	db03      	blt.n	11188 <__sread+0x18>
   11180:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11182:	181b      	adds	r3, r3, r0
   11184:	6563      	str	r3, [r4, #84]	; 0x54
   11186:	bd70      	pop	{r4, r5, r6, pc}
   11188:	89a3      	ldrh	r3, [r4, #12]
   1118a:	4a02      	ldr	r2, [pc, #8]	; (11194 <__sread+0x24>)
   1118c:	4013      	ands	r3, r2
   1118e:	81a3      	strh	r3, [r4, #12]
   11190:	e7f9      	b.n	11186 <__sread+0x16>
   11192:	46c0      	nop			; (mov r8, r8)
   11194:	ffffefff 	.word	0xffffefff

00011198 <__swrite>:
   11198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1119a:	001f      	movs	r7, r3
   1119c:	898b      	ldrh	r3, [r1, #12]
   1119e:	0005      	movs	r5, r0
   111a0:	000c      	movs	r4, r1
   111a2:	0016      	movs	r6, r2
   111a4:	05db      	lsls	r3, r3, #23
   111a6:	d505      	bpl.n	111b4 <__swrite+0x1c>
   111a8:	230e      	movs	r3, #14
   111aa:	5ec9      	ldrsh	r1, [r1, r3]
   111ac:	2200      	movs	r2, #0
   111ae:	2302      	movs	r3, #2
   111b0:	f000 f874 	bl	1129c <_lseek_r>
   111b4:	89a3      	ldrh	r3, [r4, #12]
   111b6:	4a05      	ldr	r2, [pc, #20]	; (111cc <__swrite+0x34>)
   111b8:	0028      	movs	r0, r5
   111ba:	4013      	ands	r3, r2
   111bc:	81a3      	strh	r3, [r4, #12]
   111be:	0032      	movs	r2, r6
   111c0:	230e      	movs	r3, #14
   111c2:	5ee1      	ldrsh	r1, [r4, r3]
   111c4:	003b      	movs	r3, r7
   111c6:	f000 f81f 	bl	11208 <_write_r>
   111ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111cc:	ffffefff 	.word	0xffffefff

000111d0 <__sseek>:
   111d0:	b570      	push	{r4, r5, r6, lr}
   111d2:	000c      	movs	r4, r1
   111d4:	250e      	movs	r5, #14
   111d6:	5f49      	ldrsh	r1, [r1, r5]
   111d8:	f000 f860 	bl	1129c <_lseek_r>
   111dc:	89a3      	ldrh	r3, [r4, #12]
   111de:	1c42      	adds	r2, r0, #1
   111e0:	d103      	bne.n	111ea <__sseek+0x1a>
   111e2:	4a05      	ldr	r2, [pc, #20]	; (111f8 <__sseek+0x28>)
   111e4:	4013      	ands	r3, r2
   111e6:	81a3      	strh	r3, [r4, #12]
   111e8:	bd70      	pop	{r4, r5, r6, pc}
   111ea:	2280      	movs	r2, #128	; 0x80
   111ec:	0152      	lsls	r2, r2, #5
   111ee:	4313      	orrs	r3, r2
   111f0:	81a3      	strh	r3, [r4, #12]
   111f2:	6560      	str	r0, [r4, #84]	; 0x54
   111f4:	e7f8      	b.n	111e8 <__sseek+0x18>
   111f6:	46c0      	nop			; (mov r8, r8)
   111f8:	ffffefff 	.word	0xffffefff

000111fc <__sclose>:
   111fc:	b510      	push	{r4, lr}
   111fe:	230e      	movs	r3, #14
   11200:	5ec9      	ldrsh	r1, [r1, r3]
   11202:	f000 f815 	bl	11230 <_close_r>
   11206:	bd10      	pop	{r4, pc}

00011208 <_write_r>:
   11208:	b570      	push	{r4, r5, r6, lr}
   1120a:	0005      	movs	r5, r0
   1120c:	0008      	movs	r0, r1
   1120e:	0011      	movs	r1, r2
   11210:	2200      	movs	r2, #0
   11212:	4c06      	ldr	r4, [pc, #24]	; (1122c <_write_r+0x24>)
   11214:	6022      	str	r2, [r4, #0]
   11216:	001a      	movs	r2, r3
   11218:	f7f9 fb3a 	bl	a890 <_write>
   1121c:	1c43      	adds	r3, r0, #1
   1121e:	d103      	bne.n	11228 <_write_r+0x20>
   11220:	6823      	ldr	r3, [r4, #0]
   11222:	2b00      	cmp	r3, #0
   11224:	d000      	beq.n	11228 <_write_r+0x20>
   11226:	602b      	str	r3, [r5, #0]
   11228:	bd70      	pop	{r4, r5, r6, pc}
   1122a:	46c0      	nop			; (mov r8, r8)
   1122c:	2000074c 	.word	0x2000074c

00011230 <_close_r>:
   11230:	2300      	movs	r3, #0
   11232:	b570      	push	{r4, r5, r6, lr}
   11234:	4c06      	ldr	r4, [pc, #24]	; (11250 <_close_r+0x20>)
   11236:	0005      	movs	r5, r0
   11238:	0008      	movs	r0, r1
   1123a:	6023      	str	r3, [r4, #0]
   1123c:	f7fb fb44 	bl	c8c8 <_close>
   11240:	1c43      	adds	r3, r0, #1
   11242:	d103      	bne.n	1124c <_close_r+0x1c>
   11244:	6823      	ldr	r3, [r4, #0]
   11246:	2b00      	cmp	r3, #0
   11248:	d000      	beq.n	1124c <_close_r+0x1c>
   1124a:	602b      	str	r3, [r5, #0]
   1124c:	bd70      	pop	{r4, r5, r6, pc}
   1124e:	46c0      	nop			; (mov r8, r8)
   11250:	2000074c 	.word	0x2000074c

00011254 <_fstat_r>:
   11254:	2300      	movs	r3, #0
   11256:	b570      	push	{r4, r5, r6, lr}
   11258:	4c06      	ldr	r4, [pc, #24]	; (11274 <_fstat_r+0x20>)
   1125a:	0005      	movs	r5, r0
   1125c:	0008      	movs	r0, r1
   1125e:	0011      	movs	r1, r2
   11260:	6023      	str	r3, [r4, #0]
   11262:	f7fb fb3b 	bl	c8dc <_fstat>
   11266:	1c43      	adds	r3, r0, #1
   11268:	d103      	bne.n	11272 <_fstat_r+0x1e>
   1126a:	6823      	ldr	r3, [r4, #0]
   1126c:	2b00      	cmp	r3, #0
   1126e:	d000      	beq.n	11272 <_fstat_r+0x1e>
   11270:	602b      	str	r3, [r5, #0]
   11272:	bd70      	pop	{r4, r5, r6, pc}
   11274:	2000074c 	.word	0x2000074c

00011278 <_isatty_r>:
   11278:	2300      	movs	r3, #0
   1127a:	b570      	push	{r4, r5, r6, lr}
   1127c:	4c06      	ldr	r4, [pc, #24]	; (11298 <_isatty_r+0x20>)
   1127e:	0005      	movs	r5, r0
   11280:	0008      	movs	r0, r1
   11282:	6023      	str	r3, [r4, #0]
   11284:	f7fb fb38 	bl	c8f8 <_isatty>
   11288:	1c43      	adds	r3, r0, #1
   1128a:	d103      	bne.n	11294 <_isatty_r+0x1c>
   1128c:	6823      	ldr	r3, [r4, #0]
   1128e:	2b00      	cmp	r3, #0
   11290:	d000      	beq.n	11294 <_isatty_r+0x1c>
   11292:	602b      	str	r3, [r5, #0]
   11294:	bd70      	pop	{r4, r5, r6, pc}
   11296:	46c0      	nop			; (mov r8, r8)
   11298:	2000074c 	.word	0x2000074c

0001129c <_lseek_r>:
   1129c:	b570      	push	{r4, r5, r6, lr}
   1129e:	0005      	movs	r5, r0
   112a0:	0008      	movs	r0, r1
   112a2:	0011      	movs	r1, r2
   112a4:	2200      	movs	r2, #0
   112a6:	4c06      	ldr	r4, [pc, #24]	; (112c0 <_lseek_r+0x24>)
   112a8:	6022      	str	r2, [r4, #0]
   112aa:	001a      	movs	r2, r3
   112ac:	f7fb fb2d 	bl	c90a <_lseek>
   112b0:	1c43      	adds	r3, r0, #1
   112b2:	d103      	bne.n	112bc <_lseek_r+0x20>
   112b4:	6823      	ldr	r3, [r4, #0]
   112b6:	2b00      	cmp	r3, #0
   112b8:	d000      	beq.n	112bc <_lseek_r+0x20>
   112ba:	602b      	str	r3, [r5, #0]
   112bc:	bd70      	pop	{r4, r5, r6, pc}
   112be:	46c0      	nop			; (mov r8, r8)
   112c0:	2000074c 	.word	0x2000074c

000112c4 <_realloc_r>:
   112c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112c6:	0007      	movs	r7, r0
   112c8:	000d      	movs	r5, r1
   112ca:	0016      	movs	r6, r2
   112cc:	2900      	cmp	r1, #0
   112ce:	d105      	bne.n	112dc <_realloc_r+0x18>
   112d0:	0011      	movs	r1, r2
   112d2:	f7fd f9ab 	bl	e62c <_malloc_r>
   112d6:	0004      	movs	r4, r0
   112d8:	0020      	movs	r0, r4
   112da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112dc:	2a00      	cmp	r2, #0
   112de:	d103      	bne.n	112e8 <_realloc_r+0x24>
   112e0:	f7fd f95a 	bl	e598 <_free_r>
   112e4:	0034      	movs	r4, r6
   112e6:	e7f7      	b.n	112d8 <_realloc_r+0x14>
   112e8:	f000 f826 	bl	11338 <_malloc_usable_size_r>
   112ec:	002c      	movs	r4, r5
   112ee:	4286      	cmp	r6, r0
   112f0:	d9f2      	bls.n	112d8 <_realloc_r+0x14>
   112f2:	0031      	movs	r1, r6
   112f4:	0038      	movs	r0, r7
   112f6:	f7fd f999 	bl	e62c <_malloc_r>
   112fa:	1e04      	subs	r4, r0, #0
   112fc:	d0ec      	beq.n	112d8 <_realloc_r+0x14>
   112fe:	0029      	movs	r1, r5
   11300:	0032      	movs	r2, r6
   11302:	f7fd f925 	bl	e550 <memcpy>
   11306:	0029      	movs	r1, r5
   11308:	0038      	movs	r0, r7
   1130a:	f7fd f945 	bl	e598 <_free_r>
   1130e:	e7e3      	b.n	112d8 <_realloc_r+0x14>

00011310 <_read_r>:
   11310:	b570      	push	{r4, r5, r6, lr}
   11312:	0005      	movs	r5, r0
   11314:	0008      	movs	r0, r1
   11316:	0011      	movs	r1, r2
   11318:	2200      	movs	r2, #0
   1131a:	4c06      	ldr	r4, [pc, #24]	; (11334 <_read_r+0x24>)
   1131c:	6022      	str	r2, [r4, #0]
   1131e:	001a      	movs	r2, r3
   11320:	f7f9 fa8c 	bl	a83c <_read>
   11324:	1c43      	adds	r3, r0, #1
   11326:	d103      	bne.n	11330 <_read_r+0x20>
   11328:	6823      	ldr	r3, [r4, #0]
   1132a:	2b00      	cmp	r3, #0
   1132c:	d000      	beq.n	11330 <_read_r+0x20>
   1132e:	602b      	str	r3, [r5, #0]
   11330:	bd70      	pop	{r4, r5, r6, pc}
   11332:	46c0      	nop			; (mov r8, r8)
   11334:	2000074c 	.word	0x2000074c

00011338 <_malloc_usable_size_r>:
   11338:	1f0b      	subs	r3, r1, #4
   1133a:	681b      	ldr	r3, [r3, #0]
   1133c:	1f18      	subs	r0, r3, #4
   1133e:	2b00      	cmp	r3, #0
   11340:	da01      	bge.n	11346 <_malloc_usable_size_r+0xe>
   11342:	580b      	ldr	r3, [r1, r0]
   11344:	18c0      	adds	r0, r0, r3
   11346:	4770      	bx	lr

00011348 <__gnu_thumb1_case_uqi>:
   11348:	b402      	push	{r1}
   1134a:	4671      	mov	r1, lr
   1134c:	0849      	lsrs	r1, r1, #1
   1134e:	0049      	lsls	r1, r1, #1
   11350:	5c09      	ldrb	r1, [r1, r0]
   11352:	0049      	lsls	r1, r1, #1
   11354:	448e      	add	lr, r1
   11356:	bc02      	pop	{r1}
   11358:	4770      	bx	lr
   1135a:	46c0      	nop			; (mov r8, r8)

0001135c <__udivsi3>:
   1135c:	2200      	movs	r2, #0
   1135e:	0843      	lsrs	r3, r0, #1
   11360:	428b      	cmp	r3, r1
   11362:	d374      	bcc.n	1144e <__udivsi3+0xf2>
   11364:	0903      	lsrs	r3, r0, #4
   11366:	428b      	cmp	r3, r1
   11368:	d35f      	bcc.n	1142a <__udivsi3+0xce>
   1136a:	0a03      	lsrs	r3, r0, #8
   1136c:	428b      	cmp	r3, r1
   1136e:	d344      	bcc.n	113fa <__udivsi3+0x9e>
   11370:	0b03      	lsrs	r3, r0, #12
   11372:	428b      	cmp	r3, r1
   11374:	d328      	bcc.n	113c8 <__udivsi3+0x6c>
   11376:	0c03      	lsrs	r3, r0, #16
   11378:	428b      	cmp	r3, r1
   1137a:	d30d      	bcc.n	11398 <__udivsi3+0x3c>
   1137c:	22ff      	movs	r2, #255	; 0xff
   1137e:	0209      	lsls	r1, r1, #8
   11380:	ba12      	rev	r2, r2
   11382:	0c03      	lsrs	r3, r0, #16
   11384:	428b      	cmp	r3, r1
   11386:	d302      	bcc.n	1138e <__udivsi3+0x32>
   11388:	1212      	asrs	r2, r2, #8
   1138a:	0209      	lsls	r1, r1, #8
   1138c:	d065      	beq.n	1145a <__udivsi3+0xfe>
   1138e:	0b03      	lsrs	r3, r0, #12
   11390:	428b      	cmp	r3, r1
   11392:	d319      	bcc.n	113c8 <__udivsi3+0x6c>
   11394:	e000      	b.n	11398 <__udivsi3+0x3c>
   11396:	0a09      	lsrs	r1, r1, #8
   11398:	0bc3      	lsrs	r3, r0, #15
   1139a:	428b      	cmp	r3, r1
   1139c:	d301      	bcc.n	113a2 <__udivsi3+0x46>
   1139e:	03cb      	lsls	r3, r1, #15
   113a0:	1ac0      	subs	r0, r0, r3
   113a2:	4152      	adcs	r2, r2
   113a4:	0b83      	lsrs	r3, r0, #14
   113a6:	428b      	cmp	r3, r1
   113a8:	d301      	bcc.n	113ae <__udivsi3+0x52>
   113aa:	038b      	lsls	r3, r1, #14
   113ac:	1ac0      	subs	r0, r0, r3
   113ae:	4152      	adcs	r2, r2
   113b0:	0b43      	lsrs	r3, r0, #13
   113b2:	428b      	cmp	r3, r1
   113b4:	d301      	bcc.n	113ba <__udivsi3+0x5e>
   113b6:	034b      	lsls	r3, r1, #13
   113b8:	1ac0      	subs	r0, r0, r3
   113ba:	4152      	adcs	r2, r2
   113bc:	0b03      	lsrs	r3, r0, #12
   113be:	428b      	cmp	r3, r1
   113c0:	d301      	bcc.n	113c6 <__udivsi3+0x6a>
   113c2:	030b      	lsls	r3, r1, #12
   113c4:	1ac0      	subs	r0, r0, r3
   113c6:	4152      	adcs	r2, r2
   113c8:	0ac3      	lsrs	r3, r0, #11
   113ca:	428b      	cmp	r3, r1
   113cc:	d301      	bcc.n	113d2 <__udivsi3+0x76>
   113ce:	02cb      	lsls	r3, r1, #11
   113d0:	1ac0      	subs	r0, r0, r3
   113d2:	4152      	adcs	r2, r2
   113d4:	0a83      	lsrs	r3, r0, #10
   113d6:	428b      	cmp	r3, r1
   113d8:	d301      	bcc.n	113de <__udivsi3+0x82>
   113da:	028b      	lsls	r3, r1, #10
   113dc:	1ac0      	subs	r0, r0, r3
   113de:	4152      	adcs	r2, r2
   113e0:	0a43      	lsrs	r3, r0, #9
   113e2:	428b      	cmp	r3, r1
   113e4:	d301      	bcc.n	113ea <__udivsi3+0x8e>
   113e6:	024b      	lsls	r3, r1, #9
   113e8:	1ac0      	subs	r0, r0, r3
   113ea:	4152      	adcs	r2, r2
   113ec:	0a03      	lsrs	r3, r0, #8
   113ee:	428b      	cmp	r3, r1
   113f0:	d301      	bcc.n	113f6 <__udivsi3+0x9a>
   113f2:	020b      	lsls	r3, r1, #8
   113f4:	1ac0      	subs	r0, r0, r3
   113f6:	4152      	adcs	r2, r2
   113f8:	d2cd      	bcs.n	11396 <__udivsi3+0x3a>
   113fa:	09c3      	lsrs	r3, r0, #7
   113fc:	428b      	cmp	r3, r1
   113fe:	d301      	bcc.n	11404 <__udivsi3+0xa8>
   11400:	01cb      	lsls	r3, r1, #7
   11402:	1ac0      	subs	r0, r0, r3
   11404:	4152      	adcs	r2, r2
   11406:	0983      	lsrs	r3, r0, #6
   11408:	428b      	cmp	r3, r1
   1140a:	d301      	bcc.n	11410 <__udivsi3+0xb4>
   1140c:	018b      	lsls	r3, r1, #6
   1140e:	1ac0      	subs	r0, r0, r3
   11410:	4152      	adcs	r2, r2
   11412:	0943      	lsrs	r3, r0, #5
   11414:	428b      	cmp	r3, r1
   11416:	d301      	bcc.n	1141c <__udivsi3+0xc0>
   11418:	014b      	lsls	r3, r1, #5
   1141a:	1ac0      	subs	r0, r0, r3
   1141c:	4152      	adcs	r2, r2
   1141e:	0903      	lsrs	r3, r0, #4
   11420:	428b      	cmp	r3, r1
   11422:	d301      	bcc.n	11428 <__udivsi3+0xcc>
   11424:	010b      	lsls	r3, r1, #4
   11426:	1ac0      	subs	r0, r0, r3
   11428:	4152      	adcs	r2, r2
   1142a:	08c3      	lsrs	r3, r0, #3
   1142c:	428b      	cmp	r3, r1
   1142e:	d301      	bcc.n	11434 <__udivsi3+0xd8>
   11430:	00cb      	lsls	r3, r1, #3
   11432:	1ac0      	subs	r0, r0, r3
   11434:	4152      	adcs	r2, r2
   11436:	0883      	lsrs	r3, r0, #2
   11438:	428b      	cmp	r3, r1
   1143a:	d301      	bcc.n	11440 <__udivsi3+0xe4>
   1143c:	008b      	lsls	r3, r1, #2
   1143e:	1ac0      	subs	r0, r0, r3
   11440:	4152      	adcs	r2, r2
   11442:	0843      	lsrs	r3, r0, #1
   11444:	428b      	cmp	r3, r1
   11446:	d301      	bcc.n	1144c <__udivsi3+0xf0>
   11448:	004b      	lsls	r3, r1, #1
   1144a:	1ac0      	subs	r0, r0, r3
   1144c:	4152      	adcs	r2, r2
   1144e:	1a41      	subs	r1, r0, r1
   11450:	d200      	bcs.n	11454 <__udivsi3+0xf8>
   11452:	4601      	mov	r1, r0
   11454:	4152      	adcs	r2, r2
   11456:	4610      	mov	r0, r2
   11458:	4770      	bx	lr
   1145a:	e7ff      	b.n	1145c <__udivsi3+0x100>
   1145c:	b501      	push	{r0, lr}
   1145e:	2000      	movs	r0, #0
   11460:	f000 f8f0 	bl	11644 <__aeabi_idiv0>
   11464:	bd02      	pop	{r1, pc}
   11466:	46c0      	nop			; (mov r8, r8)

00011468 <__aeabi_uidivmod>:
   11468:	2900      	cmp	r1, #0
   1146a:	d0f7      	beq.n	1145c <__udivsi3+0x100>
   1146c:	e776      	b.n	1135c <__udivsi3>
   1146e:	4770      	bx	lr

00011470 <__divsi3>:
   11470:	4603      	mov	r3, r0
   11472:	430b      	orrs	r3, r1
   11474:	d47f      	bmi.n	11576 <__divsi3+0x106>
   11476:	2200      	movs	r2, #0
   11478:	0843      	lsrs	r3, r0, #1
   1147a:	428b      	cmp	r3, r1
   1147c:	d374      	bcc.n	11568 <__divsi3+0xf8>
   1147e:	0903      	lsrs	r3, r0, #4
   11480:	428b      	cmp	r3, r1
   11482:	d35f      	bcc.n	11544 <__divsi3+0xd4>
   11484:	0a03      	lsrs	r3, r0, #8
   11486:	428b      	cmp	r3, r1
   11488:	d344      	bcc.n	11514 <__divsi3+0xa4>
   1148a:	0b03      	lsrs	r3, r0, #12
   1148c:	428b      	cmp	r3, r1
   1148e:	d328      	bcc.n	114e2 <__divsi3+0x72>
   11490:	0c03      	lsrs	r3, r0, #16
   11492:	428b      	cmp	r3, r1
   11494:	d30d      	bcc.n	114b2 <__divsi3+0x42>
   11496:	22ff      	movs	r2, #255	; 0xff
   11498:	0209      	lsls	r1, r1, #8
   1149a:	ba12      	rev	r2, r2
   1149c:	0c03      	lsrs	r3, r0, #16
   1149e:	428b      	cmp	r3, r1
   114a0:	d302      	bcc.n	114a8 <__divsi3+0x38>
   114a2:	1212      	asrs	r2, r2, #8
   114a4:	0209      	lsls	r1, r1, #8
   114a6:	d065      	beq.n	11574 <__divsi3+0x104>
   114a8:	0b03      	lsrs	r3, r0, #12
   114aa:	428b      	cmp	r3, r1
   114ac:	d319      	bcc.n	114e2 <__divsi3+0x72>
   114ae:	e000      	b.n	114b2 <__divsi3+0x42>
   114b0:	0a09      	lsrs	r1, r1, #8
   114b2:	0bc3      	lsrs	r3, r0, #15
   114b4:	428b      	cmp	r3, r1
   114b6:	d301      	bcc.n	114bc <__divsi3+0x4c>
   114b8:	03cb      	lsls	r3, r1, #15
   114ba:	1ac0      	subs	r0, r0, r3
   114bc:	4152      	adcs	r2, r2
   114be:	0b83      	lsrs	r3, r0, #14
   114c0:	428b      	cmp	r3, r1
   114c2:	d301      	bcc.n	114c8 <__divsi3+0x58>
   114c4:	038b      	lsls	r3, r1, #14
   114c6:	1ac0      	subs	r0, r0, r3
   114c8:	4152      	adcs	r2, r2
   114ca:	0b43      	lsrs	r3, r0, #13
   114cc:	428b      	cmp	r3, r1
   114ce:	d301      	bcc.n	114d4 <__divsi3+0x64>
   114d0:	034b      	lsls	r3, r1, #13
   114d2:	1ac0      	subs	r0, r0, r3
   114d4:	4152      	adcs	r2, r2
   114d6:	0b03      	lsrs	r3, r0, #12
   114d8:	428b      	cmp	r3, r1
   114da:	d301      	bcc.n	114e0 <__divsi3+0x70>
   114dc:	030b      	lsls	r3, r1, #12
   114de:	1ac0      	subs	r0, r0, r3
   114e0:	4152      	adcs	r2, r2
   114e2:	0ac3      	lsrs	r3, r0, #11
   114e4:	428b      	cmp	r3, r1
   114e6:	d301      	bcc.n	114ec <__divsi3+0x7c>
   114e8:	02cb      	lsls	r3, r1, #11
   114ea:	1ac0      	subs	r0, r0, r3
   114ec:	4152      	adcs	r2, r2
   114ee:	0a83      	lsrs	r3, r0, #10
   114f0:	428b      	cmp	r3, r1
   114f2:	d301      	bcc.n	114f8 <__divsi3+0x88>
   114f4:	028b      	lsls	r3, r1, #10
   114f6:	1ac0      	subs	r0, r0, r3
   114f8:	4152      	adcs	r2, r2
   114fa:	0a43      	lsrs	r3, r0, #9
   114fc:	428b      	cmp	r3, r1
   114fe:	d301      	bcc.n	11504 <__divsi3+0x94>
   11500:	024b      	lsls	r3, r1, #9
   11502:	1ac0      	subs	r0, r0, r3
   11504:	4152      	adcs	r2, r2
   11506:	0a03      	lsrs	r3, r0, #8
   11508:	428b      	cmp	r3, r1
   1150a:	d301      	bcc.n	11510 <__divsi3+0xa0>
   1150c:	020b      	lsls	r3, r1, #8
   1150e:	1ac0      	subs	r0, r0, r3
   11510:	4152      	adcs	r2, r2
   11512:	d2cd      	bcs.n	114b0 <__divsi3+0x40>
   11514:	09c3      	lsrs	r3, r0, #7
   11516:	428b      	cmp	r3, r1
   11518:	d301      	bcc.n	1151e <__divsi3+0xae>
   1151a:	01cb      	lsls	r3, r1, #7
   1151c:	1ac0      	subs	r0, r0, r3
   1151e:	4152      	adcs	r2, r2
   11520:	0983      	lsrs	r3, r0, #6
   11522:	428b      	cmp	r3, r1
   11524:	d301      	bcc.n	1152a <__divsi3+0xba>
   11526:	018b      	lsls	r3, r1, #6
   11528:	1ac0      	subs	r0, r0, r3
   1152a:	4152      	adcs	r2, r2
   1152c:	0943      	lsrs	r3, r0, #5
   1152e:	428b      	cmp	r3, r1
   11530:	d301      	bcc.n	11536 <__divsi3+0xc6>
   11532:	014b      	lsls	r3, r1, #5
   11534:	1ac0      	subs	r0, r0, r3
   11536:	4152      	adcs	r2, r2
   11538:	0903      	lsrs	r3, r0, #4
   1153a:	428b      	cmp	r3, r1
   1153c:	d301      	bcc.n	11542 <__divsi3+0xd2>
   1153e:	010b      	lsls	r3, r1, #4
   11540:	1ac0      	subs	r0, r0, r3
   11542:	4152      	adcs	r2, r2
   11544:	08c3      	lsrs	r3, r0, #3
   11546:	428b      	cmp	r3, r1
   11548:	d301      	bcc.n	1154e <__divsi3+0xde>
   1154a:	00cb      	lsls	r3, r1, #3
   1154c:	1ac0      	subs	r0, r0, r3
   1154e:	4152      	adcs	r2, r2
   11550:	0883      	lsrs	r3, r0, #2
   11552:	428b      	cmp	r3, r1
   11554:	d301      	bcc.n	1155a <__divsi3+0xea>
   11556:	008b      	lsls	r3, r1, #2
   11558:	1ac0      	subs	r0, r0, r3
   1155a:	4152      	adcs	r2, r2
   1155c:	0843      	lsrs	r3, r0, #1
   1155e:	428b      	cmp	r3, r1
   11560:	d301      	bcc.n	11566 <__divsi3+0xf6>
   11562:	004b      	lsls	r3, r1, #1
   11564:	1ac0      	subs	r0, r0, r3
   11566:	4152      	adcs	r2, r2
   11568:	1a41      	subs	r1, r0, r1
   1156a:	d200      	bcs.n	1156e <__divsi3+0xfe>
   1156c:	4601      	mov	r1, r0
   1156e:	4152      	adcs	r2, r2
   11570:	4610      	mov	r0, r2
   11572:	4770      	bx	lr
   11574:	e05d      	b.n	11632 <__divsi3+0x1c2>
   11576:	0fca      	lsrs	r2, r1, #31
   11578:	d000      	beq.n	1157c <__divsi3+0x10c>
   1157a:	4249      	negs	r1, r1
   1157c:	1003      	asrs	r3, r0, #32
   1157e:	d300      	bcc.n	11582 <__divsi3+0x112>
   11580:	4240      	negs	r0, r0
   11582:	4053      	eors	r3, r2
   11584:	2200      	movs	r2, #0
   11586:	469c      	mov	ip, r3
   11588:	0903      	lsrs	r3, r0, #4
   1158a:	428b      	cmp	r3, r1
   1158c:	d32d      	bcc.n	115ea <__divsi3+0x17a>
   1158e:	0a03      	lsrs	r3, r0, #8
   11590:	428b      	cmp	r3, r1
   11592:	d312      	bcc.n	115ba <__divsi3+0x14a>
   11594:	22fc      	movs	r2, #252	; 0xfc
   11596:	0189      	lsls	r1, r1, #6
   11598:	ba12      	rev	r2, r2
   1159a:	0a03      	lsrs	r3, r0, #8
   1159c:	428b      	cmp	r3, r1
   1159e:	d30c      	bcc.n	115ba <__divsi3+0x14a>
   115a0:	0189      	lsls	r1, r1, #6
   115a2:	1192      	asrs	r2, r2, #6
   115a4:	428b      	cmp	r3, r1
   115a6:	d308      	bcc.n	115ba <__divsi3+0x14a>
   115a8:	0189      	lsls	r1, r1, #6
   115aa:	1192      	asrs	r2, r2, #6
   115ac:	428b      	cmp	r3, r1
   115ae:	d304      	bcc.n	115ba <__divsi3+0x14a>
   115b0:	0189      	lsls	r1, r1, #6
   115b2:	d03a      	beq.n	1162a <__divsi3+0x1ba>
   115b4:	1192      	asrs	r2, r2, #6
   115b6:	e000      	b.n	115ba <__divsi3+0x14a>
   115b8:	0989      	lsrs	r1, r1, #6
   115ba:	09c3      	lsrs	r3, r0, #7
   115bc:	428b      	cmp	r3, r1
   115be:	d301      	bcc.n	115c4 <__divsi3+0x154>
   115c0:	01cb      	lsls	r3, r1, #7
   115c2:	1ac0      	subs	r0, r0, r3
   115c4:	4152      	adcs	r2, r2
   115c6:	0983      	lsrs	r3, r0, #6
   115c8:	428b      	cmp	r3, r1
   115ca:	d301      	bcc.n	115d0 <__divsi3+0x160>
   115cc:	018b      	lsls	r3, r1, #6
   115ce:	1ac0      	subs	r0, r0, r3
   115d0:	4152      	adcs	r2, r2
   115d2:	0943      	lsrs	r3, r0, #5
   115d4:	428b      	cmp	r3, r1
   115d6:	d301      	bcc.n	115dc <__divsi3+0x16c>
   115d8:	014b      	lsls	r3, r1, #5
   115da:	1ac0      	subs	r0, r0, r3
   115dc:	4152      	adcs	r2, r2
   115de:	0903      	lsrs	r3, r0, #4
   115e0:	428b      	cmp	r3, r1
   115e2:	d301      	bcc.n	115e8 <__divsi3+0x178>
   115e4:	010b      	lsls	r3, r1, #4
   115e6:	1ac0      	subs	r0, r0, r3
   115e8:	4152      	adcs	r2, r2
   115ea:	08c3      	lsrs	r3, r0, #3
   115ec:	428b      	cmp	r3, r1
   115ee:	d301      	bcc.n	115f4 <__divsi3+0x184>
   115f0:	00cb      	lsls	r3, r1, #3
   115f2:	1ac0      	subs	r0, r0, r3
   115f4:	4152      	adcs	r2, r2
   115f6:	0883      	lsrs	r3, r0, #2
   115f8:	428b      	cmp	r3, r1
   115fa:	d301      	bcc.n	11600 <__divsi3+0x190>
   115fc:	008b      	lsls	r3, r1, #2
   115fe:	1ac0      	subs	r0, r0, r3
   11600:	4152      	adcs	r2, r2
   11602:	d2d9      	bcs.n	115b8 <__divsi3+0x148>
   11604:	0843      	lsrs	r3, r0, #1
   11606:	428b      	cmp	r3, r1
   11608:	d301      	bcc.n	1160e <__divsi3+0x19e>
   1160a:	004b      	lsls	r3, r1, #1
   1160c:	1ac0      	subs	r0, r0, r3
   1160e:	4152      	adcs	r2, r2
   11610:	1a41      	subs	r1, r0, r1
   11612:	d200      	bcs.n	11616 <__divsi3+0x1a6>
   11614:	4601      	mov	r1, r0
   11616:	4663      	mov	r3, ip
   11618:	4152      	adcs	r2, r2
   1161a:	105b      	asrs	r3, r3, #1
   1161c:	4610      	mov	r0, r2
   1161e:	d301      	bcc.n	11624 <__divsi3+0x1b4>
   11620:	4240      	negs	r0, r0
   11622:	2b00      	cmp	r3, #0
   11624:	d500      	bpl.n	11628 <__divsi3+0x1b8>
   11626:	4249      	negs	r1, r1
   11628:	4770      	bx	lr
   1162a:	4663      	mov	r3, ip
   1162c:	105b      	asrs	r3, r3, #1
   1162e:	d300      	bcc.n	11632 <__divsi3+0x1c2>
   11630:	4240      	negs	r0, r0
   11632:	b501      	push	{r0, lr}
   11634:	2000      	movs	r0, #0
   11636:	f000 f805 	bl	11644 <__aeabi_idiv0>
   1163a:	bd02      	pop	{r1, pc}

0001163c <__aeabi_idivmod>:
   1163c:	2900      	cmp	r1, #0
   1163e:	d0f8      	beq.n	11632 <__divsi3+0x1c2>
   11640:	e716      	b.n	11470 <__divsi3>
   11642:	4770      	bx	lr

00011644 <__aeabi_idiv0>:
   11644:	4770      	bx	lr
   11646:	46c0      	nop			; (mov r8, r8)

00011648 <__aeabi_cdrcmple>:
   11648:	4684      	mov	ip, r0
   1164a:	1c10      	adds	r0, r2, #0
   1164c:	4662      	mov	r2, ip
   1164e:	468c      	mov	ip, r1
   11650:	1c19      	adds	r1, r3, #0
   11652:	4663      	mov	r3, ip
   11654:	e000      	b.n	11658 <__aeabi_cdcmpeq>
   11656:	46c0      	nop			; (mov r8, r8)

00011658 <__aeabi_cdcmpeq>:
   11658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1165a:	f001 f9f7 	bl	12a4c <__ledf2>
   1165e:	2800      	cmp	r0, #0
   11660:	d401      	bmi.n	11666 <__aeabi_cdcmpeq+0xe>
   11662:	2100      	movs	r1, #0
   11664:	42c8      	cmn	r0, r1
   11666:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00011668 <__aeabi_dcmpeq>:
   11668:	b510      	push	{r4, lr}
   1166a:	f001 f951 	bl	12910 <__eqdf2>
   1166e:	4240      	negs	r0, r0
   11670:	3001      	adds	r0, #1
   11672:	bd10      	pop	{r4, pc}

00011674 <__aeabi_dcmplt>:
   11674:	b510      	push	{r4, lr}
   11676:	f001 f9e9 	bl	12a4c <__ledf2>
   1167a:	2800      	cmp	r0, #0
   1167c:	db01      	blt.n	11682 <__aeabi_dcmplt+0xe>
   1167e:	2000      	movs	r0, #0
   11680:	bd10      	pop	{r4, pc}
   11682:	2001      	movs	r0, #1
   11684:	bd10      	pop	{r4, pc}
   11686:	46c0      	nop			; (mov r8, r8)

00011688 <__aeabi_dcmple>:
   11688:	b510      	push	{r4, lr}
   1168a:	f001 f9df 	bl	12a4c <__ledf2>
   1168e:	2800      	cmp	r0, #0
   11690:	dd01      	ble.n	11696 <__aeabi_dcmple+0xe>
   11692:	2000      	movs	r0, #0
   11694:	bd10      	pop	{r4, pc}
   11696:	2001      	movs	r0, #1
   11698:	bd10      	pop	{r4, pc}
   1169a:	46c0      	nop			; (mov r8, r8)

0001169c <__aeabi_dcmpgt>:
   1169c:	b510      	push	{r4, lr}
   1169e:	f001 f971 	bl	12984 <__gedf2>
   116a2:	2800      	cmp	r0, #0
   116a4:	dc01      	bgt.n	116aa <__aeabi_dcmpgt+0xe>
   116a6:	2000      	movs	r0, #0
   116a8:	bd10      	pop	{r4, pc}
   116aa:	2001      	movs	r0, #1
   116ac:	bd10      	pop	{r4, pc}
   116ae:	46c0      	nop			; (mov r8, r8)

000116b0 <__aeabi_dcmpge>:
   116b0:	b510      	push	{r4, lr}
   116b2:	f001 f967 	bl	12984 <__gedf2>
   116b6:	2800      	cmp	r0, #0
   116b8:	da01      	bge.n	116be <__aeabi_dcmpge+0xe>
   116ba:	2000      	movs	r0, #0
   116bc:	bd10      	pop	{r4, pc}
   116be:	2001      	movs	r0, #1
   116c0:	bd10      	pop	{r4, pc}
   116c2:	46c0      	nop			; (mov r8, r8)

000116c4 <__aeabi_lmul>:
   116c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   116c6:	46ce      	mov	lr, r9
   116c8:	4647      	mov	r7, r8
   116ca:	0415      	lsls	r5, r2, #16
   116cc:	0c2d      	lsrs	r5, r5, #16
   116ce:	002e      	movs	r6, r5
   116d0:	b580      	push	{r7, lr}
   116d2:	0407      	lsls	r7, r0, #16
   116d4:	0c14      	lsrs	r4, r2, #16
   116d6:	0c3f      	lsrs	r7, r7, #16
   116d8:	4699      	mov	r9, r3
   116da:	0c03      	lsrs	r3, r0, #16
   116dc:	437e      	muls	r6, r7
   116de:	435d      	muls	r5, r3
   116e0:	4367      	muls	r7, r4
   116e2:	4363      	muls	r3, r4
   116e4:	197f      	adds	r7, r7, r5
   116e6:	0c34      	lsrs	r4, r6, #16
   116e8:	19e4      	adds	r4, r4, r7
   116ea:	469c      	mov	ip, r3
   116ec:	42a5      	cmp	r5, r4
   116ee:	d903      	bls.n	116f8 <__aeabi_lmul+0x34>
   116f0:	2380      	movs	r3, #128	; 0x80
   116f2:	025b      	lsls	r3, r3, #9
   116f4:	4698      	mov	r8, r3
   116f6:	44c4      	add	ip, r8
   116f8:	464b      	mov	r3, r9
   116fa:	4351      	muls	r1, r2
   116fc:	4343      	muls	r3, r0
   116fe:	0436      	lsls	r6, r6, #16
   11700:	0c36      	lsrs	r6, r6, #16
   11702:	0c25      	lsrs	r5, r4, #16
   11704:	0424      	lsls	r4, r4, #16
   11706:	4465      	add	r5, ip
   11708:	19a4      	adds	r4, r4, r6
   1170a:	1859      	adds	r1, r3, r1
   1170c:	1949      	adds	r1, r1, r5
   1170e:	0020      	movs	r0, r4
   11710:	bc0c      	pop	{r2, r3}
   11712:	4690      	mov	r8, r2
   11714:	4699      	mov	r9, r3
   11716:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011718 <__aeabi_fdiv>:
   11718:	b5f0      	push	{r4, r5, r6, r7, lr}
   1171a:	4657      	mov	r7, sl
   1171c:	464e      	mov	r6, r9
   1171e:	46de      	mov	lr, fp
   11720:	4645      	mov	r5, r8
   11722:	b5e0      	push	{r5, r6, r7, lr}
   11724:	0244      	lsls	r4, r0, #9
   11726:	0043      	lsls	r3, r0, #1
   11728:	0fc6      	lsrs	r6, r0, #31
   1172a:	b083      	sub	sp, #12
   1172c:	1c0f      	adds	r7, r1, #0
   1172e:	0a64      	lsrs	r4, r4, #9
   11730:	0e1b      	lsrs	r3, r3, #24
   11732:	46b2      	mov	sl, r6
   11734:	d053      	beq.n	117de <__aeabi_fdiv+0xc6>
   11736:	2bff      	cmp	r3, #255	; 0xff
   11738:	d027      	beq.n	1178a <__aeabi_fdiv+0x72>
   1173a:	2280      	movs	r2, #128	; 0x80
   1173c:	00e4      	lsls	r4, r4, #3
   1173e:	04d2      	lsls	r2, r2, #19
   11740:	4314      	orrs	r4, r2
   11742:	227f      	movs	r2, #127	; 0x7f
   11744:	4252      	negs	r2, r2
   11746:	4690      	mov	r8, r2
   11748:	4498      	add	r8, r3
   1174a:	2300      	movs	r3, #0
   1174c:	4699      	mov	r9, r3
   1174e:	469b      	mov	fp, r3
   11750:	027d      	lsls	r5, r7, #9
   11752:	0078      	lsls	r0, r7, #1
   11754:	0ffb      	lsrs	r3, r7, #31
   11756:	0a6d      	lsrs	r5, r5, #9
   11758:	0e00      	lsrs	r0, r0, #24
   1175a:	9300      	str	r3, [sp, #0]
   1175c:	d024      	beq.n	117a8 <__aeabi_fdiv+0x90>
   1175e:	28ff      	cmp	r0, #255	; 0xff
   11760:	d046      	beq.n	117f0 <__aeabi_fdiv+0xd8>
   11762:	2380      	movs	r3, #128	; 0x80
   11764:	2100      	movs	r1, #0
   11766:	00ed      	lsls	r5, r5, #3
   11768:	04db      	lsls	r3, r3, #19
   1176a:	431d      	orrs	r5, r3
   1176c:	387f      	subs	r0, #127	; 0x7f
   1176e:	4647      	mov	r7, r8
   11770:	1a38      	subs	r0, r7, r0
   11772:	464f      	mov	r7, r9
   11774:	430f      	orrs	r7, r1
   11776:	00bf      	lsls	r7, r7, #2
   11778:	46b9      	mov	r9, r7
   1177a:	0033      	movs	r3, r6
   1177c:	9a00      	ldr	r2, [sp, #0]
   1177e:	4f87      	ldr	r7, [pc, #540]	; (1199c <__aeabi_fdiv+0x284>)
   11780:	4053      	eors	r3, r2
   11782:	464a      	mov	r2, r9
   11784:	58ba      	ldr	r2, [r7, r2]
   11786:	9301      	str	r3, [sp, #4]
   11788:	4697      	mov	pc, r2
   1178a:	2c00      	cmp	r4, #0
   1178c:	d14e      	bne.n	1182c <__aeabi_fdiv+0x114>
   1178e:	2308      	movs	r3, #8
   11790:	4699      	mov	r9, r3
   11792:	33f7      	adds	r3, #247	; 0xf7
   11794:	4698      	mov	r8, r3
   11796:	3bfd      	subs	r3, #253	; 0xfd
   11798:	469b      	mov	fp, r3
   1179a:	027d      	lsls	r5, r7, #9
   1179c:	0078      	lsls	r0, r7, #1
   1179e:	0ffb      	lsrs	r3, r7, #31
   117a0:	0a6d      	lsrs	r5, r5, #9
   117a2:	0e00      	lsrs	r0, r0, #24
   117a4:	9300      	str	r3, [sp, #0]
   117a6:	d1da      	bne.n	1175e <__aeabi_fdiv+0x46>
   117a8:	2d00      	cmp	r5, #0
   117aa:	d126      	bne.n	117fa <__aeabi_fdiv+0xe2>
   117ac:	2000      	movs	r0, #0
   117ae:	2101      	movs	r1, #1
   117b0:	0033      	movs	r3, r6
   117b2:	9a00      	ldr	r2, [sp, #0]
   117b4:	4f7a      	ldr	r7, [pc, #488]	; (119a0 <__aeabi_fdiv+0x288>)
   117b6:	4053      	eors	r3, r2
   117b8:	4642      	mov	r2, r8
   117ba:	1a10      	subs	r0, r2, r0
   117bc:	464a      	mov	r2, r9
   117be:	430a      	orrs	r2, r1
   117c0:	0092      	lsls	r2, r2, #2
   117c2:	58ba      	ldr	r2, [r7, r2]
   117c4:	001d      	movs	r5, r3
   117c6:	4697      	mov	pc, r2
   117c8:	9b00      	ldr	r3, [sp, #0]
   117ca:	002c      	movs	r4, r5
   117cc:	469a      	mov	sl, r3
   117ce:	468b      	mov	fp, r1
   117d0:	465b      	mov	r3, fp
   117d2:	2b02      	cmp	r3, #2
   117d4:	d131      	bne.n	1183a <__aeabi_fdiv+0x122>
   117d6:	4653      	mov	r3, sl
   117d8:	21ff      	movs	r1, #255	; 0xff
   117da:	2400      	movs	r4, #0
   117dc:	e038      	b.n	11850 <__aeabi_fdiv+0x138>
   117de:	2c00      	cmp	r4, #0
   117e0:	d117      	bne.n	11812 <__aeabi_fdiv+0xfa>
   117e2:	2304      	movs	r3, #4
   117e4:	4699      	mov	r9, r3
   117e6:	2300      	movs	r3, #0
   117e8:	4698      	mov	r8, r3
   117ea:	3301      	adds	r3, #1
   117ec:	469b      	mov	fp, r3
   117ee:	e7af      	b.n	11750 <__aeabi_fdiv+0x38>
   117f0:	20ff      	movs	r0, #255	; 0xff
   117f2:	2d00      	cmp	r5, #0
   117f4:	d10b      	bne.n	1180e <__aeabi_fdiv+0xf6>
   117f6:	2102      	movs	r1, #2
   117f8:	e7da      	b.n	117b0 <__aeabi_fdiv+0x98>
   117fa:	0028      	movs	r0, r5
   117fc:	f002 f83e 	bl	1387c <__clzsi2>
   11800:	1f43      	subs	r3, r0, #5
   11802:	409d      	lsls	r5, r3
   11804:	2376      	movs	r3, #118	; 0x76
   11806:	425b      	negs	r3, r3
   11808:	1a18      	subs	r0, r3, r0
   1180a:	2100      	movs	r1, #0
   1180c:	e7af      	b.n	1176e <__aeabi_fdiv+0x56>
   1180e:	2103      	movs	r1, #3
   11810:	e7ad      	b.n	1176e <__aeabi_fdiv+0x56>
   11812:	0020      	movs	r0, r4
   11814:	f002 f832 	bl	1387c <__clzsi2>
   11818:	1f43      	subs	r3, r0, #5
   1181a:	409c      	lsls	r4, r3
   1181c:	2376      	movs	r3, #118	; 0x76
   1181e:	425b      	negs	r3, r3
   11820:	1a1b      	subs	r3, r3, r0
   11822:	4698      	mov	r8, r3
   11824:	2300      	movs	r3, #0
   11826:	4699      	mov	r9, r3
   11828:	469b      	mov	fp, r3
   1182a:	e791      	b.n	11750 <__aeabi_fdiv+0x38>
   1182c:	230c      	movs	r3, #12
   1182e:	4699      	mov	r9, r3
   11830:	33f3      	adds	r3, #243	; 0xf3
   11832:	4698      	mov	r8, r3
   11834:	3bfc      	subs	r3, #252	; 0xfc
   11836:	469b      	mov	fp, r3
   11838:	e78a      	b.n	11750 <__aeabi_fdiv+0x38>
   1183a:	2b03      	cmp	r3, #3
   1183c:	d100      	bne.n	11840 <__aeabi_fdiv+0x128>
   1183e:	e0a5      	b.n	1198c <__aeabi_fdiv+0x274>
   11840:	4655      	mov	r5, sl
   11842:	2b01      	cmp	r3, #1
   11844:	d000      	beq.n	11848 <__aeabi_fdiv+0x130>
   11846:	e081      	b.n	1194c <__aeabi_fdiv+0x234>
   11848:	2301      	movs	r3, #1
   1184a:	2100      	movs	r1, #0
   1184c:	2400      	movs	r4, #0
   1184e:	402b      	ands	r3, r5
   11850:	0264      	lsls	r4, r4, #9
   11852:	05c9      	lsls	r1, r1, #23
   11854:	0a60      	lsrs	r0, r4, #9
   11856:	07db      	lsls	r3, r3, #31
   11858:	4308      	orrs	r0, r1
   1185a:	4318      	orrs	r0, r3
   1185c:	b003      	add	sp, #12
   1185e:	bc3c      	pop	{r2, r3, r4, r5}
   11860:	4690      	mov	r8, r2
   11862:	4699      	mov	r9, r3
   11864:	46a2      	mov	sl, r4
   11866:	46ab      	mov	fp, r5
   11868:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1186a:	2480      	movs	r4, #128	; 0x80
   1186c:	2300      	movs	r3, #0
   1186e:	03e4      	lsls	r4, r4, #15
   11870:	21ff      	movs	r1, #255	; 0xff
   11872:	e7ed      	b.n	11850 <__aeabi_fdiv+0x138>
   11874:	21ff      	movs	r1, #255	; 0xff
   11876:	2400      	movs	r4, #0
   11878:	e7ea      	b.n	11850 <__aeabi_fdiv+0x138>
   1187a:	2301      	movs	r3, #1
   1187c:	1a59      	subs	r1, r3, r1
   1187e:	291b      	cmp	r1, #27
   11880:	dd66      	ble.n	11950 <__aeabi_fdiv+0x238>
   11882:	9a01      	ldr	r2, [sp, #4]
   11884:	4013      	ands	r3, r2
   11886:	2100      	movs	r1, #0
   11888:	2400      	movs	r4, #0
   1188a:	e7e1      	b.n	11850 <__aeabi_fdiv+0x138>
   1188c:	2380      	movs	r3, #128	; 0x80
   1188e:	03db      	lsls	r3, r3, #15
   11890:	421c      	tst	r4, r3
   11892:	d038      	beq.n	11906 <__aeabi_fdiv+0x1ee>
   11894:	421d      	tst	r5, r3
   11896:	d051      	beq.n	1193c <__aeabi_fdiv+0x224>
   11898:	431c      	orrs	r4, r3
   1189a:	0264      	lsls	r4, r4, #9
   1189c:	0a64      	lsrs	r4, r4, #9
   1189e:	0033      	movs	r3, r6
   118a0:	21ff      	movs	r1, #255	; 0xff
   118a2:	e7d5      	b.n	11850 <__aeabi_fdiv+0x138>
   118a4:	0163      	lsls	r3, r4, #5
   118a6:	016c      	lsls	r4, r5, #5
   118a8:	42a3      	cmp	r3, r4
   118aa:	d23b      	bcs.n	11924 <__aeabi_fdiv+0x20c>
   118ac:	261b      	movs	r6, #27
   118ae:	2100      	movs	r1, #0
   118b0:	3801      	subs	r0, #1
   118b2:	2501      	movs	r5, #1
   118b4:	001f      	movs	r7, r3
   118b6:	0049      	lsls	r1, r1, #1
   118b8:	005b      	lsls	r3, r3, #1
   118ba:	2f00      	cmp	r7, #0
   118bc:	db01      	blt.n	118c2 <__aeabi_fdiv+0x1aa>
   118be:	429c      	cmp	r4, r3
   118c0:	d801      	bhi.n	118c6 <__aeabi_fdiv+0x1ae>
   118c2:	1b1b      	subs	r3, r3, r4
   118c4:	4329      	orrs	r1, r5
   118c6:	3e01      	subs	r6, #1
   118c8:	2e00      	cmp	r6, #0
   118ca:	d1f3      	bne.n	118b4 <__aeabi_fdiv+0x19c>
   118cc:	001c      	movs	r4, r3
   118ce:	1e63      	subs	r3, r4, #1
   118d0:	419c      	sbcs	r4, r3
   118d2:	430c      	orrs	r4, r1
   118d4:	0001      	movs	r1, r0
   118d6:	317f      	adds	r1, #127	; 0x7f
   118d8:	2900      	cmp	r1, #0
   118da:	ddce      	ble.n	1187a <__aeabi_fdiv+0x162>
   118dc:	0763      	lsls	r3, r4, #29
   118de:	d004      	beq.n	118ea <__aeabi_fdiv+0x1d2>
   118e0:	230f      	movs	r3, #15
   118e2:	4023      	ands	r3, r4
   118e4:	2b04      	cmp	r3, #4
   118e6:	d000      	beq.n	118ea <__aeabi_fdiv+0x1d2>
   118e8:	3404      	adds	r4, #4
   118ea:	0123      	lsls	r3, r4, #4
   118ec:	d503      	bpl.n	118f6 <__aeabi_fdiv+0x1de>
   118ee:	0001      	movs	r1, r0
   118f0:	4b2c      	ldr	r3, [pc, #176]	; (119a4 <__aeabi_fdiv+0x28c>)
   118f2:	3180      	adds	r1, #128	; 0x80
   118f4:	401c      	ands	r4, r3
   118f6:	29fe      	cmp	r1, #254	; 0xfe
   118f8:	dd0d      	ble.n	11916 <__aeabi_fdiv+0x1fe>
   118fa:	2301      	movs	r3, #1
   118fc:	9a01      	ldr	r2, [sp, #4]
   118fe:	21ff      	movs	r1, #255	; 0xff
   11900:	4013      	ands	r3, r2
   11902:	2400      	movs	r4, #0
   11904:	e7a4      	b.n	11850 <__aeabi_fdiv+0x138>
   11906:	2380      	movs	r3, #128	; 0x80
   11908:	03db      	lsls	r3, r3, #15
   1190a:	431c      	orrs	r4, r3
   1190c:	0264      	lsls	r4, r4, #9
   1190e:	0a64      	lsrs	r4, r4, #9
   11910:	0033      	movs	r3, r6
   11912:	21ff      	movs	r1, #255	; 0xff
   11914:	e79c      	b.n	11850 <__aeabi_fdiv+0x138>
   11916:	2301      	movs	r3, #1
   11918:	9a01      	ldr	r2, [sp, #4]
   1191a:	01a4      	lsls	r4, r4, #6
   1191c:	0a64      	lsrs	r4, r4, #9
   1191e:	b2c9      	uxtb	r1, r1
   11920:	4013      	ands	r3, r2
   11922:	e795      	b.n	11850 <__aeabi_fdiv+0x138>
   11924:	1b1b      	subs	r3, r3, r4
   11926:	261a      	movs	r6, #26
   11928:	2101      	movs	r1, #1
   1192a:	e7c2      	b.n	118b2 <__aeabi_fdiv+0x19a>
   1192c:	9b00      	ldr	r3, [sp, #0]
   1192e:	468b      	mov	fp, r1
   11930:	469a      	mov	sl, r3
   11932:	2400      	movs	r4, #0
   11934:	e74c      	b.n	117d0 <__aeabi_fdiv+0xb8>
   11936:	0263      	lsls	r3, r4, #9
   11938:	d5e5      	bpl.n	11906 <__aeabi_fdiv+0x1ee>
   1193a:	2500      	movs	r5, #0
   1193c:	2480      	movs	r4, #128	; 0x80
   1193e:	03e4      	lsls	r4, r4, #15
   11940:	432c      	orrs	r4, r5
   11942:	0264      	lsls	r4, r4, #9
   11944:	0a64      	lsrs	r4, r4, #9
   11946:	9b00      	ldr	r3, [sp, #0]
   11948:	21ff      	movs	r1, #255	; 0xff
   1194a:	e781      	b.n	11850 <__aeabi_fdiv+0x138>
   1194c:	9501      	str	r5, [sp, #4]
   1194e:	e7c1      	b.n	118d4 <__aeabi_fdiv+0x1bc>
   11950:	0023      	movs	r3, r4
   11952:	2020      	movs	r0, #32
   11954:	40cb      	lsrs	r3, r1
   11956:	1a41      	subs	r1, r0, r1
   11958:	408c      	lsls	r4, r1
   1195a:	1e61      	subs	r1, r4, #1
   1195c:	418c      	sbcs	r4, r1
   1195e:	431c      	orrs	r4, r3
   11960:	0763      	lsls	r3, r4, #29
   11962:	d004      	beq.n	1196e <__aeabi_fdiv+0x256>
   11964:	230f      	movs	r3, #15
   11966:	4023      	ands	r3, r4
   11968:	2b04      	cmp	r3, #4
   1196a:	d000      	beq.n	1196e <__aeabi_fdiv+0x256>
   1196c:	3404      	adds	r4, #4
   1196e:	0163      	lsls	r3, r4, #5
   11970:	d505      	bpl.n	1197e <__aeabi_fdiv+0x266>
   11972:	2301      	movs	r3, #1
   11974:	9a01      	ldr	r2, [sp, #4]
   11976:	2101      	movs	r1, #1
   11978:	4013      	ands	r3, r2
   1197a:	2400      	movs	r4, #0
   1197c:	e768      	b.n	11850 <__aeabi_fdiv+0x138>
   1197e:	2301      	movs	r3, #1
   11980:	9a01      	ldr	r2, [sp, #4]
   11982:	01a4      	lsls	r4, r4, #6
   11984:	0a64      	lsrs	r4, r4, #9
   11986:	4013      	ands	r3, r2
   11988:	2100      	movs	r1, #0
   1198a:	e761      	b.n	11850 <__aeabi_fdiv+0x138>
   1198c:	2380      	movs	r3, #128	; 0x80
   1198e:	03db      	lsls	r3, r3, #15
   11990:	431c      	orrs	r4, r3
   11992:	0264      	lsls	r4, r4, #9
   11994:	0a64      	lsrs	r4, r4, #9
   11996:	4653      	mov	r3, sl
   11998:	21ff      	movs	r1, #255	; 0xff
   1199a:	e759      	b.n	11850 <__aeabi_fdiv+0x138>
   1199c:	00015258 	.word	0x00015258
   119a0:	00015298 	.word	0x00015298
   119a4:	f7ffffff 	.word	0xf7ffffff

000119a8 <__aeabi_fmul>:
   119a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119aa:	4657      	mov	r7, sl
   119ac:	464e      	mov	r6, r9
   119ae:	4645      	mov	r5, r8
   119b0:	46de      	mov	lr, fp
   119b2:	b5e0      	push	{r5, r6, r7, lr}
   119b4:	0247      	lsls	r7, r0, #9
   119b6:	0046      	lsls	r6, r0, #1
   119b8:	4688      	mov	r8, r1
   119ba:	0a7f      	lsrs	r7, r7, #9
   119bc:	0e36      	lsrs	r6, r6, #24
   119be:	0fc4      	lsrs	r4, r0, #31
   119c0:	2e00      	cmp	r6, #0
   119c2:	d047      	beq.n	11a54 <__aeabi_fmul+0xac>
   119c4:	2eff      	cmp	r6, #255	; 0xff
   119c6:	d024      	beq.n	11a12 <__aeabi_fmul+0x6a>
   119c8:	00fb      	lsls	r3, r7, #3
   119ca:	2780      	movs	r7, #128	; 0x80
   119cc:	04ff      	lsls	r7, r7, #19
   119ce:	431f      	orrs	r7, r3
   119d0:	2300      	movs	r3, #0
   119d2:	4699      	mov	r9, r3
   119d4:	469a      	mov	sl, r3
   119d6:	3e7f      	subs	r6, #127	; 0x7f
   119d8:	4643      	mov	r3, r8
   119da:	025d      	lsls	r5, r3, #9
   119dc:	0058      	lsls	r0, r3, #1
   119de:	0fdb      	lsrs	r3, r3, #31
   119e0:	0a6d      	lsrs	r5, r5, #9
   119e2:	0e00      	lsrs	r0, r0, #24
   119e4:	4698      	mov	r8, r3
   119e6:	d043      	beq.n	11a70 <__aeabi_fmul+0xc8>
   119e8:	28ff      	cmp	r0, #255	; 0xff
   119ea:	d03b      	beq.n	11a64 <__aeabi_fmul+0xbc>
   119ec:	00eb      	lsls	r3, r5, #3
   119ee:	2580      	movs	r5, #128	; 0x80
   119f0:	2200      	movs	r2, #0
   119f2:	04ed      	lsls	r5, r5, #19
   119f4:	431d      	orrs	r5, r3
   119f6:	387f      	subs	r0, #127	; 0x7f
   119f8:	1836      	adds	r6, r6, r0
   119fa:	1c73      	adds	r3, r6, #1
   119fc:	4641      	mov	r1, r8
   119fe:	469b      	mov	fp, r3
   11a00:	464b      	mov	r3, r9
   11a02:	4061      	eors	r1, r4
   11a04:	4313      	orrs	r3, r2
   11a06:	2b0f      	cmp	r3, #15
   11a08:	d864      	bhi.n	11ad4 <__aeabi_fmul+0x12c>
   11a0a:	4875      	ldr	r0, [pc, #468]	; (11be0 <__aeabi_fmul+0x238>)
   11a0c:	009b      	lsls	r3, r3, #2
   11a0e:	58c3      	ldr	r3, [r0, r3]
   11a10:	469f      	mov	pc, r3
   11a12:	2f00      	cmp	r7, #0
   11a14:	d142      	bne.n	11a9c <__aeabi_fmul+0xf4>
   11a16:	2308      	movs	r3, #8
   11a18:	4699      	mov	r9, r3
   11a1a:	3b06      	subs	r3, #6
   11a1c:	26ff      	movs	r6, #255	; 0xff
   11a1e:	469a      	mov	sl, r3
   11a20:	e7da      	b.n	119d8 <__aeabi_fmul+0x30>
   11a22:	4641      	mov	r1, r8
   11a24:	2a02      	cmp	r2, #2
   11a26:	d028      	beq.n	11a7a <__aeabi_fmul+0xd2>
   11a28:	2a03      	cmp	r2, #3
   11a2a:	d100      	bne.n	11a2e <__aeabi_fmul+0x86>
   11a2c:	e0ce      	b.n	11bcc <__aeabi_fmul+0x224>
   11a2e:	2a01      	cmp	r2, #1
   11a30:	d000      	beq.n	11a34 <__aeabi_fmul+0x8c>
   11a32:	e0ac      	b.n	11b8e <__aeabi_fmul+0x1e6>
   11a34:	4011      	ands	r1, r2
   11a36:	2000      	movs	r0, #0
   11a38:	2200      	movs	r2, #0
   11a3a:	b2cc      	uxtb	r4, r1
   11a3c:	0240      	lsls	r0, r0, #9
   11a3e:	05d2      	lsls	r2, r2, #23
   11a40:	0a40      	lsrs	r0, r0, #9
   11a42:	07e4      	lsls	r4, r4, #31
   11a44:	4310      	orrs	r0, r2
   11a46:	4320      	orrs	r0, r4
   11a48:	bc3c      	pop	{r2, r3, r4, r5}
   11a4a:	4690      	mov	r8, r2
   11a4c:	4699      	mov	r9, r3
   11a4e:	46a2      	mov	sl, r4
   11a50:	46ab      	mov	fp, r5
   11a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a54:	2f00      	cmp	r7, #0
   11a56:	d115      	bne.n	11a84 <__aeabi_fmul+0xdc>
   11a58:	2304      	movs	r3, #4
   11a5a:	4699      	mov	r9, r3
   11a5c:	3b03      	subs	r3, #3
   11a5e:	2600      	movs	r6, #0
   11a60:	469a      	mov	sl, r3
   11a62:	e7b9      	b.n	119d8 <__aeabi_fmul+0x30>
   11a64:	20ff      	movs	r0, #255	; 0xff
   11a66:	2202      	movs	r2, #2
   11a68:	2d00      	cmp	r5, #0
   11a6a:	d0c5      	beq.n	119f8 <__aeabi_fmul+0x50>
   11a6c:	2203      	movs	r2, #3
   11a6e:	e7c3      	b.n	119f8 <__aeabi_fmul+0x50>
   11a70:	2d00      	cmp	r5, #0
   11a72:	d119      	bne.n	11aa8 <__aeabi_fmul+0x100>
   11a74:	2000      	movs	r0, #0
   11a76:	2201      	movs	r2, #1
   11a78:	e7be      	b.n	119f8 <__aeabi_fmul+0x50>
   11a7a:	2401      	movs	r4, #1
   11a7c:	22ff      	movs	r2, #255	; 0xff
   11a7e:	400c      	ands	r4, r1
   11a80:	2000      	movs	r0, #0
   11a82:	e7db      	b.n	11a3c <__aeabi_fmul+0x94>
   11a84:	0038      	movs	r0, r7
   11a86:	f001 fef9 	bl	1387c <__clzsi2>
   11a8a:	2676      	movs	r6, #118	; 0x76
   11a8c:	1f43      	subs	r3, r0, #5
   11a8e:	409f      	lsls	r7, r3
   11a90:	2300      	movs	r3, #0
   11a92:	4276      	negs	r6, r6
   11a94:	1a36      	subs	r6, r6, r0
   11a96:	4699      	mov	r9, r3
   11a98:	469a      	mov	sl, r3
   11a9a:	e79d      	b.n	119d8 <__aeabi_fmul+0x30>
   11a9c:	230c      	movs	r3, #12
   11a9e:	4699      	mov	r9, r3
   11aa0:	3b09      	subs	r3, #9
   11aa2:	26ff      	movs	r6, #255	; 0xff
   11aa4:	469a      	mov	sl, r3
   11aa6:	e797      	b.n	119d8 <__aeabi_fmul+0x30>
   11aa8:	0028      	movs	r0, r5
   11aaa:	f001 fee7 	bl	1387c <__clzsi2>
   11aae:	1f43      	subs	r3, r0, #5
   11ab0:	409d      	lsls	r5, r3
   11ab2:	2376      	movs	r3, #118	; 0x76
   11ab4:	425b      	negs	r3, r3
   11ab6:	1a18      	subs	r0, r3, r0
   11ab8:	2200      	movs	r2, #0
   11aba:	e79d      	b.n	119f8 <__aeabi_fmul+0x50>
   11abc:	2080      	movs	r0, #128	; 0x80
   11abe:	2400      	movs	r4, #0
   11ac0:	03c0      	lsls	r0, r0, #15
   11ac2:	22ff      	movs	r2, #255	; 0xff
   11ac4:	e7ba      	b.n	11a3c <__aeabi_fmul+0x94>
   11ac6:	003d      	movs	r5, r7
   11ac8:	4652      	mov	r2, sl
   11aca:	e7ab      	b.n	11a24 <__aeabi_fmul+0x7c>
   11acc:	003d      	movs	r5, r7
   11ace:	0021      	movs	r1, r4
   11ad0:	4652      	mov	r2, sl
   11ad2:	e7a7      	b.n	11a24 <__aeabi_fmul+0x7c>
   11ad4:	0c3b      	lsrs	r3, r7, #16
   11ad6:	469c      	mov	ip, r3
   11ad8:	042a      	lsls	r2, r5, #16
   11ada:	0c12      	lsrs	r2, r2, #16
   11adc:	0c2b      	lsrs	r3, r5, #16
   11ade:	0014      	movs	r4, r2
   11ae0:	4660      	mov	r0, ip
   11ae2:	4665      	mov	r5, ip
   11ae4:	043f      	lsls	r7, r7, #16
   11ae6:	0c3f      	lsrs	r7, r7, #16
   11ae8:	437c      	muls	r4, r7
   11aea:	4342      	muls	r2, r0
   11aec:	435d      	muls	r5, r3
   11aee:	437b      	muls	r3, r7
   11af0:	0c27      	lsrs	r7, r4, #16
   11af2:	189b      	adds	r3, r3, r2
   11af4:	18ff      	adds	r7, r7, r3
   11af6:	42ba      	cmp	r2, r7
   11af8:	d903      	bls.n	11b02 <__aeabi_fmul+0x15a>
   11afa:	2380      	movs	r3, #128	; 0x80
   11afc:	025b      	lsls	r3, r3, #9
   11afe:	469c      	mov	ip, r3
   11b00:	4465      	add	r5, ip
   11b02:	0424      	lsls	r4, r4, #16
   11b04:	043a      	lsls	r2, r7, #16
   11b06:	0c24      	lsrs	r4, r4, #16
   11b08:	1912      	adds	r2, r2, r4
   11b0a:	0193      	lsls	r3, r2, #6
   11b0c:	1e5c      	subs	r4, r3, #1
   11b0e:	41a3      	sbcs	r3, r4
   11b10:	0c3f      	lsrs	r7, r7, #16
   11b12:	0e92      	lsrs	r2, r2, #26
   11b14:	197d      	adds	r5, r7, r5
   11b16:	431a      	orrs	r2, r3
   11b18:	01ad      	lsls	r5, r5, #6
   11b1a:	4315      	orrs	r5, r2
   11b1c:	012b      	lsls	r3, r5, #4
   11b1e:	d504      	bpl.n	11b2a <__aeabi_fmul+0x182>
   11b20:	2301      	movs	r3, #1
   11b22:	465e      	mov	r6, fp
   11b24:	086a      	lsrs	r2, r5, #1
   11b26:	401d      	ands	r5, r3
   11b28:	4315      	orrs	r5, r2
   11b2a:	0032      	movs	r2, r6
   11b2c:	327f      	adds	r2, #127	; 0x7f
   11b2e:	2a00      	cmp	r2, #0
   11b30:	dd25      	ble.n	11b7e <__aeabi_fmul+0x1d6>
   11b32:	076b      	lsls	r3, r5, #29
   11b34:	d004      	beq.n	11b40 <__aeabi_fmul+0x198>
   11b36:	230f      	movs	r3, #15
   11b38:	402b      	ands	r3, r5
   11b3a:	2b04      	cmp	r3, #4
   11b3c:	d000      	beq.n	11b40 <__aeabi_fmul+0x198>
   11b3e:	3504      	adds	r5, #4
   11b40:	012b      	lsls	r3, r5, #4
   11b42:	d503      	bpl.n	11b4c <__aeabi_fmul+0x1a4>
   11b44:	0032      	movs	r2, r6
   11b46:	4b27      	ldr	r3, [pc, #156]	; (11be4 <__aeabi_fmul+0x23c>)
   11b48:	3280      	adds	r2, #128	; 0x80
   11b4a:	401d      	ands	r5, r3
   11b4c:	2afe      	cmp	r2, #254	; 0xfe
   11b4e:	dc94      	bgt.n	11a7a <__aeabi_fmul+0xd2>
   11b50:	2401      	movs	r4, #1
   11b52:	01a8      	lsls	r0, r5, #6
   11b54:	0a40      	lsrs	r0, r0, #9
   11b56:	b2d2      	uxtb	r2, r2
   11b58:	400c      	ands	r4, r1
   11b5a:	e76f      	b.n	11a3c <__aeabi_fmul+0x94>
   11b5c:	2080      	movs	r0, #128	; 0x80
   11b5e:	03c0      	lsls	r0, r0, #15
   11b60:	4207      	tst	r7, r0
   11b62:	d007      	beq.n	11b74 <__aeabi_fmul+0x1cc>
   11b64:	4205      	tst	r5, r0
   11b66:	d105      	bne.n	11b74 <__aeabi_fmul+0x1cc>
   11b68:	4328      	orrs	r0, r5
   11b6a:	0240      	lsls	r0, r0, #9
   11b6c:	0a40      	lsrs	r0, r0, #9
   11b6e:	4644      	mov	r4, r8
   11b70:	22ff      	movs	r2, #255	; 0xff
   11b72:	e763      	b.n	11a3c <__aeabi_fmul+0x94>
   11b74:	4338      	orrs	r0, r7
   11b76:	0240      	lsls	r0, r0, #9
   11b78:	0a40      	lsrs	r0, r0, #9
   11b7a:	22ff      	movs	r2, #255	; 0xff
   11b7c:	e75e      	b.n	11a3c <__aeabi_fmul+0x94>
   11b7e:	2401      	movs	r4, #1
   11b80:	1aa3      	subs	r3, r4, r2
   11b82:	2b1b      	cmp	r3, #27
   11b84:	dd05      	ble.n	11b92 <__aeabi_fmul+0x1ea>
   11b86:	400c      	ands	r4, r1
   11b88:	2200      	movs	r2, #0
   11b8a:	2000      	movs	r0, #0
   11b8c:	e756      	b.n	11a3c <__aeabi_fmul+0x94>
   11b8e:	465e      	mov	r6, fp
   11b90:	e7cb      	b.n	11b2a <__aeabi_fmul+0x182>
   11b92:	002a      	movs	r2, r5
   11b94:	2020      	movs	r0, #32
   11b96:	40da      	lsrs	r2, r3
   11b98:	1ac3      	subs	r3, r0, r3
   11b9a:	409d      	lsls	r5, r3
   11b9c:	002b      	movs	r3, r5
   11b9e:	1e5d      	subs	r5, r3, #1
   11ba0:	41ab      	sbcs	r3, r5
   11ba2:	4313      	orrs	r3, r2
   11ba4:	075a      	lsls	r2, r3, #29
   11ba6:	d004      	beq.n	11bb2 <__aeabi_fmul+0x20a>
   11ba8:	220f      	movs	r2, #15
   11baa:	401a      	ands	r2, r3
   11bac:	2a04      	cmp	r2, #4
   11bae:	d000      	beq.n	11bb2 <__aeabi_fmul+0x20a>
   11bb0:	3304      	adds	r3, #4
   11bb2:	015a      	lsls	r2, r3, #5
   11bb4:	d504      	bpl.n	11bc0 <__aeabi_fmul+0x218>
   11bb6:	2401      	movs	r4, #1
   11bb8:	2201      	movs	r2, #1
   11bba:	400c      	ands	r4, r1
   11bbc:	2000      	movs	r0, #0
   11bbe:	e73d      	b.n	11a3c <__aeabi_fmul+0x94>
   11bc0:	2401      	movs	r4, #1
   11bc2:	019b      	lsls	r3, r3, #6
   11bc4:	0a58      	lsrs	r0, r3, #9
   11bc6:	400c      	ands	r4, r1
   11bc8:	2200      	movs	r2, #0
   11bca:	e737      	b.n	11a3c <__aeabi_fmul+0x94>
   11bcc:	2080      	movs	r0, #128	; 0x80
   11bce:	2401      	movs	r4, #1
   11bd0:	03c0      	lsls	r0, r0, #15
   11bd2:	4328      	orrs	r0, r5
   11bd4:	0240      	lsls	r0, r0, #9
   11bd6:	0a40      	lsrs	r0, r0, #9
   11bd8:	400c      	ands	r4, r1
   11bda:	22ff      	movs	r2, #255	; 0xff
   11bdc:	e72e      	b.n	11a3c <__aeabi_fmul+0x94>
   11bde:	46c0      	nop			; (mov r8, r8)
   11be0:	000152d8 	.word	0x000152d8
   11be4:	f7ffffff 	.word	0xf7ffffff

00011be8 <__aeabi_i2f>:
   11be8:	b570      	push	{r4, r5, r6, lr}
   11bea:	2800      	cmp	r0, #0
   11bec:	d030      	beq.n	11c50 <__aeabi_i2f+0x68>
   11bee:	17c3      	asrs	r3, r0, #31
   11bf0:	18c4      	adds	r4, r0, r3
   11bf2:	405c      	eors	r4, r3
   11bf4:	0fc5      	lsrs	r5, r0, #31
   11bf6:	0020      	movs	r0, r4
   11bf8:	f001 fe40 	bl	1387c <__clzsi2>
   11bfc:	239e      	movs	r3, #158	; 0x9e
   11bfe:	1a1b      	subs	r3, r3, r0
   11c00:	2b96      	cmp	r3, #150	; 0x96
   11c02:	dc0d      	bgt.n	11c20 <__aeabi_i2f+0x38>
   11c04:	2296      	movs	r2, #150	; 0x96
   11c06:	1ad2      	subs	r2, r2, r3
   11c08:	4094      	lsls	r4, r2
   11c0a:	002a      	movs	r2, r5
   11c0c:	0264      	lsls	r4, r4, #9
   11c0e:	0a64      	lsrs	r4, r4, #9
   11c10:	b2db      	uxtb	r3, r3
   11c12:	0264      	lsls	r4, r4, #9
   11c14:	05db      	lsls	r3, r3, #23
   11c16:	0a60      	lsrs	r0, r4, #9
   11c18:	07d2      	lsls	r2, r2, #31
   11c1a:	4318      	orrs	r0, r3
   11c1c:	4310      	orrs	r0, r2
   11c1e:	bd70      	pop	{r4, r5, r6, pc}
   11c20:	2b99      	cmp	r3, #153	; 0x99
   11c22:	dc19      	bgt.n	11c58 <__aeabi_i2f+0x70>
   11c24:	2299      	movs	r2, #153	; 0x99
   11c26:	1ad2      	subs	r2, r2, r3
   11c28:	2a00      	cmp	r2, #0
   11c2a:	dd29      	ble.n	11c80 <__aeabi_i2f+0x98>
   11c2c:	4094      	lsls	r4, r2
   11c2e:	0022      	movs	r2, r4
   11c30:	4c14      	ldr	r4, [pc, #80]	; (11c84 <__aeabi_i2f+0x9c>)
   11c32:	4014      	ands	r4, r2
   11c34:	0751      	lsls	r1, r2, #29
   11c36:	d004      	beq.n	11c42 <__aeabi_i2f+0x5a>
   11c38:	210f      	movs	r1, #15
   11c3a:	400a      	ands	r2, r1
   11c3c:	2a04      	cmp	r2, #4
   11c3e:	d000      	beq.n	11c42 <__aeabi_i2f+0x5a>
   11c40:	3404      	adds	r4, #4
   11c42:	0162      	lsls	r2, r4, #5
   11c44:	d413      	bmi.n	11c6e <__aeabi_i2f+0x86>
   11c46:	01a4      	lsls	r4, r4, #6
   11c48:	0a64      	lsrs	r4, r4, #9
   11c4a:	b2db      	uxtb	r3, r3
   11c4c:	002a      	movs	r2, r5
   11c4e:	e7e0      	b.n	11c12 <__aeabi_i2f+0x2a>
   11c50:	2200      	movs	r2, #0
   11c52:	2300      	movs	r3, #0
   11c54:	2400      	movs	r4, #0
   11c56:	e7dc      	b.n	11c12 <__aeabi_i2f+0x2a>
   11c58:	2205      	movs	r2, #5
   11c5a:	0021      	movs	r1, r4
   11c5c:	1a12      	subs	r2, r2, r0
   11c5e:	40d1      	lsrs	r1, r2
   11c60:	22b9      	movs	r2, #185	; 0xb9
   11c62:	1ad2      	subs	r2, r2, r3
   11c64:	4094      	lsls	r4, r2
   11c66:	1e62      	subs	r2, r4, #1
   11c68:	4194      	sbcs	r4, r2
   11c6a:	430c      	orrs	r4, r1
   11c6c:	e7da      	b.n	11c24 <__aeabi_i2f+0x3c>
   11c6e:	4b05      	ldr	r3, [pc, #20]	; (11c84 <__aeabi_i2f+0x9c>)
   11c70:	002a      	movs	r2, r5
   11c72:	401c      	ands	r4, r3
   11c74:	239f      	movs	r3, #159	; 0x9f
   11c76:	01a4      	lsls	r4, r4, #6
   11c78:	1a1b      	subs	r3, r3, r0
   11c7a:	0a64      	lsrs	r4, r4, #9
   11c7c:	b2db      	uxtb	r3, r3
   11c7e:	e7c8      	b.n	11c12 <__aeabi_i2f+0x2a>
   11c80:	0022      	movs	r2, r4
   11c82:	e7d5      	b.n	11c30 <__aeabi_i2f+0x48>
   11c84:	fbffffff 	.word	0xfbffffff

00011c88 <__aeabi_dadd>:
   11c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c8a:	4645      	mov	r5, r8
   11c8c:	46de      	mov	lr, fp
   11c8e:	4657      	mov	r7, sl
   11c90:	464e      	mov	r6, r9
   11c92:	030c      	lsls	r4, r1, #12
   11c94:	b5e0      	push	{r5, r6, r7, lr}
   11c96:	004e      	lsls	r6, r1, #1
   11c98:	0fc9      	lsrs	r1, r1, #31
   11c9a:	4688      	mov	r8, r1
   11c9c:	000d      	movs	r5, r1
   11c9e:	0a61      	lsrs	r1, r4, #9
   11ca0:	0f44      	lsrs	r4, r0, #29
   11ca2:	430c      	orrs	r4, r1
   11ca4:	00c7      	lsls	r7, r0, #3
   11ca6:	0319      	lsls	r1, r3, #12
   11ca8:	0058      	lsls	r0, r3, #1
   11caa:	0fdb      	lsrs	r3, r3, #31
   11cac:	469b      	mov	fp, r3
   11cae:	0a4b      	lsrs	r3, r1, #9
   11cb0:	0f51      	lsrs	r1, r2, #29
   11cb2:	430b      	orrs	r3, r1
   11cb4:	0d76      	lsrs	r6, r6, #21
   11cb6:	0d40      	lsrs	r0, r0, #21
   11cb8:	0019      	movs	r1, r3
   11cba:	00d2      	lsls	r2, r2, #3
   11cbc:	45d8      	cmp	r8, fp
   11cbe:	d100      	bne.n	11cc2 <__aeabi_dadd+0x3a>
   11cc0:	e0ae      	b.n	11e20 <__aeabi_dadd+0x198>
   11cc2:	1a35      	subs	r5, r6, r0
   11cc4:	2d00      	cmp	r5, #0
   11cc6:	dc00      	bgt.n	11cca <__aeabi_dadd+0x42>
   11cc8:	e0f6      	b.n	11eb8 <__aeabi_dadd+0x230>
   11cca:	2800      	cmp	r0, #0
   11ccc:	d10f      	bne.n	11cee <__aeabi_dadd+0x66>
   11cce:	4313      	orrs	r3, r2
   11cd0:	d100      	bne.n	11cd4 <__aeabi_dadd+0x4c>
   11cd2:	e0db      	b.n	11e8c <__aeabi_dadd+0x204>
   11cd4:	1e6b      	subs	r3, r5, #1
   11cd6:	2b00      	cmp	r3, #0
   11cd8:	d000      	beq.n	11cdc <__aeabi_dadd+0x54>
   11cda:	e137      	b.n	11f4c <__aeabi_dadd+0x2c4>
   11cdc:	1aba      	subs	r2, r7, r2
   11cde:	4297      	cmp	r7, r2
   11ce0:	41bf      	sbcs	r7, r7
   11ce2:	1a64      	subs	r4, r4, r1
   11ce4:	427f      	negs	r7, r7
   11ce6:	1be4      	subs	r4, r4, r7
   11ce8:	2601      	movs	r6, #1
   11cea:	0017      	movs	r7, r2
   11cec:	e024      	b.n	11d38 <__aeabi_dadd+0xb0>
   11cee:	4bc6      	ldr	r3, [pc, #792]	; (12008 <__aeabi_dadd+0x380>)
   11cf0:	429e      	cmp	r6, r3
   11cf2:	d04d      	beq.n	11d90 <__aeabi_dadd+0x108>
   11cf4:	2380      	movs	r3, #128	; 0x80
   11cf6:	041b      	lsls	r3, r3, #16
   11cf8:	4319      	orrs	r1, r3
   11cfa:	2d38      	cmp	r5, #56	; 0x38
   11cfc:	dd00      	ble.n	11d00 <__aeabi_dadd+0x78>
   11cfe:	e107      	b.n	11f10 <__aeabi_dadd+0x288>
   11d00:	2d1f      	cmp	r5, #31
   11d02:	dd00      	ble.n	11d06 <__aeabi_dadd+0x7e>
   11d04:	e138      	b.n	11f78 <__aeabi_dadd+0x2f0>
   11d06:	2020      	movs	r0, #32
   11d08:	1b43      	subs	r3, r0, r5
   11d0a:	469a      	mov	sl, r3
   11d0c:	000b      	movs	r3, r1
   11d0e:	4650      	mov	r0, sl
   11d10:	4083      	lsls	r3, r0
   11d12:	4699      	mov	r9, r3
   11d14:	0013      	movs	r3, r2
   11d16:	4648      	mov	r0, r9
   11d18:	40eb      	lsrs	r3, r5
   11d1a:	4318      	orrs	r0, r3
   11d1c:	0003      	movs	r3, r0
   11d1e:	4650      	mov	r0, sl
   11d20:	4082      	lsls	r2, r0
   11d22:	1e50      	subs	r0, r2, #1
   11d24:	4182      	sbcs	r2, r0
   11d26:	40e9      	lsrs	r1, r5
   11d28:	431a      	orrs	r2, r3
   11d2a:	1aba      	subs	r2, r7, r2
   11d2c:	1a61      	subs	r1, r4, r1
   11d2e:	4297      	cmp	r7, r2
   11d30:	41a4      	sbcs	r4, r4
   11d32:	0017      	movs	r7, r2
   11d34:	4264      	negs	r4, r4
   11d36:	1b0c      	subs	r4, r1, r4
   11d38:	0223      	lsls	r3, r4, #8
   11d3a:	d562      	bpl.n	11e02 <__aeabi_dadd+0x17a>
   11d3c:	0264      	lsls	r4, r4, #9
   11d3e:	0a65      	lsrs	r5, r4, #9
   11d40:	2d00      	cmp	r5, #0
   11d42:	d100      	bne.n	11d46 <__aeabi_dadd+0xbe>
   11d44:	e0df      	b.n	11f06 <__aeabi_dadd+0x27e>
   11d46:	0028      	movs	r0, r5
   11d48:	f001 fd98 	bl	1387c <__clzsi2>
   11d4c:	0003      	movs	r3, r0
   11d4e:	3b08      	subs	r3, #8
   11d50:	2b1f      	cmp	r3, #31
   11d52:	dd00      	ble.n	11d56 <__aeabi_dadd+0xce>
   11d54:	e0d2      	b.n	11efc <__aeabi_dadd+0x274>
   11d56:	2220      	movs	r2, #32
   11d58:	003c      	movs	r4, r7
   11d5a:	1ad2      	subs	r2, r2, r3
   11d5c:	409d      	lsls	r5, r3
   11d5e:	40d4      	lsrs	r4, r2
   11d60:	409f      	lsls	r7, r3
   11d62:	4325      	orrs	r5, r4
   11d64:	429e      	cmp	r6, r3
   11d66:	dd00      	ble.n	11d6a <__aeabi_dadd+0xe2>
   11d68:	e0c4      	b.n	11ef4 <__aeabi_dadd+0x26c>
   11d6a:	1b9e      	subs	r6, r3, r6
   11d6c:	1c73      	adds	r3, r6, #1
   11d6e:	2b1f      	cmp	r3, #31
   11d70:	dd00      	ble.n	11d74 <__aeabi_dadd+0xec>
   11d72:	e0f1      	b.n	11f58 <__aeabi_dadd+0x2d0>
   11d74:	2220      	movs	r2, #32
   11d76:	0038      	movs	r0, r7
   11d78:	0029      	movs	r1, r5
   11d7a:	1ad2      	subs	r2, r2, r3
   11d7c:	40d8      	lsrs	r0, r3
   11d7e:	4091      	lsls	r1, r2
   11d80:	4097      	lsls	r7, r2
   11d82:	002c      	movs	r4, r5
   11d84:	4301      	orrs	r1, r0
   11d86:	1e78      	subs	r0, r7, #1
   11d88:	4187      	sbcs	r7, r0
   11d8a:	40dc      	lsrs	r4, r3
   11d8c:	2600      	movs	r6, #0
   11d8e:	430f      	orrs	r7, r1
   11d90:	077b      	lsls	r3, r7, #29
   11d92:	d009      	beq.n	11da8 <__aeabi_dadd+0x120>
   11d94:	230f      	movs	r3, #15
   11d96:	403b      	ands	r3, r7
   11d98:	2b04      	cmp	r3, #4
   11d9a:	d005      	beq.n	11da8 <__aeabi_dadd+0x120>
   11d9c:	1d3b      	adds	r3, r7, #4
   11d9e:	42bb      	cmp	r3, r7
   11da0:	41bf      	sbcs	r7, r7
   11da2:	427f      	negs	r7, r7
   11da4:	19e4      	adds	r4, r4, r7
   11da6:	001f      	movs	r7, r3
   11da8:	0223      	lsls	r3, r4, #8
   11daa:	d52c      	bpl.n	11e06 <__aeabi_dadd+0x17e>
   11dac:	4b96      	ldr	r3, [pc, #600]	; (12008 <__aeabi_dadd+0x380>)
   11dae:	3601      	adds	r6, #1
   11db0:	429e      	cmp	r6, r3
   11db2:	d100      	bne.n	11db6 <__aeabi_dadd+0x12e>
   11db4:	e09a      	b.n	11eec <__aeabi_dadd+0x264>
   11db6:	4645      	mov	r5, r8
   11db8:	4b94      	ldr	r3, [pc, #592]	; (1200c <__aeabi_dadd+0x384>)
   11dba:	08ff      	lsrs	r7, r7, #3
   11dbc:	401c      	ands	r4, r3
   11dbe:	0760      	lsls	r0, r4, #29
   11dc0:	0576      	lsls	r6, r6, #21
   11dc2:	0264      	lsls	r4, r4, #9
   11dc4:	4307      	orrs	r7, r0
   11dc6:	0b24      	lsrs	r4, r4, #12
   11dc8:	0d76      	lsrs	r6, r6, #21
   11dca:	2100      	movs	r1, #0
   11dcc:	0324      	lsls	r4, r4, #12
   11dce:	0b23      	lsrs	r3, r4, #12
   11dd0:	0d0c      	lsrs	r4, r1, #20
   11dd2:	4a8f      	ldr	r2, [pc, #572]	; (12010 <__aeabi_dadd+0x388>)
   11dd4:	0524      	lsls	r4, r4, #20
   11dd6:	431c      	orrs	r4, r3
   11dd8:	4014      	ands	r4, r2
   11dda:	0533      	lsls	r3, r6, #20
   11ddc:	4323      	orrs	r3, r4
   11dde:	005b      	lsls	r3, r3, #1
   11de0:	07ed      	lsls	r5, r5, #31
   11de2:	085b      	lsrs	r3, r3, #1
   11de4:	432b      	orrs	r3, r5
   11de6:	0038      	movs	r0, r7
   11de8:	0019      	movs	r1, r3
   11dea:	bc3c      	pop	{r2, r3, r4, r5}
   11dec:	4690      	mov	r8, r2
   11dee:	4699      	mov	r9, r3
   11df0:	46a2      	mov	sl, r4
   11df2:	46ab      	mov	fp, r5
   11df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11df6:	4664      	mov	r4, ip
   11df8:	4304      	orrs	r4, r0
   11dfa:	d100      	bne.n	11dfe <__aeabi_dadd+0x176>
   11dfc:	e211      	b.n	12222 <__aeabi_dadd+0x59a>
   11dfe:	0004      	movs	r4, r0
   11e00:	4667      	mov	r7, ip
   11e02:	077b      	lsls	r3, r7, #29
   11e04:	d1c6      	bne.n	11d94 <__aeabi_dadd+0x10c>
   11e06:	4645      	mov	r5, r8
   11e08:	0760      	lsls	r0, r4, #29
   11e0a:	08ff      	lsrs	r7, r7, #3
   11e0c:	4307      	orrs	r7, r0
   11e0e:	08e4      	lsrs	r4, r4, #3
   11e10:	4b7d      	ldr	r3, [pc, #500]	; (12008 <__aeabi_dadd+0x380>)
   11e12:	429e      	cmp	r6, r3
   11e14:	d030      	beq.n	11e78 <__aeabi_dadd+0x1f0>
   11e16:	0324      	lsls	r4, r4, #12
   11e18:	0576      	lsls	r6, r6, #21
   11e1a:	0b24      	lsrs	r4, r4, #12
   11e1c:	0d76      	lsrs	r6, r6, #21
   11e1e:	e7d4      	b.n	11dca <__aeabi_dadd+0x142>
   11e20:	1a33      	subs	r3, r6, r0
   11e22:	469a      	mov	sl, r3
   11e24:	2b00      	cmp	r3, #0
   11e26:	dd78      	ble.n	11f1a <__aeabi_dadd+0x292>
   11e28:	2800      	cmp	r0, #0
   11e2a:	d031      	beq.n	11e90 <__aeabi_dadd+0x208>
   11e2c:	4876      	ldr	r0, [pc, #472]	; (12008 <__aeabi_dadd+0x380>)
   11e2e:	4286      	cmp	r6, r0
   11e30:	d0ae      	beq.n	11d90 <__aeabi_dadd+0x108>
   11e32:	2080      	movs	r0, #128	; 0x80
   11e34:	0400      	lsls	r0, r0, #16
   11e36:	4301      	orrs	r1, r0
   11e38:	4653      	mov	r3, sl
   11e3a:	2b38      	cmp	r3, #56	; 0x38
   11e3c:	dc00      	bgt.n	11e40 <__aeabi_dadd+0x1b8>
   11e3e:	e0e9      	b.n	12014 <__aeabi_dadd+0x38c>
   11e40:	430a      	orrs	r2, r1
   11e42:	1e51      	subs	r1, r2, #1
   11e44:	418a      	sbcs	r2, r1
   11e46:	2100      	movs	r1, #0
   11e48:	19d2      	adds	r2, r2, r7
   11e4a:	42ba      	cmp	r2, r7
   11e4c:	41bf      	sbcs	r7, r7
   11e4e:	1909      	adds	r1, r1, r4
   11e50:	427c      	negs	r4, r7
   11e52:	0017      	movs	r7, r2
   11e54:	190c      	adds	r4, r1, r4
   11e56:	0223      	lsls	r3, r4, #8
   11e58:	d5d3      	bpl.n	11e02 <__aeabi_dadd+0x17a>
   11e5a:	4b6b      	ldr	r3, [pc, #428]	; (12008 <__aeabi_dadd+0x380>)
   11e5c:	3601      	adds	r6, #1
   11e5e:	429e      	cmp	r6, r3
   11e60:	d100      	bne.n	11e64 <__aeabi_dadd+0x1dc>
   11e62:	e13a      	b.n	120da <__aeabi_dadd+0x452>
   11e64:	2001      	movs	r0, #1
   11e66:	4b69      	ldr	r3, [pc, #420]	; (1200c <__aeabi_dadd+0x384>)
   11e68:	401c      	ands	r4, r3
   11e6a:	087b      	lsrs	r3, r7, #1
   11e6c:	4007      	ands	r7, r0
   11e6e:	431f      	orrs	r7, r3
   11e70:	07e0      	lsls	r0, r4, #31
   11e72:	4307      	orrs	r7, r0
   11e74:	0864      	lsrs	r4, r4, #1
   11e76:	e78b      	b.n	11d90 <__aeabi_dadd+0x108>
   11e78:	0023      	movs	r3, r4
   11e7a:	433b      	orrs	r3, r7
   11e7c:	d100      	bne.n	11e80 <__aeabi_dadd+0x1f8>
   11e7e:	e1cb      	b.n	12218 <__aeabi_dadd+0x590>
   11e80:	2280      	movs	r2, #128	; 0x80
   11e82:	0312      	lsls	r2, r2, #12
   11e84:	4314      	orrs	r4, r2
   11e86:	0324      	lsls	r4, r4, #12
   11e88:	0b24      	lsrs	r4, r4, #12
   11e8a:	e79e      	b.n	11dca <__aeabi_dadd+0x142>
   11e8c:	002e      	movs	r6, r5
   11e8e:	e77f      	b.n	11d90 <__aeabi_dadd+0x108>
   11e90:	0008      	movs	r0, r1
   11e92:	4310      	orrs	r0, r2
   11e94:	d100      	bne.n	11e98 <__aeabi_dadd+0x210>
   11e96:	e0b4      	b.n	12002 <__aeabi_dadd+0x37a>
   11e98:	1e58      	subs	r0, r3, #1
   11e9a:	2800      	cmp	r0, #0
   11e9c:	d000      	beq.n	11ea0 <__aeabi_dadd+0x218>
   11e9e:	e0de      	b.n	1205e <__aeabi_dadd+0x3d6>
   11ea0:	18ba      	adds	r2, r7, r2
   11ea2:	42ba      	cmp	r2, r7
   11ea4:	419b      	sbcs	r3, r3
   11ea6:	1864      	adds	r4, r4, r1
   11ea8:	425b      	negs	r3, r3
   11eaa:	18e4      	adds	r4, r4, r3
   11eac:	0017      	movs	r7, r2
   11eae:	2601      	movs	r6, #1
   11eb0:	0223      	lsls	r3, r4, #8
   11eb2:	d5a6      	bpl.n	11e02 <__aeabi_dadd+0x17a>
   11eb4:	2602      	movs	r6, #2
   11eb6:	e7d5      	b.n	11e64 <__aeabi_dadd+0x1dc>
   11eb8:	2d00      	cmp	r5, #0
   11eba:	d16e      	bne.n	11f9a <__aeabi_dadd+0x312>
   11ebc:	1c70      	adds	r0, r6, #1
   11ebe:	0540      	lsls	r0, r0, #21
   11ec0:	0d40      	lsrs	r0, r0, #21
   11ec2:	2801      	cmp	r0, #1
   11ec4:	dc00      	bgt.n	11ec8 <__aeabi_dadd+0x240>
   11ec6:	e0f9      	b.n	120bc <__aeabi_dadd+0x434>
   11ec8:	1ab8      	subs	r0, r7, r2
   11eca:	4684      	mov	ip, r0
   11ecc:	4287      	cmp	r7, r0
   11ece:	4180      	sbcs	r0, r0
   11ed0:	1ae5      	subs	r5, r4, r3
   11ed2:	4240      	negs	r0, r0
   11ed4:	1a2d      	subs	r5, r5, r0
   11ed6:	0228      	lsls	r0, r5, #8
   11ed8:	d400      	bmi.n	11edc <__aeabi_dadd+0x254>
   11eda:	e089      	b.n	11ff0 <__aeabi_dadd+0x368>
   11edc:	1bd7      	subs	r7, r2, r7
   11ede:	42ba      	cmp	r2, r7
   11ee0:	4192      	sbcs	r2, r2
   11ee2:	1b1c      	subs	r4, r3, r4
   11ee4:	4252      	negs	r2, r2
   11ee6:	1aa5      	subs	r5, r4, r2
   11ee8:	46d8      	mov	r8, fp
   11eea:	e729      	b.n	11d40 <__aeabi_dadd+0xb8>
   11eec:	4645      	mov	r5, r8
   11eee:	2400      	movs	r4, #0
   11ef0:	2700      	movs	r7, #0
   11ef2:	e76a      	b.n	11dca <__aeabi_dadd+0x142>
   11ef4:	4c45      	ldr	r4, [pc, #276]	; (1200c <__aeabi_dadd+0x384>)
   11ef6:	1af6      	subs	r6, r6, r3
   11ef8:	402c      	ands	r4, r5
   11efa:	e749      	b.n	11d90 <__aeabi_dadd+0x108>
   11efc:	003d      	movs	r5, r7
   11efe:	3828      	subs	r0, #40	; 0x28
   11f00:	4085      	lsls	r5, r0
   11f02:	2700      	movs	r7, #0
   11f04:	e72e      	b.n	11d64 <__aeabi_dadd+0xdc>
   11f06:	0038      	movs	r0, r7
   11f08:	f001 fcb8 	bl	1387c <__clzsi2>
   11f0c:	3020      	adds	r0, #32
   11f0e:	e71d      	b.n	11d4c <__aeabi_dadd+0xc4>
   11f10:	430a      	orrs	r2, r1
   11f12:	1e51      	subs	r1, r2, #1
   11f14:	418a      	sbcs	r2, r1
   11f16:	2100      	movs	r1, #0
   11f18:	e707      	b.n	11d2a <__aeabi_dadd+0xa2>
   11f1a:	2b00      	cmp	r3, #0
   11f1c:	d000      	beq.n	11f20 <__aeabi_dadd+0x298>
   11f1e:	e0f3      	b.n	12108 <__aeabi_dadd+0x480>
   11f20:	1c70      	adds	r0, r6, #1
   11f22:	0543      	lsls	r3, r0, #21
   11f24:	0d5b      	lsrs	r3, r3, #21
   11f26:	2b01      	cmp	r3, #1
   11f28:	dc00      	bgt.n	11f2c <__aeabi_dadd+0x2a4>
   11f2a:	e0ad      	b.n	12088 <__aeabi_dadd+0x400>
   11f2c:	4b36      	ldr	r3, [pc, #216]	; (12008 <__aeabi_dadd+0x380>)
   11f2e:	4298      	cmp	r0, r3
   11f30:	d100      	bne.n	11f34 <__aeabi_dadd+0x2ac>
   11f32:	e0d1      	b.n	120d8 <__aeabi_dadd+0x450>
   11f34:	18ba      	adds	r2, r7, r2
   11f36:	42ba      	cmp	r2, r7
   11f38:	41bf      	sbcs	r7, r7
   11f3a:	1864      	adds	r4, r4, r1
   11f3c:	427f      	negs	r7, r7
   11f3e:	19e4      	adds	r4, r4, r7
   11f40:	07e7      	lsls	r7, r4, #31
   11f42:	0852      	lsrs	r2, r2, #1
   11f44:	4317      	orrs	r7, r2
   11f46:	0864      	lsrs	r4, r4, #1
   11f48:	0006      	movs	r6, r0
   11f4a:	e721      	b.n	11d90 <__aeabi_dadd+0x108>
   11f4c:	482e      	ldr	r0, [pc, #184]	; (12008 <__aeabi_dadd+0x380>)
   11f4e:	4285      	cmp	r5, r0
   11f50:	d100      	bne.n	11f54 <__aeabi_dadd+0x2cc>
   11f52:	e093      	b.n	1207c <__aeabi_dadd+0x3f4>
   11f54:	001d      	movs	r5, r3
   11f56:	e6d0      	b.n	11cfa <__aeabi_dadd+0x72>
   11f58:	0029      	movs	r1, r5
   11f5a:	3e1f      	subs	r6, #31
   11f5c:	40f1      	lsrs	r1, r6
   11f5e:	2b20      	cmp	r3, #32
   11f60:	d100      	bne.n	11f64 <__aeabi_dadd+0x2dc>
   11f62:	e08d      	b.n	12080 <__aeabi_dadd+0x3f8>
   11f64:	2240      	movs	r2, #64	; 0x40
   11f66:	1ad3      	subs	r3, r2, r3
   11f68:	409d      	lsls	r5, r3
   11f6a:	432f      	orrs	r7, r5
   11f6c:	1e7d      	subs	r5, r7, #1
   11f6e:	41af      	sbcs	r7, r5
   11f70:	2400      	movs	r4, #0
   11f72:	430f      	orrs	r7, r1
   11f74:	2600      	movs	r6, #0
   11f76:	e744      	b.n	11e02 <__aeabi_dadd+0x17a>
   11f78:	002b      	movs	r3, r5
   11f7a:	0008      	movs	r0, r1
   11f7c:	3b20      	subs	r3, #32
   11f7e:	40d8      	lsrs	r0, r3
   11f80:	0003      	movs	r3, r0
   11f82:	2d20      	cmp	r5, #32
   11f84:	d100      	bne.n	11f88 <__aeabi_dadd+0x300>
   11f86:	e07d      	b.n	12084 <__aeabi_dadd+0x3fc>
   11f88:	2040      	movs	r0, #64	; 0x40
   11f8a:	1b45      	subs	r5, r0, r5
   11f8c:	40a9      	lsls	r1, r5
   11f8e:	430a      	orrs	r2, r1
   11f90:	1e51      	subs	r1, r2, #1
   11f92:	418a      	sbcs	r2, r1
   11f94:	2100      	movs	r1, #0
   11f96:	431a      	orrs	r2, r3
   11f98:	e6c7      	b.n	11d2a <__aeabi_dadd+0xa2>
   11f9a:	2e00      	cmp	r6, #0
   11f9c:	d050      	beq.n	12040 <__aeabi_dadd+0x3b8>
   11f9e:	4e1a      	ldr	r6, [pc, #104]	; (12008 <__aeabi_dadd+0x380>)
   11fa0:	42b0      	cmp	r0, r6
   11fa2:	d057      	beq.n	12054 <__aeabi_dadd+0x3cc>
   11fa4:	2680      	movs	r6, #128	; 0x80
   11fa6:	426b      	negs	r3, r5
   11fa8:	4699      	mov	r9, r3
   11faa:	0436      	lsls	r6, r6, #16
   11fac:	4334      	orrs	r4, r6
   11fae:	464b      	mov	r3, r9
   11fb0:	2b38      	cmp	r3, #56	; 0x38
   11fb2:	dd00      	ble.n	11fb6 <__aeabi_dadd+0x32e>
   11fb4:	e0d6      	b.n	12164 <__aeabi_dadd+0x4dc>
   11fb6:	2b1f      	cmp	r3, #31
   11fb8:	dd00      	ble.n	11fbc <__aeabi_dadd+0x334>
   11fba:	e135      	b.n	12228 <__aeabi_dadd+0x5a0>
   11fbc:	2620      	movs	r6, #32
   11fbe:	1af5      	subs	r5, r6, r3
   11fc0:	0026      	movs	r6, r4
   11fc2:	40ae      	lsls	r6, r5
   11fc4:	46b2      	mov	sl, r6
   11fc6:	003e      	movs	r6, r7
   11fc8:	40de      	lsrs	r6, r3
   11fca:	46ac      	mov	ip, r5
   11fcc:	0035      	movs	r5, r6
   11fce:	4656      	mov	r6, sl
   11fd0:	432e      	orrs	r6, r5
   11fd2:	4665      	mov	r5, ip
   11fd4:	40af      	lsls	r7, r5
   11fd6:	1e7d      	subs	r5, r7, #1
   11fd8:	41af      	sbcs	r7, r5
   11fda:	40dc      	lsrs	r4, r3
   11fdc:	4337      	orrs	r7, r6
   11fde:	1bd7      	subs	r7, r2, r7
   11fe0:	42ba      	cmp	r2, r7
   11fe2:	4192      	sbcs	r2, r2
   11fe4:	1b0c      	subs	r4, r1, r4
   11fe6:	4252      	negs	r2, r2
   11fe8:	1aa4      	subs	r4, r4, r2
   11fea:	0006      	movs	r6, r0
   11fec:	46d8      	mov	r8, fp
   11fee:	e6a3      	b.n	11d38 <__aeabi_dadd+0xb0>
   11ff0:	4664      	mov	r4, ip
   11ff2:	4667      	mov	r7, ip
   11ff4:	432c      	orrs	r4, r5
   11ff6:	d000      	beq.n	11ffa <__aeabi_dadd+0x372>
   11ff8:	e6a2      	b.n	11d40 <__aeabi_dadd+0xb8>
   11ffa:	2500      	movs	r5, #0
   11ffc:	2600      	movs	r6, #0
   11ffe:	2700      	movs	r7, #0
   12000:	e706      	b.n	11e10 <__aeabi_dadd+0x188>
   12002:	001e      	movs	r6, r3
   12004:	e6c4      	b.n	11d90 <__aeabi_dadd+0x108>
   12006:	46c0      	nop			; (mov r8, r8)
   12008:	000007ff 	.word	0x000007ff
   1200c:	ff7fffff 	.word	0xff7fffff
   12010:	800fffff 	.word	0x800fffff
   12014:	2b1f      	cmp	r3, #31
   12016:	dc63      	bgt.n	120e0 <__aeabi_dadd+0x458>
   12018:	2020      	movs	r0, #32
   1201a:	1ac3      	subs	r3, r0, r3
   1201c:	0008      	movs	r0, r1
   1201e:	4098      	lsls	r0, r3
   12020:	469c      	mov	ip, r3
   12022:	4683      	mov	fp, r0
   12024:	4653      	mov	r3, sl
   12026:	0010      	movs	r0, r2
   12028:	40d8      	lsrs	r0, r3
   1202a:	0003      	movs	r3, r0
   1202c:	4658      	mov	r0, fp
   1202e:	4318      	orrs	r0, r3
   12030:	4663      	mov	r3, ip
   12032:	409a      	lsls	r2, r3
   12034:	1e53      	subs	r3, r2, #1
   12036:	419a      	sbcs	r2, r3
   12038:	4653      	mov	r3, sl
   1203a:	4302      	orrs	r2, r0
   1203c:	40d9      	lsrs	r1, r3
   1203e:	e703      	b.n	11e48 <__aeabi_dadd+0x1c0>
   12040:	0026      	movs	r6, r4
   12042:	433e      	orrs	r6, r7
   12044:	d006      	beq.n	12054 <__aeabi_dadd+0x3cc>
   12046:	43eb      	mvns	r3, r5
   12048:	4699      	mov	r9, r3
   1204a:	2b00      	cmp	r3, #0
   1204c:	d0c7      	beq.n	11fde <__aeabi_dadd+0x356>
   1204e:	4e94      	ldr	r6, [pc, #592]	; (122a0 <__aeabi_dadd+0x618>)
   12050:	42b0      	cmp	r0, r6
   12052:	d1ac      	bne.n	11fae <__aeabi_dadd+0x326>
   12054:	000c      	movs	r4, r1
   12056:	0017      	movs	r7, r2
   12058:	0006      	movs	r6, r0
   1205a:	46d8      	mov	r8, fp
   1205c:	e698      	b.n	11d90 <__aeabi_dadd+0x108>
   1205e:	4b90      	ldr	r3, [pc, #576]	; (122a0 <__aeabi_dadd+0x618>)
   12060:	459a      	cmp	sl, r3
   12062:	d00b      	beq.n	1207c <__aeabi_dadd+0x3f4>
   12064:	4682      	mov	sl, r0
   12066:	e6e7      	b.n	11e38 <__aeabi_dadd+0x1b0>
   12068:	2800      	cmp	r0, #0
   1206a:	d000      	beq.n	1206e <__aeabi_dadd+0x3e6>
   1206c:	e09e      	b.n	121ac <__aeabi_dadd+0x524>
   1206e:	0018      	movs	r0, r3
   12070:	4310      	orrs	r0, r2
   12072:	d100      	bne.n	12076 <__aeabi_dadd+0x3ee>
   12074:	e0e9      	b.n	1224a <__aeabi_dadd+0x5c2>
   12076:	001c      	movs	r4, r3
   12078:	0017      	movs	r7, r2
   1207a:	46d8      	mov	r8, fp
   1207c:	4e88      	ldr	r6, [pc, #544]	; (122a0 <__aeabi_dadd+0x618>)
   1207e:	e687      	b.n	11d90 <__aeabi_dadd+0x108>
   12080:	2500      	movs	r5, #0
   12082:	e772      	b.n	11f6a <__aeabi_dadd+0x2e2>
   12084:	2100      	movs	r1, #0
   12086:	e782      	b.n	11f8e <__aeabi_dadd+0x306>
   12088:	0023      	movs	r3, r4
   1208a:	433b      	orrs	r3, r7
   1208c:	2e00      	cmp	r6, #0
   1208e:	d000      	beq.n	12092 <__aeabi_dadd+0x40a>
   12090:	e0ab      	b.n	121ea <__aeabi_dadd+0x562>
   12092:	2b00      	cmp	r3, #0
   12094:	d100      	bne.n	12098 <__aeabi_dadd+0x410>
   12096:	e0e7      	b.n	12268 <__aeabi_dadd+0x5e0>
   12098:	000b      	movs	r3, r1
   1209a:	4313      	orrs	r3, r2
   1209c:	d100      	bne.n	120a0 <__aeabi_dadd+0x418>
   1209e:	e677      	b.n	11d90 <__aeabi_dadd+0x108>
   120a0:	18ba      	adds	r2, r7, r2
   120a2:	42ba      	cmp	r2, r7
   120a4:	41bf      	sbcs	r7, r7
   120a6:	1864      	adds	r4, r4, r1
   120a8:	427f      	negs	r7, r7
   120aa:	19e4      	adds	r4, r4, r7
   120ac:	0223      	lsls	r3, r4, #8
   120ae:	d400      	bmi.n	120b2 <__aeabi_dadd+0x42a>
   120b0:	e0f2      	b.n	12298 <__aeabi_dadd+0x610>
   120b2:	4b7c      	ldr	r3, [pc, #496]	; (122a4 <__aeabi_dadd+0x61c>)
   120b4:	0017      	movs	r7, r2
   120b6:	401c      	ands	r4, r3
   120b8:	0006      	movs	r6, r0
   120ba:	e669      	b.n	11d90 <__aeabi_dadd+0x108>
   120bc:	0020      	movs	r0, r4
   120be:	4338      	orrs	r0, r7
   120c0:	2e00      	cmp	r6, #0
   120c2:	d1d1      	bne.n	12068 <__aeabi_dadd+0x3e0>
   120c4:	2800      	cmp	r0, #0
   120c6:	d15b      	bne.n	12180 <__aeabi_dadd+0x4f8>
   120c8:	001c      	movs	r4, r3
   120ca:	4314      	orrs	r4, r2
   120cc:	d100      	bne.n	120d0 <__aeabi_dadd+0x448>
   120ce:	e0a8      	b.n	12222 <__aeabi_dadd+0x59a>
   120d0:	001c      	movs	r4, r3
   120d2:	0017      	movs	r7, r2
   120d4:	46d8      	mov	r8, fp
   120d6:	e65b      	b.n	11d90 <__aeabi_dadd+0x108>
   120d8:	0006      	movs	r6, r0
   120da:	2400      	movs	r4, #0
   120dc:	2700      	movs	r7, #0
   120de:	e697      	b.n	11e10 <__aeabi_dadd+0x188>
   120e0:	4650      	mov	r0, sl
   120e2:	000b      	movs	r3, r1
   120e4:	3820      	subs	r0, #32
   120e6:	40c3      	lsrs	r3, r0
   120e8:	4699      	mov	r9, r3
   120ea:	4653      	mov	r3, sl
   120ec:	2b20      	cmp	r3, #32
   120ee:	d100      	bne.n	120f2 <__aeabi_dadd+0x46a>
   120f0:	e095      	b.n	1221e <__aeabi_dadd+0x596>
   120f2:	2340      	movs	r3, #64	; 0x40
   120f4:	4650      	mov	r0, sl
   120f6:	1a1b      	subs	r3, r3, r0
   120f8:	4099      	lsls	r1, r3
   120fa:	430a      	orrs	r2, r1
   120fc:	1e51      	subs	r1, r2, #1
   120fe:	418a      	sbcs	r2, r1
   12100:	464b      	mov	r3, r9
   12102:	2100      	movs	r1, #0
   12104:	431a      	orrs	r2, r3
   12106:	e69f      	b.n	11e48 <__aeabi_dadd+0x1c0>
   12108:	2e00      	cmp	r6, #0
   1210a:	d130      	bne.n	1216e <__aeabi_dadd+0x4e6>
   1210c:	0026      	movs	r6, r4
   1210e:	433e      	orrs	r6, r7
   12110:	d067      	beq.n	121e2 <__aeabi_dadd+0x55a>
   12112:	43db      	mvns	r3, r3
   12114:	469a      	mov	sl, r3
   12116:	2b00      	cmp	r3, #0
   12118:	d01c      	beq.n	12154 <__aeabi_dadd+0x4cc>
   1211a:	4e61      	ldr	r6, [pc, #388]	; (122a0 <__aeabi_dadd+0x618>)
   1211c:	42b0      	cmp	r0, r6
   1211e:	d060      	beq.n	121e2 <__aeabi_dadd+0x55a>
   12120:	4653      	mov	r3, sl
   12122:	2b38      	cmp	r3, #56	; 0x38
   12124:	dd00      	ble.n	12128 <__aeabi_dadd+0x4a0>
   12126:	e096      	b.n	12256 <__aeabi_dadd+0x5ce>
   12128:	2b1f      	cmp	r3, #31
   1212a:	dd00      	ble.n	1212e <__aeabi_dadd+0x4a6>
   1212c:	e09f      	b.n	1226e <__aeabi_dadd+0x5e6>
   1212e:	2620      	movs	r6, #32
   12130:	1af3      	subs	r3, r6, r3
   12132:	0026      	movs	r6, r4
   12134:	409e      	lsls	r6, r3
   12136:	469c      	mov	ip, r3
   12138:	46b3      	mov	fp, r6
   1213a:	4653      	mov	r3, sl
   1213c:	003e      	movs	r6, r7
   1213e:	40de      	lsrs	r6, r3
   12140:	0033      	movs	r3, r6
   12142:	465e      	mov	r6, fp
   12144:	431e      	orrs	r6, r3
   12146:	4663      	mov	r3, ip
   12148:	409f      	lsls	r7, r3
   1214a:	1e7b      	subs	r3, r7, #1
   1214c:	419f      	sbcs	r7, r3
   1214e:	4653      	mov	r3, sl
   12150:	40dc      	lsrs	r4, r3
   12152:	4337      	orrs	r7, r6
   12154:	18bf      	adds	r7, r7, r2
   12156:	4297      	cmp	r7, r2
   12158:	4192      	sbcs	r2, r2
   1215a:	1864      	adds	r4, r4, r1
   1215c:	4252      	negs	r2, r2
   1215e:	18a4      	adds	r4, r4, r2
   12160:	0006      	movs	r6, r0
   12162:	e678      	b.n	11e56 <__aeabi_dadd+0x1ce>
   12164:	4327      	orrs	r7, r4
   12166:	1e7c      	subs	r4, r7, #1
   12168:	41a7      	sbcs	r7, r4
   1216a:	2400      	movs	r4, #0
   1216c:	e737      	b.n	11fde <__aeabi_dadd+0x356>
   1216e:	4e4c      	ldr	r6, [pc, #304]	; (122a0 <__aeabi_dadd+0x618>)
   12170:	42b0      	cmp	r0, r6
   12172:	d036      	beq.n	121e2 <__aeabi_dadd+0x55a>
   12174:	2680      	movs	r6, #128	; 0x80
   12176:	425b      	negs	r3, r3
   12178:	0436      	lsls	r6, r6, #16
   1217a:	469a      	mov	sl, r3
   1217c:	4334      	orrs	r4, r6
   1217e:	e7cf      	b.n	12120 <__aeabi_dadd+0x498>
   12180:	0018      	movs	r0, r3
   12182:	4310      	orrs	r0, r2
   12184:	d100      	bne.n	12188 <__aeabi_dadd+0x500>
   12186:	e603      	b.n	11d90 <__aeabi_dadd+0x108>
   12188:	1ab8      	subs	r0, r7, r2
   1218a:	4684      	mov	ip, r0
   1218c:	4567      	cmp	r7, ip
   1218e:	41ad      	sbcs	r5, r5
   12190:	1ae0      	subs	r0, r4, r3
   12192:	426d      	negs	r5, r5
   12194:	1b40      	subs	r0, r0, r5
   12196:	0205      	lsls	r5, r0, #8
   12198:	d400      	bmi.n	1219c <__aeabi_dadd+0x514>
   1219a:	e62c      	b.n	11df6 <__aeabi_dadd+0x16e>
   1219c:	1bd7      	subs	r7, r2, r7
   1219e:	42ba      	cmp	r2, r7
   121a0:	4192      	sbcs	r2, r2
   121a2:	1b1c      	subs	r4, r3, r4
   121a4:	4252      	negs	r2, r2
   121a6:	1aa4      	subs	r4, r4, r2
   121a8:	46d8      	mov	r8, fp
   121aa:	e5f1      	b.n	11d90 <__aeabi_dadd+0x108>
   121ac:	0018      	movs	r0, r3
   121ae:	4310      	orrs	r0, r2
   121b0:	d100      	bne.n	121b4 <__aeabi_dadd+0x52c>
   121b2:	e763      	b.n	1207c <__aeabi_dadd+0x3f4>
   121b4:	08f8      	lsrs	r0, r7, #3
   121b6:	0767      	lsls	r7, r4, #29
   121b8:	4307      	orrs	r7, r0
   121ba:	2080      	movs	r0, #128	; 0x80
   121bc:	08e4      	lsrs	r4, r4, #3
   121be:	0300      	lsls	r0, r0, #12
   121c0:	4204      	tst	r4, r0
   121c2:	d008      	beq.n	121d6 <__aeabi_dadd+0x54e>
   121c4:	08dd      	lsrs	r5, r3, #3
   121c6:	4205      	tst	r5, r0
   121c8:	d105      	bne.n	121d6 <__aeabi_dadd+0x54e>
   121ca:	08d2      	lsrs	r2, r2, #3
   121cc:	0759      	lsls	r1, r3, #29
   121ce:	4311      	orrs	r1, r2
   121d0:	000f      	movs	r7, r1
   121d2:	002c      	movs	r4, r5
   121d4:	46d8      	mov	r8, fp
   121d6:	0f7b      	lsrs	r3, r7, #29
   121d8:	00e4      	lsls	r4, r4, #3
   121da:	431c      	orrs	r4, r3
   121dc:	00ff      	lsls	r7, r7, #3
   121de:	4e30      	ldr	r6, [pc, #192]	; (122a0 <__aeabi_dadd+0x618>)
   121e0:	e5d6      	b.n	11d90 <__aeabi_dadd+0x108>
   121e2:	000c      	movs	r4, r1
   121e4:	0017      	movs	r7, r2
   121e6:	0006      	movs	r6, r0
   121e8:	e5d2      	b.n	11d90 <__aeabi_dadd+0x108>
   121ea:	2b00      	cmp	r3, #0
   121ec:	d038      	beq.n	12260 <__aeabi_dadd+0x5d8>
   121ee:	000b      	movs	r3, r1
   121f0:	4313      	orrs	r3, r2
   121f2:	d100      	bne.n	121f6 <__aeabi_dadd+0x56e>
   121f4:	e742      	b.n	1207c <__aeabi_dadd+0x3f4>
   121f6:	08f8      	lsrs	r0, r7, #3
   121f8:	0767      	lsls	r7, r4, #29
   121fa:	4307      	orrs	r7, r0
   121fc:	2080      	movs	r0, #128	; 0x80
   121fe:	08e4      	lsrs	r4, r4, #3
   12200:	0300      	lsls	r0, r0, #12
   12202:	4204      	tst	r4, r0
   12204:	d0e7      	beq.n	121d6 <__aeabi_dadd+0x54e>
   12206:	08cb      	lsrs	r3, r1, #3
   12208:	4203      	tst	r3, r0
   1220a:	d1e4      	bne.n	121d6 <__aeabi_dadd+0x54e>
   1220c:	08d2      	lsrs	r2, r2, #3
   1220e:	0749      	lsls	r1, r1, #29
   12210:	4311      	orrs	r1, r2
   12212:	000f      	movs	r7, r1
   12214:	001c      	movs	r4, r3
   12216:	e7de      	b.n	121d6 <__aeabi_dadd+0x54e>
   12218:	2700      	movs	r7, #0
   1221a:	2400      	movs	r4, #0
   1221c:	e5d5      	b.n	11dca <__aeabi_dadd+0x142>
   1221e:	2100      	movs	r1, #0
   12220:	e76b      	b.n	120fa <__aeabi_dadd+0x472>
   12222:	2500      	movs	r5, #0
   12224:	2700      	movs	r7, #0
   12226:	e5f3      	b.n	11e10 <__aeabi_dadd+0x188>
   12228:	464e      	mov	r6, r9
   1222a:	0025      	movs	r5, r4
   1222c:	3e20      	subs	r6, #32
   1222e:	40f5      	lsrs	r5, r6
   12230:	464b      	mov	r3, r9
   12232:	002e      	movs	r6, r5
   12234:	2b20      	cmp	r3, #32
   12236:	d02d      	beq.n	12294 <__aeabi_dadd+0x60c>
   12238:	2540      	movs	r5, #64	; 0x40
   1223a:	1aed      	subs	r5, r5, r3
   1223c:	40ac      	lsls	r4, r5
   1223e:	4327      	orrs	r7, r4
   12240:	1e7c      	subs	r4, r7, #1
   12242:	41a7      	sbcs	r7, r4
   12244:	2400      	movs	r4, #0
   12246:	4337      	orrs	r7, r6
   12248:	e6c9      	b.n	11fde <__aeabi_dadd+0x356>
   1224a:	2480      	movs	r4, #128	; 0x80
   1224c:	2500      	movs	r5, #0
   1224e:	0324      	lsls	r4, r4, #12
   12250:	4e13      	ldr	r6, [pc, #76]	; (122a0 <__aeabi_dadd+0x618>)
   12252:	2700      	movs	r7, #0
   12254:	e5dc      	b.n	11e10 <__aeabi_dadd+0x188>
   12256:	4327      	orrs	r7, r4
   12258:	1e7c      	subs	r4, r7, #1
   1225a:	41a7      	sbcs	r7, r4
   1225c:	2400      	movs	r4, #0
   1225e:	e779      	b.n	12154 <__aeabi_dadd+0x4cc>
   12260:	000c      	movs	r4, r1
   12262:	0017      	movs	r7, r2
   12264:	4e0e      	ldr	r6, [pc, #56]	; (122a0 <__aeabi_dadd+0x618>)
   12266:	e593      	b.n	11d90 <__aeabi_dadd+0x108>
   12268:	000c      	movs	r4, r1
   1226a:	0017      	movs	r7, r2
   1226c:	e590      	b.n	11d90 <__aeabi_dadd+0x108>
   1226e:	4656      	mov	r6, sl
   12270:	0023      	movs	r3, r4
   12272:	3e20      	subs	r6, #32
   12274:	40f3      	lsrs	r3, r6
   12276:	4699      	mov	r9, r3
   12278:	4653      	mov	r3, sl
   1227a:	2b20      	cmp	r3, #32
   1227c:	d00e      	beq.n	1229c <__aeabi_dadd+0x614>
   1227e:	2340      	movs	r3, #64	; 0x40
   12280:	4656      	mov	r6, sl
   12282:	1b9b      	subs	r3, r3, r6
   12284:	409c      	lsls	r4, r3
   12286:	4327      	orrs	r7, r4
   12288:	1e7c      	subs	r4, r7, #1
   1228a:	41a7      	sbcs	r7, r4
   1228c:	464b      	mov	r3, r9
   1228e:	2400      	movs	r4, #0
   12290:	431f      	orrs	r7, r3
   12292:	e75f      	b.n	12154 <__aeabi_dadd+0x4cc>
   12294:	2400      	movs	r4, #0
   12296:	e7d2      	b.n	1223e <__aeabi_dadd+0x5b6>
   12298:	0017      	movs	r7, r2
   1229a:	e5b2      	b.n	11e02 <__aeabi_dadd+0x17a>
   1229c:	2400      	movs	r4, #0
   1229e:	e7f2      	b.n	12286 <__aeabi_dadd+0x5fe>
   122a0:	000007ff 	.word	0x000007ff
   122a4:	ff7fffff 	.word	0xff7fffff

000122a8 <__aeabi_ddiv>:
   122a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   122aa:	4657      	mov	r7, sl
   122ac:	4645      	mov	r5, r8
   122ae:	46de      	mov	lr, fp
   122b0:	464e      	mov	r6, r9
   122b2:	b5e0      	push	{r5, r6, r7, lr}
   122b4:	004c      	lsls	r4, r1, #1
   122b6:	030e      	lsls	r6, r1, #12
   122b8:	b087      	sub	sp, #28
   122ba:	4683      	mov	fp, r0
   122bc:	4692      	mov	sl, r2
   122be:	001d      	movs	r5, r3
   122c0:	4680      	mov	r8, r0
   122c2:	0b36      	lsrs	r6, r6, #12
   122c4:	0d64      	lsrs	r4, r4, #21
   122c6:	0fcf      	lsrs	r7, r1, #31
   122c8:	2c00      	cmp	r4, #0
   122ca:	d04f      	beq.n	1236c <__aeabi_ddiv+0xc4>
   122cc:	4b6f      	ldr	r3, [pc, #444]	; (1248c <__aeabi_ddiv+0x1e4>)
   122ce:	429c      	cmp	r4, r3
   122d0:	d035      	beq.n	1233e <__aeabi_ddiv+0x96>
   122d2:	2380      	movs	r3, #128	; 0x80
   122d4:	0f42      	lsrs	r2, r0, #29
   122d6:	041b      	lsls	r3, r3, #16
   122d8:	00f6      	lsls	r6, r6, #3
   122da:	4313      	orrs	r3, r2
   122dc:	4333      	orrs	r3, r6
   122de:	4699      	mov	r9, r3
   122e0:	00c3      	lsls	r3, r0, #3
   122e2:	4698      	mov	r8, r3
   122e4:	4b6a      	ldr	r3, [pc, #424]	; (12490 <__aeabi_ddiv+0x1e8>)
   122e6:	2600      	movs	r6, #0
   122e8:	469c      	mov	ip, r3
   122ea:	2300      	movs	r3, #0
   122ec:	4464      	add	r4, ip
   122ee:	9303      	str	r3, [sp, #12]
   122f0:	032b      	lsls	r3, r5, #12
   122f2:	0b1b      	lsrs	r3, r3, #12
   122f4:	469b      	mov	fp, r3
   122f6:	006b      	lsls	r3, r5, #1
   122f8:	0fed      	lsrs	r5, r5, #31
   122fa:	4650      	mov	r0, sl
   122fc:	0d5b      	lsrs	r3, r3, #21
   122fe:	9501      	str	r5, [sp, #4]
   12300:	d05e      	beq.n	123c0 <__aeabi_ddiv+0x118>
   12302:	4a62      	ldr	r2, [pc, #392]	; (1248c <__aeabi_ddiv+0x1e4>)
   12304:	4293      	cmp	r3, r2
   12306:	d053      	beq.n	123b0 <__aeabi_ddiv+0x108>
   12308:	465a      	mov	r2, fp
   1230a:	00d1      	lsls	r1, r2, #3
   1230c:	2280      	movs	r2, #128	; 0x80
   1230e:	0f40      	lsrs	r0, r0, #29
   12310:	0412      	lsls	r2, r2, #16
   12312:	4302      	orrs	r2, r0
   12314:	430a      	orrs	r2, r1
   12316:	4693      	mov	fp, r2
   12318:	4652      	mov	r2, sl
   1231a:	00d1      	lsls	r1, r2, #3
   1231c:	4a5c      	ldr	r2, [pc, #368]	; (12490 <__aeabi_ddiv+0x1e8>)
   1231e:	4694      	mov	ip, r2
   12320:	2200      	movs	r2, #0
   12322:	4463      	add	r3, ip
   12324:	0038      	movs	r0, r7
   12326:	4068      	eors	r0, r5
   12328:	4684      	mov	ip, r0
   1232a:	9002      	str	r0, [sp, #8]
   1232c:	1ae4      	subs	r4, r4, r3
   1232e:	4316      	orrs	r6, r2
   12330:	2e0f      	cmp	r6, #15
   12332:	d900      	bls.n	12336 <__aeabi_ddiv+0x8e>
   12334:	e0b4      	b.n	124a0 <__aeabi_ddiv+0x1f8>
   12336:	4b57      	ldr	r3, [pc, #348]	; (12494 <__aeabi_ddiv+0x1ec>)
   12338:	00b6      	lsls	r6, r6, #2
   1233a:	599b      	ldr	r3, [r3, r6]
   1233c:	469f      	mov	pc, r3
   1233e:	0003      	movs	r3, r0
   12340:	4333      	orrs	r3, r6
   12342:	4699      	mov	r9, r3
   12344:	d16c      	bne.n	12420 <__aeabi_ddiv+0x178>
   12346:	2300      	movs	r3, #0
   12348:	4698      	mov	r8, r3
   1234a:	3302      	adds	r3, #2
   1234c:	2608      	movs	r6, #8
   1234e:	9303      	str	r3, [sp, #12]
   12350:	e7ce      	b.n	122f0 <__aeabi_ddiv+0x48>
   12352:	46cb      	mov	fp, r9
   12354:	4641      	mov	r1, r8
   12356:	9a03      	ldr	r2, [sp, #12]
   12358:	9701      	str	r7, [sp, #4]
   1235a:	2a02      	cmp	r2, #2
   1235c:	d165      	bne.n	1242a <__aeabi_ddiv+0x182>
   1235e:	9b01      	ldr	r3, [sp, #4]
   12360:	4c4a      	ldr	r4, [pc, #296]	; (1248c <__aeabi_ddiv+0x1e4>)
   12362:	469c      	mov	ip, r3
   12364:	2300      	movs	r3, #0
   12366:	2200      	movs	r2, #0
   12368:	4698      	mov	r8, r3
   1236a:	e06b      	b.n	12444 <__aeabi_ddiv+0x19c>
   1236c:	0003      	movs	r3, r0
   1236e:	4333      	orrs	r3, r6
   12370:	4699      	mov	r9, r3
   12372:	d04e      	beq.n	12412 <__aeabi_ddiv+0x16a>
   12374:	2e00      	cmp	r6, #0
   12376:	d100      	bne.n	1237a <__aeabi_ddiv+0xd2>
   12378:	e1bc      	b.n	126f4 <__aeabi_ddiv+0x44c>
   1237a:	0030      	movs	r0, r6
   1237c:	f001 fa7e 	bl	1387c <__clzsi2>
   12380:	0003      	movs	r3, r0
   12382:	3b0b      	subs	r3, #11
   12384:	2b1c      	cmp	r3, #28
   12386:	dd00      	ble.n	1238a <__aeabi_ddiv+0xe2>
   12388:	e1ac      	b.n	126e4 <__aeabi_ddiv+0x43c>
   1238a:	221d      	movs	r2, #29
   1238c:	1ad3      	subs	r3, r2, r3
   1238e:	465a      	mov	r2, fp
   12390:	0001      	movs	r1, r0
   12392:	40da      	lsrs	r2, r3
   12394:	3908      	subs	r1, #8
   12396:	408e      	lsls	r6, r1
   12398:	0013      	movs	r3, r2
   1239a:	4333      	orrs	r3, r6
   1239c:	4699      	mov	r9, r3
   1239e:	465b      	mov	r3, fp
   123a0:	408b      	lsls	r3, r1
   123a2:	4698      	mov	r8, r3
   123a4:	2300      	movs	r3, #0
   123a6:	4c3c      	ldr	r4, [pc, #240]	; (12498 <__aeabi_ddiv+0x1f0>)
   123a8:	2600      	movs	r6, #0
   123aa:	1a24      	subs	r4, r4, r0
   123ac:	9303      	str	r3, [sp, #12]
   123ae:	e79f      	b.n	122f0 <__aeabi_ddiv+0x48>
   123b0:	4651      	mov	r1, sl
   123b2:	465a      	mov	r2, fp
   123b4:	4311      	orrs	r1, r2
   123b6:	d129      	bne.n	1240c <__aeabi_ddiv+0x164>
   123b8:	2200      	movs	r2, #0
   123ba:	4693      	mov	fp, r2
   123bc:	3202      	adds	r2, #2
   123be:	e7b1      	b.n	12324 <__aeabi_ddiv+0x7c>
   123c0:	4659      	mov	r1, fp
   123c2:	4301      	orrs	r1, r0
   123c4:	d01e      	beq.n	12404 <__aeabi_ddiv+0x15c>
   123c6:	465b      	mov	r3, fp
   123c8:	2b00      	cmp	r3, #0
   123ca:	d100      	bne.n	123ce <__aeabi_ddiv+0x126>
   123cc:	e19e      	b.n	1270c <__aeabi_ddiv+0x464>
   123ce:	4658      	mov	r0, fp
   123d0:	f001 fa54 	bl	1387c <__clzsi2>
   123d4:	0003      	movs	r3, r0
   123d6:	3b0b      	subs	r3, #11
   123d8:	2b1c      	cmp	r3, #28
   123da:	dd00      	ble.n	123de <__aeabi_ddiv+0x136>
   123dc:	e18f      	b.n	126fe <__aeabi_ddiv+0x456>
   123de:	0002      	movs	r2, r0
   123e0:	4659      	mov	r1, fp
   123e2:	3a08      	subs	r2, #8
   123e4:	4091      	lsls	r1, r2
   123e6:	468b      	mov	fp, r1
   123e8:	211d      	movs	r1, #29
   123ea:	1acb      	subs	r3, r1, r3
   123ec:	4651      	mov	r1, sl
   123ee:	40d9      	lsrs	r1, r3
   123f0:	000b      	movs	r3, r1
   123f2:	4659      	mov	r1, fp
   123f4:	430b      	orrs	r3, r1
   123f6:	4651      	mov	r1, sl
   123f8:	469b      	mov	fp, r3
   123fa:	4091      	lsls	r1, r2
   123fc:	4b26      	ldr	r3, [pc, #152]	; (12498 <__aeabi_ddiv+0x1f0>)
   123fe:	2200      	movs	r2, #0
   12400:	1a1b      	subs	r3, r3, r0
   12402:	e78f      	b.n	12324 <__aeabi_ddiv+0x7c>
   12404:	2300      	movs	r3, #0
   12406:	2201      	movs	r2, #1
   12408:	469b      	mov	fp, r3
   1240a:	e78b      	b.n	12324 <__aeabi_ddiv+0x7c>
   1240c:	4651      	mov	r1, sl
   1240e:	2203      	movs	r2, #3
   12410:	e788      	b.n	12324 <__aeabi_ddiv+0x7c>
   12412:	2300      	movs	r3, #0
   12414:	4698      	mov	r8, r3
   12416:	3301      	adds	r3, #1
   12418:	2604      	movs	r6, #4
   1241a:	2400      	movs	r4, #0
   1241c:	9303      	str	r3, [sp, #12]
   1241e:	e767      	b.n	122f0 <__aeabi_ddiv+0x48>
   12420:	2303      	movs	r3, #3
   12422:	46b1      	mov	r9, r6
   12424:	9303      	str	r3, [sp, #12]
   12426:	260c      	movs	r6, #12
   12428:	e762      	b.n	122f0 <__aeabi_ddiv+0x48>
   1242a:	2a03      	cmp	r2, #3
   1242c:	d100      	bne.n	12430 <__aeabi_ddiv+0x188>
   1242e:	e25c      	b.n	128ea <__aeabi_ddiv+0x642>
   12430:	9b01      	ldr	r3, [sp, #4]
   12432:	2a01      	cmp	r2, #1
   12434:	d000      	beq.n	12438 <__aeabi_ddiv+0x190>
   12436:	e1e4      	b.n	12802 <__aeabi_ddiv+0x55a>
   12438:	4013      	ands	r3, r2
   1243a:	469c      	mov	ip, r3
   1243c:	2300      	movs	r3, #0
   1243e:	2400      	movs	r4, #0
   12440:	2200      	movs	r2, #0
   12442:	4698      	mov	r8, r3
   12444:	2100      	movs	r1, #0
   12446:	0312      	lsls	r2, r2, #12
   12448:	0b13      	lsrs	r3, r2, #12
   1244a:	0d0a      	lsrs	r2, r1, #20
   1244c:	0512      	lsls	r2, r2, #20
   1244e:	431a      	orrs	r2, r3
   12450:	0523      	lsls	r3, r4, #20
   12452:	4c12      	ldr	r4, [pc, #72]	; (1249c <__aeabi_ddiv+0x1f4>)
   12454:	4640      	mov	r0, r8
   12456:	4022      	ands	r2, r4
   12458:	4313      	orrs	r3, r2
   1245a:	4662      	mov	r2, ip
   1245c:	005b      	lsls	r3, r3, #1
   1245e:	07d2      	lsls	r2, r2, #31
   12460:	085b      	lsrs	r3, r3, #1
   12462:	4313      	orrs	r3, r2
   12464:	0019      	movs	r1, r3
   12466:	b007      	add	sp, #28
   12468:	bc3c      	pop	{r2, r3, r4, r5}
   1246a:	4690      	mov	r8, r2
   1246c:	4699      	mov	r9, r3
   1246e:	46a2      	mov	sl, r4
   12470:	46ab      	mov	fp, r5
   12472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12474:	2300      	movs	r3, #0
   12476:	2280      	movs	r2, #128	; 0x80
   12478:	469c      	mov	ip, r3
   1247a:	0312      	lsls	r2, r2, #12
   1247c:	4698      	mov	r8, r3
   1247e:	4c03      	ldr	r4, [pc, #12]	; (1248c <__aeabi_ddiv+0x1e4>)
   12480:	e7e0      	b.n	12444 <__aeabi_ddiv+0x19c>
   12482:	2300      	movs	r3, #0
   12484:	4c01      	ldr	r4, [pc, #4]	; (1248c <__aeabi_ddiv+0x1e4>)
   12486:	2200      	movs	r2, #0
   12488:	4698      	mov	r8, r3
   1248a:	e7db      	b.n	12444 <__aeabi_ddiv+0x19c>
   1248c:	000007ff 	.word	0x000007ff
   12490:	fffffc01 	.word	0xfffffc01
   12494:	00015318 	.word	0x00015318
   12498:	fffffc0d 	.word	0xfffffc0d
   1249c:	800fffff 	.word	0x800fffff
   124a0:	45d9      	cmp	r9, fp
   124a2:	d900      	bls.n	124a6 <__aeabi_ddiv+0x1fe>
   124a4:	e139      	b.n	1271a <__aeabi_ddiv+0x472>
   124a6:	d100      	bne.n	124aa <__aeabi_ddiv+0x202>
   124a8:	e134      	b.n	12714 <__aeabi_ddiv+0x46c>
   124aa:	2300      	movs	r3, #0
   124ac:	4646      	mov	r6, r8
   124ae:	464d      	mov	r5, r9
   124b0:	469a      	mov	sl, r3
   124b2:	3c01      	subs	r4, #1
   124b4:	465b      	mov	r3, fp
   124b6:	0e0a      	lsrs	r2, r1, #24
   124b8:	021b      	lsls	r3, r3, #8
   124ba:	431a      	orrs	r2, r3
   124bc:	020b      	lsls	r3, r1, #8
   124be:	0c17      	lsrs	r7, r2, #16
   124c0:	9303      	str	r3, [sp, #12]
   124c2:	0413      	lsls	r3, r2, #16
   124c4:	0c1b      	lsrs	r3, r3, #16
   124c6:	0039      	movs	r1, r7
   124c8:	0028      	movs	r0, r5
   124ca:	4690      	mov	r8, r2
   124cc:	9301      	str	r3, [sp, #4]
   124ce:	f7fe ff45 	bl	1135c <__udivsi3>
   124d2:	0002      	movs	r2, r0
   124d4:	9b01      	ldr	r3, [sp, #4]
   124d6:	4683      	mov	fp, r0
   124d8:	435a      	muls	r2, r3
   124da:	0028      	movs	r0, r5
   124dc:	0039      	movs	r1, r7
   124de:	4691      	mov	r9, r2
   124e0:	f7fe ffc2 	bl	11468 <__aeabi_uidivmod>
   124e4:	0c35      	lsrs	r5, r6, #16
   124e6:	0409      	lsls	r1, r1, #16
   124e8:	430d      	orrs	r5, r1
   124ea:	45a9      	cmp	r9, r5
   124ec:	d90d      	bls.n	1250a <__aeabi_ddiv+0x262>
   124ee:	465b      	mov	r3, fp
   124f0:	4445      	add	r5, r8
   124f2:	3b01      	subs	r3, #1
   124f4:	45a8      	cmp	r8, r5
   124f6:	d900      	bls.n	124fa <__aeabi_ddiv+0x252>
   124f8:	e13a      	b.n	12770 <__aeabi_ddiv+0x4c8>
   124fa:	45a9      	cmp	r9, r5
   124fc:	d800      	bhi.n	12500 <__aeabi_ddiv+0x258>
   124fe:	e137      	b.n	12770 <__aeabi_ddiv+0x4c8>
   12500:	2302      	movs	r3, #2
   12502:	425b      	negs	r3, r3
   12504:	469c      	mov	ip, r3
   12506:	4445      	add	r5, r8
   12508:	44e3      	add	fp, ip
   1250a:	464b      	mov	r3, r9
   1250c:	1aeb      	subs	r3, r5, r3
   1250e:	0039      	movs	r1, r7
   12510:	0018      	movs	r0, r3
   12512:	9304      	str	r3, [sp, #16]
   12514:	f7fe ff22 	bl	1135c <__udivsi3>
   12518:	9b01      	ldr	r3, [sp, #4]
   1251a:	0005      	movs	r5, r0
   1251c:	4343      	muls	r3, r0
   1251e:	0039      	movs	r1, r7
   12520:	9804      	ldr	r0, [sp, #16]
   12522:	4699      	mov	r9, r3
   12524:	f7fe ffa0 	bl	11468 <__aeabi_uidivmod>
   12528:	0433      	lsls	r3, r6, #16
   1252a:	0409      	lsls	r1, r1, #16
   1252c:	0c1b      	lsrs	r3, r3, #16
   1252e:	430b      	orrs	r3, r1
   12530:	4599      	cmp	r9, r3
   12532:	d909      	bls.n	12548 <__aeabi_ddiv+0x2a0>
   12534:	4443      	add	r3, r8
   12536:	1e6a      	subs	r2, r5, #1
   12538:	4598      	cmp	r8, r3
   1253a:	d900      	bls.n	1253e <__aeabi_ddiv+0x296>
   1253c:	e11a      	b.n	12774 <__aeabi_ddiv+0x4cc>
   1253e:	4599      	cmp	r9, r3
   12540:	d800      	bhi.n	12544 <__aeabi_ddiv+0x29c>
   12542:	e117      	b.n	12774 <__aeabi_ddiv+0x4cc>
   12544:	3d02      	subs	r5, #2
   12546:	4443      	add	r3, r8
   12548:	464a      	mov	r2, r9
   1254a:	1a9b      	subs	r3, r3, r2
   1254c:	465a      	mov	r2, fp
   1254e:	0412      	lsls	r2, r2, #16
   12550:	432a      	orrs	r2, r5
   12552:	9903      	ldr	r1, [sp, #12]
   12554:	4693      	mov	fp, r2
   12556:	0c10      	lsrs	r0, r2, #16
   12558:	0c0a      	lsrs	r2, r1, #16
   1255a:	4691      	mov	r9, r2
   1255c:	0409      	lsls	r1, r1, #16
   1255e:	465a      	mov	r2, fp
   12560:	0c09      	lsrs	r1, r1, #16
   12562:	464e      	mov	r6, r9
   12564:	000d      	movs	r5, r1
   12566:	0412      	lsls	r2, r2, #16
   12568:	0c12      	lsrs	r2, r2, #16
   1256a:	4345      	muls	r5, r0
   1256c:	9105      	str	r1, [sp, #20]
   1256e:	4351      	muls	r1, r2
   12570:	4372      	muls	r2, r6
   12572:	4370      	muls	r0, r6
   12574:	1952      	adds	r2, r2, r5
   12576:	0c0e      	lsrs	r6, r1, #16
   12578:	18b2      	adds	r2, r6, r2
   1257a:	4295      	cmp	r5, r2
   1257c:	d903      	bls.n	12586 <__aeabi_ddiv+0x2de>
   1257e:	2580      	movs	r5, #128	; 0x80
   12580:	026d      	lsls	r5, r5, #9
   12582:	46ac      	mov	ip, r5
   12584:	4460      	add	r0, ip
   12586:	0c15      	lsrs	r5, r2, #16
   12588:	0409      	lsls	r1, r1, #16
   1258a:	0412      	lsls	r2, r2, #16
   1258c:	0c09      	lsrs	r1, r1, #16
   1258e:	1828      	adds	r0, r5, r0
   12590:	1852      	adds	r2, r2, r1
   12592:	4283      	cmp	r3, r0
   12594:	d200      	bcs.n	12598 <__aeabi_ddiv+0x2f0>
   12596:	e0ce      	b.n	12736 <__aeabi_ddiv+0x48e>
   12598:	d100      	bne.n	1259c <__aeabi_ddiv+0x2f4>
   1259a:	e0c8      	b.n	1272e <__aeabi_ddiv+0x486>
   1259c:	1a1d      	subs	r5, r3, r0
   1259e:	4653      	mov	r3, sl
   125a0:	1a9e      	subs	r6, r3, r2
   125a2:	45b2      	cmp	sl, r6
   125a4:	4192      	sbcs	r2, r2
   125a6:	4252      	negs	r2, r2
   125a8:	1aab      	subs	r3, r5, r2
   125aa:	469a      	mov	sl, r3
   125ac:	4598      	cmp	r8, r3
   125ae:	d100      	bne.n	125b2 <__aeabi_ddiv+0x30a>
   125b0:	e117      	b.n	127e2 <__aeabi_ddiv+0x53a>
   125b2:	0039      	movs	r1, r7
   125b4:	0018      	movs	r0, r3
   125b6:	f7fe fed1 	bl	1135c <__udivsi3>
   125ba:	9b01      	ldr	r3, [sp, #4]
   125bc:	0005      	movs	r5, r0
   125be:	4343      	muls	r3, r0
   125c0:	0039      	movs	r1, r7
   125c2:	4650      	mov	r0, sl
   125c4:	9304      	str	r3, [sp, #16]
   125c6:	f7fe ff4f 	bl	11468 <__aeabi_uidivmod>
   125ca:	9804      	ldr	r0, [sp, #16]
   125cc:	040b      	lsls	r3, r1, #16
   125ce:	0c31      	lsrs	r1, r6, #16
   125d0:	4319      	orrs	r1, r3
   125d2:	4288      	cmp	r0, r1
   125d4:	d909      	bls.n	125ea <__aeabi_ddiv+0x342>
   125d6:	4441      	add	r1, r8
   125d8:	1e6b      	subs	r3, r5, #1
   125da:	4588      	cmp	r8, r1
   125dc:	d900      	bls.n	125e0 <__aeabi_ddiv+0x338>
   125de:	e107      	b.n	127f0 <__aeabi_ddiv+0x548>
   125e0:	4288      	cmp	r0, r1
   125e2:	d800      	bhi.n	125e6 <__aeabi_ddiv+0x33e>
   125e4:	e104      	b.n	127f0 <__aeabi_ddiv+0x548>
   125e6:	3d02      	subs	r5, #2
   125e8:	4441      	add	r1, r8
   125ea:	9b04      	ldr	r3, [sp, #16]
   125ec:	1acb      	subs	r3, r1, r3
   125ee:	0018      	movs	r0, r3
   125f0:	0039      	movs	r1, r7
   125f2:	9304      	str	r3, [sp, #16]
   125f4:	f7fe feb2 	bl	1135c <__udivsi3>
   125f8:	9b01      	ldr	r3, [sp, #4]
   125fa:	4682      	mov	sl, r0
   125fc:	4343      	muls	r3, r0
   125fe:	0039      	movs	r1, r7
   12600:	9804      	ldr	r0, [sp, #16]
   12602:	9301      	str	r3, [sp, #4]
   12604:	f7fe ff30 	bl	11468 <__aeabi_uidivmod>
   12608:	9801      	ldr	r0, [sp, #4]
   1260a:	040b      	lsls	r3, r1, #16
   1260c:	0431      	lsls	r1, r6, #16
   1260e:	0c09      	lsrs	r1, r1, #16
   12610:	4319      	orrs	r1, r3
   12612:	4288      	cmp	r0, r1
   12614:	d90d      	bls.n	12632 <__aeabi_ddiv+0x38a>
   12616:	4653      	mov	r3, sl
   12618:	4441      	add	r1, r8
   1261a:	3b01      	subs	r3, #1
   1261c:	4588      	cmp	r8, r1
   1261e:	d900      	bls.n	12622 <__aeabi_ddiv+0x37a>
   12620:	e0e8      	b.n	127f4 <__aeabi_ddiv+0x54c>
   12622:	4288      	cmp	r0, r1
   12624:	d800      	bhi.n	12628 <__aeabi_ddiv+0x380>
   12626:	e0e5      	b.n	127f4 <__aeabi_ddiv+0x54c>
   12628:	2302      	movs	r3, #2
   1262a:	425b      	negs	r3, r3
   1262c:	469c      	mov	ip, r3
   1262e:	4441      	add	r1, r8
   12630:	44e2      	add	sl, ip
   12632:	9b01      	ldr	r3, [sp, #4]
   12634:	042d      	lsls	r5, r5, #16
   12636:	1ace      	subs	r6, r1, r3
   12638:	4651      	mov	r1, sl
   1263a:	4329      	orrs	r1, r5
   1263c:	9d05      	ldr	r5, [sp, #20]
   1263e:	464f      	mov	r7, r9
   12640:	002a      	movs	r2, r5
   12642:	040b      	lsls	r3, r1, #16
   12644:	0c08      	lsrs	r0, r1, #16
   12646:	0c1b      	lsrs	r3, r3, #16
   12648:	435a      	muls	r2, r3
   1264a:	4345      	muls	r5, r0
   1264c:	437b      	muls	r3, r7
   1264e:	4378      	muls	r0, r7
   12650:	195b      	adds	r3, r3, r5
   12652:	0c17      	lsrs	r7, r2, #16
   12654:	18fb      	adds	r3, r7, r3
   12656:	429d      	cmp	r5, r3
   12658:	d903      	bls.n	12662 <__aeabi_ddiv+0x3ba>
   1265a:	2580      	movs	r5, #128	; 0x80
   1265c:	026d      	lsls	r5, r5, #9
   1265e:	46ac      	mov	ip, r5
   12660:	4460      	add	r0, ip
   12662:	0c1d      	lsrs	r5, r3, #16
   12664:	0412      	lsls	r2, r2, #16
   12666:	041b      	lsls	r3, r3, #16
   12668:	0c12      	lsrs	r2, r2, #16
   1266a:	1828      	adds	r0, r5, r0
   1266c:	189b      	adds	r3, r3, r2
   1266e:	4286      	cmp	r6, r0
   12670:	d200      	bcs.n	12674 <__aeabi_ddiv+0x3cc>
   12672:	e093      	b.n	1279c <__aeabi_ddiv+0x4f4>
   12674:	d100      	bne.n	12678 <__aeabi_ddiv+0x3d0>
   12676:	e08e      	b.n	12796 <__aeabi_ddiv+0x4ee>
   12678:	2301      	movs	r3, #1
   1267a:	4319      	orrs	r1, r3
   1267c:	4ba0      	ldr	r3, [pc, #640]	; (12900 <__aeabi_ddiv+0x658>)
   1267e:	18e3      	adds	r3, r4, r3
   12680:	2b00      	cmp	r3, #0
   12682:	dc00      	bgt.n	12686 <__aeabi_ddiv+0x3de>
   12684:	e099      	b.n	127ba <__aeabi_ddiv+0x512>
   12686:	074a      	lsls	r2, r1, #29
   12688:	d000      	beq.n	1268c <__aeabi_ddiv+0x3e4>
   1268a:	e09e      	b.n	127ca <__aeabi_ddiv+0x522>
   1268c:	465a      	mov	r2, fp
   1268e:	01d2      	lsls	r2, r2, #7
   12690:	d506      	bpl.n	126a0 <__aeabi_ddiv+0x3f8>
   12692:	465a      	mov	r2, fp
   12694:	4b9b      	ldr	r3, [pc, #620]	; (12904 <__aeabi_ddiv+0x65c>)
   12696:	401a      	ands	r2, r3
   12698:	2380      	movs	r3, #128	; 0x80
   1269a:	4693      	mov	fp, r2
   1269c:	00db      	lsls	r3, r3, #3
   1269e:	18e3      	adds	r3, r4, r3
   126a0:	4a99      	ldr	r2, [pc, #612]	; (12908 <__aeabi_ddiv+0x660>)
   126a2:	4293      	cmp	r3, r2
   126a4:	dd68      	ble.n	12778 <__aeabi_ddiv+0x4d0>
   126a6:	2301      	movs	r3, #1
   126a8:	9a02      	ldr	r2, [sp, #8]
   126aa:	4c98      	ldr	r4, [pc, #608]	; (1290c <__aeabi_ddiv+0x664>)
   126ac:	401a      	ands	r2, r3
   126ae:	2300      	movs	r3, #0
   126b0:	4694      	mov	ip, r2
   126b2:	4698      	mov	r8, r3
   126b4:	2200      	movs	r2, #0
   126b6:	e6c5      	b.n	12444 <__aeabi_ddiv+0x19c>
   126b8:	2280      	movs	r2, #128	; 0x80
   126ba:	464b      	mov	r3, r9
   126bc:	0312      	lsls	r2, r2, #12
   126be:	4213      	tst	r3, r2
   126c0:	d00a      	beq.n	126d8 <__aeabi_ddiv+0x430>
   126c2:	465b      	mov	r3, fp
   126c4:	4213      	tst	r3, r2
   126c6:	d106      	bne.n	126d6 <__aeabi_ddiv+0x42e>
   126c8:	431a      	orrs	r2, r3
   126ca:	0312      	lsls	r2, r2, #12
   126cc:	0b12      	lsrs	r2, r2, #12
   126ce:	46ac      	mov	ip, r5
   126d0:	4688      	mov	r8, r1
   126d2:	4c8e      	ldr	r4, [pc, #568]	; (1290c <__aeabi_ddiv+0x664>)
   126d4:	e6b6      	b.n	12444 <__aeabi_ddiv+0x19c>
   126d6:	464b      	mov	r3, r9
   126d8:	431a      	orrs	r2, r3
   126da:	0312      	lsls	r2, r2, #12
   126dc:	0b12      	lsrs	r2, r2, #12
   126de:	46bc      	mov	ip, r7
   126e0:	4c8a      	ldr	r4, [pc, #552]	; (1290c <__aeabi_ddiv+0x664>)
   126e2:	e6af      	b.n	12444 <__aeabi_ddiv+0x19c>
   126e4:	0003      	movs	r3, r0
   126e6:	465a      	mov	r2, fp
   126e8:	3b28      	subs	r3, #40	; 0x28
   126ea:	409a      	lsls	r2, r3
   126ec:	2300      	movs	r3, #0
   126ee:	4691      	mov	r9, r2
   126f0:	4698      	mov	r8, r3
   126f2:	e657      	b.n	123a4 <__aeabi_ddiv+0xfc>
   126f4:	4658      	mov	r0, fp
   126f6:	f001 f8c1 	bl	1387c <__clzsi2>
   126fa:	3020      	adds	r0, #32
   126fc:	e640      	b.n	12380 <__aeabi_ddiv+0xd8>
   126fe:	0003      	movs	r3, r0
   12700:	4652      	mov	r2, sl
   12702:	3b28      	subs	r3, #40	; 0x28
   12704:	409a      	lsls	r2, r3
   12706:	2100      	movs	r1, #0
   12708:	4693      	mov	fp, r2
   1270a:	e677      	b.n	123fc <__aeabi_ddiv+0x154>
   1270c:	f001 f8b6 	bl	1387c <__clzsi2>
   12710:	3020      	adds	r0, #32
   12712:	e65f      	b.n	123d4 <__aeabi_ddiv+0x12c>
   12714:	4588      	cmp	r8, r1
   12716:	d200      	bcs.n	1271a <__aeabi_ddiv+0x472>
   12718:	e6c7      	b.n	124aa <__aeabi_ddiv+0x202>
   1271a:	464b      	mov	r3, r9
   1271c:	07de      	lsls	r6, r3, #31
   1271e:	085d      	lsrs	r5, r3, #1
   12720:	4643      	mov	r3, r8
   12722:	085b      	lsrs	r3, r3, #1
   12724:	431e      	orrs	r6, r3
   12726:	4643      	mov	r3, r8
   12728:	07db      	lsls	r3, r3, #31
   1272a:	469a      	mov	sl, r3
   1272c:	e6c2      	b.n	124b4 <__aeabi_ddiv+0x20c>
   1272e:	2500      	movs	r5, #0
   12730:	4592      	cmp	sl, r2
   12732:	d300      	bcc.n	12736 <__aeabi_ddiv+0x48e>
   12734:	e733      	b.n	1259e <__aeabi_ddiv+0x2f6>
   12736:	9e03      	ldr	r6, [sp, #12]
   12738:	4659      	mov	r1, fp
   1273a:	46b4      	mov	ip, r6
   1273c:	44e2      	add	sl, ip
   1273e:	45b2      	cmp	sl, r6
   12740:	41ad      	sbcs	r5, r5
   12742:	426d      	negs	r5, r5
   12744:	4445      	add	r5, r8
   12746:	18eb      	adds	r3, r5, r3
   12748:	3901      	subs	r1, #1
   1274a:	4598      	cmp	r8, r3
   1274c:	d207      	bcs.n	1275e <__aeabi_ddiv+0x4b6>
   1274e:	4298      	cmp	r0, r3
   12750:	d900      	bls.n	12754 <__aeabi_ddiv+0x4ac>
   12752:	e07f      	b.n	12854 <__aeabi_ddiv+0x5ac>
   12754:	d100      	bne.n	12758 <__aeabi_ddiv+0x4b0>
   12756:	e0bc      	b.n	128d2 <__aeabi_ddiv+0x62a>
   12758:	1a1d      	subs	r5, r3, r0
   1275a:	468b      	mov	fp, r1
   1275c:	e71f      	b.n	1259e <__aeabi_ddiv+0x2f6>
   1275e:	4598      	cmp	r8, r3
   12760:	d1fa      	bne.n	12758 <__aeabi_ddiv+0x4b0>
   12762:	9d03      	ldr	r5, [sp, #12]
   12764:	4555      	cmp	r5, sl
   12766:	d9f2      	bls.n	1274e <__aeabi_ddiv+0x4a6>
   12768:	4643      	mov	r3, r8
   1276a:	468b      	mov	fp, r1
   1276c:	1a1d      	subs	r5, r3, r0
   1276e:	e716      	b.n	1259e <__aeabi_ddiv+0x2f6>
   12770:	469b      	mov	fp, r3
   12772:	e6ca      	b.n	1250a <__aeabi_ddiv+0x262>
   12774:	0015      	movs	r5, r2
   12776:	e6e7      	b.n	12548 <__aeabi_ddiv+0x2a0>
   12778:	465a      	mov	r2, fp
   1277a:	08c9      	lsrs	r1, r1, #3
   1277c:	0752      	lsls	r2, r2, #29
   1277e:	430a      	orrs	r2, r1
   12780:	055b      	lsls	r3, r3, #21
   12782:	4690      	mov	r8, r2
   12784:	0d5c      	lsrs	r4, r3, #21
   12786:	465a      	mov	r2, fp
   12788:	2301      	movs	r3, #1
   1278a:	9902      	ldr	r1, [sp, #8]
   1278c:	0252      	lsls	r2, r2, #9
   1278e:	4019      	ands	r1, r3
   12790:	0b12      	lsrs	r2, r2, #12
   12792:	468c      	mov	ip, r1
   12794:	e656      	b.n	12444 <__aeabi_ddiv+0x19c>
   12796:	2b00      	cmp	r3, #0
   12798:	d100      	bne.n	1279c <__aeabi_ddiv+0x4f4>
   1279a:	e76f      	b.n	1267c <__aeabi_ddiv+0x3d4>
   1279c:	4446      	add	r6, r8
   1279e:	1e4a      	subs	r2, r1, #1
   127a0:	45b0      	cmp	r8, r6
   127a2:	d929      	bls.n	127f8 <__aeabi_ddiv+0x550>
   127a4:	0011      	movs	r1, r2
   127a6:	4286      	cmp	r6, r0
   127a8:	d000      	beq.n	127ac <__aeabi_ddiv+0x504>
   127aa:	e765      	b.n	12678 <__aeabi_ddiv+0x3d0>
   127ac:	9a03      	ldr	r2, [sp, #12]
   127ae:	4293      	cmp	r3, r2
   127b0:	d000      	beq.n	127b4 <__aeabi_ddiv+0x50c>
   127b2:	e761      	b.n	12678 <__aeabi_ddiv+0x3d0>
   127b4:	e762      	b.n	1267c <__aeabi_ddiv+0x3d4>
   127b6:	2101      	movs	r1, #1
   127b8:	4249      	negs	r1, r1
   127ba:	2001      	movs	r0, #1
   127bc:	1ac2      	subs	r2, r0, r3
   127be:	2a38      	cmp	r2, #56	; 0x38
   127c0:	dd21      	ble.n	12806 <__aeabi_ddiv+0x55e>
   127c2:	9b02      	ldr	r3, [sp, #8]
   127c4:	4003      	ands	r3, r0
   127c6:	469c      	mov	ip, r3
   127c8:	e638      	b.n	1243c <__aeabi_ddiv+0x194>
   127ca:	220f      	movs	r2, #15
   127cc:	400a      	ands	r2, r1
   127ce:	2a04      	cmp	r2, #4
   127d0:	d100      	bne.n	127d4 <__aeabi_ddiv+0x52c>
   127d2:	e75b      	b.n	1268c <__aeabi_ddiv+0x3e4>
   127d4:	000a      	movs	r2, r1
   127d6:	1d11      	adds	r1, r2, #4
   127d8:	4291      	cmp	r1, r2
   127da:	4192      	sbcs	r2, r2
   127dc:	4252      	negs	r2, r2
   127de:	4493      	add	fp, r2
   127e0:	e754      	b.n	1268c <__aeabi_ddiv+0x3e4>
   127e2:	4b47      	ldr	r3, [pc, #284]	; (12900 <__aeabi_ddiv+0x658>)
   127e4:	18e3      	adds	r3, r4, r3
   127e6:	2b00      	cmp	r3, #0
   127e8:	dde5      	ble.n	127b6 <__aeabi_ddiv+0x50e>
   127ea:	2201      	movs	r2, #1
   127ec:	4252      	negs	r2, r2
   127ee:	e7f2      	b.n	127d6 <__aeabi_ddiv+0x52e>
   127f0:	001d      	movs	r5, r3
   127f2:	e6fa      	b.n	125ea <__aeabi_ddiv+0x342>
   127f4:	469a      	mov	sl, r3
   127f6:	e71c      	b.n	12632 <__aeabi_ddiv+0x38a>
   127f8:	42b0      	cmp	r0, r6
   127fa:	d839      	bhi.n	12870 <__aeabi_ddiv+0x5c8>
   127fc:	d06e      	beq.n	128dc <__aeabi_ddiv+0x634>
   127fe:	0011      	movs	r1, r2
   12800:	e73a      	b.n	12678 <__aeabi_ddiv+0x3d0>
   12802:	9302      	str	r3, [sp, #8]
   12804:	e73a      	b.n	1267c <__aeabi_ddiv+0x3d4>
   12806:	2a1f      	cmp	r2, #31
   12808:	dc3c      	bgt.n	12884 <__aeabi_ddiv+0x5dc>
   1280a:	2320      	movs	r3, #32
   1280c:	1a9b      	subs	r3, r3, r2
   1280e:	000c      	movs	r4, r1
   12810:	4658      	mov	r0, fp
   12812:	4099      	lsls	r1, r3
   12814:	4098      	lsls	r0, r3
   12816:	1e4b      	subs	r3, r1, #1
   12818:	4199      	sbcs	r1, r3
   1281a:	465b      	mov	r3, fp
   1281c:	40d4      	lsrs	r4, r2
   1281e:	40d3      	lsrs	r3, r2
   12820:	4320      	orrs	r0, r4
   12822:	4308      	orrs	r0, r1
   12824:	001a      	movs	r2, r3
   12826:	0743      	lsls	r3, r0, #29
   12828:	d009      	beq.n	1283e <__aeabi_ddiv+0x596>
   1282a:	230f      	movs	r3, #15
   1282c:	4003      	ands	r3, r0
   1282e:	2b04      	cmp	r3, #4
   12830:	d005      	beq.n	1283e <__aeabi_ddiv+0x596>
   12832:	0001      	movs	r1, r0
   12834:	1d08      	adds	r0, r1, #4
   12836:	4288      	cmp	r0, r1
   12838:	419b      	sbcs	r3, r3
   1283a:	425b      	negs	r3, r3
   1283c:	18d2      	adds	r2, r2, r3
   1283e:	0213      	lsls	r3, r2, #8
   12840:	d53a      	bpl.n	128b8 <__aeabi_ddiv+0x610>
   12842:	2301      	movs	r3, #1
   12844:	9a02      	ldr	r2, [sp, #8]
   12846:	2401      	movs	r4, #1
   12848:	401a      	ands	r2, r3
   1284a:	2300      	movs	r3, #0
   1284c:	4694      	mov	ip, r2
   1284e:	4698      	mov	r8, r3
   12850:	2200      	movs	r2, #0
   12852:	e5f7      	b.n	12444 <__aeabi_ddiv+0x19c>
   12854:	2102      	movs	r1, #2
   12856:	4249      	negs	r1, r1
   12858:	468c      	mov	ip, r1
   1285a:	9d03      	ldr	r5, [sp, #12]
   1285c:	44e3      	add	fp, ip
   1285e:	46ac      	mov	ip, r5
   12860:	44e2      	add	sl, ip
   12862:	45aa      	cmp	sl, r5
   12864:	41ad      	sbcs	r5, r5
   12866:	426d      	negs	r5, r5
   12868:	4445      	add	r5, r8
   1286a:	18ed      	adds	r5, r5, r3
   1286c:	1a2d      	subs	r5, r5, r0
   1286e:	e696      	b.n	1259e <__aeabi_ddiv+0x2f6>
   12870:	1e8a      	subs	r2, r1, #2
   12872:	9903      	ldr	r1, [sp, #12]
   12874:	004d      	lsls	r5, r1, #1
   12876:	428d      	cmp	r5, r1
   12878:	4189      	sbcs	r1, r1
   1287a:	4249      	negs	r1, r1
   1287c:	4441      	add	r1, r8
   1287e:	1876      	adds	r6, r6, r1
   12880:	9503      	str	r5, [sp, #12]
   12882:	e78f      	b.n	127a4 <__aeabi_ddiv+0x4fc>
   12884:	201f      	movs	r0, #31
   12886:	4240      	negs	r0, r0
   12888:	1ac3      	subs	r3, r0, r3
   1288a:	4658      	mov	r0, fp
   1288c:	40d8      	lsrs	r0, r3
   1288e:	0003      	movs	r3, r0
   12890:	2a20      	cmp	r2, #32
   12892:	d028      	beq.n	128e6 <__aeabi_ddiv+0x63e>
   12894:	2040      	movs	r0, #64	; 0x40
   12896:	465d      	mov	r5, fp
   12898:	1a82      	subs	r2, r0, r2
   1289a:	4095      	lsls	r5, r2
   1289c:	4329      	orrs	r1, r5
   1289e:	1e4a      	subs	r2, r1, #1
   128a0:	4191      	sbcs	r1, r2
   128a2:	4319      	orrs	r1, r3
   128a4:	2307      	movs	r3, #7
   128a6:	2200      	movs	r2, #0
   128a8:	400b      	ands	r3, r1
   128aa:	d009      	beq.n	128c0 <__aeabi_ddiv+0x618>
   128ac:	230f      	movs	r3, #15
   128ae:	2200      	movs	r2, #0
   128b0:	400b      	ands	r3, r1
   128b2:	0008      	movs	r0, r1
   128b4:	2b04      	cmp	r3, #4
   128b6:	d1bd      	bne.n	12834 <__aeabi_ddiv+0x58c>
   128b8:	0001      	movs	r1, r0
   128ba:	0753      	lsls	r3, r2, #29
   128bc:	0252      	lsls	r2, r2, #9
   128be:	0b12      	lsrs	r2, r2, #12
   128c0:	08c9      	lsrs	r1, r1, #3
   128c2:	4319      	orrs	r1, r3
   128c4:	2301      	movs	r3, #1
   128c6:	4688      	mov	r8, r1
   128c8:	9902      	ldr	r1, [sp, #8]
   128ca:	2400      	movs	r4, #0
   128cc:	4019      	ands	r1, r3
   128ce:	468c      	mov	ip, r1
   128d0:	e5b8      	b.n	12444 <__aeabi_ddiv+0x19c>
   128d2:	4552      	cmp	r2, sl
   128d4:	d8be      	bhi.n	12854 <__aeabi_ddiv+0x5ac>
   128d6:	468b      	mov	fp, r1
   128d8:	2500      	movs	r5, #0
   128da:	e660      	b.n	1259e <__aeabi_ddiv+0x2f6>
   128dc:	9d03      	ldr	r5, [sp, #12]
   128de:	429d      	cmp	r5, r3
   128e0:	d3c6      	bcc.n	12870 <__aeabi_ddiv+0x5c8>
   128e2:	0011      	movs	r1, r2
   128e4:	e762      	b.n	127ac <__aeabi_ddiv+0x504>
   128e6:	2500      	movs	r5, #0
   128e8:	e7d8      	b.n	1289c <__aeabi_ddiv+0x5f4>
   128ea:	2280      	movs	r2, #128	; 0x80
   128ec:	465b      	mov	r3, fp
   128ee:	0312      	lsls	r2, r2, #12
   128f0:	431a      	orrs	r2, r3
   128f2:	9b01      	ldr	r3, [sp, #4]
   128f4:	0312      	lsls	r2, r2, #12
   128f6:	0b12      	lsrs	r2, r2, #12
   128f8:	469c      	mov	ip, r3
   128fa:	4688      	mov	r8, r1
   128fc:	4c03      	ldr	r4, [pc, #12]	; (1290c <__aeabi_ddiv+0x664>)
   128fe:	e5a1      	b.n	12444 <__aeabi_ddiv+0x19c>
   12900:	000003ff 	.word	0x000003ff
   12904:	feffffff 	.word	0xfeffffff
   12908:	000007fe 	.word	0x000007fe
   1290c:	000007ff 	.word	0x000007ff

00012910 <__eqdf2>:
   12910:	b5f0      	push	{r4, r5, r6, r7, lr}
   12912:	464f      	mov	r7, r9
   12914:	4646      	mov	r6, r8
   12916:	46d6      	mov	lr, sl
   12918:	005c      	lsls	r4, r3, #1
   1291a:	b5c0      	push	{r6, r7, lr}
   1291c:	031f      	lsls	r7, r3, #12
   1291e:	0fdb      	lsrs	r3, r3, #31
   12920:	469a      	mov	sl, r3
   12922:	4b17      	ldr	r3, [pc, #92]	; (12980 <__eqdf2+0x70>)
   12924:	030e      	lsls	r6, r1, #12
   12926:	004d      	lsls	r5, r1, #1
   12928:	4684      	mov	ip, r0
   1292a:	4680      	mov	r8, r0
   1292c:	0b36      	lsrs	r6, r6, #12
   1292e:	0d6d      	lsrs	r5, r5, #21
   12930:	0fc9      	lsrs	r1, r1, #31
   12932:	4691      	mov	r9, r2
   12934:	0b3f      	lsrs	r7, r7, #12
   12936:	0d64      	lsrs	r4, r4, #21
   12938:	2001      	movs	r0, #1
   1293a:	429d      	cmp	r5, r3
   1293c:	d008      	beq.n	12950 <__eqdf2+0x40>
   1293e:	429c      	cmp	r4, r3
   12940:	d001      	beq.n	12946 <__eqdf2+0x36>
   12942:	42a5      	cmp	r5, r4
   12944:	d00b      	beq.n	1295e <__eqdf2+0x4e>
   12946:	bc1c      	pop	{r2, r3, r4}
   12948:	4690      	mov	r8, r2
   1294a:	4699      	mov	r9, r3
   1294c:	46a2      	mov	sl, r4
   1294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12950:	4663      	mov	r3, ip
   12952:	4333      	orrs	r3, r6
   12954:	d1f7      	bne.n	12946 <__eqdf2+0x36>
   12956:	42ac      	cmp	r4, r5
   12958:	d1f5      	bne.n	12946 <__eqdf2+0x36>
   1295a:	433a      	orrs	r2, r7
   1295c:	d1f3      	bne.n	12946 <__eqdf2+0x36>
   1295e:	2001      	movs	r0, #1
   12960:	42be      	cmp	r6, r7
   12962:	d1f0      	bne.n	12946 <__eqdf2+0x36>
   12964:	45c8      	cmp	r8, r9
   12966:	d1ee      	bne.n	12946 <__eqdf2+0x36>
   12968:	4551      	cmp	r1, sl
   1296a:	d007      	beq.n	1297c <__eqdf2+0x6c>
   1296c:	2d00      	cmp	r5, #0
   1296e:	d1ea      	bne.n	12946 <__eqdf2+0x36>
   12970:	4663      	mov	r3, ip
   12972:	431e      	orrs	r6, r3
   12974:	0030      	movs	r0, r6
   12976:	1e46      	subs	r6, r0, #1
   12978:	41b0      	sbcs	r0, r6
   1297a:	e7e4      	b.n	12946 <__eqdf2+0x36>
   1297c:	2000      	movs	r0, #0
   1297e:	e7e2      	b.n	12946 <__eqdf2+0x36>
   12980:	000007ff 	.word	0x000007ff

00012984 <__gedf2>:
   12984:	b5f0      	push	{r4, r5, r6, r7, lr}
   12986:	4645      	mov	r5, r8
   12988:	46de      	mov	lr, fp
   1298a:	4657      	mov	r7, sl
   1298c:	464e      	mov	r6, r9
   1298e:	b5e0      	push	{r5, r6, r7, lr}
   12990:	031f      	lsls	r7, r3, #12
   12992:	0b3d      	lsrs	r5, r7, #12
   12994:	4f2c      	ldr	r7, [pc, #176]	; (12a48 <__gedf2+0xc4>)
   12996:	030e      	lsls	r6, r1, #12
   12998:	004c      	lsls	r4, r1, #1
   1299a:	46ab      	mov	fp, r5
   1299c:	005d      	lsls	r5, r3, #1
   1299e:	4684      	mov	ip, r0
   129a0:	0b36      	lsrs	r6, r6, #12
   129a2:	0d64      	lsrs	r4, r4, #21
   129a4:	0fc9      	lsrs	r1, r1, #31
   129a6:	4690      	mov	r8, r2
   129a8:	0d6d      	lsrs	r5, r5, #21
   129aa:	0fdb      	lsrs	r3, r3, #31
   129ac:	42bc      	cmp	r4, r7
   129ae:	d02a      	beq.n	12a06 <__gedf2+0x82>
   129b0:	4f25      	ldr	r7, [pc, #148]	; (12a48 <__gedf2+0xc4>)
   129b2:	42bd      	cmp	r5, r7
   129b4:	d02d      	beq.n	12a12 <__gedf2+0x8e>
   129b6:	2c00      	cmp	r4, #0
   129b8:	d10f      	bne.n	129da <__gedf2+0x56>
   129ba:	4330      	orrs	r0, r6
   129bc:	0007      	movs	r7, r0
   129be:	4681      	mov	r9, r0
   129c0:	4278      	negs	r0, r7
   129c2:	4178      	adcs	r0, r7
   129c4:	b2c0      	uxtb	r0, r0
   129c6:	2d00      	cmp	r5, #0
   129c8:	d117      	bne.n	129fa <__gedf2+0x76>
   129ca:	465f      	mov	r7, fp
   129cc:	433a      	orrs	r2, r7
   129ce:	d114      	bne.n	129fa <__gedf2+0x76>
   129d0:	464b      	mov	r3, r9
   129d2:	2000      	movs	r0, #0
   129d4:	2b00      	cmp	r3, #0
   129d6:	d00a      	beq.n	129ee <__gedf2+0x6a>
   129d8:	e006      	b.n	129e8 <__gedf2+0x64>
   129da:	2d00      	cmp	r5, #0
   129dc:	d102      	bne.n	129e4 <__gedf2+0x60>
   129de:	4658      	mov	r0, fp
   129e0:	4302      	orrs	r2, r0
   129e2:	d001      	beq.n	129e8 <__gedf2+0x64>
   129e4:	4299      	cmp	r1, r3
   129e6:	d018      	beq.n	12a1a <__gedf2+0x96>
   129e8:	4248      	negs	r0, r1
   129ea:	2101      	movs	r1, #1
   129ec:	4308      	orrs	r0, r1
   129ee:	bc3c      	pop	{r2, r3, r4, r5}
   129f0:	4690      	mov	r8, r2
   129f2:	4699      	mov	r9, r3
   129f4:	46a2      	mov	sl, r4
   129f6:	46ab      	mov	fp, r5
   129f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129fa:	2800      	cmp	r0, #0
   129fc:	d0f2      	beq.n	129e4 <__gedf2+0x60>
   129fe:	2001      	movs	r0, #1
   12a00:	3b01      	subs	r3, #1
   12a02:	4318      	orrs	r0, r3
   12a04:	e7f3      	b.n	129ee <__gedf2+0x6a>
   12a06:	0037      	movs	r7, r6
   12a08:	4307      	orrs	r7, r0
   12a0a:	d0d1      	beq.n	129b0 <__gedf2+0x2c>
   12a0c:	2002      	movs	r0, #2
   12a0e:	4240      	negs	r0, r0
   12a10:	e7ed      	b.n	129ee <__gedf2+0x6a>
   12a12:	465f      	mov	r7, fp
   12a14:	4317      	orrs	r7, r2
   12a16:	d0ce      	beq.n	129b6 <__gedf2+0x32>
   12a18:	e7f8      	b.n	12a0c <__gedf2+0x88>
   12a1a:	42ac      	cmp	r4, r5
   12a1c:	dce4      	bgt.n	129e8 <__gedf2+0x64>
   12a1e:	da03      	bge.n	12a28 <__gedf2+0xa4>
   12a20:	1e48      	subs	r0, r1, #1
   12a22:	2101      	movs	r1, #1
   12a24:	4308      	orrs	r0, r1
   12a26:	e7e2      	b.n	129ee <__gedf2+0x6a>
   12a28:	455e      	cmp	r6, fp
   12a2a:	d8dd      	bhi.n	129e8 <__gedf2+0x64>
   12a2c:	d006      	beq.n	12a3c <__gedf2+0xb8>
   12a2e:	2000      	movs	r0, #0
   12a30:	455e      	cmp	r6, fp
   12a32:	d2dc      	bcs.n	129ee <__gedf2+0x6a>
   12a34:	2301      	movs	r3, #1
   12a36:	1e48      	subs	r0, r1, #1
   12a38:	4318      	orrs	r0, r3
   12a3a:	e7d8      	b.n	129ee <__gedf2+0x6a>
   12a3c:	45c4      	cmp	ip, r8
   12a3e:	d8d3      	bhi.n	129e8 <__gedf2+0x64>
   12a40:	2000      	movs	r0, #0
   12a42:	45c4      	cmp	ip, r8
   12a44:	d3f6      	bcc.n	12a34 <__gedf2+0xb0>
   12a46:	e7d2      	b.n	129ee <__gedf2+0x6a>
   12a48:	000007ff 	.word	0x000007ff

00012a4c <__ledf2>:
   12a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a4e:	464e      	mov	r6, r9
   12a50:	4645      	mov	r5, r8
   12a52:	46de      	mov	lr, fp
   12a54:	4657      	mov	r7, sl
   12a56:	005c      	lsls	r4, r3, #1
   12a58:	b5e0      	push	{r5, r6, r7, lr}
   12a5a:	031f      	lsls	r7, r3, #12
   12a5c:	0fdb      	lsrs	r3, r3, #31
   12a5e:	4699      	mov	r9, r3
   12a60:	4b2a      	ldr	r3, [pc, #168]	; (12b0c <__ledf2+0xc0>)
   12a62:	030e      	lsls	r6, r1, #12
   12a64:	004d      	lsls	r5, r1, #1
   12a66:	0fc9      	lsrs	r1, r1, #31
   12a68:	4684      	mov	ip, r0
   12a6a:	0b36      	lsrs	r6, r6, #12
   12a6c:	0d6d      	lsrs	r5, r5, #21
   12a6e:	468b      	mov	fp, r1
   12a70:	4690      	mov	r8, r2
   12a72:	0b3f      	lsrs	r7, r7, #12
   12a74:	0d64      	lsrs	r4, r4, #21
   12a76:	429d      	cmp	r5, r3
   12a78:	d020      	beq.n	12abc <__ledf2+0x70>
   12a7a:	4b24      	ldr	r3, [pc, #144]	; (12b0c <__ledf2+0xc0>)
   12a7c:	429c      	cmp	r4, r3
   12a7e:	d022      	beq.n	12ac6 <__ledf2+0x7a>
   12a80:	2d00      	cmp	r5, #0
   12a82:	d112      	bne.n	12aaa <__ledf2+0x5e>
   12a84:	4330      	orrs	r0, r6
   12a86:	4243      	negs	r3, r0
   12a88:	4143      	adcs	r3, r0
   12a8a:	b2db      	uxtb	r3, r3
   12a8c:	2c00      	cmp	r4, #0
   12a8e:	d01f      	beq.n	12ad0 <__ledf2+0x84>
   12a90:	2b00      	cmp	r3, #0
   12a92:	d00c      	beq.n	12aae <__ledf2+0x62>
   12a94:	464b      	mov	r3, r9
   12a96:	2001      	movs	r0, #1
   12a98:	3b01      	subs	r3, #1
   12a9a:	4303      	orrs	r3, r0
   12a9c:	0018      	movs	r0, r3
   12a9e:	bc3c      	pop	{r2, r3, r4, r5}
   12aa0:	4690      	mov	r8, r2
   12aa2:	4699      	mov	r9, r3
   12aa4:	46a2      	mov	sl, r4
   12aa6:	46ab      	mov	fp, r5
   12aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12aaa:	2c00      	cmp	r4, #0
   12aac:	d016      	beq.n	12adc <__ledf2+0x90>
   12aae:	45cb      	cmp	fp, r9
   12ab0:	d017      	beq.n	12ae2 <__ledf2+0x96>
   12ab2:	465b      	mov	r3, fp
   12ab4:	4259      	negs	r1, r3
   12ab6:	2301      	movs	r3, #1
   12ab8:	430b      	orrs	r3, r1
   12aba:	e7ef      	b.n	12a9c <__ledf2+0x50>
   12abc:	0031      	movs	r1, r6
   12abe:	2302      	movs	r3, #2
   12ac0:	4301      	orrs	r1, r0
   12ac2:	d1eb      	bne.n	12a9c <__ledf2+0x50>
   12ac4:	e7d9      	b.n	12a7a <__ledf2+0x2e>
   12ac6:	0039      	movs	r1, r7
   12ac8:	2302      	movs	r3, #2
   12aca:	4311      	orrs	r1, r2
   12acc:	d1e6      	bne.n	12a9c <__ledf2+0x50>
   12ace:	e7d7      	b.n	12a80 <__ledf2+0x34>
   12ad0:	433a      	orrs	r2, r7
   12ad2:	d1dd      	bne.n	12a90 <__ledf2+0x44>
   12ad4:	2300      	movs	r3, #0
   12ad6:	2800      	cmp	r0, #0
   12ad8:	d0e0      	beq.n	12a9c <__ledf2+0x50>
   12ada:	e7ea      	b.n	12ab2 <__ledf2+0x66>
   12adc:	433a      	orrs	r2, r7
   12ade:	d1e6      	bne.n	12aae <__ledf2+0x62>
   12ae0:	e7e7      	b.n	12ab2 <__ledf2+0x66>
   12ae2:	42a5      	cmp	r5, r4
   12ae4:	dce5      	bgt.n	12ab2 <__ledf2+0x66>
   12ae6:	db05      	blt.n	12af4 <__ledf2+0xa8>
   12ae8:	42be      	cmp	r6, r7
   12aea:	d8e2      	bhi.n	12ab2 <__ledf2+0x66>
   12aec:	d007      	beq.n	12afe <__ledf2+0xb2>
   12aee:	2300      	movs	r3, #0
   12af0:	42be      	cmp	r6, r7
   12af2:	d2d3      	bcs.n	12a9c <__ledf2+0x50>
   12af4:	4659      	mov	r1, fp
   12af6:	2301      	movs	r3, #1
   12af8:	3901      	subs	r1, #1
   12afa:	430b      	orrs	r3, r1
   12afc:	e7ce      	b.n	12a9c <__ledf2+0x50>
   12afe:	45c4      	cmp	ip, r8
   12b00:	d8d7      	bhi.n	12ab2 <__ledf2+0x66>
   12b02:	2300      	movs	r3, #0
   12b04:	45c4      	cmp	ip, r8
   12b06:	d3f5      	bcc.n	12af4 <__ledf2+0xa8>
   12b08:	e7c8      	b.n	12a9c <__ledf2+0x50>
   12b0a:	46c0      	nop			; (mov r8, r8)
   12b0c:	000007ff 	.word	0x000007ff

00012b10 <__aeabi_dmul>:
   12b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b12:	4657      	mov	r7, sl
   12b14:	4645      	mov	r5, r8
   12b16:	46de      	mov	lr, fp
   12b18:	464e      	mov	r6, r9
   12b1a:	b5e0      	push	{r5, r6, r7, lr}
   12b1c:	030c      	lsls	r4, r1, #12
   12b1e:	4698      	mov	r8, r3
   12b20:	004e      	lsls	r6, r1, #1
   12b22:	0b23      	lsrs	r3, r4, #12
   12b24:	b087      	sub	sp, #28
   12b26:	0007      	movs	r7, r0
   12b28:	4692      	mov	sl, r2
   12b2a:	469b      	mov	fp, r3
   12b2c:	0d76      	lsrs	r6, r6, #21
   12b2e:	0fcd      	lsrs	r5, r1, #31
   12b30:	2e00      	cmp	r6, #0
   12b32:	d06b      	beq.n	12c0c <__aeabi_dmul+0xfc>
   12b34:	4b6d      	ldr	r3, [pc, #436]	; (12cec <__aeabi_dmul+0x1dc>)
   12b36:	429e      	cmp	r6, r3
   12b38:	d035      	beq.n	12ba6 <__aeabi_dmul+0x96>
   12b3a:	2480      	movs	r4, #128	; 0x80
   12b3c:	465b      	mov	r3, fp
   12b3e:	0f42      	lsrs	r2, r0, #29
   12b40:	0424      	lsls	r4, r4, #16
   12b42:	00db      	lsls	r3, r3, #3
   12b44:	4314      	orrs	r4, r2
   12b46:	431c      	orrs	r4, r3
   12b48:	00c3      	lsls	r3, r0, #3
   12b4a:	4699      	mov	r9, r3
   12b4c:	4b68      	ldr	r3, [pc, #416]	; (12cf0 <__aeabi_dmul+0x1e0>)
   12b4e:	46a3      	mov	fp, r4
   12b50:	469c      	mov	ip, r3
   12b52:	2300      	movs	r3, #0
   12b54:	2700      	movs	r7, #0
   12b56:	4466      	add	r6, ip
   12b58:	9302      	str	r3, [sp, #8]
   12b5a:	4643      	mov	r3, r8
   12b5c:	031c      	lsls	r4, r3, #12
   12b5e:	005a      	lsls	r2, r3, #1
   12b60:	0fdb      	lsrs	r3, r3, #31
   12b62:	4650      	mov	r0, sl
   12b64:	0b24      	lsrs	r4, r4, #12
   12b66:	0d52      	lsrs	r2, r2, #21
   12b68:	4698      	mov	r8, r3
   12b6a:	d100      	bne.n	12b6e <__aeabi_dmul+0x5e>
   12b6c:	e076      	b.n	12c5c <__aeabi_dmul+0x14c>
   12b6e:	4b5f      	ldr	r3, [pc, #380]	; (12cec <__aeabi_dmul+0x1dc>)
   12b70:	429a      	cmp	r2, r3
   12b72:	d06d      	beq.n	12c50 <__aeabi_dmul+0x140>
   12b74:	2380      	movs	r3, #128	; 0x80
   12b76:	0f41      	lsrs	r1, r0, #29
   12b78:	041b      	lsls	r3, r3, #16
   12b7a:	430b      	orrs	r3, r1
   12b7c:	495c      	ldr	r1, [pc, #368]	; (12cf0 <__aeabi_dmul+0x1e0>)
   12b7e:	00e4      	lsls	r4, r4, #3
   12b80:	468c      	mov	ip, r1
   12b82:	431c      	orrs	r4, r3
   12b84:	00c3      	lsls	r3, r0, #3
   12b86:	2000      	movs	r0, #0
   12b88:	4462      	add	r2, ip
   12b8a:	4641      	mov	r1, r8
   12b8c:	18b6      	adds	r6, r6, r2
   12b8e:	4069      	eors	r1, r5
   12b90:	1c72      	adds	r2, r6, #1
   12b92:	9101      	str	r1, [sp, #4]
   12b94:	4694      	mov	ip, r2
   12b96:	4307      	orrs	r7, r0
   12b98:	2f0f      	cmp	r7, #15
   12b9a:	d900      	bls.n	12b9e <__aeabi_dmul+0x8e>
   12b9c:	e0b0      	b.n	12d00 <__aeabi_dmul+0x1f0>
   12b9e:	4a55      	ldr	r2, [pc, #340]	; (12cf4 <__aeabi_dmul+0x1e4>)
   12ba0:	00bf      	lsls	r7, r7, #2
   12ba2:	59d2      	ldr	r2, [r2, r7]
   12ba4:	4697      	mov	pc, r2
   12ba6:	465b      	mov	r3, fp
   12ba8:	4303      	orrs	r3, r0
   12baa:	4699      	mov	r9, r3
   12bac:	d000      	beq.n	12bb0 <__aeabi_dmul+0xa0>
   12bae:	e087      	b.n	12cc0 <__aeabi_dmul+0x1b0>
   12bb0:	2300      	movs	r3, #0
   12bb2:	469b      	mov	fp, r3
   12bb4:	3302      	adds	r3, #2
   12bb6:	2708      	movs	r7, #8
   12bb8:	9302      	str	r3, [sp, #8]
   12bba:	e7ce      	b.n	12b5a <__aeabi_dmul+0x4a>
   12bbc:	4642      	mov	r2, r8
   12bbe:	9201      	str	r2, [sp, #4]
   12bc0:	2802      	cmp	r0, #2
   12bc2:	d067      	beq.n	12c94 <__aeabi_dmul+0x184>
   12bc4:	2803      	cmp	r0, #3
   12bc6:	d100      	bne.n	12bca <__aeabi_dmul+0xba>
   12bc8:	e20e      	b.n	12fe8 <__aeabi_dmul+0x4d8>
   12bca:	2801      	cmp	r0, #1
   12bcc:	d000      	beq.n	12bd0 <__aeabi_dmul+0xc0>
   12bce:	e162      	b.n	12e96 <__aeabi_dmul+0x386>
   12bd0:	2300      	movs	r3, #0
   12bd2:	2400      	movs	r4, #0
   12bd4:	2200      	movs	r2, #0
   12bd6:	4699      	mov	r9, r3
   12bd8:	9901      	ldr	r1, [sp, #4]
   12bda:	4001      	ands	r1, r0
   12bdc:	b2cd      	uxtb	r5, r1
   12bde:	2100      	movs	r1, #0
   12be0:	0312      	lsls	r2, r2, #12
   12be2:	0d0b      	lsrs	r3, r1, #20
   12be4:	0b12      	lsrs	r2, r2, #12
   12be6:	051b      	lsls	r3, r3, #20
   12be8:	4313      	orrs	r3, r2
   12bea:	4a43      	ldr	r2, [pc, #268]	; (12cf8 <__aeabi_dmul+0x1e8>)
   12bec:	0524      	lsls	r4, r4, #20
   12bee:	4013      	ands	r3, r2
   12bf0:	431c      	orrs	r4, r3
   12bf2:	0064      	lsls	r4, r4, #1
   12bf4:	07ed      	lsls	r5, r5, #31
   12bf6:	0864      	lsrs	r4, r4, #1
   12bf8:	432c      	orrs	r4, r5
   12bfa:	4648      	mov	r0, r9
   12bfc:	0021      	movs	r1, r4
   12bfe:	b007      	add	sp, #28
   12c00:	bc3c      	pop	{r2, r3, r4, r5}
   12c02:	4690      	mov	r8, r2
   12c04:	4699      	mov	r9, r3
   12c06:	46a2      	mov	sl, r4
   12c08:	46ab      	mov	fp, r5
   12c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c0c:	4303      	orrs	r3, r0
   12c0e:	4699      	mov	r9, r3
   12c10:	d04f      	beq.n	12cb2 <__aeabi_dmul+0x1a2>
   12c12:	465b      	mov	r3, fp
   12c14:	2b00      	cmp	r3, #0
   12c16:	d100      	bne.n	12c1a <__aeabi_dmul+0x10a>
   12c18:	e189      	b.n	12f2e <__aeabi_dmul+0x41e>
   12c1a:	4658      	mov	r0, fp
   12c1c:	f000 fe2e 	bl	1387c <__clzsi2>
   12c20:	0003      	movs	r3, r0
   12c22:	3b0b      	subs	r3, #11
   12c24:	2b1c      	cmp	r3, #28
   12c26:	dd00      	ble.n	12c2a <__aeabi_dmul+0x11a>
   12c28:	e17a      	b.n	12f20 <__aeabi_dmul+0x410>
   12c2a:	221d      	movs	r2, #29
   12c2c:	1ad3      	subs	r3, r2, r3
   12c2e:	003a      	movs	r2, r7
   12c30:	0001      	movs	r1, r0
   12c32:	465c      	mov	r4, fp
   12c34:	40da      	lsrs	r2, r3
   12c36:	3908      	subs	r1, #8
   12c38:	408c      	lsls	r4, r1
   12c3a:	0013      	movs	r3, r2
   12c3c:	408f      	lsls	r7, r1
   12c3e:	4323      	orrs	r3, r4
   12c40:	469b      	mov	fp, r3
   12c42:	46b9      	mov	r9, r7
   12c44:	2300      	movs	r3, #0
   12c46:	4e2d      	ldr	r6, [pc, #180]	; (12cfc <__aeabi_dmul+0x1ec>)
   12c48:	2700      	movs	r7, #0
   12c4a:	1a36      	subs	r6, r6, r0
   12c4c:	9302      	str	r3, [sp, #8]
   12c4e:	e784      	b.n	12b5a <__aeabi_dmul+0x4a>
   12c50:	4653      	mov	r3, sl
   12c52:	4323      	orrs	r3, r4
   12c54:	d12a      	bne.n	12cac <__aeabi_dmul+0x19c>
   12c56:	2400      	movs	r4, #0
   12c58:	2002      	movs	r0, #2
   12c5a:	e796      	b.n	12b8a <__aeabi_dmul+0x7a>
   12c5c:	4653      	mov	r3, sl
   12c5e:	4323      	orrs	r3, r4
   12c60:	d020      	beq.n	12ca4 <__aeabi_dmul+0x194>
   12c62:	2c00      	cmp	r4, #0
   12c64:	d100      	bne.n	12c68 <__aeabi_dmul+0x158>
   12c66:	e157      	b.n	12f18 <__aeabi_dmul+0x408>
   12c68:	0020      	movs	r0, r4
   12c6a:	f000 fe07 	bl	1387c <__clzsi2>
   12c6e:	0003      	movs	r3, r0
   12c70:	3b0b      	subs	r3, #11
   12c72:	2b1c      	cmp	r3, #28
   12c74:	dd00      	ble.n	12c78 <__aeabi_dmul+0x168>
   12c76:	e149      	b.n	12f0c <__aeabi_dmul+0x3fc>
   12c78:	211d      	movs	r1, #29
   12c7a:	1acb      	subs	r3, r1, r3
   12c7c:	4651      	mov	r1, sl
   12c7e:	0002      	movs	r2, r0
   12c80:	40d9      	lsrs	r1, r3
   12c82:	4653      	mov	r3, sl
   12c84:	3a08      	subs	r2, #8
   12c86:	4094      	lsls	r4, r2
   12c88:	4093      	lsls	r3, r2
   12c8a:	430c      	orrs	r4, r1
   12c8c:	4a1b      	ldr	r2, [pc, #108]	; (12cfc <__aeabi_dmul+0x1ec>)
   12c8e:	1a12      	subs	r2, r2, r0
   12c90:	2000      	movs	r0, #0
   12c92:	e77a      	b.n	12b8a <__aeabi_dmul+0x7a>
   12c94:	2501      	movs	r5, #1
   12c96:	9b01      	ldr	r3, [sp, #4]
   12c98:	4c14      	ldr	r4, [pc, #80]	; (12cec <__aeabi_dmul+0x1dc>)
   12c9a:	401d      	ands	r5, r3
   12c9c:	2300      	movs	r3, #0
   12c9e:	2200      	movs	r2, #0
   12ca0:	4699      	mov	r9, r3
   12ca2:	e79c      	b.n	12bde <__aeabi_dmul+0xce>
   12ca4:	2400      	movs	r4, #0
   12ca6:	2200      	movs	r2, #0
   12ca8:	2001      	movs	r0, #1
   12caa:	e76e      	b.n	12b8a <__aeabi_dmul+0x7a>
   12cac:	4653      	mov	r3, sl
   12cae:	2003      	movs	r0, #3
   12cb0:	e76b      	b.n	12b8a <__aeabi_dmul+0x7a>
   12cb2:	2300      	movs	r3, #0
   12cb4:	469b      	mov	fp, r3
   12cb6:	3301      	adds	r3, #1
   12cb8:	2704      	movs	r7, #4
   12cba:	2600      	movs	r6, #0
   12cbc:	9302      	str	r3, [sp, #8]
   12cbe:	e74c      	b.n	12b5a <__aeabi_dmul+0x4a>
   12cc0:	2303      	movs	r3, #3
   12cc2:	4681      	mov	r9, r0
   12cc4:	270c      	movs	r7, #12
   12cc6:	9302      	str	r3, [sp, #8]
   12cc8:	e747      	b.n	12b5a <__aeabi_dmul+0x4a>
   12cca:	2280      	movs	r2, #128	; 0x80
   12ccc:	2300      	movs	r3, #0
   12cce:	2500      	movs	r5, #0
   12cd0:	0312      	lsls	r2, r2, #12
   12cd2:	4699      	mov	r9, r3
   12cd4:	4c05      	ldr	r4, [pc, #20]	; (12cec <__aeabi_dmul+0x1dc>)
   12cd6:	e782      	b.n	12bde <__aeabi_dmul+0xce>
   12cd8:	465c      	mov	r4, fp
   12cda:	464b      	mov	r3, r9
   12cdc:	9802      	ldr	r0, [sp, #8]
   12cde:	e76f      	b.n	12bc0 <__aeabi_dmul+0xb0>
   12ce0:	465c      	mov	r4, fp
   12ce2:	464b      	mov	r3, r9
   12ce4:	9501      	str	r5, [sp, #4]
   12ce6:	9802      	ldr	r0, [sp, #8]
   12ce8:	e76a      	b.n	12bc0 <__aeabi_dmul+0xb0>
   12cea:	46c0      	nop			; (mov r8, r8)
   12cec:	000007ff 	.word	0x000007ff
   12cf0:	fffffc01 	.word	0xfffffc01
   12cf4:	00015358 	.word	0x00015358
   12cf8:	800fffff 	.word	0x800fffff
   12cfc:	fffffc0d 	.word	0xfffffc0d
   12d00:	464a      	mov	r2, r9
   12d02:	4649      	mov	r1, r9
   12d04:	0c17      	lsrs	r7, r2, #16
   12d06:	0c1a      	lsrs	r2, r3, #16
   12d08:	041b      	lsls	r3, r3, #16
   12d0a:	0c1b      	lsrs	r3, r3, #16
   12d0c:	0408      	lsls	r0, r1, #16
   12d0e:	0019      	movs	r1, r3
   12d10:	0c00      	lsrs	r0, r0, #16
   12d12:	4341      	muls	r1, r0
   12d14:	0015      	movs	r5, r2
   12d16:	4688      	mov	r8, r1
   12d18:	0019      	movs	r1, r3
   12d1a:	437d      	muls	r5, r7
   12d1c:	4379      	muls	r1, r7
   12d1e:	9503      	str	r5, [sp, #12]
   12d20:	4689      	mov	r9, r1
   12d22:	0029      	movs	r1, r5
   12d24:	0015      	movs	r5, r2
   12d26:	4345      	muls	r5, r0
   12d28:	444d      	add	r5, r9
   12d2a:	9502      	str	r5, [sp, #8]
   12d2c:	4645      	mov	r5, r8
   12d2e:	0c2d      	lsrs	r5, r5, #16
   12d30:	46aa      	mov	sl, r5
   12d32:	9d02      	ldr	r5, [sp, #8]
   12d34:	4455      	add	r5, sl
   12d36:	45a9      	cmp	r9, r5
   12d38:	d906      	bls.n	12d48 <__aeabi_dmul+0x238>
   12d3a:	468a      	mov	sl, r1
   12d3c:	2180      	movs	r1, #128	; 0x80
   12d3e:	0249      	lsls	r1, r1, #9
   12d40:	4689      	mov	r9, r1
   12d42:	44ca      	add	sl, r9
   12d44:	4651      	mov	r1, sl
   12d46:	9103      	str	r1, [sp, #12]
   12d48:	0c29      	lsrs	r1, r5, #16
   12d4a:	9104      	str	r1, [sp, #16]
   12d4c:	4641      	mov	r1, r8
   12d4e:	0409      	lsls	r1, r1, #16
   12d50:	042d      	lsls	r5, r5, #16
   12d52:	0c09      	lsrs	r1, r1, #16
   12d54:	4688      	mov	r8, r1
   12d56:	0029      	movs	r1, r5
   12d58:	0c25      	lsrs	r5, r4, #16
   12d5a:	0424      	lsls	r4, r4, #16
   12d5c:	4441      	add	r1, r8
   12d5e:	0c24      	lsrs	r4, r4, #16
   12d60:	9105      	str	r1, [sp, #20]
   12d62:	0021      	movs	r1, r4
   12d64:	4341      	muls	r1, r0
   12d66:	4688      	mov	r8, r1
   12d68:	0021      	movs	r1, r4
   12d6a:	4379      	muls	r1, r7
   12d6c:	468a      	mov	sl, r1
   12d6e:	4368      	muls	r0, r5
   12d70:	4641      	mov	r1, r8
   12d72:	4450      	add	r0, sl
   12d74:	4681      	mov	r9, r0
   12d76:	0c08      	lsrs	r0, r1, #16
   12d78:	4448      	add	r0, r9
   12d7a:	436f      	muls	r7, r5
   12d7c:	4582      	cmp	sl, r0
   12d7e:	d903      	bls.n	12d88 <__aeabi_dmul+0x278>
   12d80:	2180      	movs	r1, #128	; 0x80
   12d82:	0249      	lsls	r1, r1, #9
   12d84:	4689      	mov	r9, r1
   12d86:	444f      	add	r7, r9
   12d88:	0c01      	lsrs	r1, r0, #16
   12d8a:	4689      	mov	r9, r1
   12d8c:	0039      	movs	r1, r7
   12d8e:	4449      	add	r1, r9
   12d90:	9102      	str	r1, [sp, #8]
   12d92:	4641      	mov	r1, r8
   12d94:	040f      	lsls	r7, r1, #16
   12d96:	9904      	ldr	r1, [sp, #16]
   12d98:	0c3f      	lsrs	r7, r7, #16
   12d9a:	4688      	mov	r8, r1
   12d9c:	0400      	lsls	r0, r0, #16
   12d9e:	19c0      	adds	r0, r0, r7
   12da0:	4480      	add	r8, r0
   12da2:	4641      	mov	r1, r8
   12da4:	9104      	str	r1, [sp, #16]
   12da6:	4659      	mov	r1, fp
   12da8:	0c0f      	lsrs	r7, r1, #16
   12daa:	0409      	lsls	r1, r1, #16
   12dac:	0c09      	lsrs	r1, r1, #16
   12dae:	4688      	mov	r8, r1
   12db0:	4359      	muls	r1, r3
   12db2:	468a      	mov	sl, r1
   12db4:	0039      	movs	r1, r7
   12db6:	4351      	muls	r1, r2
   12db8:	4689      	mov	r9, r1
   12dba:	4641      	mov	r1, r8
   12dbc:	434a      	muls	r2, r1
   12dbe:	4651      	mov	r1, sl
   12dc0:	0c09      	lsrs	r1, r1, #16
   12dc2:	468b      	mov	fp, r1
   12dc4:	437b      	muls	r3, r7
   12dc6:	18d2      	adds	r2, r2, r3
   12dc8:	445a      	add	r2, fp
   12dca:	4293      	cmp	r3, r2
   12dcc:	d903      	bls.n	12dd6 <__aeabi_dmul+0x2c6>
   12dce:	2380      	movs	r3, #128	; 0x80
   12dd0:	025b      	lsls	r3, r3, #9
   12dd2:	469b      	mov	fp, r3
   12dd4:	44d9      	add	r9, fp
   12dd6:	4651      	mov	r1, sl
   12dd8:	0409      	lsls	r1, r1, #16
   12dda:	0c09      	lsrs	r1, r1, #16
   12ddc:	468a      	mov	sl, r1
   12dde:	4641      	mov	r1, r8
   12de0:	4361      	muls	r1, r4
   12de2:	437c      	muls	r4, r7
   12de4:	0c13      	lsrs	r3, r2, #16
   12de6:	0412      	lsls	r2, r2, #16
   12de8:	444b      	add	r3, r9
   12dea:	4452      	add	r2, sl
   12dec:	46a1      	mov	r9, r4
   12dee:	468a      	mov	sl, r1
   12df0:	003c      	movs	r4, r7
   12df2:	4641      	mov	r1, r8
   12df4:	436c      	muls	r4, r5
   12df6:	434d      	muls	r5, r1
   12df8:	4651      	mov	r1, sl
   12dfa:	444d      	add	r5, r9
   12dfc:	0c0f      	lsrs	r7, r1, #16
   12dfe:	197d      	adds	r5, r7, r5
   12e00:	45a9      	cmp	r9, r5
   12e02:	d903      	bls.n	12e0c <__aeabi_dmul+0x2fc>
   12e04:	2180      	movs	r1, #128	; 0x80
   12e06:	0249      	lsls	r1, r1, #9
   12e08:	4688      	mov	r8, r1
   12e0a:	4444      	add	r4, r8
   12e0c:	9f04      	ldr	r7, [sp, #16]
   12e0e:	9903      	ldr	r1, [sp, #12]
   12e10:	46b8      	mov	r8, r7
   12e12:	4441      	add	r1, r8
   12e14:	468b      	mov	fp, r1
   12e16:	4583      	cmp	fp, r0
   12e18:	4180      	sbcs	r0, r0
   12e1a:	4241      	negs	r1, r0
   12e1c:	4688      	mov	r8, r1
   12e1e:	4651      	mov	r1, sl
   12e20:	0408      	lsls	r0, r1, #16
   12e22:	042f      	lsls	r7, r5, #16
   12e24:	0c00      	lsrs	r0, r0, #16
   12e26:	183f      	adds	r7, r7, r0
   12e28:	4658      	mov	r0, fp
   12e2a:	9902      	ldr	r1, [sp, #8]
   12e2c:	1810      	adds	r0, r2, r0
   12e2e:	4689      	mov	r9, r1
   12e30:	4290      	cmp	r0, r2
   12e32:	4192      	sbcs	r2, r2
   12e34:	444f      	add	r7, r9
   12e36:	46ba      	mov	sl, r7
   12e38:	4252      	negs	r2, r2
   12e3a:	4699      	mov	r9, r3
   12e3c:	4693      	mov	fp, r2
   12e3e:	44c2      	add	sl, r8
   12e40:	44d1      	add	r9, sl
   12e42:	44cb      	add	fp, r9
   12e44:	428f      	cmp	r7, r1
   12e46:	41bf      	sbcs	r7, r7
   12e48:	45c2      	cmp	sl, r8
   12e4a:	4189      	sbcs	r1, r1
   12e4c:	4599      	cmp	r9, r3
   12e4e:	419b      	sbcs	r3, r3
   12e50:	4593      	cmp	fp, r2
   12e52:	4192      	sbcs	r2, r2
   12e54:	427f      	negs	r7, r7
   12e56:	4249      	negs	r1, r1
   12e58:	0c2d      	lsrs	r5, r5, #16
   12e5a:	4252      	negs	r2, r2
   12e5c:	430f      	orrs	r7, r1
   12e5e:	425b      	negs	r3, r3
   12e60:	4313      	orrs	r3, r2
   12e62:	197f      	adds	r7, r7, r5
   12e64:	18ff      	adds	r7, r7, r3
   12e66:	465b      	mov	r3, fp
   12e68:	193c      	adds	r4, r7, r4
   12e6a:	0ddb      	lsrs	r3, r3, #23
   12e6c:	9a05      	ldr	r2, [sp, #20]
   12e6e:	0264      	lsls	r4, r4, #9
   12e70:	431c      	orrs	r4, r3
   12e72:	0243      	lsls	r3, r0, #9
   12e74:	4313      	orrs	r3, r2
   12e76:	1e5d      	subs	r5, r3, #1
   12e78:	41ab      	sbcs	r3, r5
   12e7a:	465a      	mov	r2, fp
   12e7c:	0dc0      	lsrs	r0, r0, #23
   12e7e:	4303      	orrs	r3, r0
   12e80:	0252      	lsls	r2, r2, #9
   12e82:	4313      	orrs	r3, r2
   12e84:	01e2      	lsls	r2, r4, #7
   12e86:	d556      	bpl.n	12f36 <__aeabi_dmul+0x426>
   12e88:	2001      	movs	r0, #1
   12e8a:	085a      	lsrs	r2, r3, #1
   12e8c:	4003      	ands	r3, r0
   12e8e:	4313      	orrs	r3, r2
   12e90:	07e2      	lsls	r2, r4, #31
   12e92:	4313      	orrs	r3, r2
   12e94:	0864      	lsrs	r4, r4, #1
   12e96:	485a      	ldr	r0, [pc, #360]	; (13000 <__aeabi_dmul+0x4f0>)
   12e98:	4460      	add	r0, ip
   12e9a:	2800      	cmp	r0, #0
   12e9c:	dd4d      	ble.n	12f3a <__aeabi_dmul+0x42a>
   12e9e:	075a      	lsls	r2, r3, #29
   12ea0:	d009      	beq.n	12eb6 <__aeabi_dmul+0x3a6>
   12ea2:	220f      	movs	r2, #15
   12ea4:	401a      	ands	r2, r3
   12ea6:	2a04      	cmp	r2, #4
   12ea8:	d005      	beq.n	12eb6 <__aeabi_dmul+0x3a6>
   12eaa:	1d1a      	adds	r2, r3, #4
   12eac:	429a      	cmp	r2, r3
   12eae:	419b      	sbcs	r3, r3
   12eb0:	425b      	negs	r3, r3
   12eb2:	18e4      	adds	r4, r4, r3
   12eb4:	0013      	movs	r3, r2
   12eb6:	01e2      	lsls	r2, r4, #7
   12eb8:	d504      	bpl.n	12ec4 <__aeabi_dmul+0x3b4>
   12eba:	2080      	movs	r0, #128	; 0x80
   12ebc:	4a51      	ldr	r2, [pc, #324]	; (13004 <__aeabi_dmul+0x4f4>)
   12ebe:	00c0      	lsls	r0, r0, #3
   12ec0:	4014      	ands	r4, r2
   12ec2:	4460      	add	r0, ip
   12ec4:	4a50      	ldr	r2, [pc, #320]	; (13008 <__aeabi_dmul+0x4f8>)
   12ec6:	4290      	cmp	r0, r2
   12ec8:	dd00      	ble.n	12ecc <__aeabi_dmul+0x3bc>
   12eca:	e6e3      	b.n	12c94 <__aeabi_dmul+0x184>
   12ecc:	2501      	movs	r5, #1
   12ece:	08db      	lsrs	r3, r3, #3
   12ed0:	0762      	lsls	r2, r4, #29
   12ed2:	431a      	orrs	r2, r3
   12ed4:	0264      	lsls	r4, r4, #9
   12ed6:	9b01      	ldr	r3, [sp, #4]
   12ed8:	4691      	mov	r9, r2
   12eda:	0b22      	lsrs	r2, r4, #12
   12edc:	0544      	lsls	r4, r0, #21
   12ede:	0d64      	lsrs	r4, r4, #21
   12ee0:	401d      	ands	r5, r3
   12ee2:	e67c      	b.n	12bde <__aeabi_dmul+0xce>
   12ee4:	2280      	movs	r2, #128	; 0x80
   12ee6:	4659      	mov	r1, fp
   12ee8:	0312      	lsls	r2, r2, #12
   12eea:	4211      	tst	r1, r2
   12eec:	d008      	beq.n	12f00 <__aeabi_dmul+0x3f0>
   12eee:	4214      	tst	r4, r2
   12ef0:	d106      	bne.n	12f00 <__aeabi_dmul+0x3f0>
   12ef2:	4322      	orrs	r2, r4
   12ef4:	0312      	lsls	r2, r2, #12
   12ef6:	0b12      	lsrs	r2, r2, #12
   12ef8:	4645      	mov	r5, r8
   12efa:	4699      	mov	r9, r3
   12efc:	4c43      	ldr	r4, [pc, #268]	; (1300c <__aeabi_dmul+0x4fc>)
   12efe:	e66e      	b.n	12bde <__aeabi_dmul+0xce>
   12f00:	465b      	mov	r3, fp
   12f02:	431a      	orrs	r2, r3
   12f04:	0312      	lsls	r2, r2, #12
   12f06:	0b12      	lsrs	r2, r2, #12
   12f08:	4c40      	ldr	r4, [pc, #256]	; (1300c <__aeabi_dmul+0x4fc>)
   12f0a:	e668      	b.n	12bde <__aeabi_dmul+0xce>
   12f0c:	0003      	movs	r3, r0
   12f0e:	4654      	mov	r4, sl
   12f10:	3b28      	subs	r3, #40	; 0x28
   12f12:	409c      	lsls	r4, r3
   12f14:	2300      	movs	r3, #0
   12f16:	e6b9      	b.n	12c8c <__aeabi_dmul+0x17c>
   12f18:	f000 fcb0 	bl	1387c <__clzsi2>
   12f1c:	3020      	adds	r0, #32
   12f1e:	e6a6      	b.n	12c6e <__aeabi_dmul+0x15e>
   12f20:	0003      	movs	r3, r0
   12f22:	3b28      	subs	r3, #40	; 0x28
   12f24:	409f      	lsls	r7, r3
   12f26:	2300      	movs	r3, #0
   12f28:	46bb      	mov	fp, r7
   12f2a:	4699      	mov	r9, r3
   12f2c:	e68a      	b.n	12c44 <__aeabi_dmul+0x134>
   12f2e:	f000 fca5 	bl	1387c <__clzsi2>
   12f32:	3020      	adds	r0, #32
   12f34:	e674      	b.n	12c20 <__aeabi_dmul+0x110>
   12f36:	46b4      	mov	ip, r6
   12f38:	e7ad      	b.n	12e96 <__aeabi_dmul+0x386>
   12f3a:	2501      	movs	r5, #1
   12f3c:	1a2a      	subs	r2, r5, r0
   12f3e:	2a38      	cmp	r2, #56	; 0x38
   12f40:	dd06      	ble.n	12f50 <__aeabi_dmul+0x440>
   12f42:	9b01      	ldr	r3, [sp, #4]
   12f44:	2400      	movs	r4, #0
   12f46:	401d      	ands	r5, r3
   12f48:	2300      	movs	r3, #0
   12f4a:	2200      	movs	r2, #0
   12f4c:	4699      	mov	r9, r3
   12f4e:	e646      	b.n	12bde <__aeabi_dmul+0xce>
   12f50:	2a1f      	cmp	r2, #31
   12f52:	dc21      	bgt.n	12f98 <__aeabi_dmul+0x488>
   12f54:	2520      	movs	r5, #32
   12f56:	0020      	movs	r0, r4
   12f58:	1aad      	subs	r5, r5, r2
   12f5a:	001e      	movs	r6, r3
   12f5c:	40ab      	lsls	r3, r5
   12f5e:	40a8      	lsls	r0, r5
   12f60:	40d6      	lsrs	r6, r2
   12f62:	1e5d      	subs	r5, r3, #1
   12f64:	41ab      	sbcs	r3, r5
   12f66:	4330      	orrs	r0, r6
   12f68:	4318      	orrs	r0, r3
   12f6a:	40d4      	lsrs	r4, r2
   12f6c:	0743      	lsls	r3, r0, #29
   12f6e:	d009      	beq.n	12f84 <__aeabi_dmul+0x474>
   12f70:	230f      	movs	r3, #15
   12f72:	4003      	ands	r3, r0
   12f74:	2b04      	cmp	r3, #4
   12f76:	d005      	beq.n	12f84 <__aeabi_dmul+0x474>
   12f78:	0003      	movs	r3, r0
   12f7a:	1d18      	adds	r0, r3, #4
   12f7c:	4298      	cmp	r0, r3
   12f7e:	419b      	sbcs	r3, r3
   12f80:	425b      	negs	r3, r3
   12f82:	18e4      	adds	r4, r4, r3
   12f84:	0223      	lsls	r3, r4, #8
   12f86:	d521      	bpl.n	12fcc <__aeabi_dmul+0x4bc>
   12f88:	2501      	movs	r5, #1
   12f8a:	9b01      	ldr	r3, [sp, #4]
   12f8c:	2401      	movs	r4, #1
   12f8e:	401d      	ands	r5, r3
   12f90:	2300      	movs	r3, #0
   12f92:	2200      	movs	r2, #0
   12f94:	4699      	mov	r9, r3
   12f96:	e622      	b.n	12bde <__aeabi_dmul+0xce>
   12f98:	251f      	movs	r5, #31
   12f9a:	0021      	movs	r1, r4
   12f9c:	426d      	negs	r5, r5
   12f9e:	1a28      	subs	r0, r5, r0
   12fa0:	40c1      	lsrs	r1, r0
   12fa2:	0008      	movs	r0, r1
   12fa4:	2a20      	cmp	r2, #32
   12fa6:	d01d      	beq.n	12fe4 <__aeabi_dmul+0x4d4>
   12fa8:	355f      	adds	r5, #95	; 0x5f
   12faa:	1aaa      	subs	r2, r5, r2
   12fac:	4094      	lsls	r4, r2
   12fae:	4323      	orrs	r3, r4
   12fb0:	1e5c      	subs	r4, r3, #1
   12fb2:	41a3      	sbcs	r3, r4
   12fb4:	2507      	movs	r5, #7
   12fb6:	4303      	orrs	r3, r0
   12fb8:	401d      	ands	r5, r3
   12fba:	2200      	movs	r2, #0
   12fbc:	2d00      	cmp	r5, #0
   12fbe:	d009      	beq.n	12fd4 <__aeabi_dmul+0x4c4>
   12fc0:	220f      	movs	r2, #15
   12fc2:	2400      	movs	r4, #0
   12fc4:	401a      	ands	r2, r3
   12fc6:	0018      	movs	r0, r3
   12fc8:	2a04      	cmp	r2, #4
   12fca:	d1d6      	bne.n	12f7a <__aeabi_dmul+0x46a>
   12fcc:	0003      	movs	r3, r0
   12fce:	0765      	lsls	r5, r4, #29
   12fd0:	0264      	lsls	r4, r4, #9
   12fd2:	0b22      	lsrs	r2, r4, #12
   12fd4:	08db      	lsrs	r3, r3, #3
   12fd6:	432b      	orrs	r3, r5
   12fd8:	2501      	movs	r5, #1
   12fda:	4699      	mov	r9, r3
   12fdc:	9b01      	ldr	r3, [sp, #4]
   12fde:	2400      	movs	r4, #0
   12fe0:	401d      	ands	r5, r3
   12fe2:	e5fc      	b.n	12bde <__aeabi_dmul+0xce>
   12fe4:	2400      	movs	r4, #0
   12fe6:	e7e2      	b.n	12fae <__aeabi_dmul+0x49e>
   12fe8:	2280      	movs	r2, #128	; 0x80
   12fea:	2501      	movs	r5, #1
   12fec:	0312      	lsls	r2, r2, #12
   12fee:	4322      	orrs	r2, r4
   12ff0:	9901      	ldr	r1, [sp, #4]
   12ff2:	0312      	lsls	r2, r2, #12
   12ff4:	0b12      	lsrs	r2, r2, #12
   12ff6:	400d      	ands	r5, r1
   12ff8:	4699      	mov	r9, r3
   12ffa:	4c04      	ldr	r4, [pc, #16]	; (1300c <__aeabi_dmul+0x4fc>)
   12ffc:	e5ef      	b.n	12bde <__aeabi_dmul+0xce>
   12ffe:	46c0      	nop			; (mov r8, r8)
   13000:	000003ff 	.word	0x000003ff
   13004:	feffffff 	.word	0xfeffffff
   13008:	000007fe 	.word	0x000007fe
   1300c:	000007ff 	.word	0x000007ff

00013010 <__aeabi_dsub>:
   13010:	b5f0      	push	{r4, r5, r6, r7, lr}
   13012:	4646      	mov	r6, r8
   13014:	46d6      	mov	lr, sl
   13016:	464f      	mov	r7, r9
   13018:	030c      	lsls	r4, r1, #12
   1301a:	b5c0      	push	{r6, r7, lr}
   1301c:	0fcd      	lsrs	r5, r1, #31
   1301e:	004e      	lsls	r6, r1, #1
   13020:	0a61      	lsrs	r1, r4, #9
   13022:	0f44      	lsrs	r4, r0, #29
   13024:	430c      	orrs	r4, r1
   13026:	00c1      	lsls	r1, r0, #3
   13028:	0058      	lsls	r0, r3, #1
   1302a:	0d40      	lsrs	r0, r0, #21
   1302c:	4684      	mov	ip, r0
   1302e:	468a      	mov	sl, r1
   13030:	000f      	movs	r7, r1
   13032:	0319      	lsls	r1, r3, #12
   13034:	0f50      	lsrs	r0, r2, #29
   13036:	0a49      	lsrs	r1, r1, #9
   13038:	4301      	orrs	r1, r0
   1303a:	48c6      	ldr	r0, [pc, #792]	; (13354 <__aeabi_dsub+0x344>)
   1303c:	0d76      	lsrs	r6, r6, #21
   1303e:	46a8      	mov	r8, r5
   13040:	0fdb      	lsrs	r3, r3, #31
   13042:	00d2      	lsls	r2, r2, #3
   13044:	4584      	cmp	ip, r0
   13046:	d100      	bne.n	1304a <__aeabi_dsub+0x3a>
   13048:	e0d8      	b.n	131fc <__aeabi_dsub+0x1ec>
   1304a:	2001      	movs	r0, #1
   1304c:	4043      	eors	r3, r0
   1304e:	42ab      	cmp	r3, r5
   13050:	d100      	bne.n	13054 <__aeabi_dsub+0x44>
   13052:	e0a6      	b.n	131a2 <__aeabi_dsub+0x192>
   13054:	4660      	mov	r0, ip
   13056:	1a35      	subs	r5, r6, r0
   13058:	2d00      	cmp	r5, #0
   1305a:	dc00      	bgt.n	1305e <__aeabi_dsub+0x4e>
   1305c:	e105      	b.n	1326a <__aeabi_dsub+0x25a>
   1305e:	2800      	cmp	r0, #0
   13060:	d110      	bne.n	13084 <__aeabi_dsub+0x74>
   13062:	000b      	movs	r3, r1
   13064:	4313      	orrs	r3, r2
   13066:	d100      	bne.n	1306a <__aeabi_dsub+0x5a>
   13068:	e0d7      	b.n	1321a <__aeabi_dsub+0x20a>
   1306a:	1e6b      	subs	r3, r5, #1
   1306c:	2b00      	cmp	r3, #0
   1306e:	d000      	beq.n	13072 <__aeabi_dsub+0x62>
   13070:	e14b      	b.n	1330a <__aeabi_dsub+0x2fa>
   13072:	4653      	mov	r3, sl
   13074:	1a9f      	subs	r7, r3, r2
   13076:	45ba      	cmp	sl, r7
   13078:	4180      	sbcs	r0, r0
   1307a:	1a64      	subs	r4, r4, r1
   1307c:	4240      	negs	r0, r0
   1307e:	1a24      	subs	r4, r4, r0
   13080:	2601      	movs	r6, #1
   13082:	e01e      	b.n	130c2 <__aeabi_dsub+0xb2>
   13084:	4bb3      	ldr	r3, [pc, #716]	; (13354 <__aeabi_dsub+0x344>)
   13086:	429e      	cmp	r6, r3
   13088:	d048      	beq.n	1311c <__aeabi_dsub+0x10c>
   1308a:	2380      	movs	r3, #128	; 0x80
   1308c:	041b      	lsls	r3, r3, #16
   1308e:	4319      	orrs	r1, r3
   13090:	2d38      	cmp	r5, #56	; 0x38
   13092:	dd00      	ble.n	13096 <__aeabi_dsub+0x86>
   13094:	e119      	b.n	132ca <__aeabi_dsub+0x2ba>
   13096:	2d1f      	cmp	r5, #31
   13098:	dd00      	ble.n	1309c <__aeabi_dsub+0x8c>
   1309a:	e14c      	b.n	13336 <__aeabi_dsub+0x326>
   1309c:	2320      	movs	r3, #32
   1309e:	000f      	movs	r7, r1
   130a0:	1b5b      	subs	r3, r3, r5
   130a2:	0010      	movs	r0, r2
   130a4:	409a      	lsls	r2, r3
   130a6:	409f      	lsls	r7, r3
   130a8:	40e8      	lsrs	r0, r5
   130aa:	1e53      	subs	r3, r2, #1
   130ac:	419a      	sbcs	r2, r3
   130ae:	40e9      	lsrs	r1, r5
   130b0:	4307      	orrs	r7, r0
   130b2:	4317      	orrs	r7, r2
   130b4:	4653      	mov	r3, sl
   130b6:	1bdf      	subs	r7, r3, r7
   130b8:	1a61      	subs	r1, r4, r1
   130ba:	45ba      	cmp	sl, r7
   130bc:	41a4      	sbcs	r4, r4
   130be:	4264      	negs	r4, r4
   130c0:	1b0c      	subs	r4, r1, r4
   130c2:	0223      	lsls	r3, r4, #8
   130c4:	d400      	bmi.n	130c8 <__aeabi_dsub+0xb8>
   130c6:	e0c5      	b.n	13254 <__aeabi_dsub+0x244>
   130c8:	0264      	lsls	r4, r4, #9
   130ca:	0a65      	lsrs	r5, r4, #9
   130cc:	2d00      	cmp	r5, #0
   130ce:	d100      	bne.n	130d2 <__aeabi_dsub+0xc2>
   130d0:	e0f6      	b.n	132c0 <__aeabi_dsub+0x2b0>
   130d2:	0028      	movs	r0, r5
   130d4:	f000 fbd2 	bl	1387c <__clzsi2>
   130d8:	0003      	movs	r3, r0
   130da:	3b08      	subs	r3, #8
   130dc:	2b1f      	cmp	r3, #31
   130de:	dd00      	ble.n	130e2 <__aeabi_dsub+0xd2>
   130e0:	e0e9      	b.n	132b6 <__aeabi_dsub+0x2a6>
   130e2:	2220      	movs	r2, #32
   130e4:	003c      	movs	r4, r7
   130e6:	1ad2      	subs	r2, r2, r3
   130e8:	409d      	lsls	r5, r3
   130ea:	40d4      	lsrs	r4, r2
   130ec:	409f      	lsls	r7, r3
   130ee:	4325      	orrs	r5, r4
   130f0:	429e      	cmp	r6, r3
   130f2:	dd00      	ble.n	130f6 <__aeabi_dsub+0xe6>
   130f4:	e0db      	b.n	132ae <__aeabi_dsub+0x29e>
   130f6:	1b9e      	subs	r6, r3, r6
   130f8:	1c73      	adds	r3, r6, #1
   130fa:	2b1f      	cmp	r3, #31
   130fc:	dd00      	ble.n	13100 <__aeabi_dsub+0xf0>
   130fe:	e10a      	b.n	13316 <__aeabi_dsub+0x306>
   13100:	2220      	movs	r2, #32
   13102:	0038      	movs	r0, r7
   13104:	1ad2      	subs	r2, r2, r3
   13106:	0029      	movs	r1, r5
   13108:	4097      	lsls	r7, r2
   1310a:	002c      	movs	r4, r5
   1310c:	4091      	lsls	r1, r2
   1310e:	40d8      	lsrs	r0, r3
   13110:	1e7a      	subs	r2, r7, #1
   13112:	4197      	sbcs	r7, r2
   13114:	40dc      	lsrs	r4, r3
   13116:	2600      	movs	r6, #0
   13118:	4301      	orrs	r1, r0
   1311a:	430f      	orrs	r7, r1
   1311c:	077b      	lsls	r3, r7, #29
   1311e:	d009      	beq.n	13134 <__aeabi_dsub+0x124>
   13120:	230f      	movs	r3, #15
   13122:	403b      	ands	r3, r7
   13124:	2b04      	cmp	r3, #4
   13126:	d005      	beq.n	13134 <__aeabi_dsub+0x124>
   13128:	1d3b      	adds	r3, r7, #4
   1312a:	42bb      	cmp	r3, r7
   1312c:	41bf      	sbcs	r7, r7
   1312e:	427f      	negs	r7, r7
   13130:	19e4      	adds	r4, r4, r7
   13132:	001f      	movs	r7, r3
   13134:	0223      	lsls	r3, r4, #8
   13136:	d525      	bpl.n	13184 <__aeabi_dsub+0x174>
   13138:	4b86      	ldr	r3, [pc, #536]	; (13354 <__aeabi_dsub+0x344>)
   1313a:	3601      	adds	r6, #1
   1313c:	429e      	cmp	r6, r3
   1313e:	d100      	bne.n	13142 <__aeabi_dsub+0x132>
   13140:	e0af      	b.n	132a2 <__aeabi_dsub+0x292>
   13142:	4b85      	ldr	r3, [pc, #532]	; (13358 <__aeabi_dsub+0x348>)
   13144:	2501      	movs	r5, #1
   13146:	401c      	ands	r4, r3
   13148:	4643      	mov	r3, r8
   1314a:	0762      	lsls	r2, r4, #29
   1314c:	08ff      	lsrs	r7, r7, #3
   1314e:	0264      	lsls	r4, r4, #9
   13150:	0576      	lsls	r6, r6, #21
   13152:	4317      	orrs	r7, r2
   13154:	0b24      	lsrs	r4, r4, #12
   13156:	0d76      	lsrs	r6, r6, #21
   13158:	401d      	ands	r5, r3
   1315a:	2100      	movs	r1, #0
   1315c:	0324      	lsls	r4, r4, #12
   1315e:	0b23      	lsrs	r3, r4, #12
   13160:	0d0c      	lsrs	r4, r1, #20
   13162:	4a7e      	ldr	r2, [pc, #504]	; (1335c <__aeabi_dsub+0x34c>)
   13164:	0524      	lsls	r4, r4, #20
   13166:	431c      	orrs	r4, r3
   13168:	4014      	ands	r4, r2
   1316a:	0533      	lsls	r3, r6, #20
   1316c:	4323      	orrs	r3, r4
   1316e:	005b      	lsls	r3, r3, #1
   13170:	07ed      	lsls	r5, r5, #31
   13172:	085b      	lsrs	r3, r3, #1
   13174:	432b      	orrs	r3, r5
   13176:	0038      	movs	r0, r7
   13178:	0019      	movs	r1, r3
   1317a:	bc1c      	pop	{r2, r3, r4}
   1317c:	4690      	mov	r8, r2
   1317e:	4699      	mov	r9, r3
   13180:	46a2      	mov	sl, r4
   13182:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13184:	2501      	movs	r5, #1
   13186:	4643      	mov	r3, r8
   13188:	0762      	lsls	r2, r4, #29
   1318a:	08ff      	lsrs	r7, r7, #3
   1318c:	4317      	orrs	r7, r2
   1318e:	08e4      	lsrs	r4, r4, #3
   13190:	401d      	ands	r5, r3
   13192:	4b70      	ldr	r3, [pc, #448]	; (13354 <__aeabi_dsub+0x344>)
   13194:	429e      	cmp	r6, r3
   13196:	d036      	beq.n	13206 <__aeabi_dsub+0x1f6>
   13198:	0324      	lsls	r4, r4, #12
   1319a:	0576      	lsls	r6, r6, #21
   1319c:	0b24      	lsrs	r4, r4, #12
   1319e:	0d76      	lsrs	r6, r6, #21
   131a0:	e7db      	b.n	1315a <__aeabi_dsub+0x14a>
   131a2:	4663      	mov	r3, ip
   131a4:	1af3      	subs	r3, r6, r3
   131a6:	2b00      	cmp	r3, #0
   131a8:	dc00      	bgt.n	131ac <__aeabi_dsub+0x19c>
   131aa:	e094      	b.n	132d6 <__aeabi_dsub+0x2c6>
   131ac:	4660      	mov	r0, ip
   131ae:	2800      	cmp	r0, #0
   131b0:	d035      	beq.n	1321e <__aeabi_dsub+0x20e>
   131b2:	4868      	ldr	r0, [pc, #416]	; (13354 <__aeabi_dsub+0x344>)
   131b4:	4286      	cmp	r6, r0
   131b6:	d0b1      	beq.n	1311c <__aeabi_dsub+0x10c>
   131b8:	2780      	movs	r7, #128	; 0x80
   131ba:	043f      	lsls	r7, r7, #16
   131bc:	4339      	orrs	r1, r7
   131be:	2b38      	cmp	r3, #56	; 0x38
   131c0:	dc00      	bgt.n	131c4 <__aeabi_dsub+0x1b4>
   131c2:	e0fd      	b.n	133c0 <__aeabi_dsub+0x3b0>
   131c4:	430a      	orrs	r2, r1
   131c6:	0017      	movs	r7, r2
   131c8:	2100      	movs	r1, #0
   131ca:	1e7a      	subs	r2, r7, #1
   131cc:	4197      	sbcs	r7, r2
   131ce:	4457      	add	r7, sl
   131d0:	4557      	cmp	r7, sl
   131d2:	4180      	sbcs	r0, r0
   131d4:	1909      	adds	r1, r1, r4
   131d6:	4244      	negs	r4, r0
   131d8:	190c      	adds	r4, r1, r4
   131da:	0223      	lsls	r3, r4, #8
   131dc:	d53a      	bpl.n	13254 <__aeabi_dsub+0x244>
   131de:	4b5d      	ldr	r3, [pc, #372]	; (13354 <__aeabi_dsub+0x344>)
   131e0:	3601      	adds	r6, #1
   131e2:	429e      	cmp	r6, r3
   131e4:	d100      	bne.n	131e8 <__aeabi_dsub+0x1d8>
   131e6:	e14b      	b.n	13480 <__aeabi_dsub+0x470>
   131e8:	2201      	movs	r2, #1
   131ea:	4b5b      	ldr	r3, [pc, #364]	; (13358 <__aeabi_dsub+0x348>)
   131ec:	401c      	ands	r4, r3
   131ee:	087b      	lsrs	r3, r7, #1
   131f0:	4017      	ands	r7, r2
   131f2:	431f      	orrs	r7, r3
   131f4:	07e2      	lsls	r2, r4, #31
   131f6:	4317      	orrs	r7, r2
   131f8:	0864      	lsrs	r4, r4, #1
   131fa:	e78f      	b.n	1311c <__aeabi_dsub+0x10c>
   131fc:	0008      	movs	r0, r1
   131fe:	4310      	orrs	r0, r2
   13200:	d000      	beq.n	13204 <__aeabi_dsub+0x1f4>
   13202:	e724      	b.n	1304e <__aeabi_dsub+0x3e>
   13204:	e721      	b.n	1304a <__aeabi_dsub+0x3a>
   13206:	0023      	movs	r3, r4
   13208:	433b      	orrs	r3, r7
   1320a:	d100      	bne.n	1320e <__aeabi_dsub+0x1fe>
   1320c:	e1b9      	b.n	13582 <__aeabi_dsub+0x572>
   1320e:	2280      	movs	r2, #128	; 0x80
   13210:	0312      	lsls	r2, r2, #12
   13212:	4314      	orrs	r4, r2
   13214:	0324      	lsls	r4, r4, #12
   13216:	0b24      	lsrs	r4, r4, #12
   13218:	e79f      	b.n	1315a <__aeabi_dsub+0x14a>
   1321a:	002e      	movs	r6, r5
   1321c:	e77e      	b.n	1311c <__aeabi_dsub+0x10c>
   1321e:	0008      	movs	r0, r1
   13220:	4310      	orrs	r0, r2
   13222:	d100      	bne.n	13226 <__aeabi_dsub+0x216>
   13224:	e0ca      	b.n	133bc <__aeabi_dsub+0x3ac>
   13226:	1e58      	subs	r0, r3, #1
   13228:	4684      	mov	ip, r0
   1322a:	2800      	cmp	r0, #0
   1322c:	d000      	beq.n	13230 <__aeabi_dsub+0x220>
   1322e:	e0e7      	b.n	13400 <__aeabi_dsub+0x3f0>
   13230:	4452      	add	r2, sl
   13232:	4552      	cmp	r2, sl
   13234:	4180      	sbcs	r0, r0
   13236:	1864      	adds	r4, r4, r1
   13238:	4240      	negs	r0, r0
   1323a:	1824      	adds	r4, r4, r0
   1323c:	0017      	movs	r7, r2
   1323e:	2601      	movs	r6, #1
   13240:	0223      	lsls	r3, r4, #8
   13242:	d507      	bpl.n	13254 <__aeabi_dsub+0x244>
   13244:	2602      	movs	r6, #2
   13246:	e7cf      	b.n	131e8 <__aeabi_dsub+0x1d8>
   13248:	4664      	mov	r4, ip
   1324a:	432c      	orrs	r4, r5
   1324c:	d100      	bne.n	13250 <__aeabi_dsub+0x240>
   1324e:	e1b3      	b.n	135b8 <__aeabi_dsub+0x5a8>
   13250:	002c      	movs	r4, r5
   13252:	4667      	mov	r7, ip
   13254:	077b      	lsls	r3, r7, #29
   13256:	d000      	beq.n	1325a <__aeabi_dsub+0x24a>
   13258:	e762      	b.n	13120 <__aeabi_dsub+0x110>
   1325a:	0763      	lsls	r3, r4, #29
   1325c:	08ff      	lsrs	r7, r7, #3
   1325e:	431f      	orrs	r7, r3
   13260:	2501      	movs	r5, #1
   13262:	4643      	mov	r3, r8
   13264:	08e4      	lsrs	r4, r4, #3
   13266:	401d      	ands	r5, r3
   13268:	e793      	b.n	13192 <__aeabi_dsub+0x182>
   1326a:	2d00      	cmp	r5, #0
   1326c:	d178      	bne.n	13360 <__aeabi_dsub+0x350>
   1326e:	1c75      	adds	r5, r6, #1
   13270:	056d      	lsls	r5, r5, #21
   13272:	0d6d      	lsrs	r5, r5, #21
   13274:	2d01      	cmp	r5, #1
   13276:	dc00      	bgt.n	1327a <__aeabi_dsub+0x26a>
   13278:	e0f2      	b.n	13460 <__aeabi_dsub+0x450>
   1327a:	4650      	mov	r0, sl
   1327c:	1a80      	subs	r0, r0, r2
   1327e:	4582      	cmp	sl, r0
   13280:	41bf      	sbcs	r7, r7
   13282:	1a65      	subs	r5, r4, r1
   13284:	427f      	negs	r7, r7
   13286:	1bed      	subs	r5, r5, r7
   13288:	4684      	mov	ip, r0
   1328a:	0228      	lsls	r0, r5, #8
   1328c:	d400      	bmi.n	13290 <__aeabi_dsub+0x280>
   1328e:	e08c      	b.n	133aa <__aeabi_dsub+0x39a>
   13290:	4650      	mov	r0, sl
   13292:	1a17      	subs	r7, r2, r0
   13294:	42ba      	cmp	r2, r7
   13296:	4192      	sbcs	r2, r2
   13298:	1b0c      	subs	r4, r1, r4
   1329a:	4255      	negs	r5, r2
   1329c:	1b65      	subs	r5, r4, r5
   1329e:	4698      	mov	r8, r3
   132a0:	e714      	b.n	130cc <__aeabi_dsub+0xbc>
   132a2:	2501      	movs	r5, #1
   132a4:	4643      	mov	r3, r8
   132a6:	2400      	movs	r4, #0
   132a8:	401d      	ands	r5, r3
   132aa:	2700      	movs	r7, #0
   132ac:	e755      	b.n	1315a <__aeabi_dsub+0x14a>
   132ae:	4c2a      	ldr	r4, [pc, #168]	; (13358 <__aeabi_dsub+0x348>)
   132b0:	1af6      	subs	r6, r6, r3
   132b2:	402c      	ands	r4, r5
   132b4:	e732      	b.n	1311c <__aeabi_dsub+0x10c>
   132b6:	003d      	movs	r5, r7
   132b8:	3828      	subs	r0, #40	; 0x28
   132ba:	4085      	lsls	r5, r0
   132bc:	2700      	movs	r7, #0
   132be:	e717      	b.n	130f0 <__aeabi_dsub+0xe0>
   132c0:	0038      	movs	r0, r7
   132c2:	f000 fadb 	bl	1387c <__clzsi2>
   132c6:	3020      	adds	r0, #32
   132c8:	e706      	b.n	130d8 <__aeabi_dsub+0xc8>
   132ca:	430a      	orrs	r2, r1
   132cc:	0017      	movs	r7, r2
   132ce:	2100      	movs	r1, #0
   132d0:	1e7a      	subs	r2, r7, #1
   132d2:	4197      	sbcs	r7, r2
   132d4:	e6ee      	b.n	130b4 <__aeabi_dsub+0xa4>
   132d6:	2b00      	cmp	r3, #0
   132d8:	d000      	beq.n	132dc <__aeabi_dsub+0x2cc>
   132da:	e0e5      	b.n	134a8 <__aeabi_dsub+0x498>
   132dc:	1c73      	adds	r3, r6, #1
   132de:	469c      	mov	ip, r3
   132e0:	055b      	lsls	r3, r3, #21
   132e2:	0d5b      	lsrs	r3, r3, #21
   132e4:	2b01      	cmp	r3, #1
   132e6:	dc00      	bgt.n	132ea <__aeabi_dsub+0x2da>
   132e8:	e09f      	b.n	1342a <__aeabi_dsub+0x41a>
   132ea:	4b1a      	ldr	r3, [pc, #104]	; (13354 <__aeabi_dsub+0x344>)
   132ec:	459c      	cmp	ip, r3
   132ee:	d100      	bne.n	132f2 <__aeabi_dsub+0x2e2>
   132f0:	e0c5      	b.n	1347e <__aeabi_dsub+0x46e>
   132f2:	4452      	add	r2, sl
   132f4:	4552      	cmp	r2, sl
   132f6:	4180      	sbcs	r0, r0
   132f8:	1864      	adds	r4, r4, r1
   132fa:	4240      	negs	r0, r0
   132fc:	1824      	adds	r4, r4, r0
   132fe:	07e7      	lsls	r7, r4, #31
   13300:	0852      	lsrs	r2, r2, #1
   13302:	4317      	orrs	r7, r2
   13304:	0864      	lsrs	r4, r4, #1
   13306:	4666      	mov	r6, ip
   13308:	e708      	b.n	1311c <__aeabi_dsub+0x10c>
   1330a:	4812      	ldr	r0, [pc, #72]	; (13354 <__aeabi_dsub+0x344>)
   1330c:	4285      	cmp	r5, r0
   1330e:	d100      	bne.n	13312 <__aeabi_dsub+0x302>
   13310:	e085      	b.n	1341e <__aeabi_dsub+0x40e>
   13312:	001d      	movs	r5, r3
   13314:	e6bc      	b.n	13090 <__aeabi_dsub+0x80>
   13316:	0029      	movs	r1, r5
   13318:	3e1f      	subs	r6, #31
   1331a:	40f1      	lsrs	r1, r6
   1331c:	2b20      	cmp	r3, #32
   1331e:	d100      	bne.n	13322 <__aeabi_dsub+0x312>
   13320:	e07f      	b.n	13422 <__aeabi_dsub+0x412>
   13322:	2240      	movs	r2, #64	; 0x40
   13324:	1ad3      	subs	r3, r2, r3
   13326:	409d      	lsls	r5, r3
   13328:	432f      	orrs	r7, r5
   1332a:	1e7d      	subs	r5, r7, #1
   1332c:	41af      	sbcs	r7, r5
   1332e:	2400      	movs	r4, #0
   13330:	430f      	orrs	r7, r1
   13332:	2600      	movs	r6, #0
   13334:	e78e      	b.n	13254 <__aeabi_dsub+0x244>
   13336:	002b      	movs	r3, r5
   13338:	000f      	movs	r7, r1
   1333a:	3b20      	subs	r3, #32
   1333c:	40df      	lsrs	r7, r3
   1333e:	2d20      	cmp	r5, #32
   13340:	d071      	beq.n	13426 <__aeabi_dsub+0x416>
   13342:	2340      	movs	r3, #64	; 0x40
   13344:	1b5d      	subs	r5, r3, r5
   13346:	40a9      	lsls	r1, r5
   13348:	430a      	orrs	r2, r1
   1334a:	1e51      	subs	r1, r2, #1
   1334c:	418a      	sbcs	r2, r1
   1334e:	2100      	movs	r1, #0
   13350:	4317      	orrs	r7, r2
   13352:	e6af      	b.n	130b4 <__aeabi_dsub+0xa4>
   13354:	000007ff 	.word	0x000007ff
   13358:	ff7fffff 	.word	0xff7fffff
   1335c:	800fffff 	.word	0x800fffff
   13360:	2e00      	cmp	r6, #0
   13362:	d03e      	beq.n	133e2 <__aeabi_dsub+0x3d2>
   13364:	4eb3      	ldr	r6, [pc, #716]	; (13634 <__aeabi_dsub+0x624>)
   13366:	45b4      	cmp	ip, r6
   13368:	d045      	beq.n	133f6 <__aeabi_dsub+0x3e6>
   1336a:	2680      	movs	r6, #128	; 0x80
   1336c:	0436      	lsls	r6, r6, #16
   1336e:	426d      	negs	r5, r5
   13370:	4334      	orrs	r4, r6
   13372:	2d38      	cmp	r5, #56	; 0x38
   13374:	dd00      	ble.n	13378 <__aeabi_dsub+0x368>
   13376:	e0a8      	b.n	134ca <__aeabi_dsub+0x4ba>
   13378:	2d1f      	cmp	r5, #31
   1337a:	dd00      	ble.n	1337e <__aeabi_dsub+0x36e>
   1337c:	e11f      	b.n	135be <__aeabi_dsub+0x5ae>
   1337e:	2620      	movs	r6, #32
   13380:	0027      	movs	r7, r4
   13382:	4650      	mov	r0, sl
   13384:	1b76      	subs	r6, r6, r5
   13386:	40b7      	lsls	r7, r6
   13388:	40e8      	lsrs	r0, r5
   1338a:	4307      	orrs	r7, r0
   1338c:	4650      	mov	r0, sl
   1338e:	40b0      	lsls	r0, r6
   13390:	1e46      	subs	r6, r0, #1
   13392:	41b0      	sbcs	r0, r6
   13394:	40ec      	lsrs	r4, r5
   13396:	4338      	orrs	r0, r7
   13398:	1a17      	subs	r7, r2, r0
   1339a:	42ba      	cmp	r2, r7
   1339c:	4192      	sbcs	r2, r2
   1339e:	1b0c      	subs	r4, r1, r4
   133a0:	4252      	negs	r2, r2
   133a2:	1aa4      	subs	r4, r4, r2
   133a4:	4666      	mov	r6, ip
   133a6:	4698      	mov	r8, r3
   133a8:	e68b      	b.n	130c2 <__aeabi_dsub+0xb2>
   133aa:	4664      	mov	r4, ip
   133ac:	4667      	mov	r7, ip
   133ae:	432c      	orrs	r4, r5
   133b0:	d000      	beq.n	133b4 <__aeabi_dsub+0x3a4>
   133b2:	e68b      	b.n	130cc <__aeabi_dsub+0xbc>
   133b4:	2500      	movs	r5, #0
   133b6:	2600      	movs	r6, #0
   133b8:	2700      	movs	r7, #0
   133ba:	e6ea      	b.n	13192 <__aeabi_dsub+0x182>
   133bc:	001e      	movs	r6, r3
   133be:	e6ad      	b.n	1311c <__aeabi_dsub+0x10c>
   133c0:	2b1f      	cmp	r3, #31
   133c2:	dc60      	bgt.n	13486 <__aeabi_dsub+0x476>
   133c4:	2720      	movs	r7, #32
   133c6:	1af8      	subs	r0, r7, r3
   133c8:	000f      	movs	r7, r1
   133ca:	4684      	mov	ip, r0
   133cc:	4087      	lsls	r7, r0
   133ce:	0010      	movs	r0, r2
   133d0:	40d8      	lsrs	r0, r3
   133d2:	4307      	orrs	r7, r0
   133d4:	4660      	mov	r0, ip
   133d6:	4082      	lsls	r2, r0
   133d8:	1e50      	subs	r0, r2, #1
   133da:	4182      	sbcs	r2, r0
   133dc:	40d9      	lsrs	r1, r3
   133de:	4317      	orrs	r7, r2
   133e0:	e6f5      	b.n	131ce <__aeabi_dsub+0x1be>
   133e2:	0026      	movs	r6, r4
   133e4:	4650      	mov	r0, sl
   133e6:	4306      	orrs	r6, r0
   133e8:	d005      	beq.n	133f6 <__aeabi_dsub+0x3e6>
   133ea:	43ed      	mvns	r5, r5
   133ec:	2d00      	cmp	r5, #0
   133ee:	d0d3      	beq.n	13398 <__aeabi_dsub+0x388>
   133f0:	4e90      	ldr	r6, [pc, #576]	; (13634 <__aeabi_dsub+0x624>)
   133f2:	45b4      	cmp	ip, r6
   133f4:	d1bd      	bne.n	13372 <__aeabi_dsub+0x362>
   133f6:	000c      	movs	r4, r1
   133f8:	0017      	movs	r7, r2
   133fa:	4666      	mov	r6, ip
   133fc:	4698      	mov	r8, r3
   133fe:	e68d      	b.n	1311c <__aeabi_dsub+0x10c>
   13400:	488c      	ldr	r0, [pc, #560]	; (13634 <__aeabi_dsub+0x624>)
   13402:	4283      	cmp	r3, r0
   13404:	d00b      	beq.n	1341e <__aeabi_dsub+0x40e>
   13406:	4663      	mov	r3, ip
   13408:	e6d9      	b.n	131be <__aeabi_dsub+0x1ae>
   1340a:	2d00      	cmp	r5, #0
   1340c:	d000      	beq.n	13410 <__aeabi_dsub+0x400>
   1340e:	e096      	b.n	1353e <__aeabi_dsub+0x52e>
   13410:	0008      	movs	r0, r1
   13412:	4310      	orrs	r0, r2
   13414:	d100      	bne.n	13418 <__aeabi_dsub+0x408>
   13416:	e0e2      	b.n	135de <__aeabi_dsub+0x5ce>
   13418:	000c      	movs	r4, r1
   1341a:	0017      	movs	r7, r2
   1341c:	4698      	mov	r8, r3
   1341e:	4e85      	ldr	r6, [pc, #532]	; (13634 <__aeabi_dsub+0x624>)
   13420:	e67c      	b.n	1311c <__aeabi_dsub+0x10c>
   13422:	2500      	movs	r5, #0
   13424:	e780      	b.n	13328 <__aeabi_dsub+0x318>
   13426:	2100      	movs	r1, #0
   13428:	e78e      	b.n	13348 <__aeabi_dsub+0x338>
   1342a:	0023      	movs	r3, r4
   1342c:	4650      	mov	r0, sl
   1342e:	4303      	orrs	r3, r0
   13430:	2e00      	cmp	r6, #0
   13432:	d000      	beq.n	13436 <__aeabi_dsub+0x426>
   13434:	e0a8      	b.n	13588 <__aeabi_dsub+0x578>
   13436:	2b00      	cmp	r3, #0
   13438:	d100      	bne.n	1343c <__aeabi_dsub+0x42c>
   1343a:	e0de      	b.n	135fa <__aeabi_dsub+0x5ea>
   1343c:	000b      	movs	r3, r1
   1343e:	4313      	orrs	r3, r2
   13440:	d100      	bne.n	13444 <__aeabi_dsub+0x434>
   13442:	e66b      	b.n	1311c <__aeabi_dsub+0x10c>
   13444:	4452      	add	r2, sl
   13446:	4552      	cmp	r2, sl
   13448:	4180      	sbcs	r0, r0
   1344a:	1864      	adds	r4, r4, r1
   1344c:	4240      	negs	r0, r0
   1344e:	1824      	adds	r4, r4, r0
   13450:	0017      	movs	r7, r2
   13452:	0223      	lsls	r3, r4, #8
   13454:	d400      	bmi.n	13458 <__aeabi_dsub+0x448>
   13456:	e6fd      	b.n	13254 <__aeabi_dsub+0x244>
   13458:	4b77      	ldr	r3, [pc, #476]	; (13638 <__aeabi_dsub+0x628>)
   1345a:	4666      	mov	r6, ip
   1345c:	401c      	ands	r4, r3
   1345e:	e65d      	b.n	1311c <__aeabi_dsub+0x10c>
   13460:	0025      	movs	r5, r4
   13462:	4650      	mov	r0, sl
   13464:	4305      	orrs	r5, r0
   13466:	2e00      	cmp	r6, #0
   13468:	d1cf      	bne.n	1340a <__aeabi_dsub+0x3fa>
   1346a:	2d00      	cmp	r5, #0
   1346c:	d14f      	bne.n	1350e <__aeabi_dsub+0x4fe>
   1346e:	000c      	movs	r4, r1
   13470:	4314      	orrs	r4, r2
   13472:	d100      	bne.n	13476 <__aeabi_dsub+0x466>
   13474:	e0a0      	b.n	135b8 <__aeabi_dsub+0x5a8>
   13476:	000c      	movs	r4, r1
   13478:	0017      	movs	r7, r2
   1347a:	4698      	mov	r8, r3
   1347c:	e64e      	b.n	1311c <__aeabi_dsub+0x10c>
   1347e:	4666      	mov	r6, ip
   13480:	2400      	movs	r4, #0
   13482:	2700      	movs	r7, #0
   13484:	e685      	b.n	13192 <__aeabi_dsub+0x182>
   13486:	001f      	movs	r7, r3
   13488:	0008      	movs	r0, r1
   1348a:	3f20      	subs	r7, #32
   1348c:	40f8      	lsrs	r0, r7
   1348e:	0007      	movs	r7, r0
   13490:	2b20      	cmp	r3, #32
   13492:	d100      	bne.n	13496 <__aeabi_dsub+0x486>
   13494:	e08e      	b.n	135b4 <__aeabi_dsub+0x5a4>
   13496:	2040      	movs	r0, #64	; 0x40
   13498:	1ac3      	subs	r3, r0, r3
   1349a:	4099      	lsls	r1, r3
   1349c:	430a      	orrs	r2, r1
   1349e:	1e51      	subs	r1, r2, #1
   134a0:	418a      	sbcs	r2, r1
   134a2:	2100      	movs	r1, #0
   134a4:	4317      	orrs	r7, r2
   134a6:	e692      	b.n	131ce <__aeabi_dsub+0x1be>
   134a8:	2e00      	cmp	r6, #0
   134aa:	d114      	bne.n	134d6 <__aeabi_dsub+0x4c6>
   134ac:	0026      	movs	r6, r4
   134ae:	4650      	mov	r0, sl
   134b0:	4306      	orrs	r6, r0
   134b2:	d062      	beq.n	1357a <__aeabi_dsub+0x56a>
   134b4:	43db      	mvns	r3, r3
   134b6:	2b00      	cmp	r3, #0
   134b8:	d15c      	bne.n	13574 <__aeabi_dsub+0x564>
   134ba:	1887      	adds	r7, r0, r2
   134bc:	4297      	cmp	r7, r2
   134be:	4192      	sbcs	r2, r2
   134c0:	1864      	adds	r4, r4, r1
   134c2:	4252      	negs	r2, r2
   134c4:	18a4      	adds	r4, r4, r2
   134c6:	4666      	mov	r6, ip
   134c8:	e687      	b.n	131da <__aeabi_dsub+0x1ca>
   134ca:	4650      	mov	r0, sl
   134cc:	4320      	orrs	r0, r4
   134ce:	1e44      	subs	r4, r0, #1
   134d0:	41a0      	sbcs	r0, r4
   134d2:	2400      	movs	r4, #0
   134d4:	e760      	b.n	13398 <__aeabi_dsub+0x388>
   134d6:	4e57      	ldr	r6, [pc, #348]	; (13634 <__aeabi_dsub+0x624>)
   134d8:	45b4      	cmp	ip, r6
   134da:	d04e      	beq.n	1357a <__aeabi_dsub+0x56a>
   134dc:	2680      	movs	r6, #128	; 0x80
   134de:	0436      	lsls	r6, r6, #16
   134e0:	425b      	negs	r3, r3
   134e2:	4334      	orrs	r4, r6
   134e4:	2b38      	cmp	r3, #56	; 0x38
   134e6:	dd00      	ble.n	134ea <__aeabi_dsub+0x4da>
   134e8:	e07f      	b.n	135ea <__aeabi_dsub+0x5da>
   134ea:	2b1f      	cmp	r3, #31
   134ec:	dd00      	ble.n	134f0 <__aeabi_dsub+0x4e0>
   134ee:	e08b      	b.n	13608 <__aeabi_dsub+0x5f8>
   134f0:	2620      	movs	r6, #32
   134f2:	0027      	movs	r7, r4
   134f4:	4650      	mov	r0, sl
   134f6:	1af6      	subs	r6, r6, r3
   134f8:	40b7      	lsls	r7, r6
   134fa:	40d8      	lsrs	r0, r3
   134fc:	4307      	orrs	r7, r0
   134fe:	4650      	mov	r0, sl
   13500:	40b0      	lsls	r0, r6
   13502:	1e46      	subs	r6, r0, #1
   13504:	41b0      	sbcs	r0, r6
   13506:	4307      	orrs	r7, r0
   13508:	40dc      	lsrs	r4, r3
   1350a:	18bf      	adds	r7, r7, r2
   1350c:	e7d6      	b.n	134bc <__aeabi_dsub+0x4ac>
   1350e:	000d      	movs	r5, r1
   13510:	4315      	orrs	r5, r2
   13512:	d100      	bne.n	13516 <__aeabi_dsub+0x506>
   13514:	e602      	b.n	1311c <__aeabi_dsub+0x10c>
   13516:	4650      	mov	r0, sl
   13518:	1a80      	subs	r0, r0, r2
   1351a:	4582      	cmp	sl, r0
   1351c:	41bf      	sbcs	r7, r7
   1351e:	1a65      	subs	r5, r4, r1
   13520:	427f      	negs	r7, r7
   13522:	1bed      	subs	r5, r5, r7
   13524:	4684      	mov	ip, r0
   13526:	0228      	lsls	r0, r5, #8
   13528:	d400      	bmi.n	1352c <__aeabi_dsub+0x51c>
   1352a:	e68d      	b.n	13248 <__aeabi_dsub+0x238>
   1352c:	4650      	mov	r0, sl
   1352e:	1a17      	subs	r7, r2, r0
   13530:	42ba      	cmp	r2, r7
   13532:	4192      	sbcs	r2, r2
   13534:	1b0c      	subs	r4, r1, r4
   13536:	4252      	negs	r2, r2
   13538:	1aa4      	subs	r4, r4, r2
   1353a:	4698      	mov	r8, r3
   1353c:	e5ee      	b.n	1311c <__aeabi_dsub+0x10c>
   1353e:	000d      	movs	r5, r1
   13540:	4315      	orrs	r5, r2
   13542:	d100      	bne.n	13546 <__aeabi_dsub+0x536>
   13544:	e76b      	b.n	1341e <__aeabi_dsub+0x40e>
   13546:	4650      	mov	r0, sl
   13548:	0767      	lsls	r7, r4, #29
   1354a:	08c0      	lsrs	r0, r0, #3
   1354c:	4307      	orrs	r7, r0
   1354e:	2080      	movs	r0, #128	; 0x80
   13550:	08e4      	lsrs	r4, r4, #3
   13552:	0300      	lsls	r0, r0, #12
   13554:	4204      	tst	r4, r0
   13556:	d007      	beq.n	13568 <__aeabi_dsub+0x558>
   13558:	08cd      	lsrs	r5, r1, #3
   1355a:	4205      	tst	r5, r0
   1355c:	d104      	bne.n	13568 <__aeabi_dsub+0x558>
   1355e:	002c      	movs	r4, r5
   13560:	4698      	mov	r8, r3
   13562:	08d7      	lsrs	r7, r2, #3
   13564:	0749      	lsls	r1, r1, #29
   13566:	430f      	orrs	r7, r1
   13568:	0f7b      	lsrs	r3, r7, #29
   1356a:	00e4      	lsls	r4, r4, #3
   1356c:	431c      	orrs	r4, r3
   1356e:	00ff      	lsls	r7, r7, #3
   13570:	4e30      	ldr	r6, [pc, #192]	; (13634 <__aeabi_dsub+0x624>)
   13572:	e5d3      	b.n	1311c <__aeabi_dsub+0x10c>
   13574:	4e2f      	ldr	r6, [pc, #188]	; (13634 <__aeabi_dsub+0x624>)
   13576:	45b4      	cmp	ip, r6
   13578:	d1b4      	bne.n	134e4 <__aeabi_dsub+0x4d4>
   1357a:	000c      	movs	r4, r1
   1357c:	0017      	movs	r7, r2
   1357e:	4666      	mov	r6, ip
   13580:	e5cc      	b.n	1311c <__aeabi_dsub+0x10c>
   13582:	2700      	movs	r7, #0
   13584:	2400      	movs	r4, #0
   13586:	e5e8      	b.n	1315a <__aeabi_dsub+0x14a>
   13588:	2b00      	cmp	r3, #0
   1358a:	d039      	beq.n	13600 <__aeabi_dsub+0x5f0>
   1358c:	000b      	movs	r3, r1
   1358e:	4313      	orrs	r3, r2
   13590:	d100      	bne.n	13594 <__aeabi_dsub+0x584>
   13592:	e744      	b.n	1341e <__aeabi_dsub+0x40e>
   13594:	08c0      	lsrs	r0, r0, #3
   13596:	0767      	lsls	r7, r4, #29
   13598:	4307      	orrs	r7, r0
   1359a:	2080      	movs	r0, #128	; 0x80
   1359c:	08e4      	lsrs	r4, r4, #3
   1359e:	0300      	lsls	r0, r0, #12
   135a0:	4204      	tst	r4, r0
   135a2:	d0e1      	beq.n	13568 <__aeabi_dsub+0x558>
   135a4:	08cb      	lsrs	r3, r1, #3
   135a6:	4203      	tst	r3, r0
   135a8:	d1de      	bne.n	13568 <__aeabi_dsub+0x558>
   135aa:	08d7      	lsrs	r7, r2, #3
   135ac:	0749      	lsls	r1, r1, #29
   135ae:	430f      	orrs	r7, r1
   135b0:	001c      	movs	r4, r3
   135b2:	e7d9      	b.n	13568 <__aeabi_dsub+0x558>
   135b4:	2100      	movs	r1, #0
   135b6:	e771      	b.n	1349c <__aeabi_dsub+0x48c>
   135b8:	2500      	movs	r5, #0
   135ba:	2700      	movs	r7, #0
   135bc:	e5e9      	b.n	13192 <__aeabi_dsub+0x182>
   135be:	002e      	movs	r6, r5
   135c0:	0027      	movs	r7, r4
   135c2:	3e20      	subs	r6, #32
   135c4:	40f7      	lsrs	r7, r6
   135c6:	2d20      	cmp	r5, #32
   135c8:	d02f      	beq.n	1362a <__aeabi_dsub+0x61a>
   135ca:	2640      	movs	r6, #64	; 0x40
   135cc:	1b75      	subs	r5, r6, r5
   135ce:	40ac      	lsls	r4, r5
   135d0:	4650      	mov	r0, sl
   135d2:	4320      	orrs	r0, r4
   135d4:	1e44      	subs	r4, r0, #1
   135d6:	41a0      	sbcs	r0, r4
   135d8:	2400      	movs	r4, #0
   135da:	4338      	orrs	r0, r7
   135dc:	e6dc      	b.n	13398 <__aeabi_dsub+0x388>
   135de:	2480      	movs	r4, #128	; 0x80
   135e0:	2500      	movs	r5, #0
   135e2:	0324      	lsls	r4, r4, #12
   135e4:	4e13      	ldr	r6, [pc, #76]	; (13634 <__aeabi_dsub+0x624>)
   135e6:	2700      	movs	r7, #0
   135e8:	e5d3      	b.n	13192 <__aeabi_dsub+0x182>
   135ea:	4650      	mov	r0, sl
   135ec:	4320      	orrs	r0, r4
   135ee:	0007      	movs	r7, r0
   135f0:	1e78      	subs	r0, r7, #1
   135f2:	4187      	sbcs	r7, r0
   135f4:	2400      	movs	r4, #0
   135f6:	18bf      	adds	r7, r7, r2
   135f8:	e760      	b.n	134bc <__aeabi_dsub+0x4ac>
   135fa:	000c      	movs	r4, r1
   135fc:	0017      	movs	r7, r2
   135fe:	e58d      	b.n	1311c <__aeabi_dsub+0x10c>
   13600:	000c      	movs	r4, r1
   13602:	0017      	movs	r7, r2
   13604:	4e0b      	ldr	r6, [pc, #44]	; (13634 <__aeabi_dsub+0x624>)
   13606:	e589      	b.n	1311c <__aeabi_dsub+0x10c>
   13608:	001e      	movs	r6, r3
   1360a:	0027      	movs	r7, r4
   1360c:	3e20      	subs	r6, #32
   1360e:	40f7      	lsrs	r7, r6
   13610:	2b20      	cmp	r3, #32
   13612:	d00c      	beq.n	1362e <__aeabi_dsub+0x61e>
   13614:	2640      	movs	r6, #64	; 0x40
   13616:	1af3      	subs	r3, r6, r3
   13618:	409c      	lsls	r4, r3
   1361a:	4650      	mov	r0, sl
   1361c:	4320      	orrs	r0, r4
   1361e:	1e44      	subs	r4, r0, #1
   13620:	41a0      	sbcs	r0, r4
   13622:	4307      	orrs	r7, r0
   13624:	2400      	movs	r4, #0
   13626:	18bf      	adds	r7, r7, r2
   13628:	e748      	b.n	134bc <__aeabi_dsub+0x4ac>
   1362a:	2400      	movs	r4, #0
   1362c:	e7d0      	b.n	135d0 <__aeabi_dsub+0x5c0>
   1362e:	2400      	movs	r4, #0
   13630:	e7f3      	b.n	1361a <__aeabi_dsub+0x60a>
   13632:	46c0      	nop			; (mov r8, r8)
   13634:	000007ff 	.word	0x000007ff
   13638:	ff7fffff 	.word	0xff7fffff

0001363c <__aeabi_dcmpun>:
   1363c:	b570      	push	{r4, r5, r6, lr}
   1363e:	4e0e      	ldr	r6, [pc, #56]	; (13678 <__aeabi_dcmpun+0x3c>)
   13640:	030d      	lsls	r5, r1, #12
   13642:	031c      	lsls	r4, r3, #12
   13644:	0049      	lsls	r1, r1, #1
   13646:	005b      	lsls	r3, r3, #1
   13648:	0b2d      	lsrs	r5, r5, #12
   1364a:	0d49      	lsrs	r1, r1, #21
   1364c:	0b24      	lsrs	r4, r4, #12
   1364e:	0d5b      	lsrs	r3, r3, #21
   13650:	42b1      	cmp	r1, r6
   13652:	d004      	beq.n	1365e <__aeabi_dcmpun+0x22>
   13654:	4908      	ldr	r1, [pc, #32]	; (13678 <__aeabi_dcmpun+0x3c>)
   13656:	2000      	movs	r0, #0
   13658:	428b      	cmp	r3, r1
   1365a:	d008      	beq.n	1366e <__aeabi_dcmpun+0x32>
   1365c:	bd70      	pop	{r4, r5, r6, pc}
   1365e:	4305      	orrs	r5, r0
   13660:	2001      	movs	r0, #1
   13662:	2d00      	cmp	r5, #0
   13664:	d1fa      	bne.n	1365c <__aeabi_dcmpun+0x20>
   13666:	4904      	ldr	r1, [pc, #16]	; (13678 <__aeabi_dcmpun+0x3c>)
   13668:	2000      	movs	r0, #0
   1366a:	428b      	cmp	r3, r1
   1366c:	d1f6      	bne.n	1365c <__aeabi_dcmpun+0x20>
   1366e:	4314      	orrs	r4, r2
   13670:	0020      	movs	r0, r4
   13672:	1e44      	subs	r4, r0, #1
   13674:	41a0      	sbcs	r0, r4
   13676:	e7f1      	b.n	1365c <__aeabi_dcmpun+0x20>
   13678:	000007ff 	.word	0x000007ff

0001367c <__aeabi_d2iz>:
   1367c:	b530      	push	{r4, r5, lr}
   1367e:	4d13      	ldr	r5, [pc, #76]	; (136cc <__aeabi_d2iz+0x50>)
   13680:	030a      	lsls	r2, r1, #12
   13682:	004b      	lsls	r3, r1, #1
   13684:	0b12      	lsrs	r2, r2, #12
   13686:	0d5b      	lsrs	r3, r3, #21
   13688:	0fc9      	lsrs	r1, r1, #31
   1368a:	2400      	movs	r4, #0
   1368c:	42ab      	cmp	r3, r5
   1368e:	dd10      	ble.n	136b2 <__aeabi_d2iz+0x36>
   13690:	4c0f      	ldr	r4, [pc, #60]	; (136d0 <__aeabi_d2iz+0x54>)
   13692:	42a3      	cmp	r3, r4
   13694:	dc0f      	bgt.n	136b6 <__aeabi_d2iz+0x3a>
   13696:	2480      	movs	r4, #128	; 0x80
   13698:	4d0e      	ldr	r5, [pc, #56]	; (136d4 <__aeabi_d2iz+0x58>)
   1369a:	0364      	lsls	r4, r4, #13
   1369c:	4322      	orrs	r2, r4
   1369e:	1aed      	subs	r5, r5, r3
   136a0:	2d1f      	cmp	r5, #31
   136a2:	dd0b      	ble.n	136bc <__aeabi_d2iz+0x40>
   136a4:	480c      	ldr	r0, [pc, #48]	; (136d8 <__aeabi_d2iz+0x5c>)
   136a6:	1ac3      	subs	r3, r0, r3
   136a8:	40da      	lsrs	r2, r3
   136aa:	4254      	negs	r4, r2
   136ac:	2900      	cmp	r1, #0
   136ae:	d100      	bne.n	136b2 <__aeabi_d2iz+0x36>
   136b0:	0014      	movs	r4, r2
   136b2:	0020      	movs	r0, r4
   136b4:	bd30      	pop	{r4, r5, pc}
   136b6:	4b09      	ldr	r3, [pc, #36]	; (136dc <__aeabi_d2iz+0x60>)
   136b8:	18cc      	adds	r4, r1, r3
   136ba:	e7fa      	b.n	136b2 <__aeabi_d2iz+0x36>
   136bc:	4c08      	ldr	r4, [pc, #32]	; (136e0 <__aeabi_d2iz+0x64>)
   136be:	40e8      	lsrs	r0, r5
   136c0:	46a4      	mov	ip, r4
   136c2:	4463      	add	r3, ip
   136c4:	409a      	lsls	r2, r3
   136c6:	4302      	orrs	r2, r0
   136c8:	e7ef      	b.n	136aa <__aeabi_d2iz+0x2e>
   136ca:	46c0      	nop			; (mov r8, r8)
   136cc:	000003fe 	.word	0x000003fe
   136d0:	0000041d 	.word	0x0000041d
   136d4:	00000433 	.word	0x00000433
   136d8:	00000413 	.word	0x00000413
   136dc:	7fffffff 	.word	0x7fffffff
   136e0:	fffffbed 	.word	0xfffffbed

000136e4 <__aeabi_i2d>:
   136e4:	b570      	push	{r4, r5, r6, lr}
   136e6:	2800      	cmp	r0, #0
   136e8:	d030      	beq.n	1374c <__aeabi_i2d+0x68>
   136ea:	17c3      	asrs	r3, r0, #31
   136ec:	18c4      	adds	r4, r0, r3
   136ee:	405c      	eors	r4, r3
   136f0:	0fc5      	lsrs	r5, r0, #31
   136f2:	0020      	movs	r0, r4
   136f4:	f000 f8c2 	bl	1387c <__clzsi2>
   136f8:	4b17      	ldr	r3, [pc, #92]	; (13758 <__aeabi_i2d+0x74>)
   136fa:	4a18      	ldr	r2, [pc, #96]	; (1375c <__aeabi_i2d+0x78>)
   136fc:	1a1b      	subs	r3, r3, r0
   136fe:	1ad2      	subs	r2, r2, r3
   13700:	2a1f      	cmp	r2, #31
   13702:	dd18      	ble.n	13736 <__aeabi_i2d+0x52>
   13704:	4a16      	ldr	r2, [pc, #88]	; (13760 <__aeabi_i2d+0x7c>)
   13706:	1ad2      	subs	r2, r2, r3
   13708:	4094      	lsls	r4, r2
   1370a:	2200      	movs	r2, #0
   1370c:	0324      	lsls	r4, r4, #12
   1370e:	055b      	lsls	r3, r3, #21
   13710:	0b24      	lsrs	r4, r4, #12
   13712:	0d5b      	lsrs	r3, r3, #21
   13714:	2100      	movs	r1, #0
   13716:	0010      	movs	r0, r2
   13718:	0324      	lsls	r4, r4, #12
   1371a:	0d0a      	lsrs	r2, r1, #20
   1371c:	0b24      	lsrs	r4, r4, #12
   1371e:	0512      	lsls	r2, r2, #20
   13720:	4322      	orrs	r2, r4
   13722:	4c10      	ldr	r4, [pc, #64]	; (13764 <__aeabi_i2d+0x80>)
   13724:	051b      	lsls	r3, r3, #20
   13726:	4022      	ands	r2, r4
   13728:	4313      	orrs	r3, r2
   1372a:	005b      	lsls	r3, r3, #1
   1372c:	07ed      	lsls	r5, r5, #31
   1372e:	085b      	lsrs	r3, r3, #1
   13730:	432b      	orrs	r3, r5
   13732:	0019      	movs	r1, r3
   13734:	bd70      	pop	{r4, r5, r6, pc}
   13736:	0021      	movs	r1, r4
   13738:	4091      	lsls	r1, r2
   1373a:	000a      	movs	r2, r1
   1373c:	210b      	movs	r1, #11
   1373e:	1a08      	subs	r0, r1, r0
   13740:	40c4      	lsrs	r4, r0
   13742:	055b      	lsls	r3, r3, #21
   13744:	0324      	lsls	r4, r4, #12
   13746:	0b24      	lsrs	r4, r4, #12
   13748:	0d5b      	lsrs	r3, r3, #21
   1374a:	e7e3      	b.n	13714 <__aeabi_i2d+0x30>
   1374c:	2500      	movs	r5, #0
   1374e:	2300      	movs	r3, #0
   13750:	2400      	movs	r4, #0
   13752:	2200      	movs	r2, #0
   13754:	e7de      	b.n	13714 <__aeabi_i2d+0x30>
   13756:	46c0      	nop			; (mov r8, r8)
   13758:	0000041e 	.word	0x0000041e
   1375c:	00000433 	.word	0x00000433
   13760:	00000413 	.word	0x00000413
   13764:	800fffff 	.word	0x800fffff

00013768 <__aeabi_ui2d>:
   13768:	b510      	push	{r4, lr}
   1376a:	1e04      	subs	r4, r0, #0
   1376c:	d028      	beq.n	137c0 <__aeabi_ui2d+0x58>
   1376e:	f000 f885 	bl	1387c <__clzsi2>
   13772:	4b15      	ldr	r3, [pc, #84]	; (137c8 <__aeabi_ui2d+0x60>)
   13774:	4a15      	ldr	r2, [pc, #84]	; (137cc <__aeabi_ui2d+0x64>)
   13776:	1a1b      	subs	r3, r3, r0
   13778:	1ad2      	subs	r2, r2, r3
   1377a:	2a1f      	cmp	r2, #31
   1377c:	dd15      	ble.n	137aa <__aeabi_ui2d+0x42>
   1377e:	4a14      	ldr	r2, [pc, #80]	; (137d0 <__aeabi_ui2d+0x68>)
   13780:	1ad2      	subs	r2, r2, r3
   13782:	4094      	lsls	r4, r2
   13784:	2200      	movs	r2, #0
   13786:	0324      	lsls	r4, r4, #12
   13788:	055b      	lsls	r3, r3, #21
   1378a:	0b24      	lsrs	r4, r4, #12
   1378c:	0d5b      	lsrs	r3, r3, #21
   1378e:	2100      	movs	r1, #0
   13790:	0010      	movs	r0, r2
   13792:	0324      	lsls	r4, r4, #12
   13794:	0d0a      	lsrs	r2, r1, #20
   13796:	0b24      	lsrs	r4, r4, #12
   13798:	0512      	lsls	r2, r2, #20
   1379a:	4322      	orrs	r2, r4
   1379c:	4c0d      	ldr	r4, [pc, #52]	; (137d4 <__aeabi_ui2d+0x6c>)
   1379e:	051b      	lsls	r3, r3, #20
   137a0:	4022      	ands	r2, r4
   137a2:	4313      	orrs	r3, r2
   137a4:	005b      	lsls	r3, r3, #1
   137a6:	0859      	lsrs	r1, r3, #1
   137a8:	bd10      	pop	{r4, pc}
   137aa:	0021      	movs	r1, r4
   137ac:	4091      	lsls	r1, r2
   137ae:	000a      	movs	r2, r1
   137b0:	210b      	movs	r1, #11
   137b2:	1a08      	subs	r0, r1, r0
   137b4:	40c4      	lsrs	r4, r0
   137b6:	055b      	lsls	r3, r3, #21
   137b8:	0324      	lsls	r4, r4, #12
   137ba:	0b24      	lsrs	r4, r4, #12
   137bc:	0d5b      	lsrs	r3, r3, #21
   137be:	e7e6      	b.n	1378e <__aeabi_ui2d+0x26>
   137c0:	2300      	movs	r3, #0
   137c2:	2400      	movs	r4, #0
   137c4:	2200      	movs	r2, #0
   137c6:	e7e2      	b.n	1378e <__aeabi_ui2d+0x26>
   137c8:	0000041e 	.word	0x0000041e
   137cc:	00000433 	.word	0x00000433
   137d0:	00000413 	.word	0x00000413
   137d4:	800fffff 	.word	0x800fffff

000137d8 <__aeabi_f2d>:
   137d8:	0041      	lsls	r1, r0, #1
   137da:	0e09      	lsrs	r1, r1, #24
   137dc:	1c4b      	adds	r3, r1, #1
   137de:	b570      	push	{r4, r5, r6, lr}
   137e0:	b2db      	uxtb	r3, r3
   137e2:	0246      	lsls	r6, r0, #9
   137e4:	0a75      	lsrs	r5, r6, #9
   137e6:	0fc4      	lsrs	r4, r0, #31
   137e8:	2b01      	cmp	r3, #1
   137ea:	dd14      	ble.n	13816 <__aeabi_f2d+0x3e>
   137ec:	23e0      	movs	r3, #224	; 0xe0
   137ee:	009b      	lsls	r3, r3, #2
   137f0:	076d      	lsls	r5, r5, #29
   137f2:	0b36      	lsrs	r6, r6, #12
   137f4:	18cb      	adds	r3, r1, r3
   137f6:	2100      	movs	r1, #0
   137f8:	0d0a      	lsrs	r2, r1, #20
   137fa:	0028      	movs	r0, r5
   137fc:	0512      	lsls	r2, r2, #20
   137fe:	4d1c      	ldr	r5, [pc, #112]	; (13870 <__aeabi_f2d+0x98>)
   13800:	4332      	orrs	r2, r6
   13802:	055b      	lsls	r3, r3, #21
   13804:	402a      	ands	r2, r5
   13806:	085b      	lsrs	r3, r3, #1
   13808:	4313      	orrs	r3, r2
   1380a:	005b      	lsls	r3, r3, #1
   1380c:	07e4      	lsls	r4, r4, #31
   1380e:	085b      	lsrs	r3, r3, #1
   13810:	4323      	orrs	r3, r4
   13812:	0019      	movs	r1, r3
   13814:	bd70      	pop	{r4, r5, r6, pc}
   13816:	2900      	cmp	r1, #0
   13818:	d114      	bne.n	13844 <__aeabi_f2d+0x6c>
   1381a:	2d00      	cmp	r5, #0
   1381c:	d01e      	beq.n	1385c <__aeabi_f2d+0x84>
   1381e:	0028      	movs	r0, r5
   13820:	f000 f82c 	bl	1387c <__clzsi2>
   13824:	280a      	cmp	r0, #10
   13826:	dc1c      	bgt.n	13862 <__aeabi_f2d+0x8a>
   13828:	230b      	movs	r3, #11
   1382a:	002a      	movs	r2, r5
   1382c:	1a1b      	subs	r3, r3, r0
   1382e:	40da      	lsrs	r2, r3
   13830:	0003      	movs	r3, r0
   13832:	3315      	adds	r3, #21
   13834:	409d      	lsls	r5, r3
   13836:	4b0f      	ldr	r3, [pc, #60]	; (13874 <__aeabi_f2d+0x9c>)
   13838:	0312      	lsls	r2, r2, #12
   1383a:	1a1b      	subs	r3, r3, r0
   1383c:	055b      	lsls	r3, r3, #21
   1383e:	0b16      	lsrs	r6, r2, #12
   13840:	0d5b      	lsrs	r3, r3, #21
   13842:	e7d8      	b.n	137f6 <__aeabi_f2d+0x1e>
   13844:	2d00      	cmp	r5, #0
   13846:	d006      	beq.n	13856 <__aeabi_f2d+0x7e>
   13848:	0b32      	lsrs	r2, r6, #12
   1384a:	2680      	movs	r6, #128	; 0x80
   1384c:	0336      	lsls	r6, r6, #12
   1384e:	076d      	lsls	r5, r5, #29
   13850:	4316      	orrs	r6, r2
   13852:	4b09      	ldr	r3, [pc, #36]	; (13878 <__aeabi_f2d+0xa0>)
   13854:	e7cf      	b.n	137f6 <__aeabi_f2d+0x1e>
   13856:	4b08      	ldr	r3, [pc, #32]	; (13878 <__aeabi_f2d+0xa0>)
   13858:	2600      	movs	r6, #0
   1385a:	e7cc      	b.n	137f6 <__aeabi_f2d+0x1e>
   1385c:	2300      	movs	r3, #0
   1385e:	2600      	movs	r6, #0
   13860:	e7c9      	b.n	137f6 <__aeabi_f2d+0x1e>
   13862:	0003      	movs	r3, r0
   13864:	002a      	movs	r2, r5
   13866:	3b0b      	subs	r3, #11
   13868:	409a      	lsls	r2, r3
   1386a:	2500      	movs	r5, #0
   1386c:	e7e3      	b.n	13836 <__aeabi_f2d+0x5e>
   1386e:	46c0      	nop			; (mov r8, r8)
   13870:	800fffff 	.word	0x800fffff
   13874:	00000389 	.word	0x00000389
   13878:	000007ff 	.word	0x000007ff

0001387c <__clzsi2>:
   1387c:	211c      	movs	r1, #28
   1387e:	2301      	movs	r3, #1
   13880:	041b      	lsls	r3, r3, #16
   13882:	4298      	cmp	r0, r3
   13884:	d301      	bcc.n	1388a <__clzsi2+0xe>
   13886:	0c00      	lsrs	r0, r0, #16
   13888:	3910      	subs	r1, #16
   1388a:	0a1b      	lsrs	r3, r3, #8
   1388c:	4298      	cmp	r0, r3
   1388e:	d301      	bcc.n	13894 <__clzsi2+0x18>
   13890:	0a00      	lsrs	r0, r0, #8
   13892:	3908      	subs	r1, #8
   13894:	091b      	lsrs	r3, r3, #4
   13896:	4298      	cmp	r0, r3
   13898:	d301      	bcc.n	1389e <__clzsi2+0x22>
   1389a:	0900      	lsrs	r0, r0, #4
   1389c:	3904      	subs	r1, #4
   1389e:	a202      	add	r2, pc, #8	; (adr r2, 138a8 <__clzsi2+0x2c>)
   138a0:	5c10      	ldrb	r0, [r2, r0]
   138a2:	1840      	adds	r0, r0, r1
   138a4:	4770      	bx	lr
   138a6:	46c0      	nop			; (mov r8, r8)
   138a8:	02020304 	.word	0x02020304
   138ac:	01010101 	.word	0x01010101
	...
   138b8:	50504128 	.word	0x50504128
   138bc:	52452829 	.word	0x52452829
   138c0:	255b2952 	.word	0x255b2952
   138c4:	255b5d73 	.word	0x255b5d73
   138c8:	00005d64 	.word	0x00005d64
   138cc:	61766e69 	.word	0x61766e69
   138d0:	6564696c 	.word	0x6564696c
   138d4:	636f6920 	.word	0x636f6920
   138d8:	6320746c 	.word	0x6320746c
   138dc:	0000646d 	.word	0x0000646d

000138e0 <__FUNCTION__.14945>:
   138e0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   138f0:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   13900:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   13910:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13920:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   13930:	74207075 63206568 00706968 66696828     up the chip.(hif
   13940:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   13950:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   13960:	66696828 64612029 73657264 75622073     (hif) address bu
   13970:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   13980:	70757272 20646574 6b636170 53207465     rrupted packet S
   13990:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   139a0:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   139b0:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   139c0:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   139d0:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   139e0:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   139f0:	73696765 65726574 00000064 2061744f     egistered...Ota 
   13a00:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   13a10:	69676572 72657473 00006465 70797243     registered..Cryp
   13a20:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   13a30:	7220746f 73696765 65726574 00000064     ot registered...
   13a40:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   13a50:	6f6e2073 65722074 74736967 64657265     s not registered
   13a60:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   13a70:	72672064 2070756f 00004449 66696828     d group ID..(hif
   13a80:	6f682029 61207473 64207070 276e6469     ) host app didn'
   13a90:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   13aa0:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   13ab0:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   13ac0:	61462029 2065736c 65746e69 70757272     ) False interrup
   13ad0:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   13ae0:	74206c69 6552206f 69206461 7265746e     il to Read inter
   13af0:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   13b00:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   13b10:	746e6920 75727265 25207470 72742064      interrupt %d tr
   13b20:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   13b30:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   13b40:	72612064 656d7567 0000746e 20505041     d argument..APP 
   13b50:	75716552 65747365 69532064 6920657a     Requested Size i
   13b60:	616c2073 72656772 61687420 6874206e     s larger than th
   13b70:	65722065 65766963 75622064 72656666     e recived buffer
   13b80:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   13b90:	00000000 20505041 75716552 65747365     ....APP Requeste
   13ba0:	64412064 73657264 65622073 646e6f79     d Address beyond
   13bb0:	65687420 63657220 64657669 66756220      the recived buf
   13bc0:	20726566 72646461 20737365 20646e61     fer address and 
   13bd0:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   13be0:	0000000a 00001954 00001924 0000191c     ....T...$.......
   13bf0:	00001934 0000192c 0000194c 0000193c     4...,...L...<...
   13c00:	00001944                                D...

00013c04 <__FUNCTION__.13073>:
   13c04:	5f666968 646e6573 00000000              hif_send....

00013c10 <__FUNCTION__.13083>:
   13c10:	5f666968 00727369                       hif_isr.

00013c18 <__FUNCTION__.13089>:
   13c18:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00013c28 <__FUNCTION__.13101>:
   13c28:	5f666968 65636572 00657669              hif_receive.

00013c34 <__FUNCTION__.13117>:
   13c34:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   13c44:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   13c54:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   13c64:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   13c74:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13c84:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   13c94:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   13ca4:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   13cb4:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   13cc4:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   13cd4:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   13ce4:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   13cf4:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   13d04:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   13d14:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   13d24:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   13d34:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   13d44:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   13d54:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   13d64:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   13d74:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   13d84:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   13d94:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   13da4:	73747365 72657020 61637320 6c73206e     ests per scan sl
   13db4:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   13dc4:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   13dd4:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   13de4:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   13df4:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   13e04:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   13e14:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   13e24:	6e694d20 69726420 20726576 20726576      Min driver ver 
   13e34:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   13e44:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   13e54:	0000000a 323a3931 39333a31 00000000     ....19:21:39....
   13e64:	20727041 32203232 00383130 76697244     Apr 22 2018.Driv
   13e74:	62207265 746c6975 20746120 25097325     er built at %s.%
   13e84:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   13e94:	7277616d 65562065 6f697372 0000006e     mawre Version...
   13ea4:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   13eb4:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   13ec4:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   13ed4:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   13ee4:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   13ef4:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   13f04:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   13f14:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   13f24:	53502074 656b204b 656c2079 6874676e     t PSK key length
   13f34:	00000000 65646e75 656e6966 65732064     ....undefined se
   13f44:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   13f54:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   13f64:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   13f74:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   13f84:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   13f94:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   13fa4:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   13fb4:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   13fc4:	66754220 20726566 65637865 64656465      Buffer exceeded
   13fd4:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   13fe4:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   13ff4:	00000000                                ....

00013ff8 <__FUNCTION__.13052>:
   13ff8:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00014004 <__FUNCTION__.13081>:
   14004:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00014014 <__FUNCTION__.13109>:
   14014:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   14024:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   14034:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   14044:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   14054:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   14064:	20656874 70696863 00000000 50504128     the chip....(APP
   14074:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   14084:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   14094:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   140a4:	6c616974 00657a69                       tialize.

000140ac <__FUNCTION__.12915>:
   140ac:	70696863 6b61775f 00000065              chip_wake...

000140b8 <__FUNCTION__.12964>:
   140b8:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   140c8:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   140d8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   140e8:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   140f8:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   14108:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   14118:	6e65206f 656c6261 746e6920 75727265     o enable interru
   14128:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   14138:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   14148:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   14158:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   14168:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   14178:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   14188:	75622074 00000073                       t bus...

00014190 <__FUNCTION__.12962>:
   14190:	645f6d6e 695f7672 0074696e              nm_drv_init.

0001419c <__FUNCTION__.12969>:
   1419c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

000141ac <crc7_syndrome_table>:
   141ac:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   141bc:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   141cc:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   141dc:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   141ec:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   141fc:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1420c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1421c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1422c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1423c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1424c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1425c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1426c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1427c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1428c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1429c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   142ac:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   142bc:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   142cc:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   142dc:	73756220 72726520 2e2e726f 0000002e      bus error......
   142ec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   142fc:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   1430c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1431c:	61642064 72206174 6f707365 2065736e     d data response 
   1432c:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   1433c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1434c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1435c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1436c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1437c:	656c6961 61642064 72206174 6f707365     ailed data respo
   1438c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1439c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   143ac:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   143bc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   143cc:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   143dc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   143ec:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   143fc:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1440c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1441c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1442c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1443c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1444c:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   1445c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1446c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1447c:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1448c:	69727720 202c6574 20737562 6f727265      write, bus erro
   1449c:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   144ac:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   144bc:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   144cc:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   144dc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   144ec:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   144fc:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1450c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1451c:	65722064 6e6f7073 202c6573 74697277     d response, writ
   1452c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   1453c:	00000000 65736552 6e612074 65722064     ....Reset and re
   1454c:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   1455c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1456c:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1457c:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1458c:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1459c:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   145ac:	69727720 62206574 6b636f6c 30252820      write block (%0
   145bc:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   145cc:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   145dc:	61746164 69727720 2e2e6574 0000002e     data write......
   145ec:	65736552 6e612074 65722064 20797274     Reset and retry 
   145fc:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   1460c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1461c:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1462c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1463c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1464c:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1465c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1466c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1467c:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1468c:	6e612074 65722064 20797274 25206425     t and retry %d %
   1469c:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   146ac:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   146bc:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   146cc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   146dc:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   146ec:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   146fc:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1470c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1471c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1472c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1473c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1474c:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   1475c:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   1476c:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   1477c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1478c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1479c:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   147ac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   147bc:	6e692064 6e726574 77206c61 65746972     d internal write
   147cc:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   147dc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   147ec:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   147fc:	64692070 002e2e2e 00003510 00003510     p id.....5...5..
   1480c:	000035a0 00003464 000034aa 000034cc     .5..d4...4...4..
   1481c:	00003552 00003552 0000360c 00003438     R5..R5...6..84..
   1482c:	00003666 00003666 00003666 00003666     f6..f6..f6..f6..
   1483c:	000034ee                                .4..

00014840 <__FUNCTION__.12268>:
   14840:	5f697073 00646d63                       spi_cmd.

00014848 <__FUNCTION__.12275>:
   14848:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00014858 <__FUNCTION__.12284>:
   14858:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00014864 <__FUNCTION__.12300>:
   14864:	5f697073 61746164 6165725f 00000064     spi_data_read...

00014874 <__FUNCTION__.12315>:
   14874:	5f697073 61746164 6972775f 00006574     spi_data_write..

00014884 <__FUNCTION__.12327>:
   14884:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00014894 <__FUNCTION__.12338>:
   14894:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000148a4 <__FUNCTION__.12350>:
   148a4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

000148b4 <__FUNCTION__.12363>:
   148b4:	735f6d6e 725f6970 00646165              nm_spi_read.

000148c0 <__FUNCTION__.12384>:
   148c0:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   148d0:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   148e0:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   148f0:	25207465 65732064 6f697373 4449206e     et %d session ID
   14900:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   14910:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   14920:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   14930:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   14940:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   14950:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   14960:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   14970:	204c5353 6b636f53 00007465              SSL Socket..

0001497c <tcc_modules>:
   1497c:	42002000 42002400 42002800              . .B.$.B.(.B

00014988 <_tcc_gclk_ids>:
   14988:	001b1a1a                                ....

0001498c <_tcc_apbcmasks>:
   1498c:	00000100 00000200 00000400              ............

00014998 <_tcc_maxs>:
   14998:	00ffffff 00ffffff 0000ffff              ............

000149a4 <_tcc_cc_nums>:
   149a4:	00020204                                ....

000149a8 <_tcc_ow_nums>:
   149a8:	00020408                                ....

000149ac <_tcc_intflag>:
   149ac:	00000001 00000002 00000004 00000008     ................
   149bc:	00001000 00002000 00004000 00008000     ..... ...@......
   149cc:	00010000 00020000 00040000 00080000     ................
   149dc:	42002000 42002400 42002800              . .B.$.B.(.B

000149e8 <main_mqtt_broker>:
   149e8:	74656564 6165732e 70752e73 2e6e6e65     deet.seas.upenn.
   149f8:	00756465 462d6957 6f632069 63656e6e     edu.Wi-Fi connec
   14a08:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
   14a18:	6e6f6373 7463656e 000d6465 6e6e6570     sconnected..penn
   14a28:	30343731 69666977 00000000 50726941     1740wifi....AirP
   14a38:	4e6e6e65 442d7465 63697665 00000065     ennNet-Device...
   14a48:	462d6957 50492069 20736920 252e7525     Wi-Fi IP is %u.%
   14a58:	75252e75 0d75252e 0000000a 72657665     u.%u.%u.....ever
   14a68:	65657267 0000316e 6e6e6f43 20746365     green1..Connect 
   14a78:	6c696166 206f7420 76726573 25287265     fail to server(%
   14a88:	20212973 72746572 74692079 74756120     s)! retry it aut
   14a98:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   14aa8:	2f30672f 706d7570 0000232f 2f30672f     /g0/pump/#../g0/
   14ab8:	616c6572 232f3179 00000000 2f30672f     relay1/#..../g0/
   14ac8:	616c6572 232f3279 00000000 2f30672f     relay2/#..../g0/
   14ad8:	2f64656c 00000023 2f30672f 72677075     led/#.../g0/upgr
   14ae8:	2f656461 00000023 2f30672f 73726576     ade/#.../g0/vers
   14af8:	2f6e6f69 00000023 70657250 74617261     ion/#...Preparat
   14b08:	206e6f69 4d20666f 20545451 20736168     ion of MQTT has 
   14b18:	6e656562 6d6f6320 74656c70 0d2e6465     been completed..
   14b28:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   14b38:	6c636564 64656e69 756f7920 63612072     declined your ac
   14b48:	73736563 72652021 20726f72 65646f63     cess! error code
   14b58:	0d642520 0000000a 2f30672f 706d7570      %d...../g0/pump
   14b68:	0000002f 3e207325 0000203e 2f30672f     /...%s >> ../g0/
   14b78:	616c6572 002f3179 00006e6f 0066666f     relay1/.on..off.
   14b88:	2f30672f 2f64656c 00000000 2f30672f     /g0/led/..../g0/
   14b98:	616c6572 002f3279 2f30672f 72677075     relay2/./g0/upgr
   14ba8:	2f656461 00000000 2f30672f 73726576     ade/..../g0/vers
   14bb8:	2f6e6f69 00000000 6e6b6e55 206e776f     ion/....Unknown 
   14bc8:	69706f74 25203a63 00000073 0000000d     topic: %s.......
   14bd8:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
   14be8:	00000d64 656d6954 6e652072 656c6261     d...Timer enable
   14bf8:	000d2e64 5454514d 696e6920 6c616974     d...MQTT initial
   14c08:	74617a69 206e6f69 6c696166 202e6465     ization failed. 
   14c18:	6f727245 6f632072 69206564 25282073     Error code is (%
   14c28:	0a0d2964 00000000 5454514d 67657220     d)......MQTT reg
   14c38:	65747369 61632072 61626c6c 66206b63     ister callback f
   14c48:	656c6961 45202e64 726f7272 646f6320     ailed. Error cod
   14c58:	73692065 64252820 000a0d29 5454514d     e is (%d)...MQTT
   14c68:	6e6f4320 75676966 2e646572 0000000d      Configured.....
   14c78:	74696e49 696c6169 676e697a 0d2e2e2e     Initializing....
   14c88:	00000000 6e69616d 326d203a 69775f6d     ....main: m2m_wi
   14c98:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
   14ca8:	2821726f 0d296425 0000000a 6e69616d     or!(%d).....main
   14cb8:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   14cc8:	6c6c6163 63757320 73736563 64252821     call success!(%d
   14cd8:	000a0d29 6b636f53 20737465 74696e69     )...Sockets init
   14ce8:	696c6169 2e64657a 0000000d 00000002     ialized.........
   14cf8:	00000003 00000028 00000029 00000004     ....(...).......
   14d08:	00000005 00000006 00000007 0000ffff     ................
   14d18:	0000ffff 00000022 00000023 0000ffff     ...."...#.......
   14d28:	0000ffff 0000ffff 0000ffff 00000008     ................
   14d38:	00000009 0000000a 0000000b 00008bde     ................
   14d48:	00008be4 00008be4 00008be4 00008be4     ................
   14d58:	00008be4 00008be4 00008be4 00008be4     ................
   14d68:	00008be4 00008be4 00008be4 00008be4     ................
   14d78:	00008be4 00008be4 00008be4 00008bbc     ................
   14d88:	00008be4 00008be4 00008be4 00008be4     ................
   14d98:	00008be4 00008be4 00008be4 00008be4     ................
   14da8:	00008be4 00008be4 00008be4 00008be4     ................
   14db8:	00008be4 00008be4 00008be4 00008bd8     ................
   14dc8:	00008be4 00008be4 00008be4 00008be4     ................
   14dd8:	00008be4 00008be4 00008be4 00008be4     ................
   14de8:	00008be4 00008be4 00008be4 00008be4     ................
   14df8:	00008be4 00008be4 00008be4 00008bd2     ................
   14e08:	00008b7a 00008b90 00008ba6 00008b60     z...........`...
   14e18:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   14e28:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   14e38:	0000ba02 0000ba7a 0000ba7a 0000ba20     ....z...z... ...
   14e48:	0000ba1a 0000ba26 0000ba08 0000ba2c     ....&.......,...
   14e58:	0000ba60 0000bd44 0000bd94 0000bd94     `...D...........
   14e68:	0000bd90 0000bd36 0000bd56 0000bd26     ....6...V...&...
   14e78:	0000bd68 0000bd7a 0000bde2 0000be10     h...z...........
   14e88:	0000be10 0000be0c 0000bddc 0000bde8     ................
   14e98:	0000bdd6 0000bdee 0000bdf4 00000020     ............ ...
   14ea8:	2e2e0a0d 2d69572e 66206946 656c6961     .....Wi-Fi faile
   14eb8:	6f742064 6e6f6320 75676966 2e2e6572     d to configure..
   14ec8:	00000d2e 72616f42 6e692064 61697469     ....Board initia
   14ed8:	657a696c 000d2e64 6e6e6570 30343731     lized...penn1740
   14ee8:	69666977 00000000 50726941 4e6e6e65     wifi....AirPennN
   14ef8:	442d7465 63697665 00000065 636c6557     et-Device...Welc
   14f08:	20656d6f 74206f74 45206568 67726576     ome to the Everg
   14f18:	6e656572 494c4320 00000d2e 0000203e     reen CLI....> ..
   14f28:	646e6553 20676e69 736e6573 7620726f     Sending sensor v
   14f38:	65756c61 6f742073 6f6c4320 0d2e6475     alues to Cloud..
   14f48:	00000000 3a78754c 0d642520 0000000a     ....Lux: %d.....
   14f58:	00006425 2f30672f 2f78756c 00000000     %d../g0/lux/....
   14f68:	73696f4d 65727574 2e25203a 0d663230     Moisture: %.02f.
   14f78:	0000000a 32302e25 00000066 2f30672f     ....%.02f.../g0/
   14f88:	73696f6d 4d002f74 64734951 00000070     moist/.MQIsdp...

00014f98 <_global_impure_ptr>:
   14f98:	20000044 4f500043 00584953 4e49002e     D.. C.POSIX...IN
   14fa8:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
   14fb8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   14fc8:	32313000 36353433 61393837 65646362     .0123456789abcde
   14fd8:	20000066                                         f.

00014fda <_ctype_>:
   14fda:	20202000 20202020 28282020 20282828     .         ((((( 
   14fea:	20202020 20202020 20202020 20202020                     
   14ffa:	10108820 10101010 10101010 10101010      ...............
   1500a:	04040410 04040404 10040404 10101010     ................
   1501a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1502a:	01010101 01010101 01010101 10101010     ................
   1503a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1504a:	02020202 02020202 02020202 10101010     ................
   1505a:	00000020 00000000 00000000 00000000      ...............
	...
   150da:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

000150e8 <__sf_fake_stderr>:
	...

00015108 <__sf_fake_stdin>:
	...

00015128 <__sf_fake_stdout>:
	...

00015148 <__mprec_bigtens>:
   15148:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   15158:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   15168:	7f73bf3c 75154fdd                       <.s..O.u

00015170 <__mprec_tens>:
   15170:	00000000 3ff00000 00000000 40240000     .......?......$@
   15180:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   15190:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   151a0:	00000000 412e8480 00000000 416312d0     .......A......cA
   151b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   151c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   151d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   151e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   151f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   15200:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   15210:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   15220:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   15230:	79d99db4 44ea7843                       ...yCx.D

00015238 <p05.6047>:
   15238:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   15248:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
   15258:	000118a4 00011874 00011886 000117c8     ....t...........
   15268:	00011886 0001186a 00011886 000117c8     ....j...........
   15278:	00011874 00011874 0001186a 000117c8     t...t...j.......
   15288:	000117d0 000117d0 000117d0 0001188c     ................
   15298:	00011874 00011874 00011848 0001192c     t...t...H...,...
   152a8:	00011848 0001186a 00011848 0001192c     H...j...H...,...
   152b8:	00011874 00011874 0001186a 0001192c     t...t...j...,...
   152c8:	000117d0 000117d0 000117d0 00011936     ............6...
   152d8:	00011ad4 00011a24 00011a24 00011a22     ....$...$..."...
   152e8:	00011ac6 00011ac6 00011abc 00011a22     ............"...
   152f8:	00011ac6 00011abc 00011ac6 00011a22     ............"...
   15308:	00011acc 00011acc 00011acc 00011b5c     ............\...
   15318:	000124a0 00012482 0001243c 0001235a     .$...$..<$..Z#..
   15328:	0001243c 00012474 0001243c 0001235a     <$..t$..<$..Z#..
   15338:	00012482 00012482 00012474 0001235a     .$...$..t$..Z#..
   15348:	00012352 00012352 00012352 000126b8     R#..R#..R#...&..
   15358:	00012d00 00012bc0 00012bc0 00012bbc     .-...+...+...+..
   15368:	00012cd8 00012cd8 00012cca 00012bbc     .,...,...,...+..
   15378:	00012cd8 00012cca 00012cd8 00012bbc     .,...,...,...+..
   15388:	00012ce0 00012ce0 00012ce0 00012ee4     .,...,...,......

00015398 <_init>:
   15398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1539a:	46c0      	nop			; (mov r8, r8)
   1539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1539e:	bc08      	pop	{r3}
   153a0:	469e      	mov	lr, r3
   153a2:	4770      	bx	lr

000153a4 <__init_array_start>:
   153a4:	000000dd 	.word	0x000000dd

000153a8 <_fini>:
   153a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153aa:	46c0      	nop			; (mov r8, r8)
   153ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   153ae:	bc08      	pop	{r3}
   153b0:	469e      	mov	lr, r3
   153b2:	4770      	bx	lr

000153b4 <__fini_array_start>:
   153b4:	000000b5 	.word	0x000000b5
