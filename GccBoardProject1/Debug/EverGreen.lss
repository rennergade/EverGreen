
EverGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f340  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000248  20000000  0000f340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029c  20000248  0000f588  00020248  2**2
                  ALLOC
  3 .stack        00002004  200004e4  0000f824  00020248  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
  6 .debug_info   00059cca  00000000  00000000  000202c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000059b0  00000000  00000000  00079f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000521c  00000000  00000000  0007f943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ee0  00000000  00000000  00084b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d18  00000000  00000000  00085a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e802  00000000  00000000  00086757  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016dd3  00000000  00000000  000a4f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000937b5  00000000  00000000  000bbd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004328  00000000  00000000  0014f4e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 24 00 20 a9 6b 00 00 a1 6c 00 00 a1 6c 00 00     .$. .k...l...l..
	...
      2c:	a1 6c 00 00 00 00 00 00 00 00 00 00 a1 6c 00 00     .l...........l..
      3c:	a1 6c 00 00 a1 6c 00 00 a1 6c 00 00 a1 6c 00 00     .l...l...l...l..
      4c:	a1 6c 00 00 dd 10 00 00 a1 6c 00 00 a1 6c 00 00     .l.......l...l..
      5c:	a1 6c 00 00 a1 6c 00 00 01 59 00 00 19 59 00 00     .l...l...Y...Y..
      6c:	31 59 00 00 49 59 00 00 61 59 00 00 79 59 00 00     1Y..IY..aY..yY..
      7c:	71 1f 00 00 85 1f 00 00 99 1f 00 00 a1 6c 00 00     q............l..
      8c:	a1 6c 00 00 a1 6c 00 00 00 00 00 00 00 00 00 00     .l...l..........
      9c:	a1 6c 00 00 a1 6c 00 00 a1 6c 00 00 a1 6c 00 00     .l...l...l...l..
      ac:	a1 6c 00 00 00 00 00 00                             .l......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000248 	.word	0x20000248
      d4:	00000000 	.word	0x00000000
      d8:	0000f340 	.word	0x0000f340

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000024c 	.word	0x2000024c
     108:	0000f340 	.word	0x0000f340
     10c:	0000f340 	.word	0x0000f340
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     198:	b580      	push	{r7, lr}
     19a:	b084      	sub	sp, #16
     19c:	af00      	add	r7, sp, #0
     19e:	0002      	movs	r2, r0
     1a0:	1dfb      	adds	r3, r7, #7
     1a2:	701a      	strb	r2, [r3, #0]
     1a4:	1dbb      	adds	r3, r7, #6
     1a6:	1c0a      	adds	r2, r1, #0
     1a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1aa:	1dfb      	adds	r3, r7, #7
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8 <port_pin_set_output_level+0x50>)
     1b2:	4798      	blx	r3
     1b4:	0003      	movs	r3, r0
     1b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	781b      	ldrb	r3, [r3, #0]
     1bc:	221f      	movs	r2, #31
     1be:	4013      	ands	r3, r2
     1c0:	2201      	movs	r2, #1
     1c2:	409a      	lsls	r2, r3
     1c4:	0013      	movs	r3, r2
     1c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d003      	beq.n	1d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1d0:	68fb      	ldr	r3, [r7, #12]
     1d2:	68ba      	ldr	r2, [r7, #8]
     1d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1d6:	e002      	b.n	1de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	68ba      	ldr	r2, [r7, #8]
     1dc:	615a      	str	r2, [r3, #20]
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	b004      	add	sp, #16
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	00000175 	.word	0x00000175

000001ec <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     1f0:	4b02      	ldr	r3, [pc, #8]	; (1fc <system_interrupt_enter_critical_section+0x10>)
     1f2:	4798      	blx	r3
}
     1f4:	46c0      	nop			; (mov r8, r8)
     1f6:	46bd      	mov	sp, r7
     1f8:	bd80      	pop	{r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	00005991 	.word	0x00005991

00000200 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     200:	b580      	push	{r7, lr}
     202:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     204:	4b02      	ldr	r3, [pc, #8]	; (210 <system_interrupt_leave_critical_section+0x10>)
     206:	4798      	blx	r3
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	bd80      	pop	{r7, pc}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	000059e5 	.word	0x000059e5

00000214 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
     214:	b580      	push	{r7, lr}
     216:	b084      	sub	sp, #16
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <spi_lock+0x40>)
     21e:	4798      	blx	r3

	if (module->locked) {
     220:	687b      	ldr	r3, [r7, #4]
     222:	791b      	ldrb	r3, [r3, #4]
     224:	b2db      	uxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	d004      	beq.n	234 <spi_lock+0x20>
		status = STATUS_BUSY;
     22a:	230f      	movs	r3, #15
     22c:	18fb      	adds	r3, r7, r3
     22e:	2205      	movs	r2, #5
     230:	701a      	strb	r2, [r3, #0]
     232:	e006      	b.n	242 <spi_lock+0x2e>
	} else {
		module->locked = true;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2201      	movs	r2, #1
     238:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
     23a:	230f      	movs	r3, #15
     23c:	18fb      	adds	r3, r7, r3
     23e:	2200      	movs	r2, #0
     240:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
     242:	4b05      	ldr	r3, [pc, #20]	; (258 <spi_lock+0x44>)
     244:	4798      	blx	r3

	return status;
     246:	230f      	movs	r3, #15
     248:	18fb      	adds	r3, r7, r3
     24a:	781b      	ldrb	r3, [r3, #0]
}
     24c:	0018      	movs	r0, r3
     24e:	46bd      	mov	sp, r7
     250:	b004      	add	sp, #16
     252:	bd80      	pop	{r7, pc}
     254:	000001ed 	.word	0x000001ed
     258:	00000201 	.word	0x00000201

0000025c <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	module->locked = false;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	711a      	strb	r2, [r3, #4]
}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	46bd      	mov	sp, r7
     26e:	b002      	add	sp, #8
     270:	bd80      	pop	{r7, pc}

00000272 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     272:	b580      	push	{r7, lr}
     274:	b084      	sub	sp, #16
     276:	af00      	add	r7, sp, #0
     278:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	681b      	ldr	r3, [r3, #0]
     27e:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     280:	68fb      	ldr	r3, [r7, #12]
     282:	7e1b      	ldrb	r3, [r3, #24]
     284:	b2db      	uxtb	r3, r3
     286:	001a      	movs	r2, r3
     288:	2301      	movs	r3, #1
     28a:	4013      	ands	r3, r2
     28c:	1e5a      	subs	r2, r3, #1
     28e:	4193      	sbcs	r3, r2
     290:	b2db      	uxtb	r3, r3
}
     292:	0018      	movs	r0, r3
     294:	46bd      	mov	sp, r7
     296:	b004      	add	sp, #16
     298:	bd80      	pop	{r7, pc}

0000029a <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     29a:	b580      	push	{r7, lr}
     29c:	b084      	sub	sp, #16
     29e:	af00      	add	r7, sp, #0
     2a0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     2a8:	68fb      	ldr	r3, [r7, #12]
     2aa:	7e1b      	ldrb	r3, [r3, #24]
     2ac:	b2db      	uxtb	r3, r3
     2ae:	001a      	movs	r2, r3
     2b0:	2304      	movs	r3, #4
     2b2:	4013      	ands	r3, r2
     2b4:	1e5a      	subs	r2, r3, #1
     2b6:	4193      	sbcs	r3, r2
     2b8:	b2db      	uxtb	r3, r3
}
     2ba:	0018      	movs	r0, r3
     2bc:	46bd      	mov	sp, r7
     2be:	b004      	add	sp, #16
     2c0:	bd80      	pop	{r7, pc}
	...

000002c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b084      	sub	sp, #16
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
     2cc:	000a      	movs	r2, r1
     2ce:	1cbb      	adds	r3, r7, #2
     2d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	681b      	ldr	r3, [r3, #0]
     2d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	0018      	movs	r0, r3
     2dc:	4b0a      	ldr	r3, [pc, #40]	; (308 <spi_write+0x44>)
     2de:	4798      	blx	r3
     2e0:	0003      	movs	r3, r0
     2e2:	001a      	movs	r2, r3
     2e4:	2301      	movs	r3, #1
     2e6:	4053      	eors	r3, r2
     2e8:	b2db      	uxtb	r3, r3
     2ea:	2b00      	cmp	r3, #0
     2ec:	d001      	beq.n	2f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     2ee:	2305      	movs	r3, #5
     2f0:	e006      	b.n	300 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     2f2:	1cbb      	adds	r3, r7, #2
     2f4:	881b      	ldrh	r3, [r3, #0]
     2f6:	05db      	lsls	r3, r3, #23
     2f8:	0dda      	lsrs	r2, r3, #23
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     2fe:	2300      	movs	r3, #0
}
     300:	0018      	movs	r0, r3
     302:	46bd      	mov	sp, r7
     304:	b004      	add	sp, #16
     306:	bd80      	pop	{r7, pc}
     308:	00000273 	.word	0x00000273

0000030c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     30c:	b580      	push	{r7, lr}
     30e:	b084      	sub	sp, #16
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
     314:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     316:	687b      	ldr	r3, [r7, #4]
     318:	681b      	ldr	r3, [r3, #0]
     31a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	0018      	movs	r0, r3
     320:	4b1b      	ldr	r3, [pc, #108]	; (390 <spi_read+0x84>)
     322:	4798      	blx	r3
     324:	0003      	movs	r3, r0
     326:	001a      	movs	r2, r3
     328:	2301      	movs	r3, #1
     32a:	4053      	eors	r3, r2
     32c:	b2db      	uxtb	r3, r3
     32e:	2b00      	cmp	r3, #0
     330:	d001      	beq.n	336 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     332:	2310      	movs	r3, #16
     334:	e027      	b.n	386 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     336:	230f      	movs	r3, #15
     338:	18fb      	adds	r3, r7, r3
     33a:	2200      	movs	r2, #0
     33c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     33e:	68bb      	ldr	r3, [r7, #8]
     340:	8b5b      	ldrh	r3, [r3, #26]
     342:	b29b      	uxth	r3, r3
     344:	001a      	movs	r2, r3
     346:	2304      	movs	r3, #4
     348:	4013      	ands	r3, r2
     34a:	d006      	beq.n	35a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     34c:	230f      	movs	r3, #15
     34e:	18fb      	adds	r3, r7, r3
     350:	221e      	movs	r2, #30
     352:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     354:	68bb      	ldr	r3, [r7, #8]
     356:	2204      	movs	r2, #4
     358:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	799b      	ldrb	r3, [r3, #6]
     35e:	2b01      	cmp	r3, #1
     360:	d108      	bne.n	374 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     362:	68bb      	ldr	r3, [r7, #8]
     364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     366:	b29b      	uxth	r3, r3
     368:	05db      	lsls	r3, r3, #23
     36a:	0ddb      	lsrs	r3, r3, #23
     36c:	b29a      	uxth	r2, r3
     36e:	683b      	ldr	r3, [r7, #0]
     370:	801a      	strh	r2, [r3, #0]
     372:	e005      	b.n	380 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     374:	68bb      	ldr	r3, [r7, #8]
     376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     378:	b2db      	uxtb	r3, r3
     37a:	b29a      	uxth	r2, r3
     37c:	683b      	ldr	r3, [r7, #0]
     37e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     380:	230f      	movs	r3, #15
     382:	18fb      	adds	r3, r7, r3
     384:	781b      	ldrb	r3, [r3, #0]
}
     386:	0018      	movs	r0, r3
     388:	46bd      	mov	sp, r7
     38a:	b004      	add	sp, #16
     38c:	bd80      	pop	{r7, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	0000029b 	.word	0x0000029b

00000394 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
     394:	b580      	push	{r7, lr}
     396:	b082      	sub	sp, #8
     398:	af00      	add	r7, sp, #0
     39a:	0002      	movs	r2, r0
     39c:	1dfb      	adds	r3, r7, #7
     39e:	701a      	strb	r2, [r3, #0]
	switch (type) {
     3a0:	1dfb      	adds	r3, r7, #7
     3a2:	781b      	ldrb	r3, [r3, #0]
     3a4:	2b09      	cmp	r3, #9
     3a6:	d818      	bhi.n	3da <_at25dfx_get_device_id+0x46>
     3a8:	009a      	lsls	r2, r3, #2
     3aa:	4b0e      	ldr	r3, [pc, #56]	; (3e4 <_at25dfx_get_device_id+0x50>)
     3ac:	18d3      	adds	r3, r2, r3
     3ae:	681b      	ldr	r3, [r3, #0]
     3b0:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
     3b2:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <_at25dfx_get_device_id+0x54>)
     3b4:	e012      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
     3b6:	4b0d      	ldr	r3, [pc, #52]	; (3ec <_at25dfx_get_device_id+0x58>)
     3b8:	e010      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
     3ba:	4b0d      	ldr	r3, [pc, #52]	; (3f0 <_at25dfx_get_device_id+0x5c>)
     3bc:	e00e      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
     3be:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <_at25dfx_get_device_id+0x60>)
     3c0:	e00c      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
     3c2:	4b0d      	ldr	r3, [pc, #52]	; (3f8 <_at25dfx_get_device_id+0x64>)
     3c4:	e00a      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
     3c6:	4b0d      	ldr	r3, [pc, #52]	; (3fc <_at25dfx_get_device_id+0x68>)
     3c8:	e008      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
     3ca:	4b0d      	ldr	r3, [pc, #52]	; (400 <_at25dfx_get_device_id+0x6c>)
     3cc:	e006      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
     3ce:	4b0d      	ldr	r3, [pc, #52]	; (404 <_at25dfx_get_device_id+0x70>)
     3d0:	e004      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
     3d2:	4b0d      	ldr	r3, [pc, #52]	; (408 <_at25dfx_get_device_id+0x74>)
     3d4:	e002      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
     3d6:	4b0d      	ldr	r3, [pc, #52]	; (40c <_at25dfx_get_device_id+0x78>)
     3d8:	e000      	b.n	3dc <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
     3da:	2300      	movs	r3, #0
	}
}
     3dc:	0018      	movs	r0, r3
     3de:	46bd      	mov	sp, r7
     3e0:	b002      	add	sp, #8
     3e2:	bd80      	pop	{r7, pc}
     3e4:	0000e3b4 	.word	0x0000e3b4
     3e8:	0000651f 	.word	0x0000651f
     3ec:	0000431f 	.word	0x0000431f
     3f0:	0001441f 	.word	0x0001441f
     3f4:	0002451f 	.word	0x0002451f
     3f8:	0001451f 	.word	0x0001451f
     3fc:	0002461f 	.word	0x0002461f
     400:	0003461f 	.word	0x0003461f
     404:	0000861f 	.word	0x0000861f
     408:	0001471f 	.word	0x0001471f
     40c:	0000481f 	.word	0x0000481f

00000410 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	0002      	movs	r2, r0
     418:	1dfb      	adds	r3, r7, #7
     41a:	701a      	strb	r2, [r3, #0]
	switch (type) {
     41c:	1dfb      	adds	r3, r7, #7
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	2b09      	cmp	r3, #9
     422:	d819      	bhi.n	458 <_at25dfx_get_device_size+0x48>
     424:	009a      	lsls	r2, r3, #2
     426:	4b0f      	ldr	r3, [pc, #60]	; (464 <_at25dfx_get_device_size+0x54>)
     428:	18d3      	adds	r3, r2, r3
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
     42e:	2380      	movs	r3, #128	; 0x80
     430:	025b      	lsls	r3, r3, #9
     432:	e012      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
     434:	2380      	movs	r3, #128	; 0x80
     436:	02db      	lsls	r3, r3, #11
     438:	e00f      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
     43a:	2380      	movs	r3, #128	; 0x80
     43c:	031b      	lsls	r3, r3, #12
     43e:	e00c      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     440:	2380      	movs	r3, #128	; 0x80
     442:	035b      	lsls	r3, r3, #13
     444:	e009      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     446:	2380      	movs	r3, #128	; 0x80
     448:	039b      	lsls	r3, r3, #14
     44a:	e006      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     44c:	2380      	movs	r3, #128	; 0x80
     44e:	03db      	lsls	r3, r3, #15
     450:	e003      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
     452:	2380      	movs	r3, #128	; 0x80
     454:	041b      	lsls	r3, r3, #16
     456:	e000      	b.n	45a <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
     458:	2300      	movs	r3, #0
	}
}
     45a:	0018      	movs	r0, r3
     45c:	46bd      	mov	sp, r7
     45e:	b002      	add	sp, #8
     460:	bd80      	pop	{r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	0000e3dc 	.word	0x0000e3dc

00000468 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
     470:	687b      	ldr	r3, [r7, #4]
     472:	795b      	ldrb	r3, [r3, #5]
     474:	2100      	movs	r1, #0
     476:	0018      	movs	r0, r3
     478:	4b02      	ldr	r3, [pc, #8]	; (484 <_at25dfx_chip_select+0x1c>)
     47a:	4798      	blx	r3
}
     47c:	46c0      	nop			; (mov r8, r8)
     47e:	46bd      	mov	sp, r7
     480:	b002      	add	sp, #8
     482:	bd80      	pop	{r7, pc}
     484:	00000199 	.word	0x00000199

00000488 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
     490:	687b      	ldr	r3, [r7, #4]
     492:	795b      	ldrb	r3, [r3, #5]
     494:	2101      	movs	r1, #1
     496:	0018      	movs	r0, r3
     498:	4b02      	ldr	r3, [pc, #8]	; (4a4 <_at25dfx_chip_deselect+0x1c>)
     49a:	4798      	blx	r3
}
     49c:	46c0      	nop			; (mov r8, r8)
     49e:	46bd      	mov	sp, r7
     4a0:	b002      	add	sp, #8
     4a2:	bd80      	pop	{r7, pc}
     4a4:	00000199 	.word	0x00000199

000004a8 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     4a8:	b084      	sub	sp, #16
     4aa:	b5b0      	push	{r4, r5, r7, lr}
     4ac:	b084      	sub	sp, #16
     4ae:	af00      	add	r7, sp, #0
     4b0:	6078      	str	r0, [r7, #4]
     4b2:	2004      	movs	r0, #4
     4b4:	2420      	movs	r4, #32
     4b6:	46a4      	mov	ip, r4
     4b8:	44bc      	add	ip, r7
     4ba:	4460      	add	r0, ip
     4bc:	6001      	str	r1, [r0, #0]
     4be:	6042      	str	r2, [r0, #4]
     4c0:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
     4c2:	2304      	movs	r3, #4
     4c4:	2220      	movs	r2, #32
     4c6:	4694      	mov	ip, r2
     4c8:	44bc      	add	ip, r7
     4ca:	4463      	add	r3, ip
     4cc:	781a      	ldrb	r2, [r3, #0]
     4ce:	2308      	movs	r3, #8
     4d0:	18fb      	adds	r3, r7, r3
     4d2:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     4d4:	2304      	movs	r3, #4
     4d6:	2220      	movs	r2, #32
     4d8:	4694      	mov	ip, r2
     4da:	44bc      	add	ip, r7
     4dc:	4463      	add	r3, ip
     4de:	785b      	ldrb	r3, [r3, #1]
     4e0:	2b01      	cmp	r3, #1
     4e2:	d91f      	bls.n	524 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     4e4:	2304      	movs	r3, #4
     4e6:	2220      	movs	r2, #32
     4e8:	4694      	mov	ip, r2
     4ea:	44bc      	add	ip, r7
     4ec:	4463      	add	r3, ip
     4ee:	685b      	ldr	r3, [r3, #4]
     4f0:	b2da      	uxtb	r2, r3
     4f2:	2308      	movs	r3, #8
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     4f8:	2304      	movs	r3, #4
     4fa:	2220      	movs	r2, #32
     4fc:	4694      	mov	ip, r2
     4fe:	44bc      	add	ip, r7
     500:	4463      	add	r3, ip
     502:	685b      	ldr	r3, [r3, #4]
     504:	0a1b      	lsrs	r3, r3, #8
     506:	b2da      	uxtb	r2, r3
     508:	2308      	movs	r3, #8
     50a:	18fb      	adds	r3, r7, r3
     50c:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     50e:	2304      	movs	r3, #4
     510:	2220      	movs	r2, #32
     512:	4694      	mov	ip, r2
     514:	44bc      	add	ip, r7
     516:	4463      	add	r3, ip
     518:	685b      	ldr	r3, [r3, #4]
     51a:	0c1b      	lsrs	r3, r3, #16
     51c:	b2da      	uxtb	r2, r3
     51e:	2308      	movs	r3, #8
     520:	18fb      	adds	r3, r7, r3
     522:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
     524:	687b      	ldr	r3, [r7, #4]
     526:	0018      	movs	r0, r3
     528:	4b1d      	ldr	r3, [pc, #116]	; (5a0 <_at25dfx_chip_issue_read_command_wait+0xf8>)
     52a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	6818      	ldr	r0, [r3, #0]
     530:	2304      	movs	r3, #4
     532:	2220      	movs	r2, #32
     534:	4694      	mov	ip, r2
     536:	44bc      	add	ip, r7
     538:	4463      	add	r3, ip
     53a:	785b      	ldrb	r3, [r3, #1]
     53c:	b29a      	uxth	r2, r3
     53e:	230f      	movs	r3, #15
     540:	18fc      	adds	r4, r7, r3
     542:	2308      	movs	r3, #8
     544:	18fb      	adds	r3, r7, r3
     546:	0019      	movs	r1, r3
     548:	4b16      	ldr	r3, [pc, #88]	; (5a4 <_at25dfx_chip_issue_read_command_wait+0xfc>)
     54a:	4798      	blx	r3
     54c:	0003      	movs	r3, r0
     54e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     550:	2304      	movs	r3, #4
     552:	2220      	movs	r2, #32
     554:	4694      	mov	ip, r2
     556:	44bc      	add	ip, r7
     558:	4463      	add	r3, ip
     55a:	899b      	ldrh	r3, [r3, #12]
     55c:	2b00      	cmp	r3, #0
     55e:	d014      	beq.n	58a <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     560:	687b      	ldr	r3, [r7, #4]
     562:	6818      	ldr	r0, [r3, #0]
     564:	2304      	movs	r3, #4
     566:	2220      	movs	r2, #32
     568:	4694      	mov	ip, r2
     56a:	44bc      	add	ip, r7
     56c:	4463      	add	r3, ip
     56e:	6899      	ldr	r1, [r3, #8]
     570:	2304      	movs	r3, #4
     572:	2220      	movs	r2, #32
     574:	4694      	mov	ip, r2
     576:	44bc      	add	ip, r7
     578:	4463      	add	r3, ip
     57a:	899a      	ldrh	r2, [r3, #12]
     57c:	230f      	movs	r3, #15
     57e:	18fc      	adds	r4, r7, r3
     580:	2300      	movs	r3, #0
     582:	4d09      	ldr	r5, [pc, #36]	; (5a8 <_at25dfx_chip_issue_read_command_wait+0x100>)
     584:	47a8      	blx	r5
     586:	0003      	movs	r3, r0
     588:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	0018      	movs	r0, r3
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <_at25dfx_chip_issue_read_command_wait+0x104>)
     590:	4798      	blx	r3
}
     592:	46c0      	nop			; (mov r8, r8)
     594:	46bd      	mov	sp, r7
     596:	b004      	add	sp, #16
     598:	bcb0      	pop	{r4, r5, r7}
     59a:	bc08      	pop	{r3}
     59c:	b004      	add	sp, #16
     59e:	4718      	bx	r3
     5a0:	00000469 	.word	0x00000469
     5a4:	00001a4d 	.word	0x00001a4d
     5a8:	00001919 	.word	0x00001919
     5ac:	00000489 	.word	0x00000489

000005b0 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     5b0:	b084      	sub	sp, #16
     5b2:	b590      	push	{r4, r7, lr}
     5b4:	b085      	sub	sp, #20
     5b6:	af00      	add	r7, sp, #0
     5b8:	6078      	str	r0, [r7, #4]
     5ba:	2004      	movs	r0, #4
     5bc:	2420      	movs	r4, #32
     5be:	46a4      	mov	ip, r4
     5c0:	44bc      	add	ip, r7
     5c2:	4460      	add	r0, ip
     5c4:	6001      	str	r1, [r0, #0]
     5c6:	6042      	str	r2, [r0, #4]
     5c8:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     5ca:	2304      	movs	r3, #4
     5cc:	2220      	movs	r2, #32
     5ce:	4694      	mov	ip, r2
     5d0:	44bc      	add	ip, r7
     5d2:	4463      	add	r3, ip
     5d4:	781a      	ldrb	r2, [r3, #0]
     5d6:	2308      	movs	r3, #8
     5d8:	18fb      	adds	r3, r7, r3
     5da:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     5dc:	2304      	movs	r3, #4
     5de:	2220      	movs	r2, #32
     5e0:	4694      	mov	ip, r2
     5e2:	44bc      	add	ip, r7
     5e4:	4463      	add	r3, ip
     5e6:	785b      	ldrb	r3, [r3, #1]
     5e8:	2b01      	cmp	r3, #1
     5ea:	d91f      	bls.n	62c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     5ec:	2304      	movs	r3, #4
     5ee:	2220      	movs	r2, #32
     5f0:	4694      	mov	ip, r2
     5f2:	44bc      	add	ip, r7
     5f4:	4463      	add	r3, ip
     5f6:	685b      	ldr	r3, [r3, #4]
     5f8:	b2da      	uxtb	r2, r3
     5fa:	2308      	movs	r3, #8
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     600:	2304      	movs	r3, #4
     602:	2220      	movs	r2, #32
     604:	4694      	mov	ip, r2
     606:	44bc      	add	ip, r7
     608:	4463      	add	r3, ip
     60a:	685b      	ldr	r3, [r3, #4]
     60c:	0a1b      	lsrs	r3, r3, #8
     60e:	b2da      	uxtb	r2, r3
     610:	2308      	movs	r3, #8
     612:	18fb      	adds	r3, r7, r3
     614:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     616:	2304      	movs	r3, #4
     618:	2220      	movs	r2, #32
     61a:	4694      	mov	ip, r2
     61c:	44bc      	add	ip, r7
     61e:	4463      	add	r3, ip
     620:	685b      	ldr	r3, [r3, #4]
     622:	0c1b      	lsrs	r3, r3, #16
     624:	b2da      	uxtb	r2, r3
     626:	2308      	movs	r3, #8
     628:	18fb      	adds	r3, r7, r3
     62a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	0018      	movs	r0, r3
     630:	4b1d      	ldr	r3, [pc, #116]	; (6a8 <_at25dfx_chip_issue_write_command_wait+0xf8>)
     632:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     634:	687b      	ldr	r3, [r7, #4]
     636:	6818      	ldr	r0, [r3, #0]
     638:	2304      	movs	r3, #4
     63a:	2220      	movs	r2, #32
     63c:	4694      	mov	ip, r2
     63e:	44bc      	add	ip, r7
     640:	4463      	add	r3, ip
     642:	785b      	ldrb	r3, [r3, #1]
     644:	b29a      	uxth	r2, r3
     646:	230f      	movs	r3, #15
     648:	18fc      	adds	r4, r7, r3
     64a:	2308      	movs	r3, #8
     64c:	18fb      	adds	r3, r7, r3
     64e:	0019      	movs	r1, r3
     650:	4b16      	ldr	r3, [pc, #88]	; (6ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
     652:	4798      	blx	r3
     654:	0003      	movs	r3, r0
     656:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     658:	2304      	movs	r3, #4
     65a:	2220      	movs	r2, #32
     65c:	4694      	mov	ip, r2
     65e:	44bc      	add	ip, r7
     660:	4463      	add	r3, ip
     662:	899b      	ldrh	r3, [r3, #12]
     664:	2b00      	cmp	r3, #0
     666:	d014      	beq.n	692 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     668:	687b      	ldr	r3, [r7, #4]
     66a:	6818      	ldr	r0, [r3, #0]
     66c:	2304      	movs	r3, #4
     66e:	2220      	movs	r2, #32
     670:	4694      	mov	ip, r2
     672:	44bc      	add	ip, r7
     674:	4463      	add	r3, ip
     676:	6899      	ldr	r1, [r3, #8]
     678:	2304      	movs	r3, #4
     67a:	2220      	movs	r2, #32
     67c:	4694      	mov	ip, r2
     67e:	44bc      	add	ip, r7
     680:	4463      	add	r3, ip
     682:	899b      	ldrh	r3, [r3, #12]
     684:	220f      	movs	r2, #15
     686:	18bc      	adds	r4, r7, r2
     688:	001a      	movs	r2, r3
     68a:	4b08      	ldr	r3, [pc, #32]	; (6ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
     68c:	4798      	blx	r3
     68e:	0003      	movs	r3, r0
     690:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     692:	687b      	ldr	r3, [r7, #4]
     694:	0018      	movs	r0, r3
     696:	4b06      	ldr	r3, [pc, #24]	; (6b0 <_at25dfx_chip_issue_write_command_wait+0x100>)
     698:	4798      	blx	r3
}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	46bd      	mov	sp, r7
     69e:	b005      	add	sp, #20
     6a0:	bc90      	pop	{r4, r7}
     6a2:	bc08      	pop	{r3}
     6a4:	b004      	add	sp, #16
     6a6:	4718      	bx	r3
     6a8:	00000469 	.word	0x00000469
     6ac:	00001a4d 	.word	0x00001a4d
     6b0:	00000489 	.word	0x00000489

000006b4 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
     6b4:	b590      	push	{r4, r7, lr}
     6b6:	b085      	sub	sp, #20
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
     6bc:	230c      	movs	r3, #12
     6be:	18fb      	adds	r3, r7, r3
     6c0:	2200      	movs	r2, #0
     6c2:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	681b      	ldr	r3, [r3, #0]
     6ca:	0018      	movs	r0, r3
     6cc:	4b3c      	ldr	r3, [pc, #240]	; (7c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     6ce:	4798      	blx	r3
     6d0:	0003      	movs	r3, r0
     6d2:	001a      	movs	r2, r3
     6d4:	2301      	movs	r3, #1
     6d6:	4053      	eors	r3, r2
     6d8:	b2db      	uxtb	r3, r3
     6da:	2b00      	cmp	r3, #0
     6dc:	d1f3      	bne.n	6c6 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	0018      	movs	r0, r3
     6e2:	4b38      	ldr	r3, [pc, #224]	; (7c4 <_at25dfx_chip_get_nonbusy_status+0x110>)
     6e4:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	220f      	movs	r2, #15
     6ec:	18bc      	adds	r4, r7, r2
     6ee:	2105      	movs	r1, #5
     6f0:	0018      	movs	r0, r3
     6f2:	4b35      	ldr	r3, [pc, #212]	; (7c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
     6f4:	4798      	blx	r3
     6f6:	0003      	movs	r3, r0
     6f8:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	0018      	movs	r0, r3
     702:	4b32      	ldr	r3, [pc, #200]	; (7cc <_at25dfx_chip_get_nonbusy_status+0x118>)
     704:	4798      	blx	r3
     706:	0003      	movs	r3, r0
     708:	001a      	movs	r2, r3
     70a:	2301      	movs	r3, #1
     70c:	4053      	eors	r3, r2
     70e:	b2db      	uxtb	r3, r3
     710:	2b00      	cmp	r3, #0
     712:	d1f3      	bne.n	6fc <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
     714:	687b      	ldr	r3, [r7, #4]
     716:	681b      	ldr	r3, [r3, #0]
     718:	220f      	movs	r2, #15
     71a:	18bc      	adds	r4, r7, r2
     71c:	220c      	movs	r2, #12
     71e:	18ba      	adds	r2, r7, r2
     720:	0011      	movs	r1, r2
     722:	0018      	movs	r0, r3
     724:	4b2a      	ldr	r3, [pc, #168]	; (7d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     726:	4798      	blx	r3
     728:	0003      	movs	r3, r0
     72a:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	687b      	ldr	r3, [r7, #4]
     730:	681b      	ldr	r3, [r3, #0]
     732:	0018      	movs	r0, r3
     734:	4b22      	ldr	r3, [pc, #136]	; (7c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     736:	4798      	blx	r3
     738:	0003      	movs	r3, r0
     73a:	001a      	movs	r2, r3
     73c:	2301      	movs	r3, #1
     73e:	4053      	eors	r3, r2
     740:	b2db      	uxtb	r3, r3
     742:	2b00      	cmp	r3, #0
     744:	d1f3      	bne.n	72e <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
     746:	687b      	ldr	r3, [r7, #4]
     748:	681b      	ldr	r3, [r3, #0]
     74a:	220f      	movs	r2, #15
     74c:	18bc      	adds	r4, r7, r2
     74e:	2100      	movs	r1, #0
     750:	0018      	movs	r0, r3
     752:	4b1d      	ldr	r3, [pc, #116]	; (7c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
     754:	4798      	blx	r3
     756:	0003      	movs	r3, r0
     758:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	681b      	ldr	r3, [r3, #0]
     760:	0018      	movs	r0, r3
     762:	4b1a      	ldr	r3, [pc, #104]	; (7cc <_at25dfx_chip_get_nonbusy_status+0x118>)
     764:	4798      	blx	r3
     766:	0003      	movs	r3, r0
     768:	001a      	movs	r2, r3
     76a:	2301      	movs	r3, #1
     76c:	4053      	eors	r3, r2
     76e:	b2db      	uxtb	r3, r3
     770:	2b00      	cmp	r3, #0
     772:	d1f3      	bne.n	75c <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
     774:	687b      	ldr	r3, [r7, #4]
     776:	681b      	ldr	r3, [r3, #0]
     778:	220f      	movs	r2, #15
     77a:	18bc      	adds	r4, r7, r2
     77c:	220c      	movs	r2, #12
     77e:	18ba      	adds	r2, r7, r2
     780:	0011      	movs	r1, r2
     782:	0018      	movs	r0, r3
     784:	4b12      	ldr	r3, [pc, #72]	; (7d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     786:	4798      	blx	r3
     788:	0003      	movs	r3, r0
     78a:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     78c:	230c      	movs	r3, #12
     78e:	18fb      	adds	r3, r7, r3
     790:	881b      	ldrh	r3, [r3, #0]
     792:	001a      	movs	r2, r3
     794:	2301      	movs	r3, #1
     796:	4013      	ands	r3, r2
     798:	d1c8      	bne.n	72c <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	0018      	movs	r0, r3
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <_at25dfx_chip_get_nonbusy_status+0x120>)
     7a0:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     7a2:	230c      	movs	r3, #12
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	881b      	ldrh	r3, [r3, #0]
     7a8:	001a      	movs	r2, r3
     7aa:	2320      	movs	r3, #32
     7ac:	4013      	ands	r3, r2
     7ae:	d001      	beq.n	7b4 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
     7b0:	2310      	movs	r3, #16
     7b2:	e000      	b.n	7b6 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
     7b4:	2300      	movs	r3, #0
}
     7b6:	0018      	movs	r0, r3
     7b8:	46bd      	mov	sp, r7
     7ba:	b005      	add	sp, #20
     7bc:	bd90      	pop	{r4, r7, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000273 	.word	0x00000273
     7c4:	00000469 	.word	0x00000469
     7c8:	000002c5 	.word	0x000002c5
     7cc:	0000029b 	.word	0x0000029b
     7d0:	0000030d 	.word	0x0000030d
     7d4:	00000489 	.word	0x00000489

000007d8 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
     7d8:	b590      	push	{r4, r7, lr}
     7da:	b089      	sub	sp, #36	; 0x24
     7dc:	af02      	add	r7, sp, #8
     7de:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
     7e0:	2308      	movs	r3, #8
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	2206      	movs	r2, #6
     7e6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     7e8:	2308      	movs	r3, #8
     7ea:	18fb      	adds	r3, r7, r3
     7ec:	2201      	movs	r2, #1
     7ee:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     7f0:	2308      	movs	r3, #8
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	2200      	movs	r2, #0
     7f6:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     7f8:	2308      	movs	r3, #8
     7fa:	18fb      	adds	r3, r7, r3
     7fc:	2200      	movs	r2, #0
     7fe:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     800:	2308      	movs	r3, #8
     802:	18fb      	adds	r3, r7, r3
     804:	2200      	movs	r2, #0
     806:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     808:	2308      	movs	r3, #8
     80a:	18fb      	adds	r3, r7, r3
     80c:	6878      	ldr	r0, [r7, #4]
     80e:	466a      	mov	r2, sp
     810:	68d9      	ldr	r1, [r3, #12]
     812:	6011      	str	r1, [r2, #0]
     814:	6819      	ldr	r1, [r3, #0]
     816:	685a      	ldr	r2, [r3, #4]
     818:	689b      	ldr	r3, [r3, #8]
     81a:	4c03      	ldr	r4, [pc, #12]	; (828 <_at25dfx_chip_enable_write+0x50>)
     81c:	47a0      	blx	r4
}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	46bd      	mov	sp, r7
     822:	b007      	add	sp, #28
     824:	bd90      	pop	{r4, r7, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	000005b1 	.word	0x000005b1

0000082c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
     82c:	b590      	push	{r4, r7, lr}
     82e:	b08b      	sub	sp, #44	; 0x2c
     830:	af02      	add	r7, sp, #8
     832:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
     834:	2300      	movs	r3, #0
     836:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
     838:	687b      	ldr	r3, [r7, #4]
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	221f      	movs	r2, #31
     83e:	18bc      	adds	r4, r7, r2
     840:	0018      	movs	r0, r3
     842:	4b21      	ldr	r3, [pc, #132]	; (8c8 <at25dfx_chip_check_presence+0x9c>)
     844:	4798      	blx	r3
     846:	0003      	movs	r3, r0
     848:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     84a:	231f      	movs	r3, #31
     84c:	18fb      	adds	r3, r7, r3
     84e:	781b      	ldrb	r3, [r3, #0]
     850:	2b05      	cmp	r3, #5
     852:	d103      	bne.n	85c <at25dfx_chip_check_presence+0x30>
		return status;
     854:	231f      	movs	r3, #31
     856:	18fb      	adds	r3, r7, r3
     858:	781b      	ldrb	r3, [r3, #0]
     85a:	e030      	b.n	8be <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
     85c:	230c      	movs	r3, #12
     85e:	18fb      	adds	r3, r7, r3
     860:	229f      	movs	r2, #159	; 0x9f
     862:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     864:	230c      	movs	r3, #12
     866:	18fb      	adds	r3, r7, r3
     868:	2201      	movs	r2, #1
     86a:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
     86c:	230c      	movs	r3, #12
     86e:	18fb      	adds	r3, r7, r3
     870:	2208      	movs	r2, #8
     872:	18ba      	adds	r2, r7, r2
     874:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
     876:	230c      	movs	r3, #12
     878:	18fb      	adds	r3, r7, r3
     87a:	2203      	movs	r2, #3
     87c:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     87e:	230c      	movs	r3, #12
     880:	18fb      	adds	r3, r7, r3
     882:	2200      	movs	r2, #0
     884:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     886:	230c      	movs	r3, #12
     888:	18fb      	adds	r3, r7, r3
     88a:	6878      	ldr	r0, [r7, #4]
     88c:	466a      	mov	r2, sp
     88e:	68d9      	ldr	r1, [r3, #12]
     890:	6011      	str	r1, [r2, #0]
     892:	6819      	ldr	r1, [r3, #0]
     894:	685a      	ldr	r2, [r3, #4]
     896:	689b      	ldr	r3, [r3, #8]
     898:	4c0c      	ldr	r4, [pc, #48]	; (8cc <at25dfx_chip_check_presence+0xa0>)
     89a:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	681b      	ldr	r3, [r3, #0]
     8a0:	0018      	movs	r0, r3
     8a2:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <at25dfx_chip_check_presence+0xa4>)
     8a4:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	791b      	ldrb	r3, [r3, #4]
     8aa:	0018      	movs	r0, r3
     8ac:	4b09      	ldr	r3, [pc, #36]	; (8d4 <at25dfx_chip_check_presence+0xa8>)
     8ae:	4798      	blx	r3
     8b0:	0002      	movs	r2, r0
     8b2:	68bb      	ldr	r3, [r7, #8]
     8b4:	429a      	cmp	r2, r3
     8b6:	d101      	bne.n	8bc <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
     8b8:	2300      	movs	r3, #0
     8ba:	e000      	b.n	8be <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
     8bc:	2314      	movs	r3, #20
	}
}
     8be:	0018      	movs	r0, r3
     8c0:	46bd      	mov	sp, r7
     8c2:	b009      	add	sp, #36	; 0x24
     8c4:	bd90      	pop	{r4, r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00000215 	.word	0x00000215
     8cc:	000004a9 	.word	0x000004a9
     8d0:	0000025d 	.word	0x0000025d
     8d4:	00000395 	.word	0x00000395

000008d8 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
     8d8:	b590      	push	{r4, r7, lr}
     8da:	b08d      	sub	sp, #52	; 0x34
     8dc:	af02      	add	r7, sp, #8
     8de:	60f8      	str	r0, [r7, #12]
     8e0:	60b9      	str	r1, [r7, #8]
     8e2:	607a      	str	r2, [r7, #4]
     8e4:	001a      	movs	r2, r3
     8e6:	1cbb      	adds	r3, r7, #2
     8e8:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     8ea:	1cbb      	adds	r3, r7, #2
     8ec:	881a      	ldrh	r2, [r3, #0]
     8ee:	68bb      	ldr	r3, [r7, #8]
     8f0:	18d4      	adds	r4, r2, r3
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	791b      	ldrb	r3, [r3, #4]
     8f6:	0018      	movs	r0, r3
     8f8:	4b21      	ldr	r3, [pc, #132]	; (980 <at25dfx_chip_read_buffer+0xa8>)
     8fa:	4798      	blx	r3
     8fc:	0003      	movs	r3, r0
     8fe:	429c      	cmp	r4, r3
     900:	d901      	bls.n	906 <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     902:	2317      	movs	r3, #23
     904:	e037      	b.n	976 <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
     906:	68fb      	ldr	r3, [r7, #12]
     908:	681b      	ldr	r3, [r3, #0]
     90a:	2227      	movs	r2, #39	; 0x27
     90c:	18bc      	adds	r4, r7, r2
     90e:	0018      	movs	r0, r3
     910:	4b1c      	ldr	r3, [pc, #112]	; (984 <at25dfx_chip_read_buffer+0xac>)
     912:	4798      	blx	r3
     914:	0003      	movs	r3, r0
     916:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     918:	2327      	movs	r3, #39	; 0x27
     91a:	18fb      	adds	r3, r7, r3
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	2b05      	cmp	r3, #5
     920:	d103      	bne.n	92a <at25dfx_chip_read_buffer+0x52>
		return status;
     922:	2327      	movs	r3, #39	; 0x27
     924:	18fb      	adds	r3, r7, r3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	e025      	b.n	976 <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
     92a:	2314      	movs	r3, #20
     92c:	18fb      	adds	r3, r7, r3
     92e:	220b      	movs	r2, #11
     930:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
     932:	2314      	movs	r3, #20
     934:	18fb      	adds	r3, r7, r3
     936:	2205      	movs	r2, #5
     938:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     93a:	2314      	movs	r3, #20
     93c:	18fb      	adds	r3, r7, r3
     93e:	68ba      	ldr	r2, [r7, #8]
     940:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
     942:	2314      	movs	r3, #20
     944:	18fb      	adds	r3, r7, r3
     946:	687a      	ldr	r2, [r7, #4]
     948:	609a      	str	r2, [r3, #8]
	cmd.length = length;
     94a:	2314      	movs	r3, #20
     94c:	18fb      	adds	r3, r7, r3
     94e:	1cba      	adds	r2, r7, #2
     950:	8812      	ldrh	r2, [r2, #0]
     952:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     954:	2314      	movs	r3, #20
     956:	18fb      	adds	r3, r7, r3
     958:	68f8      	ldr	r0, [r7, #12]
     95a:	466a      	mov	r2, sp
     95c:	68d9      	ldr	r1, [r3, #12]
     95e:	6011      	str	r1, [r2, #0]
     960:	6819      	ldr	r1, [r3, #0]
     962:	685a      	ldr	r2, [r3, #4]
     964:	689b      	ldr	r3, [r3, #8]
     966:	4c08      	ldr	r4, [pc, #32]	; (988 <at25dfx_chip_read_buffer+0xb0>)
     968:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     96a:	68fb      	ldr	r3, [r7, #12]
     96c:	681b      	ldr	r3, [r3, #0]
     96e:	0018      	movs	r0, r3
     970:	4b06      	ldr	r3, [pc, #24]	; (98c <at25dfx_chip_read_buffer+0xb4>)
     972:	4798      	blx	r3

	return STATUS_OK;
     974:	2300      	movs	r3, #0
}
     976:	0018      	movs	r0, r3
     978:	46bd      	mov	sp, r7
     97a:	b00b      	add	sp, #44	; 0x2c
     97c:	bd90      	pop	{r4, r7, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00000411 	.word	0x00000411
     984:	00000215 	.word	0x00000215
     988:	000004a9 	.word	0x000004a9
     98c:	0000025d 	.word	0x0000025d

00000990 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
     990:	b590      	push	{r4, r7, lr}
     992:	b08d      	sub	sp, #52	; 0x34
     994:	af02      	add	r7, sp, #8
     996:	60f8      	str	r0, [r7, #12]
     998:	60b9      	str	r1, [r7, #8]
     99a:	607a      	str	r2, [r7, #4]
     99c:	001a      	movs	r2, r3
     99e:	1cbb      	adds	r3, r7, #2
     9a0:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     9a2:	1cbb      	adds	r3, r7, #2
     9a4:	881a      	ldrh	r2, [r3, #0]
     9a6:	68bb      	ldr	r3, [r7, #8]
     9a8:	18d4      	adds	r4, r2, r3
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	791b      	ldrb	r3, [r3, #4]
     9ae:	0018      	movs	r0, r3
     9b0:	4b5b      	ldr	r3, [pc, #364]	; (b20 <at25dfx_chip_write_buffer+0x190>)
     9b2:	4798      	blx	r3
     9b4:	0003      	movs	r3, r0
     9b6:	429c      	cmp	r4, r3
     9b8:	d901      	bls.n	9be <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     9ba:	2317      	movs	r3, #23
     9bc:	e0ab      	b.n	b16 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	681b      	ldr	r3, [r3, #0]
     9c2:	2227      	movs	r2, #39	; 0x27
     9c4:	18bc      	adds	r4, r7, r2
     9c6:	0018      	movs	r0, r3
     9c8:	4b56      	ldr	r3, [pc, #344]	; (b24 <at25dfx_chip_write_buffer+0x194>)
     9ca:	4798      	blx	r3
     9cc:	0003      	movs	r3, r0
     9ce:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     9d0:	2327      	movs	r3, #39	; 0x27
     9d2:	18fb      	adds	r3, r7, r3
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	2b05      	cmp	r3, #5
     9d8:	d103      	bne.n	9e2 <at25dfx_chip_write_buffer+0x52>
		return status;
     9da:	2327      	movs	r3, #39	; 0x27
     9dc:	18fb      	adds	r3, r7, r3
     9de:	781b      	ldrb	r3, [r3, #0]
     9e0:	e099      	b.n	b16 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
     9e2:	68fb      	ldr	r3, [r7, #12]
     9e4:	0018      	movs	r0, r3
     9e6:	4b50      	ldr	r3, [pc, #320]	; (b28 <at25dfx_chip_write_buffer+0x198>)
     9e8:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
     9ea:	2314      	movs	r3, #20
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	2202      	movs	r2, #2
     9f0:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     9f2:	2314      	movs	r3, #20
     9f4:	18fb      	adds	r3, r7, r3
     9f6:	2204      	movs	r2, #4
     9f8:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     9fa:	2314      	movs	r3, #20
     9fc:	18fb      	adds	r3, r7, r3
     9fe:	68ba      	ldr	r2, [r7, #8]
     a00:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
     a02:	2314      	movs	r3, #20
     a04:	18fb      	adds	r3, r7, r3
     a06:	687a      	ldr	r2, [r7, #4]
     a08:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     a0a:	68bb      	ldr	r3, [r7, #8]
     a0c:	b29b      	uxth	r3, r3
     a0e:	22ff      	movs	r2, #255	; 0xff
     a10:	4013      	ands	r3, r2
     a12:	b29a      	uxth	r2, r3
     a14:	2324      	movs	r3, #36	; 0x24
     a16:	18fb      	adds	r3, r7, r3
     a18:	2180      	movs	r1, #128	; 0x80
     a1a:	0049      	lsls	r1, r1, #1
     a1c:	1a8a      	subs	r2, r1, r2
     a1e:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
     a20:	1cbb      	adds	r3, r7, #2
     a22:	2224      	movs	r2, #36	; 0x24
     a24:	18ba      	adds	r2, r7, r2
     a26:	8810      	ldrh	r0, [r2, #0]
     a28:	881b      	ldrh	r3, [r3, #0]
     a2a:	b299      	uxth	r1, r3
     a2c:	b282      	uxth	r2, r0
     a2e:	4291      	cmp	r1, r2
     a30:	d900      	bls.n	a34 <at25dfx_chip_write_buffer+0xa4>
     a32:	1c03      	adds	r3, r0, #0
     a34:	b29a      	uxth	r2, r3
     a36:	2314      	movs	r3, #20
     a38:	18fb      	adds	r3, r7, r3
     a3a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     a3c:	2314      	movs	r3, #20
     a3e:	18fb      	adds	r3, r7, r3
     a40:	68f8      	ldr	r0, [r7, #12]
     a42:	466a      	mov	r2, sp
     a44:	68d9      	ldr	r1, [r3, #12]
     a46:	6011      	str	r1, [r2, #0]
     a48:	6819      	ldr	r1, [r3, #0]
     a4a:	685a      	ldr	r2, [r3, #4]
     a4c:	689b      	ldr	r3, [r3, #8]
     a4e:	4c37      	ldr	r4, [pc, #220]	; (b2c <at25dfx_chip_write_buffer+0x19c>)
     a50:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     a52:	2327      	movs	r3, #39	; 0x27
     a54:	18fc      	adds	r4, r7, r3
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	0018      	movs	r0, r3
     a5a:	4b35      	ldr	r3, [pc, #212]	; (b30 <at25dfx_chip_write_buffer+0x1a0>)
     a5c:	4798      	blx	r3
     a5e:	0003      	movs	r3, r0
     a60:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
     a62:	2314      	movs	r3, #20
     a64:	18fb      	adds	r3, r7, r3
     a66:	899a      	ldrh	r2, [r3, #12]
     a68:	1cbb      	adds	r3, r7, #2
     a6a:	1cb9      	adds	r1, r7, #2
     a6c:	8809      	ldrh	r1, [r1, #0]
     a6e:	1a8a      	subs	r2, r1, r2
     a70:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
     a72:	e03f      	b.n	af4 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	0018      	movs	r0, r3
     a78:	4b2b      	ldr	r3, [pc, #172]	; (b28 <at25dfx_chip_write_buffer+0x198>)
     a7a:	4798      	blx	r3

		cmd.address += cmd.length;
     a7c:	2314      	movs	r3, #20
     a7e:	18fb      	adds	r3, r7, r3
     a80:	685b      	ldr	r3, [r3, #4]
     a82:	2214      	movs	r2, #20
     a84:	18ba      	adds	r2, r7, r2
     a86:	8992      	ldrh	r2, [r2, #12]
     a88:	189a      	adds	r2, r3, r2
     a8a:	2314      	movs	r3, #20
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
     a90:	2314      	movs	r3, #20
     a92:	18fb      	adds	r3, r7, r3
     a94:	689b      	ldr	r3, [r3, #8]
     a96:	2214      	movs	r2, #20
     a98:	18ba      	adds	r2, r7, r2
     a9a:	8992      	ldrh	r2, [r2, #12]
     a9c:	189a      	adds	r2, r3, r2
     a9e:	2314      	movs	r3, #20
     aa0:	18fb      	adds	r3, r7, r3
     aa2:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     aa4:	1cbb      	adds	r3, r7, #2
     aa6:	881b      	ldrh	r3, [r3, #0]
     aa8:	b299      	uxth	r1, r3
     aaa:	2280      	movs	r2, #128	; 0x80
     aac:	0052      	lsls	r2, r2, #1
     aae:	4291      	cmp	r1, r2
     ab0:	d901      	bls.n	ab6 <at25dfx_chip_write_buffer+0x126>
     ab2:	2380      	movs	r3, #128	; 0x80
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	b29a      	uxth	r2, r3
     ab8:	2314      	movs	r3, #20
     aba:	18fb      	adds	r3, r7, r3
     abc:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
     abe:	2314      	movs	r3, #20
     ac0:	18fb      	adds	r3, r7, r3
     ac2:	68f8      	ldr	r0, [r7, #12]
     ac4:	466a      	mov	r2, sp
     ac6:	68d9      	ldr	r1, [r3, #12]
     ac8:	6011      	str	r1, [r2, #0]
     aca:	6819      	ldr	r1, [r3, #0]
     acc:	685a      	ldr	r2, [r3, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	4c16      	ldr	r4, [pc, #88]	; (b2c <at25dfx_chip_write_buffer+0x19c>)
     ad2:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
     ad4:	2327      	movs	r3, #39	; 0x27
     ad6:	18fc      	adds	r4, r7, r3
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	0018      	movs	r0, r3
     adc:	4b14      	ldr	r3, [pc, #80]	; (b30 <at25dfx_chip_write_buffer+0x1a0>)
     ade:	4798      	blx	r3
     ae0:	0003      	movs	r3, r0
     ae2:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
     ae4:	2314      	movs	r3, #20
     ae6:	18fb      	adds	r3, r7, r3
     ae8:	899a      	ldrh	r2, [r3, #12]
     aea:	1cbb      	adds	r3, r7, #2
     aec:	1cb9      	adds	r1, r7, #2
     aee:	8809      	ldrh	r1, [r1, #0]
     af0:	1a8a      	subs	r2, r1, r2
     af2:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
     af4:	1cbb      	adds	r3, r7, #2
     af6:	881b      	ldrh	r3, [r3, #0]
     af8:	2b00      	cmp	r3, #0
     afa:	d004      	beq.n	b06 <at25dfx_chip_write_buffer+0x176>
     afc:	2327      	movs	r3, #39	; 0x27
     afe:	18fb      	adds	r3, r7, r3
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	2b00      	cmp	r3, #0
     b04:	d0b6      	beq.n	a74 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	0018      	movs	r0, r3
     b0c:	4b09      	ldr	r3, [pc, #36]	; (b34 <at25dfx_chip_write_buffer+0x1a4>)
     b0e:	4798      	blx	r3

	return status;
     b10:	2327      	movs	r3, #39	; 0x27
     b12:	18fb      	adds	r3, r7, r3
     b14:	781b      	ldrb	r3, [r3, #0]
}
     b16:	0018      	movs	r0, r3
     b18:	46bd      	mov	sp, r7
     b1a:	b00b      	add	sp, #44	; 0x2c
     b1c:	bd90      	pop	{r4, r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00000411 	.word	0x00000411
     b24:	00000215 	.word	0x00000215
     b28:	000007d9 	.word	0x000007d9
     b2c:	000005b1 	.word	0x000005b1
     b30:	000006b5 	.word	0x000006b5
     b34:	0000025d 	.word	0x0000025d

00000b38 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     b38:	b590      	push	{r4, r7, lr}
     b3a:	b08d      	sub	sp, #52	; 0x34
     b3c:	af02      	add	r7, sp, #8
     b3e:	60f8      	str	r0, [r7, #12]
     b40:	60b9      	str	r1, [r7, #8]
     b42:	1dfb      	adds	r3, r7, #7
     b44:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	791b      	ldrb	r3, [r3, #4]
     b4a:	0018      	movs	r0, r3
     b4c:	4b33      	ldr	r3, [pc, #204]	; (c1c <at25dfx_chip_erase_block+0xe4>)
     b4e:	4798      	blx	r3
     b50:	0002      	movs	r2, r0
     b52:	68bb      	ldr	r3, [r7, #8]
     b54:	429a      	cmp	r2, r3
     b56:	d801      	bhi.n	b5c <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
     b58:	2317      	movs	r3, #23
     b5a:	e05b      	b.n	c14 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	2227      	movs	r2, #39	; 0x27
     b62:	18bc      	adds	r4, r7, r2
     b64:	0018      	movs	r0, r3
     b66:	4b2e      	ldr	r3, [pc, #184]	; (c20 <at25dfx_chip_erase_block+0xe8>)
     b68:	4798      	blx	r3
     b6a:	0003      	movs	r3, r0
     b6c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     b6e:	2327      	movs	r3, #39	; 0x27
     b70:	18fb      	adds	r3, r7, r3
     b72:	781b      	ldrb	r3, [r3, #0]
     b74:	2b05      	cmp	r3, #5
     b76:	d103      	bne.n	b80 <at25dfx_chip_erase_block+0x48>
		return status;
     b78:	2327      	movs	r3, #39	; 0x27
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	781b      	ldrb	r3, [r3, #0]
     b7e:	e049      	b.n	c14 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	0018      	movs	r0, r3
     b84:	4b27      	ldr	r3, [pc, #156]	; (c24 <at25dfx_chip_erase_block+0xec>)
     b86:	4798      	blx	r3

	switch (block_size) {
     b88:	1dfb      	adds	r3, r7, #7
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	2b01      	cmp	r3, #1
     b8e:	d008      	beq.n	ba2 <at25dfx_chip_erase_block+0x6a>
     b90:	2b02      	cmp	r3, #2
     b92:	d00b      	beq.n	bac <at25dfx_chip_erase_block+0x74>
     b94:	2b00      	cmp	r3, #0
     b96:	d10e      	bne.n	bb6 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     b98:	2314      	movs	r3, #20
     b9a:	18fb      	adds	r3, r7, r3
     b9c:	2220      	movs	r2, #32
     b9e:	701a      	strb	r2, [r3, #0]
		break;
     ba0:	e00d      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     ba2:	2314      	movs	r3, #20
     ba4:	18fb      	adds	r3, r7, r3
     ba6:	2252      	movs	r2, #82	; 0x52
     ba8:	701a      	strb	r2, [r3, #0]
		break;
     baa:	e008      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     bac:	2314      	movs	r3, #20
     bae:	18fb      	adds	r3, r7, r3
     bb0:	22d8      	movs	r2, #216	; 0xd8
     bb2:	701a      	strb	r2, [r3, #0]
		break;
     bb4:	e003      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
     bb6:	2314      	movs	r3, #20
     bb8:	18fb      	adds	r3, r7, r3
     bba:	2200      	movs	r2, #0
     bbc:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
     bbe:	2314      	movs	r3, #20
     bc0:	18fb      	adds	r3, r7, r3
     bc2:	2204      	movs	r2, #4
     bc4:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     bc6:	2314      	movs	r3, #20
     bc8:	18fb      	adds	r3, r7, r3
     bca:	68ba      	ldr	r2, [r7, #8]
     bcc:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     bce:	2314      	movs	r3, #20
     bd0:	18fb      	adds	r3, r7, r3
     bd2:	2200      	movs	r2, #0
     bd4:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     bd6:	2314      	movs	r3, #20
     bd8:	18fb      	adds	r3, r7, r3
     bda:	2200      	movs	r2, #0
     bdc:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     bde:	2314      	movs	r3, #20
     be0:	18fb      	adds	r3, r7, r3
     be2:	68f8      	ldr	r0, [r7, #12]
     be4:	466a      	mov	r2, sp
     be6:	68d9      	ldr	r1, [r3, #12]
     be8:	6011      	str	r1, [r2, #0]
     bea:	6819      	ldr	r1, [r3, #0]
     bec:	685a      	ldr	r2, [r3, #4]
     bee:	689b      	ldr	r3, [r3, #8]
     bf0:	4c0d      	ldr	r4, [pc, #52]	; (c28 <at25dfx_chip_erase_block+0xf0>)
     bf2:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     bf4:	2327      	movs	r3, #39	; 0x27
     bf6:	18fc      	adds	r4, r7, r3
     bf8:	68fb      	ldr	r3, [r7, #12]
     bfa:	0018      	movs	r0, r3
     bfc:	4b0b      	ldr	r3, [pc, #44]	; (c2c <at25dfx_chip_erase_block+0xf4>)
     bfe:	4798      	blx	r3
     c00:	0003      	movs	r3, r0
     c02:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
     c04:	68fb      	ldr	r3, [r7, #12]
     c06:	681b      	ldr	r3, [r3, #0]
     c08:	0018      	movs	r0, r3
     c0a:	4b09      	ldr	r3, [pc, #36]	; (c30 <at25dfx_chip_erase_block+0xf8>)
     c0c:	4798      	blx	r3

	return status;
     c0e:	2327      	movs	r3, #39	; 0x27
     c10:	18fb      	adds	r3, r7, r3
     c12:	781b      	ldrb	r3, [r3, #0]
}
     c14:	0018      	movs	r0, r3
     c16:	46bd      	mov	sp, r7
     c18:	b00b      	add	sp, #44	; 0x2c
     c1a:	bd90      	pop	{r4, r7, pc}
     c1c:	00000411 	.word	0x00000411
     c20:	00000215 	.word	0x00000215
     c24:	000007d9 	.word	0x000007d9
     c28:	000005b1 	.word	0x000005b1
     c2c:	000006b5 	.word	0x000006b5
     c30:	0000025d 	.word	0x0000025d

00000c34 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     c34:	b590      	push	{r4, r7, lr}
     c36:	b08b      	sub	sp, #44	; 0x2c
     c38:	af02      	add	r7, sp, #8
     c3a:	6078      	str	r0, [r7, #4]
     c3c:	000a      	movs	r2, r1
     c3e:	1cfb      	adds	r3, r7, #3
     c40:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	221f      	movs	r2, #31
     c48:	18bc      	adds	r4, r7, r2
     c4a:	0018      	movs	r0, r3
     c4c:	4b22      	ldr	r3, [pc, #136]	; (cd8 <at25dfx_chip_set_global_sector_protect+0xa4>)
     c4e:	4798      	blx	r3
     c50:	0003      	movs	r3, r0
     c52:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     c54:	231f      	movs	r3, #31
     c56:	18fb      	adds	r3, r7, r3
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	2b05      	cmp	r3, #5
     c5c:	d103      	bne.n	c66 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
     c5e:	231f      	movs	r3, #31
     c60:	18fb      	adds	r3, r7, r3
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	e033      	b.n	cce <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	0018      	movs	r0, r3
     c6a:	4b1c      	ldr	r3, [pc, #112]	; (cdc <at25dfx_chip_set_global_sector_protect+0xa8>)
     c6c:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     c6e:	1cfb      	adds	r3, r7, #3
     c70:	781b      	ldrb	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d001      	beq.n	c7a <at25dfx_chip_set_global_sector_protect+0x46>
     c76:	223c      	movs	r2, #60	; 0x3c
     c78:	e000      	b.n	c7c <at25dfx_chip_set_global_sector_protect+0x48>
     c7a:	2200      	movs	r2, #0
     c7c:	230b      	movs	r3, #11
     c7e:	18fb      	adds	r3, r7, r3
     c80:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
     c82:	230c      	movs	r3, #12
     c84:	18fb      	adds	r3, r7, r3
     c86:	2201      	movs	r2, #1
     c88:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     c8a:	230c      	movs	r3, #12
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	2201      	movs	r2, #1
     c90:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
     c92:	230c      	movs	r3, #12
     c94:	18fb      	adds	r3, r7, r3
     c96:	2201      	movs	r2, #1
     c98:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
     c9a:	230c      	movs	r3, #12
     c9c:	18fb      	adds	r3, r7, r3
     c9e:	220b      	movs	r2, #11
     ca0:	18ba      	adds	r2, r7, r2
     ca2:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     ca4:	230c      	movs	r3, #12
     ca6:	18fb      	adds	r3, r7, r3
     ca8:	2200      	movs	r2, #0
     caa:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     cac:	230c      	movs	r3, #12
     cae:	18fb      	adds	r3, r7, r3
     cb0:	6878      	ldr	r0, [r7, #4]
     cb2:	466a      	mov	r2, sp
     cb4:	68d9      	ldr	r1, [r3, #12]
     cb6:	6011      	str	r1, [r2, #0]
     cb8:	6819      	ldr	r1, [r3, #0]
     cba:	685a      	ldr	r2, [r3, #4]
     cbc:	689b      	ldr	r3, [r3, #8]
     cbe:	4c08      	ldr	r4, [pc, #32]	; (ce0 <at25dfx_chip_set_global_sector_protect+0xac>)
     cc0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	0018      	movs	r0, r3
     cc8:	4b06      	ldr	r3, [pc, #24]	; (ce4 <at25dfx_chip_set_global_sector_protect+0xb0>)
     cca:	4798      	blx	r3

	return STATUS_OK;
     ccc:	2300      	movs	r3, #0
}
     cce:	0018      	movs	r0, r3
     cd0:	46bd      	mov	sp, r7
     cd2:	b009      	add	sp, #36	; 0x24
     cd4:	bd90      	pop	{r4, r7, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00000215 	.word	0x00000215
     cdc:	000007d9 	.word	0x000007d9
     ce0:	000005b1 	.word	0x000005b1
     ce4:	0000025d 	.word	0x0000025d

00000ce8 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     ce8:	b590      	push	{r4, r7, lr}
     cea:	b08d      	sub	sp, #52	; 0x34
     cec:	af02      	add	r7, sp, #8
     cee:	60f8      	str	r0, [r7, #12]
     cf0:	60b9      	str	r1, [r7, #8]
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	791b      	ldrb	r3, [r3, #4]
     cfa:	0018      	movs	r0, r3
     cfc:	4b26      	ldr	r3, [pc, #152]	; (d98 <at25dfx_chip_set_sector_protect+0xb0>)
     cfe:	4798      	blx	r3
     d00:	0002      	movs	r2, r0
     d02:	68bb      	ldr	r3, [r7, #8]
     d04:	429a      	cmp	r2, r3
     d06:	d801      	bhi.n	d0c <at25dfx_chip_set_sector_protect+0x24>
		return STATUS_ERR_INVALID_ARG;
     d08:	2317      	movs	r3, #23
     d0a:	e040      	b.n	d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	status = _at25dfx_spi_lock(chip->spi);
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	2227      	movs	r2, #39	; 0x27
     d12:	18bc      	adds	r4, r7, r2
     d14:	0018      	movs	r0, r3
     d16:	4b21      	ldr	r3, [pc, #132]	; (d9c <at25dfx_chip_set_sector_protect+0xb4>)
     d18:	4798      	blx	r3
     d1a:	0003      	movs	r3, r0
     d1c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     d1e:	2327      	movs	r3, #39	; 0x27
     d20:	18fb      	adds	r3, r7, r3
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	2b05      	cmp	r3, #5
     d26:	d103      	bne.n	d30 <at25dfx_chip_set_sector_protect+0x48>
		return status;
     d28:	2327      	movs	r3, #39	; 0x27
     d2a:	18fb      	adds	r3, r7, r3
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	e02e      	b.n	d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	_at25dfx_chip_enable_write(chip);
     d30:	68fb      	ldr	r3, [r7, #12]
     d32:	0018      	movs	r0, r3
     d34:	4b1a      	ldr	r3, [pc, #104]	; (da0 <at25dfx_chip_set_sector_protect+0xb8>)
     d36:	4798      	blx	r3

	cmd.opcode = protect ?
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d001      	beq.n	d44 <at25dfx_chip_set_sector_protect+0x5c>
     d40:	2236      	movs	r2, #54	; 0x36
     d42:	e000      	b.n	d46 <at25dfx_chip_set_sector_protect+0x5e>
     d44:	2239      	movs	r2, #57	; 0x39
	cmd.opcode = protect ?
     d46:	2314      	movs	r3, #20
     d48:	18fb      	adds	r3, r7, r3
     d4a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     d4c:	2314      	movs	r3, #20
     d4e:	18fb      	adds	r3, r7, r3
     d50:	2204      	movs	r2, #4
     d52:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     d54:	2314      	movs	r3, #20
     d56:	18fb      	adds	r3, r7, r3
     d58:	68ba      	ldr	r2, [r7, #8]
     d5a:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     d5c:	2314      	movs	r3, #20
     d5e:	18fb      	adds	r3, r7, r3
     d60:	2200      	movs	r2, #0
     d62:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     d64:	2314      	movs	r3, #20
     d66:	18fb      	adds	r3, r7, r3
     d68:	2200      	movs	r2, #0
     d6a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     d6c:	2314      	movs	r3, #20
     d6e:	18fb      	adds	r3, r7, r3
     d70:	68f8      	ldr	r0, [r7, #12]
     d72:	466a      	mov	r2, sp
     d74:	68d9      	ldr	r1, [r3, #12]
     d76:	6011      	str	r1, [r2, #0]
     d78:	6819      	ldr	r1, [r3, #0]
     d7a:	685a      	ldr	r2, [r3, #4]
     d7c:	689b      	ldr	r3, [r3, #8]
     d7e:	4c09      	ldr	r4, [pc, #36]	; (da4 <at25dfx_chip_set_sector_protect+0xbc>)
     d80:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     d82:	68fb      	ldr	r3, [r7, #12]
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	0018      	movs	r0, r3
     d88:	4b07      	ldr	r3, [pc, #28]	; (da8 <at25dfx_chip_set_sector_protect+0xc0>)
     d8a:	4798      	blx	r3

	return STATUS_OK;
     d8c:	2300      	movs	r3, #0
}
     d8e:	0018      	movs	r0, r3
     d90:	46bd      	mov	sp, r7
     d92:	b00b      	add	sp, #44	; 0x2c
     d94:	bd90      	pop	{r4, r7, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000411 	.word	0x00000411
     d9c:	00000215 	.word	0x00000215
     da0:	000007d9 	.word	0x000007d9
     da4:	000005b1 	.word	0x000005b1
     da8:	0000025d 	.word	0x0000025d

00000dac <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     dac:	b590      	push	{r4, r7, lr}
     dae:	b08b      	sub	sp, #44	; 0x2c
     db0:	af02      	add	r7, sp, #8
     db2:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	221f      	movs	r2, #31
     dba:	18bc      	adds	r4, r7, r2
     dbc:	0018      	movs	r0, r3
     dbe:	4b1b      	ldr	r3, [pc, #108]	; (e2c <at25dfx_chip_sleep+0x80>)
     dc0:	4798      	blx	r3
     dc2:	0003      	movs	r3, r0
     dc4:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     dc6:	231f      	movs	r3, #31
     dc8:	18fb      	adds	r3, r7, r3
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	2b05      	cmp	r3, #5
     dce:	d103      	bne.n	dd8 <at25dfx_chip_sleep+0x2c>
		return status;
     dd0:	231f      	movs	r3, #31
     dd2:	18fb      	adds	r3, r7, r3
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	e024      	b.n	e22 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
     dd8:	230c      	movs	r3, #12
     dda:	18fb      	adds	r3, r7, r3
     ddc:	22b9      	movs	r2, #185	; 0xb9
     dde:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     de0:	230c      	movs	r3, #12
     de2:	18fb      	adds	r3, r7, r3
     de4:	2201      	movs	r2, #1
     de6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     de8:	230c      	movs	r3, #12
     dea:	18fb      	adds	r3, r7, r3
     dec:	2200      	movs	r2, #0
     dee:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     df0:	230c      	movs	r3, #12
     df2:	18fb      	adds	r3, r7, r3
     df4:	2200      	movs	r2, #0
     df6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     df8:	230c      	movs	r3, #12
     dfa:	18fb      	adds	r3, r7, r3
     dfc:	2200      	movs	r2, #0
     dfe:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     e00:	230c      	movs	r3, #12
     e02:	18fb      	adds	r3, r7, r3
     e04:	6878      	ldr	r0, [r7, #4]
     e06:	466a      	mov	r2, sp
     e08:	68d9      	ldr	r1, [r3, #12]
     e0a:	6011      	str	r1, [r2, #0]
     e0c:	6819      	ldr	r1, [r3, #0]
     e0e:	685a      	ldr	r2, [r3, #4]
     e10:	689b      	ldr	r3, [r3, #8]
     e12:	4c07      	ldr	r4, [pc, #28]	; (e30 <at25dfx_chip_sleep+0x84>)
     e14:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	0018      	movs	r0, r3
     e1c:	4b05      	ldr	r3, [pc, #20]	; (e34 <at25dfx_chip_sleep+0x88>)
     e1e:	4798      	blx	r3

	return STATUS_OK;
     e20:	2300      	movs	r3, #0
}
     e22:	0018      	movs	r0, r3
     e24:	46bd      	mov	sp, r7
     e26:	b009      	add	sp, #36	; 0x24
     e28:	bd90      	pop	{r4, r7, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	00000215 	.word	0x00000215
     e30:	000005b1 	.word	0x000005b1
     e34:	0000025d 	.word	0x0000025d

00000e38 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     e38:	b590      	push	{r4, r7, lr}
     e3a:	b08b      	sub	sp, #44	; 0x2c
     e3c:	af02      	add	r7, sp, #8
     e3e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	221f      	movs	r2, #31
     e46:	18bc      	adds	r4, r7, r2
     e48:	0018      	movs	r0, r3
     e4a:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <at25dfx_chip_wake+0x80>)
     e4c:	4798      	blx	r3
     e4e:	0003      	movs	r3, r0
     e50:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     e52:	231f      	movs	r3, #31
     e54:	18fb      	adds	r3, r7, r3
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	2b05      	cmp	r3, #5
     e5a:	d103      	bne.n	e64 <at25dfx_chip_wake+0x2c>
		return status;
     e5c:	231f      	movs	r3, #31
     e5e:	18fb      	adds	r3, r7, r3
     e60:	781b      	ldrb	r3, [r3, #0]
     e62:	e024      	b.n	eae <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
     e64:	230c      	movs	r3, #12
     e66:	18fb      	adds	r3, r7, r3
     e68:	22ab      	movs	r2, #171	; 0xab
     e6a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     e6c:	230c      	movs	r3, #12
     e6e:	18fb      	adds	r3, r7, r3
     e70:	2201      	movs	r2, #1
     e72:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     e74:	230c      	movs	r3, #12
     e76:	18fb      	adds	r3, r7, r3
     e78:	2200      	movs	r2, #0
     e7a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     e7c:	230c      	movs	r3, #12
     e7e:	18fb      	adds	r3, r7, r3
     e80:	2200      	movs	r2, #0
     e82:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     e84:	230c      	movs	r3, #12
     e86:	18fb      	adds	r3, r7, r3
     e88:	2200      	movs	r2, #0
     e8a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     e8c:	230c      	movs	r3, #12
     e8e:	18fb      	adds	r3, r7, r3
     e90:	6878      	ldr	r0, [r7, #4]
     e92:	466a      	mov	r2, sp
     e94:	68d9      	ldr	r1, [r3, #12]
     e96:	6011      	str	r1, [r2, #0]
     e98:	6819      	ldr	r1, [r3, #0]
     e9a:	685a      	ldr	r2, [r3, #4]
     e9c:	689b      	ldr	r3, [r3, #8]
     e9e:	4c07      	ldr	r4, [pc, #28]	; (ebc <at25dfx_chip_wake+0x84>)
     ea0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	0018      	movs	r0, r3
     ea8:	4b05      	ldr	r3, [pc, #20]	; (ec0 <at25dfx_chip_wake+0x88>)
     eaa:	4798      	blx	r3

	return STATUS_OK;
     eac:	2300      	movs	r3, #0
     eae:	0018      	movs	r0, r3
     eb0:	46bd      	mov	sp, r7
     eb2:	b009      	add	sp, #36	; 0x24
     eb4:	bd90      	pop	{r4, r7, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000215 	.word	0x00000215
     ebc:	000005b1 	.word	0x000005b1
     ec0:	0000025d 	.word	0x0000025d

00000ec4 <_crc32_recalculate_bytes_helper>:
 *
 * \attention This implementation assumes a little-endian architecture.
 */
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
     ec4:	b580      	push	{r7, lr}
     ec6:	b086      	sub	sp, #24
     ec8:	af00      	add	r7, sp, #0
     eca:	60f8      	str	r0, [r7, #12]
     ecc:	60b9      	str	r1, [r7, #8]
     ece:	607a      	str	r2, [r7, #4]
	uint_fast8_t bit;

	crc ^= data;
     ed0:	68ba      	ldr	r2, [r7, #8]
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	4053      	eors	r3, r2
     ed6:	60bb      	str	r3, [r7, #8]

	for (bit = 8 * bytes; bit > 0; bit--) {
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	00db      	lsls	r3, r3, #3
     edc:	617b      	str	r3, [r7, #20]
     ede:	e00f      	b.n	f00 <_crc32_recalculate_bytes_helper+0x3c>
		if (crc & 1) {
     ee0:	68bb      	ldr	r3, [r7, #8]
     ee2:	2201      	movs	r2, #1
     ee4:	4013      	ands	r3, r2
     ee6:	d005      	beq.n	ef4 <_crc32_recalculate_bytes_helper+0x30>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     ee8:	68bb      	ldr	r3, [r7, #8]
     eea:	085b      	lsrs	r3, r3, #1
     eec:	4a08      	ldr	r2, [pc, #32]	; (f10 <_crc32_recalculate_bytes_helper+0x4c>)
     eee:	4053      	eors	r3, r2
     ef0:	60bb      	str	r3, [r7, #8]
     ef2:	e002      	b.n	efa <_crc32_recalculate_bytes_helper+0x36>
		} else {
			crc >>= 1;
     ef4:	68bb      	ldr	r3, [r7, #8]
     ef6:	085b      	lsrs	r3, r3, #1
     ef8:	60bb      	str	r3, [r7, #8]
	for (bit = 8 * bytes; bit > 0; bit--) {
     efa:	697b      	ldr	r3, [r7, #20]
     efc:	3b01      	subs	r3, #1
     efe:	617b      	str	r3, [r7, #20]
     f00:	697b      	ldr	r3, [r7, #20]
     f02:	2b00      	cmp	r3, #0
     f04:	d1ec      	bne.n	ee0 <_crc32_recalculate_bytes_helper+0x1c>
		}
	}

	return crc;
     f06:	68bb      	ldr	r3, [r7, #8]
}
     f08:	0018      	movs	r0, r3
     f0a:	46bd      	mov	sp, r7
     f0c:	b006      	add	sp, #24
     f0e:	bd80      	pop	{r7, pc}
     f10:	edb88320 	.word	0xedb88320

00000f14 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
     f14:	b580      	push	{r7, lr}
     f16:	b088      	sub	sp, #32
     f18:	af00      	add	r7, sp, #0
     f1a:	60f8      	str	r0, [r7, #12]
     f1c:	60b9      	str	r1, [r7, #8]
     f1e:	607a      	str	r2, [r7, #4]
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
     f20:	68fb      	ldr	r3, [r7, #12]
     f22:	2203      	movs	r2, #3
     f24:	4393      	bics	r3, r2
	const word_t *word_ptr =
     f26:	61fb      	str	r3, [r7, #28]
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
     f28:	687b      	ldr	r3, [r7, #4]
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	43db      	mvns	r3, r3
     f2e:	617b      	str	r3, [r7, #20]
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
     f30:	68bb      	ldr	r3, [r7, #8]
     f32:	2b03      	cmp	r3, #3
     f34:	d802      	bhi.n	f3c <crc32_recalculate+0x28>
		temp_length = length;
     f36:	68bb      	ldr	r3, [r7, #8]
     f38:	61bb      	str	r3, [r7, #24]
     f3a:	e004      	b.n	f46 <crc32_recalculate+0x32>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
     f3c:	68fb      	ldr	r3, [r7, #12]
     f3e:	425b      	negs	r3, r3
     f40:	2203      	movs	r2, #3
     f42:	4013      	ands	r3, r2
     f44:	61bb      	str	r3, [r7, #24]
	}

	if (temp_length) {
     f46:	69bb      	ldr	r3, [r7, #24]
     f48:	2b00      	cmp	r3, #0
     f4a:	d01a      	beq.n	f82 <crc32_recalculate+0x6e>
		length -= temp_length;
     f4c:	68ba      	ldr	r2, [r7, #8]
     f4e:	69bb      	ldr	r3, [r7, #24]
     f50:	1ad3      	subs	r3, r2, r3
     f52:	60bb      	str	r3, [r7, #8]

		word = *(word_ptr++);
     f54:	69fb      	ldr	r3, [r7, #28]
     f56:	1d1a      	adds	r2, r3, #4
     f58:	61fa      	str	r2, [r7, #28]
     f5a:	681b      	ldr	r3, [r3, #0]
     f5c:	613b      	str	r3, [r7, #16]
		word >>= 8 * (WORD_SIZE - temp_length);
     f5e:	69ba      	ldr	r2, [r7, #24]
     f60:	0013      	movs	r3, r2
     f62:	075b      	lsls	r3, r3, #29
     f64:	1a9b      	subs	r3, r3, r2
     f66:	00db      	lsls	r3, r3, #3
     f68:	3320      	adds	r3, #32
     f6a:	693a      	ldr	r2, [r7, #16]
     f6c:	40da      	lsrs	r2, r3
     f6e:	0013      	movs	r3, r2
     f70:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
     f72:	69ba      	ldr	r2, [r7, #24]
     f74:	6979      	ldr	r1, [r7, #20]
     f76:	693b      	ldr	r3, [r7, #16]
     f78:	0018      	movs	r0, r3
     f7a:	4b24      	ldr	r3, [pc, #144]	; (100c <crc32_recalculate+0xf8>)
     f7c:	4798      	blx	r3
     f7e:	0003      	movs	r3, r0
     f80:	617b      	str	r3, [r7, #20]
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
     f82:	68bb      	ldr	r3, [r7, #8]
     f84:	2203      	movs	r2, #3
     f86:	4393      	bics	r3, r2
     f88:	61bb      	str	r3, [r7, #24]

	if (temp_length) {
     f8a:	69bb      	ldr	r3, [r7, #24]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d019      	beq.n	fc4 <crc32_recalculate+0xb0>
		length -= temp_length;
     f90:	68ba      	ldr	r2, [r7, #8]
     f92:	69bb      	ldr	r3, [r7, #24]
     f94:	1ad3      	subs	r3, r2, r3
     f96:	60bb      	str	r3, [r7, #8]
		temp_length /= WORD_SIZE;
     f98:	69bb      	ldr	r3, [r7, #24]
     f9a:	089b      	lsrs	r3, r3, #2
     f9c:	61bb      	str	r3, [r7, #24]

		while (temp_length--) {
     f9e:	e00c      	b.n	fba <crc32_recalculate+0xa6>
			word = *(word_ptr++);
     fa0:	69fb      	ldr	r3, [r7, #28]
     fa2:	1d1a      	adds	r2, r3, #4
     fa4:	61fa      	str	r2, [r7, #28]
     fa6:	681b      	ldr	r3, [r3, #0]
     fa8:	613b      	str	r3, [r7, #16]
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
     faa:	6979      	ldr	r1, [r7, #20]
     fac:	693b      	ldr	r3, [r7, #16]
     fae:	2204      	movs	r2, #4
     fb0:	0018      	movs	r0, r3
     fb2:	4b16      	ldr	r3, [pc, #88]	; (100c <crc32_recalculate+0xf8>)
     fb4:	4798      	blx	r3
     fb6:	0003      	movs	r3, r0
     fb8:	617b      	str	r3, [r7, #20]
		while (temp_length--) {
     fba:	69bb      	ldr	r3, [r7, #24]
     fbc:	1e5a      	subs	r2, r3, #1
     fbe:	61ba      	str	r2, [r7, #24]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d1ed      	bne.n	fa0 <crc32_recalculate+0x8c>
		}
	}

	// Calculate for tailing bytes
	if (length) {
     fc4:	68bb      	ldr	r3, [r7, #8]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d016      	beq.n	ff8 <crc32_recalculate+0xe4>
		word = *word_ptr;
     fca:	69fb      	ldr	r3, [r7, #28]
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	613b      	str	r3, [r7, #16]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
     fd0:	68ba      	ldr	r2, [r7, #8]
     fd2:	0013      	movs	r3, r2
     fd4:	075b      	lsls	r3, r3, #29
     fd6:	1a9b      	subs	r3, r3, r2
     fd8:	00db      	lsls	r3, r3, #3
     fda:	3320      	adds	r3, #32
     fdc:	2201      	movs	r2, #1
     fde:	4252      	negs	r2, r2
     fe0:	40da      	lsrs	r2, r3
     fe2:	693b      	ldr	r3, [r7, #16]
     fe4:	4013      	ands	r3, r2
     fe6:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
     fe8:	68ba      	ldr	r2, [r7, #8]
     fea:	6979      	ldr	r1, [r7, #20]
     fec:	693b      	ldr	r3, [r7, #16]
     fee:	0018      	movs	r0, r3
     ff0:	4b06      	ldr	r3, [pc, #24]	; (100c <crc32_recalculate+0xf8>)
     ff2:	4798      	blx	r3
     ff4:	0003      	movs	r3, r0
     ff6:	617b      	str	r3, [r7, #20]
	}

	*crc = COMPLEMENT_CRC(temp_crc);
     ff8:	697b      	ldr	r3, [r7, #20]
     ffa:	43da      	mvns	r2, r3
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    1000:	2300      	movs	r3, #0
    1002:	0018      	movs	r0, r3
    1004:	46bd      	mov	sp, r7
    1006:	b008      	add	sp, #32
    1008:	bd80      	pop	{r7, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	00000ec5 	.word	0x00000ec5

00001010 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    1010:	b580      	push	{r7, lr}
    1012:	b084      	sub	sp, #16
    1014:	af00      	add	r7, sp, #0
    1016:	0002      	movs	r2, r0
    1018:	1dfb      	adds	r3, r7, #7
    101a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    101c:	230f      	movs	r3, #15
    101e:	18fb      	adds	r3, r7, r3
    1020:	1dfa      	adds	r2, r7, #7
    1022:	7812      	ldrb	r2, [r2, #0]
    1024:	0952      	lsrs	r2, r2, #5
    1026:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    1028:	230f      	movs	r3, #15
    102a:	18fb      	adds	r3, r7, r3
    102c:	781b      	ldrb	r3, [r3, #0]
    102e:	2b00      	cmp	r3, #0
    1030:	d10c      	bne.n	104c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1032:	4b09      	ldr	r3, [pc, #36]	; (1058 <_extint_get_eic_from_channel+0x48>)
    1034:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    1036:	230f      	movs	r3, #15
    1038:	18fb      	adds	r3, r7, r3
    103a:	781b      	ldrb	r3, [r3, #0]
    103c:	009b      	lsls	r3, r3, #2
    103e:	2210      	movs	r2, #16
    1040:	4694      	mov	ip, r2
    1042:	44bc      	add	ip, r7
    1044:	4463      	add	r3, ip
    1046:	3b08      	subs	r3, #8
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	e000      	b.n	104e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    104c:	2300      	movs	r3, #0
	}
}
    104e:	0018      	movs	r0, r3
    1050:	46bd      	mov	sp, r7
    1052:	b004      	add	sp, #16
    1054:	bd80      	pop	{r7, pc}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	40001800 	.word	0x40001800

0000105c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    105c:	b580      	push	{r7, lr}
    105e:	b084      	sub	sp, #16
    1060:	af00      	add	r7, sp, #0
    1062:	0002      	movs	r2, r0
    1064:	1dfb      	adds	r3, r7, #7
    1066:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    1068:	1dfb      	adds	r3, r7, #7
    106a:	781b      	ldrb	r3, [r3, #0]
    106c:	0018      	movs	r0, r3
    106e:	4b0b      	ldr	r3, [pc, #44]	; (109c <extint_chan_is_detected+0x40>)
    1070:	4798      	blx	r3
    1072:	0003      	movs	r3, r0
    1074:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    1076:	1dfb      	adds	r3, r7, #7
    1078:	781b      	ldrb	r3, [r3, #0]
    107a:	221f      	movs	r2, #31
    107c:	4013      	ands	r3, r2
    107e:	2201      	movs	r2, #1
    1080:	409a      	lsls	r2, r3
    1082:	0013      	movs	r3, r2
    1084:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	691b      	ldr	r3, [r3, #16]
    108a:	68ba      	ldr	r2, [r7, #8]
    108c:	4013      	ands	r3, r2
    108e:	1e5a      	subs	r2, r3, #1
    1090:	4193      	sbcs	r3, r2
    1092:	b2db      	uxtb	r3, r3
}
    1094:	0018      	movs	r0, r3
    1096:	46bd      	mov	sp, r7
    1098:	b004      	add	sp, #16
    109a:	bd80      	pop	{r7, pc}
    109c:	00001011 	.word	0x00001011

000010a0 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    10a0:	b580      	push	{r7, lr}
    10a2:	b084      	sub	sp, #16
    10a4:	af00      	add	r7, sp, #0
    10a6:	0002      	movs	r2, r0
    10a8:	1dfb      	adds	r3, r7, #7
    10aa:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    10ac:	1dfb      	adds	r3, r7, #7
    10ae:	781b      	ldrb	r3, [r3, #0]
    10b0:	0018      	movs	r0, r3
    10b2:	4b09      	ldr	r3, [pc, #36]	; (10d8 <extint_chan_clear_detected+0x38>)
    10b4:	4798      	blx	r3
    10b6:	0003      	movs	r3, r0
    10b8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    10ba:	1dfb      	adds	r3, r7, #7
    10bc:	781b      	ldrb	r3, [r3, #0]
    10be:	221f      	movs	r2, #31
    10c0:	4013      	ands	r3, r2
    10c2:	2201      	movs	r2, #1
    10c4:	409a      	lsls	r2, r3
    10c6:	0013      	movs	r3, r2
    10c8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	68ba      	ldr	r2, [r7, #8]
    10ce:	611a      	str	r2, [r3, #16]
}
    10d0:	46c0      	nop			; (mov r8, r8)
    10d2:	46bd      	mov	sp, r7
    10d4:	b004      	add	sp, #16
    10d6:	bd80      	pop	{r7, pc}
    10d8:	00001011 	.word	0x00001011

000010dc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    10dc:	b580      	push	{r7, lr}
    10de:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    10e0:	4b15      	ldr	r3, [pc, #84]	; (1138 <EIC_Handler+0x5c>)
    10e2:	2200      	movs	r2, #0
    10e4:	701a      	strb	r2, [r3, #0]
    10e6:	e020      	b.n	112a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    10e8:	4b13      	ldr	r3, [pc, #76]	; (1138 <EIC_Handler+0x5c>)
    10ea:	781b      	ldrb	r3, [r3, #0]
    10ec:	0018      	movs	r0, r3
    10ee:	4b13      	ldr	r3, [pc, #76]	; (113c <EIC_Handler+0x60>)
    10f0:	4798      	blx	r3
    10f2:	1e03      	subs	r3, r0, #0
    10f4:	d013      	beq.n	111e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    10f6:	4b10      	ldr	r3, [pc, #64]	; (1138 <EIC_Handler+0x5c>)
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	0018      	movs	r0, r3
    10fc:	4b10      	ldr	r3, [pc, #64]	; (1140 <EIC_Handler+0x64>)
    10fe:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1100:	4b0d      	ldr	r3, [pc, #52]	; (1138 <EIC_Handler+0x5c>)
    1102:	781b      	ldrb	r3, [r3, #0]
    1104:	001a      	movs	r2, r3
    1106:	4b0f      	ldr	r3, [pc, #60]	; (1144 <EIC_Handler+0x68>)
    1108:	0092      	lsls	r2, r2, #2
    110a:	58d3      	ldr	r3, [r2, r3]
    110c:	2b00      	cmp	r3, #0
    110e:	d006      	beq.n	111e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1110:	4b09      	ldr	r3, [pc, #36]	; (1138 <EIC_Handler+0x5c>)
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	001a      	movs	r2, r3
    1116:	4b0b      	ldr	r3, [pc, #44]	; (1144 <EIC_Handler+0x68>)
    1118:	0092      	lsls	r2, r2, #2
    111a:	58d3      	ldr	r3, [r2, r3]
    111c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    111e:	4b06      	ldr	r3, [pc, #24]	; (1138 <EIC_Handler+0x5c>)
    1120:	781b      	ldrb	r3, [r3, #0]
    1122:	3301      	adds	r3, #1
    1124:	b2da      	uxtb	r2, r3
    1126:	4b04      	ldr	r3, [pc, #16]	; (1138 <EIC_Handler+0x5c>)
    1128:	701a      	strb	r2, [r3, #0]
    112a:	4b03      	ldr	r3, [pc, #12]	; (1138 <EIC_Handler+0x5c>)
    112c:	781b      	ldrb	r3, [r3, #0]
    112e:	2b0f      	cmp	r3, #15
    1130:	d9da      	bls.n	10e8 <EIC_Handler+0xc>
			}
		}
	}
}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	46bd      	mov	sp, r7
    1136:	bd80      	pop	{r7, pc}
    1138:	200002d4 	.word	0x200002d4
    113c:	0000105d 	.word	0x0000105d
    1140:	000010a1 	.word	0x000010a1
    1144:	200002d8 	.word	0x200002d8

00001148 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1148:	b580      	push	{r7, lr}
    114a:	b082      	sub	sp, #8
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1150:	687b      	ldr	r3, [r7, #4]
    1152:	2200      	movs	r2, #0
    1154:	701a      	strb	r2, [r3, #0]
}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	46bd      	mov	sp, r7
    115a:	b002      	add	sp, #8
    115c:	bd80      	pop	{r7, pc}
	...

00001160 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1160:	b580      	push	{r7, lr}
    1162:	b082      	sub	sp, #8
    1164:	af00      	add	r7, sp, #0
    1166:	0002      	movs	r2, r0
    1168:	6039      	str	r1, [r7, #0]
    116a:	1dfb      	adds	r3, r7, #7
    116c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    116e:	1dfb      	adds	r3, r7, #7
    1170:	781b      	ldrb	r3, [r3, #0]
    1172:	2b01      	cmp	r3, #1
    1174:	d00a      	beq.n	118c <system_apb_clock_set_mask+0x2c>
    1176:	2b02      	cmp	r3, #2
    1178:	d00f      	beq.n	119a <system_apb_clock_set_mask+0x3a>
    117a:	2b00      	cmp	r3, #0
    117c:	d114      	bne.n	11a8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    117e:	4b0e      	ldr	r3, [pc, #56]	; (11b8 <system_apb_clock_set_mask+0x58>)
    1180:	4a0d      	ldr	r2, [pc, #52]	; (11b8 <system_apb_clock_set_mask+0x58>)
    1182:	6991      	ldr	r1, [r2, #24]
    1184:	683a      	ldr	r2, [r7, #0]
    1186:	430a      	orrs	r2, r1
    1188:	619a      	str	r2, [r3, #24]
			break;
    118a:	e00f      	b.n	11ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    118c:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <system_apb_clock_set_mask+0x58>)
    118e:	4a0a      	ldr	r2, [pc, #40]	; (11b8 <system_apb_clock_set_mask+0x58>)
    1190:	69d1      	ldr	r1, [r2, #28]
    1192:	683a      	ldr	r2, [r7, #0]
    1194:	430a      	orrs	r2, r1
    1196:	61da      	str	r2, [r3, #28]
			break;
    1198:	e008      	b.n	11ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    119a:	4b07      	ldr	r3, [pc, #28]	; (11b8 <system_apb_clock_set_mask+0x58>)
    119c:	4a06      	ldr	r2, [pc, #24]	; (11b8 <system_apb_clock_set_mask+0x58>)
    119e:	6a11      	ldr	r1, [r2, #32]
    11a0:	683a      	ldr	r2, [r7, #0]
    11a2:	430a      	orrs	r2, r1
    11a4:	621a      	str	r2, [r3, #32]
			break;
    11a6:	e001      	b.n	11ac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    11a8:	2317      	movs	r3, #23
    11aa:	e000      	b.n	11ae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    11ac:	2300      	movs	r3, #0
}
    11ae:	0018      	movs	r0, r3
    11b0:	46bd      	mov	sp, r7
    11b2:	b002      	add	sp, #8
    11b4:	bd80      	pop	{r7, pc}
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	40000400 	.word	0x40000400

000011bc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    11bc:	b580      	push	{r7, lr}
    11be:	b082      	sub	sp, #8
    11c0:	af00      	add	r7, sp, #0
    11c2:	0002      	movs	r2, r0
    11c4:	1dfb      	adds	r3, r7, #7
    11c6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    11c8:	4b06      	ldr	r3, [pc, #24]	; (11e4 <system_interrupt_enable+0x28>)
    11ca:	1dfa      	adds	r2, r7, #7
    11cc:	7812      	ldrb	r2, [r2, #0]
    11ce:	0011      	movs	r1, r2
    11d0:	221f      	movs	r2, #31
    11d2:	400a      	ands	r2, r1
    11d4:	2101      	movs	r1, #1
    11d6:	4091      	lsls	r1, r2
    11d8:	000a      	movs	r2, r1
    11da:	601a      	str	r2, [r3, #0]
}
    11dc:	46c0      	nop			; (mov r8, r8)
    11de:	46bd      	mov	sp, r7
    11e0:	b002      	add	sp, #8
    11e2:	bd80      	pop	{r7, pc}
    11e4:	e000e100 	.word	0xe000e100

000011e8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    11ee:	4b0f      	ldr	r3, [pc, #60]	; (122c <extint_is_syncing+0x44>)
    11f0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    11f2:	2300      	movs	r3, #0
    11f4:	607b      	str	r3, [r7, #4]
    11f6:	e011      	b.n	121c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	009b      	lsls	r3, r3, #2
    11fc:	2208      	movs	r2, #8
    11fe:	4694      	mov	ip, r2
    1200:	44bc      	add	ip, r7
    1202:	4463      	add	r3, ip
    1204:	3b08      	subs	r3, #8
    1206:	681b      	ldr	r3, [r3, #0]
    1208:	785b      	ldrb	r3, [r3, #1]
    120a:	b2db      	uxtb	r3, r3
    120c:	b25b      	sxtb	r3, r3
    120e:	2b00      	cmp	r3, #0
    1210:	da01      	bge.n	1216 <extint_is_syncing+0x2e>
			return true;
    1212:	2301      	movs	r3, #1
    1214:	e006      	b.n	1224 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	3301      	adds	r3, #1
    121a:	607b      	str	r3, [r7, #4]
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	2b00      	cmp	r3, #0
    1220:	d0ea      	beq.n	11f8 <extint_is_syncing+0x10>
		}
	}
	return false;
    1222:	2300      	movs	r3, #0
}
    1224:	0018      	movs	r0, r3
    1226:	46bd      	mov	sp, r7
    1228:	b002      	add	sp, #8
    122a:	bd80      	pop	{r7, pc}
    122c:	40001800 	.word	0x40001800

00001230 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1230:	b580      	push	{r7, lr}
    1232:	b084      	sub	sp, #16
    1234:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1236:	4b2d      	ldr	r3, [pc, #180]	; (12ec <_system_extint_init+0xbc>)
    1238:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    123a:	2140      	movs	r1, #64	; 0x40
    123c:	2000      	movs	r0, #0
    123e:	4b2c      	ldr	r3, [pc, #176]	; (12f0 <_system_extint_init+0xc0>)
    1240:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1242:	003b      	movs	r3, r7
    1244:	0018      	movs	r0, r3
    1246:	4b2b      	ldr	r3, [pc, #172]	; (12f4 <_system_extint_init+0xc4>)
    1248:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    124a:	003b      	movs	r3, r7
    124c:	2200      	movs	r2, #0
    124e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1250:	003b      	movs	r3, r7
    1252:	0019      	movs	r1, r3
    1254:	2005      	movs	r0, #5
    1256:	4b28      	ldr	r3, [pc, #160]	; (12f8 <_system_extint_init+0xc8>)
    1258:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    125a:	2005      	movs	r0, #5
    125c:	4b27      	ldr	r3, [pc, #156]	; (12fc <_system_extint_init+0xcc>)
    125e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1260:	2300      	movs	r3, #0
    1262:	60fb      	str	r3, [r7, #12]
    1264:	e018      	b.n	1298 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1266:	68fb      	ldr	r3, [r7, #12]
    1268:	009b      	lsls	r3, r3, #2
    126a:	2210      	movs	r2, #16
    126c:	4694      	mov	ip, r2
    126e:	44bc      	add	ip, r7
    1270:	4463      	add	r3, ip
    1272:	3b0c      	subs	r3, #12
    1274:	681a      	ldr	r2, [r3, #0]
    1276:	68fb      	ldr	r3, [r7, #12]
    1278:	009b      	lsls	r3, r3, #2
    127a:	2110      	movs	r1, #16
    127c:	468c      	mov	ip, r1
    127e:	44bc      	add	ip, r7
    1280:	4463      	add	r3, ip
    1282:	3b0c      	subs	r3, #12
    1284:	681b      	ldr	r3, [r3, #0]
    1286:	781b      	ldrb	r3, [r3, #0]
    1288:	b2db      	uxtb	r3, r3
    128a:	2101      	movs	r1, #1
    128c:	430b      	orrs	r3, r1
    128e:	b2db      	uxtb	r3, r3
    1290:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1292:	68fb      	ldr	r3, [r7, #12]
    1294:	3301      	adds	r3, #1
    1296:	60fb      	str	r3, [r7, #12]
    1298:	68fb      	ldr	r3, [r7, #12]
    129a:	2b00      	cmp	r3, #0
    129c:	d0e3      	beq.n	1266 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	4b17      	ldr	r3, [pc, #92]	; (1300 <_system_extint_init+0xd0>)
    12a2:	4798      	blx	r3
    12a4:	1e03      	subs	r3, r0, #0
    12a6:	d1fb      	bne.n	12a0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    12a8:	230b      	movs	r3, #11
    12aa:	18fb      	adds	r3, r7, r3
    12ac:	2200      	movs	r2, #0
    12ae:	701a      	strb	r2, [r3, #0]
    12b0:	e00d      	b.n	12ce <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    12b2:	230b      	movs	r3, #11
    12b4:	18fb      	adds	r3, r7, r3
    12b6:	781a      	ldrb	r2, [r3, #0]
    12b8:	4b12      	ldr	r3, [pc, #72]	; (1304 <_system_extint_init+0xd4>)
    12ba:	0092      	lsls	r2, r2, #2
    12bc:	2100      	movs	r1, #0
    12be:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    12c0:	230b      	movs	r3, #11
    12c2:	18fb      	adds	r3, r7, r3
    12c4:	781a      	ldrb	r2, [r3, #0]
    12c6:	230b      	movs	r3, #11
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	3201      	adds	r2, #1
    12cc:	701a      	strb	r2, [r3, #0]
    12ce:	230b      	movs	r3, #11
    12d0:	18fb      	adds	r3, r7, r3
    12d2:	781b      	ldrb	r3, [r3, #0]
    12d4:	2b0f      	cmp	r3, #15
    12d6:	d9ec      	bls.n	12b2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    12d8:	2004      	movs	r0, #4
    12da:	4b0b      	ldr	r3, [pc, #44]	; (1308 <_system_extint_init+0xd8>)
    12dc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    12de:	4b0b      	ldr	r3, [pc, #44]	; (130c <_system_extint_init+0xdc>)
    12e0:	4798      	blx	r3
}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	46bd      	mov	sp, r7
    12e6:	b004      	add	sp, #16
    12e8:	bd80      	pop	{r7, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	40001800 	.word	0x40001800
    12f0:	00001161 	.word	0x00001161
    12f4:	00001149 	.word	0x00001149
    12f8:	00006835 	.word	0x00006835
    12fc:	00006879 	.word	0x00006879
    1300:	000011e9 	.word	0x000011e9
    1304:	200002d8 	.word	0x200002d8
    1308:	000011bd 	.word	0x000011bd
    130c:	00001311 	.word	0x00001311

00001310 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    1310:	b580      	push	{r7, lr}
    1312:	b082      	sub	sp, #8
    1314:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1316:	4b15      	ldr	r3, [pc, #84]	; (136c <_extint_enable+0x5c>)
    1318:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    131a:	2300      	movs	r3, #0
    131c:	607b      	str	r3, [r7, #4]
    131e:	e018      	b.n	1352 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	009b      	lsls	r3, r3, #2
    1324:	2208      	movs	r2, #8
    1326:	4694      	mov	ip, r2
    1328:	44bc      	add	ip, r7
    132a:	4463      	add	r3, ip
    132c:	3b08      	subs	r3, #8
    132e:	681a      	ldr	r2, [r3, #0]
    1330:	687b      	ldr	r3, [r7, #4]
    1332:	009b      	lsls	r3, r3, #2
    1334:	2108      	movs	r1, #8
    1336:	468c      	mov	ip, r1
    1338:	44bc      	add	ip, r7
    133a:	4463      	add	r3, ip
    133c:	3b08      	subs	r3, #8
    133e:	681b      	ldr	r3, [r3, #0]
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	b2db      	uxtb	r3, r3
    1344:	2102      	movs	r1, #2
    1346:	430b      	orrs	r3, r1
    1348:	b2db      	uxtb	r3, r3
    134a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    134c:	687b      	ldr	r3, [r7, #4]
    134e:	3301      	adds	r3, #1
    1350:	607b      	str	r3, [r7, #4]
    1352:	687b      	ldr	r3, [r7, #4]
    1354:	2b00      	cmp	r3, #0
    1356:	d0e3      	beq.n	1320 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    1358:	46c0      	nop			; (mov r8, r8)
    135a:	4b05      	ldr	r3, [pc, #20]	; (1370 <_extint_enable+0x60>)
    135c:	4798      	blx	r3
    135e:	1e03      	subs	r3, r0, #0
    1360:	d1fb      	bne.n	135a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	46bd      	mov	sp, r7
    1366:	b002      	add	sp, #8
    1368:	bd80      	pop	{r7, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	40001800 	.word	0x40001800
    1370:	000011e9 	.word	0x000011e9

00001374 <system_pinmux_get_config_defaults>:
{
    1374:	b580      	push	{r7, lr}
    1376:	b082      	sub	sp, #8
    1378:	af00      	add	r7, sp, #0
    137a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	2280      	movs	r2, #128	; 0x80
    1380:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	2200      	movs	r2, #0
    1386:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	2201      	movs	r2, #1
    138c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	2200      	movs	r2, #0
    1392:	70da      	strb	r2, [r3, #3]
}
    1394:	46c0      	nop			; (mov r8, r8)
    1396:	46bd      	mov	sp, r7
    1398:	b002      	add	sp, #8
    139a:	bd80      	pop	{r7, pc}

0000139c <system_gclk_chan_get_config_defaults>:
{
    139c:	b580      	push	{r7, lr}
    139e:	b082      	sub	sp, #8
    13a0:	af00      	add	r7, sp, #0
    13a2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	2200      	movs	r2, #0
    13a8:	701a      	strb	r2, [r3, #0]
}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	46bd      	mov	sp, r7
    13ae:	b002      	add	sp, #8
    13b0:	bd80      	pop	{r7, pc}
	...

000013b4 <system_apb_clock_set_mask>:
{
    13b4:	b580      	push	{r7, lr}
    13b6:	b082      	sub	sp, #8
    13b8:	af00      	add	r7, sp, #0
    13ba:	0002      	movs	r2, r0
    13bc:	6039      	str	r1, [r7, #0]
    13be:	1dfb      	adds	r3, r7, #7
    13c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    13c2:	1dfb      	adds	r3, r7, #7
    13c4:	781b      	ldrb	r3, [r3, #0]
    13c6:	2b01      	cmp	r3, #1
    13c8:	d00a      	beq.n	13e0 <system_apb_clock_set_mask+0x2c>
    13ca:	2b02      	cmp	r3, #2
    13cc:	d00f      	beq.n	13ee <system_apb_clock_set_mask+0x3a>
    13ce:	2b00      	cmp	r3, #0
    13d0:	d114      	bne.n	13fc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    13d2:	4b0e      	ldr	r3, [pc, #56]	; (140c <system_apb_clock_set_mask+0x58>)
    13d4:	4a0d      	ldr	r2, [pc, #52]	; (140c <system_apb_clock_set_mask+0x58>)
    13d6:	6991      	ldr	r1, [r2, #24]
    13d8:	683a      	ldr	r2, [r7, #0]
    13da:	430a      	orrs	r2, r1
    13dc:	619a      	str	r2, [r3, #24]
			break;
    13de:	e00f      	b.n	1400 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    13e0:	4b0a      	ldr	r3, [pc, #40]	; (140c <system_apb_clock_set_mask+0x58>)
    13e2:	4a0a      	ldr	r2, [pc, #40]	; (140c <system_apb_clock_set_mask+0x58>)
    13e4:	69d1      	ldr	r1, [r2, #28]
    13e6:	683a      	ldr	r2, [r7, #0]
    13e8:	430a      	orrs	r2, r1
    13ea:	61da      	str	r2, [r3, #28]
			break;
    13ec:	e008      	b.n	1400 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <system_apb_clock_set_mask+0x58>)
    13f0:	4a06      	ldr	r2, [pc, #24]	; (140c <system_apb_clock_set_mask+0x58>)
    13f2:	6a11      	ldr	r1, [r2, #32]
    13f4:	683a      	ldr	r2, [r7, #0]
    13f6:	430a      	orrs	r2, r1
    13f8:	621a      	str	r2, [r3, #32]
			break;
    13fa:	e001      	b.n	1400 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    13fc:	2317      	movs	r3, #23
    13fe:	e000      	b.n	1402 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1400:	2300      	movs	r3, #0
}
    1402:	0018      	movs	r0, r3
    1404:	46bd      	mov	sp, r7
    1406:	b002      	add	sp, #8
    1408:	bd80      	pop	{r7, pc}
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	40000400 	.word	0x40000400

00001410 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1410:	b580      	push	{r7, lr}
    1412:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <system_is_debugger_present+0x1c>)
    1416:	789b      	ldrb	r3, [r3, #2]
    1418:	b2db      	uxtb	r3, r3
    141a:	001a      	movs	r2, r3
    141c:	2302      	movs	r3, #2
    141e:	4013      	ands	r3, r2
    1420:	1e5a      	subs	r2, r3, #1
    1422:	4193      	sbcs	r3, r2
    1424:	b2db      	uxtb	r3, r3
}
    1426:	0018      	movs	r0, r3
    1428:	46bd      	mov	sp, r7
    142a:	bd80      	pop	{r7, pc}
    142c:	41002000 	.word	0x41002000

00001430 <spi_is_write_complete>:
{
    1430:	b580      	push	{r7, lr}
    1432:	b084      	sub	sp, #16
    1434:	af00      	add	r7, sp, #0
    1436:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	7e1b      	ldrb	r3, [r3, #24]
    1442:	b2db      	uxtb	r3, r3
    1444:	001a      	movs	r2, r3
    1446:	2302      	movs	r3, #2
    1448:	4013      	ands	r3, r2
    144a:	1e5a      	subs	r2, r3, #1
    144c:	4193      	sbcs	r3, r2
    144e:	b2db      	uxtb	r3, r3
}
    1450:	0018      	movs	r0, r3
    1452:	46bd      	mov	sp, r7
    1454:	b004      	add	sp, #16
    1456:	bd80      	pop	{r7, pc}

00001458 <spi_is_ready_to_write>:
{
    1458:	b580      	push	{r7, lr}
    145a:	b084      	sub	sp, #16
    145c:	af00      	add	r7, sp, #0
    145e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1466:	68fb      	ldr	r3, [r7, #12]
    1468:	7e1b      	ldrb	r3, [r3, #24]
    146a:	b2db      	uxtb	r3, r3
    146c:	001a      	movs	r2, r3
    146e:	2301      	movs	r3, #1
    1470:	4013      	ands	r3, r2
    1472:	1e5a      	subs	r2, r3, #1
    1474:	4193      	sbcs	r3, r2
    1476:	b2db      	uxtb	r3, r3
}
    1478:	0018      	movs	r0, r3
    147a:	46bd      	mov	sp, r7
    147c:	b004      	add	sp, #16
    147e:	bd80      	pop	{r7, pc}

00001480 <spi_is_ready_to_read>:
{
    1480:	b580      	push	{r7, lr}
    1482:	b084      	sub	sp, #16
    1484:	af00      	add	r7, sp, #0
    1486:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1488:	687b      	ldr	r3, [r7, #4]
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	7e1b      	ldrb	r3, [r3, #24]
    1492:	b2db      	uxtb	r3, r3
    1494:	001a      	movs	r2, r3
    1496:	2304      	movs	r3, #4
    1498:	4013      	ands	r3, r2
    149a:	1e5a      	subs	r2, r3, #1
    149c:	4193      	sbcs	r3, r2
    149e:	b2db      	uxtb	r3, r3
}
    14a0:	0018      	movs	r0, r3
    14a2:	46bd      	mov	sp, r7
    14a4:	b004      	add	sp, #16
    14a6:	bd80      	pop	{r7, pc}

000014a8 <spi_write>:
{
    14a8:	b580      	push	{r7, lr}
    14aa:	b084      	sub	sp, #16
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
    14b0:	000a      	movs	r2, r1
    14b2:	1cbb      	adds	r3, r7, #2
    14b4:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	0018      	movs	r0, r3
    14c0:	4b0a      	ldr	r3, [pc, #40]	; (14ec <spi_write+0x44>)
    14c2:	4798      	blx	r3
    14c4:	0003      	movs	r3, r0
    14c6:	001a      	movs	r2, r3
    14c8:	2301      	movs	r3, #1
    14ca:	4053      	eors	r3, r2
    14cc:	b2db      	uxtb	r3, r3
    14ce:	2b00      	cmp	r3, #0
    14d0:	d001      	beq.n	14d6 <spi_write+0x2e>
		return STATUS_BUSY;
    14d2:	2305      	movs	r3, #5
    14d4:	e006      	b.n	14e4 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14d6:	1cbb      	adds	r3, r7, #2
    14d8:	881b      	ldrh	r3, [r3, #0]
    14da:	05db      	lsls	r3, r3, #23
    14dc:	0dda      	lsrs	r2, r3, #23
    14de:	68fb      	ldr	r3, [r7, #12]
    14e0:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    14e2:	2300      	movs	r3, #0
}
    14e4:	0018      	movs	r0, r3
    14e6:	46bd      	mov	sp, r7
    14e8:	b004      	add	sp, #16
    14ea:	bd80      	pop	{r7, pc}
    14ec:	00001459 	.word	0x00001459

000014f0 <spi_read>:
{
    14f0:	b580      	push	{r7, lr}
    14f2:	b084      	sub	sp, #16
    14f4:	af00      	add	r7, sp, #0
    14f6:	6078      	str	r0, [r7, #4]
    14f8:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	681b      	ldr	r3, [r3, #0]
    14fe:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	0018      	movs	r0, r3
    1504:	4b1b      	ldr	r3, [pc, #108]	; (1574 <spi_read+0x84>)
    1506:	4798      	blx	r3
    1508:	0003      	movs	r3, r0
    150a:	001a      	movs	r2, r3
    150c:	2301      	movs	r3, #1
    150e:	4053      	eors	r3, r2
    1510:	b2db      	uxtb	r3, r3
    1512:	2b00      	cmp	r3, #0
    1514:	d001      	beq.n	151a <spi_read+0x2a>
		return STATUS_ERR_IO;
    1516:	2310      	movs	r3, #16
    1518:	e027      	b.n	156a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    151a:	230f      	movs	r3, #15
    151c:	18fb      	adds	r3, r7, r3
    151e:	2200      	movs	r2, #0
    1520:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1522:	68bb      	ldr	r3, [r7, #8]
    1524:	8b5b      	ldrh	r3, [r3, #26]
    1526:	b29b      	uxth	r3, r3
    1528:	001a      	movs	r2, r3
    152a:	2304      	movs	r3, #4
    152c:	4013      	ands	r3, r2
    152e:	d006      	beq.n	153e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1530:	230f      	movs	r3, #15
    1532:	18fb      	adds	r3, r7, r3
    1534:	221e      	movs	r2, #30
    1536:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1538:	68bb      	ldr	r3, [r7, #8]
    153a:	2204      	movs	r2, #4
    153c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    153e:	687b      	ldr	r3, [r7, #4]
    1540:	799b      	ldrb	r3, [r3, #6]
    1542:	2b01      	cmp	r3, #1
    1544:	d108      	bne.n	1558 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1546:	68bb      	ldr	r3, [r7, #8]
    1548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    154a:	b29b      	uxth	r3, r3
    154c:	05db      	lsls	r3, r3, #23
    154e:	0ddb      	lsrs	r3, r3, #23
    1550:	b29a      	uxth	r2, r3
    1552:	683b      	ldr	r3, [r7, #0]
    1554:	801a      	strh	r2, [r3, #0]
    1556:	e005      	b.n	1564 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    155c:	b2db      	uxtb	r3, r3
    155e:	b29a      	uxth	r2, r3
    1560:	683b      	ldr	r3, [r7, #0]
    1562:	801a      	strh	r2, [r3, #0]
	return retval;
    1564:	230f      	movs	r3, #15
    1566:	18fb      	adds	r3, r7, r3
    1568:	781b      	ldrb	r3, [r3, #0]
}
    156a:	0018      	movs	r0, r3
    156c:	46bd      	mov	sp, r7
    156e:	b004      	add	sp, #16
    1570:	bd80      	pop	{r7, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	00001481 	.word	0x00001481

00001578 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1578:	b590      	push	{r4, r7, lr}
    157a:	b093      	sub	sp, #76	; 0x4c
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
    1580:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    1588:	687b      	ldr	r3, [r7, #4]
    158a:	681b      	ldr	r3, [r3, #0]
    158c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    158e:	231c      	movs	r3, #28
    1590:	18fb      	adds	r3, r7, r3
    1592:	0018      	movs	r0, r3
    1594:	4b75      	ldr	r3, [pc, #468]	; (176c <_spi_set_config+0x1f4>)
    1596:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1598:	231c      	movs	r3, #28
    159a:	18fb      	adds	r3, r7, r3
    159c:	2200      	movs	r2, #0
    159e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    15a0:	683b      	ldr	r3, [r7, #0]
    15a2:	781b      	ldrb	r3, [r3, #0]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d103      	bne.n	15b0 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    15a8:	231c      	movs	r3, #28
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	2200      	movs	r2, #0
    15ae:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    15b0:	683b      	ldr	r3, [r7, #0]
    15b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    15b4:	230c      	movs	r3, #12
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    15ba:	683b      	ldr	r3, [r7, #0]
    15bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    15be:	230c      	movs	r3, #12
    15c0:	18fb      	adds	r3, r7, r3
    15c2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    15c4:	683b      	ldr	r3, [r7, #0]
    15c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    15c8:	230c      	movs	r3, #12
    15ca:	18fb      	adds	r3, r7, r3
    15cc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    15ce:	683b      	ldr	r3, [r7, #0]
    15d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    15d2:	230c      	movs	r3, #12
    15d4:	18fb      	adds	r3, r7, r3
    15d6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    15d8:	2347      	movs	r3, #71	; 0x47
    15da:	18fb      	adds	r3, r7, r3
    15dc:	2200      	movs	r2, #0
    15de:	701a      	strb	r2, [r3, #0]
    15e0:	e02c      	b.n	163c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15e2:	2347      	movs	r3, #71	; 0x47
    15e4:	18fb      	adds	r3, r7, r3
    15e6:	781a      	ldrb	r2, [r3, #0]
    15e8:	230c      	movs	r3, #12
    15ea:	18fb      	adds	r3, r7, r3
    15ec:	0092      	lsls	r2, r2, #2
    15ee:	58d3      	ldr	r3, [r2, r3]
    15f0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    15f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15f4:	2b00      	cmp	r3, #0
    15f6:	d109      	bne.n	160c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    15f8:	2347      	movs	r3, #71	; 0x47
    15fa:	18fb      	adds	r3, r7, r3
    15fc:	781a      	ldrb	r2, [r3, #0]
    15fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1600:	0011      	movs	r1, r2
    1602:	0018      	movs	r0, r3
    1604:	4b5a      	ldr	r3, [pc, #360]	; (1770 <_spi_set_config+0x1f8>)
    1606:	4798      	blx	r3
    1608:	0003      	movs	r3, r0
    160a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    160c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    160e:	3301      	adds	r3, #1
    1610:	d00d      	beq.n	162e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1614:	b2da      	uxtb	r2, r3
    1616:	231c      	movs	r3, #28
    1618:	18fb      	adds	r3, r7, r3
    161a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    161c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    161e:	0c1b      	lsrs	r3, r3, #16
    1620:	b2db      	uxtb	r3, r3
    1622:	221c      	movs	r2, #28
    1624:	18ba      	adds	r2, r7, r2
    1626:	0011      	movs	r1, r2
    1628:	0018      	movs	r0, r3
    162a:	4b52      	ldr	r3, [pc, #328]	; (1774 <_spi_set_config+0x1fc>)
    162c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    162e:	2347      	movs	r3, #71	; 0x47
    1630:	18fb      	adds	r3, r7, r3
    1632:	781a      	ldrb	r2, [r3, #0]
    1634:	2347      	movs	r3, #71	; 0x47
    1636:	18fb      	adds	r3, r7, r3
    1638:	3201      	adds	r2, #1
    163a:	701a      	strb	r2, [r3, #0]
    163c:	2347      	movs	r3, #71	; 0x47
    163e:	18fb      	adds	r3, r7, r3
    1640:	781b      	ldrb	r3, [r3, #0]
    1642:	2b03      	cmp	r3, #3
    1644:	d9cd      	bls.n	15e2 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    1646:	683b      	ldr	r3, [r7, #0]
    1648:	781a      	ldrb	r2, [r3, #0]
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    164e:	683b      	ldr	r3, [r7, #0]
    1650:	7c1a      	ldrb	r2, [r3, #16]
    1652:	687b      	ldr	r3, [r7, #4]
    1654:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    1656:	683b      	ldr	r3, [r7, #0]
    1658:	7c9a      	ldrb	r2, [r3, #18]
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    165e:	683b      	ldr	r3, [r7, #0]
    1660:	7d1a      	ldrb	r2, [r3, #20]
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1666:	230a      	movs	r3, #10
    1668:	18fb      	adds	r3, r7, r3
    166a:	2200      	movs	r2, #0
    166c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    166e:	2300      	movs	r3, #0
    1670:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    1672:	2300      	movs	r3, #0
    1674:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1676:	683b      	ldr	r3, [r7, #0]
    1678:	781b      	ldrb	r3, [r3, #0]
    167a:	2b01      	cmp	r3, #1
    167c:	d129      	bne.n	16d2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	681b      	ldr	r3, [r3, #0]
    1682:	0018      	movs	r0, r3
    1684:	4b3c      	ldr	r3, [pc, #240]	; (1778 <_spi_set_config+0x200>)
    1686:	4798      	blx	r3
    1688:	0003      	movs	r3, r0
    168a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    168e:	3314      	adds	r3, #20
    1690:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1692:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1694:	b2db      	uxtb	r3, r3
    1696:	0018      	movs	r0, r3
    1698:	4b38      	ldr	r3, [pc, #224]	; (177c <_spi_set_config+0x204>)
    169a:	4798      	blx	r3
    169c:	0003      	movs	r3, r0
    169e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    16a0:	683b      	ldr	r3, [r7, #0]
    16a2:	699b      	ldr	r3, [r3, #24]
    16a4:	2223      	movs	r2, #35	; 0x23
    16a6:	18bc      	adds	r4, r7, r2
    16a8:	220a      	movs	r2, #10
    16aa:	18ba      	adds	r2, r7, r2
    16ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
    16ae:	0018      	movs	r0, r3
    16b0:	4b33      	ldr	r3, [pc, #204]	; (1780 <_spi_set_config+0x208>)
    16b2:	4798      	blx	r3
    16b4:	0003      	movs	r3, r0
    16b6:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    16b8:	2323      	movs	r3, #35	; 0x23
    16ba:	18fb      	adds	r3, r7, r3
    16bc:	781b      	ldrb	r3, [r3, #0]
    16be:	2b00      	cmp	r3, #0
    16c0:	d001      	beq.n	16c6 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    16c2:	2317      	movs	r3, #23
    16c4:	e04e      	b.n	1764 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    16c6:	230a      	movs	r3, #10
    16c8:	18fb      	adds	r3, r7, r3
    16ca:	881b      	ldrh	r3, [r3, #0]
    16cc:	b2da      	uxtb	r2, r3
    16ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16d0:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    16d2:	683b      	ldr	r3, [r7, #0]
    16d4:	685b      	ldr	r3, [r3, #4]
    16d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16d8:	4313      	orrs	r3, r2
    16da:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    16dc:	683b      	ldr	r3, [r7, #0]
    16de:	689b      	ldr	r3, [r3, #8]
    16e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16e2:	4313      	orrs	r3, r2
    16e4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    16e6:	683b      	ldr	r3, [r7, #0]
    16e8:	68db      	ldr	r3, [r3, #12]
    16ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16ec:	4313      	orrs	r3, r2
    16ee:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    16f0:	683b      	ldr	r3, [r7, #0]
    16f2:	7c1b      	ldrb	r3, [r3, #16]
    16f4:	001a      	movs	r2, r3
    16f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16f8:	4313      	orrs	r3, r2
    16fa:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    16fc:	683b      	ldr	r3, [r7, #0]
    16fe:	7c5b      	ldrb	r3, [r3, #17]
    1700:	2b00      	cmp	r3, #0
    1702:	d103      	bne.n	170c <_spi_set_config+0x194>
    1704:	4b1f      	ldr	r3, [pc, #124]	; (1784 <_spi_set_config+0x20c>)
    1706:	4798      	blx	r3
    1708:	1e03      	subs	r3, r0, #0
    170a:	d003      	beq.n	1714 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    170c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    170e:	2280      	movs	r2, #128	; 0x80
    1710:	4313      	orrs	r3, r2
    1712:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    1714:	683b      	ldr	r3, [r7, #0]
    1716:	7c9b      	ldrb	r3, [r3, #18]
    1718:	2b00      	cmp	r3, #0
    171a:	d004      	beq.n	1726 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    171c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    171e:	2280      	movs	r2, #128	; 0x80
    1720:	0292      	lsls	r2, r2, #10
    1722:	4313      	orrs	r3, r2
    1724:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1726:	683b      	ldr	r3, [r7, #0]
    1728:	7cdb      	ldrb	r3, [r3, #19]
    172a:	2b00      	cmp	r3, #0
    172c:	d004      	beq.n	1738 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1730:	2280      	movs	r2, #128	; 0x80
    1732:	0092      	lsls	r2, r2, #2
    1734:	4313      	orrs	r3, r2
    1736:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1738:	683b      	ldr	r3, [r7, #0]
    173a:	7d1b      	ldrb	r3, [r3, #20]
    173c:	2b00      	cmp	r3, #0
    173e:	d004      	beq.n	174a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1742:	2280      	movs	r2, #128	; 0x80
    1744:	0192      	lsls	r2, r2, #6
    1746:	4313      	orrs	r3, r2
    1748:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    174c:	681a      	ldr	r2, [r3, #0]
    174e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1750:	431a      	orrs	r2, r3
    1752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1754:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1758:	685a      	ldr	r2, [r3, #4]
    175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    175c:	431a      	orrs	r2, r3
    175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1760:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1762:	2300      	movs	r3, #0
}
    1764:	0018      	movs	r0, r3
    1766:	46bd      	mov	sp, r7
    1768:	b013      	add	sp, #76	; 0x4c
    176a:	bd90      	pop	{r4, r7, pc}
    176c:	00001375 	.word	0x00001375
    1770:	00004819 	.word	0x00004819
    1774:	00006b21 	.word	0x00006b21
    1778:	000049d5 	.word	0x000049d5
    177c:	00006959 	.word	0x00006959
    1780:	0000454f 	.word	0x0000454f
    1784:	00001411 	.word	0x00001411

00001788 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1788:	b590      	push	{r4, r7, lr}
    178a:	b08b      	sub	sp, #44	; 0x2c
    178c:	af00      	add	r7, sp, #0
    178e:	60f8      	str	r0, [r7, #12]
    1790:	60b9      	str	r1, [r7, #8]
    1792:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	68ba      	ldr	r2, [r7, #8]
    1798:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    179a:	68fb      	ldr	r3, [r7, #12]
    179c:	681b      	ldr	r3, [r3, #0]
    179e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    17a0:	6a3b      	ldr	r3, [r7, #32]
    17a2:	681b      	ldr	r3, [r3, #0]
    17a4:	2202      	movs	r2, #2
    17a6:	4013      	ands	r3, r2
    17a8:	d001      	beq.n	17ae <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    17aa:	231c      	movs	r3, #28
    17ac:	e09c      	b.n	18e8 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    17ae:	6a3b      	ldr	r3, [r7, #32]
    17b0:	681b      	ldr	r3, [r3, #0]
    17b2:	2201      	movs	r2, #1
    17b4:	4013      	ands	r3, r2
    17b6:	d001      	beq.n	17bc <spi_init+0x34>
		return STATUS_BUSY;
    17b8:	2305      	movs	r3, #5
    17ba:	e095      	b.n	18e8 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	681b      	ldr	r3, [r3, #0]
    17c0:	0018      	movs	r0, r3
    17c2:	4b4b      	ldr	r3, [pc, #300]	; (18f0 <spi_init+0x168>)
    17c4:	4798      	blx	r3
    17c6:	0003      	movs	r3, r0
    17c8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    17ca:	69fb      	ldr	r3, [r7, #28]
    17cc:	3302      	adds	r3, #2
    17ce:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    17d0:	69fb      	ldr	r3, [r7, #28]
    17d2:	3314      	adds	r3, #20
    17d4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    17d6:	2201      	movs	r2, #1
    17d8:	69bb      	ldr	r3, [r7, #24]
    17da:	409a      	lsls	r2, r3
    17dc:	0013      	movs	r3, r2
    17de:	0019      	movs	r1, r3
    17e0:	2002      	movs	r0, #2
    17e2:	4b44      	ldr	r3, [pc, #272]	; (18f4 <spi_init+0x16c>)
    17e4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    17e6:	2310      	movs	r3, #16
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	0018      	movs	r0, r3
    17ec:	4b42      	ldr	r3, [pc, #264]	; (18f8 <spi_init+0x170>)
    17ee:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	2224      	movs	r2, #36	; 0x24
    17f4:	5c9a      	ldrb	r2, [r3, r2]
    17f6:	2310      	movs	r3, #16
    17f8:	18fb      	adds	r3, r7, r3
    17fa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    17fc:	697b      	ldr	r3, [r7, #20]
    17fe:	b2db      	uxtb	r3, r3
    1800:	2210      	movs	r2, #16
    1802:	18ba      	adds	r2, r7, r2
    1804:	0011      	movs	r1, r2
    1806:	0018      	movs	r0, r3
    1808:	4b3c      	ldr	r3, [pc, #240]	; (18fc <spi_init+0x174>)
    180a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    180c:	697b      	ldr	r3, [r7, #20]
    180e:	b2db      	uxtb	r3, r3
    1810:	0018      	movs	r0, r3
    1812:	4b3b      	ldr	r3, [pc, #236]	; (1900 <spi_init+0x178>)
    1814:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	2224      	movs	r2, #36	; 0x24
    181a:	5c9b      	ldrb	r3, [r3, r2]
    181c:	2100      	movs	r1, #0
    181e:	0018      	movs	r0, r3
    1820:	4b38      	ldr	r3, [pc, #224]	; (1904 <spi_init+0x17c>)
    1822:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1824:	687b      	ldr	r3, [r7, #4]
    1826:	781b      	ldrb	r3, [r3, #0]
    1828:	2b01      	cmp	r3, #1
    182a:	d105      	bne.n	1838 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    182c:	6a3b      	ldr	r3, [r7, #32]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	220c      	movs	r2, #12
    1832:	431a      	orrs	r2, r3
    1834:	6a3b      	ldr	r3, [r7, #32]
    1836:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1838:	2327      	movs	r3, #39	; 0x27
    183a:	18fb      	adds	r3, r7, r3
    183c:	2200      	movs	r2, #0
    183e:	701a      	strb	r2, [r3, #0]
    1840:	e010      	b.n	1864 <spi_init+0xdc>
		module->callback[i]        = NULL;
    1842:	2327      	movs	r3, #39	; 0x27
    1844:	18fb      	adds	r3, r7, r3
    1846:	781b      	ldrb	r3, [r3, #0]
    1848:	68fa      	ldr	r2, [r7, #12]
    184a:	3302      	adds	r3, #2
    184c:	009b      	lsls	r3, r3, #2
    184e:	18d3      	adds	r3, r2, r3
    1850:	3304      	adds	r3, #4
    1852:	2200      	movs	r2, #0
    1854:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1856:	2327      	movs	r3, #39	; 0x27
    1858:	18fb      	adds	r3, r7, r3
    185a:	781a      	ldrb	r2, [r3, #0]
    185c:	2327      	movs	r3, #39	; 0x27
    185e:	18fb      	adds	r3, r7, r3
    1860:	3201      	adds	r2, #1
    1862:	701a      	strb	r2, [r3, #0]
    1864:	2327      	movs	r3, #39	; 0x27
    1866:	18fb      	adds	r3, r7, r3
    1868:	781b      	ldrb	r3, [r3, #0]
    186a:	2b06      	cmp	r3, #6
    186c:	d9e9      	bls.n	1842 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    186e:	68fb      	ldr	r3, [r7, #12]
    1870:	2200      	movs	r2, #0
    1872:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1874:	68fb      	ldr	r3, [r7, #12]
    1876:	2200      	movs	r2, #0
    1878:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    187a:	68fb      	ldr	r3, [r7, #12]
    187c:	2200      	movs	r2, #0
    187e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1880:	68fb      	ldr	r3, [r7, #12]
    1882:	2200      	movs	r2, #0
    1884:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    1886:	68fb      	ldr	r3, [r7, #12]
    1888:	2236      	movs	r2, #54	; 0x36
    188a:	2100      	movs	r1, #0
    188c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    188e:	68fb      	ldr	r3, [r7, #12]
    1890:	2237      	movs	r2, #55	; 0x37
    1892:	2100      	movs	r1, #0
    1894:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    1896:	68fb      	ldr	r3, [r7, #12]
    1898:	2238      	movs	r2, #56	; 0x38
    189a:	2100      	movs	r1, #0
    189c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    189e:	68fb      	ldr	r3, [r7, #12]
    18a0:	2203      	movs	r2, #3
    18a2:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    18a4:	68fb      	ldr	r3, [r7, #12]
    18a6:	2200      	movs	r2, #0
    18a8:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    18aa:	68fb      	ldr	r3, [r7, #12]
    18ac:	681b      	ldr	r3, [r3, #0]
    18ae:	2213      	movs	r2, #19
    18b0:	18bc      	adds	r4, r7, r2
    18b2:	0018      	movs	r0, r3
    18b4:	4b0e      	ldr	r3, [pc, #56]	; (18f0 <spi_init+0x168>)
    18b6:	4798      	blx	r3
    18b8:	0003      	movs	r3, r0
    18ba:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    18bc:	4a12      	ldr	r2, [pc, #72]	; (1908 <spi_init+0x180>)
    18be:	2313      	movs	r3, #19
    18c0:	18fb      	adds	r3, r7, r3
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	0011      	movs	r1, r2
    18c6:	0018      	movs	r0, r3
    18c8:	4b10      	ldr	r3, [pc, #64]	; (190c <spi_init+0x184>)
    18ca:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    18cc:	2313      	movs	r3, #19
    18ce:	18fb      	adds	r3, r7, r3
    18d0:	781a      	ldrb	r2, [r3, #0]
    18d2:	4b0f      	ldr	r3, [pc, #60]	; (1910 <spi_init+0x188>)
    18d4:	0092      	lsls	r2, r2, #2
    18d6:	68f9      	ldr	r1, [r7, #12]
    18d8:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    18da:	687a      	ldr	r2, [r7, #4]
    18dc:	68fb      	ldr	r3, [r7, #12]
    18de:	0011      	movs	r1, r2
    18e0:	0018      	movs	r0, r3
    18e2:	4b0c      	ldr	r3, [pc, #48]	; (1914 <spi_init+0x18c>)
    18e4:	4798      	blx	r3
    18e6:	0003      	movs	r3, r0
}
    18e8:	0018      	movs	r0, r3
    18ea:	46bd      	mov	sp, r7
    18ec:	b00b      	add	sp, #44	; 0x2c
    18ee:	bd90      	pop	{r4, r7, pc}
    18f0:	000049d5 	.word	0x000049d5
    18f4:	000013b5 	.word	0x000013b5
    18f8:	0000139d 	.word	0x0000139d
    18fc:	00006835 	.word	0x00006835
    1900:	00006879 	.word	0x00006879
    1904:	0000478d 	.word	0x0000478d
    1908:	00001cf1 	.word	0x00001cf1
    190c:	00005851 	.word	0x00005851
    1910:	2000044c 	.word	0x2000044c
    1914:	00001579 	.word	0x00001579

00001918 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1918:	b590      	push	{r4, r7, lr}
    191a:	b087      	sub	sp, #28
    191c:	af00      	add	r7, sp, #0
    191e:	60f8      	str	r0, [r7, #12]
    1920:	60b9      	str	r1, [r7, #8]
    1922:	0019      	movs	r1, r3
    1924:	1dbb      	adds	r3, r7, #6
    1926:	801a      	strh	r2, [r3, #0]
    1928:	1d3b      	adds	r3, r7, #4
    192a:	1c0a      	adds	r2, r1, #0
    192c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    192e:	68fb      	ldr	r3, [r7, #12]
    1930:	2238      	movs	r2, #56	; 0x38
    1932:	5c9b      	ldrb	r3, [r3, r2]
    1934:	b2db      	uxtb	r3, r3
    1936:	2b05      	cmp	r3, #5
    1938:	d101      	bne.n	193e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    193a:	2305      	movs	r3, #5
    193c:	e07a      	b.n	1a34 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    193e:	1dbb      	adds	r3, r7, #6
    1940:	881b      	ldrh	r3, [r3, #0]
    1942:	2b00      	cmp	r3, #0
    1944:	d101      	bne.n	194a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    1946:	2317      	movs	r3, #23
    1948:	e074      	b.n	1a34 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	79db      	ldrb	r3, [r3, #7]
    194e:	2201      	movs	r2, #1
    1950:	4053      	eors	r3, r2
    1952:	b2db      	uxtb	r3, r3
    1954:	2b00      	cmp	r3, #0
    1956:	d001      	beq.n	195c <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    1958:	231c      	movs	r3, #28
    195a:	e06b      	b.n	1a34 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    195c:	2316      	movs	r3, #22
    195e:	18fb      	adds	r3, r7, r3
    1960:	2200      	movs	r2, #0
    1962:	801a      	strh	r2, [r3, #0]

	while (length--) {
    1964:	e05e      	b.n	1a24 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    1966:	68fb      	ldr	r3, [r7, #12]
    1968:	795b      	ldrb	r3, [r3, #5]
    196a:	2b01      	cmp	r3, #1
    196c:	d112      	bne.n	1994 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	68fb      	ldr	r3, [r7, #12]
    1972:	0018      	movs	r0, r3
    1974:	4b31      	ldr	r3, [pc, #196]	; (1a3c <spi_read_buffer_wait+0x124>)
    1976:	4798      	blx	r3
    1978:	0003      	movs	r3, r0
    197a:	001a      	movs	r2, r3
    197c:	2301      	movs	r3, #1
    197e:	4053      	eors	r3, r2
    1980:	b2db      	uxtb	r3, r3
    1982:	2b00      	cmp	r3, #0
    1984:	d1f4      	bne.n	1970 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    1986:	1d3b      	adds	r3, r7, #4
    1988:	881a      	ldrh	r2, [r3, #0]
    198a:	68fb      	ldr	r3, [r7, #12]
    198c:	0011      	movs	r1, r2
    198e:	0018      	movs	r0, r3
    1990:	4b2b      	ldr	r3, [pc, #172]	; (1a40 <spi_read_buffer_wait+0x128>)
    1992:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1994:	46c0      	nop			; (mov r8, r8)
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	0018      	movs	r0, r3
    199a:	4b2a      	ldr	r3, [pc, #168]	; (1a44 <spi_read_buffer_wait+0x12c>)
    199c:	4798      	blx	r3
    199e:	0003      	movs	r3, r0
    19a0:	001a      	movs	r2, r3
    19a2:	2301      	movs	r3, #1
    19a4:	4053      	eors	r3, r2
    19a6:	b2db      	uxtb	r3, r3
    19a8:	2b00      	cmp	r3, #0
    19aa:	d1f4      	bne.n	1996 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    19ac:	2312      	movs	r3, #18
    19ae:	18fb      	adds	r3, r7, r3
    19b0:	2200      	movs	r2, #0
    19b2:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    19b4:	2315      	movs	r3, #21
    19b6:	18fc      	adds	r4, r7, r3
    19b8:	2312      	movs	r3, #18
    19ba:	18fa      	adds	r2, r7, r3
    19bc:	68fb      	ldr	r3, [r7, #12]
    19be:	0011      	movs	r1, r2
    19c0:	0018      	movs	r0, r3
    19c2:	4b21      	ldr	r3, [pc, #132]	; (1a48 <spi_read_buffer_wait+0x130>)
    19c4:	4798      	blx	r3
    19c6:	0003      	movs	r3, r0
    19c8:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    19ca:	2315      	movs	r3, #21
    19cc:	18fb      	adds	r3, r7, r3
    19ce:	781b      	ldrb	r3, [r3, #0]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d003      	beq.n	19dc <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    19d4:	2315      	movs	r3, #21
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	781b      	ldrb	r3, [r3, #0]
    19da:	e02b      	b.n	1a34 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    19dc:	2316      	movs	r3, #22
    19de:	18fb      	adds	r3, r7, r3
    19e0:	881b      	ldrh	r3, [r3, #0]
    19e2:	2216      	movs	r2, #22
    19e4:	18ba      	adds	r2, r7, r2
    19e6:	1c59      	adds	r1, r3, #1
    19e8:	8011      	strh	r1, [r2, #0]
    19ea:	001a      	movs	r2, r3
    19ec:	68bb      	ldr	r3, [r7, #8]
    19ee:	189b      	adds	r3, r3, r2
    19f0:	2212      	movs	r2, #18
    19f2:	18ba      	adds	r2, r7, r2
    19f4:	8812      	ldrh	r2, [r2, #0]
    19f6:	b2d2      	uxtb	r2, r2
    19f8:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    19fa:	68fb      	ldr	r3, [r7, #12]
    19fc:	799b      	ldrb	r3, [r3, #6]
    19fe:	2b01      	cmp	r3, #1
    1a00:	d110      	bne.n	1a24 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    1a02:	2316      	movs	r3, #22
    1a04:	18fb      	adds	r3, r7, r3
    1a06:	881b      	ldrh	r3, [r3, #0]
    1a08:	2216      	movs	r2, #22
    1a0a:	18ba      	adds	r2, r7, r2
    1a0c:	1c59      	adds	r1, r3, #1
    1a0e:	8011      	strh	r1, [r2, #0]
    1a10:	001a      	movs	r2, r3
    1a12:	68bb      	ldr	r3, [r7, #8]
    1a14:	189b      	adds	r3, r3, r2
    1a16:	2212      	movs	r2, #18
    1a18:	18ba      	adds	r2, r7, r2
    1a1a:	8812      	ldrh	r2, [r2, #0]
    1a1c:	0a12      	lsrs	r2, r2, #8
    1a1e:	b292      	uxth	r2, r2
    1a20:	b2d2      	uxtb	r2, r2
    1a22:	701a      	strb	r2, [r3, #0]
	while (length--) {
    1a24:	1dbb      	adds	r3, r7, #6
    1a26:	881b      	ldrh	r3, [r3, #0]
    1a28:	1dba      	adds	r2, r7, #6
    1a2a:	1e59      	subs	r1, r3, #1
    1a2c:	8011      	strh	r1, [r2, #0]
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d199      	bne.n	1966 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    1a32:	2300      	movs	r3, #0
}
    1a34:	0018      	movs	r0, r3
    1a36:	46bd      	mov	sp, r7
    1a38:	b007      	add	sp, #28
    1a3a:	bd90      	pop	{r4, r7, pc}
    1a3c:	00001459 	.word	0x00001459
    1a40:	000014a9 	.word	0x000014a9
    1a44:	00001481 	.word	0x00001481
    1a48:	000014f1 	.word	0x000014f1

00001a4c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1a4c:	b580      	push	{r7, lr}
    1a4e:	b086      	sub	sp, #24
    1a50:	af00      	add	r7, sp, #0
    1a52:	60f8      	str	r0, [r7, #12]
    1a54:	60b9      	str	r1, [r7, #8]
    1a56:	1dbb      	adds	r3, r7, #6
    1a58:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1a5a:	68fb      	ldr	r3, [r7, #12]
    1a5c:	2238      	movs	r2, #56	; 0x38
    1a5e:	5c9b      	ldrb	r3, [r3, r2]
    1a60:	b2db      	uxtb	r3, r3
    1a62:	2b05      	cmp	r3, #5
    1a64:	d101      	bne.n	1a6a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1a66:	2305      	movs	r3, #5
    1a68:	e087      	b.n	1b7a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    1a6a:	1dbb      	adds	r3, r7, #6
    1a6c:	881b      	ldrh	r3, [r3, #0]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d101      	bne.n	1a76 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    1a72:	2317      	movs	r3, #23
    1a74:	e081      	b.n	1b7a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    1a76:	2316      	movs	r3, #22
    1a78:	18fb      	adds	r3, r7, r3
    1a7a:	2200      	movs	r2, #0
    1a7c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    1a7e:	2314      	movs	r3, #20
    1a80:	18fb      	adds	r3, r7, r3
    1a82:	1dba      	adds	r2, r7, #6
    1a84:	8812      	ldrh	r2, [r2, #0]
    1a86:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    1a88:	e05f      	b.n	1b4a <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	68fb      	ldr	r3, [r7, #12]
    1a8e:	0018      	movs	r0, r3
    1a90:	4b3c      	ldr	r3, [pc, #240]	; (1b84 <spi_write_buffer_wait+0x138>)
    1a92:	4798      	blx	r3
    1a94:	0003      	movs	r3, r0
    1a96:	001a      	movs	r2, r3
    1a98:	2301      	movs	r3, #1
    1a9a:	4053      	eors	r3, r2
    1a9c:	b2db      	uxtb	r3, r3
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d1f4      	bne.n	1a8c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1aa2:	2316      	movs	r3, #22
    1aa4:	18fb      	adds	r3, r7, r3
    1aa6:	881b      	ldrh	r3, [r3, #0]
    1aa8:	2216      	movs	r2, #22
    1aaa:	18ba      	adds	r2, r7, r2
    1aac:	1c59      	adds	r1, r3, #1
    1aae:	8011      	strh	r1, [r2, #0]
    1ab0:	001a      	movs	r2, r3
    1ab2:	68bb      	ldr	r3, [r7, #8]
    1ab4:	189b      	adds	r3, r3, r2
    1ab6:	781a      	ldrb	r2, [r3, #0]
    1ab8:	2312      	movs	r3, #18
    1aba:	18fb      	adds	r3, r7, r3
    1abc:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1abe:	68fb      	ldr	r3, [r7, #12]
    1ac0:	799b      	ldrb	r3, [r3, #6]
    1ac2:	2b01      	cmp	r3, #1
    1ac4:	d115      	bne.n	1af2 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1ac6:	2316      	movs	r3, #22
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	881b      	ldrh	r3, [r3, #0]
    1acc:	2216      	movs	r2, #22
    1ace:	18ba      	adds	r2, r7, r2
    1ad0:	1c59      	adds	r1, r3, #1
    1ad2:	8011      	strh	r1, [r2, #0]
    1ad4:	001a      	movs	r2, r3
    1ad6:	68bb      	ldr	r3, [r7, #8]
    1ad8:	189b      	adds	r3, r3, r2
    1ada:	781b      	ldrb	r3, [r3, #0]
    1adc:	021b      	lsls	r3, r3, #8
    1ade:	b21a      	sxth	r2, r3
    1ae0:	2312      	movs	r3, #18
    1ae2:	18fb      	adds	r3, r7, r3
    1ae4:	2100      	movs	r1, #0
    1ae6:	5e5b      	ldrsh	r3, [r3, r1]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b21a      	sxth	r2, r3
    1aec:	2312      	movs	r3, #18
    1aee:	18fb      	adds	r3, r7, r3
    1af0:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    1af2:	2312      	movs	r3, #18
    1af4:	18fb      	adds	r3, r7, r3
    1af6:	881a      	ldrh	r2, [r3, #0]
    1af8:	68fb      	ldr	r3, [r7, #12]
    1afa:	0011      	movs	r1, r2
    1afc:	0018      	movs	r0, r3
    1afe:	4b22      	ldr	r3, [pc, #136]	; (1b88 <spi_write_buffer_wait+0x13c>)
    1b00:	4798      	blx	r3

		if (module->receiver_enabled) {
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	79db      	ldrb	r3, [r3, #7]
    1b06:	2214      	movs	r2, #20
    1b08:	18ba      	adds	r2, r7, r2
    1b0a:	2114      	movs	r1, #20
    1b0c:	1879      	adds	r1, r7, r1
    1b0e:	8809      	ldrh	r1, [r1, #0]
    1b10:	8011      	strh	r1, [r2, #0]
    1b12:	2b00      	cmp	r3, #0
    1b14:	d019      	beq.n	1b4a <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	68fb      	ldr	r3, [r7, #12]
    1b1a:	0018      	movs	r0, r3
    1b1c:	4b1b      	ldr	r3, [pc, #108]	; (1b8c <spi_write_buffer_wait+0x140>)
    1b1e:	4798      	blx	r3
    1b20:	0003      	movs	r3, r0
    1b22:	001a      	movs	r2, r3
    1b24:	2301      	movs	r3, #1
    1b26:	4053      	eors	r3, r2
    1b28:	b2db      	uxtb	r3, r3
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	d1f4      	bne.n	1b18 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    1b2e:	2310      	movs	r3, #16
    1b30:	18fa      	adds	r2, r7, r3
    1b32:	68fb      	ldr	r3, [r7, #12]
    1b34:	0011      	movs	r1, r2
    1b36:	0018      	movs	r0, r3
    1b38:	4b15      	ldr	r3, [pc, #84]	; (1b90 <spi_write_buffer_wait+0x144>)
    1b3a:	4798      	blx	r3
			flush_length--;
    1b3c:	2314      	movs	r3, #20
    1b3e:	18fb      	adds	r3, r7, r3
    1b40:	881a      	ldrh	r2, [r3, #0]
    1b42:	2314      	movs	r3, #20
    1b44:	18fb      	adds	r3, r7, r3
    1b46:	3a01      	subs	r2, #1
    1b48:	801a      	strh	r2, [r3, #0]
	while (length--) {
    1b4a:	1dbb      	adds	r3, r7, #6
    1b4c:	881b      	ldrh	r3, [r3, #0]
    1b4e:	1dba      	adds	r2, r7, #6
    1b50:	1e59      	subs	r1, r3, #1
    1b52:	8011      	strh	r1, [r2, #0]
    1b54:	2b00      	cmp	r3, #0
    1b56:	d198      	bne.n	1a8a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1b58:	68fb      	ldr	r3, [r7, #12]
    1b5a:	795b      	ldrb	r3, [r3, #5]
    1b5c:	2b01      	cmp	r3, #1
    1b5e:	d10b      	bne.n	1b78 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    1b60:	46c0      	nop			; (mov r8, r8)
    1b62:	68fb      	ldr	r3, [r7, #12]
    1b64:	0018      	movs	r0, r3
    1b66:	4b0b      	ldr	r3, [pc, #44]	; (1b94 <spi_write_buffer_wait+0x148>)
    1b68:	4798      	blx	r3
    1b6a:	0003      	movs	r3, r0
    1b6c:	001a      	movs	r2, r3
    1b6e:	2301      	movs	r3, #1
    1b70:	4053      	eors	r3, r2
    1b72:	b2db      	uxtb	r3, r3
    1b74:	2b00      	cmp	r3, #0
    1b76:	d1f4      	bne.n	1b62 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1b78:	2300      	movs	r3, #0
}
    1b7a:	0018      	movs	r0, r3
    1b7c:	46bd      	mov	sp, r7
    1b7e:	b006      	add	sp, #24
    1b80:	bd80      	pop	{r7, pc}
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	00001459 	.word	0x00001459
    1b88:	000014a9 	.word	0x000014a9
    1b8c:	00001481 	.word	0x00001481
    1b90:	000014f1 	.word	0x000014f1
    1b94:	00001431 	.word	0x00001431

00001b98 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b084      	sub	sp, #16
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1baa:	781b      	ldrb	r3, [r3, #0]
    1bac:	b2da      	uxtb	r2, r3
    1bae:	230e      	movs	r3, #14
    1bb0:	18fb      	adds	r3, r7, r3
    1bb2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bb8:	1c5a      	adds	r2, r3, #1
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1bbe:	687b      	ldr	r3, [r7, #4]
    1bc0:	799b      	ldrb	r3, [r3, #6]
    1bc2:	2b01      	cmp	r3, #1
    1bc4:	d113      	bne.n	1bee <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1bc6:	687b      	ldr	r3, [r7, #4]
    1bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	b2db      	uxtb	r3, r3
    1bce:	021b      	lsls	r3, r3, #8
    1bd0:	b21a      	sxth	r2, r3
    1bd2:	230e      	movs	r3, #14
    1bd4:	18fb      	adds	r3, r7, r3
    1bd6:	2100      	movs	r1, #0
    1bd8:	5e5b      	ldrsh	r3, [r3, r1]
    1bda:	4313      	orrs	r3, r2
    1bdc:	b21a      	sxth	r2, r3
    1bde:	230e      	movs	r3, #14
    1be0:	18fb      	adds	r3, r7, r3
    1be2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1be4:	687b      	ldr	r3, [r7, #4]
    1be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1be8:	1c5a      	adds	r2, r3, #1
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1bee:	230e      	movs	r3, #14
    1bf0:	18fb      	adds	r3, r7, r3
    1bf2:	881b      	ldrh	r3, [r3, #0]
    1bf4:	05db      	lsls	r3, r3, #23
    1bf6:	0dda      	lsrs	r2, r3, #23
    1bf8:	68bb      	ldr	r3, [r7, #8]
    1bfa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1c00:	b29b      	uxth	r3, r3
    1c02:	3b01      	subs	r3, #1
    1c04:	b29a      	uxth	r2, r3
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	46bd      	mov	sp, r7
    1c0e:	b004      	add	sp, #16
    1c10:	bd80      	pop	{r7, pc}
	...

00001c14 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b084      	sub	sp, #16
    1c18:	af00      	add	r7, sp, #0
    1c1a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	681b      	ldr	r3, [r3, #0]
    1c20:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1c22:	4b08      	ldr	r3, [pc, #32]	; (1c44 <_spi_write_dummy+0x30>)
    1c24:	881b      	ldrh	r3, [r3, #0]
    1c26:	001a      	movs	r2, r3
    1c28:	68fb      	ldr	r3, [r7, #12]
    1c2a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1c2c:	687b      	ldr	r3, [r7, #4]
    1c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1c30:	b29b      	uxth	r3, r3
    1c32:	3b01      	subs	r3, #1
    1c34:	b29a      	uxth	r2, r3
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	46bd      	mov	sp, r7
    1c3e:	b004      	add	sp, #16
    1c40:	bd80      	pop	{r7, pc}
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	20000318 	.word	0x20000318

00001c48 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    1c48:	b580      	push	{r7, lr}
    1c4a:	b084      	sub	sp, #16
    1c4c:	af00      	add	r7, sp, #0
    1c4e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	681b      	ldr	r3, [r3, #0]
    1c54:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    1c56:	230a      	movs	r3, #10
    1c58:	18fb      	adds	r3, r7, r3
    1c5a:	2200      	movs	r2, #0
    1c5c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1c5e:	68fb      	ldr	r3, [r7, #12]
    1c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c62:	230a      	movs	r3, #10
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1c68:	687b      	ldr	r3, [r7, #4]
    1c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1c6c:	b29b      	uxth	r3, r3
    1c6e:	3b01      	subs	r3, #1
    1c70:	b29a      	uxth	r2, r3
    1c72:	687b      	ldr	r3, [r7, #4]
    1c74:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	46bd      	mov	sp, r7
    1c7a:	b004      	add	sp, #16
    1c7c:	bd80      	pop	{r7, pc}

00001c7e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    1c7e:	b580      	push	{r7, lr}
    1c80:	b084      	sub	sp, #16
    1c82:	af00      	add	r7, sp, #0
    1c84:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c90:	b29a      	uxth	r2, r3
    1c92:	230a      	movs	r3, #10
    1c94:	18fb      	adds	r3, r7, r3
    1c96:	05d2      	lsls	r2, r2, #23
    1c98:	0dd2      	lsrs	r2, r2, #23
    1c9a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1c9c:	687b      	ldr	r3, [r7, #4]
    1c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ca0:	220a      	movs	r2, #10
    1ca2:	18ba      	adds	r2, r7, r2
    1ca4:	8812      	ldrh	r2, [r2, #0]
    1ca6:	b2d2      	uxtb	r2, r2
    1ca8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cae:	1c5a      	adds	r2, r3, #1
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	799b      	ldrb	r3, [r3, #6]
    1cb8:	2b01      	cmp	r3, #1
    1cba:	d10d      	bne.n	1cd8 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cc0:	220a      	movs	r2, #10
    1cc2:	18ba      	adds	r2, r7, r2
    1cc4:	8812      	ldrh	r2, [r2, #0]
    1cc6:	0a12      	lsrs	r2, r2, #8
    1cc8:	b292      	uxth	r2, r2
    1cca:	b2d2      	uxtb	r2, r2
    1ccc:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    1cce:	687b      	ldr	r3, [r7, #4]
    1cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cd2:	1c5a      	adds	r2, r3, #1
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1cdc:	b29b      	uxth	r3, r3
    1cde:	3b01      	subs	r3, #1
    1ce0:	b29a      	uxth	r2, r3
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	861a      	strh	r2, [r3, #48]	; 0x30
}
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	46bd      	mov	sp, r7
    1cea:	b004      	add	sp, #16
    1cec:	bd80      	pop	{r7, pc}
	...

00001cf0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b086      	sub	sp, #24
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	0002      	movs	r2, r0
    1cf8:	1dfb      	adds	r3, r7, #7
    1cfa:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    1cfc:	1dfb      	adds	r3, r7, #7
    1cfe:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    1d00:	4b96      	ldr	r3, [pc, #600]	; (1f5c <_spi_interrupt_handler+0x26c>)
    1d02:	0092      	lsls	r2, r2, #2
    1d04:	58d3      	ldr	r3, [r2, r3]
    1d06:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1d08:	697b      	ldr	r3, [r7, #20]
    1d0a:	681b      	ldr	r3, [r3, #0]
    1d0c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1d0e:	697b      	ldr	r3, [r7, #20]
    1d10:	2237      	movs	r2, #55	; 0x37
    1d12:	5c9a      	ldrb	r2, [r3, r2]
    1d14:	697b      	ldr	r3, [r7, #20]
    1d16:	2136      	movs	r1, #54	; 0x36
    1d18:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    1d1a:	230f      	movs	r3, #15
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	400a      	ands	r2, r1
    1d20:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1d22:	693b      	ldr	r3, [r7, #16]
    1d24:	7e1b      	ldrb	r3, [r3, #24]
    1d26:	b2da      	uxtb	r2, r3
    1d28:	230c      	movs	r3, #12
    1d2a:	18fb      	adds	r3, r7, r3
    1d2c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    1d2e:	693b      	ldr	r3, [r7, #16]
    1d30:	7d9b      	ldrb	r3, [r3, #22]
    1d32:	b2db      	uxtb	r3, r3
    1d34:	b29a      	uxth	r2, r3
    1d36:	230c      	movs	r3, #12
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	210c      	movs	r1, #12
    1d3c:	1879      	adds	r1, r7, r1
    1d3e:	8809      	ldrh	r1, [r1, #0]
    1d40:	400a      	ands	r2, r1
    1d42:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1d44:	230c      	movs	r3, #12
    1d46:	18fb      	adds	r3, r7, r3
    1d48:	881b      	ldrh	r3, [r3, #0]
    1d4a:	2201      	movs	r2, #1
    1d4c:	4013      	ands	r3, r2
    1d4e:	d038      	beq.n	1dc2 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1d50:	697b      	ldr	r3, [r7, #20]
    1d52:	795b      	ldrb	r3, [r3, #5]
    1d54:	2b01      	cmp	r3, #1
    1d56:	d110      	bne.n	1d7a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    1d58:	697b      	ldr	r3, [r7, #20]
    1d5a:	7a5b      	ldrb	r3, [r3, #9]
    1d5c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d10b      	bne.n	1d7a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    1d62:	697b      	ldr	r3, [r7, #20]
    1d64:	0018      	movs	r0, r3
    1d66:	4b7e      	ldr	r3, [pc, #504]	; (1f60 <_spi_interrupt_handler+0x270>)
    1d68:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1d6a:	697b      	ldr	r3, [r7, #20]
    1d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1d6e:	b29b      	uxth	r3, r3
    1d70:	2b00      	cmp	r3, #0
    1d72:	d102      	bne.n	1d7a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1d74:	693b      	ldr	r3, [r7, #16]
    1d76:	2201      	movs	r2, #1
    1d78:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1d7a:	697b      	ldr	r3, [r7, #20]
    1d7c:	795b      	ldrb	r3, [r3, #5]
		if (0
    1d7e:	2b01      	cmp	r3, #1
    1d80:	d11f      	bne.n	1dc2 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    1d82:	697b      	ldr	r3, [r7, #20]
    1d84:	7a5b      	ldrb	r3, [r3, #9]
    1d86:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d01a      	beq.n	1dc2 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1d8c:	697b      	ldr	r3, [r7, #20]
    1d8e:	0018      	movs	r0, r3
    1d90:	4b74      	ldr	r3, [pc, #464]	; (1f64 <_spi_interrupt_handler+0x274>)
    1d92:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    1d94:	697b      	ldr	r3, [r7, #20]
    1d96:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1d98:	b29b      	uxth	r3, r3
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d111      	bne.n	1dc2 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1d9e:	693b      	ldr	r3, [r7, #16]
    1da0:	2201      	movs	r2, #1
    1da2:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1da4:	697b      	ldr	r3, [r7, #20]
    1da6:	7a5b      	ldrb	r3, [r3, #9]
    1da8:	b2db      	uxtb	r3, r3
    1daa:	2b01      	cmp	r3, #1
    1dac:	d109      	bne.n	1dc2 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    1dae:	697b      	ldr	r3, [r7, #20]
    1db0:	79db      	ldrb	r3, [r3, #7]
    1db2:	2201      	movs	r2, #1
    1db4:	4053      	eors	r3, r2
    1db6:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    1db8:	2b00      	cmp	r3, #0
    1dba:	d002      	beq.n	1dc2 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1dbc:	693b      	ldr	r3, [r7, #16]
    1dbe:	2202      	movs	r2, #2
    1dc0:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1dc2:	230c      	movs	r3, #12
    1dc4:	18fb      	adds	r3, r7, r3
    1dc6:	881b      	ldrh	r3, [r3, #0]
    1dc8:	2204      	movs	r2, #4
    1dca:	4013      	ands	r3, r2
    1dcc:	d100      	bne.n	1dd0 <_spi_interrupt_handler+0xe0>
    1dce:	e07e      	b.n	1ece <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1dd0:	693b      	ldr	r3, [r7, #16]
    1dd2:	8b5b      	ldrh	r3, [r3, #26]
    1dd4:	b29b      	uxth	r3, r3
    1dd6:	001a      	movs	r2, r3
    1dd8:	2304      	movs	r3, #4
    1dda:	4013      	ands	r3, r2
    1ddc:	d022      	beq.n	1e24 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1dde:	697b      	ldr	r3, [r7, #20]
    1de0:	7a5b      	ldrb	r3, [r3, #9]
    1de2:	b2db      	uxtb	r3, r3
    1de4:	2b01      	cmp	r3, #1
    1de6:	d014      	beq.n	1e12 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1de8:	697b      	ldr	r3, [r7, #20]
    1dea:	2238      	movs	r2, #56	; 0x38
    1dec:	211e      	movs	r1, #30
    1dee:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1df0:	697b      	ldr	r3, [r7, #20]
    1df2:	2203      	movs	r2, #3
    1df4:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1df6:	693b      	ldr	r3, [r7, #16]
    1df8:	2205      	movs	r2, #5
    1dfa:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1dfc:	230f      	movs	r3, #15
    1dfe:	18fb      	adds	r3, r7, r3
    1e00:	781b      	ldrb	r3, [r3, #0]
    1e02:	2208      	movs	r2, #8
    1e04:	4013      	ands	r3, r2
    1e06:	d004      	beq.n	1e12 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1e08:	697b      	ldr	r3, [r7, #20]
    1e0a:	699b      	ldr	r3, [r3, #24]
    1e0c:	697a      	ldr	r2, [r7, #20]
    1e0e:	0010      	movs	r0, r2
    1e10:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1e12:	693b      	ldr	r3, [r7, #16]
    1e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e16:	230a      	movs	r3, #10
    1e18:	18fb      	adds	r3, r7, r3
    1e1a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1e1c:	693b      	ldr	r3, [r7, #16]
    1e1e:	2204      	movs	r2, #4
    1e20:	835a      	strh	r2, [r3, #26]
    1e22:	e054      	b.n	1ece <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1e24:	697b      	ldr	r3, [r7, #20]
    1e26:	7a5b      	ldrb	r3, [r3, #9]
    1e28:	b2db      	uxtb	r3, r3
    1e2a:	2b01      	cmp	r3, #1
    1e2c:	d11e      	bne.n	1e6c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    1e2e:	697b      	ldr	r3, [r7, #20]
    1e30:	0018      	movs	r0, r3
    1e32:	4b4d      	ldr	r3, [pc, #308]	; (1f68 <_spi_interrupt_handler+0x278>)
    1e34:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1e36:	697b      	ldr	r3, [r7, #20]
    1e38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1e3a:	b29b      	uxth	r3, r3
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d146      	bne.n	1ece <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1e40:	693b      	ldr	r3, [r7, #16]
    1e42:	2204      	movs	r2, #4
    1e44:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    1e46:	697b      	ldr	r3, [r7, #20]
    1e48:	2238      	movs	r2, #56	; 0x38
    1e4a:	2100      	movs	r1, #0
    1e4c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    1e4e:	697b      	ldr	r3, [r7, #20]
    1e50:	2203      	movs	r2, #3
    1e52:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1e54:	230f      	movs	r3, #15
    1e56:	18fb      	adds	r3, r7, r3
    1e58:	781b      	ldrb	r3, [r3, #0]
    1e5a:	2201      	movs	r2, #1
    1e5c:	4013      	ands	r3, r2
    1e5e:	d036      	beq.n	1ece <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1e60:	697b      	ldr	r3, [r7, #20]
    1e62:	68db      	ldr	r3, [r3, #12]
    1e64:	697a      	ldr	r2, [r7, #20]
    1e66:	0010      	movs	r0, r2
    1e68:	4798      	blx	r3
    1e6a:	e030      	b.n	1ece <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    1e6c:	697b      	ldr	r3, [r7, #20]
    1e6e:	0018      	movs	r0, r3
    1e70:	4b3e      	ldr	r3, [pc, #248]	; (1f6c <_spi_interrupt_handler+0x27c>)
    1e72:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    1e74:	697b      	ldr	r3, [r7, #20]
    1e76:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1e78:	b29b      	uxth	r3, r3
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d127      	bne.n	1ece <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    1e7e:	697b      	ldr	r3, [r7, #20]
    1e80:	2238      	movs	r2, #56	; 0x38
    1e82:	2100      	movs	r1, #0
    1e84:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1e86:	693b      	ldr	r3, [r7, #16]
    1e88:	2204      	movs	r2, #4
    1e8a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1e8c:	697b      	ldr	r3, [r7, #20]
    1e8e:	7a5b      	ldrb	r3, [r3, #9]
    1e90:	b2db      	uxtb	r3, r3
    1e92:	2b02      	cmp	r3, #2
    1e94:	d10b      	bne.n	1eae <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1e96:	230f      	movs	r3, #15
    1e98:	18fb      	adds	r3, r7, r3
    1e9a:	781b      	ldrb	r3, [r3, #0]
    1e9c:	2204      	movs	r2, #4
    1e9e:	4013      	ands	r3, r2
    1ea0:	d015      	beq.n	1ece <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1ea2:	697b      	ldr	r3, [r7, #20]
    1ea4:	695b      	ldr	r3, [r3, #20]
    1ea6:	697a      	ldr	r2, [r7, #20]
    1ea8:	0010      	movs	r0, r2
    1eaa:	4798      	blx	r3
    1eac:	e00f      	b.n	1ece <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    1eae:	697b      	ldr	r3, [r7, #20]
    1eb0:	7a5b      	ldrb	r3, [r3, #9]
    1eb2:	b2db      	uxtb	r3, r3
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d10a      	bne.n	1ece <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1eb8:	230f      	movs	r3, #15
    1eba:	18fb      	adds	r3, r7, r3
    1ebc:	781b      	ldrb	r3, [r3, #0]
    1ebe:	2202      	movs	r2, #2
    1ec0:	4013      	ands	r3, r2
    1ec2:	d004      	beq.n	1ece <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1ec4:	697b      	ldr	r3, [r7, #20]
    1ec6:	691b      	ldr	r3, [r3, #16]
    1ec8:	697a      	ldr	r2, [r7, #20]
    1eca:	0010      	movs	r0, r2
    1ecc:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1ece:	230c      	movs	r3, #12
    1ed0:	18fb      	adds	r3, r7, r3
    1ed2:	881b      	ldrh	r3, [r3, #0]
    1ed4:	2202      	movs	r2, #2
    1ed6:	4013      	ands	r3, r2
    1ed8:	d024      	beq.n	1f24 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1eda:	697b      	ldr	r3, [r7, #20]
    1edc:	795b      	ldrb	r3, [r3, #5]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d120      	bne.n	1f24 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1ee2:	697b      	ldr	r3, [r7, #20]
    1ee4:	7a5b      	ldrb	r3, [r3, #9]
    1ee6:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1ee8:	2b01      	cmp	r3, #1
    1eea:	d11b      	bne.n	1f24 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1eec:	697b      	ldr	r3, [r7, #20]
    1eee:	79db      	ldrb	r3, [r3, #7]
    1ef0:	2201      	movs	r2, #1
    1ef2:	4053      	eors	r3, r2
    1ef4:	b2db      	uxtb	r3, r3
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d014      	beq.n	1f24 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1efa:	693b      	ldr	r3, [r7, #16]
    1efc:	2202      	movs	r2, #2
    1efe:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1f00:	697b      	ldr	r3, [r7, #20]
    1f02:	2203      	movs	r2, #3
    1f04:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    1f06:	697b      	ldr	r3, [r7, #20]
    1f08:	2238      	movs	r2, #56	; 0x38
    1f0a:	2100      	movs	r1, #0
    1f0c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1f0e:	230f      	movs	r3, #15
    1f10:	18fb      	adds	r3, r7, r3
    1f12:	781b      	ldrb	r3, [r3, #0]
    1f14:	2201      	movs	r2, #1
    1f16:	4013      	ands	r3, r2
    1f18:	d004      	beq.n	1f24 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1f1a:	697b      	ldr	r3, [r7, #20]
    1f1c:	68db      	ldr	r3, [r3, #12]
    1f1e:	697a      	ldr	r2, [r7, #20]
    1f20:	0010      	movs	r0, r2
    1f22:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1f24:	230c      	movs	r3, #12
    1f26:	18fb      	adds	r3, r7, r3
    1f28:	881b      	ldrh	r3, [r3, #0]
    1f2a:	2280      	movs	r2, #128	; 0x80
    1f2c:	4013      	ands	r3, r2
    1f2e:	d010      	beq.n	1f52 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1f30:	693b      	ldr	r3, [r7, #16]
    1f32:	2280      	movs	r2, #128	; 0x80
    1f34:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1f36:	693b      	ldr	r3, [r7, #16]
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1f3c:	230f      	movs	r3, #15
    1f3e:	18fb      	adds	r3, r7, r3
    1f40:	781b      	ldrb	r3, [r3, #0]
    1f42:	2240      	movs	r2, #64	; 0x40
    1f44:	4013      	ands	r3, r2
    1f46:	d004      	beq.n	1f52 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1f48:	697b      	ldr	r3, [r7, #20]
    1f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f4c:	697a      	ldr	r2, [r7, #20]
    1f4e:	0010      	movs	r0, r2
    1f50:	4798      	blx	r3
		}
	}
#  endif
}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	46bd      	mov	sp, r7
    1f56:	b006      	add	sp, #24
    1f58:	bd80      	pop	{r7, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	2000044c 	.word	0x2000044c
    1f60:	00001c15 	.word	0x00001c15
    1f64:	00001b99 	.word	0x00001b99
    1f68:	00001c49 	.word	0x00001c49
    1f6c:	00001c7f 	.word	0x00001c7f

00001f70 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1f70:	b580      	push	{r7, lr}
    1f72:	af00      	add	r7, sp, #0
    1f74:	2000      	movs	r0, #0
    1f76:	4b02      	ldr	r3, [pc, #8]	; (1f80 <TCC0_Handler+0x10>)
    1f78:	4798      	blx	r3
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	46bd      	mov	sp, r7
    1f7e:	bd80      	pop	{r7, pc}
    1f80:	00001fad 	.word	0x00001fad

00001f84 <TCC1_Handler>:
    1f84:	b580      	push	{r7, lr}
    1f86:	af00      	add	r7, sp, #0
    1f88:	2001      	movs	r0, #1
    1f8a:	4b02      	ldr	r3, [pc, #8]	; (1f94 <TCC1_Handler+0x10>)
    1f8c:	4798      	blx	r3
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	46bd      	mov	sp, r7
    1f92:	bd80      	pop	{r7, pc}
    1f94:	00001fad 	.word	0x00001fad

00001f98 <TCC2_Handler>:
    1f98:	b580      	push	{r7, lr}
    1f9a:	af00      	add	r7, sp, #0
    1f9c:	2002      	movs	r0, #2
    1f9e:	4b02      	ldr	r3, [pc, #8]	; (1fa8 <TCC2_Handler+0x10>)
    1fa0:	4798      	blx	r3
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	46bd      	mov	sp, r7
    1fa6:	bd80      	pop	{r7, pc}
    1fa8:	00001fad 	.word	0x00001fad

00001fac <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1fac:	b580      	push	{r7, lr}
    1fae:	b086      	sub	sp, #24
    1fb0:	af00      	add	r7, sp, #0
    1fb2:	0002      	movs	r2, r0
    1fb4:	1dfb      	adds	r3, r7, #7
    1fb6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    1fb8:	1dfb      	adds	r3, r7, #7
    1fba:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    1fbc:	4b18      	ldr	r3, [pc, #96]	; (2020 <STACK_SIZE+0x20>)
    1fbe:	0092      	lsls	r2, r2, #2
    1fc0:	58d3      	ldr	r3, [r2, r3]
    1fc2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1fc4:	693b      	ldr	r3, [r7, #16]
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    1fca:	693b      	ldr	r3, [r7, #16]
    1fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1fce:	401a      	ands	r2, r3
			module->enable_callback_mask);
    1fd0:	693b      	ldr	r3, [r7, #16]
    1fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1fd4:	4013      	ands	r3, r2
    1fd6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1fd8:	2300      	movs	r3, #0
    1fda:	617b      	str	r3, [r7, #20]
    1fdc:	e019      	b.n	2012 <STACK_SIZE+0x12>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1fde:	4b11      	ldr	r3, [pc, #68]	; (2024 <STACK_SIZE+0x24>)
    1fe0:	697a      	ldr	r2, [r7, #20]
    1fe2:	0092      	lsls	r2, r2, #2
    1fe4:	58d3      	ldr	r3, [r2, r3]
    1fe6:	68fa      	ldr	r2, [r7, #12]
    1fe8:	4013      	ands	r3, r2
    1fea:	d00f      	beq.n	200c <STACK_SIZE+0xc>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1fec:	693a      	ldr	r2, [r7, #16]
    1fee:	697b      	ldr	r3, [r7, #20]
    1ff0:	009b      	lsls	r3, r3, #2
    1ff2:	18d3      	adds	r3, r2, r3
    1ff4:	3304      	adds	r3, #4
    1ff6:	681b      	ldr	r3, [r3, #0]
    1ff8:	693a      	ldr	r2, [r7, #16]
    1ffa:	0010      	movs	r0, r2
    1ffc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1ffe:	693b      	ldr	r3, [r7, #16]
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	4a08      	ldr	r2, [pc, #32]	; (2024 <STACK_SIZE+0x24>)
    2004:	6979      	ldr	r1, [r7, #20]
    2006:	0089      	lsls	r1, r1, #2
    2008:	588a      	ldr	r2, [r1, r2]
    200a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    200c:	697b      	ldr	r3, [r7, #20]
    200e:	3301      	adds	r3, #1
    2010:	617b      	str	r3, [r7, #20]
    2012:	697b      	ldr	r3, [r7, #20]
    2014:	2b0b      	cmp	r3, #11
    2016:	dde2      	ble.n	1fde <_tcc_interrupt_handler+0x32>
		}
	}
}
    2018:	46c0      	nop			; (mov r8, r8)
    201a:	46bd      	mov	sp, r7
    201c:	b006      	add	sp, #24
    201e:	bd80      	pop	{r7, pc}
    2020:	2000031c 	.word	0x2000031c
    2024:	0000e404 	.word	0x0000e404

00002028 <hdc1080_read_reg>:
 * @reg: Register address
 * @val: 16-bit register value from the hdc1080
 * Returns status or error for invalid parameters.
 */
int hdc1080_read_reg(uint16_t delay, uint8_t reg, uint16_t *val)
{
    2028:	b580      	push	{r7, lr}
    202a:	b088      	sub	sp, #32
    202c:	af00      	add	r7, sp, #0
    202e:	603a      	str	r2, [r7, #0]
    2030:	1dbb      	adds	r3, r7, #6
    2032:	1c02      	adds	r2, r0, #0
    2034:	801a      	strh	r2, [r3, #0]
    2036:	1d7b      	adds	r3, r7, #5
    2038:	1c0a      	adds	r2, r1, #0
    203a:	701a      	strb	r2, [r3, #0]
	
	int error = STAT_OK;
    203c:	2300      	movs	r3, #0
    203e:	61fb      	str	r3, [r7, #28]
	uint8_t write_buffer[2];

	// Check argument
	if ((reg != HDC1080_TEMPERATURE) &
    2040:	1d7b      	adds	r3, r7, #5
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	1e5a      	subs	r2, r3, #1
    2046:	4193      	sbcs	r3, r2
    2048:	b2db      	uxtb	r3, r3
    204a:	1d7a      	adds	r2, r7, #5
    204c:	7812      	ldrb	r2, [r2, #0]
    204e:	3a01      	subs	r2, #1
    2050:	1e51      	subs	r1, r2, #1
    2052:	418a      	sbcs	r2, r1
    2054:	b2d2      	uxtb	r2, r2
    2056:	4013      	ands	r3, r2
    2058:	b2db      	uxtb	r3, r3
    205a:	001a      	movs	r2, r3
		  (reg != HDC1080_HUMIDITY) &
		  (reg != HDC1080_CONFIG)){
    205c:	1d7b      	adds	r3, r7, #5
    205e:	781b      	ldrb	r3, [r3, #0]
    2060:	3b02      	subs	r3, #2
    2062:	1e59      	subs	r1, r3, #1
    2064:	418b      	sbcs	r3, r1
    2066:	b2db      	uxtb	r3, r3
		  (reg != HDC1080_HUMIDITY) &
    2068:	4013      	ands	r3, r2
	if ((reg != HDC1080_TEMPERATURE) &
    206a:	d001      	beq.n	2070 <hdc1080_read_reg+0x48>
		return STAT_ERR;
    206c:	2301      	movs	r3, #1
    206e:	e079      	b.n	2164 <hdc1080_read_reg+0x13c>
		printf("HDC ERROR Invalid register\r\n");
		}
	
	write_buffer[0] = reg;
    2070:	2310      	movs	r3, #16
    2072:	18fb      	adds	r3, r7, r3
    2074:	1d7a      	adds	r2, r7, #5
    2076:	7812      	ldrb	r2, [r2, #0]
    2078:	701a      	strb	r2, [r3, #0]
	/* Read register */
	/* Send the read followed by address */
	
	wr_packet.address = HDC1080_ADDR;
    207a:	4b3c      	ldr	r3, [pc, #240]	; (216c <hdc1080_read_reg+0x144>)
    207c:	2240      	movs	r2, #64	; 0x40
    207e:	801a      	strh	r2, [r3, #0]
	wr_packet.data_length = 2;
    2080:	4b3a      	ldr	r3, [pc, #232]	; (216c <hdc1080_read_reg+0x144>)
    2082:	2202      	movs	r2, #2
    2084:	805a      	strh	r2, [r3, #2]
	wr_packet.data = write_buffer;
    2086:	4b39      	ldr	r3, [pc, #228]	; (216c <hdc1080_read_reg+0x144>)
    2088:	2210      	movs	r2, #16
    208a:	18ba      	adds	r2, r7, r2
    208c:	605a      	str	r2, [r3, #4]
	int timeout = 0;
    208e:	2300      	movs	r3, #0
    2090:	61bb      	str	r3, [r7, #24]
	int max_timeout = 1000;
    2092:	23fa      	movs	r3, #250	; 0xfa
    2094:	009b      	lsls	r3, r3, #2
    2096:	617b      	str	r3, [r7, #20]

	while (i2c_master_write_packet_wait(&i2c_hdc_instance, &wr_packet) !=
    2098:	e00c      	b.n	20b4 <hdc1080_read_reg+0x8c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == max_timeout) {
    209a:	69bb      	ldr	r3, [r7, #24]
    209c:	1c5a      	adds	r2, r3, #1
    209e:	61ba      	str	r2, [r7, #24]
    20a0:	697a      	ldr	r2, [r7, #20]
    20a2:	4293      	cmp	r3, r2
    20a4:	d106      	bne.n	20b4 <hdc1080_read_reg+0x8c>
			error = STAT_ERR;
    20a6:	2301      	movs	r3, #1
    20a8:	61fb      	str	r3, [r7, #28]
			printf("HDC WRITE TIMEOUT\r\n");
    20aa:	4b31      	ldr	r3, [pc, #196]	; (2170 <hdc1080_read_reg+0x148>)
    20ac:	0018      	movs	r0, r3
    20ae:	4b31      	ldr	r3, [pc, #196]	; (2174 <hdc1080_read_reg+0x14c>)
    20b0:	4798      	blx	r3
			break;
    20b2:	e007      	b.n	20c4 <hdc1080_read_reg+0x9c>
	while (i2c_master_write_packet_wait(&i2c_hdc_instance, &wr_packet) !=
    20b4:	4a2d      	ldr	r2, [pc, #180]	; (216c <hdc1080_read_reg+0x144>)
    20b6:	4b30      	ldr	r3, [pc, #192]	; (2178 <hdc1080_read_reg+0x150>)
    20b8:	0011      	movs	r1, r2
    20ba:	0018      	movs	r0, r3
    20bc:	4b2f      	ldr	r3, [pc, #188]	; (217c <hdc1080_read_reg+0x154>)
    20be:	4798      	blx	r3
    20c0:	1e03      	subs	r3, r0, #0
    20c2:	d1ea      	bne.n	209a <hdc1080_read_reg+0x72>
		}
	}
	if (error != STAT_OK)
    20c4:	69fb      	ldr	r3, [r7, #28]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d001      	beq.n	20ce <hdc1080_read_reg+0xa6>
		return error;
    20ca:	69fb      	ldr	r3, [r7, #28]
    20cc:	e04a      	b.n	2164 <hdc1080_read_reg+0x13c>

	delay_ms(delay); 
    20ce:	1dbb      	adds	r3, r7, #6
    20d0:	881b      	ldrh	r3, [r3, #0]
    20d2:	2b00      	cmp	r3, #0
    20d4:	d005      	beq.n	20e2 <hdc1080_read_reg+0xba>
    20d6:	1dbb      	adds	r3, r7, #6
    20d8:	881b      	ldrh	r3, [r3, #0]
    20da:	0018      	movs	r0, r3
    20dc:	4b28      	ldr	r3, [pc, #160]	; (2180 <hdc1080_read_reg+0x158>)
    20de:	4798      	blx	r3
    20e0:	e002      	b.n	20e8 <hdc1080_read_reg+0xc0>
    20e2:	2001      	movs	r0, #1
    20e4:	4b27      	ldr	r3, [pc, #156]	; (2184 <hdc1080_read_reg+0x15c>)
    20e6:	4798      	blx	r3
	
	/* Receive a 2-byte result */
	
	uint8_t read_buffer[3];
	read_buffer[0] = reg;
    20e8:	230c      	movs	r3, #12
    20ea:	18fb      	adds	r3, r7, r3
    20ec:	1d7a      	adds	r2, r7, #5
    20ee:	7812      	ldrb	r2, [r2, #0]
    20f0:	701a      	strb	r2, [r3, #0]
	rd_packet.address = HDC1080_ADDR;
    20f2:	4b25      	ldr	r3, [pc, #148]	; (2188 <hdc1080_read_reg+0x160>)
    20f4:	2240      	movs	r2, #64	; 0x40
    20f6:	801a      	strh	r2, [r3, #0]
	rd_packet.data_length = 3;
    20f8:	4b23      	ldr	r3, [pc, #140]	; (2188 <hdc1080_read_reg+0x160>)
    20fa:	2203      	movs	r2, #3
    20fc:	805a      	strh	r2, [r3, #2]
	rd_packet.data = read_buffer;
    20fe:	4b22      	ldr	r3, [pc, #136]	; (2188 <hdc1080_read_reg+0x160>)
    2100:	220c      	movs	r2, #12
    2102:	18ba      	adds	r2, r7, r2
    2104:	605a      	str	r2, [r3, #4]
	timeout = 0;
    2106:	2300      	movs	r3, #0
    2108:	61bb      	str	r3, [r7, #24]
	max_timeout = 1000;
    210a:	23fa      	movs	r3, #250	; 0xfa
    210c:	009b      	lsls	r3, r3, #2
    210e:	617b      	str	r3, [r7, #20]
	while (i2c_master_read_packet_wait(&i2c_hdc_instance, &rd_packet) !=
    2110:	e00c      	b.n	212c <hdc1080_read_reg+0x104>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == max_timeout) {
    2112:	69bb      	ldr	r3, [r7, #24]
    2114:	1c5a      	adds	r2, r3, #1
    2116:	61ba      	str	r2, [r7, #24]
    2118:	697a      	ldr	r2, [r7, #20]
    211a:	4293      	cmp	r3, r2
    211c:	d106      	bne.n	212c <hdc1080_read_reg+0x104>
			printf("HDC READ TIMEOUT\r\n");
    211e:	4b1b      	ldr	r3, [pc, #108]	; (218c <hdc1080_read_reg+0x164>)
    2120:	0018      	movs	r0, r3
    2122:	4b14      	ldr	r3, [pc, #80]	; (2174 <hdc1080_read_reg+0x14c>)
    2124:	4798      	blx	r3
			error = STAT_ERR;
    2126:	2301      	movs	r3, #1
    2128:	61fb      	str	r3, [r7, #28]
			break;
    212a:	e007      	b.n	213c <hdc1080_read_reg+0x114>
	while (i2c_master_read_packet_wait(&i2c_hdc_instance, &rd_packet) !=
    212c:	4a16      	ldr	r2, [pc, #88]	; (2188 <hdc1080_read_reg+0x160>)
    212e:	4b12      	ldr	r3, [pc, #72]	; (2178 <hdc1080_read_reg+0x150>)
    2130:	0011      	movs	r1, r2
    2132:	0018      	movs	r0, r3
    2134:	4b16      	ldr	r3, [pc, #88]	; (2190 <hdc1080_read_reg+0x168>)
    2136:	4798      	blx	r3
    2138:	1e03      	subs	r3, r0, #0
    213a:	d1ea      	bne.n	2112 <hdc1080_read_reg+0xea>
		}
	}
	
	
	if (error != STAT_OK)
    213c:	69fb      	ldr	r3, [r7, #28]
    213e:	2b00      	cmp	r3, #0
    2140:	d001      	beq.n	2146 <hdc1080_read_reg+0x11e>
		return error;
    2142:	69fb      	ldr	r3, [r7, #28]
    2144:	e00e      	b.n	2164 <hdc1080_read_reg+0x13c>
	
	/* Result */
	*val = read_buffer[0]*256+read_buffer[1]; 
    2146:	230c      	movs	r3, #12
    2148:	18fb      	adds	r3, r7, r3
    214a:	781b      	ldrb	r3, [r3, #0]
    214c:	b29b      	uxth	r3, r3
    214e:	021b      	lsls	r3, r3, #8
    2150:	b29a      	uxth	r2, r3
    2152:	230c      	movs	r3, #12
    2154:	18fb      	adds	r3, r7, r3
    2156:	785b      	ldrb	r3, [r3, #1]
    2158:	b29b      	uxth	r3, r3
    215a:	18d3      	adds	r3, r2, r3
    215c:	b29a      	uxth	r2, r3
    215e:	683b      	ldr	r3, [r7, #0]
    2160:	801a      	strh	r2, [r3, #0]

	return STAT_OK;  /* Success */
    2162:	2300      	movs	r3, #0
	
}
    2164:	0018      	movs	r0, r3
    2166:	46bd      	mov	sp, r7
    2168:	b008      	add	sp, #32
    216a:	bd80      	pop	{r7, pc}
    216c:	20000008 	.word	0x20000008
    2170:	0000e434 	.word	0x0000e434
    2174:	00009c59 	.word	0x00009c59
    2178:	200003d0 	.word	0x200003d0
    217c:	00003ce5 	.word	0x00003ce5
    2180:	00002961 	.word	0x00002961
    2184:	00002931 	.word	0x00002931
    2188:	20000014 	.word	0x20000014
    218c:	0000e448 	.word	0x0000e448
    2190:	00003b2d 	.word	0x00003b2d

00002194 <hdc1080_write_reg>:
 * @reg: Register address
 * @val: 8-bit register value from the Si7013
 * Returns  status or error for invalid arguments.
 */
int hdc1080_write_reg(uint8_t reg, uint16_t val)
{
    2194:	b580      	push	{r7, lr}
    2196:	b086      	sub	sp, #24
    2198:	af00      	add	r7, sp, #0
    219a:	0002      	movs	r2, r0
    219c:	1dfb      	adds	r3, r7, #7
    219e:	701a      	strb	r2, [r3, #0]
    21a0:	1d3b      	adds	r3, r7, #4
    21a2:	1c0a      	adds	r2, r1, #0
    21a4:	801a      	strh	r2, [r3, #0]
	uint8_t write_buffer[3];
	int error = STAT_OK;
    21a6:	2300      	movs	r3, #0
    21a8:	617b      	str	r3, [r7, #20]
	
		// Check argument
	if ((reg != HDC1080_TEMPERATURE) &  // dummy write to adr 0 ... trigger measurement
    21aa:	1dfb      	adds	r3, r7, #7
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	1e5a      	subs	r2, r3, #1
    21b0:	4193      	sbcs	r3, r2
    21b2:	b2db      	uxtb	r3, r3
    21b4:	1dfa      	adds	r2, r7, #7
    21b6:	7812      	ldrb	r2, [r2, #0]
    21b8:	3a02      	subs	r2, #2
    21ba:	1e51      	subs	r1, r2, #1
    21bc:	418a      	sbcs	r2, r1
    21be:	b2d2      	uxtb	r2, r2
    21c0:	4013      	ands	r3, r2
    21c2:	b2db      	uxtb	r3, r3
    21c4:	2b00      	cmp	r3, #0
    21c6:	d001      	beq.n	21cc <hdc1080_write_reg+0x38>
		  (reg != HDC1080_CONFIG) )       // config is "writable"
		return STAT_ERR;
    21c8:	2301      	movs	r3, #1
    21ca:	e03d      	b.n	2248 <hdc1080_write_reg+0xb4>

	write_buffer[0] = reg;
    21cc:	2308      	movs	r3, #8
    21ce:	18fb      	adds	r3, r7, r3
    21d0:	1dfa      	adds	r2, r7, #7
    21d2:	7812      	ldrb	r2, [r2, #0]
    21d4:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = (uint8_t)((val >> 8) & 0xff);  // msb
    21d6:	1d3b      	adds	r3, r7, #4
    21d8:	881b      	ldrh	r3, [r3, #0]
    21da:	0a1b      	lsrs	r3, r3, #8
    21dc:	b29b      	uxth	r3, r3
    21de:	b2da      	uxtb	r2, r3
    21e0:	2308      	movs	r3, #8
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	705a      	strb	r2, [r3, #1]
	write_buffer[2] = (uint8_t)(val & 0xff); 				// lsb
    21e6:	1d3b      	adds	r3, r7, #4
    21e8:	881b      	ldrh	r3, [r3, #0]
    21ea:	b2da      	uxtb	r2, r3
    21ec:	2308      	movs	r3, #8
    21ee:	18fb      	adds	r3, r7, r3
    21f0:	709a      	strb	r2, [r3, #2]
	/* Write the register */
	/* Send the command and data */
	
	wr_packet.address = HDC1080_ADDR;
    21f2:	4b17      	ldr	r3, [pc, #92]	; (2250 <hdc1080_write_reg+0xbc>)
    21f4:	2240      	movs	r2, #64	; 0x40
    21f6:	801a      	strh	r2, [r3, #0]
	wr_packet.data_length = 2;
    21f8:	4b15      	ldr	r3, [pc, #84]	; (2250 <hdc1080_write_reg+0xbc>)
    21fa:	2202      	movs	r2, #2
    21fc:	805a      	strh	r2, [r3, #2]
	wr_packet.data = write_buffer;
    21fe:	4b14      	ldr	r3, [pc, #80]	; (2250 <hdc1080_write_reg+0xbc>)
    2200:	2208      	movs	r2, #8
    2202:	18ba      	adds	r2, r7, r2
    2204:	605a      	str	r2, [r3, #4]
	int timeout = 0;
    2206:	2300      	movs	r3, #0
    2208:	613b      	str	r3, [r7, #16]
	int max_timeout = 1000;
    220a:	23fa      	movs	r3, #250	; 0xfa
    220c:	009b      	lsls	r3, r3, #2
    220e:	60fb      	str	r3, [r7, #12]
	
	while (i2c_master_write_packet_wait(&i2c_hdc_instance, &wr_packet) !=
    2210:	e00c      	b.n	222c <hdc1080_write_reg+0x98>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == max_timeout) {
    2212:	693b      	ldr	r3, [r7, #16]
    2214:	1c5a      	adds	r2, r3, #1
    2216:	613a      	str	r2, [r7, #16]
    2218:	68fa      	ldr	r2, [r7, #12]
    221a:	4293      	cmp	r3, r2
    221c:	d106      	bne.n	222c <hdc1080_write_reg+0x98>
			printf("HDC WRITE TIMEOUT\r\n");
    221e:	4b0d      	ldr	r3, [pc, #52]	; (2254 <hdc1080_write_reg+0xc0>)
    2220:	0018      	movs	r0, r3
    2222:	4b0d      	ldr	r3, [pc, #52]	; (2258 <hdc1080_write_reg+0xc4>)
    2224:	4798      	blx	r3
			error = STAT_ERR;
    2226:	2301      	movs	r3, #1
    2228:	617b      	str	r3, [r7, #20]
			break;
    222a:	e007      	b.n	223c <hdc1080_write_reg+0xa8>
	while (i2c_master_write_packet_wait(&i2c_hdc_instance, &wr_packet) !=
    222c:	4a08      	ldr	r2, [pc, #32]	; (2250 <hdc1080_write_reg+0xbc>)
    222e:	4b0b      	ldr	r3, [pc, #44]	; (225c <hdc1080_write_reg+0xc8>)
    2230:	0011      	movs	r1, r2
    2232:	0018      	movs	r0, r3
    2234:	4b0a      	ldr	r3, [pc, #40]	; (2260 <hdc1080_write_reg+0xcc>)
    2236:	4798      	blx	r3
    2238:	1e03      	subs	r3, r0, #0
    223a:	d1ea      	bne.n	2212 <hdc1080_write_reg+0x7e>
		}
	}
	if (error != STAT_OK)
    223c:	697b      	ldr	r3, [r7, #20]
    223e:	2b00      	cmp	r3, #0
    2240:	d001      	beq.n	2246 <hdc1080_write_reg+0xb2>
		return error;
    2242:	697b      	ldr	r3, [r7, #20]
    2244:	e000      	b.n	2248 <hdc1080_write_reg+0xb4>
  else 
	  return STAT_OK;  /* Success */
    2246:	2300      	movs	r3, #0
}
    2248:	0018      	movs	r0, r3
    224a:	46bd      	mov	sp, r7
    224c:	b006      	add	sp, #24
    224e:	bd80      	pop	{r7, pc}
    2250:	20000008 	.word	0x20000008
    2254:	0000e434 	.word	0x0000e434
    2258:	00009c59 	.word	0x00009c59
    225c:	200003d0 	.word	0x200003d0
    2260:	00003ce5 	.word	0x00003ce5

00002264 <hdc1080_measure>:
 * @temperature :  floating point temperature result, unit is ?C
 * @humidity    :  floating point humidity result, unit is RH%
 * Returns status.
 */
int hdc1080_measure(double *temperature, double *humidity)
{
    2264:	b590      	push	{r4, r7, lr}
    2266:	b089      	sub	sp, #36	; 0x24
    2268:	af00      	add	r7, sp, #0
    226a:	6078      	str	r0, [r7, #4]
    226c:	6039      	str	r1, [r7, #0]

	int error = STAT_OK;
    226e:	2300      	movs	r3, #0
    2270:	617b      	str	r3, [r7, #20]
	
	uint16_t r;
	double tmp;
	
	uint8_t temp_res = HDC1080_T_RES_14;
    2272:	2313      	movs	r3, #19
    2274:	18fb      	adds	r3, r7, r3
    2276:	2200      	movs	r2, #0
    2278:	701a      	strb	r2, [r3, #0]
	uint8_t humidres = HDC1080_RH_RES_14;
    227a:	2312      	movs	r3, #18
    227c:	18fb      	adds	r3, r7, r3
    227e:	2200      	movs	r2, #0
    2280:	701a      	strb	r2, [r3, #0]
	uint8_t heater = 0; //heater off
    2282:	2311      	movs	r3, #17
    2284:	18fb      	adds	r3, r7, r3
    2286:	2200      	movs	r2, #0
    2288:	701a      	strb	r2, [r3, #0]
	
	
	error = hdc1080_read_reg(10, HDC1080_CONFIG, &r);
    228a:	230e      	movs	r3, #14
    228c:	18fb      	adds	r3, r7, r3
    228e:	001a      	movs	r2, r3
    2290:	2102      	movs	r1, #2
    2292:	200a      	movs	r0, #10
    2294:	4b77      	ldr	r3, [pc, #476]	; (2474 <hdc1080_measure+0x210>)
    2296:	4798      	blx	r3
    2298:	0003      	movs	r3, r0
    229a:	617b      	str	r3, [r7, #20]
	if (error != STAT_OK) {
    229c:	697b      	ldr	r3, [r7, #20]
    229e:	2b00      	cmp	r3, #0
    22a0:	d005      	beq.n	22ae <hdc1080_measure+0x4a>
		printf("HDC Read Config Error\r\n");
    22a2:	4b75      	ldr	r3, [pc, #468]	; (2478 <hdc1080_measure+0x214>)
    22a4:	0018      	movs	r0, r3
    22a6:	4b75      	ldr	r3, [pc, #468]	; (247c <hdc1080_measure+0x218>)
    22a8:	4798      	blx	r3
		return error;
    22aa:	697b      	ldr	r3, [r7, #20]
    22ac:	e0de      	b.n	246c <hdc1080_measure+0x208>
	}

	r |= temp_res<<10;
    22ae:	2313      	movs	r3, #19
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	781b      	ldrb	r3, [r3, #0]
    22b4:	029b      	lsls	r3, r3, #10
    22b6:	b21a      	sxth	r2, r3
    22b8:	230e      	movs	r3, #14
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	881b      	ldrh	r3, [r3, #0]
    22be:	b21b      	sxth	r3, r3
    22c0:	4313      	orrs	r3, r2
    22c2:	b21b      	sxth	r3, r3
    22c4:	b29a      	uxth	r2, r3
    22c6:	230e      	movs	r3, #14
    22c8:	18fb      	adds	r3, r7, r3
    22ca:	801a      	strh	r2, [r3, #0]
	r |= humidres<<8;
    22cc:	2312      	movs	r3, #18
    22ce:	18fb      	adds	r3, r7, r3
    22d0:	781b      	ldrb	r3, [r3, #0]
    22d2:	021b      	lsls	r3, r3, #8
    22d4:	b21a      	sxth	r2, r3
    22d6:	230e      	movs	r3, #14
    22d8:	18fb      	adds	r3, r7, r3
    22da:	881b      	ldrh	r3, [r3, #0]
    22dc:	b21b      	sxth	r3, r3
    22de:	4313      	orrs	r3, r2
    22e0:	b21b      	sxth	r3, r3
    22e2:	b29a      	uxth	r2, r3
    22e4:	230e      	movs	r3, #14
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	801a      	strh	r2, [r3, #0]
	r |= 1<<12;     // mode = 1;
    22ea:	230e      	movs	r3, #14
    22ec:	18fb      	adds	r3, r7, r3
    22ee:	881b      	ldrh	r3, [r3, #0]
    22f0:	2280      	movs	r2, #128	; 0x80
    22f2:	0152      	lsls	r2, r2, #5
    22f4:	4313      	orrs	r3, r2
    22f6:	b29a      	uxth	r2, r3
    22f8:	230e      	movs	r3, #14
    22fa:	18fb      	adds	r3, r7, r3
    22fc:	801a      	strh	r2, [r3, #0]
	r |= heater<<13;
    22fe:	2311      	movs	r3, #17
    2300:	18fb      	adds	r3, r7, r3
    2302:	781b      	ldrb	r3, [r3, #0]
    2304:	035b      	lsls	r3, r3, #13
    2306:	b21a      	sxth	r2, r3
    2308:	230e      	movs	r3, #14
    230a:	18fb      	adds	r3, r7, r3
    230c:	881b      	ldrh	r3, [r3, #0]
    230e:	b21b      	sxth	r3, r3
    2310:	4313      	orrs	r3, r2
    2312:	b21b      	sxth	r3, r3
    2314:	b29a      	uxth	r2, r3
    2316:	230e      	movs	r3, #14
    2318:	18fb      	adds	r3, r7, r3
    231a:	801a      	strh	r2, [r3, #0]
	
	
	// write config
	error = hdc1080_write_reg(HDC1080_CONFIG, r);
    231c:	230e      	movs	r3, #14
    231e:	18fb      	adds	r3, r7, r3
    2320:	881b      	ldrh	r3, [r3, #0]
    2322:	0019      	movs	r1, r3
    2324:	2002      	movs	r0, #2
    2326:	4b56      	ldr	r3, [pc, #344]	; (2480 <hdc1080_measure+0x21c>)
    2328:	4798      	blx	r3
    232a:	0003      	movs	r3, r0
    232c:	617b      	str	r3, [r7, #20]
	if (error != STAT_OK) {
    232e:	697b      	ldr	r3, [r7, #20]
    2330:	2b00      	cmp	r3, #0
    2332:	d005      	beq.n	2340 <hdc1080_measure+0xdc>
		printf("HDC Write Config Error\r\n");
    2334:	4b53      	ldr	r3, [pc, #332]	; (2484 <hdc1080_measure+0x220>)
    2336:	0018      	movs	r0, r3
    2338:	4b50      	ldr	r3, [pc, #320]	; (247c <hdc1080_measure+0x218>)
    233a:	4798      	blx	r3
		return error;
    233c:	697b      	ldr	r3, [r7, #20]
    233e:	e095      	b.n	246c <hdc1080_measure+0x208>
	}
	

	error = hdc1080_read_reg(150, HDC1080_TEMPERATURE, &r);
    2340:	230e      	movs	r3, #14
    2342:	18fb      	adds	r3, r7, r3
    2344:	001a      	movs	r2, r3
    2346:	2100      	movs	r1, #0
    2348:	2096      	movs	r0, #150	; 0x96
    234a:	4b4a      	ldr	r3, [pc, #296]	; (2474 <hdc1080_measure+0x210>)
    234c:	4798      	blx	r3
    234e:	0003      	movs	r3, r0
    2350:	617b      	str	r3, [r7, #20]
	if (error != STAT_OK) {
    2352:	697b      	ldr	r3, [r7, #20]
    2354:	2b00      	cmp	r3, #0
    2356:	d005      	beq.n	2364 <hdc1080_measure+0x100>
		printf("HDC Read Temp Error\r\n");
    2358:	4b4b      	ldr	r3, [pc, #300]	; (2488 <hdc1080_measure+0x224>)
    235a:	0018      	movs	r0, r3
    235c:	4b47      	ldr	r3, [pc, #284]	; (247c <hdc1080_measure+0x218>)
    235e:	4798      	blx	r3
		return error;
    2360:	697b      	ldr	r3, [r7, #20]
    2362:	e083      	b.n	246c <hdc1080_measure+0x208>
	}
	tmp = (double)r;
    2364:	230e      	movs	r3, #14
    2366:	18fb      	adds	r3, r7, r3
    2368:	881a      	ldrh	r2, [r3, #0]
    236a:	4b48      	ldr	r3, [pc, #288]	; (248c <hdc1080_measure+0x228>)
    236c:	0010      	movs	r0, r2
    236e:	4798      	blx	r3
    2370:	0003      	movs	r3, r0
    2372:	000c      	movs	r4, r1
    2374:	61bb      	str	r3, [r7, #24]
    2376:	61fc      	str	r4, [r7, #28]
	tmp = (tmp / 65536.0f) * 165.0f - 40.0f;
    2378:	4c45      	ldr	r4, [pc, #276]	; (2490 <hdc1080_measure+0x22c>)
    237a:	2200      	movs	r2, #0
    237c:	4b45      	ldr	r3, [pc, #276]	; (2494 <hdc1080_measure+0x230>)
    237e:	69b8      	ldr	r0, [r7, #24]
    2380:	69f9      	ldr	r1, [r7, #28]
    2382:	47a0      	blx	r4
    2384:	0003      	movs	r3, r0
    2386:	000c      	movs	r4, r1
    2388:	0018      	movs	r0, r3
    238a:	0021      	movs	r1, r4
    238c:	4c42      	ldr	r4, [pc, #264]	; (2498 <hdc1080_measure+0x234>)
    238e:	2200      	movs	r2, #0
    2390:	4b42      	ldr	r3, [pc, #264]	; (249c <hdc1080_measure+0x238>)
    2392:	47a0      	blx	r4
    2394:	0003      	movs	r3, r0
    2396:	000c      	movs	r4, r1
    2398:	0018      	movs	r0, r3
    239a:	0021      	movs	r1, r4
    239c:	4c40      	ldr	r4, [pc, #256]	; (24a0 <hdc1080_measure+0x23c>)
    239e:	2200      	movs	r2, #0
    23a0:	4b40      	ldr	r3, [pc, #256]	; (24a4 <hdc1080_measure+0x240>)
    23a2:	47a0      	blx	r4
    23a4:	0003      	movs	r3, r0
    23a6:	000c      	movs	r4, r1
    23a8:	61bb      	str	r3, [r7, #24]
    23aa:	61fc      	str	r4, [r7, #28]
	*temperature = tmp;  // C
    23ac:	687a      	ldr	r2, [r7, #4]
    23ae:	69bb      	ldr	r3, [r7, #24]
    23b0:	69fc      	ldr	r4, [r7, #28]
    23b2:	6013      	str	r3, [r2, #0]
    23b4:	6054      	str	r4, [r2, #4]
	
	error = hdc1080_read_reg(150, HDC1080_HUMIDITY, &r);
    23b6:	230e      	movs	r3, #14
    23b8:	18fb      	adds	r3, r7, r3
    23ba:	001a      	movs	r2, r3
    23bc:	2101      	movs	r1, #1
    23be:	2096      	movs	r0, #150	; 0x96
    23c0:	4b2c      	ldr	r3, [pc, #176]	; (2474 <hdc1080_measure+0x210>)
    23c2:	4798      	blx	r3
    23c4:	0003      	movs	r3, r0
    23c6:	617b      	str	r3, [r7, #20]
	tmp = (int32_t)r;
    23c8:	230e      	movs	r3, #14
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	881b      	ldrh	r3, [r3, #0]
    23ce:	001a      	movs	r2, r3
    23d0:	4b35      	ldr	r3, [pc, #212]	; (24a8 <hdc1080_measure+0x244>)
    23d2:	0010      	movs	r0, r2
    23d4:	4798      	blx	r3
    23d6:	0003      	movs	r3, r0
    23d8:	000c      	movs	r4, r1
    23da:	61bb      	str	r3, [r7, #24]
    23dc:	61fc      	str	r4, [r7, #28]
	
	if (error != STAT_OK){
    23de:	697b      	ldr	r3, [r7, #20]
    23e0:	2b00      	cmp	r3, #0
    23e2:	d005      	beq.n	23f0 <hdc1080_measure+0x18c>
		printf("HDC Read Humidity Error\r\n");
    23e4:	4b31      	ldr	r3, [pc, #196]	; (24ac <hdc1080_measure+0x248>)
    23e6:	0018      	movs	r0, r3
    23e8:	4b24      	ldr	r3, [pc, #144]	; (247c <hdc1080_measure+0x218>)
    23ea:	4798      	blx	r3
		 return error;
    23ec:	697b      	ldr	r3, [r7, #20]
    23ee:	e03d      	b.n	246c <hdc1080_measure+0x208>
	}
	tmp = (float)r;
    23f0:	230e      	movs	r3, #14
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	881a      	ldrh	r2, [r3, #0]
    23f6:	4b2e      	ldr	r3, [pc, #184]	; (24b0 <hdc1080_measure+0x24c>)
    23f8:	0010      	movs	r0, r2
    23fa:	4798      	blx	r3
    23fc:	1c02      	adds	r2, r0, #0
    23fe:	4b2d      	ldr	r3, [pc, #180]	; (24b4 <hdc1080_measure+0x250>)
    2400:	1c10      	adds	r0, r2, #0
    2402:	4798      	blx	r3
    2404:	0003      	movs	r3, r0
    2406:	000c      	movs	r4, r1
    2408:	61bb      	str	r3, [r7, #24]
    240a:	61fc      	str	r4, [r7, #28]
	tmp = (tmp / 65536.0f) * 100.0f;
    240c:	4c20      	ldr	r4, [pc, #128]	; (2490 <hdc1080_measure+0x22c>)
    240e:	2200      	movs	r2, #0
    2410:	4b20      	ldr	r3, [pc, #128]	; (2494 <hdc1080_measure+0x230>)
    2412:	69b8      	ldr	r0, [r7, #24]
    2414:	69f9      	ldr	r1, [r7, #28]
    2416:	47a0      	blx	r4
    2418:	0003      	movs	r3, r0
    241a:	000c      	movs	r4, r1
    241c:	0018      	movs	r0, r3
    241e:	0021      	movs	r1, r4
    2420:	4c1d      	ldr	r4, [pc, #116]	; (2498 <hdc1080_measure+0x234>)
    2422:	2200      	movs	r2, #0
    2424:	4b24      	ldr	r3, [pc, #144]	; (24b8 <hdc1080_measure+0x254>)
    2426:	47a0      	blx	r4
    2428:	0003      	movs	r3, r0
    242a:	000c      	movs	r4, r1
    242c:	61bb      	str	r3, [r7, #24]
    242e:	61fc      	str	r4, [r7, #28]
	if (tmp>100.0) tmp = 100.0f;
    2430:	4c22      	ldr	r4, [pc, #136]	; (24bc <hdc1080_measure+0x258>)
    2432:	2200      	movs	r2, #0
    2434:	4b20      	ldr	r3, [pc, #128]	; (24b8 <hdc1080_measure+0x254>)
    2436:	69b8      	ldr	r0, [r7, #24]
    2438:	69f9      	ldr	r1, [r7, #28]
    243a:	47a0      	blx	r4
    243c:	1e03      	subs	r3, r0, #0
    243e:	d003      	beq.n	2448 <hdc1080_measure+0x1e4>
    2440:	2300      	movs	r3, #0
    2442:	4c1d      	ldr	r4, [pc, #116]	; (24b8 <hdc1080_measure+0x254>)
    2444:	61bb      	str	r3, [r7, #24]
    2446:	61fc      	str	r4, [r7, #28]
	if (tmp<0) tmp = 0.0f;
    2448:	4c1d      	ldr	r4, [pc, #116]	; (24c0 <hdc1080_measure+0x25c>)
    244a:	2200      	movs	r2, #0
    244c:	2300      	movs	r3, #0
    244e:	69b8      	ldr	r0, [r7, #24]
    2450:	69f9      	ldr	r1, [r7, #28]
    2452:	47a0      	blx	r4
    2454:	1e03      	subs	r3, r0, #0
    2456:	d003      	beq.n	2460 <hdc1080_measure+0x1fc>
    2458:	2300      	movs	r3, #0
    245a:	2400      	movs	r4, #0
    245c:	61bb      	str	r3, [r7, #24]
    245e:	61fc      	str	r4, [r7, #28]
	*humidity = tmp;
    2460:	683a      	ldr	r2, [r7, #0]
    2462:	69bb      	ldr	r3, [r7, #24]
    2464:	69fc      	ldr	r4, [r7, #28]
    2466:	6013      	str	r3, [r2, #0]
    2468:	6054      	str	r4, [r2, #4]
	
	return STAT_OK;
    246a:	2300      	movs	r3, #0
}
    246c:	0018      	movs	r0, r3
    246e:	46bd      	mov	sp, r7
    2470:	b009      	add	sp, #36	; 0x24
    2472:	bd90      	pop	{r4, r7, pc}
    2474:	00002029 	.word	0x00002029
    2478:	0000e45c 	.word	0x0000e45c
    247c:	00009c59 	.word	0x00009c59
    2480:	00002195 	.word	0x00002195
    2484:	0000e474 	.word	0x0000e474
    2488:	0000e48c 	.word	0x0000e48c
    248c:	0000e151 	.word	0x0000e151
    2490:	0000cc91 	.word	0x0000cc91
    2494:	40f00000 	.word	0x40f00000
    2498:	0000d4f9 	.word	0x0000d4f9
    249c:	4064a000 	.word	0x4064a000
    24a0:	0000d9f9 	.word	0x0000d9f9
    24a4:	40440000 	.word	0x40440000
    24a8:	0000e0cd 	.word	0x0000e0cd
    24ac:	0000e4a4 	.word	0x0000e4a4
    24b0:	0000c5e5 	.word	0x0000c5e5
    24b4:	0000e1c1 	.word	0x0000e1c1
    24b8:	40590000 	.word	0x40590000
    24bc:	0000bff9 	.word	0x0000bff9
    24c0:	0000bfd1 	.word	0x0000bfd1

000024c4 <write8>:

int is_init = false;


void write8(uint8_t reg, uint8_t value)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b086      	sub	sp, #24
    24c8:	af00      	add	r7, sp, #0
    24ca:	0002      	movs	r2, r0
    24cc:	1dfb      	adds	r3, r7, #7
    24ce:	701a      	strb	r2, [r3, #0]
    24d0:	1dbb      	adds	r3, r7, #6
    24d2:	1c0a      	adds	r2, r1, #0
    24d4:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    24d6:	4b19      	ldr	r3, [pc, #100]	; (253c <write8+0x78>)
    24d8:	681b      	ldr	r3, [r3, #0]
    24da:	2b00      	cmp	r3, #0
    24dc:	d029      	beq.n	2532 <write8+0x6e>
		uint8_t write_buffer[2] = {reg, value};
    24de:	230c      	movs	r3, #12
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	1dfa      	adds	r2, r7, #7
    24e4:	7812      	ldrb	r2, [r2, #0]
    24e6:	701a      	strb	r2, [r3, #0]
    24e8:	230c      	movs	r3, #12
    24ea:	18fb      	adds	r3, r7, r3
    24ec:	1dba      	adds	r2, r7, #6
    24ee:	7812      	ldrb	r2, [r2, #0]
    24f0:	705a      	strb	r2, [r3, #1]
		wr_packet.address = TSL2561_ADDR_FLOAT;
    24f2:	4b13      	ldr	r3, [pc, #76]	; (2540 <write8+0x7c>)
    24f4:	2239      	movs	r2, #57	; 0x39
    24f6:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 2;
    24f8:	4b11      	ldr	r3, [pc, #68]	; (2540 <write8+0x7c>)
    24fa:	2202      	movs	r2, #2
    24fc:	805a      	strh	r2, [r3, #2]
		wr_packet.data = write_buffer;
    24fe:	4b10      	ldr	r3, [pc, #64]	; (2540 <write8+0x7c>)
    2500:	220c      	movs	r2, #12
    2502:	18ba      	adds	r2, r7, r2
    2504:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    2506:	2300      	movs	r3, #0
    2508:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    250a:	23fa      	movs	r3, #250	; 0xfa
    250c:	009b      	lsls	r3, r3, #2
    250e:	613b      	str	r3, [r7, #16]
		
		while (i2c_master_write_packet_wait(&i2c_tsl_instance, &wr_packet) !=
    2510:	e005      	b.n	251e <write8+0x5a>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    2512:	697b      	ldr	r3, [r7, #20]
    2514:	1c5a      	adds	r2, r3, #1
    2516:	617a      	str	r2, [r7, #20]
    2518:	693a      	ldr	r2, [r7, #16]
    251a:	4293      	cmp	r3, r2
    251c:	d008      	beq.n	2530 <write8+0x6c>
		while (i2c_master_write_packet_wait(&i2c_tsl_instance, &wr_packet) !=
    251e:	4a08      	ldr	r2, [pc, #32]	; (2540 <write8+0x7c>)
    2520:	4b08      	ldr	r3, [pc, #32]	; (2544 <write8+0x80>)
    2522:	0011      	movs	r1, r2
    2524:	0018      	movs	r0, r3
    2526:	4b08      	ldr	r3, [pc, #32]	; (2548 <write8+0x84>)
    2528:	4798      	blx	r3
    252a:	1e03      	subs	r3, r0, #0
    252c:	d1f1      	bne.n	2512 <write8+0x4e>
				break;
			}
		}
		
	}
}
    252e:	e000      	b.n	2532 <write8+0x6e>
				break;
    2530:	46c0      	nop			; (mov r8, r8)
}
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	46bd      	mov	sp, r7
    2536:	b006      	add	sp, #24
    2538:	bd80      	pop	{r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	20000274 	.word	0x20000274
    2540:	20000028 	.word	0x20000028
    2544:	2000035c 	.word	0x2000035c
    2548:	00003ce5 	.word	0x00003ce5

0000254c <enable>:

void enable(void)
{
    254c:	b580      	push	{r7, lr}
    254e:	af00      	add	r7, sp, #0
	/* Enable the device by setting the control bit to 0x03 */
	write8((TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL), TSL2561_CONTROL_POWERON);
    2550:	2103      	movs	r1, #3
    2552:	2080      	movs	r0, #128	; 0x80
    2554:	4b02      	ldr	r3, [pc, #8]	; (2560 <enable+0x14>)
    2556:	4798      	blx	r3
}
    2558:	46c0      	nop			; (mov r8, r8)
    255a:	46bd      	mov	sp, r7
    255c:	bd80      	pop	{r7, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	000024c5 	.word	0x000024c5

00002564 <disable>:

void disable(void)
{
    2564:	b580      	push	{r7, lr}
    2566:	af00      	add	r7, sp, #0
	/* Turn the device off to save power */
	write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL, TSL2561_CONTROL_POWEROFF);
    2568:	2100      	movs	r1, #0
    256a:	2080      	movs	r0, #128	; 0x80
    256c:	4b02      	ldr	r3, [pc, #8]	; (2578 <disable+0x14>)
    256e:	4798      	blx	r3
}
    2570:	46c0      	nop			; (mov r8, r8)
    2572:	46bd      	mov	sp, r7
    2574:	bd80      	pop	{r7, pc}
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	000024c5 	.word	0x000024c5

0000257c <read8_reg>:

uint8_t read8_reg(uint8_t reg) {
    257c:	b580      	push	{r7, lr}
    257e:	b086      	sub	sp, #24
    2580:	af00      	add	r7, sp, #0
    2582:	0002      	movs	r2, r0
    2584:	1dfb      	adds	r3, r7, #7
    2586:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    2588:	4b1a      	ldr	r3, [pc, #104]	; (25f4 <read8_reg+0x78>)
    258a:	681b      	ldr	r3, [r3, #0]
    258c:	2b00      	cmp	r3, #0
    258e:	d02c      	beq.n	25ea <read8_reg+0x6e>
		enable();
    2590:	4b19      	ldr	r3, [pc, #100]	; (25f8 <read8_reg+0x7c>)
    2592:	4798      	blx	r3
		uint8_t read_buffer[2];
		read_buffer[0] = reg;
    2594:	230c      	movs	r3, #12
    2596:	18fb      	adds	r3, r7, r3
    2598:	1dfa      	adds	r2, r7, #7
    259a:	7812      	ldrb	r2, [r2, #0]
    259c:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
    259e:	4b17      	ldr	r3, [pc, #92]	; (25fc <read8_reg+0x80>)
    25a0:	2239      	movs	r2, #57	; 0x39
    25a2:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 2;
    25a4:	4b15      	ldr	r3, [pc, #84]	; (25fc <read8_reg+0x80>)
    25a6:	2202      	movs	r2, #2
    25a8:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
    25aa:	4b14      	ldr	r3, [pc, #80]	; (25fc <read8_reg+0x80>)
    25ac:	220c      	movs	r2, #12
    25ae:	18ba      	adds	r2, r7, r2
    25b0:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    25b2:	2300      	movs	r3, #0
    25b4:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    25b6:	23fa      	movs	r3, #250	; 0xfa
    25b8:	009b      	lsls	r3, r3, #2
    25ba:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    25bc:	e005      	b.n	25ca <read8_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    25be:	697b      	ldr	r3, [r7, #20]
    25c0:	1c5a      	adds	r2, r3, #1
    25c2:	617a      	str	r2, [r7, #20]
    25c4:	693a      	ldr	r2, [r7, #16]
    25c6:	4293      	cmp	r3, r2
    25c8:	d008      	beq.n	25dc <read8_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    25ca:	4a0c      	ldr	r2, [pc, #48]	; (25fc <read8_reg+0x80>)
    25cc:	4b0c      	ldr	r3, [pc, #48]	; (2600 <read8_reg+0x84>)
    25ce:	0011      	movs	r1, r2
    25d0:	0018      	movs	r0, r3
    25d2:	4b0c      	ldr	r3, [pc, #48]	; (2604 <read8_reg+0x88>)
    25d4:	4798      	blx	r3
    25d6:	1e03      	subs	r3, r0, #0
    25d8:	d1f1      	bne.n	25be <read8_reg+0x42>
    25da:	e000      	b.n	25de <read8_reg+0x62>
				break;
    25dc:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		disable();
    25de:	4b0a      	ldr	r3, [pc, #40]	; (2608 <read8_reg+0x8c>)
    25e0:	4798      	blx	r3
		return read_buffer[1];
    25e2:	230c      	movs	r3, #12
    25e4:	18fb      	adds	r3, r7, r3
    25e6:	785b      	ldrb	r3, [r3, #1]
    25e8:	e000      	b.n	25ec <read8_reg+0x70>
	}
	return 0;
    25ea:	2300      	movs	r3, #0
}
    25ec:	0018      	movs	r0, r3
    25ee:	46bd      	mov	sp, r7
    25f0:	b006      	add	sp, #24
    25f2:	bd80      	pop	{r7, pc}
    25f4:	20000274 	.word	0x20000274
    25f8:	0000254d 	.word	0x0000254d
    25fc:	20000034 	.word	0x20000034
    2600:	2000035c 	.word	0x2000035c
    2604:	00003b2d 	.word	0x00003b2d
    2608:	00002565 	.word	0x00002565

0000260c <read16_reg>:

uint16_t read16_reg(uint8_t reg) {
    260c:	b580      	push	{r7, lr}
    260e:	b086      	sub	sp, #24
    2610:	af00      	add	r7, sp, #0
    2612:	0002      	movs	r2, r0
    2614:	1dfb      	adds	r3, r7, #7
    2616:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    2618:	4b28      	ldr	r3, [pc, #160]	; (26bc <read16_reg+0xb0>)
    261a:	681b      	ldr	r3, [r3, #0]
    261c:	2b00      	cmp	r3, #0
    261e:	d047      	beq.n	26b0 <read16_reg+0xa4>
		enable();
    2620:	4b27      	ldr	r3, [pc, #156]	; (26c0 <read16_reg+0xb4>)
    2622:	4798      	blx	r3
		uint8_t read_buffer[3];
		read_buffer[0] = reg;
    2624:	2308      	movs	r3, #8
    2626:	18fb      	adds	r3, r7, r3
    2628:	1dfa      	adds	r2, r7, #7
    262a:	7812      	ldrb	r2, [r2, #0]
    262c:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
    262e:	4b25      	ldr	r3, [pc, #148]	; (26c4 <read16_reg+0xb8>)
    2630:	2239      	movs	r2, #57	; 0x39
    2632:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 3;
    2634:	4b23      	ldr	r3, [pc, #140]	; (26c4 <read16_reg+0xb8>)
    2636:	2203      	movs	r2, #3
    2638:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
    263a:	4b22      	ldr	r3, [pc, #136]	; (26c4 <read16_reg+0xb8>)
    263c:	2208      	movs	r2, #8
    263e:	18ba      	adds	r2, r7, r2
    2640:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    2642:	2300      	movs	r3, #0
    2644:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    2646:	23fa      	movs	r3, #250	; 0xfa
    2648:	009b      	lsls	r3, r3, #2
    264a:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    264c:	e005      	b.n	265a <read16_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    264e:	697b      	ldr	r3, [r7, #20]
    2650:	1c5a      	adds	r2, r3, #1
    2652:	617a      	str	r2, [r7, #20]
    2654:	693a      	ldr	r2, [r7, #16]
    2656:	4293      	cmp	r3, r2
    2658:	d008      	beq.n	266c <read16_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    265a:	4a1a      	ldr	r2, [pc, #104]	; (26c4 <read16_reg+0xb8>)
    265c:	4b1a      	ldr	r3, [pc, #104]	; (26c8 <read16_reg+0xbc>)
    265e:	0011      	movs	r1, r2
    2660:	0018      	movs	r0, r3
    2662:	4b1a      	ldr	r3, [pc, #104]	; (26cc <read16_reg+0xc0>)
    2664:	4798      	blx	r3
    2666:	1e03      	subs	r3, r0, #0
    2668:	d1f1      	bne.n	264e <read16_reg+0x42>
    266a:	e000      	b.n	266e <read16_reg+0x62>
				break;
    266c:	46c0      	nop			; (mov r8, r8)
			}
		}
		uint8_t t = read_buffer[1];
    266e:	230f      	movs	r3, #15
    2670:	18fb      	adds	r3, r7, r3
    2672:	2208      	movs	r2, #8
    2674:	18ba      	adds	r2, r7, r2
    2676:	7852      	ldrb	r2, [r2, #1]
    2678:	701a      	strb	r2, [r3, #0]
		uint8_t x = read_buffer[2];
    267a:	230e      	movs	r3, #14
    267c:	18fb      	adds	r3, r7, r3
    267e:	2208      	movs	r2, #8
    2680:	18ba      	adds	r2, r7, r2
    2682:	7892      	ldrb	r2, [r2, #2]
    2684:	701a      	strb	r2, [r3, #0]
		x <<= 8;
    2686:	230e      	movs	r3, #14
    2688:	18fb      	adds	r3, r7, r3
    268a:	2200      	movs	r2, #0
    268c:	701a      	strb	r2, [r3, #0]
		x |= t;
    268e:	230e      	movs	r3, #14
    2690:	18fb      	adds	r3, r7, r3
    2692:	220e      	movs	r2, #14
    2694:	18b9      	adds	r1, r7, r2
    2696:	220f      	movs	r2, #15
    2698:	18ba      	adds	r2, r7, r2
    269a:	7809      	ldrb	r1, [r1, #0]
    269c:	7812      	ldrb	r2, [r2, #0]
    269e:	430a      	orrs	r2, r1
    26a0:	701a      	strb	r2, [r3, #0]
		disable();
    26a2:	4b0b      	ldr	r3, [pc, #44]	; (26d0 <read16_reg+0xc4>)
    26a4:	4798      	blx	r3
		return x;
    26a6:	230e      	movs	r3, #14
    26a8:	18fb      	adds	r3, r7, r3
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	b29b      	uxth	r3, r3
    26ae:	e000      	b.n	26b2 <read16_reg+0xa6>
	}
	return 0;
    26b0:	2300      	movs	r3, #0
}
    26b2:	0018      	movs	r0, r3
    26b4:	46bd      	mov	sp, r7
    26b6:	b006      	add	sp, #24
    26b8:	bd80      	pop	{r7, pc}
    26ba:	46c0      	nop			; (mov r8, r8)
    26bc:	20000274 	.word	0x20000274
    26c0:	0000254d 	.word	0x0000254d
    26c4:	20000034 	.word	0x20000034
    26c8:	2000035c 	.word	0x2000035c
    26cc:	00003b2d 	.word	0x00003b2d
    26d0:	00002565 	.word	0x00002565

000026d4 <tsl2561_init>:

int tsl2561_init() {
    26d4:	b590      	push	{r4, r7, lr}
    26d6:	b083      	sub	sp, #12
    26d8:	af00      	add	r7, sp, #0
	if(is_init) {
    26da:	4b0d      	ldr	r3, [pc, #52]	; (2710 <tsl2561_init+0x3c>)
    26dc:	681b      	ldr	r3, [r3, #0]
    26de:	2b00      	cmp	r3, #0
    26e0:	d001      	beq.n	26e6 <tsl2561_init+0x12>
		return 1;
    26e2:	2301      	movs	r3, #1
    26e4:	e010      	b.n	2708 <tsl2561_init+0x34>
	}
	is_init = true;
    26e6:	4b0a      	ldr	r3, [pc, #40]	; (2710 <tsl2561_init+0x3c>)
    26e8:	2201      	movs	r2, #1
    26ea:	601a      	str	r2, [r3, #0]
	  uint8_t x = read8_reg(TSL2561_REGISTER_ID);
    26ec:	1dfc      	adds	r4, r7, #7
    26ee:	200a      	movs	r0, #10
    26f0:	4b08      	ldr	r3, [pc, #32]	; (2714 <tsl2561_init+0x40>)
    26f2:	4798      	blx	r3
    26f4:	0003      	movs	r3, r0
    26f6:	7023      	strb	r3, [r4, #0]
	  if (x & 0xF0 != 0x10) { // ID code for TSL2561
    26f8:	1dfb      	adds	r3, r7, #7
    26fa:	781b      	ldrb	r3, [r3, #0]
    26fc:	2201      	movs	r2, #1
    26fe:	4013      	ands	r3, r2
    2700:	d001      	beq.n	2706 <tsl2561_init+0x32>
		  return 0;
    2702:	2300      	movs	r3, #0
    2704:	e000      	b.n	2708 <tsl2561_init+0x34>
	  }
	  return 1;
    2706:	2301      	movs	r3, #1
	
}
    2708:	0018      	movs	r0, r3
    270a:	46bd      	mov	sp, r7
    270c:	b003      	add	sp, #12
    270e:	bd90      	pop	{r4, r7, pc}
    2710:	20000274 	.word	0x20000274
    2714:	0000257d 	.word	0x0000257d

00002718 <calculateLux>:

int calculateLux(uint16_t broadband, uint16_t ir) {
    2718:	b580      	push	{r7, lr}
    271a:	b08c      	sub	sp, #48	; 0x30
    271c:	af00      	add	r7, sp, #0
    271e:	0002      	movs	r2, r0
    2720:	1dbb      	adds	r3, r7, #6
    2722:	801a      	strh	r2, [r3, #0]
    2724:	1d3b      	adds	r3, r7, #4
    2726:	1c0a      	adds	r2, r1, #0
    2728:	801a      	strh	r2, [r3, #0]

	/* Make sure the sensor isn't saturated! */
	uint16_t clipThreshold;

	/* Return 65536 lux if the sensor is saturated */
	if ((broadband > clipThreshold) || (ir > clipThreshold))
    272a:	1dba      	adds	r2, r7, #6
    272c:	2322      	movs	r3, #34	; 0x22
    272e:	18fb      	adds	r3, r7, r3
    2730:	8812      	ldrh	r2, [r2, #0]
    2732:	881b      	ldrh	r3, [r3, #0]
    2734:	429a      	cmp	r2, r3
    2736:	d806      	bhi.n	2746 <calculateLux+0x2e>
    2738:	1d3a      	adds	r2, r7, #4
    273a:	2322      	movs	r3, #34	; 0x22
    273c:	18fb      	adds	r3, r7, r3
    273e:	8812      	ldrh	r2, [r2, #0]
    2740:	881b      	ldrh	r3, [r3, #0]
    2742:	429a      	cmp	r2, r3
    2744:	d902      	bls.n	274c <calculateLux+0x34>
	{
		return 65536;
    2746:	2380      	movs	r3, #128	; 0x80
    2748:	025b      	lsls	r3, r3, #9
    274a:	e07b      	b.n	2844 <calculateLux+0x12c>
	}

	/* Scale the channel values */
	channel0 = (broadband * chScale) >> TSL2561_LUX_CHSCALE;
    274c:	1dbb      	adds	r3, r7, #6
    274e:	881b      	ldrh	r3, [r3, #0]
    2750:	69fa      	ldr	r2, [r7, #28]
    2752:	4353      	muls	r3, r2
    2754:	0a9b      	lsrs	r3, r3, #10
    2756:	61bb      	str	r3, [r7, #24]
	channel1 = (ir * chScale) >> TSL2561_LUX_CHSCALE;
    2758:	1d3b      	adds	r3, r7, #4
    275a:	881b      	ldrh	r3, [r3, #0]
    275c:	69fa      	ldr	r2, [r7, #28]
    275e:	4353      	muls	r3, r2
    2760:	0a9b      	lsrs	r3, r3, #10
    2762:	617b      	str	r3, [r7, #20]

	/* Find the ratio of the channel values (Channel1/Channel0) */
	unsigned long ratio1 = 0;
    2764:	2300      	movs	r3, #0
    2766:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (channel0 != 0) ratio1 = (channel1 << (TSL2561_LUX_RATIOSCALE+1)) / channel0;
    2768:	69bb      	ldr	r3, [r7, #24]
    276a:	2b00      	cmp	r3, #0
    276c:	d007      	beq.n	277e <calculateLux+0x66>
    276e:	697b      	ldr	r3, [r7, #20]
    2770:	029a      	lsls	r2, r3, #10
    2772:	4b36      	ldr	r3, [pc, #216]	; (284c <calculateLux+0x134>)
    2774:	69b9      	ldr	r1, [r7, #24]
    2776:	0010      	movs	r0, r2
    2778:	4798      	blx	r3
    277a:	0003      	movs	r3, r0
    277c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* round the ratio value */
	unsigned long ratio = (ratio1 + 1) >> 1;
    277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2780:	3301      	adds	r3, #1
    2782:	085b      	lsrs	r3, r3, #1
    2784:	613b      	str	r3, [r7, #16]
	else if (ratio <= TSL2561_LUX_K7C)
	{b=TSL2561_LUX_B7C; m=TSL2561_LUX_M7C;}
	else if (ratio > TSL2561_LUX_K8C)
	{b=TSL2561_LUX_B8C; m=TSL2561_LUX_M8C;}
	#else
	if ((ratio >= 0) && (ratio <= TSL2561_LUX_K1T))
    2786:	693b      	ldr	r3, [r7, #16]
    2788:	2b40      	cmp	r3, #64	; 0x40
    278a:	d806      	bhi.n	279a <calculateLux+0x82>
	{b=TSL2561_LUX_B1T; m=TSL2561_LUX_M1T;}
    278c:	23f9      	movs	r3, #249	; 0xf9
    278e:	005b      	lsls	r3, r3, #1
    2790:	62bb      	str	r3, [r7, #40]	; 0x28
    2792:	23df      	movs	r3, #223	; 0xdf
    2794:	005b      	lsls	r3, r3, #1
    2796:	627b      	str	r3, [r7, #36]	; 0x24
    2798:	e042      	b.n	2820 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K2T)
    279a:	693b      	ldr	r3, [r7, #16]
    279c:	2b80      	cmp	r3, #128	; 0x80
    279e:	d805      	bhi.n	27ac <calculateLux+0x94>
	{b=TSL2561_LUX_B2T; m=TSL2561_LUX_M2T;}
    27a0:	2385      	movs	r3, #133	; 0x85
    27a2:	009b      	lsls	r3, r3, #2
    27a4:	62bb      	str	r3, [r7, #40]	; 0x28
    27a6:	4b2a      	ldr	r3, [pc, #168]	; (2850 <calculateLux+0x138>)
    27a8:	627b      	str	r3, [r7, #36]	; 0x24
    27aa:	e039      	b.n	2820 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K3T)
    27ac:	693b      	ldr	r3, [r7, #16]
    27ae:	2bc0      	cmp	r3, #192	; 0xc0
    27b0:	d804      	bhi.n	27bc <calculateLux+0xa4>
	{b=TSL2561_LUX_B3T; m=TSL2561_LUX_M3T;}
    27b2:	4b28      	ldr	r3, [pc, #160]	; (2854 <calculateLux+0x13c>)
    27b4:	62bb      	str	r3, [r7, #40]	; 0x28
    27b6:	4b28      	ldr	r3, [pc, #160]	; (2858 <calculateLux+0x140>)
    27b8:	627b      	str	r3, [r7, #36]	; 0x24
    27ba:	e031      	b.n	2820 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K4T)
    27bc:	693a      	ldr	r2, [r7, #16]
    27be:	2380      	movs	r3, #128	; 0x80
    27c0:	005b      	lsls	r3, r3, #1
    27c2:	429a      	cmp	r2, r3
    27c4:	d805      	bhi.n	27d2 <calculateLux+0xba>
	{b=TSL2561_LUX_B4T; m=TSL2561_LUX_M4T;}
    27c6:	239c      	movs	r3, #156	; 0x9c
    27c8:	009b      	lsls	r3, r3, #2
    27ca:	62bb      	str	r3, [r7, #40]	; 0x28
    27cc:	4b23      	ldr	r3, [pc, #140]	; (285c <calculateLux+0x144>)
    27ce:	627b      	str	r3, [r7, #36]	; 0x24
    27d0:	e026      	b.n	2820 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K5T)
    27d2:	693a      	ldr	r2, [r7, #16]
    27d4:	239c      	movs	r3, #156	; 0x9c
    27d6:	005b      	lsls	r3, r3, #1
    27d8:	429a      	cmp	r2, r3
    27da:	d806      	bhi.n	27ea <calculateLux+0xd2>
	{b=TSL2561_LUX_B5T; m=TSL2561_LUX_M5T;}
    27dc:	2370      	movs	r3, #112	; 0x70
    27de:	33ff      	adds	r3, #255	; 0xff
    27e0:	62bb      	str	r3, [r7, #40]	; 0x28
    27e2:	23fe      	movs	r3, #254	; 0xfe
    27e4:	005b      	lsls	r3, r3, #1
    27e6:	627b      	str	r3, [r7, #36]	; 0x24
    27e8:	e01a      	b.n	2820 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K6T)
    27ea:	693a      	ldr	r2, [r7, #16]
    27ec:	23cd      	movs	r3, #205	; 0xcd
    27ee:	005b      	lsls	r3, r3, #1
    27f0:	429a      	cmp	r2, r3
    27f2:	d804      	bhi.n	27fe <calculateLux+0xe6>
	{b=TSL2561_LUX_B6T; m=TSL2561_LUX_M6T;}
    27f4:	23d2      	movs	r3, #210	; 0xd2
    27f6:	62bb      	str	r3, [r7, #40]	; 0x28
    27f8:	23fb      	movs	r3, #251	; 0xfb
    27fa:	627b      	str	r3, [r7, #36]	; 0x24
    27fc:	e010      	b.n	2820 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K7T)
    27fe:	693b      	ldr	r3, [r7, #16]
    2800:	4a17      	ldr	r2, [pc, #92]	; (2860 <calculateLux+0x148>)
    2802:	4293      	cmp	r3, r2
    2804:	d804      	bhi.n	2810 <calculateLux+0xf8>
	{b=TSL2561_LUX_B7T; m=TSL2561_LUX_M7T;}
    2806:	2318      	movs	r3, #24
    2808:	62bb      	str	r3, [r7, #40]	; 0x28
    280a:	2312      	movs	r3, #18
    280c:	627b      	str	r3, [r7, #36]	; 0x24
    280e:	e007      	b.n	2820 <calculateLux+0x108>
	else if (ratio > TSL2561_LUX_K8T)
    2810:	693b      	ldr	r3, [r7, #16]
    2812:	4a13      	ldr	r2, [pc, #76]	; (2860 <calculateLux+0x148>)
    2814:	4293      	cmp	r3, r2
    2816:	d903      	bls.n	2820 <calculateLux+0x108>
	{b=TSL2561_LUX_B8T; m=TSL2561_LUX_M8T;}
    2818:	2300      	movs	r3, #0
    281a:	62bb      	str	r3, [r7, #40]	; 0x28
    281c:	2300      	movs	r3, #0
    281e:	627b      	str	r3, [r7, #36]	; 0x24
	#endif

	unsigned long temp;
	temp = ((channel0 * b) - (channel1 * m));
    2820:	69bb      	ldr	r3, [r7, #24]
    2822:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2824:	435a      	muls	r2, r3
    2826:	697b      	ldr	r3, [r7, #20]
    2828:	6a79      	ldr	r1, [r7, #36]	; 0x24
    282a:	434b      	muls	r3, r1
    282c:	1ad3      	subs	r3, r2, r3
    282e:	60fb      	str	r3, [r7, #12]

	/* Do not allow negative lux value */
	if (temp < 0) temp = 0;

	/* Round lsb (2^(LUX_SCALE-1)) */
	temp += (1 << (TSL2561_LUX_LUXSCALE-1));
    2830:	68fb      	ldr	r3, [r7, #12]
    2832:	2280      	movs	r2, #128	; 0x80
    2834:	0192      	lsls	r2, r2, #6
    2836:	4694      	mov	ip, r2
    2838:	4463      	add	r3, ip
    283a:	60fb      	str	r3, [r7, #12]

	/* Strip off fractional portion */
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
    283c:	68fb      	ldr	r3, [r7, #12]
    283e:	0b9b      	lsrs	r3, r3, #14
    2840:	60bb      	str	r3, [r7, #8]

	/* Signal I2C had no errors */
	return lux;
    2842:	68bb      	ldr	r3, [r7, #8]
}
    2844:	0018      	movs	r0, r3
    2846:	46bd      	mov	sp, r7
    2848:	b00c      	add	sp, #48	; 0x30
    284a:	bd80      	pop	{r7, pc}
    284c:	0000bcb9 	.word	0x0000bcb9
    2850:	000002d1 	.word	0x000002d1
    2854:	0000023f 	.word	0x0000023f
    2858:	0000037b 	.word	0x0000037b
    285c:	000003fe 	.word	0x000003fe
    2860:	0000029a 	.word	0x0000029a

00002864 <getLuminosity>:

int getLuminosity() {
    2864:	b590      	push	{r4, r7, lr}
    2866:	b083      	sub	sp, #12
    2868:	af00      	add	r7, sp, #0
	/* Reads a two byte value from channel 0 (visible + infrared) */
	uint16_t broadband = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN0_LOW));
    286a:	1dbc      	adds	r4, r7, #6
    286c:	20ac      	movs	r0, #172	; 0xac
    286e:	4b0b      	ldr	r3, [pc, #44]	; (289c <getLuminosity+0x38>)
    2870:	4798      	blx	r3
    2872:	0003      	movs	r3, r0
    2874:	8023      	strh	r3, [r4, #0]

	/* Reads a two byte value from channel 1 (infrared) */
	uint16_t ir = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW));
    2876:	1d3c      	adds	r4, r7, #4
    2878:	20ae      	movs	r0, #174	; 0xae
    287a:	4b08      	ldr	r3, [pc, #32]	; (289c <getLuminosity+0x38>)
    287c:	4798      	blx	r3
    287e:	0003      	movs	r3, r0
    2880:	8023      	strh	r3, [r4, #0]
	
	return calculateLux(broadband, ir);
    2882:	1d3b      	adds	r3, r7, #4
    2884:	881a      	ldrh	r2, [r3, #0]
    2886:	1dbb      	adds	r3, r7, #6
    2888:	881b      	ldrh	r3, [r3, #0]
    288a:	0011      	movs	r1, r2
    288c:	0018      	movs	r0, r3
    288e:	4b04      	ldr	r3, [pc, #16]	; (28a0 <getLuminosity+0x3c>)
    2890:	4798      	blx	r3
    2892:	0003      	movs	r3, r0
}
    2894:	0018      	movs	r0, r3
    2896:	46bd      	mov	sp, r7
    2898:	b003      	add	sp, #12
    289a:	bd90      	pop	{r4, r7, pc}
    289c:	0000260d 	.word	0x0000260d
    28a0:	00002719 	.word	0x00002719

000028a4 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	b082      	sub	sp, #8
    28a8:	af00      	add	r7, sp, #0
    28aa:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	2b00      	cmp	r3, #0
    28b0:	d00c      	beq.n	28cc <delay_cycles+0x28>
		SysTick->LOAD = n;
    28b2:	4b08      	ldr	r3, [pc, #32]	; (28d4 <delay_cycles+0x30>)
    28b4:	687a      	ldr	r2, [r7, #4]
    28b6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    28b8:	4b06      	ldr	r3, [pc, #24]	; (28d4 <delay_cycles+0x30>)
    28ba:	2200      	movs	r2, #0
    28bc:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    28be:	46c0      	nop			; (mov r8, r8)
    28c0:	4b04      	ldr	r3, [pc, #16]	; (28d4 <delay_cycles+0x30>)
    28c2:	681a      	ldr	r2, [r3, #0]
    28c4:	2380      	movs	r3, #128	; 0x80
    28c6:	025b      	lsls	r3, r3, #9
    28c8:	4013      	ands	r3, r2
    28ca:	d0f9      	beq.n	28c0 <delay_cycles+0x1c>
		};
	}
}
    28cc:	46c0      	nop			; (mov r8, r8)
    28ce:	46bd      	mov	sp, r7
    28d0:	b002      	add	sp, #8
    28d2:	bd80      	pop	{r7, pc}
    28d4:	e000e010 	.word	0xe000e010

000028d8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    28d8:	b580      	push	{r7, lr}
    28da:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    28dc:	2000      	movs	r0, #0
    28de:	4b0f      	ldr	r3, [pc, #60]	; (291c <delay_init+0x44>)
    28e0:	4798      	blx	r3
    28e2:	0002      	movs	r2, r0
    28e4:	4b0e      	ldr	r3, [pc, #56]	; (2920 <delay_init+0x48>)
    28e6:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    28e8:	4b0d      	ldr	r3, [pc, #52]	; (2920 <delay_init+0x48>)
    28ea:	6818      	ldr	r0, [r3, #0]
    28ec:	4b0d      	ldr	r3, [pc, #52]	; (2924 <delay_init+0x4c>)
    28ee:	22fa      	movs	r2, #250	; 0xfa
    28f0:	0091      	lsls	r1, r2, #2
    28f2:	4798      	blx	r3
    28f4:	0003      	movs	r3, r0
    28f6:	001a      	movs	r2, r3
    28f8:	4b09      	ldr	r3, [pc, #36]	; (2920 <delay_init+0x48>)
    28fa:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    28fc:	4b08      	ldr	r3, [pc, #32]	; (2920 <delay_init+0x48>)
    28fe:	6818      	ldr	r0, [r3, #0]
    2900:	4b08      	ldr	r3, [pc, #32]	; (2924 <delay_init+0x4c>)
    2902:	22fa      	movs	r2, #250	; 0xfa
    2904:	0091      	lsls	r1, r2, #2
    2906:	4798      	blx	r3
    2908:	0003      	movs	r3, r0
    290a:	001a      	movs	r2, r3
    290c:	4b06      	ldr	r3, [pc, #24]	; (2928 <delay_init+0x50>)
    290e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2910:	4b06      	ldr	r3, [pc, #24]	; (292c <delay_init+0x54>)
    2912:	2205      	movs	r2, #5
    2914:	601a      	str	r2, [r3, #0]
}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	46bd      	mov	sp, r7
    291a:	bd80      	pop	{r7, pc}
    291c:	0000675d 	.word	0x0000675d
    2920:	20000040 	.word	0x20000040
    2924:	0000bcb9 	.word	0x0000bcb9
    2928:	20000044 	.word	0x20000044
    292c:	e000e010 	.word	0xe000e010

00002930 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    2930:	b580      	push	{r7, lr}
    2932:	b082      	sub	sp, #8
    2934:	af00      	add	r7, sp, #0
    2936:	6078      	str	r0, [r7, #4]
	while (n--) {
    2938:	e004      	b.n	2944 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    293a:	4b07      	ldr	r3, [pc, #28]	; (2958 <delay_cycles_us+0x28>)
    293c:	681b      	ldr	r3, [r3, #0]
    293e:	0018      	movs	r0, r3
    2940:	4b06      	ldr	r3, [pc, #24]	; (295c <delay_cycles_us+0x2c>)
    2942:	4798      	blx	r3
	while (n--) {
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	1e5a      	subs	r2, r3, #1
    2948:	607a      	str	r2, [r7, #4]
    294a:	2b00      	cmp	r3, #0
    294c:	d1f5      	bne.n	293a <delay_cycles_us+0xa>
	}
}
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	46bd      	mov	sp, r7
    2952:	b002      	add	sp, #8
    2954:	bd80      	pop	{r7, pc}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	20000044 	.word	0x20000044
    295c:	000028a5 	.word	0x000028a5

00002960 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2960:	b580      	push	{r7, lr}
    2962:	b082      	sub	sp, #8
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
	while (n--) {
    2968:	e004      	b.n	2974 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    296a:	4b07      	ldr	r3, [pc, #28]	; (2988 <delay_cycles_ms+0x28>)
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	0018      	movs	r0, r3
    2970:	4b06      	ldr	r3, [pc, #24]	; (298c <delay_cycles_ms+0x2c>)
    2972:	4798      	blx	r3
	while (n--) {
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	1e5a      	subs	r2, r3, #1
    2978:	607a      	str	r2, [r7, #4]
    297a:	2b00      	cmp	r3, #0
    297c:	d1f5      	bne.n	296a <delay_cycles_ms+0xa>
	}
}
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	46bd      	mov	sp, r7
    2982:	b002      	add	sp, #8
    2984:	bd80      	pop	{r7, pc}
    2986:	46c0      	nop			; (mov r8, r8)
    2988:	20000040 	.word	0x20000040
    298c:	000028a5 	.word	0x000028a5

00002990 <system_gclk_chan_get_config_defaults>:
{
    2990:	b580      	push	{r7, lr}
    2992:	b082      	sub	sp, #8
    2994:	af00      	add	r7, sp, #0
    2996:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	2200      	movs	r2, #0
    299c:	701a      	strb	r2, [r3, #0]
}
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	46bd      	mov	sp, r7
    29a2:	b002      	add	sp, #8
    29a4:	bd80      	pop	{r7, pc}
	...

000029a8 <system_apb_clock_set_mask>:
{
    29a8:	b580      	push	{r7, lr}
    29aa:	b082      	sub	sp, #8
    29ac:	af00      	add	r7, sp, #0
    29ae:	0002      	movs	r2, r0
    29b0:	6039      	str	r1, [r7, #0]
    29b2:	1dfb      	adds	r3, r7, #7
    29b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    29b6:	1dfb      	adds	r3, r7, #7
    29b8:	781b      	ldrb	r3, [r3, #0]
    29ba:	2b01      	cmp	r3, #1
    29bc:	d00a      	beq.n	29d4 <system_apb_clock_set_mask+0x2c>
    29be:	2b02      	cmp	r3, #2
    29c0:	d00f      	beq.n	29e2 <system_apb_clock_set_mask+0x3a>
    29c2:	2b00      	cmp	r3, #0
    29c4:	d114      	bne.n	29f0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    29c6:	4b0e      	ldr	r3, [pc, #56]	; (2a00 <system_apb_clock_set_mask+0x58>)
    29c8:	4a0d      	ldr	r2, [pc, #52]	; (2a00 <system_apb_clock_set_mask+0x58>)
    29ca:	6991      	ldr	r1, [r2, #24]
    29cc:	683a      	ldr	r2, [r7, #0]
    29ce:	430a      	orrs	r2, r1
    29d0:	619a      	str	r2, [r3, #24]
			break;
    29d2:	e00f      	b.n	29f4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    29d4:	4b0a      	ldr	r3, [pc, #40]	; (2a00 <system_apb_clock_set_mask+0x58>)
    29d6:	4a0a      	ldr	r2, [pc, #40]	; (2a00 <system_apb_clock_set_mask+0x58>)
    29d8:	69d1      	ldr	r1, [r2, #28]
    29da:	683a      	ldr	r2, [r7, #0]
    29dc:	430a      	orrs	r2, r1
    29de:	61da      	str	r2, [r3, #28]
			break;
    29e0:	e008      	b.n	29f4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    29e2:	4b07      	ldr	r3, [pc, #28]	; (2a00 <system_apb_clock_set_mask+0x58>)
    29e4:	4a06      	ldr	r2, [pc, #24]	; (2a00 <system_apb_clock_set_mask+0x58>)
    29e6:	6a11      	ldr	r1, [r2, #32]
    29e8:	683a      	ldr	r2, [r7, #0]
    29ea:	430a      	orrs	r2, r1
    29ec:	621a      	str	r2, [r3, #32]
			break;
    29ee:	e001      	b.n	29f4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    29f0:	2317      	movs	r3, #23
    29f2:	e000      	b.n	29f6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    29f4:	2300      	movs	r3, #0
}
    29f6:	0018      	movs	r0, r3
    29f8:	46bd      	mov	sp, r7
    29fa:	b002      	add	sp, #8
    29fc:	bd80      	pop	{r7, pc}
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	40000400 	.word	0x40000400

00002a04 <system_pinmux_get_config_defaults>:
{
    2a04:	b580      	push	{r7, lr}
    2a06:	b082      	sub	sp, #8
    2a08:	af00      	add	r7, sp, #0
    2a0a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	2280      	movs	r2, #128	; 0x80
    2a10:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	2200      	movs	r2, #0
    2a16:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	2201      	movs	r2, #1
    2a1c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2a1e:	687b      	ldr	r3, [r7, #4]
    2a20:	2200      	movs	r2, #0
    2a22:	70da      	strb	r2, [r3, #3]
}
    2a24:	46c0      	nop			; (mov r8, r8)
    2a26:	46bd      	mov	sp, r7
    2a28:	b002      	add	sp, #8
    2a2a:	bd80      	pop	{r7, pc}

00002a2c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    2a2c:	b580      	push	{r7, lr}
    2a2e:	b082      	sub	sp, #8
    2a30:	af00      	add	r7, sp, #0
    2a32:	0002      	movs	r2, r0
    2a34:	1dfb      	adds	r3, r7, #7
    2a36:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    2a38:	1dfb      	adds	r3, r7, #7
    2a3a:	781b      	ldrb	r3, [r3, #0]
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d002      	beq.n	2a46 <system_voltage_reference_enable+0x1a>
    2a40:	2b01      	cmp	r3, #1
    2a42:	d007      	beq.n	2a54 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    2a44:	e00d      	b.n	2a62 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    2a46:	4b08      	ldr	r3, [pc, #32]	; (2a68 <system_voltage_reference_enable+0x3c>)
    2a48:	4a07      	ldr	r2, [pc, #28]	; (2a68 <system_voltage_reference_enable+0x3c>)
    2a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    2a4c:	2102      	movs	r1, #2
    2a4e:	430a      	orrs	r2, r1
    2a50:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2a52:	e006      	b.n	2a62 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    2a54:	4b04      	ldr	r3, [pc, #16]	; (2a68 <system_voltage_reference_enable+0x3c>)
    2a56:	4a04      	ldr	r2, [pc, #16]	; (2a68 <system_voltage_reference_enable+0x3c>)
    2a58:	6c12      	ldr	r2, [r2, #64]	; 0x40
    2a5a:	2104      	movs	r1, #4
    2a5c:	430a      	orrs	r2, r1
    2a5e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2a60:	46c0      	nop			; (mov r8, r8)
	}
}
    2a62:	46bd      	mov	sp, r7
    2a64:	b002      	add	sp, #8
    2a66:	bd80      	pop	{r7, pc}
    2a68:	40000800 	.word	0x40000800

00002a6c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    2a6c:	b580      	push	{r7, lr}
    2a6e:	b084      	sub	sp, #16
    2a70:	af00      	add	r7, sp, #0
    2a72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	681b      	ldr	r3, [r3, #0]
    2a78:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2a7a:	68fb      	ldr	r3, [r7, #12]
    2a7c:	7e5b      	ldrb	r3, [r3, #25]
    2a7e:	b2db      	uxtb	r3, r3
    2a80:	b25b      	sxtb	r3, r3
    2a82:	2b00      	cmp	r3, #0
    2a84:	da01      	bge.n	2a8a <adc_is_syncing+0x1e>
		return true;
    2a86:	2301      	movs	r3, #1
    2a88:	e000      	b.n	2a8c <adc_is_syncing+0x20>
	}

	return false;
    2a8a:	2300      	movs	r3, #0
}
    2a8c:	0018      	movs	r0, r3
    2a8e:	46bd      	mov	sp, r7
    2a90:	b004      	add	sp, #16
    2a92:	bd80      	pop	{r7, pc}

00002a94 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b082      	sub	sp, #8
    2a98:	af00      	add	r7, sp, #0
    2a9a:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	2200      	movs	r2, #0
    2aa0:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2aa2:	687b      	ldr	r3, [r7, #4]
    2aa4:	2200      	movs	r2, #0
    2aa6:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	2200      	movs	r2, #0
    2aac:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	2200      	movs	r2, #0
    2ab2:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2ab4:	687b      	ldr	r3, [r7, #4]
    2ab6:	2200      	movs	r2, #0
    2ab8:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    2aba:	687b      	ldr	r3, [r7, #4]
    2abc:	2200      	movs	r2, #0
    2abe:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    2ac0:	687b      	ldr	r3, [r7, #4]
    2ac2:	2200      	movs	r2, #0
    2ac4:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	2200      	movs	r2, #0
    2aca:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2acc:	687b      	ldr	r3, [r7, #4]
    2ace:	2200      	movs	r2, #0
    2ad0:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	22c0      	movs	r2, #192	; 0xc0
    2ad6:	0152      	lsls	r2, r2, #5
    2ad8:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	2200      	movs	r2, #0
    2ade:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	2200      	movs	r2, #0
    2ae4:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    2ae6:	687b      	ldr	r3, [r7, #4]
    2ae8:	2200      	movs	r2, #0
    2aea:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	2200      	movs	r2, #0
    2af0:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	2200      	movs	r2, #0
    2af6:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	222a      	movs	r2, #42	; 0x2a
    2afc:	2100      	movs	r1, #0
    2afe:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	2200      	movs	r2, #0
    2b04:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	2200      	movs	r2, #0
    2b0a:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	2224      	movs	r2, #36	; 0x24
    2b10:	2100      	movs	r1, #0
    2b12:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	2200      	movs	r2, #0
    2b18:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	2200      	movs	r2, #0
    2b1e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	2200      	movs	r2, #0
    2b24:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    2b26:	687b      	ldr	r3, [r7, #4]
    2b28:	222b      	movs	r2, #43	; 0x2b
    2b2a:	2100      	movs	r1, #0
    2b2c:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	222c      	movs	r2, #44	; 0x2c
    2b32:	2100      	movs	r1, #0
    2b34:	5499      	strb	r1, [r3, r2]
}
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	46bd      	mov	sp, r7
    2b3a:	b002      	add	sp, #8
    2b3c:	bd80      	pop	{r7, pc}
	...

00002b40 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    2b40:	b580      	push	{r7, lr}
    2b42:	b098      	sub	sp, #96	; 0x60
    2b44:	af00      	add	r7, sp, #0
    2b46:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    2b48:	230c      	movs	r3, #12
    2b4a:	18fa      	adds	r2, r7, r3
    2b4c:	4b15      	ldr	r3, [pc, #84]	; (2ba4 <_adc_configure_ain_pin+0x64>)
    2b4e:	0010      	movs	r0, r2
    2b50:	0019      	movs	r1, r3
    2b52:	2350      	movs	r3, #80	; 0x50
    2b54:	001a      	movs	r2, r3
    2b56:	4b14      	ldr	r3, [pc, #80]	; (2ba8 <_adc_configure_ain_pin+0x68>)
    2b58:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    2b5a:	4b14      	ldr	r3, [pc, #80]	; (2bac <_adc_configure_ain_pin+0x6c>)
    2b5c:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    2b5e:	687b      	ldr	r3, [r7, #4]
    2b60:	2b13      	cmp	r3, #19
    2b62:	d81a      	bhi.n	2b9a <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2b64:	230c      	movs	r3, #12
    2b66:	18fb      	adds	r3, r7, r3
    2b68:	687a      	ldr	r2, [r7, #4]
    2b6a:	0092      	lsls	r2, r2, #2
    2b6c:	58d3      	ldr	r3, [r2, r3]
    2b6e:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    2b70:	2308      	movs	r3, #8
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	0018      	movs	r0, r3
    2b76:	4b0e      	ldr	r3, [pc, #56]	; (2bb0 <_adc_configure_ain_pin+0x70>)
    2b78:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2b7a:	2308      	movs	r3, #8
    2b7c:	18fb      	adds	r3, r7, r3
    2b7e:	2200      	movs	r2, #0
    2b80:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    2b82:	2308      	movs	r3, #8
    2b84:	18fb      	adds	r3, r7, r3
    2b86:	2201      	movs	r2, #1
    2b88:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2b8c:	b2db      	uxtb	r3, r3
    2b8e:	2208      	movs	r2, #8
    2b90:	18ba      	adds	r2, r7, r2
    2b92:	0011      	movs	r1, r2
    2b94:	0018      	movs	r0, r3
    2b96:	4b07      	ldr	r3, [pc, #28]	; (2bb4 <_adc_configure_ain_pin+0x74>)
    2b98:	4798      	blx	r3
	}
}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	46bd      	mov	sp, r7
    2b9e:	b018      	add	sp, #96	; 0x60
    2ba0:	bd80      	pop	{r7, pc}
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	0000e4c0 	.word	0x0000e4c0
    2ba8:	00009111 	.word	0x00009111
    2bac:	0000ffff 	.word	0x0000ffff
    2bb0:	00002a05 	.word	0x00002a05
    2bb4:	00006b21 	.word	0x00006b21

00002bb8 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bba:	b089      	sub	sp, #36	; 0x24
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	6078      	str	r0, [r7, #4]
    2bc0:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    2bc2:	231f      	movs	r3, #31
    2bc4:	18fb      	adds	r3, r7, r3
    2bc6:	2200      	movs	r2, #0
    2bc8:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    2bca:	2310      	movs	r3, #16
    2bcc:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2bce:	2317      	movs	r3, #23
    2bd0:	18fb      	adds	r3, r7, r3
    2bd2:	2200      	movs	r2, #0
    2bd4:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	681b      	ldr	r3, [r3, #0]
    2bda:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2bdc:	230c      	movs	r3, #12
    2bde:	18fb      	adds	r3, r7, r3
    2be0:	0018      	movs	r0, r3
    2be2:	4bce      	ldr	r3, [pc, #824]	; (2f1c <_adc_set_config+0x364>)
    2be4:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    2be6:	683b      	ldr	r3, [r7, #0]
    2be8:	781a      	ldrb	r2, [r3, #0]
    2bea:	230c      	movs	r3, #12
    2bec:	18fb      	adds	r3, r7, r3
    2bee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2bf0:	230c      	movs	r3, #12
    2bf2:	18fb      	adds	r3, r7, r3
    2bf4:	0019      	movs	r1, r3
    2bf6:	201e      	movs	r0, #30
    2bf8:	4bc9      	ldr	r3, [pc, #804]	; (2f20 <_adc_set_config+0x368>)
    2bfa:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2bfc:	201e      	movs	r0, #30
    2bfe:	4bc9      	ldr	r3, [pc, #804]	; (2f24 <_adc_set_config+0x36c>)
    2c00:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    2c02:	683b      	ldr	r3, [r7, #0]
    2c04:	222c      	movs	r2, #44	; 0x2c
    2c06:	5c9b      	ldrb	r3, [r3, r2]
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d040      	beq.n	2c8e <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2c0c:	2316      	movs	r3, #22
    2c0e:	18fb      	adds	r3, r7, r3
    2c10:	683a      	ldr	r2, [r7, #0]
    2c12:	212b      	movs	r1, #43	; 0x2b
    2c14:	5c52      	ldrb	r2, [r2, r1]
    2c16:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    2c18:	683b      	ldr	r3, [r7, #0]
    2c1a:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    2c1c:	2315      	movs	r3, #21
    2c1e:	18fb      	adds	r3, r7, r3
    2c20:	2216      	movs	r2, #22
    2c22:	18ba      	adds	r2, r7, r2
    2c24:	7812      	ldrb	r2, [r2, #0]
    2c26:	188a      	adds	r2, r1, r2
    2c28:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    2c2a:	683b      	ldr	r3, [r7, #0]
    2c2c:	222c      	movs	r2, #44	; 0x2c
    2c2e:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    2c30:	230f      	movs	r3, #15
    2c32:	18fb      	adds	r3, r7, r3
    2c34:	2215      	movs	r2, #21
    2c36:	18ba      	adds	r2, r7, r2
    2c38:	7812      	ldrb	r2, [r2, #0]
    2c3a:	188a      	adds	r2, r1, r2
    2c3c:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    2c3e:	e018      	b.n	2c72 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    2c40:	2316      	movs	r3, #22
    2c42:	18fb      	adds	r3, r7, r3
    2c44:	781b      	ldrb	r3, [r3, #0]
    2c46:	220f      	movs	r2, #15
    2c48:	4013      	ands	r3, r2
    2c4a:	683a      	ldr	r2, [r7, #0]
    2c4c:	7b12      	ldrb	r2, [r2, #12]
    2c4e:	189b      	adds	r3, r3, r2
    2c50:	0018      	movs	r0, r3
    2c52:	4bb5      	ldr	r3, [pc, #724]	; (2f28 <_adc_set_config+0x370>)
    2c54:	4798      	blx	r3
			start_pin++;
    2c56:	2315      	movs	r3, #21
    2c58:	18fb      	adds	r3, r7, r3
    2c5a:	781a      	ldrb	r2, [r3, #0]
    2c5c:	2315      	movs	r3, #21
    2c5e:	18fb      	adds	r3, r7, r3
    2c60:	3201      	adds	r2, #1
    2c62:	701a      	strb	r2, [r3, #0]
			offset++;
    2c64:	2316      	movs	r3, #22
    2c66:	18fb      	adds	r3, r7, r3
    2c68:	781a      	ldrb	r2, [r3, #0]
    2c6a:	2316      	movs	r3, #22
    2c6c:	18fb      	adds	r3, r7, r3
    2c6e:	3201      	adds	r2, #1
    2c70:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    2c72:	2315      	movs	r3, #21
    2c74:	18fa      	adds	r2, r7, r3
    2c76:	230f      	movs	r3, #15
    2c78:	18fb      	adds	r3, r7, r3
    2c7a:	7812      	ldrb	r2, [r2, #0]
    2c7c:	781b      	ldrb	r3, [r3, #0]
    2c7e:	429a      	cmp	r2, r3
    2c80:	d3de      	bcc.n	2c40 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    2c82:	683b      	ldr	r3, [r7, #0]
    2c84:	89db      	ldrh	r3, [r3, #14]
    2c86:	0018      	movs	r0, r3
    2c88:	4ba7      	ldr	r3, [pc, #668]	; (2f28 <_adc_set_config+0x370>)
    2c8a:	4798      	blx	r3
    2c8c:	e009      	b.n	2ca2 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    2c8e:	683b      	ldr	r3, [r7, #0]
    2c90:	7b1b      	ldrb	r3, [r3, #12]
    2c92:	0018      	movs	r0, r3
    2c94:	4ba4      	ldr	r3, [pc, #656]	; (2f28 <_adc_set_config+0x370>)
    2c96:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    2c98:	683b      	ldr	r3, [r7, #0]
    2c9a:	89db      	ldrh	r3, [r3, #14]
    2c9c:	0018      	movs	r0, r3
    2c9e:	4ba2      	ldr	r3, [pc, #648]	; (2f28 <_adc_set_config+0x370>)
    2ca0:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2ca2:	683b      	ldr	r3, [r7, #0]
    2ca4:	7d5b      	ldrb	r3, [r3, #21]
    2ca6:	009b      	lsls	r3, r3, #2
    2ca8:	b2da      	uxtb	r2, r3
    2caa:	693b      	ldr	r3, [r7, #16]
    2cac:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2cae:	683b      	ldr	r3, [r7, #0]
    2cb0:	7d9b      	ldrb	r3, [r3, #22]
    2cb2:	01db      	lsls	r3, r3, #7
    2cb4:	b25a      	sxtb	r2, r3
			(config->reference);
    2cb6:	683b      	ldr	r3, [r7, #0]
    2cb8:	785b      	ldrb	r3, [r3, #1]
    2cba:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2cbc:	4313      	orrs	r3, r2
    2cbe:	b25b      	sxtb	r3, r3
    2cc0:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    2cc2:	693b      	ldr	r3, [r7, #16]
    2cc4:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    2cc6:	683b      	ldr	r3, [r7, #0]
    2cc8:	791b      	ldrb	r3, [r3, #4]
    2cca:	2b34      	cmp	r3, #52	; 0x34
    2ccc:	d846      	bhi.n	2d5c <_adc_set_config+0x1a4>
    2cce:	009a      	lsls	r2, r3, #2
    2cd0:	4b96      	ldr	r3, [pc, #600]	; (2f2c <_adc_set_config+0x374>)
    2cd2:	18d3      	adds	r3, r2, r3
    2cd4:	681b      	ldr	r3, [r3, #0]
    2cd6:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    2cd8:	231f      	movs	r3, #31
    2cda:	18fb      	adds	r3, r7, r3
    2cdc:	683a      	ldr	r2, [r7, #0]
    2cde:	7c52      	ldrb	r2, [r2, #17]
    2ce0:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    2ce2:	2317      	movs	r3, #23
    2ce4:	18fb      	adds	r3, r7, r3
    2ce6:	683a      	ldr	r2, [r7, #0]
    2ce8:	7c12      	ldrb	r2, [r2, #16]
    2cea:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2cec:	2310      	movs	r3, #16
    2cee:	61bb      	str	r3, [r7, #24]
		break;
    2cf0:	e036      	b.n	2d60 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2cf2:	231f      	movs	r3, #31
    2cf4:	18fb      	adds	r3, r7, r3
    2cf6:	2201      	movs	r2, #1
    2cf8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2cfa:	2317      	movs	r3, #23
    2cfc:	18fb      	adds	r3, r7, r3
    2cfe:	2202      	movs	r2, #2
    2d00:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2d02:	2310      	movs	r3, #16
    2d04:	61bb      	str	r3, [r7, #24]
		break;
    2d06:	e02b      	b.n	2d60 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    2d08:	231f      	movs	r3, #31
    2d0a:	18fb      	adds	r3, r7, r3
    2d0c:	2202      	movs	r2, #2
    2d0e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2d10:	2317      	movs	r3, #23
    2d12:	18fb      	adds	r3, r7, r3
    2d14:	2204      	movs	r2, #4
    2d16:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2d18:	2310      	movs	r3, #16
    2d1a:	61bb      	str	r3, [r7, #24]
		break;
    2d1c:	e020      	b.n	2d60 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2d1e:	231f      	movs	r3, #31
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	2201      	movs	r2, #1
    2d24:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2d26:	2317      	movs	r3, #23
    2d28:	18fb      	adds	r3, r7, r3
    2d2a:	2206      	movs	r2, #6
    2d2c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2d2e:	2310      	movs	r3, #16
    2d30:	61bb      	str	r3, [r7, #24]
		break;
    2d32:	e015      	b.n	2d60 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2d34:	231f      	movs	r3, #31
    2d36:	18fb      	adds	r3, r7, r3
    2d38:	2200      	movs	r2, #0
    2d3a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2d3c:	2317      	movs	r3, #23
    2d3e:	18fb      	adds	r3, r7, r3
    2d40:	2208      	movs	r2, #8
    2d42:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2d44:	2310      	movs	r3, #16
    2d46:	61bb      	str	r3, [r7, #24]
		break;
    2d48:	e00a      	b.n	2d60 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    2d4a:	2330      	movs	r3, #48	; 0x30
    2d4c:	61bb      	str	r3, [r7, #24]
		break;
    2d4e:	e007      	b.n	2d60 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    2d50:	2320      	movs	r3, #32
    2d52:	61bb      	str	r3, [r7, #24]
		break;
    2d54:	e004      	b.n	2d60 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    2d56:	2300      	movs	r3, #0
    2d58:	61bb      	str	r3, [r7, #24]
		break;
    2d5a:	e001      	b.n	2d60 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    2d5c:	2317      	movs	r3, #23
    2d5e:	e1ae      	b.n	30be <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2d60:	231f      	movs	r3, #31
    2d62:	18fb      	adds	r3, r7, r3
    2d64:	781b      	ldrb	r3, [r3, #0]
    2d66:	011b      	lsls	r3, r3, #4
    2d68:	b2db      	uxtb	r3, r3
    2d6a:	2270      	movs	r2, #112	; 0x70
    2d6c:	4013      	ands	r3, r2
    2d6e:	b2da      	uxtb	r2, r3
    2d70:	2317      	movs	r3, #23
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	781b      	ldrb	r3, [r3, #0]
    2d76:	4313      	orrs	r3, r2
    2d78:	b2da      	uxtb	r2, r3
    2d7a:	693b      	ldr	r3, [r7, #16]
    2d7c:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2d7e:	683b      	ldr	r3, [r7, #0]
    2d80:	7ddb      	ldrb	r3, [r3, #23]
    2d82:	2b3f      	cmp	r3, #63	; 0x3f
    2d84:	d901      	bls.n	2d8a <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    2d86:	2317      	movs	r3, #23
    2d88:	e199      	b.n	30be <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    2d8a:	683b      	ldr	r3, [r7, #0]
    2d8c:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    2d8e:	693b      	ldr	r3, [r7, #16]
    2d90:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	687b      	ldr	r3, [r7, #4]
    2d96:	0018      	movs	r0, r3
    2d98:	4b65      	ldr	r3, [pc, #404]	; (2f30 <_adc_set_config+0x378>)
    2d9a:	4798      	blx	r3
    2d9c:	1e03      	subs	r3, r0, #0
    2d9e:	d1f9      	bne.n	2d94 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    2da0:	683b      	ldr	r3, [r7, #0]
    2da2:	885a      	ldrh	r2, [r3, #2]
    2da4:	69bb      	ldr	r3, [r7, #24]
    2da6:	b29b      	uxth	r3, r3
    2da8:	4313      	orrs	r3, r2
    2daa:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2dac:	683b      	ldr	r3, [r7, #0]
    2dae:	2124      	movs	r1, #36	; 0x24
    2db0:	5c5b      	ldrb	r3, [r3, r1]
    2db2:	b29b      	uxth	r3, r3
    2db4:	00db      	lsls	r3, r3, #3
    2db6:	b29b      	uxth	r3, r3
			resolution |
    2db8:	4313      	orrs	r3, r2
    2dba:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2dbc:	683b      	ldr	r3, [r7, #0]
    2dbe:	7d1b      	ldrb	r3, [r3, #20]
    2dc0:	b29b      	uxth	r3, r3
    2dc2:	009b      	lsls	r3, r3, #2
    2dc4:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2dc6:	4313      	orrs	r3, r2
    2dc8:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2dca:	683b      	ldr	r3, [r7, #0]
    2dcc:	7c9b      	ldrb	r3, [r3, #18]
    2dce:	b29b      	uxth	r3, r3
    2dd0:	18db      	adds	r3, r3, r3
    2dd2:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2dd4:	4313      	orrs	r3, r2
    2dd6:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    2dd8:	683b      	ldr	r3, [r7, #0]
    2dda:	7cdb      	ldrb	r3, [r3, #19]
    2ddc:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2dde:	4313      	orrs	r3, r2
    2de0:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    2de2:	693b      	ldr	r3, [r7, #16]
    2de4:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    2de6:	683b      	ldr	r3, [r7, #0]
    2de8:	7e1b      	ldrb	r3, [r3, #24]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d100      	bne.n	2df0 <_adc_set_config+0x238>
    2dee:	e0c4      	b.n	2f7a <_adc_set_config+0x3c2>
		switch (resolution) {
    2df0:	69bb      	ldr	r3, [r7, #24]
    2df2:	2b10      	cmp	r3, #16
    2df4:	d100      	bne.n	2df8 <_adc_set_config+0x240>
    2df6:	e076      	b.n	2ee6 <_adc_set_config+0x32e>
    2df8:	d802      	bhi.n	2e00 <_adc_set_config+0x248>
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d04d      	beq.n	2e9a <_adc_set_config+0x2e2>
    2dfe:	e0bc      	b.n	2f7a <_adc_set_config+0x3c2>
    2e00:	2b20      	cmp	r3, #32
    2e02:	d023      	beq.n	2e4c <_adc_set_config+0x294>
    2e04:	2b30      	cmp	r3, #48	; 0x30
    2e06:	d000      	beq.n	2e0a <_adc_set_config+0x252>
    2e08:	e0b7      	b.n	2f7a <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    2e0a:	683b      	ldr	r3, [r7, #0]
    2e0c:	7cdb      	ldrb	r3, [r3, #19]
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d011      	beq.n	2e36 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    2e12:	683b      	ldr	r3, [r7, #0]
    2e14:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2e16:	2b7f      	cmp	r3, #127	; 0x7f
    2e18:	dc0b      	bgt.n	2e32 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    2e1a:	683b      	ldr	r3, [r7, #0]
    2e1c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    2e1e:	3380      	adds	r3, #128	; 0x80
    2e20:	db07      	blt.n	2e32 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    2e22:	683b      	ldr	r3, [r7, #0]
    2e24:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    2e26:	2b7f      	cmp	r3, #127	; 0x7f
    2e28:	dc03      	bgt.n	2e32 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    2e2a:	683b      	ldr	r3, [r7, #0]
    2e2c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    2e2e:	3380      	adds	r3, #128	; 0x80
    2e30:	da01      	bge.n	2e36 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e32:	2317      	movs	r3, #23
    2e34:	e143      	b.n	30be <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    2e36:	683b      	ldr	r3, [r7, #0]
    2e38:	69db      	ldr	r3, [r3, #28]
    2e3a:	2bff      	cmp	r3, #255	; 0xff
    2e3c:	dc04      	bgt.n	2e48 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    2e3e:	683b      	ldr	r3, [r7, #0]
    2e40:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    2e42:	2bff      	cmp	r3, #255	; 0xff
    2e44:	dc00      	bgt.n	2e48 <_adc_set_config+0x290>
    2e46:	e091      	b.n	2f6c <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e48:	2317      	movs	r3, #23
    2e4a:	e138      	b.n	30be <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2e4c:	683b      	ldr	r3, [r7, #0]
    2e4e:	7cdb      	ldrb	r3, [r3, #19]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d015      	beq.n	2e80 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    2e54:	683b      	ldr	r3, [r7, #0]
    2e56:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2e58:	4a36      	ldr	r2, [pc, #216]	; (2f34 <_adc_set_config+0x37c>)
    2e5a:	4293      	cmp	r3, r2
    2e5c:	dc0e      	bgt.n	2e7c <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    2e5e:	683b      	ldr	r3, [r7, #0]
    2e60:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    2e62:	4a35      	ldr	r2, [pc, #212]	; (2f38 <_adc_set_config+0x380>)
    2e64:	4293      	cmp	r3, r2
    2e66:	db09      	blt.n	2e7c <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    2e68:	683b      	ldr	r3, [r7, #0]
    2e6a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    2e6c:	4a31      	ldr	r2, [pc, #196]	; (2f34 <_adc_set_config+0x37c>)
    2e6e:	4293      	cmp	r3, r2
    2e70:	dc04      	bgt.n	2e7c <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    2e72:	683b      	ldr	r3, [r7, #0]
    2e74:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    2e76:	4a30      	ldr	r2, [pc, #192]	; (2f38 <_adc_set_config+0x380>)
    2e78:	4293      	cmp	r3, r2
    2e7a:	da01      	bge.n	2e80 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e7c:	2317      	movs	r3, #23
    2e7e:	e11e      	b.n	30be <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	69db      	ldr	r3, [r3, #28]
    2e84:	4a2d      	ldr	r2, [pc, #180]	; (2f3c <_adc_set_config+0x384>)
    2e86:	4293      	cmp	r3, r2
    2e88:	dc05      	bgt.n	2e96 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    2e8a:	683b      	ldr	r3, [r7, #0]
    2e8c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    2e8e:	4a2b      	ldr	r2, [pc, #172]	; (2f3c <_adc_set_config+0x384>)
    2e90:	4293      	cmp	r3, r2
    2e92:	dc00      	bgt.n	2e96 <_adc_set_config+0x2de>
    2e94:	e06c      	b.n	2f70 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e96:	2317      	movs	r3, #23
    2e98:	e111      	b.n	30be <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2e9a:	683b      	ldr	r3, [r7, #0]
    2e9c:	7cdb      	ldrb	r3, [r3, #19]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d015      	beq.n	2ece <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    2ea2:	683b      	ldr	r3, [r7, #0]
    2ea4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2ea6:	4a26      	ldr	r2, [pc, #152]	; (2f40 <_adc_set_config+0x388>)
    2ea8:	4293      	cmp	r3, r2
    2eaa:	dc0e      	bgt.n	2eca <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    2eac:	683b      	ldr	r3, [r7, #0]
    2eae:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    2eb0:	4a24      	ldr	r2, [pc, #144]	; (2f44 <_adc_set_config+0x38c>)
    2eb2:	4293      	cmp	r3, r2
    2eb4:	db09      	blt.n	2eca <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    2eb6:	683b      	ldr	r3, [r7, #0]
    2eb8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    2eba:	4a21      	ldr	r2, [pc, #132]	; (2f40 <_adc_set_config+0x388>)
    2ebc:	4293      	cmp	r3, r2
    2ebe:	dc04      	bgt.n	2eca <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    2ec0:	683b      	ldr	r3, [r7, #0]
    2ec2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    2ec4:	4a1f      	ldr	r2, [pc, #124]	; (2f44 <_adc_set_config+0x38c>)
    2ec6:	4293      	cmp	r3, r2
    2ec8:	da01      	bge.n	2ece <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2eca:	2317      	movs	r3, #23
    2ecc:	e0f7      	b.n	30be <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    2ece:	683b      	ldr	r3, [r7, #0]
    2ed0:	69db      	ldr	r3, [r3, #28]
    2ed2:	4a1d      	ldr	r2, [pc, #116]	; (2f48 <_adc_set_config+0x390>)
    2ed4:	4293      	cmp	r3, r2
    2ed6:	dc04      	bgt.n	2ee2 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    2ed8:	683b      	ldr	r3, [r7, #0]
    2eda:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    2edc:	4a1a      	ldr	r2, [pc, #104]	; (2f48 <_adc_set_config+0x390>)
    2ede:	4293      	cmp	r3, r2
    2ee0:	dd48      	ble.n	2f74 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2ee2:	2317      	movs	r3, #23
    2ee4:	e0eb      	b.n	30be <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    2ee6:	683b      	ldr	r3, [r7, #0]
    2ee8:	7cdb      	ldrb	r3, [r3, #19]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d032      	beq.n	2f54 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    2eee:	683b      	ldr	r3, [r7, #0]
    2ef0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2ef2:	4a16      	ldr	r2, [pc, #88]	; (2f4c <_adc_set_config+0x394>)
    2ef4:	4293      	cmp	r3, r2
    2ef6:	dc0e      	bgt.n	2f16 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    2ef8:	683b      	ldr	r3, [r7, #0]
    2efa:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    2efc:	4a14      	ldr	r2, [pc, #80]	; (2f50 <_adc_set_config+0x398>)
    2efe:	4293      	cmp	r3, r2
    2f00:	db09      	blt.n	2f16 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    2f02:	683b      	ldr	r3, [r7, #0]
    2f04:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    2f06:	4a11      	ldr	r2, [pc, #68]	; (2f4c <_adc_set_config+0x394>)
    2f08:	4293      	cmp	r3, r2
    2f0a:	dc04      	bgt.n	2f16 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    2f0c:	683b      	ldr	r3, [r7, #0]
    2f0e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    2f10:	4a0f      	ldr	r2, [pc, #60]	; (2f50 <_adc_set_config+0x398>)
    2f12:	4293      	cmp	r3, r2
    2f14:	da1e      	bge.n	2f54 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2f16:	2317      	movs	r3, #23
    2f18:	e0d1      	b.n	30be <_adc_set_config+0x506>
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	00002991 	.word	0x00002991
    2f20:	00006835 	.word	0x00006835
    2f24:	00006879 	.word	0x00006879
    2f28:	00002b41 	.word	0x00002b41
    2f2c:	0000e510 	.word	0x0000e510
    2f30:	00002a6d 	.word	0x00002a6d
    2f34:	000001ff 	.word	0x000001ff
    2f38:	fffffe00 	.word	0xfffffe00
    2f3c:	000003ff 	.word	0x000003ff
    2f40:	000007ff 	.word	0x000007ff
    2f44:	fffff800 	.word	0xfffff800
    2f48:	00000fff 	.word	0x00000fff
    2f4c:	00007fff 	.word	0x00007fff
    2f50:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    2f54:	683b      	ldr	r3, [r7, #0]
    2f56:	69db      	ldr	r3, [r3, #28]
    2f58:	4a5b      	ldr	r2, [pc, #364]	; (30c8 <_adc_set_config+0x510>)
    2f5a:	4293      	cmp	r3, r2
    2f5c:	dc04      	bgt.n	2f68 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    2f5e:	683b      	ldr	r3, [r7, #0]
    2f60:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    2f62:	4a59      	ldr	r2, [pc, #356]	; (30c8 <_adc_set_config+0x510>)
    2f64:	4293      	cmp	r3, r2
    2f66:	dd07      	ble.n	2f78 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2f68:	2317      	movs	r3, #23
    2f6a:	e0a8      	b.n	30be <_adc_set_config+0x506>
			break;
    2f6c:	46c0      	nop			; (mov r8, r8)
    2f6e:	e004      	b.n	2f7a <_adc_set_config+0x3c2>
			break;
    2f70:	46c0      	nop			; (mov r8, r8)
    2f72:	e002      	b.n	2f7a <_adc_set_config+0x3c2>
			break;
    2f74:	46c0      	nop			; (mov r8, r8)
    2f76:	e000      	b.n	2f7a <_adc_set_config+0x3c2>
			}
			break;
    2f78:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	0018      	movs	r0, r3
    2f80:	4b52      	ldr	r3, [pc, #328]	; (30cc <_adc_set_config+0x514>)
    2f82:	4798      	blx	r3
    2f84:	1e03      	subs	r3, r0, #0
    2f86:	d1f9      	bne.n	2f7c <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    2f88:	683b      	ldr	r3, [r7, #0]
    2f8a:	7e1a      	ldrb	r2, [r3, #24]
    2f8c:	693b      	ldr	r3, [r7, #16]
    2f8e:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    2f90:	46c0      	nop			; (mov r8, r8)
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	0018      	movs	r0, r3
    2f96:	4b4d      	ldr	r3, [pc, #308]	; (30cc <_adc_set_config+0x514>)
    2f98:	4798      	blx	r3
    2f9a:	1e03      	subs	r3, r0, #0
    2f9c:	d1f9      	bne.n	2f92 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    2f9e:	683b      	ldr	r3, [r7, #0]
    2fa0:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    2fa2:	b29a      	uxth	r2, r3
    2fa4:	693b      	ldr	r3, [r7, #16]
    2fa6:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    2fa8:	46c0      	nop			; (mov r8, r8)
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	0018      	movs	r0, r3
    2fae:	4b47      	ldr	r3, [pc, #284]	; (30cc <_adc_set_config+0x514>)
    2fb0:	4798      	blx	r3
    2fb2:	1e03      	subs	r3, r0, #0
    2fb4:	d1f9      	bne.n	2faa <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2fb6:	683b      	ldr	r3, [r7, #0]
    2fb8:	6a1b      	ldr	r3, [r3, #32]
    2fba:	b29a      	uxth	r2, r3
    2fbc:	693b      	ldr	r3, [r7, #16]
    2fbe:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2fc0:	2314      	movs	r3, #20
    2fc2:	18fb      	adds	r3, r7, r3
    2fc4:	683a      	ldr	r2, [r7, #0]
    2fc6:	212c      	movs	r1, #44	; 0x2c
    2fc8:	5c52      	ldrb	r2, [r2, r1]
    2fca:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2fcc:	2314      	movs	r3, #20
    2fce:	18fb      	adds	r3, r7, r3
    2fd0:	781b      	ldrb	r3, [r3, #0]
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d006      	beq.n	2fe4 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    2fd6:	2314      	movs	r3, #20
    2fd8:	18fb      	adds	r3, r7, r3
    2fda:	781a      	ldrb	r2, [r3, #0]
    2fdc:	2314      	movs	r3, #20
    2fde:	18fb      	adds	r3, r7, r3
    2fe0:	3a01      	subs	r2, #1
    2fe2:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2fe4:	2314      	movs	r3, #20
    2fe6:	18fb      	adds	r3, r7, r3
    2fe8:	781b      	ldrb	r3, [r3, #0]
    2fea:	2b0f      	cmp	r3, #15
    2fec:	d804      	bhi.n	2ff8 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2fee:	683b      	ldr	r3, [r7, #0]
    2ff0:	222b      	movs	r2, #43	; 0x2b
    2ff2:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2ff4:	2b0f      	cmp	r3, #15
    2ff6:	d901      	bls.n	2ffc <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    2ff8:	2317      	movs	r3, #23
    2ffa:	e060      	b.n	30be <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    2ffc:	46c0      	nop			; (mov r8, r8)
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	0018      	movs	r0, r3
    3002:	4b32      	ldr	r3, [pc, #200]	; (30cc <_adc_set_config+0x514>)
    3004:	4798      	blx	r3
    3006:	1e03      	subs	r3, r0, #0
    3008:	d1f9      	bne.n	2ffe <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    300a:	683b      	ldr	r3, [r7, #0]
    300c:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    300e:	683a      	ldr	r2, [r7, #0]
    3010:	212b      	movs	r1, #43	; 0x2b
    3012:	5c52      	ldrb	r2, [r2, r1]
    3014:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    3016:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    3018:	2214      	movs	r2, #20
    301a:	18ba      	adds	r2, r7, r2
    301c:	7812      	ldrb	r2, [r2, #0]
    301e:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    3020:	4313      	orrs	r3, r2
			config->negative_input |
    3022:	683a      	ldr	r2, [r7, #0]
    3024:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    3026:	4313      	orrs	r3, r2
			config->positive_input;
    3028:	683a      	ldr	r2, [r7, #0]
    302a:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    302c:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    302e:	693b      	ldr	r3, [r7, #16]
    3030:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    3032:	683b      	ldr	r3, [r7, #0]
    3034:	222a      	movs	r2, #42	; 0x2a
    3036:	5c9a      	ldrb	r2, [r3, r2]
    3038:	693b      	ldr	r3, [r7, #16]
    303a:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    303c:	693b      	ldr	r3, [r7, #16]
    303e:	220f      	movs	r2, #15
    3040:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    3042:	683b      	ldr	r3, [r7, #0]
    3044:	2224      	movs	r2, #36	; 0x24
    3046:	5c9b      	ldrb	r3, [r3, r2]
    3048:	2b00      	cmp	r3, #0
    304a:	d01e      	beq.n	308a <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    304c:	683b      	ldr	r3, [r7, #0]
    304e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    3050:	4a1f      	ldr	r2, [pc, #124]	; (30d0 <_adc_set_config+0x518>)
    3052:	4293      	cmp	r3, r2
    3054:	d901      	bls.n	305a <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    3056:	2317      	movs	r3, #23
    3058:	e031      	b.n	30be <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    305a:	683b      	ldr	r3, [r7, #0]
    305c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    305e:	693b      	ldr	r3, [r7, #16]
    3060:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    3062:	683b      	ldr	r3, [r7, #0]
    3064:	2228      	movs	r2, #40	; 0x28
    3066:	5e9b      	ldrsh	r3, [r3, r2]
    3068:	4a1a      	ldr	r2, [pc, #104]	; (30d4 <_adc_set_config+0x51c>)
    306a:	4293      	cmp	r3, r2
    306c:	dc05      	bgt.n	307a <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    306e:	683b      	ldr	r3, [r7, #0]
    3070:	2228      	movs	r2, #40	; 0x28
    3072:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    3074:	4a18      	ldr	r2, [pc, #96]	; (30d8 <_adc_set_config+0x520>)
    3076:	4293      	cmp	r3, r2
    3078:	da01      	bge.n	307e <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    307a:	2317      	movs	r3, #23
    307c:	e01f      	b.n	30be <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    307e:	683b      	ldr	r3, [r7, #0]
    3080:	2228      	movs	r2, #40	; 0x28
    3082:	5e9b      	ldrsh	r3, [r3, r2]
    3084:	b29a      	uxth	r2, r3
    3086:	693b      	ldr	r3, [r7, #16]
    3088:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    308a:	4b14      	ldr	r3, [pc, #80]	; (30dc <_adc_set_config+0x524>)
    308c:	681b      	ldr	r3, [r3, #0]
    308e:	08db      	lsrs	r3, r3, #3
    3090:	b29b      	uxth	r3, r3
    3092:	021b      	lsls	r3, r3, #8
    3094:	b29a      	uxth	r2, r3
    3096:	23e0      	movs	r3, #224	; 0xe0
    3098:	00db      	lsls	r3, r3, #3
    309a:	4013      	ands	r3, r2
    309c:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    309e:	4b10      	ldr	r3, [pc, #64]	; (30e0 <_adc_set_config+0x528>)
    30a0:	685c      	ldr	r4, [r3, #4]
    30a2:	681b      	ldr	r3, [r3, #0]
    30a4:	0161      	lsls	r1, r4, #5
    30a6:	0edd      	lsrs	r5, r3, #27
    30a8:	430d      	orrs	r5, r1
    30aa:	0ee6      	lsrs	r6, r4, #27
    30ac:	b2ab      	uxth	r3, r5
    30ae:	21ff      	movs	r1, #255	; 0xff
    30b0:	400b      	ands	r3, r1
    30b2:	b29b      	uxth	r3, r3
			) |
    30b4:	4313      	orrs	r3, r2
    30b6:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    30b8:	693b      	ldr	r3, [r7, #16]
    30ba:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    30bc:	2300      	movs	r3, #0
}
    30be:	0018      	movs	r0, r3
    30c0:	46bd      	mov	sp, r7
    30c2:	b009      	add	sp, #36	; 0x24
    30c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	0000ffff 	.word	0x0000ffff
    30cc:	00002a6d 	.word	0x00002a6d
    30d0:	00000fff 	.word	0x00000fff
    30d4:	000007ff 	.word	0x000007ff
    30d8:	fffff800 	.word	0xfffff800
    30dc:	00806024 	.word	0x00806024
    30e0:	00806020 	.word	0x00806020

000030e4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b084      	sub	sp, #16
    30e8:	af00      	add	r7, sp, #0
    30ea:	60f8      	str	r0, [r7, #12]
    30ec:	60b9      	str	r1, [r7, #8]
    30ee:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	68ba      	ldr	r2, [r7, #8]
    30f4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    30f6:	2380      	movs	r3, #128	; 0x80
    30f8:	025b      	lsls	r3, r3, #9
    30fa:	0019      	movs	r1, r3
    30fc:	2002      	movs	r0, #2
    30fe:	4b15      	ldr	r3, [pc, #84]	; (3154 <adc_init+0x70>)
    3100:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    3102:	68bb      	ldr	r3, [r7, #8]
    3104:	781b      	ldrb	r3, [r3, #0]
    3106:	b2db      	uxtb	r3, r3
    3108:	001a      	movs	r2, r3
    310a:	2301      	movs	r3, #1
    310c:	4013      	ands	r3, r2
    310e:	d001      	beq.n	3114 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3110:	2305      	movs	r3, #5
    3112:	e01a      	b.n	314a <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    3114:	68bb      	ldr	r3, [r7, #8]
    3116:	781b      	ldrb	r3, [r3, #0]
    3118:	b2db      	uxtb	r3, r3
    311a:	001a      	movs	r2, r3
    311c:	2302      	movs	r3, #2
    311e:	4013      	ands	r3, r2
    3120:	d001      	beq.n	3126 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    3122:	231c      	movs	r3, #28
    3124:	e011      	b.n	314a <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	785a      	ldrb	r2, [r3, #1]
    312a:	68fb      	ldr	r3, [r7, #12]
    312c:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	791b      	ldrb	r3, [r3, #4]
    3132:	2b00      	cmp	r3, #0
    3134:	d102      	bne.n	313c <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    3136:	2001      	movs	r0, #1
    3138:	4b07      	ldr	r3, [pc, #28]	; (3158 <adc_init+0x74>)
    313a:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    313c:	687a      	ldr	r2, [r7, #4]
    313e:	68fb      	ldr	r3, [r7, #12]
    3140:	0011      	movs	r1, r2
    3142:	0018      	movs	r0, r3
    3144:	4b05      	ldr	r3, [pc, #20]	; (315c <adc_init+0x78>)
    3146:	4798      	blx	r3
    3148:	0003      	movs	r3, r0
}
    314a:	0018      	movs	r0, r3
    314c:	46bd      	mov	sp, r7
    314e:	b004      	add	sp, #16
    3150:	bd80      	pop	{r7, pc}
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	000029a9 	.word	0x000029a9
    3158:	00002a2d 	.word	0x00002a2d
    315c:	00002bb9 	.word	0x00002bb9

00003160 <system_gclk_chan_get_config_defaults>:
{
    3160:	b580      	push	{r7, lr}
    3162:	b082      	sub	sp, #8
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	2200      	movs	r2, #0
    316c:	701a      	strb	r2, [r3, #0]
}
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	46bd      	mov	sp, r7
    3172:	b002      	add	sp, #8
    3174:	bd80      	pop	{r7, pc}
	...

00003178 <system_apb_clock_set_mask>:
{
    3178:	b580      	push	{r7, lr}
    317a:	b082      	sub	sp, #8
    317c:	af00      	add	r7, sp, #0
    317e:	0002      	movs	r2, r0
    3180:	6039      	str	r1, [r7, #0]
    3182:	1dfb      	adds	r3, r7, #7
    3184:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3186:	1dfb      	adds	r3, r7, #7
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	2b01      	cmp	r3, #1
    318c:	d00a      	beq.n	31a4 <system_apb_clock_set_mask+0x2c>
    318e:	2b02      	cmp	r3, #2
    3190:	d00f      	beq.n	31b2 <system_apb_clock_set_mask+0x3a>
    3192:	2b00      	cmp	r3, #0
    3194:	d114      	bne.n	31c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3196:	4b0e      	ldr	r3, [pc, #56]	; (31d0 <system_apb_clock_set_mask+0x58>)
    3198:	4a0d      	ldr	r2, [pc, #52]	; (31d0 <system_apb_clock_set_mask+0x58>)
    319a:	6991      	ldr	r1, [r2, #24]
    319c:	683a      	ldr	r2, [r7, #0]
    319e:	430a      	orrs	r2, r1
    31a0:	619a      	str	r2, [r3, #24]
			break;
    31a2:	e00f      	b.n	31c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    31a4:	4b0a      	ldr	r3, [pc, #40]	; (31d0 <system_apb_clock_set_mask+0x58>)
    31a6:	4a0a      	ldr	r2, [pc, #40]	; (31d0 <system_apb_clock_set_mask+0x58>)
    31a8:	69d1      	ldr	r1, [r2, #28]
    31aa:	683a      	ldr	r2, [r7, #0]
    31ac:	430a      	orrs	r2, r1
    31ae:	61da      	str	r2, [r3, #28]
			break;
    31b0:	e008      	b.n	31c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    31b2:	4b07      	ldr	r3, [pc, #28]	; (31d0 <system_apb_clock_set_mask+0x58>)
    31b4:	4a06      	ldr	r2, [pc, #24]	; (31d0 <system_apb_clock_set_mask+0x58>)
    31b6:	6a11      	ldr	r1, [r2, #32]
    31b8:	683a      	ldr	r2, [r7, #0]
    31ba:	430a      	orrs	r2, r1
    31bc:	621a      	str	r2, [r3, #32]
			break;
    31be:	e001      	b.n	31c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    31c0:	2317      	movs	r3, #23
    31c2:	e000      	b.n	31c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    31c4:	2300      	movs	r3, #0
}
    31c6:	0018      	movs	r0, r3
    31c8:	46bd      	mov	sp, r7
    31ca:	b002      	add	sp, #8
    31cc:	bd80      	pop	{r7, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	40000400 	.word	0x40000400

000031d4 <system_pinmux_get_config_defaults>:
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b082      	sub	sp, #8
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	2280      	movs	r2, #128	; 0x80
    31e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	2200      	movs	r2, #0
    31e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	2201      	movs	r2, #1
    31ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	2200      	movs	r2, #0
    31f2:	70da      	strb	r2, [r3, #3]
}
    31f4:	46c0      	nop			; (mov r8, r8)
    31f6:	46bd      	mov	sp, r7
    31f8:	b002      	add	sp, #8
    31fa:	bd80      	pop	{r7, pc}

000031fc <system_is_debugger_present>:
{
    31fc:	b580      	push	{r7, lr}
    31fe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3200:	4b05      	ldr	r3, [pc, #20]	; (3218 <system_is_debugger_present+0x1c>)
    3202:	789b      	ldrb	r3, [r3, #2]
    3204:	b2db      	uxtb	r3, r3
    3206:	001a      	movs	r2, r3
    3208:	2302      	movs	r3, #2
    320a:	4013      	ands	r3, r2
    320c:	1e5a      	subs	r2, r3, #1
    320e:	4193      	sbcs	r3, r2
    3210:	b2db      	uxtb	r3, r3
}
    3212:	0018      	movs	r0, r3
    3214:	46bd      	mov	sp, r7
    3216:	bd80      	pop	{r7, pc}
    3218:	41002000 	.word	0x41002000

0000321c <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    321c:	b580      	push	{r7, lr}
    321e:	b084      	sub	sp, #16
    3220:	af00      	add	r7, sp, #0
    3222:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3224:	687b      	ldr	r3, [r7, #4]
    3226:	681b      	ldr	r3, [r3, #0]
    3228:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    322a:	68fb      	ldr	r3, [r7, #12]
    322c:	69db      	ldr	r3, [r3, #28]
    322e:	2207      	movs	r2, #7
    3230:	4013      	ands	r3, r2
    3232:	1e5a      	subs	r2, r3, #1
    3234:	4193      	sbcs	r3, r2
    3236:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    3238:	0018      	movs	r0, r3
    323a:	46bd      	mov	sp, r7
    323c:	b004      	add	sp, #16
    323e:	bd80      	pop	{r7, pc}

00003240 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    3240:	b580      	push	{r7, lr}
    3242:	b082      	sub	sp, #8
    3244:	af00      	add	r7, sp, #0
    3246:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3248:	46c0      	nop			; (mov r8, r8)
    324a:	687b      	ldr	r3, [r7, #4]
    324c:	0018      	movs	r0, r3
    324e:	4b04      	ldr	r3, [pc, #16]	; (3260 <_i2c_master_wait_for_sync+0x20>)
    3250:	4798      	blx	r3
    3252:	1e03      	subs	r3, r0, #0
    3254:	d1f9      	bne.n	324a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	46bd      	mov	sp, r7
    325a:	b002      	add	sp, #8
    325c:	bd80      	pop	{r7, pc}
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	0000321d 	.word	0x0000321d

00003264 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    3264:	b5f0      	push	{r4, r5, r6, r7, lr}
    3266:	b097      	sub	sp, #92	; 0x5c
    3268:	af00      	add	r7, sp, #0
    326a:	6178      	str	r0, [r7, #20]
    326c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    326e:	2300      	movs	r3, #0
    3270:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    3272:	2300      	movs	r3, #0
    3274:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    3276:	2300      	movs	r3, #0
    3278:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    327a:	233b      	movs	r3, #59	; 0x3b
    327c:	2210      	movs	r2, #16
    327e:	4694      	mov	ip, r2
    3280:	44bc      	add	ip, r7
    3282:	4463      	add	r3, ip
    3284:	2200      	movs	r2, #0
    3286:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3288:	697b      	ldr	r3, [r7, #20]
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    328e:	697b      	ldr	r3, [r7, #20]
    3290:	681b      	ldr	r3, [r3, #0]
    3292:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3294:	2323      	movs	r3, #35	; 0x23
    3296:	2210      	movs	r2, #16
    3298:	18ba      	adds	r2, r7, r2
    329a:	18d4      	adds	r4, r2, r3
    329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    329e:	0018      	movs	r0, r3
    32a0:	4bc0      	ldr	r3, [pc, #768]	; (35a4 <_i2c_master_set_config+0x340>)
    32a2:	4798      	blx	r3
    32a4:	0003      	movs	r3, r0
    32a6:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    32a8:	230c      	movs	r3, #12
    32aa:	2210      	movs	r2, #16
    32ac:	4694      	mov	ip, r2
    32ae:	44bc      	add	ip, r7
    32b0:	4463      	add	r3, ip
    32b2:	0018      	movs	r0, r3
    32b4:	4bbc      	ldr	r3, [pc, #752]	; (35a8 <_i2c_master_set_config+0x344>)
    32b6:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    32b8:	693b      	ldr	r3, [r7, #16]
    32ba:	69db      	ldr	r3, [r3, #28]
    32bc:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    32be:	693b      	ldr	r3, [r7, #16]
    32c0:	6a1b      	ldr	r3, [r3, #32]
    32c2:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    32c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    32c6:	2b00      	cmp	r3, #0
    32c8:	d106      	bne.n	32d8 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    32ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32cc:	2100      	movs	r1, #0
    32ce:	0018      	movs	r0, r3
    32d0:	4bb6      	ldr	r3, [pc, #728]	; (35ac <_i2c_master_set_config+0x348>)
    32d2:	4798      	blx	r3
    32d4:	0003      	movs	r3, r0
    32d6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    32d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    32da:	b2da      	uxtb	r2, r3
    32dc:	230c      	movs	r3, #12
    32de:	2110      	movs	r1, #16
    32e0:	468c      	mov	ip, r1
    32e2:	44bc      	add	ip, r7
    32e4:	4463      	add	r3, ip
    32e6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    32e8:	230c      	movs	r3, #12
    32ea:	2210      	movs	r2, #16
    32ec:	4694      	mov	ip, r2
    32ee:	44bc      	add	ip, r7
    32f0:	4463      	add	r3, ip
    32f2:	2202      	movs	r2, #2
    32f4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    32f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    32f8:	0c1b      	lsrs	r3, r3, #16
    32fa:	b2db      	uxtb	r3, r3
    32fc:	220c      	movs	r2, #12
    32fe:	2110      	movs	r1, #16
    3300:	468c      	mov	ip, r1
    3302:	44bc      	add	ip, r7
    3304:	4462      	add	r2, ip
    3306:	0011      	movs	r1, r2
    3308:	0018      	movs	r0, r3
    330a:	4ba9      	ldr	r3, [pc, #676]	; (35b0 <_i2c_master_set_config+0x34c>)
    330c:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    330e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3310:	2b00      	cmp	r3, #0
    3312:	d106      	bne.n	3322 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3316:	2101      	movs	r1, #1
    3318:	0018      	movs	r0, r3
    331a:	4ba4      	ldr	r3, [pc, #656]	; (35ac <_i2c_master_set_config+0x348>)
    331c:	4798      	blx	r3
    331e:	0003      	movs	r3, r0
    3320:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    3322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3324:	b2da      	uxtb	r2, r3
    3326:	230c      	movs	r3, #12
    3328:	2110      	movs	r1, #16
    332a:	468c      	mov	ip, r1
    332c:	44bc      	add	ip, r7
    332e:	4463      	add	r3, ip
    3330:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3332:	230c      	movs	r3, #12
    3334:	2210      	movs	r2, #16
    3336:	4694      	mov	ip, r2
    3338:	44bc      	add	ip, r7
    333a:	4463      	add	r3, ip
    333c:	2202      	movs	r2, #2
    333e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3342:	0c1b      	lsrs	r3, r3, #16
    3344:	b2db      	uxtb	r3, r3
    3346:	220c      	movs	r2, #12
    3348:	2110      	movs	r1, #16
    334a:	468c      	mov	ip, r1
    334c:	44bc      	add	ip, r7
    334e:	4462      	add	r2, ip
    3350:	0011      	movs	r1, r2
    3352:	0018      	movs	r0, r3
    3354:	4b96      	ldr	r3, [pc, #600]	; (35b0 <_i2c_master_set_config+0x34c>)
    3356:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3358:	693b      	ldr	r3, [r7, #16]
    335a:	8a9a      	ldrh	r2, [r3, #20]
    335c:	697b      	ldr	r3, [r7, #20]
    335e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3360:	693b      	ldr	r3, [r7, #16]
    3362:	8ada      	ldrh	r2, [r3, #22]
    3364:	697b      	ldr	r3, [r7, #20]
    3366:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3368:	693b      	ldr	r3, [r7, #16]
    336a:	7e1b      	ldrb	r3, [r3, #24]
    336c:	2b00      	cmp	r3, #0
    336e:	d103      	bne.n	3378 <_i2c_master_set_config+0x114>
    3370:	4b90      	ldr	r3, [pc, #576]	; (35b4 <_i2c_master_set_config+0x350>)
    3372:	4798      	blx	r3
    3374:	1e03      	subs	r3, r0, #0
    3376:	d002      	beq.n	337e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3378:	2380      	movs	r3, #128	; 0x80
    337a:	657b      	str	r3, [r7, #84]	; 0x54
    337c:	e001      	b.n	3382 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    337e:	2300      	movs	r3, #0
    3380:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    3382:	693b      	ldr	r3, [r7, #16]
    3384:	691b      	ldr	r3, [r3, #16]
    3386:	2b00      	cmp	r3, #0
    3388:	d004      	beq.n	3394 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    338a:	693b      	ldr	r3, [r7, #16]
    338c:	691b      	ldr	r3, [r3, #16]
    338e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3390:	4313      	orrs	r3, r2
    3392:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    3394:	693b      	ldr	r3, [r7, #16]
    3396:	689b      	ldr	r3, [r3, #8]
    3398:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    339a:	4313      	orrs	r3, r2
    339c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    339e:	693b      	ldr	r3, [r7, #16]
    33a0:	2224      	movs	r2, #36	; 0x24
    33a2:	5c9b      	ldrb	r3, [r3, r2]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d004      	beq.n	33b2 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    33a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    33aa:	2280      	movs	r2, #128	; 0x80
    33ac:	05d2      	lsls	r2, r2, #23
    33ae:	4313      	orrs	r3, r2
    33b0:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    33b2:	693b      	ldr	r3, [r7, #16]
    33b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33b6:	2b00      	cmp	r3, #0
    33b8:	d004      	beq.n	33c4 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    33ba:	693b      	ldr	r3, [r7, #16]
    33bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    33c0:	4313      	orrs	r3, r2
    33c2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    33c4:	693b      	ldr	r3, [r7, #16]
    33c6:	222c      	movs	r2, #44	; 0x2c
    33c8:	5c9b      	ldrb	r3, [r3, r2]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d105      	bne.n	33da <_i2c_master_set_config+0x176>
    33ce:	693b      	ldr	r3, [r7, #16]
    33d0:	689a      	ldr	r2, [r3, #8]
    33d2:	2380      	movs	r3, #128	; 0x80
    33d4:	049b      	lsls	r3, r3, #18
    33d6:	429a      	cmp	r2, r3
    33d8:	d104      	bne.n	33e4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    33da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    33dc:	2280      	movs	r2, #128	; 0x80
    33de:	0512      	lsls	r2, r2, #20
    33e0:	4313      	orrs	r3, r2
    33e2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    33e4:	693b      	ldr	r3, [r7, #16]
    33e6:	222d      	movs	r2, #45	; 0x2d
    33e8:	5c9b      	ldrb	r3, [r3, r2]
    33ea:	2b00      	cmp	r3, #0
    33ec:	d004      	beq.n	33f8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    33ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    33f0:	2280      	movs	r2, #128	; 0x80
    33f2:	0412      	lsls	r2, r2, #16
    33f4:	4313      	orrs	r3, r2
    33f6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    33f8:	693b      	ldr	r3, [r7, #16]
    33fa:	222e      	movs	r2, #46	; 0x2e
    33fc:	5c9b      	ldrb	r3, [r3, r2]
    33fe:	2b00      	cmp	r3, #0
    3400:	d004      	beq.n	340c <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3404:	2280      	movs	r2, #128	; 0x80
    3406:	03d2      	lsls	r2, r2, #15
    3408:	4313      	orrs	r3, r2
    340a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    340e:	681a      	ldr	r2, [r3, #0]
    3410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3412:	431a      	orrs	r2, r3
    3414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3416:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    341a:	2280      	movs	r2, #128	; 0x80
    341c:	0052      	lsls	r2, r2, #1
    341e:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3420:	2323      	movs	r3, #35	; 0x23
    3422:	2210      	movs	r2, #16
    3424:	4694      	mov	ip, r2
    3426:	44bc      	add	ip, r7
    3428:	4463      	add	r3, ip
    342a:	781b      	ldrb	r3, [r3, #0]
    342c:	3314      	adds	r3, #20
    342e:	b2db      	uxtb	r3, r3
    3430:	0018      	movs	r0, r3
    3432:	4b61      	ldr	r3, [pc, #388]	; (35b8 <_i2c_master_set_config+0x354>)
    3434:	4798      	blx	r3
    3436:	0003      	movs	r3, r0
    3438:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    343a:	693b      	ldr	r3, [r7, #16]
    343c:	681b      	ldr	r3, [r3, #0]
    343e:	22fa      	movs	r2, #250	; 0xfa
    3440:	0092      	lsls	r2, r2, #2
    3442:	4353      	muls	r3, r2
    3444:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3446:	693b      	ldr	r3, [r7, #16]
    3448:	685b      	ldr	r3, [r3, #4]
    344a:	22fa      	movs	r2, #250	; 0xfa
    344c:	0092      	lsls	r2, r2, #2
    344e:	4353      	muls	r3, r2
    3450:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    3452:	693b      	ldr	r3, [r7, #16]
    3454:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3456:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    3458:	4b58      	ldr	r3, [pc, #352]	; (35bc <_i2c_master_set_config+0x358>)
    345a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    345c:	4798      	blx	r3
    345e:	0005      	movs	r5, r0
    3460:	000e      	movs	r6, r1
    3462:	4b56      	ldr	r3, [pc, #344]	; (35bc <_i2c_master_set_config+0x358>)
    3464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3466:	4798      	blx	r3
    3468:	60b8      	str	r0, [r7, #8]
    346a:	60f9      	str	r1, [r7, #12]
    346c:	4b53      	ldr	r3, [pc, #332]	; (35bc <_i2c_master_set_config+0x358>)
    346e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3470:	4798      	blx	r3
    3472:	4c53      	ldr	r4, [pc, #332]	; (35c0 <_i2c_master_set_config+0x35c>)
    3474:	4a53      	ldr	r2, [pc, #332]	; (35c4 <_i2c_master_set_config+0x360>)
    3476:	4b54      	ldr	r3, [pc, #336]	; (35c8 <_i2c_master_set_config+0x364>)
    3478:	47a0      	blx	r4
    347a:	0003      	movs	r3, r0
    347c:	000c      	movs	r4, r1
    347e:	603b      	str	r3, [r7, #0]
    3480:	607c      	str	r4, [r7, #4]
    3482:	4b4e      	ldr	r3, [pc, #312]	; (35bc <_i2c_master_set_config+0x358>)
    3484:	6a38      	ldr	r0, [r7, #32]
    3486:	4798      	blx	r3
    3488:	0002      	movs	r2, r0
    348a:	000b      	movs	r3, r1
    348c:	4c4c      	ldr	r4, [pc, #304]	; (35c0 <_i2c_master_set_config+0x35c>)
    348e:	6838      	ldr	r0, [r7, #0]
    3490:	6879      	ldr	r1, [r7, #4]
    3492:	47a0      	blx	r4
    3494:	0003      	movs	r3, r0
    3496:	000c      	movs	r4, r1
    3498:	0018      	movs	r0, r3
    349a:	0021      	movs	r1, r4
    349c:	4c4b      	ldr	r4, [pc, #300]	; (35cc <_i2c_master_set_config+0x368>)
    349e:	2200      	movs	r2, #0
    34a0:	4b4b      	ldr	r3, [pc, #300]	; (35d0 <_i2c_master_set_config+0x36c>)
    34a2:	47a0      	blx	r4
    34a4:	0003      	movs	r3, r0
    34a6:	000c      	movs	r4, r1
    34a8:	001a      	movs	r2, r3
    34aa:	0023      	movs	r3, r4
    34ac:	4c44      	ldr	r4, [pc, #272]	; (35c0 <_i2c_master_set_config+0x35c>)
    34ae:	68b8      	ldr	r0, [r7, #8]
    34b0:	68f9      	ldr	r1, [r7, #12]
    34b2:	47a0      	blx	r4
    34b4:	0003      	movs	r3, r0
    34b6:	000c      	movs	r4, r1
    34b8:	001a      	movs	r2, r3
    34ba:	0023      	movs	r3, r4
    34bc:	4c45      	ldr	r4, [pc, #276]	; (35d4 <_i2c_master_set_config+0x370>)
    34be:	0028      	movs	r0, r5
    34c0:	0031      	movs	r1, r6
    34c2:	47a0      	blx	r4
    34c4:	0003      	movs	r3, r0
    34c6:	000c      	movs	r4, r1
    34c8:	001d      	movs	r5, r3
    34ca:	0026      	movs	r6, r4
    34cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34ce:	005a      	lsls	r2, r3, #1
    34d0:	4b3a      	ldr	r3, [pc, #232]	; (35bc <_i2c_master_set_config+0x358>)
    34d2:	0010      	movs	r0, r2
    34d4:	4798      	blx	r3
    34d6:	0002      	movs	r2, r0
    34d8:	000b      	movs	r3, r1
    34da:	4c3c      	ldr	r4, [pc, #240]	; (35cc <_i2c_master_set_config+0x368>)
    34dc:	0028      	movs	r0, r5
    34de:	0031      	movs	r1, r6
    34e0:	47a0      	blx	r4
    34e2:	0003      	movs	r3, r0
    34e4:	000c      	movs	r4, r1
    34e6:	0018      	movs	r0, r3
    34e8:	0021      	movs	r1, r4
    34ea:	4c3a      	ldr	r4, [pc, #232]	; (35d4 <_i2c_master_set_config+0x370>)
    34ec:	2200      	movs	r2, #0
    34ee:	4b3a      	ldr	r3, [pc, #232]	; (35d8 <_i2c_master_set_config+0x374>)
    34f0:	47a0      	blx	r4
    34f2:	0003      	movs	r3, r0
    34f4:	000c      	movs	r4, r1
    34f6:	001d      	movs	r5, r3
    34f8:	0026      	movs	r6, r4
    34fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34fc:	005a      	lsls	r2, r3, #1
    34fe:	4b2f      	ldr	r3, [pc, #188]	; (35bc <_i2c_master_set_config+0x358>)
    3500:	0010      	movs	r0, r2
    3502:	4798      	blx	r3
    3504:	0002      	movs	r2, r0
    3506:	000b      	movs	r3, r1
    3508:	4c34      	ldr	r4, [pc, #208]	; (35dc <_i2c_master_set_config+0x378>)
    350a:	0028      	movs	r0, r5
    350c:	0031      	movs	r1, r6
    350e:	47a0      	blx	r4
    3510:	0003      	movs	r3, r0
    3512:	000c      	movs	r4, r1
    3514:	0019      	movs	r1, r3
    3516:	0022      	movs	r2, r4
    3518:	4b31      	ldr	r3, [pc, #196]	; (35e0 <_i2c_master_set_config+0x37c>)
    351a:	0008      	movs	r0, r1
    351c:	0011      	movs	r1, r2
    351e:	4798      	blx	r3
    3520:	0003      	movs	r3, r0
    3522:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    3524:	693b      	ldr	r3, [r7, #16]
    3526:	689a      	ldr	r2, [r3, #8]
    3528:	2380      	movs	r3, #128	; 0x80
    352a:	049b      	lsls	r3, r3, #18
    352c:	429a      	cmp	r2, r3
    352e:	d16a      	bne.n	3606 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3530:	4b22      	ldr	r3, [pc, #136]	; (35bc <_i2c_master_set_config+0x358>)
    3532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3534:	4798      	blx	r3
    3536:	4c25      	ldr	r4, [pc, #148]	; (35cc <_i2c_master_set_config+0x368>)
    3538:	0002      	movs	r2, r0
    353a:	000b      	movs	r3, r1
    353c:	47a0      	blx	r4
    353e:	0003      	movs	r3, r0
    3540:	000c      	movs	r4, r1
    3542:	001d      	movs	r5, r3
    3544:	0026      	movs	r6, r4
    3546:	4b1d      	ldr	r3, [pc, #116]	; (35bc <_i2c_master_set_config+0x358>)
    3548:	6a78      	ldr	r0, [r7, #36]	; 0x24
    354a:	4798      	blx	r3
    354c:	4c1c      	ldr	r4, [pc, #112]	; (35c0 <_i2c_master_set_config+0x35c>)
    354e:	2200      	movs	r2, #0
    3550:	4b24      	ldr	r3, [pc, #144]	; (35e4 <_i2c_master_set_config+0x380>)
    3552:	47a0      	blx	r4
    3554:	0003      	movs	r3, r0
    3556:	000c      	movs	r4, r1
    3558:	001a      	movs	r2, r3
    355a:	0023      	movs	r3, r4
    355c:	4c1f      	ldr	r4, [pc, #124]	; (35dc <_i2c_master_set_config+0x378>)
    355e:	0028      	movs	r0, r5
    3560:	0031      	movs	r1, r6
    3562:	47a0      	blx	r4
    3564:	0003      	movs	r3, r0
    3566:	000c      	movs	r4, r1
    3568:	0018      	movs	r0, r3
    356a:	0021      	movs	r1, r4
    356c:	4c19      	ldr	r4, [pc, #100]	; (35d4 <_i2c_master_set_config+0x370>)
    356e:	2200      	movs	r2, #0
    3570:	4b19      	ldr	r3, [pc, #100]	; (35d8 <_i2c_master_set_config+0x374>)
    3572:	47a0      	blx	r4
    3574:	0003      	movs	r3, r0
    3576:	000c      	movs	r4, r1
    3578:	0019      	movs	r1, r3
    357a:	0022      	movs	r2, r4
    357c:	4b18      	ldr	r3, [pc, #96]	; (35e0 <_i2c_master_set_config+0x37c>)
    357e:	0008      	movs	r0, r1
    3580:	0011      	movs	r1, r2
    3582:	4798      	blx	r3
    3584:	0003      	movs	r3, r0
    3586:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    3588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    358a:	2b00      	cmp	r3, #0
    358c:	d02e      	beq.n	35ec <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    358e:	4b16      	ldr	r3, [pc, #88]	; (35e8 <_i2c_master_set_config+0x384>)
    3590:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3594:	4798      	blx	r3
    3596:	0003      	movs	r3, r0
    3598:	1e9a      	subs	r2, r3, #2
    359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    359c:	1ad3      	subs	r3, r2, r3
    359e:	653b      	str	r3, [r7, #80]	; 0x50
    35a0:	e031      	b.n	3606 <_i2c_master_set_config+0x3a2>
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	000049d5 	.word	0x000049d5
    35a8:	000031d5 	.word	0x000031d5
    35ac:	00004819 	.word	0x00004819
    35b0:	00006b21 	.word	0x00006b21
    35b4:	000031fd 	.word	0x000031fd
    35b8:	00006959 	.word	0x00006959
    35bc:	0000e151 	.word	0x0000e151
    35c0:	0000d4f9 	.word	0x0000d4f9
    35c4:	e826d695 	.word	0xe826d695
    35c8:	3e112e0b 	.word	0x3e112e0b
    35cc:	0000c671 	.word	0x0000c671
    35d0:	40240000 	.word	0x40240000
    35d4:	0000d9f9 	.word	0x0000d9f9
    35d8:	3ff00000 	.word	0x3ff00000
    35dc:	0000cc91 	.word	0x0000cc91
    35e0:	0000e065 	.word	0x0000e065
    35e4:	40080000 	.word	0x40080000
    35e8:	0000bcb9 	.word	0x0000bcb9
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    35ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    35ee:	005a      	lsls	r2, r3, #1
    35f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35f2:	18d3      	adds	r3, r2, r3
    35f4:	1e5a      	subs	r2, r3, #1
    35f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    35f8:	0059      	lsls	r1, r3, #1
    35fa:	4b1d      	ldr	r3, [pc, #116]	; (3670 <_i2c_master_set_config+0x40c>)
    35fc:	0010      	movs	r0, r2
    35fe:	4798      	blx	r3
    3600:	0003      	movs	r3, r0
    3602:	3b01      	subs	r3, #1
    3604:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3608:	2bff      	cmp	r3, #255	; 0xff
    360a:	dc08      	bgt.n	361e <_i2c_master_set_config+0x3ba>
    360c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    360e:	2b00      	cmp	r3, #0
    3610:	db05      	blt.n	361e <_i2c_master_set_config+0x3ba>
    3612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3614:	2bff      	cmp	r3, #255	; 0xff
    3616:	dc02      	bgt.n	361e <_i2c_master_set_config+0x3ba>
    3618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    361a:	2b00      	cmp	r3, #0
    361c:	da06      	bge.n	362c <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    361e:	233b      	movs	r3, #59	; 0x3b
    3620:	2210      	movs	r2, #16
    3622:	4694      	mov	ip, r2
    3624:	44bc      	add	ip, r7
    3626:	4463      	add	r3, ip
    3628:	2240      	movs	r2, #64	; 0x40
    362a:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    362c:	233b      	movs	r3, #59	; 0x3b
    362e:	2210      	movs	r2, #16
    3630:	4694      	mov	ip, r2
    3632:	44bc      	add	ip, r7
    3634:	4463      	add	r3, ip
    3636:	781b      	ldrb	r3, [r3, #0]
    3638:	2b40      	cmp	r3, #64	; 0x40
    363a:	d00e      	beq.n	365a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    363e:	22ff      	movs	r2, #255	; 0xff
    3640:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3644:	041b      	lsls	r3, r3, #16
    3646:	0019      	movs	r1, r3
    3648:	23ff      	movs	r3, #255	; 0xff
    364a:	041b      	lsls	r3, r3, #16
    364c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    364e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3652:	0612      	lsls	r2, r2, #24
    3654:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3658:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    365a:	233b      	movs	r3, #59	; 0x3b
    365c:	2210      	movs	r2, #16
    365e:	4694      	mov	ip, r2
    3660:	44bc      	add	ip, r7
    3662:	4463      	add	r3, ip
    3664:	781b      	ldrb	r3, [r3, #0]
}
    3666:	0018      	movs	r0, r3
    3668:	46bd      	mov	sp, r7
    366a:	b017      	add	sp, #92	; 0x5c
    366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    366e:	46c0      	nop			; (mov r8, r8)
    3670:	0000bcb9 	.word	0x0000bcb9

00003674 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3674:	b590      	push	{r4, r7, lr}
    3676:	b08b      	sub	sp, #44	; 0x2c
    3678:	af00      	add	r7, sp, #0
    367a:	60f8      	str	r0, [r7, #12]
    367c:	60b9      	str	r1, [r7, #8]
    367e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    3680:	68fb      	ldr	r3, [r7, #12]
    3682:	68ba      	ldr	r2, [r7, #8]
    3684:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3686:	68fb      	ldr	r3, [r7, #12]
    3688:	681b      	ldr	r3, [r3, #0]
    368a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    368c:	68fb      	ldr	r3, [r7, #12]
    368e:	681b      	ldr	r3, [r3, #0]
    3690:	0018      	movs	r0, r3
    3692:	4b3b      	ldr	r3, [pc, #236]	; (3780 <i2c_master_init+0x10c>)
    3694:	4798      	blx	r3
    3696:	0003      	movs	r3, r0
    3698:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    369a:	6a3b      	ldr	r3, [r7, #32]
    369c:	3302      	adds	r3, #2
    369e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    36a0:	6a3b      	ldr	r3, [r7, #32]
    36a2:	3314      	adds	r3, #20
    36a4:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    36a6:	2201      	movs	r2, #1
    36a8:	69fb      	ldr	r3, [r7, #28]
    36aa:	409a      	lsls	r2, r3
    36ac:	0013      	movs	r3, r2
    36ae:	0019      	movs	r1, r3
    36b0:	2002      	movs	r0, #2
    36b2:	4b34      	ldr	r3, [pc, #208]	; (3784 <i2c_master_init+0x110>)
    36b4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    36b6:	2314      	movs	r3, #20
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	0018      	movs	r0, r3
    36bc:	4b32      	ldr	r3, [pc, #200]	; (3788 <i2c_master_init+0x114>)
    36be:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	7b1a      	ldrb	r2, [r3, #12]
    36c4:	2314      	movs	r3, #20
    36c6:	18fb      	adds	r3, r7, r3
    36c8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    36ca:	69bb      	ldr	r3, [r7, #24]
    36cc:	b2db      	uxtb	r3, r3
    36ce:	2214      	movs	r2, #20
    36d0:	18ba      	adds	r2, r7, r2
    36d2:	0011      	movs	r1, r2
    36d4:	0018      	movs	r0, r3
    36d6:	4b2d      	ldr	r3, [pc, #180]	; (378c <i2c_master_init+0x118>)
    36d8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    36da:	69bb      	ldr	r3, [r7, #24]
    36dc:	b2db      	uxtb	r3, r3
    36de:	0018      	movs	r0, r3
    36e0:	4b2b      	ldr	r3, [pc, #172]	; (3790 <i2c_master_init+0x11c>)
    36e2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    36e4:	687b      	ldr	r3, [r7, #4]
    36e6:	7b1b      	ldrb	r3, [r3, #12]
    36e8:	2100      	movs	r1, #0
    36ea:	0018      	movs	r0, r3
    36ec:	4b29      	ldr	r3, [pc, #164]	; (3794 <i2c_master_init+0x120>)
    36ee:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    36f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36f2:	681b      	ldr	r3, [r3, #0]
    36f4:	2202      	movs	r2, #2
    36f6:	4013      	ands	r3, r2
    36f8:	d001      	beq.n	36fe <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    36fa:	231c      	movs	r3, #28
    36fc:	e03b      	b.n	3776 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    36fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	2201      	movs	r2, #1
    3704:	4013      	ands	r3, r2
    3706:	d001      	beq.n	370c <i2c_master_init+0x98>
		return STATUS_BUSY;
    3708:	2305      	movs	r3, #5
    370a:	e034      	b.n	3776 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	681b      	ldr	r3, [r3, #0]
    3710:	2217      	movs	r2, #23
    3712:	18bc      	adds	r4, r7, r2
    3714:	0018      	movs	r0, r3
    3716:	4b1a      	ldr	r3, [pc, #104]	; (3780 <i2c_master_init+0x10c>)
    3718:	4798      	blx	r3
    371a:	0003      	movs	r3, r0
    371c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    371e:	4a1e      	ldr	r2, [pc, #120]	; (3798 <i2c_master_init+0x124>)
    3720:	2317      	movs	r3, #23
    3722:	18fb      	adds	r3, r7, r3
    3724:	781b      	ldrb	r3, [r3, #0]
    3726:	0011      	movs	r1, r2
    3728:	0018      	movs	r0, r3
    372a:	4b1c      	ldr	r3, [pc, #112]	; (379c <i2c_master_init+0x128>)
    372c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    372e:	2317      	movs	r3, #23
    3730:	18fb      	adds	r3, r7, r3
    3732:	781a      	ldrb	r2, [r3, #0]
    3734:	4b1a      	ldr	r3, [pc, #104]	; (37a0 <i2c_master_init+0x12c>)
    3736:	0092      	lsls	r2, r2, #2
    3738:	68f9      	ldr	r1, [r7, #12]
    373a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    373c:	68fb      	ldr	r3, [r7, #12]
    373e:	2200      	movs	r2, #0
    3740:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    3742:	68fb      	ldr	r3, [r7, #12]
    3744:	2200      	movs	r2, #0
    3746:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    3748:	68fb      	ldr	r3, [r7, #12]
    374a:	2200      	movs	r2, #0
    374c:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    374e:	68fb      	ldr	r3, [r7, #12]
    3750:	2200      	movs	r2, #0
    3752:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    3754:	68fb      	ldr	r3, [r7, #12]
    3756:	2225      	movs	r2, #37	; 0x25
    3758:	2100      	movs	r1, #0
    375a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    375c:	68fb      	ldr	r3, [r7, #12]
    375e:	2200      	movs	r2, #0
    3760:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    3762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3764:	2214      	movs	r2, #20
    3766:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    3768:	687a      	ldr	r2, [r7, #4]
    376a:	68fb      	ldr	r3, [r7, #12]
    376c:	0011      	movs	r1, r2
    376e:	0018      	movs	r0, r3
    3770:	4b0c      	ldr	r3, [pc, #48]	; (37a4 <i2c_master_init+0x130>)
    3772:	4798      	blx	r3
    3774:	0003      	movs	r3, r0
}
    3776:	0018      	movs	r0, r3
    3778:	46bd      	mov	sp, r7
    377a:	b00b      	add	sp, #44	; 0x2c
    377c:	bd90      	pop	{r4, r7, pc}
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	000049d5 	.word	0x000049d5
    3784:	00003179 	.word	0x00003179
    3788:	00003161 	.word	0x00003161
    378c:	00006835 	.word	0x00006835
    3790:	00006879 	.word	0x00006879
    3794:	0000478d 	.word	0x0000478d
    3798:	000041e5 	.word	0x000041e5
    379c:	00005851 	.word	0x00005851
    37a0:	2000044c 	.word	0x2000044c
    37a4:	00003265 	.word	0x00003265

000037a8 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	b084      	sub	sp, #16
    37ac:	af00      	add	r7, sp, #0
    37ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	681b      	ldr	r3, [r3, #0]
    37b4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	7e1b      	ldrb	r3, [r3, #24]
    37ba:	b2db      	uxtb	r3, r3
    37bc:	001a      	movs	r2, r3
    37be:	2302      	movs	r3, #2
    37c0:	4013      	ands	r3, r2
    37c2:	d00b      	beq.n	37dc <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    37c4:	68fb      	ldr	r3, [r7, #12]
    37c6:	2202      	movs	r2, #2
    37c8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    37ca:	68fb      	ldr	r3, [r7, #12]
    37cc:	8b5b      	ldrh	r3, [r3, #26]
    37ce:	b29b      	uxth	r3, r3
    37d0:	001a      	movs	r2, r3
    37d2:	2302      	movs	r3, #2
    37d4:	4013      	ands	r3, r2
    37d6:	d011      	beq.n	37fc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    37d8:	2341      	movs	r3, #65	; 0x41
    37da:	e010      	b.n	37fe <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    37dc:	68fb      	ldr	r3, [r7, #12]
    37de:	8b5b      	ldrh	r3, [r3, #26]
    37e0:	b29b      	uxth	r3, r3
    37e2:	001a      	movs	r2, r3
    37e4:	2304      	movs	r3, #4
    37e6:	4013      	ands	r3, r2
    37e8:	d008      	beq.n	37fc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    37ea:	68fb      	ldr	r3, [r7, #12]
    37ec:	685b      	ldr	r3, [r3, #4]
    37ee:	22c0      	movs	r2, #192	; 0xc0
    37f0:	0292      	lsls	r2, r2, #10
    37f2:	431a      	orrs	r2, r3
    37f4:	68fb      	ldr	r3, [r7, #12]
    37f6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    37f8:	2318      	movs	r3, #24
    37fa:	e000      	b.n	37fe <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    37fc:	2300      	movs	r3, #0
}
    37fe:	0018      	movs	r0, r3
    3800:	46bd      	mov	sp, r7
    3802:	b004      	add	sp, #16
    3804:	bd80      	pop	{r7, pc}

00003806 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3806:	b580      	push	{r7, lr}
    3808:	b084      	sub	sp, #16
    380a:	af00      	add	r7, sp, #0
    380c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    380e:	687b      	ldr	r3, [r7, #4]
    3810:	681b      	ldr	r3, [r3, #0]
    3812:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3814:	230e      	movs	r3, #14
    3816:	18fb      	adds	r3, r7, r3
    3818:	2200      	movs	r2, #0
    381a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    381c:	e00f      	b.n	383e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    381e:	230e      	movs	r3, #14
    3820:	18fb      	adds	r3, r7, r3
    3822:	220e      	movs	r2, #14
    3824:	18ba      	adds	r2, r7, r2
    3826:	8812      	ldrh	r2, [r2, #0]
    3828:	3201      	adds	r2, #1
    382a:	801a      	strh	r2, [r3, #0]
    382c:	687b      	ldr	r3, [r7, #4]
    382e:	891b      	ldrh	r3, [r3, #8]
    3830:	220e      	movs	r2, #14
    3832:	18ba      	adds	r2, r7, r2
    3834:	8812      	ldrh	r2, [r2, #0]
    3836:	429a      	cmp	r2, r3
    3838:	d301      	bcc.n	383e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    383a:	2312      	movs	r3, #18
    383c:	e00e      	b.n	385c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    383e:	68bb      	ldr	r3, [r7, #8]
    3840:	7e1b      	ldrb	r3, [r3, #24]
    3842:	b2db      	uxtb	r3, r3
    3844:	001a      	movs	r2, r3
    3846:	2301      	movs	r3, #1
    3848:	4013      	ands	r3, r2
    384a:	d106      	bne.n	385a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    384c:	68bb      	ldr	r3, [r7, #8]
    384e:	7e1b      	ldrb	r3, [r3, #24]
    3850:	b2db      	uxtb	r3, r3
    3852:	001a      	movs	r2, r3
    3854:	2302      	movs	r3, #2
    3856:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3858:	d0e1      	beq.n	381e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    385a:	2300      	movs	r3, #0
}
    385c:	0018      	movs	r0, r3
    385e:	46bd      	mov	sp, r7
    3860:	b004      	add	sp, #16
    3862:	bd80      	pop	{r7, pc}

00003864 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    3864:	b590      	push	{r4, r7, lr}
    3866:	b085      	sub	sp, #20
    3868:	af00      	add	r7, sp, #0
    386a:	6078      	str	r0, [r7, #4]
    386c:	000a      	movs	r2, r1
    386e:	1cfb      	adds	r3, r7, #3
    3870:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3878:	68fb      	ldr	r3, [r7, #12]
    387a:	685b      	ldr	r3, [r3, #4]
    387c:	2280      	movs	r2, #128	; 0x80
    387e:	02d2      	lsls	r2, r2, #11
    3880:	431a      	orrs	r2, r3
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3886:	1cfb      	adds	r3, r7, #3
    3888:	781a      	ldrb	r2, [r3, #0]
    388a:	68fb      	ldr	r3, [r7, #12]
    388c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    388e:	230b      	movs	r3, #11
    3890:	18fc      	adds	r4, r7, r3
    3892:	687b      	ldr	r3, [r7, #4]
    3894:	0018      	movs	r0, r3
    3896:	4b07      	ldr	r3, [pc, #28]	; (38b4 <_i2c_master_send_hs_master_code+0x50>)
    3898:	4798      	blx	r3
    389a:	0003      	movs	r3, r0
    389c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    389e:	68fb      	ldr	r3, [r7, #12]
    38a0:	2201      	movs	r2, #1
    38a2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    38a4:	230b      	movs	r3, #11
    38a6:	18fb      	adds	r3, r7, r3
    38a8:	781b      	ldrb	r3, [r3, #0]
}
    38aa:	0018      	movs	r0, r3
    38ac:	46bd      	mov	sp, r7
    38ae:	b005      	add	sp, #20
    38b0:	bd90      	pop	{r4, r7, pc}
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	00003807 	.word	0x00003807

000038b8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    38b8:	b590      	push	{r4, r7, lr}
    38ba:	b087      	sub	sp, #28
    38bc:	af00      	add	r7, sp, #0
    38be:	6078      	str	r0, [r7, #4]
    38c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38c2:	687b      	ldr	r3, [r7, #4]
    38c4:	681b      	ldr	r3, [r3, #0]
    38c6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    38c8:	2314      	movs	r3, #20
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	683a      	ldr	r2, [r7, #0]
    38ce:	8852      	ldrh	r2, [r2, #2]
    38d0:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    38d2:	2312      	movs	r3, #18
    38d4:	18fb      	adds	r3, r7, r3
    38d6:	2200      	movs	r2, #0
    38d8:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    38da:	68fb      	ldr	r3, [r7, #12]
    38dc:	681b      	ldr	r3, [r3, #0]
    38de:	011b      	lsls	r3, r3, #4
    38e0:	0fdb      	lsrs	r3, r3, #31
    38e2:	b2db      	uxtb	r3, r3
    38e4:	001a      	movs	r2, r3
    38e6:	230b      	movs	r3, #11
    38e8:	18fb      	adds	r3, r7, r3
    38ea:	1e51      	subs	r1, r2, #1
    38ec:	418a      	sbcs	r2, r1
    38ee:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    38f0:	683b      	ldr	r3, [r7, #0]
    38f2:	7a5b      	ldrb	r3, [r3, #9]
    38f4:	2b00      	cmp	r3, #0
    38f6:	d006      	beq.n	3906 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    38f8:	683b      	ldr	r3, [r7, #0]
    38fa:	7a9a      	ldrb	r2, [r3, #10]
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	0011      	movs	r1, r2
    3900:	0018      	movs	r0, r3
    3902:	4b85      	ldr	r3, [pc, #532]	; (3b18 <_i2c_master_read_packet+0x260>)
    3904:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3906:	68fb      	ldr	r3, [r7, #12]
    3908:	685b      	ldr	r3, [r3, #4]
    390a:	4a84      	ldr	r2, [pc, #528]	; (3b1c <_i2c_master_read_packet+0x264>)
    390c:	401a      	ands	r2, r3
    390e:	68fb      	ldr	r3, [r7, #12]
    3910:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3912:	683b      	ldr	r3, [r7, #0]
    3914:	7a1b      	ldrb	r3, [r3, #8]
    3916:	2b00      	cmp	r3, #0
    3918:	d042      	beq.n	39a0 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    391a:	683b      	ldr	r3, [r7, #0]
    391c:	881b      	ldrh	r3, [r3, #0]
    391e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3920:	683b      	ldr	r3, [r7, #0]
    3922:	7a5b      	ldrb	r3, [r3, #9]
    3924:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    3926:	4313      	orrs	r3, r2
    3928:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    392a:	2380      	movs	r3, #128	; 0x80
    392c:	021b      	lsls	r3, r3, #8
    392e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    3930:	68fb      	ldr	r3, [r7, #12]
    3932:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    3934:	2317      	movs	r3, #23
    3936:	18fc      	adds	r4, r7, r3
    3938:	687b      	ldr	r3, [r7, #4]
    393a:	0018      	movs	r0, r3
    393c:	4b78      	ldr	r3, [pc, #480]	; (3b20 <_i2c_master_read_packet+0x268>)
    393e:	4798      	blx	r3
    3940:	0003      	movs	r3, r0
    3942:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3944:	68fb      	ldr	r3, [r7, #12]
    3946:	685b      	ldr	r3, [r3, #4]
    3948:	4a74      	ldr	r2, [pc, #464]	; (3b1c <_i2c_master_read_packet+0x264>)
    394a:	401a      	ands	r2, r3
    394c:	68fb      	ldr	r3, [r7, #12]
    394e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    3950:	2317      	movs	r3, #23
    3952:	18fb      	adds	r3, r7, r3
    3954:	781b      	ldrb	r3, [r3, #0]
    3956:	2b00      	cmp	r3, #0
    3958:	d107      	bne.n	396a <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    395a:	2317      	movs	r3, #23
    395c:	18fc      	adds	r4, r7, r3
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	0018      	movs	r0, r3
    3962:	4b70      	ldr	r3, [pc, #448]	; (3b24 <_i2c_master_read_packet+0x26c>)
    3964:	4798      	blx	r3
    3966:	0003      	movs	r3, r0
    3968:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    396a:	2317      	movs	r3, #23
    396c:	18fb      	adds	r3, r7, r3
    396e:	781b      	ldrb	r3, [r3, #0]
    3970:	2b00      	cmp	r3, #0
    3972:	d111      	bne.n	3998 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3974:	683b      	ldr	r3, [r7, #0]
    3976:	881b      	ldrh	r3, [r3, #0]
    3978:	0a1b      	lsrs	r3, r3, #8
    397a:	b29b      	uxth	r3, r3
    397c:	2278      	movs	r2, #120	; 0x78
    397e:	4313      	orrs	r3, r2
    3980:	b29b      	uxth	r3, r3
    3982:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	7a5b      	ldrb	r3, [r3, #9]
    3988:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    398a:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    398c:	2201      	movs	r2, #1
    398e:	4313      	orrs	r3, r2
    3990:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	625a      	str	r2, [r3, #36]	; 0x24
    3996:	e00f      	b.n	39b8 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    3998:	2317      	movs	r3, #23
    399a:	18fb      	adds	r3, r7, r3
    399c:	781b      	ldrb	r3, [r3, #0]
    399e:	e0b6      	b.n	3b0e <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    39a0:	683b      	ldr	r3, [r7, #0]
    39a2:	881b      	ldrh	r3, [r3, #0]
    39a4:	005b      	lsls	r3, r3, #1
    39a6:	2201      	movs	r2, #1
    39a8:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    39aa:	683b      	ldr	r3, [r7, #0]
    39ac:	7a5b      	ldrb	r3, [r3, #9]
    39ae:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    39b0:	4313      	orrs	r3, r2
    39b2:	001a      	movs	r2, r3
    39b4:	68fb      	ldr	r3, [r7, #12]
    39b6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    39b8:	2317      	movs	r3, #23
    39ba:	18fc      	adds	r4, r7, r3
    39bc:	687b      	ldr	r3, [r7, #4]
    39be:	0018      	movs	r0, r3
    39c0:	4b57      	ldr	r3, [pc, #348]	; (3b20 <_i2c_master_read_packet+0x268>)
    39c2:	4798      	blx	r3
    39c4:	0003      	movs	r3, r0
    39c6:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    39c8:	230b      	movs	r3, #11
    39ca:	18fb      	adds	r3, r7, r3
    39cc:	781b      	ldrb	r3, [r3, #0]
    39ce:	2b00      	cmp	r3, #0
    39d0:	d00b      	beq.n	39ea <_i2c_master_read_packet+0x132>
    39d2:	683b      	ldr	r3, [r7, #0]
    39d4:	885b      	ldrh	r3, [r3, #2]
    39d6:	2b01      	cmp	r3, #1
    39d8:	d107      	bne.n	39ea <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    39da:	68fb      	ldr	r3, [r7, #12]
    39dc:	685b      	ldr	r3, [r3, #4]
    39de:	2280      	movs	r2, #128	; 0x80
    39e0:	02d2      	lsls	r2, r2, #11
    39e2:	431a      	orrs	r2, r3
    39e4:	68fb      	ldr	r3, [r7, #12]
    39e6:	605a      	str	r2, [r3, #4]
    39e8:	e005      	b.n	39f6 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	685b      	ldr	r3, [r3, #4]
    39ee:	4a4b      	ldr	r2, [pc, #300]	; (3b1c <_i2c_master_read_packet+0x264>)
    39f0:	401a      	ands	r2, r3
    39f2:	68fb      	ldr	r3, [r7, #12]
    39f4:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    39f6:	2317      	movs	r3, #23
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d107      	bne.n	3a10 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    3a00:	2317      	movs	r3, #23
    3a02:	18fc      	adds	r4, r7, r3
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	0018      	movs	r0, r3
    3a08:	4b46      	ldr	r3, [pc, #280]	; (3b24 <_i2c_master_read_packet+0x26c>)
    3a0a:	4798      	blx	r3
    3a0c:	0003      	movs	r3, r0
    3a0e:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3a10:	2317      	movs	r3, #23
    3a12:	18fb      	adds	r3, r7, r3
    3a14:	781b      	ldrb	r3, [r3, #0]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d000      	beq.n	3a1c <_i2c_master_read_packet+0x164>
    3a1a:	e075      	b.n	3b08 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    3a1c:	e04b      	b.n	3ab6 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	8b5b      	ldrh	r3, [r3, #26]
    3a22:	b29b      	uxth	r3, r3
    3a24:	001a      	movs	r2, r3
    3a26:	2320      	movs	r3, #32
    3a28:	4013      	ands	r3, r2
    3a2a:	d101      	bne.n	3a30 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    3a2c:	2341      	movs	r3, #65	; 0x41
    3a2e:	e06e      	b.n	3b0e <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	7adb      	ldrb	r3, [r3, #11]
    3a34:	2b00      	cmp	r3, #0
    3a36:	d01e      	beq.n	3a76 <_i2c_master_read_packet+0x1be>
    3a38:	230b      	movs	r3, #11
    3a3a:	18fb      	adds	r3, r7, r3
    3a3c:	781b      	ldrb	r3, [r3, #0]
    3a3e:	2201      	movs	r2, #1
    3a40:	4053      	eors	r3, r2
    3a42:	b2db      	uxtb	r3, r3
    3a44:	2b00      	cmp	r3, #0
    3a46:	d004      	beq.n	3a52 <_i2c_master_read_packet+0x19a>
    3a48:	2314      	movs	r3, #20
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	881b      	ldrh	r3, [r3, #0]
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d009      	beq.n	3a66 <_i2c_master_read_packet+0x1ae>
    3a52:	230b      	movs	r3, #11
    3a54:	18fb      	adds	r3, r7, r3
    3a56:	781b      	ldrb	r3, [r3, #0]
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d00c      	beq.n	3a76 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3a5c:	2314      	movs	r3, #20
    3a5e:	18fb      	adds	r3, r7, r3
    3a60:	881b      	ldrh	r3, [r3, #0]
    3a62:	2b01      	cmp	r3, #1
    3a64:	d107      	bne.n	3a76 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	2280      	movs	r2, #128	; 0x80
    3a6c:	02d2      	lsls	r2, r2, #11
    3a6e:	431a      	orrs	r2, r3
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	605a      	str	r2, [r3, #4]
    3a74:	e01a      	b.n	3aac <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	0018      	movs	r0, r3
    3a7a:	4b2b      	ldr	r3, [pc, #172]	; (3b28 <_i2c_master_read_packet+0x270>)
    3a7c:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3a7e:	683b      	ldr	r3, [r7, #0]
    3a80:	685a      	ldr	r2, [r3, #4]
    3a82:	2312      	movs	r3, #18
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	881b      	ldrh	r3, [r3, #0]
    3a88:	2112      	movs	r1, #18
    3a8a:	1879      	adds	r1, r7, r1
    3a8c:	1c58      	adds	r0, r3, #1
    3a8e:	8008      	strh	r0, [r1, #0]
    3a90:	18d3      	adds	r3, r2, r3
    3a92:	68fa      	ldr	r2, [r7, #12]
    3a94:	2128      	movs	r1, #40	; 0x28
    3a96:	5c52      	ldrb	r2, [r2, r1]
    3a98:	b2d2      	uxtb	r2, r2
    3a9a:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    3a9c:	2317      	movs	r3, #23
    3a9e:	18fc      	adds	r4, r7, r3
    3aa0:	687b      	ldr	r3, [r7, #4]
    3aa2:	0018      	movs	r0, r3
    3aa4:	4b1e      	ldr	r3, [pc, #120]	; (3b20 <_i2c_master_read_packet+0x268>)
    3aa6:	4798      	blx	r3
    3aa8:	0003      	movs	r3, r0
    3aaa:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3aac:	2317      	movs	r3, #23
    3aae:	18fb      	adds	r3, r7, r3
    3ab0:	781b      	ldrb	r3, [r3, #0]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d109      	bne.n	3aca <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    3ab6:	2314      	movs	r3, #20
    3ab8:	18fb      	adds	r3, r7, r3
    3aba:	881b      	ldrh	r3, [r3, #0]
    3abc:	2214      	movs	r2, #20
    3abe:	18ba      	adds	r2, r7, r2
    3ac0:	1e59      	subs	r1, r3, #1
    3ac2:	8011      	strh	r1, [r2, #0]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d1aa      	bne.n	3a1e <_i2c_master_read_packet+0x166>
    3ac8:	e000      	b.n	3acc <_i2c_master_read_packet+0x214>
				break;
    3aca:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	7a9b      	ldrb	r3, [r3, #10]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d00a      	beq.n	3aea <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    3ad4:	687b      	ldr	r3, [r7, #4]
    3ad6:	0018      	movs	r0, r3
    3ad8:	4b13      	ldr	r3, [pc, #76]	; (3b28 <_i2c_master_read_packet+0x270>)
    3ada:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3adc:	68fb      	ldr	r3, [r7, #12]
    3ade:	685b      	ldr	r3, [r3, #4]
    3ae0:	22c0      	movs	r2, #192	; 0xc0
    3ae2:	0292      	lsls	r2, r2, #10
    3ae4:	431a      	orrs	r2, r3
    3ae6:	68fb      	ldr	r3, [r7, #12]
    3ae8:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	0018      	movs	r0, r3
    3aee:	4b0e      	ldr	r3, [pc, #56]	; (3b28 <_i2c_master_read_packet+0x270>)
    3af0:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3af2:	683b      	ldr	r3, [r7, #0]
    3af4:	685a      	ldr	r2, [r3, #4]
    3af6:	2312      	movs	r3, #18
    3af8:	18fb      	adds	r3, r7, r3
    3afa:	881b      	ldrh	r3, [r3, #0]
    3afc:	18d3      	adds	r3, r2, r3
    3afe:	68fa      	ldr	r2, [r7, #12]
    3b00:	2128      	movs	r1, #40	; 0x28
    3b02:	5c52      	ldrb	r2, [r2, r1]
    3b04:	b2d2      	uxtb	r2, r2
    3b06:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    3b08:	2317      	movs	r3, #23
    3b0a:	18fb      	adds	r3, r7, r3
    3b0c:	781b      	ldrb	r3, [r3, #0]
}
    3b0e:	0018      	movs	r0, r3
    3b10:	46bd      	mov	sp, r7
    3b12:	b007      	add	sp, #28
    3b14:	bd90      	pop	{r4, r7, pc}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	00003865 	.word	0x00003865
    3b1c:	fffbffff 	.word	0xfffbffff
    3b20:	00003807 	.word	0x00003807
    3b24:	000037a9 	.word	0x000037a9
    3b28:	00003241 	.word	0x00003241

00003b2c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3b2c:	b580      	push	{r7, lr}
    3b2e:	b082      	sub	sp, #8
    3b30:	af00      	add	r7, sp, #0
    3b32:	6078      	str	r0, [r7, #4]
    3b34:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3b36:	687b      	ldr	r3, [r7, #4]
    3b38:	8b9b      	ldrh	r3, [r3, #28]
    3b3a:	b29b      	uxth	r3, r3
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d001      	beq.n	3b44 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    3b40:	2305      	movs	r3, #5
    3b42:	e00c      	b.n	3b5e <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3b44:	687b      	ldr	r3, [r7, #4]
    3b46:	2201      	movs	r2, #1
    3b48:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3b4a:	687b      	ldr	r3, [r7, #4]
    3b4c:	2201      	movs	r2, #1
    3b4e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    3b50:	683a      	ldr	r2, [r7, #0]
    3b52:	687b      	ldr	r3, [r7, #4]
    3b54:	0011      	movs	r1, r2
    3b56:	0018      	movs	r0, r3
    3b58:	4b03      	ldr	r3, [pc, #12]	; (3b68 <i2c_master_read_packet_wait+0x3c>)
    3b5a:	4798      	blx	r3
    3b5c:	0003      	movs	r3, r0
}
    3b5e:	0018      	movs	r0, r3
    3b60:	46bd      	mov	sp, r7
    3b62:	b002      	add	sp, #8
    3b64:	bd80      	pop	{r7, pc}
    3b66:	46c0      	nop			; (mov r8, r8)
    3b68:	000038b9 	.word	0x000038b9

00003b6c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3b6c:	b590      	push	{r4, r7, lr}
    3b6e:	b087      	sub	sp, #28
    3b70:	af00      	add	r7, sp, #0
    3b72:	6078      	str	r0, [r7, #4]
    3b74:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3b76:	687b      	ldr	r3, [r7, #4]
    3b78:	681b      	ldr	r3, [r3, #0]
    3b7a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3b7c:	2314      	movs	r3, #20
    3b7e:	18fb      	adds	r3, r7, r3
    3b80:	683a      	ldr	r2, [r7, #0]
    3b82:	8852      	ldrh	r2, [r2, #2]
    3b84:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    3b86:	687b      	ldr	r3, [r7, #4]
    3b88:	0018      	movs	r0, r3
    3b8a:	4b51      	ldr	r3, [pc, #324]	; (3cd0 <_i2c_master_write_packet+0x164>)
    3b8c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3b8e:	683b      	ldr	r3, [r7, #0]
    3b90:	7a5b      	ldrb	r3, [r3, #9]
    3b92:	2b00      	cmp	r3, #0
    3b94:	d006      	beq.n	3ba4 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3b96:	683b      	ldr	r3, [r7, #0]
    3b98:	7a9a      	ldrb	r2, [r3, #10]
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	0011      	movs	r1, r2
    3b9e:	0018      	movs	r0, r3
    3ba0:	4b4c      	ldr	r3, [pc, #304]	; (3cd4 <_i2c_master_write_packet+0x168>)
    3ba2:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3ba4:	68fb      	ldr	r3, [r7, #12]
    3ba6:	685b      	ldr	r3, [r3, #4]
    3ba8:	4a4b      	ldr	r2, [pc, #300]	; (3cd8 <_i2c_master_write_packet+0x16c>)
    3baa:	401a      	ands	r2, r3
    3bac:	68fb      	ldr	r3, [r7, #12]
    3bae:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3bb0:	683b      	ldr	r3, [r7, #0]
    3bb2:	7a1b      	ldrb	r3, [r3, #8]
    3bb4:	2b00      	cmp	r3, #0
    3bb6:	d00d      	beq.n	3bd4 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3bb8:	683b      	ldr	r3, [r7, #0]
    3bba:	881b      	ldrh	r3, [r3, #0]
    3bbc:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3bbe:	683b      	ldr	r3, [r7, #0]
    3bc0:	7a5b      	ldrb	r3, [r3, #9]
    3bc2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3bc4:	4313      	orrs	r3, r2
    3bc6:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3bc8:	2380      	movs	r3, #128	; 0x80
    3bca:	021b      	lsls	r3, r3, #8
    3bcc:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3bce:	68fb      	ldr	r3, [r7, #12]
    3bd0:	625a      	str	r2, [r3, #36]	; 0x24
    3bd2:	e009      	b.n	3be8 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3bd4:	683b      	ldr	r3, [r7, #0]
    3bd6:	881b      	ldrh	r3, [r3, #0]
    3bd8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3bda:	683b      	ldr	r3, [r7, #0]
    3bdc:	7a5b      	ldrb	r3, [r3, #9]
    3bde:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3be0:	4313      	orrs	r3, r2
    3be2:	001a      	movs	r2, r3
    3be4:	68fb      	ldr	r3, [r7, #12]
    3be6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3be8:	2317      	movs	r3, #23
    3bea:	18fc      	adds	r4, r7, r3
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	0018      	movs	r0, r3
    3bf0:	4b3a      	ldr	r3, [pc, #232]	; (3cdc <_i2c_master_write_packet+0x170>)
    3bf2:	4798      	blx	r3
    3bf4:	0003      	movs	r3, r0
    3bf6:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3bf8:	2317      	movs	r3, #23
    3bfa:	18fb      	adds	r3, r7, r3
    3bfc:	781b      	ldrb	r3, [r3, #0]
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d107      	bne.n	3c12 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    3c02:	2317      	movs	r3, #23
    3c04:	18fc      	adds	r4, r7, r3
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	0018      	movs	r0, r3
    3c0a:	4b35      	ldr	r3, [pc, #212]	; (3ce0 <_i2c_master_write_packet+0x174>)
    3c0c:	4798      	blx	r3
    3c0e:	0003      	movs	r3, r0
    3c10:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3c12:	2317      	movs	r3, #23
    3c14:	18fb      	adds	r3, r7, r3
    3c16:	781b      	ldrb	r3, [r3, #0]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d152      	bne.n	3cc2 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    3c1c:	2312      	movs	r3, #18
    3c1e:	18fb      	adds	r3, r7, r3
    3c20:	2200      	movs	r2, #0
    3c22:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    3c24:	e033      	b.n	3c8e <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3c26:	68fb      	ldr	r3, [r7, #12]
    3c28:	8b5b      	ldrh	r3, [r3, #26]
    3c2a:	b29b      	uxth	r3, r3
    3c2c:	001a      	movs	r2, r3
    3c2e:	2320      	movs	r3, #32
    3c30:	4013      	ands	r3, r2
    3c32:	d101      	bne.n	3c38 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    3c34:	2341      	movs	r3, #65	; 0x41
    3c36:	e047      	b.n	3cc8 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3c38:	687b      	ldr	r3, [r7, #4]
    3c3a:	0018      	movs	r0, r3
    3c3c:	4b24      	ldr	r3, [pc, #144]	; (3cd0 <_i2c_master_write_packet+0x164>)
    3c3e:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3c40:	683b      	ldr	r3, [r7, #0]
    3c42:	685a      	ldr	r2, [r3, #4]
    3c44:	2312      	movs	r3, #18
    3c46:	18fb      	adds	r3, r7, r3
    3c48:	881b      	ldrh	r3, [r3, #0]
    3c4a:	2112      	movs	r1, #18
    3c4c:	1879      	adds	r1, r7, r1
    3c4e:	1c58      	adds	r0, r3, #1
    3c50:	8008      	strh	r0, [r1, #0]
    3c52:	18d3      	adds	r3, r2, r3
    3c54:	7819      	ldrb	r1, [r3, #0]
    3c56:	68fb      	ldr	r3, [r7, #12]
    3c58:	2228      	movs	r2, #40	; 0x28
    3c5a:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3c5c:	2317      	movs	r3, #23
    3c5e:	18fc      	adds	r4, r7, r3
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	0018      	movs	r0, r3
    3c64:	4b1d      	ldr	r3, [pc, #116]	; (3cdc <_i2c_master_write_packet+0x170>)
    3c66:	4798      	blx	r3
    3c68:	0003      	movs	r3, r0
    3c6a:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3c6c:	2317      	movs	r3, #23
    3c6e:	18fb      	adds	r3, r7, r3
    3c70:	781b      	ldrb	r3, [r3, #0]
    3c72:	2b00      	cmp	r3, #0
    3c74:	d115      	bne.n	3ca2 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3c76:	68fb      	ldr	r3, [r7, #12]
    3c78:	8b5b      	ldrh	r3, [r3, #26]
    3c7a:	b29b      	uxth	r3, r3
    3c7c:	001a      	movs	r2, r3
    3c7e:	2304      	movs	r3, #4
    3c80:	4013      	ands	r3, r2
    3c82:	d004      	beq.n	3c8e <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    3c84:	2317      	movs	r3, #23
    3c86:	18fb      	adds	r3, r7, r3
    3c88:	221e      	movs	r2, #30
    3c8a:	701a      	strb	r2, [r3, #0]
				break;
    3c8c:	e00a      	b.n	3ca4 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    3c8e:	2314      	movs	r3, #20
    3c90:	18fb      	adds	r3, r7, r3
    3c92:	881b      	ldrh	r3, [r3, #0]
    3c94:	2214      	movs	r2, #20
    3c96:	18ba      	adds	r2, r7, r2
    3c98:	1e59      	subs	r1, r3, #1
    3c9a:	8011      	strh	r1, [r2, #0]
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d1c2      	bne.n	3c26 <_i2c_master_write_packet+0xba>
    3ca0:	e000      	b.n	3ca4 <_i2c_master_write_packet+0x138>
				break;
    3ca2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	7a9b      	ldrb	r3, [r3, #10]
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d00a      	beq.n	3cc2 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    3cac:	687b      	ldr	r3, [r7, #4]
    3cae:	0018      	movs	r0, r3
    3cb0:	4b07      	ldr	r3, [pc, #28]	; (3cd0 <_i2c_master_write_packet+0x164>)
    3cb2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3cb4:	68fb      	ldr	r3, [r7, #12]
    3cb6:	685b      	ldr	r3, [r3, #4]
    3cb8:	22c0      	movs	r2, #192	; 0xc0
    3cba:	0292      	lsls	r2, r2, #10
    3cbc:	431a      	orrs	r2, r3
    3cbe:	68fb      	ldr	r3, [r7, #12]
    3cc0:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    3cc2:	2317      	movs	r3, #23
    3cc4:	18fb      	adds	r3, r7, r3
    3cc6:	781b      	ldrb	r3, [r3, #0]
}
    3cc8:	0018      	movs	r0, r3
    3cca:	46bd      	mov	sp, r7
    3ccc:	b007      	add	sp, #28
    3cce:	bd90      	pop	{r4, r7, pc}
    3cd0:	00003241 	.word	0x00003241
    3cd4:	00003865 	.word	0x00003865
    3cd8:	fffbffff 	.word	0xfffbffff
    3cdc:	00003807 	.word	0x00003807
    3ce0:	000037a9 	.word	0x000037a9

00003ce4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	b082      	sub	sp, #8
    3ce8:	af00      	add	r7, sp, #0
    3cea:	6078      	str	r0, [r7, #4]
    3cec:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	8b9b      	ldrh	r3, [r3, #28]
    3cf2:	b29b      	uxth	r3, r3
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d001      	beq.n	3cfc <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    3cf8:	2305      	movs	r3, #5
    3cfa:	e00c      	b.n	3d16 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3cfc:	687b      	ldr	r3, [r7, #4]
    3cfe:	2201      	movs	r2, #1
    3d00:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	2201      	movs	r2, #1
    3d06:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3d08:	683a      	ldr	r2, [r7, #0]
    3d0a:	687b      	ldr	r3, [r7, #4]
    3d0c:	0011      	movs	r1, r2
    3d0e:	0018      	movs	r0, r3
    3d10:	4b03      	ldr	r3, [pc, #12]	; (3d20 <i2c_master_write_packet_wait+0x3c>)
    3d12:	4798      	blx	r3
    3d14:	0003      	movs	r3, r0
}
    3d16:	0018      	movs	r0, r3
    3d18:	46bd      	mov	sp, r7
    3d1a:	b002      	add	sp, #8
    3d1c:	bd80      	pop	{r7, pc}
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	00003b6d 	.word	0x00003b6d

00003d24 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b082      	sub	sp, #8
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    3d2c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	8b9b      	ldrh	r3, [r3, #28]
    3d32:	b29b      	uxth	r3, r3
    3d34:	2b00      	cmp	r3, #0
    3d36:	d001      	beq.n	3d3c <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    3d38:	2305      	movs	r3, #5
    3d3a:	e00c      	b.n	3d56 <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    3d3c:	687b      	ldr	r3, [r7, #4]
    3d3e:	2200      	movs	r2, #0
    3d40:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	2201      	movs	r2, #1
    3d46:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3d48:	683a      	ldr	r2, [r7, #0]
    3d4a:	687b      	ldr	r3, [r7, #4]
    3d4c:	0011      	movs	r1, r2
    3d4e:	0018      	movs	r0, r3
    3d50:	4b03      	ldr	r3, [pc, #12]	; (3d60 <i2c_master_write_packet_wait_no_stop+0x3c>)
    3d52:	4798      	blx	r3
    3d54:	0003      	movs	r3, r0
}
    3d56:	0018      	movs	r0, r3
    3d58:	46bd      	mov	sp, r7
    3d5a:	b002      	add	sp, #8
    3d5c:	bd80      	pop	{r7, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	00003b6d 	.word	0x00003b6d

00003d64 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    3d64:	b580      	push	{r7, lr}
    3d66:	b084      	sub	sp, #16
    3d68:	af00      	add	r7, sp, #0
    3d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	0018      	movs	r0, r3
    3d76:	4b06      	ldr	r3, [pc, #24]	; (3d90 <i2c_master_send_stop+0x2c>)
    3d78:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3d7a:	68fb      	ldr	r3, [r7, #12]
    3d7c:	685b      	ldr	r3, [r3, #4]
    3d7e:	22c0      	movs	r2, #192	; 0xc0
    3d80:	0292      	lsls	r2, r2, #10
    3d82:	431a      	orrs	r2, r3
    3d84:	68fb      	ldr	r3, [r7, #12]
    3d86:	605a      	str	r2, [r3, #4]
}
    3d88:	46c0      	nop			; (mov r8, r8)
    3d8a:	46bd      	mov	sp, r7
    3d8c:	b004      	add	sp, #16
    3d8e:	bd80      	pop	{r7, pc}
    3d90:	00003241 	.word	0x00003241

00003d94 <i2c_master_is_syncing>:
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b084      	sub	sp, #16
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3d9c:	687b      	ldr	r3, [r7, #4]
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3da2:	68fb      	ldr	r3, [r7, #12]
    3da4:	69db      	ldr	r3, [r3, #28]
    3da6:	2207      	movs	r2, #7
    3da8:	4013      	ands	r3, r2
    3daa:	1e5a      	subs	r2, r3, #1
    3dac:	4193      	sbcs	r3, r2
    3dae:	b2db      	uxtb	r3, r3
}
    3db0:	0018      	movs	r0, r3
    3db2:	46bd      	mov	sp, r7
    3db4:	b004      	add	sp, #16
    3db6:	bd80      	pop	{r7, pc}

00003db8 <_i2c_master_wait_for_sync>:
{
    3db8:	b580      	push	{r7, lr}
    3dba:	b082      	sub	sp, #8
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3dc0:	46c0      	nop			; (mov r8, r8)
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	0018      	movs	r0, r3
    3dc6:	4b04      	ldr	r3, [pc, #16]	; (3dd8 <_i2c_master_wait_for_sync+0x20>)
    3dc8:	4798      	blx	r3
    3dca:	1e03      	subs	r3, r0, #0
    3dcc:	d1f9      	bne.n	3dc2 <_i2c_master_wait_for_sync+0xa>
}
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	46bd      	mov	sp, r7
    3dd2:	b002      	add	sp, #8
    3dd4:	bd80      	pop	{r7, pc}
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	00003d95 	.word	0x00003d95

00003ddc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3ddc:	b580      	push	{r7, lr}
    3dde:	b084      	sub	sp, #16
    3de0:	af00      	add	r7, sp, #0
    3de2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	681b      	ldr	r3, [r3, #0]
    3de8:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3dea:	68fb      	ldr	r3, [r7, #12]
    3dec:	681b      	ldr	r3, [r3, #0]
    3dee:	011b      	lsls	r3, r3, #4
    3df0:	0fdb      	lsrs	r3, r3, #31
    3df2:	b2db      	uxtb	r3, r3
    3df4:	001a      	movs	r2, r3
    3df6:	230b      	movs	r3, #11
    3df8:	18fb      	adds	r3, r7, r3
    3dfa:	1e51      	subs	r1, r2, #1
    3dfc:	418a      	sbcs	r2, r1
    3dfe:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3e00:	2308      	movs	r3, #8
    3e02:	18fb      	adds	r3, r7, r3
    3e04:	687a      	ldr	r2, [r7, #4]
    3e06:	8b52      	ldrh	r2, [r2, #26]
    3e08:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3e0a:	687b      	ldr	r3, [r7, #4]
    3e0c:	8b9b      	ldrh	r3, [r3, #28]
    3e0e:	b29a      	uxth	r2, r3
    3e10:	2308      	movs	r3, #8
    3e12:	18fb      	adds	r3, r7, r3
    3e14:	2108      	movs	r1, #8
    3e16:	1879      	adds	r1, r7, r1
    3e18:	8809      	ldrh	r1, [r1, #0]
    3e1a:	1a8a      	subs	r2, r1, r2
    3e1c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	8b9b      	ldrh	r3, [r3, #28]
    3e22:	b29b      	uxth	r3, r3
    3e24:	3b01      	subs	r3, #1
    3e26:	b29a      	uxth	r2, r3
    3e28:	687b      	ldr	r3, [r7, #4]
    3e2a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    3e2c:	230b      	movs	r3, #11
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	781b      	ldrb	r3, [r3, #0]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d010      	beq.n	3e58 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	7adb      	ldrb	r3, [r3, #11]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d01c      	beq.n	3e78 <_i2c_master_read+0x9c>
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	8b9b      	ldrh	r3, [r3, #28]
    3e42:	b29b      	uxth	r3, r3
    3e44:	2b01      	cmp	r3, #1
    3e46:	d117      	bne.n	3e78 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e48:	68fb      	ldr	r3, [r7, #12]
    3e4a:	685b      	ldr	r3, [r3, #4]
    3e4c:	2280      	movs	r2, #128	; 0x80
    3e4e:	02d2      	lsls	r2, r2, #11
    3e50:	431a      	orrs	r2, r3
    3e52:	68fb      	ldr	r3, [r7, #12]
    3e54:	605a      	str	r2, [r3, #4]
    3e56:	e00f      	b.n	3e78 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	7adb      	ldrb	r3, [r3, #11]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d00b      	beq.n	3e78 <_i2c_master_read+0x9c>
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	8b9b      	ldrh	r3, [r3, #28]
    3e64:	b29b      	uxth	r3, r3
    3e66:	2b00      	cmp	r3, #0
    3e68:	d106      	bne.n	3e78 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e6a:	68fb      	ldr	r3, [r7, #12]
    3e6c:	685b      	ldr	r3, [r3, #4]
    3e6e:	2280      	movs	r2, #128	; 0x80
    3e70:	02d2      	lsls	r2, r2, #11
    3e72:	431a      	orrs	r2, r3
    3e74:	68fb      	ldr	r3, [r7, #12]
    3e76:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	8b9b      	ldrh	r3, [r3, #28]
    3e7c:	b29b      	uxth	r3, r3
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d10e      	bne.n	3ea0 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	7a9b      	ldrb	r3, [r3, #10]
    3e86:	2b00      	cmp	r3, #0
    3e88:	d00a      	beq.n	3ea0 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	0018      	movs	r0, r3
    3e8e:	4b0e      	ldr	r3, [pc, #56]	; (3ec8 <_i2c_master_read+0xec>)
    3e90:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3e92:	68fb      	ldr	r3, [r7, #12]
    3e94:	685b      	ldr	r3, [r3, #4]
    3e96:	22c0      	movs	r2, #192	; 0xc0
    3e98:	0292      	lsls	r2, r2, #10
    3e9a:	431a      	orrs	r2, r3
    3e9c:	68fb      	ldr	r3, [r7, #12]
    3e9e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	0018      	movs	r0, r3
    3ea4:	4b08      	ldr	r3, [pc, #32]	; (3ec8 <_i2c_master_read+0xec>)
    3ea6:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	6a1a      	ldr	r2, [r3, #32]
    3eac:	2308      	movs	r3, #8
    3eae:	18fb      	adds	r3, r7, r3
    3eb0:	881b      	ldrh	r3, [r3, #0]
    3eb2:	18d3      	adds	r3, r2, r3
    3eb4:	68fa      	ldr	r2, [r7, #12]
    3eb6:	2128      	movs	r1, #40	; 0x28
    3eb8:	5c52      	ldrb	r2, [r2, r1]
    3eba:	b2d2      	uxtb	r2, r2
    3ebc:	701a      	strb	r2, [r3, #0]
}
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	46bd      	mov	sp, r7
    3ec2:	b004      	add	sp, #16
    3ec4:	bd80      	pop	{r7, pc}
    3ec6:	46c0      	nop			; (mov r8, r8)
    3ec8:	00003db9 	.word	0x00003db9

00003ecc <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3ecc:	b580      	push	{r7, lr}
    3ece:	b084      	sub	sp, #16
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	681b      	ldr	r3, [r3, #0]
    3ed8:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3eda:	68fb      	ldr	r3, [r7, #12]
    3edc:	8b5b      	ldrh	r3, [r3, #26]
    3ede:	b29b      	uxth	r3, r3
    3ee0:	001a      	movs	r2, r3
    3ee2:	2304      	movs	r3, #4
    3ee4:	4013      	ands	r3, r2
    3ee6:	d004      	beq.n	3ef2 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3ee8:	687b      	ldr	r3, [r7, #4]
    3eea:	2225      	movs	r2, #37	; 0x25
    3eec:	211e      	movs	r1, #30
    3eee:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    3ef0:	e024      	b.n	3f3c <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    3ef2:	230a      	movs	r3, #10
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	687a      	ldr	r2, [r7, #4]
    3ef8:	8b52      	ldrh	r2, [r2, #26]
    3efa:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	8b9b      	ldrh	r3, [r3, #28]
    3f00:	b29a      	uxth	r2, r3
    3f02:	230a      	movs	r3, #10
    3f04:	18fb      	adds	r3, r7, r3
    3f06:	210a      	movs	r1, #10
    3f08:	1879      	adds	r1, r7, r1
    3f0a:	8809      	ldrh	r1, [r1, #0]
    3f0c:	1a8a      	subs	r2, r1, r2
    3f0e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	8b9b      	ldrh	r3, [r3, #28]
    3f14:	b29b      	uxth	r3, r3
    3f16:	3b01      	subs	r3, #1
    3f18:	b29a      	uxth	r2, r3
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	0018      	movs	r0, r3
    3f22:	4b08      	ldr	r3, [pc, #32]	; (3f44 <_i2c_master_write+0x78>)
    3f24:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	6a1a      	ldr	r2, [r3, #32]
    3f2a:	230a      	movs	r3, #10
    3f2c:	18fb      	adds	r3, r7, r3
    3f2e:	881b      	ldrh	r3, [r3, #0]
    3f30:	18d3      	adds	r3, r2, r3
    3f32:	781b      	ldrb	r3, [r3, #0]
    3f34:	b2d9      	uxtb	r1, r3
    3f36:	68fb      	ldr	r3, [r7, #12]
    3f38:	2228      	movs	r2, #40	; 0x28
    3f3a:	5499      	strb	r1, [r3, r2]
}
    3f3c:	46bd      	mov	sp, r7
    3f3e:	b004      	add	sp, #16
    3f40:	bd80      	pop	{r7, pc}
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	00003db9 	.word	0x00003db9

00003f48 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	b084      	sub	sp, #16
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	681b      	ldr	r3, [r3, #0]
    3f54:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3f56:	68fb      	ldr	r3, [r7, #12]
    3f58:	7e1b      	ldrb	r3, [r3, #24]
    3f5a:	b2db      	uxtb	r3, r3
    3f5c:	001a      	movs	r2, r3
    3f5e:	2301      	movs	r3, #1
    3f60:	4013      	ands	r3, r2
    3f62:	d02b      	beq.n	3fbc <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3f64:	68fb      	ldr	r3, [r7, #12]
    3f66:	2201      	movs	r2, #1
    3f68:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3f6a:	68fb      	ldr	r3, [r7, #12]
    3f6c:	8b5b      	ldrh	r3, [r3, #26]
    3f6e:	b29b      	uxth	r3, r3
    3f70:	001a      	movs	r2, r3
    3f72:	2302      	movs	r3, #2
    3f74:	4013      	ands	r3, r2
    3f76:	d004      	beq.n	3f82 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	2225      	movs	r2, #37	; 0x25
    3f7c:	2141      	movs	r1, #65	; 0x41
    3f7e:	5499      	strb	r1, [r3, r2]
    3f80:	e01c      	b.n	3fbc <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3f82:	68fb      	ldr	r3, [r7, #12]
    3f84:	8b5b      	ldrh	r3, [r3, #26]
    3f86:	b29b      	uxth	r3, r3
    3f88:	001a      	movs	r2, r3
    3f8a:	2304      	movs	r3, #4
    3f8c:	4013      	ands	r3, r2
    3f8e:	d015      	beq.n	3fbc <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	2225      	movs	r2, #37	; 0x25
    3f94:	2118      	movs	r1, #24
    3f96:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	2200      	movs	r2, #0
    3f9c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    3f9e:	687b      	ldr	r3, [r7, #4]
    3fa0:	7a9b      	ldrb	r3, [r3, #10]
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d00a      	beq.n	3fbc <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	0018      	movs	r0, r3
    3faa:	4b13      	ldr	r3, [pc, #76]	; (3ff8 <_i2c_master_async_address_response+0xb0>)
    3fac:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3fae:	68fb      	ldr	r3, [r7, #12]
    3fb0:	685b      	ldr	r3, [r3, #4]
    3fb2:	22c0      	movs	r2, #192	; 0xc0
    3fb4:	0292      	lsls	r2, r2, #10
    3fb6:	431a      	orrs	r2, r3
    3fb8:	68fb      	ldr	r3, [r7, #12]
    3fba:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    3fbc:	687b      	ldr	r3, [r7, #4]
    3fbe:	8b9b      	ldrh	r3, [r3, #28]
    3fc0:	b29a      	uxth	r2, r3
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	2225      	movs	r2, #37	; 0x25
    3fca:	5c9b      	ldrb	r3, [r3, r2]
    3fcc:	b2db      	uxtb	r3, r3
    3fce:	2b05      	cmp	r3, #5
    3fd0:	d10e      	bne.n	3ff0 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	2224      	movs	r2, #36	; 0x24
    3fd6:	5c9b      	ldrb	r3, [r3, r2]
    3fd8:	b2db      	uxtb	r3, r3
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d104      	bne.n	3fe8 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	0018      	movs	r0, r3
    3fe2:	4b06      	ldr	r3, [pc, #24]	; (3ffc <_i2c_master_async_address_response+0xb4>)
    3fe4:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    3fe6:	e003      	b.n	3ff0 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	0018      	movs	r0, r3
    3fec:	4b04      	ldr	r3, [pc, #16]	; (4000 <_i2c_master_async_address_response+0xb8>)
    3fee:	4798      	blx	r3
}
    3ff0:	46c0      	nop			; (mov r8, r8)
    3ff2:	46bd      	mov	sp, r7
    3ff4:	b004      	add	sp, #16
    3ff6:	bd80      	pop	{r7, pc}
    3ff8:	00003db9 	.word	0x00003db9
    3ffc:	00003ecd 	.word	0x00003ecd
    4000:	00003ddd 	.word	0x00003ddd

00004004 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    4004:	b580      	push	{r7, lr}
    4006:	b084      	sub	sp, #16
    4008:	af00      	add	r7, sp, #0
    400a:	60f8      	str	r0, [r7, #12]
    400c:	60b9      	str	r1, [r7, #8]
    400e:	1dfb      	adds	r3, r7, #7
    4010:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    4012:	1dfb      	adds	r3, r7, #7
    4014:	781b      	ldrb	r3, [r3, #0]
    4016:	68fa      	ldr	r2, [r7, #12]
    4018:	3302      	adds	r3, #2
    401a:	009b      	lsls	r3, r3, #2
    401c:	18d3      	adds	r3, r2, r3
    401e:	3304      	adds	r3, #4
    4020:	68ba      	ldr	r2, [r7, #8]
    4022:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	7e1b      	ldrb	r3, [r3, #24]
    4028:	b2db      	uxtb	r3, r3
    402a:	b25a      	sxtb	r2, r3
    402c:	1dfb      	adds	r3, r7, #7
    402e:	781b      	ldrb	r3, [r3, #0]
    4030:	2101      	movs	r1, #1
    4032:	4099      	lsls	r1, r3
    4034:	000b      	movs	r3, r1
    4036:	b25b      	sxtb	r3, r3
    4038:	4313      	orrs	r3, r2
    403a:	b25b      	sxtb	r3, r3
    403c:	b2da      	uxtb	r2, r3
    403e:	68fb      	ldr	r3, [r7, #12]
    4040:	761a      	strb	r2, [r3, #24]
}
    4042:	46c0      	nop			; (mov r8, r8)
    4044:	46bd      	mov	sp, r7
    4046:	b004      	add	sp, #16
    4048:	bd80      	pop	{r7, pc}
	...

0000404c <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    404c:	b590      	push	{r4, r7, lr}
    404e:	b087      	sub	sp, #28
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    4054:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    405c:	683b      	ldr	r3, [r7, #0]
    405e:	685a      	ldr	r2, [r3, #4]
    4060:	687b      	ldr	r3, [r7, #4]
    4062:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    4064:	683b      	ldr	r3, [r7, #0]
    4066:	885a      	ldrh	r2, [r3, #2]
    4068:	687b      	ldr	r3, [r7, #4]
    406a:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    406c:	687b      	ldr	r3, [r7, #4]
    406e:	2224      	movs	r2, #36	; 0x24
    4070:	2101      	movs	r1, #1
    4072:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	2225      	movs	r2, #37	; 0x25
    4078:	2105      	movs	r1, #5
    407a:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    407c:	693b      	ldr	r3, [r7, #16]
    407e:	681b      	ldr	r3, [r3, #0]
    4080:	011b      	lsls	r3, r3, #4
    4082:	0fdb      	lsrs	r3, r3, #31
    4084:	b2db      	uxtb	r3, r3
    4086:	001a      	movs	r2, r3
    4088:	230f      	movs	r3, #15
    408a:	18fb      	adds	r3, r7, r3
    408c:	1e51      	subs	r1, r2, #1
    408e:	418a      	sbcs	r2, r1
    4090:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    4092:	683b      	ldr	r3, [r7, #0]
    4094:	7a5b      	ldrb	r3, [r3, #9]
    4096:	2b00      	cmp	r3, #0
    4098:	d006      	beq.n	40a8 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    409a:	683b      	ldr	r3, [r7, #0]
    409c:	7a9a      	ldrb	r2, [r3, #10]
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	0011      	movs	r1, r2
    40a2:	0018      	movs	r0, r3
    40a4:	4b3b      	ldr	r3, [pc, #236]	; (4194 <_i2c_master_read_packet+0x148>)
    40a6:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    40a8:	230f      	movs	r3, #15
    40aa:	18fb      	adds	r3, r7, r3
    40ac:	781b      	ldrb	r3, [r3, #0]
    40ae:	2b00      	cmp	r3, #0
    40b0:	d00b      	beq.n	40ca <_i2c_master_read_packet+0x7e>
    40b2:	683b      	ldr	r3, [r7, #0]
    40b4:	885b      	ldrh	r3, [r3, #2]
    40b6:	2b01      	cmp	r3, #1
    40b8:	d107      	bne.n	40ca <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    40ba:	693b      	ldr	r3, [r7, #16]
    40bc:	685b      	ldr	r3, [r3, #4]
    40be:	2280      	movs	r2, #128	; 0x80
    40c0:	02d2      	lsls	r2, r2, #11
    40c2:	431a      	orrs	r2, r3
    40c4:	693b      	ldr	r3, [r7, #16]
    40c6:	605a      	str	r2, [r3, #4]
    40c8:	e005      	b.n	40d6 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    40ca:	693b      	ldr	r3, [r7, #16]
    40cc:	685b      	ldr	r3, [r3, #4]
    40ce:	4a32      	ldr	r2, [pc, #200]	; (4198 <_i2c_master_read_packet+0x14c>)
    40d0:	401a      	ands	r2, r3
    40d2:	693b      	ldr	r3, [r7, #16]
    40d4:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    40d6:	683b      	ldr	r3, [r7, #0]
    40d8:	7a1b      	ldrb	r3, [r3, #8]
    40da:	2b00      	cmp	r3, #0
    40dc:	d045      	beq.n	416a <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    40de:	683b      	ldr	r3, [r7, #0]
    40e0:	881b      	ldrh	r3, [r3, #0]
    40e2:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    40e4:	683b      	ldr	r3, [r7, #0]
    40e6:	7a5b      	ldrb	r3, [r3, #9]
    40e8:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    40ea:	4313      	orrs	r3, r2
    40ec:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    40ee:	2380      	movs	r3, #128	; 0x80
    40f0:	021b      	lsls	r3, r3, #8
    40f2:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    40f4:	693b      	ldr	r3, [r7, #16]
    40f6:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    40f8:	2317      	movs	r3, #23
    40fa:	18fc      	adds	r4, r7, r3
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	0018      	movs	r0, r3
    4100:	4b26      	ldr	r3, [pc, #152]	; (419c <_i2c_master_read_packet+0x150>)
    4102:	4798      	blx	r3
    4104:	0003      	movs	r3, r0
    4106:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4108:	693b      	ldr	r3, [r7, #16]
    410a:	685b      	ldr	r3, [r3, #4]
    410c:	4a22      	ldr	r2, [pc, #136]	; (4198 <_i2c_master_read_packet+0x14c>)
    410e:	401a      	ands	r2, r3
    4110:	693b      	ldr	r3, [r7, #16]
    4112:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    4114:	2317      	movs	r3, #23
    4116:	18fb      	adds	r3, r7, r3
    4118:	781b      	ldrb	r3, [r3, #0]
    411a:	2b00      	cmp	r3, #0
    411c:	d107      	bne.n	412e <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    411e:	2317      	movs	r3, #23
    4120:	18fc      	adds	r4, r7, r3
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	0018      	movs	r0, r3
    4126:	4b1e      	ldr	r3, [pc, #120]	; (41a0 <_i2c_master_read_packet+0x154>)
    4128:	4798      	blx	r3
    412a:	0003      	movs	r3, r0
    412c:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    412e:	2317      	movs	r3, #23
    4130:	18fb      	adds	r3, r7, r3
    4132:	781b      	ldrb	r3, [r3, #0]
    4134:	2b00      	cmp	r3, #0
    4136:	d114      	bne.n	4162 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    4138:	693b      	ldr	r3, [r7, #16]
    413a:	2203      	movs	r2, #3
    413c:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    413e:	683b      	ldr	r3, [r7, #0]
    4140:	881b      	ldrh	r3, [r3, #0]
    4142:	0a1b      	lsrs	r3, r3, #8
    4144:	b29b      	uxth	r3, r3
    4146:	2278      	movs	r2, #120	; 0x78
    4148:	4313      	orrs	r3, r2
    414a:	b29b      	uxth	r3, r3
    414c:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    414e:	683b      	ldr	r3, [r7, #0]
    4150:	7a5b      	ldrb	r3, [r3, #9]
    4152:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    4154:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4156:	2201      	movs	r2, #1
    4158:	4313      	orrs	r3, r2
    415a:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    415c:	693b      	ldr	r3, [r7, #16]
    415e:	625a      	str	r2, [r3, #36]	; 0x24
    4160:	e012      	b.n	4188 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    4162:	2317      	movs	r3, #23
    4164:	18fb      	adds	r3, r7, r3
    4166:	781b      	ldrb	r3, [r3, #0]
    4168:	e00f      	b.n	418a <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    416a:	693b      	ldr	r3, [r7, #16]
    416c:	2203      	movs	r2, #3
    416e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    4170:	683b      	ldr	r3, [r7, #0]
    4172:	881b      	ldrh	r3, [r3, #0]
    4174:	005b      	lsls	r3, r3, #1
    4176:	2201      	movs	r2, #1
    4178:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    417a:	683b      	ldr	r3, [r7, #0]
    417c:	7a5b      	ldrb	r3, [r3, #9]
    417e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    4180:	4313      	orrs	r3, r2
    4182:	001a      	movs	r2, r3
    4184:	693b      	ldr	r3, [r7, #16]
    4186:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    4188:	2300      	movs	r3, #0
}
    418a:	0018      	movs	r0, r3
    418c:	46bd      	mov	sp, r7
    418e:	b007      	add	sp, #28
    4190:	bd90      	pop	{r4, r7, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	00003865 	.word	0x00003865
    4198:	fffbffff 	.word	0xfffbffff
    419c:	00003807 	.word	0x00003807
    41a0:	000037a9 	.word	0x000037a9

000041a4 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    41a4:	b580      	push	{r7, lr}
    41a6:	b082      	sub	sp, #8
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
    41ac:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    41ae:	687b      	ldr	r3, [r7, #4]
    41b0:	8b9b      	ldrh	r3, [r3, #28]
    41b2:	b29b      	uxth	r3, r3
    41b4:	2b00      	cmp	r3, #0
    41b6:	d001      	beq.n	41bc <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    41b8:	2305      	movs	r3, #5
    41ba:	e00c      	b.n	41d6 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	2201      	movs	r2, #1
    41c0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	2201      	movs	r2, #1
    41c6:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    41c8:	683a      	ldr	r2, [r7, #0]
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	0011      	movs	r1, r2
    41ce:	0018      	movs	r0, r3
    41d0:	4b03      	ldr	r3, [pc, #12]	; (41e0 <i2c_master_read_packet_job+0x3c>)
    41d2:	4798      	blx	r3
    41d4:	0003      	movs	r3, r0
}
    41d6:	0018      	movs	r0, r3
    41d8:	46bd      	mov	sp, r7
    41da:	b002      	add	sp, #8
    41dc:	bd80      	pop	{r7, pc}
    41de:	46c0      	nop			; (mov r8, r8)
    41e0:	0000404d 	.word	0x0000404d

000041e4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    41e4:	b580      	push	{r7, lr}
    41e6:	b086      	sub	sp, #24
    41e8:	af00      	add	r7, sp, #0
    41ea:	0002      	movs	r2, r0
    41ec:	1dfb      	adds	r3, r7, #7
    41ee:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    41f0:	1dfb      	adds	r3, r7, #7
    41f2:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    41f4:	4b93      	ldr	r3, [pc, #588]	; (4444 <_i2c_master_interrupt_handler+0x260>)
    41f6:	0092      	lsls	r2, r2, #2
    41f8:	58d3      	ldr	r3, [r2, r3]
    41fa:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    41fc:	697b      	ldr	r3, [r7, #20]
    41fe:	681b      	ldr	r3, [r3, #0]
    4200:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    4202:	693b      	ldr	r3, [r7, #16]
    4204:	681b      	ldr	r3, [r3, #0]
    4206:	011b      	lsls	r3, r3, #4
    4208:	0fdb      	lsrs	r3, r3, #31
    420a:	b2db      	uxtb	r3, r3
    420c:	001a      	movs	r2, r3
    420e:	230f      	movs	r3, #15
    4210:	18fb      	adds	r3, r7, r3
    4212:	1e51      	subs	r1, r2, #1
    4214:	418a      	sbcs	r2, r1
    4216:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    4218:	230e      	movs	r3, #14
    421a:	18fb      	adds	r3, r7, r3
    421c:	697a      	ldr	r2, [r7, #20]
    421e:	7e52      	ldrb	r2, [r2, #25]
    4220:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    4222:	697b      	ldr	r3, [r7, #20]
    4224:	7e1b      	ldrb	r3, [r3, #24]
    4226:	b2da      	uxtb	r2, r3
    4228:	230e      	movs	r3, #14
    422a:	18fb      	adds	r3, r7, r3
    422c:	210e      	movs	r1, #14
    422e:	1879      	adds	r1, r7, r1
    4230:	7809      	ldrb	r1, [r1, #0]
    4232:	400a      	ands	r2, r1
    4234:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    4236:	697b      	ldr	r3, [r7, #20]
    4238:	8b5b      	ldrh	r3, [r3, #26]
    423a:	b29b      	uxth	r3, r3
    423c:	2b00      	cmp	r3, #0
    423e:	d109      	bne.n	4254 <_i2c_master_interrupt_handler+0x70>
    4240:	697b      	ldr	r3, [r7, #20]
    4242:	8b9b      	ldrh	r3, [r3, #28]
    4244:	b29b      	uxth	r3, r3
    4246:	2b00      	cmp	r3, #0
    4248:	d004      	beq.n	4254 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    424a:	697b      	ldr	r3, [r7, #20]
    424c:	0018      	movs	r0, r3
    424e:	4b7e      	ldr	r3, [pc, #504]	; (4448 <_i2c_master_interrupt_handler+0x264>)
    4250:	4798      	blx	r3
    4252:	e070      	b.n	4336 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4254:	697b      	ldr	r3, [r7, #20]
    4256:	8b5b      	ldrh	r3, [r3, #26]
    4258:	b29b      	uxth	r3, r3
    425a:	2b00      	cmp	r3, #0
    425c:	d039      	beq.n	42d2 <_i2c_master_interrupt_handler+0xee>
    425e:	697b      	ldr	r3, [r7, #20]
    4260:	8b9b      	ldrh	r3, [r3, #28]
    4262:	b29b      	uxth	r3, r3
    4264:	2b00      	cmp	r3, #0
    4266:	d134      	bne.n	42d2 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    4268:	697b      	ldr	r3, [r7, #20]
    426a:	2225      	movs	r2, #37	; 0x25
    426c:	5c9b      	ldrb	r3, [r3, r2]
    426e:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4270:	2b05      	cmp	r3, #5
    4272:	d12e      	bne.n	42d2 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4274:	697b      	ldr	r3, [r7, #20]
    4276:	2224      	movs	r2, #36	; 0x24
    4278:	5c9b      	ldrb	r3, [r3, r2]
    427a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    427c:	2b00      	cmp	r3, #0
    427e:	d128      	bne.n	42d2 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    4280:	693b      	ldr	r3, [r7, #16]
    4282:	2203      	movs	r2, #3
    4284:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    4286:	697b      	ldr	r3, [r7, #20]
    4288:	2200      	movs	r2, #0
    428a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    428c:	697b      	ldr	r3, [r7, #20]
    428e:	2225      	movs	r2, #37	; 0x25
    4290:	2100      	movs	r1, #0
    4292:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    4294:	697b      	ldr	r3, [r7, #20]
    4296:	7a9b      	ldrb	r3, [r3, #10]
    4298:	2b00      	cmp	r3, #0
    429a:	d00b      	beq.n	42b4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    429c:	697b      	ldr	r3, [r7, #20]
    429e:	0018      	movs	r0, r3
    42a0:	4b6a      	ldr	r3, [pc, #424]	; (444c <_i2c_master_interrupt_handler+0x268>)
    42a2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    42a4:	693b      	ldr	r3, [r7, #16]
    42a6:	685b      	ldr	r3, [r3, #4]
    42a8:	22c0      	movs	r2, #192	; 0xc0
    42aa:	0292      	lsls	r2, r2, #10
    42ac:	431a      	orrs	r2, r3
    42ae:	693b      	ldr	r3, [r7, #16]
    42b0:	605a      	str	r2, [r3, #4]
    42b2:	e002      	b.n	42ba <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    42b4:	693b      	ldr	r3, [r7, #16]
    42b6:	2201      	movs	r2, #1
    42b8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    42ba:	230e      	movs	r3, #14
    42bc:	18fb      	adds	r3, r7, r3
    42be:	781b      	ldrb	r3, [r3, #0]
    42c0:	2201      	movs	r2, #1
    42c2:	4013      	ands	r3, r2
    42c4:	d037      	beq.n	4336 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    42c6:	697b      	ldr	r3, [r7, #20]
    42c8:	68db      	ldr	r3, [r3, #12]
    42ca:	697a      	ldr	r2, [r7, #20]
    42cc:	0010      	movs	r0, r2
    42ce:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    42d0:	e031      	b.n	4336 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    42d2:	697b      	ldr	r3, [r7, #20]
    42d4:	8b5b      	ldrh	r3, [r3, #26]
    42d6:	b29b      	uxth	r3, r3
    42d8:	2b00      	cmp	r3, #0
    42da:	d02c      	beq.n	4336 <_i2c_master_interrupt_handler+0x152>
    42dc:	697b      	ldr	r3, [r7, #20]
    42de:	8b9b      	ldrh	r3, [r3, #28]
    42e0:	b29b      	uxth	r3, r3
    42e2:	2b00      	cmp	r3, #0
    42e4:	d027      	beq.n	4336 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    42e6:	693b      	ldr	r3, [r7, #16]
    42e8:	8b5b      	ldrh	r3, [r3, #26]
    42ea:	b29b      	uxth	r3, r3
    42ec:	001a      	movs	r2, r3
    42ee:	2320      	movs	r3, #32
    42f0:	4013      	ands	r3, r2
    42f2:	d111      	bne.n	4318 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    42f4:	230f      	movs	r3, #15
    42f6:	18fb      	adds	r3, r7, r3
    42f8:	781b      	ldrb	r3, [r3, #0]
    42fa:	2201      	movs	r2, #1
    42fc:	4053      	eors	r3, r2
    42fe:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4300:	2b00      	cmp	r3, #0
    4302:	d104      	bne.n	430e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4304:	697b      	ldr	r3, [r7, #20]
    4306:	8b9b      	ldrh	r3, [r3, #28]
    4308:	b29b      	uxth	r3, r3
    430a:	2b01      	cmp	r3, #1
    430c:	d004      	beq.n	4318 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    430e:	697b      	ldr	r3, [r7, #20]
    4310:	2225      	movs	r2, #37	; 0x25
    4312:	2141      	movs	r1, #65	; 0x41
    4314:	5499      	strb	r1, [r3, r2]
    4316:	e00e      	b.n	4336 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4318:	697b      	ldr	r3, [r7, #20]
    431a:	2224      	movs	r2, #36	; 0x24
    431c:	5c9b      	ldrb	r3, [r3, r2]
    431e:	b2db      	uxtb	r3, r3
    4320:	2b00      	cmp	r3, #0
    4322:	d104      	bne.n	432e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    4324:	697b      	ldr	r3, [r7, #20]
    4326:	0018      	movs	r0, r3
    4328:	4b49      	ldr	r3, [pc, #292]	; (4450 <_i2c_master_interrupt_handler+0x26c>)
    432a:	4798      	blx	r3
    432c:	e003      	b.n	4336 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    432e:	697b      	ldr	r3, [r7, #20]
    4330:	0018      	movs	r0, r3
    4332:	4b48      	ldr	r3, [pc, #288]	; (4454 <_i2c_master_interrupt_handler+0x270>)
    4334:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4336:	697b      	ldr	r3, [r7, #20]
    4338:	8b5b      	ldrh	r3, [r3, #26]
    433a:	b29b      	uxth	r3, r3
    433c:	2b00      	cmp	r3, #0
    433e:	d047      	beq.n	43d0 <_i2c_master_interrupt_handler+0x1ec>
    4340:	697b      	ldr	r3, [r7, #20]
    4342:	8b9b      	ldrh	r3, [r3, #28]
    4344:	b29b      	uxth	r3, r3
    4346:	2b00      	cmp	r3, #0
    4348:	d142      	bne.n	43d0 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    434a:	697b      	ldr	r3, [r7, #20]
    434c:	2225      	movs	r2, #37	; 0x25
    434e:	5c9b      	ldrb	r3, [r3, r2]
    4350:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4352:	2b05      	cmp	r3, #5
    4354:	d13c      	bne.n	43d0 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4356:	697b      	ldr	r3, [r7, #20]
    4358:	2224      	movs	r2, #36	; 0x24
    435a:	5c9b      	ldrb	r3, [r3, r2]
    435c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    435e:	2b01      	cmp	r3, #1
    4360:	d136      	bne.n	43d0 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    4362:	693b      	ldr	r3, [r7, #16]
    4364:	7e1b      	ldrb	r3, [r3, #24]
    4366:	b2db      	uxtb	r3, r3
    4368:	001a      	movs	r2, r3
    436a:	2302      	movs	r3, #2
    436c:	4013      	ands	r3, r2
    436e:	d002      	beq.n	4376 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4370:	693b      	ldr	r3, [r7, #16]
    4372:	2202      	movs	r2, #2
    4374:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    4376:	693b      	ldr	r3, [r7, #16]
    4378:	2203      	movs	r2, #3
    437a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    437c:	697b      	ldr	r3, [r7, #20]
    437e:	2200      	movs	r2, #0
    4380:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    4382:	697b      	ldr	r3, [r7, #20]
    4384:	2225      	movs	r2, #37	; 0x25
    4386:	2100      	movs	r1, #0
    4388:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    438a:	230e      	movs	r3, #14
    438c:	18fb      	adds	r3, r7, r3
    438e:	781b      	ldrb	r3, [r3, #0]
    4390:	2202      	movs	r2, #2
    4392:	4013      	ands	r3, r2
    4394:	d00b      	beq.n	43ae <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    4396:	697b      	ldr	r3, [r7, #20]
    4398:	2224      	movs	r2, #36	; 0x24
    439a:	5c9b      	ldrb	r3, [r3, r2]
    439c:	b2db      	uxtb	r3, r3
    439e:	2b01      	cmp	r3, #1
    43a0:	d105      	bne.n	43ae <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    43a2:	697b      	ldr	r3, [r7, #20]
    43a4:	691b      	ldr	r3, [r3, #16]
    43a6:	697a      	ldr	r2, [r7, #20]
    43a8:	0010      	movs	r0, r2
    43aa:	4798      	blx	r3
    43ac:	e010      	b.n	43d0 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    43ae:	230e      	movs	r3, #14
    43b0:	18fb      	adds	r3, r7, r3
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	2201      	movs	r2, #1
    43b6:	4013      	ands	r3, r2
    43b8:	d00a      	beq.n	43d0 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    43ba:	697b      	ldr	r3, [r7, #20]
    43bc:	2224      	movs	r2, #36	; 0x24
    43be:	5c9b      	ldrb	r3, [r3, r2]
    43c0:	b2db      	uxtb	r3, r3
    43c2:	2b00      	cmp	r3, #0
    43c4:	d104      	bne.n	43d0 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    43c6:	697b      	ldr	r3, [r7, #20]
    43c8:	68db      	ldr	r3, [r3, #12]
    43ca:	697a      	ldr	r2, [r7, #20]
    43cc:	0010      	movs	r0, r2
    43ce:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    43d0:	697b      	ldr	r3, [r7, #20]
    43d2:	2225      	movs	r2, #37	; 0x25
    43d4:	5c9b      	ldrb	r3, [r3, r2]
    43d6:	b2db      	uxtb	r3, r3
    43d8:	2b05      	cmp	r3, #5
    43da:	d02e      	beq.n	443a <_i2c_master_interrupt_handler+0x256>
    43dc:	697b      	ldr	r3, [r7, #20]
    43de:	2225      	movs	r2, #37	; 0x25
    43e0:	5c9b      	ldrb	r3, [r3, r2]
    43e2:	b2db      	uxtb	r3, r3
    43e4:	2b00      	cmp	r3, #0
    43e6:	d028      	beq.n	443a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    43e8:	693b      	ldr	r3, [r7, #16]
    43ea:	2203      	movs	r2, #3
    43ec:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    43ee:	697b      	ldr	r3, [r7, #20]
    43f0:	2200      	movs	r2, #0
    43f2:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    43f4:	697b      	ldr	r3, [r7, #20]
    43f6:	2200      	movs	r2, #0
    43f8:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    43fa:	697b      	ldr	r3, [r7, #20]
    43fc:	2225      	movs	r2, #37	; 0x25
    43fe:	5c9b      	ldrb	r3, [r3, r2]
    4400:	b2db      	uxtb	r3, r3
    4402:	2b41      	cmp	r3, #65	; 0x41
    4404:	d00e      	beq.n	4424 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    4406:	697b      	ldr	r3, [r7, #20]
    4408:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    440a:	2b00      	cmp	r3, #0
    440c:	d00a      	beq.n	4424 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    440e:	697b      	ldr	r3, [r7, #20]
    4410:	0018      	movs	r0, r3
    4412:	4b0e      	ldr	r3, [pc, #56]	; (444c <_i2c_master_interrupt_handler+0x268>)
    4414:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    4416:	693b      	ldr	r3, [r7, #16]
    4418:	685b      	ldr	r3, [r3, #4]
    441a:	22e0      	movs	r2, #224	; 0xe0
    441c:	02d2      	lsls	r2, r2, #11
    441e:	431a      	orrs	r2, r3
    4420:	693b      	ldr	r3, [r7, #16]
    4422:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    4424:	230e      	movs	r3, #14
    4426:	18fb      	adds	r3, r7, r3
    4428:	781b      	ldrb	r3, [r3, #0]
    442a:	2204      	movs	r2, #4
    442c:	4013      	ands	r3, r2
    442e:	d004      	beq.n	443a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    4430:	697b      	ldr	r3, [r7, #20]
    4432:	695b      	ldr	r3, [r3, #20]
    4434:	697a      	ldr	r2, [r7, #20]
    4436:	0010      	movs	r0, r2
    4438:	4798      	blx	r3
		}
	}
}
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	46bd      	mov	sp, r7
    443e:	b006      	add	sp, #24
    4440:	bd80      	pop	{r7, pc}
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	2000044c 	.word	0x2000044c
    4448:	00003f49 	.word	0x00003f49
    444c:	00003db9 	.word	0x00003db9
    4450:	00003ecd 	.word	0x00003ecd
    4454:	00003ddd 	.word	0x00003ddd

00004458 <system_gclk_chan_get_config_defaults>:
{
    4458:	b580      	push	{r7, lr}
    445a:	b082      	sub	sp, #8
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	2200      	movs	r2, #0
    4464:	701a      	strb	r2, [r3, #0]
}
    4466:	46c0      	nop			; (mov r8, r8)
    4468:	46bd      	mov	sp, r7
    446a:	b002      	add	sp, #8
    446c:	bd80      	pop	{r7, pc}

0000446e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    446e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4470:	b08d      	sub	sp, #52	; 0x34
    4472:	af00      	add	r7, sp, #0
    4474:	60b8      	str	r0, [r7, #8]
    4476:	60f9      	str	r1, [r7, #12]
    4478:	603a      	str	r2, [r7, #0]
    447a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    447c:	2300      	movs	r3, #0
    447e:	2400      	movs	r4, #0
    4480:	623b      	str	r3, [r7, #32]
    4482:	627c      	str	r4, [r7, #36]	; 0x24
    4484:	2300      	movs	r3, #0
    4486:	2400      	movs	r4, #0
    4488:	61bb      	str	r3, [r7, #24]
    448a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    448c:	233f      	movs	r3, #63	; 0x3f
    448e:	62fb      	str	r3, [r7, #44]	; 0x2c
    4490:	e053      	b.n	453a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    4492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4494:	3b20      	subs	r3, #32
    4496:	2b00      	cmp	r3, #0
    4498:	db04      	blt.n	44a4 <long_division+0x36>
    449a:	2201      	movs	r2, #1
    449c:	409a      	lsls	r2, r3
    449e:	0013      	movs	r3, r2
    44a0:	617b      	str	r3, [r7, #20]
    44a2:	e00b      	b.n	44bc <long_division+0x4e>
    44a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44a6:	2220      	movs	r2, #32
    44a8:	1ad3      	subs	r3, r2, r3
    44aa:	2201      	movs	r2, #1
    44ac:	40da      	lsrs	r2, r3
    44ae:	0013      	movs	r3, r2
    44b0:	2100      	movs	r1, #0
    44b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    44b4:	4091      	lsls	r1, r2
    44b6:	000a      	movs	r2, r1
    44b8:	4313      	orrs	r3, r2
    44ba:	617b      	str	r3, [r7, #20]
    44bc:	2201      	movs	r2, #1
    44be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44c0:	409a      	lsls	r2, r3
    44c2:	0013      	movs	r3, r2
    44c4:	613b      	str	r3, [r7, #16]

		r = r << 1;
    44c6:	69bb      	ldr	r3, [r7, #24]
    44c8:	69fc      	ldr	r4, [r7, #28]
    44ca:	18db      	adds	r3, r3, r3
    44cc:	4164      	adcs	r4, r4
    44ce:	61bb      	str	r3, [r7, #24]
    44d0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    44d2:	68bb      	ldr	r3, [r7, #8]
    44d4:	693a      	ldr	r2, [r7, #16]
    44d6:	401a      	ands	r2, r3
    44d8:	0015      	movs	r5, r2
    44da:	68fb      	ldr	r3, [r7, #12]
    44dc:	697a      	ldr	r2, [r7, #20]
    44de:	401a      	ands	r2, r3
    44e0:	0016      	movs	r6, r2
    44e2:	002b      	movs	r3, r5
    44e4:	4333      	orrs	r3, r6
    44e6:	d007      	beq.n	44f8 <long_division+0x8a>
			r |= 0x01;
    44e8:	69bb      	ldr	r3, [r7, #24]
    44ea:	2201      	movs	r2, #1
    44ec:	4313      	orrs	r3, r2
    44ee:	61bb      	str	r3, [r7, #24]
    44f0:	69fb      	ldr	r3, [r7, #28]
    44f2:	2200      	movs	r2, #0
    44f4:	4313      	orrs	r3, r2
    44f6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    44f8:	687a      	ldr	r2, [r7, #4]
    44fa:	69fb      	ldr	r3, [r7, #28]
    44fc:	429a      	cmp	r2, r3
    44fe:	d819      	bhi.n	4534 <long_division+0xc6>
    4500:	687a      	ldr	r2, [r7, #4]
    4502:	69fb      	ldr	r3, [r7, #28]
    4504:	429a      	cmp	r2, r3
    4506:	d103      	bne.n	4510 <long_division+0xa2>
    4508:	683a      	ldr	r2, [r7, #0]
    450a:	69bb      	ldr	r3, [r7, #24]
    450c:	429a      	cmp	r2, r3
    450e:	d811      	bhi.n	4534 <long_division+0xc6>
			r = r - d;
    4510:	69b9      	ldr	r1, [r7, #24]
    4512:	69fa      	ldr	r2, [r7, #28]
    4514:	683b      	ldr	r3, [r7, #0]
    4516:	687c      	ldr	r4, [r7, #4]
    4518:	1ac9      	subs	r1, r1, r3
    451a:	41a2      	sbcs	r2, r4
    451c:	000b      	movs	r3, r1
    451e:	0014      	movs	r4, r2
    4520:	61bb      	str	r3, [r7, #24]
    4522:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    4524:	6a3a      	ldr	r2, [r7, #32]
    4526:	693b      	ldr	r3, [r7, #16]
    4528:	4313      	orrs	r3, r2
    452a:	623b      	str	r3, [r7, #32]
    452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    452e:	697b      	ldr	r3, [r7, #20]
    4530:	4313      	orrs	r3, r2
    4532:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    4534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4536:	3b01      	subs	r3, #1
    4538:	62fb      	str	r3, [r7, #44]	; 0x2c
    453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    453c:	2b00      	cmp	r3, #0
    453e:	daa8      	bge.n	4492 <long_division+0x24>
		}
	}

	return q;
    4540:	6a3b      	ldr	r3, [r7, #32]
    4542:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    4544:	0018      	movs	r0, r3
    4546:	0021      	movs	r1, r4
    4548:	46bd      	mov	sp, r7
    454a:	b00d      	add	sp, #52	; 0x34
    454c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000454e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    454e:	b580      	push	{r7, lr}
    4550:	b086      	sub	sp, #24
    4552:	af00      	add	r7, sp, #0
    4554:	60f8      	str	r0, [r7, #12]
    4556:	60b9      	str	r1, [r7, #8]
    4558:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    455a:	2316      	movs	r3, #22
    455c:	18fb      	adds	r3, r7, r3
    455e:	2200      	movs	r2, #0
    4560:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    4562:	68bb      	ldr	r3, [r7, #8]
    4564:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4566:	68bb      	ldr	r3, [r7, #8]
    4568:	085a      	lsrs	r2, r3, #1
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	429a      	cmp	r2, r3
    456e:	d201      	bcs.n	4574 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4570:	2340      	movs	r3, #64	; 0x40
    4572:	e026      	b.n	45c2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    4574:	68bb      	ldr	r3, [r7, #8]
    4576:	085b      	lsrs	r3, r3, #1
    4578:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    457a:	e00a      	b.n	4592 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    457c:	693a      	ldr	r2, [r7, #16]
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	1ad3      	subs	r3, r2, r3
    4582:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    4584:	2316      	movs	r3, #22
    4586:	18fb      	adds	r3, r7, r3
    4588:	881a      	ldrh	r2, [r3, #0]
    458a:	2316      	movs	r3, #22
    458c:	18fb      	adds	r3, r7, r3
    458e:	3201      	adds	r2, #1
    4590:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    4592:	693a      	ldr	r2, [r7, #16]
    4594:	68fb      	ldr	r3, [r7, #12]
    4596:	429a      	cmp	r2, r3
    4598:	d2f0      	bcs.n	457c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    459a:	2316      	movs	r3, #22
    459c:	18fb      	adds	r3, r7, r3
    459e:	2216      	movs	r2, #22
    45a0:	18ba      	adds	r2, r7, r2
    45a2:	8812      	ldrh	r2, [r2, #0]
    45a4:	3a01      	subs	r2, #1
    45a6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    45a8:	2316      	movs	r3, #22
    45aa:	18fb      	adds	r3, r7, r3
    45ac:	881b      	ldrh	r3, [r3, #0]
    45ae:	2bff      	cmp	r3, #255	; 0xff
    45b0:	d901      	bls.n	45b6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    45b2:	2340      	movs	r3, #64	; 0x40
    45b4:	e005      	b.n	45c2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	2216      	movs	r2, #22
    45ba:	18ba      	adds	r2, r7, r2
    45bc:	8812      	ldrh	r2, [r2, #0]
    45be:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    45c0:	2300      	movs	r3, #0
	}
}
    45c2:	0018      	movs	r0, r3
    45c4:	46bd      	mov	sp, r7
    45c6:	b006      	add	sp, #24
    45c8:	bd80      	pop	{r7, pc}
	...

000045cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    45cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ce:	b0a1      	sub	sp, #132	; 0x84
    45d0:	af00      	add	r7, sp, #0
    45d2:	64f8      	str	r0, [r7, #76]	; 0x4c
    45d4:	64b9      	str	r1, [r7, #72]	; 0x48
    45d6:	647a      	str	r2, [r7, #68]	; 0x44
    45d8:	2243      	movs	r2, #67	; 0x43
    45da:	18ba      	adds	r2, r7, r2
    45dc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    45de:	2300      	movs	r3, #0
    45e0:	2400      	movs	r4, #0
    45e2:	673b      	str	r3, [r7, #112]	; 0x70
    45e4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    45e6:	2300      	movs	r3, #0
    45e8:	2400      	movs	r4, #0
    45ea:	66bb      	str	r3, [r7, #104]	; 0x68
    45ec:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    45ee:	2300      	movs	r3, #0
    45f0:	2400      	movs	r4, #0
    45f2:	67bb      	str	r3, [r7, #120]	; 0x78
    45f4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    45f6:	2300      	movs	r3, #0
    45f8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    45fa:	2358      	movs	r3, #88	; 0x58
    45fc:	2240      	movs	r2, #64	; 0x40
    45fe:	4694      	mov	ip, r2
    4600:	44bc      	add	ip, r7
    4602:	4463      	add	r3, ip
    4604:	781a      	ldrb	r2, [r3, #0]
    4606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4608:	435a      	muls	r2, r3
    460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    460c:	429a      	cmp	r2, r3
    460e:	d901      	bls.n	4614 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4610:	2340      	movs	r3, #64	; 0x40
    4612:	e0b3      	b.n	477c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4614:	2343      	movs	r3, #67	; 0x43
    4616:	18fb      	adds	r3, r7, r3
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	2b00      	cmp	r3, #0
    461c:	d13d      	bne.n	469a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    461e:	2358      	movs	r3, #88	; 0x58
    4620:	2240      	movs	r2, #64	; 0x40
    4622:	4694      	mov	ip, r2
    4624:	44bc      	add	ip, r7
    4626:	4463      	add	r3, ip
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	b2db      	uxtb	r3, r3
    462c:	613b      	str	r3, [r7, #16]
    462e:	2300      	movs	r3, #0
    4630:	617b      	str	r3, [r7, #20]
    4632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4634:	60bb      	str	r3, [r7, #8]
    4636:	2300      	movs	r3, #0
    4638:	60fb      	str	r3, [r7, #12]
    463a:	4c52      	ldr	r4, [pc, #328]	; (4784 <_sercom_get_async_baud_val+0x1b8>)
    463c:	68ba      	ldr	r2, [r7, #8]
    463e:	68fb      	ldr	r3, [r7, #12]
    4640:	6938      	ldr	r0, [r7, #16]
    4642:	6979      	ldr	r1, [r7, #20]
    4644:	47a0      	blx	r4
    4646:	0003      	movs	r3, r0
    4648:	000c      	movs	r4, r1
    464a:	001b      	movs	r3, r3
    464c:	65fb      	str	r3, [r7, #92]	; 0x5c
    464e:	2300      	movs	r3, #0
    4650:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    4652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4654:	603b      	str	r3, [r7, #0]
    4656:	2300      	movs	r3, #0
    4658:	607b      	str	r3, [r7, #4]
    465a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    465c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    465e:	683a      	ldr	r2, [r7, #0]
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	4c49      	ldr	r4, [pc, #292]	; (4788 <_sercom_get_async_baud_val+0x1bc>)
    4664:	47a0      	blx	r4
    4666:	0003      	movs	r3, r0
    4668:	000c      	movs	r4, r1
    466a:	673b      	str	r3, [r7, #112]	; 0x70
    466c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    466e:	2100      	movs	r1, #0
    4670:	2201      	movs	r2, #1
    4672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4674:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    4676:	1ac9      	subs	r1, r1, r3
    4678:	41a2      	sbcs	r2, r4
    467a:	000b      	movs	r3, r1
    467c:	0014      	movs	r4, r2
    467e:	66bb      	str	r3, [r7, #104]	; 0x68
    4680:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    4682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4684:	0c1b      	lsrs	r3, r3, #16
    4686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    4688:	0416      	lsls	r6, r2, #16
    468a:	431e      	orrs	r6, r3
    468c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    468e:	041d      	lsls	r5, r3, #16
    4690:	0033      	movs	r3, r6
    4692:	67bb      	str	r3, [r7, #120]	; 0x78
    4694:	2300      	movs	r3, #0
    4696:	67fb      	str	r3, [r7, #124]	; 0x7c
    4698:	e06a      	b.n	4770 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    469a:	2343      	movs	r3, #67	; 0x43
    469c:	18fb      	adds	r3, r7, r3
    469e:	781b      	ldrb	r3, [r3, #0]
    46a0:	2b01      	cmp	r3, #1
    46a2:	d165      	bne.n	4770 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    46a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    46a6:	633b      	str	r3, [r7, #48]	; 0x30
    46a8:	2300      	movs	r3, #0
    46aa:	637b      	str	r3, [r7, #52]	; 0x34
    46ac:	2358      	movs	r3, #88	; 0x58
    46ae:	2240      	movs	r2, #64	; 0x40
    46b0:	4694      	mov	ip, r2
    46b2:	44bc      	add	ip, r7
    46b4:	4463      	add	r3, ip
    46b6:	781b      	ldrb	r3, [r3, #0]
    46b8:	b2db      	uxtb	r3, r3
    46ba:	62bb      	str	r3, [r7, #40]	; 0x28
    46bc:	2300      	movs	r3, #0
    46be:	62fb      	str	r3, [r7, #44]	; 0x2c
    46c0:	4c30      	ldr	r4, [pc, #192]	; (4784 <_sercom_get_async_baud_val+0x1b8>)
    46c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    46c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    46c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    46c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    46ca:	47a0      	blx	r4
    46cc:	0003      	movs	r3, r0
    46ce:	000c      	movs	r4, r1
    46d0:	65bb      	str	r3, [r7, #88]	; 0x58
    46d2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    46d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46d6:	623b      	str	r3, [r7, #32]
    46d8:	2300      	movs	r3, #0
    46da:	627b      	str	r3, [r7, #36]	; 0x24
    46dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    46de:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    46e0:	001a      	movs	r2, r3
    46e2:	0023      	movs	r3, r4
    46e4:	6a38      	ldr	r0, [r7, #32]
    46e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    46e8:	4c27      	ldr	r4, [pc, #156]	; (4788 <_sercom_get_async_baud_val+0x1bc>)
    46ea:	47a0      	blx	r4
    46ec:	0003      	movs	r3, r0
    46ee:	000c      	movs	r4, r1
    46f0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    46f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    46f4:	2380      	movs	r3, #128	; 0x80
    46f6:	019b      	lsls	r3, r3, #6
    46f8:	429a      	cmp	r2, r3
    46fa:	d901      	bls.n	4700 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    46fc:	2340      	movs	r3, #64	; 0x40
    46fe:	e03d      	b.n	477c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4702:	61bb      	str	r3, [r7, #24]
    4704:	2300      	movs	r3, #0
    4706:	61fb      	str	r3, [r7, #28]
    4708:	69b9      	ldr	r1, [r7, #24]
    470a:	69fa      	ldr	r2, [r7, #28]
    470c:	000b      	movs	r3, r1
    470e:	0f5b      	lsrs	r3, r3, #29
    4710:	0010      	movs	r0, r2
    4712:	00c0      	lsls	r0, r0, #3
    4714:	63f8      	str	r0, [r7, #60]	; 0x3c
    4716:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    4718:	4318      	orrs	r0, r3
    471a:	63f8      	str	r0, [r7, #60]	; 0x3c
    471c:	000b      	movs	r3, r1
    471e:	00db      	lsls	r3, r3, #3
    4720:	63bb      	str	r3, [r7, #56]	; 0x38
    4722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4724:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4726:	001a      	movs	r2, r3
    4728:	0023      	movs	r3, r4
    472a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    472c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    472e:	4c16      	ldr	r4, [pc, #88]	; (4788 <_sercom_get_async_baud_val+0x1bc>)
    4730:	47a0      	blx	r4
    4732:	0003      	movs	r3, r0
    4734:	000c      	movs	r4, r1
    4736:	65bb      	str	r3, [r7, #88]	; 0x58
    4738:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    473a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    473c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    473e:	b2d9      	uxtb	r1, r3
    4740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4742:	b2db      	uxtb	r3, r3
    4744:	00db      	lsls	r3, r3, #3
    4746:	b2da      	uxtb	r2, r3
    4748:	2317      	movs	r3, #23
    474a:	2040      	movs	r0, #64	; 0x40
    474c:	4684      	mov	ip, r0
    474e:	44bc      	add	ip, r7
    4750:	4463      	add	r3, ip
    4752:	1a8a      	subs	r2, r1, r2
    4754:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    4756:	2317      	movs	r3, #23
    4758:	2240      	movs	r2, #64	; 0x40
    475a:	4694      	mov	ip, r2
    475c:	44bc      	add	ip, r7
    475e:	4463      	add	r3, ip
    4760:	781b      	ldrb	r3, [r3, #0]
    4762:	035b      	lsls	r3, r3, #13
    4764:	001a      	movs	r2, r3
    4766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4768:	4313      	orrs	r3, r2
    476a:	67bb      	str	r3, [r7, #120]	; 0x78
    476c:	2300      	movs	r3, #0
    476e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    4770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4772:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    4774:	b29a      	uxth	r2, r3
    4776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4778:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    477a:	2300      	movs	r3, #0
}
    477c:	0018      	movs	r0, r3
    477e:	46bd      	mov	sp, r7
    4780:	b021      	add	sp, #132	; 0x84
    4782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4784:	0000c021 	.word	0x0000c021
    4788:	0000446f 	.word	0x0000446f

0000478c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    478c:	b580      	push	{r7, lr}
    478e:	b084      	sub	sp, #16
    4790:	af00      	add	r7, sp, #0
    4792:	0002      	movs	r2, r0
    4794:	1dfb      	adds	r3, r7, #7
    4796:	701a      	strb	r2, [r3, #0]
    4798:	1dbb      	adds	r3, r7, #6
    479a:	1c0a      	adds	r2, r1, #0
    479c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    479e:	4b1a      	ldr	r3, [pc, #104]	; (4808 <sercom_set_gclk_generator+0x7c>)
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	2201      	movs	r2, #1
    47a4:	4053      	eors	r3, r2
    47a6:	b2db      	uxtb	r3, r3
    47a8:	2b00      	cmp	r3, #0
    47aa:	d103      	bne.n	47b4 <sercom_set_gclk_generator+0x28>
    47ac:	1dbb      	adds	r3, r7, #6
    47ae:	781b      	ldrb	r3, [r3, #0]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d01b      	beq.n	47ec <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    47b4:	230c      	movs	r3, #12
    47b6:	18fb      	adds	r3, r7, r3
    47b8:	0018      	movs	r0, r3
    47ba:	4b14      	ldr	r3, [pc, #80]	; (480c <sercom_set_gclk_generator+0x80>)
    47bc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    47be:	230c      	movs	r3, #12
    47c0:	18fb      	adds	r3, r7, r3
    47c2:	1dfa      	adds	r2, r7, #7
    47c4:	7812      	ldrb	r2, [r2, #0]
    47c6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    47c8:	230c      	movs	r3, #12
    47ca:	18fb      	adds	r3, r7, r3
    47cc:	0019      	movs	r1, r3
    47ce:	2013      	movs	r0, #19
    47d0:	4b0f      	ldr	r3, [pc, #60]	; (4810 <sercom_set_gclk_generator+0x84>)
    47d2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    47d4:	2013      	movs	r0, #19
    47d6:	4b0f      	ldr	r3, [pc, #60]	; (4814 <sercom_set_gclk_generator+0x88>)
    47d8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    47da:	4b0b      	ldr	r3, [pc, #44]	; (4808 <sercom_set_gclk_generator+0x7c>)
    47dc:	1dfa      	adds	r2, r7, #7
    47de:	7812      	ldrb	r2, [r2, #0]
    47e0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    47e2:	4b09      	ldr	r3, [pc, #36]	; (4808 <sercom_set_gclk_generator+0x7c>)
    47e4:	2201      	movs	r2, #1
    47e6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    47e8:	2300      	movs	r3, #0
    47ea:	e008      	b.n	47fe <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    47ec:	4b06      	ldr	r3, [pc, #24]	; (4808 <sercom_set_gclk_generator+0x7c>)
    47ee:	785b      	ldrb	r3, [r3, #1]
    47f0:	1dfa      	adds	r2, r7, #7
    47f2:	7812      	ldrb	r2, [r2, #0]
    47f4:	429a      	cmp	r2, r3
    47f6:	d101      	bne.n	47fc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    47f8:	2300      	movs	r3, #0
    47fa:	e000      	b.n	47fe <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    47fc:	231d      	movs	r3, #29
}
    47fe:	0018      	movs	r0, r3
    4800:	46bd      	mov	sp, r7
    4802:	b004      	add	sp, #16
    4804:	bd80      	pop	{r7, pc}
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	20000278 	.word	0x20000278
    480c:	00004459 	.word	0x00004459
    4810:	00006835 	.word	0x00006835
    4814:	00006879 	.word	0x00006879

00004818 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    4818:	b580      	push	{r7, lr}
    481a:	b082      	sub	sp, #8
    481c:	af00      	add	r7, sp, #0
    481e:	6078      	str	r0, [r7, #4]
    4820:	000a      	movs	r2, r1
    4822:	1cfb      	adds	r3, r7, #3
    4824:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    4826:	687b      	ldr	r3, [r7, #4]
    4828:	4a4d      	ldr	r2, [pc, #308]	; (4960 <_sercom_get_default_pad+0x148>)
    482a:	4293      	cmp	r3, r2
    482c:	d03f      	beq.n	48ae <_sercom_get_default_pad+0x96>
    482e:	4a4c      	ldr	r2, [pc, #304]	; (4960 <_sercom_get_default_pad+0x148>)
    4830:	4293      	cmp	r3, r2
    4832:	d806      	bhi.n	4842 <_sercom_get_default_pad+0x2a>
    4834:	4a4b      	ldr	r2, [pc, #300]	; (4964 <_sercom_get_default_pad+0x14c>)
    4836:	4293      	cmp	r3, r2
    4838:	d00f      	beq.n	485a <_sercom_get_default_pad+0x42>
    483a:	4a4b      	ldr	r2, [pc, #300]	; (4968 <_sercom_get_default_pad+0x150>)
    483c:	4293      	cmp	r3, r2
    483e:	d021      	beq.n	4884 <_sercom_get_default_pad+0x6c>
    4840:	e089      	b.n	4956 <_sercom_get_default_pad+0x13e>
    4842:	4a4a      	ldr	r2, [pc, #296]	; (496c <_sercom_get_default_pad+0x154>)
    4844:	4293      	cmp	r3, r2
    4846:	d100      	bne.n	484a <_sercom_get_default_pad+0x32>
    4848:	e05b      	b.n	4902 <_sercom_get_default_pad+0xea>
    484a:	4a49      	ldr	r2, [pc, #292]	; (4970 <_sercom_get_default_pad+0x158>)
    484c:	4293      	cmp	r3, r2
    484e:	d100      	bne.n	4852 <_sercom_get_default_pad+0x3a>
    4850:	e06c      	b.n	492c <_sercom_get_default_pad+0x114>
    4852:	4a48      	ldr	r2, [pc, #288]	; (4974 <_sercom_get_default_pad+0x15c>)
    4854:	4293      	cmp	r3, r2
    4856:	d03f      	beq.n	48d8 <_sercom_get_default_pad+0xc0>
    4858:	e07d      	b.n	4956 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    485a:	1cfb      	adds	r3, r7, #3
    485c:	781b      	ldrb	r3, [r3, #0]
    485e:	2b01      	cmp	r3, #1
    4860:	d00a      	beq.n	4878 <_sercom_get_default_pad+0x60>
    4862:	dc02      	bgt.n	486a <_sercom_get_default_pad+0x52>
    4864:	2b00      	cmp	r3, #0
    4866:	d005      	beq.n	4874 <_sercom_get_default_pad+0x5c>
    4868:	e075      	b.n	4956 <_sercom_get_default_pad+0x13e>
    486a:	2b02      	cmp	r3, #2
    486c:	d006      	beq.n	487c <_sercom_get_default_pad+0x64>
    486e:	2b03      	cmp	r3, #3
    4870:	d006      	beq.n	4880 <_sercom_get_default_pad+0x68>
    4872:	e070      	b.n	4956 <_sercom_get_default_pad+0x13e>
    4874:	4b40      	ldr	r3, [pc, #256]	; (4978 <_sercom_get_default_pad+0x160>)
    4876:	e06f      	b.n	4958 <_sercom_get_default_pad+0x140>
    4878:	4b40      	ldr	r3, [pc, #256]	; (497c <_sercom_get_default_pad+0x164>)
    487a:	e06d      	b.n	4958 <_sercom_get_default_pad+0x140>
    487c:	4b40      	ldr	r3, [pc, #256]	; (4980 <_sercom_get_default_pad+0x168>)
    487e:	e06b      	b.n	4958 <_sercom_get_default_pad+0x140>
    4880:	4b40      	ldr	r3, [pc, #256]	; (4984 <_sercom_get_default_pad+0x16c>)
    4882:	e069      	b.n	4958 <_sercom_get_default_pad+0x140>
    4884:	1cfb      	adds	r3, r7, #3
    4886:	781b      	ldrb	r3, [r3, #0]
    4888:	2b01      	cmp	r3, #1
    488a:	d00a      	beq.n	48a2 <_sercom_get_default_pad+0x8a>
    488c:	dc02      	bgt.n	4894 <_sercom_get_default_pad+0x7c>
    488e:	2b00      	cmp	r3, #0
    4890:	d005      	beq.n	489e <_sercom_get_default_pad+0x86>
    4892:	e060      	b.n	4956 <_sercom_get_default_pad+0x13e>
    4894:	2b02      	cmp	r3, #2
    4896:	d006      	beq.n	48a6 <_sercom_get_default_pad+0x8e>
    4898:	2b03      	cmp	r3, #3
    489a:	d006      	beq.n	48aa <_sercom_get_default_pad+0x92>
    489c:	e05b      	b.n	4956 <_sercom_get_default_pad+0x13e>
    489e:	2303      	movs	r3, #3
    48a0:	e05a      	b.n	4958 <_sercom_get_default_pad+0x140>
    48a2:	4b39      	ldr	r3, [pc, #228]	; (4988 <_sercom_get_default_pad+0x170>)
    48a4:	e058      	b.n	4958 <_sercom_get_default_pad+0x140>
    48a6:	4b39      	ldr	r3, [pc, #228]	; (498c <_sercom_get_default_pad+0x174>)
    48a8:	e056      	b.n	4958 <_sercom_get_default_pad+0x140>
    48aa:	4b39      	ldr	r3, [pc, #228]	; (4990 <_sercom_get_default_pad+0x178>)
    48ac:	e054      	b.n	4958 <_sercom_get_default_pad+0x140>
    48ae:	1cfb      	adds	r3, r7, #3
    48b0:	781b      	ldrb	r3, [r3, #0]
    48b2:	2b01      	cmp	r3, #1
    48b4:	d00a      	beq.n	48cc <_sercom_get_default_pad+0xb4>
    48b6:	dc02      	bgt.n	48be <_sercom_get_default_pad+0xa6>
    48b8:	2b00      	cmp	r3, #0
    48ba:	d005      	beq.n	48c8 <_sercom_get_default_pad+0xb0>
    48bc:	e04b      	b.n	4956 <_sercom_get_default_pad+0x13e>
    48be:	2b02      	cmp	r3, #2
    48c0:	d006      	beq.n	48d0 <_sercom_get_default_pad+0xb8>
    48c2:	2b03      	cmp	r3, #3
    48c4:	d006      	beq.n	48d4 <_sercom_get_default_pad+0xbc>
    48c6:	e046      	b.n	4956 <_sercom_get_default_pad+0x13e>
    48c8:	4b32      	ldr	r3, [pc, #200]	; (4994 <_sercom_get_default_pad+0x17c>)
    48ca:	e045      	b.n	4958 <_sercom_get_default_pad+0x140>
    48cc:	4b32      	ldr	r3, [pc, #200]	; (4998 <_sercom_get_default_pad+0x180>)
    48ce:	e043      	b.n	4958 <_sercom_get_default_pad+0x140>
    48d0:	4b32      	ldr	r3, [pc, #200]	; (499c <_sercom_get_default_pad+0x184>)
    48d2:	e041      	b.n	4958 <_sercom_get_default_pad+0x140>
    48d4:	4b32      	ldr	r3, [pc, #200]	; (49a0 <_sercom_get_default_pad+0x188>)
    48d6:	e03f      	b.n	4958 <_sercom_get_default_pad+0x140>
    48d8:	1cfb      	adds	r3, r7, #3
    48da:	781b      	ldrb	r3, [r3, #0]
    48dc:	2b01      	cmp	r3, #1
    48de:	d00a      	beq.n	48f6 <_sercom_get_default_pad+0xde>
    48e0:	dc02      	bgt.n	48e8 <_sercom_get_default_pad+0xd0>
    48e2:	2b00      	cmp	r3, #0
    48e4:	d005      	beq.n	48f2 <_sercom_get_default_pad+0xda>
    48e6:	e036      	b.n	4956 <_sercom_get_default_pad+0x13e>
    48e8:	2b02      	cmp	r3, #2
    48ea:	d006      	beq.n	48fa <_sercom_get_default_pad+0xe2>
    48ec:	2b03      	cmp	r3, #3
    48ee:	d006      	beq.n	48fe <_sercom_get_default_pad+0xe6>
    48f0:	e031      	b.n	4956 <_sercom_get_default_pad+0x13e>
    48f2:	4b2c      	ldr	r3, [pc, #176]	; (49a4 <_sercom_get_default_pad+0x18c>)
    48f4:	e030      	b.n	4958 <_sercom_get_default_pad+0x140>
    48f6:	4b2c      	ldr	r3, [pc, #176]	; (49a8 <_sercom_get_default_pad+0x190>)
    48f8:	e02e      	b.n	4958 <_sercom_get_default_pad+0x140>
    48fa:	4b2c      	ldr	r3, [pc, #176]	; (49ac <_sercom_get_default_pad+0x194>)
    48fc:	e02c      	b.n	4958 <_sercom_get_default_pad+0x140>
    48fe:	4b2c      	ldr	r3, [pc, #176]	; (49b0 <_sercom_get_default_pad+0x198>)
    4900:	e02a      	b.n	4958 <_sercom_get_default_pad+0x140>
    4902:	1cfb      	adds	r3, r7, #3
    4904:	781b      	ldrb	r3, [r3, #0]
    4906:	2b01      	cmp	r3, #1
    4908:	d00a      	beq.n	4920 <_sercom_get_default_pad+0x108>
    490a:	dc02      	bgt.n	4912 <_sercom_get_default_pad+0xfa>
    490c:	2b00      	cmp	r3, #0
    490e:	d005      	beq.n	491c <_sercom_get_default_pad+0x104>
    4910:	e021      	b.n	4956 <_sercom_get_default_pad+0x13e>
    4912:	2b02      	cmp	r3, #2
    4914:	d006      	beq.n	4924 <_sercom_get_default_pad+0x10c>
    4916:	2b03      	cmp	r3, #3
    4918:	d006      	beq.n	4928 <_sercom_get_default_pad+0x110>
    491a:	e01c      	b.n	4956 <_sercom_get_default_pad+0x13e>
    491c:	4b25      	ldr	r3, [pc, #148]	; (49b4 <_sercom_get_default_pad+0x19c>)
    491e:	e01b      	b.n	4958 <_sercom_get_default_pad+0x140>
    4920:	4b25      	ldr	r3, [pc, #148]	; (49b8 <_sercom_get_default_pad+0x1a0>)
    4922:	e019      	b.n	4958 <_sercom_get_default_pad+0x140>
    4924:	4b25      	ldr	r3, [pc, #148]	; (49bc <_sercom_get_default_pad+0x1a4>)
    4926:	e017      	b.n	4958 <_sercom_get_default_pad+0x140>
    4928:	4b25      	ldr	r3, [pc, #148]	; (49c0 <_sercom_get_default_pad+0x1a8>)
    492a:	e015      	b.n	4958 <_sercom_get_default_pad+0x140>
    492c:	1cfb      	adds	r3, r7, #3
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	2b01      	cmp	r3, #1
    4932:	d00a      	beq.n	494a <_sercom_get_default_pad+0x132>
    4934:	dc02      	bgt.n	493c <_sercom_get_default_pad+0x124>
    4936:	2b00      	cmp	r3, #0
    4938:	d005      	beq.n	4946 <_sercom_get_default_pad+0x12e>
    493a:	e00c      	b.n	4956 <_sercom_get_default_pad+0x13e>
    493c:	2b02      	cmp	r3, #2
    493e:	d006      	beq.n	494e <_sercom_get_default_pad+0x136>
    4940:	2b03      	cmp	r3, #3
    4942:	d006      	beq.n	4952 <_sercom_get_default_pad+0x13a>
    4944:	e007      	b.n	4956 <_sercom_get_default_pad+0x13e>
    4946:	4b1f      	ldr	r3, [pc, #124]	; (49c4 <_sercom_get_default_pad+0x1ac>)
    4948:	e006      	b.n	4958 <_sercom_get_default_pad+0x140>
    494a:	4b1f      	ldr	r3, [pc, #124]	; (49c8 <_sercom_get_default_pad+0x1b0>)
    494c:	e004      	b.n	4958 <_sercom_get_default_pad+0x140>
    494e:	4b1f      	ldr	r3, [pc, #124]	; (49cc <_sercom_get_default_pad+0x1b4>)
    4950:	e002      	b.n	4958 <_sercom_get_default_pad+0x140>
    4952:	4b1f      	ldr	r3, [pc, #124]	; (49d0 <_sercom_get_default_pad+0x1b8>)
    4954:	e000      	b.n	4958 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    4956:	2300      	movs	r3, #0
}
    4958:	0018      	movs	r0, r3
    495a:	46bd      	mov	sp, r7
    495c:	b002      	add	sp, #8
    495e:	bd80      	pop	{r7, pc}
    4960:	42001000 	.word	0x42001000
    4964:	42000800 	.word	0x42000800
    4968:	42000c00 	.word	0x42000c00
    496c:	42001800 	.word	0x42001800
    4970:	42001c00 	.word	0x42001c00
    4974:	42001400 	.word	0x42001400
    4978:	00040003 	.word	0x00040003
    497c:	00050003 	.word	0x00050003
    4980:	00060003 	.word	0x00060003
    4984:	00070003 	.word	0x00070003
    4988:	00010003 	.word	0x00010003
    498c:	001e0003 	.word	0x001e0003
    4990:	001f0003 	.word	0x001f0003
    4994:	00080003 	.word	0x00080003
    4998:	00090003 	.word	0x00090003
    499c:	000a0003 	.word	0x000a0003
    49a0:	000b0003 	.word	0x000b0003
    49a4:	00100003 	.word	0x00100003
    49a8:	00110003 	.word	0x00110003
    49ac:	00120003 	.word	0x00120003
    49b0:	00130003 	.word	0x00130003
    49b4:	000c0003 	.word	0x000c0003
    49b8:	000d0003 	.word	0x000d0003
    49bc:	000e0003 	.word	0x000e0003
    49c0:	000f0003 	.word	0x000f0003
    49c4:	00160003 	.word	0x00160003
    49c8:	00170003 	.word	0x00170003
    49cc:	00180003 	.word	0x00180003
    49d0:	00190003 	.word	0x00190003

000049d4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    49d4:	b590      	push	{r4, r7, lr}
    49d6:	b08b      	sub	sp, #44	; 0x2c
    49d8:	af00      	add	r7, sp, #0
    49da:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    49dc:	230c      	movs	r3, #12
    49de:	18fb      	adds	r3, r7, r3
    49e0:	4a0f      	ldr	r2, [pc, #60]	; (4a20 <_sercom_get_sercom_inst_index+0x4c>)
    49e2:	ca13      	ldmia	r2!, {r0, r1, r4}
    49e4:	c313      	stmia	r3!, {r0, r1, r4}
    49e6:	ca13      	ldmia	r2!, {r0, r1, r4}
    49e8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    49ea:	2300      	movs	r3, #0
    49ec:	627b      	str	r3, [r7, #36]	; 0x24
    49ee:	e00e      	b.n	4a0e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    49f0:	230c      	movs	r3, #12
    49f2:	18fb      	adds	r3, r7, r3
    49f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    49f6:	0092      	lsls	r2, r2, #2
    49f8:	58d3      	ldr	r3, [r2, r3]
    49fa:	001a      	movs	r2, r3
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	429a      	cmp	r2, r3
    4a00:	d102      	bne.n	4a08 <_sercom_get_sercom_inst_index+0x34>
			return i;
    4a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a04:	b2db      	uxtb	r3, r3
    4a06:	e006      	b.n	4a16 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a0a:	3301      	adds	r3, #1
    4a0c:	627b      	str	r3, [r7, #36]	; 0x24
    4a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a10:	2b05      	cmp	r3, #5
    4a12:	d9ed      	bls.n	49f0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4a14:	2300      	movs	r3, #0
}
    4a16:	0018      	movs	r0, r3
    4a18:	46bd      	mov	sp, r7
    4a1a:	b00b      	add	sp, #44	; 0x2c
    4a1c:	bd90      	pop	{r4, r7, pc}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	0000e5e4 	.word	0x0000e5e4

00004a24 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4a24:	b580      	push	{r7, lr}
    4a26:	b086      	sub	sp, #24
    4a28:	af00      	add	r7, sp, #0
    4a2a:	60f8      	str	r0, [r7, #12]
    4a2c:	60b9      	str	r1, [r7, #8]
    4a2e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    4a30:	2300      	movs	r3, #0
    4a32:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    4a34:	68fb      	ldr	r3, [r7, #12]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d012      	beq.n	4a60 <_read+0x3c>
		return -1;
    4a3a:	2301      	movs	r3, #1
    4a3c:	425b      	negs	r3, r3
    4a3e:	e013      	b.n	4a68 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    4a40:	4b0b      	ldr	r3, [pc, #44]	; (4a70 <_read+0x4c>)
    4a42:	681a      	ldr	r2, [r3, #0]
    4a44:	4b0b      	ldr	r3, [pc, #44]	; (4a74 <_read+0x50>)
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	68b9      	ldr	r1, [r7, #8]
    4a4a:	0018      	movs	r0, r3
    4a4c:	4790      	blx	r2
		ptr++;
    4a4e:	68bb      	ldr	r3, [r7, #8]
    4a50:	3301      	adds	r3, #1
    4a52:	60bb      	str	r3, [r7, #8]
		nChars++;
    4a54:	697b      	ldr	r3, [r7, #20]
    4a56:	3301      	adds	r3, #1
    4a58:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	3b01      	subs	r3, #1
    4a5e:	607b      	str	r3, [r7, #4]
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	2b00      	cmp	r3, #0
    4a64:	dcec      	bgt.n	4a40 <_read+0x1c>
	}
	return nChars;
    4a66:	697b      	ldr	r3, [r7, #20]
}
    4a68:	0018      	movs	r0, r3
    4a6a:	46bd      	mov	sp, r7
    4a6c:	b006      	add	sp, #24
    4a6e:	bd80      	pop	{r7, pc}
    4a70:	20000440 	.word	0x20000440
    4a74:	20000448 	.word	0x20000448

00004a78 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4a78:	b580      	push	{r7, lr}
    4a7a:	b086      	sub	sp, #24
    4a7c:	af00      	add	r7, sp, #0
    4a7e:	60f8      	str	r0, [r7, #12]
    4a80:	60b9      	str	r1, [r7, #8]
    4a82:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    4a84:	2300      	movs	r3, #0
    4a86:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    4a88:	68fb      	ldr	r3, [r7, #12]
    4a8a:	2b01      	cmp	r3, #1
    4a8c:	d01d      	beq.n	4aca <_write+0x52>
    4a8e:	68fb      	ldr	r3, [r7, #12]
    4a90:	2b02      	cmp	r3, #2
    4a92:	d01a      	beq.n	4aca <_write+0x52>
    4a94:	68fb      	ldr	r3, [r7, #12]
    4a96:	2b03      	cmp	r3, #3
    4a98:	d017      	beq.n	4aca <_write+0x52>
		return -1;
    4a9a:	2301      	movs	r3, #1
    4a9c:	425b      	negs	r3, r3
    4a9e:	e018      	b.n	4ad2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4aa0:	4b0e      	ldr	r3, [pc, #56]	; (4adc <_write+0x64>)
    4aa2:	681a      	ldr	r2, [r3, #0]
    4aa4:	4b0e      	ldr	r3, [pc, #56]	; (4ae0 <_write+0x68>)
    4aa6:	6818      	ldr	r0, [r3, #0]
    4aa8:	68bb      	ldr	r3, [r7, #8]
    4aaa:	1c59      	adds	r1, r3, #1
    4aac:	60b9      	str	r1, [r7, #8]
    4aae:	781b      	ldrb	r3, [r3, #0]
    4ab0:	0019      	movs	r1, r3
    4ab2:	4790      	blx	r2
    4ab4:	1e03      	subs	r3, r0, #0
    4ab6:	da02      	bge.n	4abe <_write+0x46>
			return -1;
    4ab8:	2301      	movs	r3, #1
    4aba:	425b      	negs	r3, r3
    4abc:	e009      	b.n	4ad2 <_write+0x5a>
		}
		++nChars;
    4abe:	697b      	ldr	r3, [r7, #20]
    4ac0:	3301      	adds	r3, #1
    4ac2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	3b01      	subs	r3, #1
    4ac8:	607b      	str	r3, [r7, #4]
    4aca:	687b      	ldr	r3, [r7, #4]
    4acc:	2b00      	cmp	r3, #0
    4ace:	d1e7      	bne.n	4aa0 <_write+0x28>
	}
	return nChars;
    4ad0:	697b      	ldr	r3, [r7, #20]
}
    4ad2:	0018      	movs	r0, r3
    4ad4:	46bd      	mov	sp, r7
    4ad6:	b006      	add	sp, #24
    4ad8:	bd80      	pop	{r7, pc}
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	20000444 	.word	0x20000444
    4ae0:	20000448 	.word	0x20000448

00004ae4 <system_gclk_chan_get_config_defaults>:
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	b082      	sub	sp, #8
    4ae8:	af00      	add	r7, sp, #0
    4aea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	2200      	movs	r2, #0
    4af0:	701a      	strb	r2, [r3, #0]
}
    4af2:	46c0      	nop			; (mov r8, r8)
    4af4:	46bd      	mov	sp, r7
    4af6:	b002      	add	sp, #8
    4af8:	bd80      	pop	{r7, pc}
	...

00004afc <system_apb_clock_set_mask>:
{
    4afc:	b580      	push	{r7, lr}
    4afe:	b082      	sub	sp, #8
    4b00:	af00      	add	r7, sp, #0
    4b02:	0002      	movs	r2, r0
    4b04:	6039      	str	r1, [r7, #0]
    4b06:	1dfb      	adds	r3, r7, #7
    4b08:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b0a:	1dfb      	adds	r3, r7, #7
    4b0c:	781b      	ldrb	r3, [r3, #0]
    4b0e:	2b01      	cmp	r3, #1
    4b10:	d00a      	beq.n	4b28 <system_apb_clock_set_mask+0x2c>
    4b12:	2b02      	cmp	r3, #2
    4b14:	d00f      	beq.n	4b36 <system_apb_clock_set_mask+0x3a>
    4b16:	2b00      	cmp	r3, #0
    4b18:	d114      	bne.n	4b44 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4b1a:	4b0e      	ldr	r3, [pc, #56]	; (4b54 <system_apb_clock_set_mask+0x58>)
    4b1c:	4a0d      	ldr	r2, [pc, #52]	; (4b54 <system_apb_clock_set_mask+0x58>)
    4b1e:	6991      	ldr	r1, [r2, #24]
    4b20:	683a      	ldr	r2, [r7, #0]
    4b22:	430a      	orrs	r2, r1
    4b24:	619a      	str	r2, [r3, #24]
			break;
    4b26:	e00f      	b.n	4b48 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4b28:	4b0a      	ldr	r3, [pc, #40]	; (4b54 <system_apb_clock_set_mask+0x58>)
    4b2a:	4a0a      	ldr	r2, [pc, #40]	; (4b54 <system_apb_clock_set_mask+0x58>)
    4b2c:	69d1      	ldr	r1, [r2, #28]
    4b2e:	683a      	ldr	r2, [r7, #0]
    4b30:	430a      	orrs	r2, r1
    4b32:	61da      	str	r2, [r3, #28]
			break;
    4b34:	e008      	b.n	4b48 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4b36:	4b07      	ldr	r3, [pc, #28]	; (4b54 <system_apb_clock_set_mask+0x58>)
    4b38:	4a06      	ldr	r2, [pc, #24]	; (4b54 <system_apb_clock_set_mask+0x58>)
    4b3a:	6a11      	ldr	r1, [r2, #32]
    4b3c:	683a      	ldr	r2, [r7, #0]
    4b3e:	430a      	orrs	r2, r1
    4b40:	621a      	str	r2, [r3, #32]
			break;
    4b42:	e001      	b.n	4b48 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4b44:	2317      	movs	r3, #23
    4b46:	e000      	b.n	4b4a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4b48:	2300      	movs	r3, #0
}
    4b4a:	0018      	movs	r0, r3
    4b4c:	46bd      	mov	sp, r7
    4b4e:	b002      	add	sp, #8
    4b50:	bd80      	pop	{r7, pc}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	40000400 	.word	0x40000400

00004b58 <system_pinmux_get_config_defaults>:
{
    4b58:	b580      	push	{r7, lr}
    4b5a:	b082      	sub	sp, #8
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	2280      	movs	r2, #128	; 0x80
    4b64:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b66:	687b      	ldr	r3, [r7, #4]
    4b68:	2200      	movs	r2, #0
    4b6a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4b6c:	687b      	ldr	r3, [r7, #4]
    4b6e:	2201      	movs	r2, #1
    4b70:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4b72:	687b      	ldr	r3, [r7, #4]
    4b74:	2200      	movs	r2, #0
    4b76:	70da      	strb	r2, [r3, #3]
}
    4b78:	46c0      	nop			; (mov r8, r8)
    4b7a:	46bd      	mov	sp, r7
    4b7c:	b002      	add	sp, #8
    4b7e:	bd80      	pop	{r7, pc}

00004b80 <system_is_debugger_present>:
{
    4b80:	b580      	push	{r7, lr}
    4b82:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4b84:	4b05      	ldr	r3, [pc, #20]	; (4b9c <system_is_debugger_present+0x1c>)
    4b86:	789b      	ldrb	r3, [r3, #2]
    4b88:	b2db      	uxtb	r3, r3
    4b8a:	001a      	movs	r2, r3
    4b8c:	2302      	movs	r3, #2
    4b8e:	4013      	ands	r3, r2
    4b90:	1e5a      	subs	r2, r3, #1
    4b92:	4193      	sbcs	r3, r2
    4b94:	b2db      	uxtb	r3, r3
}
    4b96:	0018      	movs	r0, r3
    4b98:	46bd      	mov	sp, r7
    4b9a:	bd80      	pop	{r7, pc}
    4b9c:	41002000 	.word	0x41002000

00004ba0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	b084      	sub	sp, #16
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4ba8:	687b      	ldr	r3, [r7, #4]
    4baa:	681b      	ldr	r3, [r3, #0]
    4bac:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4bae:	68fb      	ldr	r3, [r7, #12]
    4bb0:	69db      	ldr	r3, [r3, #28]
    4bb2:	1e5a      	subs	r2, r3, #1
    4bb4:	4193      	sbcs	r3, r2
    4bb6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4bb8:	0018      	movs	r0, r3
    4bba:	46bd      	mov	sp, r7
    4bbc:	b004      	add	sp, #16
    4bbe:	bd80      	pop	{r7, pc}

00004bc0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	b082      	sub	sp, #8
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4bc8:	46c0      	nop			; (mov r8, r8)
    4bca:	687b      	ldr	r3, [r7, #4]
    4bcc:	0018      	movs	r0, r3
    4bce:	4b04      	ldr	r3, [pc, #16]	; (4be0 <_usart_wait_for_sync+0x20>)
    4bd0:	4798      	blx	r3
    4bd2:	1e03      	subs	r3, r0, #0
    4bd4:	d1f9      	bne.n	4bca <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	46bd      	mov	sp, r7
    4bda:	b002      	add	sp, #8
    4bdc:	bd80      	pop	{r7, pc}
    4bde:	46c0      	nop			; (mov r8, r8)
    4be0:	00004ba1 	.word	0x00004ba1

00004be4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4be4:	b5b0      	push	{r4, r5, r7, lr}
    4be6:	b08c      	sub	sp, #48	; 0x30
    4be8:	af02      	add	r7, sp, #8
    4bea:	6078      	str	r0, [r7, #4]
    4bec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4bee:	687b      	ldr	r3, [r7, #4]
    4bf0:	681b      	ldr	r3, [r3, #0]
    4bf2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	0018      	movs	r0, r3
    4bfa:	4bab      	ldr	r3, [pc, #684]	; (4ea8 <_usart_set_config+0x2c4>)
    4bfc:	4798      	blx	r3
    4bfe:	0003      	movs	r3, r0
    4c00:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4c02:	697b      	ldr	r3, [r7, #20]
    4c04:	3314      	adds	r3, #20
    4c06:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4c08:	2300      	movs	r3, #0
    4c0a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4c0c:	2300      	movs	r3, #0
    4c0e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4c10:	230a      	movs	r3, #10
    4c12:	18fb      	adds	r3, r7, r3
    4c14:	2200      	movs	r2, #0
    4c16:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4c18:	231f      	movs	r3, #31
    4c1a:	18fb      	adds	r3, r7, r3
    4c1c:	2200      	movs	r2, #0
    4c1e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4c20:	231e      	movs	r3, #30
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	2210      	movs	r2, #16
    4c26:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4c28:	683b      	ldr	r3, [r7, #0]
    4c2a:	8a1b      	ldrh	r3, [r3, #16]
    4c2c:	2280      	movs	r2, #128	; 0x80
    4c2e:	01d2      	lsls	r2, r2, #7
    4c30:	4293      	cmp	r3, r2
    4c32:	d01c      	beq.n	4c6e <_usart_set_config+0x8a>
    4c34:	2280      	movs	r2, #128	; 0x80
    4c36:	01d2      	lsls	r2, r2, #7
    4c38:	4293      	cmp	r3, r2
    4c3a:	dc06      	bgt.n	4c4a <_usart_set_config+0x66>
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d00d      	beq.n	4c5c <_usart_set_config+0x78>
    4c40:	2280      	movs	r2, #128	; 0x80
    4c42:	0192      	lsls	r2, r2, #6
    4c44:	4293      	cmp	r3, r2
    4c46:	d024      	beq.n	4c92 <_usart_set_config+0xae>
    4c48:	e035      	b.n	4cb6 <_usart_set_config+0xd2>
    4c4a:	22c0      	movs	r2, #192	; 0xc0
    4c4c:	01d2      	lsls	r2, r2, #7
    4c4e:	4293      	cmp	r3, r2
    4c50:	d028      	beq.n	4ca4 <_usart_set_config+0xc0>
    4c52:	2280      	movs	r2, #128	; 0x80
    4c54:	0212      	lsls	r2, r2, #8
    4c56:	4293      	cmp	r3, r2
    4c58:	d012      	beq.n	4c80 <_usart_set_config+0x9c>
    4c5a:	e02c      	b.n	4cb6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4c5c:	231f      	movs	r3, #31
    4c5e:	18fb      	adds	r3, r7, r3
    4c60:	2200      	movs	r2, #0
    4c62:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4c64:	231e      	movs	r3, #30
    4c66:	18fb      	adds	r3, r7, r3
    4c68:	2210      	movs	r2, #16
    4c6a:	701a      	strb	r2, [r3, #0]
			break;
    4c6c:	e023      	b.n	4cb6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4c6e:	231f      	movs	r3, #31
    4c70:	18fb      	adds	r3, r7, r3
    4c72:	2200      	movs	r2, #0
    4c74:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4c76:	231e      	movs	r3, #30
    4c78:	18fb      	adds	r3, r7, r3
    4c7a:	2208      	movs	r2, #8
    4c7c:	701a      	strb	r2, [r3, #0]
			break;
    4c7e:	e01a      	b.n	4cb6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4c80:	231f      	movs	r3, #31
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	2200      	movs	r2, #0
    4c86:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4c88:	231e      	movs	r3, #30
    4c8a:	18fb      	adds	r3, r7, r3
    4c8c:	2203      	movs	r2, #3
    4c8e:	701a      	strb	r2, [r3, #0]
			break;
    4c90:	e011      	b.n	4cb6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4c92:	231f      	movs	r3, #31
    4c94:	18fb      	adds	r3, r7, r3
    4c96:	2201      	movs	r2, #1
    4c98:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4c9a:	231e      	movs	r3, #30
    4c9c:	18fb      	adds	r3, r7, r3
    4c9e:	2210      	movs	r2, #16
    4ca0:	701a      	strb	r2, [r3, #0]
			break;
    4ca2:	e008      	b.n	4cb6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4ca4:	231f      	movs	r3, #31
    4ca6:	18fb      	adds	r3, r7, r3
    4ca8:	2201      	movs	r2, #1
    4caa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4cac:	231e      	movs	r3, #30
    4cae:	18fb      	adds	r3, r7, r3
    4cb0:	2208      	movs	r2, #8
    4cb2:	701a      	strb	r2, [r3, #0]
			break;
    4cb4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4cb6:	683b      	ldr	r3, [r7, #0]
    4cb8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4cba:	683b      	ldr	r3, [r7, #0]
    4cbc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    4cbe:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4cc0:	683b      	ldr	r3, [r7, #0]
    4cc2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    4cc4:	4313      	orrs	r3, r2
		config->sample_rate |
    4cc6:	683a      	ldr	r2, [r7, #0]
    4cc8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    4cca:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4ccc:	683a      	ldr	r2, [r7, #0]
    4cce:	7e12      	ldrb	r2, [r2, #24]
    4cd0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    4cd2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4cd4:	683a      	ldr	r2, [r7, #0]
    4cd6:	2126      	movs	r1, #38	; 0x26
    4cd8:	5c52      	ldrb	r2, [r2, r1]
    4cda:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    4cdc:	4313      	orrs	r3, r2
    4cde:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    4ce0:	231d      	movs	r3, #29
    4ce2:	18fb      	adds	r3, r7, r3
    4ce4:	2200      	movs	r2, #0
    4ce6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    4ce8:	683b      	ldr	r3, [r7, #0]
    4cea:	685b      	ldr	r3, [r3, #4]
    4cec:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    4cee:	68fb      	ldr	r3, [r7, #12]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d01e      	beq.n	4d32 <_usart_set_config+0x14e>
    4cf4:	2280      	movs	r2, #128	; 0x80
    4cf6:	0552      	lsls	r2, r2, #21
    4cf8:	4293      	cmp	r3, r2
    4cfa:	d14f      	bne.n	4d9c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4cfc:	683b      	ldr	r3, [r7, #0]
    4cfe:	2227      	movs	r2, #39	; 0x27
    4d00:	5c9b      	ldrb	r3, [r3, r2]
    4d02:	2201      	movs	r2, #1
    4d04:	4053      	eors	r3, r2
    4d06:	b2db      	uxtb	r3, r3
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d046      	beq.n	4d9a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4d0c:	683b      	ldr	r3, [r7, #0]
    4d0e:	6a1d      	ldr	r5, [r3, #32]
    4d10:	693b      	ldr	r3, [r7, #16]
    4d12:	b2db      	uxtb	r3, r3
    4d14:	0018      	movs	r0, r3
    4d16:	4b65      	ldr	r3, [pc, #404]	; (4eac <_usart_set_config+0x2c8>)
    4d18:	4798      	blx	r3
    4d1a:	0001      	movs	r1, r0
    4d1c:	231d      	movs	r3, #29
    4d1e:	18fc      	adds	r4, r7, r3
    4d20:	230a      	movs	r3, #10
    4d22:	18fb      	adds	r3, r7, r3
    4d24:	001a      	movs	r2, r3
    4d26:	0028      	movs	r0, r5
    4d28:	4b61      	ldr	r3, [pc, #388]	; (4eb0 <_usart_set_config+0x2cc>)
    4d2a:	4798      	blx	r3
    4d2c:	0003      	movs	r3, r0
    4d2e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4d30:	e033      	b.n	4d9a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4d32:	683b      	ldr	r3, [r7, #0]
    4d34:	2227      	movs	r2, #39	; 0x27
    4d36:	5c9b      	ldrb	r3, [r3, r2]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d014      	beq.n	4d66 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4d3c:	683b      	ldr	r3, [r7, #0]
    4d3e:	6a18      	ldr	r0, [r3, #32]
    4d40:	683b      	ldr	r3, [r7, #0]
    4d42:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    4d44:	231d      	movs	r3, #29
    4d46:	18fc      	adds	r4, r7, r3
    4d48:	231f      	movs	r3, #31
    4d4a:	18fb      	adds	r3, r7, r3
    4d4c:	781d      	ldrb	r5, [r3, #0]
    4d4e:	230a      	movs	r3, #10
    4d50:	18fa      	adds	r2, r7, r3
    4d52:	231e      	movs	r3, #30
    4d54:	18fb      	adds	r3, r7, r3
    4d56:	781b      	ldrb	r3, [r3, #0]
    4d58:	9300      	str	r3, [sp, #0]
    4d5a:	002b      	movs	r3, r5
    4d5c:	4d55      	ldr	r5, [pc, #340]	; (4eb4 <_usart_set_config+0x2d0>)
    4d5e:	47a8      	blx	r5
    4d60:	0003      	movs	r3, r0
    4d62:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4d64:	e01a      	b.n	4d9c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    4d66:	683b      	ldr	r3, [r7, #0]
    4d68:	6a1d      	ldr	r5, [r3, #32]
    4d6a:	693b      	ldr	r3, [r7, #16]
    4d6c:	b2db      	uxtb	r3, r3
    4d6e:	0018      	movs	r0, r3
    4d70:	4b4e      	ldr	r3, [pc, #312]	; (4eac <_usart_set_config+0x2c8>)
    4d72:	4798      	blx	r3
				status_code =
    4d74:	231d      	movs	r3, #29
    4d76:	18fc      	adds	r4, r7, r3
    4d78:	231f      	movs	r3, #31
    4d7a:	18fb      	adds	r3, r7, r3
    4d7c:	7819      	ldrb	r1, [r3, #0]
    4d7e:	230a      	movs	r3, #10
    4d80:	18fa      	adds	r2, r7, r3
    4d82:	231e      	movs	r3, #30
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	781b      	ldrb	r3, [r3, #0]
    4d88:	9300      	str	r3, [sp, #0]
    4d8a:	000b      	movs	r3, r1
    4d8c:	0001      	movs	r1, r0
    4d8e:	0028      	movs	r0, r5
    4d90:	4d48      	ldr	r5, [pc, #288]	; (4eb4 <_usart_set_config+0x2d0>)
    4d92:	47a8      	blx	r5
    4d94:	0003      	movs	r3, r0
    4d96:	7023      	strb	r3, [r4, #0]
			break;
    4d98:	e000      	b.n	4d9c <_usart_set_config+0x1b8>
			break;
    4d9a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4d9c:	231d      	movs	r3, #29
    4d9e:	18fb      	adds	r3, r7, r3
    4da0:	781b      	ldrb	r3, [r3, #0]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d003      	beq.n	4dae <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    4da6:	231d      	movs	r3, #29
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	781b      	ldrb	r3, [r3, #0]
    4dac:	e077      	b.n	4e9e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    4dae:	683b      	ldr	r3, [r7, #0]
    4db0:	7e5b      	ldrb	r3, [r3, #25]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d003      	beq.n	4dbe <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4db6:	683b      	ldr	r3, [r7, #0]
    4db8:	7e9a      	ldrb	r2, [r3, #26]
    4dba:	69bb      	ldr	r3, [r7, #24]
    4dbc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4dbe:	687b      	ldr	r3, [r7, #4]
    4dc0:	0018      	movs	r0, r3
    4dc2:	4b3d      	ldr	r3, [pc, #244]	; (4eb8 <_usart_set_config+0x2d4>)
    4dc4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4dc6:	230a      	movs	r3, #10
    4dc8:	18fb      	adds	r3, r7, r3
    4dca:	881a      	ldrh	r2, [r3, #0]
    4dcc:	69bb      	ldr	r3, [r7, #24]
    4dce:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4dd2:	68fb      	ldr	r3, [r7, #12]
    4dd4:	4313      	orrs	r3, r2
    4dd6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    4dd8:	683b      	ldr	r3, [r7, #0]
    4dda:	2227      	movs	r2, #39	; 0x27
    4ddc:	5c9b      	ldrb	r3, [r3, r2]
    4dde:	2201      	movs	r2, #1
    4de0:	4053      	eors	r3, r2
    4de2:	b2db      	uxtb	r3, r3
    4de4:	2b00      	cmp	r3, #0
    4de6:	d003      	beq.n	4df0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dea:	2204      	movs	r2, #4
    4dec:	4313      	orrs	r3, r2
    4dee:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4df0:	683b      	ldr	r3, [r7, #0]
    4df2:	7e5b      	ldrb	r3, [r3, #25]
    4df4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4df6:	683b      	ldr	r3, [r7, #0]
    4df8:	7f1b      	ldrb	r3, [r3, #28]
    4dfa:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4dfc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4dfe:	683b      	ldr	r3, [r7, #0]
    4e00:	7f5b      	ldrb	r3, [r3, #29]
    4e02:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4e04:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4e06:	683b      	ldr	r3, [r7, #0]
    4e08:	2124      	movs	r1, #36	; 0x24
    4e0a:	5c5b      	ldrb	r3, [r3, r1]
    4e0c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4e0e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4e10:	683b      	ldr	r3, [r7, #0]
    4e12:	2125      	movs	r1, #37	; 0x25
    4e14:	5c5b      	ldrb	r3, [r3, r1]
    4e16:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4e18:	4313      	orrs	r3, r2
	ctrlb =  
    4e1a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    4e1c:	683b      	ldr	r3, [r7, #0]
    4e1e:	7a9b      	ldrb	r3, [r3, #10]
    4e20:	001a      	movs	r2, r3
    4e22:	6a3b      	ldr	r3, [r7, #32]
    4e24:	4313      	orrs	r3, r2
    4e26:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    4e28:	683b      	ldr	r3, [r7, #0]
    4e2a:	7adb      	ldrb	r3, [r3, #11]
    4e2c:	001a      	movs	r2, r3
    4e2e:	6a3b      	ldr	r3, [r7, #32]
    4e30:	4313      	orrs	r3, r2
    4e32:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4e34:	683b      	ldr	r3, [r7, #0]
    4e36:	891b      	ldrh	r3, [r3, #8]
    4e38:	2bff      	cmp	r3, #255	; 0xff
    4e3a:	d00b      	beq.n	4e54 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4e3e:	2280      	movs	r2, #128	; 0x80
    4e40:	0452      	lsls	r2, r2, #17
    4e42:	4313      	orrs	r3, r2
    4e44:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    4e46:	683b      	ldr	r3, [r7, #0]
    4e48:	891b      	ldrh	r3, [r3, #8]
    4e4a:	001a      	movs	r2, r3
    4e4c:	6a3b      	ldr	r3, [r7, #32]
    4e4e:	4313      	orrs	r3, r2
    4e50:	623b      	str	r3, [r7, #32]
    4e52:	e008      	b.n	4e66 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4e54:	683b      	ldr	r3, [r7, #0]
    4e56:	7edb      	ldrb	r3, [r3, #27]
    4e58:	2b00      	cmp	r3, #0
    4e5a:	d004      	beq.n	4e66 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4e5e:	2280      	movs	r2, #128	; 0x80
    4e60:	04d2      	lsls	r2, r2, #19
    4e62:	4313      	orrs	r3, r2
    4e64:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4e66:	683b      	ldr	r3, [r7, #0]
    4e68:	222c      	movs	r2, #44	; 0x2c
    4e6a:	5c9b      	ldrb	r3, [r3, r2]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d103      	bne.n	4e78 <_usart_set_config+0x294>
    4e70:	4b12      	ldr	r3, [pc, #72]	; (4ebc <_usart_set_config+0x2d8>)
    4e72:	4798      	blx	r3
    4e74:	1e03      	subs	r3, r0, #0
    4e76:	d003      	beq.n	4e80 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4e7a:	2280      	movs	r2, #128	; 0x80
    4e7c:	4313      	orrs	r3, r2
    4e7e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	0018      	movs	r0, r3
    4e84:	4b0c      	ldr	r3, [pc, #48]	; (4eb8 <_usart_set_config+0x2d4>)
    4e86:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4e88:	69bb      	ldr	r3, [r7, #24]
    4e8a:	6a3a      	ldr	r2, [r7, #32]
    4e8c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4e8e:	687b      	ldr	r3, [r7, #4]
    4e90:	0018      	movs	r0, r3
    4e92:	4b09      	ldr	r3, [pc, #36]	; (4eb8 <_usart_set_config+0x2d4>)
    4e94:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4e96:	69bb      	ldr	r3, [r7, #24]
    4e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4e9a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    4e9c:	2300      	movs	r3, #0
}
    4e9e:	0018      	movs	r0, r3
    4ea0:	46bd      	mov	sp, r7
    4ea2:	b00a      	add	sp, #40	; 0x28
    4ea4:	bdb0      	pop	{r4, r5, r7, pc}
    4ea6:	46c0      	nop			; (mov r8, r8)
    4ea8:	000049d5 	.word	0x000049d5
    4eac:	00006959 	.word	0x00006959
    4eb0:	0000454f 	.word	0x0000454f
    4eb4:	000045cd 	.word	0x000045cd
    4eb8:	00004bc1 	.word	0x00004bc1
    4ebc:	00004b81 	.word	0x00004b81

00004ec0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4ec0:	b590      	push	{r4, r7, lr}
    4ec2:	b093      	sub	sp, #76	; 0x4c
    4ec4:	af00      	add	r7, sp, #0
    4ec6:	60f8      	str	r0, [r7, #12]
    4ec8:	60b9      	str	r1, [r7, #8]
    4eca:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4ecc:	233b      	movs	r3, #59	; 0x3b
    4ece:	18fb      	adds	r3, r7, r3
    4ed0:	2200      	movs	r2, #0
    4ed2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4ed4:	68fb      	ldr	r3, [r7, #12]
    4ed6:	68ba      	ldr	r2, [r7, #8]
    4ed8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4eda:	68fb      	ldr	r3, [r7, #12]
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4ee0:	68fb      	ldr	r3, [r7, #12]
    4ee2:	681b      	ldr	r3, [r3, #0]
    4ee4:	0018      	movs	r0, r3
    4ee6:	4b86      	ldr	r3, [pc, #536]	; (5100 <usart_init+0x240>)
    4ee8:	4798      	blx	r3
    4eea:	0003      	movs	r3, r0
    4eec:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4ef0:	3302      	adds	r3, #2
    4ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4ef6:	3314      	adds	r3, #20
    4ef8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4efc:	681b      	ldr	r3, [r3, #0]
    4efe:	2201      	movs	r2, #1
    4f00:	4013      	ands	r3, r2
    4f02:	d001      	beq.n	4f08 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4f04:	2305      	movs	r3, #5
    4f06:	e0f6      	b.n	50f6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	2202      	movs	r2, #2
    4f0e:	4013      	ands	r3, r2
    4f10:	d001      	beq.n	4f16 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4f12:	231c      	movs	r3, #28
    4f14:	e0ef      	b.n	50f6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4f16:	2201      	movs	r2, #1
    4f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4f1a:	409a      	lsls	r2, r3
    4f1c:	0013      	movs	r3, r2
    4f1e:	0019      	movs	r1, r3
    4f20:	2002      	movs	r0, #2
    4f22:	4b78      	ldr	r3, [pc, #480]	; (5104 <usart_init+0x244>)
    4f24:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4f26:	2324      	movs	r3, #36	; 0x24
    4f28:	18fb      	adds	r3, r7, r3
    4f2a:	0018      	movs	r0, r3
    4f2c:	4b76      	ldr	r3, [pc, #472]	; (5108 <usart_init+0x248>)
    4f2e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4f30:	687b      	ldr	r3, [r7, #4]
    4f32:	222d      	movs	r2, #45	; 0x2d
    4f34:	5c9a      	ldrb	r2, [r3, r2]
    4f36:	2324      	movs	r3, #36	; 0x24
    4f38:	18fb      	adds	r3, r7, r3
    4f3a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4f3e:	b2db      	uxtb	r3, r3
    4f40:	2224      	movs	r2, #36	; 0x24
    4f42:	18ba      	adds	r2, r7, r2
    4f44:	0011      	movs	r1, r2
    4f46:	0018      	movs	r0, r3
    4f48:	4b70      	ldr	r3, [pc, #448]	; (510c <usart_init+0x24c>)
    4f4a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4f4e:	b2db      	uxtb	r3, r3
    4f50:	0018      	movs	r0, r3
    4f52:	4b6f      	ldr	r3, [pc, #444]	; (5110 <usart_init+0x250>)
    4f54:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4f56:	687b      	ldr	r3, [r7, #4]
    4f58:	222d      	movs	r2, #45	; 0x2d
    4f5a:	5c9b      	ldrb	r3, [r3, r2]
    4f5c:	2100      	movs	r1, #0
    4f5e:	0018      	movs	r0, r3
    4f60:	4b6c      	ldr	r3, [pc, #432]	; (5114 <usart_init+0x254>)
    4f62:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	7ada      	ldrb	r2, [r3, #11]
    4f68:	68fb      	ldr	r3, [r7, #12]
    4f6a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	2224      	movs	r2, #36	; 0x24
    4f70:	5c9a      	ldrb	r2, [r3, r2]
    4f72:	68fb      	ldr	r3, [r7, #12]
    4f74:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	2225      	movs	r2, #37	; 0x25
    4f7a:	5c9a      	ldrb	r2, [r3, r2]
    4f7c:	68fb      	ldr	r3, [r7, #12]
    4f7e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	7eda      	ldrb	r2, [r3, #27]
    4f84:	68fb      	ldr	r3, [r7, #12]
    4f86:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4f88:	687b      	ldr	r3, [r7, #4]
    4f8a:	7f1a      	ldrb	r2, [r3, #28]
    4f8c:	68fb      	ldr	r3, [r7, #12]
    4f8e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    4f90:	233b      	movs	r3, #59	; 0x3b
    4f92:	18fc      	adds	r4, r7, r3
    4f94:	687a      	ldr	r2, [r7, #4]
    4f96:	68fb      	ldr	r3, [r7, #12]
    4f98:	0011      	movs	r1, r2
    4f9a:	0018      	movs	r0, r3
    4f9c:	4b5e      	ldr	r3, [pc, #376]	; (5118 <usart_init+0x258>)
    4f9e:	4798      	blx	r3
    4fa0:	0003      	movs	r3, r0
    4fa2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    4fa4:	233b      	movs	r3, #59	; 0x3b
    4fa6:	18fb      	adds	r3, r7, r3
    4fa8:	781b      	ldrb	r3, [r3, #0]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d003      	beq.n	4fb6 <usart_init+0xf6>
		return status_code;
    4fae:	233b      	movs	r3, #59	; 0x3b
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	781b      	ldrb	r3, [r3, #0]
    4fb4:	e09f      	b.n	50f6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4fb6:	2320      	movs	r3, #32
    4fb8:	18fb      	adds	r3, r7, r3
    4fba:	0018      	movs	r0, r3
    4fbc:	4b57      	ldr	r3, [pc, #348]	; (511c <usart_init+0x25c>)
    4fbe:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4fc0:	2320      	movs	r3, #32
    4fc2:	18fb      	adds	r3, r7, r3
    4fc4:	2200      	movs	r2, #0
    4fc6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4fc8:	2320      	movs	r3, #32
    4fca:	18fb      	adds	r3, r7, r3
    4fcc:	2200      	movs	r2, #0
    4fce:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4fd0:	687b      	ldr	r3, [r7, #4]
    4fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    4fd4:	2310      	movs	r3, #16
    4fd6:	18fb      	adds	r3, r7, r3
    4fd8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4fde:	2310      	movs	r3, #16
    4fe0:	18fb      	adds	r3, r7, r3
    4fe2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    4fe8:	2310      	movs	r3, #16
    4fea:	18fb      	adds	r3, r7, r3
    4fec:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    4fee:	687b      	ldr	r3, [r7, #4]
    4ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    4ff2:	2310      	movs	r3, #16
    4ff4:	18fb      	adds	r3, r7, r3
    4ff6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4ff8:	2347      	movs	r3, #71	; 0x47
    4ffa:	18fb      	adds	r3, r7, r3
    4ffc:	2200      	movs	r2, #0
    4ffe:	701a      	strb	r2, [r3, #0]
    5000:	e02c      	b.n	505c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5002:	2347      	movs	r3, #71	; 0x47
    5004:	18fb      	adds	r3, r7, r3
    5006:	781a      	ldrb	r2, [r3, #0]
    5008:	2310      	movs	r3, #16
    500a:	18fb      	adds	r3, r7, r3
    500c:	0092      	lsls	r2, r2, #2
    500e:	58d3      	ldr	r3, [r2, r3]
    5010:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5014:	2b00      	cmp	r3, #0
    5016:	d109      	bne.n	502c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5018:	2347      	movs	r3, #71	; 0x47
    501a:	18fb      	adds	r3, r7, r3
    501c:	781a      	ldrb	r2, [r3, #0]
    501e:	68bb      	ldr	r3, [r7, #8]
    5020:	0011      	movs	r1, r2
    5022:	0018      	movs	r0, r3
    5024:	4b3e      	ldr	r3, [pc, #248]	; (5120 <usart_init+0x260>)
    5026:	4798      	blx	r3
    5028:	0003      	movs	r3, r0
    502a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    502c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    502e:	3301      	adds	r3, #1
    5030:	d00d      	beq.n	504e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5034:	b2da      	uxtb	r2, r3
    5036:	2320      	movs	r3, #32
    5038:	18fb      	adds	r3, r7, r3
    503a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    503c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    503e:	0c1b      	lsrs	r3, r3, #16
    5040:	b2db      	uxtb	r3, r3
    5042:	2220      	movs	r2, #32
    5044:	18ba      	adds	r2, r7, r2
    5046:	0011      	movs	r1, r2
    5048:	0018      	movs	r0, r3
    504a:	4b36      	ldr	r3, [pc, #216]	; (5124 <usart_init+0x264>)
    504c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    504e:	2347      	movs	r3, #71	; 0x47
    5050:	18fb      	adds	r3, r7, r3
    5052:	781a      	ldrb	r2, [r3, #0]
    5054:	2347      	movs	r3, #71	; 0x47
    5056:	18fb      	adds	r3, r7, r3
    5058:	3201      	adds	r2, #1
    505a:	701a      	strb	r2, [r3, #0]
    505c:	2347      	movs	r3, #71	; 0x47
    505e:	18fb      	adds	r3, r7, r3
    5060:	781b      	ldrb	r3, [r3, #0]
    5062:	2b03      	cmp	r3, #3
    5064:	d9cd      	bls.n	5002 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5066:	2300      	movs	r3, #0
    5068:	63fb      	str	r3, [r7, #60]	; 0x3c
    506a:	e00a      	b.n	5082 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    506c:	68fa      	ldr	r2, [r7, #12]
    506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5070:	3302      	adds	r3, #2
    5072:	009b      	lsls	r3, r3, #2
    5074:	18d3      	adds	r3, r2, r3
    5076:	3304      	adds	r3, #4
    5078:	2200      	movs	r2, #0
    507a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    507e:	3301      	adds	r3, #1
    5080:	63fb      	str	r3, [r7, #60]	; 0x3c
    5082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5084:	2b05      	cmp	r3, #5
    5086:	d9f1      	bls.n	506c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5088:	68fb      	ldr	r3, [r7, #12]
    508a:	2200      	movs	r2, #0
    508c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    508e:	68fb      	ldr	r3, [r7, #12]
    5090:	2200      	movs	r2, #0
    5092:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5094:	68fb      	ldr	r3, [r7, #12]
    5096:	2200      	movs	r2, #0
    5098:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    509a:	68fb      	ldr	r3, [r7, #12]
    509c:	2200      	movs	r2, #0
    509e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    50a0:	68fb      	ldr	r3, [r7, #12]
    50a2:	2230      	movs	r2, #48	; 0x30
    50a4:	2100      	movs	r1, #0
    50a6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    50a8:	68fb      	ldr	r3, [r7, #12]
    50aa:	2231      	movs	r2, #49	; 0x31
    50ac:	2100      	movs	r1, #0
    50ae:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    50b0:	68fb      	ldr	r3, [r7, #12]
    50b2:	2232      	movs	r2, #50	; 0x32
    50b4:	2100      	movs	r1, #0
    50b6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    50b8:	68fb      	ldr	r3, [r7, #12]
    50ba:	2233      	movs	r2, #51	; 0x33
    50bc:	2100      	movs	r1, #0
    50be:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    50c0:	68fb      	ldr	r3, [r7, #12]
    50c2:	681b      	ldr	r3, [r3, #0]
    50c4:	2227      	movs	r2, #39	; 0x27
    50c6:	18bc      	adds	r4, r7, r2
    50c8:	0018      	movs	r0, r3
    50ca:	4b0d      	ldr	r3, [pc, #52]	; (5100 <usart_init+0x240>)
    50cc:	4798      	blx	r3
    50ce:	0003      	movs	r3, r0
    50d0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    50d2:	4a15      	ldr	r2, [pc, #84]	; (5128 <usart_init+0x268>)
    50d4:	2327      	movs	r3, #39	; 0x27
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	781b      	ldrb	r3, [r3, #0]
    50da:	0011      	movs	r1, r2
    50dc:	0018      	movs	r0, r3
    50de:	4b13      	ldr	r3, [pc, #76]	; (512c <usart_init+0x26c>)
    50e0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    50e2:	2327      	movs	r3, #39	; 0x27
    50e4:	18fb      	adds	r3, r7, r3
    50e6:	781a      	ldrb	r2, [r3, #0]
    50e8:	4b11      	ldr	r3, [pc, #68]	; (5130 <usart_init+0x270>)
    50ea:	0092      	lsls	r2, r2, #2
    50ec:	68f9      	ldr	r1, [r7, #12]
    50ee:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    50f0:	233b      	movs	r3, #59	; 0x3b
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	781b      	ldrb	r3, [r3, #0]
}
    50f6:	0018      	movs	r0, r3
    50f8:	46bd      	mov	sp, r7
    50fa:	b013      	add	sp, #76	; 0x4c
    50fc:	bd90      	pop	{r4, r7, pc}
    50fe:	46c0      	nop			; (mov r8, r8)
    5100:	000049d5 	.word	0x000049d5
    5104:	00004afd 	.word	0x00004afd
    5108:	00004ae5 	.word	0x00004ae5
    510c:	00006835 	.word	0x00006835
    5110:	00006879 	.word	0x00006879
    5114:	0000478d 	.word	0x0000478d
    5118:	00004be5 	.word	0x00004be5
    511c:	00004b59 	.word	0x00004b59
    5120:	00004819 	.word	0x00004819
    5124:	00006b21 	.word	0x00006b21
    5128:	000054fd 	.word	0x000054fd
    512c:	00005851 	.word	0x00005851
    5130:	2000044c 	.word	0x2000044c

00005134 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5134:	b580      	push	{r7, lr}
    5136:	b084      	sub	sp, #16
    5138:	af00      	add	r7, sp, #0
    513a:	6078      	str	r0, [r7, #4]
    513c:	000a      	movs	r2, r1
    513e:	1cbb      	adds	r3, r7, #2
    5140:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5142:	687b      	ldr	r3, [r7, #4]
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	79db      	ldrb	r3, [r3, #7]
    514c:	2201      	movs	r2, #1
    514e:	4053      	eors	r3, r2
    5150:	b2db      	uxtb	r3, r3
    5152:	2b00      	cmp	r3, #0
    5154:	d001      	beq.n	515a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5156:	231c      	movs	r3, #28
    5158:	e017      	b.n	518a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    515e:	b29b      	uxth	r3, r3
    5160:	2b00      	cmp	r3, #0
    5162:	d001      	beq.n	5168 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5164:	2305      	movs	r3, #5
    5166:	e010      	b.n	518a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5168:	687b      	ldr	r3, [r7, #4]
    516a:	0018      	movs	r0, r3
    516c:	4b09      	ldr	r3, [pc, #36]	; (5194 <usart_write_wait+0x60>)
    516e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5170:	68fb      	ldr	r3, [r7, #12]
    5172:	1cba      	adds	r2, r7, #2
    5174:	8812      	ldrh	r2, [r2, #0]
    5176:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5178:	46c0      	nop			; (mov r8, r8)
    517a:	68fb      	ldr	r3, [r7, #12]
    517c:	7e1b      	ldrb	r3, [r3, #24]
    517e:	b2db      	uxtb	r3, r3
    5180:	001a      	movs	r2, r3
    5182:	2302      	movs	r3, #2
    5184:	4013      	ands	r3, r2
    5186:	d0f8      	beq.n	517a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5188:	2300      	movs	r3, #0
}
    518a:	0018      	movs	r0, r3
    518c:	46bd      	mov	sp, r7
    518e:	b004      	add	sp, #16
    5190:	bd80      	pop	{r7, pc}
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	00004bc1 	.word	0x00004bc1

00005198 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5198:	b580      	push	{r7, lr}
    519a:	b084      	sub	sp, #16
    519c:	af00      	add	r7, sp, #0
    519e:	6078      	str	r0, [r7, #4]
    51a0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	681b      	ldr	r3, [r3, #0]
    51a6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    51a8:	687b      	ldr	r3, [r7, #4]
    51aa:	799b      	ldrb	r3, [r3, #6]
    51ac:	2201      	movs	r2, #1
    51ae:	4053      	eors	r3, r2
    51b0:	b2db      	uxtb	r3, r3
    51b2:	2b00      	cmp	r3, #0
    51b4:	d001      	beq.n	51ba <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    51b6:	231c      	movs	r3, #28
    51b8:	e05e      	b.n	5278 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    51be:	b29b      	uxth	r3, r3
    51c0:	2b00      	cmp	r3, #0
    51c2:	d001      	beq.n	51c8 <usart_read_wait+0x30>
		return STATUS_BUSY;
    51c4:	2305      	movs	r3, #5
    51c6:	e057      	b.n	5278 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    51c8:	68fb      	ldr	r3, [r7, #12]
    51ca:	7e1b      	ldrb	r3, [r3, #24]
    51cc:	b2db      	uxtb	r3, r3
    51ce:	001a      	movs	r2, r3
    51d0:	2304      	movs	r3, #4
    51d2:	4013      	ands	r3, r2
    51d4:	d101      	bne.n	51da <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    51d6:	2305      	movs	r3, #5
    51d8:	e04e      	b.n	5278 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    51da:	687b      	ldr	r3, [r7, #4]
    51dc:	0018      	movs	r0, r3
    51de:	4b28      	ldr	r3, [pc, #160]	; (5280 <usart_read_wait+0xe8>)
    51e0:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    51e2:	68fb      	ldr	r3, [r7, #12]
    51e4:	8b5b      	ldrh	r3, [r3, #26]
    51e6:	b29b      	uxth	r3, r3
    51e8:	b2da      	uxtb	r2, r3
    51ea:	230b      	movs	r3, #11
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	213f      	movs	r1, #63	; 0x3f
    51f0:	400a      	ands	r2, r1
    51f2:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    51f4:	230b      	movs	r3, #11
    51f6:	18fb      	adds	r3, r7, r3
    51f8:	781b      	ldrb	r3, [r3, #0]
    51fa:	2b00      	cmp	r3, #0
    51fc:	d036      	beq.n	526c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    51fe:	230b      	movs	r3, #11
    5200:	18fb      	adds	r3, r7, r3
    5202:	781b      	ldrb	r3, [r3, #0]
    5204:	2202      	movs	r2, #2
    5206:	4013      	ands	r3, r2
    5208:	d004      	beq.n	5214 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    520a:	68fb      	ldr	r3, [r7, #12]
    520c:	2202      	movs	r2, #2
    520e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    5210:	231a      	movs	r3, #26
    5212:	e031      	b.n	5278 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5214:	230b      	movs	r3, #11
    5216:	18fb      	adds	r3, r7, r3
    5218:	781b      	ldrb	r3, [r3, #0]
    521a:	2204      	movs	r2, #4
    521c:	4013      	ands	r3, r2
    521e:	d004      	beq.n	522a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5220:	68fb      	ldr	r3, [r7, #12]
    5222:	2204      	movs	r2, #4
    5224:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5226:	231e      	movs	r3, #30
    5228:	e026      	b.n	5278 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    522a:	230b      	movs	r3, #11
    522c:	18fb      	adds	r3, r7, r3
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	2201      	movs	r2, #1
    5232:	4013      	ands	r3, r2
    5234:	d004      	beq.n	5240 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5236:	68fb      	ldr	r3, [r7, #12]
    5238:	2201      	movs	r2, #1
    523a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    523c:	2313      	movs	r3, #19
    523e:	e01b      	b.n	5278 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5240:	230b      	movs	r3, #11
    5242:	18fb      	adds	r3, r7, r3
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	2210      	movs	r2, #16
    5248:	4013      	ands	r3, r2
    524a:	d004      	beq.n	5256 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    524c:	68fb      	ldr	r3, [r7, #12]
    524e:	2210      	movs	r2, #16
    5250:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    5252:	2342      	movs	r3, #66	; 0x42
    5254:	e010      	b.n	5278 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5256:	230b      	movs	r3, #11
    5258:	18fb      	adds	r3, r7, r3
    525a:	781b      	ldrb	r3, [r3, #0]
    525c:	2220      	movs	r2, #32
    525e:	4013      	ands	r3, r2
    5260:	d004      	beq.n	526c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5262:	68fb      	ldr	r3, [r7, #12]
    5264:	2220      	movs	r2, #32
    5266:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5268:	2341      	movs	r3, #65	; 0x41
    526a:	e005      	b.n	5278 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    526c:	68fb      	ldr	r3, [r7, #12]
    526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5270:	b29a      	uxth	r2, r3
    5272:	683b      	ldr	r3, [r7, #0]
    5274:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    5276:	2300      	movs	r3, #0
}
    5278:	0018      	movs	r0, r3
    527a:	46bd      	mov	sp, r7
    527c:	b004      	add	sp, #16
    527e:	bd80      	pop	{r7, pc}
    5280:	00004bc1 	.word	0x00004bc1

00005284 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5284:	b580      	push	{r7, lr}
    5286:	b08a      	sub	sp, #40	; 0x28
    5288:	af00      	add	r7, sp, #0
    528a:	60f8      	str	r0, [r7, #12]
    528c:	60b9      	str	r1, [r7, #8]
    528e:	1dbb      	adds	r3, r7, #6
    5290:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    5292:	1dbb      	adds	r3, r7, #6
    5294:	881b      	ldrh	r3, [r3, #0]
    5296:	2b00      	cmp	r3, #0
    5298:	d101      	bne.n	529e <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    529a:	2317      	movs	r3, #23
    529c:	e07e      	b.n	539c <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    529e:	68fb      	ldr	r3, [r7, #12]
    52a0:	79db      	ldrb	r3, [r3, #7]
    52a2:	2201      	movs	r2, #1
    52a4:	4053      	eors	r3, r2
    52a6:	b2db      	uxtb	r3, r3
    52a8:	2b00      	cmp	r3, #0
    52aa:	d001      	beq.n	52b0 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    52ac:	231c      	movs	r3, #28
    52ae:	e075      	b.n	539c <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    52b0:	68fb      	ldr	r3, [r7, #12]
    52b2:	681b      	ldr	r3, [r3, #0]
    52b4:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    52b6:	68fb      	ldr	r3, [r7, #12]
    52b8:	0018      	movs	r0, r3
    52ba:	4b3a      	ldr	r3, [pc, #232]	; (53a4 <usart_write_buffer_wait+0x120>)
    52bc:	4798      	blx	r3

	uint16_t tx_pos = 0;
    52be:	2326      	movs	r3, #38	; 0x26
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	2200      	movs	r2, #0
    52c4:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    52c6:	e048      	b.n	535a <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    52c8:	2300      	movs	r3, #0
    52ca:	623b      	str	r3, [r7, #32]
    52cc:	e00f      	b.n	52ee <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    52ce:	697b      	ldr	r3, [r7, #20]
    52d0:	7e1b      	ldrb	r3, [r3, #24]
    52d2:	b2db      	uxtb	r3, r3
    52d4:	001a      	movs	r2, r3
    52d6:	2301      	movs	r3, #1
    52d8:	4013      	ands	r3, r2
    52da:	d10d      	bne.n	52f8 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    52dc:	6a3b      	ldr	r3, [r7, #32]
    52de:	4a32      	ldr	r2, [pc, #200]	; (53a8 <usart_write_buffer_wait+0x124>)
    52e0:	4293      	cmp	r3, r2
    52e2:	d101      	bne.n	52e8 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    52e4:	2312      	movs	r3, #18
    52e6:	e059      	b.n	539c <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    52e8:	6a3b      	ldr	r3, [r7, #32]
    52ea:	3301      	adds	r3, #1
    52ec:	623b      	str	r3, [r7, #32]
    52ee:	6a3b      	ldr	r3, [r7, #32]
    52f0:	4a2d      	ldr	r2, [pc, #180]	; (53a8 <usart_write_buffer_wait+0x124>)
    52f2:	4293      	cmp	r3, r2
    52f4:	d9eb      	bls.n	52ce <usart_write_buffer_wait+0x4a>
    52f6:	e000      	b.n	52fa <usart_write_buffer_wait+0x76>
				break;
    52f8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    52fa:	2326      	movs	r3, #38	; 0x26
    52fc:	18fb      	adds	r3, r7, r3
    52fe:	881b      	ldrh	r3, [r3, #0]
    5300:	2226      	movs	r2, #38	; 0x26
    5302:	18ba      	adds	r2, r7, r2
    5304:	1c59      	adds	r1, r3, #1
    5306:	8011      	strh	r1, [r2, #0]
    5308:	001a      	movs	r2, r3
    530a:	68bb      	ldr	r3, [r7, #8]
    530c:	189b      	adds	r3, r3, r2
    530e:	781a      	ldrb	r2, [r3, #0]
    5310:	231e      	movs	r3, #30
    5312:	18fb      	adds	r3, r7, r3
    5314:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5316:	68fb      	ldr	r3, [r7, #12]
    5318:	795b      	ldrb	r3, [r3, #5]
    531a:	2b01      	cmp	r3, #1
    531c:	d115      	bne.n	534a <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    531e:	2326      	movs	r3, #38	; 0x26
    5320:	18fb      	adds	r3, r7, r3
    5322:	881b      	ldrh	r3, [r3, #0]
    5324:	2226      	movs	r2, #38	; 0x26
    5326:	18ba      	adds	r2, r7, r2
    5328:	1c59      	adds	r1, r3, #1
    532a:	8011      	strh	r1, [r2, #0]
    532c:	001a      	movs	r2, r3
    532e:	68bb      	ldr	r3, [r7, #8]
    5330:	189b      	adds	r3, r3, r2
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	021b      	lsls	r3, r3, #8
    5336:	b21a      	sxth	r2, r3
    5338:	231e      	movs	r3, #30
    533a:	18fb      	adds	r3, r7, r3
    533c:	2100      	movs	r1, #0
    533e:	5e5b      	ldrsh	r3, [r3, r1]
    5340:	4313      	orrs	r3, r2
    5342:	b21a      	sxth	r2, r3
    5344:	231e      	movs	r3, #30
    5346:	18fb      	adds	r3, r7, r3
    5348:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    534a:	231e      	movs	r3, #30
    534c:	18fb      	adds	r3, r7, r3
    534e:	881a      	ldrh	r2, [r3, #0]
    5350:	68fb      	ldr	r3, [r7, #12]
    5352:	0011      	movs	r1, r2
    5354:	0018      	movs	r0, r3
    5356:	4b15      	ldr	r3, [pc, #84]	; (53ac <usart_write_buffer_wait+0x128>)
    5358:	4798      	blx	r3
	while (length--) {
    535a:	1dbb      	adds	r3, r7, #6
    535c:	881b      	ldrh	r3, [r3, #0]
    535e:	1dba      	adds	r2, r7, #6
    5360:	1e59      	subs	r1, r3, #1
    5362:	8011      	strh	r1, [r2, #0]
    5364:	2b00      	cmp	r3, #0
    5366:	d1af      	bne.n	52c8 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    5368:	2300      	movs	r3, #0
    536a:	61bb      	str	r3, [r7, #24]
    536c:	e00f      	b.n	538e <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    536e:	697b      	ldr	r3, [r7, #20]
    5370:	7e1b      	ldrb	r3, [r3, #24]
    5372:	b2db      	uxtb	r3, r3
    5374:	001a      	movs	r2, r3
    5376:	2302      	movs	r3, #2
    5378:	4013      	ands	r3, r2
    537a:	d10d      	bne.n	5398 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    537c:	69bb      	ldr	r3, [r7, #24]
    537e:	4a0a      	ldr	r2, [pc, #40]	; (53a8 <usart_write_buffer_wait+0x124>)
    5380:	4293      	cmp	r3, r2
    5382:	d101      	bne.n	5388 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    5384:	2312      	movs	r3, #18
    5386:	e009      	b.n	539c <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    5388:	69bb      	ldr	r3, [r7, #24]
    538a:	3301      	adds	r3, #1
    538c:	61bb      	str	r3, [r7, #24]
    538e:	69bb      	ldr	r3, [r7, #24]
    5390:	4a05      	ldr	r2, [pc, #20]	; (53a8 <usart_write_buffer_wait+0x124>)
    5392:	4293      	cmp	r3, r2
    5394:	d9eb      	bls.n	536e <usart_write_buffer_wait+0xea>
    5396:	e000      	b.n	539a <usart_write_buffer_wait+0x116>
			break;
    5398:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    539a:	2300      	movs	r3, #0
}
    539c:	0018      	movs	r0, r3
    539e:	46bd      	mov	sp, r7
    53a0:	b00a      	add	sp, #40	; 0x28
    53a2:	bd80      	pop	{r7, pc}
    53a4:	00004bc1 	.word	0x00004bc1
    53a8:	0000ffff 	.word	0x0000ffff
    53ac:	00005135 	.word	0x00005135

000053b0 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    53b0:	b590      	push	{r4, r7, lr}
    53b2:	b089      	sub	sp, #36	; 0x24
    53b4:	af00      	add	r7, sp, #0
    53b6:	60f8      	str	r0, [r7, #12]
    53b8:	60b9      	str	r1, [r7, #8]
    53ba:	1dbb      	adds	r3, r7, #6
    53bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    53be:	1dbb      	adds	r3, r7, #6
    53c0:	881b      	ldrh	r3, [r3, #0]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d101      	bne.n	53ca <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    53c6:	2317      	movs	r3, #23
    53c8:	e06d      	b.n	54a6 <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    53ca:	68fb      	ldr	r3, [r7, #12]
    53cc:	799b      	ldrb	r3, [r3, #6]
    53ce:	2201      	movs	r2, #1
    53d0:	4053      	eors	r3, r2
    53d2:	b2db      	uxtb	r3, r3
    53d4:	2b00      	cmp	r3, #0
    53d6:	d001      	beq.n	53dc <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    53d8:	231c      	movs	r3, #28
    53da:	e064      	b.n	54a6 <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    53dc:	68fb      	ldr	r3, [r7, #12]
    53de:	681b      	ldr	r3, [r3, #0]
    53e0:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
    53e2:	231e      	movs	r3, #30
    53e4:	18fb      	adds	r3, r7, r3
    53e6:	2200      	movs	r2, #0
    53e8:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
    53ea:	e054      	b.n	5496 <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    53ec:	2300      	movs	r3, #0
    53ee:	61bb      	str	r3, [r7, #24]
    53f0:	e00f      	b.n	5412 <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    53f2:	697b      	ldr	r3, [r7, #20]
    53f4:	7e1b      	ldrb	r3, [r3, #24]
    53f6:	b2db      	uxtb	r3, r3
    53f8:	001a      	movs	r2, r3
    53fa:	2304      	movs	r3, #4
    53fc:	4013      	ands	r3, r2
    53fe:	d10d      	bne.n	541c <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
    5400:	69bb      	ldr	r3, [r7, #24]
    5402:	4a2b      	ldr	r2, [pc, #172]	; (54b0 <usart_read_buffer_wait+0x100>)
    5404:	4293      	cmp	r3, r2
    5406:	d101      	bne.n	540c <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    5408:	2312      	movs	r3, #18
    540a:	e04c      	b.n	54a6 <usart_read_buffer_wait+0xf6>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    540c:	69bb      	ldr	r3, [r7, #24]
    540e:	3301      	adds	r3, #1
    5410:	61bb      	str	r3, [r7, #24]
    5412:	69bb      	ldr	r3, [r7, #24]
    5414:	4a26      	ldr	r2, [pc, #152]	; (54b0 <usart_read_buffer_wait+0x100>)
    5416:	4293      	cmp	r3, r2
    5418:	d9eb      	bls.n	53f2 <usart_read_buffer_wait+0x42>
    541a:	e000      	b.n	541e <usart_read_buffer_wait+0x6e>
				break;
    541c:	46c0      	nop			; (mov r8, r8)
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    541e:	2310      	movs	r3, #16
    5420:	18fb      	adds	r3, r7, r3
    5422:	2200      	movs	r2, #0
    5424:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
    5426:	2313      	movs	r3, #19
    5428:	18fc      	adds	r4, r7, r3
    542a:	2310      	movs	r3, #16
    542c:	18fa      	adds	r2, r7, r3
    542e:	68fb      	ldr	r3, [r7, #12]
    5430:	0011      	movs	r1, r2
    5432:	0018      	movs	r0, r3
    5434:	4b1f      	ldr	r3, [pc, #124]	; (54b4 <usart_read_buffer_wait+0x104>)
    5436:	4798      	blx	r3
    5438:	0003      	movs	r3, r0
    543a:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    543c:	2313      	movs	r3, #19
    543e:	18fb      	adds	r3, r7, r3
    5440:	781b      	ldrb	r3, [r3, #0]
    5442:	2b00      	cmp	r3, #0
    5444:	d003      	beq.n	544e <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
    5446:	2313      	movs	r3, #19
    5448:	18fb      	adds	r3, r7, r3
    544a:	781b      	ldrb	r3, [r3, #0]
    544c:	e02b      	b.n	54a6 <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    544e:	231e      	movs	r3, #30
    5450:	18fb      	adds	r3, r7, r3
    5452:	881b      	ldrh	r3, [r3, #0]
    5454:	221e      	movs	r2, #30
    5456:	18ba      	adds	r2, r7, r2
    5458:	1c59      	adds	r1, r3, #1
    545a:	8011      	strh	r1, [r2, #0]
    545c:	001a      	movs	r2, r3
    545e:	68bb      	ldr	r3, [r7, #8]
    5460:	189b      	adds	r3, r3, r2
    5462:	2210      	movs	r2, #16
    5464:	18ba      	adds	r2, r7, r2
    5466:	8812      	ldrh	r2, [r2, #0]
    5468:	b2d2      	uxtb	r2, r2
    546a:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    546c:	68fb      	ldr	r3, [r7, #12]
    546e:	795b      	ldrb	r3, [r3, #5]
    5470:	2b01      	cmp	r3, #1
    5472:	d110      	bne.n	5496 <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
    5474:	231e      	movs	r3, #30
    5476:	18fb      	adds	r3, r7, r3
    5478:	881b      	ldrh	r3, [r3, #0]
    547a:	221e      	movs	r2, #30
    547c:	18ba      	adds	r2, r7, r2
    547e:	1c59      	adds	r1, r3, #1
    5480:	8011      	strh	r1, [r2, #0]
    5482:	001a      	movs	r2, r3
    5484:	68bb      	ldr	r3, [r7, #8]
    5486:	189b      	adds	r3, r3, r2
    5488:	2210      	movs	r2, #16
    548a:	18ba      	adds	r2, r7, r2
    548c:	8812      	ldrh	r2, [r2, #0]
    548e:	0a12      	lsrs	r2, r2, #8
    5490:	b292      	uxth	r2, r2
    5492:	b2d2      	uxtb	r2, r2
    5494:	701a      	strb	r2, [r3, #0]
	while (length--) {
    5496:	1dbb      	adds	r3, r7, #6
    5498:	881b      	ldrh	r3, [r3, #0]
    549a:	1dba      	adds	r2, r7, #6
    549c:	1e59      	subs	r1, r3, #1
    549e:	8011      	strh	r1, [r2, #0]
    54a0:	2b00      	cmp	r3, #0
    54a2:	d1a3      	bne.n	53ec <usart_read_buffer_wait+0x3c>
		}
	}

	return STATUS_OK;
    54a4:	2300      	movs	r3, #0
}
    54a6:	0018      	movs	r0, r3
    54a8:	46bd      	mov	sp, r7
    54aa:	b009      	add	sp, #36	; 0x24
    54ac:	bd90      	pop	{r4, r7, pc}
    54ae:	46c0      	nop			; (mov r8, r8)
    54b0:	0000ffff 	.word	0x0000ffff
    54b4:	00005199 	.word	0x00005199

000054b8 <usart_is_syncing>:
{
    54b8:	b580      	push	{r7, lr}
    54ba:	b084      	sub	sp, #16
    54bc:	af00      	add	r7, sp, #0
    54be:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    54c6:	68fb      	ldr	r3, [r7, #12]
    54c8:	69db      	ldr	r3, [r3, #28]
    54ca:	1e5a      	subs	r2, r3, #1
    54cc:	4193      	sbcs	r3, r2
    54ce:	b2db      	uxtb	r3, r3
}
    54d0:	0018      	movs	r0, r3
    54d2:	46bd      	mov	sp, r7
    54d4:	b004      	add	sp, #16
    54d6:	bd80      	pop	{r7, pc}

000054d8 <_usart_wait_for_sync>:
{
    54d8:	b580      	push	{r7, lr}
    54da:	b082      	sub	sp, #8
    54dc:	af00      	add	r7, sp, #0
    54de:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    54e0:	46c0      	nop			; (mov r8, r8)
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	0018      	movs	r0, r3
    54e6:	4b04      	ldr	r3, [pc, #16]	; (54f8 <_usart_wait_for_sync+0x20>)
    54e8:	4798      	blx	r3
    54ea:	1e03      	subs	r3, r0, #0
    54ec:	d1f9      	bne.n	54e2 <_usart_wait_for_sync+0xa>
}
    54ee:	46c0      	nop			; (mov r8, r8)
    54f0:	46bd      	mov	sp, r7
    54f2:	b002      	add	sp, #8
    54f4:	bd80      	pop	{r7, pc}
    54f6:	46c0      	nop			; (mov r8, r8)
    54f8:	000054b9 	.word	0x000054b9

000054fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    54fc:	b580      	push	{r7, lr}
    54fe:	b088      	sub	sp, #32
    5500:	af00      	add	r7, sp, #0
    5502:	0002      	movs	r2, r0
    5504:	1dfb      	adds	r3, r7, #7
    5506:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5508:	1dfb      	adds	r3, r7, #7
    550a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    550c:	4ba3      	ldr	r3, [pc, #652]	; (579c <_usart_interrupt_handler+0x2a0>)
    550e:	0092      	lsls	r2, r2, #2
    5510:	58d3      	ldr	r3, [r2, r3]
    5512:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5514:	69bb      	ldr	r3, [r7, #24]
    5516:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5518:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    551a:	69bb      	ldr	r3, [r7, #24]
    551c:	0018      	movs	r0, r3
    551e:	4ba0      	ldr	r3, [pc, #640]	; (57a0 <_usart_interrupt_handler+0x2a4>)
    5520:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5522:	697b      	ldr	r3, [r7, #20]
    5524:	7e1b      	ldrb	r3, [r3, #24]
    5526:	b2da      	uxtb	r2, r3
    5528:	2312      	movs	r3, #18
    552a:	18fb      	adds	r3, r7, r3
    552c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    552e:	697b      	ldr	r3, [r7, #20]
    5530:	7d9b      	ldrb	r3, [r3, #22]
    5532:	b2db      	uxtb	r3, r3
    5534:	b29a      	uxth	r2, r3
    5536:	2312      	movs	r3, #18
    5538:	18fb      	adds	r3, r7, r3
    553a:	2112      	movs	r1, #18
    553c:	1879      	adds	r1, r7, r1
    553e:	8809      	ldrh	r1, [r1, #0]
    5540:	400a      	ands	r2, r1
    5542:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5544:	69bb      	ldr	r3, [r7, #24]
    5546:	2230      	movs	r2, #48	; 0x30
    5548:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    554a:	69ba      	ldr	r2, [r7, #24]
    554c:	2131      	movs	r1, #49	; 0x31
    554e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5550:	4013      	ands	r3, r2
    5552:	b2da      	uxtb	r2, r3
    5554:	2310      	movs	r3, #16
    5556:	18fb      	adds	r3, r7, r3
    5558:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    555a:	2312      	movs	r3, #18
    555c:	18fb      	adds	r3, r7, r3
    555e:	881b      	ldrh	r3, [r3, #0]
    5560:	2201      	movs	r2, #1
    5562:	4013      	ands	r3, r2
    5564:	d044      	beq.n	55f0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5566:	69bb      	ldr	r3, [r7, #24]
    5568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    556a:	b29b      	uxth	r3, r3
    556c:	2b00      	cmp	r3, #0
    556e:	d03c      	beq.n	55ea <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5570:	69bb      	ldr	r3, [r7, #24]
    5572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5574:	781b      	ldrb	r3, [r3, #0]
    5576:	b2da      	uxtb	r2, r3
    5578:	231c      	movs	r3, #28
    557a:	18fb      	adds	r3, r7, r3
    557c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    557e:	69bb      	ldr	r3, [r7, #24]
    5580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5582:	1c5a      	adds	r2, r3, #1
    5584:	69bb      	ldr	r3, [r7, #24]
    5586:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5588:	69bb      	ldr	r3, [r7, #24]
    558a:	795b      	ldrb	r3, [r3, #5]
    558c:	2b01      	cmp	r3, #1
    558e:	d113      	bne.n	55b8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5590:	69bb      	ldr	r3, [r7, #24]
    5592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5594:	781b      	ldrb	r3, [r3, #0]
    5596:	b2db      	uxtb	r3, r3
    5598:	021b      	lsls	r3, r3, #8
    559a:	b21a      	sxth	r2, r3
    559c:	231c      	movs	r3, #28
    559e:	18fb      	adds	r3, r7, r3
    55a0:	2100      	movs	r1, #0
    55a2:	5e5b      	ldrsh	r3, [r3, r1]
    55a4:	4313      	orrs	r3, r2
    55a6:	b21a      	sxth	r2, r3
    55a8:	231c      	movs	r3, #28
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    55ae:	69bb      	ldr	r3, [r7, #24]
    55b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55b2:	1c5a      	adds	r2, r3, #1
    55b4:	69bb      	ldr	r3, [r7, #24]
    55b6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    55b8:	231c      	movs	r3, #28
    55ba:	18fb      	adds	r3, r7, r3
    55bc:	881b      	ldrh	r3, [r3, #0]
    55be:	05db      	lsls	r3, r3, #23
    55c0:	0ddb      	lsrs	r3, r3, #23
    55c2:	b29a      	uxth	r2, r3
    55c4:	697b      	ldr	r3, [r7, #20]
    55c6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    55c8:	69bb      	ldr	r3, [r7, #24]
    55ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    55cc:	b29b      	uxth	r3, r3
    55ce:	3b01      	subs	r3, #1
    55d0:	b29b      	uxth	r3, r3
    55d2:	69ba      	ldr	r2, [r7, #24]
    55d4:	1c19      	adds	r1, r3, #0
    55d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    55d8:	2b00      	cmp	r3, #0
    55da:	d109      	bne.n	55f0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    55dc:	697b      	ldr	r3, [r7, #20]
    55de:	2201      	movs	r2, #1
    55e0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    55e2:	697b      	ldr	r3, [r7, #20]
    55e4:	2202      	movs	r2, #2
    55e6:	759a      	strb	r2, [r3, #22]
    55e8:	e002      	b.n	55f0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    55ea:	697b      	ldr	r3, [r7, #20]
    55ec:	2201      	movs	r2, #1
    55ee:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    55f0:	2312      	movs	r3, #18
    55f2:	18fb      	adds	r3, r7, r3
    55f4:	881b      	ldrh	r3, [r3, #0]
    55f6:	2202      	movs	r2, #2
    55f8:	4013      	ands	r3, r2
    55fa:	d011      	beq.n	5620 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    55fc:	697b      	ldr	r3, [r7, #20]
    55fe:	2202      	movs	r2, #2
    5600:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5602:	69bb      	ldr	r3, [r7, #24]
    5604:	2233      	movs	r2, #51	; 0x33
    5606:	2100      	movs	r1, #0
    5608:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    560a:	2310      	movs	r3, #16
    560c:	18fb      	adds	r3, r7, r3
    560e:	881b      	ldrh	r3, [r3, #0]
    5610:	2201      	movs	r2, #1
    5612:	4013      	ands	r3, r2
    5614:	d004      	beq.n	5620 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5616:	69bb      	ldr	r3, [r7, #24]
    5618:	68db      	ldr	r3, [r3, #12]
    561a:	69ba      	ldr	r2, [r7, #24]
    561c:	0010      	movs	r0, r2
    561e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5620:	2312      	movs	r3, #18
    5622:	18fb      	adds	r3, r7, r3
    5624:	881b      	ldrh	r3, [r3, #0]
    5626:	2204      	movs	r2, #4
    5628:	4013      	ands	r3, r2
    562a:	d100      	bne.n	562e <_usart_interrupt_handler+0x132>
    562c:	e0bd      	b.n	57aa <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    562e:	69bb      	ldr	r3, [r7, #24]
    5630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5632:	b29b      	uxth	r3, r3
    5634:	2b00      	cmp	r3, #0
    5636:	d100      	bne.n	563a <_usart_interrupt_handler+0x13e>
    5638:	e0b4      	b.n	57a4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    563a:	697b      	ldr	r3, [r7, #20]
    563c:	8b5b      	ldrh	r3, [r3, #26]
    563e:	b29b      	uxth	r3, r3
    5640:	b2da      	uxtb	r2, r3
    5642:	231f      	movs	r3, #31
    5644:	18fb      	adds	r3, r7, r3
    5646:	213f      	movs	r1, #63	; 0x3f
    5648:	400a      	ands	r2, r1
    564a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    564c:	231f      	movs	r3, #31
    564e:	18fb      	adds	r3, r7, r3
    5650:	781b      	ldrb	r3, [r3, #0]
    5652:	2208      	movs	r2, #8
    5654:	4013      	ands	r3, r2
    5656:	d007      	beq.n	5668 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5658:	231f      	movs	r3, #31
    565a:	18fb      	adds	r3, r7, r3
    565c:	221f      	movs	r2, #31
    565e:	18ba      	adds	r2, r7, r2
    5660:	7812      	ldrb	r2, [r2, #0]
    5662:	2108      	movs	r1, #8
    5664:	438a      	bics	r2, r1
    5666:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5668:	231f      	movs	r3, #31
    566a:	18fb      	adds	r3, r7, r3
    566c:	781b      	ldrb	r3, [r3, #0]
    566e:	2b00      	cmp	r3, #0
    5670:	d050      	beq.n	5714 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5672:	231f      	movs	r3, #31
    5674:	18fb      	adds	r3, r7, r3
    5676:	781b      	ldrb	r3, [r3, #0]
    5678:	2202      	movs	r2, #2
    567a:	4013      	ands	r3, r2
    567c:	d007      	beq.n	568e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    567e:	69bb      	ldr	r3, [r7, #24]
    5680:	2232      	movs	r2, #50	; 0x32
    5682:	211a      	movs	r1, #26
    5684:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5686:	697b      	ldr	r3, [r7, #20]
    5688:	2202      	movs	r2, #2
    568a:	835a      	strh	r2, [r3, #26]
    568c:	e036      	b.n	56fc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    568e:	231f      	movs	r3, #31
    5690:	18fb      	adds	r3, r7, r3
    5692:	781b      	ldrb	r3, [r3, #0]
    5694:	2204      	movs	r2, #4
    5696:	4013      	ands	r3, r2
    5698:	d007      	beq.n	56aa <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    569a:	69bb      	ldr	r3, [r7, #24]
    569c:	2232      	movs	r2, #50	; 0x32
    569e:	211e      	movs	r1, #30
    56a0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    56a2:	697b      	ldr	r3, [r7, #20]
    56a4:	2204      	movs	r2, #4
    56a6:	835a      	strh	r2, [r3, #26]
    56a8:	e028      	b.n	56fc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    56aa:	231f      	movs	r3, #31
    56ac:	18fb      	adds	r3, r7, r3
    56ae:	781b      	ldrb	r3, [r3, #0]
    56b0:	2201      	movs	r2, #1
    56b2:	4013      	ands	r3, r2
    56b4:	d007      	beq.n	56c6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    56b6:	69bb      	ldr	r3, [r7, #24]
    56b8:	2232      	movs	r2, #50	; 0x32
    56ba:	2113      	movs	r1, #19
    56bc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    56be:	697b      	ldr	r3, [r7, #20]
    56c0:	2201      	movs	r2, #1
    56c2:	835a      	strh	r2, [r3, #26]
    56c4:	e01a      	b.n	56fc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    56c6:	231f      	movs	r3, #31
    56c8:	18fb      	adds	r3, r7, r3
    56ca:	781b      	ldrb	r3, [r3, #0]
    56cc:	2210      	movs	r2, #16
    56ce:	4013      	ands	r3, r2
    56d0:	d007      	beq.n	56e2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    56d2:	69bb      	ldr	r3, [r7, #24]
    56d4:	2232      	movs	r2, #50	; 0x32
    56d6:	2142      	movs	r1, #66	; 0x42
    56d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    56da:	697b      	ldr	r3, [r7, #20]
    56dc:	2210      	movs	r2, #16
    56de:	835a      	strh	r2, [r3, #26]
    56e0:	e00c      	b.n	56fc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    56e2:	231f      	movs	r3, #31
    56e4:	18fb      	adds	r3, r7, r3
    56e6:	781b      	ldrb	r3, [r3, #0]
    56e8:	2220      	movs	r2, #32
    56ea:	4013      	ands	r3, r2
    56ec:	d006      	beq.n	56fc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    56ee:	69bb      	ldr	r3, [r7, #24]
    56f0:	2232      	movs	r2, #50	; 0x32
    56f2:	2141      	movs	r1, #65	; 0x41
    56f4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    56f6:	697b      	ldr	r3, [r7, #20]
    56f8:	2220      	movs	r2, #32
    56fa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    56fc:	2310      	movs	r3, #16
    56fe:	18fb      	adds	r3, r7, r3
    5700:	881b      	ldrh	r3, [r3, #0]
    5702:	2204      	movs	r2, #4
    5704:	4013      	ands	r3, r2
				if (callback_status
    5706:	d050      	beq.n	57aa <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5708:	69bb      	ldr	r3, [r7, #24]
    570a:	695b      	ldr	r3, [r3, #20]
    570c:	69ba      	ldr	r2, [r7, #24]
    570e:	0010      	movs	r0, r2
    5710:	4798      	blx	r3
    5712:	e04a      	b.n	57aa <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5714:	697b      	ldr	r3, [r7, #20]
    5716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5718:	b29a      	uxth	r2, r3
    571a:	230e      	movs	r3, #14
    571c:	18fb      	adds	r3, r7, r3
    571e:	05d2      	lsls	r2, r2, #23
    5720:	0dd2      	lsrs	r2, r2, #23
    5722:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5724:	69bb      	ldr	r3, [r7, #24]
    5726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5728:	220e      	movs	r2, #14
    572a:	18ba      	adds	r2, r7, r2
    572c:	8812      	ldrh	r2, [r2, #0]
    572e:	b2d2      	uxtb	r2, r2
    5730:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5732:	69bb      	ldr	r3, [r7, #24]
    5734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5736:	1c5a      	adds	r2, r3, #1
    5738:	69bb      	ldr	r3, [r7, #24]
    573a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    573c:	69bb      	ldr	r3, [r7, #24]
    573e:	795b      	ldrb	r3, [r3, #5]
    5740:	2b01      	cmp	r3, #1
    5742:	d10d      	bne.n	5760 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5744:	69bb      	ldr	r3, [r7, #24]
    5746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5748:	220e      	movs	r2, #14
    574a:	18ba      	adds	r2, r7, r2
    574c:	8812      	ldrh	r2, [r2, #0]
    574e:	0a12      	lsrs	r2, r2, #8
    5750:	b292      	uxth	r2, r2
    5752:	b2d2      	uxtb	r2, r2
    5754:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5756:	69bb      	ldr	r3, [r7, #24]
    5758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    575a:	1c5a      	adds	r2, r3, #1
    575c:	69bb      	ldr	r3, [r7, #24]
    575e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5760:	69bb      	ldr	r3, [r7, #24]
    5762:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5764:	b29b      	uxth	r3, r3
    5766:	3b01      	subs	r3, #1
    5768:	b29b      	uxth	r3, r3
    576a:	69ba      	ldr	r2, [r7, #24]
    576c:	1c19      	adds	r1, r3, #0
    576e:	8591      	strh	r1, [r2, #44]	; 0x2c
    5770:	2b00      	cmp	r3, #0
    5772:	d11a      	bne.n	57aa <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5774:	697b      	ldr	r3, [r7, #20]
    5776:	2204      	movs	r2, #4
    5778:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    577a:	69bb      	ldr	r3, [r7, #24]
    577c:	2232      	movs	r2, #50	; 0x32
    577e:	2100      	movs	r1, #0
    5780:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5782:	2310      	movs	r3, #16
    5784:	18fb      	adds	r3, r7, r3
    5786:	881b      	ldrh	r3, [r3, #0]
    5788:	2202      	movs	r2, #2
    578a:	4013      	ands	r3, r2
					if (callback_status
    578c:	d00d      	beq.n	57aa <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    578e:	69bb      	ldr	r3, [r7, #24]
    5790:	691b      	ldr	r3, [r3, #16]
    5792:	69ba      	ldr	r2, [r7, #24]
    5794:	0010      	movs	r0, r2
    5796:	4798      	blx	r3
    5798:	e007      	b.n	57aa <_usart_interrupt_handler+0x2ae>
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	2000044c 	.word	0x2000044c
    57a0:	000054d9 	.word	0x000054d9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    57a4:	697b      	ldr	r3, [r7, #20]
    57a6:	2204      	movs	r2, #4
    57a8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    57aa:	2312      	movs	r3, #18
    57ac:	18fb      	adds	r3, r7, r3
    57ae:	881b      	ldrh	r3, [r3, #0]
    57b0:	2210      	movs	r2, #16
    57b2:	4013      	ands	r3, r2
    57b4:	d010      	beq.n	57d8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    57b6:	697b      	ldr	r3, [r7, #20]
    57b8:	2210      	movs	r2, #16
    57ba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    57bc:	697b      	ldr	r3, [r7, #20]
    57be:	2210      	movs	r2, #16
    57c0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    57c2:	2310      	movs	r3, #16
    57c4:	18fb      	adds	r3, r7, r3
    57c6:	881b      	ldrh	r3, [r3, #0]
    57c8:	2210      	movs	r2, #16
    57ca:	4013      	ands	r3, r2
    57cc:	d004      	beq.n	57d8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    57ce:	69bb      	ldr	r3, [r7, #24]
    57d0:	69db      	ldr	r3, [r3, #28]
    57d2:	69ba      	ldr	r2, [r7, #24]
    57d4:	0010      	movs	r0, r2
    57d6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    57d8:	2312      	movs	r3, #18
    57da:	18fb      	adds	r3, r7, r3
    57dc:	881b      	ldrh	r3, [r3, #0]
    57de:	2220      	movs	r2, #32
    57e0:	4013      	ands	r3, r2
    57e2:	d010      	beq.n	5806 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    57e4:	697b      	ldr	r3, [r7, #20]
    57e6:	2220      	movs	r2, #32
    57e8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    57ea:	697b      	ldr	r3, [r7, #20]
    57ec:	2220      	movs	r2, #32
    57ee:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    57f0:	2310      	movs	r3, #16
    57f2:	18fb      	adds	r3, r7, r3
    57f4:	881b      	ldrh	r3, [r3, #0]
    57f6:	2208      	movs	r2, #8
    57f8:	4013      	ands	r3, r2
    57fa:	d004      	beq.n	5806 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    57fc:	69bb      	ldr	r3, [r7, #24]
    57fe:	699b      	ldr	r3, [r3, #24]
    5800:	69ba      	ldr	r2, [r7, #24]
    5802:	0010      	movs	r0, r2
    5804:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5806:	2312      	movs	r3, #18
    5808:	18fb      	adds	r3, r7, r3
    580a:	881b      	ldrh	r3, [r3, #0]
    580c:	2208      	movs	r2, #8
    580e:	4013      	ands	r3, r2
    5810:	d010      	beq.n	5834 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5812:	697b      	ldr	r3, [r7, #20]
    5814:	2208      	movs	r2, #8
    5816:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5818:	697b      	ldr	r3, [r7, #20]
    581a:	2208      	movs	r2, #8
    581c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    581e:	2310      	movs	r3, #16
    5820:	18fb      	adds	r3, r7, r3
    5822:	881b      	ldrh	r3, [r3, #0]
    5824:	2220      	movs	r2, #32
    5826:	4013      	ands	r3, r2
    5828:	d004      	beq.n	5834 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    582a:	69bb      	ldr	r3, [r7, #24]
    582c:	6a1b      	ldr	r3, [r3, #32]
    582e:	69ba      	ldr	r2, [r7, #24]
    5830:	0010      	movs	r0, r2
    5832:	4798      	blx	r3
		}
	}
#endif
}
    5834:	46c0      	nop			; (mov r8, r8)
    5836:	46bd      	mov	sp, r7
    5838:	b008      	add	sp, #32
    583a:	bd80      	pop	{r7, pc}

0000583c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    583c:	b580      	push	{r7, lr}
    583e:	b082      	sub	sp, #8
    5840:	af00      	add	r7, sp, #0
    5842:	0002      	movs	r2, r0
    5844:	1dfb      	adds	r3, r7, #7
    5846:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    5848:	46c0      	nop			; (mov r8, r8)
    584a:	46bd      	mov	sp, r7
    584c:	b002      	add	sp, #8
    584e:	bd80      	pop	{r7, pc}

00005850 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5850:	b580      	push	{r7, lr}
    5852:	b084      	sub	sp, #16
    5854:	af00      	add	r7, sp, #0
    5856:	0002      	movs	r2, r0
    5858:	6039      	str	r1, [r7, #0]
    585a:	1dfb      	adds	r3, r7, #7
    585c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    585e:	4b13      	ldr	r3, [pc, #76]	; (58ac <_sercom_set_handler+0x5c>)
    5860:	781b      	ldrb	r3, [r3, #0]
    5862:	2201      	movs	r2, #1
    5864:	4053      	eors	r3, r2
    5866:	b2db      	uxtb	r3, r3
    5868:	2b00      	cmp	r3, #0
    586a:	d015      	beq.n	5898 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    586c:	2300      	movs	r3, #0
    586e:	60fb      	str	r3, [r7, #12]
    5870:	e00c      	b.n	588c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5872:	4b0f      	ldr	r3, [pc, #60]	; (58b0 <_sercom_set_handler+0x60>)
    5874:	68fa      	ldr	r2, [r7, #12]
    5876:	0092      	lsls	r2, r2, #2
    5878:	490e      	ldr	r1, [pc, #56]	; (58b4 <_sercom_set_handler+0x64>)
    587a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    587c:	4b0e      	ldr	r3, [pc, #56]	; (58b8 <_sercom_set_handler+0x68>)
    587e:	68fa      	ldr	r2, [r7, #12]
    5880:	0092      	lsls	r2, r2, #2
    5882:	2100      	movs	r1, #0
    5884:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5886:	68fb      	ldr	r3, [r7, #12]
    5888:	3301      	adds	r3, #1
    588a:	60fb      	str	r3, [r7, #12]
    588c:	68fb      	ldr	r3, [r7, #12]
    588e:	2b05      	cmp	r3, #5
    5890:	d9ef      	bls.n	5872 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    5892:	4b06      	ldr	r3, [pc, #24]	; (58ac <_sercom_set_handler+0x5c>)
    5894:	2201      	movs	r2, #1
    5896:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5898:	1dfb      	adds	r3, r7, #7
    589a:	781a      	ldrb	r2, [r3, #0]
    589c:	4b04      	ldr	r3, [pc, #16]	; (58b0 <_sercom_set_handler+0x60>)
    589e:	0092      	lsls	r2, r2, #2
    58a0:	6839      	ldr	r1, [r7, #0]
    58a2:	50d1      	str	r1, [r2, r3]
}
    58a4:	46c0      	nop			; (mov r8, r8)
    58a6:	46bd      	mov	sp, r7
    58a8:	b004      	add	sp, #16
    58aa:	bd80      	pop	{r7, pc}
    58ac:	2000027a 	.word	0x2000027a
    58b0:	2000027c 	.word	0x2000027c
    58b4:	0000583d 	.word	0x0000583d
    58b8:	2000044c 	.word	0x2000044c

000058bc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    58bc:	b590      	push	{r4, r7, lr}
    58be:	b085      	sub	sp, #20
    58c0:	af00      	add	r7, sp, #0
    58c2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    58c4:	2308      	movs	r3, #8
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	4a0b      	ldr	r2, [pc, #44]	; (58f8 <_sercom_get_interrupt_vector+0x3c>)
    58ca:	6811      	ldr	r1, [r2, #0]
    58cc:	6019      	str	r1, [r3, #0]
    58ce:	8892      	ldrh	r2, [r2, #4]
    58d0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    58d2:	230f      	movs	r3, #15
    58d4:	18fc      	adds	r4, r7, r3
    58d6:	687b      	ldr	r3, [r7, #4]
    58d8:	0018      	movs	r0, r3
    58da:	4b08      	ldr	r3, [pc, #32]	; (58fc <_sercom_get_interrupt_vector+0x40>)
    58dc:	4798      	blx	r3
    58de:	0003      	movs	r3, r0
    58e0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    58e2:	230f      	movs	r3, #15
    58e4:	18fb      	adds	r3, r7, r3
    58e6:	781b      	ldrb	r3, [r3, #0]
    58e8:	2208      	movs	r2, #8
    58ea:	18ba      	adds	r2, r7, r2
    58ec:	5cd3      	ldrb	r3, [r2, r3]
    58ee:	b25b      	sxtb	r3, r3
}
    58f0:	0018      	movs	r0, r3
    58f2:	46bd      	mov	sp, r7
    58f4:	b005      	add	sp, #20
    58f6:	bd90      	pop	{r4, r7, pc}
    58f8:	0000e5fc 	.word	0x0000e5fc
    58fc:	000049d5 	.word	0x000049d5

00005900 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5900:	b580      	push	{r7, lr}
    5902:	af00      	add	r7, sp, #0
    5904:	4b03      	ldr	r3, [pc, #12]	; (5914 <SERCOM0_Handler+0x14>)
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	2000      	movs	r0, #0
    590a:	4798      	blx	r3
    590c:	46c0      	nop			; (mov r8, r8)
    590e:	46bd      	mov	sp, r7
    5910:	bd80      	pop	{r7, pc}
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	2000027c 	.word	0x2000027c

00005918 <SERCOM1_Handler>:
    5918:	b580      	push	{r7, lr}
    591a:	af00      	add	r7, sp, #0
    591c:	4b03      	ldr	r3, [pc, #12]	; (592c <SERCOM1_Handler+0x14>)
    591e:	685b      	ldr	r3, [r3, #4]
    5920:	2001      	movs	r0, #1
    5922:	4798      	blx	r3
    5924:	46c0      	nop			; (mov r8, r8)
    5926:	46bd      	mov	sp, r7
    5928:	bd80      	pop	{r7, pc}
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	2000027c 	.word	0x2000027c

00005930 <SERCOM2_Handler>:
    5930:	b580      	push	{r7, lr}
    5932:	af00      	add	r7, sp, #0
    5934:	4b03      	ldr	r3, [pc, #12]	; (5944 <SERCOM2_Handler+0x14>)
    5936:	689b      	ldr	r3, [r3, #8]
    5938:	2002      	movs	r0, #2
    593a:	4798      	blx	r3
    593c:	46c0      	nop			; (mov r8, r8)
    593e:	46bd      	mov	sp, r7
    5940:	bd80      	pop	{r7, pc}
    5942:	46c0      	nop			; (mov r8, r8)
    5944:	2000027c 	.word	0x2000027c

00005948 <SERCOM3_Handler>:
    5948:	b580      	push	{r7, lr}
    594a:	af00      	add	r7, sp, #0
    594c:	4b03      	ldr	r3, [pc, #12]	; (595c <SERCOM3_Handler+0x14>)
    594e:	68db      	ldr	r3, [r3, #12]
    5950:	2003      	movs	r0, #3
    5952:	4798      	blx	r3
    5954:	46c0      	nop			; (mov r8, r8)
    5956:	46bd      	mov	sp, r7
    5958:	bd80      	pop	{r7, pc}
    595a:	46c0      	nop			; (mov r8, r8)
    595c:	2000027c 	.word	0x2000027c

00005960 <SERCOM4_Handler>:
    5960:	b580      	push	{r7, lr}
    5962:	af00      	add	r7, sp, #0
    5964:	4b03      	ldr	r3, [pc, #12]	; (5974 <SERCOM4_Handler+0x14>)
    5966:	691b      	ldr	r3, [r3, #16]
    5968:	2004      	movs	r0, #4
    596a:	4798      	blx	r3
    596c:	46c0      	nop			; (mov r8, r8)
    596e:	46bd      	mov	sp, r7
    5970:	bd80      	pop	{r7, pc}
    5972:	46c0      	nop			; (mov r8, r8)
    5974:	2000027c 	.word	0x2000027c

00005978 <SERCOM5_Handler>:
    5978:	b580      	push	{r7, lr}
    597a:	af00      	add	r7, sp, #0
    597c:	4b03      	ldr	r3, [pc, #12]	; (598c <SERCOM5_Handler+0x14>)
    597e:	695b      	ldr	r3, [r3, #20]
    5980:	2005      	movs	r0, #5
    5982:	4798      	blx	r3
    5984:	46c0      	nop			; (mov r8, r8)
    5986:	46bd      	mov	sp, r7
    5988:	bd80      	pop	{r7, pc}
    598a:	46c0      	nop			; (mov r8, r8)
    598c:	2000027c 	.word	0x2000027c

00005990 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    5990:	b580      	push	{r7, lr}
    5992:	b082      	sub	sp, #8
    5994:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    5996:	4b10      	ldr	r3, [pc, #64]	; (59d8 <cpu_irq_enter_critical+0x48>)
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	2b00      	cmp	r3, #0
    599c:	d112      	bne.n	59c4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    599e:	f3ef 8310 	mrs	r3, PRIMASK
    59a2:	607b      	str	r3, [r7, #4]
  return(result);
    59a4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    59a6:	2b00      	cmp	r3, #0
    59a8:	d109      	bne.n	59be <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    59aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    59ac:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    59b0:	4b0a      	ldr	r3, [pc, #40]	; (59dc <cpu_irq_enter_critical+0x4c>)
    59b2:	2200      	movs	r2, #0
    59b4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    59b6:	4b0a      	ldr	r3, [pc, #40]	; (59e0 <cpu_irq_enter_critical+0x50>)
    59b8:	2201      	movs	r2, #1
    59ba:	701a      	strb	r2, [r3, #0]
    59bc:	e002      	b.n	59c4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    59be:	4b08      	ldr	r3, [pc, #32]	; (59e0 <cpu_irq_enter_critical+0x50>)
    59c0:	2200      	movs	r2, #0
    59c2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    59c4:	4b04      	ldr	r3, [pc, #16]	; (59d8 <cpu_irq_enter_critical+0x48>)
    59c6:	681b      	ldr	r3, [r3, #0]
    59c8:	1c5a      	adds	r2, r3, #1
    59ca:	4b03      	ldr	r3, [pc, #12]	; (59d8 <cpu_irq_enter_critical+0x48>)
    59cc:	601a      	str	r2, [r3, #0]
}
    59ce:	46c0      	nop			; (mov r8, r8)
    59d0:	46bd      	mov	sp, r7
    59d2:	b002      	add	sp, #8
    59d4:	bd80      	pop	{r7, pc}
    59d6:	46c0      	nop			; (mov r8, r8)
    59d8:	20000294 	.word	0x20000294
    59dc:	20000048 	.word	0x20000048
    59e0:	20000298 	.word	0x20000298

000059e4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    59e4:	b580      	push	{r7, lr}
    59e6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    59e8:	4b0b      	ldr	r3, [pc, #44]	; (5a18 <cpu_irq_leave_critical+0x34>)
    59ea:	681b      	ldr	r3, [r3, #0]
    59ec:	1e5a      	subs	r2, r3, #1
    59ee:	4b0a      	ldr	r3, [pc, #40]	; (5a18 <cpu_irq_leave_critical+0x34>)
    59f0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    59f2:	4b09      	ldr	r3, [pc, #36]	; (5a18 <cpu_irq_leave_critical+0x34>)
    59f4:	681b      	ldr	r3, [r3, #0]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d10a      	bne.n	5a10 <cpu_irq_leave_critical+0x2c>
    59fa:	4b08      	ldr	r3, [pc, #32]	; (5a1c <cpu_irq_leave_critical+0x38>)
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	b2db      	uxtb	r3, r3
    5a00:	2b00      	cmp	r3, #0
    5a02:	d005      	beq.n	5a10 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5a04:	4b06      	ldr	r3, [pc, #24]	; (5a20 <cpu_irq_leave_critical+0x3c>)
    5a06:	2201      	movs	r2, #1
    5a08:	701a      	strb	r2, [r3, #0]
    5a0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5a0e:	b662      	cpsie	i
	}
}
    5a10:	46c0      	nop			; (mov r8, r8)
    5a12:	46bd      	mov	sp, r7
    5a14:	bd80      	pop	{r7, pc}
    5a16:	46c0      	nop			; (mov r8, r8)
    5a18:	20000294 	.word	0x20000294
    5a1c:	20000298 	.word	0x20000298
    5a20:	20000048 	.word	0x20000048

00005a24 <system_pinmux_get_group_from_gpio_pin>:
{
    5a24:	b580      	push	{r7, lr}
    5a26:	b084      	sub	sp, #16
    5a28:	af00      	add	r7, sp, #0
    5a2a:	0002      	movs	r2, r0
    5a2c:	1dfb      	adds	r3, r7, #7
    5a2e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5a30:	230f      	movs	r3, #15
    5a32:	18fb      	adds	r3, r7, r3
    5a34:	1dfa      	adds	r2, r7, #7
    5a36:	7812      	ldrb	r2, [r2, #0]
    5a38:	09d2      	lsrs	r2, r2, #7
    5a3a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5a3c:	230e      	movs	r3, #14
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	1dfa      	adds	r2, r7, #7
    5a42:	7812      	ldrb	r2, [r2, #0]
    5a44:	0952      	lsrs	r2, r2, #5
    5a46:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5a48:	4b0d      	ldr	r3, [pc, #52]	; (5a80 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5a4a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5a4c:	230f      	movs	r3, #15
    5a4e:	18fb      	adds	r3, r7, r3
    5a50:	781b      	ldrb	r3, [r3, #0]
    5a52:	2b00      	cmp	r3, #0
    5a54:	d10f      	bne.n	5a76 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5a56:	230f      	movs	r3, #15
    5a58:	18fb      	adds	r3, r7, r3
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	009b      	lsls	r3, r3, #2
    5a5e:	2210      	movs	r2, #16
    5a60:	4694      	mov	ip, r2
    5a62:	44bc      	add	ip, r7
    5a64:	4463      	add	r3, ip
    5a66:	3b08      	subs	r3, #8
    5a68:	681a      	ldr	r2, [r3, #0]
    5a6a:	230e      	movs	r3, #14
    5a6c:	18fb      	adds	r3, r7, r3
    5a6e:	781b      	ldrb	r3, [r3, #0]
    5a70:	01db      	lsls	r3, r3, #7
    5a72:	18d3      	adds	r3, r2, r3
    5a74:	e000      	b.n	5a78 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    5a76:	2300      	movs	r3, #0
}
    5a78:	0018      	movs	r0, r3
    5a7a:	46bd      	mov	sp, r7
    5a7c:	b004      	add	sp, #16
    5a7e:	bd80      	pop	{r7, pc}
    5a80:	41004400 	.word	0x41004400

00005a84 <port_get_group_from_gpio_pin>:
{
    5a84:	b580      	push	{r7, lr}
    5a86:	b082      	sub	sp, #8
    5a88:	af00      	add	r7, sp, #0
    5a8a:	0002      	movs	r2, r0
    5a8c:	1dfb      	adds	r3, r7, #7
    5a8e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5a90:	1dfb      	adds	r3, r7, #7
    5a92:	781b      	ldrb	r3, [r3, #0]
    5a94:	0018      	movs	r0, r3
    5a96:	4b03      	ldr	r3, [pc, #12]	; (5aa4 <port_get_group_from_gpio_pin+0x20>)
    5a98:	4798      	blx	r3
    5a9a:	0003      	movs	r3, r0
}
    5a9c:	0018      	movs	r0, r3
    5a9e:	46bd      	mov	sp, r7
    5aa0:	b002      	add	sp, #8
    5aa2:	bd80      	pop	{r7, pc}
    5aa4:	00005a25 	.word	0x00005a25

00005aa8 <port_get_config_defaults>:
{
    5aa8:	b580      	push	{r7, lr}
    5aaa:	b082      	sub	sp, #8
    5aac:	af00      	add	r7, sp, #0
    5aae:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	2200      	movs	r2, #0
    5ab4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	2201      	movs	r2, #1
    5aba:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	2200      	movs	r2, #0
    5ac0:	709a      	strb	r2, [r3, #2]
}
    5ac2:	46c0      	nop			; (mov r8, r8)
    5ac4:	46bd      	mov	sp, r7
    5ac6:	b002      	add	sp, #8
    5ac8:	bd80      	pop	{r7, pc}
	...

00005acc <port_pin_set_output_level>:
{
    5acc:	b580      	push	{r7, lr}
    5ace:	b084      	sub	sp, #16
    5ad0:	af00      	add	r7, sp, #0
    5ad2:	0002      	movs	r2, r0
    5ad4:	1dfb      	adds	r3, r7, #7
    5ad6:	701a      	strb	r2, [r3, #0]
    5ad8:	1dbb      	adds	r3, r7, #6
    5ada:	1c0a      	adds	r2, r1, #0
    5adc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5ade:	1dfb      	adds	r3, r7, #7
    5ae0:	781b      	ldrb	r3, [r3, #0]
    5ae2:	0018      	movs	r0, r3
    5ae4:	4b0d      	ldr	r3, [pc, #52]	; (5b1c <port_pin_set_output_level+0x50>)
    5ae6:	4798      	blx	r3
    5ae8:	0003      	movs	r3, r0
    5aea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5aec:	1dfb      	adds	r3, r7, #7
    5aee:	781b      	ldrb	r3, [r3, #0]
    5af0:	221f      	movs	r2, #31
    5af2:	4013      	ands	r3, r2
    5af4:	2201      	movs	r2, #1
    5af6:	409a      	lsls	r2, r3
    5af8:	0013      	movs	r3, r2
    5afa:	60bb      	str	r3, [r7, #8]
	if (level) {
    5afc:	1dbb      	adds	r3, r7, #6
    5afe:	781b      	ldrb	r3, [r3, #0]
    5b00:	2b00      	cmp	r3, #0
    5b02:	d003      	beq.n	5b0c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5b04:	68fb      	ldr	r3, [r7, #12]
    5b06:	68ba      	ldr	r2, [r7, #8]
    5b08:	619a      	str	r2, [r3, #24]
}
    5b0a:	e002      	b.n	5b12 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    5b0c:	68fb      	ldr	r3, [r7, #12]
    5b0e:	68ba      	ldr	r2, [r7, #8]
    5b10:	615a      	str	r2, [r3, #20]
}
    5b12:	46c0      	nop			; (mov r8, r8)
    5b14:	46bd      	mov	sp, r7
    5b16:	b004      	add	sp, #16
    5b18:	bd80      	pop	{r7, pc}
    5b1a:	46c0      	nop			; (mov r8, r8)
    5b1c:	00005a85 	.word	0x00005a85

00005b20 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5b20:	b580      	push	{r7, lr}
    5b22:	b082      	sub	sp, #8
    5b24:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    5b26:	1d3b      	adds	r3, r7, #4
    5b28:	0018      	movs	r0, r3
    5b2a:	4b0e      	ldr	r3, [pc, #56]	; (5b64 <system_board_init+0x44>)
    5b2c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5b2e:	1d3b      	adds	r3, r7, #4
    5b30:	2201      	movs	r2, #1
    5b32:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    5b34:	1d3b      	adds	r3, r7, #4
    5b36:	0019      	movs	r1, r3
    5b38:	2017      	movs	r0, #23
    5b3a:	4b0b      	ldr	r3, [pc, #44]	; (5b68 <system_board_init+0x48>)
    5b3c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    5b3e:	2101      	movs	r1, #1
    5b40:	2017      	movs	r0, #23
    5b42:	4b0a      	ldr	r3, [pc, #40]	; (5b6c <system_board_init+0x4c>)
    5b44:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5b46:	1d3b      	adds	r3, r7, #4
    5b48:	2200      	movs	r2, #0
    5b4a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    5b4c:	1d3b      	adds	r3, r7, #4
    5b4e:	2201      	movs	r2, #1
    5b50:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    5b52:	1d3b      	adds	r3, r7, #4
    5b54:	0019      	movs	r1, r3
    5b56:	2037      	movs	r0, #55	; 0x37
    5b58:	4b03      	ldr	r3, [pc, #12]	; (5b68 <system_board_init+0x48>)
    5b5a:	4798      	blx	r3
}
    5b5c:	46c0      	nop			; (mov r8, r8)
    5b5e:	46bd      	mov	sp, r7
    5b60:	b002      	add	sp, #8
    5b62:	bd80      	pop	{r7, pc}
    5b64:	00005aa9 	.word	0x00005aa9
    5b68:	00005b99 	.word	0x00005b99
    5b6c:	00005acd 	.word	0x00005acd

00005b70 <system_pinmux_get_config_defaults>:
{
    5b70:	b580      	push	{r7, lr}
    5b72:	b082      	sub	sp, #8
    5b74:	af00      	add	r7, sp, #0
    5b76:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	2280      	movs	r2, #128	; 0x80
    5b7c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5b7e:	687b      	ldr	r3, [r7, #4]
    5b80:	2200      	movs	r2, #0
    5b82:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	2201      	movs	r2, #1
    5b88:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	2200      	movs	r2, #0
    5b8e:	70da      	strb	r2, [r3, #3]
}
    5b90:	46c0      	nop			; (mov r8, r8)
    5b92:	46bd      	mov	sp, r7
    5b94:	b002      	add	sp, #8
    5b96:	bd80      	pop	{r7, pc}

00005b98 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5b98:	b580      	push	{r7, lr}
    5b9a:	b084      	sub	sp, #16
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	0002      	movs	r2, r0
    5ba0:	6039      	str	r1, [r7, #0]
    5ba2:	1dfb      	adds	r3, r7, #7
    5ba4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    5ba6:	230c      	movs	r3, #12
    5ba8:	18fb      	adds	r3, r7, r3
    5baa:	0018      	movs	r0, r3
    5bac:	4b10      	ldr	r3, [pc, #64]	; (5bf0 <port_pin_set_config+0x58>)
    5bae:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    5bb0:	230c      	movs	r3, #12
    5bb2:	18fb      	adds	r3, r7, r3
    5bb4:	2280      	movs	r2, #128	; 0x80
    5bb6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    5bb8:	683b      	ldr	r3, [r7, #0]
    5bba:	781a      	ldrb	r2, [r3, #0]
    5bbc:	230c      	movs	r3, #12
    5bbe:	18fb      	adds	r3, r7, r3
    5bc0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5bc2:	683b      	ldr	r3, [r7, #0]
    5bc4:	785a      	ldrb	r2, [r3, #1]
    5bc6:	230c      	movs	r3, #12
    5bc8:	18fb      	adds	r3, r7, r3
    5bca:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5bcc:	683b      	ldr	r3, [r7, #0]
    5bce:	789a      	ldrb	r2, [r3, #2]
    5bd0:	230c      	movs	r3, #12
    5bd2:	18fb      	adds	r3, r7, r3
    5bd4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5bd6:	230c      	movs	r3, #12
    5bd8:	18fa      	adds	r2, r7, r3
    5bda:	1dfb      	adds	r3, r7, #7
    5bdc:	781b      	ldrb	r3, [r3, #0]
    5bde:	0011      	movs	r1, r2
    5be0:	0018      	movs	r0, r3
    5be2:	4b04      	ldr	r3, [pc, #16]	; (5bf4 <port_pin_set_config+0x5c>)
    5be4:	4798      	blx	r3
}
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	46bd      	mov	sp, r7
    5bea:	b004      	add	sp, #16
    5bec:	bd80      	pop	{r7, pc}
    5bee:	46c0      	nop			; (mov r8, r8)
    5bf0:	00005b71 	.word	0x00005b71
    5bf4:	00006b21 	.word	0x00006b21

00005bf8 <system_gclk_gen_get_config_defaults>:
{
    5bf8:	b580      	push	{r7, lr}
    5bfa:	b082      	sub	sp, #8
    5bfc:	af00      	add	r7, sp, #0
    5bfe:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	2201      	movs	r2, #1
    5c04:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	2200      	movs	r2, #0
    5c0a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5c0c:	687b      	ldr	r3, [r7, #4]
    5c0e:	2206      	movs	r2, #6
    5c10:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5c12:	687b      	ldr	r3, [r7, #4]
    5c14:	2200      	movs	r2, #0
    5c16:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	2200      	movs	r2, #0
    5c1c:	725a      	strb	r2, [r3, #9]
}
    5c1e:	46c0      	nop			; (mov r8, r8)
    5c20:	46bd      	mov	sp, r7
    5c22:	b002      	add	sp, #8
    5c24:	bd80      	pop	{r7, pc}

00005c26 <system_gclk_chan_get_config_defaults>:
{
    5c26:	b580      	push	{r7, lr}
    5c28:	b082      	sub	sp, #8
    5c2a:	af00      	add	r7, sp, #0
    5c2c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	2200      	movs	r2, #0
    5c32:	701a      	strb	r2, [r3, #0]
}
    5c34:	46c0      	nop			; (mov r8, r8)
    5c36:	46bd      	mov	sp, r7
    5c38:	b002      	add	sp, #8
    5c3a:	bd80      	pop	{r7, pc}

00005c3c <system_clock_source_xosc32k_get_config_defaults>:
{
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b082      	sub	sp, #8
    5c40:	af00      	add	r7, sp, #0
    5c42:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5c44:	687b      	ldr	r3, [r7, #4]
    5c46:	2200      	movs	r2, #0
    5c48:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	2204      	movs	r2, #4
    5c4e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	2200      	movs	r2, #0
    5c54:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5c56:	687b      	ldr	r3, [r7, #4]
    5c58:	2280      	movs	r2, #128	; 0x80
    5c5a:	0212      	lsls	r2, r2, #8
    5c5c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	2200      	movs	r2, #0
    5c62:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5c64:	687b      	ldr	r3, [r7, #4]
    5c66:	2201      	movs	r2, #1
    5c68:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	2200      	movs	r2, #0
    5c6e:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5c70:	687b      	ldr	r3, [r7, #4]
    5c72:	2201      	movs	r2, #1
    5c74:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5c76:	687b      	ldr	r3, [r7, #4]
    5c78:	2200      	movs	r2, #0
    5c7a:	739a      	strb	r2, [r3, #14]
}
    5c7c:	46c0      	nop			; (mov r8, r8)
    5c7e:	46bd      	mov	sp, r7
    5c80:	b002      	add	sp, #8
    5c82:	bd80      	pop	{r7, pc}

00005c84 <system_clock_source_osc8m_get_config_defaults>:
{
    5c84:	b580      	push	{r7, lr}
    5c86:	b082      	sub	sp, #8
    5c88:	af00      	add	r7, sp, #0
    5c8a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	2203      	movs	r2, #3
    5c90:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	2200      	movs	r2, #0
    5c96:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5c98:	687b      	ldr	r3, [r7, #4]
    5c9a:	2201      	movs	r2, #1
    5c9c:	709a      	strb	r2, [r3, #2]
}
    5c9e:	46c0      	nop			; (mov r8, r8)
    5ca0:	46bd      	mov	sp, r7
    5ca2:	b002      	add	sp, #8
    5ca4:	bd80      	pop	{r7, pc}

00005ca6 <system_clock_source_dfll_get_config_defaults>:
{
    5ca6:	b580      	push	{r7, lr}
    5ca8:	b082      	sub	sp, #8
    5caa:	af00      	add	r7, sp, #0
    5cac:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5cae:	687b      	ldr	r3, [r7, #4]
    5cb0:	2200      	movs	r2, #0
    5cb2:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	2200      	movs	r2, #0
    5cb8:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5cba:	687b      	ldr	r3, [r7, #4]
    5cbc:	2200      	movs	r2, #0
    5cbe:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	2200      	movs	r2, #0
    5cc4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5cc6:	687b      	ldr	r3, [r7, #4]
    5cc8:	2200      	movs	r2, #0
    5cca:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5ccc:	687b      	ldr	r3, [r7, #4]
    5cce:	2201      	movs	r2, #1
    5cd0:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5cd2:	687b      	ldr	r3, [r7, #4]
    5cd4:	2207      	movs	r2, #7
    5cd6:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	223f      	movs	r2, #63	; 0x3f
    5cdc:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	2201      	movs	r2, #1
    5ce2:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5ce4:	687b      	ldr	r3, [r7, #4]
    5ce6:	2201      	movs	r2, #1
    5ce8:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5cea:	687b      	ldr	r3, [r7, #4]
    5cec:	2206      	movs	r2, #6
    5cee:	821a      	strh	r2, [r3, #16]
}
    5cf0:	46c0      	nop			; (mov r8, r8)
    5cf2:	46bd      	mov	sp, r7
    5cf4:	b002      	add	sp, #8
    5cf6:	bd80      	pop	{r7, pc}

00005cf8 <system_cpu_clock_set_divider>:
{
    5cf8:	b580      	push	{r7, lr}
    5cfa:	b082      	sub	sp, #8
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	0002      	movs	r2, r0
    5d00:	1dfb      	adds	r3, r7, #7
    5d02:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5d04:	4a03      	ldr	r2, [pc, #12]	; (5d14 <system_cpu_clock_set_divider+0x1c>)
    5d06:	1dfb      	adds	r3, r7, #7
    5d08:	781b      	ldrb	r3, [r3, #0]
    5d0a:	7213      	strb	r3, [r2, #8]
}
    5d0c:	46c0      	nop			; (mov r8, r8)
    5d0e:	46bd      	mov	sp, r7
    5d10:	b002      	add	sp, #8
    5d12:	bd80      	pop	{r7, pc}
    5d14:	40000400 	.word	0x40000400

00005d18 <system_apb_clock_set_divider>:
{
    5d18:	b580      	push	{r7, lr}
    5d1a:	b082      	sub	sp, #8
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	0002      	movs	r2, r0
    5d20:	1dfb      	adds	r3, r7, #7
    5d22:	701a      	strb	r2, [r3, #0]
    5d24:	1dbb      	adds	r3, r7, #6
    5d26:	1c0a      	adds	r2, r1, #0
    5d28:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d2a:	1dfb      	adds	r3, r7, #7
    5d2c:	781b      	ldrb	r3, [r3, #0]
    5d2e:	2b01      	cmp	r3, #1
    5d30:	d008      	beq.n	5d44 <system_apb_clock_set_divider+0x2c>
    5d32:	2b02      	cmp	r3, #2
    5d34:	d00b      	beq.n	5d4e <system_apb_clock_set_divider+0x36>
    5d36:	2b00      	cmp	r3, #0
    5d38:	d10e      	bne.n	5d58 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5d3a:	4a0b      	ldr	r2, [pc, #44]	; (5d68 <system_apb_clock_set_divider+0x50>)
    5d3c:	1dbb      	adds	r3, r7, #6
    5d3e:	781b      	ldrb	r3, [r3, #0]
    5d40:	7253      	strb	r3, [r2, #9]
			break;
    5d42:	e00b      	b.n	5d5c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5d44:	4a08      	ldr	r2, [pc, #32]	; (5d68 <system_apb_clock_set_divider+0x50>)
    5d46:	1dbb      	adds	r3, r7, #6
    5d48:	781b      	ldrb	r3, [r3, #0]
    5d4a:	7293      	strb	r3, [r2, #10]
			break;
    5d4c:	e006      	b.n	5d5c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5d4e:	4a06      	ldr	r2, [pc, #24]	; (5d68 <system_apb_clock_set_divider+0x50>)
    5d50:	1dbb      	adds	r3, r7, #6
    5d52:	781b      	ldrb	r3, [r3, #0]
    5d54:	72d3      	strb	r3, [r2, #11]
			break;
    5d56:	e001      	b.n	5d5c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5d58:	2317      	movs	r3, #23
    5d5a:	e000      	b.n	5d5e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5d5c:	2300      	movs	r3, #0
}
    5d5e:	0018      	movs	r0, r3
    5d60:	46bd      	mov	sp, r7
    5d62:	b002      	add	sp, #8
    5d64:	bd80      	pop	{r7, pc}
    5d66:	46c0      	nop			; (mov r8, r8)
    5d68:	40000400 	.word	0x40000400

00005d6c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5d6c:	b580      	push	{r7, lr}
    5d6e:	b082      	sub	sp, #8
    5d70:	af00      	add	r7, sp, #0
    5d72:	0002      	movs	r2, r0
    5d74:	1dfb      	adds	r3, r7, #7
    5d76:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5d78:	4a08      	ldr	r2, [pc, #32]	; (5d9c <system_flash_set_waitstates+0x30>)
    5d7a:	1dfb      	adds	r3, r7, #7
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	210f      	movs	r1, #15
    5d80:	400b      	ands	r3, r1
    5d82:	b2d9      	uxtb	r1, r3
    5d84:	6853      	ldr	r3, [r2, #4]
    5d86:	200f      	movs	r0, #15
    5d88:	4001      	ands	r1, r0
    5d8a:	0049      	lsls	r1, r1, #1
    5d8c:	201e      	movs	r0, #30
    5d8e:	4383      	bics	r3, r0
    5d90:	430b      	orrs	r3, r1
    5d92:	6053      	str	r3, [r2, #4]
}
    5d94:	46c0      	nop			; (mov r8, r8)
    5d96:	46bd      	mov	sp, r7
    5d98:	b002      	add	sp, #8
    5d9a:	bd80      	pop	{r7, pc}
    5d9c:	41004000 	.word	0x41004000

00005da0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5da0:	b580      	push	{r7, lr}
    5da2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5da4:	46c0      	nop			; (mov r8, r8)
    5da6:	4b04      	ldr	r3, [pc, #16]	; (5db8 <_system_dfll_wait_for_sync+0x18>)
    5da8:	68db      	ldr	r3, [r3, #12]
    5daa:	2210      	movs	r2, #16
    5dac:	4013      	ands	r3, r2
    5dae:	d0fa      	beq.n	5da6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5db0:	46c0      	nop			; (mov r8, r8)
    5db2:	46bd      	mov	sp, r7
    5db4:	bd80      	pop	{r7, pc}
    5db6:	46c0      	nop			; (mov r8, r8)
    5db8:	40000800 	.word	0x40000800

00005dbc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5dbc:	b580      	push	{r7, lr}
    5dbe:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5dc0:	4b0c      	ldr	r3, [pc, #48]	; (5df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5dc2:	2202      	movs	r2, #2
    5dc4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5dc6:	4b0c      	ldr	r3, [pc, #48]	; (5df8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5dc8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5dca:	4a0a      	ldr	r2, [pc, #40]	; (5df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5dcc:	4b0b      	ldr	r3, [pc, #44]	; (5dfc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5dce:	689b      	ldr	r3, [r3, #8]
    5dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5dd2:	4a08      	ldr	r2, [pc, #32]	; (5df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5dd4:	4b09      	ldr	r3, [pc, #36]	; (5dfc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5dd6:	685b      	ldr	r3, [r3, #4]
    5dd8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5dda:	4b06      	ldr	r3, [pc, #24]	; (5df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ddc:	2200      	movs	r2, #0
    5dde:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5de0:	4b05      	ldr	r3, [pc, #20]	; (5df8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5de2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5de4:	4a03      	ldr	r2, [pc, #12]	; (5df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5de6:	4b05      	ldr	r3, [pc, #20]	; (5dfc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5de8:	681b      	ldr	r3, [r3, #0]
    5dea:	b29b      	uxth	r3, r3
    5dec:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5dee:	46c0      	nop			; (mov r8, r8)
    5df0:	46bd      	mov	sp, r7
    5df2:	bd80      	pop	{r7, pc}
    5df4:	40000800 	.word	0x40000800
    5df8:	00005da1 	.word	0x00005da1
    5dfc:	2000029c 	.word	0x2000029c

00005e00 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5e00:	b580      	push	{r7, lr}
    5e02:	b082      	sub	sp, #8
    5e04:	af00      	add	r7, sp, #0
    5e06:	0002      	movs	r2, r0
    5e08:	1dfb      	adds	r3, r7, #7
    5e0a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5e0c:	1dfb      	adds	r3, r7, #7
    5e0e:	781b      	ldrb	r3, [r3, #0]
    5e10:	2b08      	cmp	r3, #8
    5e12:	d840      	bhi.n	5e96 <system_clock_source_get_hz+0x96>
    5e14:	009a      	lsls	r2, r3, #2
    5e16:	4b22      	ldr	r3, [pc, #136]	; (5ea0 <system_clock_source_get_hz+0xa0>)
    5e18:	18d3      	adds	r3, r2, r3
    5e1a:	681b      	ldr	r3, [r3, #0]
    5e1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5e1e:	4b21      	ldr	r3, [pc, #132]	; (5ea4 <system_clock_source_get_hz+0xa4>)
    5e20:	691b      	ldr	r3, [r3, #16]
    5e22:	e039      	b.n	5e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5e24:	4b20      	ldr	r3, [pc, #128]	; (5ea8 <system_clock_source_get_hz+0xa8>)
    5e26:	6a1b      	ldr	r3, [r3, #32]
    5e28:	059b      	lsls	r3, r3, #22
    5e2a:	0f9b      	lsrs	r3, r3, #30
    5e2c:	b2db      	uxtb	r3, r3
    5e2e:	001a      	movs	r2, r3
    5e30:	4b1e      	ldr	r3, [pc, #120]	; (5eac <system_clock_source_get_hz+0xac>)
    5e32:	40d3      	lsrs	r3, r2
    5e34:	e030      	b.n	5e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5e36:	2380      	movs	r3, #128	; 0x80
    5e38:	021b      	lsls	r3, r3, #8
    5e3a:	e02d      	b.n	5e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5e3c:	2380      	movs	r3, #128	; 0x80
    5e3e:	021b      	lsls	r3, r3, #8
    5e40:	e02a      	b.n	5e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5e42:	4b18      	ldr	r3, [pc, #96]	; (5ea4 <system_clock_source_get_hz+0xa4>)
    5e44:	695b      	ldr	r3, [r3, #20]
    5e46:	e027      	b.n	5e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5e48:	4b16      	ldr	r3, [pc, #88]	; (5ea4 <system_clock_source_get_hz+0xa4>)
    5e4a:	681b      	ldr	r3, [r3, #0]
    5e4c:	2202      	movs	r2, #2
    5e4e:	4013      	ands	r3, r2
    5e50:	d101      	bne.n	5e56 <system_clock_source_get_hz+0x56>
			return 0;
    5e52:	2300      	movs	r3, #0
    5e54:	e020      	b.n	5e98 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5e56:	4b16      	ldr	r3, [pc, #88]	; (5eb0 <system_clock_source_get_hz+0xb0>)
    5e58:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5e5a:	4b12      	ldr	r3, [pc, #72]	; (5ea4 <system_clock_source_get_hz+0xa4>)
    5e5c:	681b      	ldr	r3, [r3, #0]
    5e5e:	2204      	movs	r2, #4
    5e60:	4013      	ands	r3, r2
    5e62:	d009      	beq.n	5e78 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5e64:	2000      	movs	r0, #0
    5e66:	4b13      	ldr	r3, [pc, #76]	; (5eb4 <system_clock_source_get_hz+0xb4>)
    5e68:	4798      	blx	r3
    5e6a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5e6c:	4b0d      	ldr	r3, [pc, #52]	; (5ea4 <system_clock_source_get_hz+0xa4>)
    5e6e:	689b      	ldr	r3, [r3, #8]
    5e70:	041b      	lsls	r3, r3, #16
    5e72:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5e74:	4353      	muls	r3, r2
    5e76:	e00f      	b.n	5e98 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    5e78:	4b0f      	ldr	r3, [pc, #60]	; (5eb8 <system_clock_source_get_hz+0xb8>)
    5e7a:	e00d      	b.n	5e98 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5e7c:	4a0a      	ldr	r2, [pc, #40]	; (5ea8 <system_clock_source_get_hz+0xa8>)
    5e7e:	2350      	movs	r3, #80	; 0x50
    5e80:	5cd3      	ldrb	r3, [r2, r3]
    5e82:	b2db      	uxtb	r3, r3
    5e84:	001a      	movs	r2, r3
    5e86:	2304      	movs	r3, #4
    5e88:	4013      	ands	r3, r2
    5e8a:	d101      	bne.n	5e90 <system_clock_source_get_hz+0x90>
			return 0;
    5e8c:	2300      	movs	r3, #0
    5e8e:	e003      	b.n	5e98 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    5e90:	4b04      	ldr	r3, [pc, #16]	; (5ea4 <system_clock_source_get_hz+0xa4>)
    5e92:	68db      	ldr	r3, [r3, #12]
    5e94:	e000      	b.n	5e98 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    5e96:	2300      	movs	r3, #0
	}
}
    5e98:	0018      	movs	r0, r3
    5e9a:	46bd      	mov	sp, r7
    5e9c:	b002      	add	sp, #8
    5e9e:	bd80      	pop	{r7, pc}
    5ea0:	0000e604 	.word	0x0000e604
    5ea4:	2000029c 	.word	0x2000029c
    5ea8:	40000800 	.word	0x40000800
    5eac:	007a1200 	.word	0x007a1200
    5eb0:	00005da1 	.word	0x00005da1
    5eb4:	00006959 	.word	0x00006959
    5eb8:	02dc6c00 	.word	0x02dc6c00

00005ebc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5ebc:	b580      	push	{r7, lr}
    5ebe:	b084      	sub	sp, #16
    5ec0:	af00      	add	r7, sp, #0
    5ec2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5ec4:	4b1a      	ldr	r3, [pc, #104]	; (5f30 <system_clock_source_osc8m_set_config+0x74>)
    5ec6:	6a1b      	ldr	r3, [r3, #32]
    5ec8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	781b      	ldrb	r3, [r3, #0]
    5ece:	1c1a      	adds	r2, r3, #0
    5ed0:	2303      	movs	r3, #3
    5ed2:	4013      	ands	r3, r2
    5ed4:	b2da      	uxtb	r2, r3
    5ed6:	230d      	movs	r3, #13
    5ed8:	18fb      	adds	r3, r7, r3
    5eda:	2103      	movs	r1, #3
    5edc:	400a      	ands	r2, r1
    5ede:	0010      	movs	r0, r2
    5ee0:	781a      	ldrb	r2, [r3, #0]
    5ee2:	2103      	movs	r1, #3
    5ee4:	438a      	bics	r2, r1
    5ee6:	1c11      	adds	r1, r2, #0
    5ee8:	1c02      	adds	r2, r0, #0
    5eea:	430a      	orrs	r2, r1
    5eec:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	789a      	ldrb	r2, [r3, #2]
    5ef2:	230c      	movs	r3, #12
    5ef4:	18fb      	adds	r3, r7, r3
    5ef6:	01d0      	lsls	r0, r2, #7
    5ef8:	781a      	ldrb	r2, [r3, #0]
    5efa:	217f      	movs	r1, #127	; 0x7f
    5efc:	400a      	ands	r2, r1
    5efe:	1c11      	adds	r1, r2, #0
    5f00:	1c02      	adds	r2, r0, #0
    5f02:	430a      	orrs	r2, r1
    5f04:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	785a      	ldrb	r2, [r3, #1]
    5f0a:	230c      	movs	r3, #12
    5f0c:	18fb      	adds	r3, r7, r3
    5f0e:	2101      	movs	r1, #1
    5f10:	400a      	ands	r2, r1
    5f12:	0190      	lsls	r0, r2, #6
    5f14:	781a      	ldrb	r2, [r3, #0]
    5f16:	2140      	movs	r1, #64	; 0x40
    5f18:	438a      	bics	r2, r1
    5f1a:	1c11      	adds	r1, r2, #0
    5f1c:	1c02      	adds	r2, r0, #0
    5f1e:	430a      	orrs	r2, r1
    5f20:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5f22:	4b03      	ldr	r3, [pc, #12]	; (5f30 <system_clock_source_osc8m_set_config+0x74>)
    5f24:	68fa      	ldr	r2, [r7, #12]
    5f26:	621a      	str	r2, [r3, #32]
}
    5f28:	46c0      	nop			; (mov r8, r8)
    5f2a:	46bd      	mov	sp, r7
    5f2c:	b004      	add	sp, #16
    5f2e:	bd80      	pop	{r7, pc}
    5f30:	40000800 	.word	0x40000800

00005f34 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5f34:	b580      	push	{r7, lr}
    5f36:	b084      	sub	sp, #16
    5f38:	af00      	add	r7, sp, #0
    5f3a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5f3c:	4a43      	ldr	r2, [pc, #268]	; (604c <system_clock_source_xosc32k_set_config+0x118>)
    5f3e:	230c      	movs	r3, #12
    5f40:	18fb      	adds	r3, r7, r3
    5f42:	8a92      	ldrh	r2, [r2, #20]
    5f44:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    5f46:	687b      	ldr	r3, [r7, #4]
    5f48:	785b      	ldrb	r3, [r3, #1]
    5f4a:	1c1a      	adds	r2, r3, #0
    5f4c:	2307      	movs	r3, #7
    5f4e:	4013      	ands	r3, r2
    5f50:	b2da      	uxtb	r2, r3
    5f52:	230c      	movs	r3, #12
    5f54:	18fb      	adds	r3, r7, r3
    5f56:	2107      	movs	r1, #7
    5f58:	400a      	ands	r2, r1
    5f5a:	0010      	movs	r0, r2
    5f5c:	785a      	ldrb	r2, [r3, #1]
    5f5e:	2107      	movs	r1, #7
    5f60:	438a      	bics	r2, r1
    5f62:	1c11      	adds	r1, r2, #0
    5f64:	1c02      	adds	r2, r0, #0
    5f66:	430a      	orrs	r2, r1
    5f68:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	781b      	ldrb	r3, [r3, #0]
    5f6e:	2b00      	cmp	r3, #0
    5f70:	d106      	bne.n	5f80 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    5f72:	230c      	movs	r3, #12
    5f74:	18fb      	adds	r3, r7, r3
    5f76:	781a      	ldrb	r2, [r3, #0]
    5f78:	2104      	movs	r1, #4
    5f7a:	430a      	orrs	r2, r1
    5f7c:	701a      	strb	r2, [r3, #0]
    5f7e:	e005      	b.n	5f8c <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    5f80:	230c      	movs	r3, #12
    5f82:	18fb      	adds	r3, r7, r3
    5f84:	781a      	ldrb	r2, [r3, #0]
    5f86:	2104      	movs	r1, #4
    5f88:	438a      	bics	r2, r1
    5f8a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	789a      	ldrb	r2, [r3, #2]
    5f90:	230c      	movs	r3, #12
    5f92:	18fb      	adds	r3, r7, r3
    5f94:	2101      	movs	r1, #1
    5f96:	400a      	ands	r2, r1
    5f98:	0150      	lsls	r0, r2, #5
    5f9a:	781a      	ldrb	r2, [r3, #0]
    5f9c:	2120      	movs	r1, #32
    5f9e:	438a      	bics	r2, r1
    5fa0:	1c11      	adds	r1, r2, #0
    5fa2:	1c02      	adds	r2, r0, #0
    5fa4:	430a      	orrs	r2, r1
    5fa6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	78da      	ldrb	r2, [r3, #3]
    5fac:	230c      	movs	r3, #12
    5fae:	18fb      	adds	r3, r7, r3
    5fb0:	2101      	movs	r1, #1
    5fb2:	400a      	ands	r2, r1
    5fb4:	0110      	lsls	r0, r2, #4
    5fb6:	781a      	ldrb	r2, [r3, #0]
    5fb8:	2110      	movs	r1, #16
    5fba:	438a      	bics	r2, r1
    5fbc:	1c11      	adds	r1, r2, #0
    5fbe:	1c02      	adds	r2, r0, #0
    5fc0:	430a      	orrs	r2, r1
    5fc2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	791a      	ldrb	r2, [r3, #4]
    5fc8:	230c      	movs	r3, #12
    5fca:	18fb      	adds	r3, r7, r3
    5fcc:	2101      	movs	r1, #1
    5fce:	400a      	ands	r2, r1
    5fd0:	00d0      	lsls	r0, r2, #3
    5fd2:	781a      	ldrb	r2, [r3, #0]
    5fd4:	2108      	movs	r1, #8
    5fd6:	438a      	bics	r2, r1
    5fd8:	1c11      	adds	r1, r2, #0
    5fda:	1c02      	adds	r2, r0, #0
    5fdc:	430a      	orrs	r2, r1
    5fde:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	7b5a      	ldrb	r2, [r3, #13]
    5fe4:	230c      	movs	r3, #12
    5fe6:	18fb      	adds	r3, r7, r3
    5fe8:	01d0      	lsls	r0, r2, #7
    5fea:	781a      	ldrb	r2, [r3, #0]
    5fec:	217f      	movs	r1, #127	; 0x7f
    5fee:	400a      	ands	r2, r1
    5ff0:	1c11      	adds	r1, r2, #0
    5ff2:	1c02      	adds	r2, r0, #0
    5ff4:	430a      	orrs	r2, r1
    5ff6:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	7b1a      	ldrb	r2, [r3, #12]
    5ffc:	230c      	movs	r3, #12
    5ffe:	18fb      	adds	r3, r7, r3
    6000:	2101      	movs	r1, #1
    6002:	400a      	ands	r2, r1
    6004:	0190      	lsls	r0, r2, #6
    6006:	781a      	ldrb	r2, [r3, #0]
    6008:	2140      	movs	r1, #64	; 0x40
    600a:	438a      	bics	r2, r1
    600c:	1c11      	adds	r1, r2, #0
    600e:	1c02      	adds	r2, r0, #0
    6010:	430a      	orrs	r2, r1
    6012:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	7b9a      	ldrb	r2, [r3, #14]
    6018:	230c      	movs	r3, #12
    601a:	18fb      	adds	r3, r7, r3
    601c:	2101      	movs	r1, #1
    601e:	400a      	ands	r2, r1
    6020:	0110      	lsls	r0, r2, #4
    6022:	785a      	ldrb	r2, [r3, #1]
    6024:	2110      	movs	r1, #16
    6026:	438a      	bics	r2, r1
    6028:	1c11      	adds	r1, r2, #0
    602a:	1c02      	adds	r2, r0, #0
    602c:	430a      	orrs	r2, r1
    602e:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	689a      	ldr	r2, [r3, #8]
    6034:	4b06      	ldr	r3, [pc, #24]	; (6050 <system_clock_source_xosc32k_set_config+0x11c>)
    6036:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    6038:	4a04      	ldr	r2, [pc, #16]	; (604c <system_clock_source_xosc32k_set_config+0x118>)
    603a:	230c      	movs	r3, #12
    603c:	18fb      	adds	r3, r7, r3
    603e:	881b      	ldrh	r3, [r3, #0]
    6040:	8293      	strh	r3, [r2, #20]
}
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	46bd      	mov	sp, r7
    6046:	b004      	add	sp, #16
    6048:	bd80      	pop	{r7, pc}
    604a:	46c0      	nop			; (mov r8, r8)
    604c:	40000800 	.word	0x40000800
    6050:	2000029c 	.word	0x2000029c

00006054 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
    605a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    605c:	687b      	ldr	r3, [r7, #4]
    605e:	7a1b      	ldrb	r3, [r3, #8]
    6060:	029b      	lsls	r3, r3, #10
    6062:	041b      	lsls	r3, r3, #16
    6064:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    6066:	687b      	ldr	r3, [r7, #4]
    6068:	895b      	ldrh	r3, [r3, #10]
    606a:	059b      	lsls	r3, r3, #22
    606c:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    606e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    6070:	4b2a      	ldr	r3, [pc, #168]	; (611c <system_clock_source_dfll_set_config+0xc8>)
    6072:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6074:	687b      	ldr	r3, [r7, #4]
    6076:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    6078:	687b      	ldr	r3, [r7, #4]
    607a:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    607c:	4313      	orrs	r3, r2
    607e:	b2db      	uxtb	r3, r3
    6080:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    6086:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    6088:	687a      	ldr	r2, [r7, #4]
    608a:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    608c:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    608e:	687b      	ldr	r3, [r7, #4]
    6090:	785b      	ldrb	r3, [r3, #1]
    6092:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    6094:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    6096:	4b21      	ldr	r3, [pc, #132]	; (611c <system_clock_source_dfll_set_config+0xc8>)
    6098:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    609a:	687b      	ldr	r3, [r7, #4]
    609c:	781b      	ldrb	r3, [r3, #0]
    609e:	2b04      	cmp	r3, #4
    60a0:	d116      	bne.n	60d0 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    60a2:	687b      	ldr	r3, [r7, #4]
    60a4:	7b1b      	ldrb	r3, [r3, #12]
    60a6:	069b      	lsls	r3, r3, #26
    60a8:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    60aa:	687b      	ldr	r3, [r7, #4]
    60ac:	89db      	ldrh	r3, [r3, #14]
    60ae:	041b      	lsls	r3, r3, #16
    60b0:	0019      	movs	r1, r3
    60b2:	4b1b      	ldr	r3, [pc, #108]	; (6120 <system_clock_source_dfll_set_config+0xcc>)
    60b4:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    60b6:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    60b8:	687a      	ldr	r2, [r7, #4]
    60ba:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    60bc:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    60be:	4b17      	ldr	r3, [pc, #92]	; (611c <system_clock_source_dfll_set_config+0xc8>)
    60c0:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    60c2:	4b16      	ldr	r3, [pc, #88]	; (611c <system_clock_source_dfll_set_config+0xc8>)
    60c4:	681b      	ldr	r3, [r3, #0]
    60c6:	687a      	ldr	r2, [r7, #4]
    60c8:	7812      	ldrb	r2, [r2, #0]
    60ca:	431a      	orrs	r2, r3
    60cc:	4b13      	ldr	r3, [pc, #76]	; (611c <system_clock_source_dfll_set_config+0xc8>)
    60ce:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    60d0:	687b      	ldr	r3, [r7, #4]
    60d2:	781b      	ldrb	r3, [r3, #0]
    60d4:	2b20      	cmp	r3, #32
    60d6:	d11c      	bne.n	6112 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	7b1b      	ldrb	r3, [r3, #12]
    60dc:	069b      	lsls	r3, r3, #26
    60de:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	89db      	ldrh	r3, [r3, #14]
    60e4:	041b      	lsls	r3, r3, #16
    60e6:	0019      	movs	r1, r3
    60e8:	4b0d      	ldr	r3, [pc, #52]	; (6120 <system_clock_source_dfll_set_config+0xcc>)
    60ea:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    60ec:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    60ee:	687a      	ldr	r2, [r7, #4]
    60f0:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    60f2:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    60f4:	4b09      	ldr	r3, [pc, #36]	; (611c <system_clock_source_dfll_set_config+0xc8>)
    60f6:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    60f8:	4b08      	ldr	r3, [pc, #32]	; (611c <system_clock_source_dfll_set_config+0xc8>)
    60fa:	681b      	ldr	r3, [r3, #0]
    60fc:	687a      	ldr	r2, [r7, #4]
    60fe:	7812      	ldrb	r2, [r2, #0]
    6100:	2104      	movs	r1, #4
    6102:	430a      	orrs	r2, r1
    6104:	b2d2      	uxtb	r2, r2
    6106:	4313      	orrs	r3, r2
    6108:	2280      	movs	r2, #128	; 0x80
    610a:	00d2      	lsls	r2, r2, #3
    610c:	431a      	orrs	r2, r3
    610e:	4b03      	ldr	r3, [pc, #12]	; (611c <system_clock_source_dfll_set_config+0xc8>)
    6110:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	46bd      	mov	sp, r7
    6116:	b002      	add	sp, #8
    6118:	bd80      	pop	{r7, pc}
    611a:	46c0      	nop			; (mov r8, r8)
    611c:	2000029c 	.word	0x2000029c
    6120:	03ff0000 	.word	0x03ff0000

00006124 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6124:	b580      	push	{r7, lr}
    6126:	b082      	sub	sp, #8
    6128:	af00      	add	r7, sp, #0
    612a:	0002      	movs	r2, r0
    612c:	1dfb      	adds	r3, r7, #7
    612e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6130:	1dfb      	adds	r3, r7, #7
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	2b08      	cmp	r3, #8
    6136:	d83b      	bhi.n	61b0 <system_clock_source_enable+0x8c>
    6138:	009a      	lsls	r2, r3, #2
    613a:	4b21      	ldr	r3, [pc, #132]	; (61c0 <system_clock_source_enable+0x9c>)
    613c:	18d3      	adds	r3, r2, r3
    613e:	681b      	ldr	r3, [r3, #0]
    6140:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    6142:	4b20      	ldr	r3, [pc, #128]	; (61c4 <system_clock_source_enable+0xa0>)
    6144:	4a1f      	ldr	r2, [pc, #124]	; (61c4 <system_clock_source_enable+0xa0>)
    6146:	6a12      	ldr	r2, [r2, #32]
    6148:	2102      	movs	r1, #2
    614a:	430a      	orrs	r2, r1
    614c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    614e:	2300      	movs	r3, #0
    6150:	e031      	b.n	61b6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    6152:	4b1c      	ldr	r3, [pc, #112]	; (61c4 <system_clock_source_enable+0xa0>)
    6154:	4a1b      	ldr	r2, [pc, #108]	; (61c4 <system_clock_source_enable+0xa0>)
    6156:	6992      	ldr	r2, [r2, #24]
    6158:	2102      	movs	r1, #2
    615a:	430a      	orrs	r2, r1
    615c:	619a      	str	r2, [r3, #24]
		break;
    615e:	e029      	b.n	61b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6160:	4a18      	ldr	r2, [pc, #96]	; (61c4 <system_clock_source_enable+0xa0>)
    6162:	4b18      	ldr	r3, [pc, #96]	; (61c4 <system_clock_source_enable+0xa0>)
    6164:	8a1b      	ldrh	r3, [r3, #16]
    6166:	b29b      	uxth	r3, r3
    6168:	2102      	movs	r1, #2
    616a:	430b      	orrs	r3, r1
    616c:	b29b      	uxth	r3, r3
    616e:	8213      	strh	r3, [r2, #16]
		break;
    6170:	e020      	b.n	61b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    6172:	4a14      	ldr	r2, [pc, #80]	; (61c4 <system_clock_source_enable+0xa0>)
    6174:	4b13      	ldr	r3, [pc, #76]	; (61c4 <system_clock_source_enable+0xa0>)
    6176:	8a9b      	ldrh	r3, [r3, #20]
    6178:	b29b      	uxth	r3, r3
    617a:	2102      	movs	r1, #2
    617c:	430b      	orrs	r3, r1
    617e:	b29b      	uxth	r3, r3
    6180:	8293      	strh	r3, [r2, #20]
		break;
    6182:	e017      	b.n	61b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    6184:	4b10      	ldr	r3, [pc, #64]	; (61c8 <system_clock_source_enable+0xa4>)
    6186:	681b      	ldr	r3, [r3, #0]
    6188:	2202      	movs	r2, #2
    618a:	431a      	orrs	r2, r3
    618c:	4b0e      	ldr	r3, [pc, #56]	; (61c8 <system_clock_source_enable+0xa4>)
    618e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    6190:	4b0e      	ldr	r3, [pc, #56]	; (61cc <system_clock_source_enable+0xa8>)
    6192:	4798      	blx	r3
		break;
    6194:	e00e      	b.n	61b4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    6196:	4a0b      	ldr	r2, [pc, #44]	; (61c4 <system_clock_source_enable+0xa0>)
    6198:	490a      	ldr	r1, [pc, #40]	; (61c4 <system_clock_source_enable+0xa0>)
    619a:	2344      	movs	r3, #68	; 0x44
    619c:	5ccb      	ldrb	r3, [r1, r3]
    619e:	b2db      	uxtb	r3, r3
    61a0:	2102      	movs	r1, #2
    61a2:	430b      	orrs	r3, r1
    61a4:	b2d9      	uxtb	r1, r3
    61a6:	2344      	movs	r3, #68	; 0x44
    61a8:	54d1      	strb	r1, [r2, r3]
		break;
    61aa:	e003      	b.n	61b4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    61ac:	2300      	movs	r3, #0
    61ae:	e002      	b.n	61b6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    61b0:	2317      	movs	r3, #23
    61b2:	e000      	b.n	61b6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    61b4:	2300      	movs	r3, #0
}
    61b6:	0018      	movs	r0, r3
    61b8:	46bd      	mov	sp, r7
    61ba:	b002      	add	sp, #8
    61bc:	bd80      	pop	{r7, pc}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	0000e628 	.word	0x0000e628
    61c4:	40000800 	.word	0x40000800
    61c8:	2000029c 	.word	0x2000029c
    61cc:	00005dbd 	.word	0x00005dbd

000061d0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    61d0:	b580      	push	{r7, lr}
    61d2:	b084      	sub	sp, #16
    61d4:	af00      	add	r7, sp, #0
    61d6:	0002      	movs	r2, r0
    61d8:	1dfb      	adds	r3, r7, #7
    61da:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    61dc:	2300      	movs	r3, #0
    61de:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    61e0:	1dfb      	adds	r3, r7, #7
    61e2:	781b      	ldrb	r3, [r3, #0]
    61e4:	2b08      	cmp	r3, #8
    61e6:	d821      	bhi.n	622c <system_clock_source_is_ready+0x5c>
    61e8:	009a      	lsls	r2, r3, #2
    61ea:	4b18      	ldr	r3, [pc, #96]	; (624c <system_clock_source_is_ready+0x7c>)
    61ec:	18d3      	adds	r3, r2, r3
    61ee:	681b      	ldr	r3, [r3, #0]
    61f0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    61f2:	2308      	movs	r3, #8
    61f4:	60fb      	str	r3, [r7, #12]
		break;
    61f6:	e01b      	b.n	6230 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    61f8:	2304      	movs	r3, #4
    61fa:	60fb      	str	r3, [r7, #12]
		break;
    61fc:	e018      	b.n	6230 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    61fe:	2301      	movs	r3, #1
    6200:	60fb      	str	r3, [r7, #12]
		break;
    6202:	e015      	b.n	6230 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    6204:	2302      	movs	r3, #2
    6206:	60fb      	str	r3, [r7, #12]
		break;
    6208:	e012      	b.n	6230 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    620a:	23d0      	movs	r3, #208	; 0xd0
    620c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    620e:	e00f      	b.n	6230 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6210:	4a0f      	ldr	r2, [pc, #60]	; (6250 <system_clock_source_is_ready+0x80>)
    6212:	2350      	movs	r3, #80	; 0x50
    6214:	5cd3      	ldrb	r3, [r2, r3]
    6216:	b2db      	uxtb	r3, r3
    6218:	001a      	movs	r2, r3
    621a:	2303      	movs	r3, #3
    621c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    621e:	3b03      	subs	r3, #3
    6220:	425a      	negs	r2, r3
    6222:	4153      	adcs	r3, r2
    6224:	b2db      	uxtb	r3, r3
    6226:	e00c      	b.n	6242 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6228:	2301      	movs	r3, #1
    622a:	e00a      	b.n	6242 <system_clock_source_is_ready+0x72>

	default:
		return false;
    622c:	2300      	movs	r3, #0
    622e:	e008      	b.n	6242 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6230:	4b07      	ldr	r3, [pc, #28]	; (6250 <system_clock_source_is_ready+0x80>)
    6232:	68db      	ldr	r3, [r3, #12]
    6234:	68fa      	ldr	r2, [r7, #12]
    6236:	401a      	ands	r2, r3
    6238:	68fb      	ldr	r3, [r7, #12]
    623a:	1ad3      	subs	r3, r2, r3
    623c:	425a      	negs	r2, r3
    623e:	4153      	adcs	r3, r2
    6240:	b2db      	uxtb	r3, r3
}
    6242:	0018      	movs	r0, r3
    6244:	46bd      	mov	sp, r7
    6246:	b004      	add	sp, #16
    6248:	bd80      	pop	{r7, pc}
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	0000e64c 	.word	0x0000e64c
    6250:	40000800 	.word	0x40000800

00006254 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6254:	b580      	push	{r7, lr}
    6256:	b082      	sub	sp, #8
    6258:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    625a:	003b      	movs	r3, r7
    625c:	2202      	movs	r2, #2
    625e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6260:	2300      	movs	r3, #0
    6262:	607b      	str	r3, [r7, #4]
    6264:	e009      	b.n	627a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	b2db      	uxtb	r3, r3
    626a:	003a      	movs	r2, r7
    626c:	0011      	movs	r1, r2
    626e:	0018      	movs	r0, r3
    6270:	4b05      	ldr	r3, [pc, #20]	; (6288 <_switch_peripheral_gclk+0x34>)
    6272:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6274:	687b      	ldr	r3, [r7, #4]
    6276:	3301      	adds	r3, #1
    6278:	607b      	str	r3, [r7, #4]
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	2b24      	cmp	r3, #36	; 0x24
    627e:	d9f2      	bls.n	6266 <_switch_peripheral_gclk+0x12>
	}
}
    6280:	46c0      	nop			; (mov r8, r8)
    6282:	46bd      	mov	sp, r7
    6284:	b002      	add	sp, #8
    6286:	bd80      	pop	{r7, pc}
    6288:	00006835 	.word	0x00006835

0000628c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    628c:	b580      	push	{r7, lr}
    628e:	b0aa      	sub	sp, #168	; 0xa8
    6290:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    6292:	4b87      	ldr	r3, [pc, #540]	; (64b0 <system_clock_init+0x224>)
    6294:	22c2      	movs	r2, #194	; 0xc2
    6296:	00d2      	lsls	r2, r2, #3
    6298:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    629a:	2002      	movs	r0, #2
    629c:	4b85      	ldr	r3, [pc, #532]	; (64b4 <system_clock_init+0x228>)
    629e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    62a0:	4b85      	ldr	r3, [pc, #532]	; (64b8 <system_clock_init+0x22c>)
    62a2:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    62a4:	2394      	movs	r3, #148	; 0x94
    62a6:	18fb      	adds	r3, r7, r3
    62a8:	0018      	movs	r0, r3
    62aa:	4b84      	ldr	r3, [pc, #528]	; (64bc <system_clock_init+0x230>)
    62ac:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    62ae:	2394      	movs	r3, #148	; 0x94
    62b0:	18fb      	adds	r3, r7, r3
    62b2:	2280      	movs	r2, #128	; 0x80
    62b4:	0212      	lsls	r2, r2, #8
    62b6:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    62b8:	2394      	movs	r3, #148	; 0x94
    62ba:	18fb      	adds	r3, r7, r3
    62bc:	2200      	movs	r2, #0
    62be:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    62c0:	2394      	movs	r3, #148	; 0x94
    62c2:	18fb      	adds	r3, r7, r3
    62c4:	2203      	movs	r2, #3
    62c6:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    62c8:	2394      	movs	r3, #148	; 0x94
    62ca:	18fb      	adds	r3, r7, r3
    62cc:	2200      	movs	r2, #0
    62ce:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    62d0:	2394      	movs	r3, #148	; 0x94
    62d2:	18fb      	adds	r3, r7, r3
    62d4:	2200      	movs	r2, #0
    62d6:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    62d8:	2394      	movs	r3, #148	; 0x94
    62da:	18fb      	adds	r3, r7, r3
    62dc:	2201      	movs	r2, #1
    62de:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    62e0:	2394      	movs	r3, #148	; 0x94
    62e2:	18fb      	adds	r3, r7, r3
    62e4:	2200      	movs	r2, #0
    62e6:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    62e8:	2394      	movs	r3, #148	; 0x94
    62ea:	18fb      	adds	r3, r7, r3
    62ec:	2200      	movs	r2, #0
    62ee:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    62f0:	2394      	movs	r3, #148	; 0x94
    62f2:	18fb      	adds	r3, r7, r3
    62f4:	0018      	movs	r0, r3
    62f6:	4b72      	ldr	r3, [pc, #456]	; (64c0 <system_clock_init+0x234>)
    62f8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    62fa:	2005      	movs	r0, #5
    62fc:	4b71      	ldr	r3, [pc, #452]	; (64c4 <system_clock_init+0x238>)
    62fe:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6300:	46c0      	nop			; (mov r8, r8)
    6302:	2005      	movs	r0, #5
    6304:	4b70      	ldr	r3, [pc, #448]	; (64c8 <system_clock_init+0x23c>)
    6306:	4798      	blx	r3
    6308:	0003      	movs	r3, r0
    630a:	001a      	movs	r2, r3
    630c:	2301      	movs	r3, #1
    630e:	4053      	eors	r3, r2
    6310:	b2db      	uxtb	r3, r3
    6312:	2b00      	cmp	r3, #0
    6314:	d1f5      	bne.n	6302 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    6316:	4a66      	ldr	r2, [pc, #408]	; (64b0 <system_clock_init+0x224>)
    6318:	8a93      	ldrh	r3, [r2, #20]
    631a:	2180      	movs	r1, #128	; 0x80
    631c:	430b      	orrs	r3, r1
    631e:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    6320:	2380      	movs	r3, #128	; 0x80
    6322:	18fb      	adds	r3, r7, r3
    6324:	0018      	movs	r0, r3
    6326:	4b69      	ldr	r3, [pc, #420]	; (64cc <system_clock_init+0x240>)
    6328:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    632a:	2380      	movs	r3, #128	; 0x80
    632c:	18fb      	adds	r3, r7, r3
    632e:	2204      	movs	r2, #4
    6330:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6332:	2380      	movs	r3, #128	; 0x80
    6334:	18fb      	adds	r3, r7, r3
    6336:	2200      	movs	r2, #0
    6338:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    633a:	4b65      	ldr	r3, [pc, #404]	; (64d0 <system_clock_init+0x244>)
    633c:	681b      	ldr	r3, [r3, #0]
    633e:	0e9b      	lsrs	r3, r3, #26
    6340:	22a4      	movs	r2, #164	; 0xa4
    6342:	18ba      	adds	r2, r7, r2
    6344:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6346:	23a4      	movs	r3, #164	; 0xa4
    6348:	18fb      	adds	r3, r7, r3
    634a:	681b      	ldr	r3, [r3, #0]
    634c:	2b3f      	cmp	r3, #63	; 0x3f
    634e:	d103      	bne.n	6358 <system_clock_init+0xcc>
		coarse = 0x1f;
    6350:	231f      	movs	r3, #31
    6352:	22a4      	movs	r2, #164	; 0xa4
    6354:	18ba      	adds	r2, r7, r2
    6356:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6358:	23a4      	movs	r3, #164	; 0xa4
    635a:	18fb      	adds	r3, r7, r3
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	b2da      	uxtb	r2, r3
    6360:	2380      	movs	r3, #128	; 0x80
    6362:	18fb      	adds	r3, r7, r3
    6364:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6366:	2380      	movs	r3, #128	; 0x80
    6368:	18fb      	adds	r3, r7, r3
    636a:	2200      	movs	r2, #0
    636c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    636e:	2380      	movs	r3, #128	; 0x80
    6370:	18fb      	adds	r3, r7, r3
    6372:	2200      	movs	r2, #0
    6374:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6376:	2380      	movs	r3, #128	; 0x80
    6378:	18fb      	adds	r3, r7, r3
    637a:	2200      	movs	r2, #0
    637c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    637e:	2380      	movs	r3, #128	; 0x80
    6380:	18fb      	adds	r3, r7, r3
    6382:	2200      	movs	r2, #0
    6384:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6386:	2380      	movs	r3, #128	; 0x80
    6388:	18fb      	adds	r3, r7, r3
    638a:	4a52      	ldr	r2, [pc, #328]	; (64d4 <system_clock_init+0x248>)
    638c:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    638e:	2380      	movs	r3, #128	; 0x80
    6390:	18fb      	adds	r3, r7, r3
    6392:	2207      	movs	r2, #7
    6394:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6396:	2380      	movs	r3, #128	; 0x80
    6398:	18fb      	adds	r3, r7, r3
    639a:	223f      	movs	r2, #63	; 0x3f
    639c:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    639e:	2380      	movs	r3, #128	; 0x80
    63a0:	18fb      	adds	r3, r7, r3
    63a2:	0018      	movs	r0, r3
    63a4:	4b4c      	ldr	r3, [pc, #304]	; (64d8 <system_clock_init+0x24c>)
    63a6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    63a8:	237c      	movs	r3, #124	; 0x7c
    63aa:	18fb      	adds	r3, r7, r3
    63ac:	0018      	movs	r0, r3
    63ae:	4b4b      	ldr	r3, [pc, #300]	; (64dc <system_clock_init+0x250>)
    63b0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    63b2:	237c      	movs	r3, #124	; 0x7c
    63b4:	18fb      	adds	r3, r7, r3
    63b6:	2200      	movs	r2, #0
    63b8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    63ba:	237c      	movs	r3, #124	; 0x7c
    63bc:	18fb      	adds	r3, r7, r3
    63be:	2201      	movs	r2, #1
    63c0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    63c2:	237c      	movs	r3, #124	; 0x7c
    63c4:	18fb      	adds	r3, r7, r3
    63c6:	2200      	movs	r2, #0
    63c8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    63ca:	237c      	movs	r3, #124	; 0x7c
    63cc:	18fb      	adds	r3, r7, r3
    63ce:	0018      	movs	r0, r3
    63d0:	4b43      	ldr	r3, [pc, #268]	; (64e0 <system_clock_init+0x254>)
    63d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    63d4:	2006      	movs	r0, #6
    63d6:	4b3b      	ldr	r3, [pc, #236]	; (64c4 <system_clock_init+0x238>)
    63d8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    63da:	4b42      	ldr	r3, [pc, #264]	; (64e4 <system_clock_init+0x258>)
    63dc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    63de:	2364      	movs	r3, #100	; 0x64
    63e0:	18fb      	adds	r3, r7, r3
    63e2:	0018      	movs	r0, r3
    63e4:	4b40      	ldr	r3, [pc, #256]	; (64e8 <system_clock_init+0x25c>)
    63e6:	4798      	blx	r3
    63e8:	2364      	movs	r3, #100	; 0x64
    63ea:	18fb      	adds	r3, r7, r3
    63ec:	2205      	movs	r2, #5
    63ee:	701a      	strb	r2, [r3, #0]
    63f0:	2364      	movs	r3, #100	; 0x64
    63f2:	18fb      	adds	r3, r7, r3
    63f4:	2201      	movs	r2, #1
    63f6:	605a      	str	r2, [r3, #4]
    63f8:	2364      	movs	r3, #100	; 0x64
    63fa:	18fb      	adds	r3, r7, r3
    63fc:	2200      	movs	r2, #0
    63fe:	721a      	strb	r2, [r3, #8]
    6400:	2364      	movs	r3, #100	; 0x64
    6402:	18fb      	adds	r3, r7, r3
    6404:	2200      	movs	r2, #0
    6406:	725a      	strb	r2, [r3, #9]
    6408:	2364      	movs	r3, #100	; 0x64
    640a:	18fb      	adds	r3, r7, r3
    640c:	0019      	movs	r1, r3
    640e:	2001      	movs	r0, #1
    6410:	4b36      	ldr	r3, [pc, #216]	; (64ec <system_clock_init+0x260>)
    6412:	4798      	blx	r3
    6414:	2001      	movs	r0, #1
    6416:	4b36      	ldr	r3, [pc, #216]	; (64f0 <system_clock_init+0x264>)
    6418:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    641a:	230c      	movs	r3, #12
    641c:	18fb      	adds	r3, r7, r3
    641e:	0018      	movs	r0, r3
    6420:	4b34      	ldr	r3, [pc, #208]	; (64f4 <system_clock_init+0x268>)
    6422:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6424:	230c      	movs	r3, #12
    6426:	18fb      	adds	r3, r7, r3
    6428:	2201      	movs	r2, #1
    642a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    642c:	230c      	movs	r3, #12
    642e:	18fb      	adds	r3, r7, r3
    6430:	0019      	movs	r1, r3
    6432:	2000      	movs	r0, #0
    6434:	4b30      	ldr	r3, [pc, #192]	; (64f8 <system_clock_init+0x26c>)
    6436:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6438:	2000      	movs	r0, #0
    643a:	4b30      	ldr	r3, [pc, #192]	; (64fc <system_clock_init+0x270>)
    643c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    643e:	2007      	movs	r0, #7
    6440:	4b20      	ldr	r3, [pc, #128]	; (64c4 <system_clock_init+0x238>)
    6442:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6444:	46c0      	nop			; (mov r8, r8)
    6446:	2007      	movs	r0, #7
    6448:	4b1f      	ldr	r3, [pc, #124]	; (64c8 <system_clock_init+0x23c>)
    644a:	4798      	blx	r3
    644c:	0003      	movs	r3, r0
    644e:	001a      	movs	r2, r3
    6450:	2301      	movs	r3, #1
    6452:	4053      	eors	r3, r2
    6454:	b2db      	uxtb	r3, r3
    6456:	2b00      	cmp	r3, #0
    6458:	d1f5      	bne.n	6446 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    645a:	2000      	movs	r0, #0
    645c:	4b28      	ldr	r3, [pc, #160]	; (6500 <system_clock_init+0x274>)
    645e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6460:	2100      	movs	r1, #0
    6462:	2000      	movs	r0, #0
    6464:	4b27      	ldr	r3, [pc, #156]	; (6504 <system_clock_init+0x278>)
    6466:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6468:	2100      	movs	r1, #0
    646a:	2001      	movs	r0, #1
    646c:	4b25      	ldr	r3, [pc, #148]	; (6504 <system_clock_init+0x278>)
    646e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6470:	2100      	movs	r1, #0
    6472:	2002      	movs	r0, #2
    6474:	4b23      	ldr	r3, [pc, #140]	; (6504 <system_clock_init+0x278>)
    6476:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6478:	003b      	movs	r3, r7
    647a:	0018      	movs	r0, r3
    647c:	4b1a      	ldr	r3, [pc, #104]	; (64e8 <system_clock_init+0x25c>)
    647e:	4798      	blx	r3
    6480:	003b      	movs	r3, r7
    6482:	2207      	movs	r2, #7
    6484:	701a      	strb	r2, [r3, #0]
    6486:	003b      	movs	r3, r7
    6488:	2201      	movs	r2, #1
    648a:	605a      	str	r2, [r3, #4]
    648c:	003b      	movs	r3, r7
    648e:	2200      	movs	r2, #0
    6490:	721a      	strb	r2, [r3, #8]
    6492:	003b      	movs	r3, r7
    6494:	2200      	movs	r2, #0
    6496:	725a      	strb	r2, [r3, #9]
    6498:	003b      	movs	r3, r7
    649a:	0019      	movs	r1, r3
    649c:	2000      	movs	r0, #0
    649e:	4b13      	ldr	r3, [pc, #76]	; (64ec <system_clock_init+0x260>)
    64a0:	4798      	blx	r3
    64a2:	2000      	movs	r0, #0
    64a4:	4b12      	ldr	r3, [pc, #72]	; (64f0 <system_clock_init+0x264>)
    64a6:	4798      	blx	r3
#endif
}
    64a8:	46c0      	nop			; (mov r8, r8)
    64aa:	46bd      	mov	sp, r7
    64ac:	b02a      	add	sp, #168	; 0xa8
    64ae:	bd80      	pop	{r7, pc}
    64b0:	40000800 	.word	0x40000800
    64b4:	00005d6d 	.word	0x00005d6d
    64b8:	00006255 	.word	0x00006255
    64bc:	00005c3d 	.word	0x00005c3d
    64c0:	00005f35 	.word	0x00005f35
    64c4:	00006125 	.word	0x00006125
    64c8:	000061d1 	.word	0x000061d1
    64cc:	00005ca7 	.word	0x00005ca7
    64d0:	00806024 	.word	0x00806024
    64d4:	000005b9 	.word	0x000005b9
    64d8:	00006055 	.word	0x00006055
    64dc:	00005c85 	.word	0x00005c85
    64e0:	00005ebd 	.word	0x00005ebd
    64e4:	000065ad 	.word	0x000065ad
    64e8:	00005bf9 	.word	0x00005bf9
    64ec:	000065dd 	.word	0x000065dd
    64f0:	00006701 	.word	0x00006701
    64f4:	00005c27 	.word	0x00005c27
    64f8:	00006835 	.word	0x00006835
    64fc:	00006879 	.word	0x00006879
    6500:	00005cf9 	.word	0x00005cf9
    6504:	00005d19 	.word	0x00005d19

00006508 <system_apb_clock_set_mask>:
{
    6508:	b580      	push	{r7, lr}
    650a:	b082      	sub	sp, #8
    650c:	af00      	add	r7, sp, #0
    650e:	0002      	movs	r2, r0
    6510:	6039      	str	r1, [r7, #0]
    6512:	1dfb      	adds	r3, r7, #7
    6514:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6516:	1dfb      	adds	r3, r7, #7
    6518:	781b      	ldrb	r3, [r3, #0]
    651a:	2b01      	cmp	r3, #1
    651c:	d00a      	beq.n	6534 <system_apb_clock_set_mask+0x2c>
    651e:	2b02      	cmp	r3, #2
    6520:	d00f      	beq.n	6542 <system_apb_clock_set_mask+0x3a>
    6522:	2b00      	cmp	r3, #0
    6524:	d114      	bne.n	6550 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6526:	4b0e      	ldr	r3, [pc, #56]	; (6560 <system_apb_clock_set_mask+0x58>)
    6528:	4a0d      	ldr	r2, [pc, #52]	; (6560 <system_apb_clock_set_mask+0x58>)
    652a:	6991      	ldr	r1, [r2, #24]
    652c:	683a      	ldr	r2, [r7, #0]
    652e:	430a      	orrs	r2, r1
    6530:	619a      	str	r2, [r3, #24]
			break;
    6532:	e00f      	b.n	6554 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6534:	4b0a      	ldr	r3, [pc, #40]	; (6560 <system_apb_clock_set_mask+0x58>)
    6536:	4a0a      	ldr	r2, [pc, #40]	; (6560 <system_apb_clock_set_mask+0x58>)
    6538:	69d1      	ldr	r1, [r2, #28]
    653a:	683a      	ldr	r2, [r7, #0]
    653c:	430a      	orrs	r2, r1
    653e:	61da      	str	r2, [r3, #28]
			break;
    6540:	e008      	b.n	6554 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6542:	4b07      	ldr	r3, [pc, #28]	; (6560 <system_apb_clock_set_mask+0x58>)
    6544:	4a06      	ldr	r2, [pc, #24]	; (6560 <system_apb_clock_set_mask+0x58>)
    6546:	6a11      	ldr	r1, [r2, #32]
    6548:	683a      	ldr	r2, [r7, #0]
    654a:	430a      	orrs	r2, r1
    654c:	621a      	str	r2, [r3, #32]
			break;
    654e:	e001      	b.n	6554 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6550:	2317      	movs	r3, #23
    6552:	e000      	b.n	6556 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6554:	2300      	movs	r3, #0
}
    6556:	0018      	movs	r0, r3
    6558:	46bd      	mov	sp, r7
    655a:	b002      	add	sp, #8
    655c:	bd80      	pop	{r7, pc}
    655e:	46c0      	nop			; (mov r8, r8)
    6560:	40000400 	.word	0x40000400

00006564 <system_interrupt_enter_critical_section>:
{
    6564:	b580      	push	{r7, lr}
    6566:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6568:	4b02      	ldr	r3, [pc, #8]	; (6574 <system_interrupt_enter_critical_section+0x10>)
    656a:	4798      	blx	r3
}
    656c:	46c0      	nop			; (mov r8, r8)
    656e:	46bd      	mov	sp, r7
    6570:	bd80      	pop	{r7, pc}
    6572:	46c0      	nop			; (mov r8, r8)
    6574:	00005991 	.word	0x00005991

00006578 <system_interrupt_leave_critical_section>:
{
    6578:	b580      	push	{r7, lr}
    657a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    657c:	4b02      	ldr	r3, [pc, #8]	; (6588 <system_interrupt_leave_critical_section+0x10>)
    657e:	4798      	blx	r3
}
    6580:	46c0      	nop			; (mov r8, r8)
    6582:	46bd      	mov	sp, r7
    6584:	bd80      	pop	{r7, pc}
    6586:	46c0      	nop			; (mov r8, r8)
    6588:	000059e5 	.word	0x000059e5

0000658c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    658c:	b580      	push	{r7, lr}
    658e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6590:	4b05      	ldr	r3, [pc, #20]	; (65a8 <system_gclk_is_syncing+0x1c>)
    6592:	785b      	ldrb	r3, [r3, #1]
    6594:	b2db      	uxtb	r3, r3
    6596:	b25b      	sxtb	r3, r3
    6598:	2b00      	cmp	r3, #0
    659a:	da01      	bge.n	65a0 <system_gclk_is_syncing+0x14>
		return true;
    659c:	2301      	movs	r3, #1
    659e:	e000      	b.n	65a2 <system_gclk_is_syncing+0x16>
	}

	return false;
    65a0:	2300      	movs	r3, #0
}
    65a2:	0018      	movs	r0, r3
    65a4:	46bd      	mov	sp, r7
    65a6:	bd80      	pop	{r7, pc}
    65a8:	40000c00 	.word	0x40000c00

000065ac <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    65b0:	2108      	movs	r1, #8
    65b2:	2000      	movs	r0, #0
    65b4:	4b07      	ldr	r3, [pc, #28]	; (65d4 <system_gclk_init+0x28>)
    65b6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    65b8:	4b07      	ldr	r3, [pc, #28]	; (65d8 <system_gclk_init+0x2c>)
    65ba:	2201      	movs	r2, #1
    65bc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    65be:	46c0      	nop			; (mov r8, r8)
    65c0:	4b05      	ldr	r3, [pc, #20]	; (65d8 <system_gclk_init+0x2c>)
    65c2:	781b      	ldrb	r3, [r3, #0]
    65c4:	b2db      	uxtb	r3, r3
    65c6:	001a      	movs	r2, r3
    65c8:	2301      	movs	r3, #1
    65ca:	4013      	ands	r3, r2
    65cc:	d1f8      	bne.n	65c0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    65ce:	46c0      	nop			; (mov r8, r8)
    65d0:	46bd      	mov	sp, r7
    65d2:	bd80      	pop	{r7, pc}
    65d4:	00006509 	.word	0x00006509
    65d8:	40000c00 	.word	0x40000c00

000065dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    65dc:	b580      	push	{r7, lr}
    65de:	b086      	sub	sp, #24
    65e0:	af00      	add	r7, sp, #0
    65e2:	0002      	movs	r2, r0
    65e4:	6039      	str	r1, [r7, #0]
    65e6:	1dfb      	adds	r3, r7, #7
    65e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    65ea:	1dfb      	adds	r3, r7, #7
    65ec:	781b      	ldrb	r3, [r3, #0]
    65ee:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    65f0:	1dfb      	adds	r3, r7, #7
    65f2:	781b      	ldrb	r3, [r3, #0]
    65f4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    65f6:	683b      	ldr	r3, [r7, #0]
    65f8:	781b      	ldrb	r3, [r3, #0]
    65fa:	021b      	lsls	r3, r3, #8
    65fc:	001a      	movs	r2, r3
    65fe:	697b      	ldr	r3, [r7, #20]
    6600:	4313      	orrs	r3, r2
    6602:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6604:	683b      	ldr	r3, [r7, #0]
    6606:	785b      	ldrb	r3, [r3, #1]
    6608:	2b00      	cmp	r3, #0
    660a:	d004      	beq.n	6616 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    660c:	697b      	ldr	r3, [r7, #20]
    660e:	2280      	movs	r2, #128	; 0x80
    6610:	02d2      	lsls	r2, r2, #11
    6612:	4313      	orrs	r3, r2
    6614:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6616:	683b      	ldr	r3, [r7, #0]
    6618:	7a5b      	ldrb	r3, [r3, #9]
    661a:	2b00      	cmp	r3, #0
    661c:	d004      	beq.n	6628 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    661e:	697b      	ldr	r3, [r7, #20]
    6620:	2280      	movs	r2, #128	; 0x80
    6622:	0312      	lsls	r2, r2, #12
    6624:	4313      	orrs	r3, r2
    6626:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6628:	683b      	ldr	r3, [r7, #0]
    662a:	685b      	ldr	r3, [r3, #4]
    662c:	2b01      	cmp	r3, #1
    662e:	d92c      	bls.n	668a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6630:	683b      	ldr	r3, [r7, #0]
    6632:	685a      	ldr	r2, [r3, #4]
    6634:	683b      	ldr	r3, [r7, #0]
    6636:	685b      	ldr	r3, [r3, #4]
    6638:	3b01      	subs	r3, #1
    663a:	4013      	ands	r3, r2
    663c:	d11a      	bne.n	6674 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    663e:	2300      	movs	r3, #0
    6640:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6642:	2302      	movs	r3, #2
    6644:	60bb      	str	r3, [r7, #8]
    6646:	e005      	b.n	6654 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6648:	68fb      	ldr	r3, [r7, #12]
    664a:	3301      	adds	r3, #1
    664c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    664e:	68bb      	ldr	r3, [r7, #8]
    6650:	005b      	lsls	r3, r3, #1
    6652:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6654:	683b      	ldr	r3, [r7, #0]
    6656:	685a      	ldr	r2, [r3, #4]
    6658:	68bb      	ldr	r3, [r7, #8]
    665a:	429a      	cmp	r2, r3
    665c:	d8f4      	bhi.n	6648 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    665e:	68fb      	ldr	r3, [r7, #12]
    6660:	021b      	lsls	r3, r3, #8
    6662:	693a      	ldr	r2, [r7, #16]
    6664:	4313      	orrs	r3, r2
    6666:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6668:	697b      	ldr	r3, [r7, #20]
    666a:	2280      	movs	r2, #128	; 0x80
    666c:	0352      	lsls	r2, r2, #13
    666e:	4313      	orrs	r3, r2
    6670:	617b      	str	r3, [r7, #20]
    6672:	e00a      	b.n	668a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6674:	683b      	ldr	r3, [r7, #0]
    6676:	685b      	ldr	r3, [r3, #4]
    6678:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    667a:	693a      	ldr	r2, [r7, #16]
    667c:	4313      	orrs	r3, r2
    667e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6680:	697b      	ldr	r3, [r7, #20]
    6682:	2280      	movs	r2, #128	; 0x80
    6684:	0292      	lsls	r2, r2, #10
    6686:	4313      	orrs	r3, r2
    6688:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    668a:	683b      	ldr	r3, [r7, #0]
    668c:	7a1b      	ldrb	r3, [r3, #8]
    668e:	2b00      	cmp	r3, #0
    6690:	d004      	beq.n	669c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6692:	697b      	ldr	r3, [r7, #20]
    6694:	2280      	movs	r2, #128	; 0x80
    6696:	0392      	lsls	r2, r2, #14
    6698:	4313      	orrs	r3, r2
    669a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    669c:	46c0      	nop			; (mov r8, r8)
    669e:	4b13      	ldr	r3, [pc, #76]	; (66ec <system_gclk_gen_set_config+0x110>)
    66a0:	4798      	blx	r3
    66a2:	1e03      	subs	r3, r0, #0
    66a4:	d1fb      	bne.n	669e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    66a6:	4b12      	ldr	r3, [pc, #72]	; (66f0 <system_gclk_gen_set_config+0x114>)
    66a8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    66aa:	4a12      	ldr	r2, [pc, #72]	; (66f4 <system_gclk_gen_set_config+0x118>)
    66ac:	1dfb      	adds	r3, r7, #7
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    66b2:	46c0      	nop			; (mov r8, r8)
    66b4:	4b0d      	ldr	r3, [pc, #52]	; (66ec <system_gclk_gen_set_config+0x110>)
    66b6:	4798      	blx	r3
    66b8:	1e03      	subs	r3, r0, #0
    66ba:	d1fb      	bne.n	66b4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    66bc:	4b0e      	ldr	r3, [pc, #56]	; (66f8 <system_gclk_gen_set_config+0x11c>)
    66be:	693a      	ldr	r2, [r7, #16]
    66c0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    66c2:	46c0      	nop			; (mov r8, r8)
    66c4:	4b09      	ldr	r3, [pc, #36]	; (66ec <system_gclk_gen_set_config+0x110>)
    66c6:	4798      	blx	r3
    66c8:	1e03      	subs	r3, r0, #0
    66ca:	d1fb      	bne.n	66c4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    66cc:	4b0a      	ldr	r3, [pc, #40]	; (66f8 <system_gclk_gen_set_config+0x11c>)
    66ce:	4a0a      	ldr	r2, [pc, #40]	; (66f8 <system_gclk_gen_set_config+0x11c>)
    66d0:	6851      	ldr	r1, [r2, #4]
    66d2:	2280      	movs	r2, #128	; 0x80
    66d4:	0252      	lsls	r2, r2, #9
    66d6:	4011      	ands	r1, r2
    66d8:	697a      	ldr	r2, [r7, #20]
    66da:	430a      	orrs	r2, r1
    66dc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    66de:	4b07      	ldr	r3, [pc, #28]	; (66fc <system_gclk_gen_set_config+0x120>)
    66e0:	4798      	blx	r3
}
    66e2:	46c0      	nop			; (mov r8, r8)
    66e4:	46bd      	mov	sp, r7
    66e6:	b006      	add	sp, #24
    66e8:	bd80      	pop	{r7, pc}
    66ea:	46c0      	nop			; (mov r8, r8)
    66ec:	0000658d 	.word	0x0000658d
    66f0:	00006565 	.word	0x00006565
    66f4:	40000c08 	.word	0x40000c08
    66f8:	40000c00 	.word	0x40000c00
    66fc:	00006579 	.word	0x00006579

00006700 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6700:	b580      	push	{r7, lr}
    6702:	b082      	sub	sp, #8
    6704:	af00      	add	r7, sp, #0
    6706:	0002      	movs	r2, r0
    6708:	1dfb      	adds	r3, r7, #7
    670a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    670c:	46c0      	nop			; (mov r8, r8)
    670e:	4b0e      	ldr	r3, [pc, #56]	; (6748 <system_gclk_gen_enable+0x48>)
    6710:	4798      	blx	r3
    6712:	1e03      	subs	r3, r0, #0
    6714:	d1fb      	bne.n	670e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6716:	4b0d      	ldr	r3, [pc, #52]	; (674c <system_gclk_gen_enable+0x4c>)
    6718:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    671a:	4a0d      	ldr	r2, [pc, #52]	; (6750 <system_gclk_gen_enable+0x50>)
    671c:	1dfb      	adds	r3, r7, #7
    671e:	781b      	ldrb	r3, [r3, #0]
    6720:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6722:	46c0      	nop			; (mov r8, r8)
    6724:	4b08      	ldr	r3, [pc, #32]	; (6748 <system_gclk_gen_enable+0x48>)
    6726:	4798      	blx	r3
    6728:	1e03      	subs	r3, r0, #0
    672a:	d1fb      	bne.n	6724 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    672c:	4b09      	ldr	r3, [pc, #36]	; (6754 <system_gclk_gen_enable+0x54>)
    672e:	4a09      	ldr	r2, [pc, #36]	; (6754 <system_gclk_gen_enable+0x54>)
    6730:	6852      	ldr	r2, [r2, #4]
    6732:	2180      	movs	r1, #128	; 0x80
    6734:	0249      	lsls	r1, r1, #9
    6736:	430a      	orrs	r2, r1
    6738:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    673a:	4b07      	ldr	r3, [pc, #28]	; (6758 <system_gclk_gen_enable+0x58>)
    673c:	4798      	blx	r3
}
    673e:	46c0      	nop			; (mov r8, r8)
    6740:	46bd      	mov	sp, r7
    6742:	b002      	add	sp, #8
    6744:	bd80      	pop	{r7, pc}
    6746:	46c0      	nop			; (mov r8, r8)
    6748:	0000658d 	.word	0x0000658d
    674c:	00006565 	.word	0x00006565
    6750:	40000c04 	.word	0x40000c04
    6754:	40000c00 	.word	0x40000c00
    6758:	00006579 	.word	0x00006579

0000675c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    675c:	b580      	push	{r7, lr}
    675e:	b086      	sub	sp, #24
    6760:	af00      	add	r7, sp, #0
    6762:	0002      	movs	r2, r0
    6764:	1dfb      	adds	r3, r7, #7
    6766:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6768:	46c0      	nop			; (mov r8, r8)
    676a:	4b2a      	ldr	r3, [pc, #168]	; (6814 <system_gclk_gen_get_hz+0xb8>)
    676c:	4798      	blx	r3
    676e:	1e03      	subs	r3, r0, #0
    6770:	d1fb      	bne.n	676a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6772:	4b29      	ldr	r3, [pc, #164]	; (6818 <system_gclk_gen_get_hz+0xbc>)
    6774:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6776:	4a29      	ldr	r2, [pc, #164]	; (681c <system_gclk_gen_get_hz+0xc0>)
    6778:	1dfb      	adds	r3, r7, #7
    677a:	781b      	ldrb	r3, [r3, #0]
    677c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    677e:	46c0      	nop			; (mov r8, r8)
    6780:	4b24      	ldr	r3, [pc, #144]	; (6814 <system_gclk_gen_get_hz+0xb8>)
    6782:	4798      	blx	r3
    6784:	1e03      	subs	r3, r0, #0
    6786:	d1fb      	bne.n	6780 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6788:	4b25      	ldr	r3, [pc, #148]	; (6820 <system_gclk_gen_get_hz+0xc4>)
    678a:	685b      	ldr	r3, [r3, #4]
    678c:	04db      	lsls	r3, r3, #19
    678e:	0edb      	lsrs	r3, r3, #27
    6790:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6792:	0018      	movs	r0, r3
    6794:	4b23      	ldr	r3, [pc, #140]	; (6824 <system_gclk_gen_get_hz+0xc8>)
    6796:	4798      	blx	r3
    6798:	0003      	movs	r3, r0
    679a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    679c:	4a1f      	ldr	r2, [pc, #124]	; (681c <system_gclk_gen_get_hz+0xc0>)
    679e:	1dfb      	adds	r3, r7, #7
    67a0:	781b      	ldrb	r3, [r3, #0]
    67a2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    67a4:	4b1e      	ldr	r3, [pc, #120]	; (6820 <system_gclk_gen_get_hz+0xc4>)
    67a6:	685b      	ldr	r3, [r3, #4]
    67a8:	02db      	lsls	r3, r3, #11
    67aa:	0fdb      	lsrs	r3, r3, #31
    67ac:	b2da      	uxtb	r2, r3
    67ae:	2313      	movs	r3, #19
    67b0:	18fb      	adds	r3, r7, r3
    67b2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    67b4:	4a1c      	ldr	r2, [pc, #112]	; (6828 <system_gclk_gen_get_hz+0xcc>)
    67b6:	1dfb      	adds	r3, r7, #7
    67b8:	781b      	ldrb	r3, [r3, #0]
    67ba:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    67bc:	46c0      	nop			; (mov r8, r8)
    67be:	4b15      	ldr	r3, [pc, #84]	; (6814 <system_gclk_gen_get_hz+0xb8>)
    67c0:	4798      	blx	r3
    67c2:	1e03      	subs	r3, r0, #0
    67c4:	d1fb      	bne.n	67be <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    67c6:	4b16      	ldr	r3, [pc, #88]	; (6820 <system_gclk_gen_get_hz+0xc4>)
    67c8:	689b      	ldr	r3, [r3, #8]
    67ca:	021b      	lsls	r3, r3, #8
    67cc:	0c1b      	lsrs	r3, r3, #16
    67ce:	b29b      	uxth	r3, r3
    67d0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    67d2:	4b16      	ldr	r3, [pc, #88]	; (682c <system_gclk_gen_get_hz+0xd0>)
    67d4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    67d6:	2313      	movs	r3, #19
    67d8:	18fb      	adds	r3, r7, r3
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	2b00      	cmp	r3, #0
    67de:	d109      	bne.n	67f4 <system_gclk_gen_get_hz+0x98>
    67e0:	68fb      	ldr	r3, [r7, #12]
    67e2:	2b01      	cmp	r3, #1
    67e4:	d906      	bls.n	67f4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    67e6:	4b12      	ldr	r3, [pc, #72]	; (6830 <system_gclk_gen_get_hz+0xd4>)
    67e8:	68f9      	ldr	r1, [r7, #12]
    67ea:	6978      	ldr	r0, [r7, #20]
    67ec:	4798      	blx	r3
    67ee:	0003      	movs	r3, r0
    67f0:	617b      	str	r3, [r7, #20]
    67f2:	e00a      	b.n	680a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    67f4:	2313      	movs	r3, #19
    67f6:	18fb      	adds	r3, r7, r3
    67f8:	781b      	ldrb	r3, [r3, #0]
    67fa:	2b00      	cmp	r3, #0
    67fc:	d005      	beq.n	680a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    67fe:	68fb      	ldr	r3, [r7, #12]
    6800:	3301      	adds	r3, #1
    6802:	697a      	ldr	r2, [r7, #20]
    6804:	40da      	lsrs	r2, r3
    6806:	0013      	movs	r3, r2
    6808:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    680a:	697b      	ldr	r3, [r7, #20]
}
    680c:	0018      	movs	r0, r3
    680e:	46bd      	mov	sp, r7
    6810:	b006      	add	sp, #24
    6812:	bd80      	pop	{r7, pc}
    6814:	0000658d 	.word	0x0000658d
    6818:	00006565 	.word	0x00006565
    681c:	40000c04 	.word	0x40000c04
    6820:	40000c00 	.word	0x40000c00
    6824:	00005e01 	.word	0x00005e01
    6828:	40000c08 	.word	0x40000c08
    682c:	00006579 	.word	0x00006579
    6830:	0000bcb9 	.word	0x0000bcb9

00006834 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6834:	b580      	push	{r7, lr}
    6836:	b084      	sub	sp, #16
    6838:	af00      	add	r7, sp, #0
    683a:	0002      	movs	r2, r0
    683c:	6039      	str	r1, [r7, #0]
    683e:	1dfb      	adds	r3, r7, #7
    6840:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6842:	1dfb      	adds	r3, r7, #7
    6844:	781b      	ldrb	r3, [r3, #0]
    6846:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6848:	683b      	ldr	r3, [r7, #0]
    684a:	781b      	ldrb	r3, [r3, #0]
    684c:	021b      	lsls	r3, r3, #8
    684e:	001a      	movs	r2, r3
    6850:	68fb      	ldr	r3, [r7, #12]
    6852:	4313      	orrs	r3, r2
    6854:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6856:	1dfb      	adds	r3, r7, #7
    6858:	781b      	ldrb	r3, [r3, #0]
    685a:	0018      	movs	r0, r3
    685c:	4b04      	ldr	r3, [pc, #16]	; (6870 <system_gclk_chan_set_config+0x3c>)
    685e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6860:	4b04      	ldr	r3, [pc, #16]	; (6874 <system_gclk_chan_set_config+0x40>)
    6862:	68fa      	ldr	r2, [r7, #12]
    6864:	b292      	uxth	r2, r2
    6866:	805a      	strh	r2, [r3, #2]
}
    6868:	46c0      	nop			; (mov r8, r8)
    686a:	46bd      	mov	sp, r7
    686c:	b004      	add	sp, #16
    686e:	bd80      	pop	{r7, pc}
    6870:	000068c1 	.word	0x000068c1
    6874:	40000c00 	.word	0x40000c00

00006878 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6878:	b580      	push	{r7, lr}
    687a:	b082      	sub	sp, #8
    687c:	af00      	add	r7, sp, #0
    687e:	0002      	movs	r2, r0
    6880:	1dfb      	adds	r3, r7, #7
    6882:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6884:	4b0a      	ldr	r3, [pc, #40]	; (68b0 <system_gclk_chan_enable+0x38>)
    6886:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6888:	4a0a      	ldr	r2, [pc, #40]	; (68b4 <system_gclk_chan_enable+0x3c>)
    688a:	1dfb      	adds	r3, r7, #7
    688c:	781b      	ldrb	r3, [r3, #0]
    688e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6890:	4909      	ldr	r1, [pc, #36]	; (68b8 <system_gclk_chan_enable+0x40>)
    6892:	4b09      	ldr	r3, [pc, #36]	; (68b8 <system_gclk_chan_enable+0x40>)
    6894:	885b      	ldrh	r3, [r3, #2]
    6896:	b29b      	uxth	r3, r3
    6898:	2280      	movs	r2, #128	; 0x80
    689a:	01d2      	lsls	r2, r2, #7
    689c:	4313      	orrs	r3, r2
    689e:	b29b      	uxth	r3, r3
    68a0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    68a2:	4b06      	ldr	r3, [pc, #24]	; (68bc <system_gclk_chan_enable+0x44>)
    68a4:	4798      	blx	r3
}
    68a6:	46c0      	nop			; (mov r8, r8)
    68a8:	46bd      	mov	sp, r7
    68aa:	b002      	add	sp, #8
    68ac:	bd80      	pop	{r7, pc}
    68ae:	46c0      	nop			; (mov r8, r8)
    68b0:	00006565 	.word	0x00006565
    68b4:	40000c02 	.word	0x40000c02
    68b8:	40000c00 	.word	0x40000c00
    68bc:	00006579 	.word	0x00006579

000068c0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    68c0:	b580      	push	{r7, lr}
    68c2:	b084      	sub	sp, #16
    68c4:	af00      	add	r7, sp, #0
    68c6:	0002      	movs	r2, r0
    68c8:	1dfb      	adds	r3, r7, #7
    68ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    68cc:	4b1c      	ldr	r3, [pc, #112]	; (6940 <system_gclk_chan_disable+0x80>)
    68ce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    68d0:	4a1c      	ldr	r2, [pc, #112]	; (6944 <system_gclk_chan_disable+0x84>)
    68d2:	1dfb      	adds	r3, r7, #7
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    68d8:	4b1b      	ldr	r3, [pc, #108]	; (6948 <system_gclk_chan_disable+0x88>)
    68da:	885b      	ldrh	r3, [r3, #2]
    68dc:	051b      	lsls	r3, r3, #20
    68de:	0f1b      	lsrs	r3, r3, #28
    68e0:	b2db      	uxtb	r3, r3
    68e2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    68e4:	4a18      	ldr	r2, [pc, #96]	; (6948 <system_gclk_chan_disable+0x88>)
    68e6:	8853      	ldrh	r3, [r2, #2]
    68e8:	4918      	ldr	r1, [pc, #96]	; (694c <system_gclk_chan_disable+0x8c>)
    68ea:	400b      	ands	r3, r1
    68ec:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    68ee:	4a16      	ldr	r2, [pc, #88]	; (6948 <system_gclk_chan_disable+0x88>)
    68f0:	4b15      	ldr	r3, [pc, #84]	; (6948 <system_gclk_chan_disable+0x88>)
    68f2:	885b      	ldrh	r3, [r3, #2]
    68f4:	b29b      	uxth	r3, r3
    68f6:	4916      	ldr	r1, [pc, #88]	; (6950 <system_gclk_chan_disable+0x90>)
    68f8:	400b      	ands	r3, r1
    68fa:	b29b      	uxth	r3, r3
    68fc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    68fe:	46c0      	nop			; (mov r8, r8)
    6900:	4b11      	ldr	r3, [pc, #68]	; (6948 <system_gclk_chan_disable+0x88>)
    6902:	885b      	ldrh	r3, [r3, #2]
    6904:	b29b      	uxth	r3, r3
    6906:	001a      	movs	r2, r3
    6908:	2380      	movs	r3, #128	; 0x80
    690a:	01db      	lsls	r3, r3, #7
    690c:	4013      	ands	r3, r2
    690e:	d1f7      	bne.n	6900 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6910:	4a0d      	ldr	r2, [pc, #52]	; (6948 <system_gclk_chan_disable+0x88>)
    6912:	68fb      	ldr	r3, [r7, #12]
    6914:	b2db      	uxtb	r3, r3
    6916:	1c19      	adds	r1, r3, #0
    6918:	230f      	movs	r3, #15
    691a:	400b      	ands	r3, r1
    691c:	b2d9      	uxtb	r1, r3
    691e:	8853      	ldrh	r3, [r2, #2]
    6920:	1c08      	adds	r0, r1, #0
    6922:	210f      	movs	r1, #15
    6924:	4001      	ands	r1, r0
    6926:	0208      	lsls	r0, r1, #8
    6928:	4908      	ldr	r1, [pc, #32]	; (694c <system_gclk_chan_disable+0x8c>)
    692a:	400b      	ands	r3, r1
    692c:	1c19      	adds	r1, r3, #0
    692e:	1c03      	adds	r3, r0, #0
    6930:	430b      	orrs	r3, r1
    6932:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6934:	4b07      	ldr	r3, [pc, #28]	; (6954 <system_gclk_chan_disable+0x94>)
    6936:	4798      	blx	r3
}
    6938:	46c0      	nop			; (mov r8, r8)
    693a:	46bd      	mov	sp, r7
    693c:	b004      	add	sp, #16
    693e:	bd80      	pop	{r7, pc}
    6940:	00006565 	.word	0x00006565
    6944:	40000c02 	.word	0x40000c02
    6948:	40000c00 	.word	0x40000c00
    694c:	fffff0ff 	.word	0xfffff0ff
    6950:	ffffbfff 	.word	0xffffbfff
    6954:	00006579 	.word	0x00006579

00006958 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6958:	b580      	push	{r7, lr}
    695a:	b084      	sub	sp, #16
    695c:	af00      	add	r7, sp, #0
    695e:	0002      	movs	r2, r0
    6960:	1dfb      	adds	r3, r7, #7
    6962:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6964:	4b0d      	ldr	r3, [pc, #52]	; (699c <system_gclk_chan_get_hz+0x44>)
    6966:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6968:	4a0d      	ldr	r2, [pc, #52]	; (69a0 <system_gclk_chan_get_hz+0x48>)
    696a:	1dfb      	adds	r3, r7, #7
    696c:	781b      	ldrb	r3, [r3, #0]
    696e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6970:	4b0c      	ldr	r3, [pc, #48]	; (69a4 <system_gclk_chan_get_hz+0x4c>)
    6972:	885b      	ldrh	r3, [r3, #2]
    6974:	051b      	lsls	r3, r3, #20
    6976:	0f1b      	lsrs	r3, r3, #28
    6978:	b2da      	uxtb	r2, r3
    697a:	230f      	movs	r3, #15
    697c:	18fb      	adds	r3, r7, r3
    697e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6980:	4b09      	ldr	r3, [pc, #36]	; (69a8 <system_gclk_chan_get_hz+0x50>)
    6982:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6984:	230f      	movs	r3, #15
    6986:	18fb      	adds	r3, r7, r3
    6988:	781b      	ldrb	r3, [r3, #0]
    698a:	0018      	movs	r0, r3
    698c:	4b07      	ldr	r3, [pc, #28]	; (69ac <system_gclk_chan_get_hz+0x54>)
    698e:	4798      	blx	r3
    6990:	0003      	movs	r3, r0
}
    6992:	0018      	movs	r0, r3
    6994:	46bd      	mov	sp, r7
    6996:	b004      	add	sp, #16
    6998:	bd80      	pop	{r7, pc}
    699a:	46c0      	nop			; (mov r8, r8)
    699c:	00006565 	.word	0x00006565
    69a0:	40000c02 	.word	0x40000c02
    69a4:	40000c00 	.word	0x40000c00
    69a8:	00006579 	.word	0x00006579
    69ac:	0000675d 	.word	0x0000675d

000069b0 <system_pinmux_get_group_from_gpio_pin>:
{
    69b0:	b580      	push	{r7, lr}
    69b2:	b084      	sub	sp, #16
    69b4:	af00      	add	r7, sp, #0
    69b6:	0002      	movs	r2, r0
    69b8:	1dfb      	adds	r3, r7, #7
    69ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    69bc:	230f      	movs	r3, #15
    69be:	18fb      	adds	r3, r7, r3
    69c0:	1dfa      	adds	r2, r7, #7
    69c2:	7812      	ldrb	r2, [r2, #0]
    69c4:	09d2      	lsrs	r2, r2, #7
    69c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    69c8:	230e      	movs	r3, #14
    69ca:	18fb      	adds	r3, r7, r3
    69cc:	1dfa      	adds	r2, r7, #7
    69ce:	7812      	ldrb	r2, [r2, #0]
    69d0:	0952      	lsrs	r2, r2, #5
    69d2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    69d4:	4b0d      	ldr	r3, [pc, #52]	; (6a0c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    69d6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    69d8:	230f      	movs	r3, #15
    69da:	18fb      	adds	r3, r7, r3
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	2b00      	cmp	r3, #0
    69e0:	d10f      	bne.n	6a02 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    69e2:	230f      	movs	r3, #15
    69e4:	18fb      	adds	r3, r7, r3
    69e6:	781b      	ldrb	r3, [r3, #0]
    69e8:	009b      	lsls	r3, r3, #2
    69ea:	2210      	movs	r2, #16
    69ec:	4694      	mov	ip, r2
    69ee:	44bc      	add	ip, r7
    69f0:	4463      	add	r3, ip
    69f2:	3b08      	subs	r3, #8
    69f4:	681a      	ldr	r2, [r3, #0]
    69f6:	230e      	movs	r3, #14
    69f8:	18fb      	adds	r3, r7, r3
    69fa:	781b      	ldrb	r3, [r3, #0]
    69fc:	01db      	lsls	r3, r3, #7
    69fe:	18d3      	adds	r3, r2, r3
    6a00:	e000      	b.n	6a04 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6a02:	2300      	movs	r3, #0
}
    6a04:	0018      	movs	r0, r3
    6a06:	46bd      	mov	sp, r7
    6a08:	b004      	add	sp, #16
    6a0a:	bd80      	pop	{r7, pc}
    6a0c:	41004400 	.word	0x41004400

00006a10 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6a10:	b580      	push	{r7, lr}
    6a12:	b088      	sub	sp, #32
    6a14:	af00      	add	r7, sp, #0
    6a16:	60f8      	str	r0, [r7, #12]
    6a18:	60b9      	str	r1, [r7, #8]
    6a1a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6a1c:	2300      	movs	r3, #0
    6a1e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6a20:	687b      	ldr	r3, [r7, #4]
    6a22:	78db      	ldrb	r3, [r3, #3]
    6a24:	2201      	movs	r2, #1
    6a26:	4053      	eors	r3, r2
    6a28:	b2db      	uxtb	r3, r3
    6a2a:	2b00      	cmp	r3, #0
    6a2c:	d035      	beq.n	6a9a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6a2e:	687b      	ldr	r3, [r7, #4]
    6a30:	781b      	ldrb	r3, [r3, #0]
    6a32:	2b80      	cmp	r3, #128	; 0x80
    6a34:	d00b      	beq.n	6a4e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6a36:	69fb      	ldr	r3, [r7, #28]
    6a38:	2280      	movs	r2, #128	; 0x80
    6a3a:	0252      	lsls	r2, r2, #9
    6a3c:	4313      	orrs	r3, r2
    6a3e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6a40:	687b      	ldr	r3, [r7, #4]
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	061b      	lsls	r3, r3, #24
    6a46:	001a      	movs	r2, r3
    6a48:	69fb      	ldr	r3, [r7, #28]
    6a4a:	4313      	orrs	r3, r2
    6a4c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6a4e:	687b      	ldr	r3, [r7, #4]
    6a50:	785b      	ldrb	r3, [r3, #1]
    6a52:	2b00      	cmp	r3, #0
    6a54:	d003      	beq.n	6a5e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6a56:	687b      	ldr	r3, [r7, #4]
    6a58:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6a5a:	2b02      	cmp	r3, #2
    6a5c:	d110      	bne.n	6a80 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6a5e:	69fb      	ldr	r3, [r7, #28]
    6a60:	2280      	movs	r2, #128	; 0x80
    6a62:	0292      	lsls	r2, r2, #10
    6a64:	4313      	orrs	r3, r2
    6a66:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6a68:	687b      	ldr	r3, [r7, #4]
    6a6a:	789b      	ldrb	r3, [r3, #2]
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d004      	beq.n	6a7a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6a70:	69fb      	ldr	r3, [r7, #28]
    6a72:	2280      	movs	r2, #128	; 0x80
    6a74:	02d2      	lsls	r2, r2, #11
    6a76:	4313      	orrs	r3, r2
    6a78:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6a7a:	68fb      	ldr	r3, [r7, #12]
    6a7c:	68ba      	ldr	r2, [r7, #8]
    6a7e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6a80:	687b      	ldr	r3, [r7, #4]
    6a82:	785b      	ldrb	r3, [r3, #1]
    6a84:	2b01      	cmp	r3, #1
    6a86:	d003      	beq.n	6a90 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6a8c:	2b02      	cmp	r3, #2
    6a8e:	d107      	bne.n	6aa0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6a90:	69fb      	ldr	r3, [r7, #28]
    6a92:	4a22      	ldr	r2, [pc, #136]	; (6b1c <_system_pinmux_config+0x10c>)
    6a94:	4013      	ands	r3, r2
    6a96:	61fb      	str	r3, [r7, #28]
    6a98:	e002      	b.n	6aa0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6a9a:	68fb      	ldr	r3, [r7, #12]
    6a9c:	68ba      	ldr	r2, [r7, #8]
    6a9e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6aa0:	68bb      	ldr	r3, [r7, #8]
    6aa2:	041b      	lsls	r3, r3, #16
    6aa4:	0c1b      	lsrs	r3, r3, #16
    6aa6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6aa8:	68bb      	ldr	r3, [r7, #8]
    6aaa:	0c1b      	lsrs	r3, r3, #16
    6aac:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6aae:	69ba      	ldr	r2, [r7, #24]
    6ab0:	69fb      	ldr	r3, [r7, #28]
    6ab2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6ab4:	22a0      	movs	r2, #160	; 0xa0
    6ab6:	05d2      	lsls	r2, r2, #23
    6ab8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6aba:	68fb      	ldr	r3, [r7, #12]
    6abc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6abe:	697a      	ldr	r2, [r7, #20]
    6ac0:	69fb      	ldr	r3, [r7, #28]
    6ac2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6ac4:	22d0      	movs	r2, #208	; 0xd0
    6ac6:	0612      	lsls	r2, r2, #24
    6ac8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6aca:	68fb      	ldr	r3, [r7, #12]
    6acc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	78db      	ldrb	r3, [r3, #3]
    6ad2:	2201      	movs	r2, #1
    6ad4:	4053      	eors	r3, r2
    6ad6:	b2db      	uxtb	r3, r3
    6ad8:	2b00      	cmp	r3, #0
    6ada:	d01a      	beq.n	6b12 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6adc:	69fa      	ldr	r2, [r7, #28]
    6ade:	2380      	movs	r3, #128	; 0x80
    6ae0:	02db      	lsls	r3, r3, #11
    6ae2:	4013      	ands	r3, r2
    6ae4:	d00a      	beq.n	6afc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	789b      	ldrb	r3, [r3, #2]
    6aea:	2b01      	cmp	r3, #1
    6aec:	d103      	bne.n	6af6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6aee:	68fb      	ldr	r3, [r7, #12]
    6af0:	68ba      	ldr	r2, [r7, #8]
    6af2:	619a      	str	r2, [r3, #24]
    6af4:	e002      	b.n	6afc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6af6:	68fb      	ldr	r3, [r7, #12]
    6af8:	68ba      	ldr	r2, [r7, #8]
    6afa:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6afc:	687b      	ldr	r3, [r7, #4]
    6afe:	785b      	ldrb	r3, [r3, #1]
    6b00:	2b01      	cmp	r3, #1
    6b02:	d003      	beq.n	6b0c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b08:	2b02      	cmp	r3, #2
    6b0a:	d102      	bne.n	6b12 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6b0c:	68fb      	ldr	r3, [r7, #12]
    6b0e:	68ba      	ldr	r2, [r7, #8]
    6b10:	609a      	str	r2, [r3, #8]
		}
	}
}
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	46bd      	mov	sp, r7
    6b16:	b008      	add	sp, #32
    6b18:	bd80      	pop	{r7, pc}
    6b1a:	46c0      	nop			; (mov r8, r8)
    6b1c:	fffbffff 	.word	0xfffbffff

00006b20 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6b20:	b580      	push	{r7, lr}
    6b22:	b084      	sub	sp, #16
    6b24:	af00      	add	r7, sp, #0
    6b26:	0002      	movs	r2, r0
    6b28:	6039      	str	r1, [r7, #0]
    6b2a:	1dfb      	adds	r3, r7, #7
    6b2c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6b2e:	1dfb      	adds	r3, r7, #7
    6b30:	781b      	ldrb	r3, [r3, #0]
    6b32:	0018      	movs	r0, r3
    6b34:	4b0a      	ldr	r3, [pc, #40]	; (6b60 <system_pinmux_pin_set_config+0x40>)
    6b36:	4798      	blx	r3
    6b38:	0003      	movs	r3, r0
    6b3a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6b3c:	1dfb      	adds	r3, r7, #7
    6b3e:	781b      	ldrb	r3, [r3, #0]
    6b40:	221f      	movs	r2, #31
    6b42:	4013      	ands	r3, r2
    6b44:	2201      	movs	r2, #1
    6b46:	409a      	lsls	r2, r3
    6b48:	0013      	movs	r3, r2
    6b4a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6b4c:	683a      	ldr	r2, [r7, #0]
    6b4e:	68b9      	ldr	r1, [r7, #8]
    6b50:	68fb      	ldr	r3, [r7, #12]
    6b52:	0018      	movs	r0, r3
    6b54:	4b03      	ldr	r3, [pc, #12]	; (6b64 <system_pinmux_pin_set_config+0x44>)
    6b56:	4798      	blx	r3
}
    6b58:	46c0      	nop			; (mov r8, r8)
    6b5a:	46bd      	mov	sp, r7
    6b5c:	b004      	add	sp, #16
    6b5e:	bd80      	pop	{r7, pc}
    6b60:	000069b1 	.word	0x000069b1
    6b64:	00006a11 	.word	0x00006a11

00006b68 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6b68:	b580      	push	{r7, lr}
    6b6a:	af00      	add	r7, sp, #0
	return;
    6b6c:	46c0      	nop			; (mov r8, r8)
}
    6b6e:	46bd      	mov	sp, r7
    6b70:	bd80      	pop	{r7, pc}
	...

00006b74 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6b74:	b580      	push	{r7, lr}
    6b76:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6b78:	4b06      	ldr	r3, [pc, #24]	; (6b94 <system_init+0x20>)
    6b7a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6b7c:	4b06      	ldr	r3, [pc, #24]	; (6b98 <system_init+0x24>)
    6b7e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6b80:	4b06      	ldr	r3, [pc, #24]	; (6b9c <system_init+0x28>)
    6b82:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6b84:	4b06      	ldr	r3, [pc, #24]	; (6ba0 <system_init+0x2c>)
    6b86:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6b88:	4b06      	ldr	r3, [pc, #24]	; (6ba4 <system_init+0x30>)
    6b8a:	4798      	blx	r3
}
    6b8c:	46c0      	nop			; (mov r8, r8)
    6b8e:	46bd      	mov	sp, r7
    6b90:	bd80      	pop	{r7, pc}
    6b92:	46c0      	nop			; (mov r8, r8)
    6b94:	0000628d 	.word	0x0000628d
    6b98:	00005b21 	.word	0x00005b21
    6b9c:	00006b69 	.word	0x00006b69
    6ba0:	00001231 	.word	0x00001231
    6ba4:	00006b69 	.word	0x00006b69

00006ba8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6ba8:	b580      	push	{r7, lr}
    6baa:	b082      	sub	sp, #8
    6bac:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6bae:	4b2f      	ldr	r3, [pc, #188]	; (6c6c <Reset_Handler+0xc4>)
    6bb0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6bb2:	4b2f      	ldr	r3, [pc, #188]	; (6c70 <Reset_Handler+0xc8>)
    6bb4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6bb6:	687a      	ldr	r2, [r7, #4]
    6bb8:	683b      	ldr	r3, [r7, #0]
    6bba:	429a      	cmp	r2, r3
    6bbc:	d00c      	beq.n	6bd8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6bbe:	e007      	b.n	6bd0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6bc0:	683b      	ldr	r3, [r7, #0]
    6bc2:	1d1a      	adds	r2, r3, #4
    6bc4:	603a      	str	r2, [r7, #0]
    6bc6:	687a      	ldr	r2, [r7, #4]
    6bc8:	1d11      	adds	r1, r2, #4
    6bca:	6079      	str	r1, [r7, #4]
    6bcc:	6812      	ldr	r2, [r2, #0]
    6bce:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6bd0:	683a      	ldr	r2, [r7, #0]
    6bd2:	4b28      	ldr	r3, [pc, #160]	; (6c74 <Reset_Handler+0xcc>)
    6bd4:	429a      	cmp	r2, r3
    6bd6:	d3f3      	bcc.n	6bc0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6bd8:	4b27      	ldr	r3, [pc, #156]	; (6c78 <Reset_Handler+0xd0>)
    6bda:	603b      	str	r3, [r7, #0]
    6bdc:	e004      	b.n	6be8 <Reset_Handler+0x40>
                *pDest++ = 0;
    6bde:	683b      	ldr	r3, [r7, #0]
    6be0:	1d1a      	adds	r2, r3, #4
    6be2:	603a      	str	r2, [r7, #0]
    6be4:	2200      	movs	r2, #0
    6be6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6be8:	683a      	ldr	r2, [r7, #0]
    6bea:	4b24      	ldr	r3, [pc, #144]	; (6c7c <Reset_Handler+0xd4>)
    6bec:	429a      	cmp	r2, r3
    6bee:	d3f6      	bcc.n	6bde <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6bf0:	4b23      	ldr	r3, [pc, #140]	; (6c80 <Reset_Handler+0xd8>)
    6bf2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6bf4:	4b23      	ldr	r3, [pc, #140]	; (6c84 <Reset_Handler+0xdc>)
    6bf6:	687a      	ldr	r2, [r7, #4]
    6bf8:	21ff      	movs	r1, #255	; 0xff
    6bfa:	438a      	bics	r2, r1
    6bfc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6bfe:	4a22      	ldr	r2, [pc, #136]	; (6c88 <Reset_Handler+0xe0>)
    6c00:	2390      	movs	r3, #144	; 0x90
    6c02:	005b      	lsls	r3, r3, #1
    6c04:	2102      	movs	r1, #2
    6c06:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6c08:	4a20      	ldr	r2, [pc, #128]	; (6c8c <Reset_Handler+0xe4>)
    6c0a:	78d3      	ldrb	r3, [r2, #3]
    6c0c:	2103      	movs	r1, #3
    6c0e:	438b      	bics	r3, r1
    6c10:	1c19      	adds	r1, r3, #0
    6c12:	2302      	movs	r3, #2
    6c14:	430b      	orrs	r3, r1
    6c16:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6c18:	4a1c      	ldr	r2, [pc, #112]	; (6c8c <Reset_Handler+0xe4>)
    6c1a:	78d3      	ldrb	r3, [r2, #3]
    6c1c:	210c      	movs	r1, #12
    6c1e:	438b      	bics	r3, r1
    6c20:	1c19      	adds	r1, r3, #0
    6c22:	2308      	movs	r3, #8
    6c24:	430b      	orrs	r3, r1
    6c26:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6c28:	4a19      	ldr	r2, [pc, #100]	; (6c90 <Reset_Handler+0xe8>)
    6c2a:	7b93      	ldrb	r3, [r2, #14]
    6c2c:	2130      	movs	r1, #48	; 0x30
    6c2e:	438b      	bics	r3, r1
    6c30:	1c19      	adds	r1, r3, #0
    6c32:	2320      	movs	r3, #32
    6c34:	430b      	orrs	r3, r1
    6c36:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6c38:	4a15      	ldr	r2, [pc, #84]	; (6c90 <Reset_Handler+0xe8>)
    6c3a:	7b93      	ldrb	r3, [r2, #14]
    6c3c:	210c      	movs	r1, #12
    6c3e:	438b      	bics	r3, r1
    6c40:	1c19      	adds	r1, r3, #0
    6c42:	2308      	movs	r3, #8
    6c44:	430b      	orrs	r3, r1
    6c46:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6c48:	4a11      	ldr	r2, [pc, #68]	; (6c90 <Reset_Handler+0xe8>)
    6c4a:	7b93      	ldrb	r3, [r2, #14]
    6c4c:	2103      	movs	r1, #3
    6c4e:	438b      	bics	r3, r1
    6c50:	1c19      	adds	r1, r3, #0
    6c52:	2302      	movs	r3, #2
    6c54:	430b      	orrs	r3, r1
    6c56:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6c58:	4a0e      	ldr	r2, [pc, #56]	; (6c94 <Reset_Handler+0xec>)
    6c5a:	6853      	ldr	r3, [r2, #4]
    6c5c:	2180      	movs	r1, #128	; 0x80
    6c5e:	430b      	orrs	r3, r1
    6c60:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6c62:	4b0d      	ldr	r3, [pc, #52]	; (6c98 <Reset_Handler+0xf0>)
    6c64:	4798      	blx	r3

        /* Branch to main function */
        main();
    6c66:	4b0d      	ldr	r3, [pc, #52]	; (6c9c <Reset_Handler+0xf4>)
    6c68:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6c6a:	e7fe      	b.n	6c6a <Reset_Handler+0xc2>
    6c6c:	0000f340 	.word	0x0000f340
    6c70:	20000000 	.word	0x20000000
    6c74:	20000248 	.word	0x20000248
    6c78:	20000248 	.word	0x20000248
    6c7c:	200004e4 	.word	0x200004e4
    6c80:	00000000 	.word	0x00000000
    6c84:	e000ed00 	.word	0xe000ed00
    6c88:	41007000 	.word	0x41007000
    6c8c:	41005000 	.word	0x41005000
    6c90:	41004800 	.word	0x41004800
    6c94:	41004000 	.word	0x41004000
    6c98:	0000906d 	.word	0x0000906d
    6c9c:	00008f5d 	.word	0x00008f5d

00006ca0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6ca0:	b580      	push	{r7, lr}
    6ca2:	af00      	add	r7, sp, #0
        while (1) {
    6ca4:	e7fe      	b.n	6ca4 <Dummy_Handler+0x4>
	...

00006ca8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6ca8:	b580      	push	{r7, lr}
    6caa:	b084      	sub	sp, #16
    6cac:	af00      	add	r7, sp, #0
    6cae:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6cb0:	4b0a      	ldr	r3, [pc, #40]	; (6cdc <_sbrk+0x34>)
    6cb2:	681b      	ldr	r3, [r3, #0]
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d102      	bne.n	6cbe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6cb8:	4b08      	ldr	r3, [pc, #32]	; (6cdc <_sbrk+0x34>)
    6cba:	4a09      	ldr	r2, [pc, #36]	; (6ce0 <_sbrk+0x38>)
    6cbc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6cbe:	4b07      	ldr	r3, [pc, #28]	; (6cdc <_sbrk+0x34>)
    6cc0:	681b      	ldr	r3, [r3, #0]
    6cc2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6cc4:	4b05      	ldr	r3, [pc, #20]	; (6cdc <_sbrk+0x34>)
    6cc6:	681a      	ldr	r2, [r3, #0]
    6cc8:	687b      	ldr	r3, [r7, #4]
    6cca:	18d2      	adds	r2, r2, r3
    6ccc:	4b03      	ldr	r3, [pc, #12]	; (6cdc <_sbrk+0x34>)
    6cce:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6cd0:	68fb      	ldr	r3, [r7, #12]
}
    6cd2:	0018      	movs	r0, r3
    6cd4:	46bd      	mov	sp, r7
    6cd6:	b004      	add	sp, #16
    6cd8:	bd80      	pop	{r7, pc}
    6cda:	46c0      	nop			; (mov r8, r8)
    6cdc:	200002b4 	.word	0x200002b4
    6ce0:	200024e8 	.word	0x200024e8

00006ce4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6ce4:	b580      	push	{r7, lr}
    6ce6:	b082      	sub	sp, #8
    6ce8:	af00      	add	r7, sp, #0
    6cea:	6078      	str	r0, [r7, #4]
	return -1;
    6cec:	2301      	movs	r3, #1
    6cee:	425b      	negs	r3, r3
}
    6cf0:	0018      	movs	r0, r3
    6cf2:	46bd      	mov	sp, r7
    6cf4:	b002      	add	sp, #8
    6cf6:	bd80      	pop	{r7, pc}

00006cf8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b082      	sub	sp, #8
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	6078      	str	r0, [r7, #4]
    6d00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6d02:	683b      	ldr	r3, [r7, #0]
    6d04:	2280      	movs	r2, #128	; 0x80
    6d06:	0192      	lsls	r2, r2, #6
    6d08:	605a      	str	r2, [r3, #4]

	return 0;
    6d0a:	2300      	movs	r3, #0
}
    6d0c:	0018      	movs	r0, r3
    6d0e:	46bd      	mov	sp, r7
    6d10:	b002      	add	sp, #8
    6d12:	bd80      	pop	{r7, pc}

00006d14 <_isatty>:

extern int _isatty(int file)
{
    6d14:	b580      	push	{r7, lr}
    6d16:	b082      	sub	sp, #8
    6d18:	af00      	add	r7, sp, #0
    6d1a:	6078      	str	r0, [r7, #4]
	return 1;
    6d1c:	2301      	movs	r3, #1
}
    6d1e:	0018      	movs	r0, r3
    6d20:	46bd      	mov	sp, r7
    6d22:	b002      	add	sp, #8
    6d24:	bd80      	pop	{r7, pc}

00006d26 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    6d26:	b580      	push	{r7, lr}
    6d28:	b084      	sub	sp, #16
    6d2a:	af00      	add	r7, sp, #0
    6d2c:	60f8      	str	r0, [r7, #12]
    6d2e:	60b9      	str	r1, [r7, #8]
    6d30:	607a      	str	r2, [r7, #4]
	return 0;
    6d32:	2300      	movs	r3, #0
}
    6d34:	0018      	movs	r0, r3
    6d36:	46bd      	mov	sp, r7
    6d38:	b004      	add	sp, #16
    6d3a:	bd80      	pop	{r7, pc}

00006d3c <system_pinmux_get_group_from_gpio_pin>:
{
    6d3c:	b580      	push	{r7, lr}
    6d3e:	b084      	sub	sp, #16
    6d40:	af00      	add	r7, sp, #0
    6d42:	0002      	movs	r2, r0
    6d44:	1dfb      	adds	r3, r7, #7
    6d46:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6d48:	230f      	movs	r3, #15
    6d4a:	18fb      	adds	r3, r7, r3
    6d4c:	1dfa      	adds	r2, r7, #7
    6d4e:	7812      	ldrb	r2, [r2, #0]
    6d50:	09d2      	lsrs	r2, r2, #7
    6d52:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6d54:	230e      	movs	r3, #14
    6d56:	18fb      	adds	r3, r7, r3
    6d58:	1dfa      	adds	r2, r7, #7
    6d5a:	7812      	ldrb	r2, [r2, #0]
    6d5c:	0952      	lsrs	r2, r2, #5
    6d5e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6d60:	4b0d      	ldr	r3, [pc, #52]	; (6d98 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6d62:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6d64:	230f      	movs	r3, #15
    6d66:	18fb      	adds	r3, r7, r3
    6d68:	781b      	ldrb	r3, [r3, #0]
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d10f      	bne.n	6d8e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6d6e:	230f      	movs	r3, #15
    6d70:	18fb      	adds	r3, r7, r3
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	009b      	lsls	r3, r3, #2
    6d76:	2210      	movs	r2, #16
    6d78:	4694      	mov	ip, r2
    6d7a:	44bc      	add	ip, r7
    6d7c:	4463      	add	r3, ip
    6d7e:	3b08      	subs	r3, #8
    6d80:	681a      	ldr	r2, [r3, #0]
    6d82:	230e      	movs	r3, #14
    6d84:	18fb      	adds	r3, r7, r3
    6d86:	781b      	ldrb	r3, [r3, #0]
    6d88:	01db      	lsls	r3, r3, #7
    6d8a:	18d3      	adds	r3, r2, r3
    6d8c:	e000      	b.n	6d90 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6d8e:	2300      	movs	r3, #0
}
    6d90:	0018      	movs	r0, r3
    6d92:	46bd      	mov	sp, r7
    6d94:	b004      	add	sp, #16
    6d96:	bd80      	pop	{r7, pc}
    6d98:	41004400 	.word	0x41004400

00006d9c <adc_is_syncing>:
{
    6d9c:	b580      	push	{r7, lr}
    6d9e:	b084      	sub	sp, #16
    6da0:	af00      	add	r7, sp, #0
    6da2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	681b      	ldr	r3, [r3, #0]
    6da8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6daa:	68fb      	ldr	r3, [r7, #12]
    6dac:	7e5b      	ldrb	r3, [r3, #25]
    6dae:	b2db      	uxtb	r3, r3
    6db0:	b25b      	sxtb	r3, r3
    6db2:	2b00      	cmp	r3, #0
    6db4:	da01      	bge.n	6dba <adc_is_syncing+0x1e>
		return true;
    6db6:	2301      	movs	r3, #1
    6db8:	e000      	b.n	6dbc <adc_is_syncing+0x20>
	return false;
    6dba:	2300      	movs	r3, #0
}
    6dbc:	0018      	movs	r0, r3
    6dbe:	46bd      	mov	sp, r7
    6dc0:	b004      	add	sp, #16
    6dc2:	bd80      	pop	{r7, pc}

00006dc4 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    6dc4:	b580      	push	{r7, lr}
    6dc6:	b086      	sub	sp, #24
    6dc8:	af00      	add	r7, sp, #0
    6dca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6dcc:	687b      	ldr	r3, [r7, #4]
    6dce:	681b      	ldr	r3, [r3, #0]
    6dd0:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    6dd2:	693b      	ldr	r3, [r7, #16]
    6dd4:	7e1b      	ldrb	r3, [r3, #24]
    6dd6:	b2db      	uxtb	r3, r3
    6dd8:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    6dda:	2300      	movs	r3, #0
    6ddc:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6dde:	68fb      	ldr	r3, [r7, #12]
    6de0:	2201      	movs	r2, #1
    6de2:	4013      	ands	r3, r2
    6de4:	d003      	beq.n	6dee <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    6de6:	697b      	ldr	r3, [r7, #20]
    6de8:	2201      	movs	r2, #1
    6dea:	4313      	orrs	r3, r2
    6dec:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    6dee:	68fb      	ldr	r3, [r7, #12]
    6df0:	2204      	movs	r2, #4
    6df2:	4013      	ands	r3, r2
    6df4:	d003      	beq.n	6dfe <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    6df6:	697b      	ldr	r3, [r7, #20]
    6df8:	2202      	movs	r2, #2
    6dfa:	4313      	orrs	r3, r2
    6dfc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6dfe:	68fb      	ldr	r3, [r7, #12]
    6e00:	2202      	movs	r2, #2
    6e02:	4013      	ands	r3, r2
    6e04:	d003      	beq.n	6e0e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    6e06:	697b      	ldr	r3, [r7, #20]
    6e08:	2204      	movs	r2, #4
    6e0a:	4313      	orrs	r3, r2
    6e0c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    6e0e:	697b      	ldr	r3, [r7, #20]
}
    6e10:	0018      	movs	r0, r3
    6e12:	46bd      	mov	sp, r7
    6e14:	b006      	add	sp, #24
    6e16:	bd80      	pop	{r7, pc}

00006e18 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    6e18:	b580      	push	{r7, lr}
    6e1a:	b084      	sub	sp, #16
    6e1c:	af00      	add	r7, sp, #0
    6e1e:	6078      	str	r0, [r7, #4]
    6e20:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    6e28:	2300      	movs	r3, #0
    6e2a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    6e2c:	683b      	ldr	r3, [r7, #0]
    6e2e:	2201      	movs	r2, #1
    6e30:	4013      	ands	r3, r2
    6e32:	d003      	beq.n	6e3c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    6e34:	68fb      	ldr	r3, [r7, #12]
    6e36:	2201      	movs	r2, #1
    6e38:	4313      	orrs	r3, r2
    6e3a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    6e3c:	683b      	ldr	r3, [r7, #0]
    6e3e:	2202      	movs	r2, #2
    6e40:	4013      	ands	r3, r2
    6e42:	d003      	beq.n	6e4c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    6e44:	68fb      	ldr	r3, [r7, #12]
    6e46:	2204      	movs	r2, #4
    6e48:	4313      	orrs	r3, r2
    6e4a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    6e4c:	683b      	ldr	r3, [r7, #0]
    6e4e:	2204      	movs	r2, #4
    6e50:	4013      	ands	r3, r2
    6e52:	d003      	beq.n	6e5c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    6e54:	68fb      	ldr	r3, [r7, #12]
    6e56:	2202      	movs	r2, #2
    6e58:	4313      	orrs	r3, r2
    6e5a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    6e5c:	68fb      	ldr	r3, [r7, #12]
    6e5e:	b2da      	uxtb	r2, r3
    6e60:	68bb      	ldr	r3, [r7, #8]
    6e62:	761a      	strb	r2, [r3, #24]
}
    6e64:	46c0      	nop			; (mov r8, r8)
    6e66:	46bd      	mov	sp, r7
    6e68:	b004      	add	sp, #16
    6e6a:	bd80      	pop	{r7, pc}

00006e6c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    6e6c:	b580      	push	{r7, lr}
    6e6e:	b084      	sub	sp, #16
    6e70:	af00      	add	r7, sp, #0
    6e72:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6e74:	687b      	ldr	r3, [r7, #4]
    6e76:	681b      	ldr	r3, [r3, #0]
    6e78:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    6e7a:	46c0      	nop			; (mov r8, r8)
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	0018      	movs	r0, r3
    6e80:	4b0e      	ldr	r3, [pc, #56]	; (6ebc <adc_enable+0x50>)
    6e82:	4798      	blx	r3
    6e84:	1e03      	subs	r3, r0, #0
    6e86:	d1f9      	bne.n	6e7c <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6e88:	68fb      	ldr	r3, [r7, #12]
    6e8a:	220f      	movs	r2, #15
    6e8c:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6e8e:	68fb      	ldr	r3, [r7, #12]
    6e90:	220f      	movs	r2, #15
    6e92:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6e94:	68fb      	ldr	r3, [r7, #12]
    6e96:	781b      	ldrb	r3, [r3, #0]
    6e98:	b2db      	uxtb	r3, r3
    6e9a:	2202      	movs	r2, #2
    6e9c:	4313      	orrs	r3, r2
    6e9e:	b2da      	uxtb	r2, r3
    6ea0:	68fb      	ldr	r3, [r7, #12]
    6ea2:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    6ea4:	46c0      	nop			; (mov r8, r8)
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	0018      	movs	r0, r3
    6eaa:	4b04      	ldr	r3, [pc, #16]	; (6ebc <adc_enable+0x50>)
    6eac:	4798      	blx	r3
    6eae:	1e03      	subs	r3, r0, #0
    6eb0:	d1f9      	bne.n	6ea6 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    6eb2:	2300      	movs	r3, #0
}
    6eb4:	0018      	movs	r0, r3
    6eb6:	46bd      	mov	sp, r7
    6eb8:	b004      	add	sp, #16
    6eba:	bd80      	pop	{r7, pc}
    6ebc:	00006d9d 	.word	0x00006d9d

00006ec0 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	b084      	sub	sp, #16
    6ec4:	af00      	add	r7, sp, #0
    6ec6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6ec8:	687b      	ldr	r3, [r7, #4]
    6eca:	681b      	ldr	r3, [r3, #0]
    6ecc:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    6ece:	46c0      	nop			; (mov r8, r8)
    6ed0:	687b      	ldr	r3, [r7, #4]
    6ed2:	0018      	movs	r0, r3
    6ed4:	4b0b      	ldr	r3, [pc, #44]	; (6f04 <adc_start_conversion+0x44>)
    6ed6:	4798      	blx	r3
    6ed8:	1e03      	subs	r3, r0, #0
    6eda:	d1f9      	bne.n	6ed0 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6edc:	68fb      	ldr	r3, [r7, #12]
    6ede:	7b1b      	ldrb	r3, [r3, #12]
    6ee0:	b2db      	uxtb	r3, r3
    6ee2:	2202      	movs	r2, #2
    6ee4:	4313      	orrs	r3, r2
    6ee6:	b2da      	uxtb	r2, r3
    6ee8:	68fb      	ldr	r3, [r7, #12]
    6eea:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    6eec:	46c0      	nop			; (mov r8, r8)
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	0018      	movs	r0, r3
    6ef2:	4b04      	ldr	r3, [pc, #16]	; (6f04 <adc_start_conversion+0x44>)
    6ef4:	4798      	blx	r3
    6ef6:	1e03      	subs	r3, r0, #0
    6ef8:	d1f9      	bne.n	6eee <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    6efa:	46c0      	nop			; (mov r8, r8)
    6efc:	46bd      	mov	sp, r7
    6efe:	b004      	add	sp, #16
    6f00:	bd80      	pop	{r7, pc}
    6f02:	46c0      	nop			; (mov r8, r8)
    6f04:	00006d9d 	.word	0x00006d9d

00006f08 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    6f08:	b580      	push	{r7, lr}
    6f0a:	b084      	sub	sp, #16
    6f0c:	af00      	add	r7, sp, #0
    6f0e:	6078      	str	r0, [r7, #4]
    6f10:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    6f12:	687b      	ldr	r3, [r7, #4]
    6f14:	0018      	movs	r0, r3
    6f16:	4b18      	ldr	r3, [pc, #96]	; (6f78 <adc_read+0x70>)
    6f18:	4798      	blx	r3
    6f1a:	0002      	movs	r2, r0
    6f1c:	2301      	movs	r3, #1
    6f1e:	4013      	ands	r3, r2
    6f20:	d101      	bne.n	6f26 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    6f22:	2305      	movs	r3, #5
    6f24:	e023      	b.n	6f6e <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    6f26:	687b      	ldr	r3, [r7, #4]
    6f28:	681b      	ldr	r3, [r3, #0]
    6f2a:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    6f2c:	46c0      	nop			; (mov r8, r8)
    6f2e:	687b      	ldr	r3, [r7, #4]
    6f30:	0018      	movs	r0, r3
    6f32:	4b12      	ldr	r3, [pc, #72]	; (6f7c <adc_read+0x74>)
    6f34:	4798      	blx	r3
    6f36:	1e03      	subs	r3, r0, #0
    6f38:	d1f9      	bne.n	6f2e <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    6f3a:	68fb      	ldr	r3, [r7, #12]
    6f3c:	8b5b      	ldrh	r3, [r3, #26]
    6f3e:	b29a      	uxth	r2, r3
    6f40:	683b      	ldr	r3, [r7, #0]
    6f42:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	2101      	movs	r1, #1
    6f48:	0018      	movs	r0, r3
    6f4a:	4b0d      	ldr	r3, [pc, #52]	; (6f80 <adc_read+0x78>)
    6f4c:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    6f4e:	687b      	ldr	r3, [r7, #4]
    6f50:	0018      	movs	r0, r3
    6f52:	4b09      	ldr	r3, [pc, #36]	; (6f78 <adc_read+0x70>)
    6f54:	4798      	blx	r3
    6f56:	0002      	movs	r2, r0
    6f58:	2304      	movs	r3, #4
    6f5a:	4013      	ands	r3, r2
    6f5c:	d006      	beq.n	6f6c <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    6f5e:	687b      	ldr	r3, [r7, #4]
    6f60:	2104      	movs	r1, #4
    6f62:	0018      	movs	r0, r3
    6f64:	4b06      	ldr	r3, [pc, #24]	; (6f80 <adc_read+0x78>)
    6f66:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    6f68:	231e      	movs	r3, #30
    6f6a:	e000      	b.n	6f6e <adc_read+0x66>
	}

	return STATUS_OK;
    6f6c:	2300      	movs	r3, #0
}
    6f6e:	0018      	movs	r0, r3
    6f70:	46bd      	mov	sp, r7
    6f72:	b004      	add	sp, #16
    6f74:	bd80      	pop	{r7, pc}
    6f76:	46c0      	nop			; (mov r8, r8)
    6f78:	00006dc5 	.word	0x00006dc5
    6f7c:	00006d9d 	.word	0x00006d9d
    6f80:	00006e19 	.word	0x00006e19

00006f84 <system_interrupt_enable>:
{
    6f84:	b580      	push	{r7, lr}
    6f86:	b082      	sub	sp, #8
    6f88:	af00      	add	r7, sp, #0
    6f8a:	0002      	movs	r2, r0
    6f8c:	1dfb      	adds	r3, r7, #7
    6f8e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6f90:	4b06      	ldr	r3, [pc, #24]	; (6fac <system_interrupt_enable+0x28>)
    6f92:	1dfa      	adds	r2, r7, #7
    6f94:	7812      	ldrb	r2, [r2, #0]
    6f96:	0011      	movs	r1, r2
    6f98:	221f      	movs	r2, #31
    6f9a:	400a      	ands	r2, r1
    6f9c:	2101      	movs	r1, #1
    6f9e:	4091      	lsls	r1, r2
    6fa0:	000a      	movs	r2, r1
    6fa2:	601a      	str	r2, [r3, #0]
}
    6fa4:	46c0      	nop			; (mov r8, r8)
    6fa6:	46bd      	mov	sp, r7
    6fa8:	b002      	add	sp, #8
    6faa:	bd80      	pop	{r7, pc}
    6fac:	e000e100 	.word	0xe000e100

00006fb0 <i2c_master_is_syncing>:
{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	b084      	sub	sp, #16
    6fb4:	af00      	add	r7, sp, #0
    6fb6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6fb8:	687b      	ldr	r3, [r7, #4]
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6fbe:	68fb      	ldr	r3, [r7, #12]
    6fc0:	69db      	ldr	r3, [r3, #28]
    6fc2:	2207      	movs	r2, #7
    6fc4:	4013      	ands	r3, r2
    6fc6:	1e5a      	subs	r2, r3, #1
    6fc8:	4193      	sbcs	r3, r2
    6fca:	b2db      	uxtb	r3, r3
}
    6fcc:	0018      	movs	r0, r3
    6fce:	46bd      	mov	sp, r7
    6fd0:	b004      	add	sp, #16
    6fd2:	bd80      	pop	{r7, pc}

00006fd4 <_i2c_master_wait_for_sync>:
{
    6fd4:	b580      	push	{r7, lr}
    6fd6:	b082      	sub	sp, #8
    6fd8:	af00      	add	r7, sp, #0
    6fda:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    6fdc:	46c0      	nop			; (mov r8, r8)
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	0018      	movs	r0, r3
    6fe2:	4b04      	ldr	r3, [pc, #16]	; (6ff4 <_i2c_master_wait_for_sync+0x20>)
    6fe4:	4798      	blx	r3
    6fe6:	1e03      	subs	r3, r0, #0
    6fe8:	d1f9      	bne.n	6fde <_i2c_master_wait_for_sync+0xa>
}
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	46bd      	mov	sp, r7
    6fee:	b002      	add	sp, #8
    6ff0:	bd80      	pop	{r7, pc}
    6ff2:	46c0      	nop			; (mov r8, r8)
    6ff4:	00006fb1 	.word	0x00006fb1

00006ff8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    6ff8:	b580      	push	{r7, lr}
    6ffa:	b082      	sub	sp, #8
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    7000:	687b      	ldr	r3, [r7, #4]
    7002:	2264      	movs	r2, #100	; 0x64
    7004:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	4a1b      	ldr	r2, [pc, #108]	; (7078 <i2c_master_get_config_defaults+0x80>)
    700a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    700c:	687b      	ldr	r3, [r7, #4]
    700e:	2200      	movs	r2, #0
    7010:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    7012:	687b      	ldr	r3, [r7, #4]
    7014:	2200      	movs	r2, #0
    7016:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	2200      	movs	r2, #0
    701c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	2280      	movs	r2, #128	; 0x80
    7022:	0392      	lsls	r2, r2, #14
    7024:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    7026:	687b      	ldr	r3, [r7, #4]
    7028:	2201      	movs	r2, #1
    702a:	4252      	negs	r2, r2
    702c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	2201      	movs	r2, #1
    7032:	4252      	negs	r2, r2
    7034:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    7036:	687b      	ldr	r3, [r7, #4]
    7038:	2200      	movs	r2, #0
    703a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	2200      	movs	r2, #0
    7040:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	2224      	movs	r2, #36	; 0x24
    7046:	2100      	movs	r1, #0
    7048:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	2200      	movs	r2, #0
    704e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	222c      	movs	r2, #44	; 0x2c
    7054:	2100      	movs	r1, #0
    7056:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	222d      	movs	r2, #45	; 0x2d
    705c:	2100      	movs	r1, #0
    705e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    7060:	687b      	ldr	r3, [r7, #4]
    7062:	222e      	movs	r2, #46	; 0x2e
    7064:	2100      	movs	r1, #0
    7066:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    7068:	687b      	ldr	r3, [r7, #4]
    706a:	22d7      	movs	r2, #215	; 0xd7
    706c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    706e:	46c0      	nop			; (mov r8, r8)
    7070:	46bd      	mov	sp, r7
    7072:	b002      	add	sp, #8
    7074:	bd80      	pop	{r7, pc}
    7076:	46c0      	nop			; (mov r8, r8)
    7078:	00000d48 	.word	0x00000d48

0000707c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    707c:	b580      	push	{r7, lr}
    707e:	b084      	sub	sp, #16
    7080:	af00      	add	r7, sp, #0
    7082:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7084:	687b      	ldr	r3, [r7, #4]
    7086:	681b      	ldr	r3, [r3, #0]
    7088:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    708a:	2300      	movs	r3, #0
    708c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    708e:	687b      	ldr	r3, [r7, #4]
    7090:	0018      	movs	r0, r3
    7092:	4b14      	ldr	r3, [pc, #80]	; (70e4 <i2c_master_enable+0x68>)
    7094:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    7096:	68bb      	ldr	r3, [r7, #8]
    7098:	681b      	ldr	r3, [r3, #0]
    709a:	2202      	movs	r2, #2
    709c:	431a      	orrs	r2, r3
    709e:	68bb      	ldr	r3, [r7, #8]
    70a0:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	681b      	ldr	r3, [r3, #0]
    70a6:	0018      	movs	r0, r3
    70a8:	4b0f      	ldr	r3, [pc, #60]	; (70e8 <i2c_master_enable+0x6c>)
    70aa:	4798      	blx	r3
    70ac:	0003      	movs	r3, r0
    70ae:	0018      	movs	r0, r3
    70b0:	4b0e      	ldr	r3, [pc, #56]	; (70ec <i2c_master_enable+0x70>)
    70b2:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    70b4:	e00c      	b.n	70d0 <i2c_master_enable+0x54>
		timeout_counter++;
    70b6:	68fb      	ldr	r3, [r7, #12]
    70b8:	3301      	adds	r3, #1
    70ba:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	88db      	ldrh	r3, [r3, #6]
    70c0:	001a      	movs	r2, r3
    70c2:	68fb      	ldr	r3, [r7, #12]
    70c4:	429a      	cmp	r2, r3
    70c6:	d803      	bhi.n	70d0 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    70c8:	68bb      	ldr	r3, [r7, #8]
    70ca:	2210      	movs	r2, #16
    70cc:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    70ce:	e006      	b.n	70de <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    70d0:	68bb      	ldr	r3, [r7, #8]
    70d2:	8b5b      	ldrh	r3, [r3, #26]
    70d4:	b29b      	uxth	r3, r3
    70d6:	001a      	movs	r2, r3
    70d8:	2310      	movs	r3, #16
    70da:	4013      	ands	r3, r2
    70dc:	d0eb      	beq.n	70b6 <i2c_master_enable+0x3a>
		}
	}
}
    70de:	46bd      	mov	sp, r7
    70e0:	b004      	add	sp, #16
    70e2:	bd80      	pop	{r7, pc}
    70e4:	00006fd5 	.word	0x00006fd5
    70e8:	000058bd 	.word	0x000058bd
    70ec:	00006f85 	.word	0x00006f85

000070f0 <crc32_calculate>:
 * \note To calculate the CRC of multiple blocks, use this function first, then
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
    70f0:	b580      	push	{r7, lr}
    70f2:	b084      	sub	sp, #16
    70f4:	af00      	add	r7, sp, #0
    70f6:	60f8      	str	r0, [r7, #12]
    70f8:	60b9      	str	r1, [r7, #8]
    70fa:	607a      	str	r2, [r7, #4]
	*crc = 0;
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	2200      	movs	r2, #0
    7100:	601a      	str	r2, [r3, #0]

	return crc32_recalculate(data, length, crc);
    7102:	687a      	ldr	r2, [r7, #4]
    7104:	68b9      	ldr	r1, [r7, #8]
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	0018      	movs	r0, r3
    710a:	4b03      	ldr	r3, [pc, #12]	; (7118 <crc32_calculate+0x28>)
    710c:	4798      	blx	r3
    710e:	0003      	movs	r3, r0
}
    7110:	0018      	movs	r0, r3
    7112:	46bd      	mov	sp, r7
    7114:	b004      	add	sp, #16
    7116:	bd80      	pop	{r7, pc}
    7118:	00000f15 	.word	0x00000f15

0000711c <port_get_group_from_gpio_pin>:
{
    711c:	b580      	push	{r7, lr}
    711e:	b082      	sub	sp, #8
    7120:	af00      	add	r7, sp, #0
    7122:	0002      	movs	r2, r0
    7124:	1dfb      	adds	r3, r7, #7
    7126:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7128:	1dfb      	adds	r3, r7, #7
    712a:	781b      	ldrb	r3, [r3, #0]
    712c:	0018      	movs	r0, r3
    712e:	4b03      	ldr	r3, [pc, #12]	; (713c <port_get_group_from_gpio_pin+0x20>)
    7130:	4798      	blx	r3
    7132:	0003      	movs	r3, r0
}
    7134:	0018      	movs	r0, r3
    7136:	46bd      	mov	sp, r7
    7138:	b002      	add	sp, #8
    713a:	bd80      	pop	{r7, pc}
    713c:	00006d3d 	.word	0x00006d3d

00007140 <port_get_config_defaults>:
{
    7140:	b580      	push	{r7, lr}
    7142:	b082      	sub	sp, #8
    7144:	af00      	add	r7, sp, #0
    7146:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    7148:	687b      	ldr	r3, [r7, #4]
    714a:	2200      	movs	r2, #0
    714c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    714e:	687b      	ldr	r3, [r7, #4]
    7150:	2201      	movs	r2, #1
    7152:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    7154:	687b      	ldr	r3, [r7, #4]
    7156:	2200      	movs	r2, #0
    7158:	709a      	strb	r2, [r3, #2]
}
    715a:	46c0      	nop			; (mov r8, r8)
    715c:	46bd      	mov	sp, r7
    715e:	b002      	add	sp, #8
    7160:	bd80      	pop	{r7, pc}
	...

00007164 <port_pin_get_input_level>:
{
    7164:	b580      	push	{r7, lr}
    7166:	b084      	sub	sp, #16
    7168:	af00      	add	r7, sp, #0
    716a:	0002      	movs	r2, r0
    716c:	1dfb      	adds	r3, r7, #7
    716e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    7170:	1dfb      	adds	r3, r7, #7
    7172:	781b      	ldrb	r3, [r3, #0]
    7174:	0018      	movs	r0, r3
    7176:	4b0b      	ldr	r3, [pc, #44]	; (71a4 <port_pin_get_input_level+0x40>)
    7178:	4798      	blx	r3
    717a:	0003      	movs	r3, r0
    717c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    717e:	1dfb      	adds	r3, r7, #7
    7180:	781b      	ldrb	r3, [r3, #0]
    7182:	221f      	movs	r2, #31
    7184:	4013      	ands	r3, r2
    7186:	2201      	movs	r2, #1
    7188:	409a      	lsls	r2, r3
    718a:	0013      	movs	r3, r2
    718c:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    718e:	68fb      	ldr	r3, [r7, #12]
    7190:	6a1b      	ldr	r3, [r3, #32]
    7192:	68ba      	ldr	r2, [r7, #8]
    7194:	4013      	ands	r3, r2
    7196:	1e5a      	subs	r2, r3, #1
    7198:	4193      	sbcs	r3, r2
    719a:	b2db      	uxtb	r3, r3
}
    719c:	0018      	movs	r0, r3
    719e:	46bd      	mov	sp, r7
    71a0:	b004      	add	sp, #16
    71a2:	bd80      	pop	{r7, pc}
    71a4:	0000711d 	.word	0x0000711d

000071a8 <port_pin_set_output_level>:
{
    71a8:	b580      	push	{r7, lr}
    71aa:	b084      	sub	sp, #16
    71ac:	af00      	add	r7, sp, #0
    71ae:	0002      	movs	r2, r0
    71b0:	1dfb      	adds	r3, r7, #7
    71b2:	701a      	strb	r2, [r3, #0]
    71b4:	1dbb      	adds	r3, r7, #6
    71b6:	1c0a      	adds	r2, r1, #0
    71b8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    71ba:	1dfb      	adds	r3, r7, #7
    71bc:	781b      	ldrb	r3, [r3, #0]
    71be:	0018      	movs	r0, r3
    71c0:	4b0d      	ldr	r3, [pc, #52]	; (71f8 <port_pin_set_output_level+0x50>)
    71c2:	4798      	blx	r3
    71c4:	0003      	movs	r3, r0
    71c6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    71c8:	1dfb      	adds	r3, r7, #7
    71ca:	781b      	ldrb	r3, [r3, #0]
    71cc:	221f      	movs	r2, #31
    71ce:	4013      	ands	r3, r2
    71d0:	2201      	movs	r2, #1
    71d2:	409a      	lsls	r2, r3
    71d4:	0013      	movs	r3, r2
    71d6:	60bb      	str	r3, [r7, #8]
	if (level) {
    71d8:	1dbb      	adds	r3, r7, #6
    71da:	781b      	ldrb	r3, [r3, #0]
    71dc:	2b00      	cmp	r3, #0
    71de:	d003      	beq.n	71e8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    71e0:	68fb      	ldr	r3, [r7, #12]
    71e2:	68ba      	ldr	r2, [r7, #8]
    71e4:	619a      	str	r2, [r3, #24]
}
    71e6:	e002      	b.n	71ee <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    71e8:	68fb      	ldr	r3, [r7, #12]
    71ea:	68ba      	ldr	r2, [r7, #8]
    71ec:	615a      	str	r2, [r3, #20]
}
    71ee:	46c0      	nop			; (mov r8, r8)
    71f0:	46bd      	mov	sp, r7
    71f2:	b004      	add	sp, #16
    71f4:	bd80      	pop	{r7, pc}
    71f6:	46c0      	nop			; (mov r8, r8)
    71f8:	0000711d 	.word	0x0000711d

000071fc <spi_is_syncing>:
{
    71fc:	b580      	push	{r7, lr}
    71fe:	b084      	sub	sp, #16
    7200:	af00      	add	r7, sp, #0
    7202:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	681b      	ldr	r3, [r3, #0]
    7208:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    720a:	68fb      	ldr	r3, [r7, #12]
    720c:	69db      	ldr	r3, [r3, #28]
    720e:	1e5a      	subs	r2, r3, #1
    7210:	4193      	sbcs	r3, r2
    7212:	b2db      	uxtb	r3, r3
}
    7214:	0018      	movs	r0, r3
    7216:	46bd      	mov	sp, r7
    7218:	b004      	add	sp, #16
    721a:	bd80      	pop	{r7, pc}

0000721c <spi_get_config_defaults>:
{
    721c:	b580      	push	{r7, lr}
    721e:	b082      	sub	sp, #8
    7220:	af00      	add	r7, sp, #0
    7222:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	2201      	movs	r2, #1
    7228:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    722a:	687b      	ldr	r3, [r7, #4]
    722c:	2200      	movs	r2, #0
    722e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	2200      	movs	r2, #0
    7234:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	22c0      	movs	r2, #192	; 0xc0
    723a:	0392      	lsls	r2, r2, #14
    723c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    723e:	687b      	ldr	r3, [r7, #4]
    7240:	2200      	movs	r2, #0
    7242:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    7244:	687b      	ldr	r3, [r7, #4]
    7246:	2200      	movs	r2, #0
    7248:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    724a:	687b      	ldr	r3, [r7, #4]
    724c:	2201      	movs	r2, #1
    724e:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    7250:	687b      	ldr	r3, [r7, #4]
    7252:	2201      	movs	r2, #1
    7254:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    7256:	687b      	ldr	r3, [r7, #4]
    7258:	2200      	movs	r2, #0
    725a:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    725c:	687b      	ldr	r3, [r7, #4]
    725e:	2224      	movs	r2, #36	; 0x24
    7260:	2100      	movs	r1, #0
    7262:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	3318      	adds	r3, #24
    7268:	220c      	movs	r2, #12
    726a:	2100      	movs	r1, #0
    726c:	0018      	movs	r0, r3
    726e:	4b0a      	ldr	r3, [pc, #40]	; (7298 <spi_get_config_defaults+0x7c>)
    7270:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    7272:	687b      	ldr	r3, [r7, #4]
    7274:	4a09      	ldr	r2, [pc, #36]	; (729c <spi_get_config_defaults+0x80>)
    7276:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    7278:	687b      	ldr	r3, [r7, #4]
    727a:	2200      	movs	r2, #0
    727c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    727e:	687b      	ldr	r3, [r7, #4]
    7280:	2200      	movs	r2, #0
    7282:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	2200      	movs	r2, #0
    7288:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    728a:	687b      	ldr	r3, [r7, #4]
    728c:	2200      	movs	r2, #0
    728e:	635a      	str	r2, [r3, #52]	; 0x34
};
    7290:	46c0      	nop			; (mov r8, r8)
    7292:	46bd      	mov	sp, r7
    7294:	b002      	add	sp, #8
    7296:	bd80      	pop	{r7, pc}
    7298:	00009123 	.word	0x00009123
    729c:	000186a0 	.word	0x000186a0

000072a0 <spi_enable>:
{
    72a0:	b580      	push	{r7, lr}
    72a2:	b084      	sub	sp, #16
    72a4:	af00      	add	r7, sp, #0
    72a6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	681b      	ldr	r3, [r3, #0]
    72ac:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    72ae:	687b      	ldr	r3, [r7, #4]
    72b0:	681b      	ldr	r3, [r3, #0]
    72b2:	0018      	movs	r0, r3
    72b4:	4b0b      	ldr	r3, [pc, #44]	; (72e4 <spi_enable+0x44>)
    72b6:	4798      	blx	r3
    72b8:	0003      	movs	r3, r0
    72ba:	0018      	movs	r0, r3
    72bc:	4b0a      	ldr	r3, [pc, #40]	; (72e8 <spi_enable+0x48>)
    72be:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    72c0:	46c0      	nop			; (mov r8, r8)
    72c2:	687b      	ldr	r3, [r7, #4]
    72c4:	0018      	movs	r0, r3
    72c6:	4b09      	ldr	r3, [pc, #36]	; (72ec <spi_enable+0x4c>)
    72c8:	4798      	blx	r3
    72ca:	1e03      	subs	r3, r0, #0
    72cc:	d1f9      	bne.n	72c2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    72ce:	68fb      	ldr	r3, [r7, #12]
    72d0:	681b      	ldr	r3, [r3, #0]
    72d2:	2202      	movs	r2, #2
    72d4:	431a      	orrs	r2, r3
    72d6:	68fb      	ldr	r3, [r7, #12]
    72d8:	601a      	str	r2, [r3, #0]
}
    72da:	46c0      	nop			; (mov r8, r8)
    72dc:	46bd      	mov	sp, r7
    72de:	b004      	add	sp, #16
    72e0:	bd80      	pop	{r7, pc}
    72e2:	46c0      	nop			; (mov r8, r8)
    72e4:	000058bd 	.word	0x000058bd
    72e8:	00006f85 	.word	0x00006f85
    72ec:	000071fd 	.word	0x000071fd

000072f0 <at25dfx_spi_get_config_defaults>:
 *
 * \param[out] config Address of config struct to initialize.
 */
static inline void at25dfx_spi_get_config_defaults(
		struct spi_config *const config)
{
    72f0:	b580      	push	{r7, lr}
    72f2:	b082      	sub	sp, #8
    72f4:	af00      	add	r7, sp, #0
    72f6:	6078      	str	r0, [r7, #4]
	spi_get_config_defaults(config);
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	0018      	movs	r0, r3
    72fc:	4b02      	ldr	r3, [pc, #8]	; (7308 <at25dfx_spi_get_config_defaults+0x18>)
    72fe:	4798      	blx	r3
}
    7300:	46c0      	nop			; (mov r8, r8)
    7302:	46bd      	mov	sp, r7
    7304:	b002      	add	sp, #8
    7306:	bd80      	pop	{r7, pc}
    7308:	0000721d 	.word	0x0000721d

0000730c <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    730c:	b580      	push	{r7, lr}
    730e:	b086      	sub	sp, #24
    7310:	af00      	add	r7, sp, #0
    7312:	60f8      	str	r0, [r7, #12]
    7314:	60b9      	str	r1, [r7, #8]
    7316:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	781a      	ldrb	r2, [r3, #0]
    731c:	68fb      	ldr	r3, [r7, #12]
    731e:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	785a      	ldrb	r2, [r3, #1]
    7324:	68fb      	ldr	r3, [r7, #12]
    7326:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    7328:	68fb      	ldr	r3, [r7, #12]
    732a:	68ba      	ldr	r2, [r7, #8]
    732c:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    732e:	2314      	movs	r3, #20
    7330:	18fb      	adds	r3, r7, r3
    7332:	0018      	movs	r0, r3
    7334:	4b0c      	ldr	r3, [pc, #48]	; (7368 <at25dfx_chip_init+0x5c>)
    7336:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    7338:	2314      	movs	r3, #20
    733a:	18fb      	adds	r3, r7, r3
    733c:	2201      	movs	r2, #1
    733e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    7340:	68fb      	ldr	r3, [r7, #12]
    7342:	795b      	ldrb	r3, [r3, #5]
    7344:	2214      	movs	r2, #20
    7346:	18ba      	adds	r2, r7, r2
    7348:	0011      	movs	r1, r2
    734a:	0018      	movs	r0, r3
    734c:	4b07      	ldr	r3, [pc, #28]	; (736c <at25dfx_chip_init+0x60>)
    734e:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    7350:	68fb      	ldr	r3, [r7, #12]
    7352:	795b      	ldrb	r3, [r3, #5]
    7354:	2101      	movs	r1, #1
    7356:	0018      	movs	r0, r3
    7358:	4b05      	ldr	r3, [pc, #20]	; (7370 <at25dfx_chip_init+0x64>)
    735a:	4798      	blx	r3

	return STATUS_OK;
    735c:	2300      	movs	r3, #0
}
    735e:	0018      	movs	r0, r3
    7360:	46bd      	mov	sp, r7
    7362:	b006      	add	sp, #24
    7364:	bd80      	pop	{r7, pc}
    7366:	46c0      	nop			; (mov r8, r8)
    7368:	00007141 	.word	0x00007141
    736c:	00005b99 	.word	0x00005b99
    7370:	000071a9 	.word	0x000071a9

00007374 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    7374:	b580      	push	{r7, lr}
    7376:	b082      	sub	sp, #8
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
    737c:	000a      	movs	r2, r1
    737e:	1cfb      	adds	r3, r7, #3
    7380:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    7382:	687b      	ldr	r3, [r7, #4]
    7384:	7e5b      	ldrb	r3, [r3, #25]
    7386:	b2db      	uxtb	r3, r3
    7388:	b25a      	sxtb	r2, r3
    738a:	1cfb      	adds	r3, r7, #3
    738c:	781b      	ldrb	r3, [r3, #0]
    738e:	2101      	movs	r1, #1
    7390:	4099      	lsls	r1, r3
    7392:	000b      	movs	r3, r1
    7394:	b25b      	sxtb	r3, r3
    7396:	4313      	orrs	r3, r2
    7398:	b25b      	sxtb	r3, r3
    739a:	b2da      	uxtb	r2, r3
    739c:	687b      	ldr	r3, [r7, #4]
    739e:	765a      	strb	r2, [r3, #25]
}
    73a0:	46c0      	nop			; (mov r8, r8)
    73a2:	46bd      	mov	sp, r7
    73a4:	b002      	add	sp, #8
    73a6:	bd80      	pop	{r7, pc}

000073a8 <usart_is_syncing>:
{
    73a8:	b580      	push	{r7, lr}
    73aa:	b084      	sub	sp, #16
    73ac:	af00      	add	r7, sp, #0
    73ae:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    73b0:	687b      	ldr	r3, [r7, #4]
    73b2:	681b      	ldr	r3, [r3, #0]
    73b4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    73b6:	68fb      	ldr	r3, [r7, #12]
    73b8:	69db      	ldr	r3, [r3, #28]
    73ba:	1e5a      	subs	r2, r3, #1
    73bc:	4193      	sbcs	r3, r2
    73be:	b2db      	uxtb	r3, r3
}
    73c0:	0018      	movs	r0, r3
    73c2:	46bd      	mov	sp, r7
    73c4:	b004      	add	sp, #16
    73c6:	bd80      	pop	{r7, pc}

000073c8 <_usart_wait_for_sync>:
{
    73c8:	b580      	push	{r7, lr}
    73ca:	b082      	sub	sp, #8
    73cc:	af00      	add	r7, sp, #0
    73ce:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    73d0:	46c0      	nop			; (mov r8, r8)
    73d2:	687b      	ldr	r3, [r7, #4]
    73d4:	0018      	movs	r0, r3
    73d6:	4b04      	ldr	r3, [pc, #16]	; (73e8 <_usart_wait_for_sync+0x20>)
    73d8:	4798      	blx	r3
    73da:	1e03      	subs	r3, r0, #0
    73dc:	d1f9      	bne.n	73d2 <_usart_wait_for_sync+0xa>
}
    73de:	46c0      	nop			; (mov r8, r8)
    73e0:	46bd      	mov	sp, r7
    73e2:	b002      	add	sp, #8
    73e4:	bd80      	pop	{r7, pc}
    73e6:	46c0      	nop			; (mov r8, r8)
    73e8:	000073a9 	.word	0x000073a9

000073ec <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    73ec:	b580      	push	{r7, lr}
    73ee:	b082      	sub	sp, #8
    73f0:	af00      	add	r7, sp, #0
    73f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	2280      	movs	r2, #128	; 0x80
    73f8:	05d2      	lsls	r2, r2, #23
    73fa:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	2200      	movs	r2, #0
    7400:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    7402:	687b      	ldr	r3, [r7, #4]
    7404:	22ff      	movs	r2, #255	; 0xff
    7406:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    7408:	687b      	ldr	r3, [r7, #4]
    740a:	2200      	movs	r2, #0
    740c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    740e:	687b      	ldr	r3, [r7, #4]
    7410:	2200      	movs	r2, #0
    7412:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	2296      	movs	r2, #150	; 0x96
    7418:	0192      	lsls	r2, r2, #6
    741a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	2224      	movs	r2, #36	; 0x24
    7420:	2101      	movs	r1, #1
    7422:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    7424:	687b      	ldr	r3, [r7, #4]
    7426:	2225      	movs	r2, #37	; 0x25
    7428:	2101      	movs	r1, #1
    742a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    742c:	687b      	ldr	r3, [r7, #4]
    742e:	2226      	movs	r2, #38	; 0x26
    7430:	2100      	movs	r1, #0
    7432:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	2227      	movs	r2, #39	; 0x27
    7438:	2100      	movs	r1, #0
    743a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    743c:	687b      	ldr	r3, [r7, #4]
    743e:	2200      	movs	r2, #0
    7440:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    7442:	687b      	ldr	r3, [r7, #4]
    7444:	2288      	movs	r2, #136	; 0x88
    7446:	0352      	lsls	r2, r2, #13
    7448:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    744a:	687b      	ldr	r3, [r7, #4]
    744c:	222c      	movs	r2, #44	; 0x2c
    744e:	2100      	movs	r1, #0
    7450:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    7452:	687b      	ldr	r3, [r7, #4]
    7454:	222d      	movs	r2, #45	; 0x2d
    7456:	2100      	movs	r1, #0
    7458:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    745a:	687b      	ldr	r3, [r7, #4]
    745c:	2200      	movs	r2, #0
    745e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    7460:	687b      	ldr	r3, [r7, #4]
    7462:	2200      	movs	r2, #0
    7464:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    7466:	687b      	ldr	r3, [r7, #4]
    7468:	2200      	movs	r2, #0
    746a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	2200      	movs	r2, #0
    7470:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7472:	687b      	ldr	r3, [r7, #4]
    7474:	2200      	movs	r2, #0
    7476:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7478:	687b      	ldr	r3, [r7, #4]
    747a:	2200      	movs	r2, #0
    747c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    747e:	687b      	ldr	r3, [r7, #4]
    7480:	2200      	movs	r2, #0
    7482:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    7484:	687b      	ldr	r3, [r7, #4]
    7486:	2200      	movs	r2, #0
    7488:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	2200      	movs	r2, #0
    748e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    7490:	687b      	ldr	r3, [r7, #4]
    7492:	2200      	movs	r2, #0
    7494:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    7496:	687b      	ldr	r3, [r7, #4]
    7498:	2213      	movs	r2, #19
    749a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    749c:	687b      	ldr	r3, [r7, #4]
    749e:	2200      	movs	r2, #0
    74a0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    74a2:	46c0      	nop			; (mov r8, r8)
    74a4:	46bd      	mov	sp, r7
    74a6:	b002      	add	sp, #8
    74a8:	bd80      	pop	{r7, pc}
	...

000074ac <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    74ac:	b580      	push	{r7, lr}
    74ae:	b084      	sub	sp, #16
    74b0:	af00      	add	r7, sp, #0
    74b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    74b4:	687b      	ldr	r3, [r7, #4]
    74b6:	681b      	ldr	r3, [r3, #0]
    74b8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    74ba:	687b      	ldr	r3, [r7, #4]
    74bc:	681b      	ldr	r3, [r3, #0]
    74be:	0018      	movs	r0, r3
    74c0:	4b09      	ldr	r3, [pc, #36]	; (74e8 <usart_enable+0x3c>)
    74c2:	4798      	blx	r3
    74c4:	0003      	movs	r3, r0
    74c6:	0018      	movs	r0, r3
    74c8:	4b08      	ldr	r3, [pc, #32]	; (74ec <usart_enable+0x40>)
    74ca:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    74cc:	687b      	ldr	r3, [r7, #4]
    74ce:	0018      	movs	r0, r3
    74d0:	4b07      	ldr	r3, [pc, #28]	; (74f0 <usart_enable+0x44>)
    74d2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    74d4:	68fb      	ldr	r3, [r7, #12]
    74d6:	681b      	ldr	r3, [r3, #0]
    74d8:	2202      	movs	r2, #2
    74da:	431a      	orrs	r2, r3
    74dc:	68fb      	ldr	r3, [r7, #12]
    74de:	601a      	str	r2, [r3, #0]
}
    74e0:	46c0      	nop			; (mov r8, r8)
    74e2:	46bd      	mov	sp, r7
    74e4:	b004      	add	sp, #16
    74e6:	bd80      	pop	{r7, pc}
    74e8:	000058bd 	.word	0x000058bd
    74ec:	00006f85 	.word	0x00006f85
    74f0:	000073c9 	.word	0x000073c9

000074f4 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    74f4:	b580      	push	{r7, lr}
    74f6:	b084      	sub	sp, #16
    74f8:	af00      	add	r7, sp, #0
    74fa:	60f8      	str	r0, [r7, #12]
    74fc:	60b9      	str	r1, [r7, #8]
    74fe:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    7500:	687a      	ldr	r2, [r7, #4]
    7502:	68b9      	ldr	r1, [r7, #8]
    7504:	68fb      	ldr	r3, [r7, #12]
    7506:	0018      	movs	r0, r3
    7508:	4b05      	ldr	r3, [pc, #20]	; (7520 <usart_serial_init+0x2c>)
    750a:	4798      	blx	r3
    750c:	1e03      	subs	r3, r0, #0
    750e:	d101      	bne.n	7514 <usart_serial_init+0x20>
		return true;
    7510:	2301      	movs	r3, #1
    7512:	e000      	b.n	7516 <usart_serial_init+0x22>
	}
	else {
		return false;
    7514:	2300      	movs	r3, #0
	}
}
    7516:	0018      	movs	r0, r3
    7518:	46bd      	mov	sp, r7
    751a:	b004      	add	sp, #16
    751c:	bd80      	pop	{r7, pc}
    751e:	46c0      	nop			; (mov r8, r8)
    7520:	00004ec1 	.word	0x00004ec1

00007524 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    7524:	b580      	push	{r7, lr}
    7526:	b082      	sub	sp, #8
    7528:	af00      	add	r7, sp, #0
    752a:	6078      	str	r0, [r7, #4]
    752c:	000a      	movs	r2, r1
    752e:	1cfb      	adds	r3, r7, #3
    7530:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    7532:	46c0      	nop			; (mov r8, r8)
    7534:	1cfb      	adds	r3, r7, #3
    7536:	781b      	ldrb	r3, [r3, #0]
    7538:	b29a      	uxth	r2, r3
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	0011      	movs	r1, r2
    753e:	0018      	movs	r0, r3
    7540:	4b04      	ldr	r3, [pc, #16]	; (7554 <usart_serial_putchar+0x30>)
    7542:	4798      	blx	r3
    7544:	1e03      	subs	r3, r0, #0
    7546:	d1f5      	bne.n	7534 <usart_serial_putchar+0x10>

	return STATUS_OK;
    7548:	2300      	movs	r3, #0
}
    754a:	0018      	movs	r0, r3
    754c:	46bd      	mov	sp, r7
    754e:	b002      	add	sp, #8
    7550:	bd80      	pop	{r7, pc}
    7552:	46c0      	nop			; (mov r8, r8)
    7554:	00005135 	.word	0x00005135

00007558 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7558:	b580      	push	{r7, lr}
    755a:	b084      	sub	sp, #16
    755c:	af00      	add	r7, sp, #0
    755e:	6078      	str	r0, [r7, #4]
    7560:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    7562:	230e      	movs	r3, #14
    7564:	18fb      	adds	r3, r7, r3
    7566:	2200      	movs	r2, #0
    7568:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    756a:	46c0      	nop			; (mov r8, r8)
    756c:	230e      	movs	r3, #14
    756e:	18fa      	adds	r2, r7, r3
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	0011      	movs	r1, r2
    7574:	0018      	movs	r0, r3
    7576:	4b07      	ldr	r3, [pc, #28]	; (7594 <usart_serial_getchar+0x3c>)
    7578:	4798      	blx	r3
    757a:	1e03      	subs	r3, r0, #0
    757c:	d1f6      	bne.n	756c <usart_serial_getchar+0x14>

	*c = temp;
    757e:	230e      	movs	r3, #14
    7580:	18fb      	adds	r3, r7, r3
    7582:	881b      	ldrh	r3, [r3, #0]
    7584:	b2da      	uxtb	r2, r3
    7586:	683b      	ldr	r3, [r7, #0]
    7588:	701a      	strb	r2, [r3, #0]
}
    758a:	46c0      	nop			; (mov r8, r8)
    758c:	46bd      	mov	sp, r7
    758e:	b004      	add	sp, #16
    7590:	bd80      	pop	{r7, pc}
    7592:	46c0      	nop			; (mov r8, r8)
    7594:	00005199 	.word	0x00005199

00007598 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    7598:	b580      	push	{r7, lr}
    759a:	b084      	sub	sp, #16
    759c:	af00      	add	r7, sp, #0
    759e:	60f8      	str	r0, [r7, #12]
    75a0:	60b9      	str	r1, [r7, #8]
    75a2:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    75a4:	4b10      	ldr	r3, [pc, #64]	; (75e8 <stdio_serial_init+0x50>)
    75a6:	68fa      	ldr	r2, [r7, #12]
    75a8:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    75aa:	4b10      	ldr	r3, [pc, #64]	; (75ec <stdio_serial_init+0x54>)
    75ac:	4a10      	ldr	r2, [pc, #64]	; (75f0 <stdio_serial_init+0x58>)
    75ae:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    75b0:	4b10      	ldr	r3, [pc, #64]	; (75f4 <stdio_serial_init+0x5c>)
    75b2:	4a11      	ldr	r2, [pc, #68]	; (75f8 <stdio_serial_init+0x60>)
    75b4:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    75b6:	687a      	ldr	r2, [r7, #4]
    75b8:	68b9      	ldr	r1, [r7, #8]
    75ba:	68fb      	ldr	r3, [r7, #12]
    75bc:	0018      	movs	r0, r3
    75be:	4b0f      	ldr	r3, [pc, #60]	; (75fc <stdio_serial_init+0x64>)
    75c0:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    75c2:	4b0f      	ldr	r3, [pc, #60]	; (7600 <stdio_serial_init+0x68>)
    75c4:	681b      	ldr	r3, [r3, #0]
    75c6:	689b      	ldr	r3, [r3, #8]
    75c8:	2100      	movs	r1, #0
    75ca:	0018      	movs	r0, r3
    75cc:	4b0d      	ldr	r3, [pc, #52]	; (7604 <stdio_serial_init+0x6c>)
    75ce:	4798      	blx	r3
	setbuf(stdin, NULL);
    75d0:	4b0b      	ldr	r3, [pc, #44]	; (7600 <stdio_serial_init+0x68>)
    75d2:	681b      	ldr	r3, [r3, #0]
    75d4:	685b      	ldr	r3, [r3, #4]
    75d6:	2100      	movs	r1, #0
    75d8:	0018      	movs	r0, r3
    75da:	4b0a      	ldr	r3, [pc, #40]	; (7604 <stdio_serial_init+0x6c>)
    75dc:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    75de:	46c0      	nop			; (mov r8, r8)
    75e0:	46bd      	mov	sp, r7
    75e2:	b004      	add	sp, #16
    75e4:	bd80      	pop	{r7, pc}
    75e6:	46c0      	nop			; (mov r8, r8)
    75e8:	20000448 	.word	0x20000448
    75ec:	20000444 	.word	0x20000444
    75f0:	00007525 	.word	0x00007525
    75f4:	20000440 	.word	0x20000440
    75f8:	00007559 	.word	0x00007559
    75fc:	000074f5 	.word	0x000074f5
    7600:	20000078 	.word	0x20000078
    7604:	00009c91 	.word	0x00009c91

00007608 <get_gpio_pin>:
 * @param  port port to use. Either A or B
 * @param  pin  pin that's being selected. Depends on port
 * @return      value of the pin that was selected.
 */
int get_gpio_pin(char port, int pin)
{
    7608:	b590      	push	{r4, r7, lr}
    760a:	b087      	sub	sp, #28
    760c:	af02      	add	r7, sp, #8
    760e:	0002      	movs	r2, r0
    7610:	6039      	str	r1, [r7, #0]
    7612:	1dfb      	adds	r3, r7, #7
    7614:	701a      	strb	r2, [r3, #0]
	int pin_val = -1;
    7616:	2301      	movs	r3, #1
    7618:	425b      	negs	r3, r3
    761a:	60fb      	str	r3, [r7, #12]

	switch (port) {
    761c:	1dfb      	adds	r3, r7, #7
    761e:	781b      	ldrb	r3, [r3, #0]
    7620:	2b61      	cmp	r3, #97	; 0x61
    7622:	d002      	beq.n	762a <get_gpio_pin+0x22>
    7624:	2b62      	cmp	r3, #98	; 0x62
    7626:	d015      	beq.n	7654 <get_gpio_pin+0x4c>
    7628:	e028      	b.n	767c <get_gpio_pin+0x74>
	case 'a':
		switch (pin) {
    762a:	683b      	ldr	r3, [r7, #0]
    762c:	2b08      	cmp	r3, #8
    762e:	d002      	beq.n	7636 <get_gpio_pin+0x2e>
    7630:	2b09      	cmp	r3, #9
    7632:	d003      	beq.n	763c <get_gpio_pin+0x34>
    7634:	e005      	b.n	7642 <get_gpio_pin+0x3a>
		//TODO: decide which pins can be set in port A 08, 09
		case GPIO_PIN_A_1:
			pin_val = PIN_PA08;
    7636:	2308      	movs	r3, #8
    7638:	60fb      	str	r3, [r7, #12]
			break;
    763a:	e00b      	b.n	7654 <get_gpio_pin+0x4c>
		case GPIO_PIN_A_2:
			pin_val = PIN_PA09;
    763c:	2309      	movs	r3, #9
    763e:	60fb      	str	r3, [r7, #12]
			break;
    7640:	e008      	b.n	7654 <get_gpio_pin+0x4c>
		default:
			//TODO: Error codes
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    7642:	4811      	ldr	r0, [pc, #68]	; (7688 <get_gpio_pin+0x80>)
    7644:	2303      	movs	r3, #3
    7646:	9300      	str	r3, [sp, #0]
    7648:	2302      	movs	r3, #2
    764a:	2209      	movs	r2, #9
    764c:	2108      	movs	r1, #8
    764e:	4c0f      	ldr	r4, [pc, #60]	; (768c <get_gpio_pin+0x84>)
    7650:	47a0      	blx	r4
			break;
    7652:	46c0      	nop			; (mov r8, r8)
		}
	case 'b':
		switch (pin) {
    7654:	683b      	ldr	r3, [r7, #0]
    7656:	2b02      	cmp	r3, #2
    7658:	d002      	beq.n	7660 <get_gpio_pin+0x58>
    765a:	2b03      	cmp	r3, #3
    765c:	d003      	beq.n	7666 <get_gpio_pin+0x5e>
    765e:	e005      	b.n	766c <get_gpio_pin+0x64>
		case GPIO_PIN_B_1:
			pin_val = PIN_PB02;
    7660:	2322      	movs	r3, #34	; 0x22
    7662:	60fb      	str	r3, [r7, #12]
			break;
    7664:	e00a      	b.n	767c <get_gpio_pin+0x74>
		case GPIO_PIN_B_2:
			pin_val = PIN_PB03;
    7666:	2323      	movs	r3, #35	; 0x23
    7668:	60fb      	str	r3, [r7, #12]
			break;
    766a:	e007      	b.n	767c <get_gpio_pin+0x74>
		default:
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    766c:	4806      	ldr	r0, [pc, #24]	; (7688 <get_gpio_pin+0x80>)
    766e:	2303      	movs	r3, #3
    7670:	9300      	str	r3, [sp, #0]
    7672:	2302      	movs	r3, #2
    7674:	2209      	movs	r2, #9
    7676:	2108      	movs	r1, #8
    7678:	4c04      	ldr	r4, [pc, #16]	; (768c <get_gpio_pin+0x84>)
    767a:	47a0      	blx	r4
			//TODO: error codes
		}
	}
	return pin_val;
    767c:	68fb      	ldr	r3, [r7, #12]
}
    767e:	0018      	movs	r0, r3
    7680:	46bd      	mov	sp, r7
    7682:	b005      	add	sp, #20
    7684:	bd90      	pop	{r4, r7, pc}
    7686:	46c0      	nop			; (mov r8, r8)
    7688:	0000e670 	.word	0x0000e670
    768c:	00009b65 	.word	0x00009b65

00007690 <help>:

/**
 * Prints out information about the available cli commands.
 */
void help()
{
    7690:	b580      	push	{r7, lr}
    7692:	af00      	add	r7, sp, #0
	printf("help - Prints all the available commands and a short synopsis \r\n"
    7694:	4b03      	ldr	r3, [pc, #12]	; (76a4 <help+0x14>)
    7696:	0018      	movs	r0, r3
    7698:	4b03      	ldr	r3, [pc, #12]	; (76a8 <help+0x18>)
    769a:	4798      	blx	r3
	       "adc_get [port] [pin] - Get the ADC value of the given pin. \r\n"
	       "mcu_temp - Reports the temperature of the mcu in Celsius. \r\n"
	       "i2c_scan - Prints out a list connected I2C slave addresses \r\n"
		   "relay_set - turns on relay \r\n"
		   "relay_clear - turns off relay \r\n");
}
    769c:	46c0      	nop			; (mov r8, r8)
    769e:	46bd      	mov	sp, r7
    76a0:	bd80      	pop	{r7, pc}
    76a2:	46c0      	nop			; (mov r8, r8)
    76a4:	0000e69c 	.word	0x0000e69c
    76a8:	00009c59 	.word	0x00009c59

000076ac <ver_bl>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_bl()
{
    76ac:	b580      	push	{r7, lr}
    76ae:	af00      	add	r7, sp, #0
	printf("Version: %s \r\n", BL_VERSION);
    76b0:	4a04      	ldr	r2, [pc, #16]	; (76c4 <ver_bl+0x18>)
    76b2:	4b05      	ldr	r3, [pc, #20]	; (76c8 <ver_bl+0x1c>)
    76b4:	0011      	movs	r1, r2
    76b6:	0018      	movs	r0, r3
    76b8:	4b04      	ldr	r3, [pc, #16]	; (76cc <ver_bl+0x20>)
    76ba:	4798      	blx	r3
}
    76bc:	46c0      	nop			; (mov r8, r8)
    76be:	46bd      	mov	sp, r7
    76c0:	bd80      	pop	{r7, pc}
    76c2:	46c0      	nop			; (mov r8, r8)
    76c4:	0000e988 	.word	0x0000e988
    76c8:	0000e990 	.word	0x0000e990
    76cc:	00009b65 	.word	0x00009b65

000076d0 <ver_app>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_app()
{
    76d0:	b580      	push	{r7, lr}
    76d2:	af00      	add	r7, sp, #0
	printf("Version: %s \r\n", APP_VERSION);
    76d4:	4a04      	ldr	r2, [pc, #16]	; (76e8 <ver_app+0x18>)
    76d6:	4b05      	ldr	r3, [pc, #20]	; (76ec <ver_app+0x1c>)
    76d8:	0011      	movs	r1, r2
    76da:	0018      	movs	r0, r3
    76dc:	4b04      	ldr	r3, [pc, #16]	; (76f0 <ver_app+0x20>)
    76de:	4798      	blx	r3
}
    76e0:	46c0      	nop			; (mov r8, r8)
    76e2:	46bd      	mov	sp, r7
    76e4:	bd80      	pop	{r7, pc}
    76e6:	46c0      	nop			; (mov r8, r8)
    76e8:	0000e988 	.word	0x0000e988
    76ec:	0000e990 	.word	0x0000e990
    76f0:	00009b65 	.word	0x00009b65

000076f4 <gpio_set>:
 * Setting a pin pulls the voltage to a logical 1 or HIGH.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_set(char port, int pin)
{
    76f4:	b580      	push	{r7, lr}
    76f6:	b084      	sub	sp, #16
    76f8:	af00      	add	r7, sp, #0
    76fa:	0002      	movs	r2, r0
    76fc:	6039      	str	r1, [r7, #0]
    76fe:	1dfb      	adds	r3, r7, #7
    7700:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    7702:	683a      	ldr	r2, [r7, #0]
    7704:	1dfb      	adds	r3, r7, #7
    7706:	781b      	ldrb	r3, [r3, #0]
    7708:	0011      	movs	r1, r2
    770a:	0018      	movs	r0, r3
    770c:	4b0d      	ldr	r3, [pc, #52]	; (7744 <gpio_set+0x50>)
    770e:	4798      	blx	r3
    7710:	0003      	movs	r3, r0
    7712:	60fb      	str	r3, [r7, #12]

	if (pin_val != -1) {
    7714:	68fb      	ldr	r3, [r7, #12]
    7716:	3301      	adds	r3, #1
    7718:	d00f      	beq.n	773a <gpio_set+0x46>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    771a:	68fb      	ldr	r3, [r7, #12]
    771c:	0018      	movs	r0, r3
    771e:	4b0a      	ldr	r3, [pc, #40]	; (7748 <gpio_set+0x54>)
    7720:	4798      	blx	r3
		port_pin_set_output_level(pin_val, true);
    7722:	68fb      	ldr	r3, [r7, #12]
    7724:	b2db      	uxtb	r3, r3
    7726:	2101      	movs	r1, #1
    7728:	0018      	movs	r0, r3
    772a:	4b08      	ldr	r3, [pc, #32]	; (774c <gpio_set+0x58>)
    772c:	4798      	blx	r3

		printf("Pin %d set high\r\n", pin_val);
    772e:	68fa      	ldr	r2, [r7, #12]
    7730:	4b07      	ldr	r3, [pc, #28]	; (7750 <gpio_set+0x5c>)
    7732:	0011      	movs	r1, r2
    7734:	0018      	movs	r0, r3
    7736:	4b07      	ldr	r3, [pc, #28]	; (7754 <gpio_set+0x60>)
    7738:	4798      	blx	r3
	}
}
    773a:	46c0      	nop			; (mov r8, r8)
    773c:	46bd      	mov	sp, r7
    773e:	b004      	add	sp, #16
    7740:	bd80      	pop	{r7, pc}
    7742:	46c0      	nop			; (mov r8, r8)
    7744:	00007609 	.word	0x00007609
    7748:	00008909 	.word	0x00008909
    774c:	000071a9 	.word	0x000071a9
    7750:	0000e9a0 	.word	0x0000e9a0
    7754:	00009b65 	.word	0x00009b65

00007758 <gpio_clear>:
 * Setting a pin pulls the voltage to a logical 0 or LOW.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_clear(char port, int pin)
{
    7758:	b580      	push	{r7, lr}
    775a:	b084      	sub	sp, #16
    775c:	af00      	add	r7, sp, #0
    775e:	0002      	movs	r2, r0
    7760:	6039      	str	r1, [r7, #0]
    7762:	1dfb      	adds	r3, r7, #7
    7764:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    7766:	683a      	ldr	r2, [r7, #0]
    7768:	1dfb      	adds	r3, r7, #7
    776a:	781b      	ldrb	r3, [r3, #0]
    776c:	0011      	movs	r1, r2
    776e:	0018      	movs	r0, r3
    7770:	4b0d      	ldr	r3, [pc, #52]	; (77a8 <gpio_clear+0x50>)
    7772:	4798      	blx	r3
    7774:	0003      	movs	r3, r0
    7776:	60fb      	str	r3, [r7, #12]

	if (pin_val != -1) {
    7778:	68fb      	ldr	r3, [r7, #12]
    777a:	3301      	adds	r3, #1
    777c:	d00f      	beq.n	779e <gpio_clear+0x46>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    777e:	68fb      	ldr	r3, [r7, #12]
    7780:	0018      	movs	r0, r3
    7782:	4b0a      	ldr	r3, [pc, #40]	; (77ac <gpio_clear+0x54>)
    7784:	4798      	blx	r3
		port_pin_set_output_level(pin_val, 0);
    7786:	68fb      	ldr	r3, [r7, #12]
    7788:	b2db      	uxtb	r3, r3
    778a:	2100      	movs	r1, #0
    778c:	0018      	movs	r0, r3
    778e:	4b08      	ldr	r3, [pc, #32]	; (77b0 <gpio_clear+0x58>)
    7790:	4798      	blx	r3

		printf("Pin %d cleared\r\n", pin_val);
    7792:	68fa      	ldr	r2, [r7, #12]
    7794:	4b07      	ldr	r3, [pc, #28]	; (77b4 <gpio_clear+0x5c>)
    7796:	0011      	movs	r1, r2
    7798:	0018      	movs	r0, r3
    779a:	4b07      	ldr	r3, [pc, #28]	; (77b8 <gpio_clear+0x60>)
    779c:	4798      	blx	r3
	}
}
    779e:	46c0      	nop			; (mov r8, r8)
    77a0:	46bd      	mov	sp, r7
    77a2:	b004      	add	sp, #16
    77a4:	bd80      	pop	{r7, pc}
    77a6:	46c0      	nop			; (mov r8, r8)
    77a8:	00007609 	.word	0x00007609
    77ac:	00008909 	.word	0x00008909
    77b0:	000071a9 	.word	0x000071a9
    77b4:	0000e9b4 	.word	0x0000e9b4
    77b8:	00009b65 	.word	0x00009b65

000077bc <gpio_get>:
 * Will either be logical 0 or 1.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_get(char port, int pin)
{
    77bc:	b580      	push	{r7, lr}
    77be:	b084      	sub	sp, #16
    77c0:	af00      	add	r7, sp, #0
    77c2:	0002      	movs	r2, r0
    77c4:	6039      	str	r1, [r7, #0]
    77c6:	1dfb      	adds	r3, r7, #7
    77c8:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    77ca:	683a      	ldr	r2, [r7, #0]
    77cc:	1dfb      	adds	r3, r7, #7
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	0011      	movs	r1, r2
    77d2:	0018      	movs	r0, r3
    77d4:	4b0c      	ldr	r3, [pc, #48]	; (7808 <gpio_get+0x4c>)
    77d6:	4798      	blx	r3
    77d8:	0003      	movs	r3, r0
    77da:	60fb      	str	r3, [r7, #12]

	configure_port_pins_get(pin_val); //TODO: decide if this is necessary
    77dc:	68fb      	ldr	r3, [r7, #12]
    77de:	0018      	movs	r0, r3
    77e0:	4b0a      	ldr	r3, [pc, #40]	; (780c <gpio_get+0x50>)
    77e2:	4798      	blx	r3
	int state = port_pin_get_input_level(pin_val);
    77e4:	68fb      	ldr	r3, [r7, #12]
    77e6:	b2db      	uxtb	r3, r3
    77e8:	0018      	movs	r0, r3
    77ea:	4b09      	ldr	r3, [pc, #36]	; (7810 <gpio_get+0x54>)
    77ec:	4798      	blx	r3
    77ee:	0003      	movs	r3, r0
    77f0:	60bb      	str	r3, [r7, #8]
	printf("pin %d value: %d\r\n", pin_val, state);
    77f2:	68ba      	ldr	r2, [r7, #8]
    77f4:	68f9      	ldr	r1, [r7, #12]
    77f6:	4b07      	ldr	r3, [pc, #28]	; (7814 <gpio_get+0x58>)
    77f8:	0018      	movs	r0, r3
    77fa:	4b07      	ldr	r3, [pc, #28]	; (7818 <gpio_get+0x5c>)
    77fc:	4798      	blx	r3
}
    77fe:	46c0      	nop			; (mov r8, r8)
    7800:	46bd      	mov	sp, r7
    7802:	b004      	add	sp, #16
    7804:	bd80      	pop	{r7, pc}
    7806:	46c0      	nop			; (mov r8, r8)
    7808:	00007609 	.word	0x00007609
    780c:	00008945 	.word	0x00008945
    7810:	00007165 	.word	0x00007165
    7814:	0000e9c8 	.word	0x0000e9c8
    7818:	00009b65 	.word	0x00009b65

0000781c <mac>:
 * Prints the MAC address of the Wi-Fi chip.
 *
 * For more information on MAC addresses, see <a href="https://en.wikipedia.org/wiki/MAC_address">Wikipedia</a>
 */
void mac()
{
    781c:	b580      	push	{r7, lr}
    781e:	af00      	add	r7, sp, #0
	printf("00.00.00.00\r\n");
    7820:	4b03      	ldr	r3, [pc, #12]	; (7830 <mac+0x14>)
    7822:	0018      	movs	r0, r3
    7824:	4b03      	ldr	r3, [pc, #12]	; (7834 <mac+0x18>)
    7826:	4798      	blx	r3
}
    7828:	46c0      	nop			; (mov r8, r8)
    782a:	46bd      	mov	sp, r7
    782c:	bd80      	pop	{r7, pc}
    782e:	46c0      	nop			; (mov r8, r8)
    7830:	0000e9dc 	.word	0x0000e9dc
    7834:	00009c59 	.word	0x00009c59

00007838 <ip>:
 * Prints the IP address of the Wi-Fi chip.
 *
 * @note Currently this only returns a dummy IP address and will need to be updated.
 */
void ip()
{
    7838:	b580      	push	{r7, lr}
    783a:	af00      	add	r7, sp, #0
	printf("255.255.255.255 \r\n");
    783c:	4b03      	ldr	r3, [pc, #12]	; (784c <ip+0x14>)
    783e:	0018      	movs	r0, r3
    7840:	4b03      	ldr	r3, [pc, #12]	; (7850 <ip+0x18>)
    7842:	4798      	blx	r3
}
    7844:	46c0      	nop			; (mov r8, r8)
    7846:	46bd      	mov	sp, r7
    7848:	bd80      	pop	{r7, pc}
    784a:	46c0      	nop			; (mov r8, r8)
    784c:	0000e9ec 	.word	0x0000e9ec
    7850:	00009c59 	.word	0x00009c59

00007854 <read_sensor>:
 * @param sensor_name name of the sensor to read from
 * @param readings    number of readings to do
 * @param interval_ms how many milliseconds to wait between readings
 */
void read_sensor(char *sensor_name, int readings, int interval_ms)
{
    7854:	b590      	push	{r4, r7, lr}
    7856:	b08f      	sub	sp, #60	; 0x3c
    7858:	af02      	add	r7, sp, #8
    785a:	60f8      	str	r0, [r7, #12]
    785c:	60b9      	str	r1, [r7, #8]
    785e:	607a      	str	r2, [r7, #4]
	//TODO: check for values greater than 0 for readings and interval_ms
	static uint8_t read_buffer[10];
	
	if(!strcmp("lux", sensor_name)) {
    7860:	68fa      	ldr	r2, [r7, #12]
    7862:	4b2d      	ldr	r3, [pc, #180]	; (7918 <read_sensor+0xc4>)
    7864:	0011      	movs	r1, r2
    7866:	0018      	movs	r0, r3
    7868:	4b2c      	ldr	r3, [pc, #176]	; (791c <read_sensor+0xc8>)
    786a:	4798      	blx	r3
    786c:	1e03      	subs	r3, r0, #0
    786e:	d10b      	bne.n	7888 <read_sensor+0x34>
		tsl2561_init();
    7870:	4b2b      	ldr	r3, [pc, #172]	; (7920 <read_sensor+0xcc>)
    7872:	4798      	blx	r3
		uint32_t lux_value = getLuminosity();
    7874:	4b2b      	ldr	r3, [pc, #172]	; (7924 <read_sensor+0xd0>)
    7876:	4798      	blx	r3
    7878:	0003      	movs	r3, r0
    787a:	62fb      	str	r3, [r7, #44]	; 0x2c
		printf("Current lux: %d\r\n", lux_value);
    787c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    787e:	4b2a      	ldr	r3, [pc, #168]	; (7928 <read_sensor+0xd4>)
    7880:	0011      	movs	r1, r2
    7882:	0018      	movs	r0, r3
    7884:	4b29      	ldr	r3, [pc, #164]	; (792c <read_sensor+0xd8>)
    7886:	4798      	blx	r3
	}
	
	if(!strcmp("temp", sensor_name)) {
    7888:	68fa      	ldr	r2, [r7, #12]
    788a:	4b29      	ldr	r3, [pc, #164]	; (7930 <read_sensor+0xdc>)
    788c:	0011      	movs	r1, r2
    788e:	0018      	movs	r0, r3
    7890:	4b22      	ldr	r3, [pc, #136]	; (791c <read_sensor+0xc8>)
    7892:	4798      	blx	r3
    7894:	1e03      	subs	r3, r0, #0
    7896:	d124      	bne.n	78e2 <read_sensor+0x8e>
		double temperature = 0;
    7898:	2300      	movs	r3, #0
    789a:	2400      	movs	r4, #0
    789c:	61bb      	str	r3, [r7, #24]
    789e:	61fc      	str	r4, [r7, #28]
		double humidity = 0;
    78a0:	2300      	movs	r3, #0
    78a2:	2400      	movs	r4, #0
    78a4:	613b      	str	r3, [r7, #16]
    78a6:	617c      	str	r4, [r7, #20]
		int errorcode = hdc1080_measure(&temperature, &humidity);
    78a8:	2310      	movs	r3, #16
    78aa:	18fa      	adds	r2, r7, r3
    78ac:	2318      	movs	r3, #24
    78ae:	18fb      	adds	r3, r7, r3
    78b0:	0011      	movs	r1, r2
    78b2:	0018      	movs	r0, r3
    78b4:	4b1f      	ldr	r3, [pc, #124]	; (7934 <read_sensor+0xe0>)
    78b6:	4798      	blx	r3
    78b8:	0003      	movs	r3, r0
    78ba:	62bb      	str	r3, [r7, #40]	; 0x28
		if (errorcode) printf("Error reading HDC1080\r\n");
    78bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    78be:	2b00      	cmp	r3, #0
    78c0:	d004      	beq.n	78cc <read_sensor+0x78>
    78c2:	4b1d      	ldr	r3, [pc, #116]	; (7938 <read_sensor+0xe4>)
    78c4:	0018      	movs	r0, r3
    78c6:	4b1d      	ldr	r3, [pc, #116]	; (793c <read_sensor+0xe8>)
    78c8:	4798      	blx	r3
    78ca:	e00a      	b.n	78e2 <read_sensor+0x8e>
		else printf("Current temperature: %d\r\n Current humidity: %d\r\n", temperature, humidity);
    78cc:	69b9      	ldr	r1, [r7, #24]
    78ce:	69fa      	ldr	r2, [r7, #28]
    78d0:	693b      	ldr	r3, [r7, #16]
    78d2:	697c      	ldr	r4, [r7, #20]
    78d4:	481a      	ldr	r0, [pc, #104]	; (7940 <read_sensor+0xec>)
    78d6:	9300      	str	r3, [sp, #0]
    78d8:	9401      	str	r4, [sp, #4]
    78da:	0013      	movs	r3, r2
    78dc:	000a      	movs	r2, r1
    78de:	4913      	ldr	r1, [pc, #76]	; (792c <read_sensor+0xd8>)
    78e0:	4788      	blx	r1
	}
	
		
	
	if(!strcmp("moisture", sensor_name)) {
    78e2:	68fa      	ldr	r2, [r7, #12]
    78e4:	4b17      	ldr	r3, [pc, #92]	; (7944 <read_sensor+0xf0>)
    78e6:	0011      	movs	r1, r2
    78e8:	0018      	movs	r0, r3
    78ea:	4b0c      	ldr	r3, [pc, #48]	; (791c <read_sensor+0xc8>)
    78ec:	4798      	blx	r3
    78ee:	1e03      	subs	r3, r0, #0
    78f0:	d10e      	bne.n	7910 <read_sensor+0xbc>
		
		float m_value = get_moisture();
    78f2:	4b15      	ldr	r3, [pc, #84]	; (7948 <read_sensor+0xf4>)
    78f4:	4798      	blx	r3
    78f6:	1c03      	adds	r3, r0, #0
    78f8:	627b      	str	r3, [r7, #36]	; 0x24
		
		printf("Current moisture: %.02f %% \r\n", m_value);
    78fa:	4b14      	ldr	r3, [pc, #80]	; (794c <read_sensor+0xf8>)
    78fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    78fe:	4798      	blx	r3
    7900:	0003      	movs	r3, r0
    7902:	000c      	movs	r4, r1
    7904:	4912      	ldr	r1, [pc, #72]	; (7950 <read_sensor+0xfc>)
    7906:	001a      	movs	r2, r3
    7908:	0023      	movs	r3, r4
    790a:	0008      	movs	r0, r1
    790c:	4907      	ldr	r1, [pc, #28]	; (792c <read_sensor+0xd8>)
    790e:	4788      	blx	r1
	}
}
    7910:	46c0      	nop			; (mov r8, r8)
    7912:	46bd      	mov	sp, r7
    7914:	b00d      	add	sp, #52	; 0x34
    7916:	bd90      	pop	{r4, r7, pc}
    7918:	0000ea00 	.word	0x0000ea00
    791c:	00009dfd 	.word	0x00009dfd
    7920:	000026d5 	.word	0x000026d5
    7924:	00002865 	.word	0x00002865
    7928:	0000ea04 	.word	0x0000ea04
    792c:	00009b65 	.word	0x00009b65
    7930:	0000ea18 	.word	0x0000ea18
    7934:	00002265 	.word	0x00002265
    7938:	0000ea20 	.word	0x0000ea20
    793c:	00009c59 	.word	0x00009c59
    7940:	0000ea38 	.word	0x0000ea38
    7944:	0000ea6c 	.word	0x0000ea6c
    7948:	00007ae1 	.word	0x00007ae1
    794c:	0000e1c1 	.word	0x0000e1c1
    7950:	0000ea78 	.word	0x0000ea78

00007954 <adc_get>:
 *
 * @param port port to read from. Only accepts a currently.
 * @param pin  pin to read from. Only accepts 02 currently.
 */
void adc_get(char port, int pin)
{
    7954:	b5b0      	push	{r4, r5, r7, lr}
    7956:	b08a      	sub	sp, #40	; 0x28
    7958:	af02      	add	r7, sp, #8
    795a:	0002      	movs	r2, r0
    795c:	6039      	str	r1, [r7, #0]
    795e:	1dfb      	adds	r3, r7, #7
    7960:	701a      	strb	r2, [r3, #0]
	int pin_val = -1;
    7962:	2301      	movs	r3, #1
    7964:	425b      	negs	r3, r3
    7966:	61fb      	str	r3, [r7, #28]

	switch (port) {
    7968:	1dfb      	adds	r3, r7, #7
    796a:	781b      	ldrb	r3, [r3, #0]
    796c:	2b61      	cmp	r3, #97	; 0x61
    796e:	d11e      	bne.n	79ae <adc_get+0x5a>
		case ADC_PORT:
			switch (pin) {
    7970:	683b      	ldr	r3, [r7, #0]
    7972:	2b02      	cmp	r3, #2
    7974:	d102      	bne.n	797c <adc_get+0x28>
				case ADC_PIN:
					pin_val = ADC_POSITIVE_INPUT_PIN0;
    7976:	2300      	movs	r3, #0
    7978:	61fb      	str	r3, [r7, #28]
					break;
    797a:	e017      	b.n	79ac <adc_get+0x58>
				default:
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    797c:	2361      	movs	r3, #97	; 0x61
    797e:	61bb      	str	r3, [r7, #24]
    7980:	4b46      	ldr	r3, [pc, #280]	; (7a9c <adc_get+0x148>)
    7982:	4798      	blx	r3
    7984:	0002      	movs	r2, r0
    7986:	69bb      	ldr	r3, [r7, #24]
    7988:	3301      	adds	r3, #1
    798a:	18d3      	adds	r3, r2, r3
    798c:	781b      	ldrb	r3, [r3, #0]
    798e:	001a      	movs	r2, r3
    7990:	2303      	movs	r3, #3
    7992:	4013      	ands	r3, r2
    7994:	2b02      	cmp	r3, #2
    7996:	d102      	bne.n	799e <adc_get+0x4a>
    7998:	69bb      	ldr	r3, [r7, #24]
    799a:	3b20      	subs	r3, #32
    799c:	e000      	b.n	79a0 <adc_get+0x4c>
    799e:	69bb      	ldr	r3, [r7, #24]
    79a0:	483f      	ldr	r0, [pc, #252]	; (7aa0 <adc_get+0x14c>)
    79a2:	2202      	movs	r2, #2
    79a4:	0019      	movs	r1, r3
    79a6:	4b3f      	ldr	r3, [pc, #252]	; (7aa4 <adc_get+0x150>)
    79a8:	4798      	blx	r3
					break;
    79aa:	46c0      	nop			; (mov r8, r8)
			}
			break;
    79ac:	e017      	b.n	79de <adc_get+0x8a>
		default:
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    79ae:	2361      	movs	r3, #97	; 0x61
    79b0:	617b      	str	r3, [r7, #20]
    79b2:	4b3a      	ldr	r3, [pc, #232]	; (7a9c <adc_get+0x148>)
    79b4:	4798      	blx	r3
    79b6:	0002      	movs	r2, r0
    79b8:	697b      	ldr	r3, [r7, #20]
    79ba:	3301      	adds	r3, #1
    79bc:	18d3      	adds	r3, r2, r3
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	001a      	movs	r2, r3
    79c2:	2303      	movs	r3, #3
    79c4:	4013      	ands	r3, r2
    79c6:	2b02      	cmp	r3, #2
    79c8:	d102      	bne.n	79d0 <adc_get+0x7c>
    79ca:	697b      	ldr	r3, [r7, #20]
    79cc:	3b20      	subs	r3, #32
    79ce:	e000      	b.n	79d2 <adc_get+0x7e>
    79d0:	697b      	ldr	r3, [r7, #20]
    79d2:	4835      	ldr	r0, [pc, #212]	; (7aa8 <adc_get+0x154>)
    79d4:	2202      	movs	r2, #2
    79d6:	0019      	movs	r1, r3
    79d8:	4b32      	ldr	r3, [pc, #200]	; (7aa4 <adc_get+0x150>)
    79da:	4798      	blx	r3
			break;
    79dc:	46c0      	nop			; (mov r8, r8)
	}
	
	if (pin_val != -1) {
    79de:	69fb      	ldr	r3, [r7, #28]
    79e0:	3301      	adds	r3, #1
    79e2:	d056      	beq.n	7a92 <adc_get+0x13e>
		configure_adc(pin_val);
    79e4:	69fb      	ldr	r3, [r7, #28]
    79e6:	0018      	movs	r0, r3
    79e8:	4b30      	ldr	r3, [pc, #192]	; (7aac <adc_get+0x158>)
    79ea:	4798      	blx	r3
		uint16_t adc_result;
		adc_start_conversion(&adc_instance);
    79ec:	4b30      	ldr	r3, [pc, #192]	; (7ab0 <adc_get+0x15c>)
    79ee:	0018      	movs	r0, r3
    79f0:	4b30      	ldr	r3, [pc, #192]	; (7ab4 <adc_get+0x160>)
    79f2:	4798      	blx	r3
		/* Wait for conversion to be done and read out result */
		do {
		} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    79f4:	230c      	movs	r3, #12
    79f6:	18fa      	adds	r2, r7, r3
    79f8:	4b2d      	ldr	r3, [pc, #180]	; (7ab0 <adc_get+0x15c>)
    79fa:	0011      	movs	r1, r2
    79fc:	0018      	movs	r0, r3
    79fe:	4b2e      	ldr	r3, [pc, #184]	; (7ab8 <adc_get+0x164>)
    7a00:	4798      	blx	r3
    7a02:	0003      	movs	r3, r0
    7a04:	2b05      	cmp	r3, #5
    7a06:	d0f5      	beq.n	79f4 <adc_get+0xa0>
		float voltage = (adc_result/4095.0)*1.65; //TODO: set values, NO MAGIC NUMBERS
    7a08:	230c      	movs	r3, #12
    7a0a:	18fb      	adds	r3, r7, r3
    7a0c:	881b      	ldrh	r3, [r3, #0]
    7a0e:	001a      	movs	r2, r3
    7a10:	4b2a      	ldr	r3, [pc, #168]	; (7abc <adc_get+0x168>)
    7a12:	0010      	movs	r0, r2
    7a14:	4798      	blx	r3
    7a16:	4c2a      	ldr	r4, [pc, #168]	; (7ac0 <adc_get+0x16c>)
    7a18:	2200      	movs	r2, #0
    7a1a:	4b2a      	ldr	r3, [pc, #168]	; (7ac4 <adc_get+0x170>)
    7a1c:	47a0      	blx	r4
    7a1e:	0003      	movs	r3, r0
    7a20:	000c      	movs	r4, r1
    7a22:	0018      	movs	r0, r3
    7a24:	0021      	movs	r1, r4
    7a26:	4c28      	ldr	r4, [pc, #160]	; (7ac8 <adc_get+0x174>)
    7a28:	4a28      	ldr	r2, [pc, #160]	; (7acc <adc_get+0x178>)
    7a2a:	4b29      	ldr	r3, [pc, #164]	; (7ad0 <adc_get+0x17c>)
    7a2c:	47a0      	blx	r4
    7a2e:	0003      	movs	r3, r0
    7a30:	000c      	movs	r4, r1
    7a32:	0019      	movs	r1, r3
    7a34:	0022      	movs	r2, r4
    7a36:	4b27      	ldr	r3, [pc, #156]	; (7ad4 <adc_get+0x180>)
    7a38:	0008      	movs	r0, r1
    7a3a:	0011      	movs	r1, r2
    7a3c:	4798      	blx	r3
    7a3e:	1c03      	adds	r3, r0, #0
    7a40:	613b      	str	r3, [r7, #16]
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    7a42:	230f      	movs	r3, #15
    7a44:	18fb      	adds	r3, r7, r3
    7a46:	1dfa      	adds	r2, r7, #7
    7a48:	7812      	ldrb	r2, [r2, #0]
    7a4a:	701a      	strb	r2, [r3, #0]
    7a4c:	4b13      	ldr	r3, [pc, #76]	; (7a9c <adc_get+0x148>)
    7a4e:	4798      	blx	r3
    7a50:	0002      	movs	r2, r0
    7a52:	230f      	movs	r3, #15
    7a54:	18fb      	adds	r3, r7, r3
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	3301      	adds	r3, #1
    7a5a:	18d3      	adds	r3, r2, r3
    7a5c:	781b      	ldrb	r3, [r3, #0]
    7a5e:	001a      	movs	r2, r3
    7a60:	2303      	movs	r3, #3
    7a62:	4013      	ands	r3, r2
    7a64:	2b02      	cmp	r3, #2
    7a66:	d105      	bne.n	7a74 <adc_get+0x120>
    7a68:	230f      	movs	r3, #15
    7a6a:	18fb      	adds	r3, r7, r3
    7a6c:	781b      	ldrb	r3, [r3, #0]
    7a6e:	3b20      	subs	r3, #32
    7a70:	001d      	movs	r5, r3
    7a72:	e002      	b.n	7a7a <adc_get+0x126>
    7a74:	230f      	movs	r3, #15
    7a76:	18fb      	adds	r3, r7, r3
    7a78:	781d      	ldrb	r5, [r3, #0]
    7a7a:	4b17      	ldr	r3, [pc, #92]	; (7ad8 <adc_get+0x184>)
    7a7c:	6938      	ldr	r0, [r7, #16]
    7a7e:	4798      	blx	r3
    7a80:	0003      	movs	r3, r0
    7a82:	000c      	movs	r4, r1
    7a84:	69fa      	ldr	r2, [r7, #28]
    7a86:	4815      	ldr	r0, [pc, #84]	; (7adc <adc_get+0x188>)
    7a88:	9300      	str	r3, [sp, #0]
    7a8a:	9401      	str	r4, [sp, #4]
    7a8c:	0029      	movs	r1, r5
    7a8e:	4b05      	ldr	r3, [pc, #20]	; (7aa4 <adc_get+0x150>)
    7a90:	4798      	blx	r3
	}
}
    7a92:	46c0      	nop			; (mov r8, r8)
    7a94:	46bd      	mov	sp, r7
    7a96:	b008      	add	sp, #32
    7a98:	bdb0      	pop	{r4, r5, r7, pc}
    7a9a:	46c0      	nop			; (mov r8, r8)
    7a9c:	000090bd 	.word	0x000090bd
    7aa0:	0000ea98 	.word	0x0000ea98
    7aa4:	00009b65 	.word	0x00009b65
    7aa8:	0000eae8 	.word	0x0000eae8
    7aac:	000088a9 	.word	0x000088a9
    7ab0:	20000438 	.word	0x20000438
    7ab4:	00006ec1 	.word	0x00006ec1
    7ab8:	00006f09 	.word	0x00006f09
    7abc:	0000e0cd 	.word	0x0000e0cd
    7ac0:	0000cc91 	.word	0x0000cc91
    7ac4:	40affe00 	.word	0x40affe00
    7ac8:	0000d4f9 	.word	0x0000d4f9
    7acc:	66666666 	.word	0x66666666
    7ad0:	3ffa6666 	.word	0x3ffa6666
    7ad4:	0000e265 	.word	0x0000e265
    7ad8:	0000e1c1 	.word	0x0000e1c1
    7adc:	0000eb38 	.word	0x0000eb38

00007ae0 <get_moisture>:
/* Gets the moisture value from SEN13322
*
*/
//TODO Set reference value
float get_moisture(void)
{
    7ae0:	b580      	push	{r7, lr}
    7ae2:	b082      	sub	sp, #8
    7ae4:	af00      	add	r7, sp, #0
	// turn on sensor
	configure_port_pins_set(PIN_PA17);
    7ae6:	2011      	movs	r0, #17
    7ae8:	4b19      	ldr	r3, [pc, #100]	; (7b50 <get_moisture+0x70>)
    7aea:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA17, true);
    7aec:	2101      	movs	r1, #1
    7aee:	2011      	movs	r0, #17
    7af0:	4b18      	ldr	r3, [pc, #96]	; (7b54 <get_moisture+0x74>)
    7af2:	4798      	blx	r3
	
	delay_ms(500);
    7af4:	23fa      	movs	r3, #250	; 0xfa
    7af6:	005b      	lsls	r3, r3, #1
    7af8:	0018      	movs	r0, r3
    7afa:	4b17      	ldr	r3, [pc, #92]	; (7b58 <get_moisture+0x78>)
    7afc:	4798      	blx	r3
	
	// read ADC
	uint16_t adc_result;
	adc_start_conversion(&adc_instance);
    7afe:	4b17      	ldr	r3, [pc, #92]	; (7b5c <get_moisture+0x7c>)
    7b00:	0018      	movs	r0, r3
    7b02:	4b17      	ldr	r3, [pc, #92]	; (7b60 <get_moisture+0x80>)
    7b04:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    7b06:	1cba      	adds	r2, r7, #2
    7b08:	4b14      	ldr	r3, [pc, #80]	; (7b5c <get_moisture+0x7c>)
    7b0a:	0011      	movs	r1, r2
    7b0c:	0018      	movs	r0, r3
    7b0e:	4b15      	ldr	r3, [pc, #84]	; (7b64 <get_moisture+0x84>)
    7b10:	4798      	blx	r3
    7b12:	0003      	movs	r3, r0
    7b14:	2b05      	cmp	r3, #5
    7b16:	d0f6      	beq.n	7b06 <get_moisture+0x26>
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
    7b18:	1cbb      	adds	r3, r7, #2
    7b1a:	881b      	ldrh	r3, [r3, #0]
    7b1c:	001a      	movs	r2, r3
    7b1e:	4b12      	ldr	r3, [pc, #72]	; (7b68 <get_moisture+0x88>)
    7b20:	0010      	movs	r0, r2
    7b22:	4798      	blx	r3
    7b24:	1c02      	adds	r2, r0, #0
    7b26:	4b11      	ldr	r3, [pc, #68]	; (7b6c <get_moisture+0x8c>)
    7b28:	4911      	ldr	r1, [pc, #68]	; (7b70 <get_moisture+0x90>)
    7b2a:	1c10      	adds	r0, r2, #0
    7b2c:	4798      	blx	r3
    7b2e:	1c03      	adds	r3, r0, #0
    7b30:	1c1a      	adds	r2, r3, #0
    7b32:	4b10      	ldr	r3, [pc, #64]	; (7b74 <get_moisture+0x94>)
    7b34:	4910      	ldr	r1, [pc, #64]	; (7b78 <get_moisture+0x98>)
    7b36:	1c10      	adds	r0, r2, #0
    7b38:	4798      	blx	r3
    7b3a:	1c03      	adds	r3, r0, #0
    7b3c:	607b      	str	r3, [r7, #4]
	
	//turn off sensor
	port_pin_set_output_level(PIN_PA17, false);
    7b3e:	2100      	movs	r1, #0
    7b40:	2011      	movs	r0, #17
    7b42:	4b04      	ldr	r3, [pc, #16]	; (7b54 <get_moisture+0x74>)
    7b44:	4798      	blx	r3
	

	return moisture;
    7b46:	687b      	ldr	r3, [r7, #4]

	
}
    7b48:	1c18      	adds	r0, r3, #0
    7b4a:	46bd      	mov	sp, r7
    7b4c:	b002      	add	sp, #8
    7b4e:	bd80      	pop	{r7, pc}
    7b50:	00008909 	.word	0x00008909
    7b54:	000071a9 	.word	0x000071a9
    7b58:	00002961 	.word	0x00002961
    7b5c:	20000438 	.word	0x20000438
    7b60:	00006ec1 	.word	0x00006ec1
    7b64:	00006f09 	.word	0x00006f09
    7b68:	0000c545 	.word	0x0000c545
    7b6c:	0000c075 	.word	0x0000c075
    7b70:	457ff000 	.word	0x457ff000
    7b74:	0000c305 	.word	0x0000c305
    7b78:	42c80000 	.word	0x42c80000

00007b7c <mcu_temp>:
 *
 * See the <a href="http://asf.atmel.com/docs/3.21.0/samd21/html/group__asfdoc__sam0__at30tse75x__group.html">board documentation</a> for more information.
 */
//TODO: Use the ASF temp sensor library instead.
void mcu_temp()
{
    7b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b7e:	b085      	sub	sp, #20
    7b80:	af00      	add	r7, sp, #0
	int pin = ADC_POSITIVE_INPUT_TEMP;
    7b82:	2318      	movs	r3, #24
    7b84:	607b      	str	r3, [r7, #4]
	uint16_t adc_result;
	configure_adc(pin);
    7b86:	687b      	ldr	r3, [r7, #4]
    7b88:	0018      	movs	r0, r3
    7b8a:	4b36      	ldr	r3, [pc, #216]	; (7c64 <mcu_temp+0xe8>)
    7b8c:	4798      	blx	r3

	adc_start_conversion(&adc_instance);
    7b8e:	4b36      	ldr	r3, [pc, #216]	; (7c68 <mcu_temp+0xec>)
    7b90:	0018      	movs	r0, r3
    7b92:	4b36      	ldr	r3, [pc, #216]	; (7c6c <mcu_temp+0xf0>)
    7b94:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    7b96:	003a      	movs	r2, r7
    7b98:	4b33      	ldr	r3, [pc, #204]	; (7c68 <mcu_temp+0xec>)
    7b9a:	0011      	movs	r1, r2
    7b9c:	0018      	movs	r0, r3
    7b9e:	4b34      	ldr	r3, [pc, #208]	; (7c70 <mcu_temp+0xf4>)
    7ba0:	4798      	blx	r3
    7ba2:	0003      	movs	r3, r0
    7ba4:	2b05      	cmp	r3, #5
    7ba6:	d0f6      	beq.n	7b96 <mcu_temp+0x1a>
	
	//Equation found here: https://github.com/jrowberg/i2cdevlib/pull/59/files
	double temperature;
	if((adc_result & 0x8000) == 0) {
    7ba8:	003b      	movs	r3, r7
    7baa:	881b      	ldrh	r3, [r3, #0]
    7bac:	b21b      	sxth	r3, r3
    7bae:	2b00      	cmp	r3, #0
    7bb0:	db22      	blt.n	7bf8 <mcu_temp+0x7c>
      temperature = (adc_result >> 8) + ((adc_result & 0x00F0)>>4)*0.5;
    7bb2:	003b      	movs	r3, r7
    7bb4:	881b      	ldrh	r3, [r3, #0]
    7bb6:	0a1b      	lsrs	r3, r3, #8
    7bb8:	b29b      	uxth	r3, r3
    7bba:	001a      	movs	r2, r3
    7bbc:	4b2d      	ldr	r3, [pc, #180]	; (7c74 <mcu_temp+0xf8>)
    7bbe:	0010      	movs	r0, r2
    7bc0:	4798      	blx	r3
    7bc2:	0005      	movs	r5, r0
    7bc4:	000e      	movs	r6, r1
    7bc6:	003b      	movs	r3, r7
    7bc8:	881b      	ldrh	r3, [r3, #0]
    7bca:	111b      	asrs	r3, r3, #4
    7bcc:	220f      	movs	r2, #15
    7bce:	401a      	ands	r2, r3
    7bd0:	4b28      	ldr	r3, [pc, #160]	; (7c74 <mcu_temp+0xf8>)
    7bd2:	0010      	movs	r0, r2
    7bd4:	4798      	blx	r3
    7bd6:	4c28      	ldr	r4, [pc, #160]	; (7c78 <mcu_temp+0xfc>)
    7bd8:	2200      	movs	r2, #0
    7bda:	4b28      	ldr	r3, [pc, #160]	; (7c7c <mcu_temp+0x100>)
    7bdc:	47a0      	blx	r4
    7bde:	0003      	movs	r3, r0
    7be0:	000c      	movs	r4, r1
    7be2:	001a      	movs	r2, r3
    7be4:	0023      	movs	r3, r4
    7be6:	4c26      	ldr	r4, [pc, #152]	; (7c80 <mcu_temp+0x104>)
    7be8:	0028      	movs	r0, r5
    7bea:	0031      	movs	r1, r6
    7bec:	47a0      	blx	r4
    7bee:	0003      	movs	r3, r0
    7bf0:	000c      	movs	r4, r1
    7bf2:	60bb      	str	r3, [r7, #8]
    7bf4:	60fc      	str	r4, [r7, #12]
    7bf6:	e026      	b.n	7c46 <mcu_temp+0xca>
    }
    else {
      uint16_t twosComplement = (~adc_result) + 1;
    7bf8:	003b      	movs	r3, r7
    7bfa:	881a      	ldrh	r2, [r3, #0]
    7bfc:	1cbb      	adds	r3, r7, #2
    7bfe:	4252      	negs	r2, r2
    7c00:	801a      	strh	r2, [r3, #0]
      temperature = - (twosComplement >> 8) - ((twosComplement & 0x00F0)>>4)*0.5;
    7c02:	1cbb      	adds	r3, r7, #2
    7c04:	881b      	ldrh	r3, [r3, #0]
    7c06:	0a1b      	lsrs	r3, r3, #8
    7c08:	b29b      	uxth	r3, r3
    7c0a:	425a      	negs	r2, r3
    7c0c:	4b19      	ldr	r3, [pc, #100]	; (7c74 <mcu_temp+0xf8>)
    7c0e:	0010      	movs	r0, r2
    7c10:	4798      	blx	r3
    7c12:	0005      	movs	r5, r0
    7c14:	000e      	movs	r6, r1
    7c16:	1cbb      	adds	r3, r7, #2
    7c18:	881b      	ldrh	r3, [r3, #0]
    7c1a:	111b      	asrs	r3, r3, #4
    7c1c:	220f      	movs	r2, #15
    7c1e:	401a      	ands	r2, r3
    7c20:	4b14      	ldr	r3, [pc, #80]	; (7c74 <mcu_temp+0xf8>)
    7c22:	0010      	movs	r0, r2
    7c24:	4798      	blx	r3
    7c26:	4c14      	ldr	r4, [pc, #80]	; (7c78 <mcu_temp+0xfc>)
    7c28:	2200      	movs	r2, #0
    7c2a:	4b14      	ldr	r3, [pc, #80]	; (7c7c <mcu_temp+0x100>)
    7c2c:	47a0      	blx	r4
    7c2e:	0003      	movs	r3, r0
    7c30:	000c      	movs	r4, r1
    7c32:	001a      	movs	r2, r3
    7c34:	0023      	movs	r3, r4
    7c36:	4c13      	ldr	r4, [pc, #76]	; (7c84 <mcu_temp+0x108>)
    7c38:	0028      	movs	r0, r5
    7c3a:	0031      	movs	r1, r6
    7c3c:	47a0      	blx	r4
    7c3e:	0003      	movs	r3, r0
    7c40:	000c      	movs	r4, r1
    7c42:	60bb      	str	r3, [r7, #8]
    7c44:	60fc      	str	r4, [r7, #12]
    }
	printf("MCU temperature: %dC \r\n", (int) temperature);
    7c46:	4b10      	ldr	r3, [pc, #64]	; (7c88 <mcu_temp+0x10c>)
    7c48:	68b8      	ldr	r0, [r7, #8]
    7c4a:	68f9      	ldr	r1, [r7, #12]
    7c4c:	4798      	blx	r3
    7c4e:	0002      	movs	r2, r0
    7c50:	4b0e      	ldr	r3, [pc, #56]	; (7c8c <mcu_temp+0x110>)
    7c52:	0011      	movs	r1, r2
    7c54:	0018      	movs	r0, r3
    7c56:	4b0e      	ldr	r3, [pc, #56]	; (7c90 <mcu_temp+0x114>)
    7c58:	4798      	blx	r3
}
    7c5a:	46c0      	nop			; (mov r8, r8)
    7c5c:	46bd      	mov	sp, r7
    7c5e:	b005      	add	sp, #20
    7c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c62:	46c0      	nop			; (mov r8, r8)
    7c64:	000088a9 	.word	0x000088a9
    7c68:	20000438 	.word	0x20000438
    7c6c:	00006ec1 	.word	0x00006ec1
    7c70:	00006f09 	.word	0x00006f09
    7c74:	0000e0cd 	.word	0x0000e0cd
    7c78:	0000d4f9 	.word	0x0000d4f9
    7c7c:	3fe00000 	.word	0x3fe00000
    7c80:	0000c671 	.word	0x0000c671
    7c84:	0000d9f9 	.word	0x0000d9f9
    7c88:	0000e065 	.word	0x0000e065
    7c8c:	0000eb50 	.word	0x0000eb50
    7c90:	00009b65 	.word	0x00009b65

00007c94 <i2c_scan>:
/**
 * Reports all connected I2C slave devices over a 7 bit (128) address space.
 *
 */
void i2c_scan()
{
    7c94:	b590      	push	{r4, r7, lr}
    7c96:	b085      	sub	sp, #20
    7c98:	af00      	add	r7, sp, #0
	printf("Scanning lux bus\r\n");
    7c9a:	4b42      	ldr	r3, [pc, #264]	; (7da4 <i2c_scan+0x110>)
    7c9c:	0018      	movs	r0, r3
    7c9e:	4b42      	ldr	r3, [pc, #264]	; (7da8 <i2c_scan+0x114>)
    7ca0:	4798      	blx	r3
	
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7ca2:	2300      	movs	r3, #0
    7ca4:	60fb      	str	r3, [r7, #12]
    7ca6:	e033      	b.n	7d10 <i2c_scan+0x7c>
		enum status_code i2c_status;
		wr_packet.address = slave_address;
    7ca8:	68fb      	ldr	r3, [r7, #12]
    7caa:	b29a      	uxth	r2, r3
    7cac:	4b3f      	ldr	r3, [pc, #252]	; (7dac <i2c_scan+0x118>)
    7cae:	801a      	strh	r2, [r3, #0]
		rd_packet.address = slave_address;
    7cb0:	68fb      	ldr	r3, [r7, #12]
    7cb2:	b29a      	uxth	r2, r3
    7cb4:	4b3e      	ldr	r3, [pc, #248]	; (7db0 <i2c_scan+0x11c>)
    7cb6:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 0;
    7cb8:	4b3c      	ldr	r3, [pc, #240]	; (7dac <i2c_scan+0x118>)
    7cba:	2200      	movs	r2, #0
    7cbc:	805a      	strh	r2, [r3, #2]
		wr_buffer[0] = 0x05;
    7cbe:	4b3d      	ldr	r3, [pc, #244]	; (7db4 <i2c_scan+0x120>)
    7cc0:	2205      	movs	r2, #5
    7cc2:	701a      	strb	r2, [r3, #0]
		wr_packet.data = wr_buffer;
    7cc4:	4b39      	ldr	r3, [pc, #228]	; (7dac <i2c_scan+0x118>)
    7cc6:	4a3b      	ldr	r2, [pc, #236]	; (7db4 <i2c_scan+0x120>)
    7cc8:	605a      	str	r2, [r3, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_tsl_instance, &wr_packet);
    7cca:	1dfc      	adds	r4, r7, #7
    7ccc:	4a37      	ldr	r2, [pc, #220]	; (7dac <i2c_scan+0x118>)
    7cce:	4b3a      	ldr	r3, [pc, #232]	; (7db8 <i2c_scan+0x124>)
    7cd0:	0011      	movs	r1, r2
    7cd2:	0018      	movs	r0, r3
    7cd4:	4b39      	ldr	r3, [pc, #228]	; (7dbc <i2c_scan+0x128>)
    7cd6:	4798      	blx	r3
    7cd8:	0003      	movs	r3, r0
    7cda:	7023      	strb	r3, [r4, #0]
		if (i2c_status == STATUS_OK) {
    7cdc:	1dfb      	adds	r3, r7, #7
    7cde:	781b      	ldrb	r3, [r3, #0]
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d10e      	bne.n	7d02 <i2c_scan+0x6e>
			i2c_status = i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet);
    7ce4:	1dfc      	adds	r4, r7, #7
    7ce6:	4a32      	ldr	r2, [pc, #200]	; (7db0 <i2c_scan+0x11c>)
    7ce8:	4b33      	ldr	r3, [pc, #204]	; (7db8 <i2c_scan+0x124>)
    7cea:	0011      	movs	r1, r2
    7cec:	0018      	movs	r0, r3
    7cee:	4b34      	ldr	r3, [pc, #208]	; (7dc0 <i2c_scan+0x12c>)
    7cf0:	4798      	blx	r3
    7cf2:	0003      	movs	r3, r0
    7cf4:	7023      	strb	r3, [r4, #0]
			printf("Address found at %#X\r\n", slave_address);
    7cf6:	68fa      	ldr	r2, [r7, #12]
    7cf8:	4b32      	ldr	r3, [pc, #200]	; (7dc4 <i2c_scan+0x130>)
    7cfa:	0011      	movs	r1, r2
    7cfc:	0018      	movs	r0, r3
    7cfe:	4b32      	ldr	r3, [pc, #200]	; (7dc8 <i2c_scan+0x134>)
    7d00:	4798      	blx	r3
		}
		i2c_master_send_stop(&i2c_tsl_instance);
    7d02:	4b2d      	ldr	r3, [pc, #180]	; (7db8 <i2c_scan+0x124>)
    7d04:	0018      	movs	r0, r3
    7d06:	4b31      	ldr	r3, [pc, #196]	; (7dcc <i2c_scan+0x138>)
    7d08:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7d0a:	68fb      	ldr	r3, [r7, #12]
    7d0c:	3301      	adds	r3, #1
    7d0e:	60fb      	str	r3, [r7, #12]
    7d10:	68fb      	ldr	r3, [r7, #12]
    7d12:	2b7f      	cmp	r3, #127	; 0x7f
    7d14:	ddc8      	ble.n	7ca8 <i2c_scan+0x14>
	}
	
	printf("Scanning temp bus\r\n");
    7d16:	4b2e      	ldr	r3, [pc, #184]	; (7dd0 <i2c_scan+0x13c>)
    7d18:	0018      	movs	r0, r3
    7d1a:	4b23      	ldr	r3, [pc, #140]	; (7da8 <i2c_scan+0x114>)
    7d1c:	4798      	blx	r3
	

	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7d1e:	2300      	movs	r3, #0
    7d20:	60bb      	str	r3, [r7, #8]
    7d22:	e033      	b.n	7d8c <i2c_scan+0xf8>
		//int slave_address = 64;
		enum status_code i2c_status;
		wr_packet.address = slave_address;
    7d24:	68bb      	ldr	r3, [r7, #8]
    7d26:	b29a      	uxth	r2, r3
    7d28:	4b20      	ldr	r3, [pc, #128]	; (7dac <i2c_scan+0x118>)
    7d2a:	801a      	strh	r2, [r3, #0]
		rd_packet.address = slave_address;
    7d2c:	68bb      	ldr	r3, [r7, #8]
    7d2e:	b29a      	uxth	r2, r3
    7d30:	4b1f      	ldr	r3, [pc, #124]	; (7db0 <i2c_scan+0x11c>)
    7d32:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 0;
    7d34:	4b1d      	ldr	r3, [pc, #116]	; (7dac <i2c_scan+0x118>)
    7d36:	2200      	movs	r2, #0
    7d38:	805a      	strh	r2, [r3, #2]
		wr_buffer[0] = 0x05;
    7d3a:	4b1e      	ldr	r3, [pc, #120]	; (7db4 <i2c_scan+0x120>)
    7d3c:	2205      	movs	r2, #5
    7d3e:	701a      	strb	r2, [r3, #0]
		wr_packet.data = wr_buffer;
    7d40:	4b1a      	ldr	r3, [pc, #104]	; (7dac <i2c_scan+0x118>)
    7d42:	4a1c      	ldr	r2, [pc, #112]	; (7db4 <i2c_scan+0x120>)
    7d44:	605a      	str	r2, [r3, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_hdc_instance, &wr_packet);
    7d46:	1dbc      	adds	r4, r7, #6
    7d48:	4a18      	ldr	r2, [pc, #96]	; (7dac <i2c_scan+0x118>)
    7d4a:	4b22      	ldr	r3, [pc, #136]	; (7dd4 <i2c_scan+0x140>)
    7d4c:	0011      	movs	r1, r2
    7d4e:	0018      	movs	r0, r3
    7d50:	4b1a      	ldr	r3, [pc, #104]	; (7dbc <i2c_scan+0x128>)
    7d52:	4798      	blx	r3
    7d54:	0003      	movs	r3, r0
    7d56:	7023      	strb	r3, [r4, #0]
		if (i2c_status == STATUS_OK) {
    7d58:	1dbb      	adds	r3, r7, #6
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	d10e      	bne.n	7d7e <i2c_scan+0xea>
			i2c_status = i2c_master_read_packet_wait(&i2c_hdc_instance, &rd_packet);
    7d60:	1dbc      	adds	r4, r7, #6
    7d62:	4a13      	ldr	r2, [pc, #76]	; (7db0 <i2c_scan+0x11c>)
    7d64:	4b1b      	ldr	r3, [pc, #108]	; (7dd4 <i2c_scan+0x140>)
    7d66:	0011      	movs	r1, r2
    7d68:	0018      	movs	r0, r3
    7d6a:	4b15      	ldr	r3, [pc, #84]	; (7dc0 <i2c_scan+0x12c>)
    7d6c:	4798      	blx	r3
    7d6e:	0003      	movs	r3, r0
    7d70:	7023      	strb	r3, [r4, #0]
			printf("Address found at %#X\r\n", slave_address);
    7d72:	68ba      	ldr	r2, [r7, #8]
    7d74:	4b13      	ldr	r3, [pc, #76]	; (7dc4 <i2c_scan+0x130>)
    7d76:	0011      	movs	r1, r2
    7d78:	0018      	movs	r0, r3
    7d7a:	4b13      	ldr	r3, [pc, #76]	; (7dc8 <i2c_scan+0x134>)
    7d7c:	4798      	blx	r3
		}
		i2c_master_send_stop(&i2c_hdc_instance);
    7d7e:	4b15      	ldr	r3, [pc, #84]	; (7dd4 <i2c_scan+0x140>)
    7d80:	0018      	movs	r0, r3
    7d82:	4b12      	ldr	r3, [pc, #72]	; (7dcc <i2c_scan+0x138>)
    7d84:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7d86:	68bb      	ldr	r3, [r7, #8]
    7d88:	3301      	adds	r3, #1
    7d8a:	60bb      	str	r3, [r7, #8]
    7d8c:	68bb      	ldr	r3, [r7, #8]
    7d8e:	2b7f      	cmp	r3, #127	; 0x7f
    7d90:	ddc8      	ble.n	7d24 <i2c_scan+0x90>
	}
	
	printf("Scans complete.\r\n");
    7d92:	4b11      	ldr	r3, [pc, #68]	; (7dd8 <i2c_scan+0x144>)
    7d94:	0018      	movs	r0, r3
    7d96:	4b04      	ldr	r3, [pc, #16]	; (7da8 <i2c_scan+0x114>)
    7d98:	4798      	blx	r3
}
    7d9a:	46c0      	nop			; (mov r8, r8)
    7d9c:	46bd      	mov	sp, r7
    7d9e:	b005      	add	sp, #20
    7da0:	bd90      	pop	{r4, r7, pc}
    7da2:	46c0      	nop			; (mov r8, r8)
    7da4:	0000eb68 	.word	0x0000eb68
    7da8:	00009c59 	.word	0x00009c59
    7dac:	20000060 	.word	0x20000060
    7db0:	2000006c 	.word	0x2000006c
    7db4:	20000058 	.word	0x20000058
    7db8:	2000035c 	.word	0x2000035c
    7dbc:	00003d25 	.word	0x00003d25
    7dc0:	00003b2d 	.word	0x00003b2d
    7dc4:	0000eb7c 	.word	0x0000eb7c
    7dc8:	00009b65 	.word	0x00009b65
    7dcc:	00003d65 	.word	0x00003d65
    7dd0:	0000eb94 	.word	0x0000eb94
    7dd4:	200003d0 	.word	0x200003d0
    7dd8:	0000eba8 	.word	0x0000eba8

00007ddc <print_general_error>:
 * Prints a general error message.
 *
 * @param func_name function where error occured.
 */
void print_general_error(char *func_name)
{
    7ddc:	b580      	push	{r7, lr}
    7dde:	b082      	sub	sp, #8
    7de0:	af00      	add	r7, sp, #0
    7de2:	6078      	str	r0, [r7, #4]
	printf("there was an error parsing your args for %s. See help for correct usage.\r\n", func_name);
    7de4:	687a      	ldr	r2, [r7, #4]
    7de6:	4b04      	ldr	r3, [pc, #16]	; (7df8 <print_general_error+0x1c>)
    7de8:	0011      	movs	r1, r2
    7dea:	0018      	movs	r0, r3
    7dec:	4b03      	ldr	r3, [pc, #12]	; (7dfc <print_general_error+0x20>)
    7dee:	4798      	blx	r3
}
    7df0:	46c0      	nop			; (mov r8, r8)
    7df2:	46bd      	mov	sp, r7
    7df4:	b002      	add	sp, #8
    7df6:	bd80      	pop	{r7, pc}
    7df8:	0000ebbc 	.word	0x0000ebbc
    7dfc:	00009b65 	.word	0x00009b65

00007e00 <print_args_error>:
 * @param func_name     name of the function where error occured
 * @param required_args number of arguments required for the function
 * @param num_args      number of arguments given to the function
 */
void print_args_error(char *func_name, int required_args, int num_args)
{
    7e00:	b590      	push	{r4, r7, lr}
    7e02:	b085      	sub	sp, #20
    7e04:	af00      	add	r7, sp, #0
    7e06:	60f8      	str	r0, [r7, #12]
    7e08:	60b9      	str	r1, [r7, #8]
    7e0a:	607a      	str	r2, [r7, #4]
	printf("Invalid number of args: %s requires %d arguments and you provided %d \r\n."
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	68ba      	ldr	r2, [r7, #8]
    7e10:	68f9      	ldr	r1, [r7, #12]
    7e12:	4803      	ldr	r0, [pc, #12]	; (7e20 <print_args_error+0x20>)
    7e14:	4c03      	ldr	r4, [pc, #12]	; (7e24 <print_args_error+0x24>)
    7e16:	47a0      	blx	r4
	       "See help for more information. \r\n", func_name, required_args, num_args);
}
    7e18:	46c0      	nop			; (mov r8, r8)
    7e1a:	46bd      	mov	sp, r7
    7e1c:	b005      	add	sp, #20
    7e1e:	bd90      	pop	{r4, r7, pc}
    7e20:	0000ec08 	.word	0x0000ec08
    7e24:	00009b65 	.word	0x00009b65

00007e28 <input_handle>:
 *
 * @param argc argument count, number of arguments given.
 * @param argv buffer holding all arguments
 */
void input_handle(int argc, char **argv)
{
    7e28:	b580      	push	{r7, lr}
    7e2a:	b0a6      	sub	sp, #152	; 0x98
    7e2c:	af00      	add	r7, sp, #0
    7e2e:	6078      	str	r0, [r7, #4]
    7e30:	6039      	str	r1, [r7, #0]
	if (!(strcmp("help", argv[0]))) {
    7e32:	683b      	ldr	r3, [r7, #0]
    7e34:	681a      	ldr	r2, [r3, #0]
    7e36:	4bda      	ldr	r3, [pc, #872]	; (81a0 <input_handle+0x378>)
    7e38:	0011      	movs	r1, r2
    7e3a:	0018      	movs	r0, r3
    7e3c:	4bd9      	ldr	r3, [pc, #868]	; (81a4 <input_handle+0x37c>)
    7e3e:	4798      	blx	r3
    7e40:	1e03      	subs	r3, r0, #0
    7e42:	d117      	bne.n	7e74 <input_handle+0x4c>
		int required_args = 1;
    7e44:	2301      	movs	r3, #1
    7e46:	2294      	movs	r2, #148	; 0x94
    7e48:	18ba      	adds	r2, r7, r2
    7e4a:	6013      	str	r3, [r2, #0]
		if (argc != required_args) {
    7e4c:	687a      	ldr	r2, [r7, #4]
    7e4e:	2394      	movs	r3, #148	; 0x94
    7e50:	18fb      	adds	r3, r7, r3
    7e52:	681b      	ldr	r3, [r3, #0]
    7e54:	429a      	cmp	r2, r3
    7e56:	d009      	beq.n	7e6c <input_handle+0x44>
			print_args_error("help", required_args, argc);
    7e58:	687a      	ldr	r2, [r7, #4]
    7e5a:	2394      	movs	r3, #148	; 0x94
    7e5c:	18fb      	adds	r3, r7, r3
    7e5e:	6819      	ldr	r1, [r3, #0]
    7e60:	4bcf      	ldr	r3, [pc, #828]	; (81a0 <input_handle+0x378>)
    7e62:	0018      	movs	r0, r3
    7e64:	4bd0      	ldr	r3, [pc, #832]	; (81a8 <input_handle+0x380>)
    7e66:	4798      	blx	r3
			return;
    7e68:	f000 fc09 	bl	867e <input_handle+0x856>
		}
		help();
    7e6c:	4bcf      	ldr	r3, [pc, #828]	; (81ac <input_handle+0x384>)
    7e6e:	4798      	blx	r3
    7e70:	f000 fc05 	bl	867e <input_handle+0x856>
	} else if (!(strcmp("ver_bl", argv[0]))) {
    7e74:	683b      	ldr	r3, [r7, #0]
    7e76:	681a      	ldr	r2, [r3, #0]
    7e78:	4bcd      	ldr	r3, [pc, #820]	; (81b0 <input_handle+0x388>)
    7e7a:	0011      	movs	r1, r2
    7e7c:	0018      	movs	r0, r3
    7e7e:	4bc9      	ldr	r3, [pc, #804]	; (81a4 <input_handle+0x37c>)
    7e80:	4798      	blx	r3
    7e82:	1e03      	subs	r3, r0, #0
    7e84:	d117      	bne.n	7eb6 <input_handle+0x8e>
		int required_args = 1;
    7e86:	2301      	movs	r3, #1
    7e88:	2290      	movs	r2, #144	; 0x90
    7e8a:	18ba      	adds	r2, r7, r2
    7e8c:	6013      	str	r3, [r2, #0]
		if (argc != required_args) {
    7e8e:	687a      	ldr	r2, [r7, #4]
    7e90:	2390      	movs	r3, #144	; 0x90
    7e92:	18fb      	adds	r3, r7, r3
    7e94:	681b      	ldr	r3, [r3, #0]
    7e96:	429a      	cmp	r2, r3
    7e98:	d009      	beq.n	7eae <input_handle+0x86>
			print_args_error("ver_bl", required_args, argc);
    7e9a:	687a      	ldr	r2, [r7, #4]
    7e9c:	2390      	movs	r3, #144	; 0x90
    7e9e:	18fb      	adds	r3, r7, r3
    7ea0:	6819      	ldr	r1, [r3, #0]
    7ea2:	4bc3      	ldr	r3, [pc, #780]	; (81b0 <input_handle+0x388>)
    7ea4:	0018      	movs	r0, r3
    7ea6:	4bc0      	ldr	r3, [pc, #768]	; (81a8 <input_handle+0x380>)
    7ea8:	4798      	blx	r3
			return;
    7eaa:	f000 fbe8 	bl	867e <input_handle+0x856>
		}
		ver_bl();
    7eae:	4bc1      	ldr	r3, [pc, #772]	; (81b4 <input_handle+0x38c>)
    7eb0:	4798      	blx	r3
    7eb2:	f000 fbe4 	bl	867e <input_handle+0x856>
	} else if (!(strcmp("ver_app", argv[0]))) {
    7eb6:	683b      	ldr	r3, [r7, #0]
    7eb8:	681a      	ldr	r2, [r3, #0]
    7eba:	4bbf      	ldr	r3, [pc, #764]	; (81b8 <input_handle+0x390>)
    7ebc:	0011      	movs	r1, r2
    7ebe:	0018      	movs	r0, r3
    7ec0:	4bb8      	ldr	r3, [pc, #736]	; (81a4 <input_handle+0x37c>)
    7ec2:	4798      	blx	r3
    7ec4:	1e03      	subs	r3, r0, #0
    7ec6:	d117      	bne.n	7ef8 <input_handle+0xd0>
		int required_args = 1;
    7ec8:	2301      	movs	r3, #1
    7eca:	228c      	movs	r2, #140	; 0x8c
    7ecc:	18ba      	adds	r2, r7, r2
    7ece:	6013      	str	r3, [r2, #0]
		if (argc != required_args) {
    7ed0:	687a      	ldr	r2, [r7, #4]
    7ed2:	238c      	movs	r3, #140	; 0x8c
    7ed4:	18fb      	adds	r3, r7, r3
    7ed6:	681b      	ldr	r3, [r3, #0]
    7ed8:	429a      	cmp	r2, r3
    7eda:	d009      	beq.n	7ef0 <input_handle+0xc8>
			print_args_error("ver_app", required_args, argc);
    7edc:	687a      	ldr	r2, [r7, #4]
    7ede:	238c      	movs	r3, #140	; 0x8c
    7ee0:	18fb      	adds	r3, r7, r3
    7ee2:	6819      	ldr	r1, [r3, #0]
    7ee4:	4bb4      	ldr	r3, [pc, #720]	; (81b8 <input_handle+0x390>)
    7ee6:	0018      	movs	r0, r3
    7ee8:	4baf      	ldr	r3, [pc, #700]	; (81a8 <input_handle+0x380>)
    7eea:	4798      	blx	r3
			return;
    7eec:	f000 fbc7 	bl	867e <input_handle+0x856>
		}
		ver_app();
    7ef0:	4bb2      	ldr	r3, [pc, #712]	; (81bc <input_handle+0x394>)
    7ef2:	4798      	blx	r3
    7ef4:	f000 fbc3 	bl	867e <input_handle+0x856>
	} else if (!(strcmp("gpio_set", argv[0]))) {
    7ef8:	683b      	ldr	r3, [r7, #0]
    7efa:	681a      	ldr	r2, [r3, #0]
    7efc:	4bb0      	ldr	r3, [pc, #704]	; (81c0 <input_handle+0x398>)
    7efe:	0011      	movs	r1, r2
    7f00:	0018      	movs	r0, r3
    7f02:	4ba8      	ldr	r3, [pc, #672]	; (81a4 <input_handle+0x37c>)
    7f04:	4798      	blx	r3
    7f06:	1e03      	subs	r3, r0, #0
    7f08:	d144      	bne.n	7f94 <input_handle+0x16c>
		int required_args = 3;
    7f0a:	2303      	movs	r3, #3
    7f0c:	2288      	movs	r2, #136	; 0x88
    7f0e:	18ba      	adds	r2, r7, r2
    7f10:	6013      	str	r3, [r2, #0]
		if (argc != required_args) {
    7f12:	687a      	ldr	r2, [r7, #4]
    7f14:	2388      	movs	r3, #136	; 0x88
    7f16:	18fb      	adds	r3, r7, r3
    7f18:	681b      	ldr	r3, [r3, #0]
    7f1a:	429a      	cmp	r2, r3
    7f1c:	d009      	beq.n	7f32 <input_handle+0x10a>
			print_args_error("gpio_set", required_args, argc);
    7f1e:	687a      	ldr	r2, [r7, #4]
    7f20:	2388      	movs	r3, #136	; 0x88
    7f22:	18fb      	adds	r3, r7, r3
    7f24:	6819      	ldr	r1, [r3, #0]
    7f26:	4ba6      	ldr	r3, [pc, #664]	; (81c0 <input_handle+0x398>)
    7f28:	0018      	movs	r0, r3
    7f2a:	4b9f      	ldr	r3, [pc, #636]	; (81a8 <input_handle+0x380>)
    7f2c:	4798      	blx	r3
			return;
    7f2e:	f000 fba6 	bl	867e <input_handle+0x856>
		}
		char port = argv[1][0];
    7f32:	683b      	ldr	r3, [r7, #0]
    7f34:	3304      	adds	r3, #4
    7f36:	681a      	ldr	r2, [r3, #0]
    7f38:	2387      	movs	r3, #135	; 0x87
    7f3a:	18fb      	adds	r3, r7, r3
    7f3c:	7812      	ldrb	r2, [r2, #0]
    7f3e:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    7f40:	683b      	ldr	r3, [r7, #0]
    7f42:	3308      	adds	r3, #8
    7f44:	681b      	ldr	r3, [r3, #0]
    7f46:	0018      	movs	r0, r3
    7f48:	4b9e      	ldr	r3, [pc, #632]	; (81c4 <input_handle+0x39c>)
    7f4a:	4798      	blx	r3
    7f4c:	0003      	movs	r3, r0
    7f4e:	2280      	movs	r2, #128	; 0x80
    7f50:	18ba      	adds	r2, r7, r2
    7f52:	6013      	str	r3, [r2, #0]
		if (isdigit(argv[2][0]))
    7f54:	4b9c      	ldr	r3, [pc, #624]	; (81c8 <input_handle+0x3a0>)
    7f56:	4798      	blx	r3
    7f58:	0002      	movs	r2, r0
    7f5a:	683b      	ldr	r3, [r7, #0]
    7f5c:	3308      	adds	r3, #8
    7f5e:	681b      	ldr	r3, [r3, #0]
    7f60:	781b      	ldrb	r3, [r3, #0]
    7f62:	3301      	adds	r3, #1
    7f64:	18d3      	adds	r3, r2, r3
    7f66:	781b      	ldrb	r3, [r3, #0]
    7f68:	001a      	movs	r2, r3
    7f6a:	2304      	movs	r3, #4
    7f6c:	4013      	ands	r3, r2
    7f6e:	d00b      	beq.n	7f88 <input_handle+0x160>
			gpio_set(port, pin);
    7f70:	2380      	movs	r3, #128	; 0x80
    7f72:	18fb      	adds	r3, r7, r3
    7f74:	681a      	ldr	r2, [r3, #0]
    7f76:	2387      	movs	r3, #135	; 0x87
    7f78:	18fb      	adds	r3, r7, r3
    7f7a:	781b      	ldrb	r3, [r3, #0]
    7f7c:	0011      	movs	r1, r2
    7f7e:	0018      	movs	r0, r3
    7f80:	4b92      	ldr	r3, [pc, #584]	; (81cc <input_handle+0x3a4>)
    7f82:	4798      	blx	r3
    7f84:	f000 fb7b 	bl	867e <input_handle+0x856>
		else
			print_general_error("gpio_set");
    7f88:	4b8d      	ldr	r3, [pc, #564]	; (81c0 <input_handle+0x398>)
    7f8a:	0018      	movs	r0, r3
    7f8c:	4b90      	ldr	r3, [pc, #576]	; (81d0 <input_handle+0x3a8>)
    7f8e:	4798      	blx	r3
    7f90:	f000 fb75 	bl	867e <input_handle+0x856>
	} else if (!(strcmp("gpio_clear", argv[0]))) {
    7f94:	683b      	ldr	r3, [r7, #0]
    7f96:	681a      	ldr	r2, [r3, #0]
    7f98:	4b8e      	ldr	r3, [pc, #568]	; (81d4 <input_handle+0x3ac>)
    7f9a:	0011      	movs	r1, r2
    7f9c:	0018      	movs	r0, r3
    7f9e:	4b81      	ldr	r3, [pc, #516]	; (81a4 <input_handle+0x37c>)
    7fa0:	4798      	blx	r3
    7fa2:	1e03      	subs	r3, r0, #0
    7fa4:	d138      	bne.n	8018 <input_handle+0x1f0>
		int required_args = 3;
    7fa6:	2303      	movs	r3, #3
    7fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (argc != required_args) {
    7faa:	687a      	ldr	r2, [r7, #4]
    7fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7fae:	429a      	cmp	r2, r3
    7fb0:	d007      	beq.n	7fc2 <input_handle+0x19a>
			print_args_error("gpio_clear", required_args, argc);
    7fb2:	687a      	ldr	r2, [r7, #4]
    7fb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    7fb6:	4b87      	ldr	r3, [pc, #540]	; (81d4 <input_handle+0x3ac>)
    7fb8:	0018      	movs	r0, r3
    7fba:	4b7b      	ldr	r3, [pc, #492]	; (81a8 <input_handle+0x380>)
    7fbc:	4798      	blx	r3
			return;
    7fbe:	f000 fb5e 	bl	867e <input_handle+0x856>
		}
		char port = argv[1][0];
    7fc2:	683b      	ldr	r3, [r7, #0]
    7fc4:	3304      	adds	r3, #4
    7fc6:	681a      	ldr	r2, [r3, #0]
    7fc8:	237b      	movs	r3, #123	; 0x7b
    7fca:	18fb      	adds	r3, r7, r3
    7fcc:	7812      	ldrb	r2, [r2, #0]
    7fce:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    7fd0:	683b      	ldr	r3, [r7, #0]
    7fd2:	3308      	adds	r3, #8
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	0018      	movs	r0, r3
    7fd8:	4b7a      	ldr	r3, [pc, #488]	; (81c4 <input_handle+0x39c>)
    7fda:	4798      	blx	r3
    7fdc:	0003      	movs	r3, r0
    7fde:	677b      	str	r3, [r7, #116]	; 0x74
		if (isdigit(argv[2][0]))
    7fe0:	4b79      	ldr	r3, [pc, #484]	; (81c8 <input_handle+0x3a0>)
    7fe2:	4798      	blx	r3
    7fe4:	0002      	movs	r2, r0
    7fe6:	683b      	ldr	r3, [r7, #0]
    7fe8:	3308      	adds	r3, #8
    7fea:	681b      	ldr	r3, [r3, #0]
    7fec:	781b      	ldrb	r3, [r3, #0]
    7fee:	3301      	adds	r3, #1
    7ff0:	18d3      	adds	r3, r2, r3
    7ff2:	781b      	ldrb	r3, [r3, #0]
    7ff4:	001a      	movs	r2, r3
    7ff6:	2304      	movs	r3, #4
    7ff8:	4013      	ands	r3, r2
    7ffa:	d008      	beq.n	800e <input_handle+0x1e6>
			gpio_clear(port, pin);
    7ffc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    7ffe:	237b      	movs	r3, #123	; 0x7b
    8000:	18fb      	adds	r3, r7, r3
    8002:	781b      	ldrb	r3, [r3, #0]
    8004:	0011      	movs	r1, r2
    8006:	0018      	movs	r0, r3
    8008:	4b73      	ldr	r3, [pc, #460]	; (81d8 <input_handle+0x3b0>)
    800a:	4798      	blx	r3
    800c:	e337      	b.n	867e <input_handle+0x856>
		else
			print_general_error("gpio_clear");
    800e:	4b71      	ldr	r3, [pc, #452]	; (81d4 <input_handle+0x3ac>)
    8010:	0018      	movs	r0, r3
    8012:	4b6f      	ldr	r3, [pc, #444]	; (81d0 <input_handle+0x3a8>)
    8014:	4798      	blx	r3
    8016:	e332      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("gpio_get", argv[0]))) {
    8018:	683b      	ldr	r3, [r7, #0]
    801a:	681a      	ldr	r2, [r3, #0]
    801c:	4b6f      	ldr	r3, [pc, #444]	; (81dc <input_handle+0x3b4>)
    801e:	0011      	movs	r1, r2
    8020:	0018      	movs	r0, r3
    8022:	4b60      	ldr	r3, [pc, #384]	; (81a4 <input_handle+0x37c>)
    8024:	4798      	blx	r3
    8026:	1e03      	subs	r3, r0, #0
    8028:	d137      	bne.n	809a <input_handle+0x272>
		int required_args = 3;
    802a:	2303      	movs	r3, #3
    802c:	673b      	str	r3, [r7, #112]	; 0x70
		if (argc != required_args) {
    802e:	687a      	ldr	r2, [r7, #4]
    8030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    8032:	429a      	cmp	r2, r3
    8034:	d006      	beq.n	8044 <input_handle+0x21c>
			print_args_error("gpio_get", required_args, argc);
    8036:	687a      	ldr	r2, [r7, #4]
    8038:	6f39      	ldr	r1, [r7, #112]	; 0x70
    803a:	4b68      	ldr	r3, [pc, #416]	; (81dc <input_handle+0x3b4>)
    803c:	0018      	movs	r0, r3
    803e:	4b5a      	ldr	r3, [pc, #360]	; (81a8 <input_handle+0x380>)
    8040:	4798      	blx	r3
			return;
    8042:	e31c      	b.n	867e <input_handle+0x856>
		}
		char port = argv[1][0];
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	3304      	adds	r3, #4
    8048:	681a      	ldr	r2, [r3, #0]
    804a:	236f      	movs	r3, #111	; 0x6f
    804c:	18fb      	adds	r3, r7, r3
    804e:	7812      	ldrb	r2, [r2, #0]
    8050:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    8052:	683b      	ldr	r3, [r7, #0]
    8054:	3308      	adds	r3, #8
    8056:	681b      	ldr	r3, [r3, #0]
    8058:	0018      	movs	r0, r3
    805a:	4b5a      	ldr	r3, [pc, #360]	; (81c4 <input_handle+0x39c>)
    805c:	4798      	blx	r3
    805e:	0003      	movs	r3, r0
    8060:	66bb      	str	r3, [r7, #104]	; 0x68
		if (isdigit(argv[2][0]))
    8062:	4b59      	ldr	r3, [pc, #356]	; (81c8 <input_handle+0x3a0>)
    8064:	4798      	blx	r3
    8066:	0002      	movs	r2, r0
    8068:	683b      	ldr	r3, [r7, #0]
    806a:	3308      	adds	r3, #8
    806c:	681b      	ldr	r3, [r3, #0]
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	3301      	adds	r3, #1
    8072:	18d3      	adds	r3, r2, r3
    8074:	781b      	ldrb	r3, [r3, #0]
    8076:	001a      	movs	r2, r3
    8078:	2304      	movs	r3, #4
    807a:	4013      	ands	r3, r2
    807c:	d008      	beq.n	8090 <input_handle+0x268>
			gpio_get(port, pin);
    807e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    8080:	236f      	movs	r3, #111	; 0x6f
    8082:	18fb      	adds	r3, r7, r3
    8084:	781b      	ldrb	r3, [r3, #0]
    8086:	0011      	movs	r1, r2
    8088:	0018      	movs	r0, r3
    808a:	4b55      	ldr	r3, [pc, #340]	; (81e0 <input_handle+0x3b8>)
    808c:	4798      	blx	r3
    808e:	e2f6      	b.n	867e <input_handle+0x856>
		else
			print_general_error("gpio_get");
    8090:	4b52      	ldr	r3, [pc, #328]	; (81dc <input_handle+0x3b4>)
    8092:	0018      	movs	r0, r3
    8094:	4b4e      	ldr	r3, [pc, #312]	; (81d0 <input_handle+0x3a8>)
    8096:	4798      	blx	r3
    8098:	e2f1      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("mac", argv[0]))) {
    809a:	683b      	ldr	r3, [r7, #0]
    809c:	681a      	ldr	r2, [r3, #0]
    809e:	4b51      	ldr	r3, [pc, #324]	; (81e4 <input_handle+0x3bc>)
    80a0:	0011      	movs	r1, r2
    80a2:	0018      	movs	r0, r3
    80a4:	4b3f      	ldr	r3, [pc, #252]	; (81a4 <input_handle+0x37c>)
    80a6:	4798      	blx	r3
    80a8:	1e03      	subs	r3, r0, #0
    80aa:	d10f      	bne.n	80cc <input_handle+0x2a4>
		int required_args = 1;
    80ac:	2301      	movs	r3, #1
    80ae:	667b      	str	r3, [r7, #100]	; 0x64
		if (argc != required_args) {
    80b0:	687a      	ldr	r2, [r7, #4]
    80b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    80b4:	429a      	cmp	r2, r3
    80b6:	d006      	beq.n	80c6 <input_handle+0x29e>
			print_args_error("mac", required_args, argc);
    80b8:	687a      	ldr	r2, [r7, #4]
    80ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
    80bc:	4b49      	ldr	r3, [pc, #292]	; (81e4 <input_handle+0x3bc>)
    80be:	0018      	movs	r0, r3
    80c0:	4b39      	ldr	r3, [pc, #228]	; (81a8 <input_handle+0x380>)
    80c2:	4798      	blx	r3
			return;
    80c4:	e2db      	b.n	867e <input_handle+0x856>
		}
		mac();
    80c6:	4b48      	ldr	r3, [pc, #288]	; (81e8 <input_handle+0x3c0>)
    80c8:	4798      	blx	r3
    80ca:	e2d8      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("ip", argv[0]))) {
    80cc:	683b      	ldr	r3, [r7, #0]
    80ce:	681a      	ldr	r2, [r3, #0]
    80d0:	4b46      	ldr	r3, [pc, #280]	; (81ec <input_handle+0x3c4>)
    80d2:	0011      	movs	r1, r2
    80d4:	0018      	movs	r0, r3
    80d6:	4b33      	ldr	r3, [pc, #204]	; (81a4 <input_handle+0x37c>)
    80d8:	4798      	blx	r3
    80da:	1e03      	subs	r3, r0, #0
    80dc:	d10f      	bne.n	80fe <input_handle+0x2d6>
		int required_args = 1;
    80de:	2301      	movs	r3, #1
    80e0:	663b      	str	r3, [r7, #96]	; 0x60
		if (argc != required_args) {
    80e2:	687a      	ldr	r2, [r7, #4]
    80e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    80e6:	429a      	cmp	r2, r3
    80e8:	d006      	beq.n	80f8 <input_handle+0x2d0>
			print_args_error("ip", required_args, argc);
    80ea:	687a      	ldr	r2, [r7, #4]
    80ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
    80ee:	4b3f      	ldr	r3, [pc, #252]	; (81ec <input_handle+0x3c4>)
    80f0:	0018      	movs	r0, r3
    80f2:	4b2d      	ldr	r3, [pc, #180]	; (81a8 <input_handle+0x380>)
    80f4:	4798      	blx	r3
			return;
    80f6:	e2c2      	b.n	867e <input_handle+0x856>
		}
		ip();
    80f8:	4b3d      	ldr	r3, [pc, #244]	; (81f0 <input_handle+0x3c8>)
    80fa:	4798      	blx	r3
    80fc:	e2bf      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("read", argv[0]))) {
    80fe:	683b      	ldr	r3, [r7, #0]
    8100:	681a      	ldr	r2, [r3, #0]
    8102:	4b3c      	ldr	r3, [pc, #240]	; (81f4 <input_handle+0x3cc>)
    8104:	0011      	movs	r1, r2
    8106:	0018      	movs	r0, r3
    8108:	4b26      	ldr	r3, [pc, #152]	; (81a4 <input_handle+0x37c>)
    810a:	4798      	blx	r3
    810c:	1e03      	subs	r3, r0, #0
    810e:	d000      	beq.n	8112 <input_handle+0x2ea>
    8110:	e074      	b.n	81fc <input_handle+0x3d4>
		int required_args = 4;
    8112:	2304      	movs	r3, #4
    8114:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (argc != required_args) {
    8116:	687a      	ldr	r2, [r7, #4]
    8118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    811a:	429a      	cmp	r2, r3
    811c:	d006      	beq.n	812c <input_handle+0x304>
			print_args_error("read", required_args, argc);
    811e:	687a      	ldr	r2, [r7, #4]
    8120:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    8122:	4b34      	ldr	r3, [pc, #208]	; (81f4 <input_handle+0x3cc>)
    8124:	0018      	movs	r0, r3
    8126:	4b20      	ldr	r3, [pc, #128]	; (81a8 <input_handle+0x380>)
    8128:	4798      	blx	r3
			return;
    812a:	e2a8      	b.n	867e <input_handle+0x856>
		}
		int reading = atoi(argv[2]);
    812c:	683b      	ldr	r3, [r7, #0]
    812e:	3308      	adds	r3, #8
    8130:	681b      	ldr	r3, [r3, #0]
    8132:	0018      	movs	r0, r3
    8134:	4b23      	ldr	r3, [pc, #140]	; (81c4 <input_handle+0x39c>)
    8136:	4798      	blx	r3
    8138:	0003      	movs	r3, r0
    813a:	65bb      	str	r3, [r7, #88]	; 0x58
		int interval_ms = atoi(argv[3]);
    813c:	683b      	ldr	r3, [r7, #0]
    813e:	330c      	adds	r3, #12
    8140:	681b      	ldr	r3, [r3, #0]
    8142:	0018      	movs	r0, r3
    8144:	4b1f      	ldr	r3, [pc, #124]	; (81c4 <input_handle+0x39c>)
    8146:	4798      	blx	r3
    8148:	0003      	movs	r3, r0
    814a:	657b      	str	r3, [r7, #84]	; 0x54
		if (isdigit(argv[2][0]) && isdigit(argv[3][0]))
    814c:	4b1e      	ldr	r3, [pc, #120]	; (81c8 <input_handle+0x3a0>)
    814e:	4798      	blx	r3
    8150:	0002      	movs	r2, r0
    8152:	683b      	ldr	r3, [r7, #0]
    8154:	3308      	adds	r3, #8
    8156:	681b      	ldr	r3, [r3, #0]
    8158:	781b      	ldrb	r3, [r3, #0]
    815a:	3301      	adds	r3, #1
    815c:	18d3      	adds	r3, r2, r3
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	001a      	movs	r2, r3
    8162:	2304      	movs	r3, #4
    8164:	4013      	ands	r3, r2
    8166:	d016      	beq.n	8196 <input_handle+0x36e>
    8168:	4b17      	ldr	r3, [pc, #92]	; (81c8 <input_handle+0x3a0>)
    816a:	4798      	blx	r3
    816c:	0002      	movs	r2, r0
    816e:	683b      	ldr	r3, [r7, #0]
    8170:	330c      	adds	r3, #12
    8172:	681b      	ldr	r3, [r3, #0]
    8174:	781b      	ldrb	r3, [r3, #0]
    8176:	3301      	adds	r3, #1
    8178:	18d3      	adds	r3, r2, r3
    817a:	781b      	ldrb	r3, [r3, #0]
    817c:	001a      	movs	r2, r3
    817e:	2304      	movs	r3, #4
    8180:	4013      	ands	r3, r2
    8182:	d008      	beq.n	8196 <input_handle+0x36e>
			read_sensor(argv[1], reading, interval_ms);
    8184:	683b      	ldr	r3, [r7, #0]
    8186:	3304      	adds	r3, #4
    8188:	681b      	ldr	r3, [r3, #0]
    818a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    818c:	6db9      	ldr	r1, [r7, #88]	; 0x58
    818e:	0018      	movs	r0, r3
    8190:	4b19      	ldr	r3, [pc, #100]	; (81f8 <input_handle+0x3d0>)
    8192:	4798      	blx	r3
    8194:	e273      	b.n	867e <input_handle+0x856>
		else
			print_general_error("read");
    8196:	4b17      	ldr	r3, [pc, #92]	; (81f4 <input_handle+0x3cc>)
    8198:	0018      	movs	r0, r3
    819a:	4b0d      	ldr	r3, [pc, #52]	; (81d0 <input_handle+0x3a8>)
    819c:	4798      	blx	r3
    819e:	e26e      	b.n	867e <input_handle+0x856>
    81a0:	0000ec74 	.word	0x0000ec74
    81a4:	00009dfd 	.word	0x00009dfd
    81a8:	00007e01 	.word	0x00007e01
    81ac:	00007691 	.word	0x00007691
    81b0:	0000ec7c 	.word	0x0000ec7c
    81b4:	000076ad 	.word	0x000076ad
    81b8:	0000ec84 	.word	0x0000ec84
    81bc:	000076d1 	.word	0x000076d1
    81c0:	0000ec8c 	.word	0x0000ec8c
    81c4:	00009061 	.word	0x00009061
    81c8:	000090bd 	.word	0x000090bd
    81cc:	000076f5 	.word	0x000076f5
    81d0:	00007ddd 	.word	0x00007ddd
    81d4:	0000ec98 	.word	0x0000ec98
    81d8:	00007759 	.word	0x00007759
    81dc:	0000eca4 	.word	0x0000eca4
    81e0:	000077bd 	.word	0x000077bd
    81e4:	0000ecb0 	.word	0x0000ecb0
    81e8:	0000781d 	.word	0x0000781d
    81ec:	0000ecb4 	.word	0x0000ecb4
    81f0:	00007839 	.word	0x00007839
    81f4:	0000ecb8 	.word	0x0000ecb8
    81f8:	00007855 	.word	0x00007855
	} else if (!(strcmp("adc_get", argv[0]))) {
    81fc:	683b      	ldr	r3, [r7, #0]
    81fe:	681a      	ldr	r2, [r3, #0]
    8200:	4bc9      	ldr	r3, [pc, #804]	; (8528 <input_handle+0x700>)
    8202:	0011      	movs	r1, r2
    8204:	0018      	movs	r0, r3
    8206:	4bc9      	ldr	r3, [pc, #804]	; (852c <input_handle+0x704>)
    8208:	4798      	blx	r3
    820a:	1e03      	subs	r3, r0, #0
    820c:	d137      	bne.n	827e <input_handle+0x456>
		int required_args = 3;
    820e:	2303      	movs	r3, #3
    8210:	653b      	str	r3, [r7, #80]	; 0x50
		if (argc != required_args) {
    8212:	687a      	ldr	r2, [r7, #4]
    8214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    8216:	429a      	cmp	r2, r3
    8218:	d006      	beq.n	8228 <input_handle+0x400>
			print_args_error("adc_get", required_args, argc);
    821a:	687a      	ldr	r2, [r7, #4]
    821c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    821e:	4bc2      	ldr	r3, [pc, #776]	; (8528 <input_handle+0x700>)
    8220:	0018      	movs	r0, r3
    8222:	4bc3      	ldr	r3, [pc, #780]	; (8530 <input_handle+0x708>)
    8224:	4798      	blx	r3
			return;
    8226:	e22a      	b.n	867e <input_handle+0x856>
		}
		char port = argv[1][0];
    8228:	683b      	ldr	r3, [r7, #0]
    822a:	3304      	adds	r3, #4
    822c:	681a      	ldr	r2, [r3, #0]
    822e:	234f      	movs	r3, #79	; 0x4f
    8230:	18fb      	adds	r3, r7, r3
    8232:	7812      	ldrb	r2, [r2, #0]
    8234:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    8236:	683b      	ldr	r3, [r7, #0]
    8238:	3308      	adds	r3, #8
    823a:	681b      	ldr	r3, [r3, #0]
    823c:	0018      	movs	r0, r3
    823e:	4bbd      	ldr	r3, [pc, #756]	; (8534 <input_handle+0x70c>)
    8240:	4798      	blx	r3
    8242:	0003      	movs	r3, r0
    8244:	64bb      	str	r3, [r7, #72]	; 0x48
		//TODO: isdigit should check [2][0] for all isdigit calls
		if (isdigit(argv[2][0])) {
    8246:	4bbc      	ldr	r3, [pc, #752]	; (8538 <input_handle+0x710>)
    8248:	4798      	blx	r3
    824a:	0002      	movs	r2, r0
    824c:	683b      	ldr	r3, [r7, #0]
    824e:	3308      	adds	r3, #8
    8250:	681b      	ldr	r3, [r3, #0]
    8252:	781b      	ldrb	r3, [r3, #0]
    8254:	3301      	adds	r3, #1
    8256:	18d3      	adds	r3, r2, r3
    8258:	781b      	ldrb	r3, [r3, #0]
    825a:	001a      	movs	r2, r3
    825c:	2304      	movs	r3, #4
    825e:	4013      	ands	r3, r2
    8260:	d008      	beq.n	8274 <input_handle+0x44c>
			adc_get(port, pin);
    8262:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8264:	234f      	movs	r3, #79	; 0x4f
    8266:	18fb      	adds	r3, r7, r3
    8268:	781b      	ldrb	r3, [r3, #0]
    826a:	0011      	movs	r1, r2
    826c:	0018      	movs	r0, r3
    826e:	4bb3      	ldr	r3, [pc, #716]	; (853c <input_handle+0x714>)
    8270:	4798      	blx	r3
    8272:	e204      	b.n	867e <input_handle+0x856>
		} else {
			print_general_error("adc_get");
    8274:	4bac      	ldr	r3, [pc, #688]	; (8528 <input_handle+0x700>)
    8276:	0018      	movs	r0, r3
    8278:	4bb1      	ldr	r3, [pc, #708]	; (8540 <input_handle+0x718>)
    827a:	4798      	blx	r3
    827c:	e1ff      	b.n	867e <input_handle+0x856>
		}
	} else if (!(strcmp("mcu_temp", argv[0]))) {
    827e:	683b      	ldr	r3, [r7, #0]
    8280:	681a      	ldr	r2, [r3, #0]
    8282:	4bb0      	ldr	r3, [pc, #704]	; (8544 <input_handle+0x71c>)
    8284:	0011      	movs	r1, r2
    8286:	0018      	movs	r0, r3
    8288:	4ba8      	ldr	r3, [pc, #672]	; (852c <input_handle+0x704>)
    828a:	4798      	blx	r3
    828c:	1e03      	subs	r3, r0, #0
    828e:	d10f      	bne.n	82b0 <input_handle+0x488>
		int required_args = 1;
    8290:	2301      	movs	r3, #1
    8292:	647b      	str	r3, [r7, #68]	; 0x44
		if (argc != required_args) {
    8294:	687a      	ldr	r2, [r7, #4]
    8296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8298:	429a      	cmp	r2, r3
    829a:	d006      	beq.n	82aa <input_handle+0x482>
			print_args_error("mcu_temp", required_args, argc);
    829c:	687a      	ldr	r2, [r7, #4]
    829e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    82a0:	4ba8      	ldr	r3, [pc, #672]	; (8544 <input_handle+0x71c>)
    82a2:	0018      	movs	r0, r3
    82a4:	4ba2      	ldr	r3, [pc, #648]	; (8530 <input_handle+0x708>)
    82a6:	4798      	blx	r3
			return;
    82a8:	e1e9      	b.n	867e <input_handle+0x856>
		}
		mcu_temp();
    82aa:	4ba7      	ldr	r3, [pc, #668]	; (8548 <input_handle+0x720>)
    82ac:	4798      	blx	r3
    82ae:	e1e6      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("i2c_scan", argv[0]))) {
    82b0:	683b      	ldr	r3, [r7, #0]
    82b2:	681a      	ldr	r2, [r3, #0]
    82b4:	4ba5      	ldr	r3, [pc, #660]	; (854c <input_handle+0x724>)
    82b6:	0011      	movs	r1, r2
    82b8:	0018      	movs	r0, r3
    82ba:	4b9c      	ldr	r3, [pc, #624]	; (852c <input_handle+0x704>)
    82bc:	4798      	blx	r3
    82be:	1e03      	subs	r3, r0, #0
    82c0:	d113      	bne.n	82ea <input_handle+0x4c2>
		int required_args = 1;
    82c2:	2301      	movs	r3, #1
    82c4:	643b      	str	r3, [r7, #64]	; 0x40
		if (argc != required_args) {
    82c6:	687a      	ldr	r2, [r7, #4]
    82c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    82ca:	429a      	cmp	r2, r3
    82cc:	d006      	beq.n	82dc <input_handle+0x4b4>
			print_args_error("i2c_scan", required_args, argc);
    82ce:	687a      	ldr	r2, [r7, #4]
    82d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
    82d2:	4b9e      	ldr	r3, [pc, #632]	; (854c <input_handle+0x724>)
    82d4:	0018      	movs	r0, r3
    82d6:	4b96      	ldr	r3, [pc, #600]	; (8530 <input_handle+0x708>)
    82d8:	4798      	blx	r3
			return;
    82da:	e1d0      	b.n	867e <input_handle+0x856>
		}
		printf("running i2c_scan\r\n");
    82dc:	4b9c      	ldr	r3, [pc, #624]	; (8550 <input_handle+0x728>)
    82de:	0018      	movs	r0, r3
    82e0:	4b9c      	ldr	r3, [pc, #624]	; (8554 <input_handle+0x72c>)
    82e2:	4798      	blx	r3
		i2c_scan();
    82e4:	4b9c      	ldr	r3, [pc, #624]	; (8558 <input_handle+0x730>)
    82e6:	4798      	blx	r3
    82e8:	e1c9      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("relay1_on", argv[0]))) {
    82ea:	683b      	ldr	r3, [r7, #0]
    82ec:	681a      	ldr	r2, [r3, #0]
    82ee:	4b9b      	ldr	r3, [pc, #620]	; (855c <input_handle+0x734>)
    82f0:	0011      	movs	r1, r2
    82f2:	0018      	movs	r0, r3
    82f4:	4b8d      	ldr	r3, [pc, #564]	; (852c <input_handle+0x704>)
    82f6:	4798      	blx	r3
    82f8:	1e03      	subs	r3, r0, #0
    82fa:	d113      	bne.n	8324 <input_handle+0x4fc>
		int required_args = 1;
    82fc:	2301      	movs	r3, #1
    82fe:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (argc != required_args) {
    8300:	687a      	ldr	r2, [r7, #4]
    8302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8304:	429a      	cmp	r2, r3
    8306:	d006      	beq.n	8316 <input_handle+0x4ee>
			print_args_error("relay1_on", required_args, argc);
    8308:	687a      	ldr	r2, [r7, #4]
    830a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    830c:	4b93      	ldr	r3, [pc, #588]	; (855c <input_handle+0x734>)
    830e:	0018      	movs	r0, r3
    8310:	4b87      	ldr	r3, [pc, #540]	; (8530 <input_handle+0x708>)
    8312:	4798      	blx	r3
			return;
    8314:	e1b3      	b.n	867e <input_handle+0x856>
		}
	printf("Relay 1 turning on.\r\n");
    8316:	4b92      	ldr	r3, [pc, #584]	; (8560 <input_handle+0x738>)
    8318:	0018      	movs	r0, r3
    831a:	4b8e      	ldr	r3, [pc, #568]	; (8554 <input_handle+0x72c>)
    831c:	4798      	blx	r3
	relay1_enable();
    831e:	4b91      	ldr	r3, [pc, #580]	; (8564 <input_handle+0x73c>)
    8320:	4798      	blx	r3
    8322:	e1ac      	b.n	867e <input_handle+0x856>
	}  else if (!(strcmp("relay1_off", argv[0]))) {
    8324:	683b      	ldr	r3, [r7, #0]
    8326:	681a      	ldr	r2, [r3, #0]
    8328:	4b8f      	ldr	r3, [pc, #572]	; (8568 <input_handle+0x740>)
    832a:	0011      	movs	r1, r2
    832c:	0018      	movs	r0, r3
    832e:	4b7f      	ldr	r3, [pc, #508]	; (852c <input_handle+0x704>)
    8330:	4798      	blx	r3
    8332:	1e03      	subs	r3, r0, #0
    8334:	d113      	bne.n	835e <input_handle+0x536>
		int required_args = 1;
    8336:	2301      	movs	r3, #1
    8338:	63bb      	str	r3, [r7, #56]	; 0x38
		if (argc != required_args) {
    833a:	687a      	ldr	r2, [r7, #4]
    833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    833e:	429a      	cmp	r2, r3
    8340:	d006      	beq.n	8350 <input_handle+0x528>
			print_args_error("relay1_off", required_args, argc);
    8342:	687a      	ldr	r2, [r7, #4]
    8344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    8346:	4b88      	ldr	r3, [pc, #544]	; (8568 <input_handle+0x740>)
    8348:	0018      	movs	r0, r3
    834a:	4b79      	ldr	r3, [pc, #484]	; (8530 <input_handle+0x708>)
    834c:	4798      	blx	r3
			return;
    834e:	e196      	b.n	867e <input_handle+0x856>
		}
	printf("Relay 1 turning off.\r\n");
    8350:	4b86      	ldr	r3, [pc, #536]	; (856c <input_handle+0x744>)
    8352:	0018      	movs	r0, r3
    8354:	4b7f      	ldr	r3, [pc, #508]	; (8554 <input_handle+0x72c>)
    8356:	4798      	blx	r3
	relay1_disable();
    8358:	4b85      	ldr	r3, [pc, #532]	; (8570 <input_handle+0x748>)
    835a:	4798      	blx	r3
    835c:	e18f      	b.n	867e <input_handle+0x856>
	}  else if (!(strcmp("relay2_on", argv[0]))) {
    835e:	683b      	ldr	r3, [r7, #0]
    8360:	681a      	ldr	r2, [r3, #0]
    8362:	4b84      	ldr	r3, [pc, #528]	; (8574 <input_handle+0x74c>)
    8364:	0011      	movs	r1, r2
    8366:	0018      	movs	r0, r3
    8368:	4b70      	ldr	r3, [pc, #448]	; (852c <input_handle+0x704>)
    836a:	4798      	blx	r3
    836c:	1e03      	subs	r3, r0, #0
    836e:	d113      	bne.n	8398 <input_handle+0x570>
	int required_args = 1;
    8370:	2301      	movs	r3, #1
    8372:	637b      	str	r3, [r7, #52]	; 0x34
	if (argc != required_args) {
    8374:	687a      	ldr	r2, [r7, #4]
    8376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8378:	429a      	cmp	r2, r3
    837a:	d006      	beq.n	838a <input_handle+0x562>
		print_args_error("relay2_on", required_args, argc);
    837c:	687a      	ldr	r2, [r7, #4]
    837e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8380:	4b7c      	ldr	r3, [pc, #496]	; (8574 <input_handle+0x74c>)
    8382:	0018      	movs	r0, r3
    8384:	4b6a      	ldr	r3, [pc, #424]	; (8530 <input_handle+0x708>)
    8386:	4798      	blx	r3
		return;
    8388:	e179      	b.n	867e <input_handle+0x856>
	}
	printf("Relay 2 turning on.\r\n");
    838a:	4b7b      	ldr	r3, [pc, #492]	; (8578 <input_handle+0x750>)
    838c:	0018      	movs	r0, r3
    838e:	4b71      	ldr	r3, [pc, #452]	; (8554 <input_handle+0x72c>)
    8390:	4798      	blx	r3
	relay2_enable();
    8392:	4b7a      	ldr	r3, [pc, #488]	; (857c <input_handle+0x754>)
    8394:	4798      	blx	r3
    8396:	e172      	b.n	867e <input_handle+0x856>
	}  else if (!(strcmp("relay2_off", argv[0]))) {
    8398:	683b      	ldr	r3, [r7, #0]
    839a:	681a      	ldr	r2, [r3, #0]
    839c:	4b78      	ldr	r3, [pc, #480]	; (8580 <input_handle+0x758>)
    839e:	0011      	movs	r1, r2
    83a0:	0018      	movs	r0, r3
    83a2:	4b62      	ldr	r3, [pc, #392]	; (852c <input_handle+0x704>)
    83a4:	4798      	blx	r3
    83a6:	1e03      	subs	r3, r0, #0
    83a8:	d113      	bne.n	83d2 <input_handle+0x5aa>
	int required_args = 1;
    83aa:	2301      	movs	r3, #1
    83ac:	633b      	str	r3, [r7, #48]	; 0x30
	if (argc != required_args) {
    83ae:	687a      	ldr	r2, [r7, #4]
    83b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    83b2:	429a      	cmp	r2, r3
    83b4:	d006      	beq.n	83c4 <input_handle+0x59c>
		print_args_error("relay2_off", required_args, argc);
    83b6:	687a      	ldr	r2, [r7, #4]
    83b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
    83ba:	4b71      	ldr	r3, [pc, #452]	; (8580 <input_handle+0x758>)
    83bc:	0018      	movs	r0, r3
    83be:	4b5c      	ldr	r3, [pc, #368]	; (8530 <input_handle+0x708>)
    83c0:	4798      	blx	r3
		return;
    83c2:	e15c      	b.n	867e <input_handle+0x856>
	}
	printf("Relay 2 turning off.\r\n");
    83c4:	4b6f      	ldr	r3, [pc, #444]	; (8584 <input_handle+0x75c>)
    83c6:	0018      	movs	r0, r3
    83c8:	4b62      	ldr	r3, [pc, #392]	; (8554 <input_handle+0x72c>)
    83ca:	4798      	blx	r3
	relay2_disable();
    83cc:	4b6e      	ldr	r3, [pc, #440]	; (8588 <input_handle+0x760>)
    83ce:	4798      	blx	r3
    83d0:	e155      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("boost_on", argv[0]))) {
    83d2:	683b      	ldr	r3, [r7, #0]
    83d4:	681a      	ldr	r2, [r3, #0]
    83d6:	4b6d      	ldr	r3, [pc, #436]	; (858c <input_handle+0x764>)
    83d8:	0011      	movs	r1, r2
    83da:	0018      	movs	r0, r3
    83dc:	4b53      	ldr	r3, [pc, #332]	; (852c <input_handle+0x704>)
    83de:	4798      	blx	r3
    83e0:	1e03      	subs	r3, r0, #0
    83e2:	d113      	bne.n	840c <input_handle+0x5e4>
	int required_args = 1;
    83e4:	2301      	movs	r3, #1
    83e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (argc != required_args) {
    83e8:	687a      	ldr	r2, [r7, #4]
    83ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83ec:	429a      	cmp	r2, r3
    83ee:	d006      	beq.n	83fe <input_handle+0x5d6>
		print_args_error("boost_on", required_args, argc);
    83f0:	687a      	ldr	r2, [r7, #4]
    83f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    83f4:	4b65      	ldr	r3, [pc, #404]	; (858c <input_handle+0x764>)
    83f6:	0018      	movs	r0, r3
    83f8:	4b4d      	ldr	r3, [pc, #308]	; (8530 <input_handle+0x708>)
    83fa:	4798      	blx	r3
		return;
    83fc:	e13f      	b.n	867e <input_handle+0x856>
	}
	printf("Boost converter enabled.\r\n");
    83fe:	4b64      	ldr	r3, [pc, #400]	; (8590 <input_handle+0x768>)
    8400:	0018      	movs	r0, r3
    8402:	4b54      	ldr	r3, [pc, #336]	; (8554 <input_handle+0x72c>)
    8404:	4798      	blx	r3
	boost_enable();
    8406:	4b63      	ldr	r3, [pc, #396]	; (8594 <input_handle+0x76c>)
    8408:	4798      	blx	r3
    840a:	e138      	b.n	867e <input_handle+0x856>
	}  else if (!(strcmp("boost_off", argv[0]))) {
    840c:	683b      	ldr	r3, [r7, #0]
    840e:	681a      	ldr	r2, [r3, #0]
    8410:	4b61      	ldr	r3, [pc, #388]	; (8598 <input_handle+0x770>)
    8412:	0011      	movs	r1, r2
    8414:	0018      	movs	r0, r3
    8416:	4b45      	ldr	r3, [pc, #276]	; (852c <input_handle+0x704>)
    8418:	4798      	blx	r3
    841a:	1e03      	subs	r3, r0, #0
    841c:	d113      	bne.n	8446 <input_handle+0x61e>
	int required_args = 1;
    841e:	2301      	movs	r3, #1
    8420:	62bb      	str	r3, [r7, #40]	; 0x28
	if (argc != required_args) {
    8422:	687a      	ldr	r2, [r7, #4]
    8424:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8426:	429a      	cmp	r2, r3
    8428:	d006      	beq.n	8438 <input_handle+0x610>
		print_args_error("boost_off", required_args, argc);
    842a:	687a      	ldr	r2, [r7, #4]
    842c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    842e:	4b5a      	ldr	r3, [pc, #360]	; (8598 <input_handle+0x770>)
    8430:	0018      	movs	r0, r3
    8432:	4b3f      	ldr	r3, [pc, #252]	; (8530 <input_handle+0x708>)
    8434:	4798      	blx	r3
		return;
    8436:	e122      	b.n	867e <input_handle+0x856>
	}
	printf("Boost converter disabled.\r\n");
    8438:	4b58      	ldr	r3, [pc, #352]	; (859c <input_handle+0x774>)
    843a:	0018      	movs	r0, r3
    843c:	4b45      	ldr	r3, [pc, #276]	; (8554 <input_handle+0x72c>)
    843e:	4798      	blx	r3
	boost_disable();
    8440:	4b57      	ldr	r3, [pc, #348]	; (85a0 <input_handle+0x778>)
    8442:	4798      	blx	r3
    8444:	e11b      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("flash", argv[0]))) {
    8446:	683b      	ldr	r3, [r7, #0]
    8448:	681a      	ldr	r2, [r3, #0]
    844a:	4b56      	ldr	r3, [pc, #344]	; (85a4 <input_handle+0x77c>)
    844c:	0011      	movs	r1, r2
    844e:	0018      	movs	r0, r3
    8450:	4b36      	ldr	r3, [pc, #216]	; (852c <input_handle+0x704>)
    8452:	4798      	blx	r3
    8454:	1e03      	subs	r3, r0, #0
    8456:	d10f      	bne.n	8478 <input_handle+0x650>
		int required_args = 1;
    8458:	2301      	movs	r3, #1
    845a:	627b      	str	r3, [r7, #36]	; 0x24
		if (argc != required_args) {
    845c:	687a      	ldr	r2, [r7, #4]
    845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8460:	429a      	cmp	r2, r3
    8462:	d006      	beq.n	8472 <input_handle+0x64a>
			print_args_error("flash", required_args, argc);
    8464:	687a      	ldr	r2, [r7, #4]
    8466:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8468:	4b4e      	ldr	r3, [pc, #312]	; (85a4 <input_handle+0x77c>)
    846a:	0018      	movs	r0, r3
    846c:	4b30      	ldr	r3, [pc, #192]	; (8530 <input_handle+0x708>)
    846e:	4798      	blx	r3
			return;
    8470:	e105      	b.n	867e <input_handle+0x856>
		}
	flash_test();
    8472:	4b4d      	ldr	r3, [pc, #308]	; (85a8 <input_handle+0x780>)
    8474:	4798      	blx	r3
    8476:	e102      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("led1_on", argv[0]))) {
    8478:	683b      	ldr	r3, [r7, #0]
    847a:	681a      	ldr	r2, [r3, #0]
    847c:	4b4b      	ldr	r3, [pc, #300]	; (85ac <input_handle+0x784>)
    847e:	0011      	movs	r1, r2
    8480:	0018      	movs	r0, r3
    8482:	4b2a      	ldr	r3, [pc, #168]	; (852c <input_handle+0x704>)
    8484:	4798      	blx	r3
    8486:	1e03      	subs	r3, r0, #0
    8488:	d113      	bne.n	84b2 <input_handle+0x68a>
		int required_args = 1;
    848a:	2301      	movs	r3, #1
    848c:	623b      	str	r3, [r7, #32]
		if (argc != required_args) {
    848e:	687a      	ldr	r2, [r7, #4]
    8490:	6a3b      	ldr	r3, [r7, #32]
    8492:	429a      	cmp	r2, r3
    8494:	d006      	beq.n	84a4 <input_handle+0x67c>
			print_args_error("led1_on", required_args, argc);
    8496:	687a      	ldr	r2, [r7, #4]
    8498:	6a39      	ldr	r1, [r7, #32]
    849a:	4b44      	ldr	r3, [pc, #272]	; (85ac <input_handle+0x784>)
    849c:	0018      	movs	r0, r3
    849e:	4b24      	ldr	r3, [pc, #144]	; (8530 <input_handle+0x708>)
    84a0:	4798      	blx	r3
			return;
    84a2:	e0ec      	b.n	867e <input_handle+0x856>
		}
	printf("LED1 turning on.\r\n");
    84a4:	4b42      	ldr	r3, [pc, #264]	; (85b0 <input_handle+0x788>)
    84a6:	0018      	movs	r0, r3
    84a8:	4b2a      	ldr	r3, [pc, #168]	; (8554 <input_handle+0x72c>)
    84aa:	4798      	blx	r3
	led1_on();
    84ac:	4b41      	ldr	r3, [pc, #260]	; (85b4 <input_handle+0x78c>)
    84ae:	4798      	blx	r3
    84b0:	e0e5      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("led1_off", argv[0]))) {
    84b2:	683b      	ldr	r3, [r7, #0]
    84b4:	681a      	ldr	r2, [r3, #0]
    84b6:	4b40      	ldr	r3, [pc, #256]	; (85b8 <input_handle+0x790>)
    84b8:	0011      	movs	r1, r2
    84ba:	0018      	movs	r0, r3
    84bc:	4b1b      	ldr	r3, [pc, #108]	; (852c <input_handle+0x704>)
    84be:	4798      	blx	r3
    84c0:	1e03      	subs	r3, r0, #0
    84c2:	d113      	bne.n	84ec <input_handle+0x6c4>
		int required_args = 1;
    84c4:	2301      	movs	r3, #1
    84c6:	61fb      	str	r3, [r7, #28]
		if (argc != required_args) {
    84c8:	687a      	ldr	r2, [r7, #4]
    84ca:	69fb      	ldr	r3, [r7, #28]
    84cc:	429a      	cmp	r2, r3
    84ce:	d006      	beq.n	84de <input_handle+0x6b6>
		print_args_error("led1_off", required_args, argc);
    84d0:	687a      	ldr	r2, [r7, #4]
    84d2:	69f9      	ldr	r1, [r7, #28]
    84d4:	4b38      	ldr	r3, [pc, #224]	; (85b8 <input_handle+0x790>)
    84d6:	0018      	movs	r0, r3
    84d8:	4b15      	ldr	r3, [pc, #84]	; (8530 <input_handle+0x708>)
    84da:	4798      	blx	r3
		return;
    84dc:	e0cf      	b.n	867e <input_handle+0x856>
		}
	printf("LED1 turning off.\r\n");
    84de:	4b37      	ldr	r3, [pc, #220]	; (85bc <input_handle+0x794>)
    84e0:	0018      	movs	r0, r3
    84e2:	4b1c      	ldr	r3, [pc, #112]	; (8554 <input_handle+0x72c>)
    84e4:	4798      	blx	r3
	led1_off();
    84e6:	4b36      	ldr	r3, [pc, #216]	; (85c0 <input_handle+0x798>)
    84e8:	4798      	blx	r3
    84ea:	e0c8      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("led2_on", argv[0]))) {
    84ec:	683b      	ldr	r3, [r7, #0]
    84ee:	681a      	ldr	r2, [r3, #0]
    84f0:	4b34      	ldr	r3, [pc, #208]	; (85c4 <input_handle+0x79c>)
    84f2:	0011      	movs	r1, r2
    84f4:	0018      	movs	r0, r3
    84f6:	4b0d      	ldr	r3, [pc, #52]	; (852c <input_handle+0x704>)
    84f8:	4798      	blx	r3
    84fa:	1e03      	subs	r3, r0, #0
    84fc:	d168      	bne.n	85d0 <input_handle+0x7a8>
		int required_args = 1;
    84fe:	2301      	movs	r3, #1
    8500:	61bb      	str	r3, [r7, #24]
		if (argc != required_args) {
    8502:	687a      	ldr	r2, [r7, #4]
    8504:	69bb      	ldr	r3, [r7, #24]
    8506:	429a      	cmp	r2, r3
    8508:	d006      	beq.n	8518 <input_handle+0x6f0>
			print_args_error("led2_on", required_args, argc);
    850a:	687a      	ldr	r2, [r7, #4]
    850c:	69b9      	ldr	r1, [r7, #24]
    850e:	4b2d      	ldr	r3, [pc, #180]	; (85c4 <input_handle+0x79c>)
    8510:	0018      	movs	r0, r3
    8512:	4b07      	ldr	r3, [pc, #28]	; (8530 <input_handle+0x708>)
    8514:	4798      	blx	r3
			return;
    8516:	e0b2      	b.n	867e <input_handle+0x856>
		}
	printf("LED2 turning on.\r\n");
    8518:	4b2b      	ldr	r3, [pc, #172]	; (85c8 <input_handle+0x7a0>)
    851a:	0018      	movs	r0, r3
    851c:	4b0d      	ldr	r3, [pc, #52]	; (8554 <input_handle+0x72c>)
    851e:	4798      	blx	r3
	led2_on();
    8520:	4b2a      	ldr	r3, [pc, #168]	; (85cc <input_handle+0x7a4>)
    8522:	4798      	blx	r3
    8524:	e0ab      	b.n	867e <input_handle+0x856>
    8526:	46c0      	nop			; (mov r8, r8)
    8528:	0000ecc0 	.word	0x0000ecc0
    852c:	00009dfd 	.word	0x00009dfd
    8530:	00007e01 	.word	0x00007e01
    8534:	00009061 	.word	0x00009061
    8538:	000090bd 	.word	0x000090bd
    853c:	00007955 	.word	0x00007955
    8540:	00007ddd 	.word	0x00007ddd
    8544:	0000ecc8 	.word	0x0000ecc8
    8548:	00007b7d 	.word	0x00007b7d
    854c:	0000ecd4 	.word	0x0000ecd4
    8550:	0000ece0 	.word	0x0000ece0
    8554:	00009c59 	.word	0x00009c59
    8558:	00007c95 	.word	0x00007c95
    855c:	0000ecf4 	.word	0x0000ecf4
    8560:	0000ed00 	.word	0x0000ed00
    8564:	00008a49 	.word	0x00008a49
    8568:	0000ed18 	.word	0x0000ed18
    856c:	0000ed24 	.word	0x0000ed24
    8570:	00008a69 	.word	0x00008a69
    8574:	0000ed3c 	.word	0x0000ed3c
    8578:	0000ed48 	.word	0x0000ed48
    857c:	00008a89 	.word	0x00008a89
    8580:	0000ed60 	.word	0x0000ed60
    8584:	0000ed6c 	.word	0x0000ed6c
    8588:	00008aa9 	.word	0x00008aa9
    858c:	0000ed84 	.word	0x0000ed84
    8590:	0000ed90 	.word	0x0000ed90
    8594:	00008a09 	.word	0x00008a09
    8598:	0000edac 	.word	0x0000edac
    859c:	0000edb8 	.word	0x0000edb8
    85a0:	00008a29 	.word	0x00008a29
    85a4:	0000edd4 	.word	0x0000edd4
    85a8:	00008ba5 	.word	0x00008ba5
    85ac:	0000eddc 	.word	0x0000eddc
    85b0:	0000ede4 	.word	0x0000ede4
    85b4:	00008989 	.word	0x00008989
    85b8:	0000edf8 	.word	0x0000edf8
    85bc:	0000ee04 	.word	0x0000ee04
    85c0:	000089a9 	.word	0x000089a9
    85c4:	0000ee18 	.word	0x0000ee18
    85c8:	0000ee20 	.word	0x0000ee20
    85cc:	000089c9 	.word	0x000089c9
	} else if (!(strcmp("led2_off", argv[0]))) {
    85d0:	683b      	ldr	r3, [r7, #0]
    85d2:	681a      	ldr	r2, [r3, #0]
    85d4:	4b2b      	ldr	r3, [pc, #172]	; (8684 <input_handle+0x85c>)
    85d6:	0011      	movs	r1, r2
    85d8:	0018      	movs	r0, r3
    85da:	4b2b      	ldr	r3, [pc, #172]	; (8688 <input_handle+0x860>)
    85dc:	4798      	blx	r3
    85de:	1e03      	subs	r3, r0, #0
    85e0:	d113      	bne.n	860a <input_handle+0x7e2>
		int required_args = 1;
    85e2:	2301      	movs	r3, #1
    85e4:	617b      	str	r3, [r7, #20]
		if (argc != required_args) {
    85e6:	687a      	ldr	r2, [r7, #4]
    85e8:	697b      	ldr	r3, [r7, #20]
    85ea:	429a      	cmp	r2, r3
    85ec:	d006      	beq.n	85fc <input_handle+0x7d4>
			print_args_error("led2_off", required_args, argc);
    85ee:	687a      	ldr	r2, [r7, #4]
    85f0:	6979      	ldr	r1, [r7, #20]
    85f2:	4b24      	ldr	r3, [pc, #144]	; (8684 <input_handle+0x85c>)
    85f4:	0018      	movs	r0, r3
    85f6:	4b25      	ldr	r3, [pc, #148]	; (868c <input_handle+0x864>)
    85f8:	4798      	blx	r3
			return;
    85fa:	e040      	b.n	867e <input_handle+0x856>
		}
	printf("LED2 turning off.\r\n");
    85fc:	4b24      	ldr	r3, [pc, #144]	; (8690 <input_handle+0x868>)
    85fe:	0018      	movs	r0, r3
    8600:	4b24      	ldr	r3, [pc, #144]	; (8694 <input_handle+0x86c>)
    8602:	4798      	blx	r3
	led2_off();
    8604:	4b24      	ldr	r3, [pc, #144]	; (8698 <input_handle+0x870>)
    8606:	4798      	blx	r3
    8608:	e039      	b.n	867e <input_handle+0x856>
	} else if (!(strcmp("run_pump", argv[0]))) {
    860a:	683b      	ldr	r3, [r7, #0]
    860c:	681a      	ldr	r2, [r3, #0]
    860e:	4b23      	ldr	r3, [pc, #140]	; (869c <input_handle+0x874>)
    8610:	0011      	movs	r1, r2
    8612:	0018      	movs	r0, r3
    8614:	4b1c      	ldr	r3, [pc, #112]	; (8688 <input_handle+0x860>)
    8616:	4798      	blx	r3
    8618:	1e03      	subs	r3, r0, #0
    861a:	d12c      	bne.n	8676 <input_handle+0x84e>
	int required_args = 2;
    861c:	2302      	movs	r3, #2
    861e:	613b      	str	r3, [r7, #16]
	if (argc != required_args) {
    8620:	687a      	ldr	r2, [r7, #4]
    8622:	693b      	ldr	r3, [r7, #16]
    8624:	429a      	cmp	r2, r3
    8626:	d006      	beq.n	8636 <input_handle+0x80e>
		print_args_error("run_pump", required_args, argc);
    8628:	687a      	ldr	r2, [r7, #4]
    862a:	6939      	ldr	r1, [r7, #16]
    862c:	4b1b      	ldr	r3, [pc, #108]	; (869c <input_handle+0x874>)
    862e:	0018      	movs	r0, r3
    8630:	4b16      	ldr	r3, [pc, #88]	; (868c <input_handle+0x864>)
    8632:	4798      	blx	r3
		return;
    8634:	e023      	b.n	867e <input_handle+0x856>
	}
	int duration = atoi(argv[1]);
    8636:	683b      	ldr	r3, [r7, #0]
    8638:	3304      	adds	r3, #4
    863a:	681b      	ldr	r3, [r3, #0]
    863c:	0018      	movs	r0, r3
    863e:	4b18      	ldr	r3, [pc, #96]	; (86a0 <input_handle+0x878>)
    8640:	4798      	blx	r3
    8642:	0003      	movs	r3, r0
    8644:	60fb      	str	r3, [r7, #12]
	if (isdigit(argv[1][0])) {
    8646:	4b17      	ldr	r3, [pc, #92]	; (86a4 <input_handle+0x87c>)
    8648:	4798      	blx	r3
    864a:	0002      	movs	r2, r0
    864c:	683b      	ldr	r3, [r7, #0]
    864e:	3304      	adds	r3, #4
    8650:	681b      	ldr	r3, [r3, #0]
    8652:	781b      	ldrb	r3, [r3, #0]
    8654:	3301      	adds	r3, #1
    8656:	18d3      	adds	r3, r2, r3
    8658:	781b      	ldrb	r3, [r3, #0]
    865a:	001a      	movs	r2, r3
    865c:	2304      	movs	r3, #4
    865e:	4013      	ands	r3, r2
    8660:	d004      	beq.n	866c <input_handle+0x844>
		run_pump(duration);
    8662:	68fb      	ldr	r3, [r7, #12]
    8664:	0018      	movs	r0, r3
    8666:	4b10      	ldr	r3, [pc, #64]	; (86a8 <input_handle+0x880>)
    8668:	4798      	blx	r3
    866a:	e008      	b.n	867e <input_handle+0x856>
	}
	else
	print_general_error("run_pump");
    866c:	4b0b      	ldr	r3, [pc, #44]	; (869c <input_handle+0x874>)
    866e:	0018      	movs	r0, r3
    8670:	4b0e      	ldr	r3, [pc, #56]	; (86ac <input_handle+0x884>)
    8672:	4798      	blx	r3
    8674:	e003      	b.n	867e <input_handle+0x856>
	
	} else {
		printf("Invalid input. See help for correct usage.\r\n");
    8676:	4b0e      	ldr	r3, [pc, #56]	; (86b0 <input_handle+0x888>)
    8678:	0018      	movs	r0, r3
    867a:	4b06      	ldr	r3, [pc, #24]	; (8694 <input_handle+0x86c>)
    867c:	4798      	blx	r3
	}
}
    867e:	46bd      	mov	sp, r7
    8680:	b026      	add	sp, #152	; 0x98
    8682:	bd80      	pop	{r7, pc}
    8684:	0000ee34 	.word	0x0000ee34
    8688:	00009dfd 	.word	0x00009dfd
    868c:	00007e01 	.word	0x00007e01
    8690:	0000ee40 	.word	0x0000ee40
    8694:	00009c59 	.word	0x00009c59
    8698:	000089e9 	.word	0x000089e9
    869c:	0000ee54 	.word	0x0000ee54
    86a0:	00009061 	.word	0x00009061
    86a4:	000090bd 	.word	0x000090bd
    86a8:	00008d11 	.word	0x00008d11
    86ac:	00007ddd 	.word	0x00007ddd
    86b0:	0000ee60 	.word	0x0000ee60

000086b4 <configure_i2c_temp>:
 *      @li Pin SDA: PA08 //TODO: CONFIRM
 *      @li Pin SCL: PA09 //TODO: CONFIRM
 *      @li Clock Generator: @ref GCLK_GENERATOR_0
 */
void configure_i2c_temp(void)
{
    86b4:	b580      	push	{r7, lr}
    86b6:	b08e      	sub	sp, #56	; 0x38
    86b8:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    86ba:	1d3b      	adds	r3, r7, #4
    86bc:	0018      	movs	r0, r3
    86be:	4b10      	ldr	r3, [pc, #64]	; (8700 <configure_i2c_temp+0x4c>)
    86c0:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    86c2:	1d3b      	adds	r3, r7, #4
    86c4:	2201      	movs	r2, #1
    86c6:	4252      	negs	r2, r2
    86c8:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    86ca:	1d3b      	adds	r3, r7, #4
    86cc:	4a0d      	ldr	r2, [pc, #52]	; (8704 <configure_i2c_temp+0x50>)
    86ce:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    86d0:	1d3b      	adds	r3, r7, #4
    86d2:	4a0d      	ldr	r2, [pc, #52]	; (8708 <configure_i2c_temp+0x54>)
    86d4:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    86d6:	1d3b      	adds	r3, r7, #4
    86d8:	2200      	movs	r2, #0
    86da:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_hdc_instance, CONF_I2C_MASTER_MODULE_TEMP, &config_i2c_master) != STATUS_OK);
    86dc:	46c0      	nop			; (mov r8, r8)
    86de:	1d3a      	adds	r2, r7, #4
    86e0:	490a      	ldr	r1, [pc, #40]	; (870c <configure_i2c_temp+0x58>)
    86e2:	4b0b      	ldr	r3, [pc, #44]	; (8710 <configure_i2c_temp+0x5c>)
    86e4:	0018      	movs	r0, r3
    86e6:	4b0b      	ldr	r3, [pc, #44]	; (8714 <configure_i2c_temp+0x60>)
    86e8:	4798      	blx	r3
    86ea:	1e03      	subs	r3, r0, #0
    86ec:	d1f7      	bne.n	86de <configure_i2c_temp+0x2a>
	i2c_master_enable(&i2c_hdc_instance);
    86ee:	4b08      	ldr	r3, [pc, #32]	; (8710 <configure_i2c_temp+0x5c>)
    86f0:	0018      	movs	r0, r3
    86f2:	4b09      	ldr	r3, [pc, #36]	; (8718 <configure_i2c_temp+0x64>)
    86f4:	4798      	blx	r3
}
    86f6:	46c0      	nop			; (mov r8, r8)
    86f8:	46bd      	mov	sp, r7
    86fa:	b00e      	add	sp, #56	; 0x38
    86fc:	bd80      	pop	{r7, pc}
    86fe:	46c0      	nop			; (mov r8, r8)
    8700:	00006ff9 	.word	0x00006ff9
    8704:	00160002 	.word	0x00160002
    8708:	00170002 	.word	0x00170002
    870c:	42001400 	.word	0x42001400
    8710:	200003d0 	.word	0x200003d0
    8714:	00003675 	.word	0x00003675
    8718:	0000707d 	.word	0x0000707d

0000871c <configure_i2c_lux>:

void configure_i2c_lux(void)
{
    871c:	b580      	push	{r7, lr}
    871e:	b08e      	sub	sp, #56	; 0x38
    8720:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    8722:	1d3b      	adds	r3, r7, #4
    8724:	0018      	movs	r0, r3
    8726:	4b10      	ldr	r3, [pc, #64]	; (8768 <configure_i2c_lux+0x4c>)
    8728:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    872a:	1d3b      	adds	r3, r7, #4
    872c:	2201      	movs	r2, #1
    872e:	4252      	negs	r2, r2
    8730:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    8732:	1d3b      	adds	r3, r7, #4
    8734:	4a0d      	ldr	r2, [pc, #52]	; (876c <configure_i2c_lux+0x50>)
    8736:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    8738:	1d3b      	adds	r3, r7, #4
    873a:	4a0d      	ldr	r2, [pc, #52]	; (8770 <configure_i2c_lux+0x54>)
    873c:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    873e:	1d3b      	adds	r3, r7, #4
    8740:	2200      	movs	r2, #0
    8742:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_tsl_instance, CONF_I2C_MASTER_MODULE_LUX, &config_i2c_master) != STATUS_OK);
    8744:	46c0      	nop			; (mov r8, r8)
    8746:	1d3a      	adds	r2, r7, #4
    8748:	490a      	ldr	r1, [pc, #40]	; (8774 <configure_i2c_lux+0x58>)
    874a:	4b0b      	ldr	r3, [pc, #44]	; (8778 <configure_i2c_lux+0x5c>)
    874c:	0018      	movs	r0, r3
    874e:	4b0b      	ldr	r3, [pc, #44]	; (877c <configure_i2c_lux+0x60>)
    8750:	4798      	blx	r3
    8752:	1e03      	subs	r3, r0, #0
    8754:	d1f7      	bne.n	8746 <configure_i2c_lux+0x2a>
	i2c_master_enable(&i2c_tsl_instance);
    8756:	4b08      	ldr	r3, [pc, #32]	; (8778 <configure_i2c_lux+0x5c>)
    8758:	0018      	movs	r0, r3
    875a:	4b09      	ldr	r3, [pc, #36]	; (8780 <configure_i2c_lux+0x64>)
    875c:	4798      	blx	r3
}
    875e:	46c0      	nop			; (mov r8, r8)
    8760:	46bd      	mov	sp, r7
    8762:	b00e      	add	sp, #56	; 0x38
    8764:	bd80      	pop	{r7, pc}
    8766:	46c0      	nop			; (mov r8, r8)
    8768:	00006ff9 	.word	0x00006ff9
    876c:	00080002 	.word	0x00080002
    8770:	00090002 	.word	0x00090002
    8774:	42000800 	.word	0x42000800
    8778:	2000035c 	.word	0x2000035c
    877c:	00003675 	.word	0x00003675
    8780:	0000707d 	.word	0x0000707d

00008784 <i2c_write_complete_callback_hdc>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback_hdc(struct i2c_master_module *const module)
{
    8784:	b580      	push	{r7, lr}
    8786:	b082      	sub	sp, #8
    8788:	af00      	add	r7, sp, #0
    878a:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_hdc_instance, &rd_packet);
    878c:	4a04      	ldr	r2, [pc, #16]	; (87a0 <i2c_write_complete_callback_hdc+0x1c>)
    878e:	4b05      	ldr	r3, [pc, #20]	; (87a4 <i2c_write_complete_callback_hdc+0x20>)
    8790:	0011      	movs	r1, r2
    8792:	0018      	movs	r0, r3
    8794:	4b04      	ldr	r3, [pc, #16]	; (87a8 <i2c_write_complete_callback_hdc+0x24>)
    8796:	4798      	blx	r3
}
    8798:	46c0      	nop			; (mov r8, r8)
    879a:	46bd      	mov	sp, r7
    879c:	b002      	add	sp, #8
    879e:	bd80      	pop	{r7, pc}
    87a0:	2000006c 	.word	0x2000006c
    87a4:	200003d0 	.word	0x200003d0
    87a8:	000041a5 	.word	0x000041a5

000087ac <i2c_write_complete_callback_tsl>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback_tsl(struct i2c_master_module *const module)
{
    87ac:	b580      	push	{r7, lr}
    87ae:	b082      	sub	sp, #8
    87b0:	af00      	add	r7, sp, #0
    87b2:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_tsl_instance, &rd_packet);
    87b4:	4a04      	ldr	r2, [pc, #16]	; (87c8 <i2c_write_complete_callback_tsl+0x1c>)
    87b6:	4b05      	ldr	r3, [pc, #20]	; (87cc <i2c_write_complete_callback_tsl+0x20>)
    87b8:	0011      	movs	r1, r2
    87ba:	0018      	movs	r0, r3
    87bc:	4b04      	ldr	r3, [pc, #16]	; (87d0 <i2c_write_complete_callback_tsl+0x24>)
    87be:	4798      	blx	r3
}
    87c0:	46c0      	nop			; (mov r8, r8)
    87c2:	46bd      	mov	sp, r7
    87c4:	b002      	add	sp, #8
    87c6:	bd80      	pop	{r7, pc}
    87c8:	2000006c 	.word	0x2000006c
    87cc:	2000035c 	.word	0x2000035c
    87d0:	000041a5 	.word	0x000041a5

000087d4 <configure_i2c_callbacks_hdc>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks_hdc(void)
{
    87d4:	b580      	push	{r7, lr}
    87d6:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_hdc_instance, i2c_write_complete_callback_hdc,
    87d8:	4906      	ldr	r1, [pc, #24]	; (87f4 <configure_i2c_callbacks_hdc+0x20>)
    87da:	4b07      	ldr	r3, [pc, #28]	; (87f8 <configure_i2c_callbacks_hdc+0x24>)
    87dc:	2200      	movs	r2, #0
    87de:	0018      	movs	r0, r3
    87e0:	4b06      	ldr	r3, [pc, #24]	; (87fc <configure_i2c_callbacks_hdc+0x28>)
    87e2:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_hdc_instance,
    87e4:	4b04      	ldr	r3, [pc, #16]	; (87f8 <configure_i2c_callbacks_hdc+0x24>)
    87e6:	2100      	movs	r1, #0
    87e8:	0018      	movs	r0, r3
    87ea:	4b05      	ldr	r3, [pc, #20]	; (8800 <configure_i2c_callbacks_hdc+0x2c>)
    87ec:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    87ee:	46c0      	nop			; (mov r8, r8)
    87f0:	46bd      	mov	sp, r7
    87f2:	bd80      	pop	{r7, pc}
    87f4:	00008785 	.word	0x00008785
    87f8:	200003d0 	.word	0x200003d0
    87fc:	00004005 	.word	0x00004005
    8800:	00007375 	.word	0x00007375

00008804 <configure_i2c_callbacks_tsl>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks_tsl(void)
{
    8804:	b580      	push	{r7, lr}
    8806:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_tsl_instance, i2c_write_complete_callback_tsl,
    8808:	4906      	ldr	r1, [pc, #24]	; (8824 <configure_i2c_callbacks_tsl+0x20>)
    880a:	4b07      	ldr	r3, [pc, #28]	; (8828 <configure_i2c_callbacks_tsl+0x24>)
    880c:	2200      	movs	r2, #0
    880e:	0018      	movs	r0, r3
    8810:	4b06      	ldr	r3, [pc, #24]	; (882c <configure_i2c_callbacks_tsl+0x28>)
    8812:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_tsl_instance,
    8814:	4b04      	ldr	r3, [pc, #16]	; (8828 <configure_i2c_callbacks_tsl+0x24>)
    8816:	2100      	movs	r1, #0
    8818:	0018      	movs	r0, r3
    881a:	4b05      	ldr	r3, [pc, #20]	; (8830 <configure_i2c_callbacks_tsl+0x2c>)
    881c:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    881e:	46c0      	nop			; (mov r8, r8)
    8820:	46bd      	mov	sp, r7
    8822:	bd80      	pop	{r7, pc}
    8824:	000087ad 	.word	0x000087ad
    8828:	2000035c 	.word	0x2000035c
    882c:	00004005 	.word	0x00004005
    8830:	00007375 	.word	0x00007375

00008834 <configure_usart>:
 *      @li RX Pin: PA20
 *      @li TX Pin: PA21
 *      @li SERCOM: SERCOM3
 */
void configure_usart(void)
{
    8834:	b580      	push	{r7, lr}
    8836:	b090      	sub	sp, #64	; 0x40
    8838:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
    883a:	003b      	movs	r3, r7
    883c:	0018      	movs	r0, r3
    883e:	4b13      	ldr	r3, [pc, #76]	; (888c <configure_usart+0x58>)
    8840:	4798      	blx	r3
	config_usart.baudrate = 9600;
    8842:	003b      	movs	r3, r7
    8844:	2296      	movs	r2, #150	; 0x96
    8846:	0192      	lsls	r2, r2, #6
    8848:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    884a:	003b      	movs	r3, r7
    884c:	22c4      	movs	r2, #196	; 0xc4
    884e:	0392      	lsls	r2, r2, #14
    8850:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    8852:	003b      	movs	r3, r7
    8854:	2201      	movs	r2, #1
    8856:	4252      	negs	r2, r2
    8858:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    885a:	003b      	movs	r3, r7
    885c:	2201      	movs	r2, #1
    885e:	4252      	negs	r2, r2
    8860:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    8862:	003b      	movs	r3, r7
    8864:	4a0a      	ldr	r2, [pc, #40]	; (8890 <configure_usart+0x5c>)
    8866:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    8868:	003b      	movs	r3, r7
    886a:	4a0a      	ldr	r2, [pc, #40]	; (8894 <configure_usart+0x60>)
    886c:	63da      	str	r2, [r3, #60]	; 0x3c
	//config_usart.pinmux_pad0 = PINMUX_UNUSED;
	//config_usart.pinmux_pad1 = PINMUX_UNUSED;
	//config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
	//config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    886e:	003a      	movs	r2, r7
    8870:	4909      	ldr	r1, [pc, #36]	; (8898 <configure_usart+0x64>)
    8872:	4b0a      	ldr	r3, [pc, #40]	; (889c <configure_usart+0x68>)
    8874:	0018      	movs	r0, r3
    8876:	4b0a      	ldr	r3, [pc, #40]	; (88a0 <configure_usart+0x6c>)
    8878:	4798      	blx	r3

	usart_enable(&usart_instance);
    887a:	4b08      	ldr	r3, [pc, #32]	; (889c <configure_usart+0x68>)
    887c:	0018      	movs	r0, r3
    887e:	4b09      	ldr	r3, [pc, #36]	; (88a4 <configure_usart+0x70>)
    8880:	4798      	blx	r3
}
    8882:	46c0      	nop			; (mov r8, r8)
    8884:	46bd      	mov	sp, r7
    8886:	b010      	add	sp, #64	; 0x40
    8888:	bd80      	pop	{r7, pc}
    888a:	46c0      	nop			; (mov r8, r8)
    888c:	000073ed 	.word	0x000073ed
    8890:	002a0003 	.word	0x002a0003
    8894:	002b0003 	.word	0x002b0003
    8898:	42001800 	.word	0x42001800
    889c:	20000328 	.word	0x20000328
    88a0:	00007599 	.word	0x00007599
    88a4:	000074ad 	.word	0x000074ad

000088a8 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    88a8:	b580      	push	{r7, lr}
    88aa:	b08e      	sub	sp, #56	; 0x38
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    88b0:	2308      	movs	r3, #8
    88b2:	18fb      	adds	r3, r7, r3
    88b4:	0018      	movs	r0, r3
    88b6:	4b0f      	ldr	r3, [pc, #60]	; (88f4 <configure_adc+0x4c>)
    88b8:	4798      	blx	r3
	config_adc.positive_input = pin;
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	b2da      	uxtb	r2, r3
    88be:	2308      	movs	r3, #8
    88c0:	18fb      	adds	r3, r7, r3
    88c2:	731a      	strb	r2, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    88c4:	2308      	movs	r3, #8
    88c6:	18fb      	adds	r3, r7, r3
    88c8:	2201      	movs	r2, #1
    88ca:	705a      	strb	r2, [r3, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    88cc:	2308      	movs	r3, #8
    88ce:	18fb      	adds	r3, r7, r3
    88d0:	2280      	movs	r2, #128	; 0x80
    88d2:	0092      	lsls	r2, r2, #2
    88d4:	805a      	strh	r2, [r3, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    88d6:	2308      	movs	r3, #8
    88d8:	18fa      	adds	r2, r7, r3
    88da:	4907      	ldr	r1, [pc, #28]	; (88f8 <configure_adc+0x50>)
    88dc:	4b07      	ldr	r3, [pc, #28]	; (88fc <configure_adc+0x54>)
    88de:	0018      	movs	r0, r3
    88e0:	4b07      	ldr	r3, [pc, #28]	; (8900 <configure_adc+0x58>)
    88e2:	4798      	blx	r3
	adc_enable(&adc_instance);
    88e4:	4b05      	ldr	r3, [pc, #20]	; (88fc <configure_adc+0x54>)
    88e6:	0018      	movs	r0, r3
    88e8:	4b06      	ldr	r3, [pc, #24]	; (8904 <configure_adc+0x5c>)
    88ea:	4798      	blx	r3
}
    88ec:	46c0      	nop			; (mov r8, r8)
    88ee:	46bd      	mov	sp, r7
    88f0:	b00e      	add	sp, #56	; 0x38
    88f2:	bd80      	pop	{r7, pc}
    88f4:	00002a95 	.word	0x00002a95
    88f8:	42004000 	.word	0x42004000
    88fc:	20000438 	.word	0x20000438
    8900:	000030e5 	.word	0x000030e5
    8904:	00006e6d 	.word	0x00006e6d

00008908 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    8908:	b580      	push	{r7, lr}
    890a:	b084      	sub	sp, #16
    890c:	af00      	add	r7, sp, #0
    890e:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    8910:	230c      	movs	r3, #12
    8912:	18fb      	adds	r3, r7, r3
    8914:	0018      	movs	r0, r3
    8916:	4b09      	ldr	r3, [pc, #36]	; (893c <configure_port_pins_set+0x34>)
    8918:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    891a:	230c      	movs	r3, #12
    891c:	18fb      	adds	r3, r7, r3
    891e:	2201      	movs	r2, #1
    8920:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(pin, &config_port_pin);
    8922:	687b      	ldr	r3, [r7, #4]
    8924:	b2db      	uxtb	r3, r3
    8926:	220c      	movs	r2, #12
    8928:	18ba      	adds	r2, r7, r2
    892a:	0011      	movs	r1, r2
    892c:	0018      	movs	r0, r3
    892e:	4b04      	ldr	r3, [pc, #16]	; (8940 <configure_port_pins_set+0x38>)
    8930:	4798      	blx	r3
}
    8932:	46c0      	nop			; (mov r8, r8)
    8934:	46bd      	mov	sp, r7
    8936:	b004      	add	sp, #16
    8938:	bd80      	pop	{r7, pc}
    893a:	46c0      	nop			; (mov r8, r8)
    893c:	00007141 	.word	0x00007141
    8940:	00005b99 	.word	0x00005b99

00008944 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
    8944:	b580      	push	{r7, lr}
    8946:	b084      	sub	sp, #16
    8948:	af00      	add	r7, sp, #0
    894a:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    894c:	230c      	movs	r3, #12
    894e:	18fb      	adds	r3, r7, r3
    8950:	0018      	movs	r0, r3
    8952:	4b0b      	ldr	r3, [pc, #44]	; (8980 <configure_port_pins_get+0x3c>)
    8954:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    8956:	230c      	movs	r3, #12
    8958:	18fb      	adds	r3, r7, r3
    895a:	2200      	movs	r2, #0
    895c:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    895e:	230c      	movs	r3, #12
    8960:	18fb      	adds	r3, r7, r3
    8962:	2201      	movs	r2, #1
    8964:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(pin, &config_port_pin);
    8966:	687b      	ldr	r3, [r7, #4]
    8968:	b2db      	uxtb	r3, r3
    896a:	220c      	movs	r2, #12
    896c:	18ba      	adds	r2, r7, r2
    896e:	0011      	movs	r1, r2
    8970:	0018      	movs	r0, r3
    8972:	4b04      	ldr	r3, [pc, #16]	; (8984 <configure_port_pins_get+0x40>)
    8974:	4798      	blx	r3
}
    8976:	46c0      	nop			; (mov r8, r8)
    8978:	46bd      	mov	sp, r7
    897a:	b004      	add	sp, #16
    897c:	bd80      	pop	{r7, pc}
    897e:	46c0      	nop			; (mov r8, r8)
    8980:	00007141 	.word	0x00007141
    8984:	00005b99 	.word	0x00005b99

00008988 <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
    8988:	b580      	push	{r7, lr}
    898a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
    898c:	2015      	movs	r0, #21
    898e:	4b04      	ldr	r3, [pc, #16]	; (89a0 <led1_on+0x18>)
    8990:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, true);	
    8992:	2101      	movs	r1, #1
    8994:	2015      	movs	r0, #21
    8996:	4b03      	ldr	r3, [pc, #12]	; (89a4 <led1_on+0x1c>)
    8998:	4798      	blx	r3
}
    899a:	46c0      	nop			; (mov r8, r8)
    899c:	46bd      	mov	sp, r7
    899e:	bd80      	pop	{r7, pc}
    89a0:	00008909 	.word	0x00008909
    89a4:	000071a9 	.word	0x000071a9

000089a8 <led1_off>:

void led1_off(void)
{
    89a8:	b580      	push	{r7, lr}
    89aa:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
    89ac:	2015      	movs	r0, #21
    89ae:	4b04      	ldr	r3, [pc, #16]	; (89c0 <led1_off+0x18>)
    89b0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, false);
    89b2:	2100      	movs	r1, #0
    89b4:	2015      	movs	r0, #21
    89b6:	4b03      	ldr	r3, [pc, #12]	; (89c4 <led1_off+0x1c>)
    89b8:	4798      	blx	r3
}
    89ba:	46c0      	nop			; (mov r8, r8)
    89bc:	46bd      	mov	sp, r7
    89be:	bd80      	pop	{r7, pc}
    89c0:	00008909 	.word	0x00008909
    89c4:	000071a9 	.word	0x000071a9

000089c8 <led2_on>:

void led2_on(void)
{
    89c8:	b580      	push	{r7, lr}
    89ca:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
    89cc:	2003      	movs	r0, #3
    89ce:	4b04      	ldr	r3, [pc, #16]	; (89e0 <led2_on+0x18>)
    89d0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, true);
    89d2:	2101      	movs	r1, #1
    89d4:	2003      	movs	r0, #3
    89d6:	4b03      	ldr	r3, [pc, #12]	; (89e4 <led2_on+0x1c>)
    89d8:	4798      	blx	r3
}
    89da:	46c0      	nop			; (mov r8, r8)
    89dc:	46bd      	mov	sp, r7
    89de:	bd80      	pop	{r7, pc}
    89e0:	00008909 	.word	0x00008909
    89e4:	000071a9 	.word	0x000071a9

000089e8 <led2_off>:

void led2_off(void)
{
    89e8:	b580      	push	{r7, lr}
    89ea:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
    89ec:	2003      	movs	r0, #3
    89ee:	4b04      	ldr	r3, [pc, #16]	; (8a00 <led2_off+0x18>)
    89f0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, false);
    89f2:	2100      	movs	r1, #0
    89f4:	2003      	movs	r0, #3
    89f6:	4b03      	ldr	r3, [pc, #12]	; (8a04 <led2_off+0x1c>)
    89f8:	4798      	blx	r3
}
    89fa:	46c0      	nop			; (mov r8, r8)
    89fc:	46bd      	mov	sp, r7
    89fe:	bd80      	pop	{r7, pc}
    8a00:	00008909 	.word	0x00008909
    8a04:	000071a9 	.word	0x000071a9

00008a08 <boost_enable>:

void boost_enable(void)
{
    8a08:	b580      	push	{r7, lr}
    8a0a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA20);
    8a0c:	2014      	movs	r0, #20
    8a0e:	4b04      	ldr	r3, [pc, #16]	; (8a20 <boost_enable+0x18>)
    8a10:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20, true);
    8a12:	2101      	movs	r1, #1
    8a14:	2014      	movs	r0, #20
    8a16:	4b03      	ldr	r3, [pc, #12]	; (8a24 <boost_enable+0x1c>)
    8a18:	4798      	blx	r3
}
    8a1a:	46c0      	nop			; (mov r8, r8)
    8a1c:	46bd      	mov	sp, r7
    8a1e:	bd80      	pop	{r7, pc}
    8a20:	00008909 	.word	0x00008909
    8a24:	000071a9 	.word	0x000071a9

00008a28 <boost_disable>:

void boost_disable(void)
{
    8a28:	b580      	push	{r7, lr}
    8a2a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA20);
    8a2c:	2014      	movs	r0, #20
    8a2e:	4b04      	ldr	r3, [pc, #16]	; (8a40 <boost_disable+0x18>)
    8a30:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20, false);
    8a32:	2100      	movs	r1, #0
    8a34:	2014      	movs	r0, #20
    8a36:	4b03      	ldr	r3, [pc, #12]	; (8a44 <boost_disable+0x1c>)
    8a38:	4798      	blx	r3
}
    8a3a:	46c0      	nop			; (mov r8, r8)
    8a3c:	46bd      	mov	sp, r7
    8a3e:	bd80      	pop	{r7, pc}
    8a40:	00008909 	.word	0x00008909
    8a44:	000071a9 	.word	0x000071a9

00008a48 <relay1_enable>:

void relay1_enable(void)
{
    8a48:	b580      	push	{r7, lr}
    8a4a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
    8a4c:	2022      	movs	r0, #34	; 0x22
    8a4e:	4b04      	ldr	r3, [pc, #16]	; (8a60 <relay1_enable+0x18>)
    8a50:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, true);
    8a52:	2101      	movs	r1, #1
    8a54:	2022      	movs	r0, #34	; 0x22
    8a56:	4b03      	ldr	r3, [pc, #12]	; (8a64 <relay1_enable+0x1c>)
    8a58:	4798      	blx	r3
}
    8a5a:	46c0      	nop			; (mov r8, r8)
    8a5c:	46bd      	mov	sp, r7
    8a5e:	bd80      	pop	{r7, pc}
    8a60:	00008909 	.word	0x00008909
    8a64:	000071a9 	.word	0x000071a9

00008a68 <relay1_disable>:

void relay1_disable(void)
{
    8a68:	b580      	push	{r7, lr}
    8a6a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
    8a6c:	2022      	movs	r0, #34	; 0x22
    8a6e:	4b04      	ldr	r3, [pc, #16]	; (8a80 <relay1_disable+0x18>)
    8a70:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, false);
    8a72:	2100      	movs	r1, #0
    8a74:	2022      	movs	r0, #34	; 0x22
    8a76:	4b03      	ldr	r3, [pc, #12]	; (8a84 <relay1_disable+0x1c>)
    8a78:	4798      	blx	r3
}
    8a7a:	46c0      	nop			; (mov r8, r8)
    8a7c:	46bd      	mov	sp, r7
    8a7e:	bd80      	pop	{r7, pc}
    8a80:	00008909 	.word	0x00008909
    8a84:	000071a9 	.word	0x000071a9

00008a88 <relay2_enable>:

void relay2_enable(void)
{
    8a88:	b580      	push	{r7, lr}
    8a8a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
    8a8c:	2023      	movs	r0, #35	; 0x23
    8a8e:	4b04      	ldr	r3, [pc, #16]	; (8aa0 <relay2_enable+0x18>)
    8a90:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, true);
    8a92:	2101      	movs	r1, #1
    8a94:	2023      	movs	r0, #35	; 0x23
    8a96:	4b03      	ldr	r3, [pc, #12]	; (8aa4 <relay2_enable+0x1c>)
    8a98:	4798      	blx	r3
}
    8a9a:	46c0      	nop			; (mov r8, r8)
    8a9c:	46bd      	mov	sp, r7
    8a9e:	bd80      	pop	{r7, pc}
    8aa0:	00008909 	.word	0x00008909
    8aa4:	000071a9 	.word	0x000071a9

00008aa8 <relay2_disable>:

void relay2_disable(void)
{
    8aa8:	b580      	push	{r7, lr}
    8aaa:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
    8aac:	2023      	movs	r0, #35	; 0x23
    8aae:	4b04      	ldr	r3, [pc, #16]	; (8ac0 <relay2_disable+0x18>)
    8ab0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, false);
    8ab2:	2100      	movs	r1, #0
    8ab4:	2023      	movs	r0, #35	; 0x23
    8ab6:	4b03      	ldr	r3, [pc, #12]	; (8ac4 <relay2_disable+0x1c>)
    8ab8:	4798      	blx	r3
}
    8aba:	46c0      	nop			; (mov r8, r8)
    8abc:	46bd      	mov	sp, r7
    8abe:	bd80      	pop	{r7, pc}
    8ac0:	00008909 	.word	0x00008909
    8ac4:	000071a9 	.word	0x000071a9

00008ac8 <gpio5_enable>:

void gpio5_enable(void)
{
    8ac8:	b580      	push	{r7, lr}
    8aca:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
    8acc:	2037      	movs	r0, #55	; 0x37
    8ace:	4b04      	ldr	r3, [pc, #16]	; (8ae0 <gpio5_enable+0x18>)
    8ad0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, true);
    8ad2:	2101      	movs	r1, #1
    8ad4:	2037      	movs	r0, #55	; 0x37
    8ad6:	4b03      	ldr	r3, [pc, #12]	; (8ae4 <gpio5_enable+0x1c>)
    8ad8:	4798      	blx	r3
}
    8ada:	46c0      	nop			; (mov r8, r8)
    8adc:	46bd      	mov	sp, r7
    8ade:	bd80      	pop	{r7, pc}
    8ae0:	00008909 	.word	0x00008909
    8ae4:	000071a9 	.word	0x000071a9

00008ae8 <gpio5_disable>:

void gpio5_disable(void)
{
    8ae8:	b580      	push	{r7, lr}
    8aea:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
    8aec:	2037      	movs	r0, #55	; 0x37
    8aee:	4b04      	ldr	r3, [pc, #16]	; (8b00 <gpio5_disable+0x18>)
    8af0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, false);
    8af2:	2100      	movs	r1, #0
    8af4:	2037      	movs	r0, #55	; 0x37
    8af6:	4b03      	ldr	r3, [pc, #12]	; (8b04 <gpio5_disable+0x1c>)
    8af8:	4798      	blx	r3
}
    8afa:	46c0      	nop			; (mov r8, r8)
    8afc:	46bd      	mov	sp, r7
    8afe:	bd80      	pop	{r7, pc}
    8b00:	00008909 	.word	0x00008909
    8b04:	000071a9 	.word	0x000071a9

00008b08 <at25dfx_init>:

/**
 * Initializes at25dfx flash
 */
static void at25dfx_init(void)
{
    8b08:	b580      	push	{r7, lr}
    8b0a:	b090      	sub	sp, #64	; 0x40
    8b0c:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at_chip_config;
	struct spi_config at25dfx_spi_config;
	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
    8b0e:	1d3b      	adds	r3, r7, #4
    8b10:	0018      	movs	r0, r3
    8b12:	4b19      	ldr	r3, [pc, #100]	; (8b78 <at25dfx_init+0x70>)
    8b14:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    8b16:	1d3b      	adds	r3, r7, #4
    8b18:	4a18      	ldr	r2, [pc, #96]	; (8b7c <at25dfx_init+0x74>)
    8b1a:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    8b1c:	1d3b      	adds	r3, r7, #4
    8b1e:	2280      	movs	r2, #128	; 0x80
    8b20:	0252      	lsls	r2, r2, #9
    8b22:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    8b24:	1d3b      	adds	r3, r7, #4
    8b26:	4a16      	ldr	r2, [pc, #88]	; (8b80 <at25dfx_init+0x78>)
    8b28:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    8b2a:	1d3b      	adds	r3, r7, #4
    8b2c:	2201      	movs	r2, #1
    8b2e:	4252      	negs	r2, r2
    8b30:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    8b32:	1d3b      	adds	r3, r7, #4
    8b34:	4a13      	ldr	r2, [pc, #76]	; (8b84 <at25dfx_init+0x7c>)
    8b36:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    8b38:	1d3b      	adds	r3, r7, #4
    8b3a:	4a13      	ldr	r2, [pc, #76]	; (8b88 <at25dfx_init+0x80>)
    8b3c:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    8b3e:	1d3a      	adds	r2, r7, #4
    8b40:	4912      	ldr	r1, [pc, #72]	; (8b8c <at25dfx_init+0x84>)
    8b42:	4b13      	ldr	r3, [pc, #76]	; (8b90 <at25dfx_init+0x88>)
    8b44:	0018      	movs	r0, r3
    8b46:	4b13      	ldr	r3, [pc, #76]	; (8b94 <at25dfx_init+0x8c>)
    8b48:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
    8b4a:	4b11      	ldr	r3, [pc, #68]	; (8b90 <at25dfx_init+0x88>)
    8b4c:	0018      	movs	r0, r3
    8b4e:	4b12      	ldr	r3, [pc, #72]	; (8b98 <at25dfx_init+0x90>)
    8b50:	4798      	blx	r3
	
	at_chip_config.type = AT25DFX_MEM_TYPE;
    8b52:	233c      	movs	r3, #60	; 0x3c
    8b54:	18fb      	adds	r3, r7, r3
    8b56:	2204      	movs	r2, #4
    8b58:	701a      	strb	r2, [r3, #0]
	at_chip_config.cs_pin = AT25DFX_CS;
    8b5a:	233c      	movs	r3, #60	; 0x3c
    8b5c:	18fb      	adds	r3, r7, r3
    8b5e:	2207      	movs	r2, #7
    8b60:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at_chip_config);
    8b62:	233c      	movs	r3, #60	; 0x3c
    8b64:	18fa      	adds	r2, r7, r3
    8b66:	490a      	ldr	r1, [pc, #40]	; (8b90 <at25dfx_init+0x88>)
    8b68:	4b0c      	ldr	r3, [pc, #48]	; (8b9c <at25dfx_init+0x94>)
    8b6a:	0018      	movs	r0, r3
    8b6c:	4b0c      	ldr	r3, [pc, #48]	; (8ba0 <at25dfx_init+0x98>)
    8b6e:	4798      	blx	r3
}
    8b70:	46c0      	nop			; (mov r8, r8)
    8b72:	46bd      	mov	sp, r7
    8b74:	b010      	add	sp, #64	; 0x40
    8b76:	bd80      	pop	{r7, pc}
    8b78:	000072f1 	.word	0x000072f1
    8b7c:	000f4240 	.word	0x000f4240
    8b80:	00100002 	.word	0x00100002
    8b84:	00120002 	.word	0x00120002
    8b88:	00130002 	.word	0x00130002
    8b8c:	42000c00 	.word	0x42000c00
    8b90:	200003f8 	.word	0x200003f8
    8b94:	00001789 	.word	0x00001789
    8b98:	000072a1 	.word	0x000072a1
    8b9c:	200003c8 	.word	0x200003c8
    8ba0:	0000730d 	.word	0x0000730d

00008ba4 <flash_test>:
/**
 * Tests at25dfx flash
 Writes buffer to address and reads, checks CRCs to match
 */
void flash_test(void)
{
    8ba4:	b590      	push	{r4, r7, lr}
    8ba6:	b083      	sub	sp, #12
    8ba8:	af00      	add	r7, sp, #0
	at25dfx_init();
    8baa:	4b3f      	ldr	r3, [pc, #252]	; (8ca8 <flash_test+0x104>)
    8bac:	4798      	blx	r3
	
	
	

	printf("flash initialized\r\n");
    8bae:	4b3f      	ldr	r3, [pc, #252]	; (8cac <flash_test+0x108>)
    8bb0:	0018      	movs	r0, r3
    8bb2:	4b3f      	ldr	r3, [pc, #252]	; (8cb0 <flash_test+0x10c>)
    8bb4:	4798      	blx	r3
	
	//calculate initial checksum of write
	crc32_calculate(write_buffer, sizeof(write_buffer), &crc1);
    8bb6:	4a3f      	ldr	r2, [pc, #252]	; (8cb4 <flash_test+0x110>)
    8bb8:	4b3f      	ldr	r3, [pc, #252]	; (8cb8 <flash_test+0x114>)
    8bba:	210a      	movs	r1, #10
    8bbc:	0018      	movs	r0, r3
    8bbe:	4b3f      	ldr	r3, [pc, #252]	; (8cbc <flash_test+0x118>)
    8bc0:	4798      	blx	r3

	at25dfx_chip_wake(&at25dfx_chip);
    8bc2:	4b3f      	ldr	r3, [pc, #252]	; (8cc0 <flash_test+0x11c>)
    8bc4:	0018      	movs	r0, r3
    8bc6:	4b3f      	ldr	r3, [pc, #252]	; (8cc4 <flash_test+0x120>)
    8bc8:	4798      	blx	r3
	
	//check if chip is there
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    8bca:	4b3d      	ldr	r3, [pc, #244]	; (8cc0 <flash_test+0x11c>)
    8bcc:	0018      	movs	r0, r3
    8bce:	4b3e      	ldr	r3, [pc, #248]	; (8cc8 <flash_test+0x124>)
    8bd0:	4798      	blx	r3
    8bd2:	1e03      	subs	r3, r0, #0
    8bd4:	d003      	beq.n	8bde <flash_test+0x3a>
		printf("No chip.\r\n");
    8bd6:	4b3d      	ldr	r3, [pc, #244]	; (8ccc <flash_test+0x128>)
    8bd8:	0018      	movs	r0, r3
    8bda:	4b35      	ldr	r3, [pc, #212]	; (8cb0 <flash_test+0x10c>)
    8bdc:	4798      	blx	r3
	}
	
	//read beginning of memory
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x0000, read_buffer, AT25DFX_BUFFER_SIZE);
    8bde:	4a3c      	ldr	r2, [pc, #240]	; (8cd0 <flash_test+0x12c>)
    8be0:	4837      	ldr	r0, [pc, #220]	; (8cc0 <flash_test+0x11c>)
    8be2:	230a      	movs	r3, #10
    8be4:	2100      	movs	r1, #0
    8be6:	4c3b      	ldr	r4, [pc, #236]	; (8cd4 <flash_test+0x130>)
    8be8:	47a0      	blx	r4
	//disable protection
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    8bea:	2380      	movs	r3, #128	; 0x80
    8bec:	0259      	lsls	r1, r3, #9
    8bee:	4b34      	ldr	r3, [pc, #208]	; (8cc0 <flash_test+0x11c>)
    8bf0:	2200      	movs	r2, #0
    8bf2:	0018      	movs	r0, r3
    8bf4:	4b38      	ldr	r3, [pc, #224]	; (8cd8 <flash_test+0x134>)
    8bf6:	4798      	blx	r3
	//erase block (sets to FF's)
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    8bf8:	2380      	movs	r3, #128	; 0x80
    8bfa:	0259      	lsls	r1, r3, #9
    8bfc:	4b30      	ldr	r3, [pc, #192]	; (8cc0 <flash_test+0x11c>)
    8bfe:	2200      	movs	r2, #0
    8c00:	0018      	movs	r0, r3
    8c02:	4b36      	ldr	r3, [pc, #216]	; (8cdc <flash_test+0x138>)
    8c04:	4798      	blx	r3
	//write write buffer at 0x10000
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
    8c06:	4a2c      	ldr	r2, [pc, #176]	; (8cb8 <flash_test+0x114>)
    8c08:	2380      	movs	r3, #128	; 0x80
    8c0a:	0259      	lsls	r1, r3, #9
    8c0c:	482c      	ldr	r0, [pc, #176]	; (8cc0 <flash_test+0x11c>)
    8c0e:	230a      	movs	r3, #10
    8c10:	4c33      	ldr	r4, [pc, #204]	; (8ce0 <flash_test+0x13c>)
    8c12:	47a0      	blx	r4
	//re-enable protection
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    8c14:	4b2a      	ldr	r3, [pc, #168]	; (8cc0 <flash_test+0x11c>)
    8c16:	2101      	movs	r1, #1
    8c18:	0018      	movs	r0, r3
    8c1a:	4b32      	ldr	r3, [pc, #200]	; (8ce4 <flash_test+0x140>)
    8c1c:	4798      	blx	r3
	
	//read at 0x10000 if read doesn't return OK, there is an error
	if (at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE) != STATUS_OK) {
    8c1e:	4a2c      	ldr	r2, [pc, #176]	; (8cd0 <flash_test+0x12c>)
    8c20:	2380      	movs	r3, #128	; 0x80
    8c22:	0259      	lsls	r1, r3, #9
    8c24:	4826      	ldr	r0, [pc, #152]	; (8cc0 <flash_test+0x11c>)
    8c26:	230a      	movs	r3, #10
    8c28:	4c2a      	ldr	r4, [pc, #168]	; (8cd4 <flash_test+0x130>)
    8c2a:	47a0      	blx	r4
    8c2c:	1e03      	subs	r3, r0, #0
    8c2e:	d003      	beq.n	8c38 <flash_test+0x94>
		printf("Read error\r\n");
    8c30:	4b2d      	ldr	r3, [pc, #180]	; (8ce8 <flash_test+0x144>)
    8c32:	0018      	movs	r0, r3
    8c34:	4b1e      	ldr	r3, [pc, #120]	; (8cb0 <flash_test+0x10c>)
    8c36:	4798      	blx	r3
	}
	//print read buffer
	for (int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    8c38:	2300      	movs	r3, #0
    8c3a:	607b      	str	r3, [r7, #4]
    8c3c:	e00c      	b.n	8c58 <flash_test+0xb4>
		printf("%d", read_buffer[i]);
    8c3e:	4a24      	ldr	r2, [pc, #144]	; (8cd0 <flash_test+0x12c>)
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	18d3      	adds	r3, r2, r3
    8c44:	781b      	ldrb	r3, [r3, #0]
    8c46:	001a      	movs	r2, r3
    8c48:	4b28      	ldr	r3, [pc, #160]	; (8cec <flash_test+0x148>)
    8c4a:	0011      	movs	r1, r2
    8c4c:	0018      	movs	r0, r3
    8c4e:	4b28      	ldr	r3, [pc, #160]	; (8cf0 <flash_test+0x14c>)
    8c50:	4798      	blx	r3
	for (int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    8c52:	687b      	ldr	r3, [r7, #4]
    8c54:	3301      	adds	r3, #1
    8c56:	607b      	str	r3, [r7, #4]
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	2b09      	cmp	r3, #9
    8c5c:	ddef      	ble.n	8c3e <flash_test+0x9a>
	}
	printf("\r\n");
    8c5e:	4b25      	ldr	r3, [pc, #148]	; (8cf4 <flash_test+0x150>)
    8c60:	0018      	movs	r0, r3
    8c62:	4b13      	ldr	r3, [pc, #76]	; (8cb0 <flash_test+0x10c>)
    8c64:	4798      	blx	r3
	
	//calculate crc for read
	crc32_recalculate(read_buffer, sizeof(read_buffer), &crc2);
    8c66:	4a24      	ldr	r2, [pc, #144]	; (8cf8 <flash_test+0x154>)
    8c68:	4b19      	ldr	r3, [pc, #100]	; (8cd0 <flash_test+0x12c>)
    8c6a:	210a      	movs	r1, #10
    8c6c:	0018      	movs	r0, r3
    8c6e:	4b23      	ldr	r3, [pc, #140]	; (8cfc <flash_test+0x158>)
    8c70:	4798      	blx	r3
	//if they don't match, its an error
	if (crc2 != crc1) {
    8c72:	4b21      	ldr	r3, [pc, #132]	; (8cf8 <flash_test+0x154>)
    8c74:	681a      	ldr	r2, [r3, #0]
    8c76:	4b0f      	ldr	r3, [pc, #60]	; (8cb4 <flash_test+0x110>)
    8c78:	681b      	ldr	r3, [r3, #0]
    8c7a:	429a      	cmp	r2, r3
    8c7c:	d004      	beq.n	8c88 <flash_test+0xe4>
		printf("CRC error!\r\n");
    8c7e:	4b20      	ldr	r3, [pc, #128]	; (8d00 <flash_test+0x15c>)
    8c80:	0018      	movs	r0, r3
    8c82:	4b0b      	ldr	r3, [pc, #44]	; (8cb0 <flash_test+0x10c>)
    8c84:	4798      	blx	r3
    8c86:	e003      	b.n	8c90 <flash_test+0xec>

		} else {
		printf("CRC matched!\r\n");
    8c88:	4b1e      	ldr	r3, [pc, #120]	; (8d04 <flash_test+0x160>)
    8c8a:	0018      	movs	r0, r3
    8c8c:	4b08      	ldr	r3, [pc, #32]	; (8cb0 <flash_test+0x10c>)
    8c8e:	4798      	blx	r3
	}
	
	printf("Flash sleeping\r\n");
    8c90:	4b1d      	ldr	r3, [pc, #116]	; (8d08 <flash_test+0x164>)
    8c92:	0018      	movs	r0, r3
    8c94:	4b06      	ldr	r3, [pc, #24]	; (8cb0 <flash_test+0x10c>)
    8c96:	4798      	blx	r3
	
	at25dfx_chip_sleep(&at25dfx_chip);	
    8c98:	4b09      	ldr	r3, [pc, #36]	; (8cc0 <flash_test+0x11c>)
    8c9a:	0018      	movs	r0, r3
    8c9c:	4b1b      	ldr	r3, [pc, #108]	; (8d0c <flash_test+0x168>)
    8c9e:	4798      	blx	r3
}
    8ca0:	46c0      	nop			; (mov r8, r8)
    8ca2:	46bd      	mov	sp, r7
    8ca4:	b003      	add	sp, #12
    8ca6:	bd90      	pop	{r4, r7, pc}
    8ca8:	00008b09 	.word	0x00008b09
    8cac:	0000ee8c 	.word	0x0000ee8c
    8cb0:	00009c59 	.word	0x00009c59
    8cb4:	20000384 	.word	0x20000384
    8cb8:	2000004c 	.word	0x2000004c
    8cbc:	000070f1 	.word	0x000070f1
    8cc0:	200003c8 	.word	0x200003c8
    8cc4:	00000e39 	.word	0x00000e39
    8cc8:	0000082d 	.word	0x0000082d
    8ccc:	0000eea0 	.word	0x0000eea0
    8cd0:	200002b8 	.word	0x200002b8
    8cd4:	000008d9 	.word	0x000008d9
    8cd8:	00000ce9 	.word	0x00000ce9
    8cdc:	00000b39 	.word	0x00000b39
    8ce0:	00000991 	.word	0x00000991
    8ce4:	00000c35 	.word	0x00000c35
    8ce8:	0000eeac 	.word	0x0000eeac
    8cec:	0000eeb8 	.word	0x0000eeb8
    8cf0:	00009b65 	.word	0x00009b65
    8cf4:	0000eebc 	.word	0x0000eebc
    8cf8:	20000434 	.word	0x20000434
    8cfc:	00000f15 	.word	0x00000f15
    8d00:	0000eec0 	.word	0x0000eec0
    8d04:	0000eecc 	.word	0x0000eecc
    8d08:	0000eedc 	.word	0x0000eedc
    8d0c:	00000dad 	.word	0x00000dad

00008d10 <run_pump>:

	tcc_init(&tcc_instance_pwm, CONF_PWM_MODULE, &config_tcc);
	tcc_enable(&tcc_instance_pwm);
}

void run_pump(int duration) {
    8d10:	b580      	push	{r7, lr}
    8d12:	b082      	sub	sp, #8
    8d14:	af00      	add	r7, sp, #0
    8d16:	6078      	str	r0, [r7, #4]
	
	//boost_enable();
	gpio5_enable();
    8d18:	4b09      	ldr	r3, [pc, #36]	; (8d40 <run_pump+0x30>)
    8d1a:	4798      	blx	r3
// 		{
// 			ramp_tcc_pwm(0xFFFF*i);
// 			delay_ms(2000);
// 		}
		
	delay_ms(duration); //duration of pump
    8d1c:	687b      	ldr	r3, [r7, #4]
    8d1e:	2b00      	cmp	r3, #0
    8d20:	d004      	beq.n	8d2c <run_pump+0x1c>
    8d22:	687b      	ldr	r3, [r7, #4]
    8d24:	0018      	movs	r0, r3
    8d26:	4b07      	ldr	r3, [pc, #28]	; (8d44 <run_pump+0x34>)
    8d28:	4798      	blx	r3
    8d2a:	e002      	b.n	8d32 <run_pump+0x22>
    8d2c:	2001      	movs	r0, #1
    8d2e:	4b06      	ldr	r3, [pc, #24]	; (8d48 <run_pump+0x38>)
    8d30:	4798      	blx	r3
	
	//tcc_disable(&tcc_instance_pwm);
	gpio5_disable();
    8d32:	4b06      	ldr	r3, [pc, #24]	; (8d4c <run_pump+0x3c>)
    8d34:	4798      	blx	r3
	//boost_disable();
	
    8d36:	46c0      	nop			; (mov r8, r8)
    8d38:	46bd      	mov	sp, r7
    8d3a:	b002      	add	sp, #8
    8d3c:	bd80      	pop	{r7, pc}
    8d3e:	46c0      	nop			; (mov r8, r8)
    8d40:	00008ac9 	.word	0x00008ac9
    8d44:	00002961 	.word	0x00002961
    8d48:	00002931 	.word	0x00002931
    8d4c:	00008ae9 	.word	0x00008ae9

00008d50 <system_interrupt_enable_global>:
{
    8d50:	b580      	push	{r7, lr}
    8d52:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    8d54:	4b04      	ldr	r3, [pc, #16]	; (8d68 <system_interrupt_enable_global+0x18>)
    8d56:	2201      	movs	r2, #1
    8d58:	701a      	strb	r2, [r3, #0]
    8d5a:	f3bf 8f5f 	dmb	sy
    8d5e:	b662      	cpsie	i
}
    8d60:	46c0      	nop			; (mov r8, r8)
    8d62:	46bd      	mov	sp, r7
    8d64:	bd80      	pop	{r7, pc}
    8d66:	46c0      	nop			; (mov r8, r8)
    8d68:	20000048 	.word	0x20000048

00008d6c <processUserInput>:
 * stores user input in rx buffer read from serial
 *
 * @return  true if successful, false if error
 */
bool processUserInput(void)
{
    8d6c:	b580      	push	{r7, lr}
    8d6e:	b082      	sub	sp, #8
    8d70:	af00      	add	r7, sp, #0
	char singleCharInput;
	volatile enum status_code uartReadCode = usart_read_buffer_wait(&usart_instance, &singleCharInput, 1);
    8d72:	1df9      	adds	r1, r7, #7
    8d74:	4b38      	ldr	r3, [pc, #224]	; (8e58 <processUserInput+0xec>)
    8d76:	2201      	movs	r2, #1
    8d78:	0018      	movs	r0, r3
    8d7a:	4b38      	ldr	r3, [pc, #224]	; (8e5c <processUserInput+0xf0>)
    8d7c:	4798      	blx	r3
    8d7e:	0003      	movs	r3, r0
    8d80:	001a      	movs	r2, r3
    8d82:	1dbb      	adds	r3, r7, #6
    8d84:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != uartReadCode) {
    8d86:	1dbb      	adds	r3, r7, #6
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	b2db      	uxtb	r3, r3
    8d8c:	2b00      	cmp	r3, #0
    8d8e:	d001      	beq.n	8d94 <processUserInput+0x28>
		return false;
    8d90:	2300      	movs	r3, #0
    8d92:	e05c      	b.n	8e4e <processUserInput+0xe2>
	}
	if((singleCharInput != BS && !numberCharsRead) || numberCharsRead) {
    8d94:	1dfb      	adds	r3, r7, #7
    8d96:	781b      	ldrb	r3, [r3, #0]
    8d98:	2b7f      	cmp	r3, #127	; 0x7f
    8d9a:	d003      	beq.n	8da4 <processUserInput+0x38>
    8d9c:	4b30      	ldr	r3, [pc, #192]	; (8e60 <processUserInput+0xf4>)
    8d9e:	781b      	ldrb	r3, [r3, #0]
    8da0:	2b00      	cmp	r3, #0
    8da2:	d003      	beq.n	8dac <processUserInput+0x40>
    8da4:	4b2e      	ldr	r3, [pc, #184]	; (8e60 <processUserInput+0xf4>)
    8da6:	781b      	ldrb	r3, [r3, #0]
    8da8:	2b00      	cmp	r3, #0
    8daa:	d00e      	beq.n	8dca <processUserInput+0x5e>
		if (STATUS_OK == uartReadCode) {
    8dac:	1dbb      	adds	r3, r7, #6
    8dae:	781b      	ldrb	r3, [r3, #0]
    8db0:	b2db      	uxtb	r3, r3
    8db2:	2b00      	cmp	r3, #0
    8db4:	d109      	bne.n	8dca <processUserInput+0x5e>
			volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
    8db6:	1df9      	adds	r1, r7, #7
    8db8:	4b27      	ldr	r3, [pc, #156]	; (8e58 <processUserInput+0xec>)
    8dba:	2201      	movs	r2, #1
    8dbc:	0018      	movs	r0, r3
    8dbe:	4b29      	ldr	r3, [pc, #164]	; (8e64 <processUserInput+0xf8>)
    8dc0:	4798      	blx	r3
    8dc2:	0003      	movs	r3, r0
    8dc4:	001a      	movs	r2, r3
    8dc6:	1d7b      	adds	r3, r7, #5
    8dc8:	701a      	strb	r2, [r3, #0]
		}
	}
	

	switch (singleCharInput) {
    8dca:	1dfb      	adds	r3, r7, #7
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	2b0d      	cmp	r3, #13
    8dd0:	d003      	beq.n	8dda <processUserInput+0x6e>
    8dd2:	2b7f      	cmp	r3, #127	; 0x7f
    8dd4:	d010      	beq.n	8df8 <processUserInput+0x8c>
    8dd6:	2b0a      	cmp	r3, #10
    8dd8:	d11f      	bne.n	8e1a <processUserInput+0xae>
	case CR:
	case LF: {
		/// On carriage return (CR) or line feed (LF), the user has hit enter and it's time to process their command.
		/// Remember to null terminate your strings!  Otherwise, you could keep reading throughout memory.
		rx_buffer[numberCharsRead] = NULLCHAR;
    8dda:	4b21      	ldr	r3, [pc, #132]	; (8e60 <processUserInput+0xf4>)
    8ddc:	781b      	ldrb	r3, [r3, #0]
    8dde:	001a      	movs	r2, r3
    8de0:	4b21      	ldr	r3, [pc, #132]	; (8e68 <processUserInput+0xfc>)
    8de2:	2100      	movs	r1, #0
    8de4:	5499      	strb	r1, [r3, r2]
		if (numberCharsRead > 0) {
    8de6:	4b1e      	ldr	r3, [pc, #120]	; (8e60 <processUserInput+0xf4>)
    8de8:	781b      	ldrb	r3, [r3, #0]
    8dea:	2b00      	cmp	r3, #0
    8dec:	d02b      	beq.n	8e46 <processUserInput+0xda>
			numberCharsRead = 0;
    8dee:	4b1c      	ldr	r3, [pc, #112]	; (8e60 <processUserInput+0xf4>)
    8df0:	2200      	movs	r2, #0
    8df2:	701a      	strb	r2, [r3, #0]
			return true;
    8df4:	2301      	movs	r3, #1
    8df6:	e02a      	b.n	8e4e <processUserInput+0xe2>
		}
		break;
	}
	case BS: {
		/// User input a backspace -- remove the character
		if(!numberCharsRead) //no characters written
    8df8:	4b19      	ldr	r3, [pc, #100]	; (8e60 <processUserInput+0xf4>)
    8dfa:	781b      	ldrb	r3, [r3, #0]
    8dfc:	2b00      	cmp	r3, #0
    8dfe:	d024      	beq.n	8e4a <processUserInput+0xde>
			break;
		numberCharsRead--;
    8e00:	4b17      	ldr	r3, [pc, #92]	; (8e60 <processUserInput+0xf4>)
    8e02:	781b      	ldrb	r3, [r3, #0]
    8e04:	3b01      	subs	r3, #1
    8e06:	b2da      	uxtb	r2, r3
    8e08:	4b15      	ldr	r3, [pc, #84]	; (8e60 <processUserInput+0xf4>)
    8e0a:	701a      	strb	r2, [r3, #0]
		rx_buffer[numberCharsRead] = NULLCHAR;
    8e0c:	4b14      	ldr	r3, [pc, #80]	; (8e60 <processUserInput+0xf4>)
    8e0e:	781b      	ldrb	r3, [r3, #0]
    8e10:	001a      	movs	r2, r3
    8e12:	4b15      	ldr	r3, [pc, #84]	; (8e68 <processUserInput+0xfc>)
    8e14:	2100      	movs	r1, #0
    8e16:	5499      	strb	r1, [r3, r2]

		/// Feeling cheeky?  Do it all in one line
		// rx_buffer[--numberCharsRead] = NULLCHAR;
		break;
    8e18:	e018      	b.n	8e4c <processUserInput+0xe0>
	}
	default: {
		/// All other cases
		if (numberCharsRead < MAX_RX_BUFFER_LENGTH)
    8e1a:	4b11      	ldr	r3, [pc, #68]	; (8e60 <processUserInput+0xf4>)
    8e1c:	781b      	ldrb	r3, [r3, #0]
    8e1e:	2b63      	cmp	r3, #99	; 0x63
    8e20:	d80a      	bhi.n	8e38 <processUserInput+0xcc>
			rx_buffer[numberCharsRead++] = singleCharInput;
    8e22:	4b0f      	ldr	r3, [pc, #60]	; (8e60 <processUserInput+0xf4>)
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	1c5a      	adds	r2, r3, #1
    8e28:	b2d1      	uxtb	r1, r2
    8e2a:	4a0d      	ldr	r2, [pc, #52]	; (8e60 <processUserInput+0xf4>)
    8e2c:	7011      	strb	r1, [r2, #0]
    8e2e:	001a      	movs	r2, r3
    8e30:	1dfb      	adds	r3, r7, #7
    8e32:	7819      	ldrb	r1, [r3, #0]
    8e34:	4b0c      	ldr	r3, [pc, #48]	; (8e68 <processUserInput+0xfc>)
    8e36:	5499      	strb	r1, [r3, r2]
		rx_buffer[numberCharsRead] = NULLCHAR;  ///< String read protection
    8e38:	4b09      	ldr	r3, [pc, #36]	; (8e60 <processUserInput+0xf4>)
    8e3a:	781b      	ldrb	r3, [r3, #0]
    8e3c:	001a      	movs	r2, r3
    8e3e:	4b0a      	ldr	r3, [pc, #40]	; (8e68 <processUserInput+0xfc>)
    8e40:	2100      	movs	r1, #0
    8e42:	5499      	strb	r1, [r3, r2]
		break;
    8e44:	e002      	b.n	8e4c <processUserInput+0xe0>
		break;
    8e46:	46c0      	nop			; (mov r8, r8)
    8e48:	e000      	b.n	8e4c <processUserInput+0xe0>
			break;
    8e4a:	46c0      	nop			; (mov r8, r8)
	}
	}
	return false;
    8e4c:	2300      	movs	r3, #0
}
    8e4e:	0018      	movs	r0, r3
    8e50:	46bd      	mov	sp, r7
    8e52:	b002      	add	sp, #8
    8e54:	bd80      	pop	{r7, pc}
    8e56:	46c0      	nop			; (mov r8, r8)
    8e58:	20000328 	.word	0x20000328
    8e5c:	000053b1 	.word	0x000053b1
    8e60:	200004dc 	.word	0x200004dc
    8e64:	00005285 	.word	0x00005285
    8e68:	20000478 	.word	0x20000478

00008e6c <make_lowercase>:
/**
 * helper function to set string to all lowercase
 * @param str string to make all lowercase
 */
void make_lowercase(char **str)
{
    8e6c:	b590      	push	{r4, r7, lr}
    8e6e:	b085      	sub	sp, #20
    8e70:	af00      	add	r7, sp, #0
    8e72:	6078      	str	r0, [r7, #4]
	int i = 0;
    8e74:	2300      	movs	r3, #0
    8e76:	60fb      	str	r3, [r7, #12]

	while (*(*(str) + i) != 0) {
    8e78:	e026      	b.n	8ec8 <make_lowercase+0x5c>
		*(*(str) + i) = tolower(*(*str + i));
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	681a      	ldr	r2, [r3, #0]
    8e7e:	68fb      	ldr	r3, [r7, #12]
    8e80:	18d4      	adds	r4, r2, r3
    8e82:	687b      	ldr	r3, [r7, #4]
    8e84:	681a      	ldr	r2, [r3, #0]
    8e86:	68fb      	ldr	r3, [r7, #12]
    8e88:	18d2      	adds	r2, r2, r3
    8e8a:	230b      	movs	r3, #11
    8e8c:	18fb      	adds	r3, r7, r3
    8e8e:	7812      	ldrb	r2, [r2, #0]
    8e90:	701a      	strb	r2, [r3, #0]
    8e92:	4b13      	ldr	r3, [pc, #76]	; (8ee0 <make_lowercase+0x74>)
    8e94:	4798      	blx	r3
    8e96:	0002      	movs	r2, r0
    8e98:	230b      	movs	r3, #11
    8e9a:	18fb      	adds	r3, r7, r3
    8e9c:	781b      	ldrb	r3, [r3, #0]
    8e9e:	3301      	adds	r3, #1
    8ea0:	18d3      	adds	r3, r2, r3
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	001a      	movs	r2, r3
    8ea6:	2303      	movs	r3, #3
    8ea8:	4013      	ands	r3, r2
    8eaa:	2b01      	cmp	r3, #1
    8eac:	d104      	bne.n	8eb8 <make_lowercase+0x4c>
    8eae:	230b      	movs	r3, #11
    8eb0:	18fb      	adds	r3, r7, r3
    8eb2:	781b      	ldrb	r3, [r3, #0]
    8eb4:	3320      	adds	r3, #32
    8eb6:	e002      	b.n	8ebe <make_lowercase+0x52>
    8eb8:	230b      	movs	r3, #11
    8eba:	18fb      	adds	r3, r7, r3
    8ebc:	781b      	ldrb	r3, [r3, #0]
    8ebe:	b2db      	uxtb	r3, r3
    8ec0:	7023      	strb	r3, [r4, #0]
		i++;
    8ec2:	68fb      	ldr	r3, [r7, #12]
    8ec4:	3301      	adds	r3, #1
    8ec6:	60fb      	str	r3, [r7, #12]
	while (*(*(str) + i) != 0) {
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	681a      	ldr	r2, [r3, #0]
    8ecc:	68fb      	ldr	r3, [r7, #12]
    8ece:	18d3      	adds	r3, r2, r3
    8ed0:	781b      	ldrb	r3, [r3, #0]
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d1d1      	bne.n	8e7a <make_lowercase+0xe>
	}
}
    8ed6:	46c0      	nop			; (mov r8, r8)
    8ed8:	46bd      	mov	sp, r7
    8eda:	b005      	add	sp, #20
    8edc:	bd90      	pop	{r4, r7, pc}
    8ede:	46c0      	nop			; (mov r8, r8)
    8ee0:	000090bd 	.word	0x000090bd

00008ee4 <fix_args>:

/**
 * fixes arguments and adds them to the argv buffer
 */
void fix_args()
{
    8ee4:	b580      	push	{r7, lr}
    8ee6:	b082      	sub	sp, #8
    8ee8:	af00      	add	r7, sp, #0
	char *p = strtok(rx_buffer, " "); /// NOTE: strtok destroys the input string
    8eea:	4a15      	ldr	r2, [pc, #84]	; (8f40 <fix_args+0x5c>)
    8eec:	4b15      	ldr	r3, [pc, #84]	; (8f44 <fix_args+0x60>)
    8eee:	0011      	movs	r1, r2
    8ef0:	0018      	movs	r0, r3
    8ef2:	4b15      	ldr	r3, [pc, #84]	; (8f48 <fix_args+0x64>)
    8ef4:	4798      	blx	r3
    8ef6:	0003      	movs	r3, r0
    8ef8:	607b      	str	r3, [r7, #4]

	while (p != NULL) {
    8efa:	e019      	b.n	8f30 <fix_args+0x4c>
		make_lowercase(&p);
    8efc:	1d3b      	adds	r3, r7, #4
    8efe:	0018      	movs	r0, r3
    8f00:	4b12      	ldr	r3, [pc, #72]	; (8f4c <fix_args+0x68>)
    8f02:	4798      	blx	r3
		strcpy(argv[argc++], p);
    8f04:	4b12      	ldr	r3, [pc, #72]	; (8f50 <fix_args+0x6c>)
    8f06:	781b      	ldrb	r3, [r3, #0]
    8f08:	1c5a      	adds	r2, r3, #1
    8f0a:	b2d1      	uxtb	r1, r2
    8f0c:	4a10      	ldr	r2, [pc, #64]	; (8f50 <fix_args+0x6c>)
    8f0e:	7011      	strb	r1, [r2, #0]
    8f10:	001a      	movs	r2, r3
    8f12:	4b10      	ldr	r3, [pc, #64]	; (8f54 <fix_args+0x70>)
    8f14:	0092      	lsls	r2, r2, #2
    8f16:	58d3      	ldr	r3, [r2, r3]
    8f18:	687a      	ldr	r2, [r7, #4]
    8f1a:	0011      	movs	r1, r2
    8f1c:	0018      	movs	r0, r3
    8f1e:	4b0e      	ldr	r3, [pc, #56]	; (8f58 <fix_args+0x74>)
    8f20:	4798      	blx	r3
		p = strtok(NULL, " ");
    8f22:	4b07      	ldr	r3, [pc, #28]	; (8f40 <fix_args+0x5c>)
    8f24:	0019      	movs	r1, r3
    8f26:	2000      	movs	r0, #0
    8f28:	4b07      	ldr	r3, [pc, #28]	; (8f48 <fix_args+0x64>)
    8f2a:	4798      	blx	r3
    8f2c:	0003      	movs	r3, r0
    8f2e:	607b      	str	r3, [r7, #4]
	while (p != NULL) {
    8f30:	687b      	ldr	r3, [r7, #4]
    8f32:	2b00      	cmp	r3, #0
    8f34:	d1e2      	bne.n	8efc <fix_args+0x18>
	}
}
    8f36:	46c0      	nop			; (mov r8, r8)
    8f38:	46bd      	mov	sp, r7
    8f3a:	b002      	add	sp, #8
    8f3c:	bd80      	pop	{r7, pc}
    8f3e:	46c0      	nop			; (mov r8, r8)
    8f40:	0000eeec 	.word	0x0000eeec
    8f44:	20000478 	.word	0x20000478
    8f48:	00009e31 	.word	0x00009e31
    8f4c:	00008e6d 	.word	0x00008e6d
    8f50:	20000474 	.word	0x20000474
    8f54:	20000464 	.word	0x20000464
    8f58:	00009e11 	.word	0x00009e11

00008f5c <main>:


int main(void)
{
    8f5c:	b590      	push	{r4, r7, lr}
    8f5e:	b095      	sub	sp, #84	; 0x54
    8f60:	af00      	add	r7, sp, #0
	uint32_t MQTTCounter = 0;
    8f62:	2300      	movs	r3, #0
    8f64:	64bb      	str	r3, [r7, #72]	; 0x48
	
	int wifi_result = SUCCESS;
    8f66:	2300      	movs	r3, #0
    8f68:	647b      	str	r3, [r7, #68]	; 0x44
	    
	uint8_t mqtt_send_buffer[MQTT_SEND_BUFFER_SIZE];


	system_init();
    8f6a:	4b28      	ldr	r3, [pc, #160]	; (900c <main+0xb0>)
    8f6c:	4798      	blx	r3
	system_interrupt_enable_global();
    8f6e:	4b28      	ldr	r3, [pc, #160]	; (9010 <main+0xb4>)
    8f70:	4798      	blx	r3
	delay_init();
    8f72:	4b28      	ldr	r3, [pc, #160]	; (9014 <main+0xb8>)
    8f74:	4798      	blx	r3
	configure_usart();
    8f76:	4b28      	ldr	r3, [pc, #160]	; (9018 <main+0xbc>)
    8f78:	4798      	blx	r3
	
	configure_adc(MOISTURE_ANA_PIN); //configure moisture sensor analog
    8f7a:	2000      	movs	r0, #0
    8f7c:	4b27      	ldr	r3, [pc, #156]	; (901c <main+0xc0>)
    8f7e:	4798      	blx	r3
	configure_i2c_temp(); //config i2c
    8f80:	4b27      	ldr	r3, [pc, #156]	; (9020 <main+0xc4>)
    8f82:	4798      	blx	r3
	configure_i2c_lux();
    8f84:	4b27      	ldr	r3, [pc, #156]	; (9024 <main+0xc8>)
    8f86:	4798      	blx	r3
	configure_i2c_callbacks_hdc();
    8f88:	4b27      	ldr	r3, [pc, #156]	; (9028 <main+0xcc>)
    8f8a:	4798      	blx	r3
	configure_i2c_callbacks_tsl();
    8f8c:	4b27      	ldr	r3, [pc, #156]	; (902c <main+0xd0>)
    8f8e:	4798      	blx	r3
	
	
		
	for (int i = 0; i < MAX_ARGS; i++)
    8f90:	2300      	movs	r3, #0
    8f92:	64fb      	str	r3, [r7, #76]	; 0x4c
    8f94:	e00b      	b.n	8fae <main+0x52>
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    8f96:	2019      	movs	r0, #25
    8f98:	4b25      	ldr	r3, [pc, #148]	; (9030 <main+0xd4>)
    8f9a:	4798      	blx	r3
    8f9c:	0003      	movs	r3, r0
    8f9e:	0019      	movs	r1, r3
    8fa0:	4b24      	ldr	r3, [pc, #144]	; (9034 <main+0xd8>)
    8fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    8fa4:	0092      	lsls	r2, r2, #2
    8fa6:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < MAX_ARGS; i++)
    8fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8faa:	3301      	adds	r3, #1
    8fac:	64fb      	str	r3, [r7, #76]	; 0x4c
    8fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8fb0:	2b03      	cmp	r3, #3
    8fb2:	ddf0      	ble.n	8f96 <main+0x3a>

	//TODO: print version information
	printf("\r\nWelcome to the Evergreen CLI.\r\n");
    8fb4:	4b20      	ldr	r3, [pc, #128]	; (9038 <main+0xdc>)
    8fb6:	0018      	movs	r0, r3
    8fb8:	4b20      	ldr	r3, [pc, #128]	; (903c <main+0xe0>)
    8fba:	4798      	blx	r3
	printf("> ");
    8fbc:	4b20      	ldr	r3, [pc, #128]	; (9040 <main+0xe4>)
    8fbe:	0018      	movs	r0, r3
    8fc0:	4b20      	ldr	r3, [pc, #128]	; (9044 <main+0xe8>)
    8fc2:	4798      	blx	r3
	while (1) {
 			bool commandEntered = processUserInput();
    8fc4:	2343      	movs	r3, #67	; 0x43
    8fc6:	18fc      	adds	r4, r7, r3
    8fc8:	4b1f      	ldr	r3, [pc, #124]	; (9048 <main+0xec>)
    8fca:	4798      	blx	r3
    8fcc:	0003      	movs	r3, r0
    8fce:	7023      	strb	r3, [r4, #0]
 			if (commandEntered) {
    8fd0:	2343      	movs	r3, #67	; 0x43
    8fd2:	18fb      	adds	r3, r7, r3
    8fd4:	781b      	ldrb	r3, [r3, #0]
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d0f4      	beq.n	8fc4 <main+0x68>
				printf("> %s\r\n", rx_buffer);
    8fda:	4a1c      	ldr	r2, [pc, #112]	; (904c <main+0xf0>)
    8fdc:	4b1c      	ldr	r3, [pc, #112]	; (9050 <main+0xf4>)
    8fde:	0011      	movs	r1, r2
    8fe0:	0018      	movs	r0, r3
    8fe2:	4b18      	ldr	r3, [pc, #96]	; (9044 <main+0xe8>)
    8fe4:	4798      	blx	r3
 				fix_args();
    8fe6:	4b1b      	ldr	r3, [pc, #108]	; (9054 <main+0xf8>)
    8fe8:	4798      	blx	r3
 				input_handle(argc, argv); //fix
    8fea:	4b1b      	ldr	r3, [pc, #108]	; (9058 <main+0xfc>)
    8fec:	781b      	ldrb	r3, [r3, #0]
    8fee:	001a      	movs	r2, r3
    8ff0:	4b10      	ldr	r3, [pc, #64]	; (9034 <main+0xd8>)
    8ff2:	0019      	movs	r1, r3
    8ff4:	0010      	movs	r0, r2
    8ff6:	4b19      	ldr	r3, [pc, #100]	; (905c <main+0x100>)
    8ff8:	4798      	blx	r3
 				argc = 0;
    8ffa:	4b17      	ldr	r3, [pc, #92]	; (9058 <main+0xfc>)
    8ffc:	2200      	movs	r2, #0
    8ffe:	701a      	strb	r2, [r3, #0]
 				printf("> ");
    9000:	4b0f      	ldr	r3, [pc, #60]	; (9040 <main+0xe4>)
    9002:	0018      	movs	r0, r3
    9004:	4b0f      	ldr	r3, [pc, #60]	; (9044 <main+0xe8>)
    9006:	4798      	blx	r3
	while (1) {
    9008:	e7dc      	b.n	8fc4 <main+0x68>
    900a:	46c0      	nop			; (mov r8, r8)
    900c:	00006b75 	.word	0x00006b75
    9010:	00008d51 	.word	0x00008d51
    9014:	000028d9 	.word	0x000028d9
    9018:	00008835 	.word	0x00008835
    901c:	000088a9 	.word	0x000088a9
    9020:	000086b5 	.word	0x000086b5
    9024:	0000871d 	.word	0x0000871d
    9028:	000087d5 	.word	0x000087d5
    902c:	00008805 	.word	0x00008805
    9030:	000090d9 	.word	0x000090d9
    9034:	20000464 	.word	0x20000464
    9038:	0000eef0 	.word	0x0000eef0
    903c:	00009c59 	.word	0x00009c59
    9040:	0000ef14 	.word	0x0000ef14
    9044:	00009b65 	.word	0x00009b65
    9048:	00008d6d 	.word	0x00008d6d
    904c:	20000478 	.word	0x20000478
    9050:	0000ef18 	.word	0x0000ef18
    9054:	00008ee5 	.word	0x00008ee5
    9058:	20000474 	.word	0x20000474
    905c:	00007e29 	.word	0x00007e29

00009060 <atoi>:
    9060:	b510      	push	{r4, lr}
    9062:	220a      	movs	r2, #10
    9064:	2100      	movs	r1, #0
    9066:	f000 ffbf 	bl	9fe8 <strtol>
    906a:	bd10      	pop	{r4, pc}

0000906c <__libc_init_array>:
    906c:	b570      	push	{r4, r5, r6, lr}
    906e:	2600      	movs	r6, #0
    9070:	4d0c      	ldr	r5, [pc, #48]	; (90a4 <__libc_init_array+0x38>)
    9072:	4c0d      	ldr	r4, [pc, #52]	; (90a8 <__libc_init_array+0x3c>)
    9074:	1b64      	subs	r4, r4, r5
    9076:	10a4      	asrs	r4, r4, #2
    9078:	42a6      	cmp	r6, r4
    907a:	d109      	bne.n	9090 <__libc_init_array+0x24>
    907c:	2600      	movs	r6, #0
    907e:	f006 f94f 	bl	f320 <_init>
    9082:	4d0a      	ldr	r5, [pc, #40]	; (90ac <__libc_init_array+0x40>)
    9084:	4c0a      	ldr	r4, [pc, #40]	; (90b0 <__libc_init_array+0x44>)
    9086:	1b64      	subs	r4, r4, r5
    9088:	10a4      	asrs	r4, r4, #2
    908a:	42a6      	cmp	r6, r4
    908c:	d105      	bne.n	909a <__libc_init_array+0x2e>
    908e:	bd70      	pop	{r4, r5, r6, pc}
    9090:	00b3      	lsls	r3, r6, #2
    9092:	58eb      	ldr	r3, [r5, r3]
    9094:	4798      	blx	r3
    9096:	3601      	adds	r6, #1
    9098:	e7ee      	b.n	9078 <__libc_init_array+0xc>
    909a:	00b3      	lsls	r3, r6, #2
    909c:	58eb      	ldr	r3, [r5, r3]
    909e:	4798      	blx	r3
    90a0:	3601      	adds	r6, #1
    90a2:	e7f2      	b.n	908a <__libc_init_array+0x1e>
    90a4:	0000f32c 	.word	0x0000f32c
    90a8:	0000f32c 	.word	0x0000f32c
    90ac:	0000f32c 	.word	0x0000f32c
    90b0:	0000f330 	.word	0x0000f330

000090b4 <__locale_ctype_ptr_l>:
    90b4:	30ec      	adds	r0, #236	; 0xec
    90b6:	6800      	ldr	r0, [r0, #0]
    90b8:	4770      	bx	lr
	...

000090bc <__locale_ctype_ptr>:
    90bc:	4b04      	ldr	r3, [pc, #16]	; (90d0 <__locale_ctype_ptr+0x14>)
    90be:	681b      	ldr	r3, [r3, #0]
    90c0:	6a1b      	ldr	r3, [r3, #32]
    90c2:	2b00      	cmp	r3, #0
    90c4:	d100      	bne.n	90c8 <__locale_ctype_ptr+0xc>
    90c6:	4b03      	ldr	r3, [pc, #12]	; (90d4 <__locale_ctype_ptr+0x18>)
    90c8:	33ec      	adds	r3, #236	; 0xec
    90ca:	6818      	ldr	r0, [r3, #0]
    90cc:	4770      	bx	lr
    90ce:	46c0      	nop			; (mov r8, r8)
    90d0:	20000078 	.word	0x20000078
    90d4:	200000dc 	.word	0x200000dc

000090d8 <malloc>:
    90d8:	b510      	push	{r4, lr}
    90da:	4b03      	ldr	r3, [pc, #12]	; (90e8 <malloc+0x10>)
    90dc:	0001      	movs	r1, r0
    90de:	6818      	ldr	r0, [r3, #0]
    90e0:	f000 f872 	bl	91c8 <_malloc_r>
    90e4:	bd10      	pop	{r4, pc}
    90e6:	46c0      	nop			; (mov r8, r8)
    90e8:	20000078 	.word	0x20000078

000090ec <__ascii_mbtowc>:
    90ec:	b082      	sub	sp, #8
    90ee:	2900      	cmp	r1, #0
    90f0:	d100      	bne.n	90f4 <__ascii_mbtowc+0x8>
    90f2:	a901      	add	r1, sp, #4
    90f4:	1e10      	subs	r0, r2, #0
    90f6:	d006      	beq.n	9106 <__ascii_mbtowc+0x1a>
    90f8:	2b00      	cmp	r3, #0
    90fa:	d006      	beq.n	910a <__ascii_mbtowc+0x1e>
    90fc:	7813      	ldrb	r3, [r2, #0]
    90fe:	600b      	str	r3, [r1, #0]
    9100:	7810      	ldrb	r0, [r2, #0]
    9102:	1e43      	subs	r3, r0, #1
    9104:	4198      	sbcs	r0, r3
    9106:	b002      	add	sp, #8
    9108:	4770      	bx	lr
    910a:	2002      	movs	r0, #2
    910c:	4240      	negs	r0, r0
    910e:	e7fa      	b.n	9106 <__ascii_mbtowc+0x1a>

00009110 <memcpy>:
    9110:	2300      	movs	r3, #0
    9112:	b510      	push	{r4, lr}
    9114:	429a      	cmp	r2, r3
    9116:	d100      	bne.n	911a <memcpy+0xa>
    9118:	bd10      	pop	{r4, pc}
    911a:	5ccc      	ldrb	r4, [r1, r3]
    911c:	54c4      	strb	r4, [r0, r3]
    911e:	3301      	adds	r3, #1
    9120:	e7f8      	b.n	9114 <memcpy+0x4>

00009122 <memset>:
    9122:	0003      	movs	r3, r0
    9124:	1882      	adds	r2, r0, r2
    9126:	4293      	cmp	r3, r2
    9128:	d100      	bne.n	912c <memset+0xa>
    912a:	4770      	bx	lr
    912c:	7019      	strb	r1, [r3, #0]
    912e:	3301      	adds	r3, #1
    9130:	e7f9      	b.n	9126 <memset+0x4>
	...

00009134 <_free_r>:
    9134:	b570      	push	{r4, r5, r6, lr}
    9136:	0005      	movs	r5, r0
    9138:	2900      	cmp	r1, #0
    913a:	d010      	beq.n	915e <_free_r+0x2a>
    913c:	1f0c      	subs	r4, r1, #4
    913e:	6823      	ldr	r3, [r4, #0]
    9140:	2b00      	cmp	r3, #0
    9142:	da00      	bge.n	9146 <_free_r+0x12>
    9144:	18e4      	adds	r4, r4, r3
    9146:	0028      	movs	r0, r5
    9148:	f002 f8b7 	bl	b2ba <__malloc_lock>
    914c:	4a1d      	ldr	r2, [pc, #116]	; (91c4 <_free_r+0x90>)
    914e:	6813      	ldr	r3, [r2, #0]
    9150:	2b00      	cmp	r3, #0
    9152:	d105      	bne.n	9160 <_free_r+0x2c>
    9154:	6063      	str	r3, [r4, #4]
    9156:	6014      	str	r4, [r2, #0]
    9158:	0028      	movs	r0, r5
    915a:	f002 f8af 	bl	b2bc <__malloc_unlock>
    915e:	bd70      	pop	{r4, r5, r6, pc}
    9160:	42a3      	cmp	r3, r4
    9162:	d909      	bls.n	9178 <_free_r+0x44>
    9164:	6821      	ldr	r1, [r4, #0]
    9166:	1860      	adds	r0, r4, r1
    9168:	4283      	cmp	r3, r0
    916a:	d1f3      	bne.n	9154 <_free_r+0x20>
    916c:	6818      	ldr	r0, [r3, #0]
    916e:	685b      	ldr	r3, [r3, #4]
    9170:	1841      	adds	r1, r0, r1
    9172:	6021      	str	r1, [r4, #0]
    9174:	e7ee      	b.n	9154 <_free_r+0x20>
    9176:	0013      	movs	r3, r2
    9178:	685a      	ldr	r2, [r3, #4]
    917a:	2a00      	cmp	r2, #0
    917c:	d001      	beq.n	9182 <_free_r+0x4e>
    917e:	42a2      	cmp	r2, r4
    9180:	d9f9      	bls.n	9176 <_free_r+0x42>
    9182:	6819      	ldr	r1, [r3, #0]
    9184:	1858      	adds	r0, r3, r1
    9186:	42a0      	cmp	r0, r4
    9188:	d10b      	bne.n	91a2 <_free_r+0x6e>
    918a:	6820      	ldr	r0, [r4, #0]
    918c:	1809      	adds	r1, r1, r0
    918e:	1858      	adds	r0, r3, r1
    9190:	6019      	str	r1, [r3, #0]
    9192:	4282      	cmp	r2, r0
    9194:	d1e0      	bne.n	9158 <_free_r+0x24>
    9196:	6810      	ldr	r0, [r2, #0]
    9198:	6852      	ldr	r2, [r2, #4]
    919a:	1841      	adds	r1, r0, r1
    919c:	6019      	str	r1, [r3, #0]
    919e:	605a      	str	r2, [r3, #4]
    91a0:	e7da      	b.n	9158 <_free_r+0x24>
    91a2:	42a0      	cmp	r0, r4
    91a4:	d902      	bls.n	91ac <_free_r+0x78>
    91a6:	230c      	movs	r3, #12
    91a8:	602b      	str	r3, [r5, #0]
    91aa:	e7d5      	b.n	9158 <_free_r+0x24>
    91ac:	6821      	ldr	r1, [r4, #0]
    91ae:	1860      	adds	r0, r4, r1
    91b0:	4282      	cmp	r2, r0
    91b2:	d103      	bne.n	91bc <_free_r+0x88>
    91b4:	6810      	ldr	r0, [r2, #0]
    91b6:	6852      	ldr	r2, [r2, #4]
    91b8:	1841      	adds	r1, r0, r1
    91ba:	6021      	str	r1, [r4, #0]
    91bc:	6062      	str	r2, [r4, #4]
    91be:	605c      	str	r4, [r3, #4]
    91c0:	e7ca      	b.n	9158 <_free_r+0x24>
    91c2:	46c0      	nop			; (mov r8, r8)
    91c4:	200002cc 	.word	0x200002cc

000091c8 <_malloc_r>:
    91c8:	2303      	movs	r3, #3
    91ca:	b570      	push	{r4, r5, r6, lr}
    91cc:	1ccd      	adds	r5, r1, #3
    91ce:	439d      	bics	r5, r3
    91d0:	3508      	adds	r5, #8
    91d2:	0006      	movs	r6, r0
    91d4:	2d0c      	cmp	r5, #12
    91d6:	d21e      	bcs.n	9216 <_malloc_r+0x4e>
    91d8:	250c      	movs	r5, #12
    91da:	42a9      	cmp	r1, r5
    91dc:	d81d      	bhi.n	921a <_malloc_r+0x52>
    91de:	0030      	movs	r0, r6
    91e0:	f002 f86b 	bl	b2ba <__malloc_lock>
    91e4:	4a25      	ldr	r2, [pc, #148]	; (927c <_malloc_r+0xb4>)
    91e6:	6814      	ldr	r4, [r2, #0]
    91e8:	0021      	movs	r1, r4
    91ea:	2900      	cmp	r1, #0
    91ec:	d119      	bne.n	9222 <_malloc_r+0x5a>
    91ee:	4c24      	ldr	r4, [pc, #144]	; (9280 <_malloc_r+0xb8>)
    91f0:	6823      	ldr	r3, [r4, #0]
    91f2:	2b00      	cmp	r3, #0
    91f4:	d103      	bne.n	91fe <_malloc_r+0x36>
    91f6:	0030      	movs	r0, r6
    91f8:	f000 fd38 	bl	9c6c <_sbrk_r>
    91fc:	6020      	str	r0, [r4, #0]
    91fe:	0029      	movs	r1, r5
    9200:	0030      	movs	r0, r6
    9202:	f000 fd33 	bl	9c6c <_sbrk_r>
    9206:	1c43      	adds	r3, r0, #1
    9208:	d12c      	bne.n	9264 <_malloc_r+0x9c>
    920a:	230c      	movs	r3, #12
    920c:	0030      	movs	r0, r6
    920e:	6033      	str	r3, [r6, #0]
    9210:	f002 f854 	bl	b2bc <__malloc_unlock>
    9214:	e003      	b.n	921e <_malloc_r+0x56>
    9216:	2d00      	cmp	r5, #0
    9218:	dadf      	bge.n	91da <_malloc_r+0x12>
    921a:	230c      	movs	r3, #12
    921c:	6033      	str	r3, [r6, #0]
    921e:	2000      	movs	r0, #0
    9220:	bd70      	pop	{r4, r5, r6, pc}
    9222:	680b      	ldr	r3, [r1, #0]
    9224:	1b5b      	subs	r3, r3, r5
    9226:	d41a      	bmi.n	925e <_malloc_r+0x96>
    9228:	2b0b      	cmp	r3, #11
    922a:	d903      	bls.n	9234 <_malloc_r+0x6c>
    922c:	600b      	str	r3, [r1, #0]
    922e:	18cc      	adds	r4, r1, r3
    9230:	6025      	str	r5, [r4, #0]
    9232:	e003      	b.n	923c <_malloc_r+0x74>
    9234:	428c      	cmp	r4, r1
    9236:	d10e      	bne.n	9256 <_malloc_r+0x8e>
    9238:	6863      	ldr	r3, [r4, #4]
    923a:	6013      	str	r3, [r2, #0]
    923c:	0030      	movs	r0, r6
    923e:	f002 f83d 	bl	b2bc <__malloc_unlock>
    9242:	0020      	movs	r0, r4
    9244:	2207      	movs	r2, #7
    9246:	300b      	adds	r0, #11
    9248:	1d23      	adds	r3, r4, #4
    924a:	4390      	bics	r0, r2
    924c:	1ac3      	subs	r3, r0, r3
    924e:	d0e7      	beq.n	9220 <_malloc_r+0x58>
    9250:	425a      	negs	r2, r3
    9252:	50e2      	str	r2, [r4, r3]
    9254:	e7e4      	b.n	9220 <_malloc_r+0x58>
    9256:	684b      	ldr	r3, [r1, #4]
    9258:	6063      	str	r3, [r4, #4]
    925a:	000c      	movs	r4, r1
    925c:	e7ee      	b.n	923c <_malloc_r+0x74>
    925e:	000c      	movs	r4, r1
    9260:	6849      	ldr	r1, [r1, #4]
    9262:	e7c2      	b.n	91ea <_malloc_r+0x22>
    9264:	2303      	movs	r3, #3
    9266:	1cc4      	adds	r4, r0, #3
    9268:	439c      	bics	r4, r3
    926a:	42a0      	cmp	r0, r4
    926c:	d0e0      	beq.n	9230 <_malloc_r+0x68>
    926e:	1a21      	subs	r1, r4, r0
    9270:	0030      	movs	r0, r6
    9272:	f000 fcfb 	bl	9c6c <_sbrk_r>
    9276:	1c43      	adds	r3, r0, #1
    9278:	d1da      	bne.n	9230 <_malloc_r+0x68>
    927a:	e7c6      	b.n	920a <_malloc_r+0x42>
    927c:	200002cc 	.word	0x200002cc
    9280:	200002d0 	.word	0x200002d0

00009284 <__cvt>:
    9284:	b5f0      	push	{r4, r5, r6, r7, lr}
    9286:	b08b      	sub	sp, #44	; 0x2c
    9288:	0014      	movs	r4, r2
    928a:	1e1d      	subs	r5, r3, #0
    928c:	9912      	ldr	r1, [sp, #72]	; 0x48
    928e:	da53      	bge.n	9338 <__cvt+0xb4>
    9290:	2480      	movs	r4, #128	; 0x80
    9292:	0624      	lsls	r4, r4, #24
    9294:	191b      	adds	r3, r3, r4
    9296:	001d      	movs	r5, r3
    9298:	0014      	movs	r4, r2
    929a:	232d      	movs	r3, #45	; 0x2d
    929c:	700b      	strb	r3, [r1, #0]
    929e:	2320      	movs	r3, #32
    92a0:	9e14      	ldr	r6, [sp, #80]	; 0x50
    92a2:	2203      	movs	r2, #3
    92a4:	439e      	bics	r6, r3
    92a6:	2e46      	cmp	r6, #70	; 0x46
    92a8:	d007      	beq.n	92ba <__cvt+0x36>
    92aa:	0033      	movs	r3, r6
    92ac:	3b45      	subs	r3, #69	; 0x45
    92ae:	4259      	negs	r1, r3
    92b0:	414b      	adcs	r3, r1
    92b2:	9910      	ldr	r1, [sp, #64]	; 0x40
    92b4:	3a01      	subs	r2, #1
    92b6:	18cb      	adds	r3, r1, r3
    92b8:	9310      	str	r3, [sp, #64]	; 0x40
    92ba:	ab09      	add	r3, sp, #36	; 0x24
    92bc:	9304      	str	r3, [sp, #16]
    92be:	ab08      	add	r3, sp, #32
    92c0:	9303      	str	r3, [sp, #12]
    92c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    92c4:	9200      	str	r2, [sp, #0]
    92c6:	9302      	str	r3, [sp, #8]
    92c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    92ca:	0022      	movs	r2, r4
    92cc:	9301      	str	r3, [sp, #4]
    92ce:	002b      	movs	r3, r5
    92d0:	f000 fffa 	bl	a2c8 <_dtoa_r>
    92d4:	0007      	movs	r7, r0
    92d6:	2e47      	cmp	r6, #71	; 0x47
    92d8:	d102      	bne.n	92e0 <__cvt+0x5c>
    92da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    92dc:	07db      	lsls	r3, r3, #31
    92de:	d524      	bpl.n	932a <__cvt+0xa6>
    92e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    92e2:	18fb      	adds	r3, r7, r3
    92e4:	9307      	str	r3, [sp, #28]
    92e6:	2e46      	cmp	r6, #70	; 0x46
    92e8:	d114      	bne.n	9314 <__cvt+0x90>
    92ea:	783b      	ldrb	r3, [r7, #0]
    92ec:	2b30      	cmp	r3, #48	; 0x30
    92ee:	d10c      	bne.n	930a <__cvt+0x86>
    92f0:	2200      	movs	r2, #0
    92f2:	2300      	movs	r3, #0
    92f4:	0020      	movs	r0, r4
    92f6:	0029      	movs	r1, r5
    92f8:	f002 fe64 	bl	bfc4 <__aeabi_dcmpeq>
    92fc:	2800      	cmp	r0, #0
    92fe:	d104      	bne.n	930a <__cvt+0x86>
    9300:	2301      	movs	r3, #1
    9302:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9304:	1a9b      	subs	r3, r3, r2
    9306:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9308:	6013      	str	r3, [r2, #0]
    930a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    930c:	9a07      	ldr	r2, [sp, #28]
    930e:	681b      	ldr	r3, [r3, #0]
    9310:	18d3      	adds	r3, r2, r3
    9312:	9307      	str	r3, [sp, #28]
    9314:	2200      	movs	r2, #0
    9316:	2300      	movs	r3, #0
    9318:	0020      	movs	r0, r4
    931a:	0029      	movs	r1, r5
    931c:	f002 fe52 	bl	bfc4 <__aeabi_dcmpeq>
    9320:	2230      	movs	r2, #48	; 0x30
    9322:	2800      	cmp	r0, #0
    9324:	d00d      	beq.n	9342 <__cvt+0xbe>
    9326:	9b07      	ldr	r3, [sp, #28]
    9328:	9309      	str	r3, [sp, #36]	; 0x24
    932a:	0038      	movs	r0, r7
    932c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    932e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9330:	1bdb      	subs	r3, r3, r7
    9332:	6013      	str	r3, [r2, #0]
    9334:	b00b      	add	sp, #44	; 0x2c
    9336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9338:	2300      	movs	r3, #0
    933a:	e7af      	b.n	929c <__cvt+0x18>
    933c:	1c59      	adds	r1, r3, #1
    933e:	9109      	str	r1, [sp, #36]	; 0x24
    9340:	701a      	strb	r2, [r3, #0]
    9342:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9344:	9907      	ldr	r1, [sp, #28]
    9346:	4299      	cmp	r1, r3
    9348:	d8f8      	bhi.n	933c <__cvt+0xb8>
    934a:	e7ee      	b.n	932a <__cvt+0xa6>

0000934c <__exponent>:
    934c:	b5f0      	push	{r4, r5, r6, r7, lr}
    934e:	232b      	movs	r3, #43	; 0x2b
    9350:	b085      	sub	sp, #20
    9352:	0007      	movs	r7, r0
    9354:	000c      	movs	r4, r1
    9356:	7002      	strb	r2, [r0, #0]
    9358:	1c86      	adds	r6, r0, #2
    935a:	2900      	cmp	r1, #0
    935c:	da01      	bge.n	9362 <__exponent+0x16>
    935e:	232d      	movs	r3, #45	; 0x2d
    9360:	424c      	negs	r4, r1
    9362:	707b      	strb	r3, [r7, #1]
    9364:	2c09      	cmp	r4, #9
    9366:	dd23      	ble.n	93b0 <__exponent+0x64>
    9368:	ab02      	add	r3, sp, #8
    936a:	1ddd      	adds	r5, r3, #7
    936c:	1e6b      	subs	r3, r5, #1
    936e:	0020      	movs	r0, r4
    9370:	210a      	movs	r1, #10
    9372:	9301      	str	r3, [sp, #4]
    9374:	f002 fe10 	bl	bf98 <__aeabi_idivmod>
    9378:	1e6b      	subs	r3, r5, #1
    937a:	3130      	adds	r1, #48	; 0x30
    937c:	7019      	strb	r1, [r3, #0]
    937e:	0020      	movs	r0, r4
    9380:	210a      	movs	r1, #10
    9382:	f002 fd23 	bl	bdcc <__divsi3>
    9386:	0004      	movs	r4, r0
    9388:	2809      	cmp	r0, #9
    938a:	dc0a      	bgt.n	93a2 <__exponent+0x56>
    938c:	3d02      	subs	r5, #2
    938e:	3430      	adds	r4, #48	; 0x30
    9390:	702c      	strb	r4, [r5, #0]
    9392:	ab02      	add	r3, sp, #8
    9394:	3307      	adds	r3, #7
    9396:	0030      	movs	r0, r6
    9398:	42ab      	cmp	r3, r5
    939a:	d804      	bhi.n	93a6 <__exponent+0x5a>
    939c:	1bc0      	subs	r0, r0, r7
    939e:	b005      	add	sp, #20
    93a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93a2:	9d01      	ldr	r5, [sp, #4]
    93a4:	e7e2      	b.n	936c <__exponent+0x20>
    93a6:	782b      	ldrb	r3, [r5, #0]
    93a8:	3501      	adds	r5, #1
    93aa:	7033      	strb	r3, [r6, #0]
    93ac:	3601      	adds	r6, #1
    93ae:	e7f0      	b.n	9392 <__exponent+0x46>
    93b0:	2330      	movs	r3, #48	; 0x30
    93b2:	18e4      	adds	r4, r4, r3
    93b4:	7033      	strb	r3, [r6, #0]
    93b6:	1cb0      	adds	r0, r6, #2
    93b8:	7074      	strb	r4, [r6, #1]
    93ba:	e7ef      	b.n	939c <__exponent+0x50>

000093bc <_printf_float>:
    93bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    93be:	b095      	sub	sp, #84	; 0x54
    93c0:	000c      	movs	r4, r1
    93c2:	920a      	str	r2, [sp, #40]	; 0x28
    93c4:	930b      	str	r3, [sp, #44]	; 0x2c
    93c6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    93c8:	9009      	str	r0, [sp, #36]	; 0x24
    93ca:	f001 fef3 	bl	b1b4 <_localeconv_r>
    93ce:	6803      	ldr	r3, [r0, #0]
    93d0:	0018      	movs	r0, r3
    93d2:	930d      	str	r3, [sp, #52]	; 0x34
    93d4:	f000 fd24 	bl	9e20 <strlen>
    93d8:	2300      	movs	r3, #0
    93da:	9312      	str	r3, [sp, #72]	; 0x48
    93dc:	6823      	ldr	r3, [r4, #0]
    93de:	900e      	str	r0, [sp, #56]	; 0x38
    93e0:	930c      	str	r3, [sp, #48]	; 0x30
    93e2:	990c      	ldr	r1, [sp, #48]	; 0x30
    93e4:	7e27      	ldrb	r7, [r4, #24]
    93e6:	682b      	ldr	r3, [r5, #0]
    93e8:	2207      	movs	r2, #7
    93ea:	05c9      	lsls	r1, r1, #23
    93ec:	d547      	bpl.n	947e <_printf_float+0xc2>
    93ee:	189b      	adds	r3, r3, r2
    93f0:	4393      	bics	r3, r2
    93f2:	001a      	movs	r2, r3
    93f4:	3208      	adds	r2, #8
    93f6:	602a      	str	r2, [r5, #0]
    93f8:	681a      	ldr	r2, [r3, #0]
    93fa:	685b      	ldr	r3, [r3, #4]
    93fc:	64a2      	str	r2, [r4, #72]	; 0x48
    93fe:	64e3      	str	r3, [r4, #76]	; 0x4c
    9400:	2201      	movs	r2, #1
    9402:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    9404:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    9406:	006b      	lsls	r3, r5, #1
    9408:	085b      	lsrs	r3, r3, #1
    940a:	930f      	str	r3, [sp, #60]	; 0x3c
    940c:	4252      	negs	r2, r2
    940e:	4ba7      	ldr	r3, [pc, #668]	; (96ac <_printf_float+0x2f0>)
    9410:	0030      	movs	r0, r6
    9412:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9414:	f004 fe06 	bl	e024 <__aeabi_dcmpun>
    9418:	2800      	cmp	r0, #0
    941a:	d000      	beq.n	941e <_printf_float+0x62>
    941c:	e206      	b.n	982c <_printf_float+0x470>
    941e:	2201      	movs	r2, #1
    9420:	4ba2      	ldr	r3, [pc, #648]	; (96ac <_printf_float+0x2f0>)
    9422:	4252      	negs	r2, r2
    9424:	0030      	movs	r0, r6
    9426:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9428:	f002 fddc 	bl	bfe4 <__aeabi_dcmple>
    942c:	2800      	cmp	r0, #0
    942e:	d000      	beq.n	9432 <_printf_float+0x76>
    9430:	e1fc      	b.n	982c <_printf_float+0x470>
    9432:	2200      	movs	r2, #0
    9434:	2300      	movs	r3, #0
    9436:	0030      	movs	r0, r6
    9438:	0029      	movs	r1, r5
    943a:	f002 fdc9 	bl	bfd0 <__aeabi_dcmplt>
    943e:	2800      	cmp	r0, #0
    9440:	d003      	beq.n	944a <_printf_float+0x8e>
    9442:	0023      	movs	r3, r4
    9444:	222d      	movs	r2, #45	; 0x2d
    9446:	3343      	adds	r3, #67	; 0x43
    9448:	701a      	strb	r2, [r3, #0]
    944a:	4d99      	ldr	r5, [pc, #612]	; (96b0 <_printf_float+0x2f4>)
    944c:	2f47      	cmp	r7, #71	; 0x47
    944e:	d800      	bhi.n	9452 <_printf_float+0x96>
    9450:	4d98      	ldr	r5, [pc, #608]	; (96b4 <_printf_float+0x2f8>)
    9452:	2303      	movs	r3, #3
    9454:	2600      	movs	r6, #0
    9456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9458:	6123      	str	r3, [r4, #16]
    945a:	3301      	adds	r3, #1
    945c:	439a      	bics	r2, r3
    945e:	6022      	str	r2, [r4, #0]
    9460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9462:	aa13      	add	r2, sp, #76	; 0x4c
    9464:	9300      	str	r3, [sp, #0]
    9466:	0021      	movs	r1, r4
    9468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    946a:	9809      	ldr	r0, [sp, #36]	; 0x24
    946c:	f000 f9f2 	bl	9854 <_printf_common>
    9470:	1c43      	adds	r3, r0, #1
    9472:	d000      	beq.n	9476 <_printf_float+0xba>
    9474:	e09c      	b.n	95b0 <_printf_float+0x1f4>
    9476:	2001      	movs	r0, #1
    9478:	4240      	negs	r0, r0
    947a:	b015      	add	sp, #84	; 0x54
    947c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    947e:	3307      	adds	r3, #7
    9480:	e7b6      	b.n	93f0 <_printf_float+0x34>
    9482:	2380      	movs	r3, #128	; 0x80
    9484:	6862      	ldr	r2, [r4, #4]
    9486:	00db      	lsls	r3, r3, #3
    9488:	1c51      	adds	r1, r2, #1
    948a:	d145      	bne.n	9518 <_printf_float+0x15c>
    948c:	3207      	adds	r2, #7
    948e:	6062      	str	r2, [r4, #4]
    9490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9492:	2100      	movs	r1, #0
    9494:	4313      	orrs	r3, r2
    9496:	aa12      	add	r2, sp, #72	; 0x48
    9498:	9205      	str	r2, [sp, #20]
    949a:	aa11      	add	r2, sp, #68	; 0x44
    949c:	9203      	str	r2, [sp, #12]
    949e:	2223      	movs	r2, #35	; 0x23
    94a0:	6023      	str	r3, [r4, #0]
    94a2:	9106      	str	r1, [sp, #24]
    94a4:	9301      	str	r3, [sp, #4]
    94a6:	a908      	add	r1, sp, #32
    94a8:	6863      	ldr	r3, [r4, #4]
    94aa:	1852      	adds	r2, r2, r1
    94ac:	9202      	str	r2, [sp, #8]
    94ae:	9300      	str	r3, [sp, #0]
    94b0:	0032      	movs	r2, r6
    94b2:	002b      	movs	r3, r5
    94b4:	9704      	str	r7, [sp, #16]
    94b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    94b8:	f7ff fee4 	bl	9284 <__cvt>
    94bc:	2320      	movs	r3, #32
    94be:	003a      	movs	r2, r7
    94c0:	0005      	movs	r5, r0
    94c2:	439a      	bics	r2, r3
    94c4:	2a47      	cmp	r2, #71	; 0x47
    94c6:	d107      	bne.n	94d8 <_printf_float+0x11c>
    94c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    94ca:	1cda      	adds	r2, r3, #3
    94cc:	db02      	blt.n	94d4 <_printf_float+0x118>
    94ce:	6862      	ldr	r2, [r4, #4]
    94d0:	4293      	cmp	r3, r2
    94d2:	dd5b      	ble.n	958c <_printf_float+0x1d0>
    94d4:	3f02      	subs	r7, #2
    94d6:	b2ff      	uxtb	r7, r7
    94d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    94da:	2f65      	cmp	r7, #101	; 0x65
    94dc:	d83b      	bhi.n	9556 <_printf_float+0x19a>
    94de:	0020      	movs	r0, r4
    94e0:	3901      	subs	r1, #1
    94e2:	003a      	movs	r2, r7
    94e4:	3050      	adds	r0, #80	; 0x50
    94e6:	9111      	str	r1, [sp, #68]	; 0x44
    94e8:	f7ff ff30 	bl	934c <__exponent>
    94ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
    94ee:	0006      	movs	r6, r0
    94f0:	1883      	adds	r3, r0, r2
    94f2:	6123      	str	r3, [r4, #16]
    94f4:	2a01      	cmp	r2, #1
    94f6:	dc02      	bgt.n	94fe <_printf_float+0x142>
    94f8:	6822      	ldr	r2, [r4, #0]
    94fa:	07d2      	lsls	r2, r2, #31
    94fc:	d501      	bpl.n	9502 <_printf_float+0x146>
    94fe:	3301      	adds	r3, #1
    9500:	6123      	str	r3, [r4, #16]
    9502:	2323      	movs	r3, #35	; 0x23
    9504:	aa08      	add	r2, sp, #32
    9506:	189b      	adds	r3, r3, r2
    9508:	781b      	ldrb	r3, [r3, #0]
    950a:	2b00      	cmp	r3, #0
    950c:	d0a8      	beq.n	9460 <_printf_float+0xa4>
    950e:	0023      	movs	r3, r4
    9510:	222d      	movs	r2, #45	; 0x2d
    9512:	3343      	adds	r3, #67	; 0x43
    9514:	701a      	strb	r2, [r3, #0]
    9516:	e7a3      	b.n	9460 <_printf_float+0xa4>
    9518:	2f67      	cmp	r7, #103	; 0x67
    951a:	d001      	beq.n	9520 <_printf_float+0x164>
    951c:	2f47      	cmp	r7, #71	; 0x47
    951e:	d1b7      	bne.n	9490 <_printf_float+0xd4>
    9520:	2a00      	cmp	r2, #0
    9522:	d016      	beq.n	9552 <_printf_float+0x196>
    9524:	990c      	ldr	r1, [sp, #48]	; 0x30
    9526:	a808      	add	r0, sp, #32
    9528:	430b      	orrs	r3, r1
    952a:	2100      	movs	r1, #0
    952c:	9106      	str	r1, [sp, #24]
    952e:	a912      	add	r1, sp, #72	; 0x48
    9530:	9105      	str	r1, [sp, #20]
    9532:	a911      	add	r1, sp, #68	; 0x44
    9534:	9103      	str	r1, [sp, #12]
    9536:	2123      	movs	r1, #35	; 0x23
    9538:	1809      	adds	r1, r1, r0
    953a:	6023      	str	r3, [r4, #0]
    953c:	9301      	str	r3, [sp, #4]
    953e:	9200      	str	r2, [sp, #0]
    9540:	002b      	movs	r3, r5
    9542:	9704      	str	r7, [sp, #16]
    9544:	9102      	str	r1, [sp, #8]
    9546:	0032      	movs	r2, r6
    9548:	9809      	ldr	r0, [sp, #36]	; 0x24
    954a:	f7ff fe9b 	bl	9284 <__cvt>
    954e:	0005      	movs	r5, r0
    9550:	e7ba      	b.n	94c8 <_printf_float+0x10c>
    9552:	2201      	movs	r2, #1
    9554:	e79b      	b.n	948e <_printf_float+0xd2>
    9556:	2f66      	cmp	r7, #102	; 0x66
    9558:	d119      	bne.n	958e <_printf_float+0x1d2>
    955a:	6863      	ldr	r3, [r4, #4]
    955c:	2900      	cmp	r1, #0
    955e:	dd0c      	ble.n	957a <_printf_float+0x1be>
    9560:	6121      	str	r1, [r4, #16]
    9562:	2b00      	cmp	r3, #0
    9564:	d102      	bne.n	956c <_printf_float+0x1b0>
    9566:	6822      	ldr	r2, [r4, #0]
    9568:	07d2      	lsls	r2, r2, #31
    956a:	d502      	bpl.n	9572 <_printf_float+0x1b6>
    956c:	3301      	adds	r3, #1
    956e:	185b      	adds	r3, r3, r1
    9570:	6123      	str	r3, [r4, #16]
    9572:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9574:	2600      	movs	r6, #0
    9576:	65a3      	str	r3, [r4, #88]	; 0x58
    9578:	e7c3      	b.n	9502 <_printf_float+0x146>
    957a:	2b00      	cmp	r3, #0
    957c:	d103      	bne.n	9586 <_printf_float+0x1ca>
    957e:	2201      	movs	r2, #1
    9580:	6821      	ldr	r1, [r4, #0]
    9582:	4211      	tst	r1, r2
    9584:	d000      	beq.n	9588 <_printf_float+0x1cc>
    9586:	1c9a      	adds	r2, r3, #2
    9588:	6122      	str	r2, [r4, #16]
    958a:	e7f2      	b.n	9572 <_printf_float+0x1b6>
    958c:	2767      	movs	r7, #103	; 0x67
    958e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9590:	9812      	ldr	r0, [sp, #72]	; 0x48
    9592:	4283      	cmp	r3, r0
    9594:	db05      	blt.n	95a2 <_printf_float+0x1e6>
    9596:	6822      	ldr	r2, [r4, #0]
    9598:	6123      	str	r3, [r4, #16]
    959a:	07d2      	lsls	r2, r2, #31
    959c:	d5e9      	bpl.n	9572 <_printf_float+0x1b6>
    959e:	3301      	adds	r3, #1
    95a0:	e7e6      	b.n	9570 <_printf_float+0x1b4>
    95a2:	2201      	movs	r2, #1
    95a4:	2b00      	cmp	r3, #0
    95a6:	dc01      	bgt.n	95ac <_printf_float+0x1f0>
    95a8:	1892      	adds	r2, r2, r2
    95aa:	1ad2      	subs	r2, r2, r3
    95ac:	1812      	adds	r2, r2, r0
    95ae:	e7eb      	b.n	9588 <_printf_float+0x1cc>
    95b0:	6822      	ldr	r2, [r4, #0]
    95b2:	0553      	lsls	r3, r2, #21
    95b4:	d408      	bmi.n	95c8 <_printf_float+0x20c>
    95b6:	6923      	ldr	r3, [r4, #16]
    95b8:	002a      	movs	r2, r5
    95ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    95bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    95be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    95c0:	47a8      	blx	r5
    95c2:	1c43      	adds	r3, r0, #1
    95c4:	d129      	bne.n	961a <_printf_float+0x25e>
    95c6:	e756      	b.n	9476 <_printf_float+0xba>
    95c8:	2f65      	cmp	r7, #101	; 0x65
    95ca:	d800      	bhi.n	95ce <_printf_float+0x212>
    95cc:	e0dc      	b.n	9788 <_printf_float+0x3cc>
    95ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    95d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    95d2:	2200      	movs	r2, #0
    95d4:	2300      	movs	r3, #0
    95d6:	f002 fcf5 	bl	bfc4 <__aeabi_dcmpeq>
    95da:	2800      	cmp	r0, #0
    95dc:	d035      	beq.n	964a <_printf_float+0x28e>
    95de:	2301      	movs	r3, #1
    95e0:	4a35      	ldr	r2, [pc, #212]	; (96b8 <_printf_float+0x2fc>)
    95e2:	990a      	ldr	r1, [sp, #40]	; 0x28
    95e4:	9809      	ldr	r0, [sp, #36]	; 0x24
    95e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    95e8:	47a8      	blx	r5
    95ea:	1c43      	adds	r3, r0, #1
    95ec:	d100      	bne.n	95f0 <_printf_float+0x234>
    95ee:	e742      	b.n	9476 <_printf_float+0xba>
    95f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    95f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    95f4:	4293      	cmp	r3, r2
    95f6:	db02      	blt.n	95fe <_printf_float+0x242>
    95f8:	6823      	ldr	r3, [r4, #0]
    95fa:	07db      	lsls	r3, r3, #31
    95fc:	d50d      	bpl.n	961a <_printf_float+0x25e>
    95fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9604:	990a      	ldr	r1, [sp, #40]	; 0x28
    9606:	9809      	ldr	r0, [sp, #36]	; 0x24
    9608:	47a8      	blx	r5
    960a:	2500      	movs	r5, #0
    960c:	1c43      	adds	r3, r0, #1
    960e:	d100      	bne.n	9612 <_printf_float+0x256>
    9610:	e731      	b.n	9476 <_printf_float+0xba>
    9612:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9614:	3b01      	subs	r3, #1
    9616:	429d      	cmp	r5, r3
    9618:	db0b      	blt.n	9632 <_printf_float+0x276>
    961a:	6823      	ldr	r3, [r4, #0]
    961c:	2500      	movs	r5, #0
    961e:	079b      	lsls	r3, r3, #30
    9620:	d500      	bpl.n	9624 <_printf_float+0x268>
    9622:	e0fd      	b.n	9820 <_printf_float+0x464>
    9624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9626:	68e0      	ldr	r0, [r4, #12]
    9628:	4298      	cmp	r0, r3
    962a:	db00      	blt.n	962e <_printf_float+0x272>
    962c:	e725      	b.n	947a <_printf_float+0xbe>
    962e:	0018      	movs	r0, r3
    9630:	e723      	b.n	947a <_printf_float+0xbe>
    9632:	0022      	movs	r2, r4
    9634:	2301      	movs	r3, #1
    9636:	321a      	adds	r2, #26
    9638:	990a      	ldr	r1, [sp, #40]	; 0x28
    963a:	9809      	ldr	r0, [sp, #36]	; 0x24
    963c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    963e:	47b0      	blx	r6
    9640:	1c43      	adds	r3, r0, #1
    9642:	d100      	bne.n	9646 <_printf_float+0x28a>
    9644:	e717      	b.n	9476 <_printf_float+0xba>
    9646:	3501      	adds	r5, #1
    9648:	e7e3      	b.n	9612 <_printf_float+0x256>
    964a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    964c:	2b00      	cmp	r3, #0
    964e:	dc35      	bgt.n	96bc <_printf_float+0x300>
    9650:	2301      	movs	r3, #1
    9652:	4a19      	ldr	r2, [pc, #100]	; (96b8 <_printf_float+0x2fc>)
    9654:	990a      	ldr	r1, [sp, #40]	; 0x28
    9656:	9809      	ldr	r0, [sp, #36]	; 0x24
    9658:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    965a:	47b0      	blx	r6
    965c:	1c43      	adds	r3, r0, #1
    965e:	d100      	bne.n	9662 <_printf_float+0x2a6>
    9660:	e709      	b.n	9476 <_printf_float+0xba>
    9662:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9664:	2b00      	cmp	r3, #0
    9666:	d105      	bne.n	9674 <_printf_float+0x2b8>
    9668:	9b12      	ldr	r3, [sp, #72]	; 0x48
    966a:	2b00      	cmp	r3, #0
    966c:	d102      	bne.n	9674 <_printf_float+0x2b8>
    966e:	6823      	ldr	r3, [r4, #0]
    9670:	07db      	lsls	r3, r3, #31
    9672:	d5d2      	bpl.n	961a <_printf_float+0x25e>
    9674:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    967a:	990a      	ldr	r1, [sp, #40]	; 0x28
    967c:	9809      	ldr	r0, [sp, #36]	; 0x24
    967e:	47b0      	blx	r6
    9680:	2600      	movs	r6, #0
    9682:	1c43      	adds	r3, r0, #1
    9684:	d100      	bne.n	9688 <_printf_float+0x2cc>
    9686:	e6f6      	b.n	9476 <_printf_float+0xba>
    9688:	9b11      	ldr	r3, [sp, #68]	; 0x44
    968a:	425b      	negs	r3, r3
    968c:	429e      	cmp	r6, r3
    968e:	db01      	blt.n	9694 <_printf_float+0x2d8>
    9690:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9692:	e791      	b.n	95b8 <_printf_float+0x1fc>
    9694:	0022      	movs	r2, r4
    9696:	2301      	movs	r3, #1
    9698:	321a      	adds	r2, #26
    969a:	990a      	ldr	r1, [sp, #40]	; 0x28
    969c:	9809      	ldr	r0, [sp, #36]	; 0x24
    969e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    96a0:	47b8      	blx	r7
    96a2:	1c43      	adds	r3, r0, #1
    96a4:	d100      	bne.n	96a8 <_printf_float+0x2ec>
    96a6:	e6e6      	b.n	9476 <_printf_float+0xba>
    96a8:	3601      	adds	r6, #1
    96aa:	e7ed      	b.n	9688 <_printf_float+0x2cc>
    96ac:	7fefffff 	.word	0x7fefffff
    96b0:	0000ef32 	.word	0x0000ef32
    96b4:	0000ef2e 	.word	0x0000ef2e
    96b8:	0000ef3e 	.word	0x0000ef3e
    96bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
    96be:	9e12      	ldr	r6, [sp, #72]	; 0x48
    96c0:	429e      	cmp	r6, r3
    96c2:	dd00      	ble.n	96c6 <_printf_float+0x30a>
    96c4:	001e      	movs	r6, r3
    96c6:	2e00      	cmp	r6, #0
    96c8:	dc35      	bgt.n	9736 <_printf_float+0x37a>
    96ca:	2300      	movs	r3, #0
    96cc:	930c      	str	r3, [sp, #48]	; 0x30
    96ce:	43f3      	mvns	r3, r6
    96d0:	17db      	asrs	r3, r3, #31
    96d2:	930f      	str	r3, [sp, #60]	; 0x3c
    96d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    96d6:	6da7      	ldr	r7, [r4, #88]	; 0x58
    96d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    96da:	4033      	ands	r3, r6
    96dc:	1afb      	subs	r3, r7, r3
    96de:	429a      	cmp	r2, r3
    96e0:	db32      	blt.n	9748 <_printf_float+0x38c>
    96e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    96e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    96e6:	4293      	cmp	r3, r2
    96e8:	db3c      	blt.n	9764 <_printf_float+0x3a8>
    96ea:	6823      	ldr	r3, [r4, #0]
    96ec:	07db      	lsls	r3, r3, #31
    96ee:	d439      	bmi.n	9764 <_printf_float+0x3a8>
    96f0:	9e12      	ldr	r6, [sp, #72]	; 0x48
    96f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    96f4:	1bf3      	subs	r3, r6, r7
    96f6:	1ab6      	subs	r6, r6, r2
    96f8:	429e      	cmp	r6, r3
    96fa:	dd00      	ble.n	96fe <_printf_float+0x342>
    96fc:	001e      	movs	r6, r3
    96fe:	2e00      	cmp	r6, #0
    9700:	dc39      	bgt.n	9776 <_printf_float+0x3ba>
    9702:	43f7      	mvns	r7, r6
    9704:	2500      	movs	r5, #0
    9706:	17fb      	asrs	r3, r7, #31
    9708:	930c      	str	r3, [sp, #48]	; 0x30
    970a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    970c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    970e:	990c      	ldr	r1, [sp, #48]	; 0x30
    9710:	1a9b      	subs	r3, r3, r2
    9712:	0032      	movs	r2, r6
    9714:	400a      	ands	r2, r1
    9716:	1a9b      	subs	r3, r3, r2
    9718:	429d      	cmp	r5, r3
    971a:	db00      	blt.n	971e <_printf_float+0x362>
    971c:	e77d      	b.n	961a <_printf_float+0x25e>
    971e:	0022      	movs	r2, r4
    9720:	2301      	movs	r3, #1
    9722:	321a      	adds	r2, #26
    9724:	990a      	ldr	r1, [sp, #40]	; 0x28
    9726:	9809      	ldr	r0, [sp, #36]	; 0x24
    9728:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    972a:	47b8      	blx	r7
    972c:	1c43      	adds	r3, r0, #1
    972e:	d100      	bne.n	9732 <_printf_float+0x376>
    9730:	e6a1      	b.n	9476 <_printf_float+0xba>
    9732:	3501      	adds	r5, #1
    9734:	e7e9      	b.n	970a <_printf_float+0x34e>
    9736:	0033      	movs	r3, r6
    9738:	002a      	movs	r2, r5
    973a:	990a      	ldr	r1, [sp, #40]	; 0x28
    973c:	9809      	ldr	r0, [sp, #36]	; 0x24
    973e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9740:	47b8      	blx	r7
    9742:	1c43      	adds	r3, r0, #1
    9744:	d1c1      	bne.n	96ca <_printf_float+0x30e>
    9746:	e696      	b.n	9476 <_printf_float+0xba>
    9748:	0022      	movs	r2, r4
    974a:	2301      	movs	r3, #1
    974c:	321a      	adds	r2, #26
    974e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9750:	9809      	ldr	r0, [sp, #36]	; 0x24
    9752:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9754:	47b8      	blx	r7
    9756:	1c43      	adds	r3, r0, #1
    9758:	d100      	bne.n	975c <_printf_float+0x3a0>
    975a:	e68c      	b.n	9476 <_printf_float+0xba>
    975c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    975e:	3301      	adds	r3, #1
    9760:	930c      	str	r3, [sp, #48]	; 0x30
    9762:	e7b7      	b.n	96d4 <_printf_float+0x318>
    9764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9768:	990a      	ldr	r1, [sp, #40]	; 0x28
    976a:	9809      	ldr	r0, [sp, #36]	; 0x24
    976c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    976e:	47b0      	blx	r6
    9770:	1c43      	adds	r3, r0, #1
    9772:	d1bd      	bne.n	96f0 <_printf_float+0x334>
    9774:	e67f      	b.n	9476 <_printf_float+0xba>
    9776:	19ea      	adds	r2, r5, r7
    9778:	0033      	movs	r3, r6
    977a:	990a      	ldr	r1, [sp, #40]	; 0x28
    977c:	9809      	ldr	r0, [sp, #36]	; 0x24
    977e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9780:	47a8      	blx	r5
    9782:	1c43      	adds	r3, r0, #1
    9784:	d1bd      	bne.n	9702 <_printf_float+0x346>
    9786:	e676      	b.n	9476 <_printf_float+0xba>
    9788:	9b12      	ldr	r3, [sp, #72]	; 0x48
    978a:	2b01      	cmp	r3, #1
    978c:	dc02      	bgt.n	9794 <_printf_float+0x3d8>
    978e:	2301      	movs	r3, #1
    9790:	421a      	tst	r2, r3
    9792:	d038      	beq.n	9806 <_printf_float+0x44a>
    9794:	2301      	movs	r3, #1
    9796:	002a      	movs	r2, r5
    9798:	990a      	ldr	r1, [sp, #40]	; 0x28
    979a:	9809      	ldr	r0, [sp, #36]	; 0x24
    979c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    979e:	47b8      	blx	r7
    97a0:	1c43      	adds	r3, r0, #1
    97a2:	d100      	bne.n	97a6 <_printf_float+0x3ea>
    97a4:	e667      	b.n	9476 <_printf_float+0xba>
    97a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    97a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    97aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    97ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    97ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    97b0:	47b8      	blx	r7
    97b2:	1c43      	adds	r3, r0, #1
    97b4:	d100      	bne.n	97b8 <_printf_float+0x3fc>
    97b6:	e65e      	b.n	9476 <_printf_float+0xba>
    97b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    97ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    97bc:	2200      	movs	r2, #0
    97be:	2300      	movs	r3, #0
    97c0:	f002 fc00 	bl	bfc4 <__aeabi_dcmpeq>
    97c4:	2800      	cmp	r0, #0
    97c6:	d008      	beq.n	97da <_printf_float+0x41e>
    97c8:	2500      	movs	r5, #0
    97ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    97cc:	3b01      	subs	r3, #1
    97ce:	429d      	cmp	r5, r3
    97d0:	db0d      	blt.n	97ee <_printf_float+0x432>
    97d2:	0022      	movs	r2, r4
    97d4:	0033      	movs	r3, r6
    97d6:	3250      	adds	r2, #80	; 0x50
    97d8:	e6ef      	b.n	95ba <_printf_float+0x1fe>
    97da:	9b12      	ldr	r3, [sp, #72]	; 0x48
    97dc:	1c6a      	adds	r2, r5, #1
    97de:	3b01      	subs	r3, #1
    97e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    97e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    97e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    97e6:	47a8      	blx	r5
    97e8:	1c43      	adds	r3, r0, #1
    97ea:	d1f2      	bne.n	97d2 <_printf_float+0x416>
    97ec:	e643      	b.n	9476 <_printf_float+0xba>
    97ee:	0022      	movs	r2, r4
    97f0:	2301      	movs	r3, #1
    97f2:	321a      	adds	r2, #26
    97f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    97f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    97f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    97fa:	47b8      	blx	r7
    97fc:	1c43      	adds	r3, r0, #1
    97fe:	d100      	bne.n	9802 <_printf_float+0x446>
    9800:	e639      	b.n	9476 <_printf_float+0xba>
    9802:	3501      	adds	r5, #1
    9804:	e7e1      	b.n	97ca <_printf_float+0x40e>
    9806:	002a      	movs	r2, r5
    9808:	e7ea      	b.n	97e0 <_printf_float+0x424>
    980a:	0022      	movs	r2, r4
    980c:	2301      	movs	r3, #1
    980e:	3219      	adds	r2, #25
    9810:	990a      	ldr	r1, [sp, #40]	; 0x28
    9812:	9809      	ldr	r0, [sp, #36]	; 0x24
    9814:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9816:	47b0      	blx	r6
    9818:	1c43      	adds	r3, r0, #1
    981a:	d100      	bne.n	981e <_printf_float+0x462>
    981c:	e62b      	b.n	9476 <_printf_float+0xba>
    981e:	3501      	adds	r5, #1
    9820:	68e3      	ldr	r3, [r4, #12]
    9822:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9824:	1a9b      	subs	r3, r3, r2
    9826:	429d      	cmp	r5, r3
    9828:	dbef      	blt.n	980a <_printf_float+0x44e>
    982a:	e6fb      	b.n	9624 <_printf_float+0x268>
    982c:	0032      	movs	r2, r6
    982e:	002b      	movs	r3, r5
    9830:	0030      	movs	r0, r6
    9832:	0029      	movs	r1, r5
    9834:	f004 fbf6 	bl	e024 <__aeabi_dcmpun>
    9838:	2800      	cmp	r0, #0
    983a:	d100      	bne.n	983e <_printf_float+0x482>
    983c:	e621      	b.n	9482 <_printf_float+0xc6>
    983e:	4d03      	ldr	r5, [pc, #12]	; (984c <_printf_float+0x490>)
    9840:	2f47      	cmp	r7, #71	; 0x47
    9842:	d900      	bls.n	9846 <_printf_float+0x48a>
    9844:	e605      	b.n	9452 <_printf_float+0x96>
    9846:	4d02      	ldr	r5, [pc, #8]	; (9850 <_printf_float+0x494>)
    9848:	e603      	b.n	9452 <_printf_float+0x96>
    984a:	46c0      	nop			; (mov r8, r8)
    984c:	0000ef3a 	.word	0x0000ef3a
    9850:	0000ef36 	.word	0x0000ef36

00009854 <_printf_common>:
    9854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9856:	0015      	movs	r5, r2
    9858:	9301      	str	r3, [sp, #4]
    985a:	688a      	ldr	r2, [r1, #8]
    985c:	690b      	ldr	r3, [r1, #16]
    985e:	9000      	str	r0, [sp, #0]
    9860:	000c      	movs	r4, r1
    9862:	4293      	cmp	r3, r2
    9864:	da00      	bge.n	9868 <_printf_common+0x14>
    9866:	0013      	movs	r3, r2
    9868:	0022      	movs	r2, r4
    986a:	602b      	str	r3, [r5, #0]
    986c:	3243      	adds	r2, #67	; 0x43
    986e:	7812      	ldrb	r2, [r2, #0]
    9870:	2a00      	cmp	r2, #0
    9872:	d001      	beq.n	9878 <_printf_common+0x24>
    9874:	3301      	adds	r3, #1
    9876:	602b      	str	r3, [r5, #0]
    9878:	6823      	ldr	r3, [r4, #0]
    987a:	069b      	lsls	r3, r3, #26
    987c:	d502      	bpl.n	9884 <_printf_common+0x30>
    987e:	682b      	ldr	r3, [r5, #0]
    9880:	3302      	adds	r3, #2
    9882:	602b      	str	r3, [r5, #0]
    9884:	2706      	movs	r7, #6
    9886:	6823      	ldr	r3, [r4, #0]
    9888:	401f      	ands	r7, r3
    988a:	d027      	beq.n	98dc <_printf_common+0x88>
    988c:	0023      	movs	r3, r4
    988e:	3343      	adds	r3, #67	; 0x43
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	1e5a      	subs	r2, r3, #1
    9894:	4193      	sbcs	r3, r2
    9896:	6822      	ldr	r2, [r4, #0]
    9898:	0692      	lsls	r2, r2, #26
    989a:	d430      	bmi.n	98fe <_printf_common+0xaa>
    989c:	0022      	movs	r2, r4
    989e:	9901      	ldr	r1, [sp, #4]
    98a0:	3243      	adds	r2, #67	; 0x43
    98a2:	9800      	ldr	r0, [sp, #0]
    98a4:	9e08      	ldr	r6, [sp, #32]
    98a6:	47b0      	blx	r6
    98a8:	1c43      	adds	r3, r0, #1
    98aa:	d025      	beq.n	98f8 <_printf_common+0xa4>
    98ac:	2306      	movs	r3, #6
    98ae:	6820      	ldr	r0, [r4, #0]
    98b0:	682a      	ldr	r2, [r5, #0]
    98b2:	68e1      	ldr	r1, [r4, #12]
    98b4:	4003      	ands	r3, r0
    98b6:	2500      	movs	r5, #0
    98b8:	2b04      	cmp	r3, #4
    98ba:	d103      	bne.n	98c4 <_printf_common+0x70>
    98bc:	1a8d      	subs	r5, r1, r2
    98be:	43eb      	mvns	r3, r5
    98c0:	17db      	asrs	r3, r3, #31
    98c2:	401d      	ands	r5, r3
    98c4:	68a3      	ldr	r3, [r4, #8]
    98c6:	6922      	ldr	r2, [r4, #16]
    98c8:	4293      	cmp	r3, r2
    98ca:	dd01      	ble.n	98d0 <_printf_common+0x7c>
    98cc:	1a9b      	subs	r3, r3, r2
    98ce:	18ed      	adds	r5, r5, r3
    98d0:	2700      	movs	r7, #0
    98d2:	42bd      	cmp	r5, r7
    98d4:	d120      	bne.n	9918 <_printf_common+0xc4>
    98d6:	2000      	movs	r0, #0
    98d8:	e010      	b.n	98fc <_printf_common+0xa8>
    98da:	3701      	adds	r7, #1
    98dc:	68e3      	ldr	r3, [r4, #12]
    98de:	682a      	ldr	r2, [r5, #0]
    98e0:	1a9b      	subs	r3, r3, r2
    98e2:	429f      	cmp	r7, r3
    98e4:	dad2      	bge.n	988c <_printf_common+0x38>
    98e6:	0022      	movs	r2, r4
    98e8:	2301      	movs	r3, #1
    98ea:	3219      	adds	r2, #25
    98ec:	9901      	ldr	r1, [sp, #4]
    98ee:	9800      	ldr	r0, [sp, #0]
    98f0:	9e08      	ldr	r6, [sp, #32]
    98f2:	47b0      	blx	r6
    98f4:	1c43      	adds	r3, r0, #1
    98f6:	d1f0      	bne.n	98da <_printf_common+0x86>
    98f8:	2001      	movs	r0, #1
    98fa:	4240      	negs	r0, r0
    98fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    98fe:	2030      	movs	r0, #48	; 0x30
    9900:	18e1      	adds	r1, r4, r3
    9902:	3143      	adds	r1, #67	; 0x43
    9904:	7008      	strb	r0, [r1, #0]
    9906:	0021      	movs	r1, r4
    9908:	1c5a      	adds	r2, r3, #1
    990a:	3145      	adds	r1, #69	; 0x45
    990c:	7809      	ldrb	r1, [r1, #0]
    990e:	18a2      	adds	r2, r4, r2
    9910:	3243      	adds	r2, #67	; 0x43
    9912:	3302      	adds	r3, #2
    9914:	7011      	strb	r1, [r2, #0]
    9916:	e7c1      	b.n	989c <_printf_common+0x48>
    9918:	0022      	movs	r2, r4
    991a:	2301      	movs	r3, #1
    991c:	321a      	adds	r2, #26
    991e:	9901      	ldr	r1, [sp, #4]
    9920:	9800      	ldr	r0, [sp, #0]
    9922:	9e08      	ldr	r6, [sp, #32]
    9924:	47b0      	blx	r6
    9926:	1c43      	adds	r3, r0, #1
    9928:	d0e6      	beq.n	98f8 <_printf_common+0xa4>
    992a:	3701      	adds	r7, #1
    992c:	e7d1      	b.n	98d2 <_printf_common+0x7e>
	...

00009930 <_printf_i>:
    9930:	b5f0      	push	{r4, r5, r6, r7, lr}
    9932:	b08b      	sub	sp, #44	; 0x2c
    9934:	9206      	str	r2, [sp, #24]
    9936:	000a      	movs	r2, r1
    9938:	3243      	adds	r2, #67	; 0x43
    993a:	9307      	str	r3, [sp, #28]
    993c:	9005      	str	r0, [sp, #20]
    993e:	9204      	str	r2, [sp, #16]
    9940:	7e0a      	ldrb	r2, [r1, #24]
    9942:	000c      	movs	r4, r1
    9944:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9946:	2a6e      	cmp	r2, #110	; 0x6e
    9948:	d100      	bne.n	994c <_printf_i+0x1c>
    994a:	e08f      	b.n	9a6c <_printf_i+0x13c>
    994c:	d817      	bhi.n	997e <_printf_i+0x4e>
    994e:	2a63      	cmp	r2, #99	; 0x63
    9950:	d02c      	beq.n	99ac <_printf_i+0x7c>
    9952:	d808      	bhi.n	9966 <_printf_i+0x36>
    9954:	2a00      	cmp	r2, #0
    9956:	d100      	bne.n	995a <_printf_i+0x2a>
    9958:	e099      	b.n	9a8e <_printf_i+0x15e>
    995a:	2a58      	cmp	r2, #88	; 0x58
    995c:	d054      	beq.n	9a08 <_printf_i+0xd8>
    995e:	0026      	movs	r6, r4
    9960:	3642      	adds	r6, #66	; 0x42
    9962:	7032      	strb	r2, [r6, #0]
    9964:	e029      	b.n	99ba <_printf_i+0x8a>
    9966:	2a64      	cmp	r2, #100	; 0x64
    9968:	d001      	beq.n	996e <_printf_i+0x3e>
    996a:	2a69      	cmp	r2, #105	; 0x69
    996c:	d1f7      	bne.n	995e <_printf_i+0x2e>
    996e:	6821      	ldr	r1, [r4, #0]
    9970:	681a      	ldr	r2, [r3, #0]
    9972:	0608      	lsls	r0, r1, #24
    9974:	d523      	bpl.n	99be <_printf_i+0x8e>
    9976:	1d11      	adds	r1, r2, #4
    9978:	6019      	str	r1, [r3, #0]
    997a:	6815      	ldr	r5, [r2, #0]
    997c:	e025      	b.n	99ca <_printf_i+0x9a>
    997e:	2a73      	cmp	r2, #115	; 0x73
    9980:	d100      	bne.n	9984 <_printf_i+0x54>
    9982:	e088      	b.n	9a96 <_printf_i+0x166>
    9984:	d808      	bhi.n	9998 <_printf_i+0x68>
    9986:	2a6f      	cmp	r2, #111	; 0x6f
    9988:	d029      	beq.n	99de <_printf_i+0xae>
    998a:	2a70      	cmp	r2, #112	; 0x70
    998c:	d1e7      	bne.n	995e <_printf_i+0x2e>
    998e:	2220      	movs	r2, #32
    9990:	6809      	ldr	r1, [r1, #0]
    9992:	430a      	orrs	r2, r1
    9994:	6022      	str	r2, [r4, #0]
    9996:	e003      	b.n	99a0 <_printf_i+0x70>
    9998:	2a75      	cmp	r2, #117	; 0x75
    999a:	d020      	beq.n	99de <_printf_i+0xae>
    999c:	2a78      	cmp	r2, #120	; 0x78
    999e:	d1de      	bne.n	995e <_printf_i+0x2e>
    99a0:	0022      	movs	r2, r4
    99a2:	2178      	movs	r1, #120	; 0x78
    99a4:	3245      	adds	r2, #69	; 0x45
    99a6:	7011      	strb	r1, [r2, #0]
    99a8:	4a6c      	ldr	r2, [pc, #432]	; (9b5c <_printf_i+0x22c>)
    99aa:	e030      	b.n	9a0e <_printf_i+0xde>
    99ac:	000e      	movs	r6, r1
    99ae:	681a      	ldr	r2, [r3, #0]
    99b0:	3642      	adds	r6, #66	; 0x42
    99b2:	1d11      	adds	r1, r2, #4
    99b4:	6019      	str	r1, [r3, #0]
    99b6:	6813      	ldr	r3, [r2, #0]
    99b8:	7033      	strb	r3, [r6, #0]
    99ba:	2301      	movs	r3, #1
    99bc:	e079      	b.n	9ab2 <_printf_i+0x182>
    99be:	0649      	lsls	r1, r1, #25
    99c0:	d5d9      	bpl.n	9976 <_printf_i+0x46>
    99c2:	1d11      	adds	r1, r2, #4
    99c4:	6019      	str	r1, [r3, #0]
    99c6:	2300      	movs	r3, #0
    99c8:	5ed5      	ldrsh	r5, [r2, r3]
    99ca:	2d00      	cmp	r5, #0
    99cc:	da03      	bge.n	99d6 <_printf_i+0xa6>
    99ce:	232d      	movs	r3, #45	; 0x2d
    99d0:	9a04      	ldr	r2, [sp, #16]
    99d2:	426d      	negs	r5, r5
    99d4:	7013      	strb	r3, [r2, #0]
    99d6:	4b62      	ldr	r3, [pc, #392]	; (9b60 <_printf_i+0x230>)
    99d8:	270a      	movs	r7, #10
    99da:	9303      	str	r3, [sp, #12]
    99dc:	e02f      	b.n	9a3e <_printf_i+0x10e>
    99de:	6820      	ldr	r0, [r4, #0]
    99e0:	6819      	ldr	r1, [r3, #0]
    99e2:	0605      	lsls	r5, r0, #24
    99e4:	d503      	bpl.n	99ee <_printf_i+0xbe>
    99e6:	1d08      	adds	r0, r1, #4
    99e8:	6018      	str	r0, [r3, #0]
    99ea:	680d      	ldr	r5, [r1, #0]
    99ec:	e005      	b.n	99fa <_printf_i+0xca>
    99ee:	0640      	lsls	r0, r0, #25
    99f0:	d5f9      	bpl.n	99e6 <_printf_i+0xb6>
    99f2:	680d      	ldr	r5, [r1, #0]
    99f4:	1d08      	adds	r0, r1, #4
    99f6:	6018      	str	r0, [r3, #0]
    99f8:	b2ad      	uxth	r5, r5
    99fa:	4b59      	ldr	r3, [pc, #356]	; (9b60 <_printf_i+0x230>)
    99fc:	2708      	movs	r7, #8
    99fe:	9303      	str	r3, [sp, #12]
    9a00:	2a6f      	cmp	r2, #111	; 0x6f
    9a02:	d018      	beq.n	9a36 <_printf_i+0x106>
    9a04:	270a      	movs	r7, #10
    9a06:	e016      	b.n	9a36 <_printf_i+0x106>
    9a08:	3145      	adds	r1, #69	; 0x45
    9a0a:	700a      	strb	r2, [r1, #0]
    9a0c:	4a54      	ldr	r2, [pc, #336]	; (9b60 <_printf_i+0x230>)
    9a0e:	9203      	str	r2, [sp, #12]
    9a10:	681a      	ldr	r2, [r3, #0]
    9a12:	6821      	ldr	r1, [r4, #0]
    9a14:	1d10      	adds	r0, r2, #4
    9a16:	6018      	str	r0, [r3, #0]
    9a18:	6815      	ldr	r5, [r2, #0]
    9a1a:	0608      	lsls	r0, r1, #24
    9a1c:	d522      	bpl.n	9a64 <_printf_i+0x134>
    9a1e:	07cb      	lsls	r3, r1, #31
    9a20:	d502      	bpl.n	9a28 <_printf_i+0xf8>
    9a22:	2320      	movs	r3, #32
    9a24:	4319      	orrs	r1, r3
    9a26:	6021      	str	r1, [r4, #0]
    9a28:	2710      	movs	r7, #16
    9a2a:	2d00      	cmp	r5, #0
    9a2c:	d103      	bne.n	9a36 <_printf_i+0x106>
    9a2e:	2320      	movs	r3, #32
    9a30:	6822      	ldr	r2, [r4, #0]
    9a32:	439a      	bics	r2, r3
    9a34:	6022      	str	r2, [r4, #0]
    9a36:	0023      	movs	r3, r4
    9a38:	2200      	movs	r2, #0
    9a3a:	3343      	adds	r3, #67	; 0x43
    9a3c:	701a      	strb	r2, [r3, #0]
    9a3e:	6863      	ldr	r3, [r4, #4]
    9a40:	60a3      	str	r3, [r4, #8]
    9a42:	2b00      	cmp	r3, #0
    9a44:	db5c      	blt.n	9b00 <_printf_i+0x1d0>
    9a46:	2204      	movs	r2, #4
    9a48:	6821      	ldr	r1, [r4, #0]
    9a4a:	4391      	bics	r1, r2
    9a4c:	6021      	str	r1, [r4, #0]
    9a4e:	2d00      	cmp	r5, #0
    9a50:	d158      	bne.n	9b04 <_printf_i+0x1d4>
    9a52:	9e04      	ldr	r6, [sp, #16]
    9a54:	2b00      	cmp	r3, #0
    9a56:	d064      	beq.n	9b22 <_printf_i+0x1f2>
    9a58:	0026      	movs	r6, r4
    9a5a:	9b03      	ldr	r3, [sp, #12]
    9a5c:	3642      	adds	r6, #66	; 0x42
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	7033      	strb	r3, [r6, #0]
    9a62:	e05e      	b.n	9b22 <_printf_i+0x1f2>
    9a64:	0648      	lsls	r0, r1, #25
    9a66:	d5da      	bpl.n	9a1e <_printf_i+0xee>
    9a68:	b2ad      	uxth	r5, r5
    9a6a:	e7d8      	b.n	9a1e <_printf_i+0xee>
    9a6c:	6809      	ldr	r1, [r1, #0]
    9a6e:	681a      	ldr	r2, [r3, #0]
    9a70:	0608      	lsls	r0, r1, #24
    9a72:	d505      	bpl.n	9a80 <_printf_i+0x150>
    9a74:	1d11      	adds	r1, r2, #4
    9a76:	6019      	str	r1, [r3, #0]
    9a78:	6813      	ldr	r3, [r2, #0]
    9a7a:	6962      	ldr	r2, [r4, #20]
    9a7c:	601a      	str	r2, [r3, #0]
    9a7e:	e006      	b.n	9a8e <_printf_i+0x15e>
    9a80:	0649      	lsls	r1, r1, #25
    9a82:	d5f7      	bpl.n	9a74 <_printf_i+0x144>
    9a84:	1d11      	adds	r1, r2, #4
    9a86:	6019      	str	r1, [r3, #0]
    9a88:	6813      	ldr	r3, [r2, #0]
    9a8a:	8aa2      	ldrh	r2, [r4, #20]
    9a8c:	801a      	strh	r2, [r3, #0]
    9a8e:	2300      	movs	r3, #0
    9a90:	9e04      	ldr	r6, [sp, #16]
    9a92:	6123      	str	r3, [r4, #16]
    9a94:	e054      	b.n	9b40 <_printf_i+0x210>
    9a96:	681a      	ldr	r2, [r3, #0]
    9a98:	1d11      	adds	r1, r2, #4
    9a9a:	6019      	str	r1, [r3, #0]
    9a9c:	6816      	ldr	r6, [r2, #0]
    9a9e:	2100      	movs	r1, #0
    9aa0:	6862      	ldr	r2, [r4, #4]
    9aa2:	0030      	movs	r0, r6
    9aa4:	f001 fbfe 	bl	b2a4 <memchr>
    9aa8:	2800      	cmp	r0, #0
    9aaa:	d001      	beq.n	9ab0 <_printf_i+0x180>
    9aac:	1b80      	subs	r0, r0, r6
    9aae:	6060      	str	r0, [r4, #4]
    9ab0:	6863      	ldr	r3, [r4, #4]
    9ab2:	6123      	str	r3, [r4, #16]
    9ab4:	2300      	movs	r3, #0
    9ab6:	9a04      	ldr	r2, [sp, #16]
    9ab8:	7013      	strb	r3, [r2, #0]
    9aba:	e041      	b.n	9b40 <_printf_i+0x210>
    9abc:	6923      	ldr	r3, [r4, #16]
    9abe:	0032      	movs	r2, r6
    9ac0:	9906      	ldr	r1, [sp, #24]
    9ac2:	9805      	ldr	r0, [sp, #20]
    9ac4:	9d07      	ldr	r5, [sp, #28]
    9ac6:	47a8      	blx	r5
    9ac8:	1c43      	adds	r3, r0, #1
    9aca:	d043      	beq.n	9b54 <_printf_i+0x224>
    9acc:	6823      	ldr	r3, [r4, #0]
    9ace:	2500      	movs	r5, #0
    9ad0:	079b      	lsls	r3, r3, #30
    9ad2:	d40f      	bmi.n	9af4 <_printf_i+0x1c4>
    9ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ad6:	68e0      	ldr	r0, [r4, #12]
    9ad8:	4298      	cmp	r0, r3
    9ada:	da3d      	bge.n	9b58 <_printf_i+0x228>
    9adc:	0018      	movs	r0, r3
    9ade:	e03b      	b.n	9b58 <_printf_i+0x228>
    9ae0:	0022      	movs	r2, r4
    9ae2:	2301      	movs	r3, #1
    9ae4:	3219      	adds	r2, #25
    9ae6:	9906      	ldr	r1, [sp, #24]
    9ae8:	9805      	ldr	r0, [sp, #20]
    9aea:	9e07      	ldr	r6, [sp, #28]
    9aec:	47b0      	blx	r6
    9aee:	1c43      	adds	r3, r0, #1
    9af0:	d030      	beq.n	9b54 <_printf_i+0x224>
    9af2:	3501      	adds	r5, #1
    9af4:	68e3      	ldr	r3, [r4, #12]
    9af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9af8:	1a9b      	subs	r3, r3, r2
    9afa:	429d      	cmp	r5, r3
    9afc:	dbf0      	blt.n	9ae0 <_printf_i+0x1b0>
    9afe:	e7e9      	b.n	9ad4 <_printf_i+0x1a4>
    9b00:	2d00      	cmp	r5, #0
    9b02:	d0a9      	beq.n	9a58 <_printf_i+0x128>
    9b04:	9e04      	ldr	r6, [sp, #16]
    9b06:	0028      	movs	r0, r5
    9b08:	0039      	movs	r1, r7
    9b0a:	f002 f95b 	bl	bdc4 <__aeabi_uidivmod>
    9b0e:	9b03      	ldr	r3, [sp, #12]
    9b10:	3e01      	subs	r6, #1
    9b12:	5c5b      	ldrb	r3, [r3, r1]
    9b14:	0028      	movs	r0, r5
    9b16:	7033      	strb	r3, [r6, #0]
    9b18:	0039      	movs	r1, r7
    9b1a:	f002 f8cd 	bl	bcb8 <__udivsi3>
    9b1e:	1e05      	subs	r5, r0, #0
    9b20:	d1f1      	bne.n	9b06 <_printf_i+0x1d6>
    9b22:	2f08      	cmp	r7, #8
    9b24:	d109      	bne.n	9b3a <_printf_i+0x20a>
    9b26:	6823      	ldr	r3, [r4, #0]
    9b28:	07db      	lsls	r3, r3, #31
    9b2a:	d506      	bpl.n	9b3a <_printf_i+0x20a>
    9b2c:	6863      	ldr	r3, [r4, #4]
    9b2e:	6922      	ldr	r2, [r4, #16]
    9b30:	4293      	cmp	r3, r2
    9b32:	dc02      	bgt.n	9b3a <_printf_i+0x20a>
    9b34:	2330      	movs	r3, #48	; 0x30
    9b36:	3e01      	subs	r6, #1
    9b38:	7033      	strb	r3, [r6, #0]
    9b3a:	9b04      	ldr	r3, [sp, #16]
    9b3c:	1b9b      	subs	r3, r3, r6
    9b3e:	6123      	str	r3, [r4, #16]
    9b40:	9b07      	ldr	r3, [sp, #28]
    9b42:	aa09      	add	r2, sp, #36	; 0x24
    9b44:	9300      	str	r3, [sp, #0]
    9b46:	0021      	movs	r1, r4
    9b48:	9b06      	ldr	r3, [sp, #24]
    9b4a:	9805      	ldr	r0, [sp, #20]
    9b4c:	f7ff fe82 	bl	9854 <_printf_common>
    9b50:	1c43      	adds	r3, r0, #1
    9b52:	d1b3      	bne.n	9abc <_printf_i+0x18c>
    9b54:	2001      	movs	r0, #1
    9b56:	4240      	negs	r0, r0
    9b58:	b00b      	add	sp, #44	; 0x2c
    9b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b5c:	0000ef51 	.word	0x0000ef51
    9b60:	0000ef40 	.word	0x0000ef40

00009b64 <iprintf>:
    9b64:	b40f      	push	{r0, r1, r2, r3}
    9b66:	4b0b      	ldr	r3, [pc, #44]	; (9b94 <iprintf+0x30>)
    9b68:	b513      	push	{r0, r1, r4, lr}
    9b6a:	681c      	ldr	r4, [r3, #0]
    9b6c:	2c00      	cmp	r4, #0
    9b6e:	d005      	beq.n	9b7c <iprintf+0x18>
    9b70:	69a3      	ldr	r3, [r4, #24]
    9b72:	2b00      	cmp	r3, #0
    9b74:	d102      	bne.n	9b7c <iprintf+0x18>
    9b76:	0020      	movs	r0, r4
    9b78:	f001 fa86 	bl	b088 <__sinit>
    9b7c:	ab05      	add	r3, sp, #20
    9b7e:	9a04      	ldr	r2, [sp, #16]
    9b80:	68a1      	ldr	r1, [r4, #8]
    9b82:	0020      	movs	r0, r4
    9b84:	9301      	str	r3, [sp, #4]
    9b86:	f001 feb3 	bl	b8f0 <_vfiprintf_r>
    9b8a:	bc16      	pop	{r1, r2, r4}
    9b8c:	bc08      	pop	{r3}
    9b8e:	b004      	add	sp, #16
    9b90:	4718      	bx	r3
    9b92:	46c0      	nop			; (mov r8, r8)
    9b94:	20000078 	.word	0x20000078

00009b98 <_puts_r>:
    9b98:	b570      	push	{r4, r5, r6, lr}
    9b9a:	0005      	movs	r5, r0
    9b9c:	000e      	movs	r6, r1
    9b9e:	2800      	cmp	r0, #0
    9ba0:	d004      	beq.n	9bac <_puts_r+0x14>
    9ba2:	6983      	ldr	r3, [r0, #24]
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d101      	bne.n	9bac <_puts_r+0x14>
    9ba8:	f001 fa6e 	bl	b088 <__sinit>
    9bac:	69ab      	ldr	r3, [r5, #24]
    9bae:	68ac      	ldr	r4, [r5, #8]
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	d102      	bne.n	9bba <_puts_r+0x22>
    9bb4:	0028      	movs	r0, r5
    9bb6:	f001 fa67 	bl	b088 <__sinit>
    9bba:	4b24      	ldr	r3, [pc, #144]	; (9c4c <_puts_r+0xb4>)
    9bbc:	429c      	cmp	r4, r3
    9bbe:	d10f      	bne.n	9be0 <_puts_r+0x48>
    9bc0:	686c      	ldr	r4, [r5, #4]
    9bc2:	89a3      	ldrh	r3, [r4, #12]
    9bc4:	071b      	lsls	r3, r3, #28
    9bc6:	d502      	bpl.n	9bce <_puts_r+0x36>
    9bc8:	6923      	ldr	r3, [r4, #16]
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d120      	bne.n	9c10 <_puts_r+0x78>
    9bce:	0021      	movs	r1, r4
    9bd0:	0028      	movs	r0, r5
    9bd2:	f000 fa7f 	bl	a0d4 <__swsetup_r>
    9bd6:	2800      	cmp	r0, #0
    9bd8:	d01a      	beq.n	9c10 <_puts_r+0x78>
    9bda:	2001      	movs	r0, #1
    9bdc:	4240      	negs	r0, r0
    9bde:	bd70      	pop	{r4, r5, r6, pc}
    9be0:	4b1b      	ldr	r3, [pc, #108]	; (9c50 <_puts_r+0xb8>)
    9be2:	429c      	cmp	r4, r3
    9be4:	d101      	bne.n	9bea <_puts_r+0x52>
    9be6:	68ac      	ldr	r4, [r5, #8]
    9be8:	e7eb      	b.n	9bc2 <_puts_r+0x2a>
    9bea:	4b1a      	ldr	r3, [pc, #104]	; (9c54 <_puts_r+0xbc>)
    9bec:	429c      	cmp	r4, r3
    9bee:	d1e8      	bne.n	9bc2 <_puts_r+0x2a>
    9bf0:	68ec      	ldr	r4, [r5, #12]
    9bf2:	e7e6      	b.n	9bc2 <_puts_r+0x2a>
    9bf4:	3b01      	subs	r3, #1
    9bf6:	3601      	adds	r6, #1
    9bf8:	60a3      	str	r3, [r4, #8]
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	da04      	bge.n	9c08 <_puts_r+0x70>
    9bfe:	69a2      	ldr	r2, [r4, #24]
    9c00:	4293      	cmp	r3, r2
    9c02:	db16      	blt.n	9c32 <_puts_r+0x9a>
    9c04:	290a      	cmp	r1, #10
    9c06:	d014      	beq.n	9c32 <_puts_r+0x9a>
    9c08:	6823      	ldr	r3, [r4, #0]
    9c0a:	1c5a      	adds	r2, r3, #1
    9c0c:	6022      	str	r2, [r4, #0]
    9c0e:	7019      	strb	r1, [r3, #0]
    9c10:	7831      	ldrb	r1, [r6, #0]
    9c12:	68a3      	ldr	r3, [r4, #8]
    9c14:	2900      	cmp	r1, #0
    9c16:	d1ed      	bne.n	9bf4 <_puts_r+0x5c>
    9c18:	3b01      	subs	r3, #1
    9c1a:	60a3      	str	r3, [r4, #8]
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	da0f      	bge.n	9c40 <_puts_r+0xa8>
    9c20:	0022      	movs	r2, r4
    9c22:	310a      	adds	r1, #10
    9c24:	0028      	movs	r0, r5
    9c26:	f000 f9f3 	bl	a010 <__swbuf_r>
    9c2a:	1c43      	adds	r3, r0, #1
    9c2c:	d0d5      	beq.n	9bda <_puts_r+0x42>
    9c2e:	200a      	movs	r0, #10
    9c30:	e7d5      	b.n	9bde <_puts_r+0x46>
    9c32:	0022      	movs	r2, r4
    9c34:	0028      	movs	r0, r5
    9c36:	f000 f9eb 	bl	a010 <__swbuf_r>
    9c3a:	1c43      	adds	r3, r0, #1
    9c3c:	d1e8      	bne.n	9c10 <_puts_r+0x78>
    9c3e:	e7cc      	b.n	9bda <_puts_r+0x42>
    9c40:	200a      	movs	r0, #10
    9c42:	6823      	ldr	r3, [r4, #0]
    9c44:	1c5a      	adds	r2, r3, #1
    9c46:	6022      	str	r2, [r4, #0]
    9c48:	7018      	strb	r0, [r3, #0]
    9c4a:	e7c8      	b.n	9bde <_puts_r+0x46>
    9c4c:	0000f090 	.word	0x0000f090
    9c50:	0000f0b0 	.word	0x0000f0b0
    9c54:	0000f070 	.word	0x0000f070

00009c58 <puts>:
    9c58:	b510      	push	{r4, lr}
    9c5a:	4b03      	ldr	r3, [pc, #12]	; (9c68 <puts+0x10>)
    9c5c:	0001      	movs	r1, r0
    9c5e:	6818      	ldr	r0, [r3, #0]
    9c60:	f7ff ff9a 	bl	9b98 <_puts_r>
    9c64:	bd10      	pop	{r4, pc}
    9c66:	46c0      	nop			; (mov r8, r8)
    9c68:	20000078 	.word	0x20000078

00009c6c <_sbrk_r>:
    9c6c:	2300      	movs	r3, #0
    9c6e:	b570      	push	{r4, r5, r6, lr}
    9c70:	4c06      	ldr	r4, [pc, #24]	; (9c8c <_sbrk_r+0x20>)
    9c72:	0005      	movs	r5, r0
    9c74:	0008      	movs	r0, r1
    9c76:	6023      	str	r3, [r4, #0]
    9c78:	f7fd f816 	bl	6ca8 <_sbrk>
    9c7c:	1c43      	adds	r3, r0, #1
    9c7e:	d103      	bne.n	9c88 <_sbrk_r+0x1c>
    9c80:	6823      	ldr	r3, [r4, #0]
    9c82:	2b00      	cmp	r3, #0
    9c84:	d000      	beq.n	9c88 <_sbrk_r+0x1c>
    9c86:	602b      	str	r3, [r5, #0]
    9c88:	bd70      	pop	{r4, r5, r6, pc}
    9c8a:	46c0      	nop			; (mov r8, r8)
    9c8c:	200004e0 	.word	0x200004e0

00009c90 <setbuf>:
    9c90:	424a      	negs	r2, r1
    9c92:	414a      	adcs	r2, r1
    9c94:	2380      	movs	r3, #128	; 0x80
    9c96:	b510      	push	{r4, lr}
    9c98:	0052      	lsls	r2, r2, #1
    9c9a:	00db      	lsls	r3, r3, #3
    9c9c:	f000 f802 	bl	9ca4 <setvbuf>
    9ca0:	bd10      	pop	{r4, pc}
	...

00009ca4 <setvbuf>:
    9ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ca6:	001d      	movs	r5, r3
    9ca8:	4b4f      	ldr	r3, [pc, #316]	; (9de8 <setvbuf+0x144>)
    9caa:	b085      	sub	sp, #20
    9cac:	681e      	ldr	r6, [r3, #0]
    9cae:	0004      	movs	r4, r0
    9cb0:	000f      	movs	r7, r1
    9cb2:	9200      	str	r2, [sp, #0]
    9cb4:	2e00      	cmp	r6, #0
    9cb6:	d005      	beq.n	9cc4 <setvbuf+0x20>
    9cb8:	69b3      	ldr	r3, [r6, #24]
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d102      	bne.n	9cc4 <setvbuf+0x20>
    9cbe:	0030      	movs	r0, r6
    9cc0:	f001 f9e2 	bl	b088 <__sinit>
    9cc4:	4b49      	ldr	r3, [pc, #292]	; (9dec <setvbuf+0x148>)
    9cc6:	429c      	cmp	r4, r3
    9cc8:	d150      	bne.n	9d6c <setvbuf+0xc8>
    9cca:	6874      	ldr	r4, [r6, #4]
    9ccc:	9b00      	ldr	r3, [sp, #0]
    9cce:	2b02      	cmp	r3, #2
    9cd0:	d005      	beq.n	9cde <setvbuf+0x3a>
    9cd2:	2b01      	cmp	r3, #1
    9cd4:	d900      	bls.n	9cd8 <setvbuf+0x34>
    9cd6:	e084      	b.n	9de2 <setvbuf+0x13e>
    9cd8:	2d00      	cmp	r5, #0
    9cda:	da00      	bge.n	9cde <setvbuf+0x3a>
    9cdc:	e081      	b.n	9de2 <setvbuf+0x13e>
    9cde:	0021      	movs	r1, r4
    9ce0:	0030      	movs	r0, r6
    9ce2:	f001 f963 	bl	afac <_fflush_r>
    9ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9ce8:	2900      	cmp	r1, #0
    9cea:	d008      	beq.n	9cfe <setvbuf+0x5a>
    9cec:	0023      	movs	r3, r4
    9cee:	3344      	adds	r3, #68	; 0x44
    9cf0:	4299      	cmp	r1, r3
    9cf2:	d002      	beq.n	9cfa <setvbuf+0x56>
    9cf4:	0030      	movs	r0, r6
    9cf6:	f7ff fa1d 	bl	9134 <_free_r>
    9cfa:	2300      	movs	r3, #0
    9cfc:	6363      	str	r3, [r4, #52]	; 0x34
    9cfe:	2300      	movs	r3, #0
    9d00:	61a3      	str	r3, [r4, #24]
    9d02:	6063      	str	r3, [r4, #4]
    9d04:	89a3      	ldrh	r3, [r4, #12]
    9d06:	061b      	lsls	r3, r3, #24
    9d08:	d503      	bpl.n	9d12 <setvbuf+0x6e>
    9d0a:	6921      	ldr	r1, [r4, #16]
    9d0c:	0030      	movs	r0, r6
    9d0e:	f7ff fa11 	bl	9134 <_free_r>
    9d12:	89a3      	ldrh	r3, [r4, #12]
    9d14:	4a36      	ldr	r2, [pc, #216]	; (9df0 <setvbuf+0x14c>)
    9d16:	4013      	ands	r3, r2
    9d18:	81a3      	strh	r3, [r4, #12]
    9d1a:	9b00      	ldr	r3, [sp, #0]
    9d1c:	2b02      	cmp	r3, #2
    9d1e:	d05a      	beq.n	9dd6 <setvbuf+0x132>
    9d20:	ab03      	add	r3, sp, #12
    9d22:	aa02      	add	r2, sp, #8
    9d24:	0021      	movs	r1, r4
    9d26:	0030      	movs	r0, r6
    9d28:	f001 fa50 	bl	b1cc <__swhatbuf_r>
    9d2c:	89a3      	ldrh	r3, [r4, #12]
    9d2e:	4318      	orrs	r0, r3
    9d30:	81a0      	strh	r0, [r4, #12]
    9d32:	2d00      	cmp	r5, #0
    9d34:	d124      	bne.n	9d80 <setvbuf+0xdc>
    9d36:	9d02      	ldr	r5, [sp, #8]
    9d38:	0028      	movs	r0, r5
    9d3a:	f7ff f9cd 	bl	90d8 <malloc>
    9d3e:	9501      	str	r5, [sp, #4]
    9d40:	1e07      	subs	r7, r0, #0
    9d42:	d142      	bne.n	9dca <setvbuf+0x126>
    9d44:	9b02      	ldr	r3, [sp, #8]
    9d46:	9301      	str	r3, [sp, #4]
    9d48:	42ab      	cmp	r3, r5
    9d4a:	d139      	bne.n	9dc0 <setvbuf+0x11c>
    9d4c:	2001      	movs	r0, #1
    9d4e:	4240      	negs	r0, r0
    9d50:	2302      	movs	r3, #2
    9d52:	89a2      	ldrh	r2, [r4, #12]
    9d54:	4313      	orrs	r3, r2
    9d56:	81a3      	strh	r3, [r4, #12]
    9d58:	2300      	movs	r3, #0
    9d5a:	60a3      	str	r3, [r4, #8]
    9d5c:	0023      	movs	r3, r4
    9d5e:	3347      	adds	r3, #71	; 0x47
    9d60:	6023      	str	r3, [r4, #0]
    9d62:	6123      	str	r3, [r4, #16]
    9d64:	2301      	movs	r3, #1
    9d66:	6163      	str	r3, [r4, #20]
    9d68:	b005      	add	sp, #20
    9d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d6c:	4b21      	ldr	r3, [pc, #132]	; (9df4 <setvbuf+0x150>)
    9d6e:	429c      	cmp	r4, r3
    9d70:	d101      	bne.n	9d76 <setvbuf+0xd2>
    9d72:	68b4      	ldr	r4, [r6, #8]
    9d74:	e7aa      	b.n	9ccc <setvbuf+0x28>
    9d76:	4b20      	ldr	r3, [pc, #128]	; (9df8 <setvbuf+0x154>)
    9d78:	429c      	cmp	r4, r3
    9d7a:	d1a7      	bne.n	9ccc <setvbuf+0x28>
    9d7c:	68f4      	ldr	r4, [r6, #12]
    9d7e:	e7a5      	b.n	9ccc <setvbuf+0x28>
    9d80:	2f00      	cmp	r7, #0
    9d82:	d0d9      	beq.n	9d38 <setvbuf+0x94>
    9d84:	69b3      	ldr	r3, [r6, #24]
    9d86:	2b00      	cmp	r3, #0
    9d88:	d102      	bne.n	9d90 <setvbuf+0xec>
    9d8a:	0030      	movs	r0, r6
    9d8c:	f001 f97c 	bl	b088 <__sinit>
    9d90:	9b00      	ldr	r3, [sp, #0]
    9d92:	2b01      	cmp	r3, #1
    9d94:	d103      	bne.n	9d9e <setvbuf+0xfa>
    9d96:	89a3      	ldrh	r3, [r4, #12]
    9d98:	9a00      	ldr	r2, [sp, #0]
    9d9a:	431a      	orrs	r2, r3
    9d9c:	81a2      	strh	r2, [r4, #12]
    9d9e:	2008      	movs	r0, #8
    9da0:	89a3      	ldrh	r3, [r4, #12]
    9da2:	6027      	str	r7, [r4, #0]
    9da4:	6127      	str	r7, [r4, #16]
    9da6:	6165      	str	r5, [r4, #20]
    9da8:	4018      	ands	r0, r3
    9daa:	d018      	beq.n	9dde <setvbuf+0x13a>
    9dac:	2001      	movs	r0, #1
    9dae:	4018      	ands	r0, r3
    9db0:	2300      	movs	r3, #0
    9db2:	4298      	cmp	r0, r3
    9db4:	d011      	beq.n	9dda <setvbuf+0x136>
    9db6:	426d      	negs	r5, r5
    9db8:	60a3      	str	r3, [r4, #8]
    9dba:	61a5      	str	r5, [r4, #24]
    9dbc:	0018      	movs	r0, r3
    9dbe:	e7d3      	b.n	9d68 <setvbuf+0xc4>
    9dc0:	9801      	ldr	r0, [sp, #4]
    9dc2:	f7ff f989 	bl	90d8 <malloc>
    9dc6:	1e07      	subs	r7, r0, #0
    9dc8:	d0c0      	beq.n	9d4c <setvbuf+0xa8>
    9dca:	2380      	movs	r3, #128	; 0x80
    9dcc:	89a2      	ldrh	r2, [r4, #12]
    9dce:	9d01      	ldr	r5, [sp, #4]
    9dd0:	4313      	orrs	r3, r2
    9dd2:	81a3      	strh	r3, [r4, #12]
    9dd4:	e7d6      	b.n	9d84 <setvbuf+0xe0>
    9dd6:	2000      	movs	r0, #0
    9dd8:	e7ba      	b.n	9d50 <setvbuf+0xac>
    9dda:	60a5      	str	r5, [r4, #8]
    9ddc:	e7c4      	b.n	9d68 <setvbuf+0xc4>
    9dde:	60a0      	str	r0, [r4, #8]
    9de0:	e7c2      	b.n	9d68 <setvbuf+0xc4>
    9de2:	2001      	movs	r0, #1
    9de4:	4240      	negs	r0, r0
    9de6:	e7bf      	b.n	9d68 <setvbuf+0xc4>
    9de8:	20000078 	.word	0x20000078
    9dec:	0000f090 	.word	0x0000f090
    9df0:	fffff35c 	.word	0xfffff35c
    9df4:	0000f0b0 	.word	0x0000f0b0
    9df8:	0000f070 	.word	0x0000f070

00009dfc <strcmp>:
    9dfc:	7802      	ldrb	r2, [r0, #0]
    9dfe:	780b      	ldrb	r3, [r1, #0]
    9e00:	2a00      	cmp	r2, #0
    9e02:	d003      	beq.n	9e0c <strcmp+0x10>
    9e04:	3001      	adds	r0, #1
    9e06:	3101      	adds	r1, #1
    9e08:	429a      	cmp	r2, r3
    9e0a:	d0f7      	beq.n	9dfc <strcmp>
    9e0c:	1ad0      	subs	r0, r2, r3
    9e0e:	4770      	bx	lr

00009e10 <strcpy>:
    9e10:	1c03      	adds	r3, r0, #0
    9e12:	780a      	ldrb	r2, [r1, #0]
    9e14:	3101      	adds	r1, #1
    9e16:	701a      	strb	r2, [r3, #0]
    9e18:	3301      	adds	r3, #1
    9e1a:	2a00      	cmp	r2, #0
    9e1c:	d1f9      	bne.n	9e12 <strcpy+0x2>
    9e1e:	4770      	bx	lr

00009e20 <strlen>:
    9e20:	2300      	movs	r3, #0
    9e22:	5cc2      	ldrb	r2, [r0, r3]
    9e24:	3301      	adds	r3, #1
    9e26:	2a00      	cmp	r2, #0
    9e28:	d1fb      	bne.n	9e22 <strlen+0x2>
    9e2a:	1e58      	subs	r0, r3, #1
    9e2c:	4770      	bx	lr
	...

00009e30 <strtok>:
    9e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e32:	4b12      	ldr	r3, [pc, #72]	; (9e7c <strtok+0x4c>)
    9e34:	0006      	movs	r6, r0
    9e36:	681d      	ldr	r5, [r3, #0]
    9e38:	000f      	movs	r7, r1
    9e3a:	6dac      	ldr	r4, [r5, #88]	; 0x58
    9e3c:	2c00      	cmp	r4, #0
    9e3e:	d116      	bne.n	9e6e <strtok+0x3e>
    9e40:	2050      	movs	r0, #80	; 0x50
    9e42:	f7ff f949 	bl	90d8 <malloc>
    9e46:	65a8      	str	r0, [r5, #88]	; 0x58
    9e48:	6004      	str	r4, [r0, #0]
    9e4a:	6044      	str	r4, [r0, #4]
    9e4c:	6084      	str	r4, [r0, #8]
    9e4e:	60c4      	str	r4, [r0, #12]
    9e50:	6104      	str	r4, [r0, #16]
    9e52:	6144      	str	r4, [r0, #20]
    9e54:	6184      	str	r4, [r0, #24]
    9e56:	6284      	str	r4, [r0, #40]	; 0x28
    9e58:	62c4      	str	r4, [r0, #44]	; 0x2c
    9e5a:	6304      	str	r4, [r0, #48]	; 0x30
    9e5c:	6344      	str	r4, [r0, #52]	; 0x34
    9e5e:	6384      	str	r4, [r0, #56]	; 0x38
    9e60:	63c4      	str	r4, [r0, #60]	; 0x3c
    9e62:	6404      	str	r4, [r0, #64]	; 0x40
    9e64:	6444      	str	r4, [r0, #68]	; 0x44
    9e66:	6484      	str	r4, [r0, #72]	; 0x48
    9e68:	64c4      	str	r4, [r0, #76]	; 0x4c
    9e6a:	7704      	strb	r4, [r0, #28]
    9e6c:	6244      	str	r4, [r0, #36]	; 0x24
    9e6e:	6daa      	ldr	r2, [r5, #88]	; 0x58
    9e70:	0039      	movs	r1, r7
    9e72:	0030      	movs	r0, r6
    9e74:	2301      	movs	r3, #1
    9e76:	f000 f803 	bl	9e80 <__strtok_r>
    9e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e7c:	20000078 	.word	0x20000078

00009e80 <__strtok_r>:
    9e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e82:	2800      	cmp	r0, #0
    9e84:	d104      	bne.n	9e90 <__strtok_r+0x10>
    9e86:	6810      	ldr	r0, [r2, #0]
    9e88:	2800      	cmp	r0, #0
    9e8a:	d101      	bne.n	9e90 <__strtok_r+0x10>
    9e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e8e:	0020      	movs	r0, r4
    9e90:	000e      	movs	r6, r1
    9e92:	7805      	ldrb	r5, [r0, #0]
    9e94:	1c44      	adds	r4, r0, #1
    9e96:	7837      	ldrb	r7, [r6, #0]
    9e98:	2f00      	cmp	r7, #0
    9e9a:	d104      	bne.n	9ea6 <__strtok_r+0x26>
    9e9c:	2d00      	cmp	r5, #0
    9e9e:	d110      	bne.n	9ec2 <__strtok_r+0x42>
    9ea0:	6015      	str	r5, [r2, #0]
    9ea2:	0028      	movs	r0, r5
    9ea4:	e7f2      	b.n	9e8c <__strtok_r+0xc>
    9ea6:	3601      	adds	r6, #1
    9ea8:	42bd      	cmp	r5, r7
    9eaa:	d1f4      	bne.n	9e96 <__strtok_r+0x16>
    9eac:	2b00      	cmp	r3, #0
    9eae:	d1ee      	bne.n	9e8e <__strtok_r+0xe>
    9eb0:	6014      	str	r4, [r2, #0]
    9eb2:	7003      	strb	r3, [r0, #0]
    9eb4:	e7ea      	b.n	9e8c <__strtok_r+0xc>
    9eb6:	0033      	movs	r3, r6
    9eb8:	e00e      	b.n	9ed8 <__strtok_r+0x58>
    9eba:	3501      	adds	r5, #1
    9ebc:	001c      	movs	r4, r3
    9ebe:	2f00      	cmp	r7, #0
    9ec0:	d102      	bne.n	9ec8 <__strtok_r+0x48>
    9ec2:	000d      	movs	r5, r1
    9ec4:	7826      	ldrb	r6, [r4, #0]
    9ec6:	1c63      	adds	r3, r4, #1
    9ec8:	782f      	ldrb	r7, [r5, #0]
    9eca:	42be      	cmp	r6, r7
    9ecc:	d1f5      	bne.n	9eba <__strtok_r+0x3a>
    9ece:	2e00      	cmp	r6, #0
    9ed0:	d0f1      	beq.n	9eb6 <__strtok_r+0x36>
    9ed2:	2400      	movs	r4, #0
    9ed4:	1e59      	subs	r1, r3, #1
    9ed6:	700c      	strb	r4, [r1, #0]
    9ed8:	6013      	str	r3, [r2, #0]
    9eda:	e7d7      	b.n	9e8c <__strtok_r+0xc>

00009edc <_strtol_l.isra.0>:
    9edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ede:	001f      	movs	r7, r3
    9ee0:	000e      	movs	r6, r1
    9ee2:	b087      	sub	sp, #28
    9ee4:	9005      	str	r0, [sp, #20]
    9ee6:	9103      	str	r1, [sp, #12]
    9ee8:	9202      	str	r2, [sp, #8]
    9eea:	980c      	ldr	r0, [sp, #48]	; 0x30
    9eec:	7834      	ldrb	r4, [r6, #0]
    9eee:	f7ff f8e1 	bl	90b4 <__locale_ctype_ptr_l>
    9ef2:	2208      	movs	r2, #8
    9ef4:	1900      	adds	r0, r0, r4
    9ef6:	7843      	ldrb	r3, [r0, #1]
    9ef8:	1c75      	adds	r5, r6, #1
    9efa:	4013      	ands	r3, r2
    9efc:	d10c      	bne.n	9f18 <_strtol_l.isra.0+0x3c>
    9efe:	2c2d      	cmp	r4, #45	; 0x2d
    9f00:	d10c      	bne.n	9f1c <_strtol_l.isra.0+0x40>
    9f02:	3301      	adds	r3, #1
    9f04:	782c      	ldrb	r4, [r5, #0]
    9f06:	9301      	str	r3, [sp, #4]
    9f08:	1cb5      	adds	r5, r6, #2
    9f0a:	2f00      	cmp	r7, #0
    9f0c:	d00c      	beq.n	9f28 <_strtol_l.isra.0+0x4c>
    9f0e:	2f10      	cmp	r7, #16
    9f10:	d114      	bne.n	9f3c <_strtol_l.isra.0+0x60>
    9f12:	2c30      	cmp	r4, #48	; 0x30
    9f14:	d00a      	beq.n	9f2c <_strtol_l.isra.0+0x50>
    9f16:	e011      	b.n	9f3c <_strtol_l.isra.0+0x60>
    9f18:	002e      	movs	r6, r5
    9f1a:	e7e6      	b.n	9eea <_strtol_l.isra.0+0xe>
    9f1c:	9301      	str	r3, [sp, #4]
    9f1e:	2c2b      	cmp	r4, #43	; 0x2b
    9f20:	d1f3      	bne.n	9f0a <_strtol_l.isra.0+0x2e>
    9f22:	782c      	ldrb	r4, [r5, #0]
    9f24:	1cb5      	adds	r5, r6, #2
    9f26:	e7f0      	b.n	9f0a <_strtol_l.isra.0+0x2e>
    9f28:	2c30      	cmp	r4, #48	; 0x30
    9f2a:	d12f      	bne.n	9f8c <_strtol_l.isra.0+0xb0>
    9f2c:	2220      	movs	r2, #32
    9f2e:	782b      	ldrb	r3, [r5, #0]
    9f30:	4393      	bics	r3, r2
    9f32:	2b58      	cmp	r3, #88	; 0x58
    9f34:	d151      	bne.n	9fda <_strtol_l.isra.0+0xfe>
    9f36:	2710      	movs	r7, #16
    9f38:	786c      	ldrb	r4, [r5, #1]
    9f3a:	3502      	adds	r5, #2
    9f3c:	9b01      	ldr	r3, [sp, #4]
    9f3e:	4a29      	ldr	r2, [pc, #164]	; (9fe4 <_strtol_l.isra.0+0x108>)
    9f40:	0039      	movs	r1, r7
    9f42:	189e      	adds	r6, r3, r2
    9f44:	0030      	movs	r0, r6
    9f46:	f001 ff3d 	bl	bdc4 <__aeabi_uidivmod>
    9f4a:	0030      	movs	r0, r6
    9f4c:	9104      	str	r1, [sp, #16]
    9f4e:	0039      	movs	r1, r7
    9f50:	f001 feb2 	bl	bcb8 <__udivsi3>
    9f54:	2101      	movs	r1, #1
    9f56:	2300      	movs	r3, #0
    9f58:	4249      	negs	r1, r1
    9f5a:	0002      	movs	r2, r0
    9f5c:	468c      	mov	ip, r1
    9f5e:	0018      	movs	r0, r3
    9f60:	0021      	movs	r1, r4
    9f62:	3930      	subs	r1, #48	; 0x30
    9f64:	2909      	cmp	r1, #9
    9f66:	d813      	bhi.n	9f90 <_strtol_l.isra.0+0xb4>
    9f68:	000c      	movs	r4, r1
    9f6a:	42a7      	cmp	r7, r4
    9f6c:	dd1c      	ble.n	9fa8 <_strtol_l.isra.0+0xcc>
    9f6e:	1c59      	adds	r1, r3, #1
    9f70:	d009      	beq.n	9f86 <_strtol_l.isra.0+0xaa>
    9f72:	4663      	mov	r3, ip
    9f74:	4282      	cmp	r2, r0
    9f76:	d306      	bcc.n	9f86 <_strtol_l.isra.0+0xaa>
    9f78:	d102      	bne.n	9f80 <_strtol_l.isra.0+0xa4>
    9f7a:	9904      	ldr	r1, [sp, #16]
    9f7c:	42a1      	cmp	r1, r4
    9f7e:	db02      	blt.n	9f86 <_strtol_l.isra.0+0xaa>
    9f80:	2301      	movs	r3, #1
    9f82:	4378      	muls	r0, r7
    9f84:	1820      	adds	r0, r4, r0
    9f86:	782c      	ldrb	r4, [r5, #0]
    9f88:	3501      	adds	r5, #1
    9f8a:	e7e9      	b.n	9f60 <_strtol_l.isra.0+0x84>
    9f8c:	270a      	movs	r7, #10
    9f8e:	e7d5      	b.n	9f3c <_strtol_l.isra.0+0x60>
    9f90:	0021      	movs	r1, r4
    9f92:	3941      	subs	r1, #65	; 0x41
    9f94:	2919      	cmp	r1, #25
    9f96:	d801      	bhi.n	9f9c <_strtol_l.isra.0+0xc0>
    9f98:	3c37      	subs	r4, #55	; 0x37
    9f9a:	e7e6      	b.n	9f6a <_strtol_l.isra.0+0x8e>
    9f9c:	0021      	movs	r1, r4
    9f9e:	3961      	subs	r1, #97	; 0x61
    9fa0:	2919      	cmp	r1, #25
    9fa2:	d801      	bhi.n	9fa8 <_strtol_l.isra.0+0xcc>
    9fa4:	3c57      	subs	r4, #87	; 0x57
    9fa6:	e7e0      	b.n	9f6a <_strtol_l.isra.0+0x8e>
    9fa8:	1c5a      	adds	r2, r3, #1
    9faa:	d108      	bne.n	9fbe <_strtol_l.isra.0+0xe2>
    9fac:	9a05      	ldr	r2, [sp, #20]
    9fae:	3323      	adds	r3, #35	; 0x23
    9fb0:	6013      	str	r3, [r2, #0]
    9fb2:	9b02      	ldr	r3, [sp, #8]
    9fb4:	0030      	movs	r0, r6
    9fb6:	2b00      	cmp	r3, #0
    9fb8:	d10b      	bne.n	9fd2 <_strtol_l.isra.0+0xf6>
    9fba:	b007      	add	sp, #28
    9fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fbe:	9a01      	ldr	r2, [sp, #4]
    9fc0:	2a00      	cmp	r2, #0
    9fc2:	d000      	beq.n	9fc6 <_strtol_l.isra.0+0xea>
    9fc4:	4240      	negs	r0, r0
    9fc6:	9a02      	ldr	r2, [sp, #8]
    9fc8:	2a00      	cmp	r2, #0
    9fca:	d0f6      	beq.n	9fba <_strtol_l.isra.0+0xde>
    9fcc:	9a03      	ldr	r2, [sp, #12]
    9fce:	2b00      	cmp	r3, #0
    9fd0:	d000      	beq.n	9fd4 <_strtol_l.isra.0+0xf8>
    9fd2:	1e6a      	subs	r2, r5, #1
    9fd4:	9b02      	ldr	r3, [sp, #8]
    9fd6:	601a      	str	r2, [r3, #0]
    9fd8:	e7ef      	b.n	9fba <_strtol_l.isra.0+0xde>
    9fda:	2430      	movs	r4, #48	; 0x30
    9fdc:	2f00      	cmp	r7, #0
    9fde:	d1ad      	bne.n	9f3c <_strtol_l.isra.0+0x60>
    9fe0:	3708      	adds	r7, #8
    9fe2:	e7ab      	b.n	9f3c <_strtol_l.isra.0+0x60>
    9fe4:	7fffffff 	.word	0x7fffffff

00009fe8 <strtol>:
    9fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9fea:	0013      	movs	r3, r2
    9fec:	4a06      	ldr	r2, [pc, #24]	; (a008 <strtol+0x20>)
    9fee:	0005      	movs	r5, r0
    9ff0:	6810      	ldr	r0, [r2, #0]
    9ff2:	6a04      	ldr	r4, [r0, #32]
    9ff4:	2c00      	cmp	r4, #0
    9ff6:	d100      	bne.n	9ffa <strtol+0x12>
    9ff8:	4c04      	ldr	r4, [pc, #16]	; (a00c <strtol+0x24>)
    9ffa:	000a      	movs	r2, r1
    9ffc:	9400      	str	r4, [sp, #0]
    9ffe:	0029      	movs	r1, r5
    a000:	f7ff ff6c 	bl	9edc <_strtol_l.isra.0>
    a004:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a006:	46c0      	nop			; (mov r8, r8)
    a008:	20000078 	.word	0x20000078
    a00c:	200000dc 	.word	0x200000dc

0000a010 <__swbuf_r>:
    a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a012:	0005      	movs	r5, r0
    a014:	000e      	movs	r6, r1
    a016:	0014      	movs	r4, r2
    a018:	2800      	cmp	r0, #0
    a01a:	d004      	beq.n	a026 <__swbuf_r+0x16>
    a01c:	6983      	ldr	r3, [r0, #24]
    a01e:	2b00      	cmp	r3, #0
    a020:	d101      	bne.n	a026 <__swbuf_r+0x16>
    a022:	f001 f831 	bl	b088 <__sinit>
    a026:	4b22      	ldr	r3, [pc, #136]	; (a0b0 <__swbuf_r+0xa0>)
    a028:	429c      	cmp	r4, r3
    a02a:	d12d      	bne.n	a088 <__swbuf_r+0x78>
    a02c:	686c      	ldr	r4, [r5, #4]
    a02e:	69a3      	ldr	r3, [r4, #24]
    a030:	60a3      	str	r3, [r4, #8]
    a032:	89a3      	ldrh	r3, [r4, #12]
    a034:	071b      	lsls	r3, r3, #28
    a036:	d531      	bpl.n	a09c <__swbuf_r+0x8c>
    a038:	6923      	ldr	r3, [r4, #16]
    a03a:	2b00      	cmp	r3, #0
    a03c:	d02e      	beq.n	a09c <__swbuf_r+0x8c>
    a03e:	6823      	ldr	r3, [r4, #0]
    a040:	6922      	ldr	r2, [r4, #16]
    a042:	b2f7      	uxtb	r7, r6
    a044:	1a98      	subs	r0, r3, r2
    a046:	6963      	ldr	r3, [r4, #20]
    a048:	b2f6      	uxtb	r6, r6
    a04a:	4298      	cmp	r0, r3
    a04c:	db05      	blt.n	a05a <__swbuf_r+0x4a>
    a04e:	0021      	movs	r1, r4
    a050:	0028      	movs	r0, r5
    a052:	f000 ffab 	bl	afac <_fflush_r>
    a056:	2800      	cmp	r0, #0
    a058:	d126      	bne.n	a0a8 <__swbuf_r+0x98>
    a05a:	68a3      	ldr	r3, [r4, #8]
    a05c:	3001      	adds	r0, #1
    a05e:	3b01      	subs	r3, #1
    a060:	60a3      	str	r3, [r4, #8]
    a062:	6823      	ldr	r3, [r4, #0]
    a064:	1c5a      	adds	r2, r3, #1
    a066:	6022      	str	r2, [r4, #0]
    a068:	701f      	strb	r7, [r3, #0]
    a06a:	6963      	ldr	r3, [r4, #20]
    a06c:	4298      	cmp	r0, r3
    a06e:	d004      	beq.n	a07a <__swbuf_r+0x6a>
    a070:	89a3      	ldrh	r3, [r4, #12]
    a072:	07db      	lsls	r3, r3, #31
    a074:	d51a      	bpl.n	a0ac <__swbuf_r+0x9c>
    a076:	2e0a      	cmp	r6, #10
    a078:	d118      	bne.n	a0ac <__swbuf_r+0x9c>
    a07a:	0021      	movs	r1, r4
    a07c:	0028      	movs	r0, r5
    a07e:	f000 ff95 	bl	afac <_fflush_r>
    a082:	2800      	cmp	r0, #0
    a084:	d012      	beq.n	a0ac <__swbuf_r+0x9c>
    a086:	e00f      	b.n	a0a8 <__swbuf_r+0x98>
    a088:	4b0a      	ldr	r3, [pc, #40]	; (a0b4 <__swbuf_r+0xa4>)
    a08a:	429c      	cmp	r4, r3
    a08c:	d101      	bne.n	a092 <__swbuf_r+0x82>
    a08e:	68ac      	ldr	r4, [r5, #8]
    a090:	e7cd      	b.n	a02e <__swbuf_r+0x1e>
    a092:	4b09      	ldr	r3, [pc, #36]	; (a0b8 <__swbuf_r+0xa8>)
    a094:	429c      	cmp	r4, r3
    a096:	d1ca      	bne.n	a02e <__swbuf_r+0x1e>
    a098:	68ec      	ldr	r4, [r5, #12]
    a09a:	e7c8      	b.n	a02e <__swbuf_r+0x1e>
    a09c:	0021      	movs	r1, r4
    a09e:	0028      	movs	r0, r5
    a0a0:	f000 f818 	bl	a0d4 <__swsetup_r>
    a0a4:	2800      	cmp	r0, #0
    a0a6:	d0ca      	beq.n	a03e <__swbuf_r+0x2e>
    a0a8:	2601      	movs	r6, #1
    a0aa:	4276      	negs	r6, r6
    a0ac:	0030      	movs	r0, r6
    a0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0b0:	0000f090 	.word	0x0000f090
    a0b4:	0000f0b0 	.word	0x0000f0b0
    a0b8:	0000f070 	.word	0x0000f070

0000a0bc <__ascii_wctomb>:
    a0bc:	1e0b      	subs	r3, r1, #0
    a0be:	d004      	beq.n	a0ca <__ascii_wctomb+0xe>
    a0c0:	2aff      	cmp	r2, #255	; 0xff
    a0c2:	d904      	bls.n	a0ce <__ascii_wctomb+0x12>
    a0c4:	238a      	movs	r3, #138	; 0x8a
    a0c6:	6003      	str	r3, [r0, #0]
    a0c8:	3b8b      	subs	r3, #139	; 0x8b
    a0ca:	0018      	movs	r0, r3
    a0cc:	4770      	bx	lr
    a0ce:	700a      	strb	r2, [r1, #0]
    a0d0:	2301      	movs	r3, #1
    a0d2:	e7fa      	b.n	a0ca <__ascii_wctomb+0xe>

0000a0d4 <__swsetup_r>:
    a0d4:	4b36      	ldr	r3, [pc, #216]	; (a1b0 <__swsetup_r+0xdc>)
    a0d6:	b570      	push	{r4, r5, r6, lr}
    a0d8:	681d      	ldr	r5, [r3, #0]
    a0da:	0006      	movs	r6, r0
    a0dc:	000c      	movs	r4, r1
    a0de:	2d00      	cmp	r5, #0
    a0e0:	d005      	beq.n	a0ee <__swsetup_r+0x1a>
    a0e2:	69ab      	ldr	r3, [r5, #24]
    a0e4:	2b00      	cmp	r3, #0
    a0e6:	d102      	bne.n	a0ee <__swsetup_r+0x1a>
    a0e8:	0028      	movs	r0, r5
    a0ea:	f000 ffcd 	bl	b088 <__sinit>
    a0ee:	4b31      	ldr	r3, [pc, #196]	; (a1b4 <__swsetup_r+0xe0>)
    a0f0:	429c      	cmp	r4, r3
    a0f2:	d10f      	bne.n	a114 <__swsetup_r+0x40>
    a0f4:	686c      	ldr	r4, [r5, #4]
    a0f6:	230c      	movs	r3, #12
    a0f8:	5ee2      	ldrsh	r2, [r4, r3]
    a0fa:	b293      	uxth	r3, r2
    a0fc:	0719      	lsls	r1, r3, #28
    a0fe:	d42d      	bmi.n	a15c <__swsetup_r+0x88>
    a100:	06d9      	lsls	r1, r3, #27
    a102:	d411      	bmi.n	a128 <__swsetup_r+0x54>
    a104:	2309      	movs	r3, #9
    a106:	2001      	movs	r0, #1
    a108:	6033      	str	r3, [r6, #0]
    a10a:	3337      	adds	r3, #55	; 0x37
    a10c:	4313      	orrs	r3, r2
    a10e:	81a3      	strh	r3, [r4, #12]
    a110:	4240      	negs	r0, r0
    a112:	bd70      	pop	{r4, r5, r6, pc}
    a114:	4b28      	ldr	r3, [pc, #160]	; (a1b8 <__swsetup_r+0xe4>)
    a116:	429c      	cmp	r4, r3
    a118:	d101      	bne.n	a11e <__swsetup_r+0x4a>
    a11a:	68ac      	ldr	r4, [r5, #8]
    a11c:	e7eb      	b.n	a0f6 <__swsetup_r+0x22>
    a11e:	4b27      	ldr	r3, [pc, #156]	; (a1bc <__swsetup_r+0xe8>)
    a120:	429c      	cmp	r4, r3
    a122:	d1e8      	bne.n	a0f6 <__swsetup_r+0x22>
    a124:	68ec      	ldr	r4, [r5, #12]
    a126:	e7e6      	b.n	a0f6 <__swsetup_r+0x22>
    a128:	075b      	lsls	r3, r3, #29
    a12a:	d513      	bpl.n	a154 <__swsetup_r+0x80>
    a12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a12e:	2900      	cmp	r1, #0
    a130:	d008      	beq.n	a144 <__swsetup_r+0x70>
    a132:	0023      	movs	r3, r4
    a134:	3344      	adds	r3, #68	; 0x44
    a136:	4299      	cmp	r1, r3
    a138:	d002      	beq.n	a140 <__swsetup_r+0x6c>
    a13a:	0030      	movs	r0, r6
    a13c:	f7fe fffa 	bl	9134 <_free_r>
    a140:	2300      	movs	r3, #0
    a142:	6363      	str	r3, [r4, #52]	; 0x34
    a144:	2224      	movs	r2, #36	; 0x24
    a146:	89a3      	ldrh	r3, [r4, #12]
    a148:	4393      	bics	r3, r2
    a14a:	81a3      	strh	r3, [r4, #12]
    a14c:	2300      	movs	r3, #0
    a14e:	6063      	str	r3, [r4, #4]
    a150:	6923      	ldr	r3, [r4, #16]
    a152:	6023      	str	r3, [r4, #0]
    a154:	2308      	movs	r3, #8
    a156:	89a2      	ldrh	r2, [r4, #12]
    a158:	4313      	orrs	r3, r2
    a15a:	81a3      	strh	r3, [r4, #12]
    a15c:	6923      	ldr	r3, [r4, #16]
    a15e:	2b00      	cmp	r3, #0
    a160:	d10b      	bne.n	a17a <__swsetup_r+0xa6>
    a162:	21a0      	movs	r1, #160	; 0xa0
    a164:	2280      	movs	r2, #128	; 0x80
    a166:	89a3      	ldrh	r3, [r4, #12]
    a168:	0089      	lsls	r1, r1, #2
    a16a:	0092      	lsls	r2, r2, #2
    a16c:	400b      	ands	r3, r1
    a16e:	4293      	cmp	r3, r2
    a170:	d003      	beq.n	a17a <__swsetup_r+0xa6>
    a172:	0021      	movs	r1, r4
    a174:	0030      	movs	r0, r6
    a176:	f001 f851 	bl	b21c <__smakebuf_r>
    a17a:	2301      	movs	r3, #1
    a17c:	89a2      	ldrh	r2, [r4, #12]
    a17e:	4013      	ands	r3, r2
    a180:	d011      	beq.n	a1a6 <__swsetup_r+0xd2>
    a182:	2300      	movs	r3, #0
    a184:	60a3      	str	r3, [r4, #8]
    a186:	6963      	ldr	r3, [r4, #20]
    a188:	425b      	negs	r3, r3
    a18a:	61a3      	str	r3, [r4, #24]
    a18c:	2000      	movs	r0, #0
    a18e:	6923      	ldr	r3, [r4, #16]
    a190:	4283      	cmp	r3, r0
    a192:	d1be      	bne.n	a112 <__swsetup_r+0x3e>
    a194:	230c      	movs	r3, #12
    a196:	5ee2      	ldrsh	r2, [r4, r3]
    a198:	0613      	lsls	r3, r2, #24
    a19a:	d5ba      	bpl.n	a112 <__swsetup_r+0x3e>
    a19c:	2340      	movs	r3, #64	; 0x40
    a19e:	4313      	orrs	r3, r2
    a1a0:	81a3      	strh	r3, [r4, #12]
    a1a2:	3801      	subs	r0, #1
    a1a4:	e7b5      	b.n	a112 <__swsetup_r+0x3e>
    a1a6:	0792      	lsls	r2, r2, #30
    a1a8:	d400      	bmi.n	a1ac <__swsetup_r+0xd8>
    a1aa:	6963      	ldr	r3, [r4, #20]
    a1ac:	60a3      	str	r3, [r4, #8]
    a1ae:	e7ed      	b.n	a18c <__swsetup_r+0xb8>
    a1b0:	20000078 	.word	0x20000078
    a1b4:	0000f090 	.word	0x0000f090
    a1b8:	0000f0b0 	.word	0x0000f0b0
    a1bc:	0000f070 	.word	0x0000f070

0000a1c0 <quorem>:
    a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1c2:	6903      	ldr	r3, [r0, #16]
    a1c4:	690c      	ldr	r4, [r1, #16]
    a1c6:	b089      	sub	sp, #36	; 0x24
    a1c8:	0007      	movs	r7, r0
    a1ca:	9105      	str	r1, [sp, #20]
    a1cc:	2600      	movs	r6, #0
    a1ce:	429c      	cmp	r4, r3
    a1d0:	dc6d      	bgt.n	a2ae <quorem+0xee>
    a1d2:	000b      	movs	r3, r1
    a1d4:	3c01      	subs	r4, #1
    a1d6:	3314      	adds	r3, #20
    a1d8:	00a5      	lsls	r5, r4, #2
    a1da:	9303      	str	r3, [sp, #12]
    a1dc:	195b      	adds	r3, r3, r5
    a1de:	9304      	str	r3, [sp, #16]
    a1e0:	0003      	movs	r3, r0
    a1e2:	3314      	adds	r3, #20
    a1e4:	9302      	str	r3, [sp, #8]
    a1e6:	195d      	adds	r5, r3, r5
    a1e8:	9b04      	ldr	r3, [sp, #16]
    a1ea:	6828      	ldr	r0, [r5, #0]
    a1ec:	681b      	ldr	r3, [r3, #0]
    a1ee:	1c59      	adds	r1, r3, #1
    a1f0:	9301      	str	r3, [sp, #4]
    a1f2:	f001 fd61 	bl	bcb8 <__udivsi3>
    a1f6:	9001      	str	r0, [sp, #4]
    a1f8:	42b0      	cmp	r0, r6
    a1fa:	d02d      	beq.n	a258 <quorem+0x98>
    a1fc:	9b03      	ldr	r3, [sp, #12]
    a1fe:	9802      	ldr	r0, [sp, #8]
    a200:	469c      	mov	ip, r3
    a202:	9606      	str	r6, [sp, #24]
    a204:	4662      	mov	r2, ip
    a206:	ca08      	ldmia	r2!, {r3}
    a208:	4694      	mov	ip, r2
    a20a:	9a01      	ldr	r2, [sp, #4]
    a20c:	b299      	uxth	r1, r3
    a20e:	4351      	muls	r1, r2
    a210:	0c1b      	lsrs	r3, r3, #16
    a212:	4353      	muls	r3, r2
    a214:	1989      	adds	r1, r1, r6
    a216:	0c0a      	lsrs	r2, r1, #16
    a218:	189b      	adds	r3, r3, r2
    a21a:	9307      	str	r3, [sp, #28]
    a21c:	8802      	ldrh	r2, [r0, #0]
    a21e:	0c1e      	lsrs	r6, r3, #16
    a220:	9b06      	ldr	r3, [sp, #24]
    a222:	b289      	uxth	r1, r1
    a224:	18d2      	adds	r2, r2, r3
    a226:	6803      	ldr	r3, [r0, #0]
    a228:	1a52      	subs	r2, r2, r1
    a22a:	0c19      	lsrs	r1, r3, #16
    a22c:	466b      	mov	r3, sp
    a22e:	8b9b      	ldrh	r3, [r3, #28]
    a230:	1acb      	subs	r3, r1, r3
    a232:	1411      	asrs	r1, r2, #16
    a234:	185b      	adds	r3, r3, r1
    a236:	1419      	asrs	r1, r3, #16
    a238:	b292      	uxth	r2, r2
    a23a:	041b      	lsls	r3, r3, #16
    a23c:	431a      	orrs	r2, r3
    a23e:	9b04      	ldr	r3, [sp, #16]
    a240:	9106      	str	r1, [sp, #24]
    a242:	c004      	stmia	r0!, {r2}
    a244:	4563      	cmp	r3, ip
    a246:	d2dd      	bcs.n	a204 <quorem+0x44>
    a248:	682b      	ldr	r3, [r5, #0]
    a24a:	2b00      	cmp	r3, #0
    a24c:	d104      	bne.n	a258 <quorem+0x98>
    a24e:	9b02      	ldr	r3, [sp, #8]
    a250:	3d04      	subs	r5, #4
    a252:	42ab      	cmp	r3, r5
    a254:	d32e      	bcc.n	a2b4 <quorem+0xf4>
    a256:	613c      	str	r4, [r7, #16]
    a258:	9905      	ldr	r1, [sp, #20]
    a25a:	0038      	movs	r0, r7
    a25c:	f001 fa41 	bl	b6e2 <__mcmp>
    a260:	2800      	cmp	r0, #0
    a262:	db23      	blt.n	a2ac <quorem+0xec>
    a264:	2500      	movs	r5, #0
    a266:	9b01      	ldr	r3, [sp, #4]
    a268:	9802      	ldr	r0, [sp, #8]
    a26a:	3301      	adds	r3, #1
    a26c:	9903      	ldr	r1, [sp, #12]
    a26e:	9301      	str	r3, [sp, #4]
    a270:	c908      	ldmia	r1!, {r3}
    a272:	8802      	ldrh	r2, [r0, #0]
    a274:	1955      	adds	r5, r2, r5
    a276:	b29a      	uxth	r2, r3
    a278:	1aaa      	subs	r2, r5, r2
    a27a:	6805      	ldr	r5, [r0, #0]
    a27c:	0c1b      	lsrs	r3, r3, #16
    a27e:	0c2d      	lsrs	r5, r5, #16
    a280:	1aeb      	subs	r3, r5, r3
    a282:	1415      	asrs	r5, r2, #16
    a284:	195b      	adds	r3, r3, r5
    a286:	141d      	asrs	r5, r3, #16
    a288:	b292      	uxth	r2, r2
    a28a:	041b      	lsls	r3, r3, #16
    a28c:	4313      	orrs	r3, r2
    a28e:	c008      	stmia	r0!, {r3}
    a290:	9b04      	ldr	r3, [sp, #16]
    a292:	428b      	cmp	r3, r1
    a294:	d2ec      	bcs.n	a270 <quorem+0xb0>
    a296:	9a02      	ldr	r2, [sp, #8]
    a298:	00a3      	lsls	r3, r4, #2
    a29a:	18d3      	adds	r3, r2, r3
    a29c:	681a      	ldr	r2, [r3, #0]
    a29e:	2a00      	cmp	r2, #0
    a2a0:	d104      	bne.n	a2ac <quorem+0xec>
    a2a2:	9a02      	ldr	r2, [sp, #8]
    a2a4:	3b04      	subs	r3, #4
    a2a6:	429a      	cmp	r2, r3
    a2a8:	d309      	bcc.n	a2be <quorem+0xfe>
    a2aa:	613c      	str	r4, [r7, #16]
    a2ac:	9e01      	ldr	r6, [sp, #4]
    a2ae:	0030      	movs	r0, r6
    a2b0:	b009      	add	sp, #36	; 0x24
    a2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2b4:	682b      	ldr	r3, [r5, #0]
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	d1cd      	bne.n	a256 <quorem+0x96>
    a2ba:	3c01      	subs	r4, #1
    a2bc:	e7c7      	b.n	a24e <quorem+0x8e>
    a2be:	681a      	ldr	r2, [r3, #0]
    a2c0:	2a00      	cmp	r2, #0
    a2c2:	d1f2      	bne.n	a2aa <quorem+0xea>
    a2c4:	3c01      	subs	r4, #1
    a2c6:	e7ec      	b.n	a2a2 <quorem+0xe2>

0000a2c8 <_dtoa_r>:
    a2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ca:	0016      	movs	r6, r2
    a2cc:	001f      	movs	r7, r3
    a2ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
    a2d0:	b09d      	sub	sp, #116	; 0x74
    a2d2:	9004      	str	r0, [sp, #16]
    a2d4:	9d25      	ldr	r5, [sp, #148]	; 0x94
    a2d6:	9606      	str	r6, [sp, #24]
    a2d8:	9707      	str	r7, [sp, #28]
    a2da:	2c00      	cmp	r4, #0
    a2dc:	d108      	bne.n	a2f0 <_dtoa_r+0x28>
    a2de:	2010      	movs	r0, #16
    a2e0:	f7fe fefa 	bl	90d8 <malloc>
    a2e4:	9b04      	ldr	r3, [sp, #16]
    a2e6:	6258      	str	r0, [r3, #36]	; 0x24
    a2e8:	6044      	str	r4, [r0, #4]
    a2ea:	6084      	str	r4, [r0, #8]
    a2ec:	6004      	str	r4, [r0, #0]
    a2ee:	60c4      	str	r4, [r0, #12]
    a2f0:	9b04      	ldr	r3, [sp, #16]
    a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a2f4:	6819      	ldr	r1, [r3, #0]
    a2f6:	2900      	cmp	r1, #0
    a2f8:	d00b      	beq.n	a312 <_dtoa_r+0x4a>
    a2fa:	685a      	ldr	r2, [r3, #4]
    a2fc:	2301      	movs	r3, #1
    a2fe:	4093      	lsls	r3, r2
    a300:	604a      	str	r2, [r1, #4]
    a302:	608b      	str	r3, [r1, #8]
    a304:	9804      	ldr	r0, [sp, #16]
    a306:	f001 f812 	bl	b32e <_Bfree>
    a30a:	2200      	movs	r2, #0
    a30c:	9b04      	ldr	r3, [sp, #16]
    a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a310:	601a      	str	r2, [r3, #0]
    a312:	9b07      	ldr	r3, [sp, #28]
    a314:	2b00      	cmp	r3, #0
    a316:	da1f      	bge.n	a358 <_dtoa_r+0x90>
    a318:	2301      	movs	r3, #1
    a31a:	602b      	str	r3, [r5, #0]
    a31c:	007b      	lsls	r3, r7, #1
    a31e:	085b      	lsrs	r3, r3, #1
    a320:	9307      	str	r3, [sp, #28]
    a322:	9c07      	ldr	r4, [sp, #28]
    a324:	4bb7      	ldr	r3, [pc, #732]	; (a604 <_dtoa_r+0x33c>)
    a326:	0022      	movs	r2, r4
    a328:	9319      	str	r3, [sp, #100]	; 0x64
    a32a:	401a      	ands	r2, r3
    a32c:	429a      	cmp	r2, r3
    a32e:	d116      	bne.n	a35e <_dtoa_r+0x96>
    a330:	4bb5      	ldr	r3, [pc, #724]	; (a608 <_dtoa_r+0x340>)
    a332:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a334:	6013      	str	r3, [r2, #0]
    a336:	9b06      	ldr	r3, [sp, #24]
    a338:	2b00      	cmp	r3, #0
    a33a:	d103      	bne.n	a344 <_dtoa_r+0x7c>
    a33c:	0324      	lsls	r4, r4, #12
    a33e:	d101      	bne.n	a344 <_dtoa_r+0x7c>
    a340:	f000 fd91 	bl	ae66 <_dtoa_r+0xb9e>
    a344:	4bb1      	ldr	r3, [pc, #708]	; (a60c <_dtoa_r+0x344>)
    a346:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a348:	930a      	str	r3, [sp, #40]	; 0x28
    a34a:	4bb1      	ldr	r3, [pc, #708]	; (a610 <_dtoa_r+0x348>)
    a34c:	2a00      	cmp	r2, #0
    a34e:	d001      	beq.n	a354 <_dtoa_r+0x8c>
    a350:	f000 fd8f 	bl	ae72 <_dtoa_r+0xbaa>
    a354:	f000 fd8f 	bl	ae76 <_dtoa_r+0xbae>
    a358:	2300      	movs	r3, #0
    a35a:	602b      	str	r3, [r5, #0]
    a35c:	e7e1      	b.n	a322 <_dtoa_r+0x5a>
    a35e:	9e06      	ldr	r6, [sp, #24]
    a360:	9f07      	ldr	r7, [sp, #28]
    a362:	2200      	movs	r2, #0
    a364:	2300      	movs	r3, #0
    a366:	0030      	movs	r0, r6
    a368:	0039      	movs	r1, r7
    a36a:	f001 fe2b 	bl	bfc4 <__aeabi_dcmpeq>
    a36e:	1e05      	subs	r5, r0, #0
    a370:	d00e      	beq.n	a390 <_dtoa_r+0xc8>
    a372:	2301      	movs	r3, #1
    a374:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a376:	6013      	str	r3, [r2, #0]
    a378:	4ba6      	ldr	r3, [pc, #664]	; (a614 <_dtoa_r+0x34c>)
    a37a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a37c:	930a      	str	r3, [sp, #40]	; 0x28
    a37e:	2a00      	cmp	r2, #0
    a380:	d101      	bne.n	a386 <_dtoa_r+0xbe>
    a382:	f000 fd78 	bl	ae76 <_dtoa_r+0xbae>
    a386:	4aa4      	ldr	r2, [pc, #656]	; (a618 <_dtoa_r+0x350>)
    a388:	9926      	ldr	r1, [sp, #152]	; 0x98
    a38a:	600a      	str	r2, [r1, #0]
    a38c:	f000 fd73 	bl	ae76 <_dtoa_r+0xbae>
    a390:	ab1a      	add	r3, sp, #104	; 0x68
    a392:	9301      	str	r3, [sp, #4]
    a394:	ab1b      	add	r3, sp, #108	; 0x6c
    a396:	9300      	str	r3, [sp, #0]
    a398:	0032      	movs	r2, r6
    a39a:	003b      	movs	r3, r7
    a39c:	9804      	ldr	r0, [sp, #16]
    a39e:	f001 fa1d 	bl	b7dc <__d2b>
    a3a2:	0063      	lsls	r3, r4, #1
    a3a4:	9005      	str	r0, [sp, #20]
    a3a6:	0d5b      	lsrs	r3, r3, #21
    a3a8:	d100      	bne.n	a3ac <_dtoa_r+0xe4>
    a3aa:	e07f      	b.n	a4ac <_dtoa_r+0x1e4>
    a3ac:	033a      	lsls	r2, r7, #12
    a3ae:	4c9b      	ldr	r4, [pc, #620]	; (a61c <_dtoa_r+0x354>)
    a3b0:	0b12      	lsrs	r2, r2, #12
    a3b2:	4314      	orrs	r4, r2
    a3b4:	0021      	movs	r1, r4
    a3b6:	4a9a      	ldr	r2, [pc, #616]	; (a620 <_dtoa_r+0x358>)
    a3b8:	0030      	movs	r0, r6
    a3ba:	9518      	str	r5, [sp, #96]	; 0x60
    a3bc:	189e      	adds	r6, r3, r2
    a3be:	2200      	movs	r2, #0
    a3c0:	4b98      	ldr	r3, [pc, #608]	; (a624 <_dtoa_r+0x35c>)
    a3c2:	f003 fb19 	bl	d9f8 <__aeabi_dsub>
    a3c6:	4a98      	ldr	r2, [pc, #608]	; (a628 <_dtoa_r+0x360>)
    a3c8:	4b98      	ldr	r3, [pc, #608]	; (a62c <_dtoa_r+0x364>)
    a3ca:	f003 f895 	bl	d4f8 <__aeabi_dmul>
    a3ce:	4a98      	ldr	r2, [pc, #608]	; (a630 <_dtoa_r+0x368>)
    a3d0:	4b98      	ldr	r3, [pc, #608]	; (a634 <_dtoa_r+0x36c>)
    a3d2:	f002 f94d 	bl	c670 <__aeabi_dadd>
    a3d6:	0004      	movs	r4, r0
    a3d8:	0030      	movs	r0, r6
    a3da:	000d      	movs	r5, r1
    a3dc:	f003 fe76 	bl	e0cc <__aeabi_i2d>
    a3e0:	4a95      	ldr	r2, [pc, #596]	; (a638 <_dtoa_r+0x370>)
    a3e2:	4b96      	ldr	r3, [pc, #600]	; (a63c <_dtoa_r+0x374>)
    a3e4:	f003 f888 	bl	d4f8 <__aeabi_dmul>
    a3e8:	0002      	movs	r2, r0
    a3ea:	000b      	movs	r3, r1
    a3ec:	0020      	movs	r0, r4
    a3ee:	0029      	movs	r1, r5
    a3f0:	f002 f93e 	bl	c670 <__aeabi_dadd>
    a3f4:	0004      	movs	r4, r0
    a3f6:	000d      	movs	r5, r1
    a3f8:	f003 fe34 	bl	e064 <__aeabi_d2iz>
    a3fc:	2200      	movs	r2, #0
    a3fe:	9003      	str	r0, [sp, #12]
    a400:	2300      	movs	r3, #0
    a402:	0020      	movs	r0, r4
    a404:	0029      	movs	r1, r5
    a406:	f001 fde3 	bl	bfd0 <__aeabi_dcmplt>
    a40a:	2800      	cmp	r0, #0
    a40c:	d00e      	beq.n	a42c <_dtoa_r+0x164>
    a40e:	9803      	ldr	r0, [sp, #12]
    a410:	f003 fe5c 	bl	e0cc <__aeabi_i2d>
    a414:	000b      	movs	r3, r1
    a416:	0002      	movs	r2, r0
    a418:	0029      	movs	r1, r5
    a41a:	0020      	movs	r0, r4
    a41c:	f001 fdd2 	bl	bfc4 <__aeabi_dcmpeq>
    a420:	0003      	movs	r3, r0
    a422:	4258      	negs	r0, r3
    a424:	4158      	adcs	r0, r3
    a426:	9b03      	ldr	r3, [sp, #12]
    a428:	1a1b      	subs	r3, r3, r0
    a42a:	9303      	str	r3, [sp, #12]
    a42c:	2301      	movs	r3, #1
    a42e:	9316      	str	r3, [sp, #88]	; 0x58
    a430:	9b03      	ldr	r3, [sp, #12]
    a432:	2b16      	cmp	r3, #22
    a434:	d80f      	bhi.n	a456 <_dtoa_r+0x18e>
    a436:	4982      	ldr	r1, [pc, #520]	; (a640 <_dtoa_r+0x378>)
    a438:	00db      	lsls	r3, r3, #3
    a43a:	18c9      	adds	r1, r1, r3
    a43c:	6808      	ldr	r0, [r1, #0]
    a43e:	6849      	ldr	r1, [r1, #4]
    a440:	9a06      	ldr	r2, [sp, #24]
    a442:	9b07      	ldr	r3, [sp, #28]
    a444:	f001 fdd8 	bl	bff8 <__aeabi_dcmpgt>
    a448:	2800      	cmp	r0, #0
    a44a:	d04b      	beq.n	a4e4 <_dtoa_r+0x21c>
    a44c:	9b03      	ldr	r3, [sp, #12]
    a44e:	3b01      	subs	r3, #1
    a450:	9303      	str	r3, [sp, #12]
    a452:	2300      	movs	r3, #0
    a454:	9316      	str	r3, [sp, #88]	; 0x58
    a456:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a458:	1b9e      	subs	r6, r3, r6
    a45a:	2300      	movs	r3, #0
    a45c:	930b      	str	r3, [sp, #44]	; 0x2c
    a45e:	0033      	movs	r3, r6
    a460:	3b01      	subs	r3, #1
    a462:	930c      	str	r3, [sp, #48]	; 0x30
    a464:	d504      	bpl.n	a470 <_dtoa_r+0x1a8>
    a466:	2301      	movs	r3, #1
    a468:	1b9b      	subs	r3, r3, r6
    a46a:	930b      	str	r3, [sp, #44]	; 0x2c
    a46c:	2300      	movs	r3, #0
    a46e:	930c      	str	r3, [sp, #48]	; 0x30
    a470:	9b03      	ldr	r3, [sp, #12]
    a472:	2b00      	cmp	r3, #0
    a474:	db38      	blt.n	a4e8 <_dtoa_r+0x220>
    a476:	9a03      	ldr	r2, [sp, #12]
    a478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a47a:	4694      	mov	ip, r2
    a47c:	4463      	add	r3, ip
    a47e:	930c      	str	r3, [sp, #48]	; 0x30
    a480:	2300      	movs	r3, #0
    a482:	920f      	str	r2, [sp, #60]	; 0x3c
    a484:	9308      	str	r3, [sp, #32]
    a486:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a488:	2501      	movs	r5, #1
    a48a:	2b09      	cmp	r3, #9
    a48c:	d900      	bls.n	a490 <_dtoa_r+0x1c8>
    a48e:	e091      	b.n	a5b4 <_dtoa_r+0x2ec>
    a490:	2b05      	cmp	r3, #5
    a492:	dd02      	ble.n	a49a <_dtoa_r+0x1d2>
    a494:	2500      	movs	r5, #0
    a496:	3b04      	subs	r3, #4
    a498:	9322      	str	r3, [sp, #136]	; 0x88
    a49a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a49c:	1e98      	subs	r0, r3, #2
    a49e:	2803      	cmp	r0, #3
    a4a0:	d900      	bls.n	a4a4 <_dtoa_r+0x1dc>
    a4a2:	e091      	b.n	a5c8 <_dtoa_r+0x300>
    a4a4:	f001 fbfe 	bl	bca4 <__gnu_thumb1_case_uqi>
    a4a8:	76298482 	.word	0x76298482
    a4ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a4ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a4b0:	189e      	adds	r6, r3, r2
    a4b2:	4b64      	ldr	r3, [pc, #400]	; (a644 <_dtoa_r+0x37c>)
    a4b4:	18f2      	adds	r2, r6, r3
    a4b6:	2a20      	cmp	r2, #32
    a4b8:	dd0f      	ble.n	a4da <_dtoa_r+0x212>
    a4ba:	4b63      	ldr	r3, [pc, #396]	; (a648 <_dtoa_r+0x380>)
    a4bc:	9806      	ldr	r0, [sp, #24]
    a4be:	18f3      	adds	r3, r6, r3
    a4c0:	40d8      	lsrs	r0, r3
    a4c2:	2340      	movs	r3, #64	; 0x40
    a4c4:	1a9b      	subs	r3, r3, r2
    a4c6:	409c      	lsls	r4, r3
    a4c8:	4320      	orrs	r0, r4
    a4ca:	f003 fe41 	bl	e150 <__aeabi_ui2d>
    a4ce:	2301      	movs	r3, #1
    a4d0:	4c5e      	ldr	r4, [pc, #376]	; (a64c <_dtoa_r+0x384>)
    a4d2:	3e01      	subs	r6, #1
    a4d4:	1909      	adds	r1, r1, r4
    a4d6:	9318      	str	r3, [sp, #96]	; 0x60
    a4d8:	e771      	b.n	a3be <_dtoa_r+0xf6>
    a4da:	2320      	movs	r3, #32
    a4dc:	9806      	ldr	r0, [sp, #24]
    a4de:	1a9b      	subs	r3, r3, r2
    a4e0:	4098      	lsls	r0, r3
    a4e2:	e7f2      	b.n	a4ca <_dtoa_r+0x202>
    a4e4:	9016      	str	r0, [sp, #88]	; 0x58
    a4e6:	e7b6      	b.n	a456 <_dtoa_r+0x18e>
    a4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a4ea:	9a03      	ldr	r2, [sp, #12]
    a4ec:	1a9b      	subs	r3, r3, r2
    a4ee:	930b      	str	r3, [sp, #44]	; 0x2c
    a4f0:	4253      	negs	r3, r2
    a4f2:	9308      	str	r3, [sp, #32]
    a4f4:	2300      	movs	r3, #0
    a4f6:	930f      	str	r3, [sp, #60]	; 0x3c
    a4f8:	e7c5      	b.n	a486 <_dtoa_r+0x1be>
    a4fa:	2301      	movs	r3, #1
    a4fc:	930e      	str	r3, [sp, #56]	; 0x38
    a4fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a500:	2b00      	cmp	r3, #0
    a502:	dd65      	ble.n	a5d0 <_dtoa_r+0x308>
    a504:	001f      	movs	r7, r3
    a506:	930d      	str	r3, [sp, #52]	; 0x34
    a508:	9a04      	ldr	r2, [sp, #16]
    a50a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    a50c:	2200      	movs	r2, #0
    a50e:	6062      	str	r2, [r4, #4]
    a510:	3204      	adds	r2, #4
    a512:	0011      	movs	r1, r2
    a514:	3114      	adds	r1, #20
    a516:	4299      	cmp	r1, r3
    a518:	d95f      	bls.n	a5da <_dtoa_r+0x312>
    a51a:	6861      	ldr	r1, [r4, #4]
    a51c:	9804      	ldr	r0, [sp, #16]
    a51e:	f000 fece 	bl	b2be <_Balloc>
    a522:	9b04      	ldr	r3, [sp, #16]
    a524:	6020      	str	r0, [r4, #0]
    a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a528:	681b      	ldr	r3, [r3, #0]
    a52a:	930a      	str	r3, [sp, #40]	; 0x28
    a52c:	2f0e      	cmp	r7, #14
    a52e:	d900      	bls.n	a532 <_dtoa_r+0x26a>
    a530:	e105      	b.n	a73e <_dtoa_r+0x476>
    a532:	2d00      	cmp	r5, #0
    a534:	d100      	bne.n	a538 <_dtoa_r+0x270>
    a536:	e102      	b.n	a73e <_dtoa_r+0x476>
    a538:	9b06      	ldr	r3, [sp, #24]
    a53a:	9c07      	ldr	r4, [sp, #28]
    a53c:	9314      	str	r3, [sp, #80]	; 0x50
    a53e:	9415      	str	r4, [sp, #84]	; 0x54
    a540:	9b03      	ldr	r3, [sp, #12]
    a542:	2b00      	cmp	r3, #0
    a544:	dc00      	bgt.n	a548 <_dtoa_r+0x280>
    a546:	e085      	b.n	a654 <_dtoa_r+0x38c>
    a548:	001a      	movs	r2, r3
    a54a:	210f      	movs	r1, #15
    a54c:	4b3c      	ldr	r3, [pc, #240]	; (a640 <_dtoa_r+0x378>)
    a54e:	400a      	ands	r2, r1
    a550:	00d2      	lsls	r2, r2, #3
    a552:	189b      	adds	r3, r3, r2
    a554:	685c      	ldr	r4, [r3, #4]
    a556:	681b      	ldr	r3, [r3, #0]
    a558:	9310      	str	r3, [sp, #64]	; 0x40
    a55a:	9411      	str	r4, [sp, #68]	; 0x44
    a55c:	9b03      	ldr	r3, [sp, #12]
    a55e:	2402      	movs	r4, #2
    a560:	111d      	asrs	r5, r3, #4
    a562:	06eb      	lsls	r3, r5, #27
    a564:	d50a      	bpl.n	a57c <_dtoa_r+0x2b4>
    a566:	4b3a      	ldr	r3, [pc, #232]	; (a650 <_dtoa_r+0x388>)
    a568:	400d      	ands	r5, r1
    a56a:	6a1a      	ldr	r2, [r3, #32]
    a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a56e:	9814      	ldr	r0, [sp, #80]	; 0x50
    a570:	9915      	ldr	r1, [sp, #84]	; 0x54
    a572:	f002 fb8d 	bl	cc90 <__aeabi_ddiv>
    a576:	9006      	str	r0, [sp, #24]
    a578:	9107      	str	r1, [sp, #28]
    a57a:	3401      	adds	r4, #1
    a57c:	4e34      	ldr	r6, [pc, #208]	; (a650 <_dtoa_r+0x388>)
    a57e:	2d00      	cmp	r5, #0
    a580:	d130      	bne.n	a5e4 <_dtoa_r+0x31c>
    a582:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a584:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a586:	9806      	ldr	r0, [sp, #24]
    a588:	9907      	ldr	r1, [sp, #28]
    a58a:	f002 fb81 	bl	cc90 <__aeabi_ddiv>
    a58e:	9006      	str	r0, [sp, #24]
    a590:	9107      	str	r1, [sp, #28]
    a592:	e07a      	b.n	a68a <_dtoa_r+0x3c2>
    a594:	2301      	movs	r3, #1
    a596:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    a598:	930e      	str	r3, [sp, #56]	; 0x38
    a59a:	4694      	mov	ip, r2
    a59c:	9b03      	ldr	r3, [sp, #12]
    a59e:	4463      	add	r3, ip
    a5a0:	1c5f      	adds	r7, r3, #1
    a5a2:	930d      	str	r3, [sp, #52]	; 0x34
    a5a4:	1e3b      	subs	r3, r7, #0
    a5a6:	dcaf      	bgt.n	a508 <_dtoa_r+0x240>
    a5a8:	2301      	movs	r3, #1
    a5aa:	e7ad      	b.n	a508 <_dtoa_r+0x240>
    a5ac:	2300      	movs	r3, #0
    a5ae:	e7a5      	b.n	a4fc <_dtoa_r+0x234>
    a5b0:	2300      	movs	r3, #0
    a5b2:	e7f0      	b.n	a596 <_dtoa_r+0x2ce>
    a5b4:	2300      	movs	r3, #0
    a5b6:	950e      	str	r5, [sp, #56]	; 0x38
    a5b8:	9322      	str	r3, [sp, #136]	; 0x88
    a5ba:	3b01      	subs	r3, #1
    a5bc:	2200      	movs	r2, #0
    a5be:	930d      	str	r3, [sp, #52]	; 0x34
    a5c0:	001f      	movs	r7, r3
    a5c2:	3313      	adds	r3, #19
    a5c4:	9223      	str	r2, [sp, #140]	; 0x8c
    a5c6:	e79f      	b.n	a508 <_dtoa_r+0x240>
    a5c8:	2301      	movs	r3, #1
    a5ca:	930e      	str	r3, [sp, #56]	; 0x38
    a5cc:	3b02      	subs	r3, #2
    a5ce:	e7f5      	b.n	a5bc <_dtoa_r+0x2f4>
    a5d0:	2301      	movs	r3, #1
    a5d2:	930d      	str	r3, [sp, #52]	; 0x34
    a5d4:	001f      	movs	r7, r3
    a5d6:	001a      	movs	r2, r3
    a5d8:	e7f4      	b.n	a5c4 <_dtoa_r+0x2fc>
    a5da:	6861      	ldr	r1, [r4, #4]
    a5dc:	0052      	lsls	r2, r2, #1
    a5de:	3101      	adds	r1, #1
    a5e0:	6061      	str	r1, [r4, #4]
    a5e2:	e796      	b.n	a512 <_dtoa_r+0x24a>
    a5e4:	2301      	movs	r3, #1
    a5e6:	421d      	tst	r5, r3
    a5e8:	d008      	beq.n	a5fc <_dtoa_r+0x334>
    a5ea:	9810      	ldr	r0, [sp, #64]	; 0x40
    a5ec:	9911      	ldr	r1, [sp, #68]	; 0x44
    a5ee:	18e4      	adds	r4, r4, r3
    a5f0:	6832      	ldr	r2, [r6, #0]
    a5f2:	6873      	ldr	r3, [r6, #4]
    a5f4:	f002 ff80 	bl	d4f8 <__aeabi_dmul>
    a5f8:	9010      	str	r0, [sp, #64]	; 0x40
    a5fa:	9111      	str	r1, [sp, #68]	; 0x44
    a5fc:	106d      	asrs	r5, r5, #1
    a5fe:	3608      	adds	r6, #8
    a600:	e7bd      	b.n	a57e <_dtoa_r+0x2b6>
    a602:	46c0      	nop			; (mov r8, r8)
    a604:	7ff00000 	.word	0x7ff00000
    a608:	0000270f 	.word	0x0000270f
    a60c:	0000f06c 	.word	0x0000f06c
    a610:	0000f06f 	.word	0x0000f06f
    a614:	0000ef3e 	.word	0x0000ef3e
    a618:	0000ef3f 	.word	0x0000ef3f
    a61c:	3ff00000 	.word	0x3ff00000
    a620:	fffffc01 	.word	0xfffffc01
    a624:	3ff80000 	.word	0x3ff80000
    a628:	636f4361 	.word	0x636f4361
    a62c:	3fd287a7 	.word	0x3fd287a7
    a630:	8b60c8b3 	.word	0x8b60c8b3
    a634:	3fc68a28 	.word	0x3fc68a28
    a638:	509f79fb 	.word	0x509f79fb
    a63c:	3fd34413 	.word	0x3fd34413
    a640:	0000f0f8 	.word	0x0000f0f8
    a644:	00000432 	.word	0x00000432
    a648:	00000412 	.word	0x00000412
    a64c:	fe100000 	.word	0xfe100000
    a650:	0000f0d0 	.word	0x0000f0d0
    a654:	9b03      	ldr	r3, [sp, #12]
    a656:	2402      	movs	r4, #2
    a658:	2b00      	cmp	r3, #0
    a65a:	d016      	beq.n	a68a <_dtoa_r+0x3c2>
    a65c:	9814      	ldr	r0, [sp, #80]	; 0x50
    a65e:	9915      	ldr	r1, [sp, #84]	; 0x54
    a660:	425d      	negs	r5, r3
    a662:	230f      	movs	r3, #15
    a664:	4aca      	ldr	r2, [pc, #808]	; (a990 <_dtoa_r+0x6c8>)
    a666:	402b      	ands	r3, r5
    a668:	00db      	lsls	r3, r3, #3
    a66a:	18d3      	adds	r3, r2, r3
    a66c:	681a      	ldr	r2, [r3, #0]
    a66e:	685b      	ldr	r3, [r3, #4]
    a670:	f002 ff42 	bl	d4f8 <__aeabi_dmul>
    a674:	2300      	movs	r3, #0
    a676:	9006      	str	r0, [sp, #24]
    a678:	9107      	str	r1, [sp, #28]
    a67a:	4ec6      	ldr	r6, [pc, #792]	; (a994 <_dtoa_r+0x6cc>)
    a67c:	112d      	asrs	r5, r5, #4
    a67e:	2d00      	cmp	r5, #0
    a680:	d000      	beq.n	a684 <_dtoa_r+0x3bc>
    a682:	e08c      	b.n	a79e <_dtoa_r+0x4d6>
    a684:	2b00      	cmp	r3, #0
    a686:	d000      	beq.n	a68a <_dtoa_r+0x3c2>
    a688:	e781      	b.n	a58e <_dtoa_r+0x2c6>
    a68a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a68c:	2b00      	cmp	r3, #0
    a68e:	d100      	bne.n	a692 <_dtoa_r+0x3ca>
    a690:	e091      	b.n	a7b6 <_dtoa_r+0x4ee>
    a692:	9a06      	ldr	r2, [sp, #24]
    a694:	9b07      	ldr	r3, [sp, #28]
    a696:	9210      	str	r2, [sp, #64]	; 0x40
    a698:	9311      	str	r3, [sp, #68]	; 0x44
    a69a:	9810      	ldr	r0, [sp, #64]	; 0x40
    a69c:	9911      	ldr	r1, [sp, #68]	; 0x44
    a69e:	2200      	movs	r2, #0
    a6a0:	4bbd      	ldr	r3, [pc, #756]	; (a998 <_dtoa_r+0x6d0>)
    a6a2:	f001 fc95 	bl	bfd0 <__aeabi_dcmplt>
    a6a6:	2800      	cmp	r0, #0
    a6a8:	d100      	bne.n	a6ac <_dtoa_r+0x3e4>
    a6aa:	e084      	b.n	a7b6 <_dtoa_r+0x4ee>
    a6ac:	2f00      	cmp	r7, #0
    a6ae:	d100      	bne.n	a6b2 <_dtoa_r+0x3ea>
    a6b0:	e081      	b.n	a7b6 <_dtoa_r+0x4ee>
    a6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a6b4:	2b00      	cmp	r3, #0
    a6b6:	dd3e      	ble.n	a736 <_dtoa_r+0x46e>
    a6b8:	9810      	ldr	r0, [sp, #64]	; 0x40
    a6ba:	9911      	ldr	r1, [sp, #68]	; 0x44
    a6bc:	9b03      	ldr	r3, [sp, #12]
    a6be:	2200      	movs	r2, #0
    a6c0:	1e5e      	subs	r6, r3, #1
    a6c2:	4bb6      	ldr	r3, [pc, #728]	; (a99c <_dtoa_r+0x6d4>)
    a6c4:	f002 ff18 	bl	d4f8 <__aeabi_dmul>
    a6c8:	9006      	str	r0, [sp, #24]
    a6ca:	9107      	str	r1, [sp, #28]
    a6cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a6ce:	3401      	adds	r4, #1
    a6d0:	0020      	movs	r0, r4
    a6d2:	f003 fcfb 	bl	e0cc <__aeabi_i2d>
    a6d6:	9a06      	ldr	r2, [sp, #24]
    a6d8:	9b07      	ldr	r3, [sp, #28]
    a6da:	f002 ff0d 	bl	d4f8 <__aeabi_dmul>
    a6de:	2200      	movs	r2, #0
    a6e0:	4baf      	ldr	r3, [pc, #700]	; (a9a0 <_dtoa_r+0x6d8>)
    a6e2:	f001 ffc5 	bl	c670 <__aeabi_dadd>
    a6e6:	9012      	str	r0, [sp, #72]	; 0x48
    a6e8:	9113      	str	r1, [sp, #76]	; 0x4c
    a6ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a6ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    a6ee:	4aad      	ldr	r2, [pc, #692]	; (a9a4 <_dtoa_r+0x6dc>)
    a6f0:	9310      	str	r3, [sp, #64]	; 0x40
    a6f2:	9411      	str	r4, [sp, #68]	; 0x44
    a6f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a6f6:	189c      	adds	r4, r3, r2
    a6f8:	9411      	str	r4, [sp, #68]	; 0x44
    a6fa:	2d00      	cmp	r5, #0
    a6fc:	d15e      	bne.n	a7bc <_dtoa_r+0x4f4>
    a6fe:	9806      	ldr	r0, [sp, #24]
    a700:	9907      	ldr	r1, [sp, #28]
    a702:	2200      	movs	r2, #0
    a704:	4ba8      	ldr	r3, [pc, #672]	; (a9a8 <_dtoa_r+0x6e0>)
    a706:	f003 f977 	bl	d9f8 <__aeabi_dsub>
    a70a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a70c:	0023      	movs	r3, r4
    a70e:	9006      	str	r0, [sp, #24]
    a710:	9107      	str	r1, [sp, #28]
    a712:	f001 fc71 	bl	bff8 <__aeabi_dcmpgt>
    a716:	2800      	cmp	r0, #0
    a718:	d000      	beq.n	a71c <_dtoa_r+0x454>
    a71a:	e301      	b.n	ad20 <_dtoa_r+0xa58>
    a71c:	48a3      	ldr	r0, [pc, #652]	; (a9ac <_dtoa_r+0x6e4>)
    a71e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a720:	4684      	mov	ip, r0
    a722:	4461      	add	r1, ip
    a724:	000b      	movs	r3, r1
    a726:	9806      	ldr	r0, [sp, #24]
    a728:	9907      	ldr	r1, [sp, #28]
    a72a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a72c:	f001 fc50 	bl	bfd0 <__aeabi_dcmplt>
    a730:	2800      	cmp	r0, #0
    a732:	d000      	beq.n	a736 <_dtoa_r+0x46e>
    a734:	e2e8      	b.n	ad08 <_dtoa_r+0xa40>
    a736:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a738:	9c15      	ldr	r4, [sp, #84]	; 0x54
    a73a:	9306      	str	r3, [sp, #24]
    a73c:	9407      	str	r4, [sp, #28]
    a73e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a740:	2b00      	cmp	r3, #0
    a742:	da00      	bge.n	a746 <_dtoa_r+0x47e>
    a744:	e157      	b.n	a9f6 <_dtoa_r+0x72e>
    a746:	9a03      	ldr	r2, [sp, #12]
    a748:	2a0e      	cmp	r2, #14
    a74a:	dd00      	ble.n	a74e <_dtoa_r+0x486>
    a74c:	e153      	b.n	a9f6 <_dtoa_r+0x72e>
    a74e:	4b90      	ldr	r3, [pc, #576]	; (a990 <_dtoa_r+0x6c8>)
    a750:	00d2      	lsls	r2, r2, #3
    a752:	189b      	adds	r3, r3, r2
    a754:	685c      	ldr	r4, [r3, #4]
    a756:	681b      	ldr	r3, [r3, #0]
    a758:	9308      	str	r3, [sp, #32]
    a75a:	9409      	str	r4, [sp, #36]	; 0x24
    a75c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a75e:	2b00      	cmp	r3, #0
    a760:	db00      	blt.n	a764 <_dtoa_r+0x49c>
    a762:	e0ce      	b.n	a902 <_dtoa_r+0x63a>
    a764:	2f00      	cmp	r7, #0
    a766:	dd00      	ble.n	a76a <_dtoa_r+0x4a2>
    a768:	e0cb      	b.n	a902 <_dtoa_r+0x63a>
    a76a:	d000      	beq.n	a76e <_dtoa_r+0x4a6>
    a76c:	e2cf      	b.n	ad0e <_dtoa_r+0xa46>
    a76e:	9808      	ldr	r0, [sp, #32]
    a770:	9909      	ldr	r1, [sp, #36]	; 0x24
    a772:	2200      	movs	r2, #0
    a774:	4b8c      	ldr	r3, [pc, #560]	; (a9a8 <_dtoa_r+0x6e0>)
    a776:	f002 febf 	bl	d4f8 <__aeabi_dmul>
    a77a:	9a06      	ldr	r2, [sp, #24]
    a77c:	9b07      	ldr	r3, [sp, #28]
    a77e:	f001 fc45 	bl	c00c <__aeabi_dcmpge>
    a782:	003e      	movs	r6, r7
    a784:	9708      	str	r7, [sp, #32]
    a786:	2800      	cmp	r0, #0
    a788:	d000      	beq.n	a78c <_dtoa_r+0x4c4>
    a78a:	e2a4      	b.n	acd6 <_dtoa_r+0xa0e>
    a78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a78e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a790:	1c5d      	adds	r5, r3, #1
    a792:	2331      	movs	r3, #49	; 0x31
    a794:	7013      	strb	r3, [r2, #0]
    a796:	9b03      	ldr	r3, [sp, #12]
    a798:	3301      	adds	r3, #1
    a79a:	9303      	str	r3, [sp, #12]
    a79c:	e29f      	b.n	acde <_dtoa_r+0xa16>
    a79e:	2201      	movs	r2, #1
    a7a0:	4215      	tst	r5, r2
    a7a2:	d005      	beq.n	a7b0 <_dtoa_r+0x4e8>
    a7a4:	18a4      	adds	r4, r4, r2
    a7a6:	6832      	ldr	r2, [r6, #0]
    a7a8:	6873      	ldr	r3, [r6, #4]
    a7aa:	f002 fea5 	bl	d4f8 <__aeabi_dmul>
    a7ae:	2301      	movs	r3, #1
    a7b0:	106d      	asrs	r5, r5, #1
    a7b2:	3608      	adds	r6, #8
    a7b4:	e763      	b.n	a67e <_dtoa_r+0x3b6>
    a7b6:	9e03      	ldr	r6, [sp, #12]
    a7b8:	003d      	movs	r5, r7
    a7ba:	e789      	b.n	a6d0 <_dtoa_r+0x408>
    a7bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7be:	1e69      	subs	r1, r5, #1
    a7c0:	1952      	adds	r2, r2, r5
    a7c2:	9217      	str	r2, [sp, #92]	; 0x5c
    a7c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a7c6:	4b72      	ldr	r3, [pc, #456]	; (a990 <_dtoa_r+0x6c8>)
    a7c8:	00c9      	lsls	r1, r1, #3
    a7ca:	2a00      	cmp	r2, #0
    a7cc:	d04a      	beq.n	a864 <_dtoa_r+0x59c>
    a7ce:	185b      	adds	r3, r3, r1
    a7d0:	681a      	ldr	r2, [r3, #0]
    a7d2:	685b      	ldr	r3, [r3, #4]
    a7d4:	2000      	movs	r0, #0
    a7d6:	4976      	ldr	r1, [pc, #472]	; (a9b0 <_dtoa_r+0x6e8>)
    a7d8:	f002 fa5a 	bl	cc90 <__aeabi_ddiv>
    a7dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a7de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a7e0:	f003 f90a 	bl	d9f8 <__aeabi_dsub>
    a7e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a7e6:	9010      	str	r0, [sp, #64]	; 0x40
    a7e8:	9111      	str	r1, [sp, #68]	; 0x44
    a7ea:	9312      	str	r3, [sp, #72]	; 0x48
    a7ec:	9806      	ldr	r0, [sp, #24]
    a7ee:	9907      	ldr	r1, [sp, #28]
    a7f0:	f003 fc38 	bl	e064 <__aeabi_d2iz>
    a7f4:	0004      	movs	r4, r0
    a7f6:	f003 fc69 	bl	e0cc <__aeabi_i2d>
    a7fa:	0002      	movs	r2, r0
    a7fc:	000b      	movs	r3, r1
    a7fe:	9806      	ldr	r0, [sp, #24]
    a800:	9907      	ldr	r1, [sp, #28]
    a802:	f003 f8f9 	bl	d9f8 <__aeabi_dsub>
    a806:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a808:	3430      	adds	r4, #48	; 0x30
    a80a:	1c5d      	adds	r5, r3, #1
    a80c:	701c      	strb	r4, [r3, #0]
    a80e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a810:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a812:	9006      	str	r0, [sp, #24]
    a814:	9107      	str	r1, [sp, #28]
    a816:	f001 fbdb 	bl	bfd0 <__aeabi_dcmplt>
    a81a:	2800      	cmp	r0, #0
    a81c:	d165      	bne.n	a8ea <_dtoa_r+0x622>
    a81e:	9a06      	ldr	r2, [sp, #24]
    a820:	9b07      	ldr	r3, [sp, #28]
    a822:	2000      	movs	r0, #0
    a824:	495c      	ldr	r1, [pc, #368]	; (a998 <_dtoa_r+0x6d0>)
    a826:	f003 f8e7 	bl	d9f8 <__aeabi_dsub>
    a82a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a82c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a82e:	f001 fbcf 	bl	bfd0 <__aeabi_dcmplt>
    a832:	2800      	cmp	r0, #0
    a834:	d000      	beq.n	a838 <_dtoa_r+0x570>
    a836:	e0be      	b.n	a9b6 <_dtoa_r+0x6ee>
    a838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a83a:	429d      	cmp	r5, r3
    a83c:	d100      	bne.n	a840 <_dtoa_r+0x578>
    a83e:	e77a      	b.n	a736 <_dtoa_r+0x46e>
    a840:	9810      	ldr	r0, [sp, #64]	; 0x40
    a842:	9911      	ldr	r1, [sp, #68]	; 0x44
    a844:	2200      	movs	r2, #0
    a846:	4b55      	ldr	r3, [pc, #340]	; (a99c <_dtoa_r+0x6d4>)
    a848:	f002 fe56 	bl	d4f8 <__aeabi_dmul>
    a84c:	2200      	movs	r2, #0
    a84e:	9010      	str	r0, [sp, #64]	; 0x40
    a850:	9111      	str	r1, [sp, #68]	; 0x44
    a852:	9806      	ldr	r0, [sp, #24]
    a854:	9907      	ldr	r1, [sp, #28]
    a856:	4b51      	ldr	r3, [pc, #324]	; (a99c <_dtoa_r+0x6d4>)
    a858:	f002 fe4e 	bl	d4f8 <__aeabi_dmul>
    a85c:	9512      	str	r5, [sp, #72]	; 0x48
    a85e:	9006      	str	r0, [sp, #24]
    a860:	9107      	str	r1, [sp, #28]
    a862:	e7c3      	b.n	a7ec <_dtoa_r+0x524>
    a864:	1859      	adds	r1, r3, r1
    a866:	6808      	ldr	r0, [r1, #0]
    a868:	6849      	ldr	r1, [r1, #4]
    a86a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a86c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a86e:	f002 fe43 	bl	d4f8 <__aeabi_dmul>
    a872:	9010      	str	r0, [sp, #64]	; 0x40
    a874:	9111      	str	r1, [sp, #68]	; 0x44
    a876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a878:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    a87a:	9806      	ldr	r0, [sp, #24]
    a87c:	9907      	ldr	r1, [sp, #28]
    a87e:	f003 fbf1 	bl	e064 <__aeabi_d2iz>
    a882:	9012      	str	r0, [sp, #72]	; 0x48
    a884:	f003 fc22 	bl	e0cc <__aeabi_i2d>
    a888:	0002      	movs	r2, r0
    a88a:	000b      	movs	r3, r1
    a88c:	9806      	ldr	r0, [sp, #24]
    a88e:	9907      	ldr	r1, [sp, #28]
    a890:	f003 f8b2 	bl	d9f8 <__aeabi_dsub>
    a894:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a896:	9006      	str	r0, [sp, #24]
    a898:	9107      	str	r1, [sp, #28]
    a89a:	3330      	adds	r3, #48	; 0x30
    a89c:	7023      	strb	r3, [r4, #0]
    a89e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a8a0:	3401      	adds	r4, #1
    a8a2:	2200      	movs	r2, #0
    a8a4:	42a3      	cmp	r3, r4
    a8a6:	d124      	bne.n	a8f2 <_dtoa_r+0x62a>
    a8a8:	4b41      	ldr	r3, [pc, #260]	; (a9b0 <_dtoa_r+0x6e8>)
    a8aa:	9810      	ldr	r0, [sp, #64]	; 0x40
    a8ac:	9911      	ldr	r1, [sp, #68]	; 0x44
    a8ae:	f001 fedf 	bl	c670 <__aeabi_dadd>
    a8b2:	0002      	movs	r2, r0
    a8b4:	000b      	movs	r3, r1
    a8b6:	9806      	ldr	r0, [sp, #24]
    a8b8:	9907      	ldr	r1, [sp, #28]
    a8ba:	f001 fb9d 	bl	bff8 <__aeabi_dcmpgt>
    a8be:	2800      	cmp	r0, #0
    a8c0:	d000      	beq.n	a8c4 <_dtoa_r+0x5fc>
    a8c2:	e078      	b.n	a9b6 <_dtoa_r+0x6ee>
    a8c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a8c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a8c8:	2000      	movs	r0, #0
    a8ca:	4939      	ldr	r1, [pc, #228]	; (a9b0 <_dtoa_r+0x6e8>)
    a8cc:	f003 f894 	bl	d9f8 <__aeabi_dsub>
    a8d0:	0002      	movs	r2, r0
    a8d2:	000b      	movs	r3, r1
    a8d4:	9806      	ldr	r0, [sp, #24]
    a8d6:	9907      	ldr	r1, [sp, #28]
    a8d8:	f001 fb7a 	bl	bfd0 <__aeabi_dcmplt>
    a8dc:	2800      	cmp	r0, #0
    a8de:	d100      	bne.n	a8e2 <_dtoa_r+0x61a>
    a8e0:	e729      	b.n	a736 <_dtoa_r+0x46e>
    a8e2:	1e6b      	subs	r3, r5, #1
    a8e4:	781a      	ldrb	r2, [r3, #0]
    a8e6:	2a30      	cmp	r2, #48	; 0x30
    a8e8:	d001      	beq.n	a8ee <_dtoa_r+0x626>
    a8ea:	9603      	str	r6, [sp, #12]
    a8ec:	e03f      	b.n	a96e <_dtoa_r+0x6a6>
    a8ee:	001d      	movs	r5, r3
    a8f0:	e7f7      	b.n	a8e2 <_dtoa_r+0x61a>
    a8f2:	9806      	ldr	r0, [sp, #24]
    a8f4:	9907      	ldr	r1, [sp, #28]
    a8f6:	4b29      	ldr	r3, [pc, #164]	; (a99c <_dtoa_r+0x6d4>)
    a8f8:	f002 fdfe 	bl	d4f8 <__aeabi_dmul>
    a8fc:	9006      	str	r0, [sp, #24]
    a8fe:	9107      	str	r1, [sp, #28]
    a900:	e7bb      	b.n	a87a <_dtoa_r+0x5b2>
    a902:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a904:	9a08      	ldr	r2, [sp, #32]
    a906:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a908:	9806      	ldr	r0, [sp, #24]
    a90a:	9907      	ldr	r1, [sp, #28]
    a90c:	f002 f9c0 	bl	cc90 <__aeabi_ddiv>
    a910:	f003 fba8 	bl	e064 <__aeabi_d2iz>
    a914:	0004      	movs	r4, r0
    a916:	f003 fbd9 	bl	e0cc <__aeabi_i2d>
    a91a:	9a08      	ldr	r2, [sp, #32]
    a91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a91e:	f002 fdeb 	bl	d4f8 <__aeabi_dmul>
    a922:	000b      	movs	r3, r1
    a924:	0002      	movs	r2, r0
    a926:	9806      	ldr	r0, [sp, #24]
    a928:	9907      	ldr	r1, [sp, #28]
    a92a:	f003 f865 	bl	d9f8 <__aeabi_dsub>
    a92e:	0023      	movs	r3, r4
    a930:	3330      	adds	r3, #48	; 0x30
    a932:	7033      	strb	r3, [r6, #0]
    a934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a936:	1c75      	adds	r5, r6, #1
    a938:	1aeb      	subs	r3, r5, r3
    a93a:	429f      	cmp	r7, r3
    a93c:	d14c      	bne.n	a9d8 <_dtoa_r+0x710>
    a93e:	0002      	movs	r2, r0
    a940:	000b      	movs	r3, r1
    a942:	f001 fe95 	bl	c670 <__aeabi_dadd>
    a946:	0006      	movs	r6, r0
    a948:	000f      	movs	r7, r1
    a94a:	0002      	movs	r2, r0
    a94c:	000b      	movs	r3, r1
    a94e:	9808      	ldr	r0, [sp, #32]
    a950:	9909      	ldr	r1, [sp, #36]	; 0x24
    a952:	f001 fb3d 	bl	bfd0 <__aeabi_dcmplt>
    a956:	2800      	cmp	r0, #0
    a958:	d12c      	bne.n	a9b4 <_dtoa_r+0x6ec>
    a95a:	9808      	ldr	r0, [sp, #32]
    a95c:	9909      	ldr	r1, [sp, #36]	; 0x24
    a95e:	0032      	movs	r2, r6
    a960:	003b      	movs	r3, r7
    a962:	f001 fb2f 	bl	bfc4 <__aeabi_dcmpeq>
    a966:	2800      	cmp	r0, #0
    a968:	d001      	beq.n	a96e <_dtoa_r+0x6a6>
    a96a:	07e3      	lsls	r3, r4, #31
    a96c:	d422      	bmi.n	a9b4 <_dtoa_r+0x6ec>
    a96e:	9905      	ldr	r1, [sp, #20]
    a970:	9804      	ldr	r0, [sp, #16]
    a972:	f000 fcdc 	bl	b32e <_Bfree>
    a976:	2300      	movs	r3, #0
    a978:	702b      	strb	r3, [r5, #0]
    a97a:	9b03      	ldr	r3, [sp, #12]
    a97c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a97e:	3301      	adds	r3, #1
    a980:	6013      	str	r3, [r2, #0]
    a982:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a984:	2b00      	cmp	r3, #0
    a986:	d100      	bne.n	a98a <_dtoa_r+0x6c2>
    a988:	e275      	b.n	ae76 <_dtoa_r+0xbae>
    a98a:	601d      	str	r5, [r3, #0]
    a98c:	e273      	b.n	ae76 <_dtoa_r+0xbae>
    a98e:	46c0      	nop			; (mov r8, r8)
    a990:	0000f0f8 	.word	0x0000f0f8
    a994:	0000f0d0 	.word	0x0000f0d0
    a998:	3ff00000 	.word	0x3ff00000
    a99c:	40240000 	.word	0x40240000
    a9a0:	401c0000 	.word	0x401c0000
    a9a4:	fcc00000 	.word	0xfcc00000
    a9a8:	40140000 	.word	0x40140000
    a9ac:	7cc00000 	.word	0x7cc00000
    a9b0:	3fe00000 	.word	0x3fe00000
    a9b4:	9e03      	ldr	r6, [sp, #12]
    a9b6:	1e6b      	subs	r3, r5, #1
    a9b8:	781a      	ldrb	r2, [r3, #0]
    a9ba:	2a39      	cmp	r2, #57	; 0x39
    a9bc:	d106      	bne.n	a9cc <_dtoa_r+0x704>
    a9be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a9c0:	429a      	cmp	r2, r3
    a9c2:	d107      	bne.n	a9d4 <_dtoa_r+0x70c>
    a9c4:	2330      	movs	r3, #48	; 0x30
    a9c6:	7013      	strb	r3, [r2, #0]
    a9c8:	0013      	movs	r3, r2
    a9ca:	3601      	adds	r6, #1
    a9cc:	781a      	ldrb	r2, [r3, #0]
    a9ce:	3201      	adds	r2, #1
    a9d0:	701a      	strb	r2, [r3, #0]
    a9d2:	e78a      	b.n	a8ea <_dtoa_r+0x622>
    a9d4:	001d      	movs	r5, r3
    a9d6:	e7ee      	b.n	a9b6 <_dtoa_r+0x6ee>
    a9d8:	2200      	movs	r2, #0
    a9da:	4bcf      	ldr	r3, [pc, #828]	; (ad18 <_dtoa_r+0xa50>)
    a9dc:	f002 fd8c 	bl	d4f8 <__aeabi_dmul>
    a9e0:	2200      	movs	r2, #0
    a9e2:	2300      	movs	r3, #0
    a9e4:	9006      	str	r0, [sp, #24]
    a9e6:	9107      	str	r1, [sp, #28]
    a9e8:	002e      	movs	r6, r5
    a9ea:	f001 faeb 	bl	bfc4 <__aeabi_dcmpeq>
    a9ee:	2800      	cmp	r0, #0
    a9f0:	d100      	bne.n	a9f4 <_dtoa_r+0x72c>
    a9f2:	e787      	b.n	a904 <_dtoa_r+0x63c>
    a9f4:	e7bb      	b.n	a96e <_dtoa_r+0x6a6>
    a9f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a9f8:	2a00      	cmp	r2, #0
    a9fa:	d100      	bne.n	a9fe <_dtoa_r+0x736>
    a9fc:	e087      	b.n	ab0e <_dtoa_r+0x846>
    a9fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aa00:	2a01      	cmp	r2, #1
    aa02:	dc6e      	bgt.n	aae2 <_dtoa_r+0x81a>
    aa04:	9a18      	ldr	r2, [sp, #96]	; 0x60
    aa06:	2a00      	cmp	r2, #0
    aa08:	d067      	beq.n	aada <_dtoa_r+0x812>
    aa0a:	4ac4      	ldr	r2, [pc, #784]	; (ad1c <_dtoa_r+0xa54>)
    aa0c:	189b      	adds	r3, r3, r2
    aa0e:	9d08      	ldr	r5, [sp, #32]
    aa10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    aa12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aa14:	2101      	movs	r1, #1
    aa16:	18d2      	adds	r2, r2, r3
    aa18:	920b      	str	r2, [sp, #44]	; 0x2c
    aa1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aa1c:	9804      	ldr	r0, [sp, #16]
    aa1e:	18d3      	adds	r3, r2, r3
    aa20:	930c      	str	r3, [sp, #48]	; 0x30
    aa22:	f000 fd22 	bl	b46a <__i2b>
    aa26:	0006      	movs	r6, r0
    aa28:	2c00      	cmp	r4, #0
    aa2a:	dd0e      	ble.n	aa4a <_dtoa_r+0x782>
    aa2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aa2e:	2b00      	cmp	r3, #0
    aa30:	dd0b      	ble.n	aa4a <_dtoa_r+0x782>
    aa32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aa34:	0023      	movs	r3, r4
    aa36:	4294      	cmp	r4, r2
    aa38:	dd00      	ble.n	aa3c <_dtoa_r+0x774>
    aa3a:	0013      	movs	r3, r2
    aa3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aa3e:	1ae4      	subs	r4, r4, r3
    aa40:	1ad2      	subs	r2, r2, r3
    aa42:	920b      	str	r2, [sp, #44]	; 0x2c
    aa44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aa46:	1ad3      	subs	r3, r2, r3
    aa48:	930c      	str	r3, [sp, #48]	; 0x30
    aa4a:	9b08      	ldr	r3, [sp, #32]
    aa4c:	2b00      	cmp	r3, #0
    aa4e:	d01e      	beq.n	aa8e <_dtoa_r+0x7c6>
    aa50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aa52:	2b00      	cmp	r3, #0
    aa54:	d05f      	beq.n	ab16 <_dtoa_r+0x84e>
    aa56:	2d00      	cmp	r5, #0
    aa58:	dd11      	ble.n	aa7e <_dtoa_r+0x7b6>
    aa5a:	0031      	movs	r1, r6
    aa5c:	002a      	movs	r2, r5
    aa5e:	9804      	ldr	r0, [sp, #16]
    aa60:	f000 fd9c 	bl	b59c <__pow5mult>
    aa64:	9a05      	ldr	r2, [sp, #20]
    aa66:	0001      	movs	r1, r0
    aa68:	0006      	movs	r6, r0
    aa6a:	9804      	ldr	r0, [sp, #16]
    aa6c:	f000 fd06 	bl	b47c <__multiply>
    aa70:	9905      	ldr	r1, [sp, #20]
    aa72:	9010      	str	r0, [sp, #64]	; 0x40
    aa74:	9804      	ldr	r0, [sp, #16]
    aa76:	f000 fc5a 	bl	b32e <_Bfree>
    aa7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aa7c:	9305      	str	r3, [sp, #20]
    aa7e:	9b08      	ldr	r3, [sp, #32]
    aa80:	1b5a      	subs	r2, r3, r5
    aa82:	d004      	beq.n	aa8e <_dtoa_r+0x7c6>
    aa84:	9905      	ldr	r1, [sp, #20]
    aa86:	9804      	ldr	r0, [sp, #16]
    aa88:	f000 fd88 	bl	b59c <__pow5mult>
    aa8c:	9005      	str	r0, [sp, #20]
    aa8e:	2101      	movs	r1, #1
    aa90:	9804      	ldr	r0, [sp, #16]
    aa92:	f000 fcea 	bl	b46a <__i2b>
    aa96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aa98:	9008      	str	r0, [sp, #32]
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	dd3d      	ble.n	ab1a <_dtoa_r+0x852>
    aa9e:	001a      	movs	r2, r3
    aaa0:	0001      	movs	r1, r0
    aaa2:	9804      	ldr	r0, [sp, #16]
    aaa4:	f000 fd7a 	bl	b59c <__pow5mult>
    aaa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aaaa:	9008      	str	r0, [sp, #32]
    aaac:	2500      	movs	r5, #0
    aaae:	2b01      	cmp	r3, #1
    aab0:	dc3b      	bgt.n	ab2a <_dtoa_r+0x862>
    aab2:	2500      	movs	r5, #0
    aab4:	9b06      	ldr	r3, [sp, #24]
    aab6:	42ab      	cmp	r3, r5
    aab8:	d133      	bne.n	ab22 <_dtoa_r+0x85a>
    aaba:	9b07      	ldr	r3, [sp, #28]
    aabc:	031b      	lsls	r3, r3, #12
    aabe:	42ab      	cmp	r3, r5
    aac0:	d12f      	bne.n	ab22 <_dtoa_r+0x85a>
    aac2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    aac4:	9a07      	ldr	r2, [sp, #28]
    aac6:	4213      	tst	r3, r2
    aac8:	d02b      	beq.n	ab22 <_dtoa_r+0x85a>
    aaca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aacc:	3501      	adds	r5, #1
    aace:	3301      	adds	r3, #1
    aad0:	930b      	str	r3, [sp, #44]	; 0x2c
    aad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aad4:	3301      	adds	r3, #1
    aad6:	930c      	str	r3, [sp, #48]	; 0x30
    aad8:	e023      	b.n	ab22 <_dtoa_r+0x85a>
    aada:	2336      	movs	r3, #54	; 0x36
    aadc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    aade:	1a9b      	subs	r3, r3, r2
    aae0:	e795      	b.n	aa0e <_dtoa_r+0x746>
    aae2:	9b08      	ldr	r3, [sp, #32]
    aae4:	1e7d      	subs	r5, r7, #1
    aae6:	42ab      	cmp	r3, r5
    aae8:	db06      	blt.n	aaf8 <_dtoa_r+0x830>
    aaea:	1b5d      	subs	r5, r3, r5
    aaec:	2f00      	cmp	r7, #0
    aaee:	da0b      	bge.n	ab08 <_dtoa_r+0x840>
    aaf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aaf2:	1bdc      	subs	r4, r3, r7
    aaf4:	2300      	movs	r3, #0
    aaf6:	e78c      	b.n	aa12 <_dtoa_r+0x74a>
    aaf8:	9b08      	ldr	r3, [sp, #32]
    aafa:	9508      	str	r5, [sp, #32]
    aafc:	1aea      	subs	r2, r5, r3
    aafe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ab00:	2500      	movs	r5, #0
    ab02:	189b      	adds	r3, r3, r2
    ab04:	930f      	str	r3, [sp, #60]	; 0x3c
    ab06:	e7f1      	b.n	aaec <_dtoa_r+0x824>
    ab08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ab0a:	003b      	movs	r3, r7
    ab0c:	e781      	b.n	aa12 <_dtoa_r+0x74a>
    ab0e:	9d08      	ldr	r5, [sp, #32]
    ab10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ab12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    ab14:	e788      	b.n	aa28 <_dtoa_r+0x760>
    ab16:	9a08      	ldr	r2, [sp, #32]
    ab18:	e7b4      	b.n	aa84 <_dtoa_r+0x7bc>
    ab1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ab1c:	2500      	movs	r5, #0
    ab1e:	2b01      	cmp	r3, #1
    ab20:	ddc7      	ble.n	aab2 <_dtoa_r+0x7ea>
    ab22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ab24:	2001      	movs	r0, #1
    ab26:	2b00      	cmp	r3, #0
    ab28:	d00b      	beq.n	ab42 <_dtoa_r+0x87a>
    ab2a:	9b08      	ldr	r3, [sp, #32]
    ab2c:	9a08      	ldr	r2, [sp, #32]
    ab2e:	691b      	ldr	r3, [r3, #16]
    ab30:	930f      	str	r3, [sp, #60]	; 0x3c
    ab32:	3303      	adds	r3, #3
    ab34:	009b      	lsls	r3, r3, #2
    ab36:	18d3      	adds	r3, r2, r3
    ab38:	6858      	ldr	r0, [r3, #4]
    ab3a:	f000 fc4d 	bl	b3d8 <__hi0bits>
    ab3e:	2320      	movs	r3, #32
    ab40:	1a18      	subs	r0, r3, r0
    ab42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab44:	18c0      	adds	r0, r0, r3
    ab46:	231f      	movs	r3, #31
    ab48:	4018      	ands	r0, r3
    ab4a:	d100      	bne.n	ab4e <_dtoa_r+0x886>
    ab4c:	e0ab      	b.n	aca6 <_dtoa_r+0x9de>
    ab4e:	3301      	adds	r3, #1
    ab50:	1a1b      	subs	r3, r3, r0
    ab52:	2b04      	cmp	r3, #4
    ab54:	dc00      	bgt.n	ab58 <_dtoa_r+0x890>
    ab56:	e09b      	b.n	ac90 <_dtoa_r+0x9c8>
    ab58:	231c      	movs	r3, #28
    ab5a:	1a18      	subs	r0, r3, r0
    ab5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ab5e:	1824      	adds	r4, r4, r0
    ab60:	181b      	adds	r3, r3, r0
    ab62:	930b      	str	r3, [sp, #44]	; 0x2c
    ab64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab66:	181b      	adds	r3, r3, r0
    ab68:	930c      	str	r3, [sp, #48]	; 0x30
    ab6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ab6c:	2b00      	cmp	r3, #0
    ab6e:	dd05      	ble.n	ab7c <_dtoa_r+0x8b4>
    ab70:	001a      	movs	r2, r3
    ab72:	9905      	ldr	r1, [sp, #20]
    ab74:	9804      	ldr	r0, [sp, #16]
    ab76:	f000 fd63 	bl	b640 <__lshift>
    ab7a:	9005      	str	r0, [sp, #20]
    ab7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab7e:	2b00      	cmp	r3, #0
    ab80:	dd05      	ble.n	ab8e <_dtoa_r+0x8c6>
    ab82:	001a      	movs	r2, r3
    ab84:	9908      	ldr	r1, [sp, #32]
    ab86:	9804      	ldr	r0, [sp, #16]
    ab88:	f000 fd5a 	bl	b640 <__lshift>
    ab8c:	9008      	str	r0, [sp, #32]
    ab8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ab90:	2b00      	cmp	r3, #0
    ab92:	d100      	bne.n	ab96 <_dtoa_r+0x8ce>
    ab94:	e089      	b.n	acaa <_dtoa_r+0x9e2>
    ab96:	9908      	ldr	r1, [sp, #32]
    ab98:	9805      	ldr	r0, [sp, #20]
    ab9a:	f000 fda2 	bl	b6e2 <__mcmp>
    ab9e:	2800      	cmp	r0, #0
    aba0:	db00      	blt.n	aba4 <_dtoa_r+0x8dc>
    aba2:	e082      	b.n	acaa <_dtoa_r+0x9e2>
    aba4:	9b03      	ldr	r3, [sp, #12]
    aba6:	220a      	movs	r2, #10
    aba8:	3b01      	subs	r3, #1
    abaa:	9303      	str	r3, [sp, #12]
    abac:	9905      	ldr	r1, [sp, #20]
    abae:	2300      	movs	r3, #0
    abb0:	9804      	ldr	r0, [sp, #16]
    abb2:	f000 fbd5 	bl	b360 <__multadd>
    abb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    abb8:	9005      	str	r0, [sp, #20]
    abba:	2b00      	cmp	r3, #0
    abbc:	d100      	bne.n	abc0 <_dtoa_r+0x8f8>
    abbe:	e15d      	b.n	ae7c <_dtoa_r+0xbb4>
    abc0:	2300      	movs	r3, #0
    abc2:	0031      	movs	r1, r6
    abc4:	220a      	movs	r2, #10
    abc6:	9804      	ldr	r0, [sp, #16]
    abc8:	f000 fbca 	bl	b360 <__multadd>
    abcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    abce:	0006      	movs	r6, r0
    abd0:	2b00      	cmp	r3, #0
    abd2:	dc02      	bgt.n	abda <_dtoa_r+0x912>
    abd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    abd6:	2b02      	cmp	r3, #2
    abd8:	dc6d      	bgt.n	acb6 <_dtoa_r+0x9ee>
    abda:	2c00      	cmp	r4, #0
    abdc:	dd05      	ble.n	abea <_dtoa_r+0x922>
    abde:	0031      	movs	r1, r6
    abe0:	0022      	movs	r2, r4
    abe2:	9804      	ldr	r0, [sp, #16]
    abe4:	f000 fd2c 	bl	b640 <__lshift>
    abe8:	0006      	movs	r6, r0
    abea:	0030      	movs	r0, r6
    abec:	2d00      	cmp	r5, #0
    abee:	d011      	beq.n	ac14 <_dtoa_r+0x94c>
    abf0:	6871      	ldr	r1, [r6, #4]
    abf2:	9804      	ldr	r0, [sp, #16]
    abf4:	f000 fb63 	bl	b2be <_Balloc>
    abf8:	0031      	movs	r1, r6
    abfa:	0004      	movs	r4, r0
    abfc:	6933      	ldr	r3, [r6, #16]
    abfe:	310c      	adds	r1, #12
    ac00:	1c9a      	adds	r2, r3, #2
    ac02:	0092      	lsls	r2, r2, #2
    ac04:	300c      	adds	r0, #12
    ac06:	f7fe fa83 	bl	9110 <memcpy>
    ac0a:	2201      	movs	r2, #1
    ac0c:	0021      	movs	r1, r4
    ac0e:	9804      	ldr	r0, [sp, #16]
    ac10:	f000 fd16 	bl	b640 <__lshift>
    ac14:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    ac16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac18:	3f01      	subs	r7, #1
    ac1a:	930b      	str	r3, [sp, #44]	; 0x2c
    ac1c:	19db      	adds	r3, r3, r7
    ac1e:	0037      	movs	r7, r6
    ac20:	0006      	movs	r6, r0
    ac22:	930f      	str	r3, [sp, #60]	; 0x3c
    ac24:	9908      	ldr	r1, [sp, #32]
    ac26:	9805      	ldr	r0, [sp, #20]
    ac28:	f7ff faca 	bl	a1c0 <quorem>
    ac2c:	0039      	movs	r1, r7
    ac2e:	900d      	str	r0, [sp, #52]	; 0x34
    ac30:	0004      	movs	r4, r0
    ac32:	9805      	ldr	r0, [sp, #20]
    ac34:	f000 fd55 	bl	b6e2 <__mcmp>
    ac38:	0032      	movs	r2, r6
    ac3a:	900e      	str	r0, [sp, #56]	; 0x38
    ac3c:	9908      	ldr	r1, [sp, #32]
    ac3e:	9804      	ldr	r0, [sp, #16]
    ac40:	f000 fd68 	bl	b714 <__mdiff>
    ac44:	2301      	movs	r3, #1
    ac46:	930c      	str	r3, [sp, #48]	; 0x30
    ac48:	68c3      	ldr	r3, [r0, #12]
    ac4a:	3430      	adds	r4, #48	; 0x30
    ac4c:	0005      	movs	r5, r0
    ac4e:	2b00      	cmp	r3, #0
    ac50:	d104      	bne.n	ac5c <_dtoa_r+0x994>
    ac52:	0001      	movs	r1, r0
    ac54:	9805      	ldr	r0, [sp, #20]
    ac56:	f000 fd44 	bl	b6e2 <__mcmp>
    ac5a:	900c      	str	r0, [sp, #48]	; 0x30
    ac5c:	0029      	movs	r1, r5
    ac5e:	9804      	ldr	r0, [sp, #16]
    ac60:	f000 fb65 	bl	b32e <_Bfree>
    ac64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ac66:	9a22      	ldr	r2, [sp, #136]	; 0x88
    ac68:	4313      	orrs	r3, r2
    ac6a:	d000      	beq.n	ac6e <_dtoa_r+0x9a6>
    ac6c:	e089      	b.n	ad82 <_dtoa_r+0xaba>
    ac6e:	9a06      	ldr	r2, [sp, #24]
    ac70:	3301      	adds	r3, #1
    ac72:	4213      	tst	r3, r2
    ac74:	d000      	beq.n	ac78 <_dtoa_r+0x9b0>
    ac76:	e084      	b.n	ad82 <_dtoa_r+0xaba>
    ac78:	2c39      	cmp	r4, #57	; 0x39
    ac7a:	d100      	bne.n	ac7e <_dtoa_r+0x9b6>
    ac7c:	e0a3      	b.n	adc6 <_dtoa_r+0xafe>
    ac7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ac80:	2b00      	cmp	r3, #0
    ac82:	dd01      	ble.n	ac88 <_dtoa_r+0x9c0>
    ac84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    ac86:	3431      	adds	r4, #49	; 0x31
    ac88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac8a:	1c5d      	adds	r5, r3, #1
    ac8c:	701c      	strb	r4, [r3, #0]
    ac8e:	e027      	b.n	ace0 <_dtoa_r+0xa18>
    ac90:	2b04      	cmp	r3, #4
    ac92:	d100      	bne.n	ac96 <_dtoa_r+0x9ce>
    ac94:	e769      	b.n	ab6a <_dtoa_r+0x8a2>
    ac96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ac98:	331c      	adds	r3, #28
    ac9a:	18d2      	adds	r2, r2, r3
    ac9c:	920b      	str	r2, [sp, #44]	; 0x2c
    ac9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aca0:	18e4      	adds	r4, r4, r3
    aca2:	18d3      	adds	r3, r2, r3
    aca4:	e760      	b.n	ab68 <_dtoa_r+0x8a0>
    aca6:	0003      	movs	r3, r0
    aca8:	e7f5      	b.n	ac96 <_dtoa_r+0x9ce>
    acaa:	2f00      	cmp	r7, #0
    acac:	dc3c      	bgt.n	ad28 <_dtoa_r+0xa60>
    acae:	9b22      	ldr	r3, [sp, #136]	; 0x88
    acb0:	2b02      	cmp	r3, #2
    acb2:	dd39      	ble.n	ad28 <_dtoa_r+0xa60>
    acb4:	970d      	str	r7, [sp, #52]	; 0x34
    acb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    acb8:	2b00      	cmp	r3, #0
    acba:	d10c      	bne.n	acd6 <_dtoa_r+0xa0e>
    acbc:	9908      	ldr	r1, [sp, #32]
    acbe:	2205      	movs	r2, #5
    acc0:	9804      	ldr	r0, [sp, #16]
    acc2:	f000 fb4d 	bl	b360 <__multadd>
    acc6:	9008      	str	r0, [sp, #32]
    acc8:	0001      	movs	r1, r0
    acca:	9805      	ldr	r0, [sp, #20]
    accc:	f000 fd09 	bl	b6e2 <__mcmp>
    acd0:	2800      	cmp	r0, #0
    acd2:	dd00      	ble.n	acd6 <_dtoa_r+0xa0e>
    acd4:	e55a      	b.n	a78c <_dtoa_r+0x4c4>
    acd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    acd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    acda:	43db      	mvns	r3, r3
    acdc:	9303      	str	r3, [sp, #12]
    acde:	2700      	movs	r7, #0
    ace0:	9908      	ldr	r1, [sp, #32]
    ace2:	9804      	ldr	r0, [sp, #16]
    ace4:	f000 fb23 	bl	b32e <_Bfree>
    ace8:	2e00      	cmp	r6, #0
    acea:	d100      	bne.n	acee <_dtoa_r+0xa26>
    acec:	e63f      	b.n	a96e <_dtoa_r+0x6a6>
    acee:	2f00      	cmp	r7, #0
    acf0:	d005      	beq.n	acfe <_dtoa_r+0xa36>
    acf2:	42b7      	cmp	r7, r6
    acf4:	d003      	beq.n	acfe <_dtoa_r+0xa36>
    acf6:	0039      	movs	r1, r7
    acf8:	9804      	ldr	r0, [sp, #16]
    acfa:	f000 fb18 	bl	b32e <_Bfree>
    acfe:	0031      	movs	r1, r6
    ad00:	9804      	ldr	r0, [sp, #16]
    ad02:	f000 fb14 	bl	b32e <_Bfree>
    ad06:	e632      	b.n	a96e <_dtoa_r+0x6a6>
    ad08:	9508      	str	r5, [sp, #32]
    ad0a:	002e      	movs	r6, r5
    ad0c:	e7e3      	b.n	acd6 <_dtoa_r+0xa0e>
    ad0e:	2300      	movs	r3, #0
    ad10:	9308      	str	r3, [sp, #32]
    ad12:	001e      	movs	r6, r3
    ad14:	e7df      	b.n	acd6 <_dtoa_r+0xa0e>
    ad16:	46c0      	nop			; (mov r8, r8)
    ad18:	40240000 	.word	0x40240000
    ad1c:	00000433 	.word	0x00000433
    ad20:	9603      	str	r6, [sp, #12]
    ad22:	9508      	str	r5, [sp, #32]
    ad24:	002e      	movs	r6, r5
    ad26:	e531      	b.n	a78c <_dtoa_r+0x4c4>
    ad28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad2a:	970d      	str	r7, [sp, #52]	; 0x34
    ad2c:	2b00      	cmp	r3, #0
    ad2e:	d000      	beq.n	ad32 <_dtoa_r+0xa6a>
    ad30:	e753      	b.n	abda <_dtoa_r+0x912>
    ad32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ad34:	9908      	ldr	r1, [sp, #32]
    ad36:	9805      	ldr	r0, [sp, #20]
    ad38:	f7ff fa42 	bl	a1c0 <quorem>
    ad3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad3e:	3030      	adds	r0, #48	; 0x30
    ad40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ad42:	7028      	strb	r0, [r5, #0]
    ad44:	3501      	adds	r5, #1
    ad46:	0004      	movs	r4, r0
    ad48:	1aeb      	subs	r3, r5, r3
    ad4a:	429a      	cmp	r2, r3
    ad4c:	dc78      	bgt.n	ae40 <_dtoa_r+0xb78>
    ad4e:	1e15      	subs	r5, r2, #0
    ad50:	dc00      	bgt.n	ad54 <_dtoa_r+0xa8c>
    ad52:	2501      	movs	r5, #1
    ad54:	2700      	movs	r7, #0
    ad56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad58:	195d      	adds	r5, r3, r5
    ad5a:	9905      	ldr	r1, [sp, #20]
    ad5c:	2201      	movs	r2, #1
    ad5e:	9804      	ldr	r0, [sp, #16]
    ad60:	f000 fc6e 	bl	b640 <__lshift>
    ad64:	9908      	ldr	r1, [sp, #32]
    ad66:	9005      	str	r0, [sp, #20]
    ad68:	f000 fcbb 	bl	b6e2 <__mcmp>
    ad6c:	2800      	cmp	r0, #0
    ad6e:	dc2f      	bgt.n	add0 <_dtoa_r+0xb08>
    ad70:	d101      	bne.n	ad76 <_dtoa_r+0xaae>
    ad72:	07e3      	lsls	r3, r4, #31
    ad74:	d42c      	bmi.n	add0 <_dtoa_r+0xb08>
    ad76:	1e6b      	subs	r3, r5, #1
    ad78:	781a      	ldrb	r2, [r3, #0]
    ad7a:	2a30      	cmp	r2, #48	; 0x30
    ad7c:	d1b0      	bne.n	ace0 <_dtoa_r+0xa18>
    ad7e:	001d      	movs	r5, r3
    ad80:	e7f9      	b.n	ad76 <_dtoa_r+0xaae>
    ad82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad84:	2b00      	cmp	r3, #0
    ad86:	db07      	blt.n	ad98 <_dtoa_r+0xad0>
    ad88:	001d      	movs	r5, r3
    ad8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ad8c:	431d      	orrs	r5, r3
    ad8e:	d126      	bne.n	adde <_dtoa_r+0xb16>
    ad90:	2301      	movs	r3, #1
    ad92:	9a06      	ldr	r2, [sp, #24]
    ad94:	4213      	tst	r3, r2
    ad96:	d122      	bne.n	adde <_dtoa_r+0xb16>
    ad98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	dc00      	bgt.n	ada0 <_dtoa_r+0xad8>
    ad9e:	e773      	b.n	ac88 <_dtoa_r+0x9c0>
    ada0:	9905      	ldr	r1, [sp, #20]
    ada2:	2201      	movs	r2, #1
    ada4:	9804      	ldr	r0, [sp, #16]
    ada6:	f000 fc4b 	bl	b640 <__lshift>
    adaa:	9908      	ldr	r1, [sp, #32]
    adac:	9005      	str	r0, [sp, #20]
    adae:	f000 fc98 	bl	b6e2 <__mcmp>
    adb2:	2800      	cmp	r0, #0
    adb4:	dc04      	bgt.n	adc0 <_dtoa_r+0xaf8>
    adb6:	d000      	beq.n	adba <_dtoa_r+0xaf2>
    adb8:	e766      	b.n	ac88 <_dtoa_r+0x9c0>
    adba:	07e3      	lsls	r3, r4, #31
    adbc:	d400      	bmi.n	adc0 <_dtoa_r+0xaf8>
    adbe:	e763      	b.n	ac88 <_dtoa_r+0x9c0>
    adc0:	2c39      	cmp	r4, #57	; 0x39
    adc2:	d000      	beq.n	adc6 <_dtoa_r+0xafe>
    adc4:	e75e      	b.n	ac84 <_dtoa_r+0x9bc>
    adc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    adca:	1c5d      	adds	r5, r3, #1
    adcc:	2339      	movs	r3, #57	; 0x39
    adce:	7013      	strb	r3, [r2, #0]
    add0:	1e6b      	subs	r3, r5, #1
    add2:	781a      	ldrb	r2, [r3, #0]
    add4:	2a39      	cmp	r2, #57	; 0x39
    add6:	d03b      	beq.n	ae50 <_dtoa_r+0xb88>
    add8:	3201      	adds	r2, #1
    adda:	701a      	strb	r2, [r3, #0]
    addc:	e780      	b.n	ace0 <_dtoa_r+0xa18>
    adde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ade0:	3301      	adds	r3, #1
    ade2:	930d      	str	r3, [sp, #52]	; 0x34
    ade4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ade6:	2b00      	cmp	r3, #0
    ade8:	dd05      	ble.n	adf6 <_dtoa_r+0xb2e>
    adea:	2c39      	cmp	r4, #57	; 0x39
    adec:	d0eb      	beq.n	adc6 <_dtoa_r+0xafe>
    adee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    adf0:	3401      	adds	r4, #1
    adf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adf4:	e74a      	b.n	ac8c <_dtoa_r+0x9c4>
    adf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    adfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    adfc:	701c      	strb	r4, [r3, #0]
    adfe:	4293      	cmp	r3, r2
    ae00:	d0ab      	beq.n	ad5a <_dtoa_r+0xa92>
    ae02:	2300      	movs	r3, #0
    ae04:	220a      	movs	r2, #10
    ae06:	9905      	ldr	r1, [sp, #20]
    ae08:	9804      	ldr	r0, [sp, #16]
    ae0a:	f000 faa9 	bl	b360 <__multadd>
    ae0e:	2300      	movs	r3, #0
    ae10:	9005      	str	r0, [sp, #20]
    ae12:	220a      	movs	r2, #10
    ae14:	0039      	movs	r1, r7
    ae16:	9804      	ldr	r0, [sp, #16]
    ae18:	42b7      	cmp	r7, r6
    ae1a:	d106      	bne.n	ae2a <_dtoa_r+0xb62>
    ae1c:	f000 faa0 	bl	b360 <__multadd>
    ae20:	0007      	movs	r7, r0
    ae22:	0006      	movs	r6, r0
    ae24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ae26:	930b      	str	r3, [sp, #44]	; 0x2c
    ae28:	e6fc      	b.n	ac24 <_dtoa_r+0x95c>
    ae2a:	f000 fa99 	bl	b360 <__multadd>
    ae2e:	0031      	movs	r1, r6
    ae30:	0007      	movs	r7, r0
    ae32:	2300      	movs	r3, #0
    ae34:	220a      	movs	r2, #10
    ae36:	9804      	ldr	r0, [sp, #16]
    ae38:	f000 fa92 	bl	b360 <__multadd>
    ae3c:	0006      	movs	r6, r0
    ae3e:	e7f1      	b.n	ae24 <_dtoa_r+0xb5c>
    ae40:	2300      	movs	r3, #0
    ae42:	220a      	movs	r2, #10
    ae44:	9905      	ldr	r1, [sp, #20]
    ae46:	9804      	ldr	r0, [sp, #16]
    ae48:	f000 fa8a 	bl	b360 <__multadd>
    ae4c:	9005      	str	r0, [sp, #20]
    ae4e:	e771      	b.n	ad34 <_dtoa_r+0xa6c>
    ae50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae52:	429a      	cmp	r2, r3
    ae54:	d105      	bne.n	ae62 <_dtoa_r+0xb9a>
    ae56:	9b03      	ldr	r3, [sp, #12]
    ae58:	3301      	adds	r3, #1
    ae5a:	9303      	str	r3, [sp, #12]
    ae5c:	2331      	movs	r3, #49	; 0x31
    ae5e:	7013      	strb	r3, [r2, #0]
    ae60:	e73e      	b.n	ace0 <_dtoa_r+0xa18>
    ae62:	001d      	movs	r5, r3
    ae64:	e7b4      	b.n	add0 <_dtoa_r+0xb08>
    ae66:	4b0a      	ldr	r3, [pc, #40]	; (ae90 <_dtoa_r+0xbc8>)
    ae68:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ae6a:	930a      	str	r3, [sp, #40]	; 0x28
    ae6c:	4b09      	ldr	r3, [pc, #36]	; (ae94 <_dtoa_r+0xbcc>)
    ae6e:	2a00      	cmp	r2, #0
    ae70:	d001      	beq.n	ae76 <_dtoa_r+0xbae>
    ae72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ae74:	6013      	str	r3, [r2, #0]
    ae76:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae78:	b01d      	add	sp, #116	; 0x74
    ae7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ae7e:	2b00      	cmp	r3, #0
    ae80:	dd00      	ble.n	ae84 <_dtoa_r+0xbbc>
    ae82:	e756      	b.n	ad32 <_dtoa_r+0xa6a>
    ae84:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ae86:	2b02      	cmp	r3, #2
    ae88:	dc00      	bgt.n	ae8c <_dtoa_r+0xbc4>
    ae8a:	e752      	b.n	ad32 <_dtoa_r+0xa6a>
    ae8c:	e713      	b.n	acb6 <_dtoa_r+0x9ee>
    ae8e:	46c0      	nop			; (mov r8, r8)
    ae90:	0000f063 	.word	0x0000f063
    ae94:	0000f06b 	.word	0x0000f06b

0000ae98 <__sflush_r>:
    ae98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ae9a:	898a      	ldrh	r2, [r1, #12]
    ae9c:	0005      	movs	r5, r0
    ae9e:	000c      	movs	r4, r1
    aea0:	0713      	lsls	r3, r2, #28
    aea2:	d460      	bmi.n	af66 <__sflush_r+0xce>
    aea4:	684b      	ldr	r3, [r1, #4]
    aea6:	2b00      	cmp	r3, #0
    aea8:	dc04      	bgt.n	aeb4 <__sflush_r+0x1c>
    aeaa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    aeac:	2b00      	cmp	r3, #0
    aeae:	dc01      	bgt.n	aeb4 <__sflush_r+0x1c>
    aeb0:	2000      	movs	r0, #0
    aeb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    aeb4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    aeb6:	2f00      	cmp	r7, #0
    aeb8:	d0fa      	beq.n	aeb0 <__sflush_r+0x18>
    aeba:	2300      	movs	r3, #0
    aebc:	682e      	ldr	r6, [r5, #0]
    aebe:	602b      	str	r3, [r5, #0]
    aec0:	2380      	movs	r3, #128	; 0x80
    aec2:	015b      	lsls	r3, r3, #5
    aec4:	401a      	ands	r2, r3
    aec6:	d034      	beq.n	af32 <__sflush_r+0x9a>
    aec8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    aeca:	89a3      	ldrh	r3, [r4, #12]
    aecc:	075b      	lsls	r3, r3, #29
    aece:	d506      	bpl.n	aede <__sflush_r+0x46>
    aed0:	6863      	ldr	r3, [r4, #4]
    aed2:	1ac0      	subs	r0, r0, r3
    aed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    aed6:	2b00      	cmp	r3, #0
    aed8:	d001      	beq.n	aede <__sflush_r+0x46>
    aeda:	6c23      	ldr	r3, [r4, #64]	; 0x40
    aedc:	1ac0      	subs	r0, r0, r3
    aede:	0002      	movs	r2, r0
    aee0:	6a21      	ldr	r1, [r4, #32]
    aee2:	2300      	movs	r3, #0
    aee4:	0028      	movs	r0, r5
    aee6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    aee8:	47b8      	blx	r7
    aeea:	89a1      	ldrh	r1, [r4, #12]
    aeec:	1c43      	adds	r3, r0, #1
    aeee:	d106      	bne.n	aefe <__sflush_r+0x66>
    aef0:	682b      	ldr	r3, [r5, #0]
    aef2:	2b1d      	cmp	r3, #29
    aef4:	d831      	bhi.n	af5a <__sflush_r+0xc2>
    aef6:	4a2c      	ldr	r2, [pc, #176]	; (afa8 <__sflush_r+0x110>)
    aef8:	40da      	lsrs	r2, r3
    aefa:	07d3      	lsls	r3, r2, #31
    aefc:	d52d      	bpl.n	af5a <__sflush_r+0xc2>
    aefe:	2300      	movs	r3, #0
    af00:	6063      	str	r3, [r4, #4]
    af02:	6923      	ldr	r3, [r4, #16]
    af04:	6023      	str	r3, [r4, #0]
    af06:	04cb      	lsls	r3, r1, #19
    af08:	d505      	bpl.n	af16 <__sflush_r+0x7e>
    af0a:	1c43      	adds	r3, r0, #1
    af0c:	d102      	bne.n	af14 <__sflush_r+0x7c>
    af0e:	682b      	ldr	r3, [r5, #0]
    af10:	2b00      	cmp	r3, #0
    af12:	d100      	bne.n	af16 <__sflush_r+0x7e>
    af14:	6560      	str	r0, [r4, #84]	; 0x54
    af16:	6b61      	ldr	r1, [r4, #52]	; 0x34
    af18:	602e      	str	r6, [r5, #0]
    af1a:	2900      	cmp	r1, #0
    af1c:	d0c8      	beq.n	aeb0 <__sflush_r+0x18>
    af1e:	0023      	movs	r3, r4
    af20:	3344      	adds	r3, #68	; 0x44
    af22:	4299      	cmp	r1, r3
    af24:	d002      	beq.n	af2c <__sflush_r+0x94>
    af26:	0028      	movs	r0, r5
    af28:	f7fe f904 	bl	9134 <_free_r>
    af2c:	2000      	movs	r0, #0
    af2e:	6360      	str	r0, [r4, #52]	; 0x34
    af30:	e7bf      	b.n	aeb2 <__sflush_r+0x1a>
    af32:	2301      	movs	r3, #1
    af34:	6a21      	ldr	r1, [r4, #32]
    af36:	0028      	movs	r0, r5
    af38:	47b8      	blx	r7
    af3a:	1c43      	adds	r3, r0, #1
    af3c:	d1c5      	bne.n	aeca <__sflush_r+0x32>
    af3e:	682b      	ldr	r3, [r5, #0]
    af40:	2b00      	cmp	r3, #0
    af42:	d0c2      	beq.n	aeca <__sflush_r+0x32>
    af44:	2b1d      	cmp	r3, #29
    af46:	d001      	beq.n	af4c <__sflush_r+0xb4>
    af48:	2b16      	cmp	r3, #22
    af4a:	d101      	bne.n	af50 <__sflush_r+0xb8>
    af4c:	602e      	str	r6, [r5, #0]
    af4e:	e7af      	b.n	aeb0 <__sflush_r+0x18>
    af50:	2340      	movs	r3, #64	; 0x40
    af52:	89a2      	ldrh	r2, [r4, #12]
    af54:	4313      	orrs	r3, r2
    af56:	81a3      	strh	r3, [r4, #12]
    af58:	e7ab      	b.n	aeb2 <__sflush_r+0x1a>
    af5a:	2340      	movs	r3, #64	; 0x40
    af5c:	430b      	orrs	r3, r1
    af5e:	2001      	movs	r0, #1
    af60:	81a3      	strh	r3, [r4, #12]
    af62:	4240      	negs	r0, r0
    af64:	e7a5      	b.n	aeb2 <__sflush_r+0x1a>
    af66:	690f      	ldr	r7, [r1, #16]
    af68:	2f00      	cmp	r7, #0
    af6a:	d0a1      	beq.n	aeb0 <__sflush_r+0x18>
    af6c:	680b      	ldr	r3, [r1, #0]
    af6e:	600f      	str	r7, [r1, #0]
    af70:	1bdb      	subs	r3, r3, r7
    af72:	9301      	str	r3, [sp, #4]
    af74:	2300      	movs	r3, #0
    af76:	0792      	lsls	r2, r2, #30
    af78:	d100      	bne.n	af7c <__sflush_r+0xe4>
    af7a:	694b      	ldr	r3, [r1, #20]
    af7c:	60a3      	str	r3, [r4, #8]
    af7e:	9b01      	ldr	r3, [sp, #4]
    af80:	2b00      	cmp	r3, #0
    af82:	dc00      	bgt.n	af86 <__sflush_r+0xee>
    af84:	e794      	b.n	aeb0 <__sflush_r+0x18>
    af86:	9b01      	ldr	r3, [sp, #4]
    af88:	003a      	movs	r2, r7
    af8a:	6a21      	ldr	r1, [r4, #32]
    af8c:	0028      	movs	r0, r5
    af8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    af90:	47b0      	blx	r6
    af92:	2800      	cmp	r0, #0
    af94:	dc03      	bgt.n	af9e <__sflush_r+0x106>
    af96:	2340      	movs	r3, #64	; 0x40
    af98:	89a2      	ldrh	r2, [r4, #12]
    af9a:	4313      	orrs	r3, r2
    af9c:	e7df      	b.n	af5e <__sflush_r+0xc6>
    af9e:	9b01      	ldr	r3, [sp, #4]
    afa0:	183f      	adds	r7, r7, r0
    afa2:	1a1b      	subs	r3, r3, r0
    afa4:	9301      	str	r3, [sp, #4]
    afa6:	e7ea      	b.n	af7e <__sflush_r+0xe6>
    afa8:	20400001 	.word	0x20400001

0000afac <_fflush_r>:
    afac:	690b      	ldr	r3, [r1, #16]
    afae:	b570      	push	{r4, r5, r6, lr}
    afb0:	0005      	movs	r5, r0
    afb2:	000c      	movs	r4, r1
    afb4:	2b00      	cmp	r3, #0
    afb6:	d101      	bne.n	afbc <_fflush_r+0x10>
    afb8:	2000      	movs	r0, #0
    afba:	bd70      	pop	{r4, r5, r6, pc}
    afbc:	2800      	cmp	r0, #0
    afbe:	d004      	beq.n	afca <_fflush_r+0x1e>
    afc0:	6983      	ldr	r3, [r0, #24]
    afc2:	2b00      	cmp	r3, #0
    afc4:	d101      	bne.n	afca <_fflush_r+0x1e>
    afc6:	f000 f85f 	bl	b088 <__sinit>
    afca:	4b0b      	ldr	r3, [pc, #44]	; (aff8 <_fflush_r+0x4c>)
    afcc:	429c      	cmp	r4, r3
    afce:	d109      	bne.n	afe4 <_fflush_r+0x38>
    afd0:	686c      	ldr	r4, [r5, #4]
    afd2:	220c      	movs	r2, #12
    afd4:	5ea3      	ldrsh	r3, [r4, r2]
    afd6:	2b00      	cmp	r3, #0
    afd8:	d0ee      	beq.n	afb8 <_fflush_r+0xc>
    afda:	0021      	movs	r1, r4
    afdc:	0028      	movs	r0, r5
    afde:	f7ff ff5b 	bl	ae98 <__sflush_r>
    afe2:	e7ea      	b.n	afba <_fflush_r+0xe>
    afe4:	4b05      	ldr	r3, [pc, #20]	; (affc <_fflush_r+0x50>)
    afe6:	429c      	cmp	r4, r3
    afe8:	d101      	bne.n	afee <_fflush_r+0x42>
    afea:	68ac      	ldr	r4, [r5, #8]
    afec:	e7f1      	b.n	afd2 <_fflush_r+0x26>
    afee:	4b04      	ldr	r3, [pc, #16]	; (b000 <_fflush_r+0x54>)
    aff0:	429c      	cmp	r4, r3
    aff2:	d1ee      	bne.n	afd2 <_fflush_r+0x26>
    aff4:	68ec      	ldr	r4, [r5, #12]
    aff6:	e7ec      	b.n	afd2 <_fflush_r+0x26>
    aff8:	0000f090 	.word	0x0000f090
    affc:	0000f0b0 	.word	0x0000f0b0
    b000:	0000f070 	.word	0x0000f070

0000b004 <_cleanup_r>:
    b004:	b510      	push	{r4, lr}
    b006:	4902      	ldr	r1, [pc, #8]	; (b010 <_cleanup_r+0xc>)
    b008:	f000 f8b2 	bl	b170 <_fwalk_reent>
    b00c:	bd10      	pop	{r4, pc}
    b00e:	46c0      	nop			; (mov r8, r8)
    b010:	0000afad 	.word	0x0000afad

0000b014 <std.isra.0>:
    b014:	2300      	movs	r3, #0
    b016:	b510      	push	{r4, lr}
    b018:	0004      	movs	r4, r0
    b01a:	6003      	str	r3, [r0, #0]
    b01c:	6043      	str	r3, [r0, #4]
    b01e:	6083      	str	r3, [r0, #8]
    b020:	8181      	strh	r1, [r0, #12]
    b022:	6643      	str	r3, [r0, #100]	; 0x64
    b024:	81c2      	strh	r2, [r0, #14]
    b026:	6103      	str	r3, [r0, #16]
    b028:	6143      	str	r3, [r0, #20]
    b02a:	6183      	str	r3, [r0, #24]
    b02c:	0019      	movs	r1, r3
    b02e:	2208      	movs	r2, #8
    b030:	305c      	adds	r0, #92	; 0x5c
    b032:	f7fe f876 	bl	9122 <memset>
    b036:	4b05      	ldr	r3, [pc, #20]	; (b04c <std.isra.0+0x38>)
    b038:	6224      	str	r4, [r4, #32]
    b03a:	6263      	str	r3, [r4, #36]	; 0x24
    b03c:	4b04      	ldr	r3, [pc, #16]	; (b050 <std.isra.0+0x3c>)
    b03e:	62a3      	str	r3, [r4, #40]	; 0x28
    b040:	4b04      	ldr	r3, [pc, #16]	; (b054 <std.isra.0+0x40>)
    b042:	62e3      	str	r3, [r4, #44]	; 0x2c
    b044:	4b04      	ldr	r3, [pc, #16]	; (b058 <std.isra.0+0x44>)
    b046:	6323      	str	r3, [r4, #48]	; 0x30
    b048:	bd10      	pop	{r4, pc}
    b04a:	46c0      	nop			; (mov r8, r8)
    b04c:	0000bb29 	.word	0x0000bb29
    b050:	0000bb51 	.word	0x0000bb51
    b054:	0000bb89 	.word	0x0000bb89
    b058:	0000bbb5 	.word	0x0000bbb5

0000b05c <__sfmoreglue>:
    b05c:	b570      	push	{r4, r5, r6, lr}
    b05e:	2568      	movs	r5, #104	; 0x68
    b060:	1e4a      	subs	r2, r1, #1
    b062:	4355      	muls	r5, r2
    b064:	000e      	movs	r6, r1
    b066:	0029      	movs	r1, r5
    b068:	3174      	adds	r1, #116	; 0x74
    b06a:	f7fe f8ad 	bl	91c8 <_malloc_r>
    b06e:	1e04      	subs	r4, r0, #0
    b070:	d008      	beq.n	b084 <__sfmoreglue+0x28>
    b072:	2100      	movs	r1, #0
    b074:	002a      	movs	r2, r5
    b076:	6001      	str	r1, [r0, #0]
    b078:	6046      	str	r6, [r0, #4]
    b07a:	300c      	adds	r0, #12
    b07c:	60a0      	str	r0, [r4, #8]
    b07e:	3268      	adds	r2, #104	; 0x68
    b080:	f7fe f84f 	bl	9122 <memset>
    b084:	0020      	movs	r0, r4
    b086:	bd70      	pop	{r4, r5, r6, pc}

0000b088 <__sinit>:
    b088:	6983      	ldr	r3, [r0, #24]
    b08a:	b513      	push	{r0, r1, r4, lr}
    b08c:	0004      	movs	r4, r0
    b08e:	2b00      	cmp	r3, #0
    b090:	d128      	bne.n	b0e4 <__sinit+0x5c>
    b092:	6483      	str	r3, [r0, #72]	; 0x48
    b094:	64c3      	str	r3, [r0, #76]	; 0x4c
    b096:	6503      	str	r3, [r0, #80]	; 0x50
    b098:	4b13      	ldr	r3, [pc, #76]	; (b0e8 <__sinit+0x60>)
    b09a:	4a14      	ldr	r2, [pc, #80]	; (b0ec <__sinit+0x64>)
    b09c:	681b      	ldr	r3, [r3, #0]
    b09e:	6282      	str	r2, [r0, #40]	; 0x28
    b0a0:	9301      	str	r3, [sp, #4]
    b0a2:	4298      	cmp	r0, r3
    b0a4:	d101      	bne.n	b0aa <__sinit+0x22>
    b0a6:	2301      	movs	r3, #1
    b0a8:	6183      	str	r3, [r0, #24]
    b0aa:	0020      	movs	r0, r4
    b0ac:	f000 f820 	bl	b0f0 <__sfp>
    b0b0:	6060      	str	r0, [r4, #4]
    b0b2:	0020      	movs	r0, r4
    b0b4:	f000 f81c 	bl	b0f0 <__sfp>
    b0b8:	60a0      	str	r0, [r4, #8]
    b0ba:	0020      	movs	r0, r4
    b0bc:	f000 f818 	bl	b0f0 <__sfp>
    b0c0:	2200      	movs	r2, #0
    b0c2:	60e0      	str	r0, [r4, #12]
    b0c4:	2104      	movs	r1, #4
    b0c6:	6860      	ldr	r0, [r4, #4]
    b0c8:	f7ff ffa4 	bl	b014 <std.isra.0>
    b0cc:	2201      	movs	r2, #1
    b0ce:	2109      	movs	r1, #9
    b0d0:	68a0      	ldr	r0, [r4, #8]
    b0d2:	f7ff ff9f 	bl	b014 <std.isra.0>
    b0d6:	2202      	movs	r2, #2
    b0d8:	2112      	movs	r1, #18
    b0da:	68e0      	ldr	r0, [r4, #12]
    b0dc:	f7ff ff9a 	bl	b014 <std.isra.0>
    b0e0:	2301      	movs	r3, #1
    b0e2:	61a3      	str	r3, [r4, #24]
    b0e4:	bd13      	pop	{r0, r1, r4, pc}
    b0e6:	46c0      	nop			; (mov r8, r8)
    b0e8:	0000ef20 	.word	0x0000ef20
    b0ec:	0000b005 	.word	0x0000b005

0000b0f0 <__sfp>:
    b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0f2:	4b1e      	ldr	r3, [pc, #120]	; (b16c <__sfp+0x7c>)
    b0f4:	0007      	movs	r7, r0
    b0f6:	681e      	ldr	r6, [r3, #0]
    b0f8:	69b3      	ldr	r3, [r6, #24]
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d102      	bne.n	b104 <__sfp+0x14>
    b0fe:	0030      	movs	r0, r6
    b100:	f7ff ffc2 	bl	b088 <__sinit>
    b104:	3648      	adds	r6, #72	; 0x48
    b106:	68b4      	ldr	r4, [r6, #8]
    b108:	6873      	ldr	r3, [r6, #4]
    b10a:	3b01      	subs	r3, #1
    b10c:	d504      	bpl.n	b118 <__sfp+0x28>
    b10e:	6833      	ldr	r3, [r6, #0]
    b110:	2b00      	cmp	r3, #0
    b112:	d007      	beq.n	b124 <__sfp+0x34>
    b114:	6836      	ldr	r6, [r6, #0]
    b116:	e7f6      	b.n	b106 <__sfp+0x16>
    b118:	220c      	movs	r2, #12
    b11a:	5ea5      	ldrsh	r5, [r4, r2]
    b11c:	2d00      	cmp	r5, #0
    b11e:	d00d      	beq.n	b13c <__sfp+0x4c>
    b120:	3468      	adds	r4, #104	; 0x68
    b122:	e7f2      	b.n	b10a <__sfp+0x1a>
    b124:	2104      	movs	r1, #4
    b126:	0038      	movs	r0, r7
    b128:	f7ff ff98 	bl	b05c <__sfmoreglue>
    b12c:	6030      	str	r0, [r6, #0]
    b12e:	2800      	cmp	r0, #0
    b130:	d1f0      	bne.n	b114 <__sfp+0x24>
    b132:	230c      	movs	r3, #12
    b134:	0004      	movs	r4, r0
    b136:	603b      	str	r3, [r7, #0]
    b138:	0020      	movs	r0, r4
    b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b13c:	2301      	movs	r3, #1
    b13e:	0020      	movs	r0, r4
    b140:	425b      	negs	r3, r3
    b142:	81e3      	strh	r3, [r4, #14]
    b144:	3302      	adds	r3, #2
    b146:	81a3      	strh	r3, [r4, #12]
    b148:	6665      	str	r5, [r4, #100]	; 0x64
    b14a:	6025      	str	r5, [r4, #0]
    b14c:	60a5      	str	r5, [r4, #8]
    b14e:	6065      	str	r5, [r4, #4]
    b150:	6125      	str	r5, [r4, #16]
    b152:	6165      	str	r5, [r4, #20]
    b154:	61a5      	str	r5, [r4, #24]
    b156:	2208      	movs	r2, #8
    b158:	0029      	movs	r1, r5
    b15a:	305c      	adds	r0, #92	; 0x5c
    b15c:	f7fd ffe1 	bl	9122 <memset>
    b160:	6365      	str	r5, [r4, #52]	; 0x34
    b162:	63a5      	str	r5, [r4, #56]	; 0x38
    b164:	64a5      	str	r5, [r4, #72]	; 0x48
    b166:	64e5      	str	r5, [r4, #76]	; 0x4c
    b168:	e7e6      	b.n	b138 <__sfp+0x48>
    b16a:	46c0      	nop			; (mov r8, r8)
    b16c:	0000ef20 	.word	0x0000ef20

0000b170 <_fwalk_reent>:
    b170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b172:	0004      	movs	r4, r0
    b174:	0007      	movs	r7, r0
    b176:	2600      	movs	r6, #0
    b178:	9101      	str	r1, [sp, #4]
    b17a:	3448      	adds	r4, #72	; 0x48
    b17c:	2c00      	cmp	r4, #0
    b17e:	d101      	bne.n	b184 <_fwalk_reent+0x14>
    b180:	0030      	movs	r0, r6
    b182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b184:	6863      	ldr	r3, [r4, #4]
    b186:	68a5      	ldr	r5, [r4, #8]
    b188:	9300      	str	r3, [sp, #0]
    b18a:	9b00      	ldr	r3, [sp, #0]
    b18c:	3b01      	subs	r3, #1
    b18e:	9300      	str	r3, [sp, #0]
    b190:	d501      	bpl.n	b196 <_fwalk_reent+0x26>
    b192:	6824      	ldr	r4, [r4, #0]
    b194:	e7f2      	b.n	b17c <_fwalk_reent+0xc>
    b196:	89ab      	ldrh	r3, [r5, #12]
    b198:	2b01      	cmp	r3, #1
    b19a:	d908      	bls.n	b1ae <_fwalk_reent+0x3e>
    b19c:	220e      	movs	r2, #14
    b19e:	5eab      	ldrsh	r3, [r5, r2]
    b1a0:	3301      	adds	r3, #1
    b1a2:	d004      	beq.n	b1ae <_fwalk_reent+0x3e>
    b1a4:	0029      	movs	r1, r5
    b1a6:	0038      	movs	r0, r7
    b1a8:	9b01      	ldr	r3, [sp, #4]
    b1aa:	4798      	blx	r3
    b1ac:	4306      	orrs	r6, r0
    b1ae:	3568      	adds	r5, #104	; 0x68
    b1b0:	e7eb      	b.n	b18a <_fwalk_reent+0x1a>
	...

0000b1b4 <_localeconv_r>:
    b1b4:	4b03      	ldr	r3, [pc, #12]	; (b1c4 <_localeconv_r+0x10>)
    b1b6:	681b      	ldr	r3, [r3, #0]
    b1b8:	6a18      	ldr	r0, [r3, #32]
    b1ba:	2800      	cmp	r0, #0
    b1bc:	d100      	bne.n	b1c0 <_localeconv_r+0xc>
    b1be:	4802      	ldr	r0, [pc, #8]	; (b1c8 <_localeconv_r+0x14>)
    b1c0:	30f0      	adds	r0, #240	; 0xf0
    b1c2:	4770      	bx	lr
    b1c4:	20000078 	.word	0x20000078
    b1c8:	200000dc 	.word	0x200000dc

0000b1cc <__swhatbuf_r>:
    b1cc:	b570      	push	{r4, r5, r6, lr}
    b1ce:	000e      	movs	r6, r1
    b1d0:	001d      	movs	r5, r3
    b1d2:	230e      	movs	r3, #14
    b1d4:	5ec9      	ldrsh	r1, [r1, r3]
    b1d6:	b090      	sub	sp, #64	; 0x40
    b1d8:	0014      	movs	r4, r2
    b1da:	2900      	cmp	r1, #0
    b1dc:	da07      	bge.n	b1ee <__swhatbuf_r+0x22>
    b1de:	2300      	movs	r3, #0
    b1e0:	602b      	str	r3, [r5, #0]
    b1e2:	89b3      	ldrh	r3, [r6, #12]
    b1e4:	061b      	lsls	r3, r3, #24
    b1e6:	d411      	bmi.n	b20c <__swhatbuf_r+0x40>
    b1e8:	2380      	movs	r3, #128	; 0x80
    b1ea:	00db      	lsls	r3, r3, #3
    b1ec:	e00f      	b.n	b20e <__swhatbuf_r+0x42>
    b1ee:	aa01      	add	r2, sp, #4
    b1f0:	f000 fd0c 	bl	bc0c <_fstat_r>
    b1f4:	2800      	cmp	r0, #0
    b1f6:	dbf2      	blt.n	b1de <__swhatbuf_r+0x12>
    b1f8:	22f0      	movs	r2, #240	; 0xf0
    b1fa:	9b02      	ldr	r3, [sp, #8]
    b1fc:	0212      	lsls	r2, r2, #8
    b1fe:	4013      	ands	r3, r2
    b200:	4a05      	ldr	r2, [pc, #20]	; (b218 <__swhatbuf_r+0x4c>)
    b202:	189b      	adds	r3, r3, r2
    b204:	425a      	negs	r2, r3
    b206:	4153      	adcs	r3, r2
    b208:	602b      	str	r3, [r5, #0]
    b20a:	e7ed      	b.n	b1e8 <__swhatbuf_r+0x1c>
    b20c:	2340      	movs	r3, #64	; 0x40
    b20e:	2000      	movs	r0, #0
    b210:	6023      	str	r3, [r4, #0]
    b212:	b010      	add	sp, #64	; 0x40
    b214:	bd70      	pop	{r4, r5, r6, pc}
    b216:	46c0      	nop			; (mov r8, r8)
    b218:	ffffe000 	.word	0xffffe000

0000b21c <__smakebuf_r>:
    b21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b21e:	2602      	movs	r6, #2
    b220:	898b      	ldrh	r3, [r1, #12]
    b222:	0005      	movs	r5, r0
    b224:	000c      	movs	r4, r1
    b226:	4233      	tst	r3, r6
    b228:	d006      	beq.n	b238 <__smakebuf_r+0x1c>
    b22a:	0023      	movs	r3, r4
    b22c:	3347      	adds	r3, #71	; 0x47
    b22e:	6023      	str	r3, [r4, #0]
    b230:	6123      	str	r3, [r4, #16]
    b232:	2301      	movs	r3, #1
    b234:	6163      	str	r3, [r4, #20]
    b236:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b238:	ab01      	add	r3, sp, #4
    b23a:	466a      	mov	r2, sp
    b23c:	f7ff ffc6 	bl	b1cc <__swhatbuf_r>
    b240:	9900      	ldr	r1, [sp, #0]
    b242:	0007      	movs	r7, r0
    b244:	0028      	movs	r0, r5
    b246:	f7fd ffbf 	bl	91c8 <_malloc_r>
    b24a:	2800      	cmp	r0, #0
    b24c:	d108      	bne.n	b260 <__smakebuf_r+0x44>
    b24e:	220c      	movs	r2, #12
    b250:	5ea3      	ldrsh	r3, [r4, r2]
    b252:	059a      	lsls	r2, r3, #22
    b254:	d4ef      	bmi.n	b236 <__smakebuf_r+0x1a>
    b256:	2203      	movs	r2, #3
    b258:	4393      	bics	r3, r2
    b25a:	431e      	orrs	r6, r3
    b25c:	81a6      	strh	r6, [r4, #12]
    b25e:	e7e4      	b.n	b22a <__smakebuf_r+0xe>
    b260:	4b0f      	ldr	r3, [pc, #60]	; (b2a0 <__smakebuf_r+0x84>)
    b262:	62ab      	str	r3, [r5, #40]	; 0x28
    b264:	2380      	movs	r3, #128	; 0x80
    b266:	89a2      	ldrh	r2, [r4, #12]
    b268:	6020      	str	r0, [r4, #0]
    b26a:	4313      	orrs	r3, r2
    b26c:	81a3      	strh	r3, [r4, #12]
    b26e:	9b00      	ldr	r3, [sp, #0]
    b270:	6120      	str	r0, [r4, #16]
    b272:	6163      	str	r3, [r4, #20]
    b274:	9b01      	ldr	r3, [sp, #4]
    b276:	2b00      	cmp	r3, #0
    b278:	d00d      	beq.n	b296 <__smakebuf_r+0x7a>
    b27a:	230e      	movs	r3, #14
    b27c:	5ee1      	ldrsh	r1, [r4, r3]
    b27e:	0028      	movs	r0, r5
    b280:	f000 fcd6 	bl	bc30 <_isatty_r>
    b284:	2800      	cmp	r0, #0
    b286:	d006      	beq.n	b296 <__smakebuf_r+0x7a>
    b288:	2203      	movs	r2, #3
    b28a:	89a3      	ldrh	r3, [r4, #12]
    b28c:	4393      	bics	r3, r2
    b28e:	001a      	movs	r2, r3
    b290:	2301      	movs	r3, #1
    b292:	4313      	orrs	r3, r2
    b294:	81a3      	strh	r3, [r4, #12]
    b296:	89a0      	ldrh	r0, [r4, #12]
    b298:	4338      	orrs	r0, r7
    b29a:	81a0      	strh	r0, [r4, #12]
    b29c:	e7cb      	b.n	b236 <__smakebuf_r+0x1a>
    b29e:	46c0      	nop			; (mov r8, r8)
    b2a0:	0000b005 	.word	0x0000b005

0000b2a4 <memchr>:
    b2a4:	b2c9      	uxtb	r1, r1
    b2a6:	1882      	adds	r2, r0, r2
    b2a8:	4290      	cmp	r0, r2
    b2aa:	d101      	bne.n	b2b0 <memchr+0xc>
    b2ac:	2000      	movs	r0, #0
    b2ae:	4770      	bx	lr
    b2b0:	7803      	ldrb	r3, [r0, #0]
    b2b2:	428b      	cmp	r3, r1
    b2b4:	d0fb      	beq.n	b2ae <memchr+0xa>
    b2b6:	3001      	adds	r0, #1
    b2b8:	e7f6      	b.n	b2a8 <memchr+0x4>

0000b2ba <__malloc_lock>:
    b2ba:	4770      	bx	lr

0000b2bc <__malloc_unlock>:
    b2bc:	4770      	bx	lr

0000b2be <_Balloc>:
    b2be:	b570      	push	{r4, r5, r6, lr}
    b2c0:	6a46      	ldr	r6, [r0, #36]	; 0x24
    b2c2:	0004      	movs	r4, r0
    b2c4:	000d      	movs	r5, r1
    b2c6:	2e00      	cmp	r6, #0
    b2c8:	d107      	bne.n	b2da <_Balloc+0x1c>
    b2ca:	2010      	movs	r0, #16
    b2cc:	f7fd ff04 	bl	90d8 <malloc>
    b2d0:	6260      	str	r0, [r4, #36]	; 0x24
    b2d2:	6046      	str	r6, [r0, #4]
    b2d4:	6086      	str	r6, [r0, #8]
    b2d6:	6006      	str	r6, [r0, #0]
    b2d8:	60c6      	str	r6, [r0, #12]
    b2da:	6a66      	ldr	r6, [r4, #36]	; 0x24
    b2dc:	68f3      	ldr	r3, [r6, #12]
    b2de:	2b00      	cmp	r3, #0
    b2e0:	d013      	beq.n	b30a <_Balloc+0x4c>
    b2e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b2e4:	00aa      	lsls	r2, r5, #2
    b2e6:	68db      	ldr	r3, [r3, #12]
    b2e8:	189b      	adds	r3, r3, r2
    b2ea:	6818      	ldr	r0, [r3, #0]
    b2ec:	2800      	cmp	r0, #0
    b2ee:	d118      	bne.n	b322 <_Balloc+0x64>
    b2f0:	2101      	movs	r1, #1
    b2f2:	000e      	movs	r6, r1
    b2f4:	40ae      	lsls	r6, r5
    b2f6:	1d72      	adds	r2, r6, #5
    b2f8:	0092      	lsls	r2, r2, #2
    b2fa:	0020      	movs	r0, r4
    b2fc:	f000 fac2 	bl	b884 <_calloc_r>
    b300:	2800      	cmp	r0, #0
    b302:	d00c      	beq.n	b31e <_Balloc+0x60>
    b304:	6045      	str	r5, [r0, #4]
    b306:	6086      	str	r6, [r0, #8]
    b308:	e00d      	b.n	b326 <_Balloc+0x68>
    b30a:	2221      	movs	r2, #33	; 0x21
    b30c:	2104      	movs	r1, #4
    b30e:	0020      	movs	r0, r4
    b310:	f000 fab8 	bl	b884 <_calloc_r>
    b314:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b316:	60f0      	str	r0, [r6, #12]
    b318:	68db      	ldr	r3, [r3, #12]
    b31a:	2b00      	cmp	r3, #0
    b31c:	d1e1      	bne.n	b2e2 <_Balloc+0x24>
    b31e:	2000      	movs	r0, #0
    b320:	bd70      	pop	{r4, r5, r6, pc}
    b322:	6802      	ldr	r2, [r0, #0]
    b324:	601a      	str	r2, [r3, #0]
    b326:	2300      	movs	r3, #0
    b328:	6103      	str	r3, [r0, #16]
    b32a:	60c3      	str	r3, [r0, #12]
    b32c:	e7f8      	b.n	b320 <_Balloc+0x62>

0000b32e <_Bfree>:
    b32e:	b570      	push	{r4, r5, r6, lr}
    b330:	6a44      	ldr	r4, [r0, #36]	; 0x24
    b332:	0006      	movs	r6, r0
    b334:	000d      	movs	r5, r1
    b336:	2c00      	cmp	r4, #0
    b338:	d107      	bne.n	b34a <_Bfree+0x1c>
    b33a:	2010      	movs	r0, #16
    b33c:	f7fd fecc 	bl	90d8 <malloc>
    b340:	6270      	str	r0, [r6, #36]	; 0x24
    b342:	6044      	str	r4, [r0, #4]
    b344:	6084      	str	r4, [r0, #8]
    b346:	6004      	str	r4, [r0, #0]
    b348:	60c4      	str	r4, [r0, #12]
    b34a:	2d00      	cmp	r5, #0
    b34c:	d007      	beq.n	b35e <_Bfree+0x30>
    b34e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b350:	686a      	ldr	r2, [r5, #4]
    b352:	68db      	ldr	r3, [r3, #12]
    b354:	0092      	lsls	r2, r2, #2
    b356:	189b      	adds	r3, r3, r2
    b358:	681a      	ldr	r2, [r3, #0]
    b35a:	602a      	str	r2, [r5, #0]
    b35c:	601d      	str	r5, [r3, #0]
    b35e:	bd70      	pop	{r4, r5, r6, pc}

0000b360 <__multadd>:
    b360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b362:	001e      	movs	r6, r3
    b364:	2314      	movs	r3, #20
    b366:	469c      	mov	ip, r3
    b368:	0007      	movs	r7, r0
    b36a:	000c      	movs	r4, r1
    b36c:	2000      	movs	r0, #0
    b36e:	690d      	ldr	r5, [r1, #16]
    b370:	448c      	add	ip, r1
    b372:	4663      	mov	r3, ip
    b374:	8819      	ldrh	r1, [r3, #0]
    b376:	681b      	ldr	r3, [r3, #0]
    b378:	4351      	muls	r1, r2
    b37a:	0c1b      	lsrs	r3, r3, #16
    b37c:	4353      	muls	r3, r2
    b37e:	1989      	adds	r1, r1, r6
    b380:	0c0e      	lsrs	r6, r1, #16
    b382:	199b      	adds	r3, r3, r6
    b384:	b289      	uxth	r1, r1
    b386:	0c1e      	lsrs	r6, r3, #16
    b388:	041b      	lsls	r3, r3, #16
    b38a:	185b      	adds	r3, r3, r1
    b38c:	4661      	mov	r1, ip
    b38e:	3001      	adds	r0, #1
    b390:	c108      	stmia	r1!, {r3}
    b392:	468c      	mov	ip, r1
    b394:	4285      	cmp	r5, r0
    b396:	dcec      	bgt.n	b372 <__multadd+0x12>
    b398:	2e00      	cmp	r6, #0
    b39a:	d01b      	beq.n	b3d4 <__multadd+0x74>
    b39c:	68a3      	ldr	r3, [r4, #8]
    b39e:	429d      	cmp	r5, r3
    b3a0:	db12      	blt.n	b3c8 <__multadd+0x68>
    b3a2:	6863      	ldr	r3, [r4, #4]
    b3a4:	0038      	movs	r0, r7
    b3a6:	1c59      	adds	r1, r3, #1
    b3a8:	f7ff ff89 	bl	b2be <_Balloc>
    b3ac:	0021      	movs	r1, r4
    b3ae:	6923      	ldr	r3, [r4, #16]
    b3b0:	9001      	str	r0, [sp, #4]
    b3b2:	1c9a      	adds	r2, r3, #2
    b3b4:	0092      	lsls	r2, r2, #2
    b3b6:	310c      	adds	r1, #12
    b3b8:	300c      	adds	r0, #12
    b3ba:	f7fd fea9 	bl	9110 <memcpy>
    b3be:	0021      	movs	r1, r4
    b3c0:	0038      	movs	r0, r7
    b3c2:	f7ff ffb4 	bl	b32e <_Bfree>
    b3c6:	9c01      	ldr	r4, [sp, #4]
    b3c8:	1d2b      	adds	r3, r5, #4
    b3ca:	009b      	lsls	r3, r3, #2
    b3cc:	18e3      	adds	r3, r4, r3
    b3ce:	3501      	adds	r5, #1
    b3d0:	605e      	str	r6, [r3, #4]
    b3d2:	6125      	str	r5, [r4, #16]
    b3d4:	0020      	movs	r0, r4
    b3d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000b3d8 <__hi0bits>:
    b3d8:	0003      	movs	r3, r0
    b3da:	0c02      	lsrs	r2, r0, #16
    b3dc:	2000      	movs	r0, #0
    b3de:	4282      	cmp	r2, r0
    b3e0:	d101      	bne.n	b3e6 <__hi0bits+0xe>
    b3e2:	041b      	lsls	r3, r3, #16
    b3e4:	3010      	adds	r0, #16
    b3e6:	0e1a      	lsrs	r2, r3, #24
    b3e8:	d101      	bne.n	b3ee <__hi0bits+0x16>
    b3ea:	3008      	adds	r0, #8
    b3ec:	021b      	lsls	r3, r3, #8
    b3ee:	0f1a      	lsrs	r2, r3, #28
    b3f0:	d101      	bne.n	b3f6 <__hi0bits+0x1e>
    b3f2:	3004      	adds	r0, #4
    b3f4:	011b      	lsls	r3, r3, #4
    b3f6:	0f9a      	lsrs	r2, r3, #30
    b3f8:	d101      	bne.n	b3fe <__hi0bits+0x26>
    b3fa:	3002      	adds	r0, #2
    b3fc:	009b      	lsls	r3, r3, #2
    b3fe:	2b00      	cmp	r3, #0
    b400:	db03      	blt.n	b40a <__hi0bits+0x32>
    b402:	3001      	adds	r0, #1
    b404:	005b      	lsls	r3, r3, #1
    b406:	d400      	bmi.n	b40a <__hi0bits+0x32>
    b408:	2020      	movs	r0, #32
    b40a:	4770      	bx	lr

0000b40c <__lo0bits>:
    b40c:	2207      	movs	r2, #7
    b40e:	6803      	ldr	r3, [r0, #0]
    b410:	b510      	push	{r4, lr}
    b412:	0001      	movs	r1, r0
    b414:	401a      	ands	r2, r3
    b416:	d00d      	beq.n	b434 <__lo0bits+0x28>
    b418:	2401      	movs	r4, #1
    b41a:	2000      	movs	r0, #0
    b41c:	4223      	tst	r3, r4
    b41e:	d105      	bne.n	b42c <__lo0bits+0x20>
    b420:	3002      	adds	r0, #2
    b422:	4203      	tst	r3, r0
    b424:	d003      	beq.n	b42e <__lo0bits+0x22>
    b426:	40e3      	lsrs	r3, r4
    b428:	0020      	movs	r0, r4
    b42a:	600b      	str	r3, [r1, #0]
    b42c:	bd10      	pop	{r4, pc}
    b42e:	089b      	lsrs	r3, r3, #2
    b430:	600b      	str	r3, [r1, #0]
    b432:	e7fb      	b.n	b42c <__lo0bits+0x20>
    b434:	b29c      	uxth	r4, r3
    b436:	0010      	movs	r0, r2
    b438:	2c00      	cmp	r4, #0
    b43a:	d101      	bne.n	b440 <__lo0bits+0x34>
    b43c:	2010      	movs	r0, #16
    b43e:	0c1b      	lsrs	r3, r3, #16
    b440:	b2da      	uxtb	r2, r3
    b442:	2a00      	cmp	r2, #0
    b444:	d101      	bne.n	b44a <__lo0bits+0x3e>
    b446:	3008      	adds	r0, #8
    b448:	0a1b      	lsrs	r3, r3, #8
    b44a:	071a      	lsls	r2, r3, #28
    b44c:	d101      	bne.n	b452 <__lo0bits+0x46>
    b44e:	3004      	adds	r0, #4
    b450:	091b      	lsrs	r3, r3, #4
    b452:	079a      	lsls	r2, r3, #30
    b454:	d101      	bne.n	b45a <__lo0bits+0x4e>
    b456:	3002      	adds	r0, #2
    b458:	089b      	lsrs	r3, r3, #2
    b45a:	07da      	lsls	r2, r3, #31
    b45c:	d4e8      	bmi.n	b430 <__lo0bits+0x24>
    b45e:	085b      	lsrs	r3, r3, #1
    b460:	d001      	beq.n	b466 <__lo0bits+0x5a>
    b462:	3001      	adds	r0, #1
    b464:	e7e4      	b.n	b430 <__lo0bits+0x24>
    b466:	2020      	movs	r0, #32
    b468:	e7e0      	b.n	b42c <__lo0bits+0x20>

0000b46a <__i2b>:
    b46a:	b510      	push	{r4, lr}
    b46c:	000c      	movs	r4, r1
    b46e:	2101      	movs	r1, #1
    b470:	f7ff ff25 	bl	b2be <_Balloc>
    b474:	2301      	movs	r3, #1
    b476:	6144      	str	r4, [r0, #20]
    b478:	6103      	str	r3, [r0, #16]
    b47a:	bd10      	pop	{r4, pc}

0000b47c <__multiply>:
    b47c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b47e:	690b      	ldr	r3, [r1, #16]
    b480:	0015      	movs	r5, r2
    b482:	6912      	ldr	r2, [r2, #16]
    b484:	b089      	sub	sp, #36	; 0x24
    b486:	000c      	movs	r4, r1
    b488:	4293      	cmp	r3, r2
    b48a:	da01      	bge.n	b490 <__multiply+0x14>
    b48c:	002c      	movs	r4, r5
    b48e:	000d      	movs	r5, r1
    b490:	6927      	ldr	r7, [r4, #16]
    b492:	692e      	ldr	r6, [r5, #16]
    b494:	68a2      	ldr	r2, [r4, #8]
    b496:	19bb      	adds	r3, r7, r6
    b498:	6861      	ldr	r1, [r4, #4]
    b49a:	9301      	str	r3, [sp, #4]
    b49c:	4293      	cmp	r3, r2
    b49e:	dd00      	ble.n	b4a2 <__multiply+0x26>
    b4a0:	3101      	adds	r1, #1
    b4a2:	f7ff ff0c 	bl	b2be <_Balloc>
    b4a6:	0003      	movs	r3, r0
    b4a8:	3314      	adds	r3, #20
    b4aa:	9300      	str	r3, [sp, #0]
    b4ac:	9a00      	ldr	r2, [sp, #0]
    b4ae:	19bb      	adds	r3, r7, r6
    b4b0:	4694      	mov	ip, r2
    b4b2:	009b      	lsls	r3, r3, #2
    b4b4:	449c      	add	ip, r3
    b4b6:	0013      	movs	r3, r2
    b4b8:	2200      	movs	r2, #0
    b4ba:	9004      	str	r0, [sp, #16]
    b4bc:	4563      	cmp	r3, ip
    b4be:	d31c      	bcc.n	b4fa <__multiply+0x7e>
    b4c0:	002a      	movs	r2, r5
    b4c2:	3414      	adds	r4, #20
    b4c4:	00bf      	lsls	r7, r7, #2
    b4c6:	19e3      	adds	r3, r4, r7
    b4c8:	3214      	adds	r2, #20
    b4ca:	00b6      	lsls	r6, r6, #2
    b4cc:	9305      	str	r3, [sp, #20]
    b4ce:	1993      	adds	r3, r2, r6
    b4d0:	9402      	str	r4, [sp, #8]
    b4d2:	9306      	str	r3, [sp, #24]
    b4d4:	9b06      	ldr	r3, [sp, #24]
    b4d6:	429a      	cmp	r2, r3
    b4d8:	d311      	bcc.n	b4fe <__multiply+0x82>
    b4da:	9b01      	ldr	r3, [sp, #4]
    b4dc:	2b00      	cmp	r3, #0
    b4de:	dd06      	ble.n	b4ee <__multiply+0x72>
    b4e0:	2304      	movs	r3, #4
    b4e2:	425b      	negs	r3, r3
    b4e4:	449c      	add	ip, r3
    b4e6:	4663      	mov	r3, ip
    b4e8:	681b      	ldr	r3, [r3, #0]
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d051      	beq.n	b592 <__multiply+0x116>
    b4ee:	9b04      	ldr	r3, [sp, #16]
    b4f0:	9a01      	ldr	r2, [sp, #4]
    b4f2:	0018      	movs	r0, r3
    b4f4:	611a      	str	r2, [r3, #16]
    b4f6:	b009      	add	sp, #36	; 0x24
    b4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4fa:	c304      	stmia	r3!, {r2}
    b4fc:	e7de      	b.n	b4bc <__multiply+0x40>
    b4fe:	8814      	ldrh	r4, [r2, #0]
    b500:	2c00      	cmp	r4, #0
    b502:	d01e      	beq.n	b542 <__multiply+0xc6>
    b504:	2600      	movs	r6, #0
    b506:	9d00      	ldr	r5, [sp, #0]
    b508:	9f02      	ldr	r7, [sp, #8]
    b50a:	cf01      	ldmia	r7!, {r0}
    b50c:	9507      	str	r5, [sp, #28]
    b50e:	cd08      	ldmia	r5!, {r3}
    b510:	9303      	str	r3, [sp, #12]
    b512:	b283      	uxth	r3, r0
    b514:	4363      	muls	r3, r4
    b516:	0019      	movs	r1, r3
    b518:	466b      	mov	r3, sp
    b51a:	0c00      	lsrs	r0, r0, #16
    b51c:	899b      	ldrh	r3, [r3, #12]
    b51e:	4360      	muls	r0, r4
    b520:	18cb      	adds	r3, r1, r3
    b522:	9903      	ldr	r1, [sp, #12]
    b524:	199b      	adds	r3, r3, r6
    b526:	0c09      	lsrs	r1, r1, #16
    b528:	1841      	adds	r1, r0, r1
    b52a:	0c18      	lsrs	r0, r3, #16
    b52c:	1809      	adds	r1, r1, r0
    b52e:	0c0e      	lsrs	r6, r1, #16
    b530:	b29b      	uxth	r3, r3
    b532:	0409      	lsls	r1, r1, #16
    b534:	430b      	orrs	r3, r1
    b536:	9907      	ldr	r1, [sp, #28]
    b538:	600b      	str	r3, [r1, #0]
    b53a:	9b05      	ldr	r3, [sp, #20]
    b53c:	42bb      	cmp	r3, r7
    b53e:	d8e4      	bhi.n	b50a <__multiply+0x8e>
    b540:	602e      	str	r6, [r5, #0]
    b542:	6813      	ldr	r3, [r2, #0]
    b544:	0c1b      	lsrs	r3, r3, #16
    b546:	9303      	str	r3, [sp, #12]
    b548:	d01e      	beq.n	b588 <__multiply+0x10c>
    b54a:	2600      	movs	r6, #0
    b54c:	9b00      	ldr	r3, [sp, #0]
    b54e:	9c02      	ldr	r4, [sp, #8]
    b550:	681b      	ldr	r3, [r3, #0]
    b552:	9800      	ldr	r0, [sp, #0]
    b554:	0007      	movs	r7, r0
    b556:	8821      	ldrh	r1, [r4, #0]
    b558:	9d03      	ldr	r5, [sp, #12]
    b55a:	b29b      	uxth	r3, r3
    b55c:	4369      	muls	r1, r5
    b55e:	c820      	ldmia	r0!, {r5}
    b560:	0c2d      	lsrs	r5, r5, #16
    b562:	1949      	adds	r1, r1, r5
    b564:	198e      	adds	r6, r1, r6
    b566:	0431      	lsls	r1, r6, #16
    b568:	430b      	orrs	r3, r1
    b56a:	603b      	str	r3, [r7, #0]
    b56c:	cc08      	ldmia	r4!, {r3}
    b56e:	9903      	ldr	r1, [sp, #12]
    b570:	0c1b      	lsrs	r3, r3, #16
    b572:	434b      	muls	r3, r1
    b574:	6879      	ldr	r1, [r7, #4]
    b576:	0c36      	lsrs	r6, r6, #16
    b578:	b289      	uxth	r1, r1
    b57a:	185b      	adds	r3, r3, r1
    b57c:	9905      	ldr	r1, [sp, #20]
    b57e:	199b      	adds	r3, r3, r6
    b580:	0c1e      	lsrs	r6, r3, #16
    b582:	42a1      	cmp	r1, r4
    b584:	d8e6      	bhi.n	b554 <__multiply+0xd8>
    b586:	6003      	str	r3, [r0, #0]
    b588:	9b00      	ldr	r3, [sp, #0]
    b58a:	3204      	adds	r2, #4
    b58c:	3304      	adds	r3, #4
    b58e:	9300      	str	r3, [sp, #0]
    b590:	e7a0      	b.n	b4d4 <__multiply+0x58>
    b592:	9b01      	ldr	r3, [sp, #4]
    b594:	3b01      	subs	r3, #1
    b596:	9301      	str	r3, [sp, #4]
    b598:	e79f      	b.n	b4da <__multiply+0x5e>
	...

0000b59c <__pow5mult>:
    b59c:	2303      	movs	r3, #3
    b59e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b5a0:	4013      	ands	r3, r2
    b5a2:	0005      	movs	r5, r0
    b5a4:	000e      	movs	r6, r1
    b5a6:	0014      	movs	r4, r2
    b5a8:	2b00      	cmp	r3, #0
    b5aa:	d008      	beq.n	b5be <__pow5mult+0x22>
    b5ac:	4922      	ldr	r1, [pc, #136]	; (b638 <__pow5mult+0x9c>)
    b5ae:	3b01      	subs	r3, #1
    b5b0:	009a      	lsls	r2, r3, #2
    b5b2:	5852      	ldr	r2, [r2, r1]
    b5b4:	2300      	movs	r3, #0
    b5b6:	0031      	movs	r1, r6
    b5b8:	f7ff fed2 	bl	b360 <__multadd>
    b5bc:	0006      	movs	r6, r0
    b5be:	10a3      	asrs	r3, r4, #2
    b5c0:	9301      	str	r3, [sp, #4]
    b5c2:	d036      	beq.n	b632 <__pow5mult+0x96>
    b5c4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    b5c6:	2c00      	cmp	r4, #0
    b5c8:	d107      	bne.n	b5da <__pow5mult+0x3e>
    b5ca:	2010      	movs	r0, #16
    b5cc:	f7fd fd84 	bl	90d8 <malloc>
    b5d0:	6268      	str	r0, [r5, #36]	; 0x24
    b5d2:	6044      	str	r4, [r0, #4]
    b5d4:	6084      	str	r4, [r0, #8]
    b5d6:	6004      	str	r4, [r0, #0]
    b5d8:	60c4      	str	r4, [r0, #12]
    b5da:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    b5dc:	68bc      	ldr	r4, [r7, #8]
    b5de:	2c00      	cmp	r4, #0
    b5e0:	d107      	bne.n	b5f2 <__pow5mult+0x56>
    b5e2:	4916      	ldr	r1, [pc, #88]	; (b63c <__pow5mult+0xa0>)
    b5e4:	0028      	movs	r0, r5
    b5e6:	f7ff ff40 	bl	b46a <__i2b>
    b5ea:	2300      	movs	r3, #0
    b5ec:	0004      	movs	r4, r0
    b5ee:	60b8      	str	r0, [r7, #8]
    b5f0:	6003      	str	r3, [r0, #0]
    b5f2:	2201      	movs	r2, #1
    b5f4:	9b01      	ldr	r3, [sp, #4]
    b5f6:	4213      	tst	r3, r2
    b5f8:	d00a      	beq.n	b610 <__pow5mult+0x74>
    b5fa:	0031      	movs	r1, r6
    b5fc:	0022      	movs	r2, r4
    b5fe:	0028      	movs	r0, r5
    b600:	f7ff ff3c 	bl	b47c <__multiply>
    b604:	0007      	movs	r7, r0
    b606:	0031      	movs	r1, r6
    b608:	0028      	movs	r0, r5
    b60a:	f7ff fe90 	bl	b32e <_Bfree>
    b60e:	003e      	movs	r6, r7
    b610:	9b01      	ldr	r3, [sp, #4]
    b612:	105b      	asrs	r3, r3, #1
    b614:	9301      	str	r3, [sp, #4]
    b616:	d00c      	beq.n	b632 <__pow5mult+0x96>
    b618:	6820      	ldr	r0, [r4, #0]
    b61a:	2800      	cmp	r0, #0
    b61c:	d107      	bne.n	b62e <__pow5mult+0x92>
    b61e:	0022      	movs	r2, r4
    b620:	0021      	movs	r1, r4
    b622:	0028      	movs	r0, r5
    b624:	f7ff ff2a 	bl	b47c <__multiply>
    b628:	2300      	movs	r3, #0
    b62a:	6020      	str	r0, [r4, #0]
    b62c:	6003      	str	r3, [r0, #0]
    b62e:	0004      	movs	r4, r0
    b630:	e7df      	b.n	b5f2 <__pow5mult+0x56>
    b632:	0030      	movs	r0, r6
    b634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b636:	46c0      	nop			; (mov r8, r8)
    b638:	0000f1c0 	.word	0x0000f1c0
    b63c:	00000271 	.word	0x00000271

0000b640 <__lshift>:
    b640:	b5f0      	push	{r4, r5, r6, r7, lr}
    b642:	000d      	movs	r5, r1
    b644:	0017      	movs	r7, r2
    b646:	692b      	ldr	r3, [r5, #16]
    b648:	1154      	asrs	r4, r2, #5
    b64a:	b085      	sub	sp, #20
    b64c:	18e3      	adds	r3, r4, r3
    b64e:	9302      	str	r3, [sp, #8]
    b650:	3301      	adds	r3, #1
    b652:	9301      	str	r3, [sp, #4]
    b654:	6849      	ldr	r1, [r1, #4]
    b656:	68ab      	ldr	r3, [r5, #8]
    b658:	9003      	str	r0, [sp, #12]
    b65a:	9a01      	ldr	r2, [sp, #4]
    b65c:	4293      	cmp	r3, r2
    b65e:	db34      	blt.n	b6ca <__lshift+0x8a>
    b660:	9803      	ldr	r0, [sp, #12]
    b662:	f7ff fe2c 	bl	b2be <_Balloc>
    b666:	2300      	movs	r3, #0
    b668:	0002      	movs	r2, r0
    b66a:	0006      	movs	r6, r0
    b66c:	0019      	movs	r1, r3
    b66e:	3214      	adds	r2, #20
    b670:	42a3      	cmp	r3, r4
    b672:	db2d      	blt.n	b6d0 <__lshift+0x90>
    b674:	43e3      	mvns	r3, r4
    b676:	17db      	asrs	r3, r3, #31
    b678:	401c      	ands	r4, r3
    b67a:	002b      	movs	r3, r5
    b67c:	211f      	movs	r1, #31
    b67e:	00a4      	lsls	r4, r4, #2
    b680:	1914      	adds	r4, r2, r4
    b682:	692a      	ldr	r2, [r5, #16]
    b684:	3314      	adds	r3, #20
    b686:	0092      	lsls	r2, r2, #2
    b688:	189a      	adds	r2, r3, r2
    b68a:	400f      	ands	r7, r1
    b68c:	d024      	beq.n	b6d8 <__lshift+0x98>
    b68e:	3101      	adds	r1, #1
    b690:	1bc9      	subs	r1, r1, r7
    b692:	468c      	mov	ip, r1
    b694:	2100      	movs	r1, #0
    b696:	6818      	ldr	r0, [r3, #0]
    b698:	40b8      	lsls	r0, r7
    b69a:	4301      	orrs	r1, r0
    b69c:	4660      	mov	r0, ip
    b69e:	6021      	str	r1, [r4, #0]
    b6a0:	cb02      	ldmia	r3!, {r1}
    b6a2:	3404      	adds	r4, #4
    b6a4:	40c1      	lsrs	r1, r0
    b6a6:	429a      	cmp	r2, r3
    b6a8:	d8f5      	bhi.n	b696 <__lshift+0x56>
    b6aa:	6021      	str	r1, [r4, #0]
    b6ac:	2900      	cmp	r1, #0
    b6ae:	d002      	beq.n	b6b6 <__lshift+0x76>
    b6b0:	9b02      	ldr	r3, [sp, #8]
    b6b2:	3302      	adds	r3, #2
    b6b4:	9301      	str	r3, [sp, #4]
    b6b6:	9b01      	ldr	r3, [sp, #4]
    b6b8:	9803      	ldr	r0, [sp, #12]
    b6ba:	3b01      	subs	r3, #1
    b6bc:	6133      	str	r3, [r6, #16]
    b6be:	0029      	movs	r1, r5
    b6c0:	f7ff fe35 	bl	b32e <_Bfree>
    b6c4:	0030      	movs	r0, r6
    b6c6:	b005      	add	sp, #20
    b6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6ca:	3101      	adds	r1, #1
    b6cc:	005b      	lsls	r3, r3, #1
    b6ce:	e7c4      	b.n	b65a <__lshift+0x1a>
    b6d0:	0098      	lsls	r0, r3, #2
    b6d2:	5011      	str	r1, [r2, r0]
    b6d4:	3301      	adds	r3, #1
    b6d6:	e7cb      	b.n	b670 <__lshift+0x30>
    b6d8:	cb02      	ldmia	r3!, {r1}
    b6da:	c402      	stmia	r4!, {r1}
    b6dc:	429a      	cmp	r2, r3
    b6de:	d8fb      	bhi.n	b6d8 <__lshift+0x98>
    b6e0:	e7e9      	b.n	b6b6 <__lshift+0x76>

0000b6e2 <__mcmp>:
    b6e2:	690a      	ldr	r2, [r1, #16]
    b6e4:	6903      	ldr	r3, [r0, #16]
    b6e6:	b530      	push	{r4, r5, lr}
    b6e8:	1a9b      	subs	r3, r3, r2
    b6ea:	d10e      	bne.n	b70a <__mcmp+0x28>
    b6ec:	0092      	lsls	r2, r2, #2
    b6ee:	3014      	adds	r0, #20
    b6f0:	3114      	adds	r1, #20
    b6f2:	1884      	adds	r4, r0, r2
    b6f4:	1889      	adds	r1, r1, r2
    b6f6:	3c04      	subs	r4, #4
    b6f8:	3904      	subs	r1, #4
    b6fa:	6822      	ldr	r2, [r4, #0]
    b6fc:	680d      	ldr	r5, [r1, #0]
    b6fe:	42aa      	cmp	r2, r5
    b700:	d005      	beq.n	b70e <__mcmp+0x2c>
    b702:	42aa      	cmp	r2, r5
    b704:	4192      	sbcs	r2, r2
    b706:	2301      	movs	r3, #1
    b708:	4313      	orrs	r3, r2
    b70a:	0018      	movs	r0, r3
    b70c:	bd30      	pop	{r4, r5, pc}
    b70e:	42a0      	cmp	r0, r4
    b710:	d3f1      	bcc.n	b6f6 <__mcmp+0x14>
    b712:	e7fa      	b.n	b70a <__mcmp+0x28>

0000b714 <__mdiff>:
    b714:	b5f0      	push	{r4, r5, r6, r7, lr}
    b716:	000d      	movs	r5, r1
    b718:	b085      	sub	sp, #20
    b71a:	0007      	movs	r7, r0
    b71c:	0011      	movs	r1, r2
    b71e:	0028      	movs	r0, r5
    b720:	0014      	movs	r4, r2
    b722:	f7ff ffde 	bl	b6e2 <__mcmp>
    b726:	1e06      	subs	r6, r0, #0
    b728:	d108      	bne.n	b73c <__mdiff+0x28>
    b72a:	0001      	movs	r1, r0
    b72c:	0038      	movs	r0, r7
    b72e:	f7ff fdc6 	bl	b2be <_Balloc>
    b732:	2301      	movs	r3, #1
    b734:	6146      	str	r6, [r0, #20]
    b736:	6103      	str	r3, [r0, #16]
    b738:	b005      	add	sp, #20
    b73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b73c:	2301      	movs	r3, #1
    b73e:	9301      	str	r3, [sp, #4]
    b740:	2800      	cmp	r0, #0
    b742:	db04      	blt.n	b74e <__mdiff+0x3a>
    b744:	0023      	movs	r3, r4
    b746:	002c      	movs	r4, r5
    b748:	001d      	movs	r5, r3
    b74a:	2300      	movs	r3, #0
    b74c:	9301      	str	r3, [sp, #4]
    b74e:	6861      	ldr	r1, [r4, #4]
    b750:	0038      	movs	r0, r7
    b752:	f7ff fdb4 	bl	b2be <_Balloc>
    b756:	002f      	movs	r7, r5
    b758:	2200      	movs	r2, #0
    b75a:	9b01      	ldr	r3, [sp, #4]
    b75c:	6926      	ldr	r6, [r4, #16]
    b75e:	60c3      	str	r3, [r0, #12]
    b760:	3414      	adds	r4, #20
    b762:	00b3      	lsls	r3, r6, #2
    b764:	18e3      	adds	r3, r4, r3
    b766:	9302      	str	r3, [sp, #8]
    b768:	692b      	ldr	r3, [r5, #16]
    b76a:	3714      	adds	r7, #20
    b76c:	009b      	lsls	r3, r3, #2
    b76e:	18fb      	adds	r3, r7, r3
    b770:	9303      	str	r3, [sp, #12]
    b772:	0003      	movs	r3, r0
    b774:	4694      	mov	ip, r2
    b776:	3314      	adds	r3, #20
    b778:	cc20      	ldmia	r4!, {r5}
    b77a:	cf04      	ldmia	r7!, {r2}
    b77c:	9201      	str	r2, [sp, #4]
    b77e:	b2aa      	uxth	r2, r5
    b780:	4494      	add	ip, r2
    b782:	466a      	mov	r2, sp
    b784:	4661      	mov	r1, ip
    b786:	8892      	ldrh	r2, [r2, #4]
    b788:	0c2d      	lsrs	r5, r5, #16
    b78a:	1a8a      	subs	r2, r1, r2
    b78c:	9901      	ldr	r1, [sp, #4]
    b78e:	0c09      	lsrs	r1, r1, #16
    b790:	1a69      	subs	r1, r5, r1
    b792:	1415      	asrs	r5, r2, #16
    b794:	1949      	adds	r1, r1, r5
    b796:	140d      	asrs	r5, r1, #16
    b798:	b292      	uxth	r2, r2
    b79a:	0409      	lsls	r1, r1, #16
    b79c:	430a      	orrs	r2, r1
    b79e:	601a      	str	r2, [r3, #0]
    b7a0:	9a03      	ldr	r2, [sp, #12]
    b7a2:	46ac      	mov	ip, r5
    b7a4:	3304      	adds	r3, #4
    b7a6:	42ba      	cmp	r2, r7
    b7a8:	d8e6      	bhi.n	b778 <__mdiff+0x64>
    b7aa:	9902      	ldr	r1, [sp, #8]
    b7ac:	001a      	movs	r2, r3
    b7ae:	428c      	cmp	r4, r1
    b7b0:	d305      	bcc.n	b7be <__mdiff+0xaa>
    b7b2:	3a04      	subs	r2, #4
    b7b4:	6813      	ldr	r3, [r2, #0]
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	d00e      	beq.n	b7d8 <__mdiff+0xc4>
    b7ba:	6106      	str	r6, [r0, #16]
    b7bc:	e7bc      	b.n	b738 <__mdiff+0x24>
    b7be:	cc04      	ldmia	r4!, {r2}
    b7c0:	b291      	uxth	r1, r2
    b7c2:	4461      	add	r1, ip
    b7c4:	140d      	asrs	r5, r1, #16
    b7c6:	0c12      	lsrs	r2, r2, #16
    b7c8:	1952      	adds	r2, r2, r5
    b7ca:	1415      	asrs	r5, r2, #16
    b7cc:	b289      	uxth	r1, r1
    b7ce:	0412      	lsls	r2, r2, #16
    b7d0:	430a      	orrs	r2, r1
    b7d2:	46ac      	mov	ip, r5
    b7d4:	c304      	stmia	r3!, {r2}
    b7d6:	e7e8      	b.n	b7aa <__mdiff+0x96>
    b7d8:	3e01      	subs	r6, #1
    b7da:	e7ea      	b.n	b7b2 <__mdiff+0x9e>

0000b7dc <__d2b>:
    b7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b7de:	001d      	movs	r5, r3
    b7e0:	2101      	movs	r1, #1
    b7e2:	9f08      	ldr	r7, [sp, #32]
    b7e4:	0014      	movs	r4, r2
    b7e6:	f7ff fd6a 	bl	b2be <_Balloc>
    b7ea:	032b      	lsls	r3, r5, #12
    b7ec:	006d      	lsls	r5, r5, #1
    b7ee:	0006      	movs	r6, r0
    b7f0:	0b1b      	lsrs	r3, r3, #12
    b7f2:	0d6d      	lsrs	r5, r5, #21
    b7f4:	d124      	bne.n	b840 <__d2b+0x64>
    b7f6:	9301      	str	r3, [sp, #4]
    b7f8:	2c00      	cmp	r4, #0
    b7fa:	d027      	beq.n	b84c <__d2b+0x70>
    b7fc:	4668      	mov	r0, sp
    b7fe:	9400      	str	r4, [sp, #0]
    b800:	f7ff fe04 	bl	b40c <__lo0bits>
    b804:	9c00      	ldr	r4, [sp, #0]
    b806:	2800      	cmp	r0, #0
    b808:	d01e      	beq.n	b848 <__d2b+0x6c>
    b80a:	9b01      	ldr	r3, [sp, #4]
    b80c:	2120      	movs	r1, #32
    b80e:	001a      	movs	r2, r3
    b810:	1a09      	subs	r1, r1, r0
    b812:	408a      	lsls	r2, r1
    b814:	40c3      	lsrs	r3, r0
    b816:	4322      	orrs	r2, r4
    b818:	6172      	str	r2, [r6, #20]
    b81a:	9301      	str	r3, [sp, #4]
    b81c:	9c01      	ldr	r4, [sp, #4]
    b81e:	61b4      	str	r4, [r6, #24]
    b820:	1e63      	subs	r3, r4, #1
    b822:	419c      	sbcs	r4, r3
    b824:	3401      	adds	r4, #1
    b826:	6134      	str	r4, [r6, #16]
    b828:	2d00      	cmp	r5, #0
    b82a:	d018      	beq.n	b85e <__d2b+0x82>
    b82c:	4b12      	ldr	r3, [pc, #72]	; (b878 <__d2b+0x9c>)
    b82e:	18ed      	adds	r5, r5, r3
    b830:	2335      	movs	r3, #53	; 0x35
    b832:	182d      	adds	r5, r5, r0
    b834:	603d      	str	r5, [r7, #0]
    b836:	1a18      	subs	r0, r3, r0
    b838:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b83a:	6018      	str	r0, [r3, #0]
    b83c:	0030      	movs	r0, r6
    b83e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b840:	2280      	movs	r2, #128	; 0x80
    b842:	0352      	lsls	r2, r2, #13
    b844:	4313      	orrs	r3, r2
    b846:	e7d6      	b.n	b7f6 <__d2b+0x1a>
    b848:	6174      	str	r4, [r6, #20]
    b84a:	e7e7      	b.n	b81c <__d2b+0x40>
    b84c:	a801      	add	r0, sp, #4
    b84e:	f7ff fddd 	bl	b40c <__lo0bits>
    b852:	2401      	movs	r4, #1
    b854:	9b01      	ldr	r3, [sp, #4]
    b856:	6134      	str	r4, [r6, #16]
    b858:	6173      	str	r3, [r6, #20]
    b85a:	3020      	adds	r0, #32
    b85c:	e7e4      	b.n	b828 <__d2b+0x4c>
    b85e:	4b07      	ldr	r3, [pc, #28]	; (b87c <__d2b+0xa0>)
    b860:	18c0      	adds	r0, r0, r3
    b862:	4b07      	ldr	r3, [pc, #28]	; (b880 <__d2b+0xa4>)
    b864:	6038      	str	r0, [r7, #0]
    b866:	18e3      	adds	r3, r4, r3
    b868:	009b      	lsls	r3, r3, #2
    b86a:	18f3      	adds	r3, r6, r3
    b86c:	6958      	ldr	r0, [r3, #20]
    b86e:	f7ff fdb3 	bl	b3d8 <__hi0bits>
    b872:	0164      	lsls	r4, r4, #5
    b874:	1a20      	subs	r0, r4, r0
    b876:	e7df      	b.n	b838 <__d2b+0x5c>
    b878:	fffffbcd 	.word	0xfffffbcd
    b87c:	fffffbce 	.word	0xfffffbce
    b880:	3fffffff 	.word	0x3fffffff

0000b884 <_calloc_r>:
    b884:	434a      	muls	r2, r1
    b886:	b570      	push	{r4, r5, r6, lr}
    b888:	0011      	movs	r1, r2
    b88a:	0014      	movs	r4, r2
    b88c:	f7fd fc9c 	bl	91c8 <_malloc_r>
    b890:	1e05      	subs	r5, r0, #0
    b892:	d003      	beq.n	b89c <_calloc_r+0x18>
    b894:	0022      	movs	r2, r4
    b896:	2100      	movs	r1, #0
    b898:	f7fd fc43 	bl	9122 <memset>
    b89c:	0028      	movs	r0, r5
    b89e:	bd70      	pop	{r4, r5, r6, pc}

0000b8a0 <__sfputc_r>:
    b8a0:	6893      	ldr	r3, [r2, #8]
    b8a2:	b510      	push	{r4, lr}
    b8a4:	3b01      	subs	r3, #1
    b8a6:	6093      	str	r3, [r2, #8]
    b8a8:	2b00      	cmp	r3, #0
    b8aa:	da05      	bge.n	b8b8 <__sfputc_r+0x18>
    b8ac:	6994      	ldr	r4, [r2, #24]
    b8ae:	42a3      	cmp	r3, r4
    b8b0:	db08      	blt.n	b8c4 <__sfputc_r+0x24>
    b8b2:	b2cb      	uxtb	r3, r1
    b8b4:	2b0a      	cmp	r3, #10
    b8b6:	d005      	beq.n	b8c4 <__sfputc_r+0x24>
    b8b8:	6813      	ldr	r3, [r2, #0]
    b8ba:	1c58      	adds	r0, r3, #1
    b8bc:	6010      	str	r0, [r2, #0]
    b8be:	7019      	strb	r1, [r3, #0]
    b8c0:	b2c8      	uxtb	r0, r1
    b8c2:	bd10      	pop	{r4, pc}
    b8c4:	f7fe fba4 	bl	a010 <__swbuf_r>
    b8c8:	e7fb      	b.n	b8c2 <__sfputc_r+0x22>

0000b8ca <__sfputs_r>:
    b8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8cc:	0006      	movs	r6, r0
    b8ce:	000f      	movs	r7, r1
    b8d0:	0014      	movs	r4, r2
    b8d2:	18d5      	adds	r5, r2, r3
    b8d4:	42ac      	cmp	r4, r5
    b8d6:	d101      	bne.n	b8dc <__sfputs_r+0x12>
    b8d8:	2000      	movs	r0, #0
    b8da:	e007      	b.n	b8ec <__sfputs_r+0x22>
    b8dc:	7821      	ldrb	r1, [r4, #0]
    b8de:	003a      	movs	r2, r7
    b8e0:	0030      	movs	r0, r6
    b8e2:	f7ff ffdd 	bl	b8a0 <__sfputc_r>
    b8e6:	3401      	adds	r4, #1
    b8e8:	1c43      	adds	r3, r0, #1
    b8ea:	d1f3      	bne.n	b8d4 <__sfputs_r+0xa>
    b8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000b8f0 <_vfiprintf_r>:
    b8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8f2:	b09f      	sub	sp, #124	; 0x7c
    b8f4:	0006      	movs	r6, r0
    b8f6:	000f      	movs	r7, r1
    b8f8:	0014      	movs	r4, r2
    b8fa:	9305      	str	r3, [sp, #20]
    b8fc:	2800      	cmp	r0, #0
    b8fe:	d004      	beq.n	b90a <_vfiprintf_r+0x1a>
    b900:	6983      	ldr	r3, [r0, #24]
    b902:	2b00      	cmp	r3, #0
    b904:	d101      	bne.n	b90a <_vfiprintf_r+0x1a>
    b906:	f7ff fbbf 	bl	b088 <__sinit>
    b90a:	4b7f      	ldr	r3, [pc, #508]	; (bb08 <_vfiprintf_r+0x218>)
    b90c:	429f      	cmp	r7, r3
    b90e:	d15c      	bne.n	b9ca <_vfiprintf_r+0xda>
    b910:	6877      	ldr	r7, [r6, #4]
    b912:	89bb      	ldrh	r3, [r7, #12]
    b914:	071b      	lsls	r3, r3, #28
    b916:	d562      	bpl.n	b9de <_vfiprintf_r+0xee>
    b918:	693b      	ldr	r3, [r7, #16]
    b91a:	2b00      	cmp	r3, #0
    b91c:	d05f      	beq.n	b9de <_vfiprintf_r+0xee>
    b91e:	2300      	movs	r3, #0
    b920:	ad06      	add	r5, sp, #24
    b922:	616b      	str	r3, [r5, #20]
    b924:	3320      	adds	r3, #32
    b926:	766b      	strb	r3, [r5, #25]
    b928:	3310      	adds	r3, #16
    b92a:	76ab      	strb	r3, [r5, #26]
    b92c:	9402      	str	r4, [sp, #8]
    b92e:	9c02      	ldr	r4, [sp, #8]
    b930:	7823      	ldrb	r3, [r4, #0]
    b932:	2b00      	cmp	r3, #0
    b934:	d15d      	bne.n	b9f2 <_vfiprintf_r+0x102>
    b936:	9b02      	ldr	r3, [sp, #8]
    b938:	1ae3      	subs	r3, r4, r3
    b93a:	9304      	str	r3, [sp, #16]
    b93c:	d00d      	beq.n	b95a <_vfiprintf_r+0x6a>
    b93e:	9b04      	ldr	r3, [sp, #16]
    b940:	9a02      	ldr	r2, [sp, #8]
    b942:	0039      	movs	r1, r7
    b944:	0030      	movs	r0, r6
    b946:	f7ff ffc0 	bl	b8ca <__sfputs_r>
    b94a:	1c43      	adds	r3, r0, #1
    b94c:	d100      	bne.n	b950 <_vfiprintf_r+0x60>
    b94e:	e0cc      	b.n	baea <_vfiprintf_r+0x1fa>
    b950:	696a      	ldr	r2, [r5, #20]
    b952:	9b04      	ldr	r3, [sp, #16]
    b954:	4694      	mov	ip, r2
    b956:	4463      	add	r3, ip
    b958:	616b      	str	r3, [r5, #20]
    b95a:	7823      	ldrb	r3, [r4, #0]
    b95c:	2b00      	cmp	r3, #0
    b95e:	d100      	bne.n	b962 <_vfiprintf_r+0x72>
    b960:	e0c3      	b.n	baea <_vfiprintf_r+0x1fa>
    b962:	2201      	movs	r2, #1
    b964:	2300      	movs	r3, #0
    b966:	4252      	negs	r2, r2
    b968:	606a      	str	r2, [r5, #4]
    b96a:	a902      	add	r1, sp, #8
    b96c:	3254      	adds	r2, #84	; 0x54
    b96e:	1852      	adds	r2, r2, r1
    b970:	3401      	adds	r4, #1
    b972:	602b      	str	r3, [r5, #0]
    b974:	60eb      	str	r3, [r5, #12]
    b976:	60ab      	str	r3, [r5, #8]
    b978:	7013      	strb	r3, [r2, #0]
    b97a:	65ab      	str	r3, [r5, #88]	; 0x58
    b97c:	7821      	ldrb	r1, [r4, #0]
    b97e:	2205      	movs	r2, #5
    b980:	4862      	ldr	r0, [pc, #392]	; (bb0c <_vfiprintf_r+0x21c>)
    b982:	f7ff fc8f 	bl	b2a4 <memchr>
    b986:	1c63      	adds	r3, r4, #1
    b988:	469c      	mov	ip, r3
    b98a:	2800      	cmp	r0, #0
    b98c:	d135      	bne.n	b9fa <_vfiprintf_r+0x10a>
    b98e:	6829      	ldr	r1, [r5, #0]
    b990:	06cb      	lsls	r3, r1, #27
    b992:	d504      	bpl.n	b99e <_vfiprintf_r+0xae>
    b994:	2353      	movs	r3, #83	; 0x53
    b996:	aa02      	add	r2, sp, #8
    b998:	3020      	adds	r0, #32
    b99a:	189b      	adds	r3, r3, r2
    b99c:	7018      	strb	r0, [r3, #0]
    b99e:	070b      	lsls	r3, r1, #28
    b9a0:	d504      	bpl.n	b9ac <_vfiprintf_r+0xbc>
    b9a2:	2353      	movs	r3, #83	; 0x53
    b9a4:	202b      	movs	r0, #43	; 0x2b
    b9a6:	aa02      	add	r2, sp, #8
    b9a8:	189b      	adds	r3, r3, r2
    b9aa:	7018      	strb	r0, [r3, #0]
    b9ac:	7823      	ldrb	r3, [r4, #0]
    b9ae:	2b2a      	cmp	r3, #42	; 0x2a
    b9b0:	d02c      	beq.n	ba0c <_vfiprintf_r+0x11c>
    b9b2:	2000      	movs	r0, #0
    b9b4:	210a      	movs	r1, #10
    b9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9b8:	7822      	ldrb	r2, [r4, #0]
    b9ba:	3a30      	subs	r2, #48	; 0x30
    b9bc:	2a09      	cmp	r2, #9
    b9be:	d800      	bhi.n	b9c2 <_vfiprintf_r+0xd2>
    b9c0:	e06b      	b.n	ba9a <_vfiprintf_r+0x1aa>
    b9c2:	2800      	cmp	r0, #0
    b9c4:	d02a      	beq.n	ba1c <_vfiprintf_r+0x12c>
    b9c6:	9309      	str	r3, [sp, #36]	; 0x24
    b9c8:	e028      	b.n	ba1c <_vfiprintf_r+0x12c>
    b9ca:	4b51      	ldr	r3, [pc, #324]	; (bb10 <_vfiprintf_r+0x220>)
    b9cc:	429f      	cmp	r7, r3
    b9ce:	d101      	bne.n	b9d4 <_vfiprintf_r+0xe4>
    b9d0:	68b7      	ldr	r7, [r6, #8]
    b9d2:	e79e      	b.n	b912 <_vfiprintf_r+0x22>
    b9d4:	4b4f      	ldr	r3, [pc, #316]	; (bb14 <_vfiprintf_r+0x224>)
    b9d6:	429f      	cmp	r7, r3
    b9d8:	d19b      	bne.n	b912 <_vfiprintf_r+0x22>
    b9da:	68f7      	ldr	r7, [r6, #12]
    b9dc:	e799      	b.n	b912 <_vfiprintf_r+0x22>
    b9de:	0039      	movs	r1, r7
    b9e0:	0030      	movs	r0, r6
    b9e2:	f7fe fb77 	bl	a0d4 <__swsetup_r>
    b9e6:	2800      	cmp	r0, #0
    b9e8:	d099      	beq.n	b91e <_vfiprintf_r+0x2e>
    b9ea:	2001      	movs	r0, #1
    b9ec:	4240      	negs	r0, r0
    b9ee:	b01f      	add	sp, #124	; 0x7c
    b9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9f2:	2b25      	cmp	r3, #37	; 0x25
    b9f4:	d09f      	beq.n	b936 <_vfiprintf_r+0x46>
    b9f6:	3401      	adds	r4, #1
    b9f8:	e79a      	b.n	b930 <_vfiprintf_r+0x40>
    b9fa:	4b44      	ldr	r3, [pc, #272]	; (bb0c <_vfiprintf_r+0x21c>)
    b9fc:	6829      	ldr	r1, [r5, #0]
    b9fe:	1ac0      	subs	r0, r0, r3
    ba00:	2301      	movs	r3, #1
    ba02:	4083      	lsls	r3, r0
    ba04:	430b      	orrs	r3, r1
    ba06:	602b      	str	r3, [r5, #0]
    ba08:	4664      	mov	r4, ip
    ba0a:	e7b7      	b.n	b97c <_vfiprintf_r+0x8c>
    ba0c:	9b05      	ldr	r3, [sp, #20]
    ba0e:	1d18      	adds	r0, r3, #4
    ba10:	681b      	ldr	r3, [r3, #0]
    ba12:	9005      	str	r0, [sp, #20]
    ba14:	2b00      	cmp	r3, #0
    ba16:	db3a      	blt.n	ba8e <_vfiprintf_r+0x19e>
    ba18:	9309      	str	r3, [sp, #36]	; 0x24
    ba1a:	4664      	mov	r4, ip
    ba1c:	7823      	ldrb	r3, [r4, #0]
    ba1e:	2b2e      	cmp	r3, #46	; 0x2e
    ba20:	d10b      	bne.n	ba3a <_vfiprintf_r+0x14a>
    ba22:	7863      	ldrb	r3, [r4, #1]
    ba24:	1c62      	adds	r2, r4, #1
    ba26:	2b2a      	cmp	r3, #42	; 0x2a
    ba28:	d13f      	bne.n	baaa <_vfiprintf_r+0x1ba>
    ba2a:	9b05      	ldr	r3, [sp, #20]
    ba2c:	3402      	adds	r4, #2
    ba2e:	1d1a      	adds	r2, r3, #4
    ba30:	681b      	ldr	r3, [r3, #0]
    ba32:	9205      	str	r2, [sp, #20]
    ba34:	2b00      	cmp	r3, #0
    ba36:	db35      	blt.n	baa4 <_vfiprintf_r+0x1b4>
    ba38:	9307      	str	r3, [sp, #28]
    ba3a:	7821      	ldrb	r1, [r4, #0]
    ba3c:	2203      	movs	r2, #3
    ba3e:	4836      	ldr	r0, [pc, #216]	; (bb18 <_vfiprintf_r+0x228>)
    ba40:	f7ff fc30 	bl	b2a4 <memchr>
    ba44:	2800      	cmp	r0, #0
    ba46:	d007      	beq.n	ba58 <_vfiprintf_r+0x168>
    ba48:	4b33      	ldr	r3, [pc, #204]	; (bb18 <_vfiprintf_r+0x228>)
    ba4a:	682a      	ldr	r2, [r5, #0]
    ba4c:	1ac0      	subs	r0, r0, r3
    ba4e:	2340      	movs	r3, #64	; 0x40
    ba50:	4083      	lsls	r3, r0
    ba52:	4313      	orrs	r3, r2
    ba54:	602b      	str	r3, [r5, #0]
    ba56:	3401      	adds	r4, #1
    ba58:	7821      	ldrb	r1, [r4, #0]
    ba5a:	1c63      	adds	r3, r4, #1
    ba5c:	2206      	movs	r2, #6
    ba5e:	482f      	ldr	r0, [pc, #188]	; (bb1c <_vfiprintf_r+0x22c>)
    ba60:	9302      	str	r3, [sp, #8]
    ba62:	7629      	strb	r1, [r5, #24]
    ba64:	f7ff fc1e 	bl	b2a4 <memchr>
    ba68:	2800      	cmp	r0, #0
    ba6a:	d044      	beq.n	baf6 <_vfiprintf_r+0x206>
    ba6c:	4b2c      	ldr	r3, [pc, #176]	; (bb20 <_vfiprintf_r+0x230>)
    ba6e:	2b00      	cmp	r3, #0
    ba70:	d12f      	bne.n	bad2 <_vfiprintf_r+0x1e2>
    ba72:	6829      	ldr	r1, [r5, #0]
    ba74:	9b05      	ldr	r3, [sp, #20]
    ba76:	2207      	movs	r2, #7
    ba78:	05c9      	lsls	r1, r1, #23
    ba7a:	d528      	bpl.n	bace <_vfiprintf_r+0x1de>
    ba7c:	189b      	adds	r3, r3, r2
    ba7e:	4393      	bics	r3, r2
    ba80:	3308      	adds	r3, #8
    ba82:	9305      	str	r3, [sp, #20]
    ba84:	696b      	ldr	r3, [r5, #20]
    ba86:	9a03      	ldr	r2, [sp, #12]
    ba88:	189b      	adds	r3, r3, r2
    ba8a:	616b      	str	r3, [r5, #20]
    ba8c:	e74f      	b.n	b92e <_vfiprintf_r+0x3e>
    ba8e:	425b      	negs	r3, r3
    ba90:	60eb      	str	r3, [r5, #12]
    ba92:	2302      	movs	r3, #2
    ba94:	430b      	orrs	r3, r1
    ba96:	602b      	str	r3, [r5, #0]
    ba98:	e7bf      	b.n	ba1a <_vfiprintf_r+0x12a>
    ba9a:	434b      	muls	r3, r1
    ba9c:	3401      	adds	r4, #1
    ba9e:	189b      	adds	r3, r3, r2
    baa0:	2001      	movs	r0, #1
    baa2:	e789      	b.n	b9b8 <_vfiprintf_r+0xc8>
    baa4:	2301      	movs	r3, #1
    baa6:	425b      	negs	r3, r3
    baa8:	e7c6      	b.n	ba38 <_vfiprintf_r+0x148>
    baaa:	2300      	movs	r3, #0
    baac:	0014      	movs	r4, r2
    baae:	200a      	movs	r0, #10
    bab0:	001a      	movs	r2, r3
    bab2:	606b      	str	r3, [r5, #4]
    bab4:	7821      	ldrb	r1, [r4, #0]
    bab6:	3930      	subs	r1, #48	; 0x30
    bab8:	2909      	cmp	r1, #9
    baba:	d903      	bls.n	bac4 <_vfiprintf_r+0x1d4>
    babc:	2b00      	cmp	r3, #0
    babe:	d0bc      	beq.n	ba3a <_vfiprintf_r+0x14a>
    bac0:	9207      	str	r2, [sp, #28]
    bac2:	e7ba      	b.n	ba3a <_vfiprintf_r+0x14a>
    bac4:	4342      	muls	r2, r0
    bac6:	3401      	adds	r4, #1
    bac8:	1852      	adds	r2, r2, r1
    baca:	2301      	movs	r3, #1
    bacc:	e7f2      	b.n	bab4 <_vfiprintf_r+0x1c4>
    bace:	3307      	adds	r3, #7
    bad0:	e7d5      	b.n	ba7e <_vfiprintf_r+0x18e>
    bad2:	ab05      	add	r3, sp, #20
    bad4:	9300      	str	r3, [sp, #0]
    bad6:	003a      	movs	r2, r7
    bad8:	4b12      	ldr	r3, [pc, #72]	; (bb24 <_vfiprintf_r+0x234>)
    bada:	0029      	movs	r1, r5
    badc:	0030      	movs	r0, r6
    bade:	f7fd fc6d 	bl	93bc <_printf_float>
    bae2:	9003      	str	r0, [sp, #12]
    bae4:	9b03      	ldr	r3, [sp, #12]
    bae6:	3301      	adds	r3, #1
    bae8:	d1cc      	bne.n	ba84 <_vfiprintf_r+0x194>
    baea:	89bb      	ldrh	r3, [r7, #12]
    baec:	065b      	lsls	r3, r3, #25
    baee:	d500      	bpl.n	baf2 <_vfiprintf_r+0x202>
    baf0:	e77b      	b.n	b9ea <_vfiprintf_r+0xfa>
    baf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    baf4:	e77b      	b.n	b9ee <_vfiprintf_r+0xfe>
    baf6:	ab05      	add	r3, sp, #20
    baf8:	9300      	str	r3, [sp, #0]
    bafa:	003a      	movs	r2, r7
    bafc:	4b09      	ldr	r3, [pc, #36]	; (bb24 <_vfiprintf_r+0x234>)
    bafe:	0029      	movs	r1, r5
    bb00:	0030      	movs	r0, r6
    bb02:	f7fd ff15 	bl	9930 <_printf_i>
    bb06:	e7ec      	b.n	bae2 <_vfiprintf_r+0x1f2>
    bb08:	0000f090 	.word	0x0000f090
    bb0c:	0000f1cc 	.word	0x0000f1cc
    bb10:	0000f0b0 	.word	0x0000f0b0
    bb14:	0000f070 	.word	0x0000f070
    bb18:	0000f1d2 	.word	0x0000f1d2
    bb1c:	0000f1d6 	.word	0x0000f1d6
    bb20:	000093bd 	.word	0x000093bd
    bb24:	0000b8cb 	.word	0x0000b8cb

0000bb28 <__sread>:
    bb28:	b570      	push	{r4, r5, r6, lr}
    bb2a:	000c      	movs	r4, r1
    bb2c:	250e      	movs	r5, #14
    bb2e:	5f49      	ldrsh	r1, [r1, r5]
    bb30:	f000 f8a4 	bl	bc7c <_read_r>
    bb34:	2800      	cmp	r0, #0
    bb36:	db03      	blt.n	bb40 <__sread+0x18>
    bb38:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bb3a:	181b      	adds	r3, r3, r0
    bb3c:	6563      	str	r3, [r4, #84]	; 0x54
    bb3e:	bd70      	pop	{r4, r5, r6, pc}
    bb40:	89a3      	ldrh	r3, [r4, #12]
    bb42:	4a02      	ldr	r2, [pc, #8]	; (bb4c <__sread+0x24>)
    bb44:	4013      	ands	r3, r2
    bb46:	81a3      	strh	r3, [r4, #12]
    bb48:	e7f9      	b.n	bb3e <__sread+0x16>
    bb4a:	46c0      	nop			; (mov r8, r8)
    bb4c:	ffffefff 	.word	0xffffefff

0000bb50 <__swrite>:
    bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb52:	001f      	movs	r7, r3
    bb54:	898b      	ldrh	r3, [r1, #12]
    bb56:	0005      	movs	r5, r0
    bb58:	000c      	movs	r4, r1
    bb5a:	0016      	movs	r6, r2
    bb5c:	05db      	lsls	r3, r3, #23
    bb5e:	d505      	bpl.n	bb6c <__swrite+0x1c>
    bb60:	230e      	movs	r3, #14
    bb62:	5ec9      	ldrsh	r1, [r1, r3]
    bb64:	2200      	movs	r2, #0
    bb66:	2302      	movs	r3, #2
    bb68:	f000 f874 	bl	bc54 <_lseek_r>
    bb6c:	89a3      	ldrh	r3, [r4, #12]
    bb6e:	4a05      	ldr	r2, [pc, #20]	; (bb84 <__swrite+0x34>)
    bb70:	0028      	movs	r0, r5
    bb72:	4013      	ands	r3, r2
    bb74:	81a3      	strh	r3, [r4, #12]
    bb76:	0032      	movs	r2, r6
    bb78:	230e      	movs	r3, #14
    bb7a:	5ee1      	ldrsh	r1, [r4, r3]
    bb7c:	003b      	movs	r3, r7
    bb7e:	f000 f81f 	bl	bbc0 <_write_r>
    bb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb84:	ffffefff 	.word	0xffffefff

0000bb88 <__sseek>:
    bb88:	b570      	push	{r4, r5, r6, lr}
    bb8a:	000c      	movs	r4, r1
    bb8c:	250e      	movs	r5, #14
    bb8e:	5f49      	ldrsh	r1, [r1, r5]
    bb90:	f000 f860 	bl	bc54 <_lseek_r>
    bb94:	89a3      	ldrh	r3, [r4, #12]
    bb96:	1c42      	adds	r2, r0, #1
    bb98:	d103      	bne.n	bba2 <__sseek+0x1a>
    bb9a:	4a05      	ldr	r2, [pc, #20]	; (bbb0 <__sseek+0x28>)
    bb9c:	4013      	ands	r3, r2
    bb9e:	81a3      	strh	r3, [r4, #12]
    bba0:	bd70      	pop	{r4, r5, r6, pc}
    bba2:	2280      	movs	r2, #128	; 0x80
    bba4:	0152      	lsls	r2, r2, #5
    bba6:	4313      	orrs	r3, r2
    bba8:	81a3      	strh	r3, [r4, #12]
    bbaa:	6560      	str	r0, [r4, #84]	; 0x54
    bbac:	e7f8      	b.n	bba0 <__sseek+0x18>
    bbae:	46c0      	nop			; (mov r8, r8)
    bbb0:	ffffefff 	.word	0xffffefff

0000bbb4 <__sclose>:
    bbb4:	b510      	push	{r4, lr}
    bbb6:	230e      	movs	r3, #14
    bbb8:	5ec9      	ldrsh	r1, [r1, r3]
    bbba:	f000 f815 	bl	bbe8 <_close_r>
    bbbe:	bd10      	pop	{r4, pc}

0000bbc0 <_write_r>:
    bbc0:	b570      	push	{r4, r5, r6, lr}
    bbc2:	0005      	movs	r5, r0
    bbc4:	0008      	movs	r0, r1
    bbc6:	0011      	movs	r1, r2
    bbc8:	2200      	movs	r2, #0
    bbca:	4c06      	ldr	r4, [pc, #24]	; (bbe4 <_write_r+0x24>)
    bbcc:	6022      	str	r2, [r4, #0]
    bbce:	001a      	movs	r2, r3
    bbd0:	f7f8 ff52 	bl	4a78 <_write>
    bbd4:	1c43      	adds	r3, r0, #1
    bbd6:	d103      	bne.n	bbe0 <_write_r+0x20>
    bbd8:	6823      	ldr	r3, [r4, #0]
    bbda:	2b00      	cmp	r3, #0
    bbdc:	d000      	beq.n	bbe0 <_write_r+0x20>
    bbde:	602b      	str	r3, [r5, #0]
    bbe0:	bd70      	pop	{r4, r5, r6, pc}
    bbe2:	46c0      	nop			; (mov r8, r8)
    bbe4:	200004e0 	.word	0x200004e0

0000bbe8 <_close_r>:
    bbe8:	2300      	movs	r3, #0
    bbea:	b570      	push	{r4, r5, r6, lr}
    bbec:	4c06      	ldr	r4, [pc, #24]	; (bc08 <_close_r+0x20>)
    bbee:	0005      	movs	r5, r0
    bbf0:	0008      	movs	r0, r1
    bbf2:	6023      	str	r3, [r4, #0]
    bbf4:	f7fb f876 	bl	6ce4 <_close>
    bbf8:	1c43      	adds	r3, r0, #1
    bbfa:	d103      	bne.n	bc04 <_close_r+0x1c>
    bbfc:	6823      	ldr	r3, [r4, #0]
    bbfe:	2b00      	cmp	r3, #0
    bc00:	d000      	beq.n	bc04 <_close_r+0x1c>
    bc02:	602b      	str	r3, [r5, #0]
    bc04:	bd70      	pop	{r4, r5, r6, pc}
    bc06:	46c0      	nop			; (mov r8, r8)
    bc08:	200004e0 	.word	0x200004e0

0000bc0c <_fstat_r>:
    bc0c:	2300      	movs	r3, #0
    bc0e:	b570      	push	{r4, r5, r6, lr}
    bc10:	4c06      	ldr	r4, [pc, #24]	; (bc2c <_fstat_r+0x20>)
    bc12:	0005      	movs	r5, r0
    bc14:	0008      	movs	r0, r1
    bc16:	0011      	movs	r1, r2
    bc18:	6023      	str	r3, [r4, #0]
    bc1a:	f7fb f86d 	bl	6cf8 <_fstat>
    bc1e:	1c43      	adds	r3, r0, #1
    bc20:	d103      	bne.n	bc2a <_fstat_r+0x1e>
    bc22:	6823      	ldr	r3, [r4, #0]
    bc24:	2b00      	cmp	r3, #0
    bc26:	d000      	beq.n	bc2a <_fstat_r+0x1e>
    bc28:	602b      	str	r3, [r5, #0]
    bc2a:	bd70      	pop	{r4, r5, r6, pc}
    bc2c:	200004e0 	.word	0x200004e0

0000bc30 <_isatty_r>:
    bc30:	2300      	movs	r3, #0
    bc32:	b570      	push	{r4, r5, r6, lr}
    bc34:	4c06      	ldr	r4, [pc, #24]	; (bc50 <_isatty_r+0x20>)
    bc36:	0005      	movs	r5, r0
    bc38:	0008      	movs	r0, r1
    bc3a:	6023      	str	r3, [r4, #0]
    bc3c:	f7fb f86a 	bl	6d14 <_isatty>
    bc40:	1c43      	adds	r3, r0, #1
    bc42:	d103      	bne.n	bc4c <_isatty_r+0x1c>
    bc44:	6823      	ldr	r3, [r4, #0]
    bc46:	2b00      	cmp	r3, #0
    bc48:	d000      	beq.n	bc4c <_isatty_r+0x1c>
    bc4a:	602b      	str	r3, [r5, #0]
    bc4c:	bd70      	pop	{r4, r5, r6, pc}
    bc4e:	46c0      	nop			; (mov r8, r8)
    bc50:	200004e0 	.word	0x200004e0

0000bc54 <_lseek_r>:
    bc54:	b570      	push	{r4, r5, r6, lr}
    bc56:	0005      	movs	r5, r0
    bc58:	0008      	movs	r0, r1
    bc5a:	0011      	movs	r1, r2
    bc5c:	2200      	movs	r2, #0
    bc5e:	4c06      	ldr	r4, [pc, #24]	; (bc78 <_lseek_r+0x24>)
    bc60:	6022      	str	r2, [r4, #0]
    bc62:	001a      	movs	r2, r3
    bc64:	f7fb f85f 	bl	6d26 <_lseek>
    bc68:	1c43      	adds	r3, r0, #1
    bc6a:	d103      	bne.n	bc74 <_lseek_r+0x20>
    bc6c:	6823      	ldr	r3, [r4, #0]
    bc6e:	2b00      	cmp	r3, #0
    bc70:	d000      	beq.n	bc74 <_lseek_r+0x20>
    bc72:	602b      	str	r3, [r5, #0]
    bc74:	bd70      	pop	{r4, r5, r6, pc}
    bc76:	46c0      	nop			; (mov r8, r8)
    bc78:	200004e0 	.word	0x200004e0

0000bc7c <_read_r>:
    bc7c:	b570      	push	{r4, r5, r6, lr}
    bc7e:	0005      	movs	r5, r0
    bc80:	0008      	movs	r0, r1
    bc82:	0011      	movs	r1, r2
    bc84:	2200      	movs	r2, #0
    bc86:	4c06      	ldr	r4, [pc, #24]	; (bca0 <_read_r+0x24>)
    bc88:	6022      	str	r2, [r4, #0]
    bc8a:	001a      	movs	r2, r3
    bc8c:	f7f8 feca 	bl	4a24 <_read>
    bc90:	1c43      	adds	r3, r0, #1
    bc92:	d103      	bne.n	bc9c <_read_r+0x20>
    bc94:	6823      	ldr	r3, [r4, #0]
    bc96:	2b00      	cmp	r3, #0
    bc98:	d000      	beq.n	bc9c <_read_r+0x20>
    bc9a:	602b      	str	r3, [r5, #0]
    bc9c:	bd70      	pop	{r4, r5, r6, pc}
    bc9e:	46c0      	nop			; (mov r8, r8)
    bca0:	200004e0 	.word	0x200004e0

0000bca4 <__gnu_thumb1_case_uqi>:
    bca4:	b402      	push	{r1}
    bca6:	4671      	mov	r1, lr
    bca8:	0849      	lsrs	r1, r1, #1
    bcaa:	0049      	lsls	r1, r1, #1
    bcac:	5c09      	ldrb	r1, [r1, r0]
    bcae:	0049      	lsls	r1, r1, #1
    bcb0:	448e      	add	lr, r1
    bcb2:	bc02      	pop	{r1}
    bcb4:	4770      	bx	lr
    bcb6:	46c0      	nop			; (mov r8, r8)

0000bcb8 <__udivsi3>:
    bcb8:	2200      	movs	r2, #0
    bcba:	0843      	lsrs	r3, r0, #1
    bcbc:	428b      	cmp	r3, r1
    bcbe:	d374      	bcc.n	bdaa <__udivsi3+0xf2>
    bcc0:	0903      	lsrs	r3, r0, #4
    bcc2:	428b      	cmp	r3, r1
    bcc4:	d35f      	bcc.n	bd86 <__udivsi3+0xce>
    bcc6:	0a03      	lsrs	r3, r0, #8
    bcc8:	428b      	cmp	r3, r1
    bcca:	d344      	bcc.n	bd56 <__udivsi3+0x9e>
    bccc:	0b03      	lsrs	r3, r0, #12
    bcce:	428b      	cmp	r3, r1
    bcd0:	d328      	bcc.n	bd24 <__udivsi3+0x6c>
    bcd2:	0c03      	lsrs	r3, r0, #16
    bcd4:	428b      	cmp	r3, r1
    bcd6:	d30d      	bcc.n	bcf4 <__udivsi3+0x3c>
    bcd8:	22ff      	movs	r2, #255	; 0xff
    bcda:	0209      	lsls	r1, r1, #8
    bcdc:	ba12      	rev	r2, r2
    bcde:	0c03      	lsrs	r3, r0, #16
    bce0:	428b      	cmp	r3, r1
    bce2:	d302      	bcc.n	bcea <__udivsi3+0x32>
    bce4:	1212      	asrs	r2, r2, #8
    bce6:	0209      	lsls	r1, r1, #8
    bce8:	d065      	beq.n	bdb6 <__udivsi3+0xfe>
    bcea:	0b03      	lsrs	r3, r0, #12
    bcec:	428b      	cmp	r3, r1
    bcee:	d319      	bcc.n	bd24 <__udivsi3+0x6c>
    bcf0:	e000      	b.n	bcf4 <__udivsi3+0x3c>
    bcf2:	0a09      	lsrs	r1, r1, #8
    bcf4:	0bc3      	lsrs	r3, r0, #15
    bcf6:	428b      	cmp	r3, r1
    bcf8:	d301      	bcc.n	bcfe <__udivsi3+0x46>
    bcfa:	03cb      	lsls	r3, r1, #15
    bcfc:	1ac0      	subs	r0, r0, r3
    bcfe:	4152      	adcs	r2, r2
    bd00:	0b83      	lsrs	r3, r0, #14
    bd02:	428b      	cmp	r3, r1
    bd04:	d301      	bcc.n	bd0a <__udivsi3+0x52>
    bd06:	038b      	lsls	r3, r1, #14
    bd08:	1ac0      	subs	r0, r0, r3
    bd0a:	4152      	adcs	r2, r2
    bd0c:	0b43      	lsrs	r3, r0, #13
    bd0e:	428b      	cmp	r3, r1
    bd10:	d301      	bcc.n	bd16 <__udivsi3+0x5e>
    bd12:	034b      	lsls	r3, r1, #13
    bd14:	1ac0      	subs	r0, r0, r3
    bd16:	4152      	adcs	r2, r2
    bd18:	0b03      	lsrs	r3, r0, #12
    bd1a:	428b      	cmp	r3, r1
    bd1c:	d301      	bcc.n	bd22 <__udivsi3+0x6a>
    bd1e:	030b      	lsls	r3, r1, #12
    bd20:	1ac0      	subs	r0, r0, r3
    bd22:	4152      	adcs	r2, r2
    bd24:	0ac3      	lsrs	r3, r0, #11
    bd26:	428b      	cmp	r3, r1
    bd28:	d301      	bcc.n	bd2e <__udivsi3+0x76>
    bd2a:	02cb      	lsls	r3, r1, #11
    bd2c:	1ac0      	subs	r0, r0, r3
    bd2e:	4152      	adcs	r2, r2
    bd30:	0a83      	lsrs	r3, r0, #10
    bd32:	428b      	cmp	r3, r1
    bd34:	d301      	bcc.n	bd3a <__udivsi3+0x82>
    bd36:	028b      	lsls	r3, r1, #10
    bd38:	1ac0      	subs	r0, r0, r3
    bd3a:	4152      	adcs	r2, r2
    bd3c:	0a43      	lsrs	r3, r0, #9
    bd3e:	428b      	cmp	r3, r1
    bd40:	d301      	bcc.n	bd46 <__udivsi3+0x8e>
    bd42:	024b      	lsls	r3, r1, #9
    bd44:	1ac0      	subs	r0, r0, r3
    bd46:	4152      	adcs	r2, r2
    bd48:	0a03      	lsrs	r3, r0, #8
    bd4a:	428b      	cmp	r3, r1
    bd4c:	d301      	bcc.n	bd52 <__udivsi3+0x9a>
    bd4e:	020b      	lsls	r3, r1, #8
    bd50:	1ac0      	subs	r0, r0, r3
    bd52:	4152      	adcs	r2, r2
    bd54:	d2cd      	bcs.n	bcf2 <__udivsi3+0x3a>
    bd56:	09c3      	lsrs	r3, r0, #7
    bd58:	428b      	cmp	r3, r1
    bd5a:	d301      	bcc.n	bd60 <__udivsi3+0xa8>
    bd5c:	01cb      	lsls	r3, r1, #7
    bd5e:	1ac0      	subs	r0, r0, r3
    bd60:	4152      	adcs	r2, r2
    bd62:	0983      	lsrs	r3, r0, #6
    bd64:	428b      	cmp	r3, r1
    bd66:	d301      	bcc.n	bd6c <__udivsi3+0xb4>
    bd68:	018b      	lsls	r3, r1, #6
    bd6a:	1ac0      	subs	r0, r0, r3
    bd6c:	4152      	adcs	r2, r2
    bd6e:	0943      	lsrs	r3, r0, #5
    bd70:	428b      	cmp	r3, r1
    bd72:	d301      	bcc.n	bd78 <__udivsi3+0xc0>
    bd74:	014b      	lsls	r3, r1, #5
    bd76:	1ac0      	subs	r0, r0, r3
    bd78:	4152      	adcs	r2, r2
    bd7a:	0903      	lsrs	r3, r0, #4
    bd7c:	428b      	cmp	r3, r1
    bd7e:	d301      	bcc.n	bd84 <__udivsi3+0xcc>
    bd80:	010b      	lsls	r3, r1, #4
    bd82:	1ac0      	subs	r0, r0, r3
    bd84:	4152      	adcs	r2, r2
    bd86:	08c3      	lsrs	r3, r0, #3
    bd88:	428b      	cmp	r3, r1
    bd8a:	d301      	bcc.n	bd90 <__udivsi3+0xd8>
    bd8c:	00cb      	lsls	r3, r1, #3
    bd8e:	1ac0      	subs	r0, r0, r3
    bd90:	4152      	adcs	r2, r2
    bd92:	0883      	lsrs	r3, r0, #2
    bd94:	428b      	cmp	r3, r1
    bd96:	d301      	bcc.n	bd9c <__udivsi3+0xe4>
    bd98:	008b      	lsls	r3, r1, #2
    bd9a:	1ac0      	subs	r0, r0, r3
    bd9c:	4152      	adcs	r2, r2
    bd9e:	0843      	lsrs	r3, r0, #1
    bda0:	428b      	cmp	r3, r1
    bda2:	d301      	bcc.n	bda8 <__udivsi3+0xf0>
    bda4:	004b      	lsls	r3, r1, #1
    bda6:	1ac0      	subs	r0, r0, r3
    bda8:	4152      	adcs	r2, r2
    bdaa:	1a41      	subs	r1, r0, r1
    bdac:	d200      	bcs.n	bdb0 <__udivsi3+0xf8>
    bdae:	4601      	mov	r1, r0
    bdb0:	4152      	adcs	r2, r2
    bdb2:	4610      	mov	r0, r2
    bdb4:	4770      	bx	lr
    bdb6:	e7ff      	b.n	bdb8 <__udivsi3+0x100>
    bdb8:	b501      	push	{r0, lr}
    bdba:	2000      	movs	r0, #0
    bdbc:	f000 f8f0 	bl	bfa0 <__aeabi_idiv0>
    bdc0:	bd02      	pop	{r1, pc}
    bdc2:	46c0      	nop			; (mov r8, r8)

0000bdc4 <__aeabi_uidivmod>:
    bdc4:	2900      	cmp	r1, #0
    bdc6:	d0f7      	beq.n	bdb8 <__udivsi3+0x100>
    bdc8:	e776      	b.n	bcb8 <__udivsi3>
    bdca:	4770      	bx	lr

0000bdcc <__divsi3>:
    bdcc:	4603      	mov	r3, r0
    bdce:	430b      	orrs	r3, r1
    bdd0:	d47f      	bmi.n	bed2 <__divsi3+0x106>
    bdd2:	2200      	movs	r2, #0
    bdd4:	0843      	lsrs	r3, r0, #1
    bdd6:	428b      	cmp	r3, r1
    bdd8:	d374      	bcc.n	bec4 <__divsi3+0xf8>
    bdda:	0903      	lsrs	r3, r0, #4
    bddc:	428b      	cmp	r3, r1
    bdde:	d35f      	bcc.n	bea0 <__divsi3+0xd4>
    bde0:	0a03      	lsrs	r3, r0, #8
    bde2:	428b      	cmp	r3, r1
    bde4:	d344      	bcc.n	be70 <__divsi3+0xa4>
    bde6:	0b03      	lsrs	r3, r0, #12
    bde8:	428b      	cmp	r3, r1
    bdea:	d328      	bcc.n	be3e <__divsi3+0x72>
    bdec:	0c03      	lsrs	r3, r0, #16
    bdee:	428b      	cmp	r3, r1
    bdf0:	d30d      	bcc.n	be0e <__divsi3+0x42>
    bdf2:	22ff      	movs	r2, #255	; 0xff
    bdf4:	0209      	lsls	r1, r1, #8
    bdf6:	ba12      	rev	r2, r2
    bdf8:	0c03      	lsrs	r3, r0, #16
    bdfa:	428b      	cmp	r3, r1
    bdfc:	d302      	bcc.n	be04 <__divsi3+0x38>
    bdfe:	1212      	asrs	r2, r2, #8
    be00:	0209      	lsls	r1, r1, #8
    be02:	d065      	beq.n	bed0 <__divsi3+0x104>
    be04:	0b03      	lsrs	r3, r0, #12
    be06:	428b      	cmp	r3, r1
    be08:	d319      	bcc.n	be3e <__divsi3+0x72>
    be0a:	e000      	b.n	be0e <__divsi3+0x42>
    be0c:	0a09      	lsrs	r1, r1, #8
    be0e:	0bc3      	lsrs	r3, r0, #15
    be10:	428b      	cmp	r3, r1
    be12:	d301      	bcc.n	be18 <__divsi3+0x4c>
    be14:	03cb      	lsls	r3, r1, #15
    be16:	1ac0      	subs	r0, r0, r3
    be18:	4152      	adcs	r2, r2
    be1a:	0b83      	lsrs	r3, r0, #14
    be1c:	428b      	cmp	r3, r1
    be1e:	d301      	bcc.n	be24 <__divsi3+0x58>
    be20:	038b      	lsls	r3, r1, #14
    be22:	1ac0      	subs	r0, r0, r3
    be24:	4152      	adcs	r2, r2
    be26:	0b43      	lsrs	r3, r0, #13
    be28:	428b      	cmp	r3, r1
    be2a:	d301      	bcc.n	be30 <__divsi3+0x64>
    be2c:	034b      	lsls	r3, r1, #13
    be2e:	1ac0      	subs	r0, r0, r3
    be30:	4152      	adcs	r2, r2
    be32:	0b03      	lsrs	r3, r0, #12
    be34:	428b      	cmp	r3, r1
    be36:	d301      	bcc.n	be3c <__divsi3+0x70>
    be38:	030b      	lsls	r3, r1, #12
    be3a:	1ac0      	subs	r0, r0, r3
    be3c:	4152      	adcs	r2, r2
    be3e:	0ac3      	lsrs	r3, r0, #11
    be40:	428b      	cmp	r3, r1
    be42:	d301      	bcc.n	be48 <__divsi3+0x7c>
    be44:	02cb      	lsls	r3, r1, #11
    be46:	1ac0      	subs	r0, r0, r3
    be48:	4152      	adcs	r2, r2
    be4a:	0a83      	lsrs	r3, r0, #10
    be4c:	428b      	cmp	r3, r1
    be4e:	d301      	bcc.n	be54 <__divsi3+0x88>
    be50:	028b      	lsls	r3, r1, #10
    be52:	1ac0      	subs	r0, r0, r3
    be54:	4152      	adcs	r2, r2
    be56:	0a43      	lsrs	r3, r0, #9
    be58:	428b      	cmp	r3, r1
    be5a:	d301      	bcc.n	be60 <__divsi3+0x94>
    be5c:	024b      	lsls	r3, r1, #9
    be5e:	1ac0      	subs	r0, r0, r3
    be60:	4152      	adcs	r2, r2
    be62:	0a03      	lsrs	r3, r0, #8
    be64:	428b      	cmp	r3, r1
    be66:	d301      	bcc.n	be6c <__divsi3+0xa0>
    be68:	020b      	lsls	r3, r1, #8
    be6a:	1ac0      	subs	r0, r0, r3
    be6c:	4152      	adcs	r2, r2
    be6e:	d2cd      	bcs.n	be0c <__divsi3+0x40>
    be70:	09c3      	lsrs	r3, r0, #7
    be72:	428b      	cmp	r3, r1
    be74:	d301      	bcc.n	be7a <__divsi3+0xae>
    be76:	01cb      	lsls	r3, r1, #7
    be78:	1ac0      	subs	r0, r0, r3
    be7a:	4152      	adcs	r2, r2
    be7c:	0983      	lsrs	r3, r0, #6
    be7e:	428b      	cmp	r3, r1
    be80:	d301      	bcc.n	be86 <__divsi3+0xba>
    be82:	018b      	lsls	r3, r1, #6
    be84:	1ac0      	subs	r0, r0, r3
    be86:	4152      	adcs	r2, r2
    be88:	0943      	lsrs	r3, r0, #5
    be8a:	428b      	cmp	r3, r1
    be8c:	d301      	bcc.n	be92 <__divsi3+0xc6>
    be8e:	014b      	lsls	r3, r1, #5
    be90:	1ac0      	subs	r0, r0, r3
    be92:	4152      	adcs	r2, r2
    be94:	0903      	lsrs	r3, r0, #4
    be96:	428b      	cmp	r3, r1
    be98:	d301      	bcc.n	be9e <__divsi3+0xd2>
    be9a:	010b      	lsls	r3, r1, #4
    be9c:	1ac0      	subs	r0, r0, r3
    be9e:	4152      	adcs	r2, r2
    bea0:	08c3      	lsrs	r3, r0, #3
    bea2:	428b      	cmp	r3, r1
    bea4:	d301      	bcc.n	beaa <__divsi3+0xde>
    bea6:	00cb      	lsls	r3, r1, #3
    bea8:	1ac0      	subs	r0, r0, r3
    beaa:	4152      	adcs	r2, r2
    beac:	0883      	lsrs	r3, r0, #2
    beae:	428b      	cmp	r3, r1
    beb0:	d301      	bcc.n	beb6 <__divsi3+0xea>
    beb2:	008b      	lsls	r3, r1, #2
    beb4:	1ac0      	subs	r0, r0, r3
    beb6:	4152      	adcs	r2, r2
    beb8:	0843      	lsrs	r3, r0, #1
    beba:	428b      	cmp	r3, r1
    bebc:	d301      	bcc.n	bec2 <__divsi3+0xf6>
    bebe:	004b      	lsls	r3, r1, #1
    bec0:	1ac0      	subs	r0, r0, r3
    bec2:	4152      	adcs	r2, r2
    bec4:	1a41      	subs	r1, r0, r1
    bec6:	d200      	bcs.n	beca <__divsi3+0xfe>
    bec8:	4601      	mov	r1, r0
    beca:	4152      	adcs	r2, r2
    becc:	4610      	mov	r0, r2
    bece:	4770      	bx	lr
    bed0:	e05d      	b.n	bf8e <__divsi3+0x1c2>
    bed2:	0fca      	lsrs	r2, r1, #31
    bed4:	d000      	beq.n	bed8 <__divsi3+0x10c>
    bed6:	4249      	negs	r1, r1
    bed8:	1003      	asrs	r3, r0, #32
    beda:	d300      	bcc.n	bede <__divsi3+0x112>
    bedc:	4240      	negs	r0, r0
    bede:	4053      	eors	r3, r2
    bee0:	2200      	movs	r2, #0
    bee2:	469c      	mov	ip, r3
    bee4:	0903      	lsrs	r3, r0, #4
    bee6:	428b      	cmp	r3, r1
    bee8:	d32d      	bcc.n	bf46 <__divsi3+0x17a>
    beea:	0a03      	lsrs	r3, r0, #8
    beec:	428b      	cmp	r3, r1
    beee:	d312      	bcc.n	bf16 <__divsi3+0x14a>
    bef0:	22fc      	movs	r2, #252	; 0xfc
    bef2:	0189      	lsls	r1, r1, #6
    bef4:	ba12      	rev	r2, r2
    bef6:	0a03      	lsrs	r3, r0, #8
    bef8:	428b      	cmp	r3, r1
    befa:	d30c      	bcc.n	bf16 <__divsi3+0x14a>
    befc:	0189      	lsls	r1, r1, #6
    befe:	1192      	asrs	r2, r2, #6
    bf00:	428b      	cmp	r3, r1
    bf02:	d308      	bcc.n	bf16 <__divsi3+0x14a>
    bf04:	0189      	lsls	r1, r1, #6
    bf06:	1192      	asrs	r2, r2, #6
    bf08:	428b      	cmp	r3, r1
    bf0a:	d304      	bcc.n	bf16 <__divsi3+0x14a>
    bf0c:	0189      	lsls	r1, r1, #6
    bf0e:	d03a      	beq.n	bf86 <__divsi3+0x1ba>
    bf10:	1192      	asrs	r2, r2, #6
    bf12:	e000      	b.n	bf16 <__divsi3+0x14a>
    bf14:	0989      	lsrs	r1, r1, #6
    bf16:	09c3      	lsrs	r3, r0, #7
    bf18:	428b      	cmp	r3, r1
    bf1a:	d301      	bcc.n	bf20 <__divsi3+0x154>
    bf1c:	01cb      	lsls	r3, r1, #7
    bf1e:	1ac0      	subs	r0, r0, r3
    bf20:	4152      	adcs	r2, r2
    bf22:	0983      	lsrs	r3, r0, #6
    bf24:	428b      	cmp	r3, r1
    bf26:	d301      	bcc.n	bf2c <__divsi3+0x160>
    bf28:	018b      	lsls	r3, r1, #6
    bf2a:	1ac0      	subs	r0, r0, r3
    bf2c:	4152      	adcs	r2, r2
    bf2e:	0943      	lsrs	r3, r0, #5
    bf30:	428b      	cmp	r3, r1
    bf32:	d301      	bcc.n	bf38 <__divsi3+0x16c>
    bf34:	014b      	lsls	r3, r1, #5
    bf36:	1ac0      	subs	r0, r0, r3
    bf38:	4152      	adcs	r2, r2
    bf3a:	0903      	lsrs	r3, r0, #4
    bf3c:	428b      	cmp	r3, r1
    bf3e:	d301      	bcc.n	bf44 <__divsi3+0x178>
    bf40:	010b      	lsls	r3, r1, #4
    bf42:	1ac0      	subs	r0, r0, r3
    bf44:	4152      	adcs	r2, r2
    bf46:	08c3      	lsrs	r3, r0, #3
    bf48:	428b      	cmp	r3, r1
    bf4a:	d301      	bcc.n	bf50 <__divsi3+0x184>
    bf4c:	00cb      	lsls	r3, r1, #3
    bf4e:	1ac0      	subs	r0, r0, r3
    bf50:	4152      	adcs	r2, r2
    bf52:	0883      	lsrs	r3, r0, #2
    bf54:	428b      	cmp	r3, r1
    bf56:	d301      	bcc.n	bf5c <__divsi3+0x190>
    bf58:	008b      	lsls	r3, r1, #2
    bf5a:	1ac0      	subs	r0, r0, r3
    bf5c:	4152      	adcs	r2, r2
    bf5e:	d2d9      	bcs.n	bf14 <__divsi3+0x148>
    bf60:	0843      	lsrs	r3, r0, #1
    bf62:	428b      	cmp	r3, r1
    bf64:	d301      	bcc.n	bf6a <__divsi3+0x19e>
    bf66:	004b      	lsls	r3, r1, #1
    bf68:	1ac0      	subs	r0, r0, r3
    bf6a:	4152      	adcs	r2, r2
    bf6c:	1a41      	subs	r1, r0, r1
    bf6e:	d200      	bcs.n	bf72 <__divsi3+0x1a6>
    bf70:	4601      	mov	r1, r0
    bf72:	4663      	mov	r3, ip
    bf74:	4152      	adcs	r2, r2
    bf76:	105b      	asrs	r3, r3, #1
    bf78:	4610      	mov	r0, r2
    bf7a:	d301      	bcc.n	bf80 <__divsi3+0x1b4>
    bf7c:	4240      	negs	r0, r0
    bf7e:	2b00      	cmp	r3, #0
    bf80:	d500      	bpl.n	bf84 <__divsi3+0x1b8>
    bf82:	4249      	negs	r1, r1
    bf84:	4770      	bx	lr
    bf86:	4663      	mov	r3, ip
    bf88:	105b      	asrs	r3, r3, #1
    bf8a:	d300      	bcc.n	bf8e <__divsi3+0x1c2>
    bf8c:	4240      	negs	r0, r0
    bf8e:	b501      	push	{r0, lr}
    bf90:	2000      	movs	r0, #0
    bf92:	f000 f805 	bl	bfa0 <__aeabi_idiv0>
    bf96:	bd02      	pop	{r1, pc}

0000bf98 <__aeabi_idivmod>:
    bf98:	2900      	cmp	r1, #0
    bf9a:	d0f8      	beq.n	bf8e <__divsi3+0x1c2>
    bf9c:	e716      	b.n	bdcc <__divsi3>
    bf9e:	4770      	bx	lr

0000bfa0 <__aeabi_idiv0>:
    bfa0:	4770      	bx	lr
    bfa2:	46c0      	nop			; (mov r8, r8)

0000bfa4 <__aeabi_cdrcmple>:
    bfa4:	4684      	mov	ip, r0
    bfa6:	1c10      	adds	r0, r2, #0
    bfa8:	4662      	mov	r2, ip
    bfaa:	468c      	mov	ip, r1
    bfac:	1c19      	adds	r1, r3, #0
    bfae:	4663      	mov	r3, ip
    bfb0:	e000      	b.n	bfb4 <__aeabi_cdcmpeq>
    bfb2:	46c0      	nop			; (mov r8, r8)

0000bfb4 <__aeabi_cdcmpeq>:
    bfb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bfb6:	f001 fa3d 	bl	d434 <__ledf2>
    bfba:	2800      	cmp	r0, #0
    bfbc:	d401      	bmi.n	bfc2 <__aeabi_cdcmpeq+0xe>
    bfbe:	2100      	movs	r1, #0
    bfc0:	42c8      	cmn	r0, r1
    bfc2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000bfc4 <__aeabi_dcmpeq>:
    bfc4:	b510      	push	{r4, lr}
    bfc6:	f001 f997 	bl	d2f8 <__eqdf2>
    bfca:	4240      	negs	r0, r0
    bfcc:	3001      	adds	r0, #1
    bfce:	bd10      	pop	{r4, pc}

0000bfd0 <__aeabi_dcmplt>:
    bfd0:	b510      	push	{r4, lr}
    bfd2:	f001 fa2f 	bl	d434 <__ledf2>
    bfd6:	2800      	cmp	r0, #0
    bfd8:	db01      	blt.n	bfde <__aeabi_dcmplt+0xe>
    bfda:	2000      	movs	r0, #0
    bfdc:	bd10      	pop	{r4, pc}
    bfde:	2001      	movs	r0, #1
    bfe0:	bd10      	pop	{r4, pc}
    bfe2:	46c0      	nop			; (mov r8, r8)

0000bfe4 <__aeabi_dcmple>:
    bfe4:	b510      	push	{r4, lr}
    bfe6:	f001 fa25 	bl	d434 <__ledf2>
    bfea:	2800      	cmp	r0, #0
    bfec:	dd01      	ble.n	bff2 <__aeabi_dcmple+0xe>
    bfee:	2000      	movs	r0, #0
    bff0:	bd10      	pop	{r4, pc}
    bff2:	2001      	movs	r0, #1
    bff4:	bd10      	pop	{r4, pc}
    bff6:	46c0      	nop			; (mov r8, r8)

0000bff8 <__aeabi_dcmpgt>:
    bff8:	b510      	push	{r4, lr}
    bffa:	f001 f9b7 	bl	d36c <__gedf2>
    bffe:	2800      	cmp	r0, #0
    c000:	dc01      	bgt.n	c006 <__aeabi_dcmpgt+0xe>
    c002:	2000      	movs	r0, #0
    c004:	bd10      	pop	{r4, pc}
    c006:	2001      	movs	r0, #1
    c008:	bd10      	pop	{r4, pc}
    c00a:	46c0      	nop			; (mov r8, r8)

0000c00c <__aeabi_dcmpge>:
    c00c:	b510      	push	{r4, lr}
    c00e:	f001 f9ad 	bl	d36c <__gedf2>
    c012:	2800      	cmp	r0, #0
    c014:	da01      	bge.n	c01a <__aeabi_dcmpge+0xe>
    c016:	2000      	movs	r0, #0
    c018:	bd10      	pop	{r4, pc}
    c01a:	2001      	movs	r0, #1
    c01c:	bd10      	pop	{r4, pc}
    c01e:	46c0      	nop			; (mov r8, r8)

0000c020 <__aeabi_lmul>:
    c020:	b5f0      	push	{r4, r5, r6, r7, lr}
    c022:	46ce      	mov	lr, r9
    c024:	4647      	mov	r7, r8
    c026:	0415      	lsls	r5, r2, #16
    c028:	0c2d      	lsrs	r5, r5, #16
    c02a:	002e      	movs	r6, r5
    c02c:	b580      	push	{r7, lr}
    c02e:	0407      	lsls	r7, r0, #16
    c030:	0c14      	lsrs	r4, r2, #16
    c032:	0c3f      	lsrs	r7, r7, #16
    c034:	4699      	mov	r9, r3
    c036:	0c03      	lsrs	r3, r0, #16
    c038:	437e      	muls	r6, r7
    c03a:	435d      	muls	r5, r3
    c03c:	4367      	muls	r7, r4
    c03e:	4363      	muls	r3, r4
    c040:	197f      	adds	r7, r7, r5
    c042:	0c34      	lsrs	r4, r6, #16
    c044:	19e4      	adds	r4, r4, r7
    c046:	469c      	mov	ip, r3
    c048:	42a5      	cmp	r5, r4
    c04a:	d903      	bls.n	c054 <__aeabi_lmul+0x34>
    c04c:	2380      	movs	r3, #128	; 0x80
    c04e:	025b      	lsls	r3, r3, #9
    c050:	4698      	mov	r8, r3
    c052:	44c4      	add	ip, r8
    c054:	464b      	mov	r3, r9
    c056:	4351      	muls	r1, r2
    c058:	4343      	muls	r3, r0
    c05a:	0436      	lsls	r6, r6, #16
    c05c:	0c36      	lsrs	r6, r6, #16
    c05e:	0c25      	lsrs	r5, r4, #16
    c060:	0424      	lsls	r4, r4, #16
    c062:	4465      	add	r5, ip
    c064:	19a4      	adds	r4, r4, r6
    c066:	1859      	adds	r1, r3, r1
    c068:	1949      	adds	r1, r1, r5
    c06a:	0020      	movs	r0, r4
    c06c:	bc0c      	pop	{r2, r3}
    c06e:	4690      	mov	r8, r2
    c070:	4699      	mov	r9, r3
    c072:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c074 <__aeabi_fdiv>:
    c074:	b5f0      	push	{r4, r5, r6, r7, lr}
    c076:	4657      	mov	r7, sl
    c078:	464e      	mov	r6, r9
    c07a:	46de      	mov	lr, fp
    c07c:	4645      	mov	r5, r8
    c07e:	b5e0      	push	{r5, r6, r7, lr}
    c080:	0244      	lsls	r4, r0, #9
    c082:	0043      	lsls	r3, r0, #1
    c084:	0fc6      	lsrs	r6, r0, #31
    c086:	b083      	sub	sp, #12
    c088:	1c0f      	adds	r7, r1, #0
    c08a:	0a64      	lsrs	r4, r4, #9
    c08c:	0e1b      	lsrs	r3, r3, #24
    c08e:	46b2      	mov	sl, r6
    c090:	d053      	beq.n	c13a <__aeabi_fdiv+0xc6>
    c092:	2bff      	cmp	r3, #255	; 0xff
    c094:	d027      	beq.n	c0e6 <__aeabi_fdiv+0x72>
    c096:	2280      	movs	r2, #128	; 0x80
    c098:	00e4      	lsls	r4, r4, #3
    c09a:	04d2      	lsls	r2, r2, #19
    c09c:	4314      	orrs	r4, r2
    c09e:	227f      	movs	r2, #127	; 0x7f
    c0a0:	4252      	negs	r2, r2
    c0a2:	4690      	mov	r8, r2
    c0a4:	4498      	add	r8, r3
    c0a6:	2300      	movs	r3, #0
    c0a8:	4699      	mov	r9, r3
    c0aa:	469b      	mov	fp, r3
    c0ac:	027d      	lsls	r5, r7, #9
    c0ae:	0078      	lsls	r0, r7, #1
    c0b0:	0ffb      	lsrs	r3, r7, #31
    c0b2:	0a6d      	lsrs	r5, r5, #9
    c0b4:	0e00      	lsrs	r0, r0, #24
    c0b6:	9300      	str	r3, [sp, #0]
    c0b8:	d024      	beq.n	c104 <__aeabi_fdiv+0x90>
    c0ba:	28ff      	cmp	r0, #255	; 0xff
    c0bc:	d046      	beq.n	c14c <__aeabi_fdiv+0xd8>
    c0be:	2380      	movs	r3, #128	; 0x80
    c0c0:	2100      	movs	r1, #0
    c0c2:	00ed      	lsls	r5, r5, #3
    c0c4:	04db      	lsls	r3, r3, #19
    c0c6:	431d      	orrs	r5, r3
    c0c8:	387f      	subs	r0, #127	; 0x7f
    c0ca:	4647      	mov	r7, r8
    c0cc:	1a38      	subs	r0, r7, r0
    c0ce:	464f      	mov	r7, r9
    c0d0:	430f      	orrs	r7, r1
    c0d2:	00bf      	lsls	r7, r7, #2
    c0d4:	46b9      	mov	r9, r7
    c0d6:	0033      	movs	r3, r6
    c0d8:	9a00      	ldr	r2, [sp, #0]
    c0da:	4f87      	ldr	r7, [pc, #540]	; (c2f8 <__aeabi_fdiv+0x284>)
    c0dc:	4053      	eors	r3, r2
    c0de:	464a      	mov	r2, r9
    c0e0:	58ba      	ldr	r2, [r7, r2]
    c0e2:	9301      	str	r3, [sp, #4]
    c0e4:	4697      	mov	pc, r2
    c0e6:	2c00      	cmp	r4, #0
    c0e8:	d14e      	bne.n	c188 <__aeabi_fdiv+0x114>
    c0ea:	2308      	movs	r3, #8
    c0ec:	4699      	mov	r9, r3
    c0ee:	33f7      	adds	r3, #247	; 0xf7
    c0f0:	4698      	mov	r8, r3
    c0f2:	3bfd      	subs	r3, #253	; 0xfd
    c0f4:	469b      	mov	fp, r3
    c0f6:	027d      	lsls	r5, r7, #9
    c0f8:	0078      	lsls	r0, r7, #1
    c0fa:	0ffb      	lsrs	r3, r7, #31
    c0fc:	0a6d      	lsrs	r5, r5, #9
    c0fe:	0e00      	lsrs	r0, r0, #24
    c100:	9300      	str	r3, [sp, #0]
    c102:	d1da      	bne.n	c0ba <__aeabi_fdiv+0x46>
    c104:	2d00      	cmp	r5, #0
    c106:	d126      	bne.n	c156 <__aeabi_fdiv+0xe2>
    c108:	2000      	movs	r0, #0
    c10a:	2101      	movs	r1, #1
    c10c:	0033      	movs	r3, r6
    c10e:	9a00      	ldr	r2, [sp, #0]
    c110:	4f7a      	ldr	r7, [pc, #488]	; (c2fc <__aeabi_fdiv+0x288>)
    c112:	4053      	eors	r3, r2
    c114:	4642      	mov	r2, r8
    c116:	1a10      	subs	r0, r2, r0
    c118:	464a      	mov	r2, r9
    c11a:	430a      	orrs	r2, r1
    c11c:	0092      	lsls	r2, r2, #2
    c11e:	58ba      	ldr	r2, [r7, r2]
    c120:	001d      	movs	r5, r3
    c122:	4697      	mov	pc, r2
    c124:	9b00      	ldr	r3, [sp, #0]
    c126:	002c      	movs	r4, r5
    c128:	469a      	mov	sl, r3
    c12a:	468b      	mov	fp, r1
    c12c:	465b      	mov	r3, fp
    c12e:	2b02      	cmp	r3, #2
    c130:	d131      	bne.n	c196 <__aeabi_fdiv+0x122>
    c132:	4653      	mov	r3, sl
    c134:	21ff      	movs	r1, #255	; 0xff
    c136:	2400      	movs	r4, #0
    c138:	e038      	b.n	c1ac <__aeabi_fdiv+0x138>
    c13a:	2c00      	cmp	r4, #0
    c13c:	d117      	bne.n	c16e <__aeabi_fdiv+0xfa>
    c13e:	2304      	movs	r3, #4
    c140:	4699      	mov	r9, r3
    c142:	2300      	movs	r3, #0
    c144:	4698      	mov	r8, r3
    c146:	3301      	adds	r3, #1
    c148:	469b      	mov	fp, r3
    c14a:	e7af      	b.n	c0ac <__aeabi_fdiv+0x38>
    c14c:	20ff      	movs	r0, #255	; 0xff
    c14e:	2d00      	cmp	r5, #0
    c150:	d10b      	bne.n	c16a <__aeabi_fdiv+0xf6>
    c152:	2102      	movs	r1, #2
    c154:	e7da      	b.n	c10c <__aeabi_fdiv+0x98>
    c156:	0028      	movs	r0, r5
    c158:	f002 f90e 	bl	e378 <__clzsi2>
    c15c:	1f43      	subs	r3, r0, #5
    c15e:	409d      	lsls	r5, r3
    c160:	2376      	movs	r3, #118	; 0x76
    c162:	425b      	negs	r3, r3
    c164:	1a18      	subs	r0, r3, r0
    c166:	2100      	movs	r1, #0
    c168:	e7af      	b.n	c0ca <__aeabi_fdiv+0x56>
    c16a:	2103      	movs	r1, #3
    c16c:	e7ad      	b.n	c0ca <__aeabi_fdiv+0x56>
    c16e:	0020      	movs	r0, r4
    c170:	f002 f902 	bl	e378 <__clzsi2>
    c174:	1f43      	subs	r3, r0, #5
    c176:	409c      	lsls	r4, r3
    c178:	2376      	movs	r3, #118	; 0x76
    c17a:	425b      	negs	r3, r3
    c17c:	1a1b      	subs	r3, r3, r0
    c17e:	4698      	mov	r8, r3
    c180:	2300      	movs	r3, #0
    c182:	4699      	mov	r9, r3
    c184:	469b      	mov	fp, r3
    c186:	e791      	b.n	c0ac <__aeabi_fdiv+0x38>
    c188:	230c      	movs	r3, #12
    c18a:	4699      	mov	r9, r3
    c18c:	33f3      	adds	r3, #243	; 0xf3
    c18e:	4698      	mov	r8, r3
    c190:	3bfc      	subs	r3, #252	; 0xfc
    c192:	469b      	mov	fp, r3
    c194:	e78a      	b.n	c0ac <__aeabi_fdiv+0x38>
    c196:	2b03      	cmp	r3, #3
    c198:	d100      	bne.n	c19c <__aeabi_fdiv+0x128>
    c19a:	e0a5      	b.n	c2e8 <__aeabi_fdiv+0x274>
    c19c:	4655      	mov	r5, sl
    c19e:	2b01      	cmp	r3, #1
    c1a0:	d000      	beq.n	c1a4 <__aeabi_fdiv+0x130>
    c1a2:	e081      	b.n	c2a8 <__aeabi_fdiv+0x234>
    c1a4:	2301      	movs	r3, #1
    c1a6:	2100      	movs	r1, #0
    c1a8:	2400      	movs	r4, #0
    c1aa:	402b      	ands	r3, r5
    c1ac:	0264      	lsls	r4, r4, #9
    c1ae:	05c9      	lsls	r1, r1, #23
    c1b0:	0a60      	lsrs	r0, r4, #9
    c1b2:	07db      	lsls	r3, r3, #31
    c1b4:	4308      	orrs	r0, r1
    c1b6:	4318      	orrs	r0, r3
    c1b8:	b003      	add	sp, #12
    c1ba:	bc3c      	pop	{r2, r3, r4, r5}
    c1bc:	4690      	mov	r8, r2
    c1be:	4699      	mov	r9, r3
    c1c0:	46a2      	mov	sl, r4
    c1c2:	46ab      	mov	fp, r5
    c1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1c6:	2480      	movs	r4, #128	; 0x80
    c1c8:	2300      	movs	r3, #0
    c1ca:	03e4      	lsls	r4, r4, #15
    c1cc:	21ff      	movs	r1, #255	; 0xff
    c1ce:	e7ed      	b.n	c1ac <__aeabi_fdiv+0x138>
    c1d0:	21ff      	movs	r1, #255	; 0xff
    c1d2:	2400      	movs	r4, #0
    c1d4:	e7ea      	b.n	c1ac <__aeabi_fdiv+0x138>
    c1d6:	2301      	movs	r3, #1
    c1d8:	1a59      	subs	r1, r3, r1
    c1da:	291b      	cmp	r1, #27
    c1dc:	dd66      	ble.n	c2ac <__aeabi_fdiv+0x238>
    c1de:	9a01      	ldr	r2, [sp, #4]
    c1e0:	4013      	ands	r3, r2
    c1e2:	2100      	movs	r1, #0
    c1e4:	2400      	movs	r4, #0
    c1e6:	e7e1      	b.n	c1ac <__aeabi_fdiv+0x138>
    c1e8:	2380      	movs	r3, #128	; 0x80
    c1ea:	03db      	lsls	r3, r3, #15
    c1ec:	421c      	tst	r4, r3
    c1ee:	d038      	beq.n	c262 <__aeabi_fdiv+0x1ee>
    c1f0:	421d      	tst	r5, r3
    c1f2:	d051      	beq.n	c298 <__aeabi_fdiv+0x224>
    c1f4:	431c      	orrs	r4, r3
    c1f6:	0264      	lsls	r4, r4, #9
    c1f8:	0a64      	lsrs	r4, r4, #9
    c1fa:	0033      	movs	r3, r6
    c1fc:	21ff      	movs	r1, #255	; 0xff
    c1fe:	e7d5      	b.n	c1ac <__aeabi_fdiv+0x138>
    c200:	0163      	lsls	r3, r4, #5
    c202:	016c      	lsls	r4, r5, #5
    c204:	42a3      	cmp	r3, r4
    c206:	d23b      	bcs.n	c280 <__aeabi_fdiv+0x20c>
    c208:	261b      	movs	r6, #27
    c20a:	2100      	movs	r1, #0
    c20c:	3801      	subs	r0, #1
    c20e:	2501      	movs	r5, #1
    c210:	001f      	movs	r7, r3
    c212:	0049      	lsls	r1, r1, #1
    c214:	005b      	lsls	r3, r3, #1
    c216:	2f00      	cmp	r7, #0
    c218:	db01      	blt.n	c21e <__aeabi_fdiv+0x1aa>
    c21a:	429c      	cmp	r4, r3
    c21c:	d801      	bhi.n	c222 <__aeabi_fdiv+0x1ae>
    c21e:	1b1b      	subs	r3, r3, r4
    c220:	4329      	orrs	r1, r5
    c222:	3e01      	subs	r6, #1
    c224:	2e00      	cmp	r6, #0
    c226:	d1f3      	bne.n	c210 <__aeabi_fdiv+0x19c>
    c228:	001c      	movs	r4, r3
    c22a:	1e63      	subs	r3, r4, #1
    c22c:	419c      	sbcs	r4, r3
    c22e:	430c      	orrs	r4, r1
    c230:	0001      	movs	r1, r0
    c232:	317f      	adds	r1, #127	; 0x7f
    c234:	2900      	cmp	r1, #0
    c236:	ddce      	ble.n	c1d6 <__aeabi_fdiv+0x162>
    c238:	0763      	lsls	r3, r4, #29
    c23a:	d004      	beq.n	c246 <__aeabi_fdiv+0x1d2>
    c23c:	230f      	movs	r3, #15
    c23e:	4023      	ands	r3, r4
    c240:	2b04      	cmp	r3, #4
    c242:	d000      	beq.n	c246 <__aeabi_fdiv+0x1d2>
    c244:	3404      	adds	r4, #4
    c246:	0123      	lsls	r3, r4, #4
    c248:	d503      	bpl.n	c252 <__aeabi_fdiv+0x1de>
    c24a:	0001      	movs	r1, r0
    c24c:	4b2c      	ldr	r3, [pc, #176]	; (c300 <__aeabi_fdiv+0x28c>)
    c24e:	3180      	adds	r1, #128	; 0x80
    c250:	401c      	ands	r4, r3
    c252:	29fe      	cmp	r1, #254	; 0xfe
    c254:	dd0d      	ble.n	c272 <__aeabi_fdiv+0x1fe>
    c256:	2301      	movs	r3, #1
    c258:	9a01      	ldr	r2, [sp, #4]
    c25a:	21ff      	movs	r1, #255	; 0xff
    c25c:	4013      	ands	r3, r2
    c25e:	2400      	movs	r4, #0
    c260:	e7a4      	b.n	c1ac <__aeabi_fdiv+0x138>
    c262:	2380      	movs	r3, #128	; 0x80
    c264:	03db      	lsls	r3, r3, #15
    c266:	431c      	orrs	r4, r3
    c268:	0264      	lsls	r4, r4, #9
    c26a:	0a64      	lsrs	r4, r4, #9
    c26c:	0033      	movs	r3, r6
    c26e:	21ff      	movs	r1, #255	; 0xff
    c270:	e79c      	b.n	c1ac <__aeabi_fdiv+0x138>
    c272:	2301      	movs	r3, #1
    c274:	9a01      	ldr	r2, [sp, #4]
    c276:	01a4      	lsls	r4, r4, #6
    c278:	0a64      	lsrs	r4, r4, #9
    c27a:	b2c9      	uxtb	r1, r1
    c27c:	4013      	ands	r3, r2
    c27e:	e795      	b.n	c1ac <__aeabi_fdiv+0x138>
    c280:	1b1b      	subs	r3, r3, r4
    c282:	261a      	movs	r6, #26
    c284:	2101      	movs	r1, #1
    c286:	e7c2      	b.n	c20e <__aeabi_fdiv+0x19a>
    c288:	9b00      	ldr	r3, [sp, #0]
    c28a:	468b      	mov	fp, r1
    c28c:	469a      	mov	sl, r3
    c28e:	2400      	movs	r4, #0
    c290:	e74c      	b.n	c12c <__aeabi_fdiv+0xb8>
    c292:	0263      	lsls	r3, r4, #9
    c294:	d5e5      	bpl.n	c262 <__aeabi_fdiv+0x1ee>
    c296:	2500      	movs	r5, #0
    c298:	2480      	movs	r4, #128	; 0x80
    c29a:	03e4      	lsls	r4, r4, #15
    c29c:	432c      	orrs	r4, r5
    c29e:	0264      	lsls	r4, r4, #9
    c2a0:	0a64      	lsrs	r4, r4, #9
    c2a2:	9b00      	ldr	r3, [sp, #0]
    c2a4:	21ff      	movs	r1, #255	; 0xff
    c2a6:	e781      	b.n	c1ac <__aeabi_fdiv+0x138>
    c2a8:	9501      	str	r5, [sp, #4]
    c2aa:	e7c1      	b.n	c230 <__aeabi_fdiv+0x1bc>
    c2ac:	0023      	movs	r3, r4
    c2ae:	2020      	movs	r0, #32
    c2b0:	40cb      	lsrs	r3, r1
    c2b2:	1a41      	subs	r1, r0, r1
    c2b4:	408c      	lsls	r4, r1
    c2b6:	1e61      	subs	r1, r4, #1
    c2b8:	418c      	sbcs	r4, r1
    c2ba:	431c      	orrs	r4, r3
    c2bc:	0763      	lsls	r3, r4, #29
    c2be:	d004      	beq.n	c2ca <__aeabi_fdiv+0x256>
    c2c0:	230f      	movs	r3, #15
    c2c2:	4023      	ands	r3, r4
    c2c4:	2b04      	cmp	r3, #4
    c2c6:	d000      	beq.n	c2ca <__aeabi_fdiv+0x256>
    c2c8:	3404      	adds	r4, #4
    c2ca:	0163      	lsls	r3, r4, #5
    c2cc:	d505      	bpl.n	c2da <__aeabi_fdiv+0x266>
    c2ce:	2301      	movs	r3, #1
    c2d0:	9a01      	ldr	r2, [sp, #4]
    c2d2:	2101      	movs	r1, #1
    c2d4:	4013      	ands	r3, r2
    c2d6:	2400      	movs	r4, #0
    c2d8:	e768      	b.n	c1ac <__aeabi_fdiv+0x138>
    c2da:	2301      	movs	r3, #1
    c2dc:	9a01      	ldr	r2, [sp, #4]
    c2de:	01a4      	lsls	r4, r4, #6
    c2e0:	0a64      	lsrs	r4, r4, #9
    c2e2:	4013      	ands	r3, r2
    c2e4:	2100      	movs	r1, #0
    c2e6:	e761      	b.n	c1ac <__aeabi_fdiv+0x138>
    c2e8:	2380      	movs	r3, #128	; 0x80
    c2ea:	03db      	lsls	r3, r3, #15
    c2ec:	431c      	orrs	r4, r3
    c2ee:	0264      	lsls	r4, r4, #9
    c2f0:	0a64      	lsrs	r4, r4, #9
    c2f2:	4653      	mov	r3, sl
    c2f4:	21ff      	movs	r1, #255	; 0xff
    c2f6:	e759      	b.n	c1ac <__aeabi_fdiv+0x138>
    c2f8:	0000f1e0 	.word	0x0000f1e0
    c2fc:	0000f220 	.word	0x0000f220
    c300:	f7ffffff 	.word	0xf7ffffff

0000c304 <__aeabi_fmul>:
    c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c306:	4657      	mov	r7, sl
    c308:	464e      	mov	r6, r9
    c30a:	4645      	mov	r5, r8
    c30c:	46de      	mov	lr, fp
    c30e:	b5e0      	push	{r5, r6, r7, lr}
    c310:	0247      	lsls	r7, r0, #9
    c312:	0046      	lsls	r6, r0, #1
    c314:	4688      	mov	r8, r1
    c316:	0a7f      	lsrs	r7, r7, #9
    c318:	0e36      	lsrs	r6, r6, #24
    c31a:	0fc4      	lsrs	r4, r0, #31
    c31c:	2e00      	cmp	r6, #0
    c31e:	d047      	beq.n	c3b0 <__aeabi_fmul+0xac>
    c320:	2eff      	cmp	r6, #255	; 0xff
    c322:	d024      	beq.n	c36e <__aeabi_fmul+0x6a>
    c324:	00fb      	lsls	r3, r7, #3
    c326:	2780      	movs	r7, #128	; 0x80
    c328:	04ff      	lsls	r7, r7, #19
    c32a:	431f      	orrs	r7, r3
    c32c:	2300      	movs	r3, #0
    c32e:	4699      	mov	r9, r3
    c330:	469a      	mov	sl, r3
    c332:	3e7f      	subs	r6, #127	; 0x7f
    c334:	4643      	mov	r3, r8
    c336:	025d      	lsls	r5, r3, #9
    c338:	0058      	lsls	r0, r3, #1
    c33a:	0fdb      	lsrs	r3, r3, #31
    c33c:	0a6d      	lsrs	r5, r5, #9
    c33e:	0e00      	lsrs	r0, r0, #24
    c340:	4698      	mov	r8, r3
    c342:	d043      	beq.n	c3cc <__aeabi_fmul+0xc8>
    c344:	28ff      	cmp	r0, #255	; 0xff
    c346:	d03b      	beq.n	c3c0 <__aeabi_fmul+0xbc>
    c348:	00eb      	lsls	r3, r5, #3
    c34a:	2580      	movs	r5, #128	; 0x80
    c34c:	2200      	movs	r2, #0
    c34e:	04ed      	lsls	r5, r5, #19
    c350:	431d      	orrs	r5, r3
    c352:	387f      	subs	r0, #127	; 0x7f
    c354:	1836      	adds	r6, r6, r0
    c356:	1c73      	adds	r3, r6, #1
    c358:	4641      	mov	r1, r8
    c35a:	469b      	mov	fp, r3
    c35c:	464b      	mov	r3, r9
    c35e:	4061      	eors	r1, r4
    c360:	4313      	orrs	r3, r2
    c362:	2b0f      	cmp	r3, #15
    c364:	d864      	bhi.n	c430 <__aeabi_fmul+0x12c>
    c366:	4875      	ldr	r0, [pc, #468]	; (c53c <__aeabi_fmul+0x238>)
    c368:	009b      	lsls	r3, r3, #2
    c36a:	58c3      	ldr	r3, [r0, r3]
    c36c:	469f      	mov	pc, r3
    c36e:	2f00      	cmp	r7, #0
    c370:	d142      	bne.n	c3f8 <__aeabi_fmul+0xf4>
    c372:	2308      	movs	r3, #8
    c374:	4699      	mov	r9, r3
    c376:	3b06      	subs	r3, #6
    c378:	26ff      	movs	r6, #255	; 0xff
    c37a:	469a      	mov	sl, r3
    c37c:	e7da      	b.n	c334 <__aeabi_fmul+0x30>
    c37e:	4641      	mov	r1, r8
    c380:	2a02      	cmp	r2, #2
    c382:	d028      	beq.n	c3d6 <__aeabi_fmul+0xd2>
    c384:	2a03      	cmp	r2, #3
    c386:	d100      	bne.n	c38a <__aeabi_fmul+0x86>
    c388:	e0ce      	b.n	c528 <__aeabi_fmul+0x224>
    c38a:	2a01      	cmp	r2, #1
    c38c:	d000      	beq.n	c390 <__aeabi_fmul+0x8c>
    c38e:	e0ac      	b.n	c4ea <__aeabi_fmul+0x1e6>
    c390:	4011      	ands	r1, r2
    c392:	2000      	movs	r0, #0
    c394:	2200      	movs	r2, #0
    c396:	b2cc      	uxtb	r4, r1
    c398:	0240      	lsls	r0, r0, #9
    c39a:	05d2      	lsls	r2, r2, #23
    c39c:	0a40      	lsrs	r0, r0, #9
    c39e:	07e4      	lsls	r4, r4, #31
    c3a0:	4310      	orrs	r0, r2
    c3a2:	4320      	orrs	r0, r4
    c3a4:	bc3c      	pop	{r2, r3, r4, r5}
    c3a6:	4690      	mov	r8, r2
    c3a8:	4699      	mov	r9, r3
    c3aa:	46a2      	mov	sl, r4
    c3ac:	46ab      	mov	fp, r5
    c3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3b0:	2f00      	cmp	r7, #0
    c3b2:	d115      	bne.n	c3e0 <__aeabi_fmul+0xdc>
    c3b4:	2304      	movs	r3, #4
    c3b6:	4699      	mov	r9, r3
    c3b8:	3b03      	subs	r3, #3
    c3ba:	2600      	movs	r6, #0
    c3bc:	469a      	mov	sl, r3
    c3be:	e7b9      	b.n	c334 <__aeabi_fmul+0x30>
    c3c0:	20ff      	movs	r0, #255	; 0xff
    c3c2:	2202      	movs	r2, #2
    c3c4:	2d00      	cmp	r5, #0
    c3c6:	d0c5      	beq.n	c354 <__aeabi_fmul+0x50>
    c3c8:	2203      	movs	r2, #3
    c3ca:	e7c3      	b.n	c354 <__aeabi_fmul+0x50>
    c3cc:	2d00      	cmp	r5, #0
    c3ce:	d119      	bne.n	c404 <__aeabi_fmul+0x100>
    c3d0:	2000      	movs	r0, #0
    c3d2:	2201      	movs	r2, #1
    c3d4:	e7be      	b.n	c354 <__aeabi_fmul+0x50>
    c3d6:	2401      	movs	r4, #1
    c3d8:	22ff      	movs	r2, #255	; 0xff
    c3da:	400c      	ands	r4, r1
    c3dc:	2000      	movs	r0, #0
    c3de:	e7db      	b.n	c398 <__aeabi_fmul+0x94>
    c3e0:	0038      	movs	r0, r7
    c3e2:	f001 ffc9 	bl	e378 <__clzsi2>
    c3e6:	2676      	movs	r6, #118	; 0x76
    c3e8:	1f43      	subs	r3, r0, #5
    c3ea:	409f      	lsls	r7, r3
    c3ec:	2300      	movs	r3, #0
    c3ee:	4276      	negs	r6, r6
    c3f0:	1a36      	subs	r6, r6, r0
    c3f2:	4699      	mov	r9, r3
    c3f4:	469a      	mov	sl, r3
    c3f6:	e79d      	b.n	c334 <__aeabi_fmul+0x30>
    c3f8:	230c      	movs	r3, #12
    c3fa:	4699      	mov	r9, r3
    c3fc:	3b09      	subs	r3, #9
    c3fe:	26ff      	movs	r6, #255	; 0xff
    c400:	469a      	mov	sl, r3
    c402:	e797      	b.n	c334 <__aeabi_fmul+0x30>
    c404:	0028      	movs	r0, r5
    c406:	f001 ffb7 	bl	e378 <__clzsi2>
    c40a:	1f43      	subs	r3, r0, #5
    c40c:	409d      	lsls	r5, r3
    c40e:	2376      	movs	r3, #118	; 0x76
    c410:	425b      	negs	r3, r3
    c412:	1a18      	subs	r0, r3, r0
    c414:	2200      	movs	r2, #0
    c416:	e79d      	b.n	c354 <__aeabi_fmul+0x50>
    c418:	2080      	movs	r0, #128	; 0x80
    c41a:	2400      	movs	r4, #0
    c41c:	03c0      	lsls	r0, r0, #15
    c41e:	22ff      	movs	r2, #255	; 0xff
    c420:	e7ba      	b.n	c398 <__aeabi_fmul+0x94>
    c422:	003d      	movs	r5, r7
    c424:	4652      	mov	r2, sl
    c426:	e7ab      	b.n	c380 <__aeabi_fmul+0x7c>
    c428:	003d      	movs	r5, r7
    c42a:	0021      	movs	r1, r4
    c42c:	4652      	mov	r2, sl
    c42e:	e7a7      	b.n	c380 <__aeabi_fmul+0x7c>
    c430:	0c3b      	lsrs	r3, r7, #16
    c432:	469c      	mov	ip, r3
    c434:	042a      	lsls	r2, r5, #16
    c436:	0c12      	lsrs	r2, r2, #16
    c438:	0c2b      	lsrs	r3, r5, #16
    c43a:	0014      	movs	r4, r2
    c43c:	4660      	mov	r0, ip
    c43e:	4665      	mov	r5, ip
    c440:	043f      	lsls	r7, r7, #16
    c442:	0c3f      	lsrs	r7, r7, #16
    c444:	437c      	muls	r4, r7
    c446:	4342      	muls	r2, r0
    c448:	435d      	muls	r5, r3
    c44a:	437b      	muls	r3, r7
    c44c:	0c27      	lsrs	r7, r4, #16
    c44e:	189b      	adds	r3, r3, r2
    c450:	18ff      	adds	r7, r7, r3
    c452:	42ba      	cmp	r2, r7
    c454:	d903      	bls.n	c45e <__aeabi_fmul+0x15a>
    c456:	2380      	movs	r3, #128	; 0x80
    c458:	025b      	lsls	r3, r3, #9
    c45a:	469c      	mov	ip, r3
    c45c:	4465      	add	r5, ip
    c45e:	0424      	lsls	r4, r4, #16
    c460:	043a      	lsls	r2, r7, #16
    c462:	0c24      	lsrs	r4, r4, #16
    c464:	1912      	adds	r2, r2, r4
    c466:	0193      	lsls	r3, r2, #6
    c468:	1e5c      	subs	r4, r3, #1
    c46a:	41a3      	sbcs	r3, r4
    c46c:	0c3f      	lsrs	r7, r7, #16
    c46e:	0e92      	lsrs	r2, r2, #26
    c470:	197d      	adds	r5, r7, r5
    c472:	431a      	orrs	r2, r3
    c474:	01ad      	lsls	r5, r5, #6
    c476:	4315      	orrs	r5, r2
    c478:	012b      	lsls	r3, r5, #4
    c47a:	d504      	bpl.n	c486 <__aeabi_fmul+0x182>
    c47c:	2301      	movs	r3, #1
    c47e:	465e      	mov	r6, fp
    c480:	086a      	lsrs	r2, r5, #1
    c482:	401d      	ands	r5, r3
    c484:	4315      	orrs	r5, r2
    c486:	0032      	movs	r2, r6
    c488:	327f      	adds	r2, #127	; 0x7f
    c48a:	2a00      	cmp	r2, #0
    c48c:	dd25      	ble.n	c4da <__aeabi_fmul+0x1d6>
    c48e:	076b      	lsls	r3, r5, #29
    c490:	d004      	beq.n	c49c <__aeabi_fmul+0x198>
    c492:	230f      	movs	r3, #15
    c494:	402b      	ands	r3, r5
    c496:	2b04      	cmp	r3, #4
    c498:	d000      	beq.n	c49c <__aeabi_fmul+0x198>
    c49a:	3504      	adds	r5, #4
    c49c:	012b      	lsls	r3, r5, #4
    c49e:	d503      	bpl.n	c4a8 <__aeabi_fmul+0x1a4>
    c4a0:	0032      	movs	r2, r6
    c4a2:	4b27      	ldr	r3, [pc, #156]	; (c540 <__aeabi_fmul+0x23c>)
    c4a4:	3280      	adds	r2, #128	; 0x80
    c4a6:	401d      	ands	r5, r3
    c4a8:	2afe      	cmp	r2, #254	; 0xfe
    c4aa:	dc94      	bgt.n	c3d6 <__aeabi_fmul+0xd2>
    c4ac:	2401      	movs	r4, #1
    c4ae:	01a8      	lsls	r0, r5, #6
    c4b0:	0a40      	lsrs	r0, r0, #9
    c4b2:	b2d2      	uxtb	r2, r2
    c4b4:	400c      	ands	r4, r1
    c4b6:	e76f      	b.n	c398 <__aeabi_fmul+0x94>
    c4b8:	2080      	movs	r0, #128	; 0x80
    c4ba:	03c0      	lsls	r0, r0, #15
    c4bc:	4207      	tst	r7, r0
    c4be:	d007      	beq.n	c4d0 <__aeabi_fmul+0x1cc>
    c4c0:	4205      	tst	r5, r0
    c4c2:	d105      	bne.n	c4d0 <__aeabi_fmul+0x1cc>
    c4c4:	4328      	orrs	r0, r5
    c4c6:	0240      	lsls	r0, r0, #9
    c4c8:	0a40      	lsrs	r0, r0, #9
    c4ca:	4644      	mov	r4, r8
    c4cc:	22ff      	movs	r2, #255	; 0xff
    c4ce:	e763      	b.n	c398 <__aeabi_fmul+0x94>
    c4d0:	4338      	orrs	r0, r7
    c4d2:	0240      	lsls	r0, r0, #9
    c4d4:	0a40      	lsrs	r0, r0, #9
    c4d6:	22ff      	movs	r2, #255	; 0xff
    c4d8:	e75e      	b.n	c398 <__aeabi_fmul+0x94>
    c4da:	2401      	movs	r4, #1
    c4dc:	1aa3      	subs	r3, r4, r2
    c4de:	2b1b      	cmp	r3, #27
    c4e0:	dd05      	ble.n	c4ee <__aeabi_fmul+0x1ea>
    c4e2:	400c      	ands	r4, r1
    c4e4:	2200      	movs	r2, #0
    c4e6:	2000      	movs	r0, #0
    c4e8:	e756      	b.n	c398 <__aeabi_fmul+0x94>
    c4ea:	465e      	mov	r6, fp
    c4ec:	e7cb      	b.n	c486 <__aeabi_fmul+0x182>
    c4ee:	002a      	movs	r2, r5
    c4f0:	2020      	movs	r0, #32
    c4f2:	40da      	lsrs	r2, r3
    c4f4:	1ac3      	subs	r3, r0, r3
    c4f6:	409d      	lsls	r5, r3
    c4f8:	002b      	movs	r3, r5
    c4fa:	1e5d      	subs	r5, r3, #1
    c4fc:	41ab      	sbcs	r3, r5
    c4fe:	4313      	orrs	r3, r2
    c500:	075a      	lsls	r2, r3, #29
    c502:	d004      	beq.n	c50e <__aeabi_fmul+0x20a>
    c504:	220f      	movs	r2, #15
    c506:	401a      	ands	r2, r3
    c508:	2a04      	cmp	r2, #4
    c50a:	d000      	beq.n	c50e <__aeabi_fmul+0x20a>
    c50c:	3304      	adds	r3, #4
    c50e:	015a      	lsls	r2, r3, #5
    c510:	d504      	bpl.n	c51c <__aeabi_fmul+0x218>
    c512:	2401      	movs	r4, #1
    c514:	2201      	movs	r2, #1
    c516:	400c      	ands	r4, r1
    c518:	2000      	movs	r0, #0
    c51a:	e73d      	b.n	c398 <__aeabi_fmul+0x94>
    c51c:	2401      	movs	r4, #1
    c51e:	019b      	lsls	r3, r3, #6
    c520:	0a58      	lsrs	r0, r3, #9
    c522:	400c      	ands	r4, r1
    c524:	2200      	movs	r2, #0
    c526:	e737      	b.n	c398 <__aeabi_fmul+0x94>
    c528:	2080      	movs	r0, #128	; 0x80
    c52a:	2401      	movs	r4, #1
    c52c:	03c0      	lsls	r0, r0, #15
    c52e:	4328      	orrs	r0, r5
    c530:	0240      	lsls	r0, r0, #9
    c532:	0a40      	lsrs	r0, r0, #9
    c534:	400c      	ands	r4, r1
    c536:	22ff      	movs	r2, #255	; 0xff
    c538:	e72e      	b.n	c398 <__aeabi_fmul+0x94>
    c53a:	46c0      	nop			; (mov r8, r8)
    c53c:	0000f260 	.word	0x0000f260
    c540:	f7ffffff 	.word	0xf7ffffff

0000c544 <__aeabi_i2f>:
    c544:	b570      	push	{r4, r5, r6, lr}
    c546:	2800      	cmp	r0, #0
    c548:	d030      	beq.n	c5ac <__aeabi_i2f+0x68>
    c54a:	17c3      	asrs	r3, r0, #31
    c54c:	18c4      	adds	r4, r0, r3
    c54e:	405c      	eors	r4, r3
    c550:	0fc5      	lsrs	r5, r0, #31
    c552:	0020      	movs	r0, r4
    c554:	f001 ff10 	bl	e378 <__clzsi2>
    c558:	239e      	movs	r3, #158	; 0x9e
    c55a:	1a1b      	subs	r3, r3, r0
    c55c:	2b96      	cmp	r3, #150	; 0x96
    c55e:	dc0d      	bgt.n	c57c <__aeabi_i2f+0x38>
    c560:	2296      	movs	r2, #150	; 0x96
    c562:	1ad2      	subs	r2, r2, r3
    c564:	4094      	lsls	r4, r2
    c566:	002a      	movs	r2, r5
    c568:	0264      	lsls	r4, r4, #9
    c56a:	0a64      	lsrs	r4, r4, #9
    c56c:	b2db      	uxtb	r3, r3
    c56e:	0264      	lsls	r4, r4, #9
    c570:	05db      	lsls	r3, r3, #23
    c572:	0a60      	lsrs	r0, r4, #9
    c574:	07d2      	lsls	r2, r2, #31
    c576:	4318      	orrs	r0, r3
    c578:	4310      	orrs	r0, r2
    c57a:	bd70      	pop	{r4, r5, r6, pc}
    c57c:	2b99      	cmp	r3, #153	; 0x99
    c57e:	dc19      	bgt.n	c5b4 <__aeabi_i2f+0x70>
    c580:	2299      	movs	r2, #153	; 0x99
    c582:	1ad2      	subs	r2, r2, r3
    c584:	2a00      	cmp	r2, #0
    c586:	dd29      	ble.n	c5dc <__aeabi_i2f+0x98>
    c588:	4094      	lsls	r4, r2
    c58a:	0022      	movs	r2, r4
    c58c:	4c14      	ldr	r4, [pc, #80]	; (c5e0 <__aeabi_i2f+0x9c>)
    c58e:	4014      	ands	r4, r2
    c590:	0751      	lsls	r1, r2, #29
    c592:	d004      	beq.n	c59e <__aeabi_i2f+0x5a>
    c594:	210f      	movs	r1, #15
    c596:	400a      	ands	r2, r1
    c598:	2a04      	cmp	r2, #4
    c59a:	d000      	beq.n	c59e <__aeabi_i2f+0x5a>
    c59c:	3404      	adds	r4, #4
    c59e:	0162      	lsls	r2, r4, #5
    c5a0:	d413      	bmi.n	c5ca <__aeabi_i2f+0x86>
    c5a2:	01a4      	lsls	r4, r4, #6
    c5a4:	0a64      	lsrs	r4, r4, #9
    c5a6:	b2db      	uxtb	r3, r3
    c5a8:	002a      	movs	r2, r5
    c5aa:	e7e0      	b.n	c56e <__aeabi_i2f+0x2a>
    c5ac:	2200      	movs	r2, #0
    c5ae:	2300      	movs	r3, #0
    c5b0:	2400      	movs	r4, #0
    c5b2:	e7dc      	b.n	c56e <__aeabi_i2f+0x2a>
    c5b4:	2205      	movs	r2, #5
    c5b6:	0021      	movs	r1, r4
    c5b8:	1a12      	subs	r2, r2, r0
    c5ba:	40d1      	lsrs	r1, r2
    c5bc:	22b9      	movs	r2, #185	; 0xb9
    c5be:	1ad2      	subs	r2, r2, r3
    c5c0:	4094      	lsls	r4, r2
    c5c2:	1e62      	subs	r2, r4, #1
    c5c4:	4194      	sbcs	r4, r2
    c5c6:	430c      	orrs	r4, r1
    c5c8:	e7da      	b.n	c580 <__aeabi_i2f+0x3c>
    c5ca:	4b05      	ldr	r3, [pc, #20]	; (c5e0 <__aeabi_i2f+0x9c>)
    c5cc:	002a      	movs	r2, r5
    c5ce:	401c      	ands	r4, r3
    c5d0:	239f      	movs	r3, #159	; 0x9f
    c5d2:	01a4      	lsls	r4, r4, #6
    c5d4:	1a1b      	subs	r3, r3, r0
    c5d6:	0a64      	lsrs	r4, r4, #9
    c5d8:	b2db      	uxtb	r3, r3
    c5da:	e7c8      	b.n	c56e <__aeabi_i2f+0x2a>
    c5dc:	0022      	movs	r2, r4
    c5de:	e7d5      	b.n	c58c <__aeabi_i2f+0x48>
    c5e0:	fbffffff 	.word	0xfbffffff

0000c5e4 <__aeabi_ui2f>:
    c5e4:	b510      	push	{r4, lr}
    c5e6:	1e04      	subs	r4, r0, #0
    c5e8:	d027      	beq.n	c63a <__aeabi_ui2f+0x56>
    c5ea:	f001 fec5 	bl	e378 <__clzsi2>
    c5ee:	239e      	movs	r3, #158	; 0x9e
    c5f0:	1a1b      	subs	r3, r3, r0
    c5f2:	2b96      	cmp	r3, #150	; 0x96
    c5f4:	dc0a      	bgt.n	c60c <__aeabi_ui2f+0x28>
    c5f6:	2296      	movs	r2, #150	; 0x96
    c5f8:	1ad2      	subs	r2, r2, r3
    c5fa:	4094      	lsls	r4, r2
    c5fc:	0264      	lsls	r4, r4, #9
    c5fe:	0a64      	lsrs	r4, r4, #9
    c600:	b2db      	uxtb	r3, r3
    c602:	0264      	lsls	r4, r4, #9
    c604:	05db      	lsls	r3, r3, #23
    c606:	0a60      	lsrs	r0, r4, #9
    c608:	4318      	orrs	r0, r3
    c60a:	bd10      	pop	{r4, pc}
    c60c:	2b99      	cmp	r3, #153	; 0x99
    c60e:	dc17      	bgt.n	c640 <__aeabi_ui2f+0x5c>
    c610:	2299      	movs	r2, #153	; 0x99
    c612:	1ad2      	subs	r2, r2, r3
    c614:	2a00      	cmp	r2, #0
    c616:	dd27      	ble.n	c668 <__aeabi_ui2f+0x84>
    c618:	4094      	lsls	r4, r2
    c61a:	0022      	movs	r2, r4
    c61c:	4c13      	ldr	r4, [pc, #76]	; (c66c <__aeabi_ui2f+0x88>)
    c61e:	4014      	ands	r4, r2
    c620:	0751      	lsls	r1, r2, #29
    c622:	d004      	beq.n	c62e <__aeabi_ui2f+0x4a>
    c624:	210f      	movs	r1, #15
    c626:	400a      	ands	r2, r1
    c628:	2a04      	cmp	r2, #4
    c62a:	d000      	beq.n	c62e <__aeabi_ui2f+0x4a>
    c62c:	3404      	adds	r4, #4
    c62e:	0162      	lsls	r2, r4, #5
    c630:	d412      	bmi.n	c658 <__aeabi_ui2f+0x74>
    c632:	01a4      	lsls	r4, r4, #6
    c634:	0a64      	lsrs	r4, r4, #9
    c636:	b2db      	uxtb	r3, r3
    c638:	e7e3      	b.n	c602 <__aeabi_ui2f+0x1e>
    c63a:	2300      	movs	r3, #0
    c63c:	2400      	movs	r4, #0
    c63e:	e7e0      	b.n	c602 <__aeabi_ui2f+0x1e>
    c640:	22b9      	movs	r2, #185	; 0xb9
    c642:	0021      	movs	r1, r4
    c644:	1ad2      	subs	r2, r2, r3
    c646:	4091      	lsls	r1, r2
    c648:	000a      	movs	r2, r1
    c64a:	1e51      	subs	r1, r2, #1
    c64c:	418a      	sbcs	r2, r1
    c64e:	2105      	movs	r1, #5
    c650:	1a09      	subs	r1, r1, r0
    c652:	40cc      	lsrs	r4, r1
    c654:	4314      	orrs	r4, r2
    c656:	e7db      	b.n	c610 <__aeabi_ui2f+0x2c>
    c658:	4b04      	ldr	r3, [pc, #16]	; (c66c <__aeabi_ui2f+0x88>)
    c65a:	401c      	ands	r4, r3
    c65c:	239f      	movs	r3, #159	; 0x9f
    c65e:	01a4      	lsls	r4, r4, #6
    c660:	1a1b      	subs	r3, r3, r0
    c662:	0a64      	lsrs	r4, r4, #9
    c664:	b2db      	uxtb	r3, r3
    c666:	e7cc      	b.n	c602 <__aeabi_ui2f+0x1e>
    c668:	0022      	movs	r2, r4
    c66a:	e7d7      	b.n	c61c <__aeabi_ui2f+0x38>
    c66c:	fbffffff 	.word	0xfbffffff

0000c670 <__aeabi_dadd>:
    c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c672:	4645      	mov	r5, r8
    c674:	46de      	mov	lr, fp
    c676:	4657      	mov	r7, sl
    c678:	464e      	mov	r6, r9
    c67a:	030c      	lsls	r4, r1, #12
    c67c:	b5e0      	push	{r5, r6, r7, lr}
    c67e:	004e      	lsls	r6, r1, #1
    c680:	0fc9      	lsrs	r1, r1, #31
    c682:	4688      	mov	r8, r1
    c684:	000d      	movs	r5, r1
    c686:	0a61      	lsrs	r1, r4, #9
    c688:	0f44      	lsrs	r4, r0, #29
    c68a:	430c      	orrs	r4, r1
    c68c:	00c7      	lsls	r7, r0, #3
    c68e:	0319      	lsls	r1, r3, #12
    c690:	0058      	lsls	r0, r3, #1
    c692:	0fdb      	lsrs	r3, r3, #31
    c694:	469b      	mov	fp, r3
    c696:	0a4b      	lsrs	r3, r1, #9
    c698:	0f51      	lsrs	r1, r2, #29
    c69a:	430b      	orrs	r3, r1
    c69c:	0d76      	lsrs	r6, r6, #21
    c69e:	0d40      	lsrs	r0, r0, #21
    c6a0:	0019      	movs	r1, r3
    c6a2:	00d2      	lsls	r2, r2, #3
    c6a4:	45d8      	cmp	r8, fp
    c6a6:	d100      	bne.n	c6aa <__aeabi_dadd+0x3a>
    c6a8:	e0ae      	b.n	c808 <__aeabi_dadd+0x198>
    c6aa:	1a35      	subs	r5, r6, r0
    c6ac:	2d00      	cmp	r5, #0
    c6ae:	dc00      	bgt.n	c6b2 <__aeabi_dadd+0x42>
    c6b0:	e0f6      	b.n	c8a0 <__aeabi_dadd+0x230>
    c6b2:	2800      	cmp	r0, #0
    c6b4:	d10f      	bne.n	c6d6 <__aeabi_dadd+0x66>
    c6b6:	4313      	orrs	r3, r2
    c6b8:	d100      	bne.n	c6bc <__aeabi_dadd+0x4c>
    c6ba:	e0db      	b.n	c874 <__aeabi_dadd+0x204>
    c6bc:	1e6b      	subs	r3, r5, #1
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d000      	beq.n	c6c4 <__aeabi_dadd+0x54>
    c6c2:	e137      	b.n	c934 <__aeabi_dadd+0x2c4>
    c6c4:	1aba      	subs	r2, r7, r2
    c6c6:	4297      	cmp	r7, r2
    c6c8:	41bf      	sbcs	r7, r7
    c6ca:	1a64      	subs	r4, r4, r1
    c6cc:	427f      	negs	r7, r7
    c6ce:	1be4      	subs	r4, r4, r7
    c6d0:	2601      	movs	r6, #1
    c6d2:	0017      	movs	r7, r2
    c6d4:	e024      	b.n	c720 <__aeabi_dadd+0xb0>
    c6d6:	4bc6      	ldr	r3, [pc, #792]	; (c9f0 <__aeabi_dadd+0x380>)
    c6d8:	429e      	cmp	r6, r3
    c6da:	d04d      	beq.n	c778 <__aeabi_dadd+0x108>
    c6dc:	2380      	movs	r3, #128	; 0x80
    c6de:	041b      	lsls	r3, r3, #16
    c6e0:	4319      	orrs	r1, r3
    c6e2:	2d38      	cmp	r5, #56	; 0x38
    c6e4:	dd00      	ble.n	c6e8 <__aeabi_dadd+0x78>
    c6e6:	e107      	b.n	c8f8 <__aeabi_dadd+0x288>
    c6e8:	2d1f      	cmp	r5, #31
    c6ea:	dd00      	ble.n	c6ee <__aeabi_dadd+0x7e>
    c6ec:	e138      	b.n	c960 <__aeabi_dadd+0x2f0>
    c6ee:	2020      	movs	r0, #32
    c6f0:	1b43      	subs	r3, r0, r5
    c6f2:	469a      	mov	sl, r3
    c6f4:	000b      	movs	r3, r1
    c6f6:	4650      	mov	r0, sl
    c6f8:	4083      	lsls	r3, r0
    c6fa:	4699      	mov	r9, r3
    c6fc:	0013      	movs	r3, r2
    c6fe:	4648      	mov	r0, r9
    c700:	40eb      	lsrs	r3, r5
    c702:	4318      	orrs	r0, r3
    c704:	0003      	movs	r3, r0
    c706:	4650      	mov	r0, sl
    c708:	4082      	lsls	r2, r0
    c70a:	1e50      	subs	r0, r2, #1
    c70c:	4182      	sbcs	r2, r0
    c70e:	40e9      	lsrs	r1, r5
    c710:	431a      	orrs	r2, r3
    c712:	1aba      	subs	r2, r7, r2
    c714:	1a61      	subs	r1, r4, r1
    c716:	4297      	cmp	r7, r2
    c718:	41a4      	sbcs	r4, r4
    c71a:	0017      	movs	r7, r2
    c71c:	4264      	negs	r4, r4
    c71e:	1b0c      	subs	r4, r1, r4
    c720:	0223      	lsls	r3, r4, #8
    c722:	d562      	bpl.n	c7ea <__aeabi_dadd+0x17a>
    c724:	0264      	lsls	r4, r4, #9
    c726:	0a65      	lsrs	r5, r4, #9
    c728:	2d00      	cmp	r5, #0
    c72a:	d100      	bne.n	c72e <__aeabi_dadd+0xbe>
    c72c:	e0df      	b.n	c8ee <__aeabi_dadd+0x27e>
    c72e:	0028      	movs	r0, r5
    c730:	f001 fe22 	bl	e378 <__clzsi2>
    c734:	0003      	movs	r3, r0
    c736:	3b08      	subs	r3, #8
    c738:	2b1f      	cmp	r3, #31
    c73a:	dd00      	ble.n	c73e <__aeabi_dadd+0xce>
    c73c:	e0d2      	b.n	c8e4 <__aeabi_dadd+0x274>
    c73e:	2220      	movs	r2, #32
    c740:	003c      	movs	r4, r7
    c742:	1ad2      	subs	r2, r2, r3
    c744:	409d      	lsls	r5, r3
    c746:	40d4      	lsrs	r4, r2
    c748:	409f      	lsls	r7, r3
    c74a:	4325      	orrs	r5, r4
    c74c:	429e      	cmp	r6, r3
    c74e:	dd00      	ble.n	c752 <__aeabi_dadd+0xe2>
    c750:	e0c4      	b.n	c8dc <__aeabi_dadd+0x26c>
    c752:	1b9e      	subs	r6, r3, r6
    c754:	1c73      	adds	r3, r6, #1
    c756:	2b1f      	cmp	r3, #31
    c758:	dd00      	ble.n	c75c <__aeabi_dadd+0xec>
    c75a:	e0f1      	b.n	c940 <__aeabi_dadd+0x2d0>
    c75c:	2220      	movs	r2, #32
    c75e:	0038      	movs	r0, r7
    c760:	0029      	movs	r1, r5
    c762:	1ad2      	subs	r2, r2, r3
    c764:	40d8      	lsrs	r0, r3
    c766:	4091      	lsls	r1, r2
    c768:	4097      	lsls	r7, r2
    c76a:	002c      	movs	r4, r5
    c76c:	4301      	orrs	r1, r0
    c76e:	1e78      	subs	r0, r7, #1
    c770:	4187      	sbcs	r7, r0
    c772:	40dc      	lsrs	r4, r3
    c774:	2600      	movs	r6, #0
    c776:	430f      	orrs	r7, r1
    c778:	077b      	lsls	r3, r7, #29
    c77a:	d009      	beq.n	c790 <__aeabi_dadd+0x120>
    c77c:	230f      	movs	r3, #15
    c77e:	403b      	ands	r3, r7
    c780:	2b04      	cmp	r3, #4
    c782:	d005      	beq.n	c790 <__aeabi_dadd+0x120>
    c784:	1d3b      	adds	r3, r7, #4
    c786:	42bb      	cmp	r3, r7
    c788:	41bf      	sbcs	r7, r7
    c78a:	427f      	negs	r7, r7
    c78c:	19e4      	adds	r4, r4, r7
    c78e:	001f      	movs	r7, r3
    c790:	0223      	lsls	r3, r4, #8
    c792:	d52c      	bpl.n	c7ee <__aeabi_dadd+0x17e>
    c794:	4b96      	ldr	r3, [pc, #600]	; (c9f0 <__aeabi_dadd+0x380>)
    c796:	3601      	adds	r6, #1
    c798:	429e      	cmp	r6, r3
    c79a:	d100      	bne.n	c79e <__aeabi_dadd+0x12e>
    c79c:	e09a      	b.n	c8d4 <__aeabi_dadd+0x264>
    c79e:	4645      	mov	r5, r8
    c7a0:	4b94      	ldr	r3, [pc, #592]	; (c9f4 <__aeabi_dadd+0x384>)
    c7a2:	08ff      	lsrs	r7, r7, #3
    c7a4:	401c      	ands	r4, r3
    c7a6:	0760      	lsls	r0, r4, #29
    c7a8:	0576      	lsls	r6, r6, #21
    c7aa:	0264      	lsls	r4, r4, #9
    c7ac:	4307      	orrs	r7, r0
    c7ae:	0b24      	lsrs	r4, r4, #12
    c7b0:	0d76      	lsrs	r6, r6, #21
    c7b2:	2100      	movs	r1, #0
    c7b4:	0324      	lsls	r4, r4, #12
    c7b6:	0b23      	lsrs	r3, r4, #12
    c7b8:	0d0c      	lsrs	r4, r1, #20
    c7ba:	4a8f      	ldr	r2, [pc, #572]	; (c9f8 <__aeabi_dadd+0x388>)
    c7bc:	0524      	lsls	r4, r4, #20
    c7be:	431c      	orrs	r4, r3
    c7c0:	4014      	ands	r4, r2
    c7c2:	0533      	lsls	r3, r6, #20
    c7c4:	4323      	orrs	r3, r4
    c7c6:	005b      	lsls	r3, r3, #1
    c7c8:	07ed      	lsls	r5, r5, #31
    c7ca:	085b      	lsrs	r3, r3, #1
    c7cc:	432b      	orrs	r3, r5
    c7ce:	0038      	movs	r0, r7
    c7d0:	0019      	movs	r1, r3
    c7d2:	bc3c      	pop	{r2, r3, r4, r5}
    c7d4:	4690      	mov	r8, r2
    c7d6:	4699      	mov	r9, r3
    c7d8:	46a2      	mov	sl, r4
    c7da:	46ab      	mov	fp, r5
    c7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c7de:	4664      	mov	r4, ip
    c7e0:	4304      	orrs	r4, r0
    c7e2:	d100      	bne.n	c7e6 <__aeabi_dadd+0x176>
    c7e4:	e211      	b.n	cc0a <__aeabi_dadd+0x59a>
    c7e6:	0004      	movs	r4, r0
    c7e8:	4667      	mov	r7, ip
    c7ea:	077b      	lsls	r3, r7, #29
    c7ec:	d1c6      	bne.n	c77c <__aeabi_dadd+0x10c>
    c7ee:	4645      	mov	r5, r8
    c7f0:	0760      	lsls	r0, r4, #29
    c7f2:	08ff      	lsrs	r7, r7, #3
    c7f4:	4307      	orrs	r7, r0
    c7f6:	08e4      	lsrs	r4, r4, #3
    c7f8:	4b7d      	ldr	r3, [pc, #500]	; (c9f0 <__aeabi_dadd+0x380>)
    c7fa:	429e      	cmp	r6, r3
    c7fc:	d030      	beq.n	c860 <__aeabi_dadd+0x1f0>
    c7fe:	0324      	lsls	r4, r4, #12
    c800:	0576      	lsls	r6, r6, #21
    c802:	0b24      	lsrs	r4, r4, #12
    c804:	0d76      	lsrs	r6, r6, #21
    c806:	e7d4      	b.n	c7b2 <__aeabi_dadd+0x142>
    c808:	1a33      	subs	r3, r6, r0
    c80a:	469a      	mov	sl, r3
    c80c:	2b00      	cmp	r3, #0
    c80e:	dd78      	ble.n	c902 <__aeabi_dadd+0x292>
    c810:	2800      	cmp	r0, #0
    c812:	d031      	beq.n	c878 <__aeabi_dadd+0x208>
    c814:	4876      	ldr	r0, [pc, #472]	; (c9f0 <__aeabi_dadd+0x380>)
    c816:	4286      	cmp	r6, r0
    c818:	d0ae      	beq.n	c778 <__aeabi_dadd+0x108>
    c81a:	2080      	movs	r0, #128	; 0x80
    c81c:	0400      	lsls	r0, r0, #16
    c81e:	4301      	orrs	r1, r0
    c820:	4653      	mov	r3, sl
    c822:	2b38      	cmp	r3, #56	; 0x38
    c824:	dc00      	bgt.n	c828 <__aeabi_dadd+0x1b8>
    c826:	e0e9      	b.n	c9fc <__aeabi_dadd+0x38c>
    c828:	430a      	orrs	r2, r1
    c82a:	1e51      	subs	r1, r2, #1
    c82c:	418a      	sbcs	r2, r1
    c82e:	2100      	movs	r1, #0
    c830:	19d2      	adds	r2, r2, r7
    c832:	42ba      	cmp	r2, r7
    c834:	41bf      	sbcs	r7, r7
    c836:	1909      	adds	r1, r1, r4
    c838:	427c      	negs	r4, r7
    c83a:	0017      	movs	r7, r2
    c83c:	190c      	adds	r4, r1, r4
    c83e:	0223      	lsls	r3, r4, #8
    c840:	d5d3      	bpl.n	c7ea <__aeabi_dadd+0x17a>
    c842:	4b6b      	ldr	r3, [pc, #428]	; (c9f0 <__aeabi_dadd+0x380>)
    c844:	3601      	adds	r6, #1
    c846:	429e      	cmp	r6, r3
    c848:	d100      	bne.n	c84c <__aeabi_dadd+0x1dc>
    c84a:	e13a      	b.n	cac2 <__aeabi_dadd+0x452>
    c84c:	2001      	movs	r0, #1
    c84e:	4b69      	ldr	r3, [pc, #420]	; (c9f4 <__aeabi_dadd+0x384>)
    c850:	401c      	ands	r4, r3
    c852:	087b      	lsrs	r3, r7, #1
    c854:	4007      	ands	r7, r0
    c856:	431f      	orrs	r7, r3
    c858:	07e0      	lsls	r0, r4, #31
    c85a:	4307      	orrs	r7, r0
    c85c:	0864      	lsrs	r4, r4, #1
    c85e:	e78b      	b.n	c778 <__aeabi_dadd+0x108>
    c860:	0023      	movs	r3, r4
    c862:	433b      	orrs	r3, r7
    c864:	d100      	bne.n	c868 <__aeabi_dadd+0x1f8>
    c866:	e1cb      	b.n	cc00 <__aeabi_dadd+0x590>
    c868:	2280      	movs	r2, #128	; 0x80
    c86a:	0312      	lsls	r2, r2, #12
    c86c:	4314      	orrs	r4, r2
    c86e:	0324      	lsls	r4, r4, #12
    c870:	0b24      	lsrs	r4, r4, #12
    c872:	e79e      	b.n	c7b2 <__aeabi_dadd+0x142>
    c874:	002e      	movs	r6, r5
    c876:	e77f      	b.n	c778 <__aeabi_dadd+0x108>
    c878:	0008      	movs	r0, r1
    c87a:	4310      	orrs	r0, r2
    c87c:	d100      	bne.n	c880 <__aeabi_dadd+0x210>
    c87e:	e0b4      	b.n	c9ea <__aeabi_dadd+0x37a>
    c880:	1e58      	subs	r0, r3, #1
    c882:	2800      	cmp	r0, #0
    c884:	d000      	beq.n	c888 <__aeabi_dadd+0x218>
    c886:	e0de      	b.n	ca46 <__aeabi_dadd+0x3d6>
    c888:	18ba      	adds	r2, r7, r2
    c88a:	42ba      	cmp	r2, r7
    c88c:	419b      	sbcs	r3, r3
    c88e:	1864      	adds	r4, r4, r1
    c890:	425b      	negs	r3, r3
    c892:	18e4      	adds	r4, r4, r3
    c894:	0017      	movs	r7, r2
    c896:	2601      	movs	r6, #1
    c898:	0223      	lsls	r3, r4, #8
    c89a:	d5a6      	bpl.n	c7ea <__aeabi_dadd+0x17a>
    c89c:	2602      	movs	r6, #2
    c89e:	e7d5      	b.n	c84c <__aeabi_dadd+0x1dc>
    c8a0:	2d00      	cmp	r5, #0
    c8a2:	d16e      	bne.n	c982 <__aeabi_dadd+0x312>
    c8a4:	1c70      	adds	r0, r6, #1
    c8a6:	0540      	lsls	r0, r0, #21
    c8a8:	0d40      	lsrs	r0, r0, #21
    c8aa:	2801      	cmp	r0, #1
    c8ac:	dc00      	bgt.n	c8b0 <__aeabi_dadd+0x240>
    c8ae:	e0f9      	b.n	caa4 <__aeabi_dadd+0x434>
    c8b0:	1ab8      	subs	r0, r7, r2
    c8b2:	4684      	mov	ip, r0
    c8b4:	4287      	cmp	r7, r0
    c8b6:	4180      	sbcs	r0, r0
    c8b8:	1ae5      	subs	r5, r4, r3
    c8ba:	4240      	negs	r0, r0
    c8bc:	1a2d      	subs	r5, r5, r0
    c8be:	0228      	lsls	r0, r5, #8
    c8c0:	d400      	bmi.n	c8c4 <__aeabi_dadd+0x254>
    c8c2:	e089      	b.n	c9d8 <__aeabi_dadd+0x368>
    c8c4:	1bd7      	subs	r7, r2, r7
    c8c6:	42ba      	cmp	r2, r7
    c8c8:	4192      	sbcs	r2, r2
    c8ca:	1b1c      	subs	r4, r3, r4
    c8cc:	4252      	negs	r2, r2
    c8ce:	1aa5      	subs	r5, r4, r2
    c8d0:	46d8      	mov	r8, fp
    c8d2:	e729      	b.n	c728 <__aeabi_dadd+0xb8>
    c8d4:	4645      	mov	r5, r8
    c8d6:	2400      	movs	r4, #0
    c8d8:	2700      	movs	r7, #0
    c8da:	e76a      	b.n	c7b2 <__aeabi_dadd+0x142>
    c8dc:	4c45      	ldr	r4, [pc, #276]	; (c9f4 <__aeabi_dadd+0x384>)
    c8de:	1af6      	subs	r6, r6, r3
    c8e0:	402c      	ands	r4, r5
    c8e2:	e749      	b.n	c778 <__aeabi_dadd+0x108>
    c8e4:	003d      	movs	r5, r7
    c8e6:	3828      	subs	r0, #40	; 0x28
    c8e8:	4085      	lsls	r5, r0
    c8ea:	2700      	movs	r7, #0
    c8ec:	e72e      	b.n	c74c <__aeabi_dadd+0xdc>
    c8ee:	0038      	movs	r0, r7
    c8f0:	f001 fd42 	bl	e378 <__clzsi2>
    c8f4:	3020      	adds	r0, #32
    c8f6:	e71d      	b.n	c734 <__aeabi_dadd+0xc4>
    c8f8:	430a      	orrs	r2, r1
    c8fa:	1e51      	subs	r1, r2, #1
    c8fc:	418a      	sbcs	r2, r1
    c8fe:	2100      	movs	r1, #0
    c900:	e707      	b.n	c712 <__aeabi_dadd+0xa2>
    c902:	2b00      	cmp	r3, #0
    c904:	d000      	beq.n	c908 <__aeabi_dadd+0x298>
    c906:	e0f3      	b.n	caf0 <__aeabi_dadd+0x480>
    c908:	1c70      	adds	r0, r6, #1
    c90a:	0543      	lsls	r3, r0, #21
    c90c:	0d5b      	lsrs	r3, r3, #21
    c90e:	2b01      	cmp	r3, #1
    c910:	dc00      	bgt.n	c914 <__aeabi_dadd+0x2a4>
    c912:	e0ad      	b.n	ca70 <__aeabi_dadd+0x400>
    c914:	4b36      	ldr	r3, [pc, #216]	; (c9f0 <__aeabi_dadd+0x380>)
    c916:	4298      	cmp	r0, r3
    c918:	d100      	bne.n	c91c <__aeabi_dadd+0x2ac>
    c91a:	e0d1      	b.n	cac0 <__aeabi_dadd+0x450>
    c91c:	18ba      	adds	r2, r7, r2
    c91e:	42ba      	cmp	r2, r7
    c920:	41bf      	sbcs	r7, r7
    c922:	1864      	adds	r4, r4, r1
    c924:	427f      	negs	r7, r7
    c926:	19e4      	adds	r4, r4, r7
    c928:	07e7      	lsls	r7, r4, #31
    c92a:	0852      	lsrs	r2, r2, #1
    c92c:	4317      	orrs	r7, r2
    c92e:	0864      	lsrs	r4, r4, #1
    c930:	0006      	movs	r6, r0
    c932:	e721      	b.n	c778 <__aeabi_dadd+0x108>
    c934:	482e      	ldr	r0, [pc, #184]	; (c9f0 <__aeabi_dadd+0x380>)
    c936:	4285      	cmp	r5, r0
    c938:	d100      	bne.n	c93c <__aeabi_dadd+0x2cc>
    c93a:	e093      	b.n	ca64 <__aeabi_dadd+0x3f4>
    c93c:	001d      	movs	r5, r3
    c93e:	e6d0      	b.n	c6e2 <__aeabi_dadd+0x72>
    c940:	0029      	movs	r1, r5
    c942:	3e1f      	subs	r6, #31
    c944:	40f1      	lsrs	r1, r6
    c946:	2b20      	cmp	r3, #32
    c948:	d100      	bne.n	c94c <__aeabi_dadd+0x2dc>
    c94a:	e08d      	b.n	ca68 <__aeabi_dadd+0x3f8>
    c94c:	2240      	movs	r2, #64	; 0x40
    c94e:	1ad3      	subs	r3, r2, r3
    c950:	409d      	lsls	r5, r3
    c952:	432f      	orrs	r7, r5
    c954:	1e7d      	subs	r5, r7, #1
    c956:	41af      	sbcs	r7, r5
    c958:	2400      	movs	r4, #0
    c95a:	430f      	orrs	r7, r1
    c95c:	2600      	movs	r6, #0
    c95e:	e744      	b.n	c7ea <__aeabi_dadd+0x17a>
    c960:	002b      	movs	r3, r5
    c962:	0008      	movs	r0, r1
    c964:	3b20      	subs	r3, #32
    c966:	40d8      	lsrs	r0, r3
    c968:	0003      	movs	r3, r0
    c96a:	2d20      	cmp	r5, #32
    c96c:	d100      	bne.n	c970 <__aeabi_dadd+0x300>
    c96e:	e07d      	b.n	ca6c <__aeabi_dadd+0x3fc>
    c970:	2040      	movs	r0, #64	; 0x40
    c972:	1b45      	subs	r5, r0, r5
    c974:	40a9      	lsls	r1, r5
    c976:	430a      	orrs	r2, r1
    c978:	1e51      	subs	r1, r2, #1
    c97a:	418a      	sbcs	r2, r1
    c97c:	2100      	movs	r1, #0
    c97e:	431a      	orrs	r2, r3
    c980:	e6c7      	b.n	c712 <__aeabi_dadd+0xa2>
    c982:	2e00      	cmp	r6, #0
    c984:	d050      	beq.n	ca28 <__aeabi_dadd+0x3b8>
    c986:	4e1a      	ldr	r6, [pc, #104]	; (c9f0 <__aeabi_dadd+0x380>)
    c988:	42b0      	cmp	r0, r6
    c98a:	d057      	beq.n	ca3c <__aeabi_dadd+0x3cc>
    c98c:	2680      	movs	r6, #128	; 0x80
    c98e:	426b      	negs	r3, r5
    c990:	4699      	mov	r9, r3
    c992:	0436      	lsls	r6, r6, #16
    c994:	4334      	orrs	r4, r6
    c996:	464b      	mov	r3, r9
    c998:	2b38      	cmp	r3, #56	; 0x38
    c99a:	dd00      	ble.n	c99e <__aeabi_dadd+0x32e>
    c99c:	e0d6      	b.n	cb4c <__aeabi_dadd+0x4dc>
    c99e:	2b1f      	cmp	r3, #31
    c9a0:	dd00      	ble.n	c9a4 <__aeabi_dadd+0x334>
    c9a2:	e135      	b.n	cc10 <__aeabi_dadd+0x5a0>
    c9a4:	2620      	movs	r6, #32
    c9a6:	1af5      	subs	r5, r6, r3
    c9a8:	0026      	movs	r6, r4
    c9aa:	40ae      	lsls	r6, r5
    c9ac:	46b2      	mov	sl, r6
    c9ae:	003e      	movs	r6, r7
    c9b0:	40de      	lsrs	r6, r3
    c9b2:	46ac      	mov	ip, r5
    c9b4:	0035      	movs	r5, r6
    c9b6:	4656      	mov	r6, sl
    c9b8:	432e      	orrs	r6, r5
    c9ba:	4665      	mov	r5, ip
    c9bc:	40af      	lsls	r7, r5
    c9be:	1e7d      	subs	r5, r7, #1
    c9c0:	41af      	sbcs	r7, r5
    c9c2:	40dc      	lsrs	r4, r3
    c9c4:	4337      	orrs	r7, r6
    c9c6:	1bd7      	subs	r7, r2, r7
    c9c8:	42ba      	cmp	r2, r7
    c9ca:	4192      	sbcs	r2, r2
    c9cc:	1b0c      	subs	r4, r1, r4
    c9ce:	4252      	negs	r2, r2
    c9d0:	1aa4      	subs	r4, r4, r2
    c9d2:	0006      	movs	r6, r0
    c9d4:	46d8      	mov	r8, fp
    c9d6:	e6a3      	b.n	c720 <__aeabi_dadd+0xb0>
    c9d8:	4664      	mov	r4, ip
    c9da:	4667      	mov	r7, ip
    c9dc:	432c      	orrs	r4, r5
    c9de:	d000      	beq.n	c9e2 <__aeabi_dadd+0x372>
    c9e0:	e6a2      	b.n	c728 <__aeabi_dadd+0xb8>
    c9e2:	2500      	movs	r5, #0
    c9e4:	2600      	movs	r6, #0
    c9e6:	2700      	movs	r7, #0
    c9e8:	e706      	b.n	c7f8 <__aeabi_dadd+0x188>
    c9ea:	001e      	movs	r6, r3
    c9ec:	e6c4      	b.n	c778 <__aeabi_dadd+0x108>
    c9ee:	46c0      	nop			; (mov r8, r8)
    c9f0:	000007ff 	.word	0x000007ff
    c9f4:	ff7fffff 	.word	0xff7fffff
    c9f8:	800fffff 	.word	0x800fffff
    c9fc:	2b1f      	cmp	r3, #31
    c9fe:	dc63      	bgt.n	cac8 <__aeabi_dadd+0x458>
    ca00:	2020      	movs	r0, #32
    ca02:	1ac3      	subs	r3, r0, r3
    ca04:	0008      	movs	r0, r1
    ca06:	4098      	lsls	r0, r3
    ca08:	469c      	mov	ip, r3
    ca0a:	4683      	mov	fp, r0
    ca0c:	4653      	mov	r3, sl
    ca0e:	0010      	movs	r0, r2
    ca10:	40d8      	lsrs	r0, r3
    ca12:	0003      	movs	r3, r0
    ca14:	4658      	mov	r0, fp
    ca16:	4318      	orrs	r0, r3
    ca18:	4663      	mov	r3, ip
    ca1a:	409a      	lsls	r2, r3
    ca1c:	1e53      	subs	r3, r2, #1
    ca1e:	419a      	sbcs	r2, r3
    ca20:	4653      	mov	r3, sl
    ca22:	4302      	orrs	r2, r0
    ca24:	40d9      	lsrs	r1, r3
    ca26:	e703      	b.n	c830 <__aeabi_dadd+0x1c0>
    ca28:	0026      	movs	r6, r4
    ca2a:	433e      	orrs	r6, r7
    ca2c:	d006      	beq.n	ca3c <__aeabi_dadd+0x3cc>
    ca2e:	43eb      	mvns	r3, r5
    ca30:	4699      	mov	r9, r3
    ca32:	2b00      	cmp	r3, #0
    ca34:	d0c7      	beq.n	c9c6 <__aeabi_dadd+0x356>
    ca36:	4e94      	ldr	r6, [pc, #592]	; (cc88 <__aeabi_dadd+0x618>)
    ca38:	42b0      	cmp	r0, r6
    ca3a:	d1ac      	bne.n	c996 <__aeabi_dadd+0x326>
    ca3c:	000c      	movs	r4, r1
    ca3e:	0017      	movs	r7, r2
    ca40:	0006      	movs	r6, r0
    ca42:	46d8      	mov	r8, fp
    ca44:	e698      	b.n	c778 <__aeabi_dadd+0x108>
    ca46:	4b90      	ldr	r3, [pc, #576]	; (cc88 <__aeabi_dadd+0x618>)
    ca48:	459a      	cmp	sl, r3
    ca4a:	d00b      	beq.n	ca64 <__aeabi_dadd+0x3f4>
    ca4c:	4682      	mov	sl, r0
    ca4e:	e6e7      	b.n	c820 <__aeabi_dadd+0x1b0>
    ca50:	2800      	cmp	r0, #0
    ca52:	d000      	beq.n	ca56 <__aeabi_dadd+0x3e6>
    ca54:	e09e      	b.n	cb94 <__aeabi_dadd+0x524>
    ca56:	0018      	movs	r0, r3
    ca58:	4310      	orrs	r0, r2
    ca5a:	d100      	bne.n	ca5e <__aeabi_dadd+0x3ee>
    ca5c:	e0e9      	b.n	cc32 <__aeabi_dadd+0x5c2>
    ca5e:	001c      	movs	r4, r3
    ca60:	0017      	movs	r7, r2
    ca62:	46d8      	mov	r8, fp
    ca64:	4e88      	ldr	r6, [pc, #544]	; (cc88 <__aeabi_dadd+0x618>)
    ca66:	e687      	b.n	c778 <__aeabi_dadd+0x108>
    ca68:	2500      	movs	r5, #0
    ca6a:	e772      	b.n	c952 <__aeabi_dadd+0x2e2>
    ca6c:	2100      	movs	r1, #0
    ca6e:	e782      	b.n	c976 <__aeabi_dadd+0x306>
    ca70:	0023      	movs	r3, r4
    ca72:	433b      	orrs	r3, r7
    ca74:	2e00      	cmp	r6, #0
    ca76:	d000      	beq.n	ca7a <__aeabi_dadd+0x40a>
    ca78:	e0ab      	b.n	cbd2 <__aeabi_dadd+0x562>
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d100      	bne.n	ca80 <__aeabi_dadd+0x410>
    ca7e:	e0e7      	b.n	cc50 <__aeabi_dadd+0x5e0>
    ca80:	000b      	movs	r3, r1
    ca82:	4313      	orrs	r3, r2
    ca84:	d100      	bne.n	ca88 <__aeabi_dadd+0x418>
    ca86:	e677      	b.n	c778 <__aeabi_dadd+0x108>
    ca88:	18ba      	adds	r2, r7, r2
    ca8a:	42ba      	cmp	r2, r7
    ca8c:	41bf      	sbcs	r7, r7
    ca8e:	1864      	adds	r4, r4, r1
    ca90:	427f      	negs	r7, r7
    ca92:	19e4      	adds	r4, r4, r7
    ca94:	0223      	lsls	r3, r4, #8
    ca96:	d400      	bmi.n	ca9a <__aeabi_dadd+0x42a>
    ca98:	e0f2      	b.n	cc80 <__aeabi_dadd+0x610>
    ca9a:	4b7c      	ldr	r3, [pc, #496]	; (cc8c <__aeabi_dadd+0x61c>)
    ca9c:	0017      	movs	r7, r2
    ca9e:	401c      	ands	r4, r3
    caa0:	0006      	movs	r6, r0
    caa2:	e669      	b.n	c778 <__aeabi_dadd+0x108>
    caa4:	0020      	movs	r0, r4
    caa6:	4338      	orrs	r0, r7
    caa8:	2e00      	cmp	r6, #0
    caaa:	d1d1      	bne.n	ca50 <__aeabi_dadd+0x3e0>
    caac:	2800      	cmp	r0, #0
    caae:	d15b      	bne.n	cb68 <__aeabi_dadd+0x4f8>
    cab0:	001c      	movs	r4, r3
    cab2:	4314      	orrs	r4, r2
    cab4:	d100      	bne.n	cab8 <__aeabi_dadd+0x448>
    cab6:	e0a8      	b.n	cc0a <__aeabi_dadd+0x59a>
    cab8:	001c      	movs	r4, r3
    caba:	0017      	movs	r7, r2
    cabc:	46d8      	mov	r8, fp
    cabe:	e65b      	b.n	c778 <__aeabi_dadd+0x108>
    cac0:	0006      	movs	r6, r0
    cac2:	2400      	movs	r4, #0
    cac4:	2700      	movs	r7, #0
    cac6:	e697      	b.n	c7f8 <__aeabi_dadd+0x188>
    cac8:	4650      	mov	r0, sl
    caca:	000b      	movs	r3, r1
    cacc:	3820      	subs	r0, #32
    cace:	40c3      	lsrs	r3, r0
    cad0:	4699      	mov	r9, r3
    cad2:	4653      	mov	r3, sl
    cad4:	2b20      	cmp	r3, #32
    cad6:	d100      	bne.n	cada <__aeabi_dadd+0x46a>
    cad8:	e095      	b.n	cc06 <__aeabi_dadd+0x596>
    cada:	2340      	movs	r3, #64	; 0x40
    cadc:	4650      	mov	r0, sl
    cade:	1a1b      	subs	r3, r3, r0
    cae0:	4099      	lsls	r1, r3
    cae2:	430a      	orrs	r2, r1
    cae4:	1e51      	subs	r1, r2, #1
    cae6:	418a      	sbcs	r2, r1
    cae8:	464b      	mov	r3, r9
    caea:	2100      	movs	r1, #0
    caec:	431a      	orrs	r2, r3
    caee:	e69f      	b.n	c830 <__aeabi_dadd+0x1c0>
    caf0:	2e00      	cmp	r6, #0
    caf2:	d130      	bne.n	cb56 <__aeabi_dadd+0x4e6>
    caf4:	0026      	movs	r6, r4
    caf6:	433e      	orrs	r6, r7
    caf8:	d067      	beq.n	cbca <__aeabi_dadd+0x55a>
    cafa:	43db      	mvns	r3, r3
    cafc:	469a      	mov	sl, r3
    cafe:	2b00      	cmp	r3, #0
    cb00:	d01c      	beq.n	cb3c <__aeabi_dadd+0x4cc>
    cb02:	4e61      	ldr	r6, [pc, #388]	; (cc88 <__aeabi_dadd+0x618>)
    cb04:	42b0      	cmp	r0, r6
    cb06:	d060      	beq.n	cbca <__aeabi_dadd+0x55a>
    cb08:	4653      	mov	r3, sl
    cb0a:	2b38      	cmp	r3, #56	; 0x38
    cb0c:	dd00      	ble.n	cb10 <__aeabi_dadd+0x4a0>
    cb0e:	e096      	b.n	cc3e <__aeabi_dadd+0x5ce>
    cb10:	2b1f      	cmp	r3, #31
    cb12:	dd00      	ble.n	cb16 <__aeabi_dadd+0x4a6>
    cb14:	e09f      	b.n	cc56 <__aeabi_dadd+0x5e6>
    cb16:	2620      	movs	r6, #32
    cb18:	1af3      	subs	r3, r6, r3
    cb1a:	0026      	movs	r6, r4
    cb1c:	409e      	lsls	r6, r3
    cb1e:	469c      	mov	ip, r3
    cb20:	46b3      	mov	fp, r6
    cb22:	4653      	mov	r3, sl
    cb24:	003e      	movs	r6, r7
    cb26:	40de      	lsrs	r6, r3
    cb28:	0033      	movs	r3, r6
    cb2a:	465e      	mov	r6, fp
    cb2c:	431e      	orrs	r6, r3
    cb2e:	4663      	mov	r3, ip
    cb30:	409f      	lsls	r7, r3
    cb32:	1e7b      	subs	r3, r7, #1
    cb34:	419f      	sbcs	r7, r3
    cb36:	4653      	mov	r3, sl
    cb38:	40dc      	lsrs	r4, r3
    cb3a:	4337      	orrs	r7, r6
    cb3c:	18bf      	adds	r7, r7, r2
    cb3e:	4297      	cmp	r7, r2
    cb40:	4192      	sbcs	r2, r2
    cb42:	1864      	adds	r4, r4, r1
    cb44:	4252      	negs	r2, r2
    cb46:	18a4      	adds	r4, r4, r2
    cb48:	0006      	movs	r6, r0
    cb4a:	e678      	b.n	c83e <__aeabi_dadd+0x1ce>
    cb4c:	4327      	orrs	r7, r4
    cb4e:	1e7c      	subs	r4, r7, #1
    cb50:	41a7      	sbcs	r7, r4
    cb52:	2400      	movs	r4, #0
    cb54:	e737      	b.n	c9c6 <__aeabi_dadd+0x356>
    cb56:	4e4c      	ldr	r6, [pc, #304]	; (cc88 <__aeabi_dadd+0x618>)
    cb58:	42b0      	cmp	r0, r6
    cb5a:	d036      	beq.n	cbca <__aeabi_dadd+0x55a>
    cb5c:	2680      	movs	r6, #128	; 0x80
    cb5e:	425b      	negs	r3, r3
    cb60:	0436      	lsls	r6, r6, #16
    cb62:	469a      	mov	sl, r3
    cb64:	4334      	orrs	r4, r6
    cb66:	e7cf      	b.n	cb08 <__aeabi_dadd+0x498>
    cb68:	0018      	movs	r0, r3
    cb6a:	4310      	orrs	r0, r2
    cb6c:	d100      	bne.n	cb70 <__aeabi_dadd+0x500>
    cb6e:	e603      	b.n	c778 <__aeabi_dadd+0x108>
    cb70:	1ab8      	subs	r0, r7, r2
    cb72:	4684      	mov	ip, r0
    cb74:	4567      	cmp	r7, ip
    cb76:	41ad      	sbcs	r5, r5
    cb78:	1ae0      	subs	r0, r4, r3
    cb7a:	426d      	negs	r5, r5
    cb7c:	1b40      	subs	r0, r0, r5
    cb7e:	0205      	lsls	r5, r0, #8
    cb80:	d400      	bmi.n	cb84 <__aeabi_dadd+0x514>
    cb82:	e62c      	b.n	c7de <__aeabi_dadd+0x16e>
    cb84:	1bd7      	subs	r7, r2, r7
    cb86:	42ba      	cmp	r2, r7
    cb88:	4192      	sbcs	r2, r2
    cb8a:	1b1c      	subs	r4, r3, r4
    cb8c:	4252      	negs	r2, r2
    cb8e:	1aa4      	subs	r4, r4, r2
    cb90:	46d8      	mov	r8, fp
    cb92:	e5f1      	b.n	c778 <__aeabi_dadd+0x108>
    cb94:	0018      	movs	r0, r3
    cb96:	4310      	orrs	r0, r2
    cb98:	d100      	bne.n	cb9c <__aeabi_dadd+0x52c>
    cb9a:	e763      	b.n	ca64 <__aeabi_dadd+0x3f4>
    cb9c:	08f8      	lsrs	r0, r7, #3
    cb9e:	0767      	lsls	r7, r4, #29
    cba0:	4307      	orrs	r7, r0
    cba2:	2080      	movs	r0, #128	; 0x80
    cba4:	08e4      	lsrs	r4, r4, #3
    cba6:	0300      	lsls	r0, r0, #12
    cba8:	4204      	tst	r4, r0
    cbaa:	d008      	beq.n	cbbe <__aeabi_dadd+0x54e>
    cbac:	08dd      	lsrs	r5, r3, #3
    cbae:	4205      	tst	r5, r0
    cbb0:	d105      	bne.n	cbbe <__aeabi_dadd+0x54e>
    cbb2:	08d2      	lsrs	r2, r2, #3
    cbb4:	0759      	lsls	r1, r3, #29
    cbb6:	4311      	orrs	r1, r2
    cbb8:	000f      	movs	r7, r1
    cbba:	002c      	movs	r4, r5
    cbbc:	46d8      	mov	r8, fp
    cbbe:	0f7b      	lsrs	r3, r7, #29
    cbc0:	00e4      	lsls	r4, r4, #3
    cbc2:	431c      	orrs	r4, r3
    cbc4:	00ff      	lsls	r7, r7, #3
    cbc6:	4e30      	ldr	r6, [pc, #192]	; (cc88 <__aeabi_dadd+0x618>)
    cbc8:	e5d6      	b.n	c778 <__aeabi_dadd+0x108>
    cbca:	000c      	movs	r4, r1
    cbcc:	0017      	movs	r7, r2
    cbce:	0006      	movs	r6, r0
    cbd0:	e5d2      	b.n	c778 <__aeabi_dadd+0x108>
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d038      	beq.n	cc48 <__aeabi_dadd+0x5d8>
    cbd6:	000b      	movs	r3, r1
    cbd8:	4313      	orrs	r3, r2
    cbda:	d100      	bne.n	cbde <__aeabi_dadd+0x56e>
    cbdc:	e742      	b.n	ca64 <__aeabi_dadd+0x3f4>
    cbde:	08f8      	lsrs	r0, r7, #3
    cbe0:	0767      	lsls	r7, r4, #29
    cbe2:	4307      	orrs	r7, r0
    cbe4:	2080      	movs	r0, #128	; 0x80
    cbe6:	08e4      	lsrs	r4, r4, #3
    cbe8:	0300      	lsls	r0, r0, #12
    cbea:	4204      	tst	r4, r0
    cbec:	d0e7      	beq.n	cbbe <__aeabi_dadd+0x54e>
    cbee:	08cb      	lsrs	r3, r1, #3
    cbf0:	4203      	tst	r3, r0
    cbf2:	d1e4      	bne.n	cbbe <__aeabi_dadd+0x54e>
    cbf4:	08d2      	lsrs	r2, r2, #3
    cbf6:	0749      	lsls	r1, r1, #29
    cbf8:	4311      	orrs	r1, r2
    cbfa:	000f      	movs	r7, r1
    cbfc:	001c      	movs	r4, r3
    cbfe:	e7de      	b.n	cbbe <__aeabi_dadd+0x54e>
    cc00:	2700      	movs	r7, #0
    cc02:	2400      	movs	r4, #0
    cc04:	e5d5      	b.n	c7b2 <__aeabi_dadd+0x142>
    cc06:	2100      	movs	r1, #0
    cc08:	e76b      	b.n	cae2 <__aeabi_dadd+0x472>
    cc0a:	2500      	movs	r5, #0
    cc0c:	2700      	movs	r7, #0
    cc0e:	e5f3      	b.n	c7f8 <__aeabi_dadd+0x188>
    cc10:	464e      	mov	r6, r9
    cc12:	0025      	movs	r5, r4
    cc14:	3e20      	subs	r6, #32
    cc16:	40f5      	lsrs	r5, r6
    cc18:	464b      	mov	r3, r9
    cc1a:	002e      	movs	r6, r5
    cc1c:	2b20      	cmp	r3, #32
    cc1e:	d02d      	beq.n	cc7c <__aeabi_dadd+0x60c>
    cc20:	2540      	movs	r5, #64	; 0x40
    cc22:	1aed      	subs	r5, r5, r3
    cc24:	40ac      	lsls	r4, r5
    cc26:	4327      	orrs	r7, r4
    cc28:	1e7c      	subs	r4, r7, #1
    cc2a:	41a7      	sbcs	r7, r4
    cc2c:	2400      	movs	r4, #0
    cc2e:	4337      	orrs	r7, r6
    cc30:	e6c9      	b.n	c9c6 <__aeabi_dadd+0x356>
    cc32:	2480      	movs	r4, #128	; 0x80
    cc34:	2500      	movs	r5, #0
    cc36:	0324      	lsls	r4, r4, #12
    cc38:	4e13      	ldr	r6, [pc, #76]	; (cc88 <__aeabi_dadd+0x618>)
    cc3a:	2700      	movs	r7, #0
    cc3c:	e5dc      	b.n	c7f8 <__aeabi_dadd+0x188>
    cc3e:	4327      	orrs	r7, r4
    cc40:	1e7c      	subs	r4, r7, #1
    cc42:	41a7      	sbcs	r7, r4
    cc44:	2400      	movs	r4, #0
    cc46:	e779      	b.n	cb3c <__aeabi_dadd+0x4cc>
    cc48:	000c      	movs	r4, r1
    cc4a:	0017      	movs	r7, r2
    cc4c:	4e0e      	ldr	r6, [pc, #56]	; (cc88 <__aeabi_dadd+0x618>)
    cc4e:	e593      	b.n	c778 <__aeabi_dadd+0x108>
    cc50:	000c      	movs	r4, r1
    cc52:	0017      	movs	r7, r2
    cc54:	e590      	b.n	c778 <__aeabi_dadd+0x108>
    cc56:	4656      	mov	r6, sl
    cc58:	0023      	movs	r3, r4
    cc5a:	3e20      	subs	r6, #32
    cc5c:	40f3      	lsrs	r3, r6
    cc5e:	4699      	mov	r9, r3
    cc60:	4653      	mov	r3, sl
    cc62:	2b20      	cmp	r3, #32
    cc64:	d00e      	beq.n	cc84 <__aeabi_dadd+0x614>
    cc66:	2340      	movs	r3, #64	; 0x40
    cc68:	4656      	mov	r6, sl
    cc6a:	1b9b      	subs	r3, r3, r6
    cc6c:	409c      	lsls	r4, r3
    cc6e:	4327      	orrs	r7, r4
    cc70:	1e7c      	subs	r4, r7, #1
    cc72:	41a7      	sbcs	r7, r4
    cc74:	464b      	mov	r3, r9
    cc76:	2400      	movs	r4, #0
    cc78:	431f      	orrs	r7, r3
    cc7a:	e75f      	b.n	cb3c <__aeabi_dadd+0x4cc>
    cc7c:	2400      	movs	r4, #0
    cc7e:	e7d2      	b.n	cc26 <__aeabi_dadd+0x5b6>
    cc80:	0017      	movs	r7, r2
    cc82:	e5b2      	b.n	c7ea <__aeabi_dadd+0x17a>
    cc84:	2400      	movs	r4, #0
    cc86:	e7f2      	b.n	cc6e <__aeabi_dadd+0x5fe>
    cc88:	000007ff 	.word	0x000007ff
    cc8c:	ff7fffff 	.word	0xff7fffff

0000cc90 <__aeabi_ddiv>:
    cc90:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc92:	4657      	mov	r7, sl
    cc94:	4645      	mov	r5, r8
    cc96:	46de      	mov	lr, fp
    cc98:	464e      	mov	r6, r9
    cc9a:	b5e0      	push	{r5, r6, r7, lr}
    cc9c:	004c      	lsls	r4, r1, #1
    cc9e:	030e      	lsls	r6, r1, #12
    cca0:	b087      	sub	sp, #28
    cca2:	4683      	mov	fp, r0
    cca4:	4692      	mov	sl, r2
    cca6:	001d      	movs	r5, r3
    cca8:	4680      	mov	r8, r0
    ccaa:	0b36      	lsrs	r6, r6, #12
    ccac:	0d64      	lsrs	r4, r4, #21
    ccae:	0fcf      	lsrs	r7, r1, #31
    ccb0:	2c00      	cmp	r4, #0
    ccb2:	d04f      	beq.n	cd54 <__aeabi_ddiv+0xc4>
    ccb4:	4b6f      	ldr	r3, [pc, #444]	; (ce74 <__aeabi_ddiv+0x1e4>)
    ccb6:	429c      	cmp	r4, r3
    ccb8:	d035      	beq.n	cd26 <__aeabi_ddiv+0x96>
    ccba:	2380      	movs	r3, #128	; 0x80
    ccbc:	0f42      	lsrs	r2, r0, #29
    ccbe:	041b      	lsls	r3, r3, #16
    ccc0:	00f6      	lsls	r6, r6, #3
    ccc2:	4313      	orrs	r3, r2
    ccc4:	4333      	orrs	r3, r6
    ccc6:	4699      	mov	r9, r3
    ccc8:	00c3      	lsls	r3, r0, #3
    ccca:	4698      	mov	r8, r3
    cccc:	4b6a      	ldr	r3, [pc, #424]	; (ce78 <__aeabi_ddiv+0x1e8>)
    ccce:	2600      	movs	r6, #0
    ccd0:	469c      	mov	ip, r3
    ccd2:	2300      	movs	r3, #0
    ccd4:	4464      	add	r4, ip
    ccd6:	9303      	str	r3, [sp, #12]
    ccd8:	032b      	lsls	r3, r5, #12
    ccda:	0b1b      	lsrs	r3, r3, #12
    ccdc:	469b      	mov	fp, r3
    ccde:	006b      	lsls	r3, r5, #1
    cce0:	0fed      	lsrs	r5, r5, #31
    cce2:	4650      	mov	r0, sl
    cce4:	0d5b      	lsrs	r3, r3, #21
    cce6:	9501      	str	r5, [sp, #4]
    cce8:	d05e      	beq.n	cda8 <__aeabi_ddiv+0x118>
    ccea:	4a62      	ldr	r2, [pc, #392]	; (ce74 <__aeabi_ddiv+0x1e4>)
    ccec:	4293      	cmp	r3, r2
    ccee:	d053      	beq.n	cd98 <__aeabi_ddiv+0x108>
    ccf0:	465a      	mov	r2, fp
    ccf2:	00d1      	lsls	r1, r2, #3
    ccf4:	2280      	movs	r2, #128	; 0x80
    ccf6:	0f40      	lsrs	r0, r0, #29
    ccf8:	0412      	lsls	r2, r2, #16
    ccfa:	4302      	orrs	r2, r0
    ccfc:	430a      	orrs	r2, r1
    ccfe:	4693      	mov	fp, r2
    cd00:	4652      	mov	r2, sl
    cd02:	00d1      	lsls	r1, r2, #3
    cd04:	4a5c      	ldr	r2, [pc, #368]	; (ce78 <__aeabi_ddiv+0x1e8>)
    cd06:	4694      	mov	ip, r2
    cd08:	2200      	movs	r2, #0
    cd0a:	4463      	add	r3, ip
    cd0c:	0038      	movs	r0, r7
    cd0e:	4068      	eors	r0, r5
    cd10:	4684      	mov	ip, r0
    cd12:	9002      	str	r0, [sp, #8]
    cd14:	1ae4      	subs	r4, r4, r3
    cd16:	4316      	orrs	r6, r2
    cd18:	2e0f      	cmp	r6, #15
    cd1a:	d900      	bls.n	cd1e <__aeabi_ddiv+0x8e>
    cd1c:	e0b4      	b.n	ce88 <__aeabi_ddiv+0x1f8>
    cd1e:	4b57      	ldr	r3, [pc, #348]	; (ce7c <__aeabi_ddiv+0x1ec>)
    cd20:	00b6      	lsls	r6, r6, #2
    cd22:	599b      	ldr	r3, [r3, r6]
    cd24:	469f      	mov	pc, r3
    cd26:	0003      	movs	r3, r0
    cd28:	4333      	orrs	r3, r6
    cd2a:	4699      	mov	r9, r3
    cd2c:	d16c      	bne.n	ce08 <__aeabi_ddiv+0x178>
    cd2e:	2300      	movs	r3, #0
    cd30:	4698      	mov	r8, r3
    cd32:	3302      	adds	r3, #2
    cd34:	2608      	movs	r6, #8
    cd36:	9303      	str	r3, [sp, #12]
    cd38:	e7ce      	b.n	ccd8 <__aeabi_ddiv+0x48>
    cd3a:	46cb      	mov	fp, r9
    cd3c:	4641      	mov	r1, r8
    cd3e:	9a03      	ldr	r2, [sp, #12]
    cd40:	9701      	str	r7, [sp, #4]
    cd42:	2a02      	cmp	r2, #2
    cd44:	d165      	bne.n	ce12 <__aeabi_ddiv+0x182>
    cd46:	9b01      	ldr	r3, [sp, #4]
    cd48:	4c4a      	ldr	r4, [pc, #296]	; (ce74 <__aeabi_ddiv+0x1e4>)
    cd4a:	469c      	mov	ip, r3
    cd4c:	2300      	movs	r3, #0
    cd4e:	2200      	movs	r2, #0
    cd50:	4698      	mov	r8, r3
    cd52:	e06b      	b.n	ce2c <__aeabi_ddiv+0x19c>
    cd54:	0003      	movs	r3, r0
    cd56:	4333      	orrs	r3, r6
    cd58:	4699      	mov	r9, r3
    cd5a:	d04e      	beq.n	cdfa <__aeabi_ddiv+0x16a>
    cd5c:	2e00      	cmp	r6, #0
    cd5e:	d100      	bne.n	cd62 <__aeabi_ddiv+0xd2>
    cd60:	e1bc      	b.n	d0dc <__aeabi_ddiv+0x44c>
    cd62:	0030      	movs	r0, r6
    cd64:	f001 fb08 	bl	e378 <__clzsi2>
    cd68:	0003      	movs	r3, r0
    cd6a:	3b0b      	subs	r3, #11
    cd6c:	2b1c      	cmp	r3, #28
    cd6e:	dd00      	ble.n	cd72 <__aeabi_ddiv+0xe2>
    cd70:	e1ac      	b.n	d0cc <__aeabi_ddiv+0x43c>
    cd72:	221d      	movs	r2, #29
    cd74:	1ad3      	subs	r3, r2, r3
    cd76:	465a      	mov	r2, fp
    cd78:	0001      	movs	r1, r0
    cd7a:	40da      	lsrs	r2, r3
    cd7c:	3908      	subs	r1, #8
    cd7e:	408e      	lsls	r6, r1
    cd80:	0013      	movs	r3, r2
    cd82:	4333      	orrs	r3, r6
    cd84:	4699      	mov	r9, r3
    cd86:	465b      	mov	r3, fp
    cd88:	408b      	lsls	r3, r1
    cd8a:	4698      	mov	r8, r3
    cd8c:	2300      	movs	r3, #0
    cd8e:	4c3c      	ldr	r4, [pc, #240]	; (ce80 <__aeabi_ddiv+0x1f0>)
    cd90:	2600      	movs	r6, #0
    cd92:	1a24      	subs	r4, r4, r0
    cd94:	9303      	str	r3, [sp, #12]
    cd96:	e79f      	b.n	ccd8 <__aeabi_ddiv+0x48>
    cd98:	4651      	mov	r1, sl
    cd9a:	465a      	mov	r2, fp
    cd9c:	4311      	orrs	r1, r2
    cd9e:	d129      	bne.n	cdf4 <__aeabi_ddiv+0x164>
    cda0:	2200      	movs	r2, #0
    cda2:	4693      	mov	fp, r2
    cda4:	3202      	adds	r2, #2
    cda6:	e7b1      	b.n	cd0c <__aeabi_ddiv+0x7c>
    cda8:	4659      	mov	r1, fp
    cdaa:	4301      	orrs	r1, r0
    cdac:	d01e      	beq.n	cdec <__aeabi_ddiv+0x15c>
    cdae:	465b      	mov	r3, fp
    cdb0:	2b00      	cmp	r3, #0
    cdb2:	d100      	bne.n	cdb6 <__aeabi_ddiv+0x126>
    cdb4:	e19e      	b.n	d0f4 <__aeabi_ddiv+0x464>
    cdb6:	4658      	mov	r0, fp
    cdb8:	f001 fade 	bl	e378 <__clzsi2>
    cdbc:	0003      	movs	r3, r0
    cdbe:	3b0b      	subs	r3, #11
    cdc0:	2b1c      	cmp	r3, #28
    cdc2:	dd00      	ble.n	cdc6 <__aeabi_ddiv+0x136>
    cdc4:	e18f      	b.n	d0e6 <__aeabi_ddiv+0x456>
    cdc6:	0002      	movs	r2, r0
    cdc8:	4659      	mov	r1, fp
    cdca:	3a08      	subs	r2, #8
    cdcc:	4091      	lsls	r1, r2
    cdce:	468b      	mov	fp, r1
    cdd0:	211d      	movs	r1, #29
    cdd2:	1acb      	subs	r3, r1, r3
    cdd4:	4651      	mov	r1, sl
    cdd6:	40d9      	lsrs	r1, r3
    cdd8:	000b      	movs	r3, r1
    cdda:	4659      	mov	r1, fp
    cddc:	430b      	orrs	r3, r1
    cdde:	4651      	mov	r1, sl
    cde0:	469b      	mov	fp, r3
    cde2:	4091      	lsls	r1, r2
    cde4:	4b26      	ldr	r3, [pc, #152]	; (ce80 <__aeabi_ddiv+0x1f0>)
    cde6:	2200      	movs	r2, #0
    cde8:	1a1b      	subs	r3, r3, r0
    cdea:	e78f      	b.n	cd0c <__aeabi_ddiv+0x7c>
    cdec:	2300      	movs	r3, #0
    cdee:	2201      	movs	r2, #1
    cdf0:	469b      	mov	fp, r3
    cdf2:	e78b      	b.n	cd0c <__aeabi_ddiv+0x7c>
    cdf4:	4651      	mov	r1, sl
    cdf6:	2203      	movs	r2, #3
    cdf8:	e788      	b.n	cd0c <__aeabi_ddiv+0x7c>
    cdfa:	2300      	movs	r3, #0
    cdfc:	4698      	mov	r8, r3
    cdfe:	3301      	adds	r3, #1
    ce00:	2604      	movs	r6, #4
    ce02:	2400      	movs	r4, #0
    ce04:	9303      	str	r3, [sp, #12]
    ce06:	e767      	b.n	ccd8 <__aeabi_ddiv+0x48>
    ce08:	2303      	movs	r3, #3
    ce0a:	46b1      	mov	r9, r6
    ce0c:	9303      	str	r3, [sp, #12]
    ce0e:	260c      	movs	r6, #12
    ce10:	e762      	b.n	ccd8 <__aeabi_ddiv+0x48>
    ce12:	2a03      	cmp	r2, #3
    ce14:	d100      	bne.n	ce18 <__aeabi_ddiv+0x188>
    ce16:	e25c      	b.n	d2d2 <__aeabi_ddiv+0x642>
    ce18:	9b01      	ldr	r3, [sp, #4]
    ce1a:	2a01      	cmp	r2, #1
    ce1c:	d000      	beq.n	ce20 <__aeabi_ddiv+0x190>
    ce1e:	e1e4      	b.n	d1ea <__aeabi_ddiv+0x55a>
    ce20:	4013      	ands	r3, r2
    ce22:	469c      	mov	ip, r3
    ce24:	2300      	movs	r3, #0
    ce26:	2400      	movs	r4, #0
    ce28:	2200      	movs	r2, #0
    ce2a:	4698      	mov	r8, r3
    ce2c:	2100      	movs	r1, #0
    ce2e:	0312      	lsls	r2, r2, #12
    ce30:	0b13      	lsrs	r3, r2, #12
    ce32:	0d0a      	lsrs	r2, r1, #20
    ce34:	0512      	lsls	r2, r2, #20
    ce36:	431a      	orrs	r2, r3
    ce38:	0523      	lsls	r3, r4, #20
    ce3a:	4c12      	ldr	r4, [pc, #72]	; (ce84 <__aeabi_ddiv+0x1f4>)
    ce3c:	4640      	mov	r0, r8
    ce3e:	4022      	ands	r2, r4
    ce40:	4313      	orrs	r3, r2
    ce42:	4662      	mov	r2, ip
    ce44:	005b      	lsls	r3, r3, #1
    ce46:	07d2      	lsls	r2, r2, #31
    ce48:	085b      	lsrs	r3, r3, #1
    ce4a:	4313      	orrs	r3, r2
    ce4c:	0019      	movs	r1, r3
    ce4e:	b007      	add	sp, #28
    ce50:	bc3c      	pop	{r2, r3, r4, r5}
    ce52:	4690      	mov	r8, r2
    ce54:	4699      	mov	r9, r3
    ce56:	46a2      	mov	sl, r4
    ce58:	46ab      	mov	fp, r5
    ce5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce5c:	2300      	movs	r3, #0
    ce5e:	2280      	movs	r2, #128	; 0x80
    ce60:	469c      	mov	ip, r3
    ce62:	0312      	lsls	r2, r2, #12
    ce64:	4698      	mov	r8, r3
    ce66:	4c03      	ldr	r4, [pc, #12]	; (ce74 <__aeabi_ddiv+0x1e4>)
    ce68:	e7e0      	b.n	ce2c <__aeabi_ddiv+0x19c>
    ce6a:	2300      	movs	r3, #0
    ce6c:	4c01      	ldr	r4, [pc, #4]	; (ce74 <__aeabi_ddiv+0x1e4>)
    ce6e:	2200      	movs	r2, #0
    ce70:	4698      	mov	r8, r3
    ce72:	e7db      	b.n	ce2c <__aeabi_ddiv+0x19c>
    ce74:	000007ff 	.word	0x000007ff
    ce78:	fffffc01 	.word	0xfffffc01
    ce7c:	0000f2a0 	.word	0x0000f2a0
    ce80:	fffffc0d 	.word	0xfffffc0d
    ce84:	800fffff 	.word	0x800fffff
    ce88:	45d9      	cmp	r9, fp
    ce8a:	d900      	bls.n	ce8e <__aeabi_ddiv+0x1fe>
    ce8c:	e139      	b.n	d102 <__aeabi_ddiv+0x472>
    ce8e:	d100      	bne.n	ce92 <__aeabi_ddiv+0x202>
    ce90:	e134      	b.n	d0fc <__aeabi_ddiv+0x46c>
    ce92:	2300      	movs	r3, #0
    ce94:	4646      	mov	r6, r8
    ce96:	464d      	mov	r5, r9
    ce98:	469a      	mov	sl, r3
    ce9a:	3c01      	subs	r4, #1
    ce9c:	465b      	mov	r3, fp
    ce9e:	0e0a      	lsrs	r2, r1, #24
    cea0:	021b      	lsls	r3, r3, #8
    cea2:	431a      	orrs	r2, r3
    cea4:	020b      	lsls	r3, r1, #8
    cea6:	0c17      	lsrs	r7, r2, #16
    cea8:	9303      	str	r3, [sp, #12]
    ceaa:	0413      	lsls	r3, r2, #16
    ceac:	0c1b      	lsrs	r3, r3, #16
    ceae:	0039      	movs	r1, r7
    ceb0:	0028      	movs	r0, r5
    ceb2:	4690      	mov	r8, r2
    ceb4:	9301      	str	r3, [sp, #4]
    ceb6:	f7fe feff 	bl	bcb8 <__udivsi3>
    ceba:	0002      	movs	r2, r0
    cebc:	9b01      	ldr	r3, [sp, #4]
    cebe:	4683      	mov	fp, r0
    cec0:	435a      	muls	r2, r3
    cec2:	0028      	movs	r0, r5
    cec4:	0039      	movs	r1, r7
    cec6:	4691      	mov	r9, r2
    cec8:	f7fe ff7c 	bl	bdc4 <__aeabi_uidivmod>
    cecc:	0c35      	lsrs	r5, r6, #16
    cece:	0409      	lsls	r1, r1, #16
    ced0:	430d      	orrs	r5, r1
    ced2:	45a9      	cmp	r9, r5
    ced4:	d90d      	bls.n	cef2 <__aeabi_ddiv+0x262>
    ced6:	465b      	mov	r3, fp
    ced8:	4445      	add	r5, r8
    ceda:	3b01      	subs	r3, #1
    cedc:	45a8      	cmp	r8, r5
    cede:	d900      	bls.n	cee2 <__aeabi_ddiv+0x252>
    cee0:	e13a      	b.n	d158 <__aeabi_ddiv+0x4c8>
    cee2:	45a9      	cmp	r9, r5
    cee4:	d800      	bhi.n	cee8 <__aeabi_ddiv+0x258>
    cee6:	e137      	b.n	d158 <__aeabi_ddiv+0x4c8>
    cee8:	2302      	movs	r3, #2
    ceea:	425b      	negs	r3, r3
    ceec:	469c      	mov	ip, r3
    ceee:	4445      	add	r5, r8
    cef0:	44e3      	add	fp, ip
    cef2:	464b      	mov	r3, r9
    cef4:	1aeb      	subs	r3, r5, r3
    cef6:	0039      	movs	r1, r7
    cef8:	0018      	movs	r0, r3
    cefa:	9304      	str	r3, [sp, #16]
    cefc:	f7fe fedc 	bl	bcb8 <__udivsi3>
    cf00:	9b01      	ldr	r3, [sp, #4]
    cf02:	0005      	movs	r5, r0
    cf04:	4343      	muls	r3, r0
    cf06:	0039      	movs	r1, r7
    cf08:	9804      	ldr	r0, [sp, #16]
    cf0a:	4699      	mov	r9, r3
    cf0c:	f7fe ff5a 	bl	bdc4 <__aeabi_uidivmod>
    cf10:	0433      	lsls	r3, r6, #16
    cf12:	0409      	lsls	r1, r1, #16
    cf14:	0c1b      	lsrs	r3, r3, #16
    cf16:	430b      	orrs	r3, r1
    cf18:	4599      	cmp	r9, r3
    cf1a:	d909      	bls.n	cf30 <__aeabi_ddiv+0x2a0>
    cf1c:	4443      	add	r3, r8
    cf1e:	1e6a      	subs	r2, r5, #1
    cf20:	4598      	cmp	r8, r3
    cf22:	d900      	bls.n	cf26 <__aeabi_ddiv+0x296>
    cf24:	e11a      	b.n	d15c <__aeabi_ddiv+0x4cc>
    cf26:	4599      	cmp	r9, r3
    cf28:	d800      	bhi.n	cf2c <__aeabi_ddiv+0x29c>
    cf2a:	e117      	b.n	d15c <__aeabi_ddiv+0x4cc>
    cf2c:	3d02      	subs	r5, #2
    cf2e:	4443      	add	r3, r8
    cf30:	464a      	mov	r2, r9
    cf32:	1a9b      	subs	r3, r3, r2
    cf34:	465a      	mov	r2, fp
    cf36:	0412      	lsls	r2, r2, #16
    cf38:	432a      	orrs	r2, r5
    cf3a:	9903      	ldr	r1, [sp, #12]
    cf3c:	4693      	mov	fp, r2
    cf3e:	0c10      	lsrs	r0, r2, #16
    cf40:	0c0a      	lsrs	r2, r1, #16
    cf42:	4691      	mov	r9, r2
    cf44:	0409      	lsls	r1, r1, #16
    cf46:	465a      	mov	r2, fp
    cf48:	0c09      	lsrs	r1, r1, #16
    cf4a:	464e      	mov	r6, r9
    cf4c:	000d      	movs	r5, r1
    cf4e:	0412      	lsls	r2, r2, #16
    cf50:	0c12      	lsrs	r2, r2, #16
    cf52:	4345      	muls	r5, r0
    cf54:	9105      	str	r1, [sp, #20]
    cf56:	4351      	muls	r1, r2
    cf58:	4372      	muls	r2, r6
    cf5a:	4370      	muls	r0, r6
    cf5c:	1952      	adds	r2, r2, r5
    cf5e:	0c0e      	lsrs	r6, r1, #16
    cf60:	18b2      	adds	r2, r6, r2
    cf62:	4295      	cmp	r5, r2
    cf64:	d903      	bls.n	cf6e <__aeabi_ddiv+0x2de>
    cf66:	2580      	movs	r5, #128	; 0x80
    cf68:	026d      	lsls	r5, r5, #9
    cf6a:	46ac      	mov	ip, r5
    cf6c:	4460      	add	r0, ip
    cf6e:	0c15      	lsrs	r5, r2, #16
    cf70:	0409      	lsls	r1, r1, #16
    cf72:	0412      	lsls	r2, r2, #16
    cf74:	0c09      	lsrs	r1, r1, #16
    cf76:	1828      	adds	r0, r5, r0
    cf78:	1852      	adds	r2, r2, r1
    cf7a:	4283      	cmp	r3, r0
    cf7c:	d200      	bcs.n	cf80 <__aeabi_ddiv+0x2f0>
    cf7e:	e0ce      	b.n	d11e <__aeabi_ddiv+0x48e>
    cf80:	d100      	bne.n	cf84 <__aeabi_ddiv+0x2f4>
    cf82:	e0c8      	b.n	d116 <__aeabi_ddiv+0x486>
    cf84:	1a1d      	subs	r5, r3, r0
    cf86:	4653      	mov	r3, sl
    cf88:	1a9e      	subs	r6, r3, r2
    cf8a:	45b2      	cmp	sl, r6
    cf8c:	4192      	sbcs	r2, r2
    cf8e:	4252      	negs	r2, r2
    cf90:	1aab      	subs	r3, r5, r2
    cf92:	469a      	mov	sl, r3
    cf94:	4598      	cmp	r8, r3
    cf96:	d100      	bne.n	cf9a <__aeabi_ddiv+0x30a>
    cf98:	e117      	b.n	d1ca <__aeabi_ddiv+0x53a>
    cf9a:	0039      	movs	r1, r7
    cf9c:	0018      	movs	r0, r3
    cf9e:	f7fe fe8b 	bl	bcb8 <__udivsi3>
    cfa2:	9b01      	ldr	r3, [sp, #4]
    cfa4:	0005      	movs	r5, r0
    cfa6:	4343      	muls	r3, r0
    cfa8:	0039      	movs	r1, r7
    cfaa:	4650      	mov	r0, sl
    cfac:	9304      	str	r3, [sp, #16]
    cfae:	f7fe ff09 	bl	bdc4 <__aeabi_uidivmod>
    cfb2:	9804      	ldr	r0, [sp, #16]
    cfb4:	040b      	lsls	r3, r1, #16
    cfb6:	0c31      	lsrs	r1, r6, #16
    cfb8:	4319      	orrs	r1, r3
    cfba:	4288      	cmp	r0, r1
    cfbc:	d909      	bls.n	cfd2 <__aeabi_ddiv+0x342>
    cfbe:	4441      	add	r1, r8
    cfc0:	1e6b      	subs	r3, r5, #1
    cfc2:	4588      	cmp	r8, r1
    cfc4:	d900      	bls.n	cfc8 <__aeabi_ddiv+0x338>
    cfc6:	e107      	b.n	d1d8 <__aeabi_ddiv+0x548>
    cfc8:	4288      	cmp	r0, r1
    cfca:	d800      	bhi.n	cfce <__aeabi_ddiv+0x33e>
    cfcc:	e104      	b.n	d1d8 <__aeabi_ddiv+0x548>
    cfce:	3d02      	subs	r5, #2
    cfd0:	4441      	add	r1, r8
    cfd2:	9b04      	ldr	r3, [sp, #16]
    cfd4:	1acb      	subs	r3, r1, r3
    cfd6:	0018      	movs	r0, r3
    cfd8:	0039      	movs	r1, r7
    cfda:	9304      	str	r3, [sp, #16]
    cfdc:	f7fe fe6c 	bl	bcb8 <__udivsi3>
    cfe0:	9b01      	ldr	r3, [sp, #4]
    cfe2:	4682      	mov	sl, r0
    cfe4:	4343      	muls	r3, r0
    cfe6:	0039      	movs	r1, r7
    cfe8:	9804      	ldr	r0, [sp, #16]
    cfea:	9301      	str	r3, [sp, #4]
    cfec:	f7fe feea 	bl	bdc4 <__aeabi_uidivmod>
    cff0:	9801      	ldr	r0, [sp, #4]
    cff2:	040b      	lsls	r3, r1, #16
    cff4:	0431      	lsls	r1, r6, #16
    cff6:	0c09      	lsrs	r1, r1, #16
    cff8:	4319      	orrs	r1, r3
    cffa:	4288      	cmp	r0, r1
    cffc:	d90d      	bls.n	d01a <__aeabi_ddiv+0x38a>
    cffe:	4653      	mov	r3, sl
    d000:	4441      	add	r1, r8
    d002:	3b01      	subs	r3, #1
    d004:	4588      	cmp	r8, r1
    d006:	d900      	bls.n	d00a <__aeabi_ddiv+0x37a>
    d008:	e0e8      	b.n	d1dc <__aeabi_ddiv+0x54c>
    d00a:	4288      	cmp	r0, r1
    d00c:	d800      	bhi.n	d010 <__aeabi_ddiv+0x380>
    d00e:	e0e5      	b.n	d1dc <__aeabi_ddiv+0x54c>
    d010:	2302      	movs	r3, #2
    d012:	425b      	negs	r3, r3
    d014:	469c      	mov	ip, r3
    d016:	4441      	add	r1, r8
    d018:	44e2      	add	sl, ip
    d01a:	9b01      	ldr	r3, [sp, #4]
    d01c:	042d      	lsls	r5, r5, #16
    d01e:	1ace      	subs	r6, r1, r3
    d020:	4651      	mov	r1, sl
    d022:	4329      	orrs	r1, r5
    d024:	9d05      	ldr	r5, [sp, #20]
    d026:	464f      	mov	r7, r9
    d028:	002a      	movs	r2, r5
    d02a:	040b      	lsls	r3, r1, #16
    d02c:	0c08      	lsrs	r0, r1, #16
    d02e:	0c1b      	lsrs	r3, r3, #16
    d030:	435a      	muls	r2, r3
    d032:	4345      	muls	r5, r0
    d034:	437b      	muls	r3, r7
    d036:	4378      	muls	r0, r7
    d038:	195b      	adds	r3, r3, r5
    d03a:	0c17      	lsrs	r7, r2, #16
    d03c:	18fb      	adds	r3, r7, r3
    d03e:	429d      	cmp	r5, r3
    d040:	d903      	bls.n	d04a <__aeabi_ddiv+0x3ba>
    d042:	2580      	movs	r5, #128	; 0x80
    d044:	026d      	lsls	r5, r5, #9
    d046:	46ac      	mov	ip, r5
    d048:	4460      	add	r0, ip
    d04a:	0c1d      	lsrs	r5, r3, #16
    d04c:	0412      	lsls	r2, r2, #16
    d04e:	041b      	lsls	r3, r3, #16
    d050:	0c12      	lsrs	r2, r2, #16
    d052:	1828      	adds	r0, r5, r0
    d054:	189b      	adds	r3, r3, r2
    d056:	4286      	cmp	r6, r0
    d058:	d200      	bcs.n	d05c <__aeabi_ddiv+0x3cc>
    d05a:	e093      	b.n	d184 <__aeabi_ddiv+0x4f4>
    d05c:	d100      	bne.n	d060 <__aeabi_ddiv+0x3d0>
    d05e:	e08e      	b.n	d17e <__aeabi_ddiv+0x4ee>
    d060:	2301      	movs	r3, #1
    d062:	4319      	orrs	r1, r3
    d064:	4ba0      	ldr	r3, [pc, #640]	; (d2e8 <__aeabi_ddiv+0x658>)
    d066:	18e3      	adds	r3, r4, r3
    d068:	2b00      	cmp	r3, #0
    d06a:	dc00      	bgt.n	d06e <__aeabi_ddiv+0x3de>
    d06c:	e099      	b.n	d1a2 <__aeabi_ddiv+0x512>
    d06e:	074a      	lsls	r2, r1, #29
    d070:	d000      	beq.n	d074 <__aeabi_ddiv+0x3e4>
    d072:	e09e      	b.n	d1b2 <__aeabi_ddiv+0x522>
    d074:	465a      	mov	r2, fp
    d076:	01d2      	lsls	r2, r2, #7
    d078:	d506      	bpl.n	d088 <__aeabi_ddiv+0x3f8>
    d07a:	465a      	mov	r2, fp
    d07c:	4b9b      	ldr	r3, [pc, #620]	; (d2ec <__aeabi_ddiv+0x65c>)
    d07e:	401a      	ands	r2, r3
    d080:	2380      	movs	r3, #128	; 0x80
    d082:	4693      	mov	fp, r2
    d084:	00db      	lsls	r3, r3, #3
    d086:	18e3      	adds	r3, r4, r3
    d088:	4a99      	ldr	r2, [pc, #612]	; (d2f0 <__aeabi_ddiv+0x660>)
    d08a:	4293      	cmp	r3, r2
    d08c:	dd68      	ble.n	d160 <__aeabi_ddiv+0x4d0>
    d08e:	2301      	movs	r3, #1
    d090:	9a02      	ldr	r2, [sp, #8]
    d092:	4c98      	ldr	r4, [pc, #608]	; (d2f4 <__aeabi_ddiv+0x664>)
    d094:	401a      	ands	r2, r3
    d096:	2300      	movs	r3, #0
    d098:	4694      	mov	ip, r2
    d09a:	4698      	mov	r8, r3
    d09c:	2200      	movs	r2, #0
    d09e:	e6c5      	b.n	ce2c <__aeabi_ddiv+0x19c>
    d0a0:	2280      	movs	r2, #128	; 0x80
    d0a2:	464b      	mov	r3, r9
    d0a4:	0312      	lsls	r2, r2, #12
    d0a6:	4213      	tst	r3, r2
    d0a8:	d00a      	beq.n	d0c0 <__aeabi_ddiv+0x430>
    d0aa:	465b      	mov	r3, fp
    d0ac:	4213      	tst	r3, r2
    d0ae:	d106      	bne.n	d0be <__aeabi_ddiv+0x42e>
    d0b0:	431a      	orrs	r2, r3
    d0b2:	0312      	lsls	r2, r2, #12
    d0b4:	0b12      	lsrs	r2, r2, #12
    d0b6:	46ac      	mov	ip, r5
    d0b8:	4688      	mov	r8, r1
    d0ba:	4c8e      	ldr	r4, [pc, #568]	; (d2f4 <__aeabi_ddiv+0x664>)
    d0bc:	e6b6      	b.n	ce2c <__aeabi_ddiv+0x19c>
    d0be:	464b      	mov	r3, r9
    d0c0:	431a      	orrs	r2, r3
    d0c2:	0312      	lsls	r2, r2, #12
    d0c4:	0b12      	lsrs	r2, r2, #12
    d0c6:	46bc      	mov	ip, r7
    d0c8:	4c8a      	ldr	r4, [pc, #552]	; (d2f4 <__aeabi_ddiv+0x664>)
    d0ca:	e6af      	b.n	ce2c <__aeabi_ddiv+0x19c>
    d0cc:	0003      	movs	r3, r0
    d0ce:	465a      	mov	r2, fp
    d0d0:	3b28      	subs	r3, #40	; 0x28
    d0d2:	409a      	lsls	r2, r3
    d0d4:	2300      	movs	r3, #0
    d0d6:	4691      	mov	r9, r2
    d0d8:	4698      	mov	r8, r3
    d0da:	e657      	b.n	cd8c <__aeabi_ddiv+0xfc>
    d0dc:	4658      	mov	r0, fp
    d0de:	f001 f94b 	bl	e378 <__clzsi2>
    d0e2:	3020      	adds	r0, #32
    d0e4:	e640      	b.n	cd68 <__aeabi_ddiv+0xd8>
    d0e6:	0003      	movs	r3, r0
    d0e8:	4652      	mov	r2, sl
    d0ea:	3b28      	subs	r3, #40	; 0x28
    d0ec:	409a      	lsls	r2, r3
    d0ee:	2100      	movs	r1, #0
    d0f0:	4693      	mov	fp, r2
    d0f2:	e677      	b.n	cde4 <__aeabi_ddiv+0x154>
    d0f4:	f001 f940 	bl	e378 <__clzsi2>
    d0f8:	3020      	adds	r0, #32
    d0fa:	e65f      	b.n	cdbc <__aeabi_ddiv+0x12c>
    d0fc:	4588      	cmp	r8, r1
    d0fe:	d200      	bcs.n	d102 <__aeabi_ddiv+0x472>
    d100:	e6c7      	b.n	ce92 <__aeabi_ddiv+0x202>
    d102:	464b      	mov	r3, r9
    d104:	07de      	lsls	r6, r3, #31
    d106:	085d      	lsrs	r5, r3, #1
    d108:	4643      	mov	r3, r8
    d10a:	085b      	lsrs	r3, r3, #1
    d10c:	431e      	orrs	r6, r3
    d10e:	4643      	mov	r3, r8
    d110:	07db      	lsls	r3, r3, #31
    d112:	469a      	mov	sl, r3
    d114:	e6c2      	b.n	ce9c <__aeabi_ddiv+0x20c>
    d116:	2500      	movs	r5, #0
    d118:	4592      	cmp	sl, r2
    d11a:	d300      	bcc.n	d11e <__aeabi_ddiv+0x48e>
    d11c:	e733      	b.n	cf86 <__aeabi_ddiv+0x2f6>
    d11e:	9e03      	ldr	r6, [sp, #12]
    d120:	4659      	mov	r1, fp
    d122:	46b4      	mov	ip, r6
    d124:	44e2      	add	sl, ip
    d126:	45b2      	cmp	sl, r6
    d128:	41ad      	sbcs	r5, r5
    d12a:	426d      	negs	r5, r5
    d12c:	4445      	add	r5, r8
    d12e:	18eb      	adds	r3, r5, r3
    d130:	3901      	subs	r1, #1
    d132:	4598      	cmp	r8, r3
    d134:	d207      	bcs.n	d146 <__aeabi_ddiv+0x4b6>
    d136:	4298      	cmp	r0, r3
    d138:	d900      	bls.n	d13c <__aeabi_ddiv+0x4ac>
    d13a:	e07f      	b.n	d23c <__aeabi_ddiv+0x5ac>
    d13c:	d100      	bne.n	d140 <__aeabi_ddiv+0x4b0>
    d13e:	e0bc      	b.n	d2ba <__aeabi_ddiv+0x62a>
    d140:	1a1d      	subs	r5, r3, r0
    d142:	468b      	mov	fp, r1
    d144:	e71f      	b.n	cf86 <__aeabi_ddiv+0x2f6>
    d146:	4598      	cmp	r8, r3
    d148:	d1fa      	bne.n	d140 <__aeabi_ddiv+0x4b0>
    d14a:	9d03      	ldr	r5, [sp, #12]
    d14c:	4555      	cmp	r5, sl
    d14e:	d9f2      	bls.n	d136 <__aeabi_ddiv+0x4a6>
    d150:	4643      	mov	r3, r8
    d152:	468b      	mov	fp, r1
    d154:	1a1d      	subs	r5, r3, r0
    d156:	e716      	b.n	cf86 <__aeabi_ddiv+0x2f6>
    d158:	469b      	mov	fp, r3
    d15a:	e6ca      	b.n	cef2 <__aeabi_ddiv+0x262>
    d15c:	0015      	movs	r5, r2
    d15e:	e6e7      	b.n	cf30 <__aeabi_ddiv+0x2a0>
    d160:	465a      	mov	r2, fp
    d162:	08c9      	lsrs	r1, r1, #3
    d164:	0752      	lsls	r2, r2, #29
    d166:	430a      	orrs	r2, r1
    d168:	055b      	lsls	r3, r3, #21
    d16a:	4690      	mov	r8, r2
    d16c:	0d5c      	lsrs	r4, r3, #21
    d16e:	465a      	mov	r2, fp
    d170:	2301      	movs	r3, #1
    d172:	9902      	ldr	r1, [sp, #8]
    d174:	0252      	lsls	r2, r2, #9
    d176:	4019      	ands	r1, r3
    d178:	0b12      	lsrs	r2, r2, #12
    d17a:	468c      	mov	ip, r1
    d17c:	e656      	b.n	ce2c <__aeabi_ddiv+0x19c>
    d17e:	2b00      	cmp	r3, #0
    d180:	d100      	bne.n	d184 <__aeabi_ddiv+0x4f4>
    d182:	e76f      	b.n	d064 <__aeabi_ddiv+0x3d4>
    d184:	4446      	add	r6, r8
    d186:	1e4a      	subs	r2, r1, #1
    d188:	45b0      	cmp	r8, r6
    d18a:	d929      	bls.n	d1e0 <__aeabi_ddiv+0x550>
    d18c:	0011      	movs	r1, r2
    d18e:	4286      	cmp	r6, r0
    d190:	d000      	beq.n	d194 <__aeabi_ddiv+0x504>
    d192:	e765      	b.n	d060 <__aeabi_ddiv+0x3d0>
    d194:	9a03      	ldr	r2, [sp, #12]
    d196:	4293      	cmp	r3, r2
    d198:	d000      	beq.n	d19c <__aeabi_ddiv+0x50c>
    d19a:	e761      	b.n	d060 <__aeabi_ddiv+0x3d0>
    d19c:	e762      	b.n	d064 <__aeabi_ddiv+0x3d4>
    d19e:	2101      	movs	r1, #1
    d1a0:	4249      	negs	r1, r1
    d1a2:	2001      	movs	r0, #1
    d1a4:	1ac2      	subs	r2, r0, r3
    d1a6:	2a38      	cmp	r2, #56	; 0x38
    d1a8:	dd21      	ble.n	d1ee <__aeabi_ddiv+0x55e>
    d1aa:	9b02      	ldr	r3, [sp, #8]
    d1ac:	4003      	ands	r3, r0
    d1ae:	469c      	mov	ip, r3
    d1b0:	e638      	b.n	ce24 <__aeabi_ddiv+0x194>
    d1b2:	220f      	movs	r2, #15
    d1b4:	400a      	ands	r2, r1
    d1b6:	2a04      	cmp	r2, #4
    d1b8:	d100      	bne.n	d1bc <__aeabi_ddiv+0x52c>
    d1ba:	e75b      	b.n	d074 <__aeabi_ddiv+0x3e4>
    d1bc:	000a      	movs	r2, r1
    d1be:	1d11      	adds	r1, r2, #4
    d1c0:	4291      	cmp	r1, r2
    d1c2:	4192      	sbcs	r2, r2
    d1c4:	4252      	negs	r2, r2
    d1c6:	4493      	add	fp, r2
    d1c8:	e754      	b.n	d074 <__aeabi_ddiv+0x3e4>
    d1ca:	4b47      	ldr	r3, [pc, #284]	; (d2e8 <__aeabi_ddiv+0x658>)
    d1cc:	18e3      	adds	r3, r4, r3
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	dde5      	ble.n	d19e <__aeabi_ddiv+0x50e>
    d1d2:	2201      	movs	r2, #1
    d1d4:	4252      	negs	r2, r2
    d1d6:	e7f2      	b.n	d1be <__aeabi_ddiv+0x52e>
    d1d8:	001d      	movs	r5, r3
    d1da:	e6fa      	b.n	cfd2 <__aeabi_ddiv+0x342>
    d1dc:	469a      	mov	sl, r3
    d1de:	e71c      	b.n	d01a <__aeabi_ddiv+0x38a>
    d1e0:	42b0      	cmp	r0, r6
    d1e2:	d839      	bhi.n	d258 <__aeabi_ddiv+0x5c8>
    d1e4:	d06e      	beq.n	d2c4 <__aeabi_ddiv+0x634>
    d1e6:	0011      	movs	r1, r2
    d1e8:	e73a      	b.n	d060 <__aeabi_ddiv+0x3d0>
    d1ea:	9302      	str	r3, [sp, #8]
    d1ec:	e73a      	b.n	d064 <__aeabi_ddiv+0x3d4>
    d1ee:	2a1f      	cmp	r2, #31
    d1f0:	dc3c      	bgt.n	d26c <__aeabi_ddiv+0x5dc>
    d1f2:	2320      	movs	r3, #32
    d1f4:	1a9b      	subs	r3, r3, r2
    d1f6:	000c      	movs	r4, r1
    d1f8:	4658      	mov	r0, fp
    d1fa:	4099      	lsls	r1, r3
    d1fc:	4098      	lsls	r0, r3
    d1fe:	1e4b      	subs	r3, r1, #1
    d200:	4199      	sbcs	r1, r3
    d202:	465b      	mov	r3, fp
    d204:	40d4      	lsrs	r4, r2
    d206:	40d3      	lsrs	r3, r2
    d208:	4320      	orrs	r0, r4
    d20a:	4308      	orrs	r0, r1
    d20c:	001a      	movs	r2, r3
    d20e:	0743      	lsls	r3, r0, #29
    d210:	d009      	beq.n	d226 <__aeabi_ddiv+0x596>
    d212:	230f      	movs	r3, #15
    d214:	4003      	ands	r3, r0
    d216:	2b04      	cmp	r3, #4
    d218:	d005      	beq.n	d226 <__aeabi_ddiv+0x596>
    d21a:	0001      	movs	r1, r0
    d21c:	1d08      	adds	r0, r1, #4
    d21e:	4288      	cmp	r0, r1
    d220:	419b      	sbcs	r3, r3
    d222:	425b      	negs	r3, r3
    d224:	18d2      	adds	r2, r2, r3
    d226:	0213      	lsls	r3, r2, #8
    d228:	d53a      	bpl.n	d2a0 <__aeabi_ddiv+0x610>
    d22a:	2301      	movs	r3, #1
    d22c:	9a02      	ldr	r2, [sp, #8]
    d22e:	2401      	movs	r4, #1
    d230:	401a      	ands	r2, r3
    d232:	2300      	movs	r3, #0
    d234:	4694      	mov	ip, r2
    d236:	4698      	mov	r8, r3
    d238:	2200      	movs	r2, #0
    d23a:	e5f7      	b.n	ce2c <__aeabi_ddiv+0x19c>
    d23c:	2102      	movs	r1, #2
    d23e:	4249      	negs	r1, r1
    d240:	468c      	mov	ip, r1
    d242:	9d03      	ldr	r5, [sp, #12]
    d244:	44e3      	add	fp, ip
    d246:	46ac      	mov	ip, r5
    d248:	44e2      	add	sl, ip
    d24a:	45aa      	cmp	sl, r5
    d24c:	41ad      	sbcs	r5, r5
    d24e:	426d      	negs	r5, r5
    d250:	4445      	add	r5, r8
    d252:	18ed      	adds	r5, r5, r3
    d254:	1a2d      	subs	r5, r5, r0
    d256:	e696      	b.n	cf86 <__aeabi_ddiv+0x2f6>
    d258:	1e8a      	subs	r2, r1, #2
    d25a:	9903      	ldr	r1, [sp, #12]
    d25c:	004d      	lsls	r5, r1, #1
    d25e:	428d      	cmp	r5, r1
    d260:	4189      	sbcs	r1, r1
    d262:	4249      	negs	r1, r1
    d264:	4441      	add	r1, r8
    d266:	1876      	adds	r6, r6, r1
    d268:	9503      	str	r5, [sp, #12]
    d26a:	e78f      	b.n	d18c <__aeabi_ddiv+0x4fc>
    d26c:	201f      	movs	r0, #31
    d26e:	4240      	negs	r0, r0
    d270:	1ac3      	subs	r3, r0, r3
    d272:	4658      	mov	r0, fp
    d274:	40d8      	lsrs	r0, r3
    d276:	0003      	movs	r3, r0
    d278:	2a20      	cmp	r2, #32
    d27a:	d028      	beq.n	d2ce <__aeabi_ddiv+0x63e>
    d27c:	2040      	movs	r0, #64	; 0x40
    d27e:	465d      	mov	r5, fp
    d280:	1a82      	subs	r2, r0, r2
    d282:	4095      	lsls	r5, r2
    d284:	4329      	orrs	r1, r5
    d286:	1e4a      	subs	r2, r1, #1
    d288:	4191      	sbcs	r1, r2
    d28a:	4319      	orrs	r1, r3
    d28c:	2307      	movs	r3, #7
    d28e:	2200      	movs	r2, #0
    d290:	400b      	ands	r3, r1
    d292:	d009      	beq.n	d2a8 <__aeabi_ddiv+0x618>
    d294:	230f      	movs	r3, #15
    d296:	2200      	movs	r2, #0
    d298:	400b      	ands	r3, r1
    d29a:	0008      	movs	r0, r1
    d29c:	2b04      	cmp	r3, #4
    d29e:	d1bd      	bne.n	d21c <__aeabi_ddiv+0x58c>
    d2a0:	0001      	movs	r1, r0
    d2a2:	0753      	lsls	r3, r2, #29
    d2a4:	0252      	lsls	r2, r2, #9
    d2a6:	0b12      	lsrs	r2, r2, #12
    d2a8:	08c9      	lsrs	r1, r1, #3
    d2aa:	4319      	orrs	r1, r3
    d2ac:	2301      	movs	r3, #1
    d2ae:	4688      	mov	r8, r1
    d2b0:	9902      	ldr	r1, [sp, #8]
    d2b2:	2400      	movs	r4, #0
    d2b4:	4019      	ands	r1, r3
    d2b6:	468c      	mov	ip, r1
    d2b8:	e5b8      	b.n	ce2c <__aeabi_ddiv+0x19c>
    d2ba:	4552      	cmp	r2, sl
    d2bc:	d8be      	bhi.n	d23c <__aeabi_ddiv+0x5ac>
    d2be:	468b      	mov	fp, r1
    d2c0:	2500      	movs	r5, #0
    d2c2:	e660      	b.n	cf86 <__aeabi_ddiv+0x2f6>
    d2c4:	9d03      	ldr	r5, [sp, #12]
    d2c6:	429d      	cmp	r5, r3
    d2c8:	d3c6      	bcc.n	d258 <__aeabi_ddiv+0x5c8>
    d2ca:	0011      	movs	r1, r2
    d2cc:	e762      	b.n	d194 <__aeabi_ddiv+0x504>
    d2ce:	2500      	movs	r5, #0
    d2d0:	e7d8      	b.n	d284 <__aeabi_ddiv+0x5f4>
    d2d2:	2280      	movs	r2, #128	; 0x80
    d2d4:	465b      	mov	r3, fp
    d2d6:	0312      	lsls	r2, r2, #12
    d2d8:	431a      	orrs	r2, r3
    d2da:	9b01      	ldr	r3, [sp, #4]
    d2dc:	0312      	lsls	r2, r2, #12
    d2de:	0b12      	lsrs	r2, r2, #12
    d2e0:	469c      	mov	ip, r3
    d2e2:	4688      	mov	r8, r1
    d2e4:	4c03      	ldr	r4, [pc, #12]	; (d2f4 <__aeabi_ddiv+0x664>)
    d2e6:	e5a1      	b.n	ce2c <__aeabi_ddiv+0x19c>
    d2e8:	000003ff 	.word	0x000003ff
    d2ec:	feffffff 	.word	0xfeffffff
    d2f0:	000007fe 	.word	0x000007fe
    d2f4:	000007ff 	.word	0x000007ff

0000d2f8 <__eqdf2>:
    d2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2fa:	464f      	mov	r7, r9
    d2fc:	4646      	mov	r6, r8
    d2fe:	46d6      	mov	lr, sl
    d300:	005c      	lsls	r4, r3, #1
    d302:	b5c0      	push	{r6, r7, lr}
    d304:	031f      	lsls	r7, r3, #12
    d306:	0fdb      	lsrs	r3, r3, #31
    d308:	469a      	mov	sl, r3
    d30a:	4b17      	ldr	r3, [pc, #92]	; (d368 <__eqdf2+0x70>)
    d30c:	030e      	lsls	r6, r1, #12
    d30e:	004d      	lsls	r5, r1, #1
    d310:	4684      	mov	ip, r0
    d312:	4680      	mov	r8, r0
    d314:	0b36      	lsrs	r6, r6, #12
    d316:	0d6d      	lsrs	r5, r5, #21
    d318:	0fc9      	lsrs	r1, r1, #31
    d31a:	4691      	mov	r9, r2
    d31c:	0b3f      	lsrs	r7, r7, #12
    d31e:	0d64      	lsrs	r4, r4, #21
    d320:	2001      	movs	r0, #1
    d322:	429d      	cmp	r5, r3
    d324:	d008      	beq.n	d338 <__eqdf2+0x40>
    d326:	429c      	cmp	r4, r3
    d328:	d001      	beq.n	d32e <__eqdf2+0x36>
    d32a:	42a5      	cmp	r5, r4
    d32c:	d00b      	beq.n	d346 <__eqdf2+0x4e>
    d32e:	bc1c      	pop	{r2, r3, r4}
    d330:	4690      	mov	r8, r2
    d332:	4699      	mov	r9, r3
    d334:	46a2      	mov	sl, r4
    d336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d338:	4663      	mov	r3, ip
    d33a:	4333      	orrs	r3, r6
    d33c:	d1f7      	bne.n	d32e <__eqdf2+0x36>
    d33e:	42ac      	cmp	r4, r5
    d340:	d1f5      	bne.n	d32e <__eqdf2+0x36>
    d342:	433a      	orrs	r2, r7
    d344:	d1f3      	bne.n	d32e <__eqdf2+0x36>
    d346:	2001      	movs	r0, #1
    d348:	42be      	cmp	r6, r7
    d34a:	d1f0      	bne.n	d32e <__eqdf2+0x36>
    d34c:	45c8      	cmp	r8, r9
    d34e:	d1ee      	bne.n	d32e <__eqdf2+0x36>
    d350:	4551      	cmp	r1, sl
    d352:	d007      	beq.n	d364 <__eqdf2+0x6c>
    d354:	2d00      	cmp	r5, #0
    d356:	d1ea      	bne.n	d32e <__eqdf2+0x36>
    d358:	4663      	mov	r3, ip
    d35a:	431e      	orrs	r6, r3
    d35c:	0030      	movs	r0, r6
    d35e:	1e46      	subs	r6, r0, #1
    d360:	41b0      	sbcs	r0, r6
    d362:	e7e4      	b.n	d32e <__eqdf2+0x36>
    d364:	2000      	movs	r0, #0
    d366:	e7e2      	b.n	d32e <__eqdf2+0x36>
    d368:	000007ff 	.word	0x000007ff

0000d36c <__gedf2>:
    d36c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d36e:	4645      	mov	r5, r8
    d370:	46de      	mov	lr, fp
    d372:	4657      	mov	r7, sl
    d374:	464e      	mov	r6, r9
    d376:	b5e0      	push	{r5, r6, r7, lr}
    d378:	031f      	lsls	r7, r3, #12
    d37a:	0b3d      	lsrs	r5, r7, #12
    d37c:	4f2c      	ldr	r7, [pc, #176]	; (d430 <__gedf2+0xc4>)
    d37e:	030e      	lsls	r6, r1, #12
    d380:	004c      	lsls	r4, r1, #1
    d382:	46ab      	mov	fp, r5
    d384:	005d      	lsls	r5, r3, #1
    d386:	4684      	mov	ip, r0
    d388:	0b36      	lsrs	r6, r6, #12
    d38a:	0d64      	lsrs	r4, r4, #21
    d38c:	0fc9      	lsrs	r1, r1, #31
    d38e:	4690      	mov	r8, r2
    d390:	0d6d      	lsrs	r5, r5, #21
    d392:	0fdb      	lsrs	r3, r3, #31
    d394:	42bc      	cmp	r4, r7
    d396:	d02a      	beq.n	d3ee <__gedf2+0x82>
    d398:	4f25      	ldr	r7, [pc, #148]	; (d430 <__gedf2+0xc4>)
    d39a:	42bd      	cmp	r5, r7
    d39c:	d02d      	beq.n	d3fa <__gedf2+0x8e>
    d39e:	2c00      	cmp	r4, #0
    d3a0:	d10f      	bne.n	d3c2 <__gedf2+0x56>
    d3a2:	4330      	orrs	r0, r6
    d3a4:	0007      	movs	r7, r0
    d3a6:	4681      	mov	r9, r0
    d3a8:	4278      	negs	r0, r7
    d3aa:	4178      	adcs	r0, r7
    d3ac:	b2c0      	uxtb	r0, r0
    d3ae:	2d00      	cmp	r5, #0
    d3b0:	d117      	bne.n	d3e2 <__gedf2+0x76>
    d3b2:	465f      	mov	r7, fp
    d3b4:	433a      	orrs	r2, r7
    d3b6:	d114      	bne.n	d3e2 <__gedf2+0x76>
    d3b8:	464b      	mov	r3, r9
    d3ba:	2000      	movs	r0, #0
    d3bc:	2b00      	cmp	r3, #0
    d3be:	d00a      	beq.n	d3d6 <__gedf2+0x6a>
    d3c0:	e006      	b.n	d3d0 <__gedf2+0x64>
    d3c2:	2d00      	cmp	r5, #0
    d3c4:	d102      	bne.n	d3cc <__gedf2+0x60>
    d3c6:	4658      	mov	r0, fp
    d3c8:	4302      	orrs	r2, r0
    d3ca:	d001      	beq.n	d3d0 <__gedf2+0x64>
    d3cc:	4299      	cmp	r1, r3
    d3ce:	d018      	beq.n	d402 <__gedf2+0x96>
    d3d0:	4248      	negs	r0, r1
    d3d2:	2101      	movs	r1, #1
    d3d4:	4308      	orrs	r0, r1
    d3d6:	bc3c      	pop	{r2, r3, r4, r5}
    d3d8:	4690      	mov	r8, r2
    d3da:	4699      	mov	r9, r3
    d3dc:	46a2      	mov	sl, r4
    d3de:	46ab      	mov	fp, r5
    d3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3e2:	2800      	cmp	r0, #0
    d3e4:	d0f2      	beq.n	d3cc <__gedf2+0x60>
    d3e6:	2001      	movs	r0, #1
    d3e8:	3b01      	subs	r3, #1
    d3ea:	4318      	orrs	r0, r3
    d3ec:	e7f3      	b.n	d3d6 <__gedf2+0x6a>
    d3ee:	0037      	movs	r7, r6
    d3f0:	4307      	orrs	r7, r0
    d3f2:	d0d1      	beq.n	d398 <__gedf2+0x2c>
    d3f4:	2002      	movs	r0, #2
    d3f6:	4240      	negs	r0, r0
    d3f8:	e7ed      	b.n	d3d6 <__gedf2+0x6a>
    d3fa:	465f      	mov	r7, fp
    d3fc:	4317      	orrs	r7, r2
    d3fe:	d0ce      	beq.n	d39e <__gedf2+0x32>
    d400:	e7f8      	b.n	d3f4 <__gedf2+0x88>
    d402:	42ac      	cmp	r4, r5
    d404:	dce4      	bgt.n	d3d0 <__gedf2+0x64>
    d406:	da03      	bge.n	d410 <__gedf2+0xa4>
    d408:	1e48      	subs	r0, r1, #1
    d40a:	2101      	movs	r1, #1
    d40c:	4308      	orrs	r0, r1
    d40e:	e7e2      	b.n	d3d6 <__gedf2+0x6a>
    d410:	455e      	cmp	r6, fp
    d412:	d8dd      	bhi.n	d3d0 <__gedf2+0x64>
    d414:	d006      	beq.n	d424 <__gedf2+0xb8>
    d416:	2000      	movs	r0, #0
    d418:	455e      	cmp	r6, fp
    d41a:	d2dc      	bcs.n	d3d6 <__gedf2+0x6a>
    d41c:	2301      	movs	r3, #1
    d41e:	1e48      	subs	r0, r1, #1
    d420:	4318      	orrs	r0, r3
    d422:	e7d8      	b.n	d3d6 <__gedf2+0x6a>
    d424:	45c4      	cmp	ip, r8
    d426:	d8d3      	bhi.n	d3d0 <__gedf2+0x64>
    d428:	2000      	movs	r0, #0
    d42a:	45c4      	cmp	ip, r8
    d42c:	d3f6      	bcc.n	d41c <__gedf2+0xb0>
    d42e:	e7d2      	b.n	d3d6 <__gedf2+0x6a>
    d430:	000007ff 	.word	0x000007ff

0000d434 <__ledf2>:
    d434:	b5f0      	push	{r4, r5, r6, r7, lr}
    d436:	464e      	mov	r6, r9
    d438:	4645      	mov	r5, r8
    d43a:	46de      	mov	lr, fp
    d43c:	4657      	mov	r7, sl
    d43e:	005c      	lsls	r4, r3, #1
    d440:	b5e0      	push	{r5, r6, r7, lr}
    d442:	031f      	lsls	r7, r3, #12
    d444:	0fdb      	lsrs	r3, r3, #31
    d446:	4699      	mov	r9, r3
    d448:	4b2a      	ldr	r3, [pc, #168]	; (d4f4 <__ledf2+0xc0>)
    d44a:	030e      	lsls	r6, r1, #12
    d44c:	004d      	lsls	r5, r1, #1
    d44e:	0fc9      	lsrs	r1, r1, #31
    d450:	4684      	mov	ip, r0
    d452:	0b36      	lsrs	r6, r6, #12
    d454:	0d6d      	lsrs	r5, r5, #21
    d456:	468b      	mov	fp, r1
    d458:	4690      	mov	r8, r2
    d45a:	0b3f      	lsrs	r7, r7, #12
    d45c:	0d64      	lsrs	r4, r4, #21
    d45e:	429d      	cmp	r5, r3
    d460:	d020      	beq.n	d4a4 <__ledf2+0x70>
    d462:	4b24      	ldr	r3, [pc, #144]	; (d4f4 <__ledf2+0xc0>)
    d464:	429c      	cmp	r4, r3
    d466:	d022      	beq.n	d4ae <__ledf2+0x7a>
    d468:	2d00      	cmp	r5, #0
    d46a:	d112      	bne.n	d492 <__ledf2+0x5e>
    d46c:	4330      	orrs	r0, r6
    d46e:	4243      	negs	r3, r0
    d470:	4143      	adcs	r3, r0
    d472:	b2db      	uxtb	r3, r3
    d474:	2c00      	cmp	r4, #0
    d476:	d01f      	beq.n	d4b8 <__ledf2+0x84>
    d478:	2b00      	cmp	r3, #0
    d47a:	d00c      	beq.n	d496 <__ledf2+0x62>
    d47c:	464b      	mov	r3, r9
    d47e:	2001      	movs	r0, #1
    d480:	3b01      	subs	r3, #1
    d482:	4303      	orrs	r3, r0
    d484:	0018      	movs	r0, r3
    d486:	bc3c      	pop	{r2, r3, r4, r5}
    d488:	4690      	mov	r8, r2
    d48a:	4699      	mov	r9, r3
    d48c:	46a2      	mov	sl, r4
    d48e:	46ab      	mov	fp, r5
    d490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d492:	2c00      	cmp	r4, #0
    d494:	d016      	beq.n	d4c4 <__ledf2+0x90>
    d496:	45cb      	cmp	fp, r9
    d498:	d017      	beq.n	d4ca <__ledf2+0x96>
    d49a:	465b      	mov	r3, fp
    d49c:	4259      	negs	r1, r3
    d49e:	2301      	movs	r3, #1
    d4a0:	430b      	orrs	r3, r1
    d4a2:	e7ef      	b.n	d484 <__ledf2+0x50>
    d4a4:	0031      	movs	r1, r6
    d4a6:	2302      	movs	r3, #2
    d4a8:	4301      	orrs	r1, r0
    d4aa:	d1eb      	bne.n	d484 <__ledf2+0x50>
    d4ac:	e7d9      	b.n	d462 <__ledf2+0x2e>
    d4ae:	0039      	movs	r1, r7
    d4b0:	2302      	movs	r3, #2
    d4b2:	4311      	orrs	r1, r2
    d4b4:	d1e6      	bne.n	d484 <__ledf2+0x50>
    d4b6:	e7d7      	b.n	d468 <__ledf2+0x34>
    d4b8:	433a      	orrs	r2, r7
    d4ba:	d1dd      	bne.n	d478 <__ledf2+0x44>
    d4bc:	2300      	movs	r3, #0
    d4be:	2800      	cmp	r0, #0
    d4c0:	d0e0      	beq.n	d484 <__ledf2+0x50>
    d4c2:	e7ea      	b.n	d49a <__ledf2+0x66>
    d4c4:	433a      	orrs	r2, r7
    d4c6:	d1e6      	bne.n	d496 <__ledf2+0x62>
    d4c8:	e7e7      	b.n	d49a <__ledf2+0x66>
    d4ca:	42a5      	cmp	r5, r4
    d4cc:	dce5      	bgt.n	d49a <__ledf2+0x66>
    d4ce:	db05      	blt.n	d4dc <__ledf2+0xa8>
    d4d0:	42be      	cmp	r6, r7
    d4d2:	d8e2      	bhi.n	d49a <__ledf2+0x66>
    d4d4:	d007      	beq.n	d4e6 <__ledf2+0xb2>
    d4d6:	2300      	movs	r3, #0
    d4d8:	42be      	cmp	r6, r7
    d4da:	d2d3      	bcs.n	d484 <__ledf2+0x50>
    d4dc:	4659      	mov	r1, fp
    d4de:	2301      	movs	r3, #1
    d4e0:	3901      	subs	r1, #1
    d4e2:	430b      	orrs	r3, r1
    d4e4:	e7ce      	b.n	d484 <__ledf2+0x50>
    d4e6:	45c4      	cmp	ip, r8
    d4e8:	d8d7      	bhi.n	d49a <__ledf2+0x66>
    d4ea:	2300      	movs	r3, #0
    d4ec:	45c4      	cmp	ip, r8
    d4ee:	d3f5      	bcc.n	d4dc <__ledf2+0xa8>
    d4f0:	e7c8      	b.n	d484 <__ledf2+0x50>
    d4f2:	46c0      	nop			; (mov r8, r8)
    d4f4:	000007ff 	.word	0x000007ff

0000d4f8 <__aeabi_dmul>:
    d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4fa:	4657      	mov	r7, sl
    d4fc:	4645      	mov	r5, r8
    d4fe:	46de      	mov	lr, fp
    d500:	464e      	mov	r6, r9
    d502:	b5e0      	push	{r5, r6, r7, lr}
    d504:	030c      	lsls	r4, r1, #12
    d506:	4698      	mov	r8, r3
    d508:	004e      	lsls	r6, r1, #1
    d50a:	0b23      	lsrs	r3, r4, #12
    d50c:	b087      	sub	sp, #28
    d50e:	0007      	movs	r7, r0
    d510:	4692      	mov	sl, r2
    d512:	469b      	mov	fp, r3
    d514:	0d76      	lsrs	r6, r6, #21
    d516:	0fcd      	lsrs	r5, r1, #31
    d518:	2e00      	cmp	r6, #0
    d51a:	d06b      	beq.n	d5f4 <__aeabi_dmul+0xfc>
    d51c:	4b6d      	ldr	r3, [pc, #436]	; (d6d4 <__aeabi_dmul+0x1dc>)
    d51e:	429e      	cmp	r6, r3
    d520:	d035      	beq.n	d58e <__aeabi_dmul+0x96>
    d522:	2480      	movs	r4, #128	; 0x80
    d524:	465b      	mov	r3, fp
    d526:	0f42      	lsrs	r2, r0, #29
    d528:	0424      	lsls	r4, r4, #16
    d52a:	00db      	lsls	r3, r3, #3
    d52c:	4314      	orrs	r4, r2
    d52e:	431c      	orrs	r4, r3
    d530:	00c3      	lsls	r3, r0, #3
    d532:	4699      	mov	r9, r3
    d534:	4b68      	ldr	r3, [pc, #416]	; (d6d8 <__aeabi_dmul+0x1e0>)
    d536:	46a3      	mov	fp, r4
    d538:	469c      	mov	ip, r3
    d53a:	2300      	movs	r3, #0
    d53c:	2700      	movs	r7, #0
    d53e:	4466      	add	r6, ip
    d540:	9302      	str	r3, [sp, #8]
    d542:	4643      	mov	r3, r8
    d544:	031c      	lsls	r4, r3, #12
    d546:	005a      	lsls	r2, r3, #1
    d548:	0fdb      	lsrs	r3, r3, #31
    d54a:	4650      	mov	r0, sl
    d54c:	0b24      	lsrs	r4, r4, #12
    d54e:	0d52      	lsrs	r2, r2, #21
    d550:	4698      	mov	r8, r3
    d552:	d100      	bne.n	d556 <__aeabi_dmul+0x5e>
    d554:	e076      	b.n	d644 <__aeabi_dmul+0x14c>
    d556:	4b5f      	ldr	r3, [pc, #380]	; (d6d4 <__aeabi_dmul+0x1dc>)
    d558:	429a      	cmp	r2, r3
    d55a:	d06d      	beq.n	d638 <__aeabi_dmul+0x140>
    d55c:	2380      	movs	r3, #128	; 0x80
    d55e:	0f41      	lsrs	r1, r0, #29
    d560:	041b      	lsls	r3, r3, #16
    d562:	430b      	orrs	r3, r1
    d564:	495c      	ldr	r1, [pc, #368]	; (d6d8 <__aeabi_dmul+0x1e0>)
    d566:	00e4      	lsls	r4, r4, #3
    d568:	468c      	mov	ip, r1
    d56a:	431c      	orrs	r4, r3
    d56c:	00c3      	lsls	r3, r0, #3
    d56e:	2000      	movs	r0, #0
    d570:	4462      	add	r2, ip
    d572:	4641      	mov	r1, r8
    d574:	18b6      	adds	r6, r6, r2
    d576:	4069      	eors	r1, r5
    d578:	1c72      	adds	r2, r6, #1
    d57a:	9101      	str	r1, [sp, #4]
    d57c:	4694      	mov	ip, r2
    d57e:	4307      	orrs	r7, r0
    d580:	2f0f      	cmp	r7, #15
    d582:	d900      	bls.n	d586 <__aeabi_dmul+0x8e>
    d584:	e0b0      	b.n	d6e8 <__aeabi_dmul+0x1f0>
    d586:	4a55      	ldr	r2, [pc, #340]	; (d6dc <__aeabi_dmul+0x1e4>)
    d588:	00bf      	lsls	r7, r7, #2
    d58a:	59d2      	ldr	r2, [r2, r7]
    d58c:	4697      	mov	pc, r2
    d58e:	465b      	mov	r3, fp
    d590:	4303      	orrs	r3, r0
    d592:	4699      	mov	r9, r3
    d594:	d000      	beq.n	d598 <__aeabi_dmul+0xa0>
    d596:	e087      	b.n	d6a8 <__aeabi_dmul+0x1b0>
    d598:	2300      	movs	r3, #0
    d59a:	469b      	mov	fp, r3
    d59c:	3302      	adds	r3, #2
    d59e:	2708      	movs	r7, #8
    d5a0:	9302      	str	r3, [sp, #8]
    d5a2:	e7ce      	b.n	d542 <__aeabi_dmul+0x4a>
    d5a4:	4642      	mov	r2, r8
    d5a6:	9201      	str	r2, [sp, #4]
    d5a8:	2802      	cmp	r0, #2
    d5aa:	d067      	beq.n	d67c <__aeabi_dmul+0x184>
    d5ac:	2803      	cmp	r0, #3
    d5ae:	d100      	bne.n	d5b2 <__aeabi_dmul+0xba>
    d5b0:	e20e      	b.n	d9d0 <__aeabi_dmul+0x4d8>
    d5b2:	2801      	cmp	r0, #1
    d5b4:	d000      	beq.n	d5b8 <__aeabi_dmul+0xc0>
    d5b6:	e162      	b.n	d87e <__aeabi_dmul+0x386>
    d5b8:	2300      	movs	r3, #0
    d5ba:	2400      	movs	r4, #0
    d5bc:	2200      	movs	r2, #0
    d5be:	4699      	mov	r9, r3
    d5c0:	9901      	ldr	r1, [sp, #4]
    d5c2:	4001      	ands	r1, r0
    d5c4:	b2cd      	uxtb	r5, r1
    d5c6:	2100      	movs	r1, #0
    d5c8:	0312      	lsls	r2, r2, #12
    d5ca:	0d0b      	lsrs	r3, r1, #20
    d5cc:	0b12      	lsrs	r2, r2, #12
    d5ce:	051b      	lsls	r3, r3, #20
    d5d0:	4313      	orrs	r3, r2
    d5d2:	4a43      	ldr	r2, [pc, #268]	; (d6e0 <__aeabi_dmul+0x1e8>)
    d5d4:	0524      	lsls	r4, r4, #20
    d5d6:	4013      	ands	r3, r2
    d5d8:	431c      	orrs	r4, r3
    d5da:	0064      	lsls	r4, r4, #1
    d5dc:	07ed      	lsls	r5, r5, #31
    d5de:	0864      	lsrs	r4, r4, #1
    d5e0:	432c      	orrs	r4, r5
    d5e2:	4648      	mov	r0, r9
    d5e4:	0021      	movs	r1, r4
    d5e6:	b007      	add	sp, #28
    d5e8:	bc3c      	pop	{r2, r3, r4, r5}
    d5ea:	4690      	mov	r8, r2
    d5ec:	4699      	mov	r9, r3
    d5ee:	46a2      	mov	sl, r4
    d5f0:	46ab      	mov	fp, r5
    d5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5f4:	4303      	orrs	r3, r0
    d5f6:	4699      	mov	r9, r3
    d5f8:	d04f      	beq.n	d69a <__aeabi_dmul+0x1a2>
    d5fa:	465b      	mov	r3, fp
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d100      	bne.n	d602 <__aeabi_dmul+0x10a>
    d600:	e189      	b.n	d916 <__aeabi_dmul+0x41e>
    d602:	4658      	mov	r0, fp
    d604:	f000 feb8 	bl	e378 <__clzsi2>
    d608:	0003      	movs	r3, r0
    d60a:	3b0b      	subs	r3, #11
    d60c:	2b1c      	cmp	r3, #28
    d60e:	dd00      	ble.n	d612 <__aeabi_dmul+0x11a>
    d610:	e17a      	b.n	d908 <__aeabi_dmul+0x410>
    d612:	221d      	movs	r2, #29
    d614:	1ad3      	subs	r3, r2, r3
    d616:	003a      	movs	r2, r7
    d618:	0001      	movs	r1, r0
    d61a:	465c      	mov	r4, fp
    d61c:	40da      	lsrs	r2, r3
    d61e:	3908      	subs	r1, #8
    d620:	408c      	lsls	r4, r1
    d622:	0013      	movs	r3, r2
    d624:	408f      	lsls	r7, r1
    d626:	4323      	orrs	r3, r4
    d628:	469b      	mov	fp, r3
    d62a:	46b9      	mov	r9, r7
    d62c:	2300      	movs	r3, #0
    d62e:	4e2d      	ldr	r6, [pc, #180]	; (d6e4 <__aeabi_dmul+0x1ec>)
    d630:	2700      	movs	r7, #0
    d632:	1a36      	subs	r6, r6, r0
    d634:	9302      	str	r3, [sp, #8]
    d636:	e784      	b.n	d542 <__aeabi_dmul+0x4a>
    d638:	4653      	mov	r3, sl
    d63a:	4323      	orrs	r3, r4
    d63c:	d12a      	bne.n	d694 <__aeabi_dmul+0x19c>
    d63e:	2400      	movs	r4, #0
    d640:	2002      	movs	r0, #2
    d642:	e796      	b.n	d572 <__aeabi_dmul+0x7a>
    d644:	4653      	mov	r3, sl
    d646:	4323      	orrs	r3, r4
    d648:	d020      	beq.n	d68c <__aeabi_dmul+0x194>
    d64a:	2c00      	cmp	r4, #0
    d64c:	d100      	bne.n	d650 <__aeabi_dmul+0x158>
    d64e:	e157      	b.n	d900 <__aeabi_dmul+0x408>
    d650:	0020      	movs	r0, r4
    d652:	f000 fe91 	bl	e378 <__clzsi2>
    d656:	0003      	movs	r3, r0
    d658:	3b0b      	subs	r3, #11
    d65a:	2b1c      	cmp	r3, #28
    d65c:	dd00      	ble.n	d660 <__aeabi_dmul+0x168>
    d65e:	e149      	b.n	d8f4 <__aeabi_dmul+0x3fc>
    d660:	211d      	movs	r1, #29
    d662:	1acb      	subs	r3, r1, r3
    d664:	4651      	mov	r1, sl
    d666:	0002      	movs	r2, r0
    d668:	40d9      	lsrs	r1, r3
    d66a:	4653      	mov	r3, sl
    d66c:	3a08      	subs	r2, #8
    d66e:	4094      	lsls	r4, r2
    d670:	4093      	lsls	r3, r2
    d672:	430c      	orrs	r4, r1
    d674:	4a1b      	ldr	r2, [pc, #108]	; (d6e4 <__aeabi_dmul+0x1ec>)
    d676:	1a12      	subs	r2, r2, r0
    d678:	2000      	movs	r0, #0
    d67a:	e77a      	b.n	d572 <__aeabi_dmul+0x7a>
    d67c:	2501      	movs	r5, #1
    d67e:	9b01      	ldr	r3, [sp, #4]
    d680:	4c14      	ldr	r4, [pc, #80]	; (d6d4 <__aeabi_dmul+0x1dc>)
    d682:	401d      	ands	r5, r3
    d684:	2300      	movs	r3, #0
    d686:	2200      	movs	r2, #0
    d688:	4699      	mov	r9, r3
    d68a:	e79c      	b.n	d5c6 <__aeabi_dmul+0xce>
    d68c:	2400      	movs	r4, #0
    d68e:	2200      	movs	r2, #0
    d690:	2001      	movs	r0, #1
    d692:	e76e      	b.n	d572 <__aeabi_dmul+0x7a>
    d694:	4653      	mov	r3, sl
    d696:	2003      	movs	r0, #3
    d698:	e76b      	b.n	d572 <__aeabi_dmul+0x7a>
    d69a:	2300      	movs	r3, #0
    d69c:	469b      	mov	fp, r3
    d69e:	3301      	adds	r3, #1
    d6a0:	2704      	movs	r7, #4
    d6a2:	2600      	movs	r6, #0
    d6a4:	9302      	str	r3, [sp, #8]
    d6a6:	e74c      	b.n	d542 <__aeabi_dmul+0x4a>
    d6a8:	2303      	movs	r3, #3
    d6aa:	4681      	mov	r9, r0
    d6ac:	270c      	movs	r7, #12
    d6ae:	9302      	str	r3, [sp, #8]
    d6b0:	e747      	b.n	d542 <__aeabi_dmul+0x4a>
    d6b2:	2280      	movs	r2, #128	; 0x80
    d6b4:	2300      	movs	r3, #0
    d6b6:	2500      	movs	r5, #0
    d6b8:	0312      	lsls	r2, r2, #12
    d6ba:	4699      	mov	r9, r3
    d6bc:	4c05      	ldr	r4, [pc, #20]	; (d6d4 <__aeabi_dmul+0x1dc>)
    d6be:	e782      	b.n	d5c6 <__aeabi_dmul+0xce>
    d6c0:	465c      	mov	r4, fp
    d6c2:	464b      	mov	r3, r9
    d6c4:	9802      	ldr	r0, [sp, #8]
    d6c6:	e76f      	b.n	d5a8 <__aeabi_dmul+0xb0>
    d6c8:	465c      	mov	r4, fp
    d6ca:	464b      	mov	r3, r9
    d6cc:	9501      	str	r5, [sp, #4]
    d6ce:	9802      	ldr	r0, [sp, #8]
    d6d0:	e76a      	b.n	d5a8 <__aeabi_dmul+0xb0>
    d6d2:	46c0      	nop			; (mov r8, r8)
    d6d4:	000007ff 	.word	0x000007ff
    d6d8:	fffffc01 	.word	0xfffffc01
    d6dc:	0000f2e0 	.word	0x0000f2e0
    d6e0:	800fffff 	.word	0x800fffff
    d6e4:	fffffc0d 	.word	0xfffffc0d
    d6e8:	464a      	mov	r2, r9
    d6ea:	4649      	mov	r1, r9
    d6ec:	0c17      	lsrs	r7, r2, #16
    d6ee:	0c1a      	lsrs	r2, r3, #16
    d6f0:	041b      	lsls	r3, r3, #16
    d6f2:	0c1b      	lsrs	r3, r3, #16
    d6f4:	0408      	lsls	r0, r1, #16
    d6f6:	0019      	movs	r1, r3
    d6f8:	0c00      	lsrs	r0, r0, #16
    d6fa:	4341      	muls	r1, r0
    d6fc:	0015      	movs	r5, r2
    d6fe:	4688      	mov	r8, r1
    d700:	0019      	movs	r1, r3
    d702:	437d      	muls	r5, r7
    d704:	4379      	muls	r1, r7
    d706:	9503      	str	r5, [sp, #12]
    d708:	4689      	mov	r9, r1
    d70a:	0029      	movs	r1, r5
    d70c:	0015      	movs	r5, r2
    d70e:	4345      	muls	r5, r0
    d710:	444d      	add	r5, r9
    d712:	9502      	str	r5, [sp, #8]
    d714:	4645      	mov	r5, r8
    d716:	0c2d      	lsrs	r5, r5, #16
    d718:	46aa      	mov	sl, r5
    d71a:	9d02      	ldr	r5, [sp, #8]
    d71c:	4455      	add	r5, sl
    d71e:	45a9      	cmp	r9, r5
    d720:	d906      	bls.n	d730 <__aeabi_dmul+0x238>
    d722:	468a      	mov	sl, r1
    d724:	2180      	movs	r1, #128	; 0x80
    d726:	0249      	lsls	r1, r1, #9
    d728:	4689      	mov	r9, r1
    d72a:	44ca      	add	sl, r9
    d72c:	4651      	mov	r1, sl
    d72e:	9103      	str	r1, [sp, #12]
    d730:	0c29      	lsrs	r1, r5, #16
    d732:	9104      	str	r1, [sp, #16]
    d734:	4641      	mov	r1, r8
    d736:	0409      	lsls	r1, r1, #16
    d738:	042d      	lsls	r5, r5, #16
    d73a:	0c09      	lsrs	r1, r1, #16
    d73c:	4688      	mov	r8, r1
    d73e:	0029      	movs	r1, r5
    d740:	0c25      	lsrs	r5, r4, #16
    d742:	0424      	lsls	r4, r4, #16
    d744:	4441      	add	r1, r8
    d746:	0c24      	lsrs	r4, r4, #16
    d748:	9105      	str	r1, [sp, #20]
    d74a:	0021      	movs	r1, r4
    d74c:	4341      	muls	r1, r0
    d74e:	4688      	mov	r8, r1
    d750:	0021      	movs	r1, r4
    d752:	4379      	muls	r1, r7
    d754:	468a      	mov	sl, r1
    d756:	4368      	muls	r0, r5
    d758:	4641      	mov	r1, r8
    d75a:	4450      	add	r0, sl
    d75c:	4681      	mov	r9, r0
    d75e:	0c08      	lsrs	r0, r1, #16
    d760:	4448      	add	r0, r9
    d762:	436f      	muls	r7, r5
    d764:	4582      	cmp	sl, r0
    d766:	d903      	bls.n	d770 <__aeabi_dmul+0x278>
    d768:	2180      	movs	r1, #128	; 0x80
    d76a:	0249      	lsls	r1, r1, #9
    d76c:	4689      	mov	r9, r1
    d76e:	444f      	add	r7, r9
    d770:	0c01      	lsrs	r1, r0, #16
    d772:	4689      	mov	r9, r1
    d774:	0039      	movs	r1, r7
    d776:	4449      	add	r1, r9
    d778:	9102      	str	r1, [sp, #8]
    d77a:	4641      	mov	r1, r8
    d77c:	040f      	lsls	r7, r1, #16
    d77e:	9904      	ldr	r1, [sp, #16]
    d780:	0c3f      	lsrs	r7, r7, #16
    d782:	4688      	mov	r8, r1
    d784:	0400      	lsls	r0, r0, #16
    d786:	19c0      	adds	r0, r0, r7
    d788:	4480      	add	r8, r0
    d78a:	4641      	mov	r1, r8
    d78c:	9104      	str	r1, [sp, #16]
    d78e:	4659      	mov	r1, fp
    d790:	0c0f      	lsrs	r7, r1, #16
    d792:	0409      	lsls	r1, r1, #16
    d794:	0c09      	lsrs	r1, r1, #16
    d796:	4688      	mov	r8, r1
    d798:	4359      	muls	r1, r3
    d79a:	468a      	mov	sl, r1
    d79c:	0039      	movs	r1, r7
    d79e:	4351      	muls	r1, r2
    d7a0:	4689      	mov	r9, r1
    d7a2:	4641      	mov	r1, r8
    d7a4:	434a      	muls	r2, r1
    d7a6:	4651      	mov	r1, sl
    d7a8:	0c09      	lsrs	r1, r1, #16
    d7aa:	468b      	mov	fp, r1
    d7ac:	437b      	muls	r3, r7
    d7ae:	18d2      	adds	r2, r2, r3
    d7b0:	445a      	add	r2, fp
    d7b2:	4293      	cmp	r3, r2
    d7b4:	d903      	bls.n	d7be <__aeabi_dmul+0x2c6>
    d7b6:	2380      	movs	r3, #128	; 0x80
    d7b8:	025b      	lsls	r3, r3, #9
    d7ba:	469b      	mov	fp, r3
    d7bc:	44d9      	add	r9, fp
    d7be:	4651      	mov	r1, sl
    d7c0:	0409      	lsls	r1, r1, #16
    d7c2:	0c09      	lsrs	r1, r1, #16
    d7c4:	468a      	mov	sl, r1
    d7c6:	4641      	mov	r1, r8
    d7c8:	4361      	muls	r1, r4
    d7ca:	437c      	muls	r4, r7
    d7cc:	0c13      	lsrs	r3, r2, #16
    d7ce:	0412      	lsls	r2, r2, #16
    d7d0:	444b      	add	r3, r9
    d7d2:	4452      	add	r2, sl
    d7d4:	46a1      	mov	r9, r4
    d7d6:	468a      	mov	sl, r1
    d7d8:	003c      	movs	r4, r7
    d7da:	4641      	mov	r1, r8
    d7dc:	436c      	muls	r4, r5
    d7de:	434d      	muls	r5, r1
    d7e0:	4651      	mov	r1, sl
    d7e2:	444d      	add	r5, r9
    d7e4:	0c0f      	lsrs	r7, r1, #16
    d7e6:	197d      	adds	r5, r7, r5
    d7e8:	45a9      	cmp	r9, r5
    d7ea:	d903      	bls.n	d7f4 <__aeabi_dmul+0x2fc>
    d7ec:	2180      	movs	r1, #128	; 0x80
    d7ee:	0249      	lsls	r1, r1, #9
    d7f0:	4688      	mov	r8, r1
    d7f2:	4444      	add	r4, r8
    d7f4:	9f04      	ldr	r7, [sp, #16]
    d7f6:	9903      	ldr	r1, [sp, #12]
    d7f8:	46b8      	mov	r8, r7
    d7fa:	4441      	add	r1, r8
    d7fc:	468b      	mov	fp, r1
    d7fe:	4583      	cmp	fp, r0
    d800:	4180      	sbcs	r0, r0
    d802:	4241      	negs	r1, r0
    d804:	4688      	mov	r8, r1
    d806:	4651      	mov	r1, sl
    d808:	0408      	lsls	r0, r1, #16
    d80a:	042f      	lsls	r7, r5, #16
    d80c:	0c00      	lsrs	r0, r0, #16
    d80e:	183f      	adds	r7, r7, r0
    d810:	4658      	mov	r0, fp
    d812:	9902      	ldr	r1, [sp, #8]
    d814:	1810      	adds	r0, r2, r0
    d816:	4689      	mov	r9, r1
    d818:	4290      	cmp	r0, r2
    d81a:	4192      	sbcs	r2, r2
    d81c:	444f      	add	r7, r9
    d81e:	46ba      	mov	sl, r7
    d820:	4252      	negs	r2, r2
    d822:	4699      	mov	r9, r3
    d824:	4693      	mov	fp, r2
    d826:	44c2      	add	sl, r8
    d828:	44d1      	add	r9, sl
    d82a:	44cb      	add	fp, r9
    d82c:	428f      	cmp	r7, r1
    d82e:	41bf      	sbcs	r7, r7
    d830:	45c2      	cmp	sl, r8
    d832:	4189      	sbcs	r1, r1
    d834:	4599      	cmp	r9, r3
    d836:	419b      	sbcs	r3, r3
    d838:	4593      	cmp	fp, r2
    d83a:	4192      	sbcs	r2, r2
    d83c:	427f      	negs	r7, r7
    d83e:	4249      	negs	r1, r1
    d840:	0c2d      	lsrs	r5, r5, #16
    d842:	4252      	negs	r2, r2
    d844:	430f      	orrs	r7, r1
    d846:	425b      	negs	r3, r3
    d848:	4313      	orrs	r3, r2
    d84a:	197f      	adds	r7, r7, r5
    d84c:	18ff      	adds	r7, r7, r3
    d84e:	465b      	mov	r3, fp
    d850:	193c      	adds	r4, r7, r4
    d852:	0ddb      	lsrs	r3, r3, #23
    d854:	9a05      	ldr	r2, [sp, #20]
    d856:	0264      	lsls	r4, r4, #9
    d858:	431c      	orrs	r4, r3
    d85a:	0243      	lsls	r3, r0, #9
    d85c:	4313      	orrs	r3, r2
    d85e:	1e5d      	subs	r5, r3, #1
    d860:	41ab      	sbcs	r3, r5
    d862:	465a      	mov	r2, fp
    d864:	0dc0      	lsrs	r0, r0, #23
    d866:	4303      	orrs	r3, r0
    d868:	0252      	lsls	r2, r2, #9
    d86a:	4313      	orrs	r3, r2
    d86c:	01e2      	lsls	r2, r4, #7
    d86e:	d556      	bpl.n	d91e <__aeabi_dmul+0x426>
    d870:	2001      	movs	r0, #1
    d872:	085a      	lsrs	r2, r3, #1
    d874:	4003      	ands	r3, r0
    d876:	4313      	orrs	r3, r2
    d878:	07e2      	lsls	r2, r4, #31
    d87a:	4313      	orrs	r3, r2
    d87c:	0864      	lsrs	r4, r4, #1
    d87e:	485a      	ldr	r0, [pc, #360]	; (d9e8 <__aeabi_dmul+0x4f0>)
    d880:	4460      	add	r0, ip
    d882:	2800      	cmp	r0, #0
    d884:	dd4d      	ble.n	d922 <__aeabi_dmul+0x42a>
    d886:	075a      	lsls	r2, r3, #29
    d888:	d009      	beq.n	d89e <__aeabi_dmul+0x3a6>
    d88a:	220f      	movs	r2, #15
    d88c:	401a      	ands	r2, r3
    d88e:	2a04      	cmp	r2, #4
    d890:	d005      	beq.n	d89e <__aeabi_dmul+0x3a6>
    d892:	1d1a      	adds	r2, r3, #4
    d894:	429a      	cmp	r2, r3
    d896:	419b      	sbcs	r3, r3
    d898:	425b      	negs	r3, r3
    d89a:	18e4      	adds	r4, r4, r3
    d89c:	0013      	movs	r3, r2
    d89e:	01e2      	lsls	r2, r4, #7
    d8a0:	d504      	bpl.n	d8ac <__aeabi_dmul+0x3b4>
    d8a2:	2080      	movs	r0, #128	; 0x80
    d8a4:	4a51      	ldr	r2, [pc, #324]	; (d9ec <__aeabi_dmul+0x4f4>)
    d8a6:	00c0      	lsls	r0, r0, #3
    d8a8:	4014      	ands	r4, r2
    d8aa:	4460      	add	r0, ip
    d8ac:	4a50      	ldr	r2, [pc, #320]	; (d9f0 <__aeabi_dmul+0x4f8>)
    d8ae:	4290      	cmp	r0, r2
    d8b0:	dd00      	ble.n	d8b4 <__aeabi_dmul+0x3bc>
    d8b2:	e6e3      	b.n	d67c <__aeabi_dmul+0x184>
    d8b4:	2501      	movs	r5, #1
    d8b6:	08db      	lsrs	r3, r3, #3
    d8b8:	0762      	lsls	r2, r4, #29
    d8ba:	431a      	orrs	r2, r3
    d8bc:	0264      	lsls	r4, r4, #9
    d8be:	9b01      	ldr	r3, [sp, #4]
    d8c0:	4691      	mov	r9, r2
    d8c2:	0b22      	lsrs	r2, r4, #12
    d8c4:	0544      	lsls	r4, r0, #21
    d8c6:	0d64      	lsrs	r4, r4, #21
    d8c8:	401d      	ands	r5, r3
    d8ca:	e67c      	b.n	d5c6 <__aeabi_dmul+0xce>
    d8cc:	2280      	movs	r2, #128	; 0x80
    d8ce:	4659      	mov	r1, fp
    d8d0:	0312      	lsls	r2, r2, #12
    d8d2:	4211      	tst	r1, r2
    d8d4:	d008      	beq.n	d8e8 <__aeabi_dmul+0x3f0>
    d8d6:	4214      	tst	r4, r2
    d8d8:	d106      	bne.n	d8e8 <__aeabi_dmul+0x3f0>
    d8da:	4322      	orrs	r2, r4
    d8dc:	0312      	lsls	r2, r2, #12
    d8de:	0b12      	lsrs	r2, r2, #12
    d8e0:	4645      	mov	r5, r8
    d8e2:	4699      	mov	r9, r3
    d8e4:	4c43      	ldr	r4, [pc, #268]	; (d9f4 <__aeabi_dmul+0x4fc>)
    d8e6:	e66e      	b.n	d5c6 <__aeabi_dmul+0xce>
    d8e8:	465b      	mov	r3, fp
    d8ea:	431a      	orrs	r2, r3
    d8ec:	0312      	lsls	r2, r2, #12
    d8ee:	0b12      	lsrs	r2, r2, #12
    d8f0:	4c40      	ldr	r4, [pc, #256]	; (d9f4 <__aeabi_dmul+0x4fc>)
    d8f2:	e668      	b.n	d5c6 <__aeabi_dmul+0xce>
    d8f4:	0003      	movs	r3, r0
    d8f6:	4654      	mov	r4, sl
    d8f8:	3b28      	subs	r3, #40	; 0x28
    d8fa:	409c      	lsls	r4, r3
    d8fc:	2300      	movs	r3, #0
    d8fe:	e6b9      	b.n	d674 <__aeabi_dmul+0x17c>
    d900:	f000 fd3a 	bl	e378 <__clzsi2>
    d904:	3020      	adds	r0, #32
    d906:	e6a6      	b.n	d656 <__aeabi_dmul+0x15e>
    d908:	0003      	movs	r3, r0
    d90a:	3b28      	subs	r3, #40	; 0x28
    d90c:	409f      	lsls	r7, r3
    d90e:	2300      	movs	r3, #0
    d910:	46bb      	mov	fp, r7
    d912:	4699      	mov	r9, r3
    d914:	e68a      	b.n	d62c <__aeabi_dmul+0x134>
    d916:	f000 fd2f 	bl	e378 <__clzsi2>
    d91a:	3020      	adds	r0, #32
    d91c:	e674      	b.n	d608 <__aeabi_dmul+0x110>
    d91e:	46b4      	mov	ip, r6
    d920:	e7ad      	b.n	d87e <__aeabi_dmul+0x386>
    d922:	2501      	movs	r5, #1
    d924:	1a2a      	subs	r2, r5, r0
    d926:	2a38      	cmp	r2, #56	; 0x38
    d928:	dd06      	ble.n	d938 <__aeabi_dmul+0x440>
    d92a:	9b01      	ldr	r3, [sp, #4]
    d92c:	2400      	movs	r4, #0
    d92e:	401d      	ands	r5, r3
    d930:	2300      	movs	r3, #0
    d932:	2200      	movs	r2, #0
    d934:	4699      	mov	r9, r3
    d936:	e646      	b.n	d5c6 <__aeabi_dmul+0xce>
    d938:	2a1f      	cmp	r2, #31
    d93a:	dc21      	bgt.n	d980 <__aeabi_dmul+0x488>
    d93c:	2520      	movs	r5, #32
    d93e:	0020      	movs	r0, r4
    d940:	1aad      	subs	r5, r5, r2
    d942:	001e      	movs	r6, r3
    d944:	40ab      	lsls	r3, r5
    d946:	40a8      	lsls	r0, r5
    d948:	40d6      	lsrs	r6, r2
    d94a:	1e5d      	subs	r5, r3, #1
    d94c:	41ab      	sbcs	r3, r5
    d94e:	4330      	orrs	r0, r6
    d950:	4318      	orrs	r0, r3
    d952:	40d4      	lsrs	r4, r2
    d954:	0743      	lsls	r3, r0, #29
    d956:	d009      	beq.n	d96c <__aeabi_dmul+0x474>
    d958:	230f      	movs	r3, #15
    d95a:	4003      	ands	r3, r0
    d95c:	2b04      	cmp	r3, #4
    d95e:	d005      	beq.n	d96c <__aeabi_dmul+0x474>
    d960:	0003      	movs	r3, r0
    d962:	1d18      	adds	r0, r3, #4
    d964:	4298      	cmp	r0, r3
    d966:	419b      	sbcs	r3, r3
    d968:	425b      	negs	r3, r3
    d96a:	18e4      	adds	r4, r4, r3
    d96c:	0223      	lsls	r3, r4, #8
    d96e:	d521      	bpl.n	d9b4 <__aeabi_dmul+0x4bc>
    d970:	2501      	movs	r5, #1
    d972:	9b01      	ldr	r3, [sp, #4]
    d974:	2401      	movs	r4, #1
    d976:	401d      	ands	r5, r3
    d978:	2300      	movs	r3, #0
    d97a:	2200      	movs	r2, #0
    d97c:	4699      	mov	r9, r3
    d97e:	e622      	b.n	d5c6 <__aeabi_dmul+0xce>
    d980:	251f      	movs	r5, #31
    d982:	0021      	movs	r1, r4
    d984:	426d      	negs	r5, r5
    d986:	1a28      	subs	r0, r5, r0
    d988:	40c1      	lsrs	r1, r0
    d98a:	0008      	movs	r0, r1
    d98c:	2a20      	cmp	r2, #32
    d98e:	d01d      	beq.n	d9cc <__aeabi_dmul+0x4d4>
    d990:	355f      	adds	r5, #95	; 0x5f
    d992:	1aaa      	subs	r2, r5, r2
    d994:	4094      	lsls	r4, r2
    d996:	4323      	orrs	r3, r4
    d998:	1e5c      	subs	r4, r3, #1
    d99a:	41a3      	sbcs	r3, r4
    d99c:	2507      	movs	r5, #7
    d99e:	4303      	orrs	r3, r0
    d9a0:	401d      	ands	r5, r3
    d9a2:	2200      	movs	r2, #0
    d9a4:	2d00      	cmp	r5, #0
    d9a6:	d009      	beq.n	d9bc <__aeabi_dmul+0x4c4>
    d9a8:	220f      	movs	r2, #15
    d9aa:	2400      	movs	r4, #0
    d9ac:	401a      	ands	r2, r3
    d9ae:	0018      	movs	r0, r3
    d9b0:	2a04      	cmp	r2, #4
    d9b2:	d1d6      	bne.n	d962 <__aeabi_dmul+0x46a>
    d9b4:	0003      	movs	r3, r0
    d9b6:	0765      	lsls	r5, r4, #29
    d9b8:	0264      	lsls	r4, r4, #9
    d9ba:	0b22      	lsrs	r2, r4, #12
    d9bc:	08db      	lsrs	r3, r3, #3
    d9be:	432b      	orrs	r3, r5
    d9c0:	2501      	movs	r5, #1
    d9c2:	4699      	mov	r9, r3
    d9c4:	9b01      	ldr	r3, [sp, #4]
    d9c6:	2400      	movs	r4, #0
    d9c8:	401d      	ands	r5, r3
    d9ca:	e5fc      	b.n	d5c6 <__aeabi_dmul+0xce>
    d9cc:	2400      	movs	r4, #0
    d9ce:	e7e2      	b.n	d996 <__aeabi_dmul+0x49e>
    d9d0:	2280      	movs	r2, #128	; 0x80
    d9d2:	2501      	movs	r5, #1
    d9d4:	0312      	lsls	r2, r2, #12
    d9d6:	4322      	orrs	r2, r4
    d9d8:	9901      	ldr	r1, [sp, #4]
    d9da:	0312      	lsls	r2, r2, #12
    d9dc:	0b12      	lsrs	r2, r2, #12
    d9de:	400d      	ands	r5, r1
    d9e0:	4699      	mov	r9, r3
    d9e2:	4c04      	ldr	r4, [pc, #16]	; (d9f4 <__aeabi_dmul+0x4fc>)
    d9e4:	e5ef      	b.n	d5c6 <__aeabi_dmul+0xce>
    d9e6:	46c0      	nop			; (mov r8, r8)
    d9e8:	000003ff 	.word	0x000003ff
    d9ec:	feffffff 	.word	0xfeffffff
    d9f0:	000007fe 	.word	0x000007fe
    d9f4:	000007ff 	.word	0x000007ff

0000d9f8 <__aeabi_dsub>:
    d9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9fa:	4646      	mov	r6, r8
    d9fc:	46d6      	mov	lr, sl
    d9fe:	464f      	mov	r7, r9
    da00:	030c      	lsls	r4, r1, #12
    da02:	b5c0      	push	{r6, r7, lr}
    da04:	0fcd      	lsrs	r5, r1, #31
    da06:	004e      	lsls	r6, r1, #1
    da08:	0a61      	lsrs	r1, r4, #9
    da0a:	0f44      	lsrs	r4, r0, #29
    da0c:	430c      	orrs	r4, r1
    da0e:	00c1      	lsls	r1, r0, #3
    da10:	0058      	lsls	r0, r3, #1
    da12:	0d40      	lsrs	r0, r0, #21
    da14:	4684      	mov	ip, r0
    da16:	468a      	mov	sl, r1
    da18:	000f      	movs	r7, r1
    da1a:	0319      	lsls	r1, r3, #12
    da1c:	0f50      	lsrs	r0, r2, #29
    da1e:	0a49      	lsrs	r1, r1, #9
    da20:	4301      	orrs	r1, r0
    da22:	48c6      	ldr	r0, [pc, #792]	; (dd3c <__aeabi_dsub+0x344>)
    da24:	0d76      	lsrs	r6, r6, #21
    da26:	46a8      	mov	r8, r5
    da28:	0fdb      	lsrs	r3, r3, #31
    da2a:	00d2      	lsls	r2, r2, #3
    da2c:	4584      	cmp	ip, r0
    da2e:	d100      	bne.n	da32 <__aeabi_dsub+0x3a>
    da30:	e0d8      	b.n	dbe4 <__aeabi_dsub+0x1ec>
    da32:	2001      	movs	r0, #1
    da34:	4043      	eors	r3, r0
    da36:	42ab      	cmp	r3, r5
    da38:	d100      	bne.n	da3c <__aeabi_dsub+0x44>
    da3a:	e0a6      	b.n	db8a <__aeabi_dsub+0x192>
    da3c:	4660      	mov	r0, ip
    da3e:	1a35      	subs	r5, r6, r0
    da40:	2d00      	cmp	r5, #0
    da42:	dc00      	bgt.n	da46 <__aeabi_dsub+0x4e>
    da44:	e105      	b.n	dc52 <__aeabi_dsub+0x25a>
    da46:	2800      	cmp	r0, #0
    da48:	d110      	bne.n	da6c <__aeabi_dsub+0x74>
    da4a:	000b      	movs	r3, r1
    da4c:	4313      	orrs	r3, r2
    da4e:	d100      	bne.n	da52 <__aeabi_dsub+0x5a>
    da50:	e0d7      	b.n	dc02 <__aeabi_dsub+0x20a>
    da52:	1e6b      	subs	r3, r5, #1
    da54:	2b00      	cmp	r3, #0
    da56:	d000      	beq.n	da5a <__aeabi_dsub+0x62>
    da58:	e14b      	b.n	dcf2 <__aeabi_dsub+0x2fa>
    da5a:	4653      	mov	r3, sl
    da5c:	1a9f      	subs	r7, r3, r2
    da5e:	45ba      	cmp	sl, r7
    da60:	4180      	sbcs	r0, r0
    da62:	1a64      	subs	r4, r4, r1
    da64:	4240      	negs	r0, r0
    da66:	1a24      	subs	r4, r4, r0
    da68:	2601      	movs	r6, #1
    da6a:	e01e      	b.n	daaa <__aeabi_dsub+0xb2>
    da6c:	4bb3      	ldr	r3, [pc, #716]	; (dd3c <__aeabi_dsub+0x344>)
    da6e:	429e      	cmp	r6, r3
    da70:	d048      	beq.n	db04 <__aeabi_dsub+0x10c>
    da72:	2380      	movs	r3, #128	; 0x80
    da74:	041b      	lsls	r3, r3, #16
    da76:	4319      	orrs	r1, r3
    da78:	2d38      	cmp	r5, #56	; 0x38
    da7a:	dd00      	ble.n	da7e <__aeabi_dsub+0x86>
    da7c:	e119      	b.n	dcb2 <__aeabi_dsub+0x2ba>
    da7e:	2d1f      	cmp	r5, #31
    da80:	dd00      	ble.n	da84 <__aeabi_dsub+0x8c>
    da82:	e14c      	b.n	dd1e <__aeabi_dsub+0x326>
    da84:	2320      	movs	r3, #32
    da86:	000f      	movs	r7, r1
    da88:	1b5b      	subs	r3, r3, r5
    da8a:	0010      	movs	r0, r2
    da8c:	409a      	lsls	r2, r3
    da8e:	409f      	lsls	r7, r3
    da90:	40e8      	lsrs	r0, r5
    da92:	1e53      	subs	r3, r2, #1
    da94:	419a      	sbcs	r2, r3
    da96:	40e9      	lsrs	r1, r5
    da98:	4307      	orrs	r7, r0
    da9a:	4317      	orrs	r7, r2
    da9c:	4653      	mov	r3, sl
    da9e:	1bdf      	subs	r7, r3, r7
    daa0:	1a61      	subs	r1, r4, r1
    daa2:	45ba      	cmp	sl, r7
    daa4:	41a4      	sbcs	r4, r4
    daa6:	4264      	negs	r4, r4
    daa8:	1b0c      	subs	r4, r1, r4
    daaa:	0223      	lsls	r3, r4, #8
    daac:	d400      	bmi.n	dab0 <__aeabi_dsub+0xb8>
    daae:	e0c5      	b.n	dc3c <__aeabi_dsub+0x244>
    dab0:	0264      	lsls	r4, r4, #9
    dab2:	0a65      	lsrs	r5, r4, #9
    dab4:	2d00      	cmp	r5, #0
    dab6:	d100      	bne.n	daba <__aeabi_dsub+0xc2>
    dab8:	e0f6      	b.n	dca8 <__aeabi_dsub+0x2b0>
    daba:	0028      	movs	r0, r5
    dabc:	f000 fc5c 	bl	e378 <__clzsi2>
    dac0:	0003      	movs	r3, r0
    dac2:	3b08      	subs	r3, #8
    dac4:	2b1f      	cmp	r3, #31
    dac6:	dd00      	ble.n	daca <__aeabi_dsub+0xd2>
    dac8:	e0e9      	b.n	dc9e <__aeabi_dsub+0x2a6>
    daca:	2220      	movs	r2, #32
    dacc:	003c      	movs	r4, r7
    dace:	1ad2      	subs	r2, r2, r3
    dad0:	409d      	lsls	r5, r3
    dad2:	40d4      	lsrs	r4, r2
    dad4:	409f      	lsls	r7, r3
    dad6:	4325      	orrs	r5, r4
    dad8:	429e      	cmp	r6, r3
    dada:	dd00      	ble.n	dade <__aeabi_dsub+0xe6>
    dadc:	e0db      	b.n	dc96 <__aeabi_dsub+0x29e>
    dade:	1b9e      	subs	r6, r3, r6
    dae0:	1c73      	adds	r3, r6, #1
    dae2:	2b1f      	cmp	r3, #31
    dae4:	dd00      	ble.n	dae8 <__aeabi_dsub+0xf0>
    dae6:	e10a      	b.n	dcfe <__aeabi_dsub+0x306>
    dae8:	2220      	movs	r2, #32
    daea:	0038      	movs	r0, r7
    daec:	1ad2      	subs	r2, r2, r3
    daee:	0029      	movs	r1, r5
    daf0:	4097      	lsls	r7, r2
    daf2:	002c      	movs	r4, r5
    daf4:	4091      	lsls	r1, r2
    daf6:	40d8      	lsrs	r0, r3
    daf8:	1e7a      	subs	r2, r7, #1
    dafa:	4197      	sbcs	r7, r2
    dafc:	40dc      	lsrs	r4, r3
    dafe:	2600      	movs	r6, #0
    db00:	4301      	orrs	r1, r0
    db02:	430f      	orrs	r7, r1
    db04:	077b      	lsls	r3, r7, #29
    db06:	d009      	beq.n	db1c <__aeabi_dsub+0x124>
    db08:	230f      	movs	r3, #15
    db0a:	403b      	ands	r3, r7
    db0c:	2b04      	cmp	r3, #4
    db0e:	d005      	beq.n	db1c <__aeabi_dsub+0x124>
    db10:	1d3b      	adds	r3, r7, #4
    db12:	42bb      	cmp	r3, r7
    db14:	41bf      	sbcs	r7, r7
    db16:	427f      	negs	r7, r7
    db18:	19e4      	adds	r4, r4, r7
    db1a:	001f      	movs	r7, r3
    db1c:	0223      	lsls	r3, r4, #8
    db1e:	d525      	bpl.n	db6c <__aeabi_dsub+0x174>
    db20:	4b86      	ldr	r3, [pc, #536]	; (dd3c <__aeabi_dsub+0x344>)
    db22:	3601      	adds	r6, #1
    db24:	429e      	cmp	r6, r3
    db26:	d100      	bne.n	db2a <__aeabi_dsub+0x132>
    db28:	e0af      	b.n	dc8a <__aeabi_dsub+0x292>
    db2a:	4b85      	ldr	r3, [pc, #532]	; (dd40 <__aeabi_dsub+0x348>)
    db2c:	2501      	movs	r5, #1
    db2e:	401c      	ands	r4, r3
    db30:	4643      	mov	r3, r8
    db32:	0762      	lsls	r2, r4, #29
    db34:	08ff      	lsrs	r7, r7, #3
    db36:	0264      	lsls	r4, r4, #9
    db38:	0576      	lsls	r6, r6, #21
    db3a:	4317      	orrs	r7, r2
    db3c:	0b24      	lsrs	r4, r4, #12
    db3e:	0d76      	lsrs	r6, r6, #21
    db40:	401d      	ands	r5, r3
    db42:	2100      	movs	r1, #0
    db44:	0324      	lsls	r4, r4, #12
    db46:	0b23      	lsrs	r3, r4, #12
    db48:	0d0c      	lsrs	r4, r1, #20
    db4a:	4a7e      	ldr	r2, [pc, #504]	; (dd44 <__aeabi_dsub+0x34c>)
    db4c:	0524      	lsls	r4, r4, #20
    db4e:	431c      	orrs	r4, r3
    db50:	4014      	ands	r4, r2
    db52:	0533      	lsls	r3, r6, #20
    db54:	4323      	orrs	r3, r4
    db56:	005b      	lsls	r3, r3, #1
    db58:	07ed      	lsls	r5, r5, #31
    db5a:	085b      	lsrs	r3, r3, #1
    db5c:	432b      	orrs	r3, r5
    db5e:	0038      	movs	r0, r7
    db60:	0019      	movs	r1, r3
    db62:	bc1c      	pop	{r2, r3, r4}
    db64:	4690      	mov	r8, r2
    db66:	4699      	mov	r9, r3
    db68:	46a2      	mov	sl, r4
    db6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db6c:	2501      	movs	r5, #1
    db6e:	4643      	mov	r3, r8
    db70:	0762      	lsls	r2, r4, #29
    db72:	08ff      	lsrs	r7, r7, #3
    db74:	4317      	orrs	r7, r2
    db76:	08e4      	lsrs	r4, r4, #3
    db78:	401d      	ands	r5, r3
    db7a:	4b70      	ldr	r3, [pc, #448]	; (dd3c <__aeabi_dsub+0x344>)
    db7c:	429e      	cmp	r6, r3
    db7e:	d036      	beq.n	dbee <__aeabi_dsub+0x1f6>
    db80:	0324      	lsls	r4, r4, #12
    db82:	0576      	lsls	r6, r6, #21
    db84:	0b24      	lsrs	r4, r4, #12
    db86:	0d76      	lsrs	r6, r6, #21
    db88:	e7db      	b.n	db42 <__aeabi_dsub+0x14a>
    db8a:	4663      	mov	r3, ip
    db8c:	1af3      	subs	r3, r6, r3
    db8e:	2b00      	cmp	r3, #0
    db90:	dc00      	bgt.n	db94 <__aeabi_dsub+0x19c>
    db92:	e094      	b.n	dcbe <__aeabi_dsub+0x2c6>
    db94:	4660      	mov	r0, ip
    db96:	2800      	cmp	r0, #0
    db98:	d035      	beq.n	dc06 <__aeabi_dsub+0x20e>
    db9a:	4868      	ldr	r0, [pc, #416]	; (dd3c <__aeabi_dsub+0x344>)
    db9c:	4286      	cmp	r6, r0
    db9e:	d0b1      	beq.n	db04 <__aeabi_dsub+0x10c>
    dba0:	2780      	movs	r7, #128	; 0x80
    dba2:	043f      	lsls	r7, r7, #16
    dba4:	4339      	orrs	r1, r7
    dba6:	2b38      	cmp	r3, #56	; 0x38
    dba8:	dc00      	bgt.n	dbac <__aeabi_dsub+0x1b4>
    dbaa:	e0fd      	b.n	dda8 <__aeabi_dsub+0x3b0>
    dbac:	430a      	orrs	r2, r1
    dbae:	0017      	movs	r7, r2
    dbb0:	2100      	movs	r1, #0
    dbb2:	1e7a      	subs	r2, r7, #1
    dbb4:	4197      	sbcs	r7, r2
    dbb6:	4457      	add	r7, sl
    dbb8:	4557      	cmp	r7, sl
    dbba:	4180      	sbcs	r0, r0
    dbbc:	1909      	adds	r1, r1, r4
    dbbe:	4244      	negs	r4, r0
    dbc0:	190c      	adds	r4, r1, r4
    dbc2:	0223      	lsls	r3, r4, #8
    dbc4:	d53a      	bpl.n	dc3c <__aeabi_dsub+0x244>
    dbc6:	4b5d      	ldr	r3, [pc, #372]	; (dd3c <__aeabi_dsub+0x344>)
    dbc8:	3601      	adds	r6, #1
    dbca:	429e      	cmp	r6, r3
    dbcc:	d100      	bne.n	dbd0 <__aeabi_dsub+0x1d8>
    dbce:	e14b      	b.n	de68 <__aeabi_dsub+0x470>
    dbd0:	2201      	movs	r2, #1
    dbd2:	4b5b      	ldr	r3, [pc, #364]	; (dd40 <__aeabi_dsub+0x348>)
    dbd4:	401c      	ands	r4, r3
    dbd6:	087b      	lsrs	r3, r7, #1
    dbd8:	4017      	ands	r7, r2
    dbda:	431f      	orrs	r7, r3
    dbdc:	07e2      	lsls	r2, r4, #31
    dbde:	4317      	orrs	r7, r2
    dbe0:	0864      	lsrs	r4, r4, #1
    dbe2:	e78f      	b.n	db04 <__aeabi_dsub+0x10c>
    dbe4:	0008      	movs	r0, r1
    dbe6:	4310      	orrs	r0, r2
    dbe8:	d000      	beq.n	dbec <__aeabi_dsub+0x1f4>
    dbea:	e724      	b.n	da36 <__aeabi_dsub+0x3e>
    dbec:	e721      	b.n	da32 <__aeabi_dsub+0x3a>
    dbee:	0023      	movs	r3, r4
    dbf0:	433b      	orrs	r3, r7
    dbf2:	d100      	bne.n	dbf6 <__aeabi_dsub+0x1fe>
    dbf4:	e1b9      	b.n	df6a <__aeabi_dsub+0x572>
    dbf6:	2280      	movs	r2, #128	; 0x80
    dbf8:	0312      	lsls	r2, r2, #12
    dbfa:	4314      	orrs	r4, r2
    dbfc:	0324      	lsls	r4, r4, #12
    dbfe:	0b24      	lsrs	r4, r4, #12
    dc00:	e79f      	b.n	db42 <__aeabi_dsub+0x14a>
    dc02:	002e      	movs	r6, r5
    dc04:	e77e      	b.n	db04 <__aeabi_dsub+0x10c>
    dc06:	0008      	movs	r0, r1
    dc08:	4310      	orrs	r0, r2
    dc0a:	d100      	bne.n	dc0e <__aeabi_dsub+0x216>
    dc0c:	e0ca      	b.n	dda4 <__aeabi_dsub+0x3ac>
    dc0e:	1e58      	subs	r0, r3, #1
    dc10:	4684      	mov	ip, r0
    dc12:	2800      	cmp	r0, #0
    dc14:	d000      	beq.n	dc18 <__aeabi_dsub+0x220>
    dc16:	e0e7      	b.n	dde8 <__aeabi_dsub+0x3f0>
    dc18:	4452      	add	r2, sl
    dc1a:	4552      	cmp	r2, sl
    dc1c:	4180      	sbcs	r0, r0
    dc1e:	1864      	adds	r4, r4, r1
    dc20:	4240      	negs	r0, r0
    dc22:	1824      	adds	r4, r4, r0
    dc24:	0017      	movs	r7, r2
    dc26:	2601      	movs	r6, #1
    dc28:	0223      	lsls	r3, r4, #8
    dc2a:	d507      	bpl.n	dc3c <__aeabi_dsub+0x244>
    dc2c:	2602      	movs	r6, #2
    dc2e:	e7cf      	b.n	dbd0 <__aeabi_dsub+0x1d8>
    dc30:	4664      	mov	r4, ip
    dc32:	432c      	orrs	r4, r5
    dc34:	d100      	bne.n	dc38 <__aeabi_dsub+0x240>
    dc36:	e1b3      	b.n	dfa0 <__aeabi_dsub+0x5a8>
    dc38:	002c      	movs	r4, r5
    dc3a:	4667      	mov	r7, ip
    dc3c:	077b      	lsls	r3, r7, #29
    dc3e:	d000      	beq.n	dc42 <__aeabi_dsub+0x24a>
    dc40:	e762      	b.n	db08 <__aeabi_dsub+0x110>
    dc42:	0763      	lsls	r3, r4, #29
    dc44:	08ff      	lsrs	r7, r7, #3
    dc46:	431f      	orrs	r7, r3
    dc48:	2501      	movs	r5, #1
    dc4a:	4643      	mov	r3, r8
    dc4c:	08e4      	lsrs	r4, r4, #3
    dc4e:	401d      	ands	r5, r3
    dc50:	e793      	b.n	db7a <__aeabi_dsub+0x182>
    dc52:	2d00      	cmp	r5, #0
    dc54:	d178      	bne.n	dd48 <__aeabi_dsub+0x350>
    dc56:	1c75      	adds	r5, r6, #1
    dc58:	056d      	lsls	r5, r5, #21
    dc5a:	0d6d      	lsrs	r5, r5, #21
    dc5c:	2d01      	cmp	r5, #1
    dc5e:	dc00      	bgt.n	dc62 <__aeabi_dsub+0x26a>
    dc60:	e0f2      	b.n	de48 <__aeabi_dsub+0x450>
    dc62:	4650      	mov	r0, sl
    dc64:	1a80      	subs	r0, r0, r2
    dc66:	4582      	cmp	sl, r0
    dc68:	41bf      	sbcs	r7, r7
    dc6a:	1a65      	subs	r5, r4, r1
    dc6c:	427f      	negs	r7, r7
    dc6e:	1bed      	subs	r5, r5, r7
    dc70:	4684      	mov	ip, r0
    dc72:	0228      	lsls	r0, r5, #8
    dc74:	d400      	bmi.n	dc78 <__aeabi_dsub+0x280>
    dc76:	e08c      	b.n	dd92 <__aeabi_dsub+0x39a>
    dc78:	4650      	mov	r0, sl
    dc7a:	1a17      	subs	r7, r2, r0
    dc7c:	42ba      	cmp	r2, r7
    dc7e:	4192      	sbcs	r2, r2
    dc80:	1b0c      	subs	r4, r1, r4
    dc82:	4255      	negs	r5, r2
    dc84:	1b65      	subs	r5, r4, r5
    dc86:	4698      	mov	r8, r3
    dc88:	e714      	b.n	dab4 <__aeabi_dsub+0xbc>
    dc8a:	2501      	movs	r5, #1
    dc8c:	4643      	mov	r3, r8
    dc8e:	2400      	movs	r4, #0
    dc90:	401d      	ands	r5, r3
    dc92:	2700      	movs	r7, #0
    dc94:	e755      	b.n	db42 <__aeabi_dsub+0x14a>
    dc96:	4c2a      	ldr	r4, [pc, #168]	; (dd40 <__aeabi_dsub+0x348>)
    dc98:	1af6      	subs	r6, r6, r3
    dc9a:	402c      	ands	r4, r5
    dc9c:	e732      	b.n	db04 <__aeabi_dsub+0x10c>
    dc9e:	003d      	movs	r5, r7
    dca0:	3828      	subs	r0, #40	; 0x28
    dca2:	4085      	lsls	r5, r0
    dca4:	2700      	movs	r7, #0
    dca6:	e717      	b.n	dad8 <__aeabi_dsub+0xe0>
    dca8:	0038      	movs	r0, r7
    dcaa:	f000 fb65 	bl	e378 <__clzsi2>
    dcae:	3020      	adds	r0, #32
    dcb0:	e706      	b.n	dac0 <__aeabi_dsub+0xc8>
    dcb2:	430a      	orrs	r2, r1
    dcb4:	0017      	movs	r7, r2
    dcb6:	2100      	movs	r1, #0
    dcb8:	1e7a      	subs	r2, r7, #1
    dcba:	4197      	sbcs	r7, r2
    dcbc:	e6ee      	b.n	da9c <__aeabi_dsub+0xa4>
    dcbe:	2b00      	cmp	r3, #0
    dcc0:	d000      	beq.n	dcc4 <__aeabi_dsub+0x2cc>
    dcc2:	e0e5      	b.n	de90 <__aeabi_dsub+0x498>
    dcc4:	1c73      	adds	r3, r6, #1
    dcc6:	469c      	mov	ip, r3
    dcc8:	055b      	lsls	r3, r3, #21
    dcca:	0d5b      	lsrs	r3, r3, #21
    dccc:	2b01      	cmp	r3, #1
    dcce:	dc00      	bgt.n	dcd2 <__aeabi_dsub+0x2da>
    dcd0:	e09f      	b.n	de12 <__aeabi_dsub+0x41a>
    dcd2:	4b1a      	ldr	r3, [pc, #104]	; (dd3c <__aeabi_dsub+0x344>)
    dcd4:	459c      	cmp	ip, r3
    dcd6:	d100      	bne.n	dcda <__aeabi_dsub+0x2e2>
    dcd8:	e0c5      	b.n	de66 <__aeabi_dsub+0x46e>
    dcda:	4452      	add	r2, sl
    dcdc:	4552      	cmp	r2, sl
    dcde:	4180      	sbcs	r0, r0
    dce0:	1864      	adds	r4, r4, r1
    dce2:	4240      	negs	r0, r0
    dce4:	1824      	adds	r4, r4, r0
    dce6:	07e7      	lsls	r7, r4, #31
    dce8:	0852      	lsrs	r2, r2, #1
    dcea:	4317      	orrs	r7, r2
    dcec:	0864      	lsrs	r4, r4, #1
    dcee:	4666      	mov	r6, ip
    dcf0:	e708      	b.n	db04 <__aeabi_dsub+0x10c>
    dcf2:	4812      	ldr	r0, [pc, #72]	; (dd3c <__aeabi_dsub+0x344>)
    dcf4:	4285      	cmp	r5, r0
    dcf6:	d100      	bne.n	dcfa <__aeabi_dsub+0x302>
    dcf8:	e085      	b.n	de06 <__aeabi_dsub+0x40e>
    dcfa:	001d      	movs	r5, r3
    dcfc:	e6bc      	b.n	da78 <__aeabi_dsub+0x80>
    dcfe:	0029      	movs	r1, r5
    dd00:	3e1f      	subs	r6, #31
    dd02:	40f1      	lsrs	r1, r6
    dd04:	2b20      	cmp	r3, #32
    dd06:	d100      	bne.n	dd0a <__aeabi_dsub+0x312>
    dd08:	e07f      	b.n	de0a <__aeabi_dsub+0x412>
    dd0a:	2240      	movs	r2, #64	; 0x40
    dd0c:	1ad3      	subs	r3, r2, r3
    dd0e:	409d      	lsls	r5, r3
    dd10:	432f      	orrs	r7, r5
    dd12:	1e7d      	subs	r5, r7, #1
    dd14:	41af      	sbcs	r7, r5
    dd16:	2400      	movs	r4, #0
    dd18:	430f      	orrs	r7, r1
    dd1a:	2600      	movs	r6, #0
    dd1c:	e78e      	b.n	dc3c <__aeabi_dsub+0x244>
    dd1e:	002b      	movs	r3, r5
    dd20:	000f      	movs	r7, r1
    dd22:	3b20      	subs	r3, #32
    dd24:	40df      	lsrs	r7, r3
    dd26:	2d20      	cmp	r5, #32
    dd28:	d071      	beq.n	de0e <__aeabi_dsub+0x416>
    dd2a:	2340      	movs	r3, #64	; 0x40
    dd2c:	1b5d      	subs	r5, r3, r5
    dd2e:	40a9      	lsls	r1, r5
    dd30:	430a      	orrs	r2, r1
    dd32:	1e51      	subs	r1, r2, #1
    dd34:	418a      	sbcs	r2, r1
    dd36:	2100      	movs	r1, #0
    dd38:	4317      	orrs	r7, r2
    dd3a:	e6af      	b.n	da9c <__aeabi_dsub+0xa4>
    dd3c:	000007ff 	.word	0x000007ff
    dd40:	ff7fffff 	.word	0xff7fffff
    dd44:	800fffff 	.word	0x800fffff
    dd48:	2e00      	cmp	r6, #0
    dd4a:	d03e      	beq.n	ddca <__aeabi_dsub+0x3d2>
    dd4c:	4eb3      	ldr	r6, [pc, #716]	; (e01c <__aeabi_dsub+0x624>)
    dd4e:	45b4      	cmp	ip, r6
    dd50:	d045      	beq.n	ddde <__aeabi_dsub+0x3e6>
    dd52:	2680      	movs	r6, #128	; 0x80
    dd54:	0436      	lsls	r6, r6, #16
    dd56:	426d      	negs	r5, r5
    dd58:	4334      	orrs	r4, r6
    dd5a:	2d38      	cmp	r5, #56	; 0x38
    dd5c:	dd00      	ble.n	dd60 <__aeabi_dsub+0x368>
    dd5e:	e0a8      	b.n	deb2 <__aeabi_dsub+0x4ba>
    dd60:	2d1f      	cmp	r5, #31
    dd62:	dd00      	ble.n	dd66 <__aeabi_dsub+0x36e>
    dd64:	e11f      	b.n	dfa6 <__aeabi_dsub+0x5ae>
    dd66:	2620      	movs	r6, #32
    dd68:	0027      	movs	r7, r4
    dd6a:	4650      	mov	r0, sl
    dd6c:	1b76      	subs	r6, r6, r5
    dd6e:	40b7      	lsls	r7, r6
    dd70:	40e8      	lsrs	r0, r5
    dd72:	4307      	orrs	r7, r0
    dd74:	4650      	mov	r0, sl
    dd76:	40b0      	lsls	r0, r6
    dd78:	1e46      	subs	r6, r0, #1
    dd7a:	41b0      	sbcs	r0, r6
    dd7c:	40ec      	lsrs	r4, r5
    dd7e:	4338      	orrs	r0, r7
    dd80:	1a17      	subs	r7, r2, r0
    dd82:	42ba      	cmp	r2, r7
    dd84:	4192      	sbcs	r2, r2
    dd86:	1b0c      	subs	r4, r1, r4
    dd88:	4252      	negs	r2, r2
    dd8a:	1aa4      	subs	r4, r4, r2
    dd8c:	4666      	mov	r6, ip
    dd8e:	4698      	mov	r8, r3
    dd90:	e68b      	b.n	daaa <__aeabi_dsub+0xb2>
    dd92:	4664      	mov	r4, ip
    dd94:	4667      	mov	r7, ip
    dd96:	432c      	orrs	r4, r5
    dd98:	d000      	beq.n	dd9c <__aeabi_dsub+0x3a4>
    dd9a:	e68b      	b.n	dab4 <__aeabi_dsub+0xbc>
    dd9c:	2500      	movs	r5, #0
    dd9e:	2600      	movs	r6, #0
    dda0:	2700      	movs	r7, #0
    dda2:	e6ea      	b.n	db7a <__aeabi_dsub+0x182>
    dda4:	001e      	movs	r6, r3
    dda6:	e6ad      	b.n	db04 <__aeabi_dsub+0x10c>
    dda8:	2b1f      	cmp	r3, #31
    ddaa:	dc60      	bgt.n	de6e <__aeabi_dsub+0x476>
    ddac:	2720      	movs	r7, #32
    ddae:	1af8      	subs	r0, r7, r3
    ddb0:	000f      	movs	r7, r1
    ddb2:	4684      	mov	ip, r0
    ddb4:	4087      	lsls	r7, r0
    ddb6:	0010      	movs	r0, r2
    ddb8:	40d8      	lsrs	r0, r3
    ddba:	4307      	orrs	r7, r0
    ddbc:	4660      	mov	r0, ip
    ddbe:	4082      	lsls	r2, r0
    ddc0:	1e50      	subs	r0, r2, #1
    ddc2:	4182      	sbcs	r2, r0
    ddc4:	40d9      	lsrs	r1, r3
    ddc6:	4317      	orrs	r7, r2
    ddc8:	e6f5      	b.n	dbb6 <__aeabi_dsub+0x1be>
    ddca:	0026      	movs	r6, r4
    ddcc:	4650      	mov	r0, sl
    ddce:	4306      	orrs	r6, r0
    ddd0:	d005      	beq.n	ddde <__aeabi_dsub+0x3e6>
    ddd2:	43ed      	mvns	r5, r5
    ddd4:	2d00      	cmp	r5, #0
    ddd6:	d0d3      	beq.n	dd80 <__aeabi_dsub+0x388>
    ddd8:	4e90      	ldr	r6, [pc, #576]	; (e01c <__aeabi_dsub+0x624>)
    ddda:	45b4      	cmp	ip, r6
    dddc:	d1bd      	bne.n	dd5a <__aeabi_dsub+0x362>
    ddde:	000c      	movs	r4, r1
    dde0:	0017      	movs	r7, r2
    dde2:	4666      	mov	r6, ip
    dde4:	4698      	mov	r8, r3
    dde6:	e68d      	b.n	db04 <__aeabi_dsub+0x10c>
    dde8:	488c      	ldr	r0, [pc, #560]	; (e01c <__aeabi_dsub+0x624>)
    ddea:	4283      	cmp	r3, r0
    ddec:	d00b      	beq.n	de06 <__aeabi_dsub+0x40e>
    ddee:	4663      	mov	r3, ip
    ddf0:	e6d9      	b.n	dba6 <__aeabi_dsub+0x1ae>
    ddf2:	2d00      	cmp	r5, #0
    ddf4:	d000      	beq.n	ddf8 <__aeabi_dsub+0x400>
    ddf6:	e096      	b.n	df26 <__aeabi_dsub+0x52e>
    ddf8:	0008      	movs	r0, r1
    ddfa:	4310      	orrs	r0, r2
    ddfc:	d100      	bne.n	de00 <__aeabi_dsub+0x408>
    ddfe:	e0e2      	b.n	dfc6 <__aeabi_dsub+0x5ce>
    de00:	000c      	movs	r4, r1
    de02:	0017      	movs	r7, r2
    de04:	4698      	mov	r8, r3
    de06:	4e85      	ldr	r6, [pc, #532]	; (e01c <__aeabi_dsub+0x624>)
    de08:	e67c      	b.n	db04 <__aeabi_dsub+0x10c>
    de0a:	2500      	movs	r5, #0
    de0c:	e780      	b.n	dd10 <__aeabi_dsub+0x318>
    de0e:	2100      	movs	r1, #0
    de10:	e78e      	b.n	dd30 <__aeabi_dsub+0x338>
    de12:	0023      	movs	r3, r4
    de14:	4650      	mov	r0, sl
    de16:	4303      	orrs	r3, r0
    de18:	2e00      	cmp	r6, #0
    de1a:	d000      	beq.n	de1e <__aeabi_dsub+0x426>
    de1c:	e0a8      	b.n	df70 <__aeabi_dsub+0x578>
    de1e:	2b00      	cmp	r3, #0
    de20:	d100      	bne.n	de24 <__aeabi_dsub+0x42c>
    de22:	e0de      	b.n	dfe2 <__aeabi_dsub+0x5ea>
    de24:	000b      	movs	r3, r1
    de26:	4313      	orrs	r3, r2
    de28:	d100      	bne.n	de2c <__aeabi_dsub+0x434>
    de2a:	e66b      	b.n	db04 <__aeabi_dsub+0x10c>
    de2c:	4452      	add	r2, sl
    de2e:	4552      	cmp	r2, sl
    de30:	4180      	sbcs	r0, r0
    de32:	1864      	adds	r4, r4, r1
    de34:	4240      	negs	r0, r0
    de36:	1824      	adds	r4, r4, r0
    de38:	0017      	movs	r7, r2
    de3a:	0223      	lsls	r3, r4, #8
    de3c:	d400      	bmi.n	de40 <__aeabi_dsub+0x448>
    de3e:	e6fd      	b.n	dc3c <__aeabi_dsub+0x244>
    de40:	4b77      	ldr	r3, [pc, #476]	; (e020 <__aeabi_dsub+0x628>)
    de42:	4666      	mov	r6, ip
    de44:	401c      	ands	r4, r3
    de46:	e65d      	b.n	db04 <__aeabi_dsub+0x10c>
    de48:	0025      	movs	r5, r4
    de4a:	4650      	mov	r0, sl
    de4c:	4305      	orrs	r5, r0
    de4e:	2e00      	cmp	r6, #0
    de50:	d1cf      	bne.n	ddf2 <__aeabi_dsub+0x3fa>
    de52:	2d00      	cmp	r5, #0
    de54:	d14f      	bne.n	def6 <__aeabi_dsub+0x4fe>
    de56:	000c      	movs	r4, r1
    de58:	4314      	orrs	r4, r2
    de5a:	d100      	bne.n	de5e <__aeabi_dsub+0x466>
    de5c:	e0a0      	b.n	dfa0 <__aeabi_dsub+0x5a8>
    de5e:	000c      	movs	r4, r1
    de60:	0017      	movs	r7, r2
    de62:	4698      	mov	r8, r3
    de64:	e64e      	b.n	db04 <__aeabi_dsub+0x10c>
    de66:	4666      	mov	r6, ip
    de68:	2400      	movs	r4, #0
    de6a:	2700      	movs	r7, #0
    de6c:	e685      	b.n	db7a <__aeabi_dsub+0x182>
    de6e:	001f      	movs	r7, r3
    de70:	0008      	movs	r0, r1
    de72:	3f20      	subs	r7, #32
    de74:	40f8      	lsrs	r0, r7
    de76:	0007      	movs	r7, r0
    de78:	2b20      	cmp	r3, #32
    de7a:	d100      	bne.n	de7e <__aeabi_dsub+0x486>
    de7c:	e08e      	b.n	df9c <__aeabi_dsub+0x5a4>
    de7e:	2040      	movs	r0, #64	; 0x40
    de80:	1ac3      	subs	r3, r0, r3
    de82:	4099      	lsls	r1, r3
    de84:	430a      	orrs	r2, r1
    de86:	1e51      	subs	r1, r2, #1
    de88:	418a      	sbcs	r2, r1
    de8a:	2100      	movs	r1, #0
    de8c:	4317      	orrs	r7, r2
    de8e:	e692      	b.n	dbb6 <__aeabi_dsub+0x1be>
    de90:	2e00      	cmp	r6, #0
    de92:	d114      	bne.n	debe <__aeabi_dsub+0x4c6>
    de94:	0026      	movs	r6, r4
    de96:	4650      	mov	r0, sl
    de98:	4306      	orrs	r6, r0
    de9a:	d062      	beq.n	df62 <__aeabi_dsub+0x56a>
    de9c:	43db      	mvns	r3, r3
    de9e:	2b00      	cmp	r3, #0
    dea0:	d15c      	bne.n	df5c <__aeabi_dsub+0x564>
    dea2:	1887      	adds	r7, r0, r2
    dea4:	4297      	cmp	r7, r2
    dea6:	4192      	sbcs	r2, r2
    dea8:	1864      	adds	r4, r4, r1
    deaa:	4252      	negs	r2, r2
    deac:	18a4      	adds	r4, r4, r2
    deae:	4666      	mov	r6, ip
    deb0:	e687      	b.n	dbc2 <__aeabi_dsub+0x1ca>
    deb2:	4650      	mov	r0, sl
    deb4:	4320      	orrs	r0, r4
    deb6:	1e44      	subs	r4, r0, #1
    deb8:	41a0      	sbcs	r0, r4
    deba:	2400      	movs	r4, #0
    debc:	e760      	b.n	dd80 <__aeabi_dsub+0x388>
    debe:	4e57      	ldr	r6, [pc, #348]	; (e01c <__aeabi_dsub+0x624>)
    dec0:	45b4      	cmp	ip, r6
    dec2:	d04e      	beq.n	df62 <__aeabi_dsub+0x56a>
    dec4:	2680      	movs	r6, #128	; 0x80
    dec6:	0436      	lsls	r6, r6, #16
    dec8:	425b      	negs	r3, r3
    deca:	4334      	orrs	r4, r6
    decc:	2b38      	cmp	r3, #56	; 0x38
    dece:	dd00      	ble.n	ded2 <__aeabi_dsub+0x4da>
    ded0:	e07f      	b.n	dfd2 <__aeabi_dsub+0x5da>
    ded2:	2b1f      	cmp	r3, #31
    ded4:	dd00      	ble.n	ded8 <__aeabi_dsub+0x4e0>
    ded6:	e08b      	b.n	dff0 <__aeabi_dsub+0x5f8>
    ded8:	2620      	movs	r6, #32
    deda:	0027      	movs	r7, r4
    dedc:	4650      	mov	r0, sl
    dede:	1af6      	subs	r6, r6, r3
    dee0:	40b7      	lsls	r7, r6
    dee2:	40d8      	lsrs	r0, r3
    dee4:	4307      	orrs	r7, r0
    dee6:	4650      	mov	r0, sl
    dee8:	40b0      	lsls	r0, r6
    deea:	1e46      	subs	r6, r0, #1
    deec:	41b0      	sbcs	r0, r6
    deee:	4307      	orrs	r7, r0
    def0:	40dc      	lsrs	r4, r3
    def2:	18bf      	adds	r7, r7, r2
    def4:	e7d6      	b.n	dea4 <__aeabi_dsub+0x4ac>
    def6:	000d      	movs	r5, r1
    def8:	4315      	orrs	r5, r2
    defa:	d100      	bne.n	defe <__aeabi_dsub+0x506>
    defc:	e602      	b.n	db04 <__aeabi_dsub+0x10c>
    defe:	4650      	mov	r0, sl
    df00:	1a80      	subs	r0, r0, r2
    df02:	4582      	cmp	sl, r0
    df04:	41bf      	sbcs	r7, r7
    df06:	1a65      	subs	r5, r4, r1
    df08:	427f      	negs	r7, r7
    df0a:	1bed      	subs	r5, r5, r7
    df0c:	4684      	mov	ip, r0
    df0e:	0228      	lsls	r0, r5, #8
    df10:	d400      	bmi.n	df14 <__aeabi_dsub+0x51c>
    df12:	e68d      	b.n	dc30 <__aeabi_dsub+0x238>
    df14:	4650      	mov	r0, sl
    df16:	1a17      	subs	r7, r2, r0
    df18:	42ba      	cmp	r2, r7
    df1a:	4192      	sbcs	r2, r2
    df1c:	1b0c      	subs	r4, r1, r4
    df1e:	4252      	negs	r2, r2
    df20:	1aa4      	subs	r4, r4, r2
    df22:	4698      	mov	r8, r3
    df24:	e5ee      	b.n	db04 <__aeabi_dsub+0x10c>
    df26:	000d      	movs	r5, r1
    df28:	4315      	orrs	r5, r2
    df2a:	d100      	bne.n	df2e <__aeabi_dsub+0x536>
    df2c:	e76b      	b.n	de06 <__aeabi_dsub+0x40e>
    df2e:	4650      	mov	r0, sl
    df30:	0767      	lsls	r7, r4, #29
    df32:	08c0      	lsrs	r0, r0, #3
    df34:	4307      	orrs	r7, r0
    df36:	2080      	movs	r0, #128	; 0x80
    df38:	08e4      	lsrs	r4, r4, #3
    df3a:	0300      	lsls	r0, r0, #12
    df3c:	4204      	tst	r4, r0
    df3e:	d007      	beq.n	df50 <__aeabi_dsub+0x558>
    df40:	08cd      	lsrs	r5, r1, #3
    df42:	4205      	tst	r5, r0
    df44:	d104      	bne.n	df50 <__aeabi_dsub+0x558>
    df46:	002c      	movs	r4, r5
    df48:	4698      	mov	r8, r3
    df4a:	08d7      	lsrs	r7, r2, #3
    df4c:	0749      	lsls	r1, r1, #29
    df4e:	430f      	orrs	r7, r1
    df50:	0f7b      	lsrs	r3, r7, #29
    df52:	00e4      	lsls	r4, r4, #3
    df54:	431c      	orrs	r4, r3
    df56:	00ff      	lsls	r7, r7, #3
    df58:	4e30      	ldr	r6, [pc, #192]	; (e01c <__aeabi_dsub+0x624>)
    df5a:	e5d3      	b.n	db04 <__aeabi_dsub+0x10c>
    df5c:	4e2f      	ldr	r6, [pc, #188]	; (e01c <__aeabi_dsub+0x624>)
    df5e:	45b4      	cmp	ip, r6
    df60:	d1b4      	bne.n	decc <__aeabi_dsub+0x4d4>
    df62:	000c      	movs	r4, r1
    df64:	0017      	movs	r7, r2
    df66:	4666      	mov	r6, ip
    df68:	e5cc      	b.n	db04 <__aeabi_dsub+0x10c>
    df6a:	2700      	movs	r7, #0
    df6c:	2400      	movs	r4, #0
    df6e:	e5e8      	b.n	db42 <__aeabi_dsub+0x14a>
    df70:	2b00      	cmp	r3, #0
    df72:	d039      	beq.n	dfe8 <__aeabi_dsub+0x5f0>
    df74:	000b      	movs	r3, r1
    df76:	4313      	orrs	r3, r2
    df78:	d100      	bne.n	df7c <__aeabi_dsub+0x584>
    df7a:	e744      	b.n	de06 <__aeabi_dsub+0x40e>
    df7c:	08c0      	lsrs	r0, r0, #3
    df7e:	0767      	lsls	r7, r4, #29
    df80:	4307      	orrs	r7, r0
    df82:	2080      	movs	r0, #128	; 0x80
    df84:	08e4      	lsrs	r4, r4, #3
    df86:	0300      	lsls	r0, r0, #12
    df88:	4204      	tst	r4, r0
    df8a:	d0e1      	beq.n	df50 <__aeabi_dsub+0x558>
    df8c:	08cb      	lsrs	r3, r1, #3
    df8e:	4203      	tst	r3, r0
    df90:	d1de      	bne.n	df50 <__aeabi_dsub+0x558>
    df92:	08d7      	lsrs	r7, r2, #3
    df94:	0749      	lsls	r1, r1, #29
    df96:	430f      	orrs	r7, r1
    df98:	001c      	movs	r4, r3
    df9a:	e7d9      	b.n	df50 <__aeabi_dsub+0x558>
    df9c:	2100      	movs	r1, #0
    df9e:	e771      	b.n	de84 <__aeabi_dsub+0x48c>
    dfa0:	2500      	movs	r5, #0
    dfa2:	2700      	movs	r7, #0
    dfa4:	e5e9      	b.n	db7a <__aeabi_dsub+0x182>
    dfa6:	002e      	movs	r6, r5
    dfa8:	0027      	movs	r7, r4
    dfaa:	3e20      	subs	r6, #32
    dfac:	40f7      	lsrs	r7, r6
    dfae:	2d20      	cmp	r5, #32
    dfb0:	d02f      	beq.n	e012 <__aeabi_dsub+0x61a>
    dfb2:	2640      	movs	r6, #64	; 0x40
    dfb4:	1b75      	subs	r5, r6, r5
    dfb6:	40ac      	lsls	r4, r5
    dfb8:	4650      	mov	r0, sl
    dfba:	4320      	orrs	r0, r4
    dfbc:	1e44      	subs	r4, r0, #1
    dfbe:	41a0      	sbcs	r0, r4
    dfc0:	2400      	movs	r4, #0
    dfc2:	4338      	orrs	r0, r7
    dfc4:	e6dc      	b.n	dd80 <__aeabi_dsub+0x388>
    dfc6:	2480      	movs	r4, #128	; 0x80
    dfc8:	2500      	movs	r5, #0
    dfca:	0324      	lsls	r4, r4, #12
    dfcc:	4e13      	ldr	r6, [pc, #76]	; (e01c <__aeabi_dsub+0x624>)
    dfce:	2700      	movs	r7, #0
    dfd0:	e5d3      	b.n	db7a <__aeabi_dsub+0x182>
    dfd2:	4650      	mov	r0, sl
    dfd4:	4320      	orrs	r0, r4
    dfd6:	0007      	movs	r7, r0
    dfd8:	1e78      	subs	r0, r7, #1
    dfda:	4187      	sbcs	r7, r0
    dfdc:	2400      	movs	r4, #0
    dfde:	18bf      	adds	r7, r7, r2
    dfe0:	e760      	b.n	dea4 <__aeabi_dsub+0x4ac>
    dfe2:	000c      	movs	r4, r1
    dfe4:	0017      	movs	r7, r2
    dfe6:	e58d      	b.n	db04 <__aeabi_dsub+0x10c>
    dfe8:	000c      	movs	r4, r1
    dfea:	0017      	movs	r7, r2
    dfec:	4e0b      	ldr	r6, [pc, #44]	; (e01c <__aeabi_dsub+0x624>)
    dfee:	e589      	b.n	db04 <__aeabi_dsub+0x10c>
    dff0:	001e      	movs	r6, r3
    dff2:	0027      	movs	r7, r4
    dff4:	3e20      	subs	r6, #32
    dff6:	40f7      	lsrs	r7, r6
    dff8:	2b20      	cmp	r3, #32
    dffa:	d00c      	beq.n	e016 <__aeabi_dsub+0x61e>
    dffc:	2640      	movs	r6, #64	; 0x40
    dffe:	1af3      	subs	r3, r6, r3
    e000:	409c      	lsls	r4, r3
    e002:	4650      	mov	r0, sl
    e004:	4320      	orrs	r0, r4
    e006:	1e44      	subs	r4, r0, #1
    e008:	41a0      	sbcs	r0, r4
    e00a:	4307      	orrs	r7, r0
    e00c:	2400      	movs	r4, #0
    e00e:	18bf      	adds	r7, r7, r2
    e010:	e748      	b.n	dea4 <__aeabi_dsub+0x4ac>
    e012:	2400      	movs	r4, #0
    e014:	e7d0      	b.n	dfb8 <__aeabi_dsub+0x5c0>
    e016:	2400      	movs	r4, #0
    e018:	e7f3      	b.n	e002 <__aeabi_dsub+0x60a>
    e01a:	46c0      	nop			; (mov r8, r8)
    e01c:	000007ff 	.word	0x000007ff
    e020:	ff7fffff 	.word	0xff7fffff

0000e024 <__aeabi_dcmpun>:
    e024:	b570      	push	{r4, r5, r6, lr}
    e026:	4e0e      	ldr	r6, [pc, #56]	; (e060 <__aeabi_dcmpun+0x3c>)
    e028:	030d      	lsls	r5, r1, #12
    e02a:	031c      	lsls	r4, r3, #12
    e02c:	0049      	lsls	r1, r1, #1
    e02e:	005b      	lsls	r3, r3, #1
    e030:	0b2d      	lsrs	r5, r5, #12
    e032:	0d49      	lsrs	r1, r1, #21
    e034:	0b24      	lsrs	r4, r4, #12
    e036:	0d5b      	lsrs	r3, r3, #21
    e038:	42b1      	cmp	r1, r6
    e03a:	d004      	beq.n	e046 <__aeabi_dcmpun+0x22>
    e03c:	4908      	ldr	r1, [pc, #32]	; (e060 <__aeabi_dcmpun+0x3c>)
    e03e:	2000      	movs	r0, #0
    e040:	428b      	cmp	r3, r1
    e042:	d008      	beq.n	e056 <__aeabi_dcmpun+0x32>
    e044:	bd70      	pop	{r4, r5, r6, pc}
    e046:	4305      	orrs	r5, r0
    e048:	2001      	movs	r0, #1
    e04a:	2d00      	cmp	r5, #0
    e04c:	d1fa      	bne.n	e044 <__aeabi_dcmpun+0x20>
    e04e:	4904      	ldr	r1, [pc, #16]	; (e060 <__aeabi_dcmpun+0x3c>)
    e050:	2000      	movs	r0, #0
    e052:	428b      	cmp	r3, r1
    e054:	d1f6      	bne.n	e044 <__aeabi_dcmpun+0x20>
    e056:	4314      	orrs	r4, r2
    e058:	0020      	movs	r0, r4
    e05a:	1e44      	subs	r4, r0, #1
    e05c:	41a0      	sbcs	r0, r4
    e05e:	e7f1      	b.n	e044 <__aeabi_dcmpun+0x20>
    e060:	000007ff 	.word	0x000007ff

0000e064 <__aeabi_d2iz>:
    e064:	b530      	push	{r4, r5, lr}
    e066:	4d13      	ldr	r5, [pc, #76]	; (e0b4 <__aeabi_d2iz+0x50>)
    e068:	030a      	lsls	r2, r1, #12
    e06a:	004b      	lsls	r3, r1, #1
    e06c:	0b12      	lsrs	r2, r2, #12
    e06e:	0d5b      	lsrs	r3, r3, #21
    e070:	0fc9      	lsrs	r1, r1, #31
    e072:	2400      	movs	r4, #0
    e074:	42ab      	cmp	r3, r5
    e076:	dd10      	ble.n	e09a <__aeabi_d2iz+0x36>
    e078:	4c0f      	ldr	r4, [pc, #60]	; (e0b8 <__aeabi_d2iz+0x54>)
    e07a:	42a3      	cmp	r3, r4
    e07c:	dc0f      	bgt.n	e09e <__aeabi_d2iz+0x3a>
    e07e:	2480      	movs	r4, #128	; 0x80
    e080:	4d0e      	ldr	r5, [pc, #56]	; (e0bc <__aeabi_d2iz+0x58>)
    e082:	0364      	lsls	r4, r4, #13
    e084:	4322      	orrs	r2, r4
    e086:	1aed      	subs	r5, r5, r3
    e088:	2d1f      	cmp	r5, #31
    e08a:	dd0b      	ble.n	e0a4 <__aeabi_d2iz+0x40>
    e08c:	480c      	ldr	r0, [pc, #48]	; (e0c0 <__aeabi_d2iz+0x5c>)
    e08e:	1ac3      	subs	r3, r0, r3
    e090:	40da      	lsrs	r2, r3
    e092:	4254      	negs	r4, r2
    e094:	2900      	cmp	r1, #0
    e096:	d100      	bne.n	e09a <__aeabi_d2iz+0x36>
    e098:	0014      	movs	r4, r2
    e09a:	0020      	movs	r0, r4
    e09c:	bd30      	pop	{r4, r5, pc}
    e09e:	4b09      	ldr	r3, [pc, #36]	; (e0c4 <__aeabi_d2iz+0x60>)
    e0a0:	18cc      	adds	r4, r1, r3
    e0a2:	e7fa      	b.n	e09a <__aeabi_d2iz+0x36>
    e0a4:	4c08      	ldr	r4, [pc, #32]	; (e0c8 <__aeabi_d2iz+0x64>)
    e0a6:	40e8      	lsrs	r0, r5
    e0a8:	46a4      	mov	ip, r4
    e0aa:	4463      	add	r3, ip
    e0ac:	409a      	lsls	r2, r3
    e0ae:	4302      	orrs	r2, r0
    e0b0:	e7ef      	b.n	e092 <__aeabi_d2iz+0x2e>
    e0b2:	46c0      	nop			; (mov r8, r8)
    e0b4:	000003fe 	.word	0x000003fe
    e0b8:	0000041d 	.word	0x0000041d
    e0bc:	00000433 	.word	0x00000433
    e0c0:	00000413 	.word	0x00000413
    e0c4:	7fffffff 	.word	0x7fffffff
    e0c8:	fffffbed 	.word	0xfffffbed

0000e0cc <__aeabi_i2d>:
    e0cc:	b570      	push	{r4, r5, r6, lr}
    e0ce:	2800      	cmp	r0, #0
    e0d0:	d030      	beq.n	e134 <__aeabi_i2d+0x68>
    e0d2:	17c3      	asrs	r3, r0, #31
    e0d4:	18c4      	adds	r4, r0, r3
    e0d6:	405c      	eors	r4, r3
    e0d8:	0fc5      	lsrs	r5, r0, #31
    e0da:	0020      	movs	r0, r4
    e0dc:	f000 f94c 	bl	e378 <__clzsi2>
    e0e0:	4b17      	ldr	r3, [pc, #92]	; (e140 <__aeabi_i2d+0x74>)
    e0e2:	4a18      	ldr	r2, [pc, #96]	; (e144 <__aeabi_i2d+0x78>)
    e0e4:	1a1b      	subs	r3, r3, r0
    e0e6:	1ad2      	subs	r2, r2, r3
    e0e8:	2a1f      	cmp	r2, #31
    e0ea:	dd18      	ble.n	e11e <__aeabi_i2d+0x52>
    e0ec:	4a16      	ldr	r2, [pc, #88]	; (e148 <__aeabi_i2d+0x7c>)
    e0ee:	1ad2      	subs	r2, r2, r3
    e0f0:	4094      	lsls	r4, r2
    e0f2:	2200      	movs	r2, #0
    e0f4:	0324      	lsls	r4, r4, #12
    e0f6:	055b      	lsls	r3, r3, #21
    e0f8:	0b24      	lsrs	r4, r4, #12
    e0fa:	0d5b      	lsrs	r3, r3, #21
    e0fc:	2100      	movs	r1, #0
    e0fe:	0010      	movs	r0, r2
    e100:	0324      	lsls	r4, r4, #12
    e102:	0d0a      	lsrs	r2, r1, #20
    e104:	0b24      	lsrs	r4, r4, #12
    e106:	0512      	lsls	r2, r2, #20
    e108:	4322      	orrs	r2, r4
    e10a:	4c10      	ldr	r4, [pc, #64]	; (e14c <__aeabi_i2d+0x80>)
    e10c:	051b      	lsls	r3, r3, #20
    e10e:	4022      	ands	r2, r4
    e110:	4313      	orrs	r3, r2
    e112:	005b      	lsls	r3, r3, #1
    e114:	07ed      	lsls	r5, r5, #31
    e116:	085b      	lsrs	r3, r3, #1
    e118:	432b      	orrs	r3, r5
    e11a:	0019      	movs	r1, r3
    e11c:	bd70      	pop	{r4, r5, r6, pc}
    e11e:	0021      	movs	r1, r4
    e120:	4091      	lsls	r1, r2
    e122:	000a      	movs	r2, r1
    e124:	210b      	movs	r1, #11
    e126:	1a08      	subs	r0, r1, r0
    e128:	40c4      	lsrs	r4, r0
    e12a:	055b      	lsls	r3, r3, #21
    e12c:	0324      	lsls	r4, r4, #12
    e12e:	0b24      	lsrs	r4, r4, #12
    e130:	0d5b      	lsrs	r3, r3, #21
    e132:	e7e3      	b.n	e0fc <__aeabi_i2d+0x30>
    e134:	2500      	movs	r5, #0
    e136:	2300      	movs	r3, #0
    e138:	2400      	movs	r4, #0
    e13a:	2200      	movs	r2, #0
    e13c:	e7de      	b.n	e0fc <__aeabi_i2d+0x30>
    e13e:	46c0      	nop			; (mov r8, r8)
    e140:	0000041e 	.word	0x0000041e
    e144:	00000433 	.word	0x00000433
    e148:	00000413 	.word	0x00000413
    e14c:	800fffff 	.word	0x800fffff

0000e150 <__aeabi_ui2d>:
    e150:	b510      	push	{r4, lr}
    e152:	1e04      	subs	r4, r0, #0
    e154:	d028      	beq.n	e1a8 <__aeabi_ui2d+0x58>
    e156:	f000 f90f 	bl	e378 <__clzsi2>
    e15a:	4b15      	ldr	r3, [pc, #84]	; (e1b0 <__aeabi_ui2d+0x60>)
    e15c:	4a15      	ldr	r2, [pc, #84]	; (e1b4 <__aeabi_ui2d+0x64>)
    e15e:	1a1b      	subs	r3, r3, r0
    e160:	1ad2      	subs	r2, r2, r3
    e162:	2a1f      	cmp	r2, #31
    e164:	dd15      	ble.n	e192 <__aeabi_ui2d+0x42>
    e166:	4a14      	ldr	r2, [pc, #80]	; (e1b8 <__aeabi_ui2d+0x68>)
    e168:	1ad2      	subs	r2, r2, r3
    e16a:	4094      	lsls	r4, r2
    e16c:	2200      	movs	r2, #0
    e16e:	0324      	lsls	r4, r4, #12
    e170:	055b      	lsls	r3, r3, #21
    e172:	0b24      	lsrs	r4, r4, #12
    e174:	0d5b      	lsrs	r3, r3, #21
    e176:	2100      	movs	r1, #0
    e178:	0010      	movs	r0, r2
    e17a:	0324      	lsls	r4, r4, #12
    e17c:	0d0a      	lsrs	r2, r1, #20
    e17e:	0b24      	lsrs	r4, r4, #12
    e180:	0512      	lsls	r2, r2, #20
    e182:	4322      	orrs	r2, r4
    e184:	4c0d      	ldr	r4, [pc, #52]	; (e1bc <__aeabi_ui2d+0x6c>)
    e186:	051b      	lsls	r3, r3, #20
    e188:	4022      	ands	r2, r4
    e18a:	4313      	orrs	r3, r2
    e18c:	005b      	lsls	r3, r3, #1
    e18e:	0859      	lsrs	r1, r3, #1
    e190:	bd10      	pop	{r4, pc}
    e192:	0021      	movs	r1, r4
    e194:	4091      	lsls	r1, r2
    e196:	000a      	movs	r2, r1
    e198:	210b      	movs	r1, #11
    e19a:	1a08      	subs	r0, r1, r0
    e19c:	40c4      	lsrs	r4, r0
    e19e:	055b      	lsls	r3, r3, #21
    e1a0:	0324      	lsls	r4, r4, #12
    e1a2:	0b24      	lsrs	r4, r4, #12
    e1a4:	0d5b      	lsrs	r3, r3, #21
    e1a6:	e7e6      	b.n	e176 <__aeabi_ui2d+0x26>
    e1a8:	2300      	movs	r3, #0
    e1aa:	2400      	movs	r4, #0
    e1ac:	2200      	movs	r2, #0
    e1ae:	e7e2      	b.n	e176 <__aeabi_ui2d+0x26>
    e1b0:	0000041e 	.word	0x0000041e
    e1b4:	00000433 	.word	0x00000433
    e1b8:	00000413 	.word	0x00000413
    e1bc:	800fffff 	.word	0x800fffff

0000e1c0 <__aeabi_f2d>:
    e1c0:	0041      	lsls	r1, r0, #1
    e1c2:	0e09      	lsrs	r1, r1, #24
    e1c4:	1c4b      	adds	r3, r1, #1
    e1c6:	b570      	push	{r4, r5, r6, lr}
    e1c8:	b2db      	uxtb	r3, r3
    e1ca:	0246      	lsls	r6, r0, #9
    e1cc:	0a75      	lsrs	r5, r6, #9
    e1ce:	0fc4      	lsrs	r4, r0, #31
    e1d0:	2b01      	cmp	r3, #1
    e1d2:	dd14      	ble.n	e1fe <__aeabi_f2d+0x3e>
    e1d4:	23e0      	movs	r3, #224	; 0xe0
    e1d6:	009b      	lsls	r3, r3, #2
    e1d8:	076d      	lsls	r5, r5, #29
    e1da:	0b36      	lsrs	r6, r6, #12
    e1dc:	18cb      	adds	r3, r1, r3
    e1de:	2100      	movs	r1, #0
    e1e0:	0d0a      	lsrs	r2, r1, #20
    e1e2:	0028      	movs	r0, r5
    e1e4:	0512      	lsls	r2, r2, #20
    e1e6:	4d1c      	ldr	r5, [pc, #112]	; (e258 <__aeabi_f2d+0x98>)
    e1e8:	4332      	orrs	r2, r6
    e1ea:	055b      	lsls	r3, r3, #21
    e1ec:	402a      	ands	r2, r5
    e1ee:	085b      	lsrs	r3, r3, #1
    e1f0:	4313      	orrs	r3, r2
    e1f2:	005b      	lsls	r3, r3, #1
    e1f4:	07e4      	lsls	r4, r4, #31
    e1f6:	085b      	lsrs	r3, r3, #1
    e1f8:	4323      	orrs	r3, r4
    e1fa:	0019      	movs	r1, r3
    e1fc:	bd70      	pop	{r4, r5, r6, pc}
    e1fe:	2900      	cmp	r1, #0
    e200:	d114      	bne.n	e22c <__aeabi_f2d+0x6c>
    e202:	2d00      	cmp	r5, #0
    e204:	d01e      	beq.n	e244 <__aeabi_f2d+0x84>
    e206:	0028      	movs	r0, r5
    e208:	f000 f8b6 	bl	e378 <__clzsi2>
    e20c:	280a      	cmp	r0, #10
    e20e:	dc1c      	bgt.n	e24a <__aeabi_f2d+0x8a>
    e210:	230b      	movs	r3, #11
    e212:	002a      	movs	r2, r5
    e214:	1a1b      	subs	r3, r3, r0
    e216:	40da      	lsrs	r2, r3
    e218:	0003      	movs	r3, r0
    e21a:	3315      	adds	r3, #21
    e21c:	409d      	lsls	r5, r3
    e21e:	4b0f      	ldr	r3, [pc, #60]	; (e25c <__aeabi_f2d+0x9c>)
    e220:	0312      	lsls	r2, r2, #12
    e222:	1a1b      	subs	r3, r3, r0
    e224:	055b      	lsls	r3, r3, #21
    e226:	0b16      	lsrs	r6, r2, #12
    e228:	0d5b      	lsrs	r3, r3, #21
    e22a:	e7d8      	b.n	e1de <__aeabi_f2d+0x1e>
    e22c:	2d00      	cmp	r5, #0
    e22e:	d006      	beq.n	e23e <__aeabi_f2d+0x7e>
    e230:	0b32      	lsrs	r2, r6, #12
    e232:	2680      	movs	r6, #128	; 0x80
    e234:	0336      	lsls	r6, r6, #12
    e236:	076d      	lsls	r5, r5, #29
    e238:	4316      	orrs	r6, r2
    e23a:	4b09      	ldr	r3, [pc, #36]	; (e260 <__aeabi_f2d+0xa0>)
    e23c:	e7cf      	b.n	e1de <__aeabi_f2d+0x1e>
    e23e:	4b08      	ldr	r3, [pc, #32]	; (e260 <__aeabi_f2d+0xa0>)
    e240:	2600      	movs	r6, #0
    e242:	e7cc      	b.n	e1de <__aeabi_f2d+0x1e>
    e244:	2300      	movs	r3, #0
    e246:	2600      	movs	r6, #0
    e248:	e7c9      	b.n	e1de <__aeabi_f2d+0x1e>
    e24a:	0003      	movs	r3, r0
    e24c:	002a      	movs	r2, r5
    e24e:	3b0b      	subs	r3, #11
    e250:	409a      	lsls	r2, r3
    e252:	2500      	movs	r5, #0
    e254:	e7e3      	b.n	e21e <__aeabi_f2d+0x5e>
    e256:	46c0      	nop			; (mov r8, r8)
    e258:	800fffff 	.word	0x800fffff
    e25c:	00000389 	.word	0x00000389
    e260:	000007ff 	.word	0x000007ff

0000e264 <__aeabi_d2f>:
    e264:	b5f0      	push	{r4, r5, r6, r7, lr}
    e266:	004c      	lsls	r4, r1, #1
    e268:	0d64      	lsrs	r4, r4, #21
    e26a:	030b      	lsls	r3, r1, #12
    e26c:	1c62      	adds	r2, r4, #1
    e26e:	0f45      	lsrs	r5, r0, #29
    e270:	0a5b      	lsrs	r3, r3, #9
    e272:	0552      	lsls	r2, r2, #21
    e274:	432b      	orrs	r3, r5
    e276:	0fc9      	lsrs	r1, r1, #31
    e278:	00c5      	lsls	r5, r0, #3
    e27a:	0d52      	lsrs	r2, r2, #21
    e27c:	2a01      	cmp	r2, #1
    e27e:	dd28      	ble.n	e2d2 <__aeabi_d2f+0x6e>
    e280:	4a3a      	ldr	r2, [pc, #232]	; (e36c <__aeabi_d2f+0x108>)
    e282:	18a6      	adds	r6, r4, r2
    e284:	2efe      	cmp	r6, #254	; 0xfe
    e286:	dc1b      	bgt.n	e2c0 <__aeabi_d2f+0x5c>
    e288:	2e00      	cmp	r6, #0
    e28a:	dd3e      	ble.n	e30a <__aeabi_d2f+0xa6>
    e28c:	0180      	lsls	r0, r0, #6
    e28e:	0002      	movs	r2, r0
    e290:	1e50      	subs	r0, r2, #1
    e292:	4182      	sbcs	r2, r0
    e294:	0f6d      	lsrs	r5, r5, #29
    e296:	432a      	orrs	r2, r5
    e298:	00db      	lsls	r3, r3, #3
    e29a:	4313      	orrs	r3, r2
    e29c:	075a      	lsls	r2, r3, #29
    e29e:	d004      	beq.n	e2aa <__aeabi_d2f+0x46>
    e2a0:	220f      	movs	r2, #15
    e2a2:	401a      	ands	r2, r3
    e2a4:	2a04      	cmp	r2, #4
    e2a6:	d000      	beq.n	e2aa <__aeabi_d2f+0x46>
    e2a8:	3304      	adds	r3, #4
    e2aa:	2280      	movs	r2, #128	; 0x80
    e2ac:	04d2      	lsls	r2, r2, #19
    e2ae:	401a      	ands	r2, r3
    e2b0:	d05a      	beq.n	e368 <__aeabi_d2f+0x104>
    e2b2:	3601      	adds	r6, #1
    e2b4:	2eff      	cmp	r6, #255	; 0xff
    e2b6:	d003      	beq.n	e2c0 <__aeabi_d2f+0x5c>
    e2b8:	019b      	lsls	r3, r3, #6
    e2ba:	0a5b      	lsrs	r3, r3, #9
    e2bc:	b2f4      	uxtb	r4, r6
    e2be:	e001      	b.n	e2c4 <__aeabi_d2f+0x60>
    e2c0:	24ff      	movs	r4, #255	; 0xff
    e2c2:	2300      	movs	r3, #0
    e2c4:	0258      	lsls	r0, r3, #9
    e2c6:	05e4      	lsls	r4, r4, #23
    e2c8:	0a40      	lsrs	r0, r0, #9
    e2ca:	07c9      	lsls	r1, r1, #31
    e2cc:	4320      	orrs	r0, r4
    e2ce:	4308      	orrs	r0, r1
    e2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2d2:	2c00      	cmp	r4, #0
    e2d4:	d007      	beq.n	e2e6 <__aeabi_d2f+0x82>
    e2d6:	431d      	orrs	r5, r3
    e2d8:	d0f2      	beq.n	e2c0 <__aeabi_d2f+0x5c>
    e2da:	2080      	movs	r0, #128	; 0x80
    e2dc:	00db      	lsls	r3, r3, #3
    e2de:	0480      	lsls	r0, r0, #18
    e2e0:	4303      	orrs	r3, r0
    e2e2:	26ff      	movs	r6, #255	; 0xff
    e2e4:	e7da      	b.n	e29c <__aeabi_d2f+0x38>
    e2e6:	432b      	orrs	r3, r5
    e2e8:	d003      	beq.n	e2f2 <__aeabi_d2f+0x8e>
    e2ea:	2305      	movs	r3, #5
    e2ec:	08db      	lsrs	r3, r3, #3
    e2ee:	2cff      	cmp	r4, #255	; 0xff
    e2f0:	d003      	beq.n	e2fa <__aeabi_d2f+0x96>
    e2f2:	025b      	lsls	r3, r3, #9
    e2f4:	0a5b      	lsrs	r3, r3, #9
    e2f6:	b2e4      	uxtb	r4, r4
    e2f8:	e7e4      	b.n	e2c4 <__aeabi_d2f+0x60>
    e2fa:	2b00      	cmp	r3, #0
    e2fc:	d032      	beq.n	e364 <__aeabi_d2f+0x100>
    e2fe:	2080      	movs	r0, #128	; 0x80
    e300:	03c0      	lsls	r0, r0, #15
    e302:	4303      	orrs	r3, r0
    e304:	025b      	lsls	r3, r3, #9
    e306:	0a5b      	lsrs	r3, r3, #9
    e308:	e7dc      	b.n	e2c4 <__aeabi_d2f+0x60>
    e30a:	0032      	movs	r2, r6
    e30c:	3217      	adds	r2, #23
    e30e:	db14      	blt.n	e33a <__aeabi_d2f+0xd6>
    e310:	2280      	movs	r2, #128	; 0x80
    e312:	271e      	movs	r7, #30
    e314:	0412      	lsls	r2, r2, #16
    e316:	4313      	orrs	r3, r2
    e318:	1bbf      	subs	r7, r7, r6
    e31a:	2f1f      	cmp	r7, #31
    e31c:	dc0f      	bgt.n	e33e <__aeabi_d2f+0xda>
    e31e:	4a14      	ldr	r2, [pc, #80]	; (e370 <__aeabi_d2f+0x10c>)
    e320:	4694      	mov	ip, r2
    e322:	4464      	add	r4, ip
    e324:	002a      	movs	r2, r5
    e326:	40a5      	lsls	r5, r4
    e328:	002e      	movs	r6, r5
    e32a:	40a3      	lsls	r3, r4
    e32c:	1e75      	subs	r5, r6, #1
    e32e:	41ae      	sbcs	r6, r5
    e330:	40fa      	lsrs	r2, r7
    e332:	4333      	orrs	r3, r6
    e334:	4313      	orrs	r3, r2
    e336:	2600      	movs	r6, #0
    e338:	e7b0      	b.n	e29c <__aeabi_d2f+0x38>
    e33a:	2400      	movs	r4, #0
    e33c:	e7d5      	b.n	e2ea <__aeabi_d2f+0x86>
    e33e:	2202      	movs	r2, #2
    e340:	4252      	negs	r2, r2
    e342:	1b96      	subs	r6, r2, r6
    e344:	001a      	movs	r2, r3
    e346:	40f2      	lsrs	r2, r6
    e348:	2f20      	cmp	r7, #32
    e34a:	d009      	beq.n	e360 <__aeabi_d2f+0xfc>
    e34c:	4809      	ldr	r0, [pc, #36]	; (e374 <__aeabi_d2f+0x110>)
    e34e:	4684      	mov	ip, r0
    e350:	4464      	add	r4, ip
    e352:	40a3      	lsls	r3, r4
    e354:	432b      	orrs	r3, r5
    e356:	1e5d      	subs	r5, r3, #1
    e358:	41ab      	sbcs	r3, r5
    e35a:	2600      	movs	r6, #0
    e35c:	4313      	orrs	r3, r2
    e35e:	e79d      	b.n	e29c <__aeabi_d2f+0x38>
    e360:	2300      	movs	r3, #0
    e362:	e7f7      	b.n	e354 <__aeabi_d2f+0xf0>
    e364:	2300      	movs	r3, #0
    e366:	e7ad      	b.n	e2c4 <__aeabi_d2f+0x60>
    e368:	0034      	movs	r4, r6
    e36a:	e7bf      	b.n	e2ec <__aeabi_d2f+0x88>
    e36c:	fffffc80 	.word	0xfffffc80
    e370:	fffffc82 	.word	0xfffffc82
    e374:	fffffca2 	.word	0xfffffca2

0000e378 <__clzsi2>:
    e378:	211c      	movs	r1, #28
    e37a:	2301      	movs	r3, #1
    e37c:	041b      	lsls	r3, r3, #16
    e37e:	4298      	cmp	r0, r3
    e380:	d301      	bcc.n	e386 <__clzsi2+0xe>
    e382:	0c00      	lsrs	r0, r0, #16
    e384:	3910      	subs	r1, #16
    e386:	0a1b      	lsrs	r3, r3, #8
    e388:	4298      	cmp	r0, r3
    e38a:	d301      	bcc.n	e390 <__clzsi2+0x18>
    e38c:	0a00      	lsrs	r0, r0, #8
    e38e:	3908      	subs	r1, #8
    e390:	091b      	lsrs	r3, r3, #4
    e392:	4298      	cmp	r0, r3
    e394:	d301      	bcc.n	e39a <__clzsi2+0x22>
    e396:	0900      	lsrs	r0, r0, #4
    e398:	3904      	subs	r1, #4
    e39a:	a202      	add	r2, pc, #8	; (adr r2, e3a4 <__clzsi2+0x2c>)
    e39c:	5c10      	ldrb	r0, [r2, r0]
    e39e:	1840      	adds	r0, r0, r1
    e3a0:	4770      	bx	lr
    e3a2:	46c0      	nop			; (mov r8, r8)
    e3a4:	02020304 	.word	0x02020304
    e3a8:	01010101 	.word	0x01010101
	...
    e3b4:	000003b2 	.word	0x000003b2
    e3b8:	000003b6 	.word	0x000003b6
    e3bc:	000003ba 	.word	0x000003ba
    e3c0:	000003be 	.word	0x000003be
    e3c4:	000003c2 	.word	0x000003c2
    e3c8:	000003c6 	.word	0x000003c6
    e3cc:	000003ca 	.word	0x000003ca
    e3d0:	000003ce 	.word	0x000003ce
    e3d4:	000003d2 	.word	0x000003d2
    e3d8:	000003d6 	.word	0x000003d6
    e3dc:	0000042e 	.word	0x0000042e
    e3e0:	00000434 	.word	0x00000434
    e3e4:	0000043a 	.word	0x0000043a
    e3e8:	00000440 	.word	0x00000440
    e3ec:	00000440 	.word	0x00000440
    e3f0:	00000446 	.word	0x00000446
    e3f4:	00000446 	.word	0x00000446
    e3f8:	00000446 	.word	0x00000446
    e3fc:	0000044c 	.word	0x0000044c
    e400:	00000452 	.word	0x00000452

0000e404 <_tcc_intflag>:
    e404:	00000001 00000002 00000004 00000008     ................
    e414:	00001000 00002000 00004000 00008000     ..... ...@......
    e424:	00010000 00020000 00040000 00080000     ................
    e434:	20434448 54495257 49542045 554f454d     HDC WRITE TIMEOU
    e444:	00000d54 20434448 44414552 4d495420     T...HDC READ TIM
    e454:	54554f45 0000000d 20434448 64616552     EOUT....HDC Read
    e464:	6e6f4320 20676966 6f727245 00000d72      Config Error...
    e474:	20434448 74697257 6f432065 6769666e     HDC Write Config
    e484:	72724520 000d726f 20434448 64616552      Error..HDC Read
    e494:	6d655420 72452070 0d726f72 00000000      Temp Error.....
    e4a4:	20434448 64616552 6d754820 74696469     HDC Read Humidit
    e4b4:	72452079 0d726f72 00000000 00000002     y Error.........
    e4c4:	00000003 00000028 00000029 00000004     ....(...).......
    e4d4:	00000005 00000006 00000007 0000ffff     ................
    e4e4:	0000ffff 00000022 00000023 0000ffff     ...."...#.......
    e4f4:	0000ffff 0000ffff 0000ffff 00000008     ................
    e504:	00000009 0000000a 0000000b 00002d56     ............V-..
    e514:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e524:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e534:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e544:	00002d5c 00002d5c 00002d5c 00002d34     \-..\-..\-..4-..
    e554:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e564:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e574:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e584:	00002d5c 00002d5c 00002d5c 00002d50     \-..\-..\-..P-..
    e594:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e5a4:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e5b4:	00002d5c 00002d5c 00002d5c 00002d5c     \-..\-..\-..\-..
    e5c4:	00002d5c 00002d5c 00002d5c 00002d4a     \-..\-..\-..J-..
    e5d4:	00002cf2 00002d08 00002d1e 00002cd8     .,...-...-...,..
    e5e4:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    e5f4:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    e604:	00005e1e 00005e96 00005e96 00005e3c     .^...^...^..<^..
    e614:	00005e36 00005e42 00005e24 00005e48     6^..B^..$^..H^..
    e624:	00005e7c 00006160 000061b0 000061b0     |^..`a...a...a..
    e634:	000061ac 00006152 00006172 00006142     .a..Ra..ra..Ba..
    e644:	00006184 00006196 000061fe 0000622c     .a...a...a..,b..
    e654:	0000622c 00006228 000061f8 00006204     ,b..(b...a...b..
    e664:	000061f2 0000620a 00006210 796c6e4f     .a...b...b..Only
    e674:	25415020 50202c64 2c642541 25425020      PA%d, PA%d, PB%
    e684:	50202c64 2c642542 206e6163 73206562     d, PB%d,can be s
    e694:	0a0d7465 00000000 706c6568 50202d20     et......help - P
    e6a4:	746e6972 6c612073 6874206c 76612065     rints all the av
    e6b4:	616c6961 20656c62 6d6d6f63 73646e61     ailable commands
    e6c4:	646e6120 73206120 74726f68 6e797320      and a short syn
    e6d4:	6973706f 0a0d2073 5f726576 2d206c62     opsis ..ver_bl -
    e6e4:	69725020 2073746e 20656874 746f6f62      Prints the boot
    e6f4:	64616f6c 66207265 776d7269 20657261     loader firmware 
    e704:	73726576 206e6f69 65760a0d 70615f72     version ..ver_ap
    e714:	202d0970 6e697250 74207374 61206568     p.- Prints the a
    e724:	696c7070 69746163 63206e6f 2065646f     pplication code 
    e734:	6d726966 65726177 72657620 6e6f6973     firmware version
    e744:	670a0d20 5f6f6970 20746573 726f705b      ..gpio_set [por
    e754:	5b205d74 5d6e6970 53202d20 61207465     t] [pin] - Set a
    e764:	49504720 6970204f 6f74206e 67696820      GPIO pin to hig
    e774:	202f2068 0a0d2031 6f697067 656c635f     h / 1 ..gpio_cle
    e784:	5b207261 74726f70 705b205d 095d6e69     ar [port] [pin].
    e794:	6553202d 20612074 4f495047 6e697020     - Set a GPIO pin
    e7a4:	206f7420 20776f6c 2030202f 70670a0d      to low / 0 ..gp
    e7b4:	675f6f69 5b207465 74726f70 705b205d     io_get [port] [p
    e7c4:	205d6e69 6547202d 74732074 20657461     in] - Get state 
    e7d4:	7320666f 69636570 64656966 49504720     of specified GPI
    e7e4:	6970204f 0a0d206e 2063616d 6572202d     O pin ..mac - re
    e7f4:	6e727574 68742073 616d2065 64612063     turns the mac ad
    e804:	73657264 666f2073 65687420 76656420     dress of the dev
    e814:	20656369 70690a0d 72202d20 72757465     ice ..ip - retur
    e824:	7420736e 49206568 20347650 72646461     ns the IPv4 addr
    e834:	20737365 65720a0d 3c5f6461 736e6573     ess ..read_<sens
    e844:	203e726f 6165725b 676e6964 5b205d73     or> [readings] [
    e854:	65746e69 6c617672 202d205d 6e697250     interval] - Prin
    e864:	61207374 6d756e20 20726562 7220666f     ts a number of r
    e874:	69646165 2073676e 74207461 67206568     eadings at the g
    e884:	6e657669 746e6920 61767265 0a0d206c     iven interval ..
    e894:	5f636461 20746567 726f705b 5b205d74     adc_get [port] [
    e8a4:	5d6e6970 47202d20 74207465 41206568     pin] - Get the A
    e8b4:	76204344 65756c61 20666f20 20656874     DC value of the 
    e8c4:	65766967 6970206e 0d202e6e 75636d0a     given pin. ..mcu
    e8d4:	6d65745f 202d2070 6f706552 20737472     _temp - Reports 
    e8e4:	20656874 706d6574 74617265 20657275     the temperature 
    e8f4:	7420666f 6d206568 69207563 6543206e     of the mcu in Ce
    e904:	7569736c 0d202e73 6332690a 6163735f     lsius. ..i2c_sca
    e914:	202d206e 6e697250 6f207374 61207475     n - Prints out a
    e924:	73696c20 6f632074 63656e6e 20646574      list connected 
    e934:	20433249 76616c73 64612065 73657264     I2C slave addres
    e944:	20736573 65720a0d 5f79616c 20746573     ses ..relay_set 
    e954:	7574202d 20736e72 72206e6f 79616c65     - turns on relay
    e964:	720a0d20 79616c65 656c635f 2d207261      ..relay_clear -
    e974:	72757420 6f20736e 72206666 79616c65      turns off relay
    e984:	00000d20 2e302e30 00000030 73726556      ...0.0.0...Vers
    e994:	3a6e6f69 20732520 00000a0d 206e6950     ion: %s ....Pin 
    e9a4:	73206425 68207465 0d686769 0000000a     %d set high.....
    e9b4:	206e6950 63206425 7261656c 0a0d6465     Pin %d cleared..
    e9c4:	00000000 206e6970 76206425 65756c61     ....pin %d value
    e9d4:	6425203a 00000a0d 302e3030 30302e30     : %d....00.00.00
    e9e4:	0d30302e 00000000 2e353532 2e353532     .00.....255.255.
    e9f4:	2e353532 20353532 0000000d 0078756c     255.255 ....lux.
    ea04:	72727543 20746e65 3a78756c 0d642520     Current lux: %d.
    ea14:	0000000a 706d6574 00000000 6f727245     ....temp....Erro
    ea24:	65722072 6e696461 44482067 38303143     r reading HDC108
    ea34:	00000d30 72727543 20746e65 706d6574     0...Current temp
    ea44:	74617265 3a657275 0d642520 7543200a     erature: %d.. Cu
    ea54:	6e657272 75682074 6964696d 203a7974     rrent humidity: 
    ea64:	0a0d6425 00000000 73696f6d 65727574     %d......moisture
    ea74:	00000000 72727543 20746e65 73696f6d     ....Current mois
    ea84:	65727574 2e25203a 20663230 0d202525     ture: %.02f %% .
    ea94:	0000000a 6c696166 206e6f20 206e6970     ....fail on pin 
    eaa4:	20434441 206e6163 72727563 6c746e65     ADC can currentl
    eab4:	6e6f2079 6220796c 6f632065 6769666e     y only be config
    eac4:	64657275 206e6f20 25632550 50202e64     ured on P%c%d. P
    ead4:	7361656c 72742065 67612079 2e6e6961     lease try again.
    eae4:	00000a0d 6c696166 206e6f20 74726f70     ....fail on port
    eaf4:	43444120 6e616320 72756320 746e6572      ADC can current
    eb04:	6f20796c 20796c6e 63206562 69666e6f     ly only be confi
    eb14:	65727567 6e6f2064 25632520 50202e64     gured on %c%d. P
    eb24:	7361656c 72742065 67612079 2e6e6961     lease try again.
    eb34:	00000a0d 746c6f56 20656761 50207461     ....Voltage at P
    eb44:	64256325 6625203a 00000a0d 2055434d     %c%d: %f....MCU 
    eb54:	706d6574 74617265 3a657275 43642520     temperature: %dC
    eb64:	000a0d20 6e616353 676e696e 78756c20      ...Scanning lux
    eb74:	73756220 0000000d 72646441 20737365      bus....Address 
    eb84:	6e756f66 74612064 58232520 00000a0d     found at %#X....
    eb94:	6e616353 676e696e 6d657420 75622070     Scanning temp bu
    eba4:	00000d73 6e616353 6f632073 656c706d     s...Scans comple
    ebb4:	0d2e6574 00000000 72656874 61772065     te......there wa
    ebc4:	6e612073 72726520 7020726f 69737261     s an error parsi
    ebd4:	7920676e 2072756f 73677261 726f6620     ng your args for
    ebe4:	2e732520 65655320 6c656820 6f662070      %s. See help fo
    ebf4:	6f632072 63657272 73752074 2e656761     r correct usage.
    ec04:	00000a0d 61766e49 2064696c 626d756e     ....Invalid numb
    ec14:	6f207265 72612066 203a7367 72207325     er of args: %s r
    ec24:	69757165 20736572 61206425 6d756772     equires %d argum
    ec34:	73746e65 646e6120 756f7920 6f727020     ents and you pro
    ec44:	65646976 64252064 2e0a0d20 20656553     vided %d ...See 
    ec54:	706c6568 726f6620 726f6d20 6e692065     help for more in
    ec64:	6d726f66 6f697461 0d202e6e 0000000a     formation. .....
    ec74:	706c6568 00000000 5f726576 00006c62     help....ver_bl..
    ec84:	5f726576 00707061 6f697067 7465735f     ver_app.gpio_set
    ec94:	00000000 6f697067 656c635f 00007261     ....gpio_clear..
    eca4:	6f697067 7465675f 00000000 0063616d     gpio_get....mac.
    ecb4:	00007069 64616572 00000000 5f636461     ip..read....adc_
    ecc4:	00746567 5f75636d 706d6574 00000000     get.mcu_temp....
    ecd4:	5f633269 6e616373 00000000 6e6e7572     i2c_scan....runn
    ece4:	20676e69 5f633269 6e616373 0000000d     ing i2c_scan....
    ecf4:	616c6572 6f5f3179 0000006e 616c6552     relay1_on...Rela
    ed04:	20312079 6e727574 20676e69 0d2e6e6f     y 1 turning on..
    ed14:	00000000 616c6572 6f5f3179 00006666     ....relay1_off..
    ed24:	616c6552 20312079 6e727574 20676e69     Relay 1 turning 
    ed34:	2e66666f 0000000d 616c6572 6f5f3279     off.....relay2_o
    ed44:	0000006e 616c6552 20322079 6e727574     n...Relay 2 turn
    ed54:	20676e69 0d2e6e6f 00000000 616c6572     ing on......rela
    ed64:	6f5f3279 00006666 616c6552 20322079     y2_off..Relay 2 
    ed74:	6e727574 20676e69 2e66666f 0000000d     turning off.....
    ed84:	736f6f62 6e6f5f74 00000000 736f6f42     boost_on....Boos
    ed94:	6f632074 7265766e 20726574 62616e65     t converter enab
    eda4:	2e64656c 0000000d 736f6f62 666f5f74     led.....boost_of
    edb4:	00000066 736f6f42 6f632074 7265766e     f...Boost conver
    edc4:	20726574 61736964 64656c62 00000d2e     ter disabled....
    edd4:	73616c66 00000068 3164656c 006e6f5f     flash...led1_on.
    ede4:	3144454c 72757420 676e696e 2e6e6f20     LED1 turning on.
    edf4:	0000000d 3164656c 66666f5f 00000000     ....led1_off....
    ee04:	3144454c 72757420 676e696e 66666f20     LED1 turning off
    ee14:	00000d2e 3264656c 006e6f5f 3244454c     ....led2_on.LED2
    ee24:	72757420 676e696e 2e6e6f20 0000000d      turning on.....
    ee34:	3264656c 66666f5f 00000000 3244454c     led2_off....LED2
    ee44:	72757420 676e696e 66666f20 00000d2e      turning off....
    ee54:	5f6e7572 706d7570 00000000 61766e49     run_pump....Inva
    ee64:	2064696c 75706e69 53202e74 68206565     lid input. See h
    ee74:	20706c65 20726f66 72726f63 20746365     elp for correct 
    ee84:	67617375 000d2e65 73616c66 6e692068     usage...flash in
    ee94:	61697469 657a696c 00000d64 63206f4e     itialized...No c
    eea4:	2e706968 0000000d 64616552 72726520     hip.....Read err
    eeb4:	000d726f 00006425 0000000d 20435243     or..%d......CRC 
    eec4:	6f727265 000d2172 20435243 6374616d     error!..CRC matc
    eed4:	21646568 0000000d 73616c46 6c732068     hed!....Flash sl
    eee4:	69706565 000d676e 00000020 65570a0d     eeping.. .....We
    eef4:	6d6f636c 6f742065 65687420 65764520     lcome to the Eve
    ef04:	65726772 43206e65 0d2e494c 00000000     rgreen CLI......
    ef14:	0000203e 7325203e 00000a0d              > ..> %s....

0000ef20 <_global_impure_ptr>:
    ef20:	2000007c 4f500043 00584953 4e49002e     |.. C.POSIX...IN
    ef30:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
    ef40:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    ef50:	32313000 36353433 61393837 65646362     .0123456789abcde
    ef60:	20000066                                         f.

0000ef62 <_ctype_>:
    ef62:	20202000 20202020 28282020 20282828     .         ((((( 
    ef72:	20202020 20202020 20202020 20202020                     
    ef82:	10108820 10101010 10101010 10101010      ...............
    ef92:	04040410 04040404 10040404 10101010     ................
    efa2:	41411010 41414141 01010101 01010101     ..AAAAAA........
    efb2:	01010101 01010101 01010101 10101010     ................
    efc2:	42421010 42424242 02020202 02020202     ..BBBBBB........
    efd2:	02020202 02020202 02020202 10101010     ................
    efe2:	00000020 00000000 00000000 00000000      ...............
	...
    f062:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

0000f070 <__sf_fake_stderr>:
	...

0000f090 <__sf_fake_stdin>:
	...

0000f0b0 <__sf_fake_stdout>:
	...

0000f0d0 <__mprec_bigtens>:
    f0d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    f0e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    f0f0:	7f73bf3c 75154fdd                       <.s..O.u

0000f0f8 <__mprec_tens>:
    f0f8:	00000000 3ff00000 00000000 40240000     .......?......$@
    f108:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    f118:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    f128:	00000000 412e8480 00000000 416312d0     .......A......cA
    f138:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    f148:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    f158:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    f168:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    f178:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    f188:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    f198:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    f1a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    f1b8:	79d99db4 44ea7843                       ...yCx.D

0000f1c0 <p05.6047>:
    f1c0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    f1d0:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    f1e0:	0000c200 0000c1d0 0000c1e2 0000c124     ............$...
    f1f0:	0000c1e2 0000c1c6 0000c1e2 0000c124     ............$...
    f200:	0000c1d0 0000c1d0 0000c1c6 0000c124     ............$...
    f210:	0000c12c 0000c12c 0000c12c 0000c1e8     ,...,...,.......
    f220:	0000c1d0 0000c1d0 0000c1a4 0000c288     ................
    f230:	0000c1a4 0000c1c6 0000c1a4 0000c288     ................
    f240:	0000c1d0 0000c1d0 0000c1c6 0000c288     ................
    f250:	0000c12c 0000c12c 0000c12c 0000c292     ,...,...,.......
    f260:	0000c430 0000c380 0000c380 0000c37e     0...........~...
    f270:	0000c422 0000c422 0000c418 0000c37e     "...".......~...
    f280:	0000c422 0000c418 0000c422 0000c37e     "......."...~...
    f290:	0000c428 0000c428 0000c428 0000c4b8     (...(...(.......
    f2a0:	0000ce88 0000ce6a 0000ce24 0000cd42     ....j...$...B...
    f2b0:	0000ce24 0000ce5c 0000ce24 0000cd42     $...\...$...B...
    f2c0:	0000ce6a 0000ce6a 0000ce5c 0000cd42     j...j...\...B...
    f2d0:	0000cd3a 0000cd3a 0000cd3a 0000d0a0     :...:...:.......
    f2e0:	0000d6e8 0000d5a8 0000d5a8 0000d5a4     ................
    f2f0:	0000d6c0 0000d6c0 0000d6b2 0000d5a4     ................
    f300:	0000d6c0 0000d6b2 0000d6c0 0000d5a4     ................
    f310:	0000d6c8 0000d6c8 0000d6c8 0000d8cc     ................

0000f320 <_init>:
    f320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f322:	46c0      	nop			; (mov r8, r8)
    f324:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f326:	bc08      	pop	{r3}
    f328:	469e      	mov	lr, r3
    f32a:	4770      	bx	lr

0000f32c <__init_array_start>:
    f32c:	000000dd 	.word	0x000000dd

0000f330 <_fini>:
    f330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f332:	46c0      	nop			; (mov r8, r8)
    f334:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f336:	bc08      	pop	{r3}
    f338:	469e      	mov	lr, r3
    f33a:	4770      	bx	lr

0000f33c <__fini_array_start>:
    f33c:	000000b5 	.word	0x000000b5
