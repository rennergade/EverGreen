
ADC_QUICK_START1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000de4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  20000004  00000de8  00020004  2**2
                  ALLOC
  3 .stack        00002000  20000048  00000e2c  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00013d2b  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f64  00000000  00000000  00033db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000258  00000000  00000000  00035d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000260  00000000  00000000  00035f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001814b  00000000  00000000  000361cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000066a5  00000000  00000000  0004e317  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008b02d  00000000  00000000  000549bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000057c  00000000  00000000  000df9ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002488  00000000  00000000  000dff68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	48 20 00 20 69 0a 00 00 65 0a 00 00 65 0a 00 00     H . i...e...e...
	...
  2c:	65 0a 00 00 00 00 00 00 00 00 00 00 65 0a 00 00     e...........e...
  3c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
  4c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
  5c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
  6c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
  7c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
  8c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
  9c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
  ac:	65 0a 00 00 00 00 00 00                             e.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000004 	.word	0x20000004
  d4:	00000000 	.word	0x00000000
  d8:	00000de4 	.word	0x00000de4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000008 	.word	0x20000008
 108:	00000de4 	.word	0x00000de4
 10c:	00000de4 	.word	0x00000de4
 110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
 116:	681b      	ldr	r3, [r3, #0]
 118:	2b00      	cmp	r3, #0
 11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 120:	2b00      	cmp	r3, #0
 122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 124:	2200      	movs	r2, #0
 126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
 128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
 12c:	6813      	ldr	r3, [r2, #0]
 12e:	3301      	adds	r3, #1
 130:	6013      	str	r3, [r2, #0]
}
 132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 134:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 13a:	2200      	movs	r2, #0
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
 13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 140:	3201      	adds	r2, #1
 142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
 144:	701a      	strb	r2, [r3, #0]
 146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
 148:	20000020 	.word	0x20000020
 14c:	20000024 	.word	0x20000024
 150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
 156:	681a      	ldr	r2, [r3, #0]
 158:	3a01      	subs	r2, #1
 15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 15c:	681b      	ldr	r3, [r3, #0]
 15e:	2b00      	cmp	r3, #0
 160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
 162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
 164:	781b      	ldrb	r3, [r3, #0]
 166:	2b00      	cmp	r3, #0
 168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 16a:	2201      	movs	r2, #1
 16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
 16e:	701a      	strb	r2, [r3, #0]
 170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 174:	b662      	cpsie	i
	}
}
 176:	4770      	bx	lr
 178:	20000020 	.word	0x20000020
 17c:	20000024 	.word	0x20000024
 180:	20000000 	.word	0x20000000

00000184 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 184:	b5f0      	push	{r4, r5, r6, r7, lr}
 186:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 188:	ac01      	add	r4, sp, #4
 18a:	2501      	movs	r5, #1
 18c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 18e:	2700      	movs	r7, #0
 190:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 194:	0021      	movs	r1, r4
 196:	203e      	movs	r0, #62	; 0x3e
 198:	4e06      	ldr	r6, [pc, #24]	; (1b4 <system_board_init+0x30>)
 19a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 19c:	2280      	movs	r2, #128	; 0x80
 19e:	05d2      	lsls	r2, r2, #23
 1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_board_init+0x34>)
 1a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 1a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 1a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 1a8:	0021      	movs	r1, r4
 1aa:	200f      	movs	r0, #15
 1ac:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
 1ae:	b003      	add	sp, #12
 1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1b2:	46c0      	nop			; (mov r8, r8)
 1b4:	000005f5 	.word	0x000005f5
 1b8:	41004480 	.word	0x41004480

000001bc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
 1bc:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
 1be:	2200      	movs	r2, #0
 1c0:	2300      	movs	r3, #0
 1c2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
 1c4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
 1c6:	2100      	movs	r1, #0
 1c8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
 1ca:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
 1cc:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
 1ce:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
 1d0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
 1d2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
 1d4:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
 1d6:	24c0      	movs	r4, #192	; 0xc0
 1d8:	0164      	lsls	r4, r4, #5
 1da:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
 1dc:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
 1de:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
 1e0:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
 1e2:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
 1e4:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
 1e6:	242a      	movs	r4, #42	; 0x2a
 1e8:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
 1ea:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
 1ec:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
 1ee:	3c06      	subs	r4, #6
 1f0:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
 1f2:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
 1f4:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
 1f6:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
 1f8:	232b      	movs	r3, #43	; 0x2b
 1fa:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
 1fc:	3301      	adds	r3, #1
 1fe:	54c1      	strb	r1, [r0, r3]
}
 200:	bd10      	pop	{r4, pc}
	...

00000204 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
 204:	b5f0      	push	{r4, r5, r6, r7, lr}
 206:	46d6      	mov	lr, sl
 208:	464f      	mov	r7, r9
 20a:	4646      	mov	r6, r8
 20c:	b5c0      	push	{r6, r7, lr}
 20e:	b096      	sub	sp, #88	; 0x58
 210:	0007      	movs	r7, r0
 212:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
 214:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
 216:	4acb      	ldr	r2, [pc, #812]	; (544 <adc_init+0x340>)
 218:	6a10      	ldr	r0, [r2, #32]
 21a:	2380      	movs	r3, #128	; 0x80
 21c:	025b      	lsls	r3, r3, #9
 21e:	4303      	orrs	r3, r0
 220:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
 222:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
 224:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
 226:	07db      	lsls	r3, r3, #31
 228:	d505      	bpl.n	236 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
 22a:	b016      	add	sp, #88	; 0x58
 22c:	bc1c      	pop	{r2, r3, r4}
 22e:	4690      	mov	r8, r2
 230:	4699      	mov	r9, r3
 232:	46a2      	mov	sl, r4
 234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
 236:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
 238:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
 23a:	079b      	lsls	r3, r3, #30
 23c:	d4f5      	bmi.n	22a <adc_init+0x26>
	module_inst->reference = config->reference;
 23e:	7873      	ldrb	r3, [r6, #1]
 240:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
 242:	2b00      	cmp	r3, #0
 244:	d104      	bne.n	250 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
 246:	4ac0      	ldr	r2, [pc, #768]	; (548 <adc_init+0x344>)
 248:	6c13      	ldr	r3, [r2, #64]	; 0x40
 24a:	2104      	movs	r1, #4
 24c:	430b      	orrs	r3, r1
 24e:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
 250:	683b      	ldr	r3, [r7, #0]
 252:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
 254:	7833      	ldrb	r3, [r6, #0]
 256:	466a      	mov	r2, sp
 258:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
 25a:	4669      	mov	r1, sp
 25c:	201e      	movs	r0, #30
 25e:	4bbb      	ldr	r3, [pc, #748]	; (54c <adc_init+0x348>)
 260:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
 262:	201e      	movs	r0, #30
 264:	4bba      	ldr	r3, [pc, #744]	; (550 <adc_init+0x34c>)
 266:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
 268:	232c      	movs	r3, #44	; 0x2c
 26a:	5cf2      	ldrb	r2, [r6, r3]
 26c:	2a00      	cmp	r2, #0
 26e:	d054      	beq.n	31a <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
 270:	3b01      	subs	r3, #1
 272:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
 274:	7b33      	ldrb	r3, [r6, #12]
 276:	18eb      	adds	r3, r5, r3
 278:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
 27a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
 27c:	b2c9      	uxtb	r1, r1
 27e:	428b      	cmp	r3, r1
 280:	d221      	bcs.n	2c6 <adc_init+0xc2>
 282:	1952      	adds	r2, r2, r5
 284:	b2d3      	uxtb	r3, r2
 286:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
 288:	4bb2      	ldr	r3, [pc, #712]	; (554 <adc_init+0x350>)
 28a:	469a      	mov	sl, r3
 28c:	e003      	b.n	296 <adc_init+0x92>
			offset++;
 28e:	3501      	adds	r5, #1
 290:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
 292:	45a9      	cmp	r9, r5
 294:	d017      	beq.n	2c6 <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
 296:	240f      	movs	r4, #15
 298:	402c      	ands	r4, r5
 29a:	7b33      	ldrb	r3, [r6, #12]
 29c:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
 29e:	2250      	movs	r2, #80	; 0x50
 2a0:	49ad      	ldr	r1, [pc, #692]	; (558 <adc_init+0x354>)
 2a2:	a802      	add	r0, sp, #8
 2a4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
 2a6:	2c13      	cmp	r4, #19
 2a8:	d8f1      	bhi.n	28e <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
 2aa:	00a4      	lsls	r4, r4, #2
 2ac:	ab02      	add	r3, sp, #8
 2ae:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 2b0:	a901      	add	r1, sp, #4
 2b2:	2300      	movs	r3, #0
 2b4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
 2b6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
 2b8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
 2ba:	3301      	adds	r3, #1
 2bc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
 2be:	b2c0      	uxtb	r0, r0
 2c0:	4ba6      	ldr	r3, [pc, #664]	; (55c <adc_init+0x358>)
 2c2:	4798      	blx	r3
 2c4:	e7e3      	b.n	28e <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
 2c6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
 2c8:	2250      	movs	r2, #80	; 0x50
 2ca:	49a3      	ldr	r1, [pc, #652]	; (558 <adc_init+0x354>)
 2cc:	a802      	add	r0, sp, #8
 2ce:	4ba1      	ldr	r3, [pc, #644]	; (554 <adc_init+0x350>)
 2d0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
 2d2:	2c13      	cmp	r4, #19
 2d4:	d913      	bls.n	2fe <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
 2d6:	7d73      	ldrb	r3, [r6, #21]
 2d8:	009b      	lsls	r3, r3, #2
 2da:	b2db      	uxtb	r3, r3
 2dc:	4642      	mov	r2, r8
 2de:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
 2e0:	7db3      	ldrb	r3, [r6, #22]
 2e2:	01db      	lsls	r3, r3, #7
 2e4:	7872      	ldrb	r2, [r6, #1]
 2e6:	4313      	orrs	r3, r2
 2e8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
 2ea:	4642      	mov	r2, r8
 2ec:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
 2ee:	7933      	ldrb	r3, [r6, #4]
 2f0:	2b34      	cmp	r3, #52	; 0x34
 2f2:	d900      	bls.n	2f6 <adc_init+0xf2>
 2f4:	e178      	b.n	5e8 <adc_init+0x3e4>
 2f6:	009b      	lsls	r3, r3, #2
 2f8:	4a99      	ldr	r2, [pc, #612]	; (560 <adc_init+0x35c>)
 2fa:	58d3      	ldr	r3, [r2, r3]
 2fc:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
 2fe:	00a4      	lsls	r4, r4, #2
 300:	ab02      	add	r3, sp, #8
 302:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 304:	a901      	add	r1, sp, #4
 306:	2300      	movs	r3, #0
 308:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
 30a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
 30c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
 30e:	3301      	adds	r3, #1
 310:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
 312:	b2c0      	uxtb	r0, r0
 314:	4b91      	ldr	r3, [pc, #580]	; (55c <adc_init+0x358>)
 316:	4798      	blx	r3
 318:	e7dd      	b.n	2d6 <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
 31a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
 31c:	2250      	movs	r2, #80	; 0x50
 31e:	498e      	ldr	r1, [pc, #568]	; (558 <adc_init+0x354>)
 320:	a802      	add	r0, sp, #8
 322:	4b8c      	ldr	r3, [pc, #560]	; (554 <adc_init+0x350>)
 324:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
 326:	2c13      	cmp	r4, #19
 328:	d915      	bls.n	356 <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
 32a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
 32c:	2250      	movs	r2, #80	; 0x50
 32e:	498a      	ldr	r1, [pc, #552]	; (558 <adc_init+0x354>)
 330:	a802      	add	r0, sp, #8
 332:	4b88      	ldr	r3, [pc, #544]	; (554 <adc_init+0x350>)
 334:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
 336:	2c13      	cmp	r4, #19
 338:	d8cd      	bhi.n	2d6 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
 33a:	00a4      	lsls	r4, r4, #2
 33c:	ab02      	add	r3, sp, #8
 33e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 340:	a901      	add	r1, sp, #4
 342:	2300      	movs	r3, #0
 344:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
 346:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
 348:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
 34a:	3301      	adds	r3, #1
 34c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
 34e:	b2c0      	uxtb	r0, r0
 350:	4b82      	ldr	r3, [pc, #520]	; (55c <adc_init+0x358>)
 352:	4798      	blx	r3
 354:	e7bf      	b.n	2d6 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
 356:	00a4      	lsls	r4, r4, #2
 358:	ab02      	add	r3, sp, #8
 35a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 35c:	a901      	add	r1, sp, #4
 35e:	2300      	movs	r3, #0
 360:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
 362:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
 364:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
 366:	3301      	adds	r3, #1
 368:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
 36a:	b2c0      	uxtb	r0, r0
 36c:	4b7b      	ldr	r3, [pc, #492]	; (55c <adc_init+0x358>)
 36e:	4798      	blx	r3
 370:	e7db      	b.n	32a <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
 372:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
 374:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
 376:	2102      	movs	r1, #2
 378:	e01a      	b.n	3b0 <adc_init+0x1ac>
		adjres = config->divide_result;
 37a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
 37c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
 37e:	2410      	movs	r4, #16
 380:	e016      	b.n	3b0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
 382:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
 384:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
 386:	2101      	movs	r1, #1
 388:	e012      	b.n	3b0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
 38a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
 38c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
 38e:	2100      	movs	r1, #0
 390:	e00e      	b.n	3b0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
 392:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
 394:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
 396:	2100      	movs	r1, #0
 398:	e00a      	b.n	3b0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
 39a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
 39c:	2420      	movs	r4, #32
	uint8_t adjres = 0;
 39e:	2100      	movs	r1, #0
 3a0:	e006      	b.n	3b0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
 3a2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
 3a4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
 3a6:	2100      	movs	r1, #0
 3a8:	e002      	b.n	3b0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
 3aa:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
 3ac:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
 3ae:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
 3b0:	0109      	lsls	r1, r1, #4
 3b2:	2270      	movs	r2, #112	; 0x70
 3b4:	400a      	ands	r2, r1
 3b6:	4313      	orrs	r3, r2
 3b8:	4642      	mov	r2, r8
 3ba:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
 3bc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
 3be:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
 3c0:	2b3f      	cmp	r3, #63	; 0x3f
 3c2:	d900      	bls.n	3c6 <adc_init+0x1c2>
 3c4:	e731      	b.n	22a <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
 3c6:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
 3c8:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
 3ca:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
 3cc:	b25b      	sxtb	r3, r3
 3ce:	2b00      	cmp	r3, #0
 3d0:	dbfb      	blt.n	3ca <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
 3d2:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
 3d4:	8872      	ldrh	r2, [r6, #2]
 3d6:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
 3d8:	2224      	movs	r2, #36	; 0x24
 3da:	5cb2      	ldrb	r2, [r6, r2]
 3dc:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
 3de:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
 3e0:	7d32      	ldrb	r2, [r6, #20]
 3e2:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
 3e4:	4313      	orrs	r3, r2
 3e6:	7cb2      	ldrb	r2, [r6, #18]
 3e8:	0052      	lsls	r2, r2, #1
 3ea:	4313      	orrs	r3, r2
 3ec:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
 3ee:	4642      	mov	r2, r8
 3f0:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
 3f2:	7e33      	ldrb	r3, [r6, #24]
 3f4:	2b00      	cmp	r3, #0
 3f6:	d020      	beq.n	43a <adc_init+0x236>
		switch (resolution) {
 3f8:	2c10      	cmp	r4, #16
 3fa:	d100      	bne.n	3fe <adc_init+0x1fa>
 3fc:	e0d6      	b.n	5ac <adc_init+0x3a8>
 3fe:	d800      	bhi.n	402 <adc_init+0x1fe>
 400:	e080      	b.n	504 <adc_init+0x300>
 402:	2c20      	cmp	r4, #32
 404:	d100      	bne.n	408 <adc_init+0x204>
 406:	e0b3      	b.n	570 <adc_init+0x36c>
 408:	2c30      	cmp	r4, #48	; 0x30
 40a:	d116      	bne.n	43a <adc_init+0x236>
			if (config->differential_mode &&
 40c:	7cf2      	ldrb	r2, [r6, #19]
 40e:	2a00      	cmp	r2, #0
 410:	d00a      	beq.n	428 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
 412:	69f2      	ldr	r2, [r6, #28]
 414:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
 416:	2017      	movs	r0, #23
			if (config->differential_mode &&
 418:	2aff      	cmp	r2, #255	; 0xff
 41a:	d900      	bls.n	41e <adc_init+0x21a>
 41c:	e705      	b.n	22a <adc_init+0x26>
					config->window.window_lower_value < -128 ||
 41e:	6a32      	ldr	r2, [r6, #32]
 420:	3280      	adds	r2, #128	; 0x80
 422:	2aff      	cmp	r2, #255	; 0xff
 424:	d900      	bls.n	428 <adc_init+0x224>
 426:	e700      	b.n	22a <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
 428:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
 42a:	69f2      	ldr	r2, [r6, #28]
 42c:	2aff      	cmp	r2, #255	; 0xff
 42e:	dd00      	ble.n	432 <adc_init+0x22e>
 430:	e6fb      	b.n	22a <adc_init+0x26>
 432:	6a32      	ldr	r2, [r6, #32]
 434:	2aff      	cmp	r2, #255	; 0xff
 436:	dd00      	ble.n	43a <adc_init+0x236>
 438:	e6f7      	b.n	22a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
 43a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
 43c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
 43e:	b252      	sxtb	r2, r2
 440:	2a00      	cmp	r2, #0
 442:	dbfb      	blt.n	43c <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
 444:	4642      	mov	r2, r8
 446:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
 448:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
 44a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
 44c:	b25b      	sxtb	r3, r3
 44e:	2b00      	cmp	r3, #0
 450:	dbfb      	blt.n	44a <adc_init+0x246>
	adc_module->WINLT.reg =
 452:	8bb3      	ldrh	r3, [r6, #28]
 454:	4642      	mov	r2, r8
 456:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
 458:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
 45a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
 45c:	b25b      	sxtb	r3, r3
 45e:	2b00      	cmp	r3, #0
 460:	dbfb      	blt.n	45a <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
 462:	8c33      	ldrh	r3, [r6, #32]
 464:	4642      	mov	r2, r8
 466:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
 468:	232c      	movs	r3, #44	; 0x2c
 46a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
 46c:	2b00      	cmp	r3, #0
 46e:	d005      	beq.n	47c <adc_init+0x278>
		inputs_to_scan--;
 470:	3b01      	subs	r3, #1
 472:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
 474:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
 476:	2b0f      	cmp	r3, #15
 478:	d900      	bls.n	47c <adc_init+0x278>
 47a:	e6d6      	b.n	22a <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
 47c:	222b      	movs	r2, #43	; 0x2b
 47e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
 480:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
 482:	290f      	cmp	r1, #15
 484:	d900      	bls.n	488 <adc_init+0x284>
 486:	e6d0      	b.n	22a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
 488:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
 48a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
 48c:	b252      	sxtb	r2, r2
 48e:	2a00      	cmp	r2, #0
 490:	dbfb      	blt.n	48a <adc_init+0x286>
			config->negative_input |
 492:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
 494:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
 496:	4302      	orrs	r2, r0
 498:	68b0      	ldr	r0, [r6, #8]
 49a:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
 49c:	0509      	lsls	r1, r1, #20
			config->negative_input |
 49e:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
 4a0:	041b      	lsls	r3, r3, #16
			config->negative_input |
 4a2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
 4a4:	4642      	mov	r2, r8
 4a6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
 4a8:	232a      	movs	r3, #42	; 0x2a
 4aa:	5cf3      	ldrb	r3, [r6, r3]
 4ac:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
 4ae:	230f      	movs	r3, #15
 4b0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
 4b2:	3315      	adds	r3, #21
 4b4:	5cf3      	ldrb	r3, [r6, r3]
 4b6:	2b00      	cmp	r3, #0
 4b8:	d012      	beq.n	4e0 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
 4ba:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 4bc:	4a29      	ldr	r2, [pc, #164]	; (564 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
 4be:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
 4c0:	4293      	cmp	r3, r2
 4c2:	d900      	bls.n	4c6 <adc_init+0x2c2>
 4c4:	e6b1      	b.n	22a <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
 4c6:	4642      	mov	r2, r8
 4c8:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
 4ca:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 4cc:	2380      	movs	r3, #128	; 0x80
 4ce:	011b      	lsls	r3, r3, #4
 4d0:	18d3      	adds	r3, r2, r3
 4d2:	4924      	ldr	r1, [pc, #144]	; (564 <adc_init+0x360>)
 4d4:	b29b      	uxth	r3, r3
 4d6:	428b      	cmp	r3, r1
 4d8:	d900      	bls.n	4dc <adc_init+0x2d8>
 4da:	e6a6      	b.n	22a <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
 4dc:	4643      	mov	r3, r8
 4de:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
 4e0:	4b21      	ldr	r3, [pc, #132]	; (568 <adc_init+0x364>)
 4e2:	681b      	ldr	r3, [r3, #0]
 4e4:	015b      	lsls	r3, r3, #5
 4e6:	22e0      	movs	r2, #224	; 0xe0
 4e8:	00d2      	lsls	r2, r2, #3
 4ea:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
 4ec:	4a1f      	ldr	r2, [pc, #124]	; (56c <adc_init+0x368>)
 4ee:	6851      	ldr	r1, [r2, #4]
 4f0:	0149      	lsls	r1, r1, #5
 4f2:	6812      	ldr	r2, [r2, #0]
 4f4:	0ed2      	lsrs	r2, r2, #27
 4f6:	430a      	orrs	r2, r1
 4f8:	b2d2      	uxtb	r2, r2
			) |
 4fa:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
 4fc:	4642      	mov	r2, r8
 4fe:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
 500:	2000      	movs	r0, #0
 502:	e692      	b.n	22a <adc_init+0x26>
		switch (resolution) {
 504:	2c00      	cmp	r4, #0
 506:	d198      	bne.n	43a <adc_init+0x236>
			if (config->differential_mode &&
 508:	7cf2      	ldrb	r2, [r6, #19]
 50a:	2a00      	cmp	r2, #0
 50c:	d00f      	beq.n	52e <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
 50e:	69f2      	ldr	r2, [r6, #28]
 510:	2180      	movs	r1, #128	; 0x80
 512:	0109      	lsls	r1, r1, #4
 514:	468c      	mov	ip, r1
 516:	4462      	add	r2, ip
			if (config->differential_mode &&
 518:	4912      	ldr	r1, [pc, #72]	; (564 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
 51a:	2017      	movs	r0, #23
			if (config->differential_mode &&
 51c:	428a      	cmp	r2, r1
 51e:	d900      	bls.n	522 <adc_init+0x31e>
 520:	e683      	b.n	22a <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
 522:	6a32      	ldr	r2, [r6, #32]
 524:	4462      	add	r2, ip
 526:	490f      	ldr	r1, [pc, #60]	; (564 <adc_init+0x360>)
 528:	428a      	cmp	r2, r1
 52a:	d900      	bls.n	52e <adc_init+0x32a>
 52c:	e67d      	b.n	22a <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
 52e:	4a0d      	ldr	r2, [pc, #52]	; (564 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
 530:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
 532:	69f1      	ldr	r1, [r6, #28]
 534:	4291      	cmp	r1, r2
 536:	dd00      	ble.n	53a <adc_init+0x336>
 538:	e677      	b.n	22a <adc_init+0x26>
 53a:	6a31      	ldr	r1, [r6, #32]
 53c:	4291      	cmp	r1, r2
 53e:	dd00      	ble.n	542 <adc_init+0x33e>
 540:	e673      	b.n	22a <adc_init+0x26>
 542:	e77a      	b.n	43a <adc_init+0x236>
 544:	40000400 	.word	0x40000400
 548:	40000800 	.word	0x40000800
 54c:	00000941 	.word	0x00000941
 550:	000008b5 	.word	0x000008b5
 554:	00000c69 	.word	0x00000c69
 558:	00000d50 	.word	0x00000d50
 55c:	00000a05 	.word	0x00000a05
 560:	00000c7c 	.word	0x00000c7c
 564:	00000fff 	.word	0x00000fff
 568:	00806024 	.word	0x00806024
 56c:	00806020 	.word	0x00806020
			if (config->differential_mode &&
 570:	7cf2      	ldrb	r2, [r6, #19]
 572:	2a00      	cmp	r2, #0
 574:	d00f      	beq.n	596 <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
 576:	69f2      	ldr	r2, [r6, #28]
 578:	2180      	movs	r1, #128	; 0x80
 57a:	0089      	lsls	r1, r1, #2
 57c:	468c      	mov	ip, r1
 57e:	4462      	add	r2, ip
			if (config->differential_mode &&
 580:	491a      	ldr	r1, [pc, #104]	; (5ec <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
 582:	2017      	movs	r0, #23
			if (config->differential_mode &&
 584:	428a      	cmp	r2, r1
 586:	d900      	bls.n	58a <adc_init+0x386>
 588:	e64f      	b.n	22a <adc_init+0x26>
					config->window.window_lower_value < -512 ||
 58a:	6a32      	ldr	r2, [r6, #32]
 58c:	4462      	add	r2, ip
 58e:	4917      	ldr	r1, [pc, #92]	; (5ec <adc_init+0x3e8>)
 590:	428a      	cmp	r2, r1
 592:	d900      	bls.n	596 <adc_init+0x392>
 594:	e649      	b.n	22a <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
 596:	4a15      	ldr	r2, [pc, #84]	; (5ec <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
 598:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
 59a:	69f1      	ldr	r1, [r6, #28]
 59c:	4291      	cmp	r1, r2
 59e:	dd00      	ble.n	5a2 <adc_init+0x39e>
 5a0:	e643      	b.n	22a <adc_init+0x26>
 5a2:	6a31      	ldr	r1, [r6, #32]
 5a4:	4291      	cmp	r1, r2
 5a6:	dd00      	ble.n	5aa <adc_init+0x3a6>
 5a8:	e63f      	b.n	22a <adc_init+0x26>
 5aa:	e746      	b.n	43a <adc_init+0x236>
			if (config->differential_mode &&
 5ac:	7cf2      	ldrb	r2, [r6, #19]
 5ae:	2a00      	cmp	r2, #0
 5b0:	d00f      	beq.n	5d2 <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
 5b2:	69f2      	ldr	r2, [r6, #28]
 5b4:	2180      	movs	r1, #128	; 0x80
 5b6:	0209      	lsls	r1, r1, #8
 5b8:	468c      	mov	ip, r1
 5ba:	4462      	add	r2, ip
			if (config->differential_mode &&
 5bc:	490c      	ldr	r1, [pc, #48]	; (5f0 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
 5be:	2017      	movs	r0, #23
			if (config->differential_mode &&
 5c0:	428a      	cmp	r2, r1
 5c2:	d900      	bls.n	5c6 <adc_init+0x3c2>
 5c4:	e631      	b.n	22a <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
 5c6:	6a32      	ldr	r2, [r6, #32]
 5c8:	4462      	add	r2, ip
 5ca:	4909      	ldr	r1, [pc, #36]	; (5f0 <adc_init+0x3ec>)
 5cc:	428a      	cmp	r2, r1
 5ce:	d900      	bls.n	5d2 <adc_init+0x3ce>
 5d0:	e62b      	b.n	22a <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
 5d2:	4a07      	ldr	r2, [pc, #28]	; (5f0 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
 5d4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
 5d6:	69f1      	ldr	r1, [r6, #28]
 5d8:	4291      	cmp	r1, r2
 5da:	dd00      	ble.n	5de <adc_init+0x3da>
 5dc:	e625      	b.n	22a <adc_init+0x26>
 5de:	6a31      	ldr	r1, [r6, #32]
 5e0:	4291      	cmp	r1, r2
 5e2:	dd00      	ble.n	5e6 <adc_init+0x3e2>
 5e4:	e621      	b.n	22a <adc_init+0x26>
 5e6:	e728      	b.n	43a <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
 5e8:	2017      	movs	r0, #23
 5ea:	e61e      	b.n	22a <adc_init+0x26>
 5ec:	000003ff 	.word	0x000003ff
 5f0:	0000ffff 	.word	0x0000ffff

000005f4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 5f4:	b500      	push	{lr}
 5f6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
 5f8:	ab01      	add	r3, sp, #4
 5fa:	2280      	movs	r2, #128	; 0x80
 5fc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 5fe:	780a      	ldrb	r2, [r1, #0]
 600:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 602:	784a      	ldrb	r2, [r1, #1]
 604:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 606:	788a      	ldrb	r2, [r1, #2]
 608:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 60a:	0019      	movs	r1, r3
 60c:	4b01      	ldr	r3, [pc, #4]	; (614 <port_pin_set_config+0x20>)
 60e:	4798      	blx	r3
}
 610:	b003      	add	sp, #12
 612:	bd00      	pop	{pc}
 614:	00000a05 	.word	0x00000a05

00000618 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 618:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 61a:	490c      	ldr	r1, [pc, #48]	; (64c <system_clock_source_osc8m_set_config+0x34>)
 61c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 61e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 620:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 622:	7840      	ldrb	r0, [r0, #1]
 624:	2201      	movs	r2, #1
 626:	4010      	ands	r0, r2
 628:	0180      	lsls	r0, r0, #6
 62a:	2640      	movs	r6, #64	; 0x40
 62c:	43b3      	bics	r3, r6
 62e:	4303      	orrs	r3, r0
 630:	402a      	ands	r2, r5
 632:	01d2      	lsls	r2, r2, #7
 634:	2080      	movs	r0, #128	; 0x80
 636:	4383      	bics	r3, r0
 638:	4313      	orrs	r3, r2
 63a:	2203      	movs	r2, #3
 63c:	4022      	ands	r2, r4
 63e:	0212      	lsls	r2, r2, #8
 640:	4803      	ldr	r0, [pc, #12]	; (650 <system_clock_source_osc8m_set_config+0x38>)
 642:	4003      	ands	r3, r0
 644:	4313      	orrs	r3, r2
 646:	620b      	str	r3, [r1, #32]
}
 648:	bd70      	pop	{r4, r5, r6, pc}
 64a:	46c0      	nop			; (mov r8, r8)
 64c:	40000800 	.word	0x40000800
 650:	fffffcff 	.word	0xfffffcff

00000654 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 654:	2808      	cmp	r0, #8
 656:	d803      	bhi.n	660 <system_clock_source_enable+0xc>
 658:	0080      	lsls	r0, r0, #2
 65a:	4b25      	ldr	r3, [pc, #148]	; (6f0 <system_clock_source_enable+0x9c>)
 65c:	581b      	ldr	r3, [r3, r0]
 65e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 660:	2017      	movs	r0, #23
 662:	e044      	b.n	6ee <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 664:	4a23      	ldr	r2, [pc, #140]	; (6f4 <system_clock_source_enable+0xa0>)
 666:	6a13      	ldr	r3, [r2, #32]
 668:	2102      	movs	r1, #2
 66a:	430b      	orrs	r3, r1
 66c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 66e:	2000      	movs	r0, #0
 670:	e03d      	b.n	6ee <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 672:	4a20      	ldr	r2, [pc, #128]	; (6f4 <system_clock_source_enable+0xa0>)
 674:	6993      	ldr	r3, [r2, #24]
 676:	2102      	movs	r1, #2
 678:	430b      	orrs	r3, r1
 67a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 67c:	2000      	movs	r0, #0
		break;
 67e:	e036      	b.n	6ee <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 680:	4a1c      	ldr	r2, [pc, #112]	; (6f4 <system_clock_source_enable+0xa0>)
 682:	8a13      	ldrh	r3, [r2, #16]
 684:	2102      	movs	r1, #2
 686:	430b      	orrs	r3, r1
 688:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 68a:	2000      	movs	r0, #0
		break;
 68c:	e02f      	b.n	6ee <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 68e:	4a19      	ldr	r2, [pc, #100]	; (6f4 <system_clock_source_enable+0xa0>)
 690:	8a93      	ldrh	r3, [r2, #20]
 692:	2102      	movs	r1, #2
 694:	430b      	orrs	r3, r1
 696:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 698:	2000      	movs	r0, #0
		break;
 69a:	e028      	b.n	6ee <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 69c:	4916      	ldr	r1, [pc, #88]	; (6f8 <system_clock_source_enable+0xa4>)
 69e:	680b      	ldr	r3, [r1, #0]
 6a0:	2202      	movs	r2, #2
 6a2:	4313      	orrs	r3, r2
 6a4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 6a6:	4b13      	ldr	r3, [pc, #76]	; (6f4 <system_clock_source_enable+0xa0>)
 6a8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 6aa:	0019      	movs	r1, r3
 6ac:	320e      	adds	r2, #14
 6ae:	68cb      	ldr	r3, [r1, #12]
 6b0:	421a      	tst	r2, r3
 6b2:	d0fc      	beq.n	6ae <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 6b4:	4a10      	ldr	r2, [pc, #64]	; (6f8 <system_clock_source_enable+0xa4>)
 6b6:	6891      	ldr	r1, [r2, #8]
 6b8:	4b0e      	ldr	r3, [pc, #56]	; (6f4 <system_clock_source_enable+0xa0>)
 6ba:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 6bc:	6852      	ldr	r2, [r2, #4]
 6be:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 6c0:	2200      	movs	r2, #0
 6c2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 6c4:	0019      	movs	r1, r3
 6c6:	3210      	adds	r2, #16
 6c8:	68cb      	ldr	r3, [r1, #12]
 6ca:	421a      	tst	r2, r3
 6cc:	d0fc      	beq.n	6c8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 6ce:	4b0a      	ldr	r3, [pc, #40]	; (6f8 <system_clock_source_enable+0xa4>)
 6d0:	681b      	ldr	r3, [r3, #0]
 6d2:	b29b      	uxth	r3, r3
 6d4:	4a07      	ldr	r2, [pc, #28]	; (6f4 <system_clock_source_enable+0xa0>)
 6d6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 6d8:	2000      	movs	r0, #0
 6da:	e008      	b.n	6ee <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 6dc:	4905      	ldr	r1, [pc, #20]	; (6f4 <system_clock_source_enable+0xa0>)
 6de:	2244      	movs	r2, #68	; 0x44
 6e0:	5c8b      	ldrb	r3, [r1, r2]
 6e2:	2002      	movs	r0, #2
 6e4:	4303      	orrs	r3, r0
 6e6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 6e8:	2000      	movs	r0, #0
		break;
 6ea:	e000      	b.n	6ee <system_clock_source_enable+0x9a>
		return STATUS_OK;
 6ec:	2000      	movs	r0, #0
}
 6ee:	4770      	bx	lr
 6f0:	00000da0 	.word	0x00000da0
 6f4:	40000800 	.word	0x40000800
 6f8:	20000028 	.word	0x20000028

000006fc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 6fc:	b530      	push	{r4, r5, lr}
 6fe:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 700:	22c2      	movs	r2, #194	; 0xc2
 702:	00d2      	lsls	r2, r2, #3
 704:	4b1a      	ldr	r3, [pc, #104]	; (770 <system_clock_init+0x74>)
 706:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 708:	4a1a      	ldr	r2, [pc, #104]	; (774 <system_clock_init+0x78>)
 70a:	6853      	ldr	r3, [r2, #4]
 70c:	211e      	movs	r1, #30
 70e:	438b      	bics	r3, r1
 710:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 712:	2301      	movs	r3, #1
 714:	466a      	mov	r2, sp
 716:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 718:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 71a:	4d17      	ldr	r5, [pc, #92]	; (778 <system_clock_init+0x7c>)
 71c:	b2e0      	uxtb	r0, r4
 71e:	4669      	mov	r1, sp
 720:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 722:	3401      	adds	r4, #1
 724:	2c25      	cmp	r4, #37	; 0x25
 726:	d1f9      	bne.n	71c <system_clock_init+0x20>
	config->run_in_standby  = false;
 728:	a803      	add	r0, sp, #12
 72a:	2400      	movs	r4, #0
 72c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 72e:	2501      	movs	r5, #1
 730:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 732:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 734:	4b11      	ldr	r3, [pc, #68]	; (77c <system_clock_init+0x80>)
 736:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 738:	2006      	movs	r0, #6
 73a:	4b11      	ldr	r3, [pc, #68]	; (780 <system_clock_init+0x84>)
 73c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 73e:	4b11      	ldr	r3, [pc, #68]	; (784 <system_clock_init+0x88>)
 740:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 742:	4b11      	ldr	r3, [pc, #68]	; (788 <system_clock_init+0x8c>)
 744:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 746:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 748:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 74a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 74c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 74e:	466b      	mov	r3, sp
 750:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 752:	2306      	movs	r3, #6
 754:	466a      	mov	r2, sp
 756:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 758:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 75a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 75c:	4669      	mov	r1, sp
 75e:	2000      	movs	r0, #0
 760:	4b0a      	ldr	r3, [pc, #40]	; (78c <system_clock_init+0x90>)
 762:	4798      	blx	r3
 764:	2000      	movs	r0, #0
 766:	4b0a      	ldr	r3, [pc, #40]	; (790 <system_clock_init+0x94>)
 768:	4798      	blx	r3
#endif
}
 76a:	b005      	add	sp, #20
 76c:	bd30      	pop	{r4, r5, pc}
 76e:	46c0      	nop			; (mov r8, r8)
 770:	40000800 	.word	0x40000800
 774:	41004000 	.word	0x41004000
 778:	00000941 	.word	0x00000941
 77c:	00000619 	.word	0x00000619
 780:	00000655 	.word	0x00000655
 784:	00000795 	.word	0x00000795
 788:	40000400 	.word	0x40000400
 78c:	000007b9 	.word	0x000007b9
 790:	00000871 	.word	0x00000871

00000794 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 794:	4a06      	ldr	r2, [pc, #24]	; (7b0 <system_gclk_init+0x1c>)
 796:	6993      	ldr	r3, [r2, #24]
 798:	2108      	movs	r1, #8
 79a:	430b      	orrs	r3, r1
 79c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 79e:	2201      	movs	r2, #1
 7a0:	4b04      	ldr	r3, [pc, #16]	; (7b4 <system_gclk_init+0x20>)
 7a2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 7a4:	0019      	movs	r1, r3
 7a6:	780b      	ldrb	r3, [r1, #0]
 7a8:	4213      	tst	r3, r2
 7aa:	d1fc      	bne.n	7a6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 7ac:	4770      	bx	lr
 7ae:	46c0      	nop			; (mov r8, r8)
 7b0:	40000400 	.word	0x40000400
 7b4:	40000c00 	.word	0x40000c00

000007b8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 7b8:	b570      	push	{r4, r5, r6, lr}
 7ba:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 7bc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 7be:	780d      	ldrb	r5, [r1, #0]
 7c0:	022d      	lsls	r5, r5, #8
 7c2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 7c4:	784b      	ldrb	r3, [r1, #1]
 7c6:	2b00      	cmp	r3, #0
 7c8:	d002      	beq.n	7d0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 7ca:	2380      	movs	r3, #128	; 0x80
 7cc:	02db      	lsls	r3, r3, #11
 7ce:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 7d0:	7a4b      	ldrb	r3, [r1, #9]
 7d2:	2b00      	cmp	r3, #0
 7d4:	d002      	beq.n	7dc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 7d6:	2380      	movs	r3, #128	; 0x80
 7d8:	031b      	lsls	r3, r3, #12
 7da:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 7dc:	6848      	ldr	r0, [r1, #4]
 7de:	2801      	cmp	r0, #1
 7e0:	d910      	bls.n	804 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 7e2:	1e43      	subs	r3, r0, #1
 7e4:	4218      	tst	r0, r3
 7e6:	d134      	bne.n	852 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 7e8:	2802      	cmp	r0, #2
 7ea:	d930      	bls.n	84e <system_gclk_gen_set_config+0x96>
 7ec:	2302      	movs	r3, #2
 7ee:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 7f0:	3201      	adds	r2, #1
						mask <<= 1) {
 7f2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 7f4:	4298      	cmp	r0, r3
 7f6:	d8fb      	bhi.n	7f0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 7f8:	0212      	lsls	r2, r2, #8
 7fa:	4332      	orrs	r2, r6
 7fc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 7fe:	2380      	movs	r3, #128	; 0x80
 800:	035b      	lsls	r3, r3, #13
 802:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 804:	7a0b      	ldrb	r3, [r1, #8]
 806:	2b00      	cmp	r3, #0
 808:	d002      	beq.n	810 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 80a:	2380      	movs	r3, #128	; 0x80
 80c:	039b      	lsls	r3, r3, #14
 80e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 810:	4a13      	ldr	r2, [pc, #76]	; (860 <system_gclk_gen_set_config+0xa8>)
 812:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 814:	b25b      	sxtb	r3, r3
 816:	2b00      	cmp	r3, #0
 818:	dbfb      	blt.n	812 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 81a:	4b12      	ldr	r3, [pc, #72]	; (864 <system_gclk_gen_set_config+0xac>)
 81c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 81e:	4b12      	ldr	r3, [pc, #72]	; (868 <system_gclk_gen_set_config+0xb0>)
 820:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 822:	4a0f      	ldr	r2, [pc, #60]	; (860 <system_gclk_gen_set_config+0xa8>)
 824:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 826:	b25b      	sxtb	r3, r3
 828:	2b00      	cmp	r3, #0
 82a:	dbfb      	blt.n	824 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 82c:	4b0c      	ldr	r3, [pc, #48]	; (860 <system_gclk_gen_set_config+0xa8>)
 82e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 830:	001a      	movs	r2, r3
 832:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 834:	b25b      	sxtb	r3, r3
 836:	2b00      	cmp	r3, #0
 838:	dbfb      	blt.n	832 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 83a:	4a09      	ldr	r2, [pc, #36]	; (860 <system_gclk_gen_set_config+0xa8>)
 83c:	6853      	ldr	r3, [r2, #4]
 83e:	2180      	movs	r1, #128	; 0x80
 840:	0249      	lsls	r1, r1, #9
 842:	400b      	ands	r3, r1
 844:	431d      	orrs	r5, r3
 846:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 848:	4b08      	ldr	r3, [pc, #32]	; (86c <system_gclk_gen_set_config+0xb4>)
 84a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 84c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 84e:	2200      	movs	r2, #0
 850:	e7d2      	b.n	7f8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 852:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 854:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 856:	2380      	movs	r3, #128	; 0x80
 858:	029b      	lsls	r3, r3, #10
 85a:	431d      	orrs	r5, r3
 85c:	e7d2      	b.n	804 <system_gclk_gen_set_config+0x4c>
 85e:	46c0      	nop			; (mov r8, r8)
 860:	40000c00 	.word	0x40000c00
 864:	00000115 	.word	0x00000115
 868:	40000c08 	.word	0x40000c08
 86c:	00000155 	.word	0x00000155

00000870 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 870:	b510      	push	{r4, lr}
 872:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 874:	4a0b      	ldr	r2, [pc, #44]	; (8a4 <system_gclk_gen_enable+0x34>)
 876:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 878:	b25b      	sxtb	r3, r3
 87a:	2b00      	cmp	r3, #0
 87c:	dbfb      	blt.n	876 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 87e:	4b0a      	ldr	r3, [pc, #40]	; (8a8 <system_gclk_gen_enable+0x38>)
 880:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 882:	4b0a      	ldr	r3, [pc, #40]	; (8ac <system_gclk_gen_enable+0x3c>)
 884:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 886:	4a07      	ldr	r2, [pc, #28]	; (8a4 <system_gclk_gen_enable+0x34>)
 888:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 88a:	b25b      	sxtb	r3, r3
 88c:	2b00      	cmp	r3, #0
 88e:	dbfb      	blt.n	888 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 890:	4a04      	ldr	r2, [pc, #16]	; (8a4 <system_gclk_gen_enable+0x34>)
 892:	6851      	ldr	r1, [r2, #4]
 894:	2380      	movs	r3, #128	; 0x80
 896:	025b      	lsls	r3, r3, #9
 898:	430b      	orrs	r3, r1
 89a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 89c:	4b04      	ldr	r3, [pc, #16]	; (8b0 <system_gclk_gen_enable+0x40>)
 89e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 8a0:	bd10      	pop	{r4, pc}
 8a2:	46c0      	nop			; (mov r8, r8)
 8a4:	40000c00 	.word	0x40000c00
 8a8:	00000115 	.word	0x00000115
 8ac:	40000c04 	.word	0x40000c04
 8b0:	00000155 	.word	0x00000155

000008b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 8b4:	b510      	push	{r4, lr}
 8b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 8b8:	4b06      	ldr	r3, [pc, #24]	; (8d4 <system_gclk_chan_enable+0x20>)
 8ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 8bc:	4b06      	ldr	r3, [pc, #24]	; (8d8 <system_gclk_chan_enable+0x24>)
 8be:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 8c0:	4a06      	ldr	r2, [pc, #24]	; (8dc <system_gclk_chan_enable+0x28>)
 8c2:	8853      	ldrh	r3, [r2, #2]
 8c4:	2180      	movs	r1, #128	; 0x80
 8c6:	01c9      	lsls	r1, r1, #7
 8c8:	430b      	orrs	r3, r1
 8ca:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 8cc:	4b04      	ldr	r3, [pc, #16]	; (8e0 <system_gclk_chan_enable+0x2c>)
 8ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 8d0:	bd10      	pop	{r4, pc}
 8d2:	46c0      	nop			; (mov r8, r8)
 8d4:	00000115 	.word	0x00000115
 8d8:	40000c02 	.word	0x40000c02
 8dc:	40000c00 	.word	0x40000c00
 8e0:	00000155 	.word	0x00000155

000008e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 8e4:	b510      	push	{r4, lr}
 8e6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 8e8:	4b0f      	ldr	r3, [pc, #60]	; (928 <system_gclk_chan_disable+0x44>)
 8ea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 8ec:	4b0f      	ldr	r3, [pc, #60]	; (92c <system_gclk_chan_disable+0x48>)
 8ee:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 8f0:	4a0f      	ldr	r2, [pc, #60]	; (930 <system_gclk_chan_disable+0x4c>)
 8f2:	8853      	ldrh	r3, [r2, #2]
 8f4:	051b      	lsls	r3, r3, #20
 8f6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 8f8:	8853      	ldrh	r3, [r2, #2]
 8fa:	490e      	ldr	r1, [pc, #56]	; (934 <system_gclk_chan_disable+0x50>)
 8fc:	400b      	ands	r3, r1
 8fe:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 900:	8853      	ldrh	r3, [r2, #2]
 902:	490d      	ldr	r1, [pc, #52]	; (938 <system_gclk_chan_disable+0x54>)
 904:	400b      	ands	r3, r1
 906:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 908:	0011      	movs	r1, r2
 90a:	2280      	movs	r2, #128	; 0x80
 90c:	01d2      	lsls	r2, r2, #7
 90e:	884b      	ldrh	r3, [r1, #2]
 910:	4213      	tst	r3, r2
 912:	d1fc      	bne.n	90e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 914:	4906      	ldr	r1, [pc, #24]	; (930 <system_gclk_chan_disable+0x4c>)
 916:	884a      	ldrh	r2, [r1, #2]
 918:	0203      	lsls	r3, r0, #8
 91a:	4806      	ldr	r0, [pc, #24]	; (934 <system_gclk_chan_disable+0x50>)
 91c:	4002      	ands	r2, r0
 91e:	4313      	orrs	r3, r2
 920:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 922:	4b06      	ldr	r3, [pc, #24]	; (93c <system_gclk_chan_disable+0x58>)
 924:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 926:	bd10      	pop	{r4, pc}
 928:	00000115 	.word	0x00000115
 92c:	40000c02 	.word	0x40000c02
 930:	40000c00 	.word	0x40000c00
 934:	fffff0ff 	.word	0xfffff0ff
 938:	ffffbfff 	.word	0xffffbfff
 93c:	00000155 	.word	0x00000155

00000940 <system_gclk_chan_set_config>:
{
 940:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 942:	780c      	ldrb	r4, [r1, #0]
 944:	0224      	lsls	r4, r4, #8
 946:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 948:	4b02      	ldr	r3, [pc, #8]	; (954 <system_gclk_chan_set_config+0x14>)
 94a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 94c:	b2a4      	uxth	r4, r4
 94e:	4b02      	ldr	r3, [pc, #8]	; (958 <system_gclk_chan_set_config+0x18>)
 950:	805c      	strh	r4, [r3, #2]
}
 952:	bd10      	pop	{r4, pc}
 954:	000008e5 	.word	0x000008e5
 958:	40000c00 	.word	0x40000c00

0000095c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 95c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 95e:	78d3      	ldrb	r3, [r2, #3]
 960:	2b00      	cmp	r3, #0
 962:	d135      	bne.n	9d0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 964:	7813      	ldrb	r3, [r2, #0]
 966:	2b80      	cmp	r3, #128	; 0x80
 968:	d029      	beq.n	9be <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 96a:	061b      	lsls	r3, r3, #24
 96c:	2480      	movs	r4, #128	; 0x80
 96e:	0264      	lsls	r4, r4, #9
 970:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 972:	7854      	ldrb	r4, [r2, #1]
 974:	2502      	movs	r5, #2
 976:	43ac      	bics	r4, r5
 978:	d106      	bne.n	988 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 97a:	7894      	ldrb	r4, [r2, #2]
 97c:	2c00      	cmp	r4, #0
 97e:	d120      	bne.n	9c2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 980:	2480      	movs	r4, #128	; 0x80
 982:	02a4      	lsls	r4, r4, #10
 984:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 986:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 988:	7854      	ldrb	r4, [r2, #1]
 98a:	3c01      	subs	r4, #1
 98c:	2c01      	cmp	r4, #1
 98e:	d91c      	bls.n	9ca <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 990:	040d      	lsls	r5, r1, #16
 992:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 994:	24a0      	movs	r4, #160	; 0xa0
 996:	05e4      	lsls	r4, r4, #23
 998:	432c      	orrs	r4, r5
 99a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 99c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 99e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 9a0:	24d0      	movs	r4, #208	; 0xd0
 9a2:	0624      	lsls	r4, r4, #24
 9a4:	432c      	orrs	r4, r5
 9a6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 9a8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 9aa:	78d4      	ldrb	r4, [r2, #3]
 9ac:	2c00      	cmp	r4, #0
 9ae:	d122      	bne.n	9f6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 9b0:	035b      	lsls	r3, r3, #13
 9b2:	d51c      	bpl.n	9ee <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 9b4:	7893      	ldrb	r3, [r2, #2]
 9b6:	2b01      	cmp	r3, #1
 9b8:	d01e      	beq.n	9f8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 9ba:	6141      	str	r1, [r0, #20]
 9bc:	e017      	b.n	9ee <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 9be:	2300      	movs	r3, #0
 9c0:	e7d7      	b.n	972 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 9c2:	24c0      	movs	r4, #192	; 0xc0
 9c4:	02e4      	lsls	r4, r4, #11
 9c6:	4323      	orrs	r3, r4
 9c8:	e7dd      	b.n	986 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 9ca:	4c0d      	ldr	r4, [pc, #52]	; (a00 <_system_pinmux_config+0xa4>)
 9cc:	4023      	ands	r3, r4
 9ce:	e7df      	b.n	990 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 9d0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 9d2:	040c      	lsls	r4, r1, #16
 9d4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 9d6:	23a0      	movs	r3, #160	; 0xa0
 9d8:	05db      	lsls	r3, r3, #23
 9da:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 9dc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 9de:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 9e0:	23d0      	movs	r3, #208	; 0xd0
 9e2:	061b      	lsls	r3, r3, #24
 9e4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 9e6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 9e8:	78d3      	ldrb	r3, [r2, #3]
 9ea:	2b00      	cmp	r3, #0
 9ec:	d103      	bne.n	9f6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 9ee:	7853      	ldrb	r3, [r2, #1]
 9f0:	3b01      	subs	r3, #1
 9f2:	2b01      	cmp	r3, #1
 9f4:	d902      	bls.n	9fc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 9f6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 9f8:	6181      	str	r1, [r0, #24]
 9fa:	e7f8      	b.n	9ee <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 9fc:	6081      	str	r1, [r0, #8]
}
 9fe:	e7fa      	b.n	9f6 <_system_pinmux_config+0x9a>
 a00:	fffbffff 	.word	0xfffbffff

00000a04 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 a04:	b510      	push	{r4, lr}
 a06:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 a08:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 a0a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 a0c:	2900      	cmp	r1, #0
 a0e:	d104      	bne.n	a1a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 a10:	0943      	lsrs	r3, r0, #5
 a12:	01db      	lsls	r3, r3, #7
 a14:	4905      	ldr	r1, [pc, #20]	; (a2c <system_pinmux_pin_set_config+0x28>)
 a16:	468c      	mov	ip, r1
 a18:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 a1a:	241f      	movs	r4, #31
 a1c:	4020      	ands	r0, r4
 a1e:	2101      	movs	r1, #1
 a20:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 a22:	0018      	movs	r0, r3
 a24:	4b02      	ldr	r3, [pc, #8]	; (a30 <system_pinmux_pin_set_config+0x2c>)
 a26:	4798      	blx	r3
}
 a28:	bd10      	pop	{r4, pc}
 a2a:	46c0      	nop			; (mov r8, r8)
 a2c:	41004400 	.word	0x41004400
 a30:	0000095d 	.word	0x0000095d

00000a34 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 a34:	4770      	bx	lr
	...

00000a38 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 a38:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 a3a:	4b05      	ldr	r3, [pc, #20]	; (a50 <system_init+0x18>)
 a3c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 a3e:	4b05      	ldr	r3, [pc, #20]	; (a54 <system_init+0x1c>)
 a40:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 a42:	4b05      	ldr	r3, [pc, #20]	; (a58 <system_init+0x20>)
 a44:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 a46:	4b05      	ldr	r3, [pc, #20]	; (a5c <system_init+0x24>)
 a48:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 a4a:	4b05      	ldr	r3, [pc, #20]	; (a60 <system_init+0x28>)
 a4c:	4798      	blx	r3
}
 a4e:	bd10      	pop	{r4, pc}
 a50:	000006fd 	.word	0x000006fd
 a54:	00000185 	.word	0x00000185
 a58:	00000a35 	.word	0x00000a35
 a5c:	00000a35 	.word	0x00000a35
 a60:	00000a35 	.word	0x00000a35

00000a64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 a64:	e7fe      	b.n	a64 <Dummy_Handler>
	...

00000a68 <Reset_Handler>:
{
 a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 a6a:	4a2a      	ldr	r2, [pc, #168]	; (b14 <Reset_Handler+0xac>)
 a6c:	4b2a      	ldr	r3, [pc, #168]	; (b18 <Reset_Handler+0xb0>)
 a6e:	429a      	cmp	r2, r3
 a70:	d011      	beq.n	a96 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 a72:	001a      	movs	r2, r3
 a74:	4b29      	ldr	r3, [pc, #164]	; (b1c <Reset_Handler+0xb4>)
 a76:	429a      	cmp	r2, r3
 a78:	d20d      	bcs.n	a96 <Reset_Handler+0x2e>
 a7a:	4a29      	ldr	r2, [pc, #164]	; (b20 <Reset_Handler+0xb8>)
 a7c:	3303      	adds	r3, #3
 a7e:	1a9b      	subs	r3, r3, r2
 a80:	089b      	lsrs	r3, r3, #2
 a82:	3301      	adds	r3, #1
 a84:	009b      	lsls	r3, r3, #2
 a86:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 a88:	4823      	ldr	r0, [pc, #140]	; (b18 <Reset_Handler+0xb0>)
 a8a:	4922      	ldr	r1, [pc, #136]	; (b14 <Reset_Handler+0xac>)
 a8c:	588c      	ldr	r4, [r1, r2]
 a8e:	5084      	str	r4, [r0, r2]
 a90:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 a92:	429a      	cmp	r2, r3
 a94:	d1fa      	bne.n	a8c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 a96:	4a23      	ldr	r2, [pc, #140]	; (b24 <Reset_Handler+0xbc>)
 a98:	4b23      	ldr	r3, [pc, #140]	; (b28 <Reset_Handler+0xc0>)
 a9a:	429a      	cmp	r2, r3
 a9c:	d20a      	bcs.n	ab4 <Reset_Handler+0x4c>
 a9e:	43d3      	mvns	r3, r2
 aa0:	4921      	ldr	r1, [pc, #132]	; (b28 <Reset_Handler+0xc0>)
 aa2:	185b      	adds	r3, r3, r1
 aa4:	2103      	movs	r1, #3
 aa6:	438b      	bics	r3, r1
 aa8:	3304      	adds	r3, #4
 aaa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 aac:	2100      	movs	r1, #0
 aae:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 ab0:	4293      	cmp	r3, r2
 ab2:	d1fc      	bne.n	aae <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 ab4:	4a1d      	ldr	r2, [pc, #116]	; (b2c <Reset_Handler+0xc4>)
 ab6:	21ff      	movs	r1, #255	; 0xff
 ab8:	4b1d      	ldr	r3, [pc, #116]	; (b30 <Reset_Handler+0xc8>)
 aba:	438b      	bics	r3, r1
 abc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 abe:	39fd      	subs	r1, #253	; 0xfd
 ac0:	2390      	movs	r3, #144	; 0x90
 ac2:	005b      	lsls	r3, r3, #1
 ac4:	4a1b      	ldr	r2, [pc, #108]	; (b34 <Reset_Handler+0xcc>)
 ac6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 ac8:	4a1b      	ldr	r2, [pc, #108]	; (b38 <Reset_Handler+0xd0>)
 aca:	78d3      	ldrb	r3, [r2, #3]
 acc:	2503      	movs	r5, #3
 ace:	43ab      	bics	r3, r5
 ad0:	2402      	movs	r4, #2
 ad2:	4323      	orrs	r3, r4
 ad4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 ad6:	78d3      	ldrb	r3, [r2, #3]
 ad8:	270c      	movs	r7, #12
 ada:	43bb      	bics	r3, r7
 adc:	2608      	movs	r6, #8
 ade:	4333      	orrs	r3, r6
 ae0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 ae2:	4b16      	ldr	r3, [pc, #88]	; (b3c <Reset_Handler+0xd4>)
 ae4:	7b98      	ldrb	r0, [r3, #14]
 ae6:	2230      	movs	r2, #48	; 0x30
 ae8:	4390      	bics	r0, r2
 aea:	2220      	movs	r2, #32
 aec:	4310      	orrs	r0, r2
 aee:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 af0:	7b99      	ldrb	r1, [r3, #14]
 af2:	43b9      	bics	r1, r7
 af4:	4331      	orrs	r1, r6
 af6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 af8:	7b9a      	ldrb	r2, [r3, #14]
 afa:	43aa      	bics	r2, r5
 afc:	4322      	orrs	r2, r4
 afe:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 b00:	4a0f      	ldr	r2, [pc, #60]	; (b40 <Reset_Handler+0xd8>)
 b02:	6853      	ldr	r3, [r2, #4]
 b04:	2180      	movs	r1, #128	; 0x80
 b06:	430b      	orrs	r3, r1
 b08:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 b0a:	4b0e      	ldr	r3, [pc, #56]	; (b44 <Reset_Handler+0xdc>)
 b0c:	4798      	blx	r3
        main();
 b0e:	4b0e      	ldr	r3, [pc, #56]	; (b48 <Reset_Handler+0xe0>)
 b10:	4798      	blx	r3
 b12:	e7fe      	b.n	b12 <Reset_Handler+0xaa>
 b14:	00000de4 	.word	0x00000de4
 b18:	20000000 	.word	0x20000000
 b1c:	20000004 	.word	0x20000004
 b20:	20000004 	.word	0x20000004
 b24:	20000004 	.word	0x20000004
 b28:	20000048 	.word	0x20000048
 b2c:	e000ed00 	.word	0xe000ed00
 b30:	00000000 	.word	0x00000000
 b34:	41007000 	.word	0x41007000
 b38:	41005000 	.word	0x41005000
 b3c:	41004800 	.word	0x41004800
 b40:	41004000 	.word	0x41004000
 b44:	00000c21 	.word	0x00000c21
 b48:	00000b9d 	.word	0x00000b9d

00000b4c <configure_adc>:
struct adc_module adc_instance;
//! [module_inst]

//! [setup]
void configure_adc(void)
{
 b4c:	b510      	push	{r4, lr}
 b4e:	b08c      	sub	sp, #48	; 0x30
//! [setup_config]
	struct adc_config config_adc;
//! [setup_config]
//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
 b50:	4668      	mov	r0, sp
 b52:	4b0e      	ldr	r3, [pc, #56]	; (b8c <configure_adc+0x40>)
 b54:	4798      	blx	r3

//! [setup_set_config]
#if (SAMC21)
	adc_init(&adc_instance, ADC1, &config_adc);
#else
	adc_init(&adc_instance, ADC, &config_adc);
 b56:	4c0e      	ldr	r4, [pc, #56]	; (b90 <configure_adc+0x44>)
 b58:	466a      	mov	r2, sp
 b5a:	490e      	ldr	r1, [pc, #56]	; (b94 <configure_adc+0x48>)
 b5c:	0020      	movs	r0, r4
 b5e:	4b0e      	ldr	r3, [pc, #56]	; (b98 <configure_adc+0x4c>)
 b60:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
 b62:	6822      	ldr	r2, [r4, #0]
 b64:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
 b66:	b25b      	sxtb	r3, r3
 b68:	2b00      	cmp	r3, #0
 b6a:	dbfb      	blt.n	b64 <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
 b6c:	230f      	movs	r3, #15
 b6e:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
 b70:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
 b72:	7813      	ldrb	r3, [r2, #0]
 b74:	2102      	movs	r1, #2
 b76:	430b      	orrs	r3, r1
 b78:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
 b7a:	4b05      	ldr	r3, [pc, #20]	; (b90 <configure_adc+0x44>)
 b7c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
 b7e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
 b80:	b25b      	sxtb	r3, r3
 b82:	2b00      	cmp	r3, #0
 b84:	dbfb      	blt.n	b7e <configure_adc+0x32>
//! [setup_set_config]

//! [setup_enable]
	adc_enable(&adc_instance);
//! [setup_enable]
}
 b86:	b00c      	add	sp, #48	; 0x30
 b88:	bd10      	pop	{r4, pc}
 b8a:	46c0      	nop			; (mov r8, r8)
 b8c:	000001bd 	.word	0x000001bd
 b90:	20000040 	.word	0x20000040
 b94:	42004000 	.word	0x42004000
 b98:	00000205 	.word	0x00000205

00000b9c <main>:
//! [setup]

int main(void)
{
 b9c:	b570      	push	{r4, r5, r6, lr}
	system_init();
 b9e:	4b1d      	ldr	r3, [pc, #116]	; (c14 <main+0x78>)
 ba0:	4798      	blx	r3

//! [setup_init]
	configure_adc();
 ba2:	4b1d      	ldr	r3, [pc, #116]	; (c18 <main+0x7c>)
 ba4:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
 ba6:	4b1d      	ldr	r3, [pc, #116]	; (c1c <main+0x80>)
 ba8:	681b      	ldr	r3, [r3, #0]
 baa:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
 bac:	b252      	sxtb	r2, r2
 bae:	2a00      	cmp	r2, #0
 bb0:	dbfb      	blt.n	baa <main+0xe>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
 bb2:	7b1a      	ldrb	r2, [r3, #12]
 bb4:	2102      	movs	r1, #2
 bb6:	430a      	orrs	r2, r1
 bb8:	731a      	strb	r2, [r3, #12]
 bba:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
 bbc:	b252      	sxtb	r2, r2
 bbe:	2a00      	cmp	r2, #0
 bc0:	dbfb      	blt.n	bba <main+0x1e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
 bc2:	2501      	movs	r5, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
 bc4:	2404      	movs	r4, #4
		status_flags |= ADC_STATUS_WINDOW;
 bc6:	2002      	movs	r0, #2
 bc8:	e001      	b.n	bce <main+0x32>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
 bca:	4215      	tst	r5, r2
 bcc:	d10a      	bne.n	be4 <main+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
 bce:	7e19      	ldrb	r1, [r3, #24]
 bd0:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
 bd2:	002a      	movs	r2, r5
 bd4:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
 bd6:	420c      	tst	r4, r1
 bd8:	d000      	beq.n	bdc <main+0x40>
		status_flags |= ADC_STATUS_WINDOW;
 bda:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
 bdc:	4208      	tst	r0, r1
 bde:	d0f4      	beq.n	bca <main+0x2e>
		status_flags |= ADC_STATUS_OVERRUN;
 be0:	4322      	orrs	r2, r4
 be2:	e7f2      	b.n	bca <main+0x2e>
 be4:	7e5a      	ldrb	r2, [r3, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
 be6:	b252      	sxtb	r2, r2
 be8:	2a00      	cmp	r2, #0
 bea:	dbfb      	blt.n	be4 <main+0x48>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
 bec:	8b5a      	ldrh	r2, [r3, #26]
	adc_module->INTFLAG.reg = int_flags;
 bee:	2201      	movs	r2, #1
 bf0:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
 bf2:	7e19      	ldrb	r1, [r3, #24]
 bf4:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
 bf6:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
 bf8:	0748      	lsls	r0, r1, #29
 bfa:	d501      	bpl.n	c00 <main+0x64>
		status_flags |= ADC_STATUS_WINDOW;
 bfc:	2002      	movs	r0, #2
 bfe:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
 c00:	0789      	lsls	r1, r1, #30
 c02:	d501      	bpl.n	c08 <main+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
 c04:	2104      	movs	r1, #4
 c06:	430a      	orrs	r2, r1

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
 c08:	0752      	lsls	r2, r2, #29
 c0a:	d501      	bpl.n	c10 <main+0x74>
	adc_module->INTFLAG.reg = int_flags;
 c0c:	2202      	movs	r2, #2
 c0e:	761a      	strb	r2, [r3, #24]
 c10:	e7fe      	b.n	c10 <main+0x74>
 c12:	46c0      	nop			; (mov r8, r8)
 c14:	00000a39 	.word	0x00000a39
 c18:	00000b4d 	.word	0x00000b4d
 c1c:	20000040 	.word	0x20000040

00000c20 <__libc_init_array>:
 c20:	b570      	push	{r4, r5, r6, lr}
 c22:	2600      	movs	r6, #0
 c24:	4d0c      	ldr	r5, [pc, #48]	; (c58 <__libc_init_array+0x38>)
 c26:	4c0d      	ldr	r4, [pc, #52]	; (c5c <__libc_init_array+0x3c>)
 c28:	1b64      	subs	r4, r4, r5
 c2a:	10a4      	asrs	r4, r4, #2
 c2c:	42a6      	cmp	r6, r4
 c2e:	d109      	bne.n	c44 <__libc_init_array+0x24>
 c30:	2600      	movs	r6, #0
 c32:	f000 f8c7 	bl	dc4 <_init>
 c36:	4d0a      	ldr	r5, [pc, #40]	; (c60 <__libc_init_array+0x40>)
 c38:	4c0a      	ldr	r4, [pc, #40]	; (c64 <__libc_init_array+0x44>)
 c3a:	1b64      	subs	r4, r4, r5
 c3c:	10a4      	asrs	r4, r4, #2
 c3e:	42a6      	cmp	r6, r4
 c40:	d105      	bne.n	c4e <__libc_init_array+0x2e>
 c42:	bd70      	pop	{r4, r5, r6, pc}
 c44:	00b3      	lsls	r3, r6, #2
 c46:	58eb      	ldr	r3, [r5, r3]
 c48:	4798      	blx	r3
 c4a:	3601      	adds	r6, #1
 c4c:	e7ee      	b.n	c2c <__libc_init_array+0xc>
 c4e:	00b3      	lsls	r3, r6, #2
 c50:	58eb      	ldr	r3, [r5, r3]
 c52:	4798      	blx	r3
 c54:	3601      	adds	r6, #1
 c56:	e7f2      	b.n	c3e <__libc_init_array+0x1e>
 c58:	00000dd0 	.word	0x00000dd0
 c5c:	00000dd0 	.word	0x00000dd0
 c60:	00000dd0 	.word	0x00000dd0
 c64:	00000dd4 	.word	0x00000dd4

00000c68 <memcpy>:
 c68:	2300      	movs	r3, #0
 c6a:	b510      	push	{r4, lr}
 c6c:	429a      	cmp	r2, r3
 c6e:	d100      	bne.n	c72 <memcpy+0xa>
 c70:	bd10      	pop	{r4, pc}
 c72:	5ccc      	ldrb	r4, [r1, r3]
 c74:	54c4      	strb	r4, [r0, r3]
 c76:	3301      	adds	r3, #1
 c78:	e7f8      	b.n	c6c <memcpy+0x4>
 c7a:	0000      	movs	r0, r0
 c7c:	000003a2 	.word	0x000003a2
 c80:	000005e8 	.word	0x000005e8
 c84:	000005e8 	.word	0x000005e8
 c88:	000005e8 	.word	0x000005e8
 c8c:	000005e8 	.word	0x000005e8
 c90:	000005e8 	.word	0x000005e8
 c94:	000005e8 	.word	0x000005e8
 c98:	000005e8 	.word	0x000005e8
 c9c:	000005e8 	.word	0x000005e8
 ca0:	000005e8 	.word	0x000005e8
 ca4:	000005e8 	.word	0x000005e8
 ca8:	000005e8 	.word	0x000005e8
 cac:	000005e8 	.word	0x000005e8
 cb0:	000005e8 	.word	0x000005e8
 cb4:	000005e8 	.word	0x000005e8
 cb8:	000005e8 	.word	0x000005e8
 cbc:	0000038a 	.word	0x0000038a
 cc0:	000005e8 	.word	0x000005e8
 cc4:	000005e8 	.word	0x000005e8
 cc8:	000005e8 	.word	0x000005e8
 ccc:	000005e8 	.word	0x000005e8
 cd0:	000005e8 	.word	0x000005e8
 cd4:	000005e8 	.word	0x000005e8
 cd8:	000005e8 	.word	0x000005e8
 cdc:	000005e8 	.word	0x000005e8
 ce0:	000005e8 	.word	0x000005e8
 ce4:	000005e8 	.word	0x000005e8
 ce8:	000005e8 	.word	0x000005e8
 cec:	000005e8 	.word	0x000005e8
 cf0:	000005e8 	.word	0x000005e8
 cf4:	000005e8 	.word	0x000005e8
 cf8:	000005e8 	.word	0x000005e8
 cfc:	0000039a 	.word	0x0000039a
 d00:	000005e8 	.word	0x000005e8
 d04:	000005e8 	.word	0x000005e8
 d08:	000005e8 	.word	0x000005e8
 d0c:	000005e8 	.word	0x000005e8
 d10:	000005e8 	.word	0x000005e8
 d14:	000005e8 	.word	0x000005e8
 d18:	000005e8 	.word	0x000005e8
 d1c:	000005e8 	.word	0x000005e8
 d20:	000005e8 	.word	0x000005e8
 d24:	000005e8 	.word	0x000005e8
 d28:	000005e8 	.word	0x000005e8
 d2c:	000005e8 	.word	0x000005e8
 d30:	000005e8 	.word	0x000005e8
 d34:	000005e8 	.word	0x000005e8
 d38:	000005e8 	.word	0x000005e8
 d3c:	00000392 	.word	0x00000392
 d40:	000003aa 	.word	0x000003aa
 d44:	00000372 	.word	0x00000372
 d48:	00000382 	.word	0x00000382
 d4c:	0000037a 	.word	0x0000037a
 d50:	00000002 	.word	0x00000002
 d54:	00000003 	.word	0x00000003
 d58:	00000028 	.word	0x00000028
 d5c:	00000029 	.word	0x00000029
 d60:	00000004 	.word	0x00000004
 d64:	00000005 	.word	0x00000005
 d68:	00000006 	.word	0x00000006
 d6c:	00000007 	.word	0x00000007
 d70:	00000020 	.word	0x00000020
 d74:	00000021 	.word	0x00000021
 d78:	00000022 	.word	0x00000022
 d7c:	00000023 	.word	0x00000023
 d80:	00000024 	.word	0x00000024
 d84:	00000025 	.word	0x00000025
 d88:	00000026 	.word	0x00000026
 d8c:	00000027 	.word	0x00000027
 d90:	00000008 	.word	0x00000008
 d94:	00000009 	.word	0x00000009
 d98:	0000000a 	.word	0x0000000a
 d9c:	0000000b 	.word	0x0000000b
 da0:	00000680 	.word	0x00000680
 da4:	00000660 	.word	0x00000660
 da8:	00000660 	.word	0x00000660
 dac:	000006ec 	.word	0x000006ec
 db0:	00000672 	.word	0x00000672
 db4:	0000068e 	.word	0x0000068e
 db8:	00000664 	.word	0x00000664
 dbc:	0000069c 	.word	0x0000069c
 dc0:	000006dc 	.word	0x000006dc

00000dc4 <_init>:
 dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 dc6:	46c0      	nop			; (mov r8, r8)
 dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 dca:	bc08      	pop	{r3}
 dcc:	469e      	mov	lr, r3
 dce:	4770      	bx	lr

00000dd0 <__init_array_start>:
 dd0:	000000dd 	.word	0x000000dd

00000dd4 <_fini>:
 dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 dd6:	46c0      	nop			; (mov r8, r8)
 dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 dda:	bc08      	pop	{r3}
 ddc:	469e      	mov	lr, r3
 dde:	4770      	bx	lr

00000de0 <__fini_array_start>:
 de0:	000000b5 	.word	0x000000b5
